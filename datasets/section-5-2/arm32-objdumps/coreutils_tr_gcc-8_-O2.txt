
../repos/coreutils/src/tr:     file format elf32-littlearm


Disassembly of section .init:

00010c84 <.init>:
   10c84:	push	{r3, lr}
   10c88:	bl	11c98 <__assert_fail@plt+0xd84>
   10c8c:	pop	{r3, pc}

Disassembly of section .plt:

00010c90 <calloc@plt-0x14>:
   10c90:	push	{lr}		; (str lr, [sp, #-4]!)
   10c94:	ldr	lr, [pc, #4]	; 10ca0 <calloc@plt-0x4>
   10c98:	add	lr, pc, lr
   10c9c:	ldr	pc, [lr, #8]!
   10ca0:	andeq	r8, r1, r0, ror #6

00010ca4 <calloc@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #24, 20	; 0x18000
   10cac:	ldr	pc, [ip, #864]!	; 0x360

00010cb0 <fputs_unlocked@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #24, 20	; 0x18000
   10cb8:	ldr	pc, [ip, #856]!	; 0x358

00010cbc <strcmp@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #24, 20	; 0x18000
   10cc4:	ldr	pc, [ip, #848]!	; 0x350

00010cc8 <posix_fadvise64@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #24, 20	; 0x18000
   10cd0:	ldr	pc, [ip, #840]!	; 0x348

00010cd4 <read@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #24, 20	; 0x18000
   10cdc:	ldr	pc, [ip, #832]!	; 0x340

00010ce0 <fflush@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #24, 20	; 0x18000
   10ce8:	ldr	pc, [ip, #824]!	; 0x338

00010cec <free@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #24, 20	; 0x18000
   10cf4:	ldr	pc, [ip, #816]!	; 0x330

00010cf8 <_exit@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #24, 20	; 0x18000
   10d00:	ldr	pc, [ip, #808]!	; 0x328

00010d04 <memcpy@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #24, 20	; 0x18000
   10d0c:	ldr	pc, [ip, #800]!	; 0x320

00010d10 <__strtoull_internal@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #24, 20	; 0x18000
   10d18:	ldr	pc, [ip, #792]!	; 0x318

00010d1c <mbsinit@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #24, 20	; 0x18000
   10d24:	ldr	pc, [ip, #784]!	; 0x310

00010d28 <fwrite_unlocked@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #24, 20	; 0x18000
   10d30:	ldr	pc, [ip, #776]!	; 0x308

00010d34 <memcmp@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #24, 20	; 0x18000
   10d3c:	ldr	pc, [ip, #768]!	; 0x300

00010d40 <stpcpy@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #24, 20	; 0x18000
   10d48:	ldr	pc, [ip, #760]!	; 0x2f8

00010d4c <fputc_unlocked@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #24, 20	; 0x18000
   10d54:	ldr	pc, [ip, #752]!	; 0x2f0

00010d58 <dcgettext@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #24, 20	; 0x18000
   10d60:	ldr	pc, [ip, #744]!	; 0x2e8

00010d64 <realloc@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #24, 20	; 0x18000
   10d6c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d70 <textdomain@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #24, 20	; 0x18000
   10d78:	ldr	pc, [ip, #728]!	; 0x2d8

00010d7c <iswprint@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #24, 20	; 0x18000
   10d84:	ldr	pc, [ip, #720]!	; 0x2d0

00010d88 <fwrite@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #24, 20	; 0x18000
   10d90:	ldr	pc, [ip, #712]!	; 0x2c8

00010d94 <lseek64@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #24, 20	; 0x18000
   10d9c:	ldr	pc, [ip, #704]!	; 0x2c0

00010da0 <__ctype_get_mb_cur_max@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #24, 20	; 0x18000
   10da8:	ldr	pc, [ip, #696]!	; 0x2b8

00010dac <__fpending@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #24, 20	; 0x18000
   10db4:	ldr	pc, [ip, #688]!	; 0x2b0

00010db8 <mbrtowc@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #24, 20	; 0x18000
   10dc0:	ldr	pc, [ip, #680]!	; 0x2a8

00010dc4 <error@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #24, 20	; 0x18000
   10dcc:	ldr	pc, [ip, #672]!	; 0x2a0

00010dd0 <malloc@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #24, 20	; 0x18000
   10dd8:	ldr	pc, [ip, #664]!	; 0x298

00010ddc <__libc_start_main@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #24, 20	; 0x18000
   10de4:	ldr	pc, [ip, #656]!	; 0x290

00010de8 <__freading@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #24, 20	; 0x18000
   10df0:	ldr	pc, [ip, #648]!	; 0x288

00010df4 <__ctype_tolower_loc@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #24, 20	; 0x18000
   10dfc:	ldr	pc, [ip, #640]!	; 0x280

00010e00 <__ctype_toupper_loc@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #24, 20	; 0x18000
   10e08:	ldr	pc, [ip, #632]!	; 0x278

00010e0c <__gmon_start__@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #24, 20	; 0x18000
   10e14:	ldr	pc, [ip, #624]!	; 0x270

00010e18 <getopt_long@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #24, 20	; 0x18000
   10e20:	ldr	pc, [ip, #616]!	; 0x268

00010e24 <__ctype_b_loc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #24, 20	; 0x18000
   10e2c:	ldr	pc, [ip, #608]!	; 0x260

00010e30 <exit@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #24, 20	; 0x18000
   10e38:	ldr	pc, [ip, #600]!	; 0x258

00010e3c <strlen@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #24, 20	; 0x18000
   10e44:	ldr	pc, [ip, #592]!	; 0x250

00010e48 <strchr@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #24, 20	; 0x18000
   10e50:	ldr	pc, [ip, #584]!	; 0x248

00010e54 <__errno_location@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #24, 20	; 0x18000
   10e5c:	ldr	pc, [ip, #576]!	; 0x240

00010e60 <__sprintf_chk@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #24, 20	; 0x18000
   10e68:	ldr	pc, [ip, #568]!	; 0x238

00010e6c <__cxa_atexit@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #24, 20	; 0x18000
   10e74:	ldr	pc, [ip, #560]!	; 0x230

00010e78 <memset@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #24, 20	; 0x18000
   10e80:	ldr	pc, [ip, #552]!	; 0x228

00010e84 <__printf_chk@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #24, 20	; 0x18000
   10e8c:	ldr	pc, [ip, #544]!	; 0x220

00010e90 <fileno@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #24, 20	; 0x18000
   10e98:	ldr	pc, [ip, #536]!	; 0x218

00010e9c <__fprintf_chk@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #24, 20	; 0x18000
   10ea4:	ldr	pc, [ip, #528]!	; 0x210

00010ea8 <fclose@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #24, 20	; 0x18000
   10eb0:	ldr	pc, [ip, #520]!	; 0x208

00010eb4 <fseeko64@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #24, 20	; 0x18000
   10ebc:	ldr	pc, [ip, #512]!	; 0x200

00010ec0 <setlocale@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #504]!	; 0x1f8

00010ecc <strrchr@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #496]!	; 0x1f0

00010ed8 <nl_langinfo@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #488]!	; 0x1e8

00010ee4 <bindtextdomain@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #480]!	; 0x1e0

00010ef0 <strncmp@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #472]!	; 0x1d8

00010efc <abort@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #464]!	; 0x1d0

00010f08 <close@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #456]!	; 0x1c8

00010f14 <__assert_fail@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #448]!	; 0x1c0

Disassembly of section .text:

00010f20 <.text>:
   10f20:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10f24:	movw	r4, #34024	; 0x84e8
   10f28:	movt	r4, #1
   10f2c:	strd	r6, [sp, #8]
   10f30:	mov	r6, r0
   10f34:	movw	r7, #37212	; 0x915c
   10f38:	movt	r7, #2
   10f3c:	strd	r8, [sp, #16]
   10f40:	mov	r8, r1
   10f44:	strd	sl, [sp, #24]
   10f48:	str	lr, [sp, #32]
   10f4c:	sub	sp, sp, #404	; 0x194
   10f50:	ldr	r0, [r1]
   10f54:	bl	13874 <__assert_fail@plt+0x2960>
   10f58:	movw	r1, #32316	; 0x7e3c
   10f5c:	movt	r1, #1
   10f60:	ldr	r9, [pc, #3292]	; 11c44 <__assert_fail@plt+0xd30>
   10f64:	mov	r0, #6
   10f68:	bl	10ec0 <setlocale@plt>
   10f6c:	movw	r1, #33980	; 0x84bc
   10f70:	movt	r1, #1
   10f74:	movw	r0, #33700	; 0x83a4
   10f78:	movt	r0, #1
   10f7c:	bl	10ee4 <bindtextdomain@plt>
   10f80:	movw	r0, #33700	; 0x83a4
   10f84:	movt	r0, #1
   10f88:	bl	10d70 <textdomain@plt>
   10f8c:	movw	r0, #14036	; 0x36d4
   10f90:	movt	r0, #1
   10f94:	bl	175e0 <__assert_fail@plt+0x66cc>
   10f98:	mov	r5, #0
   10f9c:	mov	r3, r9
   10fa0:	mov	r2, r4
   10fa4:	mov	r1, r8
   10fa8:	mov	r0, r6
   10fac:	str	r5, [sp]
   10fb0:	bl	10e18 <getopt_long@plt>
   10fb4:	cmn	r0, #1
   10fb8:	beq	110a0 <__assert_fail@plt+0x18c>
   10fbc:	cmp	r0, #67	; 0x43
   10fc0:	beq	11038 <__assert_fail@plt+0x124>
   10fc4:	ble	10fe8 <__assert_fail@plt+0xd4>
   10fc8:	cmp	r0, #100	; 0x64
   10fcc:	beq	11054 <__assert_fail@plt+0x140>
   10fd0:	ble	11030 <__assert_fail@plt+0x11c>
   10fd4:	cmp	r0, #115	; 0x73
   10fd8:	bne	1101c <__assert_fail@plt+0x108>
   10fdc:	mov	r3, #1
   10fe0:	strb	r3, [r7, #770]	; 0x302
   10fe4:	b	10f98 <__assert_fail@plt+0x84>
   10fe8:	cmn	r0, #2
   10fec:	beq	11a80 <__assert_fail@plt+0xb6c>
   10ff0:	cmp	r0, #65	; 0x41
   10ff4:	bne	11044 <__assert_fail@plt+0x130>
   10ff8:	movw	r1, #34004	; 0x84d4
   10ffc:	movt	r1, #1
   11000:	mov	r0, #3
   11004:	bl	10ec0 <setlocale@plt>
   11008:	mov	r0, r5
   1100c:	movw	r1, #34004	; 0x84d4
   11010:	movt	r1, #1
   11014:	bl	10ec0 <setlocale@plt>
   11018:	b	10f98 <__assert_fail@plt+0x84>
   1101c:	cmp	r0, #116	; 0x74
   11020:	bne	1104c <__assert_fail@plt+0x138>
   11024:	mov	r3, #1
   11028:	strb	r3, [r7, #771]	; 0x303
   1102c:	b	10f98 <__assert_fail@plt+0x84>
   11030:	cmp	r0, #99	; 0x63
   11034:	bne	1104c <__assert_fail@plt+0x138>
   11038:	mov	r3, #1
   1103c:	strb	r3, [r7, #768]	; 0x300
   11040:	b	10f98 <__assert_fail@plt+0x84>
   11044:	cmn	r0, #3
   11048:	beq	11060 <__assert_fail@plt+0x14c>
   1104c:	mov	r0, #1
   11050:	bl	1332c <__assert_fail@plt+0x2418>
   11054:	mov	r3, #1
   11058:	strb	r3, [r7, #769]	; 0x301
   1105c:	b	10f98 <__assert_fail@plt+0x84>
   11060:	movw	r2, #34008	; 0x84d8
   11064:	movt	r2, #1
   11068:	movw	r3, #37100	; 0x90ec
   1106c:	movt	r3, #2
   11070:	movw	r0, #37204	; 0x9154
   11074:	movt	r0, #2
   11078:	stm	sp, {r2, r5}
   1107c:	movw	r1, #31264	; 0x7a20
   11080:	movt	r1, #1
   11084:	ldr	r0, [r0]
   11088:	movw	r2, #33696	; 0x83a0
   1108c:	movt	r2, #1
   11090:	ldr	r3, [r3]
   11094:	bl	16084 <__assert_fail@plt+0x5170>
   11098:	mov	r0, r5
   1109c:	bl	10e30 <exit@plt>
   110a0:	movw	r9, #37184	; 0x9140
   110a4:	movt	r9, #2
   110a8:	ldr	r4, [r9]
   110ac:	movw	r7, #37212	; 0x915c
   110b0:	movt	r7, #2
   110b4:	ldrb	r3, [r7, #769]	; 0x301
   110b8:	ldrb	sl, [r7, #770]	; 0x302
   110bc:	sub	r4, r6, r4
   110c0:	cmp	r4, #2
   110c4:	beq	114b8 <__assert_fail@plt+0x5a4>
   110c8:	cmp	sl, r3
   110cc:	strb	r5, [r7, #772]	; 0x304
   110d0:	beq	11580 <__assert_fail@plt+0x66c>
   110d4:	cmp	sl, r3
   110d8:	mov	r3, #1
   110dc:	bcs	11a6c <__assert_fail@plt+0xb58>
   110e0:	mov	r5, r3
   110e4:	cmp	r4, r3
   110e8:	blt	11b88 <__assert_fail@plt+0xc74>
   110ec:	cmp	r4, r5
   110f0:	bgt	11b08 <__assert_fail@plt+0xbf4>
   110f4:	mov	r0, #24
   110f8:	mov	r5, #0
   110fc:	bl	16194 <__assert_fail@plt+0x5280>
   11100:	ldr	r3, [r9]
   11104:	add	r6, sp, #64	; 0x40
   11108:	mov	r1, r6
   1110c:	str	r5, [r0, #4]
   11110:	str	r0, [sp, #64]	; 0x40
   11114:	str	r0, [sp, #68]	; 0x44
   11118:	ldr	r0, [r8, r3, lsl #2]
   1111c:	bl	12860 <__assert_fail@plt+0x194c>
   11120:	cmp	r0, r5
   11124:	beq	11498 <__assert_fail@plt+0x584>
   11128:	cmp	r4, #2
   1112c:	beq	11504 <__assert_fail@plt+0x5f0>
   11130:	mov	r0, r6
   11134:	bl	12170 <__assert_fail@plt+0x125c>
   11138:	ldrb	r3, [r7, #768]	; 0x300
   1113c:	cmp	r3, #0
   11140:	bne	11588 <__assert_fail@plt+0x674>
   11144:	ldr	sl, [sp, #88]	; 0x58
   11148:	cmp	sl, #0
   1114c:	movwne	r1, #34168	; 0x8578
   11150:	movtne	r1, #1
   11154:	bne	111ac <__assert_fail@plt+0x298>
   11158:	cmp	r5, #0
   1115c:	beq	1128c <__assert_fail@plt+0x378>
   11160:	mov	r0, r5
   11164:	ldrd	r8, [r6, #16]
   11168:	bl	12170 <__assert_fail@plt+0x125c>
   1116c:	ldrd	r2, [r5, #16]
   11170:	ldr	r1, [r5, #24]
   11174:	cmp	r9, r3
   11178:	cmpeq	r8, r2
   1117c:	bcc	11188 <__assert_fail@plt+0x274>
   11180:	cmp	r1, #1
   11184:	beq	115e8 <__assert_fail@plt+0x6d4>
   11188:	cmp	r1, #1
   1118c:	bhi	11aec <__assert_fail@plt+0xbd8>
   11190:	ldrb	r3, [r7, #772]	; 0x304
   11194:	cmp	r3, #0
   11198:	bne	1160c <__assert_fail@plt+0x6f8>
   1119c:	cmp	r1, #0
   111a0:	beq	1128c <__assert_fail@plt+0x378>
   111a4:	movw	r1, #34808	; 0x87f8
   111a8:	movt	r1, #1
   111ac:	mov	r2, #5
   111b0:	mov	r0, #0
   111b4:	bl	10d58 <dcgettext@plt>
   111b8:	mov	r2, r0
   111bc:	mov	r1, #0
   111c0:	mov	r0, #1
   111c4:	bl	10dc4 <error@plt>
   111c8:	ldrb	r8, [r1, #8]
   111cc:	mov	r0, #24
   111d0:	ldr	r1, [sp, #24]
   111d4:	subs	sl, r1, r2
   111d8:	ldr	r1, [sp, #28]
   111dc:	sbc	r9, r1, r3
   111e0:	bl	16194 <__assert_fail@plt+0x5280>
   111e4:	ldr	r3, [r5, #4]
   111e8:	mov	r1, #0
   111ec:	mov	r2, #4
   111f0:	str	r2, [r0]
   111f4:	str	r1, [r0, #4]
   111f8:	strb	r8, [r0, #8]
   111fc:	cmp	r3, r1
   11200:	str	sl, [r0, #16]
   11204:	str	r9, [r0, #20]
   11208:	beq	11a94 <__assert_fail@plt+0xb80>
   1120c:	ldrb	r1, [r7, #768]	; 0x300
   11210:	str	r0, [r3, #4]
   11214:	ldrd	r2, [r6, #16]
   11218:	str	r0, [r5, #4]
   1121c:	cmp	r1, #0
   11220:	strd	r2, [r5, #16]
   11224:	beq	1128c <__assert_fail@plt+0x378>
   11228:	ldrb	r3, [sp, #97]	; 0x61
   1122c:	cmp	r3, #0
   11230:	beq	1128c <__assert_fail@plt+0x378>
   11234:	ldrd	r0, [r5, #16]
   11238:	ldrd	r2, [r6, #16]
   1123c:	cmp	r1, r3
   11240:	cmpeq	r0, r2
   11244:	bne	11a74 <__assert_fail@plt+0xb60>
   11248:	mvn	r2, #1
   1124c:	mvn	r3, #0
   11250:	mov	r1, #0
   11254:	mov	r0, r5
   11258:	strd	r2, [r5, #8]
   1125c:	bl	12358 <__assert_fail@plt+0x1444>
   11260:	cmn	r0, #1
   11264:	mov	r8, r0
   11268:	bne	11278 <__assert_fail@plt+0x364>
   1126c:	b	11a74 <__assert_fail@plt+0xb60>
   11270:	cmp	r8, r0
   11274:	bne	11a74 <__assert_fail@plt+0xb60>
   11278:	mov	r1, #0
   1127c:	mov	r0, r5
   11280:	bl	12358 <__assert_fail@plt+0x1444>
   11284:	cmn	r0, #1
   11288:	bne	11270 <__assert_fail@plt+0x35c>
   1128c:	movw	r3, #37200	; 0x9150
   11290:	movt	r3, #2
   11294:	mov	r1, #2
   11298:	ldr	r0, [r3]
   1129c:	bl	137c4 <__assert_fail@plt+0x28b0>
   112a0:	ldrb	r3, [r7, #770]	; 0x302
   112a4:	mov	r8, r3
   112a8:	str	r3, [sp, #16]
   112ac:	cmp	r4, #1
   112b0:	movne	r8, #0
   112b4:	andeq	r8, r8, #1
   112b8:	cmp	r8, #0
   112bc:	bne	119d0 <__assert_fail@plt+0xabc>
   112c0:	ldrb	r3, [r7, #769]	; 0x301
   112c4:	cmp	r3, #0
   112c8:	beq	11330 <__assert_fail@plt+0x41c>
   112cc:	cmp	r4, #1
   112d0:	beq	11a10 <__assert_fail@plt+0xafc>
   112d4:	ldr	r3, [sp, #16]
   112d8:	cmp	r4, #2
   112dc:	movne	r3, #0
   112e0:	andeq	r3, r3, #1
   112e4:	cmp	r3, #0
   112e8:	beq	11330 <__assert_fail@plt+0x41c>
   112ec:	ldrb	r1, [r7, #768]	; 0x300
   112f0:	mov	r0, r6
   112f4:	movw	r2, #37212	; 0x915c
   112f8:	movt	r2, #2
   112fc:	bl	13088 <__assert_fail@plt+0x2174>
   11300:	mov	r0, r5
   11304:	mov	r1, r8
   11308:	ldr	r2, [pc, #2360]	; 11c48 <__assert_fail@plt+0xd34>
   1130c:	bl	13088 <__assert_fail@plt+0x2174>
   11310:	movw	r0, #9832	; 0x2668
   11314:	movt	r0, #1
   11318:	bl	13110 <__assert_fail@plt+0x21fc>
   1131c:	mov	r0, #0
   11320:	bl	10f08 <close@plt>
   11324:	cmp	r0, #0
   11328:	bne	11af8 <__assert_fail@plt+0xbe4>
   1132c:	bl	10e30 <exit@plt>
   11330:	ldrb	r3, [r7, #772]	; 0x304
   11334:	cmp	r3, #0
   11338:	beq	1131c <__assert_fail@plt+0x408>
   1133c:	ldrb	r3, [r7, #768]	; 0x300
   11340:	cmp	r3, #0
   11344:	ldreq	r2, [pc, #2304]	; 11c4c <__assert_fail@plt+0xd38>
   11348:	bne	118cc <__assert_fail@plt+0x9b8>
   1134c:	strb	r3, [r2, #1]!
   11350:	add	r3, r3, #1
   11354:	cmp	r3, #256	; 0x100
   11358:	bne	1134c <__assert_fail@plt+0x438>
   1135c:	mvn	r3, #0
   11360:	mvn	r2, #1
   11364:	mvn	r8, #3
   11368:	add	r1, sp, #144	; 0x90
   1136c:	strd	r2, [r5, #8]
   11370:	add	r9, sp, #60	; 0x3c
   11374:	strd	r2, [r6, #8]
   11378:	ldr	r3, [pc, #2256]	; 11c50 <__assert_fail@plt+0xd3c>
   1137c:	str	r1, [sp, #12]
   11380:	mul	r8, r8, r3
   11384:	add	r4, r3, #256	; 0x100
   11388:	b	113b8 <__assert_fail@plt+0x4a4>
   1138c:	ldr	r3, [sp, #144]	; 0x90
   11390:	cmp	r3, #1
   11394:	beq	11540 <__assert_fail@plt+0x62c>
   11398:	cmn	fp, #1
   1139c:	cmnne	r0, #1
   113a0:	beq	117e4 <__assert_fail@plt+0x8d0>
   113a4:	ldr	r3, [sp, #144]	; 0x90
   113a8:	add	fp, r7, fp
   113ac:	strb	r0, [fp, #256]	; 0x100
   113b0:	cmp	r3, #2
   113b4:	bne	11430 <__assert_fail@plt+0x51c>
   113b8:	mov	r1, r9
   113bc:	mov	r0, r6
   113c0:	bl	12358 <__assert_fail@plt+0x1444>
   113c4:	mov	fp, r0
   113c8:	mov	r0, r5
   113cc:	ldr	r1, [sp, #12]
   113d0:	bl	12358 <__assert_fail@plt+0x1444>
   113d4:	ldr	r3, [sp, #60]	; 0x3c
   113d8:	cmp	r3, #0
   113dc:	beq	1138c <__assert_fail@plt+0x478>
   113e0:	cmp	r3, #1
   113e4:	bne	11398 <__assert_fail@plt+0x484>
   113e8:	ldr	r3, [sp, #144]	; 0x90
   113ec:	cmp	r3, #0
   113f0:	bne	11398 <__assert_fail@plt+0x484>
   113f4:	bl	10e24 <__ctype_b_loc@plt>
   113f8:	ldr	fp, [r0]
   113fc:	ldr	sl, [pc, #2124]	; 11c50 <__assert_fail@plt+0xd3c>
   11400:	sub	fp, fp, #2
   11404:	ldrh	r3, [fp, #2]!
   11408:	tst	r3, #256	; 0x100
   1140c:	beq	11424 <__assert_fail@plt+0x510>
   11410:	bl	10df4 <__ctype_tolower_loc@plt>
   11414:	ldr	r3, [r0]
   11418:	add	r3, r3, sl, lsl #2
   1141c:	ldr	r3, [r3, r8]
   11420:	strb	r3, [sl]
   11424:	add	sl, sl, #1
   11428:	cmp	r4, sl
   1142c:	bne	11404 <__assert_fail@plt+0x4f0>
   11430:	ldr	r2, [sp, #68]	; 0x44
   11434:	mvn	r0, #0
   11438:	mvn	r1, #0
   1143c:	ldr	r3, [r5, #4]
   11440:	ldr	r2, [r2, #4]
   11444:	strd	r0, [r6, #8]
   11448:	str	r2, [sp, #68]	; 0x44
   1144c:	ldr	r3, [r3, #4]
   11450:	str	r3, [r5, #4]
   11454:	strd	r0, [r5, #8]
   11458:	b	113b8 <__assert_fail@plt+0x4a4>
   1145c:	cmp	sl, #0
   11460:	strb	r5, [r7, #772]	; 0x304
   11464:	beq	110d4 <__assert_fail@plt+0x1c0>
   11468:	mov	r0, #24
   1146c:	add	r6, sp, #64	; 0x40
   11470:	bl	16194 <__assert_fail@plt+0x5280>
   11474:	ldr	r3, [r9]
   11478:	mov	r1, r6
   1147c:	str	r5, [r0, #4]
   11480:	str	r0, [sp, #64]	; 0x40
   11484:	str	r0, [sp, #68]	; 0x44
   11488:	ldr	r0, [r8, r3, lsl #2]
   1148c:	bl	12860 <__assert_fail@plt+0x194c>
   11490:	cmp	r0, #0
   11494:	bne	11504 <__assert_fail@plt+0x5f0>
   11498:	mov	r0, #1
   1149c:	add	sp, sp, #404	; 0x194
   114a0:	ldrd	r4, [sp]
   114a4:	ldrd	r6, [sp, #8]
   114a8:	ldrd	r8, [sp, #16]
   114ac:	ldrd	sl, [sp, #24]
   114b0:	add	sp, sp, #32
   114b4:	pop	{pc}		; (ldr pc, [sp], #4)
   114b8:	cmp	r3, r5
   114bc:	bne	1145c <__assert_fail@plt+0x548>
   114c0:	mov	r3, #1
   114c4:	cmp	sl, #0
   114c8:	movne	r5, r4
   114cc:	strb	r3, [r7, #772]	; 0x304
   114d0:	bne	110ec <__assert_fail@plt+0x1d8>
   114d4:	mov	r0, #24
   114d8:	add	r6, sp, #64	; 0x40
   114dc:	bl	16194 <__assert_fail@plt+0x5280>
   114e0:	ldr	r3, [r9]
   114e4:	mov	r1, r6
   114e8:	str	sl, [r0, #4]
   114ec:	str	r0, [sp, #64]	; 0x40
   114f0:	str	r0, [sp, #68]	; 0x44
   114f4:	ldr	r0, [r8, r3, lsl #2]
   114f8:	bl	12860 <__assert_fail@plt+0x194c>
   114fc:	cmp	r0, #0
   11500:	beq	11498 <__assert_fail@plt+0x584>
   11504:	mov	r0, #24
   11508:	bl	16194 <__assert_fail@plt+0x5280>
   1150c:	ldr	r3, [r9]
   11510:	mov	r2, #0
   11514:	add	r1, sp, #104	; 0x68
   11518:	str	r0, [sp, #104]	; 0x68
   1151c:	str	r2, [r0, #4]
   11520:	str	r0, [sp, #108]	; 0x6c
   11524:	add	r3, r3, #1
   11528:	ldr	r0, [r8, r3, lsl #2]
   1152c:	bl	12860 <__assert_fail@plt+0x194c>
   11530:	cmp	r0, #0
   11534:	beq	11498 <__assert_fail@plt+0x584>
   11538:	add	r5, sp, #104	; 0x68
   1153c:	b	11130 <__assert_fail@plt+0x21c>
   11540:	bl	10e24 <__ctype_b_loc@plt>
   11544:	ldr	fp, [r0]
   11548:	ldr	sl, [pc, #1792]	; 11c50 <__assert_fail@plt+0xd3c>
   1154c:	sub	fp, fp, #2
   11550:	ldrh	r3, [fp, #2]!
   11554:	tst	r3, #512	; 0x200
   11558:	beq	11570 <__assert_fail@plt+0x65c>
   1155c:	bl	10e00 <__ctype_toupper_loc@plt>
   11560:	ldr	r3, [r0]
   11564:	add	r3, r3, sl, lsl #2
   11568:	ldr	r3, [r3, r8]
   1156c:	strb	r3, [sl]
   11570:	add	sl, sl, #1
   11574:	cmp	r4, sl
   11578:	bne	11550 <__assert_fail@plt+0x63c>
   1157c:	b	11430 <__assert_fail@plt+0x51c>
   11580:	mov	r3, #2
   11584:	b	110e0 <__assert_fail@plt+0x1cc>
   11588:	mov	r2, #256	; 0x100
   1158c:	mov	r1, #0
   11590:	add	r0, sp, #144	; 0x90
   11594:	mov	r8, r2
   11598:	bl	10e78 <memset@plt>
   1159c:	mvn	r2, #1
   115a0:	mvn	r3, #0
   115a4:	mov	r9, #1
   115a8:	strd	r2, [r6, #8]
   115ac:	b	115c8 <__assert_fail@plt+0x6b4>
   115b0:	add	r3, sp, #400	; 0x190
   115b4:	add	r0, r3, r0
   115b8:	ldrb	r3, [r0, #-256]	; 0xffffff00
   115bc:	strb	r9, [r0, #-256]	; 0xffffff00
   115c0:	eor	r3, r3, #1
   115c4:	sub	r8, r8, r3
   115c8:	mov	r1, #0
   115cc:	mov	r0, r6
   115d0:	bl	12358 <__assert_fail@plt+0x1444>
   115d4:	cmn	r0, #1
   115d8:	bne	115b0 <__assert_fail@plt+0x69c>
   115dc:	asr	r9, r8, #31
   115e0:	strd	r8, [r6, #16]
   115e4:	b	11144 <__assert_fail@plt+0x230>
   115e8:	subs	r1, r8, r2
   115ec:	ldrb	r0, [r7, #772]	; 0x304
   115f0:	sbc	r2, r9, r3
   115f4:	ldr	r3, [r5, #28]
   115f8:	cmp	r0, #0
   115fc:	str	r1, [r3, #16]
   11600:	str	r2, [r3, #20]
   11604:	strd	r8, [r5, #16]
   11608:	beq	111a4 <__assert_fail@plt+0x290>
   1160c:	ldrb	r8, [r5, #32]
   11610:	cmp	r8, #0
   11614:	movwne	r1, #34276	; 0x85e4
   11618:	movtne	r1, #1
   1161c:	bne	111ac <__assert_fail@plt+0x298>
   11620:	ldrb	r3, [r5, #34]	; 0x22
   11624:	cmp	r3, #0
   11628:	movwne	r1, #34340	; 0x8624
   1162c:	movtne	r1, #1
   11630:	bne	111ac <__assert_fail@plt+0x298>
   11634:	ldrb	r8, [r7, #768]	; 0x300
   11638:	ldrd	r2, [r5, #16]
   1163c:	ldrd	r0, [r6, #16]
   11640:	cmp	r8, #0
   11644:	strd	r0, [sp, #24]
   11648:	strd	r2, [sp, #32]
   1164c:	bne	119f0 <__assert_fail@plt+0xadc>
   11650:	ldrb	fp, [r5, #33]	; 0x21
   11654:	cmp	fp, #0
   11658:	beq	1184c <__assert_fail@plt+0x938>
   1165c:	bl	10e24 <__ctype_b_loc@plt>
   11660:	ldr	r3, [r0]
   11664:	add	r2, r3, #508	; 0x1fc
   11668:	sub	r3, r3, #2
   1166c:	add	r2, r2, #2
   11670:	ldrh	r1, [r3, #2]!
   11674:	tst	r1, #256	; 0x100
   11678:	addne	sl, sl, #1
   1167c:	tst	r1, #512	; 0x200
   11680:	addne	r8, r8, #1
   11684:	cmp	r2, r3
   11688:	bne	11670 <__assert_fail@plt+0x75c>
   1168c:	ldr	ip, [r5, #4]
   11690:	sub	r0, sl, #1
   11694:	mvn	r2, #1
   11698:	add	r9, sp, #60	; 0x3c
   1169c:	sub	r1, r8, #1
   116a0:	ldr	r3, [sp, #68]	; 0x44
   116a4:	mov	r8, fp
   116a8:	mov	sl, r6
   116ac:	str	r0, [sp, #16]
   116b0:	str	r9, [sp, #20]
   116b4:	mov	r9, fp
   116b8:	str	r3, [sp, #40]	; 0x28
   116bc:	mvn	r3, #0
   116c0:	str	ip, [sp, #44]	; 0x2c
   116c4:	add	ip, sp, #144	; 0x90
   116c8:	strd	r2, [r5, #8]
   116cc:	strd	r2, [r6, #8]
   116d0:	str	ip, [sp, #12]
   116d4:	str	r4, [sp, #48]	; 0x30
   116d8:	mov	r4, r1
   116dc:	str	r7, [sp, #52]	; 0x34
   116e0:	b	117ac <__assert_fail@plt+0x898>
   116e4:	cmp	r3, #2
   116e8:	beq	11770 <__assert_fail@plt+0x85c>
   116ec:	cmp	r8, #0
   116f0:	beq	11ae0 <__assert_fail@plt+0xbcc>
   116f4:	ldr	r2, [sp, #60]	; 0x3c
   116f8:	cmp	r2, #2
   116fc:	beq	11ae0 <__assert_fail@plt+0xbcc>
   11700:	cmp	r2, #1
   11704:	ldr	r2, [sp, #16]
   11708:	movne	r1, r4
   1170c:	ldrd	r8, [sl, #16]
   11710:	ldr	ip, [sp, #68]	; 0x44
   11714:	moveq	r1, r2
   11718:	ldr	r2, [r5, #4]
   1171c:	subs	r6, r8, r1
   11720:	mvn	r8, #0
   11724:	sbc	r7, r9, #0
   11728:	cmp	r3, #1
   1172c:	ldr	r3, [sp, #16]
   11730:	mvn	r9, #0
   11734:	movne	r1, r4
   11738:	ldr	ip, [ip, #4]
   1173c:	strd	r8, [sl, #8]
   11740:	moveq	r1, r3
   11744:	str	ip, [sp, #68]	; 0x44
   11748:	ldr	ip, [r2, #4]
   1174c:	ldrd	r2, [r5, #16]
   11750:	strd	r8, [r5, #8]
   11754:	mov	r8, r6
   11758:	mov	r9, r7
   1175c:	str	ip, [r5, #4]
   11760:	subs	r2, r2, r1
   11764:	strd	r8, [sl, #16]
   11768:	sbc	r3, r3, #0
   1176c:	strd	r2, [r5, #16]
   11770:	ldr	r8, [sl, #8]
   11774:	ldr	r2, [sl, #12]
   11778:	ldr	r9, [r5, #8]
   1177c:	ldr	r3, [r5, #12]
   11780:	and	r8, r8, r2
   11784:	cmn	r8, #1
   11788:	movne	r8, #0
   1178c:	moveq	r8, #1
   11790:	and	r9, r9, r3
   11794:	cmn	r9, #1
   11798:	movne	r9, #0
   1179c:	moveq	r9, #1
   117a0:	cmn	r0, #1
   117a4:	cmnne	fp, #1
   117a8:	beq	11970 <__assert_fail@plt+0xa5c>
   117ac:	mov	r0, sl
   117b0:	ldr	r1, [sp, #20]
   117b4:	bl	12358 <__assert_fail@plt+0x1444>
   117b8:	mov	fp, r0
   117bc:	mov	r0, r5
   117c0:	ldr	r1, [sp, #12]
   117c4:	bl	12358 <__assert_fail@plt+0x1444>
   117c8:	cmp	r9, #0
   117cc:	ldr	r3, [sp, #144]	; 0x90
   117d0:	bne	116e4 <__assert_fail@plt+0x7d0>
   117d4:	cmp	r3, #2
   117d8:	beq	11770 <__assert_fail@plt+0x85c>
   117dc:	ldr	r2, [sp, #60]	; 0x3c
   117e0:	b	11700 <__assert_fail@plt+0x7ec>
   117e4:	cmn	fp, #1
   117e8:	beq	117f8 <__assert_fail@plt+0x8e4>
   117ec:	ldrb	r3, [r7, #771]	; 0x303
   117f0:	cmp	r3, #0
   117f4:	beq	11ac4 <__assert_fail@plt+0xbb0>
   117f8:	ldr	r3, [sp, #16]
   117fc:	cmp	r3, #0
   11800:	bne	118ac <__assert_fail@plt+0x998>
   11804:	movw	r5, #37988	; 0x9464
   11808:	movt	r5, #2
   1180c:	movw	r6, #37204	; 0x9154
   11810:	movt	r6, #2
   11814:	b	11834 <__assert_fail@plt+0x920>
   11818:	mov	r2, r4
   1181c:	mov	r1, #1
   11820:	ldr	r3, [r6]
   11824:	mov	r0, r5
   11828:	bl	10d28 <fwrite_unlocked@plt>
   1182c:	cmp	r4, r0
   11830:	bne	11a98 <__assert_fail@plt+0xb84>
   11834:	mov	r1, #8192	; 0x2000
   11838:	mov	r0, r5
   1183c:	bl	12764 <__assert_fail@plt+0x1850>
   11840:	subs	r4, r0, #0
   11844:	bne	11818 <__assert_fail@plt+0x904>
   11848:	b	1131c <__assert_fail@plt+0x408>
   1184c:	ldrd	r0, [r6, #16]
   11850:	cmp	r3, r1
   11854:	strd	r0, [sp, #24]
   11858:	cmpeq	r2, r0
   1185c:	bcs	1128c <__assert_fail@plt+0x378>
   11860:	ldrb	r1, [r7, #771]	; 0x303
   11864:	cmp	r1, #0
   11868:	bne	1128c <__assert_fail@plt+0x378>
   1186c:	orrs	r1, r2, r3
   11870:	movweq	r1, #34540	; 0x86ec
   11874:	movteq	r1, #1
   11878:	beq	111ac <__assert_fail@plt+0x298>
   1187c:	ldr	r1, [r5, #4]
   11880:	ldr	r0, [r1]
   11884:	cmp	r0, #4
   11888:	ldrls	pc, [pc, r0, lsl #2]
   1188c:	b	11c40 <__assert_fail@plt+0xd2c>
   11890:	andeq	r1, r1, r8, asr #3
   11894:	andeq	r1, r1, r4, lsr #17
   11898:	andeq	r1, r1, r8, lsl #21
   1189c:	andeq	r1, r1, r0, asr #24
   118a0:	andeq	r1, r1, r8, asr #3
   118a4:	ldrb	r8, [r1, #9]
   118a8:	b	111cc <__assert_fail@plt+0x2b8>
   118ac:	mov	r0, r5
   118b0:	ldr	r2, [pc, #912]	; 11c48 <__assert_fail@plt+0xd34>
   118b4:	mov	r1, #0
   118b8:	bl	13088 <__assert_fail@plt+0x2174>
   118bc:	movw	r0, #10084	; 0x2764
   118c0:	movt	r0, #1
   118c4:	bl	13110 <__assert_fail@plt+0x21fc>
   118c8:	b	1131c <__assert_fail@plt+0x408>
   118cc:	mov	r0, r6
   118d0:	mov	r1, #0
   118d4:	movw	r2, #37212	; 0x915c
   118d8:	movt	r2, #2
   118dc:	bl	13088 <__assert_fail@plt+0x2174>
   118e0:	ldr	r2, [pc, #868]	; 11c4c <__assert_fail@plt+0xd38>
   118e4:	mvn	r0, #1
   118e8:	mvn	r1, #0
   118ec:	mov	r3, #0
   118f0:	strd	r0, [r5, #8]
   118f4:	strb	r3, [r2, #1]!
   118f8:	add	r3, r3, #1
   118fc:	cmp	r3, #256	; 0x100
   11900:	bne	118f4 <__assert_fail@plt+0x9e0>
   11904:	movw	r6, #37212	; 0x915c
   11908:	movt	r6, #2
   1190c:	add	r8, r6, #256	; 0x100
   11910:	mov	r4, #0
   11914:	b	11924 <__assert_fail@plt+0xa10>
   11918:	add	r4, r4, #1
   1191c:	cmp	r4, #256	; 0x100
   11920:	beq	117f8 <__assert_fail@plt+0x8e4>
   11924:	ldrb	r1, [r6], #1
   11928:	cmp	r1, #0
   1192c:	bne	11918 <__assert_fail@plt+0xa04>
   11930:	mov	r0, r5
   11934:	bl	12358 <__assert_fail@plt+0x1444>
   11938:	cmn	r0, #1
   1193c:	beq	11948 <__assert_fail@plt+0xa34>
   11940:	strb	r0, [r4, r8]
   11944:	b	11918 <__assert_fail@plt+0xa04>
   11948:	ldrb	r3, [r7, #771]	; 0x303
   1194c:	cmp	r3, #0
   11950:	bne	117f8 <__assert_fail@plt+0x8e4>
   11954:	movw	r1, #30628	; 0x77a4
   11958:	movt	r1, #1
   1195c:	ldr	r3, [pc, #752]	; 11c54 <__assert_fail@plt+0xd40>
   11960:	movw	r0, #34872	; 0x8838
   11964:	movt	r0, #1
   11968:	mov	r2, #1840	; 0x730
   1196c:	bl	10f14 <__assert_fail@plt>
   11970:	ldrd	r2, [sl, #16]
   11974:	mov	r6, sl
   11978:	ldrd	r0, [sp, #24]
   1197c:	ldr	r4, [sp, #48]	; 0x30
   11980:	ldr	r7, [sp, #52]	; 0x34
   11984:	cmp	r1, r3
   11988:	cmpeq	r0, r2
   1198c:	bcc	119b4 <__assert_fail@plt+0xaa0>
   11990:	ldrd	r2, [r5, #16]
   11994:	ldrd	r0, [sp, #32]
   11998:	cmp	r1, r3
   1199c:	cmpeq	r0, r2
   119a0:	ldrcs	r1, [sp, #40]	; 0x28
   119a4:	strcs	r1, [sp, #68]	; 0x44
   119a8:	ldrcs	r1, [sp, #44]	; 0x2c
   119ac:	strcs	r1, [r5, #4]
   119b0:	bcs	1184c <__assert_fail@plt+0x938>
   119b4:	movw	r1, #30628	; 0x77a4
   119b8:	movt	r1, #1
   119bc:	ldr	r3, [pc, #660]	; 11c58 <__assert_fail@plt+0xd44>
   119c0:	movw	r0, #34484	; 0x86b4
   119c4:	movt	r0, #1
   119c8:	movw	r2, #1224	; 0x4c8
   119cc:	bl	10f14 <__assert_fail@plt>
   119d0:	mov	r0, r6
   119d4:	ldrb	r1, [r7, #768]	; 0x300
   119d8:	ldr	r2, [pc, #616]	; 11c48 <__assert_fail@plt+0xd34>
   119dc:	bl	13088 <__assert_fail@plt+0x2174>
   119e0:	movw	r0, #9784	; 0x2638
   119e4:	movt	r0, #1
   119e8:	bl	13110 <__assert_fail@plt+0x21fc>
   119ec:	b	1131c <__assert_fail@plt+0x408>
   119f0:	ldrd	r0, [sp, #24]
   119f4:	cmp	r1, r3
   119f8:	cmpeq	r0, r2
   119fc:	bls	11228 <__assert_fail@plt+0x314>
   11a00:	ldrb	r1, [r7, #771]	; 0x303
   11a04:	cmp	r1, #0
   11a08:	bne	11228 <__assert_fail@plt+0x314>
   11a0c:	b	1186c <__assert_fail@plt+0x958>
   11a10:	mov	r0, r6
   11a14:	ldrb	r1, [r7, #768]	; 0x300
   11a18:	movw	r2, #37212	; 0x915c
   11a1c:	movt	r2, #2
   11a20:	movw	r5, #37988	; 0x9464
   11a24:	movt	r5, #2
   11a28:	movw	r6, #37204	; 0x9154
   11a2c:	movt	r6, #2
   11a30:	bl	13088 <__assert_fail@plt+0x2174>
   11a34:	b	11a54 <__assert_fail@plt+0xb40>
   11a38:	mov	r2, r4
   11a3c:	mov	r1, #1
   11a40:	ldr	r3, [r6]
   11a44:	mov	r0, r5
   11a48:	bl	10d28 <fwrite_unlocked@plt>
   11a4c:	cmp	r4, r0
   11a50:	bne	11a98 <__assert_fail@plt+0xb84>
   11a54:	mov	r1, #8192	; 0x2000
   11a58:	mov	r0, r5
   11a5c:	bl	12668 <__assert_fail@plt+0x1754>
   11a60:	subs	r4, r0, #0
   11a64:	bne	11a38 <__assert_fail@plt+0xb24>
   11a68:	b	1131c <__assert_fail@plt+0x408>
   11a6c:	mov	r5, #2
   11a70:	b	110e4 <__assert_fail@plt+0x1d0>
   11a74:	movw	r1, #34700	; 0x878c
   11a78:	movt	r1, #1
   11a7c:	b	111ac <__assert_fail@plt+0x298>
   11a80:	mov	r0, r5
   11a84:	bl	1332c <__assert_fail@plt+0x2418>
   11a88:	movw	r1, #34592	; 0x8720
   11a8c:	movt	r1, #1
   11a90:	b	111ac <__assert_fail@plt+0x298>
   11a94:	bl	127c8 <__assert_fail@plt+0x18b4>
   11a98:	bl	10e54 <__errno_location@plt>
   11a9c:	movw	r1, #31252	; 0x7a14
   11aa0:	movt	r1, #1
   11aa4:	ldr	r4, [r0]
   11aa8:	mov	r2, #5
   11aac:	mov	r0, #0
   11ab0:	bl	10d58 <dcgettext@plt>
   11ab4:	mov	r2, r0
   11ab8:	mov	r0, #1
   11abc:	mov	r1, r4
   11ac0:	bl	10dc4 <error@plt>
   11ac4:	movw	r1, #30628	; 0x77a4
   11ac8:	movt	r1, #1
   11acc:	ldr	r3, [pc, #384]	; 11c54 <__assert_fail@plt+0xd40>
   11ad0:	movw	r0, #34900	; 0x8854
   11ad4:	movt	r0, #1
   11ad8:	movw	r2, #1893	; 0x765
   11adc:	bl	10f14 <__assert_fail@plt>
   11ae0:	movw	r1, #34436	; 0x8684
   11ae4:	movt	r1, #1
   11ae8:	b	111ac <__assert_fail@plt+0x298>
   11aec:	movw	r1, #34220	; 0x85ac
   11af0:	movt	r1, #1
   11af4:	b	111ac <__assert_fail@plt+0x298>
   11af8:	bl	10e54 <__errno_location@plt>
   11afc:	movw	r1, #34928	; 0x8870
   11b00:	movt	r1, #1
   11b04:	b	11aa4 <__assert_fail@plt+0xb90>
   11b08:	mov	r2, #5
   11b0c:	movw	r1, #34076	; 0x851c
   11b10:	movt	r1, #1
   11b14:	mov	r0, #0
   11b18:	bl	10d58 <dcgettext@plt>
   11b1c:	ldr	r3, [r9]
   11b20:	mov	r6, r0
   11b24:	add	r5, r5, r3
   11b28:	ldr	r0, [r8, r5, lsl #2]
   11b2c:	bl	15b64 <__assert_fail@plt+0x4c50>
   11b30:	mov	r1, #0
   11b34:	mov	r3, r0
   11b38:	mov	r2, r6
   11b3c:	mov	r0, r1
   11b40:	bl	10dc4 <error@plt>
   11b44:	cmp	r4, #2
   11b48:	bne	1104c <__assert_fail@plt+0x138>
   11b4c:	movw	r3, #37192	; 0x9148
   11b50:	movt	r3, #2
   11b54:	ldr	r4, [r3]
   11b58:	mov	r2, #5
   11b5c:	movw	r1, #34096	; 0x8530
   11b60:	movt	r1, #1
   11b64:	mov	r0, #0
   11b68:	bl	10d58 <dcgettext@plt>
   11b6c:	mov	r3, r0
   11b70:	movw	r2, #35528	; 0x8ac8
   11b74:	movt	r2, #1
   11b78:	mov	r1, #1
   11b7c:	mov	r0, r4
   11b80:	bl	10e9c <__fprintf_chk@plt>
   11b84:	b	1104c <__assert_fail@plt+0x138>
   11b88:	cmp	r4, #0
   11b8c:	bne	11bb8 <__assert_fail@plt+0xca4>
   11b90:	mov	r2, #5
   11b94:	mov	r0, r4
   11b98:	movw	r1, #34032	; 0x84f0
   11b9c:	movt	r1, #1
   11ba0:	bl	10d58 <dcgettext@plt>
   11ba4:	mov	r2, r0
   11ba8:	mov	r1, r4
   11bac:	mov	r0, r4
   11bb0:	bl	10dc4 <error@plt>
   11bb4:	b	1104c <__assert_fail@plt+0x138>
   11bb8:	mov	r2, #5
   11bbc:	movw	r1, #34048	; 0x8500
   11bc0:	movt	r1, #1
   11bc4:	mov	r0, #0
   11bc8:	bl	10d58 <dcgettext@plt>
   11bcc:	sub	r6, r6, #-1073741823	; 0xc0000001
   11bd0:	mov	r4, r0
   11bd4:	ldr	r0, [r8, r6, lsl #2]
   11bd8:	bl	15b64 <__assert_fail@plt+0x4c50>
   11bdc:	mov	r1, #0
   11be0:	mov	r3, r0
   11be4:	mov	r2, r4
   11be8:	mov	r0, r1
   11bec:	bl	10dc4 <error@plt>
   11bf0:	ldrb	ip, [r7, #770]	; 0x302
   11bf4:	movw	r3, #37192	; 0x9148
   11bf8:	movt	r3, #2
   11bfc:	mov	r0, #0
   11c00:	mov	r2, #5
   11c04:	ldr	r4, [r3]
   11c08:	movw	r3, #33936	; 0x8490
   11c0c:	movt	r3, #1
   11c10:	movw	r1, #33868	; 0x844c
   11c14:	movt	r1, #1
   11c18:	cmp	ip, r0
   11c1c:	moveq	r1, r3
   11c20:	bl	10d58 <dcgettext@plt>
   11c24:	mov	r3, r0
   11c28:	movw	r2, #35528	; 0x8ac8
   11c2c:	movt	r2, #1
   11c30:	mov	r0, r4
   11c34:	mov	r1, #1
   11c38:	bl	10e9c <__fprintf_chk@plt>
   11c3c:	b	1104c <__assert_fail@plt+0x138>
   11c40:	bl	10efc <abort@plt>
   11c44:	andeq	r7, r1, ip, ror #13
   11c48:	andeq	r9, r2, ip, asr r3
   11c4c:	andeq	r9, r2, fp, asr r2
   11c50:	andeq	r9, r2, ip, asr r2
   11c54:	andeq	r7, r1, r4, ror r7
   11c58:	andeq	r7, r1, ip, asr r7
   11c5c:	mov	fp, #0
   11c60:	mov	lr, #0
   11c64:	pop	{r1}		; (ldr r1, [sp], #4)
   11c68:	mov	r2, sp
   11c6c:	push	{r2}		; (str r2, [sp, #-4]!)
   11c70:	push	{r0}		; (str r0, [sp, #-4]!)
   11c74:	ldr	ip, [pc, #16]	; 11c8c <__assert_fail@plt+0xd78>
   11c78:	push	{ip}		; (str ip, [sp, #-4]!)
   11c7c:	ldr	r0, [pc, #12]	; 11c90 <__assert_fail@plt+0xd7c>
   11c80:	ldr	r3, [pc, #12]	; 11c94 <__assert_fail@plt+0xd80>
   11c84:	bl	10ddc <__libc_start_main@plt>
   11c88:	bl	10efc <abort@plt>
   11c8c:	ldrdeq	r7, [r1], -ip
   11c90:	andeq	r0, r1, r0, lsr #30
   11c94:	andeq	r7, r1, ip, ror r5
   11c98:	ldr	r3, [pc, #20]	; 11cb4 <__assert_fail@plt+0xda0>
   11c9c:	ldr	r2, [pc, #20]	; 11cb8 <__assert_fail@plt+0xda4>
   11ca0:	add	r3, pc, r3
   11ca4:	ldr	r2, [r3, r2]
   11ca8:	cmp	r2, #0
   11cac:	bxeq	lr
   11cb0:	b	10e0c <__gmon_start__@plt>
   11cb4:	andeq	r7, r1, r8, asr r3
   11cb8:	andeq	r0, r0, r0, ror #1
   11cbc:	ldr	r0, [pc, #24]	; 11cdc <__assert_fail@plt+0xdc8>
   11cc0:	ldr	r3, [pc, #24]	; 11ce0 <__assert_fail@plt+0xdcc>
   11cc4:	cmp	r3, r0
   11cc8:	bxeq	lr
   11ccc:	ldr	r3, [pc, #16]	; 11ce4 <__assert_fail@plt+0xdd0>
   11cd0:	cmp	r3, #0
   11cd4:	bxeq	lr
   11cd8:	bx	r3
   11cdc:	andeq	r9, r2, r4, lsr r1
   11ce0:	andeq	r9, r2, r4, lsr r1
   11ce4:	andeq	r0, r0, r0
   11ce8:	ldr	r0, [pc, #36]	; 11d14 <__assert_fail@plt+0xe00>
   11cec:	ldr	r1, [pc, #36]	; 11d18 <__assert_fail@plt+0xe04>
   11cf0:	sub	r1, r1, r0
   11cf4:	asr	r1, r1, #2
   11cf8:	add	r1, r1, r1, lsr #31
   11cfc:	asrs	r1, r1, #1
   11d00:	bxeq	lr
   11d04:	ldr	r3, [pc, #16]	; 11d1c <__assert_fail@plt+0xe08>
   11d08:	cmp	r3, #0
   11d0c:	bxeq	lr
   11d10:	bx	r3
   11d14:	andeq	r9, r2, r4, lsr r1
   11d18:	andeq	r9, r2, r4, lsr r1
   11d1c:	andeq	r0, r0, r0
   11d20:	push	{r4, lr}
   11d24:	ldr	r4, [pc, #24]	; 11d44 <__assert_fail@plt+0xe30>
   11d28:	ldrb	r3, [r4]
   11d2c:	cmp	r3, #0
   11d30:	popne	{r4, pc}
   11d34:	bl	11cbc <__assert_fail@plt+0xda8>
   11d38:	mov	r3, #1
   11d3c:	strb	r3, [r4]
   11d40:	pop	{r4, pc}
   11d44:	andeq	r9, r2, r8, asr r1
   11d48:	b	11ce8 <__assert_fail@plt+0xdd4>
   11d4c:	strd	r4, [sp, #-16]!
   11d50:	ldr	r5, [r0]
   11d54:	str	r6, [sp, #8]
   11d58:	str	lr, [sp, #12]
   11d5c:	ldrb	r2, [r5, r1]
   11d60:	cmp	r2, #42	; 0x2a
   11d64:	beq	11d7c <__assert_fail@plt+0xe68>
   11d68:	mov	r0, #0
   11d6c:	ldrd	r4, [sp]
   11d70:	ldr	r6, [sp, #8]
   11d74:	add	sp, sp, #12
   11d78:	pop	{pc}		; (ldr pc, [sp], #4)
   11d7c:	ldr	r6, [r0, #4]
   11d80:	mov	r3, r0
   11d84:	ldrb	r0, [r6, r1]
   11d88:	cmp	r0, #0
   11d8c:	bne	11d68 <__assert_fail@plt+0xe54>
   11d90:	ldr	r4, [r3, #8]
   11d94:	add	r1, r1, #1
   11d98:	cmp	r1, r4
   11d9c:	bcs	11d6c <__assert_fail@plt+0xe58>
   11da0:	ldrb	r2, [r5, r1]
   11da4:	add	r3, r5, r1
   11da8:	sub	ip, r2, #48	; 0x30
   11dac:	cmp	ip, #9
   11db0:	bhi	11dfc <__assert_fail@plt+0xee8>
   11db4:	ldrb	r2, [r6, r1]
   11db8:	add	ip, r6, r1
   11dbc:	cmp	r2, #0
   11dc0:	subeq	r4, r4, #1
   11dc4:	addeq	r4, r5, r4
   11dc8:	rsbeq	r5, r5, #1
   11dcc:	beq	11de0 <__assert_fail@plt+0xecc>
   11dd0:	b	11d6c <__assert_fail@plt+0xe58>
   11dd4:	ldrb	lr, [ip, #1]!
   11dd8:	cmp	lr, #0
   11ddc:	bne	11dfc <__assert_fail@plt+0xee8>
   11de0:	cmp	r3, r4
   11de4:	add	r1, r5, r3
   11de8:	beq	11d68 <__assert_fail@plt+0xe54>
   11dec:	ldrb	r2, [r3, #1]!
   11df0:	sub	lr, r2, #48	; 0x30
   11df4:	cmp	lr, #9
   11df8:	bls	11dd4 <__assert_fail@plt+0xec0>
   11dfc:	cmp	r2, #93	; 0x5d
   11e00:	bne	11d6c <__assert_fail@plt+0xe58>
   11e04:	ldrb	r0, [r6, r1]
   11e08:	ldrd	r4, [sp]
   11e0c:	ldr	r6, [sp, #8]
   11e10:	add	sp, sp, #12
   11e14:	eor	r0, r0, #1
   11e18:	pop	{pc}		; (ldr pc, [sp], #4)
   11e1c:	strd	r4, [sp, #-12]!
   11e20:	mov	r5, r0
   11e24:	mov	r0, #5
   11e28:	str	lr, [sp, #8]
   11e2c:	sub	sp, sp, #12
   11e30:	bl	16194 <__assert_fail@plt+0x5280>
   11e34:	mov	r4, r0
   11e38:	bl	10e24 <__ctype_b_loc@plt>
   11e3c:	ldr	r2, [r0]
   11e40:	lsl	r3, r5, #1
   11e44:	ldrh	r3, [r2, r3]
   11e48:	tst	r3, #16384	; 0x4000
   11e4c:	beq	11e70 <__assert_fail@plt+0xf5c>
   11e50:	mov	r3, #0
   11e54:	strb	r5, [r4]
   11e58:	strb	r3, [r4, #1]
   11e5c:	mov	r0, r4
   11e60:	add	sp, sp, #12
   11e64:	ldrd	r4, [sp]
   11e68:	add	sp, sp, #8
   11e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   11e70:	movw	r3, #30588	; 0x777c
   11e74:	movt	r3, #1
   11e78:	str	r5, [sp]
   11e7c:	mov	r2, #5
   11e80:	mov	r1, #1
   11e84:	mov	r0, r4
   11e88:	bl	10e60 <__sprintf_chk@plt>
   11e8c:	b	11e5c <__assert_fail@plt+0xf48>
   11e90:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11e94:	mov	r4, r0
   11e98:	strd	r6, [sp, #8]
   11e9c:	mov	r6, r1
   11ea0:	mov	r1, #4
   11ea4:	add	r0, r6, #1
   11ea8:	strd	r8, [sp, #16]
   11eac:	strd	sl, [sp, #24]
   11eb0:	str	lr, [sp, #32]
   11eb4:	sub	sp, sp, #20
   11eb8:	bl	162fc <__assert_fail@plt+0x53e8>
   11ebc:	cmp	r6, #0
   11ec0:	mov	sl, r0
   11ec4:	beq	11fac <__assert_fail@plt+0x1098>
   11ec8:	sub	r4, r4, #1
   11ecc:	movw	r8, #30608	; 0x7790
   11ed0:	movt	r8, #1
   11ed4:	movw	r9, #30588	; 0x777c
   11ed8:	movt	r9, #1
   11edc:	movw	r7, #30604	; 0x778c
   11ee0:	movt	r7, #1
   11ee4:	add	r6, r4, r6
   11ee8:	mov	r5, r0
   11eec:	b	11f34 <__assert_fail@plt+0x1020>
   11ef0:	cmp	fp, #12
   11ef4:	moveq	r1, r7
   11ef8:	beq	11f20 <__assert_fail@plt+0x100c>
   11efc:	bcc	11fa0 <__assert_fail@plt+0x108c>
   11f00:	cmp	fp, #13
   11f04:	movweq	r1, #30612	; 0x7794
   11f08:	movteq	r1, #1
   11f0c:	beq	11f20 <__assert_fail@plt+0x100c>
   11f10:	cmp	fp, #92	; 0x5c
   11f14:	movweq	r1, #30596	; 0x7784
   11f18:	movteq	r1, #1
   11f1c:	bne	11f68 <__assert_fail@plt+0x1054>
   11f20:	mov	r0, r5
   11f24:	bl	10d40 <stpcpy@plt>
   11f28:	cmp	r4, r6
   11f2c:	mov	r5, r0
   11f30:	beq	11fac <__assert_fail@plt+0x1098>
   11f34:	ldrb	fp, [r4, #1]!
   11f38:	cmp	fp, #10
   11f3c:	beq	11fcc <__assert_fail@plt+0x10b8>
   11f40:	bhi	11ef0 <__assert_fail@plt+0xfdc>
   11f44:	cmp	fp, #8
   11f48:	beq	11f94 <__assert_fail@plt+0x1080>
   11f4c:	movwhi	r1, #30616	; 0x7798
   11f50:	movthi	r1, #1
   11f54:	bhi	11f20 <__assert_fail@plt+0x100c>
   11f58:	cmp	fp, #7
   11f5c:	movweq	r1, #30624	; 0x77a0
   11f60:	movteq	r1, #1
   11f64:	beq	11f20 <__assert_fail@plt+0x100c>
   11f68:	bl	10e24 <__ctype_b_loc@plt>
   11f6c:	ldr	r2, [r0]
   11f70:	lsl	r3, fp, #1
   11f74:	ldrh	r3, [r2, r3]
   11f78:	tst	r3, #16384	; 0x4000
   11f7c:	beq	11fd4 <__assert_fail@plt+0x10c0>
   11f80:	mov	r3, #0
   11f84:	add	r1, sp, #8
   11f88:	strb	fp, [sp, #8]
   11f8c:	strb	r3, [sp, #9]
   11f90:	b	11f20 <__assert_fail@plt+0x100c>
   11f94:	movw	r1, #30600	; 0x7788
   11f98:	movt	r1, #1
   11f9c:	b	11f20 <__assert_fail@plt+0x100c>
   11fa0:	movw	r1, #30620	; 0x779c
   11fa4:	movt	r1, #1
   11fa8:	b	11f20 <__assert_fail@plt+0x100c>
   11fac:	mov	r0, sl
   11fb0:	add	sp, sp, #20
   11fb4:	ldrd	r4, [sp]
   11fb8:	ldrd	r6, [sp, #8]
   11fbc:	ldrd	r8, [sp, #16]
   11fc0:	ldrd	sl, [sp, #24]
   11fc4:	add	sp, sp, #32
   11fc8:	pop	{pc}		; (ldr pc, [sp], #4)
   11fcc:	mov	r1, r8
   11fd0:	b	11f20 <__assert_fail@plt+0x100c>
   11fd4:	mov	r1, #1
   11fd8:	mov	r3, r9
   11fdc:	str	fp, [sp]
   11fe0:	add	r0, sp, #8
   11fe4:	mov	r2, #5
   11fe8:	bl	10e60 <__sprintf_chk@plt>
   11fec:	add	r1, sp, #8
   11ff0:	b	11f20 <__assert_fail@plt+0x100c>
   11ff4:	str	r4, [sp, #-8]!
   11ff8:	mov	r4, r1
   11ffc:	str	lr, [sp, #4]
   12000:	cmp	r0, #11
   12004:	ldrls	pc, [pc, r0, lsl #2]
   12008:	b	1216c <__assert_fail@plt+0x1258>
   1200c:	andeq	r2, r1, r4, rrx
   12010:	andeq	r2, r1, ip, ror r0
   12014:	muleq	r1, r4, r0
   12018:	andeq	r2, r1, ip, lsr #1
   1201c:	andeq	r2, r1, r4, asr #1
   12020:	ldrdeq	r2, [r1], -ip
   12024:	strdeq	r2, [r1], -r4
   12028:	andeq	r2, r1, ip, lsl #2
   1202c:	andeq	r2, r1, r4, lsr #2
   12030:	andeq	r2, r1, ip, lsr r1
   12034:	andeq	r2, r1, r4, asr r1
   12038:	andeq	r2, r1, ip, lsr r0
   1203c:	bl	10e24 <__ctype_b_loc@plt>
   12040:	ldr	r3, [r0]
   12044:	lsl	r4, r4, #1
   12048:	ldrh	r0, [r3, r4]
   1204c:	and	r0, r0, #4096	; 0x1000
   12050:	adds	r0, r0, #0
   12054:	ldr	r4, [sp]
   12058:	add	sp, sp, #4
   1205c:	movne	r0, #1
   12060:	pop	{pc}		; (ldr pc, [sp], #4)
   12064:	bl	10e24 <__ctype_b_loc@plt>
   12068:	ldr	r3, [r0]
   1206c:	lsl	r4, r4, #1
   12070:	ldrh	r0, [r3, r4]
   12074:	and	r0, r0, #8
   12078:	b	12050 <__assert_fail@plt+0x113c>
   1207c:	bl	10e24 <__ctype_b_loc@plt>
   12080:	ldr	r3, [r0]
   12084:	lsl	r4, r4, #1
   12088:	ldrh	r0, [r3, r4]
   1208c:	and	r0, r0, #1024	; 0x400
   12090:	b	12050 <__assert_fail@plt+0x113c>
   12094:	bl	10e24 <__ctype_b_loc@plt>
   12098:	ldr	r3, [r0]
   1209c:	lsl	r4, r4, #1
   120a0:	ldrh	r0, [r3, r4]
   120a4:	and	r0, r0, #1
   120a8:	b	12050 <__assert_fail@plt+0x113c>
   120ac:	bl	10e24 <__ctype_b_loc@plt>
   120b0:	ldr	r3, [r0]
   120b4:	lsl	r4, r4, #1
   120b8:	ldrh	r0, [r3, r4]
   120bc:	and	r0, r0, #2
   120c0:	b	12050 <__assert_fail@plt+0x113c>
   120c4:	bl	10e24 <__ctype_b_loc@plt>
   120c8:	ldr	r3, [r0]
   120cc:	lsl	r4, r4, #1
   120d0:	ldrh	r0, [r3, r4]
   120d4:	and	r0, r0, #2048	; 0x800
   120d8:	b	12050 <__assert_fail@plt+0x113c>
   120dc:	bl	10e24 <__ctype_b_loc@plt>
   120e0:	ldr	r3, [r0]
   120e4:	lsl	r4, r4, #1
   120e8:	ldrh	r0, [r3, r4]
   120ec:	and	r0, r0, #32768	; 0x8000
   120f0:	b	12050 <__assert_fail@plt+0x113c>
   120f4:	bl	10e24 <__ctype_b_loc@plt>
   120f8:	ldr	r3, [r0]
   120fc:	lsl	r4, r4, #1
   12100:	ldrh	r0, [r3, r4]
   12104:	and	r0, r0, #512	; 0x200
   12108:	b	12050 <__assert_fail@plt+0x113c>
   1210c:	bl	10e24 <__ctype_b_loc@plt>
   12110:	ldr	r3, [r0]
   12114:	lsl	r4, r4, #1
   12118:	ldrh	r0, [r3, r4]
   1211c:	and	r0, r0, #16384	; 0x4000
   12120:	b	12050 <__assert_fail@plt+0x113c>
   12124:	bl	10e24 <__ctype_b_loc@plt>
   12128:	ldr	r3, [r0]
   1212c:	lsl	r4, r4, #1
   12130:	ldrh	r0, [r3, r4]
   12134:	and	r0, r0, #4
   12138:	b	12050 <__assert_fail@plt+0x113c>
   1213c:	bl	10e24 <__ctype_b_loc@plt>
   12140:	ldr	r3, [r0]
   12144:	lsl	r4, r4, #1
   12148:	ldrh	r0, [r3, r4]
   1214c:	and	r0, r0, #8192	; 0x2000
   12150:	b	12050 <__assert_fail@plt+0x113c>
   12154:	bl	10e24 <__ctype_b_loc@plt>
   12158:	ldr	r3, [r0]
   1215c:	lsl	r4, r4, #1
   12160:	ldrh	r0, [r3, r4]
   12164:	and	r0, r0, #256	; 0x100
   12168:	b	12050 <__assert_fail@plt+0x113c>
   1216c:	bl	10efc <abort@plt>
   12170:	ldr	r2, [r0]
   12174:	mov	r3, #0
   12178:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1217c:	strd	r6, [sp, #8]
   12180:	mov	r6, #0
   12184:	mov	r7, #0
   12188:	strd	r8, [sp, #16]
   1218c:	mov	r9, r0
   12190:	strd	sl, [sp, #24]
   12194:	ldr	r8, [r2, #4]
   12198:	str	lr, [sp, #32]
   1219c:	sub	sp, sp, #4
   121a0:	str	r3, [r0, #24]
   121a4:	strh	r3, [r0, #32]
   121a8:	strb	r3, [r0, #34]	; 0x22
   121ac:	cmp	r8, r3
   121b0:	beq	12200 <__assert_fail@plt+0x12ec>
   121b4:	ldr	r3, [r8]
   121b8:	cmp	r3, #4
   121bc:	ldrls	pc, [pc, r3, lsl #2]
   121c0:	b	12354 <__assert_fail@plt+0x1440>
   121c4:	andeq	r2, r1, r8, lsr #6
   121c8:	andeq	r2, r1, r8, lsl #6
   121cc:	andeq	r2, r1, ip, lsr #5
   121d0:	andeq	r2, r1, r0, lsr #4
   121d4:	ldrdeq	r2, [r1], -r8
   121d8:	ldrd	r4, [r8, #16]
   121dc:	orrs	r3, r4, r5
   121e0:	bne	12258 <__assert_fail@plt+0x1344>
   121e4:	ldr	r3, [r9, #24]
   121e8:	str	r8, [r9, #28]
   121ec:	add	r3, r3, #1
   121f0:	str	r3, [r9, #24]
   121f4:	ldr	r8, [r8, #4]
   121f8:	cmp	r8, #0
   121fc:	bne	121b4 <__assert_fail@plt+0x12a0>
   12200:	strd	r6, [r9, #16]
   12204:	add	sp, sp, #4
   12208:	ldrd	r4, [sp]
   1220c:	ldrd	r6, [sp, #8]
   12210:	ldrd	r8, [sp, #16]
   12214:	ldrd	sl, [sp, #24]
   12218:	add	sp, sp, #32
   1221c:	pop	{pc}		; (ldr pc, [sp], #4)
   12220:	ldrb	r1, [r8, #8]
   12224:	mov	r3, #0
   12228:	mov	r4, #0
   1222c:	mov	r5, #0
   12230:	uxtb	r2, r3
   12234:	cmp	r1, r2
   12238:	bne	12244 <__assert_fail@plt+0x1330>
   1223c:	adds	r4, r4, #1
   12240:	adc	r5, r5, #0
   12244:	add	r3, r3, #1
   12248:	cmp	r3, #256	; 0x100
   1224c:	bne	12230 <__assert_fail@plt+0x131c>
   12250:	mov	r3, #1
   12254:	strb	r3, [r9, #32]
   12258:	adds	r2, r6, r4
   1225c:	adcs	r3, r7, r5
   12260:	mov	r6, r2
   12264:	mov	r7, r3
   12268:	and	r3, r6, r3
   1226c:	movcs	r2, #1
   12270:	movcc	r2, #0
   12274:	cmn	r3, #1
   12278:	movne	r3, #0
   1227c:	moveq	r3, #1
   12280:	orrs	r3, r2, r3
   12284:	beq	121f4 <__assert_fail@plt+0x12e0>
   12288:	mov	r2, #5
   1228c:	movw	r1, #30688	; 0x77e0
   12290:	movt	r1, #1
   12294:	mov	r0, #0
   12298:	bl	10d58 <dcgettext@plt>
   1229c:	mov	r2, r0
   122a0:	mov	r1, #0
   122a4:	mov	r0, #1
   122a8:	bl	10dc4 <error@plt>
   122ac:	mov	r3, #1
   122b0:	mov	sl, #0
   122b4:	ldr	fp, [r8, #8]
   122b8:	mov	r4, #0
   122bc:	mov	r5, #0
   122c0:	strb	r3, [r9, #33]	; 0x21
   122c4:	uxtb	r1, sl
   122c8:	mov	r0, fp
   122cc:	bl	11ff4 <__assert_fail@plt+0x10e0>
   122d0:	cmp	r0, #0
   122d4:	beq	122e0 <__assert_fail@plt+0x13cc>
   122d8:	adds	r4, r4, #1
   122dc:	adc	r5, r5, #0
   122e0:	add	sl, sl, #1
   122e4:	cmp	sl, #256	; 0x100
   122e8:	bne	122c4 <__assert_fail@plt+0x13b0>
   122ec:	cmp	fp, #6
   122f0:	beq	12258 <__assert_fail@plt+0x1344>
   122f4:	cmp	fp, #10
   122f8:	beq	12258 <__assert_fail@plt+0x1344>
   122fc:	mov	r3, #1
   12300:	strb	r3, [r9, #34]	; 0x22
   12304:	b	12258 <__assert_fail@plt+0x1344>
   12308:	ldrb	r3, [r8, #9]
   1230c:	ldrb	r4, [r8, #8]
   12310:	cmp	r3, r4
   12314:	bcc	12334 <__assert_fail@plt+0x1420>
   12318:	sub	r4, r3, r4
   1231c:	add	r4, r4, #1
   12320:	asr	r5, r4, #31
   12324:	b	12258 <__assert_fail@plt+0x1344>
   12328:	mov	r4, #1
   1232c:	mov	r5, #0
   12330:	b	12258 <__assert_fail@plt+0x1344>
   12334:	movw	r3, #30212	; 0x7604
   12338:	movt	r3, #1
   1233c:	movw	r1, #30628	; 0x77a4
   12340:	movt	r1, #1
   12344:	movw	r0, #30640	; 0x77b0
   12348:	movt	r0, #1
   1234c:	movw	r2, #1265	; 0x4f1
   12350:	bl	10f14 <__assert_fail@plt>
   12354:	bl	10efc <abort@plt>
   12358:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1235c:	mov	r4, r0
   12360:	mov	ip, r1
   12364:	mvn	r2, #1
   12368:	mvn	r3, #0
   1236c:	strd	r6, [sp, #8]
   12370:	strd	r8, [sp, #16]
   12374:	mvn	r0, #0
   12378:	mvn	r1, #0
   1237c:	ldrd	r8, [r4, #8]
   12380:	strd	sl, [sp, #24]
   12384:	str	lr, [sp, #32]
   12388:	sub	sp, sp, #12
   1238c:	mov	lr, #2
   12390:	cmp	ip, #0
   12394:	strne	lr, [ip]
   12398:	cmp	r9, r3
   1239c:	cmpeq	r8, r2
   123a0:	beq	1250c <__assert_fail@plt+0x15f8>
   123a4:	ldr	r5, [r4, #4]
   123a8:	cmp	r5, #0
   123ac:	beq	1256c <__assert_fail@plt+0x1658>
   123b0:	ldr	r8, [r5]
   123b4:	cmp	r8, #4
   123b8:	ldrls	pc, [pc, r8, lsl #2]
   123bc:	b	125fc <__assert_fail@plt+0x16e8>
   123c0:	ldrdeq	r2, [r1], -r4
   123c4:	muleq	r1, r4, r4
   123c8:	andeq	r2, r1, ip, lsl #8
   123cc:	ldrdeq	r2, [r1], -r4
   123d0:	andeq	r2, r1, r8, ror #9
   123d4:	ldr	r3, [r5, #4]
   123d8:	mvn	r0, #0
   123dc:	mvn	r1, #0
   123e0:	ldrb	r8, [r5, #8]
   123e4:	str	r3, [r4, #4]
   123e8:	strd	r0, [r4, #8]
   123ec:	mov	r0, r8
   123f0:	add	sp, sp, #12
   123f4:	ldrd	r4, [sp]
   123f8:	ldrd	r6, [sp, #8]
   123fc:	ldrd	r8, [sp, #16]
   12400:	ldrd	sl, [sp, #24]
   12404:	add	sp, sp, #32
   12408:	pop	{pc}		; (ldr pc, [sp], #4)
   1240c:	cmp	ip, #0
   12410:	ldr	r7, [r5, #8]
   12414:	beq	1242c <__assert_fail@plt+0x1518>
   12418:	cmp	r7, #6
   1241c:	beq	12560 <__assert_fail@plt+0x164c>
   12420:	cmp	r7, #10
   12424:	moveq	r3, #1
   12428:	streq	r3, [ip]
   1242c:	ldrd	r8, [r4, #8]
   12430:	mvn	r3, #0
   12434:	mvn	r2, #0
   12438:	cmp	r9, r3
   1243c:	cmpeq	r8, r2
   12440:	beq	12520 <__assert_fail@plt+0x160c>
   12444:	uxtb	r1, r8
   12448:	mov	r0, r7
   1244c:	bl	11ff4 <__assert_fail@plt+0x10e0>
   12450:	cmp	r0, #0
   12454:	beq	125c4 <__assert_fail@plt+0x16b0>
   12458:	add	r6, r8, #1
   1245c:	cmp	r6, #255	; 0xff
   12460:	ble	12474 <__assert_fail@plt+0x1560>
   12464:	b	124d0 <__assert_fail@plt+0x15bc>
   12468:	add	r6, r6, #1
   1246c:	cmp	r6, #256	; 0x100
   12470:	beq	124d0 <__assert_fail@plt+0x15bc>
   12474:	uxtb	r1, r6
   12478:	mov	r0, r7
   1247c:	bl	11ff4 <__assert_fail@plt+0x10e0>
   12480:	cmp	r0, #0
   12484:	beq	12468 <__assert_fail@plt+0x1554>
   12488:	asr	r7, r6, #31
   1248c:	strd	r6, [r4, #8]
   12490:	b	123ec <__assert_fail@plt+0x14d8>
   12494:	ldrd	r2, [r4, #8]
   12498:	mvn	r1, #0
   1249c:	mvn	r0, #0
   124a0:	cmp	r3, r1
   124a4:	cmpeq	r2, r0
   124a8:	beq	12554 <__assert_fail@plt+0x1640>
   124ac:	adds	r6, r2, #1
   124b0:	adc	r7, r3, #0
   124b4:	ldrb	r2, [r5, #9]
   124b8:	mov	r3, #0
   124bc:	mov	r8, r6
   124c0:	cmp	r3, r7
   124c4:	strd	r6, [r4, #8]
   124c8:	cmpeq	r2, r6
   124cc:	bne	123ec <__assert_fail@plt+0x14d8>
   124d0:	ldr	r3, [r5, #4]
   124d4:	mvn	r0, #0
   124d8:	mvn	r1, #0
   124dc:	str	r3, [r4, #4]
   124e0:	strd	r0, [r4, #8]
   124e4:	b	123ec <__assert_fail@plt+0x14d8>
   124e8:	ldrd	r8, [r5, #16]
   124ec:	orrs	sl, r8, r9
   124f0:	bne	12574 <__assert_fail@plt+0x1660>
   124f4:	ldr	r5, [r5, #4]
   124f8:	mvn	r8, #0
   124fc:	mvn	r9, #0
   12500:	str	r5, [r4, #4]
   12504:	strd	r0, [r4, #8]
   12508:	b	12390 <__assert_fail@plt+0x147c>
   1250c:	ldr	r5, [r4]
   12510:	ldr	r5, [r5, #4]
   12514:	str	r5, [r4, #4]
   12518:	strd	r0, [r4, #8]
   1251c:	b	123a8 <__assert_fail@plt+0x1494>
   12520:	mov	r8, #0
   12524:	b	12534 <__assert_fail@plt+0x1620>
   12528:	add	r8, r8, #1
   1252c:	cmp	r8, #256	; 0x100
   12530:	beq	125e0 <__assert_fail@plt+0x16cc>
   12534:	uxtb	r1, r8
   12538:	mov	r0, r7
   1253c:	bl	11ff4 <__assert_fail@plt+0x10e0>
   12540:	cmp	r0, #0
   12544:	beq	12528 <__assert_fail@plt+0x1614>
   12548:	asr	r9, r8, #31
   1254c:	strd	r8, [r4, #8]
   12550:	b	12444 <__assert_fail@plt+0x1530>
   12554:	ldrb	r6, [r5, #8]
   12558:	mov	r7, #0
   1255c:	b	124b4 <__assert_fail@plt+0x15a0>
   12560:	mov	r3, #0
   12564:	str	r3, [ip]
   12568:	b	1242c <__assert_fail@plt+0x1518>
   1256c:	mvn	r8, #0
   12570:	b	123ec <__assert_fail@plt+0x14d8>
   12574:	ldrd	r2, [r4, #8]
   12578:	mvn	r1, #0
   1257c:	mvn	r0, #0
   12580:	cmp	r3, r1
   12584:	cmpeq	r2, r0
   12588:	beq	125b4 <__assert_fail@plt+0x16a0>
   1258c:	adds	r1, r2, #1
   12590:	adc	r3, r3, #0
   12594:	stm	sp, {r1, r3}
   12598:	ldrd	r2, [sp]
   1259c:	cmp	r9, r3
   125a0:	cmpeq	r8, r2
   125a4:	ldrb	r8, [r5, #8]
   125a8:	strd	r2, [r4, #8]
   125ac:	bne	123ec <__assert_fail@plt+0x14d8>
   125b0:	b	124d0 <__assert_fail@plt+0x15bc>
   125b4:	mov	r2, #1
   125b8:	mov	r3, #0
   125bc:	strd	r2, [sp]
   125c0:	b	12598 <__assert_fail@plt+0x1684>
   125c4:	movw	r1, #30628	; 0x77a4
   125c8:	movt	r1, #1
   125cc:	ldr	r3, [pc, #44]	; 12600 <__assert_fail@plt+0x16ec>
   125d0:	movw	r0, #30716	; 0x77fc
   125d4:	movt	r0, #1
   125d8:	movw	r2, #1082	; 0x43a
   125dc:	bl	10f14 <__assert_fail@plt>
   125e0:	movw	r1, #30628	; 0x77a4
   125e4:	movt	r1, #1
   125e8:	ldr	r3, [pc, #16]	; 12600 <__assert_fail@plt+0x16ec>
   125ec:	movw	r0, #30768	; 0x7830
   125f0:	movt	r0, #1
   125f4:	movw	r2, #1079	; 0x437
   125f8:	bl	10f14 <__assert_fail@plt>
   125fc:	bl	10efc <abort@plt>
   12600:	andeq	r7, r1, r4, lsl r6
   12604:	str	r4, [sp, #-8]!
   12608:	str	lr, [sp, #4]
   1260c:	bl	10e54 <__errno_location@plt>
   12610:	ldr	r4, [r0]
   12614:	mov	r2, #5
   12618:	movw	r1, #30780	; 0x783c
   1261c:	movt	r1, #1
   12620:	mov	r0, #0
   12624:	bl	10d58 <dcgettext@plt>
   12628:	mov	r2, r0
   1262c:	mov	r0, #1
   12630:	mov	r1, r4
   12634:	bl	10dc4 <error@plt>
   12638:	mov	r2, r1
   1263c:	mov	r1, r0
   12640:	str	r4, [sp, #-8]!
   12644:	mov	r0, #0
   12648:	str	lr, [sp, #4]
   1264c:	bl	15b7c <__assert_fail@plt+0x4c68>
   12650:	cmn	r0, #1
   12654:	beq	12664 <__assert_fail@plt+0x1750>
   12658:	ldr	r4, [sp]
   1265c:	add	sp, sp, #4
   12660:	pop	{pc}		; (ldr pc, [sp], #4)
   12664:	bl	12604 <__assert_fail@plt+0x16f0>
   12668:	strd	r4, [sp, #-16]!
   1266c:	mov	r4, r0
   12670:	mov	r5, r1
   12674:	str	r6, [sp, #8]
   12678:	movw	r6, #37212	; 0x915c
   1267c:	movt	r6, #2
   12680:	str	lr, [sp, #12]
   12684:	mov	r2, r5
   12688:	mov	r1, r4
   1268c:	mov	r0, #0
   12690:	bl	15b7c <__assert_fail@plt+0x4c68>
   12694:	cmn	r0, #1
   12698:	beq	12760 <__assert_fail@plt+0x184c>
   1269c:	cmp	r0, #0
   126a0:	beq	12704 <__assert_fail@plt+0x17f0>
   126a4:	ldrb	r3, [r4]
   126a8:	ldrb	r3, [r6, r3]
   126ac:	cmp	r3, #0
   126b0:	beq	12714 <__assert_fail@plt+0x1800>
   126b4:	cmp	r0, #1
   126b8:	movne	lr, #0
   126bc:	movne	r3, #1
   126c0:	beq	12684 <__assert_fail@plt+0x1770>
   126c4:	sub	r3, r3, #1
   126c8:	add	r3, r4, r3
   126cc:	ldrb	r2, [r3, #1]
   126d0:	add	r1, r3, #1
   126d4:	ldrb	ip, [r6, r2]
   126d8:	cmp	ip, #0
   126dc:	strbeq	r2, [r4, lr]
   126e0:	add	r2, r3, #2
   126e4:	addeq	lr, lr, #1
   126e8:	sub	r2, r2, r4
   126ec:	mov	r3, r1
   126f0:	cmp	r0, r2
   126f4:	bhi	126cc <__assert_fail@plt+0x17b8>
   126f8:	cmp	lr, #0
   126fc:	beq	12684 <__assert_fail@plt+0x1770>
   12700:	mov	r0, lr
   12704:	ldrd	r4, [sp]
   12708:	ldr	r6, [sp, #8]
   1270c:	add	sp, sp, #12
   12710:	pop	{pc}		; (ldr pc, [sp], #4)
   12714:	add	lr, r3, #1
   12718:	mov	r2, r4
   1271c:	cmp	lr, r0
   12720:	beq	12758 <__assert_fail@plt+0x1844>
   12724:	ldrb	r1, [r2, #1]!
   12728:	ldrb	r1, [r6, r1]
   1272c:	cmp	r1, #0
   12730:	beq	12748 <__assert_fail@plt+0x1834>
   12734:	add	r3, r3, #2
   12738:	cmp	r0, r3
   1273c:	bhi	126c4 <__assert_fail@plt+0x17b0>
   12740:	mov	r0, lr
   12744:	b	12704 <__assert_fail@plt+0x17f0>
   12748:	mov	r3, lr
   1274c:	add	lr, r3, #1
   12750:	cmp	lr, r0
   12754:	bne	12724 <__assert_fail@plt+0x1810>
   12758:	mov	lr, r0
   1275c:	b	12734 <__assert_fail@plt+0x1820>
   12760:	bl	12604 <__assert_fail@plt+0x16f0>
   12764:	str	r4, [sp, #-8]!
   12768:	mov	r4, r0
   1276c:	mov	r2, r1
   12770:	mov	r0, #0
   12774:	mov	r1, r4
   12778:	str	lr, [sp, #4]
   1277c:	bl	15b7c <__assert_fail@plt+0x4c68>
   12780:	cmn	r0, #1
   12784:	beq	127c4 <__assert_fail@plt+0x18b0>
   12788:	cmp	r0, #0
   1278c:	subne	r1, r4, #1
   12790:	movwne	r2, #37212	; 0x915c
   12794:	movtne	r2, #2
   12798:	addne	ip, r1, r0
   1279c:	beq	127b8 <__assert_fail@plt+0x18a4>
   127a0:	ldrb	r3, [r1, #1]!
   127a4:	add	r3, r2, r3
   127a8:	cmp	r1, ip
   127ac:	ldrb	r3, [r3, #256]	; 0x100
   127b0:	strb	r3, [r1]
   127b4:	bne	127a0 <__assert_fail@plt+0x188c>
   127b8:	ldr	r4, [sp]
   127bc:	add	sp, sp, #4
   127c0:	pop	{pc}		; (ldr pc, [sp], #4)
   127c4:	bl	12604 <__assert_fail@plt+0x16f0>
   127c8:	movw	r1, #30628	; 0x77a4
   127cc:	movt	r1, #1
   127d0:	ldr	r3, [pc, #20]	; 127ec <__assert_fail@plt+0x18d8>
   127d4:	movw	r0, #30792	; 0x7848
   127d8:	movt	r0, #1
   127dc:	str	r4, [sp, #-8]!
   127e0:	movw	r2, #721	; 0x2d1
   127e4:	str	lr, [sp, #4]
   127e8:	bl	10f14 <__assert_fail@plt>
   127ec:	andeq	r7, r1, r0, lsr #12
   127f0:	strd	r4, [sp, #-16]!
   127f4:	mov	r4, r0
   127f8:	mov	r0, #24
   127fc:	mov	r5, r1
   12800:	str	r6, [sp, #8]
   12804:	str	lr, [sp, #12]
   12808:	bl	16194 <__assert_fail@plt+0x5280>
   1280c:	ldr	r2, [r4]
   12810:	mov	r3, #0
   12814:	str	r3, [r0]
   12818:	str	r3, [r0, #4]
   1281c:	strb	r5, [r0, #8]
   12820:	cmp	r2, r3
   12824:	beq	12840 <__assert_fail@plt+0x192c>
   12828:	ldr	r6, [sp, #8]
   1282c:	str	r0, [r2, #4]
   12830:	str	r0, [r4]
   12834:	ldrd	r4, [sp]
   12838:	add	sp, sp, #12
   1283c:	pop	{pc}		; (ldr pc, [sp], #4)
   12840:	movw	r1, #30628	; 0x77a4
   12844:	movt	r1, #1
   12848:	ldr	r3, [pc, #12]	; 1285c <__assert_fail@plt+0x1948>
   1284c:	movw	r0, #30792	; 0x7848
   12850:	movt	r0, #1
   12854:	movw	r2, #649	; 0x289
   12858:	bl	10f14 <__assert_fail@plt>
   1285c:	andeq	r7, r1, r8, lsr r6
   12860:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12864:	strd	r6, [sp, #8]
   12868:	mov	r7, r0
   1286c:	strd	r8, [sp, #16]
   12870:	strd	sl, [sp, #24]
   12874:	str	lr, [sp, #32]
   12878:	sub	sp, sp, #108	; 0x6c
   1287c:	str	r1, [sp, #40]	; 0x28
   12880:	bl	10e3c <strlen@plt>
   12884:	mov	r4, r0
   12888:	bl	16194 <__assert_fail@plt+0x5280>
   1288c:	mov	r8, r0
   12890:	mov	r1, #1
   12894:	mov	r0, r4
   12898:	str	r8, [sp, #92]	; 0x5c
   1289c:	bl	164bc <__assert_fail@plt+0x55a8>
   128a0:	ldrb	fp, [r7]
   128a4:	mov	sl, r0
   128a8:	str	r0, [sp, #96]	; 0x60
   128ac:	cmp	fp, #0
   128b0:	beq	12f8c <__assert_fail@plt+0x2078>
   128b4:	movw	r3, #30804	; 0x7854
   128b8:	movt	r3, #1
   128bc:	mov	r6, #0
   128c0:	movw	r9, #30904	; 0x78b8
   128c4:	movt	r9, #1
   128c8:	mov	r5, r6
   128cc:	str	r3, [sp, #36]	; 0x24
   128d0:	b	128e0 <__assert_fail@plt+0x19cc>
   128d4:	cmp	fp, #0
   128d8:	ldr	r6, [sp, #24]
   128dc:	beq	12958 <__assert_fail@plt+0x1a44>
   128e0:	add	r3, r5, #1
   128e4:	cmp	fp, #92	; 0x5c
   128e8:	ldrb	r4, [r7, r3]
   128ec:	add	r2, r6, #1
   128f0:	movne	r5, r3
   128f4:	strbne	fp, [r8, r6]
   128f8:	str	r2, [sp, #24]
   128fc:	movne	fp, r4
   12900:	bne	128d4 <__assert_fail@plt+0x19c0>
   12904:	mov	r2, #1
   12908:	cmp	r4, #98	; 0x62
   1290c:	strb	r2, [sl, r6]
   12910:	beq	12f40 <__assert_fail@plt+0x202c>
   12914:	bls	12b34 <__assert_fail@plt+0x1c20>
   12918:	cmp	r4, #114	; 0x72
   1291c:	add	r2, r5, #2
   12920:	moveq	r4, #13
   12924:	beq	12940 <__assert_fail@plt+0x1a2c>
   12928:	bhi	12b7c <__assert_fail@plt+0x1c68>
   1292c:	cmp	r4, #102	; 0x66
   12930:	moveq	r4, #12
   12934:	beq	12940 <__assert_fail@plt+0x1a2c>
   12938:	cmp	r4, #110	; 0x6e
   1293c:	moveq	r4, #10
   12940:	strb	r4, [r8, r6]
   12944:	mov	r5, r2
   12948:	ldrb	fp, [r7, r2]
   1294c:	ldr	r6, [sp, #24]
   12950:	cmp	fp, #0
   12954:	bne	128e0 <__assert_fail@plt+0x19cc>
   12958:	ldr	r3, [sp, #24]
   1295c:	mov	r9, #0
   12960:	str	r8, [sp, #36]	; 0x24
   12964:	str	r8, [sp, #44]	; 0x2c
   12968:	str	r3, [sp, #100]	; 0x64
   1296c:	ldr	r3, [sp, #40]	; 0x28
   12970:	add	r3, r3, #4
   12974:	str	r3, [sp, #56]	; 0x38
   12978:	b	129a0 <__assert_fail@plt+0x1a8c>
   1297c:	ldr	r3, [sp, #48]	; 0x30
   12980:	cmp	r3, #45	; 0x2d
   12984:	ldr	r3, [sp, #44]	; 0x2c
   12988:	ldrb	r6, [r3, r9]
   1298c:	beq	12cb8 <__assert_fail@plt+0x1da4>
   12990:	mov	r1, r6
   12994:	ldr	r0, [sp, #56]	; 0x38
   12998:	bl	127f0 <__assert_fail@plt+0x18dc>
   1299c:	mov	r9, fp
   129a0:	ldr	r3, [sp, #24]
   129a4:	add	r4, r9, #2
   129a8:	cmp	r4, r3
   129ac:	bcs	12f4c <__assert_fail@plt+0x2038>
   129b0:	ldr	r2, [sp, #36]	; 0x24
   129b4:	add	fp, r9, #1
   129b8:	ldrb	r3, [r2, r9]
   129bc:	ldrb	r2, [r2, fp]
   129c0:	cmp	r3, #91	; 0x5b
   129c4:	str	r2, [sp, #48]	; 0x30
   129c8:	bne	1297c <__assert_fail@plt+0x1a68>
   129cc:	ldrb	r8, [sl, r9]
   129d0:	cmp	r8, #0
   129d4:	bne	1297c <__assert_fail@plt+0x1a68>
   129d8:	ldr	r3, [sp, #48]	; 0x30
   129dc:	cmp	r3, #58	; 0x3a
   129e0:	beq	12bb4 <__assert_fail@plt+0x1ca0>
   129e4:	ldr	r3, [sp, #48]	; 0x30
   129e8:	cmp	r3, #61	; 0x3d
   129ec:	beq	12bb4 <__assert_fail@plt+0x1ca0>
   129f0:	ldr	r3, [sp, #36]	; 0x24
   129f4:	ldrb	r3, [r3, r4]
   129f8:	cmp	r3, #42	; 0x2a
   129fc:	bne	1297c <__assert_fail@plt+0x1a68>
   12a00:	ldrb	r3, [sl, r4]
   12a04:	cmp	r3, #0
   12a08:	bne	1297c <__assert_fail@plt+0x1a68>
   12a0c:	ldr	r2, [sp, #24]
   12a10:	add	r3, r9, #3
   12a14:	cmp	r3, r2
   12a18:	bcs	1297c <__assert_fail@plt+0x1a68>
   12a1c:	ldrb	r1, [sl, r3]
   12a20:	add	r2, sl, r3
   12a24:	cmp	r1, #0
   12a28:	bne	1297c <__assert_fail@plt+0x1a68>
   12a2c:	ldr	r1, [sp, #36]	; 0x24
   12a30:	ldrb	r0, [r1, r3]
   12a34:	add	r7, r1, r3
   12a38:	cmp	r0, #93	; 0x5d
   12a3c:	movne	r1, r7
   12a40:	bne	12a4c <__assert_fail@plt+0x1b38>
   12a44:	b	12e44 <__assert_fail@plt+0x1f30>
   12a48:	mov	r3, r5
   12a4c:	ldr	ip, [sp, #24]
   12a50:	add	r5, r3, #1
   12a54:	cmp	r5, ip
   12a58:	bcs	1297c <__assert_fail@plt+0x1a68>
   12a5c:	ldrb	ip, [r2, #1]!
   12a60:	cmp	ip, #0
   12a64:	bne	1297c <__assert_fail@plt+0x1a68>
   12a68:	ldrb	lr, [r1, #1]!
   12a6c:	cmp	lr, #93	; 0x5d
   12a70:	bne	12a48 <__assert_fail@plt+0x1b34>
   12a74:	mvn	r9, fp
   12a78:	adds	r9, r9, r3
   12a7c:	beq	12e40 <__assert_fail@plt+0x1f2c>
   12a80:	cmp	r0, #48	; 0x30
   12a84:	add	r3, sp, #80	; 0x50
   12a88:	str	ip, [sp]
   12a8c:	moveq	r2, #8
   12a90:	movne	r2, #10
   12a94:	add	r1, sp, #76	; 0x4c
   12a98:	mov	r0, r7
   12a9c:	bl	16650 <__assert_fail@plt+0x573c>
   12aa0:	cmp	r0, #0
   12aa4:	bne	12fe4 <__assert_fail@plt+0x20d0>
   12aa8:	ldrd	r2, [sp, #80]	; 0x50
   12aac:	mvn	r1, #0
   12ab0:	mvn	r0, #0
   12ab4:	cmp	r3, r1
   12ab8:	cmpeq	r2, r0
   12abc:	beq	12fe4 <__assert_fail@plt+0x20d0>
   12ac0:	ldr	r0, [sp, #76]	; 0x4c
   12ac4:	add	r1, r7, r9
   12ac8:	cmp	r0, r1
   12acc:	bne	12fe4 <__assert_fail@plt+0x20d0>
   12ad0:	mov	r0, #24
   12ad4:	strd	r2, [sp, #24]
   12ad8:	bl	16194 <__assert_fail@plt+0x5280>
   12adc:	ldr	r3, [sp, #40]	; 0x28
   12ae0:	mov	ip, #0
   12ae4:	str	ip, [r0, #4]
   12ae8:	mov	ip, #4
   12aec:	str	ip, [r0]
   12af0:	ldr	r1, [r3, #4]
   12af4:	ldr	r3, [sp, #48]	; 0x30
   12af8:	cmp	r1, #0
   12afc:	strb	r3, [r0, #8]
   12b00:	ldrd	r2, [sp, #24]
   12b04:	strd	r2, [r0, #16]
   12b08:	beq	13058 <__assert_fail@plt+0x2144>
   12b0c:	ldr	r3, [sp, #40]	; 0x28
   12b10:	add	fp, r5, #1
   12b14:	str	r0, [r1, #4]
   12b18:	str	r0, [r3, #4]
   12b1c:	ldr	r3, [sp, #92]	; 0x5c
   12b20:	ldr	sl, [sp, #96]	; 0x60
   12b24:	str	r3, [sp, #36]	; 0x24
   12b28:	ldr	r3, [sp, #100]	; 0x64
   12b2c:	str	r3, [sp, #24]
   12b30:	b	1299c <__assert_fail@plt+0x1a88>
   12b34:	cmp	r4, #55	; 0x37
   12b38:	bhi	12b9c <__assert_fail@plt+0x1c88>
   12b3c:	cmp	r4, #48	; 0x30
   12b40:	bcs	12ee4 <__assert_fail@plt+0x1fd0>
   12b44:	cmp	r4, #0
   12b48:	bne	12b94 <__assert_fail@plt+0x1c80>
   12b4c:	mov	r2, #5
   12b50:	mov	r1, r9
   12b54:	mov	r0, r4
   12b58:	bl	10d58 <dcgettext@plt>
   12b5c:	mov	r2, r0
   12b60:	mov	r1, r4
   12b64:	mov	r0, r4
   12b68:	bl	10dc4 <error@plt>
   12b6c:	add	r2, r5, #1
   12b70:	strb	r4, [sl, r6]
   12b74:	mov	r4, fp
   12b78:	b	12940 <__assert_fail@plt+0x1a2c>
   12b7c:	cmp	r4, #116	; 0x74
   12b80:	moveq	r4, #9
   12b84:	beq	12940 <__assert_fail@plt+0x1a2c>
   12b88:	cmp	r4, #118	; 0x76
   12b8c:	moveq	r4, #11
   12b90:	b	12940 <__assert_fail@plt+0x1a2c>
   12b94:	add	r2, r5, #2
   12b98:	b	12940 <__assert_fail@plt+0x1a2c>
   12b9c:	cmp	r4, #92	; 0x5c
   12ba0:	beq	12b94 <__assert_fail@plt+0x1c80>
   12ba4:	cmp	r4, #97	; 0x61
   12ba8:	add	r2, r5, #2
   12bac:	moveq	r4, #7
   12bb0:	b	12940 <__assert_fail@plt+0x1a2c>
   12bb4:	ldrb	r3, [sl, fp]
   12bb8:	cmp	r3, #0
   12bbc:	bne	129f0 <__assert_fail@plt+0x1adc>
   12bc0:	ldr	r3, [sp, #24]
   12bc4:	sub	r0, r3, #1
   12bc8:	ldr	r3, [sp, #44]	; 0x2c
   12bcc:	cmp	r4, r0
   12bd0:	ldrb	r1, [r3, fp]
   12bd4:	bcs	129f0 <__assert_fail@plt+0x1adc>
   12bd8:	mov	r7, r4
   12bdc:	ldr	r3, [sp, #36]	; 0x24
   12be0:	add	r2, r3, r4
   12be4:	add	r3, sl, r4
   12be8:	b	12bfc <__assert_fail@plt+0x1ce8>
   12bec:	cmp	ip, r0
   12bf0:	mov	r7, ip
   12bf4:	add	r3, r3, #1
   12bf8:	bcs	129f0 <__assert_fail@plt+0x1adc>
   12bfc:	ldrb	lr, [r2], #1
   12c00:	add	ip, r7, #1
   12c04:	cmp	r1, lr
   12c08:	bne	12bec <__assert_fail@plt+0x1cd8>
   12c0c:	ldrb	lr, [r2]
   12c10:	cmp	lr, #93	; 0x5d
   12c14:	bne	12bec <__assert_fail@plt+0x1cd8>
   12c18:	ldrb	lr, [r3]
   12c1c:	cmp	lr, #0
   12c20:	bne	12bec <__assert_fail@plt+0x1cd8>
   12c24:	ldrb	r5, [r3, #1]
   12c28:	cmp	r5, #0
   12c2c:	bne	12bec <__assert_fail@plt+0x1cd8>
   12c30:	ldr	r3, [sp, #44]	; 0x2c
   12c34:	sub	r6, r7, r9
   12c38:	subs	r6, r6, #2
   12c3c:	add	r3, r3, r4
   12c40:	str	r3, [sp, #52]	; 0x34
   12c44:	beq	13004 <__assert_fail@plt+0x20f0>
   12c48:	cmp	r1, #58	; 0x3a
   12c4c:	beq	12d98 <__assert_fail@plt+0x1e84>
   12c50:	cmp	r6, #1
   12c54:	beq	12e9c <__assert_fail@plt+0x1f88>
   12c58:	mov	r1, r4
   12c5c:	add	r0, sp, #92	; 0x5c
   12c60:	bl	11d4c <__assert_fail@plt+0xe38>
   12c64:	cmp	r0, #0
   12c68:	bne	129f0 <__assert_fail@plt+0x1adc>
   12c6c:	mov	r7, r0
   12c70:	mov	r1, r6
   12c74:	ldr	r0, [sp, #52]	; 0x34
   12c78:	bl	11e90 <__assert_fail@plt+0xf7c>
   12c7c:	mov	r4, r0
   12c80:	mov	r2, #5
   12c84:	movw	r1, #31080	; 0x7968
   12c88:	movt	r1, #1
   12c8c:	mov	r0, r7
   12c90:	mov	fp, r8
   12c94:	bl	10d58 <dcgettext@plt>
   12c98:	mov	r2, r0
   12c9c:	mov	r3, r4
   12ca0:	mov	r1, #0
   12ca4:	mov	r0, r1
   12ca8:	bl	10dc4 <error@plt>
   12cac:	mov	r0, r4
   12cb0:	bl	13814 <__assert_fail@plt+0x2900>
   12cb4:	b	12d68 <__assert_fail@plt+0x1e54>
   12cb8:	ldrb	r8, [sl, fp]
   12cbc:	cmp	r8, #0
   12cc0:	bne	12990 <__assert_fail@plt+0x1a7c>
   12cc4:	ldr	r3, [sp, #44]	; 0x2c
   12cc8:	ldrb	r4, [r3, r4]
   12ccc:	cmp	r4, r6
   12cd0:	bcc	12d10 <__assert_fail@plt+0x1dfc>
   12cd4:	mov	r0, #24
   12cd8:	bl	16194 <__assert_fail@plt+0x5280>
   12cdc:	ldr	r3, [sp, #40]	; 0x28
   12ce0:	mov	r2, #1
   12ce4:	stm	r0, {r2, r8}
   12ce8:	strb	r6, [r0, #8]
   12cec:	strb	r4, [r0, #9]
   12cf0:	ldr	r3, [r3, #4]
   12cf4:	cmp	r3, #0
   12cf8:	beq	1303c <__assert_fail@plt+0x2128>
   12cfc:	str	r0, [r3, #4]
   12d00:	add	fp, r9, #3
   12d04:	ldr	r3, [sp, #40]	; 0x28
   12d08:	str	r0, [r3, #4]
   12d0c:	b	1299c <__assert_fail@plt+0x1a88>
   12d10:	mov	r0, r6
   12d14:	mov	fp, r8
   12d18:	bl	11e1c <__assert_fail@plt+0xf08>
   12d1c:	mov	r5, r0
   12d20:	mov	r0, r4
   12d24:	bl	11e1c <__assert_fail@plt+0xf08>
   12d28:	mov	r4, r0
   12d2c:	mov	r2, #5
   12d30:	movw	r1, #31184	; 0x79d0
   12d34:	movt	r1, #1
   12d38:	mov	r0, r8
   12d3c:	bl	10d58 <dcgettext@plt>
   12d40:	mov	r2, r0
   12d44:	mov	r3, r5
   12d48:	str	r4, [sp]
   12d4c:	mov	r1, r8
   12d50:	mov	r0, r8
   12d54:	bl	10dc4 <error@plt>
   12d58:	mov	r0, r5
   12d5c:	bl	13814 <__assert_fail@plt+0x2900>
   12d60:	mov	r0, r4
   12d64:	bl	13814 <__assert_fail@plt+0x2900>
   12d68:	ldr	r0, [sp, #36]	; 0x24
   12d6c:	bl	13814 <__assert_fail@plt+0x2900>
   12d70:	mov	r0, sl
   12d74:	bl	13814 <__assert_fail@plt+0x2900>
   12d78:	mov	r0, fp
   12d7c:	add	sp, sp, #108	; 0x6c
   12d80:	ldrd	r4, [sp]
   12d84:	ldrd	r6, [sp, #8]
   12d88:	ldrd	r8, [sp, #16]
   12d8c:	ldrd	sl, [sp, #24]
   12d90:	add	sp, sp, #32
   12d94:	pop	{pc}		; (ldr pc, [sp], #4)
   12d98:	ldr	r3, [pc, #728]	; 13078 <__assert_fail@plt+0x2164>
   12d9c:	str	r9, [sp, #60]	; 0x3c
   12da0:	str	r7, [sp, #68]	; 0x44
   12da4:	str	r4, [sp, #64]	; 0x40
   12da8:	mov	r7, r3
   12dac:	ldr	r4, [r7], #4
   12db0:	mov	r2, r6
   12db4:	ldr	r0, [sp, #52]	; 0x34
   12db8:	mov	r1, r4
   12dbc:	bl	10ef0 <strncmp@plt>
   12dc0:	subs	r9, r0, #0
   12dc4:	bne	12dd8 <__assert_fail@plt+0x1ec4>
   12dc8:	mov	r0, r4
   12dcc:	bl	10e3c <strlen@plt>
   12dd0:	cmp	r6, r0
   12dd4:	beq	12e60 <__assert_fail@plt+0x1f4c>
   12dd8:	add	r5, r5, #1
   12ddc:	cmp	r5, #12
   12de0:	bne	12dac <__assert_fail@plt+0x1e98>
   12de4:	add	r0, sp, #92	; 0x5c
   12de8:	ldr	r9, [sp, #60]	; 0x3c
   12dec:	ldr	r4, [sp, #64]	; 0x40
   12df0:	mov	r1, r4
   12df4:	bl	11d4c <__assert_fail@plt+0xe38>
   12df8:	cmp	r0, #0
   12dfc:	bne	129f0 <__assert_fail@plt+0x1adc>
   12e00:	mov	r1, r6
   12e04:	ldr	r0, [sp, #52]	; 0x34
   12e08:	mov	fp, r8
   12e0c:	bl	11e90 <__assert_fail@plt+0xf7c>
   12e10:	mov	r4, r0
   12e14:	movw	r1, #31052	; 0x794c
   12e18:	movt	r1, #1
   12e1c:	mov	r2, #5
   12e20:	mov	r0, #0
   12e24:	bl	10d58 <dcgettext@plt>
   12e28:	mov	r5, r0
   12e2c:	mov	r0, r4
   12e30:	bl	15b64 <__assert_fail@plt+0x4c50>
   12e34:	mov	r3, r0
   12e38:	mov	r2, r5
   12e3c:	b	12ca0 <__assert_fail@plt+0x1d8c>
   12e40:	mov	r3, r5
   12e44:	mov	r5, r3
   12e48:	mov	r2, #0
   12e4c:	mov	r3, #0
   12e50:	mov	r0, r2
   12e54:	mov	r1, r3
   12e58:	strd	r0, [sp, #80]	; 0x50
   12e5c:	b	12ad0 <__assert_fail@plt+0x1bbc>
   12e60:	mov	r0, #24
   12e64:	ldr	r7, [sp, #68]	; 0x44
   12e68:	bl	16194 <__assert_fail@plt+0x5280>
   12e6c:	ldr	r3, [sp, #40]	; 0x28
   12e70:	mov	r2, #2
   12e74:	stm	r0, {r2, r9}
   12e78:	str	r5, [r0, #8]
   12e7c:	ldr	r3, [r3, #4]
   12e80:	cmp	r3, #0
   12e84:	beq	1305c <__assert_fail@plt+0x2148>
   12e88:	str	r0, [r3, #4]
   12e8c:	add	fp, r7, #2
   12e90:	ldr	r3, [sp, #40]	; 0x28
   12e94:	str	r0, [r3, #4]
   12e98:	b	12b1c <__assert_fail@plt+0x1c08>
   12e9c:	mov	r0, #24
   12ea0:	bl	16194 <__assert_fail@plt+0x5280>
   12ea4:	ldr	r3, [sp, #40]	; 0x28
   12ea8:	mov	r1, #3
   12eac:	ldr	r2, [sp, #44]	; 0x2c
   12eb0:	stm	r0, {r1, r5}
   12eb4:	ldr	r3, [r3, #4]
   12eb8:	ldrb	r2, [r2, r4]
   12ebc:	cmp	r3, #0
   12ec0:	strb	r2, [r0, #8]
   12ec4:	bne	12e88 <__assert_fail@plt+0x1f74>
   12ec8:	movw	r1, #30628	; 0x77a4
   12ecc:	movt	r1, #1
   12ed0:	ldr	r3, [pc, #420]	; 1307c <__assert_fail@plt+0x2168>
   12ed4:	movw	r0, #30792	; 0x7848
   12ed8:	movt	r0, #1
   12edc:	movw	r2, #743	; 0x2e7
   12ee0:	bl	10f14 <__assert_fail@plt>
   12ee4:	add	r2, r5, #2
   12ee8:	sub	r4, r4, #48	; 0x30
   12eec:	ldrb	r1, [r7, r2]
   12ef0:	add	r0, r7, r2
   12ef4:	uxtb	r4, r4
   12ef8:	str	r0, [sp, #44]	; 0x2c
   12efc:	sub	r1, r1, #48	; 0x30
   12f00:	cmp	r1, #7
   12f04:	bhi	12940 <__assert_fail@plt+0x1a2c>
   12f08:	add	fp, r5, #3
   12f0c:	add	r4, r1, r4, lsl #3
   12f10:	ldrb	r1, [r7, fp]
   12f14:	and	r4, r4, #255	; 0xff
   12f18:	sub	r1, r1, #48	; 0x30
   12f1c:	cmp	r1, #7
   12f20:	addhi	r2, r5, #3
   12f24:	bhi	12940 <__assert_fail@plt+0x1a2c>
   12f28:	add	r0, r1, r4, lsl #3
   12f2c:	cmp	r0, #255	; 0xff
   12f30:	bgt	12f94 <__assert_fail@plt+0x2080>
   12f34:	add	r2, r2, #2
   12f38:	and	r4, r0, #255	; 0xff
   12f3c:	b	12940 <__assert_fail@plt+0x1a2c>
   12f40:	add	r2, r5, #2
   12f44:	mov	r4, #8
   12f48:	b	12940 <__assert_fail@plt+0x1a2c>
   12f4c:	cmp	r9, r3
   12f50:	ldr	r8, [sp, #44]	; 0x2c
   12f54:	bcs	12f84 <__assert_fail@plt+0x2070>
   12f58:	sub	r6, r8, #1
   12f5c:	sub	r4, r9, #1
   12f60:	add	r6, r6, r3
   12f64:	ldr	r3, [sp, #40]	; 0x28
   12f68:	add	r4, r8, r4
   12f6c:	add	r5, r3, #4
   12f70:	ldrb	r1, [r4, #1]!
   12f74:	mov	r0, r5
   12f78:	bl	127f0 <__assert_fail@plt+0x18dc>
   12f7c:	cmp	r6, r4
   12f80:	bne	12f70 <__assert_fail@plt+0x205c>
   12f84:	mov	fp, #1
   12f88:	b	12d68 <__assert_fail@plt+0x1e54>
   12f8c:	str	fp, [sp, #24]
   12f90:	b	12958 <__assert_fail@plt+0x1a44>
   12f94:	mov	r2, #5
   12f98:	mov	r0, #0
   12f9c:	ldr	r1, [sp, #36]	; 0x24
   12fa0:	str	r3, [sp, #48]	; 0x30
   12fa4:	bl	10d58 <dcgettext@plt>
   12fa8:	ldr	ip, [sp, #44]	; 0x2c
   12fac:	mov	r1, #0
   12fb0:	mov	r2, r0
   12fb4:	mov	r0, r1
   12fb8:	ldr	r3, [sp, #48]	; 0x30
   12fbc:	ldrb	lr, [r7, fp]
   12fc0:	ldrb	ip, [ip]
   12fc4:	ldrb	r3, [r7, r3]
   12fc8:	stm	sp, {ip, lr}
   12fcc:	str	lr, [sp, #16]
   12fd0:	str	r3, [sp, #8]
   12fd4:	str	ip, [sp, #12]
   12fd8:	bl	10dc4 <error@plt>
   12fdc:	add	r2, r5, #3
   12fe0:	b	12940 <__assert_fail@plt+0x1a2c>
   12fe4:	mov	r1, r9
   12fe8:	mov	r0, r7
   12fec:	bl	11e90 <__assert_fail@plt+0xf7c>
   12ff0:	mov	fp, r8
   12ff4:	movw	r1, #31140	; 0x79a4
   12ff8:	movt	r1, #1
   12ffc:	mov	r4, r0
   13000:	b	12e1c <__assert_fail@plt+0x1f08>
   13004:	cmp	r1, #58	; 0x3a
   13008:	mov	r2, #5
   1300c:	movweq	r1, #30972	; 0x78fc
   13010:	movwne	r1, #31008	; 0x7920
   13014:	movteq	r1, #1
   13018:	movtne	r1, #1
   1301c:	mov	r0, r6
   13020:	mov	fp, r8
   13024:	bl	10d58 <dcgettext@plt>
   13028:	mov	r2, r0
   1302c:	mov	r1, r6
   13030:	mov	r0, r6
   13034:	bl	10dc4 <error@plt>
   13038:	b	12d68 <__assert_fail@plt+0x1e54>
   1303c:	movw	r1, #30628	; 0x77a4
   13040:	movt	r1, #1
   13044:	ldr	r3, [pc, #52]	; 13080 <__assert_fail@plt+0x216c>
   13048:	movw	r0, #30792	; 0x7848
   1304c:	movt	r0, #1
   13050:	movw	r2, #679	; 0x2a7
   13054:	bl	10f14 <__assert_fail@plt>
   13058:	bl	127c8 <__assert_fail@plt+0x18b4>
   1305c:	movw	r1, #30628	; 0x77a4
   13060:	movt	r1, #1
   13064:	ldr	r3, [pc, #24]	; 13084 <__assert_fail@plt+0x2170>
   13068:	movw	r0, #30792	; 0x7848
   1306c:	movt	r0, #1
   13070:	movw	r2, #701	; 0x2bd
   13074:	bl	10f14 <__assert_fail@plt>
   13078:	andeq	r7, r1, ip, asr #12
   1307c:	muleq	r1, r0, r6
   13080:	andeq	r7, r1, r4, lsr #13
   13084:	andeq	r7, r1, ip, ror r6
   13088:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1308c:	mov	r5, r0
   13090:	mov	r4, r2
   13094:	strd	r6, [sp, #8]
   13098:	mov	r7, r1
   1309c:	mov	r6, #1
   130a0:	strd	r8, [sp, #16]
   130a4:	mvn	r8, #1
   130a8:	mvn	r9, #0
   130ac:	str	sl, [sp, #24]
   130b0:	str	lr, [sp, #28]
   130b4:	strd	r8, [r0, #8]
   130b8:	b	130c0 <__assert_fail@plt+0x21ac>
   130bc:	strb	r6, [r4, r0]
   130c0:	mov	r1, #0
   130c4:	mov	r0, r5
   130c8:	bl	12358 <__assert_fail@plt+0x1444>
   130cc:	cmn	r0, #1
   130d0:	bne	130bc <__assert_fail@plt+0x21a8>
   130d4:	cmp	r7, #0
   130d8:	beq	130f8 <__assert_fail@plt+0x21e4>
   130dc:	sub	r3, r4, #1
   130e0:	add	r1, r4, #255	; 0xff
   130e4:	ldrb	r2, [r3, #1]!
   130e8:	eor	r2, r2, #1
   130ec:	cmp	r3, r1
   130f0:	strb	r2, [r3]
   130f4:	bne	130e4 <__assert_fail@plt+0x21d0>
   130f8:	ldrd	r4, [sp]
   130fc:	ldrd	r6, [sp, #8]
   13100:	ldrd	r8, [sp, #16]
   13104:	ldr	sl, [sp, #24]
   13108:	add	sp, sp, #28
   1310c:	pop	{pc}		; (ldr pc, [sp], #4)
   13110:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13114:	mov	r5, #0
   13118:	mov	r4, r5
   1311c:	strd	r6, [sp, #8]
   13120:	movw	r7, #37988	; 0x9464
   13124:	movt	r7, #2
   13128:	mvn	r6, #-2147483648	; 0x80000000
   1312c:	strd	r8, [sp, #16]
   13130:	mov	r8, r0
   13134:	strd	sl, [sp, #24]
   13138:	movw	sl, #37212	; 0x915c
   1313c:	movt	sl, #2
   13140:	movw	fp, #37204	; 0x9154
   13144:	movt	fp, #2
   13148:	str	lr, [sp, #32]
   1314c:	sub	sp, sp, #4
   13150:	cmp	r4, r5
   13154:	bcs	13260 <__assert_fail@plt+0x234c>
   13158:	cmn	r6, #-2147483647	; 0x80000001
   1315c:	beq	13170 <__assert_fail@plt+0x225c>
   13160:	ldrb	r3, [r7, r4]
   13164:	add	r2, r7, r4
   13168:	cmp	r3, r6
   1316c:	beq	1329c <__assert_fail@plt+0x2388>
   13170:	add	r3, r7, r4
   13174:	mov	r0, r4
   13178:	ldrb	r3, [r3]
   1317c:	add	r2, sl, r3
   13180:	mov	r6, r3
   13184:	ldrb	r2, [r2, #512]	; 0x200
   13188:	cmp	r2, #0
   1318c:	moveq	r3, r0
   13190:	beq	132c0 <__assert_fail@plt+0x23ac>
   13194:	mov	r4, r0
   13198:	mov	r9, #1
   1319c:	mov	r2, #0
   131a0:	cmp	r4, #0
   131a4:	beq	131b8 <__assert_fail@plt+0x22a4>
   131a8:	ldr	r1, [pc, #376]	; 13328 <__assert_fail@plt+0x2414>
   131ac:	ldrb	r1, [r4, r1]
   131b0:	cmp	r1, r3
   131b4:	moveq	r9, r2
   131b8:	cmp	r9, #0
   131bc:	add	r4, r4, #1
   131c0:	beq	13284 <__assert_fail@plt+0x2370>
   131c4:	add	r0, r7, r0
   131c8:	mov	r2, r9
   131cc:	ldr	r3, [fp]
   131d0:	mov	r1, #1
   131d4:	bl	10d28 <fwrite_unlocked@plt>
   131d8:	cmp	r9, r0
   131dc:	beq	13284 <__assert_fail@plt+0x2370>
   131e0:	bl	10e54 <__errno_location@plt>
   131e4:	ldr	r4, [r0]
   131e8:	mov	r2, #5
   131ec:	movw	r1, #31252	; 0x7a14
   131f0:	movt	r1, #1
   131f4:	mov	r0, #0
   131f8:	bl	10d58 <dcgettext@plt>
   131fc:	mov	r2, r0
   13200:	mov	r0, #1
   13204:	mov	r1, r4
   13208:	bl	10dc4 <error@plt>
   1320c:	bne	13230 <__assert_fail@plt+0x231c>
   13210:	add	r4, r3, #1
   13214:	ldrb	r3, [r7, r4]
   13218:	add	r2, sl, r3
   1321c:	mov	r6, r3
   13220:	ldrb	r2, [r2, #512]	; 0x200
   13224:	cmp	r2, #0
   13228:	bne	1331c <__assert_fail@plt+0x2408>
   1322c:	mov	r4, r5
   13230:	subs	r6, r5, r0
   13234:	beq	13254 <__assert_fail@plt+0x2340>
   13238:	add	r0, r7, r0
   1323c:	mov	r2, r6
   13240:	ldr	r3, [fp]
   13244:	mov	r1, #1
   13248:	bl	10d28 <fwrite_unlocked@plt>
   1324c:	cmp	r6, r0
   13250:	bne	131e0 <__assert_fail@plt+0x22cc>
   13254:	cmp	r5, r4
   13258:	mvn	r6, #-2147483648	; 0x80000000
   1325c:	bhi	13170 <__assert_fail@plt+0x225c>
   13260:	movw	r0, #37988	; 0x9464
   13264:	movt	r0, #2
   13268:	mov	r1, #8192	; 0x2000
   1326c:	blx	r8
   13270:	subs	r5, r0, #0
   13274:	beq	13300 <__assert_fail@plt+0x23ec>
   13278:	cmn	r6, #-2147483647	; 0x80000001
   1327c:	movne	r4, #0
   13280:	beq	132f0 <__assert_fail@plt+0x23dc>
   13284:	cmp	r5, r4
   13288:	bls	13150 <__assert_fail@plt+0x223c>
   1328c:	ldrb	r3, [r7, r4]
   13290:	add	r2, r7, r4
   13294:	cmp	r3, r6
   13298:	bne	13170 <__assert_fail@plt+0x225c>
   1329c:	add	r4, r4, #1
   132a0:	cmp	r4, r5
   132a4:	beq	13150 <__assert_fail@plt+0x223c>
   132a8:	ldrb	r3, [r2, #1]!
   132ac:	cmp	r3, r6
   132b0:	beq	1329c <__assert_fail@plt+0x2388>
   132b4:	mvn	r6, #-2147483648	; 0x80000000
   132b8:	b	13150 <__assert_fail@plt+0x223c>
   132bc:	mov	r3, r4
   132c0:	add	r4, r3, #2
   132c4:	cmp	r4, r5
   132c8:	bcs	1320c <__assert_fail@plt+0x22f8>
   132cc:	ldrb	r3, [r7, r4]
   132d0:	add	r2, sl, r3
   132d4:	mov	r6, r3
   132d8:	ldrb	r2, [r2, #512]	; 0x200
   132dc:	cmp	r2, #0
   132e0:	beq	132bc <__assert_fail@plt+0x23a8>
   132e4:	sub	r2, r4, r0
   132e8:	add	r9, r2, #1
   132ec:	b	131a0 <__assert_fail@plt+0x228c>
   132f0:	movw	r3, #37988	; 0x9464
   132f4:	movt	r3, #2
   132f8:	mov	r0, #0
   132fc:	b	13178 <__assert_fail@plt+0x2264>
   13300:	add	sp, sp, #4
   13304:	ldrd	r4, [sp]
   13308:	ldrd	r6, [sp, #8]
   1330c:	ldrd	r8, [sp, #16]
   13310:	ldrd	sl, [sp, #24]
   13314:	add	sp, sp, #32
   13318:	pop	{pc}		; (ldr pc, [sp], #4)
   1331c:	cmp	r4, r5
   13320:	bcs	13230 <__assert_fail@plt+0x231c>
   13324:	b	132e4 <__assert_fail@plt+0x23d0>
   13328:	andeq	r9, r2, r3, ror #8
   1332c:	subs	r4, r0, #0
   13330:	str	r7, [sp, #-8]!
   13334:	str	lr, [sp, #4]
   13338:	sub	sp, sp, #56	; 0x38
   1333c:	beq	13384 <__assert_fail@plt+0x2470>
   13340:	movw	r3, #37192	; 0x9148
   13344:	movt	r3, #2
   13348:	ldr	r5, [r3]
   1334c:	mov	r2, #5
   13350:	movw	r1, #31268	; 0x7a24
   13354:	movt	r1, #1
   13358:	mov	r0, #0
   1335c:	bl	10d58 <dcgettext@plt>
   13360:	movw	r3, #46188	; 0xb46c
   13364:	movt	r3, #2
   13368:	mov	r2, r0
   1336c:	mov	r1, #1
   13370:	ldr	r3, [r3]
   13374:	mov	r0, r5
   13378:	bl	10e9c <__fprintf_chk@plt>
   1337c:	mov	r0, r4
   13380:	bl	10e30 <exit@plt>
   13384:	mov	r2, #5
   13388:	movw	r1, #31308	; 0x7a4c
   1338c:	movt	r1, #1
   13390:	movw	r5, #37204	; 0x9154
   13394:	movt	r5, #2
   13398:	bl	10d58 <dcgettext@plt>
   1339c:	movw	r3, #46188	; 0xb46c
   133a0:	movt	r3, #2
   133a4:	mov	r1, r0
   133a8:	mov	r0, #1
   133ac:	ldr	r2, [r3]
   133b0:	bl	10e84 <__printf_chk@plt>
   133b4:	mov	r2, #5
   133b8:	movw	r1, #31344	; 0x7a70
   133bc:	movt	r1, #1
   133c0:	mov	r0, r4
   133c4:	bl	10d58 <dcgettext@plt>
   133c8:	ldr	r1, [r5]
   133cc:	bl	10cb0 <fputs_unlocked@plt>
   133d0:	mov	r2, #5
   133d4:	movw	r1, #31840	; 0x7c60
   133d8:	movt	r1, #1
   133dc:	mov	r0, r4
   133e0:	bl	10d58 <dcgettext@plt>
   133e4:	ldr	r1, [r5]
   133e8:	bl	10cb0 <fputs_unlocked@plt>
   133ec:	mov	r2, #5
   133f0:	movw	r1, #31888	; 0x7c90
   133f4:	movt	r1, #1
   133f8:	mov	r0, r4
   133fc:	bl	10d58 <dcgettext@plt>
   13400:	ldr	r1, [r5]
   13404:	bl	10cb0 <fputs_unlocked@plt>
   13408:	mov	r2, #5
   1340c:	movw	r1, #31944	; 0x7cc8
   13410:	movt	r1, #1
   13414:	mov	r0, r4
   13418:	bl	10d58 <dcgettext@plt>
   1341c:	ldr	r1, [r5]
   13420:	bl	10cb0 <fputs_unlocked@plt>
   13424:	mov	r2, #5
   13428:	movw	r1, #32320	; 0x7e40
   1342c:	movt	r1, #1
   13430:	mov	r0, r4
   13434:	bl	10d58 <dcgettext@plt>
   13438:	ldr	r1, [r5]
   1343c:	bl	10cb0 <fputs_unlocked@plt>
   13440:	mov	r2, #5
   13444:	movw	r1, #32748	; 0x7fec
   13448:	movt	r1, #1
   1344c:	mov	r0, r4
   13450:	bl	10d58 <dcgettext@plt>
   13454:	ldr	r1, [r5]
   13458:	bl	10cb0 <fputs_unlocked@plt>
   1345c:	mov	r2, #5
   13460:	movw	r1, #33160	; 0x8188
   13464:	movt	r1, #1
   13468:	mov	r0, r4
   1346c:	bl	10d58 <dcgettext@plt>
   13470:	ldr	r1, [r5]
   13474:	bl	10cb0 <fputs_unlocked@plt>
   13478:	movw	r0, #30212	; 0x7604
   1347c:	movt	r0, #1
   13480:	ldr	ip, [r0, #176]	; 0xb0
   13484:	ldrd	r2, [r0, #184]	; 0xb8
   13488:	ldr	r6, [r0, #180]	; 0xb4
   1348c:	subs	r1, ip, #0
   13490:	str	ip, [sp]
   13494:	ldrd	r8, [r0, #192]	; 0xc0
   13498:	strd	r2, [sp, #8]
   1349c:	ldrd	r2, [r0, #200]	; 0xc8
   134a0:	str	r6, [sp, #4]
   134a4:	ldrd	r6, [r0, #208]	; 0xd0
   134a8:	strd	r8, [sp, #16]
   134ac:	ldrd	r8, [r0, #216]	; 0xd8
   134b0:	strd	r2, [sp, #24]
   134b4:	ldrd	r2, [r0, #224]	; 0xe0
   134b8:	strd	r6, [sp, #32]
   134bc:	movwne	r7, #31264	; 0x7a20
   134c0:	mov	r6, sp
   134c4:	movtne	r7, #1
   134c8:	strd	r8, [sp, #40]	; 0x28
   134cc:	strd	r2, [sp, #48]	; 0x30
   134d0:	bne	135c8 <__assert_fail@plt+0x26b4>
   134d4:	ldr	r6, [r6, #4]
   134d8:	movw	r1, #33632	; 0x8360
   134dc:	movt	r1, #1
   134e0:	mov	r2, #5
   134e4:	cmp	r6, #0
   134e8:	beq	135dc <__assert_fail@plt+0x26c8>
   134ec:	mov	r0, #0
   134f0:	bl	10d58 <dcgettext@plt>
   134f4:	mov	r1, r0
   134f8:	movw	r3, #33656	; 0x8378
   134fc:	movt	r3, #1
   13500:	movw	r2, #33696	; 0x83a0
   13504:	movt	r2, #1
   13508:	mov	r0, #1
   1350c:	bl	10e84 <__printf_chk@plt>
   13510:	mov	r1, #0
   13514:	mov	r0, #5
   13518:	bl	10ec0 <setlocale@plt>
   1351c:	cmp	r0, #0
   13520:	movweq	r7, #31264	; 0x7a20
   13524:	movteq	r7, #1
   13528:	beq	1354c <__assert_fail@plt+0x2638>
   1352c:	movw	r1, #33712	; 0x83b0
   13530:	movt	r1, #1
   13534:	mov	r2, #3
   13538:	movw	r7, #31264	; 0x7a20
   1353c:	movt	r7, #1
   13540:	bl	10ef0 <strncmp@plt>
   13544:	cmp	r0, #0
   13548:	bne	13694 <__assert_fail@plt+0x2780>
   1354c:	mov	r2, #5
   13550:	movw	r1, #33788	; 0x83fc
   13554:	movt	r1, #1
   13558:	mov	r0, #0
   1355c:	bl	10d58 <dcgettext@plt>
   13560:	mov	r1, r0
   13564:	movw	r3, #31264	; 0x7a20
   13568:	movt	r3, #1
   1356c:	movw	r2, #33656	; 0x8378
   13570:	movt	r2, #1
   13574:	mov	r0, #1
   13578:	bl	10e84 <__printf_chk@plt>
   1357c:	mov	r2, #5
   13580:	movw	r1, #33816	; 0x8418
   13584:	movt	r1, #1
   13588:	mov	r0, #0
   1358c:	bl	10d58 <dcgettext@plt>
   13590:	movw	r2, #34952	; 0x8888
   13594:	movt	r2, #1
   13598:	cmp	r6, r7
   1359c:	movw	r3, #32316	; 0x7e3c
   135a0:	movt	r3, #1
   135a4:	mov	r1, r0
   135a8:	moveq	r3, r2
   135ac:	mov	r2, r6
   135b0:	mov	r0, #1
   135b4:	bl	10e84 <__printf_chk@plt>
   135b8:	b	1337c <__assert_fail@plt+0x2468>
   135bc:	ldr	r1, [r6, #8]!
   135c0:	cmp	r1, #0
   135c4:	beq	134d4 <__assert_fail@plt+0x25c0>
   135c8:	mov	r0, r7
   135cc:	bl	10cbc <strcmp@plt>
   135d0:	cmp	r0, #0
   135d4:	bne	135bc <__assert_fail@plt+0x26a8>
   135d8:	b	134d4 <__assert_fail@plt+0x25c0>
   135dc:	mov	r0, r6
   135e0:	bl	10d58 <dcgettext@plt>
   135e4:	mov	r1, r0
   135e8:	movw	r3, #33656	; 0x8378
   135ec:	movt	r3, #1
   135f0:	movw	r2, #33696	; 0x83a0
   135f4:	movt	r2, #1
   135f8:	mov	r0, #1
   135fc:	bl	10e84 <__printf_chk@plt>
   13600:	mov	r1, r6
   13604:	mov	r0, #5
   13608:	bl	10ec0 <setlocale@plt>
   1360c:	cmp	r0, #0
   13610:	beq	1362c <__assert_fail@plt+0x2718>
   13614:	movw	r1, #33712	; 0x83b0
   13618:	movt	r1, #1
   1361c:	mov	r2, #3
   13620:	bl	10ef0 <strncmp@plt>
   13624:	cmp	r0, #0
   13628:	bne	13688 <__assert_fail@plt+0x2774>
   1362c:	mov	r2, #5
   13630:	movw	r1, #33788	; 0x83fc
   13634:	movt	r1, #1
   13638:	mov	r0, #0
   1363c:	bl	10d58 <dcgettext@plt>
   13640:	mov	r1, r0
   13644:	movw	r3, #31264	; 0x7a20
   13648:	movt	r3, #1
   1364c:	movw	r2, #33656	; 0x8378
   13650:	movt	r2, #1
   13654:	mov	r0, #1
   13658:	bl	10e84 <__printf_chk@plt>
   1365c:	movw	r1, #33816	; 0x8418
   13660:	movt	r1, #1
   13664:	mov	r2, #5
   13668:	mov	r0, #0
   1366c:	bl	10d58 <dcgettext@plt>
   13670:	movw	r6, #31264	; 0x7a20
   13674:	movt	r6, #1
   13678:	movw	r3, #34952	; 0x8888
   1367c:	movt	r3, #1
   13680:	mov	r1, r0
   13684:	b	135ac <__assert_fail@plt+0x2698>
   13688:	movw	r7, #31264	; 0x7a20
   1368c:	movt	r7, #1
   13690:	mov	r6, r7
   13694:	mov	r2, #5
   13698:	movw	r1, #33716	; 0x83b4
   1369c:	movt	r1, #1
   136a0:	mov	r0, #0
   136a4:	bl	10d58 <dcgettext@plt>
   136a8:	ldr	r1, [r5]
   136ac:	bl	10cb0 <fputs_unlocked@plt>
   136b0:	b	1354c <__assert_fail@plt+0x2638>
   136b4:	movw	r3, #46180	; 0xb464
   136b8:	movt	r3, #2
   136bc:	str	r0, [r3]
   136c0:	bx	lr
   136c4:	movw	r3, #46180	; 0xb464
   136c8:	movt	r3, #2
   136cc:	strb	r0, [r3, #4]
   136d0:	bx	lr
   136d4:	movw	r3, #37204	; 0x9154
   136d8:	movt	r3, #2
   136dc:	strd	r4, [sp, #-16]!
   136e0:	ldr	r0, [r3]
   136e4:	str	r6, [sp, #8]
   136e8:	str	lr, [sp, #12]
   136ec:	sub	sp, sp, #8
   136f0:	bl	17100 <__assert_fail@plt+0x61ec>
   136f4:	cmp	r0, #0
   136f8:	beq	13724 <__assert_fail@plt+0x2810>
   136fc:	movw	r4, #46180	; 0xb464
   13700:	movt	r4, #2
   13704:	ldrb	r6, [r4, #4]
   13708:	bl	10e54 <__errno_location@plt>
   1370c:	mov	r5, r0
   13710:	cmp	r6, #0
   13714:	beq	13750 <__assert_fail@plt+0x283c>
   13718:	ldr	r3, [r0]
   1371c:	cmp	r3, #32
   13720:	bne	13750 <__assert_fail@plt+0x283c>
   13724:	movw	r3, #37192	; 0x9148
   13728:	movt	r3, #2
   1372c:	ldr	r0, [r3]
   13730:	bl	17100 <__assert_fail@plt+0x61ec>
   13734:	cmp	r0, #0
   13738:	bne	13798 <__assert_fail@plt+0x2884>
   1373c:	add	sp, sp, #8
   13740:	ldrd	r4, [sp]
   13744:	ldr	r6, [sp, #8]
   13748:	add	sp, sp, #12
   1374c:	pop	{pc}		; (ldr pc, [sp], #4)
   13750:	movw	r1, #31252	; 0x7a14
   13754:	movt	r1, #1
   13758:	mov	r2, #5
   1375c:	mov	r0, #0
   13760:	bl	10d58 <dcgettext@plt>
   13764:	mov	r6, r0
   13768:	ldr	r0, [r4]
   1376c:	cmp	r0, #0
   13770:	beq	137a8 <__assert_fail@plt+0x2894>
   13774:	ldr	r4, [r5]
   13778:	bl	15978 <__assert_fail@plt+0x4a64>
   1377c:	mov	r3, r0
   13780:	movw	r2, #35232	; 0x89a0
   13784:	movt	r2, #1
   13788:	mov	r0, #0
   1378c:	str	r6, [sp]
   13790:	mov	r1, r4
   13794:	bl	10dc4 <error@plt>
   13798:	movw	r3, #37104	; 0x90f0
   1379c:	movt	r3, #2
   137a0:	ldr	r0, [r3]
   137a4:	bl	10cf8 <_exit@plt>
   137a8:	mov	r3, r6
   137ac:	movw	r2, #35236	; 0x89a4
   137b0:	movt	r2, #1
   137b4:	ldr	r1, [r5]
   137b8:	bl	10dc4 <error@plt>
   137bc:	b	13798 <__assert_fail@plt+0x2884>
   137c0:	b	10cc8 <posix_fadvise64@plt>
   137c4:	cmp	r0, #0
   137c8:	bxeq	lr
   137cc:	str	r4, [sp, #-16]!
   137d0:	mov	r4, r1
   137d4:	strd	r6, [sp, #4]
   137d8:	mov	r6, #0
   137dc:	mov	r7, #0
   137e0:	str	lr, [sp, #12]
   137e4:	sub	sp, sp, #16
   137e8:	bl	10e90 <fileno@plt>
   137ec:	mov	r2, r6
   137f0:	mov	r3, r7
   137f4:	strd	r6, [sp]
   137f8:	str	r4, [sp, #8]
   137fc:	bl	10cc8 <posix_fadvise64@plt>
   13800:	add	sp, sp, #16
   13804:	ldr	r4, [sp]
   13808:	ldrd	r6, [sp, #4]
   1380c:	add	sp, sp, #12
   13810:	pop	{pc}		; (ldr pc, [sp], #4)
   13814:	strd	r4, [sp, #-12]!
   13818:	mov	r5, r0
   1381c:	str	lr, [sp, #8]
   13820:	sub	sp, sp, #12
   13824:	bl	10e54 <__errno_location@plt>
   13828:	mov	r4, r0
   1382c:	mov	r2, #0
   13830:	ldr	r3, [r4]
   13834:	mov	r0, r5
   13838:	str	r2, [r4]
   1383c:	str	r3, [sp]
   13840:	str	r3, [sp, #4]
   13844:	bl	10cec <free@plt>
   13848:	ldr	r3, [r4]
   1384c:	add	r2, sp, #8
   13850:	clz	r3, r3
   13854:	lsr	r3, r3, #5
   13858:	add	r3, r2, r3, lsl #2
   1385c:	ldr	r3, [r3, #-8]
   13860:	str	r3, [r4]
   13864:	add	sp, sp, #12
   13868:	ldrd	r4, [sp]
   1386c:	add	sp, sp, #8
   13870:	pop	{pc}		; (ldr pc, [sp], #4)
   13874:	strd	r4, [sp, #-16]!
   13878:	subs	r4, r0, #0
   1387c:	str	r6, [sp, #8]
   13880:	str	lr, [sp, #12]
   13884:	beq	1391c <__assert_fail@plt+0x2a08>
   13888:	mov	r1, #47	; 0x2f
   1388c:	bl	10ecc <strrchr@plt>
   13890:	subs	r5, r0, #0
   13894:	beq	138f4 <__assert_fail@plt+0x29e0>
   13898:	add	r6, r5, #1
   1389c:	sub	r3, r6, r4
   138a0:	cmp	r3, #6
   138a4:	ble	138f4 <__assert_fail@plt+0x29e0>
   138a8:	movw	r1, #35296	; 0x89e0
   138ac:	movt	r1, #1
   138b0:	mov	r2, #7
   138b4:	sub	r0, r5, #6
   138b8:	bl	10ef0 <strncmp@plt>
   138bc:	cmp	r0, #0
   138c0:	bne	138f4 <__assert_fail@plt+0x29e0>
   138c4:	movw	r1, #35304	; 0x89e8
   138c8:	movt	r1, #1
   138cc:	mov	r2, #3
   138d0:	mov	r0, r6
   138d4:	bl	10ef0 <strncmp@plt>
   138d8:	cmp	r0, #0
   138dc:	movne	r4, r6
   138e0:	bne	138f4 <__assert_fail@plt+0x29e0>
   138e4:	add	r4, r5, #4
   138e8:	movw	r3, #37176	; 0x9138
   138ec:	movt	r3, #2
   138f0:	str	r4, [r3]
   138f4:	movw	r2, #46188	; 0xb46c
   138f8:	movt	r2, #2
   138fc:	ldr	r6, [sp, #8]
   13900:	movw	r3, #37180	; 0x913c
   13904:	movt	r3, #2
   13908:	str	r4, [r2]
   1390c:	str	r4, [r3]
   13910:	ldrd	r4, [sp]
   13914:	add	sp, sp, #12
   13918:	pop	{pc}		; (ldr pc, [sp], #4)
   1391c:	movw	r3, #37192	; 0x9148
   13920:	movt	r3, #2
   13924:	movw	r0, #35240	; 0x89a8
   13928:	movt	r0, #1
   1392c:	ldr	r3, [r3]
   13930:	mov	r2, #55	; 0x37
   13934:	mov	r1, #1
   13938:	bl	10d88 <fwrite@plt>
   1393c:	bl	10efc <abort@plt>
   13940:	strd	r4, [sp, #-16]!
   13944:	mov	r4, #0
   13948:	mov	r5, #0
   1394c:	cmp	r1, #10
   13950:	str	r6, [sp, #8]
   13954:	strd	r4, [r0]
   13958:	strd	r4, [r0, #8]
   1395c:	str	lr, [sp, #12]
   13960:	strd	r4, [r0, #16]
   13964:	strd	r4, [r0, #24]
   13968:	strd	r4, [r0, #32]
   1396c:	strd	r4, [r0, #40]	; 0x28
   13970:	beq	13988 <__assert_fail@plt+0x2a74>
   13974:	ldrd	r4, [sp]
   13978:	str	r1, [r0]
   1397c:	ldr	r6, [sp, #8]
   13980:	add	sp, sp, #12
   13984:	pop	{pc}		; (ldr pc, [sp], #4)
   13988:	bl	10efc <abort@plt>
   1398c:	mov	r2, #5
   13990:	strd	r4, [sp, #-16]!
   13994:	mov	r5, r0
   13998:	str	r6, [sp, #8]
   1399c:	mov	r6, r1
   139a0:	mov	r1, r0
   139a4:	mov	r0, #0
   139a8:	str	lr, [sp, #12]
   139ac:	bl	10d58 <dcgettext@plt>
   139b0:	cmp	r5, r0
   139b4:	mov	r4, r0
   139b8:	beq	139d0 <__assert_fail@plt+0x2abc>
   139bc:	mov	r0, r4
   139c0:	ldrd	r4, [sp]
   139c4:	ldr	r6, [sp, #8]
   139c8:	add	sp, sp, #12
   139cc:	pop	{pc}		; (ldr pc, [sp], #4)
   139d0:	bl	1736c <__assert_fail@plt+0x6458>
   139d4:	ldrb	r3, [r0]
   139d8:	bic	r3, r3, #32
   139dc:	cmp	r3, #85	; 0x55
   139e0:	bne	13a48 <__assert_fail@plt+0x2b34>
   139e4:	ldrb	r3, [r0, #1]
   139e8:	bic	r3, r3, #32
   139ec:	cmp	r3, #84	; 0x54
   139f0:	bne	13ac8 <__assert_fail@plt+0x2bb4>
   139f4:	ldrb	r3, [r0, #2]
   139f8:	bic	r3, r3, #32
   139fc:	cmp	r3, #70	; 0x46
   13a00:	bne	13ac8 <__assert_fail@plt+0x2bb4>
   13a04:	ldrb	r3, [r0, #3]
   13a08:	cmp	r3, #45	; 0x2d
   13a0c:	bne	13ac8 <__assert_fail@plt+0x2bb4>
   13a10:	ldrb	r3, [r0, #4]
   13a14:	cmp	r3, #56	; 0x38
   13a18:	bne	13ac8 <__assert_fail@plt+0x2bb4>
   13a1c:	ldrb	r3, [r0, #5]
   13a20:	cmp	r3, #0
   13a24:	bne	13ac8 <__assert_fail@plt+0x2bb4>
   13a28:	ldrb	r2, [r4]
   13a2c:	movw	r3, #35396	; 0x8a44
   13a30:	movt	r3, #1
   13a34:	movw	r4, #35408	; 0x8a50
   13a38:	movt	r4, #1
   13a3c:	cmp	r2, #96	; 0x60
   13a40:	movne	r4, r3
   13a44:	b	139bc <__assert_fail@plt+0x2aa8>
   13a48:	cmp	r3, #71	; 0x47
   13a4c:	bne	13ac8 <__assert_fail@plt+0x2bb4>
   13a50:	ldrb	r3, [r0, #1]
   13a54:	bic	r3, r3, #32
   13a58:	cmp	r3, #66	; 0x42
   13a5c:	bne	13ac8 <__assert_fail@plt+0x2bb4>
   13a60:	ldrb	r3, [r0, #2]
   13a64:	cmp	r3, #49	; 0x31
   13a68:	bne	13ac8 <__assert_fail@plt+0x2bb4>
   13a6c:	ldrb	r3, [r0, #3]
   13a70:	cmp	r3, #56	; 0x38
   13a74:	bne	13ac8 <__assert_fail@plt+0x2bb4>
   13a78:	ldrb	r3, [r0, #4]
   13a7c:	cmp	r3, #48	; 0x30
   13a80:	bne	13ac8 <__assert_fail@plt+0x2bb4>
   13a84:	ldrb	r3, [r0, #5]
   13a88:	cmp	r3, #51	; 0x33
   13a8c:	bne	13ac8 <__assert_fail@plt+0x2bb4>
   13a90:	ldrb	r3, [r0, #6]
   13a94:	cmp	r3, #48	; 0x30
   13a98:	bne	13ac8 <__assert_fail@plt+0x2bb4>
   13a9c:	ldrb	r3, [r0, #7]
   13aa0:	cmp	r3, #0
   13aa4:	bne	13ac8 <__assert_fail@plt+0x2bb4>
   13aa8:	ldrb	r2, [r4]
   13aac:	movw	r3, #35400	; 0x8a48
   13ab0:	movt	r3, #1
   13ab4:	movw	r4, #35404	; 0x8a4c
   13ab8:	movt	r4, #1
   13abc:	cmp	r2, #96	; 0x60
   13ac0:	movne	r4, r3
   13ac4:	b	139bc <__assert_fail@plt+0x2aa8>
   13ac8:	movw	r3, #35412	; 0x8a54
   13acc:	movt	r3, #1
   13ad0:	cmp	r6, #9
   13ad4:	movw	r4, #35392	; 0x8a40
   13ad8:	movt	r4, #1
   13adc:	movne	r4, r3
   13ae0:	b	139bc <__assert_fail@plt+0x2aa8>
   13ae4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13ae8:	strd	r6, [sp, #8]
   13aec:	strd	r8, [sp, #16]
   13af0:	strd	sl, [sp, #24]
   13af4:	mov	fp, r0
   13af8:	mov	sl, r1
   13afc:	str	lr, [sp, #32]
   13b00:	sub	sp, sp, #116	; 0x74
   13b04:	ldr	r8, [sp, #152]	; 0x98
   13b08:	str	r3, [sp, #28]
   13b0c:	ldr	r3, [sp, #156]	; 0x9c
   13b10:	str	r2, [sp, #32]
   13b14:	and	r4, r3, #2
   13b18:	ubfx	r3, r3, #1, #1
   13b1c:	str	r3, [sp, #44]	; 0x2c
   13b20:	bl	10da0 <__ctype_get_mb_cur_max@plt>
   13b24:	str	r0, [sp, #64]	; 0x40
   13b28:	cmp	r8, #10
   13b2c:	ldrls	pc, [pc, r8, lsl #2]
   13b30:	b	152a0 <__assert_fail@plt+0x438c>
   13b34:	andeq	r3, r1, r8, lsr pc
   13b38:	ldrdeq	r3, [r1], -r4
   13b3c:			; <UNDEFINED> instruction: 0x000145b0
   13b40:	strdeq	r3, [r1], -r4
   13b44:	muleq	r1, ip, lr
   13b48:	andeq	r3, r1, r8, ror #29
   13b4c:	andeq	r3, r1, r8, ror #30
   13b50:	andeq	r3, r1, r4, lsr #31
   13b54:	andeq	r3, r1, r0, ror #22
   13b58:	andeq	r3, r1, r0, ror #22
   13b5c:	andeq	r3, r1, r0, ror #22
   13b60:	cmp	r8, #10
   13b64:	beq	13b90 <__assert_fail@plt+0x2c7c>
   13b68:	mov	r1, r8
   13b6c:	movw	r0, #35416	; 0x8a58
   13b70:	movt	r0, #1
   13b74:	bl	1398c <__assert_fail@plt+0x2a78>
   13b78:	mov	r1, r8
   13b7c:	str	r0, [sp, #164]	; 0xa4
   13b80:	movw	r0, #35412	; 0x8a54
   13b84:	movt	r0, #1
   13b88:	bl	1398c <__assert_fail@plt+0x2a78>
   13b8c:	str	r0, [sp, #168]	; 0xa8
   13b90:	cmp	r4, #0
   13b94:	movne	r4, #0
   13b98:	beq	14f7c <__assert_fail@plt+0x4068>
   13b9c:	mov	r3, #1
   13ba0:	mov	r5, #0
   13ba4:	ldr	r0, [sp, #168]	; 0xa8
   13ba8:	str	r3, [sp, #36]	; 0x24
   13bac:	str	r3, [sp, #40]	; 0x28
   13bb0:	str	r5, [sp, #68]	; 0x44
   13bb4:	bl	10e3c <strlen@plt>
   13bb8:	ldr	r3, [sp, #168]	; 0xa8
   13bbc:	str	r5, [sp, #48]	; 0x30
   13bc0:	str	r0, [sp, #56]	; 0x38
   13bc4:	str	r3, [sp, #60]	; 0x3c
   13bc8:	str	r5, [sp, #72]	; 0x48
   13bcc:	str	r8, [sp, #152]	; 0x98
   13bd0:	mov	r8, fp
   13bd4:	mov	r9, #0
   13bd8:	ldr	fp, [sp, #152]	; 0x98
   13bdc:	ldr	r3, [sp, #28]
   13be0:	cmn	r3, #1
   13be4:	beq	14144 <__assert_fail@plt+0x3230>
   13be8:	ldr	r3, [sp, #28]
   13bec:	subs	r6, r3, r9
   13bf0:	movne	r6, #1
   13bf4:	cmp	r6, #0
   13bf8:	beq	1415c <__assert_fail@plt+0x3248>
   13bfc:	ldr	r0, [sp, #32]
   13c00:	ldr	r7, [sp, #40]	; 0x28
   13c04:	add	r3, r0, r9
   13c08:	cmp	fp, #2
   13c0c:	moveq	r7, #0
   13c10:	andne	r7, r7, #1
   13c14:	str	r3, [sp, #52]	; 0x34
   13c18:	cmp	r7, #0
   13c1c:	beq	145f8 <__assert_fail@plt+0x36e4>
   13c20:	ldr	r2, [sp, #56]	; 0x38
   13c24:	cmp	r2, #0
   13c28:	beq	14894 <__assert_fail@plt+0x3980>
   13c2c:	ldr	r1, [sp, #28]
   13c30:	cmp	r2, #1
   13c34:	mov	r3, r2
   13c38:	movls	r3, #0
   13c3c:	movhi	r3, #1
   13c40:	add	r5, r9, r2
   13c44:	cmn	r1, #1
   13c48:	movne	r3, #0
   13c4c:	cmp	r3, #0
   13c50:	beq	13c5c <__assert_fail@plt+0x2d48>
   13c54:	bl	10e3c <strlen@plt>
   13c58:	str	r0, [sp, #28]
   13c5c:	ldr	r3, [sp, #28]
   13c60:	cmp	r5, r3
   13c64:	bhi	14894 <__assert_fail@plt+0x3980>
   13c68:	ldr	r0, [sp, #52]	; 0x34
   13c6c:	ldr	r2, [sp, #56]	; 0x38
   13c70:	ldr	r1, [sp, #60]	; 0x3c
   13c74:	bl	10d34 <memcmp@plt>
   13c78:	cmp	r0, #0
   13c7c:	bne	14894 <__assert_fail@plt+0x3980>
   13c80:	ldr	r3, [sp, #44]	; 0x2c
   13c84:	cmp	r3, #0
   13c88:	bne	151c4 <__assert_fail@plt+0x42b0>
   13c8c:	ldr	r3, [sp, #52]	; 0x34
   13c90:	ldrb	r5, [r3]
   13c94:	cmp	r5, #126	; 0x7e
   13c98:	ldrls	pc, [pc, r5, lsl #2]
   13c9c:	b	14554 <__assert_fail@plt+0x3640>
   13ca0:	andeq	r4, r1, r8, asr r4
   13ca4:	andeq	r4, r1, r4, asr r5
   13ca8:	andeq	r4, r1, r4, asr r5
   13cac:	andeq	r4, r1, r4, asr r5
   13cb0:	andeq	r4, r1, r4, asr r5
   13cb4:	andeq	r4, r1, r4, asr r5
   13cb8:	andeq	r4, r1, r4, asr r5
   13cbc:	andeq	r4, r1, ip, lsr #8
   13cc0:	andeq	r4, r1, r4, lsr #8
   13cc4:	andeq	r4, r1, ip, ror #6
   13cc8:	andeq	r4, r1, r8, lsl r4
   13ccc:	andeq	r4, r1, r4, ror #6
   13cd0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13cd4:	andeq	r4, r1, r0, asr #8
   13cd8:	andeq	r4, r1, r4, asr r5
   13cdc:	andeq	r4, r1, r4, asr r5
   13ce0:	andeq	r4, r1, r4, asr r5
   13ce4:	andeq	r4, r1, r4, asr r5
   13ce8:	andeq	r4, r1, r4, asr r5
   13cec:	andeq	r4, r1, r4, asr r5
   13cf0:	andeq	r4, r1, r4, asr r5
   13cf4:	andeq	r4, r1, r4, asr r5
   13cf8:	andeq	r4, r1, r4, asr r5
   13cfc:	andeq	r4, r1, r4, asr r5
   13d00:	andeq	r4, r1, r4, asr r5
   13d04:	andeq	r4, r1, r4, asr r5
   13d08:	andeq	r4, r1, r4, asr r5
   13d0c:	andeq	r4, r1, r4, asr r5
   13d10:	andeq	r4, r1, r4, asr r5
   13d14:	andeq	r4, r1, r4, asr r5
   13d18:	andeq	r4, r1, r4, asr r5
   13d1c:	andeq	r4, r1, r4, asr r5
   13d20:	andeq	r4, r1, r0, lsr r5
   13d24:	andeq	r4, r1, r8, lsr r4
   13d28:	andeq	r4, r1, r8, lsr r4
   13d2c:	andeq	r4, r1, r4, lsl r5
   13d30:	andeq	r4, r1, r8, lsr r4
   13d34:	andeq	r4, r1, r8, asr #10
   13d38:	andeq	r4, r1, r8, lsr r4
   13d3c:	muleq	r1, r4, r2
   13d40:	andeq	r4, r1, r8, lsr r4
   13d44:	andeq	r4, r1, r8, lsr r4
   13d48:	andeq	r4, r1, r8, lsr r4
   13d4c:	andeq	r4, r1, r8, asr #10
   13d50:	andeq	r4, r1, r8, asr #10
   13d54:	andeq	r4, r1, r8, asr #10
   13d58:	andeq	r4, r1, r8, asr #10
   13d5c:	andeq	r4, r1, r8, asr #10
   13d60:	andeq	r4, r1, r8, asr #10
   13d64:	andeq	r4, r1, r8, asr #10
   13d68:	andeq	r4, r1, r8, asr #10
   13d6c:	andeq	r4, r1, r8, asr #10
   13d70:	andeq	r4, r1, r8, asr #10
   13d74:	andeq	r4, r1, r8, asr #10
   13d78:	andeq	r4, r1, r8, asr #10
   13d7c:	andeq	r4, r1, r8, asr #10
   13d80:	andeq	r4, r1, r8, asr #10
   13d84:	andeq	r4, r1, r8, asr #10
   13d88:	andeq	r4, r1, r8, asr #10
   13d8c:	andeq	r4, r1, r8, lsr r4
   13d90:	andeq	r4, r1, r8, lsr r4
   13d94:	andeq	r4, r1, r8, lsr r4
   13d98:	andeq	r4, r1, r8, lsr r4
   13d9c:	andeq	r4, r1, r8, ror #4
   13da0:	andeq	r4, r1, r4, asr r5
   13da4:	andeq	r4, r1, r8, asr #10
   13da8:	andeq	r4, r1, r8, asr #10
   13dac:	andeq	r4, r1, r8, asr #10
   13db0:	andeq	r4, r1, r8, asr #10
   13db4:	andeq	r4, r1, r8, asr #10
   13db8:	andeq	r4, r1, r8, asr #10
   13dbc:	andeq	r4, r1, r8, asr #10
   13dc0:	andeq	r4, r1, r8, asr #10
   13dc4:	andeq	r4, r1, r8, asr #10
   13dc8:	andeq	r4, r1, r8, asr #10
   13dcc:	andeq	r4, r1, r8, asr #10
   13dd0:	andeq	r4, r1, r8, asr #10
   13dd4:	andeq	r4, r1, r8, asr #10
   13dd8:	andeq	r4, r1, r8, asr #10
   13ddc:	andeq	r4, r1, r8, asr #10
   13de0:	andeq	r4, r1, r8, asr #10
   13de4:	andeq	r4, r1, r8, asr #10
   13de8:	andeq	r4, r1, r8, asr #10
   13dec:	andeq	r4, r1, r8, asr #10
   13df0:	andeq	r4, r1, r8, asr #10
   13df4:	andeq	r4, r1, r8, asr #10
   13df8:	andeq	r4, r1, r8, asr #10
   13dfc:	andeq	r4, r1, r8, asr #10
   13e00:	andeq	r4, r1, r8, asr #10
   13e04:	andeq	r4, r1, r8, asr #10
   13e08:	andeq	r4, r1, r8, asr #10
   13e0c:	andeq	r4, r1, r8, lsr r4
   13e10:	andeq	r4, r1, r0, lsl r2
   13e14:	andeq	r4, r1, r8, asr #10
   13e18:	andeq	r4, r1, r8, lsr r4
   13e1c:	andeq	r4, r1, r8, asr #10
   13e20:	andeq	r4, r1, r8, lsr r4
   13e24:	andeq	r4, r1, r8, asr #10
   13e28:	andeq	r4, r1, r8, asr #10
   13e2c:	andeq	r4, r1, r8, asr #10
   13e30:	andeq	r4, r1, r8, asr #10
   13e34:	andeq	r4, r1, r8, asr #10
   13e38:	andeq	r4, r1, r8, asr #10
   13e3c:	andeq	r4, r1, r8, asr #10
   13e40:	andeq	r4, r1, r8, asr #10
   13e44:	andeq	r4, r1, r8, asr #10
   13e48:	andeq	r4, r1, r8, asr #10
   13e4c:	andeq	r4, r1, r8, asr #10
   13e50:	andeq	r4, r1, r8, asr #10
   13e54:	andeq	r4, r1, r8, asr #10
   13e58:	andeq	r4, r1, r8, asr #10
   13e5c:	andeq	r4, r1, r8, asr #10
   13e60:	andeq	r4, r1, r8, asr #10
   13e64:	andeq	r4, r1, r8, asr #10
   13e68:	andeq	r4, r1, r8, asr #10
   13e6c:	andeq	r4, r1, r8, asr #10
   13e70:	andeq	r4, r1, r8, asr #10
   13e74:	andeq	r4, r1, r8, asr #10
   13e78:	andeq	r4, r1, r8, asr #10
   13e7c:	andeq	r4, r1, r8, asr #10
   13e80:	andeq	r4, r1, r8, asr #10
   13e84:	andeq	r4, r1, r8, asr #10
   13e88:	andeq	r4, r1, r8, asr #10
   13e8c:	andeq	r4, r1, r4, lsr r0
   13e90:	andeq	r4, r1, r8, lsr r4
   13e94:	andeq	r4, r1, r4, lsr r0
   13e98:	andeq	r4, r1, r4, lsl r5
   13e9c:	cmp	r4, #0
   13ea0:	moveq	r3, #1
   13ea4:	streq	r3, [sp, #40]	; 0x28
   13ea8:	beq	145bc <__assert_fail@plt+0x36a8>
   13eac:	mov	r3, #0
   13eb0:	mov	r2, #1
   13eb4:	mov	r4, r3
   13eb8:	str	r2, [sp, #36]	; 0x24
   13ebc:	str	r2, [sp, #44]	; 0x2c
   13ec0:	str	r2, [sp, #56]	; 0x38
   13ec4:	str	r3, [sp, #68]	; 0x44
   13ec8:	movw	r3, #35412	; 0x8a54
   13ecc:	movt	r3, #1
   13ed0:	str	r4, [sp, #40]	; 0x28
   13ed4:	mov	r8, #2
   13ed8:	str	r4, [sp, #48]	; 0x30
   13edc:	str	r3, [sp, #60]	; 0x3c
   13ee0:	str	r4, [sp, #72]	; 0x48
   13ee4:	b	13bcc <__assert_fail@plt+0x2cb8>
   13ee8:	cmp	r4, #0
   13eec:	bne	15138 <__assert_fail@plt+0x4224>
   13ef0:	cmp	sl, #0
   13ef4:	beq	14ef8 <__assert_fail@plt+0x3fe4>
   13ef8:	mov	r3, #34	; 0x22
   13efc:	mov	r1, r4
   13f00:	mov	r2, #1
   13f04:	strb	r3, [fp]
   13f08:	movw	r3, #35392	; 0x8a40
   13f0c:	movt	r3, #1
   13f10:	mov	r4, r2
   13f14:	str	r2, [sp, #36]	; 0x24
   13f18:	str	r2, [sp, #40]	; 0x28
   13f1c:	str	r1, [sp, #44]	; 0x2c
   13f20:	str	r1, [sp, #48]	; 0x30
   13f24:	str	r2, [sp, #56]	; 0x38
   13f28:	str	r3, [sp, #60]	; 0x3c
   13f2c:	str	r1, [sp, #68]	; 0x44
   13f30:	str	r1, [sp, #72]	; 0x48
   13f34:	b	13bcc <__assert_fail@plt+0x2cb8>
   13f38:	mov	r3, #0
   13f3c:	mov	r4, r8
   13f40:	str	r3, [sp, #40]	; 0x28
   13f44:	str	r3, [sp, #44]	; 0x2c
   13f48:	str	r3, [sp, #48]	; 0x30
   13f4c:	str	r8, [sp, #56]	; 0x38
   13f50:	str	r3, [sp, #60]	; 0x3c
   13f54:	str	r3, [sp, #68]	; 0x44
   13f58:	mov	r3, #1
   13f5c:	str	r3, [sp, #36]	; 0x24
   13f60:	str	r8, [sp, #72]	; 0x48
   13f64:	b	13bcc <__assert_fail@plt+0x2cb8>
   13f68:	mov	r3, #1
   13f6c:	mov	r2, #0
   13f70:	mov	r4, r2
   13f74:	mov	r8, #5
   13f78:	str	r3, [sp, #36]	; 0x24
   13f7c:	str	r3, [sp, #40]	; 0x28
   13f80:	str	r3, [sp, #44]	; 0x2c
   13f84:	str	r2, [sp, #48]	; 0x30
   13f88:	str	r3, [sp, #56]	; 0x38
   13f8c:	movw	r3, #35392	; 0x8a40
   13f90:	movt	r3, #1
   13f94:	str	r3, [sp, #60]	; 0x3c
   13f98:	str	r2, [sp, #68]	; 0x44
   13f9c:	str	r2, [sp, #72]	; 0x48
   13fa0:	b	13bcc <__assert_fail@plt+0x2cb8>
   13fa4:	mov	r3, #0
   13fa8:	mov	r2, #1
   13fac:	mov	r4, r3
   13fb0:	str	r2, [sp, #36]	; 0x24
   13fb4:	str	r2, [sp, #40]	; 0x28
   13fb8:	str	r3, [sp, #44]	; 0x2c
   13fbc:	str	r3, [sp, #48]	; 0x30
   13fc0:	str	r3, [sp, #56]	; 0x38
   13fc4:	str	r3, [sp, #60]	; 0x3c
   13fc8:	str	r3, [sp, #68]	; 0x44
   13fcc:	str	r3, [sp, #72]	; 0x48
   13fd0:	b	13bcc <__assert_fail@plt+0x2cb8>
   13fd4:	mov	r2, #1
   13fd8:	mov	r3, #0
   13fdc:	mov	r4, r3
   13fe0:	str	r2, [sp, #36]	; 0x24
   13fe4:	str	r2, [sp, #44]	; 0x2c
   13fe8:	str	r8, [sp, #56]	; 0x38
   13fec:	str	r3, [sp, #68]	; 0x44
   13ff0:	b	13ec8 <__assert_fail@plt+0x2fb4>
   13ff4:	mov	r3, #1
   13ff8:	mov	r2, #0
   13ffc:	mov	r4, r2
   14000:	mov	r8, #2
   14004:	str	r3, [sp, #36]	; 0x24
   14008:	str	r3, [sp, #40]	; 0x28
   1400c:	str	r3, [sp, #44]	; 0x2c
   14010:	str	r2, [sp, #48]	; 0x30
   14014:	str	r3, [sp, #56]	; 0x38
   14018:	movw	r3, #35412	; 0x8a54
   1401c:	movt	r3, #1
   14020:	str	r3, [sp, #60]	; 0x3c
   14024:	str	r2, [sp, #68]	; 0x44
   14028:	str	r2, [sp, #72]	; 0x48
   1402c:	b	13bcc <__assert_fail@plt+0x2cb8>
   14030:	mov	r7, #0
   14034:	ldr	r3, [sp, #28]
   14038:	cmn	r3, #1
   1403c:	beq	14b14 <__assert_fail@plt+0x3c00>
   14040:	ldr	r3, [sp, #28]
   14044:	subs	r2, r3, #1
   14048:	movne	r2, #1
   1404c:	sub	r3, fp, #2
   14050:	cmp	r2, #0
   14054:	clz	r3, r3
   14058:	lsr	r3, r3, #5
   1405c:	bne	14068 <__assert_fail@plt+0x3154>
   14060:	cmp	r9, #0
   14064:	beq	14874 <__assert_fail@plt+0x3960>
   14068:	mov	r6, #0
   1406c:	ldr	r2, [sp, #40]	; 0x28
   14070:	eor	r2, r2, #1
   14074:	orrs	r3, r3, r2
   14078:	bne	14250 <__assert_fail@plt+0x333c>
   1407c:	ldr	r2, [sp, #160]	; 0xa0
   14080:	cmp	r2, #0
   14084:	beq	140a4 <__assert_fail@plt+0x3190>
   14088:	ldr	r0, [sp, #160]	; 0xa0
   1408c:	ubfx	r1, r5, #5, #8
   14090:	and	r2, r5, #31
   14094:	ldr	r1, [r0, r1, lsl #2]
   14098:	lsr	r2, r1, r2
   1409c:	tst	r2, #1
   140a0:	bne	140ac <__assert_fail@plt+0x3198>
   140a4:	cmp	r7, #0
   140a8:	beq	1431c <__assert_fail@plt+0x3408>
   140ac:	ldr	r2, [sp, #44]	; 0x2c
   140b0:	sub	r3, fp, #2
   140b4:	clz	r3, r3
   140b8:	lsr	r3, r3, #5
   140bc:	cmp	r2, #0
   140c0:	bne	14e68 <__assert_fail@plt+0x3f54>
   140c4:	ldr	r2, [sp, #48]	; 0x30
   140c8:	eor	r2, r2, #1
   140cc:	ands	r3, r3, r2
   140d0:	beq	14108 <__assert_fail@plt+0x31f4>
   140d4:	cmp	sl, r4
   140d8:	str	r3, [sp, #48]	; 0x30
   140dc:	movhi	r2, #39	; 0x27
   140e0:	strbhi	r2, [r8, r4]
   140e4:	add	r2, r4, #1
   140e8:	cmp	sl, r2
   140ec:	movhi	r1, #36	; 0x24
   140f0:	strbhi	r1, [r8, r2]
   140f4:	add	r2, r4, #2
   140f8:	add	r4, r4, #3
   140fc:	cmp	sl, r2
   14100:	movhi	r1, #39	; 0x27
   14104:	strbhi	r1, [r8, r2]
   14108:	cmp	r4, sl
   1410c:	add	r9, r9, #1
   14110:	movcc	r3, #92	; 0x5c
   14114:	strbcc	r3, [r8, r4]
   14118:	add	r4, r4, #1
   1411c:	cmp	r4, sl
   14120:	ldr	r3, [sp, #36]	; 0x24
   14124:	strbcc	r5, [r8, r4]
   14128:	cmp	r6, #0
   1412c:	add	r4, r4, #1
   14130:	moveq	r3, #0
   14134:	str	r3, [sp, #36]	; 0x24
   14138:	ldr	r3, [sp, #28]
   1413c:	cmn	r3, #1
   14140:	bne	13be8 <__assert_fail@plt+0x2cd4>
   14144:	ldr	r3, [sp, #32]
   14148:	ldrb	r6, [r3, r9]
   1414c:	adds	r6, r6, #0
   14150:	movne	r6, #1
   14154:	cmp	r6, #0
   14158:	bne	13bfc <__assert_fail@plt+0x2ce8>
   1415c:	str	fp, [sp, #152]	; 0x98
   14160:	mov	fp, r8
   14164:	cmp	r4, #0
   14168:	ldr	r1, [sp, #44]	; 0x2c
   1416c:	movne	r3, #0
   14170:	ldr	r8, [sp, #152]	; 0x98
   14174:	sub	r2, r8, #2
   14178:	clz	r2, r2
   1417c:	lsr	r2, r2, #5
   14180:	andeq	r3, r2, r1
   14184:	cmp	r3, #0
   14188:	bne	15244 <__assert_fail@plt+0x4330>
   1418c:	eor	r3, r1, #1
   14190:	ands	r2, r2, r3
   14194:	beq	15170 <__assert_fail@plt+0x425c>
   14198:	ldr	r3, [sp, #68]	; 0x44
   1419c:	cmp	r3, #0
   141a0:	beq	15174 <__assert_fail@plt+0x4260>
   141a4:	ldr	r3, [sp, #36]	; 0x24
   141a8:	cmp	r3, #0
   141ac:	bne	15200 <__assert_fail@plt+0x42ec>
   141b0:	ldr	r3, [sp, #72]	; 0x48
   141b4:	adds	r3, r3, #0
   141b8:	movne	r3, #1
   141bc:	cmp	sl, #0
   141c0:	movne	r3, #0
   141c4:	cmp	r3, #0
   141c8:	ldreq	r2, [sp, #68]	; 0x44
   141cc:	beq	15174 <__assert_fail@plt+0x4260>
   141d0:	ldr	r2, [sp, #72]	; 0x48
   141d4:	str	r3, [sp, #68]	; 0x44
   141d8:	movw	r3, #35412	; 0x8a54
   141dc:	movt	r3, #1
   141e0:	mov	r1, #39	; 0x27
   141e4:	mov	r4, #1
   141e8:	ldr	sl, [sp, #72]	; 0x48
   141ec:	mov	r8, #2
   141f0:	str	r3, [sp, #60]	; 0x3c
   141f4:	mov	r3, #0
   141f8:	strb	r1, [fp]
   141fc:	str	r3, [sp, #44]	; 0x2c
   14200:	str	r4, [sp, #56]	; 0x38
   14204:	str	r2, [sp, #72]	; 0x48
   14208:	b	13bcc <__assert_fail@plt+0x2cb8>
   1420c:	mov	r7, #0
   14210:	cmp	fp, #2
   14214:	beq	14af4 <__assert_fail@plt+0x3be0>
   14218:	ldr	r2, [sp, #40]	; 0x28
   1421c:	ldr	r3, [sp, #56]	; 0x38
   14220:	ldr	r1, [sp, #44]	; 0x2c
   14224:	cmp	r3, #0
   14228:	moveq	r3, #0
   1422c:	andne	r3, r2, r1
   14230:	cmp	r3, #0
   14234:	moveq	r5, #92	; 0x5c
   14238:	moveq	r3, r5
   1423c:	bne	14b00 <__assert_fail@plt+0x3bec>
   14240:	ldr	r2, [sp, #40]	; 0x28
   14244:	cmp	r2, #0
   14248:	bne	14f3c <__assert_fail@plt+0x4028>
   1424c:	mov	r6, #0
   14250:	ldr	r3, [sp, #44]	; 0x2c
   14254:	cmp	r3, #0
   14258:	beq	14aec <__assert_fail@plt+0x3bd8>
   1425c:	mov	r3, #0
   14260:	b	1407c <__assert_fail@plt+0x3168>
   14264:	mov	r7, #0
   14268:	cmp	fp, #2
   1426c:	beq	14b64 <__assert_fail@plt+0x3c50>
   14270:	cmp	fp, #5
   14274:	beq	14b28 <__assert_fail@plt+0x3c14>
   14278:	sub	r3, fp, #2
   1427c:	mov	r6, #0
   14280:	clz	r3, r3
   14284:	mov	r5, #63	; 0x3f
   14288:	lsr	r3, r3, #5
   1428c:	b	1406c <__assert_fail@plt+0x3158>
   14290:	mov	r7, #0
   14294:	cmp	fp, #2
   14298:	movne	r3, #0
   1429c:	movne	r5, #39	; 0x27
   142a0:	strne	r6, [sp, #68]	; 0x44
   142a4:	bne	1406c <__assert_fail@plt+0x3158>
   142a8:	ldr	r3, [sp, #44]	; 0x2c
   142ac:	cmp	r3, #0
   142b0:	bne	14f6c <__assert_fail@plt+0x4058>
   142b4:	ldr	r3, [sp, #72]	; 0x48
   142b8:	cmp	sl, #0
   142bc:	clz	r3, r3
   142c0:	lsr	r3, r3, #5
   142c4:	moveq	r3, #0
   142c8:	cmp	r3, #0
   142cc:	bne	14e98 <__assert_fail@plt+0x3f84>
   142d0:	cmp	sl, r4
   142d4:	movhi	r3, #39	; 0x27
   142d8:	strbhi	r3, [r8, r4]
   142dc:	add	r3, r4, #1
   142e0:	cmp	sl, r3
   142e4:	movhi	r2, #92	; 0x5c
   142e8:	strbhi	r2, [r8, r3]
   142ec:	add	r3, r4, #2
   142f0:	cmp	sl, r3
   142f4:	bls	14300 <__assert_fail@plt+0x33ec>
   142f8:	mov	r2, #39	; 0x27
   142fc:	strb	r2, [r8, r3]
   14300:	mov	r3, #0
   14304:	cmp	r7, #0
   14308:	add	r4, r4, #3
   1430c:	mov	r5, #39	; 0x27
   14310:	str	r3, [sp, #48]	; 0x30
   14314:	str	r6, [sp, #68]	; 0x44
   14318:	bne	140ac <__assert_fail@plt+0x3198>
   1431c:	ldr	r2, [sp, #48]	; 0x30
   14320:	eor	r3, r3, #1
   14324:	add	r9, r9, #1
   14328:	and	r3, r3, r2
   1432c:	uxtb	r3, r3
   14330:	cmp	r3, #0
   14334:	beq	1411c <__assert_fail@plt+0x3208>
   14338:	cmp	sl, r4
   1433c:	movhi	r3, #39	; 0x27
   14340:	strbhi	r3, [r8, r4]
   14344:	add	r3, r4, #1
   14348:	add	r4, r4, #2
   1434c:	cmp	sl, r3
   14350:	movhi	r2, #39	; 0x27
   14354:	strbhi	r2, [r8, r3]
   14358:	mov	r3, #0
   1435c:	str	r3, [sp, #48]	; 0x30
   14360:	b	1411c <__assert_fail@plt+0x3208>
   14364:	mov	r3, #118	; 0x76
   14368:	b	14240 <__assert_fail@plt+0x332c>
   1436c:	mov	r3, #116	; 0x74
   14370:	ldr	r2, [sp, #44]	; 0x2c
   14374:	cmp	fp, #2
   14378:	movne	r2, #0
   1437c:	andeq	r2, r2, #1
   14380:	cmp	r2, #0
   14384:	beq	14240 <__assert_fail@plt+0x332c>
   14388:	mov	fp, r8
   1438c:	mov	r8, #2
   14390:	ldr	r3, [sp, #40]	; 0x28
   14394:	cmp	r3, #0
   14398:	movne	r8, #4
   1439c:	mov	lr, #0
   143a0:	mov	r0, fp
   143a4:	ldr	r2, [sp, #32]
   143a8:	ldr	r3, [sp, #156]	; 0x9c
   143ac:	ldr	r1, [sp, #164]	; 0xa4
   143b0:	bic	ip, r3, #2
   143b4:	ldr	r3, [sp, #28]
   143b8:	stm	sp, {r8, ip, lr}
   143bc:	ldr	ip, [sp, #168]	; 0xa8
   143c0:	str	r1, [sp, #12]
   143c4:	mov	r1, sl
   143c8:	str	ip, [sp, #16]
   143cc:	bl	13ae4 <__assert_fail@plt+0x2bd0>
   143d0:	mov	r4, r0
   143d4:	mov	r0, r4
   143d8:	add	sp, sp, #116	; 0x74
   143dc:	ldrd	r4, [sp]
   143e0:	ldrd	r6, [sp, #8]
   143e4:	ldrd	r8, [sp, #16]
   143e8:	ldrd	sl, [sp, #24]
   143ec:	add	sp, sp, #32
   143f0:	pop	{pc}		; (ldr pc, [sp], #4)
   143f4:	mov	r5, #102	; 0x66
   143f8:	ldr	r2, [sp, #44]	; 0x2c
   143fc:	sub	r3, fp, #2
   14400:	clz	r3, r3
   14404:	lsr	r3, r3, #5
   14408:	cmp	r2, #0
   1440c:	bne	14e68 <__assert_fail@plt+0x3f54>
   14410:	mov	r6, r2
   14414:	b	14108 <__assert_fail@plt+0x31f4>
   14418:	mov	r5, #110	; 0x6e
   1441c:	mov	r6, #0
   14420:	b	140ac <__assert_fail@plt+0x3198>
   14424:	mov	r5, #98	; 0x62
   14428:	b	143f8 <__assert_fail@plt+0x34e4>
   1442c:	mov	r5, #97	; 0x61
   14430:	b	143f8 <__assert_fail@plt+0x34e4>
   14434:	mov	r7, #0
   14438:	mov	r6, #0
   1443c:	b	1425c <__assert_fail@plt+0x3348>
   14440:	mov	r5, #114	; 0x72
   14444:	b	1441c <__assert_fail@plt+0x3508>
   14448:	ldr	r3, [sp, #44]	; 0x2c
   1444c:	cmp	r3, #0
   14450:	bne	151e0 <__assert_fail@plt+0x42cc>
   14454:	mov	r7, r3
   14458:	ldr	r3, [sp, #48]	; 0x30
   1445c:	sub	r2, fp, #2
   14460:	clz	r2, r2
   14464:	lsr	r2, r2, #5
   14468:	eor	r3, r3, #1
   1446c:	ands	r3, r2, r3
   14470:	beq	14e84 <__assert_fail@plt+0x3f70>
   14474:	cmp	sl, r4
   14478:	movhi	r1, #39	; 0x27
   1447c:	strbhi	r1, [r8, r4]
   14480:	add	r1, r4, #1
   14484:	cmp	sl, r1
   14488:	movhi	r0, #36	; 0x24
   1448c:	strbhi	r0, [r8, r1]
   14490:	add	r1, r4, #2
   14494:	cmp	sl, r1
   14498:	movhi	r0, #39	; 0x27
   1449c:	strbhi	r0, [r8, r1]
   144a0:	add	r1, r4, #3
   144a4:	cmp	sl, r1
   144a8:	bls	14edc <__assert_fail@plt+0x3fc8>
   144ac:	mov	r4, r1
   144b0:	mov	r1, #92	; 0x5c
   144b4:	mov	r0, r4
   144b8:	str	r3, [sp, #48]	; 0x30
   144bc:	strb	r1, [r8, r4]
   144c0:	cmp	fp, #2
   144c4:	add	r4, r4, #1
   144c8:	beq	14f2c <__assert_fail@plt+0x4018>
   144cc:	ldr	r1, [sp, #28]
   144d0:	add	r3, r9, #1
   144d4:	cmp	r3, r1
   144d8:	bcs	144f0 <__assert_fail@plt+0x35dc>
   144dc:	ldr	r1, [sp, #32]
   144e0:	ldrb	r3, [r1, r3]
   144e4:	sub	r3, r3, #48	; 0x30
   144e8:	cmp	r3, #9
   144ec:	bls	14f44 <__assert_fail@plt+0x4030>
   144f0:	mov	r5, #48	; 0x30
   144f4:	ldr	r3, [sp, #40]	; 0x28
   144f8:	eor	r3, r3, #1
   144fc:	orrs	r2, r2, r3
   14500:	mov	r3, r6
   14504:	moveq	r6, r2
   14508:	beq	1407c <__assert_fail@plt+0x3168>
   1450c:	mov	r6, #0
   14510:	b	140a4 <__assert_fail@plt+0x3190>
   14514:	cmp	r9, #0
   14518:	mov	r2, r7
   1451c:	bne	14abc <__assert_fail@plt+0x3ba8>
   14520:	mov	r6, r7
   14524:	mov	r3, r9
   14528:	mov	r7, r2
   1452c:	b	1406c <__assert_fail@plt+0x3158>
   14530:	mov	r2, r7
   14534:	mov	r6, r7
   14538:	mov	r3, #0
   1453c:	mov	r7, r2
   14540:	mov	r5, #32
   14544:	b	1406c <__assert_fail@plt+0x3158>
   14548:	mov	r6, r7
   1454c:	b	1425c <__assert_fail@plt+0x3348>
   14550:	mov	r7, #0
   14554:	ldr	r3, [sp, #64]	; 0x40
   14558:	cmp	r3, #1
   1455c:	bne	14b7c <__assert_fail@plt+0x3c68>
   14560:	bl	10e24 <__ctype_b_loc@plt>
   14564:	ldr	r2, [r0]
   14568:	sxth	r3, r5
   1456c:	lsl	r3, r3, #1
   14570:	ldr	r1, [sp, #64]	; 0x40
   14574:	ldrh	r3, [r2, r3]
   14578:	mov	ip, r1
   1457c:	and	r3, r3, #16384	; 0x4000
   14580:	cmp	r3, #0
   14584:	ldr	r3, [sp, #40]	; 0x28
   14588:	movne	r6, #1
   1458c:	moveq	r6, #0
   14590:	movne	r2, #0
   14594:	andeq	r2, r3, #1
   14598:	cmp	r2, #0
   1459c:	bne	14ec4 <__assert_fail@plt+0x3fb0>
   145a0:	sub	r3, fp, #2
   145a4:	clz	r3, r3
   145a8:	lsr	r3, r3, #5
   145ac:	b	1406c <__assert_fail@plt+0x3158>
   145b0:	cmp	r4, #0
   145b4:	bne	15254 <__assert_fail@plt+0x4340>
   145b8:	str	r4, [sp, #40]	; 0x28
   145bc:	cmp	sl, #0
   145c0:	bne	15284 <__assert_fail@plt+0x4370>
   145c4:	mov	r3, #1
   145c8:	movw	r2, #35412	; 0x8a54
   145cc:	movt	r2, #1
   145d0:	mov	r4, r3
   145d4:	mov	r8, #2
   145d8:	str	r3, [sp, #36]	; 0x24
   145dc:	str	sl, [sp, #44]	; 0x2c
   145e0:	str	sl, [sp, #48]	; 0x30
   145e4:	str	r3, [sp, #56]	; 0x38
   145e8:	str	r2, [sp, #60]	; 0x3c
   145ec:	str	sl, [sp, #68]	; 0x44
   145f0:	str	sl, [sp, #72]	; 0x48
   145f4:	b	13bcc <__assert_fail@plt+0x2cb8>
   145f8:	ldr	r3, [sp, #32]
   145fc:	ldrb	r5, [r3, r9]
   14600:	cmp	r5, #126	; 0x7e
   14604:	ldrls	pc, [pc, r5, lsl #2]
   14608:	b	14554 <__assert_fail@plt+0x3640>
   1460c:	andeq	r4, r1, r0, lsr r8
   14610:	andeq	r4, r1, r4, asr r5
   14614:	andeq	r4, r1, r4, asr r5
   14618:	andeq	r4, r1, r4, asr r5
   1461c:	andeq	r4, r1, r4, asr r5
   14620:	andeq	r4, r1, r4, asr r5
   14624:	andeq	r4, r1, r4, asr r5
   14628:	andeq	r4, r1, r8, lsr #16
   1462c:	andeq	r4, r1, r0, lsr #16
   14630:	andeq	r4, r1, ip, ror #6
   14634:	andeq	r4, r1, r8, lsl r8
   14638:	andeq	r4, r1, r4, ror #6
   1463c:	andeq	r4, r1, r0, lsl r8
   14640:	andeq	r4, r1, r8, lsl #16
   14644:	andeq	r4, r1, r4, asr r5
   14648:	andeq	r4, r1, r4, asr r5
   1464c:	andeq	r4, r1, r4, asr r5
   14650:	andeq	r4, r1, r4, asr r5
   14654:	andeq	r4, r1, r4, asr r5
   14658:	andeq	r4, r1, r4, asr r5
   1465c:	andeq	r4, r1, r4, asr r5
   14660:	andeq	r4, r1, r4, asr r5
   14664:	andeq	r4, r1, r4, asr r5
   14668:	andeq	r4, r1, r4, asr r5
   1466c:	andeq	r4, r1, r4, asr r5
   14670:	andeq	r4, r1, r4, asr r5
   14674:	andeq	r4, r1, r4, asr r5
   14678:	andeq	r4, r1, r4, asr r5
   1467c:	andeq	r4, r1, r4, asr r5
   14680:	andeq	r4, r1, r4, asr r5
   14684:	andeq	r4, r1, r4, asr r5
   14688:	andeq	r4, r1, r4, asr r5
   1468c:	andeq	r4, r1, r4, lsl #17
   14690:	andeq	r4, r1, r4, ror #16
   14694:	andeq	r4, r1, r4, ror #16
   14698:	andeq	r4, r1, r4, asr r8
   1469c:	andeq	r4, r1, r4, ror #16
   146a0:	andeq	r4, r1, r0, lsr #11
   146a4:	andeq	r4, r1, r4, ror #16
   146a8:	muleq	r1, r4, r2
   146ac:	andeq	r4, r1, r4, ror #16
   146b0:	andeq	r4, r1, r4, ror #16
   146b4:	andeq	r4, r1, r4, ror #16
   146b8:	andeq	r4, r1, r0, lsr #11
   146bc:	andeq	r4, r1, r0, lsr #11
   146c0:	andeq	r4, r1, r0, lsr #11
   146c4:	andeq	r4, r1, r0, lsr #11
   146c8:	andeq	r4, r1, r0, lsr #11
   146cc:	andeq	r4, r1, r0, lsr #11
   146d0:	andeq	r4, r1, r0, lsr #11
   146d4:	andeq	r4, r1, r0, lsr #11
   146d8:	andeq	r4, r1, r0, lsr #11
   146dc:	andeq	r4, r1, r0, lsr #11
   146e0:	andeq	r4, r1, r0, lsr #11
   146e4:	andeq	r4, r1, r0, lsr #11
   146e8:	andeq	r4, r1, r0, lsr #11
   146ec:	andeq	r4, r1, r0, lsr #11
   146f0:	andeq	r4, r1, r0, lsr #11
   146f4:	andeq	r4, r1, r0, lsr #11
   146f8:	andeq	r4, r1, r4, ror #16
   146fc:	andeq	r4, r1, r4, ror #16
   14700:	andeq	r4, r1, r4, ror #16
   14704:	andeq	r4, r1, r4, ror #16
   14708:	andeq	r4, r1, r8, ror #4
   1470c:	andeq	r4, r1, r4, asr r5
   14710:	andeq	r4, r1, r0, lsr #11
   14714:	andeq	r4, r1, r0, lsr #11
   14718:	andeq	r4, r1, r0, lsr #11
   1471c:	andeq	r4, r1, r0, lsr #11
   14720:	andeq	r4, r1, r0, lsr #11
   14724:	andeq	r4, r1, r0, lsr #11
   14728:	andeq	r4, r1, r0, lsr #11
   1472c:	andeq	r4, r1, r0, lsr #11
   14730:	andeq	r4, r1, r0, lsr #11
   14734:	andeq	r4, r1, r0, lsr #11
   14738:	andeq	r4, r1, r0, lsr #11
   1473c:	andeq	r4, r1, r0, lsr #11
   14740:	andeq	r4, r1, r0, lsr #11
   14744:	andeq	r4, r1, r0, lsr #11
   14748:	andeq	r4, r1, r0, lsr #11
   1474c:	andeq	r4, r1, r0, lsr #11
   14750:	andeq	r4, r1, r0, lsr #11
   14754:	andeq	r4, r1, r0, lsr #11
   14758:	andeq	r4, r1, r0, lsr #11
   1475c:	andeq	r4, r1, r0, lsr #11
   14760:	andeq	r4, r1, r0, lsr #11
   14764:	andeq	r4, r1, r0, lsr #11
   14768:	andeq	r4, r1, r0, lsr #11
   1476c:	andeq	r4, r1, r0, lsr #11
   14770:	andeq	r4, r1, r0, lsr #11
   14774:	andeq	r4, r1, r0, lsr #11
   14778:	andeq	r4, r1, r4, ror #16
   1477c:	andeq	r4, r1, r0, lsl r2
   14780:	andeq	r4, r1, r0, lsr #11
   14784:	andeq	r4, r1, r4, ror #16
   14788:	andeq	r4, r1, r0, lsr #11
   1478c:	andeq	r4, r1, r4, ror #16
   14790:	andeq	r4, r1, r0, lsr #11
   14794:	andeq	r4, r1, r0, lsr #11
   14798:	andeq	r4, r1, r0, lsr #11
   1479c:	andeq	r4, r1, r0, lsr #11
   147a0:	andeq	r4, r1, r0, lsr #11
   147a4:	andeq	r4, r1, r0, lsr #11
   147a8:	andeq	r4, r1, r0, lsr #11
   147ac:	andeq	r4, r1, r0, lsr #11
   147b0:	andeq	r4, r1, r0, lsr #11
   147b4:	andeq	r4, r1, r0, lsr #11
   147b8:	andeq	r4, r1, r0, lsr #11
   147bc:	andeq	r4, r1, r0, lsr #11
   147c0:	andeq	r4, r1, r0, lsr #11
   147c4:	andeq	r4, r1, r0, lsr #11
   147c8:	andeq	r4, r1, r0, lsr #11
   147cc:	andeq	r4, r1, r0, lsr #11
   147d0:	andeq	r4, r1, r0, lsr #11
   147d4:	andeq	r4, r1, r0, lsr #11
   147d8:	andeq	r4, r1, r0, lsr #11
   147dc:	andeq	r4, r1, r0, lsr #11
   147e0:	andeq	r4, r1, r0, lsr #11
   147e4:	andeq	r4, r1, r0, lsr #11
   147e8:	andeq	r4, r1, r0, lsr #11
   147ec:	andeq	r4, r1, r0, lsr #11
   147f0:	andeq	r4, r1, r0, lsr #11
   147f4:	andeq	r4, r1, r0, lsr #11
   147f8:	andeq	r4, r1, r4, lsr r0
   147fc:	andeq	r4, r1, r4, ror #16
   14800:	andeq	r4, r1, r4, lsr r0
   14804:	andeq	r4, r1, r4, asr r8
   14808:	mov	r3, #114	; 0x72
   1480c:	b	14370 <__assert_fail@plt+0x345c>
   14810:	mov	r3, #102	; 0x66
   14814:	b	14240 <__assert_fail@plt+0x332c>
   14818:	mov	r3, #110	; 0x6e
   1481c:	b	14370 <__assert_fail@plt+0x345c>
   14820:	mov	r3, #98	; 0x62
   14824:	b	14240 <__assert_fail@plt+0x332c>
   14828:	mov	r3, #97	; 0x61
   1482c:	b	14240 <__assert_fail@plt+0x332c>
   14830:	ldr	r3, [sp, #40]	; 0x28
   14834:	cmp	r3, #0
   14838:	bne	14448 <__assert_fail@plt+0x3534>
   1483c:	ldr	r3, [sp, #156]	; 0x9c
   14840:	tst	r3, #1
   14844:	addne	r9, r9, #1
   14848:	bne	13bdc <__assert_fail@plt+0x2cc8>
   1484c:	ldr	r7, [sp, #40]	; 0x28
   14850:	b	1424c <__assert_fail@plt+0x3338>
   14854:	sub	r3, fp, #2
   14858:	clz	r3, r3
   1485c:	lsr	r3, r3, #5
   14860:	b	14060 <__assert_fail@plt+0x314c>
   14864:	sub	r3, fp, #2
   14868:	mov	r6, #0
   1486c:	clz	r3, r3
   14870:	lsr	r3, r3, #5
   14874:	ldr	r2, [sp, #44]	; 0x2c
   14878:	tst	r2, r3
   1487c:	beq	1406c <__assert_fail@plt+0x3158>
   14880:	b	14388 <__assert_fail@plt+0x3474>
   14884:	sub	r3, fp, #2
   14888:	clz	r3, r3
   1488c:	lsr	r3, r3, #5
   14890:	b	14874 <__assert_fail@plt+0x3960>
   14894:	ldr	r3, [sp, #52]	; 0x34
   14898:	ldrb	r5, [r3]
   1489c:	cmp	r5, #126	; 0x7e
   148a0:	ldrls	pc, [pc, r5, lsl #2]
   148a4:	b	14550 <__assert_fail@plt+0x363c>
   148a8:	andeq	r4, r1, r8, asr #8
   148ac:	andeq	r4, r1, r0, asr r5
   148b0:	andeq	r4, r1, r0, asr r5
   148b4:	andeq	r4, r1, r0, asr r5
   148b8:	andeq	r4, r1, r0, asr r5
   148bc:	andeq	r4, r1, r0, asr r5
   148c0:	andeq	r4, r1, r0, asr r5
   148c4:	andeq	r4, r1, ip, lsr #8
   148c8:	andeq	r4, r1, r4, lsr #8
   148cc:	andeq	r4, r1, r0, ror #21
   148d0:	andeq	r4, r1, r8, lsl r4
   148d4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148d8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148dc:	andeq	r4, r1, r0, asr #8
   148e0:	andeq	r4, r1, r0, asr r5
   148e4:	andeq	r4, r1, r0, asr r5
   148e8:	andeq	r4, r1, r0, asr r5
   148ec:	andeq	r4, r1, r0, asr r5
   148f0:	andeq	r4, r1, r0, asr r5
   148f4:	andeq	r4, r1, r0, asr r5
   148f8:	andeq	r4, r1, r0, asr r5
   148fc:	andeq	r4, r1, r0, asr r5
   14900:	andeq	r4, r1, r0, asr r5
   14904:	andeq	r4, r1, r0, asr r5
   14908:	andeq	r4, r1, r0, asr r5
   1490c:	andeq	r4, r1, r0, asr r5
   14910:	andeq	r4, r1, r0, asr r5
   14914:	andeq	r4, r1, r0, asr r5
   14918:	andeq	r4, r1, r0, asr r5
   1491c:	andeq	r4, r1, r0, asr r5
   14920:	andeq	r4, r1, r0, asr r5
   14924:	andeq	r4, r1, r0, asr r5
   14928:	andeq	r4, r1, ip, asr #21
   1492c:	andeq	r4, r1, r4, lsr r4
   14930:	andeq	r4, r1, r4, lsr r4
   14934:			; <UNDEFINED> instruction: 0x00014ab0
   14938:	andeq	r4, r1, r4, lsr r4
   1493c:	andeq	r4, r1, r4, lsr #21
   14940:	andeq	r4, r1, r4, lsr r4
   14944:	muleq	r1, r0, r2
   14948:	andeq	r4, r1, r4, lsr r4
   1494c:	andeq	r4, r1, r4, lsr r4
   14950:	andeq	r4, r1, r4, lsr r4
   14954:	andeq	r4, r1, r4, lsr #21
   14958:	andeq	r4, r1, r4, lsr #21
   1495c:	andeq	r4, r1, r4, lsr #21
   14960:	andeq	r4, r1, r4, lsr #21
   14964:	andeq	r4, r1, r4, lsr #21
   14968:	andeq	r4, r1, r4, lsr #21
   1496c:	andeq	r4, r1, r4, lsr #21
   14970:	andeq	r4, r1, r4, lsr #21
   14974:	andeq	r4, r1, r4, lsr #21
   14978:	andeq	r4, r1, r4, lsr #21
   1497c:	andeq	r4, r1, r4, lsr #21
   14980:	andeq	r4, r1, r4, lsr #21
   14984:	andeq	r4, r1, r4, lsr #21
   14988:	andeq	r4, r1, r4, lsr #21
   1498c:	andeq	r4, r1, r4, lsr #21
   14990:	andeq	r4, r1, r4, lsr #21
   14994:	andeq	r4, r1, r4, lsr r4
   14998:	andeq	r4, r1, r4, lsr r4
   1499c:	andeq	r4, r1, r4, lsr r4
   149a0:	andeq	r4, r1, r4, lsr r4
   149a4:	andeq	r4, r1, r4, ror #4
   149a8:	andeq	r4, r1, r0, asr r5
   149ac:	andeq	r4, r1, r4, lsr #21
   149b0:	andeq	r4, r1, r4, lsr #21
   149b4:	andeq	r4, r1, r4, lsr #21
   149b8:	andeq	r4, r1, r4, lsr #21
   149bc:	andeq	r4, r1, r4, lsr #21
   149c0:	andeq	r4, r1, r4, lsr #21
   149c4:	andeq	r4, r1, r4, lsr #21
   149c8:	andeq	r4, r1, r4, lsr #21
   149cc:	andeq	r4, r1, r4, lsr #21
   149d0:	andeq	r4, r1, r4, lsr #21
   149d4:	andeq	r4, r1, r4, lsr #21
   149d8:	andeq	r4, r1, r4, lsr #21
   149dc:	andeq	r4, r1, r4, lsr #21
   149e0:	andeq	r4, r1, r4, lsr #21
   149e4:	andeq	r4, r1, r4, lsr #21
   149e8:	andeq	r4, r1, r4, lsr #21
   149ec:	andeq	r4, r1, r4, lsr #21
   149f0:	andeq	r4, r1, r4, lsr #21
   149f4:	andeq	r4, r1, r4, lsr #21
   149f8:	andeq	r4, r1, r4, lsr #21
   149fc:	andeq	r4, r1, r4, lsr #21
   14a00:	andeq	r4, r1, r4, lsr #21
   14a04:	andeq	r4, r1, r4, lsr #21
   14a08:	andeq	r4, r1, r4, lsr #21
   14a0c:	andeq	r4, r1, r4, lsr #21
   14a10:	andeq	r4, r1, r4, lsr #21
   14a14:	andeq	r4, r1, r4, lsr r4
   14a18:	andeq	r4, r1, ip, lsl #4
   14a1c:	andeq	r4, r1, r4, lsr #21
   14a20:	andeq	r4, r1, r4, lsr r4
   14a24:	andeq	r4, r1, r4, lsr #21
   14a28:	andeq	r4, r1, r4, lsr r4
   14a2c:	andeq	r4, r1, r4, lsr #21
   14a30:	andeq	r4, r1, r4, lsr #21
   14a34:	andeq	r4, r1, r4, lsr #21
   14a38:	andeq	r4, r1, r4, lsr #21
   14a3c:	andeq	r4, r1, r4, lsr #21
   14a40:	andeq	r4, r1, r4, lsr #21
   14a44:	andeq	r4, r1, r4, lsr #21
   14a48:	andeq	r4, r1, r4, lsr #21
   14a4c:	andeq	r4, r1, r4, lsr #21
   14a50:	andeq	r4, r1, r4, lsr #21
   14a54:	andeq	r4, r1, r4, lsr #21
   14a58:	andeq	r4, r1, r4, lsr #21
   14a5c:	andeq	r4, r1, r4, lsr #21
   14a60:	andeq	r4, r1, r4, lsr #21
   14a64:	andeq	r4, r1, r4, lsr #21
   14a68:	andeq	r4, r1, r4, lsr #21
   14a6c:	andeq	r4, r1, r4, lsr #21
   14a70:	andeq	r4, r1, r4, lsr #21
   14a74:	andeq	r4, r1, r4, lsr #21
   14a78:	andeq	r4, r1, r4, lsr #21
   14a7c:	andeq	r4, r1, r4, lsr #21
   14a80:	andeq	r4, r1, r4, lsr #21
   14a84:	andeq	r4, r1, r4, lsr #21
   14a88:	andeq	r4, r1, r4, lsr #21
   14a8c:	andeq	r4, r1, r4, lsr #21
   14a90:	andeq	r4, r1, r4, lsr #21
   14a94:	andeq	r4, r1, r0, lsr r0
   14a98:	andeq	r4, r1, r4, lsr r4
   14a9c:	andeq	r4, r1, r0, lsr r0
   14aa0:			; <UNDEFINED> instruction: 0x00014ab0
   14aa4:	mov	r6, r7
   14aa8:	mov	r7, #0
   14aac:	b	1425c <__assert_fail@plt+0x3348>
   14ab0:	cmp	r9, #0
   14ab4:	mov	r2, #0
   14ab8:	beq	14520 <__assert_fail@plt+0x360c>
   14abc:	mov	r6, #0
   14ac0:	mov	r7, r2
   14ac4:	mov	r3, r6
   14ac8:	b	1407c <__assert_fail@plt+0x3168>
   14acc:	mov	r2, #0
   14ad0:	b	14534 <__assert_fail@plt+0x3620>
   14ad4:	mov	r7, #0
   14ad8:	mov	r3, #118	; 0x76
   14adc:	b	14240 <__assert_fail@plt+0x332c>
   14ae0:	mov	r7, #0
   14ae4:	mov	r3, #116	; 0x74
   14ae8:	b	14370 <__assert_fail@plt+0x345c>
   14aec:	ldr	r3, [sp, #44]	; 0x2c
   14af0:	b	140a4 <__assert_fail@plt+0x3190>
   14af4:	ldr	r3, [sp, #44]	; 0x2c
   14af8:	cmp	r3, #0
   14afc:	bne	14f6c <__assert_fail@plt+0x4058>
   14b00:	add	r9, r9, #1
   14b04:	mov	r6, #0
   14b08:	ldr	r3, [sp, #48]	; 0x30
   14b0c:	mov	r5, #92	; 0x5c
   14b10:	b	14330 <__assert_fail@plt+0x341c>
   14b14:	ldr	r3, [sp, #32]
   14b18:	ldrb	r2, [r3, #1]
   14b1c:	adds	r2, r2, #0
   14b20:	movne	r2, #1
   14b24:	b	1404c <__assert_fail@plt+0x3138>
   14b28:	ldr	r3, [sp, #156]	; 0x9c
   14b2c:	ands	r3, r3, #4
   14b30:	beq	14b58 <__assert_fail@plt+0x3c44>
   14b34:	ldr	r2, [sp, #28]
   14b38:	add	r3, r9, #2
   14b3c:	cmp	r3, r2
   14b40:	bcs	14b54 <__assert_fail@plt+0x3c40>
   14b44:	ldr	r2, [sp, #52]	; 0x34
   14b48:	ldrb	r5, [r2, #1]
   14b4c:	cmp	r5, #63	; 0x3f
   14b50:	beq	14fd0 <__assert_fail@plt+0x40bc>
   14b54:	mov	r3, #0
   14b58:	mov	r5, #63	; 0x3f
   14b5c:	mov	r6, r3
   14b60:	b	1406c <__assert_fail@plt+0x3158>
   14b64:	ldr	r3, [sp, #44]	; 0x2c
   14b68:	cmp	r3, #0
   14b6c:	bne	14f6c <__assert_fail@plt+0x4058>
   14b70:	mov	r6, r3
   14b74:	mov	r5, #63	; 0x3f
   14b78:	b	140a4 <__assert_fail@plt+0x3190>
   14b7c:	ldr	r1, [sp, #28]
   14b80:	mov	r2, #0
   14b84:	mov	r3, #0
   14b88:	strd	r2, [sp, #104]	; 0x68
   14b8c:	cmn	r1, #1
   14b90:	bne	14ba0 <__assert_fail@plt+0x3c8c>
   14b94:	ldr	r0, [sp, #32]
   14b98:	bl	10e3c <strlen@plt>
   14b9c:	str	r0, [sp, #28]
   14ba0:	str	r8, [sp, #76]	; 0x4c
   14ba4:	mov	r3, #0
   14ba8:	str	sl, [sp, #80]	; 0x50
   14bac:	ldr	sl, [sp, #32]
   14bb0:	str	r5, [sp, #84]	; 0x54
   14bb4:	mov	r5, r3
   14bb8:	ldr	r8, [sp, #44]	; 0x2c
   14bbc:	str	r7, [sp, #88]	; 0x58
   14bc0:	str	r4, [sp, #92]	; 0x5c
   14bc4:	ldr	r2, [sp, #28]
   14bc8:	add	r4, r9, r5
   14bcc:	add	r3, sp, #104	; 0x68
   14bd0:	add	r7, sl, r4
   14bd4:	add	r0, sp, #100	; 0x64
   14bd8:	mov	r1, r7
   14bdc:	sub	r2, r2, r4
   14be0:	bl	173b8 <__assert_fail@plt+0x64a4>
   14be4:	subs	r1, r0, #0
   14be8:	beq	14c34 <__assert_fail@plt+0x3d20>
   14bec:	cmn	r1, #1
   14bf0:	beq	14fac <__assert_fail@plt+0x4098>
   14bf4:	cmn	r1, #2
   14bf8:	beq	150cc <__assert_fail@plt+0x41b8>
   14bfc:	cmp	fp, #2
   14c00:	movne	r3, #0
   14c04:	andeq	r3, r8, #1
   14c08:	cmp	r3, #0
   14c0c:	bne	14d98 <__assert_fail@plt+0x3e84>
   14c10:	ldr	r0, [sp, #100]	; 0x64
   14c14:	add	r5, r5, r1
   14c18:	bl	10d7c <iswprint@plt>
   14c1c:	cmp	r0, #0
   14c20:	add	r0, sp, #104	; 0x68
   14c24:	moveq	r6, #0
   14c28:	bl	10d1c <mbsinit@plt>
   14c2c:	cmp	r0, #0
   14c30:	beq	14bc4 <__assert_fail@plt+0x3cb0>
   14c34:	ldr	r3, [sp, #40]	; 0x28
   14c38:	mov	ip, r5
   14c3c:	eor	r2, r6, #1
   14c40:	ldr	r8, [sp, #76]	; 0x4c
   14c44:	ldr	sl, [sp, #80]	; 0x50
   14c48:	and	r2, r2, r3
   14c4c:	ldr	r5, [sp, #84]	; 0x54
   14c50:	ldr	r7, [sp, #88]	; 0x58
   14c54:	ldr	r4, [sp, #92]	; 0x5c
   14c58:	cmp	ip, #1
   14c5c:	bls	14598 <__assert_fail@plt+0x3684>
   14c60:	add	r1, ip, r9
   14c64:	mov	r0, #39	; 0x27
   14c68:	ldr	lr, [sp, #52]	; 0x34
   14c6c:	mov	ip, #0
   14c70:	str	r6, [sp, #52]	; 0x34
   14c74:	ldr	r6, [sp, #48]	; 0x30
   14c78:	b	14d34 <__assert_fail@plt+0x3e20>
   14c7c:	ldr	ip, [sp, #44]	; 0x2c
   14c80:	sub	r3, fp, #2
   14c84:	clz	r3, r3
   14c88:	lsr	r3, r3, #5
   14c8c:	cmp	ip, #0
   14c90:	bne	14ea4 <__assert_fail@plt+0x3f90>
   14c94:	eor	ip, r6, #1
   14c98:	ands	r3, r3, ip
   14c9c:	beq	14ccc <__assert_fail@plt+0x3db8>
   14ca0:	cmp	sl, r4
   14ca4:	add	ip, r4, #1
   14ca8:	strbhi	r0, [r8, r4]
   14cac:	cmp	sl, ip
   14cb0:	movhi	r6, #36	; 0x24
   14cb4:	strbhi	r6, [r8, ip]
   14cb8:	add	ip, r4, #2
   14cbc:	mov	r6, r3
   14cc0:	cmp	sl, ip
   14cc4:	add	r4, r4, #3
   14cc8:	strbhi	r0, [r8, ip]
   14ccc:	cmp	sl, r4
   14cd0:	movhi	r3, #92	; 0x5c
   14cd4:	strbhi	r3, [r8, r4]
   14cd8:	add	r3, r4, #1
   14cdc:	cmp	sl, r3
   14ce0:	bls	14cf0 <__assert_fail@plt+0x3ddc>
   14ce4:	lsr	ip, r5, #6
   14ce8:	add	ip, ip, #48	; 0x30
   14cec:	strb	ip, [r8, r3]
   14cf0:	add	r3, r4, #2
   14cf4:	cmp	sl, r3
   14cf8:	bls	14d08 <__assert_fail@plt+0x3df4>
   14cfc:	ubfx	ip, r5, #3, #3
   14d00:	add	ip, ip, #48	; 0x30
   14d04:	strb	ip, [r8, r3]
   14d08:	add	r9, r9, #1
   14d0c:	and	r5, r5, #7
   14d10:	cmp	r9, r1
   14d14:	add	r5, r5, #48	; 0x30
   14d18:	add	r4, r4, #3
   14d1c:	bcs	14ed0 <__assert_fail@plt+0x3fbc>
   14d20:	mov	ip, r2
   14d24:	cmp	sl, r4
   14d28:	strbhi	r5, [r8, r4]
   14d2c:	add	r4, r4, #1
   14d30:	ldrb	r5, [lr, #1]!
   14d34:	cmp	r2, #0
   14d38:	bne	14c7c <__assert_fail@plt+0x3d68>
   14d3c:	eor	r3, ip, #1
   14d40:	cmp	r7, #0
   14d44:	and	r3, r3, r6
   14d48:	uxtb	r3, r3
   14d4c:	beq	14d60 <__assert_fail@plt+0x3e4c>
   14d50:	cmp	sl, r4
   14d54:	movhi	r7, #92	; 0x5c
   14d58:	strbhi	r7, [r8, r4]
   14d5c:	add	r4, r4, #1
   14d60:	add	r9, r9, #1
   14d64:	cmp	r9, r1
   14d68:	bcs	14eb8 <__assert_fail@plt+0x3fa4>
   14d6c:	cmp	r3, #0
   14d70:	beq	14ef0 <__assert_fail@plt+0x3fdc>
   14d74:	cmp	sl, r4
   14d78:	add	r3, r4, #1
   14d7c:	mov	r7, #0
   14d80:	strbhi	r0, [r8, r4]
   14d84:	cmp	sl, r3
   14d88:	add	r4, r4, #2
   14d8c:	mov	r6, r7
   14d90:	strbhi	r0, [r8, r3]
   14d94:	b	14d24 <__assert_fail@plt+0x3e10>
   14d98:	cmp	r1, #1
   14d9c:	beq	14c10 <__assert_fail@plt+0x3cfc>
   14da0:	add	r2, r4, #1
   14da4:	add	r3, sl, r1
   14da8:	add	r2, sl, r2
   14dac:	add	r4, r3, r4
   14db0:	ldrb	r3, [r2], #1
   14db4:	sub	r3, r3, #91	; 0x5b
   14db8:	cmp	r3, #33	; 0x21
   14dbc:	ldrls	pc, [pc, r3, lsl #2]
   14dc0:	b	14e4c <__assert_fail@plt+0x3f38>
   14dc4:	andeq	r4, r1, r8, asr lr
   14dc8:	andeq	r4, r1, r8, asr lr
   14dcc:	andeq	r4, r1, ip, asr #28
   14dd0:	andeq	r4, r1, r8, asr lr
   14dd4:	andeq	r4, r1, ip, asr #28
   14dd8:	andeq	r4, r1, r8, asr lr
   14ddc:	andeq	r4, r1, ip, asr #28
   14de0:	andeq	r4, r1, ip, asr #28
   14de4:	andeq	r4, r1, ip, asr #28
   14de8:	andeq	r4, r1, ip, asr #28
   14dec:	andeq	r4, r1, ip, asr #28
   14df0:	andeq	r4, r1, ip, asr #28
   14df4:	andeq	r4, r1, ip, asr #28
   14df8:	andeq	r4, r1, ip, asr #28
   14dfc:	andeq	r4, r1, ip, asr #28
   14e00:	andeq	r4, r1, ip, asr #28
   14e04:	andeq	r4, r1, ip, asr #28
   14e08:	andeq	r4, r1, ip, asr #28
   14e0c:	andeq	r4, r1, ip, asr #28
   14e10:	andeq	r4, r1, ip, asr #28
   14e14:	andeq	r4, r1, ip, asr #28
   14e18:	andeq	r4, r1, ip, asr #28
   14e1c:	andeq	r4, r1, ip, asr #28
   14e20:	andeq	r4, r1, ip, asr #28
   14e24:	andeq	r4, r1, ip, asr #28
   14e28:	andeq	r4, r1, ip, asr #28
   14e2c:	andeq	r4, r1, ip, asr #28
   14e30:	andeq	r4, r1, ip, asr #28
   14e34:	andeq	r4, r1, ip, asr #28
   14e38:	andeq	r4, r1, ip, asr #28
   14e3c:	andeq	r4, r1, ip, asr #28
   14e40:	andeq	r4, r1, ip, asr #28
   14e44:	andeq	r4, r1, ip, asr #28
   14e48:	andeq	r4, r1, r8, asr lr
   14e4c:	cmp	r4, r2
   14e50:	bne	14db0 <__assert_fail@plt+0x3e9c>
   14e54:	b	14c10 <__assert_fail@plt+0x3cfc>
   14e58:	mov	r8, #2
   14e5c:	ldr	fp, [sp, #76]	; 0x4c
   14e60:	ldr	sl, [sp, #80]	; 0x50
   14e64:	b	14390 <__assert_fail@plt+0x347c>
   14e68:	ldr	r2, [sp, #40]	; 0x28
   14e6c:	str	fp, [sp, #152]	; 0x98
   14e70:	mov	fp, r8
   14e74:	ldr	r8, [sp, #152]	; 0x98
   14e78:	and	r2, r2, r3
   14e7c:	str	r2, [sp, #40]	; 0x28
   14e80:	b	14390 <__assert_fail@plt+0x347c>
   14e84:	cmp	sl, r4
   14e88:	movls	r0, r4
   14e8c:	bls	144c0 <__assert_fail@plt+0x35ac>
   14e90:	ldr	r3, [sp, #48]	; 0x30
   14e94:	b	144b0 <__assert_fail@plt+0x359c>
   14e98:	str	sl, [sp, #72]	; 0x48
   14e9c:	ldr	sl, [sp, #44]	; 0x2c
   14ea0:	b	14300 <__assert_fail@plt+0x33ec>
   14ea4:	str	r3, [sp, #40]	; 0x28
   14ea8:	str	fp, [sp, #152]	; 0x98
   14eac:	mov	fp, r8
   14eb0:	ldr	r8, [sp, #152]	; 0x98
   14eb4:	b	14390 <__assert_fail@plt+0x347c>
   14eb8:	str	r6, [sp, #48]	; 0x30
   14ebc:	ldr	r6, [sp, #52]	; 0x34
   14ec0:	b	14330 <__assert_fail@plt+0x341c>
   14ec4:	mov	r6, #0
   14ec8:	ldr	r2, [sp, #40]	; 0x28
   14ecc:	b	14c60 <__assert_fail@plt+0x3d4c>
   14ed0:	str	r6, [sp, #48]	; 0x30
   14ed4:	ldr	r6, [sp, #52]	; 0x34
   14ed8:	b	1411c <__assert_fail@plt+0x3208>
   14edc:	add	r4, r4, #4
   14ee0:	mov	r6, #0
   14ee4:	str	r3, [sp, #48]	; 0x30
   14ee8:	mov	r5, #48	; 0x30
   14eec:	b	140a4 <__assert_fail@plt+0x3190>
   14ef0:	mov	r7, r3
   14ef4:	b	14d24 <__assert_fail@plt+0x3e10>
   14ef8:	mov	r3, #1
   14efc:	movw	r2, #35392	; 0x8a40
   14f00:	movt	r2, #1
   14f04:	mov	r4, r3
   14f08:	str	r3, [sp, #36]	; 0x24
   14f0c:	str	r3, [sp, #40]	; 0x28
   14f10:	str	sl, [sp, #44]	; 0x2c
   14f14:	str	sl, [sp, #48]	; 0x30
   14f18:	str	r3, [sp, #56]	; 0x38
   14f1c:	str	r2, [sp, #60]	; 0x3c
   14f20:	str	sl, [sp, #68]	; 0x44
   14f24:	str	sl, [sp, #72]	; 0x48
   14f28:	b	13bcc <__assert_fail@plt+0x2cb8>
   14f2c:	mov	r3, r6
   14f30:	mov	r5, #48	; 0x30
   14f34:	mov	r6, #0
   14f38:	b	140a4 <__assert_fail@plt+0x3190>
   14f3c:	mov	r5, r3
   14f40:	b	1441c <__assert_fail@plt+0x3508>
   14f44:	cmp	sl, r4
   14f48:	mov	r5, #48	; 0x30
   14f4c:	movhi	r3, #48	; 0x30
   14f50:	strbhi	r3, [r8, r4]
   14f54:	add	r3, r0, #2
   14f58:	add	r4, r0, #3
   14f5c:	cmp	sl, r3
   14f60:	movhi	r1, #48	; 0x30
   14f64:	strbhi	r1, [r8, r3]
   14f68:	b	144f4 <__assert_fail@plt+0x35e0>
   14f6c:	str	fp, [sp, #152]	; 0x98
   14f70:	mov	fp, r8
   14f74:	ldr	r8, [sp, #152]	; 0x98
   14f78:	b	14390 <__assert_fail@plt+0x347c>
   14f7c:	ldr	r3, [sp, #164]	; 0xa4
   14f80:	ldrb	r3, [r3]
   14f84:	cmp	r3, #0
   14f88:	beq	13b9c <__assert_fail@plt+0x2c88>
   14f8c:	ldr	r2, [sp, #164]	; 0xa4
   14f90:	cmp	sl, r4
   14f94:	strbhi	r3, [fp, r4]
   14f98:	add	r4, r4, #1
   14f9c:	ldrb	r3, [r2, #1]!
   14fa0:	cmp	r3, #0
   14fa4:	bne	14f90 <__assert_fail@plt+0x407c>
   14fa8:	b	13b9c <__assert_fail@plt+0x2c88>
   14fac:	mov	ip, r5
   14fb0:	mov	r6, #0
   14fb4:	ldr	r2, [sp, #40]	; 0x28
   14fb8:	ldr	r8, [sp, #76]	; 0x4c
   14fbc:	ldr	sl, [sp, #80]	; 0x50
   14fc0:	ldr	r5, [sp, #84]	; 0x54
   14fc4:	ldr	r7, [sp, #88]	; 0x58
   14fc8:	ldr	r4, [sp, #92]	; 0x5c
   14fcc:	b	14c58 <__assert_fail@plt+0x3d44>
   14fd0:	ldr	r2, [sp, #32]
   14fd4:	ldrb	r1, [r2, r3]
   14fd8:	sub	r2, r1, #33	; 0x21
   14fdc:	cmp	r2, #29
   14fe0:	ldrls	pc, [pc, r2, lsl #2]
   14fe4:	b	150c0 <__assert_fail@plt+0x41ac>
   14fe8:	andeq	r5, r1, r0, rrx
   14fec:	andeq	r5, r1, r0, asr #1
   14ff0:	andeq	r5, r1, r0, asr #1
   14ff4:	andeq	r5, r1, r0, asr #1
   14ff8:	andeq	r5, r1, r0, asr #1
   14ffc:	andeq	r5, r1, r0, asr #1
   15000:	andeq	r5, r1, r0, rrx
   15004:	andeq	r5, r1, r0, rrx
   15008:	andeq	r5, r1, r0, rrx
   1500c:	andeq	r5, r1, r0, asr #1
   15010:	andeq	r5, r1, r0, asr #1
   15014:	andeq	r5, r1, r0, asr #1
   15018:	andeq	r5, r1, r0, rrx
   1501c:	andeq	r5, r1, r0, asr #1
   15020:	andeq	r5, r1, r0, rrx
   15024:	andeq	r5, r1, r0, asr #1
   15028:	andeq	r5, r1, r0, asr #1
   1502c:	andeq	r5, r1, r0, asr #1
   15030:	andeq	r5, r1, r0, asr #1
   15034:	andeq	r5, r1, r0, asr #1
   15038:	andeq	r5, r1, r0, asr #1
   1503c:	andeq	r5, r1, r0, asr #1
   15040:	andeq	r5, r1, r0, asr #1
   15044:	andeq	r5, r1, r0, asr #1
   15048:	andeq	r5, r1, r0, asr #1
   1504c:	andeq	r5, r1, r0, asr #1
   15050:	andeq	r5, r1, r0, asr #1
   15054:	andeq	r5, r1, r0, rrx
   15058:	andeq	r5, r1, r0, rrx
   1505c:	andeq	r5, r1, r0, rrx
   15060:	ldr	r2, [sp, #44]	; 0x2c
   15064:	cmp	r2, #0
   15068:	bne	151c4 <__assert_fail@plt+0x42b0>
   1506c:	cmp	sl, r4
   15070:	mov	r5, r1
   15074:	movhi	r2, #63	; 0x3f
   15078:	mov	r9, r3
   1507c:	strbhi	r2, [r8, r4]
   15080:	add	r2, r4, #1
   15084:	cmp	sl, r2
   15088:	movhi	r0, #34	; 0x22
   1508c:	strbhi	r0, [r8, r2]
   15090:	add	r2, r4, #2
   15094:	cmp	sl, r2
   15098:	movhi	r0, #34	; 0x22
   1509c:	strbhi	r0, [r8, r2]
   150a0:	add	r2, r4, #3
   150a4:	add	r4, r4, #4
   150a8:	cmp	sl, r2
   150ac:	movhi	r0, #63	; 0x3f
   150b0:	strbhi	r0, [r8, r2]
   150b4:	mov	r2, #0
   150b8:	mov	r6, r2
   150bc:	b	144f4 <__assert_fail@plt+0x35e0>
   150c0:	mov	r3, #0
   150c4:	mov	r6, r3
   150c8:	b	1406c <__assert_fail@plt+0x3158>
   150cc:	ldr	r0, [sp, #28]
   150d0:	mov	r1, r4
   150d4:	mov	r2, r7
   150d8:	mov	r3, r5
   150dc:	mov	ip, r5
   150e0:	ldr	r8, [sp, #76]	; 0x4c
   150e4:	ldr	sl, [sp, #80]	; 0x50
   150e8:	cmp	r1, r0
   150ec:	ldr	r5, [sp, #84]	; 0x54
   150f0:	ldr	r7, [sp, #88]	; 0x58
   150f4:	ldr	r4, [sp, #92]	; 0x5c
   150f8:	bcs	1512c <__assert_fail@plt+0x4218>
   150fc:	ldrb	r6, [r2]
   15100:	cmp	r6, #0
   15104:	bne	15118 <__assert_fail@plt+0x4204>
   15108:	b	1524c <__assert_fail@plt+0x4338>
   1510c:	ldrb	r6, [r2, #1]!
   15110:	cmp	r6, #0
   15114:	beq	151d4 <__assert_fail@plt+0x42c0>
   15118:	add	r3, r3, #1
   1511c:	add	r1, r9, r3
   15120:	cmp	r1, r0
   15124:	bcc	1510c <__assert_fail@plt+0x41f8>
   15128:	mov	ip, r3
   1512c:	mov	r6, #0
   15130:	ldr	r2, [sp, #40]	; 0x28
   15134:	b	14c58 <__assert_fail@plt+0x3d44>
   15138:	mov	r3, #1
   1513c:	mov	r2, #0
   15140:	mov	r4, r2
   15144:	str	r3, [sp, #36]	; 0x24
   15148:	str	r3, [sp, #40]	; 0x28
   1514c:	str	r3, [sp, #44]	; 0x2c
   15150:	str	r2, [sp, #48]	; 0x30
   15154:	str	r3, [sp, #56]	; 0x38
   15158:	movw	r3, #35392	; 0x8a40
   1515c:	movt	r3, #1
   15160:	str	r3, [sp, #60]	; 0x3c
   15164:	str	r2, [sp, #68]	; 0x44
   15168:	str	r2, [sp, #72]	; 0x48
   1516c:	b	13bcc <__assert_fail@plt+0x2cb8>
   15170:	mov	r2, r3
   15174:	ldr	r3, [sp, #60]	; 0x3c
   15178:	cmp	r3, #0
   1517c:	moveq	r2, #0
   15180:	andne	r2, r2, #1
   15184:	cmp	r2, #0
   15188:	beq	151b4 <__assert_fail@plt+0x42a0>
   1518c:	mov	r2, r3
   15190:	ldrb	r3, [r3]
   15194:	cmp	r3, #0
   15198:	beq	151b4 <__assert_fail@plt+0x42a0>
   1519c:	cmp	sl, r4
   151a0:	strbhi	r3, [fp, r4]
   151a4:	add	r4, r4, #1
   151a8:	ldrb	r3, [r2, #1]!
   151ac:	cmp	r3, #0
   151b0:	bne	1519c <__assert_fail@plt+0x4288>
   151b4:	cmp	sl, r4
   151b8:	movhi	r3, #0
   151bc:	strbhi	r3, [fp, r4]
   151c0:	b	143d4 <__assert_fail@plt+0x34c0>
   151c4:	str	fp, [sp, #152]	; 0x98
   151c8:	mov	fp, r8
   151cc:	ldr	r8, [sp, #152]	; 0x98
   151d0:	b	1439c <__assert_fail@plt+0x3488>
   151d4:	mov	ip, r3
   151d8:	ldr	r2, [sp, #40]	; 0x28
   151dc:	b	14c58 <__assert_fail@plt+0x3d44>
   151e0:	str	fp, [sp, #152]	; 0x98
   151e4:	mov	fp, r8
   151e8:	ldr	r8, [sp, #152]	; 0x98
   151ec:	sub	r3, r8, #2
   151f0:	clz	r3, r3
   151f4:	lsr	r3, r3, #5
   151f8:	str	r3, [sp, #40]	; 0x28
   151fc:	b	14390 <__assert_fail@plt+0x347c>
   15200:	mov	ip, #5
   15204:	ldr	r3, [sp, #28]
   15208:	str	ip, [sp]
   1520c:	ldr	r2, [sp, #156]	; 0x9c
   15210:	ldr	ip, [sp, #164]	; 0xa4
   15214:	ldr	r0, [sp, #160]	; 0xa0
   15218:	str	r2, [sp, #4]
   1521c:	ldr	r2, [sp, #32]
   15220:	ldr	r1, [sp, #72]	; 0x48
   15224:	str	ip, [sp, #12]
   15228:	ldr	ip, [sp, #168]	; 0xa8
   1522c:	str	r0, [sp, #8]
   15230:	mov	r0, fp
   15234:	str	ip, [sp, #16]
   15238:	bl	13ae4 <__assert_fail@plt+0x2bd0>
   1523c:	mov	r4, r0
   15240:	b	143d4 <__assert_fail@plt+0x34c0>
   15244:	mov	r8, #2
   15248:	b	14390 <__assert_fail@plt+0x347c>
   1524c:	ldr	r2, [sp, #40]	; 0x28
   15250:	b	14c58 <__assert_fail@plt+0x3d44>
   15254:	mov	r3, #0
   15258:	mov	r2, #1
   1525c:	mov	r4, r3
   15260:	strd	r2, [sp, #36]	; 0x24
   15264:	strd	r2, [sp, #44]	; 0x2c
   15268:	str	r2, [sp, #56]	; 0x38
   1526c:	str	r3, [sp, #68]	; 0x44
   15270:	str	r3, [sp, #72]	; 0x48
   15274:	movw	r3, #35412	; 0x8a54
   15278:	movt	r3, #1
   1527c:	str	r3, [sp, #60]	; 0x3c
   15280:	b	13bcc <__assert_fail@plt+0x2cb8>
   15284:	mov	r3, #0
   15288:	mov	r1, #1
   1528c:	mov	r2, r3
   15290:	str	r1, [sp, #36]	; 0x24
   15294:	str	r3, [sp, #48]	; 0x30
   15298:	str	sl, [sp, #72]	; 0x48
   1529c:	b	141d4 <__assert_fail@plt+0x32c0>
   152a0:	bl	10efc <abort@plt>
   152a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   152a8:	mov	r4, r0
   152ac:	mov	r5, r3
   152b0:	strd	r6, [sp, #8]
   152b4:	movw	r7, #37108	; 0x90f4
   152b8:	movt	r7, #2
   152bc:	strd	r8, [sp, #16]
   152c0:	strd	sl, [sp, #24]
   152c4:	mov	sl, r1
   152c8:	mov	fp, r2
   152cc:	str	lr, [sp, #32]
   152d0:	sub	sp, sp, #60	; 0x3c
   152d4:	bl	10e54 <__errno_location@plt>
   152d8:	mov	r8, r0
   152dc:	cmn	r4, #-2147483647	; 0x80000001
   152e0:	ldr	r6, [r7]
   152e4:	movne	r0, #0
   152e8:	moveq	r0, #1
   152ec:	ldr	r3, [r8]
   152f0:	orrs	r0, r0, r4, lsr #31
   152f4:	str	r3, [sp, #28]
   152f8:	bne	15488 <__assert_fail@plt+0x4574>
   152fc:	ldr	r3, [r7, #4]
   15300:	cmp	r3, r4
   15304:	bgt	15364 <__assert_fail@plt+0x4450>
   15308:	add	r1, r7, #8
   1530c:	sub	r2, r4, r3
   15310:	str	r3, [sp, #52]	; 0x34
   15314:	cmp	r6, r1
   15318:	add	r2, r2, #1
   1531c:	beq	15460 <__assert_fail@plt+0x454c>
   15320:	mov	r1, #8
   15324:	mov	r0, r6
   15328:	mvn	r3, #-2147483648	; 0x80000000
   1532c:	str	r1, [sp]
   15330:	add	r1, sp, #52	; 0x34
   15334:	bl	1638c <__assert_fail@plt+0x5478>
   15338:	mov	r6, r0
   1533c:	str	r0, [r7]
   15340:	ldr	r0, [r7, #4]
   15344:	mov	r1, #0
   15348:	ldr	r2, [sp, #52]	; 0x34
   1534c:	sub	r2, r2, r0
   15350:	add	r0, r6, r0, lsl #3
   15354:	lsl	r2, r2, #3
   15358:	bl	10e78 <memset@plt>
   1535c:	ldr	r3, [sp, #52]	; 0x34
   15360:	str	r3, [r7, #4]
   15364:	ldr	r1, [r5, #4]
   15368:	add	r0, r6, r4, lsl #3
   1536c:	add	ip, r5, #8
   15370:	mov	r3, fp
   15374:	mov	r2, sl
   15378:	ldr	r7, [r0, #4]
   1537c:	str	r0, [sp, #36]	; 0x24
   15380:	str	ip, [sp, #40]	; 0x28
   15384:	orr	r0, r1, #1
   15388:	ldr	r9, [r6, r4, lsl #3]
   1538c:	str	ip, [sp, #8]
   15390:	ldr	lr, [r5, #44]	; 0x2c
   15394:	str	r0, [sp, #4]
   15398:	ldr	ip, [r5]
   1539c:	mov	r1, r9
   153a0:	str	ip, [sp, #32]
   153a4:	ldr	ip, [r5, #40]	; 0x28
   153a8:	str	ip, [sp, #12]
   153ac:	ldr	ip, [sp, #32]
   153b0:	str	lr, [sp, #16]
   153b4:	str	r0, [sp, #44]	; 0x2c
   153b8:	mov	r0, r7
   153bc:	str	ip, [sp]
   153c0:	bl	13ae4 <__assert_fail@plt+0x2bd0>
   153c4:	cmp	r9, r0
   153c8:	bhi	15438 <__assert_fail@plt+0x4524>
   153cc:	add	r9, r0, #1
   153d0:	movw	r3, #46192	; 0xb470
   153d4:	movt	r3, #2
   153d8:	cmp	r7, r3
   153dc:	str	r9, [r6, r4, lsl #3]
   153e0:	beq	153ec <__assert_fail@plt+0x44d8>
   153e4:	mov	r0, r7
   153e8:	bl	13814 <__assert_fail@plt+0x2900>
   153ec:	mov	r0, r9
   153f0:	bl	161dc <__assert_fail@plt+0x52c8>
   153f4:	ldr	ip, [r5]
   153f8:	mov	r3, fp
   153fc:	mov	r2, sl
   15400:	mov	r1, r9
   15404:	mov	r7, r0
   15408:	ldr	lr, [sp, #36]	; 0x24
   1540c:	ldr	r4, [r5, #40]	; 0x28
   15410:	str	r0, [lr, #4]
   15414:	ldr	lr, [r5, #44]	; 0x2c
   15418:	str	ip, [sp]
   1541c:	ldr	ip, [sp, #44]	; 0x2c
   15420:	str	ip, [sp, #4]
   15424:	ldr	ip, [sp, #40]	; 0x28
   15428:	str	r4, [sp, #12]
   1542c:	str	lr, [sp, #16]
   15430:	str	ip, [sp, #8]
   15434:	bl	13ae4 <__assert_fail@plt+0x2bd0>
   15438:	ldr	r3, [sp, #28]
   1543c:	mov	r0, r7
   15440:	str	r3, [r8]
   15444:	add	sp, sp, #60	; 0x3c
   15448:	ldrd	r4, [sp]
   1544c:	ldrd	r6, [sp, #8]
   15450:	ldrd	r8, [sp, #16]
   15454:	ldrd	sl, [sp, #24]
   15458:	add	sp, sp, #32
   1545c:	pop	{pc}		; (ldr pc, [sp], #4)
   15460:	mov	r1, #8
   15464:	mvn	r3, #-2147483648	; 0x80000000
   15468:	str	r1, [sp]
   1546c:	add	r1, sp, #52	; 0x34
   15470:	bl	1638c <__assert_fail@plt+0x5478>
   15474:	ldrd	r2, [r7, #8]
   15478:	mov	r6, r0
   1547c:	str	r0, [r7]
   15480:	strd	r2, [r0]
   15484:	b	15340 <__assert_fail@plt+0x442c>
   15488:	bl	10efc <abort@plt>
   1548c:	strd	r4, [sp, #-16]!
   15490:	mov	r5, r0
   15494:	str	r6, [sp, #8]
   15498:	str	lr, [sp, #12]
   1549c:	bl	10e54 <__errno_location@plt>
   154a0:	mov	r4, r0
   154a4:	cmp	r5, #0
   154a8:	ldr	r0, [pc, #32]	; 154d0 <__assert_fail@plt+0x45bc>
   154ac:	mov	r1, #48	; 0x30
   154b0:	movne	r0, r5
   154b4:	ldr	r6, [r4]
   154b8:	bl	16504 <__assert_fail@plt+0x55f0>
   154bc:	str	r6, [r4]
   154c0:	ldrd	r4, [sp]
   154c4:	ldr	r6, [sp, #8]
   154c8:	add	sp, sp, #12
   154cc:	pop	{pc}		; (ldr pc, [sp], #4)
   154d0:	andeq	fp, r2, r0, ror r5
   154d4:	ldr	r3, [pc, #12]	; 154e8 <__assert_fail@plt+0x45d4>
   154d8:	cmp	r0, #0
   154dc:	moveq	r0, r3
   154e0:	ldr	r0, [r0]
   154e4:	bx	lr
   154e8:	andeq	fp, r2, r0, ror r5
   154ec:	ldr	r3, [pc, #12]	; 15500 <__assert_fail@plt+0x45ec>
   154f0:	cmp	r0, #0
   154f4:	moveq	r0, r3
   154f8:	str	r1, [r0]
   154fc:	bx	lr
   15500:	andeq	fp, r2, r0, ror r5
   15504:	ldr	r3, [pc, #52]	; 15540 <__assert_fail@plt+0x462c>
   15508:	cmp	r0, #0
   1550c:	push	{lr}		; (str lr, [sp, #-4]!)
   15510:	lsr	lr, r1, #5
   15514:	and	r1, r1, #31
   15518:	moveq	r0, r3
   1551c:	add	r3, r0, #8
   15520:	ldr	ip, [r3, lr, lsl #2]
   15524:	lsr	r0, ip, r1
   15528:	eor	r2, r2, r0
   1552c:	and	r0, r0, #1
   15530:	and	r2, r2, #1
   15534:	eor	r1, ip, r2, lsl r1
   15538:	str	r1, [r3, lr, lsl #2]
   1553c:	pop	{pc}		; (ldr pc, [sp], #4)
   15540:	andeq	fp, r2, r0, ror r5
   15544:	ldr	r3, [pc, #16]	; 1555c <__assert_fail@plt+0x4648>
   15548:	cmp	r0, #0
   1554c:	movne	r3, r0
   15550:	ldr	r0, [r3, #4]
   15554:	str	r1, [r3, #4]
   15558:	bx	lr
   1555c:	andeq	fp, r2, r0, ror r5
   15560:	ldr	r3, [pc, #48]	; 15598 <__assert_fail@plt+0x4684>
   15564:	cmp	r0, #0
   15568:	mov	ip, #10
   1556c:	moveq	r0, r3
   15570:	cmp	r2, #0
   15574:	cmpne	r1, #0
   15578:	str	ip, [r0]
   1557c:	beq	1558c <__assert_fail@plt+0x4678>
   15580:	str	r1, [r0, #40]	; 0x28
   15584:	str	r2, [r0, #44]	; 0x2c
   15588:	bx	lr
   1558c:	str	r4, [sp, #-8]!
   15590:	str	lr, [sp, #4]
   15594:	bl	10efc <abort@plt>
   15598:	andeq	fp, r2, r0, ror r5
   1559c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   155a0:	strd	r6, [sp, #8]
   155a4:	mov	r7, r0
   155a8:	mov	r6, r1
   155ac:	strd	r8, [sp, #16]
   155b0:	mov	r8, r2
   155b4:	mov	r9, r3
   155b8:	str	lr, [sp, #24]
   155bc:	sub	sp, sp, #28
   155c0:	ldr	r4, [sp, #56]	; 0x38
   155c4:	ldr	ip, [pc, #104]	; 15634 <__assert_fail@plt+0x4720>
   155c8:	cmp	r4, #0
   155cc:	moveq	r4, ip
   155d0:	bl	10e54 <__errno_location@plt>
   155d4:	ldr	ip, [r4, #44]	; 0x2c
   155d8:	mov	r5, r0
   155dc:	mov	r1, r6
   155e0:	add	lr, r4, #8
   155e4:	mov	r3, r9
   155e8:	ldr	r6, [r5]
   155ec:	mov	r2, r8
   155f0:	mov	r0, r7
   155f4:	str	ip, [sp, #16]
   155f8:	ldr	ip, [r4, #40]	; 0x28
   155fc:	str	lr, [sp, #8]
   15600:	str	ip, [sp, #12]
   15604:	ldr	ip, [r4, #4]
   15608:	str	ip, [sp, #4]
   1560c:	ldr	ip, [r4]
   15610:	str	ip, [sp]
   15614:	bl	13ae4 <__assert_fail@plt+0x2bd0>
   15618:	str	r6, [r5]
   1561c:	add	sp, sp, #28
   15620:	ldrd	r4, [sp]
   15624:	ldrd	r6, [sp, #8]
   15628:	ldrd	r8, [sp, #16]
   1562c:	add	sp, sp, #24
   15630:	pop	{pc}		; (ldr pc, [sp], #4)
   15634:	andeq	fp, r2, r0, ror r5
   15638:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1563c:	cmp	r3, #0
   15640:	ldr	r4, [pc, #220]	; 15724 <__assert_fail@plt+0x4810>
   15644:	movne	r4, r3
   15648:	strd	r6, [sp, #8]
   1564c:	mov	r6, r2
   15650:	strd	r8, [sp, #16]
   15654:	mov	r9, r0
   15658:	strd	sl, [sp, #24]
   1565c:	mov	sl, r1
   15660:	str	lr, [sp, #32]
   15664:	sub	sp, sp, #44	; 0x2c
   15668:	bl	10e54 <__errno_location@plt>
   1566c:	ldr	r5, [r4, #4]
   15670:	mov	r7, r0
   15674:	mov	r1, #0
   15678:	add	r8, r4, #8
   1567c:	mov	r3, sl
   15680:	ldr	ip, [r4, #44]	; 0x2c
   15684:	mov	r2, r9
   15688:	mov	r0, r1
   1568c:	ldr	lr, [r7]
   15690:	cmp	r6, r1
   15694:	orreq	r5, r5, #1
   15698:	str	ip, [sp, #16]
   1569c:	ldr	ip, [r4, #40]	; 0x28
   156a0:	stmib	sp, {r5, r8, ip}
   156a4:	ldr	ip, [r4]
   156a8:	str	lr, [sp, #28]
   156ac:	str	ip, [sp]
   156b0:	bl	13ae4 <__assert_fail@plt+0x2bd0>
   156b4:	add	r1, r0, #1
   156b8:	mov	fp, r0
   156bc:	mov	r0, r1
   156c0:	str	r1, [sp, #36]	; 0x24
   156c4:	bl	161dc <__assert_fail@plt+0x52c8>
   156c8:	ldr	ip, [r4, #44]	; 0x2c
   156cc:	mov	r3, sl
   156d0:	mov	r2, r9
   156d4:	ldr	r1, [sp, #36]	; 0x24
   156d8:	str	ip, [sp, #16]
   156dc:	ldr	ip, [r4, #40]	; 0x28
   156e0:	str	r0, [sp, #32]
   156e4:	stmib	sp, {r5, r8, ip}
   156e8:	ldr	ip, [r4]
   156ec:	str	ip, [sp]
   156f0:	bl	13ae4 <__assert_fail@plt+0x2bd0>
   156f4:	ldr	lr, [sp, #28]
   156f8:	cmp	r6, #0
   156fc:	ldr	r0, [sp, #32]
   15700:	str	lr, [r7]
   15704:	strne	fp, [r6]
   15708:	add	sp, sp, #44	; 0x2c
   1570c:	ldrd	r4, [sp]
   15710:	ldrd	r6, [sp, #8]
   15714:	ldrd	r8, [sp, #16]
   15718:	ldrd	sl, [sp, #24]
   1571c:	add	sp, sp, #32
   15720:	pop	{pc}		; (ldr pc, [sp], #4)
   15724:	andeq	fp, r2, r0, ror r5
   15728:	mov	r3, r2
   1572c:	mov	r2, #0
   15730:	b	15638 <__assert_fail@plt+0x4724>
   15734:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15738:	movw	r5, #37108	; 0x90f4
   1573c:	movt	r5, #2
   15740:	ldr	r3, [r5, #4]
   15744:	strd	r6, [sp, #8]
   15748:	str	r8, [sp, #16]
   1574c:	str	lr, [sp, #20]
   15750:	ldr	r7, [r5]
   15754:	cmp	r3, #1
   15758:	ble	1577c <__assert_fail@plt+0x4868>
   1575c:	mov	r4, #1
   15760:	add	r6, r7, #4
   15764:	ldr	r0, [r6, r4, lsl #3]
   15768:	add	r4, r4, #1
   1576c:	bl	13814 <__assert_fail@plt+0x2900>
   15770:	ldr	r3, [r5, #4]
   15774:	cmp	r3, r4
   15778:	bgt	15764 <__assert_fail@plt+0x4850>
   1577c:	ldr	r0, [r7, #4]
   15780:	movw	r4, #46192	; 0xb470
   15784:	movt	r4, #2
   15788:	cmp	r0, r4
   1578c:	beq	157a0 <__assert_fail@plt+0x488c>
   15790:	bl	13814 <__assert_fail@plt+0x2900>
   15794:	mov	r3, #256	; 0x100
   15798:	str	r3, [r5, #8]
   1579c:	str	r4, [r5, #12]
   157a0:	ldr	r4, [pc, #44]	; 157d4 <__assert_fail@plt+0x48c0>
   157a4:	cmp	r7, r4
   157a8:	beq	157b8 <__assert_fail@plt+0x48a4>
   157ac:	mov	r0, r7
   157b0:	bl	13814 <__assert_fail@plt+0x2900>
   157b4:	str	r4, [r5]
   157b8:	mov	r3, #1
   157bc:	ldrd	r6, [sp, #8]
   157c0:	str	r3, [r5, #4]
   157c4:	ldrd	r4, [sp]
   157c8:	ldr	r8, [sp, #16]
   157cc:	add	sp, sp, #20
   157d0:	pop	{pc}		; (ldr pc, [sp], #4)
   157d4:	strdeq	r9, [r2], -ip
   157d8:	ldr	r3, [pc, #4]	; 157e4 <__assert_fail@plt+0x48d0>
   157dc:	mvn	r2, #0
   157e0:	b	152a4 <__assert_fail@plt+0x4390>
   157e4:	andeq	fp, r2, r0, ror r5
   157e8:	ldr	r3, [pc]	; 157f0 <__assert_fail@plt+0x48dc>
   157ec:	b	152a4 <__assert_fail@plt+0x4390>
   157f0:	andeq	fp, r2, r0, ror r5
   157f4:	mov	r1, r0
   157f8:	ldr	r3, [pc, #8]	; 15808 <__assert_fail@plt+0x48f4>
   157fc:	mvn	r2, #0
   15800:	mov	r0, #0
   15804:	b	152a4 <__assert_fail@plt+0x4390>
   15808:	andeq	fp, r2, r0, ror r5
   1580c:	mov	r2, r1
   15810:	ldr	r3, [pc, #8]	; 15820 <__assert_fail@plt+0x490c>
   15814:	mov	r1, r0
   15818:	mov	r0, #0
   1581c:	b	152a4 <__assert_fail@plt+0x4390>
   15820:	andeq	fp, r2, r0, ror r5
   15824:	strd	r4, [sp, #-12]!
   15828:	mov	r5, r2
   1582c:	mov	r4, r0
   15830:	str	lr, [sp, #8]
   15834:	sub	sp, sp, #52	; 0x34
   15838:	mov	r0, sp
   1583c:	bl	13940 <__assert_fail@plt+0x2a2c>
   15840:	mov	r3, sp
   15844:	mov	r1, r5
   15848:	mov	r0, r4
   1584c:	mvn	r2, #0
   15850:	bl	152a4 <__assert_fail@plt+0x4390>
   15854:	add	sp, sp, #52	; 0x34
   15858:	ldrd	r4, [sp]
   1585c:	add	sp, sp, #8
   15860:	pop	{pc}		; (ldr pc, [sp], #4)
   15864:	strd	r4, [sp, #-16]!
   15868:	mov	r5, r2
   1586c:	mov	r4, r0
   15870:	str	r6, [sp, #8]
   15874:	mov	r6, r3
   15878:	str	lr, [sp, #12]
   1587c:	sub	sp, sp, #48	; 0x30
   15880:	mov	r0, sp
   15884:	bl	13940 <__assert_fail@plt+0x2a2c>
   15888:	mov	r3, sp
   1588c:	mov	r2, r6
   15890:	mov	r1, r5
   15894:	mov	r0, r4
   15898:	bl	152a4 <__assert_fail@plt+0x4390>
   1589c:	add	sp, sp, #48	; 0x30
   158a0:	ldrd	r4, [sp]
   158a4:	ldr	r6, [sp, #8]
   158a8:	add	sp, sp, #12
   158ac:	pop	{pc}		; (ldr pc, [sp], #4)
   158b0:	mov	r2, r1
   158b4:	mov	r1, r0
   158b8:	mov	r0, #0
   158bc:	b	15824 <__assert_fail@plt+0x4910>
   158c0:	mov	r3, r2
   158c4:	mov	r2, r1
   158c8:	mov	r1, r0
   158cc:	mov	r0, #0
   158d0:	b	15864 <__assert_fail@plt+0x4950>
   158d4:	ldr	ip, [pc, #140]	; 15968 <__assert_fail@plt+0x4a54>
   158d8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   158dc:	ldrd	r4, [ip]
   158e0:	strd	r6, [sp, #8]
   158e4:	ldrd	r6, [ip, #8]
   158e8:	strd	r8, [sp, #16]
   158ec:	lsr	r9, r2, #5
   158f0:	str	lr, [sp, #24]
   158f4:	sub	sp, sp, #52	; 0x34
   158f8:	and	lr, r2, #31
   158fc:	add	r8, sp, #8
   15900:	mov	r2, r1
   15904:	strd	r4, [sp]
   15908:	mov	r1, r0
   1590c:	mov	r3, sp
   15910:	strd	r6, [sp, #8]
   15914:	mov	r0, #0
   15918:	ldrd	r4, [ip, #16]
   1591c:	ldrd	r6, [ip, #24]
   15920:	strd	r4, [sp, #16]
   15924:	ldrd	r4, [ip, #32]
   15928:	strd	r6, [sp, #24]
   1592c:	ldrd	r6, [ip, #40]	; 0x28
   15930:	strd	r4, [sp, #32]
   15934:	strd	r6, [sp, #40]	; 0x28
   15938:	ldr	ip, [r8, r9, lsl #2]
   1593c:	mvn	r4, ip, lsr lr
   15940:	and	r4, r4, #1
   15944:	eor	lr, ip, r4, lsl lr
   15948:	str	lr, [r8, r9, lsl #2]
   1594c:	bl	152a4 <__assert_fail@plt+0x4390>
   15950:	add	sp, sp, #52	; 0x34
   15954:	ldrd	r4, [sp]
   15958:	ldrd	r6, [sp, #8]
   1595c:	ldrd	r8, [sp, #16]
   15960:	add	sp, sp, #24
   15964:	pop	{pc}		; (ldr pc, [sp], #4)
   15968:	andeq	fp, r2, r0, ror r5
   1596c:	mov	r2, r1
   15970:	mvn	r1, #0
   15974:	b	158d4 <__assert_fail@plt+0x49c0>
   15978:	mov	r2, #58	; 0x3a
   1597c:	mvn	r1, #0
   15980:	b	158d4 <__assert_fail@plt+0x49c0>
   15984:	mov	r2, #58	; 0x3a
   15988:	b	158d4 <__assert_fail@plt+0x49c0>
   1598c:	strd	r4, [sp, #-20]!	; 0xffffffec
   15990:	strd	r6, [sp, #8]
   15994:	mov	r6, r0
   15998:	mov	r7, r2
   1599c:	str	lr, [sp, #16]
   159a0:	sub	sp, sp, #100	; 0x64
   159a4:	mov	r0, sp
   159a8:	bl	13940 <__assert_fail@plt+0x2a2c>
   159ac:	ldrd	r4, [sp, #8]
   159b0:	mov	r1, r7
   159b4:	mov	r0, r6
   159b8:	add	r3, sp, #48	; 0x30
   159bc:	mvn	r2, #0
   159c0:	ldrd	r6, [sp]
   159c4:	strd	r4, [sp, #56]	; 0x38
   159c8:	ldrd	r4, [sp, #16]
   159cc:	strd	r6, [sp, #48]	; 0x30
   159d0:	ldrd	r6, [sp, #32]
   159d4:	ldr	lr, [sp, #60]	; 0x3c
   159d8:	strd	r4, [sp, #64]	; 0x40
   159dc:	ldrd	r4, [sp, #24]
   159e0:	mvn	ip, lr
   159e4:	and	ip, ip, #67108864	; 0x4000000
   159e8:	strd	r4, [sp, #72]	; 0x48
   159ec:	eor	ip, ip, lr
   159f0:	ldrd	r4, [sp, #40]	; 0x28
   159f4:	str	ip, [sp, #60]	; 0x3c
   159f8:	strd	r6, [sp, #80]	; 0x50
   159fc:	strd	r4, [sp, #88]	; 0x58
   15a00:	bl	152a4 <__assert_fail@plt+0x4390>
   15a04:	add	sp, sp, #100	; 0x64
   15a08:	ldrd	r4, [sp]
   15a0c:	ldrd	r6, [sp, #8]
   15a10:	add	sp, sp, #16
   15a14:	pop	{pc}		; (ldr pc, [sp], #4)
   15a18:	ldr	ip, [pc, #156]	; 15abc <__assert_fail@plt+0x4ba8>
   15a1c:	cmp	r2, #0
   15a20:	cmpne	r1, #0
   15a24:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15a28:	strd	r6, [sp, #8]
   15a2c:	mov	r6, r2
   15a30:	str	r8, [sp, #16]
   15a34:	mov	r8, r3
   15a38:	strd	sl, [sp, #20]
   15a3c:	ldrd	r4, [ip]
   15a40:	str	lr, [sp, #28]
   15a44:	sub	sp, sp, #48	; 0x30
   15a48:	mov	lr, #10
   15a4c:	ldrd	r2, [ip, #8]
   15a50:	ldrd	sl, [ip, #16]
   15a54:	strd	r4, [sp]
   15a58:	ldrd	r4, [ip, #32]
   15a5c:	str	lr, [sp]
   15a60:	strd	r2, [sp, #8]
   15a64:	strd	sl, [sp, #16]
   15a68:	ldrd	r2, [ip, #24]
   15a6c:	ldrd	sl, [ip, #40]	; 0x28
   15a70:	strd	r2, [sp, #24]
   15a74:	strd	r4, [sp, #32]
   15a78:	strd	sl, [sp, #40]	; 0x28
   15a7c:	beq	15ab8 <__assert_fail@plt+0x4ba4>
   15a80:	ldr	r2, [sp, #80]	; 0x50
   15a84:	mov	r7, r1
   15a88:	mov	r3, sp
   15a8c:	mov	r1, r8
   15a90:	str	r7, [sp, #40]	; 0x28
   15a94:	str	r6, [sp, #44]	; 0x2c
   15a98:	bl	152a4 <__assert_fail@plt+0x4390>
   15a9c:	add	sp, sp, #48	; 0x30
   15aa0:	ldrd	r4, [sp]
   15aa4:	ldrd	r6, [sp, #8]
   15aa8:	ldr	r8, [sp, #16]
   15aac:	ldrd	sl, [sp, #20]
   15ab0:	add	sp, sp, #28
   15ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ab8:	bl	10efc <abort@plt>
   15abc:	andeq	fp, r2, r0, ror r5
   15ac0:	mvn	ip, #0
   15ac4:	push	{lr}		; (str lr, [sp, #-4]!)
   15ac8:	sub	sp, sp, #12
   15acc:	str	ip, [sp]
   15ad0:	bl	15a18 <__assert_fail@plt+0x4b04>
   15ad4:	add	sp, sp, #12
   15ad8:	pop	{pc}		; (ldr pc, [sp], #4)
   15adc:	mvn	ip, #0
   15ae0:	push	{lr}		; (str lr, [sp, #-4]!)
   15ae4:	sub	sp, sp, #12
   15ae8:	mov	r3, r2
   15aec:	mov	r2, r1
   15af0:	mov	r1, r0
   15af4:	mov	r0, #0
   15af8:	str	ip, [sp]
   15afc:	bl	15a18 <__assert_fail@plt+0x4b04>
   15b00:	add	sp, sp, #12
   15b04:	pop	{pc}		; (ldr pc, [sp], #4)
   15b08:	push	{lr}		; (str lr, [sp, #-4]!)
   15b0c:	sub	sp, sp, #12
   15b10:	str	r3, [sp]
   15b14:	mov	r3, r2
   15b18:	mov	r2, r1
   15b1c:	mov	r1, r0
   15b20:	mov	r0, #0
   15b24:	bl	15a18 <__assert_fail@plt+0x4b04>
   15b28:	add	sp, sp, #12
   15b2c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b30:	ldr	r3, [pc]	; 15b38 <__assert_fail@plt+0x4c24>
   15b34:	b	152a4 <__assert_fail@plt+0x4390>
   15b38:	andeq	r9, r2, r4, lsl #2
   15b3c:	mov	r2, r1
   15b40:	ldr	r3, [pc, #8]	; 15b50 <__assert_fail@plt+0x4c3c>
   15b44:	mov	r1, r0
   15b48:	mov	r0, #0
   15b4c:	b	152a4 <__assert_fail@plt+0x4390>
   15b50:	andeq	r9, r2, r4, lsl #2
   15b54:	ldr	r3, [pc, #4]	; 15b60 <__assert_fail@plt+0x4c4c>
   15b58:	mvn	r2, #0
   15b5c:	b	152a4 <__assert_fail@plt+0x4390>
   15b60:	andeq	r9, r2, r4, lsl #2
   15b64:	mov	r1, r0
   15b68:	ldr	r3, [pc, #8]	; 15b78 <__assert_fail@plt+0x4c64>
   15b6c:	mvn	r2, #0
   15b70:	mov	r0, #0
   15b74:	b	152a4 <__assert_fail@plt+0x4390>
   15b78:	andeq	r9, r2, r4, lsl #2
   15b7c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15b80:	mov	r5, #0
   15b84:	movt	r5, #32752	; 0x7ff0
   15b88:	mov	r4, r2
   15b8c:	strd	r6, [sp, #8]
   15b90:	mov	r7, r1
   15b94:	str	r8, [sp, #16]
   15b98:	mov	r8, r0
   15b9c:	str	lr, [sp, #20]
   15ba0:	mov	r2, r4
   15ba4:	mov	r1, r7
   15ba8:	mov	r0, r8
   15bac:	bl	10cd4 <read@plt>
   15bb0:	subs	r6, r0, #0
   15bb4:	bge	15be8 <__assert_fail@plt+0x4cd4>
   15bb8:	bl	10e54 <__errno_location@plt>
   15bbc:	ldr	r3, [r0]
   15bc0:	cmp	r3, #4
   15bc4:	beq	15ba0 <__assert_fail@plt+0x4c8c>
   15bc8:	cmp	r4, r5
   15bcc:	mov	r4, r5
   15bd0:	movls	r2, #0
   15bd4:	movhi	r2, #1
   15bd8:	cmp	r3, #22
   15bdc:	movne	r2, #0
   15be0:	cmp	r2, #0
   15be4:	bne	15ba0 <__assert_fail@plt+0x4c8c>
   15be8:	mov	r0, r6
   15bec:	ldrd	r4, [sp]
   15bf0:	ldrd	r6, [sp, #8]
   15bf4:	ldr	r8, [sp, #16]
   15bf8:	add	sp, sp, #20
   15bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   15c00:	cmp	r1, #0
   15c04:	strd	r4, [sp, #-16]!
   15c08:	mov	ip, r3
   15c0c:	str	r6, [sp, #8]
   15c10:	mov	r4, r0
   15c14:	str	lr, [sp, #12]
   15c18:	sub	sp, sp, #32
   15c1c:	ldr	r5, [sp, #48]	; 0x30
   15c20:	ldr	r6, [sp, #52]	; 0x34
   15c24:	beq	15d68 <__assert_fail@plt+0x4e54>
   15c28:	mov	r3, r1
   15c2c:	mov	r1, #1
   15c30:	stm	sp, {r2, ip}
   15c34:	movw	r2, #35520	; 0x8ac0
   15c38:	movt	r2, #1
   15c3c:	bl	10e9c <__fprintf_chk@plt>
   15c40:	mov	r2, #5
   15c44:	movw	r1, #35540	; 0x8ad4
   15c48:	movt	r1, #1
   15c4c:	mov	r0, #0
   15c50:	bl	10d58 <dcgettext@plt>
   15c54:	movw	ip, #2022	; 0x7e6
   15c58:	mov	r3, r0
   15c5c:	mov	r1, #1
   15c60:	movw	r2, #36268	; 0x8dac
   15c64:	movt	r2, #1
   15c68:	mov	r0, r4
   15c6c:	str	ip, [sp]
   15c70:	bl	10e9c <__fprintf_chk@plt>
   15c74:	mov	r1, r4
   15c78:	mov	r0, #10
   15c7c:	bl	10d4c <fputc_unlocked@plt>
   15c80:	mov	r2, #5
   15c84:	movw	r1, #35544	; 0x8ad8
   15c88:	movt	r1, #1
   15c8c:	mov	r0, #0
   15c90:	bl	10d58 <dcgettext@plt>
   15c94:	mov	r2, r0
   15c98:	mov	r1, #1
   15c9c:	movw	r3, #35716	; 0x8b84
   15ca0:	movt	r3, #1
   15ca4:	mov	r0, r4
   15ca8:	bl	10e9c <__fprintf_chk@plt>
   15cac:	mov	r1, r4
   15cb0:	mov	r0, #10
   15cb4:	bl	10d4c <fputc_unlocked@plt>
   15cb8:	cmp	r6, #9
   15cbc:	ldrls	pc, [pc, r6, lsl #2]
   15cc0:	b	15fd4 <__assert_fail@plt+0x50c0>
   15cc4:	andeq	r5, r1, r4, asr sp
   15cc8:	andeq	r5, r1, r4, lsl #27
   15ccc:	andeq	r5, r1, r0, asr #27
   15cd0:	andeq	r5, r1, r0, lsl #28
   15cd4:	andeq	r5, r1, r8, asr #28
   15cd8:	andeq	r5, r1, r0, lsl #29
   15cdc:	andeq	r5, r1, r8, asr #29
   15ce0:	andeq	r5, r1, ip, lsl pc
   15ce4:	andeq	r5, r1, r4, ror pc
   15ce8:	andeq	r5, r1, ip, ror #25
   15cec:	movw	r1, #36020	; 0x8cb4
   15cf0:	movt	r1, #1
   15cf4:	mov	r2, #5
   15cf8:	mov	r0, #0
   15cfc:	bl	10d58 <dcgettext@plt>
   15d00:	ldr	lr, [r5, #4]
   15d04:	mov	r2, r0
   15d08:	mov	r1, #1
   15d0c:	mov	r0, r4
   15d10:	ldr	r3, [r5, #8]
   15d14:	ldr	ip, [r5, #32]
   15d18:	str	lr, [sp]
   15d1c:	ldr	lr, [r5, #12]
   15d20:	str	ip, [sp, #28]
   15d24:	ldr	ip, [r5, #28]
   15d28:	str	r3, [sp, #4]
   15d2c:	ldr	r3, [r5, #16]
   15d30:	str	lr, [sp, #8]
   15d34:	ldr	lr, [r5, #20]
   15d38:	str	ip, [sp, #24]
   15d3c:	ldr	ip, [r5, #24]
   15d40:	str	r3, [sp, #12]
   15d44:	ldr	r3, [r5]
   15d48:	str	lr, [sp, #16]
   15d4c:	str	ip, [sp, #20]
   15d50:	bl	10e9c <__fprintf_chk@plt>
   15d54:	add	sp, sp, #32
   15d58:	ldrd	r4, [sp]
   15d5c:	ldr	r6, [sp, #8]
   15d60:	add	sp, sp, #12
   15d64:	pop	{pc}		; (ldr pc, [sp], #4)
   15d68:	mov	r3, r2
   15d6c:	mov	r1, #1
   15d70:	str	ip, [sp]
   15d74:	movw	r2, #35532	; 0x8acc
   15d78:	movt	r2, #1
   15d7c:	bl	10e9c <__fprintf_chk@plt>
   15d80:	b	15c40 <__assert_fail@plt+0x4d2c>
   15d84:	mov	r2, #5
   15d88:	movw	r1, #35752	; 0x8ba8
   15d8c:	movt	r1, #1
   15d90:	mov	r0, #0
   15d94:	bl	10d58 <dcgettext@plt>
   15d98:	ldr	r3, [r5]
   15d9c:	mov	r2, r0
   15da0:	mov	r1, #1
   15da4:	mov	r0, r4
   15da8:	add	sp, sp, #32
   15dac:	ldrd	r4, [sp]
   15db0:	ldr	r6, [sp, #8]
   15db4:	ldr	lr, [sp, #12]
   15db8:	add	sp, sp, #16
   15dbc:	b	10e9c <__fprintf_chk@plt>
   15dc0:	mov	r2, #5
   15dc4:	movw	r1, #35768	; 0x8bb8
   15dc8:	movt	r1, #1
   15dcc:	mov	r0, #0
   15dd0:	bl	10d58 <dcgettext@plt>
   15dd4:	ldm	r5, {r3, ip}
   15dd8:	mov	r2, r0
   15ddc:	mov	r1, #1
   15de0:	mov	r0, r4
   15de4:	str	ip, [sp, #48]	; 0x30
   15de8:	add	sp, sp, #32
   15dec:	ldrd	r4, [sp]
   15df0:	ldr	r6, [sp, #8]
   15df4:	ldr	lr, [sp, #12]
   15df8:	add	sp, sp, #16
   15dfc:	b	10e9c <__fprintf_chk@plt>
   15e00:	mov	r2, #5
   15e04:	movw	r1, #35792	; 0x8bd0
   15e08:	movt	r1, #1
   15e0c:	mov	r0, #0
   15e10:	bl	10d58 <dcgettext@plt>
   15e14:	ldm	r5, {r3, lr}
   15e18:	mov	r2, r0
   15e1c:	mov	r1, #1
   15e20:	mov	r0, r4
   15e24:	ldr	ip, [r5, #8]
   15e28:	str	lr, [sp, #48]	; 0x30
   15e2c:	str	ip, [sp, #52]	; 0x34
   15e30:	add	sp, sp, #32
   15e34:	ldrd	r4, [sp]
   15e38:	ldr	r6, [sp, #8]
   15e3c:	ldr	lr, [sp, #12]
   15e40:	add	sp, sp, #16
   15e44:	b	10e9c <__fprintf_chk@plt>
   15e48:	mov	r2, #5
   15e4c:	movw	r1, #35820	; 0x8bec
   15e50:	movt	r1, #1
   15e54:	mov	r0, #0
   15e58:	bl	10d58 <dcgettext@plt>
   15e5c:	ldmib	r5, {r3, ip, lr}
   15e60:	mov	r2, r0
   15e64:	mov	r1, #1
   15e68:	mov	r0, r4
   15e6c:	str	r3, [sp]
   15e70:	ldr	r3, [r5]
   15e74:	stmib	sp, {ip, lr}
   15e78:	bl	10e9c <__fprintf_chk@plt>
   15e7c:	b	15d54 <__assert_fail@plt+0x4e40>
   15e80:	mov	r2, #5
   15e84:	movw	r1, #35852	; 0x8c0c
   15e88:	movt	r1, #1
   15e8c:	mov	r0, #0
   15e90:	bl	10d58 <dcgettext@plt>
   15e94:	ldmib	r5, {ip, lr}
   15e98:	mov	r2, r0
   15e9c:	mov	r1, #1
   15ea0:	mov	r0, r4
   15ea4:	ldr	r3, [r5, #16]
   15ea8:	str	ip, [sp]
   15eac:	ldr	ip, [r5, #12]
   15eb0:	str	r3, [sp, #12]
   15eb4:	ldr	r3, [r5]
   15eb8:	str	lr, [sp, #4]
   15ebc:	str	ip, [sp, #8]
   15ec0:	bl	10e9c <__fprintf_chk@plt>
   15ec4:	b	15d54 <__assert_fail@plt+0x4e40>
   15ec8:	mov	r2, #5
   15ecc:	movw	r1, #35888	; 0x8c30
   15ed0:	movt	r1, #1
   15ed4:	mov	r0, #0
   15ed8:	bl	10d58 <dcgettext@plt>
   15edc:	ldr	lr, [r5, #4]
   15ee0:	mov	r2, r0
   15ee4:	mov	r1, #1
   15ee8:	mov	r0, r4
   15eec:	ldr	r3, [r5, #8]
   15ef0:	ldr	ip, [r5, #20]
   15ef4:	str	lr, [sp]
   15ef8:	ldr	lr, [r5, #12]
   15efc:	str	ip, [sp, #16]
   15f00:	ldr	ip, [r5, #16]
   15f04:	str	r3, [sp, #4]
   15f08:	ldr	r3, [r5]
   15f0c:	str	lr, [sp, #8]
   15f10:	str	ip, [sp, #12]
   15f14:	bl	10e9c <__fprintf_chk@plt>
   15f18:	b	15d54 <__assert_fail@plt+0x4e40>
   15f1c:	mov	r2, #5
   15f20:	movw	r1, #35928	; 0x8c58
   15f24:	movt	r1, #1
   15f28:	mov	r0, #0
   15f2c:	bl	10d58 <dcgettext@plt>
   15f30:	ldmib	r5, {r3, ip}
   15f34:	mov	r2, r0
   15f38:	mov	r1, #1
   15f3c:	mov	r0, r4
   15f40:	ldr	lr, [r5, #24]
   15f44:	str	r3, [sp]
   15f48:	ldr	r3, [r5, #12]
   15f4c:	str	lr, [sp, #20]
   15f50:	ldr	lr, [r5, #20]
   15f54:	str	ip, [sp, #4]
   15f58:	ldr	ip, [r5, #16]
   15f5c:	str	r3, [sp, #8]
   15f60:	ldr	r3, [r5]
   15f64:	str	ip, [sp, #12]
   15f68:	str	lr, [sp, #16]
   15f6c:	bl	10e9c <__fprintf_chk@plt>
   15f70:	b	15d54 <__assert_fail@plt+0x4e40>
   15f74:	mov	r2, #5
   15f78:	movw	r1, #35972	; 0x8c84
   15f7c:	movt	r1, #1
   15f80:	mov	r0, #0
   15f84:	bl	10d58 <dcgettext@plt>
   15f88:	ldmib	r5, {ip, lr}
   15f8c:	mov	r2, r0
   15f90:	mov	r1, #1
   15f94:	mov	r0, r4
   15f98:	ldr	r3, [r5, #28]
   15f9c:	str	ip, [sp]
   15fa0:	ldr	ip, [r5, #12]
   15fa4:	str	r3, [sp, #24]
   15fa8:	ldr	r3, [r5, #24]
   15fac:	str	lr, [sp, #4]
   15fb0:	ldr	lr, [r5, #16]
   15fb4:	str	ip, [sp, #8]
   15fb8:	ldr	ip, [r5, #20]
   15fbc:	str	r3, [sp, #20]
   15fc0:	ldr	r3, [r5]
   15fc4:	str	lr, [sp, #12]
   15fc8:	str	ip, [sp, #16]
   15fcc:	bl	10e9c <__fprintf_chk@plt>
   15fd0:	b	15d54 <__assert_fail@plt+0x4e40>
   15fd4:	movw	r1, #36072	; 0x8ce8
   15fd8:	movt	r1, #1
   15fdc:	b	15cf4 <__assert_fail@plt+0x4de0>
   15fe0:	strd	r4, [sp, #-12]!
   15fe4:	str	lr, [sp, #8]
   15fe8:	sub	sp, sp, #12
   15fec:	ldr	r5, [sp, #24]
   15ff0:	ldr	ip, [r5]
   15ff4:	cmp	ip, #0
   15ff8:	beq	16014 <__assert_fail@plt+0x5100>
   15ffc:	mov	lr, r5
   16000:	mov	ip, #0
   16004:	ldr	r4, [lr, #4]!
   16008:	add	ip, ip, #1
   1600c:	cmp	r4, #0
   16010:	bne	16004 <__assert_fail@plt+0x50f0>
   16014:	stm	sp, {r5, ip}
   16018:	bl	15c00 <__assert_fail@plt+0x4cec>
   1601c:	add	sp, sp, #12
   16020:	ldrd	r4, [sp]
   16024:	add	sp, sp, #8
   16028:	pop	{pc}		; (ldr pc, [sp], #4)
   1602c:	strd	r4, [sp, #-16]!
   16030:	mov	ip, #0
   16034:	str	r6, [sp, #8]
   16038:	str	lr, [sp, #12]
   1603c:	sub	sp, sp, #48	; 0x30
   16040:	ldr	r5, [sp, #64]	; 0x40
   16044:	add	r6, sp, #8
   16048:	mov	r4, r6
   1604c:	ldr	lr, [r5], #4
   16050:	cmp	lr, #0
   16054:	str	lr, [r4], #4
   16058:	beq	16068 <__assert_fail@plt+0x5154>
   1605c:	add	ip, ip, #1
   16060:	cmp	ip, #10
   16064:	bne	1604c <__assert_fail@plt+0x5138>
   16068:	stm	sp, {r6, ip}
   1606c:	bl	15c00 <__assert_fail@plt+0x4cec>
   16070:	add	sp, sp, #48	; 0x30
   16074:	ldrd	r4, [sp]
   16078:	ldr	r6, [sp, #8]
   1607c:	add	sp, sp, #12
   16080:	pop	{pc}		; (ldr pc, [sp], #4)
   16084:	push	{r3}		; (str r3, [sp, #-4]!)
   16088:	mov	ip, #0
   1608c:	strd	r4, [sp, #-12]!
   16090:	str	lr, [sp, #8]
   16094:	sub	sp, sp, #56	; 0x38
   16098:	add	r3, sp, #72	; 0x48
   1609c:	add	r5, sp, #16
   160a0:	mov	r4, r3
   160a4:	mov	lr, r5
   160a8:	str	r3, [sp, #12]
   160ac:	ldr	r3, [r4], #4
   160b0:	cmp	r3, #0
   160b4:	str	r3, [lr], #4
   160b8:	beq	160c8 <__assert_fail@plt+0x51b4>
   160bc:	add	ip, ip, #1
   160c0:	cmp	ip, #10
   160c4:	bne	160ac <__assert_fail@plt+0x5198>
   160c8:	ldr	r3, [sp, #68]	; 0x44
   160cc:	stm	sp, {r5, ip}
   160d0:	bl	15c00 <__assert_fail@plt+0x4cec>
   160d4:	add	sp, sp, #56	; 0x38
   160d8:	ldrd	r4, [sp]
   160dc:	ldr	lr, [sp, #8]
   160e0:	add	sp, sp, #12
   160e4:	add	sp, sp, #4
   160e8:	bx	lr
   160ec:	movw	r3, #37204	; 0x9154
   160f0:	movt	r3, #2
   160f4:	str	r4, [sp, #-8]!
   160f8:	mov	r0, #10
   160fc:	ldr	r1, [r3]
   16100:	str	lr, [sp, #4]
   16104:	bl	10d4c <fputc_unlocked@plt>
   16108:	mov	r2, #5
   1610c:	movw	r1, #36132	; 0x8d24
   16110:	movt	r1, #1
   16114:	mov	r0, #0
   16118:	bl	10d58 <dcgettext@plt>
   1611c:	mov	r1, r0
   16120:	movw	r2, #36152	; 0x8d38
   16124:	movt	r2, #1
   16128:	mov	r0, #1
   1612c:	bl	10e84 <__printf_chk@plt>
   16130:	mov	r2, #5
   16134:	movw	r1, #36176	; 0x8d50
   16138:	movt	r1, #1
   1613c:	mov	r0, #0
   16140:	bl	10d58 <dcgettext@plt>
   16144:	mov	r1, r0
   16148:	movw	r3, #33656	; 0x8378
   1614c:	movt	r3, #1
   16150:	movw	r2, #33696	; 0x83a0
   16154:	movt	r2, #1
   16158:	mov	r0, #1
   1615c:	bl	10e84 <__printf_chk@plt>
   16160:	mov	r2, #5
   16164:	movw	r1, #36196	; 0x8d64
   16168:	movt	r1, #1
   1616c:	mov	r0, #0
   16170:	bl	10d58 <dcgettext@plt>
   16174:	mov	r1, r0
   16178:	movw	r2, #36236	; 0x8d8c
   1617c:	movt	r2, #1
   16180:	mov	r0, #1
   16184:	ldr	r4, [sp]
   16188:	ldr	lr, [sp, #4]
   1618c:	add	sp, sp, #8
   16190:	b	10e84 <__printf_chk@plt>
   16194:	str	r4, [sp, #-8]!
   16198:	str	lr, [sp, #4]
   1619c:	bl	1706c <__assert_fail@plt+0x6158>
   161a0:	cmp	r0, #0
   161a4:	beq	161b4 <__assert_fail@plt+0x52a0>
   161a8:	ldr	r4, [sp]
   161ac:	add	sp, sp, #4
   161b0:	pop	{pc}		; (ldr pc, [sp], #4)
   161b4:	bl	1660c <__assert_fail@plt+0x56f8>
   161b8:	str	r4, [sp, #-8]!
   161bc:	str	lr, [sp, #4]
   161c0:	bl	1706c <__assert_fail@plt+0x6158>
   161c4:	cmp	r0, #0
   161c8:	beq	161d8 <__assert_fail@plt+0x52c4>
   161cc:	ldr	r4, [sp]
   161d0:	add	sp, sp, #4
   161d4:	pop	{pc}		; (ldr pc, [sp], #4)
   161d8:	bl	1660c <__assert_fail@plt+0x56f8>
   161dc:	str	r4, [sp, #-8]!
   161e0:	str	lr, [sp, #4]
   161e4:	bl	1706c <__assert_fail@plt+0x6158>
   161e8:	cmp	r0, #0
   161ec:	beq	161fc <__assert_fail@plt+0x52e8>
   161f0:	ldr	r4, [sp]
   161f4:	add	sp, sp, #4
   161f8:	pop	{pc}		; (ldr pc, [sp], #4)
   161fc:	bl	1660c <__assert_fail@plt+0x56f8>
   16200:	strd	r4, [sp, #-16]!
   16204:	mov	r5, r0
   16208:	mov	r4, r1
   1620c:	str	r6, [sp, #8]
   16210:	str	lr, [sp, #12]
   16214:	bl	170a8 <__assert_fail@plt+0x6194>
   16218:	cmp	r0, #0
   1621c:	beq	16230 <__assert_fail@plt+0x531c>
   16220:	ldrd	r4, [sp]
   16224:	ldr	r6, [sp, #8]
   16228:	add	sp, sp, #12
   1622c:	pop	{pc}		; (ldr pc, [sp], #4)
   16230:	adds	r4, r4, #0
   16234:	movne	r4, #1
   16238:	cmp	r5, #0
   1623c:	moveq	r4, #1
   16240:	cmp	r4, #0
   16244:	beq	16220 <__assert_fail@plt+0x530c>
   16248:	bl	1660c <__assert_fail@plt+0x56f8>
   1624c:	cmp	r1, #0
   16250:	orreq	r1, r1, #1
   16254:	str	r4, [sp, #-8]!
   16258:	str	lr, [sp, #4]
   1625c:	bl	170a8 <__assert_fail@plt+0x6194>
   16260:	cmp	r0, #0
   16264:	beq	16274 <__assert_fail@plt+0x5360>
   16268:	ldr	r4, [sp]
   1626c:	add	sp, sp, #4
   16270:	pop	{pc}		; (ldr pc, [sp], #4)
   16274:	bl	1660c <__assert_fail@plt+0x56f8>
   16278:	strd	r4, [sp, #-16]!
   1627c:	mov	r4, r0
   16280:	mov	r5, r2
   16284:	str	r6, [sp, #8]
   16288:	mov	r6, r1
   1628c:	str	lr, [sp, #12]
   16290:	bl	17428 <__assert_fail@plt+0x6514>
   16294:	cmp	r0, #0
   16298:	beq	162ac <__assert_fail@plt+0x5398>
   1629c:	ldrd	r4, [sp]
   162a0:	ldr	r6, [sp, #8]
   162a4:	add	sp, sp, #12
   162a8:	pop	{pc}		; (ldr pc, [sp], #4)
   162ac:	cmp	r4, #0
   162b0:	beq	162c0 <__assert_fail@plt+0x53ac>
   162b4:	cmp	r6, #0
   162b8:	cmpne	r5, #0
   162bc:	beq	1629c <__assert_fail@plt+0x5388>
   162c0:	bl	1660c <__assert_fail@plt+0x56f8>
   162c4:	b	16278 <__assert_fail@plt+0x5364>
   162c8:	cmp	r2, #0
   162cc:	cmpne	r1, #0
   162d0:	str	r4, [sp, #-8]!
   162d4:	moveq	r2, #1
   162d8:	str	lr, [sp, #4]
   162dc:	moveq	r1, r2
   162e0:	bl	17428 <__assert_fail@plt+0x6514>
   162e4:	cmp	r0, #0
   162e8:	beq	162f8 <__assert_fail@plt+0x53e4>
   162ec:	ldr	r4, [sp]
   162f0:	add	sp, sp, #4
   162f4:	pop	{pc}		; (ldr pc, [sp], #4)
   162f8:	bl	1660c <__assert_fail@plt+0x56f8>
   162fc:	mov	r2, r1
   16300:	mov	r1, r0
   16304:	mov	r0, #0
   16308:	b	16278 <__assert_fail@plt+0x5364>
   1630c:	mov	r2, r1
   16310:	mov	r1, r0
   16314:	mov	r0, #0
   16318:	b	162c8 <__assert_fail@plt+0x53b4>
   1631c:	cmp	r0, #0
   16320:	strd	r4, [sp, #-16]!
   16324:	mov	r5, r1
   16328:	ldr	r4, [r1]
   1632c:	str	r6, [sp, #8]
   16330:	str	lr, [sp, #12]
   16334:	beq	16364 <__assert_fail@plt+0x5450>
   16338:	lsr	r3, r4, #1
   1633c:	add	r3, r3, #1
   16340:	adds	r4, r4, r3
   16344:	bcs	16380 <__assert_fail@plt+0x546c>
   16348:	mov	r1, r4
   1634c:	bl	16278 <__assert_fail@plt+0x5364>
   16350:	ldr	r6, [sp, #8]
   16354:	str	r4, [r5]
   16358:	ldrd	r4, [sp]
   1635c:	add	sp, sp, #12
   16360:	pop	{pc}		; (ldr pc, [sp], #4)
   16364:	cmp	r4, #0
   16368:	bne	16348 <__assert_fail@plt+0x5434>
   1636c:	mov	r4, #64	; 0x40
   16370:	udiv	r4, r4, r2
   16374:	cmp	r2, #64	; 0x40
   16378:	addhi	r4, r4, #1
   1637c:	b	16348 <__assert_fail@plt+0x5434>
   16380:	bl	1660c <__assert_fail@plt+0x56f8>
   16384:	mov	r2, #1
   16388:	b	1631c <__assert_fail@plt+0x5408>
   1638c:	ldr	ip, [r1]
   16390:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16394:	mov	r5, r1
   16398:	strd	r6, [sp, #8]
   1639c:	str	lr, [sp, #28]
   163a0:	strd	r8, [sp, #16]
   163a4:	asr	lr, ip, #1
   163a8:	ldr	r8, [sp, #32]
   163ac:	str	sl, [sp, #24]
   163b0:	adds	r4, ip, lr
   163b4:	mvn	lr, r3
   163b8:	lsr	lr, lr, #31
   163bc:	mvnvs	r4, #-2147483648	; 0x80000000
   163c0:	cmp	r3, r4
   163c4:	movge	r1, #0
   163c8:	andlt	r1, lr, #1
   163cc:	cmp	r1, #0
   163d0:	movne	r4, r3
   163d4:	smull	r6, r7, r4, r8
   163d8:	cmp	r7, r6, asr #31
   163dc:	bne	16464 <__assert_fail@plt+0x5550>
   163e0:	cmp	r6, #63	; 0x3f
   163e4:	mov	r1, r6
   163e8:	ble	1644c <__assert_fail@plt+0x5538>
   163ec:	cmp	r0, #0
   163f0:	sub	r6, r4, ip
   163f4:	streq	r0, [r5]
   163f8:	cmp	r6, r2
   163fc:	bge	1642c <__assert_fail@plt+0x5518>
   16400:	adds	r4, ip, r2
   16404:	bvs	16460 <__assert_fail@plt+0x554c>
   16408:	cmp	r4, r3
   1640c:	movle	r3, #0
   16410:	andgt	r3, lr, #1
   16414:	cmp	r3, #0
   16418:	bne	16460 <__assert_fail@plt+0x554c>
   1641c:	smull	r8, r9, r4, r8
   16420:	cmp	r9, r8, asr #31
   16424:	mov	r1, r8
   16428:	bne	16460 <__assert_fail@plt+0x554c>
   1642c:	bl	16200 <__assert_fail@plt+0x52ec>
   16430:	ldrd	r6, [sp, #8]
   16434:	ldrd	r8, [sp, #16]
   16438:	ldr	sl, [sp, #24]
   1643c:	str	r4, [r5]
   16440:	ldrd	r4, [sp]
   16444:	add	sp, sp, #28
   16448:	pop	{pc}		; (ldr pc, [sp], #4)
   1644c:	mov	r6, #64	; 0x40
   16450:	sdiv	r4, r6, r8
   16454:	mls	r1, r8, r4, r6
   16458:	sub	r1, r6, r1
   1645c:	b	163ec <__assert_fail@plt+0x54d8>
   16460:	bl	1660c <__assert_fail@plt+0x56f8>
   16464:	mvn	r6, #-2147483648	; 0x80000000
   16468:	b	16450 <__assert_fail@plt+0x553c>
   1646c:	mov	r1, #1
   16470:	str	r4, [sp, #-8]!
   16474:	str	lr, [sp, #4]
   16478:	bl	16ff8 <__assert_fail@plt+0x60e4>
   1647c:	cmp	r0, #0
   16480:	beq	16490 <__assert_fail@plt+0x557c>
   16484:	ldr	r4, [sp]
   16488:	add	sp, sp, #4
   1648c:	pop	{pc}		; (ldr pc, [sp], #4)
   16490:	bl	1660c <__assert_fail@plt+0x56f8>
   16494:	mov	r1, #1
   16498:	str	r4, [sp, #-8]!
   1649c:	str	lr, [sp, #4]
   164a0:	bl	16ff8 <__assert_fail@plt+0x60e4>
   164a4:	cmp	r0, #0
   164a8:	beq	164b8 <__assert_fail@plt+0x55a4>
   164ac:	ldr	r4, [sp]
   164b0:	add	sp, sp, #4
   164b4:	pop	{pc}		; (ldr pc, [sp], #4)
   164b8:	bl	1660c <__assert_fail@plt+0x56f8>
   164bc:	str	r4, [sp, #-8]!
   164c0:	str	lr, [sp, #4]
   164c4:	bl	16ff8 <__assert_fail@plt+0x60e4>
   164c8:	cmp	r0, #0
   164cc:	beq	164dc <__assert_fail@plt+0x55c8>
   164d0:	ldr	r4, [sp]
   164d4:	add	sp, sp, #4
   164d8:	pop	{pc}		; (ldr pc, [sp], #4)
   164dc:	bl	1660c <__assert_fail@plt+0x56f8>
   164e0:	str	r4, [sp, #-8]!
   164e4:	str	lr, [sp, #4]
   164e8:	bl	16ff8 <__assert_fail@plt+0x60e4>
   164ec:	cmp	r0, #0
   164f0:	beq	16500 <__assert_fail@plt+0x55ec>
   164f4:	ldr	r4, [sp]
   164f8:	add	sp, sp, #4
   164fc:	pop	{pc}		; (ldr pc, [sp], #4)
   16500:	bl	1660c <__assert_fail@plt+0x56f8>
   16504:	strd	r4, [sp, #-16]!
   16508:	mov	r4, r1
   1650c:	str	r6, [sp, #8]
   16510:	mov	r6, r0
   16514:	mov	r0, r1
   16518:	str	lr, [sp, #12]
   1651c:	bl	1706c <__assert_fail@plt+0x6158>
   16520:	subs	r5, r0, #0
   16524:	beq	16548 <__assert_fail@plt+0x5634>
   16528:	mov	r2, r4
   1652c:	mov	r1, r6
   16530:	bl	10d04 <memcpy@plt>
   16534:	mov	r0, r5
   16538:	ldrd	r4, [sp]
   1653c:	ldr	r6, [sp, #8]
   16540:	add	sp, sp, #12
   16544:	pop	{pc}		; (ldr pc, [sp], #4)
   16548:	bl	1660c <__assert_fail@plt+0x56f8>
   1654c:	strd	r4, [sp, #-16]!
   16550:	mov	r4, r1
   16554:	str	r6, [sp, #8]
   16558:	mov	r6, r0
   1655c:	mov	r0, r1
   16560:	str	lr, [sp, #12]
   16564:	bl	1706c <__assert_fail@plt+0x6158>
   16568:	subs	r5, r0, #0
   1656c:	beq	16590 <__assert_fail@plt+0x567c>
   16570:	mov	r2, r4
   16574:	mov	r1, r6
   16578:	bl	10d04 <memcpy@plt>
   1657c:	mov	r0, r5
   16580:	ldrd	r4, [sp]
   16584:	ldr	r6, [sp, #8]
   16588:	add	sp, sp, #12
   1658c:	pop	{pc}		; (ldr pc, [sp], #4)
   16590:	bl	1660c <__assert_fail@plt+0x56f8>
   16594:	strd	r4, [sp, #-16]!
   16598:	mov	r4, r1
   1659c:	str	r6, [sp, #8]
   165a0:	mov	r6, r0
   165a4:	add	r0, r1, #1
   165a8:	str	lr, [sp, #12]
   165ac:	bl	1706c <__assert_fail@plt+0x6158>
   165b0:	subs	r5, r0, #0
   165b4:	beq	165e0 <__assert_fail@plt+0x56cc>
   165b8:	mov	r3, #0
   165bc:	mov	r1, r6
   165c0:	mov	r2, r4
   165c4:	strb	r3, [r5, r4]
   165c8:	bl	10d04 <memcpy@plt>
   165cc:	mov	r0, r5
   165d0:	ldrd	r4, [sp]
   165d4:	ldr	r6, [sp, #8]
   165d8:	add	sp, sp, #12
   165dc:	pop	{pc}		; (ldr pc, [sp], #4)
   165e0:	bl	1660c <__assert_fail@plt+0x56f8>
   165e4:	str	r4, [sp, #-8]!
   165e8:	mov	r4, r0
   165ec:	str	lr, [sp, #4]
   165f0:	bl	10e3c <strlen@plt>
   165f4:	add	r1, r0, #1
   165f8:	mov	r0, r4
   165fc:	ldr	r4, [sp]
   16600:	ldr	lr, [sp, #4]
   16604:	add	sp, sp, #8
   16608:	b	16504 <__assert_fail@plt+0x55f0>
   1660c:	movw	r3, #37104	; 0x90f0
   16610:	movt	r3, #2
   16614:	str	r4, [sp, #-8]!
   16618:	ldr	r4, [r3]
   1661c:	mov	r2, #5
   16620:	movw	r1, #36316	; 0x8ddc
   16624:	movt	r1, #1
   16628:	mov	r0, #0
   1662c:	str	lr, [sp, #4]
   16630:	bl	10d58 <dcgettext@plt>
   16634:	mov	r3, r0
   16638:	movw	r2, #35236	; 0x89a4
   1663c:	movt	r2, #1
   16640:	mov	r1, #0
   16644:	mov	r0, r4
   16648:	bl	10dc4 <error@plt>
   1664c:	bl	10efc <abort@plt>
   16650:	cmp	r2, #36	; 0x24
   16654:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16658:	strd	r6, [sp, #8]
   1665c:	strd	r8, [sp, #16]
   16660:	strd	sl, [sp, #24]
   16664:	str	lr, [sp, #32]
   16668:	sub	sp, sp, #36	; 0x24
   1666c:	bhi	16efc <__assert_fail@plt+0x5fe8>
   16670:	cmp	r1, #0
   16674:	mov	r8, r2
   16678:	mov	r6, r0
   1667c:	mov	r5, r1
   16680:	mov	sl, r3
   16684:	addeq	r5, sp, #28
   16688:	bl	10e54 <__errno_location@plt>
   1668c:	mov	r3, #0
   16690:	mov	r7, r0
   16694:	str	r3, [r0]
   16698:	bl	10e24 <__ctype_b_loc@plt>
   1669c:	ldrb	r3, [r6]
   166a0:	mov	r2, r6
   166a4:	ldr	r0, [r0]
   166a8:	b	166b0 <__assert_fail@plt+0x579c>
   166ac:	ldrb	r3, [r2, #1]!
   166b0:	lsl	r1, r3, #1
   166b4:	ldrh	r4, [r0, r1]
   166b8:	ands	r4, r4, #8192	; 0x2000
   166bc:	bne	166ac <__assert_fail@plt+0x5798>
   166c0:	cmp	r3, #45	; 0x2d
   166c4:	beq	16764 <__assert_fail@plt+0x5850>
   166c8:	mov	r2, r8
   166cc:	mov	r3, r4
   166d0:	mov	r1, r5
   166d4:	mov	r0, r6
   166d8:	bl	10d10 <__strtoull_internal@plt>
   166dc:	ldr	fp, [r5]
   166e0:	mov	r9, r0
   166e4:	mov	r8, r1
   166e8:	cmp	fp, r6
   166ec:	beq	1674c <__assert_fail@plt+0x5838>
   166f0:	ldr	r4, [r7]
   166f4:	cmp	r4, #0
   166f8:	bne	1673c <__assert_fail@plt+0x5828>
   166fc:	ldr	r3, [sp, #72]	; 0x48
   16700:	cmp	r3, #0
   16704:	beq	16714 <__assert_fail@plt+0x5800>
   16708:	ldrb	r6, [fp]
   1670c:	cmp	r6, #0
   16710:	bne	16a54 <__assert_fail@plt+0x5b40>
   16714:	str	r9, [sl]
   16718:	str	r8, [sl, #4]
   1671c:	mov	r0, r4
   16720:	add	sp, sp, #36	; 0x24
   16724:	ldrd	r4, [sp]
   16728:	ldrd	r6, [sp, #8]
   1672c:	ldrd	r8, [sp, #16]
   16730:	ldrd	sl, [sp, #24]
   16734:	add	sp, sp, #32
   16738:	pop	{pc}		; (ldr pc, [sp], #4)
   1673c:	cmp	r4, #34	; 0x22
   16740:	bne	16764 <__assert_fail@plt+0x5850>
   16744:	mov	r4, #1
   16748:	b	166fc <__assert_fail@plt+0x57e8>
   1674c:	ldr	r3, [sp, #72]	; 0x48
   16750:	cmp	r3, #0
   16754:	beq	16764 <__assert_fail@plt+0x5850>
   16758:	ldrb	r6, [r6]
   1675c:	cmp	r6, #0
   16760:	bne	1676c <__assert_fail@plt+0x5858>
   16764:	mov	r4, #4
   16768:	b	1671c <__assert_fail@plt+0x5808>
   1676c:	mov	r1, r6
   16770:	mov	r0, r3
   16774:	bl	10e48 <strchr@plt>
   16778:	cmp	r0, #0
   1677c:	movne	r9, #1
   16780:	movne	r8, #0
   16784:	beq	16764 <__assert_fail@plt+0x5850>
   16788:	sub	r3, r6, #69	; 0x45
   1678c:	cmp	r3, #47	; 0x2f
   16790:	ldrls	pc, [pc, r3, lsl #2]
   16794:	b	1689c <__assert_fail@plt+0x5988>
   16798:	andeq	r6, r1, r8, asr r8
   1679c:	muleq	r1, ip, r8
   167a0:	andeq	r6, r1, r8, asr r8
   167a4:	muleq	r1, ip, r8
   167a8:	muleq	r1, ip, r8
   167ac:	muleq	r1, ip, r8
   167b0:	andeq	r6, r1, r8, asr r8
   167b4:	muleq	r1, ip, r8
   167b8:	andeq	r6, r1, r8, asr r8
   167bc:	muleq	r1, ip, r8
   167c0:	muleq	r1, ip, r8
   167c4:	andeq	r6, r1, r8, asr r8
   167c8:	muleq	r1, ip, r8
   167cc:	muleq	r1, ip, r8
   167d0:	muleq	r1, ip, r8
   167d4:	andeq	r6, r1, r8, asr r8
   167d8:	muleq	r1, ip, r8
   167dc:	muleq	r1, ip, r8
   167e0:	muleq	r1, ip, r8
   167e4:	muleq	r1, ip, r8
   167e8:	andeq	r6, r1, r8, asr r8
   167ec:	andeq	r6, r1, r8, asr r8
   167f0:	muleq	r1, ip, r8
   167f4:	muleq	r1, ip, r8
   167f8:	muleq	r1, ip, r8
   167fc:	muleq	r1, ip, r8
   16800:	muleq	r1, ip, r8
   16804:	muleq	r1, ip, r8
   16808:	muleq	r1, ip, r8
   1680c:	muleq	r1, ip, r8
   16810:	muleq	r1, ip, r8
   16814:	muleq	r1, ip, r8
   16818:	muleq	r1, ip, r8
   1681c:	muleq	r1, ip, r8
   16820:	andeq	r6, r1, r8, asr r8
   16824:	muleq	r1, ip, r8
   16828:	muleq	r1, ip, r8
   1682c:	muleq	r1, ip, r8
   16830:	andeq	r6, r1, r8, asr r8
   16834:	muleq	r1, ip, r8
   16838:	andeq	r6, r1, r8, asr r8
   1683c:	muleq	r1, ip, r8
   16840:	muleq	r1, ip, r8
   16844:	muleq	r1, ip, r8
   16848:	muleq	r1, ip, r8
   1684c:	muleq	r1, ip, r8
   16850:	muleq	r1, ip, r8
   16854:	andeq	r6, r1, r8, asr r8
   16858:	mov	r1, #48	; 0x30
   1685c:	ldr	r0, [sp, #72]	; 0x48
   16860:	bl	10e48 <strchr@plt>
   16864:	cmp	r0, #0
   16868:	beq	1689c <__assert_fail@plt+0x5988>
   1686c:	ldrb	r3, [fp, #1]
   16870:	cmp	r3, #68	; 0x44
   16874:	beq	16dc8 <__assert_fail@plt+0x5eb4>
   16878:	cmp	r3, #105	; 0x69
   1687c:	beq	16a6c <__assert_fail@plt+0x5b58>
   16880:	cmp	r3, #66	; 0x42
   16884:	moveq	r3, #2
   16888:	movne	r3, #1
   1688c:	moveq	r7, #1000	; 0x3e8
   16890:	movne	r7, #1024	; 0x400
   16894:	str	r3, [sp, #4]
   16898:	b	168a8 <__assert_fail@plt+0x5994>
   1689c:	mov	r3, #1
   168a0:	mov	r7, #1024	; 0x400
   168a4:	str	r3, [sp, #4]
   168a8:	sub	r6, r6, #66	; 0x42
   168ac:	cmp	r6, #53	; 0x35
   168b0:	ldrls	pc, [pc, r6, lsl #2]
   168b4:	b	16a18 <__assert_fail@plt+0x5b04>
   168b8:	andeq	r6, r1, r0, ror sp
   168bc:	andeq	r6, r1, r8, lsl sl
   168c0:	andeq	r6, r1, r8, lsl sl
   168c4:	andeq	r6, r1, ip, ror fp
   168c8:	andeq	r6, r1, r8, lsl sl
   168cc:	muleq	r1, r0, r9
   168d0:	andeq	r6, r1, r8, lsl sl
   168d4:	andeq	r6, r1, r8, lsl sl
   168d8:	andeq	r6, r1, r8, lsl sl
   168dc:	andeq	r6, r1, r0, lsr #20
   168e0:	andeq	r6, r1, r8, lsl sl
   168e4:	andeq	r6, r1, ip, lsl sp
   168e8:	andeq	r6, r1, r8, lsl sl
   168ec:	andeq	r6, r1, r8, lsl sl
   168f0:	andeq	r6, r1, ip, ror #24
   168f4:	andeq	r6, r1, r8, lsl sl
   168f8:	andeq	r6, r1, r8, lsl sl
   168fc:	andeq	r6, r1, r8, lsl sl
   16900:	strdeq	r6, [r1], -r4
   16904:	andeq	r6, r1, r8, lsl sl
   16908:	andeq	r6, r1, r8, lsl sl
   1690c:	andeq	r6, r1, r8, lsl sl
   16910:	andeq	r6, r1, r8, lsl sl
   16914:	andeq	r6, r1, r4, lsl #22
   16918:	andeq	r6, r1, r8, lsl #21
   1691c:	andeq	r6, r1, r8, lsl sl
   16920:	andeq	r6, r1, r8, lsl sl
   16924:	andeq	r6, r1, r8, lsl sl
   16928:	andeq	r6, r1, r8, lsl sl
   1692c:	andeq	r6, r1, r8, lsl sl
   16930:	andeq	r6, r1, r8, lsl sl
   16934:	andeq	r6, r1, r8, lsl sl
   16938:	strdeq	r6, [r1], -ip
   1693c:	andeq	r6, r1, r0, lsl #20
   16940:	andeq	r6, r1, r8, lsl sl
   16944:	andeq	r6, r1, r8, lsl sl
   16948:	andeq	r6, r1, r8, lsl sl
   1694c:	muleq	r1, r0, r9
   16950:	andeq	r6, r1, r8, lsl sl
   16954:	andeq	r6, r1, r8, lsl sl
   16958:	andeq	r6, r1, r8, lsl sl
   1695c:	andeq	r6, r1, r0, lsr #20
   16960:	andeq	r6, r1, r8, lsl sl
   16964:	andeq	r6, r1, ip, lsl sp
   16968:	andeq	r6, r1, r8, lsl sl
   1696c:	andeq	r6, r1, r8, lsl sl
   16970:	andeq	r6, r1, r8, lsl sl
   16974:	andeq	r6, r1, r8, lsl sl
   16978:	andeq	r6, r1, r8, lsl sl
   1697c:	andeq	r6, r1, r8, lsl sl
   16980:	strdeq	r6, [r1], -r4
   16984:	andeq	r6, r1, r8, lsl sl
   16988:	andeq	r6, r1, r8, lsl sl
   1698c:	andeq	r6, r1, r4, ror #25
   16990:	asr	r3, r7, #31
   16994:	mov	r2, r7
   16998:	cmp	r8, #0
   1699c:	umull	r0, r1, r9, r7
   169a0:	mov	ip, #0
   169a4:	strd	r2, [sp, #8]
   169a8:	bne	16dfc <__assert_fail@plt+0x5ee8>
   169ac:	mov	r2, r0
   169b0:	mov	r3, r1
   169b4:	cmp	ip, #0
   169b8:	bne	16a44 <__assert_fail@plt+0x5b30>
   169bc:	cmp	r3, #0
   169c0:	mov	lr, ip
   169c4:	bne	16e60 <__assert_fail@plt+0x5f4c>
   169c8:	umull	r2, r3, r2, r7
   169cc:	mov	ip, r2
   169d0:	mov	r1, r3
   169d4:	subs	r0, lr, #0
   169d8:	bne	16a44 <__assert_fail@plt+0x5b30>
   169dc:	cmp	r1, #0
   169e0:	bne	16e40 <__assert_fail@plt+0x5f2c>
   169e4:	umull	r2, r3, ip, r7
   169e8:	mov	r6, r2
   169ec:	mov	r2, r3
   169f0:	cmp	r0, #0
   169f4:	mov	r9, r6
   169f8:	mov	r8, r2
   169fc:	bne	16a44 <__assert_fail@plt+0x5b30>
   16a00:	ldr	r2, [sp, #4]
   16a04:	add	r3, fp, r2
   16a08:	str	r3, [r5]
   16a0c:	ldrb	r3, [fp, r2]
   16a10:	cmp	r3, #0
   16a14:	beq	16714 <__assert_fail@plt+0x5800>
   16a18:	orr	r4, r4, #2
   16a1c:	b	16714 <__assert_fail@plt+0x5800>
   16a20:	cmp	r8, #0
   16a24:	umull	r2, r3, r9, r7
   16a28:	mov	ip, #0
   16a2c:	asr	r1, r7, #31
   16a30:	bne	16d98 <__assert_fail@plt+0x5e84>
   16a34:	mov	r9, r2
   16a38:	mov	r8, r3
   16a3c:	cmp	ip, #0
   16a40:	beq	16a00 <__assert_fail@plt+0x5aec>
   16a44:	mvn	r9, #0
   16a48:	mov	r4, #1
   16a4c:	mov	r8, r9
   16a50:	b	16a00 <__assert_fail@plt+0x5aec>
   16a54:	mov	r1, r6
   16a58:	ldr	r0, [sp, #72]	; 0x48
   16a5c:	bl	10e48 <strchr@plt>
   16a60:	cmp	r0, #0
   16a64:	bne	16788 <__assert_fail@plt+0x5874>
   16a68:	b	16a18 <__assert_fail@plt+0x5b04>
   16a6c:	ldrb	r3, [fp, #2]
   16a70:	mov	r7, #1024	; 0x400
   16a74:	cmp	r3, #66	; 0x42
   16a78:	movne	r3, #1
   16a7c:	moveq	r3, #3
   16a80:	str	r3, [sp, #4]
   16a84:	b	168a8 <__assert_fail@plt+0x5994>
   16a88:	asr	r3, r7, #31
   16a8c:	mov	r2, r7
   16a90:	mov	ip, #0
   16a94:	mov	r0, #7
   16a98:	mov	lr, ip
   16a9c:	mov	r6, r4
   16aa0:	strd	r2, [sp, #8]
   16aa4:	str	r5, [sp, #16]
   16aa8:	b	16ad4 <__assert_fail@plt+0x5bc0>
   16aac:	umull	r2, r3, r9, r7
   16ab0:	mov	r9, r2
   16ab4:	mov	r8, r3
   16ab8:	cmp	r1, #0
   16abc:	beq	16acc <__assert_fail@plt+0x5bb8>
   16ac0:	mvn	r9, #0
   16ac4:	mov	ip, #1
   16ac8:	mov	r8, r9
   16acc:	subs	r0, r0, #1
   16ad0:	beq	16dbc <__assert_fail@plt+0x5ea8>
   16ad4:	cmp	r8, #0
   16ad8:	mov	r1, #0
   16adc:	beq	16aac <__assert_fail@plt+0x5b98>
   16ae0:	umull	r4, r5, r9, r7
   16ae4:	mov	r3, lr
   16ae8:	mov	r2, r5
   16aec:	umlal	r2, r3, r8, r7
   16af0:	cmp	r3, #0
   16af4:	bne	16f1c <__assert_fail@plt+0x6008>
   16af8:	mov	r9, r4
   16afc:	mov	r8, r2
   16b00:	b	16ab8 <__assert_fail@plt+0x5ba4>
   16b04:	asr	r3, r7, #31
   16b08:	mov	r2, r7
   16b0c:	mov	r6, #0
   16b10:	mov	lr, #8
   16b14:	mov	r0, r4
   16b18:	mov	ip, r5
   16b1c:	strd	r2, [sp, #8]
   16b20:	b	16b4c <__assert_fail@plt+0x5c38>
   16b24:	umull	r2, r3, r9, r7
   16b28:	mov	r9, r2
   16b2c:	mov	r8, r3
   16b30:	cmp	r1, #0
   16b34:	beq	16b44 <__assert_fail@plt+0x5c30>
   16b38:	mvn	r9, #0
   16b3c:	mov	r6, #1
   16b40:	mov	r8, r9
   16b44:	subs	lr, lr, #1
   16b48:	beq	16d8c <__assert_fail@plt+0x5e78>
   16b4c:	cmp	r8, #0
   16b50:	mov	r1, #0
   16b54:	beq	16b24 <__assert_fail@plt+0x5c10>
   16b58:	umull	r4, r5, r9, r7
   16b5c:	mov	r3, #0
   16b60:	mov	r2, r5
   16b64:	umlal	r2, r3, r8, r7
   16b68:	cmp	r3, #0
   16b6c:	bne	16f74 <__assert_fail@plt+0x6060>
   16b70:	mov	r9, r4
   16b74:	mov	r8, r2
   16b78:	b	16b30 <__assert_fail@plt+0x5c1c>
   16b7c:	asr	r3, r7, #31
   16b80:	mov	r2, r7
   16b84:	mov	r6, #0
   16b88:	mov	lr, #6
   16b8c:	mov	r0, r4
   16b90:	mov	ip, r5
   16b94:	strd	r2, [sp, #8]
   16b98:	b	16bc4 <__assert_fail@plt+0x5cb0>
   16b9c:	umull	r2, r3, r9, r7
   16ba0:	mov	r9, r2
   16ba4:	mov	r8, r3
   16ba8:	cmp	r1, #0
   16bac:	beq	16bbc <__assert_fail@plt+0x5ca8>
   16bb0:	mvn	r9, #0
   16bb4:	mov	r6, #1
   16bb8:	mov	r8, r9
   16bbc:	subs	lr, lr, #1
   16bc0:	beq	16d8c <__assert_fail@plt+0x5e78>
   16bc4:	cmp	r8, #0
   16bc8:	mov	r1, #0
   16bcc:	beq	16b9c <__assert_fail@plt+0x5c88>
   16bd0:	umull	r4, r5, r9, r7
   16bd4:	mov	r3, #0
   16bd8:	mov	r2, r5
   16bdc:	umlal	r2, r3, r8, r7
   16be0:	cmp	r3, #0
   16be4:	bne	16f3c <__assert_fail@plt+0x6028>
   16be8:	mov	r9, r4
   16bec:	mov	r8, r2
   16bf0:	b	16ba8 <__assert_fail@plt+0x5c94>
   16bf4:	asr	r3, r7, #31
   16bf8:	mov	r2, r7
   16bfc:	mov	r6, #0
   16c00:	mov	lr, #4
   16c04:	mov	r0, r4
   16c08:	mov	ip, r5
   16c0c:	strd	r2, [sp, #8]
   16c10:	b	16c3c <__assert_fail@plt+0x5d28>
   16c14:	umull	r2, r3, r9, r7
   16c18:	mov	r9, r2
   16c1c:	mov	r8, r3
   16c20:	cmp	r1, #0
   16c24:	beq	16c34 <__assert_fail@plt+0x5d20>
   16c28:	mvn	r9, #0
   16c2c:	mov	r6, #1
   16c30:	mov	r8, r9
   16c34:	subs	lr, lr, #1
   16c38:	beq	16d8c <__assert_fail@plt+0x5e78>
   16c3c:	cmp	r8, #0
   16c40:	mov	r1, #0
   16c44:	beq	16c14 <__assert_fail@plt+0x5d00>
   16c48:	umull	r4, r5, r9, r7
   16c4c:	mov	r3, #0
   16c50:	mov	r2, r5
   16c54:	umlal	r2, r3, r8, r7
   16c58:	cmp	r3, #0
   16c5c:	bne	16f58 <__assert_fail@plt+0x6044>
   16c60:	mov	r9, r4
   16c64:	mov	r8, r2
   16c68:	b	16c20 <__assert_fail@plt+0x5d0c>
   16c6c:	asr	r3, r7, #31
   16c70:	mov	r2, r7
   16c74:	mov	r6, #0
   16c78:	mov	lr, #5
   16c7c:	mov	r0, r4
   16c80:	mov	ip, r5
   16c84:	strd	r2, [sp, #8]
   16c88:	b	16cb4 <__assert_fail@plt+0x5da0>
   16c8c:	umull	r2, r3, r9, r7
   16c90:	mov	r9, r2
   16c94:	mov	r8, r3
   16c98:	cmp	r1, #0
   16c9c:	beq	16cac <__assert_fail@plt+0x5d98>
   16ca0:	mvn	r9, #0
   16ca4:	mov	r6, #1
   16ca8:	mov	r8, r9
   16cac:	subs	lr, lr, #1
   16cb0:	beq	16d8c <__assert_fail@plt+0x5e78>
   16cb4:	cmp	r8, #0
   16cb8:	mov	r1, #0
   16cbc:	beq	16c8c <__assert_fail@plt+0x5d78>
   16cc0:	umull	r4, r5, r9, r7
   16cc4:	mov	r3, #0
   16cc8:	mov	r2, r5
   16ccc:	umlal	r2, r3, r8, r7
   16cd0:	cmp	r3, #0
   16cd4:	bne	16ec4 <__assert_fail@plt+0x5fb0>
   16cd8:	mov	r9, r4
   16cdc:	mov	r8, r2
   16ce0:	b	16c98 <__assert_fail@plt+0x5d84>
   16ce4:	lsr	r3, r8, #31
   16ce8:	adds	r9, r9, r9
   16cec:	adc	r8, r8, r8
   16cf0:	cmp	r3, #0
   16cf4:	beq	16a00 <__assert_fail@plt+0x5aec>
   16cf8:	b	16a44 <__assert_fail@plt+0x5b30>
   16cfc:	lsr	r3, r8, #23
   16d00:	lsl	r8, r8, #9
   16d04:	cmp	r3, #0
   16d08:	lsl	r3, r9, #9
   16d0c:	orr	r8, r8, r9, lsr #23
   16d10:	bne	16a44 <__assert_fail@plt+0x5b30>
   16d14:	mov	r9, r3
   16d18:	b	16a00 <__assert_fail@plt+0x5aec>
   16d1c:	asr	r3, r7, #31
   16d20:	mov	r2, r7
   16d24:	cmp	r8, #0
   16d28:	mov	r1, #0
   16d2c:	strd	r2, [sp, #8]
   16d30:	umull	r2, r3, r9, r7
   16d34:	bne	16dd8 <__assert_fail@plt+0x5ec4>
   16d38:	mov	r0, r2
   16d3c:	mov	ip, r3
   16d40:	cmp	r1, #0
   16d44:	bne	16a44 <__assert_fail@plt+0x5b30>
   16d48:	cmp	ip, #0
   16d4c:	bne	16e20 <__assert_fail@plt+0x5f0c>
   16d50:	umull	r2, r3, r0, r7
   16d54:	mov	r6, r2
   16d58:	mov	r2, r3
   16d5c:	cmp	r1, #0
   16d60:	mov	r9, r6
   16d64:	mov	r8, r2
   16d68:	beq	16a00 <__assert_fail@plt+0x5aec>
   16d6c:	b	16a44 <__assert_fail@plt+0x5b30>
   16d70:	lsr	r3, r8, #22
   16d74:	lsl	r8, r8, #10
   16d78:	cmp	r3, #0
   16d7c:	lsl	r3, r9, #10
   16d80:	orr	r8, r8, r9, lsr #22
   16d84:	beq	16d14 <__assert_fail@plt+0x5e00>
   16d88:	b	16a44 <__assert_fail@plt+0x5b30>
   16d8c:	mov	r5, ip
   16d90:	orr	r4, r0, r6
   16d94:	b	16a00 <__assert_fail@plt+0x5aec>
   16d98:	strd	r2, [sp, #8]
   16d9c:	mov	r3, ip
   16da0:	ldr	r2, [sp, #12]
   16da4:	umlal	r2, r3, r8, r7
   16da8:	cmp	r3, #0
   16dac:	bne	16ee0 <__assert_fail@plt+0x5fcc>
   16db0:	mov	r8, r2
   16db4:	ldr	r9, [sp, #8]
   16db8:	b	16a3c <__assert_fail@plt+0x5b28>
   16dbc:	orr	r4, r6, ip
   16dc0:	ldr	r5, [sp, #16]
   16dc4:	b	16a00 <__assert_fail@plt+0x5aec>
   16dc8:	mov	r3, #2
   16dcc:	mov	r7, #1000	; 0x3e8
   16dd0:	str	r3, [sp, #4]
   16dd4:	b	168a8 <__assert_fail@plt+0x5994>
   16dd8:	strd	r2, [sp, #16]
   16ddc:	mov	r3, r1
   16de0:	ldr	r2, [sp, #20]
   16de4:	umlal	r2, r3, r8, r7
   16de8:	cmp	r3, #0
   16dec:	bne	16fb0 <__assert_fail@plt+0x609c>
   16df0:	mov	ip, r2
   16df4:	ldr	r0, [sp, #16]
   16df8:	b	16d40 <__assert_fail@plt+0x5e2c>
   16dfc:	mov	r2, r1
   16e00:	mov	r3, ip
   16e04:	umlal	r2, r3, r8, r7
   16e08:	cmp	r3, #0
   16e0c:	strd	r2, [sp, #16]
   16e10:	bne	16e84 <__assert_fail@plt+0x5f70>
   16e14:	mov	r2, r0
   16e18:	ldr	r3, [sp, #16]
   16e1c:	b	169b4 <__assert_fail@plt+0x5aa0>
   16e20:	umull	r8, r9, r0, r7
   16e24:	mov	r3, r1
   16e28:	mov	r2, r9
   16e2c:	umlal	r2, r3, ip, r7
   16e30:	cmp	r3, #0
   16e34:	bne	16f90 <__assert_fail@plt+0x607c>
   16e38:	mov	r6, r8
   16e3c:	b	16d5c <__assert_fail@plt+0x5e48>
   16e40:	umull	r8, r9, ip, r7
   16e44:	mov	r3, r0
   16e48:	mov	r2, r9
   16e4c:	umlal	r2, r3, r1, r7
   16e50:	cmp	r3, #0
   16e54:	bne	16fd8 <__assert_fail@plt+0x60c4>
   16e58:	mov	r6, r8
   16e5c:	b	169f0 <__assert_fail@plt+0x5adc>
   16e60:	umull	r8, r9, r2, r7
   16e64:	mov	r1, ip
   16e68:	mov	r0, r9
   16e6c:	umlal	r0, r1, r3, r7
   16e70:	cmp	r1, #0
   16e74:	bne	16ea4 <__assert_fail@plt+0x5f90>
   16e78:	mov	ip, r8
   16e7c:	mov	r1, r0
   16e80:	b	169d4 <__assert_fail@plt+0x5ac0>
   16e84:	ldr	lr, [sp, #8]
   16e88:	mov	r2, r0
   16e8c:	mov	ip, #1
   16e90:	ldr	r3, [sp, #12]
   16e94:	mul	r3, r9, r3
   16e98:	mla	r3, lr, r8, r3
   16e9c:	add	r3, r3, r1
   16ea0:	b	169b4 <__assert_fail@plt+0x5aa0>
   16ea4:	ldr	r1, [sp, #12]
   16ea8:	mov	lr, #1
   16eac:	mov	ip, r8
   16eb0:	mul	r1, r2, r1
   16eb4:	ldr	r2, [sp, #8]
   16eb8:	mla	r1, r3, r2, r1
   16ebc:	add	r1, r1, r9
   16ec0:	b	169d4 <__assert_fail@plt+0x5ac0>
   16ec4:	ldrd	r2, [sp, #8]
   16ec8:	mov	r1, #1
   16ecc:	mul	r3, r9, r3
   16ed0:	mov	r9, r4
   16ed4:	mla	r8, r2, r8, r3
   16ed8:	add	r8, r8, r5
   16edc:	b	16c98 <__assert_fail@plt+0x5d84>
   16ee0:	mul	r3, r9, r1
   16ee4:	mov	ip, #1
   16ee8:	mla	r8, r7, r8, r3
   16eec:	ldrd	r6, [sp, #8]
   16ef0:	mov	r9, r6
   16ef4:	add	r8, r8, r7
   16ef8:	b	16a3c <__assert_fail@plt+0x5b28>
   16efc:	movw	r3, #36336	; 0x8df0
   16f00:	movt	r3, #1
   16f04:	movw	r1, #36348	; 0x8dfc
   16f08:	movt	r1, #1
   16f0c:	movw	r0, #36364	; 0x8e0c
   16f10:	movt	r0, #1
   16f14:	mov	r2, #85	; 0x55
   16f18:	bl	10f14 <__assert_fail@plt>
   16f1c:	ldr	r3, [sp, #12]
   16f20:	mov	r1, #1
   16f24:	mul	r2, r9, r3
   16f28:	ldr	r3, [sp, #8]
   16f2c:	mov	r9, r4
   16f30:	mla	r8, r3, r8, r2
   16f34:	add	r8, r8, r5
   16f38:	b	16ab8 <__assert_fail@plt+0x5ba4>
   16f3c:	ldrd	r2, [sp, #8]
   16f40:	mov	r1, #1
   16f44:	mul	r3, r9, r3
   16f48:	mov	r9, r4
   16f4c:	mla	r8, r2, r8, r3
   16f50:	add	r8, r8, r5
   16f54:	b	16ba8 <__assert_fail@plt+0x5c94>
   16f58:	ldrd	r2, [sp, #8]
   16f5c:	mov	r1, #1
   16f60:	mul	r3, r9, r3
   16f64:	mov	r9, r4
   16f68:	mla	r8, r2, r8, r3
   16f6c:	add	r8, r8, r5
   16f70:	b	16c20 <__assert_fail@plt+0x5d0c>
   16f74:	ldrd	r2, [sp, #8]
   16f78:	mov	r1, #1
   16f7c:	mul	r3, r9, r3
   16f80:	mov	r9, r4
   16f84:	mla	r8, r2, r8, r3
   16f88:	add	r8, r8, r5
   16f8c:	b	16b30 <__assert_fail@plt+0x5c1c>
   16f90:	ldr	r3, [sp, #12]
   16f94:	mov	r6, r8
   16f98:	mov	r1, #1
   16f9c:	mul	r2, r0, r3
   16fa0:	ldr	r3, [sp, #8]
   16fa4:	mla	r2, ip, r3, r2
   16fa8:	add	r2, r2, r9
   16fac:	b	16d5c <__assert_fail@plt+0x5e48>
   16fb0:	ldr	r3, [sp, #12]
   16fb4:	mov	r1, #1
   16fb8:	ldr	r2, [sp, #16]
   16fbc:	mul	ip, r9, r3
   16fc0:	ldr	r3, [sp, #8]
   16fc4:	mov	r0, r2
   16fc8:	mla	ip, r3, r8, ip
   16fcc:	ldr	r3, [sp, #20]
   16fd0:	add	ip, ip, r3
   16fd4:	b	16d40 <__assert_fail@plt+0x5e2c>
   16fd8:	ldr	r3, [sp, #12]
   16fdc:	mov	r6, r8
   16fe0:	mov	r0, #1
   16fe4:	mul	r2, ip, r3
   16fe8:	ldr	r3, [sp, #8]
   16fec:	mla	r2, r1, r3, r2
   16ff0:	add	r2, r2, r9
   16ff4:	b	169f0 <__assert_fail@plt+0x5adc>
   16ff8:	cmp	r1, #0
   16ffc:	cmpne	r0, #0
   17000:	beq	1704c <__assert_fail@plt+0x6138>
   17004:	strd	r4, [sp, #-16]!
   17008:	umull	r4, r5, r0, r1
   1700c:	str	r6, [sp, #8]
   17010:	str	lr, [sp, #12]
   17014:	adds	r3, r5, #0
   17018:	movne	r3, #1
   1701c:	cmp	r4, #0
   17020:	blt	1702c <__assert_fail@plt+0x6118>
   17024:	cmp	r3, #0
   17028:	beq	17058 <__assert_fail@plt+0x6144>
   1702c:	bl	10e54 <__errno_location@plt>
   17030:	mov	r3, #12
   17034:	ldrd	r4, [sp]
   17038:	ldr	r6, [sp, #8]
   1703c:	add	sp, sp, #12
   17040:	str	r3, [r0]
   17044:	mov	r0, #0
   17048:	pop	{pc}		; (ldr pc, [sp], #4)
   1704c:	mov	r1, #1
   17050:	mov	r0, r1
   17054:	b	10ca4 <calloc@plt>
   17058:	ldrd	r4, [sp]
   1705c:	ldr	r6, [sp, #8]
   17060:	ldr	lr, [sp, #12]
   17064:	add	sp, sp, #16
   17068:	b	10ca4 <calloc@plt>
   1706c:	cmp	r0, #0
   17070:	beq	1707c <__assert_fail@plt+0x6168>
   17074:	blt	17084 <__assert_fail@plt+0x6170>
   17078:	b	10dd0 <malloc@plt>
   1707c:	mov	r0, #1
   17080:	b	10dd0 <malloc@plt>
   17084:	str	r4, [sp, #-8]!
   17088:	str	lr, [sp, #4]
   1708c:	bl	10e54 <__errno_location@plt>
   17090:	mov	r3, #12
   17094:	ldr	r4, [sp]
   17098:	add	sp, sp, #4
   1709c:	str	r3, [r0]
   170a0:	mov	r0, #0
   170a4:	pop	{pc}		; (ldr pc, [sp], #4)
   170a8:	cmp	r0, #0
   170ac:	beq	170d4 <__assert_fail@plt+0x61c0>
   170b0:	cmp	r1, #0
   170b4:	str	r4, [sp, #-8]!
   170b8:	str	lr, [sp, #4]
   170bc:	beq	170dc <__assert_fail@plt+0x61c8>
   170c0:	blt	170f0 <__assert_fail@plt+0x61dc>
   170c4:	ldr	r4, [sp]
   170c8:	ldr	lr, [sp, #4]
   170cc:	add	sp, sp, #8
   170d0:	b	10d64 <realloc@plt>
   170d4:	mov	r0, r1
   170d8:	b	1706c <__assert_fail@plt+0x6158>
   170dc:	bl	13814 <__assert_fail@plt+0x2900>
   170e0:	ldr	r4, [sp]
   170e4:	add	sp, sp, #4
   170e8:	mov	r0, #0
   170ec:	pop	{pc}		; (ldr pc, [sp], #4)
   170f0:	bl	10e54 <__errno_location@plt>
   170f4:	mov	r3, #12
   170f8:	str	r3, [r0]
   170fc:	b	170e0 <__assert_fail@plt+0x61cc>
   17100:	strd	r4, [sp, #-16]!
   17104:	mov	r4, r0
   17108:	str	r6, [sp, #8]
   1710c:	str	lr, [sp, #12]
   17110:	bl	10dac <__fpending@plt>
   17114:	ldr	r5, [r4]
   17118:	mov	r6, r0
   1711c:	mov	r0, r4
   17120:	bl	17188 <__assert_fail@plt+0x6274>
   17124:	mov	r4, r0
   17128:	and	r5, r5, #32
   1712c:	cmp	r5, #0
   17130:	bne	17168 <__assert_fail@plt+0x6254>
   17134:	cmp	r0, #0
   17138:	beq	17154 <__assert_fail@plt+0x6240>
   1713c:	cmp	r6, #0
   17140:	bne	17180 <__assert_fail@plt+0x626c>
   17144:	bl	10e54 <__errno_location@plt>
   17148:	ldr	r4, [r0]
   1714c:	subs	r4, r4, #9
   17150:	mvnne	r4, #0
   17154:	mov	r0, r4
   17158:	ldrd	r4, [sp]
   1715c:	ldr	r6, [sp, #8]
   17160:	add	sp, sp, #12
   17164:	pop	{pc}		; (ldr pc, [sp], #4)
   17168:	cmp	r0, #0
   1716c:	bne	17180 <__assert_fail@plt+0x626c>
   17170:	bl	10e54 <__errno_location@plt>
   17174:	str	r4, [r0]
   17178:	mvn	r4, #0
   1717c:	b	17154 <__assert_fail@plt+0x6240>
   17180:	mvn	r4, #0
   17184:	b	17154 <__assert_fail@plt+0x6240>
   17188:	strd	r4, [sp, #-12]!
   1718c:	mov	r4, r0
   17190:	str	lr, [sp, #8]
   17194:	sub	sp, sp, #12
   17198:	bl	10e90 <fileno@plt>
   1719c:	cmp	r0, #0
   171a0:	mov	r0, r4
   171a4:	blt	17228 <__assert_fail@plt+0x6314>
   171a8:	bl	10de8 <__freading@plt>
   171ac:	cmp	r0, #0
   171b0:	bne	171f4 <__assert_fail@plt+0x62e0>
   171b4:	mov	r0, r4
   171b8:	bl	1723c <__assert_fail@plt+0x6328>
   171bc:	cmp	r0, #0
   171c0:	beq	17224 <__assert_fail@plt+0x6310>
   171c4:	bl	10e54 <__errno_location@plt>
   171c8:	mov	r5, r0
   171cc:	mov	r0, r4
   171d0:	ldr	r4, [r5]
   171d4:	bl	10ea8 <fclose@plt>
   171d8:	cmp	r4, #0
   171dc:	mvnne	r0, #0
   171e0:	strne	r4, [r5]
   171e4:	add	sp, sp, #12
   171e8:	ldrd	r4, [sp]
   171ec:	add	sp, sp, #8
   171f0:	pop	{pc}		; (ldr pc, [sp], #4)
   171f4:	mov	r0, r4
   171f8:	bl	10e90 <fileno@plt>
   171fc:	mov	r1, #1
   17200:	mov	r2, #0
   17204:	mov	r3, #0
   17208:	str	r1, [sp]
   1720c:	bl	10d94 <lseek64@plt>
   17210:	mvn	r3, #0
   17214:	mvn	r2, #0
   17218:	cmp	r1, r3
   1721c:	cmpeq	r0, r2
   17220:	bne	171b4 <__assert_fail@plt+0x62a0>
   17224:	mov	r0, r4
   17228:	add	sp, sp, #12
   1722c:	ldrd	r4, [sp]
   17230:	ldr	lr, [sp, #8]
   17234:	add	sp, sp, #12
   17238:	b	10ea8 <fclose@plt>
   1723c:	str	r4, [sp, #-8]!
   17240:	subs	r4, r0, #0
   17244:	str	lr, [sp, #4]
   17248:	sub	sp, sp, #8
   1724c:	beq	17268 <__assert_fail@plt+0x6354>
   17250:	bl	10de8 <__freading@plt>
   17254:	cmp	r0, #0
   17258:	beq	17268 <__assert_fail@plt+0x6354>
   1725c:	ldr	r3, [r4]
   17260:	tst	r3, #256	; 0x100
   17264:	bne	17280 <__assert_fail@plt+0x636c>
   17268:	mov	r0, r4
   1726c:	add	sp, sp, #8
   17270:	ldr	r4, [sp]
   17274:	ldr	lr, [sp, #4]
   17278:	add	sp, sp, #8
   1727c:	b	10ce0 <fflush@plt>
   17280:	mov	r1, #1
   17284:	mov	r2, #0
   17288:	mov	r3, #0
   1728c:	mov	r0, r4
   17290:	str	r1, [sp]
   17294:	bl	1729c <__assert_fail@plt+0x6388>
   17298:	b	17268 <__assert_fail@plt+0x6354>
   1729c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   172a0:	mov	r4, r0
   172a4:	ldr	ip, [r0, #4]
   172a8:	strd	r6, [sp, #8]
   172ac:	str	lr, [sp, #20]
   172b0:	ldr	lr, [r0, #8]
   172b4:	str	r8, [sp, #16]
   172b8:	sub	sp, sp, #8
   172bc:	ldr	r5, [sp, #32]
   172c0:	cmp	lr, ip
   172c4:	beq	172ec <__assert_fail@plt+0x63d8>
   172c8:	mov	r0, r4
   172cc:	str	r5, [sp, #32]
   172d0:	add	sp, sp, #8
   172d4:	ldrd	r4, [sp]
   172d8:	ldrd	r6, [sp, #8]
   172dc:	ldr	r8, [sp, #16]
   172e0:	ldr	lr, [sp, #20]
   172e4:	add	sp, sp, #24
   172e8:	b	10eb4 <fseeko64@plt>
   172ec:	ldr	ip, [r0, #16]
   172f0:	ldr	lr, [r0, #20]
   172f4:	cmp	lr, ip
   172f8:	bne	172c8 <__assert_fail@plt+0x63b4>
   172fc:	ldr	r8, [r0, #36]	; 0x24
   17300:	cmp	r8, #0
   17304:	bne	172c8 <__assert_fail@plt+0x63b4>
   17308:	mov	r6, r2
   1730c:	mov	r7, r3
   17310:	bl	10e90 <fileno@plt>
   17314:	mov	r2, r6
   17318:	mov	r3, r7
   1731c:	str	r5, [sp]
   17320:	bl	10d94 <lseek64@plt>
   17324:	mvn	r3, #0
   17328:	mvn	r2, #0
   1732c:	cmp	r1, r3
   17330:	cmpeq	r0, r2
   17334:	beq	17364 <__assert_fail@plt+0x6450>
   17338:	ldr	r3, [r4]
   1733c:	strd	r0, [r4, #80]	; 0x50
   17340:	bic	r3, r3, #16
   17344:	str	r3, [r4]
   17348:	mov	r0, r8
   1734c:	add	sp, sp, #8
   17350:	ldrd	r4, [sp]
   17354:	ldrd	r6, [sp, #8]
   17358:	ldr	r8, [sp, #16]
   1735c:	add	sp, sp, #20
   17360:	pop	{pc}		; (ldr pc, [sp], #4)
   17364:	mvn	r8, #0
   17368:	b	17348 <__assert_fail@plt+0x6434>
   1736c:	mov	r0, #14
   17370:	str	r4, [sp, #-8]!
   17374:	str	lr, [sp, #4]
   17378:	bl	10ed8 <nl_langinfo@plt>
   1737c:	cmp	r0, #0
   17380:	beq	173a4 <__assert_fail@plt+0x6490>
   17384:	ldrb	r2, [r0]
   17388:	movw	r3, #36404	; 0x8e34
   1738c:	movt	r3, #1
   17390:	ldr	r4, [sp]
   17394:	add	sp, sp, #4
   17398:	cmp	r2, #0
   1739c:	moveq	r0, r3
   173a0:	pop	{pc}		; (ldr pc, [sp], #4)
   173a4:	ldr	r4, [sp]
   173a8:	add	sp, sp, #4
   173ac:	movw	r0, #36404	; 0x8e34
   173b0:	movt	r0, #1
   173b4:	pop	{pc}		; (ldr pc, [sp], #4)
   173b8:	strd	r4, [sp, #-20]!	; 0xffffffec
   173bc:	mov	r5, r2
   173c0:	strd	r6, [sp, #8]
   173c4:	subs	r6, r0, #0
   173c8:	mov	r7, r1
   173cc:	str	lr, [sp, #16]
   173d0:	sub	sp, sp, #12
   173d4:	addeq	r6, sp, #4
   173d8:	mov	r0, r6
   173dc:	bl	10db8 <mbrtowc@plt>
   173e0:	cmp	r5, #0
   173e4:	cmnne	r0, #3
   173e8:	mov	r4, r0
   173ec:	bhi	17408 <__assert_fail@plt+0x64f4>
   173f0:	mov	r0, r4
   173f4:	add	sp, sp, #12
   173f8:	ldrd	r4, [sp]
   173fc:	ldrd	r6, [sp, #8]
   17400:	add	sp, sp, #16
   17404:	pop	{pc}		; (ldr pc, [sp], #4)
   17408:	mov	r0, #0
   1740c:	bl	17460 <__assert_fail@plt+0x654c>
   17410:	cmp	r0, #0
   17414:	bne	173f0 <__assert_fail@plt+0x64dc>
   17418:	ldrb	r3, [r7]
   1741c:	mov	r4, #1
   17420:	str	r3, [r6]
   17424:	b	173f0 <__assert_fail@plt+0x64dc>
   17428:	umull	r2, r3, r1, r2
   1742c:	cmp	r3, #0
   17430:	bne	1743c <__assert_fail@plt+0x6528>
   17434:	mov	r1, r2
   17438:	b	170a8 <__assert_fail@plt+0x6194>
   1743c:	str	r4, [sp, #-8]!
   17440:	str	lr, [sp, #4]
   17444:	bl	10e54 <__errno_location@plt>
   17448:	mov	r3, #12
   1744c:	ldr	r4, [sp]
   17450:	add	sp, sp, #4
   17454:	str	r3, [r0]
   17458:	mov	r0, #0
   1745c:	pop	{pc}		; (ldr pc, [sp], #4)
   17460:	push	{lr}		; (str lr, [sp, #-4]!)
   17464:	sub	sp, sp, #268	; 0x10c
   17468:	movw	r2, #257	; 0x101
   1746c:	add	r1, sp, #4
   17470:	bl	174b8 <__assert_fail@plt+0x65a4>
   17474:	cmp	r0, #0
   17478:	movne	r0, #0
   1747c:	bne	174b0 <__assert_fail@plt+0x659c>
   17480:	movw	r1, #34004	; 0x84d4
   17484:	movt	r1, #1
   17488:	add	r0, sp, #4
   1748c:	bl	10cbc <strcmp@plt>
   17490:	cmp	r0, #0
   17494:	beq	174b0 <__assert_fail@plt+0x659c>
   17498:	add	r0, sp, #4
   1749c:	movw	r1, #36412	; 0x8e3c
   174a0:	movt	r1, #1
   174a4:	bl	10cbc <strcmp@plt>
   174a8:	adds	r0, r0, #0
   174ac:	movne	r0, #1
   174b0:	add	sp, sp, #268	; 0x10c
   174b4:	pop	{pc}		; (ldr pc, [sp], #4)
   174b8:	strd	r4, [sp, #-16]!
   174bc:	mov	r5, r1
   174c0:	mov	r1, #0
   174c4:	mov	r4, r2
   174c8:	str	r6, [sp, #8]
   174cc:	str	lr, [sp, #12]
   174d0:	bl	10ec0 <setlocale@plt>
   174d4:	subs	r6, r0, #0
   174d8:	beq	17558 <__assert_fail@plt+0x6644>
   174dc:	bl	10e3c <strlen@plt>
   174e0:	cmp	r4, r0
   174e4:	bhi	17504 <__assert_fail@plt+0x65f0>
   174e8:	cmp	r4, #0
   174ec:	moveq	r0, #34	; 0x22
   174f0:	bne	17528 <__assert_fail@plt+0x6614>
   174f4:	ldrd	r4, [sp]
   174f8:	ldr	r6, [sp, #8]
   174fc:	add	sp, sp, #12
   17500:	pop	{pc}		; (ldr pc, [sp], #4)
   17504:	add	r2, r0, #1
   17508:	mov	r1, r6
   1750c:	mov	r0, r5
   17510:	bl	10d04 <memcpy@plt>
   17514:	ldrd	r4, [sp]
   17518:	mov	r0, #0
   1751c:	ldr	r6, [sp, #8]
   17520:	add	sp, sp, #12
   17524:	pop	{pc}		; (ldr pc, [sp], #4)
   17528:	sub	r4, r4, #1
   1752c:	mov	r1, r6
   17530:	mov	r2, r4
   17534:	mov	r0, r5
   17538:	bl	10d04 <memcpy@plt>
   1753c:	mov	r3, #0
   17540:	mov	r0, #34	; 0x22
   17544:	strb	r3, [r5, r4]
   17548:	ldrd	r4, [sp]
   1754c:	ldr	r6, [sp, #8]
   17550:	add	sp, sp, #12
   17554:	pop	{pc}		; (ldr pc, [sp], #4)
   17558:	cmp	r4, #0
   1755c:	mov	r0, #22
   17560:	strbne	r6, [r5]
   17564:	ldrd	r4, [sp]
   17568:	ldr	r6, [sp, #8]
   1756c:	add	sp, sp, #12
   17570:	pop	{pc}		; (ldr pc, [sp], #4)
   17574:	mov	r1, #0
   17578:	b	10ec0 <setlocale@plt>
   1757c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17580:	mov	r7, r0
   17584:	ldr	r6, [pc, #72]	; 175d4 <__assert_fail@plt+0x66c0>
   17588:	ldr	r5, [pc, #72]	; 175d8 <__assert_fail@plt+0x66c4>
   1758c:	add	r6, pc, r6
   17590:	add	r5, pc, r5
   17594:	sub	r6, r6, r5
   17598:	mov	r8, r1
   1759c:	mov	r9, r2
   175a0:	bl	10c84 <calloc@plt-0x20>
   175a4:	asrs	r6, r6, #2
   175a8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   175ac:	mov	r4, #0
   175b0:	add	r4, r4, #1
   175b4:	ldr	r3, [r5], #4
   175b8:	mov	r2, r9
   175bc:	mov	r1, r8
   175c0:	mov	r0, r7
   175c4:	blx	r3
   175c8:	cmp	r6, r4
   175cc:	bne	175b0 <__assert_fail@plt+0x669c>
   175d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   175d4:	andeq	r1, r1, r0, lsl #19
   175d8:	andeq	r1, r1, r8, ror r9
   175dc:	bx	lr
   175e0:	ldr	r3, [pc, #12]	; 175f4 <__assert_fail@plt+0x66e0>
   175e4:	mov	r1, #0
   175e8:	add	r3, pc, r3
   175ec:	ldr	r2, [r3]
   175f0:	b	10e6c <__cxa_atexit@plt>
   175f4:	strdeq	r1, [r1], -r8

Disassembly of section .fini:

000175f8 <.fini>:
   175f8:	push	{r3, lr}
   175fc:	pop	{r3, pc}
