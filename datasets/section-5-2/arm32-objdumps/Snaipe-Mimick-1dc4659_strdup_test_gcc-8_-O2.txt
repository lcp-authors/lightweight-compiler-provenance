
../repos/Snaipe-Mimick-1dc4659/sample/strdup/strdup_test:     file format elf32-littlearm


Disassembly of section .init:

0001115c <.init>:
   1115c:	push	{r3, lr}
   11160:	bl	112a8 <_start@@Base+0x3c>
   11164:	pop	{r3, pc}

Disassembly of section .plt:

00011168 <strstr@plt-0x14>:
   11168:	push	{lr}		; (str lr, [sp, #-4]!)
   1116c:	ldr	lr, [pc, #4]	; 11178 <strstr@plt-0x4>
   11170:	add	lr, pc, lr
   11174:	ldr	pc, [lr, #8]!
   11178:	andeq	r3, r1, r8, lsl #29

0001117c <strstr@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #77824	; 0x13000
   11184:	ldr	pc, [ip, #3720]!	; 0xe88

00011188 <strcmp@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #77824	; 0x13000
   11190:	ldr	pc, [ip, #3712]!	; 0xe80

00011194 <mprotect@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #77824	; 0x13000
   1119c:	ldr	pc, [ip, #3704]!	; 0xe78

000111a0 <free@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #77824	; 0x13000
   111a8:	ldr	pc, [ip, #3696]!	; 0xe70

000111ac <memcpy@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #77824	; 0x13000
   111b4:	ldr	pc, [ip, #3688]!	; 0xe68

000111b8 <realloc@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #77824	; 0x13000
   111c0:	ldr	pc, [ip, #3680]!	; 0xe60

000111c4 <malloc@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #77824	; 0x13000
   111cc:	ldr	pc, [ip, #3672]!	; 0xe58

000111d0 <__libc_start_main@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #77824	; 0x13000
   111d8:	ldr	pc, [ip, #3664]!	; 0xe50

000111dc <__gmon_start__@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #77824	; 0x13000
   111e4:	ldr	pc, [ip, #3656]!	; 0xe48

000111e8 <strlen@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #77824	; 0x13000
   111f0:	ldr	pc, [ip, #3648]!	; 0xe40

000111f4 <mmap@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #77824	; 0x13000
   111fc:	ldr	pc, [ip, #3640]!	; 0xe38

00011200 <strchr@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #77824	; 0x13000
   11208:	ldr	pc, [ip, #3632]!	; 0xe30

0001120c <fprintf@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #77824	; 0x13000
   11214:	ldr	pc, [ip, #3624]!	; 0xe28

00011218 <__errno_location@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #77824	; 0x13000
   11220:	ldr	pc, [ip, #3616]!	; 0xe20

00011224 <snprintf@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #77824	; 0x13000
   1122c:	ldr	pc, [ip, #3608]!	; 0xe18

00011230 <munmap@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #77824	; 0x13000
   11238:	ldr	pc, [ip, #3600]!	; 0xe10

0001123c <my_strdup@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #77824	; 0x13000
   11244:	ldr	pc, [ip, #3592]!	; 0xe08

00011248 <__tls_get_addr@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #77824	; 0x13000
   11250:	ldr	pc, [ip, #3584]!	; 0xe00

00011254 <strncmp@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #77824	; 0x13000
   1125c:	ldr	pc, [ip, #3576]!	; 0xdf8

00011260 <abort@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #77824	; 0x13000
   11268:	ldr	pc, [ip, #3568]!	; 0xdf0

Disassembly of section .text:

0001126c <_start@@Base>:
   1126c:	mov	fp, #0
   11270:	mov	lr, #0
   11274:	pop	{r1}		; (ldr r1, [sp], #4)
   11278:	mov	r2, sp
   1127c:	push	{r2}		; (str r2, [sp, #-4]!)
   11280:	push	{r0}		; (str r0, [sp, #-4]!)
   11284:	ldr	ip, [pc, #16]	; 1129c <_start@@Base+0x30>
   11288:	push	{ip}		; (str ip, [sp, #-4]!)
   1128c:	ldr	r0, [pc, #12]	; 112a0 <_start@@Base+0x34>
   11290:	ldr	r3, [pc, #12]	; 112a4 <_start@@Base+0x38>
   11294:	bl	111d0 <__libc_start_main@plt>
   11298:	bl	11260 <abort@plt>
   1129c:	andeq	r3, r1, ip, lsr #20
   112a0:	andeq	r1, r1, ip, asr #23
   112a4:	andeq	r3, r1, ip, asr #19
   112a8:	ldr	r3, [pc, #20]	; 112c4 <_start@@Base+0x58>
   112ac:	ldr	r2, [pc, #20]	; 112c8 <_start@@Base+0x5c>
   112b0:	add	r3, pc, r3
   112b4:	ldr	r2, [r3, r2]
   112b8:	cmp	r2, #0
   112bc:	bxeq	lr
   112c0:	b	111dc <__gmon_start__@plt>
   112c4:	andeq	r3, r1, r8, asr #26
   112c8:	andeq	r0, r0, ip, ror r0
   112cc:	ldr	r0, [pc, #24]	; 112ec <_start@@Base+0x80>
   112d0:	ldr	r3, [pc, #24]	; 112f0 <_start@@Base+0x84>
   112d4:	cmp	r3, r0
   112d8:	bxeq	lr
   112dc:	ldr	r3, [pc, #16]	; 112f4 <_start@@Base+0x88>
   112e0:	cmp	r3, #0
   112e4:	bxeq	lr
   112e8:	bx	r3
   112ec:	andeq	r5, r2, r8, lsr #1
   112f0:	andeq	r5, r2, r8, lsr #1
   112f4:	andeq	r0, r0, r0
   112f8:	ldr	r0, [pc, #36]	; 11324 <_start@@Base+0xb8>
   112fc:	ldr	r1, [pc, #36]	; 11328 <_start@@Base+0xbc>
   11300:	sub	r1, r1, r0
   11304:	asr	r1, r1, #2
   11308:	add	r1, r1, r1, lsr #31
   1130c:	asrs	r1, r1, #1
   11310:	bxeq	lr
   11314:	ldr	r3, [pc, #16]	; 1132c <_start@@Base+0xc0>
   11318:	cmp	r3, #0
   1131c:	bxeq	lr
   11320:	bx	r3
   11324:	andeq	r5, r2, r8, lsr #1
   11328:	andeq	r5, r2, r8, lsr #1
   1132c:	andeq	r0, r0, r0
   11330:	push	{r4, lr}
   11334:	ldr	r4, [pc, #24]	; 11354 <_start@@Base+0xe8>
   11338:	ldrb	r3, [r4]
   1133c:	cmp	r3, #0
   11340:	popne	{r4, pc}
   11344:	bl	112cc <_start@@Base+0x60>
   11348:	mov	r3, #1
   1134c:	strb	r3, [r4]
   11350:	pop	{r4, pc}
   11354:	andeq	r5, r2, r8, lsr #1
   11358:	b	112f8 <_start@@Base+0x8c>
   1135c:	str	fp, [sp, #-8]!
   11360:	str	lr, [sp, #4]
   11364:	add	fp, sp, #4
   11368:	sub	sp, sp, #96	; 0x60
   1136c:	str	r0, [fp, #-96]	; 0xffffffa0
   11370:	bl	11e6c <mmk_matcher_ctx@@Base>
   11374:	str	r0, [fp, #-24]	; 0xffffffe8
   11378:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1137c:	cmp	r3, #0
   11380:	beq	115dc <_start@@Base+0x370>
   11384:	bl	12dec <mmk_ctx@@Base>
   11388:	mov	r3, r0
   1138c:	mov	r0, r3
   11390:	bl	12960 <mmk_stub_context@@Base>
   11394:	str	r0, [fp, #-28]	; 0xffffffe4
   11398:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1139c:	ldr	r3, [r3]
   113a0:	cmp	r3, #0
   113a4:	bne	113f8 <_start@@Base+0x18c>
   113a8:	mov	r0, #44	; 0x2c
   113ac:	bl	13690 <mmk_malloc@@Base>
   113b0:	str	r0, [fp, #-32]	; 0xffffffe0
   113b4:	bl	138c8 <mmk_when_get_result@@Base>
   113b8:	mov	r2, r0
   113bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   113c0:	add	r3, r3, #8
   113c4:	ldrd	r0, [r2]
   113c8:	strd	r0, [r3]
   113cc:	ldrd	r0, [r2, #8]
   113d0:	strd	r0, [r3, #8]
   113d4:	ldr	r2, [r2, #16]
   113d8:	str	r2, [r3, #16]
   113dc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   113e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   113e4:	str	r2, [r3, #40]	; 0x28
   113e8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   113ec:	ldr	r0, [fp, #-28]	; 0xffffffe4
   113f0:	bl	1390c <mmk_when_impl@@Base>
   113f4:	b	115cc <_start@@Base+0x360>
   113f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   113fc:	ldr	r3, [r3]
   11400:	cmp	r3, #1
   11404:	bne	115cc <_start@@Base+0x360>
   11408:	mov	r3, #0
   1140c:	str	r3, [fp, #-8]
   11410:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11414:	bl	1222c <mmk_mock_params_begin@@Base>
   11418:	str	r0, [fp, #-12]
   1141c:	b	11584 <_start@@Base+0x318>
   11420:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11424:	str	r3, [fp, #-36]	; 0xffffffdc
   11428:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1142c:	ldr	r3, [r3, #8]
   11430:	cmp	r3, #0
   11434:	beq	11524 <_start@@Base+0x2b8>
   11438:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1143c:	ldr	r3, [r3, #8]
   11440:	str	r3, [fp, #-36]	; 0xffffffdc
   11444:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11448:	ldr	r3, [r3]
   1144c:	cmp	r3, #0
   11450:	beq	11548 <_start@@Base+0x2dc>
   11454:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11458:	ldr	r3, [r3]
   1145c:	cmp	r3, #0
   11460:	bge	114e4 <_start@@Base+0x278>
   11464:	ldr	r3, [fp, #-12]
   11468:	add	r3, r3, #12
   1146c:	sub	r1, fp, #96	; 0x60
   11470:	mov	r2, #4
   11474:	mov	r0, r3
   11478:	bl	13464 <mmk_memcmp@@Base>
   1147c:	str	r0, [fp, #-40]	; 0xffffffd8
   11480:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11484:	cmp	r3, #0
   11488:	bne	114a0 <_start@@Base+0x234>
   1148c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11490:	ldr	r3, [r3]
   11494:	and	r3, r3, #2
   11498:	cmp	r3, #0
   1149c:	beq	11560 <_start@@Base+0x2f4>
   114a0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   114a4:	cmp	r3, #0
   114a8:	bge	114c0 <_start@@Base+0x254>
   114ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   114b0:	ldr	r3, [r3]
   114b4:	and	r3, r3, #4
   114b8:	cmp	r3, #0
   114bc:	beq	11568 <_start@@Base+0x2fc>
   114c0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   114c4:	cmp	r3, #0
   114c8:	ble	11548 <_start@@Base+0x2dc>
   114cc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   114d0:	ldr	r3, [r3]
   114d4:	and	r3, r3, #8
   114d8:	cmp	r3, #0
   114dc:	bne	11548 <_start@@Base+0x2dc>
   114e0:	b	11574 <_start@@Base+0x308>
   114e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   114e8:	ldr	r3, [r3]
   114ec:	cmp	r3, #1
   114f0:	bne	11548 <_start@@Base+0x2dc>
   114f4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   114f8:	bl	11f2c <mmk_matcher_get_predicate@@Base>
   114fc:	str	r0, [fp, #-44]	; 0xffffffd4
   11500:	ldr	r3, [fp, #-12]
   11504:	ldr	r2, [r3, #12]
   11508:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1150c:	mov	r0, r2
   11510:	blx	r3
   11514:	mov	r3, r0
   11518:	cmp	r3, #0
   1151c:	bne	11548 <_start@@Base+0x2dc>
   11520:	b	11574 <_start@@Base+0x308>
   11524:	ldr	r3, [fp, #-12]
   11528:	add	r3, r3, #12
   1152c:	sub	r1, fp, #96	; 0x60
   11530:	mov	r2, #4
   11534:	mov	r0, r3
   11538:	bl	13464 <mmk_memcmp@@Base>
   1153c:	mov	r3, r0
   11540:	cmp	r3, #0
   11544:	bne	11570 <_start@@Base+0x304>
   11548:	ldr	r3, [fp, #-12]
   1154c:	ldr	r3, [r3]
   11550:	ldr	r2, [fp, #-8]
   11554:	add	r3, r2, r3
   11558:	str	r3, [fp, #-8]
   1155c:	b	11574 <_start@@Base+0x308>
   11560:	nop	{0}
   11564:	b	11574 <_start@@Base+0x308>
   11568:	nop	{0}
   1156c:	b	11574 <_start@@Base+0x308>
   11570:	nop	{0}
   11574:	ldr	r1, [fp, #-12]
   11578:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1157c:	bl	12280 <mmk_mock_params_next@@Base>
   11580:	str	r0, [fp, #-12]
   11584:	ldr	r3, [fp, #-12]
   11588:	cmp	r3, #0
   1158c:	bne	11420 <_start@@Base+0x1b4>
   11590:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11594:	str	r3, [fp, #-16]
   11598:	b	115b8 <_start@@Base+0x34c>
   1159c:	ldr	r3, [fp, #-16]
   115a0:	ldr	r3, [r3, #8]
   115a4:	str	r3, [fp, #-48]	; 0xffffffd0
   115a8:	ldr	r0, [fp, #-16]
   115ac:	bl	136d0 <mmk_free@@Base>
   115b0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   115b4:	str	r3, [fp, #-16]
   115b8:	ldr	r3, [fp, #-16]
   115bc:	cmp	r3, #0
   115c0:	bne	1159c <_start@@Base+0x330>
   115c4:	ldr	r0, [fp, #-8]
   115c8:	bl	12fd0 <mmk_verify_set_times@@Base>
   115cc:	ldr	r3, [pc, #652]	; 11860 <_start@@Base+0x5f4>
   115d0:	add	r3, pc, r3
   115d4:	ldr	r3, [r3]
   115d8:	b	1184c <_start@@Base+0x5e0>
   115dc:	sub	r1, fp, #88	; 0x58
   115e0:	mov	r2, #0
   115e4:	mov	r3, #0
   115e8:	strd	r2, [r1]
   115ec:	strd	r2, [r1, #8]
   115f0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   115f4:	str	r3, [fp, #-76]	; 0xffffffb4
   115f8:	sub	r3, fp, #88	; 0x58
   115fc:	str	r3, [fp, #-52]	; 0xffffffcc
   11600:	mov	r1, #16
   11604:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11608:	bl	13218 <mmk_verify_register_call@@Base>
   1160c:	bl	122f8 <mmk_mock_get_params@@Base>
   11610:	str	r0, [fp, #-20]	; 0xffffffec
   11614:	b	11834 <_start@@Base+0x5c8>
   11618:	ldr	r3, [fp, #-20]	; 0xffffffec
   1161c:	str	r3, [fp, #-56]	; 0xffffffc8
   11620:	ldr	r3, [fp, #-20]	; 0xffffffec
   11624:	ldr	r3, [r3]
   11628:	str	r3, [fp, #-60]	; 0xffffffc4
   1162c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11630:	ldr	r3, [r3, #8]
   11634:	cmp	r3, #0
   11638:	beq	11720 <_start@@Base+0x4b4>
   1163c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11640:	ldr	r3, [r3, #8]
   11644:	str	r3, [fp, #-60]	; 0xffffffc4
   11648:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1164c:	ldr	r3, [r3]
   11650:	cmp	r3, #0
   11654:	beq	11744 <_start@@Base+0x4d8>
   11658:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1165c:	ldr	r3, [r3]
   11660:	cmp	r3, #0
   11664:	bge	116e4 <_start@@Base+0x478>
   11668:	sub	r1, fp, #96	; 0x60
   1166c:	sub	r3, fp, #96	; 0x60
   11670:	mov	r2, #4
   11674:	mov	r0, r3
   11678:	bl	13464 <mmk_memcmp@@Base>
   1167c:	str	r0, [fp, #-64]	; 0xffffffc0
   11680:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11684:	cmp	r3, #0
   11688:	bne	116a0 <_start@@Base+0x434>
   1168c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11690:	ldr	r3, [r3]
   11694:	and	r3, r3, #2
   11698:	cmp	r3, #0
   1169c:	beq	1181c <_start@@Base+0x5b0>
   116a0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   116a4:	cmp	r3, #0
   116a8:	bge	116c0 <_start@@Base+0x454>
   116ac:	ldr	r3, [fp, #-60]	; 0xffffffc4
   116b0:	ldr	r3, [r3]
   116b4:	and	r3, r3, #4
   116b8:	cmp	r3, #0
   116bc:	beq	1181c <_start@@Base+0x5b0>
   116c0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   116c4:	cmp	r3, #0
   116c8:	ble	11744 <_start@@Base+0x4d8>
   116cc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   116d0:	ldr	r3, [r3]
   116d4:	and	r3, r3, #8
   116d8:	cmp	r3, #0
   116dc:	bne	11744 <_start@@Base+0x4d8>
   116e0:	b	1181c <_start@@Base+0x5b0>
   116e4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   116e8:	ldr	r3, [r3]
   116ec:	cmp	r3, #1
   116f0:	bne	11744 <_start@@Base+0x4d8>
   116f4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   116f8:	bl	11f2c <mmk_matcher_get_predicate@@Base>
   116fc:	str	r0, [fp, #-68]	; 0xffffffbc
   11700:	ldr	r2, [fp, #-96]	; 0xffffffa0
   11704:	ldr	r3, [fp, #-68]	; 0xffffffbc
   11708:	mov	r0, r2
   1170c:	blx	r3
   11710:	mov	r3, r0
   11714:	cmp	r3, #0
   11718:	bne	11744 <_start@@Base+0x4d8>
   1171c:	b	11828 <_start@@Base+0x5bc>
   11720:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11724:	add	r1, r3, #40	; 0x28
   11728:	sub	r3, fp, #96	; 0x60
   1172c:	mov	r2, #4
   11730:	mov	r0, r3
   11734:	bl	13464 <mmk_memcmp@@Base>
   11738:	mov	r3, r0
   1173c:	cmp	r3, #0
   11740:	bne	11824 <_start@@Base+0x5b8>
   11744:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11748:	ldr	r3, [r3, #12]
   1174c:	cmp	r3, #0
   11750:	beq	11768 <_start@@Base+0x4fc>
   11754:	bl	11218 <__errno_location@plt>
   11758:	mov	r2, r0
   1175c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11760:	ldr	r3, [r3, #12]
   11764:	str	r3, [r2]
   11768:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1176c:	ldr	r3, [r3, #20]
   11770:	cmp	r3, #0
   11774:	beq	117a8 <_start@@Base+0x53c>
   11778:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1177c:	ldr	r3, [r3, #16]
   11780:	cmp	r3, #0
   11784:	bne	117a8 <_start@@Base+0x53c>
   11788:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1178c:	ldr	r3, [r3, #20]
   11790:	ldr	r2, [fp, #-96]	; 0xffffffa0
   11794:	mov	r0, r2
   11798:	blx	r3
   1179c:	str	r0, [fp, #-72]	; 0xffffffb8
   117a0:	ldr	r3, [fp, #-72]	; 0xffffffb8
   117a4:	b	1184c <_start@@Base+0x5e0>
   117a8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117ac:	ldr	r3, [r3, #20]
   117b0:	cmp	r3, #0
   117b4:	beq	117ec <_start@@Base+0x580>
   117b8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117bc:	ldr	r3, [r3, #16]
   117c0:	cmp	r3, #0
   117c4:	beq	117ec <_start@@Base+0x580>
   117c8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117cc:	ldr	r3, [r3, #20]
   117d0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   117d4:	mov	r0, r2
   117d8:	blx	r3
   117dc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117e0:	ldr	r3, [r3, #16]
   117e4:	ldr	r3, [r3]
   117e8:	b	1184c <_start@@Base+0x5e0>
   117ec:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117f0:	ldr	r3, [r3, #16]
   117f4:	cmp	r3, #0
   117f8:	beq	1180c <_start@@Base+0x5a0>
   117fc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11800:	ldr	r3, [r3, #16]
   11804:	ldr	r3, [r3]
   11808:	b	1184c <_start@@Base+0x5e0>
   1180c:	ldr	r3, [pc, #80]	; 11864 <_start@@Base+0x5f8>
   11810:	add	r3, pc, r3
   11814:	ldr	r3, [r3]
   11818:	b	1184c <_start@@Base+0x5e0>
   1181c:	nop	{0}
   11820:	b	11828 <_start@@Base+0x5bc>
   11824:	nop	{0}
   11828:	ldr	r3, [fp, #-20]	; 0xffffffec
   1182c:	ldr	r3, [r3, #4]
   11830:	str	r3, [fp, #-20]	; 0xffffffec
   11834:	ldr	r3, [fp, #-20]	; 0xffffffec
   11838:	cmp	r3, #0
   1183c:	bne	11618 <_start@@Base+0x3ac>
   11840:	ldr	r3, [pc, #32]	; 11868 <_start@@Base+0x5fc>
   11844:	add	r3, pc, r3
   11848:	ldr	r3, [r3]
   1184c:	mov	r0, r3
   11850:	sub	sp, fp, #4
   11854:	ldr	fp, [sp]
   11858:	add	sp, sp, #4
   1185c:	pop	{pc}		; (ldr pc, [sp], #4)
   11860:	ldrdeq	r3, [r1], -r4
   11864:	muleq	r1, r4, r8
   11868:	andeq	r3, r1, r0, ror #16
   1186c:	str	fp, [sp, #-8]!
   11870:	str	lr, [sp, #4]
   11874:	add	fp, sp, #4
   11878:	sub	sp, sp, #8
   1187c:	str	r0, [fp, #-8]
   11880:	ldr	r3, [pc, #36]	; 118ac <_start@@Base+0x640>
   11884:	add	r3, pc, r3
   11888:	mov	r1, r3
   1188c:	ldr	r0, [fp, #-8]
   11890:	bl	11f34 <mmk_mock_create_internal@@Base>
   11894:	mov	r3, r0
   11898:	mov	r0, r3
   1189c:	sub	sp, fp, #4
   118a0:	ldr	fp, [sp]
   118a4:	add	sp, sp, #4
   118a8:	pop	{pc}		; (ldr pc, [sp], #4)
   118ac:			; <UNDEFINED> instruction: 0xfffffad0

000118b0 <test_simple_case@@Base>:
   118b0:	str	r4, [sp, #-12]!
   118b4:	str	fp, [sp, #4]
   118b8:	str	lr, [sp, #8]
   118bc:	add	fp, sp, #8
   118c0:	sub	sp, sp, #76	; 0x4c
   118c4:	ldr	r4, [pc, #408]	; 11a64 <test_simple_case@@Base+0x1b4>
   118c8:	add	r4, pc, r4
   118cc:	ldr	r3, [pc, #404]	; 11a68 <test_simple_case@@Base+0x1b8>
   118d0:	add	r3, pc, r3
   118d4:	mov	r0, r3
   118d8:	bl	1186c <_start@@Base+0x600>
   118dc:	mov	r0, #0
   118e0:	bl	11de0 <mmk_matcher_init@@Base>
   118e4:	sub	r1, fp, #68	; 0x44
   118e8:	mov	r2, #0
   118ec:	mov	r3, #0
   118f0:	strd	r2, [r1]
   118f4:	strd	r2, [r1, #8]
   118f8:	mov	r3, r2
   118fc:	str	r3, [r1, #16]
   11900:	sub	r3, fp, #76	; 0x4c
   11904:	str	r3, [fp, #-48]	; 0xffffffd0
   11908:	sub	r3, fp, #48	; 0x30
   1190c:	str	r3, [fp, #-60]	; 0xffffffc4
   11910:	sub	r3, fp, #68	; 0x44
   11914:	mov	r0, r3
   11918:	bl	13878 <mmk_when_init@@Base>
   1191c:	mov	r0, #6
   11920:	bl	111c4 <malloc@plt>
   11924:	bl	11e38 <mmk_matcher_term@@Base>
   11928:	ldr	r3, [pc, #316]	; 11a6c <test_simple_case@@Base+0x1bc>
   1192c:	add	r3, pc, r3
   11930:	mov	r0, r3
   11934:	bl	1123c <my_strdup@plt>
   11938:	str	r0, [fp, #-16]
   1193c:	mov	r0, #1
   11940:	bl	11de0 <mmk_matcher_init@@Base>
   11944:	mov	r1, #0
   11948:	mov	r0, #-2147483638	; 0x8000000a
   1194c:	bl	11e9c <mmk_matcher_add@@Base>
   11950:	mov	r0, #6
   11954:	bl	111c4 <malloc@plt>
   11958:	bl	11e38 <mmk_matcher_term@@Base>
   1195c:	sub	r1, fp, #44	; 0x2c
   11960:	mov	r2, #0
   11964:	mov	r3, #0
   11968:	strd	r2, [r1]
   1196c:	strd	r2, [r1, #8]
   11970:	strd	r2, [r1, #16]
   11974:	mov	r3, #1
   11978:	str	r3, [fp, #-44]	; 0xffffffd4
   1197c:	mov	r3, #1
   11980:	str	r3, [fp, #-28]	; 0xffffffe4
   11984:	sub	r3, fp, #44	; 0x2c
   11988:	mov	r0, r3
   1198c:	bl	13020 <mmk_verify_times@@Base>
   11990:	str	r0, [fp, #-20]	; 0xffffffec
   11994:	ldr	r3, [fp, #-20]	; 0xffffffec
   11998:	cmp	r3, #0
   1199c:	bne	119d4 <test_simple_case@@Base+0x124>
   119a0:	ldr	r3, [pc, #200]	; 11a70 <test_simple_case@@Base+0x1c0>
   119a4:	ldr	r3, [r4, r3]
   119a8:	ldr	r0, [r3]
   119ac:	ldr	r3, [pc, #192]	; 11a74 <test_simple_case@@Base+0x1c4>
   119b0:	add	r3, pc, r3
   119b4:	str	r3, [sp]
   119b8:	mov	r3, #23
   119bc:	ldr	r2, [pc, #180]	; 11a78 <test_simple_case@@Base+0x1c8>
   119c0:	add	r2, pc, r2
   119c4:	ldr	r1, [pc, #176]	; 11a7c <test_simple_case@@Base+0x1cc>
   119c8:	add	r1, pc, r1
   119cc:	bl	1120c <fprintf@plt>
   119d0:	bl	11260 <abort@plt>
   119d4:	sub	r3, fp, #76	; 0x4c
   119d8:	ldr	r2, [fp, #-16]
   119dc:	cmp	r2, r3
   119e0:	bne	11a08 <test_simple_case@@Base+0x158>
   119e4:	sub	r3, fp, #76	; 0x4c
   119e8:	mov	r1, r3
   119ec:	ldr	r3, [pc, #140]	; 11a80 <test_simple_case@@Base+0x1d0>
   119f0:	add	r3, pc, r3
   119f4:	mov	r0, r3
   119f8:	bl	11188 <strcmp@plt>
   119fc:	mov	r3, r0
   11a00:	cmp	r3, #0
   11a04:	beq	11a3c <test_simple_case@@Base+0x18c>
   11a08:	ldr	r3, [pc, #96]	; 11a70 <test_simple_case@@Base+0x1c0>
   11a0c:	ldr	r3, [r4, r3]
   11a10:	ldr	r0, [r3]
   11a14:	ldr	r3, [pc, #104]	; 11a84 <test_simple_case@@Base+0x1d4>
   11a18:	add	r3, pc, r3
   11a1c:	str	r3, [sp]
   11a20:	mov	r3, #24
   11a24:	ldr	r2, [pc, #92]	; 11a88 <test_simple_case@@Base+0x1d8>
   11a28:	add	r2, pc, r2
   11a2c:	ldr	r1, [pc, #88]	; 11a8c <test_simple_case@@Base+0x1dc>
   11a30:	add	r1, pc, r1
   11a34:	bl	1120c <fprintf@plt>
   11a38:	bl	11260 <abort@plt>
   11a3c:	ldr	r3, [pc, #76]	; 11a90 <test_simple_case@@Base+0x1e0>
   11a40:	ldr	r3, [r4, r3]
   11a44:	mov	r0, r3
   11a48:	bl	11d88 <mmk_reset@@Base>
   11a4c:	nop	{0}
   11a50:	sub	sp, fp, #8
   11a54:	ldr	r4, [sp]
   11a58:	ldr	fp, [sp, #4]
   11a5c:	add	sp, sp, #8
   11a60:	pop	{pc}		; (ldr pc, [sp], #4)
   11a64:	andeq	r3, r1, r0, lsr r7
   11a68:	andeq	r2, r0, r4, ror #2
   11a6c:	andeq	r2, r0, ip, lsl r1
   11a70:	andeq	r0, r0, r8, rrx
   11a74:	andeq	r2, r0, ip, lsl r1
   11a78:	muleq	r0, r0, r0
   11a7c:	andeq	r2, r0, r4, ror #1
   11a80:	andeq	r3, r1, r4, lsr #13
   11a84:	strheq	r2, [r0], -ip
   11a88:	andeq	r2, r0, r8, lsr #32
   11a8c:	andeq	r2, r0, ip, ror r0
   11a90:	andeq	r0, r0, r8, ror r0

00011a94 <test_error_case@@Base>:
   11a94:	str	r4, [sp, #-12]!
   11a98:	str	fp, [sp, #4]
   11a9c:	str	lr, [sp, #8]
   11aa0:	add	fp, sp, #8
   11aa4:	sub	sp, sp, #44	; 0x2c
   11aa8:	ldr	r4, [pc, #256]	; 11bb0 <test_error_case@@Base+0x11c>
   11aac:	add	r4, pc, r4
   11ab0:	ldr	r3, [pc, #252]	; 11bb4 <test_error_case@@Base+0x120>
   11ab4:	add	r3, pc, r3
   11ab8:	mov	r0, r3
   11abc:	bl	1186c <_start@@Base+0x600>
   11ac0:	str	r0, [fp, #-16]
   11ac4:	mov	r0, #0
   11ac8:	bl	11de0 <mmk_matcher_init@@Base>
   11acc:	sub	r1, fp, #44	; 0x2c
   11ad0:	mov	r2, #0
   11ad4:	mov	r3, #0
   11ad8:	strd	r2, [r1]
   11adc:	strd	r2, [r1, #8]
   11ae0:	mov	r3, r2
   11ae4:	str	r3, [r1, #16]
   11ae8:	mov	r3, #12
   11aec:	str	r3, [fp, #-40]	; 0xffffffd8
   11af0:	mov	r3, #0
   11af4:	str	r3, [fp, #-24]	; 0xffffffe8
   11af8:	sub	r3, fp, #24
   11afc:	str	r3, [fp, #-36]	; 0xffffffdc
   11b00:	sub	r3, fp, #44	; 0x2c
   11b04:	mov	r0, r3
   11b08:	bl	13878 <mmk_when_init@@Base>
   11b0c:	mov	r1, #1
   11b10:	mov	r0, #0
   11b14:	bl	11e9c <mmk_matcher_add@@Base>
   11b18:	ldr	r3, [fp, #-16]
   11b1c:	mov	r0, #0
   11b20:	blx	r3
   11b24:	bl	11e38 <mmk_matcher_term@@Base>
   11b28:	ldr	r3, [pc, #136]	; 11bb8 <test_error_case@@Base+0x124>
   11b2c:	add	r3, pc, r3
   11b30:	mov	r0, r3
   11b34:	bl	1123c <my_strdup@plt>
   11b38:	str	r0, [fp, #-20]	; 0xffffffec
   11b3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11b40:	cmp	r3, #0
   11b44:	bne	11b5c <test_error_case@@Base+0xc8>
   11b48:	bl	11218 <__errno_location@plt>
   11b4c:	mov	r3, r0
   11b50:	ldr	r3, [r3]
   11b54:	cmp	r3, #12
   11b58:	beq	11b90 <test_error_case@@Base+0xfc>
   11b5c:	ldr	r3, [pc, #88]	; 11bbc <test_error_case@@Base+0x128>
   11b60:	ldr	r3, [r4, r3]
   11b64:	ldr	r0, [r3]
   11b68:	ldr	r3, [pc, #80]	; 11bc0 <test_error_case@@Base+0x12c>
   11b6c:	add	r3, pc, r3
   11b70:	str	r3, [sp]
   11b74:	mov	r3, #39	; 0x27
   11b78:	ldr	r2, [pc, #68]	; 11bc4 <test_error_case@@Base+0x130>
   11b7c:	add	r2, pc, r2
   11b80:	ldr	r1, [pc, #64]	; 11bc8 <test_error_case@@Base+0x134>
   11b84:	add	r1, pc, r1
   11b88:	bl	1120c <fprintf@plt>
   11b8c:	bl	11260 <abort@plt>
   11b90:	ldr	r0, [fp, #-16]
   11b94:	bl	11d88 <mmk_reset@@Base>
   11b98:	nop	{0}
   11b9c:	sub	sp, fp, #8
   11ba0:	ldr	r4, [sp]
   11ba4:	ldr	fp, [sp, #4]
   11ba8:	add	sp, sp, #8
   11bac:	pop	{pc}		; (ldr pc, [sp], #4)
   11bb0:	andeq	r3, r1, ip, asr #10
   11bb4:	andeq	r1, r0, r0, lsl #31
   11bb8:	andeq	r1, r0, r8, asr #31
   11bbc:	andeq	r0, r0, r8, rrx
   11bc0:	andeq	r1, r0, ip, lsl #31
   11bc4:	ldrdeq	r1, [r0], -r4
   11bc8:	andeq	r1, r0, r8, lsr #30

00011bcc <main@@Base>:
   11bcc:	str	fp, [sp, #-8]!
   11bd0:	str	lr, [sp, #4]
   11bd4:	add	fp, sp, #4
   11bd8:	bl	118b0 <test_simple_case@@Base>
   11bdc:	bl	11a94 <test_error_case@@Base>
   11be0:	mov	r3, #0
   11be4:	mov	r0, r3
   11be8:	sub	sp, fp, #4
   11bec:	ldr	fp, [sp]
   11bf0:	add	sp, sp, #4
   11bf4:	pop	{pc}		; (ldr pc, [sp], #4)

00011bf8 <mmk_init@@Base>:
   11bf8:	str	r4, [sp, #-12]!
   11bfc:	str	fp, [sp, #4]
   11c00:	str	lr, [sp, #8]
   11c04:	add	fp, sp, #8
   11c08:	sub	sp, sp, #12
   11c0c:	ldr	r4, [pc, #176]	; 11cc4 <mmk_init@@Base+0xcc>
   11c10:	add	r4, pc, r4
   11c14:	ldr	r3, [pc, #172]	; 11cc8 <mmk_init@@Base+0xd0>
   11c18:	add	r3, pc, r3
   11c1c:	ldr	r3, [r3]
   11c20:	cmp	r3, #0
   11c24:	bne	11cac <mmk_init@@Base+0xb4>
   11c28:	bl	12558 <plt_init_ctx@@Base>
   11c2c:	mov	r2, r0
   11c30:	ldr	r3, [pc, #148]	; 11ccc <mmk_init@@Base+0xd4>
   11c34:	add	r3, pc, r3
   11c38:	str	r2, [r3, #4]
   11c3c:	ldr	r3, [pc, #140]	; 11cd0 <mmk_init@@Base+0xd8>
   11c40:	add	r3, pc, r3
   11c44:	ldr	r3, [r3, #4]
   11c48:	cmn	r3, #1
   11c4c:	bne	11c84 <mmk_init@@Base+0x8c>
   11c50:	ldr	r3, [pc, #124]	; 11cd4 <mmk_init@@Base+0xdc>
   11c54:	ldr	r3, [r4, r3]
   11c58:	ldr	r0, [r3]
   11c5c:	ldr	r3, [pc, #116]	; 11cd8 <mmk_init@@Base+0xe0>
   11c60:	add	r3, pc, r3
   11c64:	str	r3, [sp]
   11c68:	mov	r3, #45	; 0x2d
   11c6c:	ldr	r2, [pc, #104]	; 11cdc <mmk_init@@Base+0xe4>
   11c70:	add	r2, pc, r2
   11c74:	ldr	r1, [pc, #100]	; 11ce0 <mmk_init@@Base+0xe8>
   11c78:	add	r1, pc, r1
   11c7c:	bl	1120c <fprintf@plt>
   11c80:	bl	11260 <abort@plt>
   11c84:	ldr	r3, [pc, #88]	; 11ce4 <mmk_init@@Base+0xec>
   11c88:	add	r3, pc, r3
   11c8c:	ldr	r3, [r3, #4]
   11c90:	mov	r0, r3
   11c94:	bl	136f0 <mmk_init_vital_functions@@Base>
   11c98:	ldr	r3, [pc, #72]	; 11ce8 <mmk_init@@Base+0xf0>
   11c9c:	add	r3, pc, r3
   11ca0:	mov	r2, #1
   11ca4:	str	r2, [r3]
   11ca8:	b	11cb0 <mmk_init@@Base+0xb8>
   11cac:	nop	{0}
   11cb0:	sub	sp, fp, #8
   11cb4:	ldr	r4, [sp]
   11cb8:	ldr	fp, [sp, #4]
   11cbc:	add	sp, sp, #8
   11cc0:	pop	{pc}		; (ldr pc, [sp], #4)
   11cc4:	andeq	r3, r1, r8, ror #7
   11cc8:	muleq	r1, r0, r4
   11ccc:	andeq	r3, r1, r4, ror r4
   11cd0:	andeq	r3, r1, r8, ror #8
   11cd4:	andeq	r0, r0, r8, rrx
   11cd8:	andeq	r1, r0, r8, lsr #30
   11cdc:	andeq	r1, r0, r8, lsr #29
   11ce0:	strdeq	r1, [r0], -r0
   11ce4:	andeq	r3, r1, r0, lsr #8
   11ce8:	andeq	r3, r1, ip, lsl #8

00011cec <mmk_plt_ctx@@Base>:
   11cec:	str	fp, [sp, #-8]!
   11cf0:	str	lr, [sp, #4]
   11cf4:	add	fp, sp, #4
   11cf8:	sub	sp, sp, #8
   11cfc:	ldr	r2, [pc, #104]	; 11d6c <mmk_plt_ctx@@Base+0x80>
   11d00:	add	r2, pc, r2
   11d04:	ldr	r3, [pc, #100]	; 11d70 <mmk_plt_ctx@@Base+0x84>
   11d08:	add	r3, pc, r3
   11d0c:	ldr	r3, [r3]
   11d10:	cmp	r3, #0
   11d14:	bne	11d4c <mmk_plt_ctx@@Base+0x60>
   11d18:	ldr	r3, [pc, #84]	; 11d74 <mmk_plt_ctx@@Base+0x88>
   11d1c:	ldr	r3, [r2, r3]
   11d20:	ldr	r0, [r3]
   11d24:	ldr	r3, [pc, #76]	; 11d78 <mmk_plt_ctx@@Base+0x8c>
   11d28:	add	r3, pc, r3
   11d2c:	str	r3, [sp]
   11d30:	mov	r3, #54	; 0x36
   11d34:	ldr	r2, [pc, #64]	; 11d7c <mmk_plt_ctx@@Base+0x90>
   11d38:	add	r2, pc, r2
   11d3c:	ldr	r1, [pc, #60]	; 11d80 <mmk_plt_ctx@@Base+0x94>
   11d40:	add	r1, pc, r1
   11d44:	bl	1120c <fprintf@plt>
   11d48:	bl	11260 <abort@plt>
   11d4c:	ldr	r3, [pc, #48]	; 11d84 <mmk_plt_ctx@@Base+0x98>
   11d50:	add	r3, pc, r3
   11d54:	ldr	r3, [r3, #4]
   11d58:	mov	r0, r3
   11d5c:	sub	sp, fp, #4
   11d60:	ldr	fp, [sp]
   11d64:	add	sp, sp, #4
   11d68:	pop	{pc}		; (ldr pc, [sp], #4)
   11d6c:	strdeq	r3, [r1], -r8
   11d70:	andeq	r3, r1, r0, lsr #7
   11d74:	andeq	r0, r0, r8, rrx
   11d78:	andeq	r1, r0, r8, ror lr
   11d7c:	andeq	r1, r0, r0, ror #27
   11d80:	andeq	r1, r0, r8, lsr #28
   11d84:	andeq	r3, r1, r8, asr r3

00011d88 <mmk_reset@@Base>:
   11d88:	str	fp, [sp, #-8]!
   11d8c:	str	lr, [sp, #4]
   11d90:	add	fp, sp, #4
   11d94:	sub	sp, sp, #16
   11d98:	str	r0, [fp, #-16]
   11d9c:	ldr	r3, [fp, #-16]
   11da0:	cmp	r3, #0
   11da4:	beq	11dcc <mmk_reset@@Base+0x44>
   11da8:	ldr	r0, [fp, #-16]
   11dac:	bl	12d1c <mmk_ask_ctx@@Base>
   11db0:	str	r0, [fp, #-8]
   11db4:	ldr	r0, [fp, #-8]
   11db8:	bl	12960 <mmk_stub_context@@Base>
   11dbc:	str	r0, [fp, #-12]
   11dc0:	ldr	r0, [fp, #-12]
   11dc4:	bl	12144 <mmk_mock_destroy_internal@@Base>
   11dc8:	b	11dd0 <mmk_reset@@Base+0x48>
   11dcc:	nop	{0}
   11dd0:	sub	sp, fp, #4
   11dd4:	ldr	fp, [sp]
   11dd8:	add	sp, sp, #4
   11ddc:	pop	{pc}		; (ldr pc, [sp], #4)

00011de0 <mmk_matcher_init@@Base>:
   11de0:	strd	r4, [sp, #-16]!
   11de4:	mov	r5, r0
   11de8:	mov	r0, #12
   11dec:	str	r6, [sp, #8]
   11df0:	str	lr, [sp, #12]
   11df4:	bl	13690 <mmk_malloc@@Base>
   11df8:	mov	r4, r0
   11dfc:	ldr	r0, [pc, #44]	; 11e30 <mmk_matcher_init@@Base+0x50>
   11e00:	mov	r3, #0
   11e04:	str	r5, [r4]
   11e08:	str	r3, [r4, #4]
   11e0c:	str	r3, [r4, #8]
   11e10:	add	r0, pc, r0
   11e14:	bl	11248 <__tls_get_addr@plt>
   11e18:	ldr	r3, [pc, #20]	; 11e34 <mmk_matcher_init@@Base+0x54>
   11e1c:	ldr	r6, [sp, #8]
   11e20:	str	r4, [r3, r0]
   11e24:	ldrd	r4, [sp]
   11e28:	add	sp, sp, #12
   11e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   11e30:	andeq	r3, r1, r4, asr #4
   11e34:	andeq	r0, r0, r0

00011e38 <mmk_matcher_term@@Base>:
   11e38:	ldr	r0, [pc, #36]	; 11e64 <mmk_matcher_term@@Base+0x2c>
   11e3c:	str	r4, [sp, #-8]!
   11e40:	str	lr, [sp, #4]
   11e44:	add	r0, pc, r0
   11e48:	bl	11248 <__tls_get_addr@plt>
   11e4c:	ldr	r3, [pc, #20]	; 11e68 <mmk_matcher_term@@Base+0x30>
   11e50:	mov	r2, #0
   11e54:	ldr	r4, [sp]
   11e58:	add	sp, sp, #4
   11e5c:	str	r2, [r0, r3]
   11e60:	pop	{pc}		; (ldr pc, [sp], #4)
   11e64:	andeq	r3, r1, r0, lsl r2
   11e68:	andeq	r0, r0, r0

00011e6c <mmk_matcher_ctx@@Base>:
   11e6c:	ldr	r0, [pc, #32]	; 11e94 <mmk_matcher_ctx@@Base+0x28>
   11e70:	str	r4, [sp, #-8]!
   11e74:	str	lr, [sp, #4]
   11e78:	add	r0, pc, r0
   11e7c:	bl	11248 <__tls_get_addr@plt>
   11e80:	ldr	r3, [pc, #16]	; 11e98 <mmk_matcher_ctx@@Base+0x2c>
   11e84:	ldr	r4, [sp]
   11e88:	add	sp, sp, #4
   11e8c:	ldr	r0, [r3, r0]
   11e90:	pop	{pc}		; (ldr pc, [sp], #4)
   11e94:	ldrdeq	r3, [r1], -ip
   11e98:	andeq	r0, r0, r0

00011e9c <mmk_matcher_add@@Base>:
   11e9c:	strd	r4, [sp, #-16]!
   11ea0:	mov	r5, r1
   11ea4:	str	r6, [sp, #8]
   11ea8:	mov	r6, r0
   11eac:	mov	r0, #12
   11eb0:	str	lr, [sp, #12]
   11eb4:	bl	13690 <mmk_malloc@@Base>
   11eb8:	mov	r4, r0
   11ebc:	ldr	r0, [pc, #96]	; 11f24 <mmk_matcher_add@@Base+0x88>
   11ec0:	add	r0, pc, r0
   11ec4:	bl	11248 <__tls_get_addr@plt>
   11ec8:	ldr	r3, [pc, #88]	; 11f28 <mmk_matcher_add@@Base+0x8c>
   11ecc:	mov	r2, #0
   11ed0:	str	r6, [r4]
   11ed4:	str	r5, [r4, #4]
   11ed8:	str	r2, [r4, #8]
   11edc:	ldr	r2, [r3, r0]
   11ee0:	ldr	r3, [r2, #8]
   11ee4:	cmp	r3, #0
   11ee8:	beq	11ef8 <mmk_matcher_add@@Base+0x5c>
   11eec:	ldr	r1, [r3, #4]
   11ef0:	cmp	r5, r1
   11ef4:	bhi	11f10 <mmk_matcher_add@@Base+0x74>
   11ef8:	ldr	r6, [sp, #8]
   11efc:	str	r3, [r4, #8]
   11f00:	str	r4, [r2, #8]
   11f04:	ldrd	r4, [sp]
   11f08:	add	sp, sp, #12
   11f0c:	pop	{pc}		; (ldr pc, [sp], #4)
   11f10:	mov	r2, r3
   11f14:	ldr	r3, [r3, #8]
   11f18:	cmp	r3, #0
   11f1c:	bne	11eec <mmk_matcher_add@@Base+0x50>
   11f20:	b	11ef8 <mmk_matcher_add@@Base+0x5c>
   11f24:	muleq	r1, r4, r1
   11f28:	andeq	r0, r0, r0

00011f2c <mmk_matcher_get_predicate@@Base>:
   11f2c:	add	r0, r0, #12
   11f30:	bx	lr

00011f34 <mmk_mock_create_internal@@Base>:
   11f34:	str	r4, [sp, #-12]!
   11f38:	str	fp, [sp, #4]
   11f3c:	str	lr, [sp, #8]
   11f40:	add	fp, sp, #8
   11f44:	sub	sp, sp, #44	; 0x2c
   11f48:	str	r0, [fp, #-40]	; 0xffffffd8
   11f4c:	str	r1, [fp, #-44]	; 0xffffffd4
   11f50:	ldr	r4, [pc, #464]	; 12128 <mmk_mock_create_internal@@Base+0x1f4>
   11f54:	add	r4, pc, r4
   11f58:	bl	11bf8 <mmk_init@@Base>
   11f5c:	mov	r0, #20
   11f60:	bl	13690 <mmk_malloc@@Base>
   11f64:	str	r0, [fp, #-20]	; 0xffffffec
   11f68:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f6c:	cmp	r3, #0
   11f70:	bne	11fa8 <mmk_mock_create_internal@@Base+0x74>
   11f74:	ldr	r3, [pc, #432]	; 1212c <mmk_mock_create_internal@@Base+0x1f8>
   11f78:	ldr	r3, [r4, r3]
   11f7c:	ldr	r0, [r3]
   11f80:	ldr	r3, [pc, #424]	; 12130 <mmk_mock_create_internal@@Base+0x1fc>
   11f84:	add	r3, pc, r3
   11f88:	str	r3, [sp]
   11f8c:	mov	r3, #36	; 0x24
   11f90:	ldr	r2, [pc, #412]	; 12134 <mmk_mock_create_internal@@Base+0x200>
   11f94:	add	r2, pc, r2
   11f98:	ldr	r1, [pc, #408]	; 12138 <mmk_mock_create_internal@@Base+0x204>
   11f9c:	add	r1, pc, r1
   11fa0:	bl	1120c <fprintf@plt>
   11fa4:	bl	11260 <abort@plt>
   11fa8:	ldr	r3, [fp, #-20]	; 0xffffffec
   11fac:	mov	r1, r3
   11fb0:	mov	r2, #0
   11fb4:	mov	r3, #0
   11fb8:	strd	r2, [r1]
   11fbc:	strd	r2, [r1, #8]
   11fc0:	mov	r3, r2
   11fc4:	str	r3, [r1, #16]
   11fc8:	mov	r1, #64	; 0x40
   11fcc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11fd0:	bl	13594 <mmk_strchr@@Base>
   11fd4:	str	r0, [fp, #-24]	; 0xffffffe8
   11fd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11fdc:	cmp	r3, #0
   11fe0:	bne	11ff4 <mmk_mock_create_internal@@Base+0xc0>
   11fe4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11fe8:	bl	13640 <mmk_strlen@@Base>
   11fec:	str	r0, [fp, #-16]
   11ff0:	b	12004 <mmk_mock_create_internal@@Base+0xd0>
   11ff4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11ff8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11ffc:	sub	r3, r2, r3
   12000:	str	r3, [fp, #-16]
   12004:	ldr	r3, [fp, #-16]
   12008:	add	r3, r3, #1
   1200c:	mov	r0, r3
   12010:	bl	13690 <mmk_malloc@@Base>
   12014:	str	r0, [fp, #-28]	; 0xffffffe4
   12018:	ldr	r2, [fp, #-16]
   1201c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12020:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12024:	bl	13604 <mmk_strncpy@@Base>
   12028:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1202c:	ldr	r3, [fp, #-16]
   12030:	add	r3, r2, r3
   12034:	mov	r2, #0
   12038:	strb	r2, [r3]
   1203c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12040:	cmp	r3, #0
   12044:	beq	12070 <mmk_mock_create_internal@@Base+0x13c>
   12048:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1204c:	add	r3, r3, #1
   12050:	mov	r2, #4
   12054:	ldr	r1, [pc, #224]	; 1213c <mmk_mock_create_internal@@Base+0x208>
   12058:	add	r1, pc, r1
   1205c:	mov	r0, r3
   12060:	bl	134e0 <mmk_strneq@@Base>
   12064:	mov	r3, r0
   12068:	cmp	r3, #0
   1206c:	beq	12078 <mmk_mock_create_internal@@Base+0x144>
   12070:	mov	r3, #1
   12074:	b	1207c <mmk_mock_create_internal@@Base+0x148>
   12078:	mov	r3, #0
   1207c:	str	r3, [fp, #-32]	; 0xffffffe0
   12080:	ldr	r2, [fp, #-20]	; 0xffffffec
   12084:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12088:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1208c:	bl	12be8 <mmk_stub_create@@Base>
   12090:	mov	r2, r0
   12094:	ldr	r3, [fp, #-20]	; 0xffffffec
   12098:	str	r2, [r3, #4]
   1209c:	ldr	r3, [fp, #-20]	; 0xffffffec
   120a0:	ldr	r3, [r3, #4]
   120a4:	cmp	r3, #0
   120a8:	bne	120d0 <mmk_mock_create_internal@@Base+0x19c>
   120ac:	ldr	r3, [pc, #120]	; 1212c <mmk_mock_create_internal@@Base+0x1f8>
   120b0:	ldr	r3, [r4, r3]
   120b4:	ldr	r3, [r3]
   120b8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   120bc:	ldr	r1, [pc, #124]	; 12140 <mmk_mock_create_internal@@Base+0x20c>
   120c0:	add	r1, pc, r1
   120c4:	mov	r0, r3
   120c8:	bl	1120c <fprintf@plt>
   120cc:	bl	11260 <abort@plt>
   120d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   120d4:	cmp	r3, #0
   120d8:	bne	120fc <mmk_mock_create_internal@@Base+0x1c8>
   120dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   120e0:	ldr	r4, [r3, #4]
   120e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   120e8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   120ec:	ldr	r0, [fp, #-28]	; 0xffffffe4
   120f0:	bl	12be8 <mmk_stub_create@@Base>
   120f4:	mov	r3, r0
   120f8:	str	r3, [r4, #36]	; 0x24
   120fc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12100:	bl	136d0 <mmk_free@@Base>
   12104:	ldr	r3, [fp, #-20]	; 0xffffffec
   12108:	ldr	r3, [r3, #4]
   1210c:	ldr	r3, [r3, #32]
   12110:	mov	r0, r3
   12114:	sub	sp, fp, #8
   12118:	ldr	r4, [sp]
   1211c:	ldr	fp, [sp, #4]
   12120:	add	sp, sp, #8
   12124:	pop	{pc}		; (ldr pc, [sp], #4)
   12128:	andeq	r3, r1, r4, lsr #1
   1212c:	andeq	r0, r0, r8, rrx
   12130:	andeq	r1, r0, r0, lsr #25
   12134:	andeq	r1, r0, r0, lsr #24
   12138:	andeq	r1, r0, r8, ror #24
   1213c:	ldrdeq	r1, [r0], -r0
   12140:	andeq	r1, r0, r0, ror fp

00012144 <mmk_mock_destroy_internal@@Base>:
   12144:	str	fp, [sp, #-8]!
   12148:	str	lr, [sp, #4]
   1214c:	add	fp, sp, #4
   12150:	sub	sp, sp, #32
   12154:	str	r0, [fp, #-32]	; 0xffffffe0
   12158:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1215c:	ldr	r3, [r3, #4]
   12160:	str	r3, [fp, #-8]
   12164:	b	12184 <mmk_mock_destroy_internal@@Base+0x40>
   12168:	ldr	r3, [fp, #-8]
   1216c:	ldr	r3, [r3, #36]	; 0x24
   12170:	str	r3, [fp, #-20]	; 0xffffffec
   12174:	ldr	r0, [fp, #-8]
   12178:	bl	12ce4 <mmk_stub_destroy@@Base>
   1217c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12180:	str	r3, [fp, #-8]
   12184:	ldr	r3, [fp, #-8]
   12188:	cmp	r3, #0
   1218c:	bne	12168 <mmk_mock_destroy_internal@@Base+0x24>
   12190:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12194:	ldr	r3, [r3, #8]
   12198:	mov	r0, r3
   1219c:	bl	136d0 <mmk_free@@Base>
   121a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   121a4:	ldr	r3, [r3]
   121a8:	str	r3, [fp, #-12]
   121ac:	b	12204 <mmk_mock_destroy_internal@@Base+0xc0>
   121b0:	ldr	r3, [fp, #-12]
   121b4:	ldr	r3, [r3, #4]
   121b8:	str	r3, [fp, #-24]	; 0xffffffe8
   121bc:	ldr	r3, [fp, #-12]
   121c0:	ldr	r3, [r3]
   121c4:	str	r3, [fp, #-16]
   121c8:	b	121e8 <mmk_mock_destroy_internal@@Base+0xa4>
   121cc:	ldr	r3, [fp, #-16]
   121d0:	ldr	r3, [r3, #8]
   121d4:	str	r3, [fp, #-28]	; 0xffffffe4
   121d8:	ldr	r0, [fp, #-16]
   121dc:	bl	136d0 <mmk_free@@Base>
   121e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   121e4:	str	r3, [fp, #-16]
   121e8:	ldr	r3, [fp, #-16]
   121ec:	cmp	r3, #0
   121f0:	bne	121cc <mmk_mock_destroy_internal@@Base+0x88>
   121f4:	ldr	r0, [fp, #-12]
   121f8:	bl	136d0 <mmk_free@@Base>
   121fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12200:	str	r3, [fp, #-12]
   12204:	ldr	r3, [fp, #-12]
   12208:	cmp	r3, #0
   1220c:	bne	121b0 <mmk_mock_destroy_internal@@Base+0x6c>
   12210:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12214:	bl	136d0 <mmk_free@@Base>
   12218:	nop	{0}
   1221c:	sub	sp, fp, #4
   12220:	ldr	fp, [sp]
   12224:	add	sp, sp, #4
   12228:	pop	{pc}		; (ldr pc, [sp], #4)

0001222c <mmk_mock_params_begin@@Base>:
   1222c:	push	{fp}		; (str fp, [sp, #-4]!)
   12230:	add	fp, sp, #0
   12234:	sub	sp, sp, #12
   12238:	str	r0, [fp, #-8]
   1223c:	ldr	r3, [fp, #-8]
   12240:	ldr	r3, [r3, #8]
   12244:	cmp	r3, #0
   12248:	beq	1225c <mmk_mock_params_begin@@Base+0x30>
   1224c:	ldr	r3, [fp, #-8]
   12250:	ldr	r3, [r3, #12]
   12254:	cmp	r3, #0
   12258:	bne	12264 <mmk_mock_params_begin@@Base+0x38>
   1225c:	mov	r3, #0
   12260:	b	12270 <mmk_mock_params_begin@@Base+0x44>
   12264:	ldr	r3, [fp, #-8]
   12268:	ldr	r3, [r3, #8]
   1226c:	add	r3, r3, #4
   12270:	mov	r0, r3
   12274:	add	sp, fp, #0
   12278:	pop	{fp}		; (ldr fp, [sp], #4)
   1227c:	bx	lr

00012280 <mmk_mock_params_next@@Base>:
   12280:	push	{fp}		; (str fp, [sp, #-4]!)
   12284:	add	fp, sp, #0
   12288:	sub	sp, sp, #20
   1228c:	str	r0, [fp, #-16]
   12290:	str	r1, [fp, #-20]	; 0xffffffec
   12294:	ldr	r3, [fp, #-20]	; 0xffffffec
   12298:	str	r3, [fp, #-8]
   1229c:	ldr	r3, [fp, #-8]
   122a0:	ldr	r3, [r3, #-4]
   122a4:	str	r3, [fp, #-12]
   122a8:	ldr	r3, [fp, #-12]
   122ac:	add	r3, r3, #4
   122b0:	ldr	r2, [fp, #-8]
   122b4:	add	r3, r2, r3
   122b8:	str	r3, [fp, #-8]
   122bc:	ldr	r3, [fp, #-16]
   122c0:	ldr	r2, [r3, #8]
   122c4:	ldr	r3, [fp, #-16]
   122c8:	ldr	r3, [r3, #12]
   122cc:	add	r3, r2, r3
   122d0:	ldr	r2, [fp, #-8]
   122d4:	cmp	r2, r3
   122d8:	bcc	122e4 <mmk_mock_params_next@@Base+0x64>
   122dc:	mov	r3, #0
   122e0:	b	122e8 <mmk_mock_params_next@@Base+0x68>
   122e4:	ldr	r3, [fp, #-8]
   122e8:	mov	r0, r3
   122ec:	add	sp, fp, #0
   122f0:	pop	{fp}		; (ldr fp, [sp], #4)
   122f4:	bx	lr

000122f8 <mmk_mock_get_params@@Base>:
   122f8:	str	fp, [sp, #-8]!
   122fc:	str	lr, [sp, #4]
   12300:	add	fp, sp, #4
   12304:	sub	sp, sp, #8
   12308:	bl	12dec <mmk_ctx@@Base>
   1230c:	mov	r3, r0
   12310:	mov	r0, r3
   12314:	bl	12960 <mmk_stub_context@@Base>
   12318:	str	r0, [fp, #-8]
   1231c:	ldr	r3, [fp, #-8]
   12320:	ldr	r3, [r3]
   12324:	mov	r0, r3
   12328:	sub	sp, fp, #4
   1232c:	ldr	fp, [sp]
   12330:	add	sp, sp, #4
   12334:	pop	{pc}		; (ldr pc, [sp], #4)
   12338:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1233c:	strd	r6, [sp, #8]
   12340:	str	lr, [sp, #32]
   12344:	strd	r8, [sp, #16]
   12348:	ldr	lr, [r0, #8]
   1234c:	strd	sl, [sp, #24]
   12350:	sub	sp, sp, #4
   12354:	ldr	r7, [r0]
   12358:	ldr	ip, [lr]
   1235c:	cmp	ip, #0
   12360:	beq	12544 <mmk_mock_get_params@@Base+0x24c>
   12364:	cmp	ip, #6
   12368:	mov	r3, lr
   1236c:	bne	1237c <mmk_mock_get_params@@Base+0x84>
   12370:	b	12514 <mmk_mock_get_params@@Base+0x21c>
   12374:	cmp	r4, #6
   12378:	beq	12514 <mmk_mock_get_params@@Base+0x21c>
   1237c:	ldr	r4, [r3, #8]!
   12380:	cmp	r4, #0
   12384:	bne	12374 <mmk_mock_get_params@@Base+0x7c>
   12388:	mov	r0, #1
   1238c:	cmp	ip, #5
   12390:	mov	r3, lr
   12394:	bne	123a4 <mmk_mock_get_params@@Base+0xac>
   12398:	b	124fc <mmk_mock_get_params@@Base+0x204>
   1239c:	cmp	r5, #5
   123a0:	beq	124fc <mmk_mock_get_params@@Base+0x204>
   123a4:	ldr	r5, [r3, #8]!
   123a8:	cmp	r5, #0
   123ac:	bne	1239c <mmk_mock_get_params@@Base+0xa4>
   123b0:	mov	r0, #1
   123b4:	cmp	ip, #20
   123b8:	mov	r3, lr
   123bc:	bne	123cc <mmk_mock_get_params@@Base+0xd4>
   123c0:	b	124f0 <mmk_mock_get_params@@Base+0x1f8>
   123c4:	cmp	r2, #20
   123c8:	beq	124f0 <mmk_mock_get_params@@Base+0x1f8>
   123cc:	ldr	r2, [r3, #8]!
   123d0:	cmp	r2, #0
   123d4:	bne	123c4 <mmk_mock_get_params@@Base+0xcc>
   123d8:	mov	r6, #2
   123dc:	cmp	ip, #23
   123e0:	mov	r8, lr
   123e4:	bne	123f4 <mmk_mock_get_params@@Base+0xfc>
   123e8:	b	124dc <mmk_mock_get_params@@Base+0x1e4>
   123ec:	cmp	r3, #23
   123f0:	beq	124dc <mmk_mock_get_params@@Base+0x1e4>
   123f4:	ldr	r3, [r8, #8]!
   123f8:	cmp	r3, #0
   123fc:	bne	123ec <mmk_mock_get_params@@Base+0xf4>
   12400:	mov	r8, r3
   12404:	cmp	ip, #2
   12408:	mov	r9, lr
   1240c:	bne	1241c <mmk_mock_get_params@@Base+0x124>
   12410:	b	124d4 <mmk_mock_get_params@@Base+0x1dc>
   12414:	cmp	r3, #2
   12418:	beq	124d4 <mmk_mock_get_params@@Base+0x1dc>
   1241c:	ldr	r3, [r9, #8]!
   12420:	cmp	r3, #0
   12424:	bne	12414 <mmk_mock_get_params@@Base+0x11c>
   12428:	b	12438 <mmk_mock_get_params@@Base+0x140>
   1242c:	ldr	ip, [lr, #8]!
   12430:	cmp	ip, #0
   12434:	beq	12538 <mmk_mock_get_params@@Base+0x240>
   12438:	cmp	ip, r6
   1243c:	bne	1242c <mmk_mock_get_params@@Base+0x134>
   12440:	cmp	r0, #0
   12444:	ldr	r9, [lr, #4]
   12448:	bne	12544 <mmk_mock_get_params@@Base+0x24c>
   1244c:	cmp	r8, #0
   12450:	cmpne	r2, #0
   12454:	beq	124b8 <mmk_mock_get_params@@Base+0x1c0>
   12458:	cmp	r9, #0
   1245c:	cmpne	r3, #0
   12460:	beq	124b8 <mmk_mock_get_params@@Base+0x1c0>
   12464:	cmp	r9, r3
   12468:	udiv	r6, r3, r9
   1246c:	bhi	124b8 <mmk_mock_get_params@@Base+0x1c0>
   12470:	mov	sl, r1
   12474:	mov	fp, r0
   12478:	b	12488 <mmk_mock_get_params@@Base+0x190>
   1247c:	cmp	r6, fp
   12480:	add	r8, r8, r9
   12484:	bls	12544 <mmk_mock_get_params@@Base+0x24c>
   12488:	ldr	r3, [r8, #4]
   1248c:	mov	r1, sl
   12490:	add	fp, fp, #1
   12494:	lsr	r3, r3, #8
   12498:	ldr	r0, [r4, r3, lsl #4]
   1249c:	add	r0, r5, r0
   124a0:	bl	11188 <strcmp@plt>
   124a4:	cmp	r0, #0
   124a8:	bne	1247c <mmk_mock_get_params@@Base+0x184>
   124ac:	ldr	r0, [r8]
   124b0:	cmp	r0, #0
   124b4:	addne	r0, r7, r0
   124b8:	add	sp, sp, #4
   124bc:	ldrd	r4, [sp]
   124c0:	ldrd	r6, [sp, #8]
   124c4:	ldrd	r8, [sp, #16]
   124c8:	ldrd	sl, [sp, #24]
   124cc:	add	sp, sp, #32
   124d0:	pop	{pc}		; (ldr pc, [sp], #4)
   124d4:	ldr	r3, [r9, #4]
   124d8:	b	12438 <mmk_mock_get_params@@Base+0x140>
   124dc:	ldr	r3, [r8, #4]
   124e0:	cmp	r7, r3
   124e4:	addhi	r8, r7, r3
   124e8:	bhi	12404 <mmk_mock_get_params@@Base+0x10c>
   124ec:	b	12400 <mmk_mock_get_params@@Base+0x108>
   124f0:	ldr	r2, [r3, #4]
   124f4:	add	r6, r2, #2
   124f8:	b	123dc <mmk_mock_get_params@@Base+0xe4>
   124fc:	ldr	r5, [r3, #4]
   12500:	cmp	r7, r5
   12504:	bhi	1254c <mmk_mock_get_params@@Base+0x254>
   12508:	cmp	r5, #0
   1250c:	moveq	r0, #1
   12510:	b	123b4 <mmk_mock_get_params@@Base+0xbc>
   12514:	ldr	r4, [r3, #4]
   12518:	cmp	r7, r4
   1251c:	clzls	r0, r4
   12520:	lsrls	r0, r0, #5
   12524:	bls	1238c <mmk_mock_get_params@@Base+0x94>
   12528:	adds	r4, r7, r4
   1252c:	moveq	r0, #1
   12530:	movne	r0, #0
   12534:	b	1238c <mmk_mock_get_params@@Base+0x94>
   12538:	cmp	r0, #0
   1253c:	mov	r9, ip
   12540:	beq	1244c <mmk_mock_get_params@@Base+0x154>
   12544:	mov	r0, #0
   12548:	b	124b8 <mmk_mock_get_params@@Base+0x1c0>
   1254c:	adds	r5, r7, r5
   12550:	moveq	r0, #1
   12554:	b	123b4 <mmk_mock_get_params@@Base+0xbc>

00012558 <plt_init_ctx@@Base>:
   12558:	ldr	r3, [pc, #44]	; 1258c <plt_init_ctx@@Base+0x34>
   1255c:	ldr	r2, [pc, #44]	; 12590 <plt_init_ctx@@Base+0x38>
   12560:	add	r3, pc, r3
   12564:	ldr	r0, [r3]
   12568:	add	r2, pc, r2
   1256c:	cmn	r0, #1
   12570:	beq	12578 <plt_init_ctx@@Base+0x20>
   12574:	bx	lr
   12578:	ldr	r1, [pc, #20]	; 12594 <plt_init_ctx@@Base+0x3c>
   1257c:	ldr	r2, [r2, r1]
   12580:	mov	r0, r2
   12584:	str	r2, [r3]
   12588:	bx	lr
   1258c:	andeq	r2, r1, ip, lsr fp
   12590:	muleq	r1, r0, sl
   12594:	andeq	r0, r0, ip, lsl #1

00012598 <plt_get_lib@@Base>:
   12598:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1259c:	ldr	r4, [pc, #628]	; 12818 <plt_get_lib@@Base+0x280>
   125a0:	strd	r6, [sp, #8]
   125a4:	subs	r6, r1, #0
   125a8:	strd	r8, [sp, #16]
   125ac:	mov	r9, r0
   125b0:	strd	sl, [sp, #24]
   125b4:	add	fp, sp, #32
   125b8:	str	lr, [sp, #32]
   125bc:	sub	sp, sp, #12
   125c0:	add	r4, pc, r4
   125c4:	beq	127c4 <plt_get_lib@@Base+0x22c>
   125c8:	ldr	r1, [pc, #588]	; 1281c <plt_get_lib@@Base+0x284>
   125cc:	mov	r2, #4
   125d0:	mov	r0, r6
   125d4:	add	r1, pc, r1
   125d8:	bl	11254 <strncmp@plt>
   125dc:	cmp	r0, #0
   125e0:	moveq	r5, #1
   125e4:	bne	12730 <plt_get_lib@@Base+0x198>
   125e8:	mov	r1, #58	; 0x3a
   125ec:	mov	r0, r6
   125f0:	bl	11200 <strchr@plt>
   125f4:	ldr	r1, [pc, #548]	; 12820 <plt_get_lib@@Base+0x288>
   125f8:	add	r8, r0, #1
   125fc:	mov	r0, r8
   12600:	add	r1, pc, r1
   12604:	bl	11188 <strcmp@plt>
   12608:	mov	r7, r0
   1260c:	mov	r0, r8
   12610:	bl	111e8 <strlen@plt>
   12614:	mov	sl, r0
   12618:	ldr	r4, [r9, #4]
   1261c:	cmp	r4, #0
   12620:	beq	126e8 <plt_get_lib@@Base+0x150>
   12624:	add	r3, sl, #15
   12628:	bic	r3, r3, #7
   1262c:	str	r3, [fp, #-40]	; 0xffffffd8
   12630:	b	1265c <plt_get_lib@@Base+0xc4>
   12634:	tst	r5, #1
   12638:	bne	126c0 <plt_get_lib@@Base+0x128>
   1263c:	mov	r0, r6
   12640:	ldr	r1, [r4, #4]
   12644:	bl	11188 <strcmp@plt>
   12648:	cmp	r0, #0
   1264c:	beq	126a0 <plt_get_lib@@Base+0x108>
   12650:	ldr	r4, [r4, #12]
   12654:	cmp	r4, #0
   12658:	beq	126e8 <plt_get_lib@@Base+0x150>
   1265c:	cmp	r5, #1
   12660:	bne	12634 <plt_get_lib@@Base+0x9c>
   12664:	cmp	r7, #0
   12668:	bne	126f0 <plt_get_lib@@Base+0x158>
   1266c:	ldr	r1, [pc, #432]	; 12824 <plt_get_lib@@Base+0x28c>
   12670:	ldr	r9, [r4, #4]
   12674:	add	r1, pc, r1
   12678:	mov	r0, r9
   1267c:	bl	1117c <strstr@plt>
   12680:	cmp	r0, #0
   12684:	bne	126a0 <plt_get_lib@@Base+0x108>
   12688:	ldr	r1, [pc, #408]	; 12828 <plt_get_lib@@Base+0x290>
   1268c:	mov	r0, r9
   12690:	add	r1, pc, r1
   12694:	bl	1117c <strstr@plt>
   12698:	cmp	r0, #0
   1269c:	beq	12650 <plt_get_lib@@Base+0xb8>
   126a0:	mov	r0, r4
   126a4:	sub	sp, fp, #32
   126a8:	ldrd	r4, [sp]
   126ac:	ldrd	r6, [sp, #8]
   126b0:	ldrd	r8, [sp, #16]
   126b4:	ldrd	sl, [sp, #24]
   126b8:	add	sp, sp, #32
   126bc:	pop	{pc}		; (ldr pc, [sp], #4)
   126c0:	cmp	r5, #3
   126c4:	bne	12650 <plt_get_lib@@Base+0xb8>
   126c8:	mov	r1, r8
   126cc:	mov	r0, r4
   126d0:	bl	12338 <mmk_mock_get_params@@Base+0x40>
   126d4:	cmp	r0, #0
   126d8:	bne	126a0 <plt_get_lib@@Base+0x108>
   126dc:	ldr	r4, [r4, #12]
   126e0:	cmp	r4, #0
   126e4:	bne	1265c <plt_get_lib@@Base+0xc4>
   126e8:	mov	r4, #0
   126ec:	b	126a0 <plt_get_lib@@Base+0x108>
   126f0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   126f4:	mov	r9, sp
   126f8:	add	r1, sl, #8
   126fc:	ldr	r2, [pc, #296]	; 1282c <plt_get_lib@@Base+0x294>
   12700:	sub	sp, sp, r3
   12704:	mov	r3, r8
   12708:	mov	r0, sp
   1270c:	add	r2, pc, r2
   12710:	bl	11224 <snprintf@plt>
   12714:	mov	r1, sp
   12718:	ldr	r0, [r4, #4]
   1271c:	bl	1117c <strstr@plt>
   12720:	cmp	r0, #0
   12724:	bne	127e0 <plt_get_lib@@Base+0x248>
   12728:	mov	sp, r9
   1272c:	b	12650 <plt_get_lib@@Base+0xb8>
   12730:	ldr	r1, [pc, #248]	; 12830 <plt_get_lib@@Base+0x298>
   12734:	mov	r2, #5
   12738:	mov	r0, r6
   1273c:	add	r1, pc, r1
   12740:	bl	11254 <strncmp@plt>
   12744:	cmp	r0, #0
   12748:	moveq	r5, #2
   1274c:	beq	125e8 <plt_get_lib@@Base+0x50>
   12750:	ldr	r1, [pc, #220]	; 12834 <plt_get_lib@@Base+0x29c>
   12754:	mov	r2, #4
   12758:	mov	r0, r6
   1275c:	add	r1, pc, r1
   12760:	bl	11254 <strncmp@plt>
   12764:	cmp	r0, #0
   12768:	moveq	r5, #3
   1276c:	beq	125e8 <plt_get_lib@@Base+0x50>
   12770:	ldr	r1, [pc, #192]	; 12838 <plt_get_lib@@Base+0x2a0>
   12774:	mov	r0, r6
   12778:	add	r1, pc, r1
   1277c:	bl	11188 <strcmp@plt>
   12780:	cmp	r0, #0
   12784:	beq	127e8 <plt_get_lib@@Base+0x250>
   12788:	mov	r1, #58	; 0x3a
   1278c:	mov	r0, r6
   12790:	bl	11200 <strchr@plt>
   12794:	ldr	r3, [pc, #160]	; 1283c <plt_get_lib@@Base+0x2a4>
   12798:	subs	r2, r0, #0
   1279c:	ldr	r3, [r4, r3]
   127a0:	ldr	r0, [r3]
   127a4:	beq	12804 <plt_get_lib@@Base+0x26c>
   127a8:	sub	r2, r2, r6
   127ac:	mov	r3, r6
   127b0:	ldr	r1, [pc, #136]	; 12840 <plt_get_lib@@Base+0x2a8>
   127b4:	add	r2, r2, #1
   127b8:	add	r1, pc, r1
   127bc:	bl	1120c <fprintf@plt>
   127c0:	bl	11260 <abort@plt>
   127c4:	mov	sl, r6
   127c8:	ldr	r6, [pc, #116]	; 12844 <plt_get_lib@@Base+0x2ac>
   127cc:	mvn	r7, #0
   127d0:	mov	r5, sl
   127d4:	add	r6, pc, r6
   127d8:	mov	r8, r6
   127dc:	b	12618 <plt_get_lib@@Base+0x80>
   127e0:	mov	sp, r9
   127e4:	b	126a0 <plt_get_lib@@Base+0x108>
   127e8:	ldr	r6, [pc, #88]	; 12848 <plt_get_lib@@Base+0x2b0>
   127ec:	mov	sl, r0
   127f0:	mvn	r7, #0
   127f4:	mov	r5, r0
   127f8:	add	r6, pc, r6
   127fc:	mov	r8, r6
   12800:	b	12618 <plt_get_lib@@Base+0x80>
   12804:	ldr	r1, [pc, #64]	; 1284c <plt_get_lib@@Base+0x2b4>
   12808:	mov	r2, r6
   1280c:	add	r1, pc, r1
   12810:	bl	1120c <fprintf@plt>
   12814:	b	127c0 <plt_get_lib@@Base+0x228>
   12818:	andeq	r2, r1, r8, lsr sl
   1281c:	muleq	r0, r0, r6
   12820:	andeq	r1, r0, ip, asr #13
   12824:	andeq	r1, r0, ip, asr r6
   12828:	andeq	r1, r0, ip, asr #12
   1282c:	ldrdeq	r1, [r0], -ip
   12830:	andeq	r1, r0, r0, lsr r5
   12834:	andeq	r1, r0, r8, lsl r5
   12838:	andeq	r1, r0, r4, lsl #10
   1283c:	andeq	r0, r0, r8, rrx
   12840:	andeq	r1, r0, ip, asr #9
   12844:	muleq	r0, r4, r5
   12848:	andeq	r1, r0, r0, ror r5
   1284c:	muleq	r0, ip, r4

00012850 <plt_get_offsets@@Base>:
   12850:	strd	r4, [sp, #-16]!
   12854:	mov	r5, r2
   12858:	str	r6, [sp, #8]
   1285c:	str	lr, [sp, #12]
   12860:	bl	12338 <mmk_mock_get_params@@Base+0x40>
   12864:	subs	r4, r0, #0
   12868:	beq	12890 <plt_get_offsets@@Base+0x40>
   1286c:	mov	r0, #8
   12870:	bl	13690 <mmk_malloc@@Base>
   12874:	mov	r1, #1
   12878:	mov	r2, #0
   1287c:	mov	r3, #0
   12880:	str	r1, [r5]
   12884:	strd	r2, [r0]
   12888:	str	r4, [r0]
   1288c:	mov	r4, r0
   12890:	mov	r0, r4
   12894:	ldrd	r4, [sp]
   12898:	ldr	r6, [sp, #8]
   1289c:	add	sp, sp, #12
   128a0:	pop	{pc}		; (ldr pc, [sp], #4)

000128a4 <plt_set_offsets@@Base>:
   128a4:	cmp	r1, #0
   128a8:	beq	128d0 <plt_set_offsets@@Base+0x2c>
   128ac:	add	r1, r0, r1, lsl #3
   128b0:	ldm	r0, {r3, ip}
   128b4:	add	r0, r0, #8
   128b8:	cmp	ip, #0
   128bc:	ldreq	ip, [r3]
   128c0:	streq	ip, [r0, #-4]
   128c4:	cmp	r1, r0
   128c8:	str	r2, [r3]
   128cc:	bne	128b0 <plt_set_offsets@@Base+0xc>
   128d0:	bx	lr

000128d4 <plt_reset_offsets@@Base>:
   128d4:	cmp	r1, #0
   128d8:	beq	128f4 <plt_reset_offsets@@Base+0x20>
   128dc:	add	r1, r0, r1, lsl #3
   128e0:	ldr	r2, [r0, #4]
   128e4:	ldr	r3, [r0], #8
   128e8:	cmp	r0, r1
   128ec:	str	r2, [r3]
   128f0:	bne	128e0 <plt_reset_offsets@@Base+0xc>
   128f4:	bx	lr

000128f8 <plt_get_real_fn@@Base>:
   128f8:	strd	r4, [sp, #-16]!
   128fc:	ldr	r4, [r0, #4]
   12900:	str	r6, [sp, #8]
   12904:	str	lr, [sp, #12]
   12908:	cmp	r4, #0
   1290c:	beq	1294c <plt_get_real_fn@@Base+0x54>
   12910:	mov	r5, r1
   12914:	b	12924 <plt_get_real_fn@@Base+0x2c>
   12918:	ldr	r4, [r4, #12]
   1291c:	cmp	r4, #0
   12920:	beq	1294c <plt_get_real_fn@@Base+0x54>
   12924:	mov	r1, r5
   12928:	mov	r0, r4
   1292c:	bl	12338 <mmk_mock_get_params@@Base+0x40>
   12930:	cmp	r0, #0
   12934:	beq	12918 <plt_get_real_fn@@Base+0x20>
   12938:	ldrd	r4, [sp]
   1293c:	ldr	r6, [sp, #8]
   12940:	add	sp, sp, #12
   12944:	ldr	r0, [r0]
   12948:	pop	{pc}		; (ldr pc, [sp], #4)
   1294c:	mov	r0, r4
   12950:	ldrd	r4, [sp]
   12954:	ldr	r6, [sp, #8]
   12958:	add	sp, sp, #12
   1295c:	pop	{pc}		; (ldr pc, [sp], #4)

00012960 <mmk_stub_context@@Base>:
   12960:	push	{fp}		; (str fp, [sp, #-4]!)
   12964:	add	fp, sp, #0
   12968:	sub	sp, sp, #12
   1296c:	str	r0, [fp, #-8]
   12970:	ldr	r3, [fp, #-8]
   12974:	cmp	r3, #0
   12978:	bne	12984 <mmk_stub_context@@Base+0x24>
   1297c:	mov	r3, #0
   12980:	b	1298c <mmk_stub_context@@Base+0x2c>
   12984:	ldr	r3, [fp, #-8]
   12988:	ldr	r3, [r3, #12]
   1298c:	mov	r0, r3
   12990:	add	sp, fp, #0
   12994:	pop	{fp}		; (ldr fp, [sp], #4)
   12998:	bx	lr

0001299c <mmk_stub_create_static@@Base>:
   1299c:	str	r4, [sp, #-12]!
   129a0:	str	fp, [sp, #4]
   129a4:	str	lr, [sp, #8]
   129a8:	add	fp, sp, #8
   129ac:	sub	sp, sp, #44	; 0x2c
   129b0:	str	r0, [fp, #-40]	; 0xffffffd8
   129b4:	str	r1, [fp, #-44]	; 0xffffffd4
   129b8:	str	r2, [fp, #-48]	; 0xffffffd0
   129bc:	str	r3, [fp, #-52]	; 0xffffffcc
   129c0:	ldr	r4, [pc, #512]	; 12bc8 <mmk_stub_create_static@@Base+0x22c>
   129c4:	add	r4, pc, r4
   129c8:	ldr	r3, [pc, #508]	; 12bcc <mmk_stub_create_static@@Base+0x230>
   129cc:	add	r3, pc, r3
   129d0:	mov	r0, r3
   129d4:	bl	11248 <__tls_get_addr@plt>
   129d8:	mov	r1, r0
   129dc:	ldr	r3, [pc, #492]	; 12bd0 <mmk_stub_create_static@@Base+0x234>
   129e0:	mov	r2, #0
   129e4:	str	r2, [r1, r3]
   129e8:	ldr	r3, [pc, #484]	; 12bd4 <mmk_stub_create_static@@Base+0x238>
   129ec:	add	r3, pc, r3
   129f0:	mov	r0, r3
   129f4:	bl	11248 <__tls_get_addr@plt>
   129f8:	mov	r1, r0
   129fc:	ldr	r3, [pc, #468]	; 12bd8 <mmk_stub_create_static@@Base+0x23c>
   12a00:	mov	r2, #0
   12a04:	str	r2, [r1, r3]
   12a08:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12a0c:	bl	13640 <mmk_strlen@@Base>
   12a10:	mov	r3, r0
   12a14:	add	r3, r3, #1
   12a18:	mov	r0, r3
   12a1c:	bl	13690 <mmk_malloc@@Base>
   12a20:	str	r0, [fp, #-20]	; 0xffffffec
   12a24:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a28:	cmp	r3, #0
   12a2c:	bne	12a38 <mmk_stub_create_static@@Base+0x9c>
   12a30:	mvn	r3, #11
   12a34:	b	12bb0 <mmk_stub_create_static@@Base+0x214>
   12a38:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12a3c:	ldr	r0, [fp, #-20]	; 0xffffffec
   12a40:	bl	135d4 <mmk_strcpy@@Base>
   12a44:	mov	r3, #0
   12a48:	str	r3, [fp, #-16]
   12a4c:	mov	r1, #64	; 0x40
   12a50:	ldr	r0, [fp, #-20]	; 0xffffffec
   12a54:	bl	13594 <mmk_strchr@@Base>
   12a58:	str	r0, [fp, #-24]	; 0xffffffe8
   12a5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a60:	cmp	r3, #0
   12a64:	beq	12a80 <mmk_stub_create_static@@Base+0xe4>
   12a68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a6c:	mov	r2, #0
   12a70:	strb	r2, [r3]
   12a74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a78:	add	r3, r3, #1
   12a7c:	str	r3, [fp, #-16]
   12a80:	bl	11cec <mmk_plt_ctx@@Base>
   12a84:	mov	r3, r0
   12a88:	ldr	r1, [fp, #-16]
   12a8c:	mov	r0, r3
   12a90:	bl	12598 <plt_get_lib@@Base>
   12a94:	str	r0, [fp, #-28]	; 0xffffffe4
   12a98:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12a9c:	cmp	r3, #0
   12aa0:	bne	12aac <mmk_stub_create_static@@Base+0x110>
   12aa4:	mvn	r3, #1
   12aa8:	b	12bb0 <mmk_stub_create_static@@Base+0x214>
   12aac:	mov	r3, #0
   12ab0:	str	r3, [fp, #-36]	; 0xffffffdc
   12ab4:	sub	r3, fp, #36	; 0x24
   12ab8:	mov	r2, r3
   12abc:	ldr	r1, [fp, #-20]	; 0xffffffec
   12ac0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12ac4:	bl	12850 <plt_get_offsets@@Base>
   12ac8:	str	r0, [fp, #-32]	; 0xffffffe0
   12acc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12ad0:	cmp	r3, #0
   12ad4:	beq	12ae4 <mmk_stub_create_static@@Base+0x148>
   12ad8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12adc:	cmp	r3, #0
   12ae0:	bne	12aec <mmk_stub_create_static@@Base+0x150>
   12ae4:	mvn	r3, #1
   12ae8:	b	12bb0 <mmk_stub_create_static@@Base+0x214>
   12aec:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12af0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12af4:	mov	r1, r3
   12af8:	mov	r2, #0
   12afc:	mov	r3, #0
   12b00:	strd	r2, [r1]
   12b04:	strd	r2, [r1, #8]
   12b08:	strd	r2, [r1, #16]
   12b0c:	strd	r2, [r1, #24]
   12b10:	strd	r2, [r1, #32]
   12b14:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12b18:	ldr	r2, [pc, #188]	; 12bdc <mmk_stub_create_static@@Base+0x240>
   12b1c:	ldr	r2, [r4, r2]
   12b20:	str	r2, [r3]
   12b24:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12b28:	ldr	r2, [pc, #176]	; 12be0 <mmk_stub_create_static@@Base+0x244>
   12b2c:	ldr	r2, [r4, r2]
   12b30:	str	r2, [r3, #4]
   12b34:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12b38:	ldr	r2, [pc, #164]	; 12be4 <mmk_stub_create_static@@Base+0x248>
   12b3c:	ldr	r2, [r4, r2]
   12b40:	str	r2, [r3, #8]
   12b44:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12b48:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12b4c:	str	r2, [r3, #12]
   12b50:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12b54:	ldr	r2, [fp, #-20]	; 0xffffffec
   12b58:	str	r2, [r3, #16]
   12b5c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12b60:	ldr	r2, [fp, #-16]
   12b64:	str	r2, [r3, #20]
   12b68:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12b6c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12b70:	str	r2, [r3, #24]
   12b74:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12b78:	str	r0, [r3, #28]
   12b7c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12b80:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12b84:	bl	12e80 <create_trampoline@@Base>
   12b88:	mov	r2, r0
   12b8c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12b90:	str	r2, [r3, #32]
   12b94:	ldr	r1, [fp, #-36]	; 0xffffffdc
   12b98:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12b9c:	ldr	r3, [r3, #32]
   12ba0:	mov	r2, r3
   12ba4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12ba8:	bl	128a4 <plt_set_offsets@@Base>
   12bac:	mov	r3, #0
   12bb0:	mov	r0, r3
   12bb4:	sub	sp, fp, #8
   12bb8:	ldr	r4, [sp]
   12bbc:	ldr	fp, [sp, #4]
   12bc0:	add	sp, sp, #8
   12bc4:	pop	{pc}		; (ldr pc, [sp], #4)
   12bc8:	andeq	r2, r1, r4, lsr r6
   12bcc:	andeq	r2, r1, r8, lsl #13
   12bd0:	andeq	r0, r0, r4
   12bd4:	andeq	r2, r1, r8, ror #12
   12bd8:	andeq	r0, r0, r8
   12bdc:	muleq	r0, r0, r0
   12be0:	andeq	r0, r0, r0, ror r0
   12be4:	andeq	r0, r0, r0, lsl #1

00012be8 <mmk_stub_create@@Base>:
   12be8:	str	fp, [sp, #-8]!
   12bec:	str	lr, [sp, #4]
   12bf0:	add	fp, sp, #4
   12bf4:	sub	sp, sp, #24
   12bf8:	str	r0, [fp, #-16]
   12bfc:	str	r1, [fp, #-20]	; 0xffffffec
   12c00:	str	r2, [fp, #-24]	; 0xffffffe8
   12c04:	bl	11bf8 <mmk_init@@Base>
   12c08:	mov	r0, #40	; 0x28
   12c0c:	bl	13690 <mmk_malloc@@Base>
   12c10:	str	r0, [fp, #-8]
   12c14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c18:	ldr	r2, [fp, #-20]	; 0xffffffec
   12c1c:	ldr	r1, [fp, #-16]
   12c20:	ldr	r0, [fp, #-8]
   12c24:	bl	1299c <mmk_stub_create_static@@Base>
   12c28:	str	r0, [fp, #-12]
   12c2c:	ldr	r3, [fp, #-12]
   12c30:	cmp	r3, #0
   12c34:	bge	12c58 <mmk_stub_create@@Base+0x70>
   12c38:	ldr	r0, [fp, #-8]
   12c3c:	bl	136d0 <mmk_free@@Base>
   12c40:	bl	11218 <__errno_location@plt>
   12c44:	mov	r2, r0
   12c48:	ldr	r3, [fp, #-12]
   12c4c:	str	r3, [r2]
   12c50:	mov	r3, #0
   12c54:	str	r3, [fp, #-8]
   12c58:	ldr	r3, [fp, #-8]
   12c5c:	mov	r0, r3
   12c60:	sub	sp, fp, #4
   12c64:	ldr	fp, [sp]
   12c68:	add	sp, sp, #4
   12c6c:	pop	{pc}		; (ldr pc, [sp], #4)

00012c70 <mmk_stub_destroy_static@@Base>:
   12c70:	str	fp, [sp, #-8]!
   12c74:	str	lr, [sp, #4]
   12c78:	add	fp, sp, #4
   12c7c:	sub	sp, sp, #8
   12c80:	str	r0, [fp, #-8]
   12c84:	ldr	r3, [fp, #-8]
   12c88:	ldr	r2, [r3, #24]
   12c8c:	ldr	r3, [fp, #-8]
   12c90:	ldr	r3, [r3, #28]
   12c94:	mov	r1, r3
   12c98:	mov	r0, r2
   12c9c:	bl	128d4 <plt_reset_offsets@@Base>
   12ca0:	ldr	r3, [fp, #-8]
   12ca4:	ldr	r3, [r3, #24]
   12ca8:	mov	r0, r3
   12cac:	bl	136d0 <mmk_free@@Base>
   12cb0:	ldr	r3, [fp, #-8]
   12cb4:	ldr	r3, [r3, #32]
   12cb8:	mov	r0, r3
   12cbc:	bl	12fc4 <destroy_trampoline@@Base>
   12cc0:	ldr	r3, [fp, #-8]
   12cc4:	ldr	r3, [r3, #16]
   12cc8:	mov	r0, r3
   12ccc:	bl	136d0 <mmk_free@@Base>
   12cd0:	nop	{0}
   12cd4:	sub	sp, fp, #4
   12cd8:	ldr	fp, [sp]
   12cdc:	add	sp, sp, #4
   12ce0:	pop	{pc}		; (ldr pc, [sp], #4)

00012ce4 <mmk_stub_destroy@@Base>:
   12ce4:	str	fp, [sp, #-8]!
   12ce8:	str	lr, [sp, #4]
   12cec:	add	fp, sp, #4
   12cf0:	sub	sp, sp, #8
   12cf4:	str	r0, [fp, #-8]
   12cf8:	ldr	r0, [fp, #-8]
   12cfc:	bl	12c70 <mmk_stub_destroy_static@@Base>
   12d00:	ldr	r0, [fp, #-8]
   12d04:	bl	136d0 <mmk_free@@Base>
   12d08:	nop	{0}
   12d0c:	sub	sp, fp, #4
   12d10:	ldr	fp, [sp]
   12d14:	add	sp, sp, #4
   12d18:	pop	{pc}		; (ldr pc, [sp], #4)

00012d1c <mmk_ask_ctx@@Base>:
   12d1c:	str	fp, [sp, #-8]!
   12d20:	str	lr, [sp, #4]
   12d24:	add	fp, sp, #4
   12d28:	sub	sp, sp, #8
   12d2c:	str	r0, [fp, #-8]
   12d30:	ldr	r3, [pc, #56]	; 12d70 <mmk_ask_ctx@@Base+0x54>
   12d34:	add	r3, pc, r3
   12d38:	mov	r0, r3
   12d3c:	bl	11248 <__tls_get_addr@plt>
   12d40:	mov	r1, r0
   12d44:	ldr	r3, [pc, #40]	; 12d74 <mmk_ask_ctx@@Base+0x58>
   12d48:	mov	r2, #1
   12d4c:	str	r2, [r1, r3]
   12d50:	ldr	r3, [fp, #-8]
   12d54:	blx	r3
   12d58:	mov	r3, r0
   12d5c:	mov	r0, r3
   12d60:	sub	sp, fp, #4
   12d64:	ldr	fp, [sp]
   12d68:	add	sp, sp, #4
   12d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   12d70:	andeq	r2, r1, r0, lsr #6
   12d74:	andeq	r0, r0, r4

00012d78 <mmk_ctx_asked@@Base>:
   12d78:	str	fp, [sp, #-8]!
   12d7c:	str	lr, [sp, #4]
   12d80:	add	fp, sp, #4
   12d84:	sub	sp, sp, #8
   12d88:	ldr	r3, [pc, #80]	; 12de0 <mmk_ctx_asked@@Base+0x68>
   12d8c:	add	r3, pc, r3
   12d90:	mov	r0, r3
   12d94:	bl	11248 <__tls_get_addr@plt>
   12d98:	mov	r2, r0
   12d9c:	ldr	r3, [pc, #64]	; 12de4 <mmk_ctx_asked@@Base+0x6c>
   12da0:	ldr	r3, [r2, r3]
   12da4:	str	r3, [fp, #-8]
   12da8:	ldr	r3, [pc, #56]	; 12de8 <mmk_ctx_asked@@Base+0x70>
   12dac:	add	r3, pc, r3
   12db0:	mov	r0, r3
   12db4:	bl	11248 <__tls_get_addr@plt>
   12db8:	mov	r1, r0
   12dbc:	ldr	r3, [pc, #32]	; 12de4 <mmk_ctx_asked@@Base+0x6c>
   12dc0:	mov	r2, #0
   12dc4:	str	r2, [r1, r3]
   12dc8:	ldr	r3, [fp, #-8]
   12dcc:	mov	r0, r3
   12dd0:	sub	sp, fp, #4
   12dd4:	ldr	fp, [sp]
   12dd8:	add	sp, sp, #4
   12ddc:	pop	{pc}		; (ldr pc, [sp], #4)
   12de0:	andeq	r2, r1, r8, asr #5
   12de4:	andeq	r0, r0, r4
   12de8:	andeq	r2, r1, r8, lsr #5

00012dec <mmk_ctx@@Base>:
   12dec:	str	fp, [sp, #-8]!
   12df0:	str	lr, [sp, #4]
   12df4:	add	fp, sp, #4
   12df8:	ldr	r3, [pc, #40]	; 12e28 <mmk_ctx@@Base+0x3c>
   12dfc:	add	r3, pc, r3
   12e00:	mov	r0, r3
   12e04:	bl	11248 <__tls_get_addr@plt>
   12e08:	mov	r2, r0
   12e0c:	ldr	r3, [pc, #24]	; 12e2c <mmk_ctx@@Base+0x40>
   12e10:	ldr	r3, [r2, r3]
   12e14:	mov	r0, r3
   12e18:	sub	sp, fp, #4
   12e1c:	ldr	fp, [sp]
   12e20:	add	sp, sp, #4
   12e24:	pop	{pc}		; (ldr pc, [sp], #4)
   12e28:	andeq	r2, r1, r8, asr r2
   12e2c:	andeq	r0, r0, r8

00012e30 <mmk_set_ctx@@Base>:
   12e30:	str	fp, [sp, #-8]!
   12e34:	str	lr, [sp, #4]
   12e38:	add	fp, sp, #4
   12e3c:	sub	sp, sp, #8
   12e40:	str	r0, [fp, #-8]
   12e44:	ldr	r3, [pc, #44]	; 12e78 <mmk_set_ctx@@Base+0x48>
   12e48:	add	r3, pc, r3
   12e4c:	mov	r0, r3
   12e50:	bl	11248 <__tls_get_addr@plt>
   12e54:	mov	r1, r0
   12e58:	ldr	r2, [pc, #28]	; 12e7c <mmk_set_ctx@@Base+0x4c>
   12e5c:	ldr	r3, [fp, #-8]
   12e60:	str	r3, [r1, r2]
   12e64:	nop	{0}
   12e68:	sub	sp, fp, #4
   12e6c:	ldr	fp, [sp]
   12e70:	add	sp, sp, #4
   12e74:	pop	{pc}		; (ldr pc, [sp], #4)
   12e78:	andeq	r2, r1, ip, lsl #4
   12e7c:	andeq	r0, r0, r8

00012e80 <create_trampoline@@Base>:
   12e80:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12e84:	strd	r6, [sp, #8]
   12e88:	ldr	r6, [pc, #268]	; 12f9c <create_trampoline@@Base+0x11c>
   12e8c:	strd	r8, [sp, #16]
   12e90:	ldr	r2, [pc, #264]	; 12fa0 <create_trampoline@@Base+0x120>
   12e94:	str	lr, [sp, #24]
   12e98:	sub	sp, sp, #12
   12e9c:	ldr	r3, [pc, #256]	; 12fa4 <create_trampoline@@Base+0x124>
   12ea0:	add	r6, pc, r6
   12ea4:	ldr	r5, [r6, r2]
   12ea8:	ldr	r9, [r6, r3]
   12eac:	sub	r5, r5, r9
   12eb0:	cmp	r5, #4096	; 0x1000
   12eb4:	bcs	12f34 <create_trampoline@@Base+0xb4>
   12eb8:	mov	ip, #0
   12ebc:	mvn	r2, #0
   12ec0:	mov	r8, r0
   12ec4:	mov	r7, r1
   12ec8:	mov	r0, ip
   12ecc:	mov	r3, #34	; 0x22
   12ed0:	stm	sp, {r2, ip}
   12ed4:	mov	r1, #4096	; 0x1000
   12ed8:	mov	r2, #7
   12edc:	bl	111f4 <mmap@plt>
   12ee0:	cmn	r0, #1
   12ee4:	mov	r4, r0
   12ee8:	beq	12f68 <create_trampoline@@Base+0xe8>
   12eec:	add	r6, r0, #8
   12ef0:	mov	r2, r5
   12ef4:	str	r8, [r4]
   12ef8:	mov	r1, r9
   12efc:	mov	r0, r6
   12f00:	str	r7, [r4, #4]
   12f04:	bl	111ac <memcpy@plt>
   12f08:	mov	r0, r4
   12f0c:	mov	r2, #5
   12f10:	mov	r1, #4096	; 0x1000
   12f14:	bl	11194 <mprotect@plt>
   12f18:	mov	r0, r6
   12f1c:	add	sp, sp, #12
   12f20:	ldrd	r4, [sp]
   12f24:	ldrd	r6, [sp, #8]
   12f28:	ldrd	r8, [sp, #16]
   12f2c:	add	sp, sp, #24
   12f30:	pop	{pc}		; (ldr pc, [sp], #4)
   12f34:	ldr	r1, [pc, #108]	; 12fa8 <create_trampoline@@Base+0x128>
   12f38:	mov	r3, #45	; 0x2d
   12f3c:	ldr	r0, [pc, #104]	; 12fac <create_trampoline@@Base+0x12c>
   12f40:	ldr	r2, [pc, #104]	; 12fb0 <create_trampoline@@Base+0x130>
   12f44:	add	r1, pc, r1
   12f48:	ldr	r0, [r6, r0]
   12f4c:	str	r1, [sp]
   12f50:	ldr	r1, [pc, #92]	; 12fb4 <create_trampoline@@Base+0x134>
   12f54:	add	r2, pc, r2
   12f58:	ldr	r0, [r0]
   12f5c:	add	r1, pc, r1
   12f60:	bl	1120c <fprintf@plt>
   12f64:	bl	11260 <abort@plt>
   12f68:	ldr	r1, [pc, #72]	; 12fb8 <create_trampoline@@Base+0x138>
   12f6c:	mov	r3, #69	; 0x45
   12f70:	ldr	r0, [pc, #52]	; 12fac <create_trampoline@@Base+0x12c>
   12f74:	ldr	r2, [pc, #64]	; 12fbc <create_trampoline@@Base+0x13c>
   12f78:	add	r1, pc, r1
   12f7c:	ldr	r0, [r6, r0]
   12f80:	str	r1, [sp]
   12f84:	ldr	r1, [pc, #52]	; 12fc0 <create_trampoline@@Base+0x140>
   12f88:	add	r2, pc, r2
   12f8c:	ldr	r0, [r0]
   12f90:	add	r1, pc, r1
   12f94:	bl	1120c <fprintf@plt>
   12f98:	bl	11260 <abort@plt>
   12f9c:	andeq	r2, r1, r8, asr r1
   12fa0:	andeq	r0, r0, r4, rrx
   12fa4:	andeq	r0, r0, ip, rrx
   12fa8:	andeq	r0, r0, r8, lsr #28
   12fac:	andeq	r0, r0, r8, rrx
   12fb0:	andeq	r0, r0, r0, lsr #27
   12fb4:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   12fb8:	andeq	r0, r0, r0, lsl lr
   12fbc:	andeq	r0, r0, ip, ror #26
   12fc0:			; <UNDEFINED> instruction: 0x00000dbc

00012fc4 <destroy_trampoline@@Base>:
   12fc4:	sub	r0, r0, #8
   12fc8:	mov	r1, #4096	; 0x1000
   12fcc:	b	11230 <munmap@plt>

00012fd0 <mmk_verify_set_times@@Base>:
   12fd0:	str	fp, [sp, #-8]!
   12fd4:	str	lr, [sp, #4]
   12fd8:	add	fp, sp, #4
   12fdc:	sub	sp, sp, #8
   12fe0:	str	r0, [fp, #-8]
   12fe4:	ldr	r3, [pc, #44]	; 13018 <mmk_verify_set_times@@Base+0x48>
   12fe8:	add	r3, pc, r3
   12fec:	mov	r0, r3
   12ff0:	bl	11248 <__tls_get_addr@plt>
   12ff4:	mov	r1, r0
   12ff8:	ldr	r2, [pc, #28]	; 1301c <mmk_verify_set_times@@Base+0x4c>
   12ffc:	ldr	r3, [fp, #-8]
   13000:	str	r3, [r1, r2]
   13004:	nop	{0}
   13008:	sub	sp, fp, #4
   1300c:	ldr	fp, [sp]
   13010:	add	sp, sp, #4
   13014:	pop	{pc}		; (ldr pc, [sp], #4)
   13018:	andeq	r2, r1, ip, rrx
   1301c:	andeq	r0, r0, ip

00013020 <mmk_verify_times@@Base>:
   13020:	str	fp, [sp, #-8]!
   13024:	str	lr, [sp, #4]
   13028:	add	fp, sp, #4
   1302c:	sub	sp, sp, #16
   13030:	str	r0, [fp, #-16]
   13034:	ldr	r3, [pc, #272]	; 1314c <mmk_verify_times@@Base+0x12c>
   13038:	add	r3, pc, r3
   1303c:	mov	r0, r3
   13040:	bl	11248 <__tls_get_addr@plt>
   13044:	mov	r2, r0
   13048:	ldr	r3, [pc, #256]	; 13150 <mmk_verify_times@@Base+0x130>
   1304c:	ldr	r3, [r2, r3]
   13050:	str	r3, [fp, #-8]
   13054:	ldr	r3, [fp, #-16]
   13058:	ldr	r3, [r3, #4]
   1305c:	cmp	r3, #0
   13060:	beq	1307c <mmk_verify_times@@Base+0x5c>
   13064:	ldr	r3, [fp, #-8]
   13068:	cmp	r3, #0
   1306c:	moveq	r3, #1
   13070:	movne	r3, #0
   13074:	uxtb	r3, r3
   13078:	b	13138 <mmk_verify_times@@Base+0x118>
   1307c:	ldr	r3, [fp, #-16]
   13080:	ldr	r3, [r3, #8]
   13084:	cmp	r3, #0
   13088:	bne	1309c <mmk_verify_times@@Base+0x7c>
   1308c:	ldr	r3, [fp, #-16]
   13090:	ldr	r3, [r3, #12]
   13094:	cmp	r3, #0
   13098:	beq	130f4 <mmk_verify_times@@Base+0xd4>
   1309c:	ldr	r3, [fp, #-16]
   130a0:	ldr	r3, [r3, #12]
   130a4:	cmp	r3, #0
   130a8:	beq	130b8 <mmk_verify_times@@Base+0x98>
   130ac:	ldr	r3, [fp, #-16]
   130b0:	ldr	r3, [r3, #12]
   130b4:	b	130bc <mmk_verify_times@@Base+0x9c>
   130b8:	ldr	r3, [fp, #-8]
   130bc:	str	r3, [fp, #-12]
   130c0:	ldr	r3, [fp, #-16]
   130c4:	ldr	r3, [r3, #8]
   130c8:	ldr	r2, [fp, #-8]
   130cc:	cmp	r2, r3
   130d0:	bcc	130ec <mmk_verify_times@@Base+0xcc>
   130d4:	ldr	r2, [fp, #-8]
   130d8:	ldr	r3, [fp, #-12]
   130dc:	cmp	r2, r3
   130e0:	bhi	130ec <mmk_verify_times@@Base+0xcc>
   130e4:	mov	r3, #1
   130e8:	b	13138 <mmk_verify_times@@Base+0x118>
   130ec:	mov	r3, #0
   130f0:	b	13138 <mmk_verify_times@@Base+0x118>
   130f4:	ldr	r3, [fp, #-16]
   130f8:	ldr	r3, [r3, #20]
   130fc:	cmp	r3, #0
   13100:	beq	1311c <mmk_verify_times@@Base+0xfc>
   13104:	ldr	r3, [fp, #-16]
   13108:	ldr	r3, [r3, #20]
   1310c:	ldr	r0, [fp, #-8]
   13110:	blx	r3
   13114:	mov	r3, r0
   13118:	b	13138 <mmk_verify_times@@Base+0x118>
   1311c:	ldr	r3, [fp, #-16]
   13120:	ldr	r3, [r3, #16]
   13124:	ldr	r2, [fp, #-8]
   13128:	cmp	r2, r3
   1312c:	moveq	r3, #1
   13130:	movne	r3, #0
   13134:	uxtb	r3, r3
   13138:	mov	r0, r3
   1313c:	sub	sp, fp, #4
   13140:	ldr	fp, [sp]
   13144:	add	sp, sp, #4
   13148:	pop	{pc}		; (ldr pc, [sp], #4)
   1314c:	andeq	r2, r1, ip, lsl r0
   13150:	andeq	r0, r0, ip
   13154:	str	fp, [sp, #-8]!
   13158:	str	lr, [sp, #4]
   1315c:	add	fp, sp, #4
   13160:	sub	sp, sp, #32
   13164:	str	r0, [fp, #-24]	; 0xffffffe8
   13168:	str	r1, [fp, #-28]	; 0xffffffe4
   1316c:	str	r2, [fp, #-32]	; 0xffffffe0
   13170:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13174:	add	r3, r3, #4
   13178:	str	r3, [fp, #-28]	; 0xffffffe4
   1317c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13180:	sub	r3, r3, #4
   13184:	str	r3, [fp, #-32]	; 0xffffffe0
   13188:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1318c:	bl	1222c <mmk_mock_params_begin@@Base>
   13190:	str	r0, [fp, #-8]
   13194:	b	131f4 <mmk_verify_times@@Base+0x1d4>
   13198:	ldr	r3, [fp, #-8]
   1319c:	add	r3, r3, #4
   131a0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   131a4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   131a8:	mov	r0, r3
   131ac:	bl	13464 <mmk_memcmp@@Base>
   131b0:	str	r0, [fp, #-12]
   131b4:	ldr	r3, [fp, #-12]
   131b8:	cmp	r3, #0
   131bc:	bne	131e4 <mmk_verify_times@@Base+0x1c4>
   131c0:	ldr	r3, [fp, #-8]
   131c4:	str	r3, [fp, #-16]
   131c8:	ldr	r3, [fp, #-16]
   131cc:	ldr	r3, [r3]
   131d0:	add	r2, r3, #1
   131d4:	ldr	r3, [fp, #-16]
   131d8:	str	r2, [r3]
   131dc:	mov	r3, #1
   131e0:	b	13204 <mmk_verify_times@@Base+0x1e4>
   131e4:	ldr	r1, [fp, #-8]
   131e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   131ec:	bl	12280 <mmk_mock_params_next@@Base>
   131f0:	str	r0, [fp, #-8]
   131f4:	ldr	r3, [fp, #-8]
   131f8:	cmp	r3, #0
   131fc:	bne	13198 <mmk_verify_times@@Base+0x178>
   13200:	mov	r3, #0
   13204:	mov	r0, r3
   13208:	sub	sp, fp, #4
   1320c:	ldr	fp, [sp]
   13210:	add	sp, sp, #4
   13214:	pop	{pc}		; (ldr pc, [sp], #4)

00013218 <mmk_verify_register_call@@Base>:
   13218:	str	r4, [sp, #-12]!
   1321c:	str	fp, [sp, #4]
   13220:	str	lr, [sp, #8]
   13224:	add	fp, sp, #8
   13228:	sub	sp, sp, #28
   1322c:	str	r0, [fp, #-24]	; 0xffffffe8
   13230:	str	r1, [fp, #-28]	; 0xffffffe4
   13234:	ldr	r4, [pc, #520]	; 13444 <mmk_verify_register_call@@Base+0x22c>
   13238:	add	r4, pc, r4
   1323c:	bl	12dec <mmk_ctx@@Base>
   13240:	mov	r3, r0
   13244:	mov	r0, r3
   13248:	bl	12960 <mmk_stub_context@@Base>
   1324c:	str	r0, [fp, #-16]
   13250:	ldr	r3, [fp, #-16]
   13254:	ldr	r3, [r3, #8]
   13258:	cmp	r3, #0
   1325c:	bne	132c4 <mmk_verify_register_call@@Base+0xac>
   13260:	mov	r0, #4096	; 0x1000
   13264:	bl	13690 <mmk_malloc@@Base>
   13268:	mov	r2, r0
   1326c:	ldr	r3, [fp, #-16]
   13270:	str	r2, [r3, #8]
   13274:	ldr	r3, [fp, #-16]
   13278:	ldr	r3, [r3, #8]
   1327c:	cmp	r3, #0
   13280:	bne	132b8 <mmk_verify_register_call@@Base+0xa0>
   13284:	ldr	r3, [pc, #444]	; 13448 <mmk_verify_register_call@@Base+0x230>
   13288:	ldr	r3, [r4, r3]
   1328c:	ldr	r0, [r3]
   13290:	ldr	r3, [pc, #436]	; 1344c <mmk_verify_register_call@@Base+0x234>
   13294:	add	r3, pc, r3
   13298:	str	r3, [sp]
   1329c:	mov	r3, #79	; 0x4f
   132a0:	ldr	r2, [pc, #424]	; 13450 <mmk_verify_register_call@@Base+0x238>
   132a4:	add	r2, pc, r2
   132a8:	ldr	r1, [pc, #420]	; 13454 <mmk_verify_register_call@@Base+0x23c>
   132ac:	add	r1, pc, r1
   132b0:	bl	1120c <fprintf@plt>
   132b4:	bl	11260 <abort@plt>
   132b8:	ldr	r3, [fp, #-16]
   132bc:	mov	r2, #4096	; 0x1000
   132c0:	str	r2, [r3, #16]
   132c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   132c8:	mov	r2, r3
   132cc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   132d0:	ldr	r0, [fp, #-16]
   132d4:	bl	13154 <mmk_verify_times@@Base+0x134>
   132d8:	mov	r3, r0
   132dc:	cmp	r3, #0
   132e0:	bne	1342c <mmk_verify_register_call@@Base+0x214>
   132e4:	ldr	r3, [fp, #-16]
   132e8:	ldr	r2, [r3, #12]
   132ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   132f0:	add	r3, r2, r3
   132f4:	add	r2, r3, #4
   132f8:	ldr	r3, [fp, #-16]
   132fc:	ldr	r3, [r3, #16]
   13300:	cmp	r2, r3
   13304:	bcc	133b0 <mmk_verify_register_call@@Base+0x198>
   13308:	b	13320 <mmk_verify_register_call@@Base+0x108>
   1330c:	ldr	r3, [fp, #-16]
   13310:	ldr	r3, [r3, #16]
   13314:	add	r2, r3, #4096	; 0x1000
   13318:	ldr	r3, [fp, #-16]
   1331c:	str	r2, [r3, #16]
   13320:	ldr	r3, [fp, #-16]
   13324:	ldr	r2, [r3, #12]
   13328:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1332c:	add	r3, r2, r3
   13330:	add	r2, r3, #4
   13334:	ldr	r3, [fp, #-16]
   13338:	ldr	r3, [r3, #16]
   1333c:	cmp	r2, r3
   13340:	bcs	1330c <mmk_verify_register_call@@Base+0xf4>
   13344:	ldr	r3, [fp, #-16]
   13348:	ldr	r2, [r3, #8]
   1334c:	ldr	r3, [fp, #-16]
   13350:	ldr	r3, [r3, #16]
   13354:	mov	r1, r3
   13358:	mov	r0, r2
   1335c:	bl	136b0 <mmk_realloc@@Base>
   13360:	mov	r2, r0
   13364:	ldr	r3, [fp, #-16]
   13368:	str	r2, [r3, #8]
   1336c:	ldr	r3, [fp, #-16]
   13370:	ldr	r3, [r3, #8]
   13374:	cmp	r3, #0
   13378:	bne	133b0 <mmk_verify_register_call@@Base+0x198>
   1337c:	ldr	r3, [pc, #196]	; 13448 <mmk_verify_register_call@@Base+0x230>
   13380:	ldr	r3, [r4, r3]
   13384:	ldr	r0, [r3]
   13388:	ldr	r3, [pc, #200]	; 13458 <mmk_verify_register_call@@Base+0x240>
   1338c:	add	r3, pc, r3
   13390:	str	r3, [sp]
   13394:	mov	r3, #91	; 0x5b
   13398:	ldr	r2, [pc, #188]	; 1345c <mmk_verify_register_call@@Base+0x244>
   1339c:	add	r2, pc, r2
   133a0:	ldr	r1, [pc, #184]	; 13460 <mmk_verify_register_call@@Base+0x248>
   133a4:	add	r1, pc, r1
   133a8:	bl	1120c <fprintf@plt>
   133ac:	bl	11260 <abort@plt>
   133b0:	ldr	r3, [fp, #-16]
   133b4:	ldr	r2, [r3, #8]
   133b8:	ldr	r3, [fp, #-16]
   133bc:	ldr	r3, [r3, #12]
   133c0:	add	r3, r2, r3
   133c4:	sub	r1, fp, #28
   133c8:	mov	r2, #4
   133cc:	mov	r0, r3
   133d0:	bl	134b8 <mmk_memcpy@@Base>
   133d4:	ldr	r3, [fp, #-16]
   133d8:	ldr	r2, [r3, #8]
   133dc:	ldr	r3, [fp, #-16]
   133e0:	ldr	r3, [r3, #12]
   133e4:	add	r3, r3, #4
   133e8:	add	r3, r2, r3
   133ec:	ldr	r2, [fp, #-28]	; 0xffffffe4
   133f0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   133f4:	mov	r0, r3
   133f8:	bl	134b8 <mmk_memcpy@@Base>
   133fc:	str	r0, [fp, #-20]	; 0xffffffec
   13400:	ldr	r3, [fp, #-20]	; 0xffffffec
   13404:	mov	r2, #1
   13408:	str	r2, [r3]
   1340c:	ldr	r3, [fp, #-16]
   13410:	ldr	r2, [r3, #12]
   13414:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13418:	add	r3, r2, r3
   1341c:	add	r2, r3, #4
   13420:	ldr	r3, [fp, #-16]
   13424:	str	r2, [r3, #12]
   13428:	b	13430 <mmk_verify_register_call@@Base+0x218>
   1342c:	nop	{0}
   13430:	sub	sp, fp, #8
   13434:	ldr	r4, [sp]
   13438:	ldr	fp, [sp, #4]
   1343c:	add	sp, sp, #8
   13440:	pop	{pc}		; (ldr pc, [sp], #4)
   13444:	andeq	r1, r1, r0, asr #27
   13448:	andeq	r0, r0, r8, rrx
   1344c:	andeq	r0, r0, ip, ror fp
   13450:	strdeq	r0, [r0], -r8
   13454:	andeq	r0, r0, r4, asr #22
   13458:	andeq	r0, r0, r4, lsl #21
   1345c:	andeq	r0, r0, r0, lsl #20
   13460:	andeq	r0, r0, ip, asr #20

00013464 <mmk_memcmp@@Base>:
   13464:	cmp	r2, #0
   13468:	beq	134a0 <mmk_memcmp@@Base+0x3c>
   1346c:	ldrb	r3, [r0]
   13470:	ldrb	ip, [r1]
   13474:	cmp	r3, ip
   13478:	subeq	r2, r2, #1
   1347c:	addeq	r2, r1, r2
   13480:	beq	13498 <mmk_memcmp@@Base+0x34>
   13484:	b	134a8 <mmk_memcmp@@Base+0x44>
   13488:	ldrb	r3, [r0, #1]!
   1348c:	ldrb	ip, [r1, #1]!
   13490:	cmp	r3, ip
   13494:	bne	134a8 <mmk_memcmp@@Base+0x44>
   13498:	cmp	r1, r2
   1349c:	bne	13488 <mmk_memcmp@@Base+0x24>
   134a0:	mov	r0, #0
   134a4:	bx	lr
   134a8:	cmp	ip, r3
   134ac:	mvnhi	r0, #0
   134b0:	movls	r0, #1
   134b4:	bx	lr

000134b8 <mmk_memcpy@@Base>:
   134b8:	cmp	r2, #0
   134bc:	beq	134dc <mmk_memcpy@@Base+0x24>
   134c0:	sub	r1, r1, #1
   134c4:	add	r2, r0, r2
   134c8:	mov	r3, r0
   134cc:	ldrb	ip, [r1, #1]!
   134d0:	strb	ip, [r3], #1
   134d4:	cmp	r3, r2
   134d8:	bne	134cc <mmk_memcpy@@Base+0x14>
   134dc:	bx	lr

000134e0 <mmk_strneq@@Base>:
   134e0:	ldrb	r3, [r0]
   134e4:	cmp	r3, #0
   134e8:	beq	1357c <mmk_strneq@@Base+0x9c>
   134ec:	ldrb	ip, [r1]
   134f0:	cmp	ip, #0
   134f4:	beq	1357c <mmk_strneq@@Base+0x9c>
   134f8:	cmp	r2, #0
   134fc:	beq	1356c <mmk_strneq@@Base+0x8c>
   13500:	cmp	r3, ip
   13504:	bne	13574 <mmk_strneq@@Base+0x94>
   13508:	add	r3, r1, #1
   1350c:	push	{lr}		; (str lr, [sp, #-4]!)
   13510:	b	13530 <mmk_strneq@@Base+0x50>
   13514:	ldrb	lr, [r3], #1
   13518:	cmp	lr, #0
   1351c:	beq	13544 <mmk_strneq@@Base+0x64>
   13520:	cmp	r2, #0
   13524:	beq	1355c <mmk_strneq@@Base+0x7c>
   13528:	cmp	ip, lr
   1352c:	bne	13564 <mmk_strneq@@Base+0x84>
   13530:	ldrb	ip, [r0, #1]!
   13534:	sub	r2, r2, #1
   13538:	mov	r1, r3
   1353c:	cmp	ip, #0
   13540:	bne	13514 <mmk_strneq@@Base+0x34>
   13544:	cmp	r2, #0
   13548:	beq	1355c <mmk_strneq@@Base+0x7c>
   1354c:	ldrb	r0, [r1]
   13550:	clz	r0, r0
   13554:	lsr	r0, r0, #5
   13558:	pop	{pc}		; (ldr pc, [sp], #4)
   1355c:	mov	r0, #1
   13560:	pop	{pc}		; (ldr pc, [sp], #4)
   13564:	mov	r0, #0
   13568:	pop	{pc}		; (ldr pc, [sp], #4)
   1356c:	mov	r0, #1
   13570:	bx	lr
   13574:	mov	r0, #0
   13578:	bx	lr
   1357c:	cmp	r2, #0
   13580:	beq	1356c <mmk_strneq@@Base+0x8c>
   13584:	ldrb	r0, [r1]
   13588:	clz	r0, r0
   1358c:	lsr	r0, r0, #5
   13590:	bx	lr

00013594 <mmk_strchr@@Base>:
   13594:	ldrb	r2, [r0]
   13598:	cmp	r2, #0
   1359c:	beq	135c8 <mmk_strchr@@Base+0x34>
   135a0:	cmp	r1, r2
   135a4:	bne	135b4 <mmk_strchr@@Base+0x20>
   135a8:	b	135d0 <mmk_strchr@@Base+0x3c>
   135ac:	cmp	r3, r1
   135b0:	beq	135cc <mmk_strchr@@Base+0x38>
   135b4:	ldrb	r3, [r0, #1]!
   135b8:	cmp	r3, #0
   135bc:	bne	135ac <mmk_strchr@@Base+0x18>
   135c0:	mov	r0, r3
   135c4:	bx	lr
   135c8:	mov	r0, r2
   135cc:	bx	lr
   135d0:	bx	lr

000135d4 <mmk_strcpy@@Base>:
   135d4:	ldrb	r3, [r1]
   135d8:	mov	r2, r0
   135dc:	cmp	r3, #0
   135e0:	beq	135f4 <mmk_strcpy@@Base+0x20>
   135e4:	strb	r3, [r2], #1
   135e8:	ldrb	r3, [r1, #1]!
   135ec:	cmp	r3, #0
   135f0:	bne	135e4 <mmk_strcpy@@Base+0x10>
   135f4:	mov	r3, #0
   135f8:	mov	r0, r2
   135fc:	strb	r3, [r2]
   13600:	bx	lr

00013604 <mmk_strncpy@@Base>:
   13604:	ldrb	ip, [r1]
   13608:	mov	r3, r0
   1360c:	cmp	r2, #0
   13610:	cmpne	ip, #0
   13614:	beq	13630 <mmk_strncpy@@Base+0x2c>
   13618:	add	r2, r0, r2
   1361c:	strb	ip, [r3], #1
   13620:	ldrb	ip, [r1, #1]!
   13624:	cmp	r3, r2
   13628:	cmpne	ip, #0
   1362c:	bne	1361c <mmk_strncpy@@Base+0x18>
   13630:	mov	r2, #0
   13634:	mov	r0, r3
   13638:	strb	r2, [r3]
   1363c:	bx	lr

00013640 <mmk_strlen@@Base>:
   13640:	ldrb	r3, [r0]
   13644:	cmp	r3, #0
   13648:	beq	13668 <mmk_strlen@@Base+0x28>
   1364c:	mov	r3, r0
   13650:	rsb	r1, r0, #1
   13654:	add	r0, r3, r1
   13658:	ldrb	r2, [r3, #1]!
   1365c:	cmp	r2, #0
   13660:	bne	13654 <mmk_strlen@@Base+0x14>
   13664:	bx	lr
   13668:	mov	r0, r3
   1366c:	bx	lr

00013670 <mmk_isspace@@Base>:
   13670:	sub	r3, r0, #9
   13674:	cmp	r0, #32
   13678:	cmpne	r3, #1
   1367c:	subhi	r0, r0, #13
   13680:	clzhi	r0, r0
   13684:	lsrhi	r0, r0, #5
   13688:	movls	r0, #1
   1368c:	bx	lr

00013690 <mmk_malloc@@Base>:
   13690:	ldr	r3, [pc, #16]	; 136a8 <mmk_malloc@@Base+0x18>
   13694:	ldr	r2, [pc, #16]	; 136ac <mmk_malloc@@Base+0x1c>
   13698:	add	r3, pc, r3
   1369c:	ldr	r3, [r3, r2]
   136a0:	ldr	r3, [r3]
   136a4:	bx	r3
   136a8:	andeq	r1, r1, r0, ror #18
   136ac:	andeq	r0, r0, r8, lsl #1

000136b0 <mmk_realloc@@Base>:
   136b0:	ldr	r3, [pc, #16]	; 136c8 <mmk_realloc@@Base+0x18>
   136b4:	ldr	r2, [pc, #16]	; 136cc <mmk_realloc@@Base+0x1c>
   136b8:	add	r3, pc, r3
   136bc:	ldr	r3, [r3, r2]
   136c0:	ldr	r3, [r3]
   136c4:	bx	r3
   136c8:	andeq	r1, r1, r0, asr #18
   136cc:	andeq	r0, r0, r4, ror r0

000136d0 <mmk_free@@Base>:
   136d0:	ldr	r3, [pc, #16]	; 136e8 <mmk_free@@Base+0x18>
   136d4:	ldr	r2, [pc, #16]	; 136ec <mmk_free@@Base+0x1c>
   136d8:	add	r3, pc, r3
   136dc:	ldr	r3, [r3, r2]
   136e0:	ldr	r3, [r3]
   136e4:	bx	r3
   136e8:	andeq	r1, r1, r0, lsr #18
   136ec:	andeq	r0, r0, r4, lsl #1

000136f0 <mmk_init_vital_functions@@Base>:
   136f0:	strd	r4, [sp, #-12]!
   136f4:	mov	r5, r0
   136f8:	mov	r0, #0
   136fc:	str	lr, [sp, #8]
   13700:	sub	sp, sp, #12
   13704:	bl	111c4 <malloc@plt>
   13708:	mov	r1, #0
   1370c:	ldr	r4, [pc, #288]	; 13834 <mmk_init_vital_functions@@Base+0x144>
   13710:	bl	111b8 <realloc@plt>
   13714:	bl	111a0 <free@plt>
   13718:	ldr	r1, [pc, #280]	; 13838 <mmk_init_vital_functions@@Base+0x148>
   1371c:	mov	r0, r5
   13720:	add	r4, pc, r4
   13724:	add	r1, pc, r1
   13728:	bl	128f8 <plt_get_real_fn@@Base>
   1372c:	ldr	r3, [pc, #264]	; 1383c <mmk_init_vital_functions@@Base+0x14c>
   13730:	cmp	r0, #0
   13734:	ldr	r3, [r4, r3]
   13738:	str	r0, [r3]
   1373c:	beq	13798 <mmk_init_vital_functions@@Base+0xa8>
   13740:	ldr	r1, [pc, #248]	; 13840 <mmk_init_vital_functions@@Base+0x150>
   13744:	mov	r0, r5
   13748:	add	r1, pc, r1
   1374c:	bl	128f8 <plt_get_real_fn@@Base>
   13750:	ldr	r3, [pc, #236]	; 13844 <mmk_init_vital_functions@@Base+0x154>
   13754:	cmp	r0, #0
   13758:	ldr	r3, [r4, r3]
   1375c:	str	r0, [r3]
   13760:	beq	13800 <mmk_init_vital_functions@@Base+0x110>
   13764:	ldr	r1, [pc, #220]	; 13848 <mmk_init_vital_functions@@Base+0x158>
   13768:	mov	r0, r5
   1376c:	add	r1, pc, r1
   13770:	bl	128f8 <plt_get_real_fn@@Base>
   13774:	ldr	r3, [pc, #208]	; 1384c <mmk_init_vital_functions@@Base+0x15c>
   13778:	cmp	r0, #0
   1377c:	ldr	r3, [r4, r3]
   13780:	str	r0, [r3]
   13784:	beq	137cc <mmk_init_vital_functions@@Base+0xdc>
   13788:	add	sp, sp, #12
   1378c:	ldrd	r4, [sp]
   13790:	add	sp, sp, #8
   13794:	pop	{pc}		; (ldr pc, [sp], #4)
   13798:	ldr	r1, [pc, #176]	; 13850 <mmk_init_vital_functions@@Base+0x160>
   1379c:	mov	r3, #88	; 0x58
   137a0:	ldr	r0, [pc, #172]	; 13854 <mmk_init_vital_functions@@Base+0x164>
   137a4:	ldr	r2, [pc, #172]	; 13858 <mmk_init_vital_functions@@Base+0x168>
   137a8:	add	r1, pc, r1
   137ac:	ldr	r0, [r4, r0]
   137b0:	str	r1, [sp]
   137b4:	ldr	r1, [pc, #160]	; 1385c <mmk_init_vital_functions@@Base+0x16c>
   137b8:	add	r2, pc, r2
   137bc:	ldr	r0, [r0]
   137c0:	add	r1, pc, r1
   137c4:	bl	1120c <fprintf@plt>
   137c8:	bl	11260 <abort@plt>
   137cc:	ldr	r1, [pc, #140]	; 13860 <mmk_init_vital_functions@@Base+0x170>
   137d0:	mov	r3, #90	; 0x5a
   137d4:	ldr	r0, [pc, #120]	; 13854 <mmk_init_vital_functions@@Base+0x164>
   137d8:	ldr	r2, [pc, #132]	; 13864 <mmk_init_vital_functions@@Base+0x174>
   137dc:	add	r1, pc, r1
   137e0:	ldr	r0, [r4, r0]
   137e4:	str	r1, [sp]
   137e8:	ldr	r1, [pc, #120]	; 13868 <mmk_init_vital_functions@@Base+0x178>
   137ec:	add	r2, pc, r2
   137f0:	ldr	r0, [r0]
   137f4:	add	r1, pc, r1
   137f8:	bl	1120c <fprintf@plt>
   137fc:	bl	11260 <abort@plt>
   13800:	ldr	r1, [pc, #100]	; 1386c <mmk_init_vital_functions@@Base+0x17c>
   13804:	mov	r3, #89	; 0x59
   13808:	ldr	r0, [pc, #68]	; 13854 <mmk_init_vital_functions@@Base+0x164>
   1380c:	ldr	r2, [pc, #92]	; 13870 <mmk_init_vital_functions@@Base+0x180>
   13810:	add	r1, pc, r1
   13814:	ldr	r0, [r4, r0]
   13818:	str	r1, [sp]
   1381c:	ldr	r1, [pc, #80]	; 13874 <mmk_init_vital_functions@@Base+0x184>
   13820:	add	r2, pc, r2
   13824:	ldr	r0, [r0]
   13828:	add	r1, pc, r1
   1382c:	bl	1120c <fprintf@plt>
   13830:	bl	11260 <abort@plt>
   13834:	ldrdeq	r1, [r1], -r8
   13838:	strdeq	r0, [r0], -ip
   1383c:	andeq	r0, r0, r8, lsl #1
   13840:	andeq	r0, r0, ip, ror #14
   13844:	andeq	r0, r0, r4, ror r0
   13848:	andeq	r0, r0, r8, lsl #15
   1384c:	andeq	r0, r0, r4, lsl #1
   13850:	ldrdeq	r0, [r0], -r4
   13854:	andeq	r0, r0, r8, rrx
   13858:	andeq	r0, r0, r0, ror r6
   1385c:	andeq	r0, r0, ip, lsl #11
   13860:	andeq	r0, r0, r0, lsr #14
   13864:	andeq	r0, r0, ip, lsr r6
   13868:	andeq	r0, r0, r8, asr r5
   1386c:	andeq	r0, r0, ip, lsr #13
   13870:	andeq	r0, r0, r8, lsl #12
   13874:	andeq	r0, r0, r4, lsr #10

00013878 <mmk_when_init@@Base>:
   13878:	str	fp, [sp, #-8]!
   1387c:	str	lr, [sp, #4]
   13880:	add	fp, sp, #4
   13884:	sub	sp, sp, #8
   13888:	str	r0, [fp, #-8]
   1388c:	ldr	r3, [pc, #44]	; 138c0 <mmk_when_init@@Base+0x48>
   13890:	add	r3, pc, r3
   13894:	mov	r0, r3
   13898:	bl	11248 <__tls_get_addr@plt>
   1389c:	mov	r1, r0
   138a0:	ldr	r2, [pc, #28]	; 138c4 <mmk_when_init@@Base+0x4c>
   138a4:	ldr	r3, [fp, #-8]
   138a8:	str	r3, [r1, r2]
   138ac:	nop	{0}
   138b0:	sub	sp, fp, #4
   138b4:	ldr	fp, [sp]
   138b8:	add	sp, sp, #4
   138bc:	pop	{pc}		; (ldr pc, [sp], #4)
   138c0:	andeq	r1, r1, r4, asr #15
   138c4:	andeq	r0, r0, r0, lsl r0

000138c8 <mmk_when_get_result@@Base>:
   138c8:	str	fp, [sp, #-8]!
   138cc:	str	lr, [sp, #4]
   138d0:	add	fp, sp, #4
   138d4:	ldr	r3, [pc, #40]	; 13904 <mmk_when_get_result@@Base+0x3c>
   138d8:	add	r3, pc, r3
   138dc:	mov	r0, r3
   138e0:	bl	11248 <__tls_get_addr@plt>
   138e4:	mov	r2, r0
   138e8:	ldr	r3, [pc, #24]	; 13908 <mmk_when_get_result@@Base+0x40>
   138ec:	ldr	r3, [r2, r3]
   138f0:	mov	r0, r3
   138f4:	sub	sp, fp, #4
   138f8:	ldr	fp, [sp]
   138fc:	add	sp, sp, #4
   13900:	pop	{pc}		; (ldr pc, [sp], #4)
   13904:	andeq	r1, r1, ip, ror r7
   13908:	andeq	r0, r0, r0, lsl r0

0001390c <mmk_when_impl@@Base>:
   1390c:	str	fp, [sp, #-8]!
   13910:	str	lr, [sp, #4]
   13914:	add	fp, sp, #4
   13918:	sub	sp, sp, #16
   1391c:	str	r0, [fp, #-16]
   13920:	str	r1, [fp, #-20]	; 0xffffffec
   13924:	ldr	r3, [fp, #-20]	; 0xffffffec
   13928:	str	r3, [fp, #-8]
   1392c:	bl	11e6c <mmk_matcher_ctx@@Base>
   13930:	mov	r2, r0
   13934:	ldr	r3, [fp, #-8]
   13938:	str	r2, [r3]
   1393c:	ldr	r3, [fp, #-16]
   13940:	ldr	r2, [r3]
   13944:	ldr	r3, [fp, #-8]
   13948:	str	r2, [r3, #4]
   1394c:	ldr	r3, [fp, #-16]
   13950:	ldr	r2, [fp, #-8]
   13954:	str	r2, [r3]
   13958:	nop	{0}
   1395c:	sub	sp, fp, #4
   13960:	ldr	fp, [sp]
   13964:	add	sp, sp, #4
   13968:	pop	{pc}		; (ldr pc, [sp], #4)

0001396c <mmk_trampoline@@Base>:
   1396c:	sub	ip, pc, #8
   13970:	push	{r0, r1, r2, r3}
   13974:	push	{ip, lr}
   13978:	ldr	r0, [ip, #-8]
   1397c:	ldr	ip, [r0, #4]
   13980:	blx	ip
   13984:	pop	{ip, lr}
   13988:	push	{ip, lr}
   1398c:	ldr	ip, [ip, #-8]
   13990:	ldr	ip, [ip]
   13994:	blx	ip
   13998:	cmp	r0, #0
   1399c:	bne	139ac <mmk_trampoline@@Base+0x40>
   139a0:	pop	{ip, lr}
   139a4:	pop	{r0, r1, r2, r3}
   139a8:	ldr	pc, [ip, #-4]
   139ac:	pop	{ip, lr}
   139b0:	pop	{r0, r1, r2, r3}
   139b4:	push	{ip, lr}
   139b8:	ldr	ip, [ip, #-8]
   139bc:	ldr	ip, [ip, #8]
   139c0:	blx	ip
   139c4:	pop	{ip, pc}

000139c8 <mmk_trampoline_end@@Base>:
   139c8:	nop			; (mov r0, r0)

000139cc <__libc_csu_init@@Base>:
   139cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   139d0:	mov	r7, r0
   139d4:	ldr	r6, [pc, #72]	; 13a24 <__libc_csu_init@@Base+0x58>
   139d8:	ldr	r5, [pc, #72]	; 13a28 <__libc_csu_init@@Base+0x5c>
   139dc:	add	r6, pc, r6
   139e0:	add	r5, pc, r5
   139e4:	sub	r6, r6, r5
   139e8:	mov	r8, r1
   139ec:	mov	r9, r2
   139f0:	bl	1115c <strstr@plt-0x20>
   139f4:	asrs	r6, r6, #2
   139f8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   139fc:	mov	r4, #0
   13a00:	add	r4, r4, #1
   13a04:	ldr	r3, [r5], #4
   13a08:	mov	r2, r9
   13a0c:	mov	r1, r8
   13a10:	mov	r0, r7
   13a14:	blx	r3
   13a18:	cmp	r6, r4
   13a1c:	bne	13a00 <__libc_csu_init@@Base+0x34>
   13a20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a24:	andeq	r1, r1, r8, lsl r5
   13a28:	andeq	r1, r1, r0, lsl r5

00013a2c <__libc_csu_fini@@Base>:
   13a2c:	bx	lr

Disassembly of section .fini:

00013a30 <.fini>:
   13a30:	push	{r3, lr}
   13a34:	pop	{r3, pc}
