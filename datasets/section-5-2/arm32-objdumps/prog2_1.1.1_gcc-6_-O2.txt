
../repos/prog2/1.1.1:     file format elf32-littlearm


Disassembly of section .init:

00010648 <.init>:
   10648:	push	{r3, lr}
   1064c:	bl	1099c <_start@@Base+0x3c>
   10650:	pop	{r3, pc}

Disassembly of section .plt:

00010654 <printf@plt-0x14>:
   10654:	push	{lr}		; (str lr, [sp, #-4]!)
   10658:	ldr	lr, [pc, #4]	; 10664 <printf@plt-0x4>
   1065c:	add	lr, pc, lr
   10660:	ldr	pc, [lr, #8]!
   10664:	muleq	r1, ip, r9

00010668 <printf@plt>:
   10668:	add	ip, pc, #0, 12
   1066c:	add	ip, ip, #16, 20	; 0x10000
   10670:	ldr	pc, [ip, #2460]!	; 0x99c

00010674 <fopen@plt>:
   10674:	add	ip, pc, #0, 12
   10678:	add	ip, ip, #16, 20	; 0x10000
   1067c:	ldr	pc, [ip, #2452]!	; 0x994

00010680 <puts@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2444]!	; 0x98c

0001068c <__libc_start_main@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2436]!	; 0x984

00010698 <__ctype_tolower_loc@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2428]!	; 0x97c

000106a4 <__gmon_start__@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2420]!	; 0x974

000106b0 <memset@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2412]!	; 0x96c

000106bc <fclose@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #16, 20	; 0x10000
   106c4:	ldr	pc, [ip, #2404]!	; 0x964

000106c8 <abort@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #16, 20	; 0x10000
   106d0:	ldr	pc, [ip, #2396]!	; 0x95c

000106d4 <getc@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #16, 20	; 0x10000
   106dc:	ldr	pc, [ip, #2388]!	; 0x954

Disassembly of section .text:

000106e0 <main@@Base>:
   106e0:	ldr	ip, [pc, #604]	; 10944 <main@@Base+0x264>
   106e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   106e8:	vpush	{d8}
   106ec:	add	ip, pc, ip
   106f0:	mov	r4, ip
   106f4:	add	r5, ip, #32
   106f8:	sub	sp, sp, #212	; 0xd4
   106fc:	ldm	r4!, {r0, r1, r2, r3}
   10700:	add	r7, sp, #72	; 0x48
   10704:	mov	lr, r7
   10708:	add	ip, ip, #48	; 0x30
   1070c:	stmia	lr!, {r0, r1, r2, r3}
   10710:	add	r8, sp, #32
   10714:	ldm	r4, {r0, r1, r2, r3}
   10718:	add	r9, sp, #48	; 0x30
   1071c:	mov	r4, r9
   10720:	mov	r6, #205	; 0xcd
   10724:	stm	lr, {r0, r1, r2, r3}
   10728:	mov	lr, #237	; 0xed
   1072c:	ldm	r5, {r0, r1, r2, r3}
   10730:	mov	r5, #250	; 0xfa
   10734:	str	r6, [sp, #8]
   10738:	str	lr, [sp, #12]
   1073c:	stm	r8, {r0, r1, r2, r3}
   10740:	mov	lr, #199	; 0xc7
   10744:	ldm	ip!, {r0, r1, r2, r3}
   10748:	mov	r6, #218	; 0xda
   1074c:	stmia	r4!, {r0, r1, r2, r3}
   10750:	mov	r3, #231	; 0xe7
   10754:	ldm	ip, {r0, r1}
   10758:	str	r3, [sp, #28]
   1075c:	str	r6, [sp, #16]
   10760:	stm	r4, {r0, r1}
   10764:	ldr	r1, [pc, #476]	; 10948 <main@@Base+0x268>
   10768:	ldr	r0, [pc, #476]	; 1094c <main@@Base+0x26c>
   1076c:	add	r1, pc, r1
   10770:	add	r0, pc, r0
   10774:	str	r5, [sp, #20]
   10778:	str	lr, [sp, #24]
   1077c:	bl	10674 <fopen@plt>
   10780:	mov	r2, #104	; 0x68
   10784:	mov	r1, #0
   10788:	mov	r5, #0
   1078c:	mov	r6, r0
   10790:	add	r0, sp, r2
   10794:	bl	106b0 <memset@plt>
   10798:	add	r3, sp, #16
   1079c:	str	r3, [sp, #4]
   107a0:	add	fp, sp, #24
   107a4:	mov	sl, #99	; 0x63
   107a8:	b	107c8 <main@@Base+0xe8>
   107ac:	lsl	r4, r3, #2
   107b0:	bl	10698 <__ctype_tolower_loc@plt>
   107b4:	ldr	r3, [r0]
   107b8:	ldr	r4, [r3, r4]
   107bc:	sub	r4, r4, #97	; 0x61
   107c0:	cmp	r4, #25
   107c4:	bls	1091c <main@@Base+0x23c>
   107c8:	mov	r0, r6
   107cc:	bl	106d4 <getc@plt>
   107d0:	cmn	r0, #1
   107d4:	mov	r4, r0
   107d8:	beq	10894 <main@@Base+0x1b4>
   107dc:	mov	r2, #8
   107e0:	mov	r1, r7
   107e4:	bl	10a88 <in_array@@Base>
   107e8:	cmp	r0, #0
   107ec:	movne	r3, #97	; 0x61
   107f0:	bne	107ac <main@@Base+0xcc>
   107f4:	mov	r2, #4
   107f8:	mov	r1, r8
   107fc:	mov	r0, r4
   10800:	bl	10a88 <in_array@@Base>
   10804:	cmp	r0, #0
   10808:	movne	r3, #101	; 0x65
   1080c:	bne	107ac <main@@Base+0xcc>
   10810:	mov	r0, r4
   10814:	mov	r2, #2
   10818:	add	r1, sp, #8
   1081c:	bl	10a88 <in_array@@Base>
   10820:	cmp	r0, #0
   10824:	movne	r4, #420	; 0x1a4
   10828:	bne	107b0 <main@@Base+0xd0>
   1082c:	mov	r0, r4
   10830:	mov	r2, #6
   10834:	mov	r1, r9
   10838:	bl	10a88 <in_array@@Base>
   1083c:	cmp	r0, #0
   10840:	movne	r4, #444	; 0x1bc
   10844:	bne	107b0 <main@@Base+0xd0>
   10848:	mov	r2, #2
   1084c:	ldr	r1, [sp, #4]
   10850:	mov	r0, r4
   10854:	bl	10a88 <in_array@@Base>
   10858:	cmp	r0, #0
   1085c:	movne	r3, #117	; 0x75
   10860:	bne	107ac <main@@Base+0xcc>
   10864:	mov	r2, #2
   10868:	mov	r1, fp
   1086c:	mov	r0, r4
   10870:	bl	10a88 <in_array@@Base>
   10874:	cmp	r0, #0
   10878:	bne	10938 <main@@Base+0x258>
   1087c:	ldr	r2, [pc, #204]	; 10950 <main@@Base+0x270>
   10880:	add	r3, r4, #128	; 0x80
   10884:	cmp	r3, r2
   10888:	mov	r3, r4
   1088c:	bhi	107bc <main@@Base+0xdc>
   10890:	b	107ac <main@@Base+0xcc>
   10894:	mov	r0, r6
   10898:	bl	106bc <fclose@plt>
   1089c:	ldr	r0, [pc, #176]	; 10954 <main@@Base+0x274>
   108a0:	ldr	r7, [pc, #176]	; 10958 <main@@Base+0x278>
   108a4:	add	r0, pc, r0
   108a8:	bl	10680 <puts@plt>
   108ac:	ldr	r0, [pc, #168]	; 1095c <main@@Base+0x27c>
   108b0:	mov	r1, r5
   108b4:	add	r0, pc, r0
   108b8:	bl	10668 <printf@plt>
   108bc:	vmov	s15, r5
   108c0:	vldr	s17, [pc, #120]	; 10940 <main@@Base+0x260>
   108c4:	add	r7, pc, r7
   108c8:	add	r5, sp, #100	; 0x64
   108cc:	vcvt.f32.s32	s16, s15
   108d0:	add	r6, sp, #204	; 0xcc
   108d4:	mov	r4, #97	; 0x61
   108d8:	ldr	r3, [r5, #4]!
   108dc:	mov	r1, r4
   108e0:	mov	r0, r7
   108e4:	vmov	s14, r3
   108e8:	add	r4, r4, #1
   108ec:	vcvt.f32.s32	s14, s14
   108f0:	vdiv.f32	s15, s14, s16
   108f4:	vmul.f32	s15, s15, s17
   108f8:	vcvt.f64.f32	d7, s15
   108fc:	vmov	r2, r3, d7
   10900:	bl	10668 <printf@plt>
   10904:	cmp	r6, r5
   10908:	bne	108d8 <main@@Base+0x1f8>
   1090c:	mov	r0, #0
   10910:	add	sp, sp, #212	; 0xd4
   10914:	vpop	{d8}
   10918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1091c:	add	r3, sp, #208	; 0xd0
   10920:	add	r4, r3, r4, lsl #2
   10924:	add	r5, r5, #1
   10928:	ldr	r3, [r4, #-104]	; 0xffffff98
   1092c:	add	r3, r3, #1
   10930:	str	r3, [r4, #-104]	; 0xffffff98
   10934:	b	107a0 <main@@Base+0xc0>
   10938:	mov	r3, sl
   1093c:	b	107ac <main@@Base+0xcc>
   10940:	sbcmi	r0, r8, #0
   10944:	andeq	r0, r0, r8, asr #8
   10948:	andeq	r0, r0, r0, lsl r4
   1094c:	andeq	r0, r0, r0, lsl r4
   10950:	andeq	r0, r0, pc, ror r1
   10954:	andeq	r0, r0, r8, lsr #6
   10958:	strdeq	r0, [r0], -r4
   1095c:	andeq	r0, r0, r4, ror #5

00010960 <_start@@Base>:
   10960:	mov	fp, #0
   10964:	mov	lr, #0
   10968:	pop	{r1}		; (ldr r1, [sp], #4)
   1096c:	mov	r2, sp
   10970:	push	{r2}		; (str r2, [sp, #-4]!)
   10974:	push	{r0}		; (str r0, [sp, #-4]!)
   10978:	ldr	ip, [pc, #16]	; 10990 <_start@@Base+0x30>
   1097c:	push	{ip}		; (str ip, [sp, #-4]!)
   10980:	ldr	r0, [pc, #12]	; 10994 <_start@@Base+0x34>
   10984:	ldr	r3, [pc, #12]	; 10998 <_start@@Base+0x38>
   10988:	bl	1068c <__libc_start_main@plt>
   1098c:	bl	106c8 <abort@plt>
   10990:	andeq	r0, r1, ip, lsr #22
   10994:	andeq	r0, r1, r0, ror #13
   10998:	andeq	r0, r1, ip, asr #21
   1099c:	ldr	r3, [pc, #20]	; 109b8 <_start@@Base+0x58>
   109a0:	ldr	r2, [pc, #20]	; 109bc <_start@@Base+0x5c>
   109a4:	add	r3, pc, r3
   109a8:	ldr	r2, [r3, r2]
   109ac:	cmp	r2, #0
   109b0:	bxeq	lr
   109b4:	b	106a4 <__gmon_start__@plt>
   109b8:	andeq	r0, r1, r4, asr r6
   109bc:	andeq	r0, r0, r4, lsr r0
   109c0:	ldr	r3, [pc, #28]	; 109e4 <_start@@Base+0x84>
   109c4:	ldr	r0, [pc, #28]	; 109e8 <_start@@Base+0x88>
   109c8:	sub	r3, r3, r0
   109cc:	cmp	r3, #6
   109d0:	bxls	lr
   109d4:	ldr	r3, [pc, #16]	; 109ec <_start@@Base+0x8c>
   109d8:	cmp	r3, #0
   109dc:	bxeq	lr
   109e0:	bx	r3
   109e4:	andeq	r1, r2, r3, asr #32
   109e8:	andeq	r1, r2, r0, asr #32
   109ec:	andeq	r0, r0, r0
   109f0:	ldr	r1, [pc, #36]	; 10a1c <_start@@Base+0xbc>
   109f4:	ldr	r0, [pc, #36]	; 10a20 <_start@@Base+0xc0>
   109f8:	sub	r1, r1, r0
   109fc:	asr	r1, r1, #2
   10a00:	add	r1, r1, r1, lsr #31
   10a04:	asrs	r1, r1, #1
   10a08:	bxeq	lr
   10a0c:	ldr	r3, [pc, #16]	; 10a24 <_start@@Base+0xc4>
   10a10:	cmp	r3, #0
   10a14:	bxeq	lr
   10a18:	bx	r3
   10a1c:	andeq	r1, r2, r0, asr #32
   10a20:	andeq	r1, r2, r0, asr #32
   10a24:	andeq	r0, r0, r0
   10a28:	push	{r4, lr}
   10a2c:	ldr	r4, [pc, #24]	; 10a4c <_start@@Base+0xec>
   10a30:	ldrb	r3, [r4]
   10a34:	cmp	r3, #0
   10a38:	popne	{r4, pc}
   10a3c:	bl	109c0 <_start@@Base+0x60>
   10a40:	mov	r3, #1
   10a44:	strb	r3, [r4]
   10a48:	pop	{r4, pc}
   10a4c:	andeq	r1, r2, r0, asr #32
   10a50:	ldr	r0, [pc, #40]	; 10a80 <_start@@Base+0x120>
   10a54:	ldr	r3, [r0]
   10a58:	cmp	r3, #0
   10a5c:	bne	10a64 <_start@@Base+0x104>
   10a60:	b	109f0 <_start@@Base+0x90>
   10a64:	ldr	r3, [pc, #24]	; 10a84 <_start@@Base+0x124>
   10a68:	cmp	r3, #0
   10a6c:	beq	10a60 <_start@@Base+0x100>
   10a70:	push	{r4, lr}
   10a74:	blx	r3
   10a78:	pop	{r4, lr}
   10a7c:	b	109f0 <_start@@Base+0x90>
   10a80:	andeq	r0, r2, r4, lsl pc
   10a84:	andeq	r0, r0, r0

00010a88 <in_array@@Base>:
   10a88:	cmp	r2, #0
   10a8c:	blt	10abc <in_array@@Base+0x34>
   10a90:	ldr	r3, [r1]
   10a94:	cmp	r0, r3
   10a98:	beq	10ac4 <in_array@@Base+0x3c>
   10a9c:	mov	r3, #0
   10aa0:	b	10ab0 <in_array@@Base+0x28>
   10aa4:	ldr	ip, [r1, #4]!
   10aa8:	cmp	ip, r0
   10aac:	beq	10ac4 <in_array@@Base+0x3c>
   10ab0:	add	r3, r3, #1
   10ab4:	cmp	r2, r3
   10ab8:	bge	10aa4 <in_array@@Base+0x1c>
   10abc:	mov	r0, #0
   10ac0:	bx	lr
   10ac4:	mov	r0, #1
   10ac8:	bx	lr

00010acc <__libc_csu_init@@Base>:
   10acc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10ad0:	mov	r7, r0
   10ad4:	ldr	r6, [pc, #72]	; 10b24 <__libc_csu_init@@Base+0x58>
   10ad8:	ldr	r5, [pc, #72]	; 10b28 <__libc_csu_init@@Base+0x5c>
   10adc:	add	r6, pc, r6
   10ae0:	add	r5, pc, r5
   10ae4:	sub	r6, r6, r5
   10ae8:	mov	r8, r1
   10aec:	mov	r9, r2
   10af0:	bl	10648 <printf@plt-0x20>
   10af4:	asrs	r6, r6, #2
   10af8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10afc:	mov	r4, #0
   10b00:	add	r4, r4, #1
   10b04:	ldr	r3, [r5], #4
   10b08:	mov	r2, r9
   10b0c:	mov	r1, r8
   10b10:	mov	r0, r7
   10b14:	blx	r3
   10b18:	cmp	r6, r4
   10b1c:	bne	10b00 <__libc_csu_init@@Base+0x34>
   10b20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10b24:	andeq	r0, r1, ip, lsr #8
   10b28:	andeq	r0, r1, r4, lsr #8

00010b2c <__libc_csu_fini@@Base>:
   10b2c:	bx	lr

Disassembly of section .fini:

00010b30 <.fini>:
   10b30:	push	{r3, lr}
   10b34:	pop	{r3, pc}
