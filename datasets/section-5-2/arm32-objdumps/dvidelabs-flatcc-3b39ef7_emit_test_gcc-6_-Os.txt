
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/emit_test:     file format elf32-littlearm


Disassembly of section .init:

00011fb8 <.init>:
   11fb8:	push	{r3, lr}
   11fbc:	bl	12110 <_start@@Base+0x3c>
   11fc0:	pop	{r3, pc}

Disassembly of section .plt:

00011fc4 <raise@plt-0x14>:
   11fc4:	push	{lr}		; (str lr, [sp, #-4]!)
   11fc8:	ldr	lr, [pc, #4]	; 11fd4 <raise@plt-0x4>
   11fcc:	add	lr, pc, lr
   11fd0:	ldr	pc, [lr, #8]!
   11fd4:	andeq	r5, r1, ip, lsr #32

00011fd8 <raise@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #86016	; 0x15000
   11fe0:	ldr	pc, [ip, #44]!	; 0x2c

00011fe4 <printf@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #86016	; 0x15000
   11fec:	ldr	pc, [ip, #36]!	; 0x24

00011ff0 <free@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #86016	; 0x15000
   11ff8:	ldr	pc, [ip, #28]!

00011ffc <memcpy@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #86016	; 0x15000
   12004:	ldr	pc, [ip, #20]!

00012008 <memcmp@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #86016	; 0x15000
   12010:	ldr	pc, [ip, #12]!

00012014 <realloc@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #86016	; 0x15000
   1201c:	ldr	pc, [ip, #4]!

00012020 <puts@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #20, 20	; 0x14000
   12028:	ldr	pc, [ip, #4092]!	; 0xffc

0001202c <malloc@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #20, 20	; 0x14000
   12034:	ldr	pc, [ip, #4084]!	; 0xff4

00012038 <__libc_start_main@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #20, 20	; 0x14000
   12040:	ldr	pc, [ip, #4076]!	; 0xfec

00012044 <__gmon_start__@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #20, 20	; 0x14000
   1204c:	ldr	pc, [ip, #4068]!	; 0xfe4

00012050 <strlen@plt>:
   12050:	add	ip, pc, #0, 12
   12054:	add	ip, ip, #20, 20	; 0x14000
   12058:	ldr	pc, [ip, #4060]!	; 0xfdc

0001205c <fprintf@plt>:
   1205c:	add	ip, pc, #0, 12
   12060:	add	ip, ip, #20, 20	; 0x14000
   12064:	ldr	pc, [ip, #4052]!	; 0xfd4

00012068 <posix_memalign@plt>:
   12068:	add	ip, pc, #0, 12
   1206c:	add	ip, ip, #20, 20	; 0x14000
   12070:	ldr	pc, [ip, #4044]!	; 0xfcc

00012074 <memset@plt>:
   12074:	add	ip, pc, #0, 12
   12078:	add	ip, ip, #20, 20	; 0x14000
   1207c:	ldr	pc, [ip, #4036]!	; 0xfc4

00012080 <memchr@plt>:
   12080:	add	ip, pc, #0, 12
   12084:	add	ip, ip, #20, 20	; 0x14000
   12088:	ldr	pc, [ip, #4028]!	; 0xfbc

0001208c <fputc@plt>:
   1208c:	add	ip, pc, #0, 12
   12090:	add	ip, ip, #20, 20	; 0x14000
   12094:	ldr	pc, [ip, #4020]!	; 0xfb4

00012098 <fputs@plt>:
   12098:	add	ip, pc, #0, 12
   1209c:	add	ip, ip, #20, 20	; 0x14000
   120a0:	ldr	pc, [ip, #4012]!	; 0xfac

000120a4 <abort@plt>:
   120a4:	add	ip, pc, #0, 12
   120a8:	add	ip, ip, #20, 20	; 0x14000
   120ac:	ldr	pc, [ip, #4004]!	; 0xfa4

000120b0 <__assert_fail@plt>:
   120b0:	add	ip, pc, #0, 12
   120b4:	add	ip, ip, #20, 20	; 0x14000
   120b8:	ldr	pc, [ip, #3996]!	; 0xf9c

Disassembly of section .text:

000120bc <main@@Base>:
   120bc:	push	{r4, lr}
   120c0:	bl	123a4 <debug_test@@Base>
   120c4:	mov	r4, r0
   120c8:	bl	12428 <emit_test@@Base>
   120cc:	orr	r0, r4, r0
   120d0:	pop	{r4, pc}

000120d4 <_start@@Base>:
   120d4:	mov	fp, #0
   120d8:	mov	lr, #0
   120dc:	pop	{r1}		; (ldr r1, [sp], #4)
   120e0:	mov	r2, sp
   120e4:	push	{r2}		; (str r2, [sp, #-4]!)
   120e8:	push	{r0}		; (str r0, [sp, #-4]!)
   120ec:	ldr	ip, [pc, #16]	; 12104 <_start@@Base+0x30>
   120f0:	push	{ip}		; (str ip, [sp, #-4]!)
   120f4:	ldr	r0, [pc, #12]	; 12108 <_start@@Base+0x34>
   120f8:	ldr	r3, [pc, #12]	; 1210c <_start@@Base+0x38>
   120fc:	bl	12038 <__libc_start_main@plt>
   12100:	bl	120a4 <abort@plt>
   12104:	andeq	r5, r1, ip, ror #27
   12108:	strheq	r2, [r1], -ip
   1210c:	andeq	r5, r1, ip, lsl #27
   12110:	ldr	r3, [pc, #20]	; 1212c <_start@@Base+0x58>
   12114:	ldr	r2, [pc, #20]	; 12130 <_start@@Base+0x5c>
   12118:	add	r3, pc, r3
   1211c:	ldr	r2, [r3, r2]
   12120:	cmp	r2, #0
   12124:	bxeq	lr
   12128:	b	12044 <__gmon_start__@plt>
   1212c:	andeq	r4, r1, r0, ror #29
   12130:	andeq	r0, r0, r8, asr r0
   12134:	ldr	r3, [pc, #28]	; 12158 <_start@@Base+0x84>
   12138:	ldr	r0, [pc, #28]	; 1215c <_start@@Base+0x88>
   1213c:	sub	r3, r3, r0
   12140:	cmp	r3, #6
   12144:	bxls	lr
   12148:	ldr	r3, [pc, #16]	; 12160 <_start@@Base+0x8c>
   1214c:	cmp	r3, #0
   12150:	bxeq	lr
   12154:	bx	r3
   12158:	andeq	r7, r2, r7, rrx
   1215c:	andeq	r7, r2, r4, rrx
   12160:	andeq	r0, r0, r0
   12164:	ldr	r1, [pc, #36]	; 12190 <_start@@Base+0xbc>
   12168:	ldr	r0, [pc, #36]	; 12194 <_start@@Base+0xc0>
   1216c:	sub	r1, r1, r0
   12170:	asr	r1, r1, #2
   12174:	add	r1, r1, r1, lsr #31
   12178:	asrs	r1, r1, #1
   1217c:	bxeq	lr
   12180:	ldr	r3, [pc, #16]	; 12198 <_start@@Base+0xc4>
   12184:	cmp	r3, #0
   12188:	bxeq	lr
   1218c:	bx	r3
   12190:	andeq	r7, r2, r4, rrx
   12194:	andeq	r7, r2, r4, rrx
   12198:	andeq	r0, r0, r0
   1219c:	push	{r4, lr}
   121a0:	ldr	r4, [pc, #24]	; 121c0 <_start@@Base+0xec>
   121a4:	ldrb	r3, [r4]
   121a8:	cmp	r3, #0
   121ac:	popne	{r4, pc}
   121b0:	bl	12134 <_start@@Base+0x60>
   121b4:	mov	r3, #1
   121b8:	strb	r3, [r4]
   121bc:	pop	{r4, pc}
   121c0:	andeq	r7, r2, ip, rrx
   121c4:	ldr	r0, [pc, #40]	; 121f4 <_start@@Base+0x120>
   121c8:	ldr	r3, [r0]
   121cc:	cmp	r3, #0
   121d0:	bne	121d8 <_start@@Base+0x104>
   121d4:	b	12164 <_start@@Base+0x90>
   121d8:	ldr	r3, [pc, #24]	; 121f8 <_start@@Base+0x124>
   121dc:	cmp	r3, #0
   121e0:	beq	121d4 <_start@@Base+0x100>
   121e4:	push	{r4, lr}
   121e8:	blx	r3
   121ec:	pop	{r4, lr}
   121f0:	b	12164 <_start@@Base+0x90>
   121f4:	andeq	r6, r2, r4, lsl pc
   121f8:	andeq	r0, r0, r0

000121fc <dbg_emitter@@Base>:
   121fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12200:	mov	r7, r2
   12204:	mov	r5, r3
   12208:	mov	r4, r1
   1220c:	ldr	r3, [sp, #32]
   12210:	mov	r2, r5
   12214:	mov	r1, r7
   12218:	ldr	r0, [pc, #108]	; 1228c <dbg_emitter@@Base+0x90>
   1221c:	bl	11fe4 <printf@plt>
   12220:	ldr	r8, [pc, #104]	; 12290 <dbg_emitter@@Base+0x94>
   12224:	ldr	r9, [pc, #104]	; 12294 <dbg_emitter@@Base+0x98>
   12228:	ldr	sl, [pc, #104]	; 12298 <dbg_emitter@@Base+0x9c>
   1222c:	mov	r6, #0
   12230:	cmp	r6, r7
   12234:	blt	12240 <dbg_emitter@@Base+0x44>
   12238:	mov	r0, #0
   1223c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12240:	ldr	r3, [r4]
   12244:	cmp	r3, r8
   12248:	bne	1225c <dbg_emitter@@Base+0x60>
   1224c:	ldr	r2, [r4, #4]
   12250:	mov	r1, r5
   12254:	mov	r0, r9
   12258:	bl	11fe4 <printf@plt>
   1225c:	ldr	r3, [r4]
   12260:	cmp	r3, #0
   12264:	bne	12278 <dbg_emitter@@Base+0x7c>
   12268:	ldr	r2, [r4, #4]
   1226c:	mov	r1, r5
   12270:	mov	r0, sl
   12274:	bl	11fe4 <printf@plt>
   12278:	ldr	r3, [r4, #4]
   1227c:	add	r6, r6, #1
   12280:	add	r5, r5, r3
   12284:	add	r4, r4, #8
   12288:	b	12230 <dbg_emitter@@Base+0x34>
   1228c:	andeq	r5, r1, r8, ror #28
   12290:	andeq	r6, r1, r1, lsr #2
   12294:	muleq	r1, r9, lr
   12298:			; <UNDEFINED> instruction: 0x00015eba
   1229c:	mov	r3, #0
   122a0:	push	{r4, r5, r6, lr}
   122a4:	mov	r2, r3
   122a8:	mov	r6, r1
   122ac:	mov	r1, r3
   122b0:	mov	r4, r0
   122b4:	bl	13714 <flatcc_builder_start_buffer@@Base>
   122b8:	cmp	r0, #0
   122bc:	bne	1238c <dbg_emitter@@Base+0x190>
   122c0:	mov	r1, #3
   122c4:	mov	r0, r4
   122c8:	bl	13f18 <flatcc_builder_start_table@@Base>
   122cc:	subs	r5, r0, #0
   122d0:	beq	122e4 <dbg_emitter@@Base+0xe8>
   122d4:	mov	r1, #0
   122d8:	mov	r0, r4
   122dc:	pop	{r4, r5, r6, lr}
   122e0:	b	137b4 <flatcc_builder_end_buffer@@Base>
   122e4:	mov	r3, #8
   122e8:	mov	r2, r3
   122ec:	mov	r1, r5
   122f0:	mov	r0, r4
   122f4:	bl	14ed8 <flatcc_builder_table_add@@Base>
   122f8:	cmp	r0, #0
   122fc:	beq	122d4 <dbg_emitter@@Base+0xd8>
   12300:	mov	r2, #42	; 0x2a
   12304:	mov	r3, #0
   12308:	cmp	r6, #0
   1230c:	strd	r2, [r0]
   12310:	beq	122d4 <dbg_emitter@@Base+0xd8>
   12314:	mov	r1, #2
   12318:	mov	r0, r4
   1231c:	bl	1508c <flatcc_builder_table_add_offset@@Base>
   12320:	cmp	r0, #0
   12324:	beq	122d4 <dbg_emitter@@Base+0xd8>
   12328:	mov	r3, #1
   1232c:	str	r6, [r0]
   12330:	mov	r2, r3
   12334:	mov	r1, r3
   12338:	mov	r0, r4
   1233c:	bl	14ed8 <flatcc_builder_table_add@@Base>
   12340:	cmp	r0, #0
   12344:	beq	122d4 <dbg_emitter@@Base+0xd8>
   12348:	mov	r3, #1
   1234c:	strb	r3, [r0]
   12350:	mov	r2, r5
   12354:	ldr	r1, [pc, #56]	; 12394 <dbg_emitter@@Base+0x198>
   12358:	mov	r0, r4
   1235c:	bl	144d4 <flatcc_builder_check_required@@Base>
   12360:	cmp	r0, #0
   12364:	bne	1237c <dbg_emitter@@Base+0x180>
   12368:	ldr	r3, [pc, #40]	; 12398 <dbg_emitter@@Base+0x19c>
   1236c:	mov	r2, #21
   12370:	ldr	r1, [pc, #36]	; 1239c <dbg_emitter@@Base+0x1a0>
   12374:	ldr	r0, [pc, #36]	; 123a0 <dbg_emitter@@Base+0x1a4>
   12378:	bl	120b0 <__assert_fail@plt>
   1237c:	mov	r0, r4
   12380:	bl	14554 <flatcc_builder_end_table@@Base>
   12384:	mov	r1, r0
   12388:	b	122d8 <dbg_emitter@@Base+0xdc>
   1238c:	mov	r0, #0
   12390:	pop	{r4, r5, r6, pc}
   12394:	strdeq	r5, [r1], -ip
   12398:	strdeq	r5, [r1], -lr
   1239c:	andeq	r5, r1, r8, ror #29
   123a0:	andeq	r5, r1, r5, asr #30

000123a4 <debug_test@@Base>:
   123a4:	push	{r4, lr}
   123a8:	sub	sp, sp, #280	; 0x118
   123ac:	mov	r2, #40	; 0x28
   123b0:	mov	r1, #0
   123b4:	add	r0, sp, #8
   123b8:	bl	12074 <memset@plt>
   123bc:	mov	r4, #0
   123c0:	ldr	r0, [pc, #88]	; 12420 <debug_test@@Base+0x7c>
   123c4:	bl	12020 <puts@plt>
   123c8:	mov	r3, r4
   123cc:	mov	r2, r4
   123d0:	str	r4, [sp]
   123d4:	ldr	r1, [pc, #72]	; 12424 <debug_test@@Base+0x80>
   123d8:	add	r0, sp, #48	; 0x30
   123dc:	bl	12fac <flatcc_builder_custom_init@@Base>
   123e0:	mvn	r3, #-1073741824	; 0xc0000000
   123e4:	str	r3, [sp, #4]
   123e8:	mov	r3, #4
   123ec:	str	r3, [sp]
   123f0:	mov	r2, #10
   123f4:	add	r1, sp, #8
   123f8:	add	r0, sp, #48	; 0x30
   123fc:	bl	1468c <flatcc_builder_create_vector@@Base>
   12400:	mov	r1, r0
   12404:	add	r0, sp, #48	; 0x30
   12408:	bl	1229c <dbg_emitter@@Base+0xa0>
   1240c:	add	r0, sp, #48	; 0x30
   12410:	bl	1319c <flatcc_builder_clear@@Base>
   12414:	mov	r0, r4
   12418:	add	sp, sp, #280	; 0x118
   1241c:	pop	{r4, pc}
   12420:			; <UNDEFINED> instruction: 0x00015fb1
   12424:	strdeq	r2, [r1], -ip

00012428 <emit_test@@Base>:
   12428:	ldr	r3, [pc, #756]	; 12724 <emit_test@@Base+0x2fc>
   1242c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12430:	sub	sp, sp, #340	; 0x154
   12434:	add	r2, sp, #44	; 0x2c
   12438:	add	lr, r3, #56	; 0x38
   1243c:	ldr	r0, [r3]
   12440:	ldr	r1, [r3, #4]
   12444:	mov	ip, r2
   12448:	add	r3, r3, #8
   1244c:	cmp	r3, lr
   12450:	stmia	ip!, {r0, r1}
   12454:	mov	r2, ip
   12458:	bne	1243c <emit_test@@Base+0x14>
   1245c:	ldrh	r1, [r3]
   12460:	ldr	r5, [pc, #704]	; 12728 <emit_test@@Base+0x300>
   12464:	ldrb	r3, [r3, #2]
   12468:	strh	r1, [ip]
   1246c:	add	r4, sp, #8
   12470:	strb	r3, [ip, #2]
   12474:	ldm	r5, {r0, r1, r2, r3}
   12478:	stm	r4, {r0, r1, r2, r3}
   1247c:	add	r0, sp, #104	; 0x68
   12480:	bl	13010 <flatcc_builder_init@@Base>
   12484:	add	r0, sp, #104	; 0x68
   12488:	bl	15628 <flatcc_builder_get_emit_context@@Base>
   1248c:	mvn	r3, #-1073741824	; 0xc0000000
   12490:	str	r3, [sp, #4]
   12494:	mov	r3, #4
   12498:	str	r3, [sp]
   1249c:	mov	r2, r3
   124a0:	mov	r1, r4
   124a4:	mov	r6, r0
   124a8:	add	r0, sp, #104	; 0x68
   124ac:	bl	1468c <flatcc_builder_create_vector@@Base>
   124b0:	mov	r1, r0
   124b4:	add	r0, sp, #104	; 0x68
   124b8:	bl	1229c <dbg_emitter@@Base+0xa0>
   124bc:	ldm	r6, {r2, r3}
   124c0:	cmp	r2, r3
   124c4:	bne	12718 <emit_test@@Base+0x2f0>
   124c8:	ldr	r4, [r6, #8]
   124cc:	ldr	r7, [r6, #24]
   124d0:	cmp	r4, #0
   124d4:	beq	12718 <emit_test@@Base+0x2f0>
   124d8:	add	r0, sp, #104	; 0x68
   124dc:	bl	15404 <flatcc_builder_get_buffer_size@@Base>
   124e0:	cmp	r0, r7
   124e4:	mov	r6, r0
   124e8:	addne	r3, r5, #16
   124ec:	movne	r2, #101	; 0x65
   124f0:	bne	12560 <emit_test@@Base+0x138>
   124f4:	ldr	r5, [pc, #560]	; 1272c <emit_test@@Base+0x304>
   124f8:	mov	r2, r0
   124fc:	ldr	r1, [pc, #556]	; 12730 <emit_test@@Base+0x308>
   12500:	ldr	r0, [r5]
   12504:	bl	1205c <fprintf@plt>
   12508:	ldr	r5, [r5]
   1250c:	ldr	r2, [pc, #544]	; 12734 <emit_test@@Base+0x30c>
   12510:	ldr	r1, [pc, #544]	; 12738 <emit_test@@Base+0x310>
   12514:	mov	r0, r5
   12518:	bl	1205c <fprintf@plt>
   1251c:	ldr	sl, [pc, #536]	; 1273c <emit_test@@Base+0x314>
   12520:	ldr	fp, [pc, #536]	; 12740 <emit_test@@Base+0x318>
   12524:	sub	r8, r4, #1
   12528:	mov	r9, #0
   1252c:	cmp	r6, r9
   12530:	bne	1256c <emit_test@@Base+0x144>
   12534:	ldr	r7, [pc, #520]	; 12744 <emit_test@@Base+0x31c>
   12538:	tst	r9, #15
   1253c:	bne	125f0 <emit_test@@Base+0x1c8>
   12540:	add	r2, sp, #24
   12544:	ldr	r1, [pc, #500]	; 12740 <emit_test@@Base+0x318>
   12548:	mov	r0, r5
   1254c:	bl	1205c <fprintf@plt>
   12550:	cmp	r6, #58	; 0x3a
   12554:	beq	12604 <emit_test@@Base+0x1dc>
   12558:	ldr	r3, [pc, #488]	; 12748 <emit_test@@Base+0x320>
   1255c:	mov	r2, #106	; 0x6a
   12560:	ldr	r1, [pc, #484]	; 1274c <emit_test@@Base+0x324>
   12564:	ldr	r0, [pc, #484]	; 12750 <emit_test@@Base+0x328>
   12568:	bl	120b0 <__assert_fail@plt>
   1256c:	ands	r7, r9, #15
   12570:	bne	125d8 <emit_test@@Base+0x1b0>
   12574:	cmp	r9, #0
   12578:	beq	1258c <emit_test@@Base+0x164>
   1257c:	add	r2, sp, #24
   12580:	mov	r1, fp
   12584:	mov	r0, r5
   12588:	bl	1205c <fprintf@plt>
   1258c:	mov	r2, r9
   12590:	mov	r1, sl
   12594:	mov	r0, r5
   12598:	bl	1205c <fprintf@plt>
   1259c:	ldrb	r2, [r8, #1]
   125a0:	ldr	r1, [pc, #428]	; 12754 <emit_test@@Base+0x32c>
   125a4:	mov	r0, r5
   125a8:	bl	1205c <fprintf@plt>
   125ac:	ldrb	r2, [r8, #1]!
   125b0:	add	r3, sp, #336	; 0x150
   125b4:	add	r7, r3, r7
   125b8:	sub	r1, r2, #32
   125bc:	cmp	r1, #94	; 0x5e
   125c0:	movhi	r2, #46	; 0x2e
   125c4:	strb	r2, [r7, #-312]	; 0xfffffec8
   125c8:	mov	r2, #0
   125cc:	strb	r2, [r7, #-311]	; 0xfffffec9
   125d0:	add	r9, r9, #1
   125d4:	b	1252c <emit_test@@Base+0x104>
   125d8:	tst	r9, #7
   125dc:	bne	1259c <emit_test@@Base+0x174>
   125e0:	mov	r1, r5
   125e4:	mov	r0, #32
   125e8:	bl	1208c <fputc@plt>
   125ec:	b	1259c <emit_test@@Base+0x174>
   125f0:	mov	r1, r5
   125f4:	mov	r0, r7
   125f8:	bl	12098 <fputs@plt>
   125fc:	add	r9, r9, #1
   12600:	b	12538 <emit_test@@Base+0x110>
   12604:	mov	r2, r6
   12608:	add	r1, sp, #44	; 0x2c
   1260c:	mov	r0, r4
   12610:	bl	12008 <memcmp@plt>
   12614:	subs	r5, r0, #0
   12618:	movne	r2, #108	; 0x6c
   1261c:	ldrne	r3, [pc, #292]	; 12748 <emit_test@@Base+0x320>
   12620:	bne	12560 <emit_test@@Base+0x138>
   12624:	ldr	r3, [r4]
   12628:	adds	r2, r4, r3
   1262c:	ldreq	r3, [pc, #292]	; 12758 <emit_test@@Base+0x330>
   12630:	moveq	r2, #41	; 0x29
   12634:	ldreq	r1, [pc, #288]	; 1275c <emit_test@@Base+0x334>
   12638:	ldreq	r0, [pc, #288]	; 12760 <emit_test@@Base+0x338>
   1263c:	beq	12568 <emit_test@@Base+0x140>
   12640:	ldr	r3, [r4, r3]
   12644:	sub	r3, r2, r3
   12648:	ldrh	r1, [r3]
   1264c:	cmp	r1, #5
   12650:	bls	12670 <emit_test@@Base+0x248>
   12654:	ldrh	r0, [r3, #4]
   12658:	cmp	r0, #0
   1265c:	beq	12670 <emit_test@@Base+0x248>
   12660:	ldrd	r6, [r2, r0]
   12664:	cmp	r7, #0
   12668:	cmpeq	r6, #42	; 0x2a
   1266c:	beq	1267c <emit_test@@Base+0x254>
   12670:	ldr	r3, [pc, #208]	; 12748 <emit_test@@Base+0x320>
   12674:	mov	r2, #112	; 0x70
   12678:	b	12560 <emit_test@@Base+0x138>
   1267c:	cmp	r1, #7
   12680:	bls	1269c <emit_test@@Base+0x274>
   12684:	ldrh	r0, [r3, #6]
   12688:	cmp	r0, #0
   1268c:	beq	1269c <emit_test@@Base+0x274>
   12690:	ldrb	r0, [r2, r0]
   12694:	cmp	r0, #1
   12698:	beq	126a8 <emit_test@@Base+0x280>
   1269c:	ldr	r3, [pc, #164]	; 12748 <emit_test@@Base+0x320>
   126a0:	mov	r2, #113	; 0x71
   126a4:	b	12560 <emit_test@@Base+0x138>
   126a8:	cmp	r1, #9
   126ac:	bls	126dc <emit_test@@Base+0x2b4>
   126b0:	ldrh	r1, [r3, #8]
   126b4:	cmp	r1, #0
   126b8:	beq	126dc <emit_test@@Base+0x2b4>
   126bc:	add	r3, r2, r1
   126c0:	ldr	r2, [r2, r1]
   126c4:	add	r2, r2, #4
   126c8:	adds	r3, r3, r2
   126cc:	beq	126dc <emit_test@@Base+0x2b4>
   126d0:	ldr	r2, [r3, #-4]
   126d4:	cmp	r2, #4
   126d8:	beq	126e8 <emit_test@@Base+0x2c0>
   126dc:	ldr	r3, [pc, #100]	; 12748 <emit_test@@Base+0x320>
   126e0:	mov	r2, #114	; 0x72
   126e4:	b	12560 <emit_test@@Base+0x138>
   126e8:	vldr	s14, [r3, #8]
   126ec:	vldr	s15, [pc, #44]	; 12720 <emit_test@@Base+0x2f8>
   126f0:	vcmp.f32	s14, s15
   126f4:	vmrs	APSR_nzcv, fpscr
   126f8:	ldrne	r3, [pc, #72]	; 12748 <emit_test@@Base+0x320>
   126fc:	movne	r2, #115	; 0x73
   12700:	bne	12560 <emit_test@@Base+0x138>
   12704:	add	r0, sp, #104	; 0x68
   12708:	bl	1319c <flatcc_builder_clear@@Base>
   1270c:	mov	r0, r5
   12710:	add	sp, sp, #340	; 0x154
   12714:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12718:	mvn	r5, #0
   1271c:	b	1270c <emit_test@@Base+0x2e4>
   12720:	svccc	0x0099999a
   12724:	andeq	r5, r1, r7, lsl #28
   12728:	andeq	r5, r1, r4, asr #28
   1272c:	andeq	r7, r2, r8, rrx
   12730:	andeq	r6, r1, lr, asr #32
   12734:	andeq	r6, r1, pc, asr r0
   12738:	andeq	r6, r1, r9, rrx
   1273c:	andeq	r6, r1, r4, ror r0
   12740:	andeq	r6, r1, lr, rrx
   12744:	andeq	r6, r1, r2, lsl #1
   12748:	andeq	r5, r1, r4, asr lr
   1274c:	andeq	r6, r1, r3
   12750:	andeq	r6, r1, r4, ror r8
   12754:	andeq	r6, r1, ip, ror r0
   12758:	andeq	r5, r1, lr, asr lr
   1275c:	andeq	r6, r1, r6, lsl #1
   12760:	andeq	r6, r1, r2, ror #1
   12764:	ldr	ip, [r0, #28]
   12768:	ldr	r3, [r0, #64]	; 0x40
   1276c:	ldr	r2, [r0, #60]	; 0x3c
   12770:	sub	r3, r3, ip
   12774:	cmp	r3, r1
   12778:	strls	r3, [r0, #24]
   1277c:	strhi	r1, [r0, #24]
   12780:	ldr	r3, [r0, #32]
   12784:	add	r2, r2, ip
   12788:	str	r2, [r0, #16]
   1278c:	str	r1, [r3, #4]
   12790:	bx	lr
   12794:	push	{r0, r1, r4, r5, r6, lr}
   12798:	mov	r6, r2
   1279c:	ldr	r2, [r0, #28]
   127a0:	mov	r3, #1
   127a4:	str	r3, [sp]
   127a8:	add	r2, r1, r2
   127ac:	ldr	r5, [r0, #48]	; 0x30
   127b0:	add	r1, r0, #60	; 0x3c
   127b4:	mov	r4, r0
   127b8:	ldr	r0, [r0, #40]	; 0x28
   127bc:	blx	r5
   127c0:	subs	r5, r0, #0
   127c4:	mvnne	r5, #0
   127c8:	bne	127d8 <emit_test@@Base+0x3b0>
   127cc:	mov	r1, r6
   127d0:	mov	r0, r4
   127d4:	bl	12764 <emit_test@@Base+0x33c>
   127d8:	mov	r0, r5
   127dc:	add	sp, sp, #8
   127e0:	pop	{r4, r5, r6, pc}
   127e4:	push	{r4, r5, r6, lr}
   127e8:	mov	r4, r0
   127ec:	ldr	r5, [r0, #20]
   127f0:	ldr	r3, [r0, #24]
   127f4:	add	r1, r5, r1
   127f8:	cmp	r1, r3
   127fc:	str	r1, [r0, #20]
   12800:	bcs	12810 <emit_test@@Base+0x3e8>
   12804:	ldr	r0, [r4, #16]
   12808:	add	r0, r0, r5
   1280c:	pop	{r4, r5, r6, pc}
   12810:	mvn	r2, #3
   12814:	add	r1, r1, #1
   12818:	bl	12794 <emit_test@@Base+0x36c>
   1281c:	cmp	r0, #0
   12820:	beq	12804 <emit_test@@Base+0x3dc>
   12824:	mov	r0, #0
   12828:	pop	{r4, r5, r6, pc}
   1282c:	push	{r4, lr}
   12830:	mov	r4, r0
   12834:	ldr	r2, [r0, #20]
   12838:	mov	r1, #0
   1283c:	ldr	r0, [r0, #16]
   12840:	bl	12074 <memset@plt>
   12844:	ldr	r3, [r4, #32]
   12848:	mov	r0, r4
   1284c:	ldr	r2, [r3, #8]
   12850:	ldr	r1, [r3, #4]
   12854:	str	r2, [r4, #20]
   12858:	ldr	r2, [r3]
   1285c:	str	r2, [r4, #28]
   12860:	bl	12764 <emit_test@@Base+0x33c>
   12864:	ldrh	r3, [r4, #130]	; 0x82
   12868:	ldrh	r2, [r4, #128]	; 0x80
   1286c:	cmp	r2, r3
   12870:	strhcc	r3, [r4, #128]	; 0x80
   12874:	ldr	r3, [r4, #32]
   12878:	sub	r3, r3, #36	; 0x24
   1287c:	ldrh	r2, [r3, #48]	; 0x30
   12880:	str	r3, [r4, #32]
   12884:	ldr	r3, [r4, #156]	; 0x9c
   12888:	strh	r2, [r4, #130]	; 0x82
   1288c:	sub	r3, r3, #1
   12890:	str	r3, [r4, #156]	; 0x9c
   12894:	pop	{r4, pc}
   12898:	ldr	r3, [r0, #20]
   1289c:	mov	r2, r1
   128a0:	sub	r3, r3, r1
   128a4:	str	r3, [r0, #20]
   128a8:	ldr	r0, [r0, #16]
   128ac:	mov	r1, #0
   128b0:	add	r0, r0, r3
   128b4:	b	12074 <memset@plt>
   128b8:	push	{r4, r5, r6, lr}
   128bc:	mov	r6, r1
   128c0:	mov	r1, r2
   128c4:	mov	r4, r2
   128c8:	bl	127e4 <emit_test@@Base+0x3bc>
   128cc:	subs	r5, r0, #0
   128d0:	beq	128e0 <emit_test@@Base+0x4b8>
   128d4:	mov	r2, r4
   128d8:	mov	r1, r6
   128dc:	bl	11ffc <memcpy@plt>
   128e0:	mov	r0, r5
   128e4:	pop	{r4, r5, r6, pc}
   128e8:	push	{r0, r1, r4, lr}
   128ec:	add	r3, sp, #8
   128f0:	cmp	r0, #4
   128f4:	mov	r4, #0
   128f8:	mov	r2, r1
   128fc:	str	r4, [r3, #-4]!
   12900:	movcs	r1, r0
   12904:	movcc	r1, #4
   12908:	mov	r0, r3
   1290c:	bl	12068 <posix_memalign@plt>
   12910:	cmp	r0, r4
   12914:	beq	1292c <emit_test@@Base+0x504>
   12918:	ldr	r0, [sp, #4]
   1291c:	cmp	r0, r4
   12920:	beq	1292c <emit_test@@Base+0x504>
   12924:	bl	11ff0 <free@plt>
   12928:	str	r4, [sp, #4]
   1292c:	ldr	r0, [sp, #4]
   12930:	add	sp, sp, #8
   12934:	pop	{r4, pc}

00012938 <flatcc_builder_default_alloc@@Base>:
   12938:	push	{r4, r5, r6, r7, r8, lr}
   1293c:	subs	r6, r2, #0
   12940:	mov	r5, r1
   12944:	bne	12968 <flatcc_builder_default_alloc@@Base+0x30>
   12948:	ldr	r0, [r1]
   1294c:	cmp	r0, #0
   12950:	popeq	{r4, r5, r6, r7, r8, pc}
   12954:	bl	11ff0 <free@plt>
   12958:	str	r6, [r5]
   1295c:	str	r6, [r5, #4]
   12960:	mov	r0, #0
   12964:	pop	{r4, r5, r6, r7, r8, pc}
   12968:	ldr	r2, [sp, #24]
   1296c:	mov	r7, r3
   12970:	sub	r2, r2, #1
   12974:	cmp	r2, #6
   12978:	ldrls	pc, [pc, r2, lsl #2]
   1297c:	b	12a10 <flatcc_builder_default_alloc@@Base+0xd8>
   12980:	andeq	r2, r1, r8, lsl sl
   12984:	andeq	r2, r1, r0, lsl sl
   12988:	andeq	r2, r1, r0, lsl sl
   1298c:	andeq	r2, r1, r0, lsl #20
   12990:	muleq	r1, ip, r9
   12994:	andeq	r2, r1, r0, lsl sl
   12998:	andeq	r2, r1, r8, lsl #20
   1299c:	mov	r4, r6
   129a0:	cmp	r6, r4
   129a4:	bhi	12a20 <flatcc_builder_default_alloc@@Base+0xe8>
   129a8:	ldr	r2, [r5, #4]
   129ac:	cmp	r6, r2
   129b0:	bhi	129bc <flatcc_builder_default_alloc@@Base+0x84>
   129b4:	cmp	r4, r2, lsr #1
   129b8:	bls	12960 <flatcc_builder_default_alloc@@Base+0x28>
   129bc:	mov	r1, r4
   129c0:	ldr	r0, [r5]
   129c4:	bl	12014 <realloc@plt>
   129c8:	subs	r6, r0, #0
   129cc:	beq	12a28 <flatcc_builder_default_alloc@@Base+0xf0>
   129d0:	cmp	r7, #0
   129d4:	beq	129f4 <flatcc_builder_default_alloc@@Base+0xbc>
   129d8:	ldr	r0, [r5, #4]
   129dc:	cmp	r4, r0
   129e0:	bls	129f4 <flatcc_builder_default_alloc@@Base+0xbc>
   129e4:	sub	r2, r4, r0
   129e8:	mov	r1, #0
   129ec:	add	r0, r6, r0
   129f0:	bl	12074 <memset@plt>
   129f4:	str	r6, [r5]
   129f8:	str	r4, [r5, #4]
   129fc:	b	12960 <flatcc_builder_default_alloc@@Base+0x28>
   12a00:	mov	r4, #288	; 0x120
   12a04:	b	129a0 <flatcc_builder_default_alloc@@Base+0x68>
   12a08:	mov	r4, #64	; 0x40
   12a0c:	b	129a0 <flatcc_builder_default_alloc@@Base+0x68>
   12a10:	mov	r4, #32
   12a14:	b	129a0 <flatcc_builder_default_alloc@@Base+0x68>
   12a18:	mov	r4, #256	; 0x100
   12a1c:	b	129a0 <flatcc_builder_default_alloc@@Base+0x68>
   12a20:	lsl	r4, r4, #1
   12a24:	b	129a0 <flatcc_builder_default_alloc@@Base+0x68>
   12a28:	mvn	r0, #0
   12a2c:	pop	{r4, r5, r6, r7, r8, pc}
   12a30:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12a34:	add	r6, r0, #52	; 0x34
   12a38:	mov	r4, r1
   12a3c:	add	r1, r6, r1, lsl #3
   12a40:	mov	r5, r2
   12a44:	add	r2, r2, r3
   12a48:	ldr	r3, [r1, #4]
   12a4c:	cmp	r2, r3
   12a50:	bls	12a84 <flatcc_builder_default_alloc@@Base+0x14c>
   12a54:	str	r4, [sp]
   12a58:	ldr	r3, [sp, #32]
   12a5c:	ldr	r7, [r0, #48]	; 0x30
   12a60:	ldr	r0, [r0, #40]	; 0x28
   12a64:	blx	r7
   12a68:	cmp	r0, #0
   12a6c:	beq	12a84 <flatcc_builder_default_alloc@@Base+0x14c>
   12a70:	ldr	r3, [pc, #28]	; 12a94 <flatcc_builder_default_alloc@@Base+0x15c>
   12a74:	mov	r2, #308	; 0x134
   12a78:	ldr	r1, [pc, #24]	; 12a98 <flatcc_builder_default_alloc@@Base+0x160>
   12a7c:	ldr	r0, [pc, #24]	; 12a9c <flatcc_builder_default_alloc@@Base+0x164>
   12a80:	bl	120b0 <__assert_fail@plt>
   12a84:	ldr	r0, [r6, r4, lsl #3]
   12a88:	add	r0, r0, r5
   12a8c:	add	sp, sp, #12
   12a90:	pop	{r4, r5, r6, r7, pc}
   12a94:	andeq	r6, r1, r8, lsl #2
   12a98:	andeq	r6, r1, r7, lsl #16
   12a9c:	andeq	r6, r1, r4, ror r8
   12aa0:	ldr	r2, [r0, #156]	; 0x9c
   12aa4:	ldr	r3, [r0, #160]	; 0xa0
   12aa8:	push	{r0, r1, r4, r5, r6, lr}
   12aac:	mov	r5, r1
   12ab0:	add	r1, r2, #1
   12ab4:	cmp	r1, r3
   12ab8:	mov	r4, r0
   12abc:	str	r1, [r0, #156]	; 0x9c
   12ac0:	ble	12b70 <flatcc_builder_default_alloc@@Base+0x238>
   12ac4:	ldr	r3, [r0, #176]	; 0xb0
   12ac8:	cmp	r3, #0
   12acc:	cmpgt	r1, r3
   12ad0:	movgt	r3, #1
   12ad4:	movle	r3, #0
   12ad8:	ble	12ae8 <flatcc_builder_default_alloc@@Base+0x1b0>
   12adc:	mvn	r0, #0
   12ae0:	add	sp, sp, #8
   12ae4:	pop	{r4, r5, r6, pc}
   12ae8:	mov	r6, #36	; 0x24
   12aec:	str	r3, [sp]
   12af0:	mul	r2, r6, r2
   12af4:	mov	r3, r6
   12af8:	mov	r1, #4
   12afc:	bl	12a30 <flatcc_builder_default_alloc@@Base+0xf8>
   12b00:	cmp	r0, #0
   12b04:	str	r0, [r4, #32]
   12b08:	beq	12adc <flatcc_builder_default_alloc@@Base+0x1a4>
   12b0c:	mov	r1, r6
   12b10:	ldr	r0, [r4, #88]	; 0x58
   12b14:	bl	15b70 <flatcc_emitter_copy_buffer@@Base+0xac>
   12b18:	ldr	r3, [r4, #176]	; 0xb0
   12b1c:	cmp	r3, #0
   12b20:	cmpgt	r0, r3
   12b24:	str	r0, [r4, #160]	; 0xa0
   12b28:	strgt	r3, [r4, #160]	; 0xa0
   12b2c:	ldrh	r1, [r4, #130]	; 0x82
   12b30:	ldr	r2, [r4, #32]
   12b34:	ldr	r3, [r4, #20]
   12b38:	mvn	r0, #3
   12b3c:	strh	r1, [r2, #12]
   12b40:	ldr	r1, [r4, #28]
   12b44:	str	r3, [r2, #8]
   12b48:	add	r3, r3, r1
   12b4c:	add	r3, r3, #7
   12b50:	strh	r5, [r4, #130]	; 0x82
   12b54:	bic	r3, r3, #7
   12b58:	str	r0, [r2, #4]
   12b5c:	mov	r0, #0
   12b60:	str	r1, [r2]
   12b64:	str	r3, [r4, #28]
   12b68:	str	r0, [r4, #20]
   12b6c:	b	12ae0 <flatcc_builder_default_alloc@@Base+0x1a8>
   12b70:	ldr	r3, [r0, #32]
   12b74:	add	r3, r3, #36	; 0x24
   12b78:	str	r3, [r0, #32]
   12b7c:	b	12b2c <flatcc_builder_default_alloc@@Base+0x1f4>
   12b80:	ldr	r3, [r0, #32]
   12b84:	push	{r0, r1, r2, r4, r5, lr}
   12b88:	add	r1, r1, #2
   12b8c:	ldr	r2, [r3, #16]
   12b90:	lsl	r5, r1, #1
   12b94:	ldrh	r1, [r3, #28]
   12b98:	mov	r3, #1
   12b9c:	str	r3, [sp]
   12ba0:	mov	r3, r5
   12ba4:	add	r2, r2, r1, lsl #1
   12ba8:	mov	r1, #0
   12bac:	mov	r4, r0
   12bb0:	bl	12a30 <flatcc_builder_default_alloc@@Base+0xf8>
   12bb4:	cmp	r0, #0
   12bb8:	streq	r0, [r4, #4]
   12bbc:	mvneq	r0, #0
   12bc0:	beq	12bfc <flatcc_builder_default_alloc@@Base+0x2c4>
   12bc4:	ldr	r2, [r4, #32]
   12bc8:	add	r0, r0, #4
   12bcc:	mov	r3, #0
   12bd0:	str	r0, [r4, #4]
   12bd4:	str	r3, [sp]
   12bd8:	mov	r1, #3
   12bdc:	sub	r3, r5, #3
   12be0:	ldr	r2, [r2, #20]
   12be4:	mov	r0, r4
   12be8:	bl	12a30 <flatcc_builder_default_alloc@@Base+0xf8>
   12bec:	cmp	r0, #0
   12bf0:	str	r0, [r4]
   12bf4:	movne	r0, #0
   12bf8:	mvneq	r0, #0
   12bfc:	add	sp, sp, #12
   12c00:	pop	{r4, r5, pc}
   12c04:	push	{r0, r1, r2, r4, r5, lr}
   12c08:	ldr	r3, [r1]
   12c0c:	ldr	r4, [r0, #140]	; 0x8c
   12c10:	add	r2, r3, r4
   12c14:	cmp	r4, r2
   12c18:	str	r2, [r0, #140]	; 0x8c
   12c1c:	ble	12c34 <flatcc_builder_default_alloc@@Base+0x2fc>
   12c20:	ldr	r3, [pc, #68]	; 12c6c <flatcc_builder_default_alloc@@Base+0x334>
   12c24:	ldr	r2, [pc, #68]	; 12c70 <flatcc_builder_default_alloc@@Base+0x338>
   12c28:	ldr	r1, [pc, #68]	; 12c74 <flatcc_builder_default_alloc@@Base+0x33c>
   12c2c:	ldr	r0, [pc, #68]	; 12c78 <flatcc_builder_default_alloc@@Base+0x340>
   12c30:	bl	120b0 <__assert_fail@plt>
   12c34:	str	r3, [sp]
   12c38:	add	r1, r1, #8
   12c3c:	ldr	r5, [r0, #44]	; 0x2c
   12c40:	ldr	r2, [r1, #-4]
   12c44:	mov	r3, r4
   12c48:	ldr	r0, [r0, #36]	; 0x24
   12c4c:	blx	r5
   12c50:	cmp	r0, #0
   12c54:	ldrne	r3, [pc, #16]	; 12c6c <flatcc_builder_default_alloc@@Base+0x334>
   12c58:	ldrne	r2, [pc, #28]	; 12c7c <flatcc_builder_default_alloc@@Base+0x344>
   12c5c:	bne	12c28 <flatcc_builder_default_alloc@@Base+0x2f0>
   12c60:	add	r0, r4, #1
   12c64:	add	sp, sp, #12
   12c68:	pop	{r4, r5, pc}
   12c6c:	andeq	r6, r1, r7, lsl r1
   12c70:	andeq	r0, r0, r1, lsr #5
   12c74:	andeq	r6, r1, r7, lsl #16
   12c78:	andeq	r6, r1, r4, ror r8
   12c7c:	andeq	r0, r0, r5, lsr #5
   12c80:	cmp	r2, #0
   12c84:	bne	12c94 <flatcc_builder_default_alloc@@Base+0x35c>
   12c88:	ldrh	r2, [r0, #132]	; 0x84
   12c8c:	cmp	r2, #0
   12c90:	moveq	r2, #1
   12c94:	ldrh	ip, [r1]
   12c98:	cmp	ip, #3
   12c9c:	movls	ip, #4
   12ca0:	strhls	ip, [r1]
   12ca4:	ldrh	ip, [r1]
   12ca8:	cmp	ip, r2
   12cac:	strhcc	r2, [r1]
   12cb0:	cmp	r3, #0
   12cb4:	bne	12d18 <flatcc_builder_default_alloc@@Base+0x3e0>
   12cb8:	ldr	r3, [r0, #140]	; 0x8c
   12cbc:	sub	r2, r2, #1
   12cc0:	ands	r2, r2, r3
   12cc4:	beq	12d18 <flatcc_builder_default_alloc@@Base+0x3e0>
   12cc8:	push	{r4, lr}
   12ccc:	sub	sp, sp, #72	; 0x48
   12cd0:	ldr	r4, [pc, #72]	; 12d20 <flatcc_builder_default_alloc@@Base+0x3e8>
   12cd4:	mov	r3, #1
   12cd8:	mov	r1, sp
   12cdc:	str	r2, [sp]
   12ce0:	str	r4, [sp, #8]
   12ce4:	str	r2, [sp, #12]
   12ce8:	str	r3, [sp, #4]
   12cec:	bl	12c04 <flatcc_builder_default_alloc@@Base+0x2cc>
   12cf0:	cmp	r0, #0
   12cf4:	bne	12d0c <flatcc_builder_default_alloc@@Base+0x3d4>
   12cf8:	add	r3, r4, #512	; 0x200
   12cfc:	ldr	r2, [pc, #32]	; 12d24 <flatcc_builder_default_alloc@@Base+0x3ec>
   12d00:	ldr	r1, [pc, #32]	; 12d28 <flatcc_builder_default_alloc@@Base+0x3f0>
   12d04:	ldr	r0, [pc, #32]	; 12d2c <flatcc_builder_default_alloc@@Base+0x3f4>
   12d08:	bl	120b0 <__assert_fail@plt>
   12d0c:	mov	r0, #0
   12d10:	add	sp, sp, #72	; 0x48
   12d14:	pop	{r4, pc}
   12d18:	mov	r0, #0
   12d1c:	bx	lr
   12d20:	andeq	r6, r1, r1, lsr #2
   12d24:			; <UNDEFINED> instruction: 0x000002be
   12d28:	andeq	r6, r1, r7, lsl #16
   12d2c:	andeq	r6, r1, r4, ror r8
   12d30:	ldr	r2, [r0, #136]	; 0x88
   12d34:	ldr	r3, [r1]
   12d38:	push	{r0, r1, r4, r5, r6, lr}
   12d3c:	sub	r4, r2, r3
   12d40:	cmp	r2, r4
   12d44:	bgt	12d5c <flatcc_builder_default_alloc@@Base+0x424>
   12d48:	ldr	r3, [pc, #76]	; 12d9c <flatcc_builder_default_alloc@@Base+0x464>
   12d4c:	ldr	r2, [pc, #76]	; 12da0 <flatcc_builder_default_alloc@@Base+0x468>
   12d50:	ldr	r1, [pc, #76]	; 12da4 <flatcc_builder_default_alloc@@Base+0x46c>
   12d54:	ldr	r0, [pc, #76]	; 12da8 <flatcc_builder_default_alloc@@Base+0x470>
   12d58:	bl	120b0 <__assert_fail@plt>
   12d5c:	str	r3, [sp]
   12d60:	mov	r5, r0
   12d64:	ldr	r6, [r0, #44]	; 0x2c
   12d68:	ldr	r2, [r1, #4]
   12d6c:	mov	r3, r4
   12d70:	add	r1, r1, #8
   12d74:	ldr	r0, [r0, #36]	; 0x24
   12d78:	blx	r6
   12d7c:	cmp	r0, #0
   12d80:	ldrne	r3, [pc, #20]	; 12d9c <flatcc_builder_default_alloc@@Base+0x464>
   12d84:	ldrne	r2, [pc, #32]	; 12dac <flatcc_builder_default_alloc@@Base+0x474>
   12d88:	bne	12d50 <flatcc_builder_default_alloc@@Base+0x418>
   12d8c:	mov	r0, r4
   12d90:	str	r4, [r5, #136]	; 0x88
   12d94:	add	sp, sp, #8
   12d98:	pop	{r4, r5, r6, pc}
   12d9c:	andeq	r6, r1, r0, lsr r3
   12da0:	andeq	r0, r0, r7, lsl #5
   12da4:	andeq	r6, r1, r7, lsl #16
   12da8:	andeq	r6, r1, r4, ror r8
   12dac:	andeq	r0, r0, fp, lsl #5
   12db0:	ldr	r3, [r0, #20]
   12db4:	adds	r1, r3, r1
   12db8:	movcs	r3, #1
   12dbc:	movcc	r3, #0
   12dc0:	cmp	r1, r2
   12dc4:	movls	r2, r3
   12dc8:	orrhi	r2, r3, #1
   12dcc:	cmp	r2, #0
   12dd0:	beq	12dec <flatcc_builder_default_alloc@@Base+0x4b4>
   12dd4:	push	{r4, lr}
   12dd8:	mov	r2, #892	; 0x37c
   12ddc:	ldr	r3, [pc, #20]	; 12df8 <flatcc_builder_default_alloc@@Base+0x4c0>
   12de0:	ldr	r1, [pc, #20]	; 12dfc <flatcc_builder_default_alloc@@Base+0x4c4>
   12de4:	ldr	r0, [pc, #20]	; 12e00 <flatcc_builder_default_alloc@@Base+0x4c8>
   12de8:	bl	120b0 <__assert_fail@plt>
   12dec:	str	r1, [r0, #20]
   12df0:	mov	r0, r2
   12df4:	bx	lr
   12df8:	andeq	r6, r1, fp, lsr r3
   12dfc:	andeq	r6, r1, r7, lsl #16
   12e00:	andeq	r6, r1, sp, asr #16
   12e04:	ldrh	ip, [r0, #128]	; 0x80
   12e08:	push	{r4, r5, r6, r7, lr}
   12e0c:	sub	sp, sp, #84	; 0x54
   12e10:	cmp	ip, #3
   12e14:	movls	ip, #4
   12e18:	strhls	ip, [r0, #128]	; 0x80
   12e1c:	mov	ip, #4
   12e20:	add	r5, sp, ip
   12e24:	str	ip, [sp, #8]
   12e28:	ldr	r4, [r0, #136]	; 0x88
   12e2c:	str	ip, [sp, #20]
   12e30:	mov	ip, #1
   12e34:	str	ip, [sp, #12]
   12e38:	lsls	ip, r2, #2
   12e3c:	strne	ip, [sp, #28]
   12e40:	and	lr, r4, #3
   12e44:	str	r5, [sp, #16]
   12e48:	addne	r5, ip, #4
   12e4c:	movne	ip, #2
   12e50:	strne	r5, [sp, #8]
   12e54:	strne	r1, [sp, #24]
   12e58:	strne	ip, [sp, #12]
   12e5c:	cmp	lr, #0
   12e60:	str	r2, [sp, #4]
   12e64:	beq	12e94 <flatcc_builder_default_alloc@@Base+0x55c>
   12e68:	ldr	ip, [sp, #8]
   12e6c:	add	r5, sp, #80	; 0x50
   12e70:	add	ip, ip, lr
   12e74:	str	ip, [sp, #8]
   12e78:	ldr	ip, [sp, #12]
   12e7c:	ldr	r6, [pc, #204]	; 12f50 <flatcc_builder_default_alloc@@Base+0x618>
   12e80:	add	ip, ip, #1
   12e84:	str	ip, [sp, #12]
   12e88:	add	r5, r5, ip, lsl #3
   12e8c:	str	r6, [r5, #-72]	; 0xffffffb8
   12e90:	str	lr, [r5, #-68]	; 0xffffffbc
   12e94:	ldr	r5, [sp, #8]
   12e98:	sub	r6, r1, #4
   12e9c:	sub	r5, r4, r5
   12ea0:	mov	lr, r3
   12ea4:	add	r2, r3, r2
   12ea8:	mvn	r7, #3
   12eac:	cmp	r2, lr
   12eb0:	bne	12ec4 <flatcc_builder_default_alloc@@Base+0x58c>
   12eb4:	add	r1, sp, #8
   12eb8:	bl	12d30 <flatcc_builder_default_alloc@@Base+0x3f8>
   12ebc:	add	sp, sp, #84	; 0x54
   12ec0:	pop	{r4, r5, r6, r7, pc}
   12ec4:	ldr	r4, [r6, #4]!
   12ec8:	cmp	r4, #0
   12ecc:	beq	12f0c <flatcc_builder_default_alloc@@Base+0x5d4>
   12ed0:	sub	ip, r7, r6
   12ed4:	add	ip, r1, ip
   12ed8:	add	ip, ip, r4
   12edc:	sub	ip, ip, r5
   12ee0:	cmp	r3, #0
   12ee4:	str	ip, [r6]
   12ee8:	beq	12f48 <flatcc_builder_default_alloc@@Base+0x610>
   12eec:	ldrb	ip, [lr]
   12ef0:	cmp	ip, #0
   12ef4:	bne	12f48 <flatcc_builder_default_alloc@@Base+0x610>
   12ef8:	ldr	r3, [pc, #84]	; 12f54 <flatcc_builder_default_alloc@@Base+0x61c>
   12efc:	ldr	r2, [pc, #84]	; 12f58 <flatcc_builder_default_alloc@@Base+0x620>
   12f00:	ldr	r1, [pc, #84]	; 12f5c <flatcc_builder_default_alloc@@Base+0x624>
   12f04:	ldr	r0, [pc, #84]	; 12f60 <flatcc_builder_default_alloc@@Base+0x628>
   12f08:	bl	120b0 <__assert_fail@plt>
   12f0c:	cmp	r3, #0
   12f10:	beq	12f34 <flatcc_builder_default_alloc@@Base+0x5fc>
   12f14:	ldrb	ip, [lr]
   12f18:	cmp	ip, #0
   12f1c:	beq	12f48 <flatcc_builder_default_alloc@@Base+0x610>
   12f20:	ldr	r3, [pc, #44]	; 12f54 <flatcc_builder_default_alloc@@Base+0x61c>
   12f24:	ldr	r2, [pc, #56]	; 12f64 <flatcc_builder_default_alloc@@Base+0x62c>
   12f28:	ldr	r1, [pc, #44]	; 12f5c <flatcc_builder_default_alloc@@Base+0x624>
   12f2c:	ldr	r0, [pc, #52]	; 12f68 <flatcc_builder_default_alloc@@Base+0x630>
   12f30:	b	12f08 <flatcc_builder_default_alloc@@Base+0x5d0>
   12f34:	ldr	r3, [pc, #24]	; 12f54 <flatcc_builder_default_alloc@@Base+0x61c>
   12f38:	ldr	r2, [pc, #44]	; 12f6c <flatcc_builder_default_alloc@@Base+0x634>
   12f3c:	ldr	r1, [pc, #24]	; 12f5c <flatcc_builder_default_alloc@@Base+0x624>
   12f40:	ldr	r0, [pc, #40]	; 12f70 <flatcc_builder_default_alloc@@Base+0x638>
   12f44:	b	12f08 <flatcc_builder_default_alloc@@Base+0x5d0>
   12f48:	add	lr, lr, #1
   12f4c:	b	12eac <flatcc_builder_default_alloc@@Base+0x574>
   12f50:	andeq	r6, r1, r1, lsr #2
   12f54:	andeq	r6, r1, ip, asr #6
   12f58:			; <UNDEFINED> instruction: 0x000005b1
   12f5c:	andeq	r6, r1, r7, lsl #16
   12f60:	andeq	r6, r1, r8, ror #16
   12f64:			; <UNDEFINED> instruction: 0x000005b5
   12f68:	andeq	r6, r1, r6, ror r8
   12f6c:			; <UNDEFINED> instruction: 0x000005b7
   12f70:	andeq	r6, r1, r4, ror r8

00012f74 <flatcc_builder_flush_vtable_cache@@Base>:
   12f74:	ldr	r3, [r0, #116]	; 0x74
   12f78:	cmp	r3, #0
   12f7c:	bxeq	lr
   12f80:	push	{r4, lr}
   12f84:	mov	r1, #0
   12f88:	mov	r4, r0
   12f8c:	ldr	r2, [r0, #96]	; 0x60
   12f90:	ldr	r0, [r0, #92]	; 0x5c
   12f94:	bl	12074 <memset@plt>
   12f98:	mov	r3, #16
   12f9c:	str	r3, [r4, #124]	; 0x7c
   12fa0:	mov	r3, #0
   12fa4:	str	r3, [r4, #120]	; 0x78
   12fa8:	pop	{r4, pc}

00012fac <flatcc_builder_custom_init@@Base>:
   12fac:	push	{r4, r5, r6, r7, r8, lr}
   12fb0:	mov	r6, r1
   12fb4:	mov	r7, r2
   12fb8:	mov	r1, #0
   12fbc:	mov	r2, #232	; 0xe8
   12fc0:	mov	r4, r0
   12fc4:	mov	r5, r3
   12fc8:	bl	12074 <memset@plt>
   12fcc:	cmp	r6, #0
   12fd0:	moveq	r3, #1
   12fd4:	addeq	r7, r4, #188	; 0xbc
   12fd8:	ldreq	r6, [pc, #40]	; 13008 <flatcc_builder_custom_init@@Base+0x5c>
   12fdc:	str	r7, [r4, #36]	; 0x24
   12fe0:	str	r6, [r4, #44]	; 0x2c
   12fe4:	mov	r0, #0
   12fe8:	streq	r3, [r4, #184]	; 0xb8
   12fec:	ldr	r3, [pc, #24]	; 1300c <flatcc_builder_custom_init@@Base+0x60>
   12ff0:	cmp	r5, #0
   12ff4:	moveq	r5, r3
   12ff8:	ldr	r3, [sp, #24]
   12ffc:	str	r5, [r4, #48]	; 0x30
   13000:	str	r3, [r4, #40]	; 0x28
   13004:	pop	{r4, r5, r6, r7, r8, pc}
   13008:	andeq	r5, r1, ip, lsl #15
   1300c:	andeq	r2, r1, r8, lsr r9

00013010 <flatcc_builder_init@@Base>:
   13010:	push	{r4, lr}
   13014:	mov	r2, #232	; 0xe8
   13018:	mov	r4, r0
   1301c:	mov	r1, #0
   13020:	bl	12074 <memset@plt>
   13024:	mov	r3, #1
   13028:	str	r3, [r4, #184]	; 0xb8
   1302c:	ldr	r3, [pc, #24]	; 1304c <flatcc_builder_init@@Base+0x3c>
   13030:	mov	r0, #0
   13034:	str	r3, [r4, #48]	; 0x30
   13038:	add	r3, r4, #188	; 0xbc
   1303c:	str	r3, [r4, #36]	; 0x24
   13040:	ldr	r3, [pc, #8]	; 13050 <flatcc_builder_init@@Base+0x40>
   13044:	str	r3, [r4, #44]	; 0x2c
   13048:	pop	{r4, pc}
   1304c:	andeq	r2, r1, r8, lsr r9
   13050:	andeq	r5, r1, ip, lsl #15

00013054 <flatcc_builder_custom_reset@@Base>:
   13054:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13058:	mov	r6, #0
   1305c:	mov	r4, r0
   13060:	mov	r7, r1
   13064:	mov	r8, r2
   13068:	mov	r5, r0
   1306c:	mov	r9, #1
   13070:	mov	sl, r6
   13074:	ldr	r3, [r5, #52]	; 0x34
   13078:	add	r1, r5, #52	; 0x34
   1307c:	cmp	r3, #0
   13080:	beq	13160 <flatcc_builder_custom_reset@@Base+0x10c>
   13084:	cmp	r6, #5
   13088:	cmpne	r8, #0
   1308c:	bne	13138 <flatcc_builder_custom_reset@@Base+0xe4>
   13090:	ldr	r2, [r5, #56]	; 0x38
   13094:	mov	r1, sl
   13098:	ldr	r0, [r5, #52]	; 0x34
   1309c:	bl	12074 <memset@plt>
   130a0:	add	r6, r6, #1
   130a4:	cmp	r6, #8
   130a8:	add	r5, r5, #8
   130ac:	bne	13074 <flatcc_builder_custom_reset@@Base+0x20>
   130b0:	ldr	r2, [r4, #124]	; 0x7c
   130b4:	mov	r3, #0
   130b8:	cmp	r2, r3
   130bc:	movne	r2, #16
   130c0:	strne	r2, [r4, #124]	; 0x7c
   130c4:	ldr	r2, [r4, #60]	; 0x3c
   130c8:	ldr	r0, [r4, #184]	; 0xb8
   130cc:	str	r2, [r4, #16]
   130d0:	ldr	r2, [r4, #76]	; 0x4c
   130d4:	cmp	r7, #0
   130d8:	str	r2, [r4]
   130dc:	ldr	r2, [r4, #52]	; 0x34
   130e0:	strne	r3, [r4, #172]	; 0xac
   130e4:	strne	r3, [r4, #176]	; 0xb0
   130e8:	strne	r3, [r4, #180]	; 0xb4
   130ec:	cmp	r0, #0
   130f0:	str	r3, [r4, #120]	; 0x78
   130f4:	strh	r3, [r4, #128]	; 0x80
   130f8:	str	r3, [r4, #136]	; 0x88
   130fc:	str	r3, [r4, #140]	; 0x8c
   13100:	str	r3, [r4, #156]	; 0x9c
   13104:	str	r3, [r4, #160]	; 0xa0
   13108:	str	r3, [r4, #20]
   1310c:	str	r3, [r4, #24]
   13110:	str	r3, [r4, #148]	; 0x94
   13114:	str	r3, [r4, #152]	; 0x98
   13118:	str	r2, [r4, #4]
   1311c:	str	r3, [r4, #32]
   13120:	beq	13130 <flatcc_builder_custom_reset@@Base+0xdc>
   13124:	add	r0, r4, #188	; 0xbc
   13128:	bl	15684 <flatcc_emitter_reset@@Base>
   1312c:	mov	r0, #0
   13130:	add	sp, sp, #12
   13134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13138:	str	r6, [sp]
   1313c:	ldr	fp, [r4, #48]	; 0x30
   13140:	mov	r3, r9
   13144:	mov	r2, #1
   13148:	ldr	r0, [r4, #40]	; 0x28
   1314c:	blx	fp
   13150:	cmp	r0, #0
   13154:	beq	13090 <flatcc_builder_custom_reset@@Base+0x3c>
   13158:	mvn	r0, #0
   1315c:	b	13130 <flatcc_builder_custom_reset@@Base+0xdc>
   13160:	ldr	r3, [r5, #56]	; 0x38
   13164:	cmp	r3, #0
   13168:	beq	130a0 <flatcc_builder_custom_reset@@Base+0x4c>
   1316c:	ldr	r3, [pc, #12]	; 13180 <flatcc_builder_custom_reset@@Base+0x12c>
   13170:	ldr	r2, [pc, #12]	; 13184 <flatcc_builder_custom_reset@@Base+0x130>
   13174:	ldr	r1, [pc, #12]	; 13188 <flatcc_builder_custom_reset@@Base+0x134>
   13178:	ldr	r0, [pc, #12]	; 1318c <flatcc_builder_custom_reset@@Base+0x138>
   1317c:	bl	120b0 <__assert_fail@plt>
   13180:	andeq	r6, r1, r9, ror #6
   13184:			; <UNDEFINED> instruction: 0x000001b2
   13188:	andeq	r6, r1, r7, lsl #16
   1318c:	andeq	r6, r1, r4, lsl #17

00013190 <flatcc_builder_reset@@Base>:
   13190:	mov	r2, #0
   13194:	mov	r1, r2
   13198:	b	13054 <flatcc_builder_custom_reset@@Base>

0001319c <flatcc_builder_clear@@Base>:
   1319c:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   131a0:	mov	r5, #0
   131a4:	mov	r4, r0
   131a8:	add	r6, r0, #52	; 0x34
   131ac:	mov	r8, r5
   131b0:	str	r5, [sp]
   131b4:	mov	r1, r6
   131b8:	ldr	r7, [r4, #48]	; 0x30
   131bc:	mov	r3, r8
   131c0:	mov	r2, #0
   131c4:	ldr	r0, [r4, #40]	; 0x28
   131c8:	add	r5, r5, #1
   131cc:	blx	r7
   131d0:	cmp	r5, #8
   131d4:	add	r6, r6, #8
   131d8:	bne	131b0 <flatcc_builder_clear@@Base+0x14>
   131dc:	ldr	r3, [r4, #184]	; 0xb8
   131e0:	cmp	r3, #0
   131e4:	beq	131f0 <flatcc_builder_clear@@Base+0x54>
   131e8:	add	r0, r4, #188	; 0xbc
   131ec:	bl	15734 <flatcc_emitter_clear@@Base>
   131f0:	mov	r2, #232	; 0xe8
   131f4:	mov	r1, #0
   131f8:	mov	r0, r4
   131fc:	add	sp, sp, #8
   13200:	pop	{r4, r5, r6, r7, r8, lr}
   13204:	b	12074 <memset@plt>

00013208 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13208:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1320c:	add	r4, r1, #3
   13210:	bic	r4, r4, #3
   13214:	add	r4, r4, #4
   13218:	mov	r7, #0
   1321c:	str	r7, [sp]
   13220:	mov	r3, r4
   13224:	ldr	r2, [r0, #228]	; 0xe4
   13228:	mov	r1, #7
   1322c:	mov	r6, r0
   13230:	bl	12a30 <flatcc_builder_default_alloc@@Base+0xf8>
   13234:	subs	r5, r0, #0
   13238:	moveq	r0, r5
   1323c:	beq	1326c <flatcc_builder_enter_user_frame_ptr@@Base+0x64>
   13240:	mov	r2, r4
   13244:	mov	r1, r7
   13248:	bl	12074 <memset@plt>
   1324c:	ldr	r3, [r6, #224]	; 0xe0
   13250:	add	r0, r5, #4
   13254:	str	r3, [r5]
   13258:	ldr	r1, [r6, #228]	; 0xe4
   1325c:	add	r3, r1, #4
   13260:	add	r4, r4, r1
   13264:	str	r3, [r6, #224]	; 0xe0
   13268:	str	r4, [r6, #228]	; 0xe4
   1326c:	add	sp, sp, #12
   13270:	pop	{r4, r5, r6, r7, pc}

00013274 <flatcc_builder_enter_user_frame@@Base>:
   13274:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13278:	add	r4, r1, #3
   1327c:	bic	r4, r4, #3
   13280:	add	r4, r4, #4
   13284:	mov	r7, #0
   13288:	str	r7, [sp]
   1328c:	mov	r3, r4
   13290:	ldr	r2, [r0, #228]	; 0xe4
   13294:	mov	r1, #7
   13298:	mov	r6, r0
   1329c:	bl	12a30 <flatcc_builder_default_alloc@@Base+0xf8>
   132a0:	subs	r5, r0, #0
   132a4:	moveq	r0, r5
   132a8:	beq	132d4 <flatcc_builder_enter_user_frame@@Base+0x60>
   132ac:	mov	r2, r4
   132b0:	mov	r1, r7
   132b4:	bl	12074 <memset@plt>
   132b8:	ldr	r3, [r6, #224]	; 0xe0
   132bc:	str	r3, [r5]
   132c0:	ldr	r1, [r6, #228]	; 0xe4
   132c4:	add	r0, r1, #4
   132c8:	add	r4, r4, r1
   132cc:	str	r0, [r6, #224]	; 0xe0
   132d0:	str	r4, [r6, #228]	; 0xe4
   132d4:	add	sp, sp, #12
   132d8:	pop	{r4, r5, r6, r7, pc}

000132dc <flatcc_builder_exit_user_frame@@Base>:
   132dc:	ldr	r3, [r0, #224]	; 0xe0
   132e0:	cmp	r3, #0
   132e4:	bne	13300 <flatcc_builder_exit_user_frame@@Base+0x24>
   132e8:	push	{r4, lr}
   132ec:	ldr	r3, [pc, #44]	; 13320 <flatcc_builder_exit_user_frame@@Base+0x44>
   132f0:	ldr	r2, [pc, #44]	; 13324 <flatcc_builder_exit_user_frame@@Base+0x48>
   132f4:	ldr	r1, [pc, #44]	; 13328 <flatcc_builder_exit_user_frame@@Base+0x4c>
   132f8:	ldr	r0, [pc, #44]	; 1332c <flatcc_builder_exit_user_frame@@Base+0x50>
   132fc:	bl	120b0 <__assert_fail@plt>
   13300:	ldr	r1, [r0, #108]	; 0x6c
   13304:	mov	r2, r0
   13308:	add	r1, r1, r3
   1330c:	sub	r3, r3, #4
   13310:	str	r3, [r0, #228]	; 0xe4
   13314:	ldr	r0, [r1, #-4]
   13318:	str	r0, [r2, #224]	; 0xe0
   1331c:	bx	lr
   13320:	andeq	r6, r1, r5, lsl #7
   13324:	andeq	r0, r0, lr, lsl r2
   13328:	andeq	r6, r1, r7, lsl #16
   1332c:	muleq	r1, r6, r8

00013330 <flatcc_builder_exit_user_frame_at@@Base>:
   13330:	ldr	r2, [r0, #224]	; 0xe0
   13334:	cmp	r2, r1
   13338:	bcs	13354 <flatcc_builder_exit_user_frame_at@@Base+0x24>
   1333c:	push	{r4, lr}
   13340:	ldr	r3, [pc, #20]	; 1335c <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   13344:	ldr	r2, [pc, #20]	; 13360 <flatcc_builder_exit_user_frame_at@@Base+0x30>
   13348:	ldr	r1, [pc, #20]	; 13364 <flatcc_builder_exit_user_frame_at@@Base+0x34>
   1334c:	ldr	r0, [pc, #20]	; 13368 <flatcc_builder_exit_user_frame_at@@Base+0x38>
   13350:	bl	120b0 <__assert_fail@plt>
   13354:	str	r1, [r0, #224]	; 0xe0
   13358:	b	132dc <flatcc_builder_exit_user_frame@@Base>
   1335c:	andeq	r6, r1, r4, lsr #7
   13360:	andeq	r0, r0, r7, lsr #4
   13364:	andeq	r6, r1, r7, lsl #16
   13368:	andeq	r6, r1, pc, lsr #17

0001336c <flatcc_builder_get_current_user_frame@@Base>:
   1336c:	ldr	r0, [r0, #224]	; 0xe0
   13370:	bx	lr

00013374 <flatcc_builder_get_user_frame_ptr@@Base>:
   13374:	ldr	r0, [r0, #108]	; 0x6c
   13378:	add	r0, r0, r1
   1337c:	bx	lr

00013380 <flatcc_builder_embed_buffer@@Base>:
   13380:	push	{r4, r5, r6, lr}
   13384:	mov	r4, r3
   13388:	ldr	r3, [r0, #152]	; 0x98
   1338c:	sub	sp, sp, #80	; 0x50
   13390:	adds	r3, r3, #0
   13394:	movne	r3, #1
   13398:	mov	r6, r2
   1339c:	mov	r2, r1
   133a0:	add	r1, sp, #96	; 0x60
   133a4:	mov	r5, r0
   133a8:	bl	12c80 <flatcc_builder_default_alloc@@Base+0x348>
   133ac:	cmp	r0, #0
   133b0:	movne	r0, #0
   133b4:	bne	13488 <flatcc_builder_embed_buffer@@Base+0x108>
   133b8:	ldr	r3, [sp, #100]	; 0x64
   133bc:	str	r0, [sp, #8]
   133c0:	tst	r3, #2
   133c4:	ldr	r3, [r5, #136]	; 0x88
   133c8:	movne	r2, #4
   133cc:	moveq	r2, #0
   133d0:	sub	r3, r3, r4
   133d4:	sub	r3, r3, r2
   133d8:	ldrh	r2, [sp, #96]	; 0x60
   133dc:	str	r0, [sp, #12]
   133e0:	sub	r2, r2, #1
   133e4:	and	r3, r3, r2
   133e8:	add	r2, r4, r3
   133ec:	str	r2, [sp, #4]
   133f0:	ldr	r2, [r5, #152]	; 0x98
   133f4:	cmp	r2, #0
   133f8:	beq	13418 <flatcc_builder_embed_buffer@@Base+0x98>
   133fc:	mov	r2, #4
   13400:	add	r1, sp, r2
   13404:	str	r2, [sp, #8]
   13408:	str	r2, [sp, #20]
   1340c:	mov	r2, #1
   13410:	str	r1, [sp, #16]
   13414:	str	r2, [sp, #12]
   13418:	cmp	r4, #0
   1341c:	beq	13448 <flatcc_builder_embed_buffer@@Base+0xc8>
   13420:	ldr	r2, [sp, #8]
   13424:	add	r1, sp, #80	; 0x50
   13428:	add	r2, r2, r4
   1342c:	str	r2, [sp, #8]
   13430:	ldr	r2, [sp, #12]
   13434:	add	r2, r2, #1
   13438:	str	r2, [sp, #12]
   1343c:	add	r1, r1, r2, lsl #3
   13440:	str	r6, [r1, #-72]	; 0xffffffb8
   13444:	str	r4, [r1, #-68]	; 0xffffffbc
   13448:	cmp	r3, #0
   1344c:	beq	1347c <flatcc_builder_embed_buffer@@Base+0xfc>
   13450:	ldr	r2, [sp, #8]
   13454:	add	r1, sp, #80	; 0x50
   13458:	add	r2, r2, r3
   1345c:	str	r2, [sp, #8]
   13460:	ldr	r2, [sp, #12]
   13464:	ldr	r0, [pc, #36]	; 13490 <flatcc_builder_embed_buffer@@Base+0x110>
   13468:	add	r2, r2, #1
   1346c:	str	r2, [sp, #12]
   13470:	add	r1, r1, r2, lsl #3
   13474:	str	r0, [r1, #-72]	; 0xffffffb8
   13478:	str	r3, [r1, #-68]	; 0xffffffbc
   1347c:	add	r1, sp, #8
   13480:	mov	r0, r5
   13484:	bl	12d30 <flatcc_builder_default_alloc@@Base+0x3f8>
   13488:	add	sp, sp, #80	; 0x50
   1348c:	pop	{r4, r5, r6, pc}
   13490:	andeq	r6, r1, r1, lsr #2

00013494 <flatcc_builder_create_buffer@@Base>:
   13494:	push	{r4, r5, r6, r7, r8, r9, lr}
   13498:	sub	sp, sp, #92	; 0x5c
   1349c:	mov	r7, #0
   134a0:	ldr	r8, [sp, #124]	; 0x7c
   134a4:	mov	r9, r1
   134a8:	and	r6, r8, #1
   134ac:	mov	r5, r3
   134b0:	add	r1, sp, #120	; 0x78
   134b4:	mov	r3, r6
   134b8:	mov	r4, r0
   134bc:	str	r7, [sp, #12]
   134c0:	bl	12c80 <flatcc_builder_default_alloc@@Base+0x348>
   134c4:	cmp	r0, r7
   134c8:	bne	1363c <flatcc_builder_create_buffer@@Base+0x1a8>
   134cc:	ldrh	r3, [r4, #128]	; 0x80
   134d0:	ldrh	r1, [sp, #120]	; 0x78
   134d4:	ldr	r2, [r4, #136]	; 0x88
   134d8:	and	r8, r8, #2
   134dc:	cmp	r3, r1
   134e0:	strhcc	r1, [r4, #128]	; 0x80
   134e4:	cmp	r9, #0
   134e8:	sub	r1, r1, #1
   134ec:	ldrne	r3, [r9]
   134f0:	strne	r3, [sp, #12]
   134f4:	ldr	r0, [sp, #12]
   134f8:	sub	r3, r2, #4
   134fc:	cmp	r0, #0
   13500:	movne	r0, #4
   13504:	moveq	r0, #0
   13508:	cmp	r8, #0
   1350c:	moveq	ip, #0
   13510:	movne	ip, #4
   13514:	sub	r3, r3, r0
   13518:	sub	r3, r3, ip
   1351c:	and	r3, r3, r1
   13520:	moveq	lr, r6
   13524:	mov	r1, #0
   13528:	orrne	lr, r6, #1
   1352c:	cmp	lr, r1
   13530:	str	r1, [sp, #16]
   13534:	str	r1, [sp, #20]
   13538:	beq	13558 <flatcc_builder_create_buffer@@Base+0xc4>
   1353c:	mov	r1, #4
   13540:	str	r1, [sp, #16]
   13544:	add	ip, sp, #8
   13548:	str	r1, [sp, #28]
   1354c:	mov	r1, #1
   13550:	str	ip, [sp, #24]
   13554:	str	r1, [sp, #20]
   13558:	ldr	r7, [sp, #20]
   1355c:	add	r8, sp, #88	; 0x58
   13560:	add	r1, r7, #1
   13564:	ldr	ip, [sp, #16]
   13568:	add	r8, r8, r1, lsl #3
   1356c:	add	r9, sp, #4
   13570:	add	ip, ip, #4
   13574:	str	r9, [r8, #-72]	; 0xffffffb8
   13578:	cmp	r0, #0
   1357c:	mov	r9, #4
   13580:	str	ip, [sp, #16]
   13584:	str	r9, [r8, #-68]	; 0xffffffbc
   13588:	str	r1, [sp, #20]
   1358c:	beq	135b8 <flatcc_builder_create_buffer@@Base+0x124>
   13590:	add	ip, r0, ip
   13594:	add	r1, r7, #2
   13598:	str	ip, [sp, #16]
   1359c:	add	ip, sp, #88	; 0x58
   135a0:	add	r1, ip, r1, lsl #3
   135a4:	add	r7, r7, #2
   135a8:	add	ip, sp, #12
   135ac:	str	ip, [r1, #-72]	; 0xffffffb8
   135b0:	str	r0, [r1, #-68]	; 0xffffffbc
   135b4:	str	r7, [sp, #20]
   135b8:	cmp	r3, #0
   135bc:	beq	135ec <flatcc_builder_create_buffer@@Base+0x158>
   135c0:	ldr	r1, [sp, #16]
   135c4:	add	r0, sp, #88	; 0x58
   135c8:	add	r1, r1, r3
   135cc:	str	r1, [sp, #16]
   135d0:	ldr	r1, [sp, #20]
   135d4:	ldr	ip, [pc, #108]	; 13648 <flatcc_builder_create_buffer@@Base+0x1b4>
   135d8:	add	r1, r1, #1
   135dc:	str	r1, [sp, #20]
   135e0:	add	r0, r0, r1, lsl #3
   135e4:	str	ip, [r0, #-72]	; 0xffffffb8
   135e8:	str	r3, [r0, #-68]	; 0xffffffbc
   135ec:	cmp	r6, #0
   135f0:	ldr	r3, [sp, #16]
   135f4:	add	r1, sp, #16
   135f8:	sub	r3, r2, r3
   135fc:	ldrne	r2, [r4, #144]	; 0x90
   13600:	ldreq	r2, [r4, #140]	; 0x8c
   13604:	add	r3, r3, lr, lsl #2
   13608:	sub	r2, r2, r3
   1360c:	mov	r0, r4
   13610:	sub	r3, r5, r3
   13614:	str	r2, [sp, #8]
   13618:	str	r3, [sp, #4]
   1361c:	bl	12d30 <flatcc_builder_default_alloc@@Base+0x3f8>
   13620:	cmp	r0, #0
   13624:	bne	13640 <flatcc_builder_create_buffer@@Base+0x1ac>
   13628:	ldr	r3, [pc, #28]	; 1364c <flatcc_builder_create_buffer@@Base+0x1b8>
   1362c:	mov	r2, #772	; 0x304
   13630:	ldr	r1, [pc, #24]	; 13650 <flatcc_builder_create_buffer@@Base+0x1bc>
   13634:	ldr	r0, [pc, #24]	; 13654 <flatcc_builder_create_buffer@@Base+0x1c0>
   13638:	bl	120b0 <__assert_fail@plt>
   1363c:	mov	r0, r7
   13640:	add	sp, sp, #92	; 0x5c
   13644:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13648:	andeq	r6, r1, r1, lsr #2
   1364c:	andeq	r6, r1, r6, asr #7
   13650:	andeq	r6, r1, r7, lsl #16
   13654:	andeq	r6, r1, r4, ror r8

00013658 <flatcc_builder_create_struct@@Base>:
   13658:	cmp	r3, #0
   1365c:	push	{lr}		; (str lr, [sp, #-4]!)
   13660:	sub	sp, sp, #76	; 0x4c
   13664:	bne	1367c <flatcc_builder_create_struct@@Base+0x24>
   13668:	ldr	r3, [pc, #144]	; 13700 <flatcc_builder_create_struct@@Base+0xa8>
   1366c:	ldr	r2, [pc, #144]	; 13704 <flatcc_builder_create_struct@@Base+0xac>
   13670:	ldr	r1, [pc, #144]	; 13708 <flatcc_builder_create_struct@@Base+0xb0>
   13674:	ldr	r0, [pc, #144]	; 1370c <flatcc_builder_create_struct@@Base+0xb4>
   13678:	bl	120b0 <__assert_fail@plt>
   1367c:	ldrh	ip, [r0, #128]	; 0x80
   13680:	cmp	ip, r3
   13684:	ldr	ip, [r0, #136]	; 0x88
   13688:	strhcc	r3, [r0, #128]	; 0x80
   1368c:	sub	ip, ip, r2
   13690:	sub	r3, r3, #1
   13694:	and	r3, r3, ip
   13698:	mov	ip, #0
   1369c:	cmp	r2, ip
   136a0:	strne	r2, [sp, #12]
   136a4:	str	ip, [sp]
   136a8:	strne	r2, [sp]
   136ac:	movne	r2, #1
   136b0:	str	ip, [sp, #4]
   136b4:	strne	r1, [sp, #8]
   136b8:	strne	r2, [sp, #4]
   136bc:	cmp	r3, #0
   136c0:	beq	136f0 <flatcc_builder_create_struct@@Base+0x98>
   136c4:	ldr	r2, [sp]
   136c8:	add	r1, sp, #72	; 0x48
   136cc:	add	r2, r2, r3
   136d0:	str	r2, [sp]
   136d4:	ldr	r2, [sp, #4]
   136d8:	ldr	ip, [pc, #48]	; 13710 <flatcc_builder_create_struct@@Base+0xb8>
   136dc:	add	r2, r2, #1
   136e0:	str	r2, [sp, #4]
   136e4:	add	r1, r1, r2, lsl #3
   136e8:	str	ip, [r1, #-72]	; 0xffffffb8
   136ec:	str	r3, [r1, #-68]	; 0xffffffbc
   136f0:	mov	r1, sp
   136f4:	bl	12d30 <flatcc_builder_default_alloc@@Base+0x3f8>
   136f8:	add	sp, sp, #76	; 0x4c
   136fc:	pop	{pc}		; (ldr pc, [sp], #4)
   13700:	andeq	r6, r1, r3, ror #7
   13704:	andeq	r0, r0, pc, lsl #6
   13708:	andeq	r6, r1, r7, lsl #16
   1370c:	andeq	r6, r1, lr, asr #17
   13710:	andeq	r6, r1, r1, lsr #2

00013714 <flatcc_builder_start_buffer@@Base>:
   13714:	push	{r4, r5, r6, r7, r8, lr}
   13718:	mov	r5, r1
   1371c:	ldrh	r1, [r0, #128]	; 0x80
   13720:	mov	r4, r0
   13724:	mov	r7, r2
   13728:	mov	r6, r3
   1372c:	bl	12aa0 <flatcc_builder_default_alloc@@Base+0x168>
   13730:	cmp	r0, #0
   13734:	bne	137a8 <flatcc_builder_start_buffer@@Base+0x94>
   13738:	ldrh	r3, [r4, #132]	; 0x84
   1373c:	ldr	ip, [r4, #32]
   13740:	mov	r1, #1
   13744:	strh	r1, [r4, #128]	; 0x80
   13748:	strh	r3, [ip, #34]	; 0x22
   1374c:	ldrh	r3, [r4, #164]	; 0xa4
   13750:	strh	r7, [r4, #132]	; 0x84
   13754:	cmp	r5, #0
   13758:	strh	r3, [ip, #32]
   1375c:	ldr	r3, [r4, #144]	; 0x90
   13760:	strh	r6, [r4, #164]	; 0xa4
   13764:	str	r3, [ip, #20]
   13768:	ldr	r3, [r4, #152]	; 0x98
   1376c:	str	r3, [ip, #28]
   13770:	ldr	r3, [r4, #136]	; 0x88
   13774:	str	r3, [r4, #144]	; 0x90
   13778:	ldr	r3, [r4, #148]	; 0x94
   1377c:	str	r3, [r4, #152]	; 0x98
   13780:	add	r2, r3, r1
   13784:	ldr	r3, [r4, #168]	; 0xa8
   13788:	str	r2, [r4, #148]	; 0x94
   1378c:	str	r3, [ip, #16]
   13790:	ldr	r3, [pc, #24]	; 137b0 <flatcc_builder_start_buffer@@Base+0x9c>
   13794:	moveq	r5, r3
   13798:	ldr	r3, [r5]
   1379c:	str	r3, [r4, #168]	; 0xa8
   137a0:	strh	r1, [ip, #14]
   137a4:	pop	{r4, r5, r6, r7, r8, pc}
   137a8:	mvn	r0, #0
   137ac:	pop	{r4, r5, r6, r7, r8, pc}
   137b0:	andeq	r6, r1, r1, lsr #2

000137b4 <flatcc_builder_end_buffer@@Base>:
   137b4:	push	{r0, r1, r2, r4, r5, lr}
   137b8:	mov	r4, r0
   137bc:	ldrh	r0, [r0, #164]	; 0xa4
   137c0:	ldr	r2, [r4, #152]	; 0x98
   137c4:	and	r0, r0, #2
   137c8:	cmp	r2, #0
   137cc:	orrne	r0, r0, #1
   137d0:	ldr	r2, [r4, #32]
   137d4:	ldrh	r2, [r2, #14]
   137d8:	cmp	r2, #1
   137dc:	beq	137f4 <flatcc_builder_end_buffer@@Base+0x40>
   137e0:	ldr	r3, [pc, #120]	; 13860 <flatcc_builder_end_buffer@@Base+0xac>
   137e4:	ldr	r2, [pc, #120]	; 13864 <flatcc_builder_end_buffer@@Base+0xb0>
   137e8:	ldr	r1, [pc, #120]	; 13868 <flatcc_builder_end_buffer@@Base+0xb4>
   137ec:	ldr	r0, [pc, #120]	; 1386c <flatcc_builder_end_buffer@@Base+0xb8>
   137f0:	bl	120b0 <__assert_fail@plt>
   137f4:	ldrh	r2, [r4, #132]	; 0x84
   137f8:	mov	r3, r1
   137fc:	ldrh	r1, [r4, #128]	; 0x80
   13800:	str	r0, [sp, #4]
   13804:	mov	r0, r4
   13808:	cmp	r1, r2
   1380c:	strhcc	r2, [r4, #128]	; 0x80
   13810:	ldrh	r1, [r4, #128]	; 0x80
   13814:	str	r1, [sp]
   13818:	add	r1, r4, #168	; 0xa8
   1381c:	bl	13494 <flatcc_builder_create_buffer@@Base>
   13820:	subs	r5, r0, #0
   13824:	beq	13854 <flatcc_builder_end_buffer@@Base+0xa0>
   13828:	ldr	r3, [r4, #32]
   1382c:	mov	r0, r4
   13830:	ldr	r2, [r3, #20]
   13834:	str	r2, [r4, #144]	; 0x90
   13838:	ldr	r2, [r3, #28]
   1383c:	str	r2, [r4, #152]	; 0x98
   13840:	ldr	r2, [r3, #16]
   13844:	str	r2, [r4, #168]	; 0xa8
   13848:	ldrh	r3, [r3, #32]
   1384c:	strh	r3, [r4, #164]	; 0xa4
   13850:	bl	1282c <emit_test@@Base+0x404>
   13854:	mov	r0, r5
   13858:	add	sp, sp, #12
   1385c:	pop	{r4, r5, pc}
   13860:	andeq	r6, r1, r0, lsl #8
   13864:	andeq	r0, r0, r6, asr #6
   13868:	andeq	r6, r1, r7, lsl #16
   1386c:	ldrdeq	r6, [r1], -r9

00013870 <flatcc_builder_start_struct@@Base>:
   13870:	push	{r4, r5, r6, lr}
   13874:	mov	r5, r1
   13878:	mov	r1, r2
   1387c:	mov	r4, r0
   13880:	bl	12aa0 <flatcc_builder_default_alloc@@Base+0x168>
   13884:	cmp	r0, #0
   13888:	bne	138b4 <flatcc_builder_start_struct@@Base+0x44>
   1388c:	ldr	r3, [r4, #32]
   13890:	mov	r2, #2
   13894:	mov	r0, r4
   13898:	mvn	r1, #3
   1389c:	strh	r2, [r3, #14]
   138a0:	bl	12764 <emit_test@@Base+0x33c>
   138a4:	mov	r1, r5
   138a8:	mov	r0, r4
   138ac:	pop	{r4, r5, r6, lr}
   138b0:	b	127e4 <emit_test@@Base+0x3bc>
   138b4:	mov	r0, #0
   138b8:	pop	{r4, r5, r6, pc}

000138bc <flatcc_builder_struct_edit@@Base>:
   138bc:	ldr	r0, [r0, #16]
   138c0:	bx	lr

000138c4 <flatcc_builder_end_struct@@Base>:
   138c4:	ldr	r3, [r0, #32]
   138c8:	push	{r4, r5, r6, lr}
   138cc:	ldrh	r3, [r3, #14]
   138d0:	cmp	r3, #2
   138d4:	beq	138ec <flatcc_builder_end_struct@@Base+0x28>
   138d8:	ldr	r3, [pc, #56]	; 13918 <flatcc_builder_end_struct@@Base+0x54>
   138dc:	mov	r2, #872	; 0x368
   138e0:	ldr	r1, [pc, #52]	; 1391c <flatcc_builder_end_struct@@Base+0x58>
   138e4:	ldr	r0, [pc, #52]	; 13920 <flatcc_builder_end_struct@@Base+0x5c>
   138e8:	bl	120b0 <__assert_fail@plt>
   138ec:	ldrh	r3, [r0, #130]	; 0x82
   138f0:	ldr	r2, [r0, #20]
   138f4:	ldr	r1, [r0, #16]
   138f8:	mov	r4, r0
   138fc:	bl	13658 <flatcc_builder_create_struct@@Base>
   13900:	subs	r5, r0, #0
   13904:	beq	13910 <flatcc_builder_end_struct@@Base+0x4c>
   13908:	mov	r0, r4
   1390c:	bl	1282c <emit_test@@Base+0x404>
   13910:	mov	r0, r5
   13914:	pop	{r4, r5, r6, pc}
   13918:	andeq	r6, r1, sl, lsl r4
   1391c:	andeq	r6, r1, r7, lsl #16
   13920:	andeq	r6, r1, r5, lsl #18

00013924 <flatcc_builder_extend_vector@@Base>:
   13924:	push	{r4, r5, r6, lr}
   13928:	mov	r4, r0
   1392c:	ldr	r0, [r0, #32]
   13930:	mov	r5, r1
   13934:	ldr	r2, [r0, #24]
   13938:	bl	12db0 <flatcc_builder_default_alloc@@Base+0x478>
   1393c:	cmp	r0, #0
   13940:	bne	1395c <flatcc_builder_extend_vector@@Base+0x38>
   13944:	ldr	r3, [r4, #32]
   13948:	mov	r0, r4
   1394c:	ldr	r1, [r3, #16]
   13950:	mul	r1, r1, r5
   13954:	pop	{r4, r5, r6, lr}
   13958:	b	127e4 <emit_test@@Base+0x3bc>
   1395c:	mov	r0, #0
   13960:	pop	{r4, r5, r6, pc}

00013964 <flatcc_builder_vector_push@@Base>:
   13964:	ldr	r3, [r0, #32]
   13968:	push	{r4, lr}
   1396c:	ldrh	r2, [r3, #14]
   13970:	cmp	r2, #4
   13974:	beq	1398c <flatcc_builder_vector_push@@Base+0x28>
   13978:	ldr	r3, [pc, #64]	; 139c0 <flatcc_builder_vector_push@@Base+0x5c>
   1397c:	ldr	r2, [pc, #64]	; 139c4 <flatcc_builder_vector_push@@Base+0x60>
   13980:	ldr	r1, [pc, #64]	; 139c8 <flatcc_builder_vector_push@@Base+0x64>
   13984:	ldr	r0, [pc, #64]	; 139cc <flatcc_builder_vector_push@@Base+0x68>
   13988:	bl	120b0 <__assert_fail@plt>
   1398c:	ldr	r2, [r3, #20]
   13990:	ldr	ip, [r3, #24]
   13994:	cmp	r2, ip
   13998:	ldrhi	r3, [pc, #32]	; 139c0 <flatcc_builder_vector_push@@Base+0x5c>
   1399c:	movhi	r2, #908	; 0x38c
   139a0:	ldrhi	r1, [pc, #32]	; 139c8 <flatcc_builder_vector_push@@Base+0x64>
   139a4:	ldrhi	r0, [pc, #36]	; 139d0 <flatcc_builder_vector_push@@Base+0x6c>
   139a8:	bhi	13988 <flatcc_builder_vector_push@@Base+0x24>
   139ac:	add	r2, r2, #1
   139b0:	str	r2, [r3, #20]
   139b4:	ldr	r2, [r3, #16]
   139b8:	pop	{r4, lr}
   139bc:	b	128b8 <emit_test@@Base+0x490>
   139c0:	andeq	r6, r1, r4, lsr r4
   139c4:	andeq	r0, r0, fp, lsl #7
   139c8:	andeq	r6, r1, r7, lsl #16
   139cc:	andeq	r6, r1, r1, lsr r9
   139d0:	andeq	r6, r1, sp, asr r9

000139d4 <flatcc_builder_append_vector@@Base>:
   139d4:	push	{r4, r5, r6, lr}
   139d8:	mov	r4, r0
   139dc:	ldr	r0, [r0, #32]
   139e0:	ldrh	r3, [r0, #14]
   139e4:	cmp	r3, #4
   139e8:	beq	13a00 <flatcc_builder_append_vector@@Base+0x2c>
   139ec:	ldr	r3, [pc, #76]	; 13a40 <flatcc_builder_append_vector@@Base+0x6c>
   139f0:	ldr	r2, [pc, #76]	; 13a44 <flatcc_builder_append_vector@@Base+0x70>
   139f4:	ldr	r1, [pc, #76]	; 13a48 <flatcc_builder_append_vector@@Base+0x74>
   139f8:	ldr	r0, [pc, #76]	; 13a4c <flatcc_builder_append_vector@@Base+0x78>
   139fc:	bl	120b0 <__assert_fail@plt>
   13a00:	mov	r5, r2
   13a04:	mov	r6, r1
   13a08:	ldr	r2, [r0, #24]
   13a0c:	mov	r1, r5
   13a10:	bl	12db0 <flatcc_builder_default_alloc@@Base+0x478>
   13a14:	cmp	r0, #0
   13a18:	bne	13a38 <flatcc_builder_append_vector@@Base+0x64>
   13a1c:	ldr	r3, [r4, #32]
   13a20:	mov	r1, r6
   13a24:	mov	r0, r4
   13a28:	ldr	r2, [r3, #16]
   13a2c:	mul	r2, r2, r5
   13a30:	pop	{r4, r5, r6, lr}
   13a34:	b	128b8 <emit_test@@Base+0x490>
   13a38:	mov	r0, #0
   13a3c:	pop	{r4, r5, r6, pc}
   13a40:	andeq	r6, r1, pc, asr #8
   13a44:	muleq	r0, r3, r3
   13a48:	andeq	r6, r1, r7, lsl #16
   13a4c:	andeq	r6, r1, r1, lsr r9

00013a50 <flatcc_builder_extend_offset_vector@@Base>:
   13a50:	push	{r4, r5, r6, lr}
   13a54:	mvn	r2, #-1073741824	; 0xc0000000
   13a58:	mov	r4, r0
   13a5c:	ldr	r0, [r0, #32]
   13a60:	mov	r5, r1
   13a64:	bl	12db0 <flatcc_builder_default_alloc@@Base+0x478>
   13a68:	cmp	r0, #0
   13a6c:	bne	13a80 <flatcc_builder_extend_offset_vector@@Base+0x30>
   13a70:	lsl	r1, r5, #2
   13a74:	mov	r0, r4
   13a78:	pop	{r4, r5, r6, lr}
   13a7c:	b	127e4 <emit_test@@Base+0x3bc>
   13a80:	mov	r0, #0
   13a84:	pop	{r4, r5, r6, pc}

00013a88 <flatcc_builder_offset_vector_push@@Base>:
   13a88:	ldr	r2, [r0, #32]
   13a8c:	push	{r4, lr}
   13a90:	ldrh	r3, [r2, #14]
   13a94:	cmp	r3, #5
   13a98:	beq	13ab0 <flatcc_builder_offset_vector_push@@Base+0x28>
   13a9c:	ldr	r3, [pc, #64]	; 13ae4 <flatcc_builder_offset_vector_push@@Base+0x5c>
   13aa0:	ldr	r2, [pc, #64]	; 13ae8 <flatcc_builder_offset_vector_push@@Base+0x60>
   13aa4:	ldr	r1, [pc, #64]	; 13aec <flatcc_builder_offset_vector_push@@Base+0x64>
   13aa8:	ldr	r0, [pc, #64]	; 13af0 <flatcc_builder_offset_vector_push@@Base+0x68>
   13aac:	bl	120b0 <__assert_fail@plt>
   13ab0:	ldr	r3, [r2, #20]
   13ab4:	cmn	r3, #-1073741823	; 0xc0000001
   13ab8:	beq	13adc <flatcc_builder_offset_vector_push@@Base+0x54>
   13abc:	add	r3, r3, #1
   13ac0:	mov	r4, r1
   13ac4:	str	r3, [r2, #20]
   13ac8:	mov	r1, #4
   13acc:	bl	127e4 <emit_test@@Base+0x3bc>
   13ad0:	cmp	r0, #0
   13ad4:	strne	r4, [r0]
   13ad8:	pop	{r4, pc}
   13adc:	mov	r0, #0
   13ae0:	pop	{r4, pc}
   13ae4:	andeq	r6, r1, ip, ror #8
   13ae8:	andeq	r0, r0, r6, lsr #7
   13aec:	andeq	r6, r1, r7, lsl #16
   13af0:	muleq	r1, sl, r9

00013af4 <flatcc_builder_append_offset_vector@@Base>:
   13af4:	push	{r4, r5, r6, lr}
   13af8:	mov	r4, r0
   13afc:	ldr	r0, [r0, #32]
   13b00:	ldrh	r3, [r0, #14]
   13b04:	cmp	r3, #5
   13b08:	beq	13b20 <flatcc_builder_append_offset_vector@@Base+0x2c>
   13b0c:	ldr	r3, [pc, #68]	; 13b58 <flatcc_builder_append_offset_vector@@Base+0x64>
   13b10:	mov	r2, #948	; 0x3b4
   13b14:	ldr	r1, [pc, #64]	; 13b5c <flatcc_builder_append_offset_vector@@Base+0x68>
   13b18:	ldr	r0, [pc, #64]	; 13b60 <flatcc_builder_append_offset_vector@@Base+0x6c>
   13b1c:	bl	120b0 <__assert_fail@plt>
   13b20:	mov	r5, r2
   13b24:	mov	r6, r1
   13b28:	mvn	r2, #-1073741824	; 0xc0000000
   13b2c:	mov	r1, r5
   13b30:	bl	12db0 <flatcc_builder_default_alloc@@Base+0x478>
   13b34:	cmp	r0, #0
   13b38:	bne	13b50 <flatcc_builder_append_offset_vector@@Base+0x5c>
   13b3c:	lsl	r2, r5, #2
   13b40:	mov	r1, r6
   13b44:	mov	r0, r4
   13b48:	pop	{r4, r5, r6, lr}
   13b4c:	b	128b8 <emit_test@@Base+0x490>
   13b50:	mov	r0, #0
   13b54:	pop	{r4, r5, r6, pc}
   13b58:	andeq	r6, r1, lr, lsl #9
   13b5c:	andeq	r6, r1, r7, lsl #16
   13b60:	muleq	r1, sl, r9

00013b64 <flatcc_builder_extend_string@@Base>:
   13b64:	push	{r4, r5, r6, lr}
   13b68:	mov	r4, r0
   13b6c:	ldr	r0, [r0, #32]
   13b70:	ldrh	r3, [r0, #14]
   13b74:	cmp	r3, #6
   13b78:	beq	13b90 <flatcc_builder_extend_string@@Base+0x2c>
   13b7c:	ldr	r3, [pc, #56]	; 13bbc <flatcc_builder_extend_string@@Base+0x58>
   13b80:	ldr	r2, [pc, #56]	; 13bc0 <flatcc_builder_extend_string@@Base+0x5c>
   13b84:	ldr	r1, [pc, #56]	; 13bc4 <flatcc_builder_extend_string@@Base+0x60>
   13b88:	ldr	r0, [pc, #56]	; 13bc8 <flatcc_builder_extend_string@@Base+0x64>
   13b8c:	bl	120b0 <__assert_fail@plt>
   13b90:	mvn	r2, #0
   13b94:	mov	r5, r1
   13b98:	bl	12db0 <flatcc_builder_default_alloc@@Base+0x478>
   13b9c:	cmp	r0, #0
   13ba0:	bne	13bb4 <flatcc_builder_extend_string@@Base+0x50>
   13ba4:	mov	r1, r5
   13ba8:	mov	r0, r4
   13bac:	pop	{r4, r5, r6, lr}
   13bb0:	b	127e4 <emit_test@@Base+0x3bc>
   13bb4:	mov	r0, #0
   13bb8:	pop	{r4, r5, r6, pc}
   13bbc:			; <UNDEFINED> instruction: 0x000164b2
   13bc0:			; <UNDEFINED> instruction: 0x000003bd
   13bc4:	andeq	r6, r1, r7, lsl #16
   13bc8:	andeq	r6, r1, sp, asr #19

00013bcc <flatcc_builder_append_string@@Base>:
   13bcc:	push	{r4, r5, r6, lr}
   13bd0:	mov	r4, r0
   13bd4:	ldr	r0, [r0, #32]
   13bd8:	ldrh	r3, [r0, #14]
   13bdc:	cmp	r3, #6
   13be0:	beq	13bf8 <flatcc_builder_append_string@@Base+0x2c>
   13be4:	ldr	r3, [pc, #68]	; 13c30 <flatcc_builder_append_string@@Base+0x64>
   13be8:	ldr	r2, [pc, #68]	; 13c34 <flatcc_builder_append_string@@Base+0x68>
   13bec:	ldr	r1, [pc, #68]	; 13c38 <flatcc_builder_append_string@@Base+0x6c>
   13bf0:	ldr	r0, [pc, #68]	; 13c3c <flatcc_builder_append_string@@Base+0x70>
   13bf4:	bl	120b0 <__assert_fail@plt>
   13bf8:	mov	r5, r2
   13bfc:	mov	r6, r1
   13c00:	mvn	r2, #0
   13c04:	mov	r1, r5
   13c08:	bl	12db0 <flatcc_builder_default_alloc@@Base+0x478>
   13c0c:	cmp	r0, #0
   13c10:	bne	13c28 <flatcc_builder_append_string@@Base+0x5c>
   13c14:	mov	r2, r5
   13c18:	mov	r1, r6
   13c1c:	mov	r0, r4
   13c20:	pop	{r4, r5, r6, lr}
   13c24:	b	128b8 <emit_test@@Base+0x490>
   13c28:	mov	r0, #0
   13c2c:	pop	{r4, r5, r6, pc}
   13c30:	andeq	r6, r1, pc, asr #9
   13c34:	andeq	r0, r0, r6, asr #7
   13c38:	andeq	r6, r1, r7, lsl #16
   13c3c:	andeq	r6, r1, sp, asr #19

00013c40 <flatcc_builder_append_string_str@@Base>:
   13c40:	push	{r4, r5, r6, lr}
   13c44:	mov	r5, r0
   13c48:	mov	r0, r1
   13c4c:	mov	r4, r1
   13c50:	bl	12050 <strlen@plt>
   13c54:	mov	r1, r4
   13c58:	mov	r2, r0
   13c5c:	mov	r0, r5
   13c60:	pop	{r4, r5, r6, lr}
   13c64:	b	13bcc <flatcc_builder_append_string@@Base>

00013c68 <flatcc_builder_append_string_strn@@Base>:
   13c68:	push	{r4, r5, r6, lr}
   13c6c:	mov	r4, r1
   13c70:	mov	r6, r0
   13c74:	mov	r1, #0
   13c78:	mov	r0, r4
   13c7c:	mov	r5, r2
   13c80:	bl	12080 <memchr@plt>
   13c84:	mov	r1, r4
   13c88:	cmp	r0, #0
   13c8c:	subne	r5, r0, r4
   13c90:	mov	r2, r5
   13c94:	mov	r0, r6
   13c98:	pop	{r4, r5, r6, lr}
   13c9c:	b	13bcc <flatcc_builder_append_string@@Base>

00013ca0 <flatcc_builder_truncate_vector@@Base>:
   13ca0:	ldr	r3, [r0, #32]
   13ca4:	push	{r4, lr}
   13ca8:	ldrh	r2, [r3, #14]
   13cac:	cmp	r2, #4
   13cb0:	beq	13cc8 <flatcc_builder_truncate_vector@@Base+0x28>
   13cb4:	ldr	r3, [pc, #68]	; 13d00 <flatcc_builder_truncate_vector@@Base+0x60>
   13cb8:	ldr	r2, [pc, #68]	; 13d04 <flatcc_builder_truncate_vector@@Base+0x64>
   13cbc:	ldr	r1, [pc, #68]	; 13d08 <flatcc_builder_truncate_vector@@Base+0x68>
   13cc0:	ldr	r0, [pc, #68]	; 13d0c <flatcc_builder_truncate_vector@@Base+0x6c>
   13cc4:	bl	120b0 <__assert_fail@plt>
   13cc8:	ldr	r2, [r3, #20]
   13ccc:	cmp	r2, r1
   13cd0:	ldrcc	r3, [pc, #40]	; 13d00 <flatcc_builder_truncate_vector@@Base+0x60>
   13cd4:	ldrcc	r2, [pc, #52]	; 13d10 <flatcc_builder_truncate_vector@@Base+0x70>
   13cd8:	ldrcc	r1, [pc, #40]	; 13d08 <flatcc_builder_truncate_vector@@Base+0x68>
   13cdc:	ldrcc	r0, [pc, #48]	; 13d14 <flatcc_builder_truncate_vector@@Base+0x74>
   13ce0:	bcc	13cc4 <flatcc_builder_truncate_vector@@Base+0x24>
   13ce4:	sub	r2, r2, r1
   13ce8:	str	r2, [r3, #20]
   13cec:	ldr	r3, [r3, #16]
   13cf0:	mul	r1, r3, r1
   13cf4:	bl	12898 <emit_test@@Base+0x470>
   13cf8:	mov	r0, #0
   13cfc:	pop	{r4, pc}
   13d00:	andeq	r6, r1, ip, ror #9
   13d04:	ldrdeq	r0, [r0], -r9
   13d08:	andeq	r6, r1, r7, lsl #16
   13d0c:	andeq	r6, r1, r1, lsr r9
   13d10:	ldrdeq	r0, [r0], -sl
   13d14:	strdeq	r6, [r1], -r9

00013d18 <flatcc_builder_truncate_offset_vector@@Base>:
   13d18:	ldr	r3, [r0, #32]
   13d1c:	push	{r4, lr}
   13d20:	ldrh	r2, [r3, #14]
   13d24:	cmp	r2, #5
   13d28:	beq	13d40 <flatcc_builder_truncate_offset_vector@@Base+0x28>
   13d2c:	ldr	r3, [pc, #68]	; 13d78 <flatcc_builder_truncate_offset_vector@@Base+0x60>
   13d30:	ldr	r2, [pc, #68]	; 13d7c <flatcc_builder_truncate_offset_vector@@Base+0x64>
   13d34:	ldr	r1, [pc, #68]	; 13d80 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   13d38:	ldr	r0, [pc, #68]	; 13d84 <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   13d3c:	bl	120b0 <__assert_fail@plt>
   13d40:	ldr	r2, [r3, #20]
   13d44:	cmp	r2, r1
   13d48:	ldrcc	r3, [pc, #40]	; 13d78 <flatcc_builder_truncate_offset_vector@@Base+0x60>
   13d4c:	ldrcc	r2, [pc, #52]	; 13d88 <flatcc_builder_truncate_offset_vector@@Base+0x70>
   13d50:	ldrcc	r1, [pc, #40]	; 13d80 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   13d54:	ldrcc	r0, [pc, #48]	; 13d8c <flatcc_builder_truncate_offset_vector@@Base+0x74>
   13d58:	bcc	13d3c <flatcc_builder_truncate_offset_vector@@Base+0x24>
   13d5c:	sub	r2, r2, r1
   13d60:	str	r2, [r3, #20]
   13d64:	ldr	r3, [r3, #16]
   13d68:	mul	r1, r3, r1
   13d6c:	bl	12898 <emit_test@@Base+0x470>
   13d70:	mov	r0, #0
   13d74:	pop	{r4, pc}
   13d78:	andeq	r6, r1, fp, lsl #10
   13d7c:	andeq	r0, r0, r2, ror #7
   13d80:	andeq	r6, r1, r7, lsl #16
   13d84:	muleq	r1, sl, r9
   13d88:	andeq	r0, r0, r3, ror #7
   13d8c:	andeq	r6, r1, sp, lsl sl

00013d90 <flatcc_builder_truncate_string@@Base>:
   13d90:	ldr	r2, [r0, #32]
   13d94:	push	{r4, lr}
   13d98:	ldrh	r3, [r2, #14]
   13d9c:	cmp	r3, #6
   13da0:	beq	13db8 <flatcc_builder_truncate_string@@Base+0x28>
   13da4:	ldr	r3, [pc, #60]	; 13de8 <flatcc_builder_truncate_string@@Base+0x58>
   13da8:	ldr	r2, [pc, #60]	; 13dec <flatcc_builder_truncate_string@@Base+0x5c>
   13dac:	ldr	r1, [pc, #60]	; 13df0 <flatcc_builder_truncate_string@@Base+0x60>
   13db0:	ldr	r0, [pc, #60]	; 13df4 <flatcc_builder_truncate_string@@Base+0x64>
   13db4:	bl	120b0 <__assert_fail@plt>
   13db8:	ldr	r3, [r2, #20]
   13dbc:	cmp	r3, r1
   13dc0:	ldrcc	r3, [pc, #32]	; 13de8 <flatcc_builder_truncate_string@@Base+0x58>
   13dc4:	movcc	r2, #1004	; 0x3ec
   13dc8:	ldrcc	r1, [pc, #32]	; 13df0 <flatcc_builder_truncate_string@@Base+0x60>
   13dcc:	ldrcc	r0, [pc, #36]	; 13df8 <flatcc_builder_truncate_string@@Base+0x68>
   13dd0:	bcc	13db4 <flatcc_builder_truncate_string@@Base+0x24>
   13dd4:	sub	r3, r3, r1
   13dd8:	str	r3, [r2, #20]
   13ddc:	bl	12898 <emit_test@@Base+0x470>
   13de0:	mov	r0, #0
   13de4:	pop	{r4, pc}
   13de8:	andeq	r6, r1, r1, lsr r5
   13dec:	andeq	r0, r0, fp, ror #7
   13df0:	andeq	r6, r1, r7, lsl #16
   13df4:	andeq	r6, r1, sp, asr #19
   13df8:	andeq	r6, r1, r8, asr sl

00013dfc <flatcc_builder_start_vector@@Base>:
   13dfc:	cmp	r2, #4
   13e00:	push	{r4, r5, r6, r7, r8, lr}
   13e04:	mov	r7, r1
   13e08:	movcs	r1, r2
   13e0c:	movcc	r1, #4
   13e10:	mov	r5, r0
   13e14:	mov	r6, r3
   13e18:	bl	12aa0 <flatcc_builder_default_alloc@@Base+0x168>
   13e1c:	subs	r4, r0, #0
   13e20:	mvnne	r4, #0
   13e24:	bne	13e4c <flatcc_builder_start_vector@@Base+0x50>
   13e28:	ldr	r2, [r5, #32]
   13e2c:	mov	r3, #4
   13e30:	mvn	r1, #3
   13e34:	str	r7, [r2, #16]
   13e38:	str	r4, [r2, #20]
   13e3c:	str	r6, [r2, #24]
   13e40:	strh	r3, [r2, #14]
   13e44:	mov	r0, r5
   13e48:	bl	12764 <emit_test@@Base+0x33c>
   13e4c:	mov	r0, r4
   13e50:	pop	{r4, r5, r6, r7, r8, pc}

00013e54 <flatcc_builder_start_offset_vector@@Base>:
   13e54:	push	{r4, r5, r6, lr}
   13e58:	mov	r1, #4
   13e5c:	mov	r5, r0
   13e60:	bl	12aa0 <flatcc_builder_default_alloc@@Base+0x168>
   13e64:	subs	r4, r0, #0
   13e68:	mvnne	r4, #0
   13e6c:	bne	13e94 <flatcc_builder_start_offset_vector@@Base+0x40>
   13e70:	ldr	r3, [r5, #32]
   13e74:	mov	r2, #4
   13e78:	mvn	r1, #3
   13e7c:	str	r2, [r3, #16]
   13e80:	mov	r2, #5
   13e84:	str	r4, [r3, #20]
   13e88:	strh	r2, [r3, #14]
   13e8c:	mov	r0, r5
   13e90:	bl	12764 <emit_test@@Base+0x33c>
   13e94:	mov	r0, r4
   13e98:	pop	{r4, r5, r6, pc}

00013e9c <flatcc_builder_start_string@@Base>:
   13e9c:	push	{r4, r5, r6, lr}
   13ea0:	mov	r1, #1
   13ea4:	mov	r5, r0
   13ea8:	bl	12aa0 <flatcc_builder_default_alloc@@Base+0x168>
   13eac:	subs	r4, r0, #0
   13eb0:	mvnne	r4, #0
   13eb4:	bne	13edc <flatcc_builder_start_string@@Base+0x40>
   13eb8:	ldr	r3, [r5, #32]
   13ebc:	mov	r2, #1
   13ec0:	mvn	r1, #3
   13ec4:	str	r2, [r3, #16]
   13ec8:	mov	r2, #6
   13ecc:	str	r4, [r3, #20]
   13ed0:	strh	r2, [r3, #14]
   13ed4:	mov	r0, r5
   13ed8:	bl	12764 <emit_test@@Base+0x33c>
   13edc:	mov	r0, r4
   13ee0:	pop	{r4, r5, r6, pc}

00013ee4 <flatcc_builder_reserve_table@@Base>:
   13ee4:	cmp	r1, #0
   13ee8:	bge	13f04 <flatcc_builder_reserve_table@@Base+0x20>
   13eec:	push	{r4, lr}
   13ef0:	ldr	r3, [pc, #16]	; 13f08 <flatcc_builder_reserve_table@@Base+0x24>
   13ef4:	ldr	r2, [pc, #16]	; 13f0c <flatcc_builder_reserve_table@@Base+0x28>
   13ef8:	ldr	r1, [pc, #16]	; 13f10 <flatcc_builder_reserve_table@@Base+0x2c>
   13efc:	ldr	r0, [pc, #16]	; 13f14 <flatcc_builder_reserve_table@@Base+0x30>
   13f00:	bl	120b0 <__assert_fail@plt>
   13f04:	b	12b80 <flatcc_builder_default_alloc@@Base+0x248>
   13f08:	andeq	r6, r1, r0, asr r5
   13f0c:	andeq	r0, r0, r9, lsr #8
   13f10:	andeq	r6, r1, r7, lsl #16
   13f14:	muleq	r1, r0, sl

00013f18 <flatcc_builder_start_table@@Base>:
   13f18:	push	{r4, r5, r6, lr}
   13f1c:	mov	r5, r1
   13f20:	mov	r1, #4
   13f24:	mov	r4, r0
   13f28:	bl	12aa0 <flatcc_builder_default_alloc@@Base+0x168>
   13f2c:	cmp	r0, #0
   13f30:	beq	13f40 <flatcc_builder_start_table@@Base+0x28>
   13f34:	mvn	r5, #0
   13f38:	mov	r0, r5
   13f3c:	pop	{r4, r5, r6, pc}
   13f40:	ldr	r1, [r4, #52]	; 0x34
   13f44:	ldr	r2, [r4, #4]
   13f48:	ldr	r3, [r4, #32]
   13f4c:	sub	r2, r2, r1
   13f50:	str	r2, [r3, #16]
   13f54:	ldr	r1, [r4, #76]	; 0x4c
   13f58:	ldr	r2, [r4]
   13f5c:	sub	r2, r2, r1
   13f60:	str	r2, [r3, #20]
   13f64:	ldr	r2, [r4, #12]
   13f68:	mov	r1, r5
   13f6c:	str	r2, [r3, #24]
   13f70:	ldrh	r2, [r4, #8]
   13f74:	strh	r2, [r3, #28]
   13f78:	ldr	r2, [pc, #44]	; 13fac <flatcc_builder_start_table@@Base+0x94>
   13f7c:	strh	r0, [r4, #8]
   13f80:	str	r2, [r4, #12]
   13f84:	mov	r2, #3
   13f88:	strh	r2, [r3, #14]
   13f8c:	mov	r0, r4
   13f90:	bl	12b80 <flatcc_builder_default_alloc@@Base+0x248>
   13f94:	subs	r5, r0, #0
   13f98:	bne	13f34 <flatcc_builder_start_table@@Base+0x1c>
   13f9c:	ldr	r1, [pc, #12]	; 13fb0 <flatcc_builder_start_table@@Base+0x98>
   13fa0:	mov	r0, r4
   13fa4:	bl	12764 <emit_test@@Base+0x33c>
   13fa8:	b	13f38 <flatcc_builder_start_table@@Base+0x20>
   13fac:	svccs	0x00693b52
   13fb0:	strdeq	pc, [r0], -ip

00013fb4 <flatcc_builder_create_vtable@@Base>:
   13fb4:	push	{lr}		; (str lr, [sp, #-4]!)
   13fb8:	sub	sp, sp, #76	; 0x4c
   13fbc:	cmp	r2, #0
   13fc0:	mov	r3, #0
   13fc4:	str	r3, [sp]
   13fc8:	str	r3, [sp, #4]
   13fcc:	movne	r3, #1
   13fd0:	strne	r3, [sp, #4]
   13fd4:	ldr	r3, [r0, #152]	; 0x98
   13fd8:	strne	r1, [sp, #8]
   13fdc:	strne	r2, [sp]
   13fe0:	strne	r2, [sp, #12]
   13fe4:	cmp	r3, #0
   13fe8:	mov	r1, sp
   13fec:	bne	14008 <flatcc_builder_create_vtable@@Base+0x54>
   13ff0:	ldr	r3, [r0, #180]	; 0xb4
   13ff4:	cmp	r3, #0
   13ff8:	bne	14008 <flatcc_builder_create_vtable@@Base+0x54>
   13ffc:	bl	12c04 <flatcc_builder_default_alloc@@Base+0x2cc>
   14000:	add	sp, sp, #76	; 0x4c
   14004:	pop	{pc}		; (ldr pc, [sp], #4)
   14008:	bl	12d30 <flatcc_builder_default_alloc@@Base+0x3f8>
   1400c:	cmp	r0, #0
   14010:	addne	r0, r0, #1
   14014:	b	14000 <flatcc_builder_create_vtable@@Base+0x4c>

00014018 <flatcc_builder_create_cached_vtable@@Base>:
   14018:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1401c:	mov	r4, r0
   14020:	ldr	r5, [r0, #116]	; 0x74
   14024:	sub	sp, sp, #20
   14028:	cmp	r5, #0
   1402c:	mov	fp, r1
   14030:	mov	r7, r2
   14034:	mov	r6, r3
   14038:	bne	140e0 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   1403c:	ldr	r3, [r0, #124]	; 0x7c
   14040:	add	r9, r0, #92	; 0x5c
   14044:	cmp	r3, #0
   14048:	beq	14060 <flatcc_builder_create_cached_vtable@@Base+0x48>
   1404c:	ldr	r3, [pc, #556]	; 14280 <flatcc_builder_create_cached_vtable@@Base+0x268>
   14050:	ldr	r2, [pc, #556]	; 14284 <flatcc_builder_create_cached_vtable@@Base+0x26c>
   14054:	ldr	r1, [pc, #556]	; 14288 <flatcc_builder_create_cached_vtable@@Base+0x270>
   14058:	ldr	r0, [pc, #556]	; 1428c <flatcc_builder_create_cached_vtable@@Base+0x274>
   1405c:	bl	120b0 <__assert_fail@plt>
   14060:	str	r5, [sp]
   14064:	mov	r3, #16
   14068:	mov	r2, r5
   1406c:	mov	r1, #6
   14070:	bl	12a30 <flatcc_builder_default_alloc@@Base+0xf8>
   14074:	cmp	r0, #0
   14078:	beq	140b4 <flatcc_builder_create_cached_vtable@@Base+0x9c>
   1407c:	mov	r3, #16
   14080:	str	r3, [r4, #124]	; 0x7c
   14084:	mov	r3, #5
   14088:	str	r3, [sp]
   1408c:	mov	r1, r9
   14090:	mov	r3, #1
   14094:	ldr	r8, [r4, #48]	; 0x30
   14098:	mov	r2, #256	; 0x100
   1409c:	ldr	r0, [r4, #40]	; 0x28
   140a0:	blx	r8
   140a4:	cmp	r0, #0
   140a8:	moveq	r3, #256	; 0x100
   140ac:	ldreq	r1, [r4, #96]	; 0x60
   140b0:	beq	140c0 <flatcc_builder_create_cached_vtable@@Base+0xa8>
   140b4:	mov	r0, #0
   140b8:	b	14230 <flatcc_builder_create_cached_vtable@@Base+0x218>
   140bc:	mov	r3, r2
   140c0:	lsl	r2, r3, #1
   140c4:	cmp	r2, r1
   140c8:	bls	140bc <flatcc_builder_create_cached_vtable@@Base+0xa4>
   140cc:	lsr	r3, r3, #2
   140d0:	mov	r2, #1
   140d4:	cmp	r3, r2, lsl r5
   140d8:	bhi	141a0 <flatcc_builder_create_cached_vtable@@Base+0x188>
   140dc:	str	r5, [r4, #116]	; 0x74
   140e0:	ldr	r3, [r4, #116]	; 0x74
   140e4:	ldr	r8, [r4, #92]	; 0x5c
   140e8:	rsb	r3, r3, #32
   140ec:	lsr	r6, r6, r3
   140f0:	adds	r3, r8, r6, lsl #2
   140f4:	str	r3, [sp, #8]
   140f8:	ldrne	r9, [r8, r6, lsl #2]
   140fc:	movne	sl, #0
   14100:	beq	140b4 <flatcc_builder_create_cached_vtable@@Base+0x9c>
   14104:	cmp	r9, #0
   14108:	bne	141a8 <flatcc_builder_create_cached_vtable@@Base+0x190>
   1410c:	str	r9, [sp]
   14110:	mov	r3, #16
   14114:	ldr	r2, [r4, #124]	; 0x7c
   14118:	mov	r1, #6
   1411c:	mov	r0, r4
   14120:	bl	12a30 <flatcc_builder_default_alloc@@Base+0xf8>
   14124:	subs	r5, r0, #0
   14128:	beq	140b4 <flatcc_builder_create_cached_vtable@@Base+0x9c>
   1412c:	ldr	r3, [r4, #124]	; 0x7c
   14130:	mov	r1, fp
   14134:	add	r2, r3, #16
   14138:	str	r2, [r4, #124]	; 0x7c
   1413c:	ldr	r2, [r4, #152]	; 0x98
   14140:	mov	r0, r4
   14144:	str	r2, [r5, #4]
   14148:	ldr	r2, [r8, r6, lsl #2]
   1414c:	str	r2, [r5, #12]
   14150:	str	r3, [r8, r6, lsl #2]
   14154:	mov	r2, r7
   14158:	bl	13fb4 <flatcc_builder_create_vtable@@Base>
   1415c:	cmp	r0, #0
   14160:	str	r0, [r5]
   14164:	beq	140b4 <flatcc_builder_create_cached_vtable@@Base+0x9c>
   14168:	cmp	sl, #0
   1416c:	ldrne	r3, [sl, #8]
   14170:	strne	r3, [r5, #8]
   14174:	bne	1422c <flatcc_builder_create_cached_vtable@@Base+0x214>
   14178:	ldr	r2, [r4, #172]	; 0xac
   1417c:	cmp	r2, #0
   14180:	beq	14238 <flatcc_builder_create_cached_vtable@@Base+0x220>
   14184:	ldr	r3, [r4, #120]	; 0x78
   14188:	add	r3, r7, r3
   1418c:	cmp	r2, r3
   14190:	bcs	14238 <flatcc_builder_create_cached_vtable@@Base+0x220>
   14194:	mov	r0, r4
   14198:	bl	12f74 <flatcc_builder_flush_vtable_cache@@Base>
   1419c:	b	1422c <flatcc_builder_create_cached_vtable@@Base+0x214>
   141a0:	add	r5, r5, #1
   141a4:	b	140d4 <flatcc_builder_create_cached_vtable@@Base+0xbc>
   141a8:	ldr	r5, [r4, #100]	; 0x64
   141ac:	ldr	r0, [r4, #68]	; 0x44
   141b0:	add	r5, r5, r9
   141b4:	ldr	r2, [r5, #8]
   141b8:	add	r1, r0, r2
   141bc:	ldrh	r2, [r0, r2]
   141c0:	cmp	r2, r7
   141c4:	bne	141e4 <flatcc_builder_create_cached_vtable@@Base+0x1cc>
   141c8:	mov	r2, r7
   141cc:	mov	r0, fp
   141d0:	str	r3, [sp, #12]
   141d4:	bl	12008 <memcmp@plt>
   141d8:	ldr	r3, [sp, #12]
   141dc:	cmp	r0, #0
   141e0:	beq	141f8 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   141e4:	add	r3, r5, #12
   141e8:	ldr	r9, [r5, #12]
   141ec:	mov	r5, sl
   141f0:	mov	sl, r5
   141f4:	b	14104 <flatcc_builder_create_cached_vtable@@Base+0xec>
   141f8:	ldr	r1, [r5, #4]
   141fc:	ldr	r2, [r4, #152]	; 0x98
   14200:	cmp	r1, r2
   14204:	addne	r3, r5, #12
   14208:	ldrne	r9, [r5, #12]
   1420c:	bne	141f0 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   14210:	ldr	r2, [sp, #8]
   14214:	cmp	r3, r2
   14218:	ldrne	r2, [r5, #12]
   1421c:	strne	r2, [r3]
   14220:	ldrne	r3, [r8, r6, lsl #2]
   14224:	strne	r3, [r5, #12]
   14228:	strne	r9, [r8, r6, lsl #2]
   1422c:	ldr	r0, [r5]
   14230:	add	sp, sp, #20
   14234:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14238:	mov	r3, #0
   1423c:	str	r3, [sp]
   14240:	ldr	r2, [r4, #120]	; 0x78
   14244:	mov	r3, r7
   14248:	mov	r1, #2
   1424c:	mov	r0, r4
   14250:	bl	12a30 <flatcc_builder_default_alloc@@Base+0xf8>
   14254:	cmp	r0, #0
   14258:	mvneq	r0, #0
   1425c:	beq	14230 <flatcc_builder_create_cached_vtable@@Base+0x218>
   14260:	ldr	r3, [r4, #120]	; 0x78
   14264:	mov	r2, r7
   14268:	str	r3, [r5, #8]
   1426c:	add	r3, r7, r3
   14270:	str	r3, [r4, #120]	; 0x78
   14274:	mov	r1, fp
   14278:	bl	11ffc <memcpy@plt>
   1427c:	b	1422c <flatcc_builder_create_cached_vtable@@Base+0x214>
   14280:	andeq	r6, r1, sp, ror #10
   14284:	andeq	r0, r0, r6, asr r1
   14288:	andeq	r6, r1, r7, lsl #16
   1428c:	andeq	r6, r1, sl, ror sl

00014290 <flatcc_builder_create_table@@Base>:
   14290:	push	{r4, r5, r6, r7, lr}
   14294:	sub	sp, sp, #84	; 0x54
   14298:	ldr	r4, [sp, #108]	; 0x6c
   1429c:	ldr	lr, [sp, #112]	; 0x70
   142a0:	cmp	r4, #0
   142a4:	bge	142bc <flatcc_builder_create_table@@Base+0x2c>
   142a8:	ldr	r3, [pc, #268]	; 143bc <flatcc_builder_create_table@@Base+0x12c>
   142ac:	ldr	r2, [pc, #268]	; 143c0 <flatcc_builder_create_table@@Base+0x130>
   142b0:	ldr	r1, [pc, #268]	; 143c4 <flatcc_builder_create_table@@Base+0x134>
   142b4:	ldr	r0, [pc, #268]	; 143c8 <flatcc_builder_create_table@@Base+0x138>
   142b8:	bl	120b0 <__assert_fail@plt>
   142bc:	tst	lr, #1
   142c0:	ldreq	r3, [pc, #244]	; 143bc <flatcc_builder_create_table@@Base+0x12c>
   142c4:	ldreq	r2, [pc, #256]	; 143cc <flatcc_builder_create_table@@Base+0x13c>
   142c8:	ldreq	r1, [pc, #244]	; 143c4 <flatcc_builder_create_table@@Base+0x134>
   142cc:	ldreq	r0, [pc, #252]	; 143d0 <flatcc_builder_create_table@@Base+0x140>
   142d0:	beq	142b8 <flatcc_builder_create_table@@Base+0x28>
   142d4:	ldrh	ip, [r0, #128]	; 0x80
   142d8:	cmp	r3, #4
   142dc:	movcc	r3, #4
   142e0:	ldr	r6, [r0, #136]	; 0x88
   142e4:	cmp	ip, r3
   142e8:	mvn	r5, #3
   142ec:	sub	ip, r6, r2
   142f0:	strhcc	r3, [r0, #128]	; 0x80
   142f4:	sub	r3, r3, #1
   142f8:	and	r3, r3, ip
   142fc:	sub	ip, r5, r2
   14300:	add	ip, ip, r6
   14304:	sub	ip, ip, r3
   14308:	sub	lr, lr, #1
   1430c:	sub	lr, ip, lr
   14310:	str	lr, [sp, #4]
   14314:	ldr	lr, [sp, #104]	; 0x68
   14318:	sub	ip, r5, ip
   1431c:	add	r4, lr, r4, lsl #1
   14320:	cmp	r4, lr
   14324:	bne	143a4 <flatcc_builder_create_table@@Base+0x114>
   14328:	mov	ip, #4
   1432c:	cmp	r2, #0
   14330:	str	ip, [sp, #8]
   14334:	add	lr, sp, ip
   14338:	str	ip, [sp, #20]
   1433c:	mov	ip, #1
   14340:	str	ip, [sp, #12]
   14344:	strne	r2, [sp, #28]
   14348:	addne	ip, r2, #4
   1434c:	movne	r2, #2
   14350:	strne	ip, [sp, #8]
   14354:	strne	r1, [sp, #24]
   14358:	strne	r2, [sp, #12]
   1435c:	cmp	r3, #0
   14360:	str	lr, [sp, #16]
   14364:	beq	14394 <flatcc_builder_create_table@@Base+0x104>
   14368:	ldr	r2, [sp, #8]
   1436c:	add	r1, sp, #80	; 0x50
   14370:	add	r2, r2, r3
   14374:	str	r2, [sp, #8]
   14378:	ldr	r2, [sp, #12]
   1437c:	ldr	ip, [pc, #80]	; 143d4 <flatcc_builder_create_table@@Base+0x144>
   14380:	add	r2, r2, #1
   14384:	str	r2, [sp, #12]
   14388:	add	r1, r1, r2, lsl #3
   1438c:	str	ip, [r1, #-72]	; 0xffffffb8
   14390:	str	r3, [r1, #-68]	; 0xffffffbc
   14394:	add	r1, sp, #8
   14398:	bl	12d30 <flatcc_builder_default_alloc@@Base+0x3f8>
   1439c:	add	sp, sp, #84	; 0x54
   143a0:	pop	{r4, r5, r6, r7, pc}
   143a4:	ldrh	r5, [lr], #2
   143a8:	sub	r7, ip, r5
   143ac:	ldr	r6, [r1, r5]
   143b0:	add	r6, r6, r7
   143b4:	str	r6, [r1, r5]
   143b8:	b	14320 <flatcc_builder_create_table@@Base+0x90>
   143bc:	andeq	r6, r1, r6, ror r5
   143c0:	ldrdeq	r0, [r0], -r5
   143c4:	andeq	r6, r1, r7, lsl #16
   143c8:	andeq	r6, r1, r9, lsl #21
   143cc:	ldrdeq	r0, [r0], -fp
   143d0:	muleq	r1, fp, sl
   143d4:	andeq	r6, r1, r1, lsr #2

000143d8 <flatcc_builder_check_required_field@@Base>:
   143d8:	ldr	r3, [r0, #32]
   143dc:	ldrh	r3, [r3, #14]
   143e0:	cmp	r3, #3
   143e4:	beq	14400 <flatcc_builder_check_required_field@@Base+0x28>
   143e8:	push	{r4, lr}
   143ec:	ldr	r3, [pc, #52]	; 14428 <flatcc_builder_check_required_field@@Base+0x50>
   143f0:	ldr	r2, [pc, #52]	; 1442c <flatcc_builder_check_required_field@@Base+0x54>
   143f4:	ldr	r1, [pc, #52]	; 14430 <flatcc_builder_check_required_field@@Base+0x58>
   143f8:	ldr	r0, [pc, #52]	; 14434 <flatcc_builder_check_required_field@@Base+0x5c>
   143fc:	bl	120b0 <__assert_fail@plt>
   14400:	ldrh	r3, [r0, #8]
   14404:	cmp	r3, r1
   14408:	movls	r0, #0
   1440c:	bls	14424 <flatcc_builder_check_required_field@@Base+0x4c>
   14410:	ldr	r3, [r0, #4]
   14414:	lsl	r1, r1, #1
   14418:	ldrh	r0, [r3, r1]
   1441c:	adds	r0, r0, #0
   14420:	movne	r0, #1
   14424:	bx	lr
   14428:	muleq	r1, r2, r5
   1442c:	strdeq	r0, [r0], -r8
   14430:	andeq	r6, r1, r7, lsl #16
   14434:	andeq	r6, r1, r6, lsr #21

00014438 <flatcc_builder_check_union_field@@Base>:
   14438:	ldr	r3, [r0, #32]
   1443c:	ldrh	r3, [r3, #14]
   14440:	cmp	r3, #3
   14444:	beq	14460 <flatcc_builder_check_union_field@@Base+0x28>
   14448:	push	{r4, lr}
   1444c:	ldr	r3, [pc, #112]	; 144c4 <flatcc_builder_check_union_field@@Base+0x8c>
   14450:	ldr	r2, [pc, #112]	; 144c8 <flatcc_builder_check_union_field@@Base+0x90>
   14454:	ldr	r1, [pc, #112]	; 144cc <flatcc_builder_check_union_field@@Base+0x94>
   14458:	ldr	r0, [pc, #112]	; 144d0 <flatcc_builder_check_union_field@@Base+0x98>
   1445c:	bl	120b0 <__assert_fail@plt>
   14460:	cmp	r1, #0
   14464:	beq	144bc <flatcc_builder_check_union_field@@Base+0x84>
   14468:	ldrh	r3, [r0, #8]
   1446c:	cmp	r3, r1
   14470:	bls	144bc <flatcc_builder_check_union_field@@Base+0x84>
   14474:	sub	r1, r1, #-2147483647	; 0x80000001
   14478:	ldr	r3, [r0, #4]
   1447c:	lsl	r1, r1, #1
   14480:	ldrh	r2, [r3, r1]!
   14484:	cmp	r2, #0
   14488:	ldrheq	r0, [r3, #2]
   1448c:	beq	144b0 <flatcc_builder_check_union_field@@Base+0x78>
   14490:	ldr	r1, [r0, #16]
   14494:	ldrh	r0, [r3, #2]
   14498:	ldrb	r2, [r1, r2]
   1449c:	cmp	r2, #0
   144a0:	beq	144b0 <flatcc_builder_check_union_field@@Base+0x78>
   144a4:	adds	r0, r0, #0
   144a8:	movne	r0, #1
   144ac:	bx	lr
   144b0:	clz	r0, r0
   144b4:	lsr	r0, r0, #5
   144b8:	b	144ac <flatcc_builder_check_union_field@@Base+0x74>
   144bc:	mov	r0, #0
   144c0:	b	144ac <flatcc_builder_check_union_field@@Base+0x74>
   144c4:			; <UNDEFINED> instruction: 0x000165b6
   144c8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   144cc:	andeq	r6, r1, r7, lsl #16
   144d0:	andeq	r6, r1, r6, lsr #21

000144d4 <flatcc_builder_check_required@@Base>:
   144d4:	ldr	r3, [r0, #32]
   144d8:	push	{r4, lr}
   144dc:	ldrh	r3, [r3, #14]
   144e0:	cmp	r3, #3
   144e4:	beq	144fc <flatcc_builder_check_required@@Base+0x28>
   144e8:	ldr	r3, [pc, #84]	; 14544 <flatcc_builder_check_required@@Base+0x70>
   144ec:	ldr	r2, [pc, #84]	; 14548 <flatcc_builder_check_required@@Base+0x74>
   144f0:	ldr	r1, [pc, #84]	; 1454c <flatcc_builder_check_required@@Base+0x78>
   144f4:	ldr	r0, [pc, #84]	; 14550 <flatcc_builder_check_required@@Base+0x7c>
   144f8:	bl	120b0 <__assert_fail@plt>
   144fc:	ldrh	r3, [r0, #8]
   14500:	cmp	r3, r2
   14504:	subge	r1, r1, #2
   14508:	movge	ip, #0
   1450c:	bge	14534 <flatcc_builder_check_required@@Base+0x60>
   14510:	mov	r0, #0
   14514:	pop	{r4, pc}
   14518:	ldrh	r3, [r1, #2]!
   1451c:	ldr	lr, [r0, #4]
   14520:	lsl	r3, r3, #1
   14524:	ldrh	r3, [lr, r3]
   14528:	cmp	r3, #0
   1452c:	beq	14510 <flatcc_builder_check_required@@Base+0x3c>
   14530:	add	ip, ip, #1
   14534:	cmp	ip, r2
   14538:	blt	14518 <flatcc_builder_check_required@@Base+0x44>
   1453c:	mov	r0, #1
   14540:	pop	{r4, pc}
   14544:	ldrdeq	r6, [r1], -r7
   14548:	andeq	r0, r0, r1, lsl r5
   1454c:	andeq	r6, r1, r7, lsl #16
   14550:	andeq	r6, r1, r6, lsr #21

00014554 <flatcc_builder_end_table@@Base>:
   14554:	ldr	r3, [r0, #32]
   14558:	push	{r4, r5, r6, r7, lr}
   1455c:	sub	sp, sp, #20
   14560:	ldrh	r3, [r3, #14]
   14564:	cmp	r3, #3
   14568:	beq	14580 <flatcc_builder_end_table@@Base+0x2c>
   1456c:	ldr	r3, [pc, #260]	; 14678 <flatcc_builder_end_table@@Base+0x124>
   14570:	ldr	r2, [pc, #260]	; 1467c <flatcc_builder_end_table@@Base+0x128>
   14574:	ldr	r1, [pc, #260]	; 14680 <flatcc_builder_end_table@@Base+0x12c>
   14578:	ldr	r0, [pc, #260]	; 14684 <flatcc_builder_end_table@@Base+0x130>
   1457c:	bl	120b0 <__assert_fail@plt>
   14580:	ldrh	r5, [r0, #8]
   14584:	ldr	r3, [r0, #20]
   14588:	ldr	r1, [r0, #4]
   1458c:	add	r5, r5, #2
   14590:	add	r3, r3, #4
   14594:	lsl	r5, r5, #1
   14598:	uxth	r2, r3
   1459c:	uxth	r5, r5
   145a0:	ldr	r3, [r0, #12]
   145a4:	strh	r2, [r1, #-2]
   145a8:	strh	r5, [r1, #-4]
   145ac:	sub	r6, r1, #4
   145b0:	ldr	r1, [pc, #208]	; 14688 <flatcc_builder_end_table@@Base+0x134>
   145b4:	eor	r3, r3, r5
   145b8:	mov	r4, r0
   145bc:	mul	r3, r1, r3
   145c0:	eor	r3, r3, r2
   145c4:	mov	r2, r5
   145c8:	mul	r3, r1, r3
   145cc:	mov	r1, r6
   145d0:	str	r3, [r0, #12]
   145d4:	bl	14018 <flatcc_builder_create_cached_vtable@@Base>
   145d8:	subs	r7, r0, #0
   145dc:	beq	1466c <flatcc_builder_end_table@@Base+0x118>
   145e0:	mov	r2, r5
   145e4:	mov	r1, #0
   145e8:	mov	r0, r6
   145ec:	bl	12074 <memset@plt>
   145f0:	ldr	r3, [r4, #32]
   145f4:	ldr	r1, [r4, #76]	; 0x4c
   145f8:	mov	r0, r4
   145fc:	ldr	r3, [r3, #20]
   14600:	add	r1, r1, r3
   14604:	ldrh	r3, [r4, #130]	; 0x82
   14608:	str	r7, [sp, #8]
   1460c:	ldr	r2, [r4]
   14610:	sub	r2, r2, r1
   14614:	asr	r2, r2, #1
   14618:	stm	sp, {r1, r2}
   1461c:	ldr	r2, [r4, #20]
   14620:	ldr	r1, [r4, #16]
   14624:	bl	14290 <flatcc_builder_create_table@@Base>
   14628:	subs	r7, r0, #0
   1462c:	beq	1466c <flatcc_builder_end_table@@Base+0x118>
   14630:	ldr	r3, [r4, #32]
   14634:	mov	r0, r4
   14638:	ldr	r2, [r3, #24]
   1463c:	str	r2, [r4, #12]
   14640:	ldrh	r2, [r3, #28]
   14644:	strh	r2, [r4, #8]
   14648:	ldr	r2, [r4, #52]	; 0x34
   1464c:	ldr	r1, [r3, #16]
   14650:	add	r2, r2, r1
   14654:	str	r2, [r4, #4]
   14658:	ldr	r2, [r4, #76]	; 0x4c
   1465c:	ldr	r3, [r3, #20]
   14660:	add	r3, r2, r3
   14664:	str	r3, [r4]
   14668:	bl	1282c <emit_test@@Base+0x404>
   1466c:	mov	r0, r7
   14670:	add	sp, sp, #20
   14674:	pop	{r4, r5, r6, r7, pc}
   14678:	strdeq	r6, [r1], -r5
   1467c:	andeq	r0, r0, r5, lsr #10
   14680:	andeq	r6, r1, r7, lsl #16
   14684:	andeq	r6, r1, r6, lsr #21
   14688:			; <UNDEFINED> instruction: 0x9e3779b1

0001468c <flatcc_builder_create_vector@@Base>:
   1468c:	push	{lr}		; (str lr, [sp, #-4]!)
   14690:	sub	sp, sp, #84	; 0x54
   14694:	ldr	lr, [sp, #92]	; 0x5c
   14698:	ldrh	ip, [sp, #88]	; 0x58
   1469c:	cmp	r2, lr
   146a0:	bls	146b8 <flatcc_builder_create_vector@@Base+0x2c>
   146a4:	ldr	r3, [pc, #180]	; 14760 <flatcc_builder_create_vector@@Base+0xd4>
   146a8:	ldr	r2, [pc, #180]	; 14764 <flatcc_builder_create_vector@@Base+0xd8>
   146ac:	ldr	r1, [pc, #180]	; 14768 <flatcc_builder_create_vector@@Base+0xdc>
   146b0:	ldr	r0, [pc, #180]	; 1476c <flatcc_builder_create_vector@@Base+0xe0>
   146b4:	bl	120b0 <__assert_fail@plt>
   146b8:	ldrh	lr, [r0, #128]	; 0x80
   146bc:	mul	r3, r3, r2
   146c0:	cmp	ip, #4
   146c4:	movcc	ip, #4
   146c8:	str	r2, [sp, #4]
   146cc:	ldr	r2, [r0, #136]	; 0x88
   146d0:	cmp	lr, ip
   146d4:	sub	r2, r2, r3
   146d8:	strhcc	ip, [r0, #128]	; 0x80
   146dc:	sub	ip, ip, #1
   146e0:	and	ip, ip, r2
   146e4:	mov	r2, #4
   146e8:	cmp	r3, #0
   146ec:	str	r2, [sp, #8]
   146f0:	add	lr, sp, r2
   146f4:	str	r2, [sp, #20]
   146f8:	mov	r2, #1
   146fc:	str	r2, [sp, #12]
   14700:	strne	r3, [sp, #28]
   14704:	addne	r2, r3, #4
   14708:	movne	r3, #2
   1470c:	strne	r2, [sp, #8]
   14710:	strne	r1, [sp, #24]
   14714:	strne	r3, [sp, #12]
   14718:	cmp	ip, #0
   1471c:	str	lr, [sp, #16]
   14720:	beq	14750 <flatcc_builder_create_vector@@Base+0xc4>
   14724:	ldr	r3, [sp, #8]
   14728:	add	r2, sp, #80	; 0x50
   1472c:	add	r3, r3, ip
   14730:	str	r3, [sp, #8]
   14734:	ldr	r3, [sp, #12]
   14738:	ldr	r1, [pc, #48]	; 14770 <flatcc_builder_create_vector@@Base+0xe4>
   1473c:	add	r3, r3, #1
   14740:	str	r3, [sp, #12]
   14744:	add	r2, r2, r3, lsl #3
   14748:	str	r1, [r2, #-72]	; 0xffffffb8
   1474c:	str	ip, [r2, #-68]	; 0xffffffbc
   14750:	add	r1, sp, #8
   14754:	bl	12d30 <flatcc_builder_default_alloc@@Base+0x3f8>
   14758:	add	sp, sp, #84	; 0x54
   1475c:	pop	{pc}		; (ldr pc, [sp], #4)
   14760:	andeq	r6, r1, lr, lsl #12
   14764:	andeq	r0, r0, r5, asr r5
   14768:	andeq	r6, r1, r7, lsl #16
   1476c:	ldrdeq	r6, [r1], -r1
   14770:	andeq	r6, r1, r1, lsr #2

00014774 <flatcc_builder_end_vector@@Base>:
   14774:	push	{r0, r1, r2, r4, r5, lr}
   14778:	ldr	r2, [r0, #32]
   1477c:	ldrh	r3, [r2, #14]
   14780:	cmp	r3, #4
   14784:	beq	1479c <flatcc_builder_end_vector@@Base+0x28>
   14788:	ldr	r3, [pc, #76]	; 147dc <flatcc_builder_end_vector@@Base+0x68>
   1478c:	ldr	r2, [pc, #76]	; 147e0 <flatcc_builder_end_vector@@Base+0x6c>
   14790:	ldr	r1, [pc, #76]	; 147e4 <flatcc_builder_end_vector@@Base+0x70>
   14794:	ldr	r0, [pc, #76]	; 147e8 <flatcc_builder_end_vector@@Base+0x74>
   14798:	bl	120b0 <__assert_fail@plt>
   1479c:	ldr	r3, [r2, #24]
   147a0:	mov	r4, r0
   147a4:	str	r3, [sp, #4]
   147a8:	ldrh	r3, [r0, #130]	; 0x82
   147ac:	str	r3, [sp]
   147b0:	ldr	r3, [r2, #16]
   147b4:	ldr	r1, [r0, #16]
   147b8:	ldr	r2, [r2, #20]
   147bc:	bl	1468c <flatcc_builder_create_vector@@Base>
   147c0:	subs	r5, r0, #0
   147c4:	beq	147d0 <flatcc_builder_end_vector@@Base+0x5c>
   147c8:	mov	r0, r4
   147cc:	bl	1282c <emit_test@@Base+0x404>
   147d0:	mov	r0, r5
   147d4:	add	sp, sp, #12
   147d8:	pop	{r4, r5, pc}
   147dc:	andeq	r6, r1, fp, lsr #12
   147e0:	andeq	r0, r0, r8, ror r5
   147e4:	andeq	r6, r1, r7, lsl #16
   147e8:	andeq	r6, r1, r1, lsr r9

000147ec <flatcc_builder_vector_count@@Base>:
   147ec:	ldr	r3, [r0, #32]
   147f0:	ldr	r0, [r3, #20]
   147f4:	bx	lr

000147f8 <flatcc_builder_vector_edit@@Base>:
   147f8:	ldr	r0, [r0, #16]
   147fc:	bx	lr

00014800 <flatcc_builder_create_offset_vector_direct@@Base>:
   14800:	cmn	r2, #-1073741823	; 0xc0000001
   14804:	bhi	14810 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   14808:	mov	r3, #0
   1480c:	b	12e04 <flatcc_builder_default_alloc@@Base+0x4cc>
   14810:	mov	r0, #0
   14814:	bx	lr

00014818 <flatcc_builder_end_offset_vector@@Base>:
   14818:	ldr	r3, [r0, #32]
   1481c:	push	{r4, r5, r6, lr}
   14820:	ldrh	r2, [r3, #14]
   14824:	cmp	r2, #5
   14828:	beq	14840 <flatcc_builder_end_offset_vector@@Base+0x28>
   1482c:	ldr	r3, [pc, #52]	; 14868 <flatcc_builder_end_offset_vector@@Base+0x50>
   14830:	ldr	r2, [pc, #52]	; 1486c <flatcc_builder_end_offset_vector@@Base+0x54>
   14834:	ldr	r1, [pc, #52]	; 14870 <flatcc_builder_end_offset_vector@@Base+0x58>
   14838:	ldr	r0, [pc, #52]	; 14874 <flatcc_builder_end_offset_vector@@Base+0x5c>
   1483c:	bl	120b0 <__assert_fail@plt>
   14840:	ldr	r2, [r3, #20]
   14844:	ldr	r1, [r0, #16]
   14848:	mov	r4, r0
   1484c:	bl	14800 <flatcc_builder_create_offset_vector_direct@@Base>
   14850:	subs	r5, r0, #0
   14854:	beq	14860 <flatcc_builder_end_offset_vector@@Base+0x48>
   14858:	mov	r0, r4
   1485c:	bl	1282c <emit_test@@Base+0x404>
   14860:	mov	r0, r5
   14864:	pop	{r4, r5, r6, pc}
   14868:	andeq	r6, r1, r5, asr #12
   1486c:	andeq	r0, r0, r8, asr #11
   14870:	andeq	r6, r1, r7, lsl #16
   14874:	muleq	r1, sl, r9

00014878 <flatcc_builder_create_offset_vector@@Base>:
   14878:	push	{r4, r5, r6, lr}
   1487c:	mov	r4, r0
   14880:	mov	r6, r1
   14884:	mov	r5, r2
   14888:	bl	13e54 <flatcc_builder_start_offset_vector@@Base>
   1488c:	cmp	r0, #0
   14890:	bne	148c0 <flatcc_builder_create_offset_vector@@Base+0x48>
   14894:	mov	r1, r5
   14898:	mov	r0, r4
   1489c:	bl	13a50 <flatcc_builder_extend_offset_vector@@Base>
   148a0:	cmp	r0, #0
   148a4:	beq	148c0 <flatcc_builder_create_offset_vector@@Base+0x48>
   148a8:	lsl	r2, r5, #2
   148ac:	mov	r1, r6
   148b0:	bl	11ffc <memcpy@plt>
   148b4:	mov	r0, r4
   148b8:	pop	{r4, r5, r6, lr}
   148bc:	b	14818 <flatcc_builder_end_offset_vector@@Base>
   148c0:	mov	r0, #0
   148c4:	pop	{r4, r5, r6, pc}

000148c8 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   148c8:	ldr	r2, [r0, #32]
   148cc:	mov	r3, r1
   148d0:	push	{r4, r5, r6, lr}
   148d4:	ldrh	r1, [r2, #14]
   148d8:	cmp	r1, #5
   148dc:	beq	148f4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   148e0:	ldr	r3, [pc, #64]	; 14928 <flatcc_builder_end_offset_vector_for_unions@@Base+0x60>
   148e4:	ldr	r2, [pc, #64]	; 1492c <flatcc_builder_end_offset_vector_for_unions@@Base+0x64>
   148e8:	ldr	r1, [pc, #64]	; 14930 <flatcc_builder_end_offset_vector_for_unions@@Base+0x68>
   148ec:	ldr	r0, [pc, #64]	; 14934 <flatcc_builder_end_offset_vector_for_unions@@Base+0x6c>
   148f0:	bl	120b0 <__assert_fail@plt>
   148f4:	ldr	r2, [r2, #20]
   148f8:	cmn	r2, #-1073741823	; 0xc0000001
   148fc:	movhi	r5, #0
   14900:	bhi	14920 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   14904:	ldr	r1, [r0, #16]
   14908:	mov	r4, r0
   1490c:	bl	12e04 <flatcc_builder_default_alloc@@Base+0x4cc>
   14910:	subs	r5, r0, #0
   14914:	beq	14920 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   14918:	mov	r0, r4
   1491c:	bl	1282c <emit_test@@Base+0x404>
   14920:	mov	r0, r5
   14924:	pop	{r4, r5, r6, pc}
   14928:	andeq	r6, r1, r6, ror #12
   1492c:	ldrdeq	r0, [r0], -r5
   14930:	andeq	r6, r1, r7, lsl #16
   14934:	muleq	r1, sl, r9

00014938 <flatcc_builder_offset_vector_edit@@Base>:
   14938:	ldr	r0, [r0, #16]
   1493c:	bx	lr

00014940 <flatcc_builder_offset_vector_count@@Base>:
   14940:	ldr	r3, [r0, #32]
   14944:	ldr	r0, [r3, #20]
   14948:	bx	lr

0001494c <flatcc_builder_create_union_vector_direct@@Base>:
   1494c:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14950:	mov	r4, r0
   14954:	ldr	r5, [sp, #32]
   14958:	cmn	r5, #-1073741823	; 0xc0000001
   1495c:	bls	14978 <flatcc_builder_create_union_vector_direct@@Base+0x2c>
   14960:	mov	r3, #0
   14964:	str	r3, [r4]
   14968:	str	r3, [r4, #4]
   1496c:	mov	r0, r4
   14970:	add	sp, sp, #8
   14974:	pop	{r4, r5, r6, r7, r8, pc}
   14978:	mov	r7, r1
   1497c:	mov	r8, r2
   14980:	mov	r1, r3
   14984:	mov	r0, r7
   14988:	mov	r3, r2
   1498c:	mov	r2, r5
   14990:	bl	12e04 <flatcc_builder_default_alloc@@Base+0x4cc>
   14994:	subs	r6, r0, #0
   14998:	beq	14960 <flatcc_builder_create_union_vector_direct@@Base+0x14>
   1499c:	mvn	r3, #0
   149a0:	str	r3, [sp, #4]
   149a4:	mov	r3, #1
   149a8:	str	r3, [sp]
   149ac:	mov	r2, r5
   149b0:	mov	r1, r8
   149b4:	mov	r0, r7
   149b8:	bl	1468c <flatcc_builder_create_vector@@Base>
   149bc:	stm	r4, {r0, r6}
   149c0:	b	1496c <flatcc_builder_create_union_vector_direct@@Base+0x20>

000149c4 <flatcc_builder_create_union_vector@@Base>:
   149c4:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   149c8:	mov	r7, r0
   149cc:	mov	r0, r1
   149d0:	mov	r5, r1
   149d4:	mov	r6, r2
   149d8:	mov	r8, r3
   149dc:	bl	13e54 <flatcc_builder_start_offset_vector@@Base>
   149e0:	subs	r4, r0, #0
   149e4:	beq	14a00 <flatcc_builder_create_union_vector@@Base+0x3c>
   149e8:	mov	r3, #0
   149ec:	str	r3, [r7]
   149f0:	str	r3, [r7, #4]
   149f4:	mov	r0, r7
   149f8:	add	sp, sp, #16
   149fc:	pop	{r4, r5, r6, r7, r8, pc}
   14a00:	mov	r1, r8
   14a04:	mov	r0, r5
   14a08:	bl	13a50 <flatcc_builder_extend_offset_vector@@Base>
   14a0c:	cmp	r0, #0
   14a10:	beq	149e8 <flatcc_builder_create_union_vector@@Base+0x24>
   14a14:	mov	r1, r8
   14a18:	mov	r0, r5
   14a1c:	bl	127e4 <emit_test@@Base+0x3bc>
   14a20:	subs	r2, r0, #0
   14a24:	movne	ip, r6
   14a28:	ldrne	r3, [r5, #16]
   14a2c:	movne	r1, r4
   14a30:	beq	149e8 <flatcc_builder_create_union_vector@@Base+0x24>
   14a34:	cmp	r1, r8
   14a38:	add	ip, ip, #8
   14a3c:	bne	14a6c <flatcc_builder_create_union_vector@@Base+0xa8>
   14a40:	str	r1, [sp]
   14a44:	add	r0, sp, #8
   14a48:	mov	r1, r5
   14a4c:	bl	1494c <flatcc_builder_create_union_vector_direct@@Base>
   14a50:	ldr	r6, [sp, #8]
   14a54:	ldr	r4, [sp, #12]
   14a58:	mov	r0, r5
   14a5c:	bl	1282c <emit_test@@Base+0x404>
   14a60:	str	r6, [r7]
   14a64:	str	r4, [r7, #4]
   14a68:	b	149f4 <flatcc_builder_create_union_vector@@Base+0x30>
   14a6c:	ldrb	r0, [ip, #-8]
   14a70:	strb	r0, [r2, r1]
   14a74:	ldr	r0, [ip, #-4]
   14a78:	str	r0, [r3, r1, lsl #2]
   14a7c:	add	r1, r1, #1
   14a80:	b	14a34 <flatcc_builder_create_union_vector@@Base+0x70>

00014a84 <flatcc_builder_start_union_vector@@Base>:
   14a84:	push	{r4, r5, r6, lr}
   14a88:	mov	r1, #4
   14a8c:	mov	r5, r0
   14a90:	bl	12aa0 <flatcc_builder_default_alloc@@Base+0x168>
   14a94:	subs	r4, r0, #0
   14a98:	mvnne	r4, #0
   14a9c:	bne	14ac4 <flatcc_builder_start_union_vector@@Base+0x40>
   14aa0:	ldr	r3, [r5, #32]
   14aa4:	mov	r2, #8
   14aa8:	mvn	r1, #3
   14aac:	str	r2, [r3, #16]
   14ab0:	mov	r2, #7
   14ab4:	str	r4, [r3, #20]
   14ab8:	strh	r2, [r3, #14]
   14abc:	mov	r0, r5
   14ac0:	bl	12764 <emit_test@@Base+0x33c>
   14ac4:	mov	r0, r4
   14ac8:	pop	{r4, r5, r6, pc}

00014acc <flatcc_builder_end_union_vector@@Base>:
   14acc:	ldr	r3, [r1, #32]
   14ad0:	push	{r4, r5, r6, r7, lr}
   14ad4:	sub	sp, sp, #20
   14ad8:	ldrh	r2, [r3, #14]
   14adc:	cmp	r2, #7
   14ae0:	beq	14af8 <flatcc_builder_end_union_vector@@Base+0x2c>
   14ae4:	ldr	r3, [pc, #156]	; 14b88 <flatcc_builder_end_union_vector@@Base+0xbc>
   14ae8:	ldr	r2, [pc, #156]	; 14b8c <flatcc_builder_end_union_vector@@Base+0xc0>
   14aec:	ldr	r1, [pc, #156]	; 14b90 <flatcc_builder_end_union_vector@@Base+0xc4>
   14af0:	ldr	r0, [pc, #156]	; 14b94 <flatcc_builder_end_union_vector@@Base+0xc8>
   14af4:	bl	120b0 <__assert_fail@plt>
   14af8:	ldr	r7, [r3, #20]
   14afc:	mov	r5, r1
   14b00:	mov	r4, r0
   14b04:	lsl	r6, r7, #2
   14b08:	add	r1, r6, r7
   14b0c:	mov	r0, r5
   14b10:	bl	127e4 <emit_test@@Base+0x3bc>
   14b14:	subs	r3, r0, #0
   14b18:	streq	r3, [r4]
   14b1c:	streq	r3, [r4, #4]
   14b20:	addne	r2, r3, r6
   14b24:	ldrne	r0, [r5, #16]
   14b28:	movne	r1, #0
   14b2c:	bne	14b50 <flatcc_builder_end_union_vector@@Base+0x84>
   14b30:	mov	r0, r4
   14b34:	add	sp, sp, #20
   14b38:	pop	{r4, r5, r6, r7, pc}
   14b3c:	ldrb	ip, [r0, #-8]
   14b40:	strb	ip, [r2, r1]
   14b44:	ldr	ip, [r0, #-4]
   14b48:	str	ip, [r3, r1, lsl #2]
   14b4c:	add	r1, r1, #1
   14b50:	cmp	r1, r7
   14b54:	add	r0, r0, #8
   14b58:	bne	14b3c <flatcc_builder_end_union_vector@@Base+0x70>
   14b5c:	str	r1, [sp]
   14b60:	add	r0, sp, #8
   14b64:	mov	r1, r5
   14b68:	bl	1494c <flatcc_builder_create_union_vector_direct@@Base>
   14b6c:	ldr	r7, [sp, #8]
   14b70:	ldr	r6, [sp, #12]
   14b74:	mov	r0, r5
   14b78:	bl	1282c <emit_test@@Base+0x404>
   14b7c:	str	r7, [r4]
   14b80:	str	r6, [r4, #4]
   14b84:	b	14b30 <flatcc_builder_end_union_vector@@Base+0x64>
   14b88:	muleq	r1, r2, r6
   14b8c:	andeq	r0, r0, r1, asr r6
   14b90:	andeq	r6, r1, r7, lsl #16
   14b94:	andeq	r6, r1, r4, ror #21

00014b98 <flatcc_builder_union_vector_edit@@Base>:
   14b98:	ldr	r0, [r0, #16]
   14b9c:	bx	lr

00014ba0 <flatcc_builder_union_vector_count@@Base>:
   14ba0:	ldr	r3, [r0, #32]
   14ba4:	ldr	r0, [r3, #20]
   14ba8:	bx	lr

00014bac <flatcc_builder_extend_union_vector@@Base>:
   14bac:	push	{r4, r5, r6, lr}
   14bb0:	mvn	r2, #-536870912	; 0xe0000000
   14bb4:	mov	r4, r0
   14bb8:	ldr	r0, [r0, #32]
   14bbc:	mov	r5, r1
   14bc0:	bl	12db0 <flatcc_builder_default_alloc@@Base+0x478>
   14bc4:	cmp	r0, #0
   14bc8:	bne	14bdc <flatcc_builder_extend_union_vector@@Base+0x30>
   14bcc:	lsl	r1, r5, #3
   14bd0:	mov	r0, r4
   14bd4:	pop	{r4, r5, r6, lr}
   14bd8:	b	127e4 <emit_test@@Base+0x3bc>
   14bdc:	mov	r0, #0
   14be0:	pop	{r4, r5, r6, pc}

00014be4 <flatcc_builder_truncate_union_vector@@Base>:
   14be4:	ldr	r3, [r0, #32]
   14be8:	push	{r4, lr}
   14bec:	ldrh	r2, [r3, #14]
   14bf0:	cmp	r2, #7
   14bf4:	beq	14c0c <flatcc_builder_truncate_union_vector@@Base+0x28>
   14bf8:	ldr	r3, [pc, #68]	; 14c44 <flatcc_builder_truncate_union_vector@@Base+0x60>
   14bfc:	ldr	r2, [pc, #68]	; 14c48 <flatcc_builder_truncate_union_vector@@Base+0x64>
   14c00:	ldr	r1, [pc, #68]	; 14c4c <flatcc_builder_truncate_union_vector@@Base+0x68>
   14c04:	ldr	r0, [pc, #68]	; 14c50 <flatcc_builder_truncate_union_vector@@Base+0x6c>
   14c08:	bl	120b0 <__assert_fail@plt>
   14c0c:	ldr	r2, [r3, #20]
   14c10:	cmp	r2, r1
   14c14:	ldrcc	r3, [pc, #40]	; 14c44 <flatcc_builder_truncate_union_vector@@Base+0x60>
   14c18:	ldrcc	r2, [pc, #52]	; 14c54 <flatcc_builder_truncate_union_vector@@Base+0x70>
   14c1c:	ldrcc	r1, [pc, #40]	; 14c4c <flatcc_builder_truncate_union_vector@@Base+0x68>
   14c20:	ldrcc	r0, [pc, #48]	; 14c58 <flatcc_builder_truncate_union_vector@@Base+0x74>
   14c24:	bcc	14c08 <flatcc_builder_truncate_union_vector@@Base+0x24>
   14c28:	sub	r2, r2, r1
   14c2c:	str	r2, [r3, #20]
   14c30:	ldr	r3, [r3, #16]
   14c34:	mul	r1, r3, r1
   14c38:	bl	12898 <emit_test@@Base+0x470>
   14c3c:	mov	r0, #0
   14c40:	pop	{r4, pc}
   14c44:			; <UNDEFINED> instruction: 0x000166b2
   14c48:	andeq	r0, r0, r1, lsl #13
   14c4c:	andeq	r6, r1, r7, lsl #16
   14c50:	andeq	r6, r1, r4, ror #21
   14c54:	andeq	r0, r0, r2, lsl #13
   14c58:	andeq	r6, r1, sp, lsl sl

00014c5c <flatcc_builder_union_vector_push@@Base>:
   14c5c:	push	{r0, r1, r4, lr}
   14c60:	stm	sp, {r1, r2}
   14c64:	ldr	r2, [r0, #32]
   14c68:	ldrh	r3, [r2, #14]
   14c6c:	cmp	r3, #7
   14c70:	beq	14c88 <flatcc_builder_union_vector_push@@Base+0x2c>
   14c74:	ldr	r3, [pc, #72]	; 14cc4 <flatcc_builder_union_vector_push@@Base+0x68>
   14c78:	ldr	r2, [pc, #72]	; 14cc8 <flatcc_builder_union_vector_push@@Base+0x6c>
   14c7c:	ldr	r1, [pc, #72]	; 14ccc <flatcc_builder_union_vector_push@@Base+0x70>
   14c80:	ldr	r0, [pc, #72]	; 14cd0 <flatcc_builder_union_vector_push@@Base+0x74>
   14c84:	bl	120b0 <__assert_fail@plt>
   14c88:	ldr	r3, [r2, #20]
   14c8c:	cmn	r3, #-536870911	; 0xe0000001
   14c90:	moveq	r3, #0
   14c94:	beq	14cb8 <flatcc_builder_union_vector_push@@Base+0x5c>
   14c98:	add	r3, r3, #1
   14c9c:	mov	r1, #8
   14ca0:	str	r3, [r2, #20]
   14ca4:	bl	127e4 <emit_test@@Base+0x3bc>
   14ca8:	subs	r3, r0, #0
   14cac:	movne	r4, sp
   14cb0:	ldmne	r4, {r0, r1}
   14cb4:	stmne	r3, {r0, r1}
   14cb8:	mov	r0, r3
   14cbc:	add	sp, sp, #8
   14cc0:	pop	{r4, pc}
   14cc4:	ldrdeq	r6, [r1], -r7
   14cc8:	andeq	r0, r0, sp, lsl #13
   14ccc:	andeq	r6, r1, r7, lsl #16
   14cd0:	andeq	r6, r1, r4, ror #21

00014cd4 <flatcc_builder_append_union_vector@@Base>:
   14cd4:	push	{r4, r5, r6, lr}
   14cd8:	mov	r4, r0
   14cdc:	ldr	r0, [r0, #32]
   14ce0:	ldrh	r3, [r0, #14]
   14ce4:	cmp	r3, #7
   14ce8:	beq	14d00 <flatcc_builder_append_union_vector@@Base+0x2c>
   14cec:	ldr	r3, [pc, #68]	; 14d38 <flatcc_builder_append_union_vector@@Base+0x64>
   14cf0:	ldr	r2, [pc, #68]	; 14d3c <flatcc_builder_append_union_vector@@Base+0x68>
   14cf4:	ldr	r1, [pc, #68]	; 14d40 <flatcc_builder_append_union_vector@@Base+0x6c>
   14cf8:	ldr	r0, [pc, #68]	; 14d44 <flatcc_builder_append_union_vector@@Base+0x70>
   14cfc:	bl	120b0 <__assert_fail@plt>
   14d00:	mov	r5, r2
   14d04:	mov	r6, r1
   14d08:	mvn	r2, #-536870912	; 0xe0000000
   14d0c:	mov	r1, r5
   14d10:	bl	12db0 <flatcc_builder_default_alloc@@Base+0x478>
   14d14:	cmp	r0, #0
   14d18:	bne	14d30 <flatcc_builder_append_union_vector@@Base+0x5c>
   14d1c:	lsl	r2, r5, #3
   14d20:	mov	r1, r6
   14d24:	mov	r0, r4
   14d28:	pop	{r4, r5, r6, lr}
   14d2c:	b	128b8 <emit_test@@Base+0x490>
   14d30:	mov	r0, #0
   14d34:	pop	{r4, r5, r6, pc}
   14d38:	strdeq	r6, [r1], -r8
   14d3c:	muleq	r0, ip, r6
   14d40:	andeq	r6, r1, r7, lsl #16
   14d44:	andeq	r6, r1, r4, ror #21

00014d48 <flatcc_builder_create_string@@Base>:
   14d48:	push	{lr}		; (str lr, [sp, #-4]!)
   14d4c:	sub	sp, sp, #84	; 0x54
   14d50:	ldr	r3, [r0, #136]	; 0x88
   14d54:	mov	ip, #4
   14d58:	cmp	r2, #0
   14d5c:	str	ip, [sp, #8]
   14d60:	add	lr, sp, ip
   14d64:	str	ip, [sp, #20]
   14d68:	sub	r3, r3, r2
   14d6c:	mov	ip, #1
   14d70:	str	ip, [sp, #12]
   14d74:	strne	r2, [sp, #28]
   14d78:	addne	ip, r2, #4
   14d7c:	str	r2, [sp, #4]
   14d80:	sub	r3, r3, #1
   14d84:	movne	r2, #2
   14d88:	strne	ip, [sp, #8]
   14d8c:	strne	r2, [sp, #12]
   14d90:	and	r3, r3, #3
   14d94:	ldr	r2, [sp, #8]
   14d98:	add	r3, r3, #1
   14d9c:	add	r2, r2, r3
   14da0:	str	r2, [sp, #8]
   14da4:	ldr	r2, [sp, #12]
   14da8:	strne	r1, [sp, #24]
   14dac:	add	r2, r2, #1
   14db0:	add	r1, sp, #80	; 0x50
   14db4:	add	r1, r1, r2, lsl #3
   14db8:	ldr	ip, [pc, #28]	; 14ddc <flatcc_builder_create_string@@Base+0x94>
   14dbc:	str	lr, [sp, #16]
   14dc0:	str	r3, [r1, #-68]	; 0xffffffbc
   14dc4:	str	ip, [r1, #-72]	; 0xffffffb8
   14dc8:	add	r1, sp, #8
   14dcc:	str	r2, [sp, #12]
   14dd0:	bl	12d30 <flatcc_builder_default_alloc@@Base+0x3f8>
   14dd4:	add	sp, sp, #84	; 0x54
   14dd8:	pop	{pc}		; (ldr pc, [sp], #4)
   14ddc:	andeq	r6, r1, r1, lsr #2

00014de0 <flatcc_builder_create_string_str@@Base>:
   14de0:	push	{r4, r5, r6, lr}
   14de4:	mov	r5, r0
   14de8:	mov	r0, r1
   14dec:	mov	r4, r1
   14df0:	bl	12050 <strlen@plt>
   14df4:	mov	r1, r4
   14df8:	mov	r2, r0
   14dfc:	mov	r0, r5
   14e00:	pop	{r4, r5, r6, lr}
   14e04:	b	14d48 <flatcc_builder_create_string@@Base>

00014e08 <flatcc_builder_create_string_strn@@Base>:
   14e08:	push	{r4, r5, r6, lr}
   14e0c:	mov	r4, r1
   14e10:	mov	r6, r0
   14e14:	mov	r1, #0
   14e18:	mov	r0, r4
   14e1c:	mov	r5, r2
   14e20:	bl	12080 <memchr@plt>
   14e24:	mov	r1, r4
   14e28:	cmp	r0, #0
   14e2c:	subne	r5, r0, r4
   14e30:	mov	r2, r5
   14e34:	mov	r0, r6
   14e38:	pop	{r4, r5, r6, lr}
   14e3c:	b	14d48 <flatcc_builder_create_string@@Base>

00014e40 <flatcc_builder_end_string@@Base>:
   14e40:	ldr	r3, [r0, #32]
   14e44:	push	{r4, r5, r6, lr}
   14e48:	ldrh	r2, [r3, #14]
   14e4c:	cmp	r2, #6
   14e50:	beq	14e68 <flatcc_builder_end_string@@Base+0x28>
   14e54:	ldr	r3, [pc, #80]	; 14eac <flatcc_builder_end_string@@Base+0x6c>
   14e58:	ldr	r2, [pc, #80]	; 14eb0 <flatcc_builder_end_string@@Base+0x70>
   14e5c:	ldr	r1, [pc, #80]	; 14eb4 <flatcc_builder_end_string@@Base+0x74>
   14e60:	ldr	r0, [pc, #80]	; 14eb8 <flatcc_builder_end_string@@Base+0x78>
   14e64:	bl	120b0 <__assert_fail@plt>
   14e68:	ldr	r2, [r3, #20]
   14e6c:	ldr	r3, [r0, #20]
   14e70:	mov	r4, r0
   14e74:	cmp	r2, r3
   14e78:	ldrne	r3, [pc, #44]	; 14eac <flatcc_builder_end_string@@Base+0x6c>
   14e7c:	ldrne	r2, [pc, #56]	; 14ebc <flatcc_builder_end_string@@Base+0x7c>
   14e80:	ldrne	r1, [pc, #44]	; 14eb4 <flatcc_builder_end_string@@Base+0x74>
   14e84:	ldrne	r0, [pc, #52]	; 14ec0 <flatcc_builder_end_string@@Base+0x80>
   14e88:	bne	14e64 <flatcc_builder_end_string@@Base+0x24>
   14e8c:	ldr	r1, [r0, #16]
   14e90:	bl	14d48 <flatcc_builder_create_string@@Base>
   14e94:	subs	r5, r0, #0
   14e98:	beq	14ea4 <flatcc_builder_end_string@@Base+0x64>
   14e9c:	mov	r0, r4
   14ea0:	bl	1282c <emit_test@@Base+0x404>
   14ea4:	mov	r0, r5
   14ea8:	pop	{r4, r5, r6, pc}
   14eac:	andeq	r6, r1, fp, lsl r7
   14eb0:	andeq	r0, r0, r4, asr #13
   14eb4:	andeq	r6, r1, r7, lsl #16
   14eb8:	andeq	r6, r1, sp, asr #19
   14ebc:	andeq	r0, r0, r5, asr #13
   14ec0:	andeq	r6, r1, r6, lsl fp

00014ec4 <flatcc_builder_string_edit@@Base>:
   14ec4:	ldr	r0, [r0, #16]
   14ec8:	bx	lr

00014ecc <flatcc_builder_string_len@@Base>:
   14ecc:	ldr	r3, [r0, #32]
   14ed0:	ldr	r0, [r3, #20]
   14ed4:	bx	lr

00014ed8 <flatcc_builder_table_add@@Base>:
   14ed8:	push	{r4, r5, r6, r7, r8, lr}
   14edc:	mov	r4, r0
   14ee0:	ldr	r0, [r0, #32]
   14ee4:	ldrh	r0, [r0, #14]
   14ee8:	cmp	r0, #3
   14eec:	beq	14f04 <flatcc_builder_table_add@@Base+0x2c>
   14ef0:	ldr	r3, [pc, #232]	; 14fe0 <flatcc_builder_table_add@@Base+0x108>
   14ef4:	ldr	r2, [pc, #232]	; 14fe4 <flatcc_builder_table_add@@Base+0x10c>
   14ef8:	ldr	r1, [pc, #232]	; 14fe8 <flatcc_builder_table_add@@Base+0x110>
   14efc:	ldr	r0, [pc, #232]	; 14fec <flatcc_builder_table_add@@Base+0x114>
   14f00:	bl	120b0 <__assert_fail@plt>
   14f04:	ldr	r0, [pc, #228]	; 14ff0 <flatcc_builder_table_add@@Base+0x118>
   14f08:	cmp	r1, r0
   14f0c:	ldrhi	r3, [pc, #204]	; 14fe0 <flatcc_builder_table_add@@Base+0x108>
   14f10:	ldrhi	r2, [pc, #220]	; 14ff4 <flatcc_builder_table_add@@Base+0x11c>
   14f14:	ldrhi	r1, [pc, #204]	; 14fe8 <flatcc_builder_table_add@@Base+0x110>
   14f18:	ldrhi	r0, [pc, #216]	; 14ff8 <flatcc_builder_table_add@@Base+0x120>
   14f1c:	bhi	14f00 <flatcc_builder_table_add@@Base+0x28>
   14f20:	ldrh	r0, [r4, #130]	; 0x82
   14f24:	lsl	r7, r1, #1
   14f28:	cmp	r0, r3
   14f2c:	ldr	r0, [r4, #4]
   14f30:	strhcc	r3, [r4, #130]	; 0x82
   14f34:	ldrh	r5, [r0, r7]
   14f38:	cmp	r5, #0
   14f3c:	ldrne	r3, [pc, #156]	; 14fe0 <flatcc_builder_table_add@@Base+0x108>
   14f40:	ldrne	r2, [pc, #180]	; 14ffc <flatcc_builder_table_add@@Base+0x124>
   14f44:	ldrne	r1, [pc, #156]	; 14fe8 <flatcc_builder_table_add@@Base+0x110>
   14f48:	ldrne	r0, [pc, #176]	; 15000 <flatcc_builder_table_add@@Base+0x128>
   14f4c:	bne	14f00 <flatcc_builder_table_add@@Base+0x28>
   14f50:	ldr	ip, [r4, #12]
   14f54:	ldr	lr, [pc, #168]	; 15004 <flatcc_builder_table_add@@Base+0x12c>
   14f58:	eor	ip, ip, r1
   14f5c:	ldr	r6, [r4, #20]
   14f60:	mul	ip, lr, ip
   14f64:	sub	r0, r3, #1
   14f68:	eor	ip, ip, r2
   14f6c:	rsb	r3, r3, #0
   14f70:	add	r0, r0, r6
   14f74:	and	r6, r0, r3
   14f78:	mul	ip, lr, ip
   14f7c:	ldr	r3, [r4, #24]
   14f80:	uxth	r8, r1
   14f84:	add	r1, r2, r6
   14f88:	cmp	r1, r3
   14f8c:	str	ip, [r4, #12]
   14f90:	str	r1, [r4, #20]
   14f94:	bcs	14fc0 <flatcc_builder_table_add@@Base+0xe8>
   14f98:	ldr	r3, [r4, #4]
   14f9c:	add	r2, r6, #4
   14fa0:	ldr	r0, [r4, #16]
   14fa4:	strh	r2, [r3, r7]
   14fa8:	ldrh	r3, [r4, #8]
   14fac:	add	r0, r0, r6
   14fb0:	cmp	r3, r8
   14fb4:	addls	r1, r8, #1
   14fb8:	strhls	r1, [r4, #8]
   14fbc:	pop	{r4, r5, r6, r7, r8, pc}
   14fc0:	ldr	r2, [pc, #64]	; 15008 <flatcc_builder_table_add@@Base+0x130>
   14fc4:	add	r1, r1, #1
   14fc8:	mov	r0, r4
   14fcc:	bl	12794 <emit_test@@Base+0x36c>
   14fd0:	cmp	r0, #0
   14fd4:	beq	14f98 <flatcc_builder_table_add@@Base+0xc0>
   14fd8:	mov	r0, r5
   14fdc:	pop	{r4, r5, r6, r7, r8, pc}
   14fe0:	andeq	r6, r1, r5, lsr r7
   14fe4:	andeq	r0, r0, sp, ror #13
   14fe8:	andeq	r6, r1, r7, lsl #16
   14fec:	andeq	r6, r1, r6, lsr #21
   14ff0:	strdeq	r7, [r0], -ip
   14ff4:	andeq	r0, r0, lr, ror #13
   14ff8:	andeq	r6, r1, sl, lsr fp
   14ffc:	strdeq	r0, [r0], -r8
   15000:	andeq	r6, r1, r4, ror r8
   15004:			; <UNDEFINED> instruction: 0x9e3779b1
   15008:	strdeq	pc, [r0], -ip

0001500c <flatcc_builder_table_edit@@Base>:
   1500c:	ldr	r3, [r0, #32]
   15010:	ldrh	r3, [r3, #14]
   15014:	cmp	r3, #3
   15018:	beq	15034 <flatcc_builder_table_edit@@Base+0x28>
   1501c:	push	{r4, lr}
   15020:	ldr	r3, [pc, #32]	; 15048 <flatcc_builder_table_edit@@Base+0x3c>
   15024:	ldr	r2, [pc, #32]	; 1504c <flatcc_builder_table_edit@@Base+0x40>
   15028:	ldr	r1, [pc, #32]	; 15050 <flatcc_builder_table_edit@@Base+0x44>
   1502c:	ldr	r0, [pc, #32]	; 15054 <flatcc_builder_table_edit@@Base+0x48>
   15030:	bl	120b0 <__assert_fail@plt>
   15034:	ldr	r3, [r0, #20]
   15038:	ldr	r0, [r0, #16]
   1503c:	sub	r1, r3, r1
   15040:	add	r0, r0, r1
   15044:	bx	lr
   15048:	andeq	r6, r1, lr, asr #14
   1504c:	andeq	r0, r0, r2, lsl #14
   15050:	andeq	r6, r1, r7, lsl #16
   15054:	andeq	r6, r1, r6, lsr #21

00015058 <flatcc_builder_table_add_copy@@Base>:
   15058:	push	{r4, r5, r6, lr}
   1505c:	mov	r4, r3
   15060:	mov	r6, r2
   15064:	ldrh	r3, [sp, #16]
   15068:	mov	r2, r4
   1506c:	bl	14ed8 <flatcc_builder_table_add@@Base>
   15070:	subs	r5, r0, #0
   15074:	beq	15084 <flatcc_builder_table_add_copy@@Base+0x2c>
   15078:	mov	r2, r4
   1507c:	mov	r1, r6
   15080:	bl	11ffc <memcpy@plt>
   15084:	mov	r0, r5
   15088:	pop	{r4, r5, r6, pc}

0001508c <flatcc_builder_table_add_offset@@Base>:
   1508c:	ldr	r3, [r0, #32]
   15090:	push	{r4, r5, r6, r7, r8, lr}
   15094:	ldrh	r3, [r3, #14]
   15098:	cmp	r3, #3
   1509c:	beq	150b4 <flatcc_builder_table_add_offset@@Base+0x28>
   150a0:	ldr	r3, [pc, #228]	; 1518c <flatcc_builder_table_add_offset@@Base+0x100>
   150a4:	ldr	r2, [pc, #228]	; 15190 <flatcc_builder_table_add_offset@@Base+0x104>
   150a8:	ldr	r1, [pc, #228]	; 15194 <flatcc_builder_table_add_offset@@Base+0x108>
   150ac:	ldr	r0, [pc, #228]	; 15198 <flatcc_builder_table_add_offset@@Base+0x10c>
   150b0:	bl	120b0 <__assert_fail@plt>
   150b4:	ldr	r3, [pc, #224]	; 1519c <flatcc_builder_table_add_offset@@Base+0x110>
   150b8:	cmp	r1, r3
   150bc:	ldrhi	r3, [pc, #200]	; 1518c <flatcc_builder_table_add_offset@@Base+0x100>
   150c0:	ldrhi	r2, [pc, #216]	; 151a0 <flatcc_builder_table_add_offset@@Base+0x114>
   150c4:	ldrhi	r1, [pc, #200]	; 15194 <flatcc_builder_table_add_offset@@Base+0x108>
   150c8:	ldrhi	r0, [pc, #212]	; 151a4 <flatcc_builder_table_add_offset@@Base+0x118>
   150cc:	bhi	150b0 <flatcc_builder_table_add_offset@@Base+0x24>
   150d0:	ldr	r3, [r0, #4]
   150d4:	lsl	r7, r1, #1
   150d8:	mov	r4, r0
   150dc:	ldrh	r6, [r3, r7]
   150e0:	cmp	r6, #0
   150e4:	ldrne	r3, [pc, #160]	; 1518c <flatcc_builder_table_add_offset@@Base+0x100>
   150e8:	ldrne	r2, [pc, #184]	; 151a8 <flatcc_builder_table_add_offset@@Base+0x11c>
   150ec:	ldrne	r1, [pc, #160]	; 15194 <flatcc_builder_table_add_offset@@Base+0x108>
   150f0:	ldrne	r0, [pc, #180]	; 151ac <flatcc_builder_table_add_offset@@Base+0x120>
   150f4:	bne	150b0 <flatcc_builder_table_add_offset@@Base+0x24>
   150f8:	ldr	r3, [r0, #12]
   150fc:	ldr	r2, [pc, #172]	; 151b0 <flatcc_builder_table_add_offset@@Base+0x124>
   15100:	eor	r3, r3, r1
   15104:	ldr	r8, [r0, #20]
   15108:	mul	r3, r2, r3
   1510c:	add	r8, r8, #3
   15110:	eor	r3, r3, #4
   15114:	bic	r8, r8, #3
   15118:	mul	r3, r2, r3
   1511c:	uxth	r5, r1
   15120:	str	r3, [r0, #12]
   15124:	ldr	r3, [r0, #24]
   15128:	add	r1, r8, #4
   1512c:	cmp	r1, r3
   15130:	str	r1, [r0, #20]
   15134:	bhi	15174 <flatcc_builder_table_add_offset@@Base+0xe8>
   15138:	ldr	r3, [r4, #4]
   1513c:	uxth	r2, r8
   15140:	add	r1, r2, #4
   15144:	strh	r1, [r3, r7]
   15148:	ldrh	r3, [r4, #8]
   1514c:	ldr	r0, [r4, #16]
   15150:	cmp	r3, r5
   15154:	ldr	r3, [r4]
   15158:	addls	r1, r5, #1
   1515c:	strhls	r1, [r4, #8]
   15160:	add	r1, r3, #2
   15164:	str	r1, [r4]
   15168:	add	r0, r0, r8
   1516c:	strh	r2, [r3]
   15170:	pop	{r4, r5, r6, r7, r8, pc}
   15174:	ldr	r2, [pc, #56]	; 151b4 <flatcc_builder_table_add_offset@@Base+0x128>
   15178:	bl	12794 <emit_test@@Base+0x36c>
   1517c:	cmp	r0, #0
   15180:	beq	15138 <flatcc_builder_table_add_offset@@Base+0xac>
   15184:	mov	r0, r6
   15188:	pop	{r4, r5, r6, r7, r8, pc}
   1518c:	andeq	r6, r1, r8, ror #14
   15190:	andeq	r0, r0, r3, lsl r7
   15194:	andeq	r6, r1, r7, lsl #16
   15198:	andeq	r6, r1, r6, lsr #21
   1519c:	strdeq	r7, [r0], -ip
   151a0:	andeq	r0, r0, r4, lsl r7
   151a4:	andeq	r6, r1, sl, lsr fp
   151a8:	andeq	r0, r0, fp, lsl r7
   151ac:	andeq	r6, r1, r4, ror r8
   151b0:			; <UNDEFINED> instruction: 0x9e3779b1
   151b4:	strdeq	pc, [r0], -ip

000151b8 <flatcc_builder_table_add_union@@Base>:
   151b8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   151bc:	add	ip, sp, #8
   151c0:	stmdb	ip, {r2, r3}
   151c4:	ldr	r3, [r0, #32]
   151c8:	ldrb	r5, [sp]
   151cc:	ldr	r4, [sp, #4]
   151d0:	ldrh	r3, [r3, #14]
   151d4:	cmp	r3, #3
   151d8:	beq	151f0 <flatcc_builder_table_add_union@@Base+0x38>
   151dc:	ldr	r3, [pc, #156]	; 15280 <flatcc_builder_table_add_union@@Base+0xc8>
   151e0:	ldr	r2, [pc, #156]	; 15284 <flatcc_builder_table_add_union@@Base+0xcc>
   151e4:	ldr	r1, [pc, #156]	; 15288 <flatcc_builder_table_add_union@@Base+0xd0>
   151e8:	ldr	r0, [pc, #156]	; 1528c <flatcc_builder_table_add_union@@Base+0xd4>
   151ec:	bl	120b0 <__assert_fail@plt>
   151f0:	cmp	r5, #0
   151f4:	mov	r6, r0
   151f8:	mov	r7, r1
   151fc:	bne	1521c <flatcc_builder_table_add_union@@Base+0x64>
   15200:	cmp	r4, #0
   15204:	beq	15244 <flatcc_builder_table_add_union@@Base+0x8c>
   15208:	ldr	r3, [pc, #112]	; 15280 <flatcc_builder_table_add_union@@Base+0xc8>
   1520c:	ldr	r2, [pc, #124]	; 15290 <flatcc_builder_table_add_union@@Base+0xd8>
   15210:	ldr	r1, [pc, #112]	; 15288 <flatcc_builder_table_add_union@@Base+0xd0>
   15214:	ldr	r0, [pc, #120]	; 15294 <flatcc_builder_table_add_union@@Base+0xdc>
   15218:	b	151ec <flatcc_builder_table_add_union@@Base+0x34>
   1521c:	cmp	r4, #0
   15220:	beq	15244 <flatcc_builder_table_add_union@@Base+0x8c>
   15224:	bl	1508c <flatcc_builder_table_add_offset@@Base>
   15228:	cmp	r0, #0
   1522c:	strne	r4, [r0]
   15230:	ldreq	r3, [pc, #72]	; 15280 <flatcc_builder_table_add_union@@Base+0xc8>
   15234:	ldreq	r2, [pc, #92]	; 15298 <flatcc_builder_table_add_union@@Base+0xe0>
   15238:	ldreq	r1, [pc, #72]	; 15288 <flatcc_builder_table_add_union@@Base+0xd0>
   1523c:	ldreq	r0, [pc, #88]	; 1529c <flatcc_builder_table_add_union@@Base+0xe4>
   15240:	beq	151ec <flatcc_builder_table_add_union@@Base+0x34>
   15244:	mov	r3, #1
   15248:	mov	r2, r3
   1524c:	sub	r1, r7, #1
   15250:	mov	r0, r6
   15254:	bl	14ed8 <flatcc_builder_table_add@@Base>
   15258:	cmp	r0, #0
   1525c:	ldreq	r3, [pc, #28]	; 15280 <flatcc_builder_table_add_union@@Base+0xc8>
   15260:	ldreq	r2, [pc, #56]	; 152a0 <flatcc_builder_table_add_union@@Base+0xe8>
   15264:	ldreq	r1, [pc, #28]	; 15288 <flatcc_builder_table_add_union@@Base+0xd0>
   15268:	ldreq	r0, [pc, #52]	; 152a4 <flatcc_builder_table_add_union@@Base+0xec>
   1526c:	beq	151ec <flatcc_builder_table_add_union@@Base+0x34>
   15270:	strb	r5, [r0]
   15274:	mov	r0, #0
   15278:	add	sp, sp, #12
   1527c:	pop	{r4, r5, r6, r7, pc}
   15280:	andeq	r6, r1, r8, lsl #15
   15284:	andeq	r0, r0, lr, ror #11
   15288:	andeq	r6, r1, r7, lsl #16
   1528c:	andeq	r6, r1, r6, lsr #21
   15290:	andeq	r0, r0, pc, ror #11
   15294:	andeq	r6, r1, lr, ror fp
   15298:	strdeq	r0, [r0], -r2
   1529c:	andeq	r6, r1, r0, lsr #23
   152a0:	strdeq	r0, [r0], -r6
   152a4:	andeq	r6, r1, sl, lsr #23

000152a8 <flatcc_builder_table_add_union_vector@@Base>:
   152a8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   152ac:	mov	r7, r1
   152b0:	add	r1, sp, #8
   152b4:	stmdb	r1, {r2, r3}
   152b8:	ldr	r3, [r0, #32]
   152bc:	ldm	sp, {r4, r5}
   152c0:	ldrh	r3, [r3, #14]
   152c4:	cmp	r3, #3
   152c8:	beq	152e0 <flatcc_builder_table_add_union_vector@@Base+0x38>
   152cc:	ldr	r3, [pc, #176]	; 15384 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   152d0:	ldr	r1, [pc, #176]	; 15388 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   152d4:	ldr	r0, [pc, #176]	; 1538c <flatcc_builder_table_add_union_vector@@Base+0xe4>
   152d8:	mov	r2, #1536	; 0x600
   152dc:	bl	120b0 <__assert_fail@plt>
   152e0:	clz	r3, r5
   152e4:	clz	r2, r4
   152e8:	lsr	r3, r3, #5
   152ec:	lsr	r2, r2, #5
   152f0:	cmp	r2, r3
   152f4:	beq	15320 <flatcc_builder_table_add_union_vector@@Base+0x78>
   152f8:	adds	r4, r4, #0
   152fc:	movne	r4, #1
   15300:	cmp	r4, r3
   15304:	mvnne	r0, #0
   15308:	bne	1537c <flatcc_builder_table_add_union_vector@@Base+0xd4>
   1530c:	ldr	r3, [pc, #112]	; 15384 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15310:	ldr	r2, [pc, #120]	; 15390 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   15314:	ldr	r1, [pc, #108]	; 15388 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   15318:	ldr	r0, [pc, #116]	; 15394 <flatcc_builder_table_add_union_vector@@Base+0xec>
   1531c:	b	152dc <flatcc_builder_table_add_union_vector@@Base+0x34>
   15320:	cmp	r4, #0
   15324:	moveq	r0, r4
   15328:	beq	1537c <flatcc_builder_table_add_union_vector@@Base+0xd4>
   1532c:	sub	r1, r7, #1
   15330:	mov	r6, r0
   15334:	bl	1508c <flatcc_builder_table_add_offset@@Base>
   15338:	cmp	r0, #0
   1533c:	bne	15354 <flatcc_builder_table_add_union_vector@@Base+0xac>
   15340:	ldr	r3, [pc, #60]	; 15384 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15344:	ldr	r2, [pc, #76]	; 15398 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   15348:	ldr	r1, [pc, #56]	; 15388 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   1534c:	ldr	r0, [pc, #72]	; 1539c <flatcc_builder_table_add_union_vector@@Base+0xf4>
   15350:	b	152dc <flatcc_builder_table_add_union_vector@@Base+0x34>
   15354:	str	r4, [r0]
   15358:	mov	r1, r7
   1535c:	mov	r0, r6
   15360:	bl	1508c <flatcc_builder_table_add_offset@@Base>
   15364:	cmp	r0, #0
   15368:	strne	r5, [r0]
   1536c:	movne	r0, #0
   15370:	ldreq	r3, [pc, #12]	; 15384 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15374:	ldreq	r2, [pc, #36]	; 153a0 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   15378:	beq	15348 <flatcc_builder_table_add_union_vector@@Base+0xa0>
   1537c:	add	sp, sp, #12
   15380:	pop	{r4, r5, r6, r7, pc}
   15384:	andeq	r6, r1, r7, lsr #15
   15388:	andeq	r6, r1, r7, lsl #16
   1538c:	andeq	r6, r1, r6, lsr #21
   15390:	andeq	r0, r0, r1, lsl #12
   15394:			; <UNDEFINED> instruction: 0x00016bb6
   15398:	andeq	r0, r0, r4, lsl #12
   1539c:	andeq	r6, r1, r0, lsr #23
   153a0:	andeq	r0, r0, r8, lsl #12

000153a4 <flatcc_builder_push_buffer_alignment@@Base>:
   153a4:	mov	r3, r0
   153a8:	mov	r2, #4
   153ac:	ldrh	r0, [r0, #128]	; 0x80
   153b0:	strh	r2, [r3, #128]	; 0x80
   153b4:	bx	lr

000153b8 <flatcc_builder_pop_buffer_alignment@@Base>:
   153b8:	ldrh	r3, [r0, #128]	; 0x80
   153bc:	cmp	r3, r1
   153c0:	strhcc	r1, [r0, #128]	; 0x80
   153c4:	bx	lr

000153c8 <flatcc_builder_get_buffer_alignment@@Base>:
   153c8:	ldrh	r0, [r0, #128]	; 0x80
   153cc:	bx	lr

000153d0 <flatcc_builder_set_vtable_clustering@@Base>:
   153d0:	clz	r1, r1
   153d4:	lsr	r1, r1, #5
   153d8:	str	r1, [r0, #180]	; 0xb4
   153dc:	bx	lr

000153e0 <flatcc_builder_set_block_align@@Base>:
   153e0:	strh	r1, [r0, #132]	; 0x84
   153e4:	bx	lr

000153e8 <flatcc_builder_get_level@@Base>:
   153e8:	ldr	r0, [r0, #156]	; 0x9c
   153ec:	bx	lr

000153f0 <flatcc_builder_set_max_level@@Base>:
   153f0:	ldr	r3, [r0, #160]	; 0xa0
   153f4:	str	r1, [r0, #176]	; 0xb0
   153f8:	cmp	r1, r3
   153fc:	strgt	r1, [r0, #160]	; 0xa0
   15400:	bx	lr

00015404 <flatcc_builder_get_buffer_size@@Base>:
   15404:	ldr	r2, [r0, #140]	; 0x8c
   15408:	ldr	r0, [r0, #136]	; 0x88
   1540c:	sub	r0, r2, r0
   15410:	bx	lr

00015414 <flatcc_builder_get_buffer_start@@Base>:
   15414:	ldr	r0, [r0, #136]	; 0x88
   15418:	bx	lr

0001541c <flatcc_builder_get_buffer_end@@Base>:
   1541c:	ldr	r0, [r0, #140]	; 0x8c
   15420:	bx	lr

00015424 <flatcc_builder_set_vtable_cache_limit@@Base>:
   15424:	str	r1, [r0, #172]	; 0xac
   15428:	bx	lr

0001542c <flatcc_builder_set_identifier@@Base>:
   1542c:	ldr	r3, [pc, #16]	; 15444 <flatcc_builder_set_identifier@@Base+0x18>
   15430:	cmp	r1, #0
   15434:	moveq	r1, r3
   15438:	ldr	r3, [r1]
   1543c:	str	r3, [r0, #168]	; 0xa8
   15440:	bx	lr
   15444:	andeq	r6, r1, r1, lsr #2

00015448 <flatcc_builder_get_type@@Base>:
   15448:	ldr	r0, [r0, #32]
   1544c:	cmp	r0, #0
   15450:	ldrhne	r0, [r0, #14]
   15454:	bx	lr

00015458 <flatcc_builder_get_type_at@@Base>:
   15458:	cmp	r1, #0
   1545c:	ble	15484 <flatcc_builder_get_type_at@@Base+0x2c>
   15460:	ldr	r3, [r0, #156]	; 0x9c
   15464:	cmp	r1, r3
   15468:	bgt	15484 <flatcc_builder_get_type_at@@Base+0x2c>
   1546c:	sub	r1, r1, r3
   15470:	mov	r2, #36	; 0x24
   15474:	ldr	r3, [r0, #32]
   15478:	mla	r1, r2, r1, r3
   1547c:	ldrh	r0, [r1, #14]
   15480:	bx	lr
   15484:	mov	r0, #0
   15488:	bx	lr

0001548c <flatcc_builder_get_direct_buffer@@Base>:
   1548c:	ldr	r3, [r0, #184]	; 0xb8
   15490:	cmp	r3, #0
   15494:	beq	154bc <flatcc_builder_get_direct_buffer@@Base+0x30>
   15498:	ldr	r2, [r0, #188]	; 0xbc
   1549c:	ldr	r3, [r0, #192]	; 0xc0
   154a0:	cmp	r2, r3
   154a4:	bne	154bc <flatcc_builder_get_direct_buffer@@Base+0x30>
   154a8:	cmp	r1, #0
   154ac:	ldrne	r3, [r0, #212]	; 0xd4
   154b0:	ldr	r0, [r0, #196]	; 0xc4
   154b4:	strne	r3, [r1]
   154b8:	bx	lr
   154bc:	mov	r0, #0
   154c0:	cmp	r1, #0
   154c4:	strne	r0, [r1]
   154c8:	moveq	r0, r1
   154cc:	bx	lr

000154d0 <flatcc_builder_copy_buffer@@Base>:
   154d0:	ldr	r3, [r0, #184]	; 0xb8
   154d4:	cmp	r3, #0
   154d8:	beq	15504 <flatcc_builder_copy_buffer@@Base+0x34>
   154dc:	push	{r4, lr}
   154e0:	add	r0, r0, #188	; 0xbc
   154e4:	bl	15ac4 <flatcc_emitter_copy_buffer@@Base>
   154e8:	cmp	r0, #0
   154ec:	popne	{r4, pc}
   154f0:	ldr	r3, [pc, #20]	; 1550c <flatcc_builder_copy_buffer@@Base+0x3c>
   154f4:	ldr	r2, [pc, #20]	; 15510 <flatcc_builder_copy_buffer@@Base+0x40>
   154f8:	ldr	r1, [pc, #20]	; 15514 <flatcc_builder_copy_buffer@@Base+0x44>
   154fc:	ldr	r0, [pc, #20]	; 15518 <flatcc_builder_copy_buffer@@Base+0x48>
   15500:	bl	120b0 <__assert_fail@plt>
   15504:	mov	r0, r3
   15508:	bx	lr
   1550c:	andeq	r6, r1, sp, asr #15
   15510:	andeq	r0, r0, r6, lsl #15
   15514:	andeq	r6, r1, r7, lsl #16
   15518:	strdeq	r5, [r1], -ip

0001551c <flatcc_builder_finalize_buffer@@Base>:
   1551c:	push	{r4, r5, r6, lr}
   15520:	cmp	r1, #0
   15524:	ldr	r4, [r0, #140]	; 0x8c
   15528:	ldr	r2, [r0, #136]	; 0x88
   1552c:	mov	r5, r0
   15530:	sub	r4, r4, r2
   15534:	strne	r4, [r1]
   15538:	mov	r0, r4
   1553c:	bl	1202c <malloc@plt>
   15540:	subs	r6, r0, #0
   15544:	bne	1555c <flatcc_builder_finalize_buffer@@Base+0x40>
   15548:	ldr	r3, [pc, #52]	; 15584 <flatcc_builder_finalize_buffer@@Base+0x68>
   1554c:	ldr	r2, [pc, #52]	; 15588 <flatcc_builder_finalize_buffer@@Base+0x6c>
   15550:	ldr	r1, [pc, #52]	; 1558c <flatcc_builder_finalize_buffer@@Base+0x70>
   15554:	ldr	r0, [pc, #52]	; 15590 <flatcc_builder_finalize_buffer@@Base+0x74>
   15558:	bl	120b0 <__assert_fail@plt>
   1555c:	mov	r2, r4
   15560:	mov	r1, r6
   15564:	mov	r0, r5
   15568:	bl	154d0 <flatcc_builder_copy_buffer@@Base>
   1556c:	cmp	r0, #0
   15570:	ldreq	r3, [pc, #12]	; 15584 <flatcc_builder_finalize_buffer@@Base+0x68>
   15574:	ldreq	r2, [pc, #24]	; 15594 <flatcc_builder_finalize_buffer@@Base+0x78>
   15578:	beq	15550 <flatcc_builder_finalize_buffer@@Base+0x34>
   1557c:	mov	r0, r6
   15580:	pop	{r4, r5, r6, pc}
   15584:	andeq	r6, r1, r8, ror #15
   15588:	muleq	r0, r8, r7
   1558c:	andeq	r6, r1, r7, lsl #16
   15590:	andeq	r6, r1, r4, ror r8
   15594:	muleq	r0, ip, r7

00015598 <flatcc_builder_finalize_aligned_buffer@@Base>:
   15598:	push	{r4, r5, r6, r7, r8, lr}
   1559c:	mov	r6, r0
   155a0:	ldr	r4, [r0, #140]	; 0x8c
   155a4:	ldr	r2, [r0, #136]	; 0x88
   155a8:	ldrh	r0, [r0, #128]	; 0x80
   155ac:	subs	r7, r1, #0
   155b0:	sub	r2, r4, r2
   155b4:	sub	r4, r0, #1
   155b8:	strne	r2, [r7]
   155bc:	add	r4, r4, r2
   155c0:	rsb	r2, r0, #0
   155c4:	and	r4, r4, r2
   155c8:	mov	r1, r4
   155cc:	bl	128e8 <emit_test@@Base+0x4c0>
   155d0:	subs	r5, r0, #0
   155d4:	beq	155fc <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   155d8:	mov	r2, r4
   155dc:	mov	r1, r5
   155e0:	mov	r0, r6
   155e4:	bl	154d0 <flatcc_builder_copy_buffer@@Base>
   155e8:	subs	r4, r0, #0
   155ec:	bne	155fc <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   155f0:	mov	r0, r5
   155f4:	bl	11ff0 <free@plt>
   155f8:	mov	r5, r4
   155fc:	cmp	r7, #0
   15600:	clz	r3, r5
   15604:	lsr	r3, r3, #5
   15608:	moveq	r3, #0
   1560c:	cmp	r3, #0
   15610:	movne	r3, #0
   15614:	strne	r3, [r7]
   15618:	mov	r0, r5
   1561c:	pop	{r4, r5, r6, r7, r8, pc}

00015620 <flatcc_builder_aligned_alloc@@Base>:
   15620:	b	128e8 <emit_test@@Base+0x4c0>

00015624 <flatcc_builder_aligned_free@@Base>:
   15624:	b	11ff0 <free@plt>

00015628 <flatcc_builder_get_emit_context@@Base>:
   15628:	ldr	r0, [r0, #36]	; 0x24
   1562c:	bx	lr

00015630 <flatcc_emitter_recycle_page@@Base>:
   15630:	ldr	r3, [r0]
   15634:	cmp	r3, r1
   15638:	beq	1567c <flatcc_emitter_recycle_page@@Base+0x4c>
   1563c:	ldr	r2, [r0, #4]
   15640:	cmp	r1, r2
   15644:	beq	1567c <flatcc_emitter_recycle_page@@Base+0x4c>
   15648:	ldr	r2, [r1, #2944]	; 0xb80
   1564c:	ldr	r0, [r1, #2948]	; 0xb84
   15650:	str	r0, [r2, #2948]	; 0xb84
   15654:	ldr	r0, [r1, #2948]	; 0xb84
   15658:	str	r2, [r0, #2944]	; 0xb80
   1565c:	ldr	r2, [r3, #2948]	; 0xb84
   15660:	str	r3, [r1, #2944]	; 0xb80
   15664:	str	r2, [r1, #2948]	; 0xb84
   15668:	str	r1, [r2, #2944]	; 0xb80
   1566c:	ldr	r3, [r1, #2944]	; 0xb80
   15670:	mov	r0, #0
   15674:	str	r1, [r3, #2948]	; 0xb84
   15678:	bx	lr
   1567c:	mvn	r0, #0
   15680:	bx	lr

00015684 <flatcc_emitter_reset@@Base>:
   15684:	ldr	r3, [r0]
   15688:	cmp	r3, #0
   1568c:	bxeq	lr
   15690:	add	r2, r3, #1472	; 0x5c0
   15694:	push	{r4, lr}
   15698:	mov	r4, r0
   1569c:	str	r2, [r0, #8]
   156a0:	str	r2, [r0, #16]
   156a4:	mov	r2, #1472	; 0x5c0
   156a8:	str	r2, [r0, #12]
   156ac:	str	r2, [r0, #20]
   156b0:	sub	r2, r2, #2944	; 0xb80
   156b4:	str	r3, [r0, #4]
   156b8:	str	r2, [r3, #2952]	; 0xb88
   156bc:	ldr	r3, [r0, #32]
   156c0:	cmp	r3, #0
   156c4:	ldr	r3, [r0, #24]
   156c8:	streq	r3, [r0, #32]
   156cc:	ldr	r2, [r0, #32]
   156d0:	lsr	r3, r3, #2
   156d4:	add	r2, r2, r2, lsl #1
   156d8:	add	r3, r3, r2, lsr #2
   156dc:	str	r3, [r0, #32]
   156e0:	mov	r3, #0
   156e4:	str	r3, [r0, #24]
   156e8:	ldr	r2, [r4, #32]
   156ec:	ldr	r3, [r4, #28]
   156f0:	cmp	r3, r2, lsl #1
   156f4:	popls	{r4, pc}
   156f8:	ldr	r3, [r4, #4]
   156fc:	ldr	r2, [r4]
   15700:	ldr	r0, [r3, #2944]	; 0xb80
   15704:	cmp	r0, r2
   15708:	bne	15710 <flatcc_emitter_reset@@Base+0x8c>
   1570c:	pop	{r4, pc}
   15710:	ldr	r2, [r0, #2944]	; 0xb80
   15714:	str	r2, [r3, #2944]	; 0xb80
   15718:	ldr	r2, [r0, #2944]	; 0xb80
   1571c:	str	r3, [r2, #2948]	; 0xb84
   15720:	bl	11ff0 <free@plt>
   15724:	ldr	r3, [r4, #28]
   15728:	sub	r3, r3, #2944	; 0xb80
   1572c:	str	r3, [r4, #28]
   15730:	b	156e8 <flatcc_emitter_reset@@Base+0x64>

00015734 <flatcc_emitter_clear@@Base>:
   15734:	ldr	r3, [r0]
   15738:	cmp	r3, #0
   1573c:	bxeq	lr
   15740:	ldr	r2, [r3, #2948]	; 0xb84
   15744:	push	{r4, r5, r6, lr}
   15748:	mov	r4, r0
   1574c:	mov	r1, #0
   15750:	str	r1, [r2, #2944]	; 0xb80
   15754:	ldr	r5, [r3, #2944]	; 0xb80
   15758:	cmp	r5, #0
   1575c:	bne	1577c <flatcc_emitter_clear@@Base+0x48>
   15760:	mov	r0, r3
   15764:	bl	11ff0 <free@plt>
   15768:	mov	r1, r5
   1576c:	mov	r0, r4
   15770:	mov	r2, #36	; 0x24
   15774:	pop	{r4, r5, r6, lr}
   15778:	b	12074 <memset@plt>
   1577c:	ldr	r0, [r5, #2948]	; 0xb84
   15780:	bl	11ff0 <free@plt>
   15784:	mov	r3, r5
   15788:	b	15754 <flatcc_emitter_clear@@Base+0x20>

0001578c <flatcc_emitter@@Base>:
   1578c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15790:	mov	r4, r0
   15794:	ldr	r0, [sp, #48]	; 0x30
   15798:	ldr	ip, [r4, #24]
   1579c:	cmp	r3, #0
   157a0:	add	ip, ip, r0
   157a4:	str	ip, [r4, #24]
   157a8:	bge	15958 <flatcc_emitter@@Base+0x1cc>
   157ac:	ldr	ip, [r4, #12]
   157b0:	cmp	r0, ip
   157b4:	bhi	157fc <flatcc_emitter@@Base+0x70>
   157b8:	ldr	r3, [r4, #8]
   157bc:	sub	r3, r3, r0
   157c0:	sub	r0, ip, r0
   157c4:	str	r3, [r4, #8]
   157c8:	str	r0, [r4, #12]
   157cc:	mov	r4, r1
   157d0:	mov	r5, r2
   157d4:	cmp	r5, #0
   157d8:	add	r4, r4, #8
   157dc:	beq	15814 <flatcc_emitter@@Base+0x88>
   157e0:	ldmdb	r4, {r1, r2}
   157e4:	mov	r0, r3
   157e8:	bl	11ffc <memcpy@plt>
   157ec:	ldr	r2, [r4, #-4]
   157f0:	sub	r5, r5, #1
   157f4:	add	r3, r0, r2
   157f8:	b	157d4 <flatcc_emitter@@Base+0x48>
   157fc:	ldr	sl, [pc, #696]	; 15abc <flatcc_emitter@@Base+0x330>
   15800:	add	r5, r1, r2, lsl #3
   15804:	sub	r6, r2, #1
   15808:	mov	r9, #2944	; 0xb80
   1580c:	cmn	r6, #1
   15810:	bne	1581c <flatcc_emitter@@Base+0x90>
   15814:	mov	r0, #0
   15818:	b	158c0 <flatcc_emitter@@Base+0x134>
   1581c:	ldr	r7, [r5, #-4]
   15820:	ldr	fp, [r5, #-8]
   15824:	mov	r8, #1472	; 0x5c0
   15828:	add	fp, fp, r7
   1582c:	cmp	r7, #0
   15830:	subeq	r5, r5, #8
   15834:	subeq	r6, r6, #1
   15838:	beq	1580c <flatcc_emitter@@Base+0x80>
   1583c:	ldr	r3, [r4, #12]
   15840:	cmp	r3, r7
   15844:	bcs	15928 <flatcc_emitter@@Base+0x19c>
   15848:	cmp	r3, #0
   1584c:	movne	r2, r3
   15850:	bne	1592c <flatcc_emitter@@Base+0x1a0>
   15854:	ldr	r3, [r4]
   15858:	cmp	r3, #0
   1585c:	beq	158a4 <flatcc_emitter@@Base+0x118>
   15860:	ldr	r2, [r3, #2948]	; 0xb84
   15864:	ldr	r1, [r4, #4]
   15868:	cmp	r2, r1
   1586c:	beq	158a4 <flatcc_emitter@@Base+0x118>
   15870:	ldr	r3, [r3, #2952]	; 0xb88
   15874:	sub	r3, r3, #2944	; 0xb80
   15878:	str	r3, [r2, #2952]	; 0xb88
   1587c:	str	r2, [r4]
   15880:	ldr	r3, [r4]
   15884:	str	r9, [r4, #12]
   15888:	add	r2, r3, #2944	; 0xb80
   1588c:	str	r2, [r4, #8]
   15890:	ldr	r2, [r3, #2944]	; 0xb80
   15894:	ldr	r2, [r2, #2952]	; 0xb88
   15898:	sub	r2, r2, #2944	; 0xb80
   1589c:	str	r2, [r3, #2952]	; 0xb88
   158a0:	b	1582c <flatcc_emitter@@Base+0xa0>
   158a4:	mov	r0, sl
   158a8:	str	r3, [sp, #4]
   158ac:	bl	1202c <malloc@plt>
   158b0:	ldr	r3, [sp, #4]
   158b4:	cmp	r0, #0
   158b8:	bne	158c8 <flatcc_emitter@@Base+0x13c>
   158bc:	mvn	r0, #0
   158c0:	add	sp, sp, #12
   158c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158c8:	ldr	r2, [r4, #28]
   158cc:	cmp	r3, #0
   158d0:	add	r2, r2, #2944	; 0xb80
   158d4:	str	r2, [r4, #28]
   158d8:	beq	158f8 <flatcc_emitter@@Base+0x16c>
   158dc:	ldr	r2, [r4, #4]
   158e0:	str	r3, [r0, #2944]	; 0xb80
   158e4:	str	r2, [r0, #2948]	; 0xb84
   158e8:	str	r0, [r3, #2948]	; 0xb84
   158ec:	str	r0, [r2, #2944]	; 0xb80
   158f0:	str	r0, [r4]
   158f4:	b	15880 <flatcc_emitter@@Base+0xf4>
   158f8:	add	r3, r0, #1472	; 0x5c0
   158fc:	str	r3, [r4, #8]
   15900:	str	r3, [r4, #16]
   15904:	ldr	r3, [pc, #436]	; 15ac0 <flatcc_emitter@@Base+0x334>
   15908:	str	r0, [r4]
   1590c:	str	r0, [r4, #4]
   15910:	str	r0, [r0, #2944]	; 0xb80
   15914:	str	r0, [r0, #2948]	; 0xb84
   15918:	str	r8, [r4, #12]
   1591c:	str	r8, [r4, #20]
   15920:	str	r3, [r0, #2952]	; 0xb88
   15924:	b	1582c <flatcc_emitter@@Base+0xa0>
   15928:	mov	r2, r7
   1592c:	ldr	r0, [r4, #8]
   15930:	rsb	r1, r2, #0
   15934:	add	r0, r0, r1
   15938:	sub	r3, r3, r2
   1593c:	add	fp, fp, r1
   15940:	str	r0, [r4, #8]
   15944:	str	r3, [r4, #12]
   15948:	mov	r1, fp
   1594c:	sub	r7, r7, r2
   15950:	bl	11ffc <memcpy@plt>
   15954:	b	1582c <flatcc_emitter@@Base+0xa0>
   15958:	ldr	ip, [r4, #20]
   1595c:	cmp	r0, ip
   15960:	bls	1599c <flatcc_emitter@@Base+0x210>
   15964:	ldr	sl, [pc, #336]	; 15abc <flatcc_emitter@@Base+0x330>
   15968:	mov	r6, r2
   1596c:	add	r5, r1, #8
   15970:	mov	r9, #2944	; 0xb80
   15974:	cmp	r6, #0
   15978:	beq	15814 <flatcc_emitter@@Base+0x88>
   1597c:	ldr	r7, [r5, #-4]
   15980:	ldr	fp, [r5, #-8]
   15984:	mov	r8, #1472	; 0x5c0
   15988:	cmp	r7, #0
   1598c:	bne	159b4 <flatcc_emitter@@Base+0x228>
   15990:	sub	r6, r6, #1
   15994:	add	r5, r5, #8
   15998:	b	15974 <flatcc_emitter@@Base+0x1e8>
   1599c:	ldr	r3, [r4, #16]
   159a0:	add	lr, r3, r0
   159a4:	sub	r0, ip, r0
   159a8:	str	lr, [r4, #16]
   159ac:	str	r0, [r4, #20]
   159b0:	b	157cc <flatcc_emitter@@Base+0x40>
   159b4:	ldr	r3, [r4, #20]
   159b8:	cmp	r3, r7
   159bc:	bcs	15a7c <flatcc_emitter@@Base+0x2f0>
   159c0:	cmp	r3, #0
   159c4:	bne	15a80 <flatcc_emitter@@Base+0x2f4>
   159c8:	ldr	r3, [r4, #4]
   159cc:	cmp	r3, #0
   159d0:	beq	159e8 <flatcc_emitter@@Base+0x25c>
   159d4:	ldr	r2, [r3, #2944]	; 0xb80
   159d8:	ldr	r1, [r4]
   159dc:	cmp	r2, r1
   159e0:	strne	r2, [r4, #4]
   159e4:	bne	15a2c <flatcc_emitter@@Base+0x2a0>
   159e8:	mov	r0, sl
   159ec:	str	r3, [sp, #4]
   159f0:	bl	1202c <malloc@plt>
   159f4:	cmp	r0, #0
   159f8:	beq	158bc <flatcc_emitter@@Base+0x130>
   159fc:	ldr	r2, [r4, #28]
   15a00:	ldr	r3, [sp, #4]
   15a04:	add	r2, r2, #2944	; 0xb80
   15a08:	cmp	r3, #0
   15a0c:	str	r2, [r4, #28]
   15a10:	beq	15a4c <flatcc_emitter@@Base+0x2c0>
   15a14:	ldr	r2, [r4]
   15a18:	str	r3, [r0, #2948]	; 0xb84
   15a1c:	str	r2, [r0, #2944]	; 0xb80
   15a20:	str	r0, [r2, #2948]	; 0xb84
   15a24:	str	r0, [r3, #2944]	; 0xb80
   15a28:	str	r0, [r4, #4]
   15a2c:	ldr	r3, [r4, #4]
   15a30:	str	r9, [r4, #20]
   15a34:	str	r3, [r4, #16]
   15a38:	ldr	r2, [r3, #2948]	; 0xb84
   15a3c:	ldr	r2, [r2, #2952]	; 0xb88
   15a40:	add	r2, r2, #2944	; 0xb80
   15a44:	str	r2, [r3, #2952]	; 0xb88
   15a48:	b	15988 <flatcc_emitter@@Base+0x1fc>
   15a4c:	add	r3, r0, #1472	; 0x5c0
   15a50:	str	r3, [r4, #8]
   15a54:	str	r3, [r4, #16]
   15a58:	ldr	r3, [pc, #96]	; 15ac0 <flatcc_emitter@@Base+0x334>
   15a5c:	str	r0, [r4]
   15a60:	str	r0, [r4, #4]
   15a64:	str	r0, [r0, #2944]	; 0xb80
   15a68:	str	r0, [r0, #2948]	; 0xb84
   15a6c:	str	r8, [r4, #12]
   15a70:	str	r8, [r4, #20]
   15a74:	str	r3, [r0, #2952]	; 0xb88
   15a78:	b	15988 <flatcc_emitter@@Base+0x1fc>
   15a7c:	mov	r3, r7
   15a80:	mov	r2, r3
   15a84:	mov	r1, fp
   15a88:	ldr	r0, [r4, #16]
   15a8c:	str	r3, [sp, #4]
   15a90:	bl	11ffc <memcpy@plt>
   15a94:	ldr	r3, [sp, #4]
   15a98:	ldr	r2, [r4, #16]
   15a9c:	sub	r7, r7, r3
   15aa0:	add	r2, r2, r3
   15aa4:	str	r2, [r4, #16]
   15aa8:	ldr	r2, [r4, #20]
   15aac:	add	fp, fp, r3
   15ab0:	sub	r3, r2, r3
   15ab4:	str	r3, [r4, #20]
   15ab8:	b	15988 <flatcc_emitter@@Base+0x1fc>
   15abc:	andeq	r0, r0, ip, lsl #23
   15ac0:			; <UNDEFINED> instruction: 0xfffffa40

00015ac4 <flatcc_emitter_copy_buffer@@Base>:
   15ac4:	push	{r4, r5, r6, lr}
   15ac8:	mov	r4, r0
   15acc:	ldr	r0, [r0, #24]
   15ad0:	cmp	r0, r2
   15ad4:	movhi	r3, #0
   15ad8:	bhi	15b4c <flatcc_emitter_copy_buffer@@Base+0x88>
   15adc:	ldr	r2, [r4]
   15ae0:	cmp	r2, #0
   15ae4:	moveq	r3, r2
   15ae8:	beq	15b4c <flatcc_emitter_copy_buffer@@Base+0x88>
   15aec:	mov	r3, r1
   15af0:	ldr	r1, [r4, #4]
   15af4:	cmp	r2, r1
   15af8:	moveq	r2, r0
   15afc:	ldr	r1, [r4, #8]
   15b00:	beq	15b40 <flatcc_emitter_copy_buffer@@Base+0x7c>
   15b04:	ldr	r5, [r4, #12]
   15b08:	mov	r0, r3
   15b0c:	rsb	r5, r5, #2944	; 0xb80
   15b10:	mov	r2, r5
   15b14:	bl	11ffc <memcpy@plt>
   15b18:	ldr	r2, [r4]
   15b1c:	mov	r6, #2944	; 0xb80
   15b20:	add	r3, r0, r5
   15b24:	ldr	r5, [r2, #2944]	; 0xb80
   15b28:	ldr	r2, [r4, #4]
   15b2c:	cmp	r5, r2
   15b30:	bne	15b54 <flatcc_emitter_copy_buffer@@Base+0x90>
   15b34:	ldr	r2, [r4, #20]
   15b38:	mov	r1, r5
   15b3c:	rsb	r2, r2, #2944	; 0xb80
   15b40:	mov	r0, r3
   15b44:	bl	11ffc <memcpy@plt>
   15b48:	mov	r3, r0
   15b4c:	mov	r0, r3
   15b50:	pop	{r4, r5, r6, pc}
   15b54:	mov	r1, r5
   15b58:	mov	r0, r3
   15b5c:	mov	r2, r6
   15b60:	bl	11ffc <memcpy@plt>
   15b64:	ldr	r5, [r5, #2944]	; 0xb80
   15b68:	add	r3, r0, #2944	; 0xb80
   15b6c:	b	15b28 <flatcc_emitter_copy_buffer@@Base+0x64>
   15b70:	subs	r2, r1, #1
   15b74:	bxeq	lr
   15b78:	bcc	15d50 <flatcc_emitter_copy_buffer@@Base+0x28c>
   15b7c:	cmp	r0, r1
   15b80:	bls	15d34 <flatcc_emitter_copy_buffer@@Base+0x270>
   15b84:	tst	r1, r2
   15b88:	beq	15d40 <flatcc_emitter_copy_buffer@@Base+0x27c>
   15b8c:	clz	r3, r0
   15b90:	clz	r2, r1
   15b94:	sub	r3, r2, r3
   15b98:	rsbs	r3, r3, #31
   15b9c:	addne	r3, r3, r3, lsl #1
   15ba0:	mov	r2, #0
   15ba4:	addne	pc, pc, r3, lsl #2
   15ba8:	nop			; (mov r0, r0)
   15bac:	cmp	r0, r1, lsl #31
   15bb0:	adc	r2, r2, r2
   15bb4:	subcs	r0, r0, r1, lsl #31
   15bb8:	cmp	r0, r1, lsl #30
   15bbc:	adc	r2, r2, r2
   15bc0:	subcs	r0, r0, r1, lsl #30
   15bc4:	cmp	r0, r1, lsl #29
   15bc8:	adc	r2, r2, r2
   15bcc:	subcs	r0, r0, r1, lsl #29
   15bd0:	cmp	r0, r1, lsl #28
   15bd4:	adc	r2, r2, r2
   15bd8:	subcs	r0, r0, r1, lsl #28
   15bdc:	cmp	r0, r1, lsl #27
   15be0:	adc	r2, r2, r2
   15be4:	subcs	r0, r0, r1, lsl #27
   15be8:	cmp	r0, r1, lsl #26
   15bec:	adc	r2, r2, r2
   15bf0:	subcs	r0, r0, r1, lsl #26
   15bf4:	cmp	r0, r1, lsl #25
   15bf8:	adc	r2, r2, r2
   15bfc:	subcs	r0, r0, r1, lsl #25
   15c00:	cmp	r0, r1, lsl #24
   15c04:	adc	r2, r2, r2
   15c08:	subcs	r0, r0, r1, lsl #24
   15c0c:	cmp	r0, r1, lsl #23
   15c10:	adc	r2, r2, r2
   15c14:	subcs	r0, r0, r1, lsl #23
   15c18:	cmp	r0, r1, lsl #22
   15c1c:	adc	r2, r2, r2
   15c20:	subcs	r0, r0, r1, lsl #22
   15c24:	cmp	r0, r1, lsl #21
   15c28:	adc	r2, r2, r2
   15c2c:	subcs	r0, r0, r1, lsl #21
   15c30:	cmp	r0, r1, lsl #20
   15c34:	adc	r2, r2, r2
   15c38:	subcs	r0, r0, r1, lsl #20
   15c3c:	cmp	r0, r1, lsl #19
   15c40:	adc	r2, r2, r2
   15c44:	subcs	r0, r0, r1, lsl #19
   15c48:	cmp	r0, r1, lsl #18
   15c4c:	adc	r2, r2, r2
   15c50:	subcs	r0, r0, r1, lsl #18
   15c54:	cmp	r0, r1, lsl #17
   15c58:	adc	r2, r2, r2
   15c5c:	subcs	r0, r0, r1, lsl #17
   15c60:	cmp	r0, r1, lsl #16
   15c64:	adc	r2, r2, r2
   15c68:	subcs	r0, r0, r1, lsl #16
   15c6c:	cmp	r0, r1, lsl #15
   15c70:	adc	r2, r2, r2
   15c74:	subcs	r0, r0, r1, lsl #15
   15c78:	cmp	r0, r1, lsl #14
   15c7c:	adc	r2, r2, r2
   15c80:	subcs	r0, r0, r1, lsl #14
   15c84:	cmp	r0, r1, lsl #13
   15c88:	adc	r2, r2, r2
   15c8c:	subcs	r0, r0, r1, lsl #13
   15c90:	cmp	r0, r1, lsl #12
   15c94:	adc	r2, r2, r2
   15c98:	subcs	r0, r0, r1, lsl #12
   15c9c:	cmp	r0, r1, lsl #11
   15ca0:	adc	r2, r2, r2
   15ca4:	subcs	r0, r0, r1, lsl #11
   15ca8:	cmp	r0, r1, lsl #10
   15cac:	adc	r2, r2, r2
   15cb0:	subcs	r0, r0, r1, lsl #10
   15cb4:	cmp	r0, r1, lsl #9
   15cb8:	adc	r2, r2, r2
   15cbc:	subcs	r0, r0, r1, lsl #9
   15cc0:	cmp	r0, r1, lsl #8
   15cc4:	adc	r2, r2, r2
   15cc8:	subcs	r0, r0, r1, lsl #8
   15ccc:	cmp	r0, r1, lsl #7
   15cd0:	adc	r2, r2, r2
   15cd4:	subcs	r0, r0, r1, lsl #7
   15cd8:	cmp	r0, r1, lsl #6
   15cdc:	adc	r2, r2, r2
   15ce0:	subcs	r0, r0, r1, lsl #6
   15ce4:	cmp	r0, r1, lsl #5
   15ce8:	adc	r2, r2, r2
   15cec:	subcs	r0, r0, r1, lsl #5
   15cf0:	cmp	r0, r1, lsl #4
   15cf4:	adc	r2, r2, r2
   15cf8:	subcs	r0, r0, r1, lsl #4
   15cfc:	cmp	r0, r1, lsl #3
   15d00:	adc	r2, r2, r2
   15d04:	subcs	r0, r0, r1, lsl #3
   15d08:	cmp	r0, r1, lsl #2
   15d0c:	adc	r2, r2, r2
   15d10:	subcs	r0, r0, r1, lsl #2
   15d14:	cmp	r0, r1, lsl #1
   15d18:	adc	r2, r2, r2
   15d1c:	subcs	r0, r0, r1, lsl #1
   15d20:	cmp	r0, r1
   15d24:	adc	r2, r2, r2
   15d28:	subcs	r0, r0, r1
   15d2c:	mov	r0, r2
   15d30:	bx	lr
   15d34:	moveq	r0, #1
   15d38:	movne	r0, #0
   15d3c:	bx	lr
   15d40:	clz	r2, r1
   15d44:	rsb	r2, r2, #31
   15d48:	lsr	r0, r0, r2
   15d4c:	bx	lr
   15d50:	cmp	r0, #0
   15d54:	mvnne	r0, #0
   15d58:	b	15d7c <flatcc_emitter_copy_buffer@@Base+0x2b8>
   15d5c:	cmp	r1, #0
   15d60:	beq	15d50 <flatcc_emitter_copy_buffer@@Base+0x28c>
   15d64:	push	{r0, r1, lr}
   15d68:	bl	15b70 <flatcc_emitter_copy_buffer@@Base+0xac>
   15d6c:	pop	{r1, r2, lr}
   15d70:	mul	r3, r2, r0
   15d74:	sub	r1, r1, r3
   15d78:	bx	lr
   15d7c:	push	{r1, lr}
   15d80:	mov	r0, #8
   15d84:	bl	11fd8 <raise@plt>
   15d88:	pop	{r1, pc}

00015d8c <__libc_csu_init@@Base>:
   15d8c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15d90:	mov	r7, r0
   15d94:	ldr	r6, [pc, #72]	; 15de4 <__libc_csu_init@@Base+0x58>
   15d98:	ldr	r5, [pc, #72]	; 15de8 <__libc_csu_init@@Base+0x5c>
   15d9c:	add	r6, pc, r6
   15da0:	add	r5, pc, r5
   15da4:	sub	r6, r6, r5
   15da8:	mov	r8, r1
   15dac:	mov	r9, r2
   15db0:	bl	11fb8 <raise@plt-0x20>
   15db4:	asrs	r6, r6, #2
   15db8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15dbc:	mov	r4, #0
   15dc0:	add	r4, r4, #1
   15dc4:	ldr	r3, [r5], #4
   15dc8:	mov	r2, r9
   15dcc:	mov	r1, r8
   15dd0:	mov	r0, r7
   15dd4:	blx	r3
   15dd8:	cmp	r6, r4
   15ddc:	bne	15dc0 <__libc_csu_init@@Base+0x34>
   15de0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15de4:	andeq	r1, r1, ip, ror #2
   15de8:	andeq	r1, r1, r4, ror #2

00015dec <__libc_csu_fini@@Base>:
   15dec:	bx	lr

Disassembly of section .fini:

00015df0 <.fini>:
   15df0:	push	{r3, lr}
   15df4:	pop	{r3, pc}
