
../repos/coreutils/src/numfmt:     file format elf32-littlearm


Disassembly of section .init:

00011040 <.init>:
   11040:	push	{r3, lr}
   11044:	bl	1136c <__assert_fail@plt+0x48>
   11048:	pop	{r3, pc}

Disassembly of section .plt:

0001104c <calloc@plt-0x14>:
   1104c:	push	{lr}		; (str lr, [sp, #-4]!)
   11050:	ldr	lr, [pc, #4]	; 1105c <calloc@plt-0x4>
   11054:	add	lr, pc, lr
   11058:	ldr	pc, [lr, #8]!
   1105c:	andeq	fp, r1, r4, lsr #31

00011060 <calloc@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #110592	; 0x1b000
   11068:	ldr	pc, [ip, #4004]!	; 0xfa4

0001106c <fputs_unlocked@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #110592	; 0x1b000
   11074:	ldr	pc, [ip, #3996]!	; 0xf9c

00011078 <raise@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #110592	; 0x1b000
   11080:	ldr	pc, [ip, #3988]!	; 0xf94

00011084 <__strncat_chk@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #110592	; 0x1b000
   1108c:	ldr	pc, [ip, #3980]!	; 0xf8c

00011090 <strcmp@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #110592	; 0x1b000
   11098:	ldr	pc, [ip, #3972]!	; 0xf84

0001109c <strtol@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #110592	; 0x1b000
   110a4:	ldr	pc, [ip, #3964]!	; 0xf7c

000110a8 <fflush@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #110592	; 0x1b000
   110b0:	ldr	pc, [ip, #3956]!	; 0xf74

000110b4 <wcwidth@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #110592	; 0x1b000
   110bc:	ldr	pc, [ip, #3948]!	; 0xf6c

000110c0 <memmove@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #110592	; 0x1b000
   110c8:	ldr	pc, [ip, #3940]!	; 0xf64

000110cc <free@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #110592	; 0x1b000
   110d4:	ldr	pc, [ip, #3932]!	; 0xf5c

000110d8 <_exit@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #110592	; 0x1b000
   110e0:	ldr	pc, [ip, #3924]!	; 0xf54

000110e4 <memcpy@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #110592	; 0x1b000
   110ec:	ldr	pc, [ip, #3916]!	; 0xf4c

000110f0 <__strtoull_internal@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #110592	; 0x1b000
   110f8:	ldr	pc, [ip, #3908]!	; 0xf44

000110fc <mbsinit@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #110592	; 0x1b000
   11104:	ldr	pc, [ip, #3900]!	; 0xf3c

00011108 <dcgettext@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #110592	; 0x1b000
   11110:	ldr	pc, [ip, #3892]!	; 0xf34

00011114 <realloc@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #110592	; 0x1b000
   1111c:	ldr	pc, [ip, #3884]!	; 0xf2c

00011120 <textdomain@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #110592	; 0x1b000
   11128:	ldr	pc, [ip, #3876]!	; 0xf24

0001112c <iswprint@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #110592	; 0x1b000
   11134:	ldr	pc, [ip, #3868]!	; 0xf1c

00011138 <fwrite@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #110592	; 0x1b000
   11140:	ldr	pc, [ip, #3860]!	; 0xf14

00011144 <lseek64@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #110592	; 0x1b000
   1114c:	ldr	pc, [ip, #3852]!	; 0xf0c

00011150 <__ctype_get_mb_cur_max@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #110592	; 0x1b000
   11158:	ldr	pc, [ip, #3844]!	; 0xf04

0001115c <strcpy@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #110592	; 0x1b000
   11164:	ldr	pc, [ip, #3836]!	; 0xefc

00011168 <__fpending@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #110592	; 0x1b000
   11170:	ldr	pc, [ip, #3828]!	; 0xef4

00011174 <mbrtowc@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #110592	; 0x1b000
   1117c:	ldr	pc, [ip, #3820]!	; 0xeec

00011180 <wcstombs@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #110592	; 0x1b000
   11188:	ldr	pc, [ip, #3812]!	; 0xee4

0001118c <error@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #110592	; 0x1b000
   11194:	ldr	pc, [ip, #3804]!	; 0xedc

00011198 <malloc@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #110592	; 0x1b000
   111a0:	ldr	pc, [ip, #3796]!	; 0xed4

000111a4 <__libc_start_main@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #110592	; 0x1b000
   111ac:	ldr	pc, [ip, #3788]!	; 0xecc

000111b0 <__freading@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #110592	; 0x1b000
   111b8:	ldr	pc, [ip, #3780]!	; 0xec4

000111bc <__gmon_start__@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #110592	; 0x1b000
   111c4:	ldr	pc, [ip, #3772]!	; 0xebc

000111c8 <getopt_long@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #110592	; 0x1b000
   111d0:	ldr	pc, [ip, #3764]!	; 0xeb4

000111d4 <__ctype_b_loc@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #110592	; 0x1b000
   111dc:	ldr	pc, [ip, #3756]!	; 0xeac

000111e0 <exit@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #110592	; 0x1b000
   111e8:	ldr	pc, [ip, #3748]!	; 0xea4

000111ec <bcmp@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #110592	; 0x1b000
   111f4:	ldr	pc, [ip, #3740]!	; 0xe9c

000111f8 <strlen@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #110592	; 0x1b000
   11200:	ldr	pc, [ip, #3732]!	; 0xe94

00011204 <strchr@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #110592	; 0x1b000
   1120c:	ldr	pc, [ip, #3724]!	; 0xe8c

00011210 <__errno_location@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #110592	; 0x1b000
   11218:	ldr	pc, [ip, #3716]!	; 0xe84

0001121c <__cxa_atexit@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #110592	; 0x1b000
   11224:	ldr	pc, [ip, #3708]!	; 0xe7c

00011228 <memset@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #110592	; 0x1b000
   11230:	ldr	pc, [ip, #3700]!	; 0xe74

00011234 <__printf_chk@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #110592	; 0x1b000
   1123c:	ldr	pc, [ip, #3692]!	; 0xe6c

00011240 <fileno@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #110592	; 0x1b000
   11248:	ldr	pc, [ip, #3684]!	; 0xe64

0001124c <__fprintf_chk@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #110592	; 0x1b000
   11254:	ldr	pc, [ip, #3676]!	; 0xe5c

00011258 <memchr@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #110592	; 0x1b000
   11260:	ldr	pc, [ip, #3668]!	; 0xe54

00011264 <fclose@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #110592	; 0x1b000
   1126c:	ldr	pc, [ip, #3660]!	; 0xe4c

00011270 <fseeko64@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #110592	; 0x1b000
   11278:	ldr	pc, [ip, #3652]!	; 0xe44

0001127c <__overflow@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #110592	; 0x1b000
   11284:	ldr	pc, [ip, #3644]!	; 0xe3c

00011288 <setlocale@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #110592	; 0x1b000
   11290:	ldr	pc, [ip, #3636]!	; 0xe34

00011294 <wcswidth@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #110592	; 0x1b000
   1129c:	ldr	pc, [ip, #3628]!	; 0xe2c

000112a0 <strrchr@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #110592	; 0x1b000
   112a8:	ldr	pc, [ip, #3620]!	; 0xe24

000112ac <nl_langinfo@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #110592	; 0x1b000
   112b4:	ldr	pc, [ip, #3612]!	; 0xe1c

000112b8 <mbstowcs@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #110592	; 0x1b000
   112c0:	ldr	pc, [ip, #3604]!	; 0xe14

000112c4 <qsort@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #110592	; 0x1b000
   112cc:	ldr	pc, [ip, #3596]!	; 0xe0c

000112d0 <bindtextdomain@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #110592	; 0x1b000
   112d8:	ldr	pc, [ip, #3588]!	; 0xe04

000112dc <getdelim@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #110592	; 0x1b000
   112e4:	ldr	pc, [ip, #3580]!	; 0xdfc

000112e8 <strncmp@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #110592	; 0x1b000
   112f0:	ldr	pc, [ip, #3572]!	; 0xdf4

000112f4 <abort@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #110592	; 0x1b000
   112fc:	ldr	pc, [ip, #3564]!	; 0xdec

00011300 <__snprintf_chk@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #110592	; 0x1b000
   11308:	ldr	pc, [ip, #3556]!	; 0xde4

0001130c <strspn@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #110592	; 0x1b000
   11314:	ldr	pc, [ip, #3548]!	; 0xddc

00011318 <__mempcpy_chk@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #110592	; 0x1b000
   11320:	ldr	pc, [ip, #3540]!	; 0xdd4

00011324 <__assert_fail@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #110592	; 0x1b000
   1132c:	ldr	pc, [ip, #3532]!	; 0xdcc

Disassembly of section .text:

00011330 <.text>:
   11330:	mov	fp, #0
   11334:	mov	lr, #0
   11338:	pop	{r1}		; (ldr r1, [sp], #4)
   1133c:	mov	r2, sp
   11340:	push	{r2}		; (str r2, [sp, #-4]!)
   11344:	push	{r0}		; (str r0, [sp, #-4]!)
   11348:	ldr	ip, [pc, #16]	; 11360 <__assert_fail@plt+0x3c>
   1134c:	push	{ip}		; (str ip, [sp, #-4]!)
   11350:	ldr	r0, [pc, #12]	; 11364 <__assert_fail@plt+0x40>
   11354:	ldr	r3, [pc, #12]	; 11368 <__assert_fail@plt+0x44>
   11358:	bl	111a4 <__libc_start_main@plt>
   1135c:	bl	112f4 <abort@plt>
   11360:	andeq	sl, r1, r0, asr r1
   11364:	andeq	r1, r1, ip, ror #18
   11368:	strdeq	sl, [r1], -r0
   1136c:	ldr	r3, [pc, #20]	; 11388 <__assert_fail@plt+0x64>
   11370:	ldr	r2, [pc, #20]	; 1138c <__assert_fail@plt+0x68>
   11374:	add	r3, pc, r3
   11378:	ldr	r2, [r3, r2]
   1137c:	cmp	r2, #0
   11380:	bxeq	lr
   11384:	b	111bc <__gmon_start__@plt>
   11388:	andeq	fp, r1, r4, lsl #25
   1138c:	strdeq	r0, [r0], -ip
   11390:	ldr	r0, [pc, #24]	; 113b0 <__assert_fail@plt+0x8c>
   11394:	ldr	r3, [pc, #24]	; 113b4 <__assert_fail@plt+0x90>
   11398:	cmp	r3, r0
   1139c:	bxeq	lr
   113a0:	ldr	r3, [pc, #16]	; 113b8 <__assert_fail@plt+0x94>
   113a4:	cmp	r3, #0
   113a8:	bxeq	lr
   113ac:	bx	r3
   113b0:	andeq	sp, r2, r0, ror r1
   113b4:	andeq	sp, r2, r0, ror r1
   113b8:	andeq	r0, r0, r0
   113bc:	ldr	r0, [pc, #36]	; 113e8 <__assert_fail@plt+0xc4>
   113c0:	ldr	r1, [pc, #36]	; 113ec <__assert_fail@plt+0xc8>
   113c4:	sub	r1, r1, r0
   113c8:	asr	r1, r1, #2
   113cc:	add	r1, r1, r1, lsr #31
   113d0:	asrs	r1, r1, #1
   113d4:	bxeq	lr
   113d8:	ldr	r3, [pc, #16]	; 113f0 <__assert_fail@plt+0xcc>
   113dc:	cmp	r3, #0
   113e0:	bxeq	lr
   113e4:	bx	r3
   113e8:	andeq	sp, r2, r0, ror r1
   113ec:	andeq	sp, r2, r0, ror r1
   113f0:	andeq	r0, r0, r0
   113f4:	push	{r4, lr}
   113f8:	ldr	r4, [pc, #24]	; 11418 <__assert_fail@plt+0xf4>
   113fc:	ldrb	r3, [r4]
   11400:	cmp	r3, #0
   11404:	popne	{r4, pc}
   11408:	bl	11390 <__assert_fail@plt+0x6c>
   1140c:	mov	r3, #1
   11410:	strb	r3, [r4]
   11414:	pop	{r4, pc}
   11418:	muleq	r2, r4, r1
   1141c:	b	113bc <__assert_fail@plt+0x98>
   11420:	push	{fp, lr}
   11424:	mov	fp, sp
   11428:	sub	sp, sp, #88	; 0x58
   1142c:	mov	r4, r0
   11430:	cmp	r0, #0
   11434:	bne	11928 <__assert_fail@plt+0x604>
   11438:	movw	r1, #41379	; 0xa1a3
   1143c:	mov	r0, #0
   11440:	mov	r2, #5
   11444:	movt	r1, #1
   11448:	bl	11108 <dcgettext@plt>
   1144c:	movw	r5, #53756	; 0xd1fc
   11450:	mov	r1, r0
   11454:	mov	r0, #1
   11458:	movt	r5, #2
   1145c:	ldr	r2, [r5]
   11460:	bl	11234 <__printf_chk@plt>
   11464:	movw	r1, #41414	; 0xa1c6
   11468:	mov	r0, #0
   1146c:	mov	r2, #5
   11470:	movt	r1, #1
   11474:	bl	11108 <dcgettext@plt>
   11478:	movw	r7, #53644	; 0xd18c
   1147c:	movt	r7, #2
   11480:	ldr	r1, [r7]
   11484:	bl	1106c <fputs_unlocked@plt>
   11488:	movw	r1, #46016	; 0xb3c0
   1148c:	mov	r0, #0
   11490:	mov	r2, #5
   11494:	movt	r1, #1
   11498:	bl	11108 <dcgettext@plt>
   1149c:	ldr	r1, [r7]
   114a0:	bl	1106c <fputs_unlocked@plt>
   114a4:	movw	r1, #41493	; 0xa215
   114a8:	mov	r0, #0
   114ac:	mov	r2, #5
   114b0:	movt	r1, #1
   114b4:	bl	11108 <dcgettext@plt>
   114b8:	ldr	r1, [r7]
   114bc:	bl	1106c <fputs_unlocked@plt>
   114c0:	movw	r1, #41552	; 0xa250
   114c4:	mov	r0, #0
   114c8:	mov	r2, #5
   114cc:	movt	r1, #1
   114d0:	bl	11108 <dcgettext@plt>
   114d4:	ldr	r1, [r7]
   114d8:	bl	1106c <fputs_unlocked@plt>
   114dc:	movw	r1, #41624	; 0xa298
   114e0:	mov	r0, #0
   114e4:	mov	r2, #5
   114e8:	movt	r1, #1
   114ec:	bl	11108 <dcgettext@plt>
   114f0:	ldr	r1, [r7]
   114f4:	bl	1106c <fputs_unlocked@plt>
   114f8:	movw	r1, #41745	; 0xa311
   114fc:	mov	r0, #0
   11500:	mov	r2, #5
   11504:	movt	r1, #1
   11508:	bl	11108 <dcgettext@plt>
   1150c:	ldr	r1, [r7]
   11510:	bl	1106c <fputs_unlocked@plt>
   11514:	movw	r1, #41863	; 0xa387
   11518:	mov	r0, #0
   1151c:	mov	r2, #5
   11520:	movt	r1, #1
   11524:	bl	11108 <dcgettext@plt>
   11528:	ldr	r1, [r7]
   1152c:	bl	1106c <fputs_unlocked@plt>
   11530:	movw	r1, #41981	; 0xa3fd
   11534:	mov	r0, #0
   11538:	mov	r2, #5
   1153c:	movt	r1, #1
   11540:	bl	11108 <dcgettext@plt>
   11544:	ldr	r1, [r7]
   11548:	bl	1106c <fputs_unlocked@plt>
   1154c:	movw	r1, #42060	; 0xa44c
   11550:	mov	r0, #0
   11554:	mov	r2, #5
   11558:	movt	r1, #1
   1155c:	bl	11108 <dcgettext@plt>
   11560:	ldr	r1, [r7]
   11564:	bl	1106c <fputs_unlocked@plt>
   11568:	movw	r1, #42216	; 0xa4e8
   1156c:	mov	r0, #0
   11570:	mov	r2, #5
   11574:	movt	r1, #1
   11578:	bl	11108 <dcgettext@plt>
   1157c:	ldr	r1, [r7]
   11580:	bl	1106c <fputs_unlocked@plt>
   11584:	movw	r1, #42351	; 0xa56f
   11588:	mov	r0, #0
   1158c:	mov	r2, #5
   11590:	movt	r1, #1
   11594:	bl	11108 <dcgettext@plt>
   11598:	ldr	r1, [r7]
   1159c:	bl	1106c <fputs_unlocked@plt>
   115a0:	movw	r1, #42483	; 0xa5f3
   115a4:	mov	r0, #0
   115a8:	mov	r2, #5
   115ac:	movt	r1, #1
   115b0:	bl	11108 <dcgettext@plt>
   115b4:	ldr	r1, [r7]
   115b8:	bl	1106c <fputs_unlocked@plt>
   115bc:	movw	r1, #42807	; 0xa737
   115c0:	mov	r0, #0
   115c4:	mov	r2, #5
   115c8:	movt	r1, #1
   115cc:	bl	11108 <dcgettext@plt>
   115d0:	ldr	r1, [r7]
   115d4:	bl	1106c <fputs_unlocked@plt>
   115d8:	movw	r1, #42962	; 0xa7d2
   115dc:	mov	r0, #0
   115e0:	mov	r2, #5
   115e4:	movt	r1, #1
   115e8:	bl	11108 <dcgettext@plt>
   115ec:	ldr	r1, [r7]
   115f0:	bl	1106c <fputs_unlocked@plt>
   115f4:	movw	r1, #43085	; 0xa84d
   115f8:	mov	r0, #0
   115fc:	mov	r2, #5
   11600:	movt	r1, #1
   11604:	bl	11108 <dcgettext@plt>
   11608:	ldr	r1, [r7]
   1160c:	bl	1106c <fputs_unlocked@plt>
   11610:	movw	r1, #43160	; 0xa898
   11614:	mov	r0, #0
   11618:	mov	r2, #5
   1161c:	movt	r1, #1
   11620:	bl	11108 <dcgettext@plt>
   11624:	ldr	r1, [r7]
   11628:	bl	1106c <fputs_unlocked@plt>
   1162c:	movw	r1, #43232	; 0xa8e0
   11630:	mov	r0, #0
   11634:	mov	r2, #5
   11638:	movt	r1, #1
   1163c:	bl	11108 <dcgettext@plt>
   11640:	ldr	r1, [r7]
   11644:	bl	1106c <fputs_unlocked@plt>
   11648:	movw	r1, #43295	; 0xa91f
   1164c:	mov	r0, #0
   11650:	mov	r2, #5
   11654:	movt	r1, #1
   11658:	bl	11108 <dcgettext@plt>
   1165c:	ldr	r1, [r7]
   11660:	bl	1106c <fputs_unlocked@plt>
   11664:	movw	r1, #43340	; 0xa94c
   11668:	mov	r0, #0
   1166c:	mov	r2, #5
   11670:	movt	r1, #1
   11674:	bl	11108 <dcgettext@plt>
   11678:	ldr	r1, [r7]
   1167c:	bl	1106c <fputs_unlocked@plt>
   11680:	movw	r1, #43394	; 0xa982
   11684:	mov	r0, #0
   11688:	mov	r2, #5
   1168c:	movt	r1, #1
   11690:	bl	11108 <dcgettext@plt>
   11694:	ldr	r1, [r7]
   11698:	bl	1106c <fputs_unlocked@plt>
   1169c:	movw	r1, #43410	; 0xa992
   116a0:	mov	r0, #0
   116a4:	mov	r2, #5
   116a8:	movt	r1, #1
   116ac:	bl	11108 <dcgettext@plt>
   116b0:	ldr	r1, [r7]
   116b4:	bl	1106c <fputs_unlocked@plt>
   116b8:	movw	r1, #43480	; 0xa9d8
   116bc:	mov	r0, #0
   116c0:	mov	r2, #5
   116c4:	movt	r1, #1
   116c8:	bl	11108 <dcgettext@plt>
   116cc:	ldr	r1, [r7]
   116d0:	bl	1106c <fputs_unlocked@plt>
   116d4:	movw	r1, #43648	; 0xaa80
   116d8:	mov	r0, #0
   116dc:	mov	r2, #5
   116e0:	movt	r1, #1
   116e4:	bl	11108 <dcgettext@plt>
   116e8:	ldr	r1, [r7]
   116ec:	bl	1106c <fputs_unlocked@plt>
   116f0:	movw	r1, #43774	; 0xaafe
   116f4:	mov	r0, #0
   116f8:	mov	r2, #5
   116fc:	movt	r1, #1
   11700:	bl	11108 <dcgettext@plt>
   11704:	ldr	r1, [r7]
   11708:	bl	1106c <fputs_unlocked@plt>
   1170c:	movw	r1, #43900	; 0xab7c
   11710:	mov	r0, #0
   11714:	mov	r2, #5
   11718:	movt	r1, #1
   1171c:	bl	11108 <dcgettext@plt>
   11720:	ldr	r1, [r7]
   11724:	bl	1106c <fputs_unlocked@plt>
   11728:	movw	r1, #44025	; 0xabf9
   1172c:	mov	r0, #0
   11730:	mov	r2, #5
   11734:	movt	r1, #1
   11738:	bl	11108 <dcgettext@plt>
   1173c:	ldr	r1, [r7]
   11740:	bl	1106c <fputs_unlocked@plt>
   11744:	movw	r1, #44300	; 0xad0c
   11748:	mov	r0, #0
   1174c:	mov	r2, #5
   11750:	movt	r1, #1
   11754:	bl	11108 <dcgettext@plt>
   11758:	ldr	r1, [r7]
   1175c:	bl	1106c <fputs_unlocked@plt>
   11760:	movw	r1, #44672	; 0xae80
   11764:	mov	r0, #0
   11768:	mov	r2, #5
   1176c:	movt	r1, #1
   11770:	bl	11108 <dcgettext@plt>
   11774:	ldr	r2, [r5]
   11778:	mov	r1, r0
   1177c:	mov	r0, #1
   11780:	bl	11234 <__printf_chk@plt>
   11784:	movw	r1, #45083	; 0xb01b
   11788:	mov	r0, #0
   1178c:	mov	r2, #5
   11790:	movt	r1, #1
   11794:	bl	11108 <dcgettext@plt>
   11798:	ldr	r2, [r5]
   1179c:	mov	r1, r0
   117a0:	mov	r0, #1
   117a4:	mov	r3, r2
   117a8:	str	r2, [sp]
   117ac:	str	r2, [sp, #4]
   117b0:	str	r2, [sp, #8]
   117b4:	str	r2, [sp, #12]
   117b8:	str	r2, [sp, #16]
   117bc:	str	r2, [sp, #20]
   117c0:	str	r2, [sp, #24]
   117c4:	bl	11234 <__printf_chk@plt>
   117c8:	movw	r0, #48616	; 0xbde8
   117cc:	mov	r2, #48	; 0x30
   117d0:	add	r6, sp, #32
   117d4:	movw	r5, #45530	; 0xb1da
   117d8:	movt	r0, #1
   117dc:	movt	r5, #1
   117e0:	add	r1, r0, #32
   117e4:	add	r3, r0, #16
   117e8:	vld1.64	{d18-d19}, [r0], r2
   117ec:	vld1.64	{d16-d17}, [r1]
   117f0:	vld1.64	{d20-d21}, [r3]
   117f4:	vldr	d22, [r0]
   117f8:	add	r1, r6, #32
   117fc:	add	r0, r6, #16
   11800:	vst1.64	{d16-d17}, [r1]
   11804:	movw	r1, #46091	; 0xb40b
   11808:	vst1.64	{d20-d21}, [r0]
   1180c:	mov	r0, r6
   11810:	movt	r1, #1
   11814:	vst1.64	{d18-d19}, [r0], r2
   11818:	vstr	d22, [r0]
   1181c:	mov	r0, r5
   11820:	bl	11090 <strcmp@plt>
   11824:	cmp	r0, #0
   11828:	ldrne	r1, [r6, #8]!
   1182c:	cmpne	r1, #0
   11830:	bne	1181c <__assert_fail@plt+0x4f8>
   11834:	movw	r1, #46186	; 0xb46a
   11838:	ldr	r6, [r6, #4]
   1183c:	mov	r0, #0
   11840:	mov	r2, #5
   11844:	movt	r1, #1
   11848:	bl	11108 <dcgettext@plt>
   1184c:	movw	r2, #45712	; 0xb290
   11850:	movw	r3, #46209	; 0xb481
   11854:	mov	r1, r0
   11858:	mov	r0, #1
   1185c:	movt	r2, #1
   11860:	movt	r3, #1
   11864:	bl	11234 <__printf_chk@plt>
   11868:	cmp	r6, #0
   1186c:	mov	r0, #5
   11870:	mov	r1, #0
   11874:	moveq	r6, r5
   11878:	bl	11288 <setlocale@plt>
   1187c:	cmp	r0, #0
   11880:	beq	118b8 <__assert_fail@plt+0x594>
   11884:	movw	r1, #46249	; 0xb4a9
   11888:	mov	r2, #3
   1188c:	movt	r1, #1
   11890:	bl	112e8 <strncmp@plt>
   11894:	cmp	r0, #0
   11898:	beq	118b8 <__assert_fail@plt+0x594>
   1189c:	movw	r1, #46253	; 0xb4ad
   118a0:	mov	r0, #0
   118a4:	mov	r2, #5
   118a8:	movt	r1, #1
   118ac:	bl	11108 <dcgettext@plt>
   118b0:	ldr	r1, [r7]
   118b4:	bl	1106c <fputs_unlocked@plt>
   118b8:	movw	r1, #46324	; 0xb4f4
   118bc:	mov	r0, #0
   118c0:	mov	r2, #5
   118c4:	movt	r1, #1
   118c8:	bl	11108 <dcgettext@plt>
   118cc:	movw	r2, #46209	; 0xb481
   118d0:	mov	r1, r0
   118d4:	mov	r0, #1
   118d8:	mov	r3, r5
   118dc:	movt	r2, #1
   118e0:	bl	11234 <__printf_chk@plt>
   118e4:	movw	r1, #46351	; 0xb50f
   118e8:	mov	r0, #0
   118ec:	mov	r2, #5
   118f0:	movt	r1, #1
   118f4:	bl	11108 <dcgettext@plt>
   118f8:	mov	r1, r0
   118fc:	movw	r0, #46119	; 0xb427
   11900:	movw	r3, #46401	; 0xb541
   11904:	cmp	r6, r5
   11908:	mov	r2, r6
   1190c:	movt	r0, #1
   11910:	movt	r3, #1
   11914:	moveq	r3, r0
   11918:	mov	r0, #1
   1191c:	bl	11234 <__printf_chk@plt>
   11920:	mov	r0, r4
   11924:	bl	111e0 <exit@plt>
   11928:	movw	r0, #53632	; 0xd180
   1192c:	movw	r1, #41340	; 0xa17c
   11930:	mov	r2, #5
   11934:	movt	r0, #2
   11938:	movt	r1, #1
   1193c:	ldr	r5, [r0]
   11940:	mov	r0, #0
   11944:	bl	11108 <dcgettext@plt>
   11948:	mov	r2, r0
   1194c:	movw	r0, #53756	; 0xd1fc
   11950:	mov	r1, #1
   11954:	movt	r0, #2
   11958:	ldr	r3, [r0]
   1195c:	mov	r0, r5
   11960:	bl	1124c <__fprintf_chk@plt>
   11964:	mov	r0, r4
   11968:	bl	111e0 <exit@plt>
   1196c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11970:	add	fp, sp, #28
   11974:	sub	sp, sp, #44	; 0x2c
   11978:	mov	r8, r0
   1197c:	ldr	r0, [r1]
   11980:	str	r1, [sp, #28]
   11984:	bl	154fc <__assert_fail@plt+0x41d8>
   11988:	movw	r1, #46401	; 0xb541
   1198c:	mov	r0, #6
   11990:	movt	r1, #1
   11994:	bl	11288 <setlocale@plt>
   11998:	movw	r6, #45716	; 0xb294
   1199c:	movw	r1, #45537	; 0xb1e1
   119a0:	str	r0, [sp, #20]
   119a4:	movt	r6, #1
   119a8:	movt	r1, #1
   119ac:	mov	r0, r6
   119b0:	bl	112d0 <bindtextdomain@plt>
   119b4:	mov	r0, r6
   119b8:	bl	11120 <textdomain@plt>
   119bc:	mov	r0, #65536	; 0x10000
   119c0:	bl	112ac <nl_langinfo@plt>
   119c4:	movw	r1, #53656	; 0xd198
   119c8:	cmp	r0, #0
   119cc:	movt	r1, #2
   119d0:	str	r0, [r1]
   119d4:	beq	119e4 <__assert_fail@plt+0x6c0>
   119d8:	ldrb	r2, [r0]
   119dc:	cmp	r2, #0
   119e0:	bne	119f0 <__assert_fail@plt+0x6cc>
   119e4:	movw	r0, #45561	; 0xb1f9
   119e8:	movt	r0, #1
   119ec:	str	r0, [r1]
   119f0:	bl	111f8 <strlen@plt>
   119f4:	movw	r1, #53660	; 0xd19c
   119f8:	movt	r1, #2
   119fc:	str	r0, [r1]
   11a00:	movw	r0, #20324	; 0x4f64
   11a04:	movt	r0, #1
   11a08:	bl	1a154 <__assert_fail@plt+0x8e30>
   11a0c:	movw	r4, #45563	; 0xb1fb
   11a10:	movw	sl, #53648	; 0xd190
   11a14:	movw	r5, #53668	; 0xd1a4
   11a18:	movw	r9, #53672	; 0xd1a8
   11a1c:	mov	r7, #0
   11a20:	str	r8, [sp, #24]
   11a24:	movt	r4, #1
   11a28:	movt	sl, #2
   11a2c:	movt	r5, #2
   11a30:	movt	r9, #2
   11a34:	ldr	r1, [sp, #28]
   11a38:	movw	r3, #48152	; 0xbc18
   11a3c:	mov	r0, r8
   11a40:	mov	r2, r4
   11a44:	str	r7, [sp]
   11a48:	movt	r3, #1
   11a4c:	bl	111c8 <getopt_long@plt>
   11a50:	cmp	r0, #99	; 0x63
   11a54:	ble	12014 <__assert_fail@plt+0xcf0>
   11a58:	sub	r1, r0, #122	; 0x7a
   11a5c:	cmp	r1, #147	; 0x93
   11a60:	bhi	11d64 <__assert_fail@plt+0xa40>
   11a64:	add	r0, pc, #0
   11a68:	ldr	pc, [r0, r1, lsl #2]
   11a6c:			; <UNDEFINED> instruction: 0x00011cbc
   11a70:	andeq	r2, r1, ip, lsr #17
   11a74:	andeq	r2, r1, ip, lsr #17
   11a78:	andeq	r2, r1, ip, lsr #17
   11a7c:	andeq	r2, r1, ip, lsr #17
   11a80:	andeq	r2, r1, ip, lsr #17
   11a84:	andeq	r2, r1, ip, lsr #17
   11a88:	andeq	r2, r1, ip, lsr #17
   11a8c:	andeq	r2, r1, ip, lsr #17
   11a90:	andeq	r2, r1, ip, lsr #17
   11a94:	andeq	r2, r1, ip, lsr #17
   11a98:	andeq	r2, r1, ip, lsr #17
   11a9c:	andeq	r2, r1, ip, lsr #17
   11aa0:	andeq	r2, r1, ip, lsr #17
   11aa4:	andeq	r2, r1, ip, lsr #17
   11aa8:	andeq	r2, r1, ip, lsr #17
   11aac:	andeq	r2, r1, ip, lsr #17
   11ab0:	andeq	r2, r1, ip, lsr #17
   11ab4:	andeq	r2, r1, ip, lsr #17
   11ab8:	andeq	r2, r1, ip, lsr #17
   11abc:	andeq	r2, r1, ip, lsr #17
   11ac0:	andeq	r2, r1, ip, lsr #17
   11ac4:	andeq	r2, r1, ip, lsr #17
   11ac8:	andeq	r2, r1, ip, lsr #17
   11acc:	andeq	r2, r1, ip, lsr #17
   11ad0:	andeq	r2, r1, ip, lsr #17
   11ad4:	andeq	r2, r1, ip, lsr #17
   11ad8:	andeq	r2, r1, ip, lsr #17
   11adc:	andeq	r2, r1, ip, lsr #17
   11ae0:	andeq	r2, r1, ip, lsr #17
   11ae4:	andeq	r2, r1, ip, lsr #17
   11ae8:	andeq	r2, r1, ip, lsr #17
   11aec:	andeq	r2, r1, ip, lsr #17
   11af0:	andeq	r2, r1, ip, lsr #17
   11af4:	andeq	r2, r1, ip, lsr #17
   11af8:	andeq	r2, r1, ip, lsr #17
   11afc:	andeq	r2, r1, ip, lsr #17
   11b00:	andeq	r2, r1, ip, lsr #17
   11b04:	andeq	r2, r1, ip, lsr #17
   11b08:	andeq	r2, r1, ip, lsr #17
   11b0c:	andeq	r2, r1, ip, lsr #17
   11b10:	andeq	r2, r1, ip, lsr #17
   11b14:	andeq	r2, r1, ip, lsr #17
   11b18:	andeq	r2, r1, ip, lsr #17
   11b1c:	andeq	r2, r1, ip, lsr #17
   11b20:	andeq	r2, r1, ip, lsr #17
   11b24:	andeq	r2, r1, ip, lsr #17
   11b28:	andeq	r2, r1, ip, lsr #17
   11b2c:	andeq	r2, r1, ip, lsr #17
   11b30:	andeq	r2, r1, ip, lsr #17
   11b34:	andeq	r2, r1, ip, lsr #17
   11b38:	andeq	r2, r1, ip, lsr #17
   11b3c:	andeq	r2, r1, ip, lsr #17
   11b40:	andeq	r2, r1, ip, lsr #17
   11b44:	andeq	r2, r1, ip, lsr #17
   11b48:	andeq	r2, r1, ip, lsr #17
   11b4c:	andeq	r2, r1, ip, lsr #17
   11b50:	andeq	r2, r1, ip, lsr #17
   11b54:	andeq	r2, r1, ip, lsr #17
   11b58:	andeq	r2, r1, ip, lsr #17
   11b5c:	andeq	r2, r1, ip, lsr #17
   11b60:	andeq	r2, r1, ip, lsr #17
   11b64:	andeq	r2, r1, ip, lsr #17
   11b68:	andeq	r2, r1, ip, lsr #17
   11b6c:	andeq	r2, r1, ip, lsr #17
   11b70:	andeq	r2, r1, ip, lsr #17
   11b74:	andeq	r2, r1, ip, lsr #17
   11b78:	andeq	r2, r1, ip, lsr #17
   11b7c:	andeq	r2, r1, ip, lsr #17
   11b80:	andeq	r2, r1, ip, lsr #17
   11b84:	andeq	r2, r1, ip, lsr #17
   11b88:	andeq	r2, r1, ip, lsr #17
   11b8c:	andeq	r2, r1, ip, lsr #17
   11b90:	andeq	r2, r1, ip, lsr #17
   11b94:	andeq	r2, r1, ip, lsr #17
   11b98:	andeq	r2, r1, ip, lsr #17
   11b9c:	andeq	r2, r1, ip, lsr #17
   11ba0:	andeq	r2, r1, ip, lsr #17
   11ba4:	andeq	r2, r1, ip, lsr #17
   11ba8:	andeq	r2, r1, ip, lsr #17
   11bac:	andeq	r2, r1, ip, lsr #17
   11bb0:	andeq	r2, r1, ip, lsr #17
   11bb4:	andeq	r2, r1, ip, lsr #17
   11bb8:	andeq	r2, r1, ip, lsr #17
   11bbc:	andeq	r2, r1, ip, lsr #17
   11bc0:	andeq	r2, r1, ip, lsr #17
   11bc4:	andeq	r2, r1, ip, lsr #17
   11bc8:	andeq	r2, r1, ip, lsr #17
   11bcc:	andeq	r2, r1, ip, lsr #17
   11bd0:	andeq	r2, r1, ip, lsr #17
   11bd4:	andeq	r2, r1, ip, lsr #17
   11bd8:	andeq	r2, r1, ip, lsr #17
   11bdc:	andeq	r2, r1, ip, lsr #17
   11be0:	andeq	r2, r1, ip, lsr #17
   11be4:	andeq	r2, r1, ip, lsr #17
   11be8:	andeq	r2, r1, ip, lsr #17
   11bec:	andeq	r2, r1, ip, lsr #17
   11bf0:	andeq	r2, r1, ip, lsr #17
   11bf4:	andeq	r2, r1, ip, lsr #17
   11bf8:	andeq	r2, r1, ip, lsr #17
   11bfc:	andeq	r2, r1, ip, lsr #17
   11c00:	andeq	r2, r1, ip, lsr #17
   11c04:	andeq	r2, r1, ip, lsr #17
   11c08:	andeq	r2, r1, ip, lsr #17
   11c0c:	andeq	r2, r1, ip, lsr #17
   11c10:	andeq	r2, r1, ip, lsr #17
   11c14:	andeq	r2, r1, ip, lsr #17
   11c18:	andeq	r2, r1, ip, lsr #17
   11c1c:	andeq	r2, r1, ip, lsr #17
   11c20:	andeq	r2, r1, ip, lsr #17
   11c24:	andeq	r2, r1, ip, lsr #17
   11c28:	andeq	r2, r1, ip, lsr #17
   11c2c:	andeq	r2, r1, ip, lsr #17
   11c30:	andeq	r2, r1, ip, lsr #17
   11c34:	andeq	r2, r1, ip, lsr #17
   11c38:	andeq	r2, r1, ip, lsr #17
   11c3c:	andeq	r2, r1, ip, lsr #17
   11c40:	andeq	r2, r1, ip, lsr #17
   11c44:	andeq	r2, r1, ip, lsr #17
   11c48:	andeq	r2, r1, ip, lsr #17
   11c4c:	andeq	r2, r1, ip, lsr #17
   11c50:	andeq	r2, r1, ip, lsr #17
   11c54:	andeq	r2, r1, ip, lsr #17
   11c58:	andeq	r2, r1, ip, lsr #17
   11c5c:	andeq	r2, r1, ip, lsr #17
   11c60:	andeq	r2, r1, ip, lsr #17
   11c64:	andeq	r2, r1, ip, lsr #17
   11c68:	andeq	r2, r1, ip, lsr #17
   11c6c:	andeq	r2, r1, ip, lsr #17
   11c70:	andeq	r2, r1, ip, lsr #17
   11c74:	andeq	r2, r1, ip, lsr #17
   11c78:	andeq	r2, r1, ip, lsr #17
   11c7c:	andeq	r2, r1, ip, lsr #17
   11c80:	andeq	r2, r1, ip, lsr #17
   11c84:	andeq	r1, r1, ip, asr #30
   11c88:	andeq	r1, r1, r8, lsl lr
   11c8c:	strdeq	r1, [r1], -r4
   11c90:	andeq	r1, r1, r0, lsr lr
   11c94:	muleq	r1, r8, sp
   11c98:	andeq	r1, r1, r4, lsl #28
   11c9c:	andeq	r1, r1, r8, asr sp
   11ca0:	andeq	r1, r1, r8, asr #28
   11ca4:	andeq	r1, r1, r4, lsr sp
   11ca8:	andeq	r1, r1, r0, ror #29
   11cac:	andeq	r1, r1, r8, asr #25
   11cb0:	andeq	r1, r1, r8, ror #25
   11cb4:	strdeq	r1, [r1], -r0
   11cb8:	andeq	r1, r1, r8, lsr #31
   11cbc:	movw	r0, #53681	; 0xd1b1
   11cc0:	movt	r0, #2
   11cc4:	b	11ee8 <__assert_fail@plt+0xbc4>
   11cc8:	movw	r0, #53688	; 0xd1b8
   11ccc:	mov	r1, #1
   11cd0:	movt	r0, #2
   11cd4:	strb	r1, [r0]
   11cd8:	movw	r0, #53689	; 0xd1b9
   11cdc:	movt	r0, #2
   11ce0:	strb	r1, [r0]
   11ce4:	b	11a34 <__assert_fail@plt+0x710>
   11ce8:	ldr	r0, [sl]
   11cec:	cmp	r0, #0
   11cf0:	beq	12000 <__assert_fail@plt+0xcdc>
   11cf4:	movw	r1, #46401	; 0xb541
   11cf8:	movw	r3, #53696	; 0xd1c0
   11cfc:	mov	r2, #10
   11d00:	movt	r1, #1
   11d04:	movt	r3, #2
   11d08:	str	r1, [sp]
   11d0c:	mov	r1, #0
   11d10:	bl	189d0 <__assert_fail@plt+0x76ac>
   11d14:	cmp	r0, #0
   11d18:	bne	128c0 <__assert_fail@plt+0x159c>
   11d1c:	movw	r0, #53696	; 0xd1c0
   11d20:	movt	r0, #2
   11d24:	ldrd	r0, [r0]
   11d28:	orrs	r0, r0, r1
   11d2c:	bne	11a34 <__assert_fail@plt+0x710>
   11d30:	b	128c0 <__assert_fail@plt+0x159c>
   11d34:	movw	r0, #54068	; 0xd334
   11d38:	movt	r0, #2
   11d3c:	ldr	r0, [r0]
   11d40:	cmp	r0, #0
   11d44:	bne	128e0 <__assert_fail@plt+0x15bc>
   11d48:	ldr	r0, [sl]
   11d4c:	mov	r1, #1
   11d50:	bl	141c0 <__assert_fail@plt+0x2e9c>
   11d54:	b	11a34 <__assert_fail@plt+0x710>
   11d58:	mov	r0, #1
   11d5c:	strb	r0, [r9]
   11d60:	b	11a34 <__assert_fail@plt+0x710>
   11d64:	cmp	r0, #100	; 0x64
   11d68:	bne	128ac <__assert_fail@plt+0x1588>
   11d6c:	ldr	r1, [sl]
   11d70:	ldrb	r0, [r1]
   11d74:	cmp	r0, #0
   11d78:	beq	11d88 <__assert_fail@plt+0xa64>
   11d7c:	ldrb	r1, [r1, #1]
   11d80:	cmp	r1, #0
   11d84:	bne	128ec <__assert_fail@plt+0x15c8>
   11d88:	movw	r1, #53532	; 0xd11c
   11d8c:	movt	r1, #2
   11d90:	str	r0, [r1]
   11d94:	b	11a34 <__assert_fail@plt+0x710>
   11d98:	movw	r0, #53544	; 0xd128
   11d9c:	movw	r6, #48536	; 0xbd98
   11da0:	mov	r2, #4
   11da4:	ldr	r1, [sl]
   11da8:	movt	r0, #2
   11dac:	str	r2, [sp]
   11db0:	movw	r2, #48556	; 0xbdac
   11db4:	movt	r6, #1
   11db8:	movt	r2, #1
   11dbc:	ldr	r0, [r0]
   11dc0:	mov	r3, r6
   11dc4:	str	r0, [sp, #4]
   11dc8:	mov	r0, #1
   11dcc:	str	r0, [sp, #8]
   11dd0:	movw	r0, #45574	; 0xb206
   11dd4:	movt	r0, #1
   11dd8:	bl	14cd0 <__assert_fail@plt+0x39ac>
   11ddc:	ldr	r0, [r6, r0, lsl #2]
   11de0:	movw	r1, #53528	; 0xd118
   11de4:	movt	r1, #2
   11de8:	str	r0, [r1]
   11dec:	b	11a34 <__assert_fail@plt+0x710>
   11df0:	ldr	r0, [sl]
   11df4:	movw	r1, #53704	; 0xd1c8
   11df8:	movt	r1, #2
   11dfc:	str	r0, [r1]
   11e00:	b	11a34 <__assert_fail@plt+0x710>
   11e04:	ldr	r0, [sl]
   11e08:	movw	r1, #53684	; 0xd1b4
   11e0c:	movt	r1, #2
   11e10:	str	r0, [r1]
   11e14:	b	11a34 <__assert_fail@plt+0x710>
   11e18:	ldr	r0, [sl]
   11e1c:	bl	12960 <__assert_fail@plt+0x163c>
   11e20:	movw	r2, #53512	; 0xd108
   11e24:	movt	r2, #2
   11e28:	strd	r0, [r2]
   11e2c:	b	11a34 <__assert_fail@plt+0x710>
   11e30:	ldr	r0, [sl]
   11e34:	bl	12960 <__assert_fail@plt+0x163c>
   11e38:	movw	r2, #53520	; 0xd110
   11e3c:	movt	r2, #2
   11e40:	strd	r0, [r2]
   11e44:	b	11a34 <__assert_fail@plt+0x710>
   11e48:	movw	r0, #46401	; 0xb541
   11e4c:	mov	r7, r4
   11e50:	movw	r4, #53676	; 0xd1ac
   11e54:	mov	r2, #10
   11e58:	mov	r6, r9
   11e5c:	mov	r9, r5
   11e60:	mov	r8, sl
   11e64:	movt	r0, #1
   11e68:	movt	r4, #2
   11e6c:	mov	r1, r0
   11e70:	ldr	r0, [sl]
   11e74:	mov	r3, r4
   11e78:	str	r1, [sp]
   11e7c:	mov	r1, #0
   11e80:	bl	17ed4 <__assert_fail@plt+0x6bb0>
   11e84:	cmp	r0, #0
   11e88:	bne	128f8 <__assert_fail@plt+0x15d4>
   11e8c:	ldr	r0, [r4]
   11e90:	bic	r1, r0, #-2147483648	; 0x80000000
   11e94:	cmp	r1, #0
   11e98:	beq	128f8 <__assert_fail@plt+0x15d4>
   11e9c:	mov	sl, r8
   11ea0:	ldr	r8, [sp, #24]
   11ea4:	mov	r5, r9
   11ea8:	mov	r4, r7
   11eac:	cmn	r0, #1
   11eb0:	mov	r9, r6
   11eb4:	mov	r7, #0
   11eb8:	bgt	11a34 <__assert_fail@plt+0x710>
   11ebc:	movw	r1, #53680	; 0xd1b0
   11ec0:	mov	r2, #1
   11ec4:	rsb	r0, r0, #0
   11ec8:	movt	r1, #2
   11ecc:	strb	r2, [r1]
   11ed0:	movw	r1, #53676	; 0xd1ac
   11ed4:	movt	r1, #2
   11ed8:	str	r0, [r1]
   11edc:	b	11a34 <__assert_fail@plt+0x710>
   11ee0:	movw	r0, #53688	; 0xd1b8
   11ee4:	movt	r0, #2
   11ee8:	mov	r1, #1
   11eec:	strb	r1, [r0]
   11ef0:	b	11a34 <__assert_fail@plt+0x710>
   11ef4:	movw	r0, #53544	; 0xd128
   11ef8:	mov	r2, #4
   11efc:	mov	r6, r5
   11f00:	movw	r5, #48500	; 0xbd74
   11f04:	ldr	r1, [sl]
   11f08:	movt	r0, #2
   11f0c:	str	r2, [sp]
   11f10:	movw	r2, #48516	; 0xbd84
   11f14:	movt	r5, #1
   11f18:	movt	r2, #1
   11f1c:	ldr	r0, [r0]
   11f20:	mov	r3, r5
   11f24:	str	r0, [sp, #4]
   11f28:	mov	r0, #1
   11f2c:	str	r0, [sp, #8]
   11f30:	movw	r0, #45868	; 0xb32c
   11f34:	movt	r0, #1
   11f38:	bl	14cd0 <__assert_fail@plt+0x39ac>
   11f3c:	ldr	r0, [r5, r0, lsl #2]
   11f40:	mov	r5, r6
   11f44:	str	r0, [r6]
   11f48:	b	11a34 <__assert_fail@plt+0x710>
   11f4c:	movw	r0, #53544	; 0xd128
   11f50:	movw	r8, #48456	; 0xbd48
   11f54:	mov	r2, #4
   11f58:	ldr	r1, [sl]
   11f5c:	movt	r0, #2
   11f60:	str	r2, [sp]
   11f64:	movw	r2, #48476	; 0xbd5c
   11f68:	movt	r8, #1
   11f6c:	movt	r2, #1
   11f70:	ldr	r0, [r0]
   11f74:	mov	r3, r8
   11f78:	str	r0, [sp, #4]
   11f7c:	mov	r0, #1
   11f80:	str	r0, [sp, #8]
   11f84:	movw	r0, #45567	; 0xb1ff
   11f88:	movt	r0, #1
   11f8c:	bl	14cd0 <__assert_fail@plt+0x39ac>
   11f90:	ldr	r0, [r8, r0, lsl #2]
   11f94:	movw	r1, #53664	; 0xd1a0
   11f98:	ldr	r8, [sp, #24]
   11f9c:	movt	r1, #2
   11fa0:	str	r0, [r1]
   11fa4:	b	11a34 <__assert_fail@plt+0x710>
   11fa8:	movw	r0, #53544	; 0xd128
   11fac:	movw	r6, #48580	; 0xbdc4
   11fb0:	mov	r2, #4
   11fb4:	ldr	r1, [sl]
   11fb8:	movt	r0, #2
   11fbc:	str	r2, [sp]
   11fc0:	movw	r2, #48596	; 0xbdd4
   11fc4:	movt	r6, #1
   11fc8:	movt	r2, #1
   11fcc:	ldr	r0, [r0]
   11fd0:	mov	r3, r6
   11fd4:	str	r0, [sp, #4]
   11fd8:	mov	r0, #1
   11fdc:	str	r0, [sp, #8]
   11fe0:	movw	r0, #45702	; 0xb286
   11fe4:	movt	r0, #1
   11fe8:	bl	14cd0 <__assert_fail@plt+0x39ac>
   11fec:	ldr	r0, [r6, r0, lsl #2]
   11ff0:	movw	r1, #53708	; 0xd1cc
   11ff4:	movt	r1, #2
   11ff8:	str	r0, [r1]
   11ffc:	b	11a34 <__assert_fail@plt+0x710>
   12000:	movw	r0, #53696	; 0xd1c0
   12004:	mov	r1, #1
   12008:	movt	r0, #2
   1200c:	stm	r0, {r1, r7}
   12010:	b	11a34 <__assert_fail@plt+0x710>
   12014:	cmn	r0, #1
   12018:	bne	1280c <__assert_fail@plt+0x14e8>
   1201c:	movw	r4, #53704	; 0xd1c8
   12020:	ldrb	r0, [r9]
   12024:	movw	r6, #53696	; 0xd1c0
   12028:	movw	r8, #53676	; 0xd1ac
   1202c:	movt	r4, #2
   12030:	movt	r6, #2
   12034:	movt	r8, #2
   12038:	ldr	r7, [r4]
   1203c:	cmp	r7, #0
   12040:	cmpne	r0, #0
   12044:	bne	12918 <__assert_fail@plt+0x15f4>
   12048:	movw	r1, #53688	; 0xd1b8
   1204c:	ldr	r2, [sp, #20]
   12050:	movt	r1, #2
   12054:	ldrb	r1, [r1]
   12058:	cmp	r2, #0
   1205c:	bne	120a0 <__assert_fail@plt+0xd7c>
   12060:	cmp	r1, #0
   12064:	beq	120a0 <__assert_fail@plt+0xd7c>
   12068:	movw	r1, #45783	; 0xb2d7
   1206c:	mov	r0, #0
   12070:	mov	r2, #5
   12074:	movt	r1, #1
   12078:	bl	11108 <dcgettext@plt>
   1207c:	mov	r2, r0
   12080:	mov	r0, #0
   12084:	mov	r1, #0
   12088:	bl	1118c <error@plt>
   1208c:	movw	r1, #53688	; 0xd1b8
   12090:	ldr	r7, [r4]
   12094:	ldrb	r0, [r9]
   12098:	movt	r1, #2
   1209c:	ldrb	r1, [r1]
   120a0:	cmp	r7, #0
   120a4:	ldreq	r2, [r8]
   120a8:	cmpeq	r2, #0
   120ac:	bne	120fc <__assert_fail@plt+0xdd8>
   120b0:	cmp	r1, #0
   120b4:	beq	120fc <__assert_fail@plt+0xdd8>
   120b8:	movw	r1, #53664	; 0xd1a0
   120bc:	ldr	r2, [r5]
   120c0:	movt	r1, #2
   120c4:	ldr	r1, [r1]
   120c8:	orrs	r1, r2, r1
   120cc:	cmpeq	r0, #0
   120d0:	bne	120fc <__assert_fail@plt+0xdd8>
   120d4:	movw	r1, #45804	; 0xb2ec
   120d8:	mov	r0, #0
   120dc:	mov	r2, #5
   120e0:	movt	r1, #1
   120e4:	bl	11108 <dcgettext@plt>
   120e8:	mov	r2, r0
   120ec:	mov	r0, #0
   120f0:	mov	r1, #0
   120f4:	bl	1118c <error@plt>
   120f8:	ldr	r7, [r4]
   120fc:	cmp	r7, #0
   12100:	beq	12408 <__assert_fail@plt+0x10e4>
   12104:	mov	r6, #0
   12108:	mov	r0, #0
   1210c:	str	r6, [fp, #-32]	; 0xffffffe0
   12110:	b	12130 <__assert_fail@plt+0xe0c>
   12114:	cmp	r1, #0
   12118:	beq	1285c <__assert_fail@plt+0x1538>
   1211c:	cmp	r1, #37	; 0x25
   12120:	mov	r1, #1
   12124:	add	r6, r6, #1
   12128:	movweq	r1, #2
   1212c:	add	r0, r1, r0
   12130:	ldrb	r1, [r7, r0]
   12134:	cmp	r1, #37	; 0x25
   12138:	bne	12114 <__assert_fail@plt+0xdf0>
   1213c:	add	r5, r0, #1
   12140:	ldrb	r2, [r7, r5]
   12144:	cmp	r2, #37	; 0x25
   12148:	beq	1211c <__assert_fail@plt+0xdf8>
   1214c:	movw	r4, #46651	; 0xb63b
   12150:	mov	sl, #0
   12154:	mov	r8, #1
   12158:	movt	r4, #1
   1215c:	b	12168 <__assert_fail@plt+0xe44>
   12160:	add	r5, r5, #1
   12164:	mov	sl, #1
   12168:	add	r0, r7, r5
   1216c:	mov	r1, r4
   12170:	bl	1130c <strspn@plt>
   12174:	add	r5, r0, r5
   12178:	ldrb	r1, [r7, r5]
   1217c:	cmp	r1, #39	; 0x27
   12180:	beq	12198 <__assert_fail@plt+0xe74>
   12184:	cmp	r1, #48	; 0x30
   12188:	beq	12160 <__assert_fail@plt+0xe3c>
   1218c:	cmp	r0, #0
   12190:	bne	12168 <__assert_fail@plt+0xe44>
   12194:	b	121a4 <__assert_fail@plt+0xe80>
   12198:	add	r5, r5, #1
   1219c:	strb	r8, [r9]
   121a0:	b	12168 <__assert_fail@plt+0xe44>
   121a4:	str	sl, [sp, #20]
   121a8:	bl	11210 <__errno_location@plt>
   121ac:	mov	r4, r0
   121b0:	mov	r0, #0
   121b4:	add	r8, r7, r5
   121b8:	sub	r1, fp, #32
   121bc:	mov	r2, #10
   121c0:	str	r0, [r4]
   121c4:	mov	r0, r8
   121c8:	bl	1109c <strtol@plt>
   121cc:	cmp	r0, #-2147483648	; 0x80000000
   121d0:	movne	sl, r0
   121d4:	ldrne	r0, [r4]
   121d8:	cmpne	r0, #34	; 0x22
   121dc:	beq	12924 <__assert_fail@plt+0x1600>
   121e0:	ldr	r9, [fp, #-32]	; 0xffffffe0
   121e4:	cmp	sl, #0
   121e8:	cmpne	r9, r8
   121ec:	bne	1275c <__assert_fail@plt+0x1438>
   121f0:	ldrb	r0, [r9], -r7
   121f4:	cmp	r0, #46	; 0x2e
   121f8:	beq	12210 <__assert_fail@plt+0xeec>
   121fc:	cmp	r0, #0
   12200:	bne	12280 <__assert_fail@plt+0xf5c>
   12204:	movw	r1, #46726	; 0xb686
   12208:	movt	r1, #1
   1220c:	b	12880 <__assert_fail@plt+0x155c>
   12210:	mov	r0, #0
   12214:	mov	r5, r4
   12218:	sub	r1, fp, #32
   1221c:	mov	r2, #10
   12220:	str	r0, [r4]
   12224:	add	r0, r9, r7
   12228:	add	r4, r0, #1
   1222c:	mov	r0, r4
   12230:	bl	1109c <strtol@plt>
   12234:	movw	r1, #53536	; 0xd120
   12238:	cmp	r0, #0
   1223c:	movt	r1, #2
   12240:	str	r0, [r1]
   12244:	bmi	128b4 <__assert_fail@plt+0x1590>
   12248:	ldr	r0, [r5]
   1224c:	cmp	r0, #34	; 0x22
   12250:	beq	128b4 <__assert_fail@plt+0x1590>
   12254:	bl	111d4 <__ctype_b_loc@plt>
   12258:	ldrb	r1, [r4]
   1225c:	cmp	r1, #43	; 0x2b
   12260:	beq	128b4 <__assert_fail@plt+0x1590>
   12264:	ldr	r0, [r0]
   12268:	add	r0, r0, r1, lsl #1
   1226c:	ldrh	r0, [r0]
   12270:	ands	r0, r0, #1
   12274:	bne	128b4 <__assert_fail@plt+0x1590>
   12278:	ldr	r9, [fp, #-32]	; 0xffffffe0
   1227c:	ldrb	r0, [r9], -r7
   12280:	cmp	r0, #102	; 0x66
   12284:	bne	12930 <__assert_fail@plt+0x160c>
   12288:	movw	r8, #53676	; 0xd1ac
   1228c:	add	r4, r9, #1
   12290:	movt	r8, #2
   12294:	mov	r0, r4
   12298:	b	122bc <__assert_fail@plt+0xf98>
   1229c:	add	r2, r0, r7
   122a0:	ldrb	r2, [r2, #1]
   122a4:	cmp	r2, #37	; 0x25
   122a8:	bne	12878 <__assert_fail@plt+0x1554>
   122ac:	cmp	r1, #37	; 0x25
   122b0:	mov	r1, #1
   122b4:	movweq	r1, #2
   122b8:	add	r0, r1, r0
   122bc:	ldrb	r1, [r7, r0]
   122c0:	cmp	r1, #37	; 0x25
   122c4:	beq	1229c <__assert_fail@plt+0xf78>
   122c8:	cmp	r1, #0
   122cc:	bne	122ac <__assert_fail@plt+0xf88>
   122d0:	movw	r5, #53724	; 0xd1dc
   122d4:	cmp	r6, #0
   122d8:	movt	r5, #2
   122dc:	beq	122f0 <__assert_fail@plt+0xfcc>
   122e0:	mov	r0, r7
   122e4:	mov	r1, r6
   122e8:	bl	17e1c <__assert_fail@plt+0x6af8>
   122ec:	str	r0, [r5]
   122f0:	mov	r0, r7
   122f4:	ldrb	r1, [r0, r4]!
   122f8:	movw	r4, #53728	; 0xd1e0
   122fc:	movt	r4, #2
   12300:	cmp	r1, #0
   12304:	beq	12310 <__assert_fail@plt+0xfec>
   12308:	bl	17e58 <__assert_fail@plt+0x6b34>
   1230c:	str	r0, [r4]
   12310:	movw	r0, #53689	; 0xd1b9
   12314:	movt	r0, #2
   12318:	ldrb	r0, [r0]
   1231c:	cmp	r0, #1
   12320:	bne	123f0 <__assert_fail@plt+0x10cc>
   12324:	movw	r0, #53632	; 0xd180
   12328:	mov	r1, r7
   1232c:	movt	r0, #2
   12330:	ldr	sl, [r0]
   12334:	mov	r0, #0
   12338:	bl	17140 <__assert_fail@plt+0x5e1c>
   1233c:	str	r0, [sp, #20]
   12340:	movw	r0, #53672	; 0xd1a8
   12344:	ldr	r1, [r5]
   12348:	movw	r9, #46401	; 0xb541
   1234c:	ldr	r5, [r8]
   12350:	movt	r0, #2
   12354:	movt	r9, #1
   12358:	ldrb	r6, [r0]
   1235c:	movw	r0, #53680	; 0xd1b0
   12360:	movt	r0, #2
   12364:	cmp	r1, #0
   12368:	moveq	r1, r9
   1236c:	ldrb	r8, [r0]
   12370:	mov	r0, #1
   12374:	bl	17140 <__assert_fail@plt+0x5e1c>
   12378:	ldr	r1, [r4]
   1237c:	mov	r7, r0
   12380:	mov	r0, #2
   12384:	cmp	r1, #0
   12388:	moveq	r1, r9
   1238c:	bl	17140 <__assert_fail@plt+0x5e1c>
   12390:	movw	r1, #46987	; 0xb78b
   12394:	movw	r2, #46992	; 0xb790
   12398:	cmp	r8, #0
   1239c:	movw	r3, #46984	; 0xb788
   123a0:	movw	r8, #53676	; 0xd1ac
   123a4:	movt	r1, #1
   123a8:	movt	r2, #1
   123ac:	movt	r3, #1
   123b0:	movt	r8, #2
   123b4:	movne	r2, r1
   123b8:	movw	r1, #46980	; 0xb784
   123bc:	cmp	r6, #0
   123c0:	movt	r1, #1
   123c4:	movne	r3, r1
   123c8:	mov	r1, #1
   123cc:	stm	sp, {r3, r5}
   123d0:	ldr	r3, [sp, #20]
   123d4:	str	r2, [sp, #8]
   123d8:	movw	r2, #46874	; 0xb71a
   123dc:	str	r0, [sp, #16]
   123e0:	mov	r0, sl
   123e4:	str	r7, [sp, #12]
   123e8:	movt	r2, #1
   123ec:	bl	1124c <__fprintf_chk@plt>
   123f0:	movw	r6, #53696	; 0xd1c0
   123f4:	movw	r5, #53668	; 0xd1a4
   123f8:	movw	r9, #53672	; 0xd1a8
   123fc:	movt	r6, #2
   12400:	movt	r5, #2
   12404:	movt	r9, #2
   12408:	ldrb	r0, [r9]
   1240c:	ldr	r7, [sp, #28]
   12410:	cmp	r0, #1
   12414:	bne	12474 <__assert_fail@plt+0x1150>
   12418:	ldr	r0, [r5]
   1241c:	cmp	r0, #0
   12420:	bne	1293c <__assert_fail@plt+0x1618>
   12424:	movw	r0, #53688	; 0xd1b8
   12428:	movt	r0, #2
   1242c:	ldrb	r0, [r0]
   12430:	cmp	r0, #1
   12434:	bne	12474 <__assert_fail@plt+0x1150>
   12438:	movw	r0, #1
   1243c:	movt	r0, #1
   12440:	bl	112ac <nl_langinfo@plt>
   12444:	ldrb	r0, [r0]
   12448:	cmp	r0, #0
   1244c:	bne	12474 <__assert_fail@plt+0x1150>
   12450:	movw	r1, #45873	; 0xb331
   12454:	mov	r0, #0
   12458:	mov	r2, #5
   1245c:	movt	r1, #1
   12460:	bl	11108 <dcgettext@plt>
   12464:	mov	r2, r0
   12468:	mov	r0, #0
   1246c:	mov	r1, #0
   12470:	bl	1118c <error@plt>
   12474:	movw	r2, #53732	; 0xd1e4
   12478:	ldr	r0, [r8]
   1247c:	movt	r2, #2
   12480:	ldr	r1, [r2]
   12484:	cmp	r1, r0
   12488:	bhi	124ac <__assert_fail@plt+0x1188>
   1248c:	movw	r4, #53736	; 0xd1e8
   12490:	add	r1, r0, #1
   12494:	movt	r4, #2
   12498:	str	r1, [r2]
   1249c:	ldr	r0, [r4]
   124a0:	bl	1799c <__assert_fail@plt+0x6678>
   124a4:	str	r0, [r4]
   124a8:	ldr	r0, [r8]
   124ac:	movw	r1, #53532	; 0xd11c
   124b0:	movw	r9, #53708	; 0xd1cc
   124b4:	movw	r4, #53624	; 0xd178
   124b8:	ldr	r5, [sp, #24]
   124bc:	movt	r1, #2
   124c0:	movt	r9, #2
   124c4:	movt	r4, #2
   124c8:	ldr	r1, [r1]
   124cc:	eor	r1, r1, #256	; 0x100
   124d0:	orr	r0, r0, r1
   124d4:	movw	r1, #53712	; 0xd1d0
   124d8:	clz	r0, r0
   124dc:	movt	r1, #2
   124e0:	lsr	r0, r0, #5
   124e4:	str	r0, [r1]
   124e8:	ldr	r0, [r9]
   124ec:	cmp	r0, #0
   124f0:	movwne	r0, #53716	; 0xd1d4
   124f4:	movne	r1, #1
   124f8:	movtne	r0, #2
   124fc:	strbne	r1, [r0]
   12500:	ldr	r1, [r4]
   12504:	cmp	r1, r5
   12508:	bge	1258c <__assert_fail@plt+0x1268>
   1250c:	movw	r0, #53688	; 0xd1b8
   12510:	movt	r0, #2
   12514:	ldrb	r0, [r0]
   12518:	cmp	r0, #1
   1251c:	bne	12554 <__assert_fail@plt+0x1230>
   12520:	ldm	r6, {r0, r3}
   12524:	orrs	r0, r0, r3
   12528:	beq	12554 <__assert_fail@plt+0x1230>
   1252c:	movw	r1, #45911	; 0xb357
   12530:	mov	r0, #0
   12534:	mov	r2, #5
   12538:	movt	r1, #1
   1253c:	bl	11108 <dcgettext@plt>
   12540:	mov	r2, r0
   12544:	mov	r0, #0
   12548:	mov	r1, #0
   1254c:	bl	1118c <error@plt>
   12550:	ldr	r1, [r4]
   12554:	mov	r6, #1
   12558:	cmp	r1, r5
   1255c:	bge	12738 <__assert_fail@plt+0x1414>
   12560:	mov	r6, #1
   12564:	ldr	r0, [r7, r1, lsl #2]
   12568:	mov	r1, #1
   1256c:	bl	12ab0 <__assert_fail@plt+0x178c>
   12570:	ldr	r1, [r4]
   12574:	and	r6, r0, r6
   12578:	add	r1, r1, #1
   1257c:	cmp	r1, r5
   12580:	str	r1, [r4]
   12584:	blt	12564 <__assert_fail@plt+0x1240>
   12588:	b	126f4 <__assert_fail@plt+0x13d0>
   1258c:	ldrd	r0, [r6]
   12590:	movw	sl, #53640	; 0xd188
   12594:	movw	r7, #53681	; 0xd1b1
   12598:	movt	sl, #2
   1259c:	movt	r7, #2
   125a0:	subs	r2, r0, #1
   125a4:	sbc	r3, r1, #0
   125a8:	orrs	r0, r0, r1
   125ac:	strd	r2, [r6]
   125b0:	mov	r2, #0
   125b4:	str	r2, [sp, #36]	; 0x24
   125b8:	str	r2, [sp, #32]
   125bc:	beq	1261c <__assert_fail@plt+0x12f8>
   125c0:	movw	r8, #53644	; 0xd18c
   125c4:	add	r4, sp, #36	; 0x24
   125c8:	add	r5, sp, #32
   125cc:	movt	r8, #2
   125d0:	ldrb	r0, [r7]
   125d4:	ldr	r3, [sl]
   125d8:	mov	r2, #10
   125dc:	mov	r1, r5
   125e0:	cmp	r0, #0
   125e4:	mov	r0, r4
   125e8:	movwne	r2, #0
   125ec:	bl	112dc <getdelim@plt>
   125f0:	cmp	r0, #1
   125f4:	blt	1261c <__assert_fail@plt+0x12f8>
   125f8:	ldr	r1, [r8]
   125fc:	ldr	r0, [sp, #36]	; 0x24
   12600:	bl	1106c <fputs_unlocked@plt>
   12604:	ldrd	r0, [r6]
   12608:	subs	r2, r0, #1
   1260c:	sbc	r3, r1, #0
   12610:	orrs	r0, r0, r1
   12614:	strd	r2, [r6]
   12618:	bne	125d0 <__assert_fail@plt+0x12ac>
   1261c:	ldrb	r0, [r7]
   12620:	ldr	r3, [sl]
   12624:	mov	r2, #10
   12628:	add	r1, sp, #32
   1262c:	cmp	r0, #0
   12630:	add	r0, sp, #36	; 0x24
   12634:	movwne	r2, #0
   12638:	bl	112dc <getdelim@plt>
   1263c:	mov	r6, #1
   12640:	cmp	r0, #1
   12644:	blt	126b8 <__assert_fail@plt+0x1394>
   12648:	mov	r8, #0
   1264c:	add	r4, sp, #36	; 0x24
   12650:	add	r5, sp, #32
   12654:	sub	r3, r0, #1
   12658:	ldr	r0, [sp, #36]	; 0x24
   1265c:	ldrb	r2, [r7]
   12660:	ldrb	r1, [r0, r3]
   12664:	cmp	r2, #0
   12668:	mov	r2, #10
   1266c:	movwne	r2, #0
   12670:	cmp	r2, r1
   12674:	sub	r1, r2, r1
   12678:	strbeq	r8, [r0, r3]
   1267c:	clz	r1, r1
   12680:	ldreq	r0, [sp, #36]	; 0x24
   12684:	lsr	r1, r1, #5
   12688:	bl	12ab0 <__assert_fail@plt+0x178c>
   1268c:	and	r6, r0, r6
   12690:	ldrb	r0, [r7]
   12694:	ldr	r3, [sl]
   12698:	mov	r2, #10
   1269c:	mov	r1, r5
   126a0:	cmp	r0, #0
   126a4:	mov	r0, r4
   126a8:	movwne	r2, #0
   126ac:	bl	112dc <getdelim@plt>
   126b0:	cmp	r0, #0
   126b4:	bgt	12654 <__assert_fail@plt+0x1330>
   126b8:	ldr	r0, [sl]
   126bc:	ldrb	r0, [r0]
   126c0:	tst	r0, #32
   126c4:	beq	126f4 <__assert_fail@plt+0x13d0>
   126c8:	bl	11210 <__errno_location@plt>
   126cc:	movw	r1, #45952	; 0xb380
   126d0:	ldr	r4, [r0]
   126d4:	mov	r0, #0
   126d8:	mov	r2, #5
   126dc:	movt	r1, #1
   126e0:	bl	11108 <dcgettext@plt>
   126e4:	mov	r2, r0
   126e8:	mov	r0, #0
   126ec:	mov	r1, r4
   126f0:	bl	1118c <error@plt>
   126f4:	cmp	r6, #0
   126f8:	bne	12738 <__assert_fail@plt+0x1414>
   126fc:	movw	r0, #53688	; 0xd1b8
   12700:	movt	r0, #2
   12704:	ldrb	r0, [r0]
   12708:	cmp	r0, #0
   1270c:	beq	12738 <__assert_fail@plt+0x1414>
   12710:	movw	r1, #45972	; 0xb394
   12714:	mov	r0, #0
   12718:	mov	r2, #5
   1271c:	mov	r6, #0
   12720:	movt	r1, #1
   12724:	bl	11108 <dcgettext@plt>
   12728:	mov	r2, r0
   1272c:	mov	r0, #0
   12730:	mov	r1, #0
   12734:	bl	1118c <error@plt>
   12738:	ldr	r0, [r9]
   1273c:	orr	r0, r0, #1
   12740:	subs	r1, r0, #3
   12744:	mov	r0, #0
   12748:	movwne	r1, #1
   1274c:	cmp	r6, #0
   12750:	lsleq	r0, r1, #1
   12754:	sub	sp, fp, #28
   12758:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1275c:	ldr	r1, [sp, #20]
   12760:	movw	r5, #53676	; 0xd1ac
   12764:	cmp	sl, #0
   12768:	mov	r0, #0
   1276c:	movwgt	r0, #1
   12770:	movt	r5, #2
   12774:	tst	r1, r0
   12778:	bne	12798 <__assert_fail@plt+0x1474>
   1277c:	movw	r0, #53688	; 0xd1b8
   12780:	movt	r0, #2
   12784:	ldrb	r0, [r0]
   12788:	cmp	r0, #0
   1278c:	ldrne	r0, [r5]
   12790:	cmpne	r0, #0
   12794:	bne	127c4 <__assert_fail@plt+0x14a0>
   12798:	cmn	sl, #1
   1279c:	ble	127f0 <__assert_fail@plt+0x14cc>
   127a0:	ldr	r0, [sp, #20]
   127a4:	tst	r0, #1
   127a8:	beq	127bc <__assert_fail@plt+0x1498>
   127ac:	movw	r0, #53720	; 0xd1d8
   127b0:	movt	r0, #2
   127b4:	str	sl, [r0]
   127b8:	b	121f0 <__assert_fail@plt+0xecc>
   127bc:	str	sl, [r5]
   127c0:	b	121f0 <__assert_fail@plt+0xecc>
   127c4:	movw	r1, #46688	; 0xb660
   127c8:	mov	r0, #0
   127cc:	mov	r2, #5
   127d0:	movt	r1, #1
   127d4:	bl	11108 <dcgettext@plt>
   127d8:	mov	r2, r0
   127dc:	mov	r0, #0
   127e0:	mov	r1, #0
   127e4:	bl	1118c <error@plt>
   127e8:	cmn	sl, #1
   127ec:	bgt	127a0 <__assert_fail@plt+0x147c>
   127f0:	movw	r1, #53680	; 0xd1b0
   127f4:	mov	r0, #1
   127f8:	movt	r1, #2
   127fc:	strb	r0, [r1]
   12800:	rsb	r0, sl, #0
   12804:	str	r0, [r5]
   12808:	b	121f0 <__assert_fail@plt+0xecc>
   1280c:	cmn	r0, #3
   12810:	bne	12868 <__assert_fail@plt+0x1544>
   12814:	movw	r0, #53540	; 0xd124
   12818:	movw	r2, #45726	; 0xb29e
   1281c:	mov	r1, #0
   12820:	movt	r0, #2
   12824:	movt	r2, #1
   12828:	str	r1, [sp, #4]
   1282c:	movw	r1, #45530	; 0xb1da
   12830:	movt	r1, #1
   12834:	ldr	r3, [r0]
   12838:	movw	r0, #53644	; 0xd18c
   1283c:	str	r2, [sp]
   12840:	movw	r2, #45712	; 0xb290
   12844:	movt	r0, #2
   12848:	movt	r2, #1
   1284c:	ldr	r0, [r0]
   12850:	bl	17720 <__assert_fail@plt+0x63fc>
   12854:	mov	r0, #0
   12858:	bl	111e0 <exit@plt>
   1285c:	movw	r1, #46621	; 0xb61d
   12860:	movt	r1, #1
   12864:	b	12880 <__assert_fail@plt+0x155c>
   12868:	cmn	r0, #2
   1286c:	bne	128ac <__assert_fail@plt+0x1588>
   12870:	mov	r0, #0
   12874:	bl	11420 <__assert_fail@plt+0xfc>
   12878:	movw	r1, #46837	; 0xb6f5
   1287c:	movt	r1, #1
   12880:	mov	r0, #0
   12884:	mov	r2, #5
   12888:	bl	11108 <dcgettext@plt>
   1288c:	mov	r4, r0
   12890:	mov	r0, r7
   12894:	bl	17150 <__assert_fail@plt+0x5e2c>
   12898:	mov	r3, r0
   1289c:	mov	r0, #1
   128a0:	mov	r1, #0
   128a4:	mov	r2, r4
   128a8:	bl	1118c <error@plt>
   128ac:	mov	r0, #1
   128b0:	bl	11420 <__assert_fail@plt+0xfc>
   128b4:	movw	r1, #46747	; 0xb69b
   128b8:	movt	r1, #1
   128bc:	b	12880 <__assert_fail@plt+0x155c>
   128c0:	movw	r1, #45678	; 0xb26e
   128c4:	mov	r0, #0
   128c8:	mov	r2, #5
   128cc:	movt	r1, #1
   128d0:	bl	11108 <dcgettext@plt>
   128d4:	mov	r4, r0
   128d8:	ldr	r0, [sl]
   128dc:	b	12894 <__assert_fail@plt+0x1570>
   128e0:	movw	r1, #45607	; 0xb227
   128e4:	movt	r1, #1
   128e8:	b	12944 <__assert_fail@plt+0x1620>
   128ec:	movw	r1, #45637	; 0xb245
   128f0:	movt	r1, #1
   128f4:	b	12944 <__assert_fail@plt+0x1620>
   128f8:	movw	r1, #45582	; 0xb20e
   128fc:	mov	r0, #0
   12900:	mov	r2, #5
   12904:	movt	r1, #1
   12908:	bl	11108 <dcgettext@plt>
   1290c:	mov	r4, r0
   12910:	ldr	r0, [r8]
   12914:	b	12894 <__assert_fail@plt+0x1570>
   12918:	movw	r1, #45739	; 0xb2ab
   1291c:	movt	r1, #1
   12920:	b	12944 <__assert_fail@plt+0x1620>
   12924:	movw	r1, #46653	; 0xb63d
   12928:	movt	r1, #1
   1292c:	b	12880 <__assert_fail@plt+0x155c>
   12930:	movw	r1, #46778	; 0xb6ba
   12934:	movt	r1, #1
   12938:	b	12880 <__assert_fail@plt+0x155c>
   1293c:	movw	r1, #45835	; 0xb30b
   12940:	movt	r1, #1
   12944:	mov	r0, #0
   12948:	mov	r2, #5
   1294c:	bl	11108 <dcgettext@plt>
   12950:	mov	r2, r0
   12954:	mov	r0, #1
   12958:	mov	r1, #0
   1295c:	bl	1118c <error@plt>
   12960:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12964:	add	fp, sp, #24
   12968:	sub	sp, sp, #24
   1296c:	mov	r4, r0
   12970:	bl	111f8 <strlen@plt>
   12974:	movw	r8, #46518	; 0xb5b6
   12978:	mov	r5, #0
   1297c:	cmp	r0, #0
   12980:	movt	r8, #1
   12984:	str	r5, [sp, #20]
   12988:	beq	129a4 <__assert_fail@plt+0x1680>
   1298c:	mov	r6, r0
   12990:	add	r0, r0, r4
   12994:	ldrb	r0, [r0, #-1]
   12998:	sub	r0, r0, #48	; 0x30
   1299c:	cmp	r0, #10
   129a0:	bcs	129ac <__assert_fail@plt+0x1688>
   129a4:	mov	r0, r4
   129a8:	b	12a24 <__assert_fail@plt+0x1700>
   129ac:	add	r0, r6, #2
   129b0:	bl	17954 <__assert_fail@plt+0x6630>
   129b4:	add	r9, r0, r6
   129b8:	mov	r1, r4
   129bc:	mov	r2, r6
   129c0:	mov	r5, r0
   129c4:	sub	r7, r9, #1
   129c8:	str	r7, [sp, #20]
   129cc:	bl	110e4 <memcpy@plt>
   129d0:	cmp	r6, #2
   129d4:	bcc	129f4 <__assert_fail@plt+0x16d0>
   129d8:	ldrb	r0, [r9, #-1]
   129dc:	cmp	r0, #105	; 0x69
   129e0:	bne	129f4 <__assert_fail@plt+0x16d0>
   129e4:	ldrb	r0, [r7, #-1]
   129e8:	sub	r0, r0, #48	; 0x30
   129ec:	cmp	r0, #10
   129f0:	bcs	12a18 <__assert_fail@plt+0x16f4>
   129f4:	movw	r8, #46527	; 0xb5bf
   129f8:	mov	r0, #66	; 0x42
   129fc:	strb	r0, [r7, #1]
   12a00:	add	r0, r7, #2
   12a04:	movt	r8, #1
   12a08:	str	r0, [sp, #20]
   12a0c:	mov	r0, #0
   12a10:	strb	r0, [r7, #2]
   12a14:	b	12a20 <__assert_fail@plt+0x16fc>
   12a18:	mov	r0, #0
   12a1c:	strb	r0, [r7]
   12a20:	mov	r0, r5
   12a24:	add	r1, sp, #20
   12a28:	add	r3, sp, #8
   12a2c:	mov	r2, #10
   12a30:	str	r8, [sp]
   12a34:	bl	189d0 <__assert_fail@plt+0x76ac>
   12a38:	cmp	r0, #0
   12a3c:	ldreq	r0, [sp, #20]
   12a40:	ldrbeq	r0, [r0]
   12a44:	cmpeq	r0, #0
   12a48:	beq	12a88 <__assert_fail@plt+0x1764>
   12a4c:	mov	r0, r5
   12a50:	bl	1504c <__assert_fail@plt+0x3d28>
   12a54:	movw	r1, #46537	; 0xb5c9
   12a58:	mov	r0, #0
   12a5c:	mov	r2, #5
   12a60:	movt	r1, #1
   12a64:	bl	11108 <dcgettext@plt>
   12a68:	mov	r5, r0
   12a6c:	mov	r0, r4
   12a70:	bl	17150 <__assert_fail@plt+0x5e2c>
   12a74:	mov	r3, r0
   12a78:	mov	r0, #1
   12a7c:	mov	r1, #0
   12a80:	mov	r2, r5
   12a84:	bl	1118c <error@plt>
   12a88:	ldr	r0, [sp, #8]
   12a8c:	ldr	r1, [sp, #12]
   12a90:	orrs	r0, r0, r1
   12a94:	beq	12a4c <__assert_fail@plt+0x1728>
   12a98:	mov	r0, r5
   12a9c:	bl	1504c <__assert_fail@plt+0x3d28>
   12aa0:	ldr	r0, [sp, #8]
   12aa4:	ldr	r1, [sp, #12]
   12aa8:	sub	sp, fp, #24
   12aac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12ab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ab4:	add	fp, sp, #28
   12ab8:	push	{r1}		; (str r1, [sp, #-4]!)
   12abc:	movw	sl, #53532	; 0xd11c
   12ac0:	mov	r8, r0
   12ac4:	mov	r4, #1
   12ac8:	mov	r5, #0
   12acc:	mov	r6, #0
   12ad0:	movt	sl, #2
   12ad4:	ldr	r0, [sl]
   12ad8:	ldrb	r9, [r8]
   12adc:	adds	r5, r5, #1
   12ae0:	adc	r6, r6, #0
   12ae4:	cmp	r0, #256	; 0x100
   12ae8:	bne	12b5c <__assert_fail@plt+0x1838>
   12aec:	cmp	r9, #0
   12af0:	beq	12c04 <__assert_fail@plt+0x18e0>
   12af4:	bl	111d4 <__ctype_b_loc@plt>
   12af8:	ldr	r0, [r0]
   12afc:	mov	r7, r8
   12b00:	b	12b10 <__assert_fail@plt+0x17ec>
   12b04:	ldrb	r9, [r7, #1]!
   12b08:	cmp	r9, #0
   12b0c:	beq	12c04 <__assert_fail@plt+0x18e0>
   12b10:	uxtb	r1, r9
   12b14:	cmp	r1, #10
   12b18:	beq	12b04 <__assert_fail@plt+0x17e0>
   12b1c:	add	r1, r0, r1, lsl #1
   12b20:	ldrh	r1, [r1]
   12b24:	ands	r2, r1, #1
   12b28:	bne	12b04 <__assert_fail@plt+0x17e0>
   12b2c:	tst	r1, #1
   12b30:	bne	12b9c <__assert_fail@plt+0x1878>
   12b34:	ldrb	r1, [r7, #1]!
   12b38:	cmp	r1, #0
   12b3c:	beq	12c04 <__assert_fail@plt+0x18e0>
   12b40:	cmp	r1, #10
   12b44:	beq	12b9c <__assert_fail@plt+0x1878>
   12b48:	add	r1, r0, r1, lsl #1
   12b4c:	ldrh	r1, [r1]
   12b50:	ands	r1, r1, #1
   12b54:	beq	12b34 <__assert_fail@plt+0x1810>
   12b58:	b	12b9c <__assert_fail@plt+0x1878>
   12b5c:	cmp	r9, #0
   12b60:	beq	12b90 <__assert_fail@plt+0x186c>
   12b64:	cmp	r0, r9
   12b68:	mov	r7, r8
   12b6c:	beq	12b84 <__assert_fail@plt+0x1860>
   12b70:	mov	r7, r8
   12b74:	ldrb	r9, [r7, #1]!
   12b78:	cmp	r9, #0
   12b7c:	cmpne	r0, r9
   12b80:	bne	12b74 <__assert_fail@plt+0x1850>
   12b84:	cmp	r9, #0
   12b88:	bne	12b9c <__assert_fail@plt+0x1878>
   12b8c:	b	12c04 <__assert_fail@plt+0x18e0>
   12b90:	mov	r7, r8
   12b94:	cmp	r9, #0
   12b98:	beq	12c04 <__assert_fail@plt+0x18e0>
   12b9c:	mov	r0, #0
   12ba0:	mov	r2, r5
   12ba4:	mov	r3, r6
   12ba8:	strb	r0, [r7]
   12bac:	mov	r0, r8
   12bb0:	bl	12c78 <__assert_fail@plt+0x1954>
   12bb4:	and	r4, r4, r0
   12bb8:	movw	r0, #53644	; 0xd18c
   12bbc:	ldr	r1, [sl]
   12bc0:	movt	r0, #2
   12bc4:	ldr	r0, [r0]
   12bc8:	cmp	r1, #256	; 0x100
   12bcc:	movweq	r1, #32
   12bd0:	ldr	r2, [r0, #20]
   12bd4:	ldr	r3, [r0, #24]
   12bd8:	cmp	r2, r3
   12bdc:	bcs	12bf4 <__assert_fail@plt+0x18d0>
   12be0:	add	r3, r2, #1
   12be4:	add	r8, r7, #1
   12be8:	str	r3, [r0, #20]
   12bec:	strb	r1, [r2]
   12bf0:	b	12ad4 <__assert_fail@plt+0x17b0>
   12bf4:	uxtb	r1, r1
   12bf8:	bl	1127c <__overflow@plt>
   12bfc:	add	r8, r7, #1
   12c00:	b	12ad4 <__assert_fail@plt+0x17b0>
   12c04:	mov	r0, r8
   12c08:	mov	r2, r5
   12c0c:	mov	r3, r6
   12c10:	bl	12c78 <__assert_fail@plt+0x1954>
   12c14:	and	r5, r4, r0
   12c18:	ldr	r0, [sp]
   12c1c:	cmp	r0, #0
   12c20:	beq	12c64 <__assert_fail@plt+0x1940>
   12c24:	movw	r0, #53681	; 0xd1b1
   12c28:	mov	r1, #10
   12c2c:	movt	r0, #2
   12c30:	ldrb	r0, [r0]
   12c34:	cmp	r0, #0
   12c38:	movw	r0, #53644	; 0xd18c
   12c3c:	movt	r0, #2
   12c40:	movwne	r1, #0
   12c44:	ldr	r0, [r0]
   12c48:	ldr	r2, [r0, #20]
   12c4c:	ldr	r3, [r0, #24]
   12c50:	cmp	r2, r3
   12c54:	bcs	12c70 <__assert_fail@plt+0x194c>
   12c58:	add	r3, r2, #1
   12c5c:	str	r3, [r0, #20]
   12c60:	strb	r1, [r2]
   12c64:	mov	r0, r5
   12c68:	sub	sp, fp, #28
   12c6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c70:	bl	1127c <__overflow@plt>
   12c74:	b	12c64 <__assert_fail@plt+0x1940>
   12c78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c7c:	add	fp, sp, #28
   12c80:	sub	sp, sp, #4
   12c84:	vpush	{d8-d11}
   12c88:	sub	sp, sp, #232	; 0xe8
   12c8c:	mov	r9, r0
   12c90:	movw	r0, #54064	; 0xd330
   12c94:	mov	r5, r2
   12c98:	movt	r0, #2
   12c9c:	ldr	r1, [r0]
   12ca0:	cmp	r1, #0
   12ca4:	beq	12d00 <__assert_fail@plt+0x19dc>
   12ca8:	ldrd	r6, [r1]
   12cac:	and	r0, r6, r7
   12cb0:	cmn	r0, #1
   12cb4:	beq	12d8c <__assert_fail@plt+0x1a68>
   12cb8:	mvn	r0, #0
   12cbc:	add	r1, r1, #16
   12cc0:	b	12cdc <__assert_fail@plt+0x19b8>
   12cc4:	ldrd	r6, [r1]
   12cc8:	add	r1, r1, #16
   12ccc:	eor	r2, r7, r0
   12cd0:	eor	r4, r6, r0
   12cd4:	orrs	r2, r4, r2
   12cd8:	beq	12d8c <__assert_fail@plt+0x1a68>
   12cdc:	subs	r2, r5, r6
   12ce0:	sbcs	r2, r3, r7
   12ce4:	bcc	12cc4 <__assert_fail@plt+0x19a0>
   12ce8:	ldr	r2, [r1, #-8]
   12cec:	ldr	r7, [r1, #-4]
   12cf0:	subs	r2, r2, r5
   12cf4:	sbcs	r2, r7, r3
   12cf8:	bcc	12cc4 <__assert_fail@plt+0x19a0>
   12cfc:	b	12d0c <__assert_fail@plt+0x19e8>
   12d00:	eor	r0, r5, #1
   12d04:	orrs	r0, r0, r3
   12d08:	bne	12d8c <__assert_fail@plt+0x1a68>
   12d0c:	movw	r0, #53684	; 0xd1b4
   12d10:	movt	r0, #2
   12d14:	ldr	r4, [r0]
   12d18:	cmp	r4, #0
   12d1c:	beq	12de8 <__assert_fail@plt+0x1ac4>
   12d20:	mov	r0, r9
   12d24:	bl	111f8 <strlen@plt>
   12d28:	mov	r6, r0
   12d2c:	mov	r0, r4
   12d30:	bl	111f8 <strlen@plt>
   12d34:	cmp	r6, r0
   12d38:	bls	12de8 <__assert_fail@plt+0x1ac4>
   12d3c:	add	r1, r9, r6
   12d40:	sub	r6, r1, r0
   12d44:	mov	r0, r4
   12d48:	mov	r1, r6
   12d4c:	bl	11090 <strcmp@plt>
   12d50:	cmp	r0, #0
   12d54:	movw	r0, #53689	; 0xd1b9
   12d58:	movt	r0, #2
   12d5c:	beq	12da8 <__assert_fail@plt+0x1a84>
   12d60:	ldrb	r0, [r0]
   12d64:	cmp	r0, #1
   12d68:	bne	12de8 <__assert_fail@plt+0x1ac4>
   12d6c:	movw	r0, #53632	; 0xd180
   12d70:	movw	r2, #47018	; 0xb7aa
   12d74:	mov	r1, #1
   12d78:	movt	r0, #2
   12d7c:	movt	r2, #1
   12d80:	ldr	r0, [r0]
   12d84:	bl	1124c <__fprintf_chk@plt>
   12d88:	b	12de8 <__assert_fail@plt+0x1ac4>
   12d8c:	movw	r0, #53644	; 0xd18c
   12d90:	movt	r0, #2
   12d94:	ldr	r1, [r0]
   12d98:	mov	r0, r9
   12d9c:	bl	1106c <fputs_unlocked@plt>
   12da0:	mov	r4, #1
   12da4:	b	139e0 <__assert_fail@plt+0x26bc>
   12da8:	mov	r1, #0
   12dac:	strb	r1, [r6]
   12db0:	ldrb	r0, [r0]
   12db4:	cmp	r0, #1
   12db8:	bne	12de8 <__assert_fail@plt+0x1ac4>
   12dbc:	movw	r0, #53632	; 0xd180
   12dc0:	movt	r0, #2
   12dc4:	ldr	r6, [r0]
   12dc8:	mov	r0, r4
   12dcc:	bl	17150 <__assert_fail@plt+0x5e2c>
   12dd0:	movw	r2, #46998	; 0xb796
   12dd4:	mov	r3, r0
   12dd8:	mov	r0, r6
   12ddc:	mov	r1, #1
   12de0:	movt	r2, #1
   12de4:	bl	1124c <__fprintf_chk@plt>
   12de8:	ldrb	r6, [r9]
   12dec:	mov	r4, r9
   12df0:	cmp	r6, #0
   12df4:	beq	12e1c <__assert_fail@plt+0x1af8>
   12df8:	bl	111d4 <__ctype_b_loc@plt>
   12dfc:	ldr	r0, [r0]
   12e00:	mov	r4, r9
   12e04:	uxtb	r1, r6
   12e08:	ldrb	r1, [r0, r1, lsl #1]
   12e0c:	tst	r1, #1
   12e10:	ldrbne	r6, [r4, #1]!
   12e14:	cmpne	r6, #0
   12e18:	bne	12e04 <__assert_fail@plt+0x1ae0>
   12e1c:	movw	r0, #53712	; 0xd1d0
   12e20:	movt	r0, #2
   12e24:	ldr	r0, [r0]
   12e28:	cmp	r0, #0
   12e2c:	beq	12ec4 <__assert_fail@plt+0x1ba0>
   12e30:	cmp	r5, #1
   12e34:	movw	r5, #53676	; 0xd1ac
   12e38:	movt	r5, #2
   12e3c:	bgt	12e54 <__assert_fail@plt+0x1b30>
   12e40:	cmp	r4, r9
   12e44:	bne	12e54 <__assert_fail@plt+0x1b30>
   12e48:	mov	r0, #0
   12e4c:	str	r0, [r5]
   12e50:	b	12e90 <__assert_fail@plt+0x1b6c>
   12e54:	mov	r0, r9
   12e58:	bl	111f8 <strlen@plt>
   12e5c:	movw	r2, #53732	; 0xd1e4
   12e60:	str	r0, [r5]
   12e64:	movt	r2, #2
   12e68:	ldr	r1, [r2]
   12e6c:	cmp	r1, r0
   12e70:	bhi	12e90 <__assert_fail@plt+0x1b6c>
   12e74:	movw	r6, #53736	; 0xd1e8
   12e78:	add	r1, r0, #1
   12e7c:	movt	r6, #2
   12e80:	str	r1, [r2]
   12e84:	ldr	r0, [r6]
   12e88:	bl	1799c <__assert_fail@plt+0x6678>
   12e8c:	str	r0, [r6]
   12e90:	movw	r0, #53689	; 0xd1b9
   12e94:	movt	r0, #2
   12e98:	ldrb	r0, [r0]
   12e9c:	cmp	r0, #0
   12ea0:	beq	12f4c <__assert_fail@plt+0x1c28>
   12ea4:	movw	r0, #53632	; 0xd180
   12ea8:	ldr	r3, [r5]
   12eac:	movw	r2, #47041	; 0xb7c1
   12eb0:	mov	r1, #1
   12eb4:	movt	r0, #2
   12eb8:	movt	r2, #1
   12ebc:	ldr	r0, [r0]
   12ec0:	bl	1124c <__fprintf_chk@plt>
   12ec4:	movw	r0, #53664	; 0xd1a0
   12ec8:	mov	r5, #1000	; 0x3e8
   12ecc:	movt	r0, #2
   12ed0:	ldr	sl, [r0]
   12ed4:	sub	r0, sl, #3
   12ed8:	cmp	r0, #2
   12edc:	movw	r0, #53689	; 0xd1b9
   12ee0:	movt	r0, #2
   12ee4:	movwcc	r5, #1024	; 0x400
   12ee8:	ldrb	r0, [r0]
   12eec:	cmp	r0, #1
   12ef0:	bne	12f68 <__assert_fail@plt+0x1c44>
   12ef4:	movw	r0, #53632	; 0xd180
   12ef8:	mov	r1, r4
   12efc:	mov	r8, r5
   12f00:	movt	r0, #2
   12f04:	ldr	r7, [r0]
   12f08:	mov	r0, #0
   12f0c:	bl	17140 <__assert_fail@plt+0x5e1c>
   12f10:	mov	r6, r0
   12f14:	movw	r0, #53656	; 0xd198
   12f18:	movt	r0, #2
   12f1c:	ldr	r1, [r0]
   12f20:	mov	r0, #1
   12f24:	bl	17140 <__assert_fail@plt+0x5e1c>
   12f28:	movw	r2, #47158	; 0xb836
   12f2c:	mov	r1, #15
   12f30:	stm	sp, {r0, r1}
   12f34:	mov	r0, r7
   12f38:	mov	r1, #1
   12f3c:	mov	r3, r6
   12f40:	movt	r2, #1
   12f44:	bl	1124c <__fprintf_chk@plt>
   12f48:	b	12f68 <__assert_fail@plt+0x1c44>
   12f4c:	movw	r0, #53664	; 0xd1a0
   12f50:	mov	r5, #1000	; 0x3e8
   12f54:	movt	r0, #2
   12f58:	ldr	sl, [r0]
   12f5c:	sub	r0, sl, #3
   12f60:	cmp	r0, #2
   12f64:	movwcc	r5, #1024	; 0x400
   12f68:	mov	r6, r4
   12f6c:	str	r9, [sp, #32]
   12f70:	ldrb	ip, [r6], #1
   12f74:	cmp	ip, #45	; 0x2d
   12f78:	movne	r6, r4
   12f7c:	ldrb	r7, [r6]
   12f80:	sub	r0, r7, #48	; 0x30
   12f84:	cmp	r0, #9
   12f88:	bhi	13038 <__assert_fail@plt+0x1d14>
   12f8c:	vmov.i32	d9, #0	; 0x00000000
   12f90:	vmov.f64	d16, #36	; 0x41200000  10.0
   12f94:	vmov.i32	d17, #0	; 0x00000000
   12f98:	str	sl, [sp, #28]
   12f9c:	mov	r8, #0
   12fa0:	mov	r1, #0
   12fa4:	mov	sl, #0
   12fa8:	str	r5, [sp, #20]
   12fac:	vcmp.f64	d17, #0.0
   12fb0:	mov	r2, #0
   12fb4:	mov	r3, r0
   12fb8:	vmrs	APSR_nzcv, fpscr
   12fbc:	movwne	r2, #1
   12fc0:	cmp	r0, #0
   12fc4:	movwne	r3, #1
   12fc8:	orr	r2, r3, r2
   12fcc:	add	r1, r1, r2
   12fd0:	cmp	r1, #27
   12fd4:	bhi	1354c <__assert_fail@plt+0x2228>
   12fd8:	vmov	s0, r0
   12fdc:	ldrb	r7, [r6, #1]!
   12fe0:	cmp	r1, #15
   12fe4:	movwhi	sl, #1
   12fe8:	sub	r0, r7, #48	; 0x30
   12fec:	vcvt.f64.s32	d18, s0
   12ff0:	cmp	r0, #10
   12ff4:	vmla.f64	d18, d17, d16
   12ff8:	vmov.f64	d17, d18
   12ffc:	bcc	12fac <__assert_fail@plt+0x1c88>
   13000:	vneg.f64	d16, d18
   13004:	cmp	ip, #45	; 0x2d
   13008:	mov	r8, #0
   1300c:	vseleq.f64	d9, d16, d18
   13010:	cmp	sl, #1
   13014:	bhi	1351c <__assert_fail@plt+0x21f8>
   13018:	movw	r0, #53660	; 0xd19c
   1301c:	str	ip, [sp, #24]
   13020:	movt	r0, #2
   13024:	ldr	r8, [r0]
   13028:	movw	r0, #53656	; 0xd198
   1302c:	movt	r0, #2
   13030:	ldr	r5, [r0]
   13034:	b	130ac <__assert_fail@plt+0x1d88>
   13038:	movw	r0, #53660	; 0xd19c
   1303c:	str	ip, [sp, #24]
   13040:	movt	r0, #2
   13044:	ldr	r8, [r0]
   13048:	movw	r0, #53656	; 0xd198
   1304c:	movt	r0, #2
   13050:	ldr	r9, [r0]
   13054:	mov	r0, r6
   13058:	mov	r2, r8
   1305c:	mov	r1, r9
   13060:	bl	112e8 <strncmp@plt>
   13064:	cmp	r0, #0
   13068:	beq	13088 <__assert_fail@plt+0x1d64>
   1306c:	ldr	r9, [sp, #32]
   13070:	vmov.i32	d9, #0	; 0x00000000
   13074:	mov	r8, #0
   13078:	movw	r1, #47447	; 0xb957
   1307c:	mov	sl, #3
   13080:	movt	r1, #1
   13084:	b	13588 <__assert_fail@plt+0x2264>
   13088:	str	r5, [sp, #20]
   1308c:	str	sl, [sp, #28]
   13090:	add	r0, pc, #992	; 0x3e0
   13094:	ldr	r1, [sp, #24]
   13098:	mov	sl, #0
   1309c:	mov	r5, r9
   130a0:	cmp	r1, #45	; 0x2d
   130a4:	addeq	r0, r0, #8
   130a8:	vldr	d9, [r0]
   130ac:	mov	r0, r6
   130b0:	mov	r1, r5
   130b4:	mov	r2, r8
   130b8:	bl	112e8 <strncmp@plt>
   130bc:	cmp	r0, #0
   130c0:	beq	131cc <__assert_fail@plt+0x1ea8>
   130c4:	mov	r9, r6
   130c8:	mov	r8, #0
   130cc:	movw	r5, #53689	; 0xd1b9
   130d0:	movt	r5, #2
   130d4:	ldrb	r0, [r5]
   130d8:	cmp	r0, #1
   130dc:	bne	13108 <__assert_fail@plt+0x1de4>
   130e0:	movw	r0, #53632	; 0xd180
   130e4:	movw	r2, #47252	; 0xb894
   130e8:	mov	r1, #1
   130ec:	str	r8, [sp, #8]
   130f0:	vstr	d9, [sp]
   130f4:	movt	r0, #2
   130f8:	movt	r2, #1
   130fc:	ldr	r0, [r0]
   13100:	bl	1124c <__fprintf_chk@plt>
   13104:	ldrb	r7, [r9]
   13108:	cmp	r7, #0
   1310c:	beq	13280 <__assert_fail@plt+0x1f5c>
   13110:	bl	111d4 <__ctype_b_loc@plt>
   13114:	ldr	r0, [r0]
   13118:	ldrb	r1, [r0, r7, lsl #1]
   1311c:	tst	r1, #1
   13120:	beq	1312c <__assert_fail@plt+0x1e08>
   13124:	ldrb	r7, [r9, #1]!
   13128:	b	13118 <__assert_fail@plt+0x1df4>
   1312c:	movw	r0, #46518	; 0xb5b6
   13130:	mov	r1, r7
   13134:	mov	r2, #9
   13138:	movt	r0, #1
   1313c:	bl	11258 <memchr@plt>
   13140:	cmp	r0, #0
   13144:	beq	132c0 <__assert_fail@plt+0x1f9c>
   13148:	ldr	r0, [sp, #28]
   1314c:	cmp	r0, #0
   13150:	beq	132c8 <__assert_fail@plt+0x1fa4>
   13154:	sub	r0, r7, #69	; 0x45
   13158:	cmp	r0, #21
   1315c:	bhi	13340 <__assert_fail@plt+0x201c>
   13160:	add	r1, pc, #4
   13164:	mov	r7, #1
   13168:	ldr	pc, [r1, r0, lsl #2]
   1316c:	andeq	r3, r1, r4, asr #3
   13170:	andeq	r3, r1, r0, asr #6
   13174:	andeq	r3, r1, r0, asr r3
   13178:	andeq	r3, r1, r0, asr #6
   1317c:	andeq	r3, r1, r0, asr #6
   13180:	andeq	r3, r1, r0, asr #6
   13184:	andeq	r3, r1, r4, ror r3
   13188:	andeq	r3, r1, r0, asr #6
   1318c:	andeq	r3, r1, r8, ror #6
   13190:	andeq	r3, r1, r0, asr #6
   13194:	andeq	r3, r1, r0, asr #6
   13198:	andeq	r3, r1, r0, ror r3
   1319c:	andeq	r3, r1, r0, asr #6
   131a0:	andeq	r3, r1, r0, asr #6
   131a4:	andeq	r3, r1, r0, asr #6
   131a8:	andeq	r3, r1, r8, asr #6
   131ac:	andeq	r3, r1, r0, asr #6
   131b0:	andeq	r3, r1, r0, asr #6
   131b4:	andeq	r3, r1, r0, asr #6
   131b8:	andeq	r3, r1, r0, asr #6
   131bc:	andeq	r3, r1, r8, asr r3
   131c0:	andeq	r3, r1, r0, ror #6
   131c4:	mov	r7, #6
   131c8:	b	13374 <__assert_fail@plt+0x2050>
   131cc:	ldrb	lr, [r6, r8]!
   131d0:	mov	r1, r5
   131d4:	mov	r9, r6
   131d8:	cmp	lr, #45	; 0x2d
   131dc:	addeq	r9, r9, #1
   131e0:	ldrb	r7, [r9]
   131e4:	sub	r5, r7, #48	; 0x30
   131e8:	cmp	r5, #9
   131ec:	bhi	13288 <__assert_fail@plt+0x1f64>
   131f0:	ldr	ip, [sp, #24]
   131f4:	vmov.i32	d17, #0	; 0x00000000
   131f8:	vmov.f64	d16, #36	; 0x41200000  10.0
   131fc:	mov	r8, #0
   13200:	mov	r2, #0
   13204:	mov	r0, #0
   13208:	vcmp.f64	d17, #0.0
   1320c:	mov	r3, #0
   13210:	mov	r1, r5
   13214:	vmrs	APSR_nzcv, fpscr
   13218:	movwne	r3, #1
   1321c:	cmp	r5, #0
   13220:	movwne	r1, #1
   13224:	orr	r1, r1, r3
   13228:	add	r2, r2, r1
   1322c:	cmp	r2, #27
   13230:	bhi	132d0 <__assert_fail@plt+0x1fac>
   13234:	vmov	s0, r5
   13238:	ldrb	r7, [r9, #1]!
   1323c:	cmp	r2, #15
   13240:	movwhi	r0, #1
   13244:	sub	r5, r7, #48	; 0x30
   13248:	vcvt.f64.s32	d18, s0
   1324c:	cmp	r5, #10
   13250:	vmla.f64	d18, d17, d16
   13254:	vmov.f64	d17, d18
   13258:	bcc	13208 <__assert_fail@plt+0x1ee4>
   1325c:	mov	r8, #0
   13260:	cmp	r0, #1
   13264:	bls	132d8 <__assert_fail@plt+0x1fb4>
   13268:	mov	sl, r0
   1326c:	cmp	sl, #6
   13270:	bls	13524 <__assert_fail@plt+0x2200>
   13274:	ldr	r9, [sp, #32]
   13278:	mov	r1, #0
   1327c:	b	13588 <__assert_fail@plt+0x2264>
   13280:	mov	r7, #0
   13284:	b	133e0 <__assert_fail@plt+0x20bc>
   13288:	mov	r0, r9
   1328c:	mov	r2, r8
   13290:	mov	r5, lr
   13294:	bl	112e8 <strncmp@plt>
   13298:	mov	r8, #0
   1329c:	cmp	r0, #0
   132a0:	bne	132f4 <__assert_fail@plt+0x1fd0>
   132a4:	add	r0, pc, #460	; 0x1cc
   132a8:	cmp	r5, #45	; 0x2d
   132ac:	ldr	ip, [sp, #24]
   132b0:	mov	lr, r5
   132b4:	addeq	r0, r0, #8
   132b8:	vldr	d16, [r0]
   132bc:	b	132e8 <__assert_fail@plt+0x1fc4>
   132c0:	ldr	r9, [sp, #32]
   132c4:	b	1355c <__assert_fail@plt+0x2238>
   132c8:	ldr	r9, [sp, #32]
   132cc:	b	1356c <__assert_fail@plt+0x2248>
   132d0:	ldr	r9, [sp, #32]
   132d4:	b	1354c <__assert_fail@plt+0x2228>
   132d8:	vneg.f64	d16, d18
   132dc:	moveq	sl, r0
   132e0:	cmp	lr, #45	; 0x2d
   132e4:	vseleq.f64	d16, d16, d18
   132e8:	mov	r8, #0
   132ec:	cmp	lr, #45	; 0x2d
   132f0:	bne	132fc <__assert_fail@plt+0x1fd8>
   132f4:	ldr	r9, [sp, #32]
   132f8:	b	13078 <__assert_fail@plt+0x1d54>
   132fc:	subs	r8, r9, r6
   13300:	beq	13338 <__assert_fail@plt+0x2014>
   13304:	subs	r0, r8, #1
   13308:	beq	1400c <__assert_fail@plt+0x2ce8>
   1330c:	sub	r1, r9, r6
   13310:	ands	r2, r0, #3
   13314:	sub	r1, r1, #2
   13318:	beq	14014 <__assert_fail@plt+0x2cf0>
   1331c:	vmov.f64	d18, #36	; 0x41200000  10.0
   13320:	vmov.f64	d17, d18
   13324:	vmul.f64	d17, d17, d18
   13328:	subs	r2, r2, #1
   1332c:	sub	r0, r0, #1
   13330:	bne	13324 <__assert_fail@plt+0x2000>
   13334:	b	14018 <__assert_fail@plt+0x2cf4>
   13338:	vmov.f64	d17, #112	; 0x3f800000  1.0
   1333c:	b	1403c <__assert_fail@plt+0x2d18>
   13340:	mov	r7, #0
   13344:	b	13374 <__assert_fail@plt+0x2050>
   13348:	mov	r7, #4
   1334c:	b	13374 <__assert_fail@plt+0x2050>
   13350:	mov	r7, #3
   13354:	b	13374 <__assert_fail@plt+0x2050>
   13358:	mov	r7, #8
   1335c:	b	13374 <__assert_fail@plt+0x2050>
   13360:	mov	r7, #7
   13364:	b	13374 <__assert_fail@plt+0x2050>
   13368:	mov	r7, #2
   1336c:	b	13374 <__assert_fail@plt+0x2050>
   13370:	mov	r7, #5
   13374:	ldr	r0, [sp, #28]
   13378:	add	r6, r9, #1
   1337c:	mov	r8, #0
   13380:	cmp	r0, #1
   13384:	bne	133dc <__assert_fail@plt+0x20b8>
   13388:	ldrb	r0, [r6]
   1338c:	cmp	r0, #105	; 0x69
   13390:	bne	133d4 <__assert_fail@plt+0x20b0>
   13394:	ldrb	r0, [r5]
   13398:	mov	r1, #1024	; 0x400
   1339c:	add	r6, r9, #2
   133a0:	str	r1, [sp, #20]
   133a4:	cmp	r0, #1
   133a8:	bne	133d4 <__assert_fail@plt+0x20b0>
   133ac:	movw	r0, #53632	; 0xd180
   133b0:	movw	r2, #47304	; 0xb8c8
   133b4:	mov	r1, #1024	; 0x400
   133b8:	mov	r3, #1024	; 0x400
   133bc:	movt	r0, #2
   133c0:	movt	r2, #1
   133c4:	str	r1, [sp, #20]
   133c8:	mov	r1, #1
   133cc:	ldr	r0, [r0]
   133d0:	bl	1124c <__fprintf_chk@plt>
   133d4:	mov	r8, #0
   133d8:	b	13404 <__assert_fail@plt+0x20e0>
   133dc:	mov	r9, r6
   133e0:	ldr	r0, [sp, #28]
   133e4:	cmp	r0, #4
   133e8:	bne	13400 <__assert_fail@plt+0x20dc>
   133ec:	ldrb	r0, [r9]
   133f0:	cmp	r0, #105	; 0x69
   133f4:	bne	13470 <__assert_fail@plt+0x214c>
   133f8:	add	r6, r9, #1
   133fc:	b	13404 <__assert_fail@plt+0x20e0>
   13400:	mov	r6, r9
   13404:	ldr	r0, [sp, #20]
   13408:	cmp	r7, #0
   1340c:	vmov	s0, r0
   13410:	vcvt.f64.s32	d16, s0
   13414:	ldr	r9, [sp, #32]
   13418:	beq	13468 <__assert_fail@plt+0x2144>
   1341c:	subs	r0, r7, #1
   13420:	beq	13498 <__assert_fail@plt+0x2174>
   13424:	vmov.f64	d8, d16
   13428:	ands	r2, r0, #3
   1342c:	sub	r1, r7, #2
   13430:	beq	13444 <__assert_fail@plt+0x2120>
   13434:	vmul.f64	d8, d8, d16
   13438:	subs	r2, r2, #1
   1343c:	sub	r0, r0, #1
   13440:	bne	13434 <__assert_fail@plt+0x2110>
   13444:	cmp	r1, #3
   13448:	bcc	1349c <__assert_fail@plt+0x2178>
   1344c:	vmul.f64	d17, d8, d16
   13450:	subs	r0, r0, #4
   13454:	vmul.f64	d17, d17, d16
   13458:	vmul.f64	d17, d17, d16
   1345c:	vmul.f64	d8, d17, d16
   13460:	bne	1344c <__assert_fail@plt+0x2128>
   13464:	b	1349c <__assert_fail@plt+0x2178>
   13468:	vmov.f64	d8, #112	; 0x3f800000  1.0
   1346c:	b	1349c <__assert_fail@plt+0x2178>
   13470:	ldr	r9, [sp, #32]
   13474:	b	1357c <__assert_fail@plt+0x2258>
	...
   13484:	andhi	r0, r0, r0
   13488:			; <UNDEFINED> instruction: 0xffffffff
   1348c:	svcvc	0x00efffff
   13490:			; <UNDEFINED> instruction: 0xffffffff
   13494:			; <UNDEFINED> instruction: 0xffefffff
   13498:	vmov.f64	d8, d16
   1349c:	ldrb	r0, [r5]
   134a0:	cmp	r0, #0
   134a4:	beq	13510 <__assert_fail@plt+0x21ec>
   134a8:	movw	r5, #53632	; 0xd180
   134ac:	ldr	r3, [sp, #20]
   134b0:	movw	r2, #47353	; 0xb8f9
   134b4:	mov	r1, #1
   134b8:	vstr	d8, [sp, #8]
   134bc:	str	r7, [sp]
   134c0:	movt	r5, #2
   134c4:	movt	r2, #1
   134c8:	ldr	r0, [r5]
   134cc:	bl	1124c <__fprintf_chk@plt>
   134d0:	movw	r0, #53689	; 0xd1b9
   134d4:	vmul.f64	d9, d9, d8
   134d8:	movt	r0, #2
   134dc:	ldrb	r0, [r0]
   134e0:	cmp	r0, #1
   134e4:	bne	13514 <__assert_fail@plt+0x21f0>
   134e8:	ldr	r0, [r5]
   134ec:	movw	r2, #47381	; 0xb915
   134f0:	mov	r1, #1
   134f4:	vstr	d9, [sp]
   134f8:	vstr	d9, [sp, #8]
   134fc:	movt	r2, #1
   13500:	bl	1124c <__fprintf_chk@plt>
   13504:	cmp	sl, #2
   13508:	bcs	1351c <__assert_fail@plt+0x21f8>
   1350c:	b	138d4 <__assert_fail@plt+0x25b0>
   13510:	vmul.f64	d9, d9, d8
   13514:	cmp	sl, #2
   13518:	bcc	138d4 <__assert_fail@plt+0x25b0>
   1351c:	cmp	sl, #6
   13520:	bhi	13274 <__assert_fail@plt+0x1f50>
   13524:	add	r0, pc, #4
   13528:	ldr	r9, [sp, #32]
   1352c:	ldr	pc, [r0, sl, lsl #2]
   13530:	andeq	r4, r1, ip, asr r0
   13534:	andeq	r4, r1, ip, asr r0
   13538:	andeq	r3, r1, ip, asr #10
   1353c:	andeq	r3, r1, r8, ror r0
   13540:	andeq	r3, r1, ip, ror #10
   13544:	andeq	r3, r1, ip, asr r5
   13548:	andeq	r3, r1, ip, ror r5
   1354c:	movw	r1, #47411	; 0xb933
   13550:	mov	sl, #2
   13554:	movt	r1, #1
   13558:	b	13588 <__assert_fail@plt+0x2264>
   1355c:	movw	r1, #47520	; 0xb9a0
   13560:	mov	sl, #5
   13564:	movt	r1, #1
   13568:	b	13588 <__assert_fail@plt+0x2264>
   1356c:	movw	r1, #47466	; 0xb96a
   13570:	mov	sl, #4
   13574:	movt	r1, #1
   13578:	b	13588 <__assert_fail@plt+0x2264>
   1357c:	movw	r1, #47548	; 0xb9bc
   13580:	mov	sl, #6
   13584:	movt	r1, #1
   13588:	movw	r0, #53708	; 0xd1cc
   1358c:	movt	r0, #2
   13590:	ldr	r0, [r0]
   13594:	cmp	r0, #3
   13598:	beq	135e0 <__assert_fail@plt+0x22bc>
   1359c:	movw	r0, #53716	; 0xd1d4
   135a0:	mov	r2, #5
   135a4:	movt	r0, #2
   135a8:	ldrb	r7, [r0]
   135ac:	mov	r0, #0
   135b0:	bl	11108 <dcgettext@plt>
   135b4:	mov	r5, r0
   135b8:	mov	r0, r4
   135bc:	cmp	r7, #0
   135c0:	mov	r6, #2
   135c4:	movwne	r6, #0
   135c8:	bl	17150 <__assert_fail@plt+0x5e2c>
   135cc:	mov	r3, r0
   135d0:	mov	r0, r6
   135d4:	mov	r1, #0
   135d8:	mov	r2, r5
   135dc:	bl	1118c <error@plt>
   135e0:	movw	r0, #53512	; 0xd108
   135e4:	movt	r0, #2
   135e8:	ldrd	r0, [r0]
   135ec:	eor	r2, r0, #1
   135f0:	orrs	r2, r2, r1
   135f4:	movw	r2, #53520	; 0xd110
   135f8:	movt	r2, #2
   135fc:	ldrd	r4, [r2]
   13600:	eoreq	r2, r4, #1
   13604:	orrseq	r2, r2, r5
   13608:	beq	1362c <__assert_fail@plt+0x2308>
   1360c:	bl	19e9c <__assert_fail@plt+0x8b78>
   13610:	vmov	d8, r0, r1
   13614:	mov	r0, r4
   13618:	mov	r1, r5
   1361c:	bl	19e9c <__assert_fail@plt+0x8b78>
   13620:	vmov	d16, r0, r1
   13624:	vmul.f64	d17, d9, d8
   13628:	vdiv.f64	d9, d17, d16
   1362c:	cmp	sl, #1
   13630:	bhi	139c8 <__assert_fail@plt+0x26a4>
   13634:	vldr	d16, [pc, #-436]	; 13488 <__assert_fail@plt+0x2164>
   13638:	vldr	d17, [pc, #-432]	; 13490 <__assert_fail@plt+0x216c>
   1363c:	movw	r5, #53536	; 0xd120
   13640:	mov	r1, #0
   13644:	mov	r2, #0
   13648:	mov	r0, #0
   1364c:	movt	r5, #2
   13650:	vcmpe.f64	d9, d16
   13654:	vmrs	APSR_nzcv, fpscr
   13658:	vcmpe.f64	d9, d17
   1365c:	movwls	r1, #1
   13660:	vmrs	APSR_nzcv, fpscr
   13664:	movwge	r2, #1
   13668:	and	r4, r2, r1
   1366c:	ldr	r1, [r5]
   13670:	cmn	r1, #1
   13674:	movne	r8, r1
   13678:	cmp	r4, #1
   1367c:	bne	136d4 <__assert_fail@plt+0x23b0>
   13680:	vcmpe.f64	d9, #0.0
   13684:	vneg.f64	d17, d9
   13688:	vmov.f64	d16, #36	; 0x41200000  10.0
   1368c:	vmov.f64	d18, d9
   13690:	vmrs	APSR_nzcv, fpscr
   13694:	vmovmi.f64	d18, d17
   13698:	vcmpe.f64	d18, d16
   1369c:	vmrs	APSR_nzcv, fpscr
   136a0:	blt	136d4 <__assert_fail@plt+0x23b0>
   136a4:	vmov.f64	d17, d9
   136a8:	mov	r0, #0
   136ac:	vdiv.f64	d17, d17, d16
   136b0:	add	r0, r0, #1
   136b4:	vcmpe.f64	d17, #0.0
   136b8:	vneg.f64	d18, d17
   136bc:	vmov.f64	d19, d17
   136c0:	vmrs	APSR_nzcv, fpscr
   136c4:	vmovmi.f64	d19, d18
   136c8:	vcmpe.f64	d19, d16
   136cc:	vmrs	APSR_nzcv, fpscr
   136d0:	bge	136ac <__assert_fail@plt+0x2388>
   136d4:	movw	r1, #53668	; 0xd1a4
   136d8:	movt	r1, #2
   136dc:	ldr	r7, [r1]
   136e0:	cmp	r7, #0
   136e4:	bne	13750 <__assert_fail@plt+0x242c>
   136e8:	add	r1, r0, r8
   136ec:	cmp	r1, #16
   136f0:	bcc	13750 <__assert_fail@plt+0x242c>
   136f4:	movw	r0, #53708	; 0xd1cc
   136f8:	movt	r0, #2
   136fc:	ldr	r0, [r0]
   13700:	cmp	r0, #3
   13704:	beq	139c8 <__assert_fail@plt+0x26a4>
   13708:	movw	r0, #53716	; 0xd1d4
   1370c:	mov	r4, #2
   13710:	movt	r0, #2
   13714:	ldrb	r0, [r0]
   13718:	cmp	r0, #0
   1371c:	movwne	r4, #0
   13720:	cmp	r8, #0
   13724:	beq	139a0 <__assert_fail@plt+0x267c>
   13728:	movw	r1, #47595	; 0xb9eb
   1372c:	mov	r0, #0
   13730:	mov	r2, #5
   13734:	mov	r5, #0
   13738:	movt	r1, #1
   1373c:	bl	11108 <dcgettext@plt>
   13740:	mov	r2, r0
   13744:	str	r8, [sp, #8]
   13748:	str	r5, [sp, #12]
   1374c:	b	139b8 <__assert_fail@plt+0x2694>
   13750:	cmp	r0, #27
   13754:	bcc	137a4 <__assert_fail@plt+0x2480>
   13758:	movw	r0, #53708	; 0xd1cc
   1375c:	movt	r0, #2
   13760:	ldr	r0, [r0]
   13764:	cmp	r0, #3
   13768:	beq	139c8 <__assert_fail@plt+0x26a4>
   1376c:	movw	r0, #53716	; 0xd1d4
   13770:	movw	r1, #47728	; 0xba70
   13774:	mov	r2, #5
   13778:	movt	r0, #2
   1377c:	movt	r1, #1
   13780:	ldrb	r4, [r0]
   13784:	mov	r0, #0
   13788:	bl	11108 <dcgettext@plt>
   1378c:	cmp	r4, #0
   13790:	mov	r2, r0
   13794:	mov	r0, #2
   13798:	vstr	d9, [sp]
   1379c:	movwne	r0, #0
   137a0:	b	139c0 <__assert_fail@plt+0x269c>
   137a4:	movw	r0, #53528	; 0xd118
   137a8:	sub	r1, fp, #132	; 0x84
   137ac:	movt	r0, #2
   137b0:	ldr	sl, [r0]
   137b4:	movw	r0, #53672	; 0xd1a8
   137b8:	movt	r0, #2
   137bc:	ldrb	r6, [r0]
   137c0:	mov	r0, #37	; 0x25
   137c4:	strb	r0, [fp, #-132]	; 0xffffff7c
   137c8:	cmp	r6, #1
   137cc:	moveq	r0, #39	; 0x27
   137d0:	addne	r9, r1, #1
   137d4:	addeq	r9, r1, #2
   137d8:	strbeq	r0, [fp, #-131]	; 0xffffff7d
   137dc:	movw	r0, #53720	; 0xd1d8
   137e0:	movt	r0, #2
   137e4:	ldr	r0, [r0]
   137e8:	cmp	r0, #0
   137ec:	beq	13818 <__assert_fail@plt+0x24f4>
   137f0:	movw	r1, #47865	; 0xbaf9
   137f4:	str	r0, [sp, #4]
   137f8:	mov	r0, r9
   137fc:	mov	r2, #1
   13800:	mvn	r3, #0
   13804:	movt	r1, #1
   13808:	str	r1, [sp]
   1380c:	mov	r1, #62	; 0x3e
   13810:	bl	11300 <__snprintf_chk@plt>
   13814:	add	r9, r9, r0
   13818:	movw	r0, #53689	; 0xd1b9
   1381c:	movt	r0, #2
   13820:	ldrb	r0, [r0]
   13824:	cmp	r0, #1
   13828:	bne	13848 <__assert_fail@plt+0x2524>
   1382c:	movw	r0, #53632	; 0xd180
   13830:	movw	r2, #47870	; 0xbafe
   13834:	mov	r1, #1
   13838:	movt	r0, #2
   1383c:	movt	r2, #1
   13840:	ldr	r0, [r0]
   13844:	bl	1124c <__fprintf_chk@plt>
   13848:	cmp	r7, #0
   1384c:	beq	13964 <__assert_fail@plt+0x2640>
   13850:	sub	r1, r7, #3
   13854:	mov	r0, #1000	; 0x3e8
   13858:	mov	r6, #0
   1385c:	cmp	r1, #2
   13860:	movwcc	r0, #1024	; 0x400
   13864:	cmp	r4, #0
   13868:	vmov	s0, r0
   1386c:	vcvt.f64.s32	d10, s0
   13870:	beq	139f4 <__assert_fail@plt+0x26d0>
   13874:	vmov	s0, r0
   13878:	vcmpe.f64	d9, #0.0
   1387c:	vneg.f64	d17, d9
   13880:	vmov.f64	d18, d9
   13884:	vmov.f64	d8, d9
   13888:	vmrs	APSR_nzcv, fpscr
   1388c:	vmovmi.f64	d18, d17
   13890:	vcvt.f64.u32	d16, s0
   13894:	vcmpe.f64	d18, d16
   13898:	vmrs	APSR_nzcv, fpscr
   1389c:	blt	139f8 <__assert_fail@plt+0x26d4>
   138a0:	vmov.f64	d8, d9
   138a4:	mov	r6, #0
   138a8:	vdiv.f64	d8, d8, d16
   138ac:	add	r6, r6, #1
   138b0:	vcmpe.f64	d8, #0.0
   138b4:	vneg.f64	d17, d8
   138b8:	vmov.f64	d18, d8
   138bc:	vmrs	APSR_nzcv, fpscr
   138c0:	vmovmi.f64	d18, d17
   138c4:	vcmpe.f64	d18, d16
   138c8:	vmrs	APSR_nzcv, fpscr
   138cc:	bge	138a8 <__assert_fail@plt+0x2584>
   138d0:	b	139f8 <__assert_fail@plt+0x26d4>
   138d4:	cmp	r6, #0
   138d8:	beq	13a88 <__assert_fail@plt+0x2764>
   138dc:	ldrb	r0, [r6]
   138e0:	cmp	r0, #0
   138e4:	beq	13a88 <__assert_fail@plt+0x2764>
   138e8:	movw	r0, #53708	; 0xd1cc
   138ec:	mov	sl, #5
   138f0:	movt	r0, #2
   138f4:	ldr	r0, [r0]
   138f8:	cmp	r0, #3
   138fc:	beq	135e0 <__assert_fail@plt+0x22bc>
   13900:	movw	r0, #53716	; 0xd1d4
   13904:	movw	r1, #47127	; 0xb817
   13908:	mov	r2, #5
   1390c:	mov	sl, #5
   13910:	movt	r0, #2
   13914:	movt	r1, #1
   13918:	ldrb	r7, [r0]
   1391c:	mov	r0, #0
   13920:	bl	11108 <dcgettext@plt>
   13924:	mov	r5, r0
   13928:	mov	r0, #0
   1392c:	mov	r1, r4
   13930:	bl	17140 <__assert_fail@plt+0x5e1c>
   13934:	mov	r4, r0
   13938:	mov	r0, #1
   1393c:	mov	r1, r6
   13940:	bl	17140 <__assert_fail@plt+0x5e1c>
   13944:	cmp	r7, #0
   13948:	str	r0, [sp]
   1394c:	mov	r0, #2
   13950:	mov	r1, #0
   13954:	mov	r2, r5
   13958:	mov	r3, r4
   1395c:	movwne	r0, #0
   13960:	b	135dc <__assert_fail@plt+0x22b8>
   13964:	cmp	r8, #0
   13968:	beq	13b0c <__assert_fail@plt+0x27e8>
   1396c:	subs	r0, r8, #1
   13970:	beq	13b20 <__assert_fail@plt+0x27fc>
   13974:	ands	r3, r0, #3
   13978:	sub	r1, r8, #2
   1397c:	beq	13d38 <__assert_fail@plt+0x2a14>
   13980:	vmov.f64	d17, #36	; 0x41200000  10.0
   13984:	mov	r2, r0
   13988:	vmov.f64	d16, d17
   1398c:	vmul.f64	d16, d16, d17
   13990:	subs	r3, r3, #1
   13994:	sub	r2, r2, #1
   13998:	bne	1398c <__assert_fail@plt+0x2668>
   1399c:	b	13d40 <__assert_fail@plt+0x2a1c>
   139a0:	movw	r1, #47669	; 0xba35
   139a4:	mov	r0, #0
   139a8:	mov	r2, #5
   139ac:	movt	r1, #1
   139b0:	bl	11108 <dcgettext@plt>
   139b4:	mov	r2, r0
   139b8:	mov	r0, r4
   139bc:	vstr	d9, [sp]
   139c0:	mov	r1, #0
   139c4:	bl	1118c <error@plt>
   139c8:	movw	r0, #53644	; 0xd18c
   139cc:	movt	r0, #2
   139d0:	ldr	r1, [r0]
   139d4:	mov	r0, r9
   139d8:	bl	1106c <fputs_unlocked@plt>
   139dc:	mov	r4, #0
   139e0:	mov	r0, r4
   139e4:	sub	sp, fp, #64	; 0x40
   139e8:	vpop	{d8-d11}
   139ec:	add	sp, sp, #4
   139f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139f4:	vmov.f64	d8, d9
   139f8:	movw	r0, #53689	; 0xd1b9
   139fc:	movt	r0, #2
   13a00:	ldrb	r0, [r0]
   13a04:	cmp	r0, #1
   13a08:	bne	13a34 <__assert_fail@plt+0x2710>
   13a0c:	movw	r0, #53632	; 0xd180
   13a10:	movw	r2, #48023	; 0xbb97
   13a14:	mov	r1, #1
   13a18:	str	r6, [sp, #16]
   13a1c:	vstr	d8, [sp]
   13a20:	vstr	d10, [sp, #8]
   13a24:	movt	r0, #2
   13a28:	movt	r2, #1
   13a2c:	ldr	r0, [r0]
   13a30:	bl	1124c <__fprintf_chk@plt>
   13a34:	ldr	r8, [r5]
   13a38:	cmn	r8, #1
   13a3c:	beq	13ad4 <__assert_fail@plt+0x27b0>
   13a40:	add	r1, r6, r6, lsl #1
   13a44:	cmp	r1, r8
   13a48:	movcs	r1, r8
   13a4c:	cmp	r1, #0
   13a50:	beq	13b04 <__assert_fail@plt+0x27e0>
   13a54:	subs	r0, r1, #1
   13a58:	beq	13af8 <__assert_fail@plt+0x27d4>
   13a5c:	ands	r3, r0, #3
   13a60:	sub	r1, r1, #2
   13a64:	beq	13b2c <__assert_fail@plt+0x2808>
   13a68:	vmov.f64	d17, #36	; 0x41200000  10.0
   13a6c:	mov	r2, r0
   13a70:	vmov.f64	d16, d17
   13a74:	vmul.f64	d16, d16, d17
   13a78:	subs	r3, r3, #1
   13a7c:	sub	r2, r2, #1
   13a80:	bne	13a74 <__assert_fail@plt+0x2750>
   13a84:	b	13b34 <__assert_fail@plt+0x2810>
   13a88:	cmp	sl, #1
   13a8c:	bne	13b18 <__assert_fail@plt+0x27f4>
   13a90:	movw	r0, #53688	; 0xd1b8
   13a94:	mov	sl, #1
   13a98:	movt	r0, #2
   13a9c:	ldrb	r0, [r0]
   13aa0:	cmp	r0, #1
   13aa4:	bne	135e0 <__assert_fail@plt+0x22bc>
   13aa8:	movw	r1, #47081	; 0xb7e9
   13aac:	mov	r0, #0
   13ab0:	mov	r2, #5
   13ab4:	movt	r1, #1
   13ab8:	bl	11108 <dcgettext@plt>
   13abc:	mov	r5, r0
   13ac0:	mov	r0, r4
   13ac4:	bl	17150 <__assert_fail@plt+0x5e2c>
   13ac8:	mov	r3, r0
   13acc:	mov	r0, #0
   13ad0:	b	135d4 <__assert_fail@plt+0x22b0>
   13ad4:	vcmpe.f64	d8, #0.0
   13ad8:	vneg.f64	d16, d8
   13adc:	vmov.f64	d17, #36	; 0x41200000  10.0
   13ae0:	vmov.f64	d18, d8
   13ae4:	vmrs	APSR_nzcv, fpscr
   13ae8:	vmovmi.f64	d18, d16
   13aec:	vcmpe.f64	d18, d17
   13af0:	vmrs	APSR_nzcv, fpscr
   13af4:	bpl	13b04 <__assert_fail@plt+0x27e0>
   13af8:	vmov.f64	d11, #36	; 0x41200000  10.0
   13afc:	vmul.f64	d8, d8, d11
   13b00:	b	13ba8 <__assert_fail@plt+0x2884>
   13b04:	vmov.f64	d11, #112	; 0x3f800000  1.0
   13b08:	b	13ba8 <__assert_fail@plt+0x2884>
   13b0c:	vmov.f64	d8, #112	; 0x3f800000  1.0
   13b10:	vmov.f64	d0, d9
   13b14:	b	13db4 <__assert_fail@plt+0x2a90>
   13b18:	mov	sl, #0
   13b1c:	b	135e0 <__assert_fail@plt+0x22bc>
   13b20:	vmov.f64	d8, #36	; 0x41200000  10.0
   13b24:	vmul.f64	d0, d9, d8
   13b28:	b	13db4 <__assert_fail@plt+0x2a90>
   13b2c:	vmov.f64	d16, #36	; 0x41200000  10.0
   13b30:	mov	r2, r0
   13b34:	cmp	r1, #3
   13b38:	bcc	13b58 <__assert_fail@plt+0x2834>
   13b3c:	vmov.f64	d17, #36	; 0x41200000  10.0
   13b40:	vmul.f64	d16, d16, d17
   13b44:	subs	r2, r2, #4
   13b48:	vmul.f64	d16, d16, d17
   13b4c:	vmul.f64	d16, d16, d17
   13b50:	vmul.f64	d16, d16, d17
   13b54:	bne	13b40 <__assert_fail@plt+0x281c>
   13b58:	ands	r2, r0, #3
   13b5c:	beq	13b7c <__assert_fail@plt+0x2858>
   13b60:	vmov.f64	d17, #36	; 0x41200000  10.0
   13b64:	vmov.f64	d11, d17
   13b68:	vmul.f64	d11, d11, d17
   13b6c:	subs	r2, r2, #1
   13b70:	sub	r0, r0, #1
   13b74:	bne	13b68 <__assert_fail@plt+0x2844>
   13b78:	b	13b80 <__assert_fail@plt+0x285c>
   13b7c:	vmov.f64	d11, #36	; 0x41200000  10.0
   13b80:	cmp	r1, #3
   13b84:	bcc	13ba4 <__assert_fail@plt+0x2880>
   13b88:	vmov.f64	d17, #36	; 0x41200000  10.0
   13b8c:	vmul.f64	d18, d11, d17
   13b90:	subs	r0, r0, #4
   13b94:	vmul.f64	d18, d18, d17
   13b98:	vmul.f64	d18, d18, d17
   13b9c:	vmul.f64	d11, d18, d17
   13ba0:	bne	13b8c <__assert_fail@plt+0x2868>
   13ba4:	vmul.f64	d8, d8, d16
   13ba8:	vmov.f64	d0, d8
   13bac:	mov	r0, sl
   13bb0:	bl	14088 <__assert_fail@plt+0x2d64>
   13bb4:	vdiv.f64	d8, d0, d11
   13bb8:	vcmpe.f64	d8, #0.0
   13bbc:	vneg.f64	d16, d8
   13bc0:	vmov.f64	d17, d8
   13bc4:	vmrs	APSR_nzcv, fpscr
   13bc8:	vmovmi.f64	d17, d16
   13bcc:	vcmpe.f64	d17, d10
   13bd0:	vmrs	APSR_nzcv, fpscr
   13bd4:	blt	13be0 <__assert_fail@plt+0x28bc>
   13bd8:	vdiv.f64	d8, d8, d10
   13bdc:	add	r6, r6, #1
   13be0:	movw	sl, #53689	; 0xd1b9
   13be4:	vcmp.f64	d8, #0.0
   13be8:	mov	r4, #0
   13bec:	movt	sl, #2
   13bf0:	vmrs	APSR_nzcv, fpscr
   13bf4:	beq	13c28 <__assert_fail@plt+0x2904>
   13bf8:	vcmpe.f64	d8, #0.0
   13bfc:	vneg.f64	d16, d8
   13c00:	vmov.f64	d17, #36	; 0x41200000  10.0
   13c04:	vmov.f64	d18, d8
   13c08:	vmrs	APSR_nzcv, fpscr
   13c0c:	vmovmi.f64	d18, d16
   13c10:	vcmpe.f64	d18, d17
   13c14:	vmrs	APSR_nzcv, fpscr
   13c18:	bpl	13c28 <__assert_fail@plt+0x2904>
   13c1c:	cmp	r6, #0
   13c20:	mov	r4, r6
   13c24:	movwne	r4, #1
   13c28:	ldrb	r0, [sl]
   13c2c:	cmp	r0, #1
   13c30:	bne	13c60 <__assert_fail@plt+0x293c>
   13c34:	movw	r0, #53632	; 0xd180
   13c38:	movw	r2, #48058	; 0xbbba
   13c3c:	mov	r1, #1
   13c40:	str	r6, [sp, #16]
   13c44:	vstr	d8, [sp]
   13c48:	vstr	d10, [sp, #8]
   13c4c:	movt	r0, #2
   13c50:	movt	r2, #1
   13c54:	ldr	r0, [r0]
   13c58:	bl	1124c <__fprintf_chk@plt>
   13c5c:	ldr	r8, [r5]
   13c60:	movw	r0, #9574	; 0x2566
   13c64:	cmn	r8, #1
   13c68:	movt	r0, #115	; 0x73
   13c6c:	movne	r4, r8
   13c70:	cmp	r6, #8
   13c74:	str	r0, [r9, #3]
   13c78:	movw	r0, #10798	; 0x2a2e
   13c7c:	movt	r0, #26188	; 0x664c
   13c80:	str	r0, [r9]
   13c84:	bhi	13c98 <__assert_fail@plt+0x2974>
   13c88:	movw	r0, #48672	; 0xbe20
   13c8c:	movt	r0, #1
   13c90:	ldr	r0, [r0, r6, lsl #2]
   13c94:	b	13ca0 <__assert_fail@plt+0x297c>
   13c98:	movw	r0, #48143	; 0xbc0f
   13c9c:	movt	r0, #1
   13ca0:	sub	r1, fp, #132	; 0x84
   13ca4:	movw	r5, #53684	; 0xd1b4
   13ca8:	str	r0, [sp, #16]
   13cac:	vstr	d8, [sp, #8]
   13cb0:	add	r0, sp, #36	; 0x24
   13cb4:	mov	r2, #1
   13cb8:	mov	r3, #128	; 0x80
   13cbc:	stm	sp, {r1, r4}
   13cc0:	mov	r1, #127	; 0x7f
   13cc4:	movt	r5, #2
   13cc8:	bl	11300 <__snprintf_chk@plt>
   13ccc:	cmp	r0, #127	; 0x7f
   13cd0:	bcs	14060 <__assert_fail@plt+0x2d3c>
   13cd4:	cmp	r7, #4
   13cd8:	bne	13cfc <__assert_fail@plt+0x29d8>
   13cdc:	cmp	r6, #0
   13ce0:	beq	13cfc <__assert_fail@plt+0x29d8>
   13ce4:	movw	r1, #46516	; 0xb5b4
   13ce8:	rsb	r2, r0, #127	; 0x7f
   13cec:	add	r0, sp, #36	; 0x24
   13cf0:	mov	r3, #128	; 0x80
   13cf4:	movt	r1, #1
   13cf8:	bl	11084 <__strncat_chk@plt>
   13cfc:	ldrb	r0, [sl]
   13d00:	cmp	r0, #1
   13d04:	bne	13e4c <__assert_fail@plt+0x2b28>
   13d08:	movw	r0, #53632	; 0xd180
   13d0c:	movt	r0, #2
   13d10:	ldr	r4, [r0]
   13d14:	add	r0, sp, #36	; 0x24
   13d18:	bl	17150 <__assert_fail@plt+0x5e2c>
   13d1c:	movw	r2, #48106	; 0xbbea
   13d20:	mov	r3, r0
   13d24:	mov	r0, r4
   13d28:	mov	r1, #1
   13d2c:	movt	r2, #1
   13d30:	bl	1124c <__fprintf_chk@plt>
   13d34:	b	13e4c <__assert_fail@plt+0x2b28>
   13d38:	vmov.f64	d16, #36	; 0x41200000  10.0
   13d3c:	mov	r2, r0
   13d40:	cmp	r1, #3
   13d44:	bcc	13d64 <__assert_fail@plt+0x2a40>
   13d48:	vmov.f64	d17, #36	; 0x41200000  10.0
   13d4c:	vmul.f64	d16, d16, d17
   13d50:	subs	r2, r2, #4
   13d54:	vmul.f64	d16, d16, d17
   13d58:	vmul.f64	d16, d16, d17
   13d5c:	vmul.f64	d16, d16, d17
   13d60:	bne	13d4c <__assert_fail@plt+0x2a28>
   13d64:	ands	r2, r0, #3
   13d68:	beq	13d88 <__assert_fail@plt+0x2a64>
   13d6c:	vmov.f64	d17, #36	; 0x41200000  10.0
   13d70:	vmov.f64	d8, d17
   13d74:	vmul.f64	d8, d8, d17
   13d78:	subs	r2, r2, #1
   13d7c:	sub	r0, r0, #1
   13d80:	bne	13d74 <__assert_fail@plt+0x2a50>
   13d84:	b	13d8c <__assert_fail@plt+0x2a68>
   13d88:	vmov.f64	d8, #36	; 0x41200000  10.0
   13d8c:	cmp	r1, #3
   13d90:	bcc	13db0 <__assert_fail@plt+0x2a8c>
   13d94:	vmov.f64	d17, #36	; 0x41200000  10.0
   13d98:	vmul.f64	d18, d8, d17
   13d9c:	subs	r0, r0, #4
   13da0:	vmul.f64	d18, d18, d17
   13da4:	vmul.f64	d18, d18, d17
   13da8:	vmul.f64	d8, d18, d17
   13dac:	bne	13d98 <__assert_fail@plt+0x2a74>
   13db0:	vmul.f64	d0, d9, d16
   13db4:	mov	r0, sl
   13db8:	bl	14088 <__assert_fail@plt+0x2d64>
   13dbc:	vdiv.f64	d8, d0, d8
   13dc0:	movw	sl, #53689	; 0xd1b9
   13dc4:	movt	sl, #2
   13dc8:	ldrb	r0, [sl]
   13dcc:	cmp	r0, #1
   13dd0:	bne	13e08 <__assert_fail@plt+0x2ae4>
   13dd4:	movw	r0, #53632	; 0xd180
   13dd8:	movw	r1, #47888	; 0xbb10
   13ddc:	movw	r2, #47937	; 0xbb41
   13de0:	cmp	r6, #0
   13de4:	mov	r3, r8
   13de8:	vstr	d8, [sp]
   13dec:	movt	r0, #2
   13df0:	movt	r1, #1
   13df4:	movt	r2, #1
   13df8:	ldr	r0, [r0]
   13dfc:	movne	r2, r1
   13e00:	mov	r1, #1
   13e04:	bl	1124c <__fprintf_chk@plt>
   13e08:	mov	r0, #0
   13e0c:	vstr	d8, [sp, #8]
   13e10:	mov	r1, #128	; 0x80
   13e14:	mov	r2, #1
   13e18:	mov	r3, #128	; 0x80
   13e1c:	strb	r0, [r9, #4]
   13e20:	movw	r0, #10798	; 0x2a2e
   13e24:	movt	r0, #26188	; 0x664c
   13e28:	str	r0, [r9]
   13e2c:	sub	r0, fp, #132	; 0x84
   13e30:	stm	sp, {r0, r8}
   13e34:	add	r0, sp, #36	; 0x24
   13e38:	bl	11300 <__snprintf_chk@plt>
   13e3c:	movw	r5, #53684	; 0xd1b4
   13e40:	cmp	r0, #128	; 0x80
   13e44:	movt	r5, #2
   13e48:	bcs	14060 <__assert_fail@plt+0x2d3c>
   13e4c:	ldr	r4, [r5]
   13e50:	cmp	r4, #0
   13e54:	beq	13e78 <__assert_fail@plt+0x2b54>
   13e58:	add	r5, sp, #36	; 0x24
   13e5c:	mov	r0, r5
   13e60:	bl	111f8 <strlen@plt>
   13e64:	rsb	r2, r0, #127	; 0x7f
   13e68:	mov	r0, r5
   13e6c:	mov	r1, r4
   13e70:	mov	r3, #128	; 0x80
   13e74:	bl	11084 <__strncat_chk@plt>
   13e78:	ldrb	r0, [sl]
   13e7c:	cmp	r0, #1
   13e80:	bne	13eb4 <__assert_fail@plt+0x2b90>
   13e84:	movw	r0, #53632	; 0xd180
   13e88:	movt	r0, #2
   13e8c:	ldr	r4, [r0]
   13e90:	add	r0, sp, #36	; 0x24
   13e94:	bl	17150 <__assert_fail@plt+0x5e2c>
   13e98:	movw	r2, #47795	; 0xbab3
   13e9c:	str	r0, [sp, #8]
   13ea0:	mov	r0, r4
   13ea4:	mov	r1, #1
   13ea8:	vstr	d9, [sp]
   13eac:	movt	r2, #1
   13eb0:	bl	1124c <__fprintf_chk@plt>
   13eb4:	movw	r0, #53676	; 0xd1ac
   13eb8:	movt	r0, #2
   13ebc:	ldr	r4, [r0]
   13ec0:	cmp	r4, #0
   13ec4:	beq	13f54 <__assert_fail@plt+0x2c30>
   13ec8:	add	r0, sp, #36	; 0x24
   13ecc:	bl	111f8 <strlen@plt>
   13ed0:	cmp	r0, r4
   13ed4:	bcs	13f54 <__assert_fail@plt+0x2c30>
   13ed8:	movw	r0, #53732	; 0xd1e4
   13edc:	movw	r5, #53736	; 0xd1e8
   13ee0:	mov	r3, #2
   13ee4:	str	r4, [fp, #-132]	; 0xffffff7c
   13ee8:	movt	r0, #2
   13eec:	movt	r5, #2
   13ef0:	ldr	r2, [r0]
   13ef4:	movw	r0, #53680	; 0xd1b0
   13ef8:	ldr	r1, [r5]
   13efc:	movt	r0, #2
   13f00:	ldrb	r0, [r0]
   13f04:	eor	r0, r0, #1
   13f08:	stm	sp, {r0, r3}
   13f0c:	add	r0, sp, #36	; 0x24
   13f10:	sub	r3, fp, #132	; 0x84
   13f14:	bl	15074 <__assert_fail@plt+0x3d50>
   13f18:	ldrb	r0, [sl]
   13f1c:	cmp	r0, #1
   13f20:	bne	13fa8 <__assert_fail@plt+0x2c84>
   13f24:	movw	r0, #53632	; 0xd180
   13f28:	movt	r0, #2
   13f2c:	ldr	r4, [r0]
   13f30:	ldr	r0, [r5]
   13f34:	bl	17150 <__assert_fail@plt+0x5e2c>
   13f38:	movw	r2, #47844	; 0xbae4
   13f3c:	mov	r3, r0
   13f40:	mov	r0, r4
   13f44:	mov	r1, #1
   13f48:	movt	r2, #1
   13f4c:	bl	1124c <__fprintf_chk@plt>
   13f50:	b	13fa8 <__assert_fail@plt+0x2c84>
   13f54:	add	r0, sp, #36	; 0x24
   13f58:	bl	111f8 <strlen@plt>
   13f5c:	movw	r2, #53732	; 0xd1e4
   13f60:	add	r3, r0, #1
   13f64:	movt	r2, #2
   13f68:	ldr	r1, [r2]
   13f6c:	cmp	r1, r3
   13f70:	bls	13f84 <__assert_fail@plt+0x2c60>
   13f74:	movw	r0, #53736	; 0xd1e8
   13f78:	movt	r0, #2
   13f7c:	ldr	r0, [r0]
   13f80:	b	13fa0 <__assert_fail@plt+0x2c7c>
   13f84:	movw	r4, #53736	; 0xd1e8
   13f88:	add	r1, r0, #2
   13f8c:	movt	r4, #2
   13f90:	str	r1, [r2]
   13f94:	ldr	r0, [r4]
   13f98:	bl	1799c <__assert_fail@plt+0x6678>
   13f9c:	str	r0, [r4]
   13fa0:	add	r1, sp, #36	; 0x24
   13fa4:	bl	1115c <strcpy@plt>
   13fa8:	movw	r0, #53724	; 0xd1dc
   13fac:	movt	r0, #2
   13fb0:	ldr	r0, [r0]
   13fb4:	cmp	r0, #0
   13fb8:	beq	13fcc <__assert_fail@plt+0x2ca8>
   13fbc:	movw	r1, #53644	; 0xd18c
   13fc0:	movt	r1, #2
   13fc4:	ldr	r1, [r1]
   13fc8:	bl	1106c <fputs_unlocked@plt>
   13fcc:	movw	r5, #53644	; 0xd18c
   13fd0:	movw	r0, #53736	; 0xd1e8
   13fd4:	movt	r0, #2
   13fd8:	movt	r5, #2
   13fdc:	ldr	r1, [r5]
   13fe0:	ldr	r0, [r0]
   13fe4:	bl	1106c <fputs_unlocked@plt>
   13fe8:	movw	r0, #53728	; 0xd1e0
   13fec:	mov	r4, #1
   13ff0:	movt	r0, #2
   13ff4:	ldr	r0, [r0]
   13ff8:	cmp	r0, #0
   13ffc:	beq	139e0 <__assert_fail@plt+0x26bc>
   14000:	ldr	r1, [r5]
   14004:	bl	1106c <fputs_unlocked@plt>
   14008:	b	139e0 <__assert_fail@plt+0x26bc>
   1400c:	vmov.f64	d17, #36	; 0x41200000  10.0
   14010:	b	1403c <__assert_fail@plt+0x2d18>
   14014:	vmov.f64	d17, #36	; 0x41200000  10.0
   14018:	cmp	r1, #3
   1401c:	bcc	1403c <__assert_fail@plt+0x2d18>
   14020:	vmov.f64	d18, #36	; 0x41200000  10.0
   14024:	vmul.f64	d17, d17, d18
   14028:	subs	r0, r0, #4
   1402c:	vmul.f64	d17, d17, d18
   14030:	vmul.f64	d17, d17, d18
   14034:	vmul.f64	d17, d17, d18
   14038:	bne	14024 <__assert_fail@plt+0x2d00>
   1403c:	vdiv.f64	d16, d16, d17
   14040:	cmp	ip, #45	; 0x2d
   14044:	vneg.f64	d17, d16
   14048:	vseleq.f64	d16, d17, d16
   1404c:	cmp	sl, #1
   14050:	vadd.f64	d9, d9, d16
   14054:	bls	130cc <__assert_fail@plt+0x1da8>
   14058:	b	1351c <__assert_fail@plt+0x21f8>
   1405c:	bl	112f4 <abort@plt>
   14060:	movw	r1, #47980	; 0xbb6c
   14064:	mov	r0, #0
   14068:	mov	r2, #5
   1406c:	movt	r1, #1
   14070:	bl	11108 <dcgettext@plt>
   14074:	mov	r2, r0
   14078:	mov	r0, #1
   1407c:	mov	r1, #0
   14080:	vstr	d8, [sp]
   14084:	bl	1118c <error@plt>
   14088:	push	{r4, r5, fp, lr}
   1408c:	add	fp, sp, #8
   14090:	vpush	{d8-d9}
   14094:	vldr	d16, [pc, #276]	; 141b0 <__assert_fail@plt+0x2e8c>
   14098:	mov	r4, r0
   1409c:	vmov.f64	d8, d0
   140a0:	vmul.f64	d16, d0, d16
   140a4:	vmov	r0, r1, d16
   140a8:	bl	19f5c <__assert_fail@plt+0x8c38>
   140ac:	bl	19eb0 <__assert_fail@plt+0x8b8c>
   140b0:	cmp	r4, #4
   140b4:	bhi	14168 <__assert_fail@plt+0x2e44>
   140b8:	vmov	d17, r0, r1
   140bc:	vldr	d16, [pc, #244]	; 141b8 <__assert_fail@plt+0x2e94>
   140c0:	add	r0, pc, #8
   140c4:	vmul.f64	d9, d17, d16
   140c8:	vsub.f64	d8, d8, d9
   140cc:	ldr	pc, [r0, r4, lsl #2]
   140d0:	andeq	r4, r1, r0, lsr r1
   140d4:	strdeq	r4, [r1], -r0
   140d8:	andeq	r4, r1, r4, ror #1
   140dc:	andeq	r4, r1, r4, ror r1
   140e0:	andeq	r4, r1, ip, ror r1
   140e4:	vcmpe.f64	d8, #0.0
   140e8:	vmrs	APSR_nzcv, fpscr
   140ec:	bpl	14130 <__assert_fail@plt+0x2e0c>
   140f0:	vneg.f64	d8, d8
   140f4:	vmov	r0, r1, d8
   140f8:	bl	19f5c <__assert_fail@plt+0x8c38>
   140fc:	mov	r4, r0
   14100:	mov	r5, r1
   14104:	bl	19eb0 <__assert_fail@plt+0x8b8c>
   14108:	vmov	d16, r0, r1
   1410c:	adds	r2, r4, #1
   14110:	adc	r1, r5, #0
   14114:	vcmpe.f64	d16, d8
   14118:	vmrs	APSR_nzcv, fpscr
   1411c:	movpl	r2, r4
   14120:	movpl	r1, r5
   14124:	rsbs	r0, r2, #0
   14128:	rsc	r1, r1, #0
   1412c:	b	1419c <__assert_fail@plt+0x2e78>
   14130:	vmov	r0, r1, d8
   14134:	bl	19f5c <__assert_fail@plt+0x8c38>
   14138:	mov	r4, r0
   1413c:	mov	r5, r1
   14140:	bl	19eb0 <__assert_fail@plt+0x8b8c>
   14144:	mov	r2, r0
   14148:	adds	r0, r4, #1
   1414c:	vmov	d16, r2, r1
   14150:	adc	r1, r5, #0
   14154:	vcmpe.f64	d8, d16
   14158:	vmrs	APSR_nzcv, fpscr
   1415c:	movle	r0, r4
   14160:	movle	r1, r5
   14164:	b	1419c <__assert_fail@plt+0x2e78>
   14168:	vmov.i32	d0, #0	; 0x00000000
   1416c:	vpop	{d8-d9}
   14170:	pop	{r4, r5, fp, pc}
   14174:	vmov	r0, r1, d8
   14178:	b	14198 <__assert_fail@plt+0x2e74>
   1417c:	vcmpe.f64	d8, #0.0
   14180:	vmov.f64	d16, #224	; 0xbf000000 -0.5
   14184:	vmov.f64	d17, #96	; 0x3f000000  0.5
   14188:	vmrs	APSR_nzcv, fpscr
   1418c:	vmovmi.f64	d17, d16
   14190:	vadd.f64	d16, d8, d17
   14194:	vmov	r0, r1, d16
   14198:	bl	19f5c <__assert_fail@plt+0x8c38>
   1419c:	bl	19eb0 <__assert_fail@plt+0x8b8c>
   141a0:	vmov	d16, r0, r1
   141a4:	vadd.f64	d0, d9, d16
   141a8:	vpop	{d8-d9}
   141ac:	pop	{r4, r5, fp, pc}
   141b0:	andeq	r0, r0, r0
   141b4:	stccc	0, cr0, [r0], {-0}
   141b8:	andeq	r0, r0, r0
   141bc:	mvnmi	r0, #0
   141c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141c4:	add	fp, sp, #28
   141c8:	sub	sp, sp, #20
   141cc:	mov	lr, r0
   141d0:	ands	r0, r1, #1
   141d4:	mov	r2, #0
   141d8:	str	r1, [sp]
   141dc:	str	r0, [sp, #4]
   141e0:	beq	1421c <__assert_fail@plt+0x2ef8>
   141e4:	movw	r1, #48864	; 0xbee0
   141e8:	mov	r0, lr
   141ec:	mov	r4, lr
   141f0:	movt	r1, #1
   141f4:	bl	11090 <strcmp@plt>
   141f8:	cmp	r0, #0
   141fc:	clz	r0, r0
   14200:	mov	lr, r4
   14204:	mov	r2, #0
   14208:	mov	r8, #0
   1420c:	lsr	sl, r0, #5
   14210:	addeq	lr, lr, #1
   14214:	mov	r1, sl
   14218:	b	14228 <__assert_fail@plt+0x2f04>
   1421c:	mov	sl, #0
   14220:	mov	r8, #0
   14224:	mov	r1, #0
   14228:	movw	ip, #54068	; 0xd334
   1422c:	mov	r9, #1
   14230:	mov	r5, r1
   14234:	mov	r0, #0
   14238:	mov	r6, #0
   1423c:	movt	ip, #2
   14240:	ldrb	r7, [lr]
   14244:	cmp	r7, #44	; 0x2c
   14248:	beq	143b8 <__assert_fail@plt+0x3094>
   1424c:	cmp	r7, #45	; 0x2d
   14250:	bne	14294 <__assert_fail@plt+0x2f70>
   14254:	tst	r5, #1
   14258:	bne	148e0 <__assert_fail@plt+0x35bc>
   1425c:	orrs	r0, sl, r8
   14260:	eoreq	r0, r1, #1
   14264:	tsteq	r0, #1
   14268:	beq	14854 <__assert_fail@plt+0x3530>
   1426c:	ands	r6, r1, #1
   14270:	mov	r5, #1
   14274:	mov	r9, sl
   14278:	mov	sl, #0
   1427c:	mov	r0, #0
   14280:	add	lr, lr, #1
   14284:	movne	r6, r8
   14288:	moveq	r9, r5
   1428c:	mov	r8, #0
   14290:	b	14240 <__assert_fail@plt+0x2f1c>
   14294:	str	r5, [sp, #8]
   14298:	mov	r5, sl
   1429c:	mov	sl, r8
   142a0:	mov	r4, lr
   142a4:	str	r2, [sp, #16]
   142a8:	str	r1, [sp, #12]
   142ac:	mov	r8, r0
   142b0:	bl	111d4 <__ctype_b_loc@plt>
   142b4:	mov	r3, r8
   142b8:	mov	r8, sl
   142bc:	mov	sl, r5
   142c0:	ldr	r5, [sp, #8]
   142c4:	ldr	r1, [sp, #12]
   142c8:	ldr	r2, [sp, #16]
   142cc:	movw	ip, #54068	; 0xd334
   142d0:	mov	lr, r4
   142d4:	cmp	r7, #0
   142d8:	movt	ip, #2
   142dc:	beq	143b8 <__assert_fail@plt+0x3094>
   142e0:	ldr	r0, [r0]
   142e4:	add	r0, r0, r7, lsl #1
   142e8:	ldrh	r0, [r0]
   142ec:	ands	r0, r0, #1
   142f0:	bne	143b8 <__assert_fail@plt+0x3094>
   142f4:	sub	r0, r7, #48	; 0x30
   142f8:	cmp	r0, #9
   142fc:	bhi	1490c <__assert_fail@plt+0x35e8>
   14300:	movw	r1, #53740	; 0xd1ec
   14304:	movt	r1, #2
   14308:	ldr	r7, [r1]
   1430c:	cmp	r7, #0
   14310:	mov	r1, r7
   14314:	movwne	r1, #1
   14318:	tst	r3, r1
   1431c:	movweq	r1, #53740	; 0xd1ec
   14320:	moveq	r7, lr
   14324:	movteq	r1, #2
   14328:	streq	lr, [r1]
   1432c:	movw	r1, #39321	; 0x9999
   14330:	movt	r1, #39321	; 0x9999
   14334:	subs	r1, r1, sl
   14338:	movw	r1, #39321	; 0x9999
   1433c:	movt	r1, #6553	; 0x1999
   14340:	sbcs	r1, r1, r8
   14344:	bcc	14868 <__assert_fail@plt+0x3544>
   14348:	mov	r1, #10
   1434c:	add	r3, r8, r8, lsl #2
   14350:	umull	r1, r2, sl, r1
   14354:	add	r2, r2, r3, lsl #1
   14358:	adds	r1, r1, r0
   1435c:	adc	r0, r2, r0, asr #31
   14360:	subs	r2, r1, sl
   14364:	sbcs	r2, r0, r8
   14368:	mov	r2, #0
   1436c:	movwcc	r2, #1
   14370:	cmp	r2, #0
   14374:	moveq	r8, r0
   14378:	moveq	sl, r1
   1437c:	cmp	r2, #0
   14380:	bne	14868 <__assert_fail@plt+0x3544>
   14384:	mvn	r1, #0
   14388:	eor	r0, sl, r1
   1438c:	eor	r1, r8, r1
   14390:	orrs	r0, r0, r1
   14394:	beq	14868 <__assert_fail@plt+0x3544>
   14398:	ldr	r2, [sp, #16]
   1439c:	ldr	r1, [sp, #12]
   143a0:	eor	r0, r5, #1
   143a4:	add	lr, lr, #1
   143a8:	orr	r1, r1, r0
   143ac:	orr	r2, r2, r5
   143b0:	mov	r0, #1
   143b4:	b	14240 <__assert_fail@plt+0x2f1c>
   143b8:	tst	r5, #1
   143bc:	beq	14448 <__assert_fail@plt+0x3124>
   143c0:	orr	r0, r1, r2
   143c4:	mov	r1, r9
   143c8:	mov	r9, #1
   143cc:	movw	r4, #54064	; 0xd330
   143d0:	ands	r7, r0, #1
   143d4:	str	r1, [sp, #16]
   143d8:	movt	r4, #2
   143dc:	movne	r9, r1
   143e0:	ldr	r1, [sp, #4]
   143e4:	movne	r7, r6
   143e8:	cmp	r1, #0
   143ec:	movw	r1, #53744	; 0xd1f0
   143f0:	movt	r1, #2
   143f4:	tsteq	r0, #1
   143f8:	beq	14900 <__assert_fail@plt+0x35dc>
   143fc:	tst	r2, #1
   14400:	beq	14498 <__assert_fail@plt+0x3174>
   14404:	subs	r0, sl, r9
   14408:	sbcs	r0, r8, r7
   1440c:	bcc	14960 <__assert_fail@plt+0x363c>
   14410:	ldr	r5, [ip]
   14414:	ldr	r0, [r1]
   14418:	cmp	r5, r0
   1441c:	bne	1450c <__assert_fail@plt+0x31e8>
   14420:	ldr	r0, [r4]
   14424:	mov	r2, #16
   14428:	mov	r5, lr
   1442c:	bl	17b00 <__assert_fail@plt+0x67dc>
   14430:	movw	ip, #54068	; 0xd334
   14434:	mov	lr, r5
   14438:	str	r0, [r4]
   1443c:	movt	ip, #2
   14440:	ldr	r5, [ip]
   14444:	b	14510 <__assert_fail@plt+0x31ec>
   14448:	movw	r4, #54064	; 0xd330
   1444c:	movw	r1, #53744	; 0xd1f0
   14450:	orrs	r0, sl, r8
   14454:	movt	r4, #2
   14458:	movt	r1, #2
   1445c:	beq	14854 <__assert_fail@plt+0x3530>
   14460:	ldr	r5, [ip]
   14464:	ldr	r0, [r1]
   14468:	cmp	r5, r0
   1446c:	bne	144d0 <__assert_fail@plt+0x31ac>
   14470:	ldr	r0, [r4]
   14474:	mov	r2, #16
   14478:	mov	r5, lr
   1447c:	bl	17b00 <__assert_fail@plt+0x67dc>
   14480:	movw	ip, #54068	; 0xd334
   14484:	mov	lr, r5
   14488:	str	r0, [r4]
   1448c:	movt	ip, #2
   14490:	ldr	r5, [ip]
   14494:	b	144d4 <__assert_fail@plt+0x31b0>
   14498:	ldr	r5, [ip]
   1449c:	ldr	r0, [r1]
   144a0:	cmp	r5, r0
   144a4:	bne	144ec <__assert_fail@plt+0x31c8>
   144a8:	ldr	r0, [r4]
   144ac:	mov	r2, #16
   144b0:	mov	r5, lr
   144b4:	bl	17b00 <__assert_fail@plt+0x67dc>
   144b8:	movw	ip, #54068	; 0xd334
   144bc:	mov	lr, r5
   144c0:	str	r0, [r4]
   144c4:	movt	ip, #2
   144c8:	ldr	r5, [ip]
   144cc:	b	144f0 <__assert_fail@plt+0x31cc>
   144d0:	ldr	r0, [r4]
   144d4:	vmov.32	d16[0], sl
   144d8:	add	r2, r0, r5, lsl #4
   144dc:	vmov.32	d16[1], r8
   144e0:	vorr	d17, d16, d16
   144e4:	vst1.64	{d16-d17}, [r2]
   144e8:	b	14524 <__assert_fail@plt+0x3200>
   144ec:	ldr	r0, [r4]
   144f0:	mov	r2, r0
   144f4:	mvn	r3, #0
   144f8:	str	r9, [r2, r5, lsl #4]!
   144fc:	str	r7, [r2, #4]
   14500:	str	r3, [r2, #8]
   14504:	str	r3, [r2, #12]
   14508:	b	14528 <__assert_fail@plt+0x3204>
   1450c:	ldr	r0, [r4]
   14510:	mov	r2, r0
   14514:	str	r9, [r2, r5, lsl #4]!
   14518:	stmib	r2, {r7, sl}
   1451c:	str	r8, [r2, #12]
   14520:	ldr	r9, [sp, #16]
   14524:	mov	r7, r6
   14528:	add	r1, r5, #1
   1452c:	str	r1, [ip]
   14530:	ldrb	r2, [lr]
   14534:	cmp	r2, #0
   14538:	beq	14560 <__assert_fail@plt+0x323c>
   1453c:	mov	sl, #0
   14540:	mov	r8, #0
   14544:	mov	r1, #0
   14548:	mov	r2, #0
   1454c:	mov	r5, #0
   14550:	mov	r0, #0
   14554:	mov	r6, r7
   14558:	add	lr, lr, #1
   1455c:	b	14240 <__assert_fail@plt+0x2f1c>
   14560:	cmp	r1, #0
   14564:	beq	1498c <__assert_fail@plt+0x3668>
   14568:	movw	r3, #18848	; 0x49a0
   1456c:	mov	r2, #16
   14570:	movt	r3, #1
   14574:	bl	112c4 <qsort@plt>
   14578:	movw	lr, #54068	; 0xd334
   1457c:	movt	lr, #2
   14580:	ldr	r8, [lr]
   14584:	cmp	r8, #0
   14588:	beq	1463c <__assert_fail@plt+0x3318>
   1458c:	mov	r6, #0
   14590:	b	1459c <__assert_fail@plt+0x3278>
   14594:	cmp	r6, r8
   14598:	bcs	14640 <__assert_fail@plt+0x331c>
   1459c:	mov	sl, r6
   145a0:	add	r6, r6, #1
   145a4:	cmp	r6, r8
   145a8:	bcs	14594 <__assert_fail@plt+0x3270>
   145ac:	mvn	r0, #-268435455	; 0xf0000001
   145b0:	sub	r9, r0, sl
   145b4:	ldr	r5, [r4]
   145b8:	add	r1, r5, sl, lsl #4
   145bc:	mov	r0, r5
   145c0:	ldr	r7, [r0, r6, lsl #4]!
   145c4:	ldr	r2, [r1, #8]!
   145c8:	ldr	r3, [r1, #4]
   145cc:	ldr	r0, [r0, #4]
   145d0:	subs	r7, r2, r7
   145d4:	sbcs	r0, r3, r0
   145d8:	bcc	14594 <__assert_fail@plt+0x3270>
   145dc:	add	r0, r5, r6, lsl #4
   145e0:	ldrd	r4, [r0, #8]
   145e4:	subs	r7, r2, r4
   145e8:	sbcs	r7, r3, r5
   145ec:	mov	r7, #0
   145f0:	movwcc	r7, #1
   145f4:	cmp	r7, #0
   145f8:	movne	r2, r4
   145fc:	movne	r3, r5
   14600:	movw	r4, #54064	; 0xd330
   14604:	strd	r2, [r1]
   14608:	add	r2, r9, r8
   1460c:	add	r1, r0, #16
   14610:	movt	r4, #2
   14614:	lsl	r2, r2, #4
   14618:	bl	110c0 <memmove@plt>
   1461c:	movw	lr, #54068	; 0xd334
   14620:	movt	lr, #2
   14624:	ldr	r0, [lr]
   14628:	sub	r8, r0, #1
   1462c:	cmp	r6, r8
   14630:	str	r8, [lr]
   14634:	bcc	145b4 <__assert_fail@plt+0x3290>
   14638:	b	14594 <__assert_fail@plt+0x3270>
   1463c:	mov	r8, #0
   14640:	ldr	r0, [sp]
   14644:	tst	r0, #2
   14648:	beq	14810 <__assert_fail@plt+0x34ec>
   1464c:	movw	r1, #53744	; 0xd1f0
   14650:	ldr	r7, [r4]
   14654:	mov	r0, #0
   14658:	movt	r1, #2
   1465c:	str	r0, [lr]
   14660:	str	r0, [r4]
   14664:	str	r0, [r1]
   14668:	ldr	r6, [r7]
   1466c:	ldr	r5, [r7, #4]
   14670:	subs	r1, r6, #2
   14674:	sbcs	r1, r5, #0
   14678:	bcc	146d0 <__assert_fail@plt+0x33ac>
   1467c:	movw	r1, #53744	; 0xd1f0
   14680:	mov	r0, #0
   14684:	mov	r2, #16
   14688:	mov	r9, #0
   1468c:	movt	r1, #2
   14690:	bl	17b00 <__assert_fail@plt+0x67dc>
   14694:	movw	lr, #54068	; 0xd334
   14698:	mov	r2, #1
   1469c:	mov	r3, r0
   146a0:	str	r0, [r4]
   146a4:	movt	lr, #2
   146a8:	ldr	r1, [lr]
   146ac:	str	r2, [r3, r1, lsl #4]!
   146b0:	subs	r2, r6, #1
   146b4:	add	ip, r1, #1
   146b8:	sbc	r6, r5, #0
   146bc:	str	r9, [r3, #4]
   146c0:	str	r2, [r3, #8]
   146c4:	str	r6, [r3, #12]
   146c8:	str	ip, [lr]
   146cc:	b	146d4 <__assert_fail@plt+0x33b0>
   146d0:	mov	ip, #0
   146d4:	cmp	r8, #2
   146d8:	str	r7, [sp, #16]
   146dc:	bcc	14774 <__assert_fail@plt+0x3450>
   146e0:	add	r5, r7, #16
   146e4:	sub	r7, r8, #1
   146e8:	b	14710 <__assert_fail@plt+0x33ec>
   146ec:	mov	r1, r0
   146f0:	str	r9, [r1, ip, lsl #4]!
   146f4:	add	ip, ip, #1
   146f8:	stmib	r1, {r6, sl}
   146fc:	str	r4, [r1, #12]
   14700:	str	ip, [lr]
   14704:	add	r5, r5, #16
   14708:	subs	r7, r7, #1
   1470c:	beq	14774 <__assert_fail@plt+0x3450>
   14710:	ldr	r6, [r5, #-8]
   14714:	ldr	r4, [r5, #-4]
   14718:	ldm	r5, {r2, r3}
   1471c:	adds	r9, r6, #1
   14720:	adc	r6, r4, #0
   14724:	eor	r1, r9, r2
   14728:	eor	r4, r6, r3
   1472c:	orrs	r1, r1, r4
   14730:	beq	14704 <__assert_fail@plt+0x33e0>
   14734:	movw	r1, #53744	; 0xd1f0
   14738:	subs	sl, r2, #1
   1473c:	movt	r1, #2
   14740:	sbc	r4, r3, #0
   14744:	ldr	r2, [r1]
   14748:	cmp	ip, r2
   1474c:	bne	146ec <__assert_fail@plt+0x33c8>
   14750:	mov	r2, #16
   14754:	bl	17b00 <__assert_fail@plt+0x67dc>
   14758:	movw	lr, #54068	; 0xd334
   1475c:	movw	r1, #54064	; 0xd330
   14760:	movt	lr, #2
   14764:	movt	r1, #2
   14768:	ldr	ip, [lr]
   1476c:	str	r0, [r1]
   14770:	b	146ec <__assert_fail@plt+0x33c8>
   14774:	ldr	r4, [sp, #16]
   14778:	mvn	r1, #0
   1477c:	add	r2, r4, r8, lsl #4
   14780:	ldrd	r2, [r2, #-8]
   14784:	eor	r7, r3, r1
   14788:	eor	r6, r2, r1
   1478c:	orrs	r7, r6, r7
   14790:	beq	147f4 <__assert_fail@plt+0x34d0>
   14794:	movw	r1, #53744	; 0xd1f0
   14798:	adds	r6, r2, #1
   1479c:	movt	r1, #2
   147a0:	adc	r5, r3, #0
   147a4:	ldr	r1, [r1]
   147a8:	cmp	ip, r1
   147ac:	bne	147d8 <__assert_fail@plt+0x34b4>
   147b0:	movw	r1, #53744	; 0xd1f0
   147b4:	mov	r2, #16
   147b8:	movt	r1, #2
   147bc:	bl	17b00 <__assert_fail@plt+0x67dc>
   147c0:	movw	lr, #54068	; 0xd334
   147c4:	movw	r1, #54064	; 0xd330
   147c8:	movt	lr, #2
   147cc:	movt	r1, #2
   147d0:	ldr	ip, [lr]
   147d4:	str	r0, [r1]
   147d8:	str	r6, [r0, ip, lsl #4]!
   147dc:	mvn	r1, #0
   147e0:	str	r5, [r0, #4]
   147e4:	str	r1, [r0, #8]
   147e8:	str	r1, [r0, #12]
   147ec:	add	r0, ip, #1
   147f0:	str	r0, [lr]
   147f4:	mov	r0, r4
   147f8:	bl	1504c <__assert_fail@plt+0x3d28>
   147fc:	movw	lr, #54068	; 0xd334
   14800:	movw	r4, #54064	; 0xd330
   14804:	movt	lr, #2
   14808:	movt	r4, #2
   1480c:	ldr	r8, [lr]
   14810:	ldr	r0, [r4]
   14814:	add	r1, r8, #1
   14818:	mov	r5, r4
   1481c:	mov	r4, lr
   14820:	str	r1, [lr]
   14824:	lsl	r1, r1, #4
   14828:	bl	1799c <__assert_fail@plt+0x6678>
   1482c:	ldr	r1, [r4]
   14830:	str	r0, [r5]
   14834:	add	r0, r0, r1, lsl #4
   14838:	mvn	r1, #0
   1483c:	str	r1, [r0, #-16]
   14840:	str	r1, [r0, #-12]
   14844:	str	r1, [r0, #-8]
   14848:	str	r1, [r0, #-4]
   1484c:	sub	sp, fp, #28
   14850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14854:	movw	r0, #48805	; 0xbea5
   14858:	movw	r1, #48760	; 0xbe78
   1485c:	movt	r0, #1
   14860:	movt	r1, #1
   14864:	b	148f0 <__assert_fail@plt+0x35cc>
   14868:	movw	r1, #48891	; 0xbefb
   1486c:	mov	r0, r7
   14870:	movt	r1, #1
   14874:	bl	1130c <strspn@plt>
   14878:	mov	r1, r0
   1487c:	mov	r0, r7
   14880:	bl	17e1c <__assert_fail@plt+0x6af8>
   14884:	ldr	r2, [sp]
   14888:	mov	r4, r0
   1488c:	movw	r0, #48940	; 0xbf2c
   14890:	movw	r1, #48902	; 0xbf06
   14894:	movt	r0, #1
   14898:	movt	r1, #1
   1489c:	tst	r2, #4
   148a0:	mov	r2, #5
   148a4:	moveq	r1, r0
   148a8:	mov	r0, #0
   148ac:	bl	11108 <dcgettext@plt>
   148b0:	mov	r5, r0
   148b4:	mov	r0, r4
   148b8:	bl	17150 <__assert_fail@plt+0x5e2c>
   148bc:	mov	r3, r0
   148c0:	mov	r0, #0
   148c4:	mov	r1, #0
   148c8:	mov	r2, r5
   148cc:	bl	1118c <error@plt>
   148d0:	mov	r0, r4
   148d4:	bl	1504c <__assert_fail@plt+0x3d28>
   148d8:	mov	r0, #1
   148dc:	bl	11420 <__assert_fail@plt+0xfc>
   148e0:	movw	r0, #48740	; 0xbe64
   148e4:	movw	r1, #48708	; 0xbe44
   148e8:	movt	r0, #1
   148ec:	movt	r1, #1
   148f0:	ldr	r2, [sp]
   148f4:	tst	r2, #4
   148f8:	moveq	r1, r0
   148fc:	b	14968 <__assert_fail@plt+0x3644>
   14900:	movw	r1, #48832	; 0xbec0
   14904:	movt	r1, #1
   14908:	b	14968 <__assert_fail@plt+0x3644>
   1490c:	ldr	r2, [sp]
   14910:	movw	r0, #49004	; 0xbf6c
   14914:	movw	r1, #48969	; 0xbf49
   14918:	mov	r5, lr
   1491c:	movt	r0, #1
   14920:	movt	r1, #1
   14924:	tst	r2, #4
   14928:	mov	r2, #5
   1492c:	moveq	r1, r0
   14930:	mov	r0, #0
   14934:	bl	11108 <dcgettext@plt>
   14938:	mov	r4, r0
   1493c:	mov	r0, r5
   14940:	bl	17150 <__assert_fail@plt+0x5e2c>
   14944:	mov	r3, r0
   14948:	mov	r0, #0
   1494c:	mov	r1, #0
   14950:	mov	r2, r4
   14954:	bl	1118c <error@plt>
   14958:	mov	r0, #1
   1495c:	bl	11420 <__assert_fail@plt+0xfc>
   14960:	movw	r1, #48866	; 0xbee2
   14964:	movt	r1, #1
   14968:	mov	r0, #0
   1496c:	mov	r2, #5
   14970:	bl	11108 <dcgettext@plt>
   14974:	mov	r2, r0
   14978:	mov	r0, #0
   1497c:	mov	r1, #0
   14980:	bl	1118c <error@plt>
   14984:	mov	r0, #1
   14988:	bl	11420 <__assert_fail@plt+0xfc>
   1498c:	movw	r0, #49068	; 0xbfac
   14990:	movw	r1, #49027	; 0xbf83
   14994:	movt	r0, #1
   14998:	movt	r1, #1
   1499c:	b	148f0 <__assert_fail@plt+0x35cc>
   149a0:	ldr	r2, [r0]
   149a4:	ldr	r1, [r1]
   149a8:	mov	r0, #0
   149ac:	cmp	r2, r1
   149b0:	movwgt	r0, #1
   149b4:	mvnlt	r0, #0
   149b8:	bx	lr
   149bc:	mov	r0, #1
   149c0:	b	11420 <__assert_fail@plt+0xfc>
   149c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149c8:	add	fp, sp, #28
   149cc:	sub	sp, sp, #12
   149d0:	mov	r4, r3
   149d4:	mov	r6, r2
   149d8:	mov	r5, r1
   149dc:	mov	sl, r0
   149e0:	bl	111f8 <strlen@plt>
   149e4:	ldr	r8, [r5]
   149e8:	cmp	r8, #0
   149ec:	beq	14aac <__assert_fail@plt+0x3788>
   149f0:	mov	r7, r0
   149f4:	mov	r0, #0
   149f8:	add	r9, r5, #4
   149fc:	mov	r5, #0
   14a00:	str	r6, [sp, #4]
   14a04:	str	r0, [sp]
   14a08:	mvn	r0, #0
   14a0c:	str	r0, [sp, #8]
   14a10:	b	14a2c <__assert_fail@plt+0x3708>
   14a14:	str	r5, [sp, #8]
   14a18:	ldr	r8, [r9, r5, lsl #2]
   14a1c:	add	r6, r6, r4
   14a20:	add	r5, r5, #1
   14a24:	cmp	r8, #0
   14a28:	beq	14a94 <__assert_fail@plt+0x3770>
   14a2c:	mov	r0, r8
   14a30:	mov	r1, sl
   14a34:	mov	r2, r7
   14a38:	bl	112e8 <strncmp@plt>
   14a3c:	cmp	r0, #0
   14a40:	bne	14a18 <__assert_fail@plt+0x36f4>
   14a44:	mov	r0, r8
   14a48:	bl	111f8 <strlen@plt>
   14a4c:	cmp	r0, r7
   14a50:	beq	14ab0 <__assert_fail@plt+0x378c>
   14a54:	ldr	r0, [sp, #8]
   14a58:	cmn	r0, #1
   14a5c:	beq	14a14 <__assert_fail@plt+0x36f0>
   14a60:	ldr	r0, [sp, #4]
   14a64:	cmp	r0, #0
   14a68:	beq	14a88 <__assert_fail@plt+0x3764>
   14a6c:	ldr	r1, [sp, #8]
   14a70:	mov	r2, r4
   14a74:	mla	r0, r1, r4, r0
   14a78:	mov	r1, r6
   14a7c:	bl	111ec <bcmp@plt>
   14a80:	cmp	r0, #0
   14a84:	beq	14a18 <__assert_fail@plt+0x36f4>
   14a88:	mov	r0, #1
   14a8c:	str	r0, [sp]
   14a90:	b	14a18 <__assert_fail@plt+0x36f4>
   14a94:	ldr	r0, [sp]
   14a98:	tst	r0, #1
   14a9c:	ldr	r0, [sp, #8]
   14aa0:	mvnne	r0, #1
   14aa4:	sub	sp, fp, #28
   14aa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14aac:	mvn	r5, #0
   14ab0:	mov	r0, r5
   14ab4:	sub	sp, fp, #28
   14ab8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14abc:	push	{r4, r5, r6, r7, fp, lr}
   14ac0:	add	fp, sp, #16
   14ac4:	mov	r5, r0
   14ac8:	ldr	r0, [r1]
   14acc:	mvn	r4, #0
   14ad0:	cmp	r0, #0
   14ad4:	beq	14b00 <__assert_fail@plt+0x37dc>
   14ad8:	add	r7, r1, #4
   14adc:	mov	r6, #0
   14ae0:	mov	r1, r5
   14ae4:	bl	11090 <strcmp@plt>
   14ae8:	cmp	r0, #0
   14aec:	beq	14b08 <__assert_fail@plt+0x37e4>
   14af0:	ldr	r0, [r7, r6, lsl #2]
   14af4:	add	r6, r6, #1
   14af8:	cmp	r0, #0
   14afc:	bne	14ae0 <__assert_fail@plt+0x37bc>
   14b00:	mov	r0, r4
   14b04:	pop	{r4, r5, r6, r7, fp, pc}
   14b08:	mov	r0, r6
   14b0c:	pop	{r4, r5, r6, r7, fp, pc}
   14b10:	push	{r4, r5, r6, sl, fp, lr}
   14b14:	add	fp, sp, #16
   14b18:	sub	sp, sp, #8
   14b1c:	mov	r5, r0
   14b20:	movw	r0, #49106	; 0xbfd2
   14b24:	mov	r4, r1
   14b28:	movw	r1, #49133	; 0xbfed
   14b2c:	cmn	r2, #1
   14b30:	mov	r2, #5
   14b34:	movt	r0, #1
   14b38:	movt	r1, #1
   14b3c:	moveq	r1, r0
   14b40:	mov	r0, #0
   14b44:	bl	11108 <dcgettext@plt>
   14b48:	mov	r6, r0
   14b4c:	mov	r0, #0
   14b50:	mov	r1, #8
   14b54:	mov	r2, r4
   14b58:	bl	16b80 <__assert_fail@plt+0x585c>
   14b5c:	mov	r4, r0
   14b60:	mov	r0, #1
   14b64:	mov	r1, r5
   14b68:	bl	17140 <__assert_fail@plt+0x5e1c>
   14b6c:	str	r0, [sp]
   14b70:	mov	r0, #0
   14b74:	mov	r1, #0
   14b78:	mov	r2, r6
   14b7c:	mov	r3, r4
   14b80:	bl	1118c <error@plt>
   14b84:	sub	sp, fp, #16
   14b88:	pop	{r4, r5, r6, sl, fp, pc}
   14b8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b90:	add	fp, sp, #28
   14b94:	sub	sp, sp, #4
   14b98:	mov	sl, r1
   14b9c:	movw	r1, #49162	; 0xc00a
   14ba0:	mov	r4, r2
   14ba4:	mov	r6, r0
   14ba8:	mov	r0, #0
   14bac:	mov	r2, #5
   14bb0:	mov	r8, #0
   14bb4:	movt	r1, #1
   14bb8:	bl	11108 <dcgettext@plt>
   14bbc:	movw	r1, #53632	; 0xd180
   14bc0:	movt	r1, #2
   14bc4:	ldr	r1, [r1]
   14bc8:	bl	1106c <fputs_unlocked@plt>
   14bcc:	ldr	r7, [r6]
   14bd0:	cmp	r7, #0
   14bd4:	beq	14c90 <__assert_fail@plt+0x396c>
   14bd8:	add	r0, r6, #4
   14bdc:	mov	r9, #0
   14be0:	mov	r6, #0
   14be4:	str	r0, [sp]
   14be8:	cmp	r9, #0
   14bec:	bne	14c44 <__assert_fail@plt+0x3920>
   14bf0:	mov	r5, #0
   14bf4:	movw	r0, #53632	; 0xd180
   14bf8:	movt	r0, #2
   14bfc:	ldr	r6, [r0]
   14c00:	mov	r0, r7
   14c04:	bl	17150 <__assert_fail@plt+0x5e2c>
   14c08:	movw	r2, #49183	; 0xc01f
   14c0c:	mov	r3, r0
   14c10:	mov	r0, r6
   14c14:	mov	r1, #1
   14c18:	movt	r2, #1
   14c1c:	bl	1124c <__fprintf_chk@plt>
   14c20:	add	r6, sl, r5
   14c24:	ldr	r0, [sp]
   14c28:	add	r8, r8, r4
   14c2c:	ldr	r7, [r0, -r9, lsl #2]
   14c30:	sub	r9, r9, #1
   14c34:	cmp	r7, #0
   14c38:	beq	14c90 <__assert_fail@plt+0x396c>
   14c3c:	cmp	r9, #0
   14c40:	beq	14bf0 <__assert_fail@plt+0x38cc>
   14c44:	add	r1, sl, r8
   14c48:	mov	r0, r6
   14c4c:	mov	r2, r4
   14c50:	bl	111ec <bcmp@plt>
   14c54:	cmp	r0, #0
   14c58:	mov	r5, r8
   14c5c:	bne	14bf4 <__assert_fail@plt+0x38d0>
   14c60:	movw	r0, #53632	; 0xd180
   14c64:	movt	r0, #2
   14c68:	ldr	r5, [r0]
   14c6c:	mov	r0, r7
   14c70:	bl	17150 <__assert_fail@plt+0x5e2c>
   14c74:	movw	r2, #49191	; 0xc027
   14c78:	mov	r3, r0
   14c7c:	mov	r0, r5
   14c80:	mov	r1, #1
   14c84:	movt	r2, #1
   14c88:	bl	1124c <__fprintf_chk@plt>
   14c8c:	b	14c24 <__assert_fail@plt+0x3900>
   14c90:	movw	r0, #53632	; 0xd180
   14c94:	movt	r0, #2
   14c98:	ldr	r0, [r0]
   14c9c:	ldr	r1, [r0, #20]
   14ca0:	ldr	r2, [r0, #24]
   14ca4:	cmp	r1, r2
   14ca8:	addcc	r2, r1, #1
   14cac:	strcc	r2, [r0, #20]
   14cb0:	movcc	r0, #10
   14cb4:	strbcc	r0, [r1]
   14cb8:	subcc	sp, fp, #28
   14cbc:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cc0:	mov	r1, #10
   14cc4:	sub	sp, fp, #28
   14cc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ccc:	b	1127c <__overflow@plt>
   14cd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14cd4:	add	fp, sp, #28
   14cd8:	sub	sp, sp, #20
   14cdc:	mov	r9, r0
   14ce0:	ldr	r0, [fp, #16]
   14ce4:	mov	r8, r3
   14ce8:	mov	sl, r2
   14cec:	mov	r7, r1
   14cf0:	cmp	r0, #0
   14cf4:	beq	14db4 <__assert_fail@plt+0x3a90>
   14cf8:	mov	r0, r7
   14cfc:	str	r9, [sp, #8]
   14d00:	str	r8, [sp, #16]
   14d04:	bl	111f8 <strlen@plt>
   14d08:	ldr	r9, [sl]
   14d0c:	cmp	r9, #0
   14d10:	beq	14e24 <__assert_fail@plt+0x3b00>
   14d14:	str	sl, [sp, #4]
   14d18:	add	r8, sl, #4
   14d1c:	ldr	sl, [sp, #16]
   14d20:	mov	r4, r0
   14d24:	mov	r0, #0
   14d28:	mvn	r6, #0
   14d2c:	mov	r5, #0
   14d30:	str	r0, [sp, #12]
   14d34:	b	14d54 <__assert_fail@plt+0x3a30>
   14d38:	mov	r6, r5
   14d3c:	ldr	r9, [r8, r5, lsl #2]
   14d40:	ldr	r0, [fp, #8]
   14d44:	add	r5, r5, #1
   14d48:	add	sl, sl, r0
   14d4c:	cmp	r9, #0
   14d50:	beq	14df4 <__assert_fail@plt+0x3ad0>
   14d54:	mov	r0, r9
   14d58:	mov	r1, r7
   14d5c:	mov	r2, r4
   14d60:	bl	112e8 <strncmp@plt>
   14d64:	cmp	r0, #0
   14d68:	bne	14d3c <__assert_fail@plt+0x3a18>
   14d6c:	mov	r0, r9
   14d70:	bl	111f8 <strlen@plt>
   14d74:	cmp	r0, r4
   14d78:	beq	14ea8 <__assert_fail@plt+0x3b84>
   14d7c:	cmn	r6, #1
   14d80:	beq	14d38 <__assert_fail@plt+0x3a14>
   14d84:	ldr	r0, [sp, #16]
   14d88:	cmp	r0, #0
   14d8c:	beq	14da8 <__assert_fail@plt+0x3a84>
   14d90:	ldr	r2, [fp, #8]
   14d94:	mov	r1, sl
   14d98:	mla	r0, r6, r2, r0
   14d9c:	bl	111ec <bcmp@plt>
   14da0:	cmp	r0, #0
   14da4:	beq	14d3c <__assert_fail@plt+0x3a18>
   14da8:	mov	r0, #1
   14dac:	str	r0, [sp, #12]
   14db0:	b	14d3c <__assert_fail@plt+0x3a18>
   14db4:	ldr	r0, [sl]
   14db8:	movw	r4, #49106	; 0xbfd2
   14dbc:	movt	r4, #1
   14dc0:	cmp	r0, #0
   14dc4:	beq	14e34 <__assert_fail@plt+0x3b10>
   14dc8:	add	r5, sl, #4
   14dcc:	mov	r6, #0
   14dd0:	mov	r1, r7
   14dd4:	bl	11090 <strcmp@plt>
   14dd8:	cmp	r0, #0
   14ddc:	beq	14e0c <__assert_fail@plt+0x3ae8>
   14de0:	ldr	r0, [r5, r6, lsl #2]
   14de4:	add	r6, r6, #1
   14de8:	cmp	r0, #0
   14dec:	bne	14dd0 <__assert_fail@plt+0x3aac>
   14df0:	b	14e34 <__assert_fail@plt+0x3b10>
   14df4:	ldr	r0, [sp, #12]
   14df8:	ldr	r8, [sp, #16]
   14dfc:	ldr	sl, [sp, #4]
   14e00:	ldr	r9, [sp, #8]
   14e04:	tst	r0, #1
   14e08:	bne	14e18 <__assert_fail@plt+0x3af4>
   14e0c:	cmn	r6, #1
   14e10:	bgt	14e9c <__assert_fail@plt+0x3b78>
   14e14:	beq	14e2c <__assert_fail@plt+0x3b08>
   14e18:	movw	r4, #49133	; 0xbfed
   14e1c:	movt	r4, #1
   14e20:	b	14e34 <__assert_fail@plt+0x3b10>
   14e24:	ldr	r8, [sp, #16]
   14e28:	ldr	r9, [sp, #8]
   14e2c:	movw	r4, #49106	; 0xbfd2
   14e30:	movt	r4, #1
   14e34:	ldr	r6, [fp, #12]
   14e38:	mov	r0, #0
   14e3c:	mov	r1, r4
   14e40:	mov	r2, #5
   14e44:	bl	11108 <dcgettext@plt>
   14e48:	mov	r4, r0
   14e4c:	mov	r0, #0
   14e50:	mov	r1, #8
   14e54:	mov	r2, r7
   14e58:	bl	16b80 <__assert_fail@plt+0x585c>
   14e5c:	mov	r5, r0
   14e60:	mov	r0, #1
   14e64:	mov	r1, r9
   14e68:	bl	17140 <__assert_fail@plt+0x5e1c>
   14e6c:	str	r0, [sp]
   14e70:	mov	r0, #0
   14e74:	mov	r1, #0
   14e78:	mov	r2, r4
   14e7c:	mov	r3, r5
   14e80:	bl	1118c <error@plt>
   14e84:	ldr	r2, [fp, #8]
   14e88:	mov	r0, sl
   14e8c:	mov	r1, r8
   14e90:	bl	14b8c <__assert_fail@plt+0x3868>
   14e94:	blx	r6
   14e98:	mvn	r6, #0
   14e9c:	mov	r0, r6
   14ea0:	sub	sp, fp, #28
   14ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ea8:	ldr	r8, [sp, #16]
   14eac:	ldr	sl, [sp, #4]
   14eb0:	ldr	r9, [sp, #8]
   14eb4:	mov	r6, r5
   14eb8:	cmn	r6, #1
   14ebc:	bgt	14e9c <__assert_fail@plt+0x3b78>
   14ec0:	b	14e14 <__assert_fail@plt+0x3af0>
   14ec4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14ec8:	add	fp, sp, #24
   14ecc:	ldr	r6, [r1]
   14ed0:	cmp	r6, #0
   14ed4:	beq	14f38 <__assert_fail@plt+0x3c14>
   14ed8:	mov	r8, r1
   14edc:	mov	r7, r2
   14ee0:	mov	r1, r2
   14ee4:	mov	r2, r3
   14ee8:	mov	r4, r3
   14eec:	mov	r9, r0
   14ef0:	bl	111ec <bcmp@plt>
   14ef4:	cmp	r0, #0
   14ef8:	beq	14f30 <__assert_fail@plt+0x3c0c>
   14efc:	add	r7, r7, r4
   14f00:	add	r5, r8, #4
   14f04:	ldr	r6, [r5]
   14f08:	cmp	r6, #0
   14f0c:	beq	14f38 <__assert_fail@plt+0x3c14>
   14f10:	mov	r0, r9
   14f14:	mov	r1, r7
   14f18:	mov	r2, r4
   14f1c:	bl	111ec <bcmp@plt>
   14f20:	add	r7, r7, r4
   14f24:	add	r5, r5, #4
   14f28:	cmp	r0, #0
   14f2c:	bne	14f04 <__assert_fail@plt+0x3be0>
   14f30:	mov	r0, r6
   14f34:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14f38:	mov	r6, #0
   14f3c:	mov	r0, r6
   14f40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14f44:	movw	r1, #53748	; 0xd1f4
   14f48:	movt	r1, #2
   14f4c:	str	r0, [r1]
   14f50:	bx	lr
   14f54:	movw	r1, #53752	; 0xd1f8
   14f58:	movt	r1, #2
   14f5c:	strb	r0, [r1]
   14f60:	bx	lr
   14f64:	push	{r4, r5, r6, sl, fp, lr}
   14f68:	add	fp, sp, #16
   14f6c:	sub	sp, sp, #8
   14f70:	movw	r0, #53644	; 0xd18c
   14f74:	movt	r0, #2
   14f78:	ldr	r0, [r0]
   14f7c:	bl	19748 <__assert_fail@plt+0x8424>
   14f80:	cmp	r0, #0
   14f84:	beq	14fac <__assert_fail@plt+0x3c88>
   14f88:	movw	r0, #53752	; 0xd1f8
   14f8c:	movt	r0, #2
   14f90:	ldrb	r0, [r0]
   14f94:	cmp	r0, #0
   14f98:	beq	14fcc <__assert_fail@plt+0x3ca8>
   14f9c:	bl	11210 <__errno_location@plt>
   14fa0:	ldr	r0, [r0]
   14fa4:	cmp	r0, #32
   14fa8:	bne	14fcc <__assert_fail@plt+0x3ca8>
   14fac:	movw	r0, #53632	; 0xd180
   14fb0:	movt	r0, #2
   14fb4:	ldr	r0, [r0]
   14fb8:	bl	19748 <__assert_fail@plt+0x8424>
   14fbc:	cmp	r0, #0
   14fc0:	subeq	sp, fp, #16
   14fc4:	popeq	{r4, r5, r6, sl, fp, pc}
   14fc8:	b	1503c <__assert_fail@plt+0x3d18>
   14fcc:	movw	r1, #49196	; 0xc02c
   14fd0:	mov	r0, #0
   14fd4:	mov	r2, #5
   14fd8:	movt	r1, #1
   14fdc:	bl	11108 <dcgettext@plt>
   14fe0:	mov	r4, r0
   14fe4:	movw	r0, #53748	; 0xd1f4
   14fe8:	movt	r0, #2
   14fec:	ldr	r6, [r0]
   14ff0:	bl	11210 <__errno_location@plt>
   14ff4:	ldr	r5, [r0]
   14ff8:	cmp	r6, #0
   14ffc:	bne	15018 <__assert_fail@plt+0x3cf4>
   15000:	movw	r2, #49193	; 0xc029
   15004:	mov	r0, #0
   15008:	mov	r1, r5
   1500c:	mov	r3, r4
   15010:	movt	r2, #1
   15014:	b	15038 <__assert_fail@plt+0x3d14>
   15018:	mov	r0, r6
   1501c:	bl	16dc8 <__assert_fail@plt+0x5aa4>
   15020:	movw	r2, #47151	; 0xb82f
   15024:	mov	r3, r0
   15028:	str	r4, [sp]
   1502c:	mov	r0, #0
   15030:	mov	r1, r5
   15034:	movt	r2, #1
   15038:	bl	1118c <error@plt>
   1503c:	movw	r0, #53548	; 0xd12c
   15040:	movt	r0, #2
   15044:	ldr	r0, [r0]
   15048:	bl	110d8 <_exit@plt>
   1504c:	push	{r4, r5, r6, sl, fp, lr}
   15050:	add	fp, sp, #16
   15054:	mov	r4, r0
   15058:	bl	11210 <__errno_location@plt>
   1505c:	ldr	r6, [r0]
   15060:	mov	r5, r0
   15064:	mov	r0, r4
   15068:	bl	110cc <free@plt>
   1506c:	str	r6, [r5]
   15070:	pop	{r4, r5, r6, sl, fp, pc}
   15074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15078:	add	fp, sp, #28
   1507c:	sub	sp, sp, #20
   15080:	mov	r4, r3
   15084:	str	r2, [sp, #16]
   15088:	str	r1, [sp, #12]
   1508c:	mov	r5, r0
   15090:	bl	111f8 <strlen@plt>
   15094:	ldr	r3, [fp, #12]
   15098:	mov	r8, r0
   1509c:	mov	sl, #0
   150a0:	tst	r3, #2
   150a4:	bne	15178 <__assert_fail@plt+0x3e54>
   150a8:	bl	11150 <__ctype_get_mb_cur_max@plt>
   150ac:	mov	r6, #0
   150b0:	cmp	r0, #2
   150b4:	bcc	15188 <__assert_fail@plt+0x3e64>
   150b8:	mov	r0, #0
   150bc:	mov	r1, r5
   150c0:	mov	r2, #0
   150c4:	bl	112b8 <mbstowcs@plt>
   150c8:	cmn	r0, #1
   150cc:	beq	15330 <__assert_fail@plt+0x400c>
   150d0:	add	r9, r0, #1
   150d4:	mov	r7, r0
   150d8:	lsl	r0, r9, #2
   150dc:	bl	196c4 <__assert_fail@plt+0x83a0>
   150e0:	cmp	r0, #0
   150e4:	beq	1532c <__assert_fail@plt+0x4008>
   150e8:	mov	r1, r5
   150ec:	mov	r2, r9
   150f0:	mov	r6, r0
   150f4:	bl	112b8 <mbstowcs@plt>
   150f8:	cmp	r0, #0
   150fc:	beq	15350 <__assert_fail@plt+0x402c>
   15100:	str	r5, [sp, #4]
   15104:	mov	r5, #0
   15108:	mov	r1, r6
   1510c:	str	r6, [sp]
   15110:	str	r5, [r6, r7, lsl #2]
   15114:	ldr	r0, [r6]
   15118:	cmp	r0, #0
   1511c:	beq	15360 <__assert_fail@plt+0x403c>
   15120:	add	r6, r1, #4
   15124:	movw	r7, #65533	; 0xfffd
   15128:	bl	1112c <iswprint@plt>
   1512c:	cmp	r0, #0
   15130:	streq	r7, [r6, #-4]
   15134:	moveq	r5, #1
   15138:	ldr	r0, [r6], #4
   1513c:	cmp	r0, #0
   15140:	bne	15128 <__assert_fail@plt+0x3e04>
   15144:	ldr	r6, [sp]
   15148:	mov	r1, r9
   1514c:	mov	r0, r6
   15150:	bl	11294 <wcswidth@plt>
   15154:	mov	r7, r0
   15158:	tst	r5, #1
   1515c:	beq	15370 <__assert_fail@plt+0x404c>
   15160:	mov	r0, #0
   15164:	mov	r1, r6
   15168:	mov	r2, #0
   1516c:	bl	11180 <wcstombs@plt>
   15170:	ldr	r5, [sp, #4]
   15174:	b	15388 <__assert_fail@plt+0x4064>
   15178:	mov	r6, #0
   1517c:	mov	r2, #0
   15180:	mov	r7, r8
   15184:	b	15194 <__assert_fail@plt+0x3e70>
   15188:	mov	r2, #0
   1518c:	mov	r7, r8
   15190:	ldr	r3, [fp, #12]
   15194:	ldr	r0, [r4]
   15198:	str	r5, [sp, #4]
   1519c:	ldr	r5, [fp, #8]
   151a0:	mov	r1, r7
   151a4:	str	r6, [sp, #8]
   151a8:	cmp	r7, r0
   151ac:	movhi	r1, r0
   151b0:	movhi	r8, r0
   151b4:	cmp	r0, r7
   151b8:	subhi	sl, r0, r1
   151bc:	cmp	r5, #0
   151c0:	str	r1, [r4]
   151c4:	beq	151dc <__assert_fail@plt+0x3eb8>
   151c8:	cmp	r5, #1
   151cc:	bne	151e4 <__assert_fail@plt+0x3ec0>
   151d0:	mov	r9, #0
   151d4:	mov	r5, sl
   151d8:	b	151f0 <__assert_fail@plt+0x3ecc>
   151dc:	mov	r9, sl
   151e0:	b	151f0 <__assert_fail@plt+0x3ecc>
   151e4:	and	r0, sl, #1
   151e8:	lsr	r9, sl, #1
   151ec:	add	r5, r0, sl, lsr #1
   151f0:	ldr	r0, [sp, #16]
   151f4:	ldr	r4, [sp, #12]
   151f8:	tst	r3, #8
   151fc:	mov	r6, #0
   15200:	mov	r7, #0
   15204:	moveq	r6, r9
   15208:	tst	r3, #4
   1520c:	moveq	r7, r5
   15210:	cmp	r0, #0
   15214:	beq	15304 <__assert_fail@plt+0x3fe0>
   15218:	add	r0, r4, r0
   1521c:	str	r2, [sp]
   15220:	sub	sl, r0, #1
   15224:	mov	r0, r4
   15228:	cmp	sl, r4
   1522c:	bls	1527c <__assert_fail@plt+0x3f58>
   15230:	cmp	r7, #0
   15234:	mov	r0, r4
   15238:	beq	1527c <__assert_fail@plt+0x3f58>
   1523c:	mvn	r0, r4
   15240:	sub	r1, r7, #1
   15244:	add	r0, sl, r0
   15248:	cmp	r1, r0
   1524c:	movhi	r1, r0
   15250:	mov	r0, r4
   15254:	add	r2, r1, #1
   15258:	mov	r1, #32
   1525c:	bl	11228 <memset@plt>
   15260:	ldr	r1, [sp, #16]
   15264:	sub	r0, r5, #1
   15268:	sub	r1, r1, #2
   1526c:	cmp	r0, r1
   15270:	movcc	r1, r0
   15274:	add	r0, r1, r4
   15278:	add	r0, r0, #1
   1527c:	ldr	r1, [sp, #4]
   15280:	sub	r2, sl, r0
   15284:	mov	r4, #0
   15288:	mvn	r3, #0
   1528c:	cmp	r8, r2
   15290:	strb	r4, [r0]
   15294:	movcc	r2, r8
   15298:	bl	11318 <__mempcpy_chk@plt>
   1529c:	mov	r5, r0
   152a0:	cmp	r6, #0
   152a4:	beq	152fc <__assert_fail@plt+0x3fd8>
   152a8:	cmp	r5, sl
   152ac:	bcs	152fc <__assert_fail@plt+0x3fd8>
   152b0:	mvn	r0, r5
   152b4:	sub	r1, r6, #1
   152b8:	add	r0, sl, r0
   152bc:	cmp	r1, r0
   152c0:	movhi	r1, r0
   152c4:	mov	r0, r5
   152c8:	add	r2, r1, #1
   152cc:	mov	r1, #32
   152d0:	bl	11228 <memset@plt>
   152d4:	ldr	r0, [sp, #16]
   152d8:	ldr	r1, [sp, #12]
   152dc:	sub	r0, r0, r5
   152e0:	add	r0, r0, r1
   152e4:	sub	r1, r9, #1
   152e8:	sub	r0, r0, #2
   152ec:	cmp	r1, r0
   152f0:	movhi	r1, r0
   152f4:	add	r0, r1, r5
   152f8:	add	r5, r0, #1
   152fc:	ldr	r2, [sp]
   15300:	strb	r4, [r5]
   15304:	add	r0, r7, r8
   15308:	add	r9, r0, r6
   1530c:	ldr	r6, [sp, #8]
   15310:	mov	r0, r2
   15314:	bl	1504c <__assert_fail@plt+0x3d28>
   15318:	mov	r0, r6
   1531c:	bl	1504c <__assert_fail@plt+0x3d28>
   15320:	mov	r0, r9
   15324:	sub	sp, fp, #28
   15328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1532c:	mov	r6, #0
   15330:	ldr	r3, [fp, #12]
   15334:	mvn	r9, #0
   15338:	mov	r2, #0
   1533c:	mov	r7, r8
   15340:	mov	r0, #0
   15344:	tst	r3, #1
   15348:	bne	15194 <__assert_fail@plt+0x3e70>
   1534c:	b	15314 <__assert_fail@plt+0x3ff0>
   15350:	mov	r2, r6
   15354:	mov	r7, r8
   15358:	mov	r6, #0
   1535c:	b	15190 <__assert_fail@plt+0x3e6c>
   15360:	mov	r0, r1
   15364:	mov	r1, r9
   15368:	bl	11294 <wcswidth@plt>
   1536c:	mov	r7, r0
   15370:	ldr	r0, [r4]
   15374:	ldr	r5, [sp, #4]
   15378:	mov	r6, #0
   1537c:	cmp	r7, r0
   15380:	mov	r0, r8
   15384:	bls	153f4 <__assert_fail@plt+0x40d0>
   15388:	add	r6, r0, #1
   1538c:	mov	r0, r6
   15390:	bl	196c4 <__assert_fail@plt+0x83a0>
   15394:	cmp	r0, #0
   15398:	beq	153fc <__assert_fail@plt+0x40d8>
   1539c:	ldr	r1, [sp]
   153a0:	str	r0, [sp, #8]
   153a4:	str	r6, [sp, #4]
   153a8:	ldr	r0, [r1]
   153ac:	cmp	r0, #0
   153b0:	beq	1541c <__assert_fail@plt+0x40f8>
   153b4:	ldr	r5, [r4]
   153b8:	mov	r8, #0
   153bc:	movw	r9, #65533	; 0xfffd
   153c0:	mov	r6, r1
   153c4:	bl	110b4 <wcwidth@plt>
   153c8:	cmn	r0, #1
   153cc:	moveq	r0, #1
   153d0:	streq	r9, [r6]
   153d4:	add	r7, r0, r8
   153d8:	cmp	r7, r5
   153dc:	bhi	15428 <__assert_fail@plt+0x4104>
   153e0:	ldr	r0, [r6, #4]!
   153e4:	mov	r8, r7
   153e8:	cmp	r0, #0
   153ec:	bne	153c4 <__assert_fail@plt+0x40a0>
   153f0:	b	1542c <__assert_fail@plt+0x4108>
   153f4:	ldr	r2, [sp]
   153f8:	b	15190 <__assert_fail@plt+0x3e6c>
   153fc:	ldr	r3, [fp, #12]
   15400:	ldr	r2, [sp]
   15404:	mov	r6, #0
   15408:	mvn	r9, #0
   1540c:	tst	r3, #1
   15410:	mov	r0, r2
   15414:	bne	15194 <__assert_fail@plt+0x3e70>
   15418:	b	15314 <__assert_fail@plt+0x3ff0>
   1541c:	mov	r6, r1
   15420:	mov	r7, #0
   15424:	b	1542c <__assert_fail@plt+0x4108>
   15428:	mov	r7, r8
   1542c:	mov	r0, #0
   15430:	ldr	r5, [sp]
   15434:	ldr	r2, [sp, #4]
   15438:	str	r0, [r6]
   1543c:	ldr	r6, [sp, #8]
   15440:	mov	r1, r5
   15444:	mov	r0, r6
   15448:	bl	11180 <wcstombs@plt>
   1544c:	mov	r2, r5
   15450:	mov	r8, r0
   15454:	mov	r5, r6
   15458:	b	15190 <__assert_fail@plt+0x3e6c>
   1545c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15460:	add	fp, sp, #28
   15464:	sub	sp, sp, #12
   15468:	ldr	r8, [r1]
   1546c:	mov	sl, r0
   15470:	mov	r9, r2
   15474:	mov	r6, r1
   15478:	mov	r7, #0
   1547c:	str	r3, [sp, #8]
   15480:	mov	r0, r8
   15484:	mov	r5, r8
   15488:	cmp	r0, r5
   1548c:	bcc	154f0 <__assert_fail@plt+0x41cc>
   15490:	add	r5, r0, #1
   15494:	mov	r0, r7
   15498:	mov	r1, r5
   1549c:	bl	196f4 <__assert_fail@plt+0x83d0>
   154a0:	cmp	r0, #0
   154a4:	beq	154e4 <__assert_fail@plt+0x41c0>
   154a8:	mov	r4, r0
   154ac:	ldr	r0, [sp, #8]
   154b0:	str	r8, [r6]
   154b4:	mov	r2, r5
   154b8:	mov	r3, r6
   154bc:	str	r9, [sp]
   154c0:	mov	r1, r4
   154c4:	str	r0, [sp, #4]
   154c8:	mov	r0, sl
   154cc:	bl	15074 <__assert_fail@plt+0x3d50>
   154d0:	cmn	r0, #1
   154d4:	mov	r7, r4
   154d8:	bne	15488 <__assert_fail@plt+0x4164>
   154dc:	mov	r0, r4
   154e0:	b	154e8 <__assert_fail@plt+0x41c4>
   154e4:	mov	r0, r7
   154e8:	bl	1504c <__assert_fail@plt+0x3d28>
   154ec:	mov	r7, #0
   154f0:	mov	r0, r7
   154f4:	sub	sp, fp, #28
   154f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154fc:	push	{r4, r5, fp, lr}
   15500:	add	fp, sp, #8
   15504:	cmp	r0, #0
   15508:	beq	1559c <__assert_fail@plt+0x4278>
   1550c:	mov	r1, #47	; 0x2f
   15510:	mov	r4, r0
   15514:	bl	112a0 <strrchr@plt>
   15518:	cmp	r0, #0
   1551c:	mov	r5, r4
   15520:	addne	r5, r0, #1
   15524:	sub	r0, r5, r4
   15528:	cmp	r0, #7
   1552c:	blt	15580 <__assert_fail@plt+0x425c>
   15530:	movw	r1, #49264	; 0xc070
   15534:	sub	r0, r5, #7
   15538:	mov	r2, #7
   1553c:	movt	r1, #1
   15540:	bl	112e8 <strncmp@plt>
   15544:	cmp	r0, #0
   15548:	bne	15580 <__assert_fail@plt+0x425c>
   1554c:	movw	r1, #49272	; 0xc078
   15550:	mov	r0, r5
   15554:	mov	r2, #3
   15558:	movt	r1, #1
   1555c:	bl	112e8 <strncmp@plt>
   15560:	cmp	r0, #0
   15564:	beq	15570 <__assert_fail@plt+0x424c>
   15568:	mov	r4, r5
   1556c:	b	15580 <__assert_fail@plt+0x425c>
   15570:	movw	r0, #53616	; 0xd170
   15574:	add	r4, r5, #3
   15578:	movt	r0, #2
   1557c:	str	r4, [r0]
   15580:	movw	r0, #53620	; 0xd174
   15584:	movt	r0, #2
   15588:	str	r4, [r0]
   1558c:	movw	r0, #53756	; 0xd1fc
   15590:	movt	r0, #2
   15594:	str	r4, [r0]
   15598:	pop	{r4, r5, fp, pc}
   1559c:	movw	r0, #53632	; 0xd180
   155a0:	mov	r1, #55	; 0x37
   155a4:	mov	r2, #1
   155a8:	movt	r0, #2
   155ac:	ldr	r3, [r0]
   155b0:	movw	r0, #49208	; 0xc038
   155b4:	movt	r0, #1
   155b8:	bl	11138 <fwrite@plt>
   155bc:	bl	112f4 <abort@plt>
   155c0:	push	{r4, r5, r6, sl, fp, lr}
   155c4:	add	fp, sp, #16
   155c8:	mov	r4, r0
   155cc:	movw	r0, #53760	; 0xd200
   155d0:	movt	r0, #2
   155d4:	cmp	r4, #0
   155d8:	moveq	r4, r0
   155dc:	bl	11210 <__errno_location@plt>
   155e0:	ldr	r6, [r0]
   155e4:	mov	r5, r0
   155e8:	mov	r0, r4
   155ec:	mov	r1, #48	; 0x30
   155f0:	bl	17db4 <__assert_fail@plt+0x6a90>
   155f4:	str	r6, [r5]
   155f8:	pop	{r4, r5, r6, sl, fp, pc}
   155fc:	movw	r1, #53760	; 0xd200
   15600:	cmp	r0, #0
   15604:	movt	r1, #2
   15608:	movne	r1, r0
   1560c:	ldr	r0, [r1]
   15610:	bx	lr
   15614:	movw	r2, #53760	; 0xd200
   15618:	cmp	r0, #0
   1561c:	movt	r2, #2
   15620:	movne	r2, r0
   15624:	str	r1, [r2]
   15628:	bx	lr
   1562c:	movw	r3, #53760	; 0xd200
   15630:	cmp	r0, #0
   15634:	and	r2, r2, #1
   15638:	movt	r3, #2
   1563c:	movne	r3, r0
   15640:	ubfx	r0, r1, #5, #3
   15644:	and	r1, r1, #31
   15648:	add	ip, r3, r0, lsl #2
   1564c:	mov	r0, #1
   15650:	ldr	r3, [ip, #8]
   15654:	and	r0, r0, r3, lsr r1
   15658:	eor	r2, r0, r2
   1565c:	eor	r1, r3, r2, lsl r1
   15660:	str	r1, [ip, #8]
   15664:	bx	lr
   15668:	movw	r2, #53760	; 0xd200
   1566c:	cmp	r0, #0
   15670:	movt	r2, #2
   15674:	movne	r2, r0
   15678:	ldr	r0, [r2, #4]
   1567c:	str	r1, [r2, #4]
   15680:	bx	lr
   15684:	push	{fp, lr}
   15688:	mov	fp, sp
   1568c:	movw	r3, #53760	; 0xd200
   15690:	cmp	r0, #0
   15694:	movt	r3, #2
   15698:	movne	r3, r0
   1569c:	cmp	r1, #0
   156a0:	mov	r0, #10
   156a4:	cmpne	r2, #0
   156a8:	str	r0, [r3]
   156ac:	bne	156b4 <__assert_fail@plt+0x4390>
   156b0:	bl	112f4 <abort@plt>
   156b4:	str	r1, [r3, #40]	; 0x28
   156b8:	str	r2, [r3, #44]	; 0x2c
   156bc:	pop	{fp, pc}
   156c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156c4:	add	fp, sp, #28
   156c8:	sub	sp, sp, #20
   156cc:	mov	r7, r0
   156d0:	ldr	r0, [fp, #8]
   156d4:	movw	r5, #53760	; 0xd200
   156d8:	mov	r8, r3
   156dc:	mov	r9, r2
   156e0:	mov	sl, r1
   156e4:	movt	r5, #2
   156e8:	cmp	r0, #0
   156ec:	movne	r5, r0
   156f0:	bl	11210 <__errno_location@plt>
   156f4:	ldr	r2, [r5, #40]	; 0x28
   156f8:	ldr	r3, [r5, #44]	; 0x2c
   156fc:	mov	r4, r0
   15700:	ldm	r5, {r0, r1}
   15704:	add	r5, r5, #8
   15708:	ldr	r6, [r4]
   1570c:	stm	sp, {r0, r1, r5}
   15710:	mov	r0, r7
   15714:	mov	r1, sl
   15718:	str	r2, [sp, #12]
   1571c:	str	r3, [sp, #16]
   15720:	mov	r2, r9
   15724:	mov	r3, r8
   15728:	bl	15738 <__assert_fail@plt+0x4414>
   1572c:	str	r6, [r4]
   15730:	sub	sp, fp, #28
   15734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1573c:	add	fp, sp, #28
   15740:	sub	sp, sp, #156	; 0x9c
   15744:	mov	r5, r0
   15748:	add	r0, r2, #1
   1574c:	mov	r6, r1
   15750:	mov	sl, r3
   15754:	str	r2, [fp, #-80]	; 0xffffffb0
   15758:	str	r0, [sp, #72]	; 0x48
   1575c:	ldr	r0, [fp, #12]
   15760:	and	r1, r0, #1
   15764:	str	r1, [sp, #36]	; 0x24
   15768:	and	r1, r0, #4
   1576c:	str	r1, [sp, #32]
   15770:	ubfx	r9, r0, #1, #1
   15774:	bl	11150 <__ctype_get_mb_cur_max@plt>
   15778:	str	r0, [sp, #40]	; 0x28
   1577c:	ldr	r0, [fp, #24]
   15780:	ldr	r7, [fp, #8]
   15784:	mov	r1, #0
   15788:	str	r5, [fp, #-84]	; 0xffffffac
   1578c:	str	r1, [fp, #-56]	; 0xffffffc8
   15790:	mov	r1, #0
   15794:	str	r1, [sp, #60]	; 0x3c
   15798:	mov	r1, #1
   1579c:	str	r1, [fp, #-48]	; 0xffffffd0
   157a0:	str	r0, [sp, #80]	; 0x50
   157a4:	ldr	r0, [fp, #20]
   157a8:	str	r0, [sp, #76]	; 0x4c
   157ac:	mov	r0, #0
   157b0:	str	r0, [sp, #56]	; 0x38
   157b4:	mov	r0, #0
   157b8:	str	r0, [fp, #-88]	; 0xffffffa8
   157bc:	mov	r0, #0
   157c0:	str	r0, [fp, #-72]	; 0xffffffb8
   157c4:	mov	r0, #0
   157c8:	cmp	r7, #10
   157cc:	bhi	16760 <__assert_fail@plt+0x543c>
   157d0:	add	r1, pc, #24
   157d4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   157d8:	mov	r4, r6
   157dc:	mov	r8, #0
   157e0:	mov	r2, #1
   157e4:	mov	r3, #0
   157e8:	mov	lr, sl
   157ec:	ldr	pc, [r1, r7, lsl #2]
   157f0:			; <UNDEFINED> instruction: 0x000158b4
   157f4:	andeq	r5, r1, r8, lsl #18
   157f8:	andeq	r5, r1, r8, asr #17
   157fc:	andeq	r5, r1, ip, lsr #17
   15800:	strdeq	r5, [r1], -ip
   15804:	andeq	r5, r1, r0, lsr r9
   15808:	ldrdeq	r5, [r1], -r8
   1580c:			; <UNDEFINED> instruction: 0x000159b4
   15810:	andeq	r5, r1, ip, lsl r8
   15814:	andeq	r5, r1, ip, lsl r8
   15818:	andeq	r5, r1, r4, asr #16
   1581c:	movw	r0, #49354	; 0xc0ca
   15820:	mov	r1, r7
   15824:	movt	r0, #1
   15828:	bl	17168 <__assert_fail@plt+0x5e44>
   1582c:	str	r0, [sp, #76]	; 0x4c
   15830:	movw	r0, #49356	; 0xc0cc
   15834:	mov	r1, r7
   15838:	movt	r0, #1
   1583c:	bl	17168 <__assert_fail@plt+0x5e44>
   15840:	str	r0, [sp, #80]	; 0x50
   15844:	mov	r8, #0
   15848:	tst	r9, #1
   1584c:	bne	15884 <__assert_fail@plt+0x4560>
   15850:	ldr	r0, [sp, #76]	; 0x4c
   15854:	ldrb	r0, [r0]
   15858:	cmp	r0, #0
   1585c:	beq	15884 <__assert_fail@plt+0x4560>
   15860:	ldr	r1, [sp, #76]	; 0x4c
   15864:	mov	r8, #0
   15868:	add	r1, r1, #1
   1586c:	cmp	r8, r4
   15870:	strbcc	r0, [r5, r8]
   15874:	ldrb	r0, [r1, r8]
   15878:	add	r8, r8, #1
   1587c:	cmp	r0, #0
   15880:	bne	1586c <__assert_fail@plt+0x4548>
   15884:	ldr	r6, [sp, #80]	; 0x50
   15888:	mov	r0, r6
   1588c:	bl	111f8 <strlen@plt>
   15890:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15894:	str	r0, [fp, #-72]	; 0xffffffb8
   15898:	str	r6, [fp, #-88]	; 0xffffffa8
   1589c:	mov	r2, #1
   158a0:	mov	r3, r9
   158a4:	mov	lr, sl
   158a8:	b	159b4 <__assert_fail@plt+0x4690>
   158ac:	mov	r0, #1
   158b0:	b	15908 <__assert_fail@plt+0x45e4>
   158b4:	mov	r7, #0
   158b8:	mov	r8, #0
   158bc:	mov	r2, r0
   158c0:	mov	r3, #0
   158c4:	b	159b4 <__assert_fail@plt+0x4690>
   158c8:	tst	r9, #1
   158cc:	bne	15908 <__assert_fail@plt+0x45e4>
   158d0:	mov	r2, r0
   158d4:	b	15960 <__assert_fail@plt+0x463c>
   158d8:	mov	r0, #1
   158dc:	mov	r8, #0
   158e0:	mov	r7, #5
   158e4:	mov	r2, #1
   158e8:	str	r0, [fp, #-72]	; 0xffffffb8
   158ec:	movw	r0, #49352	; 0xc0c8
   158f0:	movt	r0, #1
   158f4:	str	r0, [fp, #-88]	; 0xffffffa8
   158f8:	b	15928 <__assert_fail@plt+0x4604>
   158fc:	mov	r2, #1
   15900:	tst	r9, #1
   15904:	beq	15960 <__assert_fail@plt+0x463c>
   15908:	mov	r1, #1
   1590c:	mov	r8, #0
   15910:	mov	r7, #2
   15914:	mov	r2, r0
   15918:	str	r1, [fp, #-72]	; 0xffffffb8
   1591c:	movw	r1, #49356	; 0xc0cc
   15920:	movt	r1, #1
   15924:	str	r1, [fp, #-88]	; 0xffffffa8
   15928:	mov	r3, #1
   1592c:	b	159b4 <__assert_fail@plt+0x4690>
   15930:	tst	r9, #1
   15934:	beq	15984 <__assert_fail@plt+0x4660>
   15938:	mov	r0, #1
   1593c:	mov	r8, #0
   15940:	mov	r2, #1
   15944:	mov	r3, #1
   15948:	mov	r7, #5
   1594c:	str	r0, [fp, #-72]	; 0xffffffb8
   15950:	movw	r0, #49352	; 0xc0c8
   15954:	movt	r0, #1
   15958:	str	r0, [fp, #-88]	; 0xffffffa8
   1595c:	b	159b4 <__assert_fail@plt+0x4690>
   15960:	cmp	r4, #0
   15964:	mov	r8, #1
   15968:	mov	r3, #0
   1596c:	mov	r7, #2
   15970:	movne	r0, #39	; 0x27
   15974:	strbne	r0, [r5]
   15978:	movw	r0, #49356	; 0xc0cc
   1597c:	movt	r0, #1
   15980:	b	159a8 <__assert_fail@plt+0x4684>
   15984:	cmp	r4, #0
   15988:	mov	r8, #1
   1598c:	mov	r2, #1
   15990:	mov	r7, #5
   15994:	mov	r3, #0
   15998:	movne	r0, #34	; 0x22
   1599c:	strbne	r0, [r5]
   159a0:	movw	r0, #49352	; 0xc0c8
   159a4:	movt	r0, #1
   159a8:	str	r0, [fp, #-88]	; 0xffffffa8
   159ac:	mov	r0, #1
   159b0:	str	r0, [fp, #-72]	; 0xffffffb8
   159b4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   159b8:	eor	r6, r3, #1
   159bc:	str	r7, [fp, #-68]	; 0xffffffbc
   159c0:	str	r3, [fp, #-76]	; 0xffffffb4
   159c4:	str	r2, [sp, #84]	; 0x54
   159c8:	str	r6, [sp, #92]	; 0x5c
   159cc:	cmp	r0, #0
   159d0:	movwne	r0, #1
   159d4:	and	r1, r0, r3
   159d8:	and	r1, r2, r1
   159dc:	str	r1, [sp, #48]	; 0x30
   159e0:	sub	r1, r7, #2
   159e4:	clz	r1, r1
   159e8:	lsr	r1, r1, #5
   159ec:	and	r1, r1, r3
   159f0:	str	r1, [sp, #64]	; 0x40
   159f4:	subs	r1, r7, #2
   159f8:	mov	r7, #0
   159fc:	movwne	r1, #1
   15a00:	orr	r6, r1, r6
   15a04:	and	r1, r1, r2
   15a08:	and	r0, r0, r1
   15a0c:	str	r6, [sp, #68]	; 0x44
   15a10:	str	r0, [fp, #-60]	; 0xffffffc4
   15a14:	orr	r0, r1, r3
   15a18:	ldr	r1, [fp, #16]
   15a1c:	eor	r0, r0, #1
   15a20:	clz	r1, r1
   15a24:	lsr	r1, r1, #5
   15a28:	orr	r0, r1, r0
   15a2c:	str	r0, [fp, #-64]	; 0xffffffc0
   15a30:	eor	r0, r2, #1
   15a34:	str	r0, [sp, #52]	; 0x34
   15a38:	cmn	lr, #1
   15a3c:	beq	15a4c <__assert_fail@plt+0x4728>
   15a40:	cmp	r7, lr
   15a44:	bne	15a58 <__assert_fail@plt+0x4734>
   15a48:	b	165a0 <__assert_fail@plt+0x527c>
   15a4c:	ldrb	r0, [ip, r7]
   15a50:	cmp	r0, #0
   15a54:	beq	165a8 <__assert_fail@plt+0x5284>
   15a58:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15a5c:	mov	sl, #0
   15a60:	cmp	r0, #0
   15a64:	beq	15a9c <__assert_fail@plt+0x4778>
   15a68:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15a6c:	add	r5, r7, r0
   15a70:	cmp	r0, #2
   15a74:	bcc	15a90 <__assert_fail@plt+0x476c>
   15a78:	cmn	lr, #1
   15a7c:	bne	15a90 <__assert_fail@plt+0x476c>
   15a80:	mov	r0, ip
   15a84:	bl	111f8 <strlen@plt>
   15a88:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15a8c:	mov	lr, r0
   15a90:	cmp	r5, lr
   15a94:	bls	15aa4 <__assert_fail@plt+0x4780>
   15a98:	ldr	r5, [fp, #-84]	; 0xffffffac
   15a9c:	mov	r0, #0
   15aa0:	b	15af0 <__assert_fail@plt+0x47cc>
   15aa4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   15aa8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15aac:	add	r0, ip, r7
   15ab0:	mov	r6, r4
   15ab4:	mov	r4, lr
   15ab8:	bl	111ec <bcmp@plt>
   15abc:	ldr	r2, [sp, #92]	; 0x5c
   15ac0:	cmp	r0, #0
   15ac4:	ldr	r5, [fp, #-84]	; 0xffffffac
   15ac8:	mov	r1, r0
   15acc:	movwne	r1, #1
   15ad0:	orr	r1, r1, r2
   15ad4:	tst	r1, #1
   15ad8:	beq	16630 <__assert_fail@plt+0x530c>
   15adc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15ae0:	clz	r0, r0
   15ae4:	mov	lr, r4
   15ae8:	mov	r4, r6
   15aec:	lsr	r0, r0, #5
   15af0:	str	r0, [fp, #-52]	; 0xffffffcc
   15af4:	ldrb	r6, [ip, r7]
   15af8:	cmp	r6, #126	; 0x7e
   15afc:	bhi	1602c <__assert_fail@plt+0x4d08>
   15b00:	add	r3, pc, #16
   15b04:	mov	r9, #1
   15b08:	mov	r2, #110	; 0x6e
   15b0c:	mov	r0, #97	; 0x61
   15b10:	mov	r1, #0
   15b14:	ldr	pc, [r3, r6, lsl #2]
   15b18:	andeq	r5, r1, ip, lsl #29
   15b1c:	andeq	r6, r1, ip, lsr #32
   15b20:	andeq	r6, r1, ip, lsr #32
   15b24:	andeq	r6, r1, ip, lsr #32
   15b28:	andeq	r6, r1, ip, lsr #32
   15b2c:	andeq	r6, r1, ip, lsr #32
   15b30:	andeq	r6, r1, ip, lsr #32
   15b34:	andeq	r6, r1, r8, lsl #2
   15b38:	andeq	r5, r1, ip, ror #28
   15b3c:	andeq	r5, r1, r4, ror #28
   15b40:	andeq	r5, r1, r8, ror lr
   15b44:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15b48:	andeq	r5, r1, ip, asr lr
   15b4c:	andeq	r5, r1, r4, ror lr
   15b50:	andeq	r6, r1, ip, lsr #32
   15b54:	andeq	r6, r1, ip, lsr #32
   15b58:	andeq	r6, r1, ip, lsr #32
   15b5c:	andeq	r6, r1, ip, lsr #32
   15b60:	andeq	r6, r1, ip, lsr #32
   15b64:	andeq	r6, r1, ip, lsr #32
   15b68:	andeq	r6, r1, ip, lsr #32
   15b6c:	andeq	r6, r1, ip, lsr #32
   15b70:	andeq	r6, r1, ip, lsr #32
   15b74:	andeq	r6, r1, ip, lsr #32
   15b78:	andeq	r6, r1, ip, lsr #32
   15b7c:	andeq	r6, r1, ip, lsr #32
   15b80:	andeq	r6, r1, ip, lsr #32
   15b84:	andeq	r6, r1, ip, lsr #32
   15b88:	andeq	r6, r1, ip, lsr #32
   15b8c:	andeq	r6, r1, ip, lsr #32
   15b90:	andeq	r6, r1, ip, lsr #32
   15b94:	andeq	r6, r1, ip, lsr #32
   15b98:	andeq	r5, r1, r0, lsl lr
   15b9c:	andeq	r5, r1, r4, lsl lr
   15ba0:	andeq	r5, r1, r4, lsl lr
   15ba4:	strdeq	r5, [r1], -ip
   15ba8:	andeq	r5, r1, r4, lsl lr
   15bac:	andeq	r5, r1, r4, lsl sp
   15bb0:	andeq	r5, r1, r4, lsl lr
   15bb4:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   15bb8:	andeq	r5, r1, r4, lsl lr
   15bbc:	andeq	r5, r1, r4, lsl lr
   15bc0:	andeq	r5, r1, r4, lsl lr
   15bc4:	andeq	r5, r1, r4, lsl sp
   15bc8:	andeq	r5, r1, r4, lsl sp
   15bcc:	andeq	r5, r1, r4, lsl sp
   15bd0:	andeq	r5, r1, r4, lsl sp
   15bd4:	andeq	r5, r1, r4, lsl sp
   15bd8:	andeq	r5, r1, r4, lsl sp
   15bdc:	andeq	r5, r1, r4, lsl sp
   15be0:	andeq	r5, r1, r4, lsl sp
   15be4:	andeq	r5, r1, r4, lsl sp
   15be8:	andeq	r5, r1, r4, lsl sp
   15bec:	andeq	r5, r1, r4, lsl sp
   15bf0:	andeq	r5, r1, r4, lsl sp
   15bf4:	andeq	r5, r1, r4, lsl sp
   15bf8:	andeq	r5, r1, r4, lsl sp
   15bfc:	andeq	r5, r1, r4, lsl sp
   15c00:	andeq	r5, r1, r4, lsl sp
   15c04:	andeq	r5, r1, r4, lsl lr
   15c08:	andeq	r5, r1, r4, lsl lr
   15c0c:	andeq	r5, r1, r4, lsl lr
   15c10:	andeq	r5, r1, r4, lsl lr
   15c14:	andeq	r5, r1, r4, ror #30
   15c18:	andeq	r6, r1, ip, lsr #32
   15c1c:	andeq	r5, r1, r4, lsl sp
   15c20:	andeq	r5, r1, r4, lsl sp
   15c24:	andeq	r5, r1, r4, lsl sp
   15c28:	andeq	r5, r1, r4, lsl sp
   15c2c:	andeq	r5, r1, r4, lsl sp
   15c30:	andeq	r5, r1, r4, lsl sp
   15c34:	andeq	r5, r1, r4, lsl sp
   15c38:	andeq	r5, r1, r4, lsl sp
   15c3c:	andeq	r5, r1, r4, lsl sp
   15c40:	andeq	r5, r1, r4, lsl sp
   15c44:	andeq	r5, r1, r4, lsl sp
   15c48:	andeq	r5, r1, r4, lsl sp
   15c4c:	andeq	r5, r1, r4, lsl sp
   15c50:	andeq	r5, r1, r4, lsl sp
   15c54:	andeq	r5, r1, r4, lsl sp
   15c58:	andeq	r5, r1, r4, lsl sp
   15c5c:	andeq	r5, r1, r4, lsl sp
   15c60:	andeq	r5, r1, r4, lsl sp
   15c64:	andeq	r5, r1, r4, lsl sp
   15c68:	andeq	r5, r1, r4, lsl sp
   15c6c:	andeq	r5, r1, r4, lsl sp
   15c70:	andeq	r5, r1, r4, lsl sp
   15c74:	andeq	r5, r1, r4, lsl sp
   15c78:	andeq	r5, r1, r4, lsl sp
   15c7c:	andeq	r5, r1, r4, lsl sp
   15c80:	andeq	r5, r1, r4, lsl sp
   15c84:	andeq	r5, r1, r4, lsl lr
   15c88:	andeq	r5, r1, ip, lsr lr
   15c8c:	andeq	r5, r1, r4, lsl sp
   15c90:	andeq	r5, r1, r4, lsl lr
   15c94:	andeq	r5, r1, r4, lsl sp
   15c98:	andeq	r5, r1, r4, lsl lr
   15c9c:	andeq	r5, r1, r4, lsl sp
   15ca0:	andeq	r5, r1, r4, lsl sp
   15ca4:	andeq	r5, r1, r4, lsl sp
   15ca8:	andeq	r5, r1, r4, lsl sp
   15cac:	andeq	r5, r1, r4, lsl sp
   15cb0:	andeq	r5, r1, r4, lsl sp
   15cb4:	andeq	r5, r1, r4, lsl sp
   15cb8:	andeq	r5, r1, r4, lsl sp
   15cbc:	andeq	r5, r1, r4, lsl sp
   15cc0:	andeq	r5, r1, r4, lsl sp
   15cc4:	andeq	r5, r1, r4, lsl sp
   15cc8:	andeq	r5, r1, r4, lsl sp
   15ccc:	andeq	r5, r1, r4, lsl sp
   15cd0:	andeq	r5, r1, r4, lsl sp
   15cd4:	andeq	r5, r1, r4, lsl sp
   15cd8:	andeq	r5, r1, r4, lsl sp
   15cdc:	andeq	r5, r1, r4, lsl sp
   15ce0:	andeq	r5, r1, r4, lsl sp
   15ce4:	andeq	r5, r1, r4, lsl sp
   15ce8:	andeq	r5, r1, r4, lsl sp
   15cec:	andeq	r5, r1, r4, lsl sp
   15cf0:	andeq	r5, r1, r4, lsl sp
   15cf4:	andeq	r5, r1, r4, lsl sp
   15cf8:	andeq	r5, r1, r4, lsl sp
   15cfc:	andeq	r5, r1, r4, lsl sp
   15d00:	andeq	r5, r1, r4, lsl sp
   15d04:	ldrdeq	r5, [r1], -r0
   15d08:	andeq	r5, r1, r4, lsl lr
   15d0c:	ldrdeq	r5, [r1], -r0
   15d10:	strdeq	r5, [r1], -ip
   15d14:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15d18:	tst	r0, #1
   15d1c:	bne	15d48 <__assert_fail@plt+0x4a24>
   15d20:	ldr	r1, [fp, #16]
   15d24:	ubfx	r0, r6, #5, #3
   15d28:	mov	r2, #1
   15d2c:	ldr	r0, [r1, r0, lsl #2]
   15d30:	and	r1, r6, #31
   15d34:	tst	r0, r2, lsl r1
   15d38:	beq	15d48 <__assert_fail@plt+0x4a24>
   15d3c:	mov	r0, r6
   15d40:	mov	r1, r9
   15d44:	b	15d5c <__assert_fail@plt+0x4a38>
   15d48:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15d4c:	mov	r1, r9
   15d50:	cmp	r0, #0
   15d54:	mov	r0, r6
   15d58:	beq	1609c <__assert_fail@plt+0x4d78>
   15d5c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15d60:	tst	r2, #1
   15d64:	bne	1666c <__assert_fail@plt+0x5348>
   15d68:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15d6c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15d70:	subs	r2, r2, #2
   15d74:	movwne	r2, #1
   15d78:	orr	r2, r2, r3
   15d7c:	tst	r2, #1
   15d80:	bne	15dbc <__assert_fail@plt+0x4a98>
   15d84:	cmp	r8, r4
   15d88:	movcc	r2, #39	; 0x27
   15d8c:	strbcc	r2, [r5, r8]
   15d90:	add	r2, r8, #1
   15d94:	cmp	r2, r4
   15d98:	movcc	r3, #36	; 0x24
   15d9c:	strbcc	r3, [r5, r2]
   15da0:	add	r2, r8, #2
   15da4:	add	r8, r8, #3
   15da8:	cmp	r2, r4
   15dac:	movcc	r3, #39	; 0x27
   15db0:	strbcc	r3, [r5, r2]
   15db4:	mov	r2, #1
   15db8:	str	r2, [fp, #-56]	; 0xffffffc8
   15dbc:	cmp	r8, r4
   15dc0:	movcc	r2, #92	; 0x5c
   15dc4:	strbcc	r2, [r5, r8]
   15dc8:	add	r8, r8, #1
   15dcc:	b	160e0 <__assert_fail@plt+0x4dbc>
   15dd0:	cmp	lr, #1
   15dd4:	beq	15dfc <__assert_fail@plt+0x4ad8>
   15dd8:	mov	r9, #0
   15ddc:	cmn	lr, #1
   15de0:	bne	15e08 <__assert_fail@plt+0x4ae4>
   15de4:	ldrb	r0, [ip, #1]
   15de8:	cmp	r0, #0
   15dec:	beq	15dfc <__assert_fail@plt+0x4ad8>
   15df0:	mvn	lr, #0
   15df4:	mov	sl, #0
   15df8:	b	15d14 <__assert_fail@plt+0x49f0>
   15dfc:	mov	r9, #0
   15e00:	cmp	r7, #0
   15e04:	beq	15e10 <__assert_fail@plt+0x4aec>
   15e08:	mov	sl, #0
   15e0c:	b	15d14 <__assert_fail@plt+0x49f0>
   15e10:	mov	r1, #1
   15e14:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15e18:	cmp	r0, #2
   15e1c:	bne	15e34 <__assert_fail@plt+0x4b10>
   15e20:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15e24:	mov	r9, r1
   15e28:	tst	r0, #1
   15e2c:	beq	15d14 <__assert_fail@plt+0x49f0>
   15e30:	b	1666c <__assert_fail@plt+0x5348>
   15e34:	mov	r9, r1
   15e38:	b	15d14 <__assert_fail@plt+0x49f0>
   15e3c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15e40:	cmp	r0, #2
   15e44:	bne	16080 <__assert_fail@plt+0x4d5c>
   15e48:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15e4c:	tst	r0, #1
   15e50:	bne	1666c <__assert_fail@plt+0x5348>
   15e54:	mov	sl, #0
   15e58:	b	16094 <__assert_fail@plt+0x4d70>
   15e5c:	mov	r0, #102	; 0x66
   15e60:	b	16108 <__assert_fail@plt+0x4de4>
   15e64:	mov	r2, #116	; 0x74
   15e68:	b	15e78 <__assert_fail@plt+0x4b54>
   15e6c:	mov	r0, #98	; 0x62
   15e70:	b	16108 <__assert_fail@plt+0x4de4>
   15e74:	mov	r2, #114	; 0x72
   15e78:	ldr	r0, [sp, #68]	; 0x44
   15e7c:	tst	r0, #1
   15e80:	mov	r0, r2
   15e84:	bne	16108 <__assert_fail@plt+0x4de4>
   15e88:	b	1666c <__assert_fail@plt+0x5348>
   15e8c:	ldr	r0, [sp, #84]	; 0x54
   15e90:	tst	r0, #1
   15e94:	beq	16124 <__assert_fail@plt+0x4e00>
   15e98:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15e9c:	tst	r0, #1
   15ea0:	bne	16758 <__assert_fail@plt+0x5434>
   15ea4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15ea8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15eac:	subs	r0, r0, #2
   15eb0:	movwne	r0, #1
   15eb4:	orr	r0, r0, r1
   15eb8:	tst	r0, #1
   15ebc:	bne	15ef8 <__assert_fail@plt+0x4bd4>
   15ec0:	cmp	r8, r4
   15ec4:	movcc	r0, #39	; 0x27
   15ec8:	strbcc	r0, [r5, r8]
   15ecc:	add	r0, r8, #1
   15ed0:	cmp	r0, r4
   15ed4:	movcc	r1, #36	; 0x24
   15ed8:	strbcc	r1, [r5, r0]
   15edc:	add	r0, r8, #2
   15ee0:	add	r8, r8, #3
   15ee4:	cmp	r0, r4
   15ee8:	movcc	r1, #39	; 0x27
   15eec:	strbcc	r1, [r5, r0]
   15ef0:	mov	r0, #1
   15ef4:	str	r0, [fp, #-56]	; 0xffffffc8
   15ef8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15efc:	cmp	r8, r4
   15f00:	mov	r9, #0
   15f04:	mov	sl, #1
   15f08:	mov	r6, #48	; 0x30
   15f0c:	movcc	r0, #92	; 0x5c
   15f10:	strbcc	r0, [r5, r8]
   15f14:	add	r0, r8, #1
   15f18:	cmp	r1, #2
   15f1c:	beq	162ec <__assert_fail@plt+0x4fc8>
   15f20:	add	r1, r7, #1
   15f24:	cmp	r1, lr
   15f28:	bcs	162ec <__assert_fail@plt+0x4fc8>
   15f2c:	ldrb	r1, [ip, r1]
   15f30:	sub	r1, r1, #48	; 0x30
   15f34:	uxtb	r1, r1
   15f38:	cmp	r1, #9
   15f3c:	bhi	162ec <__assert_fail@plt+0x4fc8>
   15f40:	cmp	r0, r4
   15f44:	movcc	r1, #48	; 0x30
   15f48:	strbcc	r1, [r5, r0]
   15f4c:	add	r0, r8, #2
   15f50:	add	r8, r8, #3
   15f54:	cmp	r0, r4
   15f58:	movcc	r1, #48	; 0x30
   15f5c:	strbcc	r1, [r5, r0]
   15f60:	b	15d14 <__assert_fail@plt+0x49f0>
   15f64:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15f68:	mov	sl, #0
   15f6c:	mov	r6, #63	; 0x3f
   15f70:	cmp	r0, #5
   15f74:	beq	162f4 <__assert_fail@plt+0x4fd0>
   15f78:	cmp	r0, #2
   15f7c:	bne	1639c <__assert_fail@plt+0x5078>
   15f80:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15f84:	mov	r9, #0
   15f88:	tst	r0, #1
   15f8c:	beq	15d14 <__assert_fail@plt+0x49f0>
   15f90:	b	1666c <__assert_fail@plt+0x5348>
   15f94:	mov	r0, #118	; 0x76
   15f98:	b	16108 <__assert_fail@plt+0x4de4>
   15f9c:	mov	r0, #1
   15fa0:	mov	r6, #39	; 0x27
   15fa4:	str	r0, [sp, #60]	; 0x3c
   15fa8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15fac:	cmp	r0, #2
   15fb0:	bne	16140 <__assert_fail@plt+0x4e1c>
   15fb4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15fb8:	tst	r0, #1
   15fbc:	bne	1666c <__assert_fail@plt+0x5348>
   15fc0:	ldr	r2, [sp, #56]	; 0x38
   15fc4:	clz	r1, r4
   15fc8:	mov	sl, #0
   15fcc:	mov	r9, #1
   15fd0:	lsr	r1, r1, #5
   15fd4:	cmp	r2, #0
   15fd8:	mov	r0, r2
   15fdc:	movwne	r0, #1
   15fe0:	orrs	r0, r0, r1
   15fe4:	moveq	r2, r4
   15fe8:	moveq	r4, r0
   15fec:	cmp	r8, r4
   15ff0:	str	r2, [sp, #56]	; 0x38
   15ff4:	movcc	r0, #39	; 0x27
   15ff8:	strbcc	r0, [r5, r8]
   15ffc:	add	r0, r8, #1
   16000:	cmp	r0, r4
   16004:	movcc	r1, #92	; 0x5c
   16008:	strbcc	r1, [r5, r0]
   1600c:	add	r0, r8, #2
   16010:	add	r8, r8, #3
   16014:	cmp	r0, r4
   16018:	movcc	r1, #39	; 0x27
   1601c:	strbcc	r1, [r5, r0]
   16020:	mov	r0, #0
   16024:	str	r0, [fp, #-56]	; 0xffffffc8
   16028:	b	15d14 <__assert_fail@plt+0x49f0>
   1602c:	ldr	r0, [sp, #40]	; 0x28
   16030:	str	r4, [sp, #88]	; 0x58
   16034:	cmp	r0, #1
   16038:	bne	16148 <__assert_fail@plt+0x4e24>
   1603c:	str	lr, [sp, #28]
   16040:	bl	111d4 <__ctype_b_loc@plt>
   16044:	ldr	r0, [r0]
   16048:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1604c:	mov	r2, #1
   16050:	add	r0, r0, r6, lsl #1
   16054:	ldrb	r0, [r0, #1]
   16058:	ubfx	r9, r0, #6, #1
   1605c:	ldr	r0, [sp, #52]	; 0x34
   16060:	cmp	r2, #1
   16064:	orr	r0, r9, r0
   16068:	bhi	163a4 <__assert_fail@plt+0x5080>
   1606c:	tst	r0, #1
   16070:	beq	163a4 <__assert_fail@plt+0x5080>
   16074:	ldr	lr, [sp, #28]
   16078:	ldr	r4, [sp, #88]	; 0x58
   1607c:	b	15d14 <__assert_fail@plt+0x49f0>
   16080:	ldr	r1, [sp, #48]	; 0x30
   16084:	mov	sl, #0
   16088:	mov	r0, #92	; 0x5c
   1608c:	cmp	r1, #0
   16090:	beq	16108 <__assert_fail@plt+0x4de4>
   16094:	mov	r6, #92	; 0x5c
   16098:	mov	r9, #0
   1609c:	cmp	sl, #0
   160a0:	bne	160d8 <__assert_fail@plt+0x4db4>
   160a4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   160a8:	tst	r0, #1
   160ac:	beq	160d8 <__assert_fail@plt+0x4db4>
   160b0:	cmp	r8, r4
   160b4:	movcc	r0, #39	; 0x27
   160b8:	strbcc	r0, [r5, r8]
   160bc:	add	r0, r8, #1
   160c0:	add	r8, r8, #2
   160c4:	cmp	r0, r4
   160c8:	movcc	r1, #39	; 0x27
   160cc:	strbcc	r1, [r5, r0]
   160d0:	mov	r0, #0
   160d4:	str	r0, [fp, #-56]	; 0xffffffc8
   160d8:	mov	r1, r9
   160dc:	mov	r0, r6
   160e0:	cmp	r8, r4
   160e4:	strbcc	r0, [r5, r8]
   160e8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   160ec:	add	r8, r8, #1
   160f0:	and	r0, r0, r1
   160f4:	str	r0, [fp, #-48]	; 0xffffffd0
   160f8:	add	r7, r7, #1
   160fc:	cmn	lr, #1
   16100:	bne	15a40 <__assert_fail@plt+0x471c>
   16104:	b	15a4c <__assert_fail@plt+0x4728>
   16108:	ldr	r1, [sp, #84]	; 0x54
   1610c:	mov	sl, #0
   16110:	mov	r9, #0
   16114:	tst	r1, #1
   16118:	mov	r1, #0
   1611c:	beq	15d14 <__assert_fail@plt+0x49f0>
   16120:	b	15d5c <__assert_fail@plt+0x4a38>
   16124:	ldr	r0, [sp, #36]	; 0x24
   16128:	mov	r6, #0
   1612c:	mov	sl, #0
   16130:	mov	r9, #0
   16134:	cmp	r0, #0
   16138:	beq	15d14 <__assert_fail@plt+0x49f0>
   1613c:	b	160f8 <__assert_fail@plt+0x4dd4>
   16140:	mov	r9, #1
   16144:	b	15d14 <__assert_fail@plt+0x49f0>
   16148:	mov	r0, #0
   1614c:	cmn	lr, #1
   16150:	sub	r4, fp, #40	; 0x28
   16154:	str	r0, [fp, #-36]	; 0xffffffdc
   16158:	str	r0, [fp, #-40]	; 0xffffffd8
   1615c:	bne	16170 <__assert_fail@plt+0x4e4c>
   16160:	mov	r0, ip
   16164:	bl	111f8 <strlen@plt>
   16168:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1616c:	mov	lr, r0
   16170:	ldr	r0, [sp, #72]	; 0x48
   16174:	mov	r9, #1
   16178:	mov	r2, #0
   1617c:	str	lr, [sp, #28]
   16180:	add	r0, r0, r7
   16184:	str	r0, [sp, #20]
   16188:	b	161cc <__assert_fail@plt+0x4ea8>
   1618c:	ldr	r5, [sp, #44]	; 0x2c
   16190:	add	r5, r0, r5
   16194:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16198:	bl	1112c <iswprint@plt>
   1619c:	cmp	r0, #0
   161a0:	sub	r4, fp, #40	; 0x28
   161a4:	movwne	r0, #1
   161a8:	and	r9, r9, r0
   161ac:	mov	r0, r4
   161b0:	bl	110fc <mbsinit@plt>
   161b4:	mov	r2, r5
   161b8:	ldr	lr, [sp, #28]
   161bc:	ldr	r5, [fp, #-84]	; 0xffffffac
   161c0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   161c4:	cmp	r0, #0
   161c8:	bne	1605c <__assert_fail@plt+0x4d38>
   161cc:	add	r0, r2, r7
   161d0:	str	r2, [sp, #44]	; 0x2c
   161d4:	mov	r3, r4
   161d8:	add	r1, ip, r0
   161dc:	str	r0, [sp, #24]
   161e0:	sub	r2, lr, r0
   161e4:	sub	r0, fp, #44	; 0x2c
   161e8:	bl	199a4 <__assert_fail@plt+0x8680>
   161ec:	cmp	r0, #0
   161f0:	beq	16594 <__assert_fail@plt+0x5270>
   161f4:	cmn	r0, #1
   161f8:	beq	16550 <__assert_fail@plt+0x522c>
   161fc:	ldr	lr, [sp, #28]
   16200:	cmn	r0, #2
   16204:	beq	16558 <__assert_fail@plt+0x5234>
   16208:	ldr	r2, [sp, #64]	; 0x40
   1620c:	ldr	r4, [sp, #88]	; 0x58
   16210:	ldr	ip, [sp, #84]	; 0x54
   16214:	cmp	r0, #2
   16218:	mov	r1, #0
   1621c:	movwcc	r1, #1
   16220:	eor	r2, r2, #1
   16224:	orrs	r1, r2, r1
   16228:	bne	1618c <__assert_fail@plt+0x4e68>
   1622c:	ldr	r1, [sp, #44]	; 0x2c
   16230:	ldr	r2, [sp, #20]
   16234:	add	r1, r2, r1
   16238:	sub	r2, r0, #1
   1623c:	b	1624c <__assert_fail@plt+0x4f28>
   16240:	add	r1, r1, #1
   16244:	subs	r2, r2, #1
   16248:	beq	1618c <__assert_fail@plt+0x4e68>
   1624c:	ldrb	r3, [r1]
   16250:	sub	r3, r3, #91	; 0x5b
   16254:	cmp	r3, #33	; 0x21
   16258:	bhi	16240 <__assert_fail@plt+0x4f1c>
   1625c:	add	r5, pc, #0
   16260:	ldr	pc, [r5, r3, lsl #2]
   16264:	andeq	r6, r1, r8, asr #12
   16268:	andeq	r6, r1, r8, asr #12
   1626c:	andeq	r6, r1, r0, asr #4
   16270:	andeq	r6, r1, r8, asr #12
   16274:	andeq	r6, r1, r0, asr #4
   16278:	andeq	r6, r1, r8, asr #12
   1627c:	andeq	r6, r1, r0, asr #4
   16280:	andeq	r6, r1, r0, asr #4
   16284:	andeq	r6, r1, r0, asr #4
   16288:	andeq	r6, r1, r0, asr #4
   1628c:	andeq	r6, r1, r0, asr #4
   16290:	andeq	r6, r1, r0, asr #4
   16294:	andeq	r6, r1, r0, asr #4
   16298:	andeq	r6, r1, r0, asr #4
   1629c:	andeq	r6, r1, r0, asr #4
   162a0:	andeq	r6, r1, r0, asr #4
   162a4:	andeq	r6, r1, r0, asr #4
   162a8:	andeq	r6, r1, r0, asr #4
   162ac:	andeq	r6, r1, r0, asr #4
   162b0:	andeq	r6, r1, r0, asr #4
   162b4:	andeq	r6, r1, r0, asr #4
   162b8:	andeq	r6, r1, r0, asr #4
   162bc:	andeq	r6, r1, r0, asr #4
   162c0:	andeq	r6, r1, r0, asr #4
   162c4:	andeq	r6, r1, r0, asr #4
   162c8:	andeq	r6, r1, r0, asr #4
   162cc:	andeq	r6, r1, r0, asr #4
   162d0:	andeq	r6, r1, r0, asr #4
   162d4:	andeq	r6, r1, r0, asr #4
   162d8:	andeq	r6, r1, r0, asr #4
   162dc:	andeq	r6, r1, r0, asr #4
   162e0:	andeq	r6, r1, r0, asr #4
   162e4:	andeq	r6, r1, r0, asr #4
   162e8:	andeq	r6, r1, r8, asr #12
   162ec:	mov	r8, r0
   162f0:	b	15d14 <__assert_fail@plt+0x49f0>
   162f4:	ldr	r0, [sp, #32]
   162f8:	cmp	r0, #0
   162fc:	beq	1639c <__assert_fail@plt+0x5078>
   16300:	add	r0, r7, #2
   16304:	cmp	r0, lr
   16308:	bcs	1639c <__assert_fail@plt+0x5078>
   1630c:	add	r1, r7, ip
   16310:	ldrb	r1, [r1, #1]
   16314:	cmp	r1, #63	; 0x3f
   16318:	bne	1639c <__assert_fail@plt+0x5078>
   1631c:	ldrb	r9, [ip, r0]
   16320:	sub	r2, r9, #33	; 0x21
   16324:	cmp	r2, #29
   16328:	bhi	1639c <__assert_fail@plt+0x5078>
   1632c:	movw	r1, #20929	; 0x51c1
   16330:	mov	r3, #1
   16334:	movt	r1, #14336	; 0x3800
   16338:	tst	r1, r3, lsl r2
   1633c:	beq	1639c <__assert_fail@plt+0x5078>
   16340:	ldr	r1, [fp, #-76]	; 0xffffffb4
   16344:	tst	r1, #1
   16348:	bne	1666c <__assert_fail@plt+0x5348>
   1634c:	cmp	r8, r4
   16350:	add	r2, r8, #1
   16354:	mov	r6, r9
   16358:	mov	r7, r0
   1635c:	mov	r9, #0
   16360:	movcc	r1, #63	; 0x3f
   16364:	strbcc	r1, [r5, r8]
   16368:	cmp	r2, r4
   1636c:	movcc	r1, #34	; 0x22
   16370:	strbcc	r1, [r5, r2]
   16374:	add	r2, r8, #2
   16378:	cmp	r2, r4
   1637c:	movcc	r1, #34	; 0x22
   16380:	strbcc	r1, [r5, r2]
   16384:	add	r2, r8, #3
   16388:	add	r8, r8, #4
   1638c:	cmp	r2, r4
   16390:	movcc	r1, #63	; 0x3f
   16394:	strbcc	r1, [r5, r2]
   16398:	b	15d14 <__assert_fail@plt+0x49f0>
   1639c:	mov	r9, #0
   163a0:	b	15d14 <__assert_fail@plt+0x49f0>
   163a4:	ldr	lr, [sp, #28]
   163a8:	ldr	r4, [fp, #-56]	; 0xffffffc8
   163ac:	add	r1, r2, r7
   163b0:	mov	r2, #0
   163b4:	str	r1, [sp, #44]	; 0x2c
   163b8:	tst	r0, #1
   163bc:	bne	164d8 <__assert_fail@plt+0x51b4>
   163c0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   163c4:	tst	r1, #1
   163c8:	bne	16668 <__assert_fail@plt+0x5344>
   163cc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   163d0:	subs	r2, r1, #2
   163d4:	movwne	r2, #1
   163d8:	orr	r2, r2, r4
   163dc:	tst	r2, #1
   163e0:	bne	16424 <__assert_fail@plt+0x5100>
   163e4:	ldr	r1, [sp, #88]	; 0x58
   163e8:	add	r2, r8, #1
   163ec:	mov	r4, #1
   163f0:	cmp	r8, r1
   163f4:	movcc	r1, #39	; 0x27
   163f8:	strbcc	r1, [r5, r8]
   163fc:	ldr	r1, [sp, #88]	; 0x58
   16400:	cmp	r2, r1
   16404:	movcc	r1, #36	; 0x24
   16408:	strbcc	r1, [r5, r2]
   1640c:	ldr	r1, [sp, #88]	; 0x58
   16410:	add	r2, r8, #2
   16414:	add	r8, r8, #3
   16418:	cmp	r2, r1
   1641c:	movcc	r1, #39	; 0x27
   16420:	strbcc	r1, [r5, r2]
   16424:	ldr	r1, [sp, #88]	; 0x58
   16428:	add	r2, r8, #1
   1642c:	cmp	r8, r1
   16430:	movcc	r1, #92	; 0x5c
   16434:	strbcc	r1, [r5, r8]
   16438:	ldr	r1, [sp, #88]	; 0x58
   1643c:	cmp	r2, r1
   16440:	bcs	16454 <__assert_fail@plt+0x5130>
   16444:	uxtb	r3, r6
   16448:	mov	r1, #48	; 0x30
   1644c:	orr	r3, r1, r3, lsr #6
   16450:	strb	r3, [r5, r2]
   16454:	ldr	r1, [sp, #88]	; 0x58
   16458:	add	r2, r8, #2
   1645c:	add	r8, r8, #3
   16460:	cmp	r2, r1
   16464:	lsrcc	r3, r6, #3
   16468:	movcc	r1, #6
   1646c:	bficc	r3, r1, #3, #29
   16470:	mov	r1, #6
   16474:	bfi	r6, r1, #3, #29
   16478:	strbcc	r3, [r5, r2]
   1647c:	mov	r2, #1
   16480:	b	16500 <__assert_fail@plt+0x51dc>
   16484:	ldr	r1, [sp, #88]	; 0x58
   16488:	ldr	r5, [fp, #-84]	; 0xffffffac
   1648c:	ldr	r4, [sp, #88]	; 0x58
   16490:	cmp	r8, r1
   16494:	movcc	r1, #39	; 0x27
   16498:	strbcc	r1, [r5, r8]
   1649c:	add	r1, r8, #1
   164a0:	add	r8, r8, #2
   164a4:	cmp	r1, r4
   164a8:	movcc	r4, #39	; 0x27
   164ac:	strbcc	r4, [r5, r1]
   164b0:	mov	r4, #0
   164b4:	ldr	r1, [sp, #88]	; 0x58
   164b8:	cmp	r8, r1
   164bc:	ldr	r1, [sp, #72]	; 0x48
   164c0:	strbcc	r6, [r5, r8]
   164c4:	add	r8, r8, #1
   164c8:	ldrb	r6, [r1, r7]
   164cc:	mov	r7, r3
   164d0:	tst	r0, #1
   164d4:	beq	163c0 <__assert_fail@plt+0x509c>
   164d8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   164dc:	tst	r1, #1
   164e0:	beq	164f8 <__assert_fail@plt+0x51d4>
   164e4:	ldr	r1, [sp, #88]	; 0x58
   164e8:	cmp	r8, r1
   164ec:	movcc	r1, #92	; 0x5c
   164f0:	strbcc	r1, [r5, r8]
   164f4:	add	r8, r8, #1
   164f8:	mov	r1, #0
   164fc:	str	r1, [fp, #-52]	; 0xffffffcc
   16500:	ldr	r1, [sp, #44]	; 0x2c
   16504:	add	r3, r7, #1
   16508:	and	sl, r2, #1
   1650c:	cmp	r1, r3
   16510:	bls	16534 <__assert_fail@plt+0x5210>
   16514:	cmp	sl, #0
   16518:	mvn	r5, r4
   1651c:	movwne	sl, #1
   16520:	orr	r5, r5, sl
   16524:	tst	r5, #1
   16528:	beq	16484 <__assert_fail@plt+0x5160>
   1652c:	ldr	r5, [fp, #-84]	; 0xffffffac
   16530:	b	164b4 <__assert_fail@plt+0x5190>
   16534:	str	r4, [fp, #-56]	; 0xffffffc8
   16538:	ldr	r4, [sp, #88]	; 0x58
   1653c:	cmp	sl, #0
   16540:	movwne	sl, #1
   16544:	cmp	sl, #0
   16548:	beq	160a4 <__assert_fail@plt+0x4d80>
   1654c:	b	160d8 <__assert_fail@plt+0x4db4>
   16550:	mov	r9, #0
   16554:	b	16594 <__assert_fail@plt+0x5270>
   16558:	ldr	r0, [sp, #24]
   1655c:	mov	r9, #0
   16560:	cmp	lr, r0
   16564:	bls	16594 <__assert_fail@plt+0x5270>
   16568:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1656c:	ldr	r2, [sp, #44]	; 0x2c
   16570:	add	r0, ip, r7
   16574:	ldrb	r1, [r0, r2]
   16578:	cmp	r1, #0
   1657c:	beq	1605c <__assert_fail@plt+0x4d38>
   16580:	add	r2, r2, #1
   16584:	add	r1, r7, r2
   16588:	cmp	r1, lr
   1658c:	bcc	16574 <__assert_fail@plt+0x5250>
   16590:	b	1605c <__assert_fail@plt+0x4d38>
   16594:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16598:	ldr	r2, [sp, #44]	; 0x2c
   1659c:	b	1605c <__assert_fail@plt+0x4d38>
   165a0:	mov	lr, r7
   165a4:	b	165ac <__assert_fail@plt+0x5288>
   165a8:	mvn	lr, #0
   165ac:	ldr	r1, [fp, #-68]	; 0xffffffbc
   165b0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   165b4:	eor	r0, r1, #2
   165b8:	orr	r0, r0, r8
   165bc:	clz	r0, r0
   165c0:	lsr	r0, r0, #5
   165c4:	tst	r2, r0
   165c8:	bne	1666c <__assert_fail@plt+0x5348>
   165cc:	subs	r0, r1, #2
   165d0:	movwne	r0, #1
   165d4:	orr	r0, r2, r0
   165d8:	tst	r0, #1
   165dc:	ldreq	r0, [sp, #60]	; 0x3c
   165e0:	eoreq	r0, r0, #1
   165e4:	tsteq	r0, #1
   165e8:	bne	16700 <__assert_fail@plt+0x53dc>
   165ec:	ldr	r0, [fp, #-48]	; 0xffffffd0
   165f0:	mov	sl, lr
   165f4:	tst	r0, #1
   165f8:	bne	166cc <__assert_fail@plt+0x53a8>
   165fc:	ldr	r6, [sp, #56]	; 0x38
   16600:	mov	r9, #0
   16604:	cmp	r6, #0
   16608:	beq	166f8 <__assert_fail@plt+0x53d4>
   1660c:	ldr	r0, [sp, #84]	; 0x54
   16610:	mov	r1, #0
   16614:	mov	r7, #2
   16618:	cmp	r4, #0
   1661c:	str	r1, [fp, #-48]	; 0xffffffd0
   16620:	mov	r1, #0
   16624:	str	r1, [fp, #-76]	; 0xffffffb4
   16628:	beq	157c8 <__assert_fail@plt+0x44a4>
   1662c:	b	16700 <__assert_fail@plt+0x53dc>
   16630:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16634:	ldr	r1, [fp, #12]
   16638:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1663c:	mov	lr, r4
   16640:	mov	r4, r6
   16644:	b	1668c <__assert_fail@plt+0x5368>
   16648:	tst	ip, #1
   1664c:	ldr	r5, [fp, #-84]	; 0xffffffac
   16650:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16654:	ldr	r1, [fp, #12]
   16658:	mov	r0, #2
   1665c:	movwne	r0, #4
   16660:	mov	r2, r0
   16664:	b	1668c <__assert_fail@plt+0x5368>
   16668:	ldr	r4, [sp, #88]	; 0x58
   1666c:	ldr	r1, [sp, #84]	; 0x54
   16670:	mov	r0, #2
   16674:	tst	r1, #1
   16678:	movwne	r0, #4
   1667c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16680:	ldr	r1, [fp, #12]
   16684:	cmp	r2, #2
   16688:	moveq	r2, r0
   1668c:	mov	r0, #0
   16690:	bic	r1, r1, #2
   16694:	str	r2, [sp]
   16698:	mov	r2, ip
   1669c:	mov	r3, lr
   166a0:	str	r0, [sp, #8]
   166a4:	ldr	r0, [sp, #76]	; 0x4c
   166a8:	str	r1, [sp, #4]
   166ac:	mov	r1, r4
   166b0:	str	r0, [sp, #12]
   166b4:	ldr	r0, [sp, #80]	; 0x50
   166b8:	str	r0, [sp, #16]
   166bc:	mov	r0, r5
   166c0:	bl	15738 <__assert_fail@plt+0x4414>
   166c4:	mov	r8, r0
   166c8:	b	1674c <__assert_fail@plt+0x5428>
   166cc:	mov	r0, #5
   166d0:	ldr	r1, [sp, #56]	; 0x38
   166d4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   166d8:	mov	r3, sl
   166dc:	str	r0, [sp]
   166e0:	ldr	r0, [fp, #12]
   166e4:	str	r0, [sp, #4]
   166e8:	ldr	r0, [fp, #16]
   166ec:	str	r0, [sp, #8]
   166f0:	ldr	r0, [sp, #76]	; 0x4c
   166f4:	b	166b0 <__assert_fail@plt+0x538c>
   166f8:	mov	r0, #0
   166fc:	str	r0, [fp, #-76]	; 0xffffffb4
   16700:	ldr	r1, [fp, #-88]	; 0xffffffa8
   16704:	cmp	r1, #0
   16708:	beq	16740 <__assert_fail@plt+0x541c>
   1670c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16710:	tst	r0, #1
   16714:	bne	16740 <__assert_fail@plt+0x541c>
   16718:	ldrb	r0, [r1]
   1671c:	cmp	r0, #0
   16720:	beq	16740 <__assert_fail@plt+0x541c>
   16724:	add	r1, r1, #1
   16728:	cmp	r8, r4
   1672c:	strbcc	r0, [r5, r8]
   16730:	add	r8, r8, #1
   16734:	ldrb	r0, [r1], #1
   16738:	cmp	r0, #0
   1673c:	bne	16728 <__assert_fail@plt+0x5404>
   16740:	cmp	r8, r4
   16744:	movcc	r0, #0
   16748:	strbcc	r0, [r5, r8]
   1674c:	mov	r0, r8
   16750:	sub	sp, fp, #28
   16754:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16758:	mov	r0, #4
   1675c:	b	1667c <__assert_fail@plt+0x5358>
   16760:	bl	112f4 <abort@plt>
   16764:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16768:	add	fp, sp, #28
   1676c:	sub	sp, sp, #28
   16770:	movw	r5, #53760	; 0xd200
   16774:	cmp	r2, #0
   16778:	mov	r4, r1
   1677c:	mov	r7, r0
   16780:	str	r0, [sp, #20]
   16784:	movt	r5, #2
   16788:	movne	r5, r2
   1678c:	bl	11210 <__errno_location@plt>
   16790:	mov	sl, r0
   16794:	ldr	r2, [r5, #40]	; 0x28
   16798:	ldr	r3, [r5, #44]	; 0x2c
   1679c:	ldm	r5, {r0, r1}
   167a0:	orr	r8, r1, #1
   167a4:	add	r9, r5, #8
   167a8:	mov	r1, #0
   167ac:	ldr	r6, [sl]
   167b0:	stm	sp, {r0, r8, r9}
   167b4:	mov	r0, #0
   167b8:	str	r2, [sp, #12]
   167bc:	str	r3, [sp, #16]
   167c0:	mov	r2, r7
   167c4:	mov	r3, r4
   167c8:	str	r6, [sp, #24]
   167cc:	mov	r6, r4
   167d0:	bl	15738 <__assert_fail@plt+0x4414>
   167d4:	add	r7, r0, #1
   167d8:	mov	r0, r7
   167dc:	bl	17984 <__assert_fail@plt+0x6660>
   167e0:	mov	r4, r0
   167e4:	ldr	r0, [r5]
   167e8:	ldr	r2, [r5, #44]	; 0x2c
   167ec:	ldr	r1, [r5, #40]	; 0x28
   167f0:	mov	r3, r6
   167f4:	stm	sp, {r0, r8, r9}
   167f8:	str	r2, [sp, #16]
   167fc:	ldr	r2, [sp, #20]
   16800:	str	r1, [sp, #12]
   16804:	mov	r0, r4
   16808:	mov	r1, r7
   1680c:	bl	15738 <__assert_fail@plt+0x4414>
   16810:	ldr	r0, [sp, #24]
   16814:	str	r0, [sl]
   16818:	mov	r0, r4
   1681c:	sub	sp, fp, #28
   16820:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16824:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16828:	add	fp, sp, #28
   1682c:	sub	sp, sp, #36	; 0x24
   16830:	movw	r8, #53760	; 0xd200
   16834:	cmp	r3, #0
   16838:	mov	r4, r2
   1683c:	str	r2, [sp, #24]
   16840:	mov	r5, r1
   16844:	mov	r6, r0
   16848:	str	r0, [sp, #20]
   1684c:	movt	r8, #2
   16850:	movne	r8, r3
   16854:	bl	11210 <__errno_location@plt>
   16858:	str	r0, [sp, #28]
   1685c:	ldr	r1, [r8, #40]	; 0x28
   16860:	ldr	r2, [r8, #44]	; 0x2c
   16864:	ldr	r7, [r0]
   16868:	cmp	r4, #0
   1686c:	add	sl, r8, #8
   16870:	mov	r0, #0
   16874:	ldm	r8, {r3, r9}
   16878:	orreq	r9, r9, #1
   1687c:	stm	sp, {r3, r9, sl}
   16880:	str	r1, [sp, #12]
   16884:	str	r2, [sp, #16]
   16888:	mov	r1, #0
   1688c:	mov	r2, r6
   16890:	mov	r3, r5
   16894:	str	r7, [sp, #32]
   16898:	mov	r7, r5
   1689c:	bl	15738 <__assert_fail@plt+0x4414>
   168a0:	add	r4, r0, #1
   168a4:	mov	r5, r0
   168a8:	mov	r0, r4
   168ac:	bl	17984 <__assert_fail@plt+0x6660>
   168b0:	mov	r6, r0
   168b4:	ldr	r0, [r8]
   168b8:	ldr	r2, [r8, #44]	; 0x2c
   168bc:	ldr	r1, [r8, #40]	; 0x28
   168c0:	mov	r3, r7
   168c4:	stm	sp, {r0, r9, sl}
   168c8:	str	r2, [sp, #16]
   168cc:	ldr	r2, [sp, #20]
   168d0:	str	r1, [sp, #12]
   168d4:	mov	r0, r6
   168d8:	mov	r1, r4
   168dc:	bl	15738 <__assert_fail@plt+0x4414>
   168e0:	ldr	r0, [sp, #24]
   168e4:	ldr	r1, [sp, #32]
   168e8:	ldr	r2, [sp, #28]
   168ec:	cmp	r0, #0
   168f0:	str	r1, [r2]
   168f4:	strne	r5, [r0]
   168f8:	mov	r0, r6
   168fc:	sub	sp, fp, #28
   16900:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16904:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16908:	add	fp, sp, #24
   1690c:	movw	r5, #53556	; 0xd134
   16910:	movw	r8, #53552	; 0xd130
   16914:	movt	r5, #2
   16918:	movt	r8, #2
   1691c:	ldr	r0, [r5]
   16920:	ldr	r4, [r8]
   16924:	cmp	r0, #2
   16928:	blt	16954 <__assert_fail@plt+0x5630>
   1692c:	add	r7, r4, #12
   16930:	mov	r6, #0
   16934:	ldr	r0, [r7, r6, lsl #3]
   16938:	bl	1504c <__assert_fail@plt+0x3d28>
   1693c:	ldr	r1, [r5]
   16940:	add	r2, r6, #2
   16944:	add	r0, r6, #1
   16948:	mov	r6, r0
   1694c:	cmp	r2, r1
   16950:	blt	16934 <__assert_fail@plt+0x5610>
   16954:	ldr	r0, [r4, #4]
   16958:	movw	r9, #53808	; 0xd230
   1695c:	movw	r7, #53560	; 0xd138
   16960:	movt	r9, #2
   16964:	movt	r7, #2
   16968:	cmp	r0, r9
   1696c:	beq	1697c <__assert_fail@plt+0x5658>
   16970:	bl	1504c <__assert_fail@plt+0x3d28>
   16974:	mov	r0, #256	; 0x100
   16978:	stm	r7, {r0, r9}
   1697c:	cmp	r4, r7
   16980:	beq	16990 <__assert_fail@plt+0x566c>
   16984:	mov	r0, r4
   16988:	bl	1504c <__assert_fail@plt+0x3d28>
   1698c:	str	r7, [r8]
   16990:	mov	r0, #1
   16994:	str	r0, [r5]
   16998:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1699c:	movw	r3, #53760	; 0xd200
   169a0:	mvn	r2, #0
   169a4:	movt	r3, #2
   169a8:	b	169ac <__assert_fail@plt+0x5688>
   169ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169b0:	add	fp, sp, #28
   169b4:	sub	sp, sp, #44	; 0x2c
   169b8:	mov	r7, r3
   169bc:	str	r2, [sp, #36]	; 0x24
   169c0:	str	r1, [sp, #32]
   169c4:	mov	r5, r0
   169c8:	bl	11210 <__errno_location@plt>
   169cc:	cmp	r5, #0
   169d0:	bmi	16b40 <__assert_fail@plt+0x581c>
   169d4:	cmn	r5, #-2147483647	; 0x80000001
   169d8:	beq	16b40 <__assert_fail@plt+0x581c>
   169dc:	movw	r8, #53556	; 0xd134
   169e0:	movw	r4, #53552	; 0xd130
   169e4:	str	r0, [sp, #28]
   169e8:	ldr	r0, [r0]
   169ec:	movt	r8, #2
   169f0:	movt	r4, #2
   169f4:	ldr	r1, [r8]
   169f8:	ldr	r6, [r4]
   169fc:	str	r0, [sp, #24]
   16a00:	cmp	r1, r5
   16a04:	ble	16a10 <__assert_fail@plt+0x56ec>
   16a08:	mov	sl, r6
   16a0c:	b	16a7c <__assert_fail@plt+0x5758>
   16a10:	movw	r9, #53560	; 0xd138
   16a14:	mov	r0, #8
   16a18:	str	r1, [fp, #-32]	; 0xffffffe0
   16a1c:	sub	r1, r5, r1
   16a20:	mvn	r3, #-2147483648	; 0x80000000
   16a24:	movt	r9, #2
   16a28:	str	r0, [sp]
   16a2c:	add	r2, r1, #1
   16a30:	sub	r1, fp, #32
   16a34:	subs	r0, r6, r9
   16a38:	movne	r0, r6
   16a3c:	bl	17b84 <__assert_fail@plt+0x6860>
   16a40:	mov	sl, r0
   16a44:	cmp	r6, r9
   16a48:	str	r0, [r4]
   16a4c:	bne	16a58 <__assert_fail@plt+0x5734>
   16a50:	ldrd	r0, [r9]
   16a54:	stm	sl, {r0, r1}
   16a58:	ldr	r1, [r8]
   16a5c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16a60:	add	r0, sl, r1, lsl #3
   16a64:	sub	r1, r2, r1
   16a68:	lsl	r2, r1, #3
   16a6c:	mov	r1, #0
   16a70:	bl	11228 <memset@plt>
   16a74:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16a78:	str	r0, [r8]
   16a7c:	mov	r9, sl
   16a80:	ldm	r7, {r0, r1}
   16a84:	orr	r8, r1, #1
   16a88:	add	r1, r7, #8
   16a8c:	ldr	r2, [r7, #40]	; 0x28
   16a90:	ldr	r3, [r7, #44]	; 0x2c
   16a94:	ldr	r6, [r9, r5, lsl #3]!
   16a98:	str	r1, [sp, #20]
   16a9c:	ldr	r4, [r9, #4]!
   16aa0:	stm	sp, {r0, r8}
   16aa4:	add	r0, sp, #8
   16aa8:	stm	r0, {r1, r2, r3}
   16aac:	ldr	r2, [sp, #32]
   16ab0:	ldr	r3, [sp, #36]	; 0x24
   16ab4:	mov	r1, r6
   16ab8:	mov	r0, r4
   16abc:	bl	15738 <__assert_fail@plt+0x4414>
   16ac0:	cmp	r6, r0
   16ac4:	bhi	16b28 <__assert_fail@plt+0x5804>
   16ac8:	add	r6, r0, #1
   16acc:	movw	r0, #53808	; 0xd230
   16ad0:	movt	r0, #2
   16ad4:	str	r6, [sl, r5, lsl #3]
   16ad8:	cmp	r4, r0
   16adc:	beq	16ae8 <__assert_fail@plt+0x57c4>
   16ae0:	mov	r0, r4
   16ae4:	bl	1504c <__assert_fail@plt+0x3d28>
   16ae8:	mov	r0, r6
   16aec:	bl	17984 <__assert_fail@plt+0x6660>
   16af0:	str	r0, [r9]
   16af4:	mov	r4, r0
   16af8:	add	r3, sp, #8
   16afc:	ldr	r0, [r7]
   16b00:	ldr	r1, [r7, #40]	; 0x28
   16b04:	ldr	r2, [r7, #44]	; 0x2c
   16b08:	stm	sp, {r0, r8}
   16b0c:	ldr	r0, [sp, #20]
   16b10:	stm	r3, {r0, r1, r2}
   16b14:	ldr	r2, [sp, #32]
   16b18:	ldr	r3, [sp, #36]	; 0x24
   16b1c:	mov	r0, r4
   16b20:	mov	r1, r6
   16b24:	bl	15738 <__assert_fail@plt+0x4414>
   16b28:	ldr	r0, [sp, #28]
   16b2c:	ldr	r1, [sp, #24]
   16b30:	str	r1, [r0]
   16b34:	mov	r0, r4
   16b38:	sub	sp, fp, #28
   16b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b40:	bl	112f4 <abort@plt>
   16b44:	movw	r3, #53760	; 0xd200
   16b48:	movt	r3, #2
   16b4c:	b	169ac <__assert_fail@plt+0x5688>
   16b50:	movw	r3, #53760	; 0xd200
   16b54:	mov	r1, r0
   16b58:	mov	r0, #0
   16b5c:	mvn	r2, #0
   16b60:	movt	r3, #2
   16b64:	b	169ac <__assert_fail@plt+0x5688>
   16b68:	movw	r3, #53760	; 0xd200
   16b6c:	mov	r2, r1
   16b70:	mov	r1, r0
   16b74:	mov	r0, #0
   16b78:	movt	r3, #2
   16b7c:	b	169ac <__assert_fail@plt+0x5688>
   16b80:	push	{fp, lr}
   16b84:	mov	fp, sp
   16b88:	sub	sp, sp, #48	; 0x30
   16b8c:	vmov.i32	q8, #0	; 0x00000000
   16b90:	mov	ip, #32
   16b94:	mov	r3, sp
   16b98:	mov	lr, r2
   16b9c:	cmp	r1, #10
   16ba0:	add	r2, r3, #16
   16ba4:	vst1.64	{d16-d17}, [r3], ip
   16ba8:	vst1.64	{d16-d17}, [r2]
   16bac:	vst1.64	{d16-d17}, [r3]
   16bb0:	beq	16bd0 <__assert_fail@plt+0x58ac>
   16bb4:	str	r1, [sp]
   16bb8:	mov	r3, sp
   16bbc:	mov	r1, lr
   16bc0:	mvn	r2, #0
   16bc4:	bl	169ac <__assert_fail@plt+0x5688>
   16bc8:	mov	sp, fp
   16bcc:	pop	{fp, pc}
   16bd0:	bl	112f4 <abort@plt>
   16bd4:	push	{r4, sl, fp, lr}
   16bd8:	add	fp, sp, #8
   16bdc:	sub	sp, sp, #48	; 0x30
   16be0:	vmov.i32	q8, #0	; 0x00000000
   16be4:	mov	ip, r3
   16be8:	mov	r3, sp
   16bec:	mov	lr, #32
   16bf0:	cmp	r1, #10
   16bf4:	add	r4, r3, #16
   16bf8:	vst1.64	{d16-d17}, [r3], lr
   16bfc:	vst1.64	{d16-d17}, [r4]
   16c00:	vst1.64	{d16-d17}, [r3]
   16c04:	beq	16c24 <__assert_fail@plt+0x5900>
   16c08:	str	r1, [sp]
   16c0c:	mov	r1, r2
   16c10:	mov	r3, sp
   16c14:	mov	r2, ip
   16c18:	bl	169ac <__assert_fail@plt+0x5688>
   16c1c:	sub	sp, fp, #8
   16c20:	pop	{r4, sl, fp, pc}
   16c24:	bl	112f4 <abort@plt>
   16c28:	push	{fp, lr}
   16c2c:	mov	fp, sp
   16c30:	sub	sp, sp, #48	; 0x30
   16c34:	vmov.i32	q8, #0	; 0x00000000
   16c38:	mov	r3, sp
   16c3c:	mov	ip, #32
   16c40:	cmp	r0, #10
   16c44:	add	r2, r3, #16
   16c48:	vst1.64	{d16-d17}, [r3], ip
   16c4c:	vst1.64	{d16-d17}, [r2]
   16c50:	vst1.64	{d16-d17}, [r3]
   16c54:	beq	16c74 <__assert_fail@plt+0x5950>
   16c58:	str	r0, [sp]
   16c5c:	mov	r3, sp
   16c60:	mov	r0, #0
   16c64:	mvn	r2, #0
   16c68:	bl	169ac <__assert_fail@plt+0x5688>
   16c6c:	mov	sp, fp
   16c70:	pop	{fp, pc}
   16c74:	bl	112f4 <abort@plt>
   16c78:	push	{fp, lr}
   16c7c:	mov	fp, sp
   16c80:	sub	sp, sp, #48	; 0x30
   16c84:	vmov.i32	q8, #0	; 0x00000000
   16c88:	mov	r3, sp
   16c8c:	mov	ip, #32
   16c90:	cmp	r0, #10
   16c94:	add	lr, r3, #16
   16c98:	vst1.64	{d16-d17}, [r3], ip
   16c9c:	vst1.64	{d16-d17}, [lr]
   16ca0:	vst1.64	{d16-d17}, [r3]
   16ca4:	beq	16cc0 <__assert_fail@plt+0x599c>
   16ca8:	str	r0, [sp]
   16cac:	mov	r3, sp
   16cb0:	mov	r0, #0
   16cb4:	bl	169ac <__assert_fail@plt+0x5688>
   16cb8:	mov	sp, fp
   16cbc:	pop	{fp, pc}
   16cc0:	bl	112f4 <abort@plt>
   16cc4:	push	{r4, sl, fp, lr}
   16cc8:	add	fp, sp, #8
   16ccc:	sub	sp, sp, #48	; 0x30
   16cd0:	mov	lr, r0
   16cd4:	movw	r0, #53760	; 0xd200
   16cd8:	mov	ip, r1
   16cdc:	mov	r1, #32
   16ce0:	mov	r4, #1
   16ce4:	movt	r0, #2
   16ce8:	add	r3, r0, #16
   16cec:	vld1.64	{d16-d17}, [r0], r1
   16cf0:	vld1.64	{d20-d21}, [r0]
   16cf4:	vld1.64	{d18-d19}, [r3]
   16cf8:	mov	r3, sp
   16cfc:	add	r0, r3, #32
   16d00:	add	r1, r3, #16
   16d04:	vst1.64	{d20-d21}, [r0]
   16d08:	mov	r0, #28
   16d0c:	vst1.64	{d18-d19}, [r1]
   16d10:	mov	r1, r3
   16d14:	and	r0, r0, r2, lsr #3
   16d18:	and	r2, r2, #31
   16d1c:	vst1.64	{d16-d17}, [r1], r0
   16d20:	ldr	r0, [r1, #8]
   16d24:	bic	r4, r4, r0, lsr r2
   16d28:	eor	r0, r0, r4, lsl r2
   16d2c:	mov	r2, ip
   16d30:	str	r0, [r1, #8]
   16d34:	mov	r0, #0
   16d38:	mov	r1, lr
   16d3c:	bl	169ac <__assert_fail@plt+0x5688>
   16d40:	sub	sp, fp, #8
   16d44:	pop	{r4, sl, fp, pc}
   16d48:	push	{fp, lr}
   16d4c:	mov	fp, sp
   16d50:	sub	sp, sp, #48	; 0x30
   16d54:	mov	ip, r0
   16d58:	movw	r0, #53760	; 0xd200
   16d5c:	mov	r2, #32
   16d60:	movt	r0, #2
   16d64:	add	r3, r0, #16
   16d68:	vld1.64	{d16-d17}, [r0], r2
   16d6c:	vld1.64	{d20-d21}, [r0]
   16d70:	vld1.64	{d18-d19}, [r3]
   16d74:	mov	r3, sp
   16d78:	add	r0, r3, #32
   16d7c:	add	r2, r3, #16
   16d80:	vst1.64	{d20-d21}, [r0]
   16d84:	mov	r0, #28
   16d88:	vst1.64	{d18-d19}, [r2]
   16d8c:	mov	r2, r3
   16d90:	and	r0, r0, r1, lsr #3
   16d94:	and	r1, r1, #31
   16d98:	vst1.64	{d16-d17}, [r2], r0
   16d9c:	mov	r0, #1
   16da0:	ldr	lr, [r2, #8]
   16da4:	bic	r0, r0, lr, lsr r1
   16da8:	eor	r0, lr, r0, lsl r1
   16dac:	mov	r1, ip
   16db0:	str	r0, [r2, #8]
   16db4:	mov	r0, #0
   16db8:	mvn	r2, #0
   16dbc:	bl	169ac <__assert_fail@plt+0x5688>
   16dc0:	mov	sp, fp
   16dc4:	pop	{fp, pc}
   16dc8:	push	{fp, lr}
   16dcc:	mov	fp, sp
   16dd0:	sub	sp, sp, #48	; 0x30
   16dd4:	mov	r1, r0
   16dd8:	movw	r0, #53760	; 0xd200
   16ddc:	mov	r3, #32
   16de0:	movt	r0, #2
   16de4:	add	r2, r0, #16
   16de8:	vld1.64	{d16-d17}, [r0], r3
   16dec:	mov	r3, sp
   16df0:	vld1.64	{d18-d19}, [r2]
   16df4:	vld1.64	{d20-d21}, [r0]
   16df8:	add	r2, r3, #16
   16dfc:	add	r0, r3, #32
   16e00:	vst1.64	{d18-d19}, [r2]
   16e04:	vst1.64	{d20-d21}, [r0]
   16e08:	mov	r0, #12
   16e0c:	mov	r2, r3
   16e10:	vst1.64	{d16-d17}, [r2], r0
   16e14:	ldr	r0, [r2]
   16e18:	orr	r0, r0, #67108864	; 0x4000000
   16e1c:	str	r0, [r2]
   16e20:	mov	r0, #0
   16e24:	mvn	r2, #0
   16e28:	bl	169ac <__assert_fail@plt+0x5688>
   16e2c:	mov	sp, fp
   16e30:	pop	{fp, pc}
   16e34:	push	{fp, lr}
   16e38:	mov	fp, sp
   16e3c:	sub	sp, sp, #48	; 0x30
   16e40:	mov	ip, r1
   16e44:	mov	r1, r0
   16e48:	movw	r0, #53760	; 0xd200
   16e4c:	mov	r2, #32
   16e50:	movt	r0, #2
   16e54:	add	r3, r0, #16
   16e58:	vld1.64	{d16-d17}, [r0], r2
   16e5c:	vld1.64	{d18-d19}, [r3]
   16e60:	vld1.64	{d20-d21}, [r0]
   16e64:	mov	r3, sp
   16e68:	add	r2, r3, #16
   16e6c:	add	r0, r3, #32
   16e70:	vst1.64	{d18-d19}, [r2]
   16e74:	vst1.64	{d20-d21}, [r0]
   16e78:	mov	r0, #12
   16e7c:	mov	r2, r3
   16e80:	vst1.64	{d16-d17}, [r2], r0
   16e84:	ldr	r0, [r2]
   16e88:	orr	r0, r0, #67108864	; 0x4000000
   16e8c:	str	r0, [r2]
   16e90:	mov	r0, #0
   16e94:	mov	r2, ip
   16e98:	bl	169ac <__assert_fail@plt+0x5688>
   16e9c:	mov	sp, fp
   16ea0:	pop	{fp, pc}
   16ea4:	push	{r4, sl, fp, lr}
   16ea8:	add	fp, sp, #8
   16eac:	sub	sp, sp, #96	; 0x60
   16eb0:	vmov.i32	q8, #0	; 0x00000000
   16eb4:	mov	ip, r2
   16eb8:	mov	r2, sp
   16ebc:	mov	r4, #28
   16ec0:	cmp	r1, #10
   16ec4:	mov	r3, r2
   16ec8:	add	lr, r2, #16
   16ecc:	vst1.64	{d16-d17}, [r3], r4
   16ed0:	vst1.64	{d16-d17}, [lr]
   16ed4:	vst1.32	{d16-d17}, [r3]
   16ed8:	beq	16f28 <__assert_fail@plt+0x5c04>
   16edc:	vld1.64	{d16-d17}, [r2], r4
   16ee0:	vld1.64	{d18-d19}, [lr]
   16ee4:	add	r3, sp, #48	; 0x30
   16ee8:	vld1.32	{d20-d21}, [r2]
   16eec:	add	r2, r3, #20
   16ef0:	add	r4, r3, #4
   16ef4:	vst1.32	{d18-d19}, [r2]
   16ef8:	add	r2, r3, #32
   16efc:	vst1.32	{d16-d17}, [r4]
   16f00:	vst1.32	{d20-d21}, [r2]
   16f04:	str	r1, [sp, #48]	; 0x30
   16f08:	mvn	r2, #0
   16f0c:	ldr	r1, [sp, #60]	; 0x3c
   16f10:	orr	r1, r1, #67108864	; 0x4000000
   16f14:	str	r1, [sp, #60]	; 0x3c
   16f18:	mov	r1, ip
   16f1c:	bl	169ac <__assert_fail@plt+0x5688>
   16f20:	sub	sp, fp, #8
   16f24:	pop	{r4, sl, fp, pc}
   16f28:	bl	112f4 <abort@plt>
   16f2c:	push	{r4, r5, r6, sl, fp, lr}
   16f30:	add	fp, sp, #16
   16f34:	sub	sp, sp, #48	; 0x30
   16f38:	mov	ip, r3
   16f3c:	movw	r3, #53760	; 0xd200
   16f40:	mov	r6, #32
   16f44:	cmp	r1, #0
   16f48:	mov	r4, sp
   16f4c:	movt	r3, #2
   16f50:	cmpne	r2, #0
   16f54:	add	r5, r4, #16
   16f58:	add	lr, r3, #16
   16f5c:	vld1.64	{d16-d17}, [r3], r6
   16f60:	vld1.64	{d18-d19}, [lr]
   16f64:	vld1.64	{d20-d21}, [r3]
   16f68:	mov	r3, #10
   16f6c:	vst1.64	{d16-d17}, [r4], r6
   16f70:	vst1.64	{d18-d19}, [r5]
   16f74:	vst1.64	{d20-d21}, [r4]
   16f78:	str	r3, [sp]
   16f7c:	bne	16f84 <__assert_fail@plt+0x5c60>
   16f80:	bl	112f4 <abort@plt>
   16f84:	str	r2, [sp, #44]	; 0x2c
   16f88:	str	r1, [sp, #40]	; 0x28
   16f8c:	mov	r3, sp
   16f90:	mov	r1, ip
   16f94:	mvn	r2, #0
   16f98:	bl	169ac <__assert_fail@plt+0x5688>
   16f9c:	sub	sp, fp, #16
   16fa0:	pop	{r4, r5, r6, sl, fp, pc}
   16fa4:	push	{r4, r5, r6, sl, fp, lr}
   16fa8:	add	fp, sp, #16
   16fac:	sub	sp, sp, #48	; 0x30
   16fb0:	mov	lr, r3
   16fb4:	movw	r3, #53760	; 0xd200
   16fb8:	mov	r6, #32
   16fbc:	cmp	r1, #0
   16fc0:	mov	r4, sp
   16fc4:	movt	r3, #2
   16fc8:	cmpne	r2, #0
   16fcc:	add	r5, r4, #16
   16fd0:	add	ip, r3, #16
   16fd4:	vld1.64	{d16-d17}, [r3], r6
   16fd8:	vld1.64	{d18-d19}, [ip]
   16fdc:	vld1.64	{d20-d21}, [r3]
   16fe0:	mov	r3, #10
   16fe4:	vst1.64	{d16-d17}, [r4], r6
   16fe8:	vst1.64	{d18-d19}, [r5]
   16fec:	vst1.64	{d20-d21}, [r4]
   16ff0:	str	r3, [sp]
   16ff4:	bne	16ffc <__assert_fail@plt+0x5cd8>
   16ff8:	bl	112f4 <abort@plt>
   16ffc:	ldr	ip, [fp, #8]
   17000:	str	r2, [sp, #44]	; 0x2c
   17004:	str	r1, [sp, #40]	; 0x28
   17008:	mov	r3, sp
   1700c:	mov	r1, lr
   17010:	mov	r2, ip
   17014:	bl	169ac <__assert_fail@plt+0x5688>
   17018:	sub	sp, fp, #16
   1701c:	pop	{r4, r5, r6, sl, fp, pc}
   17020:	push	{r4, sl, fp, lr}
   17024:	add	fp, sp, #8
   17028:	sub	sp, sp, #48	; 0x30
   1702c:	movw	r3, #53760	; 0xd200
   17030:	mov	lr, #32
   17034:	mov	ip, r2
   17038:	cmp	r0, #0
   1703c:	movt	r3, #2
   17040:	cmpne	r1, #0
   17044:	add	r2, r3, #16
   17048:	vld1.64	{d16-d17}, [r3], lr
   1704c:	vld1.64	{d20-d21}, [r3]
   17050:	vld1.64	{d18-d19}, [r2]
   17054:	mov	r2, sp
   17058:	add	r4, r2, #16
   1705c:	vst1.64	{d16-d17}, [r2], lr
   17060:	vst1.64	{d20-d21}, [r2]
   17064:	mov	r2, #10
   17068:	vst1.64	{d18-d19}, [r4]
   1706c:	str	r2, [sp]
   17070:	bne	17078 <__assert_fail@plt+0x5d54>
   17074:	bl	112f4 <abort@plt>
   17078:	str	r1, [sp, #44]	; 0x2c
   1707c:	str	r0, [sp, #40]	; 0x28
   17080:	mov	r3, sp
   17084:	mov	r0, #0
   17088:	mov	r1, ip
   1708c:	mvn	r2, #0
   17090:	bl	169ac <__assert_fail@plt+0x5688>
   17094:	sub	sp, fp, #8
   17098:	pop	{r4, sl, fp, pc}
   1709c:	push	{r4, r5, fp, lr}
   170a0:	add	fp, sp, #8
   170a4:	sub	sp, sp, #48	; 0x30
   170a8:	mov	ip, r3
   170ac:	movw	r3, #53760	; 0xd200
   170b0:	mov	r4, #32
   170b4:	mov	lr, r2
   170b8:	cmp	r0, #0
   170bc:	movt	r3, #2
   170c0:	cmpne	r1, #0
   170c4:	add	r2, r3, #16
   170c8:	vld1.64	{d16-d17}, [r3], r4
   170cc:	vld1.64	{d20-d21}, [r3]
   170d0:	vld1.64	{d18-d19}, [r2]
   170d4:	mov	r2, sp
   170d8:	add	r5, r2, #16
   170dc:	vst1.64	{d16-d17}, [r2], r4
   170e0:	vst1.64	{d20-d21}, [r2]
   170e4:	mov	r2, #10
   170e8:	vst1.64	{d18-d19}, [r5]
   170ec:	str	r2, [sp]
   170f0:	bne	170f8 <__assert_fail@plt+0x5dd4>
   170f4:	bl	112f4 <abort@plt>
   170f8:	str	r1, [sp, #44]	; 0x2c
   170fc:	str	r0, [sp, #40]	; 0x28
   17100:	mov	r3, sp
   17104:	mov	r0, #0
   17108:	mov	r1, lr
   1710c:	mov	r2, ip
   17110:	bl	169ac <__assert_fail@plt+0x5688>
   17114:	sub	sp, fp, #8
   17118:	pop	{r4, r5, fp, pc}
   1711c:	movw	r3, #53568	; 0xd140
   17120:	movt	r3, #2
   17124:	b	169ac <__assert_fail@plt+0x5688>
   17128:	movw	r3, #53568	; 0xd140
   1712c:	mov	r2, r1
   17130:	mov	r1, r0
   17134:	mov	r0, #0
   17138:	movt	r3, #2
   1713c:	b	169ac <__assert_fail@plt+0x5688>
   17140:	movw	r3, #53568	; 0xd140
   17144:	mvn	r2, #0
   17148:	movt	r3, #2
   1714c:	b	169ac <__assert_fail@plt+0x5688>
   17150:	movw	r3, #53568	; 0xd140
   17154:	mov	r1, r0
   17158:	mov	r0, #0
   1715c:	mvn	r2, #0
   17160:	movt	r3, #2
   17164:	b	169ac <__assert_fail@plt+0x5688>
   17168:	push	{r4, r5, fp, lr}
   1716c:	add	fp, sp, #8
   17170:	mov	r5, r0
   17174:	mov	r4, r1
   17178:	mov	r0, #0
   1717c:	mov	r2, #5
   17180:	mov	r1, r5
   17184:	bl	11108 <dcgettext@plt>
   17188:	cmp	r0, r5
   1718c:	popne	{r4, r5, fp, pc}
   17190:	bl	1996c <__assert_fail@plt+0x8648>
   17194:	ldrb	r1, [r0]
   17198:	and	r1, r1, #223	; 0xdf
   1719c:	cmp	r1, #71	; 0x47
   171a0:	beq	17208 <__assert_fail@plt+0x5ee4>
   171a4:	cmp	r1, #85	; 0x55
   171a8:	bne	17260 <__assert_fail@plt+0x5f3c>
   171ac:	ldrb	r1, [r0, #1]
   171b0:	and	r1, r1, #223	; 0xdf
   171b4:	cmp	r1, #84	; 0x54
   171b8:	bne	17260 <__assert_fail@plt+0x5f3c>
   171bc:	ldrb	r1, [r0, #2]
   171c0:	and	r1, r1, #223	; 0xdf
   171c4:	cmp	r1, #70	; 0x46
   171c8:	bne	17260 <__assert_fail@plt+0x5f3c>
   171cc:	ldrb	r1, [r0, #3]
   171d0:	cmp	r1, #45	; 0x2d
   171d4:	bne	17260 <__assert_fail@plt+0x5f3c>
   171d8:	ldrb	r1, [r0, #4]
   171dc:	cmp	r1, #56	; 0x38
   171e0:	bne	17260 <__assert_fail@plt+0x5f3c>
   171e4:	ldrb	r0, [r0, #5]
   171e8:	cmp	r0, #0
   171ec:	bne	17260 <__assert_fail@plt+0x5f3c>
   171f0:	ldrb	r1, [r5]
   171f4:	movw	r2, #49358	; 0xc0ce
   171f8:	movw	r0, #49362	; 0xc0d2
   171fc:	movt	r2, #1
   17200:	movt	r0, #1
   17204:	b	17290 <__assert_fail@plt+0x5f6c>
   17208:	ldrb	r1, [r0, #1]
   1720c:	and	r1, r1, #223	; 0xdf
   17210:	cmp	r1, #66	; 0x42
   17214:	bne	17260 <__assert_fail@plt+0x5f3c>
   17218:	ldrb	r1, [r0, #2]
   1721c:	cmp	r1, #49	; 0x31
   17220:	bne	17260 <__assert_fail@plt+0x5f3c>
   17224:	ldrb	r1, [r0, #3]
   17228:	cmp	r1, #56	; 0x38
   1722c:	bne	17260 <__assert_fail@plt+0x5f3c>
   17230:	ldrb	r1, [r0, #4]
   17234:	cmp	r1, #48	; 0x30
   17238:	bne	17260 <__assert_fail@plt+0x5f3c>
   1723c:	ldrb	r1, [r0, #5]
   17240:	cmp	r1, #51	; 0x33
   17244:	bne	17260 <__assert_fail@plt+0x5f3c>
   17248:	ldrb	r1, [r0, #6]
   1724c:	cmp	r1, #48	; 0x30
   17250:	bne	17260 <__assert_fail@plt+0x5f3c>
   17254:	ldrb	r0, [r0, #7]
   17258:	cmp	r0, #0
   1725c:	beq	1727c <__assert_fail@plt+0x5f58>
   17260:	movw	r1, #49352	; 0xc0c8
   17264:	movw	r0, #49356	; 0xc0cc
   17268:	cmp	r4, #9
   1726c:	movt	r1, #1
   17270:	movt	r0, #1
   17274:	moveq	r0, r1
   17278:	pop	{r4, r5, fp, pc}
   1727c:	ldrb	r1, [r5]
   17280:	movw	r2, #49366	; 0xc0d6
   17284:	movw	r0, #49370	; 0xc0da
   17288:	movt	r2, #1
   1728c:	movt	r0, #1
   17290:	cmp	r1, #96	; 0x60
   17294:	moveq	r0, r2
   17298:	pop	{r4, r5, fp, pc}
   1729c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   172a0:	add	fp, sp, #24
   172a4:	sub	sp, sp, #32
   172a8:	ldr	r6, [fp, #12]
   172ac:	ldr	r7, [fp, #8]
   172b0:	mov	r4, r2
   172b4:	mov	r8, r0
   172b8:	cmp	r1, #0
   172bc:	beq	172e4 <__assert_fail@plt+0x5fc0>
   172c0:	movw	r2, #49460	; 0xc134
   172c4:	mov	r5, r1
   172c8:	str	r3, [sp, #4]
   172cc:	str	r4, [sp]
   172d0:	mov	r0, r8
   172d4:	mov	r1, #1
   172d8:	movt	r2, #1
   172dc:	mov	r3, r5
   172e0:	b	172fc <__assert_fail@plt+0x5fd8>
   172e4:	movw	r2, #49472	; 0xc140
   172e8:	str	r3, [sp]
   172ec:	mov	r0, r8
   172f0:	mov	r1, #1
   172f4:	mov	r3, r4
   172f8:	movt	r2, #1
   172fc:	bl	1124c <__fprintf_chk@plt>
   17300:	movw	r1, #49479	; 0xc147
   17304:	mov	r0, #0
   17308:	mov	r2, #5
   1730c:	movt	r1, #1
   17310:	bl	11108 <dcgettext@plt>
   17314:	movw	r2, #50197	; 0xc415
   17318:	mov	r3, r0
   1731c:	movw	r0, #2022	; 0x7e6
   17320:	mov	r1, #1
   17324:	movt	r2, #1
   17328:	str	r0, [sp]
   1732c:	mov	r0, r8
   17330:	bl	1124c <__fprintf_chk@plt>
   17334:	movw	r4, #46400	; 0xb540
   17338:	mov	r1, r8
   1733c:	movt	r4, #1
   17340:	mov	r0, r4
   17344:	bl	1106c <fputs_unlocked@plt>
   17348:	movw	r1, #49483	; 0xc14b
   1734c:	mov	r0, #0
   17350:	mov	r2, #5
   17354:	movt	r1, #1
   17358:	bl	11108 <dcgettext@plt>
   1735c:	movw	r3, #49654	; 0xc1f6
   17360:	mov	r2, r0
   17364:	mov	r0, r8
   17368:	mov	r1, #1
   1736c:	movt	r3, #1
   17370:	bl	1124c <__fprintf_chk@plt>
   17374:	mov	r0, r4
   17378:	mov	r1, r8
   1737c:	bl	1106c <fputs_unlocked@plt>
   17380:	cmp	r6, #9
   17384:	bhi	173c0 <__assert_fail@plt+0x609c>
   17388:	add	r0, pc, #0
   1738c:	ldr	pc, [r0, r6, lsl #2]
   17390:			; <UNDEFINED> instruction: 0x000173b8
   17394:	andeq	r7, r1, ip, asr #7
   17398:	strdeq	r7, [r1], -ip
   1739c:	andeq	r7, r1, r4, lsr #8
   173a0:	andeq	r7, r1, ip, asr #8
   173a4:	andeq	r7, r1, r4, ror r4
   173a8:	muleq	r1, ip, r4
   173ac:	ldrdeq	r7, [r1], -r4
   173b0:	andeq	r7, r1, r4, ror r5
   173b4:	andeq	r7, r1, ip, lsl r5
   173b8:	sub	sp, fp, #24
   173bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   173c0:	movw	r1, #50007	; 0xc357
   173c4:	movt	r1, #1
   173c8:	b	17524 <__assert_fail@plt+0x6200>
   173cc:	movw	r1, #49688	; 0xc218
   173d0:	mov	r0, #0
   173d4:	mov	r2, #5
   173d8:	movt	r1, #1
   173dc:	bl	11108 <dcgettext@plt>
   173e0:	ldr	r3, [r7]
   173e4:	mov	r2, r0
   173e8:	mov	r0, r8
   173ec:	mov	r1, #1
   173f0:	sub	sp, fp, #24
   173f4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   173f8:	b	1124c <__fprintf_chk@plt>
   173fc:	movw	r1, #49704	; 0xc228
   17400:	mov	r0, #0
   17404:	mov	r2, #5
   17408:	movt	r1, #1
   1740c:	bl	11108 <dcgettext@plt>
   17410:	mov	r2, r0
   17414:	ldr	r3, [r7]
   17418:	ldr	r0, [r7, #4]
   1741c:	str	r0, [sp]
   17420:	b	17510 <__assert_fail@plt+0x61ec>
   17424:	movw	r1, #49727	; 0xc23f
   17428:	mov	r0, #0
   1742c:	mov	r2, #5
   17430:	movt	r1, #1
   17434:	bl	11108 <dcgettext@plt>
   17438:	mov	r2, r0
   1743c:	ldr	r3, [r7]
   17440:	ldmib	r7, {r0, r1}
   17444:	stm	sp, {r0, r1}
   17448:	b	17510 <__assert_fail@plt+0x61ec>
   1744c:	movw	r1, #49755	; 0xc25b
   17450:	mov	r0, #0
   17454:	mov	r2, #5
   17458:	movt	r1, #1
   1745c:	bl	11108 <dcgettext@plt>
   17460:	ldr	r3, [r7]
   17464:	mov	r2, r0
   17468:	ldmib	r7, {r0, r1, r7}
   1746c:	stm	sp, {r0, r1, r7}
   17470:	b	17510 <__assert_fail@plt+0x61ec>
   17474:	movw	r1, #49787	; 0xc27b
   17478:	mov	r0, #0
   1747c:	mov	r2, #5
   17480:	movt	r1, #1
   17484:	bl	11108 <dcgettext@plt>
   17488:	ldr	r3, [r7]
   1748c:	mov	r2, r0
   17490:	ldmib	r7, {r0, r1, r6, r7}
   17494:	stm	sp, {r0, r1, r6, r7}
   17498:	b	17510 <__assert_fail@plt+0x61ec>
   1749c:	movw	r1, #49823	; 0xc29f
   174a0:	mov	r0, #0
   174a4:	mov	r2, #5
   174a8:	movt	r1, #1
   174ac:	bl	11108 <dcgettext@plt>
   174b0:	mov	r2, r0
   174b4:	ldr	r3, [r7]
   174b8:	ldmib	r7, {r0, r1, r6}
   174bc:	ldr	r5, [r7, #16]
   174c0:	ldr	r7, [r7, #20]
   174c4:	stm	sp, {r0, r1, r6}
   174c8:	str	r5, [sp, #12]
   174cc:	str	r7, [sp, #16]
   174d0:	b	17510 <__assert_fail@plt+0x61ec>
   174d4:	movw	r1, #49863	; 0xc2c7
   174d8:	mov	r0, #0
   174dc:	mov	r2, #5
   174e0:	movt	r1, #1
   174e4:	bl	11108 <dcgettext@plt>
   174e8:	mov	r2, r0
   174ec:	ldr	r3, [r7]
   174f0:	ldmib	r7, {r0, r1, r6}
   174f4:	ldr	r5, [r7, #16]
   174f8:	ldr	r4, [r7, #20]
   174fc:	ldr	r7, [r7, #24]
   17500:	stm	sp, {r0, r1, r6}
   17504:	str	r5, [sp, #12]
   17508:	str	r4, [sp, #16]
   1750c:	str	r7, [sp, #20]
   17510:	mov	r0, r8
   17514:	mov	r1, #1
   17518:	b	175c4 <__assert_fail@plt+0x62a0>
   1751c:	movw	r1, #49955	; 0xc323
   17520:	movt	r1, #1
   17524:	mov	r0, #0
   17528:	mov	r2, #5
   1752c:	bl	11108 <dcgettext@plt>
   17530:	mov	ip, r0
   17534:	ldr	r3, [r7]
   17538:	ldr	r0, [r7, #4]
   1753c:	ldr	r1, [r7, #8]
   17540:	ldr	r6, [r7, #12]
   17544:	ldr	r5, [r7, #16]
   17548:	ldr	r4, [r7, #20]
   1754c:	ldr	r2, [r7, #24]
   17550:	ldr	lr, [r7, #28]
   17554:	ldr	r7, [r7, #32]
   17558:	stm	sp, {r0, r1, r6}
   1755c:	str	r5, [sp, #12]
   17560:	str	r4, [sp, #16]
   17564:	str	r2, [sp, #20]
   17568:	str	lr, [sp, #24]
   1756c:	str	r7, [sp, #28]
   17570:	b	175b8 <__assert_fail@plt+0x6294>
   17574:	movw	r1, #49907	; 0xc2f3
   17578:	mov	r0, #0
   1757c:	mov	r2, #5
   17580:	movt	r1, #1
   17584:	bl	11108 <dcgettext@plt>
   17588:	mov	ip, r0
   1758c:	ldr	r3, [r7]
   17590:	ldmib	r7, {r0, r1, r6}
   17594:	ldr	r5, [r7, #16]
   17598:	ldr	r4, [r7, #20]
   1759c:	ldr	r2, [r7, #24]
   175a0:	ldr	r7, [r7, #28]
   175a4:	stm	sp, {r0, r1, r6}
   175a8:	str	r5, [sp, #12]
   175ac:	str	r4, [sp, #16]
   175b0:	str	r2, [sp, #20]
   175b4:	str	r7, [sp, #24]
   175b8:	mov	r0, r8
   175bc:	mov	r1, #1
   175c0:	mov	r2, ip
   175c4:	bl	1124c <__fprintf_chk@plt>
   175c8:	sub	sp, fp, #24
   175cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   175d0:	push	{r4, sl, fp, lr}
   175d4:	add	fp, sp, #8
   175d8:	sub	sp, sp, #8
   175dc:	ldr	ip, [fp, #8]
   175e0:	mov	lr, #0
   175e4:	ldr	r4, [ip, lr, lsl #2]
   175e8:	add	lr, lr, #1
   175ec:	cmp	r4, #0
   175f0:	bne	175e4 <__assert_fail@plt+0x62c0>
   175f4:	sub	r4, lr, #1
   175f8:	str	ip, [sp]
   175fc:	str	r4, [sp, #4]
   17600:	bl	1729c <__assert_fail@plt+0x5f78>
   17604:	sub	sp, fp, #8
   17608:	pop	{r4, sl, fp, pc}
   1760c:	push	{fp, lr}
   17610:	mov	fp, sp
   17614:	sub	sp, sp, #48	; 0x30
   17618:	ldr	ip, [fp, #8]
   1761c:	ldr	lr, [ip]
   17620:	cmp	lr, #0
   17624:	str	lr, [sp, #8]
   17628:	beq	176c4 <__assert_fail@plt+0x63a0>
   1762c:	ldr	lr, [ip, #4]
   17630:	cmp	lr, #0
   17634:	str	lr, [sp, #12]
   17638:	beq	176cc <__assert_fail@plt+0x63a8>
   1763c:	ldr	lr, [ip, #8]
   17640:	cmp	lr, #0
   17644:	str	lr, [sp, #16]
   17648:	beq	176d4 <__assert_fail@plt+0x63b0>
   1764c:	ldr	lr, [ip, #12]
   17650:	cmp	lr, #0
   17654:	str	lr, [sp, #20]
   17658:	beq	176dc <__assert_fail@plt+0x63b8>
   1765c:	ldr	lr, [ip, #16]
   17660:	cmp	lr, #0
   17664:	str	lr, [sp, #24]
   17668:	beq	176e4 <__assert_fail@plt+0x63c0>
   1766c:	ldr	lr, [ip, #20]
   17670:	cmp	lr, #0
   17674:	str	lr, [sp, #28]
   17678:	beq	176ec <__assert_fail@plt+0x63c8>
   1767c:	ldr	lr, [ip, #24]
   17680:	cmp	lr, #0
   17684:	str	lr, [sp, #32]
   17688:	beq	176f4 <__assert_fail@plt+0x63d0>
   1768c:	ldr	lr, [ip, #28]
   17690:	cmp	lr, #0
   17694:	str	lr, [sp, #36]	; 0x24
   17698:	beq	176fc <__assert_fail@plt+0x63d8>
   1769c:	ldr	lr, [ip, #32]
   176a0:	cmp	lr, #0
   176a4:	str	lr, [sp, #40]	; 0x28
   176a8:	beq	17704 <__assert_fail@plt+0x63e0>
   176ac:	ldr	lr, [ip, #36]	; 0x24
   176b0:	mov	ip, #10
   176b4:	cmp	lr, #0
   176b8:	str	lr, [sp, #44]	; 0x2c
   176bc:	movweq	ip, #9
   176c0:	b	17708 <__assert_fail@plt+0x63e4>
   176c4:	mov	ip, #0
   176c8:	b	17708 <__assert_fail@plt+0x63e4>
   176cc:	mov	ip, #1
   176d0:	b	17708 <__assert_fail@plt+0x63e4>
   176d4:	mov	ip, #2
   176d8:	b	17708 <__assert_fail@plt+0x63e4>
   176dc:	mov	ip, #3
   176e0:	b	17708 <__assert_fail@plt+0x63e4>
   176e4:	mov	ip, #4
   176e8:	b	17708 <__assert_fail@plt+0x63e4>
   176ec:	mov	ip, #5
   176f0:	b	17708 <__assert_fail@plt+0x63e4>
   176f4:	mov	ip, #6
   176f8:	b	17708 <__assert_fail@plt+0x63e4>
   176fc:	mov	ip, #7
   17700:	b	17708 <__assert_fail@plt+0x63e4>
   17704:	mov	ip, #8
   17708:	add	lr, sp, #8
   1770c:	str	ip, [sp, #4]
   17710:	str	lr, [sp]
   17714:	bl	1729c <__assert_fail@plt+0x5f78>
   17718:	mov	sp, fp
   1771c:	pop	{fp, pc}
   17720:	push	{fp, lr}
   17724:	mov	fp, sp
   17728:	sub	sp, sp, #56	; 0x38
   1772c:	add	ip, fp, #8
   17730:	str	ip, [sp, #12]
   17734:	ldr	lr, [fp, #8]
   17738:	cmp	lr, #0
   1773c:	str	lr, [sp, #16]
   17740:	beq	177dc <__assert_fail@plt+0x64b8>
   17744:	ldr	lr, [ip, #4]
   17748:	cmp	lr, #0
   1774c:	str	lr, [sp, #20]
   17750:	beq	177e4 <__assert_fail@plt+0x64c0>
   17754:	ldr	lr, [ip, #8]
   17758:	cmp	lr, #0
   1775c:	str	lr, [sp, #24]
   17760:	beq	177ec <__assert_fail@plt+0x64c8>
   17764:	ldr	lr, [ip, #12]
   17768:	cmp	lr, #0
   1776c:	str	lr, [sp, #28]
   17770:	beq	177f4 <__assert_fail@plt+0x64d0>
   17774:	ldr	lr, [ip, #16]
   17778:	cmp	lr, #0
   1777c:	str	lr, [sp, #32]
   17780:	beq	177fc <__assert_fail@plt+0x64d8>
   17784:	ldr	lr, [ip, #20]
   17788:	cmp	lr, #0
   1778c:	str	lr, [sp, #36]	; 0x24
   17790:	beq	17804 <__assert_fail@plt+0x64e0>
   17794:	ldr	lr, [ip, #24]
   17798:	cmp	lr, #0
   1779c:	str	lr, [sp, #40]	; 0x28
   177a0:	beq	1780c <__assert_fail@plt+0x64e8>
   177a4:	ldr	lr, [ip, #28]
   177a8:	cmp	lr, #0
   177ac:	str	lr, [sp, #44]	; 0x2c
   177b0:	beq	17814 <__assert_fail@plt+0x64f0>
   177b4:	ldr	lr, [ip, #32]
   177b8:	cmp	lr, #0
   177bc:	str	lr, [sp, #48]	; 0x30
   177c0:	beq	1781c <__assert_fail@plt+0x64f8>
   177c4:	ldr	lr, [ip, #36]	; 0x24
   177c8:	mov	ip, #10
   177cc:	cmp	lr, #0
   177d0:	str	lr, [sp, #52]	; 0x34
   177d4:	movweq	ip, #9
   177d8:	b	17820 <__assert_fail@plt+0x64fc>
   177dc:	mov	ip, #0
   177e0:	b	17820 <__assert_fail@plt+0x64fc>
   177e4:	mov	ip, #1
   177e8:	b	17820 <__assert_fail@plt+0x64fc>
   177ec:	mov	ip, #2
   177f0:	b	17820 <__assert_fail@plt+0x64fc>
   177f4:	mov	ip, #3
   177f8:	b	17820 <__assert_fail@plt+0x64fc>
   177fc:	mov	ip, #4
   17800:	b	17820 <__assert_fail@plt+0x64fc>
   17804:	mov	ip, #5
   17808:	b	17820 <__assert_fail@plt+0x64fc>
   1780c:	mov	ip, #6
   17810:	b	17820 <__assert_fail@plt+0x64fc>
   17814:	mov	ip, #7
   17818:	b	17820 <__assert_fail@plt+0x64fc>
   1781c:	mov	ip, #8
   17820:	add	lr, sp, #16
   17824:	str	ip, [sp, #4]
   17828:	str	lr, [sp]
   1782c:	bl	1729c <__assert_fail@plt+0x5f78>
   17830:	mov	sp, fp
   17834:	pop	{fp, pc}
   17838:	push	{fp, lr}
   1783c:	mov	fp, sp
   17840:	movw	r0, #53644	; 0xd18c
   17844:	movt	r0, #2
   17848:	ldr	r1, [r0]
   1784c:	movw	r0, #46400	; 0xb540
   17850:	movt	r0, #1
   17854:	bl	1106c <fputs_unlocked@plt>
   17858:	movw	r1, #50067	; 0xc393
   1785c:	mov	r0, #0
   17860:	mov	r2, #5
   17864:	movt	r1, #1
   17868:	bl	11108 <dcgettext@plt>
   1786c:	movw	r2, #50087	; 0xc3a7
   17870:	mov	r1, r0
   17874:	mov	r0, #1
   17878:	movt	r2, #1
   1787c:	bl	11234 <__printf_chk@plt>
   17880:	movw	r1, #50109	; 0xc3bd
   17884:	mov	r0, #0
   17888:	mov	r2, #5
   1788c:	movt	r1, #1
   17890:	bl	11108 <dcgettext@plt>
   17894:	movw	r2, #45712	; 0xb290
   17898:	movw	r3, #46209	; 0xb481
   1789c:	mov	r1, r0
   178a0:	mov	r0, #1
   178a4:	movt	r2, #1
   178a8:	movt	r3, #1
   178ac:	bl	11234 <__printf_chk@plt>
   178b0:	movw	r1, #50129	; 0xc3d1
   178b4:	mov	r0, #0
   178b8:	mov	r2, #5
   178bc:	movt	r1, #1
   178c0:	bl	11108 <dcgettext@plt>
   178c4:	movw	r2, #50168	; 0xc3f8
   178c8:	mov	r1, r0
   178cc:	mov	r0, #1
   178d0:	movt	r2, #1
   178d4:	pop	{fp, lr}
   178d8:	b	11234 <__printf_chk@plt>
   178dc:	push	{r4, r5, r6, sl, fp, lr}
   178e0:	add	fp, sp, #16
   178e4:	mov	r4, r2
   178e8:	mov	r5, r1
   178ec:	mov	r6, r0
   178f0:	bl	19a08 <__assert_fail@plt+0x86e4>
   178f4:	cmp	r0, #0
   178f8:	popne	{r4, r5, r6, sl, fp, pc}
   178fc:	cmp	r6, #0
   17900:	beq	17914 <__assert_fail@plt+0x65f0>
   17904:	cmp	r5, #0
   17908:	cmpne	r4, #0
   1790c:	bne	17914 <__assert_fail@plt+0x65f0>
   17910:	pop	{r4, r5, r6, sl, fp, pc}
   17914:	bl	17e90 <__assert_fail@plt+0x6b6c>
   17918:	push	{r4, r5, r6, sl, fp, lr}
   1791c:	add	fp, sp, #16
   17920:	mov	r4, r2
   17924:	mov	r5, r1
   17928:	mov	r6, r0
   1792c:	bl	19a08 <__assert_fail@plt+0x86e4>
   17930:	cmp	r0, #0
   17934:	popne	{r4, r5, r6, sl, fp, pc}
   17938:	cmp	r6, #0
   1793c:	beq	17950 <__assert_fail@plt+0x662c>
   17940:	cmp	r5, #0
   17944:	cmpne	r4, #0
   17948:	bne	17950 <__assert_fail@plt+0x662c>
   1794c:	pop	{r4, r5, r6, sl, fp, pc}
   17950:	bl	17e90 <__assert_fail@plt+0x6b6c>
   17954:	push	{fp, lr}
   17958:	mov	fp, sp
   1795c:	bl	196c4 <__assert_fail@plt+0x83a0>
   17960:	cmp	r0, #0
   17964:	popne	{fp, pc}
   17968:	bl	17e90 <__assert_fail@plt+0x6b6c>
   1796c:	push	{fp, lr}
   17970:	mov	fp, sp
   17974:	bl	196c4 <__assert_fail@plt+0x83a0>
   17978:	cmp	r0, #0
   1797c:	popne	{fp, pc}
   17980:	bl	17e90 <__assert_fail@plt+0x6b6c>
   17984:	push	{fp, lr}
   17988:	mov	fp, sp
   1798c:	bl	196c4 <__assert_fail@plt+0x83a0>
   17990:	cmp	r0, #0
   17994:	popne	{fp, pc}
   17998:	bl	17e90 <__assert_fail@plt+0x6b6c>
   1799c:	push	{r4, r5, fp, lr}
   179a0:	add	fp, sp, #8
   179a4:	mov	r4, r1
   179a8:	mov	r5, r0
   179ac:	bl	196f4 <__assert_fail@plt+0x83d0>
   179b0:	cmp	r0, #0
   179b4:	popne	{r4, r5, fp, pc}
   179b8:	cmp	r5, #0
   179bc:	beq	179cc <__assert_fail@plt+0x66a8>
   179c0:	cmp	r4, #0
   179c4:	bne	179cc <__assert_fail@plt+0x66a8>
   179c8:	pop	{r4, r5, fp, pc}
   179cc:	bl	17e90 <__assert_fail@plt+0x6b6c>
   179d0:	push	{fp, lr}
   179d4:	mov	fp, sp
   179d8:	cmp	r1, #0
   179dc:	orreq	r1, r1, #1
   179e0:	bl	196f4 <__assert_fail@plt+0x83d0>
   179e4:	cmp	r0, #0
   179e8:	popne	{fp, pc}
   179ec:	bl	17e90 <__assert_fail@plt+0x6b6c>
   179f0:	push	{fp, lr}
   179f4:	mov	fp, sp
   179f8:	clz	r3, r2
   179fc:	lsr	ip, r3, #5
   17a00:	clz	r3, r1
   17a04:	lsr	r3, r3, #5
   17a08:	orrs	r3, r3, ip
   17a0c:	movwne	r1, #1
   17a10:	movwne	r2, #1
   17a14:	bl	19a08 <__assert_fail@plt+0x86e4>
   17a18:	cmp	r0, #0
   17a1c:	popne	{fp, pc}
   17a20:	bl	17e90 <__assert_fail@plt+0x6b6c>
   17a24:	push	{fp, lr}
   17a28:	mov	fp, sp
   17a2c:	mov	r2, r1
   17a30:	mov	r1, r0
   17a34:	mov	r0, #0
   17a38:	bl	19a08 <__assert_fail@plt+0x86e4>
   17a3c:	cmp	r0, #0
   17a40:	popne	{fp, pc}
   17a44:	bl	17e90 <__assert_fail@plt+0x6b6c>
   17a48:	push	{fp, lr}
   17a4c:	mov	fp, sp
   17a50:	mov	r2, r1
   17a54:	mov	r1, r0
   17a58:	clz	r0, r2
   17a5c:	clz	r3, r1
   17a60:	lsr	r0, r0, #5
   17a64:	lsr	r3, r3, #5
   17a68:	orrs	r0, r3, r0
   17a6c:	mov	r0, #0
   17a70:	movwne	r1, #1
   17a74:	movwne	r2, #1
   17a78:	bl	19a08 <__assert_fail@plt+0x86e4>
   17a7c:	cmp	r0, #0
   17a80:	popne	{fp, pc}
   17a84:	bl	17e90 <__assert_fail@plt+0x6b6c>
   17a88:	push	{r4, r5, r6, sl, fp, lr}
   17a8c:	add	fp, sp, #16
   17a90:	ldr	r5, [r1]
   17a94:	mov	r4, r1
   17a98:	mov	r6, r0
   17a9c:	cmp	r0, #0
   17aa0:	beq	17ab8 <__assert_fail@plt+0x6794>
   17aa4:	mov	r0, #1
   17aa8:	add	r0, r0, r5, lsr #1
   17aac:	adds	r5, r5, r0
   17ab0:	bcc	17ac0 <__assert_fail@plt+0x679c>
   17ab4:	b	17afc <__assert_fail@plt+0x67d8>
   17ab8:	cmp	r5, #0
   17abc:	movweq	r5, #64	; 0x40
   17ac0:	mov	r0, r6
   17ac4:	mov	r1, r5
   17ac8:	mov	r2, #1
   17acc:	bl	19a08 <__assert_fail@plt+0x86e4>
   17ad0:	cmp	r5, #0
   17ad4:	mov	r1, r5
   17ad8:	movwne	r1, #1
   17adc:	cmp	r0, #0
   17ae0:	bne	17af4 <__assert_fail@plt+0x67d0>
   17ae4:	clz	r2, r6
   17ae8:	lsr	r2, r2, #5
   17aec:	orrs	r1, r2, r1
   17af0:	bne	17afc <__assert_fail@plt+0x67d8>
   17af4:	str	r5, [r4]
   17af8:	pop	{r4, r5, r6, sl, fp, pc}
   17afc:	bl	17e90 <__assert_fail@plt+0x6b6c>
   17b00:	push	{r4, r5, r6, r7, fp, lr}
   17b04:	add	fp, sp, #16
   17b08:	ldr	r5, [r1]
   17b0c:	mov	r6, r2
   17b10:	mov	r4, r1
   17b14:	mov	r7, r0
   17b18:	cmp	r0, #0
   17b1c:	beq	17b34 <__assert_fail@plt+0x6810>
   17b20:	mov	r0, #1
   17b24:	add	r0, r0, r5, lsr #1
   17b28:	adds	r5, r5, r0
   17b2c:	bcc	17b4c <__assert_fail@plt+0x6828>
   17b30:	b	17b80 <__assert_fail@plt+0x685c>
   17b34:	cmp	r5, #0
   17b38:	bne	17b4c <__assert_fail@plt+0x6828>
   17b3c:	mov	r0, #64	; 0x40
   17b40:	cmp	r6, #64	; 0x40
   17b44:	udiv	r5, r0, r6
   17b48:	addhi	r5, r5, #1
   17b4c:	mov	r0, r7
   17b50:	mov	r1, r5
   17b54:	mov	r2, r6
   17b58:	bl	19a08 <__assert_fail@plt+0x86e4>
   17b5c:	cmp	r0, #0
   17b60:	bne	17b78 <__assert_fail@plt+0x6854>
   17b64:	cmp	r7, #0
   17b68:	beq	17b80 <__assert_fail@plt+0x685c>
   17b6c:	cmp	r6, #0
   17b70:	cmpne	r5, #0
   17b74:	bne	17b80 <__assert_fail@plt+0x685c>
   17b78:	str	r5, [r4]
   17b7c:	pop	{r4, r5, r6, r7, fp, pc}
   17b80:	bl	17e90 <__assert_fail@plt+0x6b6c>
   17b84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17b88:	add	fp, sp, #24
   17b8c:	mov	r8, r1
   17b90:	ldr	r1, [r1]
   17b94:	mov	r5, r0
   17b98:	add	r0, r1, r1, asr #1
   17b9c:	cmp	r0, r1
   17ba0:	mvnvs	r0, #-2147483648	; 0x80000000
   17ba4:	cmp	r0, r3
   17ba8:	mov	r7, r0
   17bac:	movgt	r7, r3
   17bb0:	cmn	r3, #1
   17bb4:	movle	r7, r0
   17bb8:	ldr	r0, [fp, #8]
   17bbc:	cmn	r0, #1
   17bc0:	ble	17be8 <__assert_fail@plt+0x68c4>
   17bc4:	cmp	r0, #0
   17bc8:	beq	17c3c <__assert_fail@plt+0x6918>
   17bcc:	cmn	r7, #1
   17bd0:	ble	17c10 <__assert_fail@plt+0x68ec>
   17bd4:	mvn	r4, #-2147483648	; 0x80000000
   17bd8:	udiv	r6, r4, r0
   17bdc:	cmp	r6, r7
   17be0:	bge	17c3c <__assert_fail@plt+0x6918>
   17be4:	b	17c4c <__assert_fail@plt+0x6928>
   17be8:	cmn	r7, #1
   17bec:	ble	17c2c <__assert_fail@plt+0x6908>
   17bf0:	cmn	r0, #1
   17bf4:	beq	17c3c <__assert_fail@plt+0x6918>
   17bf8:	mov	r6, #-2147483648	; 0x80000000
   17bfc:	mvn	r4, #-2147483648	; 0x80000000
   17c00:	sdiv	r6, r6, r0
   17c04:	cmp	r6, r7
   17c08:	bge	17c3c <__assert_fail@plt+0x6918>
   17c0c:	b	17c4c <__assert_fail@plt+0x6928>
   17c10:	beq	17c3c <__assert_fail@plt+0x6918>
   17c14:	mov	r6, #-2147483648	; 0x80000000
   17c18:	mvn	r4, #-2147483648	; 0x80000000
   17c1c:	sdiv	r6, r6, r7
   17c20:	cmp	r6, r0
   17c24:	bge	17c3c <__assert_fail@plt+0x6918>
   17c28:	b	17c4c <__assert_fail@plt+0x6928>
   17c2c:	mvn	r4, #-2147483648	; 0x80000000
   17c30:	sdiv	r6, r4, r0
   17c34:	cmp	r7, r6
   17c38:	blt	17c4c <__assert_fail@plt+0x6928>
   17c3c:	mul	r6, r7, r0
   17c40:	mov	r4, #64	; 0x40
   17c44:	cmp	r6, #63	; 0x3f
   17c48:	bgt	17c54 <__assert_fail@plt+0x6930>
   17c4c:	sdiv	r7, r4, r0
   17c50:	mul	r6, r7, r0
   17c54:	cmp	r5, #0
   17c58:	moveq	r4, #0
   17c5c:	streq	r4, [r8]
   17c60:	sub	r4, r7, r1
   17c64:	cmp	r4, r2
   17c68:	bge	17d14 <__assert_fail@plt+0x69f0>
   17c6c:	add	r7, r1, r2
   17c70:	mov	r6, #0
   17c74:	mov	r2, #0
   17c78:	cmp	r7, r3
   17c7c:	movwgt	r6, #1
   17c80:	cmn	r3, #1
   17c84:	movwgt	r2, #1
   17c88:	cmp	r7, r1
   17c8c:	bvs	17d48 <__assert_fail@plt+0x6a24>
   17c90:	ands	r1, r2, r6
   17c94:	bne	17d48 <__assert_fail@plt+0x6a24>
   17c98:	cmn	r0, #1
   17c9c:	ble	17cc4 <__assert_fail@plt+0x69a0>
   17ca0:	cmp	r0, #0
   17ca4:	beq	17d10 <__assert_fail@plt+0x69ec>
   17ca8:	cmn	r7, #1
   17cac:	ble	17ce8 <__assert_fail@plt+0x69c4>
   17cb0:	mvn	r1, #-2147483648	; 0x80000000
   17cb4:	udiv	r1, r1, r0
   17cb8:	cmp	r1, r7
   17cbc:	bge	17d10 <__assert_fail@plt+0x69ec>
   17cc0:	b	17d48 <__assert_fail@plt+0x6a24>
   17cc4:	cmn	r7, #1
   17cc8:	ble	17d00 <__assert_fail@plt+0x69dc>
   17ccc:	cmn	r0, #1
   17cd0:	beq	17d10 <__assert_fail@plt+0x69ec>
   17cd4:	mov	r1, #-2147483648	; 0x80000000
   17cd8:	sdiv	r1, r1, r0
   17cdc:	cmp	r1, r7
   17ce0:	bge	17d10 <__assert_fail@plt+0x69ec>
   17ce4:	b	17d48 <__assert_fail@plt+0x6a24>
   17ce8:	beq	17d10 <__assert_fail@plt+0x69ec>
   17cec:	mov	r1, #-2147483648	; 0x80000000
   17cf0:	sdiv	r1, r1, r7
   17cf4:	cmp	r1, r0
   17cf8:	bge	17d10 <__assert_fail@plt+0x69ec>
   17cfc:	b	17d48 <__assert_fail@plt+0x6a24>
   17d00:	mvn	r1, #-2147483648	; 0x80000000
   17d04:	sdiv	r1, r1, r0
   17d08:	cmp	r7, r1
   17d0c:	blt	17d48 <__assert_fail@plt+0x6a24>
   17d10:	mul	r6, r7, r0
   17d14:	mov	r0, r5
   17d18:	mov	r1, r6
   17d1c:	bl	196f4 <__assert_fail@plt+0x83d0>
   17d20:	cmp	r6, #0
   17d24:	movwne	r6, #1
   17d28:	cmp	r0, #0
   17d2c:	bne	17d40 <__assert_fail@plt+0x6a1c>
   17d30:	clz	r1, r5
   17d34:	lsr	r1, r1, #5
   17d38:	orrs	r1, r1, r6
   17d3c:	bne	17d48 <__assert_fail@plt+0x6a24>
   17d40:	str	r7, [r8]
   17d44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17d48:	bl	17e90 <__assert_fail@plt+0x6b6c>
   17d4c:	push	{fp, lr}
   17d50:	mov	fp, sp
   17d54:	mov	r1, #1
   17d58:	bl	19670 <__assert_fail@plt+0x834c>
   17d5c:	cmp	r0, #0
   17d60:	popne	{fp, pc}
   17d64:	bl	17e90 <__assert_fail@plt+0x6b6c>
   17d68:	push	{fp, lr}
   17d6c:	mov	fp, sp
   17d70:	bl	19670 <__assert_fail@plt+0x834c>
   17d74:	cmp	r0, #0
   17d78:	popne	{fp, pc}
   17d7c:	bl	17e90 <__assert_fail@plt+0x6b6c>
   17d80:	push	{fp, lr}
   17d84:	mov	fp, sp
   17d88:	mov	r1, #1
   17d8c:	bl	19670 <__assert_fail@plt+0x834c>
   17d90:	cmp	r0, #0
   17d94:	popne	{fp, pc}
   17d98:	bl	17e90 <__assert_fail@plt+0x6b6c>
   17d9c:	push	{fp, lr}
   17da0:	mov	fp, sp
   17da4:	bl	19670 <__assert_fail@plt+0x834c>
   17da8:	cmp	r0, #0
   17dac:	popne	{fp, pc}
   17db0:	bl	17e90 <__assert_fail@plt+0x6b6c>
   17db4:	push	{r4, r5, fp, lr}
   17db8:	add	fp, sp, #8
   17dbc:	mov	r5, r0
   17dc0:	mov	r0, r1
   17dc4:	mov	r4, r1
   17dc8:	bl	196c4 <__assert_fail@plt+0x83a0>
   17dcc:	cmp	r0, #0
   17dd0:	beq	17de4 <__assert_fail@plt+0x6ac0>
   17dd4:	mov	r1, r5
   17dd8:	mov	r2, r4
   17ddc:	pop	{r4, r5, fp, lr}
   17de0:	b	110e4 <memcpy@plt>
   17de4:	bl	17e90 <__assert_fail@plt+0x6b6c>
   17de8:	push	{r4, r5, fp, lr}
   17dec:	add	fp, sp, #8
   17df0:	mov	r5, r0
   17df4:	mov	r0, r1
   17df8:	mov	r4, r1
   17dfc:	bl	196c4 <__assert_fail@plt+0x83a0>
   17e00:	cmp	r0, #0
   17e04:	beq	17e18 <__assert_fail@plt+0x6af4>
   17e08:	mov	r1, r5
   17e0c:	mov	r2, r4
   17e10:	pop	{r4, r5, fp, lr}
   17e14:	b	110e4 <memcpy@plt>
   17e18:	bl	17e90 <__assert_fail@plt+0x6b6c>
   17e1c:	push	{r4, r5, fp, lr}
   17e20:	add	fp, sp, #8
   17e24:	mov	r5, r0
   17e28:	add	r0, r1, #1
   17e2c:	mov	r4, r1
   17e30:	bl	196c4 <__assert_fail@plt+0x83a0>
   17e34:	cmp	r0, #0
   17e38:	beq	17e54 <__assert_fail@plt+0x6b30>
   17e3c:	mov	r1, #0
   17e40:	mov	r2, r4
   17e44:	strb	r1, [r0, r4]
   17e48:	mov	r1, r5
   17e4c:	pop	{r4, r5, fp, lr}
   17e50:	b	110e4 <memcpy@plt>
   17e54:	bl	17e90 <__assert_fail@plt+0x6b6c>
   17e58:	push	{r4, r5, fp, lr}
   17e5c:	add	fp, sp, #8
   17e60:	mov	r4, r0
   17e64:	bl	111f8 <strlen@plt>
   17e68:	add	r5, r0, #1
   17e6c:	mov	r0, r5
   17e70:	bl	196c4 <__assert_fail@plt+0x83a0>
   17e74:	cmp	r0, #0
   17e78:	beq	17e8c <__assert_fail@plt+0x6b68>
   17e7c:	mov	r1, r4
   17e80:	mov	r2, r5
   17e84:	pop	{r4, r5, fp, lr}
   17e88:	b	110e4 <memcpy@plt>
   17e8c:	bl	17e90 <__assert_fail@plt+0x6b6c>
   17e90:	push	{fp, lr}
   17e94:	mov	fp, sp
   17e98:	movw	r0, #53548	; 0xd12c
   17e9c:	movw	r1, #50244	; 0xc444
   17ea0:	mov	r2, #5
   17ea4:	movt	r0, #2
   17ea8:	movt	r1, #1
   17eac:	ldr	r4, [r0]
   17eb0:	mov	r0, #0
   17eb4:	bl	11108 <dcgettext@plt>
   17eb8:	movw	r2, #49193	; 0xc029
   17ebc:	mov	r3, r0
   17ec0:	mov	r0, r4
   17ec4:	mov	r1, #0
   17ec8:	movt	r2, #1
   17ecc:	bl	1118c <error@plt>
   17ed0:	bl	112f4 <abort@plt>
   17ed4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ed8:	add	fp, sp, #28
   17edc:	sub	sp, sp, #12
   17ee0:	cmp	r2, #37	; 0x25
   17ee4:	bcs	189b0 <__assert_fail@plt+0x768c>
   17ee8:	ldr	r8, [fp, #8]
   17eec:	mov	r9, r3
   17ef0:	mov	r7, r2
   17ef4:	mov	r4, r1
   17ef8:	mov	r5, r0
   17efc:	bl	11210 <__errno_location@plt>
   17f00:	cmp	r4, #0
   17f04:	add	sl, sp, #8
   17f08:	mov	r6, r0
   17f0c:	mov	r0, #0
   17f10:	mov	r2, r7
   17f14:	movne	sl, r4
   17f18:	str	r0, [r6]
   17f1c:	mov	r0, r5
   17f20:	mov	r1, sl
   17f24:	bl	1109c <strtol@plt>
   17f28:	ldr	r4, [sl]
   17f2c:	str	r9, [sp, #4]
   17f30:	cmp	r4, r5
   17f34:	beq	17f64 <__assert_fail@plt+0x6c40>
   17f38:	mov	r7, r0
   17f3c:	ldr	r0, [r6]
   17f40:	cmp	r0, #0
   17f44:	beq	17f98 <__assert_fail@plt+0x6c74>
   17f48:	mov	r9, #4
   17f4c:	cmp	r0, #34	; 0x22
   17f50:	bne	1898c <__assert_fail@plt+0x7668>
   17f54:	mov	r9, #1
   17f58:	cmp	r8, #0
   17f5c:	bne	17fa4 <__assert_fail@plt+0x6c80>
   17f60:	b	18984 <__assert_fail@plt+0x7660>
   17f64:	mov	r9, #4
   17f68:	cmp	r8, #0
   17f6c:	beq	1898c <__assert_fail@plt+0x7668>
   17f70:	ldrb	r1, [r5]
   17f74:	cmp	r1, #0
   17f78:	beq	1898c <__assert_fail@plt+0x7668>
   17f7c:	mov	r0, r8
   17f80:	bl	11204 <strchr@plt>
   17f84:	cmp	r0, #0
   17f88:	beq	1898c <__assert_fail@plt+0x7668>
   17f8c:	mov	r7, #1
   17f90:	mov	r9, #0
   17f94:	b	17fa4 <__assert_fail@plt+0x6c80>
   17f98:	mov	r9, r0
   17f9c:	cmp	r8, #0
   17fa0:	beq	18984 <__assert_fail@plt+0x7660>
   17fa4:	ldrb	r5, [r4]
   17fa8:	cmp	r5, #0
   17fac:	beq	18984 <__assert_fail@plt+0x7660>
   17fb0:	mov	r0, r8
   17fb4:	mov	r1, r5
   17fb8:	bl	11204 <strchr@plt>
   17fbc:	cmp	r0, #0
   17fc0:	beq	18200 <__assert_fail@plt+0x6edc>
   17fc4:	sub	r0, r5, #69	; 0x45
   17fc8:	mov	ip, #1
   17fcc:	mov	r6, #1024	; 0x400
   17fd0:	cmp	r0, #47	; 0x2f
   17fd4:	bhi	180f0 <__assert_fail@plt+0x6dcc>
   17fd8:	add	r1, pc, #0
   17fdc:	ldr	pc, [r1, r0, lsl #2]
   17fe0:	andeq	r8, r1, r0, lsr #1
   17fe4:	strdeq	r8, [r1], -r0
   17fe8:	andeq	r8, r1, r0, lsr #1
   17fec:	strdeq	r8, [r1], -r0
   17ff0:	strdeq	r8, [r1], -r0
   17ff4:	strdeq	r8, [r1], -r0
   17ff8:	andeq	r8, r1, r0, lsr #1
   17ffc:	strdeq	r8, [r1], -r0
   18000:	andeq	r8, r1, r0, lsr #1
   18004:	strdeq	r8, [r1], -r0
   18008:	strdeq	r8, [r1], -r0
   1800c:	andeq	r8, r1, r0, lsr #1
   18010:	strdeq	r8, [r1], -r0
   18014:	strdeq	r8, [r1], -r0
   18018:	strdeq	r8, [r1], -r0
   1801c:	andeq	r8, r1, r0, lsr #1
   18020:	strdeq	r8, [r1], -r0
   18024:	strdeq	r8, [r1], -r0
   18028:	strdeq	r8, [r1], -r0
   1802c:	strdeq	r8, [r1], -r0
   18030:	andeq	r8, r1, r0, lsr #1
   18034:	andeq	r8, r1, r0, lsr #1
   18038:	strdeq	r8, [r1], -r0
   1803c:	strdeq	r8, [r1], -r0
   18040:	strdeq	r8, [r1], -r0
   18044:	strdeq	r8, [r1], -r0
   18048:	strdeq	r8, [r1], -r0
   1804c:	strdeq	r8, [r1], -r0
   18050:	strdeq	r8, [r1], -r0
   18054:	strdeq	r8, [r1], -r0
   18058:	strdeq	r8, [r1], -r0
   1805c:	strdeq	r8, [r1], -r0
   18060:	strdeq	r8, [r1], -r0
   18064:	strdeq	r8, [r1], -r0
   18068:	andeq	r8, r1, r0, lsr #1
   1806c:	strdeq	r8, [r1], -r0
   18070:	strdeq	r8, [r1], -r0
   18074:	strdeq	r8, [r1], -r0
   18078:	andeq	r8, r1, r0, lsr #1
   1807c:	strdeq	r8, [r1], -r0
   18080:	andeq	r8, r1, r0, lsr #1
   18084:	strdeq	r8, [r1], -r0
   18088:	strdeq	r8, [r1], -r0
   1808c:	strdeq	r8, [r1], -r0
   18090:	strdeq	r8, [r1], -r0
   18094:	strdeq	r8, [r1], -r0
   18098:	strdeq	r8, [r1], -r0
   1809c:	andeq	r8, r1, r0, lsr #1
   180a0:	mov	r0, r8
   180a4:	mov	r1, #48	; 0x30
   180a8:	bl	11204 <strchr@plt>
   180ac:	cmp	r0, #0
   180b0:	beq	180ec <__assert_fail@plt+0x6dc8>
   180b4:	ldrb	r0, [r4, #1]
   180b8:	cmp	r0, #66	; 0x42
   180bc:	cmpne	r0, #68	; 0x44
   180c0:	bne	180d0 <__assert_fail@plt+0x6dac>
   180c4:	mov	ip, #2
   180c8:	mov	r6, #1000	; 0x3e8
   180cc:	b	180f0 <__assert_fail@plt+0x6dcc>
   180d0:	cmp	r0, #105	; 0x69
   180d4:	bne	180ec <__assert_fail@plt+0x6dc8>
   180d8:	ldrb	r0, [r4, #2]
   180dc:	mov	ip, #1
   180e0:	cmp	r0, #66	; 0x42
   180e4:	movweq	ip, #3
   180e8:	b	180f0 <__assert_fail@plt+0x6dcc>
   180ec:	mov	ip, #1
   180f0:	sub	r1, r5, #66	; 0x42
   180f4:	cmp	r1, #53	; 0x35
   180f8:	bhi	18200 <__assert_fail@plt+0x6edc>
   180fc:	add	r2, pc, #4
   18100:	mov	r0, #0
   18104:	ldr	pc, [r2, r1, lsl #2]
   18108:	andeq	r8, r1, r8, lsl #5
   1810c:	andeq	r8, r1, r0, lsl #4
   18110:	andeq	r8, r1, r0, lsl #4
   18114:	muleq	r1, ip, r2
   18118:	andeq	r8, r1, r0, lsl #4
   1811c:	andeq	r8, r1, r0, ror #3
   18120:	andeq	r8, r1, r0, lsl #4
   18124:	andeq	r8, r1, r0, lsl #4
   18128:	andeq	r8, r1, r0, lsl #4
   1812c:	andeq	r8, r1, ip, lsl #4
   18130:	andeq	r8, r1, r0, lsl #4
   18134:	andeq	r8, r1, r8, lsr #4
   18138:	andeq	r8, r1, r0, lsl #4
   1813c:	andeq	r8, r1, r0, lsl #4
   18140:			; <UNDEFINED> instruction: 0x000182bc
   18144:	andeq	r8, r1, r0, lsl #4
   18148:	andeq	r8, r1, r0, lsl #4
   1814c:	andeq	r8, r1, r0, lsl #4
   18150:	andeq	r8, r1, r8, asr #4
   18154:	andeq	r8, r1, r0, lsl #4
   18158:	andeq	r8, r1, r0, lsl #4
   1815c:	andeq	r8, r1, r0, lsl #4
   18160:	andeq	r8, r1, r0, lsl #4
   18164:	ldrdeq	r8, [r1], -ip
   18168:	andeq	r8, r1, r8, ror #4
   1816c:	andeq	r8, r1, r0, lsl #4
   18170:	andeq	r8, r1, r0, lsl #4
   18174:	andeq	r8, r1, r0, lsl #4
   18178:	andeq	r8, r1, r0, lsl #4
   1817c:	andeq	r8, r1, r0, lsl #4
   18180:	andeq	r8, r1, r0, lsl #4
   18184:	andeq	r8, r1, r0, lsl #4
   18188:	strdeq	r8, [r1], -ip
   1818c:	andeq	r8, r1, ip, ror #18
   18190:	andeq	r8, r1, r0, lsl #4
   18194:	andeq	r8, r1, r0, lsl #4
   18198:	andeq	r8, r1, r0, lsl #4
   1819c:	andeq	r8, r1, r0, ror #3
   181a0:	andeq	r8, r1, r0, lsl #4
   181a4:	andeq	r8, r1, r0, lsl #4
   181a8:	andeq	r8, r1, r0, lsl #4
   181ac:	andeq	r8, r1, ip, lsl #4
   181b0:	andeq	r8, r1, r0, lsl #4
   181b4:	andeq	r8, r1, r8, lsr #4
   181b8:	andeq	r8, r1, r0, lsl #4
   181bc:	andeq	r8, r1, r0, lsl #4
   181c0:	andeq	r8, r1, r0, lsl #4
   181c4:	andeq	r8, r1, r0, lsl #4
   181c8:	andeq	r8, r1, r0, lsl #4
   181cc:	andeq	r8, r1, r0, lsl #4
   181d0:	andeq	r8, r1, r8, asr #4
   181d4:	andeq	r8, r1, r0, lsl #4
   181d8:	andeq	r8, r1, r0, lsl #4
   181dc:	andeq	r8, r1, ip, lsl r3
   181e0:	cmn	r7, #1
   181e4:	ble	18330 <__assert_fail@plt+0x700c>
   181e8:	mvn	r2, #-2147483648	; 0x80000000
   181ec:	mov	r3, #1
   181f0:	udiv	r0, r2, r6
   181f4:	cmp	r0, r7
   181f8:	bge	18348 <__assert_fail@plt+0x7024>
   181fc:	b	18408 <__assert_fail@plt+0x70e4>
   18200:	ldr	r0, [sp, #4]
   18204:	orr	r9, r9, #2
   18208:	b	18988 <__assert_fail@plt+0x7664>
   1820c:	cmn	r7, #1
   18210:	ble	1835c <__assert_fail@plt+0x7038>
   18214:	mvn	r1, #-2147483648	; 0x80000000
   18218:	udiv	r1, r1, r6
   1821c:	cmp	r1, r7
   18220:	bge	18370 <__assert_fail@plt+0x704c>
   18224:	b	185d8 <__assert_fail@plt+0x72b4>
   18228:	cmn	r7, #1
   1822c:	ble	18378 <__assert_fail@plt+0x7054>
   18230:	mvn	r1, #-2147483648	; 0x80000000
   18234:	mov	r0, #1
   18238:	udiv	r2, r1, r6
   1823c:	cmp	r2, r7
   18240:	bge	18390 <__assert_fail@plt+0x706c>
   18244:	b	18444 <__assert_fail@plt+0x7120>
   18248:	cmn	r7, #1
   1824c:	ble	183a4 <__assert_fail@plt+0x7080>
   18250:	mvn	r0, #-2147483648	; 0x80000000
   18254:	mov	r1, #1
   18258:	udiv	r2, r0, r6
   1825c:	cmp	r2, r7
   18260:	bge	183bc <__assert_fail@plt+0x7098>
   18264:	b	183cc <__assert_fail@plt+0x70a8>
   18268:	cmp	r7, #0
   1826c:	bmi	1847c <__assert_fail@plt+0x7158>
   18270:	mvn	r0, #-2147483648	; 0x80000000
   18274:	mov	r3, #1
   18278:	udiv	r1, r0, r6
   1827c:	cmp	r1, r7
   18280:	bge	18498 <__assert_fail@plt+0x7174>
   18284:	b	184a8 <__assert_fail@plt+0x7184>
   18288:	cmn	r7, #1
   1828c:	ble	184c0 <__assert_fail@plt+0x719c>
   18290:	cmp	r7, #2097152	; 0x200000
   18294:	blt	184d4 <__assert_fail@plt+0x71b0>
   18298:	b	185d8 <__assert_fail@plt+0x72b4>
   1829c:	cmp	r7, #0
   182a0:	bmi	184dc <__assert_fail@plt+0x71b8>
   182a4:	mvn	r0, #-2147483648	; 0x80000000
   182a8:	mov	r3, #1
   182ac:	udiv	r1, r0, r6
   182b0:	cmp	r1, r7
   182b4:	bge	184f8 <__assert_fail@plt+0x71d4>
   182b8:	b	18508 <__assert_fail@plt+0x71e4>
   182bc:	cmp	r7, #0
   182c0:	bmi	18520 <__assert_fail@plt+0x71fc>
   182c4:	mvn	r0, #-2147483648	; 0x80000000
   182c8:	mov	r3, #1
   182cc:	udiv	r1, r0, r6
   182d0:	cmp	r1, r7
   182d4:	bge	1853c <__assert_fail@plt+0x7218>
   182d8:	b	1854c <__assert_fail@plt+0x7228>
   182dc:	cmp	r7, #0
   182e0:	bmi	18564 <__assert_fail@plt+0x7240>
   182e4:	mvn	r0, #-2147483648	; 0x80000000
   182e8:	mov	r3, #1
   182ec:	udiv	r1, r0, r6
   182f0:	cmp	r1, r7
   182f4:	bge	18580 <__assert_fail@plt+0x725c>
   182f8:	b	18590 <__assert_fail@plt+0x726c>
   182fc:	cmn	r7, #1
   18300:	ble	185a8 <__assert_fail@plt+0x7284>
   18304:	movw	r1, #65535	; 0xffff
   18308:	movt	r1, #31
   1830c:	orr	r1, r1, #2097152	; 0x200000
   18310:	cmp	r7, r1
   18314:	ble	185bc <__assert_fail@plt+0x7298>
   18318:	b	185d8 <__assert_fail@plt+0x72b4>
   1831c:	cmn	r7, #1
   18320:	ble	185c4 <__assert_fail@plt+0x72a0>
   18324:	cmp	r7, #1073741824	; 0x40000000
   18328:	bge	185d8 <__assert_fail@plt+0x72b4>
   1832c:	b	185f0 <__assert_fail@plt+0x72cc>
   18330:	beq	18348 <__assert_fail@plt+0x7024>
   18334:	mov	r2, #-2147483648	; 0x80000000
   18338:	mov	r3, #1
   1833c:	sdiv	r0, r2, r7
   18340:	cmp	r0, r6
   18344:	blt	18420 <__assert_fail@plt+0x70fc>
   18348:	mul	r2, r7, r6
   1834c:	mov	r3, #0
   18350:	cmp	r2, #0
   18354:	bpl	18408 <__assert_fail@plt+0x70e4>
   18358:	b	18420 <__assert_fail@plt+0x70fc>
   1835c:	beq	18370 <__assert_fail@plt+0x704c>
   18360:	mov	r1, #-2147483648	; 0x80000000
   18364:	sdiv	r1, r1, r7
   18368:	cmp	r1, r6
   1836c:	blt	185d8 <__assert_fail@plt+0x72b4>
   18370:	mul	r7, r7, r6
   18374:	b	1896c <__assert_fail@plt+0x7648>
   18378:	beq	18390 <__assert_fail@plt+0x706c>
   1837c:	mov	r1, #-2147483648	; 0x80000000
   18380:	mov	r0, #1
   18384:	sdiv	r2, r1, r7
   18388:	cmp	r2, r6
   1838c:	blt	1845c <__assert_fail@plt+0x7138>
   18390:	mul	r1, r7, r6
   18394:	mov	r0, #0
   18398:	cmp	r1, #0
   1839c:	bpl	18444 <__assert_fail@plt+0x7120>
   183a0:	b	1845c <__assert_fail@plt+0x7138>
   183a4:	beq	183bc <__assert_fail@plt+0x7098>
   183a8:	mov	r0, #-2147483648	; 0x80000000
   183ac:	mov	r1, #1
   183b0:	sdiv	r2, r0, r7
   183b4:	cmp	r2, r6
   183b8:	blt	183e4 <__assert_fail@plt+0x70c0>
   183bc:	mul	r0, r7, r6
   183c0:	mov	r1, #0
   183c4:	cmp	r0, #0
   183c8:	bmi	183e4 <__assert_fail@plt+0x70c0>
   183cc:	mvn	r2, #-2147483648	; 0x80000000
   183d0:	mov	r3, #1
   183d4:	udiv	r7, r2, r6
   183d8:	cmp	r7, r0
   183dc:	blt	18408 <__assert_fail@plt+0x70e4>
   183e0:	b	183f8 <__assert_fail@plt+0x70d4>
   183e4:	mov	r2, #-2147483648	; 0x80000000
   183e8:	mov	r3, #1
   183ec:	sdiv	r7, r2, r0
   183f0:	cmp	r7, r6
   183f4:	blt	18420 <__assert_fail@plt+0x70fc>
   183f8:	mul	r2, r0, r6
   183fc:	mov	r3, r1
   18400:	cmp	r2, #0
   18404:	bmi	18420 <__assert_fail@plt+0x70fc>
   18408:	mvn	r1, #-2147483648	; 0x80000000
   1840c:	mov	r0, #1
   18410:	udiv	r7, r1, r6
   18414:	cmp	r7, r2
   18418:	blt	18444 <__assert_fail@plt+0x7120>
   1841c:	b	18434 <__assert_fail@plt+0x7110>
   18420:	mov	r1, #-2147483648	; 0x80000000
   18424:	mov	r0, #1
   18428:	sdiv	r7, r1, r2
   1842c:	cmp	r7, r6
   18430:	blt	1845c <__assert_fail@plt+0x7138>
   18434:	mul	r1, r2, r6
   18438:	mov	r0, r3
   1843c:	cmp	r1, #0
   18440:	bmi	1845c <__assert_fail@plt+0x7138>
   18444:	mvn	r7, #-2147483648	; 0x80000000
   18448:	mov	r2, #1
   1844c:	udiv	r3, r7, r6
   18450:	cmp	r3, r1
   18454:	blt	18968 <__assert_fail@plt+0x7644>
   18458:	b	18470 <__assert_fail@plt+0x714c>
   1845c:	mov	r7, #-2147483648	; 0x80000000
   18460:	mov	r2, #1
   18464:	sdiv	r3, r7, r1
   18468:	cmp	r3, r6
   1846c:	blt	18968 <__assert_fail@plt+0x7644>
   18470:	mov	r2, #0
   18474:	mul	r7, r1, r6
   18478:	b	18968 <__assert_fail@plt+0x7644>
   1847c:	cmn	r7, #1
   18480:	beq	18498 <__assert_fail@plt+0x7174>
   18484:	mov	r0, #-2147483648	; 0x80000000
   18488:	mov	r3, #1
   1848c:	sdiv	r1, r0, r7
   18490:	cmp	r1, r6
   18494:	blt	185f8 <__assert_fail@plt+0x72d4>
   18498:	mul	r0, r7, r6
   1849c:	mov	r3, #0
   184a0:	cmp	r0, #0
   184a4:	bmi	185f8 <__assert_fail@plt+0x72d4>
   184a8:	mvn	r1, #-2147483648	; 0x80000000
   184ac:	mov	r2, #1
   184b0:	udiv	r7, r1, r6
   184b4:	cmp	r7, r0
   184b8:	bge	1860c <__assert_fail@plt+0x72e8>
   184bc:	b	1861c <__assert_fail@plt+0x72f8>
   184c0:	beq	184d4 <__assert_fail@plt+0x71b0>
   184c4:	mov	r1, #-2147483648	; 0x80000000
   184c8:	sdiv	r1, r1, r7
   184cc:	cmp	r1, #1024	; 0x400
   184d0:	blt	185d8 <__assert_fail@plt+0x72b4>
   184d4:	lsl	r7, r7, #10
   184d8:	b	1896c <__assert_fail@plt+0x7648>
   184dc:	cmn	r7, #1
   184e0:	beq	184f8 <__assert_fail@plt+0x71d4>
   184e4:	mov	r0, #-2147483648	; 0x80000000
   184e8:	mov	r3, #1
   184ec:	sdiv	r1, r0, r7
   184f0:	cmp	r1, r6
   184f4:	blt	186c8 <__assert_fail@plt+0x73a4>
   184f8:	mul	r0, r7, r6
   184fc:	mov	r3, #0
   18500:	cmp	r0, #0
   18504:	bmi	186c8 <__assert_fail@plt+0x73a4>
   18508:	mvn	r1, #-2147483648	; 0x80000000
   1850c:	mov	r2, #1
   18510:	udiv	r7, r1, r6
   18514:	cmp	r7, r0
   18518:	bge	186dc <__assert_fail@plt+0x73b8>
   1851c:	b	186ec <__assert_fail@plt+0x73c8>
   18520:	cmn	r7, #1
   18524:	beq	1853c <__assert_fail@plt+0x7218>
   18528:	mov	r0, #-2147483648	; 0x80000000
   1852c:	mov	r3, #1
   18530:	sdiv	r1, r0, r7
   18534:	cmp	r1, r6
   18538:	blt	18798 <__assert_fail@plt+0x7474>
   1853c:	mul	r0, r7, r6
   18540:	mov	r3, #0
   18544:	cmp	r0, #0
   18548:	bmi	18798 <__assert_fail@plt+0x7474>
   1854c:	mvn	r1, #-2147483648	; 0x80000000
   18550:	mov	r2, #1
   18554:	udiv	r7, r1, r6
   18558:	cmp	r7, r0
   1855c:	bge	187ac <__assert_fail@plt+0x7488>
   18560:	b	187bc <__assert_fail@plt+0x7498>
   18564:	cmn	r7, #1
   18568:	beq	18580 <__assert_fail@plt+0x725c>
   1856c:	mov	r0, #-2147483648	; 0x80000000
   18570:	mov	r3, #1
   18574:	sdiv	r1, r0, r7
   18578:	cmp	r1, r6
   1857c:	blt	187fc <__assert_fail@plt+0x74d8>
   18580:	mul	r0, r7, r6
   18584:	mov	r3, #0
   18588:	cmp	r0, #0
   1858c:	bmi	187fc <__assert_fail@plt+0x74d8>
   18590:	mvn	r1, #-2147483648	; 0x80000000
   18594:	mov	r2, #1
   18598:	udiv	r7, r1, r6
   1859c:	cmp	r7, r0
   185a0:	bge	18810 <__assert_fail@plt+0x74ec>
   185a4:	b	18820 <__assert_fail@plt+0x74fc>
   185a8:	beq	185bc <__assert_fail@plt+0x7298>
   185ac:	mov	r1, #-2147483648	; 0x80000000
   185b0:	sdiv	r1, r1, r7
   185b4:	cmp	r1, #512	; 0x200
   185b8:	blt	185d8 <__assert_fail@plt+0x72b4>
   185bc:	lsl	r7, r7, #9
   185c0:	b	1896c <__assert_fail@plt+0x7648>
   185c4:	beq	185f0 <__assert_fail@plt+0x72cc>
   185c8:	mov	r1, #-2147483648	; 0x80000000
   185cc:	sdiv	r1, r1, r7
   185d0:	cmp	r1, #2
   185d4:	bge	185f0 <__assert_fail@plt+0x72cc>
   185d8:	cmp	r7, #0
   185dc:	mvn	r1, #-2147483648	; 0x80000000
   185e0:	mov	r0, #1
   185e4:	movmi	r1, #-2147483648	; 0x80000000
   185e8:	mov	r7, r1
   185ec:	b	1896c <__assert_fail@plt+0x7648>
   185f0:	lsl	r7, r7, #1
   185f4:	b	1896c <__assert_fail@plt+0x7648>
   185f8:	mov	r1, #-2147483648	; 0x80000000
   185fc:	mov	r2, #1
   18600:	sdiv	r7, r1, r0
   18604:	cmp	r7, r6
   18608:	blt	18634 <__assert_fail@plt+0x7310>
   1860c:	mul	r1, r0, r6
   18610:	mov	r2, r3
   18614:	cmp	r1, #0
   18618:	bmi	18634 <__assert_fail@plt+0x7310>
   1861c:	mvn	r3, #-2147483648	; 0x80000000
   18620:	mov	r0, #1
   18624:	udiv	r7, r3, r6
   18628:	cmp	r7, r1
   1862c:	bge	18648 <__assert_fail@plt+0x7324>
   18630:	b	18658 <__assert_fail@plt+0x7334>
   18634:	mov	r3, #-2147483648	; 0x80000000
   18638:	mov	r0, #1
   1863c:	sdiv	r7, r3, r1
   18640:	cmp	r7, r6
   18644:	blt	18670 <__assert_fail@plt+0x734c>
   18648:	mul	r3, r1, r6
   1864c:	mov	r0, r2
   18650:	cmp	r3, #0
   18654:	bmi	18670 <__assert_fail@plt+0x734c>
   18658:	mvn	r1, #-2147483648	; 0x80000000
   1865c:	udiv	r2, r1, r6
   18660:	cmp	r2, r3
   18664:	bge	18688 <__assert_fail@plt+0x7364>
   18668:	mov	r0, #1
   1866c:	b	18694 <__assert_fail@plt+0x7370>
   18670:	mov	r1, #-2147483648	; 0x80000000
   18674:	sdiv	r2, r1, r3
   18678:	cmp	r2, r6
   1867c:	bge	18688 <__assert_fail@plt+0x7364>
   18680:	mov	r0, #1
   18684:	b	186a8 <__assert_fail@plt+0x7384>
   18688:	mul	r1, r3, r6
   1868c:	cmp	r1, #0
   18690:	bmi	186a8 <__assert_fail@plt+0x7384>
   18694:	mvn	r2, #-2147483648	; 0x80000000
   18698:	udiv	r3, r2, r6
   1869c:	cmp	r3, r1
   186a0:	bge	186b8 <__assert_fail@plt+0x7394>
   186a4:	b	18738 <__assert_fail@plt+0x7414>
   186a8:	mov	r2, #-2147483648	; 0x80000000
   186ac:	sdiv	r3, r2, r1
   186b0:	cmp	r3, r6
   186b4:	blt	18750 <__assert_fail@plt+0x742c>
   186b8:	mul	r2, r1, r6
   186bc:	cmp	r2, #0
   186c0:	bpl	18764 <__assert_fail@plt+0x7440>
   186c4:	b	18778 <__assert_fail@plt+0x7454>
   186c8:	mov	r1, #-2147483648	; 0x80000000
   186cc:	mov	r2, #1
   186d0:	sdiv	r7, r1, r0
   186d4:	cmp	r7, r6
   186d8:	blt	18704 <__assert_fail@plt+0x73e0>
   186dc:	mul	r1, r0, r6
   186e0:	mov	r2, r3
   186e4:	cmp	r1, #0
   186e8:	bmi	18704 <__assert_fail@plt+0x73e0>
   186ec:	mvn	r3, #-2147483648	; 0x80000000
   186f0:	mov	r0, #1
   186f4:	udiv	r7, r3, r6
   186f8:	cmp	r7, r1
   186fc:	bge	18718 <__assert_fail@plt+0x73f4>
   18700:	b	18728 <__assert_fail@plt+0x7404>
   18704:	mov	r3, #-2147483648	; 0x80000000
   18708:	mov	r0, #1
   1870c:	sdiv	r7, r3, r1
   18710:	cmp	r7, r6
   18714:	blt	18740 <__assert_fail@plt+0x741c>
   18718:	mul	r3, r1, r6
   1871c:	mov	r0, r2
   18720:	cmp	r3, #0
   18724:	bmi	18740 <__assert_fail@plt+0x741c>
   18728:	mvn	r2, #-2147483648	; 0x80000000
   1872c:	udiv	r1, r2, r6
   18730:	cmp	r1, r3
   18734:	bge	18758 <__assert_fail@plt+0x7434>
   18738:	mov	r0, #1
   1873c:	b	18764 <__assert_fail@plt+0x7440>
   18740:	mov	r2, #-2147483648	; 0x80000000
   18744:	sdiv	r1, r2, r3
   18748:	cmp	r1, r6
   1874c:	bge	18758 <__assert_fail@plt+0x7434>
   18750:	mov	r0, #1
   18754:	b	18778 <__assert_fail@plt+0x7454>
   18758:	mul	r2, r3, r6
   1875c:	cmp	r2, #0
   18760:	bmi	18778 <__assert_fail@plt+0x7454>
   18764:	mvn	r1, #-2147483648	; 0x80000000
   18768:	udiv	r3, r1, r6
   1876c:	cmp	r3, r2
   18770:	bge	18788 <__assert_fail@plt+0x7464>
   18774:	b	18920 <__assert_fail@plt+0x75fc>
   18778:	mov	r1, #-2147483648	; 0x80000000
   1877c:	sdiv	r3, r1, r2
   18780:	cmp	r3, r6
   18784:	blt	18938 <__assert_fail@plt+0x7614>
   18788:	mul	r1, r2, r6
   1878c:	cmp	r1, #0
   18790:	bpl	1894c <__assert_fail@plt+0x7628>
   18794:	b	18998 <__assert_fail@plt+0x7674>
   18798:	mov	r1, #-2147483648	; 0x80000000
   1879c:	mov	r2, #1
   187a0:	sdiv	r7, r1, r0
   187a4:	cmp	r7, r6
   187a8:	blt	187d4 <__assert_fail@plt+0x74b0>
   187ac:	mul	r1, r0, r6
   187b0:	mov	r2, r3
   187b4:	cmp	r1, #0
   187b8:	bmi	187d4 <__assert_fail@plt+0x74b0>
   187bc:	mvn	r3, #-2147483648	; 0x80000000
   187c0:	mov	r0, #1
   187c4:	udiv	r7, r3, r6
   187c8:	cmp	r7, r1
   187cc:	bge	187e8 <__assert_fail@plt+0x74c4>
   187d0:	b	18910 <__assert_fail@plt+0x75ec>
   187d4:	mov	r3, #-2147483648	; 0x80000000
   187d8:	mov	r0, #1
   187dc:	sdiv	r7, r3, r1
   187e0:	cmp	r7, r6
   187e4:	blt	18928 <__assert_fail@plt+0x7604>
   187e8:	mul	r3, r1, r6
   187ec:	mov	r0, r2
   187f0:	cmp	r3, #0
   187f4:	bpl	18910 <__assert_fail@plt+0x75ec>
   187f8:	b	18928 <__assert_fail@plt+0x7604>
   187fc:	mov	r1, #-2147483648	; 0x80000000
   18800:	mov	r2, #1
   18804:	sdiv	r7, r1, r0
   18808:	cmp	r7, r6
   1880c:	blt	18838 <__assert_fail@plt+0x7514>
   18810:	mul	r1, r0, r6
   18814:	mov	r2, r3
   18818:	cmp	r1, #0
   1881c:	bmi	18838 <__assert_fail@plt+0x7514>
   18820:	mvn	r3, #-2147483648	; 0x80000000
   18824:	mov	r0, #1
   18828:	udiv	r7, r3, r6
   1882c:	cmp	r7, r1
   18830:	bge	1884c <__assert_fail@plt+0x7528>
   18834:	b	1885c <__assert_fail@plt+0x7538>
   18838:	mov	r3, #-2147483648	; 0x80000000
   1883c:	mov	r0, #1
   18840:	sdiv	r7, r3, r1
   18844:	cmp	r7, r6
   18848:	blt	18874 <__assert_fail@plt+0x7550>
   1884c:	mul	r3, r1, r6
   18850:	mov	r0, r2
   18854:	cmp	r3, #0
   18858:	bmi	18874 <__assert_fail@plt+0x7550>
   1885c:	mvn	r1, #-2147483648	; 0x80000000
   18860:	udiv	r2, r1, r6
   18864:	cmp	r2, r3
   18868:	bge	1888c <__assert_fail@plt+0x7568>
   1886c:	mov	r0, #1
   18870:	b	18898 <__assert_fail@plt+0x7574>
   18874:	mov	r1, #-2147483648	; 0x80000000
   18878:	sdiv	r2, r1, r3
   1887c:	cmp	r2, r6
   18880:	bge	1888c <__assert_fail@plt+0x7568>
   18884:	mov	r0, #1
   18888:	b	188b0 <__assert_fail@plt+0x758c>
   1888c:	mul	r1, r3, r6
   18890:	cmp	r1, #0
   18894:	bmi	188b0 <__assert_fail@plt+0x758c>
   18898:	mvn	r2, #-2147483648	; 0x80000000
   1889c:	udiv	r3, r2, r6
   188a0:	cmp	r3, r1
   188a4:	bge	188c8 <__assert_fail@plt+0x75a4>
   188a8:	mov	r0, #1
   188ac:	b	188d4 <__assert_fail@plt+0x75b0>
   188b0:	mov	r2, #-2147483648	; 0x80000000
   188b4:	sdiv	r3, r2, r1
   188b8:	cmp	r3, r6
   188bc:	bge	188c8 <__assert_fail@plt+0x75a4>
   188c0:	mov	r0, #1
   188c4:	b	188ec <__assert_fail@plt+0x75c8>
   188c8:	mul	r2, r1, r6
   188cc:	cmp	r2, #0
   188d0:	bmi	188ec <__assert_fail@plt+0x75c8>
   188d4:	mvn	r3, #-2147483648	; 0x80000000
   188d8:	udiv	r1, r3, r6
   188dc:	cmp	r1, r2
   188e0:	bge	18904 <__assert_fail@plt+0x75e0>
   188e4:	mov	r0, #1
   188e8:	b	18910 <__assert_fail@plt+0x75ec>
   188ec:	mov	r3, #-2147483648	; 0x80000000
   188f0:	sdiv	r1, r3, r2
   188f4:	cmp	r1, r6
   188f8:	bge	18904 <__assert_fail@plt+0x75e0>
   188fc:	mov	r0, #1
   18900:	b	18928 <__assert_fail@plt+0x7604>
   18904:	mul	r3, r2, r6
   18908:	cmp	r3, #0
   1890c:	bmi	18928 <__assert_fail@plt+0x7604>
   18910:	mvn	r1, #-2147483648	; 0x80000000
   18914:	udiv	r2, r1, r6
   18918:	cmp	r2, r3
   1891c:	bge	18940 <__assert_fail@plt+0x761c>
   18920:	mov	r0, #1
   18924:	b	1894c <__assert_fail@plt+0x7628>
   18928:	mov	r1, #-2147483648	; 0x80000000
   1892c:	sdiv	r2, r1, r3
   18930:	cmp	r2, r6
   18934:	bge	18940 <__assert_fail@plt+0x761c>
   18938:	mov	r0, #1
   1893c:	b	18998 <__assert_fail@plt+0x7674>
   18940:	mul	r1, r3, r6
   18944:	cmp	r1, #0
   18948:	bmi	18998 <__assert_fail@plt+0x7674>
   1894c:	mvn	r7, #-2147483648	; 0x80000000
   18950:	mov	r2, #1
   18954:	udiv	r3, r7, r6
   18958:	cmp	r3, r1
   1895c:	blt	18968 <__assert_fail@plt+0x7644>
   18960:	mul	r7, r1, r6
   18964:	mov	r2, #0
   18968:	orr	r0, r2, r0
   1896c:	add	r1, r4, ip
   18970:	orr	r9, r0, r9
   18974:	str	r1, [sl]
   18978:	ldrb	r1, [r4, ip]
   1897c:	cmp	r1, #0
   18980:	orrne	r9, r9, #2
   18984:	ldr	r0, [sp, #4]
   18988:	str	r7, [r0]
   1898c:	mov	r0, r9
   18990:	sub	sp, fp, #28
   18994:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18998:	mov	r7, #-2147483648	; 0x80000000
   1899c:	mov	r2, #1
   189a0:	sdiv	r3, r7, r1
   189a4:	cmp	r3, r6
   189a8:	bge	18960 <__assert_fail@plt+0x763c>
   189ac:	b	18968 <__assert_fail@plt+0x7644>
   189b0:	movw	r0, #50261	; 0xc455
   189b4:	movw	r1, #50372	; 0xc4c4
   189b8:	movw	r3, #50299	; 0xc47b
   189bc:	mov	r2, #85	; 0x55
   189c0:	movt	r0, #1
   189c4:	movt	r1, #1
   189c8:	movt	r3, #1
   189cc:	bl	11324 <__assert_fail@plt>
   189d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189d4:	add	fp, sp, #28
   189d8:	sub	sp, sp, #44	; 0x2c
   189dc:	cmp	r2, #37	; 0x25
   189e0:	bcs	19650 <__assert_fail@plt+0x832c>
   189e4:	ldr	sl, [fp, #8]
   189e8:	mov	r6, r2
   189ec:	mov	r7, r1
   189f0:	mov	r4, r0
   189f4:	str	r3, [sp, #36]	; 0x24
   189f8:	bl	11210 <__errno_location@plt>
   189fc:	mov	r5, r0
   18a00:	mov	r0, #0
   18a04:	str	r0, [r5]
   18a08:	bl	111d4 <__ctype_b_loc@plt>
   18a0c:	ldr	r1, [r0]
   18a10:	mov	r2, r4
   18a14:	ldrb	r0, [r2], #1
   18a18:	add	r3, r1, r0, lsl #1
   18a1c:	ldrb	r3, [r3, #1]
   18a20:	tst	r3, #32
   18a24:	bne	18a14 <__assert_fail@plt+0x76f0>
   18a28:	cmp	r7, #0
   18a2c:	sub	r9, fp, #32
   18a30:	mov	r8, #4
   18a34:	movne	r9, r7
   18a38:	cmp	r0, #45	; 0x2d
   18a3c:	beq	19644 <__assert_fail@plt+0x8320>
   18a40:	mov	r0, r4
   18a44:	mov	r1, r9
   18a48:	mov	r2, r6
   18a4c:	mov	r3, #0
   18a50:	bl	110f0 <__strtoull_internal@plt>
   18a54:	mov	r7, r1
   18a58:	ldr	r1, [r9]
   18a5c:	cmp	r1, r4
   18a60:	beq	18a8c <__assert_fail@plt+0x7768>
   18a64:	mov	r6, r0
   18a68:	ldr	r0, [r5]
   18a6c:	cmp	r0, #0
   18a70:	beq	18ac8 <__assert_fail@plt+0x77a4>
   18a74:	cmp	r0, #34	; 0x22
   18a78:	bne	19644 <__assert_fail@plt+0x8320>
   18a7c:	mov	r8, #1
   18a80:	cmp	sl, #0
   18a84:	bne	18ad4 <__assert_fail@plt+0x77b0>
   18a88:	b	1963c <__assert_fail@plt+0x8318>
   18a8c:	cmp	sl, #0
   18a90:	beq	19644 <__assert_fail@plt+0x8320>
   18a94:	mov	r5, r1
   18a98:	ldrb	r1, [r4]
   18a9c:	cmp	r1, #0
   18aa0:	beq	19644 <__assert_fail@plt+0x8320>
   18aa4:	mov	r0, sl
   18aa8:	bl	11204 <strchr@plt>
   18aac:	cmp	r0, #0
   18ab0:	beq	19644 <__assert_fail@plt+0x8320>
   18ab4:	mov	r1, r5
   18ab8:	mov	r8, #0
   18abc:	mov	r6, #1
   18ac0:	mov	r7, #0
   18ac4:	b	18ad4 <__assert_fail@plt+0x77b0>
   18ac8:	mov	r8, r0
   18acc:	cmp	sl, #0
   18ad0:	beq	1963c <__assert_fail@plt+0x8318>
   18ad4:	ldrb	r4, [r1]
   18ad8:	cmp	r4, #0
   18adc:	beq	1963c <__assert_fail@plt+0x8318>
   18ae0:	str	r1, [sp, #32]
   18ae4:	mov	r0, sl
   18ae8:	mov	r1, r4
   18aec:	bl	11204 <strchr@plt>
   18af0:	cmp	r0, #0
   18af4:	beq	18dbc <__assert_fail@plt+0x7a98>
   18af8:	sub	r0, r4, #69	; 0x45
   18afc:	mov	r1, #1
   18b00:	mov	r3, #0
   18b04:	mov	r5, #1024	; 0x400
   18b08:	cmp	r0, #47	; 0x2f
   18b0c:	str	r1, [sp, #28]
   18b10:	bhi	18c14 <__assert_fail@plt+0x78f0>
   18b14:	add	r1, pc, #0
   18b18:	ldr	pc, [r1, r0, lsl #2]
   18b1c:	ldrdeq	r8, [r1], -ip
   18b20:	andeq	r8, r1, r4, lsl ip
   18b24:	ldrdeq	r8, [r1], -ip
   18b28:	andeq	r8, r1, r4, lsl ip
   18b2c:	andeq	r8, r1, r4, lsl ip
   18b30:	andeq	r8, r1, r4, lsl ip
   18b34:	ldrdeq	r8, [r1], -ip
   18b38:	andeq	r8, r1, r4, lsl ip
   18b3c:	ldrdeq	r8, [r1], -ip
   18b40:	andeq	r8, r1, r4, lsl ip
   18b44:	andeq	r8, r1, r4, lsl ip
   18b48:	ldrdeq	r8, [r1], -ip
   18b4c:	andeq	r8, r1, r4, lsl ip
   18b50:	andeq	r8, r1, r4, lsl ip
   18b54:	andeq	r8, r1, r4, lsl ip
   18b58:	ldrdeq	r8, [r1], -ip
   18b5c:	andeq	r8, r1, r4, lsl ip
   18b60:	andeq	r8, r1, r4, lsl ip
   18b64:	andeq	r8, r1, r4, lsl ip
   18b68:	andeq	r8, r1, r4, lsl ip
   18b6c:	ldrdeq	r8, [r1], -ip
   18b70:	ldrdeq	r8, [r1], -ip
   18b74:	andeq	r8, r1, r4, lsl ip
   18b78:	andeq	r8, r1, r4, lsl ip
   18b7c:	andeq	r8, r1, r4, lsl ip
   18b80:	andeq	r8, r1, r4, lsl ip
   18b84:	andeq	r8, r1, r4, lsl ip
   18b88:	andeq	r8, r1, r4, lsl ip
   18b8c:	andeq	r8, r1, r4, lsl ip
   18b90:	andeq	r8, r1, r4, lsl ip
   18b94:	andeq	r8, r1, r4, lsl ip
   18b98:	andeq	r8, r1, r4, lsl ip
   18b9c:	andeq	r8, r1, r4, lsl ip
   18ba0:	andeq	r8, r1, r4, lsl ip
   18ba4:	ldrdeq	r8, [r1], -ip
   18ba8:	andeq	r8, r1, r4, lsl ip
   18bac:	andeq	r8, r1, r4, lsl ip
   18bb0:	andeq	r8, r1, r4, lsl ip
   18bb4:	ldrdeq	r8, [r1], -ip
   18bb8:	andeq	r8, r1, r4, lsl ip
   18bbc:	ldrdeq	r8, [r1], -ip
   18bc0:	andeq	r8, r1, r4, lsl ip
   18bc4:	andeq	r8, r1, r4, lsl ip
   18bc8:	andeq	r8, r1, r4, lsl ip
   18bcc:	andeq	r8, r1, r4, lsl ip
   18bd0:	andeq	r8, r1, r4, lsl ip
   18bd4:	andeq	r8, r1, r4, lsl ip
   18bd8:	ldrdeq	r8, [r1], -ip
   18bdc:	mov	r0, sl
   18be0:	mov	r1, #48	; 0x30
   18be4:	bl	11204 <strchr@plt>
   18be8:	cmp	r0, #0
   18bec:	beq	18c10 <__assert_fail@plt+0x78ec>
   18bf0:	ldr	r1, [sp, #32]
   18bf4:	ldrb	r0, [r1, #1]
   18bf8:	cmp	r0, #66	; 0x42
   18bfc:	cmpne	r0, #68	; 0x44
   18c00:	bne	18dc8 <__assert_fail@plt+0x7aa4>
   18c04:	mov	r5, #1000	; 0x3e8
   18c08:	mov	r0, #2
   18c0c:	str	r0, [sp, #28]
   18c10:	mov	r3, #0
   18c14:	sub	r0, r4, #66	; 0x42
   18c18:	cmp	r0, #53	; 0x35
   18c1c:	bhi	18dbc <__assert_fail@plt+0x7a98>
   18c20:	add	r1, pc, #0
   18c24:	ldr	pc, [r1, r0, lsl #2]
   18c28:	andeq	r9, r1, r4, asr #2
   18c2c:			; <UNDEFINED> instruction: 0x00018dbc
   18c30:			; <UNDEFINED> instruction: 0x00018dbc
   18c34:	andeq	r9, r1, ip, ror #2
   18c38:			; <UNDEFINED> instruction: 0x00018dbc
   18c3c:	andeq	r8, r1, r0, lsl #26
   18c40:			; <UNDEFINED> instruction: 0x00018dbc
   18c44:			; <UNDEFINED> instruction: 0x00018dbc
   18c48:			; <UNDEFINED> instruction: 0x00018dbc
   18c4c:	andeq	r8, r1, ip, ror #27
   18c50:			; <UNDEFINED> instruction: 0x00018dbc
   18c54:	andeq	r8, r1, r4, lsr lr
   18c58:			; <UNDEFINED> instruction: 0x00018dbc
   18c5c:			; <UNDEFINED> instruction: 0x00018dbc
   18c60:	andeq	r9, r1, r4, asr #5
   18c64:			; <UNDEFINED> instruction: 0x00018dbc
   18c68:			; <UNDEFINED> instruction: 0x00018dbc
   18c6c:			; <UNDEFINED> instruction: 0x00018dbc
   18c70:	andeq	r8, r1, r0, asr #29
   18c74:			; <UNDEFINED> instruction: 0x00018dbc
   18c78:			; <UNDEFINED> instruction: 0x00018dbc
   18c7c:			; <UNDEFINED> instruction: 0x00018dbc
   18c80:			; <UNDEFINED> instruction: 0x00018dbc
   18c84:	andeq	r9, r1, ip, ror #7
   18c88:	andeq	r8, r1, r8, lsr #31
   18c8c:			; <UNDEFINED> instruction: 0x00018dbc
   18c90:			; <UNDEFINED> instruction: 0x00018dbc
   18c94:			; <UNDEFINED> instruction: 0x00018dbc
   18c98:			; <UNDEFINED> instruction: 0x00018dbc
   18c9c:			; <UNDEFINED> instruction: 0x00018dbc
   18ca0:			; <UNDEFINED> instruction: 0x00018dbc
   18ca4:			; <UNDEFINED> instruction: 0x00018dbc
   18ca8:	andeq	r9, r1, r4, asr #11
   18cac:	andeq	r9, r1, ip, lsl r6
   18cb0:			; <UNDEFINED> instruction: 0x00018dbc
   18cb4:			; <UNDEFINED> instruction: 0x00018dbc
   18cb8:			; <UNDEFINED> instruction: 0x00018dbc
   18cbc:	andeq	r8, r1, r0, lsl #26
   18cc0:			; <UNDEFINED> instruction: 0x00018dbc
   18cc4:			; <UNDEFINED> instruction: 0x00018dbc
   18cc8:			; <UNDEFINED> instruction: 0x00018dbc
   18ccc:	andeq	r8, r1, ip, ror #27
   18cd0:			; <UNDEFINED> instruction: 0x00018dbc
   18cd4:	andeq	r8, r1, r4, lsr lr
   18cd8:			; <UNDEFINED> instruction: 0x00018dbc
   18cdc:			; <UNDEFINED> instruction: 0x00018dbc
   18ce0:			; <UNDEFINED> instruction: 0x00018dbc
   18ce4:			; <UNDEFINED> instruction: 0x00018dbc
   18ce8:			; <UNDEFINED> instruction: 0x00018dbc
   18cec:			; <UNDEFINED> instruction: 0x00018dbc
   18cf0:	andeq	r8, r1, r0, asr #29
   18cf4:			; <UNDEFINED> instruction: 0x00018dbc
   18cf8:			; <UNDEFINED> instruction: 0x00018dbc
   18cfc:	strdeq	r9, [r1], -r8
   18d00:	mvn	r0, #0
   18d04:	mvn	r1, #0
   18d08:	mov	r2, r5
   18d0c:	mov	sl, r3
   18d10:	bl	19f10 <__assert_fail@plt+0x8bec>
   18d14:	subs	r3, r0, r6
   18d18:	umull	r4, r2, r6, r5
   18d1c:	mov	lr, #0
   18d20:	str	r1, [sp, #20]
   18d24:	sbcs	r3, r1, r7
   18d28:	movwcc	lr, #1
   18d2c:	mla	ip, r6, sl, r2
   18d30:	mov	r2, r1
   18d34:	mov	r2, #0
   18d38:	cmp	lr, #0
   18d3c:	mla	r7, r7, r5, ip
   18d40:	mvnne	r4, #0
   18d44:	mvnne	r7, #0
   18d48:	subs	r6, r0, r4
   18d4c:	sbcs	r6, r1, r7
   18d50:	umull	r3, r6, r4, r5
   18d54:	movwcc	r2, #1
   18d58:	cmp	r2, #0
   18d5c:	mvnne	r3, #0
   18d60:	cmp	r2, #0
   18d64:	str	r6, [sp, #16]
   18d68:	umull	r6, ip, r3, r5
   18d6c:	mla	r1, r3, sl, ip
   18d70:	ldr	ip, [sp, #16]
   18d74:	str	r1, [sp, #12]
   18d78:	mla	r4, r4, sl, ip
   18d7c:	mla	r4, r7, r5, r4
   18d80:	mvnne	r4, #0
   18d84:	subs	r0, r0, r3
   18d88:	ldr	r0, [sp, #20]
   18d8c:	ldr	r7, [sp, #12]
   18d90:	sbcs	r0, r0, r4
   18d94:	mov	r0, #0
   18d98:	mla	r7, r4, r5, r7
   18d9c:	movwcc	r0, #1
   18da0:	cmp	r0, #0
   18da4:	mov	r1, r0
   18da8:	orr	r0, lr, r2
   18dac:	mvnne	r7, #0
   18db0:	mvnne	r6, #0
   18db4:	orr	r3, r0, r1
   18db8:	b	1961c <__assert_fail@plt+0x82f8>
   18dbc:	ldr	r0, [sp, #36]	; 0x24
   18dc0:	orr	r8, r8, #2
   18dc4:	b	19640 <__assert_fail@plt+0x831c>
   18dc8:	cmp	r0, #105	; 0x69
   18dcc:	mov	r3, #0
   18dd0:	bne	18c14 <__assert_fail@plt+0x78f0>
   18dd4:	ldrb	r0, [r1, #2]
   18dd8:	mov	r1, #1
   18ddc:	cmp	r0, #66	; 0x42
   18de0:	movweq	r1, #3
   18de4:	str	r1, [sp, #28]
   18de8:	b	18c14 <__assert_fail@plt+0x78f0>
   18dec:	mvn	r0, #0
   18df0:	mvn	r1, #0
   18df4:	mov	r2, r5
   18df8:	mov	r4, r3
   18dfc:	bl	19f10 <__assert_fail@plt+0x8bec>
   18e00:	subs	r0, r0, r6
   18e04:	mov	r2, #0
   18e08:	sbcs	r0, r1, r7
   18e0c:	umull	r0, r1, r6, r5
   18e10:	movwcc	r2, #1
   18e14:	cmp	r2, #0
   18e18:	mla	r1, r6, r4, r1
   18e1c:	mov	r3, r2
   18e20:	mvnne	r0, #0
   18e24:	mla	r7, r7, r5, r1
   18e28:	mvnne	r7, #0
   18e2c:	mov	r6, r0
   18e30:	b	1961c <__assert_fail@plt+0x82f8>
   18e34:	mvn	r0, #0
   18e38:	mvn	r1, #0
   18e3c:	mov	r2, r5
   18e40:	str	r3, [sp, #24]
   18e44:	bl	19f10 <__assert_fail@plt+0x8bec>
   18e48:	subs	r3, r0, r6
   18e4c:	mov	ip, r0
   18e50:	umull	r4, r0, r6, r5
   18e54:	mov	sl, #0
   18e58:	sbcs	r3, r1, r7
   18e5c:	mov	r3, #0
   18e60:	movwcc	r3, #1
   18e64:	cmp	r3, #0
   18e68:	str	r0, [sp, #20]
   18e6c:	ldr	r0, [sp, #24]
   18e70:	mvnne	r4, #0
   18e74:	cmp	r3, #0
   18e78:	umull	lr, r2, r4, r5
   18e7c:	mla	r2, r4, r0, r2
   18e80:	str	r2, [sp, #16]
   18e84:	ldr	r2, [sp, #20]
   18e88:	mla	r6, r6, r0, r2
   18e8c:	ldr	r0, [sp, #16]
   18e90:	mla	r6, r7, r5, r6
   18e94:	mvnne	r6, #0
   18e98:	mla	r7, r6, r5, r0
   18e9c:	subs	r0, ip, r4
   18ea0:	sbcs	r0, r1, r6
   18ea4:	movwcc	sl, #1
   18ea8:	cmp	sl, #0
   18eac:	orr	r3, r3, sl
   18eb0:	mvnne	lr, #0
   18eb4:	mvnne	r7, #0
   18eb8:	mov	r6, lr
   18ebc:	b	1961c <__assert_fail@plt+0x82f8>
   18ec0:	mvn	r0, #0
   18ec4:	mvn	r1, #0
   18ec8:	mov	r2, r5
   18ecc:	mov	sl, r3
   18ed0:	bl	19f10 <__assert_fail@plt+0x8bec>
   18ed4:	subs	r3, r0, r6
   18ed8:	mov	ip, r1
   18edc:	umull	r2, lr, r6, r5
   18ee0:	str	r0, [sp, #20]
   18ee4:	sbcs	r3, r1, r7
   18ee8:	mov	r1, #0
   18eec:	str	ip, [sp, #16]
   18ef0:	movwcc	r1, #1
   18ef4:	mla	r6, r6, sl, lr
   18ef8:	mov	lr, #0
   18efc:	cmp	r1, #0
   18f00:	mla	r7, r7, r5, r6
   18f04:	mvnne	r2, #0
   18f08:	cmp	r1, #0
   18f0c:	umull	r3, r4, r2, r5
   18f10:	mvnne	r7, #0
   18f14:	mla	r4, r2, sl, r4
   18f18:	subs	r2, r0, r2
   18f1c:	sbcs	r2, ip, r7
   18f20:	mla	r4, r7, r5, r4
   18f24:	mov	r2, #0
   18f28:	movwcc	lr, #1
   18f2c:	cmp	lr, #0
   18f30:	mvnne	r3, #0
   18f34:	mvnne	r4, #0
   18f38:	subs	r7, r0, r3
   18f3c:	mov	r0, r5
   18f40:	sbcs	r7, ip, r4
   18f44:	umull	r5, r7, r3, r5
   18f48:	movwcc	r2, #1
   18f4c:	cmp	r2, #0
   18f50:	mla	r3, r3, sl, r7
   18f54:	mvnne	r5, #0
   18f58:	cmp	r2, #0
   18f5c:	mla	r3, r4, r0, r3
   18f60:	umull	r6, ip, r5, r0
   18f64:	mvnne	r3, #0
   18f68:	mla	ip, r5, sl, ip
   18f6c:	mla	r7, r3, r0, ip
   18f70:	ldr	r0, [sp, #20]
   18f74:	subs	r0, r0, r5
   18f78:	ldr	r0, [sp, #16]
   18f7c:	sbcs	r0, r0, r3
   18f80:	mov	r0, #0
   18f84:	movwcc	r0, #1
   18f88:	cmp	r0, #0
   18f8c:	mov	r3, r0
   18f90:	orr	r0, r1, lr
   18f94:	orr	r0, r0, r2
   18f98:	mvnne	r7, #0
   18f9c:	mvnne	r6, #0
   18fa0:	orr	r3, r0, r3
   18fa4:	b	1961c <__assert_fail@plt+0x82f8>
   18fa8:	mvn	r0, #0
   18fac:	mvn	r1, #0
   18fb0:	mov	r2, r5
   18fb4:	mov	r4, r3
   18fb8:	str	r3, [sp, #24]
   18fbc:	bl	19f10 <__assert_fail@plt+0x8bec>
   18fc0:	umull	r3, r2, r6, r5
   18fc4:	mla	r2, r6, r4, r2
   18fc8:	subs	r6, r0, r6
   18fcc:	sbcs	r6, r1, r7
   18fd0:	mov	r6, #0
   18fd4:	mla	ip, r7, r5, r2
   18fd8:	ldr	r2, [sp, #24]
   18fdc:	movwcc	r6, #1
   18fe0:	cmp	r6, #0
   18fe4:	str	r6, [sp, #20]
   18fe8:	mov	r6, #0
   18fec:	mvnne	r3, #0
   18ff0:	mvnne	ip, #0
   18ff4:	subs	r4, r0, r3
   18ff8:	umull	r7, lr, r3, r5
   18ffc:	sbcs	r4, r1, ip
   19000:	movwcc	r6, #1
   19004:	mla	r3, r3, r2, lr
   19008:	cmp	r6, #0
   1900c:	str	r6, [sp, #16]
   19010:	mvnne	r7, #0
   19014:	cmp	r6, #0
   19018:	umull	sl, r4, r7, r5
   1901c:	mla	r4, r7, r2, r4
   19020:	mla	r2, ip, r5, r3
   19024:	mvnne	r2, #0
   19028:	subs	r3, r0, r7
   1902c:	mov	ip, #0
   19030:	mla	r6, r2, r5, r4
   19034:	sbcs	r2, r1, r2
   19038:	mov	r4, r0
   1903c:	mov	r0, #0
   19040:	movwcc	r0, #1
   19044:	mov	r3, r4
   19048:	cmp	r0, #0
   1904c:	str	r0, [sp, #12]
   19050:	mov	r0, r1
   19054:	str	r3, [sp, #4]
   19058:	mvnne	sl, #0
   1905c:	mvnne	r6, #0
   19060:	str	r0, [sp, #8]
   19064:	subs	r2, r4, sl
   19068:	ldr	r4, [sp, #24]
   1906c:	sbcs	r2, r1, r6
   19070:	umull	r7, r2, sl, r5
   19074:	movwcc	ip, #1
   19078:	cmp	ip, #0
   1907c:	mvnne	r7, #0
   19080:	mla	r2, sl, r4, r2
   19084:	cmp	ip, #0
   19088:	mov	sl, #0
   1908c:	umull	r1, lr, r7, r5
   19090:	mla	r2, r6, r5, r2
   19094:	mvnne	r2, #0
   19098:	subs	r6, r3, r7
   1909c:	mla	lr, r7, r4, lr
   190a0:	mla	lr, r2, r5, lr
   190a4:	sbcs	r2, r0, r2
   190a8:	mov	r2, #0
   190ac:	movwcc	sl, #1
   190b0:	cmp	sl, #0
   190b4:	mvnne	r1, #0
   190b8:	mvnne	lr, #0
   190bc:	subs	r6, r3, r1
   190c0:	ldr	r3, [sp, #24]
   190c4:	sbcs	r6, r0, lr
   190c8:	umull	r0, r7, r1, r5
   190cc:	movwcc	r2, #1
   190d0:	cmp	r2, #0
   190d4:	mvnne	r0, #0
   190d8:	mla	r1, r1, r3, r7
   190dc:	cmp	r2, #0
   190e0:	umull	r6, r4, r0, r5
   190e4:	mla	r1, lr, r5, r1
   190e8:	mvnne	r1, #0
   190ec:	mla	r4, r0, r3, r4
   190f0:	ldr	r3, [sp, #4]
   190f4:	mla	r7, r1, r5, r4
   190f8:	ldr	r5, [sp, #16]
   190fc:	subs	r0, r3, r0
   19100:	ldr	r0, [sp, #8]
   19104:	sbcs	r0, r0, r1
   19108:	mov	r0, #0
   1910c:	movwcc	r0, #1
   19110:	cmp	r0, #0
   19114:	mov	r1, r0
   19118:	ldr	r0, [sp, #20]
   1911c:	mvnne	r7, #0
   19120:	mvnne	r6, #0
   19124:	orr	r0, r0, r5
   19128:	ldr	r5, [sp, #12]
   1912c:	orr	r0, r0, r5
   19130:	orr	r0, r0, ip
   19134:	orr	r0, r0, sl
   19138:	orr	r0, r0, r2
   1913c:	orr	r0, r0, r1
   19140:	b	195bc <__assert_fail@plt+0x8298>
   19144:	mov	r1, #0
   19148:	lsl	r2, r7, #10
   1914c:	lsl	r0, r6, #10
   19150:	lsr	r3, r7, #22
   19154:	cmp	r1, r7, lsr #22
   19158:	orr	r2, r2, r6, lsr #22
   1915c:	mvnne	r0, #0
   19160:	movwne	r3, #1
   19164:	cmp	r1, r7, lsr #22
   19168:	b	195e8 <__assert_fail@plt+0x82c4>
   1916c:	mvn	r0, #0
   19170:	mvn	r1, #0
   19174:	mov	r2, r5
   19178:	mov	sl, r3
   1917c:	bl	19f10 <__assert_fail@plt+0x8bec>
   19180:	subs	r2, r0, r6
   19184:	mov	ip, r0
   19188:	mov	r0, #0
   1918c:	sbcs	r2, r1, r7
   19190:	umull	r4, r2, r6, r5
   19194:	movwcc	r0, #1
   19198:	cmp	r0, #0
   1919c:	mla	r2, r6, sl, r2
   191a0:	str	r0, [sp, #20]
   191a4:	mvnne	r4, #0
   191a8:	cmp	r0, #0
   191ac:	mla	r2, r7, r5, r2
   191b0:	mov	r0, #0
   191b4:	umull	lr, r3, r4, r5
   191b8:	mvnne	r2, #0
   191bc:	mla	r3, r4, sl, r3
   191c0:	mla	r6, r2, r5, r3
   191c4:	subs	r3, ip, r4
   191c8:	mov	r3, r1
   191cc:	sbcs	r2, r1, r2
   191d0:	str	r3, [sp, #8]
   191d4:	movwcc	r0, #1
   191d8:	cmp	r0, #0
   191dc:	str	r0, [sp, #16]
   191e0:	mov	r0, ip
   191e4:	mvnne	lr, #0
   191e8:	mvnne	r6, #0
   191ec:	str	r0, [sp, #12]
   191f0:	subs	r2, ip, lr
   191f4:	umull	r7, r4, lr, r5
   191f8:	sbcs	r2, r1, r6
   191fc:	mov	r2, #0
   19200:	movwcc	r2, #1
   19204:	mla	r4, lr, sl, r4
   19208:	cmp	r2, #0
   1920c:	mla	r6, r6, r5, r4
   19210:	mov	r4, #0
   19214:	mvnne	r7, #0
   19218:	cmp	r2, #0
   1921c:	umull	r1, ip, r7, r5
   19220:	mvnne	r6, #0
   19224:	mla	ip, r7, sl, ip
   19228:	subs	r7, r0, r7
   1922c:	sbcs	r7, r3, r6
   19230:	mla	lr, r6, r5, ip
   19234:	mov	ip, #0
   19238:	movwcc	ip, #1
   1923c:	cmp	ip, #0
   19240:	mvnne	r1, #0
   19244:	mvnne	lr, #0
   19248:	subs	r7, r0, r1
   1924c:	sbcs	r7, r3, lr
   19250:	umull	r0, r7, r1, r5
   19254:	movwcc	r4, #1
   19258:	cmp	r4, #0
   1925c:	mla	r1, r1, sl, r7
   19260:	mvnne	r0, #0
   19264:	cmp	r4, #0
   19268:	mla	r1, lr, r5, r1
   1926c:	umull	r6, r3, r0, r5
   19270:	mvnne	r1, #0
   19274:	mla	r3, r0, sl, r3
   19278:	mla	r7, r1, r5, r3
   1927c:	ldr	r3, [sp, #12]
   19280:	subs	r0, r3, r0
   19284:	ldr	r0, [sp, #8]
   19288:	ldr	r3, [sp, #16]
   1928c:	sbcs	r0, r0, r1
   19290:	mov	r0, #0
   19294:	movwcc	r0, #1
   19298:	cmp	r0, #0
   1929c:	mov	r1, r0
   192a0:	ldr	r0, [sp, #20]
   192a4:	mvnne	r7, #0
   192a8:	mvnne	r6, #0
   192ac:	orr	r0, r0, r3
   192b0:	orr	r0, r0, r2
   192b4:	orr	r0, r0, ip
   192b8:	orr	r0, r0, r4
   192bc:	orr	r3, r0, r1
   192c0:	b	1961c <__assert_fail@plt+0x82f8>
   192c4:	mvn	r0, #0
   192c8:	mvn	r1, #0
   192cc:	mov	r2, r5
   192d0:	mov	sl, r3
   192d4:	bl	19f10 <__assert_fail@plt+0x8bec>
   192d8:	umull	r3, r2, r6, r5
   192dc:	mov	lr, r1
   192e0:	mov	r1, r0
   192e4:	mla	r2, r6, sl, r2
   192e8:	subs	r6, r0, r6
   192ec:	mov	r0, #0
   192f0:	sbcs	r6, lr, r7
   192f4:	mla	r2, r7, r5, r2
   192f8:	movwcc	r0, #1
   192fc:	cmp	r0, #0
   19300:	str	r0, [sp, #20]
   19304:	mov	r0, r1
   19308:	mvnne	r3, #0
   1930c:	mvnne	r2, #0
   19310:	str	r0, [sp, #16]
   19314:	subs	r4, r1, r3
   19318:	umull	r7, ip, r3, r5
   1931c:	sbcs	r4, lr, r2
   19320:	mov	r4, #0
   19324:	movwcc	r4, #1
   19328:	mla	r3, r3, sl, ip
   1932c:	mov	ip, #0
   19330:	cmp	r4, #0
   19334:	mla	r2, r2, r5, r3
   19338:	mvnne	r7, #0
   1933c:	cmp	r4, #0
   19340:	umull	r1, r6, r7, r5
   19344:	mvnne	r2, #0
   19348:	mla	r6, r7, sl, r6
   1934c:	mla	r3, r2, r5, r6
   19350:	subs	r6, r0, r7
   19354:	sbcs	r2, lr, r2
   19358:	mov	r2, #0
   1935c:	movwcc	ip, #1
   19360:	cmp	ip, #0
   19364:	mvnne	r1, #0
   19368:	mvnne	r3, #0
   1936c:	subs	r6, r0, r1
   19370:	sbcs	r6, lr, r3
   19374:	umull	r0, r6, r1, r5
   19378:	movwcc	r2, #1
   1937c:	cmp	r2, #0
   19380:	mvnne	r0, #0
   19384:	cmp	r2, #0
   19388:	str	r6, [sp, #12]
   1938c:	umull	r6, r7, r0, r5
   19390:	mla	r7, r0, sl, r7
   19394:	str	r7, [sp, #8]
   19398:	ldr	r7, [sp, #12]
   1939c:	mla	r1, r1, sl, r7
   193a0:	mla	r1, r3, r5, r1
   193a4:	ldr	r3, [sp, #8]
   193a8:	mvnne	r1, #0
   193ac:	mla	r7, r1, r5, r3
   193b0:	ldr	r3, [sp, #16]
   193b4:	subs	r0, r3, r0
   193b8:	sbcs	r0, lr, r1
   193bc:	mov	r0, #0
   193c0:	movwcc	r0, #1
   193c4:	cmp	r0, #0
   193c8:	mov	r1, r0
   193cc:	ldr	r0, [sp, #20]
   193d0:	mvnne	r7, #0
   193d4:	mvnne	r6, #0
   193d8:	orr	r0, r0, r4
   193dc:	orr	r0, r0, ip
   193e0:	orr	r0, r0, r2
   193e4:	orr	r3, r0, r1
   193e8:	b	1961c <__assert_fail@plt+0x82f8>
   193ec:	mvn	r0, #0
   193f0:	mvn	r1, #0
   193f4:	mov	r2, r5
   193f8:	mov	sl, r3
   193fc:	bl	19f10 <__assert_fail@plt+0x8bec>
   19400:	mov	lr, r0
   19404:	subs	r0, r0, r6
   19408:	mov	r2, #0
   1940c:	mov	ip, r1
   19410:	str	sl, [sp, #24]
   19414:	sbcs	r0, r1, r7
   19418:	umull	r3, r1, r6, r5
   1941c:	str	lr, [sp, #4]
   19420:	movwcc	r2, #1
   19424:	cmp	r2, #0
   19428:	mla	r6, r6, sl, r1
   1942c:	mov	r1, #0
   19430:	str	r2, [sp, #20]
   19434:	mvnne	r3, #0
   19438:	cmp	r2, #0
   1943c:	mla	r7, r7, r5, r6
   19440:	mov	r2, #0
   19444:	umull	r0, r4, r3, r5
   19448:	mvnne	r7, #0
   1944c:	mla	r4, r3, sl, r4
   19450:	subs	r3, lr, r3
   19454:	sbcs	r3, ip, r7
   19458:	mla	r4, r7, r5, r4
   1945c:	movwcc	r1, #1
   19460:	cmp	r1, #0
   19464:	str	r1, [sp, #16]
   19468:	mvnne	r0, #0
   1946c:	mvnne	r4, #0
   19470:	subs	r3, lr, r0
   19474:	sbcs	r3, ip, r4
   19478:	umull	r6, r3, r0, r5
   1947c:	movwcc	r2, #1
   19480:	cmp	r2, #0
   19484:	mla	r0, r0, sl, r3
   19488:	str	r2, [sp, #12]
   1948c:	mvnne	r6, #0
   19490:	cmp	r2, #0
   19494:	mla	r0, r4, r5, r0
   19498:	ldr	r4, [sp, #24]
   1949c:	umull	r1, r7, r6, r5
   194a0:	mvnne	r0, #0
   194a4:	subs	r3, lr, r6
   194a8:	mov	r3, ip
   194ac:	str	r3, [sp]
   194b0:	mla	r7, r6, sl, r7
   194b4:	mla	r7, r0, r5, r7
   194b8:	sbcs	r0, ip, r0
   194bc:	mov	r0, #0
   194c0:	movwcc	r0, #1
   194c4:	cmp	r0, #0
   194c8:	str	r0, [sp, #8]
   194cc:	mvnne	r1, #0
   194d0:	mvnne	r7, #0
   194d4:	subs	r0, lr, r1
   194d8:	sbcs	r0, ip, r7
   194dc:	mov	ip, #0
   194e0:	umull	r6, r0, r1, r5
   194e4:	movwcc	ip, #1
   194e8:	cmp	ip, #0
   194ec:	mla	r1, r1, r4, r0
   194f0:	mov	r0, lr
   194f4:	mvnne	r6, #0
   194f8:	cmp	ip, #0
   194fc:	mla	r1, r7, r5, r1
   19500:	umull	r2, sl, r6, r5
   19504:	mvnne	r1, #0
   19508:	mla	sl, r6, r4, sl
   1950c:	subs	r6, lr, r6
   19510:	mov	lr, #0
   19514:	mla	r7, r1, r5, sl
   19518:	sbcs	r1, r3, r1
   1951c:	ldr	r1, [sp, #24]
   19520:	movwcc	lr, #1
   19524:	cmp	lr, #0
   19528:	mvnne	r2, #0
   1952c:	mvnne	r7, #0
   19530:	subs	r6, r0, r2
   19534:	umull	r0, sl, r2, r5
   19538:	sbcs	r6, r3, r7
   1953c:	mov	r3, #0
   19540:	movwcc	r3, #1
   19544:	mla	r2, r2, r1, sl
   19548:	cmp	r3, #0
   1954c:	mla	r2, r7, r5, r2
   19550:	mvnne	r0, #0
   19554:	cmp	r3, #0
   19558:	umull	r6, r4, r0, r5
   1955c:	mvnne	r2, #0
   19560:	mla	r4, r0, r1, r4
   19564:	ldr	r1, [sp, #4]
   19568:	mla	r7, r2, r5, r4
   1956c:	ldr	r5, [sp, #16]
   19570:	subs	r0, r1, r0
   19574:	ldr	r0, [sp]
   19578:	sbcs	r0, r0, r2
   1957c:	mov	r0, #0
   19580:	movwcc	r0, #1
   19584:	cmp	r0, #0
   19588:	mov	r2, r0
   1958c:	ldr	r0, [sp, #20]
   19590:	mvnne	r7, #0
   19594:	mvnne	r6, #0
   19598:	orr	r0, r0, r5
   1959c:	ldr	r5, [sp, #12]
   195a0:	orr	r0, r0, r5
   195a4:	ldr	r5, [sp, #8]
   195a8:	orr	r0, r0, r5
   195ac:	orr	r0, r0, ip
   195b0:	orr	r0, r0, lr
   195b4:	orr	r0, r0, r3
   195b8:	orr	r0, r0, r2
   195bc:	and	r3, r0, #1
   195c0:	b	1961c <__assert_fail@plt+0x82f8>
   195c4:	mov	r1, #0
   195c8:	lsl	r2, r7, #9
   195cc:	lsl	r0, r6, #9
   195d0:	lsr	r3, r7, #23
   195d4:	cmp	r1, r7, lsr #23
   195d8:	orr	r2, r2, r6, lsr #23
   195dc:	mvnne	r0, #0
   195e0:	movwne	r3, #1
   195e4:	cmp	r1, r7, lsr #23
   195e8:	mvnne	r2, #0
   195ec:	mov	r6, r0
   195f0:	mov	r7, r2
   195f4:	b	1961c <__assert_fail@plt+0x82f8>
   195f8:	lsl	r1, r7, #1
   195fc:	cmp	r7, #0
   19600:	lsl	r0, r6, #1
   19604:	lsr	r3, r7, #31
   19608:	orr	r1, r1, r6, lsr #31
   1960c:	mvnmi	r0, #0
   19610:	mvnmi	r1, #0
   19614:	mov	r6, r0
   19618:	mov	r7, r1
   1961c:	ldr	r1, [sp, #32]
   19620:	ldr	r2, [sp, #28]
   19624:	orr	r8, r3, r8
   19628:	add	r0, r1, r2
   1962c:	str	r0, [r9]
   19630:	ldrb	r0, [r1, r2]
   19634:	cmp	r0, #0
   19638:	orrne	r8, r8, #2
   1963c:	ldr	r0, [sp, #36]	; 0x24
   19640:	strd	r6, [r0]
   19644:	mov	r0, r8
   19648:	sub	sp, fp, #28
   1964c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19650:	movw	r0, #50261	; 0xc455
   19654:	movw	r1, #50370	; 0xc4c2
   19658:	movw	r3, #50386	; 0xc4d2
   1965c:	mov	r2, #85	; 0x55
   19660:	movt	r0, #1
   19664:	movt	r1, #1
   19668:	movt	r3, #1
   1966c:	bl	11324 <__assert_fail@plt>
   19670:	clz	r2, r1
   19674:	clz	r3, r0
   19678:	lsr	r2, r2, #5
   1967c:	lsr	r3, r3, #5
   19680:	orrs	r2, r3, r2
   19684:	movwne	r1, #1
   19688:	movwne	r0, #1
   1968c:	cmp	r1, #0
   19690:	beq	196c0 <__assert_fail@plt+0x839c>
   19694:	mvn	r2, #-2147483648	; 0x80000000
   19698:	udiv	r2, r2, r1
   1969c:	cmp	r2, r0
   196a0:	bcs	196c0 <__assert_fail@plt+0x839c>
   196a4:	push	{fp, lr}
   196a8:	mov	fp, sp
   196ac:	bl	11210 <__errno_location@plt>
   196b0:	mov	r1, #12
   196b4:	str	r1, [r0]
   196b8:	mov	r0, #0
   196bc:	pop	{fp, pc}
   196c0:	b	11060 <calloc@plt>
   196c4:	cmp	r0, #0
   196c8:	movweq	r0, #1
   196cc:	cmn	r0, #1
   196d0:	ble	196d8 <__assert_fail@plt+0x83b4>
   196d4:	b	11198 <malloc@plt>
   196d8:	push	{fp, lr}
   196dc:	mov	fp, sp
   196e0:	bl	11210 <__errno_location@plt>
   196e4:	mov	r1, #12
   196e8:	str	r1, [r0]
   196ec:	mov	r0, #0
   196f0:	pop	{fp, pc}
   196f4:	push	{fp, lr}
   196f8:	mov	fp, sp
   196fc:	cmp	r0, #0
   19700:	beq	1971c <__assert_fail@plt+0x83f8>
   19704:	cmp	r1, #0
   19708:	beq	19728 <__assert_fail@plt+0x8404>
   1970c:	cmn	r1, #1
   19710:	ble	19734 <__assert_fail@plt+0x8410>
   19714:	pop	{fp, lr}
   19718:	b	11114 <realloc@plt>
   1971c:	mov	r0, r1
   19720:	pop	{fp, lr}
   19724:	b	196c4 <__assert_fail@plt+0x83a0>
   19728:	bl	1504c <__assert_fail@plt+0x3d28>
   1972c:	mov	r0, #0
   19730:	pop	{fp, pc}
   19734:	bl	11210 <__errno_location@plt>
   19738:	mov	r1, #12
   1973c:	str	r1, [r0]
   19740:	mov	r0, #0
   19744:	pop	{fp, pc}
   19748:	push	{r4, r5, r6, sl, fp, lr}
   1974c:	add	fp, sp, #16
   19750:	mov	r4, r0
   19754:	bl	11168 <__fpending@plt>
   19758:	ldr	r6, [r4]
   1975c:	mov	r5, r0
   19760:	mov	r0, r4
   19764:	bl	197cc <__assert_fail@plt+0x84a8>
   19768:	tst	r6, #32
   1976c:	bne	197a4 <__assert_fail@plt+0x8480>
   19770:	cmp	r0, #0
   19774:	mov	r4, r0
   19778:	mvnne	r4, #0
   1977c:	cmp	r5, #0
   19780:	bne	197b0 <__assert_fail@plt+0x848c>
   19784:	cmp	r0, #0
   19788:	beq	197b0 <__assert_fail@plt+0x848c>
   1978c:	bl	11210 <__errno_location@plt>
   19790:	ldr	r0, [r0]
   19794:	subs	r4, r0, #9
   19798:	mvnne	r4, #0
   1979c:	mov	r0, r4
   197a0:	pop	{r4, r5, r6, sl, fp, pc}
   197a4:	mvn	r4, #0
   197a8:	cmp	r0, #0
   197ac:	beq	197b8 <__assert_fail@plt+0x8494>
   197b0:	mov	r0, r4
   197b4:	pop	{r4, r5, r6, sl, fp, pc}
   197b8:	bl	11210 <__errno_location@plt>
   197bc:	mov	r1, #0
   197c0:	str	r1, [r0]
   197c4:	mov	r0, r4
   197c8:	pop	{r4, r5, r6, sl, fp, pc}
   197cc:	push	{r4, r5, r6, sl, fp, lr}
   197d0:	add	fp, sp, #16
   197d4:	sub	sp, sp, #8
   197d8:	mov	r4, r0
   197dc:	bl	11240 <fileno@plt>
   197e0:	cmn	r0, #1
   197e4:	ble	19858 <__assert_fail@plt+0x8534>
   197e8:	mov	r0, r4
   197ec:	bl	111b0 <__freading@plt>
   197f0:	cmp	r0, #0
   197f4:	beq	19820 <__assert_fail@plt+0x84fc>
   197f8:	mov	r0, r4
   197fc:	bl	11240 <fileno@plt>
   19800:	mov	r1, #1
   19804:	mov	r2, #0
   19808:	mov	r3, #0
   1980c:	str	r1, [sp]
   19810:	bl	11144 <lseek64@plt>
   19814:	and	r0, r0, r1
   19818:	cmn	r0, #1
   1981c:	beq	19858 <__assert_fail@plt+0x8534>
   19820:	mov	r0, r4
   19824:	bl	19868 <__assert_fail@plt+0x8544>
   19828:	cmp	r0, #0
   1982c:	beq	19858 <__assert_fail@plt+0x8534>
   19830:	bl	11210 <__errno_location@plt>
   19834:	ldr	r6, [r0]
   19838:	mov	r5, r0
   1983c:	mov	r0, r4
   19840:	bl	11264 <fclose@plt>
   19844:	cmp	r6, #0
   19848:	strne	r6, [r5]
   1984c:	mvnne	r0, #0
   19850:	sub	sp, fp, #16
   19854:	pop	{r4, r5, r6, sl, fp, pc}
   19858:	mov	r0, r4
   1985c:	sub	sp, fp, #16
   19860:	pop	{r4, r5, r6, sl, fp, lr}
   19864:	b	11264 <fclose@plt>
   19868:	push	{r4, sl, fp, lr}
   1986c:	add	fp, sp, #8
   19870:	sub	sp, sp, #8
   19874:	mov	r4, r0
   19878:	cmp	r0, #0
   1987c:	beq	198b4 <__assert_fail@plt+0x8590>
   19880:	mov	r0, r4
   19884:	bl	111b0 <__freading@plt>
   19888:	cmp	r0, #0
   1988c:	beq	198b4 <__assert_fail@plt+0x8590>
   19890:	ldrb	r0, [r4, #1]
   19894:	tst	r0, #1
   19898:	beq	198b4 <__assert_fail@plt+0x8590>
   1989c:	mov	r0, #1
   198a0:	mov	r2, #0
   198a4:	mov	r3, #0
   198a8:	str	r0, [sp]
   198ac:	mov	r0, r4
   198b0:	bl	198c4 <__assert_fail@plt+0x85a0>
   198b4:	mov	r0, r4
   198b8:	sub	sp, fp, #8
   198bc:	pop	{r4, sl, fp, lr}
   198c0:	b	110a8 <fflush@plt>
   198c4:	push	{r4, r5, r6, r7, fp, lr}
   198c8:	add	fp, sp, #16
   198cc:	sub	sp, sp, #8
   198d0:	mov	r4, r0
   198d4:	ldr	r0, [r0, #4]
   198d8:	mov	r5, r3
   198dc:	mov	r6, r2
   198e0:	ldr	r1, [r4, #8]
   198e4:	cmp	r1, r0
   198e8:	bne	19904 <__assert_fail@plt+0x85e0>
   198ec:	ldrd	r0, [r4, #16]
   198f0:	cmp	r1, r0
   198f4:	bne	19904 <__assert_fail@plt+0x85e0>
   198f8:	ldr	r0, [r4, #36]	; 0x24
   198fc:	cmp	r0, #0
   19900:	beq	1991c <__assert_fail@plt+0x85f8>
   19904:	mov	r0, r4
   19908:	mov	r2, r6
   1990c:	mov	r3, r5
   19910:	sub	sp, fp, #16
   19914:	pop	{r4, r5, r6, r7, fp, lr}
   19918:	b	11270 <fseeko64@plt>
   1991c:	ldr	r7, [fp, #8]
   19920:	mov	r0, r4
   19924:	bl	11240 <fileno@plt>
   19928:	mov	r2, r6
   1992c:	mov	r3, r5
   19930:	str	r7, [sp]
   19934:	bl	11144 <lseek64@plt>
   19938:	and	r2, r0, r1
   1993c:	cmn	r2, #1
   19940:	beq	19960 <__assert_fail@plt+0x863c>
   19944:	strd	r0, [r4, #80]	; 0x50
   19948:	ldr	r0, [r4]
   1994c:	bic	r0, r0, #16
   19950:	str	r0, [r4]
   19954:	mov	r0, #0
   19958:	sub	sp, fp, #16
   1995c:	pop	{r4, r5, r6, r7, fp, pc}
   19960:	mvn	r0, #0
   19964:	sub	sp, fp, #16
   19968:	pop	{r4, r5, r6, r7, fp, pc}
   1996c:	push	{fp, lr}
   19970:	mov	fp, sp
   19974:	mov	r0, #14
   19978:	bl	112ac <nl_langinfo@plt>
   1997c:	movw	r1, #46401	; 0xb541
   19980:	cmp	r0, #0
   19984:	movt	r1, #1
   19988:	movne	r1, r0
   1998c:	movw	r0, #50465	; 0xc521
   19990:	ldrb	r2, [r1]
   19994:	movt	r0, #1
   19998:	cmp	r2, #0
   1999c:	movne	r0, r1
   199a0:	pop	{fp, pc}
   199a4:	push	{r4, r5, r6, r7, fp, lr}
   199a8:	add	fp, sp, #16
   199ac:	sub	sp, sp, #8
   199b0:	cmp	r0, #0
   199b4:	add	r5, sp, #4
   199b8:	mov	r7, r2
   199bc:	mov	r4, r1
   199c0:	movne	r5, r0
   199c4:	mov	r0, r5
   199c8:	bl	11174 <mbrtowc@plt>
   199cc:	mov	r6, r0
   199d0:	cmp	r7, #0
   199d4:	beq	199fc <__assert_fail@plt+0x86d8>
   199d8:	cmn	r6, #2
   199dc:	bcc	199fc <__assert_fail@plt+0x86d8>
   199e0:	mov	r0, #0
   199e4:	bl	19a44 <__assert_fail@plt+0x8720>
   199e8:	cmp	r0, #0
   199ec:	bne	199fc <__assert_fail@plt+0x86d8>
   199f0:	ldrb	r0, [r4]
   199f4:	mov	r6, #1
   199f8:	str	r0, [r5]
   199fc:	mov	r0, r6
   19a00:	sub	sp, fp, #16
   19a04:	pop	{r4, r5, r6, r7, fp, pc}
   19a08:	cmp	r2, #0
   19a0c:	beq	19a3c <__assert_fail@plt+0x8718>
   19a10:	mvn	r3, #0
   19a14:	udiv	r3, r3, r2
   19a18:	cmp	r3, r1
   19a1c:	bcs	19a3c <__assert_fail@plt+0x8718>
   19a20:	push	{fp, lr}
   19a24:	mov	fp, sp
   19a28:	bl	11210 <__errno_location@plt>
   19a2c:	mov	r1, #12
   19a30:	str	r1, [r0]
   19a34:	mov	r0, #0
   19a38:	pop	{fp, pc}
   19a3c:	mul	r1, r2, r1
   19a40:	b	196f4 <__assert_fail@plt+0x83d0>
   19a44:	push	{r4, sl, fp, lr}
   19a48:	add	fp, sp, #8
   19a4c:	sub	sp, sp, #264	; 0x108
   19a50:	add	r1, sp, #7
   19a54:	movw	r2, #257	; 0x101
   19a58:	bl	19ab0 <__assert_fail@plt+0x878c>
   19a5c:	mov	r4, #0
   19a60:	cmp	r0, #0
   19a64:	bne	19aa4 <__assert_fail@plt+0x8780>
   19a68:	movw	r1, #50471	; 0xc527
   19a6c:	add	r0, sp, #7
   19a70:	mov	r2, #2
   19a74:	movt	r1, #1
   19a78:	bl	111ec <bcmp@plt>
   19a7c:	cmp	r0, #0
   19a80:	beq	19aa4 <__assert_fail@plt+0x8780>
   19a84:	movw	r1, #50473	; 0xc529
   19a88:	add	r0, sp, #7
   19a8c:	mov	r2, #6
   19a90:	movt	r1, #1
   19a94:	bl	111ec <bcmp@plt>
   19a98:	cmp	r0, #0
   19a9c:	mov	r4, r0
   19aa0:	movwne	r4, #1
   19aa4:	mov	r0, r4
   19aa8:	sub	sp, fp, #8
   19aac:	pop	{r4, sl, fp, pc}
   19ab0:	push	{r4, r5, r6, r7, fp, lr}
   19ab4:	add	fp, sp, #16
   19ab8:	mov	r4, r1
   19abc:	mov	r1, #0
   19ac0:	mov	r6, r2
   19ac4:	bl	11288 <setlocale@plt>
   19ac8:	cmp	r0, #0
   19acc:	beq	19afc <__assert_fail@plt+0x87d8>
   19ad0:	mov	r7, r0
   19ad4:	bl	111f8 <strlen@plt>
   19ad8:	cmp	r0, r6
   19adc:	bcs	19b18 <__assert_fail@plt+0x87f4>
   19ae0:	add	r2, r0, #1
   19ae4:	mov	r0, r4
   19ae8:	mov	r1, r7
   19aec:	bl	110e4 <memcpy@plt>
   19af0:	mov	r5, #0
   19af4:	mov	r0, r5
   19af8:	pop	{r4, r5, r6, r7, fp, pc}
   19afc:	mov	r5, #22
   19b00:	cmp	r6, #0
   19b04:	beq	19b40 <__assert_fail@plt+0x881c>
   19b08:	mov	r0, #0
   19b0c:	strb	r0, [r4]
   19b10:	mov	r0, r5
   19b14:	pop	{r4, r5, r6, r7, fp, pc}
   19b18:	mov	r5, #34	; 0x22
   19b1c:	cmp	r6, #0
   19b20:	beq	19b40 <__assert_fail@plt+0x881c>
   19b24:	sub	r6, r6, #1
   19b28:	mov	r0, r4
   19b2c:	mov	r1, r7
   19b30:	mov	r2, r6
   19b34:	bl	110e4 <memcpy@plt>
   19b38:	mov	r0, #0
   19b3c:	strb	r0, [r4, r6]
   19b40:	mov	r0, r5
   19b44:	pop	{r4, r5, r6, r7, fp, pc}
   19b48:	mov	r1, #0
   19b4c:	b	11288 <setlocale@plt>
   19b50:	eor	r1, r1, #-2147483648	; 0x80000000
   19b54:	b	19b5c <__assert_fail@plt+0x8838>
   19b58:	eor	r3, r3, #-2147483648	; 0x80000000
   19b5c:	push	{r4, r5, lr}
   19b60:	lsl	r4, r1, #1
   19b64:	lsl	r5, r3, #1
   19b68:	teq	r4, r5
   19b6c:	teqeq	r0, r2
   19b70:	orrsne	ip, r4, r0
   19b74:	orrsne	ip, r5, r2
   19b78:	mvnsne	ip, r4, asr #21
   19b7c:	mvnsne	ip, r5, asr #21
   19b80:	beq	19d6c <__assert_fail@plt+0x8a48>
   19b84:	lsr	r4, r4, #21
   19b88:	rsbs	r5, r4, r5, lsr #21
   19b8c:	rsblt	r5, r5, #0
   19b90:	ble	19bb0 <__assert_fail@plt+0x888c>
   19b94:	add	r4, r4, r5
   19b98:	eor	r2, r0, r2
   19b9c:	eor	r3, r1, r3
   19ba0:	eor	r0, r2, r0
   19ba4:	eor	r1, r3, r1
   19ba8:	eor	r2, r0, r2
   19bac:	eor	r3, r1, r3
   19bb0:	cmp	r5, #54	; 0x36
   19bb4:	pophi	{r4, r5, pc}
   19bb8:	tst	r1, #-2147483648	; 0x80000000
   19bbc:	lsl	r1, r1, #12
   19bc0:	mov	ip, #1048576	; 0x100000
   19bc4:	orr	r1, ip, r1, lsr #12
   19bc8:	beq	19bd4 <__assert_fail@plt+0x88b0>
   19bcc:	rsbs	r0, r0, #0
   19bd0:	rsc	r1, r1, #0
   19bd4:	tst	r3, #-2147483648	; 0x80000000
   19bd8:	lsl	r3, r3, #12
   19bdc:	orr	r3, ip, r3, lsr #12
   19be0:	beq	19bec <__assert_fail@plt+0x88c8>
   19be4:	rsbs	r2, r2, #0
   19be8:	rsc	r3, r3, #0
   19bec:	teq	r4, r5
   19bf0:	beq	19d54 <__assert_fail@plt+0x8a30>
   19bf4:	sub	r4, r4, #1
   19bf8:	rsbs	lr, r5, #32
   19bfc:	blt	19c18 <__assert_fail@plt+0x88f4>
   19c00:	lsl	ip, r2, lr
   19c04:	adds	r0, r0, r2, lsr r5
   19c08:	adc	r1, r1, #0
   19c0c:	adds	r0, r0, r3, lsl lr
   19c10:	adcs	r1, r1, r3, asr r5
   19c14:	b	19c34 <__assert_fail@plt+0x8910>
   19c18:	sub	r5, r5, #32
   19c1c:	add	lr, lr, #32
   19c20:	cmp	r2, #1
   19c24:	lsl	ip, r3, lr
   19c28:	orrcs	ip, ip, #2
   19c2c:	adds	r0, r0, r3, asr r5
   19c30:	adcs	r1, r1, r3, asr #31
   19c34:	and	r5, r1, #-2147483648	; 0x80000000
   19c38:	bpl	19c48 <__assert_fail@plt+0x8924>
   19c3c:	rsbs	ip, ip, #0
   19c40:	rscs	r0, r0, #0
   19c44:	rsc	r1, r1, #0
   19c48:	cmp	r1, #1048576	; 0x100000
   19c4c:	bcc	19c8c <__assert_fail@plt+0x8968>
   19c50:	cmp	r1, #2097152	; 0x200000
   19c54:	bcc	19c74 <__assert_fail@plt+0x8950>
   19c58:	lsrs	r1, r1, #1
   19c5c:	rrxs	r0, r0
   19c60:	rrx	ip, ip
   19c64:	add	r4, r4, #1
   19c68:	lsl	r2, r4, #21
   19c6c:	cmn	r2, #4194304	; 0x400000
   19c70:	bcs	19dcc <__assert_fail@plt+0x8aa8>
   19c74:	cmp	ip, #-2147483648	; 0x80000000
   19c78:	lsrseq	ip, r0, #1
   19c7c:	adcs	r0, r0, #0
   19c80:	adc	r1, r1, r4, lsl #20
   19c84:	orr	r1, r1, r5
   19c88:	pop	{r4, r5, pc}
   19c8c:	lsls	ip, ip, #1
   19c90:	adcs	r0, r0, r0
   19c94:	adc	r1, r1, r1
   19c98:	tst	r1, #1048576	; 0x100000
   19c9c:	sub	r4, r4, #1
   19ca0:	bne	19c74 <__assert_fail@plt+0x8950>
   19ca4:	teq	r1, #0
   19ca8:	moveq	r1, r0
   19cac:	moveq	r0, #0
   19cb0:	clz	r3, r1
   19cb4:	addeq	r3, r3, #32
   19cb8:	sub	r3, r3, #11
   19cbc:	subs	r2, r3, #32
   19cc0:	bge	19ce4 <__assert_fail@plt+0x89c0>
   19cc4:	adds	r2, r2, #12
   19cc8:	ble	19ce0 <__assert_fail@plt+0x89bc>
   19ccc:	add	ip, r2, #20
   19cd0:	rsb	r2, r2, #12
   19cd4:	lsl	r0, r1, ip
   19cd8:	lsr	r1, r1, r2
   19cdc:	b	19cf4 <__assert_fail@plt+0x89d0>
   19ce0:	add	r2, r2, #20
   19ce4:	rsble	ip, r2, #32
   19ce8:	lsl	r1, r1, r2
   19cec:	orrle	r1, r1, r0, lsr ip
   19cf0:	lslle	r0, r0, r2
   19cf4:	subs	r4, r4, r3
   19cf8:	addge	r1, r1, r4, lsl #20
   19cfc:	orrge	r1, r1, r5
   19d00:	popge	{r4, r5, pc}
   19d04:	mvn	r4, r4
   19d08:	subs	r4, r4, #31
   19d0c:	bge	19d48 <__assert_fail@plt+0x8a24>
   19d10:	adds	r4, r4, #12
   19d14:	bgt	19d30 <__assert_fail@plt+0x8a0c>
   19d18:	add	r4, r4, #20
   19d1c:	rsb	r2, r4, #32
   19d20:	lsr	r0, r0, r4
   19d24:	orr	r0, r0, r1, lsl r2
   19d28:	orr	r1, r5, r1, lsr r4
   19d2c:	pop	{r4, r5, pc}
   19d30:	rsb	r4, r4, #12
   19d34:	rsb	r2, r4, #32
   19d38:	lsr	r0, r0, r2
   19d3c:	orr	r0, r0, r1, lsl r4
   19d40:	mov	r1, r5
   19d44:	pop	{r4, r5, pc}
   19d48:	lsr	r0, r1, r4
   19d4c:	mov	r1, r5
   19d50:	pop	{r4, r5, pc}
   19d54:	teq	r4, #0
   19d58:	eor	r3, r3, #1048576	; 0x100000
   19d5c:	eoreq	r1, r1, #1048576	; 0x100000
   19d60:	addeq	r4, r4, #1
   19d64:	subne	r5, r5, #1
   19d68:	b	19bf4 <__assert_fail@plt+0x88d0>
   19d6c:	mvns	ip, r4, asr #21
   19d70:	mvnsne	ip, r5, asr #21
   19d74:	beq	19ddc <__assert_fail@plt+0x8ab8>
   19d78:	teq	r4, r5
   19d7c:	teqeq	r0, r2
   19d80:	beq	19d94 <__assert_fail@plt+0x8a70>
   19d84:	orrs	ip, r4, r0
   19d88:	moveq	r1, r3
   19d8c:	moveq	r0, r2
   19d90:	pop	{r4, r5, pc}
   19d94:	teq	r1, r3
   19d98:	movne	r1, #0
   19d9c:	movne	r0, #0
   19da0:	popne	{r4, r5, pc}
   19da4:	lsrs	ip, r4, #21
   19da8:	bne	19dbc <__assert_fail@plt+0x8a98>
   19dac:	lsls	r0, r0, #1
   19db0:	adcs	r1, r1, r1
   19db4:	orrcs	r1, r1, #-2147483648	; 0x80000000
   19db8:	pop	{r4, r5, pc}
   19dbc:	adds	r4, r4, #4194304	; 0x400000
   19dc0:	addcc	r1, r1, #1048576	; 0x100000
   19dc4:	popcc	{r4, r5, pc}
   19dc8:	and	r5, r1, #-2147483648	; 0x80000000
   19dcc:	orr	r1, r5, #2130706432	; 0x7f000000
   19dd0:	orr	r1, r1, #15728640	; 0xf00000
   19dd4:	mov	r0, #0
   19dd8:	pop	{r4, r5, pc}
   19ddc:	mvns	ip, r4, asr #21
   19de0:	movne	r1, r3
   19de4:	movne	r0, r2
   19de8:	mvnseq	ip, r5, asr #21
   19dec:	movne	r3, r1
   19df0:	movne	r2, r0
   19df4:	orrs	r4, r0, r1, lsl #12
   19df8:	orrseq	r5, r2, r3, lsl #12
   19dfc:	teqeq	r1, r3
   19e00:	orrne	r1, r1, #524288	; 0x80000
   19e04:	pop	{r4, r5, pc}
   19e08:	teq	r0, #0
   19e0c:	moveq	r1, #0
   19e10:	bxeq	lr
   19e14:	push	{r4, r5, lr}
   19e18:	mov	r4, #1024	; 0x400
   19e1c:	add	r4, r4, #50	; 0x32
   19e20:	mov	r5, #0
   19e24:	mov	r1, #0
   19e28:	b	19ca4 <__assert_fail@plt+0x8980>
   19e2c:	teq	r0, #0
   19e30:	moveq	r1, #0
   19e34:	bxeq	lr
   19e38:	push	{r4, r5, lr}
   19e3c:	mov	r4, #1024	; 0x400
   19e40:	add	r4, r4, #50	; 0x32
   19e44:	ands	r5, r0, #-2147483648	; 0x80000000
   19e48:	rsbmi	r0, r0, #0
   19e4c:	mov	r1, #0
   19e50:	b	19ca4 <__assert_fail@plt+0x8980>
   19e54:	lsls	r2, r0, #1
   19e58:	asr	r1, r2, #3
   19e5c:	rrx	r1, r1
   19e60:	lsl	r0, r2, #28
   19e64:	andsne	r3, r2, #-16777216	; 0xff000000
   19e68:	teqne	r3, #-16777216	; 0xff000000
   19e6c:	eorne	r1, r1, #939524096	; 0x38000000
   19e70:	bxne	lr
   19e74:	bics	r2, r2, #-16777216	; 0xff000000
   19e78:	bxeq	lr
   19e7c:	teq	r3, #-16777216	; 0xff000000
   19e80:	orreq	r1, r1, #524288	; 0x80000
   19e84:	bxeq	lr
   19e88:	push	{r4, r5, lr}
   19e8c:	mov	r4, #896	; 0x380
   19e90:	and	r5, r1, #-2147483648	; 0x80000000
   19e94:	bic	r1, r1, #-2147483648	; 0x80000000
   19e98:	b	19ca4 <__assert_fail@plt+0x8980>
   19e9c:	orrs	r2, r0, r1
   19ea0:	bxeq	lr
   19ea4:	push	{r4, r5, lr}
   19ea8:	mov	r5, #0
   19eac:	b	19ecc <__assert_fail@plt+0x8ba8>
   19eb0:	orrs	r2, r0, r1
   19eb4:	bxeq	lr
   19eb8:	push	{r4, r5, lr}
   19ebc:	ands	r5, r1, #-2147483648	; 0x80000000
   19ec0:	bpl	19ecc <__assert_fail@plt+0x8ba8>
   19ec4:	rsbs	r0, r0, #0
   19ec8:	rsc	r1, r1, #0
   19ecc:	mov	r4, #1024	; 0x400
   19ed0:	add	r4, r4, #50	; 0x32
   19ed4:	lsrs	ip, r1, #22
   19ed8:	beq	19c48 <__assert_fail@plt+0x8924>
   19edc:	mov	r2, #3
   19ee0:	lsrs	ip, ip, #3
   19ee4:	addne	r2, r2, #3
   19ee8:	lsrs	ip, ip, #3
   19eec:	addne	r2, r2, #3
   19ef0:	add	r2, r2, ip, lsr #3
   19ef4:	rsb	r3, r2, #32
   19ef8:	lsl	ip, r0, r3
   19efc:	lsr	r0, r0, r2
   19f00:	orr	r0, r0, r1, lsl r3
   19f04:	lsr	r1, r1, r2
   19f08:	add	r4, r4, r2
   19f0c:	b	19c48 <__assert_fail@plt+0x8924>
   19f10:	cmp	r3, #0
   19f14:	cmpeq	r2, #0
   19f18:	bne	19f30 <__assert_fail@plt+0x8c0c>
   19f1c:	cmp	r1, #0
   19f20:	cmpeq	r0, #0
   19f24:	mvnne	r1, #0
   19f28:	mvnne	r0, #0
   19f2c:	b	19f4c <__assert_fail@plt+0x8c28>
   19f30:	sub	sp, sp, #8
   19f34:	push	{sp, lr}
   19f38:	bl	19fc8 <__assert_fail@plt+0x8ca4>
   19f3c:	ldr	lr, [sp, #4]
   19f40:	add	sp, sp, #8
   19f44:	pop	{r2, r3}
   19f48:	bx	lr
   19f4c:	push	{r1, lr}
   19f50:	mov	r0, #8
   19f54:	bl	11078 <raise@plt>
   19f58:	pop	{r1, pc}
   19f5c:	vmov	d7, r0, r1
   19f60:	vcmpe.f64	d7, #0.0
   19f64:	vmrs	APSR_nzcv, fpscr
   19f68:	bmi	19f70 <__assert_fail@plt+0x8c4c>
   19f6c:	b	19f88 <__assert_fail@plt+0x8c64>
   19f70:	push	{r4, lr}
   19f74:	eor	r1, r1, #-2147483648	; 0x80000000
   19f78:	bl	19f88 <__assert_fail@plt+0x8c64>
   19f7c:	rsbs	r0, r0, #0
   19f80:	rsc	r1, r1, #0
   19f84:	pop	{r4, pc}
   19f88:	vmov	d6, r0, r1
   19f8c:	vldr	d7, [pc, #36]	; 19fb8 <__assert_fail@plt+0x8c94>
   19f90:	vldr	d5, [pc, #40]	; 19fc0 <__assert_fail@plt+0x8c9c>
   19f94:	vmul.f64	d7, d6, d7
   19f98:	vcvt.u32.f64	s14, d7
   19f9c:	vcvt.f64.u32	d4, s14
   19fa0:	vmov	r1, s14
   19fa4:	vmls.f64	d6, d4, d5
   19fa8:	vcvt.u32.f64	s15, d6
   19fac:	vmov	r0, s15
   19fb0:	bx	lr
   19fb4:	nop			; (mov r0, r0)
   19fb8:	andeq	r0, r0, r0
   19fbc:	ldclcc	0, cr0, [r0]
   19fc0:	andeq	r0, r0, r0
   19fc4:	mvnsmi	r0, r0
   19fc8:	cmp	r1, r3
   19fcc:	cmpeq	r0, r2
   19fd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fd4:	mov	r4, r0
   19fd8:	movcc	r0, #0
   19fdc:	mov	r5, r1
   19fe0:	ldr	lr, [sp, #36]	; 0x24
   19fe4:	movcc	r1, r0
   19fe8:	bcc	1a0e4 <__assert_fail@plt+0x8dc0>
   19fec:	cmp	r3, #0
   19ff0:	clzeq	ip, r2
   19ff4:	clzne	ip, r3
   19ff8:	addeq	ip, ip, #32
   19ffc:	cmp	r5, #0
   1a000:	clzeq	r1, r4
   1a004:	addeq	r1, r1, #32
   1a008:	clzne	r1, r5
   1a00c:	sub	ip, ip, r1
   1a010:	sub	sl, ip, #32
   1a014:	lsl	r9, r3, ip
   1a018:	rsb	fp, ip, #32
   1a01c:	orr	r9, r9, r2, lsl sl
   1a020:	orr	r9, r9, r2, lsr fp
   1a024:	lsl	r8, r2, ip
   1a028:	cmp	r5, r9
   1a02c:	cmpeq	r4, r8
   1a030:	movcc	r0, #0
   1a034:	movcc	r1, r0
   1a038:	bcc	1a054 <__assert_fail@plt+0x8d30>
   1a03c:	mov	r0, #1
   1a040:	subs	r4, r4, r8
   1a044:	lsl	r1, r0, sl
   1a048:	orr	r1, r1, r0, lsr fp
   1a04c:	lsl	r0, r0, ip
   1a050:	sbc	r5, r5, r9
   1a054:	cmp	ip, #0
   1a058:	beq	1a0e4 <__assert_fail@plt+0x8dc0>
   1a05c:	lsr	r6, r8, #1
   1a060:	orr	r6, r6, r9, lsl #31
   1a064:	lsr	r7, r9, #1
   1a068:	mov	r2, ip
   1a06c:	b	1a090 <__assert_fail@plt+0x8d6c>
   1a070:	subs	r3, r4, r6
   1a074:	sbc	r8, r5, r7
   1a078:	adds	r3, r3, r3
   1a07c:	adc	r8, r8, r8
   1a080:	adds	r4, r3, #1
   1a084:	adc	r5, r8, #0
   1a088:	subs	r2, r2, #1
   1a08c:	beq	1a0ac <__assert_fail@plt+0x8d88>
   1a090:	cmp	r5, r7
   1a094:	cmpeq	r4, r6
   1a098:	bcs	1a070 <__assert_fail@plt+0x8d4c>
   1a09c:	adds	r4, r4, r4
   1a0a0:	adc	r5, r5, r5
   1a0a4:	subs	r2, r2, #1
   1a0a8:	bne	1a090 <__assert_fail@plt+0x8d6c>
   1a0ac:	lsr	r3, r4, ip
   1a0b0:	orr	r3, r3, r5, lsl fp
   1a0b4:	lsr	r2, r5, ip
   1a0b8:	orr	r3, r3, r5, lsr sl
   1a0bc:	adds	r0, r0, r4
   1a0c0:	mov	r4, r3
   1a0c4:	lsl	r3, r2, ip
   1a0c8:	orr	r3, r3, r4, lsl sl
   1a0cc:	lsl	ip, r4, ip
   1a0d0:	orr	r3, r3, r4, lsr fp
   1a0d4:	adc	r1, r1, r5
   1a0d8:	subs	r0, r0, ip
   1a0dc:	mov	r5, r2
   1a0e0:	sbc	r1, r1, r3
   1a0e4:	cmp	lr, #0
   1a0e8:	strdne	r4, [lr]
   1a0ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a0f4:	mov	r7, r0
   1a0f8:	ldr	r6, [pc, #72]	; 1a148 <__assert_fail@plt+0x8e24>
   1a0fc:	ldr	r5, [pc, #72]	; 1a14c <__assert_fail@plt+0x8e28>
   1a100:	add	r6, pc, r6
   1a104:	add	r5, pc, r5
   1a108:	sub	r6, r6, r5
   1a10c:	mov	r8, r1
   1a110:	mov	r9, r2
   1a114:	bl	11040 <calloc@plt-0x20>
   1a118:	asrs	r6, r6, #2
   1a11c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a120:	mov	r4, #0
   1a124:	add	r4, r4, #1
   1a128:	ldr	r3, [r5], #4
   1a12c:	mov	r2, r9
   1a130:	mov	r1, r8
   1a134:	mov	r0, r7
   1a138:	blx	r3
   1a13c:	cmp	r6, r4
   1a140:	bne	1a124 <__assert_fail@plt+0x8e00>
   1a144:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a148:	andeq	r2, r1, r4, lsl #28
   1a14c:	strdeq	r2, [r1], -ip
   1a150:	bx	lr
   1a154:	ldr	r3, [pc, #12]	; 1a168 <__assert_fail@plt+0x8e44>
   1a158:	mov	r1, #0
   1a15c:	add	r3, pc, r3
   1a160:	ldr	r2, [r3]
   1a164:	b	1121c <__cxa_atexit@plt>
   1a168:	andeq	r2, r1, r0, lsr #31

Disassembly of section .fini:

0001a16c <.fini>:
   1a16c:	push	{r3, lr}
   1a170:	pop	{r3, pc}
