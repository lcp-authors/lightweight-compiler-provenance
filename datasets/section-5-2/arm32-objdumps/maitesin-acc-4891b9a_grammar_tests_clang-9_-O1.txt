
../repos/maitesin-acc-4891b9a/bin/grammar_tests:     file format elf32-littlearm


Disassembly of section .init:

00011e48 <.init>:
   11e48:	push	{r3, lr}
   11e4c:	bl	1209c <_start@@Base+0x3c>
   11e50:	pop	{r3, pc}

Disassembly of section .plt:

00011e54 <fdopen@plt-0x14>:
   11e54:	push	{lr}		; (str lr, [sp, #-4]!)
   11e58:	ldr	lr, [pc, #4]	; 11e64 <fdopen@plt-0x4>
   11e5c:	add	lr, pc, lr
   11e60:	ldr	pc, [lr, #8]!
   11e64:	muleq	r1, ip, r1

00011e68 <fdopen@plt>:
   11e68:	add	ip, pc, #0, 12
   11e6c:	add	ip, ip, #102400	; 0x19000
   11e70:	ldr	pc, [ip, #412]!	; 0x19c

00011e74 <setbuf@plt>:
   11e74:	add	ip, pc, #0, 12
   11e78:	add	ip, ip, #102400	; 0x19000
   11e7c:	ldr	pc, [ip, #404]!	; 0x194

00011e80 <strtol@plt>:
   11e80:	add	ip, pc, #0, 12
   11e84:	add	ip, ip, #102400	; 0x19000
   11e88:	ldr	pc, [ip, #396]!	; 0x18c

00011e8c <printf@plt>:
   11e8c:	add	ip, pc, #0, 12
   11e90:	add	ip, ip, #102400	; 0x19000
   11e94:	ldr	pc, [ip, #388]!	; 0x184

00011e98 <fflush@plt>:
   11e98:	add	ip, pc, #0, 12
   11e9c:	add	ip, ip, #102400	; 0x19000
   11ea0:	ldr	pc, [ip, #380]!	; 0x17c

00011ea4 <free@plt>:
   11ea4:	add	ip, pc, #0, 12
   11ea8:	add	ip, ip, #102400	; 0x19000
   11eac:	ldr	pc, [ip, #372]!	; 0x174

00011eb0 <memcpy@plt>:
   11eb0:	add	ip, pc, #0, 12
   11eb4:	add	ip, ip, #102400	; 0x19000
   11eb8:	ldr	pc, [ip, #364]!	; 0x16c

00011ebc <mmap64@plt>:
   11ebc:	add	ip, pc, #0, 12
   11ec0:	add	ip, ip, #102400	; 0x19000
   11ec4:	ldr	pc, [ip, #356]!	; 0x164

00011ec8 <ftell@plt>:
   11ec8:	add	ip, pc, #0, 12
   11ecc:	add	ip, ip, #102400	; 0x19000
   11ed0:	ldr	pc, [ip, #348]!	; 0x15c

00011ed4 <uname@plt>:
   11ed4:	add	ip, pc, #0, 12
   11ed8:	add	ip, ip, #102400	; 0x19000
   11edc:	ldr	pc, [ip, #340]!	; 0x154

00011ee0 <strdup@plt>:
   11ee0:	add	ip, pc, #0, 12
   11ee4:	add	ip, ip, #102400	; 0x19000
   11ee8:	ldr	pc, [ip, #332]!	; 0x14c

00011eec <realloc@plt>:
   11eec:	add	ip, pc, #0, 12
   11ef0:	add	ip, ip, #102400	; 0x19000
   11ef4:	ldr	pc, [ip, #324]!	; 0x144

00011ef8 <fwrite@plt>:
   11ef8:	add	ip, pc, #0, 12
   11efc:	add	ip, ip, #102400	; 0x19000
   11f00:	ldr	pc, [ip, #316]!	; 0x13c

00011f04 <open64@plt>:
   11f04:	add	ip, pc, #0, 12
   11f08:	add	ip, ip, #102400	; 0x19000
   11f0c:	ldr	pc, [ip, #308]!	; 0x134

00011f10 <getenv@plt>:
   11f10:	add	ip, pc, #0, 12
   11f14:	add	ip, ip, #102400	; 0x19000
   11f18:	ldr	pc, [ip, #300]!	; 0x12c

00011f1c <puts@plt>:
   11f1c:	add	ip, pc, #0, 12
   11f20:	add	ip, ip, #102400	; 0x19000
   11f24:	ldr	pc, [ip, #292]!	; 0x124

00011f28 <malloc@plt>:
   11f28:	add	ip, pc, #0, 12
   11f2c:	add	ip, ip, #102400	; 0x19000
   11f30:	ldr	pc, [ip, #284]!	; 0x11c

00011f34 <__libc_start_main@plt>:
   11f34:	add	ip, pc, #0, 12
   11f38:	add	ip, ip, #102400	; 0x19000
   11f3c:	ldr	pc, [ip, #276]!	; 0x114

00011f40 <strerror@plt>:
   11f40:	add	ip, pc, #0, 12
   11f44:	add	ip, ip, #102400	; 0x19000
   11f48:	ldr	pc, [ip, #268]!	; 0x10c

00011f4c <__gmon_start__@plt>:
   11f4c:	add	ip, pc, #0, 12
   11f50:	add	ip, ip, #102400	; 0x19000
   11f54:	ldr	pc, [ip, #260]!	; 0x104

00011f58 <getpid@plt>:
   11f58:	add	ip, pc, #0, 12
   11f5c:	add	ip, ip, #102400	; 0x19000
   11f60:	ldr	pc, [ip, #252]!	; 0xfc

00011f64 <exit@plt>:
   11f64:	add	ip, pc, #0, 12
   11f68:	add	ip, ip, #102400	; 0x19000
   11f6c:	ldr	pc, [ip, #244]!	; 0xf4

00011f70 <strlen@plt>:
   11f70:	add	ip, pc, #0, 12
   11f74:	add	ip, ip, #102400	; 0x19000
   11f78:	ldr	pc, [ip, #236]!	; 0xec

00011f7c <strchr@plt>:
   11f7c:	add	ip, pc, #0, 12
   11f80:	add	ip, ip, #102400	; 0x19000
   11f84:	ldr	pc, [ip, #228]!	; 0xe4

00011f88 <fprintf@plt>:
   11f88:	add	ip, pc, #0, 12
   11f8c:	add	ip, ip, #102400	; 0x19000
   11f90:	ldr	pc, [ip, #220]!	; 0xdc

00011f94 <__errno_location@plt>:
   11f94:	add	ip, pc, #0, 12
   11f98:	add	ip, ip, #102400	; 0x19000
   11f9c:	ldr	pc, [ip, #212]!	; 0xd4

00011fa0 <__cxa_atexit@plt>:
   11fa0:	add	ip, pc, #0, 12
   11fa4:	add	ip, ip, #102400	; 0x19000
   11fa8:	ldr	pc, [ip, #204]!	; 0xcc

00011fac <mkdir@plt>:
   11fac:	add	ip, pc, #0, 12
   11fb0:	add	ip, ip, #102400	; 0x19000
   11fb4:	ldr	pc, [ip, #196]!	; 0xc4

00011fb8 <memset@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #102400	; 0x19000
   11fc0:	ldr	pc, [ip, #188]!	; 0xbc

00011fc4 <strncpy@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #102400	; 0x19000
   11fcc:	ldr	pc, [ip, #180]!	; 0xb4

00011fd0 <prctl@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #102400	; 0x19000
   11fd8:	ldr	pc, [ip, #172]!	; 0xac

00011fdc <fileno@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #102400	; 0x19000
   11fe4:	ldr	pc, [ip, #164]!	; 0xa4

00011fe8 <fclose@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #102400	; 0x19000
   11ff0:	ldr	pc, [ip, #156]!	; 0x9c

00011ff4 <strnlen@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #102400	; 0x19000
   11ffc:	ldr	pc, [ip, #148]!	; 0x94

00012000 <munmap@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #102400	; 0x19000
   12008:	ldr	pc, [ip, #140]!	; 0x8c

0001200c <fcntl64@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #102400	; 0x19000
   12014:	ldr	pc, [ip, #132]!	; 0x84

00012018 <strrchr@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #102400	; 0x19000
   12020:	ldr	pc, [ip, #124]!	; 0x7c

00012024 <msync@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #102400	; 0x19000
   1202c:	ldr	pc, [ip, #116]!	; 0x74

00012030 <fseek@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #102400	; 0x19000
   12038:	ldr	pc, [ip, #108]!	; 0x6c

0001203c <strncmp@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #102400	; 0x19000
   12044:	ldr	pc, [ip, #100]!	; 0x64

00012048 <abort@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #102400	; 0x19000
   12050:	ldr	pc, [ip, #92]!	; 0x5c

00012054 <__assert_fail@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #102400	; 0x19000
   1205c:	ldr	pc, [ip, #84]!	; 0x54

Disassembly of section .text:

00012060 <_start@@Base>:
   12060:	mov	fp, #0
   12064:	mov	lr, #0
   12068:	pop	{r1}		; (ldr r1, [sp], #4)
   1206c:	mov	r2, sp
   12070:	push	{r2}		; (str r2, [sp, #-4]!)
   12074:	push	{r0}		; (str r0, [sp, #-4]!)
   12078:	ldr	ip, [pc, #16]	; 12090 <_start@@Base+0x30>
   1207c:	push	{ip}		; (str ip, [sp, #-4]!)
   12080:	ldr	r0, [pc, #12]	; 12094 <_start@@Base+0x34>
   12084:	ldr	r3, [pc, #12]	; 12098 <_start@@Base+0x38>
   12088:	bl	11f34 <__libc_start_main@plt>
   1208c:	bl	12048 <abort@plt>
   12090:	andeq	r9, r1, r0, asr #12
   12094:	andeq	r3, r1, r8, lsl #29
   12098:	andeq	r9, r1, r0, ror #11
   1209c:	ldr	r3, [pc, #20]	; 120b8 <_start@@Base+0x58>
   120a0:	ldr	r2, [pc, #20]	; 120bc <_start@@Base+0x5c>
   120a4:	add	r3, pc, r3
   120a8:	ldr	r2, [r3, r2]
   120ac:	cmp	r2, #0
   120b0:	bxeq	lr
   120b4:	b	11f4c <__gmon_start__@plt>
   120b8:	andeq	r8, r1, r4, asr pc
   120bc:	andeq	r0, r0, r4, asr #1
   120c0:	ldr	r0, [pc, #24]	; 120e0 <_start@@Base+0x80>
   120c4:	ldr	r3, [pc, #24]	; 120e4 <_start@@Base+0x84>
   120c8:	cmp	r3, r0
   120cc:	bxeq	lr
   120d0:	ldr	r3, [pc, #16]	; 120e8 <_start@@Base+0x88>
   120d4:	cmp	r3, #0
   120d8:	bxeq	lr
   120dc:	bx	r3
   120e0:	ldrdeq	fp, [r2], -r8
   120e4:	ldrdeq	fp, [r2], -r8
   120e8:	andeq	r0, r0, r0
   120ec:	ldr	r0, [pc, #36]	; 12118 <_start@@Base+0xb8>
   120f0:	ldr	r1, [pc, #36]	; 1211c <_start@@Base+0xbc>
   120f4:	sub	r1, r1, r0
   120f8:	asr	r1, r1, #2
   120fc:	add	r1, r1, r1, lsr #31
   12100:	asrs	r1, r1, #1
   12104:	bxeq	lr
   12108:	ldr	r3, [pc, #16]	; 12120 <_start@@Base+0xc0>
   1210c:	cmp	r3, #0
   12110:	bxeq	lr
   12114:	bx	r3
   12118:	ldrdeq	fp, [r2], -r8
   1211c:	ldrdeq	fp, [r2], -r8
   12120:	andeq	r0, r0, r0
   12124:	push	{r4, lr}
   12128:	ldr	r4, [pc, #24]	; 12148 <_start@@Base+0xe8>
   1212c:	ldrb	r3, [r4]
   12130:	cmp	r3, #0
   12134:	popne	{r4, pc}
   12138:	bl	120c0 <_start@@Base+0x60>
   1213c:	mov	r3, #1
   12140:	strb	r3, [r4]
   12144:	pop	{r4, pc}
   12148:	andeq	fp, r2, r8, ror #1
   1214c:	b	120ec <_start@@Base+0x8c>

00012150 <next@@Base>:
   12150:	push	{r4, r6, r7, sl, fp, lr}
   12154:	add	fp, sp, #16
   12158:	movw	r1, #49032	; 0xbf88
   1215c:	movt	r1, #2
   12160:	str	r0, [r1]
   12164:	movw	r4, #45296	; 0xb0f0
   12168:	movt	r4, #2
   1216c:	ldrd	r2, [r4]
   12170:	adds	r2, r2, #1
   12174:	adc	r3, r3, #0
   12178:	strd	r2, [r4]
   1217c:	ldr	r2, [r1, #204]	; 0xcc
   12180:	cmp	r2, #49	; 0x31
   12184:	bhi	121a8 <next@@Base+0x58>
   12188:	ldrd	r6, [r4, #8]
   1218c:	adds	r6, r6, #1
   12190:	adc	r7, r7, #0
   12194:	strd	r6, [r4, #8]
   12198:	add	r2, r1, r2, lsl #2
   1219c:	str	r0, [r2, #4]
   121a0:	add	r2, r4, #24
   121a4:	b	121c8 <next@@Base+0x78>
   121a8:	ldrd	r2, [r4, #16]
   121ac:	adds	r2, r2, #1
   121b0:	ldr	r7, [r1, #212]	; 0xd4
   121b4:	add	r7, r7, #1
   121b8:	str	r7, [r1, #212]	; 0xd4
   121bc:	adc	r3, r3, #0
   121c0:	strd	r2, [r4, #16]
   121c4:	add	r2, r4, #32
   121c8:	ldrd	r6, [r2]
   121cc:	adds	r6, r6, #1
   121d0:	adc	r7, r7, #0
   121d4:	strd	r6, [r2]
   121d8:	ldr	r2, [r1, #204]	; 0xcc
   121dc:	add	r2, r2, #1
   121e0:	str	r2, [r1, #204]	; 0xcc
   121e4:	movw	r2, #49268	; 0xc074
   121e8:	movt	r2, #2
   121ec:	ldr	r3, [r2, #200]	; 0xc8
   121f0:	cmp	r3, #49	; 0x31
   121f4:	bhi	12224 <next@@Base+0xd4>
   121f8:	add	r7, r3, #1
   121fc:	str	r7, [r2, #200]	; 0xc8
   12200:	ldrd	r6, [r4, #40]	; 0x28
   12204:	adds	r6, r6, #1
   12208:	adc	r7, r7, #0
   1220c:	strd	r6, [r4, #40]	; 0x28
   12210:	movw	r7, #8528	; 0x2150
   12214:	movt	r7, #1
   12218:	str	r7, [r2, r3, lsl #2]
   1221c:	add	r2, r4, #56	; 0x38
   12220:	b	12228 <next@@Base+0xd8>
   12224:	add	r2, r4, #48	; 0x30
   12228:	ldrd	r6, [r2]
   1222c:	adds	r6, r6, #1
   12230:	adc	r7, r7, #0
   12234:	strd	r6, [r2]
   12238:	ldr	r2, [r1, #232]	; 0xe8
   1223c:	cmp	r2, #0
   12240:	beq	12280 <next@@Base+0x130>
   12244:	ldrd	r6, [r4, #64]	; 0x40
   12248:	adds	r6, r6, #1
   1224c:	adc	r7, r7, #0
   12250:	strd	r6, [r4, #64]	; 0x40
   12254:	blx	r2
   12258:	add	r2, r4, #80	; 0x50
   1225c:	ldrd	r6, [r2]
   12260:	adds	r6, r6, #1
   12264:	adc	r7, r7, #0
   12268:	strd	r6, [r2]
   1226c:	ldrd	r2, [r4, #144]	; 0x90
   12270:	adds	r2, r2, #1
   12274:	adc	r3, r3, #0
   12278:	strd	r2, [r4, #144]	; 0x90
   1227c:	pop	{r4, r6, r7, sl, fp, pc}
   12280:	ldr	r0, [r4, #72]	; 0x48
   12284:	ldr	r3, [r4, #76]	; 0x4c
   12288:	adds	r0, r0, #1
   1228c:	adc	r3, r3, #0
   12290:	str	r0, [r4, #72]	; 0x48
   12294:	str	r3, [r4, #76]	; 0x4c
   12298:	ldr	r0, [r1, #220]	; 0xdc
   1229c:	cmp	r0, #0
   122a0:	beq	122e8 <next@@Base+0x198>
   122a4:	ldrd	r2, [r4, #88]	; 0x58
   122a8:	adds	r2, r2, #1
   122ac:	adc	r3, r3, #0
   122b0:	strd	r2, [r4, #88]	; 0x58
   122b4:	ldr	r3, [r1, #224]	; 0xe0
   122b8:	ldr	r2, [r1, #228]	; 0xe4
   122bc:	cmp	r3, r0
   122c0:	bge	1230c <next@@Base+0x1bc>
   122c4:	add	r0, r3, #1
   122c8:	str	r0, [r1, #224]	; 0xe0
   122cc:	ldrd	r0, [r4, #104]	; 0x68
   122d0:	adds	r0, r0, #1
   122d4:	adc	r1, r1, #0
   122d8:	strd	r0, [r4, #104]	; 0x68
   122dc:	ldr	r0, [r2, r3, lsl #2]
   122e0:	add	r2, r4, #120	; 0x78
   122e4:	b	1225c <next@@Base+0x10c>
   122e8:	ldr	r0, [r4, #96]	; 0x60
   122ec:	ldr	r3, [r4, #100]	; 0x64
   122f0:	adds	r0, r0, #1
   122f4:	adc	r3, r3, #0
   122f8:	str	r0, [r4, #96]	; 0x60
   122fc:	str	r3, [r4, #100]	; 0x64
   12300:	add	r2, r4, #136	; 0x88
   12304:	ldr	r0, [r1, #216]	; 0xd8
   12308:	b	1225c <next@@Base+0x10c>
   1230c:	ldrd	r6, [r4, #112]	; 0x70
   12310:	adds	r6, r6, #1
   12314:	adc	r7, r7, #0
   12318:	strd	r6, [r4, #112]	; 0x70
   1231c:	add	r0, r2, r0, lsl #2
   12320:	ldr	r0, [r0, #-4]
   12324:	add	r2, r4, #128	; 0x80
   12328:	b	1225c <next@@Base+0x10c>

0001232c <next_reset@@Base>:
   1232c:	push	{r4, sl, fp, lr}
   12330:	add	fp, sp, #8
   12334:	movw	r0, #45448	; 0xb188
   12338:	movt	r0, #2
   1233c:	ldm	r0, {r1, r2, r3, r4}
   12340:	adds	r1, r1, #1
   12344:	adc	r2, r2, #0
   12348:	adds	r3, r3, #1
   1234c:	adc	r4, r4, #0
   12350:	stm	r0, {r1, r2, r3, r4}
   12354:	movw	r4, #49032	; 0xbf88
   12358:	movt	r4, #2
   1235c:	mov	r0, r4
   12360:	mov	r1, #0
   12364:	mov	r2, #236	; 0xec
   12368:	bl	11fb8 <memset@plt>
   1236c:	mov	r0, #50	; 0x32
   12370:	str	r0, [r4, #208]	; 0xd0
   12374:	pop	{r4, sl, fp, pc}

00012378 <push_back@@Base>:
   12378:	push	{r4, r6, r7, sl, fp, lr}
   1237c:	add	fp, sp, #16
   12380:	movw	r2, #48608	; 0xbde0
   12384:	movt	r2, #2
   12388:	str	r1, [r2, #204]	; 0xcc
   1238c:	str	r0, [r2]
   12390:	movw	r4, #45472	; 0xb1a0
   12394:	movt	r4, #2
   12398:	ldrd	r6, [r4]
   1239c:	adds	r6, r6, #1
   123a0:	adc	r7, r7, #0
   123a4:	strd	r6, [r4]
   123a8:	ldr	r3, [r2, #408]	; 0x198
   123ac:	cmp	r3, #49	; 0x31
   123b0:	bhi	123e0 <push_back@@Base+0x68>
   123b4:	ldrd	r6, [r4, #8]
   123b8:	adds	r6, r6, #1
   123bc:	adc	r7, r7, #0
   123c0:	strd	r6, [r4, #8]
   123c4:	add	r3, r2, r3, lsl #2
   123c8:	str	r0, [r3, #4]
   123cc:	ldr	r3, [r2, #408]	; 0x198
   123d0:	add	r3, r2, r3, lsl #2
   123d4:	str	r1, [r3, #208]	; 0xd0
   123d8:	add	r3, r4, #24
   123dc:	b	12400 <push_back@@Base+0x88>
   123e0:	ldrd	r6, [r4, #16]
   123e4:	adds	r6, r6, #1
   123e8:	ldr	r3, [r2, #416]	; 0x1a0
   123ec:	add	r3, r3, #1
   123f0:	str	r3, [r2, #416]	; 0x1a0
   123f4:	adc	r7, r7, #0
   123f8:	strd	r6, [r4, #16]
   123fc:	add	r3, r4, #32
   12400:	ldrd	r6, [r3]
   12404:	adds	r6, r6, #1
   12408:	adc	r7, r7, #0
   1240c:	strd	r6, [r3]
   12410:	ldr	r3, [r2, #408]	; 0x198
   12414:	add	r3, r3, #1
   12418:	str	r3, [r2, #408]	; 0x198
   1241c:	movw	ip, #49268	; 0xc074
   12420:	movt	ip, #2
   12424:	ldr	r3, [ip, #200]	; 0xc8
   12428:	cmp	r3, #49	; 0x31
   1242c:	bhi	1245c <push_back@@Base+0xe4>
   12430:	add	r7, r3, #1
   12434:	str	r7, [ip, #200]	; 0xc8
   12438:	ldrd	r6, [r4, #40]	; 0x28
   1243c:	adds	r6, r6, #1
   12440:	adc	r7, r7, #0
   12444:	strd	r6, [r4, #40]	; 0x28
   12448:	movw	r7, #9080	; 0x2378
   1244c:	movt	r7, #1
   12450:	str	r7, [ip, r3, lsl #2]
   12454:	add	r3, r4, #56	; 0x38
   12458:	b	12460 <push_back@@Base+0xe8>
   1245c:	add	r3, r4, #48	; 0x30
   12460:	ldrd	r6, [r3]
   12464:	adds	r6, r6, #1
   12468:	adc	r7, r7, #0
   1246c:	strd	r6, [r3]
   12470:	ldr	r2, [r2, #420]	; 0x1a4
   12474:	cmp	r2, #0
   12478:	beq	12498 <push_back@@Base+0x120>
   1247c:	ldrd	r6, [r4, #64]	; 0x40
   12480:	adds	r6, r6, #1
   12484:	adc	r7, r7, #0
   12488:	strd	r6, [r4, #64]	; 0x40
   1248c:	blx	r2
   12490:	add	r0, r4, #80	; 0x50
   12494:	b	1249c <push_back@@Base+0x124>
   12498:	add	r0, r4, #72	; 0x48
   1249c:	ldrd	r2, [r0]
   124a0:	adds	r2, r2, #1
   124a4:	adc	r3, r3, #0
   124a8:	strd	r2, [r0]
   124ac:	ldrd	r0, [r4, #88]	; 0x58
   124b0:	adds	r0, r0, #1
   124b4:	adc	r1, r1, #0
   124b8:	strd	r0, [r4, #88]	; 0x58
   124bc:	pop	{r4, r6, r7, sl, fp, pc}

000124c0 <push_back_reset@@Base>:
   124c0:	push	{r4, sl, fp, lr}
   124c4:	add	fp, sp, #8
   124c8:	movw	r0, #45568	; 0xb200
   124cc:	movt	r0, #2
   124d0:	ldm	r0, {r1, r2, r3, r4}
   124d4:	adds	r1, r1, #1
   124d8:	adc	r2, r2, #0
   124dc:	adds	r3, r3, #1
   124e0:	adc	r4, r4, #0
   124e4:	stm	r0, {r1, r2, r3, r4}
   124e8:	movw	r4, #48608	; 0xbde0
   124ec:	movt	r4, #2
   124f0:	mov	r0, r4
   124f4:	mov	r1, #0
   124f8:	mov	r2, #424	; 0x1a8
   124fc:	bl	11fb8 <memset@plt>
   12500:	mov	r0, #50	; 0x32
   12504:	str	r0, [r4, #412]	; 0x19c
   12508:	pop	{r4, sl, fp, pc}

0001250c <setup@@Base>:
   1250c:	push	{fp, lr}
   12510:	mov	fp, sp
   12514:	movw	r0, #45584	; 0xb210
   12518:	movt	r0, #2
   1251c:	ldm	r0, {r1, r2, r3, ip}
   12520:	adds	r1, r1, #1
   12524:	adc	r2, r2, #0
   12528:	adds	r3, r3, #1
   1252c:	adc	ip, ip, #0
   12530:	stm	r0, {r1, r2, r3, ip}
   12534:	bl	1232c <next_reset@@Base>
   12538:	pop	{fp, lr}
   1253c:	b	124c0 <push_back_reset@@Base>

00012540 <no_int_as_first_stuff@@Base>:
   12540:	push	{r4, r5, r6, r7, fp, lr}
   12544:	add	fp, sp, #16
   12548:	sub	sp, sp, #16
   1254c:	movw	r6, #45600	; 0xb220
   12550:	movt	r6, #2
   12554:	ldrd	r0, [r6]
   12558:	adds	r0, r0, #1
   1255c:	adc	r1, r1, #0
   12560:	strd	r0, [r6]
   12564:	mov	r4, sp
   12568:	add	r1, sp, #4
   1256c:	mov	r0, r4
   12570:	bl	15718 <init_grammar@@Base>
   12574:	mov	r0, #4
   12578:	bl	11f28 <malloc@plt>
   1257c:	mov	r5, r0
   12580:	bl	144bc <init_token_opar@@Base>
   12584:	movw	r7, #49032	; 0xbf88
   12588:	movt	r7, #2
   1258c:	str	r5, [r7, #216]	; 0xd8
   12590:	mov	r0, r4
   12594:	bl	157a4 <read_function_ast_node@@Base>
   12598:	ldr	r1, [r7, #204]	; 0xcc
   1259c:	cmp	r1, #1
   125a0:	bne	125e8 <no_int_as_first_stuff@@Base+0xa8>
   125a4:	ldrd	r2, [r6, #8]
   125a8:	adds	r2, r2, #1
   125ac:	adc	r3, r3, #0
   125b0:	strd	r2, [r6, #8]
   125b4:	cmp	r0, #0
   125b8:	bne	12618 <no_int_as_first_stuff@@Base+0xd8>
   125bc:	ldrd	r0, [r6, #24]
   125c0:	ldrd	r2, [r6, #40]	; 0x28
   125c4:	adds	r0, r0, #1
   125c8:	adc	r1, r1, #0
   125cc:	adds	r2, r2, #1
   125d0:	str	r2, [r6, #40]	; 0x28
   125d4:	strd	r0, [r6, #24]
   125d8:	adc	r0, r3, #0
   125dc:	str	r0, [r6, #44]	; 0x2c
   125e0:	sub	sp, fp, #16
   125e4:	pop	{r4, r5, r6, r7, fp, pc}
   125e8:	ldrd	r0, [r6, #16]
   125ec:	adds	r0, r0, #1
   125f0:	adc	r1, r1, #0
   125f4:	strd	r0, [r6, #16]
   125f8:	movw	r0, #38516	; 0x9674
   125fc:	movt	r0, #1
   12600:	movw	r1, #38542	; 0x968e
   12604:	movt	r1, #1
   12608:	movw	r3, #38610	; 0x96d2
   1260c:	movt	r3, #1
   12610:	mov	r2, #41	; 0x29
   12614:	bl	12054 <__assert_fail@plt>
   12618:	ldrd	r0, [r6, #32]
   1261c:	adds	r0, r0, #1
   12620:	adc	r1, r1, #0
   12624:	strd	r0, [r6, #32]
   12628:	movw	r0, #38639	; 0x96ef
   1262c:	movt	r0, #1
   12630:	movw	r1, #38542	; 0x968e
   12634:	movt	r1, #1
   12638:	movw	r3, #38610	; 0x96d2
   1263c:	movt	r3, #1
   12640:	mov	r2, #42	; 0x2a
   12644:	bl	12054 <__assert_fail@plt>

00012648 <int_but_not_followed_by_function@@Base>:
   12648:	push	{r4, r5, r6, r7, fp, lr}
   1264c:	add	fp, sp, #16
   12650:	sub	sp, sp, #16
   12654:	movw	r6, #45648	; 0xb250
   12658:	movt	r6, #2
   1265c:	ldrd	r0, [r6]
   12660:	adds	r0, r0, #1
   12664:	adc	r1, r1, #0
   12668:	strd	r0, [r6]
   1266c:	mov	r4, sp
   12670:	add	r1, sp, #4
   12674:	mov	r0, r4
   12678:	bl	15718 <init_grammar@@Base>
   1267c:	mov	r0, #8
   12680:	bl	11f28 <malloc@plt>
   12684:	mov	r5, r0
   12688:	mov	r0, #4
   1268c:	bl	11f28 <malloc@plt>
   12690:	str	r0, [r5]
   12694:	bl	14408 <init_token_int_type@@Base>
   12698:	mov	r0, #4
   1269c:	bl	11f28 <malloc@plt>
   126a0:	str	r0, [r5, #4]
   126a4:	bl	144bc <init_token_opar@@Base>
   126a8:	movw	r7, #49032	; 0xbf88
   126ac:	movt	r7, #2
   126b0:	mov	r0, #2
   126b4:	str	r0, [r7, #220]	; 0xdc
   126b8:	str	r5, [r7, #228]	; 0xe4
   126bc:	mov	r0, r4
   126c0:	bl	157a4 <read_function_ast_node@@Base>
   126c4:	ldr	r1, [r7, #204]	; 0xcc
   126c8:	cmp	r1, #2
   126cc:	bne	12714 <int_but_not_followed_by_function@@Base+0xcc>
   126d0:	ldrd	r2, [r6, #8]
   126d4:	adds	r2, r2, #1
   126d8:	adc	r3, r3, #0
   126dc:	strd	r2, [r6, #8]
   126e0:	cmp	r0, #0
   126e4:	bne	12744 <int_but_not_followed_by_function@@Base+0xfc>
   126e8:	ldrd	r0, [r6, #24]
   126ec:	ldrd	r2, [r6, #40]	; 0x28
   126f0:	adds	r0, r0, #1
   126f4:	adc	r1, r1, #0
   126f8:	adds	r2, r2, #1
   126fc:	str	r2, [r6, #40]	; 0x28
   12700:	strd	r0, [r6, #24]
   12704:	adc	r0, r3, #0
   12708:	str	r0, [r6, #44]	; 0x2c
   1270c:	sub	sp, fp, #16
   12710:	pop	{r4, r5, r6, r7, fp, pc}
   12714:	ldrd	r0, [r6, #16]
   12718:	adds	r0, r0, #1
   1271c:	adc	r1, r1, #0
   12720:	strd	r0, [r6, #16]
   12724:	movw	r0, #38651	; 0x96fb
   12728:	movt	r0, #1
   1272c:	movw	r1, #38542	; 0x968e
   12730:	movt	r1, #1
   12734:	movw	r3, #38677	; 0x9715
   12738:	movt	r3, #1
   1273c:	mov	r2, #67	; 0x43
   12740:	bl	12054 <__assert_fail@plt>
   12744:	ldrd	r0, [r6, #32]
   12748:	adds	r0, r0, #1
   1274c:	adc	r1, r1, #0
   12750:	strd	r0, [r6, #32]
   12754:	movw	r0, #38639	; 0x96ef
   12758:	movt	r0, #1
   1275c:	movw	r1, #38542	; 0x968e
   12760:	movt	r1, #1
   12764:	movw	r3, #38677	; 0x9715
   12768:	movt	r3, #1
   1276c:	mov	r2, #68	; 0x44
   12770:	bl	12054 <__assert_fail@plt>

00012774 <boolean_expression_is_read_properly@@Base>:
   12774:	push	{r4, r5, r6, r7, fp, lr}
   12778:	add	fp, sp, #16
   1277c:	sub	sp, sp, #16
   12780:	movw	r7, #45696	; 0xb280
   12784:	movt	r7, #2
   12788:	ldrd	r0, [r7]
   1278c:	adds	r0, r0, #1
   12790:	adc	r1, r1, #0
   12794:	strd	r0, [r7]
   12798:	mov	r0, #3
   1279c:	bl	11f28 <malloc@plt>
   127a0:	mov	r6, r0
   127a4:	mov	r0, #0
   127a8:	strb	r0, [r6, #2]
   127ac:	movw	r0, #15649	; 0x3d21
   127b0:	strh	r0, [r6]
   127b4:	mov	r4, sp
   127b8:	add	r1, sp, #4
   127bc:	mov	r0, r4
   127c0:	bl	15718 <init_grammar@@Base>
   127c4:	mov	r0, #20
   127c8:	bl	11f28 <malloc@plt>
   127cc:	mov	r5, r0
   127d0:	mov	r0, #8
   127d4:	bl	11f28 <malloc@plt>
   127d8:	str	r0, [r5]
   127dc:	mov	r1, #2
   127e0:	bl	1443c <init_token_int_value@@Base>
   127e4:	mov	r0, #8
   127e8:	bl	11f28 <malloc@plt>
   127ec:	str	r0, [r5, #4]
   127f0:	mov	r1, #2
   127f4:	bl	1443c <init_token_int_value@@Base>
   127f8:	mov	r0, #8
   127fc:	bl	11f28 <malloc@plt>
   12800:	str	r0, [r5, #8]
   12804:	mov	r1, r6
   12808:	bl	14690 <init_token_boolean_op@@Base>
   1280c:	mov	r0, #8
   12810:	bl	11f28 <malloc@plt>
   12814:	str	r0, [r5, #12]
   12818:	mov	r1, #1
   1281c:	bl	1443c <init_token_int_value@@Base>
   12820:	mov	r0, #4
   12824:	bl	11f28 <malloc@plt>
   12828:	str	r0, [r5, #16]
   1282c:	bl	144f0 <init_token_cpar@@Base>
   12830:	movw	r6, #49032	; 0xbf88
   12834:	movt	r6, #2
   12838:	mov	r0, #5
   1283c:	str	r0, [r6, #220]	; 0xdc
   12840:	str	r5, [r6, #228]	; 0xe4
   12844:	mov	r0, r4
   12848:	bl	15db8 <read_boolean_expression@@Base>
   1284c:	ldr	r1, [r6, #204]	; 0xcc
   12850:	cmp	r1, #5
   12854:	bne	128c4 <boolean_expression_is_read_properly@@Base+0x150>
   12858:	ldrd	r2, [r7, #8]
   1285c:	adds	r2, r2, #1
   12860:	adc	r3, r3, #0
   12864:	strd	r2, [r7, #8]
   12868:	movw	r1, #48608	; 0xbde0
   1286c:	movt	r1, #2
   12870:	ldr	r1, [r1, #408]	; 0x198
   12874:	cmp	r1, #1
   12878:	bne	128f4 <boolean_expression_is_read_properly@@Base+0x180>
   1287c:	ldrd	r2, [r7, #24]
   12880:	adds	r2, r2, #1
   12884:	adc	r3, r3, #0
   12888:	strd	r2, [r7, #24]
   1288c:	ldr	r0, [r0]
   12890:	cmp	r0, #5
   12894:	bne	12924 <boolean_expression_is_read_properly@@Base+0x1b0>
   12898:	ldrd	r0, [r7, #40]	; 0x28
   1289c:	ldrd	r2, [r7, #56]	; 0x38
   128a0:	adds	r0, r0, #1
   128a4:	adc	r1, r1, #0
   128a8:	adds	r2, r2, #1
   128ac:	str	r2, [r7, #56]	; 0x38
   128b0:	strd	r0, [r7, #40]	; 0x28
   128b4:	adc	r0, r3, #0
   128b8:	str	r0, [r7, #60]	; 0x3c
   128bc:	sub	sp, fp, #16
   128c0:	pop	{r4, r5, r6, r7, fp, pc}
   128c4:	ldrd	r0, [r7, #16]
   128c8:	adds	r0, r0, #1
   128cc:	adc	r1, r1, #0
   128d0:	strd	r0, [r7, #16]
   128d4:	movw	r0, #38717	; 0x973d
   128d8:	movt	r0, #1
   128dc:	movw	r1, #38542	; 0x968e
   128e0:	movt	r1, #1
   128e4:	movw	r3, #38743	; 0x9757
   128e8:	movt	r3, #1
   128ec:	mov	r2, #105	; 0x69
   128f0:	bl	12054 <__assert_fail@plt>
   128f4:	ldrd	r0, [r7, #32]
   128f8:	adds	r0, r0, #1
   128fc:	adc	r1, r1, #0
   12900:	strd	r0, [r7, #32]
   12904:	movw	r0, #38786	; 0x9782
   12908:	movt	r0, #1
   1290c:	movw	r1, #38542	; 0x968e
   12910:	movt	r1, #1
   12914:	movw	r3, #38743	; 0x9757
   12918:	movt	r3, #1
   1291c:	mov	r2, #106	; 0x6a
   12920:	bl	12054 <__assert_fail@plt>
   12924:	ldrd	r0, [r7, #48]	; 0x30
   12928:	adds	r0, r0, #1
   1292c:	adc	r1, r1, #0
   12930:	strd	r0, [r7, #48]	; 0x30
   12934:	movw	r0, #38817	; 0x97a1
   12938:	movt	r0, #1
   1293c:	movw	r1, #38542	; 0x968e
   12940:	movt	r1, #1
   12944:	movw	r3, #38743	; 0x9757
   12948:	movt	r3, #1
   1294c:	mov	r2, #107	; 0x6b
   12950:	bl	12054 <__assert_fail@plt>

00012954 <boolean_expression_complex@@Base>:
   12954:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12958:	add	fp, sp, #24
   1295c:	sub	sp, sp, #16
   12960:	movw	r9, #45760	; 0xb2c0
   12964:	movt	r9, #2
   12968:	ldrd	r0, [r9]
   1296c:	adds	r0, r0, #1
   12970:	adc	r1, r1, #0
   12974:	strd	r0, [r9]
   12978:	mov	r0, #3
   1297c:	bl	11f28 <malloc@plt>
   12980:	mov	r4, r0
   12984:	mov	r0, #3
   12988:	bl	11f28 <malloc@plt>
   1298c:	mov	r7, r0
   12990:	mov	r0, #3
   12994:	bl	11f28 <malloc@plt>
   12998:	mov	r6, r0
   1299c:	mov	r0, #0
   129a0:	strb	r0, [r4, #2]
   129a4:	movw	r1, #15676	; 0x3d3c
   129a8:	strh	r1, [r4]
   129ac:	strb	r0, [r7, #2]
   129b0:	movw	r1, #9766	; 0x2626
   129b4:	strh	r1, [r7]
   129b8:	strb	r0, [r6, #2]
   129bc:	movw	r0, #15677	; 0x3d3d
   129c0:	strh	r0, [r6]
   129c4:	mov	r8, sp
   129c8:	add	r1, sp, #4
   129cc:	mov	r0, r8
   129d0:	bl	15718 <init_grammar@@Base>
   129d4:	mov	r0, #40	; 0x28
   129d8:	bl	11f28 <malloc@plt>
   129dc:	mov	r5, r0
   129e0:	mov	r0, #8
   129e4:	bl	11f28 <malloc@plt>
   129e8:	str	r0, [r5]
   129ec:	mov	r1, #2
   129f0:	bl	1443c <init_token_int_value@@Base>
   129f4:	mov	r0, #8
   129f8:	bl	11f28 <malloc@plt>
   129fc:	str	r0, [r5, #4]
   12a00:	mov	r1, #2
   12a04:	bl	1443c <init_token_int_value@@Base>
   12a08:	mov	r0, #8
   12a0c:	bl	11f28 <malloc@plt>
   12a10:	str	r0, [r5, #8]
   12a14:	mov	r1, r4
   12a18:	bl	14690 <init_token_boolean_op@@Base>
   12a1c:	mov	r0, #8
   12a20:	bl	11f28 <malloc@plt>
   12a24:	str	r0, [r5, #12]
   12a28:	mov	r1, #1
   12a2c:	bl	1443c <init_token_int_value@@Base>
   12a30:	mov	r0, #8
   12a34:	bl	11f28 <malloc@plt>
   12a38:	str	r0, [r5, #16]
   12a3c:	mov	r1, r7
   12a40:	bl	14690 <init_token_boolean_op@@Base>
   12a44:	mov	r0, #8
   12a48:	bl	11f28 <malloc@plt>
   12a4c:	str	r0, [r5, #20]
   12a50:	mov	r1, #4
   12a54:	bl	1443c <init_token_int_value@@Base>
   12a58:	mov	r0, #8
   12a5c:	bl	11f28 <malloc@plt>
   12a60:	str	r0, [r5, #24]
   12a64:	mov	r1, #4
   12a68:	bl	1443c <init_token_int_value@@Base>
   12a6c:	mov	r0, #8
   12a70:	bl	11f28 <malloc@plt>
   12a74:	str	r0, [r5, #28]
   12a78:	mov	r1, r6
   12a7c:	bl	14690 <init_token_boolean_op@@Base>
   12a80:	mov	r0, #8
   12a84:	bl	11f28 <malloc@plt>
   12a88:	str	r0, [r5, #32]
   12a8c:	mov	r1, #4
   12a90:	bl	1443c <init_token_int_value@@Base>
   12a94:	mov	r0, #4
   12a98:	bl	11f28 <malloc@plt>
   12a9c:	str	r0, [r5, #36]	; 0x24
   12aa0:	bl	144f0 <init_token_cpar@@Base>
   12aa4:	movw	r4, #49032	; 0xbf88
   12aa8:	movt	r4, #2
   12aac:	mov	r0, #10
   12ab0:	str	r0, [r4, #220]	; 0xdc
   12ab4:	str	r5, [r4, #228]	; 0xe4
   12ab8:	mov	r0, r8
   12abc:	bl	15db8 <read_boolean_expression@@Base>
   12ac0:	ldr	r1, [r4, #204]	; 0xcc
   12ac4:	cmp	r1, #10
   12ac8:	bne	12b14 <boolean_expression_complex@@Base+0x1c0>
   12acc:	ldrd	r2, [r9, #8]
   12ad0:	adds	r2, r2, #1
   12ad4:	adc	r3, r3, #0
   12ad8:	strd	r2, [r9, #8]
   12adc:	ldr	r0, [r0]
   12ae0:	cmp	r0, #5
   12ae4:	bne	12b44 <boolean_expression_complex@@Base+0x1f0>
   12ae8:	ldrd	r0, [r9, #24]
   12aec:	ldrd	r2, [r9, #40]	; 0x28
   12af0:	adds	r0, r0, #1
   12af4:	adc	r1, r1, #0
   12af8:	adds	r2, r2, #1
   12afc:	str	r2, [r9, #40]	; 0x28
   12b00:	strd	r0, [r9, #24]
   12b04:	adc	r0, r3, #0
   12b08:	str	r0, [r9, #44]	; 0x2c
   12b0c:	sub	sp, fp, #24
   12b10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12b14:	ldrd	r0, [r9, #16]
   12b18:	adds	r0, r0, #1
   12b1c:	adc	r1, r1, #0
   12b20:	strd	r0, [r9, #16]
   12b24:	movw	r0, #38849	; 0x97c1
   12b28:	movt	r0, #1
   12b2c:	movw	r1, #38542	; 0x968e
   12b30:	movt	r1, #1
   12b34:	movw	r3, #38876	; 0x97dc
   12b38:	movt	r3, #1
   12b3c:	mov	r2, #166	; 0xa6
   12b40:	bl	12054 <__assert_fail@plt>
   12b44:	ldrd	r0, [r9, #32]
   12b48:	adds	r0, r0, #1
   12b4c:	adc	r1, r1, #0
   12b50:	strd	r0, [r9, #32]
   12b54:	movw	r0, #38817	; 0x97a1
   12b58:	movt	r0, #1
   12b5c:	movw	r1, #38542	; 0x968e
   12b60:	movt	r1, #1
   12b64:	movw	r3, #38876	; 0x97dc
   12b68:	movt	r3, #1
   12b6c:	mov	r2, #167	; 0xa7
   12b70:	bl	12054 <__assert_fail@plt>

00012b74 <boolean_binary_operator_is_read_properly@@Base>:
   12b74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12b78:	add	fp, sp, #24
   12b7c:	sub	sp, sp, #16
   12b80:	movw	r7, #45808	; 0xb2f0
   12b84:	movt	r7, #2
   12b88:	ldrd	r0, [r7]
   12b8c:	adds	r0, r0, #1
   12b90:	adc	r1, r1, #0
   12b94:	strd	r0, [r7]
   12b98:	mov	r8, #3
   12b9c:	mov	r0, #3
   12ba0:	bl	11f28 <malloc@plt>
   12ba4:	mov	r5, r0
   12ba8:	mov	r0, #0
   12bac:	strb	r0, [r5, #2]
   12bb0:	movw	r0, #15649	; 0x3d21
   12bb4:	strh	r0, [r5]
   12bb8:	mov	r4, sp
   12bbc:	add	r1, sp, #4
   12bc0:	mov	r0, r4
   12bc4:	bl	15718 <init_grammar@@Base>
   12bc8:	mov	r0, #12
   12bcc:	bl	11f28 <malloc@plt>
   12bd0:	mov	r6, r0
   12bd4:	mov	r0, #8
   12bd8:	bl	11f28 <malloc@plt>
   12bdc:	str	r0, [r6]
   12be0:	mov	r1, #2
   12be4:	bl	1443c <init_token_int_value@@Base>
   12be8:	mov	r0, #8
   12bec:	bl	11f28 <malloc@plt>
   12bf0:	str	r0, [r6, #4]
   12bf4:	mov	r1, r5
   12bf8:	bl	14690 <init_token_boolean_op@@Base>
   12bfc:	mov	r0, #8
   12c00:	bl	11f28 <malloc@plt>
   12c04:	str	r0, [r6, #8]
   12c08:	mov	r1, #1
   12c0c:	bl	1443c <init_token_int_value@@Base>
   12c10:	movw	r5, #49032	; 0xbf88
   12c14:	movt	r5, #2
   12c18:	str	r8, [r5, #220]	; 0xdc
   12c1c:	str	r6, [r5, #228]	; 0xe4
   12c20:	mov	r0, r4
   12c24:	bl	160b8 <read_boolean_binary_expression@@Base>
   12c28:	ldr	r1, [r5, #204]	; 0xcc
   12c2c:	cmp	r1, #3
   12c30:	bne	12cd8 <boolean_binary_operator_is_read_properly@@Base+0x164>
   12c34:	ldrd	r2, [r7, #8]
   12c38:	adds	r2, r2, #1
   12c3c:	adc	r3, r3, #0
   12c40:	strd	r2, [r7, #8]
   12c44:	ldr	r1, [r0]
   12c48:	cmp	r1, #5
   12c4c:	bne	12d08 <boolean_binary_operator_is_read_properly@@Base+0x194>
   12c50:	ldrd	r2, [r7, #24]
   12c54:	adds	r2, r2, #1
   12c58:	adc	r3, r3, #0
   12c5c:	strd	r2, [r7, #24]
   12c60:	ldr	r1, [r0, #8]
   12c64:	ldr	r1, [r1]
   12c68:	cmp	r1, #1
   12c6c:	bne	12d38 <boolean_binary_operator_is_read_properly@@Base+0x1c4>
   12c70:	ldrd	r2, [r7, #40]	; 0x28
   12c74:	adds	r2, r2, #1
   12c78:	adc	r3, r3, #0
   12c7c:	strd	r2, [r7, #40]	; 0x28
   12c80:	ldr	r1, [r0, #16]
   12c84:	cmp	r1, #1
   12c88:	bne	12d68 <boolean_binary_operator_is_read_properly@@Base+0x1f4>
   12c8c:	ldrd	r2, [r7, #56]	; 0x38
   12c90:	adds	r2, r2, #1
   12c94:	adc	r3, r3, #0
   12c98:	strd	r2, [r7, #56]	; 0x38
   12c9c:	ldr	r0, [r0, #12]
   12ca0:	ldr	r0, [r0]
   12ca4:	cmp	r0, #1
   12ca8:	bne	12d98 <boolean_binary_operator_is_read_properly@@Base+0x224>
   12cac:	ldrd	r0, [r7, #72]	; 0x48
   12cb0:	ldrd	r2, [r7, #88]	; 0x58
   12cb4:	adds	r0, r0, #1
   12cb8:	adc	r1, r1, #0
   12cbc:	adds	r2, r2, #1
   12cc0:	str	r2, [r7, #88]	; 0x58
   12cc4:	strd	r0, [r7, #72]	; 0x48
   12cc8:	adc	r0, r3, #0
   12ccc:	str	r0, [r7, #92]	; 0x5c
   12cd0:	sub	sp, fp, #24
   12cd4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12cd8:	ldrd	r0, [r7, #16]
   12cdc:	adds	r0, r0, #1
   12ce0:	adc	r1, r1, #0
   12ce4:	strd	r0, [r7, #16]
   12ce8:	movw	r0, #38910	; 0x97fe
   12cec:	movt	r0, #1
   12cf0:	movw	r1, #38542	; 0x968e
   12cf4:	movt	r1, #1
   12cf8:	movw	r3, #38936	; 0x9818
   12cfc:	movt	r3, #1
   12d00:	mov	r2, #200	; 0xc8
   12d04:	bl	12054 <__assert_fail@plt>
   12d08:	ldrd	r0, [r7, #32]
   12d0c:	adds	r0, r0, #1
   12d10:	adc	r1, r1, #0
   12d14:	strd	r0, [r7, #32]
   12d18:	movw	r0, #38817	; 0x97a1
   12d1c:	movt	r0, #1
   12d20:	movw	r1, #38542	; 0x968e
   12d24:	movt	r1, #1
   12d28:	movw	r3, #38936	; 0x9818
   12d2c:	movt	r3, #1
   12d30:	mov	r2, #201	; 0xc9
   12d34:	bl	12054 <__assert_fail@plt>
   12d38:	ldrd	r0, [r7, #48]	; 0x30
   12d3c:	adds	r0, r0, #1
   12d40:	adc	r1, r1, #0
   12d44:	strd	r0, [r7, #48]	; 0x30
   12d48:	movw	r0, #38984	; 0x9848
   12d4c:	movt	r0, #1
   12d50:	movw	r1, #38542	; 0x968e
   12d54:	movt	r1, #1
   12d58:	movw	r3, #38936	; 0x9818
   12d5c:	movt	r3, #1
   12d60:	mov	r2, #203	; 0xcb
   12d64:	bl	12054 <__assert_fail@plt>
   12d68:	ldrd	r0, [r7, #64]	; 0x40
   12d6c:	adds	r0, r0, #1
   12d70:	adc	r1, r1, #0
   12d74:	strd	r0, [r7, #64]	; 0x40
   12d78:	movw	r0, #39011	; 0x9863
   12d7c:	movt	r0, #1
   12d80:	movw	r1, #38542	; 0x968e
   12d84:	movt	r1, #1
   12d88:	movw	r3, #38936	; 0x9818
   12d8c:	movt	r3, #1
   12d90:	mov	r2, #204	; 0xcc
   12d94:	bl	12054 <__assert_fail@plt>
   12d98:	ldrd	r0, [r7, #80]	; 0x50
   12d9c:	adds	r0, r0, #1
   12da0:	adc	r1, r1, #0
   12da4:	strd	r0, [r7, #80]	; 0x50
   12da8:	movw	r0, #39036	; 0x987c
   12dac:	movt	r0, #1
   12db0:	movw	r1, #38542	; 0x968e
   12db4:	movt	r1, #1
   12db8:	movw	r3, #38936	; 0x9818
   12dbc:	movt	r3, #1
   12dc0:	mov	r2, #205	; 0xcd
   12dc4:	bl	12054 <__assert_fail@plt>

00012dc8 <boolean_unary_operator_is_read_properly@@Base>:
   12dc8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12dcc:	add	fp, sp, #24
   12dd0:	sub	sp, sp, #16
   12dd4:	movw	r7, #45904	; 0xb350
   12dd8:	movt	r7, #2
   12ddc:	ldrd	r0, [r7]
   12de0:	adds	r0, r0, #1
   12de4:	adc	r1, r1, #0
   12de8:	strd	r0, [r7]
   12dec:	mov	r8, #2
   12df0:	mov	r0, #2
   12df4:	bl	11f28 <malloc@plt>
   12df8:	mov	r5, r0
   12dfc:	mov	r0, #33	; 0x21
   12e00:	strh	r0, [r5]
   12e04:	mov	r4, sp
   12e08:	add	r1, sp, #4
   12e0c:	mov	r0, r4
   12e10:	bl	15718 <init_grammar@@Base>
   12e14:	mov	r0, #8
   12e18:	bl	11f28 <malloc@plt>
   12e1c:	mov	r6, r0
   12e20:	mov	r0, #8
   12e24:	bl	11f28 <malloc@plt>
   12e28:	str	r0, [r6]
   12e2c:	mov	r1, r5
   12e30:	bl	14690 <init_token_boolean_op@@Base>
   12e34:	mov	r0, #8
   12e38:	bl	11f28 <malloc@plt>
   12e3c:	str	r0, [r6, #4]
   12e40:	mov	r1, #1
   12e44:	bl	1443c <init_token_int_value@@Base>
   12e48:	movw	r5, #49032	; 0xbf88
   12e4c:	movt	r5, #2
   12e50:	str	r8, [r5, #220]	; 0xdc
   12e54:	str	r6, [r5, #228]	; 0xe4
   12e58:	mov	r0, r4
   12e5c:	bl	1628c <read_boolean_unary_expression@@Base>
   12e60:	ldr	r1, [r5, #204]	; 0xcc
   12e64:	cmp	r1, #2
   12e68:	bne	12f0c <boolean_unary_operator_is_read_properly@@Base+0x144>
   12e6c:	ldrd	r2, [r7, #8]
   12e70:	adds	r2, r2, #1
   12e74:	adc	r3, r3, #0
   12e78:	strd	r2, [r7, #8]
   12e7c:	ldr	r1, [r0]
   12e80:	cmp	r1, #5
   12e84:	bne	12f3c <boolean_unary_operator_is_read_properly@@Base+0x174>
   12e88:	ldrd	r2, [r7, #24]
   12e8c:	adds	r2, r2, #1
   12e90:	adc	r3, r3, #0
   12e94:	strd	r2, [r7, #24]
   12e98:	ldr	r1, [r0, #8]
   12e9c:	ldr	r1, [r1]
   12ea0:	cmp	r1, #1
   12ea4:	bne	12f6c <boolean_unary_operator_is_read_properly@@Base+0x1a4>
   12ea8:	ldrd	r2, [r7, #40]	; 0x28
   12eac:	adds	r2, r2, #1
   12eb0:	adc	r3, r3, #0
   12eb4:	strd	r2, [r7, #40]	; 0x28
   12eb8:	ldr	r1, [r0, #16]
   12ebc:	cmp	r1, #8
   12ec0:	bne	12f9c <boolean_unary_operator_is_read_properly@@Base+0x1d4>
   12ec4:	ldrd	r2, [r7, #56]	; 0x38
   12ec8:	adds	r2, r2, #1
   12ecc:	adc	r3, r3, #0
   12ed0:	strd	r2, [r7, #56]	; 0x38
   12ed4:	ldr	r0, [r0, #12]
   12ed8:	cmp	r0, #0
   12edc:	bne	12fcc <boolean_unary_operator_is_read_properly@@Base+0x204>
   12ee0:	ldrd	r0, [r7, #72]	; 0x48
   12ee4:	ldrd	r2, [r7, #88]	; 0x58
   12ee8:	adds	r0, r0, #1
   12eec:	adc	r1, r1, #0
   12ef0:	adds	r2, r2, #1
   12ef4:	str	r2, [r7, #88]	; 0x58
   12ef8:	strd	r0, [r7, #72]	; 0x48
   12efc:	adc	r0, r3, #0
   12f00:	str	r0, [r7, #92]	; 0x5c
   12f04:	sub	sp, fp, #24
   12f08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12f0c:	ldrd	r0, [r7, #16]
   12f10:	adds	r0, r0, #1
   12f14:	adc	r1, r1, #0
   12f18:	strd	r0, [r7, #16]
   12f1c:	movw	r0, #38651	; 0x96fb
   12f20:	movt	r0, #1
   12f24:	movw	r1, #38542	; 0x968e
   12f28:	movt	r1, #1
   12f2c:	movw	r3, #39064	; 0x9898
   12f30:	movt	r3, #1
   12f34:	mov	r2, #235	; 0xeb
   12f38:	bl	12054 <__assert_fail@plt>
   12f3c:	ldrd	r0, [r7, #32]
   12f40:	adds	r0, r0, #1
   12f44:	adc	r1, r1, #0
   12f48:	strd	r0, [r7, #32]
   12f4c:	movw	r0, #38817	; 0x97a1
   12f50:	movt	r0, #1
   12f54:	movw	r1, #38542	; 0x968e
   12f58:	movt	r1, #1
   12f5c:	movw	r3, #39064	; 0x9898
   12f60:	movt	r3, #1
   12f64:	mov	r2, #236	; 0xec
   12f68:	bl	12054 <__assert_fail@plt>
   12f6c:	ldrd	r0, [r7, #48]	; 0x30
   12f70:	adds	r0, r0, #1
   12f74:	adc	r1, r1, #0
   12f78:	strd	r0, [r7, #48]	; 0x30
   12f7c:	movw	r0, #38984	; 0x9848
   12f80:	movt	r0, #1
   12f84:	movw	r1, #38542	; 0x968e
   12f88:	movt	r1, #1
   12f8c:	movw	r3, #39064	; 0x9898
   12f90:	movt	r3, #1
   12f94:	mov	r2, #238	; 0xee
   12f98:	bl	12054 <__assert_fail@plt>
   12f9c:	ldrd	r0, [r7, #64]	; 0x40
   12fa0:	adds	r0, r0, #1
   12fa4:	adc	r1, r1, #0
   12fa8:	strd	r0, [r7, #64]	; 0x40
   12fac:	movw	r0, #39111	; 0x98c7
   12fb0:	movt	r0, #1
   12fb4:	movw	r1, #38542	; 0x968e
   12fb8:	movt	r1, #1
   12fbc:	movw	r3, #39064	; 0x9898
   12fc0:	movt	r3, #1
   12fc4:	mov	r2, #239	; 0xef
   12fc8:	bl	12054 <__assert_fail@plt>
   12fcc:	ldrd	r0, [r7, #80]	; 0x50
   12fd0:	adds	r0, r0, #1
   12fd4:	adc	r1, r1, #0
   12fd8:	strd	r0, [r7, #80]	; 0x50
   12fdc:	movw	r0, #39131	; 0x98db
   12fe0:	movt	r0, #1
   12fe4:	movw	r1, #38542	; 0x968e
   12fe8:	movt	r1, #1
   12fec:	movw	r3, #39064	; 0x9898
   12ff0:	movt	r3, #1
   12ff4:	mov	r2, #240	; 0xf0
   12ff8:	bl	12054 <__assert_fail@plt>

00012ffc <if_statement_only@@Base>:
   12ffc:	push	{r4, r5, r6, r7, fp, lr}
   13000:	add	fp, sp, #16
   13004:	sub	sp, sp, #16
   13008:	movw	r7, #46000	; 0xb3b0
   1300c:	movt	r7, #2
   13010:	ldrd	r0, [r7]
   13014:	adds	r0, r0, #1
   13018:	adc	r1, r1, #0
   1301c:	strd	r0, [r7]
   13020:	mov	r4, sp
   13024:	add	r1, sp, #4
   13028:	mov	r0, r4
   1302c:	bl	15718 <init_grammar@@Base>
   13030:	mov	r0, #3
   13034:	bl	11f28 <malloc@plt>
   13038:	mov	r6, r0
   1303c:	mov	r0, #0
   13040:	strb	r0, [r6, #2]
   13044:	movw	r0, #15649	; 0x3d21
   13048:	strh	r0, [r6]
   1304c:	mov	r0, #36	; 0x24
   13050:	bl	11f28 <malloc@plt>
   13054:	mov	r5, r0
   13058:	mov	r0, #4
   1305c:	bl	11f28 <malloc@plt>
   13060:	str	r0, [r5]
   13064:	bl	144bc <init_token_opar@@Base>
   13068:	mov	r0, #8
   1306c:	bl	11f28 <malloc@plt>
   13070:	str	r0, [r5, #4]
   13074:	mov	r1, #1
   13078:	bl	1443c <init_token_int_value@@Base>
   1307c:	mov	r0, #8
   13080:	bl	11f28 <malloc@plt>
   13084:	str	r0, [r5, #8]
   13088:	mov	r1, #1
   1308c:	bl	1443c <init_token_int_value@@Base>
   13090:	mov	r0, #8
   13094:	bl	11f28 <malloc@plt>
   13098:	str	r0, [r5, #12]
   1309c:	mov	r1, r6
   130a0:	bl	14690 <init_token_boolean_op@@Base>
   130a4:	mov	r0, #8
   130a8:	bl	11f28 <malloc@plt>
   130ac:	str	r0, [r5, #16]
   130b0:	mov	r1, #1
   130b4:	bl	1443c <init_token_int_value@@Base>
   130b8:	mov	r0, #4
   130bc:	bl	11f28 <malloc@plt>
   130c0:	str	r0, [r5, #20]
   130c4:	bl	144f0 <init_token_cpar@@Base>
   130c8:	mov	r0, #4
   130cc:	bl	11f28 <malloc@plt>
   130d0:	str	r0, [r5, #24]
   130d4:	bl	14524 <init_token_obra@@Base>
   130d8:	mov	r0, #4
   130dc:	bl	11f28 <malloc@plt>
   130e0:	str	r0, [r5, #28]
   130e4:	bl	14558 <init_token_cbra@@Base>
   130e8:	mov	r0, #4
   130ec:	bl	11f28 <malloc@plt>
   130f0:	str	r0, [r5, #32]
   130f4:	bl	145f4 <init_token_eof@@Base>
   130f8:	movw	r6, #49032	; 0xbf88
   130fc:	movt	r6, #2
   13100:	mov	r0, #9
   13104:	str	r0, [r6, #220]	; 0xdc
   13108:	str	r5, [r6, #228]	; 0xe4
   1310c:	mov	r0, r4
   13110:	bl	15c6c <read_if_statement@@Base>
   13114:	ldr	r1, [r6, #204]	; 0xcc
   13118:	cmp	r1, #9
   1311c:	bne	13180 <if_statement_only@@Base+0x184>
   13120:	ldrd	r2, [r7, #8]
   13124:	adds	r2, r2, #1
   13128:	adc	r3, r3, #0
   1312c:	strd	r2, [r7, #8]
   13130:	cmp	r0, #0
   13134:	beq	131b0 <if_statement_only@@Base+0x1b4>
   13138:	ldrd	r2, [r7, #24]
   1313c:	adds	r2, r2, #1
   13140:	adc	r3, r3, #0
   13144:	strd	r2, [r7, #24]
   13148:	ldr	r0, [r0]
   1314c:	cmp	r0, #4
   13150:	bne	131e0 <if_statement_only@@Base+0x1e4>
   13154:	ldrd	r0, [r7, #40]	; 0x28
   13158:	ldrd	r2, [r7, #56]	; 0x38
   1315c:	adds	r0, r0, #1
   13160:	adc	r1, r1, #0
   13164:	adds	r2, r2, #1
   13168:	str	r2, [r7, #56]	; 0x38
   1316c:	strd	r0, [r7, #40]	; 0x28
   13170:	adc	r0, r3, #0
   13174:	str	r0, [r7, #60]	; 0x3c
   13178:	sub	sp, fp, #16
   1317c:	pop	{r4, r5, r6, r7, fp, pc}
   13180:	ldrd	r0, [r7, #16]
   13184:	adds	r0, r0, #1
   13188:	adc	r1, r1, #0
   1318c:	strd	r0, [r7, #16]
   13190:	movw	r0, #39152	; 0x98f0
   13194:	movt	r0, #1
   13198:	movw	r1, #38542	; 0x968e
   1319c:	movt	r1, #1
   131a0:	movw	r3, #39178	; 0x990a
   131a4:	movt	r3, #1
   131a8:	movw	r2, #283	; 0x11b
   131ac:	bl	12054 <__assert_fail@plt>
   131b0:	ldrd	r0, [r7, #32]
   131b4:	adds	r0, r0, #1
   131b8:	adc	r1, r1, #0
   131bc:	strd	r0, [r7, #32]
   131c0:	movw	r0, #39203	; 0x9923
   131c4:	movt	r0, #1
   131c8:	movw	r1, #38542	; 0x968e
   131cc:	movt	r1, #1
   131d0:	movw	r3, #39178	; 0x990a
   131d4:	movt	r3, #1
   131d8:	mov	r2, #284	; 0x11c
   131dc:	bl	12054 <__assert_fail@plt>
   131e0:	ldrd	r0, [r7, #48]	; 0x30
   131e4:	adds	r0, r0, #1
   131e8:	adc	r1, r1, #0
   131ec:	strd	r0, [r7, #48]	; 0x30
   131f0:	movw	r0, #39215	; 0x992f
   131f4:	movt	r0, #1
   131f8:	movw	r1, #38542	; 0x968e
   131fc:	movt	r1, #1
   13200:	movw	r3, #39178	; 0x990a
   13204:	movt	r3, #1
   13208:	movw	r2, #285	; 0x11d
   1320c:	bl	12054 <__assert_fail@plt>

00013210 <if_else_statements@@Base>:
   13210:	push	{r4, r5, r6, r7, fp, lr}
   13214:	add	fp, sp, #16
   13218:	sub	sp, sp, #16
   1321c:	movw	r7, #46064	; 0xb3f0
   13220:	movt	r7, #2
   13224:	ldrd	r0, [r7]
   13228:	adds	r0, r0, #1
   1322c:	adc	r1, r1, #0
   13230:	strd	r0, [r7]
   13234:	mov	r4, sp
   13238:	add	r1, sp, #4
   1323c:	mov	r0, r4
   13240:	bl	15718 <init_grammar@@Base>
   13244:	mov	r0, #3
   13248:	bl	11f28 <malloc@plt>
   1324c:	mov	r6, r0
   13250:	mov	r0, #0
   13254:	strb	r0, [r6, #2]
   13258:	movw	r0, #15649	; 0x3d21
   1325c:	strh	r0, [r6]
   13260:	mov	r0, #44	; 0x2c
   13264:	bl	11f28 <malloc@plt>
   13268:	mov	r5, r0
   1326c:	mov	r0, #4
   13270:	bl	11f28 <malloc@plt>
   13274:	str	r0, [r5]
   13278:	bl	144bc <init_token_opar@@Base>
   1327c:	mov	r0, #8
   13280:	bl	11f28 <malloc@plt>
   13284:	str	r0, [r5, #4]
   13288:	mov	r1, #1
   1328c:	bl	1443c <init_token_int_value@@Base>
   13290:	mov	r0, #8
   13294:	bl	11f28 <malloc@plt>
   13298:	str	r0, [r5, #8]
   1329c:	mov	r1, #1
   132a0:	bl	1443c <init_token_int_value@@Base>
   132a4:	mov	r0, #8
   132a8:	bl	11f28 <malloc@plt>
   132ac:	str	r0, [r5, #12]
   132b0:	mov	r1, r6
   132b4:	bl	14690 <init_token_boolean_op@@Base>
   132b8:	mov	r0, #8
   132bc:	bl	11f28 <malloc@plt>
   132c0:	str	r0, [r5, #16]
   132c4:	mov	r1, #1
   132c8:	bl	1443c <init_token_int_value@@Base>
   132cc:	mov	r0, #4
   132d0:	bl	11f28 <malloc@plt>
   132d4:	str	r0, [r5, #20]
   132d8:	bl	144f0 <init_token_cpar@@Base>
   132dc:	mov	r0, #4
   132e0:	bl	11f28 <malloc@plt>
   132e4:	str	r0, [r5, #24]
   132e8:	bl	14524 <init_token_obra@@Base>
   132ec:	mov	r0, #4
   132f0:	bl	11f28 <malloc@plt>
   132f4:	str	r0, [r5, #28]
   132f8:	bl	14558 <init_token_cbra@@Base>
   132fc:	mov	r0, #4
   13300:	bl	11f28 <malloc@plt>
   13304:	str	r0, [r5, #32]
   13308:	bl	1465c <init_token_else@@Base>
   1330c:	mov	r0, #4
   13310:	bl	11f28 <malloc@plt>
   13314:	str	r0, [r5, #36]	; 0x24
   13318:	bl	14524 <init_token_obra@@Base>
   1331c:	mov	r0, #4
   13320:	bl	11f28 <malloc@plt>
   13324:	str	r0, [r5, #40]	; 0x28
   13328:	bl	14558 <init_token_cbra@@Base>
   1332c:	movw	r6, #49032	; 0xbf88
   13330:	movt	r6, #2
   13334:	mov	r0, #11
   13338:	str	r0, [r6, #220]	; 0xdc
   1333c:	str	r5, [r6, #228]	; 0xe4
   13340:	mov	r0, r4
   13344:	bl	15c6c <read_if_statement@@Base>
   13348:	ldr	r1, [r6, #204]	; 0xcc
   1334c:	cmp	r1, #11
   13350:	bne	133b4 <if_else_statements@@Base+0x1a4>
   13354:	ldrd	r2, [r7, #8]
   13358:	adds	r2, r2, #1
   1335c:	adc	r3, r3, #0
   13360:	strd	r2, [r7, #8]
   13364:	cmp	r0, #0
   13368:	beq	133e4 <if_else_statements@@Base+0x1d4>
   1336c:	ldrd	r2, [r7, #24]
   13370:	adds	r2, r2, #1
   13374:	adc	r3, r3, #0
   13378:	strd	r2, [r7, #24]
   1337c:	ldr	r0, [r0]
   13380:	cmp	r0, #4
   13384:	bne	13414 <if_else_statements@@Base+0x204>
   13388:	ldrd	r0, [r7, #40]	; 0x28
   1338c:	ldrd	r2, [r7, #56]	; 0x38
   13390:	adds	r0, r0, #1
   13394:	adc	r1, r1, #0
   13398:	adds	r2, r2, #1
   1339c:	str	r2, [r7, #56]	; 0x38
   133a0:	strd	r0, [r7, #40]	; 0x28
   133a4:	adc	r0, r3, #0
   133a8:	str	r0, [r7, #60]	; 0x3c
   133ac:	sub	sp, fp, #16
   133b0:	pop	{r4, r5, r6, r7, fp, pc}
   133b4:	ldrd	r0, [r7, #16]
   133b8:	adds	r0, r0, #1
   133bc:	adc	r1, r1, #0
   133c0:	strd	r0, [r7, #16]
   133c4:	movw	r0, #39233	; 0x9941
   133c8:	movt	r0, #1
   133cc:	movw	r1, #38542	; 0x968e
   133d0:	movt	r1, #1
   133d4:	movw	r3, #39260	; 0x995c
   133d8:	movt	r3, #1
   133dc:	mov	r2, #332	; 0x14c
   133e0:	bl	12054 <__assert_fail@plt>
   133e4:	ldrd	r0, [r7, #32]
   133e8:	adds	r0, r0, #1
   133ec:	adc	r1, r1, #0
   133f0:	strd	r0, [r7, #32]
   133f4:	movw	r0, #39203	; 0x9923
   133f8:	movt	r0, #1
   133fc:	movw	r1, #38542	; 0x968e
   13400:	movt	r1, #1
   13404:	movw	r3, #39260	; 0x995c
   13408:	movt	r3, #1
   1340c:	movw	r2, #333	; 0x14d
   13410:	bl	12054 <__assert_fail@plt>
   13414:	ldrd	r0, [r7, #48]	; 0x30
   13418:	adds	r0, r0, #1
   1341c:	adc	r1, r1, #0
   13420:	strd	r0, [r7, #48]	; 0x30
   13424:	movw	r0, #39215	; 0x992f
   13428:	movt	r0, #1
   1342c:	movw	r1, #38542	; 0x968e
   13430:	movt	r1, #1
   13434:	movw	r3, #39260	; 0x995c
   13438:	movt	r3, #1
   1343c:	movw	r2, #334	; 0x14e
   13440:	bl	12054 <__assert_fail@plt>

00013444 <body_with_two_returns@@Base>:
   13444:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13448:	add	fp, sp, #24
   1344c:	sub	sp, sp, #16
   13450:	movw	r6, #46128	; 0xb430
   13454:	movt	r6, #2
   13458:	ldrd	r0, [r6]
   1345c:	adds	r0, r0, #1
   13460:	adc	r1, r1, #0
   13464:	strd	r0, [r6]
   13468:	mov	r4, sp
   1346c:	add	r1, sp, #4
   13470:	mov	r0, r4
   13474:	bl	15718 <init_grammar@@Base>
   13478:	mov	r0, #32
   1347c:	bl	11f28 <malloc@plt>
   13480:	mov	r5, r0
   13484:	mov	r0, #4
   13488:	bl	11f28 <malloc@plt>
   1348c:	str	r0, [r5]
   13490:	bl	14524 <init_token_obra@@Base>
   13494:	mov	r0, #4
   13498:	bl	11f28 <malloc@plt>
   1349c:	str	r0, [r5, #4]
   134a0:	bl	1458c <init_token_return@@Base>
   134a4:	mov	r8, #8
   134a8:	mov	r0, #8
   134ac:	bl	11f28 <malloc@plt>
   134b0:	str	r0, [r5, #8]
   134b4:	mov	r1, #1
   134b8:	bl	1443c <init_token_int_value@@Base>
   134bc:	mov	r0, #4
   134c0:	bl	11f28 <malloc@plt>
   134c4:	str	r0, [r5, #12]
   134c8:	bl	145c0 <init_token_semicolon@@Base>
   134cc:	mov	r0, #4
   134d0:	bl	11f28 <malloc@plt>
   134d4:	str	r0, [r5, #16]
   134d8:	bl	1458c <init_token_return@@Base>
   134dc:	mov	r0, #8
   134e0:	bl	11f28 <malloc@plt>
   134e4:	str	r0, [r5, #20]
   134e8:	mov	r1, #1
   134ec:	bl	1443c <init_token_int_value@@Base>
   134f0:	mov	r0, #4
   134f4:	bl	11f28 <malloc@plt>
   134f8:	str	r0, [r5, #24]
   134fc:	bl	145c0 <init_token_semicolon@@Base>
   13500:	mov	r0, #4
   13504:	bl	11f28 <malloc@plt>
   13508:	str	r0, [r5, #28]
   1350c:	bl	14558 <init_token_cbra@@Base>
   13510:	movw	r7, #49032	; 0xbf88
   13514:	movt	r7, #2
   13518:	str	r8, [r7, #220]	; 0xdc
   1351c:	str	r5, [r7, #228]	; 0xe4
   13520:	mov	r0, r4
   13524:	bl	15924 <read_body@@Base>
   13528:	ldr	r1, [r7, #204]	; 0xcc
   1352c:	cmp	r1, #8
   13530:	bne	135d0 <body_with_two_returns@@Base+0x18c>
   13534:	ldrd	r2, [r6, #8]
   13538:	adds	r2, r2, #1
   1353c:	adc	r3, r3, #0
   13540:	strd	r2, [r6, #8]
   13544:	cmp	r0, #0
   13548:	beq	13600 <body_with_two_returns@@Base+0x1bc>
   1354c:	ldrd	r2, [r6, #24]
   13550:	adds	r2, r2, #1
   13554:	adc	r3, r3, #0
   13558:	strd	r2, [r6, #24]
   1355c:	ldr	r1, [r0]
   13560:	cmp	r1, #3
   13564:	bne	13630 <body_with_two_returns@@Base+0x1ec>
   13568:	ldrd	r2, [r6, #40]	; 0x28
   1356c:	adds	r2, r2, #1
   13570:	adc	r3, r3, #0
   13574:	strd	r2, [r6, #40]	; 0x28
   13578:	ldr	r0, [r0, #4]
   1357c:	ldr	r1, [r0]
   13580:	cmp	r1, #3
   13584:	bne	13660 <body_with_two_returns@@Base+0x21c>
   13588:	ldrd	r2, [r6, #56]	; 0x38
   1358c:	adds	r2, r2, #1
   13590:	adc	r3, r3, #0
   13594:	strd	r2, [r6, #56]	; 0x38
   13598:	ldr	r0, [r0, #4]
   1359c:	cmp	r0, #0
   135a0:	bne	13690 <body_with_two_returns@@Base+0x24c>
   135a4:	ldrd	r0, [r6, #72]	; 0x48
   135a8:	ldrd	r2, [r6, #88]	; 0x58
   135ac:	adds	r0, r0, #1
   135b0:	adc	r1, r1, #0
   135b4:	adds	r2, r2, #1
   135b8:	str	r2, [r6, #88]	; 0x58
   135bc:	strd	r0, [r6, #72]	; 0x48
   135c0:	adc	r0, r3, #0
   135c4:	str	r0, [r6, #92]	; 0x5c
   135c8:	sub	sp, fp, #24
   135cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   135d0:	ldrd	r0, [r6, #16]
   135d4:	adds	r0, r0, #1
   135d8:	adc	r1, r1, #0
   135dc:	strd	r0, [r6, #16]
   135e0:	movw	r0, #39286	; 0x9976
   135e4:	movt	r0, #1
   135e8:	movw	r1, #38542	; 0x968e
   135ec:	movt	r1, #1
   135f0:	movw	r3, #39312	; 0x9990
   135f4:	movt	r3, #1
   135f8:	movw	r2, #371	; 0x173
   135fc:	bl	12054 <__assert_fail@plt>
   13600:	ldrd	r0, [r6, #32]
   13604:	adds	r0, r0, #1
   13608:	adc	r1, r1, #0
   1360c:	strd	r0, [r6, #32]
   13610:	movw	r0, #39203	; 0x9923
   13614:	movt	r0, #1
   13618:	movw	r1, #38542	; 0x968e
   1361c:	movt	r1, #1
   13620:	movw	r3, #39312	; 0x9990
   13624:	movt	r3, #1
   13628:	mov	r2, #372	; 0x174
   1362c:	bl	12054 <__assert_fail@plt>
   13630:	ldrd	r0, [r6, #48]	; 0x30
   13634:	adds	r0, r0, #1
   13638:	adc	r1, r1, #0
   1363c:	strd	r0, [r6, #48]	; 0x30
   13640:	movw	r0, #39341	; 0x99ad
   13644:	movt	r0, #1
   13648:	movw	r1, #38542	; 0x968e
   1364c:	movt	r1, #1
   13650:	movw	r3, #39312	; 0x9990
   13654:	movt	r3, #1
   13658:	movw	r2, #373	; 0x175
   1365c:	bl	12054 <__assert_fail@plt>
   13660:	ldrd	r0, [r6, #64]	; 0x40
   13664:	adds	r0, r0, #1
   13668:	adc	r1, r1, #0
   1366c:	strd	r0, [r6, #64]	; 0x40
   13670:	movw	r0, #39363	; 0x99c3
   13674:	movt	r0, #1
   13678:	movw	r1, #38542	; 0x968e
   1367c:	movt	r1, #1
   13680:	movw	r3, #39312	; 0x9990
   13684:	movt	r3, #1
   13688:	movw	r2, #374	; 0x176
   1368c:	bl	12054 <__assert_fail@plt>
   13690:	ldrd	r0, [r6, #80]	; 0x50
   13694:	adds	r0, r0, #1
   13698:	adc	r1, r1, #0
   1369c:	strd	r0, [r6, #80]	; 0x50
   136a0:	movw	r0, #39391	; 0x99df
   136a4:	movt	r0, #1
   136a8:	movw	r1, #38542	; 0x968e
   136ac:	movt	r1, #1
   136b0:	movw	r3, #39312	; 0x9990
   136b4:	movt	r3, #1
   136b8:	movw	r2, #375	; 0x177
   136bc:	bl	12054 <__assert_fail@plt>

000136c0 <body_with_one_return@@Base>:
   136c0:	push	{r4, r5, r6, r7, fp, lr}
   136c4:	add	fp, sp, #16
   136c8:	sub	sp, sp, #16
   136cc:	movw	r6, #46224	; 0xb490
   136d0:	movt	r6, #2
   136d4:	ldrd	r0, [r6]
   136d8:	adds	r0, r0, #1
   136dc:	adc	r1, r1, #0
   136e0:	strd	r0, [r6]
   136e4:	mov	r4, sp
   136e8:	add	r1, sp, #4
   136ec:	mov	r0, r4
   136f0:	bl	15718 <init_grammar@@Base>
   136f4:	mov	r0, #20
   136f8:	bl	11f28 <malloc@plt>
   136fc:	mov	r5, r0
   13700:	mov	r0, #4
   13704:	bl	11f28 <malloc@plt>
   13708:	str	r0, [r5]
   1370c:	bl	14524 <init_token_obra@@Base>
   13710:	mov	r0, #4
   13714:	bl	11f28 <malloc@plt>
   13718:	str	r0, [r5, #4]
   1371c:	bl	1458c <init_token_return@@Base>
   13720:	mov	r0, #8
   13724:	bl	11f28 <malloc@plt>
   13728:	str	r0, [r5, #8]
   1372c:	mov	r1, #1
   13730:	bl	1443c <init_token_int_value@@Base>
   13734:	mov	r0, #4
   13738:	bl	11f28 <malloc@plt>
   1373c:	str	r0, [r5, #12]
   13740:	bl	145c0 <init_token_semicolon@@Base>
   13744:	mov	r0, #4
   13748:	bl	11f28 <malloc@plt>
   1374c:	str	r0, [r5, #16]
   13750:	bl	14558 <init_token_cbra@@Base>
   13754:	movw	r7, #49032	; 0xbf88
   13758:	movt	r7, #2
   1375c:	mov	r0, #5
   13760:	str	r0, [r7, #220]	; 0xdc
   13764:	str	r5, [r7, #228]	; 0xe4
   13768:	mov	r0, r4
   1376c:	bl	15924 <read_body@@Base>
   13770:	ldr	r1, [r7, #204]	; 0xcc
   13774:	cmp	r1, #5
   13778:	bne	137f8 <body_with_one_return@@Base+0x138>
   1377c:	ldrd	r2, [r6, #8]
   13780:	adds	r2, r2, #1
   13784:	adc	r3, r3, #0
   13788:	strd	r2, [r6, #8]
   1378c:	cmp	r0, #0
   13790:	beq	13828 <body_with_one_return@@Base+0x168>
   13794:	ldrd	r2, [r6, #24]
   13798:	adds	r2, r2, #1
   1379c:	adc	r3, r3, #0
   137a0:	strd	r2, [r6, #24]
   137a4:	ldr	r1, [r0]
   137a8:	cmp	r1, #3
   137ac:	bne	13858 <body_with_one_return@@Base+0x198>
   137b0:	ldrd	r2, [r6, #40]	; 0x28
   137b4:	adds	r2, r2, #1
   137b8:	adc	r3, r3, #0
   137bc:	strd	r2, [r6, #40]	; 0x28
   137c0:	ldr	r0, [r0, #4]
   137c4:	cmp	r0, #0
   137c8:	bne	13888 <body_with_one_return@@Base+0x1c8>
   137cc:	ldrd	r0, [r6, #56]	; 0x38
   137d0:	ldrd	r2, [r6, #72]	; 0x48
   137d4:	adds	r0, r0, #1
   137d8:	adc	r1, r1, #0
   137dc:	adds	r2, r2, #1
   137e0:	str	r2, [r6, #72]	; 0x48
   137e4:	strd	r0, [r6, #56]	; 0x38
   137e8:	adc	r0, r3, #0
   137ec:	str	r0, [r6, #76]	; 0x4c
   137f0:	sub	sp, fp, #16
   137f4:	pop	{r4, r5, r6, r7, fp, pc}
   137f8:	ldrd	r0, [r6, #16]
   137fc:	adds	r0, r0, #1
   13800:	adc	r1, r1, #0
   13804:	strd	r0, [r6, #16]
   13808:	movw	r0, #38717	; 0x973d
   1380c:	movt	r0, #1
   13810:	movw	r1, #38542	; 0x968e
   13814:	movt	r1, #1
   13818:	movw	r3, #39415	; 0x99f7
   1381c:	movt	r3, #1
   13820:	movw	r2, #406	; 0x196
   13824:	bl	12054 <__assert_fail@plt>
   13828:	ldrd	r0, [r6, #32]
   1382c:	adds	r0, r0, #1
   13830:	adc	r1, r1, #0
   13834:	strd	r0, [r6, #32]
   13838:	movw	r0, #39203	; 0x9923
   1383c:	movt	r0, #1
   13840:	movw	r1, #38542	; 0x968e
   13844:	movt	r1, #1
   13848:	movw	r3, #39415	; 0x99f7
   1384c:	movt	r3, #1
   13850:	movw	r2, #407	; 0x197
   13854:	bl	12054 <__assert_fail@plt>
   13858:	ldrd	r0, [r6, #48]	; 0x30
   1385c:	adds	r0, r0, #1
   13860:	adc	r1, r1, #0
   13864:	strd	r0, [r6, #48]	; 0x30
   13868:	movw	r0, #39341	; 0x99ad
   1386c:	movt	r0, #1
   13870:	movw	r1, #38542	; 0x968e
   13874:	movt	r1, #1
   13878:	movw	r3, #39415	; 0x99f7
   1387c:	movt	r3, #1
   13880:	mov	r2, #408	; 0x198
   13884:	bl	12054 <__assert_fail@plt>
   13888:	ldrd	r0, [r6, #64]	; 0x40
   1388c:	adds	r0, r0, #1
   13890:	adc	r1, r1, #0
   13894:	strd	r0, [r6, #64]	; 0x40
   13898:	movw	r0, #39443	; 0x9a13
   1389c:	movt	r0, #1
   138a0:	movw	r1, #38542	; 0x968e
   138a4:	movt	r1, #1
   138a8:	movw	r3, #39415	; 0x99f7
   138ac:	movt	r3, #1
   138b0:	movw	r2, #409	; 0x199
   138b4:	bl	12054 <__assert_fail@plt>

000138b8 <if_statement_inside_if_statement@@Base>:
   138b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   138bc:	add	fp, sp, #24
   138c0:	sub	sp, sp, #16
   138c4:	movw	r4, #46304	; 0xb4e0
   138c8:	movt	r4, #2
   138cc:	ldrd	r0, [r4]
   138d0:	adds	r0, r0, #1
   138d4:	adc	r1, r1, #0
   138d8:	strd	r0, [r4]
   138dc:	mov	r8, sp
   138e0:	add	r1, sp, #4
   138e4:	mov	r0, r8
   138e8:	bl	15718 <init_grammar@@Base>
   138ec:	mov	r0, #3
   138f0:	bl	11f28 <malloc@plt>
   138f4:	mov	r7, r0
   138f8:	mov	r0, #3
   138fc:	bl	11f28 <malloc@plt>
   13900:	mov	r6, r0
   13904:	mov	r0, #0
   13908:	strb	r0, [r7, #2]
   1390c:	movw	r1, #15649	; 0x3d21
   13910:	strh	r1, [r7]
   13914:	strb	r0, [r6, #2]
   13918:	strh	r1, [r6]
   1391c:	mov	r0, #76	; 0x4c
   13920:	bl	11f28 <malloc@plt>
   13924:	mov	r5, r0
   13928:	mov	r0, #4
   1392c:	bl	11f28 <malloc@plt>
   13930:	str	r0, [r5]
   13934:	bl	144bc <init_token_opar@@Base>
   13938:	mov	r0, #8
   1393c:	bl	11f28 <malloc@plt>
   13940:	str	r0, [r5, #4]
   13944:	mov	r1, #1
   13948:	bl	1443c <init_token_int_value@@Base>
   1394c:	mov	r0, #8
   13950:	bl	11f28 <malloc@plt>
   13954:	str	r0, [r5, #8]
   13958:	mov	r1, #1
   1395c:	bl	1443c <init_token_int_value@@Base>
   13960:	mov	r0, #8
   13964:	bl	11f28 <malloc@plt>
   13968:	str	r0, [r5, #12]
   1396c:	mov	r1, r7
   13970:	bl	14690 <init_token_boolean_op@@Base>
   13974:	mov	r0, #8
   13978:	bl	11f28 <malloc@plt>
   1397c:	str	r0, [r5, #16]
   13980:	mov	r1, #1
   13984:	bl	1443c <init_token_int_value@@Base>
   13988:	mov	r0, #4
   1398c:	bl	11f28 <malloc@plt>
   13990:	str	r0, [r5, #20]
   13994:	bl	144f0 <init_token_cpar@@Base>
   13998:	mov	r0, #4
   1399c:	bl	11f28 <malloc@plt>
   139a0:	str	r0, [r5, #24]
   139a4:	bl	14524 <init_token_obra@@Base>
   139a8:	mov	r0, #4
   139ac:	bl	11f28 <malloc@plt>
   139b0:	str	r0, [r5, #28]
   139b4:	bl	14628 <init_token_if@@Base>
   139b8:	mov	r0, #4
   139bc:	bl	11f28 <malloc@plt>
   139c0:	str	r0, [r5, #32]
   139c4:	bl	144bc <init_token_opar@@Base>
   139c8:	mov	r0, #8
   139cc:	bl	11f28 <malloc@plt>
   139d0:	str	r0, [r5, #36]	; 0x24
   139d4:	mov	r1, #1
   139d8:	bl	1443c <init_token_int_value@@Base>
   139dc:	mov	r0, #8
   139e0:	bl	11f28 <malloc@plt>
   139e4:	str	r0, [r5, #40]	; 0x28
   139e8:	mov	r1, #1
   139ec:	bl	1443c <init_token_int_value@@Base>
   139f0:	mov	r0, #8
   139f4:	bl	11f28 <malloc@plt>
   139f8:	str	r0, [r5, #44]	; 0x2c
   139fc:	mov	r1, r6
   13a00:	bl	14690 <init_token_boolean_op@@Base>
   13a04:	mov	r0, #8
   13a08:	bl	11f28 <malloc@plt>
   13a0c:	str	r0, [r5, #48]	; 0x30
   13a10:	mov	r1, #1
   13a14:	bl	1443c <init_token_int_value@@Base>
   13a18:	mov	r0, #4
   13a1c:	bl	11f28 <malloc@plt>
   13a20:	str	r0, [r5, #52]	; 0x34
   13a24:	bl	144f0 <init_token_cpar@@Base>
   13a28:	mov	r0, #4
   13a2c:	bl	11f28 <malloc@plt>
   13a30:	str	r0, [r5, #56]	; 0x38
   13a34:	bl	14524 <init_token_obra@@Base>
   13a38:	mov	r0, #4
   13a3c:	bl	11f28 <malloc@plt>
   13a40:	str	r0, [r5, #60]	; 0x3c
   13a44:	bl	14558 <init_token_cbra@@Base>
   13a48:	mov	r0, #4
   13a4c:	bl	11f28 <malloc@plt>
   13a50:	str	r0, [r5, #64]	; 0x40
   13a54:	bl	14558 <init_token_cbra@@Base>
   13a58:	mov	r0, #4
   13a5c:	bl	11f28 <malloc@plt>
   13a60:	str	r0, [r5, #68]	; 0x44
   13a64:	bl	14558 <init_token_cbra@@Base>
   13a68:	mov	r0, #4
   13a6c:	bl	11f28 <malloc@plt>
   13a70:	str	r0, [r5, #72]	; 0x48
   13a74:	bl	145f4 <init_token_eof@@Base>
   13a78:	movw	r6, #49032	; 0xbf88
   13a7c:	movt	r6, #2
   13a80:	mov	r0, #19
   13a84:	str	r0, [r6, #220]	; 0xdc
   13a88:	str	r5, [r6, #228]	; 0xe4
   13a8c:	mov	r0, r8
   13a90:	bl	15c6c <read_if_statement@@Base>
   13a94:	ldr	r1, [r6, #204]	; 0xcc
   13a98:	cmp	r1, #19
   13a9c:	bne	13b00 <if_statement_inside_if_statement@@Base+0x248>
   13aa0:	ldrd	r2, [r4, #8]
   13aa4:	adds	r2, r2, #1
   13aa8:	adc	r3, r3, #0
   13aac:	strd	r2, [r4, #8]
   13ab0:	cmp	r0, #0
   13ab4:	beq	13b30 <if_statement_inside_if_statement@@Base+0x278>
   13ab8:	ldrd	r2, [r4, #24]
   13abc:	adds	r2, r2, #1
   13ac0:	adc	r3, r3, #0
   13ac4:	strd	r2, [r4, #24]
   13ac8:	ldr	r0, [r0]
   13acc:	cmp	r0, #4
   13ad0:	bne	13b60 <if_statement_inside_if_statement@@Base+0x2a8>
   13ad4:	ldrd	r0, [r4, #40]	; 0x28
   13ad8:	ldrd	r2, [r4, #56]	; 0x38
   13adc:	adds	r0, r0, #1
   13ae0:	adc	r1, r1, #0
   13ae4:	adds	r2, r2, #1
   13ae8:	str	r2, [r4, #56]	; 0x38
   13aec:	strd	r0, [r4, #40]	; 0x28
   13af0:	adc	r0, r3, #0
   13af4:	str	r0, [r4, #60]	; 0x3c
   13af8:	sub	sp, fp, #24
   13afc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b00:	ldrd	r0, [r4, #16]
   13b04:	adds	r0, r0, #1
   13b08:	adc	r1, r1, #0
   13b0c:	strd	r0, [r4, #16]
   13b10:	movw	r0, #39461	; 0x9a25
   13b14:	movt	r0, #1
   13b18:	movw	r1, #38542	; 0x968e
   13b1c:	movt	r1, #1
   13b20:	movw	r3, #39488	; 0x9a40
   13b24:	movt	r3, #1
   13b28:	mov	r2, #480	; 0x1e0
   13b2c:	bl	12054 <__assert_fail@plt>
   13b30:	ldrd	r0, [r4, #32]
   13b34:	adds	r0, r0, #1
   13b38:	adc	r1, r1, #0
   13b3c:	strd	r0, [r4, #32]
   13b40:	movw	r0, #39203	; 0x9923
   13b44:	movt	r0, #1
   13b48:	movw	r1, #38542	; 0x968e
   13b4c:	movt	r1, #1
   13b50:	movw	r3, #39488	; 0x9a40
   13b54:	movt	r3, #1
   13b58:	movw	r2, #481	; 0x1e1
   13b5c:	bl	12054 <__assert_fail@plt>
   13b60:	ldrd	r0, [r4, #48]	; 0x30
   13b64:	adds	r0, r0, #1
   13b68:	adc	r1, r1, #0
   13b6c:	strd	r0, [r4, #48]	; 0x30
   13b70:	movw	r0, #39215	; 0x992f
   13b74:	movt	r0, #1
   13b78:	movw	r1, #38542	; 0x968e
   13b7c:	movt	r1, #1
   13b80:	movw	r3, #39488	; 0x9a40
   13b84:	movt	r3, #1
   13b88:	movw	r2, #482	; 0x1e2
   13b8c:	bl	12054 <__assert_fail@plt>

00013b90 <if_statement_inside_else_statement@@Base>:
   13b90:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b94:	add	fp, sp, #24
   13b98:	sub	sp, sp, #16
   13b9c:	movw	r4, #46368	; 0xb520
   13ba0:	movt	r4, #2
   13ba4:	ldrd	r0, [r4]
   13ba8:	adds	r0, r0, #1
   13bac:	adc	r1, r1, #0
   13bb0:	strd	r0, [r4]
   13bb4:	mov	r8, sp
   13bb8:	add	r1, sp, #4
   13bbc:	mov	r0, r8
   13bc0:	bl	15718 <init_grammar@@Base>
   13bc4:	mov	r0, #3
   13bc8:	bl	11f28 <malloc@plt>
   13bcc:	mov	r7, r0
   13bd0:	mov	r0, #3
   13bd4:	bl	11f28 <malloc@plt>
   13bd8:	mov	r6, r0
   13bdc:	mov	r0, #0
   13be0:	strb	r0, [r7, #2]
   13be4:	movw	r1, #15649	; 0x3d21
   13be8:	strh	r1, [r7]
   13bec:	strb	r0, [r6, #2]
   13bf0:	strh	r1, [r6]
   13bf4:	mov	r0, #84	; 0x54
   13bf8:	bl	11f28 <malloc@plt>
   13bfc:	mov	r5, r0
   13c00:	mov	r0, #4
   13c04:	bl	11f28 <malloc@plt>
   13c08:	str	r0, [r5]
   13c0c:	bl	144bc <init_token_opar@@Base>
   13c10:	mov	r0, #8
   13c14:	bl	11f28 <malloc@plt>
   13c18:	str	r0, [r5, #4]
   13c1c:	mov	r1, #1
   13c20:	bl	1443c <init_token_int_value@@Base>
   13c24:	mov	r0, #8
   13c28:	bl	11f28 <malloc@plt>
   13c2c:	str	r0, [r5, #8]
   13c30:	mov	r1, #1
   13c34:	bl	1443c <init_token_int_value@@Base>
   13c38:	mov	r0, #8
   13c3c:	bl	11f28 <malloc@plt>
   13c40:	str	r0, [r5, #12]
   13c44:	mov	r1, r7
   13c48:	bl	14690 <init_token_boolean_op@@Base>
   13c4c:	mov	r0, #8
   13c50:	bl	11f28 <malloc@plt>
   13c54:	str	r0, [r5, #16]
   13c58:	mov	r1, #1
   13c5c:	bl	1443c <init_token_int_value@@Base>
   13c60:	mov	r0, #4
   13c64:	bl	11f28 <malloc@plt>
   13c68:	str	r0, [r5, #20]
   13c6c:	bl	144f0 <init_token_cpar@@Base>
   13c70:	mov	r0, #4
   13c74:	bl	11f28 <malloc@plt>
   13c78:	str	r0, [r5, #24]
   13c7c:	bl	14524 <init_token_obra@@Base>
   13c80:	mov	r0, #4
   13c84:	bl	11f28 <malloc@plt>
   13c88:	str	r0, [r5, #28]
   13c8c:	bl	14558 <init_token_cbra@@Base>
   13c90:	mov	r0, #4
   13c94:	bl	11f28 <malloc@plt>
   13c98:	str	r0, [r5, #32]
   13c9c:	bl	1465c <init_token_else@@Base>
   13ca0:	mov	r0, #4
   13ca4:	bl	11f28 <malloc@plt>
   13ca8:	str	r0, [r5, #36]	; 0x24
   13cac:	bl	14524 <init_token_obra@@Base>
   13cb0:	mov	r0, #4
   13cb4:	bl	11f28 <malloc@plt>
   13cb8:	str	r0, [r5, #40]	; 0x28
   13cbc:	bl	14628 <init_token_if@@Base>
   13cc0:	mov	r0, #4
   13cc4:	bl	11f28 <malloc@plt>
   13cc8:	str	r0, [r5, #44]	; 0x2c
   13ccc:	bl	144bc <init_token_opar@@Base>
   13cd0:	mov	r0, #8
   13cd4:	bl	11f28 <malloc@plt>
   13cd8:	str	r0, [r5, #48]	; 0x30
   13cdc:	mov	r1, #1
   13ce0:	bl	1443c <init_token_int_value@@Base>
   13ce4:	mov	r0, #8
   13ce8:	bl	11f28 <malloc@plt>
   13cec:	str	r0, [r5, #52]	; 0x34
   13cf0:	mov	r1, #1
   13cf4:	bl	1443c <init_token_int_value@@Base>
   13cf8:	mov	r0, #8
   13cfc:	bl	11f28 <malloc@plt>
   13d00:	str	r0, [r5, #56]	; 0x38
   13d04:	mov	r1, r6
   13d08:	bl	14690 <init_token_boolean_op@@Base>
   13d0c:	mov	r0, #8
   13d10:	bl	11f28 <malloc@plt>
   13d14:	str	r0, [r5, #60]	; 0x3c
   13d18:	mov	r1, #1
   13d1c:	bl	1443c <init_token_int_value@@Base>
   13d20:	mov	r0, #4
   13d24:	bl	11f28 <malloc@plt>
   13d28:	str	r0, [r5, #64]	; 0x40
   13d2c:	bl	144f0 <init_token_cpar@@Base>
   13d30:	mov	r0, #4
   13d34:	bl	11f28 <malloc@plt>
   13d38:	str	r0, [r5, #68]	; 0x44
   13d3c:	bl	14524 <init_token_obra@@Base>
   13d40:	mov	r0, #4
   13d44:	bl	11f28 <malloc@plt>
   13d48:	str	r0, [r5, #72]	; 0x48
   13d4c:	bl	14558 <init_token_cbra@@Base>
   13d50:	mov	r0, #4
   13d54:	bl	11f28 <malloc@plt>
   13d58:	str	r0, [r5, #76]	; 0x4c
   13d5c:	bl	14558 <init_token_cbra@@Base>
   13d60:	mov	r0, #4
   13d64:	bl	11f28 <malloc@plt>
   13d68:	str	r0, [r5, #80]	; 0x50
   13d6c:	bl	14558 <init_token_cbra@@Base>
   13d70:	movw	r6, #49032	; 0xbf88
   13d74:	movt	r6, #2
   13d78:	mov	r0, #21
   13d7c:	str	r0, [r6, #220]	; 0xdc
   13d80:	str	r5, [r6, #228]	; 0xe4
   13d84:	mov	r0, r8
   13d88:	bl	15c6c <read_if_statement@@Base>
   13d8c:	ldr	r1, [r6, #204]	; 0xcc
   13d90:	cmp	r1, #21
   13d94:	bne	13df8 <if_statement_inside_else_statement@@Base+0x268>
   13d98:	ldrd	r2, [r4, #8]
   13d9c:	adds	r2, r2, #1
   13da0:	adc	r3, r3, #0
   13da4:	strd	r2, [r4, #8]
   13da8:	cmp	r0, #0
   13dac:	beq	13e28 <if_statement_inside_else_statement@@Base+0x298>
   13db0:	ldrd	r2, [r4, #24]
   13db4:	adds	r2, r2, #1
   13db8:	adc	r3, r3, #0
   13dbc:	strd	r2, [r4, #24]
   13dc0:	ldr	r0, [r0]
   13dc4:	cmp	r0, #4
   13dc8:	bne	13e58 <if_statement_inside_else_statement@@Base+0x2c8>
   13dcc:	ldrd	r0, [r4, #40]	; 0x28
   13dd0:	ldrd	r2, [r4, #56]	; 0x38
   13dd4:	adds	r0, r0, #1
   13dd8:	adc	r1, r1, #0
   13ddc:	adds	r2, r2, #1
   13de0:	str	r2, [r4, #56]	; 0x38
   13de4:	strd	r0, [r4, #40]	; 0x28
   13de8:	adc	r0, r3, #0
   13dec:	str	r0, [r4, #60]	; 0x3c
   13df0:	sub	sp, fp, #24
   13df4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13df8:	ldrd	r0, [r4, #16]
   13dfc:	adds	r0, r0, #1
   13e00:	adc	r1, r1, #0
   13e04:	strd	r0, [r4, #16]
   13e08:	movw	r0, #39528	; 0x9a68
   13e0c:	movt	r0, #1
   13e10:	movw	r1, #38542	; 0x968e
   13e14:	movt	r1, #1
   13e18:	movw	r3, #39555	; 0x9a83
   13e1c:	movt	r3, #1
   13e20:	movw	r2, #558	; 0x22e
   13e24:	bl	12054 <__assert_fail@plt>
   13e28:	ldrd	r0, [r4, #32]
   13e2c:	adds	r0, r0, #1
   13e30:	adc	r1, r1, #0
   13e34:	strd	r0, [r4, #32]
   13e38:	movw	r0, #39203	; 0x9923
   13e3c:	movt	r0, #1
   13e40:	movw	r1, #38542	; 0x968e
   13e44:	movt	r1, #1
   13e48:	movw	r3, #39555	; 0x9a83
   13e4c:	movt	r3, #1
   13e50:	movw	r2, #559	; 0x22f
   13e54:	bl	12054 <__assert_fail@plt>
   13e58:	ldrd	r0, [r4, #48]	; 0x30
   13e5c:	adds	r0, r0, #1
   13e60:	adc	r1, r1, #0
   13e64:	strd	r0, [r4, #48]	; 0x30
   13e68:	movw	r0, #39215	; 0x992f
   13e6c:	movt	r0, #1
   13e70:	movw	r1, #38542	; 0x968e
   13e74:	movt	r1, #1
   13e78:	movw	r3, #39555	; 0x9a83
   13e7c:	movt	r3, #1
   13e80:	mov	r2, #560	; 0x230
   13e84:	bl	12054 <__assert_fail@plt>

00013e88 <main@@Base>:
   13e88:	push	{r4, r5, fp, lr}
   13e8c:	add	fp, sp, #8
   13e90:	movw	r0, #46432	; 0xb560
   13e94:	movt	r0, #2
   13e98:	ldm	r0, {r1, r2, r3, r5}
   13e9c:	adds	r1, r1, #1
   13ea0:	adc	r2, r2, #0
   13ea4:	adds	r3, r3, #1
   13ea8:	adc	r5, r5, #0
   13eac:	stm	r0, {r1, r2, r3, r5}
   13eb0:	movw	r4, #45284	; 0xb0e4
   13eb4:	movt	r4, #2
   13eb8:	ldr	r0, [r4]
   13ebc:	mov	r1, #0
   13ec0:	bl	11e74 <setbuf@plt>
   13ec4:	ldr	r3, [r4]
   13ec8:	movw	r0, #39597	; 0x9aad
   13ecc:	movt	r0, #1
   13ed0:	mov	r1, #14
   13ed4:	mov	r2, #1
   13ed8:	bl	11ef8 <fwrite@plt>
   13edc:	ldr	r3, [r4]
   13ee0:	movw	r0, #39612	; 0x9abc
   13ee4:	movt	r0, #1
   13ee8:	mov	r1, #14
   13eec:	mov	r2, #1
   13ef0:	bl	11ef8 <fwrite@plt>
   13ef4:	ldr	r3, [r4]
   13ef8:	movw	r0, #39627	; 0x9acb
   13efc:	movt	r0, #1
   13f00:	mov	r1, #15
   13f04:	mov	r2, #1
   13f08:	bl	11ef8 <fwrite@plt>
   13f0c:	mov	r0, #0
   13f10:	bl	11e98 <fflush@plt>
   13f14:	movw	r4, #39643	; 0x9adb
   13f18:	movt	r4, #1
   13f1c:	movw	r5, #39661	; 0x9aed
   13f20:	movt	r5, #1
   13f24:	movw	r2, #39673	; 0x9af9
   13f28:	movt	r2, #1
   13f2c:	mov	r0, r4
   13f30:	mov	r1, r5
   13f34:	bl	11e8c <printf@plt>
   13f38:	bl	1250c <setup@@Base>
   13f3c:	bl	12540 <no_int_as_first_stuff@@Base>
   13f40:	movw	r0, #40180	; 0x9cf4
   13f44:	movt	r0, #1
   13f48:	bl	11f1c <puts@plt>
   13f4c:	movw	r2, #39695	; 0x9b0f
   13f50:	movt	r2, #1
   13f54:	mov	r0, r4
   13f58:	mov	r1, r5
   13f5c:	bl	11e8c <printf@plt>
   13f60:	bl	1250c <setup@@Base>
   13f64:	bl	12648 <int_but_not_followed_by_function@@Base>
   13f68:	movw	r0, #40180	; 0x9cf4
   13f6c:	movt	r0, #1
   13f70:	bl	11f1c <puts@plt>
   13f74:	movw	r2, #39728	; 0x9b30
   13f78:	movt	r2, #1
   13f7c:	mov	r0, r4
   13f80:	mov	r1, r5
   13f84:	bl	11e8c <printf@plt>
   13f88:	bl	1250c <setup@@Base>
   13f8c:	bl	12dc8 <boolean_unary_operator_is_read_properly@@Base>
   13f90:	movw	r0, #40180	; 0x9cf4
   13f94:	movt	r0, #1
   13f98:	bl	11f1c <puts@plt>
   13f9c:	movw	r2, #39768	; 0x9b58
   13fa0:	movt	r2, #1
   13fa4:	mov	r0, r4
   13fa8:	mov	r1, r5
   13fac:	bl	11e8c <printf@plt>
   13fb0:	bl	1250c <setup@@Base>
   13fb4:	bl	12b74 <boolean_binary_operator_is_read_properly@@Base>
   13fb8:	movw	r0, #40180	; 0x9cf4
   13fbc:	movt	r0, #1
   13fc0:	bl	11f1c <puts@plt>
   13fc4:	movw	r2, #39809	; 0x9b81
   13fc8:	movt	r2, #1
   13fcc:	mov	r0, r4
   13fd0:	mov	r1, r5
   13fd4:	bl	11e8c <printf@plt>
   13fd8:	bl	1250c <setup@@Base>
   13fdc:	bl	12774 <boolean_expression_is_read_properly@@Base>
   13fe0:	movw	r0, #40180	; 0x9cf4
   13fe4:	movt	r0, #1
   13fe8:	bl	11f1c <puts@plt>
   13fec:	movw	r2, #39845	; 0x9ba5
   13ff0:	movt	r2, #1
   13ff4:	mov	r0, r4
   13ff8:	mov	r1, r5
   13ffc:	bl	11e8c <printf@plt>
   14000:	bl	1250c <setup@@Base>
   14004:	bl	12954 <boolean_expression_complex@@Base>
   14008:	movw	r0, #40180	; 0x9cf4
   1400c:	movt	r0, #1
   14010:	bl	11f1c <puts@plt>
   14014:	movw	r2, #39872	; 0x9bc0
   14018:	movt	r2, #1
   1401c:	mov	r0, r4
   14020:	mov	r1, r5
   14024:	bl	11e8c <printf@plt>
   14028:	bl	1250c <setup@@Base>
   1402c:	bl	12ffc <if_statement_only@@Base>
   14030:	movw	r0, #40180	; 0x9cf4
   14034:	movt	r0, #1
   14038:	bl	11f1c <puts@plt>
   1403c:	movw	r2, #39890	; 0x9bd2
   14040:	movt	r2, #1
   14044:	mov	r0, r4
   14048:	mov	r1, r5
   1404c:	bl	11e8c <printf@plt>
   14050:	bl	1250c <setup@@Base>
   14054:	bl	13210 <if_else_statements@@Base>
   14058:	movw	r0, #40180	; 0x9cf4
   1405c:	movt	r0, #1
   14060:	bl	11f1c <puts@plt>
   14064:	movw	r2, #39909	; 0x9be5
   14068:	movt	r2, #1
   1406c:	mov	r0, r4
   14070:	mov	r1, r5
   14074:	bl	11e8c <printf@plt>
   14078:	bl	1250c <setup@@Base>
   1407c:	bl	138b8 <if_statement_inside_if_statement@@Base>
   14080:	movw	r0, #40180	; 0x9cf4
   14084:	movt	r0, #1
   14088:	bl	11f1c <puts@plt>
   1408c:	movw	r2, #39942	; 0x9c06
   14090:	movt	r2, #1
   14094:	mov	r0, r4
   14098:	mov	r1, r5
   1409c:	bl	11e8c <printf@plt>
   140a0:	bl	1250c <setup@@Base>
   140a4:	bl	13b90 <if_statement_inside_else_statement@@Base>
   140a8:	movw	r0, #40180	; 0x9cf4
   140ac:	movt	r0, #1
   140b0:	bl	11f1c <puts@plt>
   140b4:	movw	r2, #39977	; 0x9c29
   140b8:	movt	r2, #1
   140bc:	mov	r0, r4
   140c0:	mov	r1, r5
   140c4:	bl	11e8c <printf@plt>
   140c8:	bl	1250c <setup@@Base>
   140cc:	bl	136c0 <body_with_one_return@@Base>
   140d0:	movw	r0, #40180	; 0x9cf4
   140d4:	movt	r0, #1
   140d8:	bl	11f1c <puts@plt>
   140dc:	movw	r2, #39998	; 0x9c3e
   140e0:	movt	r2, #1
   140e4:	mov	r0, r4
   140e8:	mov	r1, r5
   140ec:	bl	11e8c <printf@plt>
   140f0:	bl	1250c <setup@@Base>
   140f4:	bl	13444 <body_with_two_returns@@Base>
   140f8:	movw	r0, #40180	; 0x9cf4
   140fc:	movt	r0, #1
   14100:	bl	11f1c <puts@plt>
   14104:	movw	r0, #40189	; 0x9cfd
   14108:	movt	r0, #1
   1410c:	bl	11f1c <puts@plt>
   14110:	movw	r0, #40204	; 0x9d0c
   14114:	movt	r0, #1
   14118:	bl	11f1c <puts@plt>
   1411c:	movw	r0, #39597	; 0x9aad
   14120:	movt	r0, #1
   14124:	bl	11f1c <puts@plt>
   14128:	mov	r0, #0
   1412c:	pop	{r4, r5, fp, pc}
   14130:	push	{r4, r5, r6, lr}
   14134:	sub	sp, sp, #8
   14138:	movw	r0, #40020	; 0x9c54
   1413c:	movt	r0, #1
   14140:	movw	r1, #40122	; 0x9cba
   14144:	movt	r1, #1
   14148:	movw	r2, #18153	; 0x46e9
   1414c:	movt	r2, #26806	; 0x68b6
   14150:	bl	16628 <read_boolean_unary_expression@@Base+0x39c>
   14154:	movw	r0, #40592	; 0x9e90
   14158:	movt	r0, #1
   1415c:	add	r4, r0, #4
   14160:	mov	r5, #0
   14164:	movw	r6, #40224	; 0x9d20
   14168:	movt	r6, #1
   1416c:	mov	r3, r6
   14170:	ldr	r0, [r3, r5]!
   14174:	ldr	r1, [r3, #16]
   14178:	str	r1, [sp]
   1417c:	ldmib	r3, {r1, r2}
   14180:	ldrb	r3, [r3, #12]
   14184:	bl	16d48 <read_boolean_unary_expression@@Base+0xabc>
   14188:	ldrd	r0, [r4, #-4]
   1418c:	bl	175fc <read_boolean_unary_expression@@Base+0x1370>
   14190:	add	r5, r5, #20
   14194:	add	r4, r4, #8
   14198:	cmp	r5, #360	; 0x168
   1419c:	bne	1416c <main@@Base+0x2e4>
   141a0:	bl	17d84 <read_boolean_unary_expression@@Base+0x1af8>
   141a4:	add	sp, sp, #8
   141a8:	pop	{r4, r5, r6, lr}
   141ac:	b	18af0 <read_boolean_unary_expression@@Base+0x2864>
   141b0:	push	{fp, lr}
   141b4:	bl	14130 <main@@Base+0x2a8>
   141b8:	movw	r0, #45296	; 0xb0f0
   141bc:	movt	r0, #2
   141c0:	mov	r1, #0
   141c4:	mov	r2, #152	; 0x98
   141c8:	bl	11fb8 <memset@plt>
   141cc:	vmov.i32	q8, #0	; 0x00000000
   141d0:	movw	r0, #45448	; 0xb188
   141d4:	movt	r0, #2
   141d8:	vst1.64	{d16-d17}, [r0]
   141dc:	movw	r0, #45472	; 0xb1a0
   141e0:	movt	r0, #2
   141e4:	add	r1, r0, #16
   141e8:	vst1.64	{d16-d17}, [r1 :128]
   141ec:	add	r1, r0, #32
   141f0:	vst1.64	{d16-d17}, [r1 :128]
   141f4:	add	r1, r0, #48	; 0x30
   141f8:	vst1.64	{d16-d17}, [r1 :128]
   141fc:	add	r1, r0, #64	; 0x40
   14200:	vst1.64	{d16-d17}, [r1 :128]
   14204:	movw	r1, #45568	; 0xb200
   14208:	movt	r1, #2
   1420c:	vst1.64	{d16-d17}, [r1]
   14210:	movw	r1, #45584	; 0xb210
   14214:	movt	r1, #2
   14218:	vst1.64	{d16-d17}, [r1]
   1421c:	movw	lr, #45600	; 0xb220
   14220:	movt	lr, #2
   14224:	add	r1, lr, #16
   14228:	vst1.64	{d16-d17}, [r1 :128]
   1422c:	movw	r3, #45648	; 0xb250
   14230:	movt	r3, #2
   14234:	add	r1, r3, #16
   14238:	vst1.64	{d16-d17}, [r1 :128]
   1423c:	movw	r1, #45696	; 0xb280
   14240:	movt	r1, #2
   14244:	add	r2, r1, #16
   14248:	vst1.64	{d16-d17}, [r2 :128]
   1424c:	add	r2, r1, #32
   14250:	vst1.64	{d16-d17}, [r2 :128]
   14254:	mov	ip, #80	; 0x50
   14258:	vst1.64	{d16-d17}, [r0 :128], ip
   1425c:	vst1.64	{d16-d17}, [r0 :128]
   14260:	mov	r2, #32
   14264:	vst1.64	{d16-d17}, [lr :128], r2
   14268:	vst1.64	{d16-d17}, [lr :128]
   1426c:	vst1.64	{d16-d17}, [r3 :128], r2
   14270:	vst1.64	{d16-d17}, [r3 :128]
   14274:	mov	r0, #48	; 0x30
   14278:	vst1.64	{d16-d17}, [r1 :128], r0
   1427c:	vst1.64	{d16-d17}, [r1 :128]
   14280:	movw	r1, #45760	; 0xb2c0
   14284:	movt	r1, #2
   14288:	add	r3, r1, #16
   1428c:	vst1.64	{d16-d17}, [r1 :128], r2
   14290:	vst1.64	{d16-d17}, [r1 :128]
   14294:	vst1.64	{d16-d17}, [r3 :128]
   14298:	movw	r1, #45808	; 0xb2f0
   1429c:	movt	r1, #2
   142a0:	add	r2, r1, #16
   142a4:	vst1.64	{d16-d17}, [r2 :128]
   142a8:	add	r2, r1, #32
   142ac:	vst1.64	{d16-d17}, [r2 :128]
   142b0:	add	r2, r1, #48	; 0x30
   142b4:	vst1.64	{d16-d17}, [r2 :128]
   142b8:	add	r2, r1, #64	; 0x40
   142bc:	vst1.64	{d16-d17}, [r2 :128]
   142c0:	vst1.64	{d16-d17}, [r1 :128], ip
   142c4:	vst1.64	{d16-d17}, [r1 :128]
   142c8:	movw	r1, #45904	; 0xb350
   142cc:	movt	r1, #2
   142d0:	mov	r2, r1
   142d4:	vst1.64	{d16-d17}, [r2 :128], ip
   142d8:	vst1.64	{d16-d17}, [r2 :128]
   142dc:	add	r2, r1, #16
   142e0:	vst1.64	{d16-d17}, [r2 :128]
   142e4:	add	r2, r1, #32
   142e8:	vst1.64	{d16-d17}, [r2 :128]
   142ec:	add	r2, r1, #48	; 0x30
   142f0:	vst1.64	{d16-d17}, [r2 :128]
   142f4:	add	r1, r1, #64	; 0x40
   142f8:	vst1.64	{d16-d17}, [r1 :128]
   142fc:	movw	r1, #46000	; 0xb3b0
   14300:	movt	r1, #2
   14304:	add	r2, r1, #16
   14308:	vst1.64	{d16-d17}, [r2 :128]
   1430c:	add	r2, r1, #32
   14310:	vst1.64	{d16-d17}, [r2 :128]
   14314:	vst1.64	{d16-d17}, [r1 :128], r0
   14318:	vst1.64	{d16-d17}, [r1 :128]
   1431c:	movw	r1, #46064	; 0xb3f0
   14320:	movt	r1, #2
   14324:	mov	r2, r1
   14328:	vst1.64	{d16-d17}, [r2 :128], r0
   1432c:	vst1.64	{d16-d17}, [r2 :128]
   14330:	add	r2, r1, #16
   14334:	vst1.64	{d16-d17}, [r2 :128]
   14338:	add	r1, r1, #32
   1433c:	vst1.64	{d16-d17}, [r1 :128]
   14340:	movw	r1, #46128	; 0xb430
   14344:	movt	r1, #2
   14348:	add	r2, r1, #64	; 0x40
   1434c:	vst1.64	{d16-d17}, [r2 :128]
   14350:	add	r2, r1, #48	; 0x30
   14354:	vst1.64	{d16-d17}, [r2 :128]
   14358:	add	r2, r1, #32
   1435c:	vst1.64	{d16-d17}, [r2 :128]
   14360:	add	r2, r1, #16
   14364:	vst1.64	{d16-d17}, [r2 :128]
   14368:	vst1.64	{d16-d17}, [r1 :128], ip
   1436c:	vst1.64	{d16-d17}, [r1 :128]
   14370:	mov	r1, #64	; 0x40
   14374:	movw	r2, #46224	; 0xb490
   14378:	movt	r2, #2
   1437c:	mov	r3, r2
   14380:	vst1.64	{d16-d17}, [r3 :128], r1
   14384:	vst1.64	{d16-d17}, [r3 :128]
   14388:	add	r1, r2, #16
   1438c:	vst1.64	{d16-d17}, [r1 :128]
   14390:	add	r1, r2, #32
   14394:	vst1.64	{d16-d17}, [r1 :128]
   14398:	add	r1, r2, #48	; 0x30
   1439c:	vst1.64	{d16-d17}, [r1 :128]
   143a0:	movw	r1, #46304	; 0xb4e0
   143a4:	movt	r1, #2
   143a8:	add	r2, r1, #16
   143ac:	vst1.64	{d16-d17}, [r2 :128]
   143b0:	add	r2, r1, #32
   143b4:	vst1.64	{d16-d17}, [r2 :128]
   143b8:	vst1.64	{d16-d17}, [r1 :128], r0
   143bc:	vst1.64	{d16-d17}, [r1 :128]
   143c0:	movw	r1, #46368	; 0xb520
   143c4:	movt	r1, #2
   143c8:	mov	r2, r1
   143cc:	vst1.64	{d16-d17}, [r2 :128], r0
   143d0:	vst1.64	{d16-d17}, [r2 :128]
   143d4:	add	r0, r1, #16
   143d8:	vst1.64	{d16-d17}, [r0 :128]
   143dc:	add	r0, r1, #32
   143e0:	vst1.64	{d16-d17}, [r0 :128]
   143e4:	movw	r0, #46432	; 0xb560
   143e8:	movt	r0, #2
   143ec:	vst1.64	{d16-d17}, [r0]
   143f0:	pop	{fp, pc}
   143f4:	movw	r0, #16688	; 0x4130
   143f8:	movt	r0, #1
   143fc:	movw	r1, #16816	; 0x41b0
   14400:	movt	r1, #1
   14404:	b	18fa4 <__gcov_flush@@Base+0xb8>

00014408 <init_token_int_type@@Base>:
   14408:	push	{fp, lr}
   1440c:	mov	fp, sp
   14410:	movw	r1, #46448	; 0xb570
   14414:	movt	r1, #2
   14418:	ldm	r1, {r2, r3, ip, lr}
   1441c:	adds	r2, r2, #1
   14420:	adc	r3, r3, #0
   14424:	adds	ip, ip, #1
   14428:	adc	lr, lr, #0
   1442c:	stm	r1, {r2, r3, ip, lr}
   14430:	mov	r1, #0
   14434:	str	r1, [r0]
   14438:	pop	{fp, pc}

0001443c <init_token_int_value@@Base>:
   1443c:	push	{r4, sl, fp, lr}
   14440:	add	fp, sp, #8
   14444:	movw	r2, #46464	; 0xb580
   14448:	movt	r2, #2
   1444c:	ldm	r2, {r3, ip, lr}
   14450:	ldr	r4, [r2, #12]
   14454:	adds	r3, r3, #1
   14458:	adc	ip, ip, #0
   1445c:	adds	lr, lr, #1
   14460:	adc	r4, r4, #0
   14464:	stm	r2, {r3, ip, lr}
   14468:	str	r4, [r2, #12]
   1446c:	mov	r2, #1
   14470:	str	r2, [r0]
   14474:	str	r1, [r0, #4]
   14478:	pop	{r4, sl, fp, pc}

0001447c <init_token_function@@Base>:
   1447c:	push	{r4, sl, fp, lr}
   14480:	add	fp, sp, #8
   14484:	movw	r2, #46480	; 0xb590
   14488:	movt	r2, #2
   1448c:	ldm	r2, {r3, ip, lr}
   14490:	ldr	r4, [r2, #12]
   14494:	adds	r3, r3, #1
   14498:	adc	ip, ip, #0
   1449c:	adds	lr, lr, #1
   144a0:	adc	r4, r4, #0
   144a4:	stm	r2, {r3, ip, lr}
   144a8:	str	r4, [r2, #12]
   144ac:	mov	r2, #2
   144b0:	str	r2, [r0]
   144b4:	str	r1, [r0, #4]
   144b8:	pop	{r4, sl, fp, pc}

000144bc <init_token_opar@@Base>:
   144bc:	push	{fp, lr}
   144c0:	mov	fp, sp
   144c4:	movw	r1, #46496	; 0xb5a0
   144c8:	movt	r1, #2
   144cc:	ldm	r1, {r2, r3, ip, lr}
   144d0:	adds	r2, r2, #1
   144d4:	adc	r3, r3, #0
   144d8:	adds	ip, ip, #1
   144dc:	adc	lr, lr, #0
   144e0:	stm	r1, {r2, r3, ip, lr}
   144e4:	mov	r1, #3
   144e8:	str	r1, [r0]
   144ec:	pop	{fp, pc}

000144f0 <init_token_cpar@@Base>:
   144f0:	push	{fp, lr}
   144f4:	mov	fp, sp
   144f8:	movw	r1, #46512	; 0xb5b0
   144fc:	movt	r1, #2
   14500:	ldm	r1, {r2, r3, ip, lr}
   14504:	adds	r2, r2, #1
   14508:	adc	r3, r3, #0
   1450c:	adds	ip, ip, #1
   14510:	adc	lr, lr, #0
   14514:	stm	r1, {r2, r3, ip, lr}
   14518:	mov	r1, #4
   1451c:	str	r1, [r0]
   14520:	pop	{fp, pc}

00014524 <init_token_obra@@Base>:
   14524:	push	{fp, lr}
   14528:	mov	fp, sp
   1452c:	movw	r1, #46528	; 0xb5c0
   14530:	movt	r1, #2
   14534:	ldm	r1, {r2, r3, ip, lr}
   14538:	adds	r2, r2, #1
   1453c:	adc	r3, r3, #0
   14540:	adds	ip, ip, #1
   14544:	adc	lr, lr, #0
   14548:	stm	r1, {r2, r3, ip, lr}
   1454c:	mov	r1, #5
   14550:	str	r1, [r0]
   14554:	pop	{fp, pc}

00014558 <init_token_cbra@@Base>:
   14558:	push	{fp, lr}
   1455c:	mov	fp, sp
   14560:	movw	r1, #46544	; 0xb5d0
   14564:	movt	r1, #2
   14568:	ldm	r1, {r2, r3, ip, lr}
   1456c:	adds	r2, r2, #1
   14570:	adc	r3, r3, #0
   14574:	adds	ip, ip, #1
   14578:	adc	lr, lr, #0
   1457c:	stm	r1, {r2, r3, ip, lr}
   14580:	mov	r1, #6
   14584:	str	r1, [r0]
   14588:	pop	{fp, pc}

0001458c <init_token_return@@Base>:
   1458c:	push	{fp, lr}
   14590:	mov	fp, sp
   14594:	movw	r1, #46560	; 0xb5e0
   14598:	movt	r1, #2
   1459c:	ldm	r1, {r2, r3, ip, lr}
   145a0:	adds	r2, r2, #1
   145a4:	adc	r3, r3, #0
   145a8:	adds	ip, ip, #1
   145ac:	adc	lr, lr, #0
   145b0:	stm	r1, {r2, r3, ip, lr}
   145b4:	mov	r1, #7
   145b8:	str	r1, [r0]
   145bc:	pop	{fp, pc}

000145c0 <init_token_semicolon@@Base>:
   145c0:	push	{fp, lr}
   145c4:	mov	fp, sp
   145c8:	movw	r1, #46576	; 0xb5f0
   145cc:	movt	r1, #2
   145d0:	ldm	r1, {r2, r3, ip, lr}
   145d4:	adds	r2, r2, #1
   145d8:	adc	r3, r3, #0
   145dc:	adds	ip, ip, #1
   145e0:	adc	lr, lr, #0
   145e4:	stm	r1, {r2, r3, ip, lr}
   145e8:	mov	r1, #8
   145ec:	str	r1, [r0]
   145f0:	pop	{fp, pc}

000145f4 <init_token_eof@@Base>:
   145f4:	push	{fp, lr}
   145f8:	mov	fp, sp
   145fc:	movw	r1, #46592	; 0xb600
   14600:	movt	r1, #2
   14604:	ldm	r1, {r2, r3, ip, lr}
   14608:	adds	r2, r2, #1
   1460c:	adc	r3, r3, #0
   14610:	adds	ip, ip, #1
   14614:	adc	lr, lr, #0
   14618:	stm	r1, {r2, r3, ip, lr}
   1461c:	mov	r1, #9
   14620:	str	r1, [r0]
   14624:	pop	{fp, pc}

00014628 <init_token_if@@Base>:
   14628:	push	{fp, lr}
   1462c:	mov	fp, sp
   14630:	movw	r1, #46608	; 0xb610
   14634:	movt	r1, #2
   14638:	ldm	r1, {r2, r3, ip, lr}
   1463c:	adds	r2, r2, #1
   14640:	adc	r3, r3, #0
   14644:	adds	ip, ip, #1
   14648:	adc	lr, lr, #0
   1464c:	stm	r1, {r2, r3, ip, lr}
   14650:	mov	r1, #10
   14654:	str	r1, [r0]
   14658:	pop	{fp, pc}

0001465c <init_token_else@@Base>:
   1465c:	push	{fp, lr}
   14660:	mov	fp, sp
   14664:	movw	r1, #46624	; 0xb620
   14668:	movt	r1, #2
   1466c:	ldm	r1, {r2, r3, ip, lr}
   14670:	adds	r2, r2, #1
   14674:	adc	r3, r3, #0
   14678:	adds	ip, ip, #1
   1467c:	adc	lr, lr, #0
   14680:	stm	r1, {r2, r3, ip, lr}
   14684:	mov	r1, #11
   14688:	str	r1, [r0]
   1468c:	pop	{fp, pc}

00014690 <init_token_boolean_op@@Base>:
   14690:	push	{r4, sl, fp, lr}
   14694:	add	fp, sp, #8
   14698:	movw	r2, #46640	; 0xb630
   1469c:	movt	r2, #2
   146a0:	ldm	r2, {r3, ip, lr}
   146a4:	ldr	r4, [r2, #12]
   146a8:	adds	r3, r3, #1
   146ac:	adc	ip, ip, #0
   146b0:	adds	lr, lr, #1
   146b4:	adc	r4, r4, #0
   146b8:	stm	r2, {r3, ip, lr}
   146bc:	str	r4, [r2, #12]
   146c0:	mov	r2, #12
   146c4:	str	r2, [r0]
   146c8:	str	r1, [r0, #4]
   146cc:	pop	{r4, sl, fp, pc}

000146d0 <free_token_int_type@@Base>:
   146d0:	push	{fp, lr}
   146d4:	mov	fp, sp
   146d8:	movw	r1, #46656	; 0xb640
   146dc:	movt	r1, #2
   146e0:	ldm	r1, {r2, r3, ip, lr}
   146e4:	adds	r2, r2, #1
   146e8:	adc	r3, r3, #0
   146ec:	adds	ip, ip, #1
   146f0:	adc	lr, lr, #0
   146f4:	stm	r1, {r2, r3, ip, lr}
   146f8:	pop	{fp, lr}
   146fc:	b	11ea4 <free@plt>

00014700 <free_token_int_value@@Base>:
   14700:	push	{fp, lr}
   14704:	mov	fp, sp
   14708:	movw	r1, #46672	; 0xb650
   1470c:	movt	r1, #2
   14710:	ldm	r1, {r2, r3, ip, lr}
   14714:	adds	r2, r2, #1
   14718:	adc	r3, r3, #0
   1471c:	adds	ip, ip, #1
   14720:	adc	lr, lr, #0
   14724:	stm	r1, {r2, r3, ip, lr}
   14728:	pop	{fp, lr}
   1472c:	b	11ea4 <free@plt>

00014730 <free_token_function@@Base>:
   14730:	push	{fp, lr}
   14734:	mov	fp, sp
   14738:	movw	r1, #46688	; 0xb660
   1473c:	movt	r1, #2
   14740:	ldm	r1, {r2, r3, ip, lr}
   14744:	adds	r2, r2, #1
   14748:	adc	r3, r3, #0
   1474c:	adds	ip, ip, #1
   14750:	adc	lr, lr, #0
   14754:	stm	r1, {r2, r3, ip, lr}
   14758:	pop	{fp, lr}
   1475c:	b	11ea4 <free@plt>

00014760 <free_token_opar@@Base>:
   14760:	push	{fp, lr}
   14764:	mov	fp, sp
   14768:	movw	r1, #46704	; 0xb670
   1476c:	movt	r1, #2
   14770:	ldm	r1, {r2, r3, ip, lr}
   14774:	adds	r2, r2, #1
   14778:	adc	r3, r3, #0
   1477c:	adds	ip, ip, #1
   14780:	adc	lr, lr, #0
   14784:	stm	r1, {r2, r3, ip, lr}
   14788:	pop	{fp, lr}
   1478c:	b	11ea4 <free@plt>

00014790 <free_token_cpar@@Base>:
   14790:	push	{fp, lr}
   14794:	mov	fp, sp
   14798:	movw	r1, #46720	; 0xb680
   1479c:	movt	r1, #2
   147a0:	ldm	r1, {r2, r3, ip, lr}
   147a4:	adds	r2, r2, #1
   147a8:	adc	r3, r3, #0
   147ac:	adds	ip, ip, #1
   147b0:	adc	lr, lr, #0
   147b4:	stm	r1, {r2, r3, ip, lr}
   147b8:	pop	{fp, lr}
   147bc:	b	11ea4 <free@plt>

000147c0 <free_token_obra@@Base>:
   147c0:	push	{fp, lr}
   147c4:	mov	fp, sp
   147c8:	movw	r1, #46736	; 0xb690
   147cc:	movt	r1, #2
   147d0:	ldm	r1, {r2, r3, ip, lr}
   147d4:	adds	r2, r2, #1
   147d8:	adc	r3, r3, #0
   147dc:	adds	ip, ip, #1
   147e0:	adc	lr, lr, #0
   147e4:	stm	r1, {r2, r3, ip, lr}
   147e8:	pop	{fp, lr}
   147ec:	b	11ea4 <free@plt>

000147f0 <free_token_cbra@@Base>:
   147f0:	push	{fp, lr}
   147f4:	mov	fp, sp
   147f8:	movw	r1, #46752	; 0xb6a0
   147fc:	movt	r1, #2
   14800:	ldm	r1, {r2, r3, ip, lr}
   14804:	adds	r2, r2, #1
   14808:	adc	r3, r3, #0
   1480c:	adds	ip, ip, #1
   14810:	adc	lr, lr, #0
   14814:	stm	r1, {r2, r3, ip, lr}
   14818:	pop	{fp, lr}
   1481c:	b	11ea4 <free@plt>

00014820 <free_token_return@@Base>:
   14820:	push	{fp, lr}
   14824:	mov	fp, sp
   14828:	movw	r1, #46768	; 0xb6b0
   1482c:	movt	r1, #2
   14830:	ldm	r1, {r2, r3, ip, lr}
   14834:	adds	r2, r2, #1
   14838:	adc	r3, r3, #0
   1483c:	adds	ip, ip, #1
   14840:	adc	lr, lr, #0
   14844:	stm	r1, {r2, r3, ip, lr}
   14848:	pop	{fp, lr}
   1484c:	b	11ea4 <free@plt>

00014850 <free_token_semicolon@@Base>:
   14850:	push	{fp, lr}
   14854:	mov	fp, sp
   14858:	movw	r1, #46784	; 0xb6c0
   1485c:	movt	r1, #2
   14860:	ldm	r1, {r2, r3, ip, lr}
   14864:	adds	r2, r2, #1
   14868:	adc	r3, r3, #0
   1486c:	adds	ip, ip, #1
   14870:	adc	lr, lr, #0
   14874:	stm	r1, {r2, r3, ip, lr}
   14878:	pop	{fp, lr}
   1487c:	b	11ea4 <free@plt>

00014880 <free_token_eof@@Base>:
   14880:	push	{fp, lr}
   14884:	mov	fp, sp
   14888:	movw	r1, #46800	; 0xb6d0
   1488c:	movt	r1, #2
   14890:	ldm	r1, {r2, r3, ip, lr}
   14894:	adds	r2, r2, #1
   14898:	adc	r3, r3, #0
   1489c:	adds	ip, ip, #1
   148a0:	adc	lr, lr, #0
   148a4:	stm	r1, {r2, r3, ip, lr}
   148a8:	pop	{fp, lr}
   148ac:	b	11ea4 <free@plt>

000148b0 <free_token_if@@Base>:
   148b0:	push	{fp, lr}
   148b4:	mov	fp, sp
   148b8:	movw	r1, #46816	; 0xb6e0
   148bc:	movt	r1, #2
   148c0:	ldm	r1, {r2, r3, ip, lr}
   148c4:	adds	r2, r2, #1
   148c8:	adc	r3, r3, #0
   148cc:	adds	ip, ip, #1
   148d0:	adc	lr, lr, #0
   148d4:	stm	r1, {r2, r3, ip, lr}
   148d8:	pop	{fp, lr}
   148dc:	b	11ea4 <free@plt>

000148e0 <free_token_else@@Base>:
   148e0:	push	{fp, lr}
   148e4:	mov	fp, sp
   148e8:	movw	r1, #46832	; 0xb6f0
   148ec:	movt	r1, #2
   148f0:	ldm	r1, {r2, r3, ip, lr}
   148f4:	adds	r2, r2, #1
   148f8:	adc	r3, r3, #0
   148fc:	adds	ip, ip, #1
   14900:	adc	lr, lr, #0
   14904:	stm	r1, {r2, r3, ip, lr}
   14908:	pop	{fp, lr}
   1490c:	b	11ea4 <free@plt>

00014910 <free_token_boolean_op@@Base>:
   14910:	push	{r4, r5, fp, lr}
   14914:	add	fp, sp, #8
   14918:	mov	r4, r0
   1491c:	movw	r5, #46848	; 0xb700
   14920:	movt	r5, #2
   14924:	ldrd	r0, [r5]
   14928:	adds	r0, r0, #1
   1492c:	adc	r1, r1, #0
   14930:	strd	r0, [r5]
   14934:	ldr	r0, [r4, #4]
   14938:	cmp	r0, #0
   1493c:	beq	1495c <free_token_boolean_op@@Base+0x4c>
   14940:	ldrd	r2, [r5, #8]
   14944:	adds	r2, r2, #1
   14948:	adc	r3, r3, #0
   1494c:	strd	r2, [r5, #8]
   14950:	bl	11ea4 <free@plt>
   14954:	add	r0, r5, #24
   14958:	b	14960 <free_token_boolean_op@@Base+0x50>
   1495c:	add	r0, r5, #16
   14960:	ldrd	r2, [r0]
   14964:	adds	r2, r2, #1
   14968:	adc	r3, r3, #0
   1496c:	strd	r2, [r0]
   14970:	ldrd	r0, [r5, #32]
   14974:	adds	r0, r0, #1
   14978:	adc	r1, r1, #0
   1497c:	strd	r0, [r5, #32]
   14980:	mov	r0, r4
   14984:	pop	{r4, r5, fp, lr}
   14988:	b	11ea4 <free@plt>
   1498c:	push	{r4, r5, r6, lr}
   14990:	sub	sp, sp, #8
   14994:	movw	r0, #40736	; 0x9f20
   14998:	movt	r0, #1
   1499c:	movw	r1, #40122	; 0x9cba
   149a0:	movt	r1, #1
   149a4:	movw	r2, #23366	; 0x5b46
   149a8:	movt	r2, #47030	; 0xb7b6
   149ac:	bl	16628 <read_boolean_unary_expression@@Base+0x39c>
   149b0:	movw	r0, #41824	; 0xa360
   149b4:	movt	r0, #1
   149b8:	add	r4, r0, #4
   149bc:	mov	r5, #0
   149c0:	movw	r6, #41296	; 0xa150
   149c4:	movt	r6, #1
   149c8:	mov	r3, r6
   149cc:	ldr	r0, [r3, r5]!
   149d0:	ldr	r1, [r3, #16]
   149d4:	str	r1, [sp]
   149d8:	ldmib	r3, {r1, r2}
   149dc:	ldrb	r3, [r3, #12]
   149e0:	bl	16d48 <read_boolean_unary_expression@@Base+0xabc>
   149e4:	ldrd	r0, [r4, #-4]
   149e8:	bl	175fc <read_boolean_unary_expression@@Base+0x1370>
   149ec:	add	r5, r5, #20
   149f0:	add	r4, r4, #8
   149f4:	cmp	r5, #520	; 0x208
   149f8:	bne	149c8 <free_token_boolean_op@@Base+0xb8>
   149fc:	bl	17d84 <read_boolean_unary_expression@@Base+0x1af8>
   14a00:	add	sp, sp, #8
   14a04:	pop	{r4, r5, r6, lr}
   14a08:	b	18af0 <read_boolean_unary_expression@@Base+0x2864>
   14a0c:	push	{fp, lr}
   14a10:	bl	1498c <free_token_boolean_op@@Base+0x7c>
   14a14:	vmov.i32	q8, #0	; 0x00000000
   14a18:	movw	r0, #46464	; 0xb580
   14a1c:	movt	r0, #2
   14a20:	vst1.64	{d16-d17}, [r0]
   14a24:	movw	r0, #46448	; 0xb570
   14a28:	movt	r0, #2
   14a2c:	vst1.64	{d16-d17}, [r0]
   14a30:	movw	r0, #46480	; 0xb590
   14a34:	movt	r0, #2
   14a38:	vst1.64	{d16-d17}, [r0]
   14a3c:	movw	r0, #46496	; 0xb5a0
   14a40:	movt	r0, #2
   14a44:	vst1.64	{d16-d17}, [r0]
   14a48:	movw	r0, #46512	; 0xb5b0
   14a4c:	movt	r0, #2
   14a50:	vst1.64	{d16-d17}, [r0]
   14a54:	movw	r0, #46528	; 0xb5c0
   14a58:	movt	r0, #2
   14a5c:	vst1.64	{d16-d17}, [r0]
   14a60:	movw	r0, #46544	; 0xb5d0
   14a64:	movt	r0, #2
   14a68:	vst1.64	{d16-d17}, [r0]
   14a6c:	movw	r0, #46560	; 0xb5e0
   14a70:	movt	r0, #2
   14a74:	vst1.64	{d16-d17}, [r0]
   14a78:	movw	r0, #46576	; 0xb5f0
   14a7c:	movt	r0, #2
   14a80:	vst1.64	{d16-d17}, [r0]
   14a84:	movw	r0, #46592	; 0xb600
   14a88:	movt	r0, #2
   14a8c:	vst1.64	{d16-d17}, [r0]
   14a90:	movw	r0, #46608	; 0xb610
   14a94:	movt	r0, #2
   14a98:	vst1.64	{d16-d17}, [r0]
   14a9c:	movw	r0, #46624	; 0xb620
   14aa0:	movt	r0, #2
   14aa4:	vst1.64	{d16-d17}, [r0]
   14aa8:	movw	r0, #46640	; 0xb630
   14aac:	movt	r0, #2
   14ab0:	vst1.64	{d16-d17}, [r0]
   14ab4:	movw	r0, #46656	; 0xb640
   14ab8:	movt	r0, #2
   14abc:	vst1.64	{d16-d17}, [r0]
   14ac0:	movw	r0, #46672	; 0xb650
   14ac4:	movt	r0, #2
   14ac8:	vst1.64	{d16-d17}, [r0]
   14acc:	movw	r0, #46688	; 0xb660
   14ad0:	movt	r0, #2
   14ad4:	vst1.64	{d16-d17}, [r0]
   14ad8:	movw	r0, #46704	; 0xb670
   14adc:	movt	r0, #2
   14ae0:	vst1.64	{d16-d17}, [r0]
   14ae4:	movw	r0, #46720	; 0xb680
   14ae8:	movt	r0, #2
   14aec:	vst1.64	{d16-d17}, [r0]
   14af0:	movw	r0, #46736	; 0xb690
   14af4:	movt	r0, #2
   14af8:	vst1.64	{d16-d17}, [r0]
   14afc:	movw	r0, #46752	; 0xb6a0
   14b00:	movt	r0, #2
   14b04:	vst1.64	{d16-d17}, [r0]
   14b08:	movw	r0, #46768	; 0xb6b0
   14b0c:	movt	r0, #2
   14b10:	vst1.64	{d16-d17}, [r0]
   14b14:	movw	r0, #46784	; 0xb6c0
   14b18:	movt	r0, #2
   14b1c:	vst1.64	{d16-d17}, [r0]
   14b20:	movw	r0, #46800	; 0xb6d0
   14b24:	movt	r0, #2
   14b28:	vst1.64	{d16-d17}, [r0]
   14b2c:	movw	r0, #46816	; 0xb6e0
   14b30:	movt	r0, #2
   14b34:	vst1.64	{d16-d17}, [r0]
   14b38:	movw	r0, #46832	; 0xb6f0
   14b3c:	movt	r0, #2
   14b40:	vst1.64	{d16-d17}, [r0]
   14b44:	movw	r0, #46848	; 0xb700
   14b48:	movt	r0, #2
   14b4c:	mov	r1, #0
   14b50:	str	r1, [r0, #32]
   14b54:	add	r2, r0, #16
   14b58:	vst1.64	{d16-d17}, [r2 :128]
   14b5c:	mov	r2, #36	; 0x24
   14b60:	vst1.64	{d16-d17}, [r0 :128], r2
   14b64:	str	r1, [r0]
   14b68:	pop	{fp, pc}
   14b6c:	movw	r0, #18828	; 0x498c
   14b70:	movt	r0, #1
   14b74:	movw	r1, #18956	; 0x4a0c
   14b78:	movt	r1, #1
   14b7c:	b	18fa4 <__gcov_flush@@Base+0xb8>

00014b80 <init_ast_base@@Base>:
   14b80:	push	{r4, r5, fp, lr}
   14b84:	add	fp, sp, #8
   14b88:	movw	r3, #46896	; 0xb730
   14b8c:	movt	r3, #2
   14b90:	ldm	r3, {ip, lr}
   14b94:	ldr	r4, [r3, #8]
   14b98:	ldr	r5, [r3, #12]
   14b9c:	adds	ip, ip, #1
   14ba0:	adc	lr, lr, #0
   14ba4:	adds	r4, r4, #1
   14ba8:	adc	r5, r5, #0
   14bac:	stm	r3, {ip, lr}
   14bb0:	str	r4, [r3, #8]
   14bb4:	str	r5, [r3, #12]
   14bb8:	stm	r0, {r1, r2}
   14bbc:	pop	{r4, r5, fp, pc}

00014bc0 <init_ast_base_single@@Base>:
   14bc0:	push	{r4, sl, fp, lr}
   14bc4:	add	fp, sp, #8
   14bc8:	movw	r2, #46912	; 0xb740
   14bcc:	movt	r2, #2
   14bd0:	ldm	r2, {r3, ip, lr}
   14bd4:	ldr	r4, [r2, #12]
   14bd8:	adds	r3, r3, #1
   14bdc:	adc	ip, ip, #0
   14be0:	adds	lr, lr, #1
   14be4:	adc	r4, r4, #0
   14be8:	stm	r2, {r3, ip, lr}
   14bec:	str	r4, [r2, #12]
   14bf0:	mov	r2, #0
   14bf4:	pop	{r4, sl, fp, lr}
   14bf8:	b	14b80 <init_ast_base@@Base>

00014bfc <init_node_id@@Base>:
   14bfc:	push	{r4, r5, r6, sl, fp, lr}
   14c00:	add	fp, sp, #16
   14c04:	mov	r6, r1
   14c08:	mov	r5, r0
   14c0c:	movw	r0, #46928	; 0xb750
   14c10:	movt	r0, #2
   14c14:	ldm	r0, {r1, r2, r3, r4}
   14c18:	adds	r1, r1, #1
   14c1c:	adc	r2, r2, #0
   14c20:	adds	r3, r3, #1
   14c24:	adc	r4, r4, #0
   14c28:	stm	r0, {r1, r2, r3, r4}
   14c2c:	mov	r0, r5
   14c30:	mov	r1, #0
   14c34:	bl	14bc0 <init_ast_base_single@@Base>
   14c38:	str	r6, [r5, #8]
   14c3c:	pop	{r4, r5, r6, sl, fp, pc}

00014c40 <init_node_int@@Base>:
   14c40:	push	{r4, r5, r6, sl, fp, lr}
   14c44:	add	fp, sp, #16
   14c48:	mov	r6, r1
   14c4c:	mov	r5, r0
   14c50:	movw	r0, #46944	; 0xb760
   14c54:	movt	r0, #2
   14c58:	ldm	r0, {r1, r2, r3, r4}
   14c5c:	adds	r1, r1, #1
   14c60:	adc	r2, r2, #0
   14c64:	adds	r3, r3, #1
   14c68:	adc	r4, r4, #0
   14c6c:	stm	r0, {r1, r2, r3, r4}
   14c70:	mov	r0, r5
   14c74:	mov	r1, #1
   14c78:	bl	14bc0 <init_ast_base_single@@Base>
   14c7c:	str	r6, [r5, #8]
   14c80:	pop	{r4, r5, r6, sl, fp, pc}

00014c84 <init_node_function@@Base>:
   14c84:	push	{r4, r5, r6, r7, fp, lr}
   14c88:	add	fp, sp, #16
   14c8c:	mov	r7, r2
   14c90:	mov	r5, r1
   14c94:	mov	r6, r0
   14c98:	movw	r0, #46960	; 0xb770
   14c9c:	movt	r0, #2
   14ca0:	ldm	r0, {r1, r2, r3, r4}
   14ca4:	adds	r1, r1, #1
   14ca8:	adc	r2, r2, #0
   14cac:	adds	r3, r3, #1
   14cb0:	adc	r4, r4, #0
   14cb4:	stm	r0, {r1, r2, r3, r4}
   14cb8:	mov	r0, r6
   14cbc:	mov	r1, #2
   14cc0:	bl	14bc0 <init_ast_base_single@@Base>
   14cc4:	str	r5, [r6, #8]
   14cc8:	str	r7, [r6, #12]
   14ccc:	pop	{r4, r5, r6, r7, fp, pc}

00014cd0 <init_node_return@@Base>:
   14cd0:	push	{r4, r5, r6, sl, fp, lr}
   14cd4:	add	fp, sp, #16
   14cd8:	mov	r6, r1
   14cdc:	mov	r5, r0
   14ce0:	movw	r0, #46976	; 0xb780
   14ce4:	movt	r0, #2
   14ce8:	ldm	r0, {r1, r2, r3, r4}
   14cec:	adds	r1, r1, #1
   14cf0:	adc	r2, r2, #0
   14cf4:	adds	r3, r3, #1
   14cf8:	adc	r4, r4, #0
   14cfc:	stm	r0, {r1, r2, r3, r4}
   14d00:	mov	r0, r5
   14d04:	mov	r1, #3
   14d08:	bl	14bc0 <init_ast_base_single@@Base>
   14d0c:	str	r6, [r5, #8]
   14d10:	pop	{r4, r5, r6, sl, fp, pc}

00014d14 <init_node_if@@Base>:
   14d14:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d18:	add	fp, sp, #24
   14d1c:	mov	r8, r3
   14d20:	mov	r5, r2
   14d24:	mov	r6, r1
   14d28:	mov	r7, r0
   14d2c:	movw	r0, #46992	; 0xb790
   14d30:	movt	r0, #2
   14d34:	ldm	r0, {r1, r2, r3, r4}
   14d38:	adds	r1, r1, #1
   14d3c:	adc	r2, r2, #0
   14d40:	adds	r3, r3, #1
   14d44:	adc	r4, r4, #0
   14d48:	stm	r0, {r1, r2, r3, r4}
   14d4c:	mov	r0, r7
   14d50:	mov	r1, #4
   14d54:	bl	14bc0 <init_ast_base_single@@Base>
   14d58:	str	r6, [r7, #8]
   14d5c:	str	r5, [r7, #12]
   14d60:	str	r8, [r7, #16]
   14d64:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00014d68 <init_node_boolean_operator@@Base>:
   14d68:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d6c:	add	fp, sp, #24
   14d70:	mov	r8, r3
   14d74:	mov	r5, r2
   14d78:	mov	r6, r1
   14d7c:	mov	r7, r0
   14d80:	movw	r0, #47008	; 0xb7a0
   14d84:	movt	r0, #2
   14d88:	ldm	r0, {r1, r2, r3, r4}
   14d8c:	adds	r1, r1, #1
   14d90:	adc	r2, r2, #0
   14d94:	adds	r3, r3, #1
   14d98:	adc	r4, r4, #0
   14d9c:	stm	r0, {r1, r2, r3, r4}
   14da0:	mov	r0, r7
   14da4:	mov	r1, #0
   14da8:	bl	14bc0 <init_ast_base_single@@Base>
   14dac:	mov	r0, #5
   14db0:	str	r0, [r7]
   14db4:	str	r5, [r7, #8]
   14db8:	str	r8, [r7, #12]
   14dbc:	str	r6, [r7, #16]
   14dc0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00014dc4 <free_node@@Base>:
   14dc4:	push	{r4, sl, fp, lr}
   14dc8:	add	fp, sp, #8
   14dcc:	movw	r4, #47024	; 0xb7b0
   14dd0:	movt	r4, #2
   14dd4:	ldrd	r2, [r4]
   14dd8:	adds	r2, r2, #1
   14ddc:	adc	r3, r3, #0
   14de0:	strd	r2, [r4]
   14de4:	ldr	r1, [r0]
   14de8:	cmp	r1, #5
   14dec:	bhi	14ed8 <free_node@@Base+0x114>
   14df0:	add	r2, pc, #0
   14df4:	ldr	pc, [r2, r1, lsl #2]
   14df8:	andeq	r4, r1, r0, lsl lr
   14dfc:	andeq	r4, r1, r4, ror #28
   14e00:	andeq	r4, r1, r8, asr #28
   14e04:	andeq	r4, r1, r0, lsl #29
   14e08:	andeq	r4, r1, ip, lsr #28
   14e0c:	muleq	r1, ip, lr
   14e10:	ldrd	r2, [r4, #16]
   14e14:	adds	r2, r2, #1
   14e18:	adc	r3, r3, #0
   14e1c:	strd	r2, [r4, #16]
   14e20:	bl	14f10 <free_node_id@@Base>
   14e24:	add	r0, r4, #64	; 0x40
   14e28:	b	14eb4 <free_node@@Base+0xf0>
   14e2c:	ldrd	r2, [r4, #48]	; 0x30
   14e30:	adds	r2, r2, #1
   14e34:	adc	r3, r3, #0
   14e38:	strd	r2, [r4, #48]	; 0x30
   14e3c:	bl	15108 <free_node_if@@Base>
   14e40:	add	r0, r4, #96	; 0x60
   14e44:	b	14eb4 <free_node@@Base+0xf0>
   14e48:	ldrd	r2, [r4, #32]
   14e4c:	adds	r2, r2, #1
   14e50:	adc	r3, r3, #0
   14e54:	strd	r2, [r4, #32]
   14e58:	bl	15008 <free_node_function@@Base>
   14e5c:	add	r0, r4, #80	; 0x50
   14e60:	b	14eb4 <free_node@@Base+0xf0>
   14e64:	ldrd	r2, [r4, #24]
   14e68:	adds	r2, r2, #1
   14e6c:	adc	r3, r3, #0
   14e70:	strd	r2, [r4, #24]
   14e74:	bl	14f8c <free_node_int@@Base>
   14e78:	add	r0, r4, #72	; 0x48
   14e7c:	b	14eb4 <free_node@@Base+0xf0>
   14e80:	ldrd	r2, [r4, #40]	; 0x28
   14e84:	adds	r2, r2, #1
   14e88:	adc	r3, r3, #0
   14e8c:	strd	r2, [r4, #40]	; 0x28
   14e90:	bl	1508c <free_node_return@@Base>
   14e94:	add	r0, r4, #88	; 0x58
   14e98:	b	14eb4 <free_node@@Base+0xf0>
   14e9c:	ldrd	r2, [r4, #56]	; 0x38
   14ea0:	adds	r2, r2, #1
   14ea4:	adc	r3, r3, #0
   14ea8:	strd	r2, [r4, #56]	; 0x38
   14eac:	bl	1519c <free_node_boolean_operator@@Base>
   14eb0:	add	r0, r4, #104	; 0x68
   14eb4:	ldrd	r2, [r0]
   14eb8:	adds	r2, r2, #1
   14ebc:	adc	r3, r3, #0
   14ec0:	strd	r2, [r0]
   14ec4:	ldrd	r0, [r4, #112]	; 0x70
   14ec8:	adds	r0, r0, #1
   14ecc:	adc	r1, r1, #0
   14ed0:	strd	r0, [r4, #112]	; 0x70
   14ed4:	pop	{r4, sl, fp, pc}
   14ed8:	ldrd	r0, [r4, #8]
   14edc:	adds	r0, r0, #1
   14ee0:	adc	r1, r1, #0
   14ee4:	strd	r0, [r4, #8]
   14ee8:	movw	r0, #45280	; 0xb0e0
   14eec:	movt	r0, #2
   14ef0:	ldr	r3, [r0]
   14ef4:	movw	r0, #42032	; 0xa430
   14ef8:	movt	r0, #1
   14efc:	mov	r1, #31
   14f00:	mov	r2, #1
   14f04:	bl	11ef8 <fwrite@plt>
   14f08:	mov	r0, #1
   14f0c:	bl	11f64 <exit@plt>

00014f10 <free_node_id@@Base>:
   14f10:	push	{r4, r5, fp, lr}
   14f14:	add	fp, sp, #8
   14f18:	mov	r4, r0
   14f1c:	movw	r5, #47152	; 0xb830
   14f20:	movt	r5, #2
   14f24:	ldrd	r0, [r5]
   14f28:	adds	r0, r0, #1
   14f2c:	adc	r1, r1, #0
   14f30:	strd	r0, [r5]
   14f34:	ldr	r0, [r4, #4]
   14f38:	cmp	r0, #0
   14f3c:	beq	14f5c <free_node_id@@Base+0x4c>
   14f40:	ldrd	r2, [r5, #8]
   14f44:	adds	r2, r2, #1
   14f48:	adc	r3, r3, #0
   14f4c:	strd	r2, [r5, #8]
   14f50:	bl	14dc4 <free_node@@Base>
   14f54:	add	r0, r5, #24
   14f58:	b	14f60 <free_node_id@@Base+0x50>
   14f5c:	add	r0, r5, #16
   14f60:	ldrd	r2, [r0]
   14f64:	adds	r2, r2, #1
   14f68:	adc	r3, r3, #0
   14f6c:	strd	r2, [r0]
   14f70:	ldrd	r0, [r5, #32]
   14f74:	adds	r0, r0, #1
   14f78:	adc	r1, r1, #0
   14f7c:	strd	r0, [r5, #32]
   14f80:	mov	r0, r4
   14f84:	pop	{r4, r5, fp, lr}
   14f88:	b	11ea4 <free@plt>

00014f8c <free_node_int@@Base>:
   14f8c:	push	{r4, r5, fp, lr}
   14f90:	add	fp, sp, #8
   14f94:	mov	r4, r0
   14f98:	movw	r5, #47200	; 0xb860
   14f9c:	movt	r5, #2
   14fa0:	ldrd	r0, [r5]
   14fa4:	adds	r0, r0, #1
   14fa8:	adc	r1, r1, #0
   14fac:	strd	r0, [r5]
   14fb0:	ldr	r0, [r4, #4]
   14fb4:	cmp	r0, #0
   14fb8:	beq	14fd8 <free_node_int@@Base+0x4c>
   14fbc:	ldrd	r2, [r5, #8]
   14fc0:	adds	r2, r2, #1
   14fc4:	adc	r3, r3, #0
   14fc8:	strd	r2, [r5, #8]
   14fcc:	bl	14dc4 <free_node@@Base>
   14fd0:	add	r0, r5, #24
   14fd4:	b	14fdc <free_node_int@@Base+0x50>
   14fd8:	add	r0, r5, #16
   14fdc:	ldrd	r2, [r0]
   14fe0:	adds	r2, r2, #1
   14fe4:	adc	r3, r3, #0
   14fe8:	strd	r2, [r0]
   14fec:	ldrd	r0, [r5, #32]
   14ff0:	adds	r0, r0, #1
   14ff4:	adc	r1, r1, #0
   14ff8:	strd	r0, [r5, #32]
   14ffc:	mov	r0, r4
   15000:	pop	{r4, r5, fp, lr}
   15004:	b	11ea4 <free@plt>

00015008 <free_node_function@@Base>:
   15008:	push	{r4, r5, fp, lr}
   1500c:	add	fp, sp, #8
   15010:	mov	r4, r0
   15014:	movw	r5, #47248	; 0xb890
   15018:	movt	r5, #2
   1501c:	ldrd	r0, [r5]
   15020:	adds	r0, r0, #1
   15024:	adc	r1, r1, #0
   15028:	strd	r0, [r5]
   1502c:	ldr	r0, [r4, #4]
   15030:	cmp	r0, #0
   15034:	beq	15054 <free_node_function@@Base+0x4c>
   15038:	ldrd	r2, [r5, #8]
   1503c:	adds	r2, r2, #1
   15040:	adc	r3, r3, #0
   15044:	strd	r2, [r5, #8]
   15048:	bl	14dc4 <free_node@@Base>
   1504c:	add	r0, r5, #24
   15050:	b	15058 <free_node_function@@Base+0x50>
   15054:	add	r0, r5, #16
   15058:	ldrd	r2, [r0]
   1505c:	adds	r2, r2, #1
   15060:	adc	r3, r3, #0
   15064:	strd	r2, [r0]
   15068:	ldrd	r0, [r5, #32]
   1506c:	adds	r0, r0, #1
   15070:	adc	r1, r1, #0
   15074:	strd	r0, [r5, #32]
   15078:	ldr	r0, [r4, #8]
   1507c:	bl	11ea4 <free@plt>
   15080:	mov	r0, r4
   15084:	pop	{r4, r5, fp, lr}
   15088:	b	11ea4 <free@plt>

0001508c <free_node_return@@Base>:
   1508c:	push	{r4, r5, fp, lr}
   15090:	add	fp, sp, #8
   15094:	mov	r4, r0
   15098:	movw	r5, #47296	; 0xb8c0
   1509c:	movt	r5, #2
   150a0:	ldrd	r0, [r5]
   150a4:	adds	r0, r0, #1
   150a8:	adc	r1, r1, #0
   150ac:	strd	r0, [r5]
   150b0:	ldr	r0, [r4, #4]
   150b4:	cmp	r0, #0
   150b8:	beq	150d8 <free_node_return@@Base+0x4c>
   150bc:	ldrd	r2, [r5, #8]
   150c0:	adds	r2, r2, #1
   150c4:	adc	r3, r3, #0
   150c8:	strd	r2, [r5, #8]
   150cc:	bl	14dc4 <free_node@@Base>
   150d0:	add	r0, r5, #24
   150d4:	b	150dc <free_node_return@@Base+0x50>
   150d8:	add	r0, r5, #16
   150dc:	ldrd	r2, [r0]
   150e0:	adds	r2, r2, #1
   150e4:	adc	r3, r3, #0
   150e8:	strd	r2, [r0]
   150ec:	ldrd	r0, [r5, #32]
   150f0:	adds	r0, r0, #1
   150f4:	adc	r1, r1, #0
   150f8:	strd	r0, [r5, #32]
   150fc:	mov	r0, r4
   15100:	pop	{r4, r5, fp, lr}
   15104:	b	11ea4 <free@plt>

00015108 <free_node_if@@Base>:
   15108:	push	{r4, r5, fp, lr}
   1510c:	add	fp, sp, #8
   15110:	mov	r4, r0
   15114:	movw	r5, #47344	; 0xb8f0
   15118:	movt	r5, #2
   1511c:	ldrd	r0, [r5]
   15120:	adds	r0, r0, #1
   15124:	adc	r1, r1, #0
   15128:	strd	r0, [r5]
   1512c:	ldr	r0, [r4, #4]
   15130:	cmp	r0, #0
   15134:	beq	15154 <free_node_if@@Base+0x4c>
   15138:	ldrd	r2, [r5, #8]
   1513c:	adds	r2, r2, #1
   15140:	adc	r3, r3, #0
   15144:	strd	r2, [r5, #8]
   15148:	bl	14dc4 <free_node@@Base>
   1514c:	add	r0, r5, #24
   15150:	b	15158 <free_node_if@@Base+0x50>
   15154:	add	r0, r5, #16
   15158:	ldrd	r2, [r0]
   1515c:	adds	r2, r2, #1
   15160:	adc	r3, r3, #0
   15164:	strd	r2, [r0]
   15168:	ldrd	r0, [r5, #32]
   1516c:	adds	r0, r0, #1
   15170:	adc	r1, r1, #0
   15174:	strd	r0, [r5, #32]
   15178:	ldr	r0, [r4, #8]
   1517c:	bl	14dc4 <free_node@@Base>
   15180:	ldr	r0, [r4, #12]
   15184:	bl	14dc4 <free_node@@Base>
   15188:	ldr	r0, [r4, #16]
   1518c:	bl	14dc4 <free_node@@Base>
   15190:	mov	r0, r4
   15194:	pop	{r4, r5, fp, lr}
   15198:	b	11ea4 <free@plt>

0001519c <free_node_boolean_operator@@Base>:
   1519c:	push	{r4, r5, fp, lr}
   151a0:	add	fp, sp, #8
   151a4:	mov	r4, r0
   151a8:	movw	r5, #47392	; 0xb920
   151ac:	movt	r5, #2
   151b0:	ldrd	r0, [r5]
   151b4:	adds	r0, r0, #1
   151b8:	adc	r1, r1, #0
   151bc:	strd	r0, [r5]
   151c0:	ldr	r0, [r4, #4]
   151c4:	cmp	r0, #0
   151c8:	beq	151e8 <free_node_boolean_operator@@Base+0x4c>
   151cc:	ldrd	r2, [r5, #8]
   151d0:	adds	r2, r2, #1
   151d4:	adc	r3, r3, #0
   151d8:	strd	r2, [r5, #8]
   151dc:	bl	14dc4 <free_node@@Base>
   151e0:	add	r0, r5, #24
   151e4:	b	151ec <free_node_boolean_operator@@Base+0x50>
   151e8:	add	r0, r5, #16
   151ec:	ldrd	r2, [r0]
   151f0:	adds	r2, r2, #1
   151f4:	adc	r3, r3, #0
   151f8:	strd	r2, [r0]
   151fc:	ldrd	r0, [r5, #32]
   15200:	adds	r0, r0, #1
   15204:	adc	r1, r1, #0
   15208:	strd	r0, [r5, #32]
   1520c:	ldr	r0, [r4, #8]
   15210:	bl	14dc4 <free_node@@Base>
   15214:	ldr	r0, [r4, #12]
   15218:	bl	14dc4 <free_node@@Base>
   1521c:	mov	r0, r4
   15220:	pop	{r4, r5, fp, lr}
   15224:	b	11ea4 <free@plt>

00015228 <get_boolean_op_value@@Base>:
   15228:	push	{r4, r5, r6, sl, fp, lr}
   1522c:	add	fp, sp, #16
   15230:	movw	r6, #47440	; 0xb950
   15234:	movt	r6, #2
   15238:	ldrd	r2, [r6]
   1523c:	adds	r2, r2, #1
   15240:	adc	r3, r3, #0
   15244:	strd	r2, [r6]
   15248:	ldr	r4, [r0, #4]
   1524c:	mov	r0, r4
   15250:	mov	r1, #2
   15254:	bl	11ff4 <strnlen@plt>
   15258:	cmp	r0, #2
   1525c:	bne	15388 <get_boolean_op_value@@Base+0x160>
   15260:	ldrd	r0, [r6, #8]
   15264:	adds	r0, r0, #1
   15268:	adc	r1, r1, #0
   1526c:	strd	r0, [r6, #8]
   15270:	movw	r1, #42064	; 0xa450
   15274:	movt	r1, #1
   15278:	mov	r0, r4
   1527c:	mov	r2, #2
   15280:	bl	1203c <strncmp@plt>
   15284:	cmp	r0, #0
   15288:	beq	153d0 <get_boolean_op_value@@Base+0x1a8>
   1528c:	ldrd	r0, [r6, #32]
   15290:	adds	r0, r0, #1
   15294:	adc	r1, r1, #0
   15298:	strd	r0, [r6, #32]
   1529c:	movw	r1, #42067	; 0xa453
   152a0:	movt	r1, #1
   152a4:	mov	r0, r4
   152a8:	mov	r2, #2
   152ac:	bl	1203c <strncmp@plt>
   152b0:	cmp	r0, #0
   152b4:	beq	15424 <get_boolean_op_value@@Base+0x1fc>
   152b8:	ldrd	r0, [r6, #56]	; 0x38
   152bc:	adds	r0, r0, #1
   152c0:	adc	r1, r1, #0
   152c4:	strd	r0, [r6, #56]	; 0x38
   152c8:	movw	r1, #42070	; 0xa456
   152cc:	movt	r1, #1
   152d0:	mov	r5, #2
   152d4:	mov	r0, r4
   152d8:	mov	r2, #2
   152dc:	bl	1203c <strncmp@plt>
   152e0:	cmp	r0, #0
   152e4:	beq	15440 <get_boolean_op_value@@Base+0x218>
   152e8:	ldrd	r0, [r6, #80]	; 0x50
   152ec:	adds	r0, r0, #1
   152f0:	adc	r1, r1, #0
   152f4:	strd	r0, [r6, #80]	; 0x50
   152f8:	movw	r1, #42073	; 0xa459
   152fc:	movt	r1, #1
   15300:	mov	r0, r4
   15304:	mov	r2, #2
   15308:	bl	1203c <strncmp@plt>
   1530c:	cmp	r0, #0
   15310:	beq	15458 <get_boolean_op_value@@Base+0x230>
   15314:	ldrd	r0, [r6, #104]	; 0x68
   15318:	adds	r0, r0, #1
   1531c:	adc	r1, r1, #0
   15320:	strd	r0, [r6, #104]	; 0x68
   15324:	movw	r1, #42076	; 0xa45c
   15328:	movt	r1, #1
   1532c:	mov	r0, r4
   15330:	mov	r2, #2
   15334:	bl	1203c <strncmp@plt>
   15338:	cmp	r0, #0
   1533c:	beq	15474 <get_boolean_op_value@@Base+0x24c>
   15340:	ldrd	r0, [r6, #128]	; 0x80
   15344:	adds	r0, r0, #1
   15348:	adc	r1, r1, #0
   1534c:	strd	r0, [r6, #128]	; 0x80
   15350:	movw	r1, #42079	; 0xa45f
   15354:	movt	r1, #1
   15358:	mov	r0, r4
   1535c:	mov	r2, #2
   15360:	bl	1203c <strncmp@plt>
   15364:	cmp	r0, #0
   15368:	bne	154e8 <get_boolean_op_value@@Base+0x2c0>
   1536c:	ldrd	r0, [r6, #144]	; 0x90
   15370:	adds	r0, r0, #1
   15374:	adc	r1, r1, #0
   15378:	strd	r0, [r6, #144]	; 0x90
   1537c:	add	r0, r6, #160	; 0xa0
   15380:	mov	r5, #5
   15384:	b	1548c <get_boolean_op_value@@Base+0x264>
   15388:	ldrd	r0, [r6, #16]
   1538c:	adds	r0, r0, #1
   15390:	adc	r1, r1, #0
   15394:	strd	r0, [r6, #16]
   15398:	ldrb	r0, [r4]
   1539c:	cmp	r0, #62	; 0x3e
   153a0:	beq	15408 <get_boolean_op_value@@Base+0x1e0>
   153a4:	cmp	r0, #60	; 0x3c
   153a8:	beq	153ec <get_boolean_op_value@@Base+0x1c4>
   153ac:	cmp	r0, #33	; 0x21
   153b0:	bne	154b4 <get_boolean_op_value@@Base+0x28c>
   153b4:	ldrd	r0, [r6, #176]	; 0xb0
   153b8:	adds	r0, r0, #1
   153bc:	adc	r1, r1, #0
   153c0:	strd	r0, [r6, #176]	; 0xb0
   153c4:	add	r0, r6, #200	; 0xc8
   153c8:	mov	r5, #8
   153cc:	b	1548c <get_boolean_op_value@@Base+0x264>
   153d0:	ldrd	r0, [r6, #24]
   153d4:	adds	r0, r0, #1
   153d8:	adc	r1, r1, #0
   153dc:	strd	r0, [r6, #24]
   153e0:	add	r0, r6, #40	; 0x28
   153e4:	mov	r5, #0
   153e8:	b	1548c <get_boolean_op_value@@Base+0x264>
   153ec:	ldrd	r0, [r6, #184]	; 0xb8
   153f0:	adds	r0, r0, #1
   153f4:	adc	r1, r1, #0
   153f8:	strd	r0, [r6, #184]	; 0xb8
   153fc:	add	r0, r6, #208	; 0xd0
   15400:	mov	r5, #6
   15404:	b	1548c <get_boolean_op_value@@Base+0x264>
   15408:	ldrd	r0, [r6, #192]	; 0xc0
   1540c:	adds	r0, r0, #1
   15410:	adc	r1, r1, #0
   15414:	strd	r0, [r6, #192]	; 0xc0
   15418:	add	r0, r6, #216	; 0xd8
   1541c:	mov	r5, #7
   15420:	b	1548c <get_boolean_op_value@@Base+0x264>
   15424:	ldrd	r0, [r6, #48]	; 0x30
   15428:	adds	r0, r0, #1
   1542c:	adc	r1, r1, #0
   15430:	strd	r0, [r6, #48]	; 0x30
   15434:	add	r0, r6, #64	; 0x40
   15438:	mov	r5, #1
   1543c:	b	1548c <get_boolean_op_value@@Base+0x264>
   15440:	ldrd	r0, [r6, #72]	; 0x48
   15444:	adds	r0, r0, #1
   15448:	adc	r1, r1, #0
   1544c:	strd	r0, [r6, #72]	; 0x48
   15450:	add	r0, r6, #88	; 0x58
   15454:	b	1548c <get_boolean_op_value@@Base+0x264>
   15458:	ldrd	r0, [r6, #96]	; 0x60
   1545c:	adds	r0, r0, #1
   15460:	adc	r1, r1, #0
   15464:	strd	r0, [r6, #96]	; 0x60
   15468:	add	r0, r6, #112	; 0x70
   1546c:	mov	r5, #3
   15470:	b	1548c <get_boolean_op_value@@Base+0x264>
   15474:	ldrd	r0, [r6, #120]	; 0x78
   15478:	adds	r0, r0, #1
   1547c:	adc	r1, r1, #0
   15480:	strd	r0, [r6, #120]	; 0x78
   15484:	add	r0, r6, #136	; 0x88
   15488:	mov	r5, #4
   1548c:	ldrd	r2, [r0]
   15490:	adds	r2, r2, #1
   15494:	adc	r3, r3, #0
   15498:	strd	r2, [r0]
   1549c:	ldrd	r0, [r6, #224]	; 0xe0
   154a0:	adds	r0, r0, #1
   154a4:	adc	r1, r1, #0
   154a8:	strd	r0, [r6, #224]	; 0xe0
   154ac:	mov	r0, r5
   154b0:	pop	{r4, r5, r6, sl, fp, pc}
   154b4:	ldrd	r0, [r6, #168]	; 0xa8
   154b8:	adds	r0, r0, #1
   154bc:	adc	r1, r1, #0
   154c0:	strd	r0, [r6, #168]	; 0xa8
   154c4:	movw	r0, #45280	; 0xb0e0
   154c8:	movt	r0, #2
   154cc:	ldr	r0, [r0]
   154d0:	movw	r1, #42082	; 0xa462
   154d4:	movt	r1, #1
   154d8:	mov	r2, r4
   154dc:	bl	11f88 <fprintf@plt>
   154e0:	mov	r0, #1
   154e4:	bl	11f64 <exit@plt>
   154e8:	ldrd	r0, [r6, #152]	; 0x98
   154ec:	adds	r0, r0, #1
   154f0:	adc	r1, r1, #0
   154f4:	strd	r0, [r6, #152]	; 0x98
   154f8:	b	154c4 <get_boolean_op_value@@Base+0x29c>
   154fc:	push	{r4, r5, r6, lr}
   15500:	sub	sp, sp, #8
   15504:	movw	r0, #42136	; 0xa498
   15508:	movt	r0, #1
   1550c:	movw	r1, #40122	; 0x9cba
   15510:	movt	r1, #1
   15514:	movw	r2, #31856	; 0x7c70
   15518:	movt	r2, #15338	; 0x3bea
   1551c:	bl	16628 <read_boolean_unary_expression@@Base+0x39c>
   15520:	movw	r0, #42816	; 0xa740
   15524:	movt	r0, #1
   15528:	add	r4, r0, #4
   1552c:	mov	r5, #0
   15530:	movw	r6, #42496	; 0xa600
   15534:	movt	r6, #1
   15538:	mov	r3, r6
   1553c:	ldr	r0, [r3, r5]!
   15540:	ldr	r1, [r3, #16]
   15544:	str	r1, [sp]
   15548:	ldmib	r3, {r1, r2}
   1554c:	ldrb	r3, [r3, #12]
   15550:	bl	16d48 <read_boolean_unary_expression@@Base+0xabc>
   15554:	ldrd	r0, [r4, #-4]
   15558:	bl	175fc <read_boolean_unary_expression@@Base+0x1370>
   1555c:	add	r5, r5, #20
   15560:	add	r4, r4, #8
   15564:	cmp	r5, #320	; 0x140
   15568:	bne	15538 <get_boolean_op_value@@Base+0x310>
   1556c:	bl	17d84 <read_boolean_unary_expression@@Base+0x1af8>
   15570:	add	sp, sp, #8
   15574:	pop	{r4, r5, r6, lr}
   15578:	b	18af0 <read_boolean_unary_expression@@Base+0x2864>
   1557c:	push	{fp, lr}
   15580:	bl	154fc <get_boolean_op_value@@Base+0x2d4>
   15584:	vmov.i32	q8, #0	; 0x00000000
   15588:	mov	r0, #36	; 0x24
   1558c:	movw	ip, #47152	; 0xb830
   15590:	movt	ip, #2
   15594:	mov	r3, ip
   15598:	vst1.64	{d16-d17}, [r3 :128], r0
   1559c:	mov	r1, #0
   155a0:	str	r1, [r3]
   155a4:	movw	r3, #46912	; 0xb740
   155a8:	movt	r3, #2
   155ac:	vst1.64	{d16-d17}, [r3]
   155b0:	movw	r3, #46896	; 0xb730
   155b4:	movt	r3, #2
   155b8:	vst1.64	{d16-d17}, [r3]
   155bc:	movw	r3, #46928	; 0xb750
   155c0:	movt	r3, #2
   155c4:	vst1.64	{d16-d17}, [r3]
   155c8:	movw	r3, #46944	; 0xb760
   155cc:	movt	r3, #2
   155d0:	vst1.64	{d16-d17}, [r3]
   155d4:	movw	r3, #46960	; 0xb770
   155d8:	movt	r3, #2
   155dc:	vst1.64	{d16-d17}, [r3]
   155e0:	movw	r3, #46976	; 0xb780
   155e4:	movt	r3, #2
   155e8:	vst1.64	{d16-d17}, [r3]
   155ec:	movw	r3, #46992	; 0xb790
   155f0:	movt	r3, #2
   155f4:	vst1.64	{d16-d17}, [r3]
   155f8:	movw	r3, #47008	; 0xb7a0
   155fc:	movt	r3, #2
   15600:	vst1.64	{d16-d17}, [r3]
   15604:	movw	r3, #47024	; 0xb7b0
   15608:	movt	r3, #2
   1560c:	add	r2, r3, #16
   15610:	vst1.64	{d16-d17}, [r2 :128]
   15614:	add	r2, r3, #32
   15618:	vst1.64	{d16-d17}, [r2 :128]
   1561c:	add	r2, r3, #48	; 0x30
   15620:	vst1.64	{d16-d17}, [r2 :128]
   15624:	add	r2, r3, #64	; 0x40
   15628:	vst1.64	{d16-d17}, [r2 :128]
   1562c:	add	r2, r3, #80	; 0x50
   15630:	vst1.64	{d16-d17}, [r2 :128]
   15634:	add	r2, r3, #96	; 0x60
   15638:	vst1.64	{d16-d17}, [r2 :128]
   1563c:	str	r1, [r3, #112]	; 0x70
   15640:	add	r2, ip, #16
   15644:	vst1.64	{d16-d17}, [r2 :128]
   15648:	str	r1, [ip, #32]
   1564c:	mov	r2, #116	; 0x74
   15650:	vst1.64	{d16-d17}, [r3 :128], r2
   15654:	str	r1, [r3]
   15658:	movw	r2, #47200	; 0xb860
   1565c:	movt	r2, #2
   15660:	add	r3, r2, #16
   15664:	vst1.64	{d16-d17}, [r3 :128]
   15668:	str	r1, [r2, #32]
   1566c:	vst1.64	{d16-d17}, [r2 :128], r0
   15670:	str	r1, [r2]
   15674:	movw	r2, #47248	; 0xb890
   15678:	movt	r2, #2
   1567c:	mov	r3, r2
   15680:	vst1.64	{d16-d17}, [r3 :128], r0
   15684:	str	r1, [r3]
   15688:	add	r3, r2, #16
   1568c:	vst1.64	{d16-d17}, [r3 :128]
   15690:	str	r1, [r2, #32]
   15694:	movw	r2, #47296	; 0xb8c0
   15698:	movt	r2, #2
   1569c:	str	r1, [r2, #32]
   156a0:	add	r3, r2, #16
   156a4:	vst1.64	{d16-d17}, [r3 :128]
   156a8:	vst1.64	{d16-d17}, [r2 :128], r0
   156ac:	str	r1, [r2]
   156b0:	movw	r2, #47344	; 0xb8f0
   156b4:	movt	r2, #2
   156b8:	mov	r3, r2
   156bc:	vst1.64	{d16-d17}, [r3 :128], r0
   156c0:	str	r1, [r3]
   156c4:	str	r1, [r2, #32]
   156c8:	add	r2, r2, #16
   156cc:	vst1.64	{d16-d17}, [r2 :128]
   156d0:	movw	r2, #47392	; 0xb920
   156d4:	movt	r2, #2
   156d8:	str	r1, [r2, #32]
   156dc:	add	r3, r2, #16
   156e0:	vst1.64	{d16-d17}, [r3 :128]
   156e4:	vst1.64	{d16-d17}, [r2 :128], r0
   156e8:	str	r1, [r2]
   156ec:	movw	r0, #47440	; 0xb950
   156f0:	movt	r0, #2
   156f4:	mov	r1, #0
   156f8:	mov	r2, #232	; 0xe8
   156fc:	bl	11fb8 <memset@plt>
   15700:	pop	{fp, pc}
   15704:	movw	r0, #21756	; 0x54fc
   15708:	movt	r0, #1
   1570c:	movw	r1, #21884	; 0x557c
   15710:	movt	r1, #1
   15714:	b	18fa4 <__gcov_flush@@Base+0xb8>

00015718 <init_grammar@@Base>:
   15718:	push	{r4, sl, fp, lr}
   1571c:	add	fp, sp, #8
   15720:	movw	r2, #47680	; 0xba40
   15724:	movt	r2, #2
   15728:	ldm	r2, {r3, ip, lr}
   1572c:	ldr	r4, [r2, #12]
   15730:	adds	r3, r3, #1
   15734:	adc	ip, ip, #0
   15738:	adds	lr, lr, #1
   1573c:	adc	r4, r4, #0
   15740:	stm	r2, {r3, ip, lr}
   15744:	str	r4, [r2, #12]
   15748:	str	r1, [r0]
   1574c:	pop	{r4, sl, fp, pc}

00015750 <destroy_grammar@@Base>:
   15750:	movw	r0, #47696	; 0xba50
   15754:	movt	r0, #2
   15758:	ldm	r0, {r1, r2, r3, ip}
   1575c:	adds	r1, r1, #1
   15760:	adc	r2, r2, #0
   15764:	adds	r3, r3, #1
   15768:	adc	ip, ip, #0
   1576c:	stm	r0, {r1, r2, r3, ip}
   15770:	bx	lr

00015774 <build_ast@@Base>:
   15774:	push	{fp, lr}
   15778:	mov	fp, sp
   1577c:	movw	r1, #47712	; 0xba60
   15780:	movt	r1, #2
   15784:	ldm	r1, {r2, r3, ip, lr}
   15788:	adds	r2, r2, #1
   1578c:	adc	r3, r3, #0
   15790:	adds	ip, ip, #1
   15794:	adc	lr, lr, #0
   15798:	stm	r1, {r2, r3, ip, lr}
   1579c:	pop	{fp, lr}
   157a0:	b	157a4 <read_function_ast_node@@Base>

000157a4 <read_function_ast_node@@Base>:
   157a4:	push	{r4, r5, r6, r7, fp, lr}
   157a8:	add	fp, sp, #16
   157ac:	mov	r4, r0
   157b0:	movw	r7, #47728	; 0xba70
   157b4:	movt	r7, #2
   157b8:	ldrd	r0, [r7]
   157bc:	adds	r0, r0, #1
   157c0:	adc	r1, r1, #0
   157c4:	strd	r0, [r7]
   157c8:	ldr	r0, [r4]
   157cc:	bl	12150 <next@@Base>
   157d0:	ldr	r1, [r0]
   157d4:	cmp	r1, #0
   157d8:	beq	157f4 <read_function_ast_node@@Base+0x50>
   157dc:	ldrd	r0, [r7, #8]
   157e0:	adds	r0, r0, #1
   157e4:	adc	r1, r1, #0
   157e8:	strd	r0, [r7, #8]
   157ec:	add	r0, r7, #24
   157f0:	b	158f8 <read_function_ast_node@@Base+0x154>
   157f4:	ldrd	r2, [r7, #16]
   157f8:	adds	r2, r2, #1
   157fc:	adc	r3, r3, #0
   15800:	strd	r2, [r7, #16]
   15804:	bl	146d0 <free_token_int_type@@Base>
   15808:	ldr	r0, [r4]
   1580c:	bl	12150 <next@@Base>
   15810:	mov	r5, r0
   15814:	ldr	r0, [r0]
   15818:	cmp	r0, #2
   1581c:	bne	158b4 <read_function_ast_node@@Base+0x110>
   15820:	ldrd	r0, [r7, #40]	; 0x28
   15824:	adds	r0, r0, #1
   15828:	adc	r1, r1, #0
   1582c:	strd	r0, [r7, #40]	; 0x28
   15830:	ldr	r0, [r4]
   15834:	bl	12150 <next@@Base>
   15838:	ldr	r1, [r0]
   1583c:	cmp	r1, #3
   15840:	bne	158cc <read_function_ast_node@@Base+0x128>
   15844:	ldrd	r2, [r7, #64]	; 0x40
   15848:	adds	r2, r2, #1
   1584c:	adc	r3, r3, #0
   15850:	strd	r2, [r7, #64]	; 0x40
   15854:	bl	14760 <free_token_opar@@Base>
   15858:	ldr	r0, [r4]
   1585c:	bl	12150 <next@@Base>
   15860:	ldr	r1, [r0]
   15864:	cmp	r1, #4
   15868:	bne	158e4 <read_function_ast_node@@Base+0x140>
   1586c:	ldrd	r2, [r7, #88]	; 0x58
   15870:	adds	r2, r2, #1
   15874:	adc	r3, r3, #0
   15878:	strd	r2, [r7, #88]	; 0x58
   1587c:	bl	14790 <free_token_cpar@@Base>
   15880:	mov	r0, r4
   15884:	bl	15924 <read_body@@Base>
   15888:	mov	r6, r0
   1588c:	mov	r0, #16
   15890:	bl	11f28 <malloc@plt>
   15894:	mov	r4, r0
   15898:	ldr	r1, [r5, #4]
   1589c:	mov	r2, r6
   158a0:	bl	14c84 <init_node_function@@Base>
   158a4:	mov	r0, r5
   158a8:	bl	14730 <free_token_function@@Base>
   158ac:	add	r0, r7, #104	; 0x68
   158b0:	b	158fc <read_function_ast_node@@Base+0x158>
   158b4:	ldrd	r0, [r7, #32]
   158b8:	adds	r0, r0, #1
   158bc:	adc	r1, r1, #0
   158c0:	strd	r0, [r7, #32]
   158c4:	add	r0, r7, #48	; 0x30
   158c8:	b	158f8 <read_function_ast_node@@Base+0x154>
   158cc:	ldrd	r0, [r7, #56]	; 0x38
   158d0:	adds	r0, r0, #1
   158d4:	adc	r1, r1, #0
   158d8:	strd	r0, [r7, #56]	; 0x38
   158dc:	add	r0, r7, #72	; 0x48
   158e0:	b	158f8 <read_function_ast_node@@Base+0x154>
   158e4:	ldrd	r0, [r7, #80]	; 0x50
   158e8:	adds	r0, r0, #1
   158ec:	adc	r1, r1, #0
   158f0:	strd	r0, [r7, #80]	; 0x50
   158f4:	add	r0, r7, #96	; 0x60
   158f8:	mov	r4, #0
   158fc:	ldrd	r2, [r0]
   15900:	adds	r2, r2, #1
   15904:	adc	r3, r3, #0
   15908:	strd	r2, [r0]
   1590c:	ldrd	r0, [r7, #112]	; 0x70
   15910:	adds	r0, r0, #1
   15914:	adc	r1, r1, #0
   15918:	strd	r0, [r7, #112]	; 0x70
   1591c:	mov	r0, r4
   15920:	pop	{r4, r5, r6, r7, fp, pc}

00015924 <read_body@@Base>:
   15924:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15928:	add	fp, sp, #28
   1592c:	sub	sp, sp, #4
   15930:	mov	r4, r0
   15934:	movw	r7, #47856	; 0xbaf0
   15938:	movt	r7, #2
   1593c:	ldrd	r0, [r7]
   15940:	adds	r0, r0, #1
   15944:	adc	r1, r1, #0
   15948:	strd	r0, [r7]
   1594c:	ldr	r0, [r4]
   15950:	bl	12150 <next@@Base>
   15954:	ldr	r1, [r0]
   15958:	cmp	r1, #5
   1595c:	bne	15ad4 <read_body@@Base+0x1b0>
   15960:	ldrd	r2, [r7, #16]
   15964:	adds	r2, r2, #1
   15968:	adc	r3, r3, #0
   1596c:	strd	r2, [r7, #16]
   15970:	bl	147c0 <free_token_obra@@Base>
   15974:	ldr	r0, [r4]
   15978:	bl	12150 <next@@Base>
   1597c:	mov	r1, r0
   15980:	ldr	r0, [r7, #32]
   15984:	ldr	r3, [r7, #36]	; 0x24
   15988:	adds	r0, r0, #1
   1598c:	adc	r3, r3, #0
   15990:	str	r0, [r7, #32]
   15994:	str	r3, [r7, #36]	; 0x24
   15998:	ldr	r0, [r1]
   1599c:	mov	sl, #0
   159a0:	cmp	r0, #6
   159a4:	beq	15af0 <read_body@@Base+0x1cc>
   159a8:	mov	r5, #0
   159ac:	add	r9, r7, #88	; 0x58
   159b0:	add	r2, r7, #128	; 0x80
   159b4:	str	r2, [sp]
   159b8:	mov	sl, #0
   159bc:	b	15a1c <read_body@@Base+0xf8>
   159c0:	ldrd	r0, [r7, #112]	; 0x70
   159c4:	adds	r0, r0, #1
   159c8:	adc	r1, r1, #0
   159cc:	strd	r0, [r7, #112]	; 0x70
   159d0:	ldr	r0, [sp]
   159d4:	mov	sl, r6
   159d8:	ldrd	r2, [r0]
   159dc:	adds	r2, r2, #1
   159e0:	adc	r3, r3, #0
   159e4:	strd	r2, [r0]
   159e8:	ldr	r0, [r4]
   159ec:	bl	12150 <next@@Base>
   159f0:	mov	r1, r0
   159f4:	ldr	r0, [r7, #136]	; 0x88
   159f8:	ldr	r3, [r7, #140]	; 0x8c
   159fc:	adds	r0, r0, #1
   15a00:	adc	r3, r3, #0
   15a04:	str	r0, [r7, #136]	; 0x88
   15a08:	str	r3, [r7, #140]	; 0x8c
   15a0c:	ldr	r0, [r1]
   15a10:	cmp	r0, #6
   15a14:	mov	r5, r6
   15a18:	beq	15af0 <read_body@@Base+0x1cc>
   15a1c:	ldrd	r2, [r7, #40]	; 0x28
   15a20:	adds	r2, r2, #1
   15a24:	adc	r3, r3, #0
   15a28:	strd	r2, [r7, #40]	; 0x28
   15a2c:	cmp	r0, #10
   15a30:	beq	15a70 <read_body@@Base+0x14c>
   15a34:	cmp	r0, #7
   15a38:	bne	15b18 <read_body@@Base+0x1f4>
   15a3c:	ldr	r0, [r7, #64]	; 0x40
   15a40:	ldr	r3, [r7, #68]	; 0x44
   15a44:	adds	r0, r0, #1
   15a48:	adc	r3, r3, #0
   15a4c:	str	r0, [r7, #64]	; 0x40
   15a50:	str	r3, [r7, #68]	; 0x44
   15a54:	mov	r0, r1
   15a58:	bl	14820 <free_token_return@@Base>
   15a5c:	add	r8, r7, #80	; 0x50
   15a60:	mov	r0, r4
   15a64:	bl	15b68 <read_return_expression@@Base>
   15a68:	mov	r6, r0
   15a6c:	b	15aa0 <read_body@@Base+0x17c>
   15a70:	ldr	r0, [r7, #72]	; 0x48
   15a74:	ldr	r3, [r7, #76]	; 0x4c
   15a78:	adds	r0, r0, #1
   15a7c:	adc	r3, r3, #0
   15a80:	str	r0, [r7, #72]	; 0x48
   15a84:	str	r3, [r7, #76]	; 0x4c
   15a88:	mov	r0, r1
   15a8c:	bl	148b0 <free_token_if@@Base>
   15a90:	mov	r0, r4
   15a94:	bl	15c6c <read_if_statement@@Base>
   15a98:	mov	r6, r0
   15a9c:	mov	r8, r9
   15aa0:	ldrd	r0, [r8]
   15aa4:	adds	r0, r0, #1
   15aa8:	adc	r1, r1, #0
   15aac:	strd	r0, [r8]
   15ab0:	cmp	sl, #0
   15ab4:	beq	159c0 <read_body@@Base+0x9c>
   15ab8:	ldrd	r0, [r7, #104]	; 0x68
   15abc:	adds	r0, r0, #1
   15ac0:	adc	r1, r1, #0
   15ac4:	strd	r0, [r7, #104]	; 0x68
   15ac8:	str	r6, [r5, #4]
   15acc:	add	r0, r7, #120	; 0x78
   15ad0:	b	159d8 <read_body@@Base+0xb4>
   15ad4:	ldrd	r0, [r7, #8]
   15ad8:	adds	r0, r0, #1
   15adc:	adc	r1, r1, #0
   15ae0:	strd	r0, [r7, #8]
   15ae4:	add	r0, r7, #24
   15ae8:	mov	sl, #0
   15aec:	b	15b3c <read_body@@Base+0x218>
   15af0:	ldr	r0, [r7, #48]	; 0x30
   15af4:	ldr	r3, [r7, #52]	; 0x34
   15af8:	adds	r0, r0, #1
   15afc:	adc	r3, r3, #0
   15b00:	str	r0, [r7, #48]	; 0x30
   15b04:	str	r3, [r7, #52]	; 0x34
   15b08:	mov	r0, r1
   15b0c:	bl	147f0 <free_token_cbra@@Base>
   15b10:	add	r0, r7, #144	; 0x90
   15b14:	b	15b3c <read_body@@Base+0x218>
   15b18:	ldr	r0, [r7, #56]	; 0x38
   15b1c:	ldr	r3, [r7, #60]	; 0x3c
   15b20:	adds	r0, r0, #1
   15b24:	adc	r3, r3, #0
   15b28:	str	r0, [r7, #56]	; 0x38
   15b2c:	str	r3, [r7, #60]	; 0x3c
   15b30:	ldr	r0, [r4]
   15b34:	bl	12378 <push_back@@Base>
   15b38:	add	r0, r7, #96	; 0x60
   15b3c:	ldrd	r2, [r0]
   15b40:	adds	r2, r2, #1
   15b44:	adc	r3, r3, #0
   15b48:	strd	r2, [r0]
   15b4c:	ldrd	r0, [r7, #152]	; 0x98
   15b50:	adds	r0, r0, #1
   15b54:	adc	r1, r1, #0
   15b58:	strd	r0, [r7, #152]	; 0x98
   15b5c:	mov	r0, sl
   15b60:	sub	sp, fp, #28
   15b64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015b68 <read_return_expression@@Base>:
   15b68:	push	{r4, r5, r6, r7, fp, lr}
   15b6c:	add	fp, sp, #16
   15b70:	mov	r5, r0
   15b74:	movw	r7, #48016	; 0xbb90
   15b78:	movt	r7, #2
   15b7c:	ldrd	r0, [r7]
   15b80:	adds	r0, r0, #1
   15b84:	adc	r1, r1, #0
   15b88:	strd	r0, [r7]
   15b8c:	ldr	r0, [r5]
   15b90:	bl	12150 <next@@Base>
   15b94:	mov	r4, r0
   15b98:	ldr	r0, [r0]
   15b9c:	cmp	r0, #1
   15ba0:	bne	15c14 <read_return_expression@@Base+0xac>
   15ba4:	ldrd	r0, [r7, #16]
   15ba8:	adds	r0, r0, #1
   15bac:	adc	r1, r1, #0
   15bb0:	strd	r0, [r7, #16]
   15bb4:	mov	r0, #12
   15bb8:	bl	11f28 <malloc@plt>
   15bbc:	mov	r6, r0
   15bc0:	ldr	r1, [r4, #4]
   15bc4:	bl	14c40 <init_node_int@@Base>
   15bc8:	mov	r0, r4
   15bcc:	bl	14700 <free_token_int_value@@Base>
   15bd0:	mov	r0, #12
   15bd4:	bl	11f28 <malloc@plt>
   15bd8:	mov	r4, r0
   15bdc:	mov	r1, r6
   15be0:	bl	14cd0 <init_node_return@@Base>
   15be4:	ldr	r0, [r5]
   15be8:	bl	12150 <next@@Base>
   15bec:	ldr	r1, [r0]
   15bf0:	cmp	r1, #8
   15bf4:	bne	15c2c <read_return_expression@@Base+0xc4>
   15bf8:	ldrd	r2, [r7, #40]	; 0x28
   15bfc:	adds	r2, r2, #1
   15c00:	adc	r3, r3, #0
   15c04:	strd	r2, [r7, #40]	; 0x28
   15c08:	bl	14850 <free_token_semicolon@@Base>
   15c0c:	add	r0, r7, #56	; 0x38
   15c10:	b	15c44 <read_return_expression@@Base+0xdc>
   15c14:	ldrd	r0, [r7, #8]
   15c18:	adds	r0, r0, #1
   15c1c:	adc	r1, r1, #0
   15c20:	strd	r0, [r7, #8]
   15c24:	add	r0, r7, #24
   15c28:	b	15c40 <read_return_expression@@Base+0xd8>
   15c2c:	ldrd	r0, [r7, #32]
   15c30:	adds	r0, r0, #1
   15c34:	adc	r1, r1, #0
   15c38:	strd	r0, [r7, #32]
   15c3c:	add	r0, r7, #48	; 0x30
   15c40:	mov	r4, #0
   15c44:	ldrd	r2, [r0]
   15c48:	adds	r2, r2, #1
   15c4c:	adc	r3, r3, #0
   15c50:	strd	r2, [r0]
   15c54:	ldrd	r0, [r7, #64]	; 0x40
   15c58:	adds	r0, r0, #1
   15c5c:	adc	r1, r1, #0
   15c60:	strd	r0, [r7, #64]	; 0x40
   15c64:	mov	r0, r4
   15c68:	pop	{r4, r5, r6, r7, fp, pc}

00015c6c <read_if_statement@@Base>:
   15c6c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15c70:	add	fp, sp, #24
   15c74:	mov	r5, r0
   15c78:	movw	r4, #48096	; 0xbbe0
   15c7c:	movt	r4, #2
   15c80:	ldrd	r0, [r4]
   15c84:	adds	r0, r0, #1
   15c88:	adc	r1, r1, #0
   15c8c:	strd	r0, [r4]
   15c90:	ldr	r0, [r5]
   15c94:	bl	12150 <next@@Base>
   15c98:	ldr	r1, [r0]
   15c9c:	cmp	r1, #3
   15ca0:	bne	15d1c <read_if_statement@@Base+0xb0>
   15ca4:	ldrd	r2, [r4, #16]
   15ca8:	adds	r2, r2, #1
   15cac:	adc	r3, r3, #0
   15cb0:	strd	r2, [r4, #16]
   15cb4:	bl	14760 <free_token_opar@@Base>
   15cb8:	mov	r0, r5
   15cbc:	bl	15db8 <read_boolean_expression@@Base>
   15cc0:	mov	r8, r0
   15cc4:	mov	r0, r5
   15cc8:	bl	15924 <read_body@@Base>
   15ccc:	mov	r9, r0
   15cd0:	ldr	r0, [r5]
   15cd4:	bl	12150 <next@@Base>
   15cd8:	mov	r1, r0
   15cdc:	ldr	r0, [r0]
   15ce0:	cmp	r0, #11
   15ce4:	bne	15d38 <read_if_statement@@Base+0xcc>
   15ce8:	ldr	r0, [r4, #32]
   15cec:	ldr	r3, [r4, #36]	; 0x24
   15cf0:	adds	r0, r0, #1
   15cf4:	adc	r3, r3, #0
   15cf8:	str	r0, [r4, #32]
   15cfc:	str	r3, [r4, #36]	; 0x24
   15d00:	mov	r0, r1
   15d04:	bl	148e0 <free_token_else@@Base>
   15d08:	add	r6, r4, #48	; 0x30
   15d0c:	mov	r0, r5
   15d10:	bl	15924 <read_body@@Base>
   15d14:	mov	r7, r0
   15d18:	b	15d60 <read_if_statement@@Base+0xf4>
   15d1c:	ldrd	r0, [r4, #8]
   15d20:	adds	r0, r0, #1
   15d24:	adc	r1, r1, #0
   15d28:	strd	r0, [r4, #8]
   15d2c:	add	r0, r4, #24
   15d30:	mov	r5, #0
   15d34:	b	15d90 <read_if_statement@@Base+0x124>
   15d38:	ldr	r0, [r4, #40]	; 0x28
   15d3c:	ldr	r3, [r4, #44]	; 0x2c
   15d40:	adds	r0, r0, #1
   15d44:	adc	r3, r3, #0
   15d48:	str	r0, [r4, #40]	; 0x28
   15d4c:	str	r3, [r4, #44]	; 0x2c
   15d50:	ldr	r0, [r5]
   15d54:	bl	12378 <push_back@@Base>
   15d58:	add	r6, r4, #56	; 0x38
   15d5c:	mov	r7, #0
   15d60:	ldrd	r0, [r6]
   15d64:	adds	r0, r0, #1
   15d68:	adc	r1, r1, #0
   15d6c:	strd	r0, [r6]
   15d70:	mov	r0, #20
   15d74:	bl	11f28 <malloc@plt>
   15d78:	mov	r5, r0
   15d7c:	mov	r1, r8
   15d80:	mov	r2, r9
   15d84:	mov	r3, r7
   15d88:	bl	14d14 <init_node_if@@Base>
   15d8c:	add	r0, r4, #64	; 0x40
   15d90:	ldrd	r2, [r0]
   15d94:	adds	r2, r2, #1
   15d98:	adc	r3, r3, #0
   15d9c:	strd	r2, [r0]
   15da0:	ldrd	r0, [r4, #72]	; 0x48
   15da4:	adds	r0, r0, #1
   15da8:	adc	r1, r1, #0
   15dac:	strd	r0, [r4, #72]	; 0x48
   15db0:	mov	r0, r5
   15db4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00015db8 <read_boolean_expression@@Base>:
   15db8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dbc:	add	fp, sp, #28
   15dc0:	sub	sp, sp, #4
   15dc4:	mov	r5, r0
   15dc8:	movw	r6, #48176	; 0xbc30
   15dcc:	movt	r6, #2
   15dd0:	ldrd	r0, [r6]
   15dd4:	adds	r0, r0, #1
   15dd8:	adc	r1, r1, #0
   15ddc:	strd	r0, [r6]
   15de0:	mov	r4, #0
   15de4:	str	r4, [sp]
   15de8:	ldr	r0, [r5]
   15dec:	bl	12150 <next@@Base>
   15df0:	mov	r1, r0
   15df4:	ldr	r0, [r6, #8]
   15df8:	ldr	r3, [r6, #12]
   15dfc:	adds	r0, r0, #1
   15e00:	adc	r3, r3, #0
   15e04:	str	r0, [r6, #8]
   15e08:	str	r3, [r6, #12]
   15e0c:	ldr	r0, [r1]
   15e10:	cmp	r0, #4
   15e14:	beq	15f30 <read_boolean_expression@@Base+0x178>
   15e18:	mov	r4, #0
   15e1c:	mov	r9, #1
   15e20:	add	sl, r6, #72	; 0x48
   15e24:	mov	r8, sp
   15e28:	b	15e98 <read_boolean_expression@@Base+0xe0>
   15e2c:	ldrd	r0, [r6, #56]	; 0x38
   15e30:	adds	r0, r0, #1
   15e34:	adc	r1, r1, #0
   15e38:	strd	r0, [r6, #56]	; 0x38
   15e3c:	mov	r0, r5
   15e40:	mov	r1, r4
   15e44:	mov	r2, r8
   15e48:	mov	r3, r7
   15e4c:	bl	15fac <read_single_boolean_expression@@Base>
   15e50:	mov	r4, r0
   15e54:	add	r0, r6, #80	; 0x50
   15e58:	ldrd	r2, [r0]
   15e5c:	adds	r2, r2, #1
   15e60:	adc	r3, r3, #0
   15e64:	strd	r2, [r0]
   15e68:	ldr	r0, [r5]
   15e6c:	bl	12150 <next@@Base>
   15e70:	mov	r1, r0
   15e74:	ldr	r0, [r6, #88]	; 0x58
   15e78:	ldr	r3, [r6, #92]	; 0x5c
   15e7c:	adds	r0, r0, #1
   15e80:	adc	r3, r3, #0
   15e84:	str	r0, [r6, #88]	; 0x58
   15e88:	str	r3, [r6, #92]	; 0x5c
   15e8c:	ldr	r0, [r1]
   15e90:	cmp	r0, #4
   15e94:	beq	15f30 <read_boolean_expression@@Base+0x178>
   15e98:	ldrd	r2, [r6, #16]
   15e9c:	adds	r2, r2, #1
   15ea0:	adc	r3, r3, #0
   15ea4:	strd	r2, [r6, #16]
   15ea8:	cmp	r0, #12
   15eac:	beq	15f00 <read_boolean_expression@@Base+0x148>
   15eb0:	cmp	r0, #3
   15eb4:	beq	15e2c <read_boolean_expression@@Base+0x74>
   15eb8:	cmp	r0, #1
   15ebc:	bne	15f74 <read_boolean_expression@@Base+0x1bc>
   15ec0:	ldr	r0, [r6, #40]	; 0x28
   15ec4:	ldr	r3, [r6, #44]	; 0x2c
   15ec8:	adds	r0, r0, #1
   15ecc:	adc	r3, r3, #0
   15ed0:	str	r0, [r6, #40]	; 0x28
   15ed4:	str	r3, [r6, #44]	; 0x2c
   15ed8:	ldr	r0, [r5]
   15edc:	bl	12378 <push_back@@Base>
   15ee0:	mov	r0, r5
   15ee4:	mov	r1, r4
   15ee8:	mov	r2, r8
   15eec:	mov	r3, r7
   15ef0:	bl	15fac <read_single_boolean_expression@@Base>
   15ef4:	mov	r4, r0
   15ef8:	add	r0, r6, #64	; 0x40
   15efc:	b	15e58 <read_boolean_expression@@Base+0xa0>
   15f00:	ldr	r0, [r6, #48]	; 0x30
   15f04:	ldr	r3, [r6, #52]	; 0x34
   15f08:	adds	r0, r0, #1
   15f0c:	adc	r3, r3, #0
   15f10:	str	r0, [r6, #48]	; 0x30
   15f14:	str	r3, [r6, #52]	; 0x34
   15f18:	mov	r0, r1
   15f1c:	bl	15228 <get_boolean_op_value@@Base>
   15f20:	mov	r7, r0
   15f24:	str	r9, [sp]
   15f28:	mov	r0, sl
   15f2c:	b	15e58 <read_boolean_expression@@Base+0xa0>
   15f30:	ldr	r0, [r6, #24]
   15f34:	ldr	r3, [r6, #28]
   15f38:	ldr	r2, [r6, #96]	; 0x60
   15f3c:	ldr	r5, [r6, #100]	; 0x64
   15f40:	adds	r0, r0, #1
   15f44:	adc	r3, r3, #0
   15f48:	adds	r2, r2, #1
   15f4c:	str	r2, [r6, #96]	; 0x60
   15f50:	str	r0, [r6, #24]
   15f54:	str	r3, [r6, #28]
   15f58:	adc	r0, r5, #0
   15f5c:	str	r0, [r6, #100]	; 0x64
   15f60:	mov	r0, r1
   15f64:	bl	14790 <free_token_cpar@@Base>
   15f68:	mov	r0, r4
   15f6c:	sub	sp, fp, #28
   15f70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f74:	ldrd	r0, [r6, #32]
   15f78:	adds	r0, r0, #1
   15f7c:	adc	r1, r1, #0
   15f80:	strd	r0, [r6, #32]
   15f84:	movw	r0, #45280	; 0xb0e0
   15f88:	movt	r0, #2
   15f8c:	ldr	r3, [r0]
   15f90:	movw	r0, #42944	; 0xa7c0
   15f94:	movt	r0, #1
   15f98:	mov	r1, #33	; 0x21
   15f9c:	mov	r2, #1
   15fa0:	bl	11ef8 <fwrite@plt>
   15fa4:	mov	r0, #1
   15fa8:	bl	11f64 <exit@plt>

00015fac <read_single_boolean_expression@@Base>:
   15fac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15fb0:	add	fp, sp, #24
   15fb4:	mov	r8, r3
   15fb8:	mov	r4, r2
   15fbc:	movw	r5, #48288	; 0xbca0
   15fc0:	movt	r5, #2
   15fc4:	ldrd	r2, [r5]
   15fc8:	adds	r2, r2, #1
   15fcc:	adc	r3, r3, #0
   15fd0:	strd	r2, [r5]
   15fd4:	cmp	r1, #0
   15fd8:	beq	1603c <read_single_boolean_expression@@Base+0x90>
   15fdc:	ldrd	r2, [r5, #16]
   15fe0:	adds	r2, r2, #1
   15fe4:	adc	r3, r3, #0
   15fe8:	strd	r2, [r5, #16]
   15fec:	ldr	r1, [r4]
   15ff0:	cmp	r1, #0
   15ff4:	beq	16080 <read_single_boolean_expression@@Base+0xd4>
   15ff8:	ldrd	r2, [r5, #32]
   15ffc:	adds	r2, r2, #1
   16000:	adc	r3, r3, #0
   16004:	strd	r2, [r5, #32]
   16008:	bl	160b8 <read_boolean_binary_expression@@Base>
   1600c:	mov	r7, r0
   16010:	mov	r0, #20
   16014:	bl	11f28 <malloc@plt>
   16018:	mov	r6, r0
   1601c:	mov	r9, #0
   16020:	mov	r1, r8
   16024:	mov	r2, #0
   16028:	mov	r3, r7
   1602c:	bl	14d68 <init_node_boolean_operator@@Base>
   16030:	str	r9, [r4]
   16034:	add	r4, r5, #48	; 0x30
   16038:	b	16058 <read_single_boolean_expression@@Base+0xac>
   1603c:	ldrd	r2, [r5, #8]
   16040:	adds	r2, r2, #1
   16044:	adc	r3, r3, #0
   16048:	strd	r2, [r5, #8]
   1604c:	add	r4, r5, #24
   16050:	bl	160b8 <read_boolean_binary_expression@@Base>
   16054:	mov	r6, r0
   16058:	ldrd	r0, [r4]
   1605c:	adds	r0, r0, #1
   16060:	adc	r1, r1, #0
   16064:	strd	r0, [r4]
   16068:	ldrd	r0, [r5, #56]	; 0x38
   1606c:	adds	r0, r0, #1
   16070:	adc	r1, r1, #0
   16074:	strd	r0, [r5, #56]	; 0x38
   16078:	mov	r0, r6
   1607c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16080:	ldrd	r0, [r5, #40]	; 0x28
   16084:	adds	r0, r0, #1
   16088:	adc	r1, r1, #0
   1608c:	strd	r0, [r5, #40]	; 0x28
   16090:	movw	r0, #45280	; 0xb0e0
   16094:	movt	r0, #2
   16098:	ldr	r0, [r0]
   1609c:	mov	r1, #4
   160a0:	ldr	r2, [r1]
   160a4:	movw	r1, #42978	; 0xa7e2
   160a8:	movt	r1, #1
   160ac:	bl	11f88 <fprintf@plt>
   160b0:	mov	r0, #1
   160b4:	bl	11f64 <exit@plt>

000160b8 <read_boolean_binary_expression@@Base>:
   160b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   160bc:	add	fp, sp, #24
   160c0:	mov	r5, r0
   160c4:	movw	r4, #48352	; 0xbce0
   160c8:	movt	r4, #2
   160cc:	ldrd	r0, [r4]
   160d0:	adds	r0, r0, #1
   160d4:	adc	r1, r1, #0
   160d8:	strd	r0, [r4]
   160dc:	ldr	r0, [r5]
   160e0:	bl	12150 <next@@Base>
   160e4:	mov	r6, r0
   160e8:	ldr	r0, [r0]
   160ec:	cmp	r0, #1
   160f0:	bne	161c4 <read_boolean_binary_expression@@Base+0x10c>
   160f4:	ldrd	r0, [r4, #16]
   160f8:	adds	r0, r0, #1
   160fc:	adc	r1, r1, #0
   16100:	strd	r0, [r4, #16]
   16104:	mov	r0, #12
   16108:	bl	11f28 <malloc@plt>
   1610c:	mov	r8, r0
   16110:	ldr	r1, [r6, #4]
   16114:	bl	14c40 <init_node_int@@Base>
   16118:	mov	r0, r6
   1611c:	bl	14700 <free_token_int_value@@Base>
   16120:	ldr	r0, [r5]
   16124:	bl	12150 <next@@Base>
   16128:	mov	r7, r0
   1612c:	ldr	r0, [r0]
   16130:	cmp	r0, #12
   16134:	bne	1620c <read_boolean_binary_expression@@Base+0x154>
   16138:	ldrd	r0, [r4, #64]	; 0x40
   1613c:	adds	r0, r0, #1
   16140:	adc	r1, r1, #0
   16144:	strd	r0, [r4, #64]	; 0x40
   16148:	mov	r0, r7
   1614c:	bl	15228 <get_boolean_op_value@@Base>
   16150:	mov	r6, r0
   16154:	mov	r0, r7
   16158:	bl	14910 <free_token_boolean_op@@Base>
   1615c:	ldr	r0, [r5]
   16160:	bl	12150 <next@@Base>
   16164:	mov	r5, r0
   16168:	ldr	r0, [r0]
   1616c:	cmp	r0, #1
   16170:	bne	16244 <read_boolean_binary_expression@@Base+0x18c>
   16174:	ldrd	r0, [r4, #88]	; 0x58
   16178:	adds	r0, r0, #1
   1617c:	adc	r1, r1, #0
   16180:	strd	r0, [r4, #88]	; 0x58
   16184:	mov	r0, #12
   16188:	bl	11f28 <malloc@plt>
   1618c:	mov	r7, r0
   16190:	ldr	r1, [r5, #4]
   16194:	bl	14c40 <init_node_int@@Base>
   16198:	mov	r0, r5
   1619c:	bl	14700 <free_token_int_value@@Base>
   161a0:	mov	r0, #20
   161a4:	bl	11f28 <malloc@plt>
   161a8:	mov	r5, r0
   161ac:	mov	r1, r6
   161b0:	mov	r2, r8
   161b4:	mov	r3, r7
   161b8:	bl	14d68 <init_node_boolean_operator@@Base>
   161bc:	add	r6, r4, #104	; 0x68
   161c0:	b	16264 <read_boolean_binary_expression@@Base+0x1ac>
   161c4:	ldrd	r2, [r4, #8]
   161c8:	adds	r2, r2, #1
   161cc:	adc	r3, r3, #0
   161d0:	strd	r2, [r4, #8]
   161d4:	cmp	r0, #12
   161d8:	bne	1622c <read_boolean_binary_expression@@Base+0x174>
   161dc:	ldrd	r0, [r4, #24]
   161e0:	adds	r0, r0, #1
   161e4:	adc	r1, r1, #0
   161e8:	strd	r0, [r4, #24]
   161ec:	ldr	r0, [r5]
   161f0:	mov	r1, r6
   161f4:	bl	12378 <push_back@@Base>
   161f8:	add	r6, r4, #40	; 0x28
   161fc:	mov	r0, r5
   16200:	bl	1628c <read_boolean_unary_expression@@Base>
   16204:	mov	r5, r0
   16208:	b	16264 <read_boolean_binary_expression@@Base+0x1ac>
   1620c:	ldrd	r0, [r4, #56]	; 0x38
   16210:	adds	r0, r0, #1
   16214:	adc	r1, r1, #0
   16218:	strd	r0, [r4, #56]	; 0x38
   1621c:	mov	r0, r8
   16220:	bl	14dc4 <free_node@@Base>
   16224:	add	r6, r4, #72	; 0x48
   16228:	b	16260 <read_boolean_binary_expression@@Base+0x1a8>
   1622c:	ldrd	r0, [r4, #32]
   16230:	adds	r0, r0, #1
   16234:	adc	r1, r1, #0
   16238:	strd	r0, [r4, #32]
   1623c:	add	r6, r4, #48	; 0x30
   16240:	b	16260 <read_boolean_binary_expression@@Base+0x1a8>
   16244:	ldrd	r0, [r4, #80]	; 0x50
   16248:	adds	r0, r0, #1
   1624c:	adc	r1, r1, #0
   16250:	strd	r0, [r4, #80]	; 0x50
   16254:	mov	r0, r8
   16258:	bl	14dc4 <free_node@@Base>
   1625c:	add	r6, r4, #96	; 0x60
   16260:	mov	r5, #0
   16264:	ldrd	r0, [r6]
   16268:	adds	r0, r0, #1
   1626c:	adc	r1, r1, #0
   16270:	strd	r0, [r6]
   16274:	ldrd	r0, [r4, #112]	; 0x70
   16278:	adds	r0, r0, #1
   1627c:	adc	r1, r1, #0
   16280:	strd	r0, [r4, #112]	; 0x70
   16284:	mov	r0, r5
   16288:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0001628c <read_boolean_unary_expression@@Base>:
   1628c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16290:	add	fp, sp, #24
   16294:	mov	r6, r0
   16298:	movw	r5, #48480	; 0xbd60
   1629c:	movt	r5, #2
   162a0:	ldrd	r0, [r5]
   162a4:	adds	r0, r0, #1
   162a8:	adc	r1, r1, #0
   162ac:	strd	r0, [r5]
   162b0:	mov	r0, #20
   162b4:	bl	11f28 <malloc@plt>
   162b8:	mov	r4, r0
   162bc:	ldr	r0, [r6]
   162c0:	bl	12150 <next@@Base>
   162c4:	mov	r7, r0
   162c8:	ldr	r0, [r0]
   162cc:	cmp	r0, #12
   162d0:	bne	16358 <read_boolean_unary_expression@@Base+0xcc>
   162d4:	ldrd	r0, [r5, #16]
   162d8:	adds	r0, r0, #1
   162dc:	adc	r1, r1, #0
   162e0:	strd	r0, [r5, #16]
   162e4:	mov	r0, r7
   162e8:	bl	15228 <get_boolean_op_value@@Base>
   162ec:	mov	r8, r0
   162f0:	mov	r0, r7
   162f4:	bl	14910 <free_token_boolean_op@@Base>
   162f8:	ldr	r0, [r6]
   162fc:	bl	12150 <next@@Base>
   16300:	mov	r6, r0
   16304:	ldr	r0, [r0]
   16308:	cmp	r0, #1
   1630c:	bne	16378 <read_boolean_unary_expression@@Base+0xec>
   16310:	ldrd	r0, [r5, #40]	; 0x28
   16314:	adds	r0, r0, #1
   16318:	adc	r1, r1, #0
   1631c:	strd	r0, [r5, #40]	; 0x28
   16320:	mov	r0, #12
   16324:	bl	11f28 <malloc@plt>
   16328:	mov	r7, r0
   1632c:	ldr	r1, [r6, #4]
   16330:	bl	14c40 <init_node_int@@Base>
   16334:	mov	r0, r6
   16338:	bl	14700 <free_token_int_value@@Base>
   1633c:	mov	r0, r4
   16340:	mov	r1, r8
   16344:	mov	r2, r7
   16348:	mov	r3, #0
   1634c:	bl	14d68 <init_node_boolean_operator@@Base>
   16350:	add	r0, r5, #56	; 0x38
   16354:	b	16398 <read_boolean_unary_expression@@Base+0x10c>
   16358:	ldrd	r0, [r5, #8]
   1635c:	adds	r0, r0, #1
   16360:	adc	r1, r1, #0
   16364:	strd	r0, [r5, #8]
   16368:	mov	r0, r4
   1636c:	bl	1519c <free_node_boolean_operator@@Base>
   16370:	add	r0, r5, #24
   16374:	b	16394 <read_boolean_unary_expression@@Base+0x108>
   16378:	ldrd	r0, [r5, #32]
   1637c:	adds	r0, r0, #1
   16380:	adc	r1, r1, #0
   16384:	strd	r0, [r5, #32]
   16388:	mov	r0, r4
   1638c:	bl	1519c <free_node_boolean_operator@@Base>
   16390:	add	r0, r5, #48	; 0x30
   16394:	mov	r4, #0
   16398:	ldrd	r2, [r0]
   1639c:	adds	r2, r2, #1
   163a0:	adc	r3, r3, #0
   163a4:	strd	r2, [r0]
   163a8:	ldrd	r0, [r5, #64]	; 0x40
   163ac:	adds	r0, r0, #1
   163b0:	adc	r1, r1, #0
   163b4:	strd	r0, [r5, #64]	; 0x40
   163b8:	mov	r0, r4
   163bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   163c0:	push	{r4, r5, r6, lr}
   163c4:	sub	sp, sp, #8
   163c8:	movw	r0, #43034	; 0xa81a
   163cc:	movt	r0, #1
   163d0:	movw	r1, #40122	; 0x9cba
   163d4:	movt	r1, #1
   163d8:	movw	r2, #51015	; 0xc747
   163dc:	movt	r2, #42604	; 0xa66c
   163e0:	bl	16628 <read_boolean_unary_expression@@Base+0x39c>
   163e4:	movw	r0, #43584	; 0xaa40
   163e8:	movt	r0, #1
   163ec:	add	r4, r0, #4
   163f0:	mov	r5, #0
   163f4:	movw	r6, #43360	; 0xa960
   163f8:	movt	r6, #1
   163fc:	mov	r3, r6
   16400:	ldr	r0, [r3, r5]!
   16404:	ldr	r1, [r3, #16]
   16408:	str	r1, [sp]
   1640c:	ldmib	r3, {r1, r2}
   16410:	ldrb	r3, [r3, #12]
   16414:	bl	16d48 <read_boolean_unary_expression@@Base+0xabc>
   16418:	ldrd	r0, [r4, #-4]
   1641c:	bl	175fc <read_boolean_unary_expression@@Base+0x1370>
   16420:	add	r5, r5, #20
   16424:	add	r4, r4, #8
   16428:	cmp	r5, #220	; 0xdc
   1642c:	bne	163fc <read_boolean_unary_expression@@Base+0x170>
   16430:	bl	17d84 <read_boolean_unary_expression@@Base+0x1af8>
   16434:	add	sp, sp, #8
   16438:	pop	{r4, r5, r6, lr}
   1643c:	b	18af0 <read_boolean_unary_expression@@Base+0x2864>
   16440:	push	{r4, r5, fp, lr}
   16444:	vpush	{d8-d9}
   16448:	bl	163c0 <read_boolean_unary_expression@@Base+0x134>
   1644c:	vmov.i32	q4, #0	; 0x00000000
   16450:	movw	r0, #47696	; 0xba50
   16454:	movt	r0, #2
   16458:	vst1.64	{d8-d9}, [r0]
   1645c:	movw	r0, #47680	; 0xba40
   16460:	movt	r0, #2
   16464:	vst1.64	{d8-d9}, [r0]
   16468:	movw	r0, #47712	; 0xba60
   1646c:	movt	r0, #2
   16470:	vst1.64	{d8-d9}, [r0]
   16474:	movw	r0, #47728	; 0xba70
   16478:	movt	r0, #2
   1647c:	add	r1, r0, #16
   16480:	vst1.64	{d8-d9}, [r1 :128]
   16484:	add	r1, r0, #32
   16488:	vst1.64	{d8-d9}, [r1 :128]
   1648c:	add	r1, r0, #48	; 0x30
   16490:	vst1.64	{d8-d9}, [r1 :128]
   16494:	add	r1, r0, #64	; 0x40
   16498:	vst1.64	{d8-d9}, [r1 :128]
   1649c:	add	r1, r0, #80	; 0x50
   164a0:	vst1.64	{d8-d9}, [r1 :128]
   164a4:	add	r1, r0, #96	; 0x60
   164a8:	vst1.64	{d8-d9}, [r1 :128]
   164ac:	mov	r4, #0
   164b0:	str	r4, [r0, #112]	; 0x70
   164b4:	mov	r5, #116	; 0x74
   164b8:	vst1.64	{d8-d9}, [r0 :128], r5
   164bc:	str	r4, [r0]
   164c0:	movw	r0, #47856	; 0xbaf0
   164c4:	movt	r0, #2
   164c8:	mov	r1, #0
   164cc:	mov	r2, #160	; 0xa0
   164d0:	bl	11fb8 <memset@plt>
   164d4:	mov	r0, #100	; 0x64
   164d8:	movw	r1, #48176	; 0xbc30
   164dc:	movt	r1, #2
   164e0:	mov	r2, r1
   164e4:	vst1.64	{d8-d9}, [r2 :128], r0
   164e8:	str	r4, [r2]
   164ec:	movw	r2, #48016	; 0xbb90
   164f0:	movt	r2, #2
   164f4:	add	r0, r2, #16
   164f8:	vst1.64	{d8-d9}, [r0 :128]
   164fc:	add	r0, r2, #32
   16500:	vst1.64	{d8-d9}, [r0 :128]
   16504:	add	r0, r2, #48	; 0x30
   16508:	vst1.64	{d8-d9}, [r0 :128]
   1650c:	str	r4, [r2, #64]	; 0x40
   16510:	movw	r3, #48096	; 0xbbe0
   16514:	movt	r3, #2
   16518:	add	r0, r3, #16
   1651c:	vst1.64	{d8-d9}, [r0 :128]
   16520:	add	r0, r3, #32
   16524:	vst1.64	{d8-d9}, [r0 :128]
   16528:	add	r0, r3, #48	; 0x30
   1652c:	vst1.64	{d8-d9}, [r0 :128]
   16530:	add	r0, r1, #16
   16534:	vst1.64	{d8-d9}, [r0 :128]
   16538:	add	r0, r1, #32
   1653c:	vst1.64	{d8-d9}, [r0 :128]
   16540:	add	r0, r1, #48	; 0x30
   16544:	vst1.64	{d8-d9}, [r0 :128]
   16548:	add	r0, r1, #64	; 0x40
   1654c:	vst1.64	{d8-d9}, [r0 :128]
   16550:	add	r0, r1, #80	; 0x50
   16554:	vst1.64	{d8-d9}, [r0 :128]
   16558:	str	r4, [r1, #96]	; 0x60
   1655c:	mov	r0, #68	; 0x44
   16560:	vst1.64	{d8-d9}, [r2 :128], r0
   16564:	str	r4, [r2]
   16568:	mov	r1, #64	; 0x40
   1656c:	vst1.64	{d8-d9}, [r3 :128], r1
   16570:	vst1.64	{d8-d9}, [r3 :128]
   16574:	movw	r1, #48288	; 0xbca0
   16578:	movt	r1, #2
   1657c:	add	r2, r1, #16
   16580:	vst1.64	{d8-d9}, [r2 :128]
   16584:	add	r2, r1, #32
   16588:	vst1.64	{d8-d9}, [r2 :128]
   1658c:	mov	r2, #48	; 0x30
   16590:	vst1.64	{d8-d9}, [r1 :128], r2
   16594:	vst1.64	{d8-d9}, [r1 :128]
   16598:	movw	r1, #48352	; 0xbce0
   1659c:	movt	r1, #2
   165a0:	mov	r2, r1
   165a4:	vst1.64	{d8-d9}, [r2 :128], r5
   165a8:	str	r4, [r2]
   165ac:	str	r4, [r1, #112]	; 0x70
   165b0:	add	r2, r1, #96	; 0x60
   165b4:	vst1.64	{d8-d9}, [r2 :128]
   165b8:	add	r2, r1, #80	; 0x50
   165bc:	vst1.64	{d8-d9}, [r2 :128]
   165c0:	add	r2, r1, #64	; 0x40
   165c4:	vst1.64	{d8-d9}, [r2 :128]
   165c8:	add	r2, r1, #48	; 0x30
   165cc:	vst1.64	{d8-d9}, [r2 :128]
   165d0:	add	r2, r1, #32
   165d4:	vst1.64	{d8-d9}, [r2 :128]
   165d8:	add	r1, r1, #16
   165dc:	vst1.64	{d8-d9}, [r1 :128]
   165e0:	movw	r1, #48480	; 0xbd60
   165e4:	movt	r1, #2
   165e8:	str	r4, [r1, #64]	; 0x40
   165ec:	add	r2, r1, #48	; 0x30
   165f0:	vst1.64	{d8-d9}, [r2 :128]
   165f4:	add	r2, r1, #32
   165f8:	vst1.64	{d8-d9}, [r2 :128]
   165fc:	add	r2, r1, #16
   16600:	vst1.64	{d8-d9}, [r2 :128]
   16604:	vst1.64	{d8-d9}, [r1 :128], r0
   16608:	str	r4, [r1]
   1660c:	vpop	{d8-d9}
   16610:	pop	{r4, r5, fp, pc}
   16614:	movw	r0, #25536	; 0x63c0
   16618:	movt	r0, #1
   1661c:	movw	r1, #25664	; 0x6440
   16620:	movt	r1, #1
   16624:	b	18fa4 <__gcov_flush@@Base+0xb8>
   16628:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1662c:	add	fp, sp, #28
   16630:	sub	sp, sp, #36	; 0x24
   16634:	mov	r9, r1
   16638:	mov	r6, r0
   1663c:	add	r0, sp, #28
   16640:	add	r1, sp, #32
   16644:	mov	r8, r2
   16648:	bl	1943c <__gcov_flush@@Base+0x550>
   1664c:	cmp	r0, #0
   16650:	beq	16694 <read_boolean_unary_expression@@Base+0x408>
   16654:	mov	r4, r0
   16658:	mov	r0, r6
   1665c:	ldr	r5, [sp, #32]
   16660:	bl	11f70 <strlen@plt>
   16664:	add	r0, r5, r0
   16668:	add	r0, r0, #2
   1666c:	bl	11f28 <malloc@plt>
   16670:	mov	r7, r0
   16674:	ldr	r0, [sp, #28]
   16678:	mov	r1, r6
   1667c:	mov	r2, r4
   16680:	str	r0, [sp]
   16684:	mov	r0, r7
   16688:	mov	r3, r5
   1668c:	bl	194d0 <__gcov_flush@@Base+0x5e4>
   16690:	b	166a0 <read_boolean_unary_expression@@Base+0x414>
   16694:	mov	r0, r6
   16698:	bl	11ee0 <strdup@plt>
   1669c:	mov	r7, r0
   166a0:	ldr	r0, [pc, #1492]	; 16c7c <read_boolean_unary_expression@@Base+0x9f0>
   166a4:	ldr	r6, [pc, #1492]	; 16c80 <read_boolean_unary_expression@@Base+0x9f4>
   166a8:	mov	r1, #2
   166ac:	add	r0, pc, r0
   166b0:	add	r6, pc, r6
   166b4:	str	r7, [r0]
   166b8:	mov	r0, r7
   166bc:	mov	r5, #0
   166c0:	strb	r5, [r6]
   166c4:	bl	11f04 <open64@plt>
   166c8:	ldr	r4, [pc, #1460]	; 16c84 <read_boolean_unary_expression@@Base+0x9f8>
   166cc:	cmn	r0, #1
   166d0:	add	r4, pc, r4
   166d4:	str	r0, [r4]
   166d8:	beq	166e8 <read_boolean_unary_expression@@Base+0x45c>
   166dc:	ldr	r6, [pc, #1444]	; 16c88 <read_boolean_unary_expression@@Base+0x9fc>
   166e0:	add	r6, pc, r6
   166e4:	b	16744 <read_boolean_unary_expression@@Base+0x4b8>
   166e8:	mov	r0, #1
   166ec:	strb	r0, [r6]
   166f0:	ldr	r0, [pc, #1488]	; 16cc8 <read_boolean_unary_expression@@Base+0xa3c>
   166f4:	mov	r1, #66	; 0x42
   166f8:	mov	r2, #420	; 0x1a4
   166fc:	ldr	r0, [pc, r0]
   16700:	bl	11f04 <open64@plt>
   16704:	ldr	r6, [pc, #1472]	; 16ccc <read_boolean_unary_expression@@Base+0xa40>
   16708:	cmn	r0, #1
   1670c:	str	r0, [r4]
   16710:	add	r6, pc, r6
   16714:	bne	16744 <read_boolean_unary_expression@@Base+0x4b8>
   16718:	ldr	r0, [pc, #1456]	; 16cd0 <read_boolean_unary_expression@@Base+0xa44>
   1671c:	ldr	r0, [pc, r0]
   16720:	bl	190b4 <__gcov_flush@@Base+0x1c8>
   16724:	ldr	r0, [pc, #1448]	; 16cd4 <read_boolean_unary_expression@@Base+0xa48>
   16728:	mov	r1, #66	; 0x42
   1672c:	mov	r2, #420	; 0x1a4
   16730:	ldr	r0, [pc, r0]
   16734:	bl	11f04 <open64@plt>
   16738:	cmn	r0, #1
   1673c:	str	r0, [r4]
   16740:	beq	16c34 <read_boolean_unary_expression@@Base+0x9a8>
   16744:	str	r9, [sp, #20]
   16748:	str	r8, [sp, #24]
   1674c:	bl	19178 <__gcov_flush@@Base+0x28c>
   16750:	ldr	r0, [pc, #1332]	; 16c8c <read_boolean_unary_expression@@Base+0xa00>
   16754:	mov	r1, r6
   16758:	ldr	r0, [pc, r0]
   1675c:	bl	11e68 <fdopen@plt>
   16760:	ldr	r7, [pc, #1320]	; 16c90 <read_boolean_unary_expression@@Base+0xa04>
   16764:	ldr	r9, [pc, #1320]	; 16c94 <read_boolean_unary_expression@@Base+0xa08>
   16768:	ldr	r1, [pc, #1320]	; 16c98 <read_boolean_unary_expression@@Base+0xa0c>
   1676c:	ldr	sl, [pc, #1320]	; 16c9c <read_boolean_unary_expression@@Base+0xa10>
   16770:	add	r7, pc, r7
   16774:	add	r9, pc, r9
   16778:	add	r1, pc, r1
   1677c:	add	sl, pc, sl
   16780:	str	r5, [r7]
   16784:	str	r5, [r7, #4]
   16788:	str	r5, [r9]
   1678c:	str	r5, [r9, #4]
   16790:	str	r0, [r1]
   16794:	str	r5, [sl]
   16798:	ldr	r6, [pc, #1280]	; 16ca0 <read_boolean_unary_expression@@Base+0xa14>
   1679c:	mov	r4, #131072	; 0x20000
   167a0:	add	r6, pc, r6
   167a4:	ldrb	r1, [r6]
   167a8:	cmp	r1, #0
   167ac:	beq	168a0 <read_boolean_unary_expression@@Base+0x614>
   167b0:	mov	r0, r4
   167b4:	bl	11f28 <malloc@plt>
   167b8:	mov	r8, r0
   167bc:	strd	r4, [r7]
   167c0:	str	r0, [sl]
   167c4:	mov	r0, r8
   167c8:	mov	r1, #0
   167cc:	mov	r2, #131072	; 0x20000
   167d0:	bl	11fb8 <memset@plt>
   167d4:	ldr	r0, [r9, #4]
   167d8:	ldr	r1, [pc, #1284]	; 16ce4 <read_boolean_unary_expression@@Base+0xa58>
   167dc:	mov	r7, #7
   167e0:	orr	r7, r7, #131072	; 0x20000
   167e4:	ldr	r1, [pc, r1]
   167e8:	ldr	sl, [pc, #1272]	; 16ce8 <read_boolean_unary_expression@@Base+0xa5c>
   167ec:	adds	r2, r1, #4
   167f0:	add	sl, pc, sl
   167f4:	adc	r3, r0, #0
   167f8:	ldr	r5, [sl, #4]
   167fc:	ldr	r4, [pc, #1256]	; 16cec <read_boolean_unary_expression@@Base+0xa60>
   16800:	ldr	r4, [pc, r4]
   16804:	subs	r2, r4, r2
   16808:	sbcs	r2, r5, r3
   1680c:	bcs	16920 <read_boolean_unary_expression@@Base+0x694>
   16810:	adds	r1, r7, r1
   16814:	adc	r0, r0, #0
   16818:	subs	r1, r1, #4
   1681c:	sbc	r0, r0, #0
   16820:	mvn	r2, #0
   16824:	and	r5, r0, r2
   16828:	mov	r0, #16646144	; 0xfe0000
   1682c:	orr	r0, r0, #-16777216	; 0xff000000
   16830:	and	r4, r1, r0
   16834:	mov	r0, r8
   16838:	mov	r1, r4
   1683c:	bl	11eec <realloc@plt>
   16840:	ldr	r1, [pc, #1068]	; 16c74 <read_boolean_unary_expression@@Base+0x9e8>
   16844:	strd	r4, [sl]
   16848:	mov	r3, r0
   1684c:	mov	r7, r1
   16850:	lsr	r2, r1, #24
   16854:	ldr	r1, [pc, #1176]	; 16cf4 <read_boolean_unary_expression@@Base+0xa68>
   16858:	ldrb	r6, [r6]
   1685c:	lsr	r4, r7, #16
   16860:	add	r1, pc, r1
   16864:	str	r0, [r1]
   16868:	ldr	r1, [r9, #4]
   1686c:	ldr	r5, [pc, #1156]	; 16cf8 <read_boolean_unary_expression@@Base+0xa6c>
   16870:	ldr	r5, [pc, r5]
   16874:	strb	r7, [r3, r5]!
   16878:	strb	r2, [r3, #3]
   1687c:	lsr	r2, r7, #8
   16880:	strb	r2, [r3, #1]
   16884:	adds	r2, r5, #4
   16888:	adc	ip, r1, #0
   1688c:	cmp	r6, #1
   16890:	strb	r4, [r3, #2]
   16894:	stm	r9, {r2, ip}
   16898:	beq	16964 <read_boolean_unary_expression@@Base+0x6d8>
   1689c:	b	16b1c <read_boolean_unary_expression@@Base+0x890>
   168a0:	mov	r1, #0
   168a4:	mov	r2, #2
   168a8:	mov	r8, #0
   168ac:	bl	12030 <fseek@plt>
   168b0:	ldr	r0, [pc, #1004]	; 16ca4 <read_boolean_unary_expression@@Base+0xa18>
   168b4:	ldr	r0, [pc, r0]
   168b8:	bl	11ec8 <ftell@plt>
   168bc:	mov	r2, r0
   168c0:	ldr	r0, [pc, #992]	; 16ca8 <read_boolean_unary_expression@@Base+0xa1c>
   168c4:	asr	r3, r2, #31
   168c8:	add	r0, pc, r0
   168cc:	cmp	r2, #0
   168d0:	strd	r2, [r0]
   168d4:	beq	16bc4 <read_boolean_unary_expression@@Base+0x938>
   168d8:	ldr	r0, [pc, #972]	; 16cac <read_boolean_unary_expression@@Base+0xa20>
   168dc:	mov	r1, r2
   168e0:	mov	r2, #3
   168e4:	mov	r3, #1
   168e8:	ldr	r0, [pc, r0]
   168ec:	str	r8, [sp, #8]
   168f0:	str	r8, [sp, #12]
   168f4:	str	r0, [sp]
   168f8:	mov	r0, #0
   168fc:	bl	11ebc <mmap64@plt>
   16900:	cmn	r0, #1
   16904:	str	r0, [sl]
   16908:	beq	16b8c <read_boolean_unary_expression@@Base+0x900>
   1690c:	ldrb	r1, [r6]
   16910:	cmp	r1, #0
   16914:	beq	16adc <read_boolean_unary_expression@@Base+0x850>
   16918:	mov	r8, r0
   1691c:	b	167d4 <read_boolean_unary_expression@@Base+0x548>
   16920:	ldr	r1, [r9, #4]
   16924:	ldr	r5, [pc, #964]	; 16cf0 <read_boolean_unary_expression@@Base+0xa64>
   16928:	ldr	r0, [pc, #836]	; 16c74 <read_boolean_unary_expression@@Base+0x9e8>
   1692c:	mov	r6, r8
   16930:	ldr	r5, [pc, r5]
   16934:	mov	r7, r0
   16938:	lsr	r2, r7, #16
   1693c:	strb	r7, [r6, r5]!
   16940:	lsr	r0, r0, #24
   16944:	lsr	r3, r7, #8
   16948:	strb	r2, [r6, #2]
   1694c:	adds	r2, r5, #4
   16950:	strb	r0, [r6, #3]
   16954:	strb	r3, [r6, #1]
   16958:	adc	ip, r1, #0
   1695c:	stm	r9, {r2, ip}
   16960:	mov	r0, r8
   16964:	ldr	r7, [sl, #4]
   16968:	ldr	r3, [pc, #908]	; 16cfc <read_boolean_unary_expression@@Base+0xa70>
   1696c:	adds	r6, r5, #8
   16970:	adc	r4, r1, #0
   16974:	ldr	r3, [pc, r3]
   16978:	subs	r3, r3, r6
   1697c:	sbcs	r3, r7, r4
   16980:	bcs	16a24 <read_boolean_unary_expression@@Base+0x798>
   16984:	mov	r2, #7
   16988:	orr	r2, r2, #131072	; 0x20000
   1698c:	adds	r2, r5, r2
   16990:	adc	r1, r1, #0
   16994:	mvn	r3, #0
   16998:	and	r5, r1, r3
   1699c:	mov	r1, #16646144	; 0xfe0000
   169a0:	orr	r1, r1, #-16777216	; 0xff000000
   169a4:	and	r4, r2, r1
   169a8:	mov	r1, r4
   169ac:	bl	11eec <realloc@plt>
   169b0:	strd	r4, [sl]
   169b4:	ldr	r1, [pc, #840]	; 16d04 <read_boolean_unary_expression@@Base+0xa78>
   169b8:	mov	r4, r0
   169bc:	mov	lr, r9
   169c0:	add	r1, pc, r1
   169c4:	str	r0, [r1]
   169c8:	ldr	r1, [pc, #824]	; 16d08 <read_boolean_unary_expression@@Base+0xa7c>
   169cc:	ldr	r2, [sp, #20]
   169d0:	ldr	ip, [r9, #4]
   169d4:	add	r1, pc, r1
   169d8:	ldrb	r3, [r1]
   169dc:	ldrb	r1, [r2]
   169e0:	ldrb	r7, [r2, #1]
   169e4:	ldrb	r6, [r2, #2]
   169e8:	ldrb	r5, [r2, #3]
   169ec:	ldr	r2, [pc, #792]	; 16d0c <read_boolean_unary_expression@@Base+0xa80>
   169f0:	ldr	r2, [pc, r2]
   169f4:	strb	r1, [r4, r2]!
   169f8:	strb	r5, [r4, #3]
   169fc:	ldr	r5, [sp, #24]
   16a00:	strb	r6, [r4, #2]
   16a04:	adds	r6, r2, #4
   16a08:	adc	r1, ip, #0
   16a0c:	cmp	r3, #1
   16a10:	str	r6, [lr]
   16a14:	strb	r7, [r4, #1]
   16a18:	str	r1, [lr, #4]
   16a1c:	beq	16a64 <read_boolean_unary_expression@@Base+0x7d8>
   16a20:	b	16b5c <read_boolean_unary_expression@@Base+0x8d0>
   16a24:	ldr	r6, [sp, #20]
   16a28:	mov	r5, r0
   16a2c:	ldrb	r1, [r6]
   16a30:	ldrb	r3, [r6, #1]
   16a34:	ldrb	r7, [r6, #2]
   16a38:	ldrb	r6, [r6, #3]
   16a3c:	strb	r1, [r5, r2]!
   16a40:	strb	r6, [r5, #3]
   16a44:	strb	r3, [r5, #1]
   16a48:	adds	r6, r2, #4
   16a4c:	mov	r3, r9
   16a50:	adc	r1, ip, #0
   16a54:	strb	r7, [r5, #2]
   16a58:	str	r6, [r3]
   16a5c:	str	r1, [r3, #4]
   16a60:	ldr	r5, [sp, #24]
   16a64:	ldr	r7, [sl, #4]
   16a68:	ldr	r4, [pc, #672]	; 16d10 <read_boolean_unary_expression@@Base+0xa84>
   16a6c:	adds	r3, r2, #8
   16a70:	adc	lr, ip, #0
   16a74:	ldr	r4, [pc, r4]
   16a78:	subs	r3, r4, r3
   16a7c:	sbcs	r3, r7, lr
   16a80:	bcs	16ad4 <read_boolean_unary_expression@@Base+0x848>
   16a84:	mov	r1, #7
   16a88:	orr	r1, r1, #131072	; 0x20000
   16a8c:	adds	r1, r2, r1
   16a90:	adc	r2, ip, #0
   16a94:	mvn	r3, #0
   16a98:	and	r7, r2, r3
   16a9c:	mov	r2, #16646144	; 0xfe0000
   16aa0:	orr	r2, r2, #-16777216	; 0xff000000
   16aa4:	and	r4, r1, r2
   16aa8:	mov	r1, r4
   16aac:	bl	11eec <realloc@plt>
   16ab0:	stm	sl, {r4, r7}
   16ab4:	ldr	r1, [r9, #4]
   16ab8:	ldr	r2, [pc, #596]	; 16d14 <read_boolean_unary_expression@@Base+0xa88>
   16abc:	mov	lr, r9
   16ac0:	add	r2, pc, r2
   16ac4:	str	r0, [r2]
   16ac8:	ldr	r6, [pc, #584]	; 16d18 <read_boolean_unary_expression@@Base+0xa8c>
   16acc:	ldr	r6, [pc, r6]
   16ad0:	b	16b5c <read_boolean_unary_expression@@Base+0x8d0>
   16ad4:	mov	lr, r9
   16ad8:	b	16b5c <read_boolean_unary_expression@@Base+0x8d0>
   16adc:	ldr	r6, [r9, #4]
   16ae0:	ldr	r5, [pc, #536]	; 16d00 <read_boolean_unary_expression@@Base+0xa74>
   16ae4:	ldr	r1, [pc, #392]	; 16c74 <read_boolean_unary_expression@@Base+0x9e8>
   16ae8:	mov	r4, r0
   16aec:	ldr	r5, [pc, r5]
   16af0:	mov	r7, r1
   16af4:	lsr	r2, r7, #16
   16af8:	strb	r7, [r4, r5]!
   16afc:	lsr	r1, r1, #24
   16b00:	strb	r2, [r4, #2]
   16b04:	adds	r2, r5, #4
   16b08:	lsr	r3, r7, #8
   16b0c:	adc	ip, r6, #0
   16b10:	strb	r1, [r4, #3]
   16b14:	strb	r3, [r4, #1]
   16b18:	stm	r9, {r2, ip}
   16b1c:	ldr	r4, [sp, #20]
   16b20:	mov	r5, r0
   16b24:	mov	lr, r9
   16b28:	ldrb	r1, [r4]
   16b2c:	ldrb	r6, [r4, #3]
   16b30:	ldrb	r3, [r4, #1]
   16b34:	ldrb	r7, [r4, #2]
   16b38:	strb	r1, [r5, r2]!
   16b3c:	strb	r6, [r5, #3]
   16b40:	adds	r6, r2, #4
   16b44:	adc	r1, ip, #0
   16b48:	strb	r7, [r5, #2]
   16b4c:	strb	r3, [r5, #1]
   16b50:	str	r6, [lr]
   16b54:	str	r1, [lr, #4]
   16b58:	ldr	r5, [sp, #24]
   16b5c:	lsr	r2, r5, #24
   16b60:	strb	r5, [r0, r6]!
   16b64:	lsr	r3, r5, #16
   16b68:	lsr	r7, r5, #8
   16b6c:	strb	r2, [r0, #3]
   16b70:	strb	r3, [r0, #2]
   16b74:	strb	r7, [r0, #1]
   16b78:	adds	r0, r6, #4
   16b7c:	adc	r1, r1, #0
   16b80:	strd	r0, [lr]
   16b84:	sub	sp, fp, #28
   16b88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b8c:	bl	11f94 <__errno_location@plt>
   16b90:	ldr	r1, [pc, #280]	; 16cb0 <read_boolean_unary_expression@@Base+0xa24>
   16b94:	ldr	r1, [pc, r1]
   16b98:	ldr	r0, [r0]
   16b9c:	ldr	r4, [r1]
   16ba0:	ldr	r5, [pc, #268]	; 16cb4 <read_boolean_unary_expression@@Base+0xa28>
   16ba4:	ldr	r5, [pc, r5]
   16ba8:	bl	11f40 <strerror@plt>
   16bac:	ldr	r1, [pc, #260]	; 16cb8 <read_boolean_unary_expression@@Base+0xa2c>
   16bb0:	mov	r3, r0
   16bb4:	mov	r0, r4
   16bb8:	add	r1, pc, r1
   16bbc:	mov	r2, r5
   16bc0:	bl	11f88 <fprintf@plt>
   16bc4:	ldr	r0, [pc, #240]	; 16cbc <read_boolean_unary_expression@@Base+0xa30>
   16bc8:	str	r8, [sl]
   16bcc:	mov	r2, #16646144	; 0xfe0000
   16bd0:	add	r0, pc, r0
   16bd4:	orr	r2, r2, #-16777216	; 0xff000000
   16bd8:	str	r8, [r0]
   16bdc:	str	r8, [r0, #4]
   16be0:	mov	r0, #1
   16be4:	strb	r0, [r6]
   16be8:	ldr	r0, [r9, #4]
   16bec:	ldr	r1, [pc, #204]	; 16cc0 <read_boolean_unary_expression@@Base+0xa34>
   16bf0:	mvn	r3, #0
   16bf4:	eor	r3, r0, r3
   16bf8:	ldr	r1, [pc, r1]
   16bfc:	eor	r2, r1, r2
   16c00:	orrs	r2, r2, r3
   16c04:	beq	167c4 <read_boolean_unary_expression@@Base+0x538>
   16c08:	ldr	r2, [pc, #104]	; 16c78 <read_boolean_unary_expression@@Base+0x9ec>
   16c0c:	ldr	r7, [pc, #176]	; 16cc4 <read_boolean_unary_expression@@Base+0xa38>
   16c10:	adds	r1, r1, r2
   16c14:	mov	r2, #16646144	; 0xfe0000
   16c18:	orr	r2, r2, #-16777216	; 0xff000000
   16c1c:	and	r4, r1, r2
   16c20:	adc	r0, r0, #0
   16c24:	mvn	r1, #0
   16c28:	and	r5, r0, r1
   16c2c:	add	r7, pc, r7
   16c30:	b	167b0 <read_boolean_unary_expression@@Base+0x524>
   16c34:	bl	11f94 <__errno_location@plt>
   16c38:	ldr	r1, [pc, #152]	; 16cd8 <read_boolean_unary_expression@@Base+0xa4c>
   16c3c:	ldr	r1, [pc, r1]
   16c40:	ldr	r0, [r0]
   16c44:	ldr	r4, [r1]
   16c48:	ldr	r5, [pc, #140]	; 16cdc <read_boolean_unary_expression@@Base+0xa50>
   16c4c:	ldr	r5, [pc, r5]
   16c50:	bl	11f40 <strerror@plt>
   16c54:	ldr	r1, [pc, #132]	; 16ce0 <read_boolean_unary_expression@@Base+0xa54>
   16c58:	mov	r3, r0
   16c5c:	mov	r0, r4
   16c60:	add	r1, pc, r1
   16c64:	mov	r2, r5
   16c68:	bl	11f88 <fprintf@plt>
   16c6c:	sub	sp, fp, #28
   16c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c74:	strbvs	r6, [r3, -r1, ror #8]!
   16c78:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   16c7c:	strdeq	r5, [r1], -r4
   16c80:	strdeq	r5, [r1], -r4
   16c84:	strdeq	r4, [r1], -r8
   16c88:			; <UNDEFINED> instruction: 0x000043b0
   16c8c:	andeq	r4, r1, r0, ror r9
   16c90:	andeq	r5, r1, r0, asr #12
   16c94:	andeq	r5, r1, r4, asr #12
   16c98:	andeq	r5, r1, r0, lsr r6
   16c9c:	andeq	r5, r1, r0, lsr r6
   16ca0:	andeq	r5, r1, r4, lsl #12
   16ca4:	strdeq	r5, [r1], -r4
   16ca8:	andeq	r5, r1, r8, lsl #10
   16cac:	andeq	r4, r1, r0, ror #15
   16cb0:	andeq	r4, r1, r4, lsr #10
   16cb4:	strdeq	r5, [r1], -ip
   16cb8:	andeq	r4, r0, sl, lsr r0
   16cbc:	andeq	r5, r1, r0, ror #3
   16cc0:	andeq	r5, r1, r0, asr #3
   16cc4:	andeq	r5, r1, r4, lsl #3
   16cc8:	andeq	r5, r1, r4, lsr #13
   16ccc:	andeq	r4, r0, r4, lsl #7
   16cd0:	andeq	r5, r1, r4, lsl #13
   16cd4:	andeq	r5, r1, r0, ror r6
   16cd8:	andeq	r4, r1, ip, ror r4
   16cdc:	andeq	r5, r1, r4, asr r1
   16ce0:	andeq	r3, r0, r8, lsr lr
   16ce4:	ldrdeq	r5, [r1], -r4
   16ce8:	andeq	r5, r1, r0, asr #11
   16cec:			; <UNDEFINED> instruction: 0x000155b0
   16cf0:	andeq	r5, r1, r8, lsl #9
   16cf4:	andeq	r5, r1, ip, asr #10
   16cf8:	andeq	r5, r1, r8, asr #10
   16cfc:	andeq	r5, r1, ip, lsr r4
   16d00:	andeq	r5, r1, ip, asr #5
   16d04:	andeq	r5, r1, ip, ror #7
   16d08:	ldrdeq	r5, [r1], -r0
   16d0c:	andeq	r5, r1, r8, asr #7
   16d10:	andeq	r5, r1, ip, lsr r3
   16d14:	andeq	r5, r1, ip, ror #5
   16d18:	andeq	r5, r1, ip, ror #5
   16d1c:	ldr	r0, [r0]
   16d20:	cmn	r0, #1
   16d24:	beq	16d44 <read_boolean_unary_expression@@Base+0xab8>
   16d28:	ldr	r0, [r1, r0, lsl #2]
   16d2c:	cmp	r0, #0
   16d30:	bxeq	lr
   16d34:	ldrd	r2, [r0]
   16d38:	adds	r2, r2, #1
   16d3c:	adc	r3, r3, #0
   16d40:	strd	r2, [r0]
   16d44:	bx	lr
   16d48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d4c:	add	fp, sp, #28
   16d50:	sub	sp, sp, #12
   16d54:	ldr	r7, [pc, #2008]	; 17534 <read_boolean_unary_expression@@Base+0x12a8>
   16d58:	mov	sl, #2
   16d5c:	cmp	r3, #0
   16d60:	movne	sl, #3
   16d64:	ldr	r7, [pc, r7]
   16d68:	cmp	r7, #0
   16d6c:	beq	1752c <read_boolean_unary_expression@@Base+0x12a0>
   16d70:	stm	sp, {r0, r2, r3}
   16d74:	ldr	r0, [pc, #1980]	; 17538 <read_boolean_unary_expression@@Base+0x12ac>
   16d78:	mov	r5, r1
   16d7c:	add	r0, pc, r0
   16d80:	ldrb	r0, [r0]
   16d84:	ldr	r8, [pc, #1968]	; 1753c <read_boolean_unary_expression@@Base+0x12b0>
   16d88:	cmp	r0, #1
   16d8c:	add	r8, pc, r8
   16d90:	bne	16e14 <read_boolean_unary_expression@@Base+0xb88>
   16d94:	ldr	r4, [pc, #1956]	; 17540 <read_boolean_unary_expression@@Base+0x12b4>
   16d98:	ldr	r0, [r8, #4]
   16d9c:	ldr	r1, [pc, #1952]	; 17544 <read_boolean_unary_expression@@Base+0x12b8>
   16da0:	add	r4, pc, r4
   16da4:	ldr	r1, [pc, r1]
   16da8:	ldr	r7, [r4, #4]
   16dac:	ldr	r6, [pc, #1940]	; 17548 <read_boolean_unary_expression@@Base+0x12bc>
   16db0:	adds	r2, r1, #4
   16db4:	adc	r3, r0, #0
   16db8:	ldr	r6, [pc, r6]
   16dbc:	subs	r2, r6, r2
   16dc0:	sbcs	r2, r7, r3
   16dc4:	bcs	16e14 <read_boolean_unary_expression@@Base+0xb88>
   16dc8:	mov	r2, #7
   16dcc:	orr	r2, r2, #131072	; 0x20000
   16dd0:	adds	r1, r2, r1
   16dd4:	adc	r0, r0, #0
   16dd8:	subs	r1, r1, #4
   16ddc:	sbc	r0, r0, #0
   16de0:	mvn	r2, #0
   16de4:	and	r7, r0, r2
   16de8:	mov	r0, #16646144	; 0xfe0000
   16dec:	orr	r0, r0, #-16777216	; 0xff000000
   16df0:	ldr	r9, [pc, #1876]	; 1754c <read_boolean_unary_expression@@Base+0x12c0>
   16df4:	and	r6, r1, r0
   16df8:	ldr	r0, [pc, #1872]	; 17550 <read_boolean_unary_expression@@Base+0x12c4>
   16dfc:	mov	r1, r6
   16e00:	add	r9, pc, r9
   16e04:	ldr	r0, [pc, r0]
   16e08:	bl	11eec <realloc@plt>
   16e0c:	strd	r6, [r4]
   16e10:	str	r0, [r9]
   16e14:	ldr	r7, [pc, #1848]	; 17554 <read_boolean_unary_expression@@Base+0x12c8>
   16e18:	mov	r0, #0
   16e1c:	mov	r2, #1
   16e20:	ldr	r7, [pc, r7]
   16e24:	ldr	ip, [pc, #1836]	; 17558 <read_boolean_unary_expression@@Base+0x12cc>
   16e28:	adds	r4, r7, #4
   16e2c:	ldr	ip, [pc, ip]
   16e30:	ldr	r6, [r8, #4]
   16e34:	mov	r1, ip
   16e38:	adc	r9, r6, #0
   16e3c:	strb	r0, [r1, r7]!
   16e40:	cmp	r5, #0
   16e44:	strb	r2, [r1, #3]
   16e48:	strb	r0, [r1, #2]
   16e4c:	strb	r0, [r1, #1]
   16e50:	stm	r8, {r4, r9}
   16e54:	mov	r8, r5
   16e58:	beq	16e74 <read_boolean_unary_expression@@Base+0xbe8>
   16e5c:	mov	r0, r8
   16e60:	mov	r5, ip
   16e64:	bl	11f70 <strlen@plt>
   16e68:	add	r0, sl, r0, lsr #2
   16e6c:	mov	ip, r5
   16e70:	add	sl, r0, #2
   16e74:	ldr	r0, [pc, #1760]	; 1755c <read_boolean_unary_expression@@Base+0x12d0>
   16e78:	add	r0, pc, r0
   16e7c:	ldrb	r0, [r0]
   16e80:	cmp	r0, #0
   16e84:	beq	16f60 <read_boolean_unary_expression@@Base+0xcd4>
   16e88:	ldr	lr, [pc, #1748]	; 17564 <read_boolean_unary_expression@@Base+0x12d8>
   16e8c:	adds	r0, r7, #8
   16e90:	adc	r1, r6, #0
   16e94:	add	lr, pc, lr
   16e98:	ldr	r2, [lr, #4]
   16e9c:	ldr	r3, [pc, #1732]	; 17568 <read_boolean_unary_expression@@Base+0x12dc>
   16ea0:	ldr	r3, [pc, r3]
   16ea4:	subs	r0, r3, r0
   16ea8:	sbcs	r0, r2, r1
   16eac:	bcs	16fcc <read_boolean_unary_expression@@Base+0xd40>
   16eb0:	mov	r0, #7
   16eb4:	orr	r0, r0, #131072	; 0x20000
   16eb8:	adds	r0, r7, r0
   16ebc:	adc	r1, r6, #0
   16ec0:	mvn	r2, #0
   16ec4:	and	r5, r1, r2
   16ec8:	mov	r1, #16646144	; 0xfe0000
   16ecc:	orr	r1, r1, #-16777216	; 0xff000000
   16ed0:	and	r6, r0, r1
   16ed4:	ldr	r4, [pc, #1684]	; 17570 <read_boolean_unary_expression@@Base+0x12e4>
   16ed8:	mov	r0, ip
   16edc:	mov	r1, r6
   16ee0:	add	r4, pc, r4
   16ee4:	mov	r7, lr
   16ee8:	bl	11eec <realloc@plt>
   16eec:	mov	lr, r7
   16ef0:	mov	ip, r0
   16ef4:	str	r6, [lr]
   16ef8:	str	r5, [lr, #4]
   16efc:	str	ip, [r4]
   16f00:	ldr	r1, [pc, #1644]	; 17574 <read_boolean_unary_expression@@Base+0x12e8>
   16f04:	lsr	r0, sl, #24
   16f08:	add	r1, pc, r1
   16f0c:	lsr	r3, sl, #16
   16f10:	ldrb	r2, [r1]
   16f14:	ldr	r1, [pc, #1628]	; 17578 <read_boolean_unary_expression@@Base+0x12ec>
   16f18:	add	r1, pc, r1
   16f1c:	mov	r7, r1
   16f20:	ldr	r9, [r1, #4]
   16f24:	ldr	r4, [pc, #1616]	; 1757c <read_boolean_unary_expression@@Base+0x12f0>
   16f28:	mov	r1, ip
   16f2c:	ldr	r4, [pc, r4]
   16f30:	strb	sl, [r1, r4]!
   16f34:	strb	r0, [r1, #3]
   16f38:	lsr	r0, sl, #8
   16f3c:	strb	r0, [r1, #1]
   16f40:	adds	r0, r4, #4
   16f44:	strb	r3, [r1, #2]
   16f48:	adc	r1, r9, #0
   16f4c:	mov	sl, r7
   16f50:	cmp	r2, #1
   16f54:	strd	r0, [sl]
   16f58:	bne	16f94 <read_boolean_unary_expression@@Base+0xd08>
   16f5c:	b	17000 <read_boolean_unary_expression@@Base+0xd74>
   16f60:	mov	r3, ip
   16f64:	lsr	r0, sl, #24
   16f68:	strb	sl, [r3, r4]!
   16f6c:	lsr	r1, sl, #16
   16f70:	lsr	r2, sl, #8
   16f74:	strb	r0, [r3, #3]
   16f78:	strb	r1, [r3, #2]
   16f7c:	strb	r2, [r3, #1]
   16f80:	ldr	sl, [pc, #1496]	; 17560 <read_boolean_unary_expression@@Base+0x12d4>
   16f84:	adds	r0, r7, #8
   16f88:	adc	r1, r6, #0
   16f8c:	add	sl, pc, sl
   16f90:	strd	r0, [sl]
   16f94:	ldr	r5, [sp]
   16f98:	mov	r6, ip
   16f9c:	lsr	r2, r5, #24
   16fa0:	strb	r5, [r6, r0]!
   16fa4:	lsr	r3, r5, #16
   16fa8:	lsr	r7, r5, #8
   16fac:	strb	r2, [r6, #3]
   16fb0:	strb	r3, [r6, #2]
   16fb4:	strb	r7, [r6, #1]
   16fb8:	adds	r2, r0, #4
   16fbc:	adc	r3, r1, #0
   16fc0:	ldmib	sp, {r5, r9}
   16fc4:	strd	r2, [sl]
   16fc8:	b	17174 <read_boolean_unary_expression@@Base+0xee8>
   16fcc:	mov	r3, ip
   16fd0:	lsr	r0, sl, #24
   16fd4:	strb	sl, [r3, r4]!
   16fd8:	lsr	r1, sl, #16
   16fdc:	lsr	r2, sl, #8
   16fe0:	strb	r0, [r3, #3]
   16fe4:	strb	r1, [r3, #2]
   16fe8:	strb	r2, [r3, #1]
   16fec:	ldr	sl, [pc, #1400]	; 1756c <read_boolean_unary_expression@@Base+0x12e0>
   16ff0:	adds	r0, r7, #8
   16ff4:	adc	r1, r6, #0
   16ff8:	add	sl, pc, sl
   16ffc:	strd	r0, [sl]
   17000:	ldr	r7, [lr, #4]
   17004:	ldr	r6, [pc, #1396]	; 17580 <read_boolean_unary_expression@@Base+0x12f4>
   17008:	adds	r2, r4, #8
   1700c:	adc	r3, r9, #0
   17010:	ldr	r6, [pc, r6]
   17014:	subs	r2, r6, r2
   17018:	sbcs	r2, r7, r3
   1701c:	bcs	170c4 <read_boolean_unary_expression@@Base+0xe38>
   17020:	mov	r0, #7
   17024:	orr	r0, r0, #131072	; 0x20000
   17028:	adds	r0, r4, r0
   1702c:	adc	r1, r9, #0
   17030:	mvn	r2, #0
   17034:	and	r5, r1, r2
   17038:	mov	r1, #16646144	; 0xfe0000
   1703c:	orr	r1, r1, #-16777216	; 0xff000000
   17040:	and	r4, r0, r1
   17044:	ldr	r7, [pc, #1336]	; 17584 <read_boolean_unary_expression@@Base+0x12f8>
   17048:	mov	r0, ip
   1704c:	mov	r1, r4
   17050:	add	r7, pc, r7
   17054:	mov	r6, lr
   17058:	bl	11eec <realloc@plt>
   1705c:	mov	lr, r6
   17060:	str	r0, [r7]
   17064:	strd	r4, [lr]
   17068:	mov	ip, r0
   1706c:	ldr	r6, [sp]
   17070:	ldr	r0, [pc, #1296]	; 17588 <read_boolean_unary_expression@@Base+0x12fc>
   17074:	ldr	r1, [sl, #4]
   17078:	mov	r3, ip
   1707c:	add	r0, pc, r0
   17080:	lsr	r2, r6, #24
   17084:	ldrb	r7, [r0]
   17088:	ldr	r0, [pc, #1276]	; 1758c <read_boolean_unary_expression@@Base+0x1300>
   1708c:	ldr	r0, [pc, r0]
   17090:	strb	r6, [r3, r0]!
   17094:	ldmib	sp, {r5, r9}
   17098:	strb	r2, [r3, #3]
   1709c:	lsr	r2, r6, #8
   170a0:	lsr	r6, r6, #16
   170a4:	strb	r2, [r3, #1]
   170a8:	adds	r2, r0, #4
   170ac:	strb	r6, [r3, #2]
   170b0:	adc	r3, r1, #0
   170b4:	cmp	r7, #1
   170b8:	strd	r2, [sl]
   170bc:	beq	170f8 <read_boolean_unary_expression@@Base+0xe6c>
   170c0:	b	17174 <read_boolean_unary_expression@@Base+0xee8>
   170c4:	ldr	r5, [sp]
   170c8:	mov	r6, ip
   170cc:	lsr	r2, r5, #24
   170d0:	strb	r5, [r6, r0]!
   170d4:	lsr	r3, r5, #16
   170d8:	lsr	r7, r5, #8
   170dc:	strb	r2, [r6, #3]
   170e0:	strb	r3, [r6, #2]
   170e4:	strb	r7, [r6, #1]
   170e8:	adds	r2, r0, #4
   170ec:	adc	r3, r1, #0
   170f0:	ldmib	sp, {r5, r9}
   170f4:	strd	r2, [sl]
   170f8:	str	r8, [sp, #8]
   170fc:	mov	r8, lr
   17100:	adds	r7, r0, #8
   17104:	ldr	r6, [r8, #4]
   17108:	ldr	r4, [pc, #1152]	; 17590 <read_boolean_unary_expression@@Base+0x1304>
   1710c:	adc	lr, r1, #0
   17110:	ldr	r4, [pc, r4]
   17114:	subs	r7, r4, r7
   17118:	sbcs	r7, r6, lr
   1711c:	bcs	17170 <read_boolean_unary_expression@@Base+0xee4>
   17120:	mov	r2, #7
   17124:	orr	r2, r2, #131072	; 0x20000
   17128:	adds	r0, r0, r2
   1712c:	adc	r1, r1, #0
   17130:	mvn	r2, #0
   17134:	and	r7, r1, r2
   17138:	mov	r1, #16646144	; 0xfe0000
   1713c:	orr	r1, r1, #-16777216	; 0xff000000
   17140:	and	r6, r0, r1
   17144:	ldr	r4, [pc, #1096]	; 17594 <read_boolean_unary_expression@@Base+0x1308>
   17148:	mov	r0, ip
   1714c:	mov	r1, r6
   17150:	add	r4, pc, r4
   17154:	bl	11eec <realloc@plt>
   17158:	strd	r6, [r8]
   1715c:	str	r0, [r4]
   17160:	ldr	r3, [sl, #4]
   17164:	ldr	r2, [pc, #1068]	; 17598 <read_boolean_unary_expression@@Base+0x130c>
   17168:	mov	ip, r0
   1716c:	ldr	r2, [pc, r2]
   17170:	ldr	r8, [sp, #8]
   17174:	mov	r6, ip
   17178:	lsr	r7, r5, #8
   1717c:	strb	r5, [r6, r2]!
   17180:	adds	r4, r2, #4
   17184:	lsr	r0, r5, #24
   17188:	lsr	r1, r5, #16
   1718c:	strb	r7, [r6, #1]
   17190:	adc	r7, r3, #0
   17194:	cmp	r9, #0
   17198:	strb	r0, [r6, #3]
   1719c:	strb	r1, [r6, #2]
   171a0:	stm	sl, {r4, r7}
   171a4:	beq	17278 <read_boolean_unary_expression@@Base+0xfec>
   171a8:	ldr	r0, [pc, #1004]	; 1759c <read_boolean_unary_expression@@Base+0x1310>
   171ac:	ldr	sl, [fp, #8]
   171b0:	add	r0, pc, r0
   171b4:	ldrb	r0, [r0]
   171b8:	cmp	r0, #1
   171bc:	bne	17244 <read_boolean_unary_expression@@Base+0xfb8>
   171c0:	ldr	r9, [pc, #984]	; 175a0 <read_boolean_unary_expression@@Base+0x1314>
   171c4:	adds	r0, r2, #8
   171c8:	adc	r1, r3, #0
   171cc:	add	r9, pc, r9
   171d0:	ldr	r6, [r9, #4]
   171d4:	ldr	r5, [pc, #968]	; 175a4 <read_boolean_unary_expression@@Base+0x1318>
   171d8:	ldr	r5, [pc, r5]
   171dc:	subs	r0, r5, r0
   171e0:	sbcs	r0, r6, r1
   171e4:	bcs	17244 <read_boolean_unary_expression@@Base+0xfb8>
   171e8:	mov	r0, #7
   171ec:	orr	r0, r0, #131072	; 0x20000
   171f0:	adds	r0, r2, r0
   171f4:	adc	r1, r3, #0
   171f8:	mvn	r2, #0
   171fc:	and	r5, r1, r2
   17200:	mov	r1, #16646144	; 0xfe0000
   17204:	orr	r1, r1, #-16777216	; 0xff000000
   17208:	and	r6, r0, r1
   1720c:	ldr	r4, [pc, #916]	; 175a8 <read_boolean_unary_expression@@Base+0x131c>
   17210:	mov	r0, ip
   17214:	mov	r1, r6
   17218:	add	r4, pc, r4
   1721c:	bl	11eec <realloc@plt>
   17220:	str	r6, [r9]
   17224:	str	r5, [r9, #4]
   17228:	mov	ip, r0
   1722c:	ldr	r0, [pc, #888]	; 175ac <read_boolean_unary_expression@@Base+0x1320>
   17230:	str	ip, [r4]
   17234:	add	r0, pc, r0
   17238:	ldr	r7, [r0, #4]
   1723c:	ldr	r4, [pc, #876]	; 175b0 <read_boolean_unary_expression@@Base+0x1324>
   17240:	ldr	r4, [pc, r4]
   17244:	mov	r3, ip
   17248:	lsr	r0, sl, #24
   1724c:	strb	sl, [r3, r4]!
   17250:	lsr	r1, sl, #16
   17254:	lsr	r2, sl, #8
   17258:	strb	r0, [r3, #3]
   1725c:	strb	r1, [r3, #2]
   17260:	strb	r2, [r3, #1]
   17264:	ldr	sl, [pc, #840]	; 175b4 <read_boolean_unary_expression@@Base+0x1328>
   17268:	adds	r4, r4, #4
   1726c:	adc	r7, r7, #0
   17270:	add	sl, pc, sl
   17274:	stm	sl, {r4, r7}
   17278:	cmp	r8, #0
   1727c:	beq	1752c <read_boolean_unary_expression@@Base+0x12a0>
   17280:	mov	r0, r8
   17284:	mov	r9, ip
   17288:	bl	11f70 <strlen@plt>
   1728c:	mov	r6, #1
   17290:	add	r5, r6, r0, lsr #2
   17294:	ldr	r0, [pc, #796]	; 175b8 <read_boolean_unary_expression@@Base+0x132c>
   17298:	add	r0, pc, r0
   1729c:	ldrb	r0, [r0]
   172a0:	cmp	r0, #1
   172a4:	bne	17348 <read_boolean_unary_expression@@Base+0x10bc>
   172a8:	ldr	sl, [pc, #780]	; 175bc <read_boolean_unary_expression@@Base+0x1330>
   172ac:	adds	r0, r4, #4
   172b0:	adc	r1, r7, #0
   172b4:	add	sl, pc, sl
   172b8:	ldr	r2, [sl, #4]
   172bc:	ldr	r3, [pc, #764]	; 175c0 <read_boolean_unary_expression@@Base+0x1334>
   172c0:	ldr	r3, [pc, r3]
   172c4:	subs	r0, r3, r0
   172c8:	sbcs	r0, r2, r1
   172cc:	bcs	1735c <read_boolean_unary_expression@@Base+0x10d0>
   172d0:	mov	r0, #0
   172d4:	str	r0, [sp, #8]
   172d8:	mov	r0, #7
   172dc:	orr	r0, r0, #131072	; 0x20000
   172e0:	adds	r0, r0, r4
   172e4:	adc	r1, r7, #0
   172e8:	subs	r0, r0, #4
   172ec:	sbc	r1, r1, #0
   172f0:	mvn	r2, #0
   172f4:	and	r7, r1, r2
   172f8:	mov	r1, #16646144	; 0xfe0000
   172fc:	orr	r1, r1, #-16777216	; 0xff000000
   17300:	and	r4, r0, r1
   17304:	ldr	r6, [pc, #700]	; 175c8 <read_boolean_unary_expression@@Base+0x133c>
   17308:	mov	r0, r9
   1730c:	mov	r1, r4
   17310:	add	r6, pc, r6
   17314:	bl	11eec <realloc@plt>
   17318:	stm	sl, {r4, r7}
   1731c:	str	r0, [r6]
   17320:	ldr	sl, [pc, #676]	; 175cc <read_boolean_unary_expression@@Base+0x1340>
   17324:	mov	r3, r0
   17328:	add	sl, pc, sl
   1732c:	ldr	r7, [sl, #4]
   17330:	ldr	r0, [pc, #664]	; 175d0 <read_boolean_unary_expression@@Base+0x1344>
   17334:	add	r0, pc, r0
   17338:	ldrb	r6, [r0]
   1733c:	ldr	r4, [pc, #656]	; 175d4 <read_boolean_unary_expression@@Base+0x1348>
   17340:	ldr	r4, [pc, r4]
   17344:	b	17370 <read_boolean_unary_expression@@Base+0x10e4>
   17348:	mov	r0, #0
   1734c:	str	r0, [sp, #8]
   17350:	mov	r6, #0
   17354:	mov	r3, r9
   17358:	b	17370 <read_boolean_unary_expression@@Base+0x10e4>
   1735c:	mov	r0, #0
   17360:	str	r0, [sp, #8]
   17364:	ldr	sl, [pc, #600]	; 175c4 <read_boolean_unary_expression@@Base+0x1338>
   17368:	mov	r3, r9
   1736c:	add	sl, pc, sl
   17370:	mov	r9, r3
   17374:	strb	r5, [r3, r4]!
   17378:	lsr	r0, r5, #24
   1737c:	adds	r4, r4, #4
   17380:	lsr	r1, r5, #16
   17384:	lsr	r2, r5, #8
   17388:	strb	r0, [r3, #3]
   1738c:	mov	r0, r8
   17390:	adc	r5, r7, #0
   17394:	strb	r1, [r3, #2]
   17398:	strb	r2, [r3, #1]
   1739c:	strd	r4, [sl]
   173a0:	bl	11f70 <strlen@plt>
   173a4:	mov	r7, r0
   173a8:	cmp	r6, #0
   173ac:	beq	17448 <read_boolean_unary_expression@@Base+0x11bc>
   173b0:	ldr	r6, [pc, #544]	; 175d8 <read_boolean_unary_expression@@Base+0x134c>
   173b4:	adds	r0, r4, r7
   173b8:	adc	r1, r5, #0
   173bc:	add	r6, pc, r6
   173c0:	ldr	r2, [r6, #4]
   173c4:	ldr	r3, [pc, #528]	; 175dc <read_boolean_unary_expression@@Base+0x1350>
   173c8:	ldr	r3, [pc, r3]
   173cc:	subs	r3, r3, r0
   173d0:	sbcs	r2, r2, r1
   173d4:	bcs	17440 <read_boolean_unary_expression@@Base+0x11b4>
   173d8:	mov	r2, #7
   173dc:	orr	r2, r2, #131072	; 0x20000
   173e0:	adds	r0, r2, r0
   173e4:	adc	r1, r1, #0
   173e8:	subs	r0, r0, #8
   173ec:	sbc	r1, r1, #0
   173f0:	mvn	r2, #0
   173f4:	and	r5, r1, r2
   173f8:	mov	r1, #16646144	; 0xfe0000
   173fc:	orr	r1, r1, #-16777216	; 0xff000000
   17400:	and	r4, r0, r1
   17404:	mov	r0, r9
   17408:	mov	r1, r4
   1740c:	bl	11eec <realloc@plt>
   17410:	strd	r4, [r6]
   17414:	ldr	r1, [pc, #452]	; 175e0 <read_boolean_unary_expression@@Base+0x1354>
   17418:	ldr	r5, [sl, #4]
   1741c:	add	r1, pc, r1
   17420:	str	r0, [r1]
   17424:	ldr	r1, [pc, #440]	; 175e4 <read_boolean_unary_expression@@Base+0x1358>
   17428:	add	r1, pc, r1
   1742c:	ldrb	r1, [r1]
   17430:	str	r1, [sp, #8]
   17434:	ldr	r4, [pc, #428]	; 175e8 <read_boolean_unary_expression@@Base+0x135c>
   17438:	ldr	r4, [pc, r4]
   1743c:	b	1744c <read_boolean_unary_expression@@Base+0x11c0>
   17440:	mov	r0, #1
   17444:	str	r0, [sp, #8]
   17448:	mov	r0, r9
   1744c:	mov	r9, r0
   17450:	add	r0, r0, r4
   17454:	mov	r1, r8
   17458:	mov	r2, r7
   1745c:	bl	11eb0 <memcpy@plt>
   17460:	adds	r6, r4, r7
   17464:	mov	r0, r8
   17468:	adc	r5, r5, #0
   1746c:	str	r6, [sl]
   17470:	str	r5, [sl, #4]
   17474:	bl	11f70 <strlen@plt>
   17478:	and	r0, r0, #3
   1747c:	rsb	r4, r0, #4
   17480:	ldr	r0, [sp, #8]
   17484:	cmp	r0, #0
   17488:	beq	17510 <read_boolean_unary_expression@@Base+0x1284>
   1748c:	ldr	r7, [pc, #344]	; 175ec <read_boolean_unary_expression@@Base+0x1360>
   17490:	adds	r0, r6, r4
   17494:	adc	r1, r5, #0
   17498:	add	r7, pc, r7
   1749c:	ldr	r2, [r7, #4]
   174a0:	ldr	r3, [pc, #328]	; 175f0 <read_boolean_unary_expression@@Base+0x1364>
   174a4:	ldr	r3, [pc, r3]
   174a8:	subs	r3, r3, r0
   174ac:	sbcs	r2, r2, r1
   174b0:	bcs	17510 <read_boolean_unary_expression@@Base+0x1284>
   174b4:	mov	r2, #7
   174b8:	orr	r2, r2, #131072	; 0x20000
   174bc:	adds	r0, r2, r0
   174c0:	adc	r1, r1, #0
   174c4:	subs	r0, r0, #8
   174c8:	sbc	r1, r1, #0
   174cc:	mvn	r2, #0
   174d0:	and	r5, r1, r2
   174d4:	mov	r1, #16646144	; 0xfe0000
   174d8:	orr	r1, r1, #-16777216	; 0xff000000
   174dc:	and	r6, r0, r1
   174e0:	ldr	r8, [pc, #268]	; 175f4 <read_boolean_unary_expression@@Base+0x1368>
   174e4:	mov	r0, r9
   174e8:	mov	r1, r6
   174ec:	add	r8, pc, r8
   174f0:	bl	11eec <realloc@plt>
   174f4:	str	r6, [r7]
   174f8:	str	r5, [r7, #4]
   174fc:	str	r0, [r8]
   17500:	ldr	r5, [sl, #4]
   17504:	ldr	r6, [pc, #236]	; 175f8 <read_boolean_unary_expression@@Base+0x136c>
   17508:	mov	r9, r0
   1750c:	ldr	r6, [pc, r6]
   17510:	add	r0, r9, r6
   17514:	mov	r1, #0
   17518:	mov	r2, r4
   1751c:	bl	11fb8 <memset@plt>
   17520:	adds	r0, r6, r4
   17524:	adc	r1, r5, #0
   17528:	strd	r0, [sl]
   1752c:	sub	sp, fp, #28
   17530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17534:	andeq	r5, r1, r4, asr #32
   17538:	andeq	r5, r1, r8, lsr #32
   1753c:	andeq	r5, r1, ip, lsr #32
   17540:	andeq	r5, r1, r0, lsl r0
   17544:	andeq	r5, r1, r4, lsl r0
   17548:	strdeq	r4, [r1], -r8
   1754c:	andeq	r4, r1, ip, lsr #31
   17550:	andeq	r4, r1, r8, lsr #31
   17554:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17558:	andeq	r4, r1, r0, lsl #31
   1755c:	andeq	r4, r1, ip, lsr #30
   17560:	andeq	r4, r1, ip, lsr #28
   17564:	andeq	r4, r1, ip, lsl pc
   17568:	andeq	r4, r1, r0, lsl pc
   1756c:	andeq	r4, r1, r0, asr #27
   17570:	andeq	r4, r1, ip, asr #29
   17574:	muleq	r1, ip, lr
   17578:	andeq	r4, r1, r0, lsr #29
   1757c:	andeq	r4, r1, ip, lsl #29
   17580:	andeq	r4, r1, r0, lsr #27
   17584:	andeq	r4, r1, ip, asr sp
   17588:	andeq	r4, r1, r8, lsr #26
   1758c:	andeq	r4, r1, ip, lsr #26
   17590:	andeq	r4, r1, r0, lsr #25
   17594:	andeq	r4, r1, ip, asr ip
   17598:	andeq	r4, r1, ip, asr #24
   1759c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   175a0:	andeq	r4, r1, r4, ror #23
   175a4:	ldrdeq	r4, [r1], -r8
   175a8:	muleq	r1, r4, fp
   175ac:	andeq	r4, r1, r4, lsl #23
   175b0:	andeq	r4, r1, r8, ror fp
   175b4:	andeq	r4, r1, r8, asr #22
   175b8:	andeq	r4, r1, ip, lsl #22
   175bc:	strdeq	r4, [r1], -ip
   175c0:	strdeq	r4, [r1], -r0
   175c4:	andeq	r4, r1, ip, asr #20
   175c8:	muleq	r1, ip, sl
   175cc:	muleq	r1, r0, sl
   175d0:	andeq	r4, r1, r0, ror sl
   175d4:	andeq	r4, r1, r8, ror sl
   175d8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   175dc:	andeq	r4, r1, r8, ror #19
   175e0:	muleq	r1, r0, r9
   175e4:	andeq	r4, r1, ip, ror r9
   175e8:	andeq	r4, r1, r0, lsl #19
   175ec:	andeq	r4, r1, r8, lsl r9
   175f0:	andeq	r4, r1, ip, lsl #18
   175f4:	andeq	r4, r1, r0, asr #17
   175f8:	andeq	r4, r1, ip, lsr #17
   175fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17600:	add	fp, sp, #28
   17604:	sub	sp, sp, #28
   17608:	mov	ip, r0
   1760c:	ldr	r0, [pc, #1740]	; 17ce0 <read_boolean_unary_expression@@Base+0x1a54>
   17610:	ldr	r0, [pc, r0]
   17614:	cmp	r0, #0
   17618:	beq	17734 <read_boolean_unary_expression@@Base+0x14a8>
   1761c:	ldr	r5, [pc, #1728]	; 17ce4 <read_boolean_unary_expression@@Base+0x1a58>
   17620:	mov	sl, r1
   17624:	add	r5, pc, r5
   17628:	ldr	r3, [r5, #4]
   1762c:	ldr	r4, [pc, #1716]	; 17ce8 <read_boolean_unary_expression@@Base+0x1a5c>
   17630:	ldr	r4, [pc, r4]
   17634:	ldr	r6, [pc, #1712]	; 17cec <read_boolean_unary_expression@@Base+0x1a60>
   17638:	add	r6, pc, r6
   1763c:	ldrb	r0, [r6]
   17640:	cmp	r0, #0
   17644:	beq	1773c <read_boolean_unary_expression@@Base+0x14b0>
   17648:	ldr	r8, [pc, #1732]	; 17d14 <read_boolean_unary_expression@@Base+0x1a88>
   1764c:	mov	r5, #10551296	; 0xa10000
   17650:	adds	r9, r4, #4
   17654:	add	r8, pc, r8
   17658:	adc	r2, r3, #0
   1765c:	ldr	r0, [r8, #4]
   17660:	ldr	r1, [pc, #1712]	; 17d18 <read_boolean_unary_expression@@Base+0x1a8c>
   17664:	orr	r5, r5, #16777216	; 0x1000000
   17668:	ldr	r1, [pc, r1]
   1766c:	subs	r1, r1, r9
   17670:	sbcs	r0, r0, r2
   17674:	bcs	17840 <read_boolean_unary_expression@@Base+0x15b4>
   17678:	mov	r0, #3
   1767c:	orr	r0, r0, #131072	; 0x20000
   17680:	adds	r0, r4, r0
   17684:	adc	r1, r3, #0
   17688:	mvn	r2, #0
   1768c:	and	r9, r1, r2
   17690:	mov	r1, #16646144	; 0xfe0000
   17694:	orr	r1, r1, #-16777216	; 0xff000000
   17698:	and	r4, r0, r1
   1769c:	ldr	r0, [pc, #1664]	; 17d24 <read_boolean_unary_expression@@Base+0x1a98>
   176a0:	mov	r1, r4
   176a4:	mov	r7, ip
   176a8:	ldr	r0, [pc, r0]
   176ac:	bl	11eec <realloc@plt>
   176b0:	ldr	ip, [pc, #1648]	; 17d28 <read_boolean_unary_expression@@Base+0x1a9c>
   176b4:	ldr	lr, [pc, #1648]	; 17d2c <read_boolean_unary_expression@@Base+0x1aa0>
   176b8:	stm	r8, {r4, r9}
   176bc:	ldr	r1, [pc, #1644]	; 17d30 <read_boolean_unary_expression@@Base+0x1aa4>
   176c0:	add	ip, pc, ip
   176c4:	add	lr, pc, lr
   176c8:	add	r1, pc, r1
   176cc:	mov	r2, r0
   176d0:	str	r2, [r1]
   176d4:	mov	r6, ip
   176d8:	ldrb	ip, [ip]
   176dc:	ldr	r3, [lr, #4]
   176e0:	ldr	r4, [pc, #1612]	; 17d34 <read_boolean_unary_expression@@Base+0x1aa8>
   176e4:	lsr	r0, r5, #24
   176e8:	mov	r1, r8
   176ec:	ldr	r4, [pc, r4]
   176f0:	str	r2, [sp, #20]
   176f4:	lsl	r8, r7, #1
   176f8:	strb	r5, [r2, r4]!
   176fc:	adds	r9, r4, #4
   17700:	strb	r0, [r2, #3]
   17704:	lsr	r0, r5, #16
   17708:	strb	r0, [r2, #2]
   1770c:	lsr	r0, r5, #8
   17710:	strb	r0, [r2, #1]
   17714:	adc	r5, r3, #0
   17718:	mov	r0, #0
   1771c:	cmp	ip, #1
   17720:	str	r3, [sp, #16]
   17724:	str	r9, [lr]
   17728:	str	r5, [lr, #4]
   1772c:	beq	17894 <read_boolean_unary_expression@@Base+0x1608>
   17730:	b	179f8 <read_boolean_unary_expression@@Base+0x176c>
   17734:	sub	sp, fp, #28
   17738:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1773c:	ldr	r0, [pc, #1452]	; 17cf0 <read_boolean_unary_expression@@Base+0x1a64>
   17740:	mov	r7, r3
   17744:	mov	r9, #0
   17748:	ldr	r0, [pc, r0]
   1774c:	str	r0, [sp, #20]
   17750:	ldrb	r1, [r0, r4]!
   17754:	str	r7, [sp, #16]
   17758:	ldrb	r2, [r0, #1]
   1775c:	ldrb	r3, [r0, #2]
   17760:	ldrb	r0, [r0, #3]
   17764:	orr	r1, r1, r2, lsl #8
   17768:	orr	r1, r1, r3, lsl #16
   1776c:	adds	r2, r4, #4
   17770:	orr	r3, r1, r0, lsl #24
   17774:	adc	r7, r7, #0
   17778:	mov	r1, r5
   1777c:	stm	r5, {r2, r7}
   17780:	mov	r5, #10551296	; 0xa10000
   17784:	orr	r5, r5, #16777216	; 0x1000000
   17788:	cmn	r3, #1
   1778c:	beq	17940 <read_boolean_unary_expression@@Base+0x16b4>
   17790:	cmp	r3, r5
   17794:	bne	17950 <read_boolean_unary_expression@@Base+0x16c4>
   17798:	str	r7, [sp, #8]
   1779c:	ldr	r0, [sp, #20]
   177a0:	str	r4, [sp, #4]
   177a4:	mov	r8, r5
   177a8:	ldr	r3, [r0, r2]
   177ac:	ldr	r0, [sp, #16]
   177b0:	adds	r5, r4, #8
   177b4:	adc	r9, r0, #0
   177b8:	cmn	r3, #1
   177bc:	stm	r1, {r5, r9}
   177c0:	beq	1795c <read_boolean_unary_expression@@Base+0x16d0>
   177c4:	lsr	r0, r3, #1
   177c8:	mov	r7, ip
   177cc:	cmp	r0, ip
   177d0:	bne	1795c <read_boolean_unary_expression@@Base+0x16d0>
   177d4:	lsl	r0, r7, #3
   177d8:	mov	r4, r2
   177dc:	bl	11f28 <malloc@plt>
   177e0:	cmp	r7, #0
   177e4:	beq	17984 <read_boolean_unary_expression@@Base+0x16f8>
   177e8:	str	r0, [sp, #12]
   177ec:	str	r7, [sp, #24]
   177f0:	ldr	r2, [sp, #20]
   177f4:	ldr	r3, [r2, r5]!
   177f8:	adds	r5, r5, #8
   177fc:	ldr	r2, [r2, #4]
   17800:	str	r3, [r0]
   17804:	adc	r9, r9, #0
   17808:	str	r2, [r0, #4]
   1780c:	add	r0, r0, #8
   17810:	subs	r7, r7, #1
   17814:	bne	177f0 <read_boolean_unary_expression@@Base+0x1564>
   17818:	ldr	lr, [pc, #1260]	; 17d0c <read_boolean_unary_expression@@Base+0x1a80>
   1781c:	add	lr, pc, lr
   17820:	stm	lr, {r5, r9}
   17824:	ldr	ip, [pc, #1252]	; 17d10 <read_boolean_unary_expression@@Base+0x1a84>
   17828:	mov	r1, lr
   1782c:	ldr	r0, [sp, #12]
   17830:	add	ip, pc, ip
   17834:	mov	r6, ip
   17838:	ldr	ip, [sp, #24]
   1783c:	b	179a0 <read_boolean_unary_expression@@Base+0x1714>
   17840:	str	r3, [sp, #16]
   17844:	ldr	r3, [pc, #1232]	; 17d1c <read_boolean_unary_expression@@Base+0x1a90>
   17848:	mov	lr, r5
   1784c:	mov	r7, ip
   17850:	lsr	ip, r5, #16
   17854:	ldr	r3, [pc, r3]
   17858:	lsr	r1, r5, #8
   1785c:	str	r3, [sp, #20]
   17860:	strb	lr, [r3, r4]!
   17864:	lsr	r0, lr, #24
   17868:	strb	r1, [r3, #1]
   1786c:	strb	r0, [r3, #3]
   17870:	strb	ip, [r3, #2]
   17874:	ldr	lr, [pc, #1188]	; 17d20 <read_boolean_unary_expression@@Base+0x1a94>
   17878:	lsl	r5, r7, #1
   1787c:	add	lr, pc, lr
   17880:	mov	r1, r8
   17884:	mov	r8, r5
   17888:	str	r9, [lr]
   1788c:	str	r2, [lr, #4]
   17890:	mov	r5, r2
   17894:	str	r8, [sp, #24]
   17898:	mov	r8, r1
   1789c:	ldr	r0, [sp, #16]
   178a0:	ldr	r2, [r8, #4]
   178a4:	ldr	r3, [pc, #1164]	; 17d38 <read_boolean_unary_expression@@Base+0x1aac>
   178a8:	adds	ip, r4, #8
   178ac:	adc	r1, r0, #0
   178b0:	mov	r0, #0
   178b4:	ldr	r3, [pc, r3]
   178b8:	subs	r3, r3, ip
   178bc:	sbcs	r1, r2, r1
   178c0:	bcs	17938 <read_boolean_unary_expression@@Base+0x16ac>
   178c4:	ldr	r5, [pc, #1136]	; 17d3c <read_boolean_unary_expression@@Base+0x1ab0>
   178c8:	mov	r0, #3
   178cc:	ldr	r1, [sp, #16]
   178d0:	orr	r0, r0, #131072	; 0x20000
   178d4:	adds	r0, r0, r4
   178d8:	adc	r1, r1, #0
   178dc:	adds	r0, r0, #4
   178e0:	adc	r1, r1, #0
   178e4:	mvn	r2, #0
   178e8:	and	r9, r1, r2
   178ec:	mov	r1, #16646144	; 0xfe0000
   178f0:	orr	r1, r1, #-16777216	; 0xff000000
   178f4:	and	r4, r0, r1
   178f8:	ldr	r0, [sp, #20]
   178fc:	mov	r1, r4
   17900:	add	r5, pc, r5
   17904:	bl	11eec <realloc@plt>
   17908:	ldr	ip, [pc, #1072]	; 17d40 <read_boolean_unary_expression@@Base+0x1ab4>
   1790c:	ldr	lr, [pc, #1072]	; 17d44 <read_boolean_unary_expression@@Base+0x1ab8>
   17910:	stm	r8, {r4, r9}
   17914:	add	lr, pc, lr
   17918:	str	r0, [r5]
   1791c:	str	r0, [sp, #20]
   17920:	ldr	r5, [lr, #4]
   17924:	ldr	r9, [pc, #1052]	; 17d48 <read_boolean_unary_expression@@Base+0x1abc>
   17928:	add	ip, pc, ip
   1792c:	mov	r6, ip
   17930:	mov	r0, #0
   17934:	ldr	r9, [pc, r9]
   17938:	ldr	r8, [sp, #24]
   1793c:	b	179f8 <read_boolean_unary_expression@@Base+0x176c>
   17940:	mov	r3, r2
   17944:	ldr	r2, [sp, #16]
   17948:	mov	r0, #0
   1794c:	b	179b8 <read_boolean_unary_expression@@Base+0x172c>
   17950:	ldr	r1, [pc, #924]	; 17cf4 <read_boolean_unary_expression@@Base+0x1a68>
   17954:	add	r1, pc, r1
   17958:	b	17964 <read_boolean_unary_expression@@Base+0x16d8>
   1795c:	ldr	r1, [pc, #924]	; 17d00 <read_boolean_unary_expression@@Base+0x1a74>
   17960:	add	r1, pc, r1
   17964:	ldr	r0, [pc, #908]	; 17cf8 <read_boolean_unary_expression@@Base+0x1a6c>
   17968:	ldr	r0, [pc, r0]
   1796c:	ldr	r0, [r0]
   17970:	ldr	r2, [pc, #900]	; 17cfc <read_boolean_unary_expression@@Base+0x1a70>
   17974:	ldr	r2, [pc, r2]
   17978:	sub	sp, fp, #28
   1797c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17980:	b	11f88 <fprintf@plt>
   17984:	ldr	lr, [pc, #888]	; 17d04 <read_boolean_unary_expression@@Base+0x1a78>
   17988:	ldr	ip, [pc, #888]	; 17d08 <read_boolean_unary_expression@@Base+0x1a7c>
   1798c:	add	lr, pc, lr
   17990:	add	ip, pc, ip
   17994:	mov	r6, ip
   17998:	mov	r1, lr
   1799c:	mov	ip, r7
   179a0:	mov	r3, r4
   179a4:	ldr	r7, [sp, #8]
   179a8:	ldr	r4, [sp, #4]
   179ac:	ldr	r2, [sp, #16]
   179b0:	mov	r9, #0
   179b4:	mov	r5, r8
   179b8:	mov	lr, r1
   179bc:	mov	r1, #1
   179c0:	str	r4, [lr]
   179c4:	str	r2, [lr, #4]
   179c8:	ldr	r2, [sp, #20]
   179cc:	lsl	r8, ip, #1
   179d0:	strb	r5, [r2, r4]!
   179d4:	mov	r5, r7
   179d8:	strb	r1, [r2, #3]
   179dc:	mov	r1, #161	; 0xa1
   179e0:	strb	r9, [r2, #1]
   179e4:	mov	r9, r3
   179e8:	strb	r1, [r2, #2]
   179ec:	str	r9, [lr]
   179f0:	str	r7, [lr, #4]
   179f4:	mov	r7, ip
   179f8:	ldr	r3, [sp, #20]
   179fc:	lsr	r1, r8, #16
   17a00:	mov	ip, r3
   17a04:	strb	r8, [r3, r9]!
   17a08:	lsr	r4, r8, #24
   17a0c:	lsr	r2, r8, #8
   17a10:	adds	r8, r9, #4
   17a14:	strb	r1, [r3, #2]
   17a18:	adc	r1, r5, #0
   17a1c:	cmp	r7, #0
   17a20:	strb	r4, [r3, #3]
   17a24:	strb	r2, [r3, #1]
   17a28:	str	r8, [lr]
   17a2c:	str	r1, [lr, #4]
   17a30:	str	r7, [sp, #24]
   17a34:	beq	17cd4 <read_boolean_unary_expression@@Base+0x1a48>
   17a38:	ldr	r7, [pc, #780]	; 17d4c <read_boolean_unary_expression@@Base+0x1ac0>
   17a3c:	mov	r4, lr
   17a40:	mov	r2, r0
   17a44:	add	r7, pc, r7
   17a48:	str	r0, [sp, #12]
   17a4c:	b	17ae8 <read_boolean_unary_expression@@Base+0x185c>
   17a50:	mov	r7, ip
   17a54:	lsr	r2, r4, #24
   17a58:	strb	r4, [r7, r8]!
   17a5c:	mov	lr, r6
   17a60:	lsr	r9, r4, #16
   17a64:	lsr	r6, r4, #8
   17a68:	strb	r2, [r7, #3]
   17a6c:	adds	r2, r8, #4
   17a70:	mov	r4, r0
   17a74:	strb	r9, [r7, #2]
   17a78:	mov	r3, ip
   17a7c:	strb	r6, [r7, #1]
   17a80:	adc	r9, r1, #0
   17a84:	stm	r4, {r2, r9}
   17a88:	mov	ip, r3
   17a8c:	lsr	r1, r5, #16
   17a90:	strb	r5, [r3, r2]!
   17a94:	lsr	r0, r5, #24
   17a98:	lsr	r7, r5, #8
   17a9c:	adds	r8, r2, #4
   17aa0:	strb	r1, [r3, #2]
   17aa4:	adc	r1, r9, #0
   17aa8:	strb	r0, [r3, #3]
   17aac:	strb	r7, [r3, #1]
   17ab0:	str	r8, [r4]
   17ab4:	str	r1, [r4, #4]
   17ab8:	ldr	r0, [sp, #24]
   17abc:	ldr	r2, [sp, #16]
   17ac0:	mov	r6, lr
   17ac4:	subs	r0, r0, #1
   17ac8:	str	r0, [sp, #24]
   17acc:	ldr	sl, [sp, #20]
   17ad0:	ldr	r0, [sp, #12]
   17ad4:	ldr	r7, [pc, #676]	; 17d80 <read_boolean_unary_expression@@Base+0x1af4>
   17ad8:	add	r2, r2, #8
   17adc:	add	sl, sl, #8
   17ae0:	add	r7, pc, r7
   17ae4:	beq	17cd4 <read_boolean_unary_expression@@Base+0x1a48>
   17ae8:	cmp	r0, #0
   17aec:	mov	r0, r4
   17af0:	str	r2, [sp, #16]
   17af4:	beq	17b00 <read_boolean_unary_expression@@Base+0x1874>
   17af8:	ldrd	r2, [r2]
   17afc:	b	17b08 <read_boolean_unary_expression@@Base+0x187c>
   17b00:	mov	r2, #0
   17b04:	mov	r3, #0
   17b08:	ldrd	r4, [sl]
   17b0c:	adds	r4, r4, r2
   17b10:	adc	r5, r5, r3
   17b14:	strd	r4, [sl]
   17b18:	ldrb	r2, [r6]
   17b1c:	str	sl, [sp, #20]
   17b20:	cmp	r2, #0
   17b24:	beq	17a50 <read_boolean_unary_expression@@Base+0x17c4>
   17b28:	ldr	r3, [r7, #4]
   17b2c:	ldr	r6, [pc, #540]	; 17d50 <read_boolean_unary_expression@@Base+0x1ac4>
   17b30:	adds	r2, r8, #4
   17b34:	adc	r9, r1, #0
   17b38:	ldr	r6, [pc, r6]
   17b3c:	subs	r2, r6, r2
   17b40:	sbcs	r2, r3, r9
   17b44:	bcs	17bf0 <read_boolean_unary_expression@@Base+0x1964>
   17b48:	mov	r2, #3
   17b4c:	orr	r2, r2, #131072	; 0x20000
   17b50:	adds	r0, r8, r2
   17b54:	adc	r1, r1, #0
   17b58:	mvn	r2, #0
   17b5c:	and	r8, r1, r2
   17b60:	mov	r1, #16646144	; 0xfe0000
   17b64:	orr	r1, r1, #-16777216	; 0xff000000
   17b68:	and	r6, r0, r1
   17b6c:	mov	r0, ip
   17b70:	mov	r1, r6
   17b74:	bl	11eec <realloc@plt>
   17b78:	ldr	ip, [pc, #468]	; 17d54 <read_boolean_unary_expression@@Base+0x1ac8>
   17b7c:	ldr	lr, [pc, #468]	; 17d58 <read_boolean_unary_expression@@Base+0x1acc>
   17b80:	stm	r7, {r6, r8}
   17b84:	mov	r3, r0
   17b88:	ldr	r0, [pc, #460]	; 17d5c <read_boolean_unary_expression@@Base+0x1ad0>
   17b8c:	add	lr, pc, lr
   17b90:	mov	r9, lr
   17b94:	add	r0, pc, r0
   17b98:	add	ip, pc, ip
   17b9c:	str	r3, [r0]
   17ba0:	mov	lr, ip
   17ba4:	ldrb	ip, [ip]
   17ba8:	ldr	r1, [r9, #4]
   17bac:	ldr	r8, [pc, #428]	; 17d60 <read_boolean_unary_expression@@Base+0x1ad4>
   17bb0:	mov	r7, r3
   17bb4:	lsr	r2, r4, #24
   17bb8:	ldr	r8, [pc, r8]
   17bbc:	lsr	r6, r4, #16
   17bc0:	strb	r4, [r7, r8]!
   17bc4:	strb	r2, [r7, #3]
   17bc8:	lsr	r2, r4, #8
   17bcc:	strb	r2, [r7, #1]
   17bd0:	adds	r2, r8, #4
   17bd4:	mov	r4, r9
   17bd8:	adc	r9, r1, #0
   17bdc:	cmp	ip, #1
   17be0:	strb	r6, [r7, #2]
   17be4:	stm	r4, {r2, r9}
   17be8:	bne	17a88 <read_boolean_unary_expression@@Base+0x17fc>
   17bec:	b	17c24 <read_boolean_unary_expression@@Base+0x1998>
   17bf0:	mov	r6, ip
   17bf4:	lsr	r2, r4, #24
   17bf8:	strb	r4, [r6, r8]!
   17bfc:	lsr	r9, r4, #16
   17c00:	lsr	r7, r4, #8
   17c04:	strb	r2, [r6, #3]
   17c08:	adds	r2, r8, #4
   17c0c:	mov	r4, r0
   17c10:	strb	r9, [r6, #2]
   17c14:	mov	r3, ip
   17c18:	strb	r7, [r6, #1]
   17c1c:	adc	r9, r1, #0
   17c20:	stm	r4, {r2, r9}
   17c24:	ldr	lr, [pc, #312]	; 17d64 <read_boolean_unary_expression@@Base+0x1ad8>
   17c28:	mov	r0, r4
   17c2c:	adds	r7, r8, #8
   17c30:	add	lr, pc, lr
   17c34:	adc	ip, r1, #0
   17c38:	ldr	r4, [lr, #4]
   17c3c:	ldr	r6, [pc, #292]	; 17d68 <read_boolean_unary_expression@@Base+0x1adc>
   17c40:	ldr	r6, [pc, r6]
   17c44:	subs	r7, r6, r7
   17c48:	sbcs	r7, r4, ip
   17c4c:	bcs	17cc4 <read_boolean_unary_expression@@Base+0x1a38>
   17c50:	mov	r2, #3
   17c54:	orr	r2, r2, #131072	; 0x20000
   17c58:	adds	r0, r2, r8
   17c5c:	adc	r1, r1, #0
   17c60:	adds	r0, r0, #4
   17c64:	adc	r1, r1, #0
   17c68:	mvn	r2, #0
   17c6c:	and	r7, r1, r2
   17c70:	mov	r1, #16646144	; 0xfe0000
   17c74:	orr	r1, r1, #-16777216	; 0xff000000
   17c78:	and	r6, r0, r1
   17c7c:	mov	r0, r3
   17c80:	mov	r1, r6
   17c84:	mov	r8, lr
   17c88:	bl	11eec <realloc@plt>
   17c8c:	ldr	lr, [pc, #220]	; 17d70 <read_boolean_unary_expression@@Base+0x1ae4>
   17c90:	strd	r6, [r8]
   17c94:	mov	r3, r0
   17c98:	add	lr, pc, lr
   17c9c:	mov	r4, lr
   17ca0:	ldr	r9, [lr, #4]
   17ca4:	ldr	r0, [pc, #200]	; 17d74 <read_boolean_unary_expression@@Base+0x1ae8>
   17ca8:	add	r0, pc, r0
   17cac:	str	r3, [r0]
   17cb0:	ldr	r2, [pc, #192]	; 17d78 <read_boolean_unary_expression@@Base+0x1aec>
   17cb4:	ldr	r2, [pc, r2]
   17cb8:	ldr	lr, [pc, #188]	; 17d7c <read_boolean_unary_expression@@Base+0x1af0>
   17cbc:	add	lr, pc, lr
   17cc0:	b	17a88 <read_boolean_unary_expression@@Base+0x17fc>
   17cc4:	ldr	lr, [pc, #160]	; 17d6c <read_boolean_unary_expression@@Base+0x1ae0>
   17cc8:	mov	r4, r0
   17ccc:	add	lr, pc, lr
   17cd0:	b	17a88 <read_boolean_unary_expression@@Base+0x17fc>
   17cd4:	sub	sp, fp, #28
   17cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cdc:	b	11ea4 <free@plt>
   17ce0:	muleq	r1, r8, r7
   17ce4:	muleq	r1, r4, r7
   17ce8:	andeq	r4, r1, r8, lsl #15
   17cec:	andeq	r4, r1, ip, ror #14
   17cf0:	andeq	r4, r1, r4, ror #12
   17cf4:	andeq	r3, r0, r4, ror #2
   17cf8:	andeq	r3, r1, r0, asr r7
   17cfc:	andeq	r4, r1, ip, lsr #8
   17d00:	andeq	r3, r0, r2, lsr #3
   17d04:	andeq	r4, r1, ip, lsr #8
   17d08:	andeq	r4, r1, r4, lsl r4
   17d0c:	muleq	r1, ip, r5
   17d10:	andeq	r4, r1, r4, ror r5
   17d14:	andeq	r4, r1, ip, asr r7
   17d18:	andeq	r4, r1, r8, asr #14
   17d1c:	andeq	r4, r1, r8, asr r5
   17d20:	andeq	r4, r1, ip, lsr r5
   17d24:	andeq	r4, r1, r4, lsl #14
   17d28:	andeq	r4, r1, r4, ror #13
   17d2c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   17d30:	andeq	r4, r1, r4, ror #13
   17d34:	andeq	r4, r1, ip, asr #13
   17d38:	strdeq	r4, [r1], -ip
   17d3c:	andeq	r4, r1, ip, lsr #9
   17d40:	andeq	r4, r1, ip, ror r4
   17d44:	andeq	r4, r1, r4, lsr #9
   17d48:	andeq	r4, r1, r4, lsl #9
   17d4c:	andeq	r4, r1, ip, ror #6
   17d50:	andeq	r4, r1, r8, ror r2
   17d54:	andeq	r4, r1, ip, lsl #4
   17d58:	andeq	r4, r1, ip, lsr #4
   17d5c:	andeq	r4, r1, r8, lsl r2
   17d60:	andeq	r4, r1, r0, lsl #4
   17d64:	andeq	r4, r1, r0, lsl #3
   17d68:	andeq	r4, r1, r0, ror r1
   17d6c:	ldrdeq	r4, [r1], -r8
   17d70:	andeq	r4, r1, r0, lsr #2
   17d74:	andeq	r4, r1, r4, lsl #2
   17d78:	andeq	r4, r1, r4, lsl #2
   17d7c:	andeq	r4, r1, r8, ror #1
   17d80:	ldrdeq	r4, [r1], -r0
   17d84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d88:	add	fp, sp, #28
   17d8c:	sub	sp, sp, #4
   17d90:	ldr	r0, [pc, #3180]	; 18a04 <read_boolean_unary_expression@@Base+0x2778>
   17d94:	ldr	r0, [pc, r0]
   17d98:	cmp	r0, #0
   17d9c:	beq	183f8 <read_boolean_unary_expression@@Base+0x216c>
   17da0:	ldr	sl, [pc, #3168]	; 18a08 <read_boolean_unary_expression@@Base+0x277c>
   17da4:	add	sl, pc, sl
   17da8:	ldr	r6, [sl, #4]
   17dac:	ldr	r5, [pc, #3160]	; 18a0c <read_boolean_unary_expression@@Base+0x2780>
   17db0:	ldr	r5, [pc, r5]
   17db4:	ldr	r8, [pc, #3156]	; 18a10 <read_boolean_unary_expression@@Base+0x2784>
   17db8:	add	r8, pc, r8
   17dbc:	ldrb	r0, [r8]
   17dc0:	cmp	r0, #0
   17dc4:	beq	17e88 <read_boolean_unary_expression@@Base+0x1bfc>
   17dc8:	ldr	r9, [pc, #3164]	; 18a2c <read_boolean_unary_expression@@Base+0x27a0>
   17dcc:	adds	r2, r5, #4
   17dd0:	adc	ip, r6, #0
   17dd4:	add	r9, pc, r9
   17dd8:	ldr	r0, [r9, #4]
   17ddc:	ldr	r3, [pc, #3148]	; 18a30 <read_boolean_unary_expression@@Base+0x27a4>
   17de0:	ldr	r3, [pc, r3]
   17de4:	subs	r3, r3, r2
   17de8:	sbcs	r0, r0, ip
   17dec:	bcs	17edc <read_boolean_unary_expression@@Base+0x1c50>
   17df0:	mov	r0, #7
   17df4:	orr	r0, r0, #131072	; 0x20000
   17df8:	adds	r0, r0, r5
   17dfc:	adc	r1, r6, #0
   17e00:	subs	r0, r0, #4
   17e04:	sbc	r1, r1, #0
   17e08:	mvn	r2, #0
   17e0c:	and	r5, r1, r2
   17e10:	mov	r1, #16646144	; 0xfe0000
   17e14:	orr	r1, r1, #-16777216	; 0xff000000
   17e18:	ldr	r4, [pc, #3096]	; 18a38 <read_boolean_unary_expression@@Base+0x27ac>
   17e1c:	and	r6, r0, r1
   17e20:	ldr	r0, [pc, #3092]	; 18a3c <read_boolean_unary_expression@@Base+0x27b0>
   17e24:	mov	r1, r6
   17e28:	add	r4, pc, r4
   17e2c:	ldr	r0, [pc, r0]
   17e30:	bl	11eec <realloc@plt>
   17e34:	str	r6, [r9]
   17e38:	str	r5, [r9, #4]
   17e3c:	str	r0, [r4]
   17e40:	ldrb	r3, [r8]
   17e44:	ldr	r6, [sl, #4]
   17e48:	ldr	r5, [pc, #3056]	; 18a40 <read_boolean_unary_expression@@Base+0x27b4>
   17e4c:	mov	r2, r0
   17e50:	mov	r1, #0
   17e54:	mov	r7, #161	; 0xa1
   17e58:	ldr	r5, [pc, r5]
   17e5c:	strb	r1, [r2, r5]!
   17e60:	strb	r7, [r2, #3]
   17e64:	strb	r1, [r2, #2]
   17e68:	strb	r1, [r2, #1]
   17e6c:	adds	r2, r5, #4
   17e70:	adc	ip, r6, #0
   17e74:	mov	r7, #1
   17e78:	cmp	r3, #1
   17e7c:	stm	sl, {r2, ip}
   17e80:	beq	17f04 <read_boolean_unary_expression@@Base+0x1c78>
   17e84:	b	180dc <read_boolean_unary_expression@@Base+0x1e50>
   17e88:	ldr	r0, [pc, #2948]	; 18a14 <read_boolean_unary_expression@@Base+0x2788>
   17e8c:	ldr	r0, [pc, r0]
   17e90:	mov	r1, r0
   17e94:	ldrb	r2, [r1, r5]!
   17e98:	ldrb	r3, [r1, #1]
   17e9c:	ldrb	r7, [r1, #2]
   17ea0:	ldrb	r1, [r1, #3]
   17ea4:	orr	r2, r2, r3, lsl #8
   17ea8:	orr	r2, r2, r7, lsl #16
   17eac:	orr	r3, r2, r1, lsl #24
   17eb0:	adds	r2, r5, #4
   17eb4:	adc	ip, r6, #0
   17eb8:	cmp	r3, #-1593835520	; 0xa1000000
   17ebc:	stm	sl, {r2, ip}
   17ec0:	beq	1807c <read_boolean_unary_expression@@Base+0x1df0>
   17ec4:	mov	r7, #1
   17ec8:	cmn	r3, #1
   17ecc:	beq	180bc <read_boolean_unary_expression@@Base+0x1e30>
   17ed0:	ldr	r1, [pc, #2880]	; 18a18 <read_boolean_unary_expression@@Base+0x278c>
   17ed4:	add	r1, pc, r1
   17ed8:	b	187bc <read_boolean_unary_expression@@Base+0x2530>
   17edc:	ldr	r0, [pc, #2896]	; 18a34 <read_boolean_unary_expression@@Base+0x27a8>
   17ee0:	mov	r3, #0
   17ee4:	mov	r4, #161	; 0xa1
   17ee8:	ldr	r0, [pc, r0]
   17eec:	mov	r7, r0
   17ef0:	strb	r3, [r7, r5]!
   17ef4:	strb	r4, [r7, #3]
   17ef8:	strb	r3, [r7, #2]
   17efc:	strb	r3, [r7, #1]
   17f00:	stm	sl, {r2, ip}
   17f04:	ldr	r4, [r9, #4]
   17f08:	ldr	r1, [pc, #2868]	; 18a44 <read_boolean_unary_expression@@Base+0x27b8>
   17f0c:	adds	r3, r5, #8
   17f10:	adc	r7, r6, #0
   17f14:	ldr	r1, [pc, r1]
   17f18:	subs	r1, r1, r3
   17f1c:	sbcs	r1, r4, r7
   17f20:	bcs	17fac <read_boolean_unary_expression@@Base+0x1d20>
   17f24:	mov	r1, #7
   17f28:	orr	r1, r1, #131072	; 0x20000
   17f2c:	adds	r1, r5, r1
   17f30:	adc	r2, r6, #0
   17f34:	mvn	r3, #0
   17f38:	and	r5, r2, r3
   17f3c:	mov	r2, #16646144	; 0xfe0000
   17f40:	orr	r2, r2, #-16777216	; 0xff000000
   17f44:	ldr	r4, [pc, #2812]	; 18a48 <read_boolean_unary_expression@@Base+0x27bc>
   17f48:	and	r6, r1, r2
   17f4c:	mov	r1, r6
   17f50:	add	r4, pc, r4
   17f54:	bl	11eec <realloc@plt>
   17f58:	str	r6, [r9]
   17f5c:	str	r5, [r9, #4]
   17f60:	str	r0, [r4]
   17f64:	ldrb	r1, [r8]
   17f68:	ldr	ip, [sl, #4]
   17f6c:	ldr	r2, [pc, #2776]	; 18a4c <read_boolean_unary_expression@@Base+0x27c0>
   17f70:	mov	r7, r0
   17f74:	mov	r3, #9
   17f78:	ldr	r2, [pc, r2]
   17f7c:	strb	r3, [r7, r2]!
   17f80:	mov	r3, #0
   17f84:	strb	r3, [r7, #3]
   17f88:	strb	r3, [r7, #2]
   17f8c:	strb	r3, [r7, #1]
   17f90:	adds	r3, r2, #4
   17f94:	adc	r5, ip, #0
   17f98:	mov	r7, #1
   17f9c:	cmp	r1, #1
   17fa0:	stm	sl, {r3, r5}
   17fa4:	beq	17fd4 <read_boolean_unary_expression@@Base+0x1d48>
   17fa8:	b	18104 <read_boolean_unary_expression@@Base+0x1e78>
   17fac:	mov	r3, r0
   17fb0:	mov	r1, #9
   17fb4:	strb	r1, [r3, r2]!
   17fb8:	mov	r1, #0
   17fbc:	strb	r1, [r3, #3]
   17fc0:	strb	r1, [r3, #2]
   17fc4:	strb	r1, [r3, #1]
   17fc8:	adds	r3, r2, #4
   17fcc:	adc	r5, ip, #0
   17fd0:	stm	sl, {r3, r5}
   17fd4:	ldr	r6, [r9, #4]
   17fd8:	ldr	r4, [pc, #2672]	; 18a50 <read_boolean_unary_expression@@Base+0x27c4>
   17fdc:	adds	r1, r2, #8
   17fe0:	adc	r7, ip, #0
   17fe4:	ldr	r4, [pc, r4]
   17fe8:	subs	r1, r4, r1
   17fec:	sbcs	r1, r6, r7
   17ff0:	bcs	184c8 <read_boolean_unary_expression@@Base+0x223c>
   17ff4:	mov	r1, #7
   17ff8:	orr	r1, r1, #131072	; 0x20000
   17ffc:	adds	r1, r2, r1
   18000:	adc	r2, ip, #0
   18004:	mvn	r3, #0
   18008:	and	r5, r2, r3
   1800c:	mov	r2, #16646144	; 0xfe0000
   18010:	orr	r2, r2, #-16777216	; 0xff000000
   18014:	ldr	r4, [pc, #2616]	; 18a54 <read_boolean_unary_expression@@Base+0x27c8>
   18018:	and	r6, r1, r2
   1801c:	mov	r1, r6
   18020:	add	r4, pc, r4
   18024:	bl	11eec <realloc@plt>
   18028:	str	r6, [r9]
   1802c:	str	r5, [r9, #4]
   18030:	str	r0, [r4]
   18034:	ldrb	r2, [r8]
   18038:	ldr	r5, [sl, #4]
   1803c:	ldr	r3, [pc, #2580]	; 18a58 <read_boolean_unary_expression@@Base+0x27cc>
   18040:	mov	r7, r0
   18044:	mov	r1, #0
   18048:	ldr	r3, [pc, r3]
   1804c:	adds	r6, r3, #4
   18050:	strb	r1, [r7, r3]!
   18054:	str	r6, [sl]
   18058:	strb	r1, [r7, #3]
   1805c:	strb	r1, [r7, #2]
   18060:	strb	r1, [r7, #1]
   18064:	adc	r1, r5, #0
   18068:	mov	r7, #1
   1806c:	cmp	r2, #1
   18070:	str	r1, [sl, #4]
   18074:	bne	1812c <read_boolean_unary_expression@@Base+0x1ea0>
   18078:	b	184f0 <read_boolean_unary_expression@@Base+0x2264>
   1807c:	ldr	r3, [r0, r2]
   18080:	adds	r4, r5, #8
   18084:	adc	r7, r6, #0
   18088:	cmp	r3, #9
   1808c:	stm	sl, {r4, r7}
   18090:	bne	187b4 <read_boolean_unary_expression@@Base+0x2528>
   18094:	ldr	r3, [pc, #2444]	; 18a28 <read_boolean_unary_expression@@Base+0x279c>
   18098:	adds	r4, r5, #20
   1809c:	adc	r7, r6, #0
   180a0:	add	r3, pc, r3
   180a4:	add	r6, r5, r0
   180a8:	ldrb	r3, [r3]
   180ac:	ldr	r6, [r6, #16]
   180b0:	stm	sl, {r4, r7}
   180b4:	eor	r3, r3, #1
   180b8:	add	r7, r6, r3
   180bc:	mov	r6, r0
   180c0:	mov	r3, #0
   180c4:	strb	r3, [r6, r5]!
   180c8:	mov	r5, #161	; 0xa1
   180cc:	strb	r5, [r6, #3]
   180d0:	strb	r3, [r6, #2]
   180d4:	strb	r3, [r6, #1]
   180d8:	stm	sl, {r2, ip}
   180dc:	mov	r3, r0
   180e0:	mov	r1, #9
   180e4:	strb	r1, [r3, r2]!
   180e8:	mov	r1, #0
   180ec:	strb	r1, [r3, #3]
   180f0:	strb	r1, [r3, #2]
   180f4:	strb	r1, [r3, #1]
   180f8:	adds	r3, r2, #4
   180fc:	adc	r5, ip, #0
   18100:	stm	sl, {r3, r5}
   18104:	mov	r2, r0
   18108:	mov	r1, #0
   1810c:	strb	r1, [r2, r3]!
   18110:	adds	r6, r3, #4
   18114:	strb	r1, [r2, #3]
   18118:	strb	r1, [r2, #2]
   1811c:	strb	r1, [r2, #1]
   18120:	adc	r1, r5, #0
   18124:	str	r6, [sl]
   18128:	str	r1, [sl, #4]
   1812c:	mov	r3, r0
   18130:	mov	r2, #0
   18134:	strb	r2, [r3, r6]!
   18138:	strb	r2, [r3, #3]
   1813c:	strb	r2, [r3, #2]
   18140:	strb	r2, [r3, #1]
   18144:	adds	r2, r6, #4
   18148:	adc	r3, r1, #0
   1814c:	strd	r2, [sl]
   18150:	lsr	r1, r7, #24
   18154:	strb	r7, [r0, r2]!
   18158:	lsr	r6, r7, #16
   1815c:	lsr	r5, r7, #8
   18160:	strb	r1, [r0, #3]
   18164:	strb	r6, [r0, #2]
   18168:	strb	r5, [r0, #1]
   1816c:	ldrb	r0, [r8]
   18170:	adds	r4, r2, #4
   18174:	adc	r5, r3, #0
   18178:	cmp	r0, #0
   1817c:	strd	r4, [sl]
   18180:	beq	18234 <read_boolean_unary_expression@@Base+0x1fa8>
   18184:	ldr	r9, [pc, #2284]	; 18a78 <read_boolean_unary_expression@@Base+0x27ec>
   18188:	adds	r0, r2, #8
   1818c:	adc	r1, r3, #0
   18190:	add	r9, pc, r9
   18194:	ldr	r7, [r9, #4]
   18198:	ldr	r6, [pc, #2268]	; 18a7c <read_boolean_unary_expression@@Base+0x27f0>
   1819c:	ldr	r6, [pc, r6]
   181a0:	subs	r0, r6, r0
   181a4:	sbcs	r0, r7, r1
   181a8:	bcs	18400 <read_boolean_unary_expression@@Base+0x2174>
   181ac:	mov	r0, #7
   181b0:	orr	r0, r0, #131072	; 0x20000
   181b4:	adds	r0, r2, r0
   181b8:	adc	r1, r3, #0
   181bc:	mvn	r2, #0
   181c0:	and	r5, r1, r2
   181c4:	mov	r1, #16646144	; 0xfe0000
   181c8:	orr	r1, r1, #-16777216	; 0xff000000
   181cc:	ldr	r4, [pc, #2268]	; 18ab0 <read_boolean_unary_expression@@Base+0x2824>
   181d0:	and	r6, r0, r1
   181d4:	ldr	r0, [pc, #2264]	; 18ab4 <read_boolean_unary_expression@@Base+0x2828>
   181d8:	mov	r1, r6
   181dc:	add	r4, pc, r4
   181e0:	ldr	r0, [pc, r0]
   181e4:	bl	11eec <realloc@plt>
   181e8:	str	r6, [r9]
   181ec:	str	r5, [r9, #4]
   181f0:	str	r0, [r4]
   181f4:	ldrb	r1, [r8]
   181f8:	ldr	r5, [sl, #4]
   181fc:	ldr	r4, [pc, #2228]	; 18ab8 <read_boolean_unary_expression@@Base+0x282c>
   18200:	mov	r3, r0
   18204:	mov	r2, #0
   18208:	ldr	r4, [pc, r4]
   1820c:	strb	r2, [r3, r4]!
   18210:	strb	r2, [r3, #3]
   18214:	strb	r2, [r3, #2]
   18218:	strb	r2, [r3, #1]
   1821c:	adds	r2, r4, #4
   18220:	adc	r3, r5, #0
   18224:	cmp	r1, #0
   18228:	strd	r2, [sl]
   1822c:	beq	18260 <read_boolean_unary_expression@@Base+0x1fd4>
   18230:	b	1842c <read_boolean_unary_expression@@Base+0x21a0>
   18234:	ldr	r0, [pc, #2104]	; 18a74 <read_boolean_unary_expression@@Base+0x27e8>
   18238:	adds	r2, r2, #8
   1823c:	mov	r1, #0
   18240:	adc	r3, r3, #0
   18244:	ldr	r0, [pc, r0]
   18248:	mov	r7, r0
   1824c:	strb	r1, [r7, r4]!
   18250:	strb	r1, [r7, #3]
   18254:	strb	r1, [r7, #2]
   18258:	strb	r1, [r7, #1]
   1825c:	strd	r2, [sl]
   18260:	mov	r7, r0
   18264:	mov	r1, #0
   18268:	strb	r1, [r7, r2]!
   1826c:	strb	r1, [r7, #3]
   18270:	strb	r1, [r7, #2]
   18274:	strb	r1, [r7, #1]
   18278:	adds	r1, r2, #4
   1827c:	adc	r5, r3, #0
   18280:	stm	sl, {r1, r5}
   18284:	mov	r3, r0
   18288:	mov	r2, #0
   1828c:	strb	r2, [r3, r1]!
   18290:	strb	r2, [r3, #3]
   18294:	strb	r2, [r3, #2]
   18298:	strb	r2, [r3, #1]
   1829c:	adds	r2, r1, #4
   182a0:	adc	r3, r5, #0
   182a4:	strd	r2, [sl]
   182a8:	mov	r7, r0
   182ac:	mov	r1, #0
   182b0:	strb	r1, [r7, r2]!
   182b4:	strb	r1, [r7, #3]
   182b8:	strb	r1, [r7, #2]
   182bc:	strb	r1, [r7, #1]
   182c0:	adds	r1, r2, #4
   182c4:	adc	r5, r3, #0
   182c8:	stm	sl, {r1, r5}
   182cc:	mov	r3, r0
   182d0:	mov	r2, #0
   182d4:	strb	r2, [r3, r1]!
   182d8:	adds	r4, r1, #4
   182dc:	strb	r2, [r3, #3]
   182e0:	strb	r2, [r3, #2]
   182e4:	strb	r2, [r3, #1]
   182e8:	adc	r3, r5, #0
   182ec:	str	r4, [sl]
   182f0:	str	r3, [sl, #4]
   182f4:	mov	r2, r0
   182f8:	mov	r1, #0
   182fc:	strb	r1, [r2, r4]!
   18300:	strb	r1, [r2, #3]
   18304:	strb	r1, [r2, #2]
   18308:	strb	r1, [r2, #1]
   1830c:	adds	r2, r4, #4
   18310:	adc	r1, r3, #0
   18314:	str	r2, [sl]
   18318:	str	r1, [sl, #4]
   1831c:	mov	r3, r0
   18320:	mov	r4, #0
   18324:	strb	r4, [r3, r2]!
   18328:	mov	r7, #163	; 0xa3
   1832c:	strb	r7, [r3, #3]
   18330:	strb	r4, [r3, #2]
   18334:	strb	r4, [r3, #1]
   18338:	ldrb	r7, [r8]
   1833c:	adds	r6, r2, #4
   18340:	adc	r3, r1, #0
   18344:	cmp	r7, #1
   18348:	str	r6, [sl]
   1834c:	str	r3, [sl, #4]
   18350:	bne	183c4 <read_boolean_unary_expression@@Base+0x2138>
   18354:	ldr	r8, [pc, #1852]	; 18a98 <read_boolean_unary_expression@@Base+0x280c>
   18358:	adds	lr, r2, #8
   1835c:	adc	ip, r1, #0
   18360:	add	r8, pc, r8
   18364:	ldr	r5, [r8, #4]
   18368:	ldr	r7, [pc, #1836]	; 18a9c <read_boolean_unary_expression@@Base+0x2810>
   1836c:	ldr	r7, [pc, r7]
   18370:	subs	r7, r7, lr
   18374:	sbcs	r7, r5, ip
   18378:	bcs	183c4 <read_boolean_unary_expression@@Base+0x2138>
   1837c:	mov	r3, #7
   18380:	orr	r3, r3, #131072	; 0x20000
   18384:	adds	r2, r2, r3
   18388:	adc	r1, r1, #0
   1838c:	mvn	r3, #0
   18390:	and	r7, r1, r3
   18394:	mov	r1, #16646144	; 0xfe0000
   18398:	orr	r1, r1, #-16777216	; 0xff000000
   1839c:	ldr	r5, [pc, #1788]	; 18aa0 <read_boolean_unary_expression@@Base+0x2814>
   183a0:	and	r6, r2, r1
   183a4:	mov	r1, r6
   183a8:	add	r5, pc, r5
   183ac:	bl	11eec <realloc@plt>
   183b0:	strd	r6, [r8]
   183b4:	str	r0, [r5]
   183b8:	ldr	r3, [sl, #4]
   183bc:	ldr	r6, [pc, #1760]	; 18aa4 <read_boolean_unary_expression@@Base+0x2818>
   183c0:	ldr	r6, [pc, r6]
   183c4:	ldr	r0, [pc, #1756]	; 18aa8 <read_boolean_unary_expression@@Base+0x281c>
   183c8:	ldr	r1, [pc, #1756]	; 18aac <read_boolean_unary_expression@@Base+0x2820>
   183cc:	adds	r2, r6, #4
   183d0:	add	r0, pc, r0
   183d4:	adc	r3, r3, #0
   183d8:	ldr	r1, [pc, r1]
   183dc:	strb	r4, [r1, r6]!
   183e0:	strb	r4, [r1, #3]
   183e4:	strb	r4, [r1, #2]
   183e8:	strb	r4, [r1, #1]
   183ec:	mov	r1, #1
   183f0:	strd	r2, [sl]
   183f4:	strb	r1, [r0]
   183f8:	sub	sp, fp, #28
   183fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18400:	ldr	r0, [pc, #1656]	; 18a80 <read_boolean_unary_expression@@Base+0x27f4>
   18404:	adds	r2, r2, #8
   18408:	mov	r1, #0
   1840c:	adc	r3, r3, #0
   18410:	ldr	r0, [pc, r0]
   18414:	mov	r7, r0
   18418:	strb	r1, [r7, r4]!
   1841c:	strb	r1, [r7, #3]
   18420:	strb	r1, [r7, #2]
   18424:	strb	r1, [r7, #1]
   18428:	strd	r2, [sl]
   1842c:	ldr	r6, [r9, #4]
   18430:	ldr	r1, [pc, #1668]	; 18abc <read_boolean_unary_expression@@Base+0x2830>
   18434:	adds	ip, r4, #8
   18438:	adc	r7, r5, #0
   1843c:	ldr	r1, [pc, r1]
   18440:	subs	r1, r1, ip
   18444:	sbcs	r1, r6, r7
   18448:	bcs	18594 <read_boolean_unary_expression@@Base+0x2308>
   1844c:	mov	r1, #7
   18450:	orr	r1, r1, #131072	; 0x20000
   18454:	adds	r1, r4, r1
   18458:	adc	r2, r5, #0
   1845c:	mvn	r3, #0
   18460:	and	r5, r2, r3
   18464:	mov	r2, #16646144	; 0xfe0000
   18468:	orr	r2, r2, #-16777216	; 0xff000000
   1846c:	ldr	r6, [pc, #1612]	; 18ac0 <read_boolean_unary_expression@@Base+0x2834>
   18470:	and	r4, r1, r2
   18474:	mov	r1, r4
   18478:	add	r6, pc, r6
   1847c:	bl	11eec <realloc@plt>
   18480:	str	r0, [r6]
   18484:	strd	r4, [r9]
   18488:	ldrb	r7, [r8]
   1848c:	ldr	r3, [sl, #4]
   18490:	ldr	r2, [pc, #1580]	; 18ac4 <read_boolean_unary_expression@@Base+0x2838>
   18494:	mov	r6, r0
   18498:	mov	r1, #0
   1849c:	ldr	r2, [pc, r2]
   184a0:	strb	r1, [r6, r2]!
   184a4:	strb	r1, [r6, #3]
   184a8:	strb	r1, [r6, #2]
   184ac:	strb	r1, [r6, #1]
   184b0:	adds	r1, r2, #4
   184b4:	adc	r5, r3, #0
   184b8:	cmp	r7, #1
   184bc:	stm	sl, {r1, r5}
   184c0:	bne	18284 <read_boolean_unary_expression@@Base+0x1ff8>
   184c4:	b	185b8 <read_boolean_unary_expression@@Base+0x232c>
   184c8:	mov	r2, r0
   184cc:	mov	r1, #0
   184d0:	strb	r1, [r2, r3]!
   184d4:	adds	r6, r3, #4
   184d8:	strb	r1, [r2, #3]
   184dc:	strb	r1, [r2, #2]
   184e0:	strb	r1, [r2, #1]
   184e4:	adc	r1, r5, #0
   184e8:	str	r6, [sl]
   184ec:	str	r1, [sl, #4]
   184f0:	ldr	r4, [r9, #4]
   184f4:	ldr	r2, [pc, #1376]	; 18a5c <read_boolean_unary_expression@@Base+0x27d0>
   184f8:	adds	ip, r3, #8
   184fc:	adc	r7, r5, #0
   18500:	ldr	r2, [pc, r2]
   18504:	subs	r2, r2, ip
   18508:	sbcs	r2, r4, r7
   1850c:	bcs	18658 <read_boolean_unary_expression@@Base+0x23cc>
   18510:	mov	r1, #7
   18514:	orr	r1, r1, #131072	; 0x20000
   18518:	adds	r1, r3, r1
   1851c:	adc	r2, r5, #0
   18520:	mvn	r3, #0
   18524:	and	r5, r2, r3
   18528:	mov	r2, #16646144	; 0xfe0000
   1852c:	orr	r2, r2, #-16777216	; 0xff000000
   18530:	ldr	r4, [pc, #1320]	; 18a60 <read_boolean_unary_expression@@Base+0x27d4>
   18534:	and	r6, r1, r2
   18538:	mov	r1, r6
   1853c:	add	r4, pc, r4
   18540:	bl	11eec <realloc@plt>
   18544:	str	r6, [r9]
   18548:	str	r5, [r9, #4]
   1854c:	str	r0, [r4]
   18550:	ldrb	r5, [r8]
   18554:	ldr	r1, [sl, #4]
   18558:	ldr	r6, [pc, #1284]	; 18a64 <read_boolean_unary_expression@@Base+0x27d8>
   1855c:	mov	r3, r0
   18560:	mov	r2, #0
   18564:	mov	r7, #1
   18568:	ldr	r6, [pc, r6]
   1856c:	strb	r2, [r3, r6]!
   18570:	strb	r2, [r3, #3]
   18574:	strb	r2, [r3, #2]
   18578:	strb	r2, [r3, #1]
   1857c:	adds	r2, r6, #4
   18580:	adc	r3, r1, #0
   18584:	cmp	r5, #1
   18588:	strd	r2, [sl]
   1858c:	bne	18150 <read_boolean_unary_expression@@Base+0x1ec4>
   18590:	b	1867c <read_boolean_unary_expression@@Base+0x23f0>
   18594:	mov	r7, r0
   18598:	mov	r1, #0
   1859c:	strb	r1, [r7, r2]!
   185a0:	strb	r1, [r7, #3]
   185a4:	strb	r1, [r7, #2]
   185a8:	strb	r1, [r7, #1]
   185ac:	adds	r1, r2, #4
   185b0:	adc	r5, r3, #0
   185b4:	stm	sl, {r1, r5}
   185b8:	ldr	r4, [r9, #4]
   185bc:	ldr	r6, [pc, #1284]	; 18ac8 <read_boolean_unary_expression@@Base+0x283c>
   185c0:	adds	r7, r2, #8
   185c4:	adc	ip, r3, #0
   185c8:	ldr	r6, [pc, r6]
   185cc:	subs	r7, r6, r7
   185d0:	sbcs	r7, r4, ip
   185d4:	bcs	186f0 <read_boolean_unary_expression@@Base+0x2464>
   185d8:	mov	r1, #7
   185dc:	orr	r1, r1, #131072	; 0x20000
   185e0:	adds	r1, r2, r1
   185e4:	adc	r2, r3, #0
   185e8:	mvn	r3, #0
   185ec:	and	r5, r2, r3
   185f0:	mov	r2, #16646144	; 0xfe0000
   185f4:	orr	r2, r2, #-16777216	; 0xff000000
   185f8:	ldr	r4, [pc, #1228]	; 18acc <read_boolean_unary_expression@@Base+0x2840>
   185fc:	and	r6, r1, r2
   18600:	mov	r1, r6
   18604:	add	r4, pc, r4
   18608:	bl	11eec <realloc@plt>
   1860c:	str	r6, [r9]
   18610:	str	r5, [r9, #4]
   18614:	str	r0, [r4]
   18618:	ldrb	r7, [r8]
   1861c:	ldr	r5, [sl, #4]
   18620:	ldr	r1, [pc, #1192]	; 18ad0 <read_boolean_unary_expression@@Base+0x2844>
   18624:	mov	r3, r0
   18628:	mov	r2, #0
   1862c:	ldr	r1, [pc, r1]
   18630:	strb	r2, [r3, r1]!
   18634:	strb	r2, [r3, #3]
   18638:	strb	r2, [r3, #2]
   1863c:	strb	r2, [r3, #1]
   18640:	adds	r2, r1, #4
   18644:	adc	r3, r5, #0
   18648:	cmp	r7, #1
   1864c:	strd	r2, [sl]
   18650:	bne	182a8 <read_boolean_unary_expression@@Base+0x201c>
   18654:	b	18714 <read_boolean_unary_expression@@Base+0x2488>
   18658:	mov	r3, r0
   1865c:	mov	r2, #0
   18660:	strb	r2, [r3, r6]!
   18664:	strb	r2, [r3, #3]
   18668:	strb	r2, [r3, #2]
   1866c:	strb	r2, [r3, #1]
   18670:	adds	r2, r6, #4
   18674:	adc	r3, r1, #0
   18678:	strd	r2, [sl]
   1867c:	ldr	r4, [r9, #4]
   18680:	ldr	r5, [pc, #992]	; 18a68 <read_boolean_unary_expression@@Base+0x27dc>
   18684:	adds	lr, r6, #8
   18688:	adc	ip, r1, #0
   1868c:	mov	r7, #1
   18690:	ldr	r5, [pc, r5]
   18694:	subs	r5, r5, lr
   18698:	sbcs	r5, r4, ip
   1869c:	bcs	18150 <read_boolean_unary_expression@@Base+0x1ec4>
   186a0:	mov	r2, #7
   186a4:	orr	r2, r2, #131072	; 0x20000
   186a8:	adds	r2, r6, r2
   186ac:	adc	r1, r1, #0
   186b0:	mvn	r3, #0
   186b4:	and	r5, r1, r3
   186b8:	mov	r1, #16646144	; 0xfe0000
   186bc:	orr	r1, r1, #-16777216	; 0xff000000
   186c0:	ldr	r4, [pc, #932]	; 18a6c <read_boolean_unary_expression@@Base+0x27e0>
   186c4:	and	r6, r2, r1
   186c8:	mov	r1, r6
   186cc:	add	r4, pc, r4
   186d0:	bl	11eec <realloc@plt>
   186d4:	str	r6, [r9]
   186d8:	str	r5, [r9, #4]
   186dc:	str	r0, [r4]
   186e0:	ldr	r3, [sl, #4]
   186e4:	ldr	r2, [pc, #900]	; 18a70 <read_boolean_unary_expression@@Base+0x27e4>
   186e8:	ldr	r2, [pc, r2]
   186ec:	b	18150 <read_boolean_unary_expression@@Base+0x1ec4>
   186f0:	mov	r3, r0
   186f4:	mov	r2, #0
   186f8:	strb	r2, [r3, r1]!
   186fc:	strb	r2, [r3, #3]
   18700:	strb	r2, [r3, #2]
   18704:	strb	r2, [r3, #1]
   18708:	adds	r2, r1, #4
   1870c:	adc	r3, r5, #0
   18710:	strd	r2, [sl]
   18714:	ldr	r4, [r9, #4]
   18718:	ldr	r6, [pc, #948]	; 18ad4 <read_boolean_unary_expression@@Base+0x2848>
   1871c:	adds	r7, r1, #8
   18720:	adc	ip, r5, #0
   18724:	ldr	r6, [pc, r6]
   18728:	subs	r7, r6, r7
   1872c:	sbcs	r7, r4, ip
   18730:	bcs	187dc <read_boolean_unary_expression@@Base+0x2550>
   18734:	mov	r2, #7
   18738:	orr	r2, r2, #131072	; 0x20000
   1873c:	adds	r1, r1, r2
   18740:	adc	r2, r5, #0
   18744:	mvn	r3, #0
   18748:	and	r5, r2, r3
   1874c:	mov	r2, #16646144	; 0xfe0000
   18750:	orr	r2, r2, #-16777216	; 0xff000000
   18754:	ldr	r4, [pc, #892]	; 18ad8 <read_boolean_unary_expression@@Base+0x284c>
   18758:	and	r6, r1, r2
   1875c:	mov	r1, r6
   18760:	add	r4, pc, r4
   18764:	bl	11eec <realloc@plt>
   18768:	str	r6, [r9]
   1876c:	str	r5, [r9, #4]
   18770:	str	r0, [r4]
   18774:	ldrb	r7, [r8]
   18778:	ldr	r3, [sl, #4]
   1877c:	ldr	r2, [pc, #856]	; 18adc <read_boolean_unary_expression@@Base+0x2850>
   18780:	mov	r6, r0
   18784:	mov	r1, #0
   18788:	ldr	r2, [pc, r2]
   1878c:	strb	r1, [r6, r2]!
   18790:	strb	r1, [r6, #3]
   18794:	strb	r1, [r6, #2]
   18798:	strb	r1, [r6, #1]
   1879c:	adds	r1, r2, #4
   187a0:	adc	r5, r3, #0
   187a4:	cmp	r7, #1
   187a8:	stm	sl, {r1, r5}
   187ac:	bne	182cc <read_boolean_unary_expression@@Base+0x2040>
   187b0:	b	18800 <read_boolean_unary_expression@@Base+0x2574>
   187b4:	ldr	r1, [pc, #616]	; 18a24 <read_boolean_unary_expression@@Base+0x2798>
   187b8:	add	r1, pc, r1
   187bc:	ldr	r0, [pc, #600]	; 18a1c <read_boolean_unary_expression@@Base+0x2790>
   187c0:	ldr	r0, [pc, r0]
   187c4:	ldr	r0, [r0]
   187c8:	ldr	r2, [pc, #592]	; 18a20 <read_boolean_unary_expression@@Base+0x2794>
   187cc:	ldr	r2, [pc, r2]
   187d0:	sub	sp, fp, #28
   187d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187d8:	b	11f88 <fprintf@plt>
   187dc:	mov	r7, r0
   187e0:	mov	r1, #0
   187e4:	strb	r1, [r7, r2]!
   187e8:	strb	r1, [r7, #3]
   187ec:	strb	r1, [r7, #2]
   187f0:	strb	r1, [r7, #1]
   187f4:	adds	r1, r2, #4
   187f8:	adc	r5, r3, #0
   187fc:	stm	sl, {r1, r5}
   18800:	ldr	r4, [r9, #4]
   18804:	ldr	r6, [pc, #724]	; 18ae0 <read_boolean_unary_expression@@Base+0x2854>
   18808:	adds	r7, r2, #8
   1880c:	adc	ip, r3, #0
   18810:	ldr	r6, [pc, r6]
   18814:	subs	r7, r6, r7
   18818:	sbcs	r7, r4, ip
   1881c:	bcs	188a4 <read_boolean_unary_expression@@Base+0x2618>
   18820:	mov	r1, #7
   18824:	orr	r1, r1, #131072	; 0x20000
   18828:	adds	r1, r2, r1
   1882c:	adc	r2, r3, #0
   18830:	mvn	r3, #0
   18834:	and	r5, r2, r3
   18838:	mov	r2, #16646144	; 0xfe0000
   1883c:	orr	r2, r2, #-16777216	; 0xff000000
   18840:	ldr	r4, [pc, #668]	; 18ae4 <read_boolean_unary_expression@@Base+0x2858>
   18844:	and	r6, r1, r2
   18848:	mov	r1, r6
   1884c:	add	r4, pc, r4
   18850:	bl	11eec <realloc@plt>
   18854:	str	r6, [r9]
   18858:	str	r5, [r9, #4]
   1885c:	str	r0, [r4]
   18860:	ldrb	r2, [r8]
   18864:	ldr	r5, [sl, #4]
   18868:	ldr	r1, [pc, #632]	; 18ae8 <read_boolean_unary_expression@@Base+0x285c>
   1886c:	mov	r7, r0
   18870:	mov	r3, #0
   18874:	ldr	r1, [pc, r1]
   18878:	adds	r4, r1, #4
   1887c:	strb	r3, [r7, r1]!
   18880:	str	r4, [sl]
   18884:	strb	r3, [r7, #3]
   18888:	strb	r3, [r7, #2]
   1888c:	strb	r3, [r7, #1]
   18890:	adc	r3, r5, #0
   18894:	cmp	r2, #1
   18898:	str	r3, [sl, #4]
   1889c:	bne	182f4 <read_boolean_unary_expression@@Base+0x2068>
   188a0:	b	188cc <read_boolean_unary_expression@@Base+0x2640>
   188a4:	mov	r3, r0
   188a8:	mov	r2, #0
   188ac:	strb	r2, [r3, r1]!
   188b0:	adds	r4, r1, #4
   188b4:	strb	r2, [r3, #3]
   188b8:	strb	r2, [r3, #2]
   188bc:	strb	r2, [r3, #1]
   188c0:	adc	r3, r5, #0
   188c4:	str	r4, [sl]
   188c8:	str	r3, [sl, #4]
   188cc:	ldr	r6, [r9, #4]
   188d0:	ldr	r2, [pc, #532]	; 18aec <read_boolean_unary_expression@@Base+0x2860>
   188d4:	adds	ip, r1, #8
   188d8:	adc	r7, r5, #0
   188dc:	ldr	r2, [pc, r2]
   188e0:	subs	r2, r2, ip
   188e4:	sbcs	r2, r6, r7
   188e8:	bcs	18970 <read_boolean_unary_expression@@Base+0x26e4>
   188ec:	mov	r2, #7
   188f0:	orr	r2, r2, #131072	; 0x20000
   188f4:	adds	r1, r1, r2
   188f8:	adc	r2, r5, #0
   188fc:	mvn	r3, #0
   18900:	and	r5, r2, r3
   18904:	mov	r2, #16646144	; 0xfe0000
   18908:	orr	r2, r2, #-16777216	; 0xff000000
   1890c:	ldr	r4, [pc, #368]	; 18a84 <read_boolean_unary_expression@@Base+0x27f8>
   18910:	and	r6, r1, r2
   18914:	mov	r1, r6
   18918:	add	r4, pc, r4
   1891c:	bl	11eec <realloc@plt>
   18920:	str	r6, [r9]
   18924:	str	r5, [r9, #4]
   18928:	str	r0, [r4]
   1892c:	ldrb	r7, [r8]
   18930:	ldr	r3, [sl, #4]
   18934:	ldr	r4, [pc, #332]	; 18a88 <read_boolean_unary_expression@@Base+0x27fc>
   18938:	mov	r2, r0
   1893c:	mov	r1, #0
   18940:	ldr	r4, [pc, r4]
   18944:	strb	r1, [r2, r4]!
   18948:	strb	r1, [r2, #3]
   1894c:	strb	r1, [r2, #2]
   18950:	strb	r1, [r2, #1]
   18954:	adds	r2, r4, #4
   18958:	adc	r1, r3, #0
   1895c:	cmp	r7, #0
   18960:	str	r2, [sl]
   18964:	str	r1, [sl, #4]
   18968:	beq	1831c <read_boolean_unary_expression@@Base+0x2090>
   1896c:	b	18998 <read_boolean_unary_expression@@Base+0x270c>
   18970:	mov	r2, r0
   18974:	mov	r1, #0
   18978:	strb	r1, [r2, r4]!
   1897c:	strb	r1, [r2, #3]
   18980:	strb	r1, [r2, #2]
   18984:	strb	r1, [r2, #1]
   18988:	adds	r2, r4, #4
   1898c:	adc	r1, r3, #0
   18990:	str	r2, [sl]
   18994:	str	r1, [sl, #4]
   18998:	ldr	r5, [r9, #4]
   1899c:	ldr	r6, [pc, #232]	; 18a8c <read_boolean_unary_expression@@Base+0x2800>
   189a0:	adds	r7, r4, #8
   189a4:	adc	ip, r3, #0
   189a8:	ldr	r6, [pc, r6]
   189ac:	subs	r7, r6, r7
   189b0:	sbcs	r7, r5, ip
   189b4:	bcs	1831c <read_boolean_unary_expression@@Base+0x2090>
   189b8:	mov	r1, #7
   189bc:	orr	r1, r1, #131072	; 0x20000
   189c0:	adds	r1, r4, r1
   189c4:	adc	r2, r3, #0
   189c8:	mvn	r3, #0
   189cc:	and	r7, r2, r3
   189d0:	mov	r2, #16646144	; 0xfe0000
   189d4:	orr	r2, r2, #-16777216	; 0xff000000
   189d8:	ldr	r5, [pc, #176]	; 18a90 <read_boolean_unary_expression@@Base+0x2804>
   189dc:	and	r6, r1, r2
   189e0:	mov	r1, r6
   189e4:	add	r5, pc, r5
   189e8:	bl	11eec <realloc@plt>
   189ec:	strd	r6, [r9]
   189f0:	str	r0, [r5]
   189f4:	ldr	r1, [sl, #4]
   189f8:	ldr	r2, [pc, #148]	; 18a94 <read_boolean_unary_expression@@Base+0x2808>
   189fc:	ldr	r2, [pc, r2]
   18a00:	b	1831c <read_boolean_unary_expression@@Base+0x2090>
   18a04:	andeq	r4, r1, r4, lsl r0
   18a08:	andeq	r4, r1, r4, lsl r0
   18a0c:	andeq	r4, r1, r8
   18a10:	andeq	r3, r1, ip, ror #31
   18a14:	andeq	r3, r1, r0, lsr #30
   18a18:	andeq	r2, r0, r2, lsl #25
   18a1c:	strdeq	r2, [r1], -r8
   18a20:	ldrdeq	r3, [r1], -r4
   18a24:	andeq	r2, r0, fp, ror #7
   18a28:	andeq	r3, r1, r0, lsr #26
   18a2c:	ldrdeq	r3, [r1], -ip
   18a30:	ldrdeq	r3, [r1], -r0
   18a34:	andeq	r3, r1, r4, asr #29
   18a38:	andeq	r3, r1, r4, lsl #31
   18a3c:	andeq	r3, r1, r0, lsl #31
   18a40:	andeq	r3, r1, r0, ror #30
   18a44:	muleq	r1, ip, lr
   18a48:	andeq	r3, r1, ip, asr lr
   18a4c:	andeq	r3, r1, r0, asr #28
   18a50:	andeq	r3, r1, ip, asr #27
   18a54:	andeq	r3, r1, ip, lsl #27
   18a58:	andeq	r3, r1, r0, ror sp
   18a5c:			; <UNDEFINED> instruction: 0x000138b0
   18a60:	andeq	r3, r1, r0, ror r8
   18a64:	andeq	r3, r1, r0, asr r8
   18a68:	andeq	r3, r1, r0, lsr #14
   18a6c:	andeq	r3, r1, r0, ror #13
   18a70:	ldrdeq	r3, [r1], -r0
   18a74:	andeq	r3, r1, r8, ror #22
   18a78:	andeq	r3, r1, r0, lsr #24
   18a7c:	andeq	r3, r1, r4, lsl ip
   18a80:	muleq	r1, ip, r9
   18a84:	muleq	r1, r4, r4
   18a88:	andeq	r3, r1, r8, ror r4
   18a8c:	andeq	r3, r1, r8, lsl #8
   18a90:	andeq	r3, r1, r8, asr #7
   18a94:			; <UNDEFINED> instruction: 0x000133bc
   18a98:	andeq	r3, r1, r0, asr sl
   18a9c:	andeq	r3, r1, r4, asr #20
   18aa0:	andeq	r3, r1, r4, lsl #20
   18aa4:	strdeq	r3, [r1], -r8
   18aa8:	strdeq	r3, [r1], -r0
   18aac:	ldrdeq	r3, [r1], -r4
   18ab0:	ldrdeq	r3, [r1], -r0
   18ab4:	andeq	r3, r1, ip, asr #23
   18ab8:			; <UNDEFINED> instruction: 0x00013bb0
   18abc:	andeq	r3, r1, r4, ror r9
   18ac0:	andeq	r3, r1, r4, lsr r9
   18ac4:	andeq	r3, r1, ip, lsl r9
   18ac8:	andeq	r3, r1, r8, ror #15
   18acc:	andeq	r3, r1, r8, lsr #15
   18ad0:	andeq	r3, r1, ip, lsl #15
   18ad4:	andeq	r3, r1, ip, lsl #13
   18ad8:	andeq	r3, r1, ip, asr #12
   18adc:	andeq	r3, r1, r0, lsr r6
   18ae0:	andeq	r3, r1, r0, lsr #11
   18ae4:	andeq	r3, r1, r0, ror #10
   18ae8:	andeq	r3, r1, r4, asr #10
   18aec:	ldrdeq	r3, [r1], -r4
   18af0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18af4:	add	fp, sp, #28
   18af8:	sub	sp, sp, #4
   18afc:	ldr	r0, [pc, #496]	; 18cf4 <read_boolean_unary_expression@@Base+0x2a68>
   18b00:	ldr	r0, [pc, r0]
   18b04:	cmp	r0, #0
   18b08:	beq	18c9c <read_boolean_unary_expression@@Base+0x2a10>
   18b0c:	ldr	sl, [pc, #484]	; 18cf8 <read_boolean_unary_expression@@Base+0x2a6c>
   18b10:	mov	r5, #0
   18b14:	mov	r1, #0
   18b18:	add	sl, pc, sl
   18b1c:	ldrb	r0, [sl]
   18b20:	ldr	r8, [pc, #468]	; 18cfc <read_boolean_unary_expression@@Base+0x2a70>
   18b24:	ldr	r4, [pc, #468]	; 18d00 <read_boolean_unary_expression@@Base+0x2a74>
   18b28:	cmp	r0, #1
   18b2c:	add	r8, pc, r8
   18b30:	add	r4, pc, r4
   18b34:	bne	18bb0 <read_boolean_unary_expression@@Base+0x2924>
   18b38:	ldr	r9, [pc, #452]	; 18d04 <read_boolean_unary_expression@@Base+0x2a78>
   18b3c:	ldr	r0, [r8, #4]
   18b40:	ldr	r2, [pc, #448]	; 18d08 <read_boolean_unary_expression@@Base+0x2a7c>
   18b44:	add	r9, pc, r9
   18b48:	mov	ip, r4
   18b4c:	mov	r1, #1
   18b50:	ldr	r2, [pc, r2]
   18b54:	ldr	r7, [r9, #4]
   18b58:	ldr	r4, [pc, #428]	; 18d0c <read_boolean_unary_expression@@Base+0x2a80>
   18b5c:	adds	r3, r2, #8
   18b60:	adc	r6, r0, #0
   18b64:	ldr	r4, [pc, r4]
   18b68:	subs	r3, r4, r3
   18b6c:	mov	r4, ip
   18b70:	sbcs	r3, r7, r6
   18b74:	bcs	18bb0 <read_boolean_unary_expression@@Base+0x2924>
   18b78:	mov	r1, #7
   18b7c:	orr	r1, r1, #131072	; 0x20000
   18b80:	adds	r1, r2, r1
   18b84:	adc	r7, r0, #0
   18b88:	mov	r0, #16646144	; 0xfe0000
   18b8c:	orr	r0, r0, #-16777216	; 0xff000000
   18b90:	and	r6, r1, r0
   18b94:	ldr	r0, [pc, #372]	; 18d10 <read_boolean_unary_expression@@Base+0x2a84>
   18b98:	mov	r1, r6
   18b9c:	ldr	r0, [pc, r0]
   18ba0:	bl	11eec <realloc@plt>
   18ba4:	ldrb	r1, [sl]
   18ba8:	strd	r6, [r9]
   18bac:	str	r0, [r4]
   18bb0:	ldr	r2, [pc, #348]	; 18d14 <read_boolean_unary_expression@@Base+0x2a88>
   18bb4:	ldr	r2, [pc, r2]
   18bb8:	ldr	r0, [pc, #344]	; 18d18 <read_boolean_unary_expression@@Base+0x2a8c>
   18bbc:	ldr	r0, [pc, r0]
   18bc0:	ldr	r3, [r8, #4]
   18bc4:	mov	r7, r0
   18bc8:	strb	r5, [r7, r2]!
   18bcc:	adds	r2, r2, #8
   18bd0:	adc	r3, r3, #0
   18bd4:	strb	r5, [r7, #5]
   18bd8:	strb	r5, [r7, #3]
   18bdc:	strb	r5, [r7, #2]
   18be0:	strb	r5, [r7, #1]
   18be4:	strb	r5, [r7, #4]!
   18be8:	cmp	r1, #0
   18bec:	strb	r5, [r7, #3]
   18bf0:	strb	r5, [r7, #2]
   18bf4:	strd	r2, [r8]
   18bf8:	beq	18c20 <read_boolean_unary_expression@@Base+0x2994>
   18bfc:	ldr	r3, [pc, #280]	; 18d1c <read_boolean_unary_expression@@Base+0x2a90>
   18c00:	mov	r1, r2
   18c04:	mov	r2, #1
   18c08:	ldr	r3, [pc, r3]
   18c0c:	bl	11ef8 <fwrite@plt>
   18c10:	ldr	r0, [pc, #264]	; 18d20 <read_boolean_unary_expression@@Base+0x2a94>
   18c14:	ldr	r0, [pc, r0]
   18c18:	bl	11ea4 <free@plt>
   18c1c:	b	18c64 <read_boolean_unary_expression@@Base+0x29d8>
   18c20:	ldr	r1, [pc, #252]	; 18d24 <read_boolean_unary_expression@@Base+0x2a98>
   18c24:	mov	r2, #4
   18c28:	ldr	r1, [pc, r1]
   18c2c:	bl	12024 <msync@plt>
   18c30:	cmn	r0, #1
   18c34:	beq	18cb0 <read_boolean_unary_expression@@Base+0x2a24>
   18c38:	ldr	r1, [pc, #244]	; 18d34 <read_boolean_unary_expression@@Base+0x2aa8>
   18c3c:	ldr	r1, [pc, r1]
   18c40:	ldr	r0, [pc, #240]	; 18d38 <read_boolean_unary_expression@@Base+0x2aac>
   18c44:	ldr	r0, [pc, r0]
   18c48:	bl	12000 <munmap@plt>
   18c4c:	ldr	r0, [pc, #232]	; 18d3c <read_boolean_unary_expression@@Base+0x2ab0>
   18c50:	mov	r1, #0
   18c54:	str	r1, [r4]
   18c58:	add	r0, pc, r0
   18c5c:	str	r1, [r0]
   18c60:	str	r1, [r0, #4]
   18c64:	ldr	r0, [pc, #212]	; 18d40 <read_boolean_unary_expression@@Base+0x2ab4>
   18c68:	ldr	r0, [pc, r0]
   18c6c:	bl	11e98 <fflush@plt>
   18c70:	ldr	r0, [pc, #204]	; 18d44 <read_boolean_unary_expression@@Base+0x2ab8>
   18c74:	ldr	r0, [pc, r0]
   18c78:	bl	191f0 <__gcov_flush@@Base+0x304>
   18c7c:	ldr	r0, [pc, #196]	; 18d48 <read_boolean_unary_expression@@Base+0x2abc>
   18c80:	ldr	r0, [pc, r0]
   18c84:	bl	11fe8 <fclose@plt>
   18c88:	ldr	r0, [pc, #188]	; 18d4c <read_boolean_unary_expression@@Base+0x2ac0>
   18c8c:	mov	r1, #0
   18c90:	str	r1, [r4]
   18c94:	add	r0, pc, r0
   18c98:	str	r1, [r0]
   18c9c:	ldr	r0, [pc, #172]	; 18d50 <read_boolean_unary_expression@@Base+0x2ac4>
   18ca0:	ldr	r0, [pc, r0]
   18ca4:	sub	sp, fp, #28
   18ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18cac:	b	11ea4 <free@plt>
   18cb0:	bl	11f94 <__errno_location@plt>
   18cb4:	ldr	r1, [pc, #108]	; 18d28 <read_boolean_unary_expression@@Base+0x2a9c>
   18cb8:	mov	r6, r4
   18cbc:	ldr	r1, [pc, r1]
   18cc0:	ldr	r0, [r0]
   18cc4:	ldr	r4, [r1]
   18cc8:	ldr	r5, [pc, #92]	; 18d2c <read_boolean_unary_expression@@Base+0x2aa0>
   18ccc:	ldr	r5, [pc, r5]
   18cd0:	bl	11f40 <strerror@plt>
   18cd4:	ldr	r1, [pc, #84]	; 18d30 <read_boolean_unary_expression@@Base+0x2aa4>
   18cd8:	mov	r3, r0
   18cdc:	mov	r0, r4
   18ce0:	add	r1, pc, r1
   18ce4:	mov	r2, r5
   18ce8:	mov	r4, r6
   18cec:	bl	11f88 <fprintf@plt>
   18cf0:	b	18c38 <read_boolean_unary_expression@@Base+0x29ac>
   18cf4:	andeq	r3, r1, r8, lsr #5
   18cf8:	andeq	r3, r1, ip, lsl #5
   18cfc:	andeq	r3, r1, ip, lsl #5
   18d00:	andeq	r3, r1, ip, ror r2
   18d04:	andeq	r3, r1, ip, ror #4
   18d08:	andeq	r3, r1, r8, ror #4
   18d0c:	andeq	r3, r1, ip, asr #4
   18d10:	andeq	r3, r1, r0, lsl r2
   18d14:	andeq	r3, r1, r4, lsl #4
   18d18:	strdeq	r3, [r1], -r0
   18d1c:	andeq	r3, r1, r0, lsr #3
   18d20:	muleq	r1, r8, r1
   18d24:	andeq	r3, r1, r8, lsr #3
   18d28:	strdeq	r2, [r1], -ip
   18d2c:	ldrdeq	r3, [r1], -r4
   18d30:	andeq	r1, r0, r1, lsr pc
   18d34:	muleq	r1, r4, r1
   18d38:	andeq	r3, r1, r8, ror #2
   18d3c:	andeq	r3, r1, r8, ror r1
   18d40:	andeq	r3, r1, r0, asr #2
   18d44:	andeq	r2, r1, r4, asr r4
   18d48:	andeq	r3, r1, r8, lsr #2
   18d4c:	andeq	r3, r1, r4, lsl r1
   18d50:	andeq	r3, r1, r0, lsl #2
   18d54:	push	{r4, sl, fp, lr}
   18d58:	add	fp, sp, #8
   18d5c:	mov	r4, r0
   18d60:	mov	r0, #12
   18d64:	bl	11f28 <malloc@plt>
   18d68:	ldr	r1, [pc, #60]	; 18dac <read_boolean_unary_expression@@Base+0x2b20>
   18d6c:	mov	r2, #0
   18d70:	add	r1, pc, r1
   18d74:	stm	r0, {r1, r4}
   18d78:	str	r2, [r0, #8]
   18d7c:	ldr	r1, [pc, #44]	; 18db0 <read_boolean_unary_expression@@Base+0x2b24>
   18d80:	ldr	r1, [pc, r1]
   18d84:	mov	r2, r1
   18d88:	ldr	r3, [r2], #4
   18d8c:	ldr	r4, [r2]
   18d90:	cmp	r3, #0
   18d94:	mov	r3, r2
   18d98:	addne	r3, r4, #8
   18d9c:	moveq	r2, r1
   18da0:	str	r0, [r3]
   18da4:	str	r0, [r2]
   18da8:	pop	{r4, sl, fp, pc}
   18dac:	andeq	r3, r1, r4, asr r0
   18db0:	andeq	r2, r1, r4, lsr r3
   18db4:	push	{r4, r5, fp, lr}
   18db8:	add	fp, sp, #8
   18dbc:	ldr	r0, [pc, #64]	; 18e04 <read_boolean_unary_expression@@Base+0x2b78>
   18dc0:	ldr	r0, [pc, r0]
   18dc4:	ldr	r4, [r0]
   18dc8:	cmp	r4, #0
   18dcc:	beq	18e00 <read_boolean_unary_expression@@Base+0x2b74>
   18dd0:	ldr	r5, [pc, #48]	; 18e08 <read_boolean_unary_expression@@Base+0x2b7c>
   18dd4:	add	r5, pc, r5
   18dd8:	b	18de8 <read_boolean_unary_expression@@Base+0x2b5c>
   18ddc:	ldr	r4, [r4, #8]
   18de0:	cmp	r4, #0
   18de4:	beq	18e00 <read_boolean_unary_expression@@Base+0x2b74>
   18de8:	ldr	r0, [r4]
   18dec:	cmp	r0, r5
   18df0:	bne	18ddc <read_boolean_unary_expression@@Base+0x2b50>
   18df4:	ldr	r0, [r4, #4]
   18df8:	blx	r0
   18dfc:	b	18ddc <read_boolean_unary_expression@@Base+0x2b50>
   18e00:	pop	{r4, r5, fp, pc}
   18e04:	strdeq	r2, [r1], -r4
   18e08:	strdeq	r2, [r1], -r0
   18e0c:	push	{r4, r5, r6, r7, fp, lr}
   18e10:	add	fp, sp, #16
   18e14:	ldr	r4, [pc, #104]	; 18e84 <read_boolean_unary_expression@@Base+0x2bf8>
   18e18:	ldr	r4, [pc, r4]
   18e1c:	ldr	r0, [r4]
   18e20:	cmp	r0, #0
   18e24:	beq	18e80 <read_boolean_unary_expression@@Base+0x2bf4>
   18e28:	ldr	r5, [pc, #88]	; 18e88 <read_boolean_unary_expression@@Base+0x2bfc>
   18e2c:	mov	r6, #0
   18e30:	add	r5, pc, r5
   18e34:	b	18e68 <read_boolean_unary_expression@@Base+0x2bdc>
   18e38:	ldr	r1, [r4]
   18e3c:	cmp	r0, r1
   18e40:	streq	r7, [r4]
   18e44:	ldr	r1, [r4, #4]
   18e48:	cmp	r0, r1
   18e4c:	streq	r6, [r4, #4]
   18e50:	cmp	r6, #0
   18e54:	strne	r7, [r6, #8]
   18e58:	bl	11ea4 <free@plt>
   18e5c:	mov	r0, r7
   18e60:	cmp	r7, #0
   18e64:	beq	18e80 <read_boolean_unary_expression@@Base+0x2bf4>
   18e68:	ldr	r1, [r0]
   18e6c:	ldr	r7, [r0, #8]
   18e70:	cmp	r1, r5
   18e74:	beq	18e38 <read_boolean_unary_expression@@Base+0x2bac>
   18e78:	mov	r6, r0
   18e7c:	b	18e5c <read_boolean_unary_expression@@Base+0x2bd0>
   18e80:	pop	{r4, r5, r6, r7, fp, pc}
   18e84:	muleq	r1, ip, r2
   18e88:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   18e8c:	push	{r4, sl, fp, lr}
   18e90:	add	fp, sp, #8
   18e94:	mov	r4, r0
   18e98:	mov	r0, #12
   18e9c:	bl	11f28 <malloc@plt>
   18ea0:	ldr	r1, [pc, #60]	; 18ee4 <read_boolean_unary_expression@@Base+0x2c58>
   18ea4:	mov	r2, #0
   18ea8:	add	r1, pc, r1
   18eac:	stm	r0, {r1, r4}
   18eb0:	str	r2, [r0, #8]
   18eb4:	ldr	r1, [pc, #44]	; 18ee8 <read_boolean_unary_expression@@Base+0x2c5c>
   18eb8:	ldr	r1, [pc, r1]
   18ebc:	mov	r2, r1
   18ec0:	ldr	r3, [r2], #4
   18ec4:	ldr	r4, [r2]
   18ec8:	cmp	r3, #0
   18ecc:	mov	r3, r2
   18ed0:	addne	r3, r4, #8
   18ed4:	moveq	r2, r1
   18ed8:	str	r0, [r3]
   18edc:	str	r0, [r2]
   18ee0:	pop	{r4, sl, fp, pc}
   18ee4:	andeq	r2, r1, ip, lsl pc
   18ee8:	strdeq	r2, [r1], -r8

00018eec <__gcov_flush@@Base>:
   18eec:	push	{r4, sl, fp, lr}
   18ef0:	add	fp, sp, #8
   18ef4:	ldr	r0, [pc, #36]	; 18f20 <__gcov_flush@@Base+0x34>
   18ef8:	ldr	r0, [pc, r0]
   18efc:	ldr	r4, [r0]
   18f00:	cmp	r4, #0
   18f04:	beq	18f1c <__gcov_flush@@Base+0x30>
   18f08:	ldr	r0, [r4, #4]
   18f0c:	blx	r0
   18f10:	ldr	r4, [r4, #8]
   18f14:	cmp	r4, #0
   18f18:	bne	18f08 <__gcov_flush@@Base+0x1c>
   18f1c:	pop	{r4, sl, fp, pc}
   18f20:			; <UNDEFINED> instruction: 0x000121b8
   18f24:	push	{r4, r5, r6, r7, fp, lr}
   18f28:	add	fp, sp, #16
   18f2c:	ldr	r4, [pc, #104]	; 18f9c <__gcov_flush@@Base+0xb0>
   18f30:	ldr	r4, [pc, r4]
   18f34:	ldr	r0, [r4]
   18f38:	cmp	r0, #0
   18f3c:	beq	18f98 <__gcov_flush@@Base+0xac>
   18f40:	ldr	r5, [pc, #88]	; 18fa0 <__gcov_flush@@Base+0xb4>
   18f44:	mov	r6, #0
   18f48:	add	r5, pc, r5
   18f4c:	b	18f80 <__gcov_flush@@Base+0x94>
   18f50:	ldr	r1, [r4]
   18f54:	cmp	r0, r1
   18f58:	streq	r7, [r4]
   18f5c:	ldr	r1, [r4, #4]
   18f60:	cmp	r0, r1
   18f64:	streq	r6, [r4, #4]
   18f68:	cmp	r6, #0
   18f6c:	strne	r7, [r6, #8]
   18f70:	bl	11ea4 <free@plt>
   18f74:	mov	r0, r7
   18f78:	cmp	r7, #0
   18f7c:	beq	18f98 <__gcov_flush@@Base+0xac>
   18f80:	ldr	r1, [r0]
   18f84:	ldr	r7, [r0, #8]
   18f88:	cmp	r1, r5
   18f8c:	beq	18f50 <__gcov_flush@@Base+0x64>
   18f90:	mov	r6, r0
   18f94:	b	18f74 <__gcov_flush@@Base+0x88>
   18f98:	pop	{r4, r5, r6, r7, fp, pc}
   18f9c:	andeq	r2, r1, r0, lsl #3
   18fa0:	andeq	r2, r1, ip, ror lr
   18fa4:	push	{r4, r5, r6, sl, fp, lr}
   18fa8:	add	fp, sp, #16
   18fac:	ldr	r6, [pc, #228]	; 19098 <__gcov_flush@@Base+0x1ac>
   18fb0:	mov	r4, r1
   18fb4:	cmp	r0, #0
   18fb8:	add	r6, pc, r6
   18fbc:	beq	19008 <__gcov_flush@@Base+0x11c>
   18fc0:	mov	r5, r0
   18fc4:	mov	r0, #12
   18fc8:	bl	11f28 <malloc@plt>
   18fcc:	mov	r1, #0
   18fd0:	str	r6, [r0]
   18fd4:	str	r5, [r0, #4]
   18fd8:	str	r1, [r0, #8]
   18fdc:	ldr	r1, [pc, #184]	; 1909c <__gcov_flush@@Base+0x1b0>
   18fe0:	ldr	r1, [pc, r1]
   18fe4:	mov	r2, r1
   18fe8:	ldr	r3, [r2], #4
   18fec:	ldr	r5, [r2]
   18ff0:	cmp	r3, #0
   18ff4:	mov	r3, r2
   18ff8:	addne	r3, r5, #8
   18ffc:	moveq	r2, r1
   19000:	str	r0, [r3]
   19004:	str	r0, [r2]
   19008:	cmp	r4, #0
   1900c:	beq	19054 <__gcov_flush@@Base+0x168>
   19010:	mov	r0, #12
   19014:	bl	11f28 <malloc@plt>
   19018:	mov	r1, #0
   1901c:	str	r6, [r0]
   19020:	str	r4, [r0, #4]
   19024:	str	r1, [r0, #8]
   19028:	ldr	r1, [pc, #112]	; 190a0 <__gcov_flush@@Base+0x1b4>
   1902c:	ldr	r1, [pc, r1]
   19030:	mov	r2, r1
   19034:	ldr	r3, [r2], #4
   19038:	ldr	r6, [r2]
   1903c:	cmp	r3, #0
   19040:	mov	r3, r2
   19044:	addne	r3, r6, #8
   19048:	moveq	r2, r1
   1904c:	str	r0, [r3]
   19050:	str	r0, [r2]
   19054:	ldr	r1, [pc, #72]	; 190a4 <__gcov_flush@@Base+0x1b8>
   19058:	add	r1, pc, r1
   1905c:	ldrb	r0, [r1]
   19060:	cmp	r0, #0
   19064:	popne	{r4, r5, r6, sl, fp, pc}
   19068:	ldr	r0, [pc, #56]	; 190a8 <__gcov_flush@@Base+0x1bc>
   1906c:	mov	r2, #1
   19070:	strb	r2, [r1]
   19074:	add	r0, pc, r0
   19078:	bl	19644 <__libc_csu_fini@@Base+0x4>
   1907c:	ldr	r0, [pc, #40]	; 190ac <__gcov_flush@@Base+0x1c0>
   19080:	add	r0, pc, r0
   19084:	bl	19644 <__libc_csu_fini@@Base+0x4>
   19088:	ldr	r0, [pc, #32]	; 190b0 <__gcov_flush@@Base+0x1c4>
   1908c:	add	r0, pc, r0
   19090:	pop	{r4, r5, r6, sl, fp, lr}
   19094:	b	19644 <__libc_csu_fini@@Base+0x4>
   19098:	andeq	r2, r1, ip, lsl #28
   1909c:	ldrdeq	r2, [r1], -r4
   190a0:	andeq	r2, r1, r4, lsl #1
   190a4:	andeq	r2, r1, r0, ror sp
   190a8:			; <UNDEFINED> instruction: 0xfffffea8
   190ac:			; <UNDEFINED> instruction: 0xfffffd84
   190b0:			; <UNDEFINED> instruction: 0xfffffd20
   190b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   190b8:	add	fp, sp, #24
   190bc:	ldr	r7, [pc, #68]	; 19108 <__gcov_flush@@Base+0x21c>
   190c0:	mov	r4, r0
   190c4:	mov	r5, #1
   190c8:	mov	r8, #0
   190cc:	ldr	r7, [pc, r7]
   190d0:	mov	r6, #47	; 0x2f
   190d4:	b	190f0 <__gcov_flush@@Base+0x204>
   190d8:	strb	r8, [r4, r5]
   190dc:	ldr	r1, [r7]
   190e0:	mov	r0, r4
   190e4:	bl	11fac <mkdir@plt>
   190e8:	strb	r6, [r4, r5]
   190ec:	add	r5, r5, #1
   190f0:	ldrb	r0, [r4, r5]
   190f4:	cmp	r0, #47	; 0x2f
   190f8:	beq	190d8 <__gcov_flush@@Base+0x1ec>
   190fc:	cmp	r0, #0
   19100:	bne	190ec <__gcov_flush@@Base+0x200>
   19104:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19108:	andeq	r1, r1, r0, ror #31
   1910c:	ldr	r0, [pc, #8]	; 1911c <__gcov_flush@@Base+0x230>
   19110:	ldr	r0, [pc, r0]
   19114:	ldr	r0, [r0]
   19118:	bx	lr
   1911c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   19120:	ldr	r1, [pc, #8]	; 19130 <__gcov_flush@@Base+0x244>
   19124:	ldr	r1, [pc, r1]
   19128:	str	r0, [r1]
   1912c:	bx	lr
   19130:	andeq	r1, r1, r8, lsl #31
   19134:	push	{r4, r5, r6, sl, fp, lr}
   19138:	add	fp, sp, #16
   1913c:	sub	sp, sp, #392	; 0x188
   19140:	mov	r6, sp
   19144:	mov	r5, r0
   19148:	mov	r0, r6
   1914c:	mov	r4, r1
   19150:	bl	11ed4 <uname@plt>
   19154:	cmp	r0, #0
   19158:	bmi	19170 <__gcov_flush@@Base+0x284>
   1915c:	add	r1, r6, #65	; 0x41
   19160:	mov	r0, r5
   19164:	mov	r2, r4
   19168:	bl	11fc4 <strncpy@plt>
   1916c:	mov	r0, #0
   19170:	sub	sp, fp, #16
   19174:	pop	{r4, r5, r6, sl, fp, pc}
   19178:	push	{r4, r5, r6, sl, fp, lr}
   1917c:	add	fp, sp, #16
   19180:	sub	sp, sp, #32
   19184:	mov	r4, #0
   19188:	str	r4, [sp, #8]
   1918c:	strh	r4, [sp, #2]
   19190:	mov	r5, r0
   19194:	str	r4, [sp, #12]
   19198:	str	r4, [sp, #16]
   1919c:	str	r4, [sp, #20]
   191a0:	bl	11f58 <getpid@plt>
   191a4:	mov	r6, sp
   191a8:	str	r0, [sp, #24]
   191ac:	mov	r0, #1
   191b0:	strh	r0, [sp]
   191b4:	mov	r0, r5
   191b8:	mov	r1, #14
   191bc:	mov	r2, r6
   191c0:	bl	1200c <fcntl64@plt>
   191c4:	cmn	r0, #1
   191c8:	bne	191e4 <__gcov_flush@@Base+0x2f8>
   191cc:	bl	11f94 <__errno_location@plt>
   191d0:	ldr	r0, [r0]
   191d4:	cmp	r0, #4
   191d8:	beq	191b4 <__gcov_flush@@Base+0x2c8>
   191dc:	cmp	r0, #37	; 0x25
   191e0:	mvneq	r4, #0
   191e4:	mov	r0, r4
   191e8:	sub	sp, fp, #16
   191ec:	pop	{r4, r5, r6, sl, fp, pc}
   191f0:	push	{r4, r5, r6, sl, fp, lr}
   191f4:	add	fp, sp, #16
   191f8:	sub	sp, sp, #32
   191fc:	mov	r4, #0
   19200:	str	r4, [sp, #8]
   19204:	strh	r4, [sp, #2]
   19208:	mov	r5, r0
   1920c:	str	r4, [sp, #12]
   19210:	str	r4, [sp, #16]
   19214:	str	r4, [sp, #20]
   19218:	bl	11f58 <getpid@plt>
   1921c:	mov	r6, sp
   19220:	str	r0, [sp, #24]
   19224:	mov	r0, #2
   19228:	strh	r0, [sp]
   1922c:	mov	r0, r5
   19230:	mov	r1, #14
   19234:	mov	r2, r6
   19238:	bl	1200c <fcntl64@plt>
   1923c:	cmn	r0, #1
   19240:	bne	1925c <__gcov_flush@@Base+0x370>
   19244:	bl	11f94 <__errno_location@plt>
   19248:	ldr	r0, [r0]
   1924c:	cmp	r0, #4
   19250:	beq	1922c <__gcov_flush@@Base+0x340>
   19254:	cmp	r0, #37	; 0x25
   19258:	mvneq	r4, #0
   1925c:	mov	r0, r4
   19260:	sub	sp, fp, #16
   19264:	pop	{r4, r5, r6, sl, fp, pc}
   19268:	push	{r4, r5, r6, sl, fp, lr}
   1926c:	add	fp, sp, #16
   19270:	sub	sp, sp, #32
   19274:	bl	11fdc <fileno@plt>
   19278:	mov	r4, #0
   1927c:	str	r4, [sp, #8]
   19280:	strh	r4, [sp, #2]
   19284:	mov	r5, r0
   19288:	str	r4, [sp, #12]
   1928c:	str	r4, [sp, #16]
   19290:	str	r4, [sp, #20]
   19294:	bl	11f58 <getpid@plt>
   19298:	mov	r6, sp
   1929c:	str	r0, [sp, #24]
   192a0:	mov	r0, #1
   192a4:	strh	r0, [sp]
   192a8:	mov	r0, r5
   192ac:	mov	r1, #14
   192b0:	mov	r2, r6
   192b4:	bl	1200c <fcntl64@plt>
   192b8:	cmn	r0, #1
   192bc:	bne	192d8 <__gcov_flush@@Base+0x3ec>
   192c0:	bl	11f94 <__errno_location@plt>
   192c4:	ldr	r0, [r0]
   192c8:	cmp	r0, #4
   192cc:	beq	192a8 <__gcov_flush@@Base+0x3bc>
   192d0:	cmp	r0, #37	; 0x25
   192d4:	mvneq	r4, #0
   192d8:	mov	r0, r4
   192dc:	sub	sp, fp, #16
   192e0:	pop	{r4, r5, r6, sl, fp, pc}
   192e4:	push	{r4, r5, r6, sl, fp, lr}
   192e8:	add	fp, sp, #16
   192ec:	sub	sp, sp, #32
   192f0:	bl	11fdc <fileno@plt>
   192f4:	mov	r4, #0
   192f8:	str	r4, [sp, #8]
   192fc:	strh	r4, [sp, #2]
   19300:	mov	r5, r0
   19304:	str	r4, [sp, #12]
   19308:	str	r4, [sp, #16]
   1930c:	str	r4, [sp, #20]
   19310:	bl	11f58 <getpid@plt>
   19314:	mov	r6, sp
   19318:	str	r0, [sp, #24]
   1931c:	mov	r0, #2
   19320:	strh	r0, [sp]
   19324:	mov	r0, r5
   19328:	mov	r1, #14
   1932c:	mov	r2, r6
   19330:	bl	1200c <fcntl64@plt>
   19334:	cmn	r0, #1
   19338:	bne	19354 <__gcov_flush@@Base+0x468>
   1933c:	bl	11f94 <__errno_location@plt>
   19340:	ldr	r0, [r0]
   19344:	cmp	r0, #4
   19348:	beq	19324 <__gcov_flush@@Base+0x438>
   1934c:	cmp	r0, #37	; 0x25
   19350:	mvneq	r4, #0
   19354:	mov	r0, r4
   19358:	sub	sp, fp, #16
   1935c:	pop	{r4, r5, r6, sl, fp, pc}
   19360:	push	{r4, r5, fp, lr}
   19364:	add	fp, sp, #8
   19368:	sub	sp, sp, #32
   1936c:	mov	r2, #182	; 0xb6
   19370:	orr	r2, r2, #256	; 0x100
   19374:	mov	r1, #66	; 0x42
   19378:	bl	11f04 <open64@plt>
   1937c:	cmp	r0, #0
   19380:	bmi	193fc <__gcov_flush@@Base+0x510>
   19384:	mov	r4, r0
   19388:	mov	r0, #0
   1938c:	str	r0, [sp, #8]
   19390:	strh	r0, [sp, #2]
   19394:	str	r0, [sp, #12]
   19398:	str	r0, [sp, #16]
   1939c:	str	r0, [sp, #20]
   193a0:	bl	11f58 <getpid@plt>
   193a4:	mov	r5, sp
   193a8:	str	r0, [sp, #24]
   193ac:	mov	r0, #1
   193b0:	strh	r0, [sp]
   193b4:	mov	r0, r4
   193b8:	mov	r1, #14
   193bc:	mov	r2, r5
   193c0:	bl	1200c <fcntl64@plt>
   193c4:	cmn	r0, #1
   193c8:	bne	193e4 <__gcov_flush@@Base+0x4f8>
   193cc:	bl	11f94 <__errno_location@plt>
   193d0:	ldr	r0, [r0]
   193d4:	cmp	r0, #4
   193d8:	beq	193b4 <__gcov_flush@@Base+0x4c8>
   193dc:	cmp	r0, #37	; 0x25
   193e0:	beq	19408 <__gcov_flush@@Base+0x51c>
   193e4:	ldr	r1, [pc, #76]	; 19438 <__gcov_flush@@Base+0x54c>
   193e8:	mov	r0, r4
   193ec:	add	r1, pc, r1
   193f0:	bl	11e68 <fdopen@plt>
   193f4:	sub	sp, fp, #8
   193f8:	pop	{r4, r5, fp, pc}
   193fc:	mov	r0, #0
   19400:	sub	sp, fp, #8
   19404:	pop	{r4, r5, fp, pc}
   19408:	ldr	r1, [pc, #28]	; 1942c <__gcov_flush@@Base+0x540>
   1940c:	ldr	r2, [pc, #28]	; 19430 <__gcov_flush@@Base+0x544>
   19410:	ldr	r0, [pc, #28]	; 19434 <__gcov_flush@@Base+0x548>
   19414:	add	r1, pc, r1
   19418:	add	r2, pc, r2
   1941c:	ldr	r0, [pc, r0]
   19420:	ldr	r0, [r0]
   19424:	bl	11f88 <fprintf@plt>
   19428:	b	193e4 <__gcov_flush@@Base+0x4f8>
   1942c:	andeq	r1, r0, lr, lsl r8
   19430:	andeq	r1, r0, r3, ror #16
   19434:	muleq	r1, ip, ip
   19438:	andeq	r1, r0, r4, lsr #13
   1943c:	push	{r4, r5, r6, sl, fp, lr}
   19440:	add	fp, sp, #16
   19444:	mov	r6, r0
   19448:	ldr	r0, [pc, #120]	; 194c8 <__gcov_flush@@Base+0x5dc>
   1944c:	mov	r4, r1
   19450:	add	r0, pc, r0
   19454:	bl	11f10 <getenv@plt>
   19458:	mov	r5, r0
   1945c:	ldr	r0, [pc, #104]	; 194cc <__gcov_flush@@Base+0x5e0>
   19460:	add	r0, pc, r0
   19464:	bl	11f10 <getenv@plt>
   19468:	mov	r1, #0
   1946c:	str	r1, [r4]
   19470:	str	r1, [r6]
   19474:	cmp	r5, #0
   19478:	ldrbne	r2, [r5]
   1947c:	cmpne	r2, #0
   19480:	bne	1948c <__gcov_flush@@Base+0x5a0>
   19484:	mov	r0, r1
   19488:	pop	{r4, r5, r6, sl, fp, pc}
   1948c:	cmp	r0, #0
   19490:	beq	194a8 <__gcov_flush@@Base+0x5bc>
   19494:	mov	r1, #0
   19498:	mov	r2, #10
   1949c:	bl	11e80 <strtol@plt>
   194a0:	bic	r0, r0, r0, asr #31
   194a4:	b	194ac <__gcov_flush@@Base+0x5c0>
   194a8:	mov	r0, #0
   194ac:	str	r0, [r6]
   194b0:	mov	r0, r5
   194b4:	bl	11f70 <strlen@plt>
   194b8:	mov	r1, r5
   194bc:	str	r0, [r4]
   194c0:	mov	r0, r1
   194c4:	pop	{r4, r5, r6, sl, fp, pc}
   194c8:	andeq	r1, r0, r9, asr r8
   194cc:	andeq	r1, r0, r5, asr r8
   194d0:	push	{r4, r5, r6, r7, fp, lr}
   194d4:	add	fp, sp, #16
   194d8:	mov	r6, r0
   194dc:	ldr	r0, [fp, #8]
   194e0:	mov	r5, r3
   194e4:	mov	r7, r2
   194e8:	mov	r4, r1
   194ec:	cmp	r0, #1
   194f0:	blt	19528 <__gcov_flush@@Base+0x63c>
   194f4:	add	r1, r4, #1
   194f8:	mov	r2, #0
   194fc:	b	19514 <__gcov_flush@@Base+0x628>
   19500:	add	r2, r2, #1
   19504:	mov	r4, r1
   19508:	add	r1, r1, #1
   1950c:	cmp	r2, r0
   19510:	bge	19528 <__gcov_flush@@Base+0x63c>
   19514:	ldrb	r3, [r1]
   19518:	cmp	r3, #47	; 0x2f
   1951c:	beq	19500 <__gcov_flush@@Base+0x614>
   19520:	cmp	r3, #0
   19524:	bne	19508 <__gcov_flush@@Base+0x61c>
   19528:	mov	r0, r6
   1952c:	mov	r1, r7
   19530:	mov	r2, r5
   19534:	bl	11eb0 <memcpy@plt>
   19538:	add	r0, r5, r7
   1953c:	ldrb	r0, [r0, #-1]
   19540:	cmp	r0, #47	; 0x2f
   19544:	movne	r0, #47	; 0x2f
   19548:	strbne	r0, [r6, r5]
   1954c:	mov	r0, r4
   19550:	addne	r5, r5, #1
   19554:	add	r5, r6, r5
   19558:	bl	11f70 <strlen@plt>
   1955c:	add	r2, r0, #1
   19560:	mov	r0, r5
   19564:	mov	r1, r4
   19568:	pop	{r4, r5, r6, r7, fp, lr}
   1956c:	b	11eb0 <memcpy@plt>
   19570:	mov	r1, #47	; 0x2f
   19574:	b	11f7c <strchr@plt>
   19578:	mov	r1, #47	; 0x2f
   1957c:	b	12018 <strrchr@plt>
   19580:	push	{fp, lr}
   19584:	mov	fp, sp
   19588:	sub	sp, sp, #8
   1958c:	mov	r0, #0
   19590:	str	r0, [sp, #4]
   19594:	add	r1, sp, #4
   19598:	mov	r0, #2
   1959c:	bl	11fd0 <prctl@plt>
   195a0:	ldr	r1, [sp, #4]
   195a4:	cmp	r0, #0
   195a8:	cmpeq	r1, #9
   195ac:	bne	195c0 <__gcov_flush@@Base+0x6d4>
   195b0:	mov	r0, #1
   195b4:	mov	r1, #0
   195b8:	bl	11fd0 <prctl@plt>
   195bc:	ldr	r1, [sp, #4]
   195c0:	sub	r0, r1, #9
   195c4:	clz	r0, r0
   195c8:	lsr	r0, r0, #5
   195cc:	mov	sp, fp
   195d0:	pop	{fp, pc}
   195d4:	mov	r0, #1
   195d8:	mov	r1, #9
   195dc:	b	11fd0 <prctl@plt>

000195e0 <__libc_csu_init@@Base>:
   195e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   195e4:	mov	r7, r0
   195e8:	ldr	r6, [pc, #72]	; 19638 <__libc_csu_init@@Base+0x58>
   195ec:	ldr	r5, [pc, #72]	; 1963c <__libc_csu_init@@Base+0x5c>
   195f0:	add	r6, pc, r6
   195f4:	add	r5, pc, r5
   195f8:	sub	r6, r6, r5
   195fc:	mov	r8, r1
   19600:	mov	r9, r2
   19604:	bl	11e48 <fdopen@plt-0x20>
   19608:	asrs	r6, r6, #2
   1960c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19610:	mov	r4, #0
   19614:	add	r4, r4, #1
   19618:	ldr	r3, [r5], #4
   1961c:	mov	r2, r9
   19620:	mov	r1, r8
   19624:	mov	r0, r7
   19628:	blx	r3
   1962c:	cmp	r6, r4
   19630:	bne	19614 <__libc_csu_init@@Base+0x34>
   19634:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19638:	andeq	r1, r1, ip, lsl #18
   1963c:	strdeq	r1, [r1], -r4

00019640 <__libc_csu_fini@@Base>:
   19640:	bx	lr
   19644:	ldr	r3, [pc, #12]	; 19658 <__libc_csu_fini@@Base+0x18>
   19648:	mov	r1, #0
   1964c:	add	r3, pc, r3
   19650:	ldr	r2, [r3]
   19654:	b	11fa0 <__cxa_atexit@plt>
   19658:	andeq	r1, r1, r8, ror sl

Disassembly of section .fini:

0001965c <.fini>:
   1965c:	push	{r3, lr}
   19660:	pop	{r3, pc}
