
../repos/coreutils/src/stat:     file format elf32-littlearm


Disassembly of section .init:

000113fc <.init>:
   113fc:	push	{r3, lr}
   11400:	bl	11d54 <__assert_fail@plt+0x500>
   11404:	pop	{r3, pc}

Disassembly of section .plt:

00011408 <calloc@plt-0x14>:
   11408:	push	{lr}		; (str lr, [sp, #-4]!)
   1140c:	ldr	lr, [pc, #4]	; 11418 <calloc@plt-0x4>
   11410:	add	lr, pc, lr
   11414:	ldr	pc, [lr, #8]!
   11418:	andeq	lr, r1, r8, ror #23

0001141c <calloc@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #122880	; 0x1e000
   11424:	ldr	pc, [ip, #3048]!	; 0xbe8

00011428 <fputs_unlocked@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #122880	; 0x1e000
   11430:	ldr	pc, [ip, #3040]!	; 0xbe0

00011434 <raise@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #122880	; 0x1e000
   1143c:	ldr	pc, [ip, #3032]!	; 0xbd8

00011440 <gmtime_r@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #122880	; 0x1e000
   11448:	ldr	pc, [ip, #3024]!	; 0xbd0

0001144c <__getdelim@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #122880	; 0x1e000
   11454:	ldr	pc, [ip, #3016]!	; 0xbc8

00011458 <is_selinux_enabled@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #122880	; 0x1e000
   11460:	ldr	pc, [ip, #3008]!	; 0xbc0

00011464 <strcmp@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #122880	; 0x1e000
   1146c:	ldr	pc, [ip, #3000]!	; 0xbb8

00011470 <strtol@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #122880	; 0x1e000
   11478:	ldr	pc, [ip, #2992]!	; 0xbb0

0001147c <getpwuid@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #122880	; 0x1e000
   11484:	ldr	pc, [ip, #2984]!	; 0xba8

00011488 <mktime@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #122880	; 0x1e000
   11490:	ldr	pc, [ip, #2976]!	; 0xba0

00011494 <fflush@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #122880	; 0x1e000
   1149c:	ldr	pc, [ip, #2968]!	; 0xb98

000114a0 <free@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #122880	; 0x1e000
   114a8:	ldr	pc, [ip, #2960]!	; 0xb90

000114ac <_exit@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #122880	; 0x1e000
   114b4:	ldr	pc, [ip, #2952]!	; 0xb88

000114b8 <memcpy@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #122880	; 0x1e000
   114c0:	ldr	pc, [ip, #2944]!	; 0xb80

000114c4 <mbsinit@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #122880	; 0x1e000
   114cc:	ldr	pc, [ip, #2936]!	; 0xb78

000114d0 <memcmp@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #122880	; 0x1e000
   114d8:	ldr	pc, [ip, #2928]!	; 0xb70

000114dc <fputc_unlocked@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #122880	; 0x1e000
   114e4:	ldr	pc, [ip, #2920]!	; 0xb68

000114e8 <dcgettext@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #122880	; 0x1e000
   114f0:	ldr	pc, [ip, #2912]!	; 0xb60

000114f4 <realloc@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #122880	; 0x1e000
   114fc:	ldr	pc, [ip, #2904]!	; 0xb58

00011500 <fgetfilecon@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #122880	; 0x1e000
   11508:	ldr	pc, [ip, #2896]!	; 0xb50

0001150c <localtime_r@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #122880	; 0x1e000
   11514:	ldr	pc, [ip, #2888]!	; 0xb48

00011518 <textdomain@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #122880	; 0x1e000
   11520:	ldr	pc, [ip, #2880]!	; 0xb40

00011524 <chdir@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #122880	; 0x1e000
   1152c:	ldr	pc, [ip, #2872]!	; 0xb38

00011530 <iswprint@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #122880	; 0x1e000
   11538:	ldr	pc, [ip, #2864]!	; 0xb30

0001153c <tzset@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #122880	; 0x1e000
   11544:	ldr	pc, [ip, #2856]!	; 0xb28

00011548 <readlink@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #122880	; 0x1e000
   11550:	ldr	pc, [ip, #2848]!	; 0xb20

00011554 <fwrite@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #122880	; 0x1e000
   1155c:	ldr	pc, [ip, #2840]!	; 0xb18

00011560 <lseek64@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #122880	; 0x1e000
   11568:	ldr	pc, [ip, #2832]!	; 0xb10

0001156c <__ctype_get_mb_cur_max@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #122880	; 0x1e000
   11574:	ldr	pc, [ip, #2824]!	; 0xb08

00011578 <hasmntopt@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #122880	; 0x1e000
   11580:	ldr	pc, [ip, #2816]!	; 0xb00

00011584 <strcpy@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #122880	; 0x1e000
   1158c:	ldr	pc, [ip, #2808]!	; 0xaf8

00011590 <__fpending@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #122880	; 0x1e000
   11598:	ldr	pc, [ip, #2800]!	; 0xaf0

0001159c <mbrtowc@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #122880	; 0x1e000
   115a4:	ldr	pc, [ip, #2792]!	; 0xae8

000115a8 <error@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #122880	; 0x1e000
   115b0:	ldr	pc, [ip, #2784]!	; 0xae0

000115b4 <getmntent@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #122880	; 0x1e000
   115bc:	ldr	pc, [ip, #2776]!	; 0xad8

000115c0 <open64@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #122880	; 0x1e000
   115c8:	ldr	pc, [ip, #2768]!	; 0xad0

000115cc <getenv@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #122880	; 0x1e000
   115d4:	ldr	pc, [ip, #2760]!	; 0xac8

000115d8 <lgetfilecon@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #122880	; 0x1e000
   115e0:	ldr	pc, [ip, #2752]!	; 0xac0

000115e4 <malloc@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #122880	; 0x1e000
   115ec:	ldr	pc, [ip, #2744]!	; 0xab8

000115f0 <__libc_start_main@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #122880	; 0x1e000
   115f8:	ldr	pc, [ip, #2736]!	; 0xab0

000115fc <strftime@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #122880	; 0x1e000
   11604:	ldr	pc, [ip, #2728]!	; 0xaa8

00011608 <__freading@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #122880	; 0x1e000
   11610:	ldr	pc, [ip, #2720]!	; 0xaa0

00011614 <__ctype_tolower_loc@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #122880	; 0x1e000
   1161c:	ldr	pc, [ip, #2712]!	; 0xa98

00011620 <__ctype_toupper_loc@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #122880	; 0x1e000
   11628:	ldr	pc, [ip, #2704]!	; 0xa90

0001162c <__gmon_start__@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #122880	; 0x1e000
   11634:	ldr	pc, [ip, #2696]!	; 0xa88

00011638 <getopt_long@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #122880	; 0x1e000
   11640:	ldr	pc, [ip, #2688]!	; 0xa80

00011644 <__ctype_b_loc@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #122880	; 0x1e000
   1164c:	ldr	pc, [ip, #2680]!	; 0xa78

00011650 <getcwd@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #122880	; 0x1e000
   11658:	ldr	pc, [ip, #2672]!	; 0xa70

0001165c <exit@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #122880	; 0x1e000
   11664:	ldr	pc, [ip, #2664]!	; 0xa68

00011668 <getfilecon@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #122880	; 0x1e000
   11670:	ldr	pc, [ip, #2656]!	; 0xa60

00011674 <strlen@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #122880	; 0x1e000
   1167c:	ldr	pc, [ip, #2648]!	; 0xa58

00011680 <strchr@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #122880	; 0x1e000
   11688:	ldr	pc, [ip, #2640]!	; 0xa50

0001168c <setenv@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #122880	; 0x1e000
   11694:	ldr	pc, [ip, #2632]!	; 0xa48

00011698 <openat64@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #122880	; 0x1e000
   116a0:	ldr	pc, [ip, #2624]!	; 0xa40

000116a4 <memrchr@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #122880	; 0x1e000
   116ac:	ldr	pc, [ip, #2616]!	; 0xa38

000116b0 <__errno_location@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #122880	; 0x1e000
   116b8:	ldr	pc, [ip, #2608]!	; 0xa30

000116bc <__sprintf_chk@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #122880	; 0x1e000
   116c4:	ldr	pc, [ip, #2600]!	; 0xa28

000116c8 <__cxa_atexit@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #122880	; 0x1e000
   116d0:	ldr	pc, [ip, #2592]!	; 0xa20

000116d4 <__vasprintf_chk@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #122880	; 0x1e000
   116dc:	ldr	pc, [ip, #2584]!	; 0xa18

000116e0 <memset@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #122880	; 0x1e000
   116e8:	ldr	pc, [ip, #2576]!	; 0xa10

000116ec <__printf_chk@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #122880	; 0x1e000
   116f4:	ldr	pc, [ip, #2568]!	; 0xa08

000116f8 <fileno@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #122880	; 0x1e000
   11700:	ldr	pc, [ip, #2560]!	; 0xa00

00011704 <__fprintf_chk@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #122880	; 0x1e000
   1170c:	ldr	pc, [ip, #2552]!	; 0x9f8

00011710 <memchr@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #122880	; 0x1e000
   11718:	ldr	pc, [ip, #2544]!	; 0x9f0

0001171c <fclose@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #122880	; 0x1e000
   11724:	ldr	pc, [ip, #2536]!	; 0x9e8

00011728 <fseeko64@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #122880	; 0x1e000
   11730:	ldr	pc, [ip, #2528]!	; 0x9e0

00011734 <statx@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #122880	; 0x1e000
   1173c:	ldr	pc, [ip, #2520]!	; 0x9d8

00011740 <endmntent@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #122880	; 0x1e000
   11748:	ldr	pc, [ip, #2512]!	; 0x9d0

0001174c <fcntl64@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #122880	; 0x1e000
   11754:	ldr	pc, [ip, #2504]!	; 0x9c8

00011758 <__overflow@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #122880	; 0x1e000
   11760:	ldr	pc, [ip, #2496]!	; 0x9c0

00011764 <setlocale@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #122880	; 0x1e000
   1176c:	ldr	pc, [ip, #2488]!	; 0x9b8

00011770 <strrchr@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #122880	; 0x1e000
   11778:	ldr	pc, [ip, #2480]!	; 0x9b0

0001177c <statfs64@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #122880	; 0x1e000
   11784:	ldr	pc, [ip, #2472]!	; 0x9a8

00011788 <nl_langinfo@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #122880	; 0x1e000
   11790:	ldr	pc, [ip, #2464]!	; 0x9a0

00011794 <sscanf@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #122880	; 0x1e000
   1179c:	ldr	pc, [ip, #2456]!	; 0x998

000117a0 <localeconv@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #122880	; 0x1e000
   117a8:	ldr	pc, [ip, #2448]!	; 0x990

000117ac <timegm@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #122880	; 0x1e000
   117b4:	ldr	pc, [ip, #2440]!	; 0x988

000117b8 <fchdir@plt>:
   117b8:	add	ip, pc, #0, 12
   117bc:	add	ip, ip, #122880	; 0x1e000
   117c0:	ldr	pc, [ip, #2432]!	; 0x980

000117c4 <canonicalize_file_name@plt>:
   117c4:	add	ip, pc, #0, 12
   117c8:	add	ip, ip, #122880	; 0x1e000
   117cc:	ldr	pc, [ip, #2424]!	; 0x978

000117d0 <fopen64@plt>:
   117d0:	add	ip, pc, #0, 12
   117d4:	add	ip, ip, #122880	; 0x1e000
   117d8:	ldr	pc, [ip, #2416]!	; 0x970

000117dc <freecon@plt>:
   117dc:	add	ip, pc, #0, 12
   117e0:	add	ip, ip, #122880	; 0x1e000
   117e4:	ldr	pc, [ip, #2408]!	; 0x968

000117e8 <setmntent@plt>:
   117e8:	add	ip, pc, #0, 12
   117ec:	add	ip, ip, #122880	; 0x1e000
   117f0:	ldr	pc, [ip, #2400]!	; 0x960

000117f4 <bindtextdomain@plt>:
   117f4:	add	ip, pc, #0, 12
   117f8:	add	ip, ip, #122880	; 0x1e000
   117fc:	ldr	pc, [ip, #2392]!	; 0x958

00011800 <__xstat64@plt>:
   11800:	add	ip, pc, #0, 12
   11804:	add	ip, ip, #122880	; 0x1e000
   11808:	ldr	pc, [ip, #2384]!	; 0x950

0001180c <unsetenv@plt>:
   1180c:	add	ip, pc, #0, 12
   11810:	add	ip, ip, #122880	; 0x1e000
   11814:	ldr	pc, [ip, #2376]!	; 0x948

00011818 <strncmp@plt>:
   11818:	add	ip, pc, #0, 12
   1181c:	add	ip, ip, #122880	; 0x1e000
   11820:	ldr	pc, [ip, #2368]!	; 0x940

00011824 <abort@plt>:
   11824:	add	ip, pc, #0, 12
   11828:	add	ip, ip, #122880	; 0x1e000
   1182c:	ldr	pc, [ip, #2360]!	; 0x938

00011830 <close@plt>:
   11830:	add	ip, pc, #0, 12
   11834:	add	ip, ip, #122880	; 0x1e000
   11838:	ldr	pc, [ip, #2352]!	; 0x930

0001183c <getgrgid@plt>:
   1183c:	add	ip, pc, #0, 12
   11840:	add	ip, ip, #122880	; 0x1e000
   11844:	ldr	pc, [ip, #2344]!	; 0x928

00011848 <strspn@plt>:
   11848:	add	ip, pc, #0, 12
   1184c:	add	ip, ip, #122880	; 0x1e000
   11850:	ldr	pc, [ip, #2336]!	; 0x920

00011854 <__assert_fail@plt>:
   11854:	add	ip, pc, #0, 12
   11858:	add	ip, ip, #122880	; 0x1e000
   1185c:	ldr	pc, [ip, #2328]!	; 0x918

Disassembly of section .text:

00011860 <.text>:
   11860:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11864:	strd	r6, [sp, #8]
   11868:	movw	r6, #504	; 0x1f8
   1186c:	movt	r6, #3
   11870:	strd	r8, [sp, #16]
   11874:	mov	r8, r1
   11878:	movw	r9, #54228	; 0xd3d4
   1187c:	movt	r9, #1
   11880:	strd	sl, [sp, #24]
   11884:	mov	fp, r0
   11888:	str	lr, [sp, #32]
   1188c:	sub	sp, sp, #132	; 0x84
   11890:	movw	r7, #60684	; 0xed0c
   11894:	movt	r7, #1
   11898:	ldr	r0, [r1]
   1189c:	movw	sl, #496	; 0x1f0
   118a0:	movt	sl, #3
   118a4:	bl	18568 <__assert_fail@plt+0x6d14>
   118a8:	mov	r3, #0
   118ac:	movw	r1, #55136	; 0xd760
   118b0:	movt	r1, #1
   118b4:	mov	r0, #6
   118b8:	mov	r4, r3
   118bc:	str	r3, [sp, #24]
   118c0:	bl	11764 <setlocale@plt>
   118c4:	movw	r1, #60632	; 0xecd8
   118c8:	movt	r1, #1
   118cc:	movw	r0, #60460	; 0xec2c
   118d0:	movt	r0, #1
   118d4:	bl	117f4 <bindtextdomain@plt>
   118d8:	movw	r0, #60460	; 0xec2c
   118dc:	movt	r0, #1
   118e0:	bl	11518 <textdomain@plt>
   118e4:	bl	117a0 <localeconv@plt>
   118e8:	ldr	r3, [r0]
   118ec:	movw	r2, #60628	; 0xecd4
   118f0:	movt	r2, #1
   118f4:	str	r4, [sp, #20]
   118f8:	str	r4, [sp, #28]
   118fc:	ldrb	r1, [r3]
   11900:	cmp	r1, r4
   11904:	moveq	r3, r2
   11908:	mov	r0, r3
   1190c:	str	r3, [r6, #100]	; 0x64
   11910:	bl	11674 <strlen@plt>
   11914:	str	r0, [r6, #96]	; 0x60
   11918:	movw	r0, #22176	; 0x56a0
   1191c:	movt	r0, #1
   11920:	bl	1d3b0 <__assert_fail@plt+0xbb5c>
   11924:	mov	r5, #0
   11928:	ldr	r3, [pc, #992]	; 11d10 <__assert_fail@plt+0x4bc>
   1192c:	mov	r2, r7
   11930:	mov	r1, r8
   11934:	mov	r0, fp
   11938:	str	r5, [sp]
   1193c:	bl	11638 <getopt_long@plt>
   11940:	cmn	r0, #1
   11944:	mov	r4, r0
   11948:	beq	11ab4 <__assert_fail@plt+0x260>
   1194c:	cmp	r4, #76	; 0x4c
   11950:	beq	11a00 <__assert_fail@plt+0x1ac>
   11954:	ble	1199c <__assert_fail@plt+0x148>
   11958:	cmp	r4, #102	; 0x66
   1195c:	beq	119f4 <__assert_fail@plt+0x1a0>
   11960:	ble	119bc <__assert_fail@plt+0x168>
   11964:	cmp	r4, #116	; 0x74
   11968:	beq	119e8 <__assert_fail@plt+0x194>
   1196c:	cmp	r4, #256	; 0x100
   11970:	bne	119b4 <__assert_fail@plt+0x160>
   11974:	ldr	r2, [sl]
   11978:	movw	r3, #388	; 0x184
   1197c:	movt	r3, #3
   11980:	mov	r1, #1
   11984:	strb	r1, [r6, #117]	; 0x75
   11988:	str	r2, [sp, #24]
   1198c:	movw	r2, #55136	; 0xd760
   11990:	movt	r2, #1
   11994:	str	r2, [r3]
   11998:	b	11924 <__assert_fail@plt+0xd0>
   1199c:	cmn	r4, #2
   119a0:	beq	11aac <__assert_fail@plt+0x258>
   119a4:	cmp	r4, #0
   119a8:	beq	11a0c <__assert_fail@plt+0x1b8>
   119ac:	cmn	r4, #3
   119b0:	beq	11a6c <__assert_fail@plt+0x218>
   119b4:	mov	r0, #1
   119b8:	bl	14900 <__assert_fail@plt+0x30ac>
   119bc:	cmp	r4, #99	; 0x63
   119c0:	bne	119b4 <__assert_fail@plt+0x160>
   119c4:	ldr	r1, [sl]
   119c8:	movw	r3, #388	; 0x184
   119cc:	movt	r3, #3
   119d0:	movw	r2, #59580	; 0xe8bc
   119d4:	movt	r2, #1
   119d8:	strb	r5, [r6, #117]	; 0x75
   119dc:	str	r2, [r3]
   119e0:	str	r1, [sp, #24]
   119e4:	b	11924 <__assert_fail@plt+0xd0>
   119e8:	mov	r3, #1
   119ec:	str	r3, [sp, #20]
   119f0:	b	11924 <__assert_fail@plt+0xd0>
   119f4:	mov	r3, #1
   119f8:	str	r3, [sp, #28]
   119fc:	b	11924 <__assert_fail@plt+0xd0>
   11a00:	mov	r3, #1
   11a04:	strb	r3, [r6, #116]	; 0x74
   11a08:	b	11924 <__assert_fail@plt+0xd0>
   11a0c:	movw	r2, #396	; 0x18c
   11a10:	movt	r2, #3
   11a14:	ldr	r3, [pc, #760]	; 11d14 <__assert_fail@plt+0x4c0>
   11a18:	mov	r5, #1
   11a1c:	mov	r1, #4
   11a20:	ldr	ip, [r2]
   11a24:	movw	r0, #60656	; 0xecf0
   11a28:	movt	r0, #1
   11a2c:	str	r1, [sp]
   11a30:	str	r5, [sp, #8]
   11a34:	add	r2, r3, #12
   11a38:	ldr	r1, [sl]
   11a3c:	str	ip, [sp, #4]
   11a40:	bl	15574 <__assert_fail@plt+0x3d20>
   11a44:	add	r0, r9, r0, lsl #2
   11a48:	ldr	r3, [r0, #332]	; 0x14c
   11a4c:	cmp	r3, r5
   11a50:	beq	11c30 <__assert_fail@plt+0x3dc>
   11a54:	cmp	r3, #0
   11a58:	beq	11c24 <__assert_fail@plt+0x3d0>
   11a5c:	cmp	r3, #2
   11a60:	strbeq	r5, [r6, #118]	; 0x76
   11a64:	strbeq	r4, [r6, #119]	; 0x77
   11a68:	b	11924 <__assert_fail@plt+0xd0>
   11a6c:	movw	r2, #60668	; 0xecfc
   11a70:	movt	r2, #1
   11a74:	movw	r3, #392	; 0x188
   11a78:	movt	r3, #3
   11a7c:	movw	r0, #492	; 0x1ec
   11a80:	movt	r0, #3
   11a84:	stm	sp, {r2, r5}
   11a88:	movw	r1, #56720	; 0xdd90
   11a8c:	movt	r1, #1
   11a90:	ldr	r0, [r0]
   11a94:	movw	r2, #60456	; 0xec28
   11a98:	movt	r2, #1
   11a9c:	ldr	r3, [r3]
   11aa0:	bl	1b3dc <__assert_fail@plt+0x9b88>
   11aa4:	mov	r0, r5
   11aa8:	bl	1165c <exit@plt>
   11aac:	mov	r0, r5
   11ab0:	bl	14900 <__assert_fail@plt+0x30ac>
   11ab4:	movw	r4, #480	; 0x1e0
   11ab8:	movt	r4, #3
   11abc:	ldr	r3, [r4]
   11ac0:	cmp	r3, fp
   11ac4:	beq	11c5c <__assert_fail@plt+0x408>
   11ac8:	ldr	r9, [sp, #24]
   11acc:	cmp	r9, #0
   11ad0:	beq	11c84 <__assert_fail@plt+0x430>
   11ad4:	mov	r0, r9
   11ad8:	movw	r1, #60708	; 0xed24
   11adc:	movt	r1, #1
   11ae0:	bl	1c080 <__assert_fail@plt+0xa82c>
   11ae4:	cmp	r0, #0
   11ae8:	ldreq	r9, [sp, #24]
   11aec:	beq	11b34 <__assert_fail@plt+0x2e0>
   11af0:	movw	r0, #60712	; 0xed28
   11af4:	movt	r0, #1
   11af8:	bl	115cc <getenv@plt>
   11afc:	subs	r7, r0, #0
   11b00:	beq	11d00 <__assert_fail@plt+0x4ac>
   11b04:	movw	r6, #61804	; 0xf16c
   11b08:	movt	r6, #1
   11b0c:	mov	r3, #4
   11b10:	mov	r2, r6
   11b14:	movw	r1, #61844	; 0xf194
   11b18:	movt	r1, #1
   11b1c:	bl	15218 <__assert_fail@plt+0x39c4>
   11b20:	subs	r3, r0, #0
   11b24:	blt	11cb8 <__assert_fail@plt+0x464>
   11b28:	mov	r0, r5
   11b2c:	ldr	r1, [r6, r3, lsl #2]
   11b30:	bl	1a1e0 <__assert_fail@plt+0x898c>
   11b34:	movw	r3, #8624	; 0x21b0
   11b38:	movt	r3, #1
   11b3c:	ldr	r5, [r4]
   11b40:	movw	r7, #55212	; 0xd7ac
   11b44:	movt	r7, #1
   11b48:	mov	r6, #1
   11b4c:	ldr	sl, [sp, #28]
   11b50:	str	r3, [sp, #32]
   11b54:	movw	r3, #60864	; 0xedc0
   11b58:	movt	r3, #1
   11b5c:	str	r7, [sp, #20]
   11b60:	str	r3, [sp, #36]	; 0x24
   11b64:	b	11bbc <__assert_fail@plt+0x368>
   11b68:	mov	r0, r7
   11b6c:	ldr	r1, [sp, #20]
   11b70:	bl	11464 <strcmp@plt>
   11b74:	subs	r4, r0, #0
   11b78:	beq	11be4 <__assert_fail@plt+0x390>
   11b7c:	mov	r0, r7
   11b80:	add	r1, sp, #40	; 0x28
   11b84:	bl	1177c <statfs64@plt>
   11b88:	cmp	r0, #0
   11b8c:	bne	11c44 <__assert_fail@plt+0x3f0>
   11b90:	add	r1, sp, #40	; 0x28
   11b94:	mov	r2, r7
   11b98:	ldr	r0, [sp, #24]
   11b9c:	str	r1, [sp]
   11ba0:	mvn	r1, #0
   11ba4:	ldr	r3, [sp, #32]
   11ba8:	bl	13f88 <__assert_fail@plt+0x2734>
   11bac:	eor	r0, r0, #1
   11bb0:	uxtb	r0, r0
   11bb4:	and	r6, r6, r0
   11bb8:	add	r5, r5, #1
   11bbc:	cmp	r5, fp
   11bc0:	bge	11c3c <__assert_fail@plt+0x3e8>
   11bc4:	cmp	sl, #0
   11bc8:	ldr	r7, [r8, r5, lsl #2]
   11bcc:	bne	11b68 <__assert_fail@plt+0x314>
   11bd0:	mov	r0, r7
   11bd4:	mov	r2, r9
   11bd8:	ldr	r1, [sp, #24]
   11bdc:	bl	145d0 <__assert_fail@plt+0x2d7c>
   11be0:	b	11bb4 <__assert_fail@plt+0x360>
   11be4:	movw	r1, #60796	; 0xed7c
   11be8:	movt	r1, #1
   11bec:	mov	r2, #5
   11bf0:	bl	114e8 <dcgettext@plt>
   11bf4:	mov	r2, r0
   11bf8:	mov	r1, r7
   11bfc:	mov	r0, #4
   11c00:	str	r2, [sp, #28]
   11c04:	bl	1a5a4 <__assert_fail@plt+0x8d50>
   11c08:	mov	r3, r0
   11c0c:	mov	r1, r4
   11c10:	ldr	r2, [sp, #28]
   11c14:	mov	r0, #0
   11c18:	bl	115a8 <error@plt>
   11c1c:	mov	r0, #0
   11c20:	b	11bb4 <__assert_fail@plt+0x360>
   11c24:	strb	r3, [r6, #118]	; 0x76
   11c28:	strb	r3, [r6, #119]	; 0x77
   11c2c:	b	11924 <__assert_fail@plt+0xd0>
   11c30:	strb	r4, [r6, #118]	; 0x76
   11c34:	strb	r3, [r6, #119]	; 0x77
   11c38:	b	11924 <__assert_fail@plt+0xd0>
   11c3c:	eor	r0, r6, #1
   11c40:	bl	1165c <exit@plt>
   11c44:	bl	116b0 <__errno_location@plt>
   11c48:	mov	r2, #5
   11c4c:	ldr	r4, [r0]
   11c50:	mov	r0, #0
   11c54:	ldr	r1, [sp, #36]	; 0x24
   11c58:	b	11bf0 <__assert_fail@plt+0x39c>
   11c5c:	mov	r2, #5
   11c60:	mov	r0, r5
   11c64:	movw	r1, #60692	; 0xed14
   11c68:	movt	r1, #1
   11c6c:	bl	114e8 <dcgettext@plt>
   11c70:	mov	r2, r0
   11c74:	mov	r1, r5
   11c78:	mov	r0, r5
   11c7c:	bl	115a8 <error@plt>
   11c80:	b	119b4 <__assert_fail@plt+0x160>
   11c84:	ldr	r6, [sp, #20]
   11c88:	ldr	r2, [sp, #24]
   11c8c:	ldr	r5, [sp, #28]
   11c90:	mov	r1, r6
   11c94:	mov	r0, r5
   11c98:	bl	11e08 <__assert_fail@plt+0x5b4>
   11c9c:	mov	r1, r6
   11ca0:	mov	r2, #1
   11ca4:	str	r0, [sp, #24]
   11ca8:	mov	r0, r5
   11cac:	bl	11e08 <__assert_fail@plt+0x5b4>
   11cb0:	mov	r9, r0
   11cb4:	b	11b34 <__assert_fail@plt+0x2e0>
   11cb8:	mov	r1, #4
   11cbc:	mov	r0, r5
   11cc0:	bl	1a1e0 <__assert_fail@plt+0x898c>
   11cc4:	mov	r2, #5
   11cc8:	movw	r1, #60728	; 0xed38
   11ccc:	movt	r1, #1
   11cd0:	mov	r0, r5
   11cd4:	bl	114e8 <dcgettext@plt>
   11cd8:	mov	r6, r0
   11cdc:	mov	r0, r7
   11ce0:	bl	1a858 <__assert_fail@plt+0x9004>
   11ce4:	mov	r3, r0
   11ce8:	mov	r2, r6
   11cec:	mov	r1, r5
   11cf0:	mov	r0, r5
   11cf4:	bl	115a8 <error@plt>
   11cf8:	ldr	r9, [sp, #24]
   11cfc:	b	11b34 <__assert_fail@plt+0x2e0>
   11d00:	mov	r1, #4
   11d04:	ldr	r9, [sp, #24]
   11d08:	bl	1a1e0 <__assert_fail@plt+0x898c>
   11d0c:	b	11b34 <__assert_fail@plt+0x2e0>
   11d10:	andeq	sp, r1, ip, lsr r5
   11d14:	andeq	sp, r1, r0, lsr #10
   11d18:	mov	fp, #0
   11d1c:	mov	lr, #0
   11d20:	pop	{r1}		; (ldr r1, [sp], #4)
   11d24:	mov	r2, sp
   11d28:	push	{r2}		; (str r2, [sp, #-4]!)
   11d2c:	push	{r0}		; (str r0, [sp, #-4]!)
   11d30:	ldr	ip, [pc, #16]	; 11d48 <__assert_fail@plt+0x4f4>
   11d34:	push	{ip}		; (str ip, [sp, #-4]!)
   11d38:	ldr	r0, [pc, #12]	; 11d4c <__assert_fail@plt+0x4f8>
   11d3c:	ldr	r3, [pc, #12]	; 11d50 <__assert_fail@plt+0x4fc>
   11d40:	bl	115f0 <__libc_start_main@plt>
   11d44:	bl	11824 <abort@plt>
   11d48:	andeq	sp, r1, ip, lsr #7
   11d4c:	andeq	r1, r1, r0, ror #16
   11d50:	andeq	sp, r1, ip, asr #6
   11d54:	ldr	r3, [pc, #20]	; 11d70 <__assert_fail@plt+0x51c>
   11d58:	ldr	r2, [pc, #20]	; 11d74 <__assert_fail@plt+0x520>
   11d5c:	add	r3, pc, r3
   11d60:	ldr	r2, [r3, r2]
   11d64:	cmp	r2, #0
   11d68:	bxeq	lr
   11d6c:	b	1162c <__gmon_start__@plt>
   11d70:	muleq	r1, ip, r2
   11d74:	andeq	r0, r0, r8, ror r1
   11d78:	ldr	r0, [pc, #24]	; 11d98 <__assert_fail@plt+0x544>
   11d7c:	ldr	r3, [pc, #24]	; 11d9c <__assert_fail@plt+0x548>
   11d80:	cmp	r3, r0
   11d84:	bxeq	lr
   11d88:	ldr	r3, [pc, #16]	; 11da0 <__assert_fail@plt+0x54c>
   11d8c:	cmp	r3, #0
   11d90:	bxeq	lr
   11d94:	bx	r3
   11d98:	ldrdeq	r0, [r3], -r4
   11d9c:	ldrdeq	r0, [r3], -r4
   11da0:	andeq	r0, r0, r0
   11da4:	ldr	r0, [pc, #36]	; 11dd0 <__assert_fail@plt+0x57c>
   11da8:	ldr	r1, [pc, #36]	; 11dd4 <__assert_fail@plt+0x580>
   11dac:	sub	r1, r1, r0
   11db0:	asr	r1, r1, #2
   11db4:	add	r1, r1, r1, lsr #31
   11db8:	asrs	r1, r1, #1
   11dbc:	bxeq	lr
   11dc0:	ldr	r3, [pc, #16]	; 11dd8 <__assert_fail@plt+0x584>
   11dc4:	cmp	r3, #0
   11dc8:	bxeq	lr
   11dcc:	bx	r3
   11dd0:	ldrdeq	r0, [r3], -r4
   11dd4:	ldrdeq	r0, [r3], -r4
   11dd8:	andeq	r0, r0, r0
   11ddc:	push	{r4, lr}
   11de0:	ldr	r4, [pc, #24]	; 11e00 <__assert_fail@plt+0x5ac>
   11de4:	ldrb	r3, [r4]
   11de8:	cmp	r3, #0
   11dec:	popne	{r4, pc}
   11df0:	bl	11d78 <__assert_fail@plt+0x524>
   11df4:	mov	r3, #1
   11df8:	strb	r3, [r4]
   11dfc:	pop	{r4, pc}
   11e00:	strdeq	r0, [r3], -r4
   11e04:	b	11da4 <__assert_fail@plt+0x550>
   11e08:	cmp	r0, #0
   11e0c:	strd	r4, [sp, #-16]!
   11e10:	mov	r4, r1
   11e14:	str	r6, [sp, #8]
   11e18:	str	lr, [sp, #12]
   11e1c:	beq	11e5c <__assert_fail@plt+0x608>
   11e20:	cmp	r1, #0
   11e24:	bne	11e50 <__assert_fail@plt+0x5fc>
   11e28:	mov	r0, r1
   11e2c:	mov	r2, #5
   11e30:	movw	r1, #54732	; 0xd5cc
   11e34:	movt	r1, #1
   11e38:	bl	114e8 <dcgettext@plt>
   11e3c:	ldrd	r4, [sp]
   11e40:	ldr	r6, [sp, #8]
   11e44:	ldr	lr, [sp, #12]
   11e48:	add	sp, sp, #16
   11e4c:	b	1b93c <__assert_fail@plt+0xa0e8>
   11e50:	movw	r0, #54228	; 0xd3d4
   11e54:	movt	r0, #1
   11e58:	b	11e3c <__assert_fail@plt+0x5e8>
   11e5c:	cmp	r1, #0
   11e60:	beq	11e78 <__assert_fail@plt+0x624>
   11e64:	bl	11458 <is_selinux_enabled@plt>
   11e68:	cmp	r0, #0
   11e6c:	ldrgt	r0, [pc, #300]	; 11fa0 <__assert_fail@plt+0x74c>
   11e70:	ldrle	r0, [pc, #300]	; 11fa4 <__assert_fail@plt+0x750>
   11e74:	b	11e3c <__assert_fail@plt+0x5e8>
   11e78:	mov	r5, r2
   11e7c:	movw	r1, #54904	; 0xd678
   11e80:	movt	r1, #1
   11e84:	mov	r2, #5
   11e88:	bl	114e8 <dcgettext@plt>
   11e8c:	bl	1b93c <__assert_fail@plt+0xa0e8>
   11e90:	cmp	r5, #0
   11e94:	mov	r6, r0
   11e98:	bne	11f90 <__assert_fail@plt+0x73c>
   11e9c:	movw	r1, #55036	; 0xd6fc
   11ea0:	movt	r1, #1
   11ea4:	mov	r0, r5
   11ea8:	mov	r2, #5
   11eac:	bl	114e8 <dcgettext@plt>
   11eb0:	mov	r2, r0
   11eb4:	mov	r1, r6
   11eb8:	movw	r0, #55028	; 0xd6f4
   11ebc:	movt	r0, #1
   11ec0:	bl	1b9e8 <__assert_fail@plt+0xa194>
   11ec4:	mov	r5, r0
   11ec8:	mov	r0, r6
   11ecc:	bl	15b00 <__assert_fail@plt+0x42ac>
   11ed0:	mov	r2, #5
   11ed4:	movw	r1, #55080	; 0xd728
   11ed8:	movt	r1, #1
   11edc:	mov	r0, #0
   11ee0:	bl	114e8 <dcgettext@plt>
   11ee4:	mov	r2, r0
   11ee8:	mov	r1, r5
   11eec:	movw	r0, #55028	; 0xd6f4
   11ef0:	movt	r0, #1
   11ef4:	bl	1b9e8 <__assert_fail@plt+0xa194>
   11ef8:	mov	r4, r0
   11efc:	mov	r0, r5
   11f00:	bl	15b00 <__assert_fail@plt+0x42ac>
   11f04:	bl	11458 <is_selinux_enabled@plt>
   11f08:	cmp	r0, #0
   11f0c:	ble	11f48 <__assert_fail@plt+0x6f4>
   11f10:	mov	r2, #5
   11f14:	movw	r1, #55140	; 0xd764
   11f18:	movt	r1, #1
   11f1c:	mov	r0, #0
   11f20:	bl	114e8 <dcgettext@plt>
   11f24:	mov	r2, r0
   11f28:	mov	r1, r4
   11f2c:	movw	r0, #55028	; 0xd6f4
   11f30:	movt	r0, #1
   11f34:	bl	1b9e8 <__assert_fail@plt+0xa194>
   11f38:	mov	r3, r0
   11f3c:	mov	r0, r4
   11f40:	mov	r4, r3
   11f44:	bl	15b00 <__assert_fail@plt+0x42ac>
   11f48:	mov	r2, #5
   11f4c:	movw	r1, #55156	; 0xd774
   11f50:	movt	r1, #1
   11f54:	mov	r0, #0
   11f58:	bl	114e8 <dcgettext@plt>
   11f5c:	mov	r2, r0
   11f60:	mov	r1, r4
   11f64:	movw	r0, #55028	; 0xd6f4
   11f68:	movt	r0, #1
   11f6c:	bl	1b9e8 <__assert_fail@plt+0xa194>
   11f70:	mov	r5, r0
   11f74:	mov	r0, r4
   11f78:	bl	15b00 <__assert_fail@plt+0x42ac>
   11f7c:	mov	r0, r5
   11f80:	ldrd	r4, [sp]
   11f84:	ldr	r6, [sp, #8]
   11f88:	add	sp, sp, #12
   11f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   11f90:	movw	r1, #54964	; 0xd6b4
   11f94:	movt	r1, #1
   11f98:	mov	r0, r4
   11f9c:	b	11ea8 <__assert_fail@plt+0x654>
   11fa0:	strdeq	sp, [r1], -r8
   11fa4:	andeq	sp, r1, ip, lsr #8
   11fa8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11fac:	add	r5, r0, #1
   11fb0:	strd	r6, [sp, #8]
   11fb4:	strd	r8, [sp, #16]
   11fb8:	add	r8, r0, r1
   11fbc:	cmp	r5, r8
   11fc0:	strd	sl, [sp, #24]
   11fc4:	mov	fp, r3
   11fc8:	str	lr, [sp, #32]
   11fcc:	sub	sp, sp, #4
   11fd0:	bcs	1204c <__assert_fail@plt+0x7f8>
   11fd4:	mov	r9, r2
   11fd8:	mov	r6, r5
   11fdc:	ldr	sl, [pc, #144]	; 12074 <__assert_fail@plt+0x820>
   11fe0:	b	12004 <__assert_fail@plt+0x7b0>
   11fe4:	bl	11680 <strchr@plt>
   11fe8:	cmp	r0, #0
   11fec:	mov	r3, r5
   11ff0:	mov	r6, r7
   11ff4:	strbne	r4, [r3], #1
   11ff8:	movne	r5, r3
   11ffc:	cmp	r8, r7
   12000:	bls	1204c <__assert_fail@plt+0x7f8>
   12004:	mov	r7, r6
   12008:	mov	r0, sl
   1200c:	ldrb	r4, [r7], #1
   12010:	mov	r1, r4
   12014:	bl	11680 <strchr@plt>
   12018:	cmp	r0, #0
   1201c:	mov	r1, r4
   12020:	mov	r0, r9
   12024:	bne	11fe4 <__assert_fail@plt+0x790>
   12028:	cmp	r8, r6
   1202c:	bls	1204c <__assert_fail@plt+0x7f8>
   12030:	sub	r8, r8, r6
   12034:	add	r8, r5, r8
   12038:	b	12040 <__assert_fail@plt+0x7ec>
   1203c:	ldrb	r4, [r6, #1]!
   12040:	strb	r4, [r5], #1
   12044:	cmp	r5, r8
   12048:	bne	1203c <__assert_fail@plt+0x7e8>
   1204c:	mov	r1, fp
   12050:	mov	r0, r5
   12054:	add	sp, sp, #4
   12058:	ldrd	r4, [sp]
   1205c:	ldrd	r6, [sp, #8]
   12060:	ldrd	r8, [sp, #16]
   12064:	ldrd	sl, [sp, #24]
   12068:	ldr	lr, [sp, #32]
   1206c:	add	sp, sp, #36	; 0x24
   12070:	b	11584 <strcpy@plt>
   12074:	andeq	sp, r1, r0, ror #8
   12078:	str	r4, [sp, #-16]!
   1207c:	mov	r4, r0
   12080:	strd	r6, [sp, #4]
   12084:	mov	r6, r2
   12088:	mov	r7, r3
   1208c:	movw	r2, #55208	; 0xd7a8
   12090:	movt	r2, #1
   12094:	str	lr, [sp, #12]
   12098:	movw	r3, #55204	; 0xd7a4
   1209c:	movt	r3, #1
   120a0:	bl	11fa8 <__assert_fail@plt+0x754>
   120a4:	mov	r2, r6
   120a8:	mov	r3, r7
   120ac:	ldrd	r6, [sp, #4]
   120b0:	mov	r1, r4
   120b4:	mov	r0, #1
   120b8:	ldr	r4, [sp]
   120bc:	ldr	lr, [sp, #12]
   120c0:	add	sp, sp, #16
   120c4:	b	116ec <__printf_chk@plt>
   120c8:	movw	r3, #56536	; 0xdcd8
   120cc:	movt	r3, #1
   120d0:	strd	r4, [sp, #-16]!
   120d4:	mov	r4, r0
   120d8:	mov	r5, r2
   120dc:	str	r6, [sp, #8]
   120e0:	movw	r2, #55212	; 0xd7ac
   120e4:	movt	r2, #1
   120e8:	str	lr, [sp, #12]
   120ec:	bl	11fa8 <__assert_fail@plt+0x754>
   120f0:	mov	r2, r5
   120f4:	mov	r1, r4
   120f8:	ldrd	r4, [sp]
   120fc:	mov	r0, #1
   12100:	ldr	r6, [sp, #8]
   12104:	ldr	lr, [sp, #12]
   12108:	add	sp, sp, #16
   1210c:	b	116ec <__printf_chk@plt>
   12110:	str	r4, [sp, #-16]!
   12114:	mov	r4, r0
   12118:	strd	r6, [sp, #4]
   1211c:	mov	r6, r2
   12120:	mov	r7, r3
   12124:	movw	r2, #55220	; 0xd7b4
   12128:	movt	r2, #1
   1212c:	str	lr, [sp, #12]
   12130:	movw	r3, #55216	; 0xd7b0
   12134:	movt	r3, #1
   12138:	bl	11fa8 <__assert_fail@plt+0x754>
   1213c:	mov	r2, r6
   12140:	mov	r3, r7
   12144:	ldrd	r6, [sp, #4]
   12148:	mov	r1, r4
   1214c:	mov	r0, #1
   12150:	ldr	r4, [sp]
   12154:	ldr	lr, [sp, #12]
   12158:	add	sp, sp, #16
   1215c:	b	116ec <__printf_chk@plt>
   12160:	str	r4, [sp, #-16]!
   12164:	mov	r4, r0
   12168:	strd	r6, [sp, #4]
   1216c:	mov	r6, r2
   12170:	mov	r7, r3
   12174:	movw	r2, #55228	; 0xd7bc
   12178:	movt	r2, #1
   1217c:	str	lr, [sp, #12]
   12180:	movw	r3, #55224	; 0xd7b8
   12184:	movt	r3, #1
   12188:	bl	11fa8 <__assert_fail@plt+0x754>
   1218c:	mov	r2, r6
   12190:	mov	r3, r7
   12194:	ldrd	r6, [sp, #4]
   12198:	mov	r1, r4
   1219c:	mov	r0, #1
   121a0:	ldr	r4, [sp]
   121a4:	ldr	lr, [sp, #12]
   121a8:	add	sp, sp, #16
   121ac:	b	116ec <__printf_chk@plt>
   121b0:	sub	r3, r3, #83	; 0x53
   121b4:	strd	r4, [sp, #-12]!
   121b8:	mov	r4, r0
   121bc:	mov	r5, r1
   121c0:	str	lr, [sp, #8]
   121c4:	sub	sp, sp, #12
   121c8:	cmp	r3, #33	; 0x21
   121cc:	ldrls	pc, [pc, r3, lsl #2]
   121d0:	b	1240c <__assert_fail@plt+0xbb8>
   121d4:	andeq	r2, r1, r0, lsl #5
   121d8:			; <UNDEFINED> instruction: 0x000122b0
   121dc:	andeq	r2, r1, ip, lsl #8
   121e0:	andeq	r2, r1, ip, lsl #8
   121e4:	andeq	r2, r1, ip, lsl #8
   121e8:	andeq	r2, r1, ip, lsl #8
   121ec:	andeq	r2, r1, ip, lsl #8
   121f0:	andeq	r2, r1, ip, lsl #8
   121f4:	andeq	r2, r1, ip, lsl #8
   121f8:	andeq	r2, r1, ip, lsl #8
   121fc:	andeq	r2, r1, ip, lsl #8
   12200:	andeq	r2, r1, ip, lsl #8
   12204:	andeq	r2, r1, ip, lsl #8
   12208:	andeq	r2, r1, ip, lsl #8
   1220c:	andeq	r2, r1, r0, ror r3
   12210:	andeq	r2, r1, r0, lsl #7
   12214:	muleq	r1, r0, r3
   12218:	andeq	r2, r1, r0, lsr #7
   1221c:	andeq	r2, r1, ip, lsl #8
   12220:			; <UNDEFINED> instruction: 0x000123b0
   12224:	andeq	r2, r1, ip, lsl #8
   12228:	andeq	r2, r1, ip, lsl #8
   1222c:	andeq	r2, r1, r0, asr #7
   12230:	andeq	r2, r1, ip, lsl #8
   12234:	andeq	r2, r1, ip, lsl #8
   12238:	ldrdeq	r2, [r1], -r8
   1223c:	andeq	r2, r1, ip, lsl #8
   12240:	andeq	r2, r1, ip, ror #7
   12244:	andeq	r2, r1, ip, lsl #8
   12248:	andeq	r2, r1, ip, lsl #8
   1224c:	andeq	r2, r1, ip, lsl #8
   12250:	andeq	r2, r1, ip, lsl #8
   12254:	strdeq	r2, [r1], -r8
   12258:	andeq	r2, r1, ip, asr r2
   1225c:	ldr	r3, [sp, #32]
   12260:	ldr	r2, [r3]
   12264:	asr	r3, r2, #31
   12268:	bl	12078 <__assert_fail@plt+0x824>
   1226c:	mov	r0, #0
   12270:	add	sp, sp, #12
   12274:	ldrd	r4, [sp]
   12278:	add	sp, sp, #8
   1227c:	pop	{pc}		; (ldr pc, [sp], #4)
   12280:	ldr	r3, [sp, #32]
   12284:	ldr	r2, [r3, #60]	; 0x3c
   12288:	asr	r3, r2, #31
   1228c:	orrs	r1, r2, r3
   12290:	bne	122a0 <__assert_fail@plt+0xa4c>
   12294:	ldr	r3, [sp, #32]
   12298:	ldr	r2, [r3, #4]
   1229c:	asr	r3, r2, #31
   122a0:	mov	r1, r5
   122a4:	mov	r0, r4
   122a8:	bl	12110 <__assert_fail@plt+0x8bc>
   122ac:	b	1226c <__assert_fail@plt+0xa18>
   122b0:	ldr	r3, [sp, #32]
   122b4:	ldr	r2, [r3]
   122b8:	movw	r3, #63415	; 0xf7b7
   122bc:	movt	r3, #303	; 0x12f
   122c0:	cmp	r2, r3
   122c4:	beq	13190 <__assert_fail@plt+0x193c>
   122c8:	ble	124d8 <__assert_fail@plt+0xc84>
   122cc:	movw	r3, #17227	; 0x434b
   122d0:	movt	r3, #21327	; 0x534f
   122d4:	cmp	r2, r3
   122d8:	beq	13184 <__assert_fail@plt+0x1930>
   122dc:	ble	125d4 <__assert_fail@plt+0xd80>
   122e0:	movw	r3, #21827	; 0x5543
   122e4:	movt	r3, #25971	; 0x6573
   122e8:	cmp	r2, r3
   122ec:	beq	1316c <__assert_fail@plt+0x1918>
   122f0:	movw	r3, #26227	; 0x6673
   122f4:	ble	12444 <__assert_fail@plt+0xbf0>
   122f8:	movt	r3, #29539	; 0x7363
   122fc:	cmp	r2, r3
   12300:	beq	13130 <__assert_fail@plt+0x18dc>
   12304:	ble	12bc0 <__assert_fail@plt+0x136c>
   12308:	movw	r3, #25455	; 0x636f
   1230c:	movt	r3, #29793	; 0x7461
   12310:	cmp	r2, r3
   12314:	beq	130ac <__assert_fail@plt+0x1858>
   12318:	ble	12cd8 <__assert_fail@plt+0x1484>
   1231c:	movw	r3, #16982	; 0x4256
   12320:	movt	r3, #30831	; 0x786f
   12324:	cmp	r2, r3
   12328:	beq	12fec <__assert_fail@plt+0x1798>
   1232c:	ble	12e54 <__assert_fail@plt+0x1600>
   12330:	movw	r3, #30256	; 0x7630
   12334:	movt	r3, #31052	; 0x794c
   12338:	cmp	r2, r3
   1233c:	movweq	r2, #55964	; 0xda9c
   12340:	movteq	r2, #1
   12344:	beq	12360 <__assert_fail@plt+0xb0c>
   12348:	movw	r3, #26227	; 0x6673
   1234c:	movt	r3, #31868	; 0x7c7c
   12350:	cmp	r2, r3
   12354:	movweq	r2, #55996	; 0xdabc
   12358:	movteq	r2, #1
   1235c:	bne	124ac <__assert_fail@plt+0xc58>
   12360:	mov	r1, r5
   12364:	mov	r0, r4
   12368:	bl	120c8 <__assert_fail@plt+0x874>
   1236c:	b	1226c <__assert_fail@plt+0xa18>
   12370:	ldr	r3, [sp, #32]
   12374:	ldrd	r2, [r3, #24]
   12378:	bl	12160 <__assert_fail@plt+0x90c>
   1237c:	b	1226c <__assert_fail@plt+0xa18>
   12380:	ldr	r3, [sp, #32]
   12384:	ldrd	r2, [r3, #8]
   12388:	bl	12160 <__assert_fail@plt+0x90c>
   1238c:	b	1226c <__assert_fail@plt+0xa18>
   12390:	ldr	r3, [sp, #32]
   12394:	ldrd	r2, [r3, #32]
   12398:	bl	12110 <__assert_fail@plt+0x8bc>
   1239c:	b	1226c <__assert_fail@plt+0xa18>
   123a0:	ldr	r3, [sp, #32]
   123a4:	ldrd	r2, [r3, #40]	; 0x28
   123a8:	bl	12160 <__assert_fail@plt+0x90c>
   123ac:	b	1226c <__assert_fail@plt+0xa18>
   123b0:	ldr	r3, [sp, #32]
   123b4:	ldrd	r2, [r3, #16]
   123b8:	bl	12160 <__assert_fail@plt+0x90c>
   123bc:	b	1226c <__assert_fail@plt+0xa18>
   123c0:	ldr	r3, [sp, #32]
   123c4:	ldr	r2, [sp, #32]
   123c8:	ldr	r3, [r3, #48]	; 0x30
   123cc:	ldr	r2, [r2, #52]	; 0x34
   123d0:	bl	12078 <__assert_fail@plt+0x824>
   123d4:	b	1226c <__assert_fail@plt+0xa18>
   123d8:	ldr	r3, [sp, #32]
   123dc:	ldr	r2, [r3, #56]	; 0x38
   123e0:	asr	r3, r2, #31
   123e4:	bl	12110 <__assert_fail@plt+0x8bc>
   123e8:	b	1226c <__assert_fail@plt+0xa18>
   123ec:	ldr	r2, [sp, #28]
   123f0:	bl	120c8 <__assert_fail@plt+0x874>
   123f4:	b	1226c <__assert_fail@plt+0xa18>
   123f8:	ldr	r3, [sp, #32]
   123fc:	ldr	r2, [r3, #4]
   12400:	asr	r3, r2, #31
   12404:	bl	12110 <__assert_fail@plt+0x8bc>
   12408:	b	1226c <__assert_fail@plt+0xa18>
   1240c:	movw	r3, #492	; 0x1ec
   12410:	movt	r3, #3
   12414:	ldr	r0, [r3]
   12418:	ldr	r3, [r0, #20]
   1241c:	ldr	r2, [r0, #24]
   12420:	cmp	r3, r2
   12424:	addcc	r1, r3, #1
   12428:	movcc	r2, #63	; 0x3f
   1242c:	strcc	r1, [r0, #20]
   12430:	strbcc	r2, [r3]
   12434:	bcc	1226c <__assert_fail@plt+0xa18>
   12438:	mov	r1, #63	; 0x3f
   1243c:	bl	11758 <__overflow@plt>
   12440:	b	1226c <__assert_fail@plt+0xa18>
   12444:	movt	r3, #24931	; 0x6163
   12448:	cmp	r2, r3
   1244c:	beq	13124 <__assert_fail@plt+0x18d0>
   12450:	ble	12a8c <__assert_fail@plt+0x1238>
   12454:	movw	r3, #25968	; 0x6570
   12458:	movt	r3, #25189	; 0x6265
   1245c:	cmp	r2, r3
   12460:	beq	130dc <__assert_fail@plt+0x1888>
   12464:	ble	12ddc <__assert_fail@plt+0x1588>
   12468:	movw	r3, #29296	; 0x7270
   1246c:	movt	r3, #25447	; 0x6367
   12470:	cmp	r2, r3
   12474:	beq	1301c <__assert_fail@plt+0x17c8>
   12478:	ble	12e20 <__assert_fail@plt+0x15cc>
   1247c:	movw	r3, #26400	; 0x6720
   12480:	movt	r3, #25698	; 0x6462
   12484:	cmp	r2, r3
   12488:	movweq	r2, #55472	; 0xd8b0
   1248c:	movteq	r2, #1
   12490:	beq	12360 <__assert_fail@plt+0xb0c>
   12494:	movw	r3, #24952	; 0x6178
   12498:	movt	r3, #25700	; 0x6464
   1249c:	cmp	r2, r3
   124a0:	movweq	r2, #55464	; 0xd8a8
   124a4:	movteq	r2, #1
   124a8:	beq	12360 <__assert_fail@plt+0xb0c>
   124ac:	movw	r3, #56336	; 0xdc10
   124b0:	movt	r3, #1
   124b4:	str	r2, [sp]
   124b8:	movw	r0, #504	; 0x1f8
   124bc:	movt	r0, #3
   124c0:	mov	r2, #21
   124c4:	mov	r1, #1
   124c8:	bl	116bc <__sprintf_chk@plt>
   124cc:	movw	r2, #504	; 0x1f8
   124d0:	movt	r2, #3
   124d4:	b	12360 <__assert_fail@plt+0xb0c>
   124d8:	movw	r3, #16390	; 0x4006
   124dc:	cmp	r2, r3
   124e0:	beq	13178 <__assert_fail@plt+0x1924>
   124e4:	bgt	12554 <__assert_fail@plt+0xd00>
   124e8:	movw	r3, #59465	; 0xe849
   124ec:	movt	r3, #63893	; 0xf995
   124f0:	cmp	r2, r3
   124f4:	beq	13148 <__assert_fail@plt+0x18f4>
   124f8:	ble	127a4 <__assert_fail@plt+0xf50>
   124fc:	movw	r3, #4989	; 0x137d
   12500:	cmp	r2, r3
   12504:	beq	1313c <__assert_fail@plt+0x18e8>
   12508:	ble	12c5c <__assert_fail@plt+0x1408>
   1250c:	movw	r3, #9320	; 0x2468
   12510:	cmp	r2, r3
   12514:	beq	130c4 <__assert_fail@plt+0x1870>
   12518:	ble	12d1c <__assert_fail@plt+0x14c8>
   1251c:	movw	r3, #13364	; 0x3434
   12520:	cmp	r2, r3
   12524:	beq	13004 <__assert_fail@plt+0x17b0>
   12528:	ble	12e3c <__assert_fail@plt+0x15e8>
   1252c:	cmp	r2, #16384	; 0x4000
   12530:	movweq	r2, #55736	; 0xd9b8
   12534:	movteq	r2, #1
   12538:	beq	12360 <__assert_fail@plt+0xb0c>
   1253c:	movw	r3, #16388	; 0x4004
   12540:	cmp	r2, r3
   12544:	movweq	r2, #55736	; 0xd9b8
   12548:	movteq	r2, #1
   1254c:	beq	12360 <__assert_fail@plt+0xb0c>
   12550:	b	124ac <__assert_fail@plt+0xc58>
   12554:	movw	r3, #44533	; 0xadf5
   12558:	cmp	r2, r3
   1255c:	beq	13160 <__assert_fail@plt+0x190c>
   12560:	ble	128f0 <__assert_fail@plt+0x109c>
   12564:	movw	r3, #65518	; 0xffee
   12568:	movt	r3, #192	; 0xc0
   1256c:	cmp	r2, r3
   12570:	beq	13118 <__assert_fail@plt+0x18c4>
   12574:	ble	12a00 <__assert_fail@plt+0x11ac>
   12578:	movw	r3, #6512	; 0x1970
   1257c:	movt	r3, #278	; 0x116
   12580:	cmp	r2, r3
   12584:	beq	130d0 <__assert_fail@plt+0x187c>
   12588:	ble	12d98 <__assert_fail@plt+0x1544>
   1258c:	movw	r3, #63412	; 0xf7b4
   12590:	movt	r3, #303	; 0x12f
   12594:	cmp	r2, r3
   12598:	beq	13010 <__assert_fail@plt+0x17bc>
   1259c:	ble	12e8c <__assert_fail@plt+0x1638>
   125a0:	movw	r3, #63413	; 0xf7b5
   125a4:	movt	r3, #303	; 0x12f
   125a8:	cmp	r2, r3
   125ac:	movweq	r2, #56192	; 0xdb80
   125b0:	movteq	r2, #1
   125b4:	beq	12360 <__assert_fail@plt+0xb0c>
   125b8:	movw	r3, #63414	; 0xf7b6
   125bc:	movt	r3, #303	; 0x12f
   125c0:	cmp	r2, r3
   125c4:	movweq	r2, #56184	; 0xdb78
   125c8:	movteq	r2, #1
   125cc:	beq	12360 <__assert_fail@plt+0xb0c>
   125d0:	b	124ac <__assert_fail@plt+0xc58>
   125d4:	movw	r3, #12225	; 0x2fc1
   125d8:	movt	r3, #12225	; 0x2fc1
   125dc:	cmp	r2, r3
   125e0:	beq	13154 <__assert_fail@plt+0x1900>
   125e4:	ble	12658 <__assert_fail@plt+0xe04>
   125e8:	movw	r3, #18003	; 0x4653
   125ec:	movt	r3, #17752	; 0x4558
   125f0:	cmp	r2, r3
   125f4:	beq	1310c <__assert_fail@plt+0x18b8>
   125f8:	ble	12b24 <__assert_fail@plt+0x12d0>
   125fc:	movw	r3, #17229	; 0x434d
   12600:	movt	r3, #21317	; 0x5345
   12604:	cmp	r2, r3
   12608:	beq	130b8 <__assert_fail@plt+0x1864>
   1260c:	ble	12d54 <__assert_fail@plt+0x1500>
   12610:	movw	r3, #16719	; 0x414f
   12614:	movt	r3, #21318	; 0x5346
   12618:	cmp	r2, r3
   1261c:	beq	12ff8 <__assert_fail@plt+0x17a4>
   12620:	ble	12e70 <__assert_fail@plt+0x161c>
   12624:	movw	r3, #18502	; 0x4846
   12628:	movt	r3, #21318	; 0x5346
   1262c:	cmp	r2, r3
   12630:	movweq	r2, #56292	; 0xdbe4
   12634:	movteq	r2, #1
   12638:	beq	12360 <__assert_fail@plt+0xb0c>
   1263c:	movw	r3, #21582	; 0x544e
   12640:	movt	r3, #21318	; 0x5346
   12644:	cmp	r2, r3
   12648:	movweq	r2, #55936	; 0xda80
   1264c:	movteq	r2, #1
   12650:	beq	12360 <__assert_fail@plt+0xb0c>
   12654:	b	124ac <__assert_fail@plt+0xc58>
   12658:	movw	r3, #13126	; 0x3346
   1265c:	movt	r3, #5377	; 0x1501
   12660:	cmp	r2, r3
   12664:	beq	13100 <__assert_fail@plt+0x18ac>
   12668:	ble	12708 <__assert_fail@plt+0xeb4>
   1266c:	movw	r3, #47792	; 0xbab0
   12670:	movt	r3, #8209	; 0x2011
   12674:	cmp	r2, r3
   12678:	beq	13070 <__assert_fail@plt+0x181c>
   1267c:	ble	126c4 <__assert_fail@plt+0xe70>
   12680:	movw	r3, #15685	; 0x3d45
   12684:	movt	r3, #10445	; 0x28cd
   12688:	cmp	r2, r3
   1268c:	beq	12f98 <__assert_fail@plt+0x1744>
   12690:	movw	r3, #7658	; 0x1dea
   12694:	movt	r3, #11181	; 0x2bad
   12698:	cmp	r2, r3
   1269c:	movweq	r2, #55724	; 0xd9ac
   126a0:	movteq	r2, #1
   126a4:	beq	12360 <__assert_fail@plt+0xb0c>
   126a8:	movw	r3, #6405	; 0x1905
   126ac:	movt	r3, #9221	; 0x2405
   126b0:	cmp	r2, r3
   126b4:	bne	124ac <__assert_fail@plt+0xc58>
   126b8:	movw	r2, #56216	; 0xdb98
   126bc:	movt	r2, #1
   126c0:	b	12360 <__assert_fail@plt+0xb0c>
   126c4:	movw	r3, #806	; 0x326
   126c8:	movt	r3, #6531	; 0x1983
   126cc:	cmp	r2, r3
   126d0:	beq	12f8c <__assert_fail@plt+0x1738>
   126d4:	movw	r3, #64206	; 0xface
   126d8:	movt	r3, #7085	; 0x1bad
   126dc:	cmp	r2, r3
   126e0:	movweq	r2, #55324	; 0xd81c
   126e4:	movteq	r2, #1
   126e8:	beq	12360 <__assert_fail@plt+0xb0c>
   126ec:	movw	r3, #514	; 0x202
   126f0:	movt	r3, #6528	; 0x1980
   126f4:	cmp	r2, r3
   126f8:	bne	124ac <__assert_fail@plt+0xc58>
   126fc:	movw	r2, #55884	; 0xda4c
   12700:	movt	r2, #1
   12704:	b	12360 <__assert_fail@plt+0xb0c>
   12708:	movw	r3, #7658	; 0x1dea
   1270c:	movt	r3, #2989	; 0xbad
   12710:	cmp	r2, r3
   12714:	beq	13064 <__assert_fail@plt+0x1810>
   12718:	ble	12760 <__assert_fail@plt+0xf0c>
   1271c:	movw	r3, #30804	; 0x7854
   12720:	movt	r3, #4400	; 0x1130
   12724:	cmp	r2, r3
   12728:	beq	12fb0 <__assert_fail@plt+0x175c>
   1272c:	movw	r3, #4966	; 0x1366
   12730:	movt	r3, #4966	; 0x1366
   12734:	cmp	r2, r3
   12738:	movweq	r2, #55292	; 0xd7fc
   1273c:	movteq	r2, #1
   12740:	beq	12360 <__assert_fail@plt+0xb0c>
   12744:	mov	r3, #3024	; 0xbd0
   12748:	movt	r3, #3024	; 0xbd0
   1274c:	cmp	r2, r3
   12750:	bne	124ac <__assert_fail@plt+0xc58>
   12754:	movw	r2, #55800	; 0xd9f8
   12758:	movt	r2, #1
   1275c:	b	12360 <__assert_fail@plt+0xb0c>
   12760:	movw	r3, #22561	; 0x5821
   12764:	movt	r3, #1893	; 0x765
   12768:	cmp	r2, r3
   1276c:	beq	12fa4 <__assert_fail@plt+0x1750>
   12770:	movw	r3, #6452	; 0x1934
   12774:	movt	r3, #2308	; 0x904
   12778:	cmp	r2, r3
   1277c:	movweq	r2, #55260	; 0xd7dc
   12780:	movteq	r2, #1
   12784:	beq	12360 <__assert_fail@plt+0xb0c>
   12788:	movw	r3, #4520	; 0x11a8
   1278c:	movt	r3, #305	; 0x131
   12790:	cmp	r2, r3
   12794:	bne	124ac <__assert_fail@plt+0xc58>
   12798:	movw	r2, #55716	; 0xd9a4
   1279c:	movt	r2, #1
   127a0:	b	12360 <__assert_fail@plt+0xb0c>
   127a4:	movw	r3, #57005	; 0xdead
   127a8:	movt	r3, #48879	; 0xbeef
   127ac:	cmp	r2, r3
   127b0:	beq	130f4 <__assert_fail@plt+0x18a0>
   127b4:	ble	12854 <__assert_fail@plt+0x1000>
   127b8:	movw	r3, #33252	; 0x81e4
   127bc:	movt	r3, #56926	; 0xde5e
   127c0:	cmp	r2, r3
   127c4:	beq	13034 <__assert_fail@plt+0x17e0>
   127c8:	ble	12810 <__assert_fail@plt+0xfbc>
   127cc:	movw	r3, #8208	; 0x2010
   127d0:	movt	r3, #62197	; 0xf2f5
   127d4:	cmp	r2, r3
   127d8:	beq	12fe0 <__assert_fail@plt+0x178c>
   127dc:	movw	r3, #65420	; 0xff8c
   127e0:	movt	r3, #63868	; 0xf97c
   127e4:	cmp	r2, r3
   127e8:	movweq	r2, #56120	; 0xdb38
   127ec:	movteq	r2, #1
   127f0:	beq	12360 <__assert_fail@plt+0xb0c>
   127f4:	movw	r3, #57826	; 0xe1e2
   127f8:	movt	r3, #57589	; 0xe0f5
   127fc:	cmp	r2, r3
   12800:	bne	124ac <__assert_fail@plt+0xc58>
   12804:	movw	r2, #55540	; 0xd8f4
   12808:	movt	r2, #1
   1280c:	b	12360 <__assert_fail@plt+0xb0c>
   12810:	movw	r3, #33128	; 0x8168
   12814:	movt	r3, #51582	; 0xc97e
   12818:	cmp	r2, r3
   1281c:	beq	12fd4 <__assert_fail@plt+0x1780>
   12820:	movw	r3, #18961	; 0x4a11
   12824:	movt	r3, #51966	; 0xcafe
   12828:	cmp	r2, r3
   1282c:	movweq	r2, #55340	; 0xd82c
   12830:	movteq	r2, #1
   12834:	beq	12360 <__assert_fail@plt+0xb0c>
   12838:	movw	r3, #5520	; 0x1590
   1283c:	movt	r3, #51031	; 0xc757
   12840:	cmp	r2, r3
   12844:	bne	124ac <__assert_fail@plt+0xc58>
   12848:	movw	r2, #55984	; 0xdab0
   1284c:	movt	r2, #1
   12850:	b	12360 <__assert_fail@plt+0xb0c>
   12854:	movw	r3, #64757	; 0xfcf5
   12858:	movt	r3, #42241	; 0xa501
   1285c:	cmp	r2, r3
   12860:	beq	13028 <__assert_fail@plt+0x17d4>
   12864:	ble	128ac <__assert_fail@plt+0x1058>
   12868:	movw	r3, #6516	; 0x1974
   1286c:	movt	r3, #43962	; 0xabba
   12870:	cmp	r2, r3
   12874:	beq	12fc8 <__assert_fail@plt+0x1774>
   12878:	movw	r3, #44220	; 0xacbc
   1287c:	movt	r3, #47819	; 0xbacb
   12880:	cmp	r2, r3
   12884:	movweq	r2, #56268	; 0xdbcc
   12888:	movteq	r2, #1
   1288c:	beq	12360 <__assert_fail@plt+0xb0c>
   12890:	movw	r3, #43754	; 0xaaea
   12894:	movt	r3, #43735	; 0xaad7
   12898:	cmp	r2, r3
   1289c:	bne	124ac <__assert_fail@plt+0xc58>
   128a0:	movw	r2, #55976	; 0xdaa8
   128a4:	movt	r2, #1
   128a8:	b	12360 <__assert_fail@plt+0xb0c>
   128ac:	movw	r3, #26686	; 0x683e
   128b0:	movt	r3, #37155	; 0x9123
   128b4:	cmp	r2, r3
   128b8:	beq	12fbc <__assert_fail@plt+0x1768>
   128bc:	movw	r3, #22774	; 0x58f6
   128c0:	movt	r3, #38276	; 0x9584
   128c4:	cmp	r2, r3
   128c8:	movweq	r2, #55696	; 0xd990
   128cc:	movteq	r2, #1
   128d0:	beq	12360 <__assert_fail@plt+0xb0c>
   128d4:	movw	r3, #22774	; 0x58f6
   128d8:	movt	r3, #34180	; 0x8584
   128dc:	cmp	r2, r3
   128e0:	bne	124ac <__assert_fail@plt+0xc58>
   128e4:	movw	r2, #56040	; 0xdae8
   128e8:	movt	r2, #1
   128ec:	b	12360 <__assert_fail@plt+0xb0c>
   128f0:	movw	r3, #24053	; 0x5df5
   128f4:	cmp	r2, r3
   128f8:	beq	130e8 <__assert_fail@plt+0x1894>
   128fc:	ble	12980 <__assert_fail@plt+0x112c>
   12900:	movw	r3, #38496	; 0x9660
   12904:	cmp	r2, r3
   12908:	beq	13040 <__assert_fail@plt+0x17ec>
   1290c:	ble	12948 <__assert_fail@plt+0x10f4>
   12910:	movw	r3, #40865	; 0x9fa1
   12914:	cmp	r2, r3
   12918:	beq	12f50 <__assert_fail@plt+0x16fc>
   1291c:	movw	r3, #40866	; 0x9fa2
   12920:	cmp	r2, r3
   12924:	movweq	r2, #56240	; 0xdbb0
   12928:	movteq	r2, #1
   1292c:	beq	12360 <__assert_fail@plt+0xb0c>
   12930:	movw	r3, #40864	; 0x9fa0
   12934:	cmp	r2, r3
   12938:	bne	124ac <__assert_fail@plt+0xc58>
   1293c:	movw	r2, #56004	; 0xdac4
   12940:	movt	r2, #1
   12944:	b	12360 <__assert_fail@plt+0xb0c>
   12948:	movw	r3, #29301	; 0x7275
   1294c:	cmp	r2, r3
   12950:	beq	12f44 <__assert_fail@plt+0x16f0>
   12954:	movw	r3, #29366	; 0x72b6
   12958:	cmp	r2, r3
   1295c:	movweq	r2, #55772	; 0xd9dc
   12960:	movteq	r2, #1
   12964:	beq	12360 <__assert_fail@plt+0xb0c>
   12968:	movw	r3, #26985	; 0x6969
   1296c:	cmp	r2, r3
   12970:	bne	124ac <__assert_fail@plt+0xc58>
   12974:	movw	r2, #55908	; 0xda64
   12978:	movt	r2, #1
   1297c:	b	12360 <__assert_fail@plt+0xb0c>
   12980:	movw	r3, #19780	; 0x4d44
   12984:	cmp	r2, r3
   12988:	beq	13088 <__assert_fail@plt+0x1834>
   1298c:	ble	129c8 <__assert_fail@plt+0x1174>
   12990:	movw	r3, #20859	; 0x517b
   12994:	cmp	r2, r3
   12998:	beq	12f80 <__assert_fail@plt+0x172c>
   1299c:	movw	r3, #22092	; 0x564c
   129a0:	cmp	r2, r3
   129a4:	movweq	r2, #55900	; 0xda5c
   129a8:	movteq	r2, #1
   129ac:	beq	12360 <__assert_fail@plt+0xb0c>
   129b0:	movw	r3, #19802	; 0x4d5a
   129b4:	cmp	r2, r3
   129b8:	bne	124ac <__assert_fail@plt+0xc58>
   129bc:	movw	r2, #55876	; 0xda44
   129c0:	movt	r2, #1
   129c4:	b	12360 <__assert_fail@plt+0xb0c>
   129c8:	movw	r3, #18475	; 0x482b
   129cc:	cmp	r2, r3
   129d0:	beq	12f74 <__assert_fail@plt+0x1720>
   129d4:	movw	r3, #18520	; 0x4858
   129d8:	cmp	r2, r3
   129dc:	movweq	r2, #55672	; 0xd978
   129e0:	movteq	r2, #1
   129e4:	beq	12360 <__assert_fail@plt+0xb0c>
   129e8:	movw	r3, #16964	; 0x4244
   129ec:	cmp	r2, r3
   129f0:	bne	124ac <__assert_fail@plt+0xc58>
   129f4:	movw	r2, #55660	; 0xd96c
   129f8:	movt	r2, #1
   129fc:	b	12360 <__assert_fail@plt+0xb0c>
   12a00:	movw	r3, #61791	; 0xf15f
   12a04:	cmp	r2, r3
   12a08:	beq	1307c <__assert_fail@plt+0x1828>
   12a0c:	ble	12a54 <__assert_fail@plt+0x1200>
   12a10:	movw	r3, #57579	; 0xe0eb
   12a14:	movt	r3, #39	; 0x27
   12a18:	cmp	r2, r3
   12a1c:	beq	12f68 <__assert_fail@plt+0x1714>
   12a20:	movw	r3, #19027	; 0x4a53
   12a24:	movt	r3, #65	; 0x41
   12a28:	cmp	r2, r3
   12a2c:	movweq	r2, #56212	; 0xdb94
   12a30:	movteq	r2, #1
   12a34:	beq	12360 <__assert_fail@plt+0xb0c>
   12a38:	movw	r3, #6484	; 0x1954
   12a3c:	movt	r3, #1
   12a40:	cmp	r2, r3
   12a44:	bne	124ac <__assert_fail@plt+0xc58>
   12a48:	movw	r2, #56228	; 0xdba4
   12a4c:	movt	r2, #1
   12a50:	b	12360 <__assert_fail@plt+0xb0c>
   12a54:	movw	r3, #61265	; 0xef51
   12a58:	cmp	r2, r3
   12a5c:	beq	12f5c <__assert_fail@plt+0x1708>
   12a60:	movw	r3, #61267	; 0xef53
   12a64:	cmp	r2, r3
   12a68:	movweq	r2, #55576	; 0xd918
   12a6c:	movteq	r2, #1
   12a70:	beq	12360 <__assert_fail@plt+0xb0c>
   12a74:	movw	r3, #44543	; 0xadff
   12a78:	cmp	r2, r3
   12a7c:	bne	124ac <__assert_fail@plt+0xc58>
   12a80:	movw	r2, #55248	; 0xd7d0
   12a84:	movt	r2, #1
   12a88:	b	12360 <__assert_fail@plt+0xb0c>
   12a8c:	movw	r3, #21314	; 0x5342
   12a90:	movt	r3, #22598	; 0x5846
   12a94:	cmp	r2, r3
   12a98:	beq	130a0 <__assert_fail@plt+0x184c>
   12a9c:	movw	r3, #18003	; 0x4653
   12aa0:	ble	12ae4 <__assert_fail@plt+0x1290>
   12aa4:	movt	r3, #23119	; 0x5a4f
   12aa8:	cmp	r2, r3
   12aac:	beq	12f38 <__assert_fail@plt+0x16e4>
   12ab0:	movw	r3, #11765	; 0x2df5
   12ab4:	movt	r3, #24010	; 0x5dca
   12ab8:	cmp	r2, r3
   12abc:	movweq	r2, #56084	; 0xdb14
   12ac0:	movteq	r2, #1
   12ac4:	beq	12360 <__assert_fail@plt+0xb0c>
   12ac8:	movw	r3, #27120	; 0x69f0
   12acc:	movt	r3, #23100	; 0x5a3c
   12ad0:	cmp	r2, r3
   12ad4:	bne	124ac <__assert_fail@plt+0xc58>
   12ad8:	movw	r2, #55744	; 0xd9c0
   12adc:	movt	r2, #1
   12ae0:	b	12360 <__assert_fail@plt+0xb0c>
   12ae4:	movt	r3, #22106	; 0x565a
   12ae8:	cmp	r2, r3
   12aec:	beq	12f2c <__assert_fail@plt+0x16d8>
   12af0:	movw	r3, #22569	; 0x5829
   12af4:	movt	r3, #22569	; 0x5829
   12af8:	cmp	r2, r3
   12afc:	movweq	r2, #55752	; 0xd9c8
   12b00:	movteq	r2, #1
   12b04:	beq	12360 <__assert_fail@plt+0xb0c>
   12b08:	mov	r3, #256	; 0x100
   12b0c:	movt	r3, #21529	; 0x5419
   12b10:	cmp	r2, r3
   12b14:	bne	124ac <__assert_fail@plt+0xc58>
   12b18:	movw	r2, #56228	; 0xdba4
   12b1c:	movt	r2, #1
   12b20:	b	12360 <__assert_fail@plt+0xb0c>
   12b24:	movw	r3, #23891	; 0x5d53
   12b28:	movt	r3, #17217	; 0x4341
   12b2c:	cmp	r2, r3
   12b30:	beq	13094 <__assert_fail@plt+0x1840>
   12b34:	ble	12b7c <__assert_fail@plt+0x1328>
   12b38:	movw	r3, #52520	; 0xcd28
   12b3c:	movt	r3, #17725	; 0x453d
   12b40:	cmp	r2, r3
   12b44:	beq	12f08 <__assert_fail@plt+0x16b4>
   12b48:	movw	r3, #17485	; 0x444d
   12b4c:	movt	r3, #17741	; 0x454d
   12b50:	cmp	r2, r3
   12b54:	movweq	r2, #55488	; 0xd8c0
   12b58:	movteq	r2, #1
   12b5c:	beq	12360 <__assert_fail@plt+0xb0c>
   12b60:	movw	r3, #16706	; 0x4142
   12b64:	movt	r3, #17485	; 0x444d
   12b68:	cmp	r2, r3
   12b6c:	bne	124ac <__assert_fail@plt+0xc58>
   12b70:	movw	r2, #55504	; 0xd8d0
   12b74:	movt	r2, #1
   12b78:	b	12360 <__assert_fail@plt+0xb0c>
   12b7c:	movw	r3, #21297	; 0x5331
   12b80:	movt	r3, #16966	; 0x4246
   12b84:	cmp	r2, r3
   12b88:	beq	12efc <__assert_fail@plt+0x16a8>
   12b8c:	movw	r3, #20045	; 0x4e4d
   12b90:	movt	r3, #16969	; 0x4249
   12b94:	cmp	r2, r3
   12b98:	movweq	r2, #55348	; 0xd834
   12b9c:	movteq	r2, #1
   12ba0:	beq	12360 <__assert_fail@plt+0xb0c>
   12ba4:	movw	r3, #17994	; 0x464a
   12ba8:	movt	r3, #12627	; 0x3153
   12bac:	cmp	r2, r3
   12bb0:	bne	124ac <__assert_fail@plt+0xc58>
   12bb4:	movw	r2, #55780	; 0xd9e4
   12bb8:	movt	r2, #1
   12bbc:	b	12360 <__assert_fail@plt+0xb0c>
   12bc0:	movw	r3, #18003	; 0x4653
   12bc4:	movt	r3, #27457	; 0x6b41
   12bc8:	cmp	r2, r3
   12bcc:	beq	13058 <__assert_fail@plt+0x1804>
   12bd0:	ble	12c18 <__assert_fail@plt+0x13c4>
   12bd4:	movw	r3, #29540	; 0x7364
   12bd8:	movt	r3, #28262	; 0x6e66
   12bdc:	cmp	r2, r3
   12be0:	beq	12ec0 <__assert_fail@plt+0x166c>
   12be4:	movw	r3, #26227	; 0x6673
   12be8:	movt	r3, #28275	; 0x6e73
   12bec:	cmp	r2, r3
   12bf0:	movweq	r2, #55928	; 0xda78
   12bf4:	movteq	r2, #1
   12bf8:	beq	12360 <__assert_fail@plt+0xb0c>
   12bfc:	movw	r3, #28528	; 0x6f70
   12c00:	movt	r3, #27759	; 0x6c6f
   12c04:	cmp	r2, r3
   12c08:	bne	124ac <__assert_fail@plt+0xc58>
   12c0c:	movw	r2, #55328	; 0xd820
   12c10:	movt	r2, #1
   12c14:	b	12360 <__assert_fail@plt+0xb0c>
   12c18:	movw	r3, #26985	; 0x6969
   12c1c:	movt	r3, #26457	; 0x6759
   12c20:	cmp	r2, r3
   12c24:	beq	12eb4 <__assert_fail@plt+0x1660>
   12c28:	movw	r3, #4386	; 0x1122
   12c2c:	movt	r3, #26649	; 0x6819
   12c30:	cmp	r2, r3
   12c34:	movweq	r2, #56032	; 0xdae0
   12c38:	movteq	r2, #1
   12c3c:	beq	12360 <__assert_fail@plt+0xb0c>
   12c40:	movw	r3, #21830	; 0x5546
   12c44:	movt	r3, #25971	; 0x6573
   12c48:	cmp	r2, r3
   12c4c:	bne	124ac <__assert_fail@plt+0xc58>
   12c50:	movw	r2, #55616	; 0xd940
   12c54:	movt	r2, #1
   12c58:	b	12360 <__assert_fail@plt+0xb0c>
   12c5c:	cmp	r2, #51	; 0x33
   12c60:	beq	1304c <__assert_fail@plt+0x17f8>
   12c64:	ble	12c9c <__assert_fail@plt+0x1448>
   12c68:	cmp	r2, #1984	; 0x7c0
   12c6c:	beq	12f20 <__assert_fail@plt+0x16cc>
   12c70:	movw	r3, #4979	; 0x1373
   12c74:	cmp	r2, r3
   12c78:	movweq	r2, #55480	; 0xd8b8
   12c7c:	movteq	r2, #1
   12c80:	beq	12360 <__assert_fail@plt+0xb0c>
   12c84:	movw	r3, #391	; 0x187
   12c88:	cmp	r2, r3
   12c8c:	bne	124ac <__assert_fail@plt+0xc58>
   12c90:	movw	r2, #55284	; 0xd7f4
   12c94:	movt	r2, #1
   12c98:	b	12360 <__assert_fail@plt+0xb0c>
   12c9c:	movw	r3, #19778	; 0x4d42
   12ca0:	movt	r3, #65363	; 0xff53
   12ca4:	cmp	r2, r3
   12ca8:	beq	12f14 <__assert_fail@plt+0x16c0>
   12cac:	cmp	r2, #47	; 0x2f
   12cb0:	movweq	r2, #56024	; 0xdad8
   12cb4:	movteq	r2, #1
   12cb8:	beq	12360 <__assert_fail@plt+0xb0c>
   12cbc:	movw	r3, #19778	; 0x4d42
   12cc0:	movt	r3, #65107	; 0xfe53
   12cc4:	cmp	r2, r3
   12cc8:	bne	124ac <__assert_fail@plt+0xc58>
   12ccc:	movw	r2, #56140	; 0xdb4c
   12cd0:	movt	r2, #1
   12cd4:	b	12360 <__assert_fail@plt+0xb0c>
   12cd8:	movw	r3, #29305	; 0x7279
   12cdc:	movt	r3, #29554	; 0x7372
   12ce0:	cmp	r2, r3
   12ce4:	beq	12ef0 <__assert_fail@plt+0x169c>
   12ce8:	movw	r3, #29253	; 0x7245
   12cec:	movt	r3, #29557	; 0x7375
   12cf0:	cmp	r2, r3
   12cf4:	movweq	r2, #55420	; 0xd87c
   12cf8:	movteq	r2, #1
   12cfc:	beq	12360 <__assert_fail@plt+0xb0c>
   12d00:	movw	r3, #29544	; 0x7368
   12d04:	movt	r3, #29553	; 0x7371
   12d08:	cmp	r2, r3
   12d0c:	bne	124ac <__assert_fail@plt+0xc58>
   12d10:	movw	r2, #56164	; 0xdb64
   12d14:	movt	r2, #1
   12d18:	b	12360 <__assert_fail@plt+0xb0c>
   12d1c:	movw	r3, #5007	; 0x138f
   12d20:	cmp	r2, r3
   12d24:	beq	12ee4 <__assert_fail@plt+0x1690>
   12d28:	movw	r3, #7377	; 0x1cd1
   12d2c:	cmp	r2, r3
   12d30:	movweq	r2, #55496	; 0xd8c8
   12d34:	movteq	r2, #1
   12d38:	beq	12360 <__assert_fail@plt+0xb0c>
   12d3c:	movw	r3, #4991	; 0x137f
   12d40:	cmp	r2, r3
   12d44:	bne	124ac <__assert_fail@plt+0xc58>
   12d48:	movw	r2, #55816	; 0xda08
   12d4c:	movt	r2, #1
   12d50:	b	12360 <__assert_fail@plt+0xb0c>
   12d54:	movw	r3, #20549	; 0x5045
   12d58:	movt	r3, #20553	; 0x5049
   12d5c:	cmp	r2, r3
   12d60:	beq	12ed8 <__assert_fail@plt+0x1684>
   12d64:	movw	r3, #18803	; 0x4973
   12d68:	movt	r3, #21093	; 0x5265
   12d6c:	cmp	r2, r3
   12d70:	movweq	r2, #56052	; 0xdaf4
   12d74:	movteq	r2, #1
   12d78:	beq	12360 <__assert_fail@plt+0xb0c>
   12d7c:	movw	r3, #18003	; 0x4653
   12d80:	movt	r3, #18256	; 0x4750
   12d84:	cmp	r2, r3
   12d88:	bne	124ac <__assert_fail@plt+0xc58>
   12d8c:	movw	r2, #55652	; 0xd964
   12d90:	movt	r2, #1
   12d94:	b	12360 <__assert_fail@plt+0xb0c>
   12d98:	movw	r3, #6548	; 0x1994
   12d9c:	movt	r3, #258	; 0x102
   12da0:	cmp	r2, r3
   12da4:	beq	12ecc <__assert_fail@plt+0x1678>
   12da8:	movw	r3, #6551	; 0x1997
   12dac:	movt	r3, #258	; 0x102
   12db0:	cmp	r2, r3
   12db4:	movweq	r2, #56252	; 0xdbbc
   12db8:	movteq	r2, #1
   12dbc:	beq	12360 <__assert_fail@plt+0xb0c>
   12dc0:	mov	r3, #25600	; 0x6400
   12dc4:	movt	r3, #195	; 0xc3
   12dc8:	cmp	r2, r3
   12dcc:	bne	124ac <__assert_fail@plt+0xc58>
   12dd0:	movw	r2, #55380	; 0xd854
   12dd4:	movt	r2, #1
   12dd8:	b	12360 <__assert_fail@plt+0xb0c>
   12ddc:	movw	r3, #26227	; 0x6673
   12de0:	movt	r3, #24949	; 0x6175
   12de4:	cmp	r2, r3
   12de8:	beq	12ea8 <__assert_fail@plt+0x1654>
   12dec:	movw	r3, #25974	; 0x6576
   12df0:	movt	r3, #25188	; 0x6264
   12df4:	cmp	r2, r3
   12df8:	movweq	r2, #55316	; 0xd814
   12dfc:	movteq	r2, #1
   12e00:	beq	12360 <__assert_fail@plt+0xb0c>
   12e04:	movw	r3, #26476	; 0x676c
   12e08:	movt	r3, #24933	; 0x6165
   12e0c:	cmp	r2, r3
   12e10:	bne	124ac <__assert_fail@plt+0xc58>
   12e14:	movw	r2, #56012	; 0xdacc
   12e18:	movt	r2, #1
   12e1c:	b	12360 <__assert_fail@plt+0xb0c>
   12e20:	movw	r3, #25970	; 0x6572
   12e24:	movt	r3, #25189	; 0x6265
   12e28:	cmp	r2, r3
   12e2c:	movweq	r2, #56176	; 0xdb70
   12e30:	movteq	r2, #1
   12e34:	beq	12360 <__assert_fail@plt+0xb0c>
   12e38:	b	124ac <__assert_fail@plt+0xc58>
   12e3c:	movw	r3, #9336	; 0x2478
   12e40:	cmp	r2, r3
   12e44:	movweq	r2, #55856	; 0xda30
   12e48:	movteq	r2, #1
   12e4c:	beq	12360 <__assert_fail@plt+0xb0c>
   12e50:	b	124ac <__assert_fail@plt+0xc58>
   12e54:	movw	r3, #24931	; 0x6163
   12e58:	movt	r3, #29810	; 0x7472
   12e5c:	cmp	r2, r3
   12e60:	movweq	r2, #56208	; 0xdb90
   12e64:	movteq	r2, #1
   12e68:	beq	12360 <__assert_fail@plt+0xb0c>
   12e6c:	b	124ac <__assert_fail@plt+0xc58>
   12e70:	movw	r3, #12621	; 0x314d
   12e74:	movt	r3, #21318	; 0x5346
   12e78:	cmp	r2, r3
   12e7c:	movweq	r2, #55808	; 0xda00
   12e80:	movteq	r2, #1
   12e84:	beq	12360 <__assert_fail@plt+0xb0c>
   12e88:	b	124ac <__assert_fail@plt+0xc58>
   12e8c:	movw	r3, #53613	; 0xd16d
   12e90:	movt	r3, #303	; 0x12f
   12e94:	cmp	r2, r3
   12e98:	movweq	r2, #56316	; 0xdbfc
   12e9c:	movteq	r2, #1
   12ea0:	beq	12360 <__assert_fail@plt+0xb0c>
   12ea4:	b	124ac <__assert_fail@plt+0xc58>
   12ea8:	movw	r2, #55276	; 0xd7ec
   12eac:	movt	r2, #1
   12eb0:	b	12360 <__assert_fail@plt+0xb0c>
   12eb4:	movw	r2, #56072	; 0xdb08
   12eb8:	movt	r2, #1
   12ebc:	b	12360 <__assert_fail@plt+0xb0c>
   12ec0:	movw	r2, #55912	; 0xda68
   12ec4:	movt	r2, #1
   12ec8:	b	12360 <__assert_fail@plt+0xb0c>
   12ecc:	movw	r2, #56200	; 0xdb88
   12ed0:	movt	r2, #1
   12ed4:	b	12360 <__assert_fail@plt+0xb0c>
   12ed8:	movw	r2, #56076	; 0xdb0c
   12edc:	movt	r2, #1
   12ee0:	b	12360 <__assert_fail@plt+0xb0c>
   12ee4:	movw	r2, #55824	; 0xda10
   12ee8:	movt	r2, #1
   12eec:	b	12360 <__assert_fail@plt+0xb0c>
   12ef0:	movw	r2, #55368	; 0xd848
   12ef4:	movt	r2, #1
   12ef8:	b	12360 <__assert_fail@plt+0xb0c>
   12efc:	movw	r2, #55308	; 0xd80c
   12f00:	movt	r2, #1
   12f04:	b	12360 <__assert_fail@plt+0xb0c>
   12f08:	movw	r2, #55452	; 0xd89c
   12f0c:	movt	r2, #1
   12f10:	b	12360 <__assert_fail@plt+0xb0c>
   12f14:	movw	r2, #55412	; 0xd874
   12f18:	movt	r2, #1
   12f1c:	b	12360 <__assert_fail@plt+0xb0c>
   12f20:	movw	r2, #55764	; 0xd9d4
   12f24:	movt	r2, #1
   12f28:	b	12360 <__assert_fail@plt+0xb0c>
   12f2c:	movw	r2, #56284	; 0xdbdc
   12f30:	movt	r2, #1
   12f34:	b	12360 <__assert_fail@plt+0xb0c>
   12f38:	movw	r2, #56232	; 0xdba8
   12f3c:	movt	r2, #1
   12f40:	b	12360 <__assert_fail@plt+0xb0c>
   12f44:	movw	r2, #56064	; 0xdb00
   12f48:	movt	r2, #1
   12f4c:	b	12360 <__assert_fail@plt+0xb0c>
   12f50:	movw	r2, #55944	; 0xda88
   12f54:	movt	r2, #1
   12f58:	b	12360 <__assert_fail@plt+0xb0c>
   12f5c:	movw	r2, #55588	; 0xd924
   12f60:	movt	r2, #1
   12f64:	b	12360 <__assert_fail@plt+0xb0c>
   12f68:	movw	r2, #55388	; 0xd85c
   12f6c:	movt	r2, #1
   12f70:	b	12360 <__assert_fail@plt+0xb0c>
   12f74:	movw	r2, #55664	; 0xd970
   12f78:	movt	r2, #1
   12f7c:	b	12360 <__assert_fail@plt+0xb0c>
   12f80:	movw	r2, #56136	; 0xdb48
   12f84:	movt	r2, #1
   12f88:	b	12360 <__assert_fail@plt+0xb0c>
   12f8c:	movw	r2, #55608	; 0xd938
   12f90:	movt	r2, #1
   12f94:	b	12360 <__assert_fail@plt+0xb0c>
   12f98:	movw	r2, #55444	; 0xd894
   12f9c:	movt	r2, #1
   12fa0:	b	12360 <__assert_fail@plt+0xb0c>
   12fa4:	movw	r2, #56048	; 0xdaf0
   12fa8:	movt	r2, #1
   12fac:	b	12360 <__assert_fail@plt+0xb0c>
   12fb0:	movw	r2, #55708	; 0xd99c
   12fb4:	movt	r2, #1
   12fb8:	b	12360 <__assert_fail@plt+0xb0c>
   12fbc:	movw	r2, #55360	; 0xd840
   12fc0:	movt	r2, #1
   12fc4:	b	12360 <__assert_fail@plt+0xb0c>
   12fc8:	movw	r2, #56300	; 0xdbec
   12fcc:	movt	r2, #1
   12fd0:	b	12360 <__assert_fail@plt+0xb0c>
   12fd4:	movw	r2, #55792	; 0xd9f0
   12fd8:	movt	r2, #1
   12fdc:	b	12360 <__assert_fail@plt+0xb0c>
   12fe0:	movw	r2, #55596	; 0xd92c
   12fe4:	movt	r2, #1
   12fe8:	b	12360 <__assert_fail@plt+0xb0c>
   12fec:	movw	r2, #56260	; 0xdbc4
   12ff0:	movt	r2, #1
   12ff4:	b	12360 <__assert_fail@plt+0xb0c>
   12ff8:	movw	r2, #55256	; 0xd7d8
   12ffc:	movt	r2, #1
   13000:	b	12360 <__assert_fail@plt+0xb0c>
   13004:	movw	r2, #55920	; 0xda70
   13008:	movt	r2, #1
   1300c:	b	12360 <__assert_fail@plt+0xb0c>
   13010:	movw	r2, #56308	; 0xdbf4
   13014:	movt	r2, #1
   13018:	b	12360 <__assert_fail@plt+0xb0c>
   1301c:	movw	r2, #55400	; 0xd868
   13020:	movt	r2, #1
   13024:	b	12360 <__assert_fail@plt+0xb0c>
   13028:	movw	r2, #56276	; 0xdbd4
   1302c:	movt	r2, #1
   13030:	b	12360 <__assert_fail@plt+0xb0c>
   13034:	movw	r2, #55528	; 0xd8e8
   13038:	movt	r2, #1
   1303c:	b	12360 <__assert_fail@plt+0xb0c>
   13040:	movw	r2, #55736	; 0xd9b8
   13044:	movt	r2, #1
   13048:	b	12360 <__assert_fail@plt+0xb0c>
   1304c:	movw	r2, #56320	; 0xdc00
   13050:	movt	r2, #1
   13054:	b	12360 <__assert_fail@plt+0xb0c>
   13058:	movw	r2, #55784	; 0xd9e8
   1305c:	movt	r2, #1
   13060:	b	12360 <__assert_fail@plt+0xb0c>
   13064:	movw	r2, #55632	; 0xd950
   13068:	movt	r2, #1
   1306c:	b	12360 <__assert_fail@plt+0xb0c>
   13070:	movw	r2, #55548	; 0xd8fc
   13074:	movt	r2, #1
   13078:	b	12360 <__assert_fail@plt+0xb0c>
   1307c:	movw	r2, #55516	; 0xd8dc
   13080:	movt	r2, #1
   13084:	b	12360 <__assert_fail@plt+0xb0c>
   13088:	movw	r2, #55892	; 0xda54
   1308c:	movt	r2, #1
   13090:	b	12360 <__assert_fail@plt+0xb0c>
   13094:	movw	r2, #56128	; 0xdb40
   13098:	movt	r2, #1
   1309c:	b	12360 <__assert_fail@plt+0xb0c>
   130a0:	movw	r2, #55636	; 0xd954
   130a4:	movt	r2, #1
   130a8:	b	12360 <__assert_fail@plt+0xb0c>
   130ac:	movw	r2, #55956	; 0xda94
   130b0:	movt	r2, #1
   130b4:	b	12360 <__assert_fail@plt+0xb0c>
   130b8:	movw	r2, #56096	; 0xdb20
   130bc:	movt	r2, #1
   130c0:	b	12360 <__assert_fail@plt+0xb0c>
   130c4:	movw	r2, #55844	; 0xda24
   130c8:	movt	r2, #1
   130cc:	b	12360 <__assert_fail@plt+0xb0c>
   130d0:	movw	r2, #55640	; 0xd958
   130d4:	movt	r2, #1
   130d8:	b	12360 <__assert_fail@plt+0xb0c>
   130dc:	movw	r2, #55432	; 0xd888
   130e0:	movt	r2, #1
   130e4:	b	12360 <__assert_fail@plt+0xb0c>
   130e8:	movw	r2, #55564	; 0xd90c
   130ec:	movt	r2, #1
   130f0:	b	12360 <__assert_fail@plt+0xb0c>
   130f4:	movw	r2, #56148	; 0xdb54
   130f8:	movt	r2, #1
   130fc:	b	12360 <__assert_fail@plt+0xb0c>
   13100:	movw	r2, #56224	; 0xdba0
   13104:	movt	r2, #1
   13108:	b	12360 <__assert_fail@plt+0xb0c>
   1310c:	movw	r2, #55556	; 0xd904
   13110:	movt	r2, #1
   13114:	b	12360 <__assert_fail@plt+0xb0c>
   13118:	movw	r2, #55680	; 0xd980
   1311c:	movt	r2, #1
   13120:	b	12360 <__assert_fail@plt+0xb0c>
   13124:	movw	r2, #56328	; 0xdc08
   13128:	movt	r2, #1
   1312c:	b	12360 <__assert_fail@plt+0xb0c>
   13130:	movw	r2, #56108	; 0xdb2c
   13134:	movt	r2, #1
   13138:	b	12360 <__assert_fail@plt+0xb0c>
   1313c:	movw	r2, #55572	; 0xd914
   13140:	movt	r2, #1
   13144:	b	12360 <__assert_fail@plt+0xb0c>
   13148:	movw	r2, #55688	; 0xd988
   1314c:	movt	r2, #1
   13150:	b	12360 <__assert_fail@plt+0xb0c>
   13154:	movw	r2, #55236	; 0xd7c4
   13158:	movt	r2, #1
   1315c:	b	12360 <__assert_fail@plt+0xb0c>
   13160:	movw	r2, #55240	; 0xd7c8
   13164:	movt	r2, #1
   13168:	b	12360 <__assert_fail@plt+0xb0c>
   1316c:	movw	r2, #55624	; 0xd948
   13170:	movt	r2, #1
   13174:	b	12360 <__assert_fail@plt+0xb0c>
   13178:	movw	r2, #55604	; 0xd934
   1317c:	movt	r2, #1
   13180:	b	12360 <__assert_fail@plt+0xb0c>
   13184:	movw	r2, #56156	; 0xdb5c
   13188:	movt	r2, #1
   1318c:	b	12360 <__assert_fail@plt+0xb0c>
   13190:	movw	r2, #55428	; 0xd884
   13194:	movt	r2, #1
   13198:	b	12360 <__assert_fail@plt+0xb0c>
   1319c:	strd	r4, [sp, #-20]!	; 0xffffffec
   131a0:	movw	r4, #504	; 0x1f8
   131a4:	movt	r4, #3
   131a8:	ldrb	r3, [r4, #21]
   131ac:	mov	r5, r0
   131b0:	strd	r6, [sp, #8]
   131b4:	str	lr, [sp, #16]
   131b8:	sub	sp, sp, #212	; 0xd4
   131bc:	cmp	r3, #0
   131c0:	beq	13288 <__assert_fail@plt+0x1a34>
   131c4:	mov	r2, sp
   131c8:	mov	r1, r5
   131cc:	mov	r0, #3
   131d0:	bl	11800 <__xstat64@plt>
   131d4:	cmp	r0, #0
   131d8:	bne	13270 <__assert_fail@plt+0x1a1c>
   131dc:	ldr	r4, [r4, #24]
   131e0:	cmp	r4, #0
   131e4:	bne	131f8 <__assert_fail@plt+0x19a4>
   131e8:	b	13270 <__assert_fail@plt+0x1a1c>
   131ec:	ldr	r4, [r4, #28]
   131f0:	cmp	r4, #0
   131f4:	beq	13270 <__assert_fail@plt+0x1a1c>
   131f8:	ldrb	r3, [r4, #24]
   131fc:	tst	r3, #1
   13200:	beq	131ec <__assert_fail@plt+0x1998>
   13204:	ldr	r6, [r4]
   13208:	ldrb	r3, [r6]
   1320c:	cmp	r3, #47	; 0x2f
   13210:	bne	131ec <__assert_fail@plt+0x1998>
   13214:	mov	r1, r5
   13218:	ldr	r0, [r4, #4]
   1321c:	bl	11464 <strcmp@plt>
   13220:	cmp	r0, #0
   13224:	bne	131ec <__assert_fail@plt+0x1998>
   13228:	mov	r1, r6
   1322c:	add	r2, sp, #104	; 0x68
   13230:	mov	r0, #3
   13234:	bl	11800 <__xstat64@plt>
   13238:	cmp	r0, #0
   1323c:	bne	131ec <__assert_fail@plt+0x1998>
   13240:	ldrd	r0, [sp, #96]	; 0x60
   13244:	ldrd	r2, [sp, #200]	; 0xc8
   13248:	cmp	r1, r3
   1324c:	cmpeq	r0, r2
   13250:	bne	131ec <__assert_fail@plt+0x1998>
   13254:	ldrd	r0, [sp]
   13258:	ldrd	r2, [sp, #104]	; 0x68
   1325c:	cmp	r1, r3
   13260:	cmpeq	r0, r2
   13264:	bne	131ec <__assert_fail@plt+0x1998>
   13268:	ldr	r0, [r4]
   1326c:	b	13274 <__assert_fail@plt+0x1a20>
   13270:	mov	r0, #0
   13274:	add	sp, sp, #212	; 0xd4
   13278:	ldrd	r4, [sp]
   1327c:	ldrd	r6, [sp, #8]
   13280:	add	sp, sp, #16
   13284:	pop	{pc}		; (ldr pc, [sp], #4)
   13288:	mov	r0, r3
   1328c:	bl	15d4c <__assert_fail@plt+0x44f8>
   13290:	cmp	r0, #0
   13294:	mov	r6, r0
   13298:	str	r0, [r4, #24]
   1329c:	beq	132ac <__assert_fail@plt+0x1a58>
   132a0:	mov	r3, #1
   132a4:	strb	r3, [r4, #21]
   132a8:	b	131c4 <__assert_fail@plt+0x1970>
   132ac:	bl	116b0 <__errno_location@plt>
   132b0:	ldr	r7, [r0]
   132b4:	mov	r2, #5
   132b8:	mov	r0, r6
   132bc:	movw	r1, #56352	; 0xdc20
   132c0:	movt	r1, #1
   132c4:	bl	114e8 <dcgettext@plt>
   132c8:	mov	r3, r0
   132cc:	movw	r2, #60128	; 0xeae0
   132d0:	movt	r2, #1
   132d4:	mov	r0, r6
   132d8:	mov	r1, r7
   132dc:	bl	115a8 <error@plt>
   132e0:	b	132a0 <__assert_fail@plt+0x1a4c>
   132e4:	strd	r4, [sp, #-12]!
   132e8:	movw	r4, #504	; 0x1f8
   132ec:	movt	r4, #3
   132f0:	ldr	r3, [r4, #28]
   132f4:	str	lr, [sp, #8]
   132f8:	sub	sp, sp, #92	; 0x5c
   132fc:	add	r5, sp, #8
   13300:	stm	r5, {r0, r1}
   13304:	cmp	r3, #0
   13308:	beq	13390 <__assert_fail@plt+0x1b3c>
   1330c:	mov	r1, r5
   13310:	mov	r0, r3
   13314:	ldr	r5, [sp, #12]
   13318:	add	r2, sp, #44	; 0x2c
   1331c:	bl	1ad7c <__assert_fail@plt+0x9528>
   13320:	cmp	r0, #0
   13324:	beq	13360 <__assert_fail@plt+0x1b0c>
   13328:	ldr	ip, [r4, #28]
   1332c:	movw	r2, #56400	; 0xdc50
   13330:	movt	r2, #1
   13334:	add	r3, sp, #44	; 0x2c
   13338:	mov	r1, #61	; 0x3d
   1333c:	ldr	r0, [pc, #104]	; 133ac <__assert_fail@plt+0x1b58>
   13340:	str	ip, [sp]
   13344:	str	r5, [sp, #4]
   13348:	bl	18510 <__assert_fail@plt+0x6cbc>
   1334c:	ldr	r0, [pc, #88]	; 133ac <__assert_fail@plt+0x1b58>
   13350:	add	sp, sp, #92	; 0x5c
   13354:	ldrd	r4, [sp]
   13358:	add	sp, sp, #8
   1335c:	pop	{pc}		; (ldr pc, [sp], #4)
   13360:	ldr	r0, [sp, #8]
   13364:	add	r2, sp, #20
   13368:	asr	r1, r0, #31
   1336c:	bl	15b60 <__assert_fail@plt+0x430c>
   13370:	movw	r3, #56424	; 0xdc68
   13374:	movt	r3, #1
   13378:	stm	sp, {r0, r5}
   1337c:	mov	r2, #61	; 0x3d
   13380:	mov	r1, #1
   13384:	ldr	r0, [pc, #32]	; 133ac <__assert_fail@plt+0x1b58>
   13388:	bl	116bc <__sprintf_chk@plt>
   1338c:	b	1334c <__assert_fail@plt+0x1af8>
   13390:	movw	r0, #56396	; 0xdc4c
   13394:	movt	r0, #1
   13398:	bl	115cc <getenv@plt>
   1339c:	bl	1aae0 <__assert_fail@plt+0x928c>
   133a0:	mov	r3, r0
   133a4:	str	r0, [r4, #28]
   133a8:	b	1330c <__assert_fail@plt+0x1ab8>
   133ac:	andeq	r0, r3, r8, lsl r2
   133b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   133b4:	mov	r5, r1
   133b8:	mov	r1, #46	; 0x2e
   133bc:	strd	r6, [sp, #8]
   133c0:	strd	r8, [sp, #16]
   133c4:	mov	r8, r0
   133c8:	strd	sl, [sp, #24]
   133cc:	str	lr, [sp, #32]
   133d0:	sub	sp, sp, #28
   133d4:	add	ip, sp, #24
   133d8:	stmdb	ip, {r2, r3}
   133dc:	mov	r2, r5
   133e0:	bl	11710 <memchr@plt>
   133e4:	subs	fp, r0, #0
   133e8:	ldr	r7, [sp, #16]
   133ec:	ldr	r9, [sp, #20]
   133f0:	beq	13604 <__assert_fail@plt+0x1db0>
   133f4:	mov	r6, #0
   133f8:	sub	sl, fp, r8
   133fc:	strb	r6, [r8, r5]
   13400:	ldrb	r3, [fp, #1]
   13404:	sub	r3, r3, #48	; 0x30
   13408:	cmp	r3, #9
   1340c:	bls	13504 <__assert_fail@plt+0x1cb0>
   13410:	ldrb	r3, [fp, #-1]
   13414:	sub	r3, r3, #48	; 0x30
   13418:	cmp	r3, #9
   1341c:	movls	r4, #9
   13420:	bhi	13684 <__assert_fail@plt+0x1e30>
   13424:	mov	r2, fp
   13428:	mov	r3, #0
   1342c:	strb	r3, [r2], #-1
   13430:	mov	r5, r2
   13434:	ldrb	r3, [r2, #-1]!
   13438:	sub	r3, r3, #48	; 0x30
   1343c:	cmp	r3, #9
   13440:	bls	13430 <__assert_fail@plt+0x1bdc>
   13444:	mov	r2, #10
   13448:	mov	r1, #0
   1344c:	mov	r0, r5
   13450:	bl	11470 <strtol@plt>
   13454:	cmp	r0, #1
   13458:	mov	r6, r0
   1345c:	ble	1352c <__assert_fail@plt+0x1cd8>
   13460:	movw	ip, #504	; 0x1f8
   13464:	movt	ip, #3
   13468:	ldrb	r3, [r5]
   1346c:	ldr	r2, [ip, #96]	; 0x60
   13470:	cmp	r3, #48	; 0x30
   13474:	movne	r3, r5
   13478:	addeq	r3, r5, #1
   1347c:	sub	r5, r3, r8
   13480:	cmp	r2, r0
   13484:	bcs	13530 <__assert_fail@plt+0x1cdc>
   13488:	sub	r2, r0, r2
   1348c:	cmp	r2, #1
   13490:	ble	13530 <__assert_fail@plt+0x1cdc>
   13494:	sub	ip, r2, r4
   13498:	cmp	ip, #1
   1349c:	ble	13530 <__assert_fail@plt+0x1cdc>
   134a0:	cmp	r8, r3
   134a4:	bcs	13698 <__assert_fail@plt+0x1e44>
   134a8:	sub	r3, r3, #1
   134ac:	sub	r2, r8, #1
   134b0:	mov	r0, r8
   134b4:	mov	r5, #0
   134b8:	ldrb	lr, [r2, #1]!
   134bc:	mov	r1, r0
   134c0:	cmp	lr, #45	; 0x2d
   134c4:	moveq	r5, #1
   134c8:	strbne	lr, [r1], #1
   134cc:	movne	r0, r1
   134d0:	cmp	r3, r2
   134d4:	bne	134b8 <__assert_fail@plt+0x1c64>
   134d8:	cmp	r5, #0
   134dc:	sub	r5, r0, r8
   134e0:	bne	13530 <__assert_fail@plt+0x1cdc>
   134e4:	movw	r3, #56432	; 0xdc70
   134e8:	movt	r3, #1
   134ec:	str	ip, [sp]
   134f0:	mvn	r2, #0
   134f4:	mov	r1, #1
   134f8:	bl	116bc <__sprintf_chk@plt>
   134fc:	add	r5, r5, r0
   13500:	b	13530 <__assert_fail@plt+0x1cdc>
   13504:	mov	r2, #10
   13508:	mov	r1, r6
   1350c:	add	r0, fp, #1
   13510:	bl	11470 <strtol@plt>
   13514:	subs	r4, r0, #0
   13518:	beq	13678 <__assert_fail@plt+0x1e24>
   1351c:	ldrb	r3, [fp, #-1]
   13520:	sub	r3, r3, #48	; 0x30
   13524:	cmp	r3, #9
   13528:	bls	13424 <__assert_fail@plt+0x1bd0>
   1352c:	mov	r5, sl
   13530:	cmp	r4, #8
   13534:	bgt	136a4 <__assert_fail@plt+0x1e50>
   13538:	mov	r2, r4
   1353c:	mov	r3, #1
   13540:	add	r3, r3, r3, lsl #2
   13544:	add	r2, r2, #1
   13548:	cmp	r2, #9
   1354c:	lsl	r3, r3, #1
   13550:	bne	13540 <__assert_fail@plt+0x1cec>
   13554:	sdiv	sl, r9, r3
   13558:	adds	r2, r9, #0
   1355c:	movne	r2, #1
   13560:	ands	r2, r2, r7, lsr #31
   13564:	bne	13610 <__assert_fail@plt+0x1dbc>
   13568:	mov	r1, r5
   1356c:	mov	r0, r8
   13570:	asr	r3, r7, #31
   13574:	mov	r2, r7
   13578:	bl	12160 <__assert_fail@plt+0x90c>
   1357c:	cmp	r4, #0
   13580:	beq	135e0 <__assert_fail@plt+0x1d8c>
   13584:	bic	r0, r0, r0, asr #31
   13588:	cmp	r4, #9
   1358c:	movw	ip, #504	; 0x1f8
   13590:	movt	ip, #3
   13594:	movlt	r3, r4
   13598:	movge	r3, #9
   1359c:	cmp	r0, r6
   135a0:	sub	r4, r4, r3
   135a4:	bge	135fc <__assert_fail@plt+0x1da8>
   135a8:	ldr	r2, [ip, #96]	; 0x60
   135ac:	sub	r0, r6, r0
   135b0:	cmp	r0, r2
   135b4:	addhi	r2, r3, r2
   135b8:	subhi	r2, r0, r2
   135bc:	bls	135fc <__assert_fail@plt+0x1da8>
   135c0:	mov	lr, #0
   135c4:	movw	r1, #56440	; 0xdc78
   135c8:	movt	r1, #1
   135cc:	mov	r0, #1
   135d0:	str	sl, [sp]
   135d4:	stmib	sp, {r2, r4, lr}
   135d8:	ldr	r2, [ip, #100]	; 0x64
   135dc:	bl	116ec <__printf_chk@plt>
   135e0:	add	sp, sp, #28
   135e4:	ldrd	r4, [sp]
   135e8:	ldrd	r6, [sp, #8]
   135ec:	ldrd	r8, [sp, #16]
   135f0:	ldrd	sl, [sp, #24]
   135f4:	add	sp, sp, #32
   135f8:	pop	{pc}		; (ldr pc, [sp], #4)
   135fc:	mov	r2, #0
   13600:	b	135c0 <__assert_fail@plt+0x1d6c>
   13604:	mov	r4, fp
   13608:	mov	r6, fp
   1360c:	b	13538 <__assert_fail@plt+0x1ce4>
   13610:	mov	r2, #51712	; 0xca00
   13614:	movt	r2, #15258	; 0x3b9a
   13618:	sdiv	r1, r9, r3
   1361c:	udiv	r2, r2, r3
   13620:	mls	r3, r3, r1, r9
   13624:	sub	sl, r2, sl
   13628:	cmp	r3, #0
   1362c:	subne	sl, sl, #1
   13630:	cmp	sl, #0
   13634:	addne	r7, r7, #1
   13638:	cmp	r7, #0
   1363c:	bne	13568 <__assert_fail@plt+0x1d14>
   13640:	mov	r1, r5
   13644:	mov	r0, r8
   13648:	movw	r3, #56436	; 0xdc74
   1364c:	movt	r3, #1
   13650:	movw	r2, #55228	; 0xd7bc
   13654:	movt	r2, #1
   13658:	bl	11fa8 <__assert_fail@plt+0x754>
   1365c:	mov	r1, r8
   13660:	mov	r2, #0
   13664:	mov	r3, #0
   13668:	movt	r3, #49104	; 0xbfd0
   1366c:	mov	r0, #1
   13670:	bl	116ec <__printf_chk@plt>
   13674:	b	1357c <__assert_fail@plt+0x1d28>
   13678:	mov	r5, sl
   1367c:	mov	r6, r4
   13680:	b	13538 <__assert_fail@plt+0x1ce4>
   13684:	mov	r5, sl
   13688:	mov	r4, #9
   1368c:	mov	sl, r9
   13690:	mov	r3, #1
   13694:	b	13558 <__assert_fail@plt+0x1d04>
   13698:	mov	r0, r8
   1369c:	mov	r5, #0
   136a0:	b	134e4 <__assert_fail@plt+0x1c90>
   136a4:	mov	sl, r9
   136a8:	mov	r3, #1
   136ac:	b	13558 <__assert_fail@plt+0x1d04>
   136b0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   136b4:	mov	r5, r0
   136b8:	sub	r3, r3, #65	; 0x41
   136bc:	strd	r6, [sp, #8]
   136c0:	mov	r6, r1
   136c4:	strd	r8, [sp, #16]
   136c8:	str	lr, [sp, #24]
   136cc:	sub	sp, sp, #68	; 0x44
   136d0:	ldr	ip, [sp, #104]	; 0x68
   136d4:	ldr	r7, [ip]
   136d8:	ldrd	r0, [ip, #4]
   136dc:	strd	r0, [sp]
   136e0:	ldrd	r0, [ip, #4]
   136e4:	cmp	r3, #57	; 0x39
   136e8:	ldrls	pc, [pc, r3, lsl #2]
   136ec:	b	13d48 <__assert_fail@plt+0x24f4>
   136f0:	strdeq	r3, [r1], -r8
   136f4:	ldrdeq	r3, [r1], -ip
   136f8:	andeq	r3, r1, ip, ror #24
   136fc:	andeq	r3, r1, r4, asr ip
   13700:	andeq	r3, r1, r8, asr #26
   13704:	andeq	r3, r1, r8, lsr #26
   13708:	andeq	r3, r1, r8, lsr ip
   1370c:	andeq	r3, r1, r8, asr #26
   13710:	andeq	r3, r1, r8, asr #26
   13714:	andeq	r3, r1, r8, asr #26
   13718:	andeq	r3, r1, r8, asr #26
   1371c:	andeq	r3, r1, r8, asr #26
   13720:	andeq	r3, r1, r8, asr #26
   13724:			; <UNDEFINED> instruction: 0x00013bb0
   13728:	andeq	r3, r1, r8, asr #26
   1372c:	andeq	r3, r1, r8, asr #26
   13730:	andeq	r3, r1, r8, asr #26
   13734:	muleq	r1, r8, fp
   13738:	andeq	r3, r1, r8, asr #26
   1373c:	andeq	r3, r1, r4, ror #22
   13740:	andeq	r3, r1, ip, lsr fp
   13744:	andeq	r3, r1, r8, asr #26
   13748:	andeq	r3, r1, ip, lsl #22
   1374c:	andeq	r3, r1, r8, ror #21
   13750:	andeq	r3, r1, r4, asr #21
   13754:	andeq	r3, r1, r0, lsr #21
   13758:	andeq	r3, r1, r8, asr #26
   1375c:	andeq	r3, r1, r8, asr #26
   13760:	andeq	r3, r1, r8, asr #26
   13764:	andeq	r3, r1, r8, asr #26
   13768:	andeq	r3, r1, r8, asr #26
   1376c:	andeq	r3, r1, r8, asr #26
   13770:	andeq	r3, r1, r0, ror #20
   13774:	andeq	r3, r1, r8, asr #20
   13778:	andeq	r3, r1, r8, asr #26
   1377c:	andeq	r3, r1, r4, lsl sl
   13780:	andeq	r3, r1, r8, asr #26
   13784:	strdeq	r3, [r1], -r8
   13788:	ldrdeq	r3, [r1], -ip
   1378c:	andeq	r3, r1, r0, asr #19
   13790:	andeq	r3, r1, r8, lsr #19
   13794:	andeq	r3, r1, r8, asr #26
   13798:	andeq	r3, r1, r8, asr #26
   1379c:	andeq	r3, r1, r8, asr #26
   137a0:	andeq	r3, r1, r8, lsr r9
   137a4:	andeq	r3, r1, r0, lsr #18
   137a8:	strdeq	r3, [r1], -r8
   137ac:	andeq	r3, r1, r8, asr #26
   137b0:	andeq	r3, r1, r8, asr #26
   137b4:	muleq	r1, r4, r8
   137b8:	andeq	r3, r1, ip, ror r8
   137bc:	andeq	r3, r1, r8, asr #17
   137c0:	andeq	r3, r1, r0, ror #16
   137c4:	andeq	r3, r1, r8, asr #26
   137c8:	andeq	r3, r1, r4, asr #16
   137cc:	andeq	r3, r1, r0, lsr r8
   137d0:	andeq	r3, r1, ip, lsl r8
   137d4:	ldrdeq	r3, [r1], -r8
   137d8:	ldrd	r2, [r7, #88]	; 0x58
   137dc:	add	r1, sp, #48	; 0x30
   137e0:	mov	r4, #0
   137e4:	strd	r2, [sp, #48]	; 0x30
   137e8:	ldm	r1, {r0, r1}
   137ec:	bl	132e4 <__assert_fail@plt+0x1a90>
   137f0:	mov	r2, r0
   137f4:	mov	r1, r6
   137f8:	mov	r0, r5
   137fc:	bl	120c8 <__assert_fail@plt+0x874>
   13800:	mov	r0, r4
   13804:	add	sp, sp, #68	; 0x44
   13808:	ldrd	r4, [sp]
   1380c:	ldrd	r6, [sp, #8]
   13810:	ldrd	r8, [sp, #16]
   13814:	add	sp, sp, #24
   13818:	pop	{pc}		; (ldr pc, [sp], #4)
   1381c:	ldrd	r2, [r7, #80]	; 0x50
   13820:	add	r1, sp, #32
   13824:	mov	r4, #0
   13828:	strd	r2, [sp, #32]
   1382c:	b	137e8 <__assert_fail@plt+0x1f94>
   13830:	ldrd	r2, [r7, #72]	; 0x48
   13834:	add	r1, sp, #16
   13838:	mov	r4, #0
   1383c:	strd	r2, [sp, #16]
   13840:	b	137e8 <__assert_fail@plt+0x1f94>
   13844:	cmp	r1, #0
   13848:	blt	13de0 <__assert_fail@plt+0x258c>
   1384c:	mov	r3, sp
   13850:	mov	r4, #0
   13854:	strd	r0, [sp]
   13858:	ldm	r3, {r0, r1}
   1385c:	b	137ec <__assert_fail@plt+0x1f98>
   13860:	mov	r3, #0
   13864:	mov	r1, r6
   13868:	ldr	r2, [r7, #24]
   1386c:	mov	r0, r5
   13870:	mov	r4, r3
   13874:	bl	12110 <__assert_fail@plt+0x8bc>
   13878:	b	13800 <__assert_fail@plt+0x1fac>
   1387c:	mov	r1, r6
   13880:	mov	r0, r5
   13884:	ldrd	r2, [r7, #48]	; 0x30
   13888:	mov	r4, #0
   1388c:	bl	12160 <__assert_fail@plt+0x90c>
   13890:	b	13800 <__assert_fail@plt+0x1fac>
   13894:	cmp	r2, #72	; 0x48
   13898:	ldr	r3, [r7, #32]
   1389c:	ldr	ip, [r7, #36]	; 0x24
   138a0:	beq	13a20 <__assert_fail@plt+0x21cc>
   138a4:	cmp	r2, #76	; 0x4c
   138a8:	beq	13d7c <__assert_fail@plt+0x2528>
   138ac:	mov	r2, r3
   138b0:	mov	r1, r6
   138b4:	mov	r3, ip
   138b8:	mov	r0, r5
   138bc:	bl	12110 <__assert_fail@plt+0x8bc>
   138c0:	mov	r4, #0
   138c4:	b	13800 <__assert_fail@plt+0x1fac>
   138c8:	ldr	ip, [r7, #32]
   138cc:	mov	r3, #0
   138d0:	mov	r1, r6
   138d4:	mov	r0, r5
   138d8:	mov	r4, r3
   138dc:	ldr	r2, [r7, #36]	; 0x24
   138e0:	ubfx	ip, ip, #8, #12
   138e4:	bic	r2, r2, #4080	; 0xff0
   138e8:	bic	r2, r2, #15
   138ec:	orr	r2, r2, ip
   138f0:	bl	12078 <__assert_fail@plt+0x824>
   138f4:	b	13800 <__assert_fail@plt+0x1fac>
   138f8:	ldr	r2, [r7, #56]	; 0x38
   138fc:	mov	r1, r6
   13900:	mov	r0, r5
   13904:	mov	r4, #0
   13908:	sub	r3, r2, #1
   1390c:	cmp	r3, #536870912	; 0x20000000
   13910:	movcs	r2, #512	; 0x200
   13914:	asr	r3, r2, #31
   13918:	bl	12110 <__assert_fail@plt+0x8bc>
   1391c:	b	13800 <__assert_fail@plt+0x1fac>
   13920:	mov	r1, r6
   13924:	mov	r0, r5
   13928:	ldr	r2, [sp, #100]	; 0x64
   1392c:	mov	r4, #0
   13930:	bl	120c8 <__assert_fail@plt+0x874>
   13934:	b	13800 <__assert_fail@plt+0x1fac>
   13938:	movw	r3, #504	; 0x1f8
   1393c:	movt	r3, #3
   13940:	ldrb	r3, [r3, #116]	; 0x74
   13944:	cmp	r3, #0
   13948:	bne	1395c <__assert_fail@plt+0x2108>
   1394c:	ldr	r3, [r7, #16]
   13950:	and	r3, r3, #61440	; 0xf000
   13954:	cmp	r3, #40960	; 0xa000
   13958:	beq	13da8 <__assert_fail@plt+0x2554>
   1395c:	ldr	r0, [sp, #100]	; 0x64
   13960:	bl	117c4 <canonicalize_file_name@plt>
   13964:	subs	r9, r0, #0
   13968:	beq	13e70 <__assert_fail@plt+0x261c>
   1396c:	bl	1319c <__assert_fail@plt+0x1948>
   13970:	mov	r8, r0
   13974:	mov	r0, r9
   13978:	bl	15b00 <__assert_fail@plt+0x42ac>
   1397c:	cmp	r8, #0
   13980:	movne	r4, #0
   13984:	movne	r9, r4
   13988:	beq	13da8 <__assert_fail@plt+0x2554>
   1398c:	mov	r0, r5
   13990:	mov	r2, r8
   13994:	mov	r1, r6
   13998:	bl	120c8 <__assert_fail@plt+0x874>
   1399c:	mov	r0, r9
   139a0:	bl	15b00 <__assert_fail@plt+0x42ac>
   139a4:	b	13800 <__assert_fail@plt+0x1fac>
   139a8:	mov	r1, r6
   139ac:	mov	r0, r5
   139b0:	ldrd	r2, [r7, #96]	; 0x60
   139b4:	mov	r4, #0
   139b8:	bl	12110 <__assert_fail@plt+0x8bc>
   139bc:	b	13800 <__assert_fail@plt+0x1fac>
   139c0:	mov	r3, #0
   139c4:	mov	r1, r6
   139c8:	ldr	r2, [r7, #20]
   139cc:	mov	r0, r5
   139d0:	mov	r4, r3
   139d4:	bl	12110 <__assert_fail@plt+0x8bc>
   139d8:	b	13800 <__assert_fail@plt+0x1fac>
   139dc:	mov	r3, #0
   139e0:	mov	r1, r6
   139e4:	ldr	r2, [r7, #28]
   139e8:	mov	r0, r5
   139ec:	mov	r4, r3
   139f0:	bl	12110 <__assert_fail@plt+0x8bc>
   139f4:	b	13800 <__assert_fail@plt+0x1fac>
   139f8:	mov	r3, #0
   139fc:	mov	r1, r6
   13a00:	ldr	r2, [r7, #16]
   13a04:	mov	r0, r5
   13a08:	mov	r4, r3
   13a0c:	bl	12078 <__assert_fail@plt+0x824>
   13a10:	b	13800 <__assert_fail@plt+0x1fac>
   13a14:	cmp	r2, #72	; 0x48
   13a18:	ldm	r7, {r3, ip}
   13a1c:	bne	138a4 <__assert_fail@plt+0x2050>
   13a20:	bic	r2, ip, #4080	; 0xff0
   13a24:	ubfx	r3, r3, #8, #12
   13a28:	mov	r1, r6
   13a2c:	bic	r2, r2, #15
   13a30:	mov	r0, r5
   13a34:	orr	r2, r2, r3
   13a38:	mov	r3, #0
   13a3c:	bl	12110 <__assert_fail@plt+0x8bc>
   13a40:	mov	r4, #0
   13a44:	b	13800 <__assert_fail@plt+0x1fac>
   13a48:	mov	r1, r6
   13a4c:	mov	r0, r5
   13a50:	ldrd	r2, [r7, #64]	; 0x40
   13a54:	mov	r4, #0
   13a58:	bl	12110 <__assert_fail@plt+0x8bc>
   13a5c:	b	13800 <__assert_fail@plt+0x1fac>
   13a60:	ldr	ip, [r7, #16]
   13a64:	mov	r1, r6
   13a68:	mov	r0, r5
   13a6c:	mov	r4, #0
   13a70:	movw	r3, #56508	; 0xdcbc
   13a74:	movt	r3, #1
   13a78:	movw	r2, #55208	; 0xd7a8
   13a7c:	movt	r2, #1
   13a80:	ubfx	r6, ip, #0, #12
   13a84:	bl	11fa8 <__assert_fail@plt+0x754>
   13a88:	mov	r2, r6
   13a8c:	mov	r1, r5
   13a90:	mov	r3, r4
   13a94:	mov	r0, #1
   13a98:	bl	116ec <__printf_chk@plt>
   13a9c:	b	13800 <__assert_fail@plt+0x1fac>
   13aa0:	ldrd	r2, [r7, #88]	; 0x58
   13aa4:	mov	r1, r6
   13aa8:	mov	r0, r5
   13aac:	mov	r4, #0
   13ab0:	strd	r2, [sp, #56]	; 0x38
   13ab4:	add	r3, sp, #64	; 0x40
   13ab8:	ldmdb	r3, {r2, r3}
   13abc:	bl	133b0 <__assert_fail@plt+0x1b5c>
   13ac0:	b	13800 <__assert_fail@plt+0x1fac>
   13ac4:	ldrd	r2, [r7, #80]	; 0x50
   13ac8:	add	ip, sp, #40	; 0x28
   13acc:	mov	r1, r6
   13ad0:	mov	r0, r5
   13ad4:	mov	r4, #0
   13ad8:	strd	r2, [sp, #40]	; 0x28
   13adc:	ldm	ip, {r2, r3}
   13ae0:	bl	133b0 <__assert_fail@plt+0x1b5c>
   13ae4:	b	13800 <__assert_fail@plt+0x1fac>
   13ae8:	ldrd	r2, [r7, #72]	; 0x48
   13aec:	add	ip, sp, #24
   13af0:	mov	r1, r6
   13af4:	mov	r0, r5
   13af8:	mov	r4, #0
   13afc:	strd	r2, [sp, #24]
   13b00:	ldm	ip, {r2, r3}
   13b04:	bl	133b0 <__assert_fail@plt+0x1b5c>
   13b08:	b	13800 <__assert_fail@plt+0x1fac>
   13b0c:	cmp	r1, #0
   13b10:	mov	r4, #0
   13b14:	movlt	r3, #0
   13b18:	strdge	r0, [sp, #8]
   13b1c:	mov	r1, r6
   13b20:	mov	r0, r5
   13b24:	strlt	r3, [sp, #8]
   13b28:	strlt	r3, [sp, #12]
   13b2c:	add	r3, sp, #8
   13b30:	ldm	r3, {r2, r3}
   13b34:	bl	133b0 <__assert_fail@plt+0x1b5c>
   13b38:	b	13800 <__assert_fail@plt+0x1fac>
   13b3c:	ldr	r0, [r7, #24]
   13b40:	bl	1147c <getpwuid@plt>
   13b44:	cmp	r0, #0
   13b48:	beq	13c48 <__assert_fail@plt+0x23f4>
   13b4c:	ldr	r2, [r0]
   13b50:	mov	r1, r6
   13b54:	mov	r0, r5
   13b58:	mov	r4, #0
   13b5c:	bl	120c8 <__assert_fail@plt+0x874>
   13b60:	b	13800 <__assert_fail@plt+0x1fac>
   13b64:	ldr	r2, [r7, #32]
   13b68:	mov	r3, #0
   13b6c:	mov	r1, r6
   13b70:	mov	r0, r5
   13b74:	mov	r4, r3
   13b78:	ldr	lr, [r7, #36]	; 0x24
   13b7c:	lsr	ip, r2, #12
   13b80:	uxtb	r2, r2
   13b84:	orr	ip, ip, lr, lsl #20
   13b88:	bic	ip, ip, #255	; 0xff
   13b8c:	orr	r2, ip, r2
   13b90:	bl	12078 <__assert_fail@plt+0x824>
   13b94:	b	13800 <__assert_fail@plt+0x1fac>
   13b98:	mov	r1, r6
   13b9c:	mov	r0, r5
   13ba0:	ldrd	r2, [r7, #32]
   13ba4:	mov	r4, #0
   13ba8:	bl	12078 <__assert_fail@plt+0x824>
   13bac:	b	13800 <__assert_fail@plt+0x1fac>
   13bb0:	mov	r0, #0
   13bb4:	bl	1a1c8 <__assert_fail@plt+0x8974>
   13bb8:	ldr	r1, [sp, #100]	; 0x64
   13bbc:	bl	1a5a4 <__assert_fail@plt+0x8d50>
   13bc0:	mov	r2, r0
   13bc4:	mov	r1, r6
   13bc8:	mov	r0, r5
   13bcc:	bl	120c8 <__assert_fail@plt+0x874>
   13bd0:	ldr	r3, [r7, #16]
   13bd4:	and	r3, r3, #61440	; 0xf000
   13bd8:	cmp	r3, #40960	; 0xa000
   13bdc:	movne	r4, #0
   13be0:	bne	13800 <__assert_fail@plt+0x1fac>
   13be4:	ldr	r1, [r7, #48]	; 0x30
   13be8:	ldr	r0, [sp, #100]	; 0x64
   13bec:	bl	150cc <__assert_fail@plt+0x3878>
   13bf0:	subs	r7, r0, #0
   13bf4:	beq	13ed0 <__assert_fail@plt+0x267c>
   13bf8:	mov	r4, #0
   13bfc:	movw	r1, #56500	; 0xdcb4
   13c00:	movt	r1, #1
   13c04:	mov	r0, #1
   13c08:	bl	116ec <__printf_chk@plt>
   13c0c:	mov	r0, r4
   13c10:	bl	1a1c8 <__assert_fail@plt+0x8974>
   13c14:	mov	r1, r7
   13c18:	bl	1a5a4 <__assert_fail@plt+0x8d50>
   13c1c:	mov	r2, r0
   13c20:	mov	r1, r6
   13c24:	mov	r0, r5
   13c28:	bl	120c8 <__assert_fail@plt+0x874>
   13c2c:	mov	r0, r7
   13c30:	bl	15b00 <__assert_fail@plt+0x42ac>
   13c34:	b	13800 <__assert_fail@plt+0x1fac>
   13c38:	ldr	r0, [r7, #28]
   13c3c:	bl	1183c <getgrgid@plt>
   13c40:	cmp	r0, #0
   13c44:	bne	13b4c <__assert_fail@plt+0x22f8>
   13c48:	movw	r2, #56456	; 0xdc88
   13c4c:	movt	r2, #1
   13c50:	b	13b50 <__assert_fail@plt+0x22fc>
   13c54:	mov	r1, r6
   13c58:	mov	r0, r5
   13c5c:	ldrd	r2, [r7]
   13c60:	mov	r4, #0
   13c64:	bl	12078 <__assert_fail@plt+0x824>
   13c68:	b	13800 <__assert_fail@plt+0x1fac>
   13c6c:	movw	r3, #504	; 0x1f8
   13c70:	movt	r3, #3
   13c74:	ldr	r0, [sp, #100]	; 0x64
   13c78:	add	r1, sp, #56	; 0x38
   13c7c:	ldrb	r3, [r3, #116]	; 0x74
   13c80:	cmp	r3, #0
   13c84:	beq	13dd4 <__assert_fail@plt+0x2580>
   13c88:	bl	1a9bc <__assert_fail@plt+0x9168>
   13c8c:	lsr	r4, r0, #31
   13c90:	cmp	r4, #0
   13c94:	bne	13dfc <__assert_fail@plt+0x25a8>
   13c98:	ldr	r2, [sp, #56]	; 0x38
   13c9c:	movw	r1, #56536	; 0xdcd8
   13ca0:	movt	r1, #1
   13ca4:	movw	r3, #56464	; 0xdc90
   13ca8:	movt	r3, #1
   13cac:	ldrh	r1, [r1]
   13cb0:	cmp	r2, #0
   13cb4:	moveq	r2, r3
   13cb8:	strh	r1, [r5, r6]
   13cbc:	mov	r1, r5
   13cc0:	mov	r0, #1
   13cc4:	bl	116ec <__printf_chk@plt>
   13cc8:	ldr	r0, [sp, #56]	; 0x38
   13ccc:	cmp	r0, #0
   13cd0:	beq	13800 <__assert_fail@plt+0x1fac>
   13cd4:	bl	117dc <freecon@plt>
   13cd8:	b	13800 <__assert_fail@plt+0x1fac>
   13cdc:	mov	r1, r6
   13ce0:	mov	r0, r5
   13ce4:	mov	r2, #512	; 0x200
   13ce8:	mov	r3, #0
   13cec:	mov	r4, #0
   13cf0:	bl	12110 <__assert_fail@plt+0x8bc>
   13cf4:	b	13800 <__assert_fail@plt+0x1fac>
   13cf8:	movw	r8, #504	; 0x1f8
   13cfc:	movt	r8, #3
   13d00:	mov	r0, r7
   13d04:	add	r1, r8, #104	; 0x68
   13d08:	mov	r4, #0
   13d0c:	bl	15af8 <__assert_fail@plt+0x42a4>
   13d10:	mov	r1, r6
   13d14:	mov	r0, r5
   13d18:	strb	r4, [r8, #114]	; 0x72
   13d1c:	add	r2, r8, #104	; 0x68
   13d20:	bl	120c8 <__assert_fail@plt+0x874>
   13d24:	b	13800 <__assert_fail@plt+0x1fac>
   13d28:	mov	r0, r7
   13d2c:	mov	r4, #0
   13d30:	bl	158a4 <__assert_fail@plt+0x4050>
   13d34:	mov	r2, r0
   13d38:	mov	r1, r6
   13d3c:	mov	r0, r5
   13d40:	bl	120c8 <__assert_fail@plt+0x874>
   13d44:	b	13800 <__assert_fail@plt+0x1fac>
   13d48:	movw	r3, #492	; 0x1ec
   13d4c:	movt	r3, #3
   13d50:	ldr	r0, [r3]
   13d54:	ldr	r3, [r0, #20]
   13d58:	ldr	r2, [r0, #24]
   13d5c:	cmp	r3, r2
   13d60:	bcs	13ec0 <__assert_fail@plt+0x266c>
   13d64:	add	r1, r3, #1
   13d68:	mov	r2, #63	; 0x3f
   13d6c:	mov	r4, #0
   13d70:	str	r1, [r0, #20]
   13d74:	strb	r2, [r3]
   13d78:	b	13800 <__assert_fail@plt+0x1fac>
   13d7c:	lsr	lr, r3, #12
   13d80:	uxtb	r2, r3
   13d84:	mov	r1, r6
   13d88:	mov	r3, #0
   13d8c:	mov	r0, r5
   13d90:	orr	lr, lr, ip, lsl #20
   13d94:	mov	r4, r3
   13d98:	bic	lr, lr, #255	; 0xff
   13d9c:	orr	r2, lr, r2
   13da0:	bl	12110 <__assert_fail@plt+0x8bc>
   13da4:	b	13800 <__assert_fail@plt+0x1fac>
   13da8:	mov	r1, r7
   13dac:	ldr	r0, [sp, #100]	; 0x64
   13db0:	bl	14dc4 <__assert_fail@plt+0x3570>
   13db4:	subs	r9, r0, #0
   13db8:	beq	13e60 <__assert_fail@plt+0x260c>
   13dbc:	bl	1319c <__assert_fail@plt+0x1948>
   13dc0:	subs	r8, r0, #0
   13dc4:	moveq	r4, r8
   13dc8:	movne	r4, #0
   13dcc:	moveq	r8, r9
   13dd0:	b	1398c <__assert_fail@plt+0x2138>
   13dd4:	bl	1a9e0 <__assert_fail@plt+0x918c>
   13dd8:	lsr	r4, r0, #31
   13ddc:	b	13c90 <__assert_fail@plt+0x243c>
   13de0:	mov	r1, r6
   13de4:	mov	r0, r5
   13de8:	movw	r2, #55212	; 0xd7ac
   13dec:	movt	r2, #1
   13df0:	bl	120c8 <__assert_fail@plt+0x874>
   13df4:	mov	r4, #0
   13df8:	b	13800 <__assert_fail@plt+0x1fac>
   13dfc:	bl	116b0 <__errno_location@plt>
   13e00:	ldr	r7, [r0]
   13e04:	mov	r2, #5
   13e08:	movw	r1, #56540	; 0xdcdc
   13e0c:	movt	r1, #1
   13e10:	mov	r0, #0
   13e14:	bl	114e8 <dcgettext@plt>
   13e18:	mov	r8, r0
   13e1c:	mov	r0, #4
   13e20:	ldr	r1, [sp, #100]	; 0x64
   13e24:	bl	1a5a4 <__assert_fail@plt+0x8d50>
   13e28:	mov	r3, r0
   13e2c:	mov	r2, r8
   13e30:	mov	r1, r7
   13e34:	mov	r0, #0
   13e38:	bl	115a8 <error@plt>
   13e3c:	movw	r3, #56536	; 0xdcd8
   13e40:	movt	r3, #1
   13e44:	ldrh	r3, [r3]
   13e48:	mov	r1, #0
   13e4c:	movw	r2, #56464	; 0xdc90
   13e50:	movt	r2, #1
   13e54:	str	r1, [sp, #56]	; 0x38
   13e58:	strh	r3, [r5, r6]
   13e5c:	b	13cbc <__assert_fail@plt+0x2468>
   13e60:	movw	r8, #56464	; 0xdc90
   13e64:	movt	r8, #1
   13e68:	mov	r4, #1
   13e6c:	b	1398c <__assert_fail@plt+0x2138>
   13e70:	bl	116b0 <__errno_location@plt>
   13e74:	ldr	r4, [r0]
   13e78:	mov	r2, #5
   13e7c:	movw	r1, #56512	; 0xdcc0
   13e80:	movt	r1, #1
   13e84:	mov	r0, r9
   13e88:	bl	114e8 <dcgettext@plt>
   13e8c:	mov	r7, r0
   13e90:	mov	r0, #4
   13e94:	ldr	r1, [sp, #100]	; 0x64
   13e98:	bl	1a5a4 <__assert_fail@plt+0x8d50>
   13e9c:	mov	r3, r0
   13ea0:	mov	r1, r4
   13ea4:	mov	r2, r7
   13ea8:	mov	r0, r9
   13eac:	movw	r8, #56464	; 0xdc90
   13eb0:	movt	r8, #1
   13eb4:	bl	115a8 <error@plt>
   13eb8:	mov	r4, #1
   13ebc:	b	1398c <__assert_fail@plt+0x2138>
   13ec0:	mov	r1, #63	; 0x3f
   13ec4:	mov	r4, #0
   13ec8:	bl	11758 <__overflow@plt>
   13ecc:	b	13800 <__assert_fail@plt+0x1fac>
   13ed0:	bl	116b0 <__errno_location@plt>
   13ed4:	ldr	r5, [r0]
   13ed8:	mov	r2, #5
   13edc:	mov	r0, r7
   13ee0:	movw	r1, #56468	; 0xdc94
   13ee4:	movt	r1, #1
   13ee8:	bl	114e8 <dcgettext@plt>
   13eec:	mov	r6, r0
   13ef0:	mov	r0, #4
   13ef4:	ldr	r1, [sp, #100]	; 0x64
   13ef8:	bl	1a5a4 <__assert_fail@plt+0x8d50>
   13efc:	mov	r3, r0
   13f00:	mov	r2, r6
   13f04:	mov	r1, r5
   13f08:	mov	r0, r7
   13f0c:	mov	r4, #1
   13f10:	bl	115a8 <error@plt>
   13f14:	b	13800 <__assert_fail@plt+0x1fac>
   13f18:	ldr	r1, [pc, #96]	; 13f80 <__assert_fail@plt+0x272c>
   13f1c:	strd	r4, [sp, #-16]!
   13f20:	mov	r5, r0
   13f24:	add	r0, r0, #1
   13f28:	str	r6, [sp, #8]
   13f2c:	str	lr, [sp, #12]
   13f30:	bl	11848 <strspn@plt>
   13f34:	add	r0, r0, #1
   13f38:	ldr	r1, [pc, #68]	; 13f84 <__assert_fail@plt+0x2730>
   13f3c:	add	r4, r5, r0
   13f40:	mov	r0, r4
   13f44:	bl	11848 <strspn@plt>
   13f48:	ldrb	r3, [r4, r0]
   13f4c:	add	r4, r4, r0
   13f50:	cmp	r3, #46	; 0x2e
   13f54:	bne	13f6c <__assert_fail@plt+0x2718>
   13f58:	add	r0, r4, #1
   13f5c:	ldr	r1, [pc, #32]	; 13f84 <__assert_fail@plt+0x2730>
   13f60:	bl	11848 <strspn@plt>
   13f64:	add	r0, r0, #1
   13f68:	add	r4, r4, r0
   13f6c:	sub	r0, r4, r5
   13f70:	ldrd	r4, [sp]
   13f74:	ldr	r6, [sp, #8]
   13f78:	add	sp, sp, #12
   13f7c:	pop	{pc}		; (ldr pc, [sp], #4)
   13f80:	andeq	sp, r1, r0, ror #8
   13f84:	andeq	sp, r1, r8, ror #8
   13f88:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13f8c:	mov	r4, r0
   13f90:	strd	r6, [sp, #8]
   13f94:	strd	r8, [sp, #16]
   13f98:	strd	sl, [sp, #24]
   13f9c:	str	lr, [sp, #32]
   13fa0:	sub	sp, sp, #36	; 0x24
   13fa4:	str	r3, [sp, #16]
   13fa8:	str	r1, [sp, #20]
   13fac:	str	r2, [sp, #24]
   13fb0:	bl	11674 <strlen@plt>
   13fb4:	add	r0, r0, #4
   13fb8:	bl	1b4ec <__assert_fail@plt+0x9c98>
   13fbc:	ldrb	fp, [r4]
   13fc0:	mov	r9, r0
   13fc4:	cmp	fp, #0
   13fc8:	beq	14584 <__assert_fail@plt+0x2d30>
   13fcc:	movw	r3, #14000	; 0x36b0
   13fd0:	movt	r3, #1
   13fd4:	movw	r6, #492	; 0x1ec
   13fd8:	movt	r6, #3
   13fdc:	movw	sl, #504	; 0x1f8
   13fe0:	movt	sl, #3
   13fe4:	str	r3, [sp, #28]
   13fe8:	mov	r8, #0
   13fec:	b	14028 <__assert_fail@plt+0x27d4>
   13ff0:	ldr	r0, [r6]
   13ff4:	add	r7, r4, #1
   13ff8:	ldr	r3, [r0, #20]
   13ffc:	ldr	r2, [r0, #24]
   14000:	cmp	r3, r2
   14004:	bcs	14458 <__assert_fail@plt+0x2c04>
   14008:	mov	r5, r4
   1400c:	add	r2, r3, #1
   14010:	mov	r4, r7
   14014:	str	r2, [r0, #20]
   14018:	strb	fp, [r3]
   1401c:	ldrb	fp, [r5, #1]
   14020:	cmp	fp, #0
   14024:	beq	140c8 <__assert_fail@plt+0x2874>
   14028:	cmp	fp, #37	; 0x25
   1402c:	beq	1410c <__assert_fail@plt+0x28b8>
   14030:	cmp	fp, #92	; 0x5c
   14034:	bne	13ff0 <__assert_fail@plt+0x279c>
   14038:	ldrb	r3, [sl, #117]	; 0x75
   1403c:	add	r5, r4, #1
   14040:	cmp	r3, #0
   14044:	beq	14090 <__assert_fail@plt+0x283c>
   14048:	ldrb	r7, [r4, #1]
   1404c:	sub	r1, r7, #48	; 0x30
   14050:	uxtb	r3, r1
   14054:	cmp	r3, #7
   14058:	bls	143f8 <__assert_fail@plt+0x2ba4>
   1405c:	cmp	r7, #120	; 0x78
   14060:	beq	14380 <__assert_fail@plt+0x2b2c>
   14064:	cmp	r7, #0
   14068:	bne	14218 <__assert_fail@plt+0x29c4>
   1406c:	mov	r2, #5
   14070:	movw	r1, #56604	; 0xdd1c
   14074:	movt	r1, #1
   14078:	mov	r0, r7
   1407c:	bl	114e8 <dcgettext@plt>
   14080:	mov	r2, r0
   14084:	mov	r1, r7
   14088:	mov	r0, r7
   1408c:	bl	115a8 <error@plt>
   14090:	ldr	r0, [r6]
   14094:	ldr	r3, [r0, #20]
   14098:	ldr	r2, [r0, #24]
   1409c:	cmp	r3, r2
   140a0:	bcs	14500 <__assert_fail@plt+0x2cac>
   140a4:	add	r2, r3, #1
   140a8:	mov	r1, r5
   140ac:	mov	r5, r4
   140b0:	mov	r4, r1
   140b4:	str	r2, [r0, #20]
   140b8:	strb	fp, [r3]
   140bc:	ldrb	fp, [r5, #1]
   140c0:	cmp	fp, #0
   140c4:	bne	14028 <__assert_fail@plt+0x27d4>
   140c8:	mov	r0, r9
   140cc:	bl	15b00 <__assert_fail@plt+0x42ac>
   140d0:	movw	r2, #492	; 0x1ec
   140d4:	movt	r2, #3
   140d8:	ldr	r1, [r2]
   140dc:	movw	r3, #388	; 0x184
   140e0:	movt	r3, #3
   140e4:	ldr	r0, [r3]
   140e8:	bl	11428 <fputs_unlocked@plt>
   140ec:	mov	r0, r8
   140f0:	add	sp, sp, #36	; 0x24
   140f4:	ldrd	r4, [sp]
   140f8:	ldrd	r6, [sp, #8]
   140fc:	ldrd	r8, [sp, #16]
   14100:	ldrd	sl, [sp, #24]
   14104:	add	sp, sp, #32
   14108:	pop	{pc}		; (ldr pc, [sp], #4)
   1410c:	mov	r0, r4
   14110:	bl	13f18 <__assert_fail@plt+0x26c4>
   14114:	ldrb	fp, [r4, r0]
   14118:	mov	r7, r0
   1411c:	mov	r2, r0
   14120:	mov	r1, r4
   14124:	mov	r0, r9
   14128:	bl	114b8 <memcpy@plt>
   1412c:	add	r5, r4, r7
   14130:	cmp	fp, #37	; 0x25
   14134:	beq	14148 <__assert_fail@plt+0x28f4>
   14138:	bhi	14184 <__assert_fail@plt+0x2930>
   1413c:	cmp	fp, #0
   14140:	subeq	r5, r5, #1
   14144:	bne	14194 <__assert_fail@plt+0x2940>
   14148:	cmp	r7, #1
   1414c:	bhi	1458c <__assert_fail@plt+0x2d38>
   14150:	ldr	r0, [r6]
   14154:	add	r4, r5, #1
   14158:	ldr	r3, [r0, #20]
   1415c:	ldr	r2, [r0, #24]
   14160:	cmp	r3, r2
   14164:	addcc	r1, r3, #1
   14168:	movcc	r2, #37	; 0x25
   1416c:	strcc	r1, [r0, #20]
   14170:	strbcc	r2, [r3]
   14174:	bcc	1401c <__assert_fail@plt+0x27c8>
   14178:	mov	r1, #37	; 0x25
   1417c:	bl	11758 <__overflow@plt>
   14180:	b	1401c <__assert_fail@plt+0x27c8>
   14184:	cmp	fp, #72	; 0x48
   14188:	beq	141d0 <__assert_fail@plt+0x297c>
   1418c:	cmp	fp, #76	; 0x4c
   14190:	beq	141d0 <__assert_fail@plt+0x297c>
   14194:	add	r4, r5, #1
   14198:	mov	r2, #0
   1419c:	ldr	r1, [sp, #20]
   141a0:	mov	r3, fp
   141a4:	mov	r0, r9
   141a8:	ldr	ip, [sp, #24]
   141ac:	stm	sp, {r1, ip}
   141b0:	mov	r1, r7
   141b4:	ldr	ip, [sp, #72]	; 0x48
   141b8:	str	ip, [sp, #8]
   141bc:	ldr	ip, [sp, #16]
   141c0:	blx	ip
   141c4:	orr	r8, r0, r8
   141c8:	uxtb	r8, r8
   141cc:	b	1401c <__assert_fail@plt+0x27c8>
   141d0:	ldr	r3, [sp, #16]
   141d4:	mov	r4, r5
   141d8:	ldr	r2, [sp, #28]
   141dc:	cmp	r3, r2
   141e0:	ldrb	r3, [r4, #1]!
   141e4:	movne	r2, #0
   141e8:	bne	1419c <__assert_fail@plt+0x2948>
   141ec:	cmp	r3, #114	; 0x72
   141f0:	cmpne	r3, #100	; 0x64
   141f4:	moveq	r2, #1
   141f8:	movne	r2, #0
   141fc:	bne	1419c <__assert_fail@plt+0x2948>
   14200:	add	r1, r5, #2
   14204:	mov	r2, fp
   14208:	mov	r5, r4
   1420c:	mov	fp, r3
   14210:	mov	r4, r1
   14214:	b	1419c <__assert_fail@plt+0x2948>
   14218:	sub	r3, r7, #34	; 0x22
   1421c:	mov	fp, r7
   14220:	cmp	r3, #84	; 0x54
   14224:	ldrls	pc, [pc, r3, lsl #2]
   14228:	b	143a0 <__assert_fail@plt+0x2b4c>
   1422c:	andeq	r4, r1, r8, asr #7
   14230:	andeq	r4, r1, r0, lsr #7
   14234:	andeq	r4, r1, r0, lsr #7
   14238:	andeq	r4, r1, r0, lsr #7
   1423c:	andeq	r4, r1, r0, lsr #7
   14240:	andeq	r4, r1, r0, lsr #7
   14244:	andeq	r4, r1, r0, lsr #7
   14248:	andeq	r4, r1, r0, lsr #7
   1424c:	andeq	r4, r1, r0, lsr #7
   14250:	andeq	r4, r1, r0, lsr #7
   14254:	andeq	r4, r1, r0, lsr #7
   14258:	andeq	r4, r1, r0, lsr #7
   1425c:	andeq	r4, r1, r0, lsr #7
   14260:	andeq	r4, r1, r0, lsr #7
   14264:	andeq	r4, r1, r0, lsr #7
   14268:	andeq	r4, r1, r0, lsr #7
   1426c:	andeq	r4, r1, r0, lsr #7
   14270:	andeq	r4, r1, r0, lsr #7
   14274:	andeq	r4, r1, r0, lsr #7
   14278:	andeq	r4, r1, r0, lsr #7
   1427c:	andeq	r4, r1, r0, lsr #7
   14280:	andeq	r4, r1, r0, lsr #7
   14284:	andeq	r4, r1, r0, lsr #7
   14288:	andeq	r4, r1, r0, lsr #7
   1428c:	andeq	r4, r1, r0, lsr #7
   14290:	andeq	r4, r1, r0, lsr #7
   14294:	andeq	r4, r1, r0, lsr #7
   14298:	andeq	r4, r1, r0, lsr #7
   1429c:	andeq	r4, r1, r0, lsr #7
   142a0:	andeq	r4, r1, r0, lsr #7
   142a4:	andeq	r4, r1, r0, lsr #7
   142a8:	andeq	r4, r1, r0, lsr #7
   142ac:	andeq	r4, r1, r0, lsr #7
   142b0:	andeq	r4, r1, r0, lsr #7
   142b4:	andeq	r4, r1, r0, lsr #7
   142b8:	andeq	r4, r1, r0, lsr #7
   142bc:	andeq	r4, r1, r0, lsr #7
   142c0:	andeq	r4, r1, r0, lsr #7
   142c4:	andeq	r4, r1, r0, lsr #7
   142c8:	andeq	r4, r1, r0, lsr #7
   142cc:	andeq	r4, r1, r0, lsr #7
   142d0:	andeq	r4, r1, r0, lsr #7
   142d4:	andeq	r4, r1, r0, lsr #7
   142d8:	andeq	r4, r1, r0, lsr #7
   142dc:	andeq	r4, r1, r0, lsr #7
   142e0:	andeq	r4, r1, r0, lsr #7
   142e4:	andeq	r4, r1, r0, lsr #7
   142e8:	andeq	r4, r1, r0, lsr #7
   142ec:	andeq	r4, r1, r0, lsr #7
   142f0:	andeq	r4, r1, r0, lsr #7
   142f4:	andeq	r4, r1, r0, lsr #7
   142f8:	andeq	r4, r1, r0, lsr #7
   142fc:	andeq	r4, r1, r0, lsr #7
   14300:	andeq	r4, r1, r0, lsr #7
   14304:	andeq	r4, r1, r0, lsr #7
   14308:	andeq	r4, r1, r0, lsr #7
   1430c:	andeq	r4, r1, r0, lsr #7
   14310:	andeq	r4, r1, r0, lsr #7
   14314:	andeq	r4, r1, r8, asr #7
   14318:	andeq	r4, r1, r0, lsr #7
   1431c:	andeq	r4, r1, r0, lsr #7
   14320:	andeq	r4, r1, r0, lsr #7
   14324:	andeq	r4, r1, r0, lsr #7
   14328:	andeq	r4, r1, r4, lsr #10
   1432c:	andeq	r4, r1, r8, lsl r5
   14330:	andeq	r4, r1, r0, lsr #7
   14334:	andeq	r4, r1, r0, lsr #7
   14338:	andeq	r4, r1, r0, lsr r5
   1433c:	andeq	r4, r1, ip, lsr r5
   14340:	andeq	r4, r1, r0, lsr #7
   14344:	andeq	r4, r1, r0, lsr #7
   14348:	andeq	r4, r1, r0, lsr #7
   1434c:	andeq	r4, r1, r0, lsr #7
   14350:	andeq	r4, r1, r0, lsr #7
   14354:	andeq	r4, r1, r0, lsr #7
   14358:	andeq	r4, r1, r0, lsr #7
   1435c:	andeq	r4, r1, r8, asr #10
   14360:	andeq	r4, r1, r0, lsr #7
   14364:	andeq	r4, r1, r0, lsr #7
   14368:	andeq	r4, r1, r0, lsr #7
   1436c:	andeq	r4, r1, r4, asr r5
   14370:	andeq	r4, r1, r0, lsr #7
   14374:	andeq	r4, r1, r0, ror #10
   14378:	andeq	r4, r1, r0, lsr #7
   1437c:	andeq	r4, r1, ip, ror #10
   14380:	bl	11644 <__ctype_b_loc@plt>
   14384:	ldrb	r1, [r4, #2]
   14388:	ldr	r3, [r0]
   1438c:	lsl	r2, r1, #1
   14390:	ldrh	r2, [r3, r2]
   14394:	tst	r2, #4096	; 0x1000
   14398:	bne	1446c <__assert_fail@plt+0x2c18>
   1439c:	mov	fp, r7
   143a0:	mov	r2, #5
   143a4:	movw	r1, #56640	; 0xdd40
   143a8:	movt	r1, #1
   143ac:	mov	r0, #0
   143b0:	bl	114e8 <dcgettext@plt>
   143b4:	mov	r1, #0
   143b8:	mov	r2, r0
   143bc:	mov	r3, r7
   143c0:	mov	r0, r1
   143c4:	bl	115a8 <error@plt>
   143c8:	ldr	r0, [r6]
   143cc:	add	r4, r4, #2
   143d0:	ldr	r3, [r0, #20]
   143d4:	ldr	r2, [r0, #24]
   143d8:	cmp	r3, r2
   143dc:	addcc	r2, r3, #1
   143e0:	strcc	r2, [r0, #20]
   143e4:	strbcc	r7, [r3]
   143e8:	bcc	1401c <__assert_fail@plt+0x27c8>
   143ec:	mov	r1, fp
   143f0:	bl	11758 <__overflow@plt>
   143f4:	b	1401c <__assert_fail@plt+0x27c8>
   143f8:	ldrb	r3, [r4, #2]
   143fc:	sub	r3, r3, #48	; 0x30
   14400:	uxtb	r2, r3
   14404:	cmp	r2, #7
   14408:	addhi	r4, r4, #2
   1440c:	bhi	14430 <__assert_fail@plt+0x2bdc>
   14410:	ldrb	r2, [r4, #3]
   14414:	add	r1, r3, r1, lsl #3
   14418:	sub	r3, r2, #48	; 0x30
   1441c:	uxtb	r2, r3
   14420:	cmp	r2, #7
   14424:	addls	r1, r3, r1, lsl #3
   14428:	addhi	r4, r4, #3
   1442c:	addls	r4, r4, #4
   14430:	ldr	r0, [r6]
   14434:	ldr	r3, [r0, #20]
   14438:	ldr	r2, [r0, #24]
   1443c:	cmp	r3, r2
   14440:	addcc	r2, r3, #1
   14444:	strcc	r2, [r0, #20]
   14448:	strbcc	r1, [r3]
   1444c:	bcs	14578 <__assert_fail@plt+0x2d24>
   14450:	sub	r5, r4, #1
   14454:	b	1401c <__assert_fail@plt+0x27c8>
   14458:	mov	r1, fp
   1445c:	mov	r5, r4
   14460:	bl	11758 <__overflow@plt>
   14464:	mov	r4, r7
   14468:	b	1401c <__assert_fail@plt+0x27c8>
   1446c:	sub	r2, r1, #97	; 0x61
   14470:	cmp	r2, #5
   14474:	subls	r1, r1, #87	; 0x57
   14478:	bls	1448c <__assert_fail@plt+0x2c38>
   1447c:	sub	r2, r1, #65	; 0x41
   14480:	cmp	r2, #5
   14484:	subls	r1, r1, #55	; 0x37
   14488:	subhi	r1, r1, #48	; 0x30
   1448c:	ldrb	r2, [r4, #3]
   14490:	lsl	r0, r2, #1
   14494:	ldrh	r3, [r3, r0]
   14498:	tst	r3, #4096	; 0x1000
   1449c:	addeq	r5, r4, #2
   144a0:	beq	144d0 <__assert_fail@plt+0x2c7c>
   144a4:	sub	r3, r2, #97	; 0x61
   144a8:	add	r5, r4, #3
   144ac:	lsl	r1, r1, #4
   144b0:	cmp	r3, #5
   144b4:	subls	r2, r2, #87	; 0x57
   144b8:	bls	144cc <__assert_fail@plt+0x2c78>
   144bc:	sub	r3, r2, #65	; 0x41
   144c0:	cmp	r3, #5
   144c4:	subls	r2, r2, #55	; 0x37
   144c8:	subhi	r2, r2, #48	; 0x30
   144cc:	add	r1, r1, r2
   144d0:	ldr	r0, [r6]
   144d4:	add	r4, r5, #1
   144d8:	ldr	r3, [r0, #20]
   144dc:	ldr	r2, [r0, #24]
   144e0:	cmp	r3, r2
   144e4:	addcc	r2, r3, #1
   144e8:	strcc	r2, [r0, #20]
   144ec:	strbcc	r1, [r3]
   144f0:	bcc	1401c <__assert_fail@plt+0x27c8>
   144f4:	uxtb	r1, r1
   144f8:	bl	11758 <__overflow@plt>
   144fc:	b	1401c <__assert_fail@plt+0x27c8>
   14500:	mov	r1, fp
   14504:	bl	11758 <__overflow@plt>
   14508:	mov	r3, r5
   1450c:	mov	r5, r4
   14510:	mov	r4, r3
   14514:	b	1401c <__assert_fail@plt+0x27c8>
   14518:	mov	fp, #8
   1451c:	mov	r7, fp
   14520:	b	143c8 <__assert_fail@plt+0x2b74>
   14524:	mov	fp, #7
   14528:	mov	r7, fp
   1452c:	b	143c8 <__assert_fail@plt+0x2b74>
   14530:	mov	fp, #27
   14534:	mov	r7, fp
   14538:	b	143c8 <__assert_fail@plt+0x2b74>
   1453c:	mov	fp, #12
   14540:	mov	r7, fp
   14544:	b	143c8 <__assert_fail@plt+0x2b74>
   14548:	mov	fp, #10
   1454c:	mov	r7, fp
   14550:	b	143c8 <__assert_fail@plt+0x2b74>
   14554:	mov	fp, #13
   14558:	mov	r7, fp
   1455c:	b	143c8 <__assert_fail@plt+0x2b74>
   14560:	mov	fp, #9
   14564:	mov	r7, fp
   14568:	b	143c8 <__assert_fail@plt+0x2b74>
   1456c:	mov	fp, #11
   14570:	mov	r7, fp
   14574:	b	143c8 <__assert_fail@plt+0x2b74>
   14578:	uxtb	r1, r1
   1457c:	bl	11758 <__overflow@plt>
   14580:	b	14450 <__assert_fail@plt+0x2bfc>
   14584:	mov	r8, fp
   14588:	b	140c8 <__assert_fail@plt+0x2874>
   1458c:	mov	r3, r9
   14590:	mov	r4, #0
   14594:	mov	r2, #5
   14598:	mov	r0, r4
   1459c:	movw	r1, #56580	; 0xdd04
   145a0:	movt	r1, #1
   145a4:	strb	fp, [r3, r7]!
   145a8:	strb	r4, [r3, #1]
   145ac:	bl	114e8 <dcgettext@plt>
   145b0:	mov	r5, r0
   145b4:	mov	r0, r9
   145b8:	bl	1a858 <__assert_fail@plt+0x9004>
   145bc:	mov	r3, r0
   145c0:	mov	r2, r5
   145c4:	mov	r1, r4
   145c8:	mov	r0, #1
   145cc:	bl	115a8 <error@plt>
   145d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   145d4:	mov	r5, r2
   145d8:	strd	r6, [sp, #8]
   145dc:	mov	r6, r1
   145e0:	movw	r1, #55212	; 0xd7ac
   145e4:	movt	r1, #1
   145e8:	strd	r8, [sp, #16]
   145ec:	mov	r8, r0
   145f0:	strd	sl, [sp, #24]
   145f4:	str	lr, [sp, #32]
   145f8:	sub	sp, sp, #396	; 0x18c
   145fc:	bl	11464 <strcmp@plt>
   14600:	add	r4, sp, #136	; 0x88
   14604:	subs	sl, r0, #0
   14608:	mov	r2, #256	; 0x100
   1460c:	mov	r0, r4
   14610:	bne	14828 <__assert_fail@plt+0x2fd4>
   14614:	mov	r1, sl
   14618:	mov	r7, #4096	; 0x1000
   1461c:	bl	116e0 <memset@plt>
   14620:	add	r3, sp, #32
   14624:	mvn	r2, #0
   14628:	movw	r1, #55136	; 0xd760
   1462c:	movt	r1, #1
   14630:	str	r3, [sp, #20]
   14634:	movw	r3, #504	; 0x1f8
   14638:	movt	r3, #3
   1463c:	str	r2, [sp, #24]
   14640:	str	r2, [sp, #28]
   14644:	ldrb	r2, [r3, #118]	; 0x76
   14648:	cmp	r2, #0
   1464c:	orrne	r7, r7, #16384	; 0x4000
   14650:	bne	14660 <__assert_fail@plt+0x2e0c>
   14654:	ldrb	r3, [r3, #119]	; 0x77
   14658:	cmp	r3, #0
   1465c:	orrne	r7, r7, #8192	; 0x2000
   14660:	ldrb	ip, [r6]
   14664:	cmp	ip, #0
   14668:	beq	148f8 <__assert_fail@plt+0x30a4>
   1466c:	movw	r3, #54228	; 0xd3d4
   14670:	movt	r3, #1
   14674:	mov	r9, r6
   14678:	mov	fp, #0
   1467c:	cmp	ip, #37	; 0x25
   14680:	mov	r0, r9
   14684:	mov	r2, r9
   14688:	bne	146c8 <__assert_fail@plt+0x2e74>
   1468c:	str	r1, [sp, #8]
   14690:	str	r3, [sp, #12]
   14694:	bl	13f18 <__assert_fail@plt+0x26c4>
   14698:	ldrb	ip, [r9, r0]
   1469c:	add	r2, r9, r0
   146a0:	ldr	r1, [sp, #8]
   146a4:	sub	r0, ip, #65	; 0x41
   146a8:	cmp	ip, #0
   146ac:	uxtb	r0, r0
   146b0:	beq	146d8 <__assert_fail@plt+0x2e84>
   146b4:	ldr	r3, [sp, #12]
   146b8:	cmp	r0, #57	; 0x39
   146bc:	add	ip, r3, r0, lsl #1
   146c0:	ldrhls	r0, [ip, #160]	; 0xa0
   146c4:	orrls	fp, fp, r0
   146c8:	ldrb	ip, [r2, #1]
   146cc:	add	r9, r2, #1
   146d0:	cmp	ip, #0
   146d4:	bne	1467c <__assert_fail@plt+0x2e28>
   146d8:	mov	r3, fp
   146dc:	mov	r0, sl
   146e0:	str	r4, [sp]
   146e4:	mov	r2, r7
   146e8:	bl	11734 <statx@plt>
   146ec:	subs	r1, r0, #0
   146f0:	blt	1487c <__assert_fail@plt+0x3028>
   146f4:	add	r3, sp, #268	; 0x10c
   146f8:	ldr	r9, [sp, #264]	; 0x108
   146fc:	mov	r2, #65280	; 0xff00
   14700:	movt	r2, #15
   14704:	ldm	r3, {r3, sl, lr}
   14708:	mov	r0, #61440	; 0xf000
   1470c:	movt	r0, #65535	; 0xffff
   14710:	mov	ip, #0
   14714:	movt	ip, #65520	; 0xfff0
   14718:	and	r7, r2, sl, lsl #8
   1471c:	and	sl, sl, r0
   14720:	uxtb	fp, lr
   14724:	and	r2, r2, r9, lsl #8
   14728:	and	r9, r9, r0
   1472c:	ldrh	r0, [r4, #28]
   14730:	orr	sl, sl, lr, lsr #20
   14734:	orr	fp, fp, r7
   14738:	and	lr, ip, lr, lsl #12
   1473c:	ldr	r7, [sp, #140]	; 0x8c
   14740:	and	ip, ip, r3, lsl #12
   14744:	orr	r9, r9, r3, lsr #20
   14748:	uxtb	r3, r3
   1474c:	orr	lr, lr, fp
   14750:	orr	r3, r3, r2
   14754:	ldr	fp, [sp, #152]	; 0x98
   14758:	orr	ip, ip, r3
   1475c:	str	lr, [sp, #32]
   14760:	ldr	r3, [sp, #156]	; 0x9c
   14764:	str	r0, [sp, #48]	; 0x30
   14768:	and	r0, r0, #45056	; 0xb000
   1476c:	ldr	r2, [sp, #208]	; 0xd0
   14770:	cmp	r0, #8192	; 0x2000
   14774:	movne	r5, r6
   14778:	str	sl, [sp, #36]	; 0x24
   1477c:	ldr	r0, [sp, #160]	; 0xa0
   14780:	str	r7, [sp, #88]	; 0x58
   14784:	str	r3, [sp, #56]	; 0x38
   14788:	ldr	r3, [sp, #256]	; 0x100
   1478c:	str	fp, [sp, #52]	; 0x34
   14790:	str	r2, [sp, #108]	; 0x6c
   14794:	str	r0, [sp, #60]	; 0x3c
   14798:	ldrd	r6, [r4, #40]	; 0x28
   1479c:	str	ip, [sp, #64]	; 0x40
   147a0:	str	r3, [sp, #116]	; 0x74
   147a4:	ldrd	r2, [r4, #48]	; 0x30
   147a8:	str	r9, [sp, #68]	; 0x44
   147ac:	ldr	lr, [r4, #64]	; 0x40
   147b0:	strd	r6, [sp, #80]	; 0x50
   147b4:	ldr	r0, [r4, #112]	; 0x70
   147b8:	strd	r2, [sp, #96]	; 0x60
   147bc:	ldrd	r2, [r4, #32]
   147c0:	str	lr, [sp, #104]	; 0x68
   147c4:	str	r0, [sp, #112]	; 0x70
   147c8:	strd	r2, [sp, #128]	; 0x80
   147cc:	ldr	r0, [sp, #240]	; 0xf0
   147d0:	ldr	r2, [sp, #136]	; 0x88
   147d4:	ldr	r3, [r4, #96]	; 0x60
   147d8:	tst	r2, #2048	; 0x800
   147dc:	str	r3, [sp, #120]	; 0x78
   147e0:	str	r0, [sp, #124]	; 0x7c
   147e4:	bne	14868 <__assert_fail@plt+0x3014>
   147e8:	add	ip, sp, #20
   147ec:	mov	r2, r8
   147f0:	mov	r0, r5
   147f4:	movw	r3, #14000	; 0x36b0
   147f8:	movt	r3, #1
   147fc:	str	ip, [sp]
   14800:	bl	13f88 <__assert_fail@plt+0x2734>
   14804:	eor	r0, r0, #1
   14808:	uxtb	r0, r0
   1480c:	add	sp, sp, #396	; 0x18c
   14810:	ldrd	r4, [sp]
   14814:	ldrd	r6, [sp, #8]
   14818:	ldrd	r8, [sp, #16]
   1481c:	ldrd	sl, [sp, #24]
   14820:	add	sp, sp, #32
   14824:	pop	{pc}		; (ldr pc, [sp], #4)
   14828:	mov	r1, #0
   1482c:	mvn	sl, #99	; 0x63
   14830:	bl	116e0 <memset@plt>
   14834:	movw	r3, #504	; 0x1f8
   14838:	movt	r3, #3
   1483c:	ldrb	r0, [r3, #116]	; 0x74
   14840:	mvn	r2, #0
   14844:	add	ip, sp, #32
   14848:	mov	r1, r8
   1484c:	str	ip, [sp, #20]
   14850:	str	r2, [sp, #24]
   14854:	str	r2, [sp, #28]
   14858:	cmp	r0, #0
   1485c:	movne	r7, #0
   14860:	moveq	r7, #256	; 0x100
   14864:	b	14644 <__assert_fail@plt+0x2df0>
   14868:	ldr	r3, [r4, #80]	; 0x50
   1486c:	ldr	r2, [sp, #224]	; 0xe0
   14870:	str	r3, [sp, #24]
   14874:	str	r2, [sp, #28]
   14878:	b	147e8 <__assert_fail@plt+0x2f94>
   1487c:	bl	116b0 <__errno_location@plt>
   14880:	ands	r7, r7, #4096	; 0x1000
   14884:	ldr	r4, [r0]
   14888:	beq	148b8 <__assert_fail@plt+0x3064>
   1488c:	mov	r2, #5
   14890:	movw	r1, #56676	; 0xdd64
   14894:	movt	r1, #1
   14898:	mov	r0, #0
   1489c:	bl	114e8 <dcgettext@plt>
   148a0:	mov	r2, r0
   148a4:	mov	r1, r4
   148a8:	mov	r0, #0
   148ac:	bl	115a8 <error@plt>
   148b0:	mov	r0, #0
   148b4:	b	1480c <__assert_fail@plt+0x2fb8>
   148b8:	mov	r2, #5
   148bc:	movw	r1, #56704	; 0xdd80
   148c0:	movt	r1, #1
   148c4:	mov	r0, r7
   148c8:	bl	114e8 <dcgettext@plt>
   148cc:	mov	r5, r0
   148d0:	mov	r1, r8
   148d4:	mov	r0, #4
   148d8:	bl	1a5a4 <__assert_fail@plt+0x8d50>
   148dc:	mov	r3, r0
   148e0:	mov	r2, r5
   148e4:	mov	r0, r7
   148e8:	mov	r1, r4
   148ec:	bl	115a8 <error@plt>
   148f0:	mov	r0, r7
   148f4:	b	1480c <__assert_fail@plt+0x2fb8>
   148f8:	mov	fp, ip
   148fc:	b	146d8 <__assert_fail@plt+0x2e84>
   14900:	subs	r6, r0, #0
   14904:	str	r7, [sp, #-8]!
   14908:	str	lr, [sp, #4]
   1490c:	sub	sp, sp, #56	; 0x38
   14910:	beq	14958 <__assert_fail@plt+0x3104>
   14914:	movw	r3, #488	; 0x1e8
   14918:	movt	r3, #3
   1491c:	ldr	r4, [r3]
   14920:	mov	r2, #5
   14924:	movw	r1, #56728	; 0xdd98
   14928:	movt	r1, #1
   1492c:	mov	r0, #0
   14930:	bl	114e8 <dcgettext@plt>
   14934:	movw	r3, #632	; 0x278
   14938:	movt	r3, #3
   1493c:	mov	r2, r0
   14940:	mov	r1, #1
   14944:	ldr	r3, [r3]
   14948:	mov	r0, r4
   1494c:	bl	11704 <__fprintf_chk@plt>
   14950:	mov	r0, r6
   14954:	bl	1165c <exit@plt>
   14958:	mov	r2, #5
   1495c:	movw	r1, #56768	; 0xddc0
   14960:	movt	r1, #1
   14964:	movw	r7, #492	; 0x1ec
   14968:	movt	r7, #3
   1496c:	bl	114e8 <dcgettext@plt>
   14970:	movw	r3, #632	; 0x278
   14974:	movt	r3, #3
   14978:	mov	r1, r0
   1497c:	mov	r0, #1
   14980:	ldr	r2, [r3]
   14984:	bl	116ec <__printf_chk@plt>
   14988:	mov	r2, #5
   1498c:	movw	r1, #56800	; 0xdde0
   14990:	movt	r1, #1
   14994:	mov	r0, r6
   14998:	bl	114e8 <dcgettext@plt>
   1499c:	ldr	r1, [r7]
   149a0:	bl	11428 <fputs_unlocked@plt>
   149a4:	mov	r2, #5
   149a8:	movw	r1, #56840	; 0xde08
   149ac:	movt	r1, #1
   149b0:	mov	r0, r6
   149b4:	bl	114e8 <dcgettext@plt>
   149b8:	ldr	r1, [r7]
   149bc:	bl	11428 <fputs_unlocked@plt>
   149c0:	mov	r2, #5
   149c4:	movw	r1, #56916	; 0xde54
   149c8:	movt	r1, #1
   149cc:	mov	r0, r6
   149d0:	bl	114e8 <dcgettext@plt>
   149d4:	ldr	r1, [r7]
   149d8:	bl	11428 <fputs_unlocked@plt>
   149dc:	mov	r2, #5
   149e0:	movw	r1, #57028	; 0xdec4
   149e4:	movt	r1, #1
   149e8:	mov	r0, r6
   149ec:	bl	114e8 <dcgettext@plt>
   149f0:	ldr	r1, [r7]
   149f4:	bl	11428 <fputs_unlocked@plt>
   149f8:	mov	r2, #5
   149fc:	movw	r1, #57164	; 0xdf4c
   14a00:	movt	r1, #1
   14a04:	mov	r0, r6
   14a08:	bl	114e8 <dcgettext@plt>
   14a0c:	ldr	r1, [r7]
   14a10:	bl	11428 <fputs_unlocked@plt>
   14a14:	mov	r2, #5
   14a18:	movw	r1, #57584	; 0xe0f0
   14a1c:	movt	r1, #1
   14a20:	mov	r0, r6
   14a24:	bl	114e8 <dcgettext@plt>
   14a28:	ldr	r1, [r7]
   14a2c:	bl	11428 <fputs_unlocked@plt>
   14a30:	mov	r2, #5
   14a34:	movw	r1, #57632	; 0xe120
   14a38:	movt	r1, #1
   14a3c:	mov	r0, r6
   14a40:	bl	114e8 <dcgettext@plt>
   14a44:	ldr	r1, [r7]
   14a48:	bl	11428 <fputs_unlocked@plt>
   14a4c:	mov	r2, #5
   14a50:	movw	r1, #57688	; 0xe158
   14a54:	movt	r1, #1
   14a58:	mov	r0, r6
   14a5c:	bl	114e8 <dcgettext@plt>
   14a60:	ldr	r1, [r7]
   14a64:	bl	11428 <fputs_unlocked@plt>
   14a68:	mov	r2, #5
   14a6c:	movw	r1, #57936	; 0xe250
   14a70:	movt	r1, #1
   14a74:	mov	r0, r6
   14a78:	bl	114e8 <dcgettext@plt>
   14a7c:	ldr	r1, [r7]
   14a80:	bl	11428 <fputs_unlocked@plt>
   14a84:	mov	r2, #5
   14a88:	movw	r1, #58264	; 0xe398
   14a8c:	movt	r1, #1
   14a90:	mov	r0, r6
   14a94:	bl	114e8 <dcgettext@plt>
   14a98:	ldr	r1, [r7]
   14a9c:	bl	11428 <fputs_unlocked@plt>
   14aa0:	mov	r2, #5
   14aa4:	movw	r1, #58512	; 0xe490
   14aa8:	movt	r1, #1
   14aac:	mov	r0, r6
   14ab0:	bl	114e8 <dcgettext@plt>
   14ab4:	ldr	r1, [r7]
   14ab8:	bl	11428 <fputs_unlocked@plt>
   14abc:	mov	r2, #5
   14ac0:	movw	r1, #59104	; 0xe6e0
   14ac4:	movt	r1, #1
   14ac8:	mov	r0, r6
   14acc:	bl	114e8 <dcgettext@plt>
   14ad0:	ldr	r1, [r7]
   14ad4:	bl	11428 <fputs_unlocked@plt>
   14ad8:	mov	r2, #5
   14adc:	movw	r1, #59584	; 0xe8c0
   14ae0:	movt	r1, #1
   14ae4:	mov	r0, r6
   14ae8:	bl	114e8 <dcgettext@plt>
   14aec:	ldr	r1, [r7]
   14af0:	bl	11428 <fputs_unlocked@plt>
   14af4:	mov	r2, #5
   14af8:	movw	r1, #59824	; 0xe9b0
   14afc:	movt	r1, #1
   14b00:	mov	r0, r6
   14b04:	bl	114e8 <dcgettext@plt>
   14b08:	ldr	r1, [r7]
   14b0c:	bl	11428 <fputs_unlocked@plt>
   14b10:	mov	r2, #5
   14b14:	movw	r1, #60076	; 0xeaac
   14b18:	movt	r1, #1
   14b1c:	mov	r0, r6
   14b20:	bl	114e8 <dcgettext@plt>
   14b24:	mov	r1, r0
   14b28:	ldr	r2, [pc, #652]	; 14dbc <__assert_fail@plt+0x3568>
   14b2c:	mov	r0, #1
   14b30:	bl	116ec <__printf_chk@plt>
   14b34:	mov	r2, #5
   14b38:	movw	r1, #60132	; 0xeae4
   14b3c:	movt	r1, #1
   14b40:	mov	r0, r6
   14b44:	bl	114e8 <dcgettext@plt>
   14b48:	mov	r1, r0
   14b4c:	movw	r2, #54228	; 0xd3d4
   14b50:	movt	r2, #1
   14b54:	mov	r0, #1
   14b58:	bl	116ec <__printf_chk@plt>
   14b5c:	mov	r2, #5
   14b60:	movw	r1, #60200	; 0xeb28
   14b64:	movt	r1, #1
   14b68:	mov	r0, r6
   14b6c:	bl	114e8 <dcgettext@plt>
   14b70:	mov	r1, r0
   14b74:	movw	r2, #56720	; 0xdd90
   14b78:	movt	r2, #1
   14b7c:	mov	r0, #1
   14b80:	bl	116ec <__printf_chk@plt>
   14b84:	ldr	lr, [pc, #564]	; 14dc0 <__assert_fail@plt+0x356c>
   14b88:	ldr	ip, [lr]
   14b8c:	ldr	r4, [lr, #4]
   14b90:	ldrd	r8, [lr, #8]
   14b94:	subs	r1, ip, #0
   14b98:	str	ip, [sp]
   14b9c:	ldrd	r2, [lr, #16]
   14ba0:	str	r4, [sp, #4]
   14ba4:	ldrd	r4, [lr, #24]
   14ba8:	strd	r8, [sp, #8]
   14bac:	ldrd	r8, [lr, #32]
   14bb0:	strd	r2, [sp, #16]
   14bb4:	ldrd	r2, [lr, #40]	; 0x28
   14bb8:	strd	r4, [sp, #24]
   14bbc:	ldrd	r4, [lr, #48]	; 0x30
   14bc0:	strd	r8, [sp, #32]
   14bc4:	strd	r2, [sp, #40]	; 0x28
   14bc8:	strd	r4, [sp, #48]	; 0x30
   14bcc:	movwne	r5, #56720	; 0xdd90
   14bd0:	mov	r4, sp
   14bd4:	movtne	r5, #1
   14bd8:	bne	14cd0 <__assert_fail@plt+0x347c>
   14bdc:	ldr	r4, [r4, #4]
   14be0:	movw	r1, #60392	; 0xebe8
   14be4:	movt	r1, #1
   14be8:	mov	r2, #5
   14bec:	cmp	r4, #0
   14bf0:	beq	14ce4 <__assert_fail@plt+0x3490>
   14bf4:	mov	r0, #0
   14bf8:	bl	114e8 <dcgettext@plt>
   14bfc:	mov	r1, r0
   14c00:	movw	r3, #60416	; 0xec00
   14c04:	movt	r3, #1
   14c08:	movw	r2, #60456	; 0xec28
   14c0c:	movt	r2, #1
   14c10:	mov	r0, #1
   14c14:	bl	116ec <__printf_chk@plt>
   14c18:	mov	r1, #0
   14c1c:	mov	r0, #5
   14c20:	bl	11764 <setlocale@plt>
   14c24:	cmp	r0, #0
   14c28:	movweq	r5, #56720	; 0xdd90
   14c2c:	movteq	r5, #1
   14c30:	beq	14c54 <__assert_fail@plt+0x3400>
   14c34:	movw	r1, #60472	; 0xec38
   14c38:	movt	r1, #1
   14c3c:	mov	r2, #3
   14c40:	movw	r5, #56720	; 0xdd90
   14c44:	movt	r5, #1
   14c48:	bl	11818 <strncmp@plt>
   14c4c:	cmp	r0, #0
   14c50:	bne	14d9c <__assert_fail@plt+0x3548>
   14c54:	mov	r2, #5
   14c58:	movw	r1, #60548	; 0xec84
   14c5c:	movt	r1, #1
   14c60:	mov	r0, #0
   14c64:	bl	114e8 <dcgettext@plt>
   14c68:	mov	r1, r0
   14c6c:	movw	r3, #56720	; 0xdd90
   14c70:	movt	r3, #1
   14c74:	movw	r2, #60416	; 0xec00
   14c78:	movt	r2, #1
   14c7c:	mov	r0, #1
   14c80:	bl	116ec <__printf_chk@plt>
   14c84:	mov	r2, #5
   14c88:	movw	r1, #60576	; 0xeca0
   14c8c:	movt	r1, #1
   14c90:	mov	r0, #0
   14c94:	bl	114e8 <dcgettext@plt>
   14c98:	movw	r2, #60916	; 0xedf4
   14c9c:	movt	r2, #1
   14ca0:	cmp	r4, r5
   14ca4:	movw	r3, #55136	; 0xd760
   14ca8:	movt	r3, #1
   14cac:	mov	r1, r0
   14cb0:	moveq	r3, r2
   14cb4:	mov	r2, r4
   14cb8:	mov	r0, #1
   14cbc:	bl	116ec <__printf_chk@plt>
   14cc0:	b	14950 <__assert_fail@plt+0x30fc>
   14cc4:	ldr	r1, [r4, #8]!
   14cc8:	cmp	r1, #0
   14ccc:	beq	14bdc <__assert_fail@plt+0x3388>
   14cd0:	mov	r0, r5
   14cd4:	bl	11464 <strcmp@plt>
   14cd8:	cmp	r0, #0
   14cdc:	bne	14cc4 <__assert_fail@plt+0x3470>
   14ce0:	b	14bdc <__assert_fail@plt+0x3388>
   14ce4:	mov	r0, r4
   14ce8:	bl	114e8 <dcgettext@plt>
   14cec:	mov	r1, r0
   14cf0:	movw	r3, #60416	; 0xec00
   14cf4:	movt	r3, #1
   14cf8:	movw	r2, #60456	; 0xec28
   14cfc:	movt	r2, #1
   14d00:	mov	r0, #1
   14d04:	bl	116ec <__printf_chk@plt>
   14d08:	mov	r1, r4
   14d0c:	mov	r0, #5
   14d10:	bl	11764 <setlocale@plt>
   14d14:	cmp	r0, #0
   14d18:	beq	14d34 <__assert_fail@plt+0x34e0>
   14d1c:	movw	r1, #60472	; 0xec38
   14d20:	movt	r1, #1
   14d24:	mov	r2, #3
   14d28:	bl	11818 <strncmp@plt>
   14d2c:	cmp	r0, #0
   14d30:	bne	14d90 <__assert_fail@plt+0x353c>
   14d34:	mov	r2, #5
   14d38:	movw	r1, #60548	; 0xec84
   14d3c:	movt	r1, #1
   14d40:	mov	r0, #0
   14d44:	bl	114e8 <dcgettext@plt>
   14d48:	mov	r1, r0
   14d4c:	movw	r3, #56720	; 0xdd90
   14d50:	movt	r3, #1
   14d54:	movw	r2, #60416	; 0xec00
   14d58:	movt	r2, #1
   14d5c:	mov	r0, #1
   14d60:	bl	116ec <__printf_chk@plt>
   14d64:	movw	r1, #60576	; 0xeca0
   14d68:	movt	r1, #1
   14d6c:	mov	r2, #5
   14d70:	mov	r0, #0
   14d74:	bl	114e8 <dcgettext@plt>
   14d78:	movw	r4, #56720	; 0xdd90
   14d7c:	movt	r4, #1
   14d80:	movw	r3, #60916	; 0xedf4
   14d84:	movt	r3, #1
   14d88:	mov	r1, r0
   14d8c:	b	14cb4 <__assert_fail@plt+0x3460>
   14d90:	movw	r5, #56720	; 0xdd90
   14d94:	movt	r5, #1
   14d98:	mov	r4, r5
   14d9c:	mov	r2, #5
   14da0:	movw	r1, #60476	; 0xec3c
   14da4:	movt	r1, #1
   14da8:	mov	r0, #0
   14dac:	bl	114e8 <dcgettext@plt>
   14db0:	ldr	r1, [r7]
   14db4:	bl	11428 <fputs_unlocked@plt>
   14db8:	b	14c54 <__assert_fail@plt+0x3400>
   14dbc:	strdeq	sp, [r1], -r8
   14dc0:	andeq	sp, r1, r8, ror #9
   14dc4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14dc8:	strd	r6, [sp, #8]
   14dcc:	mov	r7, r1
   14dd0:	strd	r8, [sp, #16]
   14dd4:	mov	r8, r0
   14dd8:	str	fp, [sp, #24]
   14ddc:	add	fp, sp, #28
   14de0:	str	lr, [sp, #28]
   14de4:	sub	sp, sp, #216	; 0xd8
   14de8:	sub	r0, fp, #244	; 0xf4
   14dec:	bl	1a870 <__assert_fail@plt+0x901c>
   14df0:	mov	r4, r0
   14df4:	bl	116b0 <__errno_location@plt>
   14df8:	cmp	r4, #0
   14dfc:	mov	r6, r0
   14e00:	bne	15030 <__assert_fail@plt+0x37dc>
   14e04:	ldr	r3, [r7, #16]
   14e08:	and	r3, r3, #61440	; 0xf000
   14e0c:	cmp	r3, #16384	; 0x4000
   14e10:	beq	14f78 <__assert_fail@plt+0x3724>
   14e14:	mov	r0, r8
   14e18:	bl	1578c <__assert_fail@plt+0x3f38>
   14e1c:	mov	r5, r0
   14e20:	bl	11674 <strlen@plt>
   14e24:	add	r3, r0, #8
   14e28:	add	r2, r0, #1
   14e2c:	bic	r3, r3, #7
   14e30:	mov	r1, r5
   14e34:	sub	sp, sp, r3
   14e38:	mov	r0, sp
   14e3c:	bl	114b8 <memcpy@plt>
   14e40:	mov	r7, r0
   14e44:	mov	r0, r5
   14e48:	bl	15b00 <__assert_fail@plt+0x42ac>
   14e4c:	mov	r0, r7
   14e50:	bl	11524 <chdir@plt>
   14e54:	cmp	r0, #0
   14e58:	blt	15060 <__assert_fail@plt+0x380c>
   14e5c:	sub	r5, fp, #236	; 0xec
   14e60:	movw	r1, #60628	; 0xecd4
   14e64:	movt	r1, #1
   14e68:	mov	r2, r5
   14e6c:	mov	r0, #3
   14e70:	bl	11800 <__xstat64@plt>
   14e74:	cmp	r0, #0
   14e78:	blt	14fe0 <__assert_fail@plt+0x378c>
   14e7c:	movw	r4, #61216	; 0xef20
   14e80:	movt	r4, #1
   14e84:	b	14ed0 <__assert_fail@plt+0x367c>
   14e88:	ldrd	r2, [fp, #-236]	; 0xffffff14
   14e8c:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   14e90:	cmp	r1, r3
   14e94:	cmpeq	r0, r2
   14e98:	bne	14f30 <__assert_fail@plt+0x36dc>
   14e9c:	ldrd	r2, [fp, #-140]	; 0xffffff74
   14ea0:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   14ea4:	cmp	r1, r3
   14ea8:	cmpeq	r0, r2
   14eac:	beq	14f30 <__assert_fail@plt+0x36dc>
   14eb0:	mov	r0, r4
   14eb4:	bl	11524 <chdir@plt>
   14eb8:	cmp	r0, #0
   14ebc:	blt	15024 <__assert_fail@plt+0x37d0>
   14ec0:	mov	r2, #104	; 0x68
   14ec4:	sub	r1, fp, #132	; 0x84
   14ec8:	mov	r0, r5
   14ecc:	bl	114b8 <memcpy@plt>
   14ed0:	sub	r2, fp, #132	; 0x84
   14ed4:	mov	r1, r4
   14ed8:	mov	r0, #3
   14edc:	bl	11800 <__xstat64@plt>
   14ee0:	cmp	r0, #0
   14ee4:	bge	14e88 <__assert_fail@plt+0x3634>
   14ee8:	movw	r1, #61220	; 0xef24
   14eec:	movt	r1, #1
   14ef0:	ldr	r4, [r6]
   14ef4:	mov	r2, #5
   14ef8:	mov	r0, #0
   14efc:	bl	114e8 <dcgettext@plt>
   14f00:	mov	r5, r0
   14f04:	movw	r1, #61216	; 0xef20
   14f08:	movt	r1, #1
   14f0c:	mov	r0, #4
   14f10:	bl	1a5a4 <__assert_fail@plt+0x8d50>
   14f14:	mov	r3, r0
   14f18:	mov	r2, r5
   14f1c:	mov	r1, r4
   14f20:	mov	r0, #0
   14f24:	bl	115a8 <error@plt>
   14f28:	mov	r5, #0
   14f2c:	b	14f38 <__assert_fail@plt+0x36e4>
   14f30:	bl	1b9a8 <__assert_fail@plt+0xa154>
   14f34:	mov	r5, r0
   14f38:	sub	r0, fp, #244	; 0xf4
   14f3c:	ldr	r4, [r6]
   14f40:	bl	1a8e4 <__assert_fail@plt+0x9090>
   14f44:	cmp	r0, #0
   14f48:	bne	150a4 <__assert_fail@plt+0x3850>
   14f4c:	sub	r0, fp, #244	; 0xf4
   14f50:	bl	1a900 <__assert_fail@plt+0x90ac>
   14f54:	str	r4, [r6]
   14f58:	mov	r0, r5
   14f5c:	sub	sp, fp, #28
   14f60:	ldrd	r4, [sp]
   14f64:	ldrd	r6, [sp, #8]
   14f68:	ldrd	r8, [sp, #16]
   14f6c:	ldr	fp, [sp, #24]
   14f70:	add	sp, sp, #28
   14f74:	pop	{pc}		; (ldr pc, [sp], #4)
   14f78:	sub	r5, fp, #236	; 0xec
   14f7c:	mov	r1, r7
   14f80:	mov	r2, #104	; 0x68
   14f84:	mov	r0, r5
   14f88:	bl	114b8 <memcpy@plt>
   14f8c:	mov	r0, r8
   14f90:	bl	11524 <chdir@plt>
   14f94:	cmp	r0, #0
   14f98:	bge	14e7c <__assert_fail@plt+0x3628>
   14f9c:	ldr	r6, [r6]
   14fa0:	mov	r2, #5
   14fa4:	mov	r0, r4
   14fa8:	movw	r1, #61144	; 0xeed8
   14fac:	movt	r1, #1
   14fb0:	bl	114e8 <dcgettext@plt>
   14fb4:	mov	r7, r0
   14fb8:	mov	r1, r8
   14fbc:	mov	r0, #4
   14fc0:	mov	r5, r4
   14fc4:	bl	1a5a4 <__assert_fail@plt+0x8d50>
   14fc8:	mov	r3, r0
   14fcc:	mov	r2, r7
   14fd0:	mov	r1, r6
   14fd4:	mov	r0, r4
   14fd8:	bl	115a8 <error@plt>
   14fdc:	b	14f58 <__assert_fail@plt+0x3704>
   14fe0:	ldr	r8, [r6]
   14fe4:	mov	r2, #5
   14fe8:	mov	r0, r4
   14fec:	movw	r1, #61176	; 0xeef8
   14ff0:	movt	r1, #1
   14ff4:	bl	114e8 <dcgettext@plt>
   14ff8:	mov	r9, r0
   14ffc:	mov	r1, r7
   15000:	mov	r0, #4
   15004:	mov	r5, r4
   15008:	bl	1a5a4 <__assert_fail@plt+0x8d50>
   1500c:	mov	r3, r0
   15010:	mov	r2, r9
   15014:	mov	r1, r8
   15018:	mov	r0, r4
   1501c:	bl	115a8 <error@plt>
   15020:	b	14f38 <__assert_fail@plt+0x36e4>
   15024:	movw	r1, #61144	; 0xeed8
   15028:	movt	r1, #1
   1502c:	b	14ef0 <__assert_fail@plt+0x369c>
   15030:	ldr	r4, [r6]
   15034:	mov	r2, #5
   15038:	movw	r1, #61112	; 0xeeb8
   1503c:	movt	r1, #1
   15040:	mov	r0, #0
   15044:	bl	114e8 <dcgettext@plt>
   15048:	mov	r2, r0
   1504c:	mov	r0, #0
   15050:	mov	r5, r0
   15054:	mov	r1, r4
   15058:	bl	115a8 <error@plt>
   1505c:	b	14f58 <__assert_fail@plt+0x3704>
   15060:	ldr	r6, [r6]
   15064:	mov	r2, #5
   15068:	mov	r0, r4
   1506c:	movw	r1, #61144	; 0xeed8
   15070:	movt	r1, #1
   15074:	bl	114e8 <dcgettext@plt>
   15078:	mov	r8, r0
   1507c:	mov	r1, r7
   15080:	mov	r0, #4
   15084:	mov	r5, r4
   15088:	bl	1a5a4 <__assert_fail@plt+0x8d50>
   1508c:	mov	r3, r0
   15090:	mov	r2, r8
   15094:	mov	r1, r6
   15098:	mov	r0, r4
   1509c:	bl	115a8 <error@plt>
   150a0:	b	14f58 <__assert_fail@plt+0x3704>
   150a4:	ldr	r4, [r6]
   150a8:	mov	r2, #5
   150ac:	movw	r1, #61236	; 0xef34
   150b0:	movt	r1, #1
   150b4:	mov	r0, #0
   150b8:	bl	114e8 <dcgettext@plt>
   150bc:	mov	r2, r0
   150c0:	mov	r0, #1
   150c4:	mov	r1, r4
   150c8:	bl	115a8 <error@plt>
   150cc:	cmp	r1, #0
   150d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   150d4:	moveq	r4, #128	; 0x80
   150d8:	strd	r6, [sp, #8]
   150dc:	movne	r7, #1
   150e0:	moveq	r7, #0
   150e4:	str	r8, [sp, #16]
   150e8:	mov	r8, r0
   150ec:	str	lr, [sp, #20]
   150f0:	sub	sp, sp, #128	; 0x80
   150f4:	beq	15104 <__assert_fail@plt+0x38b0>
   150f8:	cmp	r1, #1024	; 0x400
   150fc:	addls	r4, r1, #1
   15100:	movwhi	r4, #1025	; 0x401
   15104:	cmp	r4, #128	; 0x80
   15108:	moveq	r0, r7
   1510c:	orrne	r0, r7, #1
   15110:	mov	r6, sp
   15114:	cmp	r0, #0
   15118:	mov	r5, r0
   1511c:	bne	15174 <__assert_fail@plt+0x3920>
   15120:	mov	r2, r4
   15124:	mov	r1, r6
   15128:	mov	r0, r8
   1512c:	bl	11548 <readlink@plt>
   15130:	subs	r3, r0, #0
   15134:	mov	r0, r5
   15138:	blt	15198 <__assert_fail@plt+0x3944>
   1513c:	cmp	r4, r3
   15140:	bhi	151bc <__assert_fail@plt+0x3968>
   15144:	bl	15b00 <__assert_fail@plt+0x42ac>
   15148:	cmn	r4, #-1073741823	; 0xc0000001
   1514c:	lslls	r4, r4, #1
   15150:	bls	15104 <__assert_fail@plt+0x38b0>
   15154:	cmn	r4, #-2147483646	; 0x80000002
   15158:	mvn	r4, #-2147483648	; 0x80000000
   1515c:	bls	15104 <__assert_fail@plt+0x38b0>
   15160:	bl	116b0 <__errno_location@plt>
   15164:	mov	r3, #12
   15168:	mov	r5, #0
   1516c:	str	r3, [r0]
   15170:	b	151a0 <__assert_fail@plt+0x394c>
   15174:	mov	r0, r4
   15178:	bl	1ba8c <__assert_fail@plt+0xa238>
   1517c:	subs	r6, r0, #0
   15180:	mov	r5, r6
   15184:	bne	15120 <__assert_fail@plt+0x38cc>
   15188:	bl	116b0 <__errno_location@plt>
   1518c:	mov	r3, #12
   15190:	str	r3, [r0]
   15194:	b	151a0 <__assert_fail@plt+0x394c>
   15198:	mov	r5, #0
   1519c:	bl	15b00 <__assert_fail@plt+0x42ac>
   151a0:	mov	r0, r5
   151a4:	add	sp, sp, #128	; 0x80
   151a8:	ldrd	r4, [sp]
   151ac:	ldrd	r6, [sp, #8]
   151b0:	ldr	r8, [sp, #16]
   151b4:	add	sp, sp, #20
   151b8:	pop	{pc}		; (ldr pc, [sp], #4)
   151bc:	mov	r2, #0
   151c0:	add	r7, r3, #1
   151c4:	cmp	r5, r2
   151c8:	strb	r2, [r6, r3]
   151cc:	beq	151ec <__assert_fail@plt+0x3998>
   151d0:	cmp	r4, r7
   151d4:	bls	151a0 <__assert_fail@plt+0x394c>
   151d8:	mov	r1, r7
   151dc:	bl	1bac8 <__assert_fail@plt+0xa274>
   151e0:	cmp	r0, #0
   151e4:	movne	r5, r0
   151e8:	b	151a0 <__assert_fail@plt+0x394c>
   151ec:	mov	r0, r7
   151f0:	bl	1ba8c <__assert_fail@plt+0xa238>
   151f4:	subs	r5, r0, #0
   151f8:	beq	151a0 <__assert_fail@plt+0x394c>
   151fc:	mov	r2, r7
   15200:	mov	r1, r6
   15204:	bl	114b8 <memcpy@plt>
   15208:	mov	r5, r0
   1520c:	b	151a0 <__assert_fail@plt+0x394c>
   15210:	mov	r0, #1
   15214:	b	14900 <__assert_fail@plt+0x30ac>
   15218:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1521c:	mov	r5, r1
   15220:	mov	r4, r2
   15224:	strd	r6, [sp, #8]
   15228:	mov	r7, r3
   1522c:	strd	r8, [sp, #16]
   15230:	strd	sl, [sp, #24]
   15234:	mov	sl, r0
   15238:	str	lr, [sp, #32]
   1523c:	sub	sp, sp, #12
   15240:	str	r2, [sp]
   15244:	bl	11674 <strlen@plt>
   15248:	ldr	fp, [r5]
   1524c:	cmp	fp, #0
   15250:	beq	15320 <__assert_fail@plt+0x3acc>
   15254:	mov	r6, #0
   15258:	mov	r8, r0
   1525c:	mvn	r9, #0
   15260:	str	r6, [sp, #4]
   15264:	b	15290 <__assert_fail@plt+0x3a3c>
   15268:	bl	114d0 <memcmp@plt>
   1526c:	ldr	r3, [sp, #4]
   15270:	cmp	r0, #0
   15274:	movne	r3, #1
   15278:	str	r3, [sp, #4]
   1527c:	ldr	fp, [r5, #4]!
   15280:	add	r6, r6, #1
   15284:	add	r4, r4, r7
   15288:	cmp	fp, #0
   1528c:	beq	152ec <__assert_fail@plt+0x3a98>
   15290:	mov	r2, r8
   15294:	mov	r1, sl
   15298:	mov	r0, fp
   1529c:	bl	11818 <strncmp@plt>
   152a0:	cmp	r0, #0
   152a4:	mov	r0, fp
   152a8:	bne	1527c <__assert_fail@plt+0x3a28>
   152ac:	bl	11674 <strlen@plt>
   152b0:	ldr	r3, [sp]
   152b4:	cmp	r0, r8
   152b8:	mov	r2, r7
   152bc:	mov	r1, r4
   152c0:	mla	r0, r7, r9, r3
   152c4:	beq	15318 <__assert_fail@plt+0x3ac4>
   152c8:	cmn	r9, #1
   152cc:	moveq	r9, r6
   152d0:	beq	1527c <__assert_fail@plt+0x3a28>
   152d4:	ldr	r3, [sp]
   152d8:	cmp	r3, #0
   152dc:	bne	15268 <__assert_fail@plt+0x3a14>
   152e0:	mov	r3, #1
   152e4:	str	r3, [sp, #4]
   152e8:	b	1527c <__assert_fail@plt+0x3a28>
   152ec:	ldr	r3, [sp, #4]
   152f0:	cmp	r3, #0
   152f4:	mvnne	r9, #1
   152f8:	mov	r0, r9
   152fc:	add	sp, sp, #12
   15300:	ldrd	r4, [sp]
   15304:	ldrd	r6, [sp, #8]
   15308:	ldrd	r8, [sp, #16]
   1530c:	ldrd	sl, [sp, #24]
   15310:	add	sp, sp, #32
   15314:	pop	{pc}		; (ldr pc, [sp], #4)
   15318:	mov	r9, r6
   1531c:	b	152f8 <__assert_fail@plt+0x3aa4>
   15320:	mvn	r9, #0
   15324:	b	152f8 <__assert_fail@plt+0x3aa4>
   15328:	strd	r4, [sp, #-16]!
   1532c:	str	r6, [sp, #8]
   15330:	mov	r6, r0
   15334:	ldr	r0, [r1]
   15338:	str	lr, [sp, #12]
   1533c:	cmp	r0, #0
   15340:	beq	15384 <__assert_fail@plt+0x3b30>
   15344:	mov	r4, r1
   15348:	mov	r5, #0
   1534c:	b	15360 <__assert_fail@plt+0x3b0c>
   15350:	ldr	r0, [r4, #4]!
   15354:	add	r5, r5, #1
   15358:	cmp	r0, #0
   1535c:	beq	15384 <__assert_fail@plt+0x3b30>
   15360:	mov	r1, r6
   15364:	bl	11464 <strcmp@plt>
   15368:	cmp	r0, #0
   1536c:	bne	15350 <__assert_fail@plt+0x3afc>
   15370:	mov	r0, r5
   15374:	ldrd	r4, [sp]
   15378:	ldr	r6, [sp, #8]
   1537c:	add	sp, sp, #12
   15380:	pop	{pc}		; (ldr pc, [sp], #4)
   15384:	ldrd	r4, [sp]
   15388:	mvn	r0, #0
   1538c:	ldr	r6, [sp, #8]
   15390:	add	sp, sp, #12
   15394:	pop	{pc}		; (ldr pc, [sp], #4)
   15398:	cmn	r2, #1
   1539c:	strd	r4, [sp, #-16]!
   153a0:	mov	r5, r1
   153a4:	movweq	r1, #61300	; 0xef74
   153a8:	movwne	r1, #61328	; 0xef90
   153ac:	str	r6, [sp, #8]
   153b0:	movteq	r1, #1
   153b4:	movtne	r1, #1
   153b8:	str	lr, [sp, #12]
   153bc:	mov	r6, r0
   153c0:	sub	sp, sp, #8
   153c4:	mov	r2, #5
   153c8:	mov	r0, #0
   153cc:	bl	114e8 <dcgettext@plt>
   153d0:	mov	r4, r0
   153d4:	mov	r2, r5
   153d8:	mov	r1, #8
   153dc:	mov	r0, #0
   153e0:	bl	1a518 <__assert_fail@plt+0x8cc4>
   153e4:	mov	r5, r0
   153e8:	mov	r1, r6
   153ec:	mov	r0, #1
   153f0:	bl	1a848 <__assert_fail@plt+0x8ff4>
   153f4:	mov	r1, #0
   153f8:	mov	r3, r5
   153fc:	str	r0, [sp]
   15400:	mov	r2, r4
   15404:	mov	r0, r1
   15408:	bl	115a8 <error@plt>
   1540c:	add	sp, sp, #8
   15410:	ldrd	r4, [sp]
   15414:	ldr	r6, [sp, #8]
   15418:	add	sp, sp, #12
   1541c:	pop	{pc}		; (ldr pc, [sp], #4)
   15420:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15424:	mov	r4, r1
   15428:	movw	r1, #61360	; 0xefb0
   1542c:	movt	r1, #1
   15430:	strd	r6, [sp, #8]
   15434:	mov	r6, r0
   15438:	mov	r7, r2
   1543c:	mov	r0, #0
   15440:	strd	r8, [sp, #16]
   15444:	mov	r2, #5
   15448:	strd	sl, [sp, #24]
   1544c:	movw	sl, #488	; 0x1e8
   15450:	movt	sl, #3
   15454:	str	lr, [sp, #32]
   15458:	sub	sp, sp, #12
   1545c:	bl	114e8 <dcgettext@plt>
   15460:	ldr	r1, [sl]
   15464:	bl	11428 <fputs_unlocked@plt>
   15468:	ldr	fp, [r6]
   1546c:	cmp	fp, #0
   15470:	beq	15510 <__assert_fail@plt+0x3cbc>
   15474:	movw	r3, #61384	; 0xefc8
   15478:	movt	r3, #1
   1547c:	mov	r9, #0
   15480:	str	r3, [sp]
   15484:	movw	r3, #61392	; 0xefd0
   15488:	movt	r3, #1
   1548c:	mov	r5, r9
   15490:	str	r3, [sp, #4]
   15494:	b	154cc <__assert_fail@plt+0x3c78>
   15498:	mov	r0, fp
   1549c:	mov	r9, r4
   154a0:	bl	1a858 <__assert_fail@plt+0x9004>
   154a4:	mov	r3, r0
   154a8:	mov	r1, #1
   154ac:	ldr	r2, [sp]
   154b0:	mov	r0, r8
   154b4:	bl	11704 <__fprintf_chk@plt>
   154b8:	ldr	fp, [r6, #4]!
   154bc:	add	r5, r5, #1
   154c0:	add	r4, r4, r7
   154c4:	cmp	fp, #0
   154c8:	beq	15510 <__assert_fail@plt+0x3cbc>
   154cc:	cmp	r5, #0
   154d0:	mov	r1, r4
   154d4:	ldr	r8, [sl]
   154d8:	mov	r2, r7
   154dc:	mov	r0, r9
   154e0:	beq	15498 <__assert_fail@plt+0x3c44>
   154e4:	bl	114d0 <memcmp@plt>
   154e8:	cmp	r0, #0
   154ec:	bne	15498 <__assert_fail@plt+0x3c44>
   154f0:	mov	r0, fp
   154f4:	bl	1a858 <__assert_fail@plt+0x9004>
   154f8:	mov	r3, r0
   154fc:	mov	r1, #1
   15500:	ldr	r2, [sp, #4]
   15504:	mov	r0, r8
   15508:	bl	11704 <__fprintf_chk@plt>
   1550c:	b	154b8 <__assert_fail@plt+0x3c64>
   15510:	ldr	r0, [sl]
   15514:	ldr	r3, [r0, #20]
   15518:	ldr	r2, [r0, #24]
   1551c:	cmp	r3, r2
   15520:	bcs	15550 <__assert_fail@plt+0x3cfc>
   15524:	add	r1, r3, #1
   15528:	mov	r2, #10
   1552c:	str	r1, [r0, #20]
   15530:	strb	r2, [r3]
   15534:	add	sp, sp, #12
   15538:	ldrd	r4, [sp]
   1553c:	ldrd	r6, [sp, #8]
   15540:	ldrd	r8, [sp, #16]
   15544:	ldrd	sl, [sp, #24]
   15548:	add	sp, sp, #32
   1554c:	pop	{pc}		; (ldr pc, [sp], #4)
   15550:	mov	r1, #10
   15554:	add	sp, sp, #12
   15558:	ldrd	r4, [sp]
   1555c:	ldrd	r6, [sp, #8]
   15560:	ldrd	r8, [sp, #16]
   15564:	ldrd	sl, [sp, #24]
   15568:	ldr	lr, [sp, #32]
   1556c:	add	sp, sp, #36	; 0x24
   15570:	b	11758 <__overflow@plt>
   15574:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15578:	mov	r5, r1
   1557c:	mov	r4, r2
   15580:	ldrb	ip, [sp, #32]
   15584:	strd	r6, [sp, #8]
   15588:	mov	r7, r0
   1558c:	mov	r6, r3
   15590:	str	r8, [sp, #16]
   15594:	str	lr, [sp, #20]
   15598:	cmp	ip, #0
   1559c:	beq	155d0 <__assert_fail@plt+0x3d7c>
   155a0:	mov	r2, r3
   155a4:	mov	r1, r4
   155a8:	ldr	r3, [sp, #24]
   155ac:	mov	r0, r5
   155b0:	bl	15218 <__assert_fail@plt+0x39c4>
   155b4:	cmp	r0, #0
   155b8:	blt	155e0 <__assert_fail@plt+0x3d8c>
   155bc:	ldrd	r4, [sp]
   155c0:	ldrd	r6, [sp, #8]
   155c4:	ldr	r8, [sp, #16]
   155c8:	add	sp, sp, #20
   155cc:	pop	{pc}		; (ldr pc, [sp], #4)
   155d0:	mov	r1, r2
   155d4:	mov	r0, r5
   155d8:	bl	15328 <__assert_fail@plt+0x3ad4>
   155dc:	b	155b4 <__assert_fail@plt+0x3d60>
   155e0:	mov	r2, r0
   155e4:	mov	r1, r5
   155e8:	mov	r0, r7
   155ec:	bl	15398 <__assert_fail@plt+0x3b44>
   155f0:	mov	r0, r4
   155f4:	mov	r1, r6
   155f8:	ldr	r2, [sp, #24]
   155fc:	bl	15420 <__assert_fail@plt+0x3bcc>
   15600:	ldr	r3, [sp, #28]
   15604:	blx	r3
   15608:	mvn	r0, #0
   1560c:	b	155bc <__assert_fail@plt+0x3d68>
   15610:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15614:	strd	r6, [sp, #8]
   15618:	ldr	r7, [r1]
   1561c:	str	r8, [sp, #16]
   15620:	str	lr, [sp, #20]
   15624:	cmp	r7, #0
   15628:	beq	15668 <__assert_fail@plt+0x3e14>
   1562c:	mov	r6, r3
   15630:	mov	r8, r0
   15634:	mov	r4, r2
   15638:	mov	r5, r1
   1563c:	b	1564c <__assert_fail@plt+0x3df8>
   15640:	ldr	r7, [r5, #4]!
   15644:	cmp	r7, #0
   15648:	beq	15668 <__assert_fail@plt+0x3e14>
   1564c:	mov	r1, r4
   15650:	mov	r2, r6
   15654:	mov	r0, r8
   15658:	add	r4, r4, r6
   1565c:	bl	114d0 <memcmp@plt>
   15660:	cmp	r0, #0
   15664:	bne	15640 <__assert_fail@plt+0x3dec>
   15668:	mov	r0, r7
   1566c:	ldrd	r4, [sp]
   15670:	ldrd	r6, [sp, #8]
   15674:	ldr	r8, [sp, #16]
   15678:	add	sp, sp, #20
   1567c:	pop	{pc}		; (ldr pc, [sp], #4)
   15680:	movw	r3, #624	; 0x270
   15684:	movt	r3, #3
   15688:	str	r0, [r3]
   1568c:	bx	lr
   15690:	movw	r3, #624	; 0x270
   15694:	movt	r3, #3
   15698:	strb	r0, [r3, #4]
   1569c:	bx	lr
   156a0:	movw	r3, #492	; 0x1ec
   156a4:	movt	r3, #3
   156a8:	strd	r4, [sp, #-16]!
   156ac:	ldr	r0, [r3]
   156b0:	str	r6, [sp, #8]
   156b4:	str	lr, [sp, #12]
   156b8:	sub	sp, sp, #8
   156bc:	bl	1c874 <__assert_fail@plt+0xb020>
   156c0:	cmp	r0, #0
   156c4:	beq	156f0 <__assert_fail@plt+0x3e9c>
   156c8:	movw	r4, #624	; 0x270
   156cc:	movt	r4, #3
   156d0:	ldrb	r6, [r4, #4]
   156d4:	bl	116b0 <__errno_location@plt>
   156d8:	mov	r5, r0
   156dc:	cmp	r6, #0
   156e0:	beq	1571c <__assert_fail@plt+0x3ec8>
   156e4:	ldr	r3, [r0]
   156e8:	cmp	r3, #32
   156ec:	bne	1571c <__assert_fail@plt+0x3ec8>
   156f0:	movw	r3, #488	; 0x1e8
   156f4:	movt	r3, #3
   156f8:	ldr	r0, [r3]
   156fc:	bl	1c874 <__assert_fail@plt+0xb020>
   15700:	cmp	r0, #0
   15704:	bne	15764 <__assert_fail@plt+0x3f10>
   15708:	add	sp, sp, #8
   1570c:	ldrd	r4, [sp]
   15710:	ldr	r6, [sp, #8]
   15714:	add	sp, sp, #12
   15718:	pop	{pc}		; (ldr pc, [sp], #4)
   1571c:	movw	r1, #61400	; 0xefd8
   15720:	movt	r1, #1
   15724:	mov	r2, #5
   15728:	mov	r0, #0
   1572c:	bl	114e8 <dcgettext@plt>
   15730:	mov	r6, r0
   15734:	ldr	r0, [r4]
   15738:	cmp	r0, #0
   1573c:	beq	15774 <__assert_fail@plt+0x3f20>
   15740:	ldr	r4, [r5]
   15744:	bl	1a66c <__assert_fail@plt+0x8e18>
   15748:	mov	r3, r0
   1574c:	movw	r2, #61412	; 0xefe4
   15750:	movt	r2, #1
   15754:	mov	r0, #0
   15758:	str	r6, [sp]
   1575c:	mov	r1, r4
   15760:	bl	115a8 <error@plt>
   15764:	movw	r3, #400	; 0x190
   15768:	movt	r3, #3
   1576c:	ldr	r0, [r3]
   15770:	bl	114ac <_exit@plt>
   15774:	mov	r3, r6
   15778:	movw	r2, #60128	; 0xeae0
   1577c:	movt	r2, #1
   15780:	ldr	r1, [r5]
   15784:	bl	115a8 <error@plt>
   15788:	b	15764 <__assert_fail@plt+0x3f10>
   1578c:	str	r4, [sp, #-8]!
   15790:	str	lr, [sp, #4]
   15794:	bl	15830 <__assert_fail@plt+0x3fdc>
   15798:	cmp	r0, #0
   1579c:	beq	157ac <__assert_fail@plt+0x3f58>
   157a0:	ldr	r4, [sp]
   157a4:	add	sp, sp, #4
   157a8:	pop	{pc}		; (ldr pc, [sp], #4)
   157ac:	bl	1b964 <__assert_fail@plt+0xa110>
   157b0:	strd	r4, [sp, #-16]!
   157b4:	mov	r4, r0
   157b8:	str	r6, [sp, #8]
   157bc:	str	lr, [sp, #12]
   157c0:	ldrb	ip, [r0]
   157c4:	sub	r5, ip, #47	; 0x2f
   157c8:	clz	r5, r5
   157cc:	bl	1c490 <__assert_fail@plt+0xac3c>
   157d0:	lsr	r5, r5, #5
   157d4:	sub	r0, r0, r4
   157d8:	cmp	r0, r5
   157dc:	bls	15820 <__assert_fail@plt+0x3fcc>
   157e0:	add	r3, r4, r0
   157e4:	ldrb	r3, [r3, #-1]
   157e8:	cmp	r3, #47	; 0x2f
   157ec:	bne	15820 <__assert_fail@plt+0x3fcc>
   157f0:	sub	r0, r0, #2
   157f4:	sub	ip, r4, #1
   157f8:	add	r3, r4, r0
   157fc:	add	ip, ip, r5
   15800:	rsb	r2, r4, #1
   15804:	b	15814 <__assert_fail@plt+0x3fc0>
   15808:	ldrb	r1, [r3], #-1
   1580c:	cmp	r1, #47	; 0x2f
   15810:	bne	15820 <__assert_fail@plt+0x3fcc>
   15814:	cmp	r3, ip
   15818:	add	r0, r2, r3
   1581c:	bne	15808 <__assert_fail@plt+0x3fb4>
   15820:	ldrd	r4, [sp]
   15824:	ldr	r6, [sp, #8]
   15828:	add	sp, sp, #12
   1582c:	pop	{pc}		; (ldr pc, [sp], #4)
   15830:	strd	r4, [sp, #-16]!
   15834:	str	r6, [sp, #8]
   15838:	mov	r6, r0
   1583c:	str	lr, [sp, #12]
   15840:	bl	157b0 <__assert_fail@plt+0x3f5c>
   15844:	add	r3, r0, #1
   15848:	mov	r4, r0
   1584c:	cmp	r0, #0
   15850:	movne	r0, r3
   15854:	addeq	r0, r3, #1
   15858:	bl	1ba8c <__assert_fail@plt+0xa238>
   1585c:	subs	r5, r0, #0
   15860:	beq	15880 <__assert_fail@plt+0x402c>
   15864:	mov	r1, r6
   15868:	mov	r2, r4
   1586c:	bl	114b8 <memcpy@plt>
   15870:	cmp	r4, #0
   15874:	beq	15894 <__assert_fail@plt+0x4040>
   15878:	mov	r3, #0
   1587c:	strb	r3, [r5, r4]
   15880:	mov	r0, r5
   15884:	ldrd	r4, [sp]
   15888:	ldr	r6, [sp, #8]
   1588c:	add	sp, sp, #12
   15890:	pop	{pc}		; (ldr pc, [sp], #4)
   15894:	mov	r3, #46	; 0x2e
   15898:	mov	r4, #1
   1589c:	strb	r3, [r5]
   158a0:	b	15878 <__assert_fail@plt+0x4024>
   158a4:	ldr	r3, [r0, #16]
   158a8:	and	r3, r3, #61440	; 0xf000
   158ac:	cmp	r3, #32768	; 0x8000
   158b0:	beq	158f8 <__assert_fail@plt+0x40a4>
   158b4:	cmp	r3, #16384	; 0x4000
   158b8:	beq	15940 <__assert_fail@plt+0x40ec>
   158bc:	cmp	r3, #40960	; 0xa000
   158c0:	beq	15968 <__assert_fail@plt+0x4114>
   158c4:	cmp	r3, #24576	; 0x6000
   158c8:	beq	1597c <__assert_fail@plt+0x4128>
   158cc:	cmp	r3, #8192	; 0x2000
   158d0:	beq	1592c <__assert_fail@plt+0x40d8>
   158d4:	cmp	r3, #4096	; 0x1000
   158d8:	beq	15990 <__assert_fail@plt+0x413c>
   158dc:	cmp	r3, #49152	; 0xc000
   158e0:	beq	15954 <__assert_fail@plt+0x4100>
   158e4:	movw	r1, #61532	; 0xf05c
   158e8:	movt	r1, #1
   158ec:	mov	r2, #5
   158f0:	mov	r0, #0
   158f4:	b	114e8 <dcgettext@plt>
   158f8:	ldrd	r2, [r0, #48]	; 0x30
   158fc:	orrs	r3, r2, r3
   15900:	bne	15918 <__assert_fail@plt+0x40c4>
   15904:	movw	r1, #61420	; 0xefec
   15908:	movt	r1, #1
   1590c:	mov	r2, #5
   15910:	mov	r0, #0
   15914:	b	114e8 <dcgettext@plt>
   15918:	movw	r1, #61440	; 0xf000
   1591c:	movt	r1, #1
   15920:	mov	r2, #5
   15924:	mov	r0, #0
   15928:	b	114e8 <dcgettext@plt>
   1592c:	movw	r1, #61492	; 0xf034
   15930:	movt	r1, #1
   15934:	mov	r2, #5
   15938:	mov	r0, #0
   1593c:	b	114e8 <dcgettext@plt>
   15940:	movw	r1, #61272	; 0xef58
   15944:	movt	r1, #1
   15948:	mov	r2, #5
   1594c:	mov	r0, #0
   15950:	b	114e8 <dcgettext@plt>
   15954:	movw	r1, #61524	; 0xf054
   15958:	movt	r1, #1
   1595c:	mov	r2, #5
   15960:	mov	r0, #0
   15964:	b	114e8 <dcgettext@plt>
   15968:	movw	r1, #61456	; 0xf010
   1596c:	movt	r1, #1
   15970:	mov	r2, #5
   15974:	mov	r0, #0
   15978:	b	114e8 <dcgettext@plt>
   1597c:	movw	r1, #61472	; 0xf020
   15980:	movt	r1, #1
   15984:	mov	r2, #5
   15988:	mov	r0, #0
   1598c:	b	114e8 <dcgettext@plt>
   15990:	movw	r1, #61516	; 0xf04c
   15994:	movt	r1, #1
   15998:	mov	r2, #5
   1599c:	mov	r0, #0
   159a0:	b	114e8 <dcgettext@plt>
   159a4:	and	r3, r0, #61440	; 0xf000
   159a8:	cmp	r3, #32768	; 0x8000
   159ac:	moveq	r2, #45	; 0x2d
   159b0:	beq	159fc <__assert_fail@plt+0x41a8>
   159b4:	cmp	r3, #16384	; 0x4000
   159b8:	moveq	r2, #100	; 0x64
   159bc:	beq	159fc <__assert_fail@plt+0x41a8>
   159c0:	cmp	r3, #24576	; 0x6000
   159c4:	moveq	r2, #98	; 0x62
   159c8:	beq	159fc <__assert_fail@plt+0x41a8>
   159cc:	cmp	r3, #8192	; 0x2000
   159d0:	moveq	r2, #99	; 0x63
   159d4:	beq	159fc <__assert_fail@plt+0x41a8>
   159d8:	cmp	r3, #40960	; 0xa000
   159dc:	moveq	r2, #108	; 0x6c
   159e0:	beq	159fc <__assert_fail@plt+0x41a8>
   159e4:	cmp	r3, #4096	; 0x1000
   159e8:	moveq	r2, #112	; 0x70
   159ec:	beq	159fc <__assert_fail@plt+0x41a8>
   159f0:	cmp	r3, #49152	; 0xc000
   159f4:	moveq	r2, #115	; 0x73
   159f8:	movne	r2, #63	; 0x3f
   159fc:	tst	r0, #256	; 0x100
   15a00:	strb	r2, [r1]
   15a04:	and	r3, r0, #64	; 0x40
   15a08:	movne	ip, #114	; 0x72
   15a0c:	moveq	ip, #45	; 0x2d
   15a10:	tst	r0, #128	; 0x80
   15a14:	movne	r2, #119	; 0x77
   15a18:	moveq	r2, #45	; 0x2d
   15a1c:	strb	ip, [r1, #1]
   15a20:	tst	r0, #2048	; 0x800
   15a24:	strb	r2, [r1, #2]
   15a28:	beq	15ac8 <__assert_fail@plt+0x4274>
   15a2c:	cmp	r3, #0
   15a30:	movne	r2, #115	; 0x73
   15a34:	moveq	r2, #83	; 0x53
   15a38:	tst	r0, #32
   15a3c:	strb	r2, [r1, #3]
   15a40:	and	r3, r0, #8
   15a44:	movne	ip, #114	; 0x72
   15a48:	moveq	ip, #45	; 0x2d
   15a4c:	tst	r0, #16
   15a50:	movne	r2, #119	; 0x77
   15a54:	moveq	r2, #45	; 0x2d
   15a58:	strb	ip, [r1, #4]
   15a5c:	tst	r0, #1024	; 0x400
   15a60:	strb	r2, [r1, #5]
   15a64:	beq	15ad8 <__assert_fail@plt+0x4284>
   15a68:	cmp	r3, #0
   15a6c:	movne	r2, #115	; 0x73
   15a70:	moveq	r2, #83	; 0x53
   15a74:	tst	r0, #4
   15a78:	strb	r2, [r1, #6]
   15a7c:	and	r3, r0, #1
   15a80:	movne	ip, #114	; 0x72
   15a84:	moveq	ip, #45	; 0x2d
   15a88:	tst	r0, #2
   15a8c:	movne	r2, #119	; 0x77
   15a90:	moveq	r2, #45	; 0x2d
   15a94:	strb	ip, [r1, #7]
   15a98:	tst	r0, #512	; 0x200
   15a9c:	strb	r2, [r1, #8]
   15aa0:	beq	15ae8 <__assert_fail@plt+0x4294>
   15aa4:	cmp	r3, #0
   15aa8:	movne	r0, #116	; 0x74
   15aac:	moveq	r0, #84	; 0x54
   15ab0:	mov	r2, #32
   15ab4:	mov	r3, #0
   15ab8:	strb	r0, [r1, #9]
   15abc:	strb	r2, [r1, #10]
   15ac0:	strb	r3, [r1, #11]
   15ac4:	bx	lr
   15ac8:	cmp	r3, #0
   15acc:	movne	r2, #120	; 0x78
   15ad0:	moveq	r2, #45	; 0x2d
   15ad4:	b	15a38 <__assert_fail@plt+0x41e4>
   15ad8:	cmp	r3, #0
   15adc:	movne	r2, #120	; 0x78
   15ae0:	moveq	r2, #45	; 0x2d
   15ae4:	b	15a74 <__assert_fail@plt+0x4220>
   15ae8:	cmp	r3, #0
   15aec:	movne	r0, #120	; 0x78
   15af0:	moveq	r0, #45	; 0x2d
   15af4:	b	15ab0 <__assert_fail@plt+0x425c>
   15af8:	ldr	r0, [r0, #16]
   15afc:	b	159a4 <__assert_fail@plt+0x4150>
   15b00:	strd	r4, [sp, #-12]!
   15b04:	mov	r5, r0
   15b08:	str	lr, [sp, #8]
   15b0c:	sub	sp, sp, #12
   15b10:	bl	116b0 <__errno_location@plt>
   15b14:	mov	r4, r0
   15b18:	mov	r2, #0
   15b1c:	ldr	r3, [r4]
   15b20:	mov	r0, r5
   15b24:	str	r2, [r4]
   15b28:	str	r3, [sp]
   15b2c:	str	r3, [sp, #4]
   15b30:	bl	114a0 <free@plt>
   15b34:	ldr	r3, [r4]
   15b38:	add	r2, sp, #8
   15b3c:	clz	r3, r3
   15b40:	lsr	r3, r3, #5
   15b44:	add	r3, r2, r3, lsl #2
   15b48:	ldr	r3, [r3, #-8]
   15b4c:	str	r3, [r4]
   15b50:	add	sp, sp, #12
   15b54:	ldrd	r4, [sp]
   15b58:	add	sp, sp, #8
   15b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b60:	mov	r3, #0
   15b64:	cmp	r0, #0
   15b68:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15b6c:	mov	r5, r1
   15b70:	sbcs	r1, r1, #0
   15b74:	strd	r6, [sp, #8]
   15b78:	mov	r4, r0
   15b7c:	add	r6, r2, #20
   15b80:	str	r8, [sp, #16]
   15b84:	str	lr, [sp, #20]
   15b88:	strb	r3, [r2, #20]
   15b8c:	blt	15bec <__assert_fail@plt+0x4398>
   15b90:	mov	r0, r4
   15b94:	mov	r1, r5
   15b98:	mov	r2, #10
   15b9c:	mov	r3, #0
   15ba0:	bl	1d104 <__assert_fail@plt+0xb8b0>
   15ba4:	add	ip, r2, #48	; 0x30
   15ba8:	mov	r0, r4
   15bac:	mov	r1, r5
   15bb0:	mov	r3, #0
   15bb4:	mov	r2, #10
   15bb8:	strb	ip, [r6, #-1]!
   15bbc:	bl	1d104 <__assert_fail@plt+0xb8b0>
   15bc0:	mov	r4, r0
   15bc4:	mov	r5, r1
   15bc8:	orrs	r3, r4, r5
   15bcc:	bne	15b90 <__assert_fail@plt+0x433c>
   15bd0:	mov	r0, r6
   15bd4:	ldrd	r4, [sp]
   15bd8:	ldrd	r6, [sp, #8]
   15bdc:	ldr	r8, [sp, #16]
   15be0:	add	sp, sp, #20
   15be4:	pop	{pc}		; (ldr pc, [sp], #4)
   15be8:	mov	r6, r7
   15bec:	mov	r0, r4
   15bf0:	mov	r1, r5
   15bf4:	mov	r2, #10
   15bf8:	mov	r3, #0
   15bfc:	bl	1d104 <__assert_fail@plt+0xb8b0>
   15c00:	rsb	ip, r2, #48	; 0x30
   15c04:	mov	r0, r4
   15c08:	mov	r1, r5
   15c0c:	mov	r3, #0
   15c10:	mov	r2, #10
   15c14:	strb	ip, [r6, #-1]
   15c18:	sub	r7, r6, #1
   15c1c:	bl	1d104 <__assert_fail@plt+0xb8b0>
   15c20:	mov	r4, r0
   15c24:	mov	r5, r1
   15c28:	orrs	r3, r4, r5
   15c2c:	bne	15be8 <__assert_fail@plt+0x4394>
   15c30:	mov	r3, #45	; 0x2d
   15c34:	sub	r6, r6, #2
   15c38:	strb	r3, [r7, #-1]
   15c3c:	b	15bd0 <__assert_fail@plt+0x437c>
   15c40:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15c44:	mov	r4, r0
   15c48:	strd	r6, [sp, #8]
   15c4c:	str	r8, [sp, #16]
   15c50:	str	lr, [sp, #20]
   15c54:	bl	11674 <strlen@plt>
   15c58:	add	r0, r0, #1
   15c5c:	mov	ip, r4
   15c60:	mov	r3, #0
   15c64:	b	15c78 <__assert_fail@plt+0x4424>
   15c68:	cmp	r0, r2
   15c6c:	strb	r1, [ip], #1
   15c70:	bls	15ce8 <__assert_fail@plt+0x4494>
   15c74:	mov	r3, r2
   15c78:	ldrb	r1, [r4, r3]
   15c7c:	add	r2, r3, #1
   15c80:	cmp	r1, #92	; 0x5c
   15c84:	bne	15c68 <__assert_fail@plt+0x4414>
   15c88:	add	lr, r3, #4
   15c8c:	cmp	lr, r0
   15c90:	bcs	15c68 <__assert_fail@plt+0x4414>
   15c94:	ldrb	r5, [r4, r2]
   15c98:	sub	r5, r5, #48	; 0x30
   15c9c:	uxtb	r6, r5
   15ca0:	cmp	r6, #3
   15ca4:	bhi	15c68 <__assert_fail@plt+0x4414>
   15ca8:	add	r3, r4, r3
   15cac:	ldrb	r6, [r3, #2]
   15cb0:	sub	r6, r6, #48	; 0x30
   15cb4:	uxtb	r7, r6
   15cb8:	cmp	r7, #7
   15cbc:	bhi	15c68 <__assert_fail@plt+0x4414>
   15cc0:	ldrb	r3, [r3, #3]
   15cc4:	sub	r3, r3, #48	; 0x30
   15cc8:	uxtb	r3, r3
   15ccc:	cmp	r3, #7
   15cd0:	bhi	15c68 <__assert_fail@plt+0x4414>
   15cd4:	add	r5, r6, r5, lsl #3
   15cd8:	mov	r2, lr
   15cdc:	add	r5, r3, r5, lsl #3
   15ce0:	strb	r5, [ip], #1
   15ce4:	b	15c74 <__assert_fail@plt+0x4420>
   15ce8:	ldrd	r4, [sp]
   15cec:	ldrd	r6, [sp, #8]
   15cf0:	ldr	r8, [sp, #16]
   15cf4:	add	sp, sp, #20
   15cf8:	pop	{pc}		; (ldr pc, [sp], #4)
   15cfc:	str	r4, [sp, #-8]!
   15d00:	mov	r4, r0
   15d04:	ldr	r0, [r0]
   15d08:	str	lr, [sp, #4]
   15d0c:	bl	15b00 <__assert_fail@plt+0x42ac>
   15d10:	ldr	r0, [r4, #4]
   15d14:	bl	15b00 <__assert_fail@plt+0x42ac>
   15d18:	ldr	r0, [r4, #8]
   15d1c:	bl	15b00 <__assert_fail@plt+0x42ac>
   15d20:	ldrb	r3, [r4, #24]
   15d24:	tst	r3, #4
   15d28:	bne	15d40 <__assert_fail@plt+0x44ec>
   15d2c:	mov	r0, r4
   15d30:	ldr	r4, [sp]
   15d34:	ldr	lr, [sp, #4]
   15d38:	add	sp, sp, #8
   15d3c:	b	15b00 <__assert_fail@plt+0x42ac>
   15d40:	ldr	r0, [r4, #12]
   15d44:	bl	15b00 <__assert_fail@plt+0x42ac>
   15d48:	b	15d2c <__assert_fail@plt+0x44d8>
   15d4c:	movw	r1, #61624	; 0xf0b8
   15d50:	movt	r1, #1
   15d54:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15d58:	movw	r0, #61544	; 0xf068
   15d5c:	movt	r0, #1
   15d60:	strd	r6, [sp, #8]
   15d64:	strd	r8, [sp, #16]
   15d68:	strd	sl, [sp, #24]
   15d6c:	str	lr, [sp, #32]
   15d70:	sub	sp, sp, #44	; 0x2c
   15d74:	bl	117d0 <fopen64@plt>
   15d78:	subs	r8, r0, #0
   15d7c:	beq	16204 <__assert_fail@plt+0x49b0>
   15d80:	movw	r2, #61588	; 0xf094
   15d84:	movt	r2, #1
   15d88:	mov	r3, #0
   15d8c:	movw	r9, #61568	; 0xf080
   15d90:	movt	r9, #1
   15d94:	add	sl, sp, #16
   15d98:	str	r2, [sp, #8]
   15d9c:	mov	r2, #65280	; 0xff00
   15da0:	movt	r2, #15
   15da4:	str	r2, [sp, #12]
   15da8:	str	r3, [sp, #20]
   15dac:	str	r3, [sp, #24]
   15db0:	mov	r3, r8
   15db4:	mov	r2, #10
   15db8:	add	r1, sp, #24
   15dbc:	add	r0, sp, #20
   15dc0:	bl	1144c <__getdelim@plt>
   15dc4:	cmn	r0, #1
   15dc8:	beq	15f90 <__assert_fail@plt+0x473c>
   15dcc:	add	ip, sp, #36	; 0x24
   15dd0:	add	r3, sp, #32
   15dd4:	ldr	r0, [sp, #20]
   15dd8:	add	r2, sp, #28
   15ddc:	mov	r1, r9
   15de0:	str	ip, [sp]
   15de4:	bl	11794 <sscanf@plt>
   15de8:	sub	r0, r0, #2
   15dec:	cmp	r0, #1
   15df0:	bhi	15db0 <__assert_fail@plt+0x455c>
   15df4:	ldr	r5, [sp, #20]
   15df8:	mov	r1, #32
   15dfc:	ldr	r3, [sp, #36]	; 0x24
   15e00:	add	r5, r5, r3
   15e04:	mov	r0, r5
   15e08:	bl	11680 <strchr@plt>
   15e0c:	subs	r4, r0, #0
   15e10:	beq	15db0 <__assert_fail@plt+0x455c>
   15e14:	mov	r6, #0
   15e18:	mov	r1, #32
   15e1c:	strb	r6, [r4], #1
   15e20:	mov	r0, r4
   15e24:	bl	11680 <strchr@plt>
   15e28:	cmp	r0, #0
   15e2c:	beq	15db0 <__assert_fail@plt+0x455c>
   15e30:	strb	r6, [r0], #1
   15e34:	ldr	r1, [sp, #8]
   15e38:	bl	1c080 <__assert_fail@plt+0xa82c>
   15e3c:	cmp	r0, #0
   15e40:	beq	15db0 <__assert_fail@plt+0x455c>
   15e44:	add	r7, r0, #3
   15e48:	mov	r1, #32
   15e4c:	mov	r0, r7
   15e50:	bl	11680 <strchr@plt>
   15e54:	subs	fp, r0, #0
   15e58:	beq	15db0 <__assert_fail@plt+0x455c>
   15e5c:	mov	r1, #32
   15e60:	strb	r6, [fp], #1
   15e64:	mov	r0, fp
   15e68:	bl	11680 <strchr@plt>
   15e6c:	cmp	r0, #0
   15e70:	beq	15db0 <__assert_fail@plt+0x455c>
   15e74:	strb	r6, [r0]
   15e78:	mov	r0, fp
   15e7c:	bl	15c40 <__assert_fail@plt+0x43ec>
   15e80:	mov	r0, r4
   15e84:	bl	15c40 <__assert_fail@plt+0x43ec>
   15e88:	mov	r0, r5
   15e8c:	bl	15c40 <__assert_fail@plt+0x43ec>
   15e90:	mov	r0, r7
   15e94:	bl	15c40 <__assert_fail@plt+0x43ec>
   15e98:	mov	r0, #32
   15e9c:	bl	1b4ec <__assert_fail@plt+0x9c98>
   15ea0:	mov	r6, r0
   15ea4:	mov	r0, fp
   15ea8:	bl	1b93c <__assert_fail@plt+0xa0e8>
   15eac:	str	r0, [r6]
   15eb0:	mov	r0, r4
   15eb4:	bl	1b93c <__assert_fail@plt+0xa0e8>
   15eb8:	str	r0, [r6, #4]
   15ebc:	mov	r0, r5
   15ec0:	bl	1b93c <__assert_fail@plt+0xa0e8>
   15ec4:	str	r0, [r6, #8]
   15ec8:	mov	r0, r7
   15ecc:	bl	1b93c <__assert_fail@plt+0xa0e8>
   15ed0:	ldr	r1, [sp, #12]
   15ed4:	mov	r2, #0
   15ed8:	movt	r2, #65520	; 0xfff0
   15edc:	str	r0, [r6, #12]
   15ee0:	mov	r4, r0
   15ee4:	ldr	ip, [sp, #28]
   15ee8:	ldr	r5, [sp, #32]
   15eec:	ldrb	r3, [r6, #24]
   15ef0:	and	lr, r1, ip, lsl #8
   15ef4:	bic	ip, ip, #4080	; 0xff0
   15ef8:	bic	ip, ip, #15
   15efc:	and	r1, r2, r5, lsl #12
   15f00:	uxtb	r2, r5
   15f04:	orr	ip, ip, r5, lsr #20
   15f08:	orr	r2, r2, lr
   15f0c:	orr	r2, r1, r2
   15f10:	orr	r3, r3, #4
   15f14:	movw	r1, #55284	; 0xd7f4
   15f18:	movt	r1, #1
   15f1c:	str	r2, [r6, #16]
   15f20:	str	ip, [r6, #20]
   15f24:	strb	r3, [r6, #24]
   15f28:	bl	11464 <strcmp@plt>
   15f2c:	cmp	r0, #0
   15f30:	beq	15f4c <__assert_fail@plt+0x46f8>
   15f34:	movw	r1, #56004	; 0xdac4
   15f38:	movt	r1, #1
   15f3c:	mov	r0, r4
   15f40:	bl	11464 <strcmp@plt>
   15f44:	cmp	r0, #0
   15f48:	bne	15fe0 <__assert_fail@plt+0x478c>
   15f4c:	mov	r0, #1
   15f50:	ldrb	r3, [r6, #24]
   15f54:	mov	r1, #58	; 0x3a
   15f58:	ldr	r5, [r6]
   15f5c:	bfi	r3, r0, #0, #1
   15f60:	mov	r0, r5
   15f64:	strb	r3, [r6, #24]
   15f68:	bl	11680 <strchr@plt>
   15f6c:	cmp	r0, #0
   15f70:	beq	16104 <__assert_fail@plt+0x48b0>
   15f74:	mov	r0, #1
   15f78:	ldrb	r3, [r6, #24]
   15f7c:	bfi	r3, r0, #1, #1
   15f80:	strb	r3, [r6, #24]
   15f84:	str	r6, [sl]
   15f88:	add	sl, r6, #28
   15f8c:	b	15db0 <__assert_fail@plt+0x455c>
   15f90:	ldr	r0, [sp, #20]
   15f94:	bl	15b00 <__assert_fail@plt+0x42ac>
   15f98:	ldr	r3, [r8]
   15f9c:	tst	r3, #32
   15fa0:	bne	16598 <__assert_fail@plt+0x4d44>
   15fa4:	mov	r0, r8
   15fa8:	bl	1c8fc <__assert_fail@plt+0xb0a8>
   15fac:	cmn	r0, #1
   15fb0:	beq	16458 <__assert_fail@plt+0x4c04>
   15fb4:	mov	r3, #0
   15fb8:	str	r3, [sl]
   15fbc:	ldr	r6, [sp, #16]
   15fc0:	mov	r0, r6
   15fc4:	add	sp, sp, #44	; 0x2c
   15fc8:	ldrd	r4, [sp]
   15fcc:	ldrd	r6, [sp, #8]
   15fd0:	ldrd	r8, [sp, #16]
   15fd4:	ldrd	sl, [sp, #24]
   15fd8:	add	sp, sp, #32
   15fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   15fe0:	movw	r1, #61592	; 0xf098
   15fe4:	movt	r1, #1
   15fe8:	mov	r0, r4
   15fec:	bl	11464 <strcmp@plt>
   15ff0:	cmp	r0, #0
   15ff4:	beq	15f4c <__assert_fail@plt+0x46f8>
   15ff8:	movw	r1, #55472	; 0xd8b0
   15ffc:	movt	r1, #1
   16000:	mov	r0, r4
   16004:	bl	11464 <strcmp@plt>
   16008:	cmp	r0, #0
   1600c:	beq	15f4c <__assert_fail@plt+0x46f8>
   16010:	movw	r1, #55496	; 0xd8c8
   16014:	movt	r1, #1
   16018:	mov	r0, r4
   1601c:	bl	11464 <strcmp@plt>
   16020:	cmp	r0, #0
   16024:	beq	15f4c <__assert_fail@plt+0x46f8>
   16028:	movw	r1, #55624	; 0xd948
   1602c:	movt	r1, #1
   16030:	mov	r0, r4
   16034:	bl	11464 <strcmp@plt>
   16038:	cmp	r0, #0
   1603c:	beq	15f4c <__assert_fail@plt+0x46f8>
   16040:	movw	r1, #61600	; 0xf0a0
   16044:	movt	r1, #1
   16048:	mov	r0, r4
   1604c:	bl	11464 <strcmp@plt>
   16050:	cmp	r0, #0
   16054:	beq	15f4c <__assert_fail@plt+0x46f8>
   16058:	movw	r1, #55884	; 0xda4c
   1605c:	movt	r1, #1
   16060:	mov	r0, r4
   16064:	bl	11464 <strcmp@plt>
   16068:	cmp	r0, #0
   1606c:	beq	15f4c <__assert_fail@plt+0x46f8>
   16070:	movw	r1, #56072	; 0xdb08
   16074:	movt	r1, #1
   16078:	mov	r0, r4
   1607c:	bl	11464 <strcmp@plt>
   16080:	cmp	r0, #0
   16084:	beq	15f4c <__assert_fail@plt+0x46f8>
   16088:	movw	r1, #56176	; 0xdb70
   1608c:	movt	r1, #1
   16090:	mov	r0, r4
   16094:	bl	11464 <strcmp@plt>
   16098:	cmp	r0, #0
   1609c:	beq	15f4c <__assert_fail@plt+0x46f8>
   160a0:	movw	r1, #55480	; 0xd8b8
   160a4:	movt	r1, #1
   160a8:	mov	r0, r4
   160ac:	bl	11464 <strcmp@plt>
   160b0:	cmp	r0, #0
   160b4:	beq	15f4c <__assert_fail@plt+0x46f8>
   160b8:	movw	r1, #61612	; 0xf0ac
   160bc:	movt	r1, #1
   160c0:	mov	r0, r4
   160c4:	bl	11464 <strcmp@plt>
   160c8:	cmp	r0, #0
   160cc:	beq	15f4c <__assert_fail@plt+0x46f8>
   160d0:	movw	r1, #61620	; 0xf0b4
   160d4:	movt	r1, #1
   160d8:	mov	r0, r4
   160dc:	bl	11464 <strcmp@plt>
   160e0:	cmp	r0, #0
   160e4:	beq	15f4c <__assert_fail@plt+0x46f8>
   160e8:	movw	r1, #61628	; 0xf0bc
   160ec:	movt	r1, #1
   160f0:	mov	r0, r4
   160f4:	bl	11464 <strcmp@plt>
   160f8:	clz	r0, r0
   160fc:	lsr	r0, r0, #5
   16100:	b	15f50 <__assert_fail@plt+0x46fc>
   16104:	ldrb	r3, [r5]
   16108:	cmp	r3, #47	; 0x2f
   1610c:	beq	1660c <__assert_fail@plt+0x4db8>
   16110:	movw	r1, #56328	; 0xdc08
   16114:	movt	r1, #1
   16118:	mov	r0, r4
   1611c:	bl	11464 <strcmp@plt>
   16120:	cmp	r0, #0
   16124:	beq	15f74 <__assert_fail@plt+0x4720>
   16128:	movw	r1, #55256	; 0xd7d8
   1612c:	movt	r1, #1
   16130:	mov	r0, r4
   16134:	bl	11464 <strcmp@plt>
   16138:	cmp	r0, #0
   1613c:	beq	15f74 <__assert_fail@plt+0x4720>
   16140:	movw	r1, #55420	; 0xd87c
   16144:	movt	r1, #1
   16148:	mov	r0, r4
   1614c:	bl	11464 <strcmp@plt>
   16150:	cmp	r0, #0
   16154:	beq	15f74 <__assert_fail@plt+0x4720>
   16158:	movw	r1, #61652	; 0xf0d4
   1615c:	movt	r1, #1
   16160:	mov	r0, r4
   16164:	bl	11464 <strcmp@plt>
   16168:	cmp	r0, #0
   1616c:	beq	15f74 <__assert_fail@plt+0x4720>
   16170:	movw	r1, #55608	; 0xd938
   16174:	movt	r1, #1
   16178:	mov	r0, r4
   1617c:	bl	11464 <strcmp@plt>
   16180:	cmp	r0, #0
   16184:	beq	15f74 <__assert_fail@plt+0x4720>
   16188:	movw	r1, #55652	; 0xd964
   1618c:	movt	r1, #1
   16190:	mov	r0, r4
   16194:	bl	11464 <strcmp@plt>
   16198:	cmp	r0, #0
   1619c:	beq	15f74 <__assert_fail@plt+0x4720>
   161a0:	movw	r1, #55716	; 0xd9a4
   161a4:	movt	r1, #1
   161a8:	mov	r0, r4
   161ac:	bl	11464 <strcmp@plt>
   161b0:	cmp	r0, #0
   161b4:	beq	15f74 <__assert_fail@plt+0x4720>
   161b8:	movw	r1, #55956	; 0xda94
   161bc:	movt	r1, #1
   161c0:	mov	r0, r4
   161c4:	bl	11464 <strcmp@plt>
   161c8:	cmp	r0, #0
   161cc:	beq	15f74 <__assert_fail@plt+0x4720>
   161d0:	mov	r0, r4
   161d4:	movw	r1, #56276	; 0xdbd4
   161d8:	movt	r1, #1
   161dc:	bl	11464 <strcmp@plt>
   161e0:	cmp	r0, #0
   161e4:	beq	15f74 <__assert_fail@plt+0x4720>
   161e8:	mov	r1, r5
   161ec:	movw	r0, #61664	; 0xf0e0
   161f0:	movt	r0, #1
   161f4:	bl	11464 <strcmp@plt>
   161f8:	clz	r0, r0
   161fc:	lsr	r0, r0, #5
   16200:	b	15f78 <__assert_fail@plt+0x4724>
   16204:	movw	r1, #61100	; 0xeeac
   16208:	movt	r1, #1
   1620c:	movw	r0, #61672	; 0xf0e8
   16210:	movt	r0, #1
   16214:	bl	117e8 <setmntent@plt>
   16218:	subs	r6, r0, #0
   1621c:	beq	15fc0 <__assert_fail@plt+0x476c>
   16220:	mov	r0, r6
   16224:	movw	r8, #61684	; 0xf0f4
   16228:	movt	r8, #1
   1622c:	movw	r7, #55284	; 0xd7f4
   16230:	movt	r7, #1
   16234:	movw	fp, #56004	; 0xdac4
   16238:	movt	fp, #1
   1623c:	add	sl, sp, #16
   16240:	bl	115b4 <getmntent@plt>
   16244:	subs	r5, r0, #0
   16248:	beq	16448 <__assert_fail@plt+0x4bf4>
   1624c:	mov	r1, r8
   16250:	bl	11578 <hasmntopt@plt>
   16254:	mov	r9, r0
   16258:	mov	r0, #32
   1625c:	bl	1b4ec <__assert_fail@plt+0x9c98>
   16260:	mov	r4, r0
   16264:	ldr	r0, [r5]
   16268:	bl	1b93c <__assert_fail@plt+0xa0e8>
   1626c:	str	r0, [r4]
   16270:	ldr	r0, [r5, #4]
   16274:	bl	1b93c <__assert_fail@plt+0xa0e8>
   16278:	mov	r3, #0
   1627c:	str	r0, [r4, #4]
   16280:	ldr	r0, [r5, #8]
   16284:	str	r3, [r4, #8]
   16288:	bl	1b93c <__assert_fail@plt+0xa0e8>
   1628c:	ldrb	r3, [r4, #24]
   16290:	mov	r1, r7
   16294:	mov	r5, r0
   16298:	str	r0, [r4, #12]
   1629c:	orr	r3, r3, #4
   162a0:	strb	r3, [r4, #24]
   162a4:	bl	11464 <strcmp@plt>
   162a8:	cmp	r0, #0
   162ac:	beq	163ec <__assert_fail@plt+0x4b98>
   162b0:	mov	r1, fp
   162b4:	mov	r0, r5
   162b8:	bl	11464 <strcmp@plt>
   162bc:	cmp	r0, #0
   162c0:	beq	163ec <__assert_fail@plt+0x4b98>
   162c4:	movw	r1, #61592	; 0xf098
   162c8:	movt	r1, #1
   162cc:	mov	r0, r5
   162d0:	bl	11464 <strcmp@plt>
   162d4:	cmp	r0, #0
   162d8:	beq	163ec <__assert_fail@plt+0x4b98>
   162dc:	movw	r1, #55472	; 0xd8b0
   162e0:	movt	r1, #1
   162e4:	mov	r0, r5
   162e8:	bl	11464 <strcmp@plt>
   162ec:	cmp	r0, #0
   162f0:	beq	163ec <__assert_fail@plt+0x4b98>
   162f4:	movw	r1, #55496	; 0xd8c8
   162f8:	movt	r1, #1
   162fc:	mov	r0, r5
   16300:	bl	11464 <strcmp@plt>
   16304:	cmp	r0, #0
   16308:	beq	163ec <__assert_fail@plt+0x4b98>
   1630c:	movw	r1, #55624	; 0xd948
   16310:	movt	r1, #1
   16314:	mov	r0, r5
   16318:	bl	11464 <strcmp@plt>
   1631c:	cmp	r0, #0
   16320:	beq	163ec <__assert_fail@plt+0x4b98>
   16324:	movw	r1, #61600	; 0xf0a0
   16328:	movt	r1, #1
   1632c:	mov	r0, r5
   16330:	bl	11464 <strcmp@plt>
   16334:	cmp	r0, #0
   16338:	beq	163ec <__assert_fail@plt+0x4b98>
   1633c:	movw	r1, #55884	; 0xda4c
   16340:	movt	r1, #1
   16344:	mov	r0, r5
   16348:	bl	11464 <strcmp@plt>
   1634c:	cmp	r0, #0
   16350:	beq	163ec <__assert_fail@plt+0x4b98>
   16354:	movw	r1, #56072	; 0xdb08
   16358:	movt	r1, #1
   1635c:	mov	r0, r5
   16360:	bl	11464 <strcmp@plt>
   16364:	cmp	r0, #0
   16368:	beq	163ec <__assert_fail@plt+0x4b98>
   1636c:	movw	r1, #56176	; 0xdb70
   16370:	movt	r1, #1
   16374:	mov	r0, r5
   16378:	bl	11464 <strcmp@plt>
   1637c:	cmp	r0, #0
   16380:	beq	163ec <__assert_fail@plt+0x4b98>
   16384:	movw	r1, #55480	; 0xd8b8
   16388:	movt	r1, #1
   1638c:	mov	r0, r5
   16390:	bl	11464 <strcmp@plt>
   16394:	cmp	r0, #0
   16398:	beq	163ec <__assert_fail@plt+0x4b98>
   1639c:	movw	r1, #61612	; 0xf0ac
   163a0:	movt	r1, #1
   163a4:	mov	r0, r5
   163a8:	bl	11464 <strcmp@plt>
   163ac:	cmp	r0, #0
   163b0:	beq	163ec <__assert_fail@plt+0x4b98>
   163b4:	movw	r1, #61620	; 0xf0b4
   163b8:	movt	r1, #1
   163bc:	mov	r0, r5
   163c0:	bl	11464 <strcmp@plt>
   163c4:	cmp	r0, #0
   163c8:	beq	163ec <__assert_fail@plt+0x4b98>
   163cc:	movw	r1, #61628	; 0xf0bc
   163d0:	movt	r1, #1
   163d4:	mov	r0, r5
   163d8:	bl	11464 <strcmp@plt>
   163dc:	orrs	r3, r9, r0
   163e0:	moveq	r2, #1
   163e4:	movne	r2, #0
   163e8:	b	163f0 <__assert_fail@plt+0x4b9c>
   163ec:	mov	r2, #1
   163f0:	ldrb	r3, [r4, #24]
   163f4:	mov	r1, #58	; 0x3a
   163f8:	ldr	r9, [r4]
   163fc:	bfi	r3, r2, #0, #1
   16400:	mov	r0, r9
   16404:	strb	r3, [r4, #24]
   16408:	bl	11680 <strchr@plt>
   1640c:	cmp	r0, #0
   16410:	beq	16498 <__assert_fail@plt+0x4c44>
   16414:	mov	r0, #1
   16418:	ldrb	r1, [r4, #24]
   1641c:	mvn	r2, #0
   16420:	mvn	r3, #0
   16424:	strd	r2, [r4, #16]
   16428:	bfi	r1, r0, #1, #1
   1642c:	mov	r0, r6
   16430:	strb	r1, [r4, #24]
   16434:	str	r4, [sl]
   16438:	add	sl, r4, #28
   1643c:	bl	115b4 <getmntent@plt>
   16440:	subs	r5, r0, #0
   16444:	bne	1624c <__assert_fail@plt+0x49f8>
   16448:	mov	r0, r6
   1644c:	bl	11740 <endmntent@plt>
   16450:	cmp	r0, #0
   16454:	bne	15fb4 <__assert_fail@plt+0x4760>
   16458:	bl	116b0 <__errno_location@plt>
   1645c:	ldr	r7, [r0]
   16460:	mov	r5, r0
   16464:	mov	r3, #0
   16468:	str	r3, [sl]
   1646c:	ldr	r0, [sp, #16]
   16470:	cmp	r0, r3
   16474:	beq	1648c <__assert_fail@plt+0x4c38>
   16478:	ldr	r4, [r0, #28]
   1647c:	bl	15cfc <__assert_fail@plt+0x44a8>
   16480:	subs	r0, r4, #0
   16484:	str	r4, [sp, #16]
   16488:	bne	16478 <__assert_fail@plt+0x4c24>
   1648c:	mov	r6, #0
   16490:	str	r7, [r5]
   16494:	b	15fc0 <__assert_fail@plt+0x476c>
   16498:	ldrb	r3, [r9]
   1649c:	cmp	r3, #47	; 0x2f
   164a0:	beq	165b4 <__assert_fail@plt+0x4d60>
   164a4:	movw	r1, #56328	; 0xdc08
   164a8:	movt	r1, #1
   164ac:	mov	r0, r5
   164b0:	bl	11464 <strcmp@plt>
   164b4:	cmp	r0, #0
   164b8:	beq	16414 <__assert_fail@plt+0x4bc0>
   164bc:	movw	r1, #55256	; 0xd7d8
   164c0:	movt	r1, #1
   164c4:	mov	r0, r5
   164c8:	bl	11464 <strcmp@plt>
   164cc:	cmp	r0, #0
   164d0:	beq	16414 <__assert_fail@plt+0x4bc0>
   164d4:	movw	r1, #55420	; 0xd87c
   164d8:	movt	r1, #1
   164dc:	mov	r0, r5
   164e0:	bl	11464 <strcmp@plt>
   164e4:	cmp	r0, #0
   164e8:	beq	16414 <__assert_fail@plt+0x4bc0>
   164ec:	movw	r1, #61652	; 0xf0d4
   164f0:	movt	r1, #1
   164f4:	mov	r0, r5
   164f8:	bl	11464 <strcmp@plt>
   164fc:	cmp	r0, #0
   16500:	beq	16414 <__assert_fail@plt+0x4bc0>
   16504:	movw	r1, #55608	; 0xd938
   16508:	movt	r1, #1
   1650c:	mov	r0, r5
   16510:	bl	11464 <strcmp@plt>
   16514:	cmp	r0, #0
   16518:	beq	16414 <__assert_fail@plt+0x4bc0>
   1651c:	movw	r1, #55652	; 0xd964
   16520:	movt	r1, #1
   16524:	mov	r0, r5
   16528:	bl	11464 <strcmp@plt>
   1652c:	cmp	r0, #0
   16530:	beq	16414 <__assert_fail@plt+0x4bc0>
   16534:	movw	r1, #55716	; 0xd9a4
   16538:	movt	r1, #1
   1653c:	mov	r0, r5
   16540:	bl	11464 <strcmp@plt>
   16544:	cmp	r0, #0
   16548:	beq	16414 <__assert_fail@plt+0x4bc0>
   1654c:	movw	r1, #55956	; 0xda94
   16550:	movt	r1, #1
   16554:	mov	r0, r5
   16558:	bl	11464 <strcmp@plt>
   1655c:	cmp	r0, #0
   16560:	beq	16414 <__assert_fail@plt+0x4bc0>
   16564:	mov	r0, r5
   16568:	movw	r1, #56276	; 0xdbd4
   1656c:	movt	r1, #1
   16570:	bl	11464 <strcmp@plt>
   16574:	cmp	r0, #0
   16578:	beq	16414 <__assert_fail@plt+0x4bc0>
   1657c:	mov	r1, r9
   16580:	movw	r0, #61664	; 0xf0e0
   16584:	movt	r0, #1
   16588:	bl	11464 <strcmp@plt>
   1658c:	clz	r0, r0
   16590:	lsr	r0, r0, #5
   16594:	b	16418 <__assert_fail@plt+0x4bc4>
   16598:	bl	116b0 <__errno_location@plt>
   1659c:	mov	r5, r0
   165a0:	mov	r0, r8
   165a4:	ldr	r7, [r5]
   165a8:	bl	1c8fc <__assert_fail@plt+0xb0a8>
   165ac:	str	r7, [r5]
   165b0:	b	16464 <__assert_fail@plt+0x4c10>
   165b4:	ldrb	r3, [r9, #1]
   165b8:	cmp	r3, #47	; 0x2f
   165bc:	bne	164a4 <__assert_fail@plt+0x4c50>
   165c0:	movw	r1, #61636	; 0xf0c4
   165c4:	movt	r1, #1
   165c8:	mov	r0, r5
   165cc:	bl	11464 <strcmp@plt>
   165d0:	cmp	r0, #0
   165d4:	beq	16414 <__assert_fail@plt+0x4bc0>
   165d8:	movw	r1, #61644	; 0xf0cc
   165dc:	movt	r1, #1
   165e0:	mov	r0, r5
   165e4:	bl	11464 <strcmp@plt>
   165e8:	cmp	r0, #0
   165ec:	beq	16414 <__assert_fail@plt+0x4bc0>
   165f0:	movw	r1, #55412	; 0xd874
   165f4:	movt	r1, #1
   165f8:	mov	r0, r5
   165fc:	bl	11464 <strcmp@plt>
   16600:	cmp	r0, #0
   16604:	beq	16414 <__assert_fail@plt+0x4bc0>
   16608:	b	164a4 <__assert_fail@plt+0x4c50>
   1660c:	ldrb	r3, [r5, #1]
   16610:	cmp	r3, #47	; 0x2f
   16614:	bne	16110 <__assert_fail@plt+0x48bc>
   16618:	movw	r1, #61636	; 0xf0c4
   1661c:	movt	r1, #1
   16620:	mov	r0, r4
   16624:	bl	11464 <strcmp@plt>
   16628:	cmp	r0, #0
   1662c:	beq	15f74 <__assert_fail@plt+0x4720>
   16630:	movw	r1, #61644	; 0xf0cc
   16634:	movt	r1, #1
   16638:	mov	r0, r4
   1663c:	bl	11464 <strcmp@plt>
   16640:	cmp	r0, #0
   16644:	beq	15f74 <__assert_fail@plt+0x4720>
   16648:	movw	r1, #55412	; 0xd874
   1664c:	movt	r1, #1
   16650:	mov	r0, r4
   16654:	bl	11464 <strcmp@plt>
   16658:	cmp	r0, #0
   1665c:	beq	15f74 <__assert_fail@plt+0x4720>
   16660:	b	16110 <__assert_fail@plt+0x48bc>
   16664:	strd	r4, [sp, #-16]!
   16668:	subs	r4, r2, #0
   1666c:	str	r6, [sp, #8]
   16670:	mov	r6, r0
   16674:	str	lr, [sp, #12]
   16678:	beq	166a4 <__assert_fail@plt+0x4e50>
   1667c:	mov	r5, r1
   16680:	bl	11614 <__ctype_tolower_loc@plt>
   16684:	add	r3, r5, r4
   16688:	add	r2, r6, r4
   1668c:	ldrb	lr, [r3, #-1]!
   16690:	ldr	ip, [r0]
   16694:	cmp	r5, r3
   16698:	ldr	ip, [ip, lr, lsl #2]
   1669c:	strb	ip, [r2, #-1]!
   166a0:	bne	1668c <__assert_fail@plt+0x4e38>
   166a4:	mov	r0, r6
   166a8:	ldrd	r4, [sp]
   166ac:	ldr	r6, [sp, #8]
   166b0:	add	sp, sp, #12
   166b4:	pop	{pc}		; (ldr pc, [sp], #4)
   166b8:	strd	r4, [sp, #-16]!
   166bc:	subs	r4, r2, #0
   166c0:	str	r6, [sp, #8]
   166c4:	mov	r6, r0
   166c8:	str	lr, [sp, #12]
   166cc:	beq	166f8 <__assert_fail@plt+0x4ea4>
   166d0:	mov	r5, r1
   166d4:	bl	11620 <__ctype_toupper_loc@plt>
   166d8:	add	r3, r5, r4
   166dc:	add	r2, r6, r4
   166e0:	ldrb	lr, [r3, #-1]!
   166e4:	ldr	ip, [r0]
   166e8:	cmp	r5, r3
   166ec:	ldr	ip, [ip, lr, lsl #2]
   166f0:	strb	ip, [r2, #-1]!
   166f4:	bne	166e0 <__assert_fail@plt+0x4e8c>
   166f8:	mov	r0, r6
   166fc:	ldrd	r4, [sp]
   16700:	ldr	r6, [sp, #8]
   16704:	add	sp, sp, #12
   16708:	pop	{pc}		; (ldr pc, [sp], #4)
   1670c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16710:	mov	r4, r3
   16714:	strd	r6, [sp, #8]
   16718:	mov	r6, r0
   1671c:	strd	r8, [sp, #16]
   16720:	mov	r9, r2
   16724:	strd	sl, [sp, #24]
   16728:	str	lr, [sp, #32]
   1672c:	sub	sp, sp, #1136	; 0x470
   16730:	sub	sp, sp, #4
   16734:	str	r1, [sp, #28]
   16738:	str	r3, [sp, #48]	; 0x30
   1673c:	ldrb	r3, [sp, #1176]	; 0x498
   16740:	str	r3, [sp, #40]	; 0x28
   16744:	bl	116b0 <__errno_location@plt>
   16748:	ldr	r1, [r0]
   1674c:	movw	r3, #55136	; 0xd760
   16750:	movt	r3, #1
   16754:	str	r0, [sp, #36]	; 0x24
   16758:	ldr	r2, [r4, #40]	; 0x28
   1675c:	ldr	ip, [r4, #8]
   16760:	ldr	r5, [sp, #1184]	; 0x4a0
   16764:	cmp	r2, #0
   16768:	str	r1, [sp, #52]	; 0x34
   1676c:	mov	r1, r2
   16770:	moveq	r1, r3
   16774:	cmp	ip, #12
   16778:	str	ip, [sp, #32]
   1677c:	subgt	r3, ip, #12
   16780:	str	r1, [sp, #56]	; 0x38
   16784:	strgt	r3, [sp, #32]
   16788:	bgt	1679c <__assert_fail@plt+0x4f48>
   1678c:	ldr	r3, [sp, #32]
   16790:	cmp	r3, #0
   16794:	moveq	r3, #12
   16798:	str	r3, [sp, #32]
   1679c:	ldrb	r3, [r9]
   167a0:	cmp	r3, #0
   167a4:	beq	1814c <__assert_fail@plt+0x68f8>
   167a8:	movw	r2, #46021	; 0xb3c5
   167ac:	movt	r2, #37282	; 0x91a2
   167b0:	movw	sl, #9363	; 0x2493
   167b4:	movt	sl, #37449	; 0x9249
   167b8:	movw	r7, #26215	; 0x6667
   167bc:	movt	r7, #26214	; 0x6666
   167c0:	str	r2, [sp, #76]	; 0x4c
   167c4:	movw	r2, #34953	; 0x8889
   167c8:	movt	r2, #34952	; 0x8888
   167cc:	mov	fp, #0
   167d0:	str	sl, [sp, #64]	; 0x40
   167d4:	str	r7, [sp, #72]	; 0x48
   167d8:	str	r2, [sp, #80]	; 0x50
   167dc:	movw	r2, #34079	; 0x851f
   167e0:	movt	r2, #20971	; 0x51eb
   167e4:	str	r2, [sp, #68]	; 0x44
   167e8:	cmp	r3, #37	; 0x25
   167ec:	beq	168d0 <__assert_fail@plt+0x507c>
   167f0:	ldr	r3, [sp, #28]
   167f4:	cmp	r5, #0
   167f8:	sub	r3, r3, fp
   167fc:	blt	16884 <__assert_fail@plt+0x5030>
   16800:	cmp	r5, #1
   16804:	movcs	r4, r5
   16808:	movcc	r4, #1
   1680c:	cmp	r4, r3
   16810:	bcs	1688c <__assert_fail@plt+0x5038>
   16814:	cmp	r6, #0
   16818:	beq	16844 <__assert_fail@plt+0x4ff0>
   1681c:	cmp	r5, #1
   16820:	ble	1683c <__assert_fail@plt+0x4fe8>
   16824:	sub	r5, r5, #1
   16828:	mov	r0, r6
   1682c:	mov	r1, #32
   16830:	mov	r2, r5
   16834:	add	r6, r6, r5
   16838:	bl	116e0 <memset@plt>
   1683c:	ldrb	r3, [r9]
   16840:	strb	r3, [r6], #1
   16844:	add	fp, fp, r4
   16848:	mov	r4, r9
   1684c:	ldrb	r3, [r4, #1]
   16850:	add	r9, r4, #1
   16854:	mvn	r5, #0
   16858:	cmp	r3, #0
   1685c:	bne	167e8 <__assert_fail@plt+0x4f94>
   16860:	ldr	r3, [sp, #28]
   16864:	ldr	r2, [sp, #52]	; 0x34
   16868:	cmp	r6, #0
   1686c:	cmpne	r3, #0
   16870:	movne	r3, #0
   16874:	strbne	r3, [r6]
   16878:	ldr	r3, [sp, #36]	; 0x24
   1687c:	str	r2, [r3]
   16880:	b	1689c <__assert_fail@plt+0x5048>
   16884:	cmp	r3, #1
   16888:	bhi	168c0 <__assert_fail@plt+0x506c>
   1688c:	ldr	r2, [sp, #36]	; 0x24
   16890:	mov	r3, #34	; 0x22
   16894:	str	r3, [r2]
   16898:	mov	fp, #0
   1689c:	mov	r0, fp
   168a0:	add	sp, sp, #1136	; 0x470
   168a4:	add	sp, sp, #4
   168a8:	ldrd	r4, [sp]
   168ac:	ldrd	r6, [sp, #8]
   168b0:	ldrd	r8, [sp, #16]
   168b4:	ldrd	sl, [sp, #24]
   168b8:	add	sp, sp, #32
   168bc:	pop	{pc}		; (ldr pc, [sp], #4)
   168c0:	cmp	r6, #0
   168c4:	mov	r4, #1
   168c8:	bne	1683c <__assert_fail@plt+0x4fe8>
   168cc:	b	16844 <__assert_fail@plt+0x4ff0>
   168d0:	ldr	r3, [sp, #40]	; 0x28
   168d4:	mov	sl, #0
   168d8:	mov	r8, r9
   168dc:	str	sl, [sp, #44]	; 0x2c
   168e0:	str	r3, [sp, #60]	; 0x3c
   168e4:	ldrb	r3, [r8, #1]!
   168e8:	sub	r2, r3, #35	; 0x23
   168ec:	mov	r7, r3
   168f0:	cmp	r2, #60	; 0x3c
   168f4:	ldrls	pc, [pc, r2, lsl #2]
   168f8:	b	16a0c <__assert_fail@plt+0x51b8>
   168fc:	andeq	r6, r1, r4, lsl #20
   16900:	andeq	r6, r1, ip, lsl #20
   16904:	andeq	r6, r1, ip, lsl #20
   16908:	andeq	r6, r1, ip, lsl #20
   1690c:	andeq	r6, r1, ip, lsl #20
   16910:	andeq	r6, r1, ip, lsl #20
   16914:	andeq	r6, r1, ip, lsl #20
   16918:	andeq	r6, r1, ip, lsl #20
   1691c:	strdeq	r6, [r1], -ip
   16920:	andeq	r6, r1, ip, lsl #20
   16924:	strdeq	r6, [r1], -ip
   16928:	andeq	r6, r1, ip, lsl #20
   1692c:	andeq	r6, r1, ip, lsl #20
   16930:	strdeq	r6, [r1], -ip
   16934:	andeq	r6, r1, ip, lsl #20
   16938:	andeq	r6, r1, ip, lsl #20
   1693c:	andeq	r6, r1, ip, lsl #20
   16940:	andeq	r6, r1, ip, lsl #20
   16944:	andeq	r6, r1, ip, lsl #20
   16948:	andeq	r6, r1, ip, lsl #20
   1694c:	andeq	r6, r1, ip, lsl #20
   16950:	andeq	r6, r1, ip, lsl #20
   16954:	andeq	r6, r1, ip, lsl #20
   16958:	andeq	r6, r1, ip, lsl #20
   1695c:	andeq	r6, r1, ip, lsl #20
   16960:	andeq	r6, r1, ip, lsl #20
   16964:	andeq	r6, r1, ip, lsl #20
   16968:	andeq	r6, r1, ip, lsl #20
   1696c:	andeq	r6, r1, ip, lsl #20
   16970:	andeq	r6, r1, ip, lsl #20
   16974:	andeq	r6, r1, ip, lsl #20
   16978:	andeq	r6, r1, ip, lsl #20
   1697c:	andeq	r6, r1, ip, lsl #20
   16980:	andeq	r6, r1, ip, lsl #20
   16984:	andeq	r6, r1, ip, lsl #20
   16988:	andeq	r6, r1, ip, lsl #20
   1698c:	andeq	r6, r1, ip, lsl #20
   16990:	andeq	r6, r1, ip, lsl #20
   16994:	andeq	r6, r1, ip, lsl #20
   16998:	andeq	r6, r1, ip, lsl #20
   1699c:	andeq	r6, r1, ip, lsl #20
   169a0:	andeq	r6, r1, ip, lsl #20
   169a4:	andeq	r6, r1, ip, lsl #20
   169a8:	andeq	r6, r1, ip, lsl #20
   169ac:	andeq	r6, r1, ip, lsl #20
   169b0:	andeq	r6, r1, ip, lsl #20
   169b4:	andeq	r6, r1, ip, lsl #20
   169b8:	andeq	r6, r1, ip, lsl #20
   169bc:	andeq	r6, r1, ip, lsl #20
   169c0:	andeq	r6, r1, ip, lsl #20
   169c4:	andeq	r6, r1, ip, lsl #20
   169c8:	andeq	r6, r1, ip, lsl #20
   169cc:	andeq	r6, r1, ip, lsl #20
   169d0:	andeq	r6, r1, ip, lsl #20
   169d4:	andeq	r6, r1, ip, lsl #20
   169d8:	andeq	r6, r1, ip, lsl #20
   169dc:	andeq	r6, r1, ip, lsl #20
   169e0:	andeq	r6, r1, ip, lsl #20
   169e4:	andeq	r6, r1, ip, lsl #20
   169e8:	strdeq	r6, [r1], -r0
   169ec:	strdeq	r6, [r1], -ip
   169f0:	mov	r3, #1
   169f4:	str	r3, [sp, #60]	; 0x3c
   169f8:	b	168e4 <__assert_fail@plt+0x5090>
   169fc:	str	r3, [sp, #44]	; 0x2c
   16a00:	b	168e4 <__assert_fail@plt+0x5090>
   16a04:	mov	sl, #1
   16a08:	b	168e4 <__assert_fail@plt+0x5090>
   16a0c:	sub	r2, r3, #48	; 0x30
   16a10:	cmp	r2, #9
   16a14:	bls	16ed0 <__assert_fail@plt+0x567c>
   16a18:	cmp	r3, #69	; 0x45
   16a1c:	beq	16c20 <__assert_fail@plt+0x53cc>
   16a20:	cmp	r3, #79	; 0x4f
   16a24:	beq	16c20 <__assert_fail@plt+0x53cc>
   16a28:	cmp	r3, #122	; 0x7a
   16a2c:	ldrls	pc, [pc, r3, lsl #2]
   16a30:	b	18018 <__assert_fail@plt+0x67c4>
   16a34:	andeq	r6, r1, r0, lsr #28
   16a38:	andeq	r8, r1, r8, lsl r0
   16a3c:	andeq	r8, r1, r8, lsl r0
   16a40:	andeq	r8, r1, r8, lsl r0
   16a44:	andeq	r8, r1, r8, lsl r0
   16a48:	andeq	r8, r1, r8, lsl r0
   16a4c:	andeq	r8, r1, r8, lsl r0
   16a50:	andeq	r8, r1, r8, lsl r0
   16a54:	andeq	r8, r1, r8, lsl r0
   16a58:	andeq	r8, r1, r8, lsl r0
   16a5c:	andeq	r8, r1, r8, lsl r0
   16a60:	andeq	r8, r1, r8, lsl r0
   16a64:	andeq	r8, r1, r8, lsl r0
   16a68:	andeq	r8, r1, r8, lsl r0
   16a6c:	andeq	r8, r1, r8, lsl r0
   16a70:	andeq	r8, r1, r8, lsl r0
   16a74:	andeq	r8, r1, r8, lsl r0
   16a78:	andeq	r8, r1, r8, lsl r0
   16a7c:	andeq	r8, r1, r8, lsl r0
   16a80:	andeq	r8, r1, r8, lsl r0
   16a84:	andeq	r8, r1, r8, lsl r0
   16a88:	andeq	r8, r1, r8, lsl r0
   16a8c:	andeq	r8, r1, r8, lsl r0
   16a90:	andeq	r8, r1, r8, lsl r0
   16a94:	andeq	r8, r1, r8, lsl r0
   16a98:	andeq	r8, r1, r8, lsl r0
   16a9c:	andeq	r8, r1, r8, lsl r0
   16aa0:	andeq	r8, r1, r8, lsl r0
   16aa4:	andeq	r8, r1, r8, lsl r0
   16aa8:	andeq	r8, r1, r8, lsl r0
   16aac:	andeq	r8, r1, r8, lsl r0
   16ab0:	andeq	r8, r1, r8, lsl r0
   16ab4:	andeq	r8, r1, r8, lsl r0
   16ab8:	andeq	r8, r1, r8, lsl r0
   16abc:	andeq	r8, r1, r8, lsl r0
   16ac0:	andeq	r8, r1, r8, lsl r0
   16ac4:	andeq	r8, r1, r8, lsl r0
   16ac8:	strdeq	r7, [r1], -ip
   16acc:	andeq	r8, r1, r8, lsl r0
   16ad0:	andeq	r8, r1, r8, lsl r0
   16ad4:	andeq	r8, r1, r8, lsl r0
   16ad8:	andeq	r8, r1, r8, lsl r0
   16adc:	andeq	r8, r1, r8, lsl r0
   16ae0:	andeq	r8, r1, r8, lsl r0
   16ae4:	andeq	r8, r1, r8, lsl r0
   16ae8:	andeq	r8, r1, r8, lsl r0
   16aec:	andeq	r8, r1, r8, lsl r0
   16af0:	andeq	r8, r1, r8, lsl r0
   16af4:	andeq	r8, r1, r8, lsl r0
   16af8:	andeq	r8, r1, r8, lsl r0
   16afc:	andeq	r8, r1, r8, lsl r0
   16b00:	andeq	r8, r1, r8, lsl r0
   16b04:	andeq	r8, r1, r8, lsl r0
   16b08:	andeq	r8, r1, r8, lsl r0
   16b0c:	andeq	r8, r1, r8, lsl r0
   16b10:	andeq	r8, r1, r8, lsl r0
   16b14:	andeq	r8, r1, r8, lsl r0
   16b18:	andeq	r8, r1, r8, lsl r0
   16b1c:	andeq	r7, r1, r0, asr #29
   16b20:	andeq	r8, r1, r8, lsl r0
   16b24:	andeq	r8, r1, r8, lsl r0
   16b28:	andeq	r8, r1, r8, lsl r0
   16b2c:	andeq	r8, r1, r8, lsl r0
   16b30:	andeq	r8, r1, r8, lsl r0
   16b34:	andeq	r8, r1, r8, lsl r0
   16b38:	strdeq	r7, [r1], -r8
   16b3c:	andeq	r7, r1, r4, lsl pc
   16b40:	andeq	r7, r1, r4, ror pc
   16b44:	andeq	r7, r1, r8, asr #26
   16b48:	andeq	r8, r1, r8, lsl r0
   16b4c:	andeq	r7, r1, r0, ror ip
   16b50:	andeq	r7, r1, r0, lsl #31
   16b54:	andeq	r7, r1, ip, lsl #31
   16b58:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16b5c:	andeq	r8, r1, r8, lsl r0
   16b60:	andeq	r8, r1, r8, lsl r0
   16b64:	andeq	r8, r1, r8, lsl r0
   16b68:	andeq	r7, r1, r4, lsr #31
   16b6c:	andeq	r7, r1, r4, asr #18
   16b70:	andeq	r8, r1, r8, lsl r0
   16b74:	ldrdeq	r7, [r1], -r4
   16b78:	andeq	r8, r1, r8, lsl r0
   16b7c:	andeq	r7, r1, r4, ror #27
   16b80:	andeq	r8, r1, ip
   16b84:	andeq	r7, r1, r8, lsr #16
   16b88:	ldrdeq	r7, [r1], -r4
   16b8c:	andeq	r7, r1, r0, lsl #31
   16b90:	andeq	r7, r1, r0, ror #31
   16b94:	andeq	r7, r1, ip, ror #31
   16b98:	strdeq	r7, [r1], -r8
   16b9c:			; <UNDEFINED> instruction: 0x000175b4
   16ba0:	andeq	r8, r1, r8, lsl r0
   16ba4:	andeq	r8, r1, r8, lsl r0
   16ba8:	andeq	r8, r1, r8, lsl r0
   16bac:	andeq	r8, r1, r8, lsl r0
   16bb0:	andeq	r8, r1, r8, lsl r0
   16bb4:	andeq	r8, r1, r8, lsl r0
   16bb8:	andeq	r8, r1, r4
   16bbc:	andeq	r7, r1, r8, asr r5
   16bc0:	andeq	r7, r1, r8, lsr pc
   16bc4:	andeq	r7, r1, r4, asr #30
   16bc8:	andeq	r7, r1, r0, asr pc
   16bcc:	andeq	r8, r1, r8, lsl r0
   16bd0:	andeq	r7, r1, r0, lsl #31
   16bd4:	andeq	r7, r1, r8, asr r5
   16bd8:	andeq	r8, r1, r8, lsl r0
   16bdc:	andeq	r7, r1, ip, asr pc
   16be0:	andeq	r7, r1, r8, ror #30
   16be4:	andeq	r7, r1, r0, lsr #30
   16be8:	andeq	r7, r1, ip, lsr #30
   16bec:	andeq	r7, r1, r4, lsl #8
   16bf0:	andeq	r8, r1, r8, lsl r0
   16bf4:	andeq	r7, r1, ip, lsr #27
   16bf8:	andeq	r7, r1, r4, asr r3
   16bfc:	muleq	r1, r8, sp
   16c00:			; <UNDEFINED> instruction: 0x000171b8
   16c04:	andeq	r7, r1, ip, lsr r1
   16c08:	strdeq	r7, [r1], -ip
   16c0c:	andeq	r8, r1, r8, lsl r0
   16c10:			; <UNDEFINED> instruction: 0x00017fbc
   16c14:	andeq	r7, r1, r8, asr #31
   16c18:			; <UNDEFINED> instruction: 0x00017fb0
   16c1c:	andeq	r7, r1, r4, lsl #28
   16c20:	ldrb	r3, [r8, #1]
   16c24:	add	r4, r8, #1
   16c28:	cmp	r3, #122	; 0x7a
   16c2c:	ldrls	pc, [pc, r3, lsl #2]
   16c30:	b	16e28 <__assert_fail@plt+0x55d4>
   16c34:	andeq	r6, r1, r4, lsr #28
   16c38:	andeq	r6, r1, r8, lsr #28
   16c3c:	andeq	r6, r1, r8, lsr #28
   16c40:	andeq	r6, r1, r8, lsr #28
   16c44:	andeq	r6, r1, r8, lsr #28
   16c48:	andeq	r6, r1, r8, lsr #28
   16c4c:	andeq	r6, r1, r8, lsr #28
   16c50:	andeq	r6, r1, r8, lsr #28
   16c54:	andeq	r6, r1, r8, lsr #28
   16c58:	andeq	r6, r1, r8, lsr #28
   16c5c:	andeq	r6, r1, r8, lsr #28
   16c60:	andeq	r6, r1, r8, lsr #28
   16c64:	andeq	r6, r1, r8, lsr #28
   16c68:	andeq	r6, r1, r8, lsr #28
   16c6c:	andeq	r6, r1, r8, lsr #28
   16c70:	andeq	r6, r1, r8, lsr #28
   16c74:	andeq	r6, r1, r8, lsr #28
   16c78:	andeq	r6, r1, r8, lsr #28
   16c7c:	andeq	r6, r1, r8, lsr #28
   16c80:	andeq	r6, r1, r8, lsr #28
   16c84:	andeq	r6, r1, r8, lsr #28
   16c88:	andeq	r6, r1, r8, lsr #28
   16c8c:	andeq	r6, r1, r8, lsr #28
   16c90:	andeq	r6, r1, r8, lsr #28
   16c94:	andeq	r6, r1, r8, lsr #28
   16c98:	andeq	r6, r1, r8, lsr #28
   16c9c:	andeq	r6, r1, r8, lsr #28
   16ca0:	andeq	r6, r1, r8, lsr #28
   16ca4:	andeq	r6, r1, r8, lsr #28
   16ca8:	andeq	r6, r1, r8, lsr #28
   16cac:	andeq	r6, r1, r8, lsr #28
   16cb0:	andeq	r6, r1, r8, lsr #28
   16cb4:	andeq	r6, r1, r8, lsr #28
   16cb8:	andeq	r6, r1, r8, lsr #28
   16cbc:	andeq	r6, r1, r8, lsr #28
   16cc0:	andeq	r6, r1, r8, lsr #28
   16cc4:	andeq	r6, r1, r8, lsr #28
   16cc8:	strdeq	r7, [r1], -r8
   16ccc:	andeq	r6, r1, r8, lsr #28
   16cd0:	andeq	r6, r1, r8, lsr #28
   16cd4:	andeq	r6, r1, r8, lsr #28
   16cd8:	andeq	r6, r1, r8, lsr #28
   16cdc:	andeq	r6, r1, r8, lsr #28
   16ce0:	andeq	r6, r1, r8, lsr #28
   16ce4:	andeq	r6, r1, r8, lsr #28
   16ce8:	andeq	r6, r1, r8, lsr #28
   16cec:	andeq	r6, r1, r8, lsr #28
   16cf0:	andeq	r6, r1, r8, lsr #28
   16cf4:	andeq	r6, r1, r8, lsr #28
   16cf8:	andeq	r6, r1, r8, lsr #28
   16cfc:	andeq	r6, r1, r8, lsr #28
   16d00:	andeq	r6, r1, r8, lsr #28
   16d04:	andeq	r6, r1, r8, lsr #28
   16d08:	andeq	r6, r1, r8, lsr #28
   16d0c:	andeq	r6, r1, r8, lsr #28
   16d10:	andeq	r6, r1, r8, lsr #28
   16d14:	andeq	r6, r1, r8, lsr #28
   16d18:	andeq	r6, r1, r8, lsr #28
   16d1c:	andeq	r7, r1, r8, asr #29
   16d20:	andeq	r6, r1, r8, lsr #28
   16d24:	andeq	r6, r1, r8, lsr #28
   16d28:	andeq	r6, r1, r8, lsr #28
   16d2c:	andeq	r6, r1, r8, lsr #28
   16d30:	andeq	r6, r1, r8, lsr #28
   16d34:	andeq	r6, r1, r8, lsr #28
   16d38:	andeq	r7, r1, ip, ror #29
   16d3c:	andeq	r7, r1, r4, ror sp
   16d40:			; <UNDEFINED> instruction: 0x00017cb4
   16d44:	andeq	r7, r1, r0, asr sp
   16d48:	andeq	r6, r1, r8, lsr #28
   16d4c:	andeq	r7, r1, r8, ror ip
   16d50:	andeq	r7, r1, r4, ror #21
   16d54:	andeq	r7, r1, r8, asr #21
   16d58:			; <UNDEFINED> instruction: 0x00017ab0
   16d5c:	andeq	r6, r1, r8, lsr #28
   16d60:	andeq	r6, r1, r8, lsr #28
   16d64:	andeq	r6, r1, r8, lsr #28
   16d68:	muleq	r1, r4, sl
   16d6c:	andeq	r7, r1, ip, asr #18
   16d70:	andeq	r6, r1, r8, lsr #28
   16d74:	ldrdeq	r7, [r1], -ip
   16d78:	andeq	r6, r1, r8, lsr #28
   16d7c:	andeq	r7, r1, r8, ror #27
   16d80:	andeq	r7, r1, r8, lsr #18
   16d84:	andeq	r7, r1, ip, lsr #16
   16d88:	andeq	r7, r1, ip, ror #15
   16d8c:	andeq	r7, r1, r4, ror #21
   16d90:	muleq	r1, r4, r7
   16d94:	andeq	r7, r1, r4, lsl #15
   16d98:	andeq	r7, r1, ip, ror r6
   16d9c:			; <UNDEFINED> instruction: 0x000175b8
   16da0:	andeq	r6, r1, r8, lsr #28
   16da4:	andeq	r6, r1, r8, lsr #28
   16da8:	andeq	r6, r1, r8, lsr #28
   16dac:	andeq	r6, r1, r8, lsr #28
   16db0:	andeq	r6, r1, r8, lsr #28
   16db4:	andeq	r6, r1, r8, lsr #28
   16db8:	andeq	r7, r1, r0, lsl #11
   16dbc:	andeq	r7, r1, r0, ror #10
   16dc0:	andeq	r7, r1, r4, asr #10
   16dc4:	andeq	r7, r1, r8, lsr #10
   16dc8:	andeq	r7, r1, r4, lsl r5
   16dcc:	andeq	r6, r1, r8, lsr #28
   16dd0:	andeq	r7, r1, r4, ror #21
   16dd4:	andeq	r7, r1, r0, ror #10
   16dd8:	andeq	r6, r1, r8, lsr #28
   16ddc:	strdeq	r7, [r1], -r8
   16de0:	andeq	r7, r1, r4, ror #9
   16de4:			; <UNDEFINED> instruction: 0x000174bc
   16de8:	andeq	r7, r1, ip, ror r4
   16dec:	andeq	r7, r1, r8, lsl #8
   16df0:	andeq	r6, r1, r8, lsr #28
   16df4:			; <UNDEFINED> instruction: 0x00017db4
   16df8:	andeq	r7, r1, ip, asr r3
   16dfc:	andeq	r7, r1, r0, lsr #27
   16e00:			; <UNDEFINED> instruction: 0x000171bc
   16e04:	andeq	r7, r1, r0, asr #2
   16e08:	andeq	r7, r1, r4, lsl #2
   16e0c:	andeq	r6, r1, r8, lsr #28
   16e10:	andeq	r7, r1, r0, asr #1
   16e14:	muleq	r1, r4, r0
   16e18:	andeq	r6, r1, r8, lsl pc
   16e1c:	andeq	r7, r1, ip, lsl #28
   16e20:	mov	r4, r8
   16e24:	sub	r4, r4, #1
   16e28:	ldr	r3, [sp, #28]
   16e2c:	sub	sl, r3, fp
   16e30:	ldr	r2, [sp, #44]	; 0x2c
   16e34:	mvn	r3, r5
   16e38:	sub	r7, r4, r9
   16e3c:	lsr	r3, r3, #31
   16e40:	add	r7, r7, #1
   16e44:	cmp	r2, #45	; 0x2d
   16e48:	moveq	r3, #0
   16e4c:	cmp	r3, #0
   16e50:	moveq	r5, r3
   16e54:	moveq	r8, r7
   16e58:	beq	16e68 <__assert_fail@plt+0x5614>
   16e5c:	cmp	r7, r5
   16e60:	movcs	r8, r7
   16e64:	movcc	r8, r5
   16e68:	cmp	r8, sl
   16e6c:	bcs	1688c <__assert_fail@plt+0x5038>
   16e70:	cmp	r6, #0
   16e74:	beq	16ec8 <__assert_fail@plt+0x5674>
   16e78:	cmp	r7, r5
   16e7c:	bcs	16ea8 <__assert_fail@plt+0x5654>
   16e80:	ldr	r3, [sp, #44]	; 0x2c
   16e84:	sub	r2, r5, r7
   16e88:	mov	r0, r6
   16e8c:	cmp	r3, #43	; 0x2b
   16e90:	cmpne	r3, #48	; 0x30
   16e94:	add	r3, r6, r2
   16e98:	moveq	r1, #48	; 0x30
   16e9c:	movne	r1, #32
   16ea0:	mov	r6, r3
   16ea4:	bl	116e0 <memset@plt>
   16ea8:	ldr	r3, [sp, #60]	; 0x3c
   16eac:	mov	r1, r9
   16eb0:	mov	r2, r7
   16eb4:	mov	r0, r6
   16eb8:	cmp	r3, #0
   16ebc:	bne	16f10 <__assert_fail@plt+0x56bc>
   16ec0:	bl	114b8 <memcpy@plt>
   16ec4:	add	r6, r6, r7
   16ec8:	add	fp, fp, r8
   16ecc:	b	1684c <__assert_fail@plt+0x4ff8>
   16ed0:	mov	r5, #0
   16ed4:	mov	r1, #10
   16ed8:	smull	r2, r3, r5, r1
   16edc:	mvn	r5, #-2147483648	; 0x80000000
   16ee0:	cmp	r3, r2, asr #31
   16ee4:	bne	16ef8 <__assert_fail@plt+0x56a4>
   16ee8:	ldrb	r3, [r8]
   16eec:	sub	r5, r3, #48	; 0x30
   16ef0:	adds	r5, r2, r5
   16ef4:	mvnvs	r5, #-2147483648	; 0x80000000
   16ef8:	ldrb	r3, [r8, #1]!
   16efc:	sub	r2, r3, #48	; 0x30
   16f00:	cmp	r2, #9
   16f04:	bls	16ed8 <__assert_fail@plt+0x5684>
   16f08:	mov	r7, r3
   16f0c:	b	16a18 <__assert_fail@plt+0x51c4>
   16f10:	bl	166b8 <__assert_fail@plt+0x4e64>
   16f14:	b	16ec4 <__assert_fail@plt+0x5670>
   16f18:	cmp	r7, #69	; 0x45
   16f1c:	beq	18278 <__assert_fail@plt+0x6a24>
   16f20:	ldr	r2, [sp, #48]	; 0x30
   16f24:	mov	r1, #100	; 0x64
   16f28:	ldr	r0, [sp, #68]	; 0x44
   16f2c:	ldr	r2, [r2, #20]
   16f30:	smull	ip, r0, r0, r2
   16f34:	asr	ip, r2, #31
   16f38:	rsb	ip, ip, r0, asr #5
   16f3c:	mls	ip, r1, ip, r2
   16f40:	cmp	ip, #0
   16f44:	bge	16f5c <__assert_fail@plt+0x5708>
   16f48:	movw	r1, #63636	; 0xf894
   16f4c:	movt	r1, #65535	; 0xffff
   16f50:	cmp	r2, r1
   16f54:	rsblt	ip, ip, #0
   16f58:	addge	ip, ip, #100	; 0x64
   16f5c:	ldr	r2, [sp, #44]	; 0x2c
   16f60:	cmp	r2, #0
   16f64:	bne	17c44 <__assert_fail@plt+0x63f0>
   16f68:	ldr	r2, [sp, #1180]	; 0x49c
   16f6c:	cmp	r2, #43	; 0x2b
   16f70:	beq	18454 <__assert_fail@plt+0x6c00>
   16f74:	ldr	r1, [sp, #1180]	; 0x49c
   16f78:	mov	r2, #0
   16f7c:	str	r1, [sp, #44]	; 0x2c
   16f80:	mov	r1, #2
   16f84:	str	r2, [sp, #84]	; 0x54
   16f88:	str	r2, [sp, #92]	; 0x5c
   16f8c:	mov	r2, #1
   16f90:	str	r1, [sp, #88]	; 0x58
   16f94:	mov	lr, #0
   16f98:	cmp	r7, #79	; 0x4f
   16f9c:	movne	r2, #0
   16fa0:	andeq	r2, r2, #1
   16fa4:	cmp	r2, #0
   16fa8:	beq	176e8 <__assert_fail@plt+0x5e94>
   16fac:	add	r2, sp, #96	; 0x60
   16fb0:	movw	r1, #9504	; 0x2520
   16fb4:	mov	r8, #0
   16fb8:	strh	r1, [r2]
   16fbc:	add	r1, r2, #3
   16fc0:	strb	r7, [sp, #98]	; 0x62
   16fc4:	mov	ip, #0
   16fc8:	add	r0, sp, #112	; 0x70
   16fcc:	strb	r3, [r1]
   16fd0:	ldr	r3, [sp, #48]	; 0x30
   16fd4:	strb	ip, [r1, #1]
   16fd8:	mov	r1, #1024	; 0x400
   16fdc:	bl	115fc <strftime@plt>
   16fe0:	cmp	r0, #0
   16fe4:	beq	1684c <__assert_fail@plt+0x4ff8>
   16fe8:	ldr	r2, [sp, #44]	; 0x2c
   16fec:	mvn	r3, r5
   16ff0:	sub	r7, r0, #1
   16ff4:	lsr	r3, r3, #31
   16ff8:	cmp	r2, #45	; 0x2d
   16ffc:	moveq	r3, #0
   17000:	cmp	r3, #0
   17004:	moveq	r5, r3
   17008:	moveq	r9, r7
   1700c:	beq	1701c <__assert_fail@plt+0x57c8>
   17010:	cmp	r7, r5
   17014:	movcs	r9, r7
   17018:	movcc	r9, r5
   1701c:	ldr	r3, [sp, #28]
   17020:	sub	r3, r3, fp
   17024:	cmp	r3, r9
   17028:	bls	1688c <__assert_fail@plt+0x5038>
   1702c:	cmp	r6, #0
   17030:	beq	1708c <__assert_fail@plt+0x5838>
   17034:	cmp	r7, r5
   17038:	bcs	17064 <__assert_fail@plt+0x5810>
   1703c:	ldr	r3, [sp, #44]	; 0x2c
   17040:	sub	r2, r5, r7
   17044:	mov	r0, r6
   17048:	cmp	r3, #43	; 0x2b
   1704c:	cmpne	r3, #48	; 0x30
   17050:	add	r3, r6, r2
   17054:	moveq	r1, #48	; 0x30
   17058:	movne	r1, #32
   1705c:	mov	r6, r3
   17060:	bl	116e0 <memset@plt>
   17064:	cmp	r8, #0
   17068:	bne	18164 <__assert_fail@plt+0x6910>
   1706c:	ldr	r3, [sp, #60]	; 0x3c
   17070:	add	r1, sp, #113	; 0x71
   17074:	mov	r2, r7
   17078:	mov	r0, r6
   1707c:	cmp	r3, #0
   17080:	beq	1815c <__assert_fail@plt+0x6908>
   17084:	bl	166b8 <__assert_fail@plt+0x4e64>
   17088:	add	r6, r6, r7
   1708c:	add	fp, fp, r9
   17090:	b	1684c <__assert_fail@plt+0x4ff8>
   17094:	cmp	r7, #79	; 0x4f
   17098:	beq	16e28 <__assert_fail@plt+0x55d4>
   1709c:	mov	r3, #120	; 0x78
   170a0:	mov	r8, #0
   170a4:	add	r2, sp, #96	; 0x60
   170a8:	movw	r1, #9504	; 0x2520
   170ac:	cmp	r7, #0
   170b0:	strh	r1, [r2]
   170b4:	addeq	r1, r2, #2
   170b8:	beq	16fc4 <__assert_fail@plt+0x5770>
   170bc:	b	16fbc <__assert_fail@plt+0x5768>
   170c0:	cmp	r7, #69	; 0x45
   170c4:	beq	16e28 <__assert_fail@plt+0x55d4>
   170c8:	mov	r2, #1
   170cc:	str	r2, [sp, #88]	; 0x58
   170d0:	ldr	r2, [sp, #48]	; 0x30
   170d4:	ldr	r2, [r2, #24]
   170d8:	mov	ip, r2
   170dc:	lsr	r2, r2, #31
   170e0:	mov	lr, #0
   170e4:	cmp	ip, lr
   170e8:	str	r2, [sp, #84]	; 0x54
   170ec:	movlt	r2, #0
   170f0:	movge	r2, #1
   170f4:	str	lr, [sp, #92]	; 0x5c
   170f8:	b	16f98 <__assert_fail@plt+0x5744>
   170fc:	mov	r4, r8
   17100:	mov	r7, #0
   17104:	ldr	r2, [sp, #48]	; 0x30
   17108:	mov	r1, #1
   1710c:	ldr	r0, [sp, #64]	; 0x40
   17110:	str	r1, [sp, #88]	; 0x58
   17114:	ldr	r2, [r2, #24]
   17118:	add	r2, r2, #6
   1711c:	asr	r1, r2, #31
   17120:	smull	ip, r0, r0, r2
   17124:	add	r0, r0, r2
   17128:	rsb	r1, r1, r0, asr #2
   1712c:	rsb	r1, r1, r1, lsl #3
   17130:	sub	r2, r2, r1
   17134:	add	r2, r2, #1
   17138:	b	170d8 <__assert_fail@plt+0x5884>
   1713c:	mov	r4, r8
   17140:	ldr	r3, [sp, #44]	; 0x2c
   17144:	cmp	r3, #45	; 0x2d
   17148:	ldr	r3, [sp, #28]
   1714c:	sub	r3, r3, fp
   17150:	beq	181d0 <__assert_fail@plt+0x697c>
   17154:	cmp	r5, #0
   17158:	blt	181d0 <__assert_fail@plt+0x697c>
   1715c:	cmp	r5, #1
   17160:	movcs	r7, r5
   17164:	movcc	r7, #1
   17168:	cmp	r7, r3
   1716c:	bcs	1688c <__assert_fail@plt+0x5038>
   17170:	cmp	r6, #0
   17174:	beq	171b0 <__assert_fail@plt+0x595c>
   17178:	cmp	r5, #1
   1717c:	ble	171a8 <__assert_fail@plt+0x5954>
   17180:	ldr	r3, [sp, #44]	; 0x2c
   17184:	sub	r2, r5, #1
   17188:	mov	r0, r6
   1718c:	cmp	r3, #43	; 0x2b
   17190:	cmpne	r3, #48	; 0x30
   17194:	add	r3, r6, r2
   17198:	moveq	r1, #48	; 0x30
   1719c:	movne	r1, #32
   171a0:	mov	r6, r3
   171a4:	bl	116e0 <memset@plt>
   171a8:	mov	r3, #9
   171ac:	strb	r3, [r6], #1
   171b0:	add	fp, fp, r7
   171b4:	b	1684c <__assert_fail@plt+0x4ff8>
   171b8:	mov	r4, r8
   171bc:	ldr	lr, [sp, #48]	; 0x30
   171c0:	mvn	ip, #0
   171c4:	add	r1, sp, #112	; 0x70
   171c8:	ldr	r0, [sp, #1192]	; 0x4a8
   171cc:	ldrd	r8, [lr]
   171d0:	ldrd	r2, [lr, #24]
   171d4:	strd	r8, [sp, #112]	; 0x70
   171d8:	ldrd	r8, [lr, #8]
   171dc:	strd	r2, [sp, #136]	; 0x88
   171e0:	ldr	r3, [lr, #40]	; 0x28
   171e4:	strd	r8, [sp, #120]	; 0x78
   171e8:	ldrd	r8, [lr, #32]
   171ec:	str	ip, [sp, #140]	; 0x8c
   171f0:	str	r3, [sp, #152]	; 0x98
   171f4:	ldrd	r2, [lr, #16]
   171f8:	strd	r2, [sp, #128]	; 0x80
   171fc:	strd	r8, [sp, #144]	; 0x90
   17200:	bl	1ae40 <__assert_fail@plt+0x95ec>
   17204:	ldr	r3, [sp, #140]	; 0x8c
   17208:	cmp	r3, #0
   1720c:	blt	18500 <__assert_fail@plt+0x6cac>
   17210:	ldr	ip, [sp, #72]	; 0x48
   17214:	add	r2, sp, #96	; 0x60
   17218:	lsr	r3, r0, #31
   1721c:	mov	r1, r0
   17220:	add	r7, r2, #14
   17224:	str	r3, [sp, #84]	; 0x54
   17228:	smull	r3, lr, ip, r1
   1722c:	cmp	r0, #0
   17230:	asr	r8, r1, #31
   17234:	asr	lr, lr, #2
   17238:	sub	r3, lr, r8
   1723c:	add	r3, r3, r3, lsl #2
   17240:	sub	r3, r1, r3, lsl #1
   17244:	sub	r1, lr, r8
   17248:	uxtb	r3, r3
   1724c:	rsblt	r3, r3, #48	; 0x30
   17250:	addge	r3, r3, #48	; 0x30
   17254:	uxtb	r3, r3
   17258:	cmp	r1, #0
   1725c:	strb	r3, [r7, #-1]!
   17260:	bne	17228 <__assert_fail@plt+0x59d4>
   17264:	mov	r3, #1
   17268:	str	r3, [sp, #88]	; 0x58
   1726c:	str	r1, [sp, #92]	; 0x5c
   17270:	ldr	r3, [sp, #44]	; 0x2c
   17274:	cmp	r3, #0
   17278:	beq	1813c <__assert_fail@plt+0x68e8>
   1727c:	subs	r3, r3, #45	; 0x2d
   17280:	movne	r3, #1
   17284:	ldr	r1, [sp, #88]	; 0x58
   17288:	cmp	r5, #0
   1728c:	add	r2, r2, #14
   17290:	sub	r8, r2, r7
   17294:	movlt	r5, r1
   17298:	ldr	r1, [sp, #84]	; 0x54
   1729c:	cmp	r1, #0
   172a0:	bne	180d0 <__assert_fail@plt+0x687c>
   172a4:	ldr	r1, [sp, #92]	; 0x5c
   172a8:	cmp	r1, #0
   172ac:	bne	18184 <__assert_fail@plt+0x6930>
   172b0:	sub	r2, r5, r8
   172b4:	cmp	r2, #0
   172b8:	movle	r3, #0
   172bc:	andgt	r3, r3, #1
   172c0:	cmp	r3, #0
   172c4:	bne	172dc <__assert_fail@plt+0x5a88>
   172c8:	ldr	r3, [sp, #44]	; 0x2c
   172cc:	cmp	r3, #45	; 0x2d
   172d0:	moveq	r5, r1
   172d4:	moveq	r9, r8
   172d8:	beq	172e8 <__assert_fail@plt+0x5a94>
   172dc:	cmp	r5, r8
   172e0:	movcs	r9, r5
   172e4:	movcc	r9, r8
   172e8:	ldr	r3, [sp, #28]
   172ec:	sub	r3, r3, fp
   172f0:	cmp	r3, r9
   172f4:	bls	1688c <__assert_fail@plt+0x5038>
   172f8:	cmp	r6, #0
   172fc:	beq	1708c <__assert_fail@plt+0x5838>
   17300:	cmp	r5, r8
   17304:	bls	17330 <__assert_fail@plt+0x5adc>
   17308:	ldr	r3, [sp, #44]	; 0x2c
   1730c:	sub	r2, r5, r8
   17310:	mov	r0, r6
   17314:	cmp	r3, #43	; 0x2b
   17318:	cmpne	r3, #48	; 0x30
   1731c:	add	r3, r6, r2
   17320:	moveq	r1, #48	; 0x30
   17324:	movne	r1, #32
   17328:	mov	r6, r3
   1732c:	bl	116e0 <memset@plt>
   17330:	ldr	r3, [sp, #60]	; 0x3c
   17334:	mov	r1, r7
   17338:	mov	r2, r8
   1733c:	mov	r0, r6
   17340:	cmp	r3, #0
   17344:	beq	18154 <__assert_fail@plt+0x6900>
   17348:	bl	166b8 <__assert_fail@plt+0x4e64>
   1734c:	add	r6, r6, r8
   17350:	b	1708c <__assert_fail@plt+0x5838>
   17354:	mov	r4, r8
   17358:	mov	r7, #0
   1735c:	ldr	r3, [sp, #48]	; 0x30
   17360:	cmp	r7, #79	; 0x4f
   17364:	ldr	r3, [r3, #16]
   17368:	moveq	r3, #113	; 0x71
   1736c:	beq	16fac <__assert_fail@plt+0x5758>
   17370:	mov	ip, #11
   17374:	mov	lr, #0
   17378:	mul	ip, ip, r3
   1737c:	mov	r3, #1
   17380:	str	lr, [sp, #84]	; 0x54
   17384:	str	r3, [sp, #88]	; 0x58
   17388:	asr	ip, ip, #5
   1738c:	str	lr, [sp, #92]	; 0x5c
   17390:	add	ip, ip, r3
   17394:	add	r2, sp, #96	; 0x60
   17398:	movw	r9, #52429	; 0xcccd
   1739c:	movt	r9, #52428	; 0xcccc
   173a0:	add	r0, r2, #14
   173a4:	mov	sl, #58	; 0x3a
   173a8:	tst	lr, #1
   173ac:	umull	r3, r1, r9, ip
   173b0:	sub	r7, r0, #1
   173b4:	sub	r3, r0, #2
   173b8:	beq	173c8 <__assert_fail@plt+0x5b74>
   173bc:	strb	sl, [r0, #-1]
   173c0:	mov	r0, r7
   173c4:	mov	r7, r3
   173c8:	lsr	r1, r1, #3
   173cc:	asrs	lr, lr, #1
   173d0:	add	r3, r1, r1, lsl #2
   173d4:	movne	r8, #1
   173d8:	moveq	r8, #0
   173dc:	sub	r3, ip, r3, lsl #1
   173e0:	cmp	ip, #9
   173e4:	orrhi	r8, r8, #1
   173e8:	mov	ip, r1
   173ec:	cmp	r8, #0
   173f0:	add	r3, r3, #48	; 0x30
   173f4:	strb	r3, [r0, #-1]
   173f8:	mov	r0, r7
   173fc:	bne	173a8 <__assert_fail@plt+0x5b54>
   17400:	b	17270 <__assert_fail@plt+0x5a1c>
   17404:	mov	r4, r8
   17408:	ldr	r3, [sp, #44]	; 0x2c
   1740c:	cmp	r3, #45	; 0x2d
   17410:	ldr	r3, [sp, #28]
   17414:	sub	r3, r3, fp
   17418:	beq	181b8 <__assert_fail@plt+0x6964>
   1741c:	cmp	r5, #0
   17420:	blt	181b8 <__assert_fail@plt+0x6964>
   17424:	cmp	r5, #1
   17428:	movcs	r7, r5
   1742c:	movcc	r7, #1
   17430:	cmp	r7, r3
   17434:	bcs	1688c <__assert_fail@plt+0x5038>
   17438:	cmp	r6, #0
   1743c:	beq	171b0 <__assert_fail@plt+0x595c>
   17440:	cmp	r5, #1
   17444:	ble	17470 <__assert_fail@plt+0x5c1c>
   17448:	ldr	r3, [sp, #44]	; 0x2c
   1744c:	sub	r2, r5, #1
   17450:	mov	r0, r6
   17454:	cmp	r3, #43	; 0x2b
   17458:	cmpne	r3, #48	; 0x30
   1745c:	add	r3, r6, r2
   17460:	moveq	r1, #48	; 0x30
   17464:	movne	r1, #32
   17468:	mov	r6, r3
   1746c:	bl	116e0 <memset@plt>
   17470:	mov	r3, #10
   17474:	strb	r3, [r6], #1
   17478:	b	171b0 <__assert_fail@plt+0x595c>
   1747c:	cmp	r7, #69	; 0x45
   17480:	beq	16e28 <__assert_fail@plt+0x55d4>
   17484:	ldr	r2, [sp, #48]	; 0x30
   17488:	mov	lr, #0
   1748c:	ldr	ip, [r2, #16]
   17490:	mov	r2, #2
   17494:	cmn	ip, #1
   17498:	str	r2, [sp, #88]	; 0x58
   1749c:	add	ip, ip, #1
   174a0:	movlt	r2, #1
   174a4:	movge	r2, lr
   174a8:	str	r2, [sp, #84]	; 0x54
   174ac:	movge	r2, #1
   174b0:	movlt	r2, lr
   174b4:	str	lr, [sp, #92]	; 0x5c
   174b8:	b	16f98 <__assert_fail@plt+0x5744>
   174bc:	cmp	r7, #69	; 0x45
   174c0:	beq	16e28 <__assert_fail@plt+0x55d4>
   174c4:	ldr	r2, [sp, #32]
   174c8:	ldr	r1, [sp, #44]	; 0x2c
   174cc:	cmp	r1, #0
   174d0:	mov	r1, #2
   174d4:	str	r1, [sp, #88]	; 0x58
   174d8:	moveq	r1, #95	; 0x5f
   174dc:	streq	r1, [sp, #44]	; 0x2c
   174e0:	b	170d8 <__assert_fail@plt+0x5884>
   174e4:	cmp	r7, #69	; 0x45
   174e8:	beq	16e28 <__assert_fail@plt+0x55d4>
   174ec:	ldr	r2, [sp, #48]	; 0x30
   174f0:	ldr	r2, [r2, #8]
   174f4:	b	174c8 <__assert_fail@plt+0x5c74>
   174f8:	cmp	r7, #69	; 0x45
   174fc:	beq	16e28 <__assert_fail@plt+0x55d4>
   17500:	ldr	r2, [sp, #48]	; 0x30
   17504:	mov	lr, #0
   17508:	ldr	ip, [r2, #28]
   1750c:	mov	r2, #3
   17510:	b	17494 <__assert_fail@plt+0x5c40>
   17514:	cmp	r7, #69	; 0x45
   17518:	beq	16e28 <__assert_fail@plt+0x55d4>
   1751c:	ldr	r2, [sp, #48]	; 0x30
   17520:	ldr	r2, [r2, #12]
   17524:	b	174c8 <__assert_fail@plt+0x5c74>
   17528:	cmp	r7, #69	; 0x45
   1752c:	beq	16e28 <__assert_fail@plt+0x55d4>
   17530:	mov	r2, #2
   17534:	str	r2, [sp, #88]	; 0x58
   17538:	ldr	r2, [sp, #48]	; 0x30
   1753c:	ldr	r2, [r2, #12]
   17540:	b	170d8 <__assert_fail@plt+0x5884>
   17544:	cmp	r7, #79	; 0x4f
   17548:	beq	16e28 <__assert_fail@plt+0x55d4>
   1754c:	mov	r3, #99	; 0x63
   17550:	mov	r8, #0
   17554:	b	170a4 <__assert_fail@plt+0x5850>
   17558:	mov	r4, r8
   1755c:	mov	r7, #0
   17560:	ldr	r2, [sp, #60]	; 0x3c
   17564:	cmp	sl, #0
   17568:	movne	r2, sl
   1756c:	cmp	r7, #69	; 0x45
   17570:	str	r2, [sp, #60]	; 0x3c
   17574:	beq	16e28 <__assert_fail@plt+0x55d4>
   17578:	mov	r8, #0
   1757c:	b	170a4 <__assert_fail@plt+0x5850>
   17580:	cmp	r7, #0
   17584:	bne	16e28 <__assert_fail@plt+0x55d4>
   17588:	ldr	r2, [sp, #60]	; 0x3c
   1758c:	cmp	sl, #0
   17590:	mov	r3, #97	; 0x61
   17594:	movne	r2, sl
   17598:	str	r2, [sp, #60]	; 0x3c
   1759c:	add	r2, sp, #96	; 0x60
   175a0:	movw	r0, #9504	; 0x2520
   175a4:	mov	r1, r2
   175a8:	mov	r8, #0
   175ac:	strh	r0, [r1], #2
   175b0:	b	16fc4 <__assert_fail@plt+0x5770>
   175b4:	mov	r4, r8
   175b8:	cmp	sl, #0
   175bc:	ldr	r0, [sp, #56]	; 0x38
   175c0:	ldr	r3, [sp, #60]	; 0x3c
   175c4:	movne	r3, #0
   175c8:	str	r3, [sp, #60]	; 0x3c
   175cc:	bl	11674 <strlen@plt>
   175d0:	ldr	r3, [sp, #44]	; 0x2c
   175d4:	mov	r7, r0
   175d8:	subs	r3, r3, #45	; 0x2d
   175dc:	movne	r3, #1
   175e0:	cmp	r5, #0
   175e4:	movlt	r3, #0
   175e8:	cmp	r3, #0
   175ec:	moveq	r5, r0
   175f0:	beq	17604 <__assert_fail@plt+0x5db0>
   175f4:	mov	r3, r5
   175f8:	cmp	r0, r5
   175fc:	movcs	r5, r0
   17600:	movcc	r5, r3
   17604:	ldr	r2, [sp, #28]
   17608:	sub	r2, r2, fp
   1760c:	cmp	r2, r5
   17610:	bls	1688c <__assert_fail@plt+0x5038>
   17614:	cmp	r6, #0
   17618:	beq	17674 <__assert_fail@plt+0x5e20>
   1761c:	cmp	r7, r3
   17620:	bcs	1764c <__assert_fail@plt+0x5df8>
   17624:	sub	r2, r3, r7
   17628:	ldr	r3, [sp, #44]	; 0x2c
   1762c:	mov	r0, r6
   17630:	cmp	r3, #43	; 0x2b
   17634:	cmpne	r3, #48	; 0x30
   17638:	add	r3, r6, r2
   1763c:	moveq	r1, #48	; 0x30
   17640:	movne	r1, #32
   17644:	mov	r6, r3
   17648:	bl	116e0 <memset@plt>
   1764c:	cmp	sl, #0
   17650:	bne	18418 <__assert_fail@plt+0x6bc4>
   17654:	mov	r2, r7
   17658:	mov	r0, r6
   1765c:	ldr	r1, [sp, #56]	; 0x38
   17660:	ldr	r3, [sp, #60]	; 0x3c
   17664:	cmp	r3, #0
   17668:	beq	18410 <__assert_fail@plt+0x6bbc>
   1766c:	bl	166b8 <__assert_fail@plt+0x4e64>
   17670:	add	r6, r6, r7
   17674:	add	fp, fp, r5
   17678:	b	1684c <__assert_fail@plt+0x4ff8>
   1767c:	cmp	r7, #69	; 0x45
   17680:	beq	18408 <__assert_fail@plt+0x6bb4>
   17684:	cmp	r7, #79	; 0x4f
   17688:	beq	16e28 <__assert_fail@plt+0x55d4>
   1768c:	ldr	r1, [sp, #44]	; 0x2c
   17690:	ldr	r2, [sp, #48]	; 0x30
   17694:	ldr	ip, [r2, #20]
   17698:	movw	r2, #63636	; 0xf894
   1769c:	movt	r2, #65535	; 0xffff
   176a0:	cmp	ip, r2
   176a4:	add	ip, ip, #1888	; 0x760
   176a8:	movlt	r2, #1
   176ac:	movge	r2, #0
   176b0:	add	ip, ip, #12
   176b4:	str	r2, [sp, #84]	; 0x54
   176b8:	movge	r2, #1
   176bc:	movlt	r2, #0
   176c0:	cmp	r1, #0
   176c4:	bne	181fc <__assert_fail@plt+0x69a8>
   176c8:	ldr	r1, [sp, #1180]	; 0x49c
   176cc:	cmp	r1, #43	; 0x2b
   176d0:	beq	18214 <__assert_fail@plt+0x69c0>
   176d4:	ldr	lr, [sp, #44]	; 0x2c
   176d8:	mov	r3, #4
   176dc:	str	r1, [sp, #44]	; 0x2c
   176e0:	str	r3, [sp, #88]	; 0x58
   176e4:	str	lr, [sp, #92]	; 0x5c
   176e8:	ldr	r3, [sp, #84]	; 0x54
   176ec:	cmp	r3, #0
   176f0:	rsbne	ip, ip, #0
   176f4:	b	17394 <__assert_fail@plt+0x5b40>
   176f8:	mov	r8, r4
   176fc:	ldr	r3, [sp, #28]
   17700:	sub	r4, r8, #1
   17704:	cmp	r4, r9
   17708:	sub	sl, r3, fp
   1770c:	bne	16e30 <__assert_fail@plt+0x55dc>
   17710:	ldr	r3, [sp, #44]	; 0x2c
   17714:	cmp	r3, #45	; 0x2d
   17718:	beq	18370 <__assert_fail@plt+0x6b1c>
   1771c:	cmp	r5, #0
   17720:	blt	18370 <__assert_fail@plt+0x6b1c>
   17724:	cmp	r5, #1
   17728:	movcs	r4, r5
   1772c:	movcc	r4, #1
   17730:	cmp	r4, sl
   17734:	bcs	1688c <__assert_fail@plt+0x5038>
   17738:	cmp	r6, #0
   1773c:	beq	17778 <__assert_fail@plt+0x5f24>
   17740:	cmp	r5, #1
   17744:	ble	17770 <__assert_fail@plt+0x5f1c>
   17748:	ldr	r3, [sp, #44]	; 0x2c
   1774c:	sub	r2, r5, #1
   17750:	mov	r0, r6
   17754:	cmp	r3, #43	; 0x2b
   17758:	cmpne	r3, #48	; 0x30
   1775c:	add	r3, r6, r2
   17760:	moveq	r1, #48	; 0x30
   17764:	movne	r1, #32
   17768:	mov	r6, r3
   1776c:	bl	116e0 <memset@plt>
   17770:	ldrb	r3, [r8]
   17774:	strb	r3, [r6], #1
   17778:	add	fp, fp, r4
   1777c:	mov	r4, r8
   17780:	b	1684c <__assert_fail@plt+0x4ff8>
   17784:	cmp	r7, #79	; 0x4f
   17788:	beq	16e28 <__assert_fail@plt+0x55d4>
   1778c:	mov	r3, #88	; 0x58
   17790:	b	17578 <__assert_fail@plt+0x5d24>
   17794:	cmp	r7, #69	; 0x45
   17798:	beq	16e28 <__assert_fail@plt+0x55d4>
   1779c:	ldr	r1, [sp, #48]	; 0x30
   177a0:	mov	r0, #2
   177a4:	ldr	lr, [sp, #64]	; 0x40
   177a8:	str	r0, [sp, #88]	; 0x58
   177ac:	ldr	r2, [r1, #24]
   177b0:	ldr	r1, [r1, #28]
   177b4:	add	r2, r2, #6
   177b8:	asr	r0, r2, #31
   177bc:	smull	r8, ip, lr, r2
   177c0:	add	ip, ip, r2
   177c4:	rsb	r0, r0, ip, asr #2
   177c8:	rsb	r0, r0, r0, lsl #3
   177cc:	sub	r2, r2, r0
   177d0:	sub	r1, r1, r2
   177d4:	add	r1, r1, #7
   177d8:	asr	r2, r1, #31
   177dc:	smull	ip, r0, lr, r1
   177e0:	add	r1, r0, r1
   177e4:	rsb	r2, r2, r1, asr #2
   177e8:	b	170d8 <__assert_fail@plt+0x5884>
   177ec:	cmp	r7, #69	; 0x45
   177f0:	beq	16e28 <__assert_fail@plt+0x55d4>
   177f4:	ldr	r1, [sp, #48]	; 0x30
   177f8:	mov	r0, #2
   177fc:	str	r0, [sp, #88]	; 0x58
   17800:	ldr	r2, [r1, #24]
   17804:	ldr	r1, [r1, #28]
   17808:	sub	r1, r1, r2
   1780c:	ldr	r2, [sp, #64]	; 0x40
   17810:	add	r1, r1, #7
   17814:	smull	r2, r0, r2, r1
   17818:	asr	r2, r1, #31
   1781c:	add	r1, r0, r1
   17820:	rsb	r2, r2, r1, asr #2
   17824:	b	170d8 <__assert_fail@plt+0x5884>
   17828:	mov	r4, r8
   1782c:	ldr	r3, [sp, #28]
   17830:	movw	r9, #61692	; 0xf0fc
   17834:	movt	r9, #1
   17838:	sub	sl, r3, fp
   1783c:	mvn	r3, #0
   17840:	str	r3, [sp, #84]	; 0x54
   17844:	ldr	r7, [sp, #44]	; 0x2c
   17848:	mov	r2, r9
   1784c:	mov	r0, #0
   17850:	ldr	r3, [sp, #48]	; 0x30
   17854:	ldr	r1, [sp, #60]	; 0x3c
   17858:	ldr	ip, [sp, #84]	; 0x54
   1785c:	stm	sp, {r1, r7, ip}
   17860:	mvn	r1, #0
   17864:	ldr	ip, [sp, #1188]	; 0x4a4
   17868:	str	ip, [sp, #12]
   1786c:	ldr	ip, [sp, #1192]	; 0x4a8
   17870:	str	ip, [sp, #16]
   17874:	ldr	ip, [sp, #1196]	; 0x4ac
   17878:	str	ip, [sp, #20]
   1787c:	bl	1670c <__assert_fail@plt+0x4eb8>
   17880:	cmp	r7, #45	; 0x2d
   17884:	mov	r8, r0
   17888:	beq	18178 <__assert_fail@plt+0x6924>
   1788c:	cmp	r5, #0
   17890:	blt	18178 <__assert_fail@plt+0x6924>
   17894:	cmp	r0, r5
   17898:	movcs	r7, r0
   1789c:	movcc	r7, r5
   178a0:	cmp	r7, sl
   178a4:	bcs	1688c <__assert_fail@plt+0x5038>
   178a8:	cmp	r6, #0
   178ac:	beq	171b0 <__assert_fail@plt+0x595c>
   178b0:	cmp	r5, r8
   178b4:	bls	178e0 <__assert_fail@plt+0x608c>
   178b8:	ldr	r3, [sp, #44]	; 0x2c
   178bc:	sub	r2, r5, r8
   178c0:	mov	r0, r6
   178c4:	cmp	r3, #43	; 0x2b
   178c8:	cmpne	r3, #48	; 0x30
   178cc:	add	r3, r6, r2
   178d0:	moveq	r1, #48	; 0x30
   178d4:	movne	r1, #32
   178d8:	mov	r6, r3
   178dc:	bl	116e0 <memset@plt>
   178e0:	ldr	r0, [sp, #44]	; 0x2c
   178e4:	mov	r2, r9
   178e8:	mov	r1, sl
   178ec:	ldr	r3, [sp, #60]	; 0x3c
   178f0:	ldr	ip, [sp, #84]	; 0x54
   178f4:	str	r3, [sp]
   178f8:	ldr	r3, [sp, #48]	; 0x30
   178fc:	stmib	sp, {r0, ip}
   17900:	mov	r0, r6
   17904:	add	r6, r6, r8
   17908:	ldr	ip, [sp, #1188]	; 0x4a4
   1790c:	str	ip, [sp, #12]
   17910:	ldr	ip, [sp, #1192]	; 0x4a8
   17914:	str	ip, [sp, #16]
   17918:	ldr	ip, [sp, #1196]	; 0x4ac
   1791c:	str	ip, [sp, #20]
   17920:	bl	1670c <__assert_fail@plt+0x4eb8>
   17924:	b	171b0 <__assert_fail@plt+0x595c>
   17928:	cmp	r7, #69	; 0x45
   1792c:	beq	16e28 <__assert_fail@plt+0x55d4>
   17930:	mov	r2, #2
   17934:	str	r2, [sp, #88]	; 0x58
   17938:	ldr	r2, [sp, #48]	; 0x30
   1793c:	ldr	r2, [r2]
   17940:	b	170d8 <__assert_fail@plt+0x5884>
   17944:	mov	r4, r8
   17948:	mov	r7, #0
   1794c:	ldr	r3, [sp, #28]
   17950:	cmp	r7, #69	; 0x45
   17954:	sub	sl, r3, fp
   17958:	beq	16e30 <__assert_fail@plt+0x55dc>
   1795c:	cmp	r5, #0
   17960:	mov	r7, #9
   17964:	ldr	r0, [sp, #72]	; 0x48
   17968:	movle	r5, #9
   1796c:	ldr	r3, [sp, #1196]	; 0x4ac
   17970:	b	17980 <__assert_fail@plt+0x612c>
   17974:	smull	r2, r3, r0, r3
   17978:	sub	r7, r7, #1
   1797c:	rsb	r3, r1, r3, asr #2
   17980:	cmp	r7, r5
   17984:	asr	r1, r3, #31
   17988:	bgt	17974 <__assert_fail@plt+0x6120>
   1798c:	cmp	r7, #1
   17990:	smull	r1, r2, r0, r3
   17994:	asr	r1, r3, #31
   17998:	ble	1823c <__assert_fail@plt+0x69e8>
   1799c:	rsb	r2, r1, r2, asr #2
   179a0:	add	r2, r2, r2, lsl #2
   179a4:	cmp	r3, r2, lsl #1
   179a8:	beq	17974 <__assert_fail@plt+0x6120>
   179ac:	ldr	lr, [sp, #72]	; 0x48
   179b0:	add	r2, sp, #96	; 0x60
   179b4:	sub	ip, r7, #1
   179b8:	add	ip, r2, ip
   179bc:	rsb	r2, r2, #1
   179c0:	smull	r8, r0, lr, r3
   179c4:	rsb	r1, r1, r0, asr #2
   179c8:	add	r0, r1, r1, lsl #2
   179cc:	sub	r0, r3, r0, lsl #1
   179d0:	mov	r3, r1
   179d4:	asr	r1, r1, #31
   179d8:	add	r0, r0, #48	; 0x30
   179dc:	strb	r0, [ip], #-1
   179e0:	add	r0, r2, ip
   179e4:	cmp	r0, #0
   179e8:	bgt	179c0 <__assert_fail@plt+0x616c>
   179ec:	ldr	r3, [sp, #44]	; 0x2c
   179f0:	cmp	r3, #0
   179f4:	bne	18338 <__assert_fail@plt+0x6ae4>
   179f8:	cmp	sl, r7
   179fc:	bls	1688c <__assert_fail@plt+0x5038>
   17a00:	ldr	r3, [sp, #28]
   17a04:	cmp	r6, #0
   17a08:	add	fp, fp, r7
   17a0c:	sub	r8, r3, fp
   17a10:	movne	r3, #48	; 0x30
   17a14:	strne	r3, [sp, #44]	; 0x2c
   17a18:	beq	1847c <__assert_fail@plt+0x6c28>
   17a1c:	ldr	r3, [sp, #60]	; 0x3c
   17a20:	mov	r2, r7
   17a24:	add	r1, sp, #96	; 0x60
   17a28:	mov	r0, r6
   17a2c:	cmp	r3, #0
   17a30:	beq	1842c <__assert_fail@plt+0x6bd8>
   17a34:	bl	166b8 <__assert_fail@plt+0x4e64>
   17a38:	ldr	r3, [sp, #44]	; 0x2c
   17a3c:	add	r6, r6, r7
   17a40:	cmp	r3, #45	; 0x2d
   17a44:	beq	18360 <__assert_fail@plt+0x6b0c>
   17a48:	sub	r2, r5, r7
   17a4c:	cmp	r2, r8
   17a50:	bcs	1688c <__assert_fail@plt+0x5038>
   17a54:	cmp	r6, #0
   17a58:	addeq	fp, fp, r2
   17a5c:	beq	1684c <__assert_fail@plt+0x4ff8>
   17a60:	cmp	r2, #0
   17a64:	beq	1684c <__assert_fail@plt+0x4ff8>
   17a68:	ldr	r3, [sp, #44]	; 0x2c
   17a6c:	mov	r0, r6
   17a70:	add	fp, fp, r2
   17a74:	cmp	r3, #43	; 0x2b
   17a78:	cmpne	r3, #48	; 0x30
   17a7c:	add	r3, r6, r2
   17a80:	moveq	r1, #48	; 0x30
   17a84:	movne	r1, #32
   17a88:	mov	r6, r3
   17a8c:	bl	116e0 <memset@plt>
   17a90:	b	1684c <__assert_fail@plt+0x4ff8>
   17a94:	cmp	r7, #69	; 0x45
   17a98:	beq	16e28 <__assert_fail@plt+0x55d4>
   17a9c:	mov	r2, #2
   17aa0:	str	r2, [sp, #88]	; 0x58
   17aa4:	ldr	r2, [sp, #48]	; 0x30
   17aa8:	ldr	r2, [r2, #4]
   17aac:	b	170d8 <__assert_fail@plt+0x5884>
   17ab0:	cmp	r7, #69	; 0x45
   17ab4:	beq	16e28 <__assert_fail@plt+0x55d4>
   17ab8:	mov	r1, #2
   17abc:	ldr	r2, [sp, #32]
   17ac0:	str	r1, [sp, #88]	; 0x58
   17ac4:	b	170d8 <__assert_fail@plt+0x5884>
   17ac8:	cmp	r7, #69	; 0x45
   17acc:	beq	16e28 <__assert_fail@plt+0x55d4>
   17ad0:	mov	r2, #2
   17ad4:	str	r2, [sp, #88]	; 0x58
   17ad8:	ldr	r2, [sp, #48]	; 0x30
   17adc:	ldr	r2, [r2, #8]
   17ae0:	b	170d8 <__assert_fail@plt+0x5884>
   17ae4:	cmp	r7, #69	; 0x45
   17ae8:	beq	16e28 <__assert_fail@plt+0x55d4>
   17aec:	ldr	r2, [sp, #48]	; 0x30
   17af0:	ldr	r8, [r2, #20]
   17af4:	ldr	r1, [r2, #24]
   17af8:	ldr	r9, [r2, #28]
   17afc:	cmp	r8, #0
   17b00:	ldr	r2, [sp, #64]	; 0x40
   17b04:	str	r1, [sp, #84]	; 0x54
   17b08:	sub	r1, r9, r1
   17b0c:	add	r1, r1, #380	; 0x17c
   17b10:	add	r1, r1, #2
   17b14:	asr	r0, r1, #31
   17b18:	smull	r2, ip, r2, r1
   17b1c:	movlt	r2, #300	; 0x12c
   17b20:	mvnge	r2, #99	; 0x63
   17b24:	add	ip, ip, r1
   17b28:	add	r2, r8, r2
   17b2c:	rsb	r0, r0, ip, asr #2
   17b30:	rsb	r0, r0, r0, lsl #3
   17b34:	sub	r0, r1, r0
   17b38:	sub	sl, r9, r0
   17b3c:	adds	sl, sl, #3
   17b40:	bmi	18280 <__assert_fail@plt+0x6a2c>
   17b44:	tst	r2, #3
   17b48:	movwne	r2, #365	; 0x16d
   17b4c:	bne	17b94 <__assert_fail@plt+0x6340>
   17b50:	ldr	r1, [sp, #68]	; 0x44
   17b54:	mov	ip, #100	; 0x64
   17b58:	smull	r1, r0, r1, r2
   17b5c:	asr	r1, r2, #31
   17b60:	rsb	r1, r1, r0, asr #5
   17b64:	mls	r1, ip, r1, r2
   17b68:	cmp	r1, #0
   17b6c:	movwne	r2, #366	; 0x16e
   17b70:	bne	17b94 <__assert_fail@plt+0x6340>
   17b74:	mov	ip, #400	; 0x190
   17b78:	movw	r1, #365	; 0x16d
   17b7c:	movw	lr, #366	; 0x16e
   17b80:	sdiv	r0, r2, ip
   17b84:	mls	r2, ip, r0, r2
   17b88:	cmp	r2, #0
   17b8c:	movne	r2, r1
   17b90:	moveq	r2, lr
   17b94:	sub	r9, r9, r2
   17b98:	ldr	r0, [sp, #64]	; 0x40
   17b9c:	ldr	r2, [sp, #84]	; 0x54
   17ba0:	sub	r2, r9, r2
   17ba4:	add	r2, r2, #380	; 0x17c
   17ba8:	add	r2, r2, #2
   17bac:	asr	r1, r2, #31
   17bb0:	smull	ip, r0, r0, r2
   17bb4:	add	r0, r0, r2
   17bb8:	rsb	r1, r1, r0, asr #2
   17bbc:	rsb	r1, r1, r1, lsl #3
   17bc0:	sub	r2, r2, r1
   17bc4:	sub	r2, r9, r2
   17bc8:	add	r2, r2, #3
   17bcc:	cmp	r2, #0
   17bd0:	movge	sl, r2
   17bd4:	movge	lr, #1
   17bd8:	movlt	lr, #0
   17bdc:	cmp	r3, #71	; 0x47
   17be0:	beq	183ac <__assert_fail@plt+0x6b58>
   17be4:	cmp	r3, #103	; 0x67
   17be8:	bne	18388 <__assert_fail@plt+0x6b34>
   17bec:	ldr	ip, [sp, #68]	; 0x44
   17bf0:	mov	r0, #100	; 0x64
   17bf4:	smull	r2, r1, ip, r8
   17bf8:	asr	r2, r8, #31
   17bfc:	rsb	r2, r2, r1, asr #5
   17c00:	mls	r2, r0, r2, r8
   17c04:	add	r2, r2, lr
   17c08:	asr	r1, r2, #31
   17c0c:	smull	r9, ip, ip, r2
   17c10:	rsb	ip, r1, ip, asr #5
   17c14:	mls	ip, r0, ip, r2
   17c18:	cmp	ip, #0
   17c1c:	bge	16f5c <__assert_fail@plt+0x5708>
   17c20:	movw	r2, #63636	; 0xf894
   17c24:	movt	r2, #65535	; 0xffff
   17c28:	sub	r2, r2, lr
   17c2c:	cmp	r2, r8
   17c30:	ldr	r2, [sp, #44]	; 0x2c
   17c34:	ble	184f0 <__assert_fail@plt+0x6c9c>
   17c38:	cmp	r2, #0
   17c3c:	rsb	ip, ip, #0
   17c40:	beq	16f68 <__assert_fail@plt+0x5714>
   17c44:	ldr	r2, [sp, #44]	; 0x2c
   17c48:	cmp	r2, #43	; 0x2b
   17c4c:	beq	18248 <__assert_fail@plt+0x69f4>
   17c50:	mov	r2, #0
   17c54:	mov	r1, r2
   17c58:	mov	r2, #1
   17c5c:	str	r1, [sp, #84]	; 0x54
   17c60:	str	r1, [sp, #92]	; 0x5c
   17c64:	mov	r1, #2
   17c68:	str	r1, [sp, #88]	; 0x58
   17c6c:	b	16f94 <__assert_fail@plt+0x5740>
   17c70:	mov	r4, r8
   17c74:	mov	r7, #0
   17c78:	ldr	r3, [sp, #28]
   17c7c:	cmp	r7, #0
   17c80:	sub	sl, r3, fp
   17c84:	bne	16e30 <__assert_fail@plt+0x55dc>
   17c88:	ldr	r3, [sp, #44]	; 0x2c
   17c8c:	clz	r3, r3
   17c90:	lsr	r3, r3, #5
   17c94:	ands	r3, r3, r5, lsr #31
   17c98:	bne	18494 <__assert_fail@plt+0x6c40>
   17c9c:	sub	r3, r5, #6
   17ca0:	movw	r9, #61704	; 0xf108
   17ca4:	movt	r9, #1
   17ca8:	bic	r3, r3, r3, asr #31
   17cac:	str	r3, [sp, #84]	; 0x54
   17cb0:	b	17844 <__assert_fail@plt+0x5ff0>
   17cb4:	cmp	r7, #69	; 0x45
   17cb8:	beq	18330 <__assert_fail@plt+0x6adc>
   17cbc:	ldr	r2, [sp, #48]	; 0x30
   17cc0:	movw	ip, #1899	; 0x76b
   17cc4:	ldr	r0, [r2, #20]
   17cc8:	movw	r2, #63636	; 0xf894
   17ccc:	movt	r2, #65535	; 0xffff
   17cd0:	add	r1, r0, #1888	; 0x760
   17cd4:	cmp	r0, r2
   17cd8:	add	r1, r1, #12
   17cdc:	movge	lr, #0
   17ce0:	movlt	lr, #1
   17ce4:	cmp	r1, ip
   17ce8:	mvnls	r1, #98	; 0x62
   17cec:	movhi	r1, #0
   17cf0:	add	r1, r1, r0
   17cf4:	cmp	r0, r2
   17cf8:	ldr	r0, [sp, #44]	; 0x2c
   17cfc:	movlt	r2, #0
   17d00:	movge	r2, #1
   17d04:	asr	ip, r1, #31
   17d08:	str	lr, [sp, #84]	; 0x54
   17d0c:	cmp	r0, #0
   17d10:	ldr	r0, [sp, #68]	; 0x44
   17d14:	smull	r0, r1, r0, r1
   17d18:	rsb	r1, ip, r1, asr #5
   17d1c:	add	ip, r1, #19
   17d20:	bne	18314 <__assert_fail@plt+0x6ac0>
   17d24:	ldr	r1, [sp, #1180]	; 0x49c
   17d28:	cmp	r1, #43	; 0x2b
   17d2c:	beq	1846c <__assert_fail@plt+0x6c18>
   17d30:	ldr	r1, [sp, #1180]	; 0x49c
   17d34:	mov	r0, #2
   17d38:	str	r1, [sp, #44]	; 0x2c
   17d3c:	mov	r1, #0
   17d40:	strd	r0, [sp, #88]	; 0x58
   17d44:	b	16f94 <__assert_fail@plt+0x5740>
   17d48:	mov	r4, r8
   17d4c:	mov	r7, #0
   17d50:	ldr	r3, [sp, #28]
   17d54:	cmp	r7, #0
   17d58:	sub	sl, r3, fp
   17d5c:	bne	16e30 <__assert_fail@plt+0x55dc>
   17d60:	mvn	r3, #0
   17d64:	movw	r9, #61724	; 0xf11c
   17d68:	movt	r9, #1
   17d6c:	str	r3, [sp, #84]	; 0x54
   17d70:	b	17844 <__assert_fail@plt+0x5ff0>
   17d74:	cmp	r7, #69	; 0x45
   17d78:	beq	16e28 <__assert_fail@plt+0x55d4>
   17d7c:	ldr	r2, [sp, #60]	; 0x3c
   17d80:	cmp	sl, #0
   17d84:	mov	r3, #66	; 0x42
   17d88:	movne	r2, sl
   17d8c:	mov	r8, #0
   17d90:	str	r2, [sp, #60]	; 0x3c
   17d94:	b	170a4 <__assert_fail@plt+0x5850>
   17d98:	mov	r4, r8
   17d9c:	mov	r7, #0
   17da0:	mov	r3, #114	; 0x72
   17da4:	mov	r8, #0
   17da8:	b	170a4 <__assert_fail@plt+0x5850>
   17dac:	mov	r4, r8
   17db0:	mov	r7, #0
   17db4:	mov	r8, #0
   17db8:	ldr	r2, [sp, #60]	; 0x3c
   17dbc:	cmp	sl, #0
   17dc0:	mov	r3, #112	; 0x70
   17dc4:	movne	r2, #0
   17dc8:	movne	r8, sl
   17dcc:	str	r2, [sp, #60]	; 0x3c
   17dd0:	b	170a4 <__assert_fail@plt+0x5850>
   17dd4:	mov	r4, r8
   17dd8:	mov	r7, #0
   17ddc:	mov	r8, #1
   17de0:	b	17db8 <__assert_fail@plt+0x6564>
   17de4:	mov	r4, r8
   17de8:	ldr	r3, [sp, #28]
   17dec:	movw	r9, #61716	; 0xf114
   17df0:	movt	r9, #1
   17df4:	sub	sl, r3, fp
   17df8:	mvn	r3, #0
   17dfc:	str	r3, [sp, #84]	; 0x54
   17e00:	b	17844 <__assert_fail@plt+0x5ff0>
   17e04:	mov	r4, r8
   17e08:	mov	r7, #0
   17e0c:	mov	sl, #0
   17e10:	ldr	r1, [sp, #48]	; 0x30
   17e14:	ldr	r2, [r1, #32]
   17e18:	cmp	r2, #0
   17e1c:	blt	1684c <__assert_fail@plt+0x4ff8>
   17e20:	ldr	r1, [r1, #36]	; 0x24
   17e24:	cmp	r1, #0
   17e28:	movlt	r2, #1
   17e2c:	strlt	r2, [sp, #84]	; 0x54
   17e30:	blt	17e58 <__assert_fail@plt+0x6604>
   17e34:	movne	r2, #0
   17e38:	strne	r2, [sp, #84]	; 0x54
   17e3c:	bne	17e58 <__assert_fail@plt+0x6604>
   17e40:	ldr	r2, [sp, #56]	; 0x38
   17e44:	ldrb	r2, [r2]
   17e48:	sub	r2, r2, #45	; 0x2d
   17e4c:	clz	r2, r2
   17e50:	lsr	r2, r2, #5
   17e54:	str	r2, [sp, #84]	; 0x54
   17e58:	ldr	r0, [sp, #80]	; 0x50
   17e5c:	asr	r8, r1, #31
   17e60:	smull	ip, r2, r0, r1
   17e64:	ldr	ip, [sp, #76]	; 0x4c
   17e68:	add	r2, r2, r1
   17e6c:	rsb	r2, r8, r2, asr #5
   17e70:	smull	lr, ip, ip, r1
   17e74:	asr	lr, r2, #31
   17e78:	add	ip, ip, r1
   17e7c:	str	ip, [sp, #88]	; 0x58
   17e80:	smull	ip, r0, r0, r2
   17e84:	ldr	ip, [sp, #88]	; 0x58
   17e88:	add	r0, r0, r2
   17e8c:	rsb	lr, lr, r0, asr #5
   17e90:	rsb	r8, r8, ip, asr #11
   17e94:	rsb	lr, lr, lr, lsl #4
   17e98:	rsb	ip, r2, r2, lsl #4
   17e9c:	sub	lr, r2, lr, lsl #2
   17ea0:	sub	r1, r1, ip, lsl #2
   17ea4:	cmp	sl, #3
   17ea8:	ldrls	pc, [pc, sl, lsl #2]
   17eac:	b	16e28 <__assert_fail@plt+0x55d4>
   17eb0:	andeq	r8, r1, ip, lsr #1
   17eb4:	andeq	r8, r1, r4, asr r0
   17eb8:	andeq	r8, r1, r0, lsr #32
   17ebc:	andeq	r8, r1, ip, ror r0
   17ec0:	mov	r4, r8
   17ec4:	mov	r7, #0
   17ec8:	ldrb	r2, [r4, #1]
   17ecc:	add	r1, r4, #1
   17ed0:	cmp	r2, #58	; 0x3a
   17ed4:	movne	sl, #1
   17ed8:	beq	18434 <__assert_fail@plt+0x6be0>
   17edc:	cmp	r2, #122	; 0x7a
   17ee0:	bne	16e28 <__assert_fail@plt+0x55d4>
   17ee4:	mov	r4, r1
   17ee8:	b	17e10 <__assert_fail@plt+0x65bc>
   17eec:	cmp	r7, #0
   17ef0:	bne	16e28 <__assert_fail@plt+0x55d4>
   17ef4:	mov	r8, r4
   17ef8:	ldr	r3, [sp, #60]	; 0x3c
   17efc:	cmp	sl, #0
   17f00:	mov	r4, r8
   17f04:	movne	r3, sl
   17f08:	str	r3, [sp, #60]	; 0x3c
   17f0c:	mov	r3, #65	; 0x41
   17f10:	b	1759c <__assert_fail@plt+0x5d48>
   17f14:	mov	r4, r8
   17f18:	mov	r7, #0
   17f1c:	b	17d7c <__assert_fail@plt+0x6528>
   17f20:	mov	r4, r8
   17f24:	mov	r7, #0
   17f28:	b	174c4 <__assert_fail@plt+0x5c70>
   17f2c:	mov	r4, r8
   17f30:	mov	r7, #0
   17f34:	b	17484 <__assert_fail@plt+0x5c30>
   17f38:	mov	r4, r8
   17f3c:	mov	r7, #0
   17f40:	b	1754c <__assert_fail@plt+0x5cf8>
   17f44:	mov	r4, r8
   17f48:	mov	r7, #0
   17f4c:	b	17530 <__assert_fail@plt+0x5cdc>
   17f50:	mov	r4, r8
   17f54:	mov	r7, #0
   17f58:	b	1751c <__assert_fail@plt+0x5cc8>
   17f5c:	mov	r4, r8
   17f60:	mov	r7, #0
   17f64:	b	17500 <__assert_fail@plt+0x5cac>
   17f68:	mov	r4, r8
   17f6c:	mov	r7, #0
   17f70:	b	174ec <__assert_fail@plt+0x5c98>
   17f74:	mov	r4, r8
   17f78:	mov	r7, #0
   17f7c:	b	17cbc <__assert_fail@plt+0x6468>
   17f80:	mov	r4, r8
   17f84:	mov	r7, #0
   17f88:	b	17aec <__assert_fail@plt+0x6298>
   17f8c:	mov	r4, r8
   17f90:	mov	r7, #0
   17f94:	b	17ad0 <__assert_fail@plt+0x627c>
   17f98:	mov	r4, r8
   17f9c:	mov	r7, #0
   17fa0:	b	17ab8 <__assert_fail@plt+0x6264>
   17fa4:	mov	r4, r8
   17fa8:	mov	r7, #0
   17fac:	b	17a9c <__assert_fail@plt+0x6248>
   17fb0:	mov	r4, r8
   17fb4:	mov	r7, #0
   17fb8:	b	16f20 <__assert_fail@plt+0x56cc>
   17fbc:	mov	r4, r8
   17fc0:	mov	r7, #0
   17fc4:	b	170c8 <__assert_fail@plt+0x5874>
   17fc8:	mov	r4, r8
   17fcc:	mov	r7, #0
   17fd0:	b	1709c <__assert_fail@plt+0x5848>
   17fd4:	mov	r4, r8
   17fd8:	mov	r7, #0
   17fdc:	b	177f4 <__assert_fail@plt+0x5fa0>
   17fe0:	mov	r4, r8
   17fe4:	mov	r7, #0
   17fe8:	b	1779c <__assert_fail@plt+0x5f48>
   17fec:	mov	r4, r8
   17ff0:	mov	r7, #0
   17ff4:	b	1778c <__assert_fail@plt+0x5f38>
   17ff8:	mov	r4, r8
   17ffc:	mov	r7, #0
   18000:	b	1768c <__assert_fail@plt+0x5e38>
   18004:	mov	r4, r8
   18008:	b	17588 <__assert_fail@plt+0x5d34>
   1800c:	mov	r4, r8
   18010:	mov	r7, #0
   18014:	b	17930 <__assert_fail@plt+0x60dc>
   18018:	mov	r4, r8
   1801c:	b	16e28 <__assert_fail@plt+0x55d4>
   18020:	mov	ip, #100	; 0x64
   18024:	movw	r0, #10000	; 0x2710
   18028:	ldr	r2, [sp, #84]	; 0x54
   1802c:	mul	ip, ip, lr
   18030:	mov	lr, #1
   18034:	str	lr, [sp, #92]	; 0x5c
   18038:	mov	lr, #20
   1803c:	mla	ip, r0, r8, ip
   18040:	mov	r0, #9
   18044:	eor	r2, r2, #1
   18048:	str	r0, [sp, #88]	; 0x58
   1804c:	add	ip, ip, r1
   18050:	b	16f98 <__assert_fail@plt+0x5744>
   18054:	ldr	r2, [sp, #84]	; 0x54
   18058:	mov	r1, #1
   1805c:	mov	ip, #100	; 0x64
   18060:	str	r1, [sp, #92]	; 0x5c
   18064:	mov	r1, #6
   18068:	mla	ip, ip, r8, lr
   1806c:	mov	lr, #4
   18070:	str	r1, [sp, #88]	; 0x58
   18074:	eor	r2, r2, #1
   18078:	b	16f98 <__assert_fail@plt+0x5744>
   1807c:	cmp	r1, #0
   18080:	bne	18020 <__assert_fail@plt+0x67cc>
   18084:	cmp	lr, #0
   18088:	bne	18054 <__assert_fail@plt+0x6800>
   1808c:	ldr	r2, [sp, #84]	; 0x54
   18090:	mov	r1, #1
   18094:	mov	ip, r8
   18098:	str	r1, [sp, #92]	; 0x5c
   1809c:	mov	r1, #3
   180a0:	str	r1, [sp, #88]	; 0x58
   180a4:	eor	r2, r2, #1
   180a8:	b	16f98 <__assert_fail@plt+0x5744>
   180ac:	ldr	r2, [sp, #84]	; 0x54
   180b0:	mov	r1, #1
   180b4:	mov	ip, #100	; 0x64
   180b8:	str	r1, [sp, #92]	; 0x5c
   180bc:	mov	r1, #5
   180c0:	mla	ip, ip, r8, lr
   180c4:	str	r1, [sp, #88]	; 0x58
   180c8:	eor	r2, r2, #1
   180cc:	b	16f94 <__assert_fail@plt+0x5740>
   180d0:	mov	r9, #45	; 0x2d
   180d4:	sub	r2, r5, #1
   180d8:	sub	r2, r2, r8
   180dc:	cmp	r2, #0
   180e0:	movle	r3, #0
   180e4:	andgt	r3, r3, #1
   180e8:	cmp	r3, #0
   180ec:	ldr	r3, [sp, #44]	; 0x2c
   180f0:	moveq	r2, #0
   180f4:	cmp	r3, #95	; 0x5f
   180f8:	beq	1818c <__assert_fail@plt+0x6938>
   180fc:	ldr	r3, [sp, #28]
   18100:	sub	sl, r3, fp
   18104:	cmp	sl, #1
   18108:	bls	1688c <__assert_fail@plt+0x5038>
   1810c:	ldr	r3, [sp, #44]	; 0x2c
   18110:	cmp	r6, #0
   18114:	add	fp, fp, #1
   18118:	strbne	r9, [r6], #1
   1811c:	cmp	r3, #45	; 0x2d
   18120:	beq	18130 <__assert_fail@plt+0x68dc>
   18124:	sub	r5, r5, #1
   18128:	cmp	r5, #0
   1812c:	bge	172dc <__assert_fail@plt+0x5a88>
   18130:	mov	r9, r8
   18134:	mov	r5, #0
   18138:	b	172e8 <__assert_fail@plt+0x5a94>
   1813c:	mov	r1, #48	; 0x30
   18140:	mov	r3, #1
   18144:	str	r1, [sp, #44]	; 0x2c
   18148:	b	17284 <__assert_fail@plt+0x5a30>
   1814c:	mov	fp, r3
   18150:	b	16860 <__assert_fail@plt+0x500c>
   18154:	bl	114b8 <memcpy@plt>
   18158:	b	1734c <__assert_fail@plt+0x5af8>
   1815c:	bl	114b8 <memcpy@plt>
   18160:	b	17088 <__assert_fail@plt+0x5834>
   18164:	add	r1, sp, #113	; 0x71
   18168:	mov	r2, r7
   1816c:	mov	r0, r6
   18170:	bl	16664 <__assert_fail@plt+0x4e10>
   18174:	b	17088 <__assert_fail@plt+0x5834>
   18178:	mov	r7, r8
   1817c:	mov	r5, #0
   18180:	b	178a0 <__assert_fail@plt+0x604c>
   18184:	mov	r9, #43	; 0x2b
   18188:	b	180d4 <__assert_fail@plt+0x6880>
   1818c:	ldr	r3, [sp, #28]
   18190:	add	fp, fp, r2
   18194:	cmp	r6, #0
   18198:	sub	r5, r5, r2
   1819c:	sub	sl, r3, fp
   181a0:	beq	181e8 <__assert_fail@plt+0x6994>
   181a4:	mov	r1, #32
   181a8:	mov	r0, r6
   181ac:	add	r6, r6, r2
   181b0:	bl	116e0 <memset@plt>
   181b4:	b	18104 <__assert_fail@plt+0x68b0>
   181b8:	cmp	r3, #1
   181bc:	bls	1688c <__assert_fail@plt+0x5038>
   181c0:	cmp	r6, #0
   181c4:	mov	r7, #1
   181c8:	bne	17470 <__assert_fail@plt+0x5c1c>
   181cc:	b	171b0 <__assert_fail@plt+0x595c>
   181d0:	cmp	r3, #1
   181d4:	bls	1688c <__assert_fail@plt+0x5038>
   181d8:	cmp	r6, #0
   181dc:	mov	r7, #1
   181e0:	bne	171a8 <__assert_fail@plt+0x5954>
   181e4:	b	171b0 <__assert_fail@plt+0x595c>
   181e8:	cmp	sl, #1
   181ec:	bls	1688c <__assert_fail@plt+0x5038>
   181f0:	add	fp, fp, #1
   181f4:	sub	r5, r5, #1
   181f8:	b	18128 <__assert_fail@plt+0x68d4>
   181fc:	ldr	r1, [sp, #44]	; 0x2c
   18200:	cmp	r1, #43	; 0x2b
   18204:	movne	r0, #4
   18208:	movne	r1, #0
   1820c:	strdne	r0, [sp, #88]	; 0x58
   18210:	bne	16f94 <__assert_fail@plt+0x5740>
   18214:	mov	r1, #4
   18218:	str	r1, [sp, #88]	; 0x58
   1821c:	movw	r1, #9999	; 0x270f
   18220:	cmp	r1, ip
   18224:	bcs	18258 <__assert_fail@plt+0x6a04>
   18228:	mov	r1, #1
   1822c:	str	r1, [sp, #92]	; 0x5c
   18230:	mov	r1, #43	; 0x2b
   18234:	str	r1, [sp, #44]	; 0x2c
   18238:	b	16f94 <__assert_fail@plt+0x5740>
   1823c:	asreq	r1, r3, #31
   18240:	beq	179ac <__assert_fail@plt+0x6158>
   18244:	b	179ec <__assert_fail@plt+0x6198>
   18248:	mov	r0, #0
   1824c:	mov	r1, #2
   18250:	mov	r2, #1
   18254:	strd	r0, [sp, #84]	; 0x54
   18258:	ldr	r1, [sp, #88]	; 0x58
   1825c:	cmp	r5, r1
   18260:	movle	r1, #0
   18264:	movgt	r1, #1
   18268:	str	r1, [sp, #92]	; 0x5c
   1826c:	mov	r1, #43	; 0x2b
   18270:	str	r1, [sp, #44]	; 0x2c
   18274:	b	16f94 <__assert_fail@plt+0x5740>
   18278:	mov	r3, #121	; 0x79
   1827c:	b	16fac <__assert_fail@plt+0x5758>
   18280:	sub	r2, r2, #1
   18284:	tst	r2, #3
   18288:	movwne	r2, #365	; 0x16d
   1828c:	bne	182d4 <__assert_fail@plt+0x6a80>
   18290:	ldr	r1, [sp, #68]	; 0x44
   18294:	mov	ip, #100	; 0x64
   18298:	smull	r1, r0, r1, r2
   1829c:	asr	r1, r2, #31
   182a0:	rsb	r1, r1, r0, asr #5
   182a4:	mls	r1, ip, r1, r2
   182a8:	cmp	r1, #0
   182ac:	movwne	r2, #366	; 0x16e
   182b0:	bne	182d4 <__assert_fail@plt+0x6a80>
   182b4:	mov	ip, #400	; 0x190
   182b8:	movw	r1, #365	; 0x16d
   182bc:	movw	lr, #366	; 0x16e
   182c0:	sdiv	r0, r2, ip
   182c4:	mls	r2, ip, r0, r2
   182c8:	cmp	r2, #0
   182cc:	movne	r2, r1
   182d0:	moveq	r2, lr
   182d4:	add	r9, r9, r2
   182d8:	ldr	r0, [sp, #64]	; 0x40
   182dc:	mvn	lr, #0
   182e0:	ldr	r2, [sp, #84]	; 0x54
   182e4:	sub	r2, r9, r2
   182e8:	add	r2, r2, #380	; 0x17c
   182ec:	add	r2, r2, #2
   182f0:	asr	r1, r2, #31
   182f4:	smull	ip, r0, r0, r2
   182f8:	add	r0, r0, r2
   182fc:	rsb	r1, r1, r0, asr #2
   18300:	rsb	r1, r1, r1, lsl #3
   18304:	sub	r2, r2, r1
   18308:	sub	r2, r9, r2
   1830c:	add	sl, r2, #3
   18310:	b	17bdc <__assert_fail@plt+0x6388>
   18314:	ldr	r1, [sp, #44]	; 0x2c
   18318:	cmp	r1, #43	; 0x2b
   1831c:	beq	1846c <__assert_fail@plt+0x6c18>
   18320:	mov	r0, #2
   18324:	mov	r1, #0
   18328:	strd	r0, [sp, #88]	; 0x58
   1832c:	b	16f94 <__assert_fail@plt+0x5740>
   18330:	mov	r3, #67	; 0x43
   18334:	b	16fac <__assert_fail@plt+0x5758>
   18338:	cmp	r7, sl
   1833c:	bcs	1688c <__assert_fail@plt+0x5038>
   18340:	ldr	r3, [sp, #28]
   18344:	add	fp, fp, r7
   18348:	cmp	r6, #0
   1834c:	sub	r8, r3, fp
   18350:	bne	17a1c <__assert_fail@plt+0x61c8>
   18354:	ldr	r3, [sp, #44]	; 0x2c
   18358:	cmp	r3, #45	; 0x2d
   1835c:	bne	1847c <__assert_fail@plt+0x6c28>
   18360:	ldr	r3, [sp, #28]
   18364:	cmp	r3, fp
   18368:	bne	1684c <__assert_fail@plt+0x4ff8>
   1836c:	b	1688c <__assert_fail@plt+0x5038>
   18370:	cmp	sl, #1
   18374:	bls	1688c <__assert_fail@plt+0x5038>
   18378:	cmp	r6, #0
   1837c:	mov	r4, #1
   18380:	bne	17770 <__assert_fail@plt+0x5f1c>
   18384:	b	17778 <__assert_fail@plt+0x5f24>
   18388:	ldr	r2, [sp, #64]	; 0x40
   1838c:	smull	r2, r1, r2, sl
   18390:	mov	r2, #2
   18394:	str	r2, [sp, #88]	; 0x58
   18398:	asr	r2, sl, #31
   1839c:	add	sl, r1, sl
   183a0:	rsb	r2, r2, sl, asr #2
   183a4:	add	r2, r2, #1
   183a8:	b	170d8 <__assert_fail@plt+0x5884>
   183ac:	movw	r2, #63636	; 0xf894
   183b0:	movt	r2, #65535	; 0xffff
   183b4:	ldr	r1, [sp, #44]	; 0x2c
   183b8:	sub	r2, r2, lr
   183bc:	add	ip, r8, #1888	; 0x760
   183c0:	cmp	r8, r2
   183c4:	add	ip, ip, #12
   183c8:	movlt	r2, #1
   183cc:	movge	r2, #0
   183d0:	add	ip, ip, lr
   183d4:	str	r2, [sp, #84]	; 0x54
   183d8:	movge	r2, #1
   183dc:	movlt	r2, #0
   183e0:	cmp	r1, #0
   183e4:	bne	181fc <__assert_fail@plt+0x69a8>
   183e8:	ldr	r1, [sp, #1180]	; 0x49c
   183ec:	cmp	r1, #43	; 0x2b
   183f0:	beq	18214 <__assert_fail@plt+0x69c0>
   183f4:	mov	r0, #4
   183f8:	str	r1, [sp, #44]	; 0x2c
   183fc:	mov	r1, #0
   18400:	strd	r0, [sp, #88]	; 0x58
   18404:	b	16f94 <__assert_fail@plt+0x5740>
   18408:	mov	r3, #89	; 0x59
   1840c:	b	16fac <__assert_fail@plt+0x5758>
   18410:	bl	114b8 <memcpy@plt>
   18414:	b	17670 <__assert_fail@plt+0x5e1c>
   18418:	mov	r2, r7
   1841c:	mov	r0, r6
   18420:	ldr	r1, [sp, #56]	; 0x38
   18424:	bl	16664 <__assert_fail@plt+0x4e10>
   18428:	b	17670 <__assert_fail@plt+0x5e1c>
   1842c:	bl	114b8 <memcpy@plt>
   18430:	b	17a38 <__assert_fail@plt+0x61e4>
   18434:	add	r0, r4, #2
   18438:	mov	sl, #1
   1843c:	mov	r1, r0
   18440:	ldrb	r2, [r0], #1
   18444:	add	sl, sl, #1
   18448:	cmp	r2, #58	; 0x3a
   1844c:	bne	17edc <__assert_fail@plt+0x6688>
   18450:	b	1843c <__assert_fail@plt+0x6be8>
   18454:	ldr	r2, [sp, #44]	; 0x2c
   18458:	mov	r1, #2
   1845c:	str	r2, [sp, #84]	; 0x54
   18460:	mov	r2, #1
   18464:	str	r1, [sp, #88]	; 0x58
   18468:	b	18258 <__assert_fail@plt+0x6a04>
   1846c:	mov	r1, #2
   18470:	str	r1, [sp, #88]	; 0x58
   18474:	mov	r1, #99	; 0x63
   18478:	b	18220 <__assert_fail@plt+0x69cc>
   1847c:	sub	r5, r5, r7
   18480:	cmp	r8, r5
   18484:	bls	1688c <__assert_fail@plt+0x5038>
   18488:	add	fp, fp, r5
   1848c:	mov	r6, #0
   18490:	b	1684c <__assert_fail@plt+0x4ff8>
   18494:	ldr	r3, [sp, #60]	; 0x3c
   18498:	mov	lr, #4
   1849c:	mov	ip, #43	; 0x2b
   184a0:	mov	r0, r7
   184a4:	movw	r2, #61704	; 0xf108
   184a8:	movt	r2, #1
   184ac:	mvn	r1, #0
   184b0:	mov	r9, r2
   184b4:	mov	r5, r7
   184b8:	stm	sp, {r3, ip, lr}
   184bc:	str	ip, [sp, #44]	; 0x2c
   184c0:	str	lr, [sp, #84]	; 0x54
   184c4:	ldr	r3, [sp, #1188]	; 0x4a4
   184c8:	ldr	lr, [sp, #1192]	; 0x4a8
   184cc:	ldr	ip, [sp, #1196]	; 0x4ac
   184d0:	str	r3, [sp, #12]
   184d4:	ldr	r3, [sp, #48]	; 0x30
   184d8:	str	lr, [sp, #16]
   184dc:	str	ip, [sp, #20]
   184e0:	bl	1670c <__assert_fail@plt+0x4eb8>
   184e4:	mov	r8, r0
   184e8:	mov	r7, r0
   184ec:	b	178a0 <__assert_fail@plt+0x604c>
   184f0:	cmp	r2, #0
   184f4:	add	ip, ip, #100	; 0x64
   184f8:	beq	16f68 <__assert_fail@plt+0x5714>
   184fc:	b	17c44 <__assert_fail@plt+0x63f0>
   18500:	ldr	r2, [sp, #36]	; 0x24
   18504:	mov	r3, #75	; 0x4b
   18508:	str	r3, [r2]
   1850c:	b	16898 <__assert_fail@plt+0x5044>
   18510:	strd	r4, [sp, #-16]!
   18514:	mov	ip, #0
   18518:	str	r6, [sp, #8]
   1851c:	mvn	r6, #0
   18520:	str	lr, [sp, #12]
   18524:	sub	sp, sp, #32
   18528:	ldr	r4, [sp, #48]	; 0x30
   1852c:	add	r5, sp, #31
   18530:	str	ip, [sp]
   18534:	ldr	lr, [sp, #52]	; 0x34
   18538:	str	ip, [sp, #4]
   1853c:	str	r6, [sp, #8]
   18540:	str	r5, [sp, #12]
   18544:	str	r4, [sp, #16]
   18548:	str	lr, [sp, #20]
   1854c:	strb	ip, [sp, #31]
   18550:	bl	1670c <__assert_fail@plt+0x4eb8>
   18554:	add	sp, sp, #32
   18558:	ldrd	r4, [sp]
   1855c:	ldr	r6, [sp, #8]
   18560:	add	sp, sp, #12
   18564:	pop	{pc}		; (ldr pc, [sp], #4)
   18568:	strd	r4, [sp, #-16]!
   1856c:	subs	r4, r0, #0
   18570:	str	r6, [sp, #8]
   18574:	str	lr, [sp, #12]
   18578:	beq	18610 <__assert_fail@plt+0x6dbc>
   1857c:	mov	r1, #47	; 0x2f
   18580:	bl	11770 <strrchr@plt>
   18584:	subs	r5, r0, #0
   18588:	beq	185e8 <__assert_fail@plt+0x6d94>
   1858c:	add	r6, r5, #1
   18590:	sub	r3, r6, r4
   18594:	cmp	r3, #6
   18598:	ble	185e8 <__assert_fail@plt+0x6d94>
   1859c:	movw	r1, #61792	; 0xf160
   185a0:	movt	r1, #1
   185a4:	mov	r2, #7
   185a8:	sub	r0, r5, #6
   185ac:	bl	11818 <strncmp@plt>
   185b0:	cmp	r0, #0
   185b4:	bne	185e8 <__assert_fail@plt+0x6d94>
   185b8:	movw	r1, #61800	; 0xf168
   185bc:	movt	r1, #1
   185c0:	mov	r2, #3
   185c4:	mov	r0, r6
   185c8:	bl	11818 <strncmp@plt>
   185cc:	cmp	r0, #0
   185d0:	movne	r4, r6
   185d4:	bne	185e8 <__assert_fail@plt+0x6d94>
   185d8:	add	r4, r5, #4
   185dc:	movw	r3, #472	; 0x1d8
   185e0:	movt	r3, #3
   185e4:	str	r4, [r3]
   185e8:	movw	r2, #632	; 0x278
   185ec:	movt	r2, #3
   185f0:	ldr	r6, [sp, #8]
   185f4:	movw	r3, #476	; 0x1dc
   185f8:	movt	r3, #3
   185fc:	str	r4, [r2]
   18600:	str	r4, [r3]
   18604:	ldrd	r4, [sp]
   18608:	add	sp, sp, #12
   1860c:	pop	{pc}		; (ldr pc, [sp], #4)
   18610:	movw	r3, #488	; 0x1e8
   18614:	movt	r3, #3
   18618:	movw	r0, #61736	; 0xf128
   1861c:	movt	r0, #1
   18620:	ldr	r3, [r3]
   18624:	mov	r2, #55	; 0x37
   18628:	mov	r1, #1
   1862c:	bl	11554 <fwrite@plt>
   18630:	bl	11824 <abort@plt>
   18634:	strd	r4, [sp, #-16]!
   18638:	mov	r4, #0
   1863c:	mov	r5, #0
   18640:	cmp	r1, #10
   18644:	str	r6, [sp, #8]
   18648:	strd	r4, [r0]
   1864c:	strd	r4, [r0, #8]
   18650:	str	lr, [sp, #12]
   18654:	strd	r4, [r0, #16]
   18658:	strd	r4, [r0, #24]
   1865c:	strd	r4, [r0, #32]
   18660:	strd	r4, [r0, #40]	; 0x28
   18664:	beq	1867c <__assert_fail@plt+0x6e28>
   18668:	ldrd	r4, [sp]
   1866c:	str	r1, [r0]
   18670:	ldr	r6, [sp, #8]
   18674:	add	sp, sp, #12
   18678:	pop	{pc}		; (ldr pc, [sp], #4)
   1867c:	bl	11824 <abort@plt>
   18680:	mov	r2, #5
   18684:	strd	r4, [sp, #-16]!
   18688:	mov	r5, r0
   1868c:	str	r6, [sp, #8]
   18690:	mov	r6, r1
   18694:	mov	r1, r0
   18698:	mov	r0, #0
   1869c:	str	lr, [sp, #12]
   186a0:	bl	114e8 <dcgettext@plt>
   186a4:	cmp	r5, r0
   186a8:	mov	r4, r0
   186ac:	beq	186c4 <__assert_fail@plt+0x6e70>
   186b0:	mov	r0, r4
   186b4:	ldrd	r4, [sp]
   186b8:	ldr	r6, [sp, #8]
   186bc:	add	sp, sp, #12
   186c0:	pop	{pc}		; (ldr pc, [sp], #4)
   186c4:	bl	1cb20 <__assert_fail@plt+0xb2cc>
   186c8:	ldrb	r3, [r0]
   186cc:	bic	r3, r3, #32
   186d0:	cmp	r3, #85	; 0x55
   186d4:	bne	1873c <__assert_fail@plt+0x6ee8>
   186d8:	ldrb	r3, [r0, #1]
   186dc:	bic	r3, r3, #32
   186e0:	cmp	r3, #84	; 0x54
   186e4:	bne	187bc <__assert_fail@plt+0x6f68>
   186e8:	ldrb	r3, [r0, #2]
   186ec:	bic	r3, r3, #32
   186f0:	cmp	r3, #70	; 0x46
   186f4:	bne	187bc <__assert_fail@plt+0x6f68>
   186f8:	ldrb	r3, [r0, #3]
   186fc:	cmp	r3, #45	; 0x2d
   18700:	bne	187bc <__assert_fail@plt+0x6f68>
   18704:	ldrb	r3, [r0, #4]
   18708:	cmp	r3, #56	; 0x38
   1870c:	bne	187bc <__assert_fail@plt+0x6f68>
   18710:	ldrb	r3, [r0, #5]
   18714:	cmp	r3, #0
   18718:	bne	187bc <__assert_fail@plt+0x6f68>
   1871c:	ldrb	r2, [r4]
   18720:	movw	r3, #61892	; 0xf1c4
   18724:	movt	r3, #1
   18728:	movw	r4, #61904	; 0xf1d0
   1872c:	movt	r4, #1
   18730:	cmp	r2, #96	; 0x60
   18734:	movne	r4, r3
   18738:	b	186b0 <__assert_fail@plt+0x6e5c>
   1873c:	cmp	r3, #71	; 0x47
   18740:	bne	187bc <__assert_fail@plt+0x6f68>
   18744:	ldrb	r3, [r0, #1]
   18748:	bic	r3, r3, #32
   1874c:	cmp	r3, #66	; 0x42
   18750:	bne	187bc <__assert_fail@plt+0x6f68>
   18754:	ldrb	r3, [r0, #2]
   18758:	cmp	r3, #49	; 0x31
   1875c:	bne	187bc <__assert_fail@plt+0x6f68>
   18760:	ldrb	r3, [r0, #3]
   18764:	cmp	r3, #56	; 0x38
   18768:	bne	187bc <__assert_fail@plt+0x6f68>
   1876c:	ldrb	r3, [r0, #4]
   18770:	cmp	r3, #48	; 0x30
   18774:	bne	187bc <__assert_fail@plt+0x6f68>
   18778:	ldrb	r3, [r0, #5]
   1877c:	cmp	r3, #51	; 0x33
   18780:	bne	187bc <__assert_fail@plt+0x6f68>
   18784:	ldrb	r3, [r0, #6]
   18788:	cmp	r3, #48	; 0x30
   1878c:	bne	187bc <__assert_fail@plt+0x6f68>
   18790:	ldrb	r3, [r0, #7]
   18794:	cmp	r3, #0
   18798:	bne	187bc <__assert_fail@plt+0x6f68>
   1879c:	ldrb	r2, [r4]
   187a0:	movw	r3, #61896	; 0xf1c8
   187a4:	movt	r3, #1
   187a8:	movw	r4, #61900	; 0xf1cc
   187ac:	movt	r4, #1
   187b0:	cmp	r2, #96	; 0x60
   187b4:	movne	r4, r3
   187b8:	b	186b0 <__assert_fail@plt+0x6e5c>
   187bc:	movw	r3, #61908	; 0xf1d4
   187c0:	movt	r3, #1
   187c4:	cmp	r6, #9
   187c8:	movw	r4, #61888	; 0xf1c0
   187cc:	movt	r4, #1
   187d0:	movne	r4, r3
   187d4:	b	186b0 <__assert_fail@plt+0x6e5c>
   187d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   187dc:	strd	r6, [sp, #8]
   187e0:	strd	r8, [sp, #16]
   187e4:	strd	sl, [sp, #24]
   187e8:	mov	fp, r0
   187ec:	mov	sl, r1
   187f0:	str	lr, [sp, #32]
   187f4:	sub	sp, sp, #116	; 0x74
   187f8:	ldr	r8, [sp, #152]	; 0x98
   187fc:	str	r3, [sp, #28]
   18800:	ldr	r3, [sp, #156]	; 0x9c
   18804:	str	r2, [sp, #32]
   18808:	and	r4, r3, #2
   1880c:	ubfx	r3, r3, #1, #1
   18810:	str	r3, [sp, #44]	; 0x2c
   18814:	bl	1156c <__ctype_get_mb_cur_max@plt>
   18818:	str	r0, [sp, #64]	; 0x40
   1881c:	cmp	r8, #10
   18820:	ldrls	pc, [pc, r8, lsl #2]
   18824:	b	19f94 <__assert_fail@plt+0x8740>
   18828:	andeq	r8, r1, ip, lsr #24
   1882c:	andeq	r8, r1, r8, asr #25
   18830:	andeq	r9, r1, r4, lsr #5
   18834:	andeq	r8, r1, r8, ror #25
   18838:	muleq	r1, r0, fp
   1883c:	ldrdeq	r8, [r1], -ip
   18840:	andeq	r8, r1, ip, asr ip
   18844:	muleq	r1, r8, ip
   18848:	andeq	r8, r1, r4, asr r8
   1884c:	andeq	r8, r1, r4, asr r8
   18850:	andeq	r8, r1, r4, asr r8
   18854:	cmp	r8, #10
   18858:	beq	18884 <__assert_fail@plt+0x7030>
   1885c:	mov	r1, r8
   18860:	movw	r0, #61912	; 0xf1d8
   18864:	movt	r0, #1
   18868:	bl	18680 <__assert_fail@plt+0x6e2c>
   1886c:	mov	r1, r8
   18870:	str	r0, [sp, #164]	; 0xa4
   18874:	movw	r0, #61908	; 0xf1d4
   18878:	movt	r0, #1
   1887c:	bl	18680 <__assert_fail@plt+0x6e2c>
   18880:	str	r0, [sp, #168]	; 0xa8
   18884:	cmp	r4, #0
   18888:	movne	r4, #0
   1888c:	beq	19c70 <__assert_fail@plt+0x841c>
   18890:	mov	r3, #1
   18894:	mov	r5, #0
   18898:	ldr	r0, [sp, #168]	; 0xa8
   1889c:	str	r3, [sp, #36]	; 0x24
   188a0:	str	r3, [sp, #40]	; 0x28
   188a4:	str	r5, [sp, #68]	; 0x44
   188a8:	bl	11674 <strlen@plt>
   188ac:	ldr	r3, [sp, #168]	; 0xa8
   188b0:	str	r5, [sp, #48]	; 0x30
   188b4:	str	r0, [sp, #56]	; 0x38
   188b8:	str	r3, [sp, #60]	; 0x3c
   188bc:	str	r5, [sp, #72]	; 0x48
   188c0:	str	r8, [sp, #152]	; 0x98
   188c4:	mov	r8, fp
   188c8:	mov	r9, #0
   188cc:	ldr	fp, [sp, #152]	; 0x98
   188d0:	ldr	r3, [sp, #28]
   188d4:	cmn	r3, #1
   188d8:	beq	18e38 <__assert_fail@plt+0x75e4>
   188dc:	ldr	r3, [sp, #28]
   188e0:	subs	r6, r3, r9
   188e4:	movne	r6, #1
   188e8:	cmp	r6, #0
   188ec:	beq	18e50 <__assert_fail@plt+0x75fc>
   188f0:	ldr	r0, [sp, #32]
   188f4:	ldr	r7, [sp, #40]	; 0x28
   188f8:	add	r3, r0, r9
   188fc:	cmp	fp, #2
   18900:	moveq	r7, #0
   18904:	andne	r7, r7, #1
   18908:	str	r3, [sp, #52]	; 0x34
   1890c:	cmp	r7, #0
   18910:	beq	192ec <__assert_fail@plt+0x7a98>
   18914:	ldr	r2, [sp, #56]	; 0x38
   18918:	cmp	r2, #0
   1891c:	beq	19588 <__assert_fail@plt+0x7d34>
   18920:	ldr	r1, [sp, #28]
   18924:	cmp	r2, #1
   18928:	mov	r3, r2
   1892c:	movls	r3, #0
   18930:	movhi	r3, #1
   18934:	add	r5, r9, r2
   18938:	cmn	r1, #1
   1893c:	movne	r3, #0
   18940:	cmp	r3, #0
   18944:	beq	18950 <__assert_fail@plt+0x70fc>
   18948:	bl	11674 <strlen@plt>
   1894c:	str	r0, [sp, #28]
   18950:	ldr	r3, [sp, #28]
   18954:	cmp	r5, r3
   18958:	bhi	19588 <__assert_fail@plt+0x7d34>
   1895c:	ldr	r0, [sp, #52]	; 0x34
   18960:	ldr	r2, [sp, #56]	; 0x38
   18964:	ldr	r1, [sp, #60]	; 0x3c
   18968:	bl	114d0 <memcmp@plt>
   1896c:	cmp	r0, #0
   18970:	bne	19588 <__assert_fail@plt+0x7d34>
   18974:	ldr	r3, [sp, #44]	; 0x2c
   18978:	cmp	r3, #0
   1897c:	bne	19eb8 <__assert_fail@plt+0x8664>
   18980:	ldr	r3, [sp, #52]	; 0x34
   18984:	ldrb	r5, [r3]
   18988:	cmp	r5, #126	; 0x7e
   1898c:	ldrls	pc, [pc, r5, lsl #2]
   18990:	b	19248 <__assert_fail@plt+0x79f4>
   18994:	andeq	r9, r1, ip, asr #2
   18998:	andeq	r9, r1, r8, asr #4
   1899c:	andeq	r9, r1, r8, asr #4
   189a0:	andeq	r9, r1, r8, asr #4
   189a4:	andeq	r9, r1, r8, asr #4
   189a8:	andeq	r9, r1, r8, asr #4
   189ac:	andeq	r9, r1, r8, asr #4
   189b0:	andeq	r9, r1, r0, lsr #2
   189b4:	andeq	r9, r1, r8, lsl r1
   189b8:	andeq	r9, r1, r0, rrx
   189bc:	andeq	r9, r1, ip, lsl #2
   189c0:	andeq	r9, r1, r8, asr r0
   189c4:	andeq	r9, r1, r8, ror #1
   189c8:	andeq	r9, r1, r4, lsr r1
   189cc:	andeq	r9, r1, r8, asr #4
   189d0:	andeq	r9, r1, r8, asr #4
   189d4:	andeq	r9, r1, r8, asr #4
   189d8:	andeq	r9, r1, r8, asr #4
   189dc:	andeq	r9, r1, r8, asr #4
   189e0:	andeq	r9, r1, r8, asr #4
   189e4:	andeq	r9, r1, r8, asr #4
   189e8:	andeq	r9, r1, r8, asr #4
   189ec:	andeq	r9, r1, r8, asr #4
   189f0:	andeq	r9, r1, r8, asr #4
   189f4:	andeq	r9, r1, r8, asr #4
   189f8:	andeq	r9, r1, r8, asr #4
   189fc:	andeq	r9, r1, r8, asr #4
   18a00:	andeq	r9, r1, r8, asr #4
   18a04:	andeq	r9, r1, r8, asr #4
   18a08:	andeq	r9, r1, r8, asr #4
   18a0c:	andeq	r9, r1, r8, asr #4
   18a10:	andeq	r9, r1, r8, asr #4
   18a14:	andeq	r9, r1, r4, lsr #4
   18a18:	andeq	r9, r1, ip, lsr #2
   18a1c:	andeq	r9, r1, ip, lsr #2
   18a20:	andeq	r9, r1, r8, lsl #4
   18a24:	andeq	r9, r1, ip, lsr #2
   18a28:	andeq	r9, r1, ip, lsr r2
   18a2c:	andeq	r9, r1, ip, lsr #2
   18a30:	andeq	r8, r1, r8, lsl #31
   18a34:	andeq	r9, r1, ip, lsr #2
   18a38:	andeq	r9, r1, ip, lsr #2
   18a3c:	andeq	r9, r1, ip, lsr #2
   18a40:	andeq	r9, r1, ip, lsr r2
   18a44:	andeq	r9, r1, ip, lsr r2
   18a48:	andeq	r9, r1, ip, lsr r2
   18a4c:	andeq	r9, r1, ip, lsr r2
   18a50:	andeq	r9, r1, ip, lsr r2
   18a54:	andeq	r9, r1, ip, lsr r2
   18a58:	andeq	r9, r1, ip, lsr r2
   18a5c:	andeq	r9, r1, ip, lsr r2
   18a60:	andeq	r9, r1, ip, lsr r2
   18a64:	andeq	r9, r1, ip, lsr r2
   18a68:	andeq	r9, r1, ip, lsr r2
   18a6c:	andeq	r9, r1, ip, lsr r2
   18a70:	andeq	r9, r1, ip, lsr r2
   18a74:	andeq	r9, r1, ip, lsr r2
   18a78:	andeq	r9, r1, ip, lsr r2
   18a7c:	andeq	r9, r1, ip, lsr r2
   18a80:	andeq	r9, r1, ip, lsr #2
   18a84:	andeq	r9, r1, ip, lsr #2
   18a88:	andeq	r9, r1, ip, lsr #2
   18a8c:	andeq	r9, r1, ip, lsr #2
   18a90:	andeq	r8, r1, ip, asr pc
   18a94:	andeq	r9, r1, r8, asr #4
   18a98:	andeq	r9, r1, ip, lsr r2
   18a9c:	andeq	r9, r1, ip, lsr r2
   18aa0:	andeq	r9, r1, ip, lsr r2
   18aa4:	andeq	r9, r1, ip, lsr r2
   18aa8:	andeq	r9, r1, ip, lsr r2
   18aac:	andeq	r9, r1, ip, lsr r2
   18ab0:	andeq	r9, r1, ip, lsr r2
   18ab4:	andeq	r9, r1, ip, lsr r2
   18ab8:	andeq	r9, r1, ip, lsr r2
   18abc:	andeq	r9, r1, ip, lsr r2
   18ac0:	andeq	r9, r1, ip, lsr r2
   18ac4:	andeq	r9, r1, ip, lsr r2
   18ac8:	andeq	r9, r1, ip, lsr r2
   18acc:	andeq	r9, r1, ip, lsr r2
   18ad0:	andeq	r9, r1, ip, lsr r2
   18ad4:	andeq	r9, r1, ip, lsr r2
   18ad8:	andeq	r9, r1, ip, lsr r2
   18adc:	andeq	r9, r1, ip, lsr r2
   18ae0:	andeq	r9, r1, ip, lsr r2
   18ae4:	andeq	r9, r1, ip, lsr r2
   18ae8:	andeq	r9, r1, ip, lsr r2
   18aec:	andeq	r9, r1, ip, lsr r2
   18af0:	andeq	r9, r1, ip, lsr r2
   18af4:	andeq	r9, r1, ip, lsr r2
   18af8:	andeq	r9, r1, ip, lsr r2
   18afc:	andeq	r9, r1, ip, lsr r2
   18b00:	andeq	r9, r1, ip, lsr #2
   18b04:	andeq	r8, r1, r4, lsl #30
   18b08:	andeq	r9, r1, ip, lsr r2
   18b0c:	andeq	r9, r1, ip, lsr #2
   18b10:	andeq	r9, r1, ip, lsr r2
   18b14:	andeq	r9, r1, ip, lsr #2
   18b18:	andeq	r9, r1, ip, lsr r2
   18b1c:	andeq	r9, r1, ip, lsr r2
   18b20:	andeq	r9, r1, ip, lsr r2
   18b24:	andeq	r9, r1, ip, lsr r2
   18b28:	andeq	r9, r1, ip, lsr r2
   18b2c:	andeq	r9, r1, ip, lsr r2
   18b30:	andeq	r9, r1, ip, lsr r2
   18b34:	andeq	r9, r1, ip, lsr r2
   18b38:	andeq	r9, r1, ip, lsr r2
   18b3c:	andeq	r9, r1, ip, lsr r2
   18b40:	andeq	r9, r1, ip, lsr r2
   18b44:	andeq	r9, r1, ip, lsr r2
   18b48:	andeq	r9, r1, ip, lsr r2
   18b4c:	andeq	r9, r1, ip, lsr r2
   18b50:	andeq	r9, r1, ip, lsr r2
   18b54:	andeq	r9, r1, ip, lsr r2
   18b58:	andeq	r9, r1, ip, lsr r2
   18b5c:	andeq	r9, r1, ip, lsr r2
   18b60:	andeq	r9, r1, ip, lsr r2
   18b64:	andeq	r9, r1, ip, lsr r2
   18b68:	andeq	r9, r1, ip, lsr r2
   18b6c:	andeq	r9, r1, ip, lsr r2
   18b70:	andeq	r9, r1, ip, lsr r2
   18b74:	andeq	r9, r1, ip, lsr r2
   18b78:	andeq	r9, r1, ip, lsr r2
   18b7c:	andeq	r9, r1, ip, lsr r2
   18b80:	andeq	r8, r1, r8, lsr #26
   18b84:	andeq	r9, r1, ip, lsr #2
   18b88:	andeq	r8, r1, r8, lsr #26
   18b8c:	andeq	r9, r1, r8, lsl #4
   18b90:	cmp	r4, #0
   18b94:	moveq	r3, #1
   18b98:	streq	r3, [sp, #40]	; 0x28
   18b9c:	beq	192b0 <__assert_fail@plt+0x7a5c>
   18ba0:	mov	r3, #0
   18ba4:	mov	r2, #1
   18ba8:	mov	r4, r3
   18bac:	str	r2, [sp, #36]	; 0x24
   18bb0:	str	r2, [sp, #44]	; 0x2c
   18bb4:	str	r2, [sp, #56]	; 0x38
   18bb8:	str	r3, [sp, #68]	; 0x44
   18bbc:	movw	r3, #61908	; 0xf1d4
   18bc0:	movt	r3, #1
   18bc4:	str	r4, [sp, #40]	; 0x28
   18bc8:	mov	r8, #2
   18bcc:	str	r4, [sp, #48]	; 0x30
   18bd0:	str	r3, [sp, #60]	; 0x3c
   18bd4:	str	r4, [sp, #72]	; 0x48
   18bd8:	b	188c0 <__assert_fail@plt+0x706c>
   18bdc:	cmp	r4, #0
   18be0:	bne	19e2c <__assert_fail@plt+0x85d8>
   18be4:	cmp	sl, #0
   18be8:	beq	19bec <__assert_fail@plt+0x8398>
   18bec:	mov	r3, #34	; 0x22
   18bf0:	mov	r1, r4
   18bf4:	mov	r2, #1
   18bf8:	strb	r3, [fp]
   18bfc:	movw	r3, #61888	; 0xf1c0
   18c00:	movt	r3, #1
   18c04:	mov	r4, r2
   18c08:	str	r2, [sp, #36]	; 0x24
   18c0c:	str	r2, [sp, #40]	; 0x28
   18c10:	str	r1, [sp, #44]	; 0x2c
   18c14:	str	r1, [sp, #48]	; 0x30
   18c18:	str	r2, [sp, #56]	; 0x38
   18c1c:	str	r3, [sp, #60]	; 0x3c
   18c20:	str	r1, [sp, #68]	; 0x44
   18c24:	str	r1, [sp, #72]	; 0x48
   18c28:	b	188c0 <__assert_fail@plt+0x706c>
   18c2c:	mov	r3, #0
   18c30:	mov	r4, r8
   18c34:	str	r3, [sp, #40]	; 0x28
   18c38:	str	r3, [sp, #44]	; 0x2c
   18c3c:	str	r3, [sp, #48]	; 0x30
   18c40:	str	r8, [sp, #56]	; 0x38
   18c44:	str	r3, [sp, #60]	; 0x3c
   18c48:	str	r3, [sp, #68]	; 0x44
   18c4c:	mov	r3, #1
   18c50:	str	r3, [sp, #36]	; 0x24
   18c54:	str	r8, [sp, #72]	; 0x48
   18c58:	b	188c0 <__assert_fail@plt+0x706c>
   18c5c:	mov	r3, #1
   18c60:	mov	r2, #0
   18c64:	mov	r4, r2
   18c68:	mov	r8, #5
   18c6c:	str	r3, [sp, #36]	; 0x24
   18c70:	str	r3, [sp, #40]	; 0x28
   18c74:	str	r3, [sp, #44]	; 0x2c
   18c78:	str	r2, [sp, #48]	; 0x30
   18c7c:	str	r3, [sp, #56]	; 0x38
   18c80:	movw	r3, #61888	; 0xf1c0
   18c84:	movt	r3, #1
   18c88:	str	r3, [sp, #60]	; 0x3c
   18c8c:	str	r2, [sp, #68]	; 0x44
   18c90:	str	r2, [sp, #72]	; 0x48
   18c94:	b	188c0 <__assert_fail@plt+0x706c>
   18c98:	mov	r3, #0
   18c9c:	mov	r2, #1
   18ca0:	mov	r4, r3
   18ca4:	str	r2, [sp, #36]	; 0x24
   18ca8:	str	r2, [sp, #40]	; 0x28
   18cac:	str	r3, [sp, #44]	; 0x2c
   18cb0:	str	r3, [sp, #48]	; 0x30
   18cb4:	str	r3, [sp, #56]	; 0x38
   18cb8:	str	r3, [sp, #60]	; 0x3c
   18cbc:	str	r3, [sp, #68]	; 0x44
   18cc0:	str	r3, [sp, #72]	; 0x48
   18cc4:	b	188c0 <__assert_fail@plt+0x706c>
   18cc8:	mov	r2, #1
   18ccc:	mov	r3, #0
   18cd0:	mov	r4, r3
   18cd4:	str	r2, [sp, #36]	; 0x24
   18cd8:	str	r2, [sp, #44]	; 0x2c
   18cdc:	str	r8, [sp, #56]	; 0x38
   18ce0:	str	r3, [sp, #68]	; 0x44
   18ce4:	b	18bbc <__assert_fail@plt+0x7368>
   18ce8:	mov	r3, #1
   18cec:	mov	r2, #0
   18cf0:	mov	r4, r2
   18cf4:	mov	r8, #2
   18cf8:	str	r3, [sp, #36]	; 0x24
   18cfc:	str	r3, [sp, #40]	; 0x28
   18d00:	str	r3, [sp, #44]	; 0x2c
   18d04:	str	r2, [sp, #48]	; 0x30
   18d08:	str	r3, [sp, #56]	; 0x38
   18d0c:	movw	r3, #61908	; 0xf1d4
   18d10:	movt	r3, #1
   18d14:	str	r3, [sp, #60]	; 0x3c
   18d18:	str	r2, [sp, #68]	; 0x44
   18d1c:	str	r2, [sp, #72]	; 0x48
   18d20:	b	188c0 <__assert_fail@plt+0x706c>
   18d24:	mov	r7, #0
   18d28:	ldr	r3, [sp, #28]
   18d2c:	cmn	r3, #1
   18d30:	beq	19808 <__assert_fail@plt+0x7fb4>
   18d34:	ldr	r3, [sp, #28]
   18d38:	subs	r2, r3, #1
   18d3c:	movne	r2, #1
   18d40:	sub	r3, fp, #2
   18d44:	cmp	r2, #0
   18d48:	clz	r3, r3
   18d4c:	lsr	r3, r3, #5
   18d50:	bne	18d5c <__assert_fail@plt+0x7508>
   18d54:	cmp	r9, #0
   18d58:	beq	19568 <__assert_fail@plt+0x7d14>
   18d5c:	mov	r6, #0
   18d60:	ldr	r2, [sp, #40]	; 0x28
   18d64:	eor	r2, r2, #1
   18d68:	orrs	r3, r3, r2
   18d6c:	bne	18f44 <__assert_fail@plt+0x76f0>
   18d70:	ldr	r2, [sp, #160]	; 0xa0
   18d74:	cmp	r2, #0
   18d78:	beq	18d98 <__assert_fail@plt+0x7544>
   18d7c:	ldr	r0, [sp, #160]	; 0xa0
   18d80:	ubfx	r1, r5, #5, #8
   18d84:	and	r2, r5, #31
   18d88:	ldr	r1, [r0, r1, lsl #2]
   18d8c:	lsr	r2, r1, r2
   18d90:	tst	r2, #1
   18d94:	bne	18da0 <__assert_fail@plt+0x754c>
   18d98:	cmp	r7, #0
   18d9c:	beq	19010 <__assert_fail@plt+0x77bc>
   18da0:	ldr	r2, [sp, #44]	; 0x2c
   18da4:	sub	r3, fp, #2
   18da8:	clz	r3, r3
   18dac:	lsr	r3, r3, #5
   18db0:	cmp	r2, #0
   18db4:	bne	19b5c <__assert_fail@plt+0x8308>
   18db8:	ldr	r2, [sp, #48]	; 0x30
   18dbc:	eor	r2, r2, #1
   18dc0:	ands	r3, r3, r2
   18dc4:	beq	18dfc <__assert_fail@plt+0x75a8>
   18dc8:	cmp	sl, r4
   18dcc:	str	r3, [sp, #48]	; 0x30
   18dd0:	movhi	r2, #39	; 0x27
   18dd4:	strbhi	r2, [r8, r4]
   18dd8:	add	r2, r4, #1
   18ddc:	cmp	sl, r2
   18de0:	movhi	r1, #36	; 0x24
   18de4:	strbhi	r1, [r8, r2]
   18de8:	add	r2, r4, #2
   18dec:	add	r4, r4, #3
   18df0:	cmp	sl, r2
   18df4:	movhi	r1, #39	; 0x27
   18df8:	strbhi	r1, [r8, r2]
   18dfc:	cmp	r4, sl
   18e00:	add	r9, r9, #1
   18e04:	movcc	r3, #92	; 0x5c
   18e08:	strbcc	r3, [r8, r4]
   18e0c:	add	r4, r4, #1
   18e10:	cmp	r4, sl
   18e14:	ldr	r3, [sp, #36]	; 0x24
   18e18:	strbcc	r5, [r8, r4]
   18e1c:	cmp	r6, #0
   18e20:	add	r4, r4, #1
   18e24:	moveq	r3, #0
   18e28:	str	r3, [sp, #36]	; 0x24
   18e2c:	ldr	r3, [sp, #28]
   18e30:	cmn	r3, #1
   18e34:	bne	188dc <__assert_fail@plt+0x7088>
   18e38:	ldr	r3, [sp, #32]
   18e3c:	ldrb	r6, [r3, r9]
   18e40:	adds	r6, r6, #0
   18e44:	movne	r6, #1
   18e48:	cmp	r6, #0
   18e4c:	bne	188f0 <__assert_fail@plt+0x709c>
   18e50:	str	fp, [sp, #152]	; 0x98
   18e54:	mov	fp, r8
   18e58:	cmp	r4, #0
   18e5c:	ldr	r1, [sp, #44]	; 0x2c
   18e60:	movne	r3, #0
   18e64:	ldr	r8, [sp, #152]	; 0x98
   18e68:	sub	r2, r8, #2
   18e6c:	clz	r2, r2
   18e70:	lsr	r2, r2, #5
   18e74:	andeq	r3, r2, r1
   18e78:	cmp	r3, #0
   18e7c:	bne	19f38 <__assert_fail@plt+0x86e4>
   18e80:	eor	r3, r1, #1
   18e84:	ands	r2, r2, r3
   18e88:	beq	19e64 <__assert_fail@plt+0x8610>
   18e8c:	ldr	r3, [sp, #68]	; 0x44
   18e90:	cmp	r3, #0
   18e94:	beq	19e68 <__assert_fail@plt+0x8614>
   18e98:	ldr	r3, [sp, #36]	; 0x24
   18e9c:	cmp	r3, #0
   18ea0:	bne	19ef4 <__assert_fail@plt+0x86a0>
   18ea4:	ldr	r3, [sp, #72]	; 0x48
   18ea8:	adds	r3, r3, #0
   18eac:	movne	r3, #1
   18eb0:	cmp	sl, #0
   18eb4:	movne	r3, #0
   18eb8:	cmp	r3, #0
   18ebc:	ldreq	r2, [sp, #68]	; 0x44
   18ec0:	beq	19e68 <__assert_fail@plt+0x8614>
   18ec4:	ldr	r2, [sp, #72]	; 0x48
   18ec8:	str	r3, [sp, #68]	; 0x44
   18ecc:	movw	r3, #61908	; 0xf1d4
   18ed0:	movt	r3, #1
   18ed4:	mov	r1, #39	; 0x27
   18ed8:	mov	r4, #1
   18edc:	ldr	sl, [sp, #72]	; 0x48
   18ee0:	mov	r8, #2
   18ee4:	str	r3, [sp, #60]	; 0x3c
   18ee8:	mov	r3, #0
   18eec:	strb	r1, [fp]
   18ef0:	str	r3, [sp, #44]	; 0x2c
   18ef4:	str	r4, [sp, #56]	; 0x38
   18ef8:	str	r2, [sp, #72]	; 0x48
   18efc:	b	188c0 <__assert_fail@plt+0x706c>
   18f00:	mov	r7, #0
   18f04:	cmp	fp, #2
   18f08:	beq	197e8 <__assert_fail@plt+0x7f94>
   18f0c:	ldr	r2, [sp, #40]	; 0x28
   18f10:	ldr	r3, [sp, #56]	; 0x38
   18f14:	ldr	r1, [sp, #44]	; 0x2c
   18f18:	cmp	r3, #0
   18f1c:	moveq	r3, #0
   18f20:	andne	r3, r2, r1
   18f24:	cmp	r3, #0
   18f28:	moveq	r5, #92	; 0x5c
   18f2c:	moveq	r3, r5
   18f30:	bne	197f4 <__assert_fail@plt+0x7fa0>
   18f34:	ldr	r2, [sp, #40]	; 0x28
   18f38:	cmp	r2, #0
   18f3c:	bne	19c30 <__assert_fail@plt+0x83dc>
   18f40:	mov	r6, #0
   18f44:	ldr	r3, [sp, #44]	; 0x2c
   18f48:	cmp	r3, #0
   18f4c:	beq	197e0 <__assert_fail@plt+0x7f8c>
   18f50:	mov	r3, #0
   18f54:	b	18d70 <__assert_fail@plt+0x751c>
   18f58:	mov	r7, #0
   18f5c:	cmp	fp, #2
   18f60:	beq	19858 <__assert_fail@plt+0x8004>
   18f64:	cmp	fp, #5
   18f68:	beq	1981c <__assert_fail@plt+0x7fc8>
   18f6c:	sub	r3, fp, #2
   18f70:	mov	r6, #0
   18f74:	clz	r3, r3
   18f78:	mov	r5, #63	; 0x3f
   18f7c:	lsr	r3, r3, #5
   18f80:	b	18d60 <__assert_fail@plt+0x750c>
   18f84:	mov	r7, #0
   18f88:	cmp	fp, #2
   18f8c:	movne	r3, #0
   18f90:	movne	r5, #39	; 0x27
   18f94:	strne	r6, [sp, #68]	; 0x44
   18f98:	bne	18d60 <__assert_fail@plt+0x750c>
   18f9c:	ldr	r3, [sp, #44]	; 0x2c
   18fa0:	cmp	r3, #0
   18fa4:	bne	19c60 <__assert_fail@plt+0x840c>
   18fa8:	ldr	r3, [sp, #72]	; 0x48
   18fac:	cmp	sl, #0
   18fb0:	clz	r3, r3
   18fb4:	lsr	r3, r3, #5
   18fb8:	moveq	r3, #0
   18fbc:	cmp	r3, #0
   18fc0:	bne	19b8c <__assert_fail@plt+0x8338>
   18fc4:	cmp	sl, r4
   18fc8:	movhi	r3, #39	; 0x27
   18fcc:	strbhi	r3, [r8, r4]
   18fd0:	add	r3, r4, #1
   18fd4:	cmp	sl, r3
   18fd8:	movhi	r2, #92	; 0x5c
   18fdc:	strbhi	r2, [r8, r3]
   18fe0:	add	r3, r4, #2
   18fe4:	cmp	sl, r3
   18fe8:	bls	18ff4 <__assert_fail@plt+0x77a0>
   18fec:	mov	r2, #39	; 0x27
   18ff0:	strb	r2, [r8, r3]
   18ff4:	mov	r3, #0
   18ff8:	cmp	r7, #0
   18ffc:	add	r4, r4, #3
   19000:	mov	r5, #39	; 0x27
   19004:	str	r3, [sp, #48]	; 0x30
   19008:	str	r6, [sp, #68]	; 0x44
   1900c:	bne	18da0 <__assert_fail@plt+0x754c>
   19010:	ldr	r2, [sp, #48]	; 0x30
   19014:	eor	r3, r3, #1
   19018:	add	r9, r9, #1
   1901c:	and	r3, r3, r2
   19020:	uxtb	r3, r3
   19024:	cmp	r3, #0
   19028:	beq	18e10 <__assert_fail@plt+0x75bc>
   1902c:	cmp	sl, r4
   19030:	movhi	r3, #39	; 0x27
   19034:	strbhi	r3, [r8, r4]
   19038:	add	r3, r4, #1
   1903c:	add	r4, r4, #2
   19040:	cmp	sl, r3
   19044:	movhi	r2, #39	; 0x27
   19048:	strbhi	r2, [r8, r3]
   1904c:	mov	r3, #0
   19050:	str	r3, [sp, #48]	; 0x30
   19054:	b	18e10 <__assert_fail@plt+0x75bc>
   19058:	mov	r3, #118	; 0x76
   1905c:	b	18f34 <__assert_fail@plt+0x76e0>
   19060:	mov	r3, #116	; 0x74
   19064:	ldr	r2, [sp, #44]	; 0x2c
   19068:	cmp	fp, #2
   1906c:	movne	r2, #0
   19070:	andeq	r2, r2, #1
   19074:	cmp	r2, #0
   19078:	beq	18f34 <__assert_fail@plt+0x76e0>
   1907c:	mov	fp, r8
   19080:	mov	r8, #2
   19084:	ldr	r3, [sp, #40]	; 0x28
   19088:	cmp	r3, #0
   1908c:	movne	r8, #4
   19090:	mov	lr, #0
   19094:	mov	r0, fp
   19098:	ldr	r2, [sp, #32]
   1909c:	ldr	r3, [sp, #156]	; 0x9c
   190a0:	ldr	r1, [sp, #164]	; 0xa4
   190a4:	bic	ip, r3, #2
   190a8:	ldr	r3, [sp, #28]
   190ac:	stm	sp, {r8, ip, lr}
   190b0:	ldr	ip, [sp, #168]	; 0xa8
   190b4:	str	r1, [sp, #12]
   190b8:	mov	r1, sl
   190bc:	str	ip, [sp, #16]
   190c0:	bl	187d8 <__assert_fail@plt+0x6f84>
   190c4:	mov	r4, r0
   190c8:	mov	r0, r4
   190cc:	add	sp, sp, #116	; 0x74
   190d0:	ldrd	r4, [sp]
   190d4:	ldrd	r6, [sp, #8]
   190d8:	ldrd	r8, [sp, #16]
   190dc:	ldrd	sl, [sp, #24]
   190e0:	add	sp, sp, #32
   190e4:	pop	{pc}		; (ldr pc, [sp], #4)
   190e8:	mov	r5, #102	; 0x66
   190ec:	ldr	r2, [sp, #44]	; 0x2c
   190f0:	sub	r3, fp, #2
   190f4:	clz	r3, r3
   190f8:	lsr	r3, r3, #5
   190fc:	cmp	r2, #0
   19100:	bne	19b5c <__assert_fail@plt+0x8308>
   19104:	mov	r6, r2
   19108:	b	18dfc <__assert_fail@plt+0x75a8>
   1910c:	mov	r5, #110	; 0x6e
   19110:	mov	r6, #0
   19114:	b	18da0 <__assert_fail@plt+0x754c>
   19118:	mov	r5, #98	; 0x62
   1911c:	b	190ec <__assert_fail@plt+0x7898>
   19120:	mov	r5, #97	; 0x61
   19124:	b	190ec <__assert_fail@plt+0x7898>
   19128:	mov	r7, #0
   1912c:	mov	r6, #0
   19130:	b	18f50 <__assert_fail@plt+0x76fc>
   19134:	mov	r5, #114	; 0x72
   19138:	b	19110 <__assert_fail@plt+0x78bc>
   1913c:	ldr	r3, [sp, #44]	; 0x2c
   19140:	cmp	r3, #0
   19144:	bne	19ed4 <__assert_fail@plt+0x8680>
   19148:	mov	r7, r3
   1914c:	ldr	r3, [sp, #48]	; 0x30
   19150:	sub	r2, fp, #2
   19154:	clz	r2, r2
   19158:	lsr	r2, r2, #5
   1915c:	eor	r3, r3, #1
   19160:	ands	r3, r2, r3
   19164:	beq	19b78 <__assert_fail@plt+0x8324>
   19168:	cmp	sl, r4
   1916c:	movhi	r1, #39	; 0x27
   19170:	strbhi	r1, [r8, r4]
   19174:	add	r1, r4, #1
   19178:	cmp	sl, r1
   1917c:	movhi	r0, #36	; 0x24
   19180:	strbhi	r0, [r8, r1]
   19184:	add	r1, r4, #2
   19188:	cmp	sl, r1
   1918c:	movhi	r0, #39	; 0x27
   19190:	strbhi	r0, [r8, r1]
   19194:	add	r1, r4, #3
   19198:	cmp	sl, r1
   1919c:	bls	19bd0 <__assert_fail@plt+0x837c>
   191a0:	mov	r4, r1
   191a4:	mov	r1, #92	; 0x5c
   191a8:	mov	r0, r4
   191ac:	str	r3, [sp, #48]	; 0x30
   191b0:	strb	r1, [r8, r4]
   191b4:	cmp	fp, #2
   191b8:	add	r4, r4, #1
   191bc:	beq	19c20 <__assert_fail@plt+0x83cc>
   191c0:	ldr	r1, [sp, #28]
   191c4:	add	r3, r9, #1
   191c8:	cmp	r3, r1
   191cc:	bcs	191e4 <__assert_fail@plt+0x7990>
   191d0:	ldr	r1, [sp, #32]
   191d4:	ldrb	r3, [r1, r3]
   191d8:	sub	r3, r3, #48	; 0x30
   191dc:	cmp	r3, #9
   191e0:	bls	19c38 <__assert_fail@plt+0x83e4>
   191e4:	mov	r5, #48	; 0x30
   191e8:	ldr	r3, [sp, #40]	; 0x28
   191ec:	eor	r3, r3, #1
   191f0:	orrs	r2, r2, r3
   191f4:	mov	r3, r6
   191f8:	moveq	r6, r2
   191fc:	beq	18d70 <__assert_fail@plt+0x751c>
   19200:	mov	r6, #0
   19204:	b	18d98 <__assert_fail@plt+0x7544>
   19208:	cmp	r9, #0
   1920c:	mov	r2, r7
   19210:	bne	197b0 <__assert_fail@plt+0x7f5c>
   19214:	mov	r6, r7
   19218:	mov	r3, r9
   1921c:	mov	r7, r2
   19220:	b	18d60 <__assert_fail@plt+0x750c>
   19224:	mov	r2, r7
   19228:	mov	r6, r7
   1922c:	mov	r3, #0
   19230:	mov	r7, r2
   19234:	mov	r5, #32
   19238:	b	18d60 <__assert_fail@plt+0x750c>
   1923c:	mov	r6, r7
   19240:	b	18f50 <__assert_fail@plt+0x76fc>
   19244:	mov	r7, #0
   19248:	ldr	r3, [sp, #64]	; 0x40
   1924c:	cmp	r3, #1
   19250:	bne	19870 <__assert_fail@plt+0x801c>
   19254:	bl	11644 <__ctype_b_loc@plt>
   19258:	ldr	r2, [r0]
   1925c:	sxth	r3, r5
   19260:	lsl	r3, r3, #1
   19264:	ldr	r1, [sp, #64]	; 0x40
   19268:	ldrh	r3, [r2, r3]
   1926c:	mov	ip, r1
   19270:	and	r3, r3, #16384	; 0x4000
   19274:	cmp	r3, #0
   19278:	ldr	r3, [sp, #40]	; 0x28
   1927c:	movne	r6, #1
   19280:	moveq	r6, #0
   19284:	movne	r2, #0
   19288:	andeq	r2, r3, #1
   1928c:	cmp	r2, #0
   19290:	bne	19bb8 <__assert_fail@plt+0x8364>
   19294:	sub	r3, fp, #2
   19298:	clz	r3, r3
   1929c:	lsr	r3, r3, #5
   192a0:	b	18d60 <__assert_fail@plt+0x750c>
   192a4:	cmp	r4, #0
   192a8:	bne	19f48 <__assert_fail@plt+0x86f4>
   192ac:	str	r4, [sp, #40]	; 0x28
   192b0:	cmp	sl, #0
   192b4:	bne	19f78 <__assert_fail@plt+0x8724>
   192b8:	mov	r3, #1
   192bc:	movw	r2, #61908	; 0xf1d4
   192c0:	movt	r2, #1
   192c4:	mov	r4, r3
   192c8:	mov	r8, #2
   192cc:	str	r3, [sp, #36]	; 0x24
   192d0:	str	sl, [sp, #44]	; 0x2c
   192d4:	str	sl, [sp, #48]	; 0x30
   192d8:	str	r3, [sp, #56]	; 0x38
   192dc:	str	r2, [sp, #60]	; 0x3c
   192e0:	str	sl, [sp, #68]	; 0x44
   192e4:	str	sl, [sp, #72]	; 0x48
   192e8:	b	188c0 <__assert_fail@plt+0x706c>
   192ec:	ldr	r3, [sp, #32]
   192f0:	ldrb	r5, [r3, r9]
   192f4:	cmp	r5, #126	; 0x7e
   192f8:	ldrls	pc, [pc, r5, lsl #2]
   192fc:	b	19248 <__assert_fail@plt+0x79f4>
   19300:	andeq	r9, r1, r4, lsr #10
   19304:	andeq	r9, r1, r8, asr #4
   19308:	andeq	r9, r1, r8, asr #4
   1930c:	andeq	r9, r1, r8, asr #4
   19310:	andeq	r9, r1, r8, asr #4
   19314:	andeq	r9, r1, r8, asr #4
   19318:	andeq	r9, r1, r8, asr #4
   1931c:	andeq	r9, r1, ip, lsl r5
   19320:	andeq	r9, r1, r4, lsl r5
   19324:	andeq	r9, r1, r0, rrx
   19328:	andeq	r9, r1, ip, lsl #10
   1932c:	andeq	r9, r1, r8, asr r0
   19330:	andeq	r9, r1, r4, lsl #10
   19334:	strdeq	r9, [r1], -ip
   19338:	andeq	r9, r1, r8, asr #4
   1933c:	andeq	r9, r1, r8, asr #4
   19340:	andeq	r9, r1, r8, asr #4
   19344:	andeq	r9, r1, r8, asr #4
   19348:	andeq	r9, r1, r8, asr #4
   1934c:	andeq	r9, r1, r8, asr #4
   19350:	andeq	r9, r1, r8, asr #4
   19354:	andeq	r9, r1, r8, asr #4
   19358:	andeq	r9, r1, r8, asr #4
   1935c:	andeq	r9, r1, r8, asr #4
   19360:	andeq	r9, r1, r8, asr #4
   19364:	andeq	r9, r1, r8, asr #4
   19368:	andeq	r9, r1, r8, asr #4
   1936c:	andeq	r9, r1, r8, asr #4
   19370:	andeq	r9, r1, r8, asr #4
   19374:	andeq	r9, r1, r8, asr #4
   19378:	andeq	r9, r1, r8, asr #4
   1937c:	andeq	r9, r1, r8, asr #4
   19380:	andeq	r9, r1, r8, ror r5
   19384:	andeq	r9, r1, r8, asr r5
   19388:	andeq	r9, r1, r8, asr r5
   1938c:	andeq	r9, r1, r8, asr #10
   19390:	andeq	r9, r1, r8, asr r5
   19394:	muleq	r1, r4, r2
   19398:	andeq	r9, r1, r8, asr r5
   1939c:	andeq	r8, r1, r8, lsl #31
   193a0:	andeq	r9, r1, r8, asr r5
   193a4:	andeq	r9, r1, r8, asr r5
   193a8:	andeq	r9, r1, r8, asr r5
   193ac:	muleq	r1, r4, r2
   193b0:	muleq	r1, r4, r2
   193b4:	muleq	r1, r4, r2
   193b8:	muleq	r1, r4, r2
   193bc:	muleq	r1, r4, r2
   193c0:	muleq	r1, r4, r2
   193c4:	muleq	r1, r4, r2
   193c8:	muleq	r1, r4, r2
   193cc:	muleq	r1, r4, r2
   193d0:	muleq	r1, r4, r2
   193d4:	muleq	r1, r4, r2
   193d8:	muleq	r1, r4, r2
   193dc:	muleq	r1, r4, r2
   193e0:	muleq	r1, r4, r2
   193e4:	muleq	r1, r4, r2
   193e8:	muleq	r1, r4, r2
   193ec:	andeq	r9, r1, r8, asr r5
   193f0:	andeq	r9, r1, r8, asr r5
   193f4:	andeq	r9, r1, r8, asr r5
   193f8:	andeq	r9, r1, r8, asr r5
   193fc:	andeq	r8, r1, ip, asr pc
   19400:	andeq	r9, r1, r8, asr #4
   19404:	muleq	r1, r4, r2
   19408:	muleq	r1, r4, r2
   1940c:	muleq	r1, r4, r2
   19410:	muleq	r1, r4, r2
   19414:	muleq	r1, r4, r2
   19418:	muleq	r1, r4, r2
   1941c:	muleq	r1, r4, r2
   19420:	muleq	r1, r4, r2
   19424:	muleq	r1, r4, r2
   19428:	muleq	r1, r4, r2
   1942c:	muleq	r1, r4, r2
   19430:	muleq	r1, r4, r2
   19434:	muleq	r1, r4, r2
   19438:	muleq	r1, r4, r2
   1943c:	muleq	r1, r4, r2
   19440:	muleq	r1, r4, r2
   19444:	muleq	r1, r4, r2
   19448:	muleq	r1, r4, r2
   1944c:	muleq	r1, r4, r2
   19450:	muleq	r1, r4, r2
   19454:	muleq	r1, r4, r2
   19458:	muleq	r1, r4, r2
   1945c:	muleq	r1, r4, r2
   19460:	muleq	r1, r4, r2
   19464:	muleq	r1, r4, r2
   19468:	muleq	r1, r4, r2
   1946c:	andeq	r9, r1, r8, asr r5
   19470:	andeq	r8, r1, r4, lsl #30
   19474:	muleq	r1, r4, r2
   19478:	andeq	r9, r1, r8, asr r5
   1947c:	muleq	r1, r4, r2
   19480:	andeq	r9, r1, r8, asr r5
   19484:	muleq	r1, r4, r2
   19488:	muleq	r1, r4, r2
   1948c:	muleq	r1, r4, r2
   19490:	muleq	r1, r4, r2
   19494:	muleq	r1, r4, r2
   19498:	muleq	r1, r4, r2
   1949c:	muleq	r1, r4, r2
   194a0:	muleq	r1, r4, r2
   194a4:	muleq	r1, r4, r2
   194a8:	muleq	r1, r4, r2
   194ac:	muleq	r1, r4, r2
   194b0:	muleq	r1, r4, r2
   194b4:	muleq	r1, r4, r2
   194b8:	muleq	r1, r4, r2
   194bc:	muleq	r1, r4, r2
   194c0:	muleq	r1, r4, r2
   194c4:	muleq	r1, r4, r2
   194c8:	muleq	r1, r4, r2
   194cc:	muleq	r1, r4, r2
   194d0:	muleq	r1, r4, r2
   194d4:	muleq	r1, r4, r2
   194d8:	muleq	r1, r4, r2
   194dc:	muleq	r1, r4, r2
   194e0:	muleq	r1, r4, r2
   194e4:	muleq	r1, r4, r2
   194e8:	muleq	r1, r4, r2
   194ec:	andeq	r8, r1, r8, lsr #26
   194f0:	andeq	r9, r1, r8, asr r5
   194f4:	andeq	r8, r1, r8, lsr #26
   194f8:	andeq	r9, r1, r8, asr #10
   194fc:	mov	r3, #114	; 0x72
   19500:	b	19064 <__assert_fail@plt+0x7810>
   19504:	mov	r3, #102	; 0x66
   19508:	b	18f34 <__assert_fail@plt+0x76e0>
   1950c:	mov	r3, #110	; 0x6e
   19510:	b	19064 <__assert_fail@plt+0x7810>
   19514:	mov	r3, #98	; 0x62
   19518:	b	18f34 <__assert_fail@plt+0x76e0>
   1951c:	mov	r3, #97	; 0x61
   19520:	b	18f34 <__assert_fail@plt+0x76e0>
   19524:	ldr	r3, [sp, #40]	; 0x28
   19528:	cmp	r3, #0
   1952c:	bne	1913c <__assert_fail@plt+0x78e8>
   19530:	ldr	r3, [sp, #156]	; 0x9c
   19534:	tst	r3, #1
   19538:	addne	r9, r9, #1
   1953c:	bne	188d0 <__assert_fail@plt+0x707c>
   19540:	ldr	r7, [sp, #40]	; 0x28
   19544:	b	18f40 <__assert_fail@plt+0x76ec>
   19548:	sub	r3, fp, #2
   1954c:	clz	r3, r3
   19550:	lsr	r3, r3, #5
   19554:	b	18d54 <__assert_fail@plt+0x7500>
   19558:	sub	r3, fp, #2
   1955c:	mov	r6, #0
   19560:	clz	r3, r3
   19564:	lsr	r3, r3, #5
   19568:	ldr	r2, [sp, #44]	; 0x2c
   1956c:	tst	r2, r3
   19570:	beq	18d60 <__assert_fail@plt+0x750c>
   19574:	b	1907c <__assert_fail@plt+0x7828>
   19578:	sub	r3, fp, #2
   1957c:	clz	r3, r3
   19580:	lsr	r3, r3, #5
   19584:	b	19568 <__assert_fail@plt+0x7d14>
   19588:	ldr	r3, [sp, #52]	; 0x34
   1958c:	ldrb	r5, [r3]
   19590:	cmp	r5, #126	; 0x7e
   19594:	ldrls	pc, [pc, r5, lsl #2]
   19598:	b	19244 <__assert_fail@plt+0x79f0>
   1959c:	andeq	r9, r1, ip, lsr r1
   195a0:	andeq	r9, r1, r4, asr #4
   195a4:	andeq	r9, r1, r4, asr #4
   195a8:	andeq	r9, r1, r4, asr #4
   195ac:	andeq	r9, r1, r4, asr #4
   195b0:	andeq	r9, r1, r4, asr #4
   195b4:	andeq	r9, r1, r4, asr #4
   195b8:	andeq	r9, r1, r0, lsr #2
   195bc:	andeq	r9, r1, r8, lsl r1
   195c0:	ldrdeq	r9, [r1], -r4
   195c4:	andeq	r9, r1, ip, lsl #2
   195c8:	andeq	r9, r1, r8, asr #15
   195cc:	andeq	r9, r1, r8, ror #1
   195d0:	andeq	r9, r1, r4, lsr r1
   195d4:	andeq	r9, r1, r4, asr #4
   195d8:	andeq	r9, r1, r4, asr #4
   195dc:	andeq	r9, r1, r4, asr #4
   195e0:	andeq	r9, r1, r4, asr #4
   195e4:	andeq	r9, r1, r4, asr #4
   195e8:	andeq	r9, r1, r4, asr #4
   195ec:	andeq	r9, r1, r4, asr #4
   195f0:	andeq	r9, r1, r4, asr #4
   195f4:	andeq	r9, r1, r4, asr #4
   195f8:	andeq	r9, r1, r4, asr #4
   195fc:	andeq	r9, r1, r4, asr #4
   19600:	andeq	r9, r1, r4, asr #4
   19604:	andeq	r9, r1, r4, asr #4
   19608:	andeq	r9, r1, r4, asr #4
   1960c:	andeq	r9, r1, r4, asr #4
   19610:	andeq	r9, r1, r4, asr #4
   19614:	andeq	r9, r1, r4, asr #4
   19618:	andeq	r9, r1, r4, asr #4
   1961c:	andeq	r9, r1, r0, asr #15
   19620:	andeq	r9, r1, r8, lsr #2
   19624:	andeq	r9, r1, r8, lsr #2
   19628:	andeq	r9, r1, r4, lsr #15
   1962c:	andeq	r9, r1, r8, lsr #2
   19630:	muleq	r1, r8, r7
   19634:	andeq	r9, r1, r8, lsr #2
   19638:	andeq	r8, r1, r4, lsl #31
   1963c:	andeq	r9, r1, r8, lsr #2
   19640:	andeq	r9, r1, r8, lsr #2
   19644:	andeq	r9, r1, r8, lsr #2
   19648:	muleq	r1, r8, r7
   1964c:	muleq	r1, r8, r7
   19650:	muleq	r1, r8, r7
   19654:	muleq	r1, r8, r7
   19658:	muleq	r1, r8, r7
   1965c:	muleq	r1, r8, r7
   19660:	muleq	r1, r8, r7
   19664:	muleq	r1, r8, r7
   19668:	muleq	r1, r8, r7
   1966c:	muleq	r1, r8, r7
   19670:	muleq	r1, r8, r7
   19674:	muleq	r1, r8, r7
   19678:	muleq	r1, r8, r7
   1967c:	muleq	r1, r8, r7
   19680:	muleq	r1, r8, r7
   19684:	muleq	r1, r8, r7
   19688:	andeq	r9, r1, r8, lsr #2
   1968c:	andeq	r9, r1, r8, lsr #2
   19690:	andeq	r9, r1, r8, lsr #2
   19694:	andeq	r9, r1, r8, lsr #2
   19698:	andeq	r8, r1, r8, asr pc
   1969c:	andeq	r9, r1, r4, asr #4
   196a0:	muleq	r1, r8, r7
   196a4:	muleq	r1, r8, r7
   196a8:	muleq	r1, r8, r7
   196ac:	muleq	r1, r8, r7
   196b0:	muleq	r1, r8, r7
   196b4:	muleq	r1, r8, r7
   196b8:	muleq	r1, r8, r7
   196bc:	muleq	r1, r8, r7
   196c0:	muleq	r1, r8, r7
   196c4:	muleq	r1, r8, r7
   196c8:	muleq	r1, r8, r7
   196cc:	muleq	r1, r8, r7
   196d0:	muleq	r1, r8, r7
   196d4:	muleq	r1, r8, r7
   196d8:	muleq	r1, r8, r7
   196dc:	muleq	r1, r8, r7
   196e0:	muleq	r1, r8, r7
   196e4:	muleq	r1, r8, r7
   196e8:	muleq	r1, r8, r7
   196ec:	muleq	r1, r8, r7
   196f0:	muleq	r1, r8, r7
   196f4:	muleq	r1, r8, r7
   196f8:	muleq	r1, r8, r7
   196fc:	muleq	r1, r8, r7
   19700:	muleq	r1, r8, r7
   19704:	muleq	r1, r8, r7
   19708:	andeq	r9, r1, r8, lsr #2
   1970c:	andeq	r8, r1, r0, lsl #30
   19710:	muleq	r1, r8, r7
   19714:	andeq	r9, r1, r8, lsr #2
   19718:	muleq	r1, r8, r7
   1971c:	andeq	r9, r1, r8, lsr #2
   19720:	muleq	r1, r8, r7
   19724:	muleq	r1, r8, r7
   19728:	muleq	r1, r8, r7
   1972c:	muleq	r1, r8, r7
   19730:	muleq	r1, r8, r7
   19734:	muleq	r1, r8, r7
   19738:	muleq	r1, r8, r7
   1973c:	muleq	r1, r8, r7
   19740:	muleq	r1, r8, r7
   19744:	muleq	r1, r8, r7
   19748:	muleq	r1, r8, r7
   1974c:	muleq	r1, r8, r7
   19750:	muleq	r1, r8, r7
   19754:	muleq	r1, r8, r7
   19758:	muleq	r1, r8, r7
   1975c:	muleq	r1, r8, r7
   19760:	muleq	r1, r8, r7
   19764:	muleq	r1, r8, r7
   19768:	muleq	r1, r8, r7
   1976c:	muleq	r1, r8, r7
   19770:	muleq	r1, r8, r7
   19774:	muleq	r1, r8, r7
   19778:	muleq	r1, r8, r7
   1977c:	muleq	r1, r8, r7
   19780:	muleq	r1, r8, r7
   19784:	muleq	r1, r8, r7
   19788:	andeq	r8, r1, r4, lsr #26
   1978c:	andeq	r9, r1, r8, lsr #2
   19790:	andeq	r8, r1, r4, lsr #26
   19794:	andeq	r9, r1, r4, lsr #15
   19798:	mov	r6, r7
   1979c:	mov	r7, #0
   197a0:	b	18f50 <__assert_fail@plt+0x76fc>
   197a4:	cmp	r9, #0
   197a8:	mov	r2, #0
   197ac:	beq	19214 <__assert_fail@plt+0x79c0>
   197b0:	mov	r6, #0
   197b4:	mov	r7, r2
   197b8:	mov	r3, r6
   197bc:	b	18d70 <__assert_fail@plt+0x751c>
   197c0:	mov	r2, #0
   197c4:	b	19228 <__assert_fail@plt+0x79d4>
   197c8:	mov	r7, #0
   197cc:	mov	r3, #118	; 0x76
   197d0:	b	18f34 <__assert_fail@plt+0x76e0>
   197d4:	mov	r7, #0
   197d8:	mov	r3, #116	; 0x74
   197dc:	b	19064 <__assert_fail@plt+0x7810>
   197e0:	ldr	r3, [sp, #44]	; 0x2c
   197e4:	b	18d98 <__assert_fail@plt+0x7544>
   197e8:	ldr	r3, [sp, #44]	; 0x2c
   197ec:	cmp	r3, #0
   197f0:	bne	19c60 <__assert_fail@plt+0x840c>
   197f4:	add	r9, r9, #1
   197f8:	mov	r6, #0
   197fc:	ldr	r3, [sp, #48]	; 0x30
   19800:	mov	r5, #92	; 0x5c
   19804:	b	19024 <__assert_fail@plt+0x77d0>
   19808:	ldr	r3, [sp, #32]
   1980c:	ldrb	r2, [r3, #1]
   19810:	adds	r2, r2, #0
   19814:	movne	r2, #1
   19818:	b	18d40 <__assert_fail@plt+0x74ec>
   1981c:	ldr	r3, [sp, #156]	; 0x9c
   19820:	ands	r3, r3, #4
   19824:	beq	1984c <__assert_fail@plt+0x7ff8>
   19828:	ldr	r2, [sp, #28]
   1982c:	add	r3, r9, #2
   19830:	cmp	r3, r2
   19834:	bcs	19848 <__assert_fail@plt+0x7ff4>
   19838:	ldr	r2, [sp, #52]	; 0x34
   1983c:	ldrb	r5, [r2, #1]
   19840:	cmp	r5, #63	; 0x3f
   19844:	beq	19cc4 <__assert_fail@plt+0x8470>
   19848:	mov	r3, #0
   1984c:	mov	r5, #63	; 0x3f
   19850:	mov	r6, r3
   19854:	b	18d60 <__assert_fail@plt+0x750c>
   19858:	ldr	r3, [sp, #44]	; 0x2c
   1985c:	cmp	r3, #0
   19860:	bne	19c60 <__assert_fail@plt+0x840c>
   19864:	mov	r6, r3
   19868:	mov	r5, #63	; 0x3f
   1986c:	b	18d98 <__assert_fail@plt+0x7544>
   19870:	ldr	r1, [sp, #28]
   19874:	mov	r2, #0
   19878:	mov	r3, #0
   1987c:	strd	r2, [sp, #104]	; 0x68
   19880:	cmn	r1, #1
   19884:	bne	19894 <__assert_fail@plt+0x8040>
   19888:	ldr	r0, [sp, #32]
   1988c:	bl	11674 <strlen@plt>
   19890:	str	r0, [sp, #28]
   19894:	str	r8, [sp, #76]	; 0x4c
   19898:	mov	r3, #0
   1989c:	str	sl, [sp, #80]	; 0x50
   198a0:	ldr	sl, [sp, #32]
   198a4:	str	r5, [sp, #84]	; 0x54
   198a8:	mov	r5, r3
   198ac:	ldr	r8, [sp, #44]	; 0x2c
   198b0:	str	r7, [sp, #88]	; 0x58
   198b4:	str	r4, [sp, #92]	; 0x5c
   198b8:	ldr	r2, [sp, #28]
   198bc:	add	r4, r9, r5
   198c0:	add	r3, sp, #104	; 0x68
   198c4:	add	r7, sl, r4
   198c8:	add	r0, sp, #100	; 0x64
   198cc:	mov	r1, r7
   198d0:	sub	r2, r2, r4
   198d4:	bl	1cb6c <__assert_fail@plt+0xb318>
   198d8:	subs	r1, r0, #0
   198dc:	beq	19928 <__assert_fail@plt+0x80d4>
   198e0:	cmn	r1, #1
   198e4:	beq	19ca0 <__assert_fail@plt+0x844c>
   198e8:	cmn	r1, #2
   198ec:	beq	19dc0 <__assert_fail@plt+0x856c>
   198f0:	cmp	fp, #2
   198f4:	movne	r3, #0
   198f8:	andeq	r3, r8, #1
   198fc:	cmp	r3, #0
   19900:	bne	19a8c <__assert_fail@plt+0x8238>
   19904:	ldr	r0, [sp, #100]	; 0x64
   19908:	add	r5, r5, r1
   1990c:	bl	11530 <iswprint@plt>
   19910:	cmp	r0, #0
   19914:	add	r0, sp, #104	; 0x68
   19918:	moveq	r6, #0
   1991c:	bl	114c4 <mbsinit@plt>
   19920:	cmp	r0, #0
   19924:	beq	198b8 <__assert_fail@plt+0x8064>
   19928:	ldr	r3, [sp, #40]	; 0x28
   1992c:	mov	ip, r5
   19930:	eor	r2, r6, #1
   19934:	ldr	r8, [sp, #76]	; 0x4c
   19938:	ldr	sl, [sp, #80]	; 0x50
   1993c:	and	r2, r2, r3
   19940:	ldr	r5, [sp, #84]	; 0x54
   19944:	ldr	r7, [sp, #88]	; 0x58
   19948:	ldr	r4, [sp, #92]	; 0x5c
   1994c:	cmp	ip, #1
   19950:	bls	1928c <__assert_fail@plt+0x7a38>
   19954:	add	r1, ip, r9
   19958:	mov	r0, #39	; 0x27
   1995c:	ldr	lr, [sp, #52]	; 0x34
   19960:	mov	ip, #0
   19964:	str	r6, [sp, #52]	; 0x34
   19968:	ldr	r6, [sp, #48]	; 0x30
   1996c:	b	19a28 <__assert_fail@plt+0x81d4>
   19970:	ldr	ip, [sp, #44]	; 0x2c
   19974:	sub	r3, fp, #2
   19978:	clz	r3, r3
   1997c:	lsr	r3, r3, #5
   19980:	cmp	ip, #0
   19984:	bne	19b98 <__assert_fail@plt+0x8344>
   19988:	eor	ip, r6, #1
   1998c:	ands	r3, r3, ip
   19990:	beq	199c0 <__assert_fail@plt+0x816c>
   19994:	cmp	sl, r4
   19998:	add	ip, r4, #1
   1999c:	strbhi	r0, [r8, r4]
   199a0:	cmp	sl, ip
   199a4:	movhi	r6, #36	; 0x24
   199a8:	strbhi	r6, [r8, ip]
   199ac:	add	ip, r4, #2
   199b0:	mov	r6, r3
   199b4:	cmp	sl, ip
   199b8:	add	r4, r4, #3
   199bc:	strbhi	r0, [r8, ip]
   199c0:	cmp	sl, r4
   199c4:	movhi	r3, #92	; 0x5c
   199c8:	strbhi	r3, [r8, r4]
   199cc:	add	r3, r4, #1
   199d0:	cmp	sl, r3
   199d4:	bls	199e4 <__assert_fail@plt+0x8190>
   199d8:	lsr	ip, r5, #6
   199dc:	add	ip, ip, #48	; 0x30
   199e0:	strb	ip, [r8, r3]
   199e4:	add	r3, r4, #2
   199e8:	cmp	sl, r3
   199ec:	bls	199fc <__assert_fail@plt+0x81a8>
   199f0:	ubfx	ip, r5, #3, #3
   199f4:	add	ip, ip, #48	; 0x30
   199f8:	strb	ip, [r8, r3]
   199fc:	add	r9, r9, #1
   19a00:	and	r5, r5, #7
   19a04:	cmp	r9, r1
   19a08:	add	r5, r5, #48	; 0x30
   19a0c:	add	r4, r4, #3
   19a10:	bcs	19bc4 <__assert_fail@plt+0x8370>
   19a14:	mov	ip, r2
   19a18:	cmp	sl, r4
   19a1c:	strbhi	r5, [r8, r4]
   19a20:	add	r4, r4, #1
   19a24:	ldrb	r5, [lr, #1]!
   19a28:	cmp	r2, #0
   19a2c:	bne	19970 <__assert_fail@plt+0x811c>
   19a30:	eor	r3, ip, #1
   19a34:	cmp	r7, #0
   19a38:	and	r3, r3, r6
   19a3c:	uxtb	r3, r3
   19a40:	beq	19a54 <__assert_fail@plt+0x8200>
   19a44:	cmp	sl, r4
   19a48:	movhi	r7, #92	; 0x5c
   19a4c:	strbhi	r7, [r8, r4]
   19a50:	add	r4, r4, #1
   19a54:	add	r9, r9, #1
   19a58:	cmp	r9, r1
   19a5c:	bcs	19bac <__assert_fail@plt+0x8358>
   19a60:	cmp	r3, #0
   19a64:	beq	19be4 <__assert_fail@plt+0x8390>
   19a68:	cmp	sl, r4
   19a6c:	add	r3, r4, #1
   19a70:	mov	r7, #0
   19a74:	strbhi	r0, [r8, r4]
   19a78:	cmp	sl, r3
   19a7c:	add	r4, r4, #2
   19a80:	mov	r6, r7
   19a84:	strbhi	r0, [r8, r3]
   19a88:	b	19a18 <__assert_fail@plt+0x81c4>
   19a8c:	cmp	r1, #1
   19a90:	beq	19904 <__assert_fail@plt+0x80b0>
   19a94:	add	r2, r4, #1
   19a98:	add	r3, sl, r1
   19a9c:	add	r2, sl, r2
   19aa0:	add	r4, r3, r4
   19aa4:	ldrb	r3, [r2], #1
   19aa8:	sub	r3, r3, #91	; 0x5b
   19aac:	cmp	r3, #33	; 0x21
   19ab0:	ldrls	pc, [pc, r3, lsl #2]
   19ab4:	b	19b40 <__assert_fail@plt+0x82ec>
   19ab8:	andeq	r9, r1, ip, asr #22
   19abc:	andeq	r9, r1, ip, asr #22
   19ac0:	andeq	r9, r1, r0, asr #22
   19ac4:	andeq	r9, r1, ip, asr #22
   19ac8:	andeq	r9, r1, r0, asr #22
   19acc:	andeq	r9, r1, ip, asr #22
   19ad0:	andeq	r9, r1, r0, asr #22
   19ad4:	andeq	r9, r1, r0, asr #22
   19ad8:	andeq	r9, r1, r0, asr #22
   19adc:	andeq	r9, r1, r0, asr #22
   19ae0:	andeq	r9, r1, r0, asr #22
   19ae4:	andeq	r9, r1, r0, asr #22
   19ae8:	andeq	r9, r1, r0, asr #22
   19aec:	andeq	r9, r1, r0, asr #22
   19af0:	andeq	r9, r1, r0, asr #22
   19af4:	andeq	r9, r1, r0, asr #22
   19af8:	andeq	r9, r1, r0, asr #22
   19afc:	andeq	r9, r1, r0, asr #22
   19b00:	andeq	r9, r1, r0, asr #22
   19b04:	andeq	r9, r1, r0, asr #22
   19b08:	andeq	r9, r1, r0, asr #22
   19b0c:	andeq	r9, r1, r0, asr #22
   19b10:	andeq	r9, r1, r0, asr #22
   19b14:	andeq	r9, r1, r0, asr #22
   19b18:	andeq	r9, r1, r0, asr #22
   19b1c:	andeq	r9, r1, r0, asr #22
   19b20:	andeq	r9, r1, r0, asr #22
   19b24:	andeq	r9, r1, r0, asr #22
   19b28:	andeq	r9, r1, r0, asr #22
   19b2c:	andeq	r9, r1, r0, asr #22
   19b30:	andeq	r9, r1, r0, asr #22
   19b34:	andeq	r9, r1, r0, asr #22
   19b38:	andeq	r9, r1, r0, asr #22
   19b3c:	andeq	r9, r1, ip, asr #22
   19b40:	cmp	r4, r2
   19b44:	bne	19aa4 <__assert_fail@plt+0x8250>
   19b48:	b	19904 <__assert_fail@plt+0x80b0>
   19b4c:	mov	r8, #2
   19b50:	ldr	fp, [sp, #76]	; 0x4c
   19b54:	ldr	sl, [sp, #80]	; 0x50
   19b58:	b	19084 <__assert_fail@plt+0x7830>
   19b5c:	ldr	r2, [sp, #40]	; 0x28
   19b60:	str	fp, [sp, #152]	; 0x98
   19b64:	mov	fp, r8
   19b68:	ldr	r8, [sp, #152]	; 0x98
   19b6c:	and	r2, r2, r3
   19b70:	str	r2, [sp, #40]	; 0x28
   19b74:	b	19084 <__assert_fail@plt+0x7830>
   19b78:	cmp	sl, r4
   19b7c:	movls	r0, r4
   19b80:	bls	191b4 <__assert_fail@plt+0x7960>
   19b84:	ldr	r3, [sp, #48]	; 0x30
   19b88:	b	191a4 <__assert_fail@plt+0x7950>
   19b8c:	str	sl, [sp, #72]	; 0x48
   19b90:	ldr	sl, [sp, #44]	; 0x2c
   19b94:	b	18ff4 <__assert_fail@plt+0x77a0>
   19b98:	str	r3, [sp, #40]	; 0x28
   19b9c:	str	fp, [sp, #152]	; 0x98
   19ba0:	mov	fp, r8
   19ba4:	ldr	r8, [sp, #152]	; 0x98
   19ba8:	b	19084 <__assert_fail@plt+0x7830>
   19bac:	str	r6, [sp, #48]	; 0x30
   19bb0:	ldr	r6, [sp, #52]	; 0x34
   19bb4:	b	19024 <__assert_fail@plt+0x77d0>
   19bb8:	mov	r6, #0
   19bbc:	ldr	r2, [sp, #40]	; 0x28
   19bc0:	b	19954 <__assert_fail@plt+0x8100>
   19bc4:	str	r6, [sp, #48]	; 0x30
   19bc8:	ldr	r6, [sp, #52]	; 0x34
   19bcc:	b	18e10 <__assert_fail@plt+0x75bc>
   19bd0:	add	r4, r4, #4
   19bd4:	mov	r6, #0
   19bd8:	str	r3, [sp, #48]	; 0x30
   19bdc:	mov	r5, #48	; 0x30
   19be0:	b	18d98 <__assert_fail@plt+0x7544>
   19be4:	mov	r7, r3
   19be8:	b	19a18 <__assert_fail@plt+0x81c4>
   19bec:	mov	r3, #1
   19bf0:	movw	r2, #61888	; 0xf1c0
   19bf4:	movt	r2, #1
   19bf8:	mov	r4, r3
   19bfc:	str	r3, [sp, #36]	; 0x24
   19c00:	str	r3, [sp, #40]	; 0x28
   19c04:	str	sl, [sp, #44]	; 0x2c
   19c08:	str	sl, [sp, #48]	; 0x30
   19c0c:	str	r3, [sp, #56]	; 0x38
   19c10:	str	r2, [sp, #60]	; 0x3c
   19c14:	str	sl, [sp, #68]	; 0x44
   19c18:	str	sl, [sp, #72]	; 0x48
   19c1c:	b	188c0 <__assert_fail@plt+0x706c>
   19c20:	mov	r3, r6
   19c24:	mov	r5, #48	; 0x30
   19c28:	mov	r6, #0
   19c2c:	b	18d98 <__assert_fail@plt+0x7544>
   19c30:	mov	r5, r3
   19c34:	b	19110 <__assert_fail@plt+0x78bc>
   19c38:	cmp	sl, r4
   19c3c:	mov	r5, #48	; 0x30
   19c40:	movhi	r3, #48	; 0x30
   19c44:	strbhi	r3, [r8, r4]
   19c48:	add	r3, r0, #2
   19c4c:	add	r4, r0, #3
   19c50:	cmp	sl, r3
   19c54:	movhi	r1, #48	; 0x30
   19c58:	strbhi	r1, [r8, r3]
   19c5c:	b	191e8 <__assert_fail@plt+0x7994>
   19c60:	str	fp, [sp, #152]	; 0x98
   19c64:	mov	fp, r8
   19c68:	ldr	r8, [sp, #152]	; 0x98
   19c6c:	b	19084 <__assert_fail@plt+0x7830>
   19c70:	ldr	r3, [sp, #164]	; 0xa4
   19c74:	ldrb	r3, [r3]
   19c78:	cmp	r3, #0
   19c7c:	beq	18890 <__assert_fail@plt+0x703c>
   19c80:	ldr	r2, [sp, #164]	; 0xa4
   19c84:	cmp	sl, r4
   19c88:	strbhi	r3, [fp, r4]
   19c8c:	add	r4, r4, #1
   19c90:	ldrb	r3, [r2, #1]!
   19c94:	cmp	r3, #0
   19c98:	bne	19c84 <__assert_fail@plt+0x8430>
   19c9c:	b	18890 <__assert_fail@plt+0x703c>
   19ca0:	mov	ip, r5
   19ca4:	mov	r6, #0
   19ca8:	ldr	r2, [sp, #40]	; 0x28
   19cac:	ldr	r8, [sp, #76]	; 0x4c
   19cb0:	ldr	sl, [sp, #80]	; 0x50
   19cb4:	ldr	r5, [sp, #84]	; 0x54
   19cb8:	ldr	r7, [sp, #88]	; 0x58
   19cbc:	ldr	r4, [sp, #92]	; 0x5c
   19cc0:	b	1994c <__assert_fail@plt+0x80f8>
   19cc4:	ldr	r2, [sp, #32]
   19cc8:	ldrb	r1, [r2, r3]
   19ccc:	sub	r2, r1, #33	; 0x21
   19cd0:	cmp	r2, #29
   19cd4:	ldrls	pc, [pc, r2, lsl #2]
   19cd8:	b	19db4 <__assert_fail@plt+0x8560>
   19cdc:	andeq	r9, r1, r4, asr sp
   19ce0:			; <UNDEFINED> instruction: 0x00019db4
   19ce4:			; <UNDEFINED> instruction: 0x00019db4
   19ce8:			; <UNDEFINED> instruction: 0x00019db4
   19cec:			; <UNDEFINED> instruction: 0x00019db4
   19cf0:			; <UNDEFINED> instruction: 0x00019db4
   19cf4:	andeq	r9, r1, r4, asr sp
   19cf8:	andeq	r9, r1, r4, asr sp
   19cfc:	andeq	r9, r1, r4, asr sp
   19d00:			; <UNDEFINED> instruction: 0x00019db4
   19d04:			; <UNDEFINED> instruction: 0x00019db4
   19d08:			; <UNDEFINED> instruction: 0x00019db4
   19d0c:	andeq	r9, r1, r4, asr sp
   19d10:			; <UNDEFINED> instruction: 0x00019db4
   19d14:	andeq	r9, r1, r4, asr sp
   19d18:			; <UNDEFINED> instruction: 0x00019db4
   19d1c:			; <UNDEFINED> instruction: 0x00019db4
   19d20:			; <UNDEFINED> instruction: 0x00019db4
   19d24:			; <UNDEFINED> instruction: 0x00019db4
   19d28:			; <UNDEFINED> instruction: 0x00019db4
   19d2c:			; <UNDEFINED> instruction: 0x00019db4
   19d30:			; <UNDEFINED> instruction: 0x00019db4
   19d34:			; <UNDEFINED> instruction: 0x00019db4
   19d38:			; <UNDEFINED> instruction: 0x00019db4
   19d3c:			; <UNDEFINED> instruction: 0x00019db4
   19d40:			; <UNDEFINED> instruction: 0x00019db4
   19d44:			; <UNDEFINED> instruction: 0x00019db4
   19d48:	andeq	r9, r1, r4, asr sp
   19d4c:	andeq	r9, r1, r4, asr sp
   19d50:	andeq	r9, r1, r4, asr sp
   19d54:	ldr	r2, [sp, #44]	; 0x2c
   19d58:	cmp	r2, #0
   19d5c:	bne	19eb8 <__assert_fail@plt+0x8664>
   19d60:	cmp	sl, r4
   19d64:	mov	r5, r1
   19d68:	movhi	r2, #63	; 0x3f
   19d6c:	mov	r9, r3
   19d70:	strbhi	r2, [r8, r4]
   19d74:	add	r2, r4, #1
   19d78:	cmp	sl, r2
   19d7c:	movhi	r0, #34	; 0x22
   19d80:	strbhi	r0, [r8, r2]
   19d84:	add	r2, r4, #2
   19d88:	cmp	sl, r2
   19d8c:	movhi	r0, #34	; 0x22
   19d90:	strbhi	r0, [r8, r2]
   19d94:	add	r2, r4, #3
   19d98:	add	r4, r4, #4
   19d9c:	cmp	sl, r2
   19da0:	movhi	r0, #63	; 0x3f
   19da4:	strbhi	r0, [r8, r2]
   19da8:	mov	r2, #0
   19dac:	mov	r6, r2
   19db0:	b	191e8 <__assert_fail@plt+0x7994>
   19db4:	mov	r3, #0
   19db8:	mov	r6, r3
   19dbc:	b	18d60 <__assert_fail@plt+0x750c>
   19dc0:	ldr	r0, [sp, #28]
   19dc4:	mov	r1, r4
   19dc8:	mov	r2, r7
   19dcc:	mov	r3, r5
   19dd0:	mov	ip, r5
   19dd4:	ldr	r8, [sp, #76]	; 0x4c
   19dd8:	ldr	sl, [sp, #80]	; 0x50
   19ddc:	cmp	r1, r0
   19de0:	ldr	r5, [sp, #84]	; 0x54
   19de4:	ldr	r7, [sp, #88]	; 0x58
   19de8:	ldr	r4, [sp, #92]	; 0x5c
   19dec:	bcs	19e20 <__assert_fail@plt+0x85cc>
   19df0:	ldrb	r6, [r2]
   19df4:	cmp	r6, #0
   19df8:	bne	19e0c <__assert_fail@plt+0x85b8>
   19dfc:	b	19f40 <__assert_fail@plt+0x86ec>
   19e00:	ldrb	r6, [r2, #1]!
   19e04:	cmp	r6, #0
   19e08:	beq	19ec8 <__assert_fail@plt+0x8674>
   19e0c:	add	r3, r3, #1
   19e10:	add	r1, r9, r3
   19e14:	cmp	r1, r0
   19e18:	bcc	19e00 <__assert_fail@plt+0x85ac>
   19e1c:	mov	ip, r3
   19e20:	mov	r6, #0
   19e24:	ldr	r2, [sp, #40]	; 0x28
   19e28:	b	1994c <__assert_fail@plt+0x80f8>
   19e2c:	mov	r3, #1
   19e30:	mov	r2, #0
   19e34:	mov	r4, r2
   19e38:	str	r3, [sp, #36]	; 0x24
   19e3c:	str	r3, [sp, #40]	; 0x28
   19e40:	str	r3, [sp, #44]	; 0x2c
   19e44:	str	r2, [sp, #48]	; 0x30
   19e48:	str	r3, [sp, #56]	; 0x38
   19e4c:	movw	r3, #61888	; 0xf1c0
   19e50:	movt	r3, #1
   19e54:	str	r3, [sp, #60]	; 0x3c
   19e58:	str	r2, [sp, #68]	; 0x44
   19e5c:	str	r2, [sp, #72]	; 0x48
   19e60:	b	188c0 <__assert_fail@plt+0x706c>
   19e64:	mov	r2, r3
   19e68:	ldr	r3, [sp, #60]	; 0x3c
   19e6c:	cmp	r3, #0
   19e70:	moveq	r2, #0
   19e74:	andne	r2, r2, #1
   19e78:	cmp	r2, #0
   19e7c:	beq	19ea8 <__assert_fail@plt+0x8654>
   19e80:	mov	r2, r3
   19e84:	ldrb	r3, [r3]
   19e88:	cmp	r3, #0
   19e8c:	beq	19ea8 <__assert_fail@plt+0x8654>
   19e90:	cmp	sl, r4
   19e94:	strbhi	r3, [fp, r4]
   19e98:	add	r4, r4, #1
   19e9c:	ldrb	r3, [r2, #1]!
   19ea0:	cmp	r3, #0
   19ea4:	bne	19e90 <__assert_fail@plt+0x863c>
   19ea8:	cmp	sl, r4
   19eac:	movhi	r3, #0
   19eb0:	strbhi	r3, [fp, r4]
   19eb4:	b	190c8 <__assert_fail@plt+0x7874>
   19eb8:	str	fp, [sp, #152]	; 0x98
   19ebc:	mov	fp, r8
   19ec0:	ldr	r8, [sp, #152]	; 0x98
   19ec4:	b	19090 <__assert_fail@plt+0x783c>
   19ec8:	mov	ip, r3
   19ecc:	ldr	r2, [sp, #40]	; 0x28
   19ed0:	b	1994c <__assert_fail@plt+0x80f8>
   19ed4:	str	fp, [sp, #152]	; 0x98
   19ed8:	mov	fp, r8
   19edc:	ldr	r8, [sp, #152]	; 0x98
   19ee0:	sub	r3, r8, #2
   19ee4:	clz	r3, r3
   19ee8:	lsr	r3, r3, #5
   19eec:	str	r3, [sp, #40]	; 0x28
   19ef0:	b	19084 <__assert_fail@plt+0x7830>
   19ef4:	mov	ip, #5
   19ef8:	ldr	r3, [sp, #28]
   19efc:	str	ip, [sp]
   19f00:	ldr	r2, [sp, #156]	; 0x9c
   19f04:	ldr	ip, [sp, #164]	; 0xa4
   19f08:	ldr	r0, [sp, #160]	; 0xa0
   19f0c:	str	r2, [sp, #4]
   19f10:	ldr	r2, [sp, #32]
   19f14:	ldr	r1, [sp, #72]	; 0x48
   19f18:	str	ip, [sp, #12]
   19f1c:	ldr	ip, [sp, #168]	; 0xa8
   19f20:	str	r0, [sp, #8]
   19f24:	mov	r0, fp
   19f28:	str	ip, [sp, #16]
   19f2c:	bl	187d8 <__assert_fail@plt+0x6f84>
   19f30:	mov	r4, r0
   19f34:	b	190c8 <__assert_fail@plt+0x7874>
   19f38:	mov	r8, #2
   19f3c:	b	19084 <__assert_fail@plt+0x7830>
   19f40:	ldr	r2, [sp, #40]	; 0x28
   19f44:	b	1994c <__assert_fail@plt+0x80f8>
   19f48:	mov	r3, #0
   19f4c:	mov	r2, #1
   19f50:	mov	r4, r3
   19f54:	strd	r2, [sp, #36]	; 0x24
   19f58:	strd	r2, [sp, #44]	; 0x2c
   19f5c:	str	r2, [sp, #56]	; 0x38
   19f60:	str	r3, [sp, #68]	; 0x44
   19f64:	str	r3, [sp, #72]	; 0x48
   19f68:	movw	r3, #61908	; 0xf1d4
   19f6c:	movt	r3, #1
   19f70:	str	r3, [sp, #60]	; 0x3c
   19f74:	b	188c0 <__assert_fail@plt+0x706c>
   19f78:	mov	r3, #0
   19f7c:	mov	r1, #1
   19f80:	mov	r2, r3
   19f84:	str	r1, [sp, #36]	; 0x24
   19f88:	str	r3, [sp, #48]	; 0x30
   19f8c:	str	sl, [sp, #72]	; 0x48
   19f90:	b	18ec8 <__assert_fail@plt+0x7674>
   19f94:	bl	11824 <abort@plt>
   19f98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19f9c:	mov	r4, r0
   19fa0:	mov	r5, r3
   19fa4:	strd	r6, [sp, #8]
   19fa8:	movw	r7, #404	; 0x194
   19fac:	movt	r7, #3
   19fb0:	strd	r8, [sp, #16]
   19fb4:	strd	sl, [sp, #24]
   19fb8:	mov	sl, r1
   19fbc:	mov	fp, r2
   19fc0:	str	lr, [sp, #32]
   19fc4:	sub	sp, sp, #60	; 0x3c
   19fc8:	bl	116b0 <__errno_location@plt>
   19fcc:	mov	r8, r0
   19fd0:	cmn	r4, #-2147483647	; 0x80000001
   19fd4:	ldr	r6, [r7]
   19fd8:	movne	r0, #0
   19fdc:	moveq	r0, #1
   19fe0:	ldr	r3, [r8]
   19fe4:	orrs	r0, r0, r4, lsr #31
   19fe8:	str	r3, [sp, #28]
   19fec:	bne	1a17c <__assert_fail@plt+0x8928>
   19ff0:	ldr	r3, [r7, #4]
   19ff4:	cmp	r3, r4
   19ff8:	bgt	1a058 <__assert_fail@plt+0x8804>
   19ffc:	add	r1, r7, #8
   1a000:	sub	r2, r4, r3
   1a004:	str	r3, [sp, #52]	; 0x34
   1a008:	cmp	r6, r1
   1a00c:	add	r2, r2, #1
   1a010:	beq	1a154 <__assert_fail@plt+0x8900>
   1a014:	mov	r1, #8
   1a018:	mov	r0, r6
   1a01c:	mvn	r3, #-2147483648	; 0x80000000
   1a020:	str	r1, [sp]
   1a024:	add	r1, sp, #52	; 0x34
   1a028:	bl	1b6e4 <__assert_fail@plt+0x9e90>
   1a02c:	mov	r6, r0
   1a030:	str	r0, [r7]
   1a034:	ldr	r0, [r7, #4]
   1a038:	mov	r1, #0
   1a03c:	ldr	r2, [sp, #52]	; 0x34
   1a040:	sub	r2, r2, r0
   1a044:	add	r0, r6, r0, lsl #3
   1a048:	lsl	r2, r2, #3
   1a04c:	bl	116e0 <memset@plt>
   1a050:	ldr	r3, [sp, #52]	; 0x34
   1a054:	str	r3, [r7, #4]
   1a058:	ldr	r1, [r5, #4]
   1a05c:	add	r0, r6, r4, lsl #3
   1a060:	add	ip, r5, #8
   1a064:	mov	r3, fp
   1a068:	mov	r2, sl
   1a06c:	ldr	r7, [r0, #4]
   1a070:	str	r0, [sp, #36]	; 0x24
   1a074:	str	ip, [sp, #40]	; 0x28
   1a078:	orr	r0, r1, #1
   1a07c:	ldr	r9, [r6, r4, lsl #3]
   1a080:	str	ip, [sp, #8]
   1a084:	ldr	lr, [r5, #44]	; 0x2c
   1a088:	str	r0, [sp, #4]
   1a08c:	ldr	ip, [r5]
   1a090:	mov	r1, r9
   1a094:	str	ip, [sp, #32]
   1a098:	ldr	ip, [r5, #40]	; 0x28
   1a09c:	str	ip, [sp, #12]
   1a0a0:	ldr	ip, [sp, #32]
   1a0a4:	str	lr, [sp, #16]
   1a0a8:	str	r0, [sp, #44]	; 0x2c
   1a0ac:	mov	r0, r7
   1a0b0:	str	ip, [sp]
   1a0b4:	bl	187d8 <__assert_fail@plt+0x6f84>
   1a0b8:	cmp	r9, r0
   1a0bc:	bhi	1a12c <__assert_fail@plt+0x88d8>
   1a0c0:	add	r9, r0, #1
   1a0c4:	movw	r3, #636	; 0x27c
   1a0c8:	movt	r3, #3
   1a0cc:	cmp	r7, r3
   1a0d0:	str	r9, [r6, r4, lsl #3]
   1a0d4:	beq	1a0e0 <__assert_fail@plt+0x888c>
   1a0d8:	mov	r0, r7
   1a0dc:	bl	15b00 <__assert_fail@plt+0x42ac>
   1a0e0:	mov	r0, r9
   1a0e4:	bl	1b534 <__assert_fail@plt+0x9ce0>
   1a0e8:	ldr	ip, [r5]
   1a0ec:	mov	r3, fp
   1a0f0:	mov	r2, sl
   1a0f4:	mov	r1, r9
   1a0f8:	mov	r7, r0
   1a0fc:	ldr	lr, [sp, #36]	; 0x24
   1a100:	ldr	r4, [r5, #40]	; 0x28
   1a104:	str	r0, [lr, #4]
   1a108:	ldr	lr, [r5, #44]	; 0x2c
   1a10c:	str	ip, [sp]
   1a110:	ldr	ip, [sp, #44]	; 0x2c
   1a114:	str	ip, [sp, #4]
   1a118:	ldr	ip, [sp, #40]	; 0x28
   1a11c:	str	r4, [sp, #12]
   1a120:	str	lr, [sp, #16]
   1a124:	str	ip, [sp, #8]
   1a128:	bl	187d8 <__assert_fail@plt+0x6f84>
   1a12c:	ldr	r3, [sp, #28]
   1a130:	mov	r0, r7
   1a134:	str	r3, [r8]
   1a138:	add	sp, sp, #60	; 0x3c
   1a13c:	ldrd	r4, [sp]
   1a140:	ldrd	r6, [sp, #8]
   1a144:	ldrd	r8, [sp, #16]
   1a148:	ldrd	sl, [sp, #24]
   1a14c:	add	sp, sp, #32
   1a150:	pop	{pc}		; (ldr pc, [sp], #4)
   1a154:	mov	r1, #8
   1a158:	mvn	r3, #-2147483648	; 0x80000000
   1a15c:	str	r1, [sp]
   1a160:	add	r1, sp, #52	; 0x34
   1a164:	bl	1b6e4 <__assert_fail@plt+0x9e90>
   1a168:	ldrd	r2, [r7, #8]
   1a16c:	mov	r6, r0
   1a170:	str	r0, [r7]
   1a174:	strd	r2, [r0]
   1a178:	b	1a034 <__assert_fail@plt+0x87e0>
   1a17c:	bl	11824 <abort@plt>
   1a180:	strd	r4, [sp, #-16]!
   1a184:	mov	r5, r0
   1a188:	str	r6, [sp, #8]
   1a18c:	str	lr, [sp, #12]
   1a190:	bl	116b0 <__errno_location@plt>
   1a194:	mov	r4, r0
   1a198:	cmp	r5, #0
   1a19c:	ldr	r0, [pc, #32]	; 1a1c4 <__assert_fail@plt+0x8970>
   1a1a0:	mov	r1, #48	; 0x30
   1a1a4:	movne	r0, r5
   1a1a8:	ldr	r6, [r4]
   1a1ac:	bl	1b85c <__assert_fail@plt+0xa008>
   1a1b0:	str	r6, [r4]
   1a1b4:	ldrd	r4, [sp]
   1a1b8:	ldr	r6, [sp, #8]
   1a1bc:	add	sp, sp, #12
   1a1c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a1c4:	andeq	r0, r3, ip, ror r3
   1a1c8:	ldr	r3, [pc, #12]	; 1a1dc <__assert_fail@plt+0x8988>
   1a1cc:	cmp	r0, #0
   1a1d0:	moveq	r0, r3
   1a1d4:	ldr	r0, [r0]
   1a1d8:	bx	lr
   1a1dc:	andeq	r0, r3, ip, ror r3
   1a1e0:	ldr	r3, [pc, #12]	; 1a1f4 <__assert_fail@plt+0x89a0>
   1a1e4:	cmp	r0, #0
   1a1e8:	moveq	r0, r3
   1a1ec:	str	r1, [r0]
   1a1f0:	bx	lr
   1a1f4:	andeq	r0, r3, ip, ror r3
   1a1f8:	ldr	r3, [pc, #52]	; 1a234 <__assert_fail@plt+0x89e0>
   1a1fc:	cmp	r0, #0
   1a200:	push	{lr}		; (str lr, [sp, #-4]!)
   1a204:	lsr	lr, r1, #5
   1a208:	and	r1, r1, #31
   1a20c:	moveq	r0, r3
   1a210:	add	r3, r0, #8
   1a214:	ldr	ip, [r3, lr, lsl #2]
   1a218:	lsr	r0, ip, r1
   1a21c:	eor	r2, r2, r0
   1a220:	and	r0, r0, #1
   1a224:	and	r2, r2, #1
   1a228:	eor	r1, ip, r2, lsl r1
   1a22c:	str	r1, [r3, lr, lsl #2]
   1a230:	pop	{pc}		; (ldr pc, [sp], #4)
   1a234:	andeq	r0, r3, ip, ror r3
   1a238:	ldr	r3, [pc, #16]	; 1a250 <__assert_fail@plt+0x89fc>
   1a23c:	cmp	r0, #0
   1a240:	movne	r3, r0
   1a244:	ldr	r0, [r3, #4]
   1a248:	str	r1, [r3, #4]
   1a24c:	bx	lr
   1a250:	andeq	r0, r3, ip, ror r3
   1a254:	ldr	r3, [pc, #48]	; 1a28c <__assert_fail@plt+0x8a38>
   1a258:	cmp	r0, #0
   1a25c:	mov	ip, #10
   1a260:	moveq	r0, r3
   1a264:	cmp	r2, #0
   1a268:	cmpne	r1, #0
   1a26c:	str	ip, [r0]
   1a270:	beq	1a280 <__assert_fail@plt+0x8a2c>
   1a274:	str	r1, [r0, #40]	; 0x28
   1a278:	str	r2, [r0, #44]	; 0x2c
   1a27c:	bx	lr
   1a280:	str	r4, [sp, #-8]!
   1a284:	str	lr, [sp, #4]
   1a288:	bl	11824 <abort@plt>
   1a28c:	andeq	r0, r3, ip, ror r3
   1a290:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1a294:	strd	r6, [sp, #8]
   1a298:	mov	r7, r0
   1a29c:	mov	r6, r1
   1a2a0:	strd	r8, [sp, #16]
   1a2a4:	mov	r8, r2
   1a2a8:	mov	r9, r3
   1a2ac:	str	lr, [sp, #24]
   1a2b0:	sub	sp, sp, #28
   1a2b4:	ldr	r4, [sp, #56]	; 0x38
   1a2b8:	ldr	ip, [pc, #104]	; 1a328 <__assert_fail@plt+0x8ad4>
   1a2bc:	cmp	r4, #0
   1a2c0:	moveq	r4, ip
   1a2c4:	bl	116b0 <__errno_location@plt>
   1a2c8:	ldr	ip, [r4, #44]	; 0x2c
   1a2cc:	mov	r5, r0
   1a2d0:	mov	r1, r6
   1a2d4:	add	lr, r4, #8
   1a2d8:	mov	r3, r9
   1a2dc:	ldr	r6, [r5]
   1a2e0:	mov	r2, r8
   1a2e4:	mov	r0, r7
   1a2e8:	str	ip, [sp, #16]
   1a2ec:	ldr	ip, [r4, #40]	; 0x28
   1a2f0:	str	lr, [sp, #8]
   1a2f4:	str	ip, [sp, #12]
   1a2f8:	ldr	ip, [r4, #4]
   1a2fc:	str	ip, [sp, #4]
   1a300:	ldr	ip, [r4]
   1a304:	str	ip, [sp]
   1a308:	bl	187d8 <__assert_fail@plt+0x6f84>
   1a30c:	str	r6, [r5]
   1a310:	add	sp, sp, #28
   1a314:	ldrd	r4, [sp]
   1a318:	ldrd	r6, [sp, #8]
   1a31c:	ldrd	r8, [sp, #16]
   1a320:	add	sp, sp, #24
   1a324:	pop	{pc}		; (ldr pc, [sp], #4)
   1a328:	andeq	r0, r3, ip, ror r3
   1a32c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a330:	cmp	r3, #0
   1a334:	ldr	r4, [pc, #220]	; 1a418 <__assert_fail@plt+0x8bc4>
   1a338:	movne	r4, r3
   1a33c:	strd	r6, [sp, #8]
   1a340:	mov	r6, r2
   1a344:	strd	r8, [sp, #16]
   1a348:	mov	r9, r0
   1a34c:	strd	sl, [sp, #24]
   1a350:	mov	sl, r1
   1a354:	str	lr, [sp, #32]
   1a358:	sub	sp, sp, #44	; 0x2c
   1a35c:	bl	116b0 <__errno_location@plt>
   1a360:	ldr	r5, [r4, #4]
   1a364:	mov	r7, r0
   1a368:	mov	r1, #0
   1a36c:	add	r8, r4, #8
   1a370:	mov	r3, sl
   1a374:	ldr	ip, [r4, #44]	; 0x2c
   1a378:	mov	r2, r9
   1a37c:	mov	r0, r1
   1a380:	ldr	lr, [r7]
   1a384:	cmp	r6, r1
   1a388:	orreq	r5, r5, #1
   1a38c:	str	ip, [sp, #16]
   1a390:	ldr	ip, [r4, #40]	; 0x28
   1a394:	stmib	sp, {r5, r8, ip}
   1a398:	ldr	ip, [r4]
   1a39c:	str	lr, [sp, #28]
   1a3a0:	str	ip, [sp]
   1a3a4:	bl	187d8 <__assert_fail@plt+0x6f84>
   1a3a8:	add	r1, r0, #1
   1a3ac:	mov	fp, r0
   1a3b0:	mov	r0, r1
   1a3b4:	str	r1, [sp, #36]	; 0x24
   1a3b8:	bl	1b534 <__assert_fail@plt+0x9ce0>
   1a3bc:	ldr	ip, [r4, #44]	; 0x2c
   1a3c0:	mov	r3, sl
   1a3c4:	mov	r2, r9
   1a3c8:	ldr	r1, [sp, #36]	; 0x24
   1a3cc:	str	ip, [sp, #16]
   1a3d0:	ldr	ip, [r4, #40]	; 0x28
   1a3d4:	str	r0, [sp, #32]
   1a3d8:	stmib	sp, {r5, r8, ip}
   1a3dc:	ldr	ip, [r4]
   1a3e0:	str	ip, [sp]
   1a3e4:	bl	187d8 <__assert_fail@plt+0x6f84>
   1a3e8:	ldr	lr, [sp, #28]
   1a3ec:	cmp	r6, #0
   1a3f0:	ldr	r0, [sp, #32]
   1a3f4:	str	lr, [r7]
   1a3f8:	strne	fp, [r6]
   1a3fc:	add	sp, sp, #44	; 0x2c
   1a400:	ldrd	r4, [sp]
   1a404:	ldrd	r6, [sp, #8]
   1a408:	ldrd	r8, [sp, #16]
   1a40c:	ldrd	sl, [sp, #24]
   1a410:	add	sp, sp, #32
   1a414:	pop	{pc}		; (ldr pc, [sp], #4)
   1a418:	andeq	r0, r3, ip, ror r3
   1a41c:	mov	r3, r2
   1a420:	mov	r2, #0
   1a424:	b	1a32c <__assert_fail@plt+0x8ad8>
   1a428:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a42c:	movw	r5, #404	; 0x194
   1a430:	movt	r5, #3
   1a434:	ldr	r3, [r5, #4]
   1a438:	strd	r6, [sp, #8]
   1a43c:	str	r8, [sp, #16]
   1a440:	str	lr, [sp, #20]
   1a444:	ldr	r7, [r5]
   1a448:	cmp	r3, #1
   1a44c:	ble	1a470 <__assert_fail@plt+0x8c1c>
   1a450:	mov	r4, #1
   1a454:	add	r6, r7, #4
   1a458:	ldr	r0, [r6, r4, lsl #3]
   1a45c:	add	r4, r4, #1
   1a460:	bl	15b00 <__assert_fail@plt+0x42ac>
   1a464:	ldr	r3, [r5, #4]
   1a468:	cmp	r3, r4
   1a46c:	bgt	1a458 <__assert_fail@plt+0x8c04>
   1a470:	ldr	r0, [r7, #4]
   1a474:	movw	r4, #636	; 0x27c
   1a478:	movt	r4, #3
   1a47c:	cmp	r0, r4
   1a480:	beq	1a494 <__assert_fail@plt+0x8c40>
   1a484:	bl	15b00 <__assert_fail@plt+0x42ac>
   1a488:	mov	r3, #256	; 0x100
   1a48c:	str	r3, [r5, #8]
   1a490:	str	r4, [r5, #12]
   1a494:	ldr	r4, [pc, #44]	; 1a4c8 <__assert_fail@plt+0x8c74>
   1a498:	cmp	r7, r4
   1a49c:	beq	1a4ac <__assert_fail@plt+0x8c58>
   1a4a0:	mov	r0, r7
   1a4a4:	bl	15b00 <__assert_fail@plt+0x42ac>
   1a4a8:	str	r4, [r5]
   1a4ac:	mov	r3, #1
   1a4b0:	ldrd	r6, [sp, #8]
   1a4b4:	str	r3, [r5, #4]
   1a4b8:	ldrd	r4, [sp]
   1a4bc:	ldr	r8, [sp, #16]
   1a4c0:	add	sp, sp, #20
   1a4c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4c8:	muleq	r3, ip, r1
   1a4cc:	ldr	r3, [pc, #4]	; 1a4d8 <__assert_fail@plt+0x8c84>
   1a4d0:	mvn	r2, #0
   1a4d4:	b	19f98 <__assert_fail@plt+0x8744>
   1a4d8:	andeq	r0, r3, ip, ror r3
   1a4dc:	ldr	r3, [pc]	; 1a4e4 <__assert_fail@plt+0x8c90>
   1a4e0:	b	19f98 <__assert_fail@plt+0x8744>
   1a4e4:	andeq	r0, r3, ip, ror r3
   1a4e8:	mov	r1, r0
   1a4ec:	ldr	r3, [pc, #8]	; 1a4fc <__assert_fail@plt+0x8ca8>
   1a4f0:	mvn	r2, #0
   1a4f4:	mov	r0, #0
   1a4f8:	b	19f98 <__assert_fail@plt+0x8744>
   1a4fc:	andeq	r0, r3, ip, ror r3
   1a500:	mov	r2, r1
   1a504:	ldr	r3, [pc, #8]	; 1a514 <__assert_fail@plt+0x8cc0>
   1a508:	mov	r1, r0
   1a50c:	mov	r0, #0
   1a510:	b	19f98 <__assert_fail@plt+0x8744>
   1a514:	andeq	r0, r3, ip, ror r3
   1a518:	strd	r4, [sp, #-12]!
   1a51c:	mov	r5, r2
   1a520:	mov	r4, r0
   1a524:	str	lr, [sp, #8]
   1a528:	sub	sp, sp, #52	; 0x34
   1a52c:	mov	r0, sp
   1a530:	bl	18634 <__assert_fail@plt+0x6de0>
   1a534:	mov	r3, sp
   1a538:	mov	r1, r5
   1a53c:	mov	r0, r4
   1a540:	mvn	r2, #0
   1a544:	bl	19f98 <__assert_fail@plt+0x8744>
   1a548:	add	sp, sp, #52	; 0x34
   1a54c:	ldrd	r4, [sp]
   1a550:	add	sp, sp, #8
   1a554:	pop	{pc}		; (ldr pc, [sp], #4)
   1a558:	strd	r4, [sp, #-16]!
   1a55c:	mov	r5, r2
   1a560:	mov	r4, r0
   1a564:	str	r6, [sp, #8]
   1a568:	mov	r6, r3
   1a56c:	str	lr, [sp, #12]
   1a570:	sub	sp, sp, #48	; 0x30
   1a574:	mov	r0, sp
   1a578:	bl	18634 <__assert_fail@plt+0x6de0>
   1a57c:	mov	r3, sp
   1a580:	mov	r2, r6
   1a584:	mov	r1, r5
   1a588:	mov	r0, r4
   1a58c:	bl	19f98 <__assert_fail@plt+0x8744>
   1a590:	add	sp, sp, #48	; 0x30
   1a594:	ldrd	r4, [sp]
   1a598:	ldr	r6, [sp, #8]
   1a59c:	add	sp, sp, #12
   1a5a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a5a4:	mov	r2, r1
   1a5a8:	mov	r1, r0
   1a5ac:	mov	r0, #0
   1a5b0:	b	1a518 <__assert_fail@plt+0x8cc4>
   1a5b4:	mov	r3, r2
   1a5b8:	mov	r2, r1
   1a5bc:	mov	r1, r0
   1a5c0:	mov	r0, #0
   1a5c4:	b	1a558 <__assert_fail@plt+0x8d04>
   1a5c8:	ldr	ip, [pc, #140]	; 1a65c <__assert_fail@plt+0x8e08>
   1a5cc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1a5d0:	ldrd	r4, [ip]
   1a5d4:	strd	r6, [sp, #8]
   1a5d8:	ldrd	r6, [ip, #8]
   1a5dc:	strd	r8, [sp, #16]
   1a5e0:	lsr	r9, r2, #5
   1a5e4:	str	lr, [sp, #24]
   1a5e8:	sub	sp, sp, #52	; 0x34
   1a5ec:	and	lr, r2, #31
   1a5f0:	add	r8, sp, #8
   1a5f4:	mov	r2, r1
   1a5f8:	strd	r4, [sp]
   1a5fc:	mov	r1, r0
   1a600:	mov	r3, sp
   1a604:	strd	r6, [sp, #8]
   1a608:	mov	r0, #0
   1a60c:	ldrd	r4, [ip, #16]
   1a610:	ldrd	r6, [ip, #24]
   1a614:	strd	r4, [sp, #16]
   1a618:	ldrd	r4, [ip, #32]
   1a61c:	strd	r6, [sp, #24]
   1a620:	ldrd	r6, [ip, #40]	; 0x28
   1a624:	strd	r4, [sp, #32]
   1a628:	strd	r6, [sp, #40]	; 0x28
   1a62c:	ldr	ip, [r8, r9, lsl #2]
   1a630:	mvn	r4, ip, lsr lr
   1a634:	and	r4, r4, #1
   1a638:	eor	lr, ip, r4, lsl lr
   1a63c:	str	lr, [r8, r9, lsl #2]
   1a640:	bl	19f98 <__assert_fail@plt+0x8744>
   1a644:	add	sp, sp, #52	; 0x34
   1a648:	ldrd	r4, [sp]
   1a64c:	ldrd	r6, [sp, #8]
   1a650:	ldrd	r8, [sp, #16]
   1a654:	add	sp, sp, #24
   1a658:	pop	{pc}		; (ldr pc, [sp], #4)
   1a65c:	andeq	r0, r3, ip, ror r3
   1a660:	mov	r2, r1
   1a664:	mvn	r1, #0
   1a668:	b	1a5c8 <__assert_fail@plt+0x8d74>
   1a66c:	mov	r2, #58	; 0x3a
   1a670:	mvn	r1, #0
   1a674:	b	1a5c8 <__assert_fail@plt+0x8d74>
   1a678:	mov	r2, #58	; 0x3a
   1a67c:	b	1a5c8 <__assert_fail@plt+0x8d74>
   1a680:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a684:	strd	r6, [sp, #8]
   1a688:	mov	r6, r0
   1a68c:	mov	r7, r2
   1a690:	str	lr, [sp, #16]
   1a694:	sub	sp, sp, #100	; 0x64
   1a698:	mov	r0, sp
   1a69c:	bl	18634 <__assert_fail@plt+0x6de0>
   1a6a0:	ldrd	r4, [sp, #8]
   1a6a4:	mov	r1, r7
   1a6a8:	mov	r0, r6
   1a6ac:	add	r3, sp, #48	; 0x30
   1a6b0:	mvn	r2, #0
   1a6b4:	ldrd	r6, [sp]
   1a6b8:	strd	r4, [sp, #56]	; 0x38
   1a6bc:	ldrd	r4, [sp, #16]
   1a6c0:	strd	r6, [sp, #48]	; 0x30
   1a6c4:	ldrd	r6, [sp, #32]
   1a6c8:	ldr	lr, [sp, #60]	; 0x3c
   1a6cc:	strd	r4, [sp, #64]	; 0x40
   1a6d0:	ldrd	r4, [sp, #24]
   1a6d4:	mvn	ip, lr
   1a6d8:	and	ip, ip, #67108864	; 0x4000000
   1a6dc:	strd	r4, [sp, #72]	; 0x48
   1a6e0:	eor	ip, ip, lr
   1a6e4:	ldrd	r4, [sp, #40]	; 0x28
   1a6e8:	str	ip, [sp, #60]	; 0x3c
   1a6ec:	strd	r6, [sp, #80]	; 0x50
   1a6f0:	strd	r4, [sp, #88]	; 0x58
   1a6f4:	bl	19f98 <__assert_fail@plt+0x8744>
   1a6f8:	add	sp, sp, #100	; 0x64
   1a6fc:	ldrd	r4, [sp]
   1a700:	ldrd	r6, [sp, #8]
   1a704:	add	sp, sp, #16
   1a708:	pop	{pc}		; (ldr pc, [sp], #4)
   1a70c:	ldr	ip, [pc, #156]	; 1a7b0 <__assert_fail@plt+0x8f5c>
   1a710:	cmp	r2, #0
   1a714:	cmpne	r1, #0
   1a718:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a71c:	strd	r6, [sp, #8]
   1a720:	mov	r6, r2
   1a724:	str	r8, [sp, #16]
   1a728:	mov	r8, r3
   1a72c:	strd	sl, [sp, #20]
   1a730:	ldrd	r4, [ip]
   1a734:	str	lr, [sp, #28]
   1a738:	sub	sp, sp, #48	; 0x30
   1a73c:	mov	lr, #10
   1a740:	ldrd	r2, [ip, #8]
   1a744:	ldrd	sl, [ip, #16]
   1a748:	strd	r4, [sp]
   1a74c:	ldrd	r4, [ip, #32]
   1a750:	str	lr, [sp]
   1a754:	strd	r2, [sp, #8]
   1a758:	strd	sl, [sp, #16]
   1a75c:	ldrd	r2, [ip, #24]
   1a760:	ldrd	sl, [ip, #40]	; 0x28
   1a764:	strd	r2, [sp, #24]
   1a768:	strd	r4, [sp, #32]
   1a76c:	strd	sl, [sp, #40]	; 0x28
   1a770:	beq	1a7ac <__assert_fail@plt+0x8f58>
   1a774:	ldr	r2, [sp, #80]	; 0x50
   1a778:	mov	r7, r1
   1a77c:	mov	r3, sp
   1a780:	mov	r1, r8
   1a784:	str	r7, [sp, #40]	; 0x28
   1a788:	str	r6, [sp, #44]	; 0x2c
   1a78c:	bl	19f98 <__assert_fail@plt+0x8744>
   1a790:	add	sp, sp, #48	; 0x30
   1a794:	ldrd	r4, [sp]
   1a798:	ldrd	r6, [sp, #8]
   1a79c:	ldr	r8, [sp, #16]
   1a7a0:	ldrd	sl, [sp, #20]
   1a7a4:	add	sp, sp, #28
   1a7a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7ac:	bl	11824 <abort@plt>
   1a7b0:	andeq	r0, r3, ip, ror r3
   1a7b4:	mvn	ip, #0
   1a7b8:	push	{lr}		; (str lr, [sp, #-4]!)
   1a7bc:	sub	sp, sp, #12
   1a7c0:	str	ip, [sp]
   1a7c4:	bl	1a70c <__assert_fail@plt+0x8eb8>
   1a7c8:	add	sp, sp, #12
   1a7cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7d0:	mvn	ip, #0
   1a7d4:	push	{lr}		; (str lr, [sp, #-4]!)
   1a7d8:	sub	sp, sp, #12
   1a7dc:	mov	r3, r2
   1a7e0:	mov	r2, r1
   1a7e4:	mov	r1, r0
   1a7e8:	mov	r0, #0
   1a7ec:	str	ip, [sp]
   1a7f0:	bl	1a70c <__assert_fail@plt+0x8eb8>
   1a7f4:	add	sp, sp, #12
   1a7f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7fc:	push	{lr}		; (str lr, [sp, #-4]!)
   1a800:	sub	sp, sp, #12
   1a804:	str	r3, [sp]
   1a808:	mov	r3, r2
   1a80c:	mov	r2, r1
   1a810:	mov	r1, r0
   1a814:	mov	r0, #0
   1a818:	bl	1a70c <__assert_fail@plt+0x8eb8>
   1a81c:	add	sp, sp, #12
   1a820:	pop	{pc}		; (ldr pc, [sp], #4)
   1a824:	ldr	r3, [pc]	; 1a82c <__assert_fail@plt+0x8fd8>
   1a828:	b	19f98 <__assert_fail@plt+0x8744>
   1a82c:	andeq	r0, r3, r4, lsr #3
   1a830:	mov	r2, r1
   1a834:	ldr	r3, [pc, #8]	; 1a844 <__assert_fail@plt+0x8ff0>
   1a838:	mov	r1, r0
   1a83c:	mov	r0, #0
   1a840:	b	19f98 <__assert_fail@plt+0x8744>
   1a844:	andeq	r0, r3, r4, lsr #3
   1a848:	ldr	r3, [pc, #4]	; 1a854 <__assert_fail@plt+0x9000>
   1a84c:	mvn	r2, #0
   1a850:	b	19f98 <__assert_fail@plt+0x8744>
   1a854:	andeq	r0, r3, r4, lsr #3
   1a858:	mov	r1, r0
   1a85c:	ldr	r3, [pc, #8]	; 1a86c <__assert_fail@plt+0x9018>
   1a860:	mvn	r2, #0
   1a864:	mov	r0, #0
   1a868:	b	19f98 <__assert_fail@plt+0x8744>
   1a86c:	andeq	r0, r3, r4, lsr #3
   1a870:	strd	r4, [sp, #-16]!
   1a874:	mov	r5, r0
   1a878:	mov	r4, #0
   1a87c:	movw	r0, #60628	; 0xecd4
   1a880:	movt	r0, #1
   1a884:	str	r6, [sp, #8]
   1a888:	mov	r1, #524288	; 0x80000
   1a88c:	str	lr, [sp, #12]
   1a890:	str	r4, [r5, #4]
   1a894:	bl	1c9b0 <__assert_fail@plt+0xb15c>
   1a898:	cmp	r0, r4
   1a89c:	str	r0, [r5]
   1a8a0:	movge	r0, r4
   1a8a4:	blt	1a8b8 <__assert_fail@plt+0x9064>
   1a8a8:	ldrd	r4, [sp]
   1a8ac:	ldr	r6, [sp, #8]
   1a8b0:	add	sp, sp, #12
   1a8b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8b8:	mov	r1, r4
   1a8bc:	mov	r0, r4
   1a8c0:	bl	11650 <getcwd@plt>
   1a8c4:	clz	r4, r0
   1a8c8:	str	r0, [r5, #4]
   1a8cc:	lsr	r4, r4, #5
   1a8d0:	ldr	r6, [sp, #8]
   1a8d4:	rsb	r0, r4, #0
   1a8d8:	ldrd	r4, [sp]
   1a8dc:	add	sp, sp, #12
   1a8e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8e4:	ldr	r3, [r0]
   1a8e8:	cmp	r3, #0
   1a8ec:	blt	1a8f8 <__assert_fail@plt+0x90a4>
   1a8f0:	mov	r0, r3
   1a8f4:	b	117b8 <fchdir@plt>
   1a8f8:	ldr	r0, [r0, #4]
   1a8fc:	b	1c5dc <__assert_fail@plt+0xad88>
   1a900:	str	r4, [sp, #-8]!
   1a904:	mov	r4, r0
   1a908:	ldr	r0, [r0]
   1a90c:	str	lr, [sp, #4]
   1a910:	cmp	r0, #0
   1a914:	blt	1a91c <__assert_fail@plt+0x90c8>
   1a918:	bl	11830 <close@plt>
   1a91c:	ldr	r0, [r4, #4]
   1a920:	ldr	r4, [sp]
   1a924:	ldr	lr, [sp, #4]
   1a928:	add	sp, sp, #8
   1a92c:	b	15b00 <__assert_fail@plt+0x42ac>
   1a930:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a934:	subs	r4, r0, #0
   1a938:	strd	r6, [sp, #8]
   1a93c:	str	r8, [sp, #16]
   1a940:	str	lr, [sp, #20]
   1a944:	beq	1a9a8 <__assert_fail@plt+0x9154>
   1a948:	cmp	r4, #10
   1a94c:	beq	1a968 <__assert_fail@plt+0x9114>
   1a950:	mov	r0, r4
   1a954:	ldrd	r4, [sp]
   1a958:	ldrd	r6, [sp, #8]
   1a95c:	ldr	r8, [sp, #16]
   1a960:	add	sp, sp, #20
   1a964:	pop	{pc}		; (ldr pc, [sp], #4)
   1a968:	mov	r5, r1
   1a96c:	movw	r1, #62020	; 0xf244
   1a970:	movt	r1, #1
   1a974:	ldr	r6, [r5]
   1a978:	mov	r0, r6
   1a97c:	bl	11464 <strcmp@plt>
   1a980:	subs	r7, r0, #0
   1a984:	bne	1a950 <__assert_fail@plt+0x90fc>
   1a988:	mov	r0, r6
   1a98c:	mvn	r4, #0
   1a990:	bl	117dc <freecon@plt>
   1a994:	str	r7, [r5]
   1a998:	bl	116b0 <__errno_location@plt>
   1a99c:	mov	r3, #61	; 0x3d
   1a9a0:	str	r3, [r0]
   1a9a4:	b	1a950 <__assert_fail@plt+0x90fc>
   1a9a8:	bl	116b0 <__errno_location@plt>
   1a9ac:	mov	r3, #95	; 0x5f
   1a9b0:	mvn	r4, #0
   1a9b4:	str	r3, [r0]
   1a9b8:	b	1a950 <__assert_fail@plt+0x90fc>
   1a9bc:	str	r4, [sp, #-8]!
   1a9c0:	mov	r4, r1
   1a9c4:	str	lr, [sp, #4]
   1a9c8:	bl	11668 <getfilecon@plt>
   1a9cc:	mov	r1, r4
   1a9d0:	ldr	r4, [sp]
   1a9d4:	ldr	lr, [sp, #4]
   1a9d8:	add	sp, sp, #8
   1a9dc:	b	1a930 <__assert_fail@plt+0x90dc>
   1a9e0:	str	r4, [sp, #-8]!
   1a9e4:	mov	r4, r1
   1a9e8:	str	lr, [sp, #4]
   1a9ec:	bl	115d8 <lgetfilecon@plt>
   1a9f0:	mov	r1, r4
   1a9f4:	ldr	r4, [sp]
   1a9f8:	ldr	lr, [sp, #4]
   1a9fc:	add	sp, sp, #8
   1aa00:	b	1a930 <__assert_fail@plt+0x90dc>
   1aa04:	str	r4, [sp, #-8]!
   1aa08:	mov	r4, r1
   1aa0c:	str	lr, [sp, #4]
   1aa10:	bl	11500 <fgetfilecon@plt>
   1aa14:	mov	r1, r4
   1aa18:	ldr	r4, [sp]
   1aa1c:	ldr	lr, [sp, #4]
   1aa20:	add	sp, sp, #8
   1aa24:	b	1a930 <__assert_fail@plt+0x90dc>
   1aa28:	subs	r1, r0, #0
   1aa2c:	movw	r0, #56396	; 0xdc4c
   1aa30:	movt	r0, #1
   1aa34:	beq	1aa40 <__assert_fail@plt+0x91ec>
   1aa38:	mov	r2, #1
   1aa3c:	b	1168c <setenv@plt>
   1aa40:	b	1180c <unsetenv@plt>
   1aa44:	cmp	r0, #0
   1aa48:	bxeq	lr
   1aa4c:	str	r4, [sp, #-8]!
   1aa50:	str	lr, [sp, #4]
   1aa54:	ldr	r4, [r0]
   1aa58:	bl	15b00 <__assert_fail@plt+0x42ac>
   1aa5c:	subs	r0, r4, #0
   1aa60:	bne	1aa54 <__assert_fail@plt+0x9200>
   1aa64:	ldr	r4, [sp]
   1aa68:	add	sp, sp, #4
   1aa6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa70:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1aa74:	mov	r5, r0
   1aa78:	strd	r6, [sp, #8]
   1aa7c:	str	r8, [sp, #16]
   1aa80:	str	lr, [sp, #20]
   1aa84:	bl	116b0 <__errno_location@plt>
   1aa88:	mov	r4, r0
   1aa8c:	ldrb	r0, [r5, #4]
   1aa90:	ldr	r6, [r4]
   1aa94:	cmp	r0, #0
   1aa98:	addne	r0, r5, #5
   1aa9c:	bl	1aa28 <__assert_fail@plt+0x91d4>
   1aaa0:	cmp	r0, #0
   1aaa4:	beq	1aad4 <__assert_fail@plt+0x9280>
   1aaa8:	ldr	r6, [r4]
   1aaac:	mov	r7, #0
   1aab0:	mov	r0, r5
   1aab4:	bl	1aa44 <__assert_fail@plt+0x91f0>
   1aab8:	mov	r0, r7
   1aabc:	ldr	r8, [sp, #16]
   1aac0:	str	r6, [r4]
   1aac4:	ldrd	r4, [sp]
   1aac8:	ldrd	r6, [sp, #8]
   1aacc:	add	sp, sp, #20
   1aad0:	pop	{pc}		; (ldr pc, [sp], #4)
   1aad4:	mov	r7, #1
   1aad8:	bl	1153c <tzset@plt>
   1aadc:	b	1aab0 <__assert_fail@plt+0x925c>
   1aae0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1aae4:	strd	r6, [sp, #8]
   1aae8:	subs	r6, r0, #0
   1aaec:	str	r8, [sp, #16]
   1aaf0:	str	lr, [sp, #20]
   1aaf4:	beq	1ab60 <__assert_fail@plt+0x930c>
   1aaf8:	bl	11674 <strlen@plt>
   1aafc:	add	r5, r0, #1
   1ab00:	cmp	r5, #58	; 0x3a
   1ab04:	movcs	r0, r5
   1ab08:	movcc	r0, #58	; 0x3a
   1ab0c:	add	r0, r0, #9
   1ab10:	bic	r0, r0, #3
   1ab14:	bl	1ba8c <__assert_fail@plt+0xa238>
   1ab18:	subs	r4, r0, #0
   1ab1c:	beq	1ab48 <__assert_fail@plt+0x92f4>
   1ab20:	mov	r7, #0
   1ab24:	mov	ip, #1
   1ab28:	add	r3, r4, #5
   1ab2c:	mov	r1, r6
   1ab30:	mov	r0, r3
   1ab34:	mov	r2, r5
   1ab38:	str	r7, [r4]
   1ab3c:	strh	ip, [r4, #4]
   1ab40:	bl	114b8 <memcpy@plt>
   1ab44:	strb	r7, [r0, r5]
   1ab48:	mov	r0, r4
   1ab4c:	ldrd	r4, [sp]
   1ab50:	ldrd	r6, [sp, #8]
   1ab54:	ldr	r8, [sp, #16]
   1ab58:	add	sp, sp, #20
   1ab5c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab60:	mov	r0, #64	; 0x40
   1ab64:	bl	1ba8c <__assert_fail@plt+0xa238>
   1ab68:	subs	r4, r0, #0
   1ab6c:	strne	r6, [r4]
   1ab70:	strhne	r6, [r4, #4]
   1ab74:	b	1ab48 <__assert_fail@plt+0x92f4>
   1ab78:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ab7c:	strd	r6, [sp, #8]
   1ab80:	ldr	r6, [r1, #40]	; 0x28
   1ab84:	str	r8, [sp, #16]
   1ab88:	str	lr, [sp, #20]
   1ab8c:	cmp	r6, #0
   1ab90:	beq	1ac6c <__assert_fail@plt+0x9418>
   1ab94:	cmp	r1, r6
   1ab98:	mov	r7, r1
   1ab9c:	mov	r5, r0
   1aba0:	bhi	1abb0 <__assert_fail@plt+0x935c>
   1aba4:	add	r3, r1, #44	; 0x2c
   1aba8:	cmp	r6, r3
   1abac:	bcc	1ac6c <__assert_fail@plt+0x9418>
   1abb0:	ldrb	r3, [r6]
   1abb4:	cmp	r3, #0
   1abb8:	addne	r4, r5, #5
   1abbc:	beq	1ac60 <__assert_fail@plt+0x940c>
   1abc0:	mov	r1, r6
   1abc4:	mov	r0, r4
   1abc8:	bl	11464 <strcmp@plt>
   1abcc:	cmp	r0, #0
   1abd0:	add	r2, r5, #5
   1abd4:	mov	r0, r4
   1abd8:	beq	1ac44 <__assert_fail@plt+0x93f0>
   1abdc:	ldrb	r3, [r4]
   1abe0:	cmp	r3, #0
   1abe4:	bne	1abfc <__assert_fail@plt+0x93a8>
   1abe8:	cmp	r4, r2
   1abec:	bne	1ac74 <__assert_fail@plt+0x9420>
   1abf0:	ldrb	r3, [r5, #4]
   1abf4:	cmp	r3, #0
   1abf8:	beq	1ac74 <__assert_fail@plt+0x9420>
   1abfc:	bl	11674 <strlen@plt>
   1ac00:	add	r0, r0, #1
   1ac04:	ldrb	r3, [r4, r0]!
   1ac08:	cmp	r3, #0
   1ac0c:	bne	1abc0 <__assert_fail@plt+0x936c>
   1ac10:	ldr	r3, [r5]
   1ac14:	cmp	r3, #0
   1ac18:	addne	r4, r3, #5
   1ac1c:	movne	r5, r3
   1ac20:	b	1abc0 <__assert_fail@plt+0x936c>
   1ac24:	mov	r0, r6
   1ac28:	bl	1aae0 <__assert_fail@plt+0x928c>
   1ac2c:	cmp	r0, #0
   1ac30:	str	r0, [r5]
   1ac34:	beq	1ac4c <__assert_fail@plt+0x93f8>
   1ac38:	mov	r3, #0
   1ac3c:	add	r4, r0, #5
   1ac40:	strb	r3, [r0, #4]
   1ac44:	mov	r0, #1
   1ac48:	str	r4, [r7, #40]	; 0x28
   1ac4c:	ldrd	r4, [sp]
   1ac50:	ldrd	r6, [sp, #8]
   1ac54:	ldr	r8, [sp, #16]
   1ac58:	add	sp, sp, #20
   1ac5c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac60:	movw	r4, #55136	; 0xd760
   1ac64:	movt	r4, #1
   1ac68:	b	1ac44 <__assert_fail@plt+0x93f0>
   1ac6c:	mov	r0, #1
   1ac70:	b	1ac4c <__assert_fail@plt+0x93f8>
   1ac74:	mov	r0, r6
   1ac78:	bl	11674 <strlen@plt>
   1ac7c:	add	r3, r5, #64	; 0x40
   1ac80:	add	r8, r0, #1
   1ac84:	sub	r3, r3, r4
   1ac88:	cmp	r3, r8
   1ac8c:	ble	1ac24 <__assert_fail@plt+0x93d0>
   1ac90:	mov	r1, r6
   1ac94:	mov	r2, r8
   1ac98:	mov	r0, r4
   1ac9c:	bl	114b8 <memcpy@plt>
   1aca0:	mov	r3, #0
   1aca4:	strb	r3, [r4, r8]
   1aca8:	b	1ac44 <__assert_fail@plt+0x93f0>
   1acac:	strd	r4, [sp, #-16]!
   1acb0:	mov	r4, r0
   1acb4:	movw	r0, #56396	; 0xdc4c
   1acb8:	movt	r0, #1
   1acbc:	str	r6, [sp, #8]
   1acc0:	str	lr, [sp, #12]
   1acc4:	bl	115cc <getenv@plt>
   1acc8:	subs	r5, r0, #0
   1accc:	ldrb	r3, [r4, #4]
   1acd0:	beq	1ad58 <__assert_fail@plt+0x9504>
   1acd4:	cmp	r3, #0
   1acd8:	bne	1ad2c <__assert_fail@plt+0x94d8>
   1acdc:	mov	r0, r5
   1ace0:	bl	1aae0 <__assert_fail@plt+0x928c>
   1ace4:	subs	r5, r0, #0
   1ace8:	beq	1ad44 <__assert_fail@plt+0x94f0>
   1acec:	ldrb	r0, [r4, #4]
   1acf0:	cmp	r0, #0
   1acf4:	addne	r0, r4, #5
   1acf8:	bl	1aa28 <__assert_fail@plt+0x91d4>
   1acfc:	cmp	r0, #0
   1ad00:	beq	1ad64 <__assert_fail@plt+0x9510>
   1ad04:	bl	116b0 <__errno_location@plt>
   1ad08:	cmp	r5, #1
   1ad0c:	mov	r4, r0
   1ad10:	ldr	r6, [r0]
   1ad14:	beq	1ad20 <__assert_fail@plt+0x94cc>
   1ad18:	mov	r0, r5
   1ad1c:	bl	1aa44 <__assert_fail@plt+0x91f0>
   1ad20:	mov	r5, #0
   1ad24:	str	r6, [r4]
   1ad28:	b	1ad44 <__assert_fail@plt+0x94f0>
   1ad2c:	mov	r1, r5
   1ad30:	add	r0, r4, #5
   1ad34:	bl	11464 <strcmp@plt>
   1ad38:	cmp	r0, #0
   1ad3c:	bne	1acdc <__assert_fail@plt+0x9488>
   1ad40:	mov	r5, #1
   1ad44:	mov	r0, r5
   1ad48:	ldrd	r4, [sp]
   1ad4c:	ldr	r6, [sp, #8]
   1ad50:	add	sp, sp, #12
   1ad54:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad58:	cmp	r3, #0
   1ad5c:	beq	1ad40 <__assert_fail@plt+0x94ec>
   1ad60:	b	1acdc <__assert_fail@plt+0x9488>
   1ad64:	bl	1153c <tzset@plt>
   1ad68:	b	1ad44 <__assert_fail@plt+0x94f0>
   1ad6c:	cmp	r0, #1
   1ad70:	beq	1ad78 <__assert_fail@plt+0x9524>
   1ad74:	b	1aa44 <__assert_fail@plt+0x91f0>
   1ad78:	bx	lr
   1ad7c:	subs	ip, r0, #0
   1ad80:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ad84:	mov	r5, r1
   1ad88:	strd	r6, [sp, #8]
   1ad8c:	str	r8, [sp, #16]
   1ad90:	str	lr, [sp, #20]
   1ad94:	beq	1ae20 <__assert_fail@plt+0x95cc>
   1ad98:	mov	r4, r2
   1ad9c:	mov	r6, ip
   1ada0:	bl	1acac <__assert_fail@plt+0x9458>
   1ada4:	subs	r7, r0, #0
   1ada8:	beq	1adf4 <__assert_fail@plt+0x95a0>
   1adac:	mov	r0, r5
   1adb0:	mov	r1, r4
   1adb4:	bl	1150c <localtime_r@plt>
   1adb8:	cmp	r0, #0
   1adbc:	beq	1ade4 <__assert_fail@plt+0x9590>
   1adc0:	mov	r0, r6
   1adc4:	mov	r1, r4
   1adc8:	bl	1ab78 <__assert_fail@plt+0x9324>
   1adcc:	cmp	r0, #0
   1add0:	beq	1ade4 <__assert_fail@plt+0x9590>
   1add4:	cmp	r7, #1
   1add8:	bne	1ae0c <__assert_fail@plt+0x95b8>
   1addc:	mov	r0, r4
   1ade0:	b	1adf8 <__assert_fail@plt+0x95a4>
   1ade4:	cmp	r7, #1
   1ade8:	beq	1adf4 <__assert_fail@plt+0x95a0>
   1adec:	mov	r0, r7
   1adf0:	bl	1aa70 <__assert_fail@plt+0x921c>
   1adf4:	mov	r0, #0
   1adf8:	ldrd	r4, [sp]
   1adfc:	ldrd	r6, [sp, #8]
   1ae00:	ldr	r8, [sp, #16]
   1ae04:	add	sp, sp, #20
   1ae08:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae0c:	mov	r0, r7
   1ae10:	bl	1aa70 <__assert_fail@plt+0x921c>
   1ae14:	cmp	r0, #0
   1ae18:	bne	1addc <__assert_fail@plt+0x9588>
   1ae1c:	b	1adf4 <__assert_fail@plt+0x95a0>
   1ae20:	mov	r0, r5
   1ae24:	mov	r1, r2
   1ae28:	ldrd	r4, [sp]
   1ae2c:	ldrd	r6, [sp, #8]
   1ae30:	ldr	r8, [sp, #16]
   1ae34:	ldr	lr, [sp, #20]
   1ae38:	add	sp, sp, #24
   1ae3c:	b	11440 <gmtime_r@plt>
   1ae40:	strd	r4, [sp, #-20]!	; 0xffffffec
   1ae44:	subs	r5, r0, #0
   1ae48:	strd	r6, [sp, #8]
   1ae4c:	mov	r6, r1
   1ae50:	str	lr, [sp, #16]
   1ae54:	sub	sp, sp, #52	; 0x34
   1ae58:	beq	1af48 <__assert_fail@plt+0x96f4>
   1ae5c:	bl	1acac <__assert_fail@plt+0x9458>
   1ae60:	subs	r4, r0, #0
   1ae64:	beq	1aec8 <__assert_fail@plt+0x9674>
   1ae68:	ldr	r3, [r6]
   1ae6c:	mvn	r2, #0
   1ae70:	add	r0, sp, #4
   1ae74:	ldr	r1, [r6, #4]
   1ae78:	str	r3, [sp, #4]
   1ae7c:	str	r2, [sp, #32]
   1ae80:	ldrd	r2, [r6, #8]
   1ae84:	str	r1, [sp, #8]
   1ae88:	ldr	r1, [r6, #16]
   1ae8c:	strd	r2, [sp, #12]
   1ae90:	ldr	r2, [r6, #20]
   1ae94:	str	r1, [sp, #20]
   1ae98:	ldr	r3, [r6, #32]
   1ae9c:	str	r2, [sp, #24]
   1aea0:	str	r3, [sp, #36]	; 0x24
   1aea4:	bl	11488 <mktime@plt>
   1aea8:	ldr	r3, [sp, #32]
   1aeac:	mov	r7, r0
   1aeb0:	cmp	r3, #0
   1aeb4:	bge	1aee4 <__assert_fail@plt+0x9690>
   1aeb8:	cmp	r4, #1
   1aebc:	beq	1aec8 <__assert_fail@plt+0x9674>
   1aec0:	mov	r0, r4
   1aec4:	bl	1aa70 <__assert_fail@plt+0x921c>
   1aec8:	mvn	r7, #0
   1aecc:	mov	r0, r7
   1aed0:	add	sp, sp, #52	; 0x34
   1aed4:	ldrd	r4, [sp]
   1aed8:	ldrd	r6, [sp, #8]
   1aedc:	add	sp, sp, #16
   1aee0:	pop	{pc}		; (ldr pc, [sp], #4)
   1aee4:	mov	r0, r5
   1aee8:	add	r1, sp, #4
   1aeec:	bl	1ab78 <__assert_fail@plt+0x9324>
   1aef0:	cmp	r0, #0
   1aef4:	beq	1aeb8 <__assert_fail@plt+0x9664>
   1aef8:	cmp	r4, #1
   1aefc:	bne	1af34 <__assert_fail@plt+0x96e0>
   1af00:	ldrd	r0, [sp, #4]
   1af04:	ldrd	r2, [sp, #12]
   1af08:	ldrd	r4, [sp, #20]
   1af0c:	strd	r0, [r6]
   1af10:	ldrd	r0, [sp, #28]
   1af14:	strd	r2, [r6, #8]
   1af18:	ldrd	r2, [sp, #36]	; 0x24
   1af1c:	strd	r4, [r6, #16]
   1af20:	ldr	ip, [sp, #44]	; 0x2c
   1af24:	strd	r0, [r6, #24]
   1af28:	strd	r2, [r6, #32]
   1af2c:	str	ip, [r6, #40]	; 0x28
   1af30:	b	1aecc <__assert_fail@plt+0x9678>
   1af34:	mov	r0, r4
   1af38:	bl	1aa70 <__assert_fail@plt+0x921c>
   1af3c:	cmp	r0, #0
   1af40:	bne	1af00 <__assert_fail@plt+0x96ac>
   1af44:	b	1aec8 <__assert_fail@plt+0x9674>
   1af48:	mov	r0, r1
   1af4c:	bl	117ac <timegm@plt>
   1af50:	mov	r7, r0
   1af54:	b	1aecc <__assert_fail@plt+0x9678>
   1af58:	cmp	r1, #0
   1af5c:	strd	r4, [sp, #-16]!
   1af60:	mov	ip, r3
   1af64:	str	r6, [sp, #8]
   1af68:	mov	r4, r0
   1af6c:	str	lr, [sp, #12]
   1af70:	sub	sp, sp, #32
   1af74:	ldr	r5, [sp, #48]	; 0x30
   1af78:	ldr	r6, [sp, #52]	; 0x34
   1af7c:	beq	1b0c0 <__assert_fail@plt+0x986c>
   1af80:	mov	r3, r1
   1af84:	mov	r1, #1
   1af88:	stm	sp, {r2, ip}
   1af8c:	movw	r2, #62032	; 0xf250
   1af90:	movt	r2, #1
   1af94:	bl	11704 <__fprintf_chk@plt>
   1af98:	mov	r2, #5
   1af9c:	movw	r1, #62052	; 0xf264
   1afa0:	movt	r1, #1
   1afa4:	mov	r0, #0
   1afa8:	bl	114e8 <dcgettext@plt>
   1afac:	movw	ip, #2022	; 0x7e6
   1afb0:	mov	r3, r0
   1afb4:	mov	r1, #1
   1afb8:	movw	r2, #62780	; 0xf53c
   1afbc:	movt	r2, #1
   1afc0:	mov	r0, r4
   1afc4:	str	ip, [sp]
   1afc8:	bl	11704 <__fprintf_chk@plt>
   1afcc:	mov	r1, r4
   1afd0:	mov	r0, #10
   1afd4:	bl	114dc <fputc_unlocked@plt>
   1afd8:	mov	r2, #5
   1afdc:	movw	r1, #62056	; 0xf268
   1afe0:	movt	r1, #1
   1afe4:	mov	r0, #0
   1afe8:	bl	114e8 <dcgettext@plt>
   1afec:	mov	r2, r0
   1aff0:	mov	r1, #1
   1aff4:	movw	r3, #62228	; 0xf314
   1aff8:	movt	r3, #1
   1affc:	mov	r0, r4
   1b000:	bl	11704 <__fprintf_chk@plt>
   1b004:	mov	r1, r4
   1b008:	mov	r0, #10
   1b00c:	bl	114dc <fputc_unlocked@plt>
   1b010:	cmp	r6, #9
   1b014:	ldrls	pc, [pc, r6, lsl #2]
   1b018:	b	1b32c <__assert_fail@plt+0x9ad8>
   1b01c:	andeq	fp, r1, ip, lsr #1
   1b020:	ldrdeq	fp, [r1], -ip
   1b024:	andeq	fp, r1, r8, lsl r1
   1b028:	andeq	fp, r1, r8, asr r1
   1b02c:	andeq	fp, r1, r0, lsr #3
   1b030:	ldrdeq	fp, [r1], -r8
   1b034:	andeq	fp, r1, r0, lsr #4
   1b038:	andeq	fp, r1, r4, ror r2
   1b03c:	andeq	fp, r1, ip, asr #5
   1b040:	andeq	fp, r1, r4, asr #32
   1b044:	movw	r1, #62532	; 0xf444
   1b048:	movt	r1, #1
   1b04c:	mov	r2, #5
   1b050:	mov	r0, #0
   1b054:	bl	114e8 <dcgettext@plt>
   1b058:	ldr	lr, [r5, #4]
   1b05c:	mov	r2, r0
   1b060:	mov	r1, #1
   1b064:	mov	r0, r4
   1b068:	ldr	r3, [r5, #8]
   1b06c:	ldr	ip, [r5, #32]
   1b070:	str	lr, [sp]
   1b074:	ldr	lr, [r5, #12]
   1b078:	str	ip, [sp, #28]
   1b07c:	ldr	ip, [r5, #28]
   1b080:	str	r3, [sp, #4]
   1b084:	ldr	r3, [r5, #16]
   1b088:	str	lr, [sp, #8]
   1b08c:	ldr	lr, [r5, #20]
   1b090:	str	ip, [sp, #24]
   1b094:	ldr	ip, [r5, #24]
   1b098:	str	r3, [sp, #12]
   1b09c:	ldr	r3, [r5]
   1b0a0:	str	lr, [sp, #16]
   1b0a4:	str	ip, [sp, #20]
   1b0a8:	bl	11704 <__fprintf_chk@plt>
   1b0ac:	add	sp, sp, #32
   1b0b0:	ldrd	r4, [sp]
   1b0b4:	ldr	r6, [sp, #8]
   1b0b8:	add	sp, sp, #12
   1b0bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b0c0:	mov	r3, r2
   1b0c4:	mov	r1, #1
   1b0c8:	str	ip, [sp]
   1b0cc:	movw	r2, #62044	; 0xf25c
   1b0d0:	movt	r2, #1
   1b0d4:	bl	11704 <__fprintf_chk@plt>
   1b0d8:	b	1af98 <__assert_fail@plt+0x9744>
   1b0dc:	mov	r2, #5
   1b0e0:	movw	r1, #62264	; 0xf338
   1b0e4:	movt	r1, #1
   1b0e8:	mov	r0, #0
   1b0ec:	bl	114e8 <dcgettext@plt>
   1b0f0:	ldr	r3, [r5]
   1b0f4:	mov	r2, r0
   1b0f8:	mov	r1, #1
   1b0fc:	mov	r0, r4
   1b100:	add	sp, sp, #32
   1b104:	ldrd	r4, [sp]
   1b108:	ldr	r6, [sp, #8]
   1b10c:	ldr	lr, [sp, #12]
   1b110:	add	sp, sp, #16
   1b114:	b	11704 <__fprintf_chk@plt>
   1b118:	mov	r2, #5
   1b11c:	movw	r1, #62280	; 0xf348
   1b120:	movt	r1, #1
   1b124:	mov	r0, #0
   1b128:	bl	114e8 <dcgettext@plt>
   1b12c:	ldm	r5, {r3, ip}
   1b130:	mov	r2, r0
   1b134:	mov	r1, #1
   1b138:	mov	r0, r4
   1b13c:	str	ip, [sp, #48]	; 0x30
   1b140:	add	sp, sp, #32
   1b144:	ldrd	r4, [sp]
   1b148:	ldr	r6, [sp, #8]
   1b14c:	ldr	lr, [sp, #12]
   1b150:	add	sp, sp, #16
   1b154:	b	11704 <__fprintf_chk@plt>
   1b158:	mov	r2, #5
   1b15c:	movw	r1, #62304	; 0xf360
   1b160:	movt	r1, #1
   1b164:	mov	r0, #0
   1b168:	bl	114e8 <dcgettext@plt>
   1b16c:	ldm	r5, {r3, lr}
   1b170:	mov	r2, r0
   1b174:	mov	r1, #1
   1b178:	mov	r0, r4
   1b17c:	ldr	ip, [r5, #8]
   1b180:	str	lr, [sp, #48]	; 0x30
   1b184:	str	ip, [sp, #52]	; 0x34
   1b188:	add	sp, sp, #32
   1b18c:	ldrd	r4, [sp]
   1b190:	ldr	r6, [sp, #8]
   1b194:	ldr	lr, [sp, #12]
   1b198:	add	sp, sp, #16
   1b19c:	b	11704 <__fprintf_chk@plt>
   1b1a0:	mov	r2, #5
   1b1a4:	movw	r1, #62332	; 0xf37c
   1b1a8:	movt	r1, #1
   1b1ac:	mov	r0, #0
   1b1b0:	bl	114e8 <dcgettext@plt>
   1b1b4:	ldmib	r5, {r3, ip, lr}
   1b1b8:	mov	r2, r0
   1b1bc:	mov	r1, #1
   1b1c0:	mov	r0, r4
   1b1c4:	str	r3, [sp]
   1b1c8:	ldr	r3, [r5]
   1b1cc:	stmib	sp, {ip, lr}
   1b1d0:	bl	11704 <__fprintf_chk@plt>
   1b1d4:	b	1b0ac <__assert_fail@plt+0x9858>
   1b1d8:	mov	r2, #5
   1b1dc:	movw	r1, #62364	; 0xf39c
   1b1e0:	movt	r1, #1
   1b1e4:	mov	r0, #0
   1b1e8:	bl	114e8 <dcgettext@plt>
   1b1ec:	ldmib	r5, {ip, lr}
   1b1f0:	mov	r2, r0
   1b1f4:	mov	r1, #1
   1b1f8:	mov	r0, r4
   1b1fc:	ldr	r3, [r5, #16]
   1b200:	str	ip, [sp]
   1b204:	ldr	ip, [r5, #12]
   1b208:	str	r3, [sp, #12]
   1b20c:	ldr	r3, [r5]
   1b210:	str	lr, [sp, #4]
   1b214:	str	ip, [sp, #8]
   1b218:	bl	11704 <__fprintf_chk@plt>
   1b21c:	b	1b0ac <__assert_fail@plt+0x9858>
   1b220:	mov	r2, #5
   1b224:	movw	r1, #62400	; 0xf3c0
   1b228:	movt	r1, #1
   1b22c:	mov	r0, #0
   1b230:	bl	114e8 <dcgettext@plt>
   1b234:	ldr	lr, [r5, #4]
   1b238:	mov	r2, r0
   1b23c:	mov	r1, #1
   1b240:	mov	r0, r4
   1b244:	ldr	r3, [r5, #8]
   1b248:	ldr	ip, [r5, #20]
   1b24c:	str	lr, [sp]
   1b250:	ldr	lr, [r5, #12]
   1b254:	str	ip, [sp, #16]
   1b258:	ldr	ip, [r5, #16]
   1b25c:	str	r3, [sp, #4]
   1b260:	ldr	r3, [r5]
   1b264:	str	lr, [sp, #8]
   1b268:	str	ip, [sp, #12]
   1b26c:	bl	11704 <__fprintf_chk@plt>
   1b270:	b	1b0ac <__assert_fail@plt+0x9858>
   1b274:	mov	r2, #5
   1b278:	movw	r1, #62440	; 0xf3e8
   1b27c:	movt	r1, #1
   1b280:	mov	r0, #0
   1b284:	bl	114e8 <dcgettext@plt>
   1b288:	ldmib	r5, {r3, ip}
   1b28c:	mov	r2, r0
   1b290:	mov	r1, #1
   1b294:	mov	r0, r4
   1b298:	ldr	lr, [r5, #24]
   1b29c:	str	r3, [sp]
   1b2a0:	ldr	r3, [r5, #12]
   1b2a4:	str	lr, [sp, #20]
   1b2a8:	ldr	lr, [r5, #20]
   1b2ac:	str	ip, [sp, #4]
   1b2b0:	ldr	ip, [r5, #16]
   1b2b4:	str	r3, [sp, #8]
   1b2b8:	ldr	r3, [r5]
   1b2bc:	str	ip, [sp, #12]
   1b2c0:	str	lr, [sp, #16]
   1b2c4:	bl	11704 <__fprintf_chk@plt>
   1b2c8:	b	1b0ac <__assert_fail@plt+0x9858>
   1b2cc:	mov	r2, #5
   1b2d0:	movw	r1, #62484	; 0xf414
   1b2d4:	movt	r1, #1
   1b2d8:	mov	r0, #0
   1b2dc:	bl	114e8 <dcgettext@plt>
   1b2e0:	ldmib	r5, {ip, lr}
   1b2e4:	mov	r2, r0
   1b2e8:	mov	r1, #1
   1b2ec:	mov	r0, r4
   1b2f0:	ldr	r3, [r5, #28]
   1b2f4:	str	ip, [sp]
   1b2f8:	ldr	ip, [r5, #12]
   1b2fc:	str	r3, [sp, #24]
   1b300:	ldr	r3, [r5, #24]
   1b304:	str	lr, [sp, #4]
   1b308:	ldr	lr, [r5, #16]
   1b30c:	str	ip, [sp, #8]
   1b310:	ldr	ip, [r5, #20]
   1b314:	str	r3, [sp, #20]
   1b318:	ldr	r3, [r5]
   1b31c:	str	lr, [sp, #12]
   1b320:	str	ip, [sp, #16]
   1b324:	bl	11704 <__fprintf_chk@plt>
   1b328:	b	1b0ac <__assert_fail@plt+0x9858>
   1b32c:	movw	r1, #62584	; 0xf478
   1b330:	movt	r1, #1
   1b334:	b	1b04c <__assert_fail@plt+0x97f8>
   1b338:	strd	r4, [sp, #-12]!
   1b33c:	str	lr, [sp, #8]
   1b340:	sub	sp, sp, #12
   1b344:	ldr	r5, [sp, #24]
   1b348:	ldr	ip, [r5]
   1b34c:	cmp	ip, #0
   1b350:	beq	1b36c <__assert_fail@plt+0x9b18>
   1b354:	mov	lr, r5
   1b358:	mov	ip, #0
   1b35c:	ldr	r4, [lr, #4]!
   1b360:	add	ip, ip, #1
   1b364:	cmp	r4, #0
   1b368:	bne	1b35c <__assert_fail@plt+0x9b08>
   1b36c:	stm	sp, {r5, ip}
   1b370:	bl	1af58 <__assert_fail@plt+0x9704>
   1b374:	add	sp, sp, #12
   1b378:	ldrd	r4, [sp]
   1b37c:	add	sp, sp, #8
   1b380:	pop	{pc}		; (ldr pc, [sp], #4)
   1b384:	strd	r4, [sp, #-16]!
   1b388:	mov	ip, #0
   1b38c:	str	r6, [sp, #8]
   1b390:	str	lr, [sp, #12]
   1b394:	sub	sp, sp, #48	; 0x30
   1b398:	ldr	r5, [sp, #64]	; 0x40
   1b39c:	add	r6, sp, #8
   1b3a0:	mov	r4, r6
   1b3a4:	ldr	lr, [r5], #4
   1b3a8:	cmp	lr, #0
   1b3ac:	str	lr, [r4], #4
   1b3b0:	beq	1b3c0 <__assert_fail@plt+0x9b6c>
   1b3b4:	add	ip, ip, #1
   1b3b8:	cmp	ip, #10
   1b3bc:	bne	1b3a4 <__assert_fail@plt+0x9b50>
   1b3c0:	stm	sp, {r6, ip}
   1b3c4:	bl	1af58 <__assert_fail@plt+0x9704>
   1b3c8:	add	sp, sp, #48	; 0x30
   1b3cc:	ldrd	r4, [sp]
   1b3d0:	ldr	r6, [sp, #8]
   1b3d4:	add	sp, sp, #12
   1b3d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b3dc:	push	{r3}		; (str r3, [sp, #-4]!)
   1b3e0:	mov	ip, #0
   1b3e4:	strd	r4, [sp, #-12]!
   1b3e8:	str	lr, [sp, #8]
   1b3ec:	sub	sp, sp, #56	; 0x38
   1b3f0:	add	r3, sp, #72	; 0x48
   1b3f4:	add	r5, sp, #16
   1b3f8:	mov	r4, r3
   1b3fc:	mov	lr, r5
   1b400:	str	r3, [sp, #12]
   1b404:	ldr	r3, [r4], #4
   1b408:	cmp	r3, #0
   1b40c:	str	r3, [lr], #4
   1b410:	beq	1b420 <__assert_fail@plt+0x9bcc>
   1b414:	add	ip, ip, #1
   1b418:	cmp	ip, #10
   1b41c:	bne	1b404 <__assert_fail@plt+0x9bb0>
   1b420:	ldr	r3, [sp, #68]	; 0x44
   1b424:	stm	sp, {r5, ip}
   1b428:	bl	1af58 <__assert_fail@plt+0x9704>
   1b42c:	add	sp, sp, #56	; 0x38
   1b430:	ldrd	r4, [sp]
   1b434:	ldr	lr, [sp, #8]
   1b438:	add	sp, sp, #12
   1b43c:	add	sp, sp, #4
   1b440:	bx	lr
   1b444:	movw	r3, #492	; 0x1ec
   1b448:	movt	r3, #3
   1b44c:	str	r4, [sp, #-8]!
   1b450:	mov	r0, #10
   1b454:	ldr	r1, [r3]
   1b458:	str	lr, [sp, #4]
   1b45c:	bl	114dc <fputc_unlocked@plt>
   1b460:	mov	r2, #5
   1b464:	movw	r1, #62644	; 0xf4b4
   1b468:	movt	r1, #1
   1b46c:	mov	r0, #0
   1b470:	bl	114e8 <dcgettext@plt>
   1b474:	mov	r1, r0
   1b478:	movw	r2, #62664	; 0xf4c8
   1b47c:	movt	r2, #1
   1b480:	mov	r0, #1
   1b484:	bl	116ec <__printf_chk@plt>
   1b488:	mov	r2, #5
   1b48c:	movw	r1, #62688	; 0xf4e0
   1b490:	movt	r1, #1
   1b494:	mov	r0, #0
   1b498:	bl	114e8 <dcgettext@plt>
   1b49c:	mov	r1, r0
   1b4a0:	movw	r3, #60416	; 0xec00
   1b4a4:	movt	r3, #1
   1b4a8:	movw	r2, #60456	; 0xec28
   1b4ac:	movt	r2, #1
   1b4b0:	mov	r0, #1
   1b4b4:	bl	116ec <__printf_chk@plt>
   1b4b8:	mov	r2, #5
   1b4bc:	movw	r1, #62708	; 0xf4f4
   1b4c0:	movt	r1, #1
   1b4c4:	mov	r0, #0
   1b4c8:	bl	114e8 <dcgettext@plt>
   1b4cc:	mov	r1, r0
   1b4d0:	movw	r2, #62748	; 0xf51c
   1b4d4:	movt	r2, #1
   1b4d8:	mov	r0, #1
   1b4dc:	ldr	r4, [sp]
   1b4e0:	ldr	lr, [sp, #4]
   1b4e4:	add	sp, sp, #8
   1b4e8:	b	116ec <__printf_chk@plt>
   1b4ec:	str	r4, [sp, #-8]!
   1b4f0:	str	lr, [sp, #4]
   1b4f4:	bl	1ba8c <__assert_fail@plt+0xa238>
   1b4f8:	cmp	r0, #0
   1b4fc:	beq	1b50c <__assert_fail@plt+0x9cb8>
   1b500:	ldr	r4, [sp]
   1b504:	add	sp, sp, #4
   1b508:	pop	{pc}		; (ldr pc, [sp], #4)
   1b50c:	bl	1b964 <__assert_fail@plt+0xa110>
   1b510:	str	r4, [sp, #-8]!
   1b514:	str	lr, [sp, #4]
   1b518:	bl	1ba8c <__assert_fail@plt+0xa238>
   1b51c:	cmp	r0, #0
   1b520:	beq	1b530 <__assert_fail@plt+0x9cdc>
   1b524:	ldr	r4, [sp]
   1b528:	add	sp, sp, #4
   1b52c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b530:	bl	1b964 <__assert_fail@plt+0xa110>
   1b534:	str	r4, [sp, #-8]!
   1b538:	str	lr, [sp, #4]
   1b53c:	bl	1ba8c <__assert_fail@plt+0xa238>
   1b540:	cmp	r0, #0
   1b544:	beq	1b554 <__assert_fail@plt+0x9d00>
   1b548:	ldr	r4, [sp]
   1b54c:	add	sp, sp, #4
   1b550:	pop	{pc}		; (ldr pc, [sp], #4)
   1b554:	bl	1b964 <__assert_fail@plt+0xa110>
   1b558:	strd	r4, [sp, #-16]!
   1b55c:	mov	r5, r0
   1b560:	mov	r4, r1
   1b564:	str	r6, [sp, #8]
   1b568:	str	lr, [sp, #12]
   1b56c:	bl	1bac8 <__assert_fail@plt+0xa274>
   1b570:	cmp	r0, #0
   1b574:	beq	1b588 <__assert_fail@plt+0x9d34>
   1b578:	ldrd	r4, [sp]
   1b57c:	ldr	r6, [sp, #8]
   1b580:	add	sp, sp, #12
   1b584:	pop	{pc}		; (ldr pc, [sp], #4)
   1b588:	adds	r4, r4, #0
   1b58c:	movne	r4, #1
   1b590:	cmp	r5, #0
   1b594:	moveq	r4, #1
   1b598:	cmp	r4, #0
   1b59c:	beq	1b578 <__assert_fail@plt+0x9d24>
   1b5a0:	bl	1b964 <__assert_fail@plt+0xa110>
   1b5a4:	cmp	r1, #0
   1b5a8:	orreq	r1, r1, #1
   1b5ac:	str	r4, [sp, #-8]!
   1b5b0:	str	lr, [sp, #4]
   1b5b4:	bl	1bac8 <__assert_fail@plt+0xa274>
   1b5b8:	cmp	r0, #0
   1b5bc:	beq	1b5cc <__assert_fail@plt+0x9d78>
   1b5c0:	ldr	r4, [sp]
   1b5c4:	add	sp, sp, #4
   1b5c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5cc:	bl	1b964 <__assert_fail@plt+0xa110>
   1b5d0:	strd	r4, [sp, #-16]!
   1b5d4:	mov	r4, r0
   1b5d8:	mov	r5, r2
   1b5dc:	str	r6, [sp, #8]
   1b5e0:	mov	r6, r1
   1b5e4:	str	lr, [sp, #12]
   1b5e8:	bl	1cbdc <__assert_fail@plt+0xb388>
   1b5ec:	cmp	r0, #0
   1b5f0:	beq	1b604 <__assert_fail@plt+0x9db0>
   1b5f4:	ldrd	r4, [sp]
   1b5f8:	ldr	r6, [sp, #8]
   1b5fc:	add	sp, sp, #12
   1b600:	pop	{pc}		; (ldr pc, [sp], #4)
   1b604:	cmp	r4, #0
   1b608:	beq	1b618 <__assert_fail@plt+0x9dc4>
   1b60c:	cmp	r6, #0
   1b610:	cmpne	r5, #0
   1b614:	beq	1b5f4 <__assert_fail@plt+0x9da0>
   1b618:	bl	1b964 <__assert_fail@plt+0xa110>
   1b61c:	b	1b5d0 <__assert_fail@plt+0x9d7c>
   1b620:	cmp	r2, #0
   1b624:	cmpne	r1, #0
   1b628:	str	r4, [sp, #-8]!
   1b62c:	moveq	r2, #1
   1b630:	str	lr, [sp, #4]
   1b634:	moveq	r1, r2
   1b638:	bl	1cbdc <__assert_fail@plt+0xb388>
   1b63c:	cmp	r0, #0
   1b640:	beq	1b650 <__assert_fail@plt+0x9dfc>
   1b644:	ldr	r4, [sp]
   1b648:	add	sp, sp, #4
   1b64c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b650:	bl	1b964 <__assert_fail@plt+0xa110>
   1b654:	mov	r2, r1
   1b658:	mov	r1, r0
   1b65c:	mov	r0, #0
   1b660:	b	1b5d0 <__assert_fail@plt+0x9d7c>
   1b664:	mov	r2, r1
   1b668:	mov	r1, r0
   1b66c:	mov	r0, #0
   1b670:	b	1b620 <__assert_fail@plt+0x9dcc>
   1b674:	cmp	r0, #0
   1b678:	strd	r4, [sp, #-16]!
   1b67c:	mov	r5, r1
   1b680:	ldr	r4, [r1]
   1b684:	str	r6, [sp, #8]
   1b688:	str	lr, [sp, #12]
   1b68c:	beq	1b6bc <__assert_fail@plt+0x9e68>
   1b690:	lsr	r3, r4, #1
   1b694:	add	r3, r3, #1
   1b698:	adds	r4, r4, r3
   1b69c:	bcs	1b6d8 <__assert_fail@plt+0x9e84>
   1b6a0:	mov	r1, r4
   1b6a4:	bl	1b5d0 <__assert_fail@plt+0x9d7c>
   1b6a8:	ldr	r6, [sp, #8]
   1b6ac:	str	r4, [r5]
   1b6b0:	ldrd	r4, [sp]
   1b6b4:	add	sp, sp, #12
   1b6b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b6bc:	cmp	r4, #0
   1b6c0:	bne	1b6a0 <__assert_fail@plt+0x9e4c>
   1b6c4:	mov	r4, #64	; 0x40
   1b6c8:	udiv	r4, r4, r2
   1b6cc:	cmp	r2, #64	; 0x40
   1b6d0:	addhi	r4, r4, #1
   1b6d4:	b	1b6a0 <__assert_fail@plt+0x9e4c>
   1b6d8:	bl	1b964 <__assert_fail@plt+0xa110>
   1b6dc:	mov	r2, #1
   1b6e0:	b	1b674 <__assert_fail@plt+0x9e20>
   1b6e4:	ldr	ip, [r1]
   1b6e8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1b6ec:	mov	r5, r1
   1b6f0:	strd	r6, [sp, #8]
   1b6f4:	str	lr, [sp, #28]
   1b6f8:	strd	r8, [sp, #16]
   1b6fc:	asr	lr, ip, #1
   1b700:	ldr	r8, [sp, #32]
   1b704:	str	sl, [sp, #24]
   1b708:	adds	r4, ip, lr
   1b70c:	mvn	lr, r3
   1b710:	lsr	lr, lr, #31
   1b714:	mvnvs	r4, #-2147483648	; 0x80000000
   1b718:	cmp	r3, r4
   1b71c:	movge	r1, #0
   1b720:	andlt	r1, lr, #1
   1b724:	cmp	r1, #0
   1b728:	movne	r4, r3
   1b72c:	smull	r6, r7, r4, r8
   1b730:	cmp	r7, r6, asr #31
   1b734:	bne	1b7bc <__assert_fail@plt+0x9f68>
   1b738:	cmp	r6, #63	; 0x3f
   1b73c:	mov	r1, r6
   1b740:	ble	1b7a4 <__assert_fail@plt+0x9f50>
   1b744:	cmp	r0, #0
   1b748:	sub	r6, r4, ip
   1b74c:	streq	r0, [r5]
   1b750:	cmp	r6, r2
   1b754:	bge	1b784 <__assert_fail@plt+0x9f30>
   1b758:	adds	r4, ip, r2
   1b75c:	bvs	1b7b8 <__assert_fail@plt+0x9f64>
   1b760:	cmp	r4, r3
   1b764:	movle	r3, #0
   1b768:	andgt	r3, lr, #1
   1b76c:	cmp	r3, #0
   1b770:	bne	1b7b8 <__assert_fail@plt+0x9f64>
   1b774:	smull	r8, r9, r4, r8
   1b778:	cmp	r9, r8, asr #31
   1b77c:	mov	r1, r8
   1b780:	bne	1b7b8 <__assert_fail@plt+0x9f64>
   1b784:	bl	1b558 <__assert_fail@plt+0x9d04>
   1b788:	ldrd	r6, [sp, #8]
   1b78c:	ldrd	r8, [sp, #16]
   1b790:	ldr	sl, [sp, #24]
   1b794:	str	r4, [r5]
   1b798:	ldrd	r4, [sp]
   1b79c:	add	sp, sp, #28
   1b7a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b7a4:	mov	r6, #64	; 0x40
   1b7a8:	sdiv	r4, r6, r8
   1b7ac:	mls	r1, r8, r4, r6
   1b7b0:	sub	r1, r6, r1
   1b7b4:	b	1b744 <__assert_fail@plt+0x9ef0>
   1b7b8:	bl	1b964 <__assert_fail@plt+0xa110>
   1b7bc:	mvn	r6, #-2147483648	; 0x80000000
   1b7c0:	b	1b7a8 <__assert_fail@plt+0x9f54>
   1b7c4:	mov	r1, #1
   1b7c8:	str	r4, [sp, #-8]!
   1b7cc:	str	lr, [sp, #4]
   1b7d0:	bl	1ba18 <__assert_fail@plt+0xa1c4>
   1b7d4:	cmp	r0, #0
   1b7d8:	beq	1b7e8 <__assert_fail@plt+0x9f94>
   1b7dc:	ldr	r4, [sp]
   1b7e0:	add	sp, sp, #4
   1b7e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b7e8:	bl	1b964 <__assert_fail@plt+0xa110>
   1b7ec:	mov	r1, #1
   1b7f0:	str	r4, [sp, #-8]!
   1b7f4:	str	lr, [sp, #4]
   1b7f8:	bl	1ba18 <__assert_fail@plt+0xa1c4>
   1b7fc:	cmp	r0, #0
   1b800:	beq	1b810 <__assert_fail@plt+0x9fbc>
   1b804:	ldr	r4, [sp]
   1b808:	add	sp, sp, #4
   1b80c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b810:	bl	1b964 <__assert_fail@plt+0xa110>
   1b814:	str	r4, [sp, #-8]!
   1b818:	str	lr, [sp, #4]
   1b81c:	bl	1ba18 <__assert_fail@plt+0xa1c4>
   1b820:	cmp	r0, #0
   1b824:	beq	1b834 <__assert_fail@plt+0x9fe0>
   1b828:	ldr	r4, [sp]
   1b82c:	add	sp, sp, #4
   1b830:	pop	{pc}		; (ldr pc, [sp], #4)
   1b834:	bl	1b964 <__assert_fail@plt+0xa110>
   1b838:	str	r4, [sp, #-8]!
   1b83c:	str	lr, [sp, #4]
   1b840:	bl	1ba18 <__assert_fail@plt+0xa1c4>
   1b844:	cmp	r0, #0
   1b848:	beq	1b858 <__assert_fail@plt+0xa004>
   1b84c:	ldr	r4, [sp]
   1b850:	add	sp, sp, #4
   1b854:	pop	{pc}		; (ldr pc, [sp], #4)
   1b858:	bl	1b964 <__assert_fail@plt+0xa110>
   1b85c:	strd	r4, [sp, #-16]!
   1b860:	mov	r4, r1
   1b864:	str	r6, [sp, #8]
   1b868:	mov	r6, r0
   1b86c:	mov	r0, r1
   1b870:	str	lr, [sp, #12]
   1b874:	bl	1ba8c <__assert_fail@plt+0xa238>
   1b878:	subs	r5, r0, #0
   1b87c:	beq	1b8a0 <__assert_fail@plt+0xa04c>
   1b880:	mov	r2, r4
   1b884:	mov	r1, r6
   1b888:	bl	114b8 <memcpy@plt>
   1b88c:	mov	r0, r5
   1b890:	ldrd	r4, [sp]
   1b894:	ldr	r6, [sp, #8]
   1b898:	add	sp, sp, #12
   1b89c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b8a0:	bl	1b964 <__assert_fail@plt+0xa110>
   1b8a4:	strd	r4, [sp, #-16]!
   1b8a8:	mov	r4, r1
   1b8ac:	str	r6, [sp, #8]
   1b8b0:	mov	r6, r0
   1b8b4:	mov	r0, r1
   1b8b8:	str	lr, [sp, #12]
   1b8bc:	bl	1ba8c <__assert_fail@plt+0xa238>
   1b8c0:	subs	r5, r0, #0
   1b8c4:	beq	1b8e8 <__assert_fail@plt+0xa094>
   1b8c8:	mov	r2, r4
   1b8cc:	mov	r1, r6
   1b8d0:	bl	114b8 <memcpy@plt>
   1b8d4:	mov	r0, r5
   1b8d8:	ldrd	r4, [sp]
   1b8dc:	ldr	r6, [sp, #8]
   1b8e0:	add	sp, sp, #12
   1b8e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b8e8:	bl	1b964 <__assert_fail@plt+0xa110>
   1b8ec:	strd	r4, [sp, #-16]!
   1b8f0:	mov	r4, r1
   1b8f4:	str	r6, [sp, #8]
   1b8f8:	mov	r6, r0
   1b8fc:	add	r0, r1, #1
   1b900:	str	lr, [sp, #12]
   1b904:	bl	1ba8c <__assert_fail@plt+0xa238>
   1b908:	subs	r5, r0, #0
   1b90c:	beq	1b938 <__assert_fail@plt+0xa0e4>
   1b910:	mov	r3, #0
   1b914:	mov	r1, r6
   1b918:	mov	r2, r4
   1b91c:	strb	r3, [r5, r4]
   1b920:	bl	114b8 <memcpy@plt>
   1b924:	mov	r0, r5
   1b928:	ldrd	r4, [sp]
   1b92c:	ldr	r6, [sp, #8]
   1b930:	add	sp, sp, #12
   1b934:	pop	{pc}		; (ldr pc, [sp], #4)
   1b938:	bl	1b964 <__assert_fail@plt+0xa110>
   1b93c:	str	r4, [sp, #-8]!
   1b940:	mov	r4, r0
   1b944:	str	lr, [sp, #4]
   1b948:	bl	11674 <strlen@plt>
   1b94c:	add	r1, r0, #1
   1b950:	mov	r0, r4
   1b954:	ldr	r4, [sp]
   1b958:	ldr	lr, [sp, #4]
   1b95c:	add	sp, sp, #8
   1b960:	b	1b85c <__assert_fail@plt+0xa008>
   1b964:	movw	r3, #400	; 0x190
   1b968:	movt	r3, #3
   1b96c:	str	r4, [sp, #-8]!
   1b970:	ldr	r4, [r3]
   1b974:	mov	r2, #5
   1b978:	movw	r1, #62828	; 0xf56c
   1b97c:	movt	r1, #1
   1b980:	mov	r0, #0
   1b984:	str	lr, [sp, #4]
   1b988:	bl	114e8 <dcgettext@plt>
   1b98c:	mov	r3, r0
   1b990:	movw	r2, #60128	; 0xeae0
   1b994:	movt	r2, #1
   1b998:	mov	r1, #0
   1b99c:	mov	r0, r4
   1b9a0:	bl	115a8 <error@plt>
   1b9a4:	bl	11824 <abort@plt>
   1b9a8:	mov	r1, #0
   1b9ac:	str	r4, [sp, #-8]!
   1b9b0:	mov	r0, r1
   1b9b4:	str	lr, [sp, #4]
   1b9b8:	bl	11650 <getcwd@plt>
   1b9bc:	subs	r4, r0, #0
   1b9c0:	beq	1b9d4 <__assert_fail@plt+0xa180>
   1b9c4:	mov	r0, r4
   1b9c8:	ldr	r4, [sp]
   1b9cc:	add	sp, sp, #4
   1b9d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9d4:	bl	116b0 <__errno_location@plt>
   1b9d8:	ldr	r3, [r0]
   1b9dc:	cmp	r3, #12
   1b9e0:	bne	1b9c4 <__assert_fail@plt+0xa170>
   1b9e4:	bl	1b964 <__assert_fail@plt+0xa110>
   1b9e8:	push	{r0, r1, r2, r3}
   1b9ec:	push	{lr}		; (str lr, [sp, #-4]!)
   1b9f0:	sub	sp, sp, #12
   1b9f4:	add	r3, sp, #20
   1b9f8:	ldr	r0, [sp, #16]
   1b9fc:	mov	r1, r3
   1ba00:	str	r3, [sp, #4]
   1ba04:	bl	1cd4c <__assert_fail@plt+0xb4f8>
   1ba08:	add	sp, sp, #12
   1ba0c:	pop	{lr}		; (ldr lr, [sp], #4)
   1ba10:	add	sp, sp, #16
   1ba14:	bx	lr
   1ba18:	cmp	r1, #0
   1ba1c:	cmpne	r0, #0
   1ba20:	beq	1ba6c <__assert_fail@plt+0xa218>
   1ba24:	strd	r4, [sp, #-16]!
   1ba28:	umull	r4, r5, r0, r1
   1ba2c:	str	r6, [sp, #8]
   1ba30:	str	lr, [sp, #12]
   1ba34:	adds	r3, r5, #0
   1ba38:	movne	r3, #1
   1ba3c:	cmp	r4, #0
   1ba40:	blt	1ba4c <__assert_fail@plt+0xa1f8>
   1ba44:	cmp	r3, #0
   1ba48:	beq	1ba78 <__assert_fail@plt+0xa224>
   1ba4c:	bl	116b0 <__errno_location@plt>
   1ba50:	mov	r3, #12
   1ba54:	ldrd	r4, [sp]
   1ba58:	ldr	r6, [sp, #8]
   1ba5c:	add	sp, sp, #12
   1ba60:	str	r3, [r0]
   1ba64:	mov	r0, #0
   1ba68:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba6c:	mov	r1, #1
   1ba70:	mov	r0, r1
   1ba74:	b	1141c <calloc@plt>
   1ba78:	ldrd	r4, [sp]
   1ba7c:	ldr	r6, [sp, #8]
   1ba80:	ldr	lr, [sp, #12]
   1ba84:	add	sp, sp, #16
   1ba88:	b	1141c <calloc@plt>
   1ba8c:	cmp	r0, #0
   1ba90:	beq	1ba9c <__assert_fail@plt+0xa248>
   1ba94:	blt	1baa4 <__assert_fail@plt+0xa250>
   1ba98:	b	115e4 <malloc@plt>
   1ba9c:	mov	r0, #1
   1baa0:	b	115e4 <malloc@plt>
   1baa4:	str	r4, [sp, #-8]!
   1baa8:	str	lr, [sp, #4]
   1baac:	bl	116b0 <__errno_location@plt>
   1bab0:	mov	r3, #12
   1bab4:	ldr	r4, [sp]
   1bab8:	add	sp, sp, #4
   1babc:	str	r3, [r0]
   1bac0:	mov	r0, #0
   1bac4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bac8:	cmp	r0, #0
   1bacc:	beq	1baf4 <__assert_fail@plt+0xa2a0>
   1bad0:	cmp	r1, #0
   1bad4:	str	r4, [sp, #-8]!
   1bad8:	str	lr, [sp, #4]
   1badc:	beq	1bafc <__assert_fail@plt+0xa2a8>
   1bae0:	blt	1bb10 <__assert_fail@plt+0xa2bc>
   1bae4:	ldr	r4, [sp]
   1bae8:	ldr	lr, [sp, #4]
   1baec:	add	sp, sp, #8
   1baf0:	b	114f4 <realloc@plt>
   1baf4:	mov	r0, r1
   1baf8:	b	1ba8c <__assert_fail@plt+0xa238>
   1bafc:	bl	15b00 <__assert_fail@plt+0x42ac>
   1bb00:	ldr	r4, [sp]
   1bb04:	add	sp, sp, #4
   1bb08:	mov	r0, #0
   1bb0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb10:	bl	116b0 <__errno_location@plt>
   1bb14:	mov	r3, #12
   1bb18:	str	r3, [r0]
   1bb1c:	b	1bb00 <__assert_fail@plt+0xa2ac>
   1bb20:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1bb24:	mvn	r4, #0
   1bb28:	strd	r6, [sp, #8]
   1bb2c:	mov	r6, #1
   1bb30:	mov	ip, r6
   1bb34:	str	r8, [sp, #16]
   1bb38:	str	lr, [sp, #20]
   1bb3c:	mov	lr, #0
   1bb40:	add	r3, ip, lr
   1bb44:	add	r5, r0, r4
   1bb48:	cmp	r3, r1
   1bb4c:	bcs	1bb7c <__assert_fail@plt+0xa328>
   1bb50:	ldrb	r5, [r5, ip]
   1bb54:	ldrb	r7, [r0, r3]
   1bb58:	cmp	r7, r5
   1bb5c:	bcs	1bbf4 <__assert_fail@plt+0xa3a0>
   1bb60:	mov	lr, r3
   1bb64:	mov	ip, #1
   1bb68:	sub	r6, r3, r4
   1bb6c:	add	r3, ip, lr
   1bb70:	cmp	r3, r1
   1bb74:	add	r5, r0, r4
   1bb78:	bcc	1bb50 <__assert_fail@plt+0xa2fc>
   1bb7c:	mov	r8, #1
   1bb80:	mov	lr, #0
   1bb84:	str	r6, [r2]
   1bb88:	mov	ip, r8
   1bb8c:	mvn	r5, #0
   1bb90:	add	r3, ip, lr
   1bb94:	add	r6, r0, r5
   1bb98:	cmp	r1, r3
   1bb9c:	bls	1bbcc <__assert_fail@plt+0xa378>
   1bba0:	ldrb	r6, [r6, ip]
   1bba4:	ldrb	r7, [r0, r3]
   1bba8:	cmp	r7, r6
   1bbac:	bls	1bc0c <__assert_fail@plt+0xa3b8>
   1bbb0:	mov	lr, r3
   1bbb4:	mov	ip, #1
   1bbb8:	sub	r8, r3, r5
   1bbbc:	add	r3, ip, lr
   1bbc0:	cmp	r1, r3
   1bbc4:	add	r6, r0, r5
   1bbc8:	bhi	1bba0 <__assert_fail@plt+0xa34c>
   1bbcc:	add	r0, r4, #1
   1bbd0:	add	r5, r5, #1
   1bbd4:	ldrd	r6, [sp, #8]
   1bbd8:	cmp	r5, r0
   1bbdc:	movcs	r0, r5
   1bbe0:	ldrd	r4, [sp]
   1bbe4:	strcs	r8, [r2]
   1bbe8:	ldr	r8, [sp, #16]
   1bbec:	add	sp, sp, #20
   1bbf0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbf4:	beq	1bc24 <__assert_fail@plt+0xa3d0>
   1bbf8:	mov	r6, #1
   1bbfc:	mov	r4, lr
   1bc00:	mov	ip, r6
   1bc04:	add	lr, lr, r6
   1bc08:	b	1bb40 <__assert_fail@plt+0xa2ec>
   1bc0c:	beq	1bc38 <__assert_fail@plt+0xa3e4>
   1bc10:	mov	r8, #1
   1bc14:	mov	r5, lr
   1bc18:	mov	ip, r8
   1bc1c:	add	lr, lr, r8
   1bc20:	b	1bb90 <__assert_fail@plt+0xa33c>
   1bc24:	cmp	ip, r6
   1bc28:	add	ip, ip, #1
   1bc2c:	moveq	lr, r3
   1bc30:	moveq	ip, #1
   1bc34:	b	1bb40 <__assert_fail@plt+0xa2ec>
   1bc38:	cmp	ip, r8
   1bc3c:	add	ip, ip, #1
   1bc40:	moveq	lr, r3
   1bc44:	moveq	ip, #1
   1bc48:	b	1bb90 <__assert_fail@plt+0xa33c>
   1bc4c:	cmp	r3, #2
   1bc50:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bc54:	mov	r4, r3
   1bc58:	strd	r6, [sp, #8]
   1bc5c:	mov	r5, r0
   1bc60:	strd	r8, [sp, #16]
   1bc64:	strd	sl, [sp, #24]
   1bc68:	mov	fp, r1
   1bc6c:	mov	sl, r2
   1bc70:	str	lr, [sp, #32]
   1bc74:	sub	sp, sp, #1056	; 0x420
   1bc78:	sub	sp, sp, #12
   1bc7c:	bls	1c05c <__assert_fail@plt+0xa808>
   1bc80:	add	r6, sp, #40	; 0x28
   1bc84:	mov	r1, r3
   1bc88:	sub	r2, r6, #4
   1bc8c:	mov	r0, sl
   1bc90:	bl	1bb20 <__assert_fail@plt+0xa2cc>
   1bc94:	ldr	r3, [sp, #36]	; 0x24
   1bc98:	str	r3, [sp]
   1bc9c:	str	r0, [sp, #4]
   1bca0:	add	r2, sp, #1056	; 0x420
   1bca4:	sub	r3, r6, #4
   1bca8:	add	r2, r2, #4
   1bcac:	str	r4, [r3, #4]!
   1bcb0:	cmp	r2, r3
   1bcb4:	bne	1bcac <__assert_fail@plt+0xa458>
   1bcb8:	ldr	r3, [sp]
   1bcbc:	cmp	r4, #0
   1bcc0:	add	r1, sl, r3
   1bcc4:	beq	1be7c <__assert_fail@plt+0xa628>
   1bcc8:	sub	r3, r4, #1
   1bccc:	sub	r2, sl, #1
   1bcd0:	add	ip, sl, r3
   1bcd4:	str	r3, [sp, #8]
   1bcd8:	ldrb	r0, [r2, #1]!
   1bcdc:	add	lr, sp, #1056	; 0x420
   1bce0:	add	lr, lr, #8
   1bce4:	mvn	r3, r2
   1bce8:	add	r0, lr, r0, lsl #2
   1bcec:	cmp	r2, ip
   1bcf0:	add	r3, r3, r4
   1bcf4:	add	r3, sl, r3
   1bcf8:	str	r3, [r0, #-1024]	; 0xfffffc00
   1bcfc:	bne	1bcd8 <__assert_fail@plt+0xa484>
   1bd00:	mov	r0, sl
   1bd04:	ldr	r2, [sp, #4]
   1bd08:	bl	114d0 <memcmp@plt>
   1bd0c:	cmp	r0, #0
   1bd10:	beq	1bec0 <__assert_fail@plt+0xa66c>
   1bd14:	ldr	r2, [sp, #4]
   1bd18:	sub	r8, r4, #2
   1bd1c:	mov	r7, #0
   1bd20:	add	r8, r8, sl
   1bd24:	rsb	r9, sl, #1
   1bd28:	sub	r3, r4, r2
   1bd2c:	sub	r1, r2, #1
   1bd30:	cmp	r3, r2
   1bd34:	movcc	r3, r2
   1bd38:	str	r1, [sp, #16]
   1bd3c:	add	r1, sl, r1
   1bd40:	add	r3, r3, #1
   1bd44:	str	r1, [sp, #12]
   1bd48:	str	r3, [sp, #20]
   1bd4c:	sub	r3, r4, #1
   1bd50:	str	r3, [sp, #4]
   1bd54:	mov	r3, r2
   1bd58:	add	r2, sl, r2
   1bd5c:	str	r2, [sp]
   1bd60:	rsb	r2, r3, #1
   1bd64:	str	r2, [sp, #8]
   1bd68:	mov	r2, fp
   1bd6c:	mov	fp, r3
   1bd70:	b	1bd78 <__assert_fail@plt+0xa524>
   1bd74:	mov	r2, r6
   1bd78:	add	r6, r7, r4
   1bd7c:	add	r0, r5, r2
   1bd80:	mov	r1, #0
   1bd84:	sub	r2, r6, r2
   1bd88:	bl	11710 <memchr@plt>
   1bd8c:	adds	r2, r6, #0
   1bd90:	movne	r2, #1
   1bd94:	cmp	r0, #0
   1bd98:	moveq	r0, r2
   1bd9c:	movne	r0, #0
   1bda0:	cmp	r0, #0
   1bda4:	beq	1be90 <__assert_fail@plt+0xa63c>
   1bda8:	add	r2, r5, r6
   1bdac:	add	r3, sp, #1056	; 0x420
   1bdb0:	ldrb	r2, [r2, #-1]
   1bdb4:	add	r3, r3, #8
   1bdb8:	add	r2, r3, r2, lsl #2
   1bdbc:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   1bdc0:	cmp	r2, #0
   1bdc4:	addne	r7, r7, r2
   1bdc8:	bne	1bd74 <__assert_fail@plt+0xa520>
   1bdcc:	ldr	r3, [sp, #4]
   1bdd0:	cmp	fp, r3
   1bdd4:	bcs	1be1c <__assert_fail@plt+0xa5c8>
   1bdd8:	ldr	r3, [sp]
   1bddc:	add	r2, r7, fp
   1bde0:	add	r1, r5, r2
   1bde4:	ldrb	r2, [r5, r2]
   1bde8:	ldrb	r0, [r3]
   1bdec:	cmp	r2, r0
   1bdf0:	movne	lr, fp
   1bdf4:	bne	1be6c <__assert_fail@plt+0xa618>
   1bdf8:	ldr	r2, [sp]
   1bdfc:	b	1be10 <__assert_fail@plt+0xa5bc>
   1be00:	ldrb	r0, [r2, #1]!
   1be04:	ldrb	r3, [r1, #1]!
   1be08:	cmp	r0, r3
   1be0c:	bne	1be6c <__assert_fail@plt+0xa618>
   1be10:	cmp	r8, r2
   1be14:	add	lr, r9, r2
   1be18:	bne	1be00 <__assert_fail@plt+0xa5ac>
   1be1c:	ldr	r3, [sp, #16]
   1be20:	cmn	r3, #1
   1be24:	beq	1be64 <__assert_fail@plt+0xa610>
   1be28:	add	r2, r7, r3
   1be2c:	ldr	r3, [sp, #12]
   1be30:	add	r1, r5, r2
   1be34:	ldrb	r2, [r5, r2]
   1be38:	ldrb	r0, [r3]
   1be3c:	cmp	r2, r0
   1be40:	ldreq	r2, [sp, #12]
   1be44:	beq	1be5c <__assert_fail@plt+0xa608>
   1be48:	b	1beb4 <__assert_fail@plt+0xa660>
   1be4c:	ldrb	r0, [r2, #-1]!
   1be50:	ldrb	r3, [r1, #-1]!
   1be54:	cmp	r0, r3
   1be58:	bne	1beb4 <__assert_fail@plt+0xa660>
   1be5c:	cmp	sl, r2
   1be60:	bne	1be4c <__assert_fail@plt+0xa5f8>
   1be64:	add	r0, r5, r7
   1be68:	b	1be94 <__assert_fail@plt+0xa640>
   1be6c:	ldr	r3, [sp, #8]
   1be70:	add	r7, r3, r7
   1be74:	add	r7, lr, r7
   1be78:	b	1bd74 <__assert_fail@plt+0xa520>
   1be7c:	mov	r0, sl
   1be80:	ldr	r2, [sp, #4]
   1be84:	bl	114d0 <memcmp@plt>
   1be88:	cmp	r0, #0
   1be8c:	bne	1bd14 <__assert_fail@plt+0xa4c0>
   1be90:	mov	r0, #0
   1be94:	add	sp, sp, #1056	; 0x420
   1be98:	add	sp, sp, #12
   1be9c:	ldrd	r4, [sp]
   1bea0:	ldrd	r6, [sp, #8]
   1bea4:	ldrd	r8, [sp, #16]
   1bea8:	ldrd	sl, [sp, #24]
   1beac:	add	sp, sp, #32
   1beb0:	pop	{pc}		; (ldr pc, [sp], #4)
   1beb4:	ldr	r3, [sp, #20]
   1beb8:	add	r7, r7, r3
   1bebc:	b	1bd74 <__assert_fail@plt+0xa520>
   1bec0:	ldr	r2, [sp, #4]
   1bec4:	sub	r8, r4, #2
   1bec8:	rsb	r9, sl, #1
   1becc:	add	r8, sl, r8
   1bed0:	mov	r7, r0
   1bed4:	str	sl, [sp, #12]
   1bed8:	sub	r3, r2, #1
   1bedc:	str	r3, [sp, #28]
   1bee0:	add	r3, sl, r3
   1bee4:	mov	sl, r0
   1bee8:	str	r3, [sp, #24]
   1beec:	ldr	r3, [sp]
   1bef0:	sub	r3, r4, r3
   1bef4:	str	r3, [sp, #20]
   1bef8:	rsb	r3, r2, #1
   1befc:	mov	r2, fp
   1bf00:	str	r3, [sp, #16]
   1bf04:	b	1bf24 <__assert_fail@plt+0xa6d0>
   1bf08:	ldr	r2, [sp]
   1bf0c:	cmp	sl, #0
   1bf10:	cmpne	r3, r2
   1bf14:	mov	sl, #0
   1bf18:	ldrcc	r3, [sp, #20]
   1bf1c:	add	r7, r7, r3
   1bf20:	mov	r2, r6
   1bf24:	add	r6, r7, r4
   1bf28:	add	r0, r5, r2
   1bf2c:	mov	r1, #0
   1bf30:	sub	r2, r6, r2
   1bf34:	bl	11710 <memchr@plt>
   1bf38:	adds	r3, r6, #0
   1bf3c:	movne	r3, #1
   1bf40:	cmp	r0, #0
   1bf44:	moveq	r0, r3
   1bf48:	movne	r0, #0
   1bf4c:	cmp	r0, #0
   1bf50:	beq	1be90 <__assert_fail@plt+0xa63c>
   1bf54:	add	r3, r5, r6
   1bf58:	add	r2, sp, #1056	; 0x420
   1bf5c:	ldrb	r3, [r3, #-1]
   1bf60:	add	r2, r2, #8
   1bf64:	add	r3, r2, r3, lsl #2
   1bf68:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   1bf6c:	cmp	r3, #0
   1bf70:	bne	1bf08 <__assert_fail@plt+0xa6b4>
   1bf74:	ldr	r3, [sp, #4]
   1bf78:	cmp	sl, r3
   1bf7c:	movcc	r0, r3
   1bf80:	ldr	r3, [sp, #8]
   1bf84:	movcs	r0, sl
   1bf88:	cmp	r0, r3
   1bf8c:	bcs	1bfd0 <__assert_fail@plt+0xa77c>
   1bf90:	ldr	r3, [sp, #12]
   1bf94:	add	r1, r7, r0
   1bf98:	add	r2, r5, r1
   1bf9c:	ldrb	r1, [r5, r1]
   1bfa0:	ldrb	ip, [r3, r0]
   1bfa4:	add	r3, r3, r0
   1bfa8:	cmp	ip, r1
   1bfac:	beq	1bfc4 <__assert_fail@plt+0xa770>
   1bfb0:	b	1c048 <__assert_fail@plt+0xa7f4>
   1bfb4:	ldrb	ip, [r3, #1]!
   1bfb8:	ldrb	r1, [r2, #1]!
   1bfbc:	cmp	ip, r1
   1bfc0:	bne	1c048 <__assert_fail@plt+0xa7f4>
   1bfc4:	cmp	r8, r3
   1bfc8:	add	r0, r9, r3
   1bfcc:	bne	1bfb4 <__assert_fail@plt+0xa760>
   1bfd0:	ldr	r3, [sp, #4]
   1bfd4:	cmp	sl, r3
   1bfd8:	bcs	1c078 <__assert_fail@plt+0xa824>
   1bfdc:	ldr	r3, [sp, #28]
   1bfe0:	add	r2, r7, r3
   1bfe4:	ldr	r3, [sp, #24]
   1bfe8:	ldrb	r1, [r3]
   1bfec:	add	r3, r5, r2
   1bff0:	ldrb	r2, [r5, r2]
   1bff4:	cmp	r1, r2
   1bff8:	bne	1c078 <__assert_fail@plt+0xa824>
   1bffc:	add	ip, r7, sl
   1c000:	add	fp, r5, r7
   1c004:	ldr	r2, [sp, #24]
   1c008:	add	ip, ip, r5
   1c00c:	b	1c020 <__assert_fail@plt+0xa7cc>
   1c010:	ldrb	r0, [r2, #-1]!
   1c014:	ldrb	r1, [r3, #-1]!
   1c018:	cmp	r0, r1
   1c01c:	bne	1c02c <__assert_fail@plt+0xa7d8>
   1c020:	cmp	ip, r3
   1c024:	sub	lr, r3, fp
   1c028:	bne	1c010 <__assert_fail@plt+0xa7bc>
   1c02c:	add	sl, sl, #1
   1c030:	cmp	sl, lr
   1c034:	bhi	1be64 <__assert_fail@plt+0xa610>
   1c038:	ldr	r3, [sp]
   1c03c:	ldr	sl, [sp, #20]
   1c040:	add	r7, r7, r3
   1c044:	b	1bf20 <__assert_fail@plt+0xa6cc>
   1c048:	ldr	r3, [sp, #16]
   1c04c:	mov	sl, #0
   1c050:	add	r7, r3, r7
   1c054:	add	r7, r0, r7
   1c058:	b	1bf20 <__assert_fail@plt+0xa6cc>
   1c05c:	mov	r3, #1
   1c060:	sub	r2, r4, #1
   1c064:	add	r6, sp, #40	; 0x28
   1c068:	str	r3, [sp]
   1c06c:	str	r2, [sp, #4]
   1c070:	str	r3, [sp, #36]	; 0x24
   1c074:	b	1bca0 <__assert_fail@plt+0xa44c>
   1c078:	ldr	lr, [sp, #4]
   1c07c:	b	1c02c <__assert_fail@plt+0xa7d8>
   1c080:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c084:	strd	r6, [sp, #8]
   1c088:	strd	r8, [sp, #16]
   1c08c:	strd	sl, [sp, #24]
   1c090:	str	lr, [sp, #32]
   1c094:	sub	sp, sp, #44	; 0x2c
   1c098:	ldrb	r4, [r0]
   1c09c:	ldrb	r3, [r1]
   1c0a0:	cmp	r4, #0
   1c0a4:	beq	1c460 <__assert_fail@plt+0xac0c>
   1c0a8:	cmp	r3, #0
   1c0ac:	beq	1c178 <__assert_fail@plt+0xa924>
   1c0b0:	mov	r8, r0
   1c0b4:	add	r2, r1, #1
   1c0b8:	mov	ip, r3
   1c0bc:	mov	lr, #1
   1c0c0:	b	1c0cc <__assert_fail@plt+0xa878>
   1c0c4:	cmp	ip, #0
   1c0c8:	beq	1c0f4 <__assert_fail@plt+0xa8a0>
   1c0cc:	cmp	ip, r4
   1c0d0:	movne	lr, #0
   1c0d4:	andeq	lr, lr, #1
   1c0d8:	ldrb	r4, [r8, #1]!
   1c0dc:	mov	r5, r2
   1c0e0:	ldrb	ip, [r2], #1
   1c0e4:	cmp	r4, #0
   1c0e8:	bne	1c0c4 <__assert_fail@plt+0xa870>
   1c0ec:	cmp	ip, #0
   1c0f0:	bne	1c158 <__assert_fail@plt+0xa904>
   1c0f4:	cmp	lr, #0
   1c0f8:	bne	1c178 <__assert_fail@plt+0xa924>
   1c0fc:	mov	r7, r1
   1c100:	mov	r6, r0
   1c104:	mov	r1, r3
   1c108:	add	r0, r0, #1
   1c10c:	bl	11680 <strchr@plt>
   1c110:	subs	r4, r0, #0
   1c114:	sub	r7, r5, r7
   1c118:	beq	1c158 <__assert_fail@plt+0xa904>
   1c11c:	cmp	r7, #1
   1c120:	beq	1c158 <__assert_fail@plt+0xa904>
   1c124:	add	r6, r6, r7
   1c128:	sub	r5, r5, r7
   1c12c:	cmp	r6, r4
   1c130:	subcs	r6, r6, r4
   1c134:	movcc	r6, #1
   1c138:	cmp	r7, #31
   1c13c:	bls	1c180 <__assert_fail@plt+0xa92c>
   1c140:	mov	r0, r4
   1c144:	mov	r3, r7
   1c148:	mov	r2, r5
   1c14c:	mov	r1, r6
   1c150:	bl	1bc4c <__assert_fail@plt+0xa3f8>
   1c154:	mov	r4, r0
   1c158:	mov	r0, r4
   1c15c:	add	sp, sp, #44	; 0x2c
   1c160:	ldrd	r4, [sp]
   1c164:	ldrd	r6, [sp, #8]
   1c168:	ldrd	r8, [sp, #16]
   1c16c:	ldrd	sl, [sp, #24]
   1c170:	add	sp, sp, #32
   1c174:	pop	{pc}		; (ldr pc, [sp], #4)
   1c178:	mov	r4, r0
   1c17c:	b	1c158 <__assert_fail@plt+0xa904>
   1c180:	cmp	r7, #2
   1c184:	bls	1c470 <__assert_fail@plt+0xac1c>
   1c188:	add	r2, sp, #36	; 0x24
   1c18c:	mov	r1, r7
   1c190:	mov	r0, r5
   1c194:	bl	1bb20 <__assert_fail@plt+0xa2cc>
   1c198:	ldr	r3, [sp, #36]	; 0x24
   1c19c:	mov	r8, r0
   1c1a0:	str	r3, [sp, #16]
   1c1a4:	ldr	r3, [sp, #16]
   1c1a8:	mov	r2, r8
   1c1ac:	mov	r0, r5
   1c1b0:	add	r1, r5, r3
   1c1b4:	bl	114d0 <memcmp@plt>
   1c1b8:	cmp	r0, #0
   1c1bc:	bne	1c320 <__assert_fail@plt+0xaacc>
   1c1c0:	sub	r2, r8, #1
   1c1c4:	mov	r3, r8
   1c1c8:	str	r7, [sp, #4]
   1c1cc:	sub	r8, r7, #1
   1c1d0:	rsb	r9, r5, #1
   1c1d4:	str	r5, [sp, #8]
   1c1d8:	str	r2, [sp, #20]
   1c1dc:	add	r2, r5, r2
   1c1e0:	add	r8, r8, r5
   1c1e4:	mov	sl, r0
   1c1e8:	mov	r5, r0
   1c1ec:	str	r2, [sp, #28]
   1c1f0:	ldr	r2, [sp, #16]
   1c1f4:	sub	r2, r7, r2
   1c1f8:	mov	r7, r3
   1c1fc:	str	r2, [sp, #24]
   1c200:	rsb	r2, r3, #1
   1c204:	str	r2, [sp, #12]
   1c208:	mov	r2, r6
   1c20c:	ldr	r3, [sp, #4]
   1c210:	add	r0, r4, r2
   1c214:	mov	r1, #0
   1c218:	add	fp, r3, sl
   1c21c:	sub	r2, fp, r2
   1c220:	bl	11710 <memchr@plt>
   1c224:	clz	r0, r0
   1c228:	cmp	fp, #0
   1c22c:	lsr	r0, r0, #5
   1c230:	moveq	r0, #0
   1c234:	cmp	r0, #0
   1c238:	beq	1c178 <__assert_fail@plt+0xa924>
   1c23c:	ldr	r3, [sp, #4]
   1c240:	cmp	r7, r5
   1c244:	movcs	r0, r7
   1c248:	movcc	r0, r5
   1c24c:	cmp	r3, r0
   1c250:	bls	1c294 <__assert_fail@plt+0xaa40>
   1c254:	ldr	r3, [sp, #8]
   1c258:	add	r1, r0, sl
   1c25c:	add	r2, r4, r1
   1c260:	ldrb	r1, [r4, r1]
   1c264:	ldrb	ip, [r3, r0]
   1c268:	add	r3, r3, r0
   1c26c:	cmp	r1, ip
   1c270:	beq	1c288 <__assert_fail@plt+0xaa34>
   1c274:	b	1c30c <__assert_fail@plt+0xaab8>
   1c278:	ldrb	ip, [r3, #1]!
   1c27c:	ldrb	r1, [r2, #1]!
   1c280:	cmp	ip, r1
   1c284:	bne	1c30c <__assert_fail@plt+0xaab8>
   1c288:	cmp	r8, r3
   1c28c:	add	r0, r9, r3
   1c290:	bne	1c278 <__assert_fail@plt+0xaa24>
   1c294:	cmp	r7, r5
   1c298:	bls	1c488 <__assert_fail@plt+0xac34>
   1c29c:	ldr	r3, [sp, #20]
   1c2a0:	ldr	r0, [sp, #28]
   1c2a4:	add	r2, sl, r3
   1c2a8:	add	r3, r4, r2
   1c2ac:	ldrb	r2, [r4, r2]
   1c2b0:	ldrb	r1, [r0]
   1c2b4:	cmp	r1, r2
   1c2b8:	bne	1c488 <__assert_fail@plt+0xac34>
   1c2bc:	add	ip, r5, sl
   1c2c0:	mov	r2, r0
   1c2c4:	add	ip, ip, r4
   1c2c8:	add	r6, r4, sl
   1c2cc:	b	1c2e0 <__assert_fail@plt+0xaa8c>
   1c2d0:	ldrb	r0, [r2, #-1]!
   1c2d4:	ldrb	r1, [r3, #-1]!
   1c2d8:	cmp	r0, r1
   1c2dc:	bne	1c2ec <__assert_fail@plt+0xaa98>
   1c2e0:	cmp	ip, r3
   1c2e4:	sub	lr, r3, r6
   1c2e8:	bne	1c2d0 <__assert_fail@plt+0xaa7c>
   1c2ec:	add	r5, r5, #1
   1c2f0:	cmp	r5, lr
   1c2f4:	bhi	1c438 <__assert_fail@plt+0xabe4>
   1c2f8:	ldr	r3, [sp, #16]
   1c2fc:	ldr	r5, [sp, #24]
   1c300:	add	sl, sl, r3
   1c304:	mov	r2, fp
   1c308:	b	1c20c <__assert_fail@plt+0xa9b8>
   1c30c:	ldr	r3, [sp, #12]
   1c310:	mov	r5, #0
   1c314:	add	sl, r3, sl
   1c318:	add	sl, r0, sl
   1c31c:	b	1c304 <__assert_fail@plt+0xaab0>
   1c320:	sub	r3, r7, r8
   1c324:	mov	r2, r8
   1c328:	cmp	r3, r8
   1c32c:	sub	r1, r8, #1
   1c330:	movcc	r3, r2
   1c334:	sub	r8, r7, #1
   1c338:	add	r3, r3, #1
   1c33c:	add	r8, r8, r5
   1c340:	str	r1, [sp, #12]
   1c344:	mov	sl, #0
   1c348:	add	r1, r5, r1
   1c34c:	str	r3, [sp, #16]
   1c350:	mov	r3, r2
   1c354:	add	r2, r5, r2
   1c358:	rsb	r9, r5, #1
   1c35c:	str	r2, [sp, #4]
   1c360:	rsb	r2, r3, #1
   1c364:	str	r2, [sp, #8]
   1c368:	mov	r2, r6
   1c36c:	mov	r6, r3
   1c370:	str	r1, [sp, #20]
   1c374:	add	fp, r7, sl
   1c378:	add	r0, r4, r2
   1c37c:	mov	r1, #0
   1c380:	sub	r2, fp, r2
   1c384:	bl	11710 <memchr@plt>
   1c388:	clz	r0, r0
   1c38c:	cmp	fp, #0
   1c390:	lsr	r0, r0, #5
   1c394:	moveq	r0, #0
   1c398:	cmp	r0, #0
   1c39c:	beq	1c178 <__assert_fail@plt+0xa924>
   1c3a0:	cmp	r7, r6
   1c3a4:	bls	1c3ec <__assert_fail@plt+0xab98>
   1c3a8:	ldr	r3, [sp, #4]
   1c3ac:	add	r2, r6, sl
   1c3b0:	add	r1, r4, r2
   1c3b4:	ldrb	r2, [r4, r2]
   1c3b8:	ldrb	r0, [r3]
   1c3bc:	cmp	r2, r0
   1c3c0:	movne	lr, r6
   1c3c4:	bne	1c440 <__assert_fail@plt+0xabec>
   1c3c8:	ldr	r2, [sp, #4]
   1c3cc:	b	1c3e0 <__assert_fail@plt+0xab8c>
   1c3d0:	ldrb	r0, [r2, #1]!
   1c3d4:	ldrb	r3, [r1, #1]!
   1c3d8:	cmp	r0, r3
   1c3dc:	bne	1c440 <__assert_fail@plt+0xabec>
   1c3e0:	cmp	r2, r8
   1c3e4:	add	lr, r9, r2
   1c3e8:	bne	1c3d0 <__assert_fail@plt+0xab7c>
   1c3ec:	ldr	r3, [sp, #12]
   1c3f0:	cmn	r3, #1
   1c3f4:	beq	1c438 <__assert_fail@plt+0xabe4>
   1c3f8:	ldr	r3, [sp, #12]
   1c3fc:	add	r2, sl, r3
   1c400:	ldr	r3, [sp, #20]
   1c404:	add	r1, r4, r2
   1c408:	ldrb	r2, [r4, r2]
   1c40c:	ldrb	r0, [r3]
   1c410:	cmp	r2, r0
   1c414:	bne	1c454 <__assert_fail@plt+0xac00>
   1c418:	mov	r2, r3
   1c41c:	b	1c430 <__assert_fail@plt+0xabdc>
   1c420:	ldrb	r0, [r2, #-1]!
   1c424:	ldrb	r3, [r1, #-1]!
   1c428:	cmp	r0, r3
   1c42c:	bne	1c454 <__assert_fail@plt+0xac00>
   1c430:	cmp	r5, r2
   1c434:	bne	1c420 <__assert_fail@plt+0xabcc>
   1c438:	add	r4, r4, sl
   1c43c:	b	1c158 <__assert_fail@plt+0xa904>
   1c440:	ldr	r3, [sp, #8]
   1c444:	add	sl, r3, sl
   1c448:	add	sl, lr, sl
   1c44c:	mov	r2, fp
   1c450:	b	1c374 <__assert_fail@plt+0xab20>
   1c454:	ldr	r3, [sp, #16]
   1c458:	add	sl, sl, r3
   1c45c:	b	1c44c <__assert_fail@plt+0xabf8>
   1c460:	cmp	r3, #0
   1c464:	moveq	r4, r0
   1c468:	movne	r4, #0
   1c46c:	b	1c158 <__assert_fail@plt+0xa904>
   1c470:	mov	r3, #1
   1c474:	sub	r2, r7, #1
   1c478:	mov	r8, r2
   1c47c:	str	r3, [sp, #16]
   1c480:	str	r3, [sp, #36]	; 0x24
   1c484:	b	1c1a4 <__assert_fail@plt+0xa950>
   1c488:	mov	lr, r7
   1c48c:	b	1c2ec <__assert_fail@plt+0xaa98>
   1c490:	ldrb	r3, [r0]
   1c494:	cmp	r3, #47	; 0x2f
   1c498:	bne	1c4a8 <__assert_fail@plt+0xac54>
   1c49c:	ldrb	r3, [r0, #1]!
   1c4a0:	cmp	r3, #47	; 0x2f
   1c4a4:	beq	1c49c <__assert_fail@plt+0xac48>
   1c4a8:	cmp	r3, #0
   1c4ac:	beq	1c4dc <__assert_fail@plt+0xac88>
   1c4b0:	mov	r2, r0
   1c4b4:	mov	r1, #0
   1c4b8:	cmp	r3, #47	; 0x2f
   1c4bc:	moveq	r1, #1
   1c4c0:	beq	1c4d0 <__assert_fail@plt+0xac7c>
   1c4c4:	cmp	r1, #0
   1c4c8:	movne	r0, r2
   1c4cc:	movne	r1, #0
   1c4d0:	ldrb	r3, [r2, #1]!
   1c4d4:	cmp	r3, #0
   1c4d8:	bne	1c4b8 <__assert_fail@plt+0xac64>
   1c4dc:	bx	lr
   1c4e0:	str	r4, [sp, #-8]!
   1c4e4:	mov	r4, r0
   1c4e8:	str	lr, [sp, #4]
   1c4ec:	bl	11674 <strlen@plt>
   1c4f0:	cmp	r0, #1
   1c4f4:	bls	1c518 <__assert_fail@plt+0xacc4>
   1c4f8:	add	r2, r4, r0
   1c4fc:	mov	r3, r0
   1c500:	ldrb	r2, [r2, #-1]
   1c504:	cmp	r2, #47	; 0x2f
   1c508:	subeq	r3, r0, #2
   1c50c:	rsbeq	r1, r4, #1
   1c510:	addeq	r3, r4, r3
   1c514:	beq	1c524 <__assert_fail@plt+0xacd0>
   1c518:	ldr	r4, [sp]
   1c51c:	add	sp, sp, #4
   1c520:	pop	{pc}		; (ldr pc, [sp], #4)
   1c524:	cmp	r3, r4
   1c528:	add	r0, r1, r3
   1c52c:	beq	1c518 <__assert_fail@plt+0xacc4>
   1c530:	ldrb	r2, [r3], #-1
   1c534:	cmp	r2, #47	; 0x2f
   1c538:	beq	1c524 <__assert_fail@plt+0xacd0>
   1c53c:	ldr	r4, [sp]
   1c540:	add	sp, sp, #4
   1c544:	pop	{pc}		; (ldr pc, [sp], #4)
   1c548:	cmp	r0, #0
   1c54c:	bxlt	lr
   1c550:	str	r4, [sp, #-8]!
   1c554:	str	lr, [sp, #4]
   1c558:	bl	11830 <close@plt>
   1c55c:	cmp	r0, #0
   1c560:	bne	1c570 <__assert_fail@plt+0xad1c>
   1c564:	ldr	r4, [sp]
   1c568:	add	sp, sp, #4
   1c56c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c570:	movw	r3, #62848	; 0xf580
   1c574:	movt	r3, #1
   1c578:	movw	r1, #62872	; 0xf598
   1c57c:	movt	r1, #1
   1c580:	movw	r0, #62892	; 0xf5ac
   1c584:	movt	r0, #1
   1c588:	mov	r2, #64	; 0x40
   1c58c:	bl	11854 <__assert_fail@plt>
   1c590:	mov	r2, #18688	; 0x4900
   1c594:	strd	r4, [sp, #-16]!
   1c598:	mov	r4, r0
   1c59c:	ldr	r0, [r0]
   1c5a0:	str	r6, [sp, #8]
   1c5a4:	str	lr, [sp, #12]
   1c5a8:	bl	11698 <openat64@plt>
   1c5ac:	subs	r5, r0, #0
   1c5b0:	blt	1c5d4 <__assert_fail@plt+0xad80>
   1c5b4:	ldr	r0, [r4]
   1c5b8:	bl	1c548 <__assert_fail@plt+0xacf4>
   1c5bc:	mov	r0, #0
   1c5c0:	str	r5, [r4]
   1c5c4:	ldrd	r4, [sp]
   1c5c8:	ldr	r6, [sp, #8]
   1c5cc:	add	sp, sp, #12
   1c5d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c5d4:	mvn	r0, #0
   1c5d8:	b	1c5c4 <__assert_fail@plt+0xad70>
   1c5dc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1c5e0:	strd	r6, [sp, #8]
   1c5e4:	mov	r6, r0
   1c5e8:	strd	r8, [sp, #16]
   1c5ec:	str	lr, [sp, #24]
   1c5f0:	sub	sp, sp, #12
   1c5f4:	bl	11524 <chdir@plt>
   1c5f8:	subs	r4, r0, #0
   1c5fc:	beq	1c700 <__assert_fail@plt+0xaeac>
   1c600:	bl	116b0 <__errno_location@plt>
   1c604:	ldr	r3, [r0]
   1c608:	mov	r9, r0
   1c60c:	cmp	r3, #36	; 0x24
   1c610:	bne	1c700 <__assert_fail@plt+0xaeac>
   1c614:	mov	r0, r6
   1c618:	bl	11674 <strlen@plt>
   1c61c:	mvn	r3, #99	; 0x63
   1c620:	subs	r7, r0, #0
   1c624:	str	r3, [sp, #4]
   1c628:	beq	1c838 <__assert_fail@plt+0xafe4>
   1c62c:	cmp	r7, #4096	; 0x1000
   1c630:	bcc	1c854 <__assert_fail@plt+0xb000>
   1c634:	movw	r1, #62928	; 0xf5d0
   1c638:	movt	r1, #1
   1c63c:	mov	r0, r6
   1c640:	bl	11848 <strspn@plt>
   1c644:	cmp	r0, #2
   1c648:	mov	r5, r0
   1c64c:	beq	1c750 <__assert_fail@plt+0xaefc>
   1c650:	cmp	r0, #0
   1c654:	moveq	r5, r6
   1c658:	bne	1c71c <__assert_fail@plt+0xaec8>
   1c65c:	ldrb	r3, [r5]
   1c660:	cmp	r3, #47	; 0x2f
   1c664:	beq	1c800 <__assert_fail@plt+0xafac>
   1c668:	add	r6, r6, r7
   1c66c:	cmp	r5, r6
   1c670:	bhi	1c81c <__assert_fail@plt+0xafc8>
   1c674:	sub	r3, r6, r5
   1c678:	cmp	r3, #4096	; 0x1000
   1c67c:	blt	1c7ac <__assert_fail@plt+0xaf58>
   1c680:	movw	r7, #62928	; 0xf5d0
   1c684:	movt	r7, #1
   1c688:	mov	r8, #47	; 0x2f
   1c68c:	b	1c6dc <__assert_fail@plt+0xae88>
   1c690:	mov	r3, #0
   1c694:	sub	r2, r4, r5
   1c698:	cmp	r2, #4096	; 0x1000
   1c69c:	strb	r3, [r4]
   1c6a0:	bge	1c7e4 <__assert_fail@plt+0xaf90>
   1c6a4:	mov	r1, r5
   1c6a8:	add	r0, sp, #4
   1c6ac:	bl	1c590 <__assert_fail@plt+0xad3c>
   1c6b0:	cmp	r0, #0
   1c6b4:	strb	r8, [r4]
   1c6b8:	bne	1c738 <__assert_fail@plt+0xaee4>
   1c6bc:	add	r4, r4, #1
   1c6c0:	mov	r1, r7
   1c6c4:	mov	r0, r4
   1c6c8:	bl	11848 <strspn@plt>
   1c6cc:	add	r5, r4, r0
   1c6d0:	sub	r3, r6, r5
   1c6d4:	cmp	r3, #4096	; 0x1000
   1c6d8:	blt	1c7ac <__assert_fail@plt+0xaf58>
   1c6dc:	mov	r2, #4096	; 0x1000
   1c6e0:	mov	r1, #47	; 0x2f
   1c6e4:	mov	r0, r5
   1c6e8:	bl	116a4 <memrchr@plt>
   1c6ec:	subs	r4, r0, #0
   1c6f0:	bne	1c690 <__assert_fail@plt+0xae3c>
   1c6f4:	mov	r3, #36	; 0x24
   1c6f8:	mvn	r4, #0
   1c6fc:	str	r3, [r9]
   1c700:	mov	r0, r4
   1c704:	add	sp, sp, #12
   1c708:	ldrd	r4, [sp]
   1c70c:	ldrd	r6, [sp, #8]
   1c710:	ldrd	r8, [sp, #16]
   1c714:	add	sp, sp, #24
   1c718:	pop	{pc}		; (ldr pc, [sp], #4)
   1c71c:	movw	r1, #62928	; 0xf5d0
   1c720:	movt	r1, #1
   1c724:	add	r0, sp, #4
   1c728:	bl	1c590 <__assert_fail@plt+0xad3c>
   1c72c:	cmp	r0, #0
   1c730:	addeq	r5, r6, r5
   1c734:	beq	1c65c <__assert_fail@plt+0xae08>
   1c738:	ldr	r5, [r9]
   1c73c:	mvn	r4, #0
   1c740:	ldr	r0, [sp, #4]
   1c744:	bl	1c548 <__assert_fail@plt+0xacf4>
   1c748:	str	r5, [r9]
   1c74c:	b	1c700 <__assert_fail@plt+0xaeac>
   1c750:	sub	r2, r7, #3
   1c754:	mov	r1, #47	; 0x2f
   1c758:	add	r0, r6, #3
   1c75c:	bl	11710 <memchr@plt>
   1c760:	subs	r4, r0, #0
   1c764:	mvneq	r4, #0
   1c768:	beq	1c700 <__assert_fail@plt+0xaeac>
   1c76c:	mov	r3, #0
   1c770:	mov	r1, r6
   1c774:	add	r0, sp, #4
   1c778:	strb	r3, [r4]
   1c77c:	bl	1c590 <__assert_fail@plt+0xad3c>
   1c780:	mov	r3, #47	; 0x2f
   1c784:	cmp	r0, #0
   1c788:	strb	r3, [r4]
   1c78c:	bne	1c738 <__assert_fail@plt+0xaee4>
   1c790:	add	r4, r4, #1
   1c794:	movw	r1, #62928	; 0xf5d0
   1c798:	movt	r1, #1
   1c79c:	mov	r0, r4
   1c7a0:	bl	11848 <strspn@plt>
   1c7a4:	add	r5, r4, r0
   1c7a8:	b	1c65c <__assert_fail@plt+0xae08>
   1c7ac:	cmp	r6, r5
   1c7b0:	bls	1c7c8 <__assert_fail@plt+0xaf74>
   1c7b4:	mov	r1, r5
   1c7b8:	add	r0, sp, #4
   1c7bc:	bl	1c590 <__assert_fail@plt+0xad3c>
   1c7c0:	cmp	r0, #0
   1c7c4:	bne	1c738 <__assert_fail@plt+0xaee4>
   1c7c8:	ldr	r0, [sp, #4]
   1c7cc:	bl	117b8 <fchdir@plt>
   1c7d0:	subs	r4, r0, #0
   1c7d4:	bne	1c738 <__assert_fail@plt+0xaee4>
   1c7d8:	ldr	r0, [sp, #4]
   1c7dc:	bl	1c548 <__assert_fail@plt+0xacf4>
   1c7e0:	b	1c700 <__assert_fail@plt+0xaeac>
   1c7e4:	movw	r1, #62872	; 0xf598
   1c7e8:	movt	r1, #1
   1c7ec:	ldr	r3, [pc, #124]	; 1c870 <__assert_fail@plt+0xb01c>
   1c7f0:	movw	r0, #62960	; 0xf5f0
   1c7f4:	movt	r0, #1
   1c7f8:	mov	r2, #179	; 0xb3
   1c7fc:	bl	11854 <__assert_fail@plt>
   1c800:	movw	r1, #62872	; 0xf598
   1c804:	movt	r1, #1
   1c808:	ldr	r3, [pc, #96]	; 1c870 <__assert_fail@plt+0xb01c>
   1c80c:	movw	r0, #62932	; 0xf5d4
   1c810:	movt	r0, #1
   1c814:	mov	r2, #162	; 0xa2
   1c818:	bl	11854 <__assert_fail@plt>
   1c81c:	movw	r1, #62872	; 0xf598
   1c820:	movt	r1, #1
   1c824:	ldr	r3, [pc, #68]	; 1c870 <__assert_fail@plt+0xb01c>
   1c828:	movw	r0, #62944	; 0xf5e0
   1c82c:	movt	r0, #1
   1c830:	mov	r2, #163	; 0xa3
   1c834:	bl	11854 <__assert_fail@plt>
   1c838:	movw	r1, #62872	; 0xf598
   1c83c:	movt	r1, #1
   1c840:	ldr	r3, [pc, #40]	; 1c870 <__assert_fail@plt+0xb01c>
   1c844:	movw	r0, #62908	; 0xf5bc
   1c848:	movt	r0, #1
   1c84c:	mov	r2, #126	; 0x7e
   1c850:	bl	11854 <__assert_fail@plt>
   1c854:	movw	r1, #62872	; 0xf598
   1c858:	movt	r1, #1
   1c85c:	ldr	r3, [pc, #12]	; 1c870 <__assert_fail@plt+0xb01c>
   1c860:	movw	r0, #62916	; 0xf5c4
   1c864:	movt	r0, #1
   1c868:	mov	r2, #127	; 0x7f
   1c86c:	bl	11854 <__assert_fail@plt>
   1c870:	andeq	pc, r1, ip, lsl #11
   1c874:	strd	r4, [sp, #-16]!
   1c878:	mov	r4, r0
   1c87c:	str	r6, [sp, #8]
   1c880:	str	lr, [sp, #12]
   1c884:	bl	11590 <__fpending@plt>
   1c888:	ldr	r5, [r4]
   1c88c:	mov	r6, r0
   1c890:	mov	r0, r4
   1c894:	bl	1c8fc <__assert_fail@plt+0xb0a8>
   1c898:	mov	r4, r0
   1c89c:	and	r5, r5, #32
   1c8a0:	cmp	r5, #0
   1c8a4:	bne	1c8dc <__assert_fail@plt+0xb088>
   1c8a8:	cmp	r0, #0
   1c8ac:	beq	1c8c8 <__assert_fail@plt+0xb074>
   1c8b0:	cmp	r6, #0
   1c8b4:	bne	1c8f4 <__assert_fail@plt+0xb0a0>
   1c8b8:	bl	116b0 <__errno_location@plt>
   1c8bc:	ldr	r4, [r0]
   1c8c0:	subs	r4, r4, #9
   1c8c4:	mvnne	r4, #0
   1c8c8:	mov	r0, r4
   1c8cc:	ldrd	r4, [sp]
   1c8d0:	ldr	r6, [sp, #8]
   1c8d4:	add	sp, sp, #12
   1c8d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c8dc:	cmp	r0, #0
   1c8e0:	bne	1c8f4 <__assert_fail@plt+0xb0a0>
   1c8e4:	bl	116b0 <__errno_location@plt>
   1c8e8:	str	r4, [r0]
   1c8ec:	mvn	r4, #0
   1c8f0:	b	1c8c8 <__assert_fail@plt+0xb074>
   1c8f4:	mvn	r4, #0
   1c8f8:	b	1c8c8 <__assert_fail@plt+0xb074>
   1c8fc:	strd	r4, [sp, #-12]!
   1c900:	mov	r4, r0
   1c904:	str	lr, [sp, #8]
   1c908:	sub	sp, sp, #12
   1c90c:	bl	116f8 <fileno@plt>
   1c910:	cmp	r0, #0
   1c914:	mov	r0, r4
   1c918:	blt	1c99c <__assert_fail@plt+0xb148>
   1c91c:	bl	11608 <__freading@plt>
   1c920:	cmp	r0, #0
   1c924:	bne	1c968 <__assert_fail@plt+0xb114>
   1c928:	mov	r0, r4
   1c92c:	bl	1c9f0 <__assert_fail@plt+0xb19c>
   1c930:	cmp	r0, #0
   1c934:	beq	1c998 <__assert_fail@plt+0xb144>
   1c938:	bl	116b0 <__errno_location@plt>
   1c93c:	mov	r5, r0
   1c940:	mov	r0, r4
   1c944:	ldr	r4, [r5]
   1c948:	bl	1171c <fclose@plt>
   1c94c:	cmp	r4, #0
   1c950:	mvnne	r0, #0
   1c954:	strne	r4, [r5]
   1c958:	add	sp, sp, #12
   1c95c:	ldrd	r4, [sp]
   1c960:	add	sp, sp, #8
   1c964:	pop	{pc}		; (ldr pc, [sp], #4)
   1c968:	mov	r0, r4
   1c96c:	bl	116f8 <fileno@plt>
   1c970:	mov	r1, #1
   1c974:	mov	r2, #0
   1c978:	mov	r3, #0
   1c97c:	str	r1, [sp]
   1c980:	bl	11560 <lseek64@plt>
   1c984:	mvn	r3, #0
   1c988:	mvn	r2, #0
   1c98c:	cmp	r1, r3
   1c990:	cmpeq	r0, r2
   1c994:	bne	1c928 <__assert_fail@plt+0xb0d4>
   1c998:	mov	r0, r4
   1c99c:	add	sp, sp, #12
   1c9a0:	ldrd	r4, [sp]
   1c9a4:	ldr	lr, [sp, #8]
   1c9a8:	add	sp, sp, #12
   1c9ac:	b	1171c <fclose@plt>
   1c9b0:	push	{r1, r2, r3}
   1c9b4:	push	{lr}		; (str lr, [sp, #-4]!)
   1c9b8:	sub	sp, sp, #8
   1c9bc:	ldr	r1, [sp, #12]
   1c9c0:	ands	r2, r1, #64	; 0x40
   1c9c4:	bne	1c9e0 <__assert_fail@plt+0xb18c>
   1c9c8:	bl	115c0 <open64@plt>
   1c9cc:	bl	1cc14 <__assert_fail@plt+0xb3c0>
   1c9d0:	add	sp, sp, #8
   1c9d4:	pop	{lr}		; (ldr lr, [sp], #4)
   1c9d8:	add	sp, sp, #12
   1c9dc:	bx	lr
   1c9e0:	add	r3, sp, #16
   1c9e4:	ldr	r2, [sp, #16]
   1c9e8:	str	r3, [sp, #4]
   1c9ec:	b	1c9c8 <__assert_fail@plt+0xb174>
   1c9f0:	str	r4, [sp, #-8]!
   1c9f4:	subs	r4, r0, #0
   1c9f8:	str	lr, [sp, #4]
   1c9fc:	sub	sp, sp, #8
   1ca00:	beq	1ca1c <__assert_fail@plt+0xb1c8>
   1ca04:	bl	11608 <__freading@plt>
   1ca08:	cmp	r0, #0
   1ca0c:	beq	1ca1c <__assert_fail@plt+0xb1c8>
   1ca10:	ldr	r3, [r4]
   1ca14:	tst	r3, #256	; 0x100
   1ca18:	bne	1ca34 <__assert_fail@plt+0xb1e0>
   1ca1c:	mov	r0, r4
   1ca20:	add	sp, sp, #8
   1ca24:	ldr	r4, [sp]
   1ca28:	ldr	lr, [sp, #4]
   1ca2c:	add	sp, sp, #8
   1ca30:	b	11494 <fflush@plt>
   1ca34:	mov	r1, #1
   1ca38:	mov	r2, #0
   1ca3c:	mov	r3, #0
   1ca40:	mov	r0, r4
   1ca44:	str	r1, [sp]
   1ca48:	bl	1ca50 <__assert_fail@plt+0xb1fc>
   1ca4c:	b	1ca1c <__assert_fail@plt+0xb1c8>
   1ca50:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ca54:	mov	r4, r0
   1ca58:	ldr	ip, [r0, #4]
   1ca5c:	strd	r6, [sp, #8]
   1ca60:	str	lr, [sp, #20]
   1ca64:	ldr	lr, [r0, #8]
   1ca68:	str	r8, [sp, #16]
   1ca6c:	sub	sp, sp, #8
   1ca70:	ldr	r5, [sp, #32]
   1ca74:	cmp	lr, ip
   1ca78:	beq	1caa0 <__assert_fail@plt+0xb24c>
   1ca7c:	mov	r0, r4
   1ca80:	str	r5, [sp, #32]
   1ca84:	add	sp, sp, #8
   1ca88:	ldrd	r4, [sp]
   1ca8c:	ldrd	r6, [sp, #8]
   1ca90:	ldr	r8, [sp, #16]
   1ca94:	ldr	lr, [sp, #20]
   1ca98:	add	sp, sp, #24
   1ca9c:	b	11728 <fseeko64@plt>
   1caa0:	ldr	ip, [r0, #16]
   1caa4:	ldr	lr, [r0, #20]
   1caa8:	cmp	lr, ip
   1caac:	bne	1ca7c <__assert_fail@plt+0xb228>
   1cab0:	ldr	r8, [r0, #36]	; 0x24
   1cab4:	cmp	r8, #0
   1cab8:	bne	1ca7c <__assert_fail@plt+0xb228>
   1cabc:	mov	r6, r2
   1cac0:	mov	r7, r3
   1cac4:	bl	116f8 <fileno@plt>
   1cac8:	mov	r2, r6
   1cacc:	mov	r3, r7
   1cad0:	str	r5, [sp]
   1cad4:	bl	11560 <lseek64@plt>
   1cad8:	mvn	r3, #0
   1cadc:	mvn	r2, #0
   1cae0:	cmp	r1, r3
   1cae4:	cmpeq	r0, r2
   1cae8:	beq	1cb18 <__assert_fail@plt+0xb2c4>
   1caec:	ldr	r3, [r4]
   1caf0:	strd	r0, [r4, #80]	; 0x50
   1caf4:	bic	r3, r3, #16
   1caf8:	str	r3, [r4]
   1cafc:	mov	r0, r8
   1cb00:	add	sp, sp, #8
   1cb04:	ldrd	r4, [sp]
   1cb08:	ldrd	r6, [sp, #8]
   1cb0c:	ldr	r8, [sp, #16]
   1cb10:	add	sp, sp, #20
   1cb14:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb18:	mvn	r8, #0
   1cb1c:	b	1cafc <__assert_fail@plt+0xb2a8>
   1cb20:	mov	r0, #14
   1cb24:	str	r4, [sp, #-8]!
   1cb28:	str	lr, [sp, #4]
   1cb2c:	bl	11788 <nl_langinfo@plt>
   1cb30:	cmp	r0, #0
   1cb34:	beq	1cb58 <__assert_fail@plt+0xb304>
   1cb38:	ldrb	r2, [r0]
   1cb3c:	movw	r3, #62980	; 0xf604
   1cb40:	movt	r3, #1
   1cb44:	ldr	r4, [sp]
   1cb48:	add	sp, sp, #4
   1cb4c:	cmp	r2, #0
   1cb50:	moveq	r0, r3
   1cb54:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb58:	ldr	r4, [sp]
   1cb5c:	add	sp, sp, #4
   1cb60:	movw	r0, #62980	; 0xf604
   1cb64:	movt	r0, #1
   1cb68:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb6c:	strd	r4, [sp, #-20]!	; 0xffffffec
   1cb70:	mov	r5, r2
   1cb74:	strd	r6, [sp, #8]
   1cb78:	subs	r6, r0, #0
   1cb7c:	mov	r7, r1
   1cb80:	str	lr, [sp, #16]
   1cb84:	sub	sp, sp, #12
   1cb88:	addeq	r6, sp, #4
   1cb8c:	mov	r0, r6
   1cb90:	bl	1159c <mbrtowc@plt>
   1cb94:	cmp	r5, #0
   1cb98:	cmnne	r0, #3
   1cb9c:	mov	r4, r0
   1cba0:	bhi	1cbbc <__assert_fail@plt+0xb368>
   1cba4:	mov	r0, r4
   1cba8:	add	sp, sp, #12
   1cbac:	ldrd	r4, [sp]
   1cbb0:	ldrd	r6, [sp, #8]
   1cbb4:	add	sp, sp, #16
   1cbb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cbbc:	mov	r0, #0
   1cbc0:	bl	1cdf4 <__assert_fail@plt+0xb5a0>
   1cbc4:	cmp	r0, #0
   1cbc8:	bne	1cba4 <__assert_fail@plt+0xb350>
   1cbcc:	ldrb	r3, [r7]
   1cbd0:	mov	r4, #1
   1cbd4:	str	r3, [r6]
   1cbd8:	b	1cba4 <__assert_fail@plt+0xb350>
   1cbdc:	umull	r2, r3, r1, r2
   1cbe0:	cmp	r3, #0
   1cbe4:	bne	1cbf0 <__assert_fail@plt+0xb39c>
   1cbe8:	mov	r1, r2
   1cbec:	b	1bac8 <__assert_fail@plt+0xa274>
   1cbf0:	str	r4, [sp, #-8]!
   1cbf4:	str	lr, [sp, #4]
   1cbf8:	bl	116b0 <__errno_location@plt>
   1cbfc:	mov	r3, #12
   1cc00:	ldr	r4, [sp]
   1cc04:	add	sp, sp, #4
   1cc08:	str	r3, [r0]
   1cc0c:	mov	r0, #0
   1cc10:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc14:	cmp	r0, #2
   1cc18:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1cc1c:	mov	r4, r0
   1cc20:	strd	r6, [sp, #8]
   1cc24:	str	r8, [sp, #16]
   1cc28:	str	lr, [sp, #20]
   1cc2c:	bls	1cc48 <__assert_fail@plt+0xb3f4>
   1cc30:	mov	r0, r4
   1cc34:	ldrd	r4, [sp]
   1cc38:	ldrd	r6, [sp, #8]
   1cc3c:	ldr	r8, [sp, #16]
   1cc40:	add	sp, sp, #20
   1cc44:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc48:	bl	1cf10 <__assert_fail@plt+0xb6bc>
   1cc4c:	mov	r7, r0
   1cc50:	bl	116b0 <__errno_location@plt>
   1cc54:	mov	r5, r0
   1cc58:	mov	r0, r4
   1cc5c:	ldr	r6, [r5]
   1cc60:	mov	r4, r7
   1cc64:	bl	11830 <close@plt>
   1cc68:	str	r6, [r5]
   1cc6c:	b	1cc30 <__assert_fail@plt+0xb3dc>
   1cc70:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1cc74:	strd	r6, [sp, #8]
   1cc78:	subs	r7, r0, #0
   1cc7c:	strd	r8, [sp, #16]
   1cc80:	str	lr, [sp, #24]
   1cc84:	sub	sp, sp, #12
   1cc88:	str	r1, [sp, #4]
   1cc8c:	beq	1cd38 <__assert_fail@plt+0xb4e4>
   1cc90:	mov	r8, r1
   1cc94:	mov	r5, r1
   1cc98:	mov	r6, r7
   1cc9c:	mov	r4, #0
   1cca0:	add	r5, r5, #4
   1cca4:	ldr	r0, [r5, #-4]
   1cca8:	str	r5, [sp, #4]
   1ccac:	bl	11674 <strlen@plt>
   1ccb0:	adds	r4, r0, r4
   1ccb4:	mvncs	r4, #0
   1ccb8:	subs	r6, r6, #1
   1ccbc:	bne	1cca0 <__assert_fail@plt+0xb44c>
   1ccc0:	cmp	r4, #0
   1ccc4:	blt	1cd28 <__assert_fail@plt+0xb4d4>
   1ccc8:	add	r0, r4, #1
   1cccc:	bl	1b4ec <__assert_fail@plt+0x9c98>
   1ccd0:	mov	r6, r0
   1ccd4:	mov	r4, r0
   1ccd8:	ldr	r9, [r8], #4
   1ccdc:	mov	r0, r9
   1cce0:	bl	11674 <strlen@plt>
   1cce4:	mov	r5, r0
   1cce8:	mov	r2, r0
   1ccec:	mov	r1, r9
   1ccf0:	mov	r0, r4
   1ccf4:	bl	114b8 <memcpy@plt>
   1ccf8:	subs	r7, r7, #1
   1ccfc:	add	r4, r4, r5
   1cd00:	bne	1ccd8 <__assert_fail@plt+0xb484>
   1cd04:	mov	r3, #0
   1cd08:	strb	r3, [r4]
   1cd0c:	mov	r0, r6
   1cd10:	add	sp, sp, #12
   1cd14:	ldrd	r4, [sp]
   1cd18:	ldrd	r6, [sp, #8]
   1cd1c:	ldrd	r8, [sp, #16]
   1cd20:	add	sp, sp, #24
   1cd24:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd28:	bl	116b0 <__errno_location@plt>
   1cd2c:	mov	r3, #75	; 0x4b
   1cd30:	str	r3, [r0]
   1cd34:	b	1cd0c <__assert_fail@plt+0xb4b8>
   1cd38:	mov	r0, #1
   1cd3c:	bl	1b4ec <__assert_fail@plt+0x9c98>
   1cd40:	mov	r4, r0
   1cd44:	mov	r6, r0
   1cd48:	b	1cd04 <__assert_fail@plt+0xb4b0>
   1cd4c:	push	{lr}		; (str lr, [sp, #-4]!)
   1cd50:	sub	sp, sp, #12
   1cd54:	ldrb	ip, [r0]
   1cd58:	cmp	ip, #0
   1cd5c:	beq	1cda4 <__assert_fail@plt+0xb550>
   1cd60:	cmp	ip, #37	; 0x25
   1cd64:	bne	1cdb4 <__assert_fail@plt+0xb560>
   1cd68:	ldrb	r3, [r0, #1]
   1cd6c:	cmp	r3, #115	; 0x73
   1cd70:	bne	1cdb4 <__assert_fail@plt+0xb560>
   1cd74:	mov	ip, #0
   1cd78:	add	r2, r0, #1
   1cd7c:	b	1cd94 <__assert_fail@plt+0xb540>
   1cd80:	cmp	lr, #37	; 0x25
   1cd84:	bne	1cdb4 <__assert_fail@plt+0xb560>
   1cd88:	ldrb	lr, [r2, ip, lsl #1]
   1cd8c:	cmp	lr, #115	; 0x73
   1cd90:	bne	1cdb4 <__assert_fail@plt+0xb560>
   1cd94:	add	ip, ip, #1
   1cd98:	ldrb	lr, [r0, ip, lsl #1]
   1cd9c:	cmp	lr, #0
   1cda0:	bne	1cd80 <__assert_fail@plt+0xb52c>
   1cda4:	mov	r0, ip
   1cda8:	bl	1cc70 <__assert_fail@plt+0xb41c>
   1cdac:	add	sp, sp, #12
   1cdb0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cdb4:	mov	r3, r1
   1cdb8:	mov	r2, r0
   1cdbc:	mov	r1, #1
   1cdc0:	add	r0, sp, #4
   1cdc4:	bl	116d4 <__vasprintf_chk@plt>
   1cdc8:	cmp	r0, #0
   1cdcc:	blt	1cddc <__assert_fail@plt+0xb588>
   1cdd0:	ldr	r0, [sp, #4]
   1cdd4:	add	sp, sp, #12
   1cdd8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cddc:	bl	116b0 <__errno_location@plt>
   1cde0:	ldr	r3, [r0]
   1cde4:	cmp	r3, #12
   1cde8:	movne	r0, #0
   1cdec:	bne	1cdd4 <__assert_fail@plt+0xb580>
   1cdf0:	bl	1b964 <__assert_fail@plt+0xa110>
   1cdf4:	push	{lr}		; (str lr, [sp, #-4]!)
   1cdf8:	sub	sp, sp, #268	; 0x10c
   1cdfc:	movw	r2, #257	; 0x101
   1ce00:	add	r1, sp, #4
   1ce04:	bl	1ce4c <__assert_fail@plt+0xb5f8>
   1ce08:	cmp	r0, #0
   1ce0c:	movne	r0, #0
   1ce10:	bne	1ce44 <__assert_fail@plt+0xb5f0>
   1ce14:	movw	r1, #62988	; 0xf60c
   1ce18:	movt	r1, #1
   1ce1c:	add	r0, sp, #4
   1ce20:	bl	11464 <strcmp@plt>
   1ce24:	cmp	r0, #0
   1ce28:	beq	1ce44 <__assert_fail@plt+0xb5f0>
   1ce2c:	add	r0, sp, #4
   1ce30:	movw	r1, #62992	; 0xf610
   1ce34:	movt	r1, #1
   1ce38:	bl	11464 <strcmp@plt>
   1ce3c:	adds	r0, r0, #0
   1ce40:	movne	r0, #1
   1ce44:	add	sp, sp, #268	; 0x10c
   1ce48:	pop	{pc}		; (ldr pc, [sp], #4)
   1ce4c:	strd	r4, [sp, #-16]!
   1ce50:	mov	r5, r1
   1ce54:	mov	r1, #0
   1ce58:	mov	r4, r2
   1ce5c:	str	r6, [sp, #8]
   1ce60:	str	lr, [sp, #12]
   1ce64:	bl	11764 <setlocale@plt>
   1ce68:	subs	r6, r0, #0
   1ce6c:	beq	1ceec <__assert_fail@plt+0xb698>
   1ce70:	bl	11674 <strlen@plt>
   1ce74:	cmp	r4, r0
   1ce78:	bhi	1ce98 <__assert_fail@plt+0xb644>
   1ce7c:	cmp	r4, #0
   1ce80:	moveq	r0, #34	; 0x22
   1ce84:	bne	1cebc <__assert_fail@plt+0xb668>
   1ce88:	ldrd	r4, [sp]
   1ce8c:	ldr	r6, [sp, #8]
   1ce90:	add	sp, sp, #12
   1ce94:	pop	{pc}		; (ldr pc, [sp], #4)
   1ce98:	add	r2, r0, #1
   1ce9c:	mov	r1, r6
   1cea0:	mov	r0, r5
   1cea4:	bl	114b8 <memcpy@plt>
   1cea8:	ldrd	r4, [sp]
   1ceac:	mov	r0, #0
   1ceb0:	ldr	r6, [sp, #8]
   1ceb4:	add	sp, sp, #12
   1ceb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cebc:	sub	r4, r4, #1
   1cec0:	mov	r1, r6
   1cec4:	mov	r2, r4
   1cec8:	mov	r0, r5
   1cecc:	bl	114b8 <memcpy@plt>
   1ced0:	mov	r3, #0
   1ced4:	mov	r0, #34	; 0x22
   1ced8:	strb	r3, [r5, r4]
   1cedc:	ldrd	r4, [sp]
   1cee0:	ldr	r6, [sp, #8]
   1cee4:	add	sp, sp, #12
   1cee8:	pop	{pc}		; (ldr pc, [sp], #4)
   1ceec:	cmp	r4, #0
   1cef0:	mov	r0, #22
   1cef4:	strbne	r6, [r5]
   1cef8:	ldrd	r4, [sp]
   1cefc:	ldr	r6, [sp, #8]
   1cf00:	add	sp, sp, #12
   1cf04:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf08:	mov	r1, #0
   1cf0c:	b	11764 <setlocale@plt>
   1cf10:	mov	r2, #3
   1cf14:	mov	r1, #0
   1cf18:	b	1cf1c <__assert_fail@plt+0xb6c8>
   1cf1c:	push	{r1, r2, r3}
   1cf20:	strd	r4, [sp, #-20]!	; 0xffffffec
   1cf24:	strd	r6, [sp, #8]
   1cf28:	str	lr, [sp, #16]
   1cf2c:	sub	sp, sp, #8
   1cf30:	ldr	r1, [sp, #28]
   1cf34:	add	r2, sp, #32
   1cf38:	str	r2, [sp, #4]
   1cf3c:	cmp	r1, #0
   1cf40:	beq	1d01c <__assert_fail@plt+0xb7c8>
   1cf44:	movw	r3, #1030	; 0x406
   1cf48:	mov	r6, r0
   1cf4c:	cmp	r1, r3
   1cf50:	beq	1d02c <__assert_fail@plt+0xb7d8>
   1cf54:	cmp	r1, #11
   1cf58:	beq	1cfd4 <__assert_fail@plt+0xb780>
   1cf5c:	ble	1cfb4 <__assert_fail@plt+0xb760>
   1cf60:	movw	r2, #1031	; 0x407
   1cf64:	cmp	r1, r2
   1cf68:	bgt	1cff0 <__assert_fail@plt+0xb79c>
   1cf6c:	cmp	r1, r3
   1cf70:	bge	1cf80 <__assert_fail@plt+0xb72c>
   1cf74:	movw	r3, #1025	; 0x401
   1cf78:	cmp	r1, r3
   1cf7c:	beq	1cfd4 <__assert_fail@plt+0xb780>
   1cf80:	ldr	r3, [sp, #4]
   1cf84:	mov	r0, r6
   1cf88:	ldr	r2, [r3]
   1cf8c:	bl	1174c <fcntl64@plt>
   1cf90:	mov	r4, r0
   1cf94:	mov	r0, r4
   1cf98:	add	sp, sp, #8
   1cf9c:	ldrd	r4, [sp]
   1cfa0:	ldrd	r6, [sp, #8]
   1cfa4:	ldr	lr, [sp, #16]
   1cfa8:	add	sp, sp, #20
   1cfac:	add	sp, sp, #12
   1cfb0:	bx	lr
   1cfb4:	cmp	r1, #4
   1cfb8:	beq	1cf80 <__assert_fail@plt+0xb72c>
   1cfbc:	bgt	1cfe4 <__assert_fail@plt+0xb790>
   1cfc0:	cmp	r1, #2
   1cfc4:	beq	1cf80 <__assert_fail@plt+0xb72c>
   1cfc8:	bgt	1cfd4 <__assert_fail@plt+0xb780>
   1cfcc:	cmp	r1, #1
   1cfd0:	bne	1cf80 <__assert_fail@plt+0xb72c>
   1cfd4:	mov	r0, r6
   1cfd8:	bl	1174c <fcntl64@plt>
   1cfdc:	mov	r4, r0
   1cfe0:	b	1cf94 <__assert_fail@plt+0xb740>
   1cfe4:	cmp	r1, #9
   1cfe8:	bne	1cf80 <__assert_fail@plt+0xb72c>
   1cfec:	b	1cfd4 <__assert_fail@plt+0xb780>
   1cff0:	movw	r3, #1033	; 0x409
   1cff4:	cmp	r1, r3
   1cff8:	beq	1cf80 <__assert_fail@plt+0xb72c>
   1cffc:	blt	1cfd4 <__assert_fail@plt+0xb780>
   1d000:	movw	r3, #1034	; 0x40a
   1d004:	cmp	r1, r3
   1d008:	bne	1cf80 <__assert_fail@plt+0xb72c>
   1d00c:	mov	r0, r6
   1d010:	bl	1174c <fcntl64@plt>
   1d014:	mov	r4, r0
   1d018:	b	1cf94 <__assert_fail@plt+0xb740>
   1d01c:	ldr	r2, [sp, #32]
   1d020:	bl	1174c <fcntl64@plt>
   1d024:	mov	r4, r0
   1d028:	b	1cf94 <__assert_fail@plt+0xb740>
   1d02c:	movw	r5, #940	; 0x3ac
   1d030:	movt	r5, #3
   1d034:	ldr	r7, [r2]
   1d038:	add	r2, sp, #36	; 0x24
   1d03c:	ldr	r3, [r5]
   1d040:	str	r2, [sp, #4]
   1d044:	mov	r2, r7
   1d048:	cmp	r3, #0
   1d04c:	blt	1d068 <__assert_fail@plt+0xb814>
   1d050:	bl	1174c <fcntl64@plt>
   1d054:	subs	r4, r0, #0
   1d058:	blt	1d0d0 <__assert_fail@plt+0xb87c>
   1d05c:	mov	r3, #1
   1d060:	str	r3, [r5]
   1d064:	b	1cf94 <__assert_fail@plt+0xb740>
   1d068:	mov	r1, #0
   1d06c:	bl	1174c <fcntl64@plt>
   1d070:	subs	r4, r0, #0
   1d074:	blt	1cf94 <__assert_fail@plt+0xb740>
   1d078:	ldr	r3, [r5]
   1d07c:	cmn	r3, #1
   1d080:	bne	1cf94 <__assert_fail@plt+0xb740>
   1d084:	mov	r1, #1
   1d088:	mov	r0, r4
   1d08c:	bl	1174c <fcntl64@plt>
   1d090:	subs	r2, r0, #0
   1d094:	blt	1d0b0 <__assert_fail@plt+0xb85c>
   1d098:	orr	r2, r2, #1
   1d09c:	mov	r1, #2
   1d0a0:	mov	r0, r4
   1d0a4:	bl	1174c <fcntl64@plt>
   1d0a8:	cmn	r0, #1
   1d0ac:	bne	1cf94 <__assert_fail@plt+0xb740>
   1d0b0:	bl	116b0 <__errno_location@plt>
   1d0b4:	mov	r5, r0
   1d0b8:	mov	r0, r4
   1d0bc:	ldr	r6, [r5]
   1d0c0:	mvn	r4, #0
   1d0c4:	bl	11830 <close@plt>
   1d0c8:	str	r6, [r5]
   1d0cc:	b	1cf94 <__assert_fail@plt+0xb740>
   1d0d0:	bl	116b0 <__errno_location@plt>
   1d0d4:	ldr	r3, [r0]
   1d0d8:	cmp	r3, #22
   1d0dc:	bne	1d05c <__assert_fail@plt+0xb808>
   1d0e0:	mov	r2, r7
   1d0e4:	mov	r0, r6
   1d0e8:	mov	r1, #0
   1d0ec:	bl	1174c <fcntl64@plt>
   1d0f0:	subs	r4, r0, #0
   1d0f4:	mvnge	r3, #0
   1d0f8:	strge	r3, [r5]
   1d0fc:	bge	1d084 <__assert_fail@plt+0xb830>
   1d100:	b	1cf94 <__assert_fail@plt+0xb740>
   1d104:	cmp	r3, #0
   1d108:	cmpeq	r2, #0
   1d10c:	bne	1d130 <__assert_fail@plt+0xb8dc>
   1d110:	cmp	r1, #0
   1d114:	movlt	r1, #-2147483648	; 0x80000000
   1d118:	movlt	r0, #0
   1d11c:	blt	1d12c <__assert_fail@plt+0xb8d8>
   1d120:	cmpeq	r0, #0
   1d124:	mvnne	r1, #-2147483648	; 0x80000000
   1d128:	mvnne	r0, #0
   1d12c:	b	1d214 <__assert_fail@plt+0xb9c0>
   1d130:	sub	sp, sp, #8
   1d134:	push	{sp, lr}
   1d138:	cmp	r1, #0
   1d13c:	blt	1d15c <__assert_fail@plt+0xb908>
   1d140:	cmp	r3, #0
   1d144:	blt	1d190 <__assert_fail@plt+0xb93c>
   1d148:	bl	1d224 <__assert_fail@plt+0xb9d0>
   1d14c:	ldr	lr, [sp, #4]
   1d150:	add	sp, sp, #8
   1d154:	pop	{r2, r3}
   1d158:	bx	lr
   1d15c:	rsbs	r0, r0, #0
   1d160:	sbc	r1, r1, r1, lsl #1
   1d164:	cmp	r3, #0
   1d168:	blt	1d1b4 <__assert_fail@plt+0xb960>
   1d16c:	bl	1d224 <__assert_fail@plt+0xb9d0>
   1d170:	ldr	lr, [sp, #4]
   1d174:	add	sp, sp, #8
   1d178:	pop	{r2, r3}
   1d17c:	rsbs	r0, r0, #0
   1d180:	sbc	r1, r1, r1, lsl #1
   1d184:	rsbs	r2, r2, #0
   1d188:	sbc	r3, r3, r3, lsl #1
   1d18c:	bx	lr
   1d190:	rsbs	r2, r2, #0
   1d194:	sbc	r3, r3, r3, lsl #1
   1d198:	bl	1d224 <__assert_fail@plt+0xb9d0>
   1d19c:	ldr	lr, [sp, #4]
   1d1a0:	add	sp, sp, #8
   1d1a4:	pop	{r2, r3}
   1d1a8:	rsbs	r0, r0, #0
   1d1ac:	sbc	r1, r1, r1, lsl #1
   1d1b0:	bx	lr
   1d1b4:	rsbs	r2, r2, #0
   1d1b8:	sbc	r3, r3, r3, lsl #1
   1d1bc:	bl	1d224 <__assert_fail@plt+0xb9d0>
   1d1c0:	ldr	lr, [sp, #4]
   1d1c4:	add	sp, sp, #8
   1d1c8:	pop	{r2, r3}
   1d1cc:	rsbs	r2, r2, #0
   1d1d0:	sbc	r3, r3, r3, lsl #1
   1d1d4:	bx	lr
   1d1d8:	cmp	r3, #0
   1d1dc:	cmpeq	r2, #0
   1d1e0:	bne	1d1f8 <__assert_fail@plt+0xb9a4>
   1d1e4:	cmp	r1, #0
   1d1e8:	cmpeq	r0, #0
   1d1ec:	mvnne	r1, #0
   1d1f0:	mvnne	r0, #0
   1d1f4:	b	1d214 <__assert_fail@plt+0xb9c0>
   1d1f8:	sub	sp, sp, #8
   1d1fc:	push	{sp, lr}
   1d200:	bl	1d224 <__assert_fail@plt+0xb9d0>
   1d204:	ldr	lr, [sp, #4]
   1d208:	add	sp, sp, #8
   1d20c:	pop	{r2, r3}
   1d210:	bx	lr
   1d214:	push	{r1, lr}
   1d218:	mov	r0, #8
   1d21c:	bl	11434 <raise@plt>
   1d220:	pop	{r1, pc}
   1d224:	cmp	r1, r3
   1d228:	cmpeq	r0, r2
   1d22c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d230:	mov	r4, r0
   1d234:	movcc	r0, #0
   1d238:	mov	r5, r1
   1d23c:	ldr	lr, [sp, #36]	; 0x24
   1d240:	movcc	r1, r0
   1d244:	bcc	1d340 <__assert_fail@plt+0xbaec>
   1d248:	cmp	r3, #0
   1d24c:	clzeq	ip, r2
   1d250:	clzne	ip, r3
   1d254:	addeq	ip, ip, #32
   1d258:	cmp	r5, #0
   1d25c:	clzeq	r1, r4
   1d260:	addeq	r1, r1, #32
   1d264:	clzne	r1, r5
   1d268:	sub	ip, ip, r1
   1d26c:	sub	sl, ip, #32
   1d270:	lsl	r9, r3, ip
   1d274:	rsb	fp, ip, #32
   1d278:	orr	r9, r9, r2, lsl sl
   1d27c:	orr	r9, r9, r2, lsr fp
   1d280:	lsl	r8, r2, ip
   1d284:	cmp	r5, r9
   1d288:	cmpeq	r4, r8
   1d28c:	movcc	r0, #0
   1d290:	movcc	r1, r0
   1d294:	bcc	1d2b0 <__assert_fail@plt+0xba5c>
   1d298:	mov	r0, #1
   1d29c:	subs	r4, r4, r8
   1d2a0:	lsl	r1, r0, sl
   1d2a4:	orr	r1, r1, r0, lsr fp
   1d2a8:	lsl	r0, r0, ip
   1d2ac:	sbc	r5, r5, r9
   1d2b0:	cmp	ip, #0
   1d2b4:	beq	1d340 <__assert_fail@plt+0xbaec>
   1d2b8:	lsr	r6, r8, #1
   1d2bc:	orr	r6, r6, r9, lsl #31
   1d2c0:	lsr	r7, r9, #1
   1d2c4:	mov	r2, ip
   1d2c8:	b	1d2ec <__assert_fail@plt+0xba98>
   1d2cc:	subs	r3, r4, r6
   1d2d0:	sbc	r8, r5, r7
   1d2d4:	adds	r3, r3, r3
   1d2d8:	adc	r8, r8, r8
   1d2dc:	adds	r4, r3, #1
   1d2e0:	adc	r5, r8, #0
   1d2e4:	subs	r2, r2, #1
   1d2e8:	beq	1d308 <__assert_fail@plt+0xbab4>
   1d2ec:	cmp	r5, r7
   1d2f0:	cmpeq	r4, r6
   1d2f4:	bcs	1d2cc <__assert_fail@plt+0xba78>
   1d2f8:	adds	r4, r4, r4
   1d2fc:	adc	r5, r5, r5
   1d300:	subs	r2, r2, #1
   1d304:	bne	1d2ec <__assert_fail@plt+0xba98>
   1d308:	lsr	r3, r4, ip
   1d30c:	orr	r3, r3, r5, lsl fp
   1d310:	lsr	r2, r5, ip
   1d314:	orr	r3, r3, r5, lsr sl
   1d318:	adds	r0, r0, r4
   1d31c:	mov	r4, r3
   1d320:	lsl	r3, r2, ip
   1d324:	orr	r3, r3, r4, lsl sl
   1d328:	lsl	ip, r4, ip
   1d32c:	orr	r3, r3, r4, lsr fp
   1d330:	adc	r1, r1, r5
   1d334:	subs	r0, r0, ip
   1d338:	mov	r5, r2
   1d33c:	sbc	r1, r1, r3
   1d340:	cmp	lr, #0
   1d344:	strdne	r4, [lr]
   1d348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d34c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d350:	mov	r7, r0
   1d354:	ldr	r6, [pc, #72]	; 1d3a4 <__assert_fail@plt+0xbb50>
   1d358:	ldr	r5, [pc, #72]	; 1d3a8 <__assert_fail@plt+0xbb54>
   1d35c:	add	r6, pc, r6
   1d360:	add	r5, pc, r5
   1d364:	sub	r6, r6, r5
   1d368:	mov	r8, r1
   1d36c:	mov	r9, r2
   1d370:	bl	113fc <calloc@plt-0x20>
   1d374:	asrs	r6, r6, #2
   1d378:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d37c:	mov	r4, #0
   1d380:	add	r4, r4, #1
   1d384:	ldr	r3, [r5], #4
   1d388:	mov	r2, r9
   1d38c:	mov	r1, r8
   1d390:	mov	r0, r7
   1d394:	blx	r3
   1d398:	cmp	r6, r4
   1d39c:	bne	1d380 <__assert_fail@plt+0xbb2c>
   1d3a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d3a4:	andeq	r2, r1, r8, lsr #23
   1d3a8:	andeq	r2, r1, r0, lsr #23
   1d3ac:	bx	lr
   1d3b0:	ldr	r3, [pc, #12]	; 1d3c4 <__assert_fail@plt+0xbb70>
   1d3b4:	mov	r1, #0
   1d3b8:	add	r3, pc, r3
   1d3bc:	ldr	r2, [r3]
   1d3c0:	b	116c8 <__cxa_atexit@plt>
   1d3c4:	andeq	r2, r1, r0, asr #27

Disassembly of section .fini:

0001d3c8 <.fini>:
   1d3c8:	push	{r3, lr}
   1d3cc:	pop	{r3, pc}
