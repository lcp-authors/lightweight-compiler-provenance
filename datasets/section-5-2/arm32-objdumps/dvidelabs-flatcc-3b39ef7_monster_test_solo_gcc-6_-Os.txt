
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_solo/monster_test_solo:     file format elf32-littlearm


Disassembly of section .init:

000122b4 <.init>:
   122b4:	push	{r3, lr}
   122b8:	bl	124b8 <_start@@Base+0x3c>
   122bc:	pop	{r3, pc}

Disassembly of section .plt:

000122c0 <raise@plt-0x14>:
   122c0:	push	{lr}		; (str lr, [sp, #-4]!)
   122c4:	ldr	lr, [pc, #4]	; 122d0 <raise@plt-0x4>
   122c8:	add	lr, pc, lr
   122cc:	ldr	pc, [lr, #8]!
   122d0:	andeq	r6, r1, r0, lsr sp

000122d4 <raise@plt>:
   122d4:	add	ip, pc, #0, 12
   122d8:	add	ip, ip, #90112	; 0x16000
   122dc:	ldr	pc, [ip, #3376]!	; 0xd30

000122e0 <free@plt>:
   122e0:	add	ip, pc, #0, 12
   122e4:	add	ip, ip, #90112	; 0x16000
   122e8:	ldr	pc, [ip, #3368]!	; 0xd28

000122ec <memcpy@plt>:
   122ec:	add	ip, pc, #0, 12
   122f0:	add	ip, ip, #90112	; 0x16000
   122f4:	ldr	pc, [ip, #3360]!	; 0xd20

000122f8 <memcmp@plt>:
   122f8:	add	ip, pc, #0, 12
   122fc:	add	ip, ip, #90112	; 0x16000
   12300:	ldr	pc, [ip, #3352]!	; 0xd18

00012304 <realloc@plt>:
   12304:	add	ip, pc, #0, 12
   12308:	add	ip, ip, #90112	; 0x16000
   1230c:	ldr	pc, [ip, #3344]!	; 0xd10

00012310 <malloc@plt>:
   12310:	add	ip, pc, #0, 12
   12314:	add	ip, ip, #90112	; 0x16000
   12318:	ldr	pc, [ip, #3336]!	; 0xd08

0001231c <__libc_start_main@plt>:
   1231c:	add	ip, pc, #0, 12
   12320:	add	ip, ip, #90112	; 0x16000
   12324:	ldr	pc, [ip, #3328]!	; 0xd00

00012328 <__gmon_start__@plt>:
   12328:	add	ip, pc, #0, 12
   1232c:	add	ip, ip, #90112	; 0x16000
   12330:	ldr	pc, [ip, #3320]!	; 0xcf8

00012334 <strlen@plt>:
   12334:	add	ip, pc, #0, 12
   12338:	add	ip, ip, #90112	; 0x16000
   1233c:	ldr	pc, [ip, #3312]!	; 0xcf0

00012340 <posix_memalign@plt>:
   12340:	add	ip, pc, #0, 12
   12344:	add	ip, ip, #90112	; 0x16000
   12348:	ldr	pc, [ip, #3304]!	; 0xce8

0001234c <memset@plt>:
   1234c:	add	ip, pc, #0, 12
   12350:	add	ip, ip, #90112	; 0x16000
   12354:	ldr	pc, [ip, #3296]!	; 0xce0

00012358 <strncpy@plt>:
   12358:	add	ip, pc, #0, 12
   1235c:	add	ip, ip, #90112	; 0x16000
   12360:	ldr	pc, [ip, #3288]!	; 0xcd8

00012364 <memchr@plt>:
   12364:	add	ip, pc, #0, 12
   12368:	add	ip, ip, #90112	; 0x16000
   1236c:	ldr	pc, [ip, #3280]!	; 0xcd0

00012370 <abort@plt>:
   12370:	add	ip, pc, #0, 12
   12374:	add	ip, ip, #90112	; 0x16000
   12378:	ldr	pc, [ip, #3272]!	; 0xcc8

0001237c <__assert_fail@plt>:
   1237c:	add	ip, pc, #0, 12
   12380:	add	ip, ip, #90112	; 0x16000
   12384:	ldr	pc, [ip, #3264]!	; 0xcc0

Disassembly of section .text:

00012388 <main@@Base>:
   12388:	push	{r4, lr}
   1238c:	sub	sp, sp, #240	; 0xf0
   12390:	add	r0, sp, #8
   12394:	bl	136f8 <flatcc_builder_init@@Base>
   12398:	mov	r3, #0
   1239c:	mov	r2, r3
   123a0:	ldr	r1, [pc, #180]	; 1245c <main@@Base+0xd4>
   123a4:	add	r0, sp, #8
   123a8:	bl	13dfc <flatcc_builder_start_buffer@@Base>
   123ac:	cmp	r0, #0
   123b0:	bne	123c0 <main@@Base+0x38>
   123b4:	mov	r1, #36	; 0x24
   123b8:	add	r0, sp, #8
   123bc:	bl	14600 <flatcc_builder_start_table@@Base>
   123c0:	ldr	r1, [pc, #152]	; 12460 <main@@Base+0xd8>
   123c4:	add	r0, sp, #8
   123c8:	bl	154c8 <flatcc_builder_create_string_str@@Base>
   123cc:	subs	r4, r0, #0
   123d0:	beq	123e8 <main@@Base+0x60>
   123d4:	mov	r1, #3
   123d8:	add	r0, sp, #8
   123dc:	bl	15774 <flatcc_builder_table_add_offset@@Base>
   123e0:	cmp	r0, #0
   123e4:	strne	r4, [r0]
   123e8:	mov	r2, #1
   123ec:	ldr	r1, [pc, #112]	; 12464 <main@@Base+0xdc>
   123f0:	add	r0, sp, #8
   123f4:	bl	14bbc <flatcc_builder_check_required@@Base>
   123f8:	cmp	r0, #0
   123fc:	bne	12414 <main@@Base+0x8c>
   12400:	ldr	r3, [pc, #96]	; 12468 <main@@Base+0xe0>
   12404:	ldr	r2, [pc, #96]	; 1246c <main@@Base+0xe4>
   12408:	ldr	r1, [pc, #96]	; 12470 <main@@Base+0xe8>
   1240c:	ldr	r0, [pc, #96]	; 12474 <main@@Base+0xec>
   12410:	bl	1237c <__assert_fail@plt>
   12414:	add	r0, sp, #8
   12418:	bl	14c3c <flatcc_builder_end_table@@Base>
   1241c:	mov	r1, r0
   12420:	add	r0, sp, #8
   12424:	bl	13e9c <flatcc_builder_end_buffer@@Base>
   12428:	add	r1, sp, #4
   1242c:	add	r0, sp, #8
   12430:	bl	15b74 <flatcc_builder_get_direct_buffer@@Base>
   12434:	ldr	r3, [pc, #60]	; 12478 <main@@Base+0xf0>
   12438:	ldr	r2, [pc, #28]	; 1245c <main@@Base+0xd4>
   1243c:	ldr	r1, [sp, #4]
   12440:	bl	16a28 <flatcc_verify_table_as_root@@Base>
   12444:	mov	r4, r0
   12448:	add	r0, sp, #8
   1244c:	bl	13884 <flatcc_builder_clear@@Base>
   12450:	mov	r0, r4
   12454:	add	sp, sp, #240	; 0xf0
   12458:	pop	{r4, pc}
   1245c:	andeq	r7, r1, fp, ror #3
   12460:	strdeq	r7, [r1], -r0
   12464:	andeq	r7, r1, ip, asr #3
   12468:	ldrdeq	r7, [r1], -r0
   1246c:	andeq	r0, r0, lr, asr r9
   12470:	strdeq	r7, [r1], -sl
   12474:	andeq	r7, r1, sl, asr r2
   12478:	andeq	r2, r1, r4, lsl #16

0001247c <_start@@Base>:
   1247c:	mov	fp, #0
   12480:	mov	lr, #0
   12484:	pop	{r1}		; (ldr r1, [sp], #4)
   12488:	mov	r2, sp
   1248c:	push	{r2}		; (str r2, [sp, #-4]!)
   12490:	push	{r0}		; (str r0, [sp, #-4]!)
   12494:	ldr	ip, [pc, #16]	; 124ac <_start@@Base+0x30>
   12498:	push	{ip}		; (str ip, [sp, #-4]!)
   1249c:	ldr	r0, [pc, #12]	; 124b0 <_start@@Base+0x34>
   124a0:	ldr	r3, [pc, #12]	; 124b4 <_start@@Base+0x38>
   124a4:	bl	1231c <__libc_start_main@plt>
   124a8:	bl	12370 <abort@plt>
   124ac:			; <UNDEFINED> instruction: 0x000171bc
   124b0:	andeq	r2, r1, r8, lsl #7
   124b4:	andeq	r7, r1, ip, asr r1
   124b8:	ldr	r3, [pc, #20]	; 124d4 <_start@@Base+0x58>
   124bc:	ldr	r2, [pc, #20]	; 124d8 <_start@@Base+0x5c>
   124c0:	add	r3, pc, r3
   124c4:	ldr	r2, [r3, r2]
   124c8:	cmp	r2, #0
   124cc:	bxeq	lr
   124d0:	b	12328 <__gmon_start__@plt>
   124d4:	andeq	r6, r1, r8, lsr fp
   124d8:	andeq	r0, r0, r8, asr #32
   124dc:	ldr	r3, [pc, #28]	; 12500 <_start@@Base+0x84>
   124e0:	ldr	r0, [pc, #28]	; 12504 <_start@@Base+0x88>
   124e4:	sub	r3, r3, r0
   124e8:	cmp	r3, #6
   124ec:	bxls	lr
   124f0:	ldr	r3, [pc, #16]	; 12508 <_start@@Base+0x8c>
   124f4:	cmp	r3, #0
   124f8:	bxeq	lr
   124fc:	bx	r3
   12500:	andeq	r9, r2, r7, asr r0
   12504:	andeq	r9, r2, r4, asr r0
   12508:	andeq	r0, r0, r0
   1250c:	ldr	r1, [pc, #36]	; 12538 <_start@@Base+0xbc>
   12510:	ldr	r0, [pc, #36]	; 1253c <_start@@Base+0xc0>
   12514:	sub	r1, r1, r0
   12518:	asr	r1, r1, #2
   1251c:	add	r1, r1, r1, lsr #31
   12520:	asrs	r1, r1, #1
   12524:	bxeq	lr
   12528:	ldr	r3, [pc, #16]	; 12540 <_start@@Base+0xc4>
   1252c:	cmp	r3, #0
   12530:	bxeq	lr
   12534:	bx	r3
   12538:	andeq	r9, r2, r4, asr r0
   1253c:	andeq	r9, r2, r4, asr r0
   12540:	andeq	r0, r0, r0
   12544:	push	{r4, lr}
   12548:	ldr	r4, [pc, #24]	; 12568 <_start@@Base+0xec>
   1254c:	ldrb	r3, [r4]
   12550:	cmp	r3, #0
   12554:	popne	{r4, pc}
   12558:	bl	124dc <_start@@Base+0x60>
   1255c:	mov	r3, #1
   12560:	strb	r3, [r4]
   12564:	pop	{r4, pc}
   12568:	andeq	r9, r2, r4, asr r0
   1256c:	ldr	r0, [pc, #40]	; 1259c <_start@@Base+0x120>
   12570:	ldr	r3, [r0]
   12574:	cmp	r3, #0
   12578:	bne	12580 <_start@@Base+0x104>
   1257c:	b	1250c <_start@@Base+0x90>
   12580:	ldr	r3, [pc, #24]	; 125a0 <_start@@Base+0x124>
   12584:	cmp	r3, #0
   12588:	beq	1257c <_start@@Base+0x100>
   1258c:	push	{r4, lr}
   12590:	blx	r3
   12594:	pop	{r4, lr}
   12598:	b	1250c <_start@@Base+0x90>
   1259c:	andeq	r8, r2, r4, lsl pc
   125a0:	andeq	r0, r0, r0
   125a4:	mov	r0, #0
   125a8:	bx	lr
   125ac:	mov	r3, #4
   125b0:	mov	r2, r3
   125b4:	mov	r1, #0
   125b8:	b	164d4 <flatcc_verify_field@@Base>
   125bc:	mov	r3, #8
   125c0:	push	{r4, lr}
   125c4:	mov	r2, r3
   125c8:	mov	r1, #0
   125cc:	mov	r4, r0
   125d0:	bl	164d4 <flatcc_verify_field@@Base>
   125d4:	cmp	r0, #0
   125d8:	popne	{r4, pc}
   125dc:	mov	r3, #4
   125e0:	mov	r0, r4
   125e4:	mov	r2, r3
   125e8:	mov	r1, #1
   125ec:	pop	{r4, lr}
   125f0:	b	164d4 <flatcc_verify_field@@Base>
   125f4:	mov	r3, #1
   125f8:	push	{r4, lr}
   125fc:	mov	r2, r3
   12600:	mov	r1, #0
   12604:	mov	r4, r0
   12608:	bl	164d4 <flatcc_verify_field@@Base>
   1260c:	cmp	r0, #0
   12610:	popne	{r4, pc}
   12614:	mov	r3, #1
   12618:	mov	r2, r3
   1261c:	mov	r1, r3
   12620:	mov	r0, r4
   12624:	bl	164d4 <flatcc_verify_field@@Base>
   12628:	cmp	r0, #0
   1262c:	popne	{r4, pc}
   12630:	mov	r3, #1
   12634:	mov	r2, r3
   12638:	mov	r1, #2
   1263c:	mov	r0, r4
   12640:	bl	164d4 <flatcc_verify_field@@Base>
   12644:	cmp	r0, #0
   12648:	popne	{r4, pc}
   1264c:	mov	r3, #1
   12650:	mov	r0, r4
   12654:	mov	r2, r3
   12658:	mov	r1, #3
   1265c:	pop	{r4, lr}
   12660:	b	164d4 <flatcc_verify_field@@Base>
   12664:	mov	r2, #0
   12668:	push	{r4, lr}
   1266c:	mov	r1, r2
   12670:	mov	r4, r0
   12674:	bl	16534 <flatcc_verify_string_field@@Base>
   12678:	cmp	r0, #0
   1267c:	popne	{r4, pc}
   12680:	mov	r3, #8
   12684:	mov	r2, r3
   12688:	mov	r1, #1
   1268c:	mov	r0, r4
   12690:	bl	164d4 <flatcc_verify_field@@Base>
   12694:	cmp	r0, #0
   12698:	popne	{r4, pc}
   1269c:	mov	r3, #2
   126a0:	mov	r0, r4
   126a4:	mov	r2, r3
   126a8:	mov	r1, r3
   126ac:	pop	{r4, lr}
   126b0:	b	164d4 <flatcc_verify_field@@Base>
   126b4:	mov	r2, #0
   126b8:	push	{r4, lr}
   126bc:	mov	r1, r2
   126c0:	mov	r4, r0
   126c4:	bl	16534 <flatcc_verify_string_field@@Base>
   126c8:	subs	r2, r0, #0
   126cc:	bne	1279c <_start@@Base+0x320>
   126d0:	mov	r3, #4
   126d4:	mov	r2, r3
   126d8:	mov	r1, #1
   126dc:	mov	r0, r4
   126e0:	bl	164d4 <flatcc_verify_field@@Base>
   126e4:	subs	r2, r0, #0
   126e8:	bne	1279c <_start@@Base+0x320>
   126ec:	mov	r1, #2
   126f0:	mov	r0, r4
   126f4:	bl	16534 <flatcc_verify_string_field@@Base>
   126f8:	subs	r2, r0, #0
   126fc:	bne	1279c <_start@@Base+0x320>
   12700:	mov	r3, #8
   12704:	mov	r2, r3
   12708:	mov	r1, #3
   1270c:	mov	r0, r4
   12710:	bl	164d4 <flatcc_verify_field@@Base>
   12714:	subs	r2, r0, #0
   12718:	bne	1279c <_start@@Base+0x320>
   1271c:	mov	r1, #4
   12720:	mov	r0, r4
   12724:	bl	16534 <flatcc_verify_string_field@@Base>
   12728:	subs	r2, r0, #0
   1272c:	bne	1279c <_start@@Base+0x320>
   12730:	mov	r3, #8
   12734:	mov	r2, r3
   12738:	mov	r1, #5
   1273c:	mov	r0, r4
   12740:	bl	164d4 <flatcc_verify_field@@Base>
   12744:	subs	r2, r0, #0
   12748:	bne	1279c <_start@@Base+0x320>
   1274c:	mov	r3, #4
   12750:	mov	r2, r3
   12754:	mov	r1, #6
   12758:	mov	r0, r4
   1275c:	bl	164d4 <flatcc_verify_field@@Base>
   12760:	subs	r2, r0, #0
   12764:	bne	1279c <_start@@Base+0x320>
   12768:	mov	r3, #8
   1276c:	mov	r2, r3
   12770:	mov	r1, #7
   12774:	mov	r0, r4
   12778:	bl	164d4 <flatcc_verify_field@@Base>
   1277c:	subs	r2, r0, #0
   12780:	bne	1279c <_start@@Base+0x320>
   12784:	mov	r3, #4
   12788:	mov	r0, r4
   1278c:	mov	r2, r3
   12790:	mov	r1, #8
   12794:	pop	{r4, lr}
   12798:	b	164d4 <flatcc_verify_field@@Base>
   1279c:	mov	r0, r2
   127a0:	pop	{r4, pc}
   127a4:	mov	r2, #0
   127a8:	push	{r4, lr}
   127ac:	mov	r1, r2
   127b0:	ldr	r3, [pc, #64]	; 127f8 <_start@@Base+0x37c>
   127b4:	mov	r4, r0
   127b8:	bl	16678 <flatcc_verify_table_field@@Base>
   127bc:	subs	r2, r0, #0
   127c0:	bne	127f0 <_start@@Base+0x374>
   127c4:	ldr	r3, [pc, #48]	; 127fc <_start@@Base+0x380>
   127c8:	mov	r1, #1
   127cc:	mov	r0, r4
   127d0:	bl	16678 <flatcc_verify_table_field@@Base>
   127d4:	subs	r2, r0, #0
   127d8:	bne	127f0 <_start@@Base+0x374>
   127dc:	mov	r0, r4
   127e0:	ldr	r3, [pc, #24]	; 12800 <_start@@Base+0x384>
   127e4:	mov	r1, #2
   127e8:	pop	{r4, lr}
   127ec:	b	16678 <flatcc_verify_table_field@@Base>
   127f0:	mov	r0, r2
   127f4:	pop	{r4, pc}
   127f8:			; <UNDEFINED> instruction: 0x000126b4
   127fc:	andeq	r2, r1, r4, lsl lr
   12800:			; <UNDEFINED> instruction: 0x000125bc
   12804:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   12808:	mov	r2, #32
   1280c:	mov	r3, #16
   12810:	mov	r1, #0
   12814:	mov	r4, r0
   12818:	bl	164d4 <flatcc_verify_field@@Base>
   1281c:	subs	r2, r0, #0
   12820:	bne	12bd4 <_start@@Base+0x758>
   12824:	mov	r3, #2
   12828:	mov	r2, r3
   1282c:	mov	r1, r3
   12830:	mov	r0, r4
   12834:	bl	164d4 <flatcc_verify_field@@Base>
   12838:	subs	r2, r0, #0
   1283c:	bne	12bd4 <_start@@Base+0x758>
   12840:	mov	r3, #2
   12844:	mov	r2, r3
   12848:	mov	r1, #1
   1284c:	mov	r0, r4
   12850:	bl	164d4 <flatcc_verify_field@@Base>
   12854:	subs	r2, r0, #0
   12858:	bne	12bd4 <_start@@Base+0x758>
   1285c:	mov	r2, #1
   12860:	mov	r1, #3
   12864:	mov	r0, r4
   12868:	bl	16534 <flatcc_verify_string_field@@Base>
   1286c:	subs	r2, r0, #0
   12870:	bne	12bd4 <_start@@Base+0x758>
   12874:	mov	r3, #1
   12878:	mov	r2, r3
   1287c:	mov	r1, #6
   12880:	mov	r0, r4
   12884:	bl	164d4 <flatcc_verify_field@@Base>
   12888:	subs	r2, r0, #0
   1288c:	bne	12bd4 <_start@@Base+0x758>
   12890:	mov	r5, #1
   12894:	mvn	r6, #0
   12898:	mov	r3, r5
   1289c:	stm	sp, {r5, r6}
   128a0:	mov	r1, #5
   128a4:	mov	r0, r4
   128a8:	bl	16570 <flatcc_verify_vector_field@@Base>
   128ac:	subs	r2, r0, #0
   128b0:	bne	12bd4 <_start@@Base+0x758>
   128b4:	ldr	r3, [pc, #804]	; 12be0 <_start@@Base+0x764>
   128b8:	mov	r1, #11
   128bc:	mov	r0, r4
   128c0:	bl	166c8 <flatcc_verify_table_vector_field@@Base>
   128c4:	subs	r2, r0, #0
   128c8:	bne	12bd4 <_start@@Base+0x758>
   128cc:	mov	r1, #10
   128d0:	mov	r0, r4
   128d4:	bl	165c8 <flatcc_verify_string_vector_field@@Base>
   128d8:	subs	r2, r0, #0
   128dc:	bne	12bd4 <_start@@Base+0x758>
   128e0:	mov	r1, #28
   128e4:	mov	r0, r4
   128e8:	bl	165c8 <flatcc_verify_string_vector_field@@Base>
   128ec:	subs	r2, r0, #0
   128f0:	bne	12bd4 <_start@@Base+0x758>
   128f4:	stm	sp, {r5, r6}
   128f8:	mov	r3, r5
   128fc:	mov	r1, #24
   12900:	mov	r0, r4
   12904:	bl	16570 <flatcc_verify_vector_field@@Base>
   12908:	subs	r2, r0, #0
   1290c:	bne	12bd4 <_start@@Base+0x758>
   12910:	mvn	r3, #-536870912	; 0xe0000000
   12914:	mov	r5, #4
   12918:	str	r3, [sp, #4]
   1291c:	mov	r2, #0
   12920:	str	r5, [sp]
   12924:	mov	r3, #8
   12928:	mov	r1, #29
   1292c:	mov	r0, r4
   12930:	bl	16570 <flatcc_verify_vector_field@@Base>
   12934:	subs	r2, r0, #0
   12938:	bne	12bd4 <_start@@Base+0x758>
   1293c:	ldr	r6, [pc, #668]	; 12be0 <_start@@Base+0x764>
   12940:	mov	r1, #12
   12944:	mov	r3, r6
   12948:	mov	r0, r4
   1294c:	bl	16678 <flatcc_verify_table_field@@Base>
   12950:	subs	r2, r0, #0
   12954:	bne	12bd4 <_start@@Base+0x758>
   12958:	ldr	r3, [pc, #644]	; 12be4 <_start@@Base+0x768>
   1295c:	mov	r1, #8
   12960:	mov	r0, r4
   12964:	bl	16c38 <flatcc_verify_union_field@@Base>
   12968:	subs	r2, r0, #0
   1296c:	bne	12bd4 <_start@@Base+0x758>
   12970:	mov	r7, #2
   12974:	mvn	r8, #-1073741824	; 0xc0000000
   12978:	mov	r3, r5
   1297c:	stm	sp, {r7, r8}
   12980:	mov	r1, #9
   12984:	mov	r0, r4
   12988:	bl	16570 <flatcc_verify_vector_field@@Base>
   1298c:	subs	r2, r0, #0
   12990:	bne	12bd4 <_start@@Base+0x758>
   12994:	stm	sp, {r7, r8}
   12998:	mov	r3, r5
   1299c:	mov	r1, #31
   129a0:	mov	r0, r4
   129a4:	bl	16570 <flatcc_verify_vector_field@@Base>
   129a8:	subs	r2, r0, #0
   129ac:	bne	12bd4 <_start@@Base+0x758>
   129b0:	str	r6, [sp, #4]
   129b4:	mov	r6, #1
   129b8:	mov	r3, r2
   129bc:	str	r6, [sp]
   129c0:	mov	r1, #13
   129c4:	mov	r0, r4
   129c8:	bl	16b5c <flatcc_verify_table_as_nested_root@@Base>
   129cc:	subs	r2, r0, #0
   129d0:	bne	12bd4 <_start@@Base+0x758>
   129d4:	ldr	r3, [pc, #524]	; 12be8 <_start@@Base+0x76c>
   129d8:	mov	r1, #14
   129dc:	mov	r0, r4
   129e0:	bl	16678 <flatcc_verify_table_field@@Base>
   129e4:	subs	r2, r0, #0
   129e8:	bne	12bd4 <_start@@Base+0x758>
   129ec:	mov	r2, r6
   129f0:	mov	r3, r6
   129f4:	mov	r1, #15
   129f8:	mov	r0, r4
   129fc:	bl	164d4 <flatcc_verify_field@@Base>
   12a00:	subs	r2, r0, #0
   12a04:	bne	12bd4 <_start@@Base+0x758>
   12a08:	mov	r2, r5
   12a0c:	mov	r3, r5
   12a10:	mov	r1, #16
   12a14:	mov	r0, r4
   12a18:	bl	164d4 <flatcc_verify_field@@Base>
   12a1c:	subs	r2, r0, #0
   12a20:	bne	12bd4 <_start@@Base+0x758>
   12a24:	mov	r2, r5
   12a28:	mov	r3, r5
   12a2c:	mov	r1, #17
   12a30:	mov	r0, r4
   12a34:	bl	164d4 <flatcc_verify_field@@Base>
   12a38:	subs	r2, r0, #0
   12a3c:	bne	12bd4 <_start@@Base+0x758>
   12a40:	mov	r3, #8
   12a44:	mov	r2, r3
   12a48:	mov	r1, #18
   12a4c:	mov	r0, r4
   12a50:	bl	164d4 <flatcc_verify_field@@Base>
   12a54:	subs	r2, r0, #0
   12a58:	bne	12bd4 <_start@@Base+0x758>
   12a5c:	mov	r3, #8
   12a60:	mov	r2, r3
   12a64:	mov	r1, #19
   12a68:	mov	r0, r4
   12a6c:	bl	164d4 <flatcc_verify_field@@Base>
   12a70:	subs	r2, r0, #0
   12a74:	bne	12bd4 <_start@@Base+0x758>
   12a78:	mov	r2, r5
   12a7c:	mov	r3, r5
   12a80:	mov	r1, #20
   12a84:	mov	r0, r4
   12a88:	bl	164d4 <flatcc_verify_field@@Base>
   12a8c:	subs	r2, r0, #0
   12a90:	bne	12bd4 <_start@@Base+0x758>
   12a94:	mov	r2, r5
   12a98:	mov	r3, r5
   12a9c:	mov	r1, #21
   12aa0:	mov	r0, r4
   12aa4:	bl	164d4 <flatcc_verify_field@@Base>
   12aa8:	subs	r2, r0, #0
   12aac:	bne	12bd4 <_start@@Base+0x758>
   12ab0:	mov	r3, #8
   12ab4:	mov	r2, r3
   12ab8:	mov	r1, #22
   12abc:	mov	r0, r4
   12ac0:	bl	164d4 <flatcc_verify_field@@Base>
   12ac4:	subs	r2, r0, #0
   12ac8:	bne	12bd4 <_start@@Base+0x758>
   12acc:	mov	r3, #8
   12ad0:	mov	r2, r3
   12ad4:	mov	r1, #23
   12ad8:	mov	r0, r4
   12adc:	bl	164d4 <flatcc_verify_field@@Base>
   12ae0:	subs	r2, r0, #0
   12ae4:	bne	12bd4 <_start@@Base+0x758>
   12ae8:	mov	r2, r5
   12aec:	mov	r3, r5
   12af0:	mov	r1, #25
   12af4:	mov	r0, r4
   12af8:	bl	164d4 <flatcc_verify_field@@Base>
   12afc:	subs	r2, r0, #0
   12b00:	bne	12bd4 <_start@@Base+0x758>
   12b04:	mov	r2, r5
   12b08:	mov	r3, r5
   12b0c:	mov	r1, #26
   12b10:	mov	r0, r4
   12b14:	bl	164d4 <flatcc_verify_field@@Base>
   12b18:	subs	r2, r0, #0
   12b1c:	bne	12bd4 <_start@@Base+0x758>
   12b20:	mov	r2, r5
   12b24:	mov	r3, r5
   12b28:	mov	r1, #27
   12b2c:	mov	r0, r4
   12b30:	bl	164d4 <flatcc_verify_field@@Base>
   12b34:	subs	r2, r0, #0
   12b38:	bne	12bd4 <_start@@Base+0x758>
   12b3c:	mvn	r3, #0
   12b40:	str	r3, [sp, #4]
   12b44:	str	r6, [sp]
   12b48:	mov	r3, r6
   12b4c:	mov	r1, #30
   12b50:	mov	r0, r4
   12b54:	bl	16570 <flatcc_verify_vector_field@@Base>
   12b58:	subs	r2, r0, #0
   12b5c:	bne	12bd4 <_start@@Base+0x758>
   12b60:	mov	r5, #8
   12b64:	mvn	r6, #-536870912	; 0xe0000000
   12b68:	mov	r2, #0
   12b6c:	stm	sp, {r5, r6}
   12b70:	mov	r3, r5
   12b74:	mov	r1, #32
   12b78:	mov	r0, r4
   12b7c:	bl	16570 <flatcc_verify_vector_field@@Base>
   12b80:	subs	r2, r0, #0
   12b84:	bne	12bd4 <_start@@Base+0x758>
   12b88:	stm	sp, {r5, r6}
   12b8c:	mov	r3, r5
   12b90:	mov	r1, #33	; 0x21
   12b94:	mov	r0, r4
   12b98:	bl	16570 <flatcc_verify_vector_field@@Base>
   12b9c:	subs	r2, r0, #0
   12ba0:	bne	12bd4 <_start@@Base+0x758>
   12ba4:	ldr	r3, [pc, #64]	; 12bec <_start@@Base+0x770>
   12ba8:	mov	r1, #34	; 0x22
   12bac:	mov	r0, r4
   12bb0:	bl	16678 <flatcc_verify_table_field@@Base>
   12bb4:	subs	r2, r0, #0
   12bb8:	bne	12bd4 <_start@@Base+0x758>
   12bbc:	ldr	r3, [pc, #44]	; 12bf0 <_start@@Base+0x774>
   12bc0:	mov	r1, #35	; 0x23
   12bc4:	mov	r0, r4
   12bc8:	add	sp, sp, #8
   12bcc:	pop	{r4, r5, r6, r7, r8, lr}
   12bd0:	b	16678 <flatcc_verify_table_field@@Base>
   12bd4:	mov	r0, r2
   12bd8:	add	sp, sp, #8
   12bdc:	pop	{r4, r5, r6, r7, r8, pc}
   12be0:	andeq	r2, r1, r4, lsl #16
   12be4:	andeq	r2, r1, ip, ror #24
   12be8:	andeq	r2, r1, r4, ror #12
   12bec:	andeq	r2, r1, ip, lsl #28
   12bf0:	strdeq	r2, [r1], -r4
   12bf4:	push	{r0, r1, r4, r5, r6, lr}
   12bf8:	mov	r4, #1
   12bfc:	mvn	r6, #0
   12c00:	mov	r2, #0
   12c04:	stm	sp, {r4, r6}
   12c08:	mov	r3, r4
   12c0c:	mov	r1, r2
   12c10:	mov	r5, r0
   12c14:	bl	16570 <flatcc_verify_vector_field@@Base>
   12c18:	cmp	r0, #0
   12c1c:	bne	12c60 <_start@@Base+0x7e4>
   12c20:	mov	r2, r0
   12c24:	stm	sp, {r4, r6}
   12c28:	mov	r3, r4
   12c2c:	mov	r1, r4
   12c30:	mov	r0, r5
   12c34:	bl	16570 <flatcc_verify_vector_field@@Base>
   12c38:	cmp	r0, #0
   12c3c:	bne	12c60 <_start@@Base+0x7e4>
   12c40:	ldr	r3, [pc, #32]	; 12c68 <_start@@Base+0x7ec>
   12c44:	mov	r2, r0
   12c48:	str	r3, [sp, #4]
   12c4c:	str	r4, [sp]
   12c50:	mov	r3, r0
   12c54:	mov	r1, #2
   12c58:	mov	r0, r5
   12c5c:	bl	16b5c <flatcc_verify_table_as_nested_root@@Base>
   12c60:	add	sp, sp, #8
   12c64:	pop	{r4, r5, r6, pc}
   12c68:	andeq	r2, r1, r4, lsl #16
   12c6c:	ldrb	r3, [r0, #12]
   12c70:	sub	r3, r3, #1
   12c74:	cmp	r3, #3
   12c78:	ldrls	pc, [pc, r3, lsl #2]
   12c7c:	b	12cb0 <_start@@Base+0x834>
   12c80:	muleq	r1, r0, ip
   12c84:	muleq	r1, r8, ip
   12c88:	andeq	r2, r1, r0, lsr #25
   12c8c:	andeq	r2, r1, r8, lsr #25
   12c90:	ldr	r1, [pc, #32]	; 12cb8 <_start@@Base+0x83c>
   12c94:	b	167c8 <flatcc_verify_union_table@@Base>
   12c98:	ldr	r1, [pc, #28]	; 12cbc <_start@@Base+0x840>
   12c9c:	b	12c94 <_start@@Base+0x818>
   12ca0:	ldr	r1, [pc, #24]	; 12cc0 <_start@@Base+0x844>
   12ca4:	b	12c94 <_start@@Base+0x818>
   12ca8:	ldr	r1, [pc, #20]	; 12cc4 <_start@@Base+0x848>
   12cac:	b	12c94 <_start@@Base+0x818>
   12cb0:	mov	r0, #0
   12cb4:	bx	lr
   12cb8:	andeq	r2, r1, r4, lsl #16
   12cbc:	strdeq	r2, [r1], -r4
   12cc0:	andeq	r2, r1, r4, lsr #11
   12cc4:	andeq	r2, r1, r8, asr #25
   12cc8:	mov	r2, #0
   12ccc:	push	{r4, lr}
   12cd0:	mov	r1, r2
   12cd4:	ldr	r3, [pc, #64]	; 12d1c <_start@@Base+0x8a0>
   12cd8:	mov	r4, r0
   12cdc:	bl	16678 <flatcc_verify_table_field@@Base>
   12ce0:	subs	r2, r0, #0
   12ce4:	bne	12d14 <_start@@Base+0x898>
   12ce8:	ldr	r3, [pc, #48]	; 12d20 <_start@@Base+0x8a4>
   12cec:	mov	r1, #1
   12cf0:	mov	r0, r4
   12cf4:	bl	16678 <flatcc_verify_table_field@@Base>
   12cf8:	subs	r2, r0, #0
   12cfc:	bne	12d14 <_start@@Base+0x898>
   12d00:	mov	r0, r4
   12d04:	ldr	r3, [pc, #24]	; 12d24 <_start@@Base+0x8a8>
   12d08:	mov	r1, #3
   12d0c:	pop	{r4, lr}
   12d10:	b	16d54 <flatcc_verify_union_vector_field@@Base>
   12d14:	mov	r0, r2
   12d18:	pop	{r4, pc}
   12d1c:	andeq	r2, r1, r4, lsr #15
   12d20:	andeq	r2, r1, r8, lsr #26
   12d24:	andeq	r2, r1, ip, ror #24
   12d28:	push	{r4, lr}
   12d2c:	mov	r2, #0
   12d30:	ldr	r3, [pc, #116]	; 12dac <_start@@Base+0x930>
   12d34:	mov	r1, #1
   12d38:	mov	r4, r0
   12d3c:	bl	16c38 <flatcc_verify_union_field@@Base>
   12d40:	subs	r2, r0, #0
   12d44:	bne	12da4 <_start@@Base+0x928>
   12d48:	ldr	r3, [pc, #92]	; 12dac <_start@@Base+0x930>
   12d4c:	mov	r1, #3
   12d50:	mov	r0, r4
   12d54:	bl	16c38 <flatcc_verify_union_field@@Base>
   12d58:	subs	r2, r0, #0
   12d5c:	bne	12da4 <_start@@Base+0x928>
   12d60:	ldr	r3, [pc, #68]	; 12dac <_start@@Base+0x930>
   12d64:	mov	r1, #5
   12d68:	mov	r0, r4
   12d6c:	bl	16c38 <flatcc_verify_union_field@@Base>
   12d70:	subs	r2, r0, #0
   12d74:	bne	12da4 <_start@@Base+0x928>
   12d78:	ldr	r3, [pc, #44]	; 12dac <_start@@Base+0x930>
   12d7c:	mov	r1, #7
   12d80:	mov	r0, r4
   12d84:	bl	16c38 <flatcc_verify_union_field@@Base>
   12d88:	subs	r2, r0, #0
   12d8c:	bne	12da4 <_start@@Base+0x928>
   12d90:	mov	r0, r4
   12d94:	ldr	r3, [pc, #16]	; 12dac <_start@@Base+0x930>
   12d98:	mov	r1, #9
   12d9c:	pop	{r4, lr}
   12da0:	b	16d54 <flatcc_verify_union_vector_field@@Base>
   12da4:	mov	r0, r2
   12da8:	pop	{r4, pc}
   12dac:			; <UNDEFINED> instruction: 0x00012db0
   12db0:	ldrb	r3, [r0, #12]
   12db4:	cmp	r3, #9
   12db8:	beq	12dfc <_start@@Base+0x980>
   12dbc:	bhi	12ddc <_start@@Base+0x960>
   12dc0:	cmp	r3, #2
   12dc4:	beq	12df4 <_start@@Base+0x978>
   12dc8:	cmp	r3, #8
   12dcc:	moveq	r2, #2
   12dd0:	beq	12e00 <_start@@Base+0x984>
   12dd4:	mov	r0, #0
   12dd8:	bx	lr
   12ddc:	cmp	r3, #11
   12de0:	beq	12df0 <_start@@Base+0x974>
   12de4:	bcc	12dfc <_start@@Base+0x980>
   12de8:	cmp	r3, #255	; 0xff
   12dec:	bne	12dd4 <_start@@Base+0x958>
   12df0:	b	1684c <flatcc_verify_union_string@@Base>
   12df4:	ldr	r1, [pc, #12]	; 12e08 <_start@@Base+0x98c>
   12df8:	b	167c8 <flatcc_verify_union_table@@Base>
   12dfc:	mov	r2, #4
   12e00:	mov	r1, r2
   12e04:	b	167f0 <flatcc_verify_union_struct@@Base>
   12e08:	andeq	r2, r1, ip, lsr #11
   12e0c:	mov	r0, #0
   12e10:	bx	lr
   12e14:	mov	r3, #8
   12e18:	push	{r4, lr}
   12e1c:	mov	r2, r3
   12e20:	mov	r1, #0
   12e24:	mov	r4, r0
   12e28:	bl	164d4 <flatcc_verify_field@@Base>
   12e2c:	cmp	r0, #0
   12e30:	popne	{r4, pc}
   12e34:	mov	r3, #4
   12e38:	mov	r0, r4
   12e3c:	mov	r2, r3
   12e40:	mov	r1, #1
   12e44:	pop	{r4, lr}
   12e48:	b	164d4 <flatcc_verify_field@@Base>
   12e4c:	ldr	ip, [r0, #28]
   12e50:	ldr	r3, [r0, #64]	; 0x40
   12e54:	ldr	r2, [r0, #60]	; 0x3c
   12e58:	sub	r3, r3, ip
   12e5c:	cmp	r3, r1
   12e60:	strls	r3, [r0, #24]
   12e64:	strhi	r1, [r0, #24]
   12e68:	ldr	r3, [r0, #32]
   12e6c:	add	r2, r2, ip
   12e70:	str	r2, [r0, #16]
   12e74:	str	r1, [r3, #4]
   12e78:	bx	lr
   12e7c:	push	{r0, r1, r4, r5, r6, lr}
   12e80:	mov	r6, r2
   12e84:	ldr	r2, [r0, #28]
   12e88:	mov	r3, #1
   12e8c:	str	r3, [sp]
   12e90:	add	r2, r1, r2
   12e94:	ldr	r5, [r0, #48]	; 0x30
   12e98:	add	r1, r0, #60	; 0x3c
   12e9c:	mov	r4, r0
   12ea0:	ldr	r0, [r0, #40]	; 0x28
   12ea4:	blx	r5
   12ea8:	subs	r5, r0, #0
   12eac:	mvnne	r5, #0
   12eb0:	bne	12ec0 <_start@@Base+0xa44>
   12eb4:	mov	r1, r6
   12eb8:	mov	r0, r4
   12ebc:	bl	12e4c <_start@@Base+0x9d0>
   12ec0:	mov	r0, r5
   12ec4:	add	sp, sp, #8
   12ec8:	pop	{r4, r5, r6, pc}
   12ecc:	push	{r4, r5, r6, lr}
   12ed0:	mov	r4, r0
   12ed4:	ldr	r5, [r0, #20]
   12ed8:	ldr	r3, [r0, #24]
   12edc:	add	r1, r5, r1
   12ee0:	cmp	r1, r3
   12ee4:	str	r1, [r0, #20]
   12ee8:	bcs	12ef8 <_start@@Base+0xa7c>
   12eec:	ldr	r0, [r4, #16]
   12ef0:	add	r0, r0, r5
   12ef4:	pop	{r4, r5, r6, pc}
   12ef8:	mvn	r2, #3
   12efc:	add	r1, r1, #1
   12f00:	bl	12e7c <_start@@Base+0xa00>
   12f04:	cmp	r0, #0
   12f08:	beq	12eec <_start@@Base+0xa70>
   12f0c:	mov	r0, #0
   12f10:	pop	{r4, r5, r6, pc}
   12f14:	push	{r4, lr}
   12f18:	mov	r4, r0
   12f1c:	ldr	r2, [r0, #20]
   12f20:	mov	r1, #0
   12f24:	ldr	r0, [r0, #16]
   12f28:	bl	1234c <memset@plt>
   12f2c:	ldr	r3, [r4, #32]
   12f30:	mov	r0, r4
   12f34:	ldr	r2, [r3, #8]
   12f38:	ldr	r1, [r3, #4]
   12f3c:	str	r2, [r4, #20]
   12f40:	ldr	r2, [r3]
   12f44:	str	r2, [r4, #28]
   12f48:	bl	12e4c <_start@@Base+0x9d0>
   12f4c:	ldrh	r3, [r4, #130]	; 0x82
   12f50:	ldrh	r2, [r4, #128]	; 0x80
   12f54:	cmp	r2, r3
   12f58:	strhcc	r3, [r4, #128]	; 0x80
   12f5c:	ldr	r3, [r4, #32]
   12f60:	sub	r3, r3, #36	; 0x24
   12f64:	ldrh	r2, [r3, #48]	; 0x30
   12f68:	str	r3, [r4, #32]
   12f6c:	ldr	r3, [r4, #156]	; 0x9c
   12f70:	strh	r2, [r4, #130]	; 0x82
   12f74:	sub	r3, r3, #1
   12f78:	str	r3, [r4, #156]	; 0x9c
   12f7c:	pop	{r4, pc}
   12f80:	ldr	r3, [r0, #20]
   12f84:	mov	r2, r1
   12f88:	sub	r3, r3, r1
   12f8c:	str	r3, [r0, #20]
   12f90:	ldr	r0, [r0, #16]
   12f94:	mov	r1, #0
   12f98:	add	r0, r0, r3
   12f9c:	b	1234c <memset@plt>
   12fa0:	push	{r4, r5, r6, lr}
   12fa4:	mov	r6, r1
   12fa8:	mov	r1, r2
   12fac:	mov	r4, r2
   12fb0:	bl	12ecc <_start@@Base+0xa50>
   12fb4:	subs	r5, r0, #0
   12fb8:	beq	12fc8 <_start@@Base+0xb4c>
   12fbc:	mov	r2, r4
   12fc0:	mov	r1, r6
   12fc4:	bl	122ec <memcpy@plt>
   12fc8:	mov	r0, r5
   12fcc:	pop	{r4, r5, r6, pc}
   12fd0:	push	{r0, r1, r4, lr}
   12fd4:	add	r3, sp, #8
   12fd8:	cmp	r0, #4
   12fdc:	mov	r4, #0
   12fe0:	mov	r2, r1
   12fe4:	str	r4, [r3, #-4]!
   12fe8:	movcs	r1, r0
   12fec:	movcc	r1, #4
   12ff0:	mov	r0, r3
   12ff4:	bl	12340 <posix_memalign@plt>
   12ff8:	cmp	r0, r4
   12ffc:	beq	13014 <_start@@Base+0xb98>
   13000:	ldr	r0, [sp, #4]
   13004:	cmp	r0, r4
   13008:	beq	13014 <_start@@Base+0xb98>
   1300c:	bl	122e0 <free@plt>
   13010:	str	r4, [sp, #4]
   13014:	ldr	r0, [sp, #4]
   13018:	add	sp, sp, #8
   1301c:	pop	{r4, pc}

00013020 <flatcc_builder_default_alloc@@Base>:
   13020:	push	{r4, r5, r6, r7, r8, lr}
   13024:	subs	r6, r2, #0
   13028:	mov	r5, r1
   1302c:	bne	13050 <flatcc_builder_default_alloc@@Base+0x30>
   13030:	ldr	r0, [r1]
   13034:	cmp	r0, #0
   13038:	popeq	{r4, r5, r6, r7, r8, pc}
   1303c:	bl	122e0 <free@plt>
   13040:	str	r6, [r5]
   13044:	str	r6, [r5, #4]
   13048:	mov	r0, #0
   1304c:	pop	{r4, r5, r6, r7, r8, pc}
   13050:	ldr	r2, [sp, #24]
   13054:	mov	r7, r3
   13058:	sub	r2, r2, #1
   1305c:	cmp	r2, #6
   13060:	ldrls	pc, [pc, r2, lsl #2]
   13064:	b	130f8 <flatcc_builder_default_alloc@@Base+0xd8>
   13068:	andeq	r3, r1, r0, lsl #2
   1306c:	strdeq	r3, [r1], -r8
   13070:	strdeq	r3, [r1], -r8
   13074:	andeq	r3, r1, r8, ror #1
   13078:	andeq	r3, r1, r4, lsl #1
   1307c:	strdeq	r3, [r1], -r8
   13080:	strdeq	r3, [r1], -r0
   13084:	mov	r4, r6
   13088:	cmp	r6, r4
   1308c:	bhi	13108 <flatcc_builder_default_alloc@@Base+0xe8>
   13090:	ldr	r2, [r5, #4]
   13094:	cmp	r6, r2
   13098:	bhi	130a4 <flatcc_builder_default_alloc@@Base+0x84>
   1309c:	cmp	r4, r2, lsr #1
   130a0:	bls	13048 <flatcc_builder_default_alloc@@Base+0x28>
   130a4:	mov	r1, r4
   130a8:	ldr	r0, [r5]
   130ac:	bl	12304 <realloc@plt>
   130b0:	subs	r6, r0, #0
   130b4:	beq	13110 <flatcc_builder_default_alloc@@Base+0xf0>
   130b8:	cmp	r7, #0
   130bc:	beq	130dc <flatcc_builder_default_alloc@@Base+0xbc>
   130c0:	ldr	r0, [r5, #4]
   130c4:	cmp	r4, r0
   130c8:	bls	130dc <flatcc_builder_default_alloc@@Base+0xbc>
   130cc:	sub	r2, r4, r0
   130d0:	mov	r1, #0
   130d4:	add	r0, r6, r0
   130d8:	bl	1234c <memset@plt>
   130dc:	str	r6, [r5]
   130e0:	str	r4, [r5, #4]
   130e4:	b	13048 <flatcc_builder_default_alloc@@Base+0x28>
   130e8:	mov	r4, #288	; 0x120
   130ec:	b	13088 <flatcc_builder_default_alloc@@Base+0x68>
   130f0:	mov	r4, #64	; 0x40
   130f4:	b	13088 <flatcc_builder_default_alloc@@Base+0x68>
   130f8:	mov	r4, #32
   130fc:	b	13088 <flatcc_builder_default_alloc@@Base+0x68>
   13100:	mov	r4, #256	; 0x100
   13104:	b	13088 <flatcc_builder_default_alloc@@Base+0x68>
   13108:	lsl	r4, r4, #1
   1310c:	b	13088 <flatcc_builder_default_alloc@@Base+0x68>
   13110:	mvn	r0, #0
   13114:	pop	{r4, r5, r6, r7, r8, pc}
   13118:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1311c:	add	r6, r0, #52	; 0x34
   13120:	mov	r4, r1
   13124:	add	r1, r6, r1, lsl #3
   13128:	mov	r5, r2
   1312c:	add	r2, r2, r3
   13130:	ldr	r3, [r1, #4]
   13134:	cmp	r2, r3
   13138:	bls	1316c <flatcc_builder_default_alloc@@Base+0x14c>
   1313c:	str	r4, [sp]
   13140:	ldr	r3, [sp, #32]
   13144:	ldr	r7, [r0, #48]	; 0x30
   13148:	ldr	r0, [r0, #40]	; 0x28
   1314c:	blx	r7
   13150:	cmp	r0, #0
   13154:	beq	1316c <flatcc_builder_default_alloc@@Base+0x14c>
   13158:	ldr	r3, [pc, #28]	; 1317c <flatcc_builder_default_alloc@@Base+0x15c>
   1315c:	mov	r2, #308	; 0x134
   13160:	ldr	r1, [pc, #24]	; 13180 <flatcc_builder_default_alloc@@Base+0x160>
   13164:	ldr	r0, [pc, #24]	; 13184 <flatcc_builder_default_alloc@@Base+0x164>
   13168:	bl	1237c <__assert_fail@plt>
   1316c:	ldr	r0, [r6, r4, lsl #3]
   13170:	add	r0, r0, r5
   13174:	add	sp, sp, #12
   13178:	pop	{r4, r5, r6, r7, pc}
   1317c:	strdeq	r7, [r1], -ip
   13180:	strdeq	r7, [r1], -fp
   13184:	andeq	r7, r1, r8, ror #20
   13188:	ldr	r2, [r0, #156]	; 0x9c
   1318c:	ldr	r3, [r0, #160]	; 0xa0
   13190:	push	{r0, r1, r4, r5, r6, lr}
   13194:	mov	r5, r1
   13198:	add	r1, r2, #1
   1319c:	cmp	r1, r3
   131a0:	mov	r4, r0
   131a4:	str	r1, [r0, #156]	; 0x9c
   131a8:	ble	13258 <flatcc_builder_default_alloc@@Base+0x238>
   131ac:	ldr	r3, [r0, #176]	; 0xb0
   131b0:	cmp	r3, #0
   131b4:	cmpgt	r1, r3
   131b8:	movgt	r3, #1
   131bc:	movle	r3, #0
   131c0:	ble	131d0 <flatcc_builder_default_alloc@@Base+0x1b0>
   131c4:	mvn	r0, #0
   131c8:	add	sp, sp, #8
   131cc:	pop	{r4, r5, r6, pc}
   131d0:	mov	r6, #36	; 0x24
   131d4:	str	r3, [sp]
   131d8:	mul	r2, r6, r2
   131dc:	mov	r3, r6
   131e0:	mov	r1, #4
   131e4:	bl	13118 <flatcc_builder_default_alloc@@Base+0xf8>
   131e8:	cmp	r0, #0
   131ec:	str	r0, [r4, #32]
   131f0:	beq	131c4 <flatcc_builder_default_alloc@@Base+0x1a4>
   131f4:	mov	r1, r6
   131f8:	ldr	r0, [r4, #88]	; 0x58
   131fc:	bl	16f40 <flatcc_verify_union_vector_field@@Base+0x1ec>
   13200:	ldr	r3, [r4, #176]	; 0xb0
   13204:	cmp	r3, #0
   13208:	cmpgt	r0, r3
   1320c:	str	r0, [r4, #160]	; 0xa0
   13210:	strgt	r3, [r4, #160]	; 0xa0
   13214:	ldrh	r1, [r4, #130]	; 0x82
   13218:	ldr	r2, [r4, #32]
   1321c:	ldr	r3, [r4, #20]
   13220:	mvn	r0, #3
   13224:	strh	r1, [r2, #12]
   13228:	ldr	r1, [r4, #28]
   1322c:	str	r3, [r2, #8]
   13230:	add	r3, r3, r1
   13234:	add	r3, r3, #7
   13238:	strh	r5, [r4, #130]	; 0x82
   1323c:	bic	r3, r3, #7
   13240:	str	r0, [r2, #4]
   13244:	mov	r0, #0
   13248:	str	r1, [r2]
   1324c:	str	r3, [r4, #28]
   13250:	str	r0, [r4, #20]
   13254:	b	131c8 <flatcc_builder_default_alloc@@Base+0x1a8>
   13258:	ldr	r3, [r0, #32]
   1325c:	add	r3, r3, #36	; 0x24
   13260:	str	r3, [r0, #32]
   13264:	b	13214 <flatcc_builder_default_alloc@@Base+0x1f4>
   13268:	ldr	r3, [r0, #32]
   1326c:	push	{r0, r1, r2, r4, r5, lr}
   13270:	add	r1, r1, #2
   13274:	ldr	r2, [r3, #16]
   13278:	lsl	r5, r1, #1
   1327c:	ldrh	r1, [r3, #28]
   13280:	mov	r3, #1
   13284:	str	r3, [sp]
   13288:	mov	r3, r5
   1328c:	add	r2, r2, r1, lsl #1
   13290:	mov	r1, #0
   13294:	mov	r4, r0
   13298:	bl	13118 <flatcc_builder_default_alloc@@Base+0xf8>
   1329c:	cmp	r0, #0
   132a0:	streq	r0, [r4, #4]
   132a4:	mvneq	r0, #0
   132a8:	beq	132e4 <flatcc_builder_default_alloc@@Base+0x2c4>
   132ac:	ldr	r2, [r4, #32]
   132b0:	add	r0, r0, #4
   132b4:	mov	r3, #0
   132b8:	str	r0, [r4, #4]
   132bc:	str	r3, [sp]
   132c0:	mov	r1, #3
   132c4:	sub	r3, r5, #3
   132c8:	ldr	r2, [r2, #20]
   132cc:	mov	r0, r4
   132d0:	bl	13118 <flatcc_builder_default_alloc@@Base+0xf8>
   132d4:	cmp	r0, #0
   132d8:	str	r0, [r4]
   132dc:	movne	r0, #0
   132e0:	mvneq	r0, #0
   132e4:	add	sp, sp, #12
   132e8:	pop	{r4, r5, pc}
   132ec:	push	{r0, r1, r2, r4, r5, lr}
   132f0:	ldr	r3, [r1]
   132f4:	ldr	r4, [r0, #140]	; 0x8c
   132f8:	add	r2, r3, r4
   132fc:	cmp	r4, r2
   13300:	str	r2, [r0, #140]	; 0x8c
   13304:	ble	1331c <flatcc_builder_default_alloc@@Base+0x2fc>
   13308:	ldr	r3, [pc, #68]	; 13354 <flatcc_builder_default_alloc@@Base+0x334>
   1330c:	ldr	r2, [pc, #68]	; 13358 <flatcc_builder_default_alloc@@Base+0x338>
   13310:	ldr	r1, [pc, #68]	; 1335c <flatcc_builder_default_alloc@@Base+0x33c>
   13314:	ldr	r0, [pc, #68]	; 13360 <flatcc_builder_default_alloc@@Base+0x340>
   13318:	bl	1237c <__assert_fail@plt>
   1331c:	str	r3, [sp]
   13320:	add	r1, r1, #8
   13324:	ldr	r5, [r0, #44]	; 0x2c
   13328:	ldr	r2, [r1, #-4]
   1332c:	mov	r3, r4
   13330:	ldr	r0, [r0, #36]	; 0x24
   13334:	blx	r5
   13338:	cmp	r0, #0
   1333c:	ldrne	r3, [pc, #16]	; 13354 <flatcc_builder_default_alloc@@Base+0x334>
   13340:	ldrne	r2, [pc, #28]	; 13364 <flatcc_builder_default_alloc@@Base+0x344>
   13344:	bne	13310 <flatcc_builder_default_alloc@@Base+0x2f0>
   13348:	add	r0, r4, #1
   1334c:	add	sp, sp, #12
   13350:	pop	{r4, r5, pc}
   13354:	andeq	r7, r1, fp, lsl #6
   13358:	andeq	r0, r0, r1, lsr #5
   1335c:	strdeq	r7, [r1], -fp
   13360:	andeq	r7, r1, r8, ror #20
   13364:	andeq	r0, r0, r5, lsr #5
   13368:	cmp	r2, #0
   1336c:	bne	1337c <flatcc_builder_default_alloc@@Base+0x35c>
   13370:	ldrh	r2, [r0, #132]	; 0x84
   13374:	cmp	r2, #0
   13378:	moveq	r2, #1
   1337c:	ldrh	ip, [r1]
   13380:	cmp	ip, #3
   13384:	movls	ip, #4
   13388:	strhls	ip, [r1]
   1338c:	ldrh	ip, [r1]
   13390:	cmp	ip, r2
   13394:	strhcc	r2, [r1]
   13398:	cmp	r3, #0
   1339c:	bne	13400 <flatcc_builder_default_alloc@@Base+0x3e0>
   133a0:	ldr	r3, [r0, #140]	; 0x8c
   133a4:	sub	r2, r2, #1
   133a8:	ands	r2, r2, r3
   133ac:	beq	13400 <flatcc_builder_default_alloc@@Base+0x3e0>
   133b0:	push	{r4, lr}
   133b4:	sub	sp, sp, #72	; 0x48
   133b8:	ldr	r4, [pc, #72]	; 13408 <flatcc_builder_default_alloc@@Base+0x3e8>
   133bc:	mov	r3, #1
   133c0:	mov	r1, sp
   133c4:	str	r2, [sp]
   133c8:	str	r4, [sp, #8]
   133cc:	str	r2, [sp, #12]
   133d0:	str	r3, [sp, #4]
   133d4:	bl	132ec <flatcc_builder_default_alloc@@Base+0x2cc>
   133d8:	cmp	r0, #0
   133dc:	bne	133f4 <flatcc_builder_default_alloc@@Base+0x3d4>
   133e0:	add	r3, r4, #512	; 0x200
   133e4:	ldr	r2, [pc, #32]	; 1340c <flatcc_builder_default_alloc@@Base+0x3ec>
   133e8:	ldr	r1, [pc, #32]	; 13410 <flatcc_builder_default_alloc@@Base+0x3f0>
   133ec:	ldr	r0, [pc, #32]	; 13414 <flatcc_builder_default_alloc@@Base+0x3f4>
   133f0:	bl	1237c <__assert_fail@plt>
   133f4:	mov	r0, #0
   133f8:	add	sp, sp, #72	; 0x48
   133fc:	pop	{r4, pc}
   13400:	mov	r0, #0
   13404:	bx	lr
   13408:	andeq	r7, r1, r5, lsl r3
   1340c:			; <UNDEFINED> instruction: 0x000002be
   13410:	strdeq	r7, [r1], -fp
   13414:	andeq	r7, r1, r8, ror #20
   13418:	ldr	r2, [r0, #136]	; 0x88
   1341c:	ldr	r3, [r1]
   13420:	push	{r0, r1, r4, r5, r6, lr}
   13424:	sub	r4, r2, r3
   13428:	cmp	r2, r4
   1342c:	bgt	13444 <flatcc_builder_default_alloc@@Base+0x424>
   13430:	ldr	r3, [pc, #76]	; 13484 <flatcc_builder_default_alloc@@Base+0x464>
   13434:	ldr	r2, [pc, #76]	; 13488 <flatcc_builder_default_alloc@@Base+0x468>
   13438:	ldr	r1, [pc, #76]	; 1348c <flatcc_builder_default_alloc@@Base+0x46c>
   1343c:	ldr	r0, [pc, #76]	; 13490 <flatcc_builder_default_alloc@@Base+0x470>
   13440:	bl	1237c <__assert_fail@plt>
   13444:	str	r3, [sp]
   13448:	mov	r5, r0
   1344c:	ldr	r6, [r0, #44]	; 0x2c
   13450:	ldr	r2, [r1, #4]
   13454:	mov	r3, r4
   13458:	add	r1, r1, #8
   1345c:	ldr	r0, [r0, #36]	; 0x24
   13460:	blx	r6
   13464:	cmp	r0, #0
   13468:	ldrne	r3, [pc, #20]	; 13484 <flatcc_builder_default_alloc@@Base+0x464>
   1346c:	ldrne	r2, [pc, #32]	; 13494 <flatcc_builder_default_alloc@@Base+0x474>
   13470:	bne	13438 <flatcc_builder_default_alloc@@Base+0x418>
   13474:	mov	r0, r4
   13478:	str	r4, [r5, #136]	; 0x88
   1347c:	add	sp, sp, #8
   13480:	pop	{r4, r5, r6, pc}
   13484:	andeq	r7, r1, r4, lsr #10
   13488:	andeq	r0, r0, r7, lsl #5
   1348c:	strdeq	r7, [r1], -fp
   13490:	andeq	r7, r1, r8, ror #20
   13494:	andeq	r0, r0, fp, lsl #5
   13498:	ldr	r3, [r0, #20]
   1349c:	adds	r1, r3, r1
   134a0:	movcs	r3, #1
   134a4:	movcc	r3, #0
   134a8:	cmp	r1, r2
   134ac:	movls	r2, r3
   134b0:	orrhi	r2, r3, #1
   134b4:	cmp	r2, #0
   134b8:	beq	134d4 <flatcc_builder_default_alloc@@Base+0x4b4>
   134bc:	push	{r4, lr}
   134c0:	mov	r2, #892	; 0x37c
   134c4:	ldr	r3, [pc, #20]	; 134e0 <flatcc_builder_default_alloc@@Base+0x4c0>
   134c8:	ldr	r1, [pc, #20]	; 134e4 <flatcc_builder_default_alloc@@Base+0x4c4>
   134cc:	ldr	r0, [pc, #20]	; 134e8 <flatcc_builder_default_alloc@@Base+0x4c8>
   134d0:	bl	1237c <__assert_fail@plt>
   134d4:	str	r1, [r0, #20]
   134d8:	mov	r0, r2
   134dc:	bx	lr
   134e0:	andeq	r7, r1, pc, lsr #10
   134e4:	strdeq	r7, [r1], -fp
   134e8:	andeq	r7, r1, r1, asr #20
   134ec:	ldrh	ip, [r0, #128]	; 0x80
   134f0:	push	{r4, r5, r6, r7, lr}
   134f4:	sub	sp, sp, #84	; 0x54
   134f8:	cmp	ip, #3
   134fc:	movls	ip, #4
   13500:	strhls	ip, [r0, #128]	; 0x80
   13504:	mov	ip, #4
   13508:	add	r5, sp, ip
   1350c:	str	ip, [sp, #8]
   13510:	ldr	r4, [r0, #136]	; 0x88
   13514:	str	ip, [sp, #20]
   13518:	mov	ip, #1
   1351c:	str	ip, [sp, #12]
   13520:	lsls	ip, r2, #2
   13524:	strne	ip, [sp, #28]
   13528:	and	lr, r4, #3
   1352c:	str	r5, [sp, #16]
   13530:	addne	r5, ip, #4
   13534:	movne	ip, #2
   13538:	strne	r5, [sp, #8]
   1353c:	strne	r1, [sp, #24]
   13540:	strne	ip, [sp, #12]
   13544:	cmp	lr, #0
   13548:	str	r2, [sp, #4]
   1354c:	beq	1357c <flatcc_builder_default_alloc@@Base+0x55c>
   13550:	ldr	ip, [sp, #8]
   13554:	add	r5, sp, #80	; 0x50
   13558:	add	ip, ip, lr
   1355c:	str	ip, [sp, #8]
   13560:	ldr	ip, [sp, #12]
   13564:	ldr	r6, [pc, #204]	; 13638 <flatcc_builder_default_alloc@@Base+0x618>
   13568:	add	ip, ip, #1
   1356c:	str	ip, [sp, #12]
   13570:	add	r5, r5, ip, lsl #3
   13574:	str	r6, [r5, #-72]	; 0xffffffb8
   13578:	str	lr, [r5, #-68]	; 0xffffffbc
   1357c:	ldr	r5, [sp, #8]
   13580:	sub	r6, r1, #4
   13584:	sub	r5, r4, r5
   13588:	mov	lr, r3
   1358c:	add	r2, r3, r2
   13590:	mvn	r7, #3
   13594:	cmp	r2, lr
   13598:	bne	135ac <flatcc_builder_default_alloc@@Base+0x58c>
   1359c:	add	r1, sp, #8
   135a0:	bl	13418 <flatcc_builder_default_alloc@@Base+0x3f8>
   135a4:	add	sp, sp, #84	; 0x54
   135a8:	pop	{r4, r5, r6, r7, pc}
   135ac:	ldr	r4, [r6, #4]!
   135b0:	cmp	r4, #0
   135b4:	beq	135f4 <flatcc_builder_default_alloc@@Base+0x5d4>
   135b8:	sub	ip, r7, r6
   135bc:	add	ip, r1, ip
   135c0:	add	ip, ip, r4
   135c4:	sub	ip, ip, r5
   135c8:	cmp	r3, #0
   135cc:	str	ip, [r6]
   135d0:	beq	13630 <flatcc_builder_default_alloc@@Base+0x610>
   135d4:	ldrb	ip, [lr]
   135d8:	cmp	ip, #0
   135dc:	bne	13630 <flatcc_builder_default_alloc@@Base+0x610>
   135e0:	ldr	r3, [pc, #84]	; 1363c <flatcc_builder_default_alloc@@Base+0x61c>
   135e4:	ldr	r2, [pc, #84]	; 13640 <flatcc_builder_default_alloc@@Base+0x620>
   135e8:	ldr	r1, [pc, #84]	; 13644 <flatcc_builder_default_alloc@@Base+0x624>
   135ec:	ldr	r0, [pc, #84]	; 13648 <flatcc_builder_default_alloc@@Base+0x628>
   135f0:	bl	1237c <__assert_fail@plt>
   135f4:	cmp	r3, #0
   135f8:	beq	1361c <flatcc_builder_default_alloc@@Base+0x5fc>
   135fc:	ldrb	ip, [lr]
   13600:	cmp	ip, #0
   13604:	beq	13630 <flatcc_builder_default_alloc@@Base+0x610>
   13608:	ldr	r3, [pc, #44]	; 1363c <flatcc_builder_default_alloc@@Base+0x61c>
   1360c:	ldr	r2, [pc, #56]	; 1364c <flatcc_builder_default_alloc@@Base+0x62c>
   13610:	ldr	r1, [pc, #44]	; 13644 <flatcc_builder_default_alloc@@Base+0x624>
   13614:	ldr	r0, [pc, #52]	; 13650 <flatcc_builder_default_alloc@@Base+0x630>
   13618:	b	135f0 <flatcc_builder_default_alloc@@Base+0x5d0>
   1361c:	ldr	r3, [pc, #24]	; 1363c <flatcc_builder_default_alloc@@Base+0x61c>
   13620:	ldr	r2, [pc, #44]	; 13654 <flatcc_builder_default_alloc@@Base+0x634>
   13624:	ldr	r1, [pc, #24]	; 13644 <flatcc_builder_default_alloc@@Base+0x624>
   13628:	ldr	r0, [pc, #40]	; 13658 <flatcc_builder_default_alloc@@Base+0x638>
   1362c:	b	135f0 <flatcc_builder_default_alloc@@Base+0x5d0>
   13630:	add	lr, lr, #1
   13634:	b	13594 <flatcc_builder_default_alloc@@Base+0x574>
   13638:	andeq	r7, r1, r5, lsl r3
   1363c:	andeq	r7, r1, r0, asr #10
   13640:			; <UNDEFINED> instruction: 0x000005b1
   13644:	strdeq	r7, [r1], -fp
   13648:	andeq	r7, r1, ip, asr sl
   1364c:			; <UNDEFINED> instruction: 0x000005b5
   13650:	andeq	r7, r1, sl, ror #20
   13654:			; <UNDEFINED> instruction: 0x000005b7
   13658:	andeq	r7, r1, r8, ror #20

0001365c <flatcc_builder_flush_vtable_cache@@Base>:
   1365c:	ldr	r3, [r0, #116]	; 0x74
   13660:	cmp	r3, #0
   13664:	bxeq	lr
   13668:	push	{r4, lr}
   1366c:	mov	r1, #0
   13670:	mov	r4, r0
   13674:	ldr	r2, [r0, #96]	; 0x60
   13678:	ldr	r0, [r0, #92]	; 0x5c
   1367c:	bl	1234c <memset@plt>
   13680:	mov	r3, #16
   13684:	str	r3, [r4, #124]	; 0x7c
   13688:	mov	r3, #0
   1368c:	str	r3, [r4, #120]	; 0x78
   13690:	pop	{r4, pc}

00013694 <flatcc_builder_custom_init@@Base>:
   13694:	push	{r4, r5, r6, r7, r8, lr}
   13698:	mov	r6, r1
   1369c:	mov	r7, r2
   136a0:	mov	r1, #0
   136a4:	mov	r2, #232	; 0xe8
   136a8:	mov	r4, r0
   136ac:	mov	r5, r3
   136b0:	bl	1234c <memset@plt>
   136b4:	cmp	r6, #0
   136b8:	moveq	r3, #1
   136bc:	addeq	r7, r4, #188	; 0xbc
   136c0:	ldreq	r6, [pc, #40]	; 136f0 <flatcc_builder_custom_init@@Base+0x5c>
   136c4:	str	r7, [r4, #36]	; 0x24
   136c8:	str	r6, [r4, #44]	; 0x2c
   136cc:	mov	r0, #0
   136d0:	streq	r3, [r4, #184]	; 0xb8
   136d4:	ldr	r3, [pc, #24]	; 136f4 <flatcc_builder_custom_init@@Base+0x60>
   136d8:	cmp	r5, #0
   136dc:	moveq	r5, r3
   136e0:	ldr	r3, [sp, #24]
   136e4:	str	r5, [r4, #48]	; 0x30
   136e8:	str	r3, [r4, #40]	; 0x28
   136ec:	pop	{r4, r5, r6, r7, r8, pc}
   136f0:	andeq	r5, r1, r4, ror lr
   136f4:	andeq	r3, r1, r0, lsr #32

000136f8 <flatcc_builder_init@@Base>:
   136f8:	push	{r4, lr}
   136fc:	mov	r2, #232	; 0xe8
   13700:	mov	r4, r0
   13704:	mov	r1, #0
   13708:	bl	1234c <memset@plt>
   1370c:	mov	r3, #1
   13710:	str	r3, [r4, #184]	; 0xb8
   13714:	ldr	r3, [pc, #24]	; 13734 <flatcc_builder_init@@Base+0x3c>
   13718:	mov	r0, #0
   1371c:	str	r3, [r4, #48]	; 0x30
   13720:	add	r3, r4, #188	; 0xbc
   13724:	str	r3, [r4, #36]	; 0x24
   13728:	ldr	r3, [pc, #8]	; 13738 <flatcc_builder_init@@Base+0x40>
   1372c:	str	r3, [r4, #44]	; 0x2c
   13730:	pop	{r4, pc}
   13734:	andeq	r3, r1, r0, lsr #32
   13738:	andeq	r5, r1, r4, ror lr

0001373c <flatcc_builder_custom_reset@@Base>:
   1373c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13740:	mov	r6, #0
   13744:	mov	r4, r0
   13748:	mov	r7, r1
   1374c:	mov	r8, r2
   13750:	mov	r5, r0
   13754:	mov	r9, #1
   13758:	mov	sl, r6
   1375c:	ldr	r3, [r5, #52]	; 0x34
   13760:	add	r1, r5, #52	; 0x34
   13764:	cmp	r3, #0
   13768:	beq	13848 <flatcc_builder_custom_reset@@Base+0x10c>
   1376c:	cmp	r6, #5
   13770:	cmpne	r8, #0
   13774:	bne	13820 <flatcc_builder_custom_reset@@Base+0xe4>
   13778:	ldr	r2, [r5, #56]	; 0x38
   1377c:	mov	r1, sl
   13780:	ldr	r0, [r5, #52]	; 0x34
   13784:	bl	1234c <memset@plt>
   13788:	add	r6, r6, #1
   1378c:	cmp	r6, #8
   13790:	add	r5, r5, #8
   13794:	bne	1375c <flatcc_builder_custom_reset@@Base+0x20>
   13798:	ldr	r2, [r4, #124]	; 0x7c
   1379c:	mov	r3, #0
   137a0:	cmp	r2, r3
   137a4:	movne	r2, #16
   137a8:	strne	r2, [r4, #124]	; 0x7c
   137ac:	ldr	r2, [r4, #60]	; 0x3c
   137b0:	ldr	r0, [r4, #184]	; 0xb8
   137b4:	str	r2, [r4, #16]
   137b8:	ldr	r2, [r4, #76]	; 0x4c
   137bc:	cmp	r7, #0
   137c0:	str	r2, [r4]
   137c4:	ldr	r2, [r4, #52]	; 0x34
   137c8:	strne	r3, [r4, #172]	; 0xac
   137cc:	strne	r3, [r4, #176]	; 0xb0
   137d0:	strne	r3, [r4, #180]	; 0xb4
   137d4:	cmp	r0, #0
   137d8:	str	r3, [r4, #120]	; 0x78
   137dc:	strh	r3, [r4, #128]	; 0x80
   137e0:	str	r3, [r4, #136]	; 0x88
   137e4:	str	r3, [r4, #140]	; 0x8c
   137e8:	str	r3, [r4, #156]	; 0x9c
   137ec:	str	r3, [r4, #160]	; 0xa0
   137f0:	str	r3, [r4, #20]
   137f4:	str	r3, [r4, #24]
   137f8:	str	r3, [r4, #148]	; 0x94
   137fc:	str	r3, [r4, #152]	; 0x98
   13800:	str	r2, [r4, #4]
   13804:	str	r3, [r4, #32]
   13808:	beq	13818 <flatcc_builder_custom_reset@@Base+0xdc>
   1380c:	add	r0, r4, #188	; 0xbc
   13810:	bl	15d6c <flatcc_emitter_reset@@Base>
   13814:	mov	r0, #0
   13818:	add	sp, sp, #12
   1381c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13820:	str	r6, [sp]
   13824:	ldr	fp, [r4, #48]	; 0x30
   13828:	mov	r3, r9
   1382c:	mov	r2, #1
   13830:	ldr	r0, [r4, #40]	; 0x28
   13834:	blx	fp
   13838:	cmp	r0, #0
   1383c:	beq	13778 <flatcc_builder_custom_reset@@Base+0x3c>
   13840:	mvn	r0, #0
   13844:	b	13818 <flatcc_builder_custom_reset@@Base+0xdc>
   13848:	ldr	r3, [r5, #56]	; 0x38
   1384c:	cmp	r3, #0
   13850:	beq	13788 <flatcc_builder_custom_reset@@Base+0x4c>
   13854:	ldr	r3, [pc, #12]	; 13868 <flatcc_builder_custom_reset@@Base+0x12c>
   13858:	ldr	r2, [pc, #12]	; 1386c <flatcc_builder_custom_reset@@Base+0x130>
   1385c:	ldr	r1, [pc, #12]	; 13870 <flatcc_builder_custom_reset@@Base+0x134>
   13860:	ldr	r0, [pc, #12]	; 13874 <flatcc_builder_custom_reset@@Base+0x138>
   13864:	bl	1237c <__assert_fail@plt>
   13868:	andeq	r7, r1, sp, asr r5
   1386c:			; <UNDEFINED> instruction: 0x000001b2
   13870:	strdeq	r7, [r1], -fp
   13874:	andeq	r7, r1, r8, ror sl

00013878 <flatcc_builder_reset@@Base>:
   13878:	mov	r2, #0
   1387c:	mov	r1, r2
   13880:	b	1373c <flatcc_builder_custom_reset@@Base>

00013884 <flatcc_builder_clear@@Base>:
   13884:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   13888:	mov	r5, #0
   1388c:	mov	r4, r0
   13890:	add	r6, r0, #52	; 0x34
   13894:	mov	r8, r5
   13898:	str	r5, [sp]
   1389c:	mov	r1, r6
   138a0:	ldr	r7, [r4, #48]	; 0x30
   138a4:	mov	r3, r8
   138a8:	mov	r2, #0
   138ac:	ldr	r0, [r4, #40]	; 0x28
   138b0:	add	r5, r5, #1
   138b4:	blx	r7
   138b8:	cmp	r5, #8
   138bc:	add	r6, r6, #8
   138c0:	bne	13898 <flatcc_builder_clear@@Base+0x14>
   138c4:	ldr	r3, [r4, #184]	; 0xb8
   138c8:	cmp	r3, #0
   138cc:	beq	138d8 <flatcc_builder_clear@@Base+0x54>
   138d0:	add	r0, r4, #188	; 0xbc
   138d4:	bl	15e1c <flatcc_emitter_clear@@Base>
   138d8:	mov	r2, #232	; 0xe8
   138dc:	mov	r1, #0
   138e0:	mov	r0, r4
   138e4:	add	sp, sp, #8
   138e8:	pop	{r4, r5, r6, r7, r8, lr}
   138ec:	b	1234c <memset@plt>

000138f0 <flatcc_builder_enter_user_frame_ptr@@Base>:
   138f0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   138f4:	add	r4, r1, #3
   138f8:	bic	r4, r4, #3
   138fc:	add	r4, r4, #4
   13900:	mov	r7, #0
   13904:	str	r7, [sp]
   13908:	mov	r3, r4
   1390c:	ldr	r2, [r0, #228]	; 0xe4
   13910:	mov	r1, #7
   13914:	mov	r6, r0
   13918:	bl	13118 <flatcc_builder_default_alloc@@Base+0xf8>
   1391c:	subs	r5, r0, #0
   13920:	moveq	r0, r5
   13924:	beq	13954 <flatcc_builder_enter_user_frame_ptr@@Base+0x64>
   13928:	mov	r2, r4
   1392c:	mov	r1, r7
   13930:	bl	1234c <memset@plt>
   13934:	ldr	r3, [r6, #224]	; 0xe0
   13938:	add	r0, r5, #4
   1393c:	str	r3, [r5]
   13940:	ldr	r1, [r6, #228]	; 0xe4
   13944:	add	r3, r1, #4
   13948:	add	r4, r4, r1
   1394c:	str	r3, [r6, #224]	; 0xe0
   13950:	str	r4, [r6, #228]	; 0xe4
   13954:	add	sp, sp, #12
   13958:	pop	{r4, r5, r6, r7, pc}

0001395c <flatcc_builder_enter_user_frame@@Base>:
   1395c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13960:	add	r4, r1, #3
   13964:	bic	r4, r4, #3
   13968:	add	r4, r4, #4
   1396c:	mov	r7, #0
   13970:	str	r7, [sp]
   13974:	mov	r3, r4
   13978:	ldr	r2, [r0, #228]	; 0xe4
   1397c:	mov	r1, #7
   13980:	mov	r6, r0
   13984:	bl	13118 <flatcc_builder_default_alloc@@Base+0xf8>
   13988:	subs	r5, r0, #0
   1398c:	moveq	r0, r5
   13990:	beq	139bc <flatcc_builder_enter_user_frame@@Base+0x60>
   13994:	mov	r2, r4
   13998:	mov	r1, r7
   1399c:	bl	1234c <memset@plt>
   139a0:	ldr	r3, [r6, #224]	; 0xe0
   139a4:	str	r3, [r5]
   139a8:	ldr	r1, [r6, #228]	; 0xe4
   139ac:	add	r0, r1, #4
   139b0:	add	r4, r4, r1
   139b4:	str	r0, [r6, #224]	; 0xe0
   139b8:	str	r4, [r6, #228]	; 0xe4
   139bc:	add	sp, sp, #12
   139c0:	pop	{r4, r5, r6, r7, pc}

000139c4 <flatcc_builder_exit_user_frame@@Base>:
   139c4:	ldr	r3, [r0, #224]	; 0xe0
   139c8:	cmp	r3, #0
   139cc:	bne	139e8 <flatcc_builder_exit_user_frame@@Base+0x24>
   139d0:	push	{r4, lr}
   139d4:	ldr	r3, [pc, #44]	; 13a08 <flatcc_builder_exit_user_frame@@Base+0x44>
   139d8:	ldr	r2, [pc, #44]	; 13a0c <flatcc_builder_exit_user_frame@@Base+0x48>
   139dc:	ldr	r1, [pc, #44]	; 13a10 <flatcc_builder_exit_user_frame@@Base+0x4c>
   139e0:	ldr	r0, [pc, #44]	; 13a14 <flatcc_builder_exit_user_frame@@Base+0x50>
   139e4:	bl	1237c <__assert_fail@plt>
   139e8:	ldr	r1, [r0, #108]	; 0x6c
   139ec:	mov	r2, r0
   139f0:	add	r1, r1, r3
   139f4:	sub	r3, r3, #4
   139f8:	str	r3, [r0, #228]	; 0xe4
   139fc:	ldr	r0, [r1, #-4]
   13a00:	str	r0, [r2, #224]	; 0xe0
   13a04:	bx	lr
   13a08:	andeq	r7, r1, r9, ror r5
   13a0c:	andeq	r0, r0, lr, lsl r2
   13a10:	strdeq	r7, [r1], -fp
   13a14:	andeq	r7, r1, sl, lsl #21

00013a18 <flatcc_builder_exit_user_frame_at@@Base>:
   13a18:	ldr	r2, [r0, #224]	; 0xe0
   13a1c:	cmp	r2, r1
   13a20:	bcs	13a3c <flatcc_builder_exit_user_frame_at@@Base+0x24>
   13a24:	push	{r4, lr}
   13a28:	ldr	r3, [pc, #20]	; 13a44 <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   13a2c:	ldr	r2, [pc, #20]	; 13a48 <flatcc_builder_exit_user_frame_at@@Base+0x30>
   13a30:	ldr	r1, [pc, #20]	; 13a4c <flatcc_builder_exit_user_frame_at@@Base+0x34>
   13a34:	ldr	r0, [pc, #20]	; 13a50 <flatcc_builder_exit_user_frame_at@@Base+0x38>
   13a38:	bl	1237c <__assert_fail@plt>
   13a3c:	str	r1, [r0, #224]	; 0xe0
   13a40:	b	139c4 <flatcc_builder_exit_user_frame@@Base>
   13a44:	muleq	r1, r8, r5
   13a48:	andeq	r0, r0, r7, lsr #4
   13a4c:	strdeq	r7, [r1], -fp
   13a50:	andeq	r7, r1, r3, lsr #21

00013a54 <flatcc_builder_get_current_user_frame@@Base>:
   13a54:	ldr	r0, [r0, #224]	; 0xe0
   13a58:	bx	lr

00013a5c <flatcc_builder_get_user_frame_ptr@@Base>:
   13a5c:	ldr	r0, [r0, #108]	; 0x6c
   13a60:	add	r0, r0, r1
   13a64:	bx	lr

00013a68 <flatcc_builder_embed_buffer@@Base>:
   13a68:	push	{r4, r5, r6, lr}
   13a6c:	mov	r4, r3
   13a70:	ldr	r3, [r0, #152]	; 0x98
   13a74:	sub	sp, sp, #80	; 0x50
   13a78:	adds	r3, r3, #0
   13a7c:	movne	r3, #1
   13a80:	mov	r6, r2
   13a84:	mov	r2, r1
   13a88:	add	r1, sp, #96	; 0x60
   13a8c:	mov	r5, r0
   13a90:	bl	13368 <flatcc_builder_default_alloc@@Base+0x348>
   13a94:	cmp	r0, #0
   13a98:	movne	r0, #0
   13a9c:	bne	13b70 <flatcc_builder_embed_buffer@@Base+0x108>
   13aa0:	ldr	r3, [sp, #100]	; 0x64
   13aa4:	str	r0, [sp, #8]
   13aa8:	tst	r3, #2
   13aac:	ldr	r3, [r5, #136]	; 0x88
   13ab0:	movne	r2, #4
   13ab4:	moveq	r2, #0
   13ab8:	sub	r3, r3, r4
   13abc:	sub	r3, r3, r2
   13ac0:	ldrh	r2, [sp, #96]	; 0x60
   13ac4:	str	r0, [sp, #12]
   13ac8:	sub	r2, r2, #1
   13acc:	and	r3, r3, r2
   13ad0:	add	r2, r4, r3
   13ad4:	str	r2, [sp, #4]
   13ad8:	ldr	r2, [r5, #152]	; 0x98
   13adc:	cmp	r2, #0
   13ae0:	beq	13b00 <flatcc_builder_embed_buffer@@Base+0x98>
   13ae4:	mov	r2, #4
   13ae8:	add	r1, sp, r2
   13aec:	str	r2, [sp, #8]
   13af0:	str	r2, [sp, #20]
   13af4:	mov	r2, #1
   13af8:	str	r1, [sp, #16]
   13afc:	str	r2, [sp, #12]
   13b00:	cmp	r4, #0
   13b04:	beq	13b30 <flatcc_builder_embed_buffer@@Base+0xc8>
   13b08:	ldr	r2, [sp, #8]
   13b0c:	add	r1, sp, #80	; 0x50
   13b10:	add	r2, r2, r4
   13b14:	str	r2, [sp, #8]
   13b18:	ldr	r2, [sp, #12]
   13b1c:	add	r2, r2, #1
   13b20:	str	r2, [sp, #12]
   13b24:	add	r1, r1, r2, lsl #3
   13b28:	str	r6, [r1, #-72]	; 0xffffffb8
   13b2c:	str	r4, [r1, #-68]	; 0xffffffbc
   13b30:	cmp	r3, #0
   13b34:	beq	13b64 <flatcc_builder_embed_buffer@@Base+0xfc>
   13b38:	ldr	r2, [sp, #8]
   13b3c:	add	r1, sp, #80	; 0x50
   13b40:	add	r2, r2, r3
   13b44:	str	r2, [sp, #8]
   13b48:	ldr	r2, [sp, #12]
   13b4c:	ldr	r0, [pc, #36]	; 13b78 <flatcc_builder_embed_buffer@@Base+0x110>
   13b50:	add	r2, r2, #1
   13b54:	str	r2, [sp, #12]
   13b58:	add	r1, r1, r2, lsl #3
   13b5c:	str	r0, [r1, #-72]	; 0xffffffb8
   13b60:	str	r3, [r1, #-68]	; 0xffffffbc
   13b64:	add	r1, sp, #8
   13b68:	mov	r0, r5
   13b6c:	bl	13418 <flatcc_builder_default_alloc@@Base+0x3f8>
   13b70:	add	sp, sp, #80	; 0x50
   13b74:	pop	{r4, r5, r6, pc}
   13b78:	andeq	r7, r1, r5, lsl r3

00013b7c <flatcc_builder_create_buffer@@Base>:
   13b7c:	push	{r4, r5, r6, r7, r8, r9, lr}
   13b80:	sub	sp, sp, #92	; 0x5c
   13b84:	mov	r7, #0
   13b88:	ldr	r8, [sp, #124]	; 0x7c
   13b8c:	mov	r9, r1
   13b90:	and	r6, r8, #1
   13b94:	mov	r5, r3
   13b98:	add	r1, sp, #120	; 0x78
   13b9c:	mov	r3, r6
   13ba0:	mov	r4, r0
   13ba4:	str	r7, [sp, #12]
   13ba8:	bl	13368 <flatcc_builder_default_alloc@@Base+0x348>
   13bac:	cmp	r0, r7
   13bb0:	bne	13d24 <flatcc_builder_create_buffer@@Base+0x1a8>
   13bb4:	ldrh	r3, [r4, #128]	; 0x80
   13bb8:	ldrh	r1, [sp, #120]	; 0x78
   13bbc:	ldr	r2, [r4, #136]	; 0x88
   13bc0:	and	r8, r8, #2
   13bc4:	cmp	r3, r1
   13bc8:	strhcc	r1, [r4, #128]	; 0x80
   13bcc:	cmp	r9, #0
   13bd0:	sub	r1, r1, #1
   13bd4:	ldrne	r3, [r9]
   13bd8:	strne	r3, [sp, #12]
   13bdc:	ldr	r0, [sp, #12]
   13be0:	sub	r3, r2, #4
   13be4:	cmp	r0, #0
   13be8:	movne	r0, #4
   13bec:	moveq	r0, #0
   13bf0:	cmp	r8, #0
   13bf4:	moveq	ip, #0
   13bf8:	movne	ip, #4
   13bfc:	sub	r3, r3, r0
   13c00:	sub	r3, r3, ip
   13c04:	and	r3, r3, r1
   13c08:	moveq	lr, r6
   13c0c:	mov	r1, #0
   13c10:	orrne	lr, r6, #1
   13c14:	cmp	lr, r1
   13c18:	str	r1, [sp, #16]
   13c1c:	str	r1, [sp, #20]
   13c20:	beq	13c40 <flatcc_builder_create_buffer@@Base+0xc4>
   13c24:	mov	r1, #4
   13c28:	str	r1, [sp, #16]
   13c2c:	add	ip, sp, #8
   13c30:	str	r1, [sp, #28]
   13c34:	mov	r1, #1
   13c38:	str	ip, [sp, #24]
   13c3c:	str	r1, [sp, #20]
   13c40:	ldr	r7, [sp, #20]
   13c44:	add	r8, sp, #88	; 0x58
   13c48:	add	r1, r7, #1
   13c4c:	ldr	ip, [sp, #16]
   13c50:	add	r8, r8, r1, lsl #3
   13c54:	add	r9, sp, #4
   13c58:	add	ip, ip, #4
   13c5c:	str	r9, [r8, #-72]	; 0xffffffb8
   13c60:	cmp	r0, #0
   13c64:	mov	r9, #4
   13c68:	str	ip, [sp, #16]
   13c6c:	str	r9, [r8, #-68]	; 0xffffffbc
   13c70:	str	r1, [sp, #20]
   13c74:	beq	13ca0 <flatcc_builder_create_buffer@@Base+0x124>
   13c78:	add	ip, r0, ip
   13c7c:	add	r1, r7, #2
   13c80:	str	ip, [sp, #16]
   13c84:	add	ip, sp, #88	; 0x58
   13c88:	add	r1, ip, r1, lsl #3
   13c8c:	add	r7, r7, #2
   13c90:	add	ip, sp, #12
   13c94:	str	ip, [r1, #-72]	; 0xffffffb8
   13c98:	str	r0, [r1, #-68]	; 0xffffffbc
   13c9c:	str	r7, [sp, #20]
   13ca0:	cmp	r3, #0
   13ca4:	beq	13cd4 <flatcc_builder_create_buffer@@Base+0x158>
   13ca8:	ldr	r1, [sp, #16]
   13cac:	add	r0, sp, #88	; 0x58
   13cb0:	add	r1, r1, r3
   13cb4:	str	r1, [sp, #16]
   13cb8:	ldr	r1, [sp, #20]
   13cbc:	ldr	ip, [pc, #108]	; 13d30 <flatcc_builder_create_buffer@@Base+0x1b4>
   13cc0:	add	r1, r1, #1
   13cc4:	str	r1, [sp, #20]
   13cc8:	add	r0, r0, r1, lsl #3
   13ccc:	str	ip, [r0, #-72]	; 0xffffffb8
   13cd0:	str	r3, [r0, #-68]	; 0xffffffbc
   13cd4:	cmp	r6, #0
   13cd8:	ldr	r3, [sp, #16]
   13cdc:	add	r1, sp, #16
   13ce0:	sub	r3, r2, r3
   13ce4:	ldrne	r2, [r4, #144]	; 0x90
   13ce8:	ldreq	r2, [r4, #140]	; 0x8c
   13cec:	add	r3, r3, lr, lsl #2
   13cf0:	sub	r2, r2, r3
   13cf4:	mov	r0, r4
   13cf8:	sub	r3, r5, r3
   13cfc:	str	r2, [sp, #8]
   13d00:	str	r3, [sp, #4]
   13d04:	bl	13418 <flatcc_builder_default_alloc@@Base+0x3f8>
   13d08:	cmp	r0, #0
   13d0c:	bne	13d28 <flatcc_builder_create_buffer@@Base+0x1ac>
   13d10:	ldr	r3, [pc, #28]	; 13d34 <flatcc_builder_create_buffer@@Base+0x1b8>
   13d14:	mov	r2, #772	; 0x304
   13d18:	ldr	r1, [pc, #24]	; 13d38 <flatcc_builder_create_buffer@@Base+0x1bc>
   13d1c:	ldr	r0, [pc, #24]	; 13d3c <flatcc_builder_create_buffer@@Base+0x1c0>
   13d20:	bl	1237c <__assert_fail@plt>
   13d24:	mov	r0, r7
   13d28:	add	sp, sp, #92	; 0x5c
   13d2c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13d30:	andeq	r7, r1, r5, lsl r3
   13d34:			; <UNDEFINED> instruction: 0x000175ba
   13d38:	strdeq	r7, [r1], -fp
   13d3c:	andeq	r7, r1, r8, ror #20

00013d40 <flatcc_builder_create_struct@@Base>:
   13d40:	cmp	r3, #0
   13d44:	push	{lr}		; (str lr, [sp, #-4]!)
   13d48:	sub	sp, sp, #76	; 0x4c
   13d4c:	bne	13d64 <flatcc_builder_create_struct@@Base+0x24>
   13d50:	ldr	r3, [pc, #144]	; 13de8 <flatcc_builder_create_struct@@Base+0xa8>
   13d54:	ldr	r2, [pc, #144]	; 13dec <flatcc_builder_create_struct@@Base+0xac>
   13d58:	ldr	r1, [pc, #144]	; 13df0 <flatcc_builder_create_struct@@Base+0xb0>
   13d5c:	ldr	r0, [pc, #144]	; 13df4 <flatcc_builder_create_struct@@Base+0xb4>
   13d60:	bl	1237c <__assert_fail@plt>
   13d64:	ldrh	ip, [r0, #128]	; 0x80
   13d68:	cmp	ip, r3
   13d6c:	ldr	ip, [r0, #136]	; 0x88
   13d70:	strhcc	r3, [r0, #128]	; 0x80
   13d74:	sub	ip, ip, r2
   13d78:	sub	r3, r3, #1
   13d7c:	and	r3, r3, ip
   13d80:	mov	ip, #0
   13d84:	cmp	r2, ip
   13d88:	strne	r2, [sp, #12]
   13d8c:	str	ip, [sp]
   13d90:	strne	r2, [sp]
   13d94:	movne	r2, #1
   13d98:	str	ip, [sp, #4]
   13d9c:	strne	r1, [sp, #8]
   13da0:	strne	r2, [sp, #4]
   13da4:	cmp	r3, #0
   13da8:	beq	13dd8 <flatcc_builder_create_struct@@Base+0x98>
   13dac:	ldr	r2, [sp]
   13db0:	add	r1, sp, #72	; 0x48
   13db4:	add	r2, r2, r3
   13db8:	str	r2, [sp]
   13dbc:	ldr	r2, [sp, #4]
   13dc0:	ldr	ip, [pc, #48]	; 13df8 <flatcc_builder_create_struct@@Base+0xb8>
   13dc4:	add	r2, r2, #1
   13dc8:	str	r2, [sp, #4]
   13dcc:	add	r1, r1, r2, lsl #3
   13dd0:	str	ip, [r1, #-72]	; 0xffffffb8
   13dd4:	str	r3, [r1, #-68]	; 0xffffffbc
   13dd8:	mov	r1, sp
   13ddc:	bl	13418 <flatcc_builder_default_alloc@@Base+0x3f8>
   13de0:	add	sp, sp, #76	; 0x4c
   13de4:	pop	{pc}		; (ldr pc, [sp], #4)
   13de8:	ldrdeq	r7, [r1], -r7	; <UNPREDICTABLE>
   13dec:	andeq	r0, r0, pc, lsl #6
   13df0:	strdeq	r7, [r1], -fp
   13df4:	andeq	r7, r1, r2, asr #21
   13df8:	andeq	r7, r1, r5, lsl r3

00013dfc <flatcc_builder_start_buffer@@Base>:
   13dfc:	push	{r4, r5, r6, r7, r8, lr}
   13e00:	mov	r5, r1
   13e04:	ldrh	r1, [r0, #128]	; 0x80
   13e08:	mov	r4, r0
   13e0c:	mov	r7, r2
   13e10:	mov	r6, r3
   13e14:	bl	13188 <flatcc_builder_default_alloc@@Base+0x168>
   13e18:	cmp	r0, #0
   13e1c:	bne	13e90 <flatcc_builder_start_buffer@@Base+0x94>
   13e20:	ldrh	r3, [r4, #132]	; 0x84
   13e24:	ldr	ip, [r4, #32]
   13e28:	mov	r1, #1
   13e2c:	strh	r1, [r4, #128]	; 0x80
   13e30:	strh	r3, [ip, #34]	; 0x22
   13e34:	ldrh	r3, [r4, #164]	; 0xa4
   13e38:	strh	r7, [r4, #132]	; 0x84
   13e3c:	cmp	r5, #0
   13e40:	strh	r3, [ip, #32]
   13e44:	ldr	r3, [r4, #144]	; 0x90
   13e48:	strh	r6, [r4, #164]	; 0xa4
   13e4c:	str	r3, [ip, #20]
   13e50:	ldr	r3, [r4, #152]	; 0x98
   13e54:	str	r3, [ip, #28]
   13e58:	ldr	r3, [r4, #136]	; 0x88
   13e5c:	str	r3, [r4, #144]	; 0x90
   13e60:	ldr	r3, [r4, #148]	; 0x94
   13e64:	str	r3, [r4, #152]	; 0x98
   13e68:	add	r2, r3, r1
   13e6c:	ldr	r3, [r4, #168]	; 0xa8
   13e70:	str	r2, [r4, #148]	; 0x94
   13e74:	str	r3, [ip, #16]
   13e78:	ldr	r3, [pc, #24]	; 13e98 <flatcc_builder_start_buffer@@Base+0x9c>
   13e7c:	moveq	r5, r3
   13e80:	ldr	r3, [r5]
   13e84:	str	r3, [r4, #168]	; 0xa8
   13e88:	strh	r1, [ip, #14]
   13e8c:	pop	{r4, r5, r6, r7, r8, pc}
   13e90:	mvn	r0, #0
   13e94:	pop	{r4, r5, r6, r7, r8, pc}
   13e98:	andeq	r7, r1, r5, lsl r3

00013e9c <flatcc_builder_end_buffer@@Base>:
   13e9c:	push	{r0, r1, r2, r4, r5, lr}
   13ea0:	mov	r4, r0
   13ea4:	ldrh	r0, [r0, #164]	; 0xa4
   13ea8:	ldr	r2, [r4, #152]	; 0x98
   13eac:	and	r0, r0, #2
   13eb0:	cmp	r2, #0
   13eb4:	orrne	r0, r0, #1
   13eb8:	ldr	r2, [r4, #32]
   13ebc:	ldrh	r2, [r2, #14]
   13ec0:	cmp	r2, #1
   13ec4:	beq	13edc <flatcc_builder_end_buffer@@Base+0x40>
   13ec8:	ldr	r3, [pc, #120]	; 13f48 <flatcc_builder_end_buffer@@Base+0xac>
   13ecc:	ldr	r2, [pc, #120]	; 13f4c <flatcc_builder_end_buffer@@Base+0xb0>
   13ed0:	ldr	r1, [pc, #120]	; 13f50 <flatcc_builder_end_buffer@@Base+0xb4>
   13ed4:	ldr	r0, [pc, #120]	; 13f54 <flatcc_builder_end_buffer@@Base+0xb8>
   13ed8:	bl	1237c <__assert_fail@plt>
   13edc:	ldrh	r2, [r4, #132]	; 0x84
   13ee0:	mov	r3, r1
   13ee4:	ldrh	r1, [r4, #128]	; 0x80
   13ee8:	str	r0, [sp, #4]
   13eec:	mov	r0, r4
   13ef0:	cmp	r1, r2
   13ef4:	strhcc	r2, [r4, #128]	; 0x80
   13ef8:	ldrh	r1, [r4, #128]	; 0x80
   13efc:	str	r1, [sp]
   13f00:	add	r1, r4, #168	; 0xa8
   13f04:	bl	13b7c <flatcc_builder_create_buffer@@Base>
   13f08:	subs	r5, r0, #0
   13f0c:	beq	13f3c <flatcc_builder_end_buffer@@Base+0xa0>
   13f10:	ldr	r3, [r4, #32]
   13f14:	mov	r0, r4
   13f18:	ldr	r2, [r3, #20]
   13f1c:	str	r2, [r4, #144]	; 0x90
   13f20:	ldr	r2, [r3, #28]
   13f24:	str	r2, [r4, #152]	; 0x98
   13f28:	ldr	r2, [r3, #16]
   13f2c:	str	r2, [r4, #168]	; 0xa8
   13f30:	ldrh	r3, [r3, #32]
   13f34:	strh	r3, [r4, #164]	; 0xa4
   13f38:	bl	12f14 <_start@@Base+0xa98>
   13f3c:	mov	r0, r5
   13f40:	add	sp, sp, #12
   13f44:	pop	{r4, r5, pc}
   13f48:	strdeq	r7, [r1], -r4
   13f4c:	andeq	r0, r0, r6, asr #6
   13f50:	strdeq	r7, [r1], -fp
   13f54:	andeq	r7, r1, sp, asr #21

00013f58 <flatcc_builder_start_struct@@Base>:
   13f58:	push	{r4, r5, r6, lr}
   13f5c:	mov	r5, r1
   13f60:	mov	r1, r2
   13f64:	mov	r4, r0
   13f68:	bl	13188 <flatcc_builder_default_alloc@@Base+0x168>
   13f6c:	cmp	r0, #0
   13f70:	bne	13f9c <flatcc_builder_start_struct@@Base+0x44>
   13f74:	ldr	r3, [r4, #32]
   13f78:	mov	r2, #2
   13f7c:	mov	r0, r4
   13f80:	mvn	r1, #3
   13f84:	strh	r2, [r3, #14]
   13f88:	bl	12e4c <_start@@Base+0x9d0>
   13f8c:	mov	r1, r5
   13f90:	mov	r0, r4
   13f94:	pop	{r4, r5, r6, lr}
   13f98:	b	12ecc <_start@@Base+0xa50>
   13f9c:	mov	r0, #0
   13fa0:	pop	{r4, r5, r6, pc}

00013fa4 <flatcc_builder_struct_edit@@Base>:
   13fa4:	ldr	r0, [r0, #16]
   13fa8:	bx	lr

00013fac <flatcc_builder_end_struct@@Base>:
   13fac:	ldr	r3, [r0, #32]
   13fb0:	push	{r4, r5, r6, lr}
   13fb4:	ldrh	r3, [r3, #14]
   13fb8:	cmp	r3, #2
   13fbc:	beq	13fd4 <flatcc_builder_end_struct@@Base+0x28>
   13fc0:	ldr	r3, [pc, #56]	; 14000 <flatcc_builder_end_struct@@Base+0x54>
   13fc4:	mov	r2, #872	; 0x368
   13fc8:	ldr	r1, [pc, #52]	; 14004 <flatcc_builder_end_struct@@Base+0x58>
   13fcc:	ldr	r0, [pc, #52]	; 14008 <flatcc_builder_end_struct@@Base+0x5c>
   13fd0:	bl	1237c <__assert_fail@plt>
   13fd4:	ldrh	r3, [r0, #130]	; 0x82
   13fd8:	ldr	r2, [r0, #20]
   13fdc:	ldr	r1, [r0, #16]
   13fe0:	mov	r4, r0
   13fe4:	bl	13d40 <flatcc_builder_create_struct@@Base>
   13fe8:	subs	r5, r0, #0
   13fec:	beq	13ff8 <flatcc_builder_end_struct@@Base+0x4c>
   13ff0:	mov	r0, r4
   13ff4:	bl	12f14 <_start@@Base+0xa98>
   13ff8:	mov	r0, r5
   13ffc:	pop	{r4, r5, r6, pc}
   14000:	andeq	r7, r1, lr, lsl #12
   14004:	strdeq	r7, [r1], -fp
   14008:	strdeq	r7, [r1], -r9

0001400c <flatcc_builder_extend_vector@@Base>:
   1400c:	push	{r4, r5, r6, lr}
   14010:	mov	r4, r0
   14014:	ldr	r0, [r0, #32]
   14018:	mov	r5, r1
   1401c:	ldr	r2, [r0, #24]
   14020:	bl	13498 <flatcc_builder_default_alloc@@Base+0x478>
   14024:	cmp	r0, #0
   14028:	bne	14044 <flatcc_builder_extend_vector@@Base+0x38>
   1402c:	ldr	r3, [r4, #32]
   14030:	mov	r0, r4
   14034:	ldr	r1, [r3, #16]
   14038:	mul	r1, r1, r5
   1403c:	pop	{r4, r5, r6, lr}
   14040:	b	12ecc <_start@@Base+0xa50>
   14044:	mov	r0, #0
   14048:	pop	{r4, r5, r6, pc}

0001404c <flatcc_builder_vector_push@@Base>:
   1404c:	ldr	r3, [r0, #32]
   14050:	push	{r4, lr}
   14054:	ldrh	r2, [r3, #14]
   14058:	cmp	r2, #4
   1405c:	beq	14074 <flatcc_builder_vector_push@@Base+0x28>
   14060:	ldr	r3, [pc, #64]	; 140a8 <flatcc_builder_vector_push@@Base+0x5c>
   14064:	ldr	r2, [pc, #64]	; 140ac <flatcc_builder_vector_push@@Base+0x60>
   14068:	ldr	r1, [pc, #64]	; 140b0 <flatcc_builder_vector_push@@Base+0x64>
   1406c:	ldr	r0, [pc, #64]	; 140b4 <flatcc_builder_vector_push@@Base+0x68>
   14070:	bl	1237c <__assert_fail@plt>
   14074:	ldr	r2, [r3, #20]
   14078:	ldr	ip, [r3, #24]
   1407c:	cmp	r2, ip
   14080:	ldrhi	r3, [pc, #32]	; 140a8 <flatcc_builder_vector_push@@Base+0x5c>
   14084:	movhi	r2, #908	; 0x38c
   14088:	ldrhi	r1, [pc, #32]	; 140b0 <flatcc_builder_vector_push@@Base+0x64>
   1408c:	ldrhi	r0, [pc, #36]	; 140b8 <flatcc_builder_vector_push@@Base+0x6c>
   14090:	bhi	14070 <flatcc_builder_vector_push@@Base+0x24>
   14094:	add	r2, r2, #1
   14098:	str	r2, [r3, #20]
   1409c:	ldr	r2, [r3, #16]
   140a0:	pop	{r4, lr}
   140a4:	b	12fa0 <_start@@Base+0xb24>
   140a8:	andeq	r7, r1, r8, lsr #12
   140ac:	andeq	r0, r0, fp, lsl #7
   140b0:	strdeq	r7, [r1], -fp
   140b4:	andeq	r7, r1, r5, lsr #22
   140b8:	andeq	r7, r1, r1, asr fp

000140bc <flatcc_builder_append_vector@@Base>:
   140bc:	push	{r4, r5, r6, lr}
   140c0:	mov	r4, r0
   140c4:	ldr	r0, [r0, #32]
   140c8:	ldrh	r3, [r0, #14]
   140cc:	cmp	r3, #4
   140d0:	beq	140e8 <flatcc_builder_append_vector@@Base+0x2c>
   140d4:	ldr	r3, [pc, #76]	; 14128 <flatcc_builder_append_vector@@Base+0x6c>
   140d8:	ldr	r2, [pc, #76]	; 1412c <flatcc_builder_append_vector@@Base+0x70>
   140dc:	ldr	r1, [pc, #76]	; 14130 <flatcc_builder_append_vector@@Base+0x74>
   140e0:	ldr	r0, [pc, #76]	; 14134 <flatcc_builder_append_vector@@Base+0x78>
   140e4:	bl	1237c <__assert_fail@plt>
   140e8:	mov	r5, r2
   140ec:	mov	r6, r1
   140f0:	ldr	r2, [r0, #24]
   140f4:	mov	r1, r5
   140f8:	bl	13498 <flatcc_builder_default_alloc@@Base+0x478>
   140fc:	cmp	r0, #0
   14100:	bne	14120 <flatcc_builder_append_vector@@Base+0x64>
   14104:	ldr	r3, [r4, #32]
   14108:	mov	r1, r6
   1410c:	mov	r0, r4
   14110:	ldr	r2, [r3, #16]
   14114:	mul	r2, r2, r5
   14118:	pop	{r4, r5, r6, lr}
   1411c:	b	12fa0 <_start@@Base+0xb24>
   14120:	mov	r0, #0
   14124:	pop	{r4, r5, r6, pc}
   14128:	andeq	r7, r1, r3, asr #12
   1412c:	muleq	r0, r3, r3
   14130:	strdeq	r7, [r1], -fp
   14134:	andeq	r7, r1, r5, lsr #22

00014138 <flatcc_builder_extend_offset_vector@@Base>:
   14138:	push	{r4, r5, r6, lr}
   1413c:	mvn	r2, #-1073741824	; 0xc0000000
   14140:	mov	r4, r0
   14144:	ldr	r0, [r0, #32]
   14148:	mov	r5, r1
   1414c:	bl	13498 <flatcc_builder_default_alloc@@Base+0x478>
   14150:	cmp	r0, #0
   14154:	bne	14168 <flatcc_builder_extend_offset_vector@@Base+0x30>
   14158:	lsl	r1, r5, #2
   1415c:	mov	r0, r4
   14160:	pop	{r4, r5, r6, lr}
   14164:	b	12ecc <_start@@Base+0xa50>
   14168:	mov	r0, #0
   1416c:	pop	{r4, r5, r6, pc}

00014170 <flatcc_builder_offset_vector_push@@Base>:
   14170:	ldr	r2, [r0, #32]
   14174:	push	{r4, lr}
   14178:	ldrh	r3, [r2, #14]
   1417c:	cmp	r3, #5
   14180:	beq	14198 <flatcc_builder_offset_vector_push@@Base+0x28>
   14184:	ldr	r3, [pc, #64]	; 141cc <flatcc_builder_offset_vector_push@@Base+0x5c>
   14188:	ldr	r2, [pc, #64]	; 141d0 <flatcc_builder_offset_vector_push@@Base+0x60>
   1418c:	ldr	r1, [pc, #64]	; 141d4 <flatcc_builder_offset_vector_push@@Base+0x64>
   14190:	ldr	r0, [pc, #64]	; 141d8 <flatcc_builder_offset_vector_push@@Base+0x68>
   14194:	bl	1237c <__assert_fail@plt>
   14198:	ldr	r3, [r2, #20]
   1419c:	cmn	r3, #-1073741823	; 0xc0000001
   141a0:	beq	141c4 <flatcc_builder_offset_vector_push@@Base+0x54>
   141a4:	add	r3, r3, #1
   141a8:	mov	r4, r1
   141ac:	str	r3, [r2, #20]
   141b0:	mov	r1, #4
   141b4:	bl	12ecc <_start@@Base+0xa50>
   141b8:	cmp	r0, #0
   141bc:	strne	r4, [r0]
   141c0:	pop	{r4, pc}
   141c4:	mov	r0, #0
   141c8:	pop	{r4, pc}
   141cc:	andeq	r7, r1, r0, ror #12
   141d0:	andeq	r0, r0, r6, lsr #7
   141d4:	strdeq	r7, [r1], -fp
   141d8:	andeq	r7, r1, lr, lsl #23

000141dc <flatcc_builder_append_offset_vector@@Base>:
   141dc:	push	{r4, r5, r6, lr}
   141e0:	mov	r4, r0
   141e4:	ldr	r0, [r0, #32]
   141e8:	ldrh	r3, [r0, #14]
   141ec:	cmp	r3, #5
   141f0:	beq	14208 <flatcc_builder_append_offset_vector@@Base+0x2c>
   141f4:	ldr	r3, [pc, #68]	; 14240 <flatcc_builder_append_offset_vector@@Base+0x64>
   141f8:	mov	r2, #948	; 0x3b4
   141fc:	ldr	r1, [pc, #64]	; 14244 <flatcc_builder_append_offset_vector@@Base+0x68>
   14200:	ldr	r0, [pc, #64]	; 14248 <flatcc_builder_append_offset_vector@@Base+0x6c>
   14204:	bl	1237c <__assert_fail@plt>
   14208:	mov	r5, r2
   1420c:	mov	r6, r1
   14210:	mvn	r2, #-1073741824	; 0xc0000000
   14214:	mov	r1, r5
   14218:	bl	13498 <flatcc_builder_default_alloc@@Base+0x478>
   1421c:	cmp	r0, #0
   14220:	bne	14238 <flatcc_builder_append_offset_vector@@Base+0x5c>
   14224:	lsl	r2, r5, #2
   14228:	mov	r1, r6
   1422c:	mov	r0, r4
   14230:	pop	{r4, r5, r6, lr}
   14234:	b	12fa0 <_start@@Base+0xb24>
   14238:	mov	r0, #0
   1423c:	pop	{r4, r5, r6, pc}
   14240:	andeq	r7, r1, r2, lsl #13
   14244:	strdeq	r7, [r1], -fp
   14248:	andeq	r7, r1, lr, lsl #23

0001424c <flatcc_builder_extend_string@@Base>:
   1424c:	push	{r4, r5, r6, lr}
   14250:	mov	r4, r0
   14254:	ldr	r0, [r0, #32]
   14258:	ldrh	r3, [r0, #14]
   1425c:	cmp	r3, #6
   14260:	beq	14278 <flatcc_builder_extend_string@@Base+0x2c>
   14264:	ldr	r3, [pc, #56]	; 142a4 <flatcc_builder_extend_string@@Base+0x58>
   14268:	ldr	r2, [pc, #56]	; 142a8 <flatcc_builder_extend_string@@Base+0x5c>
   1426c:	ldr	r1, [pc, #56]	; 142ac <flatcc_builder_extend_string@@Base+0x60>
   14270:	ldr	r0, [pc, #56]	; 142b0 <flatcc_builder_extend_string@@Base+0x64>
   14274:	bl	1237c <__assert_fail@plt>
   14278:	mvn	r2, #0
   1427c:	mov	r5, r1
   14280:	bl	13498 <flatcc_builder_default_alloc@@Base+0x478>
   14284:	cmp	r0, #0
   14288:	bne	1429c <flatcc_builder_extend_string@@Base+0x50>
   1428c:	mov	r1, r5
   14290:	mov	r0, r4
   14294:	pop	{r4, r5, r6, lr}
   14298:	b	12ecc <_start@@Base+0xa50>
   1429c:	mov	r0, #0
   142a0:	pop	{r4, r5, r6, pc}
   142a4:	andeq	r7, r1, r6, lsr #13
   142a8:			; <UNDEFINED> instruction: 0x000003bd
   142ac:	strdeq	r7, [r1], -fp
   142b0:	andeq	r7, r1, r1, asr #23

000142b4 <flatcc_builder_append_string@@Base>:
   142b4:	push	{r4, r5, r6, lr}
   142b8:	mov	r4, r0
   142bc:	ldr	r0, [r0, #32]
   142c0:	ldrh	r3, [r0, #14]
   142c4:	cmp	r3, #6
   142c8:	beq	142e0 <flatcc_builder_append_string@@Base+0x2c>
   142cc:	ldr	r3, [pc, #68]	; 14318 <flatcc_builder_append_string@@Base+0x64>
   142d0:	ldr	r2, [pc, #68]	; 1431c <flatcc_builder_append_string@@Base+0x68>
   142d4:	ldr	r1, [pc, #68]	; 14320 <flatcc_builder_append_string@@Base+0x6c>
   142d8:	ldr	r0, [pc, #68]	; 14324 <flatcc_builder_append_string@@Base+0x70>
   142dc:	bl	1237c <__assert_fail@plt>
   142e0:	mov	r5, r2
   142e4:	mov	r6, r1
   142e8:	mvn	r2, #0
   142ec:	mov	r1, r5
   142f0:	bl	13498 <flatcc_builder_default_alloc@@Base+0x478>
   142f4:	cmp	r0, #0
   142f8:	bne	14310 <flatcc_builder_append_string@@Base+0x5c>
   142fc:	mov	r2, r5
   14300:	mov	r1, r6
   14304:	mov	r0, r4
   14308:	pop	{r4, r5, r6, lr}
   1430c:	b	12fa0 <_start@@Base+0xb24>
   14310:	mov	r0, #0
   14314:	pop	{r4, r5, r6, pc}
   14318:	andeq	r7, r1, r3, asr #13
   1431c:	andeq	r0, r0, r6, asr #7
   14320:	strdeq	r7, [r1], -fp
   14324:	andeq	r7, r1, r1, asr #23

00014328 <flatcc_builder_append_string_str@@Base>:
   14328:	push	{r4, r5, r6, lr}
   1432c:	mov	r5, r0
   14330:	mov	r0, r1
   14334:	mov	r4, r1
   14338:	bl	12334 <strlen@plt>
   1433c:	mov	r1, r4
   14340:	mov	r2, r0
   14344:	mov	r0, r5
   14348:	pop	{r4, r5, r6, lr}
   1434c:	b	142b4 <flatcc_builder_append_string@@Base>

00014350 <flatcc_builder_append_string_strn@@Base>:
   14350:	push	{r4, r5, r6, lr}
   14354:	mov	r4, r1
   14358:	mov	r6, r0
   1435c:	mov	r1, #0
   14360:	mov	r0, r4
   14364:	mov	r5, r2
   14368:	bl	12364 <memchr@plt>
   1436c:	mov	r1, r4
   14370:	cmp	r0, #0
   14374:	subne	r5, r0, r4
   14378:	mov	r2, r5
   1437c:	mov	r0, r6
   14380:	pop	{r4, r5, r6, lr}
   14384:	b	142b4 <flatcc_builder_append_string@@Base>

00014388 <flatcc_builder_truncate_vector@@Base>:
   14388:	ldr	r3, [r0, #32]
   1438c:	push	{r4, lr}
   14390:	ldrh	r2, [r3, #14]
   14394:	cmp	r2, #4
   14398:	beq	143b0 <flatcc_builder_truncate_vector@@Base+0x28>
   1439c:	ldr	r3, [pc, #68]	; 143e8 <flatcc_builder_truncate_vector@@Base+0x60>
   143a0:	ldr	r2, [pc, #68]	; 143ec <flatcc_builder_truncate_vector@@Base+0x64>
   143a4:	ldr	r1, [pc, #68]	; 143f0 <flatcc_builder_truncate_vector@@Base+0x68>
   143a8:	ldr	r0, [pc, #68]	; 143f4 <flatcc_builder_truncate_vector@@Base+0x6c>
   143ac:	bl	1237c <__assert_fail@plt>
   143b0:	ldr	r2, [r3, #20]
   143b4:	cmp	r2, r1
   143b8:	ldrcc	r3, [pc, #40]	; 143e8 <flatcc_builder_truncate_vector@@Base+0x60>
   143bc:	ldrcc	r2, [pc, #52]	; 143f8 <flatcc_builder_truncate_vector@@Base+0x70>
   143c0:	ldrcc	r1, [pc, #40]	; 143f0 <flatcc_builder_truncate_vector@@Base+0x68>
   143c4:	ldrcc	r0, [pc, #48]	; 143fc <flatcc_builder_truncate_vector@@Base+0x74>
   143c8:	bcc	143ac <flatcc_builder_truncate_vector@@Base+0x24>
   143cc:	sub	r2, r2, r1
   143d0:	str	r2, [r3, #20]
   143d4:	ldr	r3, [r3, #16]
   143d8:	mul	r1, r3, r1
   143dc:	bl	12f80 <_start@@Base+0xb04>
   143e0:	mov	r0, #0
   143e4:	pop	{r4, pc}
   143e8:	andeq	r7, r1, r0, ror #13
   143ec:	ldrdeq	r0, [r0], -r9
   143f0:	strdeq	r7, [r1], -fp
   143f4:	andeq	r7, r1, r5, lsr #22
   143f8:	ldrdeq	r0, [r0], -sl
   143fc:	andeq	r7, r1, sp, ror #23

00014400 <flatcc_builder_truncate_offset_vector@@Base>:
   14400:	ldr	r3, [r0, #32]
   14404:	push	{r4, lr}
   14408:	ldrh	r2, [r3, #14]
   1440c:	cmp	r2, #5
   14410:	beq	14428 <flatcc_builder_truncate_offset_vector@@Base+0x28>
   14414:	ldr	r3, [pc, #68]	; 14460 <flatcc_builder_truncate_offset_vector@@Base+0x60>
   14418:	ldr	r2, [pc, #68]	; 14464 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   1441c:	ldr	r1, [pc, #68]	; 14468 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   14420:	ldr	r0, [pc, #68]	; 1446c <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   14424:	bl	1237c <__assert_fail@plt>
   14428:	ldr	r2, [r3, #20]
   1442c:	cmp	r2, r1
   14430:	ldrcc	r3, [pc, #40]	; 14460 <flatcc_builder_truncate_offset_vector@@Base+0x60>
   14434:	ldrcc	r2, [pc, #52]	; 14470 <flatcc_builder_truncate_offset_vector@@Base+0x70>
   14438:	ldrcc	r1, [pc, #40]	; 14468 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   1443c:	ldrcc	r0, [pc, #48]	; 14474 <flatcc_builder_truncate_offset_vector@@Base+0x74>
   14440:	bcc	14424 <flatcc_builder_truncate_offset_vector@@Base+0x24>
   14444:	sub	r2, r2, r1
   14448:	str	r2, [r3, #20]
   1444c:	ldr	r3, [r3, #16]
   14450:	mul	r1, r3, r1
   14454:	bl	12f80 <_start@@Base+0xb04>
   14458:	mov	r0, #0
   1445c:	pop	{r4, pc}
   14460:	strdeq	r7, [r1], -pc	; <UNPREDICTABLE>
   14464:	andeq	r0, r0, r2, ror #7
   14468:	strdeq	r7, [r1], -fp
   1446c:	andeq	r7, r1, lr, lsl #23
   14470:	andeq	r0, r0, r3, ror #7
   14474:	andeq	r7, r1, r1, lsl ip

00014478 <flatcc_builder_truncate_string@@Base>:
   14478:	ldr	r2, [r0, #32]
   1447c:	push	{r4, lr}
   14480:	ldrh	r3, [r2, #14]
   14484:	cmp	r3, #6
   14488:	beq	144a0 <flatcc_builder_truncate_string@@Base+0x28>
   1448c:	ldr	r3, [pc, #60]	; 144d0 <flatcc_builder_truncate_string@@Base+0x58>
   14490:	ldr	r2, [pc, #60]	; 144d4 <flatcc_builder_truncate_string@@Base+0x5c>
   14494:	ldr	r1, [pc, #60]	; 144d8 <flatcc_builder_truncate_string@@Base+0x60>
   14498:	ldr	r0, [pc, #60]	; 144dc <flatcc_builder_truncate_string@@Base+0x64>
   1449c:	bl	1237c <__assert_fail@plt>
   144a0:	ldr	r3, [r2, #20]
   144a4:	cmp	r3, r1
   144a8:	ldrcc	r3, [pc, #32]	; 144d0 <flatcc_builder_truncate_string@@Base+0x58>
   144ac:	movcc	r2, #1004	; 0x3ec
   144b0:	ldrcc	r1, [pc, #32]	; 144d8 <flatcc_builder_truncate_string@@Base+0x60>
   144b4:	ldrcc	r0, [pc, #36]	; 144e0 <flatcc_builder_truncate_string@@Base+0x68>
   144b8:	bcc	1449c <flatcc_builder_truncate_string@@Base+0x24>
   144bc:	sub	r3, r3, r1
   144c0:	str	r3, [r2, #20]
   144c4:	bl	12f80 <_start@@Base+0xb04>
   144c8:	mov	r0, #0
   144cc:	pop	{r4, pc}
   144d0:	andeq	r7, r1, r5, lsr #14
   144d4:	andeq	r0, r0, fp, ror #7
   144d8:	strdeq	r7, [r1], -fp
   144dc:	andeq	r7, r1, r1, asr #23
   144e0:	andeq	r7, r1, ip, asr #24

000144e4 <flatcc_builder_start_vector@@Base>:
   144e4:	cmp	r2, #4
   144e8:	push	{r4, r5, r6, r7, r8, lr}
   144ec:	mov	r7, r1
   144f0:	movcs	r1, r2
   144f4:	movcc	r1, #4
   144f8:	mov	r5, r0
   144fc:	mov	r6, r3
   14500:	bl	13188 <flatcc_builder_default_alloc@@Base+0x168>
   14504:	subs	r4, r0, #0
   14508:	mvnne	r4, #0
   1450c:	bne	14534 <flatcc_builder_start_vector@@Base+0x50>
   14510:	ldr	r2, [r5, #32]
   14514:	mov	r3, #4
   14518:	mvn	r1, #3
   1451c:	str	r7, [r2, #16]
   14520:	str	r4, [r2, #20]
   14524:	str	r6, [r2, #24]
   14528:	strh	r3, [r2, #14]
   1452c:	mov	r0, r5
   14530:	bl	12e4c <_start@@Base+0x9d0>
   14534:	mov	r0, r4
   14538:	pop	{r4, r5, r6, r7, r8, pc}

0001453c <flatcc_builder_start_offset_vector@@Base>:
   1453c:	push	{r4, r5, r6, lr}
   14540:	mov	r1, #4
   14544:	mov	r5, r0
   14548:	bl	13188 <flatcc_builder_default_alloc@@Base+0x168>
   1454c:	subs	r4, r0, #0
   14550:	mvnne	r4, #0
   14554:	bne	1457c <flatcc_builder_start_offset_vector@@Base+0x40>
   14558:	ldr	r3, [r5, #32]
   1455c:	mov	r2, #4
   14560:	mvn	r1, #3
   14564:	str	r2, [r3, #16]
   14568:	mov	r2, #5
   1456c:	str	r4, [r3, #20]
   14570:	strh	r2, [r3, #14]
   14574:	mov	r0, r5
   14578:	bl	12e4c <_start@@Base+0x9d0>
   1457c:	mov	r0, r4
   14580:	pop	{r4, r5, r6, pc}

00014584 <flatcc_builder_start_string@@Base>:
   14584:	push	{r4, r5, r6, lr}
   14588:	mov	r1, #1
   1458c:	mov	r5, r0
   14590:	bl	13188 <flatcc_builder_default_alloc@@Base+0x168>
   14594:	subs	r4, r0, #0
   14598:	mvnne	r4, #0
   1459c:	bne	145c4 <flatcc_builder_start_string@@Base+0x40>
   145a0:	ldr	r3, [r5, #32]
   145a4:	mov	r2, #1
   145a8:	mvn	r1, #3
   145ac:	str	r2, [r3, #16]
   145b0:	mov	r2, #6
   145b4:	str	r4, [r3, #20]
   145b8:	strh	r2, [r3, #14]
   145bc:	mov	r0, r5
   145c0:	bl	12e4c <_start@@Base+0x9d0>
   145c4:	mov	r0, r4
   145c8:	pop	{r4, r5, r6, pc}

000145cc <flatcc_builder_reserve_table@@Base>:
   145cc:	cmp	r1, #0
   145d0:	bge	145ec <flatcc_builder_reserve_table@@Base+0x20>
   145d4:	push	{r4, lr}
   145d8:	ldr	r3, [pc, #16]	; 145f0 <flatcc_builder_reserve_table@@Base+0x24>
   145dc:	ldr	r2, [pc, #16]	; 145f4 <flatcc_builder_reserve_table@@Base+0x28>
   145e0:	ldr	r1, [pc, #16]	; 145f8 <flatcc_builder_reserve_table@@Base+0x2c>
   145e4:	ldr	r0, [pc, #16]	; 145fc <flatcc_builder_reserve_table@@Base+0x30>
   145e8:	bl	1237c <__assert_fail@plt>
   145ec:	b	13268 <flatcc_builder_default_alloc@@Base+0x248>
   145f0:	andeq	r7, r1, r4, asr #14
   145f4:	andeq	r0, r0, r9, lsr #8
   145f8:	strdeq	r7, [r1], -fp
   145fc:	andeq	r7, r1, r4, lsl #25

00014600 <flatcc_builder_start_table@@Base>:
   14600:	push	{r4, r5, r6, lr}
   14604:	mov	r5, r1
   14608:	mov	r1, #4
   1460c:	mov	r4, r0
   14610:	bl	13188 <flatcc_builder_default_alloc@@Base+0x168>
   14614:	cmp	r0, #0
   14618:	beq	14628 <flatcc_builder_start_table@@Base+0x28>
   1461c:	mvn	r5, #0
   14620:	mov	r0, r5
   14624:	pop	{r4, r5, r6, pc}
   14628:	ldr	r1, [r4, #52]	; 0x34
   1462c:	ldr	r2, [r4, #4]
   14630:	ldr	r3, [r4, #32]
   14634:	sub	r2, r2, r1
   14638:	str	r2, [r3, #16]
   1463c:	ldr	r1, [r4, #76]	; 0x4c
   14640:	ldr	r2, [r4]
   14644:	sub	r2, r2, r1
   14648:	str	r2, [r3, #20]
   1464c:	ldr	r2, [r4, #12]
   14650:	mov	r1, r5
   14654:	str	r2, [r3, #24]
   14658:	ldrh	r2, [r4, #8]
   1465c:	strh	r2, [r3, #28]
   14660:	ldr	r2, [pc, #44]	; 14694 <flatcc_builder_start_table@@Base+0x94>
   14664:	strh	r0, [r4, #8]
   14668:	str	r2, [r4, #12]
   1466c:	mov	r2, #3
   14670:	strh	r2, [r3, #14]
   14674:	mov	r0, r4
   14678:	bl	13268 <flatcc_builder_default_alloc@@Base+0x248>
   1467c:	subs	r5, r0, #0
   14680:	bne	1461c <flatcc_builder_start_table@@Base+0x1c>
   14684:	ldr	r1, [pc, #12]	; 14698 <flatcc_builder_start_table@@Base+0x98>
   14688:	mov	r0, r4
   1468c:	bl	12e4c <_start@@Base+0x9d0>
   14690:	b	14620 <flatcc_builder_start_table@@Base+0x20>
   14694:	svccs	0x00693b52
   14698:	strdeq	pc, [r0], -ip

0001469c <flatcc_builder_create_vtable@@Base>:
   1469c:	push	{lr}		; (str lr, [sp, #-4]!)
   146a0:	sub	sp, sp, #76	; 0x4c
   146a4:	cmp	r2, #0
   146a8:	mov	r3, #0
   146ac:	str	r3, [sp]
   146b0:	str	r3, [sp, #4]
   146b4:	movne	r3, #1
   146b8:	strne	r3, [sp, #4]
   146bc:	ldr	r3, [r0, #152]	; 0x98
   146c0:	strne	r1, [sp, #8]
   146c4:	strne	r2, [sp]
   146c8:	strne	r2, [sp, #12]
   146cc:	cmp	r3, #0
   146d0:	mov	r1, sp
   146d4:	bne	146f0 <flatcc_builder_create_vtable@@Base+0x54>
   146d8:	ldr	r3, [r0, #180]	; 0xb4
   146dc:	cmp	r3, #0
   146e0:	bne	146f0 <flatcc_builder_create_vtable@@Base+0x54>
   146e4:	bl	132ec <flatcc_builder_default_alloc@@Base+0x2cc>
   146e8:	add	sp, sp, #76	; 0x4c
   146ec:	pop	{pc}		; (ldr pc, [sp], #4)
   146f0:	bl	13418 <flatcc_builder_default_alloc@@Base+0x3f8>
   146f4:	cmp	r0, #0
   146f8:	addne	r0, r0, #1
   146fc:	b	146e8 <flatcc_builder_create_vtable@@Base+0x4c>

00014700 <flatcc_builder_create_cached_vtable@@Base>:
   14700:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14704:	mov	r4, r0
   14708:	ldr	r5, [r0, #116]	; 0x74
   1470c:	sub	sp, sp, #20
   14710:	cmp	r5, #0
   14714:	mov	fp, r1
   14718:	mov	r7, r2
   1471c:	mov	r6, r3
   14720:	bne	147c8 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   14724:	ldr	r3, [r0, #124]	; 0x7c
   14728:	add	r9, r0, #92	; 0x5c
   1472c:	cmp	r3, #0
   14730:	beq	14748 <flatcc_builder_create_cached_vtable@@Base+0x48>
   14734:	ldr	r3, [pc, #556]	; 14968 <flatcc_builder_create_cached_vtable@@Base+0x268>
   14738:	ldr	r2, [pc, #556]	; 1496c <flatcc_builder_create_cached_vtable@@Base+0x26c>
   1473c:	ldr	r1, [pc, #556]	; 14970 <flatcc_builder_create_cached_vtable@@Base+0x270>
   14740:	ldr	r0, [pc, #556]	; 14974 <flatcc_builder_create_cached_vtable@@Base+0x274>
   14744:	bl	1237c <__assert_fail@plt>
   14748:	str	r5, [sp]
   1474c:	mov	r3, #16
   14750:	mov	r2, r5
   14754:	mov	r1, #6
   14758:	bl	13118 <flatcc_builder_default_alloc@@Base+0xf8>
   1475c:	cmp	r0, #0
   14760:	beq	1479c <flatcc_builder_create_cached_vtable@@Base+0x9c>
   14764:	mov	r3, #16
   14768:	str	r3, [r4, #124]	; 0x7c
   1476c:	mov	r3, #5
   14770:	str	r3, [sp]
   14774:	mov	r1, r9
   14778:	mov	r3, #1
   1477c:	ldr	r8, [r4, #48]	; 0x30
   14780:	mov	r2, #256	; 0x100
   14784:	ldr	r0, [r4, #40]	; 0x28
   14788:	blx	r8
   1478c:	cmp	r0, #0
   14790:	moveq	r3, #256	; 0x100
   14794:	ldreq	r1, [r4, #96]	; 0x60
   14798:	beq	147a8 <flatcc_builder_create_cached_vtable@@Base+0xa8>
   1479c:	mov	r0, #0
   147a0:	b	14918 <flatcc_builder_create_cached_vtable@@Base+0x218>
   147a4:	mov	r3, r2
   147a8:	lsl	r2, r3, #1
   147ac:	cmp	r2, r1
   147b0:	bls	147a4 <flatcc_builder_create_cached_vtable@@Base+0xa4>
   147b4:	lsr	r3, r3, #2
   147b8:	mov	r2, #1
   147bc:	cmp	r3, r2, lsl r5
   147c0:	bhi	14888 <flatcc_builder_create_cached_vtable@@Base+0x188>
   147c4:	str	r5, [r4, #116]	; 0x74
   147c8:	ldr	r3, [r4, #116]	; 0x74
   147cc:	ldr	r8, [r4, #92]	; 0x5c
   147d0:	rsb	r3, r3, #32
   147d4:	lsr	r6, r6, r3
   147d8:	adds	r3, r8, r6, lsl #2
   147dc:	str	r3, [sp, #8]
   147e0:	ldrne	r9, [r8, r6, lsl #2]
   147e4:	movne	sl, #0
   147e8:	beq	1479c <flatcc_builder_create_cached_vtable@@Base+0x9c>
   147ec:	cmp	r9, #0
   147f0:	bne	14890 <flatcc_builder_create_cached_vtable@@Base+0x190>
   147f4:	str	r9, [sp]
   147f8:	mov	r3, #16
   147fc:	ldr	r2, [r4, #124]	; 0x7c
   14800:	mov	r1, #6
   14804:	mov	r0, r4
   14808:	bl	13118 <flatcc_builder_default_alloc@@Base+0xf8>
   1480c:	subs	r5, r0, #0
   14810:	beq	1479c <flatcc_builder_create_cached_vtable@@Base+0x9c>
   14814:	ldr	r3, [r4, #124]	; 0x7c
   14818:	mov	r1, fp
   1481c:	add	r2, r3, #16
   14820:	str	r2, [r4, #124]	; 0x7c
   14824:	ldr	r2, [r4, #152]	; 0x98
   14828:	mov	r0, r4
   1482c:	str	r2, [r5, #4]
   14830:	ldr	r2, [r8, r6, lsl #2]
   14834:	str	r2, [r5, #12]
   14838:	str	r3, [r8, r6, lsl #2]
   1483c:	mov	r2, r7
   14840:	bl	1469c <flatcc_builder_create_vtable@@Base>
   14844:	cmp	r0, #0
   14848:	str	r0, [r5]
   1484c:	beq	1479c <flatcc_builder_create_cached_vtable@@Base+0x9c>
   14850:	cmp	sl, #0
   14854:	ldrne	r3, [sl, #8]
   14858:	strne	r3, [r5, #8]
   1485c:	bne	14914 <flatcc_builder_create_cached_vtable@@Base+0x214>
   14860:	ldr	r2, [r4, #172]	; 0xac
   14864:	cmp	r2, #0
   14868:	beq	14920 <flatcc_builder_create_cached_vtable@@Base+0x220>
   1486c:	ldr	r3, [r4, #120]	; 0x78
   14870:	add	r3, r7, r3
   14874:	cmp	r2, r3
   14878:	bcs	14920 <flatcc_builder_create_cached_vtable@@Base+0x220>
   1487c:	mov	r0, r4
   14880:	bl	1365c <flatcc_builder_flush_vtable_cache@@Base>
   14884:	b	14914 <flatcc_builder_create_cached_vtable@@Base+0x214>
   14888:	add	r5, r5, #1
   1488c:	b	147bc <flatcc_builder_create_cached_vtable@@Base+0xbc>
   14890:	ldr	r5, [r4, #100]	; 0x64
   14894:	ldr	r0, [r4, #68]	; 0x44
   14898:	add	r5, r5, r9
   1489c:	ldr	r2, [r5, #8]
   148a0:	add	r1, r0, r2
   148a4:	ldrh	r2, [r0, r2]
   148a8:	cmp	r2, r7
   148ac:	bne	148cc <flatcc_builder_create_cached_vtable@@Base+0x1cc>
   148b0:	mov	r2, r7
   148b4:	mov	r0, fp
   148b8:	str	r3, [sp, #12]
   148bc:	bl	122f8 <memcmp@plt>
   148c0:	ldr	r3, [sp, #12]
   148c4:	cmp	r0, #0
   148c8:	beq	148e0 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   148cc:	add	r3, r5, #12
   148d0:	ldr	r9, [r5, #12]
   148d4:	mov	r5, sl
   148d8:	mov	sl, r5
   148dc:	b	147ec <flatcc_builder_create_cached_vtable@@Base+0xec>
   148e0:	ldr	r1, [r5, #4]
   148e4:	ldr	r2, [r4, #152]	; 0x98
   148e8:	cmp	r1, r2
   148ec:	addne	r3, r5, #12
   148f0:	ldrne	r9, [r5, #12]
   148f4:	bne	148d8 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   148f8:	ldr	r2, [sp, #8]
   148fc:	cmp	r3, r2
   14900:	ldrne	r2, [r5, #12]
   14904:	strne	r2, [r3]
   14908:	ldrne	r3, [r8, r6, lsl #2]
   1490c:	strne	r3, [r5, #12]
   14910:	strne	r9, [r8, r6, lsl #2]
   14914:	ldr	r0, [r5]
   14918:	add	sp, sp, #20
   1491c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14920:	mov	r3, #0
   14924:	str	r3, [sp]
   14928:	ldr	r2, [r4, #120]	; 0x78
   1492c:	mov	r3, r7
   14930:	mov	r1, #2
   14934:	mov	r0, r4
   14938:	bl	13118 <flatcc_builder_default_alloc@@Base+0xf8>
   1493c:	cmp	r0, #0
   14940:	mvneq	r0, #0
   14944:	beq	14918 <flatcc_builder_create_cached_vtable@@Base+0x218>
   14948:	ldr	r3, [r4, #120]	; 0x78
   1494c:	mov	r2, r7
   14950:	str	r3, [r5, #8]
   14954:	add	r3, r7, r3
   14958:	str	r3, [r4, #120]	; 0x78
   1495c:	mov	r1, fp
   14960:	bl	122ec <memcpy@plt>
   14964:	b	14914 <flatcc_builder_create_cached_vtable@@Base+0x214>
   14968:	andeq	r7, r1, r1, ror #14
   1496c:	andeq	r0, r0, r6, asr r1
   14970:	strdeq	r7, [r1], -fp
   14974:	andeq	r7, r1, lr, ror #24

00014978 <flatcc_builder_create_table@@Base>:
   14978:	push	{r4, r5, r6, r7, lr}
   1497c:	sub	sp, sp, #84	; 0x54
   14980:	ldr	r4, [sp, #108]	; 0x6c
   14984:	ldr	lr, [sp, #112]	; 0x70
   14988:	cmp	r4, #0
   1498c:	bge	149a4 <flatcc_builder_create_table@@Base+0x2c>
   14990:	ldr	r3, [pc, #268]	; 14aa4 <flatcc_builder_create_table@@Base+0x12c>
   14994:	ldr	r2, [pc, #268]	; 14aa8 <flatcc_builder_create_table@@Base+0x130>
   14998:	ldr	r1, [pc, #268]	; 14aac <flatcc_builder_create_table@@Base+0x134>
   1499c:	ldr	r0, [pc, #268]	; 14ab0 <flatcc_builder_create_table@@Base+0x138>
   149a0:	bl	1237c <__assert_fail@plt>
   149a4:	tst	lr, #1
   149a8:	ldreq	r3, [pc, #244]	; 14aa4 <flatcc_builder_create_table@@Base+0x12c>
   149ac:	ldreq	r2, [pc, #256]	; 14ab4 <flatcc_builder_create_table@@Base+0x13c>
   149b0:	ldreq	r1, [pc, #244]	; 14aac <flatcc_builder_create_table@@Base+0x134>
   149b4:	ldreq	r0, [pc, #252]	; 14ab8 <flatcc_builder_create_table@@Base+0x140>
   149b8:	beq	149a0 <flatcc_builder_create_table@@Base+0x28>
   149bc:	ldrh	ip, [r0, #128]	; 0x80
   149c0:	cmp	r3, #4
   149c4:	movcc	r3, #4
   149c8:	ldr	r6, [r0, #136]	; 0x88
   149cc:	cmp	ip, r3
   149d0:	mvn	r5, #3
   149d4:	sub	ip, r6, r2
   149d8:	strhcc	r3, [r0, #128]	; 0x80
   149dc:	sub	r3, r3, #1
   149e0:	and	r3, r3, ip
   149e4:	sub	ip, r5, r2
   149e8:	add	ip, ip, r6
   149ec:	sub	ip, ip, r3
   149f0:	sub	lr, lr, #1
   149f4:	sub	lr, ip, lr
   149f8:	str	lr, [sp, #4]
   149fc:	ldr	lr, [sp, #104]	; 0x68
   14a00:	sub	ip, r5, ip
   14a04:	add	r4, lr, r4, lsl #1
   14a08:	cmp	r4, lr
   14a0c:	bne	14a8c <flatcc_builder_create_table@@Base+0x114>
   14a10:	mov	ip, #4
   14a14:	cmp	r2, #0
   14a18:	str	ip, [sp, #8]
   14a1c:	add	lr, sp, ip
   14a20:	str	ip, [sp, #20]
   14a24:	mov	ip, #1
   14a28:	str	ip, [sp, #12]
   14a2c:	strne	r2, [sp, #28]
   14a30:	addne	ip, r2, #4
   14a34:	movne	r2, #2
   14a38:	strne	ip, [sp, #8]
   14a3c:	strne	r1, [sp, #24]
   14a40:	strne	r2, [sp, #12]
   14a44:	cmp	r3, #0
   14a48:	str	lr, [sp, #16]
   14a4c:	beq	14a7c <flatcc_builder_create_table@@Base+0x104>
   14a50:	ldr	r2, [sp, #8]
   14a54:	add	r1, sp, #80	; 0x50
   14a58:	add	r2, r2, r3
   14a5c:	str	r2, [sp, #8]
   14a60:	ldr	r2, [sp, #12]
   14a64:	ldr	ip, [pc, #80]	; 14abc <flatcc_builder_create_table@@Base+0x144>
   14a68:	add	r2, r2, #1
   14a6c:	str	r2, [sp, #12]
   14a70:	add	r1, r1, r2, lsl #3
   14a74:	str	ip, [r1, #-72]	; 0xffffffb8
   14a78:	str	r3, [r1, #-68]	; 0xffffffbc
   14a7c:	add	r1, sp, #8
   14a80:	bl	13418 <flatcc_builder_default_alloc@@Base+0x3f8>
   14a84:	add	sp, sp, #84	; 0x54
   14a88:	pop	{r4, r5, r6, r7, pc}
   14a8c:	ldrh	r5, [lr], #2
   14a90:	sub	r7, ip, r5
   14a94:	ldr	r6, [r1, r5]
   14a98:	add	r6, r6, r7
   14a9c:	str	r6, [r1, r5]
   14aa0:	b	14a08 <flatcc_builder_create_table@@Base+0x90>
   14aa4:	andeq	r7, r1, sl, ror #14
   14aa8:	ldrdeq	r0, [r0], -r5
   14aac:	strdeq	r7, [r1], -fp
   14ab0:	andeq	r7, r1, sp, ror ip
   14ab4:	ldrdeq	r0, [r0], -fp
   14ab8:	andeq	r7, r1, pc, lsl #25
   14abc:	andeq	r7, r1, r5, lsl r3

00014ac0 <flatcc_builder_check_required_field@@Base>:
   14ac0:	ldr	r3, [r0, #32]
   14ac4:	ldrh	r3, [r3, #14]
   14ac8:	cmp	r3, #3
   14acc:	beq	14ae8 <flatcc_builder_check_required_field@@Base+0x28>
   14ad0:	push	{r4, lr}
   14ad4:	ldr	r3, [pc, #52]	; 14b10 <flatcc_builder_check_required_field@@Base+0x50>
   14ad8:	ldr	r2, [pc, #52]	; 14b14 <flatcc_builder_check_required_field@@Base+0x54>
   14adc:	ldr	r1, [pc, #52]	; 14b18 <flatcc_builder_check_required_field@@Base+0x58>
   14ae0:	ldr	r0, [pc, #52]	; 14b1c <flatcc_builder_check_required_field@@Base+0x5c>
   14ae4:	bl	1237c <__assert_fail@plt>
   14ae8:	ldrh	r3, [r0, #8]
   14aec:	cmp	r3, r1
   14af0:	movls	r0, #0
   14af4:	bls	14b0c <flatcc_builder_check_required_field@@Base+0x4c>
   14af8:	ldr	r3, [r0, #4]
   14afc:	lsl	r1, r1, #1
   14b00:	ldrh	r0, [r3, r1]
   14b04:	adds	r0, r0, #0
   14b08:	movne	r0, #1
   14b0c:	bx	lr
   14b10:	andeq	r7, r1, r6, lsl #15
   14b14:	strdeq	r0, [r0], -r8
   14b18:	strdeq	r7, [r1], -fp
   14b1c:	muleq	r1, sl, ip

00014b20 <flatcc_builder_check_union_field@@Base>:
   14b20:	ldr	r3, [r0, #32]
   14b24:	ldrh	r3, [r3, #14]
   14b28:	cmp	r3, #3
   14b2c:	beq	14b48 <flatcc_builder_check_union_field@@Base+0x28>
   14b30:	push	{r4, lr}
   14b34:	ldr	r3, [pc, #112]	; 14bac <flatcc_builder_check_union_field@@Base+0x8c>
   14b38:	ldr	r2, [pc, #112]	; 14bb0 <flatcc_builder_check_union_field@@Base+0x90>
   14b3c:	ldr	r1, [pc, #112]	; 14bb4 <flatcc_builder_check_union_field@@Base+0x94>
   14b40:	ldr	r0, [pc, #112]	; 14bb8 <flatcc_builder_check_union_field@@Base+0x98>
   14b44:	bl	1237c <__assert_fail@plt>
   14b48:	cmp	r1, #0
   14b4c:	beq	14ba4 <flatcc_builder_check_union_field@@Base+0x84>
   14b50:	ldrh	r3, [r0, #8]
   14b54:	cmp	r3, r1
   14b58:	bls	14ba4 <flatcc_builder_check_union_field@@Base+0x84>
   14b5c:	sub	r1, r1, #-2147483647	; 0x80000001
   14b60:	ldr	r3, [r0, #4]
   14b64:	lsl	r1, r1, #1
   14b68:	ldrh	r2, [r3, r1]!
   14b6c:	cmp	r2, #0
   14b70:	ldrheq	r0, [r3, #2]
   14b74:	beq	14b98 <flatcc_builder_check_union_field@@Base+0x78>
   14b78:	ldr	r1, [r0, #16]
   14b7c:	ldrh	r0, [r3, #2]
   14b80:	ldrb	r2, [r1, r2]
   14b84:	cmp	r2, #0
   14b88:	beq	14b98 <flatcc_builder_check_union_field@@Base+0x78>
   14b8c:	adds	r0, r0, #0
   14b90:	movne	r0, #1
   14b94:	bx	lr
   14b98:	clz	r0, r0
   14b9c:	lsr	r0, r0, #5
   14ba0:	b	14b94 <flatcc_builder_check_union_field@@Base+0x74>
   14ba4:	mov	r0, #0
   14ba8:	b	14b94 <flatcc_builder_check_union_field@@Base+0x74>
   14bac:	andeq	r7, r1, sl, lsr #15
   14bb0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   14bb4:	strdeq	r7, [r1], -fp
   14bb8:	muleq	r1, sl, ip

00014bbc <flatcc_builder_check_required@@Base>:
   14bbc:	ldr	r3, [r0, #32]
   14bc0:	push	{r4, lr}
   14bc4:	ldrh	r3, [r3, #14]
   14bc8:	cmp	r3, #3
   14bcc:	beq	14be4 <flatcc_builder_check_required@@Base+0x28>
   14bd0:	ldr	r3, [pc, #84]	; 14c2c <flatcc_builder_check_required@@Base+0x70>
   14bd4:	ldr	r2, [pc, #84]	; 14c30 <flatcc_builder_check_required@@Base+0x74>
   14bd8:	ldr	r1, [pc, #84]	; 14c34 <flatcc_builder_check_required@@Base+0x78>
   14bdc:	ldr	r0, [pc, #84]	; 14c38 <flatcc_builder_check_required@@Base+0x7c>
   14be0:	bl	1237c <__assert_fail@plt>
   14be4:	ldrh	r3, [r0, #8]
   14be8:	cmp	r3, r2
   14bec:	subge	r1, r1, #2
   14bf0:	movge	ip, #0
   14bf4:	bge	14c1c <flatcc_builder_check_required@@Base+0x60>
   14bf8:	mov	r0, #0
   14bfc:	pop	{r4, pc}
   14c00:	ldrh	r3, [r1, #2]!
   14c04:	ldr	lr, [r0, #4]
   14c08:	lsl	r3, r3, #1
   14c0c:	ldrh	r3, [lr, r3]
   14c10:	cmp	r3, #0
   14c14:	beq	14bf8 <flatcc_builder_check_required@@Base+0x3c>
   14c18:	add	ip, ip, #1
   14c1c:	cmp	ip, r2
   14c20:	blt	14c00 <flatcc_builder_check_required@@Base+0x44>
   14c24:	mov	r0, #1
   14c28:	pop	{r4, pc}
   14c2c:	andeq	r7, r1, fp, asr #15
   14c30:	andeq	r0, r0, r1, lsl r5
   14c34:	strdeq	r7, [r1], -fp
   14c38:	muleq	r1, sl, ip

00014c3c <flatcc_builder_end_table@@Base>:
   14c3c:	ldr	r3, [r0, #32]
   14c40:	push	{r4, r5, r6, r7, lr}
   14c44:	sub	sp, sp, #20
   14c48:	ldrh	r3, [r3, #14]
   14c4c:	cmp	r3, #3
   14c50:	beq	14c68 <flatcc_builder_end_table@@Base+0x2c>
   14c54:	ldr	r3, [pc, #260]	; 14d60 <flatcc_builder_end_table@@Base+0x124>
   14c58:	ldr	r2, [pc, #260]	; 14d64 <flatcc_builder_end_table@@Base+0x128>
   14c5c:	ldr	r1, [pc, #260]	; 14d68 <flatcc_builder_end_table@@Base+0x12c>
   14c60:	ldr	r0, [pc, #260]	; 14d6c <flatcc_builder_end_table@@Base+0x130>
   14c64:	bl	1237c <__assert_fail@plt>
   14c68:	ldrh	r5, [r0, #8]
   14c6c:	ldr	r3, [r0, #20]
   14c70:	ldr	r1, [r0, #4]
   14c74:	add	r5, r5, #2
   14c78:	add	r3, r3, #4
   14c7c:	lsl	r5, r5, #1
   14c80:	uxth	r2, r3
   14c84:	uxth	r5, r5
   14c88:	ldr	r3, [r0, #12]
   14c8c:	strh	r2, [r1, #-2]
   14c90:	strh	r5, [r1, #-4]
   14c94:	sub	r6, r1, #4
   14c98:	ldr	r1, [pc, #208]	; 14d70 <flatcc_builder_end_table@@Base+0x134>
   14c9c:	eor	r3, r3, r5
   14ca0:	mov	r4, r0
   14ca4:	mul	r3, r1, r3
   14ca8:	eor	r3, r3, r2
   14cac:	mov	r2, r5
   14cb0:	mul	r3, r1, r3
   14cb4:	mov	r1, r6
   14cb8:	str	r3, [r0, #12]
   14cbc:	bl	14700 <flatcc_builder_create_cached_vtable@@Base>
   14cc0:	subs	r7, r0, #0
   14cc4:	beq	14d54 <flatcc_builder_end_table@@Base+0x118>
   14cc8:	mov	r2, r5
   14ccc:	mov	r1, #0
   14cd0:	mov	r0, r6
   14cd4:	bl	1234c <memset@plt>
   14cd8:	ldr	r3, [r4, #32]
   14cdc:	ldr	r1, [r4, #76]	; 0x4c
   14ce0:	mov	r0, r4
   14ce4:	ldr	r3, [r3, #20]
   14ce8:	add	r1, r1, r3
   14cec:	ldrh	r3, [r4, #130]	; 0x82
   14cf0:	str	r7, [sp, #8]
   14cf4:	ldr	r2, [r4]
   14cf8:	sub	r2, r2, r1
   14cfc:	asr	r2, r2, #1
   14d00:	stm	sp, {r1, r2}
   14d04:	ldr	r2, [r4, #20]
   14d08:	ldr	r1, [r4, #16]
   14d0c:	bl	14978 <flatcc_builder_create_table@@Base>
   14d10:	subs	r7, r0, #0
   14d14:	beq	14d54 <flatcc_builder_end_table@@Base+0x118>
   14d18:	ldr	r3, [r4, #32]
   14d1c:	mov	r0, r4
   14d20:	ldr	r2, [r3, #24]
   14d24:	str	r2, [r4, #12]
   14d28:	ldrh	r2, [r3, #28]
   14d2c:	strh	r2, [r4, #8]
   14d30:	ldr	r2, [r4, #52]	; 0x34
   14d34:	ldr	r1, [r3, #16]
   14d38:	add	r2, r2, r1
   14d3c:	str	r2, [r4, #4]
   14d40:	ldr	r2, [r4, #76]	; 0x4c
   14d44:	ldr	r3, [r3, #20]
   14d48:	add	r3, r2, r3
   14d4c:	str	r3, [r4]
   14d50:	bl	12f14 <_start@@Base+0xa98>
   14d54:	mov	r0, r7
   14d58:	add	sp, sp, #20
   14d5c:	pop	{r4, r5, r6, r7, pc}
   14d60:	andeq	r7, r1, r9, ror #15
   14d64:	andeq	r0, r0, r5, lsr #10
   14d68:	strdeq	r7, [r1], -fp
   14d6c:	muleq	r1, sl, ip
   14d70:			; <UNDEFINED> instruction: 0x9e3779b1

00014d74 <flatcc_builder_create_vector@@Base>:
   14d74:	push	{lr}		; (str lr, [sp, #-4]!)
   14d78:	sub	sp, sp, #84	; 0x54
   14d7c:	ldr	lr, [sp, #92]	; 0x5c
   14d80:	ldrh	ip, [sp, #88]	; 0x58
   14d84:	cmp	r2, lr
   14d88:	bls	14da0 <flatcc_builder_create_vector@@Base+0x2c>
   14d8c:	ldr	r3, [pc, #180]	; 14e48 <flatcc_builder_create_vector@@Base+0xd4>
   14d90:	ldr	r2, [pc, #180]	; 14e4c <flatcc_builder_create_vector@@Base+0xd8>
   14d94:	ldr	r1, [pc, #180]	; 14e50 <flatcc_builder_create_vector@@Base+0xdc>
   14d98:	ldr	r0, [pc, #180]	; 14e54 <flatcc_builder_create_vector@@Base+0xe0>
   14d9c:	bl	1237c <__assert_fail@plt>
   14da0:	ldrh	lr, [r0, #128]	; 0x80
   14da4:	mul	r3, r3, r2
   14da8:	cmp	ip, #4
   14dac:	movcc	ip, #4
   14db0:	str	r2, [sp, #4]
   14db4:	ldr	r2, [r0, #136]	; 0x88
   14db8:	cmp	lr, ip
   14dbc:	sub	r2, r2, r3
   14dc0:	strhcc	ip, [r0, #128]	; 0x80
   14dc4:	sub	ip, ip, #1
   14dc8:	and	ip, ip, r2
   14dcc:	mov	r2, #4
   14dd0:	cmp	r3, #0
   14dd4:	str	r2, [sp, #8]
   14dd8:	add	lr, sp, r2
   14ddc:	str	r2, [sp, #20]
   14de0:	mov	r2, #1
   14de4:	str	r2, [sp, #12]
   14de8:	strne	r3, [sp, #28]
   14dec:	addne	r2, r3, #4
   14df0:	movne	r3, #2
   14df4:	strne	r2, [sp, #8]
   14df8:	strne	r1, [sp, #24]
   14dfc:	strne	r3, [sp, #12]
   14e00:	cmp	ip, #0
   14e04:	str	lr, [sp, #16]
   14e08:	beq	14e38 <flatcc_builder_create_vector@@Base+0xc4>
   14e0c:	ldr	r3, [sp, #8]
   14e10:	add	r2, sp, #80	; 0x50
   14e14:	add	r3, r3, ip
   14e18:	str	r3, [sp, #8]
   14e1c:	ldr	r3, [sp, #12]
   14e20:	ldr	r1, [pc, #48]	; 14e58 <flatcc_builder_create_vector@@Base+0xe4>
   14e24:	add	r3, r3, #1
   14e28:	str	r3, [sp, #12]
   14e2c:	add	r2, r2, r3, lsl #3
   14e30:	str	r1, [r2, #-72]	; 0xffffffb8
   14e34:	str	ip, [r2, #-68]	; 0xffffffbc
   14e38:	add	r1, sp, #8
   14e3c:	bl	13418 <flatcc_builder_default_alloc@@Base+0x3f8>
   14e40:	add	sp, sp, #84	; 0x54
   14e44:	pop	{pc}		; (ldr pc, [sp], #4)
   14e48:	andeq	r7, r1, r2, lsl #16
   14e4c:	andeq	r0, r0, r5, asr r5
   14e50:	strdeq	r7, [r1], -fp
   14e54:	andeq	r7, r1, r5, asr #25
   14e58:	andeq	r7, r1, r5, lsl r3

00014e5c <flatcc_builder_end_vector@@Base>:
   14e5c:	push	{r0, r1, r2, r4, r5, lr}
   14e60:	ldr	r2, [r0, #32]
   14e64:	ldrh	r3, [r2, #14]
   14e68:	cmp	r3, #4
   14e6c:	beq	14e84 <flatcc_builder_end_vector@@Base+0x28>
   14e70:	ldr	r3, [pc, #76]	; 14ec4 <flatcc_builder_end_vector@@Base+0x68>
   14e74:	ldr	r2, [pc, #76]	; 14ec8 <flatcc_builder_end_vector@@Base+0x6c>
   14e78:	ldr	r1, [pc, #76]	; 14ecc <flatcc_builder_end_vector@@Base+0x70>
   14e7c:	ldr	r0, [pc, #76]	; 14ed0 <flatcc_builder_end_vector@@Base+0x74>
   14e80:	bl	1237c <__assert_fail@plt>
   14e84:	ldr	r3, [r2, #24]
   14e88:	mov	r4, r0
   14e8c:	str	r3, [sp, #4]
   14e90:	ldrh	r3, [r0, #130]	; 0x82
   14e94:	str	r3, [sp]
   14e98:	ldr	r3, [r2, #16]
   14e9c:	ldr	r1, [r0, #16]
   14ea0:	ldr	r2, [r2, #20]
   14ea4:	bl	14d74 <flatcc_builder_create_vector@@Base>
   14ea8:	subs	r5, r0, #0
   14eac:	beq	14eb8 <flatcc_builder_end_vector@@Base+0x5c>
   14eb0:	mov	r0, r4
   14eb4:	bl	12f14 <_start@@Base+0xa98>
   14eb8:	mov	r0, r5
   14ebc:	add	sp, sp, #12
   14ec0:	pop	{r4, r5, pc}
   14ec4:	andeq	r7, r1, pc, lsl r8
   14ec8:	andeq	r0, r0, r8, ror r5
   14ecc:	strdeq	r7, [r1], -fp
   14ed0:	andeq	r7, r1, r5, lsr #22

00014ed4 <flatcc_builder_vector_count@@Base>:
   14ed4:	ldr	r3, [r0, #32]
   14ed8:	ldr	r0, [r3, #20]
   14edc:	bx	lr

00014ee0 <flatcc_builder_vector_edit@@Base>:
   14ee0:	ldr	r0, [r0, #16]
   14ee4:	bx	lr

00014ee8 <flatcc_builder_create_offset_vector_direct@@Base>:
   14ee8:	cmn	r2, #-1073741823	; 0xc0000001
   14eec:	bhi	14ef8 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   14ef0:	mov	r3, #0
   14ef4:	b	134ec <flatcc_builder_default_alloc@@Base+0x4cc>
   14ef8:	mov	r0, #0
   14efc:	bx	lr

00014f00 <flatcc_builder_end_offset_vector@@Base>:
   14f00:	ldr	r3, [r0, #32]
   14f04:	push	{r4, r5, r6, lr}
   14f08:	ldrh	r2, [r3, #14]
   14f0c:	cmp	r2, #5
   14f10:	beq	14f28 <flatcc_builder_end_offset_vector@@Base+0x28>
   14f14:	ldr	r3, [pc, #52]	; 14f50 <flatcc_builder_end_offset_vector@@Base+0x50>
   14f18:	ldr	r2, [pc, #52]	; 14f54 <flatcc_builder_end_offset_vector@@Base+0x54>
   14f1c:	ldr	r1, [pc, #52]	; 14f58 <flatcc_builder_end_offset_vector@@Base+0x58>
   14f20:	ldr	r0, [pc, #52]	; 14f5c <flatcc_builder_end_offset_vector@@Base+0x5c>
   14f24:	bl	1237c <__assert_fail@plt>
   14f28:	ldr	r2, [r3, #20]
   14f2c:	ldr	r1, [r0, #16]
   14f30:	mov	r4, r0
   14f34:	bl	14ee8 <flatcc_builder_create_offset_vector_direct@@Base>
   14f38:	subs	r5, r0, #0
   14f3c:	beq	14f48 <flatcc_builder_end_offset_vector@@Base+0x48>
   14f40:	mov	r0, r4
   14f44:	bl	12f14 <_start@@Base+0xa98>
   14f48:	mov	r0, r5
   14f4c:	pop	{r4, r5, r6, pc}
   14f50:	andeq	r7, r1, r9, lsr r8
   14f54:	andeq	r0, r0, r8, asr #11
   14f58:	strdeq	r7, [r1], -fp
   14f5c:	andeq	r7, r1, lr, lsl #23

00014f60 <flatcc_builder_create_offset_vector@@Base>:
   14f60:	push	{r4, r5, r6, lr}
   14f64:	mov	r4, r0
   14f68:	mov	r6, r1
   14f6c:	mov	r5, r2
   14f70:	bl	1453c <flatcc_builder_start_offset_vector@@Base>
   14f74:	cmp	r0, #0
   14f78:	bne	14fa8 <flatcc_builder_create_offset_vector@@Base+0x48>
   14f7c:	mov	r1, r5
   14f80:	mov	r0, r4
   14f84:	bl	14138 <flatcc_builder_extend_offset_vector@@Base>
   14f88:	cmp	r0, #0
   14f8c:	beq	14fa8 <flatcc_builder_create_offset_vector@@Base+0x48>
   14f90:	lsl	r2, r5, #2
   14f94:	mov	r1, r6
   14f98:	bl	122ec <memcpy@plt>
   14f9c:	mov	r0, r4
   14fa0:	pop	{r4, r5, r6, lr}
   14fa4:	b	14f00 <flatcc_builder_end_offset_vector@@Base>
   14fa8:	mov	r0, #0
   14fac:	pop	{r4, r5, r6, pc}

00014fb0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   14fb0:	ldr	r2, [r0, #32]
   14fb4:	mov	r3, r1
   14fb8:	push	{r4, r5, r6, lr}
   14fbc:	ldrh	r1, [r2, #14]
   14fc0:	cmp	r1, #5
   14fc4:	beq	14fdc <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   14fc8:	ldr	r3, [pc, #64]	; 15010 <flatcc_builder_end_offset_vector_for_unions@@Base+0x60>
   14fcc:	ldr	r2, [pc, #64]	; 15014 <flatcc_builder_end_offset_vector_for_unions@@Base+0x64>
   14fd0:	ldr	r1, [pc, #64]	; 15018 <flatcc_builder_end_offset_vector_for_unions@@Base+0x68>
   14fd4:	ldr	r0, [pc, #64]	; 1501c <flatcc_builder_end_offset_vector_for_unions@@Base+0x6c>
   14fd8:	bl	1237c <__assert_fail@plt>
   14fdc:	ldr	r2, [r2, #20]
   14fe0:	cmn	r2, #-1073741823	; 0xc0000001
   14fe4:	movhi	r5, #0
   14fe8:	bhi	15008 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   14fec:	ldr	r1, [r0, #16]
   14ff0:	mov	r4, r0
   14ff4:	bl	134ec <flatcc_builder_default_alloc@@Base+0x4cc>
   14ff8:	subs	r5, r0, #0
   14ffc:	beq	15008 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   15000:	mov	r0, r4
   15004:	bl	12f14 <_start@@Base+0xa98>
   15008:	mov	r0, r5
   1500c:	pop	{r4, r5, r6, pc}
   15010:	andeq	r7, r1, sl, asr r8
   15014:	ldrdeq	r0, [r0], -r5
   15018:	strdeq	r7, [r1], -fp
   1501c:	andeq	r7, r1, lr, lsl #23

00015020 <flatcc_builder_offset_vector_edit@@Base>:
   15020:	ldr	r0, [r0, #16]
   15024:	bx	lr

00015028 <flatcc_builder_offset_vector_count@@Base>:
   15028:	ldr	r3, [r0, #32]
   1502c:	ldr	r0, [r3, #20]
   15030:	bx	lr

00015034 <flatcc_builder_create_union_vector_direct@@Base>:
   15034:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   15038:	mov	r4, r0
   1503c:	ldr	r5, [sp, #32]
   15040:	cmn	r5, #-1073741823	; 0xc0000001
   15044:	bls	15060 <flatcc_builder_create_union_vector_direct@@Base+0x2c>
   15048:	mov	r3, #0
   1504c:	str	r3, [r4]
   15050:	str	r3, [r4, #4]
   15054:	mov	r0, r4
   15058:	add	sp, sp, #8
   1505c:	pop	{r4, r5, r6, r7, r8, pc}
   15060:	mov	r7, r1
   15064:	mov	r8, r2
   15068:	mov	r1, r3
   1506c:	mov	r0, r7
   15070:	mov	r3, r2
   15074:	mov	r2, r5
   15078:	bl	134ec <flatcc_builder_default_alloc@@Base+0x4cc>
   1507c:	subs	r6, r0, #0
   15080:	beq	15048 <flatcc_builder_create_union_vector_direct@@Base+0x14>
   15084:	mvn	r3, #0
   15088:	str	r3, [sp, #4]
   1508c:	mov	r3, #1
   15090:	str	r3, [sp]
   15094:	mov	r2, r5
   15098:	mov	r1, r8
   1509c:	mov	r0, r7
   150a0:	bl	14d74 <flatcc_builder_create_vector@@Base>
   150a4:	stm	r4, {r0, r6}
   150a8:	b	15054 <flatcc_builder_create_union_vector_direct@@Base+0x20>

000150ac <flatcc_builder_create_union_vector@@Base>:
   150ac:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   150b0:	mov	r7, r0
   150b4:	mov	r0, r1
   150b8:	mov	r5, r1
   150bc:	mov	r6, r2
   150c0:	mov	r8, r3
   150c4:	bl	1453c <flatcc_builder_start_offset_vector@@Base>
   150c8:	subs	r4, r0, #0
   150cc:	beq	150e8 <flatcc_builder_create_union_vector@@Base+0x3c>
   150d0:	mov	r3, #0
   150d4:	str	r3, [r7]
   150d8:	str	r3, [r7, #4]
   150dc:	mov	r0, r7
   150e0:	add	sp, sp, #16
   150e4:	pop	{r4, r5, r6, r7, r8, pc}
   150e8:	mov	r1, r8
   150ec:	mov	r0, r5
   150f0:	bl	14138 <flatcc_builder_extend_offset_vector@@Base>
   150f4:	cmp	r0, #0
   150f8:	beq	150d0 <flatcc_builder_create_union_vector@@Base+0x24>
   150fc:	mov	r1, r8
   15100:	mov	r0, r5
   15104:	bl	12ecc <_start@@Base+0xa50>
   15108:	subs	r2, r0, #0
   1510c:	movne	ip, r6
   15110:	ldrne	r3, [r5, #16]
   15114:	movne	r1, r4
   15118:	beq	150d0 <flatcc_builder_create_union_vector@@Base+0x24>
   1511c:	cmp	r1, r8
   15120:	add	ip, ip, #8
   15124:	bne	15154 <flatcc_builder_create_union_vector@@Base+0xa8>
   15128:	str	r1, [sp]
   1512c:	add	r0, sp, #8
   15130:	mov	r1, r5
   15134:	bl	15034 <flatcc_builder_create_union_vector_direct@@Base>
   15138:	ldr	r6, [sp, #8]
   1513c:	ldr	r4, [sp, #12]
   15140:	mov	r0, r5
   15144:	bl	12f14 <_start@@Base+0xa98>
   15148:	str	r6, [r7]
   1514c:	str	r4, [r7, #4]
   15150:	b	150dc <flatcc_builder_create_union_vector@@Base+0x30>
   15154:	ldrb	r0, [ip, #-8]
   15158:	strb	r0, [r2, r1]
   1515c:	ldr	r0, [ip, #-4]
   15160:	str	r0, [r3, r1, lsl #2]
   15164:	add	r1, r1, #1
   15168:	b	1511c <flatcc_builder_create_union_vector@@Base+0x70>

0001516c <flatcc_builder_start_union_vector@@Base>:
   1516c:	push	{r4, r5, r6, lr}
   15170:	mov	r1, #4
   15174:	mov	r5, r0
   15178:	bl	13188 <flatcc_builder_default_alloc@@Base+0x168>
   1517c:	subs	r4, r0, #0
   15180:	mvnne	r4, #0
   15184:	bne	151ac <flatcc_builder_start_union_vector@@Base+0x40>
   15188:	ldr	r3, [r5, #32]
   1518c:	mov	r2, #8
   15190:	mvn	r1, #3
   15194:	str	r2, [r3, #16]
   15198:	mov	r2, #7
   1519c:	str	r4, [r3, #20]
   151a0:	strh	r2, [r3, #14]
   151a4:	mov	r0, r5
   151a8:	bl	12e4c <_start@@Base+0x9d0>
   151ac:	mov	r0, r4
   151b0:	pop	{r4, r5, r6, pc}

000151b4 <flatcc_builder_end_union_vector@@Base>:
   151b4:	ldr	r3, [r1, #32]
   151b8:	push	{r4, r5, r6, r7, lr}
   151bc:	sub	sp, sp, #20
   151c0:	ldrh	r2, [r3, #14]
   151c4:	cmp	r2, #7
   151c8:	beq	151e0 <flatcc_builder_end_union_vector@@Base+0x2c>
   151cc:	ldr	r3, [pc, #156]	; 15270 <flatcc_builder_end_union_vector@@Base+0xbc>
   151d0:	ldr	r2, [pc, #156]	; 15274 <flatcc_builder_end_union_vector@@Base+0xc0>
   151d4:	ldr	r1, [pc, #156]	; 15278 <flatcc_builder_end_union_vector@@Base+0xc4>
   151d8:	ldr	r0, [pc, #156]	; 1527c <flatcc_builder_end_union_vector@@Base+0xc8>
   151dc:	bl	1237c <__assert_fail@plt>
   151e0:	ldr	r7, [r3, #20]
   151e4:	mov	r5, r1
   151e8:	mov	r4, r0
   151ec:	lsl	r6, r7, #2
   151f0:	add	r1, r6, r7
   151f4:	mov	r0, r5
   151f8:	bl	12ecc <_start@@Base+0xa50>
   151fc:	subs	r3, r0, #0
   15200:	streq	r3, [r4]
   15204:	streq	r3, [r4, #4]
   15208:	addne	r2, r3, r6
   1520c:	ldrne	r0, [r5, #16]
   15210:	movne	r1, #0
   15214:	bne	15238 <flatcc_builder_end_union_vector@@Base+0x84>
   15218:	mov	r0, r4
   1521c:	add	sp, sp, #20
   15220:	pop	{r4, r5, r6, r7, pc}
   15224:	ldrb	ip, [r0, #-8]
   15228:	strb	ip, [r2, r1]
   1522c:	ldr	ip, [r0, #-4]
   15230:	str	ip, [r3, r1, lsl #2]
   15234:	add	r1, r1, #1
   15238:	cmp	r1, r7
   1523c:	add	r0, r0, #8
   15240:	bne	15224 <flatcc_builder_end_union_vector@@Base+0x70>
   15244:	str	r1, [sp]
   15248:	add	r0, sp, #8
   1524c:	mov	r1, r5
   15250:	bl	15034 <flatcc_builder_create_union_vector_direct@@Base>
   15254:	ldr	r7, [sp, #8]
   15258:	ldr	r6, [sp, #12]
   1525c:	mov	r0, r5
   15260:	bl	12f14 <_start@@Base+0xa98>
   15264:	str	r7, [r4]
   15268:	str	r6, [r4, #4]
   1526c:	b	15218 <flatcc_builder_end_union_vector@@Base+0x64>
   15270:	andeq	r7, r1, r6, lsl #17
   15274:	andeq	r0, r0, r1, asr r6
   15278:	strdeq	r7, [r1], -fp
   1527c:	ldrdeq	r7, [r1], -r8

00015280 <flatcc_builder_union_vector_edit@@Base>:
   15280:	ldr	r0, [r0, #16]
   15284:	bx	lr

00015288 <flatcc_builder_union_vector_count@@Base>:
   15288:	ldr	r3, [r0, #32]
   1528c:	ldr	r0, [r3, #20]
   15290:	bx	lr

00015294 <flatcc_builder_extend_union_vector@@Base>:
   15294:	push	{r4, r5, r6, lr}
   15298:	mvn	r2, #-536870912	; 0xe0000000
   1529c:	mov	r4, r0
   152a0:	ldr	r0, [r0, #32]
   152a4:	mov	r5, r1
   152a8:	bl	13498 <flatcc_builder_default_alloc@@Base+0x478>
   152ac:	cmp	r0, #0
   152b0:	bne	152c4 <flatcc_builder_extend_union_vector@@Base+0x30>
   152b4:	lsl	r1, r5, #3
   152b8:	mov	r0, r4
   152bc:	pop	{r4, r5, r6, lr}
   152c0:	b	12ecc <_start@@Base+0xa50>
   152c4:	mov	r0, #0
   152c8:	pop	{r4, r5, r6, pc}

000152cc <flatcc_builder_truncate_union_vector@@Base>:
   152cc:	ldr	r3, [r0, #32]
   152d0:	push	{r4, lr}
   152d4:	ldrh	r2, [r3, #14]
   152d8:	cmp	r2, #7
   152dc:	beq	152f4 <flatcc_builder_truncate_union_vector@@Base+0x28>
   152e0:	ldr	r3, [pc, #68]	; 1532c <flatcc_builder_truncate_union_vector@@Base+0x60>
   152e4:	ldr	r2, [pc, #68]	; 15330 <flatcc_builder_truncate_union_vector@@Base+0x64>
   152e8:	ldr	r1, [pc, #68]	; 15334 <flatcc_builder_truncate_union_vector@@Base+0x68>
   152ec:	ldr	r0, [pc, #68]	; 15338 <flatcc_builder_truncate_union_vector@@Base+0x6c>
   152f0:	bl	1237c <__assert_fail@plt>
   152f4:	ldr	r2, [r3, #20]
   152f8:	cmp	r2, r1
   152fc:	ldrcc	r3, [pc, #40]	; 1532c <flatcc_builder_truncate_union_vector@@Base+0x60>
   15300:	ldrcc	r2, [pc, #52]	; 1533c <flatcc_builder_truncate_union_vector@@Base+0x70>
   15304:	ldrcc	r1, [pc, #40]	; 15334 <flatcc_builder_truncate_union_vector@@Base+0x68>
   15308:	ldrcc	r0, [pc, #48]	; 15340 <flatcc_builder_truncate_union_vector@@Base+0x74>
   1530c:	bcc	152f0 <flatcc_builder_truncate_union_vector@@Base+0x24>
   15310:	sub	r2, r2, r1
   15314:	str	r2, [r3, #20]
   15318:	ldr	r3, [r3, #16]
   1531c:	mul	r1, r3, r1
   15320:	bl	12f80 <_start@@Base+0xb04>
   15324:	mov	r0, #0
   15328:	pop	{r4, pc}
   1532c:	andeq	r7, r1, r6, lsr #17
   15330:	andeq	r0, r0, r1, lsl #13
   15334:	strdeq	r7, [r1], -fp
   15338:	ldrdeq	r7, [r1], -r8
   1533c:	andeq	r0, r0, r2, lsl #13
   15340:	andeq	r7, r1, r1, lsl ip

00015344 <flatcc_builder_union_vector_push@@Base>:
   15344:	push	{r0, r1, r4, lr}
   15348:	stm	sp, {r1, r2}
   1534c:	ldr	r2, [r0, #32]
   15350:	ldrh	r3, [r2, #14]
   15354:	cmp	r3, #7
   15358:	beq	15370 <flatcc_builder_union_vector_push@@Base+0x2c>
   1535c:	ldr	r3, [pc, #72]	; 153ac <flatcc_builder_union_vector_push@@Base+0x68>
   15360:	ldr	r2, [pc, #72]	; 153b0 <flatcc_builder_union_vector_push@@Base+0x6c>
   15364:	ldr	r1, [pc, #72]	; 153b4 <flatcc_builder_union_vector_push@@Base+0x70>
   15368:	ldr	r0, [pc, #72]	; 153b8 <flatcc_builder_union_vector_push@@Base+0x74>
   1536c:	bl	1237c <__assert_fail@plt>
   15370:	ldr	r3, [r2, #20]
   15374:	cmn	r3, #-536870911	; 0xe0000001
   15378:	moveq	r3, #0
   1537c:	beq	153a0 <flatcc_builder_union_vector_push@@Base+0x5c>
   15380:	add	r3, r3, #1
   15384:	mov	r1, #8
   15388:	str	r3, [r2, #20]
   1538c:	bl	12ecc <_start@@Base+0xa50>
   15390:	subs	r3, r0, #0
   15394:	movne	r4, sp
   15398:	ldmne	r4, {r0, r1}
   1539c:	stmne	r3, {r0, r1}
   153a0:	mov	r0, r3
   153a4:	add	sp, sp, #8
   153a8:	pop	{r4, pc}
   153ac:	andeq	r7, r1, fp, asr #17
   153b0:	andeq	r0, r0, sp, lsl #13
   153b4:	strdeq	r7, [r1], -fp
   153b8:	ldrdeq	r7, [r1], -r8

000153bc <flatcc_builder_append_union_vector@@Base>:
   153bc:	push	{r4, r5, r6, lr}
   153c0:	mov	r4, r0
   153c4:	ldr	r0, [r0, #32]
   153c8:	ldrh	r3, [r0, #14]
   153cc:	cmp	r3, #7
   153d0:	beq	153e8 <flatcc_builder_append_union_vector@@Base+0x2c>
   153d4:	ldr	r3, [pc, #68]	; 15420 <flatcc_builder_append_union_vector@@Base+0x64>
   153d8:	ldr	r2, [pc, #68]	; 15424 <flatcc_builder_append_union_vector@@Base+0x68>
   153dc:	ldr	r1, [pc, #68]	; 15428 <flatcc_builder_append_union_vector@@Base+0x6c>
   153e0:	ldr	r0, [pc, #68]	; 1542c <flatcc_builder_append_union_vector@@Base+0x70>
   153e4:	bl	1237c <__assert_fail@plt>
   153e8:	mov	r5, r2
   153ec:	mov	r6, r1
   153f0:	mvn	r2, #-536870912	; 0xe0000000
   153f4:	mov	r1, r5
   153f8:	bl	13498 <flatcc_builder_default_alloc@@Base+0x478>
   153fc:	cmp	r0, #0
   15400:	bne	15418 <flatcc_builder_append_union_vector@@Base+0x5c>
   15404:	lsl	r2, r5, #3
   15408:	mov	r1, r6
   1540c:	mov	r0, r4
   15410:	pop	{r4, r5, r6, lr}
   15414:	b	12fa0 <_start@@Base+0xb24>
   15418:	mov	r0, #0
   1541c:	pop	{r4, r5, r6, pc}
   15420:	andeq	r7, r1, ip, ror #17
   15424:	muleq	r0, ip, r6
   15428:	strdeq	r7, [r1], -fp
   1542c:	ldrdeq	r7, [r1], -r8

00015430 <flatcc_builder_create_string@@Base>:
   15430:	push	{lr}		; (str lr, [sp, #-4]!)
   15434:	sub	sp, sp, #84	; 0x54
   15438:	ldr	r3, [r0, #136]	; 0x88
   1543c:	mov	ip, #4
   15440:	cmp	r2, #0
   15444:	str	ip, [sp, #8]
   15448:	add	lr, sp, ip
   1544c:	str	ip, [sp, #20]
   15450:	sub	r3, r3, r2
   15454:	mov	ip, #1
   15458:	str	ip, [sp, #12]
   1545c:	strne	r2, [sp, #28]
   15460:	addne	ip, r2, #4
   15464:	str	r2, [sp, #4]
   15468:	sub	r3, r3, #1
   1546c:	movne	r2, #2
   15470:	strne	ip, [sp, #8]
   15474:	strne	r2, [sp, #12]
   15478:	and	r3, r3, #3
   1547c:	ldr	r2, [sp, #8]
   15480:	add	r3, r3, #1
   15484:	add	r2, r2, r3
   15488:	str	r2, [sp, #8]
   1548c:	ldr	r2, [sp, #12]
   15490:	strne	r1, [sp, #24]
   15494:	add	r2, r2, #1
   15498:	add	r1, sp, #80	; 0x50
   1549c:	add	r1, r1, r2, lsl #3
   154a0:	ldr	ip, [pc, #28]	; 154c4 <flatcc_builder_create_string@@Base+0x94>
   154a4:	str	lr, [sp, #16]
   154a8:	str	r3, [r1, #-68]	; 0xffffffbc
   154ac:	str	ip, [r1, #-72]	; 0xffffffb8
   154b0:	add	r1, sp, #8
   154b4:	str	r2, [sp, #12]
   154b8:	bl	13418 <flatcc_builder_default_alloc@@Base+0x3f8>
   154bc:	add	sp, sp, #84	; 0x54
   154c0:	pop	{pc}		; (ldr pc, [sp], #4)
   154c4:	andeq	r7, r1, r5, lsl r3

000154c8 <flatcc_builder_create_string_str@@Base>:
   154c8:	push	{r4, r5, r6, lr}
   154cc:	mov	r5, r0
   154d0:	mov	r0, r1
   154d4:	mov	r4, r1
   154d8:	bl	12334 <strlen@plt>
   154dc:	mov	r1, r4
   154e0:	mov	r2, r0
   154e4:	mov	r0, r5
   154e8:	pop	{r4, r5, r6, lr}
   154ec:	b	15430 <flatcc_builder_create_string@@Base>

000154f0 <flatcc_builder_create_string_strn@@Base>:
   154f0:	push	{r4, r5, r6, lr}
   154f4:	mov	r4, r1
   154f8:	mov	r6, r0
   154fc:	mov	r1, #0
   15500:	mov	r0, r4
   15504:	mov	r5, r2
   15508:	bl	12364 <memchr@plt>
   1550c:	mov	r1, r4
   15510:	cmp	r0, #0
   15514:	subne	r5, r0, r4
   15518:	mov	r2, r5
   1551c:	mov	r0, r6
   15520:	pop	{r4, r5, r6, lr}
   15524:	b	15430 <flatcc_builder_create_string@@Base>

00015528 <flatcc_builder_end_string@@Base>:
   15528:	ldr	r3, [r0, #32]
   1552c:	push	{r4, r5, r6, lr}
   15530:	ldrh	r2, [r3, #14]
   15534:	cmp	r2, #6
   15538:	beq	15550 <flatcc_builder_end_string@@Base+0x28>
   1553c:	ldr	r3, [pc, #80]	; 15594 <flatcc_builder_end_string@@Base+0x6c>
   15540:	ldr	r2, [pc, #80]	; 15598 <flatcc_builder_end_string@@Base+0x70>
   15544:	ldr	r1, [pc, #80]	; 1559c <flatcc_builder_end_string@@Base+0x74>
   15548:	ldr	r0, [pc, #80]	; 155a0 <flatcc_builder_end_string@@Base+0x78>
   1554c:	bl	1237c <__assert_fail@plt>
   15550:	ldr	r2, [r3, #20]
   15554:	ldr	r3, [r0, #20]
   15558:	mov	r4, r0
   1555c:	cmp	r2, r3
   15560:	ldrne	r3, [pc, #44]	; 15594 <flatcc_builder_end_string@@Base+0x6c>
   15564:	ldrne	r2, [pc, #56]	; 155a4 <flatcc_builder_end_string@@Base+0x7c>
   15568:	ldrne	r1, [pc, #44]	; 1559c <flatcc_builder_end_string@@Base+0x74>
   1556c:	ldrne	r0, [pc, #52]	; 155a8 <flatcc_builder_end_string@@Base+0x80>
   15570:	bne	1554c <flatcc_builder_end_string@@Base+0x24>
   15574:	ldr	r1, [r0, #16]
   15578:	bl	15430 <flatcc_builder_create_string@@Base>
   1557c:	subs	r5, r0, #0
   15580:	beq	1558c <flatcc_builder_end_string@@Base+0x64>
   15584:	mov	r0, r4
   15588:	bl	12f14 <_start@@Base+0xa98>
   1558c:	mov	r0, r5
   15590:	pop	{r4, r5, r6, pc}
   15594:	andeq	r7, r1, pc, lsl #18
   15598:	andeq	r0, r0, r4, asr #13
   1559c:	strdeq	r7, [r1], -fp
   155a0:	andeq	r7, r1, r1, asr #23
   155a4:	andeq	r0, r0, r5, asr #13
   155a8:	andeq	r7, r1, sl, lsl #26

000155ac <flatcc_builder_string_edit@@Base>:
   155ac:	ldr	r0, [r0, #16]
   155b0:	bx	lr

000155b4 <flatcc_builder_string_len@@Base>:
   155b4:	ldr	r3, [r0, #32]
   155b8:	ldr	r0, [r3, #20]
   155bc:	bx	lr

000155c0 <flatcc_builder_table_add@@Base>:
   155c0:	push	{r4, r5, r6, r7, r8, lr}
   155c4:	mov	r4, r0
   155c8:	ldr	r0, [r0, #32]
   155cc:	ldrh	r0, [r0, #14]
   155d0:	cmp	r0, #3
   155d4:	beq	155ec <flatcc_builder_table_add@@Base+0x2c>
   155d8:	ldr	r3, [pc, #232]	; 156c8 <flatcc_builder_table_add@@Base+0x108>
   155dc:	ldr	r2, [pc, #232]	; 156cc <flatcc_builder_table_add@@Base+0x10c>
   155e0:	ldr	r1, [pc, #232]	; 156d0 <flatcc_builder_table_add@@Base+0x110>
   155e4:	ldr	r0, [pc, #232]	; 156d4 <flatcc_builder_table_add@@Base+0x114>
   155e8:	bl	1237c <__assert_fail@plt>
   155ec:	ldr	r0, [pc, #228]	; 156d8 <flatcc_builder_table_add@@Base+0x118>
   155f0:	cmp	r1, r0
   155f4:	ldrhi	r3, [pc, #204]	; 156c8 <flatcc_builder_table_add@@Base+0x108>
   155f8:	ldrhi	r2, [pc, #220]	; 156dc <flatcc_builder_table_add@@Base+0x11c>
   155fc:	ldrhi	r1, [pc, #204]	; 156d0 <flatcc_builder_table_add@@Base+0x110>
   15600:	ldrhi	r0, [pc, #216]	; 156e0 <flatcc_builder_table_add@@Base+0x120>
   15604:	bhi	155e8 <flatcc_builder_table_add@@Base+0x28>
   15608:	ldrh	r0, [r4, #130]	; 0x82
   1560c:	lsl	r7, r1, #1
   15610:	cmp	r0, r3
   15614:	ldr	r0, [r4, #4]
   15618:	strhcc	r3, [r4, #130]	; 0x82
   1561c:	ldrh	r5, [r0, r7]
   15620:	cmp	r5, #0
   15624:	ldrne	r3, [pc, #156]	; 156c8 <flatcc_builder_table_add@@Base+0x108>
   15628:	ldrne	r2, [pc, #180]	; 156e4 <flatcc_builder_table_add@@Base+0x124>
   1562c:	ldrne	r1, [pc, #156]	; 156d0 <flatcc_builder_table_add@@Base+0x110>
   15630:	ldrne	r0, [pc, #176]	; 156e8 <flatcc_builder_table_add@@Base+0x128>
   15634:	bne	155e8 <flatcc_builder_table_add@@Base+0x28>
   15638:	ldr	ip, [r4, #12]
   1563c:	ldr	lr, [pc, #168]	; 156ec <flatcc_builder_table_add@@Base+0x12c>
   15640:	eor	ip, ip, r1
   15644:	ldr	r6, [r4, #20]
   15648:	mul	ip, lr, ip
   1564c:	sub	r0, r3, #1
   15650:	eor	ip, ip, r2
   15654:	rsb	r3, r3, #0
   15658:	add	r0, r0, r6
   1565c:	and	r6, r0, r3
   15660:	mul	ip, lr, ip
   15664:	ldr	r3, [r4, #24]
   15668:	uxth	r8, r1
   1566c:	add	r1, r2, r6
   15670:	cmp	r1, r3
   15674:	str	ip, [r4, #12]
   15678:	str	r1, [r4, #20]
   1567c:	bcs	156a8 <flatcc_builder_table_add@@Base+0xe8>
   15680:	ldr	r3, [r4, #4]
   15684:	add	r2, r6, #4
   15688:	ldr	r0, [r4, #16]
   1568c:	strh	r2, [r3, r7]
   15690:	ldrh	r3, [r4, #8]
   15694:	add	r0, r0, r6
   15698:	cmp	r3, r8
   1569c:	addls	r1, r8, #1
   156a0:	strhls	r1, [r4, #8]
   156a4:	pop	{r4, r5, r6, r7, r8, pc}
   156a8:	ldr	r2, [pc, #64]	; 156f0 <flatcc_builder_table_add@@Base+0x130>
   156ac:	add	r1, r1, #1
   156b0:	mov	r0, r4
   156b4:	bl	12e7c <_start@@Base+0xa00>
   156b8:	cmp	r0, #0
   156bc:	beq	15680 <flatcc_builder_table_add@@Base+0xc0>
   156c0:	mov	r0, r5
   156c4:	pop	{r4, r5, r6, r7, r8, pc}
   156c8:	andeq	r7, r1, r9, lsr #18
   156cc:	andeq	r0, r0, sp, ror #13
   156d0:	strdeq	r7, [r1], -fp
   156d4:	muleq	r1, sl, ip
   156d8:	strdeq	r7, [r0], -ip
   156dc:	andeq	r0, r0, lr, ror #13
   156e0:	andeq	r7, r1, lr, lsr #26
   156e4:	strdeq	r0, [r0], -r8
   156e8:	andeq	r7, r1, r8, ror #20
   156ec:			; <UNDEFINED> instruction: 0x9e3779b1
   156f0:	strdeq	pc, [r0], -ip

000156f4 <flatcc_builder_table_edit@@Base>:
   156f4:	ldr	r3, [r0, #32]
   156f8:	ldrh	r3, [r3, #14]
   156fc:	cmp	r3, #3
   15700:	beq	1571c <flatcc_builder_table_edit@@Base+0x28>
   15704:	push	{r4, lr}
   15708:	ldr	r3, [pc, #32]	; 15730 <flatcc_builder_table_edit@@Base+0x3c>
   1570c:	ldr	r2, [pc, #32]	; 15734 <flatcc_builder_table_edit@@Base+0x40>
   15710:	ldr	r1, [pc, #32]	; 15738 <flatcc_builder_table_edit@@Base+0x44>
   15714:	ldr	r0, [pc, #32]	; 1573c <flatcc_builder_table_edit@@Base+0x48>
   15718:	bl	1237c <__assert_fail@plt>
   1571c:	ldr	r3, [r0, #20]
   15720:	ldr	r0, [r0, #16]
   15724:	sub	r1, r3, r1
   15728:	add	r0, r0, r1
   1572c:	bx	lr
   15730:	andeq	r7, r1, r2, asr #18
   15734:	andeq	r0, r0, r2, lsl #14
   15738:	strdeq	r7, [r1], -fp
   1573c:	muleq	r1, sl, ip

00015740 <flatcc_builder_table_add_copy@@Base>:
   15740:	push	{r4, r5, r6, lr}
   15744:	mov	r4, r3
   15748:	mov	r6, r2
   1574c:	ldrh	r3, [sp, #16]
   15750:	mov	r2, r4
   15754:	bl	155c0 <flatcc_builder_table_add@@Base>
   15758:	subs	r5, r0, #0
   1575c:	beq	1576c <flatcc_builder_table_add_copy@@Base+0x2c>
   15760:	mov	r2, r4
   15764:	mov	r1, r6
   15768:	bl	122ec <memcpy@plt>
   1576c:	mov	r0, r5
   15770:	pop	{r4, r5, r6, pc}

00015774 <flatcc_builder_table_add_offset@@Base>:
   15774:	ldr	r3, [r0, #32]
   15778:	push	{r4, r5, r6, r7, r8, lr}
   1577c:	ldrh	r3, [r3, #14]
   15780:	cmp	r3, #3
   15784:	beq	1579c <flatcc_builder_table_add_offset@@Base+0x28>
   15788:	ldr	r3, [pc, #228]	; 15874 <flatcc_builder_table_add_offset@@Base+0x100>
   1578c:	ldr	r2, [pc, #228]	; 15878 <flatcc_builder_table_add_offset@@Base+0x104>
   15790:	ldr	r1, [pc, #228]	; 1587c <flatcc_builder_table_add_offset@@Base+0x108>
   15794:	ldr	r0, [pc, #228]	; 15880 <flatcc_builder_table_add_offset@@Base+0x10c>
   15798:	bl	1237c <__assert_fail@plt>
   1579c:	ldr	r3, [pc, #224]	; 15884 <flatcc_builder_table_add_offset@@Base+0x110>
   157a0:	cmp	r1, r3
   157a4:	ldrhi	r3, [pc, #200]	; 15874 <flatcc_builder_table_add_offset@@Base+0x100>
   157a8:	ldrhi	r2, [pc, #216]	; 15888 <flatcc_builder_table_add_offset@@Base+0x114>
   157ac:	ldrhi	r1, [pc, #200]	; 1587c <flatcc_builder_table_add_offset@@Base+0x108>
   157b0:	ldrhi	r0, [pc, #212]	; 1588c <flatcc_builder_table_add_offset@@Base+0x118>
   157b4:	bhi	15798 <flatcc_builder_table_add_offset@@Base+0x24>
   157b8:	ldr	r3, [r0, #4]
   157bc:	lsl	r7, r1, #1
   157c0:	mov	r4, r0
   157c4:	ldrh	r6, [r3, r7]
   157c8:	cmp	r6, #0
   157cc:	ldrne	r3, [pc, #160]	; 15874 <flatcc_builder_table_add_offset@@Base+0x100>
   157d0:	ldrne	r2, [pc, #184]	; 15890 <flatcc_builder_table_add_offset@@Base+0x11c>
   157d4:	ldrne	r1, [pc, #160]	; 1587c <flatcc_builder_table_add_offset@@Base+0x108>
   157d8:	ldrne	r0, [pc, #180]	; 15894 <flatcc_builder_table_add_offset@@Base+0x120>
   157dc:	bne	15798 <flatcc_builder_table_add_offset@@Base+0x24>
   157e0:	ldr	r3, [r0, #12]
   157e4:	ldr	r2, [pc, #172]	; 15898 <flatcc_builder_table_add_offset@@Base+0x124>
   157e8:	eor	r3, r3, r1
   157ec:	ldr	r8, [r0, #20]
   157f0:	mul	r3, r2, r3
   157f4:	add	r8, r8, #3
   157f8:	eor	r3, r3, #4
   157fc:	bic	r8, r8, #3
   15800:	mul	r3, r2, r3
   15804:	uxth	r5, r1
   15808:	str	r3, [r0, #12]
   1580c:	ldr	r3, [r0, #24]
   15810:	add	r1, r8, #4
   15814:	cmp	r1, r3
   15818:	str	r1, [r0, #20]
   1581c:	bhi	1585c <flatcc_builder_table_add_offset@@Base+0xe8>
   15820:	ldr	r3, [r4, #4]
   15824:	uxth	r2, r8
   15828:	add	r1, r2, #4
   1582c:	strh	r1, [r3, r7]
   15830:	ldrh	r3, [r4, #8]
   15834:	ldr	r0, [r4, #16]
   15838:	cmp	r3, r5
   1583c:	ldr	r3, [r4]
   15840:	addls	r1, r5, #1
   15844:	strhls	r1, [r4, #8]
   15848:	add	r1, r3, #2
   1584c:	str	r1, [r4]
   15850:	add	r0, r0, r8
   15854:	strh	r2, [r3]
   15858:	pop	{r4, r5, r6, r7, r8, pc}
   1585c:	ldr	r2, [pc, #56]	; 1589c <flatcc_builder_table_add_offset@@Base+0x128>
   15860:	bl	12e7c <_start@@Base+0xa00>
   15864:	cmp	r0, #0
   15868:	beq	15820 <flatcc_builder_table_add_offset@@Base+0xac>
   1586c:	mov	r0, r6
   15870:	pop	{r4, r5, r6, r7, r8, pc}
   15874:	andeq	r7, r1, ip, asr r9
   15878:	andeq	r0, r0, r3, lsl r7
   1587c:	strdeq	r7, [r1], -fp
   15880:	muleq	r1, sl, ip
   15884:	strdeq	r7, [r0], -ip
   15888:	andeq	r0, r0, r4, lsl r7
   1588c:	andeq	r7, r1, lr, lsr #26
   15890:	andeq	r0, r0, fp, lsl r7
   15894:	andeq	r7, r1, r8, ror #20
   15898:			; <UNDEFINED> instruction: 0x9e3779b1
   1589c:	strdeq	pc, [r0], -ip

000158a0 <flatcc_builder_table_add_union@@Base>:
   158a0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   158a4:	add	ip, sp, #8
   158a8:	stmdb	ip, {r2, r3}
   158ac:	ldr	r3, [r0, #32]
   158b0:	ldrb	r5, [sp]
   158b4:	ldr	r4, [sp, #4]
   158b8:	ldrh	r3, [r3, #14]
   158bc:	cmp	r3, #3
   158c0:	beq	158d8 <flatcc_builder_table_add_union@@Base+0x38>
   158c4:	ldr	r3, [pc, #156]	; 15968 <flatcc_builder_table_add_union@@Base+0xc8>
   158c8:	ldr	r2, [pc, #156]	; 1596c <flatcc_builder_table_add_union@@Base+0xcc>
   158cc:	ldr	r1, [pc, #156]	; 15970 <flatcc_builder_table_add_union@@Base+0xd0>
   158d0:	ldr	r0, [pc, #156]	; 15974 <flatcc_builder_table_add_union@@Base+0xd4>
   158d4:	bl	1237c <__assert_fail@plt>
   158d8:	cmp	r5, #0
   158dc:	mov	r6, r0
   158e0:	mov	r7, r1
   158e4:	bne	15904 <flatcc_builder_table_add_union@@Base+0x64>
   158e8:	cmp	r4, #0
   158ec:	beq	1592c <flatcc_builder_table_add_union@@Base+0x8c>
   158f0:	ldr	r3, [pc, #112]	; 15968 <flatcc_builder_table_add_union@@Base+0xc8>
   158f4:	ldr	r2, [pc, #124]	; 15978 <flatcc_builder_table_add_union@@Base+0xd8>
   158f8:	ldr	r1, [pc, #112]	; 15970 <flatcc_builder_table_add_union@@Base+0xd0>
   158fc:	ldr	r0, [pc, #120]	; 1597c <flatcc_builder_table_add_union@@Base+0xdc>
   15900:	b	158d4 <flatcc_builder_table_add_union@@Base+0x34>
   15904:	cmp	r4, #0
   15908:	beq	1592c <flatcc_builder_table_add_union@@Base+0x8c>
   1590c:	bl	15774 <flatcc_builder_table_add_offset@@Base>
   15910:	cmp	r0, #0
   15914:	strne	r4, [r0]
   15918:	ldreq	r3, [pc, #72]	; 15968 <flatcc_builder_table_add_union@@Base+0xc8>
   1591c:	ldreq	r2, [pc, #92]	; 15980 <flatcc_builder_table_add_union@@Base+0xe0>
   15920:	ldreq	r1, [pc, #72]	; 15970 <flatcc_builder_table_add_union@@Base+0xd0>
   15924:	ldreq	r0, [pc, #88]	; 15984 <flatcc_builder_table_add_union@@Base+0xe4>
   15928:	beq	158d4 <flatcc_builder_table_add_union@@Base+0x34>
   1592c:	mov	r3, #1
   15930:	mov	r2, r3
   15934:	sub	r1, r7, #1
   15938:	mov	r0, r6
   1593c:	bl	155c0 <flatcc_builder_table_add@@Base>
   15940:	cmp	r0, #0
   15944:	ldreq	r3, [pc, #28]	; 15968 <flatcc_builder_table_add_union@@Base+0xc8>
   15948:	ldreq	r2, [pc, #56]	; 15988 <flatcc_builder_table_add_union@@Base+0xe8>
   1594c:	ldreq	r1, [pc, #28]	; 15970 <flatcc_builder_table_add_union@@Base+0xd0>
   15950:	ldreq	r0, [pc, #52]	; 1598c <flatcc_builder_table_add_union@@Base+0xec>
   15954:	beq	158d4 <flatcc_builder_table_add_union@@Base+0x34>
   15958:	strb	r5, [r0]
   1595c:	mov	r0, #0
   15960:	add	sp, sp, #12
   15964:	pop	{r4, r5, r6, r7, pc}
   15968:	andeq	r7, r1, ip, ror r9
   1596c:	andeq	r0, r0, lr, ror #11
   15970:	strdeq	r7, [r1], -fp
   15974:	muleq	r1, sl, ip
   15978:	andeq	r0, r0, pc, ror #11
   1597c:	andeq	r7, r1, r2, ror sp
   15980:	strdeq	r0, [r0], -r2
   15984:	muleq	r1, r4, sp
   15988:	strdeq	r0, [r0], -r6
   1598c:	muleq	r1, lr, sp

00015990 <flatcc_builder_table_add_union_vector@@Base>:
   15990:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15994:	mov	r7, r1
   15998:	add	r1, sp, #8
   1599c:	stmdb	r1, {r2, r3}
   159a0:	ldr	r3, [r0, #32]
   159a4:	ldm	sp, {r4, r5}
   159a8:	ldrh	r3, [r3, #14]
   159ac:	cmp	r3, #3
   159b0:	beq	159c8 <flatcc_builder_table_add_union_vector@@Base+0x38>
   159b4:	ldr	r3, [pc, #176]	; 15a6c <flatcc_builder_table_add_union_vector@@Base+0xdc>
   159b8:	ldr	r1, [pc, #176]	; 15a70 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   159bc:	ldr	r0, [pc, #176]	; 15a74 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   159c0:	mov	r2, #1536	; 0x600
   159c4:	bl	1237c <__assert_fail@plt>
   159c8:	clz	r3, r5
   159cc:	clz	r2, r4
   159d0:	lsr	r3, r3, #5
   159d4:	lsr	r2, r2, #5
   159d8:	cmp	r2, r3
   159dc:	beq	15a08 <flatcc_builder_table_add_union_vector@@Base+0x78>
   159e0:	adds	r4, r4, #0
   159e4:	movne	r4, #1
   159e8:	cmp	r4, r3
   159ec:	mvnne	r0, #0
   159f0:	bne	15a64 <flatcc_builder_table_add_union_vector@@Base+0xd4>
   159f4:	ldr	r3, [pc, #112]	; 15a6c <flatcc_builder_table_add_union_vector@@Base+0xdc>
   159f8:	ldr	r2, [pc, #120]	; 15a78 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   159fc:	ldr	r1, [pc, #108]	; 15a70 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   15a00:	ldr	r0, [pc, #116]	; 15a7c <flatcc_builder_table_add_union_vector@@Base+0xec>
   15a04:	b	159c4 <flatcc_builder_table_add_union_vector@@Base+0x34>
   15a08:	cmp	r4, #0
   15a0c:	moveq	r0, r4
   15a10:	beq	15a64 <flatcc_builder_table_add_union_vector@@Base+0xd4>
   15a14:	sub	r1, r7, #1
   15a18:	mov	r6, r0
   15a1c:	bl	15774 <flatcc_builder_table_add_offset@@Base>
   15a20:	cmp	r0, #0
   15a24:	bne	15a3c <flatcc_builder_table_add_union_vector@@Base+0xac>
   15a28:	ldr	r3, [pc, #60]	; 15a6c <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15a2c:	ldr	r2, [pc, #76]	; 15a80 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   15a30:	ldr	r1, [pc, #56]	; 15a70 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   15a34:	ldr	r0, [pc, #72]	; 15a84 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   15a38:	b	159c4 <flatcc_builder_table_add_union_vector@@Base+0x34>
   15a3c:	str	r4, [r0]
   15a40:	mov	r1, r7
   15a44:	mov	r0, r6
   15a48:	bl	15774 <flatcc_builder_table_add_offset@@Base>
   15a4c:	cmp	r0, #0
   15a50:	strne	r5, [r0]
   15a54:	movne	r0, #0
   15a58:	ldreq	r3, [pc, #12]	; 15a6c <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15a5c:	ldreq	r2, [pc, #36]	; 15a88 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   15a60:	beq	15a30 <flatcc_builder_table_add_union_vector@@Base+0xa0>
   15a64:	add	sp, sp, #12
   15a68:	pop	{r4, r5, r6, r7, pc}
   15a6c:	muleq	r1, fp, r9
   15a70:	strdeq	r7, [r1], -fp
   15a74:	muleq	r1, sl, ip
   15a78:	andeq	r0, r0, r1, lsl #12
   15a7c:	andeq	r7, r1, sl, lsr #27
   15a80:	andeq	r0, r0, r4, lsl #12
   15a84:	muleq	r1, r4, sp
   15a88:	andeq	r0, r0, r8, lsl #12

00015a8c <flatcc_builder_push_buffer_alignment@@Base>:
   15a8c:	mov	r3, r0
   15a90:	mov	r2, #4
   15a94:	ldrh	r0, [r0, #128]	; 0x80
   15a98:	strh	r2, [r3, #128]	; 0x80
   15a9c:	bx	lr

00015aa0 <flatcc_builder_pop_buffer_alignment@@Base>:
   15aa0:	ldrh	r3, [r0, #128]	; 0x80
   15aa4:	cmp	r3, r1
   15aa8:	strhcc	r1, [r0, #128]	; 0x80
   15aac:	bx	lr

00015ab0 <flatcc_builder_get_buffer_alignment@@Base>:
   15ab0:	ldrh	r0, [r0, #128]	; 0x80
   15ab4:	bx	lr

00015ab8 <flatcc_builder_set_vtable_clustering@@Base>:
   15ab8:	clz	r1, r1
   15abc:	lsr	r1, r1, #5
   15ac0:	str	r1, [r0, #180]	; 0xb4
   15ac4:	bx	lr

00015ac8 <flatcc_builder_set_block_align@@Base>:
   15ac8:	strh	r1, [r0, #132]	; 0x84
   15acc:	bx	lr

00015ad0 <flatcc_builder_get_level@@Base>:
   15ad0:	ldr	r0, [r0, #156]	; 0x9c
   15ad4:	bx	lr

00015ad8 <flatcc_builder_set_max_level@@Base>:
   15ad8:	ldr	r3, [r0, #160]	; 0xa0
   15adc:	str	r1, [r0, #176]	; 0xb0
   15ae0:	cmp	r1, r3
   15ae4:	strgt	r1, [r0, #160]	; 0xa0
   15ae8:	bx	lr

00015aec <flatcc_builder_get_buffer_size@@Base>:
   15aec:	ldr	r2, [r0, #140]	; 0x8c
   15af0:	ldr	r0, [r0, #136]	; 0x88
   15af4:	sub	r0, r2, r0
   15af8:	bx	lr

00015afc <flatcc_builder_get_buffer_start@@Base>:
   15afc:	ldr	r0, [r0, #136]	; 0x88
   15b00:	bx	lr

00015b04 <flatcc_builder_get_buffer_end@@Base>:
   15b04:	ldr	r0, [r0, #140]	; 0x8c
   15b08:	bx	lr

00015b0c <flatcc_builder_set_vtable_cache_limit@@Base>:
   15b0c:	str	r1, [r0, #172]	; 0xac
   15b10:	bx	lr

00015b14 <flatcc_builder_set_identifier@@Base>:
   15b14:	ldr	r3, [pc, #16]	; 15b2c <flatcc_builder_set_identifier@@Base+0x18>
   15b18:	cmp	r1, #0
   15b1c:	moveq	r1, r3
   15b20:	ldr	r3, [r1]
   15b24:	str	r3, [r0, #168]	; 0xa8
   15b28:	bx	lr
   15b2c:	andeq	r7, r1, r5, lsl r3

00015b30 <flatcc_builder_get_type@@Base>:
   15b30:	ldr	r0, [r0, #32]
   15b34:	cmp	r0, #0
   15b38:	ldrhne	r0, [r0, #14]
   15b3c:	bx	lr

00015b40 <flatcc_builder_get_type_at@@Base>:
   15b40:	cmp	r1, #0
   15b44:	ble	15b6c <flatcc_builder_get_type_at@@Base+0x2c>
   15b48:	ldr	r3, [r0, #156]	; 0x9c
   15b4c:	cmp	r1, r3
   15b50:	bgt	15b6c <flatcc_builder_get_type_at@@Base+0x2c>
   15b54:	sub	r1, r1, r3
   15b58:	mov	r2, #36	; 0x24
   15b5c:	ldr	r3, [r0, #32]
   15b60:	mla	r1, r2, r1, r3
   15b64:	ldrh	r0, [r1, #14]
   15b68:	bx	lr
   15b6c:	mov	r0, #0
   15b70:	bx	lr

00015b74 <flatcc_builder_get_direct_buffer@@Base>:
   15b74:	ldr	r3, [r0, #184]	; 0xb8
   15b78:	cmp	r3, #0
   15b7c:	beq	15ba4 <flatcc_builder_get_direct_buffer@@Base+0x30>
   15b80:	ldr	r2, [r0, #188]	; 0xbc
   15b84:	ldr	r3, [r0, #192]	; 0xc0
   15b88:	cmp	r2, r3
   15b8c:	bne	15ba4 <flatcc_builder_get_direct_buffer@@Base+0x30>
   15b90:	cmp	r1, #0
   15b94:	ldrne	r3, [r0, #212]	; 0xd4
   15b98:	ldr	r0, [r0, #196]	; 0xc4
   15b9c:	strne	r3, [r1]
   15ba0:	bx	lr
   15ba4:	mov	r0, #0
   15ba8:	cmp	r1, #0
   15bac:	strne	r0, [r1]
   15bb0:	moveq	r0, r1
   15bb4:	bx	lr

00015bb8 <flatcc_builder_copy_buffer@@Base>:
   15bb8:	ldr	r3, [r0, #184]	; 0xb8
   15bbc:	cmp	r3, #0
   15bc0:	beq	15bec <flatcc_builder_copy_buffer@@Base+0x34>
   15bc4:	push	{r4, lr}
   15bc8:	add	r0, r0, #188	; 0xbc
   15bcc:	bl	161ac <flatcc_emitter_copy_buffer@@Base>
   15bd0:	cmp	r0, #0
   15bd4:	popne	{r4, pc}
   15bd8:	ldr	r3, [pc, #20]	; 15bf4 <flatcc_builder_copy_buffer@@Base+0x3c>
   15bdc:	ldr	r2, [pc, #20]	; 15bf8 <flatcc_builder_copy_buffer@@Base+0x40>
   15be0:	ldr	r1, [pc, #20]	; 15bfc <flatcc_builder_copy_buffer@@Base+0x44>
   15be4:	ldr	r0, [pc, #20]	; 15c00 <flatcc_builder_copy_buffer@@Base+0x48>
   15be8:	bl	1237c <__assert_fail@plt>
   15bec:	mov	r0, r3
   15bf0:	bx	lr
   15bf4:	andeq	r7, r1, r1, asr #19
   15bf8:	andeq	r0, r0, r6, lsl #15
   15bfc:	strdeq	r7, [r1], -fp
   15c00:	strdeq	r7, [r1], -r2

00015c04 <flatcc_builder_finalize_buffer@@Base>:
   15c04:	push	{r4, r5, r6, lr}
   15c08:	cmp	r1, #0
   15c0c:	ldr	r4, [r0, #140]	; 0x8c
   15c10:	ldr	r2, [r0, #136]	; 0x88
   15c14:	mov	r5, r0
   15c18:	sub	r4, r4, r2
   15c1c:	strne	r4, [r1]
   15c20:	mov	r0, r4
   15c24:	bl	12310 <malloc@plt>
   15c28:	subs	r6, r0, #0
   15c2c:	bne	15c44 <flatcc_builder_finalize_buffer@@Base+0x40>
   15c30:	ldr	r3, [pc, #52]	; 15c6c <flatcc_builder_finalize_buffer@@Base+0x68>
   15c34:	ldr	r2, [pc, #52]	; 15c70 <flatcc_builder_finalize_buffer@@Base+0x6c>
   15c38:	ldr	r1, [pc, #52]	; 15c74 <flatcc_builder_finalize_buffer@@Base+0x70>
   15c3c:	ldr	r0, [pc, #52]	; 15c78 <flatcc_builder_finalize_buffer@@Base+0x74>
   15c40:	bl	1237c <__assert_fail@plt>
   15c44:	mov	r2, r4
   15c48:	mov	r1, r6
   15c4c:	mov	r0, r5
   15c50:	bl	15bb8 <flatcc_builder_copy_buffer@@Base>
   15c54:	cmp	r0, #0
   15c58:	ldreq	r3, [pc, #12]	; 15c6c <flatcc_builder_finalize_buffer@@Base+0x68>
   15c5c:	ldreq	r2, [pc, #24]	; 15c7c <flatcc_builder_finalize_buffer@@Base+0x78>
   15c60:	beq	15c38 <flatcc_builder_finalize_buffer@@Base+0x34>
   15c64:	mov	r0, r6
   15c68:	pop	{r4, r5, r6, pc}
   15c6c:	ldrdeq	r7, [r1], -ip
   15c70:	muleq	r0, r8, r7
   15c74:	strdeq	r7, [r1], -fp
   15c78:	andeq	r7, r1, r8, ror #20
   15c7c:	muleq	r0, ip, r7

00015c80 <flatcc_builder_finalize_aligned_buffer@@Base>:
   15c80:	push	{r4, r5, r6, r7, r8, lr}
   15c84:	mov	r6, r0
   15c88:	ldr	r4, [r0, #140]	; 0x8c
   15c8c:	ldr	r2, [r0, #136]	; 0x88
   15c90:	ldrh	r0, [r0, #128]	; 0x80
   15c94:	subs	r7, r1, #0
   15c98:	sub	r2, r4, r2
   15c9c:	sub	r4, r0, #1
   15ca0:	strne	r2, [r7]
   15ca4:	add	r4, r4, r2
   15ca8:	rsb	r2, r0, #0
   15cac:	and	r4, r4, r2
   15cb0:	mov	r1, r4
   15cb4:	bl	12fd0 <_start@@Base+0xb54>
   15cb8:	subs	r5, r0, #0
   15cbc:	beq	15ce4 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   15cc0:	mov	r2, r4
   15cc4:	mov	r1, r5
   15cc8:	mov	r0, r6
   15ccc:	bl	15bb8 <flatcc_builder_copy_buffer@@Base>
   15cd0:	subs	r4, r0, #0
   15cd4:	bne	15ce4 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   15cd8:	mov	r0, r5
   15cdc:	bl	122e0 <free@plt>
   15ce0:	mov	r5, r4
   15ce4:	cmp	r7, #0
   15ce8:	clz	r3, r5
   15cec:	lsr	r3, r3, #5
   15cf0:	moveq	r3, #0
   15cf4:	cmp	r3, #0
   15cf8:	movne	r3, #0
   15cfc:	strne	r3, [r7]
   15d00:	mov	r0, r5
   15d04:	pop	{r4, r5, r6, r7, r8, pc}

00015d08 <flatcc_builder_aligned_alloc@@Base>:
   15d08:	b	12fd0 <_start@@Base+0xb54>

00015d0c <flatcc_builder_aligned_free@@Base>:
   15d0c:	b	122e0 <free@plt>

00015d10 <flatcc_builder_get_emit_context@@Base>:
   15d10:	ldr	r0, [r0, #36]	; 0x24
   15d14:	bx	lr

00015d18 <flatcc_emitter_recycle_page@@Base>:
   15d18:	ldr	r3, [r0]
   15d1c:	cmp	r3, r1
   15d20:	beq	15d64 <flatcc_emitter_recycle_page@@Base+0x4c>
   15d24:	ldr	r2, [r0, #4]
   15d28:	cmp	r1, r2
   15d2c:	beq	15d64 <flatcc_emitter_recycle_page@@Base+0x4c>
   15d30:	ldr	r2, [r1, #2944]	; 0xb80
   15d34:	ldr	r0, [r1, #2948]	; 0xb84
   15d38:	str	r0, [r2, #2948]	; 0xb84
   15d3c:	ldr	r0, [r1, #2948]	; 0xb84
   15d40:	str	r2, [r0, #2944]	; 0xb80
   15d44:	ldr	r2, [r3, #2948]	; 0xb84
   15d48:	str	r3, [r1, #2944]	; 0xb80
   15d4c:	str	r2, [r1, #2948]	; 0xb84
   15d50:	str	r1, [r2, #2944]	; 0xb80
   15d54:	ldr	r3, [r1, #2944]	; 0xb80
   15d58:	mov	r0, #0
   15d5c:	str	r1, [r3, #2948]	; 0xb84
   15d60:	bx	lr
   15d64:	mvn	r0, #0
   15d68:	bx	lr

00015d6c <flatcc_emitter_reset@@Base>:
   15d6c:	ldr	r3, [r0]
   15d70:	cmp	r3, #0
   15d74:	bxeq	lr
   15d78:	add	r2, r3, #1472	; 0x5c0
   15d7c:	push	{r4, lr}
   15d80:	mov	r4, r0
   15d84:	str	r2, [r0, #8]
   15d88:	str	r2, [r0, #16]
   15d8c:	mov	r2, #1472	; 0x5c0
   15d90:	str	r2, [r0, #12]
   15d94:	str	r2, [r0, #20]
   15d98:	sub	r2, r2, #2944	; 0xb80
   15d9c:	str	r3, [r0, #4]
   15da0:	str	r2, [r3, #2952]	; 0xb88
   15da4:	ldr	r3, [r0, #32]
   15da8:	cmp	r3, #0
   15dac:	ldr	r3, [r0, #24]
   15db0:	streq	r3, [r0, #32]
   15db4:	ldr	r2, [r0, #32]
   15db8:	lsr	r3, r3, #2
   15dbc:	add	r2, r2, r2, lsl #1
   15dc0:	add	r3, r3, r2, lsr #2
   15dc4:	str	r3, [r0, #32]
   15dc8:	mov	r3, #0
   15dcc:	str	r3, [r0, #24]
   15dd0:	ldr	r2, [r4, #32]
   15dd4:	ldr	r3, [r4, #28]
   15dd8:	cmp	r3, r2, lsl #1
   15ddc:	popls	{r4, pc}
   15de0:	ldr	r3, [r4, #4]
   15de4:	ldr	r2, [r4]
   15de8:	ldr	r0, [r3, #2944]	; 0xb80
   15dec:	cmp	r0, r2
   15df0:	bne	15df8 <flatcc_emitter_reset@@Base+0x8c>
   15df4:	pop	{r4, pc}
   15df8:	ldr	r2, [r0, #2944]	; 0xb80
   15dfc:	str	r2, [r3, #2944]	; 0xb80
   15e00:	ldr	r2, [r0, #2944]	; 0xb80
   15e04:	str	r3, [r2, #2948]	; 0xb84
   15e08:	bl	122e0 <free@plt>
   15e0c:	ldr	r3, [r4, #28]
   15e10:	sub	r3, r3, #2944	; 0xb80
   15e14:	str	r3, [r4, #28]
   15e18:	b	15dd0 <flatcc_emitter_reset@@Base+0x64>

00015e1c <flatcc_emitter_clear@@Base>:
   15e1c:	ldr	r3, [r0]
   15e20:	cmp	r3, #0
   15e24:	bxeq	lr
   15e28:	ldr	r2, [r3, #2948]	; 0xb84
   15e2c:	push	{r4, r5, r6, lr}
   15e30:	mov	r4, r0
   15e34:	mov	r1, #0
   15e38:	str	r1, [r2, #2944]	; 0xb80
   15e3c:	ldr	r5, [r3, #2944]	; 0xb80
   15e40:	cmp	r5, #0
   15e44:	bne	15e64 <flatcc_emitter_clear@@Base+0x48>
   15e48:	mov	r0, r3
   15e4c:	bl	122e0 <free@plt>
   15e50:	mov	r1, r5
   15e54:	mov	r0, r4
   15e58:	mov	r2, #36	; 0x24
   15e5c:	pop	{r4, r5, r6, lr}
   15e60:	b	1234c <memset@plt>
   15e64:	ldr	r0, [r5, #2948]	; 0xb84
   15e68:	bl	122e0 <free@plt>
   15e6c:	mov	r3, r5
   15e70:	b	15e3c <flatcc_emitter_clear@@Base+0x20>

00015e74 <flatcc_emitter@@Base>:
   15e74:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e78:	mov	r4, r0
   15e7c:	ldr	r0, [sp, #48]	; 0x30
   15e80:	ldr	ip, [r4, #24]
   15e84:	cmp	r3, #0
   15e88:	add	ip, ip, r0
   15e8c:	str	ip, [r4, #24]
   15e90:	bge	16040 <flatcc_emitter@@Base+0x1cc>
   15e94:	ldr	ip, [r4, #12]
   15e98:	cmp	r0, ip
   15e9c:	bhi	15ee4 <flatcc_emitter@@Base+0x70>
   15ea0:	ldr	r3, [r4, #8]
   15ea4:	sub	r3, r3, r0
   15ea8:	sub	r0, ip, r0
   15eac:	str	r3, [r4, #8]
   15eb0:	str	r0, [r4, #12]
   15eb4:	mov	r4, r1
   15eb8:	mov	r5, r2
   15ebc:	cmp	r5, #0
   15ec0:	add	r4, r4, #8
   15ec4:	beq	15efc <flatcc_emitter@@Base+0x88>
   15ec8:	ldmdb	r4, {r1, r2}
   15ecc:	mov	r0, r3
   15ed0:	bl	122ec <memcpy@plt>
   15ed4:	ldr	r2, [r4, #-4]
   15ed8:	sub	r5, r5, #1
   15edc:	add	r3, r0, r2
   15ee0:	b	15ebc <flatcc_emitter@@Base+0x48>
   15ee4:	ldr	sl, [pc, #696]	; 161a4 <flatcc_emitter@@Base+0x330>
   15ee8:	add	r5, r1, r2, lsl #3
   15eec:	sub	r6, r2, #1
   15ef0:	mov	r9, #2944	; 0xb80
   15ef4:	cmn	r6, #1
   15ef8:	bne	15f04 <flatcc_emitter@@Base+0x90>
   15efc:	mov	r0, #0
   15f00:	b	15fa8 <flatcc_emitter@@Base+0x134>
   15f04:	ldr	r7, [r5, #-4]
   15f08:	ldr	fp, [r5, #-8]
   15f0c:	mov	r8, #1472	; 0x5c0
   15f10:	add	fp, fp, r7
   15f14:	cmp	r7, #0
   15f18:	subeq	r5, r5, #8
   15f1c:	subeq	r6, r6, #1
   15f20:	beq	15ef4 <flatcc_emitter@@Base+0x80>
   15f24:	ldr	r3, [r4, #12]
   15f28:	cmp	r3, r7
   15f2c:	bcs	16010 <flatcc_emitter@@Base+0x19c>
   15f30:	cmp	r3, #0
   15f34:	movne	r2, r3
   15f38:	bne	16014 <flatcc_emitter@@Base+0x1a0>
   15f3c:	ldr	r3, [r4]
   15f40:	cmp	r3, #0
   15f44:	beq	15f8c <flatcc_emitter@@Base+0x118>
   15f48:	ldr	r2, [r3, #2948]	; 0xb84
   15f4c:	ldr	r1, [r4, #4]
   15f50:	cmp	r2, r1
   15f54:	beq	15f8c <flatcc_emitter@@Base+0x118>
   15f58:	ldr	r3, [r3, #2952]	; 0xb88
   15f5c:	sub	r3, r3, #2944	; 0xb80
   15f60:	str	r3, [r2, #2952]	; 0xb88
   15f64:	str	r2, [r4]
   15f68:	ldr	r3, [r4]
   15f6c:	str	r9, [r4, #12]
   15f70:	add	r2, r3, #2944	; 0xb80
   15f74:	str	r2, [r4, #8]
   15f78:	ldr	r2, [r3, #2944]	; 0xb80
   15f7c:	ldr	r2, [r2, #2952]	; 0xb88
   15f80:	sub	r2, r2, #2944	; 0xb80
   15f84:	str	r2, [r3, #2952]	; 0xb88
   15f88:	b	15f14 <flatcc_emitter@@Base+0xa0>
   15f8c:	mov	r0, sl
   15f90:	str	r3, [sp, #4]
   15f94:	bl	12310 <malloc@plt>
   15f98:	ldr	r3, [sp, #4]
   15f9c:	cmp	r0, #0
   15fa0:	bne	15fb0 <flatcc_emitter@@Base+0x13c>
   15fa4:	mvn	r0, #0
   15fa8:	add	sp, sp, #12
   15fac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fb0:	ldr	r2, [r4, #28]
   15fb4:	cmp	r3, #0
   15fb8:	add	r2, r2, #2944	; 0xb80
   15fbc:	str	r2, [r4, #28]
   15fc0:	beq	15fe0 <flatcc_emitter@@Base+0x16c>
   15fc4:	ldr	r2, [r4, #4]
   15fc8:	str	r3, [r0, #2944]	; 0xb80
   15fcc:	str	r2, [r0, #2948]	; 0xb84
   15fd0:	str	r0, [r3, #2948]	; 0xb84
   15fd4:	str	r0, [r2, #2944]	; 0xb80
   15fd8:	str	r0, [r4]
   15fdc:	b	15f68 <flatcc_emitter@@Base+0xf4>
   15fe0:	add	r3, r0, #1472	; 0x5c0
   15fe4:	str	r3, [r4, #8]
   15fe8:	str	r3, [r4, #16]
   15fec:	ldr	r3, [pc, #436]	; 161a8 <flatcc_emitter@@Base+0x334>
   15ff0:	str	r0, [r4]
   15ff4:	str	r0, [r4, #4]
   15ff8:	str	r0, [r0, #2944]	; 0xb80
   15ffc:	str	r0, [r0, #2948]	; 0xb84
   16000:	str	r8, [r4, #12]
   16004:	str	r8, [r4, #20]
   16008:	str	r3, [r0, #2952]	; 0xb88
   1600c:	b	15f14 <flatcc_emitter@@Base+0xa0>
   16010:	mov	r2, r7
   16014:	ldr	r0, [r4, #8]
   16018:	rsb	r1, r2, #0
   1601c:	add	r0, r0, r1
   16020:	sub	r3, r3, r2
   16024:	add	fp, fp, r1
   16028:	str	r0, [r4, #8]
   1602c:	str	r3, [r4, #12]
   16030:	mov	r1, fp
   16034:	sub	r7, r7, r2
   16038:	bl	122ec <memcpy@plt>
   1603c:	b	15f14 <flatcc_emitter@@Base+0xa0>
   16040:	ldr	ip, [r4, #20]
   16044:	cmp	r0, ip
   16048:	bls	16084 <flatcc_emitter@@Base+0x210>
   1604c:	ldr	sl, [pc, #336]	; 161a4 <flatcc_emitter@@Base+0x330>
   16050:	mov	r6, r2
   16054:	add	r5, r1, #8
   16058:	mov	r9, #2944	; 0xb80
   1605c:	cmp	r6, #0
   16060:	beq	15efc <flatcc_emitter@@Base+0x88>
   16064:	ldr	r7, [r5, #-4]
   16068:	ldr	fp, [r5, #-8]
   1606c:	mov	r8, #1472	; 0x5c0
   16070:	cmp	r7, #0
   16074:	bne	1609c <flatcc_emitter@@Base+0x228>
   16078:	sub	r6, r6, #1
   1607c:	add	r5, r5, #8
   16080:	b	1605c <flatcc_emitter@@Base+0x1e8>
   16084:	ldr	r3, [r4, #16]
   16088:	add	lr, r3, r0
   1608c:	sub	r0, ip, r0
   16090:	str	lr, [r4, #16]
   16094:	str	r0, [r4, #20]
   16098:	b	15eb4 <flatcc_emitter@@Base+0x40>
   1609c:	ldr	r3, [r4, #20]
   160a0:	cmp	r3, r7
   160a4:	bcs	16164 <flatcc_emitter@@Base+0x2f0>
   160a8:	cmp	r3, #0
   160ac:	bne	16168 <flatcc_emitter@@Base+0x2f4>
   160b0:	ldr	r3, [r4, #4]
   160b4:	cmp	r3, #0
   160b8:	beq	160d0 <flatcc_emitter@@Base+0x25c>
   160bc:	ldr	r2, [r3, #2944]	; 0xb80
   160c0:	ldr	r1, [r4]
   160c4:	cmp	r2, r1
   160c8:	strne	r2, [r4, #4]
   160cc:	bne	16114 <flatcc_emitter@@Base+0x2a0>
   160d0:	mov	r0, sl
   160d4:	str	r3, [sp, #4]
   160d8:	bl	12310 <malloc@plt>
   160dc:	cmp	r0, #0
   160e0:	beq	15fa4 <flatcc_emitter@@Base+0x130>
   160e4:	ldr	r2, [r4, #28]
   160e8:	ldr	r3, [sp, #4]
   160ec:	add	r2, r2, #2944	; 0xb80
   160f0:	cmp	r3, #0
   160f4:	str	r2, [r4, #28]
   160f8:	beq	16134 <flatcc_emitter@@Base+0x2c0>
   160fc:	ldr	r2, [r4]
   16100:	str	r3, [r0, #2948]	; 0xb84
   16104:	str	r2, [r0, #2944]	; 0xb80
   16108:	str	r0, [r2, #2948]	; 0xb84
   1610c:	str	r0, [r3, #2944]	; 0xb80
   16110:	str	r0, [r4, #4]
   16114:	ldr	r3, [r4, #4]
   16118:	str	r9, [r4, #20]
   1611c:	str	r3, [r4, #16]
   16120:	ldr	r2, [r3, #2948]	; 0xb84
   16124:	ldr	r2, [r2, #2952]	; 0xb88
   16128:	add	r2, r2, #2944	; 0xb80
   1612c:	str	r2, [r3, #2952]	; 0xb88
   16130:	b	16070 <flatcc_emitter@@Base+0x1fc>
   16134:	add	r3, r0, #1472	; 0x5c0
   16138:	str	r3, [r4, #8]
   1613c:	str	r3, [r4, #16]
   16140:	ldr	r3, [pc, #96]	; 161a8 <flatcc_emitter@@Base+0x334>
   16144:	str	r0, [r4]
   16148:	str	r0, [r4, #4]
   1614c:	str	r0, [r0, #2944]	; 0xb80
   16150:	str	r0, [r0, #2948]	; 0xb84
   16154:	str	r8, [r4, #12]
   16158:	str	r8, [r4, #20]
   1615c:	str	r3, [r0, #2952]	; 0xb88
   16160:	b	16070 <flatcc_emitter@@Base+0x1fc>
   16164:	mov	r3, r7
   16168:	mov	r2, r3
   1616c:	mov	r1, fp
   16170:	ldr	r0, [r4, #16]
   16174:	str	r3, [sp, #4]
   16178:	bl	122ec <memcpy@plt>
   1617c:	ldr	r3, [sp, #4]
   16180:	ldr	r2, [r4, #16]
   16184:	sub	r7, r7, r3
   16188:	add	r2, r2, r3
   1618c:	str	r2, [r4, #16]
   16190:	ldr	r2, [r4, #20]
   16194:	add	fp, fp, r3
   16198:	sub	r3, r2, r3
   1619c:	str	r3, [r4, #20]
   161a0:	b	16070 <flatcc_emitter@@Base+0x1fc>
   161a4:	andeq	r0, r0, ip, lsl #23
   161a8:			; <UNDEFINED> instruction: 0xfffffa40

000161ac <flatcc_emitter_copy_buffer@@Base>:
   161ac:	push	{r4, r5, r6, lr}
   161b0:	mov	r4, r0
   161b4:	ldr	r0, [r0, #24]
   161b8:	cmp	r0, r2
   161bc:	movhi	r3, #0
   161c0:	bhi	16234 <flatcc_emitter_copy_buffer@@Base+0x88>
   161c4:	ldr	r2, [r4]
   161c8:	cmp	r2, #0
   161cc:	moveq	r3, r2
   161d0:	beq	16234 <flatcc_emitter_copy_buffer@@Base+0x88>
   161d4:	mov	r3, r1
   161d8:	ldr	r1, [r4, #4]
   161dc:	cmp	r2, r1
   161e0:	moveq	r2, r0
   161e4:	ldr	r1, [r4, #8]
   161e8:	beq	16228 <flatcc_emitter_copy_buffer@@Base+0x7c>
   161ec:	ldr	r5, [r4, #12]
   161f0:	mov	r0, r3
   161f4:	rsb	r5, r5, #2944	; 0xb80
   161f8:	mov	r2, r5
   161fc:	bl	122ec <memcpy@plt>
   16200:	ldr	r2, [r4]
   16204:	mov	r6, #2944	; 0xb80
   16208:	add	r3, r0, r5
   1620c:	ldr	r5, [r2, #2944]	; 0xb80
   16210:	ldr	r2, [r4, #4]
   16214:	cmp	r5, r2
   16218:	bne	1623c <flatcc_emitter_copy_buffer@@Base+0x90>
   1621c:	ldr	r2, [r4, #20]
   16220:	mov	r1, r5
   16224:	rsb	r2, r2, #2944	; 0xb80
   16228:	mov	r0, r3
   1622c:	bl	122ec <memcpy@plt>
   16230:	mov	r3, r0
   16234:	mov	r0, r3
   16238:	pop	{r4, r5, r6, pc}
   1623c:	mov	r1, r5
   16240:	mov	r0, r3
   16244:	mov	r2, r6
   16248:	bl	122ec <memcpy@plt>
   1624c:	ldr	r5, [r5, #2944]	; 0xb80
   16250:	add	r3, r0, #2944	; 0xb80
   16254:	b	16210 <flatcc_emitter_copy_buffer@@Base+0x64>
   16258:	add	r1, r1, #2
   1625c:	ldrh	r3, [r0, #22]
   16260:	lsl	r1, r1, #1
   16264:	uxth	r1, r1
   16268:	cmp	r3, r1
   1626c:	ldrhi	r3, [r0, #12]
   16270:	ldrhhi	r0, [r3, r1]
   16274:	movls	r0, #0
   16278:	bx	lr
   1627c:	push	{r4, lr}
   16280:	mov	r2, r0
   16284:	bl	16258 <flatcc_emitter_copy_buffer@@Base+0xac>
   16288:	uxth	r3, r0
   1628c:	cmp	r3, #0
   16290:	ldrne	r3, [r2, #16]
   16294:	uxtahne	r3, r3, r0
   16298:	ldrne	r0, [r2]
   1629c:	addne	r0, r0, r3
   162a0:	moveq	r0, r3
   162a4:	pop	{r4, pc}
   162a8:	push	{r4, r5, r6, lr}
   162ac:	mov	r4, r3
   162b0:	mov	r5, r0
   162b4:	bl	16258 <flatcc_emitter_copy_buffer@@Base+0xac>
   162b8:	uxth	r3, r0
   162bc:	cmp	r3, #0
   162c0:	bne	162dc <flatcc_emitter_copy_buffer@@Base+0x130>
   162c4:	cmp	r2, #0
   162c8:	movne	r2, #4
   162cc:	moveq	r2, #0
   162d0:	str	r3, [r4]
   162d4:	mov	r0, r2
   162d8:	pop	{r4, r5, r6, pc}
   162dc:	ldrh	r3, [r5, #20]
   162e0:	uxth	r1, r0
   162e4:	add	r2, r1, #4
   162e8:	cmp	r2, r3
   162ec:	movhi	r2, #13
   162f0:	bhi	162d4 <flatcc_emitter_copy_buffer@@Base+0x128>
   162f4:	ldr	r0, [r5, #16]
   162f8:	add	r1, r1, r0
   162fc:	ands	r2, r1, #3
   16300:	streq	r1, [r4]
   16304:	movne	r2, #12
   16308:	b	162d4 <flatcc_emitter_copy_buffer@@Base+0x128>
   1630c:	push	{r4, lr}
   16310:	sub	sp, sp, #24
   16314:	ldr	ip, [sp, #32]
   16318:	sub	ip, ip, #1
   1631c:	cmp	ip, #0
   16320:	str	ip, [sp, #8]
   16324:	moveq	r0, #3
   16328:	beq	163e4 <flatcc_emitter_copy_buffer@@Base+0x238>
   1632c:	add	r3, r2, r3
   16330:	cmp	r2, r3
   16334:	bcs	1634c <flatcc_emitter_copy_buffer@@Base+0x1a0>
   16338:	add	r2, r3, #4
   1633c:	cmp	r1, r2
   16340:	bcc	1634c <flatcc_emitter_copy_buffer@@Base+0x1a0>
   16344:	tst	r3, #3
   16348:	beq	16354 <flatcc_emitter_copy_buffer@@Base+0x1a8>
   1634c:	mov	r0, #15
   16350:	b	163e4 <flatcc_emitter_copy_buffer@@Base+0x238>
   16354:	ldr	r2, [r0, r3]
   16358:	str	r3, [sp, #16]
   1635c:	subs	r2, r3, r2
   16360:	bmi	1636c <flatcc_emitter_copy_buffer@@Base+0x1c0>
   16364:	tst	r2, #1
   16368:	beq	16374 <flatcc_emitter_copy_buffer@@Base+0x1c8>
   1636c:	mov	r0, #29
   16370:	b	163e4 <flatcc_emitter_copy_buffer@@Base+0x238>
   16374:	add	lr, r2, #2
   16378:	cmp	r1, lr
   1637c:	movcc	r0, #27
   16380:	bcc	163e4 <flatcc_emitter_copy_buffer@@Base+0x238>
   16384:	ldrh	ip, [r0, r2]
   16388:	add	r4, r0, r2
   1638c:	add	r2, ip, r2
   16390:	cmp	r1, r2
   16394:	strh	ip, [sp, #22]
   16398:	bcc	163a4 <flatcc_emitter_copy_buffer@@Base+0x1f8>
   1639c:	tst	ip, #1
   163a0:	beq	163ac <flatcc_emitter_copy_buffer@@Base+0x200>
   163a4:	mov	r0, #30
   163a8:	b	163e4 <flatcc_emitter_copy_buffer@@Base+0x238>
   163ac:	cmp	ip, #3
   163b0:	movls	r0, #28
   163b4:	bls	163e4 <flatcc_emitter_copy_buffer@@Base+0x238>
   163b8:	ldrh	r2, [r0, lr]
   163bc:	sub	r3, r1, r3
   163c0:	cmp	r3, r2
   163c4:	strh	r2, [sp, #20]
   163c8:	movcc	r0, #20
   163cc:	bcc	163e4 <flatcc_emitter_copy_buffer@@Base+0x238>
   163d0:	stm	sp, {r0, r1}
   163d4:	ldr	r3, [sp, #36]	; 0x24
   163d8:	mov	r0, sp
   163dc:	str	r4, [sp, #12]
   163e0:	blx	r3
   163e4:	add	sp, sp, #24
   163e8:	pop	{r4, pc}
   163ec:	add	r3, r2, r3
   163f0:	cmp	r2, r3
   163f4:	ldrh	ip, [sp, #4]
   163f8:	bcs	16420 <flatcc_emitter_copy_buffer@@Base+0x274>
   163fc:	add	r2, r3, #4
   16400:	cmp	r1, r2
   16404:	bcc	16420 <flatcc_emitter_copy_buffer@@Base+0x274>
   16408:	cmp	ip, #4
   1640c:	movcc	ip, #4
   16410:	sub	ip, ip, #1
   16414:	orr	ip, ip, #3
   16418:	tst	ip, r2
   1641c:	beq	16430 <flatcc_emitter_copy_buffer@@Base+0x284>
   16420:	mov	r0, #16
   16424:	bx	lr
   16428:	mov	r0, #25
   1642c:	bx	lr
   16430:	ldr	r3, [r0, r3]
   16434:	ldr	r0, [sp, #8]
   16438:	cmp	r0, r3
   1643c:	bcc	16428 <flatcc_emitter_copy_buffer@@Base+0x27c>
   16440:	ldr	r0, [sp]
   16444:	sub	r1, r1, r2
   16448:	mul	r0, r3, r0
   1644c:	cmp	r1, r0
   16450:	movcc	r0, #26
   16454:	movcs	r0, #0
   16458:	bx	lr
   1645c:	add	r3, r2, r3
   16460:	cmp	r2, r3
   16464:	bcs	1647c <flatcc_emitter_copy_buffer@@Base+0x2d0>
   16468:	add	r2, r3, #4
   1646c:	cmp	r1, r2
   16470:	bcc	1647c <flatcc_emitter_copy_buffer@@Base+0x2d0>
   16474:	tst	r3, #3
   16478:	beq	1648c <flatcc_emitter_copy_buffer@@Base+0x2e0>
   1647c:	mov	r0, #17
   16480:	bx	lr
   16484:	mov	r0, #8
   16488:	bx	lr
   1648c:	ldr	r3, [r0, r3]
   16490:	sub	r1, r1, r2
   16494:	add	ip, r3, #1
   16498:	cmp	r1, ip
   1649c:	bcc	16484 <flatcc_emitter_copy_buffer@@Base+0x2d8>
   164a0:	add	r0, r0, r2
   164a4:	ldrb	r0, [r0, r3]
   164a8:	cmp	r0, #0
   164ac:	movne	r0, #7
   164b0:	moveq	r0, #0
   164b4:	bx	lr

000164b8 <flatcc_verify_error_string@@Base>:
   164b8:	cmp	r0, #36	; 0x24
   164bc:	ldrls	r3, [pc, #8]	; 164cc <flatcc_verify_error_string@@Base+0x14>
   164c0:	ldrls	r0, [r3, r0, lsl #2]
   164c4:	ldrhi	r0, [pc, #4]	; 164d0 <flatcc_verify_error_string@@Base+0x18>
   164c8:	bx	lr
   164cc:	ldrdeq	r7, [r1], -r4
   164d0:	andeq	r7, r1, r8, ror #28

000164d4 <flatcc_verify_field@@Base>:
   164d4:	push	{r4, r5, r6, lr}
   164d8:	mov	r5, r0
   164dc:	mov	r4, r3
   164e0:	bl	16258 <flatcc_emitter_copy_buffer@@Base+0xac>
   164e4:	uxth	r1, r0
   164e8:	cmp	r1, #0
   164ec:	beq	16524 <flatcc_verify_field@@Base+0x50>
   164f0:	ldrh	r3, [r5, #20]
   164f4:	add	r2, r2, r1
   164f8:	cmp	r2, r3
   164fc:	bhi	1652c <flatcc_verify_field@@Base+0x58>
   16500:	ldr	r0, [r5]
   16504:	ldr	r3, [r5, #16]
   16508:	sub	r4, r4, #1
   1650c:	add	r0, r0, r3
   16510:	add	r0, r0, r1
   16514:	tst	r0, r4
   16518:	moveq	r0, #0
   1651c:	movne	r0, #12
   16520:	pop	{r4, r5, r6, pc}
   16524:	mov	r0, r1
   16528:	pop	{r4, r5, r6, pc}
   1652c:	mov	r0, #13
   16530:	pop	{r4, r5, r6, pc}

00016534 <flatcc_verify_string_field@@Base>:
   16534:	push	{r0, r1, r4, lr}
   16538:	add	r3, sp, #4
   1653c:	mov	r4, r0
   16540:	bl	162a8 <flatcc_emitter_copy_buffer@@Base+0xfc>
   16544:	cmp	r0, #0
   16548:	bne	16568 <flatcc_verify_string_field@@Base+0x34>
   1654c:	ldr	r2, [sp, #4]
   16550:	cmp	r2, #0
   16554:	beq	16568 <flatcc_verify_string_field@@Base+0x34>
   16558:	ldr	r0, [r4]
   1655c:	ldr	r1, [r4, #4]
   16560:	ldr	r3, [r0, r2]
   16564:	bl	1645c <flatcc_emitter_copy_buffer@@Base+0x2b0>
   16568:	add	sp, sp, #8
   1656c:	pop	{r4, pc}

00016570 <flatcc_verify_vector_field@@Base>:
   16570:	push	{r4, r5, lr}
   16574:	sub	sp, sp, #28
   16578:	mov	r5, r3
   1657c:	add	r3, sp, #20
   16580:	mov	r4, r0
   16584:	bl	162a8 <flatcc_emitter_copy_buffer@@Base+0xfc>
   16588:	cmp	r0, #0
   1658c:	bne	165c0 <flatcc_verify_vector_field@@Base+0x50>
   16590:	ldr	r2, [sp, #20]
   16594:	cmp	r2, #0
   16598:	beq	165c0 <flatcc_verify_vector_field@@Base+0x50>
   1659c:	ldr	r3, [sp, #44]	; 0x2c
   165a0:	ldr	r0, [r4]
   165a4:	str	r3, [sp, #8]
   165a8:	ldrh	r3, [sp, #40]	; 0x28
   165ac:	str	r5, [sp]
   165b0:	ldr	r1, [r4, #4]
   165b4:	str	r3, [sp, #4]
   165b8:	ldr	r3, [r0, r2]
   165bc:	bl	163ec <flatcc_emitter_copy_buffer@@Base+0x240>
   165c0:	add	sp, sp, #28
   165c4:	pop	{r4, r5, pc}

000165c8 <flatcc_verify_string_vector_field@@Base>:
   165c8:	push	{r4, r5, r6, r7, r8, r9, lr}
   165cc:	sub	sp, sp, #28
   165d0:	add	r3, sp, #20
   165d4:	mov	r7, r0
   165d8:	bl	162a8 <flatcc_emitter_copy_buffer@@Base+0xfc>
   165dc:	subs	r6, r0, #0
   165e0:	bne	16640 <flatcc_verify_string_vector_field@@Base+0x78>
   165e4:	ldr	r4, [sp, #20]
   165e8:	cmp	r4, #0
   165ec:	beq	16640 <flatcc_verify_string_vector_field@@Base+0x78>
   165f0:	ldm	r7, {r5, r8}
   165f4:	mvn	r3, #-1073741824	; 0xc0000000
   165f8:	mov	r2, r4
   165fc:	ldr	r7, [r5, r4]
   16600:	str	r3, [sp, #8]
   16604:	mov	r3, #4
   16608:	str	r3, [sp, #4]
   1660c:	str	r3, [sp]
   16610:	mov	r1, r8
   16614:	mov	r3, r7
   16618:	mov	r0, r5
   1661c:	bl	163ec <flatcc_emitter_copy_buffer@@Base+0x240>
   16620:	subs	r6, r0, #0
   16624:	bne	16640 <flatcc_verify_string_vector_field@@Base+0x78>
   16628:	add	r4, r4, r7
   1662c:	mov	r7, r6
   16630:	ldr	r9, [r5, r4]
   16634:	add	r4, r4, #4
   16638:	cmp	r9, r7
   1663c:	bne	1664c <flatcc_verify_string_vector_field@@Base+0x84>
   16640:	mov	r0, r6
   16644:	add	sp, sp, #28
   16648:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1664c:	ldr	r3, [r5, r4]
   16650:	mov	r2, r4
   16654:	mov	r1, r8
   16658:	mov	r0, r5
   1665c:	bl	1645c <flatcc_emitter_copy_buffer@@Base+0x2b0>
   16660:	cmp	r0, #0
   16664:	addeq	r7, r7, #1
   16668:	addeq	r4, r4, #4
   1666c:	beq	16638 <flatcc_verify_string_vector_field@@Base+0x70>
   16670:	mov	r6, r0
   16674:	b	16640 <flatcc_verify_string_vector_field@@Base+0x78>

00016678 <flatcc_verify_table_field@@Base>:
   16678:	push	{r4, r5, lr}
   1667c:	sub	sp, sp, #20
   16680:	mov	r5, r3
   16684:	add	r3, sp, #12
   16688:	mov	r4, r0
   1668c:	bl	162a8 <flatcc_emitter_copy_buffer@@Base+0xfc>
   16690:	cmp	r0, #0
   16694:	bne	166c0 <flatcc_verify_table_field@@Base+0x48>
   16698:	ldr	r2, [sp, #12]
   1669c:	cmp	r2, #0
   166a0:	beq	166c0 <flatcc_verify_table_field@@Base+0x48>
   166a4:	ldr	r0, [r4]
   166a8:	ldr	r3, [r4, #8]
   166ac:	str	r5, [sp, #4]
   166b0:	str	r3, [sp]
   166b4:	ldr	r1, [r4, #4]
   166b8:	ldr	r3, [r0, r2]
   166bc:	bl	1630c <flatcc_emitter_copy_buffer@@Base+0x160>
   166c0:	add	sp, sp, #20
   166c4:	pop	{r4, r5, pc}

000166c8 <flatcc_verify_table_vector_field@@Base>:
   166c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166cc:	sub	sp, sp, #36	; 0x24
   166d0:	mov	sl, r3
   166d4:	add	r3, sp, #28
   166d8:	mov	r7, r0
   166dc:	bl	162a8 <flatcc_emitter_copy_buffer@@Base+0xfc>
   166e0:	subs	r6, r0, #0
   166e4:	bne	1676c <flatcc_verify_table_vector_field@@Base+0xa4>
   166e8:	ldr	r4, [sp, #28]
   166ec:	cmp	r4, #0
   166f0:	beq	1676c <flatcc_verify_table_vector_field@@Base+0xa4>
   166f4:	ldr	r9, [r7, #8]
   166f8:	cmp	r9, #0
   166fc:	movle	r6, #3
   16700:	ble	1676c <flatcc_verify_table_vector_field@@Base+0xa4>
   16704:	ldm	r7, {r5, r8}
   16708:	mvn	r3, #-1073741824	; 0xc0000000
   1670c:	mov	r2, r4
   16710:	ldr	r7, [r5, r4]
   16714:	str	r3, [sp, #8]
   16718:	mov	r3, #4
   1671c:	str	r3, [sp, #4]
   16720:	str	r3, [sp]
   16724:	mov	r1, r8
   16728:	mov	r3, r7
   1672c:	mov	r0, r5
   16730:	bl	163ec <flatcc_emitter_copy_buffer@@Base+0x240>
   16734:	cmp	r0, #0
   16738:	bne	167b8 <flatcc_verify_table_vector_field@@Base+0xf0>
   1673c:	add	r4, r4, r7
   16740:	sub	r9, r9, #1
   16744:	ldr	r3, [r5, r4]
   16748:	add	r4, r4, #4
   1674c:	add	r4, r5, r4
   16750:	mov	r7, r6
   16754:	str	r3, [sp, #20]
   16758:	sub	r3, r4, r5
   1675c:	str	r3, [sp, #16]
   16760:	ldr	r3, [sp, #20]
   16764:	cmp	r3, r7
   16768:	bne	16778 <flatcc_verify_table_vector_field@@Base+0xb0>
   1676c:	mov	r0, r6
   16770:	add	sp, sp, #36	; 0x24
   16774:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16778:	mov	fp, r4
   1677c:	stm	sp, {r9, sl}
   16780:	ldr	r2, [sp, #16]
   16784:	ldr	r3, [fp]
   16788:	mov	r1, r8
   1678c:	mov	r0, r5
   16790:	bl	1630c <flatcc_emitter_copy_buffer@@Base+0x160>
   16794:	add	r4, r4, #4
   16798:	cmp	r0, #0
   1679c:	beq	167c0 <flatcc_verify_table_vector_field@@Base+0xf8>
   167a0:	stm	sp, {r9, sl}
   167a4:	ldr	r2, [sp, #16]
   167a8:	ldr	r3, [fp]
   167ac:	mov	r1, r8
   167b0:	mov	r0, r5
   167b4:	bl	1630c <flatcc_emitter_copy_buffer@@Base+0x160>
   167b8:	mov	r6, r0
   167bc:	b	1676c <flatcc_verify_table_vector_field@@Base+0xa4>
   167c0:	add	r7, r7, #1
   167c4:	b	16758 <flatcc_verify_table_vector_field@@Base+0x90>

000167c8 <flatcc_verify_union_table@@Base>:
   167c8:	push	{r0, r1, r2, lr}
   167cc:	str	r1, [sp, #4]
   167d0:	ldr	r3, [r0, #8]
   167d4:	str	r3, [sp]
   167d8:	ldr	r3, [r0, #20]
   167dc:	ldr	r2, [r0, #16]
   167e0:	ldm	r0, {r0, r1}
   167e4:	bl	1630c <flatcc_emitter_copy_buffer@@Base+0x160>
   167e8:	add	sp, sp, #12
   167ec:	pop	{pc}		; (ldr pc, [sp], #4)

000167f0 <flatcc_verify_union_struct@@Base>:
   167f0:	ldr	ip, [r0, #4]
   167f4:	ldr	r3, [r0, #16]
   167f8:	ldr	r0, [r0, #20]
   167fc:	cmp	r0, #0
   16800:	beq	16834 <flatcc_verify_union_struct@@Base+0x44>
   16804:	add	r3, r3, r0
   16808:	cmp	ip, r3
   1680c:	bcc	16834 <flatcc_verify_union_struct@@Base+0x44>
   16810:	adds	r1, r1, r3
   16814:	bcs	1683c <flatcc_verify_union_struct@@Base+0x4c>
   16818:	cmp	ip, r1
   1681c:	bcc	16844 <flatcc_verify_union_struct@@Base+0x54>
   16820:	sub	r2, r2, #1
   16824:	tst	r2, r3
   16828:	movne	r0, #11
   1682c:	moveq	r0, #0
   16830:	bx	lr
   16834:	mov	r0, #18
   16838:	bx	lr
   1683c:	mov	r0, #10
   16840:	bx	lr
   16844:	mov	r0, #9
   16848:	bx	lr

0001684c <flatcc_verify_union_string@@Base>:
   1684c:	ldr	r3, [r0, #20]
   16850:	ldr	r2, [r0, #16]
   16854:	ldm	r0, {r0, r1}
   16858:	b	1645c <flatcc_emitter_copy_buffer@@Base+0x2b0>

0001685c <flatcc_verify_buffer_header@@Base>:
   1685c:	ands	r3, r0, #3
   16860:	push	{r0, r1, r4, lr}
   16864:	movne	r0, #5
   16868:	bne	168c0 <flatcc_verify_buffer_header@@Base+0x64>
   1686c:	cmn	r1, #9
   16870:	movhi	r0, #6
   16874:	bhi	168c0 <flatcc_verify_buffer_header@@Base+0x64>
   16878:	cmp	r1, #7
   1687c:	movls	r0, #1
   16880:	bls	168c0 <flatcc_verify_buffer_header@@Base+0x64>
   16884:	cmp	r2, #0
   16888:	beq	168bc <flatcc_verify_buffer_header@@Base+0x60>
   1688c:	mov	r4, r0
   16890:	add	r0, sp, #8
   16894:	mov	r1, r2
   16898:	str	r3, [r0, #-4]!
   1689c:	mov	r2, #4
   168a0:	bl	12358 <strncpy@plt>
   168a4:	ldr	r3, [sp, #4]
   168a8:	ldr	r2, [r4, #4]
   168ac:	cmp	r3, #0
   168b0:	cmpne	r2, r3
   168b4:	movne	r0, #2
   168b8:	bne	168c0 <flatcc_verify_buffer_header@@Base+0x64>
   168bc:	mov	r0, #0
   168c0:	add	sp, sp, #8
   168c4:	pop	{r4, pc}

000168c8 <flatcc_verify_typed_buffer_header@@Base>:
   168c8:	tst	r0, #3
   168cc:	bne	168fc <flatcc_verify_typed_buffer_header@@Base+0x34>
   168d0:	cmn	r1, #9
   168d4:	bhi	16904 <flatcc_verify_typed_buffer_header@@Base+0x3c>
   168d8:	cmp	r1, #7
   168dc:	bls	1690c <flatcc_verify_typed_buffer_header@@Base+0x44>
   168e0:	cmp	r2, #0
   168e4:	beq	16914 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   168e8:	ldr	r0, [r0, #4]
   168ec:	cmp	r2, r0
   168f0:	movne	r0, #2
   168f4:	moveq	r0, #0
   168f8:	bx	lr
   168fc:	mov	r0, #5
   16900:	bx	lr
   16904:	mov	r0, #6
   16908:	bx	lr
   1690c:	mov	r0, #1
   16910:	bx	lr
   16914:	mov	r0, r2
   16918:	bx	lr

0001691c <flatcc_verify_struct_as_root@@Base>:
   1691c:	push	{r4, r5, r6, r7, r8, lr}
   16920:	mov	r7, r0
   16924:	mov	r6, r1
   16928:	mov	r8, r2
   1692c:	mov	r4, r3
   16930:	ldrh	r5, [sp, #24]
   16934:	bl	1685c <flatcc_verify_buffer_header@@Base>
   16938:	cmp	r0, #0
   1693c:	beq	16954 <flatcc_verify_struct_as_root@@Base+0x38>
   16940:	mov	r2, r8
   16944:	mov	r1, r6
   16948:	mov	r0, r7
   1694c:	pop	{r4, r5, r6, r7, r8, lr}
   16950:	b	1685c <flatcc_verify_buffer_header@@Base>
   16954:	ldr	r2, [r7]
   16958:	cmp	r6, r2
   1695c:	movcs	r3, #0
   16960:	movcc	r3, #1
   16964:	cmp	r2, #0
   16968:	orreq	r3, r3, #1
   1696c:	cmp	r3, #0
   16970:	bne	16998 <flatcc_verify_struct_as_root@@Base+0x7c>
   16974:	adds	r4, r2, r4
   16978:	bcs	169a0 <flatcc_verify_struct_as_root@@Base+0x84>
   1697c:	cmp	r6, r4
   16980:	bcc	169a8 <flatcc_verify_struct_as_root@@Base+0x8c>
   16984:	sub	r5, r5, #1
   16988:	tst	r5, r2
   1698c:	moveq	r0, #0
   16990:	movne	r0, #11
   16994:	pop	{r4, r5, r6, r7, r8, pc}
   16998:	mov	r0, #18
   1699c:	pop	{r4, r5, r6, r7, r8, pc}
   169a0:	mov	r0, #10
   169a4:	pop	{r4, r5, r6, r7, r8, pc}
   169a8:	mov	r0, #9
   169ac:	pop	{r4, r5, r6, r7, r8, pc}

000169b0 <flatcc_verify_struct_as_typed_root@@Base>:
   169b0:	push	{r4, r5, r6, lr}
   169b4:	mov	r5, r0
   169b8:	bl	168c8 <flatcc_verify_typed_buffer_header@@Base>
   169bc:	cmp	r0, #0
   169c0:	popne	{r4, r5, r6, pc}
   169c4:	ldr	r2, [r5]
   169c8:	mov	r4, r1
   169cc:	cmp	r1, r2
   169d0:	movcs	r1, #0
   169d4:	movcc	r1, #1
   169d8:	cmp	r2, #0
   169dc:	orreq	r1, r1, #1
   169e0:	cmp	r1, #0
   169e4:	bne	16a10 <flatcc_verify_struct_as_typed_root@@Base+0x60>
   169e8:	adds	r3, r2, r3
   169ec:	bcs	16a18 <flatcc_verify_struct_as_typed_root@@Base+0x68>
   169f0:	cmp	r4, r3
   169f4:	bcc	16a20 <flatcc_verify_struct_as_typed_root@@Base+0x70>
   169f8:	ldrh	r3, [sp, #16]
   169fc:	sub	r3, r3, #1
   16a00:	tst	r3, r2
   16a04:	moveq	r0, #0
   16a08:	movne	r0, #11
   16a0c:	pop	{r4, r5, r6, pc}
   16a10:	mov	r0, #18
   16a14:	pop	{r4, r5, r6, pc}
   16a18:	mov	r0, #10
   16a1c:	pop	{r4, r5, r6, pc}
   16a20:	mov	r0, #9
   16a24:	pop	{r4, r5, r6, pc}

00016a28 <flatcc_verify_table_as_root@@Base>:
   16a28:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16a2c:	mov	r7, r2
   16a30:	mov	r4, r0
   16a34:	mov	r5, r1
   16a38:	mov	r6, r3
   16a3c:	bl	1685c <flatcc_verify_buffer_header@@Base>
   16a40:	subs	r2, r0, #0
   16a44:	beq	16a60 <flatcc_verify_table_as_root@@Base+0x38>
   16a48:	mov	r2, r7
   16a4c:	mov	r1, r5
   16a50:	mov	r0, r4
   16a54:	add	sp, sp, #12
   16a58:	pop	{r4, r5, r6, r7, lr}
   16a5c:	b	1685c <flatcc_verify_buffer_header@@Base>
   16a60:	mov	r3, #100	; 0x64
   16a64:	str	r3, [sp]
   16a68:	str	r6, [sp, #4]
   16a6c:	ldr	r3, [r4]
   16a70:	mov	r1, r5
   16a74:	mov	r0, r4
   16a78:	bl	1630c <flatcc_emitter_copy_buffer@@Base+0x160>
   16a7c:	add	sp, sp, #12
   16a80:	pop	{r4, r5, r6, r7, pc}

00016a84 <flatcc_verify_table_as_typed_root@@Base>:
   16a84:	push	{r0, r1, r2, r4, r5, lr}
   16a88:	mov	r4, r0
   16a8c:	bl	168c8 <flatcc_verify_typed_buffer_header@@Base>
   16a90:	cmp	r0, #0
   16a94:	bne	16ab4 <flatcc_verify_table_as_typed_root@@Base+0x30>
   16a98:	str	r3, [sp, #4]
   16a9c:	mov	r3, #100	; 0x64
   16aa0:	str	r3, [sp]
   16aa4:	mov	r2, r0
   16aa8:	ldr	r3, [r4]
   16aac:	mov	r0, r4
   16ab0:	bl	1630c <flatcc_emitter_copy_buffer@@Base+0x160>
   16ab4:	add	sp, sp, #12
   16ab8:	pop	{r4, r5, pc}

00016abc <flatcc_verify_struct_as_nested_root@@Base>:
   16abc:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ac0:	mov	r7, #1
   16ac4:	ldrh	r4, [sp, #52]	; 0x34
   16ac8:	mvn	sl, #0
   16acc:	mov	r8, r3
   16ad0:	stm	sp, {r7, sl}
   16ad4:	mov	r3, r4
   16ad8:	mov	r5, r0
   16adc:	mov	r6, r1
   16ae0:	mov	fp, r2
   16ae4:	ldr	r9, [sp, #48]	; 0x30
   16ae8:	bl	16570 <flatcc_verify_vector_field@@Base>
   16aec:	cmp	r0, #0
   16af0:	beq	16b18 <flatcc_verify_struct_as_nested_root@@Base+0x5c>
   16af4:	str	sl, [sp, #52]	; 0x34
   16af8:	str	r7, [sp, #48]	; 0x30
   16afc:	mov	r3, r4
   16b00:	mov	r2, fp
   16b04:	mov	r1, r6
   16b08:	mov	r0, r5
   16b0c:	add	sp, sp, #12
   16b10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b14:	b	16570 <flatcc_verify_vector_field@@Base>
   16b18:	mov	r1, r6
   16b1c:	mov	r0, r5
   16b20:	bl	1627c <flatcc_emitter_copy_buffer@@Base+0xd0>
   16b24:	subs	r1, r0, #0
   16b28:	beq	16b54 <flatcc_verify_struct_as_nested_root@@Base+0x98>
   16b2c:	ldr	ip, [r1]
   16b30:	mov	r3, r9
   16b34:	add	r0, r1, ip
   16b38:	str	r4, [sp, #48]	; 0x30
   16b3c:	mov	r2, r8
   16b40:	ldr	r1, [r1, ip]
   16b44:	add	r0, r0, #4
   16b48:	add	sp, sp, #12
   16b4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b50:	b	1691c <flatcc_verify_struct_as_root@@Base>
   16b54:	add	sp, sp, #12
   16b58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016b5c <flatcc_verify_table_as_nested_root@@Base>:
   16b5c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b60:	mov	r7, #1
   16b64:	ldrh	r5, [sp, #48]	; 0x30
   16b68:	mvn	sl, #0
   16b6c:	mov	r8, r3
   16b70:	stm	sp, {r7, sl}
   16b74:	mov	r3, r5
   16b78:	mov	r6, r0
   16b7c:	mov	r4, r1
   16b80:	mov	fp, r2
   16b84:	ldr	r9, [sp, #52]	; 0x34
   16b88:	bl	16570 <flatcc_verify_vector_field@@Base>
   16b8c:	cmp	r0, #0
   16b90:	beq	16bb8 <flatcc_verify_table_as_nested_root@@Base+0x5c>
   16b94:	str	sl, [sp, #52]	; 0x34
   16b98:	str	r7, [sp, #48]	; 0x30
   16b9c:	mov	r3, r5
   16ba0:	mov	r2, fp
   16ba4:	mov	r1, r4
   16ba8:	mov	r0, r6
   16bac:	add	sp, sp, #12
   16bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bb4:	b	16570 <flatcc_verify_vector_field@@Base>
   16bb8:	mov	r1, r4
   16bbc:	mov	r0, r6
   16bc0:	bl	1627c <flatcc_emitter_copy_buffer@@Base+0xd0>
   16bc4:	subs	r3, r0, #0
   16bc8:	beq	16c30 <flatcc_verify_table_as_nested_root@@Base+0xd4>
   16bcc:	ldr	r2, [r3]
   16bd0:	add	r7, r3, r2
   16bd4:	ldr	r5, [r3, r2]
   16bd8:	add	r4, r7, #4
   16bdc:	mov	r2, r8
   16be0:	mov	r1, r5
   16be4:	mov	r0, r4
   16be8:	bl	1685c <flatcc_verify_buffer_header@@Base>
   16bec:	subs	r2, r0, #0
   16bf0:	beq	16c0c <flatcc_verify_table_as_nested_root@@Base+0xb0>
   16bf4:	mov	r2, r8
   16bf8:	mov	r1, r5
   16bfc:	mov	r0, r4
   16c00:	add	sp, sp, #12
   16c04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c08:	b	1685c <flatcc_verify_buffer_header@@Base>
   16c0c:	ldr	r3, [r6, #8]
   16c10:	str	r9, [sp, #52]	; 0x34
   16c14:	str	r3, [sp, #48]	; 0x30
   16c18:	mov	r1, r5
   16c1c:	ldr	r3, [r7, #4]
   16c20:	mov	r0, r4
   16c24:	add	sp, sp, #12
   16c28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c2c:	b	1630c <flatcc_emitter_copy_buffer@@Base+0x160>
   16c30:	add	sp, sp, #12
   16c34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016c38 <flatcc_verify_union_field@@Base>:
   16c38:	push	{r4, r5, r6, r7, r8, lr}
   16c3c:	mov	r6, r1
   16c40:	sub	r1, r1, #1
   16c44:	sub	sp, sp, #32
   16c48:	uxth	r1, r1
   16c4c:	mov	r7, r3
   16c50:	mov	r4, r0
   16c54:	bl	16258 <flatcc_emitter_copy_buffer@@Base+0xac>
   16c58:	uxth	r3, r0
   16c5c:	cmp	r3, #0
   16c60:	bne	16c98 <flatcc_verify_union_field@@Base+0x60>
   16c64:	mov	r1, r6
   16c68:	mov	r0, r4
   16c6c:	bl	16258 <flatcc_emitter_copy_buffer@@Base+0xac>
   16c70:	uxth	r0, r0
   16c74:	cmp	r0, #0
   16c78:	movne	r0, #23
   16c7c:	bne	16c90 <flatcc_verify_union_field@@Base+0x58>
   16c80:	cmp	r2, #0
   16c84:	movne	r0, #21
   16c88:	bne	16c90 <flatcc_verify_union_field@@Base+0x58>
   16c8c:	mov	r0, #0
   16c90:	add	sp, sp, #32
   16c94:	pop	{r4, r5, r6, r7, r8, pc}
   16c98:	ldrh	r3, [r4, #20]
   16c9c:	uxth	r5, r0
   16ca0:	add	r1, r5, #1
   16ca4:	cmp	r1, r3
   16ca8:	movhi	r0, #13
   16cac:	bhi	16c90 <flatcc_verify_union_field@@Base+0x58>
   16cb0:	mov	r1, r6
   16cb4:	mov	r0, r4
   16cb8:	bl	16258 <flatcc_emitter_copy_buffer@@Base+0xac>
   16cbc:	ldr	r3, [r4, #16]
   16cc0:	ldr	r8, [r4]
   16cc4:	add	r5, r5, r3
   16cc8:	ldrb	r1, [r8, r5]
   16ccc:	adds	r3, r1, #0
   16cd0:	movne	r3, #1
   16cd4:	uxth	r0, r0
   16cd8:	cmp	r0, #0
   16cdc:	movne	r0, r3
   16ce0:	orreq	r0, r3, #1
   16ce4:	cmp	r0, #0
   16ce8:	moveq	r0, #24
   16cec:	beq	16c90 <flatcc_verify_union_field@@Base+0x58>
   16cf0:	cmp	r1, #0
   16cf4:	beq	16c8c <flatcc_verify_union_field@@Base+0x54>
   16cf8:	add	r3, sp, #4
   16cfc:	mov	r1, r6
   16d00:	mov	r0, r4
   16d04:	bl	162a8 <flatcc_emitter_copy_buffer@@Base+0xfc>
   16d08:	cmp	r0, #0
   16d0c:	bne	16c90 <flatcc_verify_union_field@@Base+0x58>
   16d10:	ldr	r3, [sp, #4]
   16d14:	cmp	r3, #0
   16d18:	beq	16c8c <flatcc_verify_union_field@@Base+0x54>
   16d1c:	ldr	r1, [r4, #4]
   16d20:	ldr	r2, [r4]
   16d24:	str	r1, [sp, #12]
   16d28:	ldr	r1, [r4, #8]
   16d2c:	str	r3, [sp, #24]
   16d30:	str	r1, [sp, #16]
   16d34:	ldr	r3, [r2, r3]
   16d38:	str	r2, [sp, #8]
   16d3c:	str	r3, [sp, #28]
   16d40:	ldrb	r3, [r8, r5]
   16d44:	add	r0, sp, #8
   16d48:	strb	r3, [sp, #20]
   16d4c:	blx	r7
   16d50:	b	16c90 <flatcc_verify_union_field@@Base+0x58>

00016d54 <flatcc_verify_union_vector_field@@Base>:
   16d54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d58:	sub	r5, r1, #1
   16d5c:	sub	sp, sp, #60	; 0x3c
   16d60:	uxth	r5, r5
   16d64:	mov	r9, r1
   16d68:	mov	r1, r5
   16d6c:	mov	r4, r0
   16d70:	mov	r8, r2
   16d74:	mov	sl, r3
   16d78:	bl	16258 <flatcc_emitter_copy_buffer@@Base+0xac>
   16d7c:	uxth	r0, r0
   16d80:	cmp	r0, #0
   16d84:	bne	16db4 <flatcc_verify_union_vector_field@@Base+0x60>
   16d88:	mov	r1, r9
   16d8c:	mov	r0, r4
   16d90:	bl	16258 <flatcc_emitter_copy_buffer@@Base+0xac>
   16d94:	cmp	r2, #0
   16d98:	uxth	r0, r0
   16d9c:	clz	r0, r0
   16da0:	lsr	r0, r0, #5
   16da4:	moveq	r0, #0
   16da8:	cmp	r0, #0
   16dac:	movne	r3, #22
   16db0:	bne	16e14 <flatcc_verify_union_vector_field@@Base+0xc0>
   16db4:	mov	r7, #1
   16db8:	mvn	fp, #0
   16dbc:	mov	r3, r7
   16dc0:	stm	sp, {r7, fp}
   16dc4:	mov	r2, r8
   16dc8:	mov	r1, r5
   16dcc:	mov	r0, r4
   16dd0:	bl	16570 <flatcc_verify_vector_field@@Base>
   16dd4:	subs	r6, r0, #0
   16dd8:	beq	16dfc <flatcc_verify_union_vector_field@@Base+0xa8>
   16ddc:	stm	sp, {r7, fp}
   16de0:	mov	r3, r7
   16de4:	mov	r2, r8
   16de8:	mov	r1, r5
   16dec:	mov	r0, r4
   16df0:	bl	16570 <flatcc_verify_vector_field@@Base>
   16df4:	mov	r3, r0
   16df8:	b	16e14 <flatcc_verify_union_vector_field@@Base+0xc0>
   16dfc:	mov	r1, r5
   16e00:	mov	r0, r4
   16e04:	bl	1627c <flatcc_emitter_copy_buffer@@Base+0xd0>
   16e08:	cmp	r0, #0
   16e0c:	bne	16e20 <flatcc_verify_union_vector_field@@Base+0xcc>
   16e10:	mov	r3, r6
   16e14:	mov	r0, r3
   16e18:	add	sp, sp, #60	; 0x3c
   16e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e20:	ldr	r3, [r0]
   16e24:	mov	r2, r8
   16e28:	add	r5, r0, r3
   16e2c:	ldr	r7, [r0, r3]
   16e30:	mov	r1, r9
   16e34:	add	r3, sp, #28
   16e38:	mov	r0, r4
   16e3c:	bl	162a8 <flatcc_emitter_copy_buffer@@Base+0xfc>
   16e40:	subs	r3, r0, #0
   16e44:	bne	16e14 <flatcc_verify_union_vector_field@@Base+0xc0>
   16e48:	ldr	r9, [sp, #28]
   16e4c:	cmp	r9, #0
   16e50:	beq	16e10 <flatcc_verify_union_vector_field@@Base+0xbc>
   16e54:	ldr	r8, [r4, #8]
   16e58:	cmp	r8, #0
   16e5c:	movle	r3, #3
   16e60:	ble	16e14 <flatcc_verify_union_vector_field@@Base+0xc0>
   16e64:	ldm	r4, {r6, fp}
   16e68:	mvn	r3, #-1073741824	; 0xc0000000
   16e6c:	mov	r2, r9
   16e70:	ldr	r4, [r6, r9]
   16e74:	str	r3, [sp, #8]
   16e78:	mov	r3, #4
   16e7c:	str	r3, [sp, #4]
   16e80:	str	r3, [sp]
   16e84:	mov	r1, fp
   16e88:	mov	r3, r4
   16e8c:	mov	r0, r6
   16e90:	bl	163ec <flatcc_emitter_copy_buffer@@Base+0x240>
   16e94:	subs	r3, r0, #0
   16e98:	bne	16e14 <flatcc_verify_union_vector_field@@Base+0xc0>
   16e9c:	add	r4, r4, r9
   16ea0:	ldr	r2, [r6, r4]
   16ea4:	cmp	r7, r2
   16ea8:	movne	r3, #34	; 0x22
   16eac:	bne	16e14 <flatcc_verify_union_vector_field@@Base+0xc0>
   16eb0:	add	r5, r5, #4
   16eb4:	add	r4, r4, #4
   16eb8:	add	r7, r7, r5
   16ebc:	sub	r8, r8, #1
   16ec0:	str	r6, [sp, #32]
   16ec4:	str	fp, [sp, #36]	; 0x24
   16ec8:	str	r8, [sp, #40]	; 0x28
   16ecc:	cmp	r5, r7
   16ed0:	beq	16e14 <flatcc_verify_union_vector_field@@Base+0xc0>
   16ed4:	ldr	r1, [r6, r4]
   16ed8:	ldrb	r2, [r5]
   16edc:	cmp	r1, #0
   16ee0:	bne	16ef4 <flatcc_verify_union_vector_field@@Base+0x1a0>
   16ee4:	cmp	r2, #0
   16ee8:	beq	16f2c <flatcc_verify_union_vector_field@@Base+0x1d8>
   16eec:	mov	r3, #32
   16ef0:	b	16e14 <flatcc_verify_union_vector_field@@Base+0xc0>
   16ef4:	cmp	r2, #0
   16ef8:	str	r3, [sp, #20]
   16efc:	beq	16f38 <flatcc_verify_union_vector_field@@Base+0x1e4>
   16f00:	add	r0, sp, #32
   16f04:	strb	r2, [sp, #44]	; 0x2c
   16f08:	str	r4, [sp, #48]	; 0x30
   16f0c:	str	r1, [sp, #52]	; 0x34
   16f10:	blx	sl
   16f14:	ldr	r3, [sp, #20]
   16f18:	cmp	r0, #0
   16f1c:	beq	16f2c <flatcc_verify_union_vector_field@@Base+0x1d8>
   16f20:	add	r0, sp, #32
   16f24:	blx	sl
   16f28:	b	16df4 <flatcc_verify_union_vector_field@@Base+0xa0>
   16f2c:	add	r4, r4, #4
   16f30:	add	r5, r5, #1
   16f34:	b	16ecc <flatcc_verify_union_vector_field@@Base+0x178>
   16f38:	mov	r3, #33	; 0x21
   16f3c:	b	16e14 <flatcc_verify_union_vector_field@@Base+0xc0>
   16f40:	subs	r2, r1, #1
   16f44:	bxeq	lr
   16f48:	bcc	17120 <flatcc_verify_union_vector_field@@Base+0x3cc>
   16f4c:	cmp	r0, r1
   16f50:	bls	17104 <flatcc_verify_union_vector_field@@Base+0x3b0>
   16f54:	tst	r1, r2
   16f58:	beq	17110 <flatcc_verify_union_vector_field@@Base+0x3bc>
   16f5c:	clz	r3, r0
   16f60:	clz	r2, r1
   16f64:	sub	r3, r2, r3
   16f68:	rsbs	r3, r3, #31
   16f6c:	addne	r3, r3, r3, lsl #1
   16f70:	mov	r2, #0
   16f74:	addne	pc, pc, r3, lsl #2
   16f78:	nop			; (mov r0, r0)
   16f7c:	cmp	r0, r1, lsl #31
   16f80:	adc	r2, r2, r2
   16f84:	subcs	r0, r0, r1, lsl #31
   16f88:	cmp	r0, r1, lsl #30
   16f8c:	adc	r2, r2, r2
   16f90:	subcs	r0, r0, r1, lsl #30
   16f94:	cmp	r0, r1, lsl #29
   16f98:	adc	r2, r2, r2
   16f9c:	subcs	r0, r0, r1, lsl #29
   16fa0:	cmp	r0, r1, lsl #28
   16fa4:	adc	r2, r2, r2
   16fa8:	subcs	r0, r0, r1, lsl #28
   16fac:	cmp	r0, r1, lsl #27
   16fb0:	adc	r2, r2, r2
   16fb4:	subcs	r0, r0, r1, lsl #27
   16fb8:	cmp	r0, r1, lsl #26
   16fbc:	adc	r2, r2, r2
   16fc0:	subcs	r0, r0, r1, lsl #26
   16fc4:	cmp	r0, r1, lsl #25
   16fc8:	adc	r2, r2, r2
   16fcc:	subcs	r0, r0, r1, lsl #25
   16fd0:	cmp	r0, r1, lsl #24
   16fd4:	adc	r2, r2, r2
   16fd8:	subcs	r0, r0, r1, lsl #24
   16fdc:	cmp	r0, r1, lsl #23
   16fe0:	adc	r2, r2, r2
   16fe4:	subcs	r0, r0, r1, lsl #23
   16fe8:	cmp	r0, r1, lsl #22
   16fec:	adc	r2, r2, r2
   16ff0:	subcs	r0, r0, r1, lsl #22
   16ff4:	cmp	r0, r1, lsl #21
   16ff8:	adc	r2, r2, r2
   16ffc:	subcs	r0, r0, r1, lsl #21
   17000:	cmp	r0, r1, lsl #20
   17004:	adc	r2, r2, r2
   17008:	subcs	r0, r0, r1, lsl #20
   1700c:	cmp	r0, r1, lsl #19
   17010:	adc	r2, r2, r2
   17014:	subcs	r0, r0, r1, lsl #19
   17018:	cmp	r0, r1, lsl #18
   1701c:	adc	r2, r2, r2
   17020:	subcs	r0, r0, r1, lsl #18
   17024:	cmp	r0, r1, lsl #17
   17028:	adc	r2, r2, r2
   1702c:	subcs	r0, r0, r1, lsl #17
   17030:	cmp	r0, r1, lsl #16
   17034:	adc	r2, r2, r2
   17038:	subcs	r0, r0, r1, lsl #16
   1703c:	cmp	r0, r1, lsl #15
   17040:	adc	r2, r2, r2
   17044:	subcs	r0, r0, r1, lsl #15
   17048:	cmp	r0, r1, lsl #14
   1704c:	adc	r2, r2, r2
   17050:	subcs	r0, r0, r1, lsl #14
   17054:	cmp	r0, r1, lsl #13
   17058:	adc	r2, r2, r2
   1705c:	subcs	r0, r0, r1, lsl #13
   17060:	cmp	r0, r1, lsl #12
   17064:	adc	r2, r2, r2
   17068:	subcs	r0, r0, r1, lsl #12
   1706c:	cmp	r0, r1, lsl #11
   17070:	adc	r2, r2, r2
   17074:	subcs	r0, r0, r1, lsl #11
   17078:	cmp	r0, r1, lsl #10
   1707c:	adc	r2, r2, r2
   17080:	subcs	r0, r0, r1, lsl #10
   17084:	cmp	r0, r1, lsl #9
   17088:	adc	r2, r2, r2
   1708c:	subcs	r0, r0, r1, lsl #9
   17090:	cmp	r0, r1, lsl #8
   17094:	adc	r2, r2, r2
   17098:	subcs	r0, r0, r1, lsl #8
   1709c:	cmp	r0, r1, lsl #7
   170a0:	adc	r2, r2, r2
   170a4:	subcs	r0, r0, r1, lsl #7
   170a8:	cmp	r0, r1, lsl #6
   170ac:	adc	r2, r2, r2
   170b0:	subcs	r0, r0, r1, lsl #6
   170b4:	cmp	r0, r1, lsl #5
   170b8:	adc	r2, r2, r2
   170bc:	subcs	r0, r0, r1, lsl #5
   170c0:	cmp	r0, r1, lsl #4
   170c4:	adc	r2, r2, r2
   170c8:	subcs	r0, r0, r1, lsl #4
   170cc:	cmp	r0, r1, lsl #3
   170d0:	adc	r2, r2, r2
   170d4:	subcs	r0, r0, r1, lsl #3
   170d8:	cmp	r0, r1, lsl #2
   170dc:	adc	r2, r2, r2
   170e0:	subcs	r0, r0, r1, lsl #2
   170e4:	cmp	r0, r1, lsl #1
   170e8:	adc	r2, r2, r2
   170ec:	subcs	r0, r0, r1, lsl #1
   170f0:	cmp	r0, r1
   170f4:	adc	r2, r2, r2
   170f8:	subcs	r0, r0, r1
   170fc:	mov	r0, r2
   17100:	bx	lr
   17104:	moveq	r0, #1
   17108:	movne	r0, #0
   1710c:	bx	lr
   17110:	clz	r2, r1
   17114:	rsb	r2, r2, #31
   17118:	lsr	r0, r0, r2
   1711c:	bx	lr
   17120:	cmp	r0, #0
   17124:	mvnne	r0, #0
   17128:	b	1714c <flatcc_verify_union_vector_field@@Base+0x3f8>
   1712c:	cmp	r1, #0
   17130:	beq	17120 <flatcc_verify_union_vector_field@@Base+0x3cc>
   17134:	push	{r0, r1, lr}
   17138:	bl	16f40 <flatcc_verify_union_vector_field@@Base+0x1ec>
   1713c:	pop	{r1, r2, lr}
   17140:	mul	r3, r2, r0
   17144:	sub	r1, r1, r3
   17148:	bx	lr
   1714c:	push	{r1, lr}
   17150:	mov	r0, #8
   17154:	bl	122d4 <raise@plt>
   17158:	pop	{r1, pc}

0001715c <__libc_csu_init@@Base>:
   1715c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17160:	mov	r7, r0
   17164:	ldr	r6, [pc, #72]	; 171b4 <__libc_csu_init@@Base+0x58>
   17168:	ldr	r5, [pc, #72]	; 171b8 <__libc_csu_init@@Base+0x5c>
   1716c:	add	r6, pc, r6
   17170:	add	r5, pc, r5
   17174:	sub	r6, r6, r5
   17178:	mov	r8, r1
   1717c:	mov	r9, r2
   17180:	bl	122b4 <raise@plt-0x20>
   17184:	asrs	r6, r6, #2
   17188:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1718c:	mov	r4, #0
   17190:	add	r4, r4, #1
   17194:	ldr	r3, [r5], #4
   17198:	mov	r2, r9
   1719c:	mov	r1, r8
   171a0:	mov	r0, r7
   171a4:	blx	r3
   171a8:	cmp	r6, r4
   171ac:	bne	17190 <__libc_csu_init@@Base+0x34>
   171b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   171b4:	muleq	r1, ip, sp
   171b8:	muleq	r1, r4, sp

000171bc <__libc_csu_fini@@Base>:
   171bc:	bx	lr

Disassembly of section .fini:

000171c0 <.fini>:
   171c0:	push	{r3, lr}
   171c4:	pop	{r3, pc}
