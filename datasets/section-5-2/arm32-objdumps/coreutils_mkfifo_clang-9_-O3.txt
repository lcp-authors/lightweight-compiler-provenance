
../repos/coreutils/src/mkfifo:     file format elf32-littlearm


Disassembly of section .init:

00011668 <.init>:
   11668:	push	{r3, lr}
   1166c:	bl	11ae4 <__assert_fail@plt+0x48>
   11670:	pop	{r3, pc}

Disassembly of section .plt:

00011674 <fstatfs64@plt-0x14>:
   11674:	push	{lr}		; (str lr, [sp, #-4]!)
   11678:	ldr	lr, [pc, #4]	; 11684 <fstatfs64@plt-0x4>
   1167c:	add	lr, pc, lr
   11680:	ldr	pc, [lr, #8]!
   11684:	andeq	fp, r1, ip, ror r9

00011688 <fstatfs64@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #110592	; 0x1b000
   11690:	ldr	pc, [ip, #2428]!	; 0x97c

00011694 <selabel_lookup@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #110592	; 0x1b000
   1169c:	ldr	pc, [ip, #2420]!	; 0x974

000116a0 <calloc@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #110592	; 0x1b000
   116a8:	ldr	pc, [ip, #2412]!	; 0x96c

000116ac <fputs_unlocked@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #110592	; 0x1b000
   116b4:	ldr	pc, [ip, #2404]!	; 0x964

000116b8 <raise@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #110592	; 0x1b000
   116c0:	ldr	pc, [ip, #2396]!	; 0x95c

000116c4 <is_selinux_enabled@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #110592	; 0x1b000
   116cc:	ldr	pc, [ip, #2388]!	; 0x954

000116d0 <strcmp@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #110592	; 0x1b000
   116d8:	ldr	pc, [ip, #2380]!	; 0x94c

000116dc <context_type_get@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #110592	; 0x1b000
   116e4:	ldr	pc, [ip, #2372]!	; 0x944

000116e8 <fflush@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #110592	; 0x1b000
   116f0:	ldr	pc, [ip, #2364]!	; 0x93c

000116f4 <lsetfilecon@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #110592	; 0x1b000
   116fc:	ldr	pc, [ip, #2356]!	; 0x934

00011700 <memmove@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #110592	; 0x1b000
   11708:	ldr	pc, [ip, #2348]!	; 0x92c

0001170c <free@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #110592	; 0x1b000
   11714:	ldr	pc, [ip, #2340]!	; 0x924

00011718 <faccessat@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #110592	; 0x1b000
   11720:	ldr	pc, [ip, #2332]!	; 0x91c

00011724 <_exit@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #110592	; 0x1b000
   1172c:	ldr	pc, [ip, #2324]!	; 0x914

00011730 <memcpy@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #110592	; 0x1b000
   11738:	ldr	pc, [ip, #2316]!	; 0x90c

0001173c <mbsinit@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #110592	; 0x1b000
   11744:	ldr	pc, [ip, #2308]!	; 0x904

00011748 <context_new@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #110592	; 0x1b000
   11750:	ldr	pc, [ip, #2300]!	; 0x8fc

00011754 <dcgettext@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #110592	; 0x1b000
   1175c:	ldr	pc, [ip, #2292]!	; 0x8f4

00011760 <context_type_set@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #110592	; 0x1b000
   11768:	ldr	pc, [ip, #2284]!	; 0x8ec

0001176c <realloc@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #110592	; 0x1b000
   11774:	ldr	pc, [ip, #2276]!	; 0x8e4

00011778 <fgetfilecon@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #110592	; 0x1b000
   11780:	ldr	pc, [ip, #2268]!	; 0x8dc

00011784 <textdomain@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #110592	; 0x1b000
   1178c:	ldr	pc, [ip, #2260]!	; 0x8d4

00011790 <rawmemchr@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #110592	; 0x1b000
   11798:	ldr	pc, [ip, #2252]!	; 0x8cc

0001179c <__fxstatat64@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #110592	; 0x1b000
   117a4:	ldr	pc, [ip, #2244]!	; 0x8c4

000117a8 <iswprint@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #110592	; 0x1b000
   117b0:	ldr	pc, [ip, #2236]!	; 0x8bc

000117b4 <__fxstat64@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #110592	; 0x1b000
   117bc:	ldr	pc, [ip, #2228]!	; 0x8b4

000117c0 <readlink@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #110592	; 0x1b000
   117c8:	ldr	pc, [ip, #2220]!	; 0x8ac

000117cc <fwrite@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #110592	; 0x1b000
   117d4:	ldr	pc, [ip, #2212]!	; 0x8a4

000117d8 <lseek64@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #110592	; 0x1b000
   117e0:	ldr	pc, [ip, #2204]!	; 0x89c

000117e4 <__ctype_get_mb_cur_max@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #110592	; 0x1b000
   117ec:	ldr	pc, [ip, #2196]!	; 0x894

000117f0 <getcon@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #110592	; 0x1b000
   117f8:	ldr	pc, [ip, #2188]!	; 0x88c

000117fc <__fpending@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #110592	; 0x1b000
   11804:	ldr	pc, [ip, #2180]!	; 0x884

00011808 <mbrtowc@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #110592	; 0x1b000
   11810:	ldr	pc, [ip, #2172]!	; 0x87c

00011814 <error@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #110592	; 0x1b000
   1181c:	ldr	pc, [ip, #2164]!	; 0x874

00011820 <open64@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #110592	; 0x1b000
   11828:	ldr	pc, [ip, #2156]!	; 0x86c

0001182c <lgetfilecon@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #110592	; 0x1b000
   11834:	ldr	pc, [ip, #2148]!	; 0x864

00011838 <malloc@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #110592	; 0x1b000
   11840:	ldr	pc, [ip, #2140]!	; 0x85c

00011844 <__libc_start_main@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #110592	; 0x1b000
   1184c:	ldr	pc, [ip, #2132]!	; 0x854

00011850 <__freading@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #110592	; 0x1b000
   11858:	ldr	pc, [ip, #2124]!	; 0x84c

0001185c <__gmon_start__@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #110592	; 0x1b000
   11864:	ldr	pc, [ip, #2116]!	; 0x844

00011868 <context_free@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #110592	; 0x1b000
   11870:	ldr	pc, [ip, #2108]!	; 0x83c

00011874 <getopt_long@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #110592	; 0x1b000
   1187c:	ldr	pc, [ip, #2100]!	; 0x834

00011880 <__ctype_b_loc@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #110592	; 0x1b000
   11888:	ldr	pc, [ip, #2092]!	; 0x82c

0001188c <getcwd@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #110592	; 0x1b000
   11894:	ldr	pc, [ip, #2084]!	; 0x824

00011898 <exit@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #110592	; 0x1b000
   118a0:	ldr	pc, [ip, #2076]!	; 0x81c

000118a4 <getfilecon@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #110592	; 0x1b000
   118ac:	ldr	pc, [ip, #2068]!	; 0x814

000118b0 <bcmp@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #110592	; 0x1b000
   118b8:	ldr	pc, [ip, #2060]!	; 0x80c

000118bc <strlen@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #110592	; 0x1b000
   118c4:	ldr	pc, [ip, #2052]!	; 0x804

000118c8 <selabel_open@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #110592	; 0x1b000
   118d0:	ldr	pc, [ip, #2044]!	; 0x7fc

000118d4 <openat64@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #110592	; 0x1b000
   118dc:	ldr	pc, [ip, #2036]!	; 0x7f4

000118e0 <setfscreatecon@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #110592	; 0x1b000
   118e8:	ldr	pc, [ip, #2028]!	; 0x7ec

000118ec <__errno_location@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #110592	; 0x1b000
   118f4:	ldr	pc, [ip, #2020]!	; 0x7e4

000118f8 <__sprintf_chk@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #110592	; 0x1b000
   11900:	ldr	pc, [ip, #2012]!	; 0x7dc

00011904 <__cxa_atexit@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #110592	; 0x1b000
   1190c:	ldr	pc, [ip, #2004]!	; 0x7d4

00011910 <memset@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #110592	; 0x1b000
   11918:	ldr	pc, [ip, #1996]!	; 0x7cc

0001191c <__printf_chk@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #110592	; 0x1b000
   11924:	ldr	pc, [ip, #1988]!	; 0x7c4

00011928 <fileno@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #110592	; 0x1b000
   11930:	ldr	pc, [ip, #1980]!	; 0x7bc

00011934 <__fprintf_chk@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #110592	; 0x1b000
   1193c:	ldr	pc, [ip, #1972]!	; 0x7b4

00011940 <fclose@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #110592	; 0x1b000
   11948:	ldr	pc, [ip, #1964]!	; 0x7ac

0001194c <fseeko64@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #110592	; 0x1b000
   11954:	ldr	pc, [ip, #1956]!	; 0x7a4

00011958 <fcntl64@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #110592	; 0x1b000
   11960:	ldr	pc, [ip, #1948]!	; 0x79c

00011964 <setlocale@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #110592	; 0x1b000
   1196c:	ldr	pc, [ip, #1940]!	; 0x794

00011970 <fsetfilecon@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #110592	; 0x1b000
   11978:	ldr	pc, [ip, #1932]!	; 0x78c

0001197c <strrchr@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #110592	; 0x1b000
   11984:	ldr	pc, [ip, #1924]!	; 0x784

00011988 <nl_langinfo@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #110592	; 0x1b000
   11990:	ldr	pc, [ip, #1916]!	; 0x77c

00011994 <readdir64@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #110592	; 0x1b000
   1199c:	ldr	pc, [ip, #1908]!	; 0x774

000119a0 <fdopendir@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #110592	; 0x1b000
   119a8:	ldr	pc, [ip, #1900]!	; 0x76c

000119ac <security_compute_create@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #110592	; 0x1b000
   119b4:	ldr	pc, [ip, #1892]!	; 0x764

000119b8 <dirfd@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #110592	; 0x1b000
   119c0:	ldr	pc, [ip, #1884]!	; 0x75c

000119c4 <fchdir@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #110592	; 0x1b000
   119cc:	ldr	pc, [ip, #1876]!	; 0x754

000119d0 <qsort@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #110592	; 0x1b000
   119d8:	ldr	pc, [ip, #1868]!	; 0x74c

000119dc <freecon@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #110592	; 0x1b000
   119e4:	ldr	pc, [ip, #1860]!	; 0x744

000119e8 <bindtextdomain@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #110592	; 0x1b000
   119f0:	ldr	pc, [ip, #1852]!	; 0x73c

000119f4 <getfscreatecon@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #110592	; 0x1b000
   119fc:	ldr	pc, [ip, #1844]!	; 0x734

00011a00 <umask@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #110592	; 0x1b000
   11a08:	ldr	pc, [ip, #1836]!	; 0x72c

00011a0c <context_str@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #110592	; 0x1b000
   11a14:	ldr	pc, [ip, #1828]!	; 0x724

00011a18 <chmod@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #110592	; 0x1b000
   11a20:	ldr	pc, [ip, #1820]!	; 0x71c

00011a24 <__xstat64@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #110592	; 0x1b000
   11a2c:	ldr	pc, [ip, #1812]!	; 0x714

00011a30 <strncmp@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #110592	; 0x1b000
   11a38:	ldr	pc, [ip, #1804]!	; 0x70c

00011a3c <abort@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #110592	; 0x1b000
   11a44:	ldr	pc, [ip, #1796]!	; 0x704

00011a48 <close@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #110592	; 0x1b000
   11a50:	ldr	pc, [ip, #1788]!	; 0x6fc

00011a54 <__lxstat64@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #110592	; 0x1b000
   11a5c:	ldr	pc, [ip, #1780]!	; 0x6f4

00011a60 <mkfifo@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #110592	; 0x1b000
   11a68:	ldr	pc, [ip, #1772]!	; 0x6ec

00011a6c <mode_to_security_class@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #110592	; 0x1b000
   11a74:	ldr	pc, [ip, #1764]!	; 0x6e4

00011a78 <closedir@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #110592	; 0x1b000
   11a80:	ldr	pc, [ip, #1756]!	; 0x6dc

00011a84 <strspn@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #110592	; 0x1b000
   11a8c:	ldr	pc, [ip, #1748]!	; 0x6d4

00011a90 <__mempcpy_chk@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #110592	; 0x1b000
   11a98:	ldr	pc, [ip, #1740]!	; 0x6cc

00011a9c <__assert_fail@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #110592	; 0x1b000
   11aa4:	ldr	pc, [ip, #1732]!	; 0x6c4

Disassembly of section .text:

00011aa8 <lchmod@@Base-0x56c8>:
   11aa8:	mov	fp, #0
   11aac:	mov	lr, #0
   11ab0:	pop	{r1}		; (ldr r1, [sp], #4)
   11ab4:	mov	r2, sp
   11ab8:	push	{r2}		; (str r2, [sp, #-4]!)
   11abc:	push	{r0}		; (str r0, [sp, #-4]!)
   11ac0:	ldr	ip, [pc, #16]	; 11ad8 <__assert_fail@plt+0x3c>
   11ac4:	push	{ip}		; (str ip, [sp, #-4]!)
   11ac8:	ldr	r0, [pc, #12]	; 11adc <__assert_fail@plt+0x40>
   11acc:	ldr	r3, [pc, #12]	; 11ae0 <__assert_fail@plt+0x44>
   11ad0:	bl	11844 <__libc_start_main@plt>
   11ad4:	bl	11a3c <abort@plt>
   11ad8:	muleq	r1, r4, r3
   11adc:	andeq	r1, r1, r0, lsr lr
   11ae0:	andeq	fp, r1, r4, lsr r3
   11ae4:	ldr	r3, [pc, #20]	; 11b00 <__assert_fail@plt+0x64>
   11ae8:	ldr	r2, [pc, #20]	; 11b04 <__assert_fail@plt+0x68>
   11aec:	add	r3, pc, r3
   11af0:	ldr	r2, [r3, r2]
   11af4:	cmp	r2, #0
   11af8:	bxeq	lr
   11afc:	b	1185c <__gmon_start__@plt>
   11b00:	andeq	fp, r1, ip, lsl #10
   11b04:	andeq	r0, r0, ip, ror #2
   11b08:	ldr	r0, [pc, #24]	; 11b28 <__assert_fail@plt+0x8c>
   11b0c:	ldr	r3, [pc, #24]	; 11b2c <__assert_fail@plt+0x90>
   11b10:	cmp	r3, r0
   11b14:	bxeq	lr
   11b18:	ldr	r3, [pc, #16]	; 11b30 <__assert_fail@plt+0x94>
   11b1c:	cmp	r3, #0
   11b20:	bxeq	lr
   11b24:	bx	r3
   11b28:	andeq	sp, r2, r0, asr #3
   11b2c:	andeq	sp, r2, r0, asr #3
   11b30:	andeq	r0, r0, r0
   11b34:	ldr	r0, [pc, #36]	; 11b60 <__assert_fail@plt+0xc4>
   11b38:	ldr	r1, [pc, #36]	; 11b64 <__assert_fail@plt+0xc8>
   11b3c:	sub	r1, r1, r0
   11b40:	asr	r1, r1, #2
   11b44:	add	r1, r1, r1, lsr #31
   11b48:	asrs	r1, r1, #1
   11b4c:	bxeq	lr
   11b50:	ldr	r3, [pc, #16]	; 11b68 <__assert_fail@plt+0xcc>
   11b54:	cmp	r3, #0
   11b58:	bxeq	lr
   11b5c:	bx	r3
   11b60:	andeq	sp, r2, r0, asr #3
   11b64:	andeq	sp, r2, r0, asr #3
   11b68:	andeq	r0, r0, r0
   11b6c:	push	{r4, lr}
   11b70:	ldr	r4, [pc, #24]	; 11b90 <__assert_fail@plt+0xf4>
   11b74:	ldrb	r3, [r4]
   11b78:	cmp	r3, #0
   11b7c:	popne	{r4, pc}
   11b80:	bl	11b08 <__assert_fail@plt+0x6c>
   11b84:	mov	r3, #1
   11b88:	strb	r3, [r4]
   11b8c:	pop	{r4, pc}
   11b90:	ldrdeq	sp, [r2], -ip
   11b94:	b	11b34 <__assert_fail@plt+0x98>
   11b98:	push	{fp, lr}
   11b9c:	mov	fp, sp
   11ba0:	sub	sp, sp, #56	; 0x38
   11ba4:	mov	r4, r0
   11ba8:	cmp	r0, #0
   11bac:	bne	11dec <__assert_fail@plt+0x350>
   11bb0:	movw	r1, #46051	; 0xb3e3
   11bb4:	mov	r0, #0
   11bb8:	mov	r2, #5
   11bbc:	movt	r1, #1
   11bc0:	bl	11754 <dcgettext@plt>
   11bc4:	mov	r1, r0
   11bc8:	movw	r0, #53736	; 0xd1e8
   11bcc:	movt	r0, #2
   11bd0:	ldr	r2, [r0]
   11bd4:	mov	r0, #1
   11bd8:	bl	1191c <__printf_chk@plt>
   11bdc:	movw	r1, #46082	; 0xb402
   11be0:	mov	r0, #0
   11be4:	mov	r2, #5
   11be8:	movt	r1, #1
   11bec:	bl	11754 <dcgettext@plt>
   11bf0:	movw	r7, #53716	; 0xd1d4
   11bf4:	movt	r7, #2
   11bf8:	ldr	r1, [r7]
   11bfc:	bl	116ac <fputs_unlocked@plt>
   11c00:	movw	r1, #46851	; 0xb703
   11c04:	mov	r0, #0
   11c08:	mov	r2, #5
   11c0c:	movt	r1, #1
   11c10:	bl	11754 <dcgettext@plt>
   11c14:	ldr	r1, [r7]
   11c18:	bl	116ac <fputs_unlocked@plt>
   11c1c:	movw	r1, #46132	; 0xb434
   11c20:	mov	r0, #0
   11c24:	mov	r2, #5
   11c28:	movt	r1, #1
   11c2c:	bl	11754 <dcgettext@plt>
   11c30:	ldr	r1, [r7]
   11c34:	bl	116ac <fputs_unlocked@plt>
   11c38:	movw	r1, #46205	; 0xb47d
   11c3c:	mov	r0, #0
   11c40:	mov	r2, #5
   11c44:	movt	r1, #1
   11c48:	bl	11754 <dcgettext@plt>
   11c4c:	ldr	r1, [r7]
   11c50:	bl	116ac <fputs_unlocked@plt>
   11c54:	movw	r1, #46412	; 0xb54c
   11c58:	mov	r0, #0
   11c5c:	mov	r2, #5
   11c60:	movt	r1, #1
   11c64:	bl	11754 <dcgettext@plt>
   11c68:	ldr	r1, [r7]
   11c6c:	bl	116ac <fputs_unlocked@plt>
   11c70:	movw	r1, #46457	; 0xb579
   11c74:	mov	r0, #0
   11c78:	mov	r2, #5
   11c7c:	movt	r1, #1
   11c80:	bl	11754 <dcgettext@plt>
   11c84:	ldr	r1, [r7]
   11c88:	bl	116ac <fputs_unlocked@plt>
   11c8c:	movw	r0, #47336	; 0xb8e8
   11c90:	mov	r2, #48	; 0x30
   11c94:	mov	r6, sp
   11c98:	movw	r5, #46511	; 0xb5af
   11c9c:	movt	r0, #1
   11ca0:	movt	r5, #1
   11ca4:	add	r1, r0, #32
   11ca8:	add	r3, r0, #16
   11cac:	vld1.64	{d18-d19}, [r0], r2
   11cb0:	vld1.64	{d16-d17}, [r1]
   11cb4:	vld1.64	{d20-d21}, [r3]
   11cb8:	vldr	d22, [r0]
   11cbc:	add	r1, r6, #32
   11cc0:	add	r0, r6, #16
   11cc4:	vst1.64	{d16-d17}, [r1]
   11cc8:	movw	r1, #46926	; 0xb74e
   11ccc:	vst1.64	{d20-d21}, [r0]
   11cd0:	mov	r0, r6
   11cd4:	movt	r1, #1
   11cd8:	vst1.64	{d18-d19}, [r0], r2
   11cdc:	vstr	d22, [r0]
   11ce0:	mov	r0, r5
   11ce4:	bl	116d0 <strcmp@plt>
   11ce8:	cmp	r0, #0
   11cec:	ldrne	r1, [r6, #8]!
   11cf0:	cmpne	r1, #0
   11cf4:	bne	11ce0 <__assert_fail@plt+0x244>
   11cf8:	movw	r1, #47021	; 0xb7ad
   11cfc:	ldr	r6, [r6, #4]
   11d00:	mov	r0, #0
   11d04:	mov	r2, #5
   11d08:	movt	r1, #1
   11d0c:	bl	11754 <dcgettext@plt>
   11d10:	movw	r2, #46647	; 0xb637
   11d14:	movw	r3, #47044	; 0xb7c4
   11d18:	mov	r1, r0
   11d1c:	mov	r0, #1
   11d20:	movt	r2, #1
   11d24:	movt	r3, #1
   11d28:	bl	1191c <__printf_chk@plt>
   11d2c:	cmp	r6, #0
   11d30:	mov	r0, #5
   11d34:	mov	r1, #0
   11d38:	moveq	r6, r5
   11d3c:	bl	11964 <setlocale@plt>
   11d40:	cmp	r0, #0
   11d44:	beq	11d7c <__assert_fail@plt+0x2e0>
   11d48:	movw	r1, #47084	; 0xb7ec
   11d4c:	mov	r2, #3
   11d50:	movt	r1, #1
   11d54:	bl	11a30 <strncmp@plt>
   11d58:	cmp	r0, #0
   11d5c:	beq	11d7c <__assert_fail@plt+0x2e0>
   11d60:	movw	r1, #47088	; 0xb7f0
   11d64:	mov	r0, #0
   11d68:	mov	r2, #5
   11d6c:	movt	r1, #1
   11d70:	bl	11754 <dcgettext@plt>
   11d74:	ldr	r1, [r7]
   11d78:	bl	116ac <fputs_unlocked@plt>
   11d7c:	movw	r1, #47159	; 0xb837
   11d80:	mov	r0, #0
   11d84:	mov	r2, #5
   11d88:	movt	r1, #1
   11d8c:	bl	11754 <dcgettext@plt>
   11d90:	movw	r2, #47044	; 0xb7c4
   11d94:	mov	r1, r0
   11d98:	mov	r0, #1
   11d9c:	mov	r3, r5
   11da0:	movt	r2, #1
   11da4:	bl	1191c <__printf_chk@plt>
   11da8:	movw	r1, #47186	; 0xb852
   11dac:	mov	r0, #0
   11db0:	mov	r2, #5
   11db4:	movt	r1, #1
   11db8:	bl	11754 <dcgettext@plt>
   11dbc:	mov	r1, r0
   11dc0:	movw	r0, #46954	; 0xb76a
   11dc4:	movw	r3, #47236	; 0xb884
   11dc8:	cmp	r6, r5
   11dcc:	mov	r2, r6
   11dd0:	movt	r0, #1
   11dd4:	movt	r3, #1
   11dd8:	moveq	r3, r0
   11ddc:	mov	r0, #1
   11de0:	bl	1191c <__printf_chk@plt>
   11de4:	mov	r0, r4
   11de8:	bl	11898 <exit@plt>
   11dec:	movw	r0, #53712	; 0xd1d0
   11df0:	movw	r1, #46012	; 0xb3bc
   11df4:	mov	r2, #5
   11df8:	movt	r0, #2
   11dfc:	movt	r1, #1
   11e00:	ldr	r5, [r0]
   11e04:	mov	r0, #0
   11e08:	bl	11754 <dcgettext@plt>
   11e0c:	mov	r2, r0
   11e10:	movw	r0, #53736	; 0xd1e8
   11e14:	mov	r1, #1
   11e18:	movt	r0, #2
   11e1c:	ldr	r3, [r0]
   11e20:	mov	r0, r5
   11e24:	bl	11934 <__fprintf_chk@plt>
   11e28:	mov	r0, r4
   11e2c:	bl	11898 <exit@plt>
   11e30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e34:	add	fp, sp, #28
   11e38:	sub	sp, sp, #20
   11e3c:	str	r0, [sp, #16]
   11e40:	ldr	r0, [r1]
   11e44:	mov	r4, r1
   11e48:	bl	1791c <lchmod@@Base+0x7ac>
   11e4c:	movw	r1, #47236	; 0xb884
   11e50:	mov	r0, #6
   11e54:	movt	r1, #1
   11e58:	bl	11964 <setlocale@plt>
   11e5c:	movw	r6, #46651	; 0xb63b
   11e60:	movw	r1, #46518	; 0xb5b6
   11e64:	movt	r6, #1
   11e68:	movt	r1, #1
   11e6c:	mov	r0, r6
   11e70:	bl	119e8 <bindtextdomain@plt>
   11e74:	mov	r0, r6
   11e78:	bl	11784 <textdomain@plt>
   11e7c:	movw	r0, #12464	; 0x30b0
   11e80:	movt	r0, #1
   11e84:	bl	1b398 <lchmod@@Base+0x4228>
   11e88:	movw	r5, #46542	; 0xb5ce
   11e8c:	movw	r7, #47256	; 0xb898
   11e90:	movw	sl, #53720	; 0xd1d8
   11e94:	mov	r6, #0
   11e98:	mov	r8, #0
   11e9c:	mov	r9, #0
   11ea0:	mov	r0, #0
   11ea4:	movt	r5, #1
   11ea8:	movt	r7, #1
   11eac:	movt	sl, #2
   11eb0:	str	r0, [sp, #12]
   11eb4:	ldr	r0, [sp, #16]
   11eb8:	mov	r1, r4
   11ebc:	mov	r2, r5
   11ec0:	mov	r3, r7
   11ec4:	str	r6, [sp]
   11ec8:	bl	11874 <getopt_long@plt>
   11ecc:	cmp	r0, #89	; 0x59
   11ed0:	ble	11f90 <__assert_fail@plt+0x4f4>
   11ed4:	cmp	r0, #90	; 0x5a
   11ed8:	bne	11f80 <__assert_fail@plt+0x4e4>
   11edc:	bl	116c4 <is_selinux_enabled@plt>
   11ee0:	ldr	r1, [sl]
   11ee4:	cmp	r0, #1
   11ee8:	bge	11f1c <__assert_fail@plt+0x480>
   11eec:	cmp	r1, #0
   11ef0:	beq	11eb4 <__assert_fail@plt+0x418>
   11ef4:	movw	r1, #46574	; 0xb5ee
   11ef8:	mov	r0, #0
   11efc:	mov	r2, #5
   11f00:	movt	r1, #1
   11f04:	bl	11754 <dcgettext@plt>
   11f08:	mov	r2, r0
   11f0c:	mov	r0, #0
   11f10:	mov	r1, #0
   11f14:	bl	11814 <error@plt>
   11f18:	b	11eb4 <__assert_fail@plt+0x418>
   11f1c:	cmp	r1, #0
   11f20:	bne	11f78 <__assert_fail@plt+0x4dc>
   11f24:	mov	r0, #0
   11f28:	mov	r1, #0
   11f2c:	mov	r2, #0
   11f30:	bl	118c8 <selabel_open@plt>
   11f34:	mov	r9, r0
   11f38:	cmp	r0, #0
   11f3c:	bne	11eb4 <__assert_fail@plt+0x418>
   11f40:	bl	118ec <__errno_location@plt>
   11f44:	ldr	r0, [r0]
   11f48:	movw	r1, #46546	; 0xb5d2
   11f4c:	mov	r2, #5
   11f50:	mov	r9, #0
   11f54:	movt	r1, #1
   11f58:	str	r0, [sp, #8]
   11f5c:	mov	r0, #0
   11f60:	bl	11754 <dcgettext@plt>
   11f64:	ldr	r1, [sp, #8]
   11f68:	mov	r2, r0
   11f6c:	mov	r0, #0
   11f70:	bl	11814 <error@plt>
   11f74:	b	11eb4 <__assert_fail@plt+0x418>
   11f78:	mov	r8, r1
   11f7c:	b	11eb4 <__assert_fail@plt+0x418>
   11f80:	cmp	r0, #109	; 0x6d
   11f84:	bne	12294 <__assert_fail@plt+0x7f8>
   11f88:	ldr	r0, [sl]
   11f8c:	b	11eb0 <__assert_fail@plt+0x414>
   11f90:	cmn	r0, #1
   11f94:	bne	12234 <__assert_fail@plt+0x798>
   11f98:	movw	sl, #53704	; 0xd1c8
   11f9c:	ldr	r6, [sp, #16]
   11fa0:	ldr	r5, [sp, #12]
   11fa4:	movt	sl, #2
   11fa8:	ldr	r0, [sl]
   11fac:	cmp	r0, r6
   11fb0:	beq	1229c <__assert_fail@plt+0x800>
   11fb4:	cmp	r8, #0
   11fb8:	beq	11fcc <__assert_fail@plt+0x530>
   11fbc:	mov	r0, r8
   11fc0:	bl	118e0 <setfscreatecon@plt>
   11fc4:	cmn	r0, #1
   11fc8:	ble	122c8 <__assert_fail@plt+0x82c>
   11fcc:	cmp	r5, #0
   11fd0:	beq	12214 <__assert_fail@plt+0x778>
   11fd4:	mov	r0, r5
   11fd8:	bl	172bc <lchmod@@Base+0x14c>
   11fdc:	cmp	r0, #0
   11fe0:	beq	12304 <__assert_fail@plt+0x868>
   11fe4:	mov	r7, r0
   11fe8:	mov	r0, #0
   11fec:	mov	r8, #0
   11ff0:	bl	11a00 <umask@plt>
   11ff4:	mov	r5, r0
   11ff8:	bl	11a00 <umask@plt>
   11ffc:	movw	r0, #438	; 0x1b6
   12000:	mov	r1, #0
   12004:	mov	r2, r5
   12008:	mov	r3, r7
   1200c:	str	r8, [sp]
   12010:	bl	1777c <lchmod@@Base+0x60c>
   12014:	mov	r5, r0
   12018:	mov	r0, r7
   1201c:	bl	1335c <__assert_fail@plt+0x18c0>
   12020:	cmp	r5, #512	; 0x200
   12024:	bcs	12310 <__assert_fail@plt+0x874>
   12028:	ldr	r0, [sl]
   1202c:	mov	r7, #0
   12030:	cmp	r0, r6
   12034:	bge	12228 <__assert_fail@plt+0x78c>
   12038:	mov	r7, #0
   1203c:	cmp	r9, #0
   12040:	bne	120b0 <__assert_fail@plt+0x614>
   12044:	movw	r8, #46800	; 0xb6d0
   12048:	movt	r8, #1
   1204c:	b	12198 <__assert_fail@plt+0x6fc>
   12050:	bl	118ec <__errno_location@plt>
   12054:	movw	r1, #46800	; 0xb6d0
   12058:	ldr	r7, [r0]
   1205c:	mov	r0, #0
   12060:	mov	r2, #5
   12064:	movt	r1, #1
   12068:	bl	11754 <dcgettext@plt>
   1206c:	mov	r8, r0
   12070:	ldr	r0, [sl]
   12074:	ldr	r1, [r4, r0, lsl #2]
   12078:	mov	r0, #4
   1207c:	bl	193b8 <lchmod@@Base+0x2248>
   12080:	ldr	r6, [sp, #16]
   12084:	mov	r3, r0
   12088:	mov	r0, #0
   1208c:	mov	r1, r7
   12090:	mov	r2, r8
   12094:	bl	11814 <error@plt>
   12098:	mov	r7, #1
   1209c:	ldr	r0, [sl]
   120a0:	add	r0, r0, #1
   120a4:	cmp	r0, r6
   120a8:	str	r0, [sl]
   120ac:	bge	12228 <__assert_fail@plt+0x78c>
   120b0:	ldr	r1, [r4, r0, lsl #2]
   120b4:	mov	r0, r9
   120b8:	mov	r2, #4096	; 0x1000
   120bc:	bl	12334 <__assert_fail@plt+0x898>
   120c0:	ldr	r0, [sl]
   120c4:	mov	r1, r5
   120c8:	ldr	r0, [r4, r0, lsl #2]
   120cc:	bl	11a60 <mkfifo@plt>
   120d0:	cmp	r0, #0
   120d4:	bne	12050 <__assert_fail@plt+0x5b4>
   120d8:	ldr	r0, [sp, #12]
   120dc:	cmp	r0, #0
   120e0:	beq	1209c <__assert_fail@plt+0x600>
   120e4:	ldr	r0, [sl]
   120e8:	mov	r1, r5
   120ec:	ldr	r0, [r4, r0, lsl #2]
   120f0:	bl	17170 <lchmod@@Base>
   120f4:	cmp	r0, #0
   120f8:	beq	1209c <__assert_fail@plt+0x600>
   120fc:	bl	118ec <__errno_location@plt>
   12100:	movw	r1, #46822	; 0xb6e6
   12104:	ldr	r8, [r0]
   12108:	mov	r0, #0
   1210c:	mov	r2, #5
   12110:	movt	r1, #1
   12114:	bl	11754 <dcgettext@plt>
   12118:	mov	r7, r0
   1211c:	ldr	r0, [sl]
   12120:	ldr	r1, [r4, r0, lsl #2]
   12124:	mov	r0, #4
   12128:	bl	193b8 <lchmod@@Base+0x2248>
   1212c:	mov	r3, r0
   12130:	mov	r0, #0
   12134:	mov	r1, r8
   12138:	mov	r2, r7
   1213c:	b	12094 <__assert_fail@plt+0x5f8>
   12140:	bl	118ec <__errno_location@plt>
   12144:	ldr	r7, [r0]
   12148:	mov	r0, #0
   1214c:	mov	r1, r8
   12150:	mov	r2, #5
   12154:	bl	11754 <dcgettext@plt>
   12158:	mov	r9, r0
   1215c:	ldr	r0, [sl]
   12160:	ldr	r1, [r4, r0, lsl #2]
   12164:	mov	r0, #4
   12168:	bl	193b8 <lchmod@@Base+0x2248>
   1216c:	mov	r3, r0
   12170:	mov	r0, #0
   12174:	mov	r1, r7
   12178:	mov	r2, r9
   1217c:	bl	11814 <error@plt>
   12180:	mov	r7, #1
   12184:	ldr	r0, [sl]
   12188:	add	r0, r0, #1
   1218c:	cmp	r0, r6
   12190:	str	r0, [sl]
   12194:	bge	12228 <__assert_fail@plt+0x78c>
   12198:	ldr	r0, [r4, r0, lsl #2]
   1219c:	mov	r1, r5
   121a0:	bl	11a60 <mkfifo@plt>
   121a4:	cmp	r0, #0
   121a8:	bne	12140 <__assert_fail@plt+0x6a4>
   121ac:	ldr	r0, [sp, #12]
   121b0:	cmp	r0, #0
   121b4:	beq	12184 <__assert_fail@plt+0x6e8>
   121b8:	ldr	r0, [sl]
   121bc:	mov	r1, r5
   121c0:	ldr	r0, [r4, r0, lsl #2]
   121c4:	bl	17170 <lchmod@@Base>
   121c8:	cmp	r0, #0
   121cc:	beq	12184 <__assert_fail@plt+0x6e8>
   121d0:	bl	118ec <__errno_location@plt>
   121d4:	movw	r1, #46822	; 0xb6e6
   121d8:	ldr	r9, [r0]
   121dc:	mov	r0, #0
   121e0:	mov	r2, #5
   121e4:	movt	r1, #1
   121e8:	bl	11754 <dcgettext@plt>
   121ec:	mov	r7, r0
   121f0:	ldr	r0, [sl]
   121f4:	ldr	r1, [r4, r0, lsl #2]
   121f8:	mov	r0, #4
   121fc:	bl	193b8 <lchmod@@Base+0x2248>
   12200:	mov	r3, r0
   12204:	mov	r0, #0
   12208:	mov	r1, r9
   1220c:	mov	r2, r7
   12210:	b	1217c <__assert_fail@plt+0x6e0>
   12214:	movw	r5, #438	; 0x1b6
   12218:	ldr	r0, [sl]
   1221c:	mov	r7, #0
   12220:	cmp	r0, r6
   12224:	blt	12038 <__assert_fail@plt+0x59c>
   12228:	mov	r0, r7
   1222c:	sub	sp, fp, #28
   12230:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12234:	cmn	r0, #3
   12238:	bne	12284 <__assert_fail@plt+0x7e8>
   1223c:	movw	r0, #53624	; 0xd178
   12240:	movw	r2, #46661	; 0xb645
   12244:	mov	r1, #0
   12248:	movt	r0, #2
   1224c:	movt	r2, #1
   12250:	str	r1, [sp, #4]
   12254:	movw	r1, #46511	; 0xb5af
   12258:	movt	r1, #1
   1225c:	ldr	r3, [r0]
   12260:	movw	r0, #53716	; 0xd1d4
   12264:	str	r2, [sp]
   12268:	movw	r2, #46647	; 0xb637
   1226c:	movt	r0, #2
   12270:	movt	r2, #1
   12274:	ldr	r0, [r0]
   12278:	bl	1a0bc <lchmod@@Base+0x2f4c>
   1227c:	mov	r0, #0
   12280:	bl	11898 <exit@plt>
   12284:	cmn	r0, #2
   12288:	bne	12294 <__assert_fail@plt+0x7f8>
   1228c:	mov	r0, #0
   12290:	bl	11b98 <__assert_fail@plt+0xfc>
   12294:	mov	r0, #1
   12298:	bl	11b98 <__assert_fail@plt+0xfc>
   1229c:	movw	r1, #46677	; 0xb655
   122a0:	mov	r0, #0
   122a4:	mov	r2, #5
   122a8:	movt	r1, #1
   122ac:	bl	11754 <dcgettext@plt>
   122b0:	mov	r2, r0
   122b4:	mov	r0, #0
   122b8:	mov	r1, #0
   122bc:	bl	11814 <error@plt>
   122c0:	mov	r0, #1
   122c4:	bl	11b98 <__assert_fail@plt+0xfc>
   122c8:	bl	118ec <__errno_location@plt>
   122cc:	movw	r1, #46693	; 0xb665
   122d0:	ldr	r4, [r0]
   122d4:	mov	r0, #0
   122d8:	mov	r2, #5
   122dc:	movt	r1, #1
   122e0:	bl	11754 <dcgettext@plt>
   122e4:	mov	r5, r0
   122e8:	mov	r0, r8
   122ec:	bl	198e0 <lchmod@@Base+0x2770>
   122f0:	mov	r3, r0
   122f4:	mov	r0, #1
   122f8:	mov	r1, r4
   122fc:	mov	r2, r5
   12300:	bl	11814 <error@plt>
   12304:	movw	r1, #46743	; 0xb697
   12308:	movt	r1, #1
   1230c:	b	12318 <__assert_fail@plt+0x87c>
   12310:	movw	r1, #46756	; 0xb6a4
   12314:	movt	r1, #1
   12318:	mov	r0, #0
   1231c:	mov	r2, #5
   12320:	bl	11754 <dcgettext@plt>
   12324:	mov	r2, r0
   12328:	mov	r0, #1
   1232c:	mov	r1, #0
   12330:	bl	11814 <error@plt>
   12334:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12338:	add	fp, sp, #24
   1233c:	sub	sp, sp, #16
   12340:	mov	r4, #0
   12344:	mov	r7, r0
   12348:	mov	r5, r2
   1234c:	mov	r6, r1
   12350:	str	r4, [sp, #4]
   12354:	str	r4, [sp]
   12358:	ldrb	r0, [r1]
   1235c:	cmp	r0, #47	; 0x2f
   12360:	beq	12380 <__assert_fail@plt+0x8e4>
   12364:	mov	r0, r6
   12368:	mov	r1, #2
   1236c:	bl	128c4 <__assert_fail@plt+0xe28>
   12370:	mov	r4, r0
   12374:	cmp	r0, #0
   12378:	mov	r6, r0
   1237c:	beq	124d4 <__assert_fail@plt+0xa38>
   12380:	add	r1, sp, #4
   12384:	mov	r0, r7
   12388:	mov	r2, r6
   1238c:	mov	r3, r5
   12390:	bl	11694 <selabel_lookup@plt>
   12394:	cmn	r0, #1
   12398:	ble	124ac <__assert_fail@plt+0xa10>
   1239c:	mov	r0, #0
   123a0:	str	r0, [sp, #12]
   123a4:	str	r0, [sp, #8]
   123a8:	mov	r0, r6
   123ac:	bl	1319c <__assert_fail@plt+0x1700>
   123b0:	mov	r6, r0
   123b4:	add	r0, sp, #12
   123b8:	bl	117f0 <getcon@plt>
   123bc:	mov	r9, #1
   123c0:	cmp	r0, #0
   123c4:	bmi	12404 <__assert_fail@plt+0x968>
   123c8:	add	r1, sp, #8
   123cc:	mov	r0, r6
   123d0:	bl	19a8c <lchmod@@Base+0x291c>
   123d4:	cmp	r0, #0
   123d8:	bmi	12404 <__assert_fail@plt+0x968>
   123dc:	mov	r0, r5
   123e0:	bl	11a6c <mode_to_security_class@plt>
   123e4:	cmp	r0, #0
   123e8:	beq	12404 <__assert_fail@plt+0x968>
   123ec:	mov	r2, r0
   123f0:	ldr	r1, [sp, #8]
   123f4:	ldr	r0, [sp, #12]
   123f8:	mov	r3, sp
   123fc:	bl	119ac <security_compute_create@plt>
   12400:	lsr	r9, r0, #31
   12404:	bl	118ec <__errno_location@plt>
   12408:	ldr	r7, [r0]
   1240c:	mov	r5, r0
   12410:	mov	r0, r6
   12414:	bl	1335c <__assert_fail@plt+0x18c0>
   12418:	ldr	r0, [sp, #12]
   1241c:	bl	119dc <freecon@plt>
   12420:	ldr	r0, [sp, #8]
   12424:	bl	119dc <freecon@plt>
   12428:	mvn	r8, #0
   1242c:	cmp	r9, #0
   12430:	str	r7, [r5]
   12434:	bne	124a0 <__assert_fail@plt+0xa04>
   12438:	ldr	r0, [sp, #4]
   1243c:	bl	11748 <context_new@plt>
   12440:	cmp	r0, #0
   12444:	beq	124a0 <__assert_fail@plt+0xa04>
   12448:	mov	r6, r0
   1244c:	ldr	r0, [sp]
   12450:	bl	11748 <context_new@plt>
   12454:	cmp	r0, #0
   12458:	beq	124f0 <__assert_fail@plt+0xa54>
   1245c:	mov	r9, r0
   12460:	mov	r0, r6
   12464:	bl	116dc <context_type_get@plt>
   12468:	cmp	r0, #0
   1246c:	beq	124f4 <__assert_fail@plt+0xa58>
   12470:	mov	r1, r0
   12474:	mov	r0, r9
   12478:	bl	11760 <context_type_set@plt>
   1247c:	cmp	r0, #0
   12480:	bne	124f4 <__assert_fail@plt+0xa58>
   12484:	mov	r0, r9
   12488:	bl	11a0c <context_str@plt>
   1248c:	cmp	r0, #0
   12490:	beq	124f4 <__assert_fail@plt+0xa58>
   12494:	bl	118e0 <setfscreatecon@plt>
   12498:	mov	r8, r0
   1249c:	b	124f4 <__assert_fail@plt+0xa58>
   124a0:	mov	r9, #0
   124a4:	mov	r6, #0
   124a8:	b	124f4 <__assert_fail@plt+0xa58>
   124ac:	bl	118ec <__errno_location@plt>
   124b0:	mov	r5, r0
   124b4:	ldr	r0, [r0]
   124b8:	mvn	r8, #0
   124bc:	mov	r9, #0
   124c0:	mov	r6, #0
   124c4:	cmp	r0, #2
   124c8:	moveq	r0, #61	; 0x3d
   124cc:	streq	r0, [r5]
   124d0:	b	124f4 <__assert_fail@plt+0xa58>
   124d4:	mov	r9, #0
   124d8:	mvn	r8, #0
   124dc:	bl	118ec <__errno_location@plt>
   124e0:	mov	r5, r0
   124e4:	mov	r6, #0
   124e8:	mov	r4, #0
   124ec:	b	124f4 <__assert_fail@plt+0xa58>
   124f0:	mov	r9, #0
   124f4:	ldr	r7, [r5]
   124f8:	mov	r0, r6
   124fc:	bl	11868 <context_free@plt>
   12500:	mov	r0, r9
   12504:	bl	11868 <context_free@plt>
   12508:	ldr	r0, [sp, #4]
   1250c:	bl	119dc <freecon@plt>
   12510:	ldr	r0, [sp]
   12514:	bl	119dc <freecon@plt>
   12518:	mov	r0, r4
   1251c:	bl	1335c <__assert_fail@plt+0x18c0>
   12520:	str	r7, [r5]
   12524:	mov	r0, r8
   12528:	sub	sp, fp, #24
   1252c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12530:	push	{r4, r5, r6, r7, fp, lr}
   12534:	add	fp, sp, #16
   12538:	sub	sp, sp, #8
   1253c:	mov	r5, r0
   12540:	ldrb	r0, [r1]
   12544:	mov	r6, r2
   12548:	mov	r4, #0
   1254c:	cmp	r0, #47	; 0x2f
   12550:	beq	12570 <__assert_fail@plt+0xad4>
   12554:	mov	r0, r1
   12558:	mov	r1, #2
   1255c:	bl	128c4 <__assert_fail@plt+0xe28>
   12560:	mov	r4, r0
   12564:	cmp	r0, #0
   12568:	mov	r1, r0
   1256c:	beq	1264c <__assert_fail@plt+0xbb0>
   12570:	cmp	r6, #0
   12574:	beq	125d8 <__assert_fail@plt+0xb3c>
   12578:	mov	r7, #0
   1257c:	stm	sp, {r1, r7}
   12580:	mov	r0, sp
   12584:	mov	r1, #16
   12588:	mov	r2, #0
   1258c:	bl	1a870 <lchmod@@Base+0x3700>
   12590:	mov	r6, r0
   12594:	bl	13ec4 <__assert_fail@plt+0x2428>
   12598:	cmp	r0, #0
   1259c:	beq	12610 <__assert_fail@plt+0xb74>
   125a0:	mov	r7, #0
   125a4:	b	125b8 <__assert_fail@plt+0xb1c>
   125a8:	mov	r0, r6
   125ac:	bl	13ec4 <__assert_fail@plt+0x2428>
   125b0:	cmp	r0, #0
   125b4:	beq	12610 <__assert_fail@plt+0xb74>
   125b8:	ldr	r1, [r6, #24]
   125bc:	mov	r0, r5
   125c0:	bl	12658 <__assert_fail@plt+0xbbc>
   125c4:	cmn	r0, #1
   125c8:	bgt	125a8 <__assert_fail@plt+0xb0c>
   125cc:	bl	118ec <__errno_location@plt>
   125d0:	ldr	r7, [r0]
   125d4:	b	125a8 <__assert_fail@plt+0xb0c>
   125d8:	mov	r0, r5
   125dc:	bl	12658 <__assert_fail@plt+0xbbc>
   125e0:	mov	r5, r0
   125e4:	bl	118ec <__errno_location@plt>
   125e8:	ldr	r7, [r0]
   125ec:	mov	r6, r0
   125f0:	mov	r0, r4
   125f4:	bl	1335c <__assert_fail@plt+0x18c0>
   125f8:	mvn	r0, #0
   125fc:	str	r7, [r6]
   12600:	subs	r0, r5, r0
   12604:	movwne	r0, #1
   12608:	sub	sp, fp, #16
   1260c:	pop	{r4, r5, r6, r7, fp, pc}
   12610:	bl	118ec <__errno_location@plt>
   12614:	mov	r5, r0
   12618:	ldr	r0, [r0]
   1261c:	cmp	r0, #0
   12620:	movne	r7, r0
   12624:	mov	r0, r6
   12628:	bl	13cfc <__assert_fail@plt+0x2260>
   1262c:	cmp	r0, #0
   12630:	mov	r0, r4
   12634:	ldrne	r7, [r5]
   12638:	bl	1335c <__assert_fail@plt+0x18c0>
   1263c:	clz	r0, r7
   12640:	lsr	r0, r0, #5
   12644:	sub	sp, fp, #16
   12648:	pop	{r4, r5, r6, r7, fp, pc}
   1264c:	mov	r0, #0
   12650:	sub	sp, fp, #16
   12654:	pop	{r4, r5, r6, r7, fp, pc}
   12658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1265c:	add	fp, sp, #28
   12660:	sub	sp, sp, #116	; 0x74
   12664:	mov	r6, r0
   12668:	mov	r0, #0
   1266c:	mov	r7, r1
   12670:	cmp	r6, #0
   12674:	str	r0, [sp, #4]
   12678:	str	r0, [sp]
   1267c:	beq	126d0 <__assert_fail@plt+0xc34>
   12680:	mov	r0, r7
   12684:	mov	r1, #32768	; 0x8000
   12688:	bl	11820 <open64@plt>
   1268c:	mov	sl, r0
   12690:	cmn	r0, #1
   12694:	beq	1270c <__assert_fail@plt+0xc70>
   12698:	add	r2, sp, #8
   1269c:	mov	r0, #3
   126a0:	mov	r1, sl
   126a4:	bl	117b4 <__fxstat64@plt>
   126a8:	mov	r5, #1
   126ac:	cmn	r0, #1
   126b0:	bgt	12744 <__assert_fail@plt+0xca8>
   126b4:	bl	118ec <__errno_location@plt>
   126b8:	ldr	r5, [r0]
   126bc:	mov	r4, r0
   126c0:	mov	r8, #0
   126c4:	mvn	r9, #0
   126c8:	mov	r6, #0
   126cc:	b	1286c <__assert_fail@plt+0xdd0>
   126d0:	mov	r0, sp
   126d4:	bl	119f4 <getfscreatecon@plt>
   126d8:	mvn	r9, #0
   126dc:	cmp	r0, #0
   126e0:	bmi	1282c <__assert_fail@plt+0xd90>
   126e4:	ldr	r1, [sp]
   126e8:	cmp	r1, #0
   126ec:	beq	12820 <__assert_fail@plt+0xd84>
   126f0:	mov	r0, r7
   126f4:	bl	116f4 <lsetfilecon@plt>
   126f8:	mov	r9, r0
   126fc:	bl	118ec <__errno_location@plt>
   12700:	ldr	r5, [r0]
   12704:	mov	r4, r0
   12708:	b	1288c <__assert_fail@plt+0xdf0>
   1270c:	bl	118ec <__errno_location@plt>
   12710:	ldr	r5, [r0]
   12714:	mov	r4, r0
   12718:	mov	r8, #0
   1271c:	mvn	r9, #0
   12720:	cmp	r5, #40	; 0x28
   12724:	bne	12818 <__assert_fail@plt+0xd7c>
   12728:	add	r2, sp, #8
   1272c:	mov	r0, #3
   12730:	mov	r1, r7
   12734:	bl	11a54 <__lxstat64@plt>
   12738:	mov	r5, #0
   1273c:	cmn	r0, #1
   12740:	ble	128a4 <__assert_fail@plt+0xe08>
   12744:	ldr	r3, [sp, #24]
   12748:	add	r1, sp, #4
   1274c:	mov	r0, r6
   12750:	mov	r2, r7
   12754:	bl	11694 <selabel_lookup@plt>
   12758:	cmn	r0, #1
   1275c:	ble	127f4 <__assert_fail@plt+0xd58>
   12760:	ldr	r0, [sp, #4]
   12764:	bl	11748 <context_new@plt>
   12768:	mvn	r9, #0
   1276c:	cmp	r0, #0
   12770:	beq	12838 <__assert_fail@plt+0xd9c>
   12774:	mov	r8, r0
   12778:	mov	r1, sp
   1277c:	cmp	r5, #0
   12780:	beq	12844 <__assert_fail@plt+0xda8>
   12784:	mov	r0, sl
   12788:	bl	19b74 <lchmod@@Base+0x2a04>
   1278c:	cmp	r0, #0
   12790:	bmi	12854 <__assert_fail@plt+0xdb8>
   12794:	ldr	r0, [sp]
   12798:	bl	11748 <context_new@plt>
   1279c:	cmp	r0, #0
   127a0:	beq	12854 <__assert_fail@plt+0xdb8>
   127a4:	mov	r6, r0
   127a8:	mov	r0, r8
   127ac:	bl	116dc <context_type_get@plt>
   127b0:	cmp	r0, #0
   127b4:	beq	12858 <__assert_fail@plt+0xdbc>
   127b8:	mov	r1, r0
   127bc:	mov	r0, r6
   127c0:	bl	11760 <context_type_set@plt>
   127c4:	cmp	r0, #0
   127c8:	bne	12858 <__assert_fail@plt+0xdbc>
   127cc:	mov	r0, r6
   127d0:	bl	11a0c <context_str@plt>
   127d4:	cmp	r0, #0
   127d8:	beq	12858 <__assert_fail@plt+0xdbc>
   127dc:	mov	r1, r0
   127e0:	cmp	r5, #0
   127e4:	beq	128b4 <__assert_fail@plt+0xe18>
   127e8:	mov	r0, sl
   127ec:	bl	11970 <fsetfilecon@plt>
   127f0:	b	128bc <__assert_fail@plt+0xe20>
   127f4:	bl	118ec <__errno_location@plt>
   127f8:	ldr	r1, [r0]
   127fc:	mvn	r9, #0
   12800:	mov	r6, #0
   12804:	mov	r8, #0
   12808:	cmp	r1, #2
   1280c:	moveq	r1, #61	; 0x3d
   12810:	streq	r1, [r0]
   12814:	b	12858 <__assert_fail@plt+0xdbc>
   12818:	mov	r6, #0
   1281c:	b	12874 <__assert_fail@plt+0xdd8>
   12820:	bl	118ec <__errno_location@plt>
   12824:	mov	r1, #61	; 0x3d
   12828:	str	r1, [r0]
   1282c:	mov	r0, r9
   12830:	sub	sp, fp, #28
   12834:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12838:	mov	r6, #0
   1283c:	mov	r8, #0
   12840:	b	12858 <__assert_fail@plt+0xdbc>
   12844:	mov	r0, r7
   12848:	bl	19b00 <lchmod@@Base+0x2990>
   1284c:	cmp	r0, #0
   12850:	bpl	12794 <__assert_fail@plt+0xcf8>
   12854:	mov	r6, #0
   12858:	bl	118ec <__errno_location@plt>
   1285c:	ldr	r5, [r0]
   12860:	mov	r4, r0
   12864:	cmn	sl, #1
   12868:	beq	12874 <__assert_fail@plt+0xdd8>
   1286c:	mov	r0, sl
   12870:	bl	11a48 <close@plt>
   12874:	mov	r0, r8
   12878:	bl	11868 <context_free@plt>
   1287c:	mov	r0, r6
   12880:	bl	11868 <context_free@plt>
   12884:	ldr	r0, [sp, #4]
   12888:	bl	119dc <freecon@plt>
   1288c:	ldr	r0, [sp]
   12890:	bl	119dc <freecon@plt>
   12894:	str	r5, [r4]
   12898:	mov	r0, r9
   1289c:	sub	sp, fp, #28
   128a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128a4:	ldr	r5, [r4]
   128a8:	mov	r8, #0
   128ac:	mov	r6, #0
   128b0:	b	12874 <__assert_fail@plt+0xdd8>
   128b4:	mov	r0, r7
   128b8:	bl	116f4 <lsetfilecon@plt>
   128bc:	mov	r9, r0
   128c0:	b	12858 <__assert_fail@plt+0xdbc>
   128c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128c8:	add	fp, sp, #28
   128cc:	sub	sp, sp, #180	; 0xb4
   128d0:	sub	sp, sp, #3072	; 0xc00
   128d4:	and	r7, r1, #3
   128d8:	mov	r8, r0
   128dc:	sub	r0, r7, #1
   128e0:	tst	r7, r0
   128e4:	bne	129b0 <__assert_fail@plt+0xf14>
   128e8:	cmp	r8, #0
   128ec:	beq	129b0 <__assert_fail@plt+0xf14>
   128f0:	ldrb	r0, [r8]
   128f4:	cmp	r0, #0
   128f8:	beq	12f2c <__assert_fail@plt+0x1490>
   128fc:	mov	r4, r1
   12900:	mov	r1, #1024	; 0x400
   12904:	sub	lr, fp, #1024	; 0x400
   12908:	cmp	r0, #47	; 0x2f
   1290c:	str	r1, [fp, #-1060]	; 0xfffffbdc
   12910:	str	r1, [sp, #52]	; 0x34
   12914:	str	r1, [sp, #1188]	; 0x4a4
   12918:	add	r1, sp, #1184	; 0x4a0
   1291c:	sub	r2, lr, #40	; 0x28
   12920:	add	r1, r1, #8
   12924:	add	r2, r2, #8
   12928:	str	r1, [sp, #16]
   1292c:	str	r1, [sp, #1184]	; 0x4a0
   12930:	add	r1, sp, #48	; 0x30
   12934:	str	r2, [sp, #12]
   12938:	str	r2, [fp, #-1064]	; 0xfffffbd8
   1293c:	add	r5, r1, #8
   12940:	mov	r0, r5
   12944:	str	r5, [sp, #48]	; 0x30
   12948:	str	r5, [sp, #8]
   1294c:	bne	12f38 <__assert_fail@plt+0x149c>
   12950:	mov	r1, r8
   12954:	mov	r2, #0
   12958:	mov	r3, #1024	; 0x400
   1295c:	bl	11a90 <__mempcpy_chk@plt>
   12960:	mov	r6, r0
   12964:	mov	r0, #47	; 0x2f
   12968:	strb	r0, [r6], #1
   1296c:	ldrb	r0, [r8]
   12970:	cmp	r0, #0
   12974:	beq	12f64 <__assert_fail@plt+0x14c8>
   12978:	and	r1, r4, #4
   1297c:	add	r9, sp, #48	; 0x30
   12980:	str	r7, [sp, #32]
   12984:	str	r1, [sp, #40]	; 0x28
   12988:	mov	r1, #0
   1298c:	str	r1, [sp, #24]
   12990:	mov	r1, #0
   12994:	str	r1, [sp, #36]	; 0x24
   12998:	mov	r1, #0
   1299c:	str	r1, [sp, #20]
   129a0:	uxtb	r1, r0
   129a4:	cmp	r1, #47	; 0x2f
   129a8:	beq	129e8 <__assert_fail@plt+0xf4c>
   129ac:	b	129f4 <__assert_fail@plt+0xf58>
   129b0:	bl	118ec <__errno_location@plt>
   129b4:	mov	r1, #22
   129b8:	mov	r4, #0
   129bc:	str	r1, [r0]
   129c0:	mov	r0, r4
   129c4:	sub	sp, fp, #28
   129c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129cc:	mov	r8, sl
   129d0:	ldrb	r0, [r8]
   129d4:	cmp	r0, #0
   129d8:	beq	12f6c <__assert_fail@plt+0x14d0>
   129dc:	uxtb	r1, r0
   129e0:	cmp	r1, #47	; 0x2f
   129e4:	bne	129f4 <__assert_fail@plt+0xf58>
   129e8:	ldrb	r0, [r8, #1]!
   129ec:	cmp	r0, #47	; 0x2f
   129f0:	beq	129e8 <__assert_fail@plt+0xf4c>
   129f4:	mov	r1, r0
   129f8:	mov	sl, r8
   129fc:	b	12a04 <__assert_fail@plt+0xf68>
   12a00:	ldrb	r1, [sl, #1]!
   12a04:	uxtb	r1, r1
   12a08:	cmp	r1, #0
   12a0c:	cmpne	r1, #47	; 0x2f
   12a10:	bne	12a00 <__assert_fail@plt+0xf64>
   12a14:	sub	r2, sl, r8
   12a18:	cmp	r2, #1
   12a1c:	beq	12a34 <__assert_fail@plt+0xf98>
   12a20:	cmp	r2, #2
   12a24:	beq	12a54 <__assert_fail@plt+0xfb8>
   12a28:	cmp	r2, #0
   12a2c:	bne	12aac <__assert_fail@plt+0x1010>
   12a30:	b	12f6c <__assert_fail@plt+0x14d0>
   12a34:	uxtb	r0, r0
   12a38:	cmp	r0, #46	; 0x2e
   12a3c:	bne	12aac <__assert_fail@plt+0x1010>
   12a40:	mov	r8, sl
   12a44:	ldrb	r0, [r8]
   12a48:	cmp	r0, #0
   12a4c:	bne	129dc <__assert_fail@plt+0xf40>
   12a50:	b	12f6c <__assert_fail@plt+0x14d0>
   12a54:	uxtb	r0, r0
   12a58:	cmp	r0, #46	; 0x2e
   12a5c:	bne	12aac <__assert_fail@plt+0x1010>
   12a60:	ldrb	r0, [r8, #1]
   12a64:	cmp	r0, #46	; 0x2e
   12a68:	bne	12aac <__assert_fail@plt+0x1010>
   12a6c:	add	r0, r5, #1
   12a70:	cmp	r6, r0
   12a74:	bls	12d5c <__assert_fail@plt+0x12c0>
   12a78:	sub	r0, r6, #1
   12a7c:	mov	r6, r0
   12a80:	cmp	r0, r5
   12a84:	bls	12f04 <__assert_fail@plt+0x1468>
   12a88:	mov	r0, r6
   12a8c:	ldrb	r1, [r0, #-1]!
   12a90:	cmp	r1, #47	; 0x2f
   12a94:	bne	12a7c <__assert_fail@plt+0xfe0>
   12a98:	mov	r8, sl
   12a9c:	ldrb	r0, [r8]
   12aa0:	cmp	r0, #0
   12aa4:	bne	129dc <__assert_fail@plt+0xf40>
   12aa8:	b	12f6c <__assert_fail@plt+0x14d0>
   12aac:	ldrb	r0, [r6, #-1]
   12ab0:	add	r4, r2, #2
   12ab4:	str	r2, [sp, #44]	; 0x2c
   12ab8:	cmp	r0, #47	; 0x2f
   12abc:	movne	r0, #47	; 0x2f
   12ac0:	strbne	r0, [r6], #1
   12ac4:	ldr	r0, [sp, #52]	; 0x34
   12ac8:	add	r0, r5, r0
   12acc:	sub	r0, r0, r6
   12ad0:	cmp	r0, r4
   12ad4:	bcs	12b0c <__assert_fail@plt+0x1070>
   12ad8:	mov	r0, r9
   12adc:	bl	199d4 <lchmod@@Base+0x2864>
   12ae0:	cmp	r0, #0
   12ae4:	beq	1306c <__assert_fail@plt+0x15d0>
   12ae8:	sub	r0, r6, r5
   12aec:	ldr	r5, [sp, #48]	; 0x30
   12af0:	ldr	r1, [sp, #52]	; 0x34
   12af4:	add	r6, r5, r0
   12af8:	add	r0, r5, r1
   12afc:	sub	r0, r0, r6
   12b00:	cmp	r0, r4
   12b04:	bcc	12ad8 <__assert_fail@plt+0x103c>
   12b08:	ldr	r2, [sp, #44]	; 0x2c
   12b0c:	mov	r0, r6
   12b10:	mov	r1, r8
   12b14:	mvn	r3, #0
   12b18:	bl	11a90 <__mempcpy_chk@plt>
   12b1c:	mov	r6, r0
   12b20:	mov	r0, #0
   12b24:	strb	r0, [r6]
   12b28:	ldr	r0, [sp, #40]	; 0x28
   12b2c:	cmp	r0, #0
   12b30:	bne	12b94 <__assert_fail@plt+0x10f8>
   12b34:	ldr	r0, [sp, #1188]	; 0x4a4
   12b38:	ldr	r7, [sp, #1184]	; 0x4a0
   12b3c:	sub	r9, r0, #1
   12b40:	mov	r0, r5
   12b44:	mov	r1, r7
   12b48:	mov	r2, r9
   12b4c:	bl	117c0 <readlink@plt>
   12b50:	cmp	r0, r9
   12b54:	blt	12b6c <__assert_fail@plt+0x10d0>
   12b58:	add	r0, sp, #1184	; 0x4a0
   12b5c:	bl	19964 <lchmod@@Base+0x27f4>
   12b60:	cmp	r0, #0
   12b64:	bne	12b34 <__assert_fail@plt+0x1098>
   12b68:	b	1306c <__assert_fail@plt+0x15d0>
   12b6c:	mov	r4, r0
   12b70:	cmp	r0, #0
   12b74:	add	r9, sp, #48	; 0x30
   12b78:	bmi	12b94 <__assert_fail@plt+0x10f8>
   12b7c:	ldr	r0, [sp, #24]
   12b80:	cmp	r0, #19
   12b84:	bgt	12c30 <__assert_fail@plt+0x1194>
   12b88:	add	r0, r0, #1
   12b8c:	str	r0, [sp, #24]
   12b90:	b	12de0 <__assert_fail@plt+0x1344>
   12b94:	ldr	r7, [sp, #32]
   12b98:	cmp	r7, #2
   12b9c:	beq	129cc <__assert_fail@plt+0xf30>
   12ba0:	ldrb	r0, [sl]
   12ba4:	cmp	r0, #47	; 0x2f
   12ba8:	bne	12d10 <__assert_fail@plt+0x1274>
   12bac:	mov	r2, sl
   12bb0:	mov	r1, r2
   12bb4:	ldrb	r3, [r2, #1]!
   12bb8:	cmp	r3, #47	; 0x2f
   12bbc:	beq	12bb0 <__assert_fail@plt+0x1114>
   12bc0:	cmp	r3, #46	; 0x2e
   12bc4:	bne	12d08 <__assert_fail@plt+0x126c>
   12bc8:	add	r2, r1, #2
   12bcc:	ldrb	r3, [r2]
   12bd0:	cmp	r3, #47	; 0x2f
   12bd4:	beq	12bb0 <__assert_fail@plt+0x1114>
   12bd8:	cmp	r3, #0
   12bdc:	beq	12bf8 <__assert_fail@plt+0x115c>
   12be0:	cmp	r3, #46	; 0x2e
   12be4:	bne	12d10 <__assert_fail@plt+0x1274>
   12be8:	ldrb	r1, [r1, #3]
   12bec:	cmp	r1, #47	; 0x2f
   12bf0:	cmpne	r1, #0
   12bf4:	bne	12d10 <__assert_fail@plt+0x1274>
   12bf8:	mov	r0, #47	; 0x2f
   12bfc:	mov	r1, r5
   12c00:	mov	r2, #0
   12c04:	mov	r3, #512	; 0x200
   12c08:	strh	r0, [r6]
   12c0c:	mvn	r0, #99	; 0x63
   12c10:	bl	11718 <faccessat@plt>
   12c14:	cmp	r0, #0
   12c18:	bne	12d8c <__assert_fail@plt+0x12f0>
   12c1c:	mov	r8, sl
   12c20:	ldrb	r0, [r8]
   12c24:	cmp	r0, #0
   12c28:	bne	129dc <__assert_fail@plt+0xf40>
   12c2c:	b	12f6c <__assert_fail@plt+0x14d0>
   12c30:	ldrb	r0, [r8]
   12c34:	add	lr, sp, #1024	; 0x400
   12c38:	add	r2, lr, #56	; 0x38
   12c3c:	cmp	r0, #0
   12c40:	beq	12de0 <__assert_fail@plt+0x1344>
   12c44:	ldr	r9, [sp, #44]	; 0x2c
   12c48:	mov	r0, #0
   12c4c:	mov	r1, r5
   12c50:	strb	r0, [r6, -r9]
   12c54:	ldrb	r0, [r5]
   12c58:	cmp	r0, #0
   12c5c:	movw	r0, #47427	; 0xb943
   12c60:	movt	r0, #1
   12c64:	moveq	r1, r0
   12c68:	mov	r0, #3
   12c6c:	bl	11a24 <__xstat64@plt>
   12c70:	cmp	r0, #0
   12c74:	bne	1307c <__assert_fail@plt+0x15e0>
   12c78:	rsb	r0, r9, #0
   12c7c:	ldr	r9, [sp, #20]
   12c80:	ldrb	r1, [r8]
   12c84:	cmp	r9, #0
   12c88:	strb	r1, [r6, r0]
   12c8c:	bne	12cc4 <__assert_fail@plt+0x1228>
   12c90:	movw	r0, #28808	; 0x7088
   12c94:	movw	r2, #28648	; 0x6fe8
   12c98:	movw	r3, #28704	; 0x7020
   12c9c:	mov	r1, #0
   12ca0:	movt	r0, #1
   12ca4:	movt	r2, #1
   12ca8:	movt	r3, #1
   12cac:	str	r0, [sp]
   12cb0:	mov	r0, #7
   12cb4:	bl	1608c <__assert_fail@plt+0x45f0>
   12cb8:	mov	r9, r0
   12cbc:	cmp	r0, #0
   12cc0:	beq	1306c <__assert_fail@plt+0x15d0>
   12cc4:	add	lr, sp, #1024	; 0x400
   12cc8:	mov	r0, r9
   12ccc:	mov	r1, r8
   12cd0:	add	r2, lr, #56	; 0x38
   12cd4:	bl	1330c <__assert_fail@plt+0x1870>
   12cd8:	cmp	r0, #0
   12cdc:	str	r9, [sp, #20]
   12ce0:	beq	12dcc <__assert_fail@plt+0x1330>
   12ce4:	ldr	r7, [sp, #32]
   12ce8:	cmp	r7, #2
   12cec:	bne	13070 <__assert_fail@plt+0x15d4>
   12cf0:	mov	r8, sl
   12cf4:	add	r9, sp, #48	; 0x30
   12cf8:	ldrb	r0, [r8]
   12cfc:	cmp	r0, #0
   12d00:	bne	129dc <__assert_fail@plt+0xf40>
   12d04:	b	12f6c <__assert_fail@plt+0x14d0>
   12d08:	cmp	r3, #0
   12d0c:	beq	12bf8 <__assert_fail@plt+0x115c>
   12d10:	ldr	r1, [sp, #40]	; 0x28
   12d14:	cmp	r1, #0
   12d18:	beq	12d38 <__assert_fail@plt+0x129c>
   12d1c:	cmp	r0, #0
   12d20:	beq	12d70 <__assert_fail@plt+0x12d4>
   12d24:	mov	r8, sl
   12d28:	ldrb	r0, [r8]
   12d2c:	cmp	r0, #0
   12d30:	bne	129dc <__assert_fail@plt+0xf40>
   12d34:	b	12f6c <__assert_fail@plt+0x14d0>
   12d38:	bl	118ec <__errno_location@plt>
   12d3c:	ldr	r0, [r0]
   12d40:	cmp	r0, #22
   12d44:	bne	12d8c <__assert_fail@plt+0x12f0>
   12d48:	mov	r8, sl
   12d4c:	ldrb	r0, [r8]
   12d50:	cmp	r0, #0
   12d54:	bne	129dc <__assert_fail@plt+0xf40>
   12d58:	b	12f6c <__assert_fail@plt+0x14d0>
   12d5c:	mov	r8, sl
   12d60:	ldrb	r0, [r8]
   12d64:	cmp	r0, #0
   12d68:	bne	129dc <__assert_fail@plt+0xf40>
   12d6c:	b	12f6c <__assert_fail@plt+0x14d0>
   12d70:	mvn	r0, #99	; 0x63
   12d74:	mov	r1, r5
   12d78:	mov	r2, #0
   12d7c:	mov	r3, #512	; 0x200
   12d80:	bl	11718 <faccessat@plt>
   12d84:	cmp	r0, #0
   12d88:	beq	12f18 <__assert_fail@plt+0x147c>
   12d8c:	mov	r4, #1
   12d90:	cmp	r7, #1
   12d94:	bne	12f8c <__assert_fail@plt+0x14f0>
   12d98:	bl	118ec <__errno_location@plt>
   12d9c:	ldr	r0, [r0]
   12da0:	cmp	r0, #2
   12da4:	bne	12f8c <__assert_fail@plt+0x14f0>
   12da8:	movw	r1, #48625	; 0xbdf1
   12dac:	mov	r0, sl
   12db0:	movt	r1, #1
   12db4:	bl	11a84 <strspn@plt>
   12db8:	ldrb	r0, [sl, r0]
   12dbc:	mov	r8, sl
   12dc0:	cmp	r0, #0
   12dc4:	beq	129d0 <__assert_fail@plt+0xf34>
   12dc8:	b	12f8c <__assert_fail@plt+0x14f0>
   12dcc:	add	lr, sp, #1024	; 0x400
   12dd0:	mov	r0, r9
   12dd4:	mov	r1, r8
   12dd8:	add	r2, lr, #56	; 0x38
   12ddc:	bl	13290 <__assert_fail@plt+0x17f4>
   12de0:	mov	r0, #0
   12de4:	strb	r0, [r7, r4]
   12de8:	ldr	r0, [sp, #36]	; 0x24
   12dec:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   12df0:	tst	r0, #1
   12df4:	ldr	r0, [sp, #28]
   12df8:	subne	r0, sl, r8
   12dfc:	str	r0, [sp, #28]
   12e00:	mov	r0, sl
   12e04:	bl	118bc <strlen@plt>
   12e08:	mvn	r1, r4
   12e0c:	cmp	r0, r1
   12e10:	bhi	1306c <__assert_fail@plt+0x15d0>
   12e14:	str	r0, [sp, #44]	; 0x2c
   12e18:	add	r9, r0, r4
   12e1c:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   12e20:	cmp	r0, r9
   12e24:	bhi	12e4c <__assert_fail@plt+0x13b0>
   12e28:	sub	lr, fp, #1024	; 0x400
   12e2c:	sub	r0, lr, #40	; 0x28
   12e30:	bl	199d4 <lchmod@@Base+0x2864>
   12e34:	cmp	r0, #0
   12e38:	beq	1306c <__assert_fail@plt+0x15d0>
   12e3c:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   12e40:	cmp	r0, r9
   12e44:	bls	12e28 <__assert_fail@plt+0x138c>
   12e48:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   12e4c:	ldr	r0, [sp, #36]	; 0x24
   12e50:	ldr	r1, [sp, #44]	; 0x2c
   12e54:	tst	r0, #1
   12e58:	ldr	r0, [sp, #28]
   12e5c:	add	r2, r1, #1
   12e60:	addne	sl, r8, r0
   12e64:	add	r0, r8, r4
   12e68:	mov	r1, sl
   12e6c:	bl	11700 <memmove@plt>
   12e70:	mov	r0, r8
   12e74:	mov	r1, r7
   12e78:	mov	r2, r4
   12e7c:	bl	11730 <memcpy@plt>
   12e80:	ldrb	r0, [r7]
   12e84:	cmp	r0, #47	; 0x2f
   12e88:	bne	12ec8 <__assert_fail@plt+0x142c>
   12e8c:	mov	r0, r5
   12e90:	mov	r1, r7
   12e94:	mov	r2, #0
   12e98:	mvn	r3, #0
   12e9c:	bl	11a90 <__mempcpy_chk@plt>
   12ea0:	mov	r6, r0
   12ea4:	mov	r0, #47	; 0x2f
   12ea8:	strb	r0, [r6], #1
   12eac:	mov	r0, #1
   12eb0:	str	r0, [sp, #36]	; 0x24
   12eb4:	add	r9, sp, #48	; 0x30
   12eb8:	ldrb	r0, [r8]
   12ebc:	cmp	r0, #0
   12ec0:	bne	129dc <__assert_fail@plt+0xf40>
   12ec4:	b	12f6c <__assert_fail@plt+0x14d0>
   12ec8:	add	r0, r5, #1
   12ecc:	mov	r1, #1
   12ed0:	add	r9, sp, #48	; 0x30
   12ed4:	cmp	r6, r0
   12ed8:	str	r1, [sp, #36]	; 0x24
   12edc:	bls	129d0 <__assert_fail@plt+0xf34>
   12ee0:	sub	r0, r6, #1
   12ee4:	mov	r6, r0
   12ee8:	cmp	r0, r5
   12eec:	bls	129d0 <__assert_fail@plt+0xf34>
   12ef0:	mov	r0, r6
   12ef4:	ldrb	r1, [r0, #-1]!
   12ef8:	cmp	r1, #47	; 0x2f
   12efc:	bne	12ee4 <__assert_fail@plt+0x1448>
   12f00:	b	129d0 <__assert_fail@plt+0xf34>
   12f04:	mov	r8, sl
   12f08:	ldrb	r0, [r8]
   12f0c:	cmp	r0, #0
   12f10:	bne	129dc <__assert_fail@plt+0xf40>
   12f14:	b	12f6c <__assert_fail@plt+0x14d0>
   12f18:	mov	r8, sl
   12f1c:	ldrb	r0, [r8]
   12f20:	cmp	r0, #0
   12f24:	bne	129dc <__assert_fail@plt+0xf40>
   12f28:	b	12f6c <__assert_fail@plt+0x14d0>
   12f2c:	bl	118ec <__errno_location@plt>
   12f30:	mov	r1, #2
   12f34:	b	129b8 <__assert_fail@plt+0xf1c>
   12f38:	mov	r1, #1024	; 0x400
   12f3c:	bl	1188c <getcwd@plt>
   12f40:	cmp	r0, #0
   12f44:	beq	12fa0 <__assert_fail@plt+0x1504>
   12f48:	mov	r0, r5
   12f4c:	mov	r1, #0
   12f50:	bl	11790 <rawmemchr@plt>
   12f54:	mov	r6, r0
   12f58:	ldrb	r0, [r8]
   12f5c:	cmp	r0, #0
   12f60:	bne	12978 <__assert_fail@plt+0xedc>
   12f64:	mov	r0, #0
   12f68:	str	r0, [sp, #20]
   12f6c:	add	r0, r5, #1
   12f70:	cmp	r6, r0
   12f74:	bls	12f88 <__assert_fail@plt+0x14ec>
   12f78:	mov	r0, r6
   12f7c:	ldrb	r1, [r0, #-1]!
   12f80:	cmp	r1, #47	; 0x2f
   12f84:	moveq	r6, r0
   12f88:	mov	r4, #0
   12f8c:	ldr	r0, [sp, #20]
   12f90:	cmp	r0, #0
   12f94:	beq	12ff8 <__assert_fail@plt+0x155c>
   12f98:	bl	163a8 <__assert_fail@plt+0x490c>
   12f9c:	b	12ff8 <__assert_fail@plt+0x155c>
   12fa0:	bl	118ec <__errno_location@plt>
   12fa4:	ldr	r5, [sp, #8]
   12fa8:	mov	r6, r0
   12fac:	add	r9, sp, #48	; 0x30
   12fb0:	ldr	r0, [r6]
   12fb4:	cmp	r0, #34	; 0x22
   12fb8:	bne	12fe8 <__assert_fail@plt+0x154c>
   12fbc:	mov	r0, r9
   12fc0:	bl	19964 <lchmod@@Base+0x27f4>
   12fc4:	cmp	r0, #0
   12fc8:	beq	1306c <__assert_fail@plt+0x15d0>
   12fcc:	ldr	r5, [sp, #48]	; 0x30
   12fd0:	ldr	r1, [sp, #52]	; 0x34
   12fd4:	mov	r0, r5
   12fd8:	bl	1188c <getcwd@plt>
   12fdc:	cmp	r0, #0
   12fe0:	beq	12fb0 <__assert_fail@plt+0x1514>
   12fe4:	b	12f48 <__assert_fail@plt+0x14ac>
   12fe8:	cmp	r0, #12
   12fec:	beq	1306c <__assert_fail@plt+0x15d0>
   12ff0:	mov	r4, #1
   12ff4:	mov	r6, r5
   12ff8:	ldr	r1, [sp, #12]
   12ffc:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   13000:	ldr	r7, [sp, #16]
   13004:	cmp	r0, r1
   13008:	beq	13010 <__assert_fail@plt+0x1574>
   1300c:	bl	1335c <__assert_fail@plt+0x18c0>
   13010:	ldr	r0, [sp, #1184]	; 0x4a0
   13014:	cmp	r0, r7
   13018:	beq	13020 <__assert_fail@plt+0x1584>
   1301c:	bl	1335c <__assert_fail@plt+0x18c0>
   13020:	cmp	r4, #0
   13024:	beq	1304c <__assert_fail@plt+0x15b0>
   13028:	ldr	r0, [sp, #48]	; 0x30
   1302c:	ldr	r1, [sp, #8]
   13030:	mov	r4, #0
   13034:	cmp	r0, r1
   13038:	beq	129c0 <__assert_fail@plt+0xf24>
   1303c:	bl	1335c <__assert_fail@plt+0x18c0>
   13040:	mov	r0, r4
   13044:	sub	sp, fp, #28
   13048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1304c:	mov	r0, #0
   13050:	strb	r0, [r6], -r5
   13054:	add	r0, sp, #48	; 0x30
   13058:	add	r1, r6, #1
   1305c:	bl	198f8 <lchmod@@Base+0x2788>
   13060:	mov	r4, r0
   13064:	cmp	r0, #0
   13068:	bne	129c0 <__assert_fail@plt+0xf24>
   1306c:	bl	1a82c <lchmod@@Base+0x36bc>
   13070:	bl	118ec <__errno_location@plt>
   13074:	mov	r1, #40	; 0x28
   13078:	str	r1, [r0]
   1307c:	mov	r4, #1
   13080:	ldr	r0, [sp, #20]
   13084:	cmp	r0, #0
   13088:	bne	12f98 <__assert_fail@plt+0x14fc>
   1308c:	b	12ff8 <__assert_fail@plt+0x155c>
   13090:	movw	r1, #53728	; 0xd1e0
   13094:	movt	r1, #2
   13098:	str	r0, [r1, #4]
   1309c:	bx	lr
   130a0:	movw	r1, #53728	; 0xd1e0
   130a4:	movt	r1, #2
   130a8:	strb	r0, [r1]
   130ac:	bx	lr
   130b0:	push	{r4, r5, r6, sl, fp, lr}
   130b4:	add	fp, sp, #16
   130b8:	sub	sp, sp, #8
   130bc:	movw	r0, #53716	; 0xd1d4
   130c0:	movt	r0, #2
   130c4:	ldr	r0, [r0]
   130c8:	bl	1aa5c <lchmod@@Base+0x38ec>
   130cc:	cmp	r0, #0
   130d0:	beq	130f8 <__assert_fail@plt+0x165c>
   130d4:	movw	r5, #53728	; 0xd1e0
   130d8:	movt	r5, #2
   130dc:	ldrb	r0, [r5]
   130e0:	cmp	r0, #0
   130e4:	beq	13124 <__assert_fail@plt+0x1688>
   130e8:	bl	118ec <__errno_location@plt>
   130ec:	ldr	r0, [r0]
   130f0:	cmp	r0, #32
   130f4:	bne	13124 <__assert_fail@plt+0x1688>
   130f8:	movw	r0, #53712	; 0xd1d0
   130fc:	movt	r0, #2
   13100:	ldr	r0, [r0]
   13104:	bl	1aa5c <lchmod@@Base+0x38ec>
   13108:	cmp	r0, #0
   1310c:	subeq	sp, fp, #16
   13110:	popeq	{r4, r5, r6, sl, fp, pc}
   13114:	movw	r0, #53628	; 0xd17c
   13118:	movt	r0, #2
   1311c:	ldr	r0, [r0]
   13120:	bl	11724 <_exit@plt>
   13124:	movw	r1, #47407	; 0xb92f
   13128:	mov	r0, #0
   1312c:	mov	r2, #5
   13130:	movt	r1, #1
   13134:	bl	11754 <dcgettext@plt>
   13138:	ldr	r6, [r5, #4]
   1313c:	mov	r4, r0
   13140:	bl	118ec <__errno_location@plt>
   13144:	ldr	r5, [r0]
   13148:	cmp	r6, #0
   1314c:	bne	13168 <__assert_fail@plt+0x16cc>
   13150:	movw	r2, #47423	; 0xb93f
   13154:	mov	r0, #0
   13158:	mov	r1, r5
   1315c:	mov	r3, r4
   13160:	movt	r2, #1
   13164:	b	13188 <__assert_fail@plt+0x16ec>
   13168:	mov	r0, r6
   1316c:	bl	19558 <lchmod@@Base+0x23e8>
   13170:	movw	r2, #47419	; 0xb93b
   13174:	mov	r3, r0
   13178:	str	r4, [sp]
   1317c:	mov	r0, #0
   13180:	mov	r1, r5
   13184:	movt	r2, #1
   13188:	bl	11814 <error@plt>
   1318c:	movw	r0, #53628	; 0xd17c
   13190:	movt	r0, #2
   13194:	ldr	r0, [r0]
   13198:	bl	11724 <_exit@plt>
   1319c:	push	{fp, lr}
   131a0:	mov	fp, sp
   131a4:	bl	131fc <__assert_fail@plt+0x1760>
   131a8:	cmp	r0, #0
   131ac:	popne	{fp, pc}
   131b0:	bl	1a82c <lchmod@@Base+0x36bc>
   131b4:	push	{r4, r5, r6, sl, fp, lr}
   131b8:	add	fp, sp, #16
   131bc:	mov	r5, r0
   131c0:	mov	r4, r0
   131c4:	ldrb	r6, [r5], #-1
   131c8:	bl	1a9c4 <lchmod@@Base+0x3854>
   131cc:	sub	r2, r0, r4
   131d0:	sub	r0, r6, #47	; 0x2f
   131d4:	clz	r0, r0
   131d8:	lsr	r1, r0, #5
   131dc:	mov	r0, r2
   131e0:	cmp	r2, r1
   131e4:	bls	131f8 <__assert_fail@plt+0x175c>
   131e8:	ldrb	r3, [r5, r0]
   131ec:	sub	r2, r0, #1
   131f0:	cmp	r3, #47	; 0x2f
   131f4:	beq	131dc <__assert_fail@plt+0x1740>
   131f8:	pop	{r4, r5, r6, sl, fp, pc}
   131fc:	push	{r4, r5, r6, sl, fp, lr}
   13200:	add	fp, sp, #16
   13204:	mov	r6, r0
   13208:	mov	r4, r0
   1320c:	ldrb	r5, [r6], #-1
   13210:	bl	1a9c4 <lchmod@@Base+0x3854>
   13214:	sub	r1, r0, r4
   13218:	sub	r0, r5, #47	; 0x2f
   1321c:	clz	r0, r0
   13220:	lsr	r0, r0, #5
   13224:	mov	r5, r1
   13228:	cmp	r1, r0
   1322c:	bls	13240 <__assert_fail@plt+0x17a4>
   13230:	ldrb	r2, [r6, r5]
   13234:	sub	r1, r5, #1
   13238:	cmp	r2, #47	; 0x2f
   1323c:	beq	13224 <__assert_fail@plt+0x1788>
   13240:	cmp	r5, #0
   13244:	mov	r0, r5
   13248:	addeq	r0, r0, #1
   1324c:	add	r0, r0, #1
   13250:	bl	1a940 <lchmod@@Base+0x37d0>
   13254:	mov	r6, r0
   13258:	cmp	r0, #0
   1325c:	beq	13288 <__assert_fail@plt+0x17ec>
   13260:	mov	r0, r6
   13264:	mov	r1, r4
   13268:	mov	r2, r5
   1326c:	bl	11730 <memcpy@plt>
   13270:	cmp	r5, #0
   13274:	moveq	r0, #46	; 0x2e
   13278:	moveq	r5, #1
   1327c:	strbeq	r0, [r6]
   13280:	mov	r0, #0
   13284:	strb	r0, [r6, r5]
   13288:	mov	r0, r6
   1328c:	pop	{r4, r5, r6, sl, fp, pc}
   13290:	push	{r4, r5, r6, r7, fp, lr}
   13294:	add	fp, sp, #16
   13298:	cmp	r0, #0
   1329c:	beq	13304 <__assert_fail@plt+0x1868>
   132a0:	mov	r5, r0
   132a4:	mov	r0, #24
   132a8:	mov	r6, r2
   132ac:	mov	r7, r1
   132b0:	bl	1a2f0 <lchmod@@Base+0x3180>
   132b4:	mov	r4, r0
   132b8:	mov	r0, r7
   132bc:	bl	1a7f4 <lchmod@@Base+0x3684>
   132c0:	str	r0, [r4]
   132c4:	ldrd	r0, [r6, #96]	; 0x60
   132c8:	str	r0, [r4, #8]
   132cc:	str	r1, [r4, #12]
   132d0:	ldrd	r0, [r6]
   132d4:	str	r1, [r4, #20]
   132d8:	str	r0, [r4, #16]
   132dc:	mov	r0, r5
   132e0:	mov	r1, r4
   132e4:	bl	16ce8 <__assert_fail@plt+0x524c>
   132e8:	cmp	r0, #0
   132ec:	beq	13308 <__assert_fail@plt+0x186c>
   132f0:	cmp	r0, r4
   132f4:	beq	13304 <__assert_fail@plt+0x1868>
   132f8:	mov	r0, r4
   132fc:	pop	{r4, r5, r6, r7, fp, lr}
   13300:	b	17088 <__assert_fail@plt+0x55ec>
   13304:	pop	{r4, r5, r6, r7, fp, pc}
   13308:	bl	1a82c <lchmod@@Base+0x36bc>
   1330c:	cmp	r0, #0
   13310:	moveq	r0, #0
   13314:	bxeq	lr
   13318:	push	{r4, r5, fp, lr}
   1331c:	add	fp, sp, #8
   13320:	sub	sp, sp, #24
   13324:	str	r1, [sp]
   13328:	mov	ip, sp
   1332c:	mov	r1, sp
   13330:	ldrd	r4, [r2, #96]	; 0x60
   13334:	add	r3, ip, #8
   13338:	add	ip, ip, #16
   1333c:	strd	r4, [r3]
   13340:	ldrd	r2, [r2]
   13344:	strd	r2, [ip]
   13348:	bl	15db8 <__assert_fail@plt+0x431c>
   1334c:	cmp	r0, #0
   13350:	movwne	r0, #1
   13354:	sub	sp, fp, #8
   13358:	pop	{r4, r5, fp, pc}
   1335c:	push	{r4, r5, r6, sl, fp, lr}
   13360:	add	fp, sp, #16
   13364:	mov	r4, r0
   13368:	bl	118ec <__errno_location@plt>
   1336c:	ldr	r6, [r0]
   13370:	mov	r5, r0
   13374:	mov	r0, r4
   13378:	bl	1170c <free@plt>
   1337c:	str	r6, [r5]
   13380:	pop	{r4, r5, r6, sl, fp, pc}
   13384:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13388:	add	fp, sp, #28
   1338c:	sub	sp, sp, #28
   13390:	cmp	r1, #4096	; 0x1000
   13394:	bcs	133b0 <__assert_fail@plt+0x1914>
   13398:	mov	sl, r0
   1339c:	and	r0, r1, #516	; 0x204
   133a0:	mov	r6, r1
   133a4:	cmp	r0, #516	; 0x204
   133a8:	tstne	r6, #18
   133ac:	bne	133cc <__assert_fail@plt+0x1930>
   133b0:	bl	118ec <__errno_location@plt>
   133b4:	mov	r1, #22
   133b8:	mov	r4, #0
   133bc:	str	r1, [r0]
   133c0:	mov	r0, r4
   133c4:	sub	sp, fp, #28
   133c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133cc:	mov	r0, #1
   133d0:	mov	r1, #96	; 0x60
   133d4:	mov	r5, r2
   133d8:	bl	1a8ec <lchmod@@Base+0x377c>
   133dc:	cmp	r0, #0
   133e0:	beq	139c0 <__assert_fail@plt+0x1f24>
   133e4:	mov	r4, r0
   133e8:	mvn	r0, #99	; 0x63
   133ec:	tst	r6, #2
   133f0:	mov	r1, r6
   133f4:	str	r0, [r4, #32]
   133f8:	bic	r0, r6, #516	; 0x204
   133fc:	str	r5, [r4, #44]	; 0x2c
   13400:	str	r4, [sp, #24]
   13404:	orrne	r1, r0, #4
   13408:	str	r1, [r4, #48]	; 0x30
   1340c:	ldr	r0, [sl]
   13410:	cmp	r0, #0
   13414:	beq	13478 <__assert_fail@plt+0x19dc>
   13418:	add	r7, sl, #4
   1341c:	mov	r4, #0
   13420:	bl	118bc <strlen@plt>
   13424:	cmp	r0, r4
   13428:	movhi	r4, r0
   1342c:	ldr	r0, [r7], #4
   13430:	cmp	r0, #0
   13434:	bne	13420 <__assert_fail@plt+0x1984>
   13438:	add	r0, r4, #1
   1343c:	ldr	r4, [sp, #24]
   13440:	cmp	r0, #4096	; 0x1000
   13444:	movls	r0, #4096	; 0x1000
   13448:	ldr	r1, [r4, #36]	; 0x24
   1344c:	add	r0, r0, #256	; 0x100
   13450:	adds	r1, r0, r1
   13454:	bcc	1348c <__assert_fail@plt+0x19f0>
   13458:	ldr	r0, [r4, #24]
   1345c:	bl	1335c <__assert_fail@plt+0x18c0>
   13460:	mov	r0, #0
   13464:	str	r0, [r4, #24]
   13468:	bl	118ec <__errno_location@plt>
   1346c:	mov	r1, #36	; 0x24
   13470:	str	r1, [r0]
   13474:	b	139b8 <__assert_fail@plt+0x1f1c>
   13478:	mov	r0, #4096	; 0x1000
   1347c:	ldr	r1, [r4, #36]	; 0x24
   13480:	add	r0, r0, #256	; 0x100
   13484:	adds	r1, r0, r1
   13488:	bcs	13458 <__assert_fail@plt+0x19bc>
   1348c:	str	r1, [r4, #36]	; 0x24
   13490:	ldr	r0, [r4, #24]
   13494:	bl	1a970 <lchmod@@Base+0x3800>
   13498:	cmp	r0, #0
   1349c:	beq	13698 <__assert_fail@plt+0x1bfc>
   134a0:	str	r0, [r4, #24]
   134a4:	ldr	r0, [sl]
   134a8:	cmp	r0, #0
   134ac:	beq	136ac <__assert_fail@plt+0x1c10>
   134b0:	mov	r0, #176	; 0xb0
   134b4:	bl	1a940 <lchmod@@Base+0x37d0>
   134b8:	cmp	r0, #0
   134bc:	beq	139b0 <__assert_fail@plt+0x1f14>
   134c0:	ldr	r1, [r4, #24]
   134c4:	mov	r7, r0
   134c8:	mov	r0, #0
   134cc:	mov	r2, #196608	; 0x30000
   134d0:	strb	r0, [r7, #168]	; 0xa8
   134d4:	str	r2, [r7, #58]	; 0x3a
   134d8:	mvn	r2, #0
   134dc:	str	r4, [r7, #44]	; 0x2c
   134e0:	str	r2, [r7, #48]	; 0x30
   134e4:	str	r0, [r7, #52]	; 0x34
   134e8:	str	r0, [r7, #12]
   134ec:	str	r0, [r7, #16]
   134f0:	str	r0, [r7, #20]
   134f4:	str	r1, [r7, #28]
   134f8:	str	r0, [r7, #32]
   134fc:	cmp	r5, #0
   13500:	beq	136b8 <__assert_fail@plt+0x1c1c>
   13504:	ldrb	r0, [r4, #49]	; 0x31
   13508:	ubfx	r0, r0, #2, #1
   1350c:	ldr	r4, [sl]
   13510:	str	r0, [sp, #12]
   13514:	cmp	r4, #0
   13518:	beq	136cc <__assert_fail@plt+0x1c30>
   1351c:	tst	r6, #2048	; 0x800
   13520:	str	r5, [sp, #16]
   13524:	str	r7, [sp, #20]
   13528:	bne	136f0 <__assert_fail@plt+0x1c54>
   1352c:	mov	r0, #0
   13530:	mov	r8, #0
   13534:	mov	r5, #0
   13538:	str	r0, [sp, #8]
   1353c:	b	13590 <__assert_fail@plt+0x1af4>
   13540:	cmp	r8, #0
   13544:	str	r4, [r7, #8]
   13548:	beq	1356c <__assert_fail@plt+0x1ad0>
   1354c:	ldr	r0, [sp, #8]
   13550:	str	r7, [sp, #8]
   13554:	str	r7, [r0, #8]
   13558:	ldr	r4, [sl, #4]!
   1355c:	add	r5, r5, #1
   13560:	cmp	r4, #0
   13564:	bne	13590 <__assert_fail@plt+0x1af4>
   13568:	b	13844 <__assert_fail@plt+0x1da8>
   1356c:	mov	r0, r7
   13570:	str	r7, [sp, #8]
   13574:	b	1357c <__assert_fail@plt+0x1ae0>
   13578:	str	r8, [r7, #8]
   1357c:	mov	r8, r7
   13580:	ldr	r4, [sl, #4]!
   13584:	add	r5, r5, #1
   13588:	cmp	r4, #0
   1358c:	beq	13844 <__assert_fail@plt+0x1da8>
   13590:	mov	r0, r4
   13594:	bl	118bc <strlen@plt>
   13598:	mov	r9, r0
   1359c:	cmp	r0, #3
   135a0:	bcc	135d0 <__assert_fail@plt+0x1b34>
   135a4:	add	r0, r9, r4
   135a8:	ldrb	r0, [r0, #-1]
   135ac:	cmp	r0, #47	; 0x2f
   135b0:	bne	135d0 <__assert_fail@plt+0x1b34>
   135b4:	sub	r0, r4, #2
   135b8:	ldrb	r1, [r0, r9]
   135bc:	cmp	r1, #47	; 0x2f
   135c0:	bne	135d0 <__assert_fail@plt+0x1b34>
   135c4:	sub	r9, r9, #1
   135c8:	cmp	r9, #1
   135cc:	bhi	135b8 <__assert_fail@plt+0x1b1c>
   135d0:	add	r0, r9, #176	; 0xb0
   135d4:	bic	r0, r0, #7
   135d8:	bl	1a940 <lchmod@@Base+0x37d0>
   135dc:	cmp	r0, #0
   135e0:	beq	13834 <__assert_fail@plt+0x1d98>
   135e4:	add	r6, r0, #168	; 0xa8
   135e8:	mov	r7, r0
   135ec:	mov	r1, r4
   135f0:	mov	r2, r9
   135f4:	mov	r0, r6
   135f8:	bl	11730 <memcpy@plt>
   135fc:	ldr	r0, [sp, #24]
   13600:	ldr	r1, [sp, #20]
   13604:	mov	r4, #0
   13608:	cmp	r8, #0
   1360c:	strb	r4, [r6, r9]
   13610:	ldr	r2, [r0, #24]
   13614:	str	r1, [r7, #4]
   13618:	add	r1, r7, #44	; 0x2c
   1361c:	stm	r1, {r0, r4, r9}
   13620:	mov	r1, #196608	; 0x30000
   13624:	str	r1, [r7, #58]	; 0x3a
   13628:	str	r4, [r7, #12]
   1362c:	str	r4, [r7, #16]
   13630:	str	r4, [r7, #20]
   13634:	str	r6, [r7, #24]
   13638:	mov	r1, r8
   1363c:	movwne	r1, #1
   13640:	str	r2, [r7, #28]
   13644:	ldr	r2, [sp, #12]
   13648:	str	r4, [r7, #32]
   1364c:	tst	r2, r1
   13650:	beq	13678 <__assert_fail@plt+0x1bdc>
   13654:	mov	r0, #2
   13658:	str	r0, [r7, #112]	; 0x70
   1365c:	mov	r0, #11
   13660:	str	r4, [r7, #116]	; 0x74
   13664:	strh	r0, [r7, #56]	; 0x38
   13668:	ldr	r0, [sp, #16]
   1366c:	cmp	r0, #0
   13670:	bne	13578 <__assert_fail@plt+0x1adc>
   13674:	b	13540 <__assert_fail@plt+0x1aa4>
   13678:	mov	r1, r7
   1367c:	mov	r2, #0
   13680:	bl	13a34 <__assert_fail@plt+0x1f98>
   13684:	strh	r0, [r7, #56]	; 0x38
   13688:	ldr	r0, [sp, #16]
   1368c:	cmp	r0, #0
   13690:	bne	13578 <__assert_fail@plt+0x1adc>
   13694:	b	13540 <__assert_fail@plt+0x1aa4>
   13698:	ldr	r0, [r4, #24]
   1369c:	bl	1335c <__assert_fail@plt+0x18c0>
   136a0:	mov	r0, #0
   136a4:	str	r0, [r4, #24]
   136a8:	b	139b8 <__assert_fail@plt+0x1f1c>
   136ac:	mov	r7, #0
   136b0:	cmp	r5, #0
   136b4:	bne	13504 <__assert_fail@plt+0x1a68>
   136b8:	mov	r0, #1
   136bc:	ldr	r4, [sl]
   136c0:	str	r0, [sp, #12]
   136c4:	cmp	r4, #0
   136c8:	bne	1351c <__assert_fail@plt+0x1a80>
   136cc:	ldr	r4, [sp, #24]
   136d0:	mov	r8, #0
   136d4:	mov	r0, #176	; 0xb0
   136d8:	bl	1a940 <lchmod@@Base+0x37d0>
   136dc:	cmp	r0, #0
   136e0:	bne	1389c <__assert_fail@plt+0x1e00>
   136e4:	mov	r0, #0
   136e8:	str	r0, [r4]
   136ec:	b	1396c <__assert_fail@plt+0x1ed0>
   136f0:	add	r0, sl, #4
   136f4:	mov	r9, #0
   136f8:	mov	r8, #0
   136fc:	mov	r5, #0
   13700:	str	r0, [sp, #8]
   13704:	ldr	r0, [sp, #12]
   13708:	eor	r0, r0, #1
   1370c:	str	r0, [sp, #12]
   13710:	mov	r0, #0
   13714:	str	r0, [sp, #4]
   13718:	b	1374c <__assert_fail@plt+0x1cb0>
   1371c:	cmp	r8, #0
   13720:	str	r9, [r5, #8]
   13724:	beq	13828 <__assert_fail@plt+0x1d8c>
   13728:	ldr	r0, [sp, #4]
   1372c:	str	r5, [sp, #4]
   13730:	str	r5, [r0, #8]
   13734:	ldr	r0, [sp, #8]
   13738:	mov	r5, sl
   1373c:	add	r5, sl, #1
   13740:	ldr	r4, [r0, sl, lsl #2]
   13744:	cmp	r4, #0
   13748:	beq	13844 <__assert_fail@plt+0x1da8>
   1374c:	mov	r0, r4
   13750:	mov	sl, r5
   13754:	bl	118bc <strlen@plt>
   13758:	mov	r7, r0
   1375c:	add	r0, r0, #176	; 0xb0
   13760:	bic	r0, r0, #7
   13764:	bl	1a940 <lchmod@@Base+0x37d0>
   13768:	cmp	r0, #0
   1376c:	beq	13834 <__assert_fail@plt+0x1d98>
   13770:	add	r6, r0, #168	; 0xa8
   13774:	mov	r5, r0
   13778:	mov	r1, r4
   1377c:	mov	r2, r7
   13780:	mov	r0, r6
   13784:	bl	11730 <memcpy@plt>
   13788:	ldr	r0, [sp, #24]
   1378c:	ldr	r1, [sp, #20]
   13790:	strb	r9, [r6, r7]
   13794:	ldr	r2, [r0, #24]
   13798:	str	r1, [r5, #4]
   1379c:	mov	r1, #196608	; 0x30000
   137a0:	str	r0, [r5, #44]	; 0x2c
   137a4:	str	r9, [r5, #48]	; 0x30
   137a8:	str	r7, [r5, #52]	; 0x34
   137ac:	str	r1, [r5, #58]	; 0x3a
   137b0:	str	r9, [r5, #12]
   137b4:	str	r9, [r5, #16]
   137b8:	str	r9, [r5, #20]
   137bc:	str	r6, [r5, #24]
   137c0:	clz	r1, r8
   137c4:	lsr	r1, r1, #5
   137c8:	str	r2, [r5, #28]
   137cc:	ldr	r2, [sp, #12]
   137d0:	str	r9, [r5, #32]
   137d4:	orrs	r1, r2, r1
   137d8:	bne	13800 <__assert_fail@plt+0x1d64>
   137dc:	mov	r0, #2
   137e0:	str	r0, [r5, #112]	; 0x70
   137e4:	str	r9, [r5, #116]	; 0x74
   137e8:	mov	r0, #11
   137ec:	strh	r0, [r5, #56]	; 0x38
   137f0:	ldr	r0, [sp, #16]
   137f4:	cmp	r0, #0
   137f8:	bne	1381c <__assert_fail@plt+0x1d80>
   137fc:	b	1371c <__assert_fail@plt+0x1c80>
   13800:	mov	r1, r5
   13804:	mov	r2, #0
   13808:	bl	13a34 <__assert_fail@plt+0x1f98>
   1380c:	strh	r0, [r5, #56]	; 0x38
   13810:	ldr	r0, [sp, #16]
   13814:	cmp	r0, #0
   13818:	beq	1371c <__assert_fail@plt+0x1c80>
   1381c:	str	r8, [r5, #8]
   13820:	mov	r8, r5
   13824:	b	13734 <__assert_fail@plt+0x1c98>
   13828:	mov	r0, r5
   1382c:	str	r5, [sp, #4]
   13830:	b	13820 <__assert_fail@plt+0x1d84>
   13834:	ldr	r7, [sp, #20]
   13838:	cmp	r8, #0
   1383c:	bne	1398c <__assert_fail@plt+0x1ef0>
   13840:	b	139a4 <__assert_fail@plt+0x1f08>
   13844:	ldr	r0, [sp, #16]
   13848:	ldr	r7, [sp, #20]
   1384c:	cmp	r0, #0
   13850:	beq	13888 <__assert_fail@plt+0x1dec>
   13854:	ldr	r4, [sp, #24]
   13858:	cmp	r5, #2
   1385c:	bcc	1388c <__assert_fail@plt+0x1df0>
   13860:	mov	r0, r4
   13864:	mov	r1, r8
   13868:	mov	r2, r5
   1386c:	bl	13bcc <__assert_fail@plt+0x2130>
   13870:	mov	r8, r0
   13874:	mov	r0, #176	; 0xb0
   13878:	bl	1a940 <lchmod@@Base+0x37d0>
   1387c:	cmp	r0, #0
   13880:	bne	1389c <__assert_fail@plt+0x1e00>
   13884:	b	136e4 <__assert_fail@plt+0x1c48>
   13888:	ldr	r4, [sp, #24]
   1388c:	mov	r0, #176	; 0xb0
   13890:	bl	1a940 <lchmod@@Base+0x37d0>
   13894:	cmp	r0, #0
   13898:	beq	136e4 <__assert_fail@plt+0x1c48>
   1389c:	ldr	r2, [r4, #24]
   138a0:	mov	r1, #0
   138a4:	mov	r3, #196608	; 0x30000
   138a8:	str	r0, [r4]
   138ac:	str	r1, [r0, #52]	; 0x34
   138b0:	strb	r1, [r0, #168]	; 0xa8
   138b4:	str	r4, [r0, #44]	; 0x2c
   138b8:	str	r3, [r0, #58]	; 0x3a
   138bc:	str	r2, [r0, #28]
   138c0:	mov	r2, #9
   138c4:	str	r1, [r0, #32]
   138c8:	strh	r2, [r0, #56]	; 0x38
   138cc:	str	r8, [r0, #8]
   138d0:	str	r1, [r0, #12]
   138d4:	str	r1, [r0, #16]
   138d8:	str	r1, [r0, #20]
   138dc:	mov	r1, #1
   138e0:	str	r1, [r0, #48]	; 0x30
   138e4:	ldrh	r0, [r4, #48]	; 0x30
   138e8:	movw	r1, #258	; 0x102
   138ec:	tst	r0, r1
   138f0:	beq	1392c <__assert_fail@plt+0x1e90>
   138f4:	movw	r0, #13148	; 0x335c
   138f8:	movw	r2, #22908	; 0x597c
   138fc:	movw	r3, #22940	; 0x599c
   13900:	mov	r1, #0
   13904:	movt	r0, #1
   13908:	movt	r2, #1
   1390c:	movt	r3, #1
   13910:	str	r0, [sp]
   13914:	mov	r0, #31
   13918:	bl	1608c <__assert_fail@plt+0x45f0>
   1391c:	cmp	r0, #0
   13920:	str	r0, [r4, #56]	; 0x38
   13924:	bne	13944 <__assert_fail@plt+0x1ea8>
   13928:	b	1396c <__assert_fail@plt+0x1ed0>
   1392c:	mov	r0, #32
   13930:	bl	1a940 <lchmod@@Base+0x37d0>
   13934:	cmp	r0, #0
   13938:	str	r0, [r4, #56]	; 0x38
   1393c:	beq	1396c <__assert_fail@plt+0x1ed0>
   13940:	bl	1aae0 <lchmod@@Base+0x3970>
   13944:	ldr	r4, [sp, #24]
   13948:	ldr	r0, [r4, #48]	; 0x30
   1394c:	tst	r0, #516	; 0x204
   13950:	beq	139d0 <__assert_fail@plt+0x1f34>
   13954:	add	r0, r4, #60	; 0x3c
   13958:	mvn	r1, #0
   1395c:	bl	170a8 <__assert_fail@plt+0x560c>
   13960:	mov	r0, r4
   13964:	sub	sp, fp, #28
   13968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1396c:	cmp	r8, #0
   13970:	bne	1398c <__assert_fail@plt+0x1ef0>
   13974:	b	139a4 <__assert_fail@plt+0x1f08>
   13978:	mov	r0, r8
   1397c:	bl	1335c <__assert_fail@plt+0x18c0>
   13980:	cmp	r4, #0
   13984:	mov	r8, r4
   13988:	beq	139a4 <__assert_fail@plt+0x1f08>
   1398c:	ldrd	r4, [r8, #8]
   13990:	cmp	r5, #0
   13994:	beq	13978 <__assert_fail@plt+0x1edc>
   13998:	mov	r0, r5
   1399c:	bl	11a78 <closedir@plt>
   139a0:	b	13978 <__assert_fail@plt+0x1edc>
   139a4:	mov	r0, r7
   139a8:	bl	1335c <__assert_fail@plt+0x18c0>
   139ac:	ldr	r4, [sp, #24]
   139b0:	ldr	r0, [r4, #24]
   139b4:	bl	1335c <__assert_fail@plt+0x18c0>
   139b8:	mov	r0, r4
   139bc:	bl	1335c <__assert_fail@plt+0x18c0>
   139c0:	mov	r4, #0
   139c4:	mov	r0, r4
   139c8:	sub	sp, fp, #28
   139cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139d0:	mov	r1, #32768	; 0x8000
   139d4:	tst	r0, #512	; 0x200
   139d8:	and	r1, r1, r0, lsl #11
   139dc:	orr	r1, r1, #18688	; 0x4900
   139e0:	orr	r2, r1, #524288	; 0x80000
   139e4:	bne	13a08 <__assert_fail@plt+0x1f6c>
   139e8:	movw	r0, #47427	; 0xb943
   139ec:	mov	r1, r2
   139f0:	movt	r0, #1
   139f4:	bl	1ae4c <lchmod@@Base+0x3cdc>
   139f8:	cmn	r0, #1
   139fc:	str	r0, [r4, #28]
   13a00:	bgt	13954 <__assert_fail@plt+0x1eb8>
   13a04:	b	13a24 <__assert_fail@plt+0x1f88>
   13a08:	ldr	r0, [r4, #32]
   13a0c:	movw	r1, #47427	; 0xb943
   13a10:	movt	r1, #1
   13a14:	bl	17884 <lchmod@@Base+0x714>
   13a18:	cmn	r0, #1
   13a1c:	str	r0, [r4, #28]
   13a20:	bgt	13954 <__assert_fail@plt+0x1eb8>
   13a24:	ldr	r0, [r4, #48]	; 0x30
   13a28:	orr	r0, r0, #4
   13a2c:	str	r0, [r4, #48]	; 0x30
   13a30:	b	13954 <__assert_fail@plt+0x1eb8>
   13a34:	push	{r4, r5, r6, sl, fp, lr}
   13a38:	add	fp, sp, #16
   13a3c:	sub	sp, sp, #8
   13a40:	mov	r4, r1
   13a44:	ldr	r1, [r0, #48]	; 0x30
   13a48:	ldr	r3, [r4, #48]	; 0x30
   13a4c:	add	r5, r4, #64	; 0x40
   13a50:	cmp	r3, #0
   13a54:	andeq	r3, r1, #1
   13a58:	orreq	r2, r3, r2
   13a5c:	cmp	r2, #0
   13a60:	andseq	r1, r1, #2
   13a64:	beq	13ac0 <__assert_fail@plt+0x2024>
   13a68:	ldr	r1, [r4, #24]
   13a6c:	mov	r0, #3
   13a70:	mov	r2, r5
   13a74:	bl	11a24 <__xstat64@plt>
   13a78:	cmp	r0, #0
   13a7c:	beq	13b40 <__assert_fail@plt+0x20a4>
   13a80:	bl	118ec <__errno_location@plt>
   13a84:	mov	r6, r0
   13a88:	ldr	r0, [r0]
   13a8c:	cmp	r0, #2
   13a90:	bne	13af0 <__assert_fail@plt+0x2054>
   13a94:	ldr	r1, [r4, #24]
   13a98:	mov	r0, #3
   13a9c:	mov	r2, r5
   13aa0:	bl	11a54 <__lxstat64@plt>
   13aa4:	cmp	r0, #0
   13aa8:	bne	13aec <__assert_fail@plt+0x2050>
   13aac:	mov	r0, #0
   13ab0:	str	r0, [r6]
   13ab4:	mov	r0, #13
   13ab8:	sub	sp, fp, #16
   13abc:	pop	{r4, r5, r6, sl, fp, pc}
   13ac0:	ldr	r1, [r0, #32]
   13ac4:	ldr	r2, [r4, #24]
   13ac8:	mov	r0, #256	; 0x100
   13acc:	mov	r3, r5
   13ad0:	str	r0, [sp]
   13ad4:	mov	r0, #3
   13ad8:	bl	1179c <__fxstatat64@plt>
   13adc:	cmp	r0, #0
   13ae0:	beq	13b40 <__assert_fail@plt+0x20a4>
   13ae4:	bl	118ec <__errno_location@plt>
   13ae8:	mov	r6, r0
   13aec:	ldr	r0, [r6]
   13af0:	vmov.i32	q8, #0	; 0x00000000
   13af4:	add	r1, r5, #80	; 0x50
   13af8:	str	r0, [r4, #32]
   13afc:	mov	r0, #0
   13b00:	str	r0, [r5, #96]	; 0x60
   13b04:	vst1.64	{d16-d17}, [r1]
   13b08:	add	r1, r5, #64	; 0x40
   13b0c:	vst1.64	{d16-d17}, [r1]
   13b10:	add	r1, r5, #48	; 0x30
   13b14:	vst1.64	{d16-d17}, [r1]
   13b18:	add	r1, r5, #32
   13b1c:	vst1.64	{d16-d17}, [r1]
   13b20:	add	r1, r5, #16
   13b24:	vst1.64	{d16-d17}, [r1]
   13b28:	mov	r1, #100	; 0x64
   13b2c:	vst1.64	{d16-d17}, [r5], r1
   13b30:	str	r0, [r5]
   13b34:	mov	r0, #10
   13b38:	sub	sp, fp, #16
   13b3c:	pop	{r4, r5, r6, sl, fp, pc}
   13b40:	ldr	r0, [r4, #80]	; 0x50
   13b44:	and	r0, r0, #61440	; 0xf000
   13b48:	cmp	r0, #40960	; 0xa000
   13b4c:	beq	13bb4 <__assert_fail@plt+0x2118>
   13b50:	cmp	r0, #32768	; 0x8000
   13b54:	beq	13ba8 <__assert_fail@plt+0x210c>
   13b58:	cmp	r0, #16384	; 0x4000
   13b5c:	bne	13bc0 <__assert_fail@plt+0x2124>
   13b60:	ldrb	r1, [r4, #168]	; 0xa8
   13b64:	mov	r0, #1
   13b68:	cmp	r1, #46	; 0x2e
   13b6c:	bne	13bc4 <__assert_fail@plt+0x2128>
   13b70:	ldrb	r1, [r4, #169]	; 0xa9
   13b74:	cmp	r1, #0
   13b78:	beq	13b90 <__assert_fail@plt+0x20f4>
   13b7c:	cmp	r1, #46	; 0x2e
   13b80:	bne	13bc4 <__assert_fail@plt+0x2128>
   13b84:	ldrb	r1, [r4, #170]	; 0xaa
   13b88:	cmp	r1, #0
   13b8c:	bne	13bc4 <__assert_fail@plt+0x2128>
   13b90:	ldr	r1, [r4, #48]	; 0x30
   13b94:	mov	r0, #5
   13b98:	cmp	r1, #0
   13b9c:	movweq	r0, #1
   13ba0:	sub	sp, fp, #16
   13ba4:	pop	{r4, r5, r6, sl, fp, pc}
   13ba8:	mov	r0, #8
   13bac:	sub	sp, fp, #16
   13bb0:	pop	{r4, r5, r6, sl, fp, pc}
   13bb4:	mov	r0, #12
   13bb8:	sub	sp, fp, #16
   13bbc:	pop	{r4, r5, r6, sl, fp, pc}
   13bc0:	mov	r0, #3
   13bc4:	sub	sp, fp, #16
   13bc8:	pop	{r4, r5, r6, sl, fp, pc}
   13bcc:	push	{r4, r5, r6, r7, fp, lr}
   13bd0:	add	fp, sp, #16
   13bd4:	mov	r6, r0
   13bd8:	ldr	r7, [r0, #44]	; 0x2c
   13bdc:	ldr	r0, [r0, #40]	; 0x28
   13be0:	mov	r5, r2
   13be4:	mov	r4, r1
   13be8:	cmp	r0, r2
   13bec:	bcs	13c24 <__assert_fail@plt+0x2188>
   13bf0:	add	r1, r5, #40	; 0x28
   13bf4:	cmn	r1, #-1073741823	; 0xc0000001
   13bf8:	str	r1, [r6, #40]	; 0x28
   13bfc:	bhi	13cc8 <__assert_fail@plt+0x222c>
   13c00:	ldr	r0, [r6, #8]
   13c04:	lsl	r1, r1, #2
   13c08:	bl	1a970 <lchmod@@Base+0x3800>
   13c0c:	cmp	r0, #0
   13c10:	beq	13cc8 <__assert_fail@plt+0x222c>
   13c14:	str	r0, [r6, #8]
   13c18:	cmp	r4, #0
   13c1c:	bne	13c30 <__assert_fail@plt+0x2194>
   13c20:	b	13c44 <__assert_fail@plt+0x21a8>
   13c24:	ldr	r0, [r6, #8]
   13c28:	cmp	r4, #0
   13c2c:	beq	13c44 <__assert_fail@plt+0x21a8>
   13c30:	str	r4, [r0], #4
   13c34:	ldr	r4, [r4, #8]
   13c38:	cmp	r4, #0
   13c3c:	bne	13c30 <__assert_fail@plt+0x2194>
   13c40:	ldr	r0, [r6, #8]
   13c44:	mov	r1, r5
   13c48:	mov	r2, #4
   13c4c:	mov	r3, r7
   13c50:	bl	119d0 <qsort@plt>
   13c54:	ldr	r0, [r6, #8]
   13c58:	cmp	r5, #1
   13c5c:	ldr	r4, [r0]
   13c60:	mov	r1, r4
   13c64:	beq	13cec <__assert_fail@plt+0x2250>
   13c68:	mov	r2, r0
   13c6c:	ldr	r1, [r2, #4]!
   13c70:	str	r1, [r4, #8]
   13c74:	subs	r1, r5, #2
   13c78:	beq	13ce4 <__assert_fail@plt+0x2248>
   13c7c:	tst	r1, #1
   13c80:	beq	13c98 <__assert_fail@plt+0x21fc>
   13c84:	ldr	r1, [r0, #8]!
   13c88:	ldr	r2, [r0, #-4]
   13c8c:	str	r1, [r2, #8]
   13c90:	sub	r1, r5, #3
   13c94:	mov	r2, r0
   13c98:	cmp	r5, #3
   13c9c:	beq	13ce8 <__assert_fail@plt+0x224c>
   13ca0:	mov	r0, r2
   13ca4:	ldm	r2, {r3, r7}
   13ca8:	subs	r1, r1, #2
   13cac:	str	r7, [r3, #8]
   13cb0:	ldr	r3, [r0, #8]!
   13cb4:	ldr	r2, [r2, #4]
   13cb8:	str	r3, [r2, #8]
   13cbc:	mov	r2, r0
   13cc0:	bne	13ca4 <__assert_fail@plt+0x2208>
   13cc4:	b	13ce8 <__assert_fail@plt+0x224c>
   13cc8:	ldr	r0, [r6, #8]
   13ccc:	bl	1335c <__assert_fail@plt+0x18c0>
   13cd0:	mov	r0, #0
   13cd4:	str	r0, [r6, #40]	; 0x28
   13cd8:	str	r0, [r6, #8]
   13cdc:	mov	r0, r4
   13ce0:	pop	{r4, r5, r6, r7, fp, pc}
   13ce4:	mov	r0, r2
   13ce8:	ldr	r1, [r0]
   13cec:	mov	r0, #0
   13cf0:	str	r0, [r1, #8]
   13cf4:	mov	r0, r4
   13cf8:	pop	{r4, r5, r6, r7, fp, pc}
   13cfc:	push	{r4, r5, r6, r7, fp, lr}
   13d00:	add	fp, sp, #16
   13d04:	mov	r4, r0
   13d08:	ldr	r0, [r0]
   13d0c:	cmp	r0, #0
   13d10:	beq	13d50 <__assert_fail@plt+0x22b4>
   13d14:	ldr	r1, [r0, #48]	; 0x30
   13d18:	cmp	r1, #0
   13d1c:	bmi	13d44 <__assert_fail@plt+0x22a8>
   13d20:	ldr	r5, [r0, #8]
   13d24:	cmp	r5, #0
   13d28:	ldreq	r5, [r0, #4]
   13d2c:	bl	1335c <__assert_fail@plt+0x18c0>
   13d30:	ldr	r0, [r5, #48]	; 0x30
   13d34:	cmn	r0, #1
   13d38:	mov	r0, r5
   13d3c:	bgt	13d20 <__assert_fail@plt+0x2284>
   13d40:	b	13d48 <__assert_fail@plt+0x22ac>
   13d44:	mov	r5, r0
   13d48:	mov	r0, r5
   13d4c:	bl	1335c <__assert_fail@plt+0x18c0>
   13d50:	ldr	r5, [r4, #4]
   13d54:	cmp	r5, #0
   13d58:	bne	13d74 <__assert_fail@plt+0x22d8>
   13d5c:	b	13d8c <__assert_fail@plt+0x22f0>
   13d60:	mov	r0, r5
   13d64:	bl	1335c <__assert_fail@plt+0x18c0>
   13d68:	cmp	r6, #0
   13d6c:	mov	r5, r6
   13d70:	beq	13d8c <__assert_fail@plt+0x22f0>
   13d74:	ldrd	r6, [r5, #8]
   13d78:	cmp	r7, #0
   13d7c:	beq	13d60 <__assert_fail@plt+0x22c4>
   13d80:	mov	r0, r7
   13d84:	bl	11a78 <closedir@plt>
   13d88:	b	13d60 <__assert_fail@plt+0x22c4>
   13d8c:	ldr	r0, [r4, #8]
   13d90:	bl	1335c <__assert_fail@plt+0x18c0>
   13d94:	ldr	r0, [r4, #24]
   13d98:	bl	1335c <__assert_fail@plt+0x18c0>
   13d9c:	ldr	r0, [r4, #48]	; 0x30
   13da0:	tst	r0, #512	; 0x200
   13da4:	bne	13de0 <__assert_fail@plt+0x2344>
   13da8:	mov	r6, #0
   13dac:	tst	r0, #4
   13db0:	bne	13e04 <__assert_fail@plt+0x2368>
   13db4:	ldr	r0, [r4, #28]
   13db8:	bl	119c4 <fchdir@plt>
   13dbc:	cmp	r0, #0
   13dc0:	beq	13eac <__assert_fail@plt+0x2410>
   13dc4:	bl	118ec <__errno_location@plt>
   13dc8:	ldr	r6, [r0]
   13dcc:	ldr	r0, [r4, #28]
   13dd0:	bl	11a48 <close@plt>
   13dd4:	cmp	r6, #0
   13dd8:	beq	13df4 <__assert_fail@plt+0x2358>
   13ddc:	b	13e04 <__assert_fail@plt+0x2368>
   13de0:	ldr	r0, [r4, #32]
   13de4:	mov	r6, #0
   13de8:	cmp	r0, #0
   13dec:	bmi	13e04 <__assert_fail@plt+0x2368>
   13df0:	bl	11a48 <close@plt>
   13df4:	cmp	r0, #0
   13df8:	beq	13e04 <__assert_fail@plt+0x2368>
   13dfc:	bl	118ec <__errno_location@plt>
   13e00:	ldr	r6, [r0]
   13e04:	add	r5, r4, #60	; 0x3c
   13e08:	mov	r0, r5
   13e0c:	bl	170cc <__assert_fail@plt+0x5630>
   13e10:	cmp	r0, #0
   13e14:	bne	13e3c <__assert_fail@plt+0x23a0>
   13e18:	mov	r0, r5
   13e1c:	bl	17120 <__assert_fail@plt+0x5684>
   13e20:	cmp	r0, #0
   13e24:	bmi	13e08 <__assert_fail@plt+0x236c>
   13e28:	bl	11a48 <close@plt>
   13e2c:	mov	r0, r5
   13e30:	bl	170cc <__assert_fail@plt+0x5630>
   13e34:	cmp	r0, #0
   13e38:	beq	13e18 <__assert_fail@plt+0x237c>
   13e3c:	ldr	r0, [r4, #52]	; 0x34
   13e40:	cmp	r0, #0
   13e44:	beq	13e4c <__assert_fail@plt+0x23b0>
   13e48:	bl	163a8 <__assert_fail@plt+0x490c>
   13e4c:	ldrh	r0, [r4, #48]	; 0x30
   13e50:	movw	r1, #258	; 0x102
   13e54:	tst	r0, r1
   13e58:	beq	13e8c <__assert_fail@plt+0x23f0>
   13e5c:	ldr	r0, [r4, #56]	; 0x38
   13e60:	cmp	r0, #0
   13e64:	beq	13e6c <__assert_fail@plt+0x23d0>
   13e68:	bl	163a8 <__assert_fail@plt+0x490c>
   13e6c:	mov	r0, r4
   13e70:	bl	1335c <__assert_fail@plt+0x18c0>
   13e74:	cmp	r6, #0
   13e78:	beq	13ea4 <__assert_fail@plt+0x2408>
   13e7c:	bl	118ec <__errno_location@plt>
   13e80:	str	r6, [r0]
   13e84:	mvn	r0, #0
   13e88:	pop	{r4, r5, r6, r7, fp, pc}
   13e8c:	ldr	r0, [r4, #56]	; 0x38
   13e90:	bl	1335c <__assert_fail@plt+0x18c0>
   13e94:	mov	r0, r4
   13e98:	bl	1335c <__assert_fail@plt+0x18c0>
   13e9c:	cmp	r6, #0
   13ea0:	bne	13e7c <__assert_fail@plt+0x23e0>
   13ea4:	mov	r0, #0
   13ea8:	pop	{r4, r5, r6, r7, fp, pc}
   13eac:	mov	r6, #0
   13eb0:	ldr	r0, [r4, #28]
   13eb4:	bl	11a48 <close@plt>
   13eb8:	cmp	r6, #0
   13ebc:	beq	13df4 <__assert_fail@plt+0x2358>
   13ec0:	b	13e04 <__assert_fail@plt+0x2368>
   13ec4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13ec8:	add	fp, sp, #24
   13ecc:	sub	sp, sp, #8
   13ed0:	ldr	r6, [r0]
   13ed4:	mov	r5, #0
   13ed8:	cmp	r6, #0
   13edc:	beq	14684 <__assert_fail@plt+0x2be8>
   13ee0:	mov	r4, r0
   13ee4:	ldr	r0, [r0, #48]	; 0x30
   13ee8:	tst	r0, #8192	; 0x2000
   13eec:	bne	14684 <__assert_fail@plt+0x2be8>
   13ef0:	ldrh	r1, [r6, #60]	; 0x3c
   13ef4:	mov	r2, #3
   13ef8:	strh	r2, [r6, #60]	; 0x3c
   13efc:	cmp	r1, #1
   13f00:	beq	13fa0 <__assert_fail@plt+0x2504>
   13f04:	cmp	r1, #2
   13f08:	bne	13fc4 <__assert_fail@plt+0x2528>
   13f0c:	ldrh	r2, [r6, #56]	; 0x38
   13f10:	bic	r3, r2, #1
   13f14:	cmp	r3, #12
   13f18:	bne	13fc8 <__assert_fail@plt+0x252c>
   13f1c:	mov	r0, r4
   13f20:	mov	r1, r6
   13f24:	mov	r2, #1
   13f28:	bl	13a34 <__assert_fail@plt+0x1f98>
   13f2c:	cmp	r0, #1
   13f30:	strh	r0, [r6, #56]	; 0x38
   13f34:	bne	14598 <__assert_fail@plt+0x2afc>
   13f38:	ldr	r0, [r4, #48]	; 0x30
   13f3c:	tst	r0, #4
   13f40:	bne	14598 <__assert_fail@plt+0x2afc>
   13f44:	mov	r1, #32768	; 0x8000
   13f48:	tst	r0, #512	; 0x200
   13f4c:	and	r1, r1, r0, lsl #11
   13f50:	orr	r1, r1, #18688	; 0x4900
   13f54:	orr	r2, r1, #524288	; 0x80000
   13f58:	bne	142cc <__assert_fail@plt+0x2830>
   13f5c:	movw	r0, #47427	; 0xb943
   13f60:	mov	r1, r2
   13f64:	movt	r0, #1
   13f68:	bl	1ae4c <lchmod@@Base+0x3cdc>
   13f6c:	cmn	r0, #1
   13f70:	str	r0, [r6, #36]	; 0x24
   13f74:	bgt	142e8 <__assert_fail@plt+0x284c>
   13f78:	bl	118ec <__errno_location@plt>
   13f7c:	ldr	r0, [r0]
   13f80:	mov	r1, #7
   13f84:	strh	r1, [r6, #56]	; 0x38
   13f88:	str	r0, [r6, #32]
   13f8c:	str	r6, [r4]
   13f90:	ldrh	r0, [r6, #56]	; 0x38
   13f94:	cmp	r0, #11
   13f98:	beq	145a8 <__assert_fail@plt+0x2b0c>
   13f9c:	b	145dc <__assert_fail@plt+0x2b40>
   13fa0:	mov	r0, r4
   13fa4:	mov	r1, r6
   13fa8:	mov	r2, #0
   13fac:	bl	13a34 <__assert_fail@plt+0x1f98>
   13fb0:	strh	r0, [r6, #56]	; 0x38
   13fb4:	mov	r5, r6
   13fb8:	mov	r0, r5
   13fbc:	sub	sp, fp, #24
   13fc0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13fc4:	ldrh	r2, [r6, #56]	; 0x38
   13fc8:	cmp	r2, #1
   13fcc:	bne	14028 <__assert_fail@plt+0x258c>
   13fd0:	cmp	r1, #4
   13fd4:	bne	140dc <__assert_fail@plt+0x2640>
   13fd8:	ldrb	r0, [r6, #58]	; 0x3a
   13fdc:	tst	r0, #2
   13fe0:	beq	13fec <__assert_fail@plt+0x2550>
   13fe4:	ldr	r0, [r6, #36]	; 0x24
   13fe8:	bl	11a48 <close@plt>
   13fec:	ldr	r5, [r4, #4]
   13ff0:	cmp	r5, #0
   13ff4:	bne	14010 <__assert_fail@plt+0x2574>
   13ff8:	b	14174 <__assert_fail@plt+0x26d8>
   13ffc:	mov	r0, r5
   14000:	bl	1335c <__assert_fail@plt+0x18c0>
   14004:	cmp	r8, #0
   14008:	mov	r5, r8
   1400c:	beq	1416c <__assert_fail@plt+0x26d0>
   14010:	ldrd	r8, [r5, #8]
   14014:	cmp	r9, #0
   14018:	beq	13ffc <__assert_fail@plt+0x2560>
   1401c:	mov	r0, r9
   14020:	bl	11a78 <closedir@plt>
   14024:	b	13ffc <__assert_fail@plt+0x2560>
   14028:	mov	r7, r6
   1402c:	ldr	r6, [r7, #8]
   14030:	cmp	r6, #0
   14034:	beq	14198 <__assert_fail@plt+0x26fc>
   14038:	mov	r0, r7
   1403c:	str	r6, [r4]
   14040:	bl	1335c <__assert_fail@plt+0x18c0>
   14044:	ldr	r0, [r6, #48]	; 0x30
   14048:	cmp	r0, #0
   1404c:	beq	141e0 <__assert_fail@plt+0x2744>
   14050:	ldrh	r0, [r6, #60]	; 0x3c
   14054:	mov	r7, r6
   14058:	cmp	r0, #4
   1405c:	beq	1402c <__assert_fail@plt+0x2590>
   14060:	cmp	r0, #2
   14064:	bne	1455c <__assert_fail@plt+0x2ac0>
   14068:	mov	r0, r4
   1406c:	mov	r1, r6
   14070:	mov	r2, #1
   14074:	bl	13a34 <__assert_fail@plt+0x1f98>
   14078:	cmp	r0, #1
   1407c:	strh	r0, [r6, #56]	; 0x38
   14080:	bne	14554 <__assert_fail@plt+0x2ab8>
   14084:	ldr	r0, [r4, #48]	; 0x30
   14088:	tst	r0, #4
   1408c:	bne	14554 <__assert_fail@plt+0x2ab8>
   14090:	mov	r1, #32768	; 0x8000
   14094:	tst	r0, #512	; 0x200
   14098:	and	r1, r1, r0, lsl #11
   1409c:	orr	r1, r1, #18688	; 0x4900
   140a0:	orr	r2, r1, #524288	; 0x80000
   140a4:	bne	1452c <__assert_fail@plt+0x2a90>
   140a8:	movw	r0, #47427	; 0xb943
   140ac:	mov	r1, r2
   140b0:	movt	r0, #1
   140b4:	bl	1ae4c <lchmod@@Base+0x3cdc>
   140b8:	cmn	r0, #1
   140bc:	str	r0, [r6, #36]	; 0x24
   140c0:	bgt	14548 <__assert_fail@plt+0x2aac>
   140c4:	bl	118ec <__errno_location@plt>
   140c8:	ldr	r0, [r0]
   140cc:	mov	r1, #7
   140d0:	strh	r1, [r6, #56]	; 0x38
   140d4:	str	r0, [r6, #32]
   140d8:	b	14554 <__assert_fail@plt+0x2ab8>
   140dc:	tst	r0, #64	; 0x40
   140e0:	beq	140fc <__assert_fail@plt+0x2660>
   140e4:	ldrd	r2, [r4, #16]
   140e8:	ldrd	r8, [r6, #64]	; 0x40
   140ec:	eor	r1, r9, r3
   140f0:	eor	r2, r8, r2
   140f4:	orrs	r1, r2, r1
   140f8:	bne	13fd8 <__assert_fail@plt+0x253c>
   140fc:	ldr	r7, [r4, #4]
   14100:	cmp	r7, #0
   14104:	beq	14278 <__assert_fail@plt+0x27dc>
   14108:	tst	r0, #4096	; 0x1000
   1410c:	bne	14230 <__assert_fail@plt+0x2794>
   14110:	ldr	r3, [r6, #24]
   14114:	mov	r0, r4
   14118:	mov	r1, r6
   1411c:	mvn	r2, #0
   14120:	bl	14840 <__assert_fail@plt+0x2da4>
   14124:	cmp	r0, #0
   14128:	beq	14290 <__assert_fail@plt+0x27f4>
   1412c:	bl	118ec <__errno_location@plt>
   14130:	ldr	r0, [r0]
   14134:	str	r0, [r6, #32]
   14138:	ldrh	r0, [r6, #58]	; 0x3a
   1413c:	orr	r0, r0, #1
   14140:	strh	r0, [r6, #58]	; 0x3a
   14144:	ldr	r0, [r4, #4]
   14148:	cmp	r0, #0
   1414c:	beq	14290 <__assert_fail@plt+0x27f4>
   14150:	ldmib	r0, {r1, r2}
   14154:	cmp	r2, #0
   14158:	ldr	r1, [r1, #24]
   1415c:	str	r1, [r0, #24]
   14160:	mov	r0, r2
   14164:	bne	14150 <__assert_fail@plt+0x26b4>
   14168:	b	14290 <__assert_fail@plt+0x27f4>
   1416c:	mov	r0, #0
   14170:	str	r0, [r4, #4]
   14174:	mov	r0, #6
   14178:	strh	r0, [r6, #56]	; 0x38
   1417c:	mov	r0, r4
   14180:	mov	r1, r6
   14184:	bl	14764 <__assert_fail@plt+0x2cc8>
   14188:	mov	r5, r6
   1418c:	mov	r0, r5
   14190:	sub	sp, fp, #24
   14194:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14198:	ldr	r0, [r7, #4]
   1419c:	ldr	r1, [r0, #12]
   141a0:	cmp	r1, #0
   141a4:	beq	14208 <__assert_fail@plt+0x276c>
   141a8:	str	r0, [r4]
   141ac:	mov	r2, #0
   141b0:	ldr	r1, [r4, #24]
   141b4:	ldr	r0, [r0, #40]	; 0x28
   141b8:	strb	r2, [r1, r0]
   141bc:	mov	r0, r4
   141c0:	mov	r1, #3
   141c4:	bl	14af0 <__assert_fail@plt+0x3054>
   141c8:	cmp	r0, #0
   141cc:	beq	14308 <__assert_fail@plt+0x286c>
   141d0:	mov	r6, r0
   141d4:	mov	r0, r7
   141d8:	bl	1335c <__assert_fail@plt+0x18c0>
   141dc:	b	1455c <__assert_fail@plt+0x2ac0>
   141e0:	mov	r0, r4
   141e4:	bl	15688 <__assert_fail@plt+0x3bec>
   141e8:	ldr	r1, [r4, #48]	; 0x30
   141ec:	cmp	r0, #0
   141f0:	beq	14210 <__assert_fail@plt+0x2774>
   141f4:	orr	r0, r1, #8192	; 0x2000
   141f8:	str	r0, [r4, #48]	; 0x30
   141fc:	mov	r0, r5
   14200:	sub	sp, fp, #24
   14204:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14208:	mov	r5, r0
   1420c:	b	1431c <__assert_fail@plt+0x2880>
   14210:	movw	r0, #258	; 0x102
   14214:	tst	r1, r0
   14218:	beq	143b8 <__assert_fail@plt+0x291c>
   1421c:	ldr	r0, [r4, #56]	; 0x38
   14220:	cmp	r0, #0
   14224:	beq	143c0 <__assert_fail@plt+0x2924>
   14228:	bl	163a8 <__assert_fail@plt+0x490c>
   1422c:	b	143c0 <__assert_fail@plt+0x2924>
   14230:	bic	r0, r0, #4096	; 0x1000
   14234:	str	r0, [r4, #48]	; 0x30
   14238:	ldrd	r8, [r7, #8]
   1423c:	cmp	r9, #0
   14240:	bne	14264 <__assert_fail@plt+0x27c8>
   14244:	mov	r0, r7
   14248:	bl	1335c <__assert_fail@plt+0x18c0>
   1424c:	cmp	r8, #0
   14250:	mov	r7, r8
   14254:	beq	14270 <__assert_fail@plt+0x27d4>
   14258:	ldrd	r8, [r7, #8]
   1425c:	cmp	r9, #0
   14260:	beq	14244 <__assert_fail@plt+0x27a8>
   14264:	mov	r0, r9
   14268:	bl	11a78 <closedir@plt>
   1426c:	b	14244 <__assert_fail@plt+0x27a8>
   14270:	mov	r0, #0
   14274:	str	r0, [r4, #4]
   14278:	mov	r0, r4
   1427c:	mov	r1, #3
   14280:	bl	14af0 <__assert_fail@plt+0x3054>
   14284:	cmp	r0, #0
   14288:	str	r0, [r4, #4]
   1428c:	beq	142a0 <__assert_fail@plt+0x2804>
   14290:	ldr	r6, [r4, #4]
   14294:	mov	r0, #0
   14298:	str	r0, [r4, #4]
   1429c:	b	1455c <__assert_fail@plt+0x2ac0>
   142a0:	ldrb	r0, [r4, #49]	; 0x31
   142a4:	tst	r0, #32
   142a8:	bne	14684 <__assert_fail@plt+0x2be8>
   142ac:	ldr	r0, [r6, #32]
   142b0:	cmp	r0, #0
   142b4:	beq	1417c <__assert_fail@plt+0x26e0>
   142b8:	ldrh	r0, [r6, #56]	; 0x38
   142bc:	cmp	r0, #4
   142c0:	beq	1417c <__assert_fail@plt+0x26e0>
   142c4:	mov	r0, #7
   142c8:	b	14178 <__assert_fail@plt+0x26dc>
   142cc:	ldr	r0, [r4, #32]
   142d0:	movw	r1, #47427	; 0xb943
   142d4:	movt	r1, #1
   142d8:	bl	17884 <lchmod@@Base+0x714>
   142dc:	cmn	r0, #1
   142e0:	str	r0, [r6, #36]	; 0x24
   142e4:	ble	13f78 <__assert_fail@plt+0x24dc>
   142e8:	ldrh	r0, [r6, #58]	; 0x3a
   142ec:	orr	r0, r0, #2
   142f0:	strh	r0, [r6, #58]	; 0x3a
   142f4:	str	r6, [r4]
   142f8:	ldrh	r0, [r6, #56]	; 0x38
   142fc:	cmp	r0, #11
   14300:	beq	145a8 <__assert_fail@plt+0x2b0c>
   14304:	b	145dc <__assert_fail@plt+0x2b40>
   14308:	ldrb	r0, [r4, #49]	; 0x31
   1430c:	mov	r5, #0
   14310:	tst	r0, #32
   14314:	bne	14684 <__assert_fail@plt+0x2be8>
   14318:	ldr	r5, [r7, #4]
   1431c:	mov	r0, r7
   14320:	str	r5, [r4]
   14324:	bl	1335c <__assert_fail@plt+0x18c0>
   14328:	ldr	r0, [r5, #48]	; 0x30
   1432c:	cmn	r0, #1
   14330:	beq	14394 <__assert_fail@plt+0x28f8>
   14334:	ldrh	r0, [r5, #56]	; 0x38
   14338:	cmp	r0, #11
   1433c:	beq	14760 <__assert_fail@plt+0x2cc4>
   14340:	ldr	r0, [r5, #40]	; 0x28
   14344:	ldr	r1, [r4, #24]
   14348:	mov	r2, #0
   1434c:	strb	r2, [r1, r0]
   14350:	ldr	r0, [r5, #48]	; 0x30
   14354:	cmp	r0, #0
   14358:	beq	144b0 <__assert_fail@plt+0x2a14>
   1435c:	ldrh	r0, [r5, #58]	; 0x3a
   14360:	tst	r0, #2
   14364:	bne	144e8 <__assert_fail@plt+0x2a4c>
   14368:	tst	r0, #1
   1436c:	bne	14718 <__assert_fail@plt+0x2c7c>
   14370:	ldr	r1, [r5, #4]
   14374:	movw	r3, #47426	; 0xb942
   14378:	mov	r0, r4
   1437c:	mvn	r2, #0
   14380:	movt	r3, #1
   14384:	bl	14840 <__assert_fail@plt+0x2da4>
   14388:	cmp	r0, #0
   1438c:	bne	144c0 <__assert_fail@plt+0x2a24>
   14390:	b	14718 <__assert_fail@plt+0x2c7c>
   14394:	mov	r0, r5
   14398:	bl	1335c <__assert_fail@plt+0x18c0>
   1439c:	bl	118ec <__errno_location@plt>
   143a0:	mov	r5, #0
   143a4:	str	r5, [r0]
   143a8:	str	r5, [r4]
   143ac:	mov	r0, r5
   143b0:	sub	sp, fp, #24
   143b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   143b8:	ldr	r0, [r4, #56]	; 0x38
   143bc:	bl	1335c <__assert_fail@plt+0x18c0>
   143c0:	ldr	r1, [r6, #52]	; 0x34
   143c4:	add	r7, r6, #168	; 0xa8
   143c8:	str	r1, [r6, #40]	; 0x28
   143cc:	add	r2, r1, #1
   143d0:	mov	r1, r7
   143d4:	ldr	r0, [r4, #24]
   143d8:	bl	11700 <memmove@plt>
   143dc:	mov	r0, r7
   143e0:	mov	r1, #47	; 0x2f
   143e4:	bl	1197c <strrchr@plt>
   143e8:	cmp	r0, #0
   143ec:	beq	14428 <__assert_fail@plt+0x298c>
   143f0:	cmp	r0, r7
   143f4:	bne	14404 <__assert_fail@plt+0x2968>
   143f8:	ldrb	r1, [r6, #169]	; 0xa9
   143fc:	cmp	r1, #0
   14400:	beq	14428 <__assert_fail@plt+0x298c>
   14404:	add	r8, r0, #1
   14408:	mov	r0, r8
   1440c:	bl	118bc <strlen@plt>
   14410:	mov	r9, r0
   14414:	add	r2, r0, #1
   14418:	mov	r0, r7
   1441c:	mov	r1, r8
   14420:	bl	11700 <memmove@plt>
   14424:	str	r9, [r6, #52]	; 0x34
   14428:	ldr	r0, [r4, #24]
   1442c:	movw	r1, #258	; 0x102
   14430:	str	r0, [r6, #24]
   14434:	str	r0, [r6, #28]
   14438:	ldrh	r0, [r4, #48]	; 0x30
   1443c:	tst	r0, r1
   14440:	beq	14484 <__assert_fail@plt+0x29e8>
   14444:	movw	r0, #13148	; 0x335c
   14448:	movw	r2, #22908	; 0x597c
   1444c:	movw	r3, #22940	; 0x599c
   14450:	mov	r1, #0
   14454:	movt	r0, #1
   14458:	movt	r2, #1
   1445c:	movt	r3, #1
   14460:	str	r0, [sp]
   14464:	mov	r0, #31
   14468:	bl	1608c <__assert_fail@plt+0x45f0>
   1446c:	str	r0, [r4, #56]	; 0x38
   14470:	str	r6, [r4]
   14474:	ldrh	r0, [r6, #56]	; 0x38
   14478:	cmp	r0, #11
   1447c:	beq	145a8 <__assert_fail@plt+0x2b0c>
   14480:	b	145dc <__assert_fail@plt+0x2b40>
   14484:	mov	r0, #32
   14488:	bl	1a940 <lchmod@@Base+0x37d0>
   1448c:	cmp	r0, #0
   14490:	str	r0, [r4, #56]	; 0x38
   14494:	beq	14598 <__assert_fail@plt+0x2afc>
   14498:	bl	1aae0 <lchmod@@Base+0x3970>
   1449c:	str	r6, [r4]
   144a0:	ldrh	r0, [r6, #56]	; 0x38
   144a4:	cmp	r0, #11
   144a8:	beq	145a8 <__assert_fail@plt+0x2b0c>
   144ac:	b	145dc <__assert_fail@plt+0x2b40>
   144b0:	mov	r0, r4
   144b4:	bl	15688 <__assert_fail@plt+0x3bec>
   144b8:	cmp	r0, #0
   144bc:	beq	14718 <__assert_fail@plt+0x2c7c>
   144c0:	bl	118ec <__errno_location@plt>
   144c4:	ldr	r0, [r0]
   144c8:	str	r0, [r5, #32]
   144cc:	ldr	r0, [r4, #48]	; 0x30
   144d0:	orr	r0, r0, #8192	; 0x2000
   144d4:	str	r0, [r4, #48]	; 0x30
   144d8:	ldrh	r0, [r5, #56]	; 0x38
   144dc:	cmp	r0, #2
   144e0:	bne	14724 <__assert_fail@plt+0x2c88>
   144e4:	b	14748 <__assert_fail@plt+0x2cac>
   144e8:	ldr	r0, [r4, #48]	; 0x30
   144ec:	tst	r0, #4
   144f0:	bne	14710 <__assert_fail@plt+0x2c74>
   144f4:	ldr	r6, [r5, #36]	; 0x24
   144f8:	tst	r0, #512	; 0x200
   144fc:	bne	146e4 <__assert_fail@plt+0x2c48>
   14500:	mov	r0, r6
   14504:	bl	119c4 <fchdir@plt>
   14508:	cmp	r0, #0
   1450c:	beq	14710 <__assert_fail@plt+0x2c74>
   14510:	bl	118ec <__errno_location@plt>
   14514:	ldr	r0, [r0]
   14518:	str	r0, [r5, #32]
   1451c:	ldr	r0, [r4, #48]	; 0x30
   14520:	orr	r0, r0, #8192	; 0x2000
   14524:	str	r0, [r4, #48]	; 0x30
   14528:	b	14710 <__assert_fail@plt+0x2c74>
   1452c:	ldr	r0, [r4, #32]
   14530:	movw	r1, #47427	; 0xb943
   14534:	movt	r1, #1
   14538:	bl	17884 <lchmod@@Base+0x714>
   1453c:	cmn	r0, #1
   14540:	str	r0, [r6, #36]	; 0x24
   14544:	ble	140c4 <__assert_fail@plt+0x2628>
   14548:	ldrh	r0, [r6, #58]	; 0x3a
   1454c:	orr	r0, r0, #2
   14550:	strh	r0, [r6, #58]	; 0x3a
   14554:	mov	r0, #3
   14558:	strh	r0, [r6, #60]	; 0x3c
   1455c:	ldr	r0, [r6, #4]
   14560:	ldr	r1, [r0, #28]
   14564:	ldr	r0, [r0, #40]	; 0x28
   14568:	sub	r2, r0, #1
   1456c:	ldrb	r1, [r1, r2]
   14570:	cmp	r1, #47	; 0x2f
   14574:	ldr	r1, [r4, #24]
   14578:	moveq	r0, r2
   1457c:	mov	r2, #47	; 0x2f
   14580:	strb	r2, [r1, r0]!
   14584:	ldr	r2, [r6, #52]	; 0x34
   14588:	add	r0, r1, #1
   1458c:	add	r1, r6, #168	; 0xa8
   14590:	add	r2, r2, #1
   14594:	bl	11700 <memmove@plt>
   14598:	str	r6, [r4]
   1459c:	ldrh	r0, [r6, #56]	; 0x38
   145a0:	cmp	r0, #11
   145a4:	bne	145dc <__assert_fail@plt+0x2b40>
   145a8:	add	r0, r6, #112	; 0x70
   145ac:	ldrd	r0, [r0]
   145b0:	eor	r2, r0, #1
   145b4:	orrs	r2, r2, r1
   145b8:	beq	14690 <__assert_fail@plt+0x2bf4>
   145bc:	eor	r0, r0, #2
   145c0:	orrs	r0, r0, r1
   145c4:	bne	14760 <__assert_fail@plt+0x2cc4>
   145c8:	mov	r0, r4
   145cc:	mov	r1, r6
   145d0:	mov	r2, #0
   145d4:	bl	13a34 <__assert_fail@plt+0x1f98>
   145d8:	strh	r0, [r6, #56]	; 0x38
   145dc:	cmp	r0, #1
   145e0:	bne	14680 <__assert_fail@plt+0x2be4>
   145e4:	ldr	r0, [r6, #48]	; 0x30
   145e8:	add	r8, r6, #64	; 0x40
   145ec:	cmp	r0, #0
   145f0:	bne	145fc <__assert_fail@plt+0x2b60>
   145f4:	ldrd	r0, [r8]
   145f8:	strd	r0, [r4, #16]
   145fc:	ldrh	r0, [r4, #48]	; 0x30
   14600:	movw	r1, #258	; 0x102
   14604:	tst	r0, r1
   14608:	beq	146a0 <__assert_fail@plt+0x2c04>
   1460c:	mov	r0, #24
   14610:	bl	1a940 <lchmod@@Base+0x37d0>
   14614:	cmp	r0, #0
   14618:	beq	146cc <__assert_fail@plt+0x2c30>
   1461c:	ldrd	r2, [r8]
   14620:	mov	r7, r0
   14624:	add	r0, r6, #160	; 0xa0
   14628:	stm	r7, {r2, r3}
   1462c:	add	r2, r7, #8
   14630:	ldrd	r0, [r0]
   14634:	stm	r2, {r0, r1, r6}
   14638:	mov	r1, r7
   1463c:	ldr	r0, [r4, #56]	; 0x38
   14640:	bl	16ce8 <__assert_fail@plt+0x524c>
   14644:	cmp	r0, r7
   14648:	beq	14690 <__assert_fail@plt+0x2bf4>
   1464c:	mov	r4, r0
   14650:	mov	r0, r7
   14654:	bl	1335c <__assert_fail@plt+0x18c0>
   14658:	cmp	r4, #0
   1465c:	beq	146cc <__assert_fail@plt+0x2c30>
   14660:	ldr	r0, [r4, #16]
   14664:	mov	r1, #2
   14668:	mov	r5, r6
   1466c:	strh	r1, [r6, #56]	; 0x38
   14670:	str	r0, [r6]
   14674:	mov	r0, r5
   14678:	sub	sp, fp, #24
   1467c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14680:	mov	r5, r6
   14684:	mov	r0, r5
   14688:	sub	sp, fp, #24
   1468c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14690:	mov	r5, r6
   14694:	mov	r0, r5
   14698:	sub	sp, fp, #24
   1469c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   146a0:	ldr	r0, [r4, #56]	; 0x38
   146a4:	mov	r1, r8
   146a8:	bl	1aafc <lchmod@@Base+0x398c>
   146ac:	cmp	r0, #0
   146b0:	mov	r5, r6
   146b4:	movne	r0, #2
   146b8:	strhne	r0, [r6, #56]	; 0x38
   146bc:	strne	r6, [r6]
   146c0:	mov	r0, r5
   146c4:	sub	sp, fp, #24
   146c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   146cc:	bl	118ec <__errno_location@plt>
   146d0:	mov	r1, #12
   146d4:	str	r1, [r0]
   146d8:	mov	r0, r5
   146dc:	sub	sp, fp, #24
   146e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   146e4:	ldr	r1, [r4, #32]
   146e8:	cmp	r1, r6
   146ec:	bne	146f8 <__assert_fail@plt+0x2c5c>
   146f0:	cmn	r1, #100	; 0x64
   146f4:	bne	14760 <__assert_fail@plt+0x2cc4>
   146f8:	add	r0, r4, #60	; 0x3c
   146fc:	bl	170d4 <__assert_fail@plt+0x5638>
   14700:	cmp	r0, #0
   14704:	bmi	1470c <__assert_fail@plt+0x2c70>
   14708:	bl	11a48 <close@plt>
   1470c:	str	r6, [r4, #32]
   14710:	ldr	r0, [r5, #36]	; 0x24
   14714:	bl	11a48 <close@plt>
   14718:	ldrh	r0, [r5, #56]	; 0x38
   1471c:	cmp	r0, #2
   14720:	beq	14748 <__assert_fail@plt+0x2cac>
   14724:	ldr	r0, [r5, #32]
   14728:	mov	r1, #7
   1472c:	cmp	r0, #0
   14730:	movweq	r1, #6
   14734:	strh	r1, [r5, #56]	; 0x38
   14738:	bne	14748 <__assert_fail@plt+0x2cac>
   1473c:	mov	r0, r4
   14740:	mov	r1, r5
   14744:	bl	14764 <__assert_fail@plt+0x2cc8>
   14748:	ldrb	r0, [r4, #49]	; 0x31
   1474c:	tst	r0, #32
   14750:	movne	r5, #0
   14754:	mov	r0, r5
   14758:	sub	sp, fp, #24
   1475c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14760:	bl	11a3c <abort@plt>
   14764:	push	{r4, r5, r7, sl, fp, lr}
   14768:	add	fp, sp, #16
   1476c:	sub	sp, sp, #24
   14770:	ldrh	r2, [r0, #48]	; 0x30
   14774:	movw	r3, #258	; 0x102
   14778:	add	lr, r1, #64	; 0x40
   1477c:	add	r4, r1, #160	; 0xa0
   14780:	tst	r2, r3
   14784:	beq	147bc <__assert_fail@plt+0x2d20>
   14788:	ldrd	r2, [lr]
   1478c:	mov	r1, sp
   14790:	stm	sp, {r2, r3}
   14794:	ldrd	r2, [r4]
   14798:	str	r3, [sp, #12]
   1479c:	str	r2, [sp, #8]
   147a0:	ldr	r0, [r0, #56]	; 0x38
   147a4:	bl	16d30 <__assert_fail@plt+0x5294>
   147a8:	cmp	r0, #0
   147ac:	beq	1483c <__assert_fail@plt+0x2da0>
   147b0:	bl	1335c <__assert_fail@plt+0x18c0>
   147b4:	sub	sp, fp, #16
   147b8:	pop	{r4, r5, r7, sl, fp, pc}
   147bc:	ldr	r1, [r1, #4]
   147c0:	cmp	r1, #0
   147c4:	beq	14834 <__assert_fail@plt+0x2d98>
   147c8:	ldr	r2, [r1, #48]	; 0x30
   147cc:	cmp	r2, #0
   147d0:	bmi	14834 <__assert_fail@plt+0x2d98>
   147d4:	ldr	ip, [r0, #56]	; 0x38
   147d8:	ldrd	r2, [ip, #16]
   147dc:	orrs	r2, r2, r3
   147e0:	beq	1483c <__assert_fail@plt+0x2da0>
   147e4:	ldrd	r2, [r4]
   147e8:	ldrd	r4, [ip]
   147ec:	eor	r3, r5, r3
   147f0:	eor	r2, r4, r2
   147f4:	orrs	r2, r2, r3
   147f8:	bne	14834 <__assert_fail@plt+0x2d98>
   147fc:	add	r3, ip, #8
   14800:	ldm	lr, {r2, r5}
   14804:	ldm	r3, {r4, r7}
   14808:	eor	r7, r7, r5
   1480c:	eor	r2, r4, r2
   14810:	orrs	r2, r2, r7
   14814:	bne	14834 <__assert_fail@plt+0x2d98>
   14818:	add	r2, r1, #64	; 0x40
   1481c:	add	r1, r1, #160	; 0xa0
   14820:	ldm	r2, {r2, r5}
   14824:	stm	r3, {r2, r5}
   14828:	ldr	r0, [r0, #56]	; 0x38
   1482c:	ldrd	r2, [r1]
   14830:	strd	r2, [r0]
   14834:	sub	sp, fp, #16
   14838:	pop	{r4, r5, r7, sl, fp, pc}
   1483c:	bl	11a3c <abort@plt>
   14840:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14844:	add	fp, sp, #28
   14848:	sub	sp, sp, #108	; 0x6c
   1484c:	mov	r7, r3
   14850:	mov	r4, r2
   14854:	mov	r8, r1
   14858:	mov	sl, r0
   1485c:	cmp	r3, #0
   14860:	beq	148ec <__assert_fail@plt+0x2e50>
   14864:	movw	r1, #47426	; 0xb942
   14868:	mov	r0, r7
   1486c:	movt	r1, #1
   14870:	bl	116d0 <strcmp@plt>
   14874:	cmp	r0, #0
   14878:	mov	r6, r0
   1487c:	movwne	r6, #1
   14880:	ldr	r0, [sl, #48]	; 0x30
   14884:	tst	r0, #4
   14888:	bne	148fc <__assert_fail@plt+0x2e60>
   1488c:	cmn	r4, #1
   14890:	mov	r1, #0
   14894:	mov	r9, #0
   14898:	movwgt	r1, #1
   1489c:	orrs	r1, r1, r6
   148a0:	bne	14924 <__assert_fail@plt+0x2e88>
   148a4:	ands	r0, r0, #512	; 0x200
   148a8:	beq	14924 <__assert_fail@plt+0x2e88>
   148ac:	add	r4, sl, #60	; 0x3c
   148b0:	mov	r0, r4
   148b4:	bl	170cc <__assert_fail@plt+0x5630>
   148b8:	cmp	r0, #0
   148bc:	bne	1492c <__assert_fail@plt+0x2e90>
   148c0:	mov	r0, r4
   148c4:	bl	17120 <__assert_fail@plt+0x5684>
   148c8:	cmn	r0, #1
   148cc:	ble	1492c <__assert_fail@plt+0x2e90>
   148d0:	mov	r4, r0
   148d4:	mov	r9, #0
   148d8:	mov	r7, #0
   148dc:	ldr	r5, [sl, #48]	; 0x30
   148e0:	tst	r5, #2
   148e4:	beq	14970 <__assert_fail@plt+0x2ed4>
   148e8:	b	149b8 <__assert_fail@plt+0x2f1c>
   148ec:	mov	r6, #1
   148f0:	ldr	r0, [sl, #48]	; 0x30
   148f4:	tst	r0, #4
   148f8:	beq	1488c <__assert_fail@plt+0x2df0>
   148fc:	mov	r5, #0
   14900:	cmp	r4, #0
   14904:	bmi	149ac <__assert_fail@plt+0x2f10>
   14908:	ands	r0, r0, #512	; 0x200
   1490c:	beq	149ac <__assert_fail@plt+0x2f10>
   14910:	mov	r0, r4
   14914:	bl	11a48 <close@plt>
   14918:	mov	r0, r5
   1491c:	sub	sp, fp, #28
   14920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14924:	cmn	r4, #1
   14928:	bgt	14964 <__assert_fail@plt+0x2ec8>
   1492c:	ldr	r0, [sl, #48]	; 0x30
   14930:	mov	r1, #32768	; 0x8000
   14934:	and	r1, r1, r0, lsl #11
   14938:	tst	r0, #512	; 0x200
   1493c:	orr	r1, r1, #18688	; 0x4900
   14940:	orr	r2, r1, #524288	; 0x80000
   14944:	bne	149e0 <__assert_fail@plt+0x2f44>
   14948:	mov	r0, r7
   1494c:	mov	r1, r2
   14950:	bl	1ae4c <lchmod@@Base+0x3cdc>
   14954:	mov	r4, r0
   14958:	mov	r9, #1
   1495c:	cmp	r0, #0
   14960:	bmi	149fc <__assert_fail@plt+0x2f60>
   14964:	ldr	r5, [sl, #48]	; 0x30
   14968:	tst	r5, #2
   1496c:	bne	149b8 <__assert_fail@plt+0x2f1c>
   14970:	cmp	r7, #0
   14974:	beq	14990 <__assert_fail@plt+0x2ef4>
   14978:	movw	r1, #47426	; 0xb942
   1497c:	mov	r0, r7
   14980:	movt	r1, #1
   14984:	bl	116d0 <strcmp@plt>
   14988:	cmp	r0, #0
   1498c:	beq	149b8 <__assert_fail@plt+0x2f1c>
   14990:	tst	r5, #512	; 0x200
   14994:	bne	14a54 <__assert_fail@plt+0x2fb8>
   14998:	mov	r0, r4
   1499c:	bl	119c4 <fchdir@plt>
   149a0:	mov	r5, r0
   149a4:	cmp	r9, #0
   149a8:	bne	14a9c <__assert_fail@plt+0x3000>
   149ac:	mov	r0, r5
   149b0:	sub	sp, fp, #28
   149b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149b8:	mov	r2, sp
   149bc:	mov	r0, #3
   149c0:	mov	r1, r4
   149c4:	bl	117b4 <__fxstat64@plt>
   149c8:	cmp	r0, #0
   149cc:	beq	14a0c <__assert_fail@plt+0x2f70>
   149d0:	mvn	r5, #0
   149d4:	cmp	r9, #0
   149d8:	beq	149ac <__assert_fail@plt+0x2f10>
   149dc:	b	14a9c <__assert_fail@plt+0x3000>
   149e0:	ldr	r0, [sl, #32]
   149e4:	mov	r1, r7
   149e8:	bl	17884 <lchmod@@Base+0x714>
   149ec:	mov	r4, r0
   149f0:	mov	r9, #1
   149f4:	cmp	r0, #0
   149f8:	bpl	14964 <__assert_fail@plt+0x2ec8>
   149fc:	mvn	r5, #0
   14a00:	mov	r0, r5
   14a04:	sub	sp, fp, #28
   14a08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a0c:	add	r0, r8, #64	; 0x40
   14a10:	ldm	sp, {r2, r3}
   14a14:	ldrd	r0, [r0]
   14a18:	eor	r1, r1, r3
   14a1c:	eor	r0, r0, r2
   14a20:	orrs	r0, r0, r1
   14a24:	bne	14a84 <__assert_fail@plt+0x2fe8>
   14a28:	add	r0, r8, #160	; 0xa0
   14a2c:	ldr	r2, [sp, #96]	; 0x60
   14a30:	ldr	r3, [sp, #100]	; 0x64
   14a34:	ldrd	r0, [r0]
   14a38:	eor	r1, r1, r3
   14a3c:	eor	r0, r0, r2
   14a40:	orrs	r0, r0, r1
   14a44:	bne	14a84 <__assert_fail@plt+0x2fe8>
   14a48:	ldr	r5, [sl, #48]	; 0x30
   14a4c:	tst	r5, #512	; 0x200
   14a50:	beq	14998 <__assert_fail@plt+0x2efc>
   14a54:	ldr	r1, [sl, #32]
   14a58:	cmp	r1, r4
   14a5c:	bne	14a68 <__assert_fail@plt+0x2fcc>
   14a60:	cmn	r1, #100	; 0x64
   14a64:	bne	14aec <__assert_fail@plt+0x3050>
   14a68:	cmp	r6, #0
   14a6c:	beq	14ac0 <__assert_fail@plt+0x3024>
   14a70:	add	r0, sl, #60	; 0x3c
   14a74:	bl	170d4 <__assert_fail@plt+0x5638>
   14a78:	cmp	r0, #0
   14a7c:	bpl	14ad4 <__assert_fail@plt+0x3038>
   14a80:	b	14ad8 <__assert_fail@plt+0x303c>
   14a84:	bl	118ec <__errno_location@plt>
   14a88:	mov	r1, #2
   14a8c:	str	r1, [r0]
   14a90:	mvn	r5, #0
   14a94:	cmp	r9, #0
   14a98:	beq	149ac <__assert_fail@plt+0x2f10>
   14a9c:	bl	118ec <__errno_location@plt>
   14aa0:	ldr	r7, [r0]
   14aa4:	mov	r6, r0
   14aa8:	mov	r0, r4
   14aac:	bl	11a48 <close@plt>
   14ab0:	str	r7, [r6]
   14ab4:	mov	r0, r5
   14ab8:	sub	sp, fp, #28
   14abc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ac0:	tst	r5, #4
   14ac4:	bne	14ad8 <__assert_fail@plt+0x303c>
   14ac8:	cmp	r1, #0
   14acc:	bmi	14ad8 <__assert_fail@plt+0x303c>
   14ad0:	mov	r0, r1
   14ad4:	bl	11a48 <close@plt>
   14ad8:	str	r4, [sl, #32]
   14adc:	mov	r5, #0
   14ae0:	mov	r0, r5
   14ae4:	sub	sp, fp, #28
   14ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14aec:	bl	11a3c <abort@plt>
   14af0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14af4:	add	fp, sp, #28
   14af8:	sub	sp, sp, #68	; 0x44
   14afc:	ldr	sl, [r0]
   14b00:	mov	r4, r1
   14b04:	mov	r5, r0
   14b08:	str	r0, [fp, #-44]	; 0xffffffd4
   14b0c:	ldr	r6, [sl, #12]
   14b10:	cmp	r6, #0
   14b14:	beq	14b5c <__assert_fail@plt+0x30c0>
   14b18:	mov	r0, r6
   14b1c:	bl	119b8 <dirfd@plt>
   14b20:	cmn	r0, #1
   14b24:	str	r0, [fp, #-32]	; 0xffffffe0
   14b28:	ble	14b90 <__assert_fail@plt+0x30f4>
   14b2c:	mov	r1, r5
   14b30:	str	r6, [sp, #12]
   14b34:	str	r4, [sp, #4]
   14b38:	mov	r7, #0
   14b3c:	ldr	r0, [r1, #44]!	; 0x2c
   14b40:	str	r1, [sp, #20]
   14b44:	mvn	r1, #0
   14b48:	cmp	r0, #0
   14b4c:	movweq	r1, #34464	; 0x86a0
   14b50:	movteq	r1, #1
   14b54:	str	r1, [sp, #32]
   14b58:	b	14e88 <__assert_fail@plt+0x33ec>
   14b5c:	ldr	r3, [r5, #48]	; 0x30
   14b60:	mvn	r0, #99	; 0x63
   14b64:	mov	r2, #0
   14b68:	and	r1, r3, #516	; 0x204
   14b6c:	cmp	r1, #512	; 0x200
   14b70:	ldr	r1, [sl, #24]
   14b74:	ldreq	r0, [r5, #32]
   14b78:	tst	r3, #16
   14b7c:	beq	14bb8 <__assert_fail@plt+0x311c>
   14b80:	tst	r3, #1
   14b84:	bne	14bac <__assert_fail@plt+0x3110>
   14b88:	mov	r2, #32768	; 0x8000
   14b8c:	b	14bb8 <__assert_fail@plt+0x311c>
   14b90:	ldr	r0, [sl, #12]
   14b94:	bl	11a78 <closedir@plt>
   14b98:	mov	r6, #0
   14b9c:	str	r6, [sl, #12]
   14ba0:	cmp	r4, #3
   14ba4:	beq	14c00 <__assert_fail@plt+0x3164>
   14ba8:	b	15598 <__assert_fail@plt+0x3afc>
   14bac:	ldr	r3, [sl, #48]	; 0x30
   14bb0:	cmp	r3, #0
   14bb4:	movne	r2, #32768	; 0x8000
   14bb8:	sub	r3, fp, #32
   14bbc:	bl	178bc <lchmod@@Base+0x74c>
   14bc0:	cmp	r0, #0
   14bc4:	str	r0, [sl, #12]
   14bc8:	beq	14bf4 <__assert_fail@plt+0x3158>
   14bcc:	ldrh	r0, [sl, #56]	; 0x38
   14bd0:	cmp	r0, #11
   14bd4:	bne	14c20 <__assert_fail@plt+0x3184>
   14bd8:	mov	r0, r5
   14bdc:	mov	r1, sl
   14be0:	mov	r2, #0
   14be4:	bl	13a34 <__assert_fail@plt+0x1f98>
   14be8:	strh	r0, [sl, #56]	; 0x38
   14bec:	mov	r7, r5
   14bf0:	b	14cec <__assert_fail@plt+0x3250>
   14bf4:	mov	r6, #0
   14bf8:	cmp	r4, #3
   14bfc:	bne	15598 <__assert_fail@plt+0x3afc>
   14c00:	mov	r0, #4
   14c04:	strh	r0, [sl, #56]	; 0x38
   14c08:	bl	118ec <__errno_location@plt>
   14c0c:	ldr	r0, [r0]
   14c10:	str	r0, [sl, #32]
   14c14:	mov	r0, r6
   14c18:	sub	sp, fp, #28
   14c1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c20:	ldrb	r0, [r5, #49]	; 0x31
   14c24:	mov	r7, r5
   14c28:	tst	r0, #1
   14c2c:	beq	14cec <__assert_fail@plt+0x3250>
   14c30:	mov	r0, r7
   14c34:	mov	r1, sl
   14c38:	add	r8, sl, #64	; 0x40
   14c3c:	bl	14764 <__assert_fail@plt+0x2cc8>
   14c40:	mov	r0, r7
   14c44:	mov	r1, sl
   14c48:	mov	r2, #0
   14c4c:	bl	13a34 <__assert_fail@plt+0x1f98>
   14c50:	ldrh	r0, [r7, #48]	; 0x30
   14c54:	movw	r1, #258	; 0x102
   14c58:	tst	r0, r1
   14c5c:	beq	14cd0 <__assert_fail@plt+0x3234>
   14c60:	mov	r0, #24
   14c64:	bl	1a940 <lchmod@@Base+0x37d0>
   14c68:	cmp	r0, #0
   14c6c:	beq	14d94 <__assert_fail@plt+0x32f8>
   14c70:	ldrd	r2, [r8]
   14c74:	mov	r5, r0
   14c78:	add	r0, sl, #160	; 0xa0
   14c7c:	ldr	r7, [fp, #-44]	; 0xffffffd4
   14c80:	stm	r5, {r2, r3}
   14c84:	add	r2, r5, #8
   14c88:	ldrd	r0, [r0]
   14c8c:	stm	r2, {r0, r1, sl}
   14c90:	mov	r1, r5
   14c94:	ldr	r0, [r7, #56]	; 0x38
   14c98:	bl	16ce8 <__assert_fail@plt+0x524c>
   14c9c:	cmp	r0, r5
   14ca0:	beq	14cec <__assert_fail@plt+0x3250>
   14ca4:	mov	r8, r0
   14ca8:	mov	r0, r5
   14cac:	bl	1335c <__assert_fail@plt+0x18c0>
   14cb0:	cmp	r8, #0
   14cb4:	beq	14d94 <__assert_fail@plt+0x32f8>
   14cb8:	ldr	r7, [fp, #-44]	; 0xffffffd4
   14cbc:	ldr	r0, [r8, #16]
   14cc0:	mov	r1, #2
   14cc4:	strh	r1, [sl, #56]	; 0x38
   14cc8:	str	r0, [sl]
   14ccc:	b	14cec <__assert_fail@plt+0x3250>
   14cd0:	ldr	r0, [r7, #56]	; 0x38
   14cd4:	mov	r1, r8
   14cd8:	bl	1aafc <lchmod@@Base+0x398c>
   14cdc:	cmp	r0, #0
   14ce0:	movne	r0, #2
   14ce4:	strhne	r0, [sl, #56]	; 0x38
   14ce8:	strne	sl, [sl]
   14cec:	mov	r1, r7
   14cf0:	mov	r5, r7
   14cf4:	str	r4, [sp, #4]
   14cf8:	str	r6, [sp, #12]
   14cfc:	ldr	r0, [r1, #44]!	; 0x2c
   14d00:	str	r1, [sp, #20]
   14d04:	mvn	r1, #0
   14d08:	cmp	r0, #0
   14d0c:	movweq	r1, #34464	; 0x86a0
   14d10:	movteq	r1, #1
   14d14:	cmp	r4, #2
   14d18:	str	r1, [sp, #32]
   14d1c:	bne	14d38 <__assert_fail@plt+0x329c>
   14d20:	mov	r7, #1
   14d24:	cmp	r4, #3
   14d28:	bne	14e88 <__assert_fail@plt+0x33ec>
   14d2c:	sub	r0, r4, #3
   14d30:	mov	r5, #0
   14d34:	b	14dcc <__assert_fail@plt+0x3330>
   14d38:	ldr	r0, [r5, #48]	; 0x30
   14d3c:	and	r0, r0, #56	; 0x38
   14d40:	cmp	r0, #24
   14d44:	bne	14dc4 <__assert_fail@plt+0x3328>
   14d48:	ldr	r0, [sl, #84]	; 0x54
   14d4c:	cmp	r0, #2
   14d50:	bne	14dc4 <__assert_fail@plt+0x3328>
   14d54:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14d58:	mov	r0, sl
   14d5c:	bl	15a1c <__assert_fail@plt+0x3f80>
   14d60:	movw	r1, #26984	; 0x6968
   14d64:	cmp	r0, r1
   14d68:	ble	14db0 <__assert_fail@plt+0x3314>
   14d6c:	movw	r1, #26985	; 0x6969
   14d70:	cmp	r0, r1
   14d74:	movwne	r1, #16719	; 0x414f
   14d78:	movtne	r1, #21318	; 0x5346
   14d7c:	cmpne	r0, r1
   14d80:	beq	14dc4 <__assert_fail@plt+0x3328>
   14d84:	movw	r1, #40864	; 0x9fa0
   14d88:	cmp	r0, r1
   14d8c:	beq	14dc4 <__assert_fail@plt+0x3328>
   14d90:	b	14d20 <__assert_fail@plt+0x3284>
   14d94:	bl	118ec <__errno_location@plt>
   14d98:	mov	r1, #12
   14d9c:	mov	r6, #0
   14da0:	str	r1, [r0]
   14da4:	mov	r0, r6
   14da8:	sub	sp, fp, #28
   14dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14db0:	movw	r1, #19778	; 0x4d42
   14db4:	movt	r1, #65363	; 0xff53
   14db8:	cmp	r0, r1
   14dbc:	cmpne	r0, #0
   14dc0:	bne	14d20 <__assert_fail@plt+0x3284>
   14dc4:	sub	r0, r4, #3
   14dc8:	mov	r5, #1
   14dcc:	clz	r0, r0
   14dd0:	lsr	r7, r0, #5
   14dd4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14dd8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14ddc:	ldrb	r0, [r0, #49]	; 0x31
   14de0:	tst	r0, #2
   14de4:	beq	14e00 <__assert_fail@plt+0x3364>
   14de8:	mov	r0, r2
   14dec:	movw	r1, #1030	; 0x406
   14df0:	mov	r2, #3
   14df4:	bl	1ac6c <lchmod@@Base+0x3afc>
   14df8:	mov	r2, r0
   14dfc:	str	r0, [fp, #-32]	; 0xffffffe0
   14e00:	cmp	r2, #0
   14e04:	bmi	14e20 <__assert_fail@plt+0x3384>
   14e08:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14e0c:	mov	r1, sl
   14e10:	mov	r3, #0
   14e14:	bl	14840 <__assert_fail@plt+0x2da4>
   14e18:	cmp	r0, #0
   14e1c:	beq	14e80 <__assert_fail@plt+0x33e4>
   14e20:	and	r0, r7, r5
   14e24:	cmp	r0, #1
   14e28:	bne	14e38 <__assert_fail@plt+0x339c>
   14e2c:	bl	118ec <__errno_location@plt>
   14e30:	ldr	r0, [r0]
   14e34:	str	r0, [sl, #32]
   14e38:	ldrh	r0, [sl, #58]	; 0x3a
   14e3c:	orr	r0, r0, #1
   14e40:	strh	r0, [sl, #58]	; 0x3a
   14e44:	ldr	r0, [sl, #12]
   14e48:	bl	11a78 <closedir@plt>
   14e4c:	ldr	r5, [fp, #-44]	; 0xffffffd4
   14e50:	mov	r4, #0
   14e54:	str	r4, [sl, #12]
   14e58:	ldrb	r0, [r5, #49]	; 0x31
   14e5c:	tst	r0, #2
   14e60:	beq	14e74 <__assert_fail@plt+0x33d8>
   14e64:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14e68:	cmp	r0, #0
   14e6c:	bmi	14e74 <__assert_fail@plt+0x33d8>
   14e70:	bl	11a48 <close@plt>
   14e74:	mov	r7, #1
   14e78:	str	r4, [sl, #12]
   14e7c:	b	14e88 <__assert_fail@plt+0x33ec>
   14e80:	ldr	r5, [fp, #-44]	; 0xffffffd4
   14e84:	mov	r7, #0
   14e88:	ldr	r0, [sl, #40]	; 0x28
   14e8c:	ldr	r1, [sl, #28]
   14e90:	mov	r9, #0
   14e94:	sub	r2, r0, #1
   14e98:	ldrb	r1, [r1, r2]
   14e9c:	cmp	r1, #47	; 0x2f
   14ea0:	ldrb	r1, [r5, #48]	; 0x30
   14ea4:	moveq	r0, r2
   14ea8:	tst	r1, #4
   14eac:	mov	r1, #0
   14eb0:	str	r1, [sp, #40]	; 0x28
   14eb4:	beq	14ecc <__assert_fail@plt+0x3430>
   14eb8:	ldr	r1, [r5, #24]
   14ebc:	mov	r2, #47	; 0x2f
   14ec0:	strb	r2, [r1, r0]!
   14ec4:	add	r1, r1, #1
   14ec8:	str	r1, [sp, #40]	; 0x28
   14ecc:	ldr	r6, [sl, #12]
   14ed0:	add	r1, r0, #1
   14ed4:	str	r1, [fp, #-40]	; 0xffffffd8
   14ed8:	cmp	r6, #0
   14edc:	beq	152a4 <__assert_fail@plt+0x3808>
   14ee0:	ldr	r0, [sl, #48]	; 0x30
   14ee4:	str	r7, [sp]
   14ee8:	mov	r7, #0
   14eec:	add	r0, r0, #1
   14ef0:	str	r0, [sp, #24]
   14ef4:	ldr	r0, [r5, #36]	; 0x24
   14ef8:	sub	r0, r0, r1
   14efc:	str	r0, [sp, #44]	; 0x2c
   14f00:	bl	118ec <__errno_location@plt>
   14f04:	str	r0, [sp, #36]	; 0x24
   14f08:	mov	r0, #0
   14f0c:	mov	r9, #0
   14f10:	mov	r4, #0
   14f14:	str	sl, [sp, #28]
   14f18:	str	r0, [sp, #48]	; 0x30
   14f1c:	mov	r0, #0
   14f20:	str	r0, [sp, #8]
   14f24:	mov	r0, #0
   14f28:	str	r0, [sp, #16]
   14f2c:	ldr	r0, [sp, #36]	; 0x24
   14f30:	str	r7, [r0]
   14f34:	mov	r0, r6
   14f38:	bl	11994 <readdir64@plt>
   14f3c:	cmp	r0, #0
   14f40:	beq	15320 <__assert_fail@plt+0x3884>
   14f44:	mov	r8, r0
   14f48:	ldrb	r0, [r5, #48]	; 0x30
   14f4c:	tst	r0, #32
   14f50:	bne	14f80 <__assert_fail@plt+0x34e4>
   14f54:	ldrb	r0, [r8, #19]
   14f58:	cmp	r0, #46	; 0x2e
   14f5c:	bne	14f80 <__assert_fail@plt+0x34e4>
   14f60:	ldrb	r0, [r8, #20]
   14f64:	cmp	r0, #0
   14f68:	beq	1523c <__assert_fail@plt+0x37a0>
   14f6c:	cmp	r0, #46	; 0x2e
   14f70:	bne	14f80 <__assert_fail@plt+0x34e4>
   14f74:	ldrb	r0, [r8, #21]
   14f78:	cmp	r0, #0
   14f7c:	beq	1523c <__assert_fail@plt+0x37a0>
   14f80:	str	r4, [fp, #-36]	; 0xffffffdc
   14f84:	add	r4, r8, #19
   14f88:	mov	r0, r4
   14f8c:	bl	118bc <strlen@plt>
   14f90:	mov	r5, r0
   14f94:	add	r0, r0, #176	; 0xb0
   14f98:	bic	r0, r0, #7
   14f9c:	bl	1a940 <lchmod@@Base+0x37d0>
   14fa0:	mov	r6, r0
   14fa4:	cmp	r0, #0
   14fa8:	beq	15604 <__assert_fail@plt+0x3b68>
   14fac:	add	sl, r6, #168	; 0xa8
   14fb0:	mov	r1, r4
   14fb4:	mov	r2, r5
   14fb8:	mov	r0, sl
   14fbc:	bl	11730 <memcpy@plt>
   14fc0:	ldr	r2, [fp, #-44]	; 0xffffffd4
   14fc4:	strb	r7, [sl, r5]
   14fc8:	str	r5, [r6, #52]	; 0x34
   14fcc:	mov	r0, #196608	; 0x30000
   14fd0:	ldr	r1, [sp, #44]	; 0x2c
   14fd4:	str	r2, [r6, #44]	; 0x2c
   14fd8:	cmp	r5, r1
   14fdc:	ldr	r4, [r2, #24]
   14fe0:	str	r7, [r6, #12]
   14fe4:	str	r7, [r6, #16]
   14fe8:	str	r7, [r6, #20]
   14fec:	str	r0, [r6, #58]	; 0x3a
   14ff0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14ff4:	str	r4, [r6, #28]
   14ff8:	str	r7, [r6, #32]
   14ffc:	add	r7, r5, r0
   15000:	bcs	15014 <__assert_fail@plt+0x3578>
   15004:	mov	r5, r2
   15008:	cmp	r7, r0
   1500c:	bcs	1508c <__assert_fail@plt+0x35f0>
   15010:	b	154e4 <__assert_fail@plt+0x3a48>
   15014:	ldr	r1, [r2, #36]	; 0x24
   15018:	movw	r0, #257	; 0x101
   1501c:	mov	r5, r2
   15020:	add	r0, r7, r0
   15024:	adds	r1, r0, r1
   15028:	bcs	155d0 <__assert_fail@plt+0x3b34>
   1502c:	mov	r0, r4
   15030:	str	r1, [r5, #36]	; 0x24
   15034:	bl	1a970 <lchmod@@Base+0x3800>
   15038:	cmp	r0, #0
   1503c:	beq	155f0 <__assert_fail@plt+0x3b54>
   15040:	cmp	r0, r4
   15044:	str	r0, [r5, #24]
   15048:	beq	15070 <__assert_fail@plt+0x35d4>
   1504c:	ldrb	r1, [r5, #48]	; 0x30
   15050:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15054:	tst	r1, #4
   15058:	ldr	r1, [sp, #40]	; 0x28
   1505c:	addne	r1, r0, r2
   15060:	mov	r0, #1
   15064:	str	r1, [sp, #40]	; 0x28
   15068:	str	r0, [sp, #16]
   1506c:	b	15074 <__assert_fail@plt+0x35d8>
   15070:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15074:	ldr	r0, [r5, #36]	; 0x24
   15078:	sub	r0, r0, r2
   1507c:	str	r0, [sp, #44]	; 0x2c
   15080:	mov	r0, r2
   15084:	cmp	r7, r0
   15088:	bcc	154e4 <__assert_fail@plt+0x3a48>
   1508c:	ldr	r0, [sp, #24]
   15090:	add	r4, r6, #112	; 0x70
   15094:	str	r0, [r6, #48]	; 0x30
   15098:	ldr	r0, [r5]
   1509c:	str	r7, [r6, #40]	; 0x28
   150a0:	str	r0, [r6, #4]
   150a4:	ldrd	r0, [r8]
   150a8:	strd	r0, [r4, #48]	; 0x30
   150ac:	ldrb	r0, [r5, #48]	; 0x30
   150b0:	tst	r0, #4
   150b4:	bne	150c0 <__assert_fail@plt+0x3624>
   150b8:	str	sl, [r6, #24]
   150bc:	b	150dc <__assert_fail@plt+0x3640>
   150c0:	ldr	r0, [r6, #28]
   150c4:	ldr	r1, [r6, #52]	; 0x34
   150c8:	str	r0, [r6, #24]
   150cc:	ldr	r0, [sp, #40]	; 0x28
   150d0:	add	r2, r1, #1
   150d4:	mov	r1, sl
   150d8:	bl	11700 <memmove@plt>
   150dc:	ldr	r0, [r5, #44]	; 0x2c
   150e0:	ldr	r2, [r5, #48]	; 0x30
   150e4:	ldr	sl, [sp, #28]
   150e8:	mov	r7, #0
   150ec:	cmp	r0, #0
   150f0:	beq	15198 <__assert_fail@plt+0x36fc>
   150f4:	ands	r0, r2, #1024	; 0x400
   150f8:	bne	15198 <__assert_fail@plt+0x36fc>
   150fc:	mov	r0, r5
   15100:	mov	r1, r6
   15104:	mov	r2, #0
   15108:	bl	13a34 <__assert_fail@plt+0x1f98>
   1510c:	strh	r0, [r6, #56]	; 0x38
   15110:	ldr	r4, [fp, #-36]	; 0xffffffdc
   15114:	cmp	r9, #0
   15118:	str	r7, [r6, #8]
   1511c:	beq	15218 <__assert_fail@plt+0x377c>
   15120:	ldr	r0, [sp, #48]	; 0x30
   15124:	str	r6, [r0, #8]
   15128:	movw	r0, #10000	; 0x2710
   1512c:	cmp	r4, r0
   15130:	bne	15228 <__assert_fail@plt+0x378c>
   15134:	ldr	r0, [sp, #20]
   15138:	ldr	r0, [r0]
   1513c:	cmp	r0, #0
   15140:	bne	15228 <__assert_fail@plt+0x378c>
   15144:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15148:	mov	r0, sl
   1514c:	bl	15a1c <__assert_fail@plt+0x3f80>
   15150:	mov	r1, #0
   15154:	str	r1, [sp, #8]
   15158:	movw	r1, #19778	; 0x4d42
   1515c:	movt	r1, #65363	; 0xff53
   15160:	cmp	r0, r1
   15164:	movwne	r1, #26985	; 0x6969
   15168:	cmpne	r0, r1
   1516c:	beq	15228 <__assert_fail@plt+0x378c>
   15170:	movw	r1, #6548	; 0x1994
   15174:	movt	r1, #258	; 0x102
   15178:	cmp	r0, r1
   1517c:	movne	r0, #1
   15180:	strne	r0, [sp, #8]
   15184:	ldr	r0, [sp, #32]
   15188:	add	r4, r4, #1
   1518c:	cmp	r0, r4
   15190:	bhi	15238 <__assert_fail@plt+0x379c>
   15194:	b	15248 <__assert_fail@plt+0x37ac>
   15198:	ldrb	r3, [r8, #18]
   1519c:	mov	r0, #0
   151a0:	tst	r2, #8
   151a4:	mov	r1, #0
   151a8:	beq	151cc <__assert_fail@plt+0x3730>
   151ac:	orr	r1, r3, #4
   151b0:	cmp	r1, #4
   151b4:	mov	r1, #0
   151b8:	beq	151cc <__assert_fail@plt+0x3730>
   151bc:	eor	r1, r3, #10
   151c0:	and	r2, r2, #16
   151c4:	orrs	r1, r2, r1
   151c8:	movwne	r1, #1
   151cc:	mov	r2, #11
   151d0:	strh	r2, [r6, #56]	; 0x38
   151d4:	sub	r2, r3, #1
   151d8:	uxtb	r3, r2
   151dc:	cmp	r3, #11
   151e0:	bhi	151f4 <__assert_fail@plt+0x3758>
   151e4:	sxtb	r0, r2
   151e8:	movw	r2, #47432	; 0xb948
   151ec:	movt	r2, #1
   151f0:	ldr	r0, [r2, r0, lsl #2]
   151f4:	cmp	r1, #0
   151f8:	str	r0, [r6, #80]	; 0x50
   151fc:	mov	r0, #2
   15200:	movwne	r0, #1
   15204:	stm	r4, {r0, r7}
   15208:	ldr	r4, [fp, #-36]	; 0xffffffdc
   1520c:	cmp	r9, #0
   15210:	str	r7, [r6, #8]
   15214:	bne	15120 <__assert_fail@plt+0x3684>
   15218:	mov	r9, r6
   1521c:	movw	r0, #10000	; 0x2710
   15220:	cmp	r4, r0
   15224:	beq	15134 <__assert_fail@plt+0x3698>
   15228:	ldr	r0, [sp, #32]
   1522c:	add	r4, r4, #1
   15230:	cmp	r0, r4
   15234:	bls	15248 <__assert_fail@plt+0x37ac>
   15238:	str	r6, [sp, #48]	; 0x30
   1523c:	ldr	r6, [sl, #12]
   15240:	cmp	r6, #0
   15244:	bne	14f2c <__assert_fail@plt+0x3490>
   15248:	ldr	r0, [sp, #16]
   1524c:	ldr	r7, [sp]
   15250:	ldr	r6, [sp, #8]
   15254:	tst	r0, #1
   15258:	beq	15374 <__assert_fail@plt+0x38d8>
   1525c:	ldr	r1, [r5, #4]
   15260:	ldr	r0, [r5, #24]
   15264:	cmp	r1, #0
   15268:	bne	15280 <__assert_fail@plt+0x37e4>
   1526c:	b	152bc <__assert_fail@plt+0x3820>
   15270:	str	r0, [r1, #28]
   15274:	ldr	r1, [r1, #8]
   15278:	cmp	r1, #0
   1527c:	beq	152bc <__assert_fail@plt+0x3820>
   15280:	ldr	r2, [r1, #24]
   15284:	add	r3, r1, #168	; 0xa8
   15288:	cmp	r2, r3
   1528c:	beq	15270 <__assert_fail@plt+0x37d4>
   15290:	ldr	r3, [r1, #28]
   15294:	sub	r2, r2, r3
   15298:	add	r2, r0, r2
   1529c:	str	r2, [r1, #24]
   152a0:	b	15270 <__assert_fail@plt+0x37d4>
   152a4:	mov	r4, #0
   152a8:	mov	r6, #0
   152ac:	ldrb	r0, [r5, #48]	; 0x30
   152b0:	tst	r0, #4
   152b4:	bne	15380 <__assert_fail@plt+0x38e4>
   152b8:	b	153a8 <__assert_fail@plt+0x390c>
   152bc:	ldr	r1, [r9, #48]	; 0x30
   152c0:	cmp	r1, #0
   152c4:	bmi	15374 <__assert_fail@plt+0x38d8>
   152c8:	mov	r1, r9
   152cc:	ldr	r2, [r1, #24]
   152d0:	add	r3, r1, #168	; 0xa8
   152d4:	cmp	r2, r3
   152d8:	bne	1530c <__assert_fail@plt+0x3870>
   152dc:	str	r0, [r1, #28]
   152e0:	ldr	r2, [r1, #8]
   152e4:	cmp	r2, #0
   152e8:	ldreq	r2, [r1, #4]
   152ec:	ldr	r1, [r2, #48]	; 0x30
   152f0:	cmn	r1, #1
   152f4:	mov	r1, r2
   152f8:	ble	15374 <__assert_fail@plt+0x38d8>
   152fc:	ldr	r2, [r1, #24]
   15300:	add	r3, r1, #168	; 0xa8
   15304:	cmp	r2, r3
   15308:	beq	152dc <__assert_fail@plt+0x3840>
   1530c:	ldr	r3, [r1, #28]
   15310:	sub	r2, r2, r3
   15314:	add	r2, r0, r2
   15318:	str	r2, [r1, #24]
   1531c:	b	152dc <__assert_fail@plt+0x3840>
   15320:	ldr	r0, [sp, #36]	; 0x24
   15324:	ldr	r0, [r0]
   15328:	cmp	r0, #0
   1532c:	beq	15348 <__assert_fail@plt+0x38ac>
   15330:	str	r0, [sl, #32]
   15334:	ldr	r0, [sp, #12]
   15338:	orrs	r0, r0, r4
   1533c:	mov	r0, #4
   15340:	movwne	r0, #7
   15344:	strh	r0, [sl, #56]	; 0x38
   15348:	ldr	r0, [sl, #12]
   1534c:	ldr	r6, [sp, #8]
   15350:	cmp	r0, #0
   15354:	beq	15364 <__assert_fail@plt+0x38c8>
   15358:	bl	11a78 <closedir@plt>
   1535c:	mov	r0, #0
   15360:	str	r0, [sl, #12]
   15364:	ldr	r0, [sp, #16]
   15368:	ldr	r7, [sp]
   1536c:	tst	r0, #1
   15370:	bne	1525c <__assert_fail@plt+0x37c0>
   15374:	ldrb	r0, [r5, #48]	; 0x30
   15378:	tst	r0, #4
   1537c:	beq	153a8 <__assert_fail@plt+0x390c>
   15380:	ldr	r2, [sp, #40]	; 0x28
   15384:	ldr	r0, [r5, #36]	; 0x24
   15388:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1538c:	cmp	r3, r0
   15390:	sub	r1, r2, #1
   15394:	mov	r0, #0
   15398:	moveq	r2, r1
   1539c:	cmp	r4, #0
   153a0:	moveq	r2, r1
   153a4:	strb	r0, [r2]
   153a8:	ldr	r0, [sp, #12]
   153ac:	cmp	r0, #0
   153b0:	movwne	r0, #1
   153b4:	orrs	r0, r0, r7
   153b8:	beq	15420 <__assert_fail@plt+0x3984>
   153bc:	cmp	r4, #0
   153c0:	bne	15460 <__assert_fail@plt+0x39c4>
   153c4:	ldr	r0, [sp, #4]
   153c8:	cmp	r0, #3
   153cc:	bne	153e4 <__assert_fail@plt+0x3948>
   153d0:	ldrh	r0, [sl, #56]	; 0x38
   153d4:	cmp	r0, #4
   153d8:	cmpne	r0, #7
   153dc:	movne	r0, #6
   153e0:	strhne	r0, [sl, #56]	; 0x38
   153e4:	mov	r6, #0
   153e8:	cmp	r9, #0
   153ec:	bne	15408 <__assert_fail@plt+0x396c>
   153f0:	b	15598 <__assert_fail@plt+0x3afc>
   153f4:	mov	r0, r9
   153f8:	bl	1335c <__assert_fail@plt+0x18c0>
   153fc:	cmp	r4, #0
   15400:	mov	r9, r4
   15404:	beq	15598 <__assert_fail@plt+0x3afc>
   15408:	ldrd	r4, [r9, #8]
   1540c:	cmp	r5, #0
   15410:	beq	153f4 <__assert_fail@plt+0x3958>
   15414:	mov	r0, r5
   15418:	bl	11a78 <closedir@plt>
   1541c:	b	153f4 <__assert_fail@plt+0x3958>
   15420:	ldr	r0, [sp, #4]
   15424:	cmp	r0, #1
   15428:	cmpne	r4, #0
   1542c:	bne	15460 <__assert_fail@plt+0x39c4>
   15430:	ldr	r0, [sl, #48]	; 0x30
   15434:	cmp	r0, #0
   15438:	beq	15568 <__assert_fail@plt+0x3acc>
   1543c:	ldr	r1, [sl, #4]
   15440:	movw	r3, #47426	; 0xb942
   15444:	mov	r0, r5
   15448:	mvn	r2, #0
   1544c:	movt	r3, #1
   15450:	bl	14840 <__assert_fail@plt+0x2da4>
   15454:	cmp	r0, #0
   15458:	bne	15578 <__assert_fail@plt+0x3adc>
   1545c:	b	153bc <__assert_fail@plt+0x3920>
   15460:	tst	r6, #1
   15464:	beq	1549c <__assert_fail@plt+0x3a00>
   15468:	movw	r0, #23012	; 0x59e4
   1546c:	mov	r1, r9
   15470:	mov	r2, r4
   15474:	movt	r0, #1
   15478:	str	r0, [r5, #44]	; 0x2c
   1547c:	mov	r0, r5
   15480:	bl	13bcc <__assert_fail@plt+0x2130>
   15484:	mov	r6, r0
   15488:	mov	r0, #0
   1548c:	str	r0, [r5, #44]	; 0x2c
   15490:	mov	r0, r6
   15494:	sub	sp, fp, #28
   15498:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1549c:	cmp	r4, #2
   154a0:	bcc	154d4 <__assert_fail@plt+0x3a38>
   154a4:	ldr	r0, [sp, #20]
   154a8:	ldr	r0, [r0]
   154ac:	cmp	r0, #0
   154b0:	beq	154d4 <__assert_fail@plt+0x3a38>
   154b4:	mov	r0, r5
   154b8:	mov	r1, r9
   154bc:	mov	r2, r4
   154c0:	bl	13bcc <__assert_fail@plt+0x2130>
   154c4:	mov	r6, r0
   154c8:	mov	r0, r6
   154cc:	sub	sp, fp, #28
   154d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154d4:	mov	r6, r9
   154d8:	mov	r0, r6
   154dc:	sub	sp, fp, #28
   154e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154e4:	mov	r0, r6
   154e8:	bl	1335c <__assert_fail@plt+0x18c0>
   154ec:	ldr	r7, [sp, #28]
   154f0:	cmp	r9, #0
   154f4:	bne	15510 <__assert_fail@plt+0x3a74>
   154f8:	b	15528 <__assert_fail@plt+0x3a8c>
   154fc:	mov	r0, r9
   15500:	bl	1335c <__assert_fail@plt+0x18c0>
   15504:	cmp	r4, #0
   15508:	mov	r9, r4
   1550c:	beq	15528 <__assert_fail@plt+0x3a8c>
   15510:	ldrd	r4, [r9, #8]
   15514:	cmp	r5, #0
   15518:	beq	154fc <__assert_fail@plt+0x3a60>
   1551c:	mov	r0, r5
   15520:	bl	11a78 <closedir@plt>
   15524:	b	154fc <__assert_fail@plt+0x3a60>
   15528:	ldr	r0, [r7, #12]
   1552c:	bl	11a78 <closedir@plt>
   15530:	ldr	r1, [fp, #-44]	; 0xffffffd4
   15534:	mov	r0, #7
   15538:	mov	r6, #0
   1553c:	strh	r0, [r7, #56]	; 0x38
   15540:	str	r6, [r7, #12]
   15544:	ldr	r0, [r1, #48]	; 0x30
   15548:	orr	r0, r0, #8192	; 0x2000
   1554c:	str	r0, [r1, #48]	; 0x30
   15550:	ldr	r1, [sp, #36]	; 0x24
   15554:	mov	r0, #36	; 0x24
   15558:	str	r0, [r1]
   1555c:	mov	r0, r6
   15560:	sub	sp, fp, #28
   15564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15568:	mov	r0, r5
   1556c:	bl	15688 <__assert_fail@plt+0x3bec>
   15570:	cmp	r0, #0
   15574:	beq	153bc <__assert_fail@plt+0x3920>
   15578:	mov	r0, #7
   1557c:	mov	r6, #0
   15580:	cmp	r9, #0
   15584:	strh	r0, [sl, #56]	; 0x38
   15588:	ldr	r0, [r5, #48]	; 0x30
   1558c:	orr	r0, r0, #8192	; 0x2000
   15590:	str	r0, [r5, #48]	; 0x30
   15594:	bne	155b8 <__assert_fail@plt+0x3b1c>
   15598:	mov	r0, r6
   1559c:	sub	sp, fp, #28
   155a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155a4:	mov	r0, r9
   155a8:	bl	1335c <__assert_fail@plt+0x18c0>
   155ac:	cmp	r4, #0
   155b0:	mov	r9, r4
   155b4:	beq	15598 <__assert_fail@plt+0x3afc>
   155b8:	ldrd	r4, [r9, #8]
   155bc:	cmp	r5, #0
   155c0:	beq	155a4 <__assert_fail@plt+0x3b08>
   155c4:	mov	r0, r5
   155c8:	bl	11a78 <closedir@plt>
   155cc:	b	155a4 <__assert_fail@plt+0x3b08>
   155d0:	mov	r0, r4
   155d4:	bl	1335c <__assert_fail@plt+0x18c0>
   155d8:	ldr	r1, [sp, #36]	; 0x24
   155dc:	mov	r0, #0
   155e0:	str	r0, [r5, #24]
   155e4:	mov	r0, #36	; 0x24
   155e8:	str	r0, [r1]
   155ec:	b	15600 <__assert_fail@plt+0x3b64>
   155f0:	ldr	r0, [r5, #24]
   155f4:	bl	1335c <__assert_fail@plt+0x18c0>
   155f8:	mov	r0, #0
   155fc:	str	r0, [r5, #24]
   15600:	ldr	sl, [sp, #28]
   15604:	ldr	r0, [sp, #36]	; 0x24
   15608:	ldr	r4, [r0]
   1560c:	mov	r0, r6
   15610:	bl	1335c <__assert_fail@plt+0x18c0>
   15614:	ldr	r5, [fp, #-44]	; 0xffffffd4
   15618:	cmp	r9, #0
   1561c:	bne	15638 <__assert_fail@plt+0x3b9c>
   15620:	b	15650 <__assert_fail@plt+0x3bb4>
   15624:	mov	r0, r9
   15628:	bl	1335c <__assert_fail@plt+0x18c0>
   1562c:	cmp	r6, #0
   15630:	mov	r9, r6
   15634:	beq	15650 <__assert_fail@plt+0x3bb4>
   15638:	ldrd	r6, [r9, #8]
   1563c:	cmp	r7, #0
   15640:	beq	15624 <__assert_fail@plt+0x3b88>
   15644:	mov	r0, r7
   15648:	bl	11a78 <closedir@plt>
   1564c:	b	15624 <__assert_fail@plt+0x3b88>
   15650:	ldr	r0, [sl, #12]
   15654:	bl	11a78 <closedir@plt>
   15658:	mov	r0, #7
   1565c:	mov	r6, #0
   15660:	strh	r0, [sl, #56]	; 0x38
   15664:	str	r6, [sl, #12]
   15668:	ldr	r0, [r5, #48]	; 0x30
   1566c:	orr	r0, r0, #8192	; 0x2000
   15670:	str	r0, [r5, #48]	; 0x30
   15674:	ldr	r0, [sp, #36]	; 0x24
   15678:	str	r4, [r0]
   1567c:	mov	r0, r6
   15680:	sub	sp, fp, #28
   15684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15688:	push	{r4, r5, fp, lr}
   1568c:	add	fp, sp, #8
   15690:	mov	r5, r0
   15694:	ldr	r0, [r0, #48]	; 0x30
   15698:	mov	r4, #0
   1569c:	tst	r0, #4
   156a0:	bne	156e4 <__assert_fail@plt+0x3c48>
   156a4:	tst	r0, #512	; 0x200
   156a8:	bne	156c4 <__assert_fail@plt+0x3c28>
   156ac:	ldr	r0, [r5, #28]
   156b0:	bl	119c4 <fchdir@plt>
   156b4:	cmp	r0, #0
   156b8:	mov	r4, r0
   156bc:	movwne	r4, #1
   156c0:	b	156e4 <__assert_fail@plt+0x3c48>
   156c4:	ldr	r1, [r5, #32]
   156c8:	add	r0, r5, #60	; 0x3c
   156cc:	bl	170d4 <__assert_fail@plt+0x5638>
   156d0:	cmp	r0, #0
   156d4:	bmi	156dc <__assert_fail@plt+0x3c40>
   156d8:	bl	11a48 <close@plt>
   156dc:	mvn	r0, #99	; 0x63
   156e0:	str	r0, [r5, #32]
   156e4:	add	r5, r5, #60	; 0x3c
   156e8:	mov	r0, r5
   156ec:	bl	170cc <__assert_fail@plt+0x5630>
   156f0:	cmp	r0, #0
   156f4:	bne	1571c <__assert_fail@plt+0x3c80>
   156f8:	mov	r0, r5
   156fc:	bl	17120 <__assert_fail@plt+0x5684>
   15700:	cmp	r0, #0
   15704:	bmi	156e8 <__assert_fail@plt+0x3c4c>
   15708:	bl	11a48 <close@plt>
   1570c:	mov	r0, r5
   15710:	bl	170cc <__assert_fail@plt+0x5630>
   15714:	cmp	r0, #0
   15718:	beq	156f8 <__assert_fail@plt+0x3c5c>
   1571c:	mov	r0, r4
   15720:	pop	{r4, r5, fp, pc}
   15724:	push	{fp, lr}
   15728:	mov	fp, sp
   1572c:	cmp	r2, #5
   15730:	bcc	15748 <__assert_fail@plt+0x3cac>
   15734:	bl	118ec <__errno_location@plt>
   15738:	mov	r1, #22
   1573c:	str	r1, [r0]
   15740:	mov	r0, #1
   15744:	pop	{fp, pc}
   15748:	mov	r0, #0
   1574c:	strh	r2, [r1, #60]	; 0x3c
   15750:	pop	{fp, pc}
   15754:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15758:	add	fp, sp, #28
   1575c:	sub	sp, sp, #4
   15760:	mov	r9, r0
   15764:	mvn	r0, #4096	; 0x1000
   15768:	tst	r1, r0
   1576c:	beq	1578c <__assert_fail@plt+0x3cf0>
   15770:	bl	118ec <__errno_location@plt>
   15774:	mov	r1, #22
   15778:	mov	r5, #0
   1577c:	str	r1, [r0]
   15780:	mov	r0, r5
   15784:	sub	sp, fp, #28
   15788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1578c:	ldr	r8, [r9]
   15790:	mov	r7, r1
   15794:	bl	118ec <__errno_location@plt>
   15798:	mov	r5, #0
   1579c:	mov	sl, r0
   157a0:	str	r5, [r0]
   157a4:	ldrb	r0, [r9, #49]	; 0x31
   157a8:	tst	r0, #32
   157ac:	bne	157c4 <__assert_fail@plt+0x3d28>
   157b0:	ldrh	r0, [r8, #56]	; 0x38
   157b4:	cmp	r0, #1
   157b8:	beq	157d0 <__assert_fail@plt+0x3d34>
   157bc:	cmp	r0, #9
   157c0:	ldreq	r5, [r8, #8]
   157c4:	mov	r0, r5
   157c8:	sub	sp, fp, #28
   157cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157d0:	ldr	r6, [r9, #4]
   157d4:	cmp	r6, #0
   157d8:	bne	157f4 <__assert_fail@plt+0x3d58>
   157dc:	b	15810 <__assert_fail@plt+0x3d74>
   157e0:	mov	r0, r6
   157e4:	bl	1335c <__assert_fail@plt+0x18c0>
   157e8:	cmp	r4, #0
   157ec:	mov	r6, r4
   157f0:	beq	15810 <__assert_fail@plt+0x3d74>
   157f4:	ldr	r1, [r6, #12]
   157f8:	ldr	r4, [r6, #8]
   157fc:	cmp	r1, #0
   15800:	beq	157e0 <__assert_fail@plt+0x3d44>
   15804:	mov	r0, r1
   15808:	bl	11a78 <closedir@plt>
   1580c:	b	157e0 <__assert_fail@plt+0x3d44>
   15810:	mov	r4, #1
   15814:	cmp	r7, #4096	; 0x1000
   15818:	bne	1582c <__assert_fail@plt+0x3d90>
   1581c:	ldr	r0, [r9, #48]	; 0x30
   15820:	mov	r4, #2
   15824:	orr	r0, r0, #4096	; 0x1000
   15828:	str	r0, [r9, #48]	; 0x30
   1582c:	ldr	r0, [r8, #48]	; 0x30
   15830:	cmp	r0, #0
   15834:	bne	1588c <__assert_fail@plt+0x3df0>
   15838:	ldr	r0, [r8, #24]
   1583c:	ldrb	r0, [r0]
   15840:	cmp	r0, #47	; 0x2f
   15844:	beq	1588c <__assert_fail@plt+0x3df0>
   15848:	ldr	r0, [r9, #48]	; 0x30
   1584c:	tst	r0, #4
   15850:	bne	1588c <__assert_fail@plt+0x3df0>
   15854:	mov	r1, #32768	; 0x8000
   15858:	tst	r0, #512	; 0x200
   1585c:	and	r1, r1, r0, lsl #11
   15860:	orr	r1, r1, #18688	; 0x4900
   15864:	orr	r2, r1, #524288	; 0x80000
   15868:	bne	158ac <__assert_fail@plt+0x3e10>
   1586c:	movw	r0, #47427	; 0xb943
   15870:	mov	r1, r2
   15874:	movt	r0, #1
   15878:	bl	1ae4c <lchmod@@Base+0x3cdc>
   1587c:	mov	r8, r0
   15880:	cmn	r0, #1
   15884:	bgt	158c8 <__assert_fail@plt+0x3e2c>
   15888:	b	15910 <__assert_fail@plt+0x3e74>
   1588c:	mov	r0, r9
   15890:	mov	r1, r4
   15894:	bl	14af0 <__assert_fail@plt+0x3054>
   15898:	mov	r5, r0
   1589c:	str	r0, [r9, #4]
   158a0:	mov	r0, r5
   158a4:	sub	sp, fp, #28
   158a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158ac:	ldr	r0, [r9, #32]
   158b0:	movw	r1, #47427	; 0xb943
   158b4:	movt	r1, #1
   158b8:	bl	17884 <lchmod@@Base+0x714>
   158bc:	mov	r8, r0
   158c0:	cmn	r0, #1
   158c4:	ble	15910 <__assert_fail@plt+0x3e74>
   158c8:	mov	r0, r9
   158cc:	mov	r1, r4
   158d0:	bl	14af0 <__assert_fail@plt+0x3054>
   158d4:	str	r0, [r9, #4]
   158d8:	ldrb	r0, [r9, #49]	; 0x31
   158dc:	tst	r0, #2
   158e0:	bne	15924 <__assert_fail@plt+0x3e88>
   158e4:	mov	r0, r8
   158e8:	bl	119c4 <fchdir@plt>
   158ec:	cmp	r0, #0
   158f0:	beq	15960 <__assert_fail@plt+0x3ec4>
   158f4:	ldr	r4, [sl]
   158f8:	mov	r0, r8
   158fc:	bl	11a48 <close@plt>
   15900:	str	r4, [sl]
   15904:	mov	r0, r5
   15908:	sub	sp, fp, #28
   1590c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15910:	mov	r5, #0
   15914:	str	r5, [r9, #4]
   15918:	mov	r0, r5
   1591c:	sub	sp, fp, #28
   15920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15924:	ldr	r1, [r9, #32]
   15928:	cmp	r1, r8
   1592c:	bne	15938 <__assert_fail@plt+0x3e9c>
   15930:	cmn	r1, #100	; 0x64
   15934:	bne	15978 <__assert_fail@plt+0x3edc>
   15938:	add	r0, r9, #60	; 0x3c
   1593c:	bl	170d4 <__assert_fail@plt+0x5638>
   15940:	cmp	r0, #0
   15944:	bmi	1594c <__assert_fail@plt+0x3eb0>
   15948:	bl	11a48 <close@plt>
   1594c:	str	r8, [r9, #32]
   15950:	ldr	r5, [r9, #4]
   15954:	mov	r0, r5
   15958:	sub	sp, fp, #28
   1595c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15960:	mov	r0, r8
   15964:	bl	11a48 <close@plt>
   15968:	ldr	r5, [r9, #4]
   1596c:	mov	r0, r5
   15970:	sub	sp, fp, #28
   15974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15978:	bl	11a3c <abort@plt>
   1597c:	push	{fp, lr}
   15980:	mov	fp, sp
   15984:	mov	r2, r1
   15988:	ldrd	r0, [r0, #8]
   1598c:	mov	r3, #0
   15990:	bl	1b1c0 <lchmod@@Base+0x4050>
   15994:	mov	r0, r2
   15998:	pop	{fp, pc}
   1599c:	push	{r4, r5, fp, lr}
   159a0:	add	fp, sp, #8
   159a4:	ldrd	r2, [r1, #8]
   159a8:	ldrd	r4, [r0, #8]
   159ac:	eor	r3, r5, r3
   159b0:	eor	r2, r4, r2
   159b4:	orrs	r2, r2, r3
   159b8:	mov	r2, #0
   159bc:	bne	159dc <__assert_fail@plt+0x3f40>
   159c0:	ldrd	r2, [r1]
   159c4:	ldrd	r0, [r0]
   159c8:	eor	r1, r1, r3
   159cc:	eor	r0, r0, r2
   159d0:	orr	r0, r0, r1
   159d4:	clz	r0, r0
   159d8:	lsr	r2, r0, #5
   159dc:	mov	r0, r2
   159e0:	pop	{r4, r5, fp, pc}
   159e4:	push	{r4, r5, fp, lr}
   159e8:	add	fp, sp, #8
   159ec:	ldr	r0, [r0]
   159f0:	ldrd	r2, [r0, #160]	; 0xa0
   159f4:	ldr	r0, [r1]
   159f8:	ldrd	r4, [r0, #160]	; 0xa0
   159fc:	mov	r0, #0
   15a00:	subs	r1, r4, r2
   15a04:	sbcs	r1, r5, r3
   15a08:	movwcc	r0, #1
   15a0c:	subs	r1, r2, r4
   15a10:	sbcs	r1, r3, r5
   15a14:	subcc	r0, r0, #1
   15a18:	pop	{r4, r5, fp, pc}
   15a1c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15a20:	add	fp, sp, #24
   15a24:	sub	sp, sp, #96	; 0x60
   15a28:	ldr	r7, [r0, #44]	; 0x2c
   15a2c:	mov	r4, r0
   15a30:	mov	r5, #0
   15a34:	ldrb	r0, [r7, #49]	; 0x31
   15a38:	tst	r0, #2
   15a3c:	beq	15aec <__assert_fail@plt+0x4050>
   15a40:	ldr	r6, [r7, #52]	; 0x34
   15a44:	mov	r9, r1
   15a48:	cmp	r6, #0
   15a4c:	bne	15a8c <__assert_fail@plt+0x3ff0>
   15a50:	movw	r0, #13148	; 0x335c
   15a54:	movw	r2, #23384	; 0x5b58
   15a58:	movw	r3, #23416	; 0x5b78
   15a5c:	mov	r1, #0
   15a60:	mov	r8, #0
   15a64:	movt	r0, #1
   15a68:	movt	r2, #1
   15a6c:	movt	r3, #1
   15a70:	str	r0, [sp]
   15a74:	mov	r0, #13
   15a78:	bl	1608c <__assert_fail@plt+0x45f0>
   15a7c:	mov	r6, r0
   15a80:	cmp	r0, #0
   15a84:	str	r0, [r7, #52]	; 0x34
   15a88:	beq	15acc <__assert_fail@plt+0x4030>
   15a8c:	ldrd	r0, [r4, #64]	; 0x40
   15a90:	str	r1, [sp, #12]
   15a94:	str	r0, [sp, #8]
   15a98:	add	r1, sp, #8
   15a9c:	mov	r0, r6
   15aa0:	bl	15db8 <__assert_fail@plt+0x431c>
   15aa4:	cmp	r0, #0
   15aa8:	beq	15abc <__assert_fail@plt+0x4020>
   15aac:	ldr	r5, [r0, #8]
   15ab0:	mov	r0, r5
   15ab4:	sub	sp, fp, #24
   15ab8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15abc:	mov	r8, #1
   15ac0:	cmp	r9, #0
   15ac4:	bpl	15ad8 <__assert_fail@plt+0x403c>
   15ac8:	b	15aec <__assert_fail@plt+0x4050>
   15acc:	mov	r6, #0
   15ad0:	cmp	r9, #0
   15ad4:	bmi	15aec <__assert_fail@plt+0x4050>
   15ad8:	add	r1, sp, #8
   15adc:	mov	r0, r9
   15ae0:	bl	11688 <fstatfs64@plt>
   15ae4:	cmp	r0, #0
   15ae8:	beq	15af8 <__assert_fail@plt+0x405c>
   15aec:	mov	r0, r5
   15af0:	sub	sp, fp, #24
   15af4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15af8:	cmp	r8, #0
   15afc:	beq	15b48 <__assert_fail@plt+0x40ac>
   15b00:	mov	r0, #16
   15b04:	bl	1a940 <lchmod@@Base+0x37d0>
   15b08:	cmp	r0, #0
   15b0c:	beq	15b48 <__assert_fail@plt+0x40ac>
   15b10:	mov	r5, r0
   15b14:	ldrd	r0, [r4, #64]	; 0x40
   15b18:	ldr	r2, [sp, #8]
   15b1c:	stm	r5, {r0, r1, r2}
   15b20:	mov	r0, r6
   15b24:	mov	r1, r5
   15b28:	bl	16ce8 <__assert_fail@plt+0x524c>
   15b2c:	cmp	r0, #0
   15b30:	beq	15b40 <__assert_fail@plt+0x40a4>
   15b34:	cmp	r0, r5
   15b38:	beq	15b48 <__assert_fail@plt+0x40ac>
   15b3c:	bl	11a3c <abort@plt>
   15b40:	mov	r0, r5
   15b44:	bl	1335c <__assert_fail@plt+0x18c0>
   15b48:	ldr	r5, [sp, #8]
   15b4c:	mov	r0, r5
   15b50:	sub	sp, fp, #24
   15b54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15b58:	push	{fp, lr}
   15b5c:	mov	fp, sp
   15b60:	mov	r2, r1
   15b64:	ldrd	r0, [r0]
   15b68:	mov	r3, #0
   15b6c:	bl	1b1c0 <lchmod@@Base+0x4050>
   15b70:	mov	r0, r2
   15b74:	pop	{fp, pc}
   15b78:	ldrd	r2, [r1]
   15b7c:	ldrd	r0, [r0]
   15b80:	eor	r1, r1, r3
   15b84:	eor	r0, r0, r2
   15b88:	orr	r0, r0, r1
   15b8c:	clz	r0, r0
   15b90:	lsr	r0, r0, #5
   15b94:	bx	lr
   15b98:	ldr	r0, [r0, #8]
   15b9c:	bx	lr
   15ba0:	ldr	r0, [r0, #12]
   15ba4:	bx	lr
   15ba8:	ldr	r0, [r0, #16]
   15bac:	bx	lr
   15bb0:	ldm	r0, {r2, ip}
   15bb4:	mov	r0, #0
   15bb8:	cmp	r2, ip
   15bbc:	bxcs	lr
   15bc0:	mov	r0, #0
   15bc4:	ldr	r1, [r2]
   15bc8:	cmp	r1, #0
   15bcc:	bne	15be8 <__assert_fail@plt+0x414c>
   15bd0:	add	r2, r2, #8
   15bd4:	cmp	r2, ip
   15bd8:	bcs	15c14 <__assert_fail@plt+0x4178>
   15bdc:	ldr	r1, [r2]
   15be0:	cmp	r1, #0
   15be4:	beq	15bd0 <__assert_fail@plt+0x4134>
   15be8:	mov	r3, #0
   15bec:	mov	r1, r2
   15bf0:	ldr	r1, [r1, #4]
   15bf4:	add	r3, r3, #1
   15bf8:	cmp	r1, #0
   15bfc:	bne	15bf0 <__assert_fail@plt+0x4154>
   15c00:	cmp	r3, r0
   15c04:	movhi	r0, r3
   15c08:	add	r2, r2, #8
   15c0c:	cmp	r2, ip
   15c10:	bcc	15bdc <__assert_fail@plt+0x4140>
   15c14:	bx	lr
   15c18:	push	{fp, lr}
   15c1c:	mov	fp, sp
   15c20:	ldm	r0, {r3, ip}
   15c24:	mov	lr, #0
   15c28:	mov	r1, #0
   15c2c:	cmp	r3, ip
   15c30:	bcs	15c84 <__assert_fail@plt+0x41e8>
   15c34:	mov	r1, #0
   15c38:	mov	lr, #0
   15c3c:	ldr	r2, [r3]
   15c40:	cmp	r2, #0
   15c44:	bne	15c60 <__assert_fail@plt+0x41c4>
   15c48:	add	r3, r3, #8
   15c4c:	cmp	r3, ip
   15c50:	bcs	15c84 <__assert_fail@plt+0x41e8>
   15c54:	ldr	r2, [r3]
   15c58:	cmp	r2, #0
   15c5c:	beq	15c48 <__assert_fail@plt+0x41ac>
   15c60:	mov	r2, r3
   15c64:	ldr	r2, [r2, #4]
   15c68:	add	r1, r1, #1
   15c6c:	cmp	r2, #0
   15c70:	bne	15c64 <__assert_fail@plt+0x41c8>
   15c74:	add	lr, lr, #1
   15c78:	add	r3, r3, #8
   15c7c:	cmp	r3, ip
   15c80:	bcc	15c54 <__assert_fail@plt+0x41b8>
   15c84:	ldr	r2, [r0, #12]
   15c88:	cmp	lr, r2
   15c8c:	bne	15ca4 <__assert_fail@plt+0x4208>
   15c90:	ldr	r2, [r0, #16]
   15c94:	mov	r0, #1
   15c98:	cmp	r1, r2
   15c9c:	movne	r0, #0
   15ca0:	pop	{fp, pc}
   15ca4:	mov	r0, #0
   15ca8:	pop	{fp, pc}
   15cac:	nop	{0}
   15cb0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15cb4:	add	fp, sp, #24
   15cb8:	sub	sp, sp, #8
   15cbc:	ldr	r6, [r0]
   15cc0:	ldmib	r0, {r2, r7, r8}
   15cc4:	ldr	r3, [r0, #16]
   15cc8:	mov	r4, r1
   15ccc:	mov	r5, #0
   15cd0:	cmp	r6, r2
   15cd4:	bcs	15d2c <__assert_fail@plt+0x4290>
   15cd8:	mov	r5, #0
   15cdc:	ldr	r0, [r6]
   15ce0:	cmp	r0, #0
   15ce4:	bne	15d00 <__assert_fail@plt+0x4264>
   15ce8:	add	r6, r6, #8
   15cec:	cmp	r6, r2
   15cf0:	bcs	15d2c <__assert_fail@plt+0x4290>
   15cf4:	ldr	r0, [r6]
   15cf8:	cmp	r0, #0
   15cfc:	beq	15ce8 <__assert_fail@plt+0x424c>
   15d00:	mov	r0, #0
   15d04:	mov	r1, r6
   15d08:	ldr	r1, [r1, #4]
   15d0c:	add	r0, r0, #1
   15d10:	cmp	r1, #0
   15d14:	bne	15d08 <__assert_fail@plt+0x426c>
   15d18:	cmp	r0, r5
   15d1c:	movhi	r5, r0
   15d20:	add	r6, r6, #8
   15d24:	cmp	r6, r2
   15d28:	bcc	15cf4 <__assert_fail@plt+0x4258>
   15d2c:	movw	r2, #47480	; 0xb978
   15d30:	mov	r0, r4
   15d34:	mov	r1, #1
   15d38:	movt	r2, #1
   15d3c:	bl	11934 <__fprintf_chk@plt>
   15d40:	movw	r2, #47504	; 0xb990
   15d44:	mov	r0, r4
   15d48:	mov	r1, #1
   15d4c:	mov	r3, r7
   15d50:	movt	r2, #1
   15d54:	bl	11934 <__fprintf_chk@plt>
   15d58:	vmov	s0, r8
   15d5c:	vldr	d16, [pc, #76]	; 15db0 <__assert_fail@plt+0x4314>
   15d60:	movw	r2, #47528	; 0xb9a8
   15d64:	mov	r0, r4
   15d68:	mov	r1, #1
   15d6c:	mov	r3, r8
   15d70:	movt	r2, #1
   15d74:	vcvt.f64.u32	d17, s0
   15d78:	vmov	s0, r7
   15d7c:	vcvt.f64.u32	d18, s0
   15d80:	vmul.f64	d16, d17, d16
   15d84:	vdiv.f64	d16, d16, d18
   15d88:	vstr	d16, [sp]
   15d8c:	bl	11934 <__fprintf_chk@plt>
   15d90:	movw	r2, #47561	; 0xb9c9
   15d94:	mov	r0, r4
   15d98:	mov	r1, #1
   15d9c:	mov	r3, r5
   15da0:	movt	r2, #1
   15da4:	sub	sp, fp, #24
   15da8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15dac:	b	11934 <__fprintf_chk@plt>
   15db0:	andeq	r0, r0, r0
   15db4:	subsmi	r0, r9, r0
   15db8:	push	{r4, r5, r6, r7, fp, lr}
   15dbc:	add	fp, sp, #16
   15dc0:	mov	r4, r1
   15dc4:	ldr	r1, [r0, #8]
   15dc8:	ldr	r2, [r0, #24]
   15dcc:	mov	r5, r0
   15dd0:	mov	r0, r4
   15dd4:	blx	r2
   15dd8:	ldr	r1, [r5, #8]
   15ddc:	cmp	r0, r1
   15de0:	bcs	15e48 <__assert_fail@plt+0x43ac>
   15de4:	ldr	r7, [r5]
   15de8:	mov	r6, #0
   15dec:	ldr	r1, [r7, r0, lsl #3]!
   15df0:	cmp	r1, #0
   15df4:	cmpne	r7, #0
   15df8:	bne	15e28 <__assert_fail@plt+0x438c>
   15dfc:	mov	r0, r6
   15e00:	pop	{r4, r5, r6, r7, fp, pc}
   15e04:	ldr	r2, [r5, #28]
   15e08:	mov	r0, r4
   15e0c:	blx	r2
   15e10:	cmp	r0, #0
   15e14:	bne	15e3c <__assert_fail@plt+0x43a0>
   15e18:	ldr	r7, [r7, #4]
   15e1c:	cmp	r7, #0
   15e20:	beq	15dfc <__assert_fail@plt+0x4360>
   15e24:	ldr	r1, [r7]
   15e28:	cmp	r1, r4
   15e2c:	bne	15e04 <__assert_fail@plt+0x4368>
   15e30:	mov	r6, r4
   15e34:	mov	r0, r6
   15e38:	pop	{r4, r5, r6, r7, fp, pc}
   15e3c:	ldr	r6, [r7]
   15e40:	mov	r0, r6
   15e44:	pop	{r4, r5, r6, r7, fp, pc}
   15e48:	bl	11a3c <abort@plt>
   15e4c:	push	{fp, lr}
   15e50:	mov	fp, sp
   15e54:	ldr	r1, [r0, #16]
   15e58:	cmp	r1, #0
   15e5c:	beq	15e7c <__assert_fail@plt+0x43e0>
   15e60:	ldm	r0, {r1, r2}
   15e64:	cmp	r1, r2
   15e68:	bcs	15e84 <__assert_fail@plt+0x43e8>
   15e6c:	ldr	r0, [r1], #8
   15e70:	cmp	r0, #0
   15e74:	beq	15e64 <__assert_fail@plt+0x43c8>
   15e78:	pop	{fp, pc}
   15e7c:	mov	r0, #0
   15e80:	pop	{fp, pc}
   15e84:	bl	11a3c <abort@plt>
   15e88:	push	{r4, r5, fp, lr}
   15e8c:	add	fp, sp, #8
   15e90:	mov	r5, r1
   15e94:	ldr	r1, [r0, #8]
   15e98:	ldr	r2, [r0, #24]
   15e9c:	mov	r4, r0
   15ea0:	mov	r0, r5
   15ea4:	blx	r2
   15ea8:	ldr	r1, [r4, #8]
   15eac:	cmp	r0, r1
   15eb0:	bcs	15f14 <__assert_fail@plt+0x4478>
   15eb4:	ldr	r1, [r4]
   15eb8:	add	r2, r1, r0, lsl #3
   15ebc:	ldr	r3, [r2]
   15ec0:	ldr	r2, [r2, #4]
   15ec4:	cmp	r3, r5
   15ec8:	beq	15ed8 <__assert_fail@plt+0x443c>
   15ecc:	cmp	r2, #0
   15ed0:	bne	15ebc <__assert_fail@plt+0x4420>
   15ed4:	b	15ee8 <__assert_fail@plt+0x444c>
   15ed8:	cmp	r2, #0
   15edc:	beq	15ee8 <__assert_fail@plt+0x444c>
   15ee0:	ldr	r0, [r2]
   15ee4:	pop	{r4, r5, fp, pc}
   15ee8:	ldr	r2, [r4, #4]
   15eec:	add	r0, r1, r0, lsl #3
   15ef0:	add	r1, r0, #8
   15ef4:	cmp	r1, r2
   15ef8:	bcs	15f0c <__assert_fail@plt+0x4470>
   15efc:	ldr	r0, [r1], #8
   15f00:	cmp	r0, #0
   15f04:	beq	15ef4 <__assert_fail@plt+0x4458>
   15f08:	pop	{r4, r5, fp, pc}
   15f0c:	mov	r0, #0
   15f10:	pop	{r4, r5, fp, pc}
   15f14:	bl	11a3c <abort@plt>
   15f18:	push	{r4, r5, fp, lr}
   15f1c:	add	fp, sp, #8
   15f20:	ldm	r0, {r5, lr}
   15f24:	mov	ip, r0
   15f28:	mov	r0, #0
   15f2c:	cmp	r5, lr
   15f30:	popcs	{r4, r5, fp, pc}
   15f34:	mov	r0, #0
   15f38:	ldr	r3, [r5]
   15f3c:	cmp	r3, #0
   15f40:	cmpne	r5, #0
   15f44:	beq	15f50 <__assert_fail@plt+0x44b4>
   15f48:	b	15f6c <__assert_fail@plt+0x44d0>
   15f4c:	ldr	lr, [ip, #4]
   15f50:	add	r5, r5, #8
   15f54:	cmp	r5, lr
   15f58:	bcs	15f94 <__assert_fail@plt+0x44f8>
   15f5c:	ldr	r3, [r5]
   15f60:	cmp	r3, #0
   15f64:	cmpne	r5, #0
   15f68:	beq	15f50 <__assert_fail@plt+0x44b4>
   15f6c:	mov	r3, r5
   15f70:	cmp	r0, r2
   15f74:	bcs	15f94 <__assert_fail@plt+0x44f8>
   15f78:	ldr	r4, [r3]
   15f7c:	str	r4, [r1, r0, lsl #2]
   15f80:	add	r0, r0, #1
   15f84:	ldr	r3, [r3, #4]
   15f88:	cmp	r3, #0
   15f8c:	bne	15f70 <__assert_fail@plt+0x44d4>
   15f90:	b	15f4c <__assert_fail@plt+0x44b0>
   15f94:	pop	{r4, r5, fp, pc}
   15f98:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15f9c:	add	fp, sp, #24
   15fa0:	mov	r5, r1
   15fa4:	ldr	r4, [r0]
   15fa8:	ldr	r1, [r0, #4]
   15fac:	mov	r6, #0
   15fb0:	cmp	r4, r1
   15fb4:	bcs	16030 <__assert_fail@plt+0x4594>
   15fb8:	mov	r9, r2
   15fbc:	mov	r8, r0
   15fc0:	mov	r6, #0
   15fc4:	ldr	r0, [r4]
   15fc8:	cmp	r0, #0
   15fcc:	cmpne	r4, #0
   15fd0:	beq	15fdc <__assert_fail@plt+0x4540>
   15fd4:	b	15ff8 <__assert_fail@plt+0x455c>
   15fd8:	ldr	r1, [r8, #4]
   15fdc:	add	r4, r4, #8
   15fe0:	cmp	r4, r1
   15fe4:	bcs	16030 <__assert_fail@plt+0x4594>
   15fe8:	ldr	r0, [r4]
   15fec:	cmp	r0, #0
   15ff0:	cmpne	r4, #0
   15ff4:	beq	15fdc <__assert_fail@plt+0x4540>
   15ff8:	mov	r1, r9
   15ffc:	blx	r5
   16000:	cmp	r0, #0
   16004:	beq	16030 <__assert_fail@plt+0x4594>
   16008:	mov	r7, r4
   1600c:	ldr	r7, [r7, #4]
   16010:	add	r6, r6, #1
   16014:	cmp	r7, #0
   16018:	beq	15fd8 <__assert_fail@plt+0x453c>
   1601c:	ldr	r0, [r7]
   16020:	mov	r1, r9
   16024:	blx	r5
   16028:	cmp	r0, #0
   1602c:	bne	1600c <__assert_fail@plt+0x4570>
   16030:	mov	r0, r6
   16034:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16038:	ldrb	r2, [r0]
   1603c:	cmp	r2, #0
   16040:	moveq	r0, #0
   16044:	bxeq	lr
   16048:	add	r3, r0, #1
   1604c:	mov	r0, #0
   16050:	rsb	r0, r0, r0, lsl #5
   16054:	uxtab	r0, r0, r2
   16058:	udiv	r2, r0, r1
   1605c:	mls	r0, r2, r1, r0
   16060:	ldrb	r2, [r3], #1
   16064:	cmp	r2, #0
   16068:	bne	16050 <__assert_fail@plt+0x45b4>
   1606c:	bx	lr
   16070:	movw	r1, #47592	; 0xb9e8
   16074:	movt	r1, #1
   16078:	vld1.32	{d16-d17}, [r1]!
   1607c:	ldr	r1, [r1]
   16080:	vst1.32	{d16-d17}, [r0]!
   16084:	str	r1, [r0]
   16088:	bx	lr
   1608c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16090:	add	fp, sp, #24
   16094:	movw	r9, #25280	; 0x62c0
   16098:	cmp	r3, #0
   1609c:	movw	r5, #25260	; 0x62ac
   160a0:	mov	r6, r0
   160a4:	mov	r0, #40	; 0x28
   160a8:	mov	r7, r1
   160ac:	movt	r9, #1
   160b0:	movne	r9, r3
   160b4:	cmp	r2, #0
   160b8:	movt	r5, #1
   160bc:	movne	r5, r2
   160c0:	bl	1a940 <lchmod@@Base+0x37d0>
   160c4:	mov	r8, #0
   160c8:	cmp	r0, #0
   160cc:	beq	16294 <__assert_fail@plt+0x47f8>
   160d0:	mov	r4, r0
   160d4:	movw	r0, #47592	; 0xb9e8
   160d8:	cmp	r7, #0
   160dc:	movt	r0, #1
   160e0:	moveq	r7, r0
   160e4:	cmp	r7, r0
   160e8:	str	r7, [r4, #20]
   160ec:	beq	16168 <__assert_fail@plt+0x46cc>
   160f0:	vldr	s2, [pc, #420]	; 1629c <__assert_fail@plt+0x4800>
   160f4:	vldr	s0, [r7, #8]
   160f8:	vcmpe.f32	s0, s2
   160fc:	vmrs	APSR_nzcv, fpscr
   16100:	ble	16214 <__assert_fail@plt+0x4778>
   16104:	vldr	s4, [pc, #404]	; 162a0 <__assert_fail@plt+0x4804>
   16108:	vcmpe.f32	s0, s4
   1610c:	vmrs	APSR_nzcv, fpscr
   16110:	bpl	16214 <__assert_fail@plt+0x4778>
   16114:	vldr	s4, [pc, #392]	; 162a4 <__assert_fail@plt+0x4808>
   16118:	vldr	s6, [r7, #12]
   1611c:	vcmpe.f32	s6, s4
   16120:	vmrs	APSR_nzcv, fpscr
   16124:	ble	16214 <__assert_fail@plt+0x4778>
   16128:	vldr	s4, [r7]
   1612c:	vcmpe.f32	s4, #0.0
   16130:	vmrs	APSR_nzcv, fpscr
   16134:	blt	16214 <__assert_fail@plt+0x4778>
   16138:	vadd.f32	s2, s4, s2
   1613c:	vcmpe.f32	s2, s0
   16140:	vmrs	APSR_nzcv, fpscr
   16144:	bpl	16214 <__assert_fail@plt+0x4778>
   16148:	vldr	s0, [r7, #4]
   1614c:	vmov.f32	s4, #112	; 0x3f800000  1.0
   16150:	vcmpe.f32	s0, s4
   16154:	vmrs	APSR_nzcv, fpscr
   16158:	bhi	16214 <__assert_fail@plt+0x4778>
   1615c:	vcmpe.f32	s2, s0
   16160:	vmrs	APSR_nzcv, fpscr
   16164:	bpl	16214 <__assert_fail@plt+0x4778>
   16168:	ldrb	r0, [r7, #16]
   1616c:	cmp	r0, #0
   16170:	bne	1619c <__assert_fail@plt+0x4700>
   16174:	vmov	s2, r6
   16178:	vldr	s0, [r7, #8]
   1617c:	vldr	s4, [pc, #292]	; 162a8 <__assert_fail@plt+0x480c>
   16180:	vcvt.f32.u32	s2, s2
   16184:	vdiv.f32	s2, s2, s0
   16188:	vcvt.u32.f32	s0, s2
   1618c:	vcmpe.f32	s2, s4
   16190:	vmrs	APSR_nzcv, fpscr
   16194:	bge	16230 <__assert_fail@plt+0x4794>
   16198:	vmov	r6, s0
   1619c:	cmp	r6, #10
   161a0:	movls	r6, #10
   161a4:	orr	r0, r6, #1
   161a8:	cmn	r0, #1
   161ac:	beq	16230 <__assert_fail@plt+0x4794>
   161b0:	ldr	r6, [fp, #8]
   161b4:	mov	r1, #3
   161b8:	cmp	r0, #10
   161bc:	bcc	161f4 <__assert_fail@plt+0x4758>
   161c0:	mov	r1, #3
   161c4:	mov	r3, #9
   161c8:	mov	r2, #12
   161cc:	udiv	r7, r0, r1
   161d0:	mls	r7, r7, r1, r0
   161d4:	cmp	r7, #0
   161d8:	beq	161f4 <__assert_fail@plt+0x4758>
   161dc:	add	r3, r3, r2
   161e0:	add	r2, r2, #8
   161e4:	add	r1, r1, #2
   161e8:	add	r3, r3, #4
   161ec:	cmp	r3, r0
   161f0:	bcc	161cc <__assert_fail@plt+0x4730>
   161f4:	udiv	r2, r0, r1
   161f8:	mls	r1, r2, r1, r0
   161fc:	cmp	r1, #0
   16200:	bne	16228 <__assert_fail@plt+0x478c>
   16204:	add	r0, r0, #2
   16208:	cmn	r0, #1
   1620c:	bne	161b4 <__assert_fail@plt+0x4718>
   16210:	b	16230 <__assert_fail@plt+0x4794>
   16214:	str	r0, [r4, #20]
   16218:	mov	r0, r4
   1621c:	bl	1335c <__assert_fail@plt+0x18c0>
   16220:	mov	r0, r8
   16224:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16228:	cmp	r0, #536870912	; 0x20000000
   1622c:	bcc	16248 <__assert_fail@plt+0x47ac>
   16230:	mov	r0, #0
   16234:	str	r0, [r4, #8]
   16238:	mov	r0, r4
   1623c:	bl	1335c <__assert_fail@plt+0x18c0>
   16240:	mov	r0, r8
   16244:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16248:	cmp	r0, #0
   1624c:	str	r0, [r4, #8]
   16250:	beq	16238 <__assert_fail@plt+0x479c>
   16254:	mov	r1, #8
   16258:	bl	1a8ec <lchmod@@Base+0x377c>
   1625c:	cmp	r0, #0
   16260:	str	r0, [r4]
   16264:	beq	16238 <__assert_fail@plt+0x479c>
   16268:	mov	r1, #0
   1626c:	str	r5, [r4, #24]
   16270:	str	r9, [r4, #28]
   16274:	str	r6, [r4, #32]
   16278:	mov	r8, r4
   1627c:	str	r1, [r4, #36]	; 0x24
   16280:	str	r1, [r4, #12]
   16284:	str	r1, [r4, #16]
   16288:	ldr	r1, [r4, #8]
   1628c:	add	r0, r0, r1, lsl #3
   16290:	str	r0, [r4, #4]
   16294:	mov	r0, r8
   16298:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1629c:	stclcc	12, cr12, [ip, #820]	; 0x334
   162a0:	svccc	0x00666666
   162a4:	svccc	0x008ccccd
   162a8:	svcmi	0x00800000
   162ac:	ror	r2, r0, #3
   162b0:	udiv	r2, r2, r1
   162b4:	mul	r1, r2, r1
   162b8:	rsb	r0, r1, r0, ror #3
   162bc:	bx	lr
   162c0:	sub	r0, r0, r1
   162c4:	clz	r0, r0
   162c8:	lsr	r0, r0, #5
   162cc:	bx	lr
   162d0:	push	{r4, r5, r6, r7, fp, lr}
   162d4:	add	fp, sp, #16
   162d8:	mov	r4, r0
   162dc:	ldr	r5, [r0]
   162e0:	ldr	r0, [r0, #4]
   162e4:	cmp	r5, r0
   162e8:	bcs	16398 <__assert_fail@plt+0x48fc>
   162ec:	mov	r6, #0
   162f0:	ldr	r1, [r5]
   162f4:	cmp	r1, #0
   162f8:	bne	16324 <__assert_fail@plt+0x4888>
   162fc:	b	1630c <__assert_fail@plt+0x4870>
   16300:	str	r6, [r5]
   16304:	str	r6, [r5, #4]
   16308:	ldr	r0, [r4, #4]
   1630c:	add	r5, r5, #8
   16310:	cmp	r5, r0
   16314:	bcs	16398 <__assert_fail@plt+0x48fc>
   16318:	ldr	r1, [r5]
   1631c:	cmp	r1, #0
   16320:	beq	1630c <__assert_fail@plt+0x4870>
   16324:	ldr	r1, [r4, #32]
   16328:	ldr	r7, [r5, #4]
   1632c:	cmp	r1, #0
   16330:	mov	r0, r1
   16334:	movwne	r0, #1
   16338:	cmp	r7, #0
   1633c:	bne	16380 <__assert_fail@plt+0x48e4>
   16340:	cmp	r0, #0
   16344:	beq	16300 <__assert_fail@plt+0x4864>
   16348:	ldr	r0, [r5]
   1634c:	blx	r1
   16350:	b	16300 <__assert_fail@plt+0x4864>
   16354:	str	r6, [r7]
   16358:	cmp	r1, #0
   1635c:	ldr	r2, [r7, #4]
   16360:	ldr	r0, [r4, #36]	; 0x24
   16364:	str	r0, [r7, #4]
   16368:	mov	r0, r1
   1636c:	str	r7, [r4, #36]	; 0x24
   16370:	movwne	r0, #1
   16374:	cmp	r2, #0
   16378:	mov	r7, r2
   1637c:	beq	16340 <__assert_fail@plt+0x48a4>
   16380:	tst	r0, #1
   16384:	beq	16354 <__assert_fail@plt+0x48b8>
   16388:	ldr	r0, [r7]
   1638c:	blx	r1
   16390:	ldr	r1, [r4, #32]
   16394:	b	16354 <__assert_fail@plt+0x48b8>
   16398:	mov	r0, #0
   1639c:	str	r0, [r4, #12]
   163a0:	str	r0, [r4, #16]
   163a4:	pop	{r4, r5, r6, r7, fp, pc}
   163a8:	push	{r4, r5, r6, sl, fp, lr}
   163ac:	add	fp, sp, #16
   163b0:	mov	r4, r0
   163b4:	ldr	r0, [r0, #32]
   163b8:	cmp	r0, #0
   163bc:	beq	16430 <__assert_fail@plt+0x4994>
   163c0:	ldr	r0, [r4, #16]
   163c4:	cmp	r0, #0
   163c8:	beq	16430 <__assert_fail@plt+0x4994>
   163cc:	ldr	r5, [r4]
   163d0:	ldr	r1, [r4, #4]
   163d4:	cmp	r5, r1
   163d8:	bcc	163f0 <__assert_fail@plt+0x4954>
   163dc:	b	16430 <__assert_fail@plt+0x4994>
   163e0:	ldr	r1, [r4, #4]
   163e4:	add	r5, r5, #8
   163e8:	cmp	r5, r1
   163ec:	bcs	16430 <__assert_fail@plt+0x4994>
   163f0:	ldr	r0, [r5]
   163f4:	cmp	r0, #0
   163f8:	cmpne	r5, #0
   163fc:	beq	163e4 <__assert_fail@plt+0x4948>
   16400:	ldr	r1, [r4, #32]
   16404:	blx	r1
   16408:	ldr	r6, [r5, #4]
   1640c:	cmp	r6, #0
   16410:	beq	163e0 <__assert_fail@plt+0x4944>
   16414:	ldr	r1, [r4, #32]
   16418:	ldr	r0, [r6]
   1641c:	blx	r1
   16420:	ldr	r6, [r6, #4]
   16424:	cmp	r6, #0
   16428:	bne	16414 <__assert_fail@plt+0x4978>
   1642c:	b	163e0 <__assert_fail@plt+0x4944>
   16430:	ldr	r5, [r4]
   16434:	ldr	r1, [r4, #4]
   16438:	cmp	r5, r1
   1643c:	bcc	16450 <__assert_fail@plt+0x49b4>
   16440:	b	16478 <__assert_fail@plt+0x49dc>
   16444:	add	r5, r5, #8
   16448:	cmp	r5, r1
   1644c:	bcs	16478 <__assert_fail@plt+0x49dc>
   16450:	ldr	r0, [r5, #4]
   16454:	cmp	r0, #0
   16458:	beq	16444 <__assert_fail@plt+0x49a8>
   1645c:	ldr	r6, [r0, #4]
   16460:	bl	1335c <__assert_fail@plt+0x18c0>
   16464:	cmp	r6, #0
   16468:	mov	r0, r6
   1646c:	bne	1645c <__assert_fail@plt+0x49c0>
   16470:	ldr	r1, [r4, #4]
   16474:	b	16444 <__assert_fail@plt+0x49a8>
   16478:	ldr	r0, [r4, #36]	; 0x24
   1647c:	cmp	r0, #0
   16480:	beq	16498 <__assert_fail@plt+0x49fc>
   16484:	ldr	r5, [r0, #4]
   16488:	bl	1335c <__assert_fail@plt+0x18c0>
   1648c:	cmp	r5, #0
   16490:	mov	r0, r5
   16494:	bne	16484 <__assert_fail@plt+0x49e8>
   16498:	ldr	r0, [r4]
   1649c:	bl	1335c <__assert_fail@plt+0x18c0>
   164a0:	mov	r0, r4
   164a4:	pop	{r4, r5, r6, sl, fp, lr}
   164a8:	b	1335c <__assert_fail@plt+0x18c0>
   164ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164b0:	add	fp, sp, #28
   164b4:	sub	sp, sp, #44	; 0x2c
   164b8:	mov	r7, r0
   164bc:	mov	r4, r0
   164c0:	ldr	r0, [r7, #20]!
   164c4:	ldrb	r2, [r0, #16]
   164c8:	cmp	r2, #0
   164cc:	bne	164fc <__assert_fail@plt+0x4a60>
   164d0:	vmov	s2, r1
   164d4:	vldr	s0, [r0, #8]
   164d8:	vldr	s4, [pc, #592]	; 16730 <__assert_fail@plt+0x4c94>
   164dc:	mov	r5, #0
   164e0:	vcvt.f32.u32	s2, s2
   164e4:	vdiv.f32	s2, s2, s0
   164e8:	vcvt.u32.f32	s0, s2
   164ec:	vcmpe.f32	s2, s4
   164f0:	vmrs	APSR_nzcv, fpscr
   164f4:	bge	16620 <__assert_fail@plt+0x4b84>
   164f8:	vmov	r1, s0
   164fc:	cmp	r1, #10
   16500:	mov	r5, #0
   16504:	movls	r1, #10
   16508:	orr	r6, r1, #1
   1650c:	cmn	r6, #1
   16510:	beq	16620 <__assert_fail@plt+0x4b84>
   16514:	mov	r0, #3
   16518:	cmp	r6, #10
   1651c:	bcc	16554 <__assert_fail@plt+0x4ab8>
   16520:	mov	r0, #3
   16524:	mov	r2, #9
   16528:	mov	r1, #12
   1652c:	udiv	r3, r6, r0
   16530:	mls	r3, r3, r0, r6
   16534:	cmp	r3, #0
   16538:	beq	16554 <__assert_fail@plt+0x4ab8>
   1653c:	add	r2, r2, r1
   16540:	add	r1, r1, #8
   16544:	add	r0, r0, #2
   16548:	add	r2, r2, #4
   1654c:	cmp	r2, r6
   16550:	bcc	1652c <__assert_fail@plt+0x4a90>
   16554:	udiv	r1, r6, r0
   16558:	mls	r0, r1, r0, r6
   1655c:	cmp	r0, #0
   16560:	bne	16574 <__assert_fail@plt+0x4ad8>
   16564:	add	r6, r6, #2
   16568:	cmn	r6, #1
   1656c:	bne	16514 <__assert_fail@plt+0x4a78>
   16570:	b	16620 <__assert_fail@plt+0x4b84>
   16574:	sub	r0, r6, #1
   16578:	cmn	r0, #-536870910	; 0xe0000002
   1657c:	bhi	16620 <__assert_fail@plt+0x4b84>
   16580:	ldr	r0, [r4, #8]
   16584:	cmp	r6, r0
   16588:	bne	1659c <__assert_fail@plt+0x4b00>
   1658c:	mov	r5, #1
   16590:	mov	r0, r5
   16594:	sub	sp, fp, #28
   16598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1659c:	mov	r0, r6
   165a0:	mov	r1, #8
   165a4:	bl	1a8ec <lchmod@@Base+0x377c>
   165a8:	cmp	r0, #0
   165ac:	str	r0, [sp, #4]
   165b0:	beq	16620 <__assert_fail@plt+0x4b84>
   165b4:	add	r0, r0, r6, lsl #3
   165b8:	mov	r1, #0
   165bc:	add	r5, sp, #4
   165c0:	mov	sl, r4
   165c4:	mov	r2, #0
   165c8:	str	r1, [sp, #20]
   165cc:	str	r1, [sp, #16]
   165d0:	str	r6, [sp, #12]
   165d4:	mov	r1, r4
   165d8:	str	r0, [sp, #8]
   165dc:	add	r0, r5, #20
   165e0:	vld1.32	{d16-d17}, [r7]
   165e4:	vst1.32	{d16-d17}, [r0]
   165e8:	ldr	r0, [sl, #36]!	; 0x24
   165ec:	str	r0, [sp, #40]	; 0x28
   165f0:	mov	r0, r5
   165f4:	bl	16734 <__assert_fail@plt+0x4c98>
   165f8:	cmp	r0, #0
   165fc:	beq	1662c <__assert_fail@plt+0x4b90>
   16600:	ldr	r0, [r4]
   16604:	bl	1335c <__assert_fail@plt+0x18c0>
   16608:	mov	r0, #36	; 0x24
   1660c:	vld1.32	{d16-d17}, [r5], r0
   16610:	vst1.32	{d16-d17}, [r4], r0
   16614:	ldr	r0, [r5]
   16618:	mov	r5, #1
   1661c:	str	r0, [r4]
   16620:	mov	r0, r5
   16624:	sub	sp, fp, #28
   16628:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1662c:	ldr	r0, [sp, #40]	; 0x28
   16630:	str	r0, [sl]
   16634:	ldr	r0, [sp, #8]
   16638:	ldr	r8, [sp, #4]
   1663c:	cmp	r8, r0
   16640:	str	r0, [sp]
   16644:	bcs	166fc <__assert_fail@plt+0x4c60>
   16648:	mov	r9, #0
   1664c:	ldr	r0, [r8]
   16650:	cmp	r0, #0
   16654:	bne	1667c <__assert_fail@plt+0x4be0>
   16658:	b	16660 <__assert_fail@plt+0x4bc4>
   1665c:	str	r9, [r8, #4]
   16660:	ldr	r0, [sp]
   16664:	add	r8, r8, #8
   16668:	cmp	r8, r0
   1666c:	bcs	166fc <__assert_fail@plt+0x4c60>
   16670:	ldr	r0, [r8]
   16674:	cmp	r0, #0
   16678:	beq	16660 <__assert_fail@plt+0x4bc4>
   1667c:	ldr	r6, [r8, #4]
   16680:	cmp	r6, #0
   16684:	beq	1665c <__assert_fail@plt+0x4bc0>
   16688:	ldr	r1, [r4, #8]
   1668c:	b	166b0 <__assert_fail@plt+0x4c14>
   16690:	add	r0, r3, r0, lsl #3
   16694:	add	r0, r0, #4
   16698:	ldr	r3, [r0]
   1669c:	cmp	r2, #0
   166a0:	str	r3, [r6, #4]
   166a4:	str	r6, [r0]
   166a8:	mov	r6, r2
   166ac:	beq	1665c <__assert_fail@plt+0x4bc0>
   166b0:	ldr	r5, [r6]
   166b4:	ldr	r2, [r4, #24]
   166b8:	mov	r0, r5
   166bc:	blx	r2
   166c0:	ldr	r1, [r4, #8]
   166c4:	cmp	r0, r1
   166c8:	bcs	1672c <__assert_fail@plt+0x4c90>
   166cc:	ldr	r3, [r4]
   166d0:	ldr	r2, [r6, #4]
   166d4:	ldr	r7, [r3, r0, lsl #3]
   166d8:	cmp	r7, #0
   166dc:	bne	16690 <__assert_fail@plt+0x4bf4>
   166e0:	str	r5, [r3, r0, lsl #3]
   166e4:	ldr	r0, [r4, #12]
   166e8:	add	r0, r0, #1
   166ec:	str	r0, [r4, #12]
   166f0:	mov	r0, sl
   166f4:	str	r9, [r6]
   166f8:	b	16698 <__assert_fail@plt+0x4bfc>
   166fc:	add	r1, sp, #4
   16700:	mov	r0, r4
   16704:	mov	r2, #0
   16708:	mov	r5, #0
   1670c:	bl	16734 <__assert_fail@plt+0x4c98>
   16710:	cmp	r0, #0
   16714:	beq	1672c <__assert_fail@plt+0x4c90>
   16718:	ldr	r0, [sp, #4]
   1671c:	bl	1335c <__assert_fail@plt+0x18c0>
   16720:	mov	r0, r5
   16724:	sub	sp, fp, #28
   16728:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1672c:	bl	11a3c <abort@plt>
   16730:	svcmi	0x00800000
   16734:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16738:	add	fp, sp, #28
   1673c:	sub	sp, sp, #4
   16740:	ldr	r8, [r1]
   16744:	ldr	r3, [r1, #4]
   16748:	mov	r6, r0
   1674c:	mov	r0, #1
   16750:	str	r1, [sp]
   16754:	cmp	r8, r3
   16758:	bcs	1696c <__assert_fail@plt+0x4ed0>
   1675c:	add	sl, r6, #36	; 0x24
   16760:	cmp	r2, #0
   16764:	beq	16820 <__assert_fail@plt+0x4d84>
   16768:	mov	r9, #0
   1676c:	ldr	r1, [r8]
   16770:	cmp	r1, #0
   16774:	bne	167a0 <__assert_fail@plt+0x4d04>
   16778:	b	16788 <__assert_fail@plt+0x4cec>
   1677c:	ldr	r0, [sp]
   16780:	ldr	r3, [r0, #4]
   16784:	str	r9, [r8, #4]
   16788:	add	r8, r8, #8
   1678c:	cmp	r8, r3
   16790:	bcs	16968 <__assert_fail@plt+0x4ecc>
   16794:	ldr	r1, [r8]
   16798:	cmp	r1, #0
   1679c:	beq	16788 <__assert_fail@plt+0x4cec>
   167a0:	ldr	r7, [r8, #4]
   167a4:	cmp	r7, #0
   167a8:	beq	16784 <__assert_fail@plt+0x4ce8>
   167ac:	ldr	r1, [r6, #8]
   167b0:	b	167e4 <__assert_fail@plt+0x4d48>
   167b4:	str	r4, [r3, r0, lsl #3]
   167b8:	ldr	r0, [r6, #12]
   167bc:	add	r0, r0, #1
   167c0:	str	r0, [r6, #12]
   167c4:	mov	r0, sl
   167c8:	str	r9, [r7]
   167cc:	ldr	r3, [r0]
   167d0:	cmp	r2, #0
   167d4:	str	r3, [r7, #4]
   167d8:	str	r7, [r0]
   167dc:	mov	r7, r2
   167e0:	beq	1677c <__assert_fail@plt+0x4ce0>
   167e4:	ldr	r4, [r7]
   167e8:	ldr	r2, [r6, #24]
   167ec:	mov	r0, r4
   167f0:	blx	r2
   167f4:	ldr	r1, [r6, #8]
   167f8:	cmp	r0, r1
   167fc:	bcs	16980 <__assert_fail@plt+0x4ee4>
   16800:	ldr	r3, [r6]
   16804:	ldr	r2, [r7, #4]
   16808:	ldr	r5, [r3, r0, lsl #3]
   1680c:	cmp	r5, #0
   16810:	beq	167b4 <__assert_fail@plt+0x4d18>
   16814:	add	r0, r3, r0, lsl #3
   16818:	add	r0, r0, #4
   1681c:	b	167cc <__assert_fail@plt+0x4d30>
   16820:	mov	r5, #0
   16824:	ldr	r7, [r8]
   16828:	cmp	r7, #0
   1682c:	bne	16874 <__assert_fail@plt+0x4dd8>
   16830:	b	1685c <__assert_fail@plt+0x4dc0>
   16834:	str	r7, [r9, r4, lsl #3]
   16838:	ldr	r0, [r6, #12]
   1683c:	add	r0, r0, #1
   16840:	str	r0, [r6, #12]
   16844:	ldr	r0, [sp]
   16848:	str	r5, [r8]
   1684c:	ldr	r1, [r0, #12]
   16850:	ldr	r3, [r0, #4]
   16854:	sub	r1, r1, #1
   16858:	str	r1, [r0, #12]
   1685c:	add	r8, r8, #8
   16860:	cmp	r8, r3
   16864:	bcs	16968 <__assert_fail@plt+0x4ecc>
   16868:	ldr	r7, [r8]
   1686c:	cmp	r7, #0
   16870:	beq	1685c <__assert_fail@plt+0x4dc0>
   16874:	ldr	r9, [r8, #4]
   16878:	ldr	r1, [r6, #8]
   1687c:	cmp	r9, #0
   16880:	bne	168a8 <__assert_fail@plt+0x4e0c>
   16884:	b	168f8 <__assert_fail@plt+0x4e5c>
   16888:	add	r0, r3, r0, lsl #3
   1688c:	add	r0, r0, #4
   16890:	ldr	r3, [r0]
   16894:	cmp	r2, #0
   16898:	str	r3, [r9, #4]
   1689c:	str	r9, [r0]
   168a0:	mov	r9, r2
   168a4:	beq	168f4 <__assert_fail@plt+0x4e58>
   168a8:	ldr	r4, [r9]
   168ac:	ldr	r2, [r6, #24]
   168b0:	mov	r0, r4
   168b4:	blx	r2
   168b8:	ldr	r1, [r6, #8]
   168bc:	cmp	r0, r1
   168c0:	bcs	16980 <__assert_fail@plt+0x4ee4>
   168c4:	ldr	r3, [r6]
   168c8:	ldr	r2, [r9, #4]
   168cc:	ldr	r7, [r3, r0, lsl #3]
   168d0:	cmp	r7, #0
   168d4:	bne	16888 <__assert_fail@plt+0x4dec>
   168d8:	str	r4, [r3, r0, lsl #3]
   168dc:	ldr	r0, [r6, #12]
   168e0:	add	r0, r0, #1
   168e4:	str	r0, [r6, #12]
   168e8:	mov	r0, sl
   168ec:	str	r5, [r9]
   168f0:	b	16890 <__assert_fail@plt+0x4df4>
   168f4:	ldr	r7, [r8]
   168f8:	str	r5, [r8, #4]
   168fc:	mov	r0, r7
   16900:	ldr	r2, [r6, #24]
   16904:	blx	r2
   16908:	mov	r4, r0
   1690c:	ldr	r0, [r6, #8]
   16910:	cmp	r4, r0
   16914:	bcs	16980 <__assert_fail@plt+0x4ee4>
   16918:	ldr	r9, [r6]
   1691c:	ldr	r0, [r9, r4, lsl #3]
   16920:	cmp	r0, #0
   16924:	beq	16834 <__assert_fail@plt+0x4d98>
   16928:	ldr	r0, [sl]
   1692c:	cmp	r0, #0
   16930:	beq	16940 <__assert_fail@plt+0x4ea4>
   16934:	ldr	r1, [r0, #4]
   16938:	str	r1, [sl]
   1693c:	b	16950 <__assert_fail@plt+0x4eb4>
   16940:	mov	r0, #8
   16944:	bl	1a940 <lchmod@@Base+0x37d0>
   16948:	cmp	r0, #0
   1694c:	beq	16974 <__assert_fail@plt+0x4ed8>
   16950:	add	r1, r9, r4, lsl #3
   16954:	str	r7, [r0]
   16958:	ldr	r2, [r1, #4]
   1695c:	str	r2, [r0, #4]
   16960:	str	r0, [r1, #4]
   16964:	b	16844 <__assert_fail@plt+0x4da8>
   16968:	mov	r0, #1
   1696c:	sub	sp, fp, #28
   16970:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16974:	mov	r0, #0
   16978:	sub	sp, fp, #28
   1697c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16980:	bl	11a3c <abort@plt>
   16984:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16988:	add	fp, sp, #28
   1698c:	sub	sp, sp, #4
   16990:	cmp	r1, #0
   16994:	beq	16cd0 <__assert_fail@plt+0x5234>
   16998:	mov	r8, r2
   1699c:	mov	sl, r1
   169a0:	ldr	r1, [r0, #8]
   169a4:	ldr	r2, [r0, #24]
   169a8:	mov	r4, r0
   169ac:	mov	r0, sl
   169b0:	blx	r2
   169b4:	mov	r7, r0
   169b8:	ldr	r0, [r4, #8]
   169bc:	cmp	r7, r0
   169c0:	bcs	16cd0 <__assert_fail@plt+0x5234>
   169c4:	ldr	r5, [r4]
   169c8:	mov	r9, r5
   169cc:	ldr	r1, [r9, r7, lsl #3]!
   169d0:	cmp	r1, #0
   169d4:	beq	16a68 <__assert_fail@plt+0x4fcc>
   169d8:	cmp	r1, sl
   169dc:	beq	16a08 <__assert_fail@plt+0x4f6c>
   169e0:	ldr	r2, [r4, #28]
   169e4:	mov	r0, sl
   169e8:	blx	r2
   169ec:	cmp	r0, #0
   169f0:	mov	r6, r9
   169f4:	beq	16a24 <__assert_fail@plt+0x4f88>
   169f8:	ldr	r0, [r6]
   169fc:	cmp	r0, #0
   16a00:	bne	16a0c <__assert_fail@plt+0x4f70>
   16a04:	b	16a68 <__assert_fail@plt+0x4fcc>
   16a08:	mov	r0, sl
   16a0c:	cmp	r8, #0
   16a10:	mov	r7, #0
   16a14:	strne	r0, [r8]
   16a18:	mov	r0, r7
   16a1c:	sub	sp, fp, #28
   16a20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a24:	add	r6, r5, r7, lsl #3
   16a28:	ldr	r0, [r6, #4]!
   16a2c:	cmp	r0, #0
   16a30:	beq	16a68 <__assert_fail@plt+0x4fcc>
   16a34:	ldr	r1, [r0]
   16a38:	cmp	r1, sl
   16a3c:	beq	16a5c <__assert_fail@plt+0x4fc0>
   16a40:	ldr	r2, [r4, #28]
   16a44:	mov	r0, sl
   16a48:	blx	r2
   16a4c:	ldr	r6, [r6]
   16a50:	cmp	r0, #0
   16a54:	beq	16a28 <__assert_fail@plt+0x4f8c>
   16a58:	b	169f8 <__assert_fail@plt+0x4f5c>
   16a5c:	mov	r0, sl
   16a60:	cmp	r0, #0
   16a64:	bne	16a0c <__assert_fail@plt+0x4f70>
   16a68:	vldr	s0, [r4, #8]
   16a6c:	vldr	s2, [r4, #12]
   16a70:	ldr	r0, [r4, #20]
   16a74:	vcvt.f32.u32	s0, s0
   16a78:	vcvt.f32.u32	s4, s2
   16a7c:	vldr	s2, [r0, #8]
   16a80:	vmul.f32	s6, s2, s0
   16a84:	vcmpe.f32	s6, s4
   16a88:	vmrs	APSR_nzcv, fpscr
   16a8c:	bpl	16bf0 <__assert_fail@plt+0x5154>
   16a90:	movw	r1, #47592	; 0xb9e8
   16a94:	movt	r1, #1
   16a98:	cmp	r0, r1
   16a9c:	beq	16b38 <__assert_fail@plt+0x509c>
   16aa0:	vldr	s6, [pc, #556]	; 16cd4 <__assert_fail@plt+0x5238>
   16aa4:	vcmpe.f32	s2, s6
   16aa8:	vmrs	APSR_nzcv, fpscr
   16aac:	ble	16b14 <__assert_fail@plt+0x5078>
   16ab0:	vldr	s8, [pc, #544]	; 16cd8 <__assert_fail@plt+0x523c>
   16ab4:	vcmpe.f32	s2, s8
   16ab8:	vmrs	APSR_nzcv, fpscr
   16abc:	bpl	16b14 <__assert_fail@plt+0x5078>
   16ac0:	vldr	s8, [pc, #532]	; 16cdc <__assert_fail@plt+0x5240>
   16ac4:	vldr	s10, [r0, #12]
   16ac8:	vcmpe.f32	s10, s8
   16acc:	vmrs	APSR_nzcv, fpscr
   16ad0:	ble	16b14 <__assert_fail@plt+0x5078>
   16ad4:	vldr	s8, [r0]
   16ad8:	vcmpe.f32	s8, #0.0
   16adc:	vmrs	APSR_nzcv, fpscr
   16ae0:	blt	16b14 <__assert_fail@plt+0x5078>
   16ae4:	vadd.f32	s6, s8, s6
   16ae8:	vcmpe.f32	s6, s2
   16aec:	vmrs	APSR_nzcv, fpscr
   16af0:	bpl	16b14 <__assert_fail@plt+0x5078>
   16af4:	vldr	s8, [r0, #4]
   16af8:	vmov.f32	s10, #112	; 0x3f800000  1.0
   16afc:	vcmpe.f32	s8, s10
   16b00:	vmrs	APSR_nzcv, fpscr
   16b04:	bhi	16b14 <__assert_fail@plt+0x5078>
   16b08:	vcmpe.f32	s6, s8
   16b0c:	vmrs	APSR_nzcv, fpscr
   16b10:	bmi	16b24 <__assert_fail@plt+0x5088>
   16b14:	vldr	s2, [pc, #452]	; 16ce0 <__assert_fail@plt+0x5244>
   16b18:	movw	r0, #47592	; 0xb9e8
   16b1c:	movt	r0, #1
   16b20:	str	r0, [r4, #20]
   16b24:	vmul.f32	s6, s2, s0
   16b28:	vcmpe.f32	s6, s4
   16b2c:	vmrs	APSR_nzcv, fpscr
   16b30:	bmi	16b4c <__assert_fail@plt+0x50b0>
   16b34:	b	16bf0 <__assert_fail@plt+0x5154>
   16b38:	mov	r0, r1
   16b3c:	vmul.f32	s6, s2, s0
   16b40:	vcmpe.f32	s6, s4
   16b44:	vmrs	APSR_nzcv, fpscr
   16b48:	bpl	16bf0 <__assert_fail@plt+0x5154>
   16b4c:	vldr	s4, [r0, #12]
   16b50:	ldrb	r0, [r0, #16]
   16b54:	mvn	r7, #0
   16b58:	cmp	r0, #0
   16b5c:	vmul.f32	s0, s4, s0
   16b60:	vldr	s4, [pc, #380]	; 16ce4 <__assert_fail@plt+0x5248>
   16b64:	vmul.f32	s2, s2, s0
   16b68:	vseleq.f32	s0, s2, s0
   16b6c:	vcmpe.f32	s0, s4
   16b70:	vmrs	APSR_nzcv, fpscr
   16b74:	bge	16c64 <__assert_fail@plt+0x51c8>
   16b78:	vcvt.u32.f32	s0, s0
   16b7c:	mov	r0, r4
   16b80:	vmov	r1, s0
   16b84:	bl	164ac <__assert_fail@plt+0x4a10>
   16b88:	cmp	r0, #0
   16b8c:	beq	16c64 <__assert_fail@plt+0x51c8>
   16b90:	ldr	r1, [r4, #8]
   16b94:	ldr	r2, [r4, #24]
   16b98:	mov	r0, sl
   16b9c:	blx	r2
   16ba0:	mov	r7, r0
   16ba4:	ldr	r0, [r4, #8]
   16ba8:	cmp	r7, r0
   16bac:	bcs	16cd0 <__assert_fail@plt+0x5234>
   16bb0:	ldr	r5, [r4]
   16bb4:	mov	r9, r5
   16bb8:	ldr	r1, [r9, r7, lsl #3]!
   16bbc:	cmp	r1, #0
   16bc0:	beq	16bf0 <__assert_fail@plt+0x5154>
   16bc4:	cmp	r1, sl
   16bc8:	mov	r0, sl
   16bcc:	beq	16be8 <__assert_fail@plt+0x514c>
   16bd0:	ldr	r2, [r4, #28]
   16bd4:	mov	r0, sl
   16bd8:	blx	r2
   16bdc:	cmp	r0, #0
   16be0:	beq	16c80 <__assert_fail@plt+0x51e4>
   16be4:	ldr	r0, [r9]
   16be8:	cmp	r0, #0
   16bec:	bne	16cd0 <__assert_fail@plt+0x5234>
   16bf0:	ldr	r0, [r9]
   16bf4:	cmp	r0, #0
   16bf8:	beq	16c14 <__assert_fail@plt+0x5178>
   16bfc:	ldr	r0, [r4, #36]	; 0x24
   16c00:	cmp	r0, #0
   16c04:	beq	16c34 <__assert_fail@plt+0x5198>
   16c08:	ldr	r1, [r0, #4]
   16c0c:	str	r1, [r4, #36]	; 0x24
   16c10:	b	16c44 <__assert_fail@plt+0x51a8>
   16c14:	str	sl, [r9]
   16c18:	ldr	r0, [r4, #12]
   16c1c:	ldr	r1, [r4, #16]
   16c20:	add	r0, r0, #1
   16c24:	add	r1, r1, #1
   16c28:	str	r0, [r4, #12]
   16c2c:	str	r1, [r4, #16]
   16c30:	b	16c60 <__assert_fail@plt+0x51c4>
   16c34:	mov	r0, #8
   16c38:	bl	1a940 <lchmod@@Base+0x37d0>
   16c3c:	cmp	r0, #0
   16c40:	beq	16c70 <__assert_fail@plt+0x51d4>
   16c44:	str	sl, [r0]
   16c48:	ldr	r1, [r9, #4]
   16c4c:	str	r1, [r0, #4]
   16c50:	str	r0, [r9, #4]
   16c54:	ldr	r0, [r4, #16]
   16c58:	add	r0, r0, #1
   16c5c:	str	r0, [r4, #16]
   16c60:	mov	r7, #1
   16c64:	mov	r0, r7
   16c68:	sub	sp, fp, #28
   16c6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c70:	mvn	r7, #0
   16c74:	mov	r0, r7
   16c78:	sub	sp, fp, #28
   16c7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c80:	add	r6, r5, r7, lsl #3
   16c84:	ldr	r0, [r6, #4]!
   16c88:	cmp	r0, #0
   16c8c:	beq	16bf0 <__assert_fail@plt+0x5154>
   16c90:	ldr	r1, [r0]
   16c94:	cmp	r1, sl
   16c98:	beq	16cc4 <__assert_fail@plt+0x5228>
   16c9c:	ldr	r2, [r4, #28]
   16ca0:	mov	r0, sl
   16ca4:	blx	r2
   16ca8:	ldr	r6, [r6]
   16cac:	cmp	r0, #0
   16cb0:	beq	16c84 <__assert_fail@plt+0x51e8>
   16cb4:	ldr	r0, [r6]
   16cb8:	cmp	r0, #0
   16cbc:	beq	16bf0 <__assert_fail@plt+0x5154>
   16cc0:	b	16cd0 <__assert_fail@plt+0x5234>
   16cc4:	mov	r0, sl
   16cc8:	cmp	r0, #0
   16ccc:	beq	16bf0 <__assert_fail@plt+0x5154>
   16cd0:	bl	11a3c <abort@plt>
   16cd4:	stclcc	12, cr12, [ip, #820]	; 0x334
   16cd8:	svccc	0x00666666
   16cdc:	svccc	0x008ccccd
   16ce0:	svccc	0x004ccccd
   16ce4:	svcmi	0x00800000
   16ce8:	push	{r4, sl, fp, lr}
   16cec:	add	fp, sp, #8
   16cf0:	sub	sp, sp, #8
   16cf4:	add	r2, sp, #4
   16cf8:	mov	r4, r1
   16cfc:	bl	16984 <__assert_fail@plt+0x4ee8>
   16d00:	cmn	r0, #1
   16d04:	beq	16d20 <__assert_fail@plt+0x5284>
   16d08:	ldr	r1, [sp, #4]
   16d0c:	cmp	r0, #0
   16d10:	moveq	r4, r1
   16d14:	mov	r0, r4
   16d18:	sub	sp, fp, #8
   16d1c:	pop	{r4, sl, fp, pc}
   16d20:	mov	r4, #0
   16d24:	mov	r0, r4
   16d28:	sub	sp, fp, #8
   16d2c:	pop	{r4, sl, fp, pc}
   16d30:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16d34:	add	fp, sp, #24
   16d38:	mov	r9, r1
   16d3c:	ldr	r1, [r0, #8]
   16d40:	ldr	r2, [r0, #24]
   16d44:	mov	r5, r0
   16d48:	mov	r0, r9
   16d4c:	blx	r2
   16d50:	mov	r7, r0
   16d54:	ldr	r0, [r5, #8]
   16d58:	cmp	r7, r0
   16d5c:	bcs	16fd0 <__assert_fail@plt+0x5534>
   16d60:	ldr	r6, [r5]
   16d64:	mov	r8, #0
   16d68:	mov	r4, r6
   16d6c:	ldr	r1, [r4, r7, lsl #3]!
   16d70:	cmp	r1, #0
   16d74:	beq	16e28 <__assert_fail@plt+0x538c>
   16d78:	cmp	r1, r9
   16d7c:	beq	16d98 <__assert_fail@plt+0x52fc>
   16d80:	ldr	r2, [r5, #28]
   16d84:	mov	r0, r9
   16d88:	blx	r2
   16d8c:	cmp	r0, #0
   16d90:	beq	16dd0 <__assert_fail@plt+0x5334>
   16d94:	ldr	r9, [r4]
   16d98:	add	r0, r6, r7, lsl #3
   16d9c:	ldr	r0, [r0, #4]
   16da0:	cmp	r0, #0
   16da4:	beq	16e18 <__assert_fail@plt+0x537c>
   16da8:	ldm	r0, {r1, r2}
   16dac:	stm	r4, {r1, r2}
   16db0:	mov	r1, #0
   16db4:	str	r1, [r0]
   16db8:	ldr	r1, [r5, #36]	; 0x24
   16dbc:	str	r1, [r0, #4]
   16dc0:	str	r0, [r5, #36]	; 0x24
   16dc4:	cmp	r9, #0
   16dc8:	bne	16e60 <__assert_fail@plt+0x53c4>
   16dcc:	b	16e28 <__assert_fail@plt+0x538c>
   16dd0:	add	r7, r6, r7, lsl #3
   16dd4:	ldr	r0, [r7, #4]!
   16dd8:	cmp	r0, #0
   16ddc:	beq	16e28 <__assert_fail@plt+0x538c>
   16de0:	ldr	r1, [r0]
   16de4:	cmp	r1, r9
   16de8:	beq	16e30 <__assert_fail@plt+0x5394>
   16dec:	ldr	r2, [r5, #28]
   16df0:	mov	r0, r9
   16df4:	blx	r2
   16df8:	ldr	r1, [r7]
   16dfc:	cmp	r0, #0
   16e00:	bne	16e38 <__assert_fail@plt+0x539c>
   16e04:	ldr	r0, [r1, #4]!
   16e08:	mov	r7, r1
   16e0c:	cmp	r0, #0
   16e10:	bne	16de0 <__assert_fail@plt+0x5344>
   16e14:	b	16e28 <__assert_fail@plt+0x538c>
   16e18:	mov	r0, #0
   16e1c:	str	r0, [r4]
   16e20:	cmp	r9, #0
   16e24:	bne	16e60 <__assert_fail@plt+0x53c4>
   16e28:	mov	r0, r8
   16e2c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16e30:	mov	r1, r0
   16e34:	b	16e3c <__assert_fail@plt+0x53a0>
   16e38:	ldr	r9, [r1]
   16e3c:	ldr	r0, [r1, #4]
   16e40:	str	r0, [r7]
   16e44:	mov	r0, #0
   16e48:	str	r0, [r1]
   16e4c:	ldr	r0, [r5, #36]	; 0x24
   16e50:	str	r0, [r1, #4]
   16e54:	str	r1, [r5, #36]	; 0x24
   16e58:	cmp	r9, #0
   16e5c:	beq	16e28 <__assert_fail@plt+0x538c>
   16e60:	ldr	r0, [r5, #16]
   16e64:	sub	r0, r0, #1
   16e68:	str	r0, [r5, #16]
   16e6c:	ldr	r0, [r4]
   16e70:	cmp	r0, #0
   16e74:	bne	16fc4 <__assert_fail@plt+0x5528>
   16e78:	ldr	r0, [r5, #12]
   16e7c:	vldr	s0, [r5, #8]
   16e80:	sub	r1, r0, #1
   16e84:	str	r1, [r5, #12]
   16e88:	vmov	s2, r1
   16e8c:	ldr	r0, [r5, #20]
   16e90:	vcvt.f32.u32	s0, s0
   16e94:	vcvt.f32.u32	s2, s2
   16e98:	vldr	s4, [r0]
   16e9c:	vmul.f32	s6, s4, s0
   16ea0:	vcmpe.f32	s6, s2
   16ea4:	vmrs	APSR_nzcv, fpscr
   16ea8:	ble	16fc4 <__assert_fail@plt+0x5528>
   16eac:	movw	r1, #47592	; 0xb9e8
   16eb0:	movt	r1, #1
   16eb4:	cmp	r0, r1
   16eb8:	beq	16f54 <__assert_fail@plt+0x54b8>
   16ebc:	vldr	s8, [pc, #272]	; 16fd4 <__assert_fail@plt+0x5538>
   16ec0:	vldr	s6, [r0, #8]
   16ec4:	vcmpe.f32	s6, s8
   16ec8:	vmrs	APSR_nzcv, fpscr
   16ecc:	ble	16f30 <__assert_fail@plt+0x5494>
   16ed0:	vldr	s10, [pc, #256]	; 16fd8 <__assert_fail@plt+0x553c>
   16ed4:	vcmpe.f32	s6, s10
   16ed8:	vmrs	APSR_nzcv, fpscr
   16edc:	bpl	16f30 <__assert_fail@plt+0x5494>
   16ee0:	vcmpe.f32	s4, #0.0
   16ee4:	vmrs	APSR_nzcv, fpscr
   16ee8:	blt	16f30 <__assert_fail@plt+0x5494>
   16eec:	vldr	s10, [r0, #12]
   16ef0:	vldr	s12, [pc, #228]	; 16fdc <__assert_fail@plt+0x5540>
   16ef4:	vcmpe.f32	s10, s12
   16ef8:	vmrs	APSR_nzcv, fpscr
   16efc:	ble	16f30 <__assert_fail@plt+0x5494>
   16f00:	vadd.f32	s8, s4, s8
   16f04:	vcmpe.f32	s8, s6
   16f08:	vmrs	APSR_nzcv, fpscr
   16f0c:	bpl	16f30 <__assert_fail@plt+0x5494>
   16f10:	vldr	s6, [r0, #4]
   16f14:	vmov.f32	s10, #112	; 0x3f800000  1.0
   16f18:	vcmpe.f32	s6, s10
   16f1c:	vmrs	APSR_nzcv, fpscr
   16f20:	bhi	16f30 <__assert_fail@plt+0x5494>
   16f24:	vcmpe.f32	s8, s6
   16f28:	vmrs	APSR_nzcv, fpscr
   16f2c:	bmi	16f40 <__assert_fail@plt+0x54a4>
   16f30:	vldr	s4, [pc, #168]	; 16fe0 <__assert_fail@plt+0x5544>
   16f34:	movw	r0, #47592	; 0xb9e8
   16f38:	movt	r0, #1
   16f3c:	str	r0, [r5, #20]
   16f40:	vmul.f32	s4, s4, s0
   16f44:	vcmpe.f32	s4, s2
   16f48:	vmrs	APSR_nzcv, fpscr
   16f4c:	bgt	16f68 <__assert_fail@plt+0x54cc>
   16f50:	b	16fc4 <__assert_fail@plt+0x5528>
   16f54:	mov	r0, r1
   16f58:	vmul.f32	s4, s4, s0
   16f5c:	vcmpe.f32	s4, s2
   16f60:	vmrs	APSR_nzcv, fpscr
   16f64:	ble	16fc4 <__assert_fail@plt+0x5528>
   16f68:	vldr	s2, [r0, #4]
   16f6c:	ldrb	r1, [r0, #16]
   16f70:	cmp	r1, #0
   16f74:	vmul.f32	s0, s2, s0
   16f78:	bne	16f84 <__assert_fail@plt+0x54e8>
   16f7c:	vldr	s2, [r0, #8]
   16f80:	vmul.f32	s0, s0, s2
   16f84:	vcvt.u32.f32	s0, s0
   16f88:	mov	r0, r5
   16f8c:	vmov	r1, s0
   16f90:	bl	164ac <__assert_fail@plt+0x4a10>
   16f94:	cmp	r0, #0
   16f98:	bne	16fc4 <__assert_fail@plt+0x5528>
   16f9c:	ldr	r0, [r5, #36]	; 0x24
   16fa0:	cmp	r0, #0
   16fa4:	beq	16fbc <__assert_fail@plt+0x5520>
   16fa8:	ldr	r4, [r0, #4]
   16fac:	bl	1335c <__assert_fail@plt+0x18c0>
   16fb0:	cmp	r4, #0
   16fb4:	mov	r0, r4
   16fb8:	bne	16fa8 <__assert_fail@plt+0x550c>
   16fbc:	mov	r0, #0
   16fc0:	str	r0, [r5, #36]	; 0x24
   16fc4:	mov	r8, r9
   16fc8:	mov	r0, r8
   16fcc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16fd0:	bl	11a3c <abort@plt>
   16fd4:	stclcc	12, cr12, [ip, #820]	; 0x334
   16fd8:	svccc	0x00666666
   16fdc:	svccc	0x008ccccd
   16fe0:	andeq	r0, r0, r0
   16fe4:	b	16d30 <__assert_fail@plt+0x5294>
   16fe8:	push	{r4, r5, fp, lr}
   16fec:	add	fp, sp, #8
   16ff0:	mov	r5, r0
   16ff4:	ldr	r0, [r0]
   16ff8:	mov	r4, r1
   16ffc:	bl	1af8c <lchmod@@Base+0x3e1c>
   17000:	ldrd	r2, [r5, #8]
   17004:	eor	r0, r2, r0
   17008:	mov	r1, r3
   1700c:	mov	r2, r4
   17010:	mov	r3, #0
   17014:	bl	1b1c0 <lchmod@@Base+0x4050>
   17018:	mov	r0, r2
   1701c:	pop	{r4, r5, fp, pc}
   17020:	push	{r4, r5, fp, lr}
   17024:	add	fp, sp, #8
   17028:	mov	lr, r1
   1702c:	mov	r2, r0
   17030:	ldr	r3, [r2, #8]!
   17034:	ldr	ip, [lr, #8]!
   17038:	ldr	r4, [r2, #4]
   1703c:	eor	ip, r3, ip
   17040:	ldr	r3, [lr, #4]
   17044:	eor	r3, r4, r3
   17048:	orrs	r3, ip, r3
   1704c:	mov	ip, #0
   17050:	bne	17080 <__assert_fail@plt+0x55e4>
   17054:	ldrd	r4, [lr, #8]
   17058:	ldrd	r2, [r2, #8]
   1705c:	eor	r3, r3, r5
   17060:	eor	r2, r2, r4
   17064:	orrs	r2, r2, r3
   17068:	bne	17080 <__assert_fail@plt+0x55e4>
   1706c:	ldr	r1, [r1]
   17070:	ldr	r0, [r0]
   17074:	bl	116d0 <strcmp@plt>
   17078:	clz	r0, r0
   1707c:	lsr	ip, r0, #5
   17080:	mov	r0, ip
   17084:	pop	{r4, r5, fp, pc}
   17088:	push	{r4, sl, fp, lr}
   1708c:	add	fp, sp, #8
   17090:	mov	r4, r0
   17094:	ldr	r0, [r0]
   17098:	bl	1335c <__assert_fail@plt+0x18c0>
   1709c:	mov	r0, r4
   170a0:	pop	{r4, sl, fp, lr}
   170a4:	b	1335c <__assert_fail@plt+0x18c0>
   170a8:	vdup.32	q8, r1
   170ac:	mov	r2, #0
   170b0:	str	r2, [r0, #20]
   170b4:	str	r2, [r0, #24]
   170b8:	mov	r2, #1
   170bc:	strb	r2, [r0, #28]
   170c0:	vst1.32	{d16-d17}, [r0]!
   170c4:	str	r1, [r0]
   170c8:	bx	lr
   170cc:	ldrb	r0, [r0, #28]
   170d0:	bx	lr
   170d4:	push	{fp, lr}
   170d8:	mov	fp, sp
   170dc:	ldrb	r3, [r0, #28]
   170e0:	ldr	r2, [r0, #20]
   170e4:	eor	lr, r3, #1
   170e8:	add	r2, r2, lr
   170ec:	and	r3, r2, #3
   170f0:	ldr	ip, [r0, r3, lsl #2]
   170f4:	str	r1, [r0, r3, lsl #2]
   170f8:	str	r3, [r0, #20]
   170fc:	ldr	r1, [r0, #24]
   17100:	cmp	r3, r1
   17104:	addeq	r1, r2, lr
   17108:	andeq	r1, r1, #3
   1710c:	streq	r1, [r0, #24]
   17110:	mov	r1, #0
   17114:	strb	r1, [r0, #28]
   17118:	mov	r0, ip
   1711c:	pop	{fp, pc}
   17120:	push	{fp, lr}
   17124:	mov	fp, sp
   17128:	ldrb	r1, [r0, #28]
   1712c:	cmp	r1, #0
   17130:	bne	1716c <__assert_fail@plt+0x56d0>
   17134:	ldr	r3, [r0, #20]
   17138:	ldr	r2, [r0, #16]
   1713c:	ldr	r1, [r0, r3, lsl #2]
   17140:	str	r2, [r0, r3, lsl #2]
   17144:	ldr	r2, [r0, #20]
   17148:	ldr	r3, [r0, #24]
   1714c:	cmp	r2, r3
   17150:	moveq	r2, #1
   17154:	strbeq	r2, [r0, #28]
   17158:	subne	r2, r2, #1
   1715c:	andne	r2, r2, #3
   17160:	strne	r2, [r0, #20]
   17164:	mov	r0, r1
   17168:	pop	{fp, pc}
   1716c:	bl	11a3c <abort@plt>

00017170 <lchmod@@Base>:
   17170:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17174:	add	fp, sp, #24
   17178:	sub	sp, sp, #136	; 0x88
   1717c:	mov	r4, r1
   17180:	mov	r1, #2654208	; 0x288000
   17184:	mov	r5, r0
   17188:	bl	11820 <open64@plt>
   1718c:	mov	r6, r0
   17190:	cmp	r0, #0
   17194:	bmi	171e8 <lchmod@@Base+0x78>
   17198:	movw	r2, #47236	; 0xb884
   1719c:	mov	r0, #4096	; 0x1000
   171a0:	add	r3, sp, #32
   171a4:	mov	r1, r6
   171a8:	movt	r2, #1
   171ac:	str	r0, [sp]
   171b0:	mov	r0, #3
   171b4:	bl	1179c <__fxstatat64@plt>
   171b8:	cmp	r0, #0
   171bc:	beq	171f8 <lchmod@@Base+0x88>
   171c0:	bl	118ec <__errno_location@plt>
   171c4:	ldr	r5, [r0]
   171c8:	mov	r4, r0
   171cc:	mov	r0, r6
   171d0:	bl	11a48 <close@plt>
   171d4:	str	r5, [r4]
   171d8:	mvn	r7, #0
   171dc:	mov	r0, r7
   171e0:	sub	sp, fp, #24
   171e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   171e8:	mov	r7, r6
   171ec:	mov	r0, r7
   171f0:	sub	sp, fp, #24
   171f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   171f8:	ldr	r0, [sp, #48]	; 0x30
   171fc:	and	r0, r0, #61440	; 0xf000
   17200:	cmp	r0, #40960	; 0xa000
   17204:	bne	1722c <lchmod@@Base+0xbc>
   17208:	mov	r0, r6
   1720c:	bl	11a48 <close@plt>
   17210:	bl	118ec <__errno_location@plt>
   17214:	mov	r1, #95	; 0x5f
   17218:	mvn	r7, #0
   1721c:	str	r1, [r0]
   17220:	mov	r0, r7
   17224:	sub	sp, fp, #24
   17228:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1722c:	movw	r3, #47612	; 0xb9fc
   17230:	add	r7, sp, #6
   17234:	mov	r1, #1
   17238:	mov	r2, #26
   1723c:	str	r6, [sp]
   17240:	movt	r3, #1
   17244:	mov	r0, r7
   17248:	bl	118f8 <__sprintf_chk@plt>
   1724c:	mov	r0, r7
   17250:	mov	r1, r4
   17254:	bl	11a18 <chmod@plt>
   17258:	mov	r7, r0
   1725c:	bl	118ec <__errno_location@plt>
   17260:	ldr	r9, [r0]
   17264:	mov	r8, r0
   17268:	mov	r0, r6
   1726c:	bl	11a48 <close@plt>
   17270:	cmp	r7, #0
   17274:	beq	1729c <lchmod@@Base+0x12c>
   17278:	cmp	r9, #2
   1727c:	bne	172ac <lchmod@@Base+0x13c>
   17280:	mov	r0, r5
   17284:	mov	r1, r4
   17288:	bl	11a18 <chmod@plt>
   1728c:	mov	r7, r0
   17290:	mov	r0, r7
   17294:	sub	sp, fp, #24
   17298:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1729c:	mov	r7, #0
   172a0:	mov	r0, r7
   172a4:	sub	sp, fp, #24
   172a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   172ac:	str	r9, [r8]
   172b0:	mov	r0, r7
   172b4:	sub	sp, fp, #24
   172b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   172bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172c0:	add	fp, sp, #28
   172c4:	sub	sp, sp, #4
   172c8:	ldrb	r1, [r0]
   172cc:	mov	r4, r0
   172d0:	and	r0, r1, #248	; 0xf8
   172d4:	cmp	r0, #48	; 0x30
   172d8:	bne	17324 <lchmod@@Base+0x1b4>
   172dc:	mov	r0, #0
   172e0:	mov	r5, #0
   172e4:	mov	r2, r4
   172e8:	lsl	r3, r5, #3
   172ec:	uxtab	r1, r3, r1
   172f0:	sub	r5, r1, #48	; 0x30
   172f4:	cmp	r0, r5, lsr #12
   172f8:	bne	1731c <lchmod@@Base+0x1ac>
   172fc:	ldrb	r1, [r2, #1]
   17300:	add	r6, r2, #1
   17304:	and	r2, r1, #248	; 0xf8
   17308:	cmp	r2, #48	; 0x30
   1730c:	mov	r2, r6
   17310:	beq	172e8 <lchmod@@Base+0x178>
   17314:	cmp	r1, #0
   17318:	beq	176a8 <lchmod@@Base+0x538>
   1731c:	sub	sp, fp, #28
   17320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17324:	movw	sl, #5
   17328:	mov	r2, #1
   1732c:	mvn	r3, #42	; 0x2a
   17330:	mov	r7, #1
   17334:	mov	r0, #1
   17338:	movt	sl, #4
   1733c:	uxtab	r6, r3, r1
   17340:	uxtb	r1, r1
   17344:	cmp	r6, #18
   17348:	bls	17374 <lchmod@@Base+0x204>
   1734c:	cmp	r1, #0
   17350:	beq	17384 <lchmod@@Base+0x214>
   17354:	mov	r6, #0
   17358:	ldrb	r1, [r4, r7]
   1735c:	add	r0, r6, r0
   17360:	add	r7, r7, #1
   17364:	uxtab	r6, r3, r1
   17368:	uxtb	r1, r1
   1736c:	cmp	r6, #18
   17370:	bhi	1734c <lchmod@@Base+0x1dc>
   17374:	tst	sl, r2, lsl r6
   17378:	mov	r6, #1
   1737c:	bne	17358 <lchmod@@Base+0x1e8>
   17380:	b	1734c <lchmod@@Base+0x1dc>
   17384:	mov	r1, #16
   17388:	bl	1a3c0 <lchmod@@Base+0x3250>
   1738c:	mov	r9, #0
   17390:	mov	ip, #1
   17394:	mvn	lr, #87	; 0x57
   17398:	mov	r8, #0
   1739c:	mov	r2, #0
   173a0:	ldrb	r6, [r4]
   173a4:	sub	r3, r6, #97	; 0x61
   173a8:	cmp	r3, #20
   173ac:	bls	173d0 <lchmod@@Base+0x260>
   173b0:	b	17440 <lchmod@@Base+0x2d0>
   173b4:	movw	r1, #4095	; 0xfff
   173b8:	orr	r2, r2, r1
   173bc:	add	r4, r4, #1
   173c0:	ldrb	r6, [r4]
   173c4:	sub	r3, r6, #97	; 0x61
   173c8:	cmp	r3, #20
   173cc:	bhi	17440 <lchmod@@Base+0x2d0>
   173d0:	add	r5, pc, #4
   173d4:	mov	r1, #2496	; 0x9c0
   173d8:	ldr	pc, [r5, r3, lsl #2]
   173dc:			; <UNDEFINED> instruction: 0x000173b4
   173e0:	andeq	r7, r1, r8, lsl #14
   173e4:	andeq	r7, r1, r8, lsl #14
   173e8:	andeq	r7, r1, r8, lsl #14
   173ec:	andeq	r7, r1, r8, lsl #14
   173f0:	andeq	r7, r1, r8, lsl #14
   173f4:	andeq	r7, r1, r0, lsr r4
   173f8:	andeq	r7, r1, r8, lsl #14
   173fc:	andeq	r7, r1, r8, lsl #14
   17400:	andeq	r7, r1, r8, lsl #14
   17404:	andeq	r7, r1, r8, lsl #14
   17408:	andeq	r7, r1, r8, lsl #14
   1740c:	andeq	r7, r1, r8, lsl #14
   17410:	andeq	r7, r1, r8, lsl #14
   17414:	andeq	r7, r1, r8, lsr r4
   17418:	andeq	r7, r1, r8, lsl #14
   1741c:	andeq	r7, r1, r8, lsl #14
   17420:	andeq	r7, r1, r8, lsl #14
   17424:	andeq	r7, r1, r8, lsl #14
   17428:	andeq	r7, r1, r8, lsl #14
   1742c:			; <UNDEFINED> instruction: 0x000173b8
   17430:	movw	r1, #1080	; 0x438
   17434:	b	173b8 <lchmod@@Base+0x248>
   17438:	movw	r1, #519	; 0x207
   1743c:	b	173b8 <lchmod@@Base+0x248>
   17440:	sub	r1, r6, #43	; 0x2b
   17444:	cmp	r1, #18
   17448:	bhi	17708 <lchmod@@Base+0x598>
   1744c:	tst	sl, ip, lsl r1
   17450:	beq	17708 <lchmod@@Base+0x598>
   17454:	ldrb	r1, [r4, #1]
   17458:	sub	r3, r1, #48	; 0x30
   1745c:	cmp	r3, #8
   17460:	bcs	174bc <lchmod@@Base+0x34c>
   17464:	add	r3, r4, #2
   17468:	mov	r7, #0
   1746c:	lsl	r4, r7, #3
   17470:	uxtab	r1, r4, r1
   17474:	sub	r7, r1, #48	; 0x30
   17478:	cmp	r9, r7, lsr #12
   1747c:	bne	17708 <lchmod@@Base+0x598>
   17480:	ldrb	r1, [r3], #1
   17484:	and	r4, r1, #248	; 0xf8
   17488:	cmp	r4, #48	; 0x30
   1748c:	beq	1746c <lchmod@@Base+0x2fc>
   17490:	cmp	r2, #0
   17494:	bne	17708 <lchmod@@Base+0x598>
   17498:	sub	r4, r3, #1
   1749c:	mov	r5, #1
   174a0:	movw	r2, #4095	; 0xfff
   174a4:	cmp	r1, #0
   174a8:	beq	174e8 <lchmod@@Base+0x378>
   174ac:	cmp	r1, #44	; 0x2c
   174b0:	movw	r1, #4095	; 0xfff
   174b4:	beq	17604 <lchmod@@Base+0x494>
   174b8:	b	17708 <lchmod@@Base+0x598>
   174bc:	add	r4, r4, #2
   174c0:	cmp	r1, #103	; 0x67
   174c4:	beq	174f0 <lchmod@@Base+0x380>
   174c8:	cmp	r1, #111	; 0x6f
   174cc:	beq	17500 <lchmod@@Base+0x390>
   174d0:	cmp	r1, #117	; 0x75
   174d4:	bne	17510 <lchmod@@Base+0x3a0>
   174d8:	mov	r5, #3
   174dc:	mov	r1, #0
   174e0:	mov	r7, #448	; 0x1c0
   174e4:	b	17604 <lchmod@@Base+0x494>
   174e8:	movw	r1, #4095	; 0xfff
   174ec:	b	17604 <lchmod@@Base+0x494>
   174f0:	mov	r5, #3
   174f4:	mov	r1, #0
   174f8:	mov	r7, #56	; 0x38
   174fc:	b	17604 <lchmod@@Base+0x494>
   17500:	mov	r5, #3
   17504:	mov	r1, #0
   17508:	mov	r7, #7
   1750c:	b	17604 <lchmod@@Base+0x494>
   17510:	mov	r3, #1
   17514:	mov	r7, #0
   17518:	uxtab	r1, lr, r1
   1751c:	mov	r5, r3
   17520:	cmp	r1, #32
   17524:	bls	17548 <lchmod@@Base+0x3d8>
   17528:	b	175f8 <lchmod@@Base+0x488>
   1752c:	orr	r7, r7, #512	; 0x200
   17530:	mov	r3, r5
   17534:	ldrb	r1, [r4], #1
   17538:	uxtab	r1, lr, r1
   1753c:	mov	r5, r3
   17540:	cmp	r1, #32
   17544:	bhi	175f8 <lchmod@@Base+0x488>
   17548:	add	ip, pc, #4
   1754c:	mov	r3, #2
   17550:	ldr	pc, [ip, r1, lsl #2]
   17554:	andeq	r7, r1, r4, lsr r5
   17558:	strdeq	r7, [r1], -r8
   1755c:	strdeq	r7, [r1], -r8
   17560:	strdeq	r7, [r1], -r8
   17564:	strdeq	r7, [r1], -r8
   17568:	strdeq	r7, [r1], -r8
   1756c:	strdeq	r7, [r1], -r8
   17570:	strdeq	r7, [r1], -r8
   17574:	strdeq	r7, [r1], -r8
   17578:	strdeq	r7, [r1], -r8
   1757c:	strdeq	r7, [r1], -r8
   17580:	strdeq	r7, [r1], -r8
   17584:	strdeq	r7, [r1], -r8
   17588:	strdeq	r7, [r1], -r8
   1758c:	strdeq	r7, [r1], -r8
   17590:	strdeq	r7, [r1], -r8
   17594:	strdeq	r7, [r1], -r8
   17598:	strdeq	r7, [r1], -r8
   1759c:	strdeq	r7, [r1], -r8
   175a0:	strdeq	r7, [r1], -r8
   175a4:	strdeq	r7, [r1], -r8
   175a8:	strdeq	r7, [r1], -r8
   175ac:	strdeq	r7, [r1], -r8
   175b0:	strdeq	r7, [r1], -r8
   175b4:	strdeq	r7, [r1], -r8
   175b8:	strdeq	r7, [r1], -r8
   175bc:	ldrdeq	r7, [r1], -r8
   175c0:	andeq	r7, r1, r0, ror #11
   175c4:	andeq	r7, r1, ip, lsr #10
   175c8:	strdeq	r7, [r1], -r8
   175cc:	strdeq	r7, [r1], -r8
   175d0:	andeq	r7, r1, r8, ror #11
   175d4:	strdeq	r7, [r1], -r0
   175d8:	orr	r7, r7, #292	; 0x124
   175dc:	b	17530 <lchmod@@Base+0x3c0>
   175e0:	orr	r7, r7, #3072	; 0xc00
   175e4:	b	17530 <lchmod@@Base+0x3c0>
   175e8:	orr	r7, r7, #146	; 0x92
   175ec:	b	17530 <lchmod@@Base+0x3c0>
   175f0:	orr	r7, r7, #73	; 0x49
   175f4:	b	17530 <lchmod@@Base+0x3c0>
   175f8:	sub	r4, r4, #1
   175fc:	mov	r1, #0
   17600:	mov	ip, #1
   17604:	mov	r3, r0
   17608:	cmp	r1, #0
   1760c:	strb	r6, [r3, r8, lsl #4]!
   17610:	stmib	r3, {r2, r7}
   17614:	strb	r5, [r3, #1]
   17618:	bne	17628 <lchmod@@Base+0x4b8>
   1761c:	cmp	r2, #0
   17620:	andne	r7, r7, r2
   17624:	mov	r1, r7
   17628:	add	r7, r0, r8, lsl #4
   1762c:	add	r3, r8, #1
   17630:	str	r1, [r7, #12]
   17634:	ldrb	r6, [r4]
   17638:	sub	r1, r6, #43	; 0x2b
   1763c:	cmp	r1, #18
   17640:	bhi	176ec <lchmod@@Base+0x57c>
   17644:	add	r7, pc, #4
   17648:	mov	r8, r3
   1764c:	ldr	pc, [r7, r1, lsl #2]
   17650:	andeq	r7, r1, r4, asr r4
   17654:	muleq	r1, ip, r6
   17658:	andeq	r7, r1, r4, asr r4
   1765c:	andeq	r7, r1, r8, lsl #14
   17660:	andeq	r7, r1, r8, lsl #14
   17664:	andeq	r7, r1, r8, lsl #14
   17668:	andeq	r7, r1, r8, lsl #14
   1766c:	andeq	r7, r1, r8, lsl #14
   17670:	andeq	r7, r1, r8, lsl #14
   17674:	andeq	r7, r1, r8, lsl #14
   17678:	andeq	r7, r1, r8, lsl #14
   1767c:	andeq	r7, r1, r8, lsl #14
   17680:	andeq	r7, r1, r8, lsl #14
   17684:	andeq	r7, r1, r8, lsl #14
   17688:	andeq	r7, r1, r8, lsl #14
   1768c:	andeq	r7, r1, r8, lsl #14
   17690:	andeq	r7, r1, r8, lsl #14
   17694:	andeq	r7, r1, r8, lsl #14
   17698:	andeq	r7, r1, r4, asr r4
   1769c:	add	r4, r4, #1
   176a0:	mov	r8, r3
   176a4:	b	1739c <lchmod@@Base+0x22c>
   176a8:	mov	r0, #32
   176ac:	bl	1a2f0 <lchmod@@Base+0x3180>
   176b0:	mov	r1, #0
   176b4:	movw	r2, #317	; 0x13d
   176b8:	and	r3, r5, #3072	; 0xc00
   176bc:	movw	r7, #1023	; 0x3ff
   176c0:	strb	r1, [r0, #17]
   176c4:	strh	r2, [r0]
   176c8:	sub	r2, r6, r4
   176cc:	movw	r1, #4095	; 0xfff
   176d0:	cmp	r2, #5
   176d4:	str	r1, [r0, #4]
   176d8:	str	r5, [r0, #8]
   176dc:	orrlt	r1, r3, r7
   176e0:	str	r1, [r0, #12]
   176e4:	sub	sp, fp, #28
   176e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176ec:	cmp	r6, #0
   176f0:	bne	17708 <lchmod@@Base+0x598>
   176f4:	add	r1, r0, r3, lsl #4
   176f8:	mov	r2, #0
   176fc:	strb	r2, [r1, #1]
   17700:	sub	sp, fp, #28
   17704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17708:	bl	1335c <__assert_fail@plt+0x18c0>
   1770c:	mov	r0, #0
   17710:	sub	sp, fp, #28
   17714:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17718:	push	{r4, sl, fp, lr}
   1771c:	add	fp, sp, #8
   17720:	sub	sp, sp, #104	; 0x68
   17724:	mov	r1, r0
   17728:	mov	r2, sp
   1772c:	mov	r0, #3
   17730:	bl	11a24 <__xstat64@plt>
   17734:	mov	r1, r0
   17738:	mov	r0, #0
   1773c:	cmp	r1, #0
   17740:	beq	1774c <lchmod@@Base+0x5dc>
   17744:	sub	sp, fp, #8
   17748:	pop	{r4, sl, fp, pc}
   1774c:	ldr	r4, [sp, #16]
   17750:	mov	r0, #32
   17754:	bl	1a2f0 <lchmod@@Base+0x3180>
   17758:	mov	r1, #0
   1775c:	strb	r1, [r0, #17]
   17760:	movw	r1, #4095	; 0xfff
   17764:	stmib	r0, {r1, r4}
   17768:	str	r1, [r0, #12]
   1776c:	movw	r1, #317	; 0x13d
   17770:	strh	r1, [r0]
   17774:	sub	sp, fp, #8
   17778:	pop	{r4, sl, fp, pc}
   1777c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17780:	add	fp, sp, #24
   17784:	ldrb	r4, [r3, #1]
   17788:	ldr	ip, [fp, #8]
   1778c:	bfc	r0, #12, #20
   17790:	cmp	r4, #0
   17794:	beq	17874 <lchmod@@Base+0x704>
   17798:	cmp	r1, #0
   1779c:	mov	lr, r1
   177a0:	add	r3, r3, #8
   177a4:	mov	r9, #0
   177a8:	movw	r8, #4095	; 0xfff
   177ac:	movwne	lr, #3072	; 0xc00
   177b0:	b	177cc <lchmod@@Base+0x65c>
   177b4:	bic	r0, r0, r3
   177b8:	orr	r9, r3, r9
   177bc:	ldrb	r4, [r5, #9]
   177c0:	add	r3, r5, #16
   177c4:	cmp	r4, #0
   177c8:	beq	17878 <lchmod@@Base+0x708>
   177cc:	mov	r5, r3
   177d0:	ldr	r7, [r3, #-4]
   177d4:	ldr	r3, [r3]
   177d8:	uxtb	r4, r4
   177dc:	ldr	r6, [r5, #4]
   177e0:	cmp	r4, #2
   177e4:	bic	r6, lr, r6
   177e8:	beq	17814 <lchmod@@Base+0x6a4>
   177ec:	cmp	r4, #3
   177f0:	bne	17820 <lchmod@@Base+0x6b0>
   177f4:	and	r4, r3, r0
   177f8:	tst	r4, #146	; 0x92
   177fc:	mov	r3, r4
   17800:	orrne	r3, r3, #146	; 0x92
   17804:	tst	r4, #292	; 0x124
   17808:	orrne	r3, r3, #292	; 0x124
   1780c:	tst	r4, #73	; 0x49
   17810:	b	1781c <lchmod@@Base+0x6ac>
   17814:	and	r4, r0, #73	; 0x49
   17818:	orrs	r4, r4, r1
   1781c:	orrne	r3, r3, #73	; 0x49
   17820:	cmp	r7, #0
   17824:	mov	r4, r7
   17828:	mvneq	r4, r2
   1782c:	bic	r4, r4, r6
   17830:	and	r3, r4, r3
   17834:	ldrb	r4, [r5, #-8]
   17838:	cmp	r4, #43	; 0x2b
   1783c:	beq	1786c <lchmod@@Base+0x6fc>
   17840:	cmp	r4, #45	; 0x2d
   17844:	beq	177b4 <lchmod@@Base+0x644>
   17848:	cmp	r4, #61	; 0x3d
   1784c:	bne	177bc <lchmod@@Base+0x64c>
   17850:	mvn	r4, r7
   17854:	cmp	r7, #0
   17858:	orrne	r6, r6, r4
   1785c:	and	r0, r6, r0
   17860:	orr	r0, r3, r0
   17864:	bic	r3, r8, r6
   17868:	b	177b8 <lchmod@@Base+0x648>
   1786c:	orr	r0, r3, r0
   17870:	b	177b8 <lchmod@@Base+0x648>
   17874:	mov	r9, #0
   17878:	cmp	ip, #0
   1787c:	strne	r9, [ip]
   17880:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17884:	sub	sp, sp, #4
   17888:	push	{fp, lr}
   1788c:	mov	fp, sp
   17890:	sub	sp, sp, #4
   17894:	str	r3, [fp, #8]
   17898:	tst	r2, #64	; 0x40
   1789c:	mov	r3, #0
   178a0:	ldrne	r3, [fp, #8]
   178a4:	bl	118d4 <openat64@plt>
   178a8:	bl	19be8 <lchmod@@Base+0x2a78>
   178ac:	mov	sp, fp
   178b0:	pop	{fp, lr}
   178b4:	add	sp, sp, #4
   178b8:	bx	lr
   178bc:	push	{r4, r5, r6, sl, fp, lr}
   178c0:	add	fp, sp, #16
   178c4:	orr	r2, r2, #18688	; 0x4900
   178c8:	mov	r4, r3
   178cc:	orr	r2, r2, #524288	; 0x80000
   178d0:	bl	17884 <lchmod@@Base+0x714>
   178d4:	mov	r5, r0
   178d8:	mov	r0, #0
   178dc:	cmp	r5, #0
   178e0:	bmi	17918 <lchmod@@Base+0x7a8>
   178e4:	mov	r0, r5
   178e8:	bl	119a0 <fdopendir@plt>
   178ec:	cmp	r0, #0
   178f0:	beq	178fc <lchmod@@Base+0x78c>
   178f4:	str	r5, [r4]
   178f8:	pop	{r4, r5, r6, sl, fp, pc}
   178fc:	bl	118ec <__errno_location@plt>
   17900:	ldr	r6, [r0]
   17904:	mov	r4, r0
   17908:	mov	r0, r5
   1790c:	bl	11a48 <close@plt>
   17910:	mov	r0, #0
   17914:	str	r6, [r4]
   17918:	pop	{r4, r5, r6, sl, fp, pc}
   1791c:	push	{r4, r5, fp, lr}
   17920:	add	fp, sp, #8
   17924:	cmp	r0, #0
   17928:	beq	179bc <lchmod@@Base+0x84c>
   1792c:	mov	r1, #47	; 0x2f
   17930:	mov	r4, r0
   17934:	bl	1197c <strrchr@plt>
   17938:	cmp	r0, #0
   1793c:	mov	r5, r4
   17940:	addne	r5, r0, #1
   17944:	sub	r0, r5, r4
   17948:	cmp	r0, #7
   1794c:	blt	179a0 <lchmod@@Base+0x830>
   17950:	movw	r1, #47685	; 0xba45
   17954:	sub	r0, r5, #7
   17958:	mov	r2, #7
   1795c:	movt	r1, #1
   17960:	bl	11a30 <strncmp@plt>
   17964:	cmp	r0, #0
   17968:	bne	179a0 <lchmod@@Base+0x830>
   1796c:	movw	r1, #47693	; 0xba4d
   17970:	mov	r0, r5
   17974:	mov	r2, #3
   17978:	movt	r1, #1
   1797c:	bl	11a30 <strncmp@plt>
   17980:	cmp	r0, #0
   17984:	beq	17990 <lchmod@@Base+0x820>
   17988:	mov	r4, r5
   1798c:	b	179a0 <lchmod@@Base+0x830>
   17990:	movw	r0, #53696	; 0xd1c0
   17994:	add	r4, r5, #3
   17998:	movt	r0, #2
   1799c:	str	r4, [r0]
   179a0:	movw	r0, #53700	; 0xd1c4
   179a4:	movt	r0, #2
   179a8:	str	r4, [r0]
   179ac:	movw	r0, #53736	; 0xd1e8
   179b0:	movt	r0, #2
   179b4:	str	r4, [r0]
   179b8:	pop	{r4, r5, fp, pc}
   179bc:	movw	r0, #53712	; 0xd1d0
   179c0:	mov	r1, #55	; 0x37
   179c4:	mov	r2, #1
   179c8:	movt	r0, #2
   179cc:	ldr	r3, [r0]
   179d0:	movw	r0, #47629	; 0xba0d
   179d4:	movt	r0, #1
   179d8:	bl	117cc <fwrite@plt>
   179dc:	bl	11a3c <abort@plt>
   179e0:	push	{r4, r5, r6, sl, fp, lr}
   179e4:	add	fp, sp, #16
   179e8:	mov	r4, r0
   179ec:	movw	r0, #53744	; 0xd1f0
   179f0:	movt	r0, #2
   179f4:	cmp	r4, #0
   179f8:	moveq	r4, r0
   179fc:	bl	118ec <__errno_location@plt>
   17a00:	ldr	r6, [r0]
   17a04:	mov	r5, r0
   17a08:	mov	r0, r4
   17a0c:	mov	r1, #48	; 0x30
   17a10:	bl	1a750 <lchmod@@Base+0x35e0>
   17a14:	str	r6, [r5]
   17a18:	pop	{r4, r5, r6, sl, fp, pc}
   17a1c:	movw	r1, #53744	; 0xd1f0
   17a20:	cmp	r0, #0
   17a24:	movt	r1, #2
   17a28:	movne	r1, r0
   17a2c:	ldr	r0, [r1]
   17a30:	bx	lr
   17a34:	movw	r2, #53744	; 0xd1f0
   17a38:	cmp	r0, #0
   17a3c:	movt	r2, #2
   17a40:	movne	r2, r0
   17a44:	str	r1, [r2]
   17a48:	bx	lr
   17a4c:	movw	r3, #53744	; 0xd1f0
   17a50:	cmp	r0, #0
   17a54:	and	r2, r2, #1
   17a58:	movt	r3, #2
   17a5c:	movne	r3, r0
   17a60:	ubfx	r0, r1, #5, #3
   17a64:	and	r1, r1, #31
   17a68:	add	ip, r3, r0, lsl #2
   17a6c:	mov	r0, #1
   17a70:	ldr	r3, [ip, #8]
   17a74:	and	r0, r0, r3, lsr r1
   17a78:	eor	r2, r0, r2
   17a7c:	eor	r1, r3, r2, lsl r1
   17a80:	str	r1, [ip, #8]
   17a84:	bx	lr
   17a88:	movw	r2, #53744	; 0xd1f0
   17a8c:	cmp	r0, #0
   17a90:	movt	r2, #2
   17a94:	movne	r2, r0
   17a98:	ldr	r0, [r2, #4]
   17a9c:	str	r1, [r2, #4]
   17aa0:	bx	lr
   17aa4:	push	{fp, lr}
   17aa8:	mov	fp, sp
   17aac:	movw	r3, #53744	; 0xd1f0
   17ab0:	cmp	r0, #0
   17ab4:	movt	r3, #2
   17ab8:	movne	r3, r0
   17abc:	cmp	r1, #0
   17ac0:	mov	r0, #10
   17ac4:	cmpne	r2, #0
   17ac8:	str	r0, [r3]
   17acc:	bne	17ad4 <lchmod@@Base+0x964>
   17ad0:	bl	11a3c <abort@plt>
   17ad4:	str	r1, [r3, #40]	; 0x28
   17ad8:	str	r2, [r3, #44]	; 0x2c
   17adc:	pop	{fp, pc}
   17ae0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ae4:	add	fp, sp, #28
   17ae8:	sub	sp, sp, #20
   17aec:	mov	r7, r0
   17af0:	ldr	r0, [fp, #8]
   17af4:	movw	r5, #53744	; 0xd1f0
   17af8:	mov	r8, r3
   17afc:	mov	r9, r2
   17b00:	mov	sl, r1
   17b04:	movt	r5, #2
   17b08:	cmp	r0, #0
   17b0c:	movne	r5, r0
   17b10:	bl	118ec <__errno_location@plt>
   17b14:	ldr	r2, [r5, #40]	; 0x28
   17b18:	ldr	r3, [r5, #44]	; 0x2c
   17b1c:	mov	r4, r0
   17b20:	ldm	r5, {r0, r1}
   17b24:	add	r5, r5, #8
   17b28:	ldr	r6, [r4]
   17b2c:	stm	sp, {r0, r1, r5}
   17b30:	mov	r0, r7
   17b34:	mov	r1, sl
   17b38:	str	r2, [sp, #12]
   17b3c:	str	r3, [sp, #16]
   17b40:	mov	r2, r9
   17b44:	mov	r3, r8
   17b48:	bl	17b58 <lchmod@@Base+0x9e8>
   17b4c:	str	r6, [r4]
   17b50:	sub	sp, fp, #28
   17b54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b5c:	add	fp, sp, #28
   17b60:	sub	sp, sp, #156	; 0x9c
   17b64:	str	r0, [fp, #-84]	; 0xffffffac
   17b68:	add	r0, r2, #1
   17b6c:	mov	r6, r1
   17b70:	mov	r7, r3
   17b74:	str	r2, [fp, #-80]	; 0xffffffb0
   17b78:	str	r0, [sp, #80]	; 0x50
   17b7c:	ldr	r0, [fp, #12]
   17b80:	and	r1, r0, #1
   17b84:	str	r1, [sp, #36]	; 0x24
   17b88:	and	r1, r0, #4
   17b8c:	str	r1, [sp, #32]
   17b90:	ubfx	r8, r0, #1, #1
   17b94:	bl	117e4 <__ctype_get_mb_cur_max@plt>
   17b98:	str	r0, [sp, #40]	; 0x28
   17b9c:	ldr	r0, [fp, #24]
   17ba0:	ldr	r4, [fp, #8]
   17ba4:	mov	r1, #0
   17ba8:	str	r1, [fp, #-52]	; 0xffffffcc
   17bac:	mov	r1, #0
   17bb0:	str	r1, [sp, #60]	; 0x3c
   17bb4:	mov	r1, #1
   17bb8:	str	r1, [sp, #84]	; 0x54
   17bbc:	str	r0, [sp, #76]	; 0x4c
   17bc0:	ldr	r0, [fp, #20]
   17bc4:	str	r0, [sp, #72]	; 0x48
   17bc8:	mov	r0, #0
   17bcc:	str	r0, [sp, #56]	; 0x38
   17bd0:	mov	r0, #0
   17bd4:	str	r0, [fp, #-88]	; 0xffffffa8
   17bd8:	mov	r0, #0
   17bdc:	str	r0, [fp, #-72]	; 0xffffffb8
   17be0:	mov	r0, #0
   17be4:	cmp	r4, #10
   17be8:	bhi	18f04 <lchmod@@Base+0x1d94>
   17bec:	add	r1, pc, #24
   17bf0:	ldr	ip, [fp, #-84]	; 0xffffffac
   17bf4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17bf8:	mov	r5, r6
   17bfc:	mov	r9, #0
   17c00:	mov	r2, #1
   17c04:	mov	r3, #0
   17c08:	ldr	pc, [r1, r4, lsl #2]
   17c0c:	ldrdeq	r7, [r1], -r4
   17c10:	andeq	r7, r1, r0, lsl sp
   17c14:	andeq	r7, r1, r4, ror #25
   17c18:	andeq	r7, r1, ip, asr #25
   17c1c:	andeq	r7, r1, r4, lsl #26
   17c20:	andeq	r7, r1, r8, ror #26
   17c24:	strdeq	r7, [r1], -r4
   17c28:	andeq	r7, r1, r0, ror #31
   17c2c:	andeq	r7, r1, r8, lsr ip
   17c30:	andeq	r7, r1, r8, lsr ip
   17c34:	andeq	r7, r1, r0, ror lr
   17c38:	movw	r6, #47775	; 0xba9f
   17c3c:	mov	r0, #0
   17c40:	mov	r2, #5
   17c44:	movt	r6, #1
   17c48:	mov	r1, r6
   17c4c:	bl	11754 <dcgettext@plt>
   17c50:	cmp	r0, r6
   17c54:	str	r0, [sp, #72]	; 0x48
   17c58:	bne	17e48 <lchmod@@Base+0xcd8>
   17c5c:	bl	1afd0 <lchmod@@Base+0x3e60>
   17c60:	ldrb	r1, [r0]
   17c64:	and	r1, r1, #223	; 0xdf
   17c68:	cmp	r1, #71	; 0x47
   17c6c:	beq	17dc8 <lchmod@@Base+0xc58>
   17c70:	cmp	r1, #85	; 0x55
   17c74:	bne	17e2c <lchmod@@Base+0xcbc>
   17c78:	ldrb	r1, [r0, #1]
   17c7c:	and	r1, r1, #223	; 0xdf
   17c80:	cmp	r1, #84	; 0x54
   17c84:	bne	17e2c <lchmod@@Base+0xcbc>
   17c88:	ldrb	r1, [r0, #2]
   17c8c:	and	r1, r1, #223	; 0xdf
   17c90:	cmp	r1, #70	; 0x46
   17c94:	bne	17e2c <lchmod@@Base+0xcbc>
   17c98:	ldrb	r1, [r0, #3]
   17c9c:	cmp	r1, #45	; 0x2d
   17ca0:	bne	17e2c <lchmod@@Base+0xcbc>
   17ca4:	ldrb	r1, [r0, #4]
   17ca8:	cmp	r1, #56	; 0x38
   17cac:	bne	17e2c <lchmod@@Base+0xcbc>
   17cb0:	ldrb	r0, [r0, #5]
   17cb4:	cmp	r0, #0
   17cb8:	movw	r0, #47779	; 0xbaa3
   17cbc:	movt	r0, #1
   17cc0:	str	r0, [sp, #72]	; 0x48
   17cc4:	bne	17e2c <lchmod@@Base+0xcbc>
   17cc8:	b	17e48 <lchmod@@Base+0xcd8>
   17ccc:	mov	r0, #1
   17cd0:	b	17d10 <lchmod@@Base+0xba0>
   17cd4:	mov	r4, #0
   17cd8:	mov	r9, #0
   17cdc:	mov	r2, r0
   17ce0:	b	17d60 <lchmod@@Base+0xbf0>
   17ce4:	tst	r8, #1
   17ce8:	bne	17d10 <lchmod@@Base+0xba0>
   17cec:	mov	r2, r0
   17cf0:	b	17d38 <lchmod@@Base+0xbc8>
   17cf4:	mov	r0, #1
   17cf8:	mov	r9, #0
   17cfc:	mov	r4, #5
   17d00:	b	17d7c <lchmod@@Base+0xc0c>
   17d04:	mov	r2, #1
   17d08:	tst	r8, #1
   17d0c:	beq	17d38 <lchmod@@Base+0xbc8>
   17d10:	mov	r1, #1
   17d14:	mov	r9, #0
   17d18:	mov	r4, #2
   17d1c:	mov	r2, r0
   17d20:	mov	r3, #1
   17d24:	str	r1, [fp, #-72]	; 0xffffffb8
   17d28:	movw	r1, #47777	; 0xbaa1
   17d2c:	movt	r1, #1
   17d30:	str	r1, [fp, #-88]	; 0xffffffa8
   17d34:	b	17fe0 <lchmod@@Base+0xe70>
   17d38:	cmp	r5, #0
   17d3c:	mov	r9, #1
   17d40:	mov	r4, #2
   17d44:	movne	r0, #39	; 0x27
   17d48:	strbne	r0, [ip]
   17d4c:	movw	r0, #47777	; 0xbaa1
   17d50:	movt	r0, #1
   17d54:	str	r0, [fp, #-88]	; 0xffffffa8
   17d58:	mov	r0, #1
   17d5c:	str	r0, [fp, #-72]	; 0xffffffb8
   17d60:	mov	r3, #0
   17d64:	b	17fe0 <lchmod@@Base+0xe70>
   17d68:	mov	r4, #5
   17d6c:	tst	r8, #1
   17d70:	beq	17d98 <lchmod@@Base+0xc28>
   17d74:	mov	r0, #1
   17d78:	mov	r9, #0
   17d7c:	str	r0, [fp, #-72]	; 0xffffffb8
   17d80:	movw	r0, #47773	; 0xba9d
   17d84:	mov	r2, #1
   17d88:	mov	r3, #1
   17d8c:	movt	r0, #1
   17d90:	str	r0, [fp, #-88]	; 0xffffffa8
   17d94:	b	17fe0 <lchmod@@Base+0xe70>
   17d98:	cmp	r5, #0
   17d9c:	mov	r3, #0
   17da0:	mov	r9, #1
   17da4:	mov	r2, #1
   17da8:	movne	r0, #34	; 0x22
   17dac:	strbne	r0, [ip]
   17db0:	movw	r0, #47773	; 0xba9d
   17db4:	movt	r0, #1
   17db8:	str	r0, [fp, #-88]	; 0xffffffa8
   17dbc:	mov	r0, #1
   17dc0:	str	r0, [fp, #-72]	; 0xffffffb8
   17dc4:	b	17fe0 <lchmod@@Base+0xe70>
   17dc8:	ldrb	r1, [r0, #1]
   17dcc:	and	r1, r1, #223	; 0xdf
   17dd0:	cmp	r1, #66	; 0x42
   17dd4:	bne	17e2c <lchmod@@Base+0xcbc>
   17dd8:	ldrb	r1, [r0, #2]
   17ddc:	cmp	r1, #49	; 0x31
   17de0:	bne	17e2c <lchmod@@Base+0xcbc>
   17de4:	ldrb	r1, [r0, #3]
   17de8:	cmp	r1, #56	; 0x38
   17dec:	bne	17e2c <lchmod@@Base+0xcbc>
   17df0:	ldrb	r1, [r0, #4]
   17df4:	cmp	r1, #48	; 0x30
   17df8:	bne	17e2c <lchmod@@Base+0xcbc>
   17dfc:	ldrb	r1, [r0, #5]
   17e00:	cmp	r1, #51	; 0x33
   17e04:	bne	17e2c <lchmod@@Base+0xcbc>
   17e08:	ldrb	r1, [r0, #6]
   17e0c:	cmp	r1, #48	; 0x30
   17e10:	bne	17e2c <lchmod@@Base+0xcbc>
   17e14:	ldrb	r0, [r0, #7]
   17e18:	cmp	r0, #0
   17e1c:	movw	r0, #47787	; 0xbaab
   17e20:	movt	r0, #1
   17e24:	str	r0, [sp, #72]	; 0x48
   17e28:	beq	17e48 <lchmod@@Base+0xcd8>
   17e2c:	movw	r1, #47773	; 0xba9d
   17e30:	movw	r0, #47777	; 0xbaa1
   17e34:	cmp	r4, #9
   17e38:	movt	r1, #1
   17e3c:	movt	r0, #1
   17e40:	moveq	r0, r1
   17e44:	str	r0, [sp, #72]	; 0x48
   17e48:	movw	r6, #47777	; 0xbaa1
   17e4c:	mov	r0, #0
   17e50:	mov	r2, #5
   17e54:	movt	r6, #1
   17e58:	mov	r1, r6
   17e5c:	bl	11754 <dcgettext@plt>
   17e60:	cmp	r0, r6
   17e64:	str	r0, [sp, #76]	; 0x4c
   17e68:	beq	17eb4 <lchmod@@Base+0xd44>
   17e6c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17e70:	mov	r9, #0
   17e74:	tst	r8, #1
   17e78:	bne	17fbc <lchmod@@Base+0xe4c>
   17e7c:	ldr	r0, [sp, #72]	; 0x48
   17e80:	ldrb	r0, [r0]
   17e84:	cmp	r0, #0
   17e88:	beq	17fbc <lchmod@@Base+0xe4c>
   17e8c:	ldr	r1, [sp, #72]	; 0x48
   17e90:	mov	r9, #0
   17e94:	add	r1, r1, #1
   17e98:	cmp	r9, r5
   17e9c:	strbcc	r0, [ip, r9]
   17ea0:	ldrb	r0, [r1, r9]
   17ea4:	add	r9, r9, #1
   17ea8:	cmp	r0, #0
   17eac:	bne	17e98 <lchmod@@Base+0xd28>
   17eb0:	b	17fbc <lchmod@@Base+0xe4c>
   17eb4:	bl	1afd0 <lchmod@@Base+0x3e60>
   17eb8:	ldrb	r1, [r0]
   17ebc:	and	r1, r1, #223	; 0xdf
   17ec0:	cmp	r1, #71	; 0x47
   17ec4:	beq	17f34 <lchmod@@Base+0xdc4>
   17ec8:	ldr	ip, [fp, #-84]	; 0xffffffac
   17ecc:	cmp	r1, #85	; 0x55
   17ed0:	bne	17f90 <lchmod@@Base+0xe20>
   17ed4:	ldrb	r1, [r0, #1]
   17ed8:	and	r1, r1, #223	; 0xdf
   17edc:	cmp	r1, #84	; 0x54
   17ee0:	bne	17f90 <lchmod@@Base+0xe20>
   17ee4:	ldrb	r1, [r0, #2]
   17ee8:	and	r1, r1, #223	; 0xdf
   17eec:	cmp	r1, #70	; 0x46
   17ef0:	bne	17f90 <lchmod@@Base+0xe20>
   17ef4:	ldrb	r1, [r0, #3]
   17ef8:	cmp	r1, #45	; 0x2d
   17efc:	bne	17f90 <lchmod@@Base+0xe20>
   17f00:	ldrb	r1, [r0, #4]
   17f04:	cmp	r1, #56	; 0x38
   17f08:	bne	17f90 <lchmod@@Base+0xe20>
   17f0c:	ldrb	r0, [r0, #5]
   17f10:	cmp	r0, #0
   17f14:	bne	17f90 <lchmod@@Base+0xe20>
   17f18:	movw	r0, #47783	; 0xbaa7
   17f1c:	movt	r0, #1
   17f20:	str	r0, [sp, #76]	; 0x4c
   17f24:	mov	r9, #0
   17f28:	tst	r8, #1
   17f2c:	beq	17e7c <lchmod@@Base+0xd0c>
   17f30:	b	17fbc <lchmod@@Base+0xe4c>
   17f34:	ldrb	r1, [r0, #1]
   17f38:	ldr	ip, [fp, #-84]	; 0xffffffac
   17f3c:	and	r1, r1, #223	; 0xdf
   17f40:	cmp	r1, #66	; 0x42
   17f44:	bne	17f90 <lchmod@@Base+0xe20>
   17f48:	ldrb	r1, [r0, #2]
   17f4c:	cmp	r1, #49	; 0x31
   17f50:	bne	17f90 <lchmod@@Base+0xe20>
   17f54:	ldrb	r1, [r0, #3]
   17f58:	cmp	r1, #56	; 0x38
   17f5c:	bne	17f90 <lchmod@@Base+0xe20>
   17f60:	ldrb	r1, [r0, #4]
   17f64:	cmp	r1, #48	; 0x30
   17f68:	bne	17f90 <lchmod@@Base+0xe20>
   17f6c:	ldrb	r1, [r0, #5]
   17f70:	cmp	r1, #51	; 0x33
   17f74:	bne	17f90 <lchmod@@Base+0xe20>
   17f78:	ldrb	r1, [r0, #6]
   17f7c:	cmp	r1, #48	; 0x30
   17f80:	bne	17f90 <lchmod@@Base+0xe20>
   17f84:	ldrb	r0, [r0, #7]
   17f88:	cmp	r0, #0
   17f8c:	beq	18da4 <lchmod@@Base+0x1c34>
   17f90:	movw	r0, #47777	; 0xbaa1
   17f94:	cmp	r4, #9
   17f98:	movt	r0, #1
   17f9c:	mov	r1, r0
   17fa0:	movw	r0, #47773	; 0xba9d
   17fa4:	movt	r0, #1
   17fa8:	moveq	r1, r0
   17fac:	str	r1, [sp, #76]	; 0x4c
   17fb0:	mov	r9, #0
   17fb4:	tst	r8, #1
   17fb8:	beq	17e7c <lchmod@@Base+0xd0c>
   17fbc:	ldr	r6, [sp, #76]	; 0x4c
   17fc0:	mov	r0, r6
   17fc4:	bl	118bc <strlen@plt>
   17fc8:	ldr	ip, [fp, #-84]	; 0xffffffac
   17fcc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17fd0:	str	r0, [fp, #-72]	; 0xffffffb8
   17fd4:	str	r6, [fp, #-88]	; 0xffffffa8
   17fd8:	mov	r2, #1
   17fdc:	mov	r3, r8
   17fe0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17fe4:	str	r4, [fp, #-64]	; 0xffffffc0
   17fe8:	mov	sl, #0
   17fec:	str	r3, [fp, #-76]	; 0xffffffb4
   17ff0:	str	r2, [sp, #88]	; 0x58
   17ff4:	cmp	r0, #0
   17ff8:	movwne	r0, #1
   17ffc:	and	r1, r0, r3
   18000:	and	r1, r2, r1
   18004:	str	r1, [sp, #48]	; 0x30
   18008:	sub	r1, r4, #2
   1800c:	clz	r1, r1
   18010:	lsr	r1, r1, #5
   18014:	and	r1, r1, r3
   18018:	str	r1, [sp, #44]	; 0x2c
   1801c:	subs	r1, r4, #2
   18020:	eor	r4, r3, #1
   18024:	movwne	r1, #1
   18028:	str	r4, [sp, #92]	; 0x5c
   1802c:	orr	r4, r1, r4
   18030:	and	r1, r1, r2
   18034:	and	r0, r0, r1
   18038:	str	r4, [sp, #64]	; 0x40
   1803c:	ldr	r4, [sp, #84]	; 0x54
   18040:	str	r0, [fp, #-60]	; 0xffffffc4
   18044:	orr	r0, r1, r3
   18048:	ldr	r1, [fp, #16]
   1804c:	eor	r0, r0, #1
   18050:	clz	r1, r1
   18054:	lsr	r1, r1, #5
   18058:	orr	r0, r1, r0
   1805c:	str	r0, [fp, #-68]	; 0xffffffbc
   18060:	eor	r0, r2, #1
   18064:	str	r0, [sp, #52]	; 0x34
   18068:	cmn	r7, #1
   1806c:	beq	1807c <lchmod@@Base+0xf0c>
   18070:	cmp	sl, r7
   18074:	bne	18088 <lchmod@@Base+0xf18>
   18078:	b	18d1c <lchmod@@Base+0x1bac>
   1807c:	ldrb	r0, [lr, sl]
   18080:	cmp	r0, #0
   18084:	beq	18d24 <lchmod@@Base+0x1bb4>
   18088:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1808c:	cmp	r0, #0
   18090:	beq	180f0 <lchmod@@Base+0xf80>
   18094:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18098:	mov	r6, r5
   1809c:	add	r5, sl, r0
   180a0:	cmp	r0, #2
   180a4:	bcc	18110 <lchmod@@Base+0xfa0>
   180a8:	mov	r0, #0
   180ac:	cmn	r7, #1
   180b0:	str	r0, [fp, #-56]	; 0xffffffc8
   180b4:	bne	180cc <lchmod@@Base+0xf5c>
   180b8:	mov	r0, lr
   180bc:	bl	118bc <strlen@plt>
   180c0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   180c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   180c8:	mov	r7, r0
   180cc:	cmp	r5, r7
   180d0:	bls	18120 <lchmod@@Base+0xfb0>
   180d4:	mov	r0, #0
   180d8:	mov	r5, r6
   180dc:	str	r0, [fp, #-48]	; 0xffffffd0
   180e0:	ldrb	r6, [lr, sl]
   180e4:	cmp	r6, #126	; 0x7e
   180e8:	bls	18170 <lchmod@@Base+0x1000>
   180ec:	b	186cc <lchmod@@Base+0x155c>
   180f0:	mov	r0, #0
   180f4:	str	r0, [fp, #-56]	; 0xffffffc8
   180f8:	mov	r0, #0
   180fc:	str	r0, [fp, #-48]	; 0xffffffd0
   18100:	ldrb	r6, [lr, sl]
   18104:	cmp	r6, #126	; 0x7e
   18108:	bls	18170 <lchmod@@Base+0x1000>
   1810c:	b	186cc <lchmod@@Base+0x155c>
   18110:	mov	r0, #0
   18114:	str	r0, [fp, #-56]	; 0xffffffc8
   18118:	cmp	r5, r7
   1811c:	bhi	180d4 <lchmod@@Base+0xf64>
   18120:	ldr	r1, [fp, #-88]	; 0xffffffa8
   18124:	ldr	r2, [fp, #-72]	; 0xffffffb8
   18128:	add	r0, lr, sl
   1812c:	bl	118b0 <bcmp@plt>
   18130:	ldr	r2, [sp, #92]	; 0x5c
   18134:	cmp	r0, #0
   18138:	mov	r1, r0
   1813c:	mov	r5, r6
   18140:	movwne	r1, #1
   18144:	orr	r1, r1, r2
   18148:	tst	r1, #1
   1814c:	beq	18de4 <lchmod@@Base+0x1c74>
   18150:	ldr	ip, [fp, #-84]	; 0xffffffac
   18154:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18158:	clz	r0, r0
   1815c:	lsr	r0, r0, #5
   18160:	str	r0, [fp, #-48]	; 0xffffffd0
   18164:	ldrb	r6, [lr, sl]
   18168:	cmp	r6, #126	; 0x7e
   1816c:	bhi	186cc <lchmod@@Base+0x155c>
   18170:	add	r3, pc, #16
   18174:	mov	r8, #1
   18178:	mov	r2, #110	; 0x6e
   1817c:	mov	r0, #97	; 0x61
   18180:	mov	r1, #0
   18184:	ldr	pc, [r3, r6, lsl #2]
   18188:	andeq	r8, r1, r4, lsl #9
   1818c:	andeq	r8, r1, ip, asr #13
   18190:	andeq	r8, r1, ip, asr #13
   18194:	andeq	r8, r1, ip, asr #13
   18198:	andeq	r8, r1, ip, asr #13
   1819c:	andeq	r8, r1, ip, asr #13
   181a0:	andeq	r8, r1, ip, asr #13
   181a4:	andeq	r8, r1, r0, lsl #15
   181a8:	andeq	r8, r1, r4, ror #8
   181ac:	andeq	r8, r1, ip, asr r4
   181b0:	andeq	r8, r1, r0, ror r4
   181b4:	andeq	r8, r1, r0, lsr #11
   181b8:	andeq	r8, r1, r4, asr r4
   181bc:	andeq	r8, r1, ip, ror #8
   181c0:	andeq	r8, r1, ip, asr #13
   181c4:	andeq	r8, r1, ip, asr #13
   181c8:	andeq	r8, r1, ip, asr #13
   181cc:	andeq	r8, r1, ip, asr #13
   181d0:	andeq	r8, r1, ip, asr #13
   181d4:	andeq	r8, r1, ip, asr #13
   181d8:	andeq	r8, r1, ip, asr #13
   181dc:	andeq	r8, r1, ip, asr #13
   181e0:	andeq	r8, r1, ip, asr #13
   181e4:	andeq	r8, r1, ip, asr #13
   181e8:	andeq	r8, r1, ip, asr #13
   181ec:	andeq	r8, r1, ip, asr #13
   181f0:	andeq	r8, r1, ip, asr #13
   181f4:	andeq	r8, r1, ip, asr #13
   181f8:	andeq	r8, r1, ip, asr #13
   181fc:	andeq	r8, r1, ip, asr #13
   18200:	andeq	r8, r1, ip, asr #13
   18204:	andeq	r8, r1, ip, asr #13
   18208:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1820c:	strdeq	r8, [r1], -ip
   18210:	strdeq	r8, [r1], -ip
   18214:	andeq	r8, r1, ip, ror #7
   18218:	strdeq	r8, [r1], -ip
   1821c:	andeq	r8, r1, r4, lsl #7
   18220:	strdeq	r8, [r1], -ip
   18224:	andeq	r8, r1, r8, lsr #11
   18228:	strdeq	r8, [r1], -ip
   1822c:	strdeq	r8, [r1], -ip
   18230:	strdeq	r8, [r1], -ip
   18234:	andeq	r8, r1, r4, lsl #7
   18238:	andeq	r8, r1, r4, lsl #7
   1823c:	andeq	r8, r1, r4, lsl #7
   18240:	andeq	r8, r1, r4, lsl #7
   18244:	andeq	r8, r1, r4, lsl #7
   18248:	andeq	r8, r1, r4, lsl #7
   1824c:	andeq	r8, r1, r4, lsl #7
   18250:	andeq	r8, r1, r4, lsl #7
   18254:	andeq	r8, r1, r4, lsl #7
   18258:	andeq	r8, r1, r4, lsl #7
   1825c:	andeq	r8, r1, r4, lsl #7
   18260:	andeq	r8, r1, r4, lsl #7
   18264:	andeq	r8, r1, r4, lsl #7
   18268:	andeq	r8, r1, r4, lsl #7
   1826c:	andeq	r8, r1, r4, lsl #7
   18270:	andeq	r8, r1, r4, lsl #7
   18274:	strdeq	r8, [r1], -ip
   18278:	strdeq	r8, [r1], -ip
   1827c:	strdeq	r8, [r1], -ip
   18280:	strdeq	r8, [r1], -ip
   18284:	andeq	r8, r1, ip, ror #10
   18288:	andeq	r8, r1, ip, asr #13
   1828c:	andeq	r8, r1, r4, lsl #7
   18290:	andeq	r8, r1, r4, lsl #7
   18294:	andeq	r8, r1, r4, lsl #7
   18298:	andeq	r8, r1, r4, lsl #7
   1829c:	andeq	r8, r1, r4, lsl #7
   182a0:	andeq	r8, r1, r4, lsl #7
   182a4:	andeq	r8, r1, r4, lsl #7
   182a8:	andeq	r8, r1, r4, lsl #7
   182ac:	andeq	r8, r1, r4, lsl #7
   182b0:	andeq	r8, r1, r4, lsl #7
   182b4:	andeq	r8, r1, r4, lsl #7
   182b8:	andeq	r8, r1, r4, lsl #7
   182bc:	andeq	r8, r1, r4, lsl #7
   182c0:	andeq	r8, r1, r4, lsl #7
   182c4:	andeq	r8, r1, r4, lsl #7
   182c8:	andeq	r8, r1, r4, lsl #7
   182cc:	andeq	r8, r1, r4, lsl #7
   182d0:	andeq	r8, r1, r4, lsl #7
   182d4:	andeq	r8, r1, r4, lsl #7
   182d8:	andeq	r8, r1, r4, lsl #7
   182dc:	andeq	r8, r1, r4, lsl #7
   182e0:	andeq	r8, r1, r4, lsl #7
   182e4:	andeq	r8, r1, r4, lsl #7
   182e8:	andeq	r8, r1, r4, lsl #7
   182ec:	andeq	r8, r1, r4, lsl #7
   182f0:	andeq	r8, r1, r4, lsl #7
   182f4:	strdeq	r8, [r1], -ip
   182f8:	andeq	r8, r1, r0, lsr r4
   182fc:	andeq	r8, r1, r4, lsl #7
   18300:	strdeq	r8, [r1], -ip
   18304:	andeq	r8, r1, r4, lsl #7
   18308:	strdeq	r8, [r1], -ip
   1830c:	andeq	r8, r1, r4, lsl #7
   18310:	andeq	r8, r1, r4, lsl #7
   18314:	andeq	r8, r1, r4, lsl #7
   18318:	andeq	r8, r1, r4, lsl #7
   1831c:	andeq	r8, r1, r4, lsl #7
   18320:	andeq	r8, r1, r4, lsl #7
   18324:	andeq	r8, r1, r4, lsl #7
   18328:	andeq	r8, r1, r4, lsl #7
   1832c:	andeq	r8, r1, r4, lsl #7
   18330:	andeq	r8, r1, r4, lsl #7
   18334:	andeq	r8, r1, r4, lsl #7
   18338:	andeq	r8, r1, r4, lsl #7
   1833c:	andeq	r8, r1, r4, lsl #7
   18340:	andeq	r8, r1, r4, lsl #7
   18344:	andeq	r8, r1, r4, lsl #7
   18348:	andeq	r8, r1, r4, lsl #7
   1834c:	andeq	r8, r1, r4, lsl #7
   18350:	andeq	r8, r1, r4, lsl #7
   18354:	andeq	r8, r1, r4, lsl #7
   18358:	andeq	r8, r1, r4, lsl #7
   1835c:	andeq	r8, r1, r4, lsl #7
   18360:	andeq	r8, r1, r4, lsl #7
   18364:	andeq	r8, r1, r4, lsl #7
   18368:	andeq	r8, r1, r4, lsl #7
   1836c:	andeq	r8, r1, r4, lsl #7
   18370:	andeq	r8, r1, r4, lsl #7
   18374:	andeq	r8, r1, r4, asr #7
   18378:	strdeq	r8, [r1], -ip
   1837c:	andeq	r8, r1, r4, asr #7
   18380:	andeq	r8, r1, ip, ror #7
   18384:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18388:	tst	r0, #1
   1838c:	bne	18644 <lchmod@@Base+0x14d4>
   18390:	ldr	r1, [fp, #16]
   18394:	ubfx	r0, r6, #5, #3
   18398:	mov	r2, #1
   1839c:	ldr	r0, [r1, r0, lsl #2]
   183a0:	and	r1, r6, #31
   183a4:	tst	r0, r2, lsl r1
   183a8:	beq	18644 <lchmod@@Base+0x14d4>
   183ac:	mov	r0, r6
   183b0:	mov	r1, r8
   183b4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   183b8:	tst	r2, #1
   183bc:	beq	18664 <lchmod@@Base+0x14f4>
   183c0:	b	18dc0 <lchmod@@Base+0x1c50>
   183c4:	cmp	r7, #1
   183c8:	beq	183ec <lchmod@@Base+0x127c>
   183cc:	mov	r8, #0
   183d0:	cmn	r7, #1
   183d4:	bne	18630 <lchmod@@Base+0x14c0>
   183d8:	ldrb	r0, [lr, #1]
   183dc:	cmp	r0, #0
   183e0:	beq	183ec <lchmod@@Base+0x127c>
   183e4:	mvn	r7, #0
   183e8:	b	18630 <lchmod@@Base+0x14c0>
   183ec:	mov	r8, #0
   183f0:	cmp	sl, #0
   183f4:	bne	18630 <lchmod@@Base+0x14c0>
   183f8:	mov	r1, #1
   183fc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18400:	cmp	r0, #2
   18404:	bne	1841c <lchmod@@Base+0x12ac>
   18408:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1840c:	mov	r8, r1
   18410:	tst	r0, #1
   18414:	beq	18384 <lchmod@@Base+0x1214>
   18418:	b	18dc0 <lchmod@@Base+0x1c50>
   1841c:	mov	r8, r1
   18420:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18424:	tst	r0, #1
   18428:	beq	18390 <lchmod@@Base+0x1220>
   1842c:	b	18644 <lchmod@@Base+0x14d4>
   18430:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18434:	cmp	r0, #2
   18438:	bne	186f8 <lchmod@@Base+0x1588>
   1843c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18440:	tst	r0, #1
   18444:	bne	18dc0 <lchmod@@Base+0x1c50>
   18448:	mov	r0, #0
   1844c:	str	r0, [fp, #-56]	; 0xffffffc8
   18450:	b	18710 <lchmod@@Base+0x15a0>
   18454:	mov	r0, #102	; 0x66
   18458:	b	18780 <lchmod@@Base+0x1610>
   1845c:	mov	r2, #116	; 0x74
   18460:	b	18470 <lchmod@@Base+0x1300>
   18464:	mov	r0, #98	; 0x62
   18468:	b	18780 <lchmod@@Base+0x1610>
   1846c:	mov	r2, #114	; 0x72
   18470:	ldr	r0, [sp, #64]	; 0x40
   18474:	tst	r0, #1
   18478:	mov	r0, r2
   1847c:	bne	18780 <lchmod@@Base+0x1610>
   18480:	b	18dc0 <lchmod@@Base+0x1c50>
   18484:	ldr	r0, [sp, #88]	; 0x58
   18488:	tst	r0, #1
   1848c:	beq	187a0 <lchmod@@Base+0x1630>
   18490:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18494:	tst	r0, #1
   18498:	bne	18efc <lchmod@@Base+0x1d8c>
   1849c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   184a0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   184a4:	subs	r0, r0, #2
   184a8:	movwne	r0, #1
   184ac:	orr	r0, r0, r1
   184b0:	tst	r0, #1
   184b4:	bne	184f0 <lchmod@@Base+0x1380>
   184b8:	cmp	r9, r5
   184bc:	movcc	r0, #39	; 0x27
   184c0:	strbcc	r0, [ip, r9]
   184c4:	add	r0, r9, #1
   184c8:	cmp	r0, r5
   184cc:	movcc	r1, #36	; 0x24
   184d0:	strbcc	r1, [ip, r0]
   184d4:	add	r0, r9, #2
   184d8:	add	r9, r9, #3
   184dc:	cmp	r0, r5
   184e0:	movcc	r1, #39	; 0x27
   184e4:	strbcc	r1, [ip, r0]
   184e8:	mov	r0, #1
   184ec:	str	r0, [fp, #-52]	; 0xffffffcc
   184f0:	mov	r1, #1
   184f4:	cmp	r9, r5
   184f8:	mov	r8, #0
   184fc:	mov	r6, #48	; 0x30
   18500:	str	r1, [fp, #-56]	; 0xffffffc8
   18504:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18508:	movcc	r0, #92	; 0x5c
   1850c:	strbcc	r0, [ip, r9]
   18510:	add	r0, r9, #1
   18514:	cmp	r1, #2
   18518:	beq	1896c <lchmod@@Base+0x17fc>
   1851c:	add	r1, sl, #1
   18520:	cmp	r1, r7
   18524:	bcs	1896c <lchmod@@Base+0x17fc>
   18528:	ldrb	r1, [lr, r1]
   1852c:	sub	r1, r1, #48	; 0x30
   18530:	uxtb	r1, r1
   18534:	cmp	r1, #9
   18538:	bhi	1896c <lchmod@@Base+0x17fc>
   1853c:	cmp	r0, r5
   18540:	movcc	r1, #48	; 0x30
   18544:	strbcc	r1, [ip, r0]
   18548:	add	r0, r9, #2
   1854c:	add	r9, r9, #3
   18550:	cmp	r0, r5
   18554:	movcc	r1, #48	; 0x30
   18558:	strbcc	r1, [ip, r0]
   1855c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18560:	tst	r0, #1
   18564:	beq	18390 <lchmod@@Base+0x1220>
   18568:	b	18644 <lchmod@@Base+0x14d4>
   1856c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18570:	mov	r6, #63	; 0x3f
   18574:	cmp	r0, #5
   18578:	beq	18980 <lchmod@@Base+0x1810>
   1857c:	mov	r1, #0
   18580:	cmp	r0, #2
   18584:	str	r1, [fp, #-56]	; 0xffffffc8
   18588:	bne	18a48 <lchmod@@Base+0x18d8>
   1858c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18590:	mov	r8, #0
   18594:	tst	r0, #1
   18598:	beq	18384 <lchmod@@Base+0x1214>
   1859c:	b	18dc0 <lchmod@@Base+0x1c50>
   185a0:	mov	r0, #118	; 0x76
   185a4:	b	18780 <lchmod@@Base+0x1610>
   185a8:	mov	r0, #1
   185ac:	mov	r6, #39	; 0x27
   185b0:	str	r0, [sp, #60]	; 0x3c
   185b4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   185b8:	cmp	r0, #2
   185bc:	bne	187c0 <lchmod@@Base+0x1650>
   185c0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   185c4:	tst	r0, #1
   185c8:	bne	18dc0 <lchmod@@Base+0x1c50>
   185cc:	ldr	r2, [sp, #56]	; 0x38
   185d0:	clz	r1, r5
   185d4:	mov	r8, #1
   185d8:	lsr	r1, r1, #5
   185dc:	cmp	r2, #0
   185e0:	mov	r0, r2
   185e4:	movwne	r0, #1
   185e8:	orrs	r0, r0, r1
   185ec:	moveq	r2, r5
   185f0:	moveq	r5, r0
   185f4:	cmp	r9, r5
   185f8:	str	r2, [sp, #56]	; 0x38
   185fc:	movcc	r0, #39	; 0x27
   18600:	strbcc	r0, [ip, r9]
   18604:	add	r0, r9, #1
   18608:	cmp	r0, r5
   1860c:	movcc	r1, #92	; 0x5c
   18610:	strbcc	r1, [ip, r0]
   18614:	add	r0, r9, #2
   18618:	add	r9, r9, #3
   1861c:	cmp	r0, r5
   18620:	movcc	r1, #39	; 0x27
   18624:	strbcc	r1, [ip, r0]
   18628:	mov	r0, #0
   1862c:	str	r0, [fp, #-52]	; 0xffffffcc
   18630:	mov	r0, #0
   18634:	str	r0, [fp, #-56]	; 0xffffffc8
   18638:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1863c:	tst	r0, #1
   18640:	beq	18390 <lchmod@@Base+0x1220>
   18644:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18648:	mov	r1, r8
   1864c:	cmp	r0, #0
   18650:	mov	r0, r6
   18654:	beq	18718 <lchmod@@Base+0x15a8>
   18658:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1865c:	tst	r2, #1
   18660:	bne	18dc0 <lchmod@@Base+0x1c50>
   18664:	ldr	r2, [fp, #-64]	; 0xffffffc0
   18668:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1866c:	subs	r2, r2, #2
   18670:	movwne	r2, #1
   18674:	orr	r2, r2, r3
   18678:	tst	r2, #1
   1867c:	bne	186b8 <lchmod@@Base+0x1548>
   18680:	cmp	r9, r5
   18684:	movcc	r2, #39	; 0x27
   18688:	strbcc	r2, [ip, r9]
   1868c:	add	r2, r9, #1
   18690:	cmp	r2, r5
   18694:	movcc	r3, #36	; 0x24
   18698:	strbcc	r3, [ip, r2]
   1869c:	add	r2, r9, #2
   186a0:	add	r9, r9, #3
   186a4:	cmp	r2, r5
   186a8:	movcc	r3, #39	; 0x27
   186ac:	strbcc	r3, [ip, r2]
   186b0:	mov	r2, #1
   186b4:	str	r2, [fp, #-52]	; 0xffffffcc
   186b8:	cmp	r9, r5
   186bc:	movcc	r2, #92	; 0x5c
   186c0:	strbcc	r2, [ip, r9]
   186c4:	add	r9, r9, #1
   186c8:	b	18760 <lchmod@@Base+0x15f0>
   186cc:	ldr	r0, [sp, #40]	; 0x28
   186d0:	cmp	r0, #1
   186d4:	bne	187d4 <lchmod@@Base+0x1664>
   186d8:	bl	11880 <__ctype_b_loc@plt>
   186dc:	ldr	r0, [r0]
   186e0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   186e4:	mov	r1, #1
   186e8:	add	r0, r0, r6, lsl #1
   186ec:	ldrb	r0, [r0, #1]
   186f0:	ubfx	r8, r0, #6, #1
   186f4:	b	18b2c <lchmod@@Base+0x19bc>
   186f8:	ldr	r1, [sp, #48]	; 0x30
   186fc:	mov	r0, #0
   18700:	str	r0, [fp, #-56]	; 0xffffffc8
   18704:	mov	r0, #92	; 0x5c
   18708:	cmp	r1, #0
   1870c:	beq	18780 <lchmod@@Base+0x1610>
   18710:	mov	r6, #92	; 0x5c
   18714:	mov	r8, #0
   18718:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1871c:	cmp	r0, #0
   18720:	bne	18758 <lchmod@@Base+0x15e8>
   18724:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18728:	tst	r0, #1
   1872c:	beq	18758 <lchmod@@Base+0x15e8>
   18730:	cmp	r9, r5
   18734:	movcc	r0, #39	; 0x27
   18738:	strbcc	r0, [ip, r9]
   1873c:	add	r0, r9, #1
   18740:	add	r9, r9, #2
   18744:	cmp	r0, r5
   18748:	movcc	r1, #39	; 0x27
   1874c:	strbcc	r1, [ip, r0]
   18750:	mov	r0, #0
   18754:	str	r0, [fp, #-52]	; 0xffffffcc
   18758:	mov	r1, r8
   1875c:	mov	r0, r6
   18760:	cmp	r9, r5
   18764:	and	r4, r4, r1
   18768:	strbcc	r0, [ip, r9]
   1876c:	add	r9, r9, #1
   18770:	add	sl, sl, #1
   18774:	cmn	r7, #1
   18778:	bne	18070 <lchmod@@Base+0xf00>
   1877c:	b	1807c <lchmod@@Base+0xf0c>
   18780:	mov	r1, #0
   18784:	mov	r8, #0
   18788:	str	r1, [fp, #-56]	; 0xffffffc8
   1878c:	ldr	r1, [sp, #88]	; 0x58
   18790:	tst	r1, #1
   18794:	mov	r1, #0
   18798:	beq	18384 <lchmod@@Base+0x1214>
   1879c:	b	18658 <lchmod@@Base+0x14e8>
   187a0:	ldr	r0, [sp, #36]	; 0x24
   187a4:	mov	r6, #0
   187a8:	mov	r8, #0
   187ac:	cmp	r0, #0
   187b0:	mov	r0, #0
   187b4:	str	r0, [fp, #-56]	; 0xffffffc8
   187b8:	bne	18770 <lchmod@@Base+0x1600>
   187bc:	b	18384 <lchmod@@Base+0x1214>
   187c0:	mov	r8, #1
   187c4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   187c8:	tst	r0, #1
   187cc:	beq	18390 <lchmod@@Base+0x1220>
   187d0:	b	18644 <lchmod@@Base+0x14d4>
   187d4:	mov	r0, #0
   187d8:	cmn	r7, #1
   187dc:	str	r0, [fp, #-36]	; 0xffffffdc
   187e0:	str	r0, [fp, #-40]	; 0xffffffd8
   187e4:	bne	187f8 <lchmod@@Base+0x1688>
   187e8:	mov	r0, lr
   187ec:	bl	118bc <strlen@plt>
   187f0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   187f4:	mov	r7, r0
   187f8:	ldr	r0, [sp, #44]	; 0x2c
   187fc:	str	r4, [sp, #84]	; 0x54
   18800:	str	r5, [sp, #28]
   18804:	cmp	r0, #0
   18808:	beq	18a5c <lchmod@@Base+0x18ec>
   1880c:	ldr	r0, [sp, #80]	; 0x50
   18810:	mov	r8, #1
   18814:	mov	r5, #0
   18818:	add	r0, r0, sl
   1881c:	str	r0, [sp, #24]
   18820:	sub	r0, fp, #40	; 0x28
   18824:	mov	r3, r0
   18828:	b	18864 <lchmod@@Base+0x16f4>
   1882c:	ldr	r5, [sp, #68]	; 0x44
   18830:	add	r5, r0, r5
   18834:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18838:	bl	117a8 <iswprint@plt>
   1883c:	cmp	r0, #0
   18840:	sub	r4, fp, #40	; 0x28
   18844:	movwne	r0, #1
   18848:	and	r8, r8, r0
   1884c:	mov	r0, r4
   18850:	bl	1173c <mbsinit@plt>
   18854:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18858:	mov	r3, r4
   1885c:	cmp	r0, #0
   18860:	bne	18b20 <lchmod@@Base+0x19b0>
   18864:	str	r5, [sp, #68]	; 0x44
   18868:	add	r5, r5, sl
   1886c:	sub	r0, fp, #44	; 0x2c
   18870:	add	r1, lr, r5
   18874:	sub	r2, r7, r5
   18878:	bl	1b008 <lchmod@@Base+0x3e98>
   1887c:	cmn	r0, #2
   18880:	beq	18ae0 <lchmod@@Base+0x1970>
   18884:	ldr	ip, [fp, #-84]	; 0xffffffac
   18888:	cmn	r0, #1
   1888c:	beq	18ad4 <lchmod@@Base+0x1964>
   18890:	cmp	r0, #0
   18894:	beq	18ad8 <lchmod@@Base+0x1968>
   18898:	cmp	r0, #2
   1889c:	bcc	1882c <lchmod@@Base+0x16bc>
   188a0:	ldr	r1, [sp, #68]	; 0x44
   188a4:	ldr	r2, [sp, #24]
   188a8:	add	r1, r2, r1
   188ac:	sub	r2, r0, #1
   188b0:	ldrb	r3, [r1]
   188b4:	sub	r3, r3, #91	; 0x5b
   188b8:	cmp	r3, #33	; 0x21
   188bc:	bls	188dc <lchmod@@Base+0x176c>
   188c0:	add	r1, r1, #1
   188c4:	subs	r2, r2, #1
   188c8:	beq	1882c <lchmod@@Base+0x16bc>
   188cc:	ldrb	r3, [r1]
   188d0:	sub	r3, r3, #91	; 0x5b
   188d4:	cmp	r3, #33	; 0x21
   188d8:	bhi	188c0 <lchmod@@Base+0x1750>
   188dc:	add	r5, pc, #0
   188e0:	ldr	pc, [r5, r3, lsl #2]
   188e4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   188e8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   188ec:	andeq	r8, r1, r0, asr #17
   188f0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   188f4:	andeq	r8, r1, r0, asr #17
   188f8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   188fc:	andeq	r8, r1, r0, asr #17
   18900:	andeq	r8, r1, r0, asr #17
   18904:	andeq	r8, r1, r0, asr #17
   18908:	andeq	r8, r1, r0, asr #17
   1890c:	andeq	r8, r1, r0, asr #17
   18910:	andeq	r8, r1, r0, asr #17
   18914:	andeq	r8, r1, r0, asr #17
   18918:	andeq	r8, r1, r0, asr #17
   1891c:	andeq	r8, r1, r0, asr #17
   18920:	andeq	r8, r1, r0, asr #17
   18924:	andeq	r8, r1, r0, asr #17
   18928:	andeq	r8, r1, r0, asr #17
   1892c:	andeq	r8, r1, r0, asr #17
   18930:	andeq	r8, r1, r0, asr #17
   18934:	andeq	r8, r1, r0, asr #17
   18938:	andeq	r8, r1, r0, asr #17
   1893c:	andeq	r8, r1, r0, asr #17
   18940:	andeq	r8, r1, r0, asr #17
   18944:	andeq	r8, r1, r0, asr #17
   18948:	andeq	r8, r1, r0, asr #17
   1894c:	andeq	r8, r1, r0, asr #17
   18950:	andeq	r8, r1, r0, asr #17
   18954:	andeq	r8, r1, r0, asr #17
   18958:	andeq	r8, r1, r0, asr #17
   1895c:	andeq	r8, r1, r0, asr #17
   18960:	andeq	r8, r1, r0, asr #17
   18964:	andeq	r8, r1, r0, asr #17
   18968:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1896c:	mov	r9, r0
   18970:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18974:	tst	r0, #1
   18978:	beq	18390 <lchmod@@Base+0x1220>
   1897c:	b	18644 <lchmod@@Base+0x14d4>
   18980:	mov	r0, #0
   18984:	str	r0, [fp, #-56]	; 0xffffffc8
   18988:	ldr	r0, [sp, #32]
   1898c:	cmp	r0, #0
   18990:	beq	18a48 <lchmod@@Base+0x18d8>
   18994:	add	r0, sl, #2
   18998:	mov	r1, r7
   1899c:	cmp	r0, r7
   189a0:	bcs	18a48 <lchmod@@Base+0x18d8>
   189a4:	add	r1, sl, lr
   189a8:	ldrb	r1, [r1, #1]
   189ac:	cmp	r1, #63	; 0x3f
   189b0:	bne	18a48 <lchmod@@Base+0x18d8>
   189b4:	ldrb	r8, [lr, r0]
   189b8:	sub	r2, r8, #33	; 0x21
   189bc:	cmp	r2, #29
   189c0:	bhi	18a48 <lchmod@@Base+0x18d8>
   189c4:	mov	r1, r4
   189c8:	movw	r4, #20929	; 0x51c1
   189cc:	mov	r3, #1
   189d0:	movt	r4, #14336	; 0x3800
   189d4:	tst	r4, r3, lsl r2
   189d8:	beq	18d04 <lchmod@@Base+0x1b94>
   189dc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   189e0:	tst	r2, #1
   189e4:	bne	18dc0 <lchmod@@Base+0x1c50>
   189e8:	cmp	r9, r5
   189ec:	mov	r6, r8
   189f0:	mov	r4, r1
   189f4:	mov	sl, r0
   189f8:	mov	r8, #0
   189fc:	movcc	r2, #63	; 0x3f
   18a00:	strbcc	r2, [ip, r9]
   18a04:	add	r2, r9, #1
   18a08:	cmp	r2, r5
   18a0c:	movcc	r3, #34	; 0x22
   18a10:	strbcc	r3, [ip, r2]
   18a14:	add	r2, r9, #2
   18a18:	cmp	r2, r5
   18a1c:	movcc	r3, #34	; 0x22
   18a20:	strbcc	r3, [ip, r2]
   18a24:	add	r2, r9, #3
   18a28:	add	r9, r9, #4
   18a2c:	cmp	r2, r5
   18a30:	movcc	r3, #63	; 0x3f
   18a34:	strbcc	r3, [ip, r2]
   18a38:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18a3c:	tst	r0, #1
   18a40:	beq	18390 <lchmod@@Base+0x1220>
   18a44:	b	18644 <lchmod@@Base+0x14d4>
   18a48:	mov	r8, #0
   18a4c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18a50:	tst	r0, #1
   18a54:	beq	18390 <lchmod@@Base+0x1220>
   18a58:	b	18644 <lchmod@@Base+0x14d4>
   18a5c:	mov	r8, #1
   18a60:	mov	r5, #0
   18a64:	sub	r4, fp, #40	; 0x28
   18a68:	str	r5, [sp, #68]	; 0x44
   18a6c:	add	r5, r5, sl
   18a70:	sub	r0, fp, #44	; 0x2c
   18a74:	mov	r3, r4
   18a78:	add	r1, lr, r5
   18a7c:	sub	r2, r7, r5
   18a80:	bl	1b008 <lchmod@@Base+0x3e98>
   18a84:	cmn	r0, #2
   18a88:	beq	18ae0 <lchmod@@Base+0x1970>
   18a8c:	cmn	r0, #1
   18a90:	beq	18ad4 <lchmod@@Base+0x1964>
   18a94:	ldr	r5, [sp, #68]	; 0x44
   18a98:	cmp	r0, #0
   18a9c:	beq	18b1c <lchmod@@Base+0x19ac>
   18aa0:	add	r5, r0, r5
   18aa4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18aa8:	bl	117a8 <iswprint@plt>
   18aac:	cmp	r0, #0
   18ab0:	sub	r4, fp, #40	; 0x28
   18ab4:	movwne	r0, #1
   18ab8:	and	r8, r8, r0
   18abc:	mov	r0, r4
   18ac0:	bl	1173c <mbsinit@plt>
   18ac4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18ac8:	cmp	r0, #0
   18acc:	beq	18a68 <lchmod@@Base+0x18f8>
   18ad0:	b	18b20 <lchmod@@Base+0x19b0>
   18ad4:	mov	r8, #0
   18ad8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18adc:	b	18b14 <lchmod@@Base+0x19a4>
   18ae0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18ae4:	mov	r8, #0
   18ae8:	cmp	r5, r7
   18aec:	bcs	18b14 <lchmod@@Base+0x19a4>
   18af0:	ldrb	r0, [lr, r5]
   18af4:	cmp	r0, #0
   18af8:	beq	18b14 <lchmod@@Base+0x19a4>
   18afc:	ldr	r0, [sp, #68]	; 0x44
   18b00:	add	r0, r0, #1
   18b04:	add	r5, r0, sl
   18b08:	str	r0, [sp, #68]	; 0x44
   18b0c:	cmp	r5, r7
   18b10:	bcc	18af0 <lchmod@@Base+0x1980>
   18b14:	ldr	r5, [sp, #68]	; 0x44
   18b18:	b	18b20 <lchmod@@Base+0x19b0>
   18b1c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18b20:	mov	r1, r5
   18b24:	ldr	r5, [sp, #28]
   18b28:	ldr	r4, [sp, #84]	; 0x54
   18b2c:	ldr	r0, [sp, #52]	; 0x34
   18b30:	ldr	ip, [fp, #-84]	; 0xffffffac
   18b34:	cmp	r1, #1
   18b38:	orr	r2, r8, r0
   18b3c:	mov	r0, r1
   18b40:	bhi	18b4c <lchmod@@Base+0x19dc>
   18b44:	tst	r2, #1
   18b48:	bne	18384 <lchmod@@Base+0x1214>
   18b4c:	add	r0, r0, sl
   18b50:	str	r2, [sp, #84]	; 0x54
   18b54:	str	r0, [fp, #-56]	; 0xffffffc8
   18b58:	mov	r0, #0
   18b5c:	tst	r2, #1
   18b60:	bne	18c40 <lchmod@@Base+0x1ad0>
   18b64:	ldr	r1, [fp, #-76]	; 0xffffffb4
   18b68:	tst	r1, #1
   18b6c:	bne	18dc0 <lchmod@@Base+0x1c50>
   18b70:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18b74:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18b78:	subs	r2, r1, #2
   18b7c:	movwne	r2, #1
   18b80:	orr	r2, r2, r0
   18b84:	tst	r2, #1
   18b88:	bne	18bc4 <lchmod@@Base+0x1a54>
   18b8c:	cmp	r9, r5
   18b90:	add	r2, r9, #1
   18b94:	mov	r0, #1
   18b98:	movcc	r1, #39	; 0x27
   18b9c:	str	r0, [fp, #-52]	; 0xffffffcc
   18ba0:	strbcc	r1, [ip, r9]
   18ba4:	cmp	r2, r5
   18ba8:	movcc	r1, #36	; 0x24
   18bac:	strbcc	r1, [ip, r2]
   18bb0:	add	r2, r9, #2
   18bb4:	add	r9, r9, #3
   18bb8:	cmp	r2, r5
   18bbc:	movcc	r1, #39	; 0x27
   18bc0:	strbcc	r1, [ip, r2]
   18bc4:	cmp	r9, r5
   18bc8:	add	r2, r9, #1
   18bcc:	movcc	r1, #92	; 0x5c
   18bd0:	strbcc	r1, [ip, r9]
   18bd4:	cmp	r2, r5
   18bd8:	bcs	18bec <lchmod@@Base+0x1a7c>
   18bdc:	uxtb	r3, r6
   18be0:	mov	r1, #48	; 0x30
   18be4:	orr	r3, r1, r3, lsr #6
   18be8:	strb	r3, [ip, r2]
   18bec:	add	r2, r9, #2
   18bf0:	add	r9, r9, #3
   18bf4:	cmp	r2, r5
   18bf8:	lsrcc	r3, r6, #3
   18bfc:	movcc	r1, #6
   18c00:	bficc	r3, r1, #3, #29
   18c04:	mov	r1, #6
   18c08:	bfi	r6, r1, #3, #29
   18c0c:	strbcc	r3, [ip, r2]
   18c10:	mov	r2, #1
   18c14:	b	18c74 <lchmod@@Base+0x1b04>
   18c18:	ldr	r1, [sp, #80]	; 0x50
   18c1c:	cmp	r9, r2
   18c20:	mov	r5, r2
   18c24:	ldr	r2, [sp, #84]	; 0x54
   18c28:	strbcc	r6, [ip, r9]
   18c2c:	add	r9, r9, #1
   18c30:	ldrb	r6, [r1, sl]
   18c34:	mov	sl, r3
   18c38:	tst	r2, #1
   18c3c:	beq	18b64 <lchmod@@Base+0x19f4>
   18c40:	ldr	r1, [fp, #-48]	; 0xffffffd0
   18c44:	tst	r1, #1
   18c48:	beq	18c68 <lchmod@@Base+0x1af8>
   18c4c:	cmp	r9, r5
   18c50:	mov	r2, r0
   18c54:	movcc	r1, #92	; 0x5c
   18c58:	strbcc	r1, [ip, r9]
   18c5c:	add	r9, r9, #1
   18c60:	mov	r1, #0
   18c64:	b	18c70 <lchmod@@Base+0x1b00>
   18c68:	mov	r1, #0
   18c6c:	mov	r2, r0
   18c70:	str	r1, [fp, #-48]	; 0xffffffd0
   18c74:	mov	r0, r2
   18c78:	and	r1, r2, #1
   18c7c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18c80:	add	r3, sl, #1
   18c84:	cmp	r2, r3
   18c88:	bls	18ce8 <lchmod@@Base+0x1b78>
   18c8c:	mov	r2, r5
   18c90:	ldr	r5, [fp, #-52]	; 0xffffffcc
   18c94:	cmp	r1, #0
   18c98:	movwne	r1, #1
   18c9c:	mvn	r5, r5
   18ca0:	orr	r5, r5, r1
   18ca4:	tst	r5, #1
   18ca8:	bne	18c18 <lchmod@@Base+0x1aa8>
   18cac:	cmp	r9, r2
   18cb0:	movcc	r5, r4
   18cb4:	movcc	r4, #39	; 0x27
   18cb8:	strbcc	r4, [ip, r9]
   18cbc:	movcc	r4, r5
   18cc0:	add	r5, r9, #1
   18cc4:	add	r9, r9, #2
   18cc8:	cmp	r5, r2
   18ccc:	movcc	r1, r4
   18cd0:	movcc	r4, #39	; 0x27
   18cd4:	strbcc	r4, [ip, r5]
   18cd8:	movcc	r4, r1
   18cdc:	mov	r1, #0
   18ce0:	str	r1, [fp, #-52]	; 0xffffffcc
   18ce4:	b	18c18 <lchmod@@Base+0x1aa8>
   18ce8:	cmp	r1, #0
   18cec:	movwne	r1, #1
   18cf0:	str	r1, [fp, #-56]	; 0xffffffc8
   18cf4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18cf8:	cmp	r0, #0
   18cfc:	beq	18724 <lchmod@@Base+0x15b4>
   18d00:	b	18758 <lchmod@@Base+0x15e8>
   18d04:	mov	r8, #0
   18d08:	mov	r4, r1
   18d0c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18d10:	tst	r0, #1
   18d14:	beq	18390 <lchmod@@Base+0x1220>
   18d18:	b	18644 <lchmod@@Base+0x14d4>
   18d1c:	mov	r7, sl
   18d20:	b	18d28 <lchmod@@Base+0x1bb8>
   18d24:	mvn	r7, #0
   18d28:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18d2c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   18d30:	ldr	r2, [sp, #88]	; 0x58
   18d34:	eor	r0, r1, #2
   18d38:	orr	r0, r0, r9
   18d3c:	clz	r0, r0
   18d40:	lsr	r0, r0, #5
   18d44:	tst	r3, r0
   18d48:	bne	18dc0 <lchmod@@Base+0x1c50>
   18d4c:	subs	r0, r1, #2
   18d50:	movwne	r0, #1
   18d54:	orr	r0, r3, r0
   18d58:	tst	r0, #1
   18d5c:	ldreq	r0, [sp, #60]	; 0x3c
   18d60:	eoreq	r0, r0, #1
   18d64:	tsteq	r0, #1
   18d68:	bne	18e9c <lchmod@@Base+0x1d2c>
   18d6c:	tst	r4, #1
   18d70:	bne	18e60 <lchmod@@Base+0x1cf0>
   18d74:	ldr	r6, [sp, #56]	; 0x38
   18d78:	mov	r8, #0
   18d7c:	cmp	r6, #0
   18d80:	beq	18e98 <lchmod@@Base+0x1d28>
   18d84:	mov	r1, #0
   18d88:	mov	r4, #2
   18d8c:	cmp	r5, #0
   18d90:	mov	r0, r2
   18d94:	mov	r3, #0
   18d98:	str	r1, [sp, #84]	; 0x54
   18d9c:	beq	17be4 <lchmod@@Base+0xa74>
   18da0:	b	18e9c <lchmod@@Base+0x1d2c>
   18da4:	movw	r0, #47791	; 0xbaaf
   18da8:	movt	r0, #1
   18dac:	str	r0, [sp, #76]	; 0x4c
   18db0:	mov	r9, #0
   18db4:	tst	r8, #1
   18db8:	beq	17e7c <lchmod@@Base+0xd0c>
   18dbc:	b	17fbc <lchmod@@Base+0xe4c>
   18dc0:	ldr	r1, [sp, #88]	; 0x58
   18dc4:	mov	r0, #2
   18dc8:	tst	r1, #1
   18dcc:	movwne	r0, #4
   18dd0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   18dd4:	ldr	r1, [fp, #12]
   18dd8:	cmp	r2, #2
   18ddc:	moveq	r2, r0
   18de0:	b	18e18 <lchmod@@Base+0x1ca8>
   18de4:	ldr	ip, [fp, #-84]	; 0xffffffac
   18de8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18dec:	ldr	r1, [fp, #12]
   18df0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   18df4:	b	18e18 <lchmod@@Base+0x1ca8>
   18df8:	ldr	r1, [sp, #88]	; 0x58
   18dfc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18e00:	ldr	r5, [sp, #28]
   18e04:	mov	r0, #2
   18e08:	tst	r1, #1
   18e0c:	ldr	r1, [fp, #12]
   18e10:	movwne	r0, #4
   18e14:	mov	r2, r0
   18e18:	mov	r0, #0
   18e1c:	bic	r1, r1, #2
   18e20:	str	r2, [sp]
   18e24:	mov	r2, lr
   18e28:	str	r0, [sp, #8]
   18e2c:	ldr	r0, [sp, #72]	; 0x48
   18e30:	str	r1, [sp, #4]
   18e34:	mov	r1, r5
   18e38:	str	r0, [sp, #12]
   18e3c:	ldr	r0, [sp, #76]	; 0x4c
   18e40:	str	r0, [sp, #16]
   18e44:	mov	r0, ip
   18e48:	mov	r3, r7
   18e4c:	bl	17b58 <lchmod@@Base+0x9e8>
   18e50:	mov	r9, r0
   18e54:	mov	r0, r9
   18e58:	sub	sp, fp, #28
   18e5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e60:	mov	r0, #5
   18e64:	ldr	r1, [sp, #56]	; 0x38
   18e68:	ldr	r2, [fp, #-80]	; 0xffffffb0
   18e6c:	str	r0, [sp]
   18e70:	ldr	r0, [fp, #12]
   18e74:	str	r0, [sp, #4]
   18e78:	ldr	r0, [fp, #16]
   18e7c:	str	r0, [sp, #8]
   18e80:	ldr	r0, [sp, #72]	; 0x48
   18e84:	str	r0, [sp, #12]
   18e88:	ldr	r0, [sp, #76]	; 0x4c
   18e8c:	str	r0, [sp, #16]
   18e90:	ldr	r0, [fp, #-84]	; 0xffffffac
   18e94:	b	18e48 <lchmod@@Base+0x1cd8>
   18e98:	mov	r3, #0
   18e9c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   18ea0:	cmp	r1, #0
   18ea4:	beq	18ee0 <lchmod@@Base+0x1d70>
   18ea8:	ldr	r2, [fp, #-84]	; 0xffffffac
   18eac:	tst	r3, #1
   18eb0:	bne	18ee4 <lchmod@@Base+0x1d74>
   18eb4:	ldrb	r0, [r1]
   18eb8:	cmp	r0, #0
   18ebc:	beq	18ee4 <lchmod@@Base+0x1d74>
   18ec0:	add	r1, r1, #1
   18ec4:	cmp	r9, r5
   18ec8:	strbcc	r0, [r2, r9]
   18ecc:	add	r9, r9, #1
   18ed0:	ldrb	r0, [r1], #1
   18ed4:	cmp	r0, #0
   18ed8:	bne	18ec4 <lchmod@@Base+0x1d54>
   18edc:	b	18ee4 <lchmod@@Base+0x1d74>
   18ee0:	ldr	r2, [fp, #-84]	; 0xffffffac
   18ee4:	cmp	r9, r5
   18ee8:	movcc	r0, #0
   18eec:	strbcc	r0, [r2, r9]
   18ef0:	mov	r0, r9
   18ef4:	sub	sp, fp, #28
   18ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18efc:	mov	r0, #4
   18f00:	b	18dd0 <lchmod@@Base+0x1c60>
   18f04:	bl	11a3c <abort@plt>
   18f08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f0c:	add	fp, sp, #28
   18f10:	sub	sp, sp, #28
   18f14:	movw	r5, #53744	; 0xd1f0
   18f18:	cmp	r2, #0
   18f1c:	mov	r4, r1
   18f20:	mov	r7, r0
   18f24:	str	r0, [sp, #20]
   18f28:	movt	r5, #2
   18f2c:	movne	r5, r2
   18f30:	bl	118ec <__errno_location@plt>
   18f34:	mov	sl, r0
   18f38:	ldr	r2, [r5, #40]	; 0x28
   18f3c:	ldr	r3, [r5, #44]	; 0x2c
   18f40:	ldm	r5, {r0, r1}
   18f44:	orr	r8, r1, #1
   18f48:	add	r9, r5, #8
   18f4c:	mov	r1, #0
   18f50:	ldr	r6, [sl]
   18f54:	stm	sp, {r0, r8, r9}
   18f58:	mov	r0, #0
   18f5c:	str	r2, [sp, #12]
   18f60:	str	r3, [sp, #16]
   18f64:	mov	r2, r7
   18f68:	mov	r3, r4
   18f6c:	str	r6, [sp, #24]
   18f70:	mov	r6, r4
   18f74:	bl	17b58 <lchmod@@Base+0x9e8>
   18f78:	add	r7, r0, #1
   18f7c:	mov	r0, r7
   18f80:	bl	1a320 <lchmod@@Base+0x31b0>
   18f84:	mov	r4, r0
   18f88:	ldr	r0, [r5]
   18f8c:	ldr	r2, [r5, #44]	; 0x2c
   18f90:	ldr	r1, [r5, #40]	; 0x28
   18f94:	mov	r3, r6
   18f98:	stm	sp, {r0, r8, r9}
   18f9c:	str	r2, [sp, #16]
   18fa0:	ldr	r2, [sp, #20]
   18fa4:	str	r1, [sp, #12]
   18fa8:	mov	r0, r4
   18fac:	mov	r1, r7
   18fb0:	bl	17b58 <lchmod@@Base+0x9e8>
   18fb4:	ldr	r0, [sp, #24]
   18fb8:	str	r0, [sl]
   18fbc:	mov	r0, r4
   18fc0:	sub	sp, fp, #28
   18fc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fcc:	add	fp, sp, #28
   18fd0:	sub	sp, sp, #36	; 0x24
   18fd4:	movw	r8, #53744	; 0xd1f0
   18fd8:	cmp	r3, #0
   18fdc:	mov	r4, r2
   18fe0:	str	r2, [sp, #24]
   18fe4:	mov	r5, r1
   18fe8:	mov	r6, r0
   18fec:	str	r0, [sp, #20]
   18ff0:	movt	r8, #2
   18ff4:	movne	r8, r3
   18ff8:	bl	118ec <__errno_location@plt>
   18ffc:	str	r0, [sp, #28]
   19000:	ldr	r1, [r8, #40]	; 0x28
   19004:	ldr	r2, [r8, #44]	; 0x2c
   19008:	ldr	r7, [r0]
   1900c:	cmp	r4, #0
   19010:	add	sl, r8, #8
   19014:	mov	r0, #0
   19018:	ldm	r8, {r3, r9}
   1901c:	orreq	r9, r9, #1
   19020:	stm	sp, {r3, r9, sl}
   19024:	str	r1, [sp, #12]
   19028:	str	r2, [sp, #16]
   1902c:	mov	r1, #0
   19030:	mov	r2, r6
   19034:	mov	r3, r5
   19038:	str	r7, [sp, #32]
   1903c:	mov	r7, r5
   19040:	bl	17b58 <lchmod@@Base+0x9e8>
   19044:	add	r4, r0, #1
   19048:	mov	r5, r0
   1904c:	mov	r0, r4
   19050:	bl	1a320 <lchmod@@Base+0x31b0>
   19054:	mov	r6, r0
   19058:	ldr	r0, [r8]
   1905c:	ldr	r2, [r8, #44]	; 0x2c
   19060:	ldr	r1, [r8, #40]	; 0x28
   19064:	mov	r3, r7
   19068:	stm	sp, {r0, r9, sl}
   1906c:	str	r2, [sp, #16]
   19070:	ldr	r2, [sp, #20]
   19074:	str	r1, [sp, #12]
   19078:	mov	r0, r6
   1907c:	mov	r1, r4
   19080:	bl	17b58 <lchmod@@Base+0x9e8>
   19084:	ldr	r0, [sp, #24]
   19088:	ldr	r1, [sp, #32]
   1908c:	ldr	r2, [sp, #28]
   19090:	cmp	r0, #0
   19094:	str	r1, [r2]
   19098:	strne	r5, [r0]
   1909c:	mov	r0, r6
   190a0:	sub	sp, fp, #28
   190a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190a8:	push	{r4, r5, r6, r7, fp, lr}
   190ac:	add	fp, sp, #16
   190b0:	movw	r4, #53680	; 0xd1b0
   190b4:	movt	r4, #2
   190b8:	ldrd	r6, [r4]
   190bc:	cmp	r7, #2
   190c0:	blt	190ec <lchmod@@Base+0x1f7c>
   190c4:	add	r5, r6, #12
   190c8:	mov	r7, #0
   190cc:	ldr	r0, [r5, r7, lsl #3]
   190d0:	bl	1335c <__assert_fail@plt+0x18c0>
   190d4:	ldr	r1, [r4, #4]
   190d8:	add	r2, r7, #2
   190dc:	add	r0, r7, #1
   190e0:	mov	r7, r0
   190e4:	cmp	r2, r1
   190e8:	blt	190cc <lchmod@@Base+0x1f5c>
   190ec:	ldr	r0, [r6, #4]
   190f0:	movw	r5, #53792	; 0xd220
   190f4:	movt	r5, #2
   190f8:	cmp	r0, r5
   190fc:	beq	19110 <lchmod@@Base+0x1fa0>
   19100:	bl	1335c <__assert_fail@plt+0x18c0>
   19104:	mov	r0, #256	; 0x100
   19108:	str	r0, [r4, #8]
   1910c:	str	r5, [r4, #12]
   19110:	add	r5, r4, #8
   19114:	cmp	r6, r5
   19118:	beq	19128 <lchmod@@Base+0x1fb8>
   1911c:	mov	r0, r6
   19120:	bl	1335c <__assert_fail@plt+0x18c0>
   19124:	str	r5, [r4]
   19128:	mov	r0, #1
   1912c:	str	r0, [r4, #4]
   19130:	pop	{r4, r5, r6, r7, fp, pc}
   19134:	movw	r3, #53744	; 0xd1f0
   19138:	mvn	r2, #0
   1913c:	movt	r3, #2
   19140:	b	19144 <lchmod@@Base+0x1fd4>
   19144:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19148:	add	fp, sp, #28
   1914c:	sub	sp, sp, #44	; 0x2c
   19150:	mov	r7, r3
   19154:	str	r2, [sp, #36]	; 0x24
   19158:	str	r1, [sp, #32]
   1915c:	mov	r5, r0
   19160:	bl	118ec <__errno_location@plt>
   19164:	cmp	r5, #0
   19168:	bmi	192d0 <lchmod@@Base+0x2160>
   1916c:	cmn	r5, #-2147483647	; 0x80000001
   19170:	beq	192d0 <lchmod@@Base+0x2160>
   19174:	movw	r8, #53680	; 0xd1b0
   19178:	mov	r4, r0
   1917c:	ldr	r0, [r0]
   19180:	movt	r8, #2
   19184:	str	r4, [sp, #28]
   19188:	ldr	r1, [r8, #4]
   1918c:	ldr	r6, [r8]
   19190:	str	r0, [sp, #24]
   19194:	cmp	r1, r5
   19198:	ble	191a4 <lchmod@@Base+0x2034>
   1919c:	mov	sl, r6
   191a0:	b	1920c <lchmod@@Base+0x209c>
   191a4:	mov	r0, #8
   191a8:	add	r9, r8, #8
   191ac:	str	r1, [fp, #-32]	; 0xffffffe0
   191b0:	sub	r1, r5, r1
   191b4:	mvn	r3, #-2147483648	; 0x80000000
   191b8:	str	r0, [sp]
   191bc:	subs	r0, r6, r9
   191c0:	add	r2, r1, #1
   191c4:	sub	r1, fp, #32
   191c8:	movne	r0, r6
   191cc:	bl	1a520 <lchmod@@Base+0x33b0>
   191d0:	mov	sl, r0
   191d4:	cmp	r6, r9
   191d8:	str	r0, [r8]
   191dc:	bne	191e8 <lchmod@@Base+0x2078>
   191e0:	ldrd	r0, [r8, #8]
   191e4:	stm	sl, {r0, r1}
   191e8:	ldr	r1, [r8, #4]
   191ec:	ldr	r2, [fp, #-32]	; 0xffffffe0
   191f0:	add	r0, sl, r1, lsl #3
   191f4:	sub	r1, r2, r1
   191f8:	lsl	r2, r1, #3
   191fc:	mov	r1, #0
   19200:	bl	11910 <memset@plt>
   19204:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19208:	str	r0, [r8, #4]
   1920c:	mov	r9, sl
   19210:	ldm	r7, {r0, r1}
   19214:	orr	r8, r1, #1
   19218:	add	r1, r7, #8
   1921c:	ldr	r2, [r7, #40]	; 0x28
   19220:	ldr	r3, [r7, #44]	; 0x2c
   19224:	ldr	r6, [r9, r5, lsl #3]!
   19228:	str	r1, [sp, #20]
   1922c:	ldr	r4, [r9, #4]!
   19230:	stm	sp, {r0, r8}
   19234:	add	r0, sp, #8
   19238:	stm	r0, {r1, r2, r3}
   1923c:	ldr	r2, [sp, #32]
   19240:	ldr	r3, [sp, #36]	; 0x24
   19244:	mov	r1, r6
   19248:	mov	r0, r4
   1924c:	bl	17b58 <lchmod@@Base+0x9e8>
   19250:	cmp	r6, r0
   19254:	bhi	192b8 <lchmod@@Base+0x2148>
   19258:	add	r6, r0, #1
   1925c:	movw	r0, #53792	; 0xd220
   19260:	movt	r0, #2
   19264:	str	r6, [sl, r5, lsl #3]
   19268:	cmp	r4, r0
   1926c:	beq	19278 <lchmod@@Base+0x2108>
   19270:	mov	r0, r4
   19274:	bl	1335c <__assert_fail@plt+0x18c0>
   19278:	mov	r0, r6
   1927c:	bl	1a320 <lchmod@@Base+0x31b0>
   19280:	str	r0, [r9]
   19284:	mov	r4, r0
   19288:	add	r3, sp, #8
   1928c:	ldr	r0, [r7]
   19290:	ldr	r1, [r7, #40]	; 0x28
   19294:	ldr	r2, [r7, #44]	; 0x2c
   19298:	stm	sp, {r0, r8}
   1929c:	ldr	r0, [sp, #20]
   192a0:	stm	r3, {r0, r1, r2}
   192a4:	ldr	r2, [sp, #32]
   192a8:	ldr	r3, [sp, #36]	; 0x24
   192ac:	mov	r0, r4
   192b0:	mov	r1, r6
   192b4:	bl	17b58 <lchmod@@Base+0x9e8>
   192b8:	ldr	r1, [sp, #24]
   192bc:	ldr	r0, [sp, #28]
   192c0:	str	r1, [r0]
   192c4:	mov	r0, r4
   192c8:	sub	sp, fp, #28
   192cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   192d0:	bl	11a3c <abort@plt>
   192d4:	movw	r3, #53744	; 0xd1f0
   192d8:	movt	r3, #2
   192dc:	b	19144 <lchmod@@Base+0x1fd4>
   192e0:	movw	r3, #53744	; 0xd1f0
   192e4:	mov	r1, r0
   192e8:	mov	r0, #0
   192ec:	mvn	r2, #0
   192f0:	movt	r3, #2
   192f4:	b	19144 <lchmod@@Base+0x1fd4>
   192f8:	movw	r3, #53744	; 0xd1f0
   192fc:	mov	r2, r1
   19300:	mov	r1, r0
   19304:	mov	r0, #0
   19308:	movt	r3, #2
   1930c:	b	19144 <lchmod@@Base+0x1fd4>
   19310:	push	{fp, lr}
   19314:	mov	fp, sp
   19318:	sub	sp, sp, #48	; 0x30
   1931c:	vmov.i32	q8, #0	; 0x00000000
   19320:	mov	ip, #32
   19324:	mov	r3, sp
   19328:	mov	lr, r2
   1932c:	cmp	r1, #10
   19330:	add	r2, r3, #16
   19334:	vst1.64	{d16-d17}, [r3], ip
   19338:	vst1.64	{d16-d17}, [r2]
   1933c:	vst1.64	{d16-d17}, [r3]
   19340:	beq	19360 <lchmod@@Base+0x21f0>
   19344:	str	r1, [sp]
   19348:	mov	r3, sp
   1934c:	mov	r1, lr
   19350:	mvn	r2, #0
   19354:	bl	19144 <lchmod@@Base+0x1fd4>
   19358:	mov	sp, fp
   1935c:	pop	{fp, pc}
   19360:	bl	11a3c <abort@plt>
   19364:	push	{r4, sl, fp, lr}
   19368:	add	fp, sp, #8
   1936c:	sub	sp, sp, #48	; 0x30
   19370:	vmov.i32	q8, #0	; 0x00000000
   19374:	mov	ip, r3
   19378:	mov	r3, sp
   1937c:	mov	lr, #32
   19380:	cmp	r1, #10
   19384:	add	r4, r3, #16
   19388:	vst1.64	{d16-d17}, [r3], lr
   1938c:	vst1.64	{d16-d17}, [r4]
   19390:	vst1.64	{d16-d17}, [r3]
   19394:	beq	193b4 <lchmod@@Base+0x2244>
   19398:	str	r1, [sp]
   1939c:	mov	r1, r2
   193a0:	mov	r3, sp
   193a4:	mov	r2, ip
   193a8:	bl	19144 <lchmod@@Base+0x1fd4>
   193ac:	sub	sp, fp, #8
   193b0:	pop	{r4, sl, fp, pc}
   193b4:	bl	11a3c <abort@plt>
   193b8:	push	{fp, lr}
   193bc:	mov	fp, sp
   193c0:	sub	sp, sp, #48	; 0x30
   193c4:	vmov.i32	q8, #0	; 0x00000000
   193c8:	mov	r3, sp
   193cc:	mov	ip, #32
   193d0:	cmp	r0, #10
   193d4:	add	r2, r3, #16
   193d8:	vst1.64	{d16-d17}, [r3], ip
   193dc:	vst1.64	{d16-d17}, [r2]
   193e0:	vst1.64	{d16-d17}, [r3]
   193e4:	beq	19404 <lchmod@@Base+0x2294>
   193e8:	str	r0, [sp]
   193ec:	mov	r3, sp
   193f0:	mov	r0, #0
   193f4:	mvn	r2, #0
   193f8:	bl	19144 <lchmod@@Base+0x1fd4>
   193fc:	mov	sp, fp
   19400:	pop	{fp, pc}
   19404:	bl	11a3c <abort@plt>
   19408:	push	{fp, lr}
   1940c:	mov	fp, sp
   19410:	sub	sp, sp, #48	; 0x30
   19414:	vmov.i32	q8, #0	; 0x00000000
   19418:	mov	r3, sp
   1941c:	mov	ip, #32
   19420:	cmp	r0, #10
   19424:	add	lr, r3, #16
   19428:	vst1.64	{d16-d17}, [r3], ip
   1942c:	vst1.64	{d16-d17}, [lr]
   19430:	vst1.64	{d16-d17}, [r3]
   19434:	beq	19450 <lchmod@@Base+0x22e0>
   19438:	str	r0, [sp]
   1943c:	mov	r3, sp
   19440:	mov	r0, #0
   19444:	bl	19144 <lchmod@@Base+0x1fd4>
   19448:	mov	sp, fp
   1944c:	pop	{fp, pc}
   19450:	bl	11a3c <abort@plt>
   19454:	push	{r4, sl, fp, lr}
   19458:	add	fp, sp, #8
   1945c:	sub	sp, sp, #48	; 0x30
   19460:	mov	lr, r0
   19464:	movw	r0, #53744	; 0xd1f0
   19468:	mov	ip, r1
   1946c:	mov	r1, #32
   19470:	mov	r4, #1
   19474:	movt	r0, #2
   19478:	add	r3, r0, #16
   1947c:	vld1.64	{d16-d17}, [r0], r1
   19480:	vld1.64	{d20-d21}, [r0]
   19484:	vld1.64	{d18-d19}, [r3]
   19488:	mov	r3, sp
   1948c:	add	r0, r3, #32
   19490:	add	r1, r3, #16
   19494:	vst1.64	{d20-d21}, [r0]
   19498:	mov	r0, #28
   1949c:	vst1.64	{d18-d19}, [r1]
   194a0:	mov	r1, r3
   194a4:	and	r0, r0, r2, lsr #3
   194a8:	and	r2, r2, #31
   194ac:	vst1.64	{d16-d17}, [r1], r0
   194b0:	ldr	r0, [r1, #8]
   194b4:	bic	r4, r4, r0, lsr r2
   194b8:	eor	r0, r0, r4, lsl r2
   194bc:	mov	r2, ip
   194c0:	str	r0, [r1, #8]
   194c4:	mov	r0, #0
   194c8:	mov	r1, lr
   194cc:	bl	19144 <lchmod@@Base+0x1fd4>
   194d0:	sub	sp, fp, #8
   194d4:	pop	{r4, sl, fp, pc}
   194d8:	push	{fp, lr}
   194dc:	mov	fp, sp
   194e0:	sub	sp, sp, #48	; 0x30
   194e4:	mov	ip, r0
   194e8:	movw	r0, #53744	; 0xd1f0
   194ec:	mov	r2, #32
   194f0:	movt	r0, #2
   194f4:	add	r3, r0, #16
   194f8:	vld1.64	{d16-d17}, [r0], r2
   194fc:	vld1.64	{d20-d21}, [r0]
   19500:	vld1.64	{d18-d19}, [r3]
   19504:	mov	r3, sp
   19508:	add	r0, r3, #32
   1950c:	add	r2, r3, #16
   19510:	vst1.64	{d20-d21}, [r0]
   19514:	mov	r0, #28
   19518:	vst1.64	{d18-d19}, [r2]
   1951c:	mov	r2, r3
   19520:	and	r0, r0, r1, lsr #3
   19524:	and	r1, r1, #31
   19528:	vst1.64	{d16-d17}, [r2], r0
   1952c:	mov	r0, #1
   19530:	ldr	lr, [r2, #8]
   19534:	bic	r0, r0, lr, lsr r1
   19538:	eor	r0, lr, r0, lsl r1
   1953c:	mov	r1, ip
   19540:	str	r0, [r2, #8]
   19544:	mov	r0, #0
   19548:	mvn	r2, #0
   1954c:	bl	19144 <lchmod@@Base+0x1fd4>
   19550:	mov	sp, fp
   19554:	pop	{fp, pc}
   19558:	push	{fp, lr}
   1955c:	mov	fp, sp
   19560:	sub	sp, sp, #48	; 0x30
   19564:	mov	r1, r0
   19568:	movw	r0, #53744	; 0xd1f0
   1956c:	mov	r3, #32
   19570:	movt	r0, #2
   19574:	add	r2, r0, #16
   19578:	vld1.64	{d16-d17}, [r0], r3
   1957c:	mov	r3, sp
   19580:	vld1.64	{d18-d19}, [r2]
   19584:	vld1.64	{d20-d21}, [r0]
   19588:	add	r2, r3, #16
   1958c:	add	r0, r3, #32
   19590:	vst1.64	{d18-d19}, [r2]
   19594:	vst1.64	{d20-d21}, [r0]
   19598:	mov	r0, #12
   1959c:	mov	r2, r3
   195a0:	vst1.64	{d16-d17}, [r2], r0
   195a4:	ldr	r0, [r2]
   195a8:	orr	r0, r0, #67108864	; 0x4000000
   195ac:	str	r0, [r2]
   195b0:	mov	r0, #0
   195b4:	mvn	r2, #0
   195b8:	bl	19144 <lchmod@@Base+0x1fd4>
   195bc:	mov	sp, fp
   195c0:	pop	{fp, pc}
   195c4:	push	{fp, lr}
   195c8:	mov	fp, sp
   195cc:	sub	sp, sp, #48	; 0x30
   195d0:	mov	ip, r1
   195d4:	mov	r1, r0
   195d8:	movw	r0, #53744	; 0xd1f0
   195dc:	mov	r2, #32
   195e0:	movt	r0, #2
   195e4:	add	r3, r0, #16
   195e8:	vld1.64	{d16-d17}, [r0], r2
   195ec:	vld1.64	{d18-d19}, [r3]
   195f0:	vld1.64	{d20-d21}, [r0]
   195f4:	mov	r3, sp
   195f8:	add	r2, r3, #16
   195fc:	add	r0, r3, #32
   19600:	vst1.64	{d18-d19}, [r2]
   19604:	vst1.64	{d20-d21}, [r0]
   19608:	mov	r0, #12
   1960c:	mov	r2, r3
   19610:	vst1.64	{d16-d17}, [r2], r0
   19614:	ldr	r0, [r2]
   19618:	orr	r0, r0, #67108864	; 0x4000000
   1961c:	str	r0, [r2]
   19620:	mov	r0, #0
   19624:	mov	r2, ip
   19628:	bl	19144 <lchmod@@Base+0x1fd4>
   1962c:	mov	sp, fp
   19630:	pop	{fp, pc}
   19634:	push	{r4, sl, fp, lr}
   19638:	add	fp, sp, #8
   1963c:	sub	sp, sp, #96	; 0x60
   19640:	vmov.i32	q8, #0	; 0x00000000
   19644:	mov	ip, r2
   19648:	mov	r2, sp
   1964c:	mov	r4, #28
   19650:	cmp	r1, #10
   19654:	mov	r3, r2
   19658:	add	lr, r2, #16
   1965c:	vst1.64	{d16-d17}, [r3], r4
   19660:	vst1.64	{d16-d17}, [lr]
   19664:	vst1.32	{d16-d17}, [r3]
   19668:	beq	196b8 <lchmod@@Base+0x2548>
   1966c:	vld1.64	{d16-d17}, [r2], r4
   19670:	vld1.64	{d18-d19}, [lr]
   19674:	add	r3, sp, #48	; 0x30
   19678:	vld1.32	{d20-d21}, [r2]
   1967c:	add	r2, r3, #20
   19680:	add	r4, r3, #4
   19684:	vst1.32	{d18-d19}, [r2]
   19688:	add	r2, r3, #32
   1968c:	vst1.32	{d16-d17}, [r4]
   19690:	vst1.32	{d20-d21}, [r2]
   19694:	str	r1, [sp, #48]	; 0x30
   19698:	mvn	r2, #0
   1969c:	ldr	r1, [sp, #60]	; 0x3c
   196a0:	orr	r1, r1, #67108864	; 0x4000000
   196a4:	str	r1, [sp, #60]	; 0x3c
   196a8:	mov	r1, ip
   196ac:	bl	19144 <lchmod@@Base+0x1fd4>
   196b0:	sub	sp, fp, #8
   196b4:	pop	{r4, sl, fp, pc}
   196b8:	bl	11a3c <abort@plt>
   196bc:	push	{r4, r5, r6, sl, fp, lr}
   196c0:	add	fp, sp, #16
   196c4:	sub	sp, sp, #48	; 0x30
   196c8:	mov	ip, r3
   196cc:	movw	r3, #53744	; 0xd1f0
   196d0:	mov	r6, #32
   196d4:	cmp	r1, #0
   196d8:	mov	r4, sp
   196dc:	movt	r3, #2
   196e0:	cmpne	r2, #0
   196e4:	add	r5, r4, #16
   196e8:	add	lr, r3, #16
   196ec:	vld1.64	{d16-d17}, [r3], r6
   196f0:	vld1.64	{d18-d19}, [lr]
   196f4:	vld1.64	{d20-d21}, [r3]
   196f8:	mov	r3, #10
   196fc:	vst1.64	{d16-d17}, [r4], r6
   19700:	vst1.64	{d18-d19}, [r5]
   19704:	vst1.64	{d20-d21}, [r4]
   19708:	str	r3, [sp]
   1970c:	bne	19714 <lchmod@@Base+0x25a4>
   19710:	bl	11a3c <abort@plt>
   19714:	str	r2, [sp, #44]	; 0x2c
   19718:	str	r1, [sp, #40]	; 0x28
   1971c:	mov	r3, sp
   19720:	mov	r1, ip
   19724:	mvn	r2, #0
   19728:	bl	19144 <lchmod@@Base+0x1fd4>
   1972c:	sub	sp, fp, #16
   19730:	pop	{r4, r5, r6, sl, fp, pc}
   19734:	push	{r4, r5, r6, sl, fp, lr}
   19738:	add	fp, sp, #16
   1973c:	sub	sp, sp, #48	; 0x30
   19740:	mov	lr, r3
   19744:	movw	r3, #53744	; 0xd1f0
   19748:	mov	r6, #32
   1974c:	cmp	r1, #0
   19750:	mov	r4, sp
   19754:	movt	r3, #2
   19758:	cmpne	r2, #0
   1975c:	add	r5, r4, #16
   19760:	add	ip, r3, #16
   19764:	vld1.64	{d16-d17}, [r3], r6
   19768:	vld1.64	{d18-d19}, [ip]
   1976c:	vld1.64	{d20-d21}, [r3]
   19770:	mov	r3, #10
   19774:	vst1.64	{d16-d17}, [r4], r6
   19778:	vst1.64	{d18-d19}, [r5]
   1977c:	vst1.64	{d20-d21}, [r4]
   19780:	str	r3, [sp]
   19784:	bne	1978c <lchmod@@Base+0x261c>
   19788:	bl	11a3c <abort@plt>
   1978c:	ldr	ip, [fp, #8]
   19790:	str	r2, [sp, #44]	; 0x2c
   19794:	str	r1, [sp, #40]	; 0x28
   19798:	mov	r3, sp
   1979c:	mov	r1, lr
   197a0:	mov	r2, ip
   197a4:	bl	19144 <lchmod@@Base+0x1fd4>
   197a8:	sub	sp, fp, #16
   197ac:	pop	{r4, r5, r6, sl, fp, pc}
   197b0:	push	{r4, sl, fp, lr}
   197b4:	add	fp, sp, #8
   197b8:	sub	sp, sp, #48	; 0x30
   197bc:	movw	r3, #53744	; 0xd1f0
   197c0:	mov	lr, #32
   197c4:	mov	ip, r2
   197c8:	cmp	r0, #0
   197cc:	movt	r3, #2
   197d0:	cmpne	r1, #0
   197d4:	add	r2, r3, #16
   197d8:	vld1.64	{d16-d17}, [r3], lr
   197dc:	vld1.64	{d20-d21}, [r3]
   197e0:	vld1.64	{d18-d19}, [r2]
   197e4:	mov	r2, sp
   197e8:	add	r4, r2, #16
   197ec:	vst1.64	{d16-d17}, [r2], lr
   197f0:	vst1.64	{d20-d21}, [r2]
   197f4:	mov	r2, #10
   197f8:	vst1.64	{d18-d19}, [r4]
   197fc:	str	r2, [sp]
   19800:	bne	19808 <lchmod@@Base+0x2698>
   19804:	bl	11a3c <abort@plt>
   19808:	str	r1, [sp, #44]	; 0x2c
   1980c:	str	r0, [sp, #40]	; 0x28
   19810:	mov	r3, sp
   19814:	mov	r0, #0
   19818:	mov	r1, ip
   1981c:	mvn	r2, #0
   19820:	bl	19144 <lchmod@@Base+0x1fd4>
   19824:	sub	sp, fp, #8
   19828:	pop	{r4, sl, fp, pc}
   1982c:	push	{r4, r5, fp, lr}
   19830:	add	fp, sp, #8
   19834:	sub	sp, sp, #48	; 0x30
   19838:	mov	ip, r3
   1983c:	movw	r3, #53744	; 0xd1f0
   19840:	mov	r4, #32
   19844:	mov	lr, r2
   19848:	cmp	r0, #0
   1984c:	movt	r3, #2
   19850:	cmpne	r1, #0
   19854:	add	r2, r3, #16
   19858:	vld1.64	{d16-d17}, [r3], r4
   1985c:	vld1.64	{d20-d21}, [r3]
   19860:	vld1.64	{d18-d19}, [r2]
   19864:	mov	r2, sp
   19868:	add	r5, r2, #16
   1986c:	vst1.64	{d16-d17}, [r2], r4
   19870:	vst1.64	{d20-d21}, [r2]
   19874:	mov	r2, #10
   19878:	vst1.64	{d18-d19}, [r5]
   1987c:	str	r2, [sp]
   19880:	bne	19888 <lchmod@@Base+0x2718>
   19884:	bl	11a3c <abort@plt>
   19888:	str	r1, [sp, #44]	; 0x2c
   1988c:	str	r0, [sp, #40]	; 0x28
   19890:	mov	r3, sp
   19894:	mov	r0, #0
   19898:	mov	r1, lr
   1989c:	mov	r2, ip
   198a0:	bl	19144 <lchmod@@Base+0x1fd4>
   198a4:	sub	sp, fp, #8
   198a8:	pop	{r4, r5, fp, pc}
   198ac:	movw	r3, #53632	; 0xd180
   198b0:	movt	r3, #2
   198b4:	b	19144 <lchmod@@Base+0x1fd4>
   198b8:	movw	r3, #53632	; 0xd180
   198bc:	mov	r2, r1
   198c0:	mov	r1, r0
   198c4:	mov	r0, #0
   198c8:	movt	r3, #2
   198cc:	b	19144 <lchmod@@Base+0x1fd4>
   198d0:	movw	r3, #53632	; 0xd180
   198d4:	mvn	r2, #0
   198d8:	movt	r3, #2
   198dc:	b	19144 <lchmod@@Base+0x1fd4>
   198e0:	movw	r3, #53632	; 0xd180
   198e4:	mov	r1, r0
   198e8:	mov	r0, #0
   198ec:	mvn	r2, #0
   198f0:	movt	r3, #2
   198f4:	b	19144 <lchmod@@Base+0x1fd4>
   198f8:	push	{r4, r5, r6, sl, fp, lr}
   198fc:	add	fp, sp, #16
   19900:	ldr	r4, [r0], #8
   19904:	mov	r5, r1
   19908:	cmp	r4, r0
   1990c:	beq	19930 <lchmod@@Base+0x27c0>
   19910:	mov	r0, r4
   19914:	mov	r1, r5
   19918:	bl	1a970 <lchmod@@Base+0x3800>
   1991c:	cmp	r0, #0
   19920:	mov	r6, r0
   19924:	moveq	r6, r4
   19928:	mov	r0, r6
   1992c:	pop	{r4, r5, r6, sl, fp, pc}
   19930:	mov	r0, r5
   19934:	bl	1a940 <lchmod@@Base+0x37d0>
   19938:	cmp	r0, #0
   1993c:	beq	19958 <lchmod@@Base+0x27e8>
   19940:	mov	r1, r4
   19944:	mov	r2, r5
   19948:	mov	r6, r0
   1994c:	bl	11730 <memcpy@plt>
   19950:	mov	r0, r6
   19954:	pop	{r4, r5, r6, sl, fp, pc}
   19958:	mov	r6, #0
   1995c:	mov	r0, r6
   19960:	pop	{r4, r5, r6, sl, fp, pc}
   19964:	push	{r4, r5, r6, sl, fp, lr}
   19968:	add	fp, sp, #16
   1996c:	mov	r4, r0
   19970:	add	r6, r0, #8
   19974:	ldrd	r0, [r0]
   19978:	lsl	r5, r1, #1
   1997c:	cmp	r0, r6
   19980:	beq	1998c <lchmod@@Base+0x281c>
   19984:	bl	1335c <__assert_fail@plt+0x18c0>
   19988:	ldr	r1, [r4, #4]
   1998c:	cmp	r5, r1
   19990:	bcc	199b4 <lchmod@@Base+0x2844>
   19994:	mov	r0, r5
   19998:	bl	1a940 <lchmod@@Base+0x37d0>
   1999c:	cmp	r0, #0
   199a0:	strne	r0, [r4]
   199a4:	movne	r0, #1
   199a8:	strne	r5, [r4, #4]
   199ac:	popne	{r4, r5, r6, sl, fp, pc}
   199b0:	b	199c0 <lchmod@@Base+0x2850>
   199b4:	bl	118ec <__errno_location@plt>
   199b8:	mov	r1, #12
   199bc:	str	r1, [r0]
   199c0:	mov	r0, #0
   199c4:	mov	r5, #1024	; 0x400
   199c8:	str	r6, [r4]
   199cc:	str	r5, [r4, #4]
   199d0:	pop	{r4, r5, r6, sl, fp, pc}
   199d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   199d8:	add	fp, sp, #24
   199dc:	ldrd	r8, [r0]
   199e0:	add	r7, r0, #8
   199e4:	mov	r4, r0
   199e8:	lsl	r5, r9, #1
   199ec:	cmp	r8, r7
   199f0:	beq	19a24 <lchmod@@Base+0x28b4>
   199f4:	cmp	r5, r9
   199f8:	bcc	19a5c <lchmod@@Base+0x28ec>
   199fc:	mov	r0, r8
   19a00:	mov	r1, r5
   19a04:	bl	1a970 <lchmod@@Base+0x3800>
   19a08:	mov	r6, r0
   19a0c:	cmp	r0, #0
   19a10:	beq	19a6c <lchmod@@Base+0x28fc>
   19a14:	mov	r0, #1
   19a18:	str	r6, [r4]
   19a1c:	str	r5, [r4, #4]
   19a20:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19a24:	mov	r0, r5
   19a28:	bl	1a940 <lchmod@@Base+0x37d0>
   19a2c:	cmp	r0, #0
   19a30:	beq	19a54 <lchmod@@Base+0x28e4>
   19a34:	ldr	r2, [r4, #4]
   19a38:	mov	r1, r8
   19a3c:	mov	r6, r0
   19a40:	bl	11730 <memcpy@plt>
   19a44:	mov	r0, #1
   19a48:	str	r6, [r4]
   19a4c:	str	r5, [r4, #4]
   19a50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19a54:	mov	r0, #0
   19a58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19a5c:	bl	118ec <__errno_location@plt>
   19a60:	mov	r1, #12
   19a64:	str	r1, [r0]
   19a68:	b	19a70 <lchmod@@Base+0x2900>
   19a6c:	ldr	r8, [r4]
   19a70:	mov	r0, r8
   19a74:	bl	1335c <__assert_fail@plt+0x18c0>
   19a78:	mov	r0, #0
   19a7c:	mov	r5, #1024	; 0x400
   19a80:	str	r7, [r4]
   19a84:	str	r5, [r4, #4]
   19a88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19a8c:	push	{r4, r5, fp, lr}
   19a90:	add	fp, sp, #8
   19a94:	mov	r4, r1
   19a98:	bl	118a4 <getfilecon@plt>
   19a9c:	cmp	r0, #10
   19aa0:	beq	19ab8 <lchmod@@Base+0x2948>
   19aa4:	cmp	r0, #0
   19aa8:	bne	19afc <lchmod@@Base+0x298c>
   19aac:	bl	118ec <__errno_location@plt>
   19ab0:	mov	r1, #95	; 0x5f
   19ab4:	b	19af4 <lchmod@@Base+0x2984>
   19ab8:	ldr	r5, [r4]
   19abc:	movw	r1, #47880	; 0xbb08
   19ac0:	movt	r1, #1
   19ac4:	mov	r0, r5
   19ac8:	bl	116d0 <strcmp@plt>
   19acc:	mov	r1, r0
   19ad0:	mov	r0, #10
   19ad4:	cmp	r1, #0
   19ad8:	popne	{r4, r5, fp, pc}
   19adc:	mov	r0, r5
   19ae0:	bl	119dc <freecon@plt>
   19ae4:	mov	r0, #0
   19ae8:	str	r0, [r4]
   19aec:	bl	118ec <__errno_location@plt>
   19af0:	mov	r1, #61	; 0x3d
   19af4:	str	r1, [r0]
   19af8:	mvn	r0, #0
   19afc:	pop	{r4, r5, fp, pc}
   19b00:	push	{r4, r5, fp, lr}
   19b04:	add	fp, sp, #8
   19b08:	mov	r4, r1
   19b0c:	bl	1182c <lgetfilecon@plt>
   19b10:	cmp	r0, #10
   19b14:	beq	19b2c <lchmod@@Base+0x29bc>
   19b18:	cmp	r0, #0
   19b1c:	bne	19b70 <lchmod@@Base+0x2a00>
   19b20:	bl	118ec <__errno_location@plt>
   19b24:	mov	r1, #95	; 0x5f
   19b28:	b	19b68 <lchmod@@Base+0x29f8>
   19b2c:	ldr	r5, [r4]
   19b30:	movw	r1, #47880	; 0xbb08
   19b34:	movt	r1, #1
   19b38:	mov	r0, r5
   19b3c:	bl	116d0 <strcmp@plt>
   19b40:	mov	r1, r0
   19b44:	mov	r0, #10
   19b48:	cmp	r1, #0
   19b4c:	popne	{r4, r5, fp, pc}
   19b50:	mov	r0, r5
   19b54:	bl	119dc <freecon@plt>
   19b58:	mov	r0, #0
   19b5c:	str	r0, [r4]
   19b60:	bl	118ec <__errno_location@plt>
   19b64:	mov	r1, #61	; 0x3d
   19b68:	str	r1, [r0]
   19b6c:	mvn	r0, #0
   19b70:	pop	{r4, r5, fp, pc}
   19b74:	push	{r4, r5, fp, lr}
   19b78:	add	fp, sp, #8
   19b7c:	mov	r4, r1
   19b80:	bl	11778 <fgetfilecon@plt>
   19b84:	cmp	r0, #10
   19b88:	beq	19ba0 <lchmod@@Base+0x2a30>
   19b8c:	cmp	r0, #0
   19b90:	bne	19be4 <lchmod@@Base+0x2a74>
   19b94:	bl	118ec <__errno_location@plt>
   19b98:	mov	r1, #95	; 0x5f
   19b9c:	b	19bdc <lchmod@@Base+0x2a6c>
   19ba0:	ldr	r5, [r4]
   19ba4:	movw	r1, #47880	; 0xbb08
   19ba8:	movt	r1, #1
   19bac:	mov	r0, r5
   19bb0:	bl	116d0 <strcmp@plt>
   19bb4:	mov	r1, r0
   19bb8:	mov	r0, #10
   19bbc:	cmp	r1, #0
   19bc0:	popne	{r4, r5, fp, pc}
   19bc4:	mov	r0, r5
   19bc8:	bl	119dc <freecon@plt>
   19bcc:	mov	r0, #0
   19bd0:	str	r0, [r4]
   19bd4:	bl	118ec <__errno_location@plt>
   19bd8:	mov	r1, #61	; 0x3d
   19bdc:	str	r1, [r0]
   19be0:	mvn	r0, #0
   19be4:	pop	{r4, r5, fp, pc}
   19be8:	push	{r4, r5, r6, r7, fp, lr}
   19bec:	add	fp, sp, #16
   19bf0:	mov	r4, r0
   19bf4:	cmp	r0, #2
   19bf8:	bhi	19c28 <lchmod@@Base+0x2ab8>
   19bfc:	mov	r0, r4
   19c00:	bl	1b0a8 <lchmod@@Base+0x3f38>
   19c04:	mov	r5, r0
   19c08:	bl	118ec <__errno_location@plt>
   19c0c:	ldr	r7, [r0]
   19c10:	mov	r6, r0
   19c14:	mov	r0, r4
   19c18:	bl	11a48 <close@plt>
   19c1c:	mov	r0, r5
   19c20:	str	r7, [r6]
   19c24:	pop	{r4, r5, r6, r7, fp, pc}
   19c28:	mov	r0, r4
   19c2c:	pop	{r4, r5, r6, r7, fp, pc}
   19c30:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19c34:	add	fp, sp, #24
   19c38:	sub	sp, sp, #32
   19c3c:	ldr	r6, [fp, #12]
   19c40:	ldr	r7, [fp, #8]
   19c44:	mov	r4, r2
   19c48:	mov	r8, r0
   19c4c:	cmp	r1, #0
   19c50:	beq	19c78 <lchmod@@Base+0x2b08>
   19c54:	movw	r2, #47890	; 0xbb12
   19c58:	mov	r5, r1
   19c5c:	str	r3, [sp, #4]
   19c60:	str	r4, [sp]
   19c64:	mov	r0, r8
   19c68:	mov	r1, #1
   19c6c:	movt	r2, #1
   19c70:	mov	r3, r5
   19c74:	b	19c90 <lchmod@@Base+0x2b20>
   19c78:	movw	r2, #47902	; 0xbb1e
   19c7c:	str	r3, [sp]
   19c80:	mov	r0, r8
   19c84:	mov	r1, #1
   19c88:	mov	r3, r4
   19c8c:	movt	r2, #1
   19c90:	bl	11934 <__fprintf_chk@plt>
   19c94:	movw	r1, #47909	; 0xbb25
   19c98:	mov	r0, #0
   19c9c:	mov	r2, #5
   19ca0:	movt	r1, #1
   19ca4:	bl	11754 <dcgettext@plt>
   19ca8:	movw	r2, #48627	; 0xbdf3
   19cac:	mov	r3, r0
   19cb0:	movw	r0, #2022	; 0x7e6
   19cb4:	mov	r1, #1
   19cb8:	movt	r2, #1
   19cbc:	str	r0, [sp]
   19cc0:	mov	r0, r8
   19cc4:	bl	11934 <__fprintf_chk@plt>
   19cc8:	movw	r4, #47235	; 0xb883
   19ccc:	mov	r1, r8
   19cd0:	movt	r4, #1
   19cd4:	mov	r0, r4
   19cd8:	bl	116ac <fputs_unlocked@plt>
   19cdc:	movw	r1, #47913	; 0xbb29
   19ce0:	mov	r0, #0
   19ce4:	mov	r2, #5
   19ce8:	movt	r1, #1
   19cec:	bl	11754 <dcgettext@plt>
   19cf0:	movw	r3, #48084	; 0xbbd4
   19cf4:	mov	r2, r0
   19cf8:	mov	r0, r8
   19cfc:	mov	r1, #1
   19d00:	movt	r3, #1
   19d04:	bl	11934 <__fprintf_chk@plt>
   19d08:	mov	r0, r4
   19d0c:	mov	r1, r8
   19d10:	bl	116ac <fputs_unlocked@plt>
   19d14:	cmp	r6, #9
   19d18:	bhi	19d54 <lchmod@@Base+0x2be4>
   19d1c:	add	r0, pc, #0
   19d20:	ldr	pc, [r0, r6, lsl #2]
   19d24:	andeq	r9, r1, ip, asr #26
   19d28:	andeq	r9, r1, r0, ror #26
   19d2c:	muleq	r1, r0, sp
   19d30:			; <UNDEFINED> instruction: 0x00019db8
   19d34:	andeq	r9, r1, r0, ror #27
   19d38:	andeq	r9, r1, r8, lsl #28
   19d3c:	andeq	r9, r1, r0, lsr lr
   19d40:	andeq	r9, r1, r8, ror #28
   19d44:	andeq	r9, r1, r0, lsl pc
   19d48:			; <UNDEFINED> instruction: 0x00019eb8
   19d4c:	sub	sp, fp, #24
   19d50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19d54:	movw	r1, #48437	; 0xbd35
   19d58:	movt	r1, #1
   19d5c:	b	19ec0 <lchmod@@Base+0x2d50>
   19d60:	movw	r1, #48118	; 0xbbf6
   19d64:	mov	r0, #0
   19d68:	mov	r2, #5
   19d6c:	movt	r1, #1
   19d70:	bl	11754 <dcgettext@plt>
   19d74:	ldr	r3, [r7]
   19d78:	mov	r2, r0
   19d7c:	mov	r0, r8
   19d80:	mov	r1, #1
   19d84:	sub	sp, fp, #24
   19d88:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19d8c:	b	11934 <__fprintf_chk@plt>
   19d90:	movw	r1, #48134	; 0xbc06
   19d94:	mov	r0, #0
   19d98:	mov	r2, #5
   19d9c:	movt	r1, #1
   19da0:	bl	11754 <dcgettext@plt>
   19da4:	mov	r2, r0
   19da8:	ldr	r3, [r7]
   19dac:	ldr	r0, [r7, #4]
   19db0:	str	r0, [sp]
   19db4:	b	19ea4 <lchmod@@Base+0x2d34>
   19db8:	movw	r1, #48157	; 0xbc1d
   19dbc:	mov	r0, #0
   19dc0:	mov	r2, #5
   19dc4:	movt	r1, #1
   19dc8:	bl	11754 <dcgettext@plt>
   19dcc:	mov	r2, r0
   19dd0:	ldr	r3, [r7]
   19dd4:	ldmib	r7, {r0, r1}
   19dd8:	stm	sp, {r0, r1}
   19ddc:	b	19ea4 <lchmod@@Base+0x2d34>
   19de0:	movw	r1, #48185	; 0xbc39
   19de4:	mov	r0, #0
   19de8:	mov	r2, #5
   19dec:	movt	r1, #1
   19df0:	bl	11754 <dcgettext@plt>
   19df4:	ldr	r3, [r7]
   19df8:	mov	r2, r0
   19dfc:	ldmib	r7, {r0, r1, r7}
   19e00:	stm	sp, {r0, r1, r7}
   19e04:	b	19ea4 <lchmod@@Base+0x2d34>
   19e08:	movw	r1, #48217	; 0xbc59
   19e0c:	mov	r0, #0
   19e10:	mov	r2, #5
   19e14:	movt	r1, #1
   19e18:	bl	11754 <dcgettext@plt>
   19e1c:	ldr	r3, [r7]
   19e20:	mov	r2, r0
   19e24:	ldmib	r7, {r0, r1, r6, r7}
   19e28:	stm	sp, {r0, r1, r6, r7}
   19e2c:	b	19ea4 <lchmod@@Base+0x2d34>
   19e30:	movw	r1, #48253	; 0xbc7d
   19e34:	mov	r0, #0
   19e38:	mov	r2, #5
   19e3c:	movt	r1, #1
   19e40:	bl	11754 <dcgettext@plt>
   19e44:	mov	r2, r0
   19e48:	ldr	r3, [r7]
   19e4c:	ldmib	r7, {r0, r1, r6}
   19e50:	ldr	r5, [r7, #16]
   19e54:	ldr	r7, [r7, #20]
   19e58:	stm	sp, {r0, r1, r6}
   19e5c:	str	r5, [sp, #12]
   19e60:	str	r7, [sp, #16]
   19e64:	b	19ea4 <lchmod@@Base+0x2d34>
   19e68:	movw	r1, #48293	; 0xbca5
   19e6c:	mov	r0, #0
   19e70:	mov	r2, #5
   19e74:	movt	r1, #1
   19e78:	bl	11754 <dcgettext@plt>
   19e7c:	mov	r2, r0
   19e80:	ldr	r3, [r7]
   19e84:	ldmib	r7, {r0, r1, r6}
   19e88:	ldr	r5, [r7, #16]
   19e8c:	ldr	r4, [r7, #20]
   19e90:	ldr	r7, [r7, #24]
   19e94:	stm	sp, {r0, r1, r6}
   19e98:	str	r5, [sp, #12]
   19e9c:	str	r4, [sp, #16]
   19ea0:	str	r7, [sp, #20]
   19ea4:	mov	r0, r8
   19ea8:	mov	r1, #1
   19eac:	bl	11934 <__fprintf_chk@plt>
   19eb0:	sub	sp, fp, #24
   19eb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19eb8:	movw	r1, #48385	; 0xbd01
   19ebc:	movt	r1, #1
   19ec0:	mov	r0, #0
   19ec4:	mov	r2, #5
   19ec8:	bl	11754 <dcgettext@plt>
   19ecc:	mov	ip, r0
   19ed0:	ldr	r3, [r7]
   19ed4:	ldr	r0, [r7, #4]
   19ed8:	ldr	r1, [r7, #8]
   19edc:	ldr	r6, [r7, #12]
   19ee0:	ldr	r5, [r7, #16]
   19ee4:	ldr	r4, [r7, #20]
   19ee8:	ldr	r2, [r7, #24]
   19eec:	ldr	lr, [r7, #28]
   19ef0:	ldr	r7, [r7, #32]
   19ef4:	stm	sp, {r0, r1, r6}
   19ef8:	str	r5, [sp, #12]
   19efc:	str	r4, [sp, #16]
   19f00:	str	r2, [sp, #20]
   19f04:	str	lr, [sp, #24]
   19f08:	str	r7, [sp, #28]
   19f0c:	b	19f54 <lchmod@@Base+0x2de4>
   19f10:	movw	r1, #48337	; 0xbcd1
   19f14:	mov	r0, #0
   19f18:	mov	r2, #5
   19f1c:	movt	r1, #1
   19f20:	bl	11754 <dcgettext@plt>
   19f24:	mov	ip, r0
   19f28:	ldr	r3, [r7]
   19f2c:	ldmib	r7, {r0, r1, r6}
   19f30:	ldr	r5, [r7, #16]
   19f34:	ldr	r4, [r7, #20]
   19f38:	ldr	r2, [r7, #24]
   19f3c:	ldr	r7, [r7, #28]
   19f40:	stm	sp, {r0, r1, r6}
   19f44:	str	r5, [sp, #12]
   19f48:	str	r4, [sp, #16]
   19f4c:	str	r2, [sp, #20]
   19f50:	str	r7, [sp, #24]
   19f54:	mov	r0, r8
   19f58:	mov	r1, #1
   19f5c:	mov	r2, ip
   19f60:	bl	11934 <__fprintf_chk@plt>
   19f64:	sub	sp, fp, #24
   19f68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19f6c:	push	{r4, sl, fp, lr}
   19f70:	add	fp, sp, #8
   19f74:	sub	sp, sp, #8
   19f78:	ldr	ip, [fp, #8]
   19f7c:	mov	lr, #0
   19f80:	ldr	r4, [ip, lr, lsl #2]
   19f84:	add	lr, lr, #1
   19f88:	cmp	r4, #0
   19f8c:	bne	19f80 <lchmod@@Base+0x2e10>
   19f90:	sub	r4, lr, #1
   19f94:	str	ip, [sp]
   19f98:	str	r4, [sp, #4]
   19f9c:	bl	19c30 <lchmod@@Base+0x2ac0>
   19fa0:	sub	sp, fp, #8
   19fa4:	pop	{r4, sl, fp, pc}
   19fa8:	push	{fp, lr}
   19fac:	mov	fp, sp
   19fb0:	sub	sp, sp, #48	; 0x30
   19fb4:	ldr	ip, [fp, #8]
   19fb8:	ldr	lr, [ip]
   19fbc:	cmp	lr, #0
   19fc0:	str	lr, [sp, #8]
   19fc4:	beq	1a060 <lchmod@@Base+0x2ef0>
   19fc8:	ldr	lr, [ip, #4]
   19fcc:	cmp	lr, #0
   19fd0:	str	lr, [sp, #12]
   19fd4:	beq	1a068 <lchmod@@Base+0x2ef8>
   19fd8:	ldr	lr, [ip, #8]
   19fdc:	cmp	lr, #0
   19fe0:	str	lr, [sp, #16]
   19fe4:	beq	1a070 <lchmod@@Base+0x2f00>
   19fe8:	ldr	lr, [ip, #12]
   19fec:	cmp	lr, #0
   19ff0:	str	lr, [sp, #20]
   19ff4:	beq	1a078 <lchmod@@Base+0x2f08>
   19ff8:	ldr	lr, [ip, #16]
   19ffc:	cmp	lr, #0
   1a000:	str	lr, [sp, #24]
   1a004:	beq	1a080 <lchmod@@Base+0x2f10>
   1a008:	ldr	lr, [ip, #20]
   1a00c:	cmp	lr, #0
   1a010:	str	lr, [sp, #28]
   1a014:	beq	1a088 <lchmod@@Base+0x2f18>
   1a018:	ldr	lr, [ip, #24]
   1a01c:	cmp	lr, #0
   1a020:	str	lr, [sp, #32]
   1a024:	beq	1a090 <lchmod@@Base+0x2f20>
   1a028:	ldr	lr, [ip, #28]
   1a02c:	cmp	lr, #0
   1a030:	str	lr, [sp, #36]	; 0x24
   1a034:	beq	1a098 <lchmod@@Base+0x2f28>
   1a038:	ldr	lr, [ip, #32]
   1a03c:	cmp	lr, #0
   1a040:	str	lr, [sp, #40]	; 0x28
   1a044:	beq	1a0a0 <lchmod@@Base+0x2f30>
   1a048:	ldr	lr, [ip, #36]	; 0x24
   1a04c:	mov	ip, #10
   1a050:	cmp	lr, #0
   1a054:	str	lr, [sp, #44]	; 0x2c
   1a058:	movweq	ip, #9
   1a05c:	b	1a0a4 <lchmod@@Base+0x2f34>
   1a060:	mov	ip, #0
   1a064:	b	1a0a4 <lchmod@@Base+0x2f34>
   1a068:	mov	ip, #1
   1a06c:	b	1a0a4 <lchmod@@Base+0x2f34>
   1a070:	mov	ip, #2
   1a074:	b	1a0a4 <lchmod@@Base+0x2f34>
   1a078:	mov	ip, #3
   1a07c:	b	1a0a4 <lchmod@@Base+0x2f34>
   1a080:	mov	ip, #4
   1a084:	b	1a0a4 <lchmod@@Base+0x2f34>
   1a088:	mov	ip, #5
   1a08c:	b	1a0a4 <lchmod@@Base+0x2f34>
   1a090:	mov	ip, #6
   1a094:	b	1a0a4 <lchmod@@Base+0x2f34>
   1a098:	mov	ip, #7
   1a09c:	b	1a0a4 <lchmod@@Base+0x2f34>
   1a0a0:	mov	ip, #8
   1a0a4:	add	lr, sp, #8
   1a0a8:	str	ip, [sp, #4]
   1a0ac:	str	lr, [sp]
   1a0b0:	bl	19c30 <lchmod@@Base+0x2ac0>
   1a0b4:	mov	sp, fp
   1a0b8:	pop	{fp, pc}
   1a0bc:	push	{fp, lr}
   1a0c0:	mov	fp, sp
   1a0c4:	sub	sp, sp, #56	; 0x38
   1a0c8:	add	ip, fp, #8
   1a0cc:	str	ip, [sp, #12]
   1a0d0:	ldr	lr, [fp, #8]
   1a0d4:	cmp	lr, #0
   1a0d8:	str	lr, [sp, #16]
   1a0dc:	beq	1a178 <lchmod@@Base+0x3008>
   1a0e0:	ldr	lr, [ip, #4]
   1a0e4:	cmp	lr, #0
   1a0e8:	str	lr, [sp, #20]
   1a0ec:	beq	1a180 <lchmod@@Base+0x3010>
   1a0f0:	ldr	lr, [ip, #8]
   1a0f4:	cmp	lr, #0
   1a0f8:	str	lr, [sp, #24]
   1a0fc:	beq	1a188 <lchmod@@Base+0x3018>
   1a100:	ldr	lr, [ip, #12]
   1a104:	cmp	lr, #0
   1a108:	str	lr, [sp, #28]
   1a10c:	beq	1a190 <lchmod@@Base+0x3020>
   1a110:	ldr	lr, [ip, #16]
   1a114:	cmp	lr, #0
   1a118:	str	lr, [sp, #32]
   1a11c:	beq	1a198 <lchmod@@Base+0x3028>
   1a120:	ldr	lr, [ip, #20]
   1a124:	cmp	lr, #0
   1a128:	str	lr, [sp, #36]	; 0x24
   1a12c:	beq	1a1a0 <lchmod@@Base+0x3030>
   1a130:	ldr	lr, [ip, #24]
   1a134:	cmp	lr, #0
   1a138:	str	lr, [sp, #40]	; 0x28
   1a13c:	beq	1a1a8 <lchmod@@Base+0x3038>
   1a140:	ldr	lr, [ip, #28]
   1a144:	cmp	lr, #0
   1a148:	str	lr, [sp, #44]	; 0x2c
   1a14c:	beq	1a1b0 <lchmod@@Base+0x3040>
   1a150:	ldr	lr, [ip, #32]
   1a154:	cmp	lr, #0
   1a158:	str	lr, [sp, #48]	; 0x30
   1a15c:	beq	1a1b8 <lchmod@@Base+0x3048>
   1a160:	ldr	lr, [ip, #36]	; 0x24
   1a164:	mov	ip, #10
   1a168:	cmp	lr, #0
   1a16c:	str	lr, [sp, #52]	; 0x34
   1a170:	movweq	ip, #9
   1a174:	b	1a1bc <lchmod@@Base+0x304c>
   1a178:	mov	ip, #0
   1a17c:	b	1a1bc <lchmod@@Base+0x304c>
   1a180:	mov	ip, #1
   1a184:	b	1a1bc <lchmod@@Base+0x304c>
   1a188:	mov	ip, #2
   1a18c:	b	1a1bc <lchmod@@Base+0x304c>
   1a190:	mov	ip, #3
   1a194:	b	1a1bc <lchmod@@Base+0x304c>
   1a198:	mov	ip, #4
   1a19c:	b	1a1bc <lchmod@@Base+0x304c>
   1a1a0:	mov	ip, #5
   1a1a4:	b	1a1bc <lchmod@@Base+0x304c>
   1a1a8:	mov	ip, #6
   1a1ac:	b	1a1bc <lchmod@@Base+0x304c>
   1a1b0:	mov	ip, #7
   1a1b4:	b	1a1bc <lchmod@@Base+0x304c>
   1a1b8:	mov	ip, #8
   1a1bc:	add	lr, sp, #16
   1a1c0:	str	ip, [sp, #4]
   1a1c4:	str	lr, [sp]
   1a1c8:	bl	19c30 <lchmod@@Base+0x2ac0>
   1a1cc:	mov	sp, fp
   1a1d0:	pop	{fp, pc}
   1a1d4:	push	{fp, lr}
   1a1d8:	mov	fp, sp
   1a1dc:	movw	r0, #53716	; 0xd1d4
   1a1e0:	movt	r0, #2
   1a1e4:	ldr	r1, [r0]
   1a1e8:	movw	r0, #47235	; 0xb883
   1a1ec:	movt	r0, #1
   1a1f0:	bl	116ac <fputs_unlocked@plt>
   1a1f4:	movw	r1, #48497	; 0xbd71
   1a1f8:	mov	r0, #0
   1a1fc:	mov	r2, #5
   1a200:	movt	r1, #1
   1a204:	bl	11754 <dcgettext@plt>
   1a208:	movw	r2, #48517	; 0xbd85
   1a20c:	mov	r1, r0
   1a210:	mov	r0, #1
   1a214:	movt	r2, #1
   1a218:	bl	1191c <__printf_chk@plt>
   1a21c:	movw	r1, #48539	; 0xbd9b
   1a220:	mov	r0, #0
   1a224:	mov	r2, #5
   1a228:	movt	r1, #1
   1a22c:	bl	11754 <dcgettext@plt>
   1a230:	movw	r2, #46647	; 0xb637
   1a234:	movw	r3, #47044	; 0xb7c4
   1a238:	mov	r1, r0
   1a23c:	mov	r0, #1
   1a240:	movt	r2, #1
   1a244:	movt	r3, #1
   1a248:	bl	1191c <__printf_chk@plt>
   1a24c:	movw	r1, #48559	; 0xbdaf
   1a250:	mov	r0, #0
   1a254:	mov	r2, #5
   1a258:	movt	r1, #1
   1a25c:	bl	11754 <dcgettext@plt>
   1a260:	movw	r2, #48598	; 0xbdd6
   1a264:	mov	r1, r0
   1a268:	mov	r0, #1
   1a26c:	movt	r2, #1
   1a270:	pop	{fp, lr}
   1a274:	b	1191c <__printf_chk@plt>
   1a278:	push	{r4, r5, r6, sl, fp, lr}
   1a27c:	add	fp, sp, #16
   1a280:	mov	r4, r2
   1a284:	mov	r5, r1
   1a288:	mov	r6, r0
   1a28c:	bl	1b06c <lchmod@@Base+0x3efc>
   1a290:	cmp	r0, #0
   1a294:	popne	{r4, r5, r6, sl, fp, pc}
   1a298:	cmp	r6, #0
   1a29c:	beq	1a2b0 <lchmod@@Base+0x3140>
   1a2a0:	cmp	r5, #0
   1a2a4:	cmpne	r4, #0
   1a2a8:	bne	1a2b0 <lchmod@@Base+0x3140>
   1a2ac:	pop	{r4, r5, r6, sl, fp, pc}
   1a2b0:	bl	1a82c <lchmod@@Base+0x36bc>
   1a2b4:	push	{r4, r5, r6, sl, fp, lr}
   1a2b8:	add	fp, sp, #16
   1a2bc:	mov	r4, r2
   1a2c0:	mov	r5, r1
   1a2c4:	mov	r6, r0
   1a2c8:	bl	1b06c <lchmod@@Base+0x3efc>
   1a2cc:	cmp	r0, #0
   1a2d0:	popne	{r4, r5, r6, sl, fp, pc}
   1a2d4:	cmp	r6, #0
   1a2d8:	beq	1a2ec <lchmod@@Base+0x317c>
   1a2dc:	cmp	r5, #0
   1a2e0:	cmpne	r4, #0
   1a2e4:	bne	1a2ec <lchmod@@Base+0x317c>
   1a2e8:	pop	{r4, r5, r6, sl, fp, pc}
   1a2ec:	bl	1a82c <lchmod@@Base+0x36bc>
   1a2f0:	push	{fp, lr}
   1a2f4:	mov	fp, sp
   1a2f8:	bl	1a940 <lchmod@@Base+0x37d0>
   1a2fc:	cmp	r0, #0
   1a300:	popne	{fp, pc}
   1a304:	bl	1a82c <lchmod@@Base+0x36bc>
   1a308:	push	{fp, lr}
   1a30c:	mov	fp, sp
   1a310:	bl	1a940 <lchmod@@Base+0x37d0>
   1a314:	cmp	r0, #0
   1a318:	popne	{fp, pc}
   1a31c:	bl	1a82c <lchmod@@Base+0x36bc>
   1a320:	push	{fp, lr}
   1a324:	mov	fp, sp
   1a328:	bl	1a940 <lchmod@@Base+0x37d0>
   1a32c:	cmp	r0, #0
   1a330:	popne	{fp, pc}
   1a334:	bl	1a82c <lchmod@@Base+0x36bc>
   1a338:	push	{r4, r5, fp, lr}
   1a33c:	add	fp, sp, #8
   1a340:	mov	r4, r1
   1a344:	mov	r5, r0
   1a348:	bl	1a970 <lchmod@@Base+0x3800>
   1a34c:	cmp	r0, #0
   1a350:	popne	{r4, r5, fp, pc}
   1a354:	cmp	r5, #0
   1a358:	beq	1a368 <lchmod@@Base+0x31f8>
   1a35c:	cmp	r4, #0
   1a360:	bne	1a368 <lchmod@@Base+0x31f8>
   1a364:	pop	{r4, r5, fp, pc}
   1a368:	bl	1a82c <lchmod@@Base+0x36bc>
   1a36c:	push	{fp, lr}
   1a370:	mov	fp, sp
   1a374:	cmp	r1, #0
   1a378:	orreq	r1, r1, #1
   1a37c:	bl	1a970 <lchmod@@Base+0x3800>
   1a380:	cmp	r0, #0
   1a384:	popne	{fp, pc}
   1a388:	bl	1a82c <lchmod@@Base+0x36bc>
   1a38c:	push	{fp, lr}
   1a390:	mov	fp, sp
   1a394:	clz	r3, r2
   1a398:	lsr	ip, r3, #5
   1a39c:	clz	r3, r1
   1a3a0:	lsr	r3, r3, #5
   1a3a4:	orrs	r3, r3, ip
   1a3a8:	movwne	r1, #1
   1a3ac:	movwne	r2, #1
   1a3b0:	bl	1b06c <lchmod@@Base+0x3efc>
   1a3b4:	cmp	r0, #0
   1a3b8:	popne	{fp, pc}
   1a3bc:	bl	1a82c <lchmod@@Base+0x36bc>
   1a3c0:	push	{fp, lr}
   1a3c4:	mov	fp, sp
   1a3c8:	mov	r2, r1
   1a3cc:	mov	r1, r0
   1a3d0:	mov	r0, #0
   1a3d4:	bl	1b06c <lchmod@@Base+0x3efc>
   1a3d8:	cmp	r0, #0
   1a3dc:	popne	{fp, pc}
   1a3e0:	bl	1a82c <lchmod@@Base+0x36bc>
   1a3e4:	push	{fp, lr}
   1a3e8:	mov	fp, sp
   1a3ec:	mov	r2, r1
   1a3f0:	mov	r1, r0
   1a3f4:	clz	r0, r2
   1a3f8:	clz	r3, r1
   1a3fc:	lsr	r0, r0, #5
   1a400:	lsr	r3, r3, #5
   1a404:	orrs	r0, r3, r0
   1a408:	mov	r0, #0
   1a40c:	movwne	r1, #1
   1a410:	movwne	r2, #1
   1a414:	bl	1b06c <lchmod@@Base+0x3efc>
   1a418:	cmp	r0, #0
   1a41c:	popne	{fp, pc}
   1a420:	bl	1a82c <lchmod@@Base+0x36bc>
   1a424:	push	{r4, r5, r6, sl, fp, lr}
   1a428:	add	fp, sp, #16
   1a42c:	ldr	r5, [r1]
   1a430:	mov	r4, r1
   1a434:	mov	r6, r0
   1a438:	cmp	r0, #0
   1a43c:	beq	1a454 <lchmod@@Base+0x32e4>
   1a440:	mov	r0, #1
   1a444:	add	r0, r0, r5, lsr #1
   1a448:	adds	r5, r5, r0
   1a44c:	bcc	1a45c <lchmod@@Base+0x32ec>
   1a450:	b	1a498 <lchmod@@Base+0x3328>
   1a454:	cmp	r5, #0
   1a458:	movweq	r5, #64	; 0x40
   1a45c:	mov	r0, r6
   1a460:	mov	r1, r5
   1a464:	mov	r2, #1
   1a468:	bl	1b06c <lchmod@@Base+0x3efc>
   1a46c:	cmp	r5, #0
   1a470:	mov	r1, r5
   1a474:	movwne	r1, #1
   1a478:	cmp	r0, #0
   1a47c:	bne	1a490 <lchmod@@Base+0x3320>
   1a480:	clz	r2, r6
   1a484:	lsr	r2, r2, #5
   1a488:	orrs	r1, r2, r1
   1a48c:	bne	1a498 <lchmod@@Base+0x3328>
   1a490:	str	r5, [r4]
   1a494:	pop	{r4, r5, r6, sl, fp, pc}
   1a498:	bl	1a82c <lchmod@@Base+0x36bc>
   1a49c:	push	{r4, r5, r6, r7, fp, lr}
   1a4a0:	add	fp, sp, #16
   1a4a4:	ldr	r5, [r1]
   1a4a8:	mov	r6, r2
   1a4ac:	mov	r4, r1
   1a4b0:	mov	r7, r0
   1a4b4:	cmp	r0, #0
   1a4b8:	beq	1a4d0 <lchmod@@Base+0x3360>
   1a4bc:	mov	r0, #1
   1a4c0:	add	r0, r0, r5, lsr #1
   1a4c4:	adds	r5, r5, r0
   1a4c8:	bcc	1a4e8 <lchmod@@Base+0x3378>
   1a4cc:	b	1a51c <lchmod@@Base+0x33ac>
   1a4d0:	cmp	r5, #0
   1a4d4:	bne	1a4e8 <lchmod@@Base+0x3378>
   1a4d8:	mov	r0, #64	; 0x40
   1a4dc:	cmp	r6, #64	; 0x40
   1a4e0:	udiv	r5, r0, r6
   1a4e4:	addhi	r5, r5, #1
   1a4e8:	mov	r0, r7
   1a4ec:	mov	r1, r5
   1a4f0:	mov	r2, r6
   1a4f4:	bl	1b06c <lchmod@@Base+0x3efc>
   1a4f8:	cmp	r0, #0
   1a4fc:	bne	1a514 <lchmod@@Base+0x33a4>
   1a500:	cmp	r7, #0
   1a504:	beq	1a51c <lchmod@@Base+0x33ac>
   1a508:	cmp	r6, #0
   1a50c:	cmpne	r5, #0
   1a510:	bne	1a51c <lchmod@@Base+0x33ac>
   1a514:	str	r5, [r4]
   1a518:	pop	{r4, r5, r6, r7, fp, pc}
   1a51c:	bl	1a82c <lchmod@@Base+0x36bc>
   1a520:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a524:	add	fp, sp, #24
   1a528:	mov	r8, r1
   1a52c:	ldr	r1, [r1]
   1a530:	mov	r5, r0
   1a534:	add	r0, r1, r1, asr #1
   1a538:	cmp	r0, r1
   1a53c:	mvnvs	r0, #-2147483648	; 0x80000000
   1a540:	cmp	r0, r3
   1a544:	mov	r7, r0
   1a548:	movgt	r7, r3
   1a54c:	cmn	r3, #1
   1a550:	movle	r7, r0
   1a554:	ldr	r0, [fp, #8]
   1a558:	cmn	r0, #1
   1a55c:	ble	1a584 <lchmod@@Base+0x3414>
   1a560:	cmp	r0, #0
   1a564:	beq	1a5d8 <lchmod@@Base+0x3468>
   1a568:	cmn	r7, #1
   1a56c:	ble	1a5ac <lchmod@@Base+0x343c>
   1a570:	mvn	r4, #-2147483648	; 0x80000000
   1a574:	udiv	r6, r4, r0
   1a578:	cmp	r6, r7
   1a57c:	bge	1a5d8 <lchmod@@Base+0x3468>
   1a580:	b	1a5e8 <lchmod@@Base+0x3478>
   1a584:	cmn	r7, #1
   1a588:	ble	1a5c8 <lchmod@@Base+0x3458>
   1a58c:	cmn	r0, #1
   1a590:	beq	1a5d8 <lchmod@@Base+0x3468>
   1a594:	mov	r6, #-2147483648	; 0x80000000
   1a598:	mvn	r4, #-2147483648	; 0x80000000
   1a59c:	sdiv	r6, r6, r0
   1a5a0:	cmp	r6, r7
   1a5a4:	bge	1a5d8 <lchmod@@Base+0x3468>
   1a5a8:	b	1a5e8 <lchmod@@Base+0x3478>
   1a5ac:	beq	1a5d8 <lchmod@@Base+0x3468>
   1a5b0:	mov	r6, #-2147483648	; 0x80000000
   1a5b4:	mvn	r4, #-2147483648	; 0x80000000
   1a5b8:	sdiv	r6, r6, r7
   1a5bc:	cmp	r6, r0
   1a5c0:	bge	1a5d8 <lchmod@@Base+0x3468>
   1a5c4:	b	1a5e8 <lchmod@@Base+0x3478>
   1a5c8:	mvn	r4, #-2147483648	; 0x80000000
   1a5cc:	sdiv	r6, r4, r0
   1a5d0:	cmp	r7, r6
   1a5d4:	blt	1a5e8 <lchmod@@Base+0x3478>
   1a5d8:	mul	r6, r7, r0
   1a5dc:	mov	r4, #64	; 0x40
   1a5e0:	cmp	r6, #63	; 0x3f
   1a5e4:	bgt	1a5f0 <lchmod@@Base+0x3480>
   1a5e8:	sdiv	r7, r4, r0
   1a5ec:	mul	r6, r7, r0
   1a5f0:	cmp	r5, #0
   1a5f4:	moveq	r4, #0
   1a5f8:	streq	r4, [r8]
   1a5fc:	sub	r4, r7, r1
   1a600:	cmp	r4, r2
   1a604:	bge	1a6b0 <lchmod@@Base+0x3540>
   1a608:	add	r7, r1, r2
   1a60c:	mov	r6, #0
   1a610:	mov	r2, #0
   1a614:	cmp	r7, r3
   1a618:	movwgt	r6, #1
   1a61c:	cmn	r3, #1
   1a620:	movwgt	r2, #1
   1a624:	cmp	r7, r1
   1a628:	bvs	1a6e4 <lchmod@@Base+0x3574>
   1a62c:	ands	r1, r2, r6
   1a630:	bne	1a6e4 <lchmod@@Base+0x3574>
   1a634:	cmn	r0, #1
   1a638:	ble	1a660 <lchmod@@Base+0x34f0>
   1a63c:	cmp	r0, #0
   1a640:	beq	1a6ac <lchmod@@Base+0x353c>
   1a644:	cmn	r7, #1
   1a648:	ble	1a684 <lchmod@@Base+0x3514>
   1a64c:	mvn	r1, #-2147483648	; 0x80000000
   1a650:	udiv	r1, r1, r0
   1a654:	cmp	r1, r7
   1a658:	bge	1a6ac <lchmod@@Base+0x353c>
   1a65c:	b	1a6e4 <lchmod@@Base+0x3574>
   1a660:	cmn	r7, #1
   1a664:	ble	1a69c <lchmod@@Base+0x352c>
   1a668:	cmn	r0, #1
   1a66c:	beq	1a6ac <lchmod@@Base+0x353c>
   1a670:	mov	r1, #-2147483648	; 0x80000000
   1a674:	sdiv	r1, r1, r0
   1a678:	cmp	r1, r7
   1a67c:	bge	1a6ac <lchmod@@Base+0x353c>
   1a680:	b	1a6e4 <lchmod@@Base+0x3574>
   1a684:	beq	1a6ac <lchmod@@Base+0x353c>
   1a688:	mov	r1, #-2147483648	; 0x80000000
   1a68c:	sdiv	r1, r1, r7
   1a690:	cmp	r1, r0
   1a694:	bge	1a6ac <lchmod@@Base+0x353c>
   1a698:	b	1a6e4 <lchmod@@Base+0x3574>
   1a69c:	mvn	r1, #-2147483648	; 0x80000000
   1a6a0:	sdiv	r1, r1, r0
   1a6a4:	cmp	r7, r1
   1a6a8:	blt	1a6e4 <lchmod@@Base+0x3574>
   1a6ac:	mul	r6, r7, r0
   1a6b0:	mov	r0, r5
   1a6b4:	mov	r1, r6
   1a6b8:	bl	1a970 <lchmod@@Base+0x3800>
   1a6bc:	cmp	r6, #0
   1a6c0:	movwne	r6, #1
   1a6c4:	cmp	r0, #0
   1a6c8:	bne	1a6dc <lchmod@@Base+0x356c>
   1a6cc:	clz	r1, r5
   1a6d0:	lsr	r1, r1, #5
   1a6d4:	orrs	r1, r1, r6
   1a6d8:	bne	1a6e4 <lchmod@@Base+0x3574>
   1a6dc:	str	r7, [r8]
   1a6e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a6e4:	bl	1a82c <lchmod@@Base+0x36bc>
   1a6e8:	push	{fp, lr}
   1a6ec:	mov	fp, sp
   1a6f0:	mov	r1, #1
   1a6f4:	bl	1a8ec <lchmod@@Base+0x377c>
   1a6f8:	cmp	r0, #0
   1a6fc:	popne	{fp, pc}
   1a700:	bl	1a82c <lchmod@@Base+0x36bc>
   1a704:	push	{fp, lr}
   1a708:	mov	fp, sp
   1a70c:	bl	1a8ec <lchmod@@Base+0x377c>
   1a710:	cmp	r0, #0
   1a714:	popne	{fp, pc}
   1a718:	bl	1a82c <lchmod@@Base+0x36bc>
   1a71c:	push	{fp, lr}
   1a720:	mov	fp, sp
   1a724:	mov	r1, #1
   1a728:	bl	1a8ec <lchmod@@Base+0x377c>
   1a72c:	cmp	r0, #0
   1a730:	popne	{fp, pc}
   1a734:	bl	1a82c <lchmod@@Base+0x36bc>
   1a738:	push	{fp, lr}
   1a73c:	mov	fp, sp
   1a740:	bl	1a8ec <lchmod@@Base+0x377c>
   1a744:	cmp	r0, #0
   1a748:	popne	{fp, pc}
   1a74c:	bl	1a82c <lchmod@@Base+0x36bc>
   1a750:	push	{r4, r5, fp, lr}
   1a754:	add	fp, sp, #8
   1a758:	mov	r5, r0
   1a75c:	mov	r0, r1
   1a760:	mov	r4, r1
   1a764:	bl	1a940 <lchmod@@Base+0x37d0>
   1a768:	cmp	r0, #0
   1a76c:	beq	1a780 <lchmod@@Base+0x3610>
   1a770:	mov	r1, r5
   1a774:	mov	r2, r4
   1a778:	pop	{r4, r5, fp, lr}
   1a77c:	b	11730 <memcpy@plt>
   1a780:	bl	1a82c <lchmod@@Base+0x36bc>
   1a784:	push	{r4, r5, fp, lr}
   1a788:	add	fp, sp, #8
   1a78c:	mov	r5, r0
   1a790:	mov	r0, r1
   1a794:	mov	r4, r1
   1a798:	bl	1a940 <lchmod@@Base+0x37d0>
   1a79c:	cmp	r0, #0
   1a7a0:	beq	1a7b4 <lchmod@@Base+0x3644>
   1a7a4:	mov	r1, r5
   1a7a8:	mov	r2, r4
   1a7ac:	pop	{r4, r5, fp, lr}
   1a7b0:	b	11730 <memcpy@plt>
   1a7b4:	bl	1a82c <lchmod@@Base+0x36bc>
   1a7b8:	push	{r4, r5, fp, lr}
   1a7bc:	add	fp, sp, #8
   1a7c0:	mov	r5, r0
   1a7c4:	add	r0, r1, #1
   1a7c8:	mov	r4, r1
   1a7cc:	bl	1a940 <lchmod@@Base+0x37d0>
   1a7d0:	cmp	r0, #0
   1a7d4:	beq	1a7f0 <lchmod@@Base+0x3680>
   1a7d8:	mov	r1, #0
   1a7dc:	mov	r2, r4
   1a7e0:	strb	r1, [r0, r4]
   1a7e4:	mov	r1, r5
   1a7e8:	pop	{r4, r5, fp, lr}
   1a7ec:	b	11730 <memcpy@plt>
   1a7f0:	bl	1a82c <lchmod@@Base+0x36bc>
   1a7f4:	push	{r4, r5, fp, lr}
   1a7f8:	add	fp, sp, #8
   1a7fc:	mov	r4, r0
   1a800:	bl	118bc <strlen@plt>
   1a804:	add	r5, r0, #1
   1a808:	mov	r0, r5
   1a80c:	bl	1a940 <lchmod@@Base+0x37d0>
   1a810:	cmp	r0, #0
   1a814:	beq	1a828 <lchmod@@Base+0x36b8>
   1a818:	mov	r1, r4
   1a81c:	mov	r2, r5
   1a820:	pop	{r4, r5, fp, lr}
   1a824:	b	11730 <memcpy@plt>
   1a828:	bl	1a82c <lchmod@@Base+0x36bc>
   1a82c:	push	{fp, lr}
   1a830:	mov	fp, sp
   1a834:	movw	r0, #53628	; 0xd17c
   1a838:	movw	r1, #48674	; 0xbe22
   1a83c:	mov	r2, #5
   1a840:	movt	r0, #2
   1a844:	movt	r1, #1
   1a848:	ldr	r4, [r0]
   1a84c:	mov	r0, #0
   1a850:	bl	11754 <dcgettext@plt>
   1a854:	movw	r2, #47423	; 0xb93f
   1a858:	mov	r3, r0
   1a85c:	mov	r0, r4
   1a860:	mov	r1, #0
   1a864:	movt	r2, #1
   1a868:	bl	11814 <error@plt>
   1a86c:	bl	11a3c <abort@plt>
   1a870:	push	{fp, lr}
   1a874:	mov	fp, sp
   1a878:	orr	r1, r1, #512	; 0x200
   1a87c:	bl	13384 <__assert_fail@plt+0x18e8>
   1a880:	cmp	r0, #0
   1a884:	popne	{fp, pc}
   1a888:	bl	118ec <__errno_location@plt>
   1a88c:	ldr	r0, [r0]
   1a890:	cmp	r0, #22
   1a894:	bne	1a8b8 <lchmod@@Base+0x3748>
   1a898:	movw	r0, #48691	; 0xbe33
   1a89c:	movw	r1, #48707	; 0xbe43
   1a8a0:	movw	r3, #48718	; 0xbe4e
   1a8a4:	mov	r2, #41	; 0x29
   1a8a8:	movt	r0, #1
   1a8ac:	movt	r1, #1
   1a8b0:	movt	r3, #1
   1a8b4:	bl	11a9c <__assert_fail@plt>
   1a8b8:	bl	1a82c <lchmod@@Base+0x36bc>
   1a8bc:	ldr	r0, [r0, #48]	; 0x30
   1a8c0:	and	r0, r0, #17
   1a8c4:	cmp	r0, #16
   1a8c8:	moveq	r0, #1
   1a8cc:	bxeq	lr
   1a8d0:	cmp	r0, #17
   1a8d4:	movne	r0, #0
   1a8d8:	bxne	lr
   1a8dc:	ldr	r0, [r1, #48]	; 0x30
   1a8e0:	cmp	r0, #0
   1a8e4:	movwne	r0, #1
   1a8e8:	bx	lr
   1a8ec:	clz	r2, r1
   1a8f0:	clz	r3, r0
   1a8f4:	lsr	r2, r2, #5
   1a8f8:	lsr	r3, r3, #5
   1a8fc:	orrs	r2, r3, r2
   1a900:	movwne	r1, #1
   1a904:	movwne	r0, #1
   1a908:	cmp	r1, #0
   1a90c:	beq	1a93c <lchmod@@Base+0x37cc>
   1a910:	mvn	r2, #-2147483648	; 0x80000000
   1a914:	udiv	r2, r2, r1
   1a918:	cmp	r2, r0
   1a91c:	bcs	1a93c <lchmod@@Base+0x37cc>
   1a920:	push	{fp, lr}
   1a924:	mov	fp, sp
   1a928:	bl	118ec <__errno_location@plt>
   1a92c:	mov	r1, #12
   1a930:	str	r1, [r0]
   1a934:	mov	r0, #0
   1a938:	pop	{fp, pc}
   1a93c:	b	116a0 <calloc@plt>
   1a940:	cmp	r0, #0
   1a944:	movweq	r0, #1
   1a948:	cmn	r0, #1
   1a94c:	ble	1a954 <lchmod@@Base+0x37e4>
   1a950:	b	11838 <malloc@plt>
   1a954:	push	{fp, lr}
   1a958:	mov	fp, sp
   1a95c:	bl	118ec <__errno_location@plt>
   1a960:	mov	r1, #12
   1a964:	str	r1, [r0]
   1a968:	mov	r0, #0
   1a96c:	pop	{fp, pc}
   1a970:	push	{fp, lr}
   1a974:	mov	fp, sp
   1a978:	cmp	r0, #0
   1a97c:	beq	1a998 <lchmod@@Base+0x3828>
   1a980:	cmp	r1, #0
   1a984:	beq	1a9a4 <lchmod@@Base+0x3834>
   1a988:	cmn	r1, #1
   1a98c:	ble	1a9b0 <lchmod@@Base+0x3840>
   1a990:	pop	{fp, lr}
   1a994:	b	1176c <realloc@plt>
   1a998:	mov	r0, r1
   1a99c:	pop	{fp, lr}
   1a9a0:	b	1a940 <lchmod@@Base+0x37d0>
   1a9a4:	bl	1335c <__assert_fail@plt+0x18c0>
   1a9a8:	mov	r0, #0
   1a9ac:	pop	{fp, pc}
   1a9b0:	bl	118ec <__errno_location@plt>
   1a9b4:	mov	r1, #12
   1a9b8:	str	r1, [r0]
   1a9bc:	mov	r0, #0
   1a9c0:	pop	{fp, pc}
   1a9c4:	sub	r0, r0, #1
   1a9c8:	ldrb	r3, [r0, #1]!
   1a9cc:	cmp	r3, #47	; 0x2f
   1a9d0:	beq	1a9c8 <lchmod@@Base+0x3858>
   1a9d4:	mov	r2, #0
   1a9d8:	mov	r1, r0
   1a9dc:	uxtb	r3, r3
   1a9e0:	cmp	r3, #47	; 0x2f
   1a9e4:	bne	1a9fc <lchmod@@Base+0x388c>
   1a9e8:	ldrb	r3, [r1, #1]!
   1a9ec:	mov	r2, #1
   1a9f0:	uxtb	r3, r3
   1a9f4:	cmp	r3, #47	; 0x2f
   1a9f8:	beq	1a9e8 <lchmod@@Base+0x3878>
   1a9fc:	cmp	r3, #0
   1aa00:	bxeq	lr
   1aa04:	tst	r2, #1
   1aa08:	mov	r2, #0
   1aa0c:	movne	r0, r1
   1aa10:	ldrb	r3, [r1, #1]!
   1aa14:	uxtb	r3, r3
   1aa18:	cmp	r3, #47	; 0x2f
   1aa1c:	bne	1a9fc <lchmod@@Base+0x388c>
   1aa20:	b	1a9e8 <lchmod@@Base+0x3878>
   1aa24:	push	{r4, sl, fp, lr}
   1aa28:	add	fp, sp, #8
   1aa2c:	mov	r4, r0
   1aa30:	bl	118bc <strlen@plt>
   1aa34:	mov	r1, r0
   1aa38:	sub	r2, r4, #1
   1aa3c:	mov	r0, r1
   1aa40:	cmp	r1, #2
   1aa44:	bcc	1aa58 <lchmod@@Base+0x38e8>
   1aa48:	ldrb	r3, [r2, r0]
   1aa4c:	sub	r1, r0, #1
   1aa50:	cmp	r3, #47	; 0x2f
   1aa54:	beq	1aa3c <lchmod@@Base+0x38cc>
   1aa58:	pop	{r4, sl, fp, pc}
   1aa5c:	push	{r4, r5, r6, sl, fp, lr}
   1aa60:	add	fp, sp, #16
   1aa64:	mov	r4, r0
   1aa68:	bl	117fc <__fpending@plt>
   1aa6c:	ldr	r6, [r4]
   1aa70:	mov	r5, r0
   1aa74:	mov	r0, r4
   1aa78:	bl	1abd0 <lchmod@@Base+0x3a60>
   1aa7c:	tst	r6, #32
   1aa80:	bne	1aab8 <lchmod@@Base+0x3948>
   1aa84:	cmp	r0, #0
   1aa88:	mov	r4, r0
   1aa8c:	mvnne	r4, #0
   1aa90:	cmp	r5, #0
   1aa94:	bne	1aac4 <lchmod@@Base+0x3954>
   1aa98:	cmp	r0, #0
   1aa9c:	beq	1aac4 <lchmod@@Base+0x3954>
   1aaa0:	bl	118ec <__errno_location@plt>
   1aaa4:	ldr	r0, [r0]
   1aaa8:	subs	r4, r0, #9
   1aaac:	mvnne	r4, #0
   1aab0:	mov	r0, r4
   1aab4:	pop	{r4, r5, r6, sl, fp, pc}
   1aab8:	mvn	r4, #0
   1aabc:	cmp	r0, #0
   1aac0:	beq	1aacc <lchmod@@Base+0x395c>
   1aac4:	mov	r0, r4
   1aac8:	pop	{r4, r5, r6, sl, fp, pc}
   1aacc:	bl	118ec <__errno_location@plt>
   1aad0:	mov	r1, #0
   1aad4:	str	r1, [r0]
   1aad8:	mov	r0, r4
   1aadc:	pop	{r4, r5, r6, sl, fp, pc}
   1aae0:	movw	r2, #62998	; 0xf616
   1aae4:	mov	r1, #0
   1aae8:	movt	r2, #149	; 0x95
   1aaec:	str	r1, [r0, #16]
   1aaf0:	str	r1, [r0, #20]
   1aaf4:	str	r2, [r0, #24]
   1aaf8:	bx	lr
   1aafc:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   1ab00:	add	fp, sp, #24
   1ab04:	ldr	r2, [r0, #24]
   1ab08:	movw	r3, #62998	; 0xf616
   1ab0c:	movt	r3, #149	; 0x95
   1ab10:	cmp	r2, r3
   1ab14:	bne	1abb0 <lchmod@@Base+0x3a40>
   1ab18:	add	r3, r0, #16
   1ab1c:	add	ip, r0, #8
   1ab20:	ldrd	r4, [r3]
   1ab24:	orrs	r2, r4, r5
   1ab28:	beq	1ab64 <lchmod@@Base+0x39f4>
   1ab2c:	ldr	r6, [r1, #96]	; 0x60
   1ab30:	ldr	r9, [r1, #100]	; 0x64
   1ab34:	ldm	r0, {r2, r7}
   1ab38:	eor	r7, r9, r7
   1ab3c:	eor	r2, r6, r2
   1ab40:	orrs	r2, r2, r7
   1ab44:	bne	1ab64 <lchmod@@Base+0x39f4>
   1ab48:	ldm	ip, {r2, r7}
   1ab4c:	ldm	r1, {r6, r9}
   1ab50:	eor	r7, r9, r7
   1ab54:	eor	r2, r6, r2
   1ab58:	orrs	r2, r2, r7
   1ab5c:	mov	r2, #1
   1ab60:	beq	1ab9c <lchmod@@Base+0x3a2c>
   1ab64:	adds	r6, r4, #1
   1ab68:	adc	r7, r5, #0
   1ab6c:	and	r2, r6, r4
   1ab70:	strd	r6, [r3]
   1ab74:	and	r3, r7, r5
   1ab78:	orrs	r2, r2, r3
   1ab7c:	mov	r2, #0
   1ab80:	bne	1ab9c <lchmod@@Base+0x3a2c>
   1ab84:	orrs	r3, r6, r7
   1ab88:	beq	1aba4 <lchmod@@Base+0x3a34>
   1ab8c:	ldrd	r4, [r1]
   1ab90:	strd	r4, [ip]
   1ab94:	ldrd	r4, [r1, #96]	; 0x60
   1ab98:	strd	r4, [r0]
   1ab9c:	mov	r0, r2
   1aba0:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   1aba4:	mov	r2, #1
   1aba8:	mov	r0, r2
   1abac:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   1abb0:	movw	r0, #48796	; 0xbe9c
   1abb4:	movw	r1, #48820	; 0xbeb4
   1abb8:	movw	r3, #48838	; 0xbec6
   1abbc:	mov	r2, #60	; 0x3c
   1abc0:	movt	r0, #1
   1abc4:	movt	r1, #1
   1abc8:	movt	r3, #1
   1abcc:	bl	11a9c <__assert_fail@plt>
   1abd0:	push	{r4, r5, r6, sl, fp, lr}
   1abd4:	add	fp, sp, #16
   1abd8:	sub	sp, sp, #8
   1abdc:	mov	r4, r0
   1abe0:	bl	11928 <fileno@plt>
   1abe4:	cmn	r0, #1
   1abe8:	ble	1ac5c <lchmod@@Base+0x3aec>
   1abec:	mov	r0, r4
   1abf0:	bl	11850 <__freading@plt>
   1abf4:	cmp	r0, #0
   1abf8:	beq	1ac24 <lchmod@@Base+0x3ab4>
   1abfc:	mov	r0, r4
   1ac00:	bl	11928 <fileno@plt>
   1ac04:	mov	r1, #1
   1ac08:	mov	r2, #0
   1ac0c:	mov	r3, #0
   1ac10:	str	r1, [sp]
   1ac14:	bl	117d8 <lseek64@plt>
   1ac18:	and	r0, r0, r1
   1ac1c:	cmn	r0, #1
   1ac20:	beq	1ac5c <lchmod@@Base+0x3aec>
   1ac24:	mov	r0, r4
   1ac28:	bl	1ae88 <lchmod@@Base+0x3d18>
   1ac2c:	cmp	r0, #0
   1ac30:	beq	1ac5c <lchmod@@Base+0x3aec>
   1ac34:	bl	118ec <__errno_location@plt>
   1ac38:	ldr	r6, [r0]
   1ac3c:	mov	r5, r0
   1ac40:	mov	r0, r4
   1ac44:	bl	11940 <fclose@plt>
   1ac48:	cmp	r6, #0
   1ac4c:	strne	r6, [r5]
   1ac50:	mvnne	r0, #0
   1ac54:	sub	sp, fp, #16
   1ac58:	pop	{r4, r5, r6, sl, fp, pc}
   1ac5c:	mov	r0, r4
   1ac60:	sub	sp, fp, #16
   1ac64:	pop	{r4, r5, r6, sl, fp, lr}
   1ac68:	b	11940 <fclose@plt>
   1ac6c:	sub	sp, sp, #8
   1ac70:	push	{r4, r5, r6, r7, fp, lr}
   1ac74:	add	fp, sp, #16
   1ac78:	sub	sp, sp, #8
   1ac7c:	mov	r5, r0
   1ac80:	add	r0, fp, #8
   1ac84:	cmp	r1, #11
   1ac88:	str	r2, [fp, #8]
   1ac8c:	str	r3, [fp, #12]
   1ac90:	str	r0, [sp, #4]
   1ac94:	bhi	1acd0 <lchmod@@Base+0x3b60>
   1ac98:	mov	r0, #1
   1ac9c:	movw	r2, #1300	; 0x514
   1aca0:	tst	r2, r0, lsl r1
   1aca4:	bne	1ad90 <lchmod@@Base+0x3c20>
   1aca8:	movw	r2, #2570	; 0xa0a
   1acac:	tst	r2, r0, lsl r1
   1acb0:	bne	1acf8 <lchmod@@Base+0x3b88>
   1acb4:	cmp	r1, #0
   1acb8:	bne	1acd0 <lchmod@@Base+0x3b60>
   1acbc:	ldr	r0, [sp, #4]
   1acc0:	add	r1, r0, #4
   1acc4:	str	r1, [sp, #4]
   1acc8:	mov	r1, #0
   1accc:	b	1ad9c <lchmod@@Base+0x3c2c>
   1acd0:	sub	r0, r1, #1024	; 0x400
   1acd4:	cmp	r0, #10
   1acd8:	bhi	1ad90 <lchmod@@Base+0x3c20>
   1acdc:	mov	r2, #1
   1ace0:	movw	r3, #645	; 0x285
   1ace4:	tst	r3, r2, lsl r0
   1ace8:	bne	1ad90 <lchmod@@Base+0x3c20>
   1acec:	movw	r3, #1282	; 0x502
   1acf0:	tst	r3, r2, lsl r0
   1acf4:	beq	1ad04 <lchmod@@Base+0x3b94>
   1acf8:	mov	r0, r5
   1acfc:	bl	11958 <fcntl64@plt>
   1ad00:	b	1ada8 <lchmod@@Base+0x3c38>
   1ad04:	cmp	r0, #6
   1ad08:	bne	1ad90 <lchmod@@Base+0x3c20>
   1ad0c:	ldr	r0, [sp, #4]
   1ad10:	movw	r7, #54048	; 0xd320
   1ad14:	movt	r7, #2
   1ad18:	add	r1, r0, #4
   1ad1c:	str	r1, [sp, #4]
   1ad20:	ldr	r6, [r0]
   1ad24:	ldr	r0, [r7]
   1ad28:	cmp	r0, #0
   1ad2c:	bmi	1adcc <lchmod@@Base+0x3c5c>
   1ad30:	mov	r0, r5
   1ad34:	movw	r1, #1030	; 0x406
   1ad38:	mov	r2, r6
   1ad3c:	bl	11958 <fcntl64@plt>
   1ad40:	mov	r4, r0
   1ad44:	cmn	r0, #1
   1ad48:	bgt	1adc0 <lchmod@@Base+0x3c50>
   1ad4c:	bl	118ec <__errno_location@plt>
   1ad50:	ldr	r0, [r0]
   1ad54:	cmp	r0, #22
   1ad58:	bne	1adc0 <lchmod@@Base+0x3c50>
   1ad5c:	mov	r0, r5
   1ad60:	mov	r1, #0
   1ad64:	mov	r2, r6
   1ad68:	bl	11958 <fcntl64@plt>
   1ad6c:	mov	r4, r0
   1ad70:	cmp	r0, #0
   1ad74:	bmi	1adac <lchmod@@Base+0x3c3c>
   1ad78:	mvn	r0, #0
   1ad7c:	str	r0, [r7]
   1ad80:	mov	r0, #1
   1ad84:	cmp	r0, #0
   1ad88:	bne	1adf8 <lchmod@@Base+0x3c88>
   1ad8c:	b	1adac <lchmod@@Base+0x3c3c>
   1ad90:	ldr	r0, [sp, #4]
   1ad94:	add	r2, r0, #4
   1ad98:	str	r2, [sp, #4]
   1ad9c:	ldr	r2, [r0]
   1ada0:	mov	r0, r5
   1ada4:	bl	11958 <fcntl64@plt>
   1ada8:	mov	r4, r0
   1adac:	mov	r0, r4
   1adb0:	sub	sp, fp, #16
   1adb4:	pop	{r4, r5, r6, r7, fp, lr}
   1adb8:	add	sp, sp, #8
   1adbc:	bx	lr
   1adc0:	mov	r0, #1
   1adc4:	str	r0, [r7]
   1adc8:	b	1adac <lchmod@@Base+0x3c3c>
   1adcc:	mov	r0, r5
   1add0:	mov	r1, #0
   1add4:	mov	r2, r6
   1add8:	bl	11958 <fcntl64@plt>
   1addc:	mov	r4, r0
   1ade0:	ldr	r0, [r7]
   1ade4:	add	r0, r0, #1
   1ade8:	clz	r0, r0
   1adec:	lsr	r0, r0, #5
   1adf0:	cmp	r0, #0
   1adf4:	beq	1adac <lchmod@@Base+0x3c3c>
   1adf8:	cmp	r4, #0
   1adfc:	bmi	1adac <lchmod@@Base+0x3c3c>
   1ae00:	mov	r0, r4
   1ae04:	mov	r1, #1
   1ae08:	bl	11958 <fcntl64@plt>
   1ae0c:	cmp	r0, #0
   1ae10:	bmi	1ae2c <lchmod@@Base+0x3cbc>
   1ae14:	orr	r2, r0, #1
   1ae18:	mov	r0, r4
   1ae1c:	mov	r1, #2
   1ae20:	bl	11958 <fcntl64@plt>
   1ae24:	cmn	r0, #1
   1ae28:	bne	1adac <lchmod@@Base+0x3c3c>
   1ae2c:	bl	118ec <__errno_location@plt>
   1ae30:	ldr	r6, [r0]
   1ae34:	mov	r5, r0
   1ae38:	mov	r0, r4
   1ae3c:	bl	11a48 <close@plt>
   1ae40:	str	r6, [r5]
   1ae44:	mvn	r4, #0
   1ae48:	b	1adac <lchmod@@Base+0x3c3c>
   1ae4c:	sub	sp, sp, #8
   1ae50:	push	{fp, lr}
   1ae54:	mov	fp, sp
   1ae58:	sub	sp, sp, #8
   1ae5c:	str	r2, [fp, #8]
   1ae60:	str	r3, [fp, #12]
   1ae64:	tst	r1, #64	; 0x40
   1ae68:	mov	r2, #0
   1ae6c:	ldrne	r2, [fp, #8]
   1ae70:	bl	11820 <open64@plt>
   1ae74:	bl	19be8 <lchmod@@Base+0x2a78>
   1ae78:	mov	sp, fp
   1ae7c:	pop	{fp, lr}
   1ae80:	add	sp, sp, #8
   1ae84:	bx	lr
   1ae88:	push	{r4, sl, fp, lr}
   1ae8c:	add	fp, sp, #8
   1ae90:	sub	sp, sp, #8
   1ae94:	mov	r4, r0
   1ae98:	cmp	r0, #0
   1ae9c:	beq	1aed4 <lchmod@@Base+0x3d64>
   1aea0:	mov	r0, r4
   1aea4:	bl	11850 <__freading@plt>
   1aea8:	cmp	r0, #0
   1aeac:	beq	1aed4 <lchmod@@Base+0x3d64>
   1aeb0:	ldrb	r0, [r4, #1]
   1aeb4:	tst	r0, #1
   1aeb8:	beq	1aed4 <lchmod@@Base+0x3d64>
   1aebc:	mov	r0, #1
   1aec0:	mov	r2, #0
   1aec4:	mov	r3, #0
   1aec8:	str	r0, [sp]
   1aecc:	mov	r0, r4
   1aed0:	bl	1aee4 <lchmod@@Base+0x3d74>
   1aed4:	mov	r0, r4
   1aed8:	sub	sp, fp, #8
   1aedc:	pop	{r4, sl, fp, lr}
   1aee0:	b	116e8 <fflush@plt>
   1aee4:	push	{r4, r5, r6, r7, fp, lr}
   1aee8:	add	fp, sp, #16
   1aeec:	sub	sp, sp, #8
   1aef0:	mov	r4, r0
   1aef4:	ldr	r0, [r0, #4]
   1aef8:	mov	r5, r3
   1aefc:	mov	r6, r2
   1af00:	ldr	r1, [r4, #8]
   1af04:	cmp	r1, r0
   1af08:	bne	1af24 <lchmod@@Base+0x3db4>
   1af0c:	ldrd	r0, [r4, #16]
   1af10:	cmp	r1, r0
   1af14:	bne	1af24 <lchmod@@Base+0x3db4>
   1af18:	ldr	r0, [r4, #36]	; 0x24
   1af1c:	cmp	r0, #0
   1af20:	beq	1af3c <lchmod@@Base+0x3dcc>
   1af24:	mov	r0, r4
   1af28:	mov	r2, r6
   1af2c:	mov	r3, r5
   1af30:	sub	sp, fp, #16
   1af34:	pop	{r4, r5, r6, r7, fp, lr}
   1af38:	b	1194c <fseeko64@plt>
   1af3c:	ldr	r7, [fp, #8]
   1af40:	mov	r0, r4
   1af44:	bl	11928 <fileno@plt>
   1af48:	mov	r2, r6
   1af4c:	mov	r3, r5
   1af50:	str	r7, [sp]
   1af54:	bl	117d8 <lseek64@plt>
   1af58:	and	r2, r0, r1
   1af5c:	cmn	r2, #1
   1af60:	beq	1af80 <lchmod@@Base+0x3e10>
   1af64:	strd	r0, [r4, #80]	; 0x50
   1af68:	ldr	r0, [r4]
   1af6c:	bic	r0, r0, #16
   1af70:	str	r0, [r4]
   1af74:	mov	r0, #0
   1af78:	sub	sp, fp, #16
   1af7c:	pop	{r4, r5, r6, r7, fp, pc}
   1af80:	mvn	r0, #0
   1af84:	sub	sp, fp, #16
   1af88:	pop	{r4, r5, r6, r7, fp, pc}
   1af8c:	ldrb	r2, [r0]
   1af90:	cmp	r2, #0
   1af94:	beq	1afc0 <lchmod@@Base+0x3e50>
   1af98:	add	r3, r0, #1
   1af9c:	mov	r0, #0
   1afa0:	ror	r0, r0, #23
   1afa4:	uxtab	r0, r0, r2
   1afa8:	ldrb	r2, [r3], #1
   1afac:	cmp	r2, #0
   1afb0:	bne	1afa0 <lchmod@@Base+0x3e30>
   1afb4:	udiv	r2, r0, r1
   1afb8:	mls	r0, r2, r1, r0
   1afbc:	bx	lr
   1afc0:	mov	r0, #0
   1afc4:	udiv	r2, r0, r1
   1afc8:	mls	r0, r2, r1, r0
   1afcc:	bx	lr
   1afd0:	push	{fp, lr}
   1afd4:	mov	fp, sp
   1afd8:	mov	r0, #14
   1afdc:	bl	11988 <nl_langinfo@plt>
   1afe0:	movw	r1, #47236	; 0xb884
   1afe4:	cmp	r0, #0
   1afe8:	movt	r1, #1
   1afec:	movne	r1, r0
   1aff0:	movw	r0, #48905	; 0xbf09
   1aff4:	ldrb	r2, [r1]
   1aff8:	movt	r0, #1
   1affc:	cmp	r2, #0
   1b000:	movne	r0, r1
   1b004:	pop	{fp, pc}
   1b008:	push	{r4, r5, r6, r7, fp, lr}
   1b00c:	add	fp, sp, #16
   1b010:	sub	sp, sp, #8
   1b014:	cmp	r0, #0
   1b018:	add	r5, sp, #4
   1b01c:	mov	r7, r2
   1b020:	mov	r4, r1
   1b024:	movne	r5, r0
   1b028:	mov	r0, r5
   1b02c:	bl	11808 <mbrtowc@plt>
   1b030:	mov	r6, r0
   1b034:	cmp	r7, #0
   1b038:	beq	1b060 <lchmod@@Base+0x3ef0>
   1b03c:	cmn	r6, #2
   1b040:	bcc	1b060 <lchmod@@Base+0x3ef0>
   1b044:	mov	r0, #0
   1b048:	bl	1b0b4 <lchmod@@Base+0x3f44>
   1b04c:	cmp	r0, #0
   1b050:	bne	1b060 <lchmod@@Base+0x3ef0>
   1b054:	ldrb	r0, [r4]
   1b058:	mov	r6, #1
   1b05c:	str	r0, [r5]
   1b060:	mov	r0, r6
   1b064:	sub	sp, fp, #16
   1b068:	pop	{r4, r5, r6, r7, fp, pc}
   1b06c:	cmp	r2, #0
   1b070:	beq	1b0a0 <lchmod@@Base+0x3f30>
   1b074:	mvn	r3, #0
   1b078:	udiv	r3, r3, r2
   1b07c:	cmp	r3, r1
   1b080:	bcs	1b0a0 <lchmod@@Base+0x3f30>
   1b084:	push	{fp, lr}
   1b088:	mov	fp, sp
   1b08c:	bl	118ec <__errno_location@plt>
   1b090:	mov	r1, #12
   1b094:	str	r1, [r0]
   1b098:	mov	r0, #0
   1b09c:	pop	{fp, pc}
   1b0a0:	mul	r1, r2, r1
   1b0a4:	b	1a970 <lchmod@@Base+0x3800>
   1b0a8:	mov	r1, #0
   1b0ac:	mov	r2, #3
   1b0b0:	b	1ac6c <lchmod@@Base+0x3afc>
   1b0b4:	push	{r4, sl, fp, lr}
   1b0b8:	add	fp, sp, #8
   1b0bc:	sub	sp, sp, #264	; 0x108
   1b0c0:	add	r1, sp, #7
   1b0c4:	movw	r2, #257	; 0x101
   1b0c8:	bl	1b120 <lchmod@@Base+0x3fb0>
   1b0cc:	mov	r4, #0
   1b0d0:	cmp	r0, #0
   1b0d4:	bne	1b114 <lchmod@@Base+0x3fa4>
   1b0d8:	movw	r1, #48911	; 0xbf0f
   1b0dc:	add	r0, sp, #7
   1b0e0:	mov	r2, #2
   1b0e4:	movt	r1, #1
   1b0e8:	bl	118b0 <bcmp@plt>
   1b0ec:	cmp	r0, #0
   1b0f0:	beq	1b114 <lchmod@@Base+0x3fa4>
   1b0f4:	movw	r1, #48913	; 0xbf11
   1b0f8:	add	r0, sp, #7
   1b0fc:	mov	r2, #6
   1b100:	movt	r1, #1
   1b104:	bl	118b0 <bcmp@plt>
   1b108:	cmp	r0, #0
   1b10c:	mov	r4, r0
   1b110:	movwne	r4, #1
   1b114:	mov	r0, r4
   1b118:	sub	sp, fp, #8
   1b11c:	pop	{r4, sl, fp, pc}
   1b120:	push	{r4, r5, r6, r7, fp, lr}
   1b124:	add	fp, sp, #16
   1b128:	mov	r4, r1
   1b12c:	mov	r1, #0
   1b130:	mov	r6, r2
   1b134:	bl	11964 <setlocale@plt>
   1b138:	cmp	r0, #0
   1b13c:	beq	1b16c <lchmod@@Base+0x3ffc>
   1b140:	mov	r7, r0
   1b144:	bl	118bc <strlen@plt>
   1b148:	cmp	r0, r6
   1b14c:	bcs	1b188 <lchmod@@Base+0x4018>
   1b150:	add	r2, r0, #1
   1b154:	mov	r0, r4
   1b158:	mov	r1, r7
   1b15c:	bl	11730 <memcpy@plt>
   1b160:	mov	r5, #0
   1b164:	mov	r0, r5
   1b168:	pop	{r4, r5, r6, r7, fp, pc}
   1b16c:	mov	r5, #22
   1b170:	cmp	r6, #0
   1b174:	beq	1b1b0 <lchmod@@Base+0x4040>
   1b178:	mov	r0, #0
   1b17c:	strb	r0, [r4]
   1b180:	mov	r0, r5
   1b184:	pop	{r4, r5, r6, r7, fp, pc}
   1b188:	mov	r5, #34	; 0x22
   1b18c:	cmp	r6, #0
   1b190:	beq	1b1b0 <lchmod@@Base+0x4040>
   1b194:	sub	r6, r6, #1
   1b198:	mov	r0, r4
   1b19c:	mov	r1, r7
   1b1a0:	mov	r2, r6
   1b1a4:	bl	11730 <memcpy@plt>
   1b1a8:	mov	r0, #0
   1b1ac:	strb	r0, [r4, r6]
   1b1b0:	mov	r0, r5
   1b1b4:	pop	{r4, r5, r6, r7, fp, pc}
   1b1b8:	mov	r1, #0
   1b1bc:	b	11964 <setlocale@plt>
   1b1c0:	cmp	r3, #0
   1b1c4:	cmpeq	r2, #0
   1b1c8:	bne	1b1e0 <lchmod@@Base+0x4070>
   1b1cc:	cmp	r1, #0
   1b1d0:	cmpeq	r0, #0
   1b1d4:	mvnne	r1, #0
   1b1d8:	mvnne	r0, #0
   1b1dc:	b	1b1fc <lchmod@@Base+0x408c>
   1b1e0:	sub	sp, sp, #8
   1b1e4:	push	{sp, lr}
   1b1e8:	bl	1b20c <lchmod@@Base+0x409c>
   1b1ec:	ldr	lr, [sp, #4]
   1b1f0:	add	sp, sp, #8
   1b1f4:	pop	{r2, r3}
   1b1f8:	bx	lr
   1b1fc:	push	{r1, lr}
   1b200:	mov	r0, #8
   1b204:	bl	116b8 <raise@plt>
   1b208:	pop	{r1, pc}
   1b20c:	cmp	r1, r3
   1b210:	cmpeq	r0, r2
   1b214:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b218:	mov	r4, r0
   1b21c:	movcc	r0, #0
   1b220:	mov	r5, r1
   1b224:	ldr	lr, [sp, #36]	; 0x24
   1b228:	movcc	r1, r0
   1b22c:	bcc	1b328 <lchmod@@Base+0x41b8>
   1b230:	cmp	r3, #0
   1b234:	clzeq	ip, r2
   1b238:	clzne	ip, r3
   1b23c:	addeq	ip, ip, #32
   1b240:	cmp	r5, #0
   1b244:	clzeq	r1, r4
   1b248:	addeq	r1, r1, #32
   1b24c:	clzne	r1, r5
   1b250:	sub	ip, ip, r1
   1b254:	sub	sl, ip, #32
   1b258:	lsl	r9, r3, ip
   1b25c:	rsb	fp, ip, #32
   1b260:	orr	r9, r9, r2, lsl sl
   1b264:	orr	r9, r9, r2, lsr fp
   1b268:	lsl	r8, r2, ip
   1b26c:	cmp	r5, r9
   1b270:	cmpeq	r4, r8
   1b274:	movcc	r0, #0
   1b278:	movcc	r1, r0
   1b27c:	bcc	1b298 <lchmod@@Base+0x4128>
   1b280:	mov	r0, #1
   1b284:	subs	r4, r4, r8
   1b288:	lsl	r1, r0, sl
   1b28c:	orr	r1, r1, r0, lsr fp
   1b290:	lsl	r0, r0, ip
   1b294:	sbc	r5, r5, r9
   1b298:	cmp	ip, #0
   1b29c:	beq	1b328 <lchmod@@Base+0x41b8>
   1b2a0:	lsr	r6, r8, #1
   1b2a4:	orr	r6, r6, r9, lsl #31
   1b2a8:	lsr	r7, r9, #1
   1b2ac:	mov	r2, ip
   1b2b0:	b	1b2d4 <lchmod@@Base+0x4164>
   1b2b4:	subs	r3, r4, r6
   1b2b8:	sbc	r8, r5, r7
   1b2bc:	adds	r3, r3, r3
   1b2c0:	adc	r8, r8, r8
   1b2c4:	adds	r4, r3, #1
   1b2c8:	adc	r5, r8, #0
   1b2cc:	subs	r2, r2, #1
   1b2d0:	beq	1b2f0 <lchmod@@Base+0x4180>
   1b2d4:	cmp	r5, r7
   1b2d8:	cmpeq	r4, r6
   1b2dc:	bcs	1b2b4 <lchmod@@Base+0x4144>
   1b2e0:	adds	r4, r4, r4
   1b2e4:	adc	r5, r5, r5
   1b2e8:	subs	r2, r2, #1
   1b2ec:	bne	1b2d4 <lchmod@@Base+0x4164>
   1b2f0:	lsr	r3, r4, ip
   1b2f4:	orr	r3, r3, r5, lsl fp
   1b2f8:	lsr	r2, r5, ip
   1b2fc:	orr	r3, r3, r5, lsr sl
   1b300:	adds	r0, r0, r4
   1b304:	mov	r4, r3
   1b308:	lsl	r3, r2, ip
   1b30c:	orr	r3, r3, r4, lsl sl
   1b310:	lsl	ip, r4, ip
   1b314:	orr	r3, r3, r4, lsr fp
   1b318:	adc	r1, r1, r5
   1b31c:	subs	r0, r0, ip
   1b320:	mov	r5, r2
   1b324:	sbc	r1, r1, r3
   1b328:	cmp	lr, #0
   1b32c:	strdne	r4, [lr]
   1b330:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b334:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b338:	mov	r7, r0
   1b33c:	ldr	r6, [pc, #72]	; 1b38c <lchmod@@Base+0x421c>
   1b340:	ldr	r5, [pc, #72]	; 1b390 <lchmod@@Base+0x4220>
   1b344:	add	r6, pc, r6
   1b348:	add	r5, pc, r5
   1b34c:	sub	r6, r6, r5
   1b350:	mov	r8, r1
   1b354:	mov	r9, r2
   1b358:	bl	11668 <fstatfs64@plt-0x20>
   1b35c:	asrs	r6, r6, #2
   1b360:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b364:	mov	r4, #0
   1b368:	add	r4, r4, #1
   1b36c:	ldr	r3, [r5], #4
   1b370:	mov	r2, r9
   1b374:	mov	r1, r8
   1b378:	mov	r0, r7
   1b37c:	blx	r3
   1b380:	cmp	r6, r4
   1b384:	bne	1b368 <lchmod@@Base+0x41f8>
   1b388:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b38c:			; <UNDEFINED> instruction: 0x00011bb8
   1b390:			; <UNDEFINED> instruction: 0x00011bb0
   1b394:	bx	lr
   1b398:	ldr	r3, [pc, #12]	; 1b3ac <lchmod@@Base+0x423c>
   1b39c:	mov	r1, #0
   1b3a0:	add	r3, pc, r3
   1b3a4:	ldr	r2, [r3]
   1b3a8:	b	11904 <__cxa_atexit@plt>
   1b3ac:	andeq	r1, r1, ip, asr #27

Disassembly of section .fini:

0001b3b0 <.fini>:
   1b3b0:	push	{r3, lr}
   1b3b4:	pop	{r3, pc}
