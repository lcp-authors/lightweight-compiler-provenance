
../repos/prog2/3.2:     file format elf32-littlearm


Disassembly of section .init:

0001066c <.init>:
   1066c:	push	{r3, lr}
   10670:	bl	109ec <_start@@Base+0x3c>
   10674:	pop	{r3, pc}

Disassembly of section .plt:

00010678 <printf@plt-0x14>:
   10678:	push	{lr}		; (str lr, [sp, #-4]!)
   1067c:	ldr	lr, [pc, #4]	; 10688 <printf@plt-0x4>
   10680:	add	lr, pc, lr
   10684:	ldr	pc, [lr, #8]!
   10688:	andeq	r0, r1, r8, ror r9

0001068c <printf@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2424]!	; 0x978

00010698 <puts@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2416]!	; 0x970

000106a4 <__libc_start_main@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2408]!	; 0x968

000106b0 <__gmon_start__@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2400]!	; 0x960

000106bc <strlen@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #16, 20	; 0x10000
   106c4:	ldr	pc, [ip, #2392]!	; 0x958

000106c8 <abort@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #16, 20	; 0x10000
   106d0:	ldr	pc, [ip, #2384]!	; 0x950

Disassembly of section .text:

000106d4 <main@@Base>:
   106d4:	push	{r4, r5, r6, r7, lr}
   106d8:	sub	sp, sp, #76	; 0x4c
   106dc:	mov	r5, #0
   106e0:	add	ip, sp, #24
   106e4:	add	r4, sp, #24
   106e8:	ldr	lr, [pc, #644]	; 10974 <main@@Base+0x2a0>
   106ec:	ldr	r7, [pc, #644]	; 10978 <main@@Base+0x2a4>
   106f0:	ldm	lr!, {r0, r1, r2, r3}
   106f4:	stmia	ip!, {r0, r1, r2, r3}
   106f8:	ldm	lr, {r0, r1}
   106fc:	add	lr, sp, #48	; 0x30
   10700:	stm	ip, {r0, r1}
   10704:	ldm	r4!, {r0, r1, r2, r3}
   10708:	add	r4, sp, #48	; 0x30
   1070c:	mov	r6, r4
   10710:	stmia	lr!, {r0, r1, r2, r3}
   10714:	ldm	ip, {r0, r1}
   10718:	stm	lr, {r0, r1}
   1071c:	ldr	r0, [pc, #600]	; 1097c <main@@Base+0x2a8>
   10720:	bl	10698 <puts@plt>
   10724:	ldr	r0, [pc, #596]	; 10980 <main@@Base+0x2ac>
   10728:	bl	1068c <printf@plt>
   1072c:	mov	r0, r7
   10730:	add	r5, r5, #1
   10734:	ldr	r1, [r6], #4
   10738:	bl	1068c <printf@plt>
   1073c:	cmp	r5, #6
   10740:	bne	1072c <main@@Base+0x58>
   10744:	ldr	r7, [pc, #556]	; 10978 <main@@Base+0x2a4>
   10748:	mov	r6, #0
   1074c:	ldr	r0, [pc, #560]	; 10984 <main@@Base+0x2b0>
   10750:	bl	10698 <puts@plt>
   10754:	mov	r1, r5
   10758:	ldr	r3, [pc, #552]	; 10988 <main@@Base+0x2b4>
   1075c:	mov	r2, #4
   10760:	mov	r0, r4
   10764:	mov	r5, r4
   10768:	bl	10b2c <sort@@Base>
   1076c:	ldr	r0, [pc, #536]	; 1098c <main@@Base+0x2b8>
   10770:	bl	1068c <printf@plt>
   10774:	mov	r0, r7
   10778:	add	r6, r6, #1
   1077c:	ldr	r1, [r5], #4
   10780:	bl	1068c <printf@plt>
   10784:	cmp	r6, #6
   10788:	bne	10774 <main@@Base+0xa0>
   1078c:	ldr	r0, [pc, #496]	; 10984 <main@@Base+0x2b0>
   10790:	bl	10698 <puts@plt>
   10794:	add	lr, sp, #24
   10798:	mov	ip, r4
   1079c:	ldr	r5, [pc, #484]	; 10988 <main@@Base+0x2b4>
   107a0:	ldm	lr!, {r0, r1, r2, r3}
   107a4:	stmia	ip!, {r0, r1, r2, r3}
   107a8:	ldm	lr, {r0, r1}
   107ac:	stm	ip, {r0, r1}
   107b0:	ldr	r0, [pc, #472]	; 10990 <main@@Base+0x2bc>
   107b4:	bl	10698 <puts@plt>
   107b8:	mov	r3, #4
   107bc:	mov	r2, r6
   107c0:	str	r5, [sp]
   107c4:	mov	r1, r4
   107c8:	add	r0, sp, #12
   107cc:	str	r3, [sp, #12]
   107d0:	bl	10bb0 <linear_search@@Base>
   107d4:	subs	r2, r0, #0
   107d8:	beq	10954 <main@@Base+0x280>
   107dc:	sub	r2, r2, r4
   107e0:	ldr	r0, [pc, #428]	; 10994 <main@@Base+0x2c0>
   107e4:	asr	r2, r2, #2
   107e8:	ldr	r1, [sp, #12]
   107ec:	bl	1068c <printf@plt>
   107f0:	add	lr, sp, #24
   107f4:	mov	ip, r4
   107f8:	ldm	lr!, {r0, r1, r2, r3}
   107fc:	stmia	ip!, {r0, r1, r2, r3}
   10800:	mov	r2, #4
   10804:	ldm	lr, {r0, r1}
   10808:	ldr	r3, [pc, #376]	; 10988 <main@@Base+0x2b4>
   1080c:	stm	ip, {r0, r1}
   10810:	mov	r1, #6
   10814:	mov	r0, r4
   10818:	bl	10b2c <sort@@Base>
   1081c:	ldr	r0, [pc, #372]	; 10998 <main@@Base+0x2c4>
   10820:	bl	10698 <puts@plt>
   10824:	mov	r2, #6
   10828:	mov	r3, #4
   1082c:	str	r5, [sp]
   10830:	mov	r1, r4
   10834:	add	r0, sp, #12
   10838:	bl	10c08 <binary_search@@Base>
   1083c:	subs	r2, r0, #0
   10840:	beq	10964 <main@@Base+0x290>
   10844:	sub	r2, r2, r4
   10848:	ldr	r0, [pc, #324]	; 10994 <main@@Base+0x2c0>
   1084c:	asr	r2, r2, #2
   10850:	ldr	r1, [sp, #12]
   10854:	bl	1068c <printf@plt>
   10858:	add	ip, sp, #24
   1085c:	mov	lr, r4
   10860:	ldr	r7, [pc, #272]	; 10978 <main@@Base+0x2a4>
   10864:	ldm	ip!, {r0, r1, r2, r3}
   10868:	mov	r6, r4
   1086c:	mov	r5, #0
   10870:	stmia	lr!, {r0, r1, r2, r3}
   10874:	ldm	ip, {r0, r1}
   10878:	stm	lr, {r0, r1}
   1087c:	ldr	r0, [pc, #280]	; 1099c <main@@Base+0x2c8>
   10880:	bl	10698 <puts@plt>
   10884:	ldr	r0, [pc, #244]	; 10980 <main@@Base+0x2ac>
   10888:	bl	1068c <printf@plt>
   1088c:	mov	r0, r7
   10890:	add	r5, r5, #1
   10894:	ldr	r1, [r6], #4
   10898:	bl	1068c <printf@plt>
   1089c:	cmp	r5, #6
   108a0:	bne	1088c <main@@Base+0x1b8>
   108a4:	ldr	r6, [pc, #204]	; 10978 <main@@Base+0x2a4>
   108a8:	ldr	r0, [pc, #212]	; 10984 <main@@Base+0x2b0>
   108ac:	bl	10698 <puts@plt>
   108b0:	mov	r1, r5
   108b4:	ldr	r3, [pc, #204]	; 10988 <main@@Base+0x2b4>
   108b8:	mov	r2, #4
   108bc:	mov	r0, r4
   108c0:	mov	r5, #0
   108c4:	bl	10c78 <insertion_sort@@Base>
   108c8:	ldr	r0, [pc, #188]	; 1098c <main@@Base+0x2b8>
   108cc:	bl	1068c <printf@plt>
   108d0:	mov	r0, r6
   108d4:	add	r5, r5, #1
   108d8:	ldr	r1, [r4], #4
   108dc:	bl	1068c <printf@plt>
   108e0:	cmp	r5, #6
   108e4:	bne	108d0 <main@@Base+0x1fc>
   108e8:	ldr	r0, [pc, #148]	; 10984 <main@@Base+0x2b0>
   108ec:	bl	10698 <puts@plt>
   108f0:	ldr	r0, [pc, #168]	; 109a0 <main@@Base+0x2cc>
   108f4:	bl	10698 <puts@plt>
   108f8:	ldr	r3, [pc, #164]	; 109a4 <main@@Base+0x2d0>
   108fc:	ldr	r0, [r3]
   10900:	ldrb	r3, [r3, #4]
   10904:	str	r0, [sp, #16]
   10908:	ldr	r0, [pc, #112]	; 10980 <main@@Base+0x2ac>
   1090c:	strb	r3, [sp, #20]
   10910:	bl	1068c <printf@plt>
   10914:	add	r0, sp, #16
   10918:	bl	10698 <puts@plt>
   1091c:	add	r0, sp, #16
   10920:	bl	106bc <strlen@plt>
   10924:	mov	r1, r0
   10928:	ldr	r3, [pc, #120]	; 109a8 <main@@Base+0x2d4>
   1092c:	mov	r2, #1
   10930:	add	r0, sp, #16
   10934:	bl	10b2c <sort@@Base>
   10938:	ldr	r0, [pc, #76]	; 1098c <main@@Base+0x2b8>
   1093c:	bl	1068c <printf@plt>
   10940:	add	r0, sp, #16
   10944:	bl	10698 <puts@plt>
   10948:	mov	r0, #0
   1094c:	add	sp, sp, #76	; 0x4c
   10950:	pop	{r4, r5, r6, r7, pc}
   10954:	ldr	r0, [pc, #80]	; 109ac <main@@Base+0x2d8>
   10958:	ldr	r1, [sp, #12]
   1095c:	bl	1068c <printf@plt>
   10960:	b	107f0 <main@@Base+0x11c>
   10964:	ldr	r0, [pc, #64]	; 109ac <main@@Base+0x2d8>
   10968:	ldr	r1, [sp, #12]
   1096c:	bl	1068c <printf@plt>
   10970:	b	10858 <main@@Base+0x184>
   10974:	andeq	r0, r1, r4, lsl #27
   10978:			; <UNDEFINED> instruction: 0x00010db1
   1097c:	muleq	r1, ip, sp
   10980:	andeq	r0, r1, sl, lsr #27
   10984:	strdeq	r0, [r1], -r3
   10988:	andeq	r0, r1, r0, lsr #21
   1098c:			; <UNDEFINED> instruction: 0x00010db5
   10990:			; <UNDEFINED> instruction: 0x00010dbd
   10994:	andeq	r0, r1, r7, asr #27
   10998:	andeq	r0, r1, r6, lsl lr
   1099c:	andeq	r0, r1, r0, lsr #28
   109a0:	andeq	r0, r1, sl, lsr #28
   109a4:	andeq	r0, r1, r4, lsr lr
   109a8:	andeq	r0, r1, r4, asr #21
   109ac:	strdeq	r0, [r1], -r4

000109b0 <_start@@Base>:
   109b0:	mov	fp, #0
   109b4:	mov	lr, #0
   109b8:	pop	{r1}		; (ldr r1, [sp], #4)
   109bc:	mov	r2, sp
   109c0:	push	{r2}		; (str r2, [sp, #-4]!)
   109c4:	push	{r0}		; (str r0, [sp, #-4]!)
   109c8:	ldr	ip, [pc, #16]	; 109e0 <_start@@Base+0x30>
   109cc:	push	{ip}		; (str ip, [sp, #-4]!)
   109d0:	ldr	r0, [pc, #12]	; 109e4 <_start@@Base+0x34>
   109d4:	ldr	r3, [pc, #12]	; 109e8 <_start@@Base+0x38>
   109d8:	bl	106a4 <__libc_start_main@plt>
   109dc:	bl	106c8 <abort@plt>
   109e0:	andeq	r0, r1, r4, ror sp
   109e4:	ldrdeq	r0, [r1], -r4
   109e8:	andeq	r0, r1, r4, lsl sp
   109ec:	ldr	r3, [pc, #20]	; 10a08 <_start@@Base+0x58>
   109f0:	ldr	r2, [pc, #20]	; 10a0c <_start@@Base+0x5c>
   109f4:	add	r3, pc, r3
   109f8:	ldr	r2, [r3, r2]
   109fc:	cmp	r2, #0
   10a00:	bxeq	lr
   10a04:	b	106b0 <__gmon_start__@plt>
   10a08:	andeq	r0, r1, r4, lsl #12
   10a0c:	andeq	r0, r0, r4, lsr #32
   10a10:	ldr	r0, [pc, #24]	; 10a30 <_start@@Base+0x80>
   10a14:	ldr	r3, [pc, #24]	; 10a34 <_start@@Base+0x84>
   10a18:	cmp	r3, r0
   10a1c:	bxeq	lr
   10a20:	ldr	r3, [pc, #16]	; 10a38 <_start@@Base+0x88>
   10a24:	cmp	r3, #0
   10a28:	bxeq	lr
   10a2c:	bx	r3
   10a30:	andeq	r1, r2, r0, lsr r0
   10a34:	andeq	r1, r2, r0, lsr r0
   10a38:	andeq	r0, r0, r0
   10a3c:	ldr	r0, [pc, #36]	; 10a68 <_start@@Base+0xb8>
   10a40:	ldr	r1, [pc, #36]	; 10a6c <_start@@Base+0xbc>
   10a44:	sub	r1, r1, r0
   10a48:	asr	r1, r1, #2
   10a4c:	add	r1, r1, r1, lsr #31
   10a50:	asrs	r1, r1, #1
   10a54:	bxeq	lr
   10a58:	ldr	r3, [pc, #16]	; 10a70 <_start@@Base+0xc0>
   10a5c:	cmp	r3, #0
   10a60:	bxeq	lr
   10a64:	bx	r3
   10a68:	andeq	r1, r2, r0, lsr r0
   10a6c:	andeq	r1, r2, r0, lsr r0
   10a70:	andeq	r0, r0, r0
   10a74:	push	{r4, lr}
   10a78:	ldr	r4, [pc, #24]	; 10a98 <_start@@Base+0xe8>
   10a7c:	ldrb	r3, [r4]
   10a80:	cmp	r3, #0
   10a84:	popne	{r4, pc}
   10a88:	bl	10a10 <_start@@Base+0x60>
   10a8c:	mov	r3, #1
   10a90:	strb	r3, [r4]
   10a94:	pop	{r4, pc}
   10a98:	andeq	r1, r2, r0, lsr r0
   10a9c:	b	10a3c <_start@@Base+0x8c>

00010aa0 <comp_int_asc@@Base>:
   10aa0:	ldr	r2, [r0]
   10aa4:	ldr	r3, [r1]
   10aa8:	cmp	r2, r3
   10aac:	blt	10abc <comp_int_asc@@Base+0x1c>
   10ab0:	movgt	r0, #1
   10ab4:	movle	r0, #0
   10ab8:	bx	lr
   10abc:	mvn	r0, #0
   10ac0:	bx	lr

00010ac4 <comp_char_desc@@Base>:
   10ac4:	ldrb	r2, [r0]
   10ac8:	ldrb	r3, [r1]
   10acc:	cmp	r2, r3
   10ad0:	bcc	10ae0 <comp_char_desc@@Base+0x1c>
   10ad4:	mvnhi	r0, #0
   10ad8:	movls	r0, #0
   10adc:	bx	lr
   10ae0:	mov	r0, #1
   10ae4:	bx	lr

00010ae8 <get_elem@@Base>:
   10ae8:	mla	r0, r2, r1, r0
   10aec:	bx	lr

00010af0 <swap@@Base>:
   10af0:	sub	r3, r0, #1
   10af4:	rsb	r0, r0, #1
   10af8:	add	ip, r0, r3
   10afc:	sub	r1, r1, #1
   10b00:	cmp	r2, ip
   10b04:	bxle	lr
   10b08:	push	{lr}		; (str lr, [sp, #-4]!)
   10b0c:	ldrb	ip, [r3, #1]!
   10b10:	ldrb	lr, [r1, #1]!
   10b14:	strb	lr, [r3]
   10b18:	strb	ip, [r1]
   10b1c:	add	ip, r0, r3
   10b20:	cmp	r2, ip
   10b24:	bgt	10b0c <swap@@Base+0x1c>
   10b28:	pop	{pc}		; (ldr pc, [sp], #4)

00010b2c <sort@@Base>:
   10b2c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b30:	mov	sl, r1
   10b34:	mov	r8, r2
   10b38:	mov	fp, r3
   10b3c:	mov	r5, r0
   10b40:	mov	r4, #0
   10b44:	cmp	r4, sl
   10b48:	blt	10b54 <sort@@Base+0x28>
   10b4c:	add	sp, sp, #12
   10b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b54:	mov	r3, r5
   10b58:	add	r4, r4, #1
   10b5c:	add	r5, r5, r8
   10b60:	mov	r6, r3
   10b64:	mov	r7, r5
   10b68:	mov	r9, r4
   10b6c:	cmp	r9, sl
   10b70:	bne	10b88 <sort@@Base+0x5c>
   10b74:	mov	r2, r8
   10b78:	mov	r1, r3
   10b7c:	mov	r0, r6
   10b80:	bl	10af0 <swap@@Base>
   10b84:	b	10b44 <sort@@Base+0x18>
   10b88:	mov	r1, r6
   10b8c:	mov	r0, r7
   10b90:	str	r3, [sp, #4]
   10b94:	blx	fp
   10b98:	cmp	r0, #0
   10b9c:	add	r9, r9, #1
   10ba0:	ldr	r3, [sp, #4]
   10ba4:	movlt	r6, r7
   10ba8:	add	r7, r7, r8
   10bac:	b	10b6c <sort@@Base+0x40>

00010bb0 <linear_search@@Base>:
   10bb0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10bb4:	mov	r8, r0
   10bb8:	mov	r7, r1
   10bbc:	mov	r6, r2
   10bc0:	mov	r9, r3
   10bc4:	mov	r5, r1
   10bc8:	mov	r4, #0
   10bcc:	ldr	sl, [sp, #32]
   10bd0:	cmp	r4, r6
   10bd4:	blt	10be0 <linear_search@@Base+0x30>
   10bd8:	mov	r0, #0
   10bdc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10be0:	mov	r0, r5
   10be4:	mov	r1, r8
   10be8:	blx	sl
   10bec:	cmp	r0, #0
   10bf0:	add	r5, r5, r6
   10bf4:	bne	10c00 <linear_search@@Base+0x50>
   10bf8:	mla	r0, r9, r4, r7
   10bfc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10c00:	add	r4, r4, #1
   10c04:	b	10bd0 <linear_search@@Base+0x20>

00010c08 <binary_search@@Base>:
   10c08:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c0c:	mov	r7, r0
   10c10:	mov	r9, r1
   10c14:	mov	sl, r3
   10c18:	sub	r6, r2, #1
   10c1c:	mov	fp, #0
   10c20:	ldr	r8, [sp, #40]	; 0x28
   10c24:	cmp	fp, r6
   10c28:	ble	10c3c <binary_search@@Base+0x34>
   10c2c:	mov	r5, #0
   10c30:	mov	r0, r5
   10c34:	add	sp, sp, #4
   10c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c3c:	add	r4, fp, r6
   10c40:	mov	r0, r7
   10c44:	asr	r4, r4, #1
   10c48:	mla	r5, sl, r4, r9
   10c4c:	mov	r1, r5
   10c50:	blx	r8
   10c54:	cmp	r0, #0
   10c58:	bne	10c30 <binary_search@@Base+0x28>
   10c5c:	mov	r1, r5
   10c60:	mov	r0, r7
   10c64:	blx	r8
   10c68:	cmn	r0, #1
   10c6c:	subeq	r6, r4, #1
   10c70:	addne	fp, r4, #1
   10c74:	b	10c24 <binary_search@@Base+0x1c>

00010c78 <insertion_sort@@Base>:
   10c78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c7c:	mov	fp, r0
   10c80:	sub	sp, sp, #20
   10c84:	mov	sl, r1
   10c88:	mov	r4, r2
   10c8c:	mov	r8, r2
   10c90:	mov	r7, #0
   10c94:	mov	r6, #1
   10c98:	str	r3, [sp, #4]
   10c9c:	cmp	r6, sl
   10ca0:	blt	10cac <insertion_sort@@Base+0x34>
   10ca4:	add	sp, sp, #20
   10ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10cac:	sub	r3, r8, r7
   10cb0:	add	r5, fp, r7
   10cb4:	mov	r9, r6
   10cb8:	str	r3, [sp, #8]
   10cbc:	ldr	r3, [sp, #8]
   10cc0:	mov	r1, r5
   10cc4:	sub	r9, r9, #1
   10cc8:	add	r3, r3, r5
   10ccc:	mov	r0, r3
   10cd0:	str	r3, [sp, #12]
   10cd4:	ldr	r3, [sp, #4]
   10cd8:	blx	r3
   10cdc:	cmn	r0, #1
   10ce0:	ldr	r3, [sp, #12]
   10ce4:	bne	10d04 <insertion_sort@@Base+0x8c>
   10ce8:	mov	r1, r5
   10cec:	mov	r2, r4
   10cf0:	mov	r0, r3
   10cf4:	sub	r5, r5, r4
   10cf8:	bl	10af0 <swap@@Base>
   10cfc:	cmp	r9, #0
   10d00:	bne	10cbc <insertion_sort@@Base+0x44>
   10d04:	add	r6, r6, #1
   10d08:	add	r8, r8, r4
   10d0c:	add	r7, r7, r4
   10d10:	b	10c9c <insertion_sort@@Base+0x24>

00010d14 <__libc_csu_init@@Base>:
   10d14:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10d18:	mov	r7, r0
   10d1c:	ldr	r6, [pc, #72]	; 10d6c <__libc_csu_init@@Base+0x58>
   10d20:	ldr	r5, [pc, #72]	; 10d70 <__libc_csu_init@@Base+0x5c>
   10d24:	add	r6, pc, r6
   10d28:	add	r5, pc, r5
   10d2c:	sub	r6, r6, r5
   10d30:	mov	r8, r1
   10d34:	mov	r9, r2
   10d38:	bl	1066c <printf@plt-0x20>
   10d3c:	asrs	r6, r6, #2
   10d40:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10d44:	mov	r4, #0
   10d48:	add	r4, r4, #1
   10d4c:	ldr	r3, [r5], #4
   10d50:	mov	r2, r9
   10d54:	mov	r1, r8
   10d58:	mov	r0, r7
   10d5c:	blx	r3
   10d60:	cmp	r6, r4
   10d64:	bne	10d48 <__libc_csu_init@@Base+0x34>
   10d68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10d6c:	andeq	r0, r1, r8, ror #3
   10d70:	andeq	r0, r1, r0, ror #3

00010d74 <__libc_csu_fini@@Base>:
   10d74:	bx	lr

Disassembly of section .fini:

00010d78 <.fini>:
   10d78:	push	{r3, lr}
   10d7c:	pop	{r3, pc}
