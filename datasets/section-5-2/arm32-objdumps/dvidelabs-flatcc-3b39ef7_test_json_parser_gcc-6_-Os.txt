
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_json_parser:     file format elf32-littlearm


Disassembly of section .init:

00012598 <.init>:
   12598:	push	{r3, lr}
   1259c:	bl	128f0 <_start@@Base+0x3c>
   125a0:	pop	{r3, pc}

Disassembly of section .plt:

000125a4 <raise@plt-0x14>:
   125a4:	push	{lr}		; (str lr, [sp, #-4]!)
   125a8:	ldr	lr, [pc, #4]	; 125b4 <raise@plt-0x4>
   125ac:	add	lr, pc, lr
   125b0:	ldr	pc, [lr, #8]!
   125b4:	andeq	r1, r2, ip, asr #20

000125b8 <raise@plt>:
   125b8:	add	ip, pc, #0, 12
   125bc:	add	ip, ip, #135168	; 0x21000
   125c0:	ldr	pc, [ip, #2636]!	; 0xa4c

000125c4 <fopen@plt>:
   125c4:	add	ip, pc, #0, 12
   125c8:	add	ip, ip, #135168	; 0x21000
   125cc:	ldr	pc, [ip, #2628]!	; 0xa44

000125d0 <free@plt>:
   125d0:	add	ip, pc, #0, 12
   125d4:	add	ip, ip, #135168	; 0x21000
   125d8:	ldr	pc, [ip, #2620]!	; 0xa3c

000125dc <memcpy@plt>:
   125dc:	add	ip, pc, #0, 12
   125e0:	add	ip, ip, #135168	; 0x21000
   125e4:	ldr	pc, [ip, #2612]!	; 0xa34

000125e8 <ftell@plt>:
   125e8:	add	ip, pc, #0, 12
   125ec:	add	ip, ip, #135168	; 0x21000
   125f0:	ldr	pc, [ip, #2604]!	; 0xa2c

000125f4 <memcmp@plt>:
   125f4:	add	ip, pc, #0, 12
   125f8:	add	ip, ip, #135168	; 0x21000
   125fc:	ldr	pc, [ip, #2596]!	; 0xa24

00012600 <rewind@plt>:
   12600:	add	ip, pc, #0, 12
   12604:	add	ip, ip, #135168	; 0x21000
   12608:	ldr	pc, [ip, #2588]!	; 0xa1c

0001260c <realloc@plt>:
   1260c:	add	ip, pc, #0, 12
   12610:	add	ip, ip, #135168	; 0x21000
   12614:	ldr	pc, [ip, #2580]!	; 0xa14

00012618 <fread@plt>:
   12618:	add	ip, pc, #0, 12
   1261c:	add	ip, ip, #135168	; 0x21000
   12620:	ldr	pc, [ip, #2572]!	; 0xa0c

00012624 <malloc@plt>:
   12624:	add	ip, pc, #0, 12
   12628:	add	ip, ip, #135168	; 0x21000
   1262c:	ldr	pc, [ip, #2564]!	; 0xa04

00012630 <__libc_start_main@plt>:
   12630:	add	ip, pc, #0, 12
   12634:	add	ip, ip, #135168	; 0x21000
   12638:	ldr	pc, [ip, #2556]!	; 0x9fc

0001263c <__gmon_start__@plt>:
   1263c:	add	ip, pc, #0, 12
   12640:	add	ip, ip, #135168	; 0x21000
   12644:	ldr	pc, [ip, #2548]!	; 0x9f4

00012648 <exit@plt>:
   12648:	add	ip, pc, #0, 12
   1264c:	add	ip, ip, #135168	; 0x21000
   12650:	ldr	pc, [ip, #2540]!	; 0x9ec

00012654 <strlen@plt>:
   12654:	add	ip, pc, #0, 12
   12658:	add	ip, ip, #135168	; 0x21000
   1265c:	ldr	pc, [ip, #2532]!	; 0x9e4

00012660 <fprintf@plt>:
   12660:	add	ip, pc, #0, 12
   12664:	add	ip, ip, #135168	; 0x21000
   12668:	ldr	pc, [ip, #2524]!	; 0x9dc

0001266c <posix_memalign@plt>:
   1266c:	add	ip, pc, #0, 12
   12670:	add	ip, ip, #135168	; 0x21000
   12674:	ldr	pc, [ip, #2516]!	; 0x9d4

00012678 <memset@plt>:
   12678:	add	ip, pc, #0, 12
   1267c:	add	ip, ip, #135168	; 0x21000
   12680:	ldr	pc, [ip, #2508]!	; 0x9cc

00012684 <strtod@plt>:
   12684:	add	ip, pc, #0, 12
   12688:	add	ip, ip, #135168	; 0x21000
   1268c:	ldr	pc, [ip, #2500]!	; 0x9c4

00012690 <memchr@plt>:
   12690:	add	ip, pc, #0, 12
   12694:	add	ip, ip, #135168	; 0x21000
   12698:	ldr	pc, [ip, #2492]!	; 0x9bc

0001269c <fclose@plt>:
   1269c:	add	ip, pc, #0, 12
   126a0:	add	ip, ip, #135168	; 0x21000
   126a4:	ldr	pc, [ip, #2484]!	; 0x9b4

000126a8 <fputc@plt>:
   126a8:	add	ip, pc, #0, 12
   126ac:	add	ip, ip, #135168	; 0x21000
   126b0:	ldr	pc, [ip, #2476]!	; 0x9ac

000126b4 <fseek@plt>:
   126b4:	add	ip, pc, #0, 12
   126b8:	add	ip, ip, #135168	; 0x21000
   126bc:	ldr	pc, [ip, #2468]!	; 0x9a4

000126c0 <fputs@plt>:
   126c0:	add	ip, pc, #0, 12
   126c4:	add	ip, ip, #135168	; 0x21000
   126c8:	ldr	pc, [ip, #2460]!	; 0x99c

000126cc <abort@plt>:
   126cc:	add	ip, pc, #0, 12
   126d0:	add	ip, ip, #135168	; 0x21000
   126d4:	ldr	pc, [ip, #2452]!	; 0x994

000126d8 <__assert_fail@plt>:
   126d8:	add	ip, pc, #0, 12
   126dc:	add	ip, ip, #135168	; 0x21000
   126e0:	ldr	pc, [ip, #2444]!	; 0x98c

Disassembly of section .text:

000126e8 <main@@Base-0x168>:
   126e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126ec:	sub	sp, sp, #36	; 0x24
   126f0:	mov	sl, #0
   126f4:	ldr	r8, [sp, #72]	; 0x48
   126f8:	mov	r4, r2
   126fc:	mov	r6, r0
   12700:	str	sl, [r8]
   12704:	str	sl, [r8, #4]
   12708:	mov	fp, r3
   1270c:	bl	13888 <_start@@Base+0xfd4>
   12710:	cmp	r4, r0
   12714:	beq	127d0 <__assert_fail@plt+0xf8>
   12718:	mov	r7, r0
   1271c:	mov	r9, sl
   12720:	str	sl, [sp, #8]
   12724:	str	sl, [sp, #12]
   12728:	mov	sl, fp
   1272c:	add	r3, sp, #20
   12730:	str	r3, [sp, #4]
   12734:	add	r3, sp, #24
   12738:	str	r3, [sp]
   1273c:	mov	r2, r4
   12740:	ldr	r5, [sl]
   12744:	add	r3, sp, #16
   12748:	mov	r1, r7
   1274c:	mov	r0, r6
   12750:	blx	r5
   12754:	cmp	r4, r0
   12758:	mov	r5, r0
   1275c:	beq	127d0 <__assert_fail@plt+0xf8>
   12760:	cmp	r7, r0
   12764:	bne	127dc <__assert_fail@plt+0x104>
   12768:	ldr	r3, [sl, #4]!
   1276c:	cmp	r3, #0
   12770:	bne	1272c <__assert_fail@plt+0x54>
   12774:	mov	r3, #23
   12778:	mov	r2, r4
   1277c:	mov	r1, r7
   12780:	b	127a4 <__assert_fail@plt+0xcc>
   12784:	mov	r7, r5
   12788:	b	12728 <__assert_fail@plt+0x50>
   1278c:	ldr	r3, [r6, #12]
   12790:	cmp	r3, #0
   12794:	beq	127e4 <__assert_fail@plt+0x10c>
   12798:	mov	r3, #14
   1279c:	mov	r2, r4
   127a0:	mov	r1, r5
   127a4:	mov	r0, r6
   127a8:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   127ac:	mov	r4, r0
   127b0:	b	127d0 <__assert_fail@plt+0xf8>
   127b4:	mov	r3, #8
   127b8:	mov	r2, r4
   127bc:	mov	r1, r5
   127c0:	mov	r0, r6
   127c4:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   127c8:	cmp	r4, r0
   127cc:	bne	127f8 <__assert_fail@plt+0x120>
   127d0:	mov	r0, r4
   127d4:	add	sp, sp, #36	; 0x24
   127d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127dc:	cmp	r9, #0
   127e0:	bne	1278c <__assert_fail@plt+0xb4>
   127e4:	ldr	r3, [sp, #16]
   127e8:	cmp	r3, #0
   127ec:	bne	127b4 <__assert_fail@plt+0xdc>
   127f0:	ldrd	r2, [sp, #24]
   127f4:	strd	r2, [sp, #8]
   127f8:	ldrd	r2, [r8]
   127fc:	ldrd	r0, [sp, #8]
   12800:	add	r9, r9, #1
   12804:	adds	r0, r0, r2
   12808:	adc	r1, r1, r3
   1280c:	mov	r3, r1
   12810:	mov	r2, r0
   12814:	strd	r2, [r8]
   12818:	ldr	r3, [sp, #20]
   1281c:	cmp	r3, #0
   12820:	bne	12784 <__assert_fail@plt+0xac>
   12824:	mov	r4, r5
   12828:	b	127d0 <__assert_fail@plt+0xf8>
   1282c:	push	{r4, lr}
   12830:	mov	r2, #260	; 0x104
   12834:	ldr	r3, [pc, #8]	; 12844 <__assert_fail@plt+0x16c>
   12838:	ldr	r1, [pc, #8]	; 12848 <__assert_fail@plt+0x170>
   1283c:	ldr	r0, [pc, #8]	; 1284c <__assert_fail@plt+0x174>
   12840:	bl	126d8 <__assert_fail@plt>
   12844:	ldrdeq	r2, [r2], -r8
   12848:	andeq	r3, r2, fp, ror #16
   1284c:	andeq	r3, r2, r1, asr #17

00012850 <main@@Base>:
   12850:	push	{r4, r5, r6, lr}
   12854:	mov	r4, r0
   12858:	ldr	r5, [pc, #68]	; 128a4 <main@@Base+0x54>
   1285c:	mov	r6, r1
   12860:	ldr	r0, [pc, #64]	; 128a8 <main@@Base+0x58>
   12864:	ldr	r1, [r5]
   12868:	bl	126c0 <fputs@plt>
   1286c:	sub	r3, r4, #1
   12870:	cmp	r3, #1
   12874:	bls	1288c <main@@Base+0x3c>
   12878:	ldr	r1, [r5]
   1287c:	ldr	r0, [pc, #40]	; 128ac <main@@Base+0x5c>
   12880:	bl	126c0 <fputs@plt>
   12884:	mov	r0, #1
   12888:	bl	12648 <exit@plt>
   1288c:	cmp	r4, #2
   12890:	ldreq	r3, [pc, #24]	; 128b0 <main@@Base+0x60>
   12894:	ldreq	r2, [r6, #4]
   12898:	pop	{r4, r5, r6, lr}
   1289c:	streq	r2, [r3, #716]	; 0x2cc
   128a0:	b	1b4f8 <test_parse@@Base>
   128a4:	andeq	r4, r3, r0, asr #7
   128a8:	andeq	r2, r2, sp, lsr #9
   128ac:			; <UNDEFINED> instruction: 0x000224be
   128b0:	andeq	r4, r3, r0, lsl #1

000128b4 <_start@@Base>:
   128b4:	mov	fp, #0
   128b8:	mov	lr, #0
   128bc:	pop	{r1}		; (ldr r1, [sp], #4)
   128c0:	mov	r2, sp
   128c4:	push	{r2}		; (str r2, [sp, #-4]!)
   128c8:	push	{r0}		; (str r0, [sp, #-4]!)
   128cc:	ldr	ip, [pc, #16]	; 128e4 <_start@@Base+0x30>
   128d0:	push	{ip}		; (str ip, [sp, #-4]!)
   128d4:	ldr	r0, [pc, #12]	; 128e8 <_start@@Base+0x34>
   128d8:	ldr	r3, [pc, #12]	; 128ec <_start@@Base+0x38>
   128dc:	bl	12630 <__libc_start_main@plt>
   128e0:	bl	126cc <abort@plt>
   128e4:	andeq	r2, r2, r8, lsr #5
   128e8:	andeq	r2, r1, r0, asr r8
   128ec:	andeq	r2, r2, r8, asr #4
   128f0:	ldr	r3, [pc, #20]	; 1290c <_start@@Base+0x58>
   128f4:	ldr	r2, [pc, #20]	; 12910 <_start@@Base+0x5c>
   128f8:	add	r3, pc, r3
   128fc:	ldr	r2, [r3, r2]
   12900:	cmp	r2, #0
   12904:	bxeq	lr
   12908:	b	1263c <__gmon_start__@plt>
   1290c:	andeq	r1, r2, r0, lsl #14
   12910:	andeq	r0, r0, r0, ror r0
   12914:	ldr	r3, [pc, #28]	; 12938 <_start@@Base+0x84>
   12918:	ldr	r0, [pc, #28]	; 1293c <_start@@Base+0x88>
   1291c:	sub	r3, r3, r0
   12920:	cmp	r3, #6
   12924:	bxls	lr
   12928:	ldr	r3, [pc, #16]	; 12940 <_start@@Base+0x8c>
   1292c:	cmp	r3, #0
   12930:	bxeq	lr
   12934:	bx	r3
   12938:	andeq	r4, r3, r3, asr #7
   1293c:	andeq	r4, r3, r0, asr #7
   12940:	andeq	r0, r0, r0
   12944:	ldr	r1, [pc, #36]	; 12970 <_start@@Base+0xbc>
   12948:	ldr	r0, [pc, #36]	; 12974 <_start@@Base+0xc0>
   1294c:	sub	r1, r1, r0
   12950:	asr	r1, r1, #2
   12954:	add	r1, r1, r1, lsr #31
   12958:	asrs	r1, r1, #1
   1295c:	bxeq	lr
   12960:	ldr	r3, [pc, #16]	; 12978 <_start@@Base+0xc4>
   12964:	cmp	r3, #0
   12968:	bxeq	lr
   1296c:	bx	r3
   12970:	andeq	r4, r3, r0, asr #7
   12974:	andeq	r4, r3, r0, asr #7
   12978:	andeq	r0, r0, r0
   1297c:	push	{r4, lr}
   12980:	ldr	r4, [pc, #24]	; 129a0 <_start@@Base+0xec>
   12984:	ldrb	r3, [r4]
   12988:	cmp	r3, #0
   1298c:	popne	{r4, pc}
   12990:	bl	12914 <_start@@Base+0x60>
   12994:	mov	r3, #1
   12998:	strb	r3, [r4]
   1299c:	pop	{r4, pc}
   129a0:	andeq	r4, r3, r8, asr #7
   129a4:	ldr	r0, [pc, #40]	; 129d4 <_start@@Base+0x120>
   129a8:	ldr	r3, [r0]
   129ac:	cmp	r3, #0
   129b0:	bne	129b8 <_start@@Base+0x104>
   129b4:	b	12944 <_start@@Base+0x90>
   129b8:	ldr	r3, [pc, #24]	; 129d8 <_start@@Base+0x124>
   129bc:	cmp	r3, #0
   129c0:	beq	129b4 <_start@@Base+0x100>
   129c4:	push	{r4, lr}
   129c8:	blx	r3
   129cc:	pop	{r4, lr}
   129d0:	b	12944 <_start@@Base+0x90>
   129d4:	andeq	r3, r3, r4, lsl pc
	...
   129e0:	sub	r1, r1, r0
   129e4:	cmp	r1, #8
   129e8:	push	{r4, r5, r6, r7, lr}
   129ec:	bhi	12a20 <_start@@Base+0x16c>
   129f0:	sub	r1, r1, #1
   129f4:	cmp	r1, #7
   129f8:	ldrls	pc, [pc, r1, lsl #2]
   129fc:	b	12b0c <_start@@Base+0x258>
   12a00:	andeq	r2, r1, r0, lsl #22
   12a04:	strdeq	r2, [r1], -r4
   12a08:	andeq	r2, r1, r8, ror #21
   12a0c:	ldrdeq	r2, [r1], -ip
   12a10:	ldrdeq	r2, [r1], -r0
   12a14:	andeq	r2, r1, r4, asr #21
   12a18:			; <UNDEFINED> instruction: 0x00012abc
   12a1c:	andeq	r2, r1, r0, lsr #20
   12a20:	ldrb	r4, [r0, #7]
   12a24:	ldrb	r6, [r0, #6]
   12a28:	mov	r5, #0
   12a2c:	mov	r3, #0
   12a30:	orr	r3, r3, r5
   12a34:	lsl	r2, r6, #8
   12a38:	orr	r2, r2, r4
   12a3c:	ldrb	r6, [r0, #5]
   12a40:	mov	r5, #0
   12a44:	orr	r3, r3, r5
   12a48:	lsl	r4, r6, #16
   12a4c:	orr	r2, r2, r4
   12a50:	ldrb	r6, [r0, #4]
   12a54:	mov	r5, #0
   12a58:	orr	r5, r5, r3
   12a5c:	lsl	r4, r6, #24
   12a60:	orr	r4, r4, r2
   12a64:	ldrb	r3, [r0, #3]
   12a68:	mov	r2, #0
   12a6c:	orr	r4, r4, r2
   12a70:	orr	r5, r5, r3
   12a74:	ldrb	r6, [r0, #2]
   12a78:	mov	r2, #0
   12a7c:	orr	r4, r4, r2
   12a80:	lsl	r3, r6, #8
   12a84:	orr	r5, r5, r3
   12a88:	ldrb	r6, [r0, #1]
   12a8c:	mov	r2, #0
   12a90:	mov	r7, #0
   12a94:	orr	r2, r2, r4
   12a98:	lsl	r3, r6, #16
   12a9c:	orr	r3, r3, r5
   12aa0:	ldrb	r4, [r0]
   12aa4:	mov	r0, #0
   12aa8:	mov	r5, #0
   12aac:	orr	r0, r0, r2
   12ab0:	lsl	r1, r4, #24
   12ab4:	orr	r1, r1, r3
   12ab8:	pop	{r4, r5, r6, r7, pc}
   12abc:	mov	r4, #0
   12ac0:	b	12a24 <_start@@Base+0x170>
   12ac4:	mov	r2, #0
   12ac8:	mov	r3, #0
   12acc:	b	12a3c <_start@@Base+0x188>
   12ad0:	mov	r2, #0
   12ad4:	mov	r3, #0
   12ad8:	b	12a50 <_start@@Base+0x19c>
   12adc:	mov	r4, #0
   12ae0:	mov	r5, #0
   12ae4:	b	12a64 <_start@@Base+0x1b0>
   12ae8:	mov	r4, #0
   12aec:	mov	r5, #0
   12af0:	b	12a74 <_start@@Base+0x1c0>
   12af4:	mov	r4, #0
   12af8:	mov	r5, #0
   12afc:	b	12a88 <_start@@Base+0x1d4>
   12b00:	mov	r2, #0
   12b04:	mov	r3, #0
   12b08:	b	12aa0 <_start@@Base+0x1ec>
   12b0c:	mov	r0, #0
   12b10:	mov	r1, #0
   12b14:	pop	{r4, r5, r6, r7, pc}
   12b18:	cmp	r0, #4
   12b1c:	movhi	r0, #0
   12b20:	movls	r0, #1
   12b24:	bx	lr
   12b28:	cmp	r0, #11
   12b2c:	bhi	12b50 <_start@@Base+0x29c>
   12b30:	cmp	r0, #8
   12b34:	bcs	12b58 <_start@@Base+0x2a4>
   12b38:	cmp	r0, #0
   12b3c:	beq	12b58 <_start@@Base+0x2a4>
   12b40:	cmp	r0, #2
   12b44:	beq	12b58 <_start@@Base+0x2a4>
   12b48:	mov	r0, #0
   12b4c:	bx	lr
   12b50:	cmp	r0, #255	; 0xff
   12b54:	b	12b44 <_start@@Base+0x290>
   12b58:	mov	r0, #1
   12b5c:	bx	lr
   12b60:	sub	r3, r2, r1
   12b64:	cmp	r3, #3
   12b68:	push	{r4, r5, r6, lr}
   12b6c:	mov	r6, r0
   12b70:	mov	r4, r1
   12b74:	mov	r5, r2
   12b78:	ble	12b94 <_start@@Base+0x2e0>
   12b7c:	mov	r2, #4
   12b80:	ldr	r1, [pc, #44]	; 12bb4 <_start@@Base+0x300>
   12b84:	mov	r0, r4
   12b88:	bl	125f4 <memcmp@plt>
   12b8c:	cmp	r0, #0
   12b90:	beq	12bac <_start@@Base+0x2f8>
   12b94:	mov	r2, r5
   12b98:	mov	r1, r4
   12b9c:	mov	r0, r6
   12ba0:	mov	r3, #26
   12ba4:	pop	{r4, r5, r6, lr}
   12ba8:	b	1f9c8 <flatcc_json_parser_set_error@@Base>
   12bac:	add	r0, r4, #4
   12bb0:	pop	{r4, r5, r6, pc}
   12bb4:	ldrdeq	r3, [r2], -sl
   12bb8:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, sl, fp, lr}
   12bbc:	mov	r4, r1
   12bc0:	mov	r5, r0
   12bc4:	mov	r1, r2
   12bc8:	mov	r0, r4
   12bcc:	mov	sl, r3
   12bd0:	str	r2, [sp, #12]
   12bd4:	bl	129e0 <_start@@Base+0x12c>
   12bd8:	add	r7, pc, #568	; 0x238
   12bdc:	ldrd	r6, [r7]
   12be0:	ldr	r8, [sp, #48]	; 0x30
   12be4:	ldr	fp, [sp, #52]	; 0x34
   12be8:	ldr	ip, [sp, #12]
   12bec:	cmp	r1, r7
   12bf0:	cmpeq	r0, r6
   12bf4:	bhi	12ce8 <_start@@Base+0x434>
   12bf8:	add	r7, pc, #544	; 0x220
   12bfc:	ldrd	r6, [r7]
   12c00:	cmp	r1, r7
   12c04:	cmpeq	r0, r6
   12c08:	mov	r7, r1
   12c0c:	and	r6, r0, #-16777216	; 0xff000000
   12c10:	bhi	12c58 <_start@@Base+0x3a4>
   12c14:	add	r1, pc, #524	; 0x20c
   12c18:	ldrd	r0, [r1]
   12c1c:	cmp	r7, r1
   12c20:	cmpeq	r6, r0
   12c24:	bne	12c4c <_start@@Base+0x398>
   12c28:	mov	r2, ip
   12c2c:	str	fp, [sp]
   12c30:	mov	r3, #5
   12c34:	mov	r1, r4
   12c38:	mov	r0, r5
   12c3c:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   12c40:	cmp	r4, r0
   12c44:	movne	r2, #9
   12c48:	bne	12c90 <_start@@Base+0x3dc>
   12c4c:	mov	r0, r4
   12c50:	add	sp, sp, #16
   12c54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12c58:	add	r3, pc, #464	; 0x1d0
   12c5c:	ldrd	r2, [r3]
   12c60:	cmp	r1, r3
   12c64:	cmpeq	r6, r2
   12c68:	bne	12ca8 <_start@@Base+0x3f4>
   12c6c:	mov	r2, ip
   12c70:	str	fp, [sp]
   12c74:	mov	r3, #5
   12c78:	mov	r1, r4
   12c7c:	mov	r0, r5
   12c80:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   12c84:	cmp	r4, r0
   12c88:	movne	r2, #2
   12c8c:	beq	12c4c <_start@@Base+0x398>
   12c90:	mov	r3, #0
   12c94:	mov	r4, r0
   12c98:	strd	r2, [r8]
   12c9c:	mov	r3, #0
   12ca0:	str	r3, [sl]
   12ca4:	b	12c4c <_start@@Base+0x398>
   12ca8:	add	r7, pc, #392	; 0x188
   12cac:	ldrd	r6, [r7]
   12cb0:	bic	r0, r0, #255	; 0xff
   12cb4:	cmp	r1, r7
   12cb8:	cmpeq	r0, r6
   12cbc:	bne	12c4c <_start@@Base+0x398>
   12cc0:	mov	r2, ip
   12cc4:	str	fp, [sp]
   12cc8:	mov	r3, #7
   12ccc:	mov	r1, r4
   12cd0:	mov	r0, r5
   12cd4:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   12cd8:	cmp	r4, r0
   12cdc:	movne	r2, #10
   12ce0:	bne	12c90 <_start@@Base+0x3dc>
   12ce4:	b	12c4c <_start@@Base+0x398>
   12ce8:	add	r7, pc, #336	; 0x150
   12cec:	ldrd	r6, [r7]
   12cf0:	cmp	r1, r7
   12cf4:	cmpeq	r0, r6
   12cf8:	bhi	12d3c <_start@@Base+0x488>
   12cfc:	add	r7, pc, #324	; 0x144
   12d00:	ldrd	r6, [r7]
   12d04:	mov	r0, #0
   12d08:	cmp	r1, r7
   12d0c:	cmpeq	r0, r6
   12d10:	bne	12c4c <_start@@Base+0x398>
   12d14:	mov	r2, ip
   12d18:	str	fp, [sp]
   12d1c:	mov	r3, #4
   12d20:	mov	r1, r4
   12d24:	mov	r0, r5
   12d28:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   12d2c:	cmp	r4, r0
   12d30:	movne	r2, #0
   12d34:	bne	12c90 <_start@@Base+0x3dc>
   12d38:	b	12c4c <_start@@Base+0x398>
   12d3c:	add	r7, pc, #268	; 0x10c
   12d40:	ldrd	r6, [r7]
   12d44:	cmp	r1, r7
   12d48:	cmpeq	r0, r6
   12d4c:	bhi	12d90 <_start@@Base+0x4dc>
   12d50:	add	r7, pc, #256	; 0x100
   12d54:	ldrd	r6, [r7]
   12d58:	and	r0, r0, #-16777216	; 0xff000000
   12d5c:	cmp	r1, r7
   12d60:	cmpeq	r0, r6
   12d64:	bne	12c4c <_start@@Base+0x398>
   12d68:	mov	r2, ip
   12d6c:	str	fp, [sp]
   12d70:	mov	r3, #5
   12d74:	mov	r1, r4
   12d78:	mov	r0, r5
   12d7c:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   12d80:	cmp	r4, r0
   12d84:	movne	r2, #11
   12d88:	bne	12c90 <_start@@Base+0x3dc>
   12d8c:	b	12c4c <_start@@Base+0x398>
   12d90:	add	r3, pc, #200	; 0xc8
   12d94:	ldrd	r2, [r3]
   12d98:	ldr	r6, [pc, #208]	; 12e70 <_start@@Base+0x5bc>
   12d9c:	mvn	r7, #0
   12da0:	and	r7, r7, r1
   12da4:	and	r6, r6, r0
   12da8:	cmp	r7, r3
   12dac:	cmpeq	r6, r2
   12db0:	bne	12ddc <_start@@Base+0x528>
   12db4:	mov	r2, ip
   12db8:	str	fp, [sp]
   12dbc:	mov	r3, #6
   12dc0:	mov	r1, r4
   12dc4:	mov	r0, r5
   12dc8:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   12dcc:	cmp	r4, r0
   12dd0:	movne	r2, #255	; 0xff
   12dd4:	bne	12c90 <_start@@Base+0x3dc>
   12dd8:	b	12c4c <_start@@Base+0x398>
   12ddc:	add	r7, pc, #132	; 0x84
   12de0:	ldrd	r6, [r7]
   12de4:	cmp	r1, r7
   12de8:	cmpeq	r0, r6
   12dec:	bne	12c4c <_start@@Base+0x398>
   12df0:	str	fp, [sp]
   12df4:	mov	r3, #8
   12df8:	mov	r2, ip
   12dfc:	mov	r1, r4
   12e00:	mov	r0, r5
   12e04:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   12e08:	cmp	r4, r0
   12e0c:	beq	12c4c <_start@@Base+0x398>
   12e10:	mov	r2, #8
   12e14:	b	12c90 <_start@@Base+0x3dc>
   12e18:			; <UNDEFINED> instruction: 0xffffffff
   12e1c:	cdpmi	14, 4, cr4, cr15, cr4, {2}
   12e20:			; <UNDEFINED> instruction: 0x46616dff
   12e24:	rsbmi	r6, pc, #428	; 0x1ac
   12e28:	strvs	r0, [r0, #-0]
   12e2c:	rsbmi	r6, r5, #108, 24	; 0x6c00
   12e30:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   12e34:	ldclmi	12, cr4, [r5, #-388]!	; 0xfffffe7c
   12e38:	strbtmi	r6, [r1], -r0, lsl #28
   12e3c:	rsbmi	r6, pc, #428	; 0x1ac
   12e40:	ldrshvc	pc, [pc, #255]	; 12f47 <_start@@Base+0x693>	; <UNPREDICTABLE>
   12e44:	svcmi	0x00746865
   12e48:	andeq	r0, r0, r0
   12e4c:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   12e50:	cdpvs	5, 7, cr6, cr10, cr11, {3}
   12e54:	rsbpl	r7, r1, #117	; 0x75
   12e58:	andvc	r0, r0, #0
   12e5c:	svcmi	0x00746865
   12e60:	strbvs	r0, [r4, #-0]!
   12e64:	strbpl	r7, [lr, #-1395]!	; 0xfffffa8d
   12e68:	cdpvs	5, 7, cr6, cr10, cr12, {3}
   12e6c:	rsbpl	r7, r1, #117	; 0x75
   12e70:			; <UNDEFINED> instruction: 0xffff0000
   12e74:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e78:	mov	r5, r1
   12e7c:	mov	sl, r0
   12e80:	mov	r1, r2
   12e84:	mov	r0, r5
   12e88:	mov	r6, r2
   12e8c:	mov	r7, r3
   12e90:	bl	129e0 <_start@@Base+0x12c>
   12e94:	add	r3, pc, #492	; 0x1ec
   12e98:	ldrd	r2, [r3]
   12e9c:	ldr	fp, [sp, #52]	; 0x34
   12ea0:	cmp	r1, r3
   12ea4:	cmpeq	r0, r2
   12ea8:	mov	r9, r1
   12eac:	bhi	12f1c <_start@@Base+0x668>
   12eb0:	add	r3, pc, #472	; 0x1d8
   12eb4:	ldrd	r2, [r3]
   12eb8:	bic	r9, r1, #255	; 0xff
   12ebc:	mov	r8, #0
   12ec0:	cmp	r9, r3
   12ec4:	cmpeq	r8, r2
   12ec8:	beq	12edc <_start@@Base+0x628>
   12ecc:	mov	r4, r5
   12ed0:	mov	r0, r4
   12ed4:	add	sp, sp, #12
   12ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12edc:	mov	r2, r6
   12ee0:	str	fp, [sp]
   12ee4:	mov	r3, #3
   12ee8:	mov	r1, r5
   12eec:	mov	r0, sl
   12ef0:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   12ef4:	cmp	r5, r0
   12ef8:	mov	r4, r0
   12efc:	movne	r2, #4
   12f00:	beq	12ed0 <_start@@Base+0x61c>
   12f04:	ldr	r1, [sp, #48]	; 0x30
   12f08:	mov	r3, #0
   12f0c:	strd	r2, [r1]
   12f10:	mov	r3, #0
   12f14:	str	r3, [r7]
   12f18:	b	12ed0 <_start@@Base+0x61c>
   12f1c:	add	r3, pc, #372	; 0x174
   12f20:	ldrd	r2, [r3]
   12f24:	mov	r8, r0
   12f28:	cmp	r1, r3
   12f2c:	cmpeq	r0, r2
   12f30:	bne	12fb4 <_start@@Base+0x700>
   12f34:	mov	r2, r6
   12f38:	str	fp, [sp]
   12f3c:	mov	r3, #8
   12f40:	mov	r1, r5
   12f44:	mov	r0, sl
   12f48:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   12f4c:	cmp	r5, r0
   12f50:	mov	r4, r0
   12f54:	movne	r2, #3
   12f58:	bne	12f04 <_start@@Base+0x650>
   12f5c:	add	r3, pc, #316	; 0x13c
   12f60:	ldrd	r2, [r3]
   12f64:	mov	r0, #0
   12f68:	cmp	r9, r3
   12f6c:	cmpeq	r0, r2
   12f70:	bne	12ffc <_start@@Base+0x748>
   12f74:	str	fp, [sp]
   12f78:	mov	r3, #4
   12f7c:	mov	r2, r6
   12f80:	mov	r1, r4
   12f84:	mov	r0, sl
   12f88:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   12f8c:	cmp	r4, r0
   12f90:	beq	12ecc <_start@@Base+0x618>
   12f94:	ldr	r1, [sp, #48]	; 0x30
   12f98:	mov	r3, #0
   12f9c:	mov	r2, #0
   12fa0:	mov	r4, r0
   12fa4:	strd	r2, [r1]
   12fa8:	mov	r3, #0
   12fac:	str	r3, [r7]
   12fb0:	b	12ed0 <_start@@Base+0x61c>
   12fb4:	add	r3, pc, #236	; 0xec
   12fb8:	ldrd	r2, [r3]
   12fbc:	bic	r0, r0, #255	; 0xff
   12fc0:	cmp	r1, r3
   12fc4:	cmpeq	r0, r2
   12fc8:	movne	r4, r5
   12fcc:	bne	12f5c <_start@@Base+0x6a8>
   12fd0:	mov	r2, r6
   12fd4:	str	fp, [sp]
   12fd8:	mov	r3, #7
   12fdc:	mov	r1, r5
   12fe0:	mov	r0, sl
   12fe4:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   12fe8:	cmp	r5, r0
   12fec:	mov	r4, r0
   12ff0:	movne	r2, #1
   12ff4:	bne	12f04 <_start@@Base+0x650>
   12ff8:	b	12f5c <_start@@Base+0x6a8>
   12ffc:	add	r3, pc, #172	; 0xac
   13000:	ldrd	r2, [r3]
   13004:	cmp	r9, r3
   13008:	cmpeq	r8, r2
   1300c:	bne	12ecc <_start@@Base+0x618>
   13010:	mov	r1, r6
   13014:	add	r0, r4, #8
   13018:	bl	129e0 <_start@@Base+0x12c>
   1301c:	add	r3, pc, #148	; 0x94
   13020:	ldrd	r2, [r3]
   13024:	cmp	r1, r3
   13028:	cmpeq	r0, r2
   1302c:	bne	12ecc <_start@@Base+0x618>
   13030:	add	r8, r4, #16
   13034:	mov	r1, r6
   13038:	mov	r0, r8
   1303c:	bl	129e0 <_start@@Base+0x12c>
   13040:	add	r3, pc, #120	; 0x78
   13044:	ldrd	r2, [r3]
   13048:	bic	r0, r0, #255	; 0xff
   1304c:	cmp	r1, r3
   13050:	cmpeq	r0, r2
   13054:	bne	12ecc <_start@@Base+0x618>
   13058:	str	fp, [sp]
   1305c:	mov	r3, #7
   13060:	mov	r2, r6
   13064:	mov	r1, r8
   13068:	mov	r0, sl
   1306c:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   13070:	cmp	r8, r0
   13074:	mov	r4, r0
   13078:	beq	12ecc <_start@@Base+0x618>
   1307c:	mov	r2, #2
   13080:	b	12f04 <_start@@Base+0x650>
   13084:	nop			; (mov r0, r0)
   13088:	strbtvc	r7, [r5], #-511	; 0xfffffe01
   1308c:	stclmi	14, cr6, [pc, #-460]!	; 12ec8 <_start@@Base+0x614>
   13090:	andeq	r0, r0, r0
   13094:	cmnmi	ip, r0, lsl #8
   13098:	strbtvc	r7, [r5], #-562	; 0xfffffdce
   1309c:	stclmi	14, cr6, [pc, #-460]!	; 12ed8 <_start@@Base+0x624>
   130a0:	andeq	r0, r0, r0
   130a4:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   130a8:	strbtvc	r7, [r5], #-512	; 0xfffffe00
   130ac:	stclmi	14, cr6, [pc, #-460]!	; 12ee8 <_start@@Base+0x634>
   130b0:	cmnpl	r9, #112, 26	; 0x1c00
   130b4:	strbtpl	r7, [r5], #-884	; 0xfffffc8c
   130b8:	rsbvs	r6, ip, #364904448	; 0x15c00000
   130bc:	cfstrdvs	mvd5, [r5], #-388	; 0xfffffe7c
   130c0:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   130c4:	ldmdbvs	r4!, {r0, r2, r6, fp, sp, lr}^
   130c8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130cc:	mov	r4, r1
   130d0:	mov	r5, r0
   130d4:	mov	r1, r2
   130d8:	mov	r0, r4
   130dc:	mov	sl, r2
   130e0:	mov	fp, r3
   130e4:	bl	129e0 <_start@@Base+0x12c>
   130e8:	add	r3, pc, #280	; 0x118
   130ec:	ldrd	r2, [r3]
   130f0:	cmp	r1, r3
   130f4:	cmpeq	r0, r2
   130f8:	bhi	1314c <_start@@Base+0x898>
   130fc:	add	r3, pc, #268	; 0x10c
   13100:	ldrd	r2, [r3]
   13104:	mov	r0, #0
   13108:	cmp	r1, r3
   1310c:	cmpeq	r0, r2
   13110:	bne	13140 <_start@@Base+0x88c>
   13114:	ldr	r3, [sp, #52]	; 0x34
   13118:	mov	r2, sl
   1311c:	str	r3, [sp]
   13120:	mov	r1, r4
   13124:	mov	r3, #4
   13128:	mov	r0, r5
   1312c:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   13130:	cmp	r4, r0
   13134:	movne	r2, #3
   13138:	movne	r3, #0
   1313c:	bne	131f8 <_start@@Base+0x944>
   13140:	mov	r0, r4
   13144:	add	sp, sp, #12
   13148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1314c:	add	r9, pc, #196	; 0xc4
   13150:	ldrd	r8, [r9]
   13154:	ldr	r6, [pc, #212]	; 13230 <_start@@Base+0x97c>
   13158:	mvn	r7, #0
   1315c:	and	r7, r7, r1
   13160:	and	r6, r6, r0
   13164:	cmp	r7, r9
   13168:	cmpeq	r6, r8
   1316c:	bne	131b4 <_start@@Base+0x900>
   13170:	ldr	r3, [sp, #52]	; 0x34
   13174:	mov	r2, sl
   13178:	str	r3, [sp]
   1317c:	mov	r1, r4
   13180:	mov	r3, #6
   13184:	mov	r0, r5
   13188:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   1318c:	cmp	r4, r0
   13190:	beq	13140 <_start@@Base+0x88c>
   13194:	ldr	r1, [sp, #48]	; 0x30
   13198:	mvn	r3, #0
   1319c:	mvn	r2, #1
   131a0:	strd	r2, [r1]
   131a4:	mov	r3, #1
   131a8:	str	r3, [fp]
   131ac:	mov	r4, r0
   131b0:	b	13140 <_start@@Base+0x88c>
   131b4:	add	r3, pc, #100	; 0x64
   131b8:	ldrd	r2, [r3]
   131bc:	mov	r0, #0
   131c0:	cmp	r1, r3
   131c4:	cmpeq	r0, r2
   131c8:	bne	13140 <_start@@Base+0x88c>
   131cc:	ldr	r3, [sp, #52]	; 0x34
   131d0:	mov	r2, sl
   131d4:	str	r3, [sp]
   131d8:	mov	r1, r4
   131dc:	mov	r3, #4
   131e0:	mov	r0, r5
   131e4:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   131e8:	cmp	r4, r0
   131ec:	beq	13140 <_start@@Base+0x88c>
   131f0:	add	r3, pc, #48	; 0x30
   131f4:	ldrd	r2, [r3]
   131f8:	ldr	r1, [sp, #48]	; 0x30
   131fc:	strd	r2, [r1]
   13200:	mov	r3, #0
   13204:	b	131a8 <_start@@Base+0x8f4>
   13208:			; <UNDEFINED> instruction: 0xffffffff
   1320c:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   13210:	andeq	r0, r0, r0
   13214:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   13218:	strbvs	r0, [r7, #-0]!
   1321c:	stmdavs	r5!, {r1, r2, r3, r5, r6, fp, ip, sp, lr}^
   13220:	andeq	r0, r0, r0
   13224:	stmdavs	r5!, {r1, r4, r5, fp, ip, sp, lr}^
   13228:	cdpvc	14, 10, cr11, cr15, cr15, {5}
   1322c:	andeq	r0, r0, r0
   13230:			; <UNDEFINED> instruction: 0xffff0000
   13234:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13238:	mov	r4, r1
   1323c:	sub	sp, sp, #20
   13240:	mov	r1, r2
   13244:	mov	r5, r0
   13248:	mov	r0, r4
   1324c:	str	r2, [sp, #12]
   13250:	mov	sl, r3
   13254:	bl	129e0 <_start@@Base+0x12c>
   13258:	add	r7, pc, #344	; 0x158
   1325c:	ldrd	r6, [r7]
   13260:	ldr	fp, [sp, #60]	; 0x3c
   13264:	ldr	r2, [sp, #12]
   13268:	cmp	r1, r7
   1326c:	cmpeq	r0, r6
   13270:	bhi	132b8 <_start@@Base+0xa04>
   13274:	add	r7, pc, #324	; 0x144
   13278:	ldrd	r6, [r7]
   1327c:	mov	r0, #0
   13280:	cmp	r1, r7
   13284:	cmpeq	r0, r6
   13288:	bne	132ac <_start@@Base+0x9f8>
   1328c:	str	fp, [sp]
   13290:	mov	r3, #4
   13294:	mov	r1, r4
   13298:	mov	r0, r5
   1329c:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   132a0:	cmp	r4, r0
   132a4:	movne	r2, #2
   132a8:	bne	13304 <_start@@Base+0xa50>
   132ac:	mov	r0, r4
   132b0:	add	sp, sp, #20
   132b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132b8:	add	r7, pc, #264	; 0x108
   132bc:	ldrd	r6, [r7]
   132c0:	cmp	r1, r7
   132c4:	cmpeq	r0, r6
   132c8:	bhi	13320 <_start@@Base+0xa6c>
   132cc:	add	r7, pc, #252	; 0xfc
   132d0:	ldrd	r6, [r7]
   132d4:	mov	r0, #0
   132d8:	cmp	r1, r7
   132dc:	cmpeq	r0, r6
   132e0:	bne	132ac <_start@@Base+0x9f8>
   132e4:	str	fp, [sp]
   132e8:	mov	r3, #4
   132ec:	mov	r1, r4
   132f0:	mov	r0, r5
   132f4:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   132f8:	cmp	r4, r0
   132fc:	beq	132ac <_start@@Base+0x9f8>
   13300:	mov	r2, #42	; 0x2a
   13304:	ldr	r1, [sp, #56]	; 0x38
   13308:	mov	r3, #0
   1330c:	strd	r2, [r1]
   13310:	mov	r3, #0
   13314:	str	r3, [sl]
   13318:	mov	r4, r0
   1331c:	b	132ac <_start@@Base+0x9f8>
   13320:	bic	r6, r0, #255	; 0xff
   13324:	mov	r8, r6
   13328:	add	r7, pc, #168	; 0xa8
   1332c:	ldrd	r6, [r7]
   13330:	cmp	r1, r7
   13334:	cmpeq	r8, r6
   13338:	bne	13370 <_start@@Base+0xabc>
   1333c:	str	fp, [sp]
   13340:	mov	r3, #7
   13344:	mov	r1, r4
   13348:	mov	r0, r5
   1334c:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   13350:	cmp	r4, r0
   13354:	mvnne	r2, #0
   13358:	beq	132ac <_start@@Base+0x9f8>
   1335c:	ldr	r1, [sp, #56]	; 0x38
   13360:	mvn	r3, #0
   13364:	strd	r2, [r1]
   13368:	mov	r3, #1
   1336c:	b	13314 <_start@@Base+0xa60>
   13370:	ldr	r6, [pc, #112]	; 133e8 <_start@@Base+0xb34>
   13374:	mvn	r7, #0
   13378:	and	r0, r0, r6
   1337c:	and	r1, r1, r7
   13380:	add	r7, pc, #88	; 0x58
   13384:	ldrd	r6, [r7]
   13388:	cmp	r1, r7
   1338c:	cmpeq	r0, r6
   13390:	bne	132ac <_start@@Base+0x9f8>
   13394:	str	fp, [sp]
   13398:	mov	r3, #6
   1339c:	mov	r1, r4
   133a0:	mov	r0, r5
   133a4:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   133a8:	cmp	r4, r0
   133ac:	beq	132ac <_start@@Base+0x9f8>
   133b0:	mvn	r2, #1
   133b4:	b	1335c <_start@@Base+0xaa8>
   133b8:			; <UNDEFINED> instruction: 0xffffffff
   133bc:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   133c0:	andeq	r0, r0, r0
   133c4:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   133c8:	strbvs	pc, [r6, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   133cc:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   133d0:	andeq	r0, r0, r0
   133d4:	stmdbvs	lr!, {r1, r4, r5, sl, ip, sp, lr}^
   133d8:	strbvs	r3, [r7, #-512]!	; 0xfffffe00
   133dc:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   133e0:	strbvs	r0, [r7, #-0]!
   133e4:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   133e8:			; <UNDEFINED> instruction: 0xffff0000
   133ec:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   133f0:	mov	r4, r1
   133f4:	mov	r7, r0
   133f8:	mov	r1, r2
   133fc:	mov	r0, r4
   13400:	mov	r5, r2
   13404:	mov	r6, r3
   13408:	bl	129e0 <_start@@Base+0x12c>
   1340c:	add	r3, pc, #236	; 0xec
   13410:	ldrd	r2, [r3]
   13414:	ldr	r9, [sp, #40]	; 0x28
   13418:	ldr	r8, [sp, #44]	; 0x2c
   1341c:	cmp	r1, r3
   13420:	cmpeq	r0, r2
   13424:	mov	r0, #0
   13428:	bhi	13470 <_start@@Base+0xbbc>
   1342c:	add	r3, pc, #212	; 0xd4
   13430:	ldrd	r2, [r3]
   13434:	cmp	r1, r3
   13438:	cmpeq	r0, r2
   1343c:	bne	13464 <_start@@Base+0xbb0>
   13440:	mov	r2, r5
   13444:	str	r8, [sp]
   13448:	mov	r3, #4
   1344c:	mov	r1, r4
   13450:	mov	r0, r7
   13454:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   13458:	cmp	r4, r0
   1345c:	mvnne	r2, #11
   13460:	bne	134a8 <_start@@Base+0xbf4>
   13464:	mov	r0, r4
   13468:	add	sp, sp, #12
   1346c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13470:	add	r3, pc, #152	; 0x98
   13474:	ldrd	r2, [r3]
   13478:	cmp	r1, r3
   1347c:	cmpeq	r0, r2
   13480:	bne	134c0 <_start@@Base+0xc0c>
   13484:	mov	r2, r5
   13488:	str	r8, [sp]
   1348c:	mov	r3, #4
   13490:	mov	r1, r4
   13494:	mov	r0, r7
   13498:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   1349c:	cmp	r4, r0
   134a0:	mvnne	r2, #9
   134a4:	beq	13464 <_start@@Base+0xbb0>
   134a8:	mvn	r3, #0
   134ac:	mov	r4, r0
   134b0:	strd	r2, [r9]
   134b4:	mov	r3, #1
   134b8:	str	r3, [r6]
   134bc:	b	13464 <_start@@Base+0xbb0>
   134c0:	add	r3, pc, #80	; 0x50
   134c4:	ldrd	r2, [r3]
   134c8:	cmp	r1, r3
   134cc:	cmpeq	r0, r2
   134d0:	bne	13464 <_start@@Base+0xbb0>
   134d4:	str	r8, [sp]
   134d8:	mov	r3, #4
   134dc:	mov	r2, r5
   134e0:	mov	r1, r4
   134e4:	mov	r0, r7
   134e8:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   134ec:	cmp	r4, r0
   134f0:	beq	13464 <_start@@Base+0xbb0>
   134f4:	mvn	r2, #10
   134f8:	b	134a8 <_start@@Base+0xbf4>
   134fc:	nop			; (mov r0, r0)
   13500:			; <UNDEFINED> instruction: 0xffffffff
   13504:	mcrvs	7, 3, r6, cr5, cr1, {1}
   13508:	andeq	r0, r0, r0
   1350c:	mcrvs	7, 3, r6, cr5, cr1, {1}
   13510:	andeq	r0, r0, r0
   13514:	mcrvs	7, 3, r6, cr5, cr3, {1}
   13518:	andeq	r0, r0, r0
   1351c:	mcrvs	7, 3, r6, cr5, cr2, {1}
   13520:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13524:	mov	r4, r1
   13528:	mov	r5, r0
   1352c:	mov	r1, r2
   13530:	mov	r0, r4
   13534:	mov	sl, r2
   13538:	mov	fp, r3
   1353c:	bl	129e0 <_start@@Base+0x12c>
   13540:	add	r3, pc, #256	; 0x100
   13544:	ldrd	r2, [r3]
   13548:	cmp	r1, r3
   1354c:	cmpeq	r0, r2
   13550:	bhi	135a0 <_start@@Base+0xcec>
   13554:	add	r3, pc, #244	; 0xf4
   13558:	ldrd	r2, [r3]
   1355c:	mov	r0, #0
   13560:	cmp	r1, r3
   13564:	cmpeq	r0, r2
   13568:	bne	13594 <_start@@Base+0xce0>
   1356c:	ldr	r3, [sp, #52]	; 0x34
   13570:	mov	r2, sl
   13574:	str	r3, [sp]
   13578:	mov	r1, r4
   1357c:	mov	r3, #4
   13580:	mov	r0, r5
   13584:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   13588:	cmp	r4, r0
   1358c:	movne	r2, #8
   13590:	bne	135e4 <_start@@Base+0xd30>
   13594:	mov	r0, r4
   13598:	add	sp, sp, #12
   1359c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135a0:	add	r7, pc, #176	; 0xb0
   135a4:	ldrd	r6, [r7]
   135a8:	bic	r9, r1, #255	; 0xff
   135ac:	mov	r8, #0
   135b0:	cmp	r9, r7
   135b4:	cmpeq	r8, r6
   135b8:	bne	13600 <_start@@Base+0xd4c>
   135bc:	ldr	r3, [sp, #52]	; 0x34
   135c0:	mov	r2, sl
   135c4:	str	r3, [sp]
   135c8:	mov	r1, r4
   135cc:	mov	r3, #3
   135d0:	mov	r0, r5
   135d4:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   135d8:	cmp	r4, r0
   135dc:	movne	r2, #1
   135e0:	beq	13594 <_start@@Base+0xce0>
   135e4:	ldr	r1, [sp, #48]	; 0x30
   135e8:	mov	r3, #0
   135ec:	mov	r4, r0
   135f0:	strd	r2, [r1]
   135f4:	mov	r3, #0
   135f8:	str	r3, [fp]
   135fc:	b	13594 <_start@@Base+0xce0>
   13600:	add	r3, pc, #88	; 0x58
   13604:	ldrd	r2, [r3]
   13608:	and	r0, r0, #-16777216	; 0xff000000
   1360c:	cmp	r1, r3
   13610:	cmpeq	r0, r2
   13614:	bne	13594 <_start@@Base+0xce0>
   13618:	ldr	r3, [sp, #52]	; 0x34
   1361c:	mov	r2, sl
   13620:	str	r3, [sp]
   13624:	mov	r1, r4
   13628:	mov	r3, #5
   1362c:	mov	r0, r5
   13630:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   13634:	cmp	r4, r0
   13638:	beq	13594 <_start@@Base+0xce0>
   1363c:	mov	r2, #2
   13640:	b	135e4 <_start@@Base+0xd30>
   13644:	nop			; (mov r0, r0)
   13648:	ldclvs	15, cr15, [pc, #1020]!	; 13a4c <_start@@Base+0x1198>
   1364c:	ldrbmi	r6, [r2, -r5, ror #10]!
   13650:	andeq	r0, r0, r0
   13654:	rsbmi	r7, ip, #423624704	; 0x19400000
   13658:	andeq	r0, r0, r0
   1365c:	rsbpl	r6, r5, #0, 8
   13660:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   13664:	ldrbmi	r6, [r2, -r5, ror #10]!
   13668:	sub	r3, r2, r1
   1366c:	cmp	r3, #1
   13670:	ble	13694 <_start@@Base+0xde0>
   13674:	ldrb	r3, [r1]
   13678:	cmp	r3, #32
   1367c:	bhi	13698 <_start@@Base+0xde4>
   13680:	bne	13694 <_start@@Base+0xde0>
   13684:	ldrb	r3, [r1, #1]
   13688:	cmp	r3, #32
   1368c:	addhi	r1, r1, #1
   13690:	bhi	13698 <_start@@Base+0xde4>
   13694:	b	1fb88 <flatcc_json_parser_space_ext@@Base>
   13698:	mov	r0, r1
   1369c:	bx	lr
   136a0:	push	{r4, r5, r6, lr}
   136a4:	mov	r4, r2
   136a8:	mov	r5, r3
   136ac:	mov	r6, r0
   136b0:	bl	13668 <_start@@Base+0xdb4>
   136b4:	cmp	r4, r0
   136b8:	moveq	r3, #0
   136bc:	beq	13750 <_start@@Base+0xe9c>
   136c0:	ldrb	r3, [r0]
   136c4:	cmp	r3, #44	; 0x2c
   136c8:	beq	13700 <_start@@Base+0xe4c>
   136cc:	mov	r3, #0
   136d0:	str	r3, [r5]
   136d4:	ldrb	r3, [r0]
   136d8:	cmp	r3, #93	; 0x5d
   136dc:	movne	r3, #9
   136e0:	movne	r2, r4
   136e4:	movne	r1, r0
   136e8:	bne	1372c <_start@@Base+0xe78>
   136ec:	mov	r2, r4
   136f0:	add	r1, r0, #1
   136f4:	mov	r0, r6
   136f8:	pop	{r4, r5, r6, lr}
   136fc:	b	13668 <_start@@Base+0xdb4>
   13700:	add	r1, r0, #1
   13704:	mov	r2, r4
   13708:	mov	r0, r6
   1370c:	bl	13668 <_start@@Base+0xdb4>
   13710:	cmp	r4, r0
   13714:	bne	13738 <_start@@Base+0xe84>
   13718:	mov	r3, #0
   1371c:	str	r3, [r5]
   13720:	mov	r2, r4
   13724:	mov	r3, #9
   13728:	mov	r1, r4
   1372c:	mov	r0, r6
   13730:	pop	{r4, r5, r6, lr}
   13734:	b	1f9c8 <flatcc_json_parser_set_error@@Base>
   13738:	ldrb	r3, [r0]
   1373c:	cmp	r3, #93	; 0x5d
   13740:	movne	r3, #1
   13744:	moveq	r3, #0
   13748:	streq	r3, [r5]
   1374c:	beq	136ec <_start@@Base+0xe38>
   13750:	str	r3, [r5]
   13754:	pop	{r4, r5, r6, pc}
   13758:	push	{r4, r5, r6, lr}
   1375c:	mov	r4, r2
   13760:	mov	r5, r3
   13764:	mov	r6, r0
   13768:	bl	13668 <_start@@Base+0xdb4>
   1376c:	cmp	r4, r0
   13770:	moveq	r3, #0
   13774:	beq	13808 <_start@@Base+0xf54>
   13778:	ldrb	r3, [r0]
   1377c:	cmp	r3, #44	; 0x2c
   13780:	beq	137b8 <_start@@Base+0xf04>
   13784:	mov	r3, #0
   13788:	str	r3, [r5]
   1378c:	ldrb	r3, [r0]
   13790:	cmp	r3, #125	; 0x7d
   13794:	movne	r3, #10
   13798:	movne	r2, r4
   1379c:	movne	r1, r0
   137a0:	bne	137e4 <_start@@Base+0xf30>
   137a4:	mov	r2, r4
   137a8:	add	r1, r0, #1
   137ac:	mov	r0, r6
   137b0:	pop	{r4, r5, r6, lr}
   137b4:	b	13668 <_start@@Base+0xdb4>
   137b8:	add	r1, r0, #1
   137bc:	mov	r2, r4
   137c0:	mov	r0, r6
   137c4:	bl	13668 <_start@@Base+0xdb4>
   137c8:	cmp	r4, r0
   137cc:	bne	137f0 <_start@@Base+0xf3c>
   137d0:	mov	r3, #0
   137d4:	str	r3, [r5]
   137d8:	mov	r2, r4
   137dc:	mov	r3, #10
   137e0:	mov	r1, r4
   137e4:	mov	r0, r6
   137e8:	pop	{r4, r5, r6, lr}
   137ec:	b	1f9c8 <flatcc_json_parser_set_error@@Base>
   137f0:	ldrb	r3, [r0]
   137f4:	cmp	r3, #125	; 0x7d
   137f8:	movne	r3, #1
   137fc:	moveq	r3, #0
   13800:	streq	r3, [r5]
   13804:	beq	137a4 <_start@@Base+0xef0>
   13808:	str	r3, [r5]
   1380c:	pop	{r4, r5, r6, pc}
   13810:	sub	r1, r1, r0
   13814:	cmp	r1, r2
   13818:	bxle	lr
   1381c:	ldrb	r3, [r0, r2]
   13820:	cmp	r3, #46	; 0x2e
   13824:	addeq	r2, r2, #1
   13828:	addeq	r0, r0, r2
   1382c:	bx	lr
   13830:	cmp	r1, r2
   13834:	beq	13880 <_start@@Base+0xfcc>
   13838:	ldrb	r3, [r1]
   1383c:	push	{lr}		; (str lr, [sp, #-4]!)
   13840:	mov	lr, r0
   13844:	cmp	r3, #34	; 0x22
   13848:	moveq	r2, #0
   1384c:	addeq	r3, r1, #1
   13850:	streq	r2, [r0, #12]
   13854:	beq	13878 <_start@@Base+0xfc4>
   13858:	cmp	r3, #46	; 0x2e
   1385c:	movne	r3, #1
   13860:	strne	r3, [r0, #12]
   13864:	movne	r3, r1
   13868:	bne	13878 <_start@@Base+0xfc4>
   1386c:	mov	r3, #5
   13870:	pop	{lr}		; (ldr lr, [sp], #4)
   13874:	b	1f9c8 <flatcc_json_parser_set_error@@Base>
   13878:	mov	r0, r3
   1387c:	pop	{pc}		; (ldr pc, [sp], #4)
   13880:	mov	r0, r2
   13884:	bx	lr
   13888:	push	{r4, r5, r6, lr}
   1388c:	mov	r4, r0
   13890:	mov	r5, r2
   13894:	bl	13830 <_start@@Base+0xf7c>
   13898:	ldr	r3, [r4, #12]
   1389c:	cmp	r3, #0
   138a0:	popne	{r4, r5, r6, pc}
   138a4:	mov	r1, r0
   138a8:	mov	r2, r5
   138ac:	mov	r0, r4
   138b0:	pop	{r4, r5, r6, lr}
   138b4:	b	13668 <_start@@Base+0xdb4>
   138b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138bc:	sub	sp, sp, #28
   138c0:	mov	fp, r3
   138c4:	ldr	r3, [sp, #64]	; 0x40
   138c8:	mov	r5, #0
   138cc:	mov	r4, r2
   138d0:	strb	r5, [r3]
   138d4:	mov	r7, r0
   138d8:	bl	13888 <_start@@Base+0xfd4>
   138dc:	cmp	r4, r0
   138e0:	movne	r8, r0
   138e4:	movne	sl, r5
   138e8:	bne	138fc <_start@@Base+0x1048>
   138ec:	mov	r0, r4
   138f0:	add	sp, sp, #28
   138f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138f8:	mov	r8, r6
   138fc:	mov	r9, fp
   13900:	add	r3, sp, #12
   13904:	str	r3, [sp, #4]
   13908:	add	r3, sp, #16
   1390c:	str	r3, [sp]
   13910:	mov	r2, r4
   13914:	ldr	r6, [r9]
   13918:	add	r3, sp, #8
   1391c:	mov	r1, r8
   13920:	mov	r0, r7
   13924:	blx	r6
   13928:	cmp	r4, r0
   1392c:	mov	r6, r0
   13930:	beq	138ec <_start@@Base+0x1038>
   13934:	cmp	r8, r0
   13938:	bne	13998 <_start@@Base+0x10e4>
   1393c:	ldr	r3, [r9, #4]!
   13940:	cmp	r3, #0
   13944:	bne	13900 <_start@@Base+0x104c>
   13948:	mov	r3, #23
   1394c:	mov	r2, r4
   13950:	mov	r1, r8
   13954:	b	13970 <_start@@Base+0x10bc>
   13958:	ldr	r3, [r7, #12]
   1395c:	cmp	r3, #0
   13960:	beq	139a0 <_start@@Base+0x10ec>
   13964:	mov	r3, #14
   13968:	mov	r2, r4
   1396c:	mov	r1, r6
   13970:	mov	r0, r7
   13974:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   13978:	mov	r4, r0
   1397c:	b	138ec <_start@@Base+0x1038>
   13980:	ldr	r3, [sp, #20]
   13984:	ldr	r2, [sp, #16]
   13988:	orrs	r3, r2, r3
   1398c:	movne	sl, #1
   13990:	moveq	sl, #0
   13994:	b	139c8 <_start@@Base+0x1114>
   13998:	cmp	r5, #0
   1399c:	bne	13958 <_start@@Base+0x10a4>
   139a0:	ldr	r3, [sp, #8]
   139a4:	cmp	r3, #0
   139a8:	beq	13980 <_start@@Base+0x10cc>
   139ac:	mov	r3, #8
   139b0:	mov	r2, r4
   139b4:	mov	r1, r6
   139b8:	mov	r0, r7
   139bc:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   139c0:	cmp	r4, r0
   139c4:	beq	138ec <_start@@Base+0x1038>
   139c8:	ldr	r3, [sp, #64]	; 0x40
   139cc:	ldr	r2, [sp, #64]	; 0x40
   139d0:	add	r5, r5, #1
   139d4:	ldrb	r3, [r3]
   139d8:	add	r3, sl, r3
   139dc:	strb	r3, [r2]
   139e0:	ldr	r3, [sp, #12]
   139e4:	cmp	r3, #0
   139e8:	bne	138f8 <_start@@Base+0x1044>
   139ec:	mov	r4, r6
   139f0:	b	138ec <_start@@Base+0x1038>
   139f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139f8:	sub	sp, sp, #28
   139fc:	mov	fp, r3
   13a00:	ldr	r8, [sp, #64]	; 0x40
   13a04:	mov	r3, #0
   13a08:	mov	r5, r2
   13a0c:	str	r3, [r8]
   13a10:	mov	r6, r0
   13a14:	bl	13888 <_start@@Base+0xfd4>
   13a18:	cmp	r5, r0
   13a1c:	mov	r4, r0
   13a20:	beq	13af0 <_start@@Base+0x123c>
   13a24:	mov	r7, #0
   13a28:	mov	sl, r4
   13a2c:	mov	r9, fp
   13a30:	add	r3, sp, #12
   13a34:	str	r3, [sp, #4]
   13a38:	add	r3, sp, #16
   13a3c:	str	r3, [sp]
   13a40:	mov	r2, r5
   13a44:	ldr	r4, [r9]
   13a48:	add	r3, sp, #8
   13a4c:	mov	r1, sl
   13a50:	mov	r0, r6
   13a54:	blx	r4
   13a58:	cmp	r5, r0
   13a5c:	mov	r4, r0
   13a60:	beq	13af0 <_start@@Base+0x123c>
   13a64:	cmp	sl, r0
   13a68:	bne	13ab0 <_start@@Base+0x11fc>
   13a6c:	ldr	r3, [r9, #4]!
   13a70:	cmp	r3, #0
   13a74:	bne	13a30 <_start@@Base+0x117c>
   13a78:	mov	r3, #23
   13a7c:	b	13a90 <_start@@Base+0x11dc>
   13a80:	ldr	r3, [r6, #12]
   13a84:	cmp	r3, #0
   13a88:	beq	13ab8 <_start@@Base+0x1204>
   13a8c:	mov	r3, #14
   13a90:	mov	r1, r4
   13a94:	mov	r2, r5
   13a98:	mov	r0, r6
   13a9c:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   13aa0:	mov	r4, r0
   13aa4:	b	13af0 <_start@@Base+0x123c>
   13aa8:	bl	221ac <flatcc_json_parser_table_as_root@@Base+0x7c4>
   13aac:	b	13ad0 <_start@@Base+0x121c>
   13ab0:	cmp	r7, #0
   13ab4:	bne	13a80 <_start@@Base+0x11cc>
   13ab8:	ldr	r3, [sp, #8]
   13abc:	ldrd	r0, [sp, #16]
   13ac0:	cmp	r3, #0
   13ac4:	beq	13aa8 <_start@@Base+0x11f4>
   13ac8:	bl	221ac <flatcc_json_parser_table_as_root@@Base+0x7c4>
   13acc:	eor	r0, r0, #-2147483648	; 0x80000000
   13ad0:	vldr	s14, [r8]
   13ad4:	vmov	s15, r0
   13ad8:	ldr	r3, [sp, #12]
   13adc:	add	r7, r7, #1
   13ae0:	cmp	r3, #0
   13ae4:	vadd.f32	s15, s14, s15
   13ae8:	vstr	s15, [r8]
   13aec:	bne	13a28 <_start@@Base+0x1174>
   13af0:	mov	r0, r4
   13af4:	add	sp, sp, #28
   13af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13afc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b00:	sub	sp, sp, #28
   13b04:	vldr	d7, [pc, #252]	; 13c08 <_start@@Base+0x1354>
   13b08:	ldr	r8, [sp, #64]	; 0x40
   13b0c:	mov	r5, r2
   13b10:	mov	r6, r0
   13b14:	vstr	d7, [r8]
   13b18:	mov	fp, r3
   13b1c:	bl	13888 <_start@@Base+0xfd4>
   13b20:	cmp	r5, r0
   13b24:	mov	r4, r0
   13b28:	beq	13bf8 <_start@@Base+0x1344>
   13b2c:	mov	r7, #0
   13b30:	mov	sl, r4
   13b34:	mov	r9, fp
   13b38:	add	r3, sp, #12
   13b3c:	str	r3, [sp, #4]
   13b40:	add	r3, sp, #16
   13b44:	str	r3, [sp]
   13b48:	mov	r2, r5
   13b4c:	ldr	r4, [r9]
   13b50:	add	r3, sp, #8
   13b54:	mov	r1, sl
   13b58:	mov	r0, r6
   13b5c:	blx	r4
   13b60:	cmp	r5, r0
   13b64:	mov	r4, r0
   13b68:	beq	13bf8 <_start@@Base+0x1344>
   13b6c:	cmp	sl, r0
   13b70:	bne	13bb8 <_start@@Base+0x1304>
   13b74:	ldr	r3, [r9, #4]!
   13b78:	cmp	r3, #0
   13b7c:	bne	13b38 <_start@@Base+0x1284>
   13b80:	mov	r3, #23
   13b84:	b	13b98 <_start@@Base+0x12e4>
   13b88:	ldr	r3, [r6, #12]
   13b8c:	cmp	r3, #0
   13b90:	beq	13bc0 <_start@@Base+0x130c>
   13b94:	mov	r3, #14
   13b98:	mov	r1, r4
   13b9c:	mov	r2, r5
   13ba0:	mov	r0, r6
   13ba4:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   13ba8:	mov	r4, r0
   13bac:	b	13bf8 <_start@@Base+0x1344>
   13bb0:	bl	21f74 <flatcc_json_parser_table_as_root@@Base+0x58c>
   13bb4:	b	13bd8 <_start@@Base+0x1324>
   13bb8:	cmp	r7, #0
   13bbc:	bne	13b88 <_start@@Base+0x12d4>
   13bc0:	ldr	r3, [sp, #8]
   13bc4:	ldrd	r0, [sp, #16]
   13bc8:	cmp	r3, #0
   13bcc:	beq	13bb0 <_start@@Base+0x12fc>
   13bd0:	bl	21f74 <flatcc_json_parser_table_as_root@@Base+0x58c>
   13bd4:	eor	r1, r1, #-2147483648	; 0x80000000
   13bd8:	vldr	d7, [r8]
   13bdc:	vmov	d6, r0, r1
   13be0:	ldr	r3, [sp, #12]
   13be4:	add	r7, r7, #1
   13be8:	cmp	r3, #0
   13bec:	vadd.f64	d7, d7, d6
   13bf0:	vstr	d7, [r8]
   13bf4:	bne	13b30 <_start@@Base+0x127c>
   13bf8:	mov	r0, r4
   13bfc:	add	sp, sp, #28
   13c00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c04:	nop			; (mov r0, r0)
	...
   13c10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13c14:	mov	r5, r1
   13c18:	mov	r7, r0
   13c1c:	mov	r1, r2
   13c20:	mov	r0, r5
   13c24:	mov	r4, r2
   13c28:	mov	r8, r3
   13c2c:	bl	129e0 <_start@@Base+0x12c>
   13c30:	add	r3, pc, #120	; 0x78
   13c34:	ldrd	r2, [r3]
   13c38:	ldr	r9, [sp, #32]
   13c3c:	ldr	sl, [sp, #36]	; 0x24
   13c40:	cmp	r1, r3
   13c44:	cmpeq	r0, r2
   13c48:	bne	13ca8 <_start@@Base+0x13f4>
   13c4c:	add	r6, r5, #8
   13c50:	mov	r1, r4
   13c54:	mov	r0, r6
   13c58:	bl	129e0 <_start@@Base+0x12c>
   13c5c:	mov	r0, #0
   13c60:	and	r1, r1, #-16777216	; 0xff000000
   13c64:	cmp	r1, #1912602624	; 0x72000000
   13c68:	cmpeq	r0, #0
   13c6c:	bne	13ca8 <_start@@Base+0x13f4>
   13c70:	mov	r1, r4
   13c74:	mov	r2, #1
   13c78:	mov	r0, r6
   13c7c:	bl	13810 <_start@@Base+0xf5c>
   13c80:	cmp	r6, r0
   13c84:	mov	r1, r0
   13c88:	beq	13ca8 <_start@@Base+0x13f4>
   13c8c:	str	sl, [sp, #36]	; 0x24
   13c90:	str	r9, [sp, #32]
   13c94:	mov	r3, r8
   13c98:	mov	r2, r4
   13c9c:	mov	r0, r7
   13ca0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   13ca4:	b	12bb8 <_start@@Base+0x304>
   13ca8:	mov	r0, r5
   13cac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cb0:	cmnvs	r3, r5, ror #8
   13cb4:	cmnmi	r8, #-2147483620	; 0x8000001c
   13cb8:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   13cbc:	mov	r4, r1
   13cc0:	mov	r7, r0
   13cc4:	mov	r1, r2
   13cc8:	mov	r0, r4
   13ccc:	mov	r5, r2
   13cd0:	mov	r6, r3
   13cd4:	bl	129e0 <_start@@Base+0x12c>
   13cd8:	add	r3, pc, #224	; 0xe0
   13cdc:	ldrd	r2, [r3]
   13ce0:	ldr	r9, [sp, #40]	; 0x28
   13ce4:	ldr	r8, [sp, #44]	; 0x2c
   13ce8:	cmp	r1, r3
   13cec:	cmpeq	r0, r2
   13cf0:	bne	13d7c <_start@@Base+0x14c8>
   13cf4:	mov	r1, r5
   13cf8:	add	r0, r4, #8
   13cfc:	bl	129e0 <_start@@Base+0x12c>
   13d00:	add	r3, pc, #192	; 0xc0
   13d04:	ldrd	r2, [r3]
   13d08:	cmp	r1, r3
   13d0c:	cmpeq	r0, r2
   13d10:	beq	13d20 <_start@@Base+0x146c>
   13d14:	mov	r0, r4
   13d18:	add	sp, sp, #8
   13d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d20:	add	sl, r4, #16
   13d24:	mov	r1, r5
   13d28:	mov	r0, sl
   13d2c:	bl	129e0 <_start@@Base+0x12c>
   13d30:	mov	r0, #0
   13d34:	and	r1, r1, #-16777216	; 0xff000000
   13d38:	cmp	r1, #1694498816	; 0x65000000
   13d3c:	cmpeq	r0, #0
   13d40:	bne	13d14 <_start@@Base+0x1460>
   13d44:	mov	r2, r5
   13d48:	str	r8, [sp]
   13d4c:	mov	r3, #1
   13d50:	mov	r1, sl
   13d54:	mov	r0, r7
   13d58:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   13d5c:	cmp	sl, r0
   13d60:	movne	r2, #1
   13d64:	beq	13d14 <_start@@Base+0x1460>
   13d68:	mov	r3, #0
   13d6c:	strd	r2, [r9]
   13d70:	mov	r3, #0
   13d74:	str	r3, [r6]
   13d78:	b	13d18 <_start@@Base+0x1464>
   13d7c:	add	r3, pc, #76	; 0x4c
   13d80:	ldrd	r2, [r3]
   13d84:	mov	r0, #0
   13d88:	cmp	r1, r3
   13d8c:	cmpeq	r0, r2
   13d90:	bne	13d14 <_start@@Base+0x1460>
   13d94:	str	r8, [sp]
   13d98:	mov	r3, #4
   13d9c:	mov	r2, r5
   13da0:	mov	r1, r4
   13da4:	mov	r0, r7
   13da8:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   13dac:	cmp	r4, r0
   13db0:	beq	13d18 <_start@@Base+0x1464>
   13db4:	mov	r2, #0
   13db8:	b	13d68 <_start@@Base+0x14b4>
   13dbc:	nop			; (mov r0, r0)
   13dc0:	rsbvc	r6, r5, #116, 28	; 0x740
   13dc4:	stmdbmi	lr!, {r0, r5, r6, ip, lr}^
   13dc8:	cmnvc	r0, #-1073741800	; 0xc0000018
   13dcc:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   13dd0:	andeq	r0, r0, r0
   13dd4:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   13dd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ddc:	mov	r5, r1
   13de0:	sub	sp, sp, #20
   13de4:	mov	r1, r2
   13de8:	mov	r8, r0
   13dec:	mov	r0, r5
   13df0:	mov	r4, r2
   13df4:	mov	r9, r3
   13df8:	bl	129e0 <_start@@Base+0x12c>
   13dfc:	add	r3, pc, #884	; 0x374
   13e00:	ldrd	r2, [r3]
   13e04:	ldr	fp, [sp, #56]	; 0x38
   13e08:	ldr	sl, [sp, #60]	; 0x3c
   13e0c:	cmp	r1, r3
   13e10:	cmpeq	r0, r2
   13e14:	bhi	13eac <_start@@Base+0x15f8>
   13e18:	add	r3, pc, #864	; 0x360
   13e1c:	ldrd	r2, [r3]
   13e20:	cmp	r1, r3
   13e24:	cmpeq	r0, r2
   13e28:	bne	14440 <_start@@Base+0x1b8c>
   13e2c:	mov	r1, r4
   13e30:	add	r0, r5, #8
   13e34:	bl	129e0 <_start@@Base+0x12c>
   13e38:	add	r3, pc, #840	; 0x348
   13e3c:	ldrd	r2, [r3]
   13e40:	cmp	r1, r3
   13e44:	cmpeq	r0, r2
   13e48:	bne	14440 <_start@@Base+0x1b8c>
   13e4c:	add	r6, r5, #16
   13e50:	mov	r1, r4
   13e54:	mov	r0, r6
   13e58:	bl	129e0 <_start@@Base+0x12c>
   13e5c:	mov	r0, #0
   13e60:	and	r1, r1, #-16777216	; 0xff000000
   13e64:	cmp	r1, #1912602624	; 0x72000000
   13e68:	cmpeq	r0, #0
   13e6c:	bne	14440 <_start@@Base+0x1b8c>
   13e70:	mov	r1, r4
   13e74:	mov	r2, #1
   13e78:	mov	r0, r6
   13e7c:	bl	13810 <_start@@Base+0xf5c>
   13e80:	cmp	r6, r0
   13e84:	mov	r1, r0
   13e88:	beq	14440 <_start@@Base+0x1b8c>
   13e8c:	str	sl, [sp, #60]	; 0x3c
   13e90:	str	fp, [sp, #56]	; 0x38
   13e94:	mov	r3, r9
   13e98:	mov	r2, r4
   13e9c:	mov	r0, r8
   13ea0:	add	sp, sp, #20
   13ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ea8:	b	12bb8 <_start@@Base+0x304>
   13eac:	add	r3, pc, #732	; 0x2dc
   13eb0:	ldrd	r2, [r3]
   13eb4:	cmp	r1, r3
   13eb8:	cmpeq	r0, r2
   13ebc:	bne	14334 <_start@@Base+0x1a80>
   13ec0:	mov	r1, r4
   13ec4:	add	r0, r5, #8
   13ec8:	bl	129e0 <_start@@Base+0x12c>
   13ecc:	add	r3, pc, #708	; 0x2c4
   13ed0:	ldrd	r2, [r3]
   13ed4:	cmp	r1, r3
   13ed8:	cmpeq	r0, r2
   13edc:	bhi	14074 <_start@@Base+0x17c0>
   13ee0:	add	r3, pc, #696	; 0x2b8
   13ee4:	ldrd	r2, [r3]
   13ee8:	cmp	r1, r3
   13eec:	cmpeq	r0, r2
   13ef0:	bhi	13f78 <_start@@Base+0x16c4>
   13ef4:	add	r3, pc, #684	; 0x2ac
   13ef8:	ldrd	r2, [r3]
   13efc:	cmp	r1, r3
   13f00:	cmpeq	r0, r2
   13f04:	bne	14440 <_start@@Base+0x1b8c>
   13f08:	add	r6, r5, #16
   13f0c:	mov	r1, r4
   13f10:	mov	r0, r6
   13f14:	bl	129e0 <_start@@Base+0x12c>
   13f18:	ldr	r3, [pc, #720]	; 141f0 <_start@@Base+0x193c>
   13f1c:	mov	r2, #0
   13f20:	and	r1, r1, r3
   13f24:	ldr	r3, [pc, #712]	; 141f4 <_start@@Base+0x1940>
   13f28:	and	r0, r0, r2
   13f2c:	cmp	r1, r3
   13f30:	mov	r2, #0
   13f34:	cmpeq	r0, r2
   13f38:	bne	14440 <_start@@Base+0x1b8c>
   13f3c:	mov	r1, r4
   13f40:	mov	r2, #2
   13f44:	mov	r0, r6
   13f48:	bl	13810 <_start@@Base+0xf5c>
   13f4c:	cmp	r6, r0
   13f50:	mov	r1, r0
   13f54:	beq	14440 <_start@@Base+0x1b8c>
   13f58:	str	sl, [sp, #60]	; 0x3c
   13f5c:	str	fp, [sp, #56]	; 0x38
   13f60:	mov	r3, r9
   13f64:	mov	r2, r4
   13f68:	mov	r0, r8
   13f6c:	add	sp, sp, #20
   13f70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f74:	b	12e74 <_start@@Base+0x5c0>
   13f78:	add	r3, pc, #560	; 0x230
   13f7c:	ldrd	r2, [r3]
   13f80:	cmp	r1, r3
   13f84:	cmpeq	r0, r2
   13f88:	bne	13ff0 <_start@@Base+0x173c>
   13f8c:	add	r6, r5, #16
   13f90:	mov	r1, r4
   13f94:	mov	r0, r6
   13f98:	bl	129e0 <_start@@Base+0x12c>
   13f9c:	add	r3, pc, #532	; 0x214
   13fa0:	ldrd	r2, [r3]
   13fa4:	mov	r0, #0
   13fa8:	cmp	r1, r3
   13fac:	cmpeq	r0, r2
   13fb0:	bne	14440 <_start@@Base+0x1b8c>
   13fb4:	mov	r1, r4
   13fb8:	mov	r2, #4
   13fbc:	mov	r0, r6
   13fc0:	bl	13810 <_start@@Base+0xf5c>
   13fc4:	cmp	r6, r0
   13fc8:	mov	r1, r0
   13fcc:	beq	14440 <_start@@Base+0x1b8c>
   13fd0:	str	sl, [sp, #60]	; 0x3c
   13fd4:	str	fp, [sp, #56]	; 0x38
   13fd8:	mov	r3, r9
   13fdc:	mov	r2, r4
   13fe0:	mov	r0, r8
   13fe4:	add	sp, sp, #20
   13fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fec:	b	13520 <_start@@Base+0xc6c>
   13ff0:	add	r3, pc, #456	; 0x1c8
   13ff4:	ldrd	r2, [r3]
   13ff8:	cmp	r1, r3
   13ffc:	cmpeq	r0, r2
   14000:	bne	14440 <_start@@Base+0x1b8c>
   14004:	add	r6, r5, #16
   14008:	mov	r1, r4
   1400c:	mov	r0, r6
   14010:	bl	129e0 <_start@@Base+0x12c>
   14014:	ldr	r3, [pc, #468]	; 141f0 <_start@@Base+0x193c>
   14018:	mov	r2, #0
   1401c:	and	r1, r1, r3
   14020:	ldr	r3, [pc, #464]	; 141f8 <_start@@Base+0x1944>
   14024:	and	r0, r0, r2
   14028:	cmp	r1, r3
   1402c:	mov	r2, #0
   14030:	cmpeq	r0, r2
   14034:	bne	14440 <_start@@Base+0x1b8c>
   14038:	mov	r1, r4
   1403c:	mov	r2, #2
   14040:	mov	r0, r6
   14044:	bl	13810 <_start@@Base+0xf5c>
   14048:	cmp	r6, r0
   1404c:	mov	r1, r0
   14050:	beq	14440 <_start@@Base+0x1b8c>
   14054:	str	sl, [sp, #60]	; 0x3c
   14058:	str	fp, [sp, #56]	; 0x38
   1405c:	mov	r3, r9
   14060:	mov	r2, r4
   14064:	mov	r0, r8
   14068:	add	sp, sp, #20
   1406c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14070:	b	13cb8 <_start@@Base+0x1404>
   14074:	add	r3, pc, #332	; 0x14c
   14078:	ldrd	r2, [r3]
   1407c:	cmp	r1, r3
   14080:	cmpeq	r0, r2
   14084:	bne	140ec <_start@@Base+0x1838>
   14088:	add	r6, r5, #16
   1408c:	mov	r1, r4
   14090:	mov	r0, r6
   14094:	bl	129e0 <_start@@Base+0x12c>
   14098:	add	r3, pc, #304	; 0x130
   1409c:	ldrd	r2, [r3]
   140a0:	bic	r0, r0, #255	; 0xff
   140a4:	cmp	r1, r3
   140a8:	cmpeq	r0, r2
   140ac:	bne	14440 <_start@@Base+0x1b8c>
   140b0:	mov	r1, r4
   140b4:	mov	r2, #7
   140b8:	mov	r0, r6
   140bc:	bl	13810 <_start@@Base+0xf5c>
   140c0:	cmp	r6, r0
   140c4:	mov	r1, r0
   140c8:	beq	14440 <_start@@Base+0x1b8c>
   140cc:	str	sl, [sp, #60]	; 0x3c
   140d0:	str	fp, [sp, #56]	; 0x38
   140d4:	mov	r3, r9
   140d8:	mov	r2, r4
   140dc:	mov	r0, r8
   140e0:	add	sp, sp, #20
   140e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140e8:	b	130c8 <_start@@Base+0x814>
   140ec:	add	r3, pc, #228	; 0xe4
   140f0:	ldrd	r2, [r3]
   140f4:	cmp	r1, r3
   140f8:	cmpeq	r0, r2
   140fc:	bhi	141fc <_start@@Base+0x1948>
   14100:	add	r3, pc, #216	; 0xd8
   14104:	ldrd	r2, [r3]
   14108:	cmp	r1, r3
   1410c:	cmpeq	r0, r2
   14110:	bne	14440 <_start@@Base+0x1b8c>
   14114:	add	r6, r5, #16
   14118:	mov	r1, r4
   1411c:	mov	r0, r6
   14120:	bl	129e0 <_start@@Base+0x12c>
   14124:	add	r3, pc, #188	; 0xbc
   14128:	ldrd	r2, [r3]
   1412c:	bic	r0, r0, #255	; 0xff
   14130:	cmp	r1, r3
   14134:	cmpeq	r0, r2
   14138:	bne	14440 <_start@@Base+0x1b8c>
   1413c:	mov	r1, r4
   14140:	mov	r2, #7
   14144:	mov	r0, r6
   14148:	bl	13810 <_start@@Base+0xf5c>
   1414c:	cmp	r6, r0
   14150:	mov	r1, r0
   14154:	beq	14440 <_start@@Base+0x1b8c>
   14158:	str	sl, [sp, #60]	; 0x3c
   1415c:	str	fp, [sp, #56]	; 0x38
   14160:	mov	r3, r9
   14164:	mov	r2, r4
   14168:	mov	r0, r8
   1416c:	add	sp, sp, #20
   14170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14174:	b	13234 <_start@@Base+0x980>
   14178:	stclvs	14, cr2, [r5, #-272]!	; 0xfffffef0
   1417c:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   14180:	cmnvs	r3, lr, lsr #18
   14184:			; <UNDEFINED> instruction: 0x46616e74
   14188:	cmnvs	r3, r5, ror #8
   1418c:	cmnmi	r8, #-2147483620	; 0x8000001c
   14190:	stclvs	14, cr2, [r5, #-276]!	; 0xfffffeec
   14194:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   14198:	stclvs	14, cr2, [r5], #-412	; 0xfffffe64
   1419c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   141a0:	stclvs	14, cr2, [r5], #-264	; 0xfffffef8
   141a4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   141a8:	stclvs	14, cr2, [r5], #-260	; 0xfffffefc
   141ac:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   141b0:	stclvs	14, cr2, [r5], #-268	; 0xfffffef4
   141b4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   141b8:	andeq	r0, r0, r0
   141bc:	svcvs	0x006c6f72
   141c0:	stclvs	14, cr2, [r5], #-280	; 0xfffffee8
   141c4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   141c8:	stclvs	14, cr2, [r5], #-416	; 0xfffffe60
   141cc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   141d0:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   141d4:	ldrbvs	r5, [r8, #-3941]!	; 0xfffff09b
   141d8:	stclvs	14, cr2, [r5], #-436	; 0xfffffe4c
   141dc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   141e0:	stclvs	14, cr2, [r5], #-420	; 0xfffffe5c
   141e4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   141e8:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   141ec:	cdpvs	15, 7, cr5, cr4, cr5, {3}
   141f0:			; <UNDEFINED> instruction: 0xffff0000
   141f4:	cdpvs	0, 7, cr0, cr9, cr0, {0}
   141f8:	svcvs	0x006f0000
   141fc:	add	r3, pc, #708	; 0x2c4
   14200:	ldrd	r2, [r3]
   14204:	cmp	r1, r3
   14208:	cmpeq	r0, r2
   1420c:	bne	14440 <_start@@Base+0x1b8c>
   14210:	add	r6, r5, #16
   14214:	mov	r1, r4
   14218:	mov	r0, r6
   1421c:	bl	129e0 <_start@@Base+0x12c>
   14220:	bic	r2, r0, #255	; 0xff
   14224:	strd	r0, [sp, #8]
   14228:	mov	r0, r2
   1422c:	add	r3, pc, #668	; 0x29c
   14230:	ldrd	r2, [r3]
   14234:	cmp	r1, r3
   14238:	cmpeq	r0, r2
   1423c:	bne	1427c <_start@@Base+0x19c8>
   14240:	mov	r1, r4
   14244:	mov	r2, #7
   14248:	mov	r0, r6
   1424c:	bl	13810 <_start@@Base+0xf5c>
   14250:	cmp	r6, r0
   14254:	mov	r1, r0
   14258:	beq	14440 <_start@@Base+0x1b8c>
   1425c:	str	sl, [sp, #60]	; 0x3c
   14260:	str	fp, [sp, #56]	; 0x38
   14264:	mov	r3, r9
   14268:	mov	r2, r4
   1426c:	mov	r0, r8
   14270:	add	sp, sp, #20
   14274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14278:	b	133ec <_start@@Base+0xb38>
   1427c:	add	r3, pc, #596	; 0x254
   14280:	ldrd	r2, [r3]
   14284:	ldrd	r0, [sp, #8]
   14288:	cmp	r1, r3
   1428c:	cmpeq	r0, r2
   14290:	bne	14440 <_start@@Base+0x1b8c>
   14294:	add	r6, r5, #24
   14298:	mov	r1, r4
   1429c:	mov	r0, r6
   142a0:	bl	129e0 <_start@@Base+0x12c>
   142a4:	add	r3, pc, #564	; 0x234
   142a8:	ldrd	r2, [r3]
   142ac:	mov	r0, #0
   142b0:	bic	r1, r1, #255	; 0xff
   142b4:	cmp	r1, r3
   142b8:	cmpeq	r0, r2
   142bc:	bne	14440 <_start@@Base+0x1b8c>
   142c0:	mov	r2, #3
   142c4:	mov	r1, r4
   142c8:	mov	r0, r6
   142cc:	bl	13810 <_start@@Base+0xf5c>
   142d0:	cmp	r6, r0
   142d4:	mov	r7, r0
   142d8:	beq	14440 <_start@@Base+0x1b8c>
   142dc:	mov	r1, r4
   142e0:	bl	129e0 <_start@@Base+0x12c>
   142e4:	mov	r0, #0
   142e8:	and	r1, r1, #-16777216	; 0xff000000
   142ec:	cmp	r1, #2013265920	; 0x78000000
   142f0:	cmpeq	r0, #0
   142f4:	bne	144bc <_start@@Base+0x1c08>
   142f8:	str	sl, [sp]
   142fc:	mov	r3, #1
   14300:	mov	r2, r4
   14304:	mov	r1, r7
   14308:	mov	r0, r8
   1430c:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   14310:	cmp	r7, r0
   14314:	mov	r5, r0
   14318:	beq	14440 <_start@@Base+0x1b8c>
   1431c:	mov	r2, #0
   14320:	mov	r3, #0
   14324:	strd	r2, [fp]
   14328:	mov	r3, #0
   1432c:	str	r3, [r9]
   14330:	b	14440 <_start@@Base+0x1b8c>
   14334:	add	r3, pc, #428	; 0x1ac
   14338:	ldrd	r2, [r3]
   1433c:	cmp	r1, r3
   14340:	cmpeq	r0, r2
   14344:	bne	14440 <_start@@Base+0x1b8c>
   14348:	mov	r1, r4
   1434c:	add	r0, r5, #8
   14350:	bl	129e0 <_start@@Base+0x12c>
   14354:	add	r3, pc, #404	; 0x194
   14358:	ldrd	r2, [r3]
   1435c:	cmp	r1, r3
   14360:	cmpeq	r0, r2
   14364:	bne	14440 <_start@@Base+0x1b8c>
   14368:	mov	r1, r4
   1436c:	add	r0, r5, #16
   14370:	bl	129e0 <_start@@Base+0x12c>
   14374:	add	r3, pc, #380	; 0x17c
   14378:	ldrd	r2, [r3]
   1437c:	cmp	r1, r3
   14380:	cmpeq	r0, r2
   14384:	bne	14440 <_start@@Base+0x1b8c>
   14388:	mov	r1, r4
   1438c:	add	r0, r5, #24
   14390:	bl	129e0 <_start@@Base+0x12c>
   14394:	add	r3, pc, #356	; 0x164
   14398:	ldrd	r2, [r3]
   1439c:	cmp	r1, r3
   143a0:	cmpeq	r0, r2
   143a4:	bne	14440 <_start@@Base+0x1b8c>
   143a8:	add	r6, r5, #32
   143ac:	mov	r1, r4
   143b0:	mov	r0, r6
   143b4:	bl	129e0 <_start@@Base+0x12c>
   143b8:	mov	r0, #0
   143bc:	and	r1, r1, #-16777216	; 0xff000000
   143c0:	cmp	r1, #1694498816	; 0x65000000
   143c4:	cmpeq	r0, #0
   143c8:	bne	14440 <_start@@Base+0x1b8c>
   143cc:	mov	r2, #1
   143d0:	mov	r1, r4
   143d4:	mov	r0, r6
   143d8:	bl	13810 <_start@@Base+0xf5c>
   143dc:	cmp	r6, r0
   143e0:	mov	r7, r0
   143e4:	beq	14440 <_start@@Base+0x1b8c>
   143e8:	mov	r1, r4
   143ec:	bl	129e0 <_start@@Base+0x12c>
   143f0:	mov	r2, #0
   143f4:	bic	r3, r1, #255	; 0xff
   143f8:	strd	r0, [sp, #8]
   143fc:	mov	r0, r2
   14400:	mov	r1, r3
   14404:	add	r3, pc, #252	; 0xfc
   14408:	ldrd	r2, [r3]
   1440c:	cmp	r1, r3
   14410:	cmpeq	r0, r2
   14414:	bne	1444c <_start@@Base+0x1b98>
   14418:	mov	r2, r4
   1441c:	str	sl, [sp]
   14420:	mov	r3, #3
   14424:	mov	r1, r7
   14428:	mov	r0, r8
   1442c:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   14430:	cmp	r7, r0
   14434:	mov	r5, r0
   14438:	movne	r2, #17
   1443c:	bne	14320 <_start@@Base+0x1a6c>
   14440:	mov	r0, r5
   14444:	add	sp, sp, #20
   14448:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1444c:	add	r3, pc, #188	; 0xbc
   14450:	ldrd	r2, [r3]
   14454:	ldrd	r0, [sp, #8]
   14458:	cmp	r1, r3
   1445c:	cmpeq	r0, r2
   14460:	bne	144bc <_start@@Base+0x1c08>
   14464:	add	r6, r7, #8
   14468:	mov	r1, r4
   1446c:	mov	r0, r6
   14470:	bl	129e0 <_start@@Base+0x12c>
   14474:	ldr	r3, [pc, #156]	; 14518 <_start@@Base+0x1c64>
   14478:	mov	r2, #0
   1447c:	and	r1, r1, r3
   14480:	ldr	r3, [pc, #148]	; 1451c <_start@@Base+0x1c68>
   14484:	and	r0, r0, r2
   14488:	cmp	r1, r3
   1448c:	mov	r2, #0
   14490:	cmpeq	r0, r2
   14494:	bne	144bc <_start@@Base+0x1c08>
   14498:	str	sl, [sp]
   1449c:	mov	r3, #2
   144a0:	mov	r2, r4
   144a4:	mov	r1, r6
   144a8:	mov	r0, r8
   144ac:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   144b0:	cmp	r6, r0
   144b4:	mov	r5, r0
   144b8:	bne	1431c <_start@@Base+0x1a68>
   144bc:	mov	r5, r7
   144c0:	b	14440 <_start@@Base+0x1b8c>
   144c4:	nop			; (mov r0, r0)
   144c8:	stclvs	14, cr2, [r5], #-440	; 0xfffffe48
   144cc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   144d0:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   144d4:	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
   144d8:	rsbsvc	r7, r4, r5, ror #18
   144dc:	svcvs	0x0074656d
   144e0:	andeq	r0, r0, r0
   144e4:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   144e8:	stclvs	14, cr2, [r5, #-316]!	; 0xfffffec4
   144ec:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   144f0:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   144f4:	strbtvc	r6, [r8], #-1394	; 0xfffffa8e
   144f8:	strvs	r4, [lr, #-1650]!	; 0xfffff98e
   144fc:	cmnpl	r0, #-1073741800	; 0xc0000018
   14500:	cmnvs	ip, #100, 10	; 0x19000000
   14504:	svcvs	0x006d496e
   14508:	andeq	r0, r0, r0
   1450c:	strbtmi	r6, [pc], -r0, lsl #30
   14510:	strbvc	r6, [r4, #-1366]!	; 0xfffffaaa
   14514:	stmdbmi	lr!, {r2, r3, r5, r6, r8, r9, sp, lr}^
   14518:			; <UNDEFINED> instruction: 0xffff0000
   1451c:	cmnvs	ip, r0
   14520:	cmp	r1, r2
   14524:	push	{r4, r5, r6, lr}
   14528:	mov	ip, r2
   1452c:	mov	r6, r0
   14530:	beq	14540 <_start@@Base+0x1c8c>
   14534:	ldrb	r4, [r1]
   14538:	cmp	r4, #123	; 0x7b
   1453c:	beq	1455c <_start@@Base+0x1ca8>
   14540:	mov	r2, #0
   14544:	str	r2, [r3]
   14548:	mov	r0, r6
   1454c:	mov	r3, #21
   14550:	mov	r2, ip
   14554:	pop	{r4, r5, r6, lr}
   14558:	b	1f9c8 <flatcc_json_parser_set_error@@Base>
   1455c:	add	r1, r1, #1
   14560:	mov	r4, r2
   14564:	mov	r5, r3
   14568:	bl	13668 <_start@@Base+0xdb4>
   1456c:	cmp	r4, r0
   14570:	beq	1459c <_start@@Base+0x1ce8>
   14574:	ldrb	r3, [r0]
   14578:	cmp	r3, #125	; 0x7d
   1457c:	bne	1459c <_start@@Base+0x1ce8>
   14580:	mov	r3, #0
   14584:	str	r3, [r5]
   14588:	mov	r2, r4
   1458c:	add	r1, r0, #1
   14590:	mov	r0, r6
   14594:	pop	{r4, r5, r6, lr}
   14598:	b	13668 <_start@@Base+0xdb4>
   1459c:	mov	r3, #1
   145a0:	str	r3, [r5]
   145a4:	pop	{r4, r5, r6, pc}
   145a8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   145ac:	mov	r5, r1
   145b0:	mov	r1, #0
   145b4:	mov	r4, r0
   145b8:	str	r1, [r3]
   145bc:	ldr	r0, [r0]
   145c0:	mov	r6, r2
   145c4:	mov	r7, r3
   145c8:	bl	1d090 <flatcc_builder_start_table@@Base>
   145cc:	cmp	r0, #0
   145d0:	bne	14618 <_start@@Base+0x1d64>
   145d4:	add	r3, sp, #4
   145d8:	mov	r2, r6
   145dc:	mov	r1, r5
   145e0:	mov	r0, r4
   145e4:	bl	14520 <_start@@Base+0x1c6c>
   145e8:	ldr	r3, [sp, #4]
   145ec:	mov	r5, r0
   145f0:	cmp	r3, #0
   145f4:	bne	1463c <_start@@Base+0x1d88>
   145f8:	ldr	r3, [r4, #24]
   145fc:	cmp	r3, #0
   14600:	bne	14618 <_start@@Base+0x1d64>
   14604:	ldr	r0, [r4]
   14608:	bl	1d6cc <flatcc_builder_end_table@@Base>
   1460c:	cmp	r0, #0
   14610:	str	r0, [r7]
   14614:	bne	14630 <_start@@Base+0x1d7c>
   14618:	mov	r1, r5
   1461c:	mov	r3, #33	; 0x21
   14620:	mov	r2, r6
   14624:	mov	r0, r4
   14628:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   1462c:	mov	r5, r0
   14630:	mov	r0, r5
   14634:	add	sp, sp, #12
   14638:	pop	{r4, r5, r6, r7, pc}
   1463c:	mov	r2, r6
   14640:	mov	r1, r5
   14644:	mov	r0, r4
   14648:	bl	13830 <_start@@Base+0xf7c>
   1464c:	mov	r2, r6
   14650:	mov	r1, r0
   14654:	mov	r0, r4
   14658:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   1465c:	add	r3, sp, #4
   14660:	mov	r2, r6
   14664:	mov	r1, r0
   14668:	mov	r0, r4
   1466c:	bl	13758 <_start@@Base+0xea4>
   14670:	b	145e8 <_start@@Base+0x1d34>
   14674:	push	{r4, r5, r6, lr}
   14678:	mov	r4, r0
   1467c:	mov	r0, r1
   14680:	sub	r1, r2, r1
   14684:	cmp	r1, r3
   14688:	pople	{r4, r5, r6, pc}
   1468c:	ldr	r1, [r4, #12]
   14690:	cmp	r1, #0
   14694:	beq	146bc <_start@@Base+0x1e08>
   14698:	ldrb	ip, [r0, r3]
   1469c:	add	r1, r0, r3
   146a0:	cmp	ip, #58	; 0x3a
   146a4:	cmpne	ip, #32
   146a8:	movls	ip, #0
   146ac:	movhi	ip, #1
   146b0:	strls	ip, [r4, #12]
   146b4:	bls	146d0 <_start@@Base+0x1e1c>
   146b8:	pop	{r4, r5, r6, pc}
   146bc:	ldrb	r1, [r0, r3]
   146c0:	cmp	r1, #34	; 0x22
   146c4:	popne	{r4, r5, r6, pc}
   146c8:	add	r3, r3, #1
   146cc:	add	r1, r0, r3
   146d0:	mov	r0, r4
   146d4:	mov	r5, r2
   146d8:	bl	13668 <_start@@Base+0xdb4>
   146dc:	cmp	r5, r0
   146e0:	mov	r1, r0
   146e4:	beq	14708 <_start@@Base+0x1e54>
   146e8:	ldrb	r3, [r0]
   146ec:	cmp	r3, #58	; 0x3a
   146f0:	bne	14708 <_start@@Base+0x1e54>
   146f4:	mov	r2, r5
   146f8:	add	r1, r0, #1
   146fc:	mov	r0, r4
   14700:	pop	{r4, r5, r6, lr}
   14704:	b	13668 <_start@@Base+0xdb4>
   14708:	mov	r2, r5
   1470c:	mov	r0, r4
   14710:	mov	r3, #4
   14714:	pop	{r4, r5, r6, lr}
   14718:	b	1f9c8 <flatcc_json_parser_set_error@@Base>
   1471c:	cmp	r1, r2
   14720:	push	{r4, r5, r6, lr}
   14724:	mov	ip, r2
   14728:	mov	r6, r0
   1472c:	beq	1473c <_start@@Base+0x1e88>
   14730:	ldrb	r4, [r1]
   14734:	cmp	r4, #91	; 0x5b
   14738:	beq	14758 <_start@@Base+0x1ea4>
   1473c:	mov	r2, #0
   14740:	str	r2, [r3]
   14744:	mov	r0, r6
   14748:	mov	r3, #22
   1474c:	mov	r2, ip
   14750:	pop	{r4, r5, r6, lr}
   14754:	b	1f9c8 <flatcc_json_parser_set_error@@Base>
   14758:	add	r1, r1, #1
   1475c:	mov	r4, r2
   14760:	mov	r5, r3
   14764:	bl	13668 <_start@@Base+0xdb4>
   14768:	cmp	r4, r0
   1476c:	beq	14798 <_start@@Base+0x1ee4>
   14770:	ldrb	r3, [r0]
   14774:	cmp	r3, #93	; 0x5d
   14778:	bne	14798 <_start@@Base+0x1ee4>
   1477c:	mov	r3, #0
   14780:	str	r3, [r5]
   14784:	mov	r2, r4
   14788:	add	r1, r0, #1
   1478c:	mov	r0, r6
   14790:	pop	{r4, r5, r6, lr}
   14794:	b	13668 <_start@@Base+0xdb4>
   14798:	mov	r3, #1
   1479c:	str	r3, [r5]
   147a0:	pop	{r4, r5, r6, pc}
   147a4:	push	{r4, r5, r6, r7, lr}
   147a8:	mov	r6, #0
   147ac:	sub	sp, sp, #28
   147b0:	mov	r7, #0
   147b4:	mov	r5, #0
   147b8:	cmp	r1, r2
   147bc:	strd	r6, [sp, #16]
   147c0:	str	r5, [sp, #12]
   147c4:	strd	r6, [r3]
   147c8:	moveq	r0, r1
   147cc:	beq	14818 <_start@@Base+0x1f64>
   147d0:	mov	r6, r3
   147d4:	add	r3, sp, #16
   147d8:	str	r3, [sp]
   147dc:	add	r3, sp, #12
   147e0:	mov	r7, r1
   147e4:	mov	r4, r0
   147e8:	mov	r5, r2
   147ec:	bl	20cbc <flatcc_json_parser_integer@@Base>
   147f0:	cmp	r7, r0
   147f4:	beq	14818 <_start@@Base+0x1f64>
   147f8:	ldr	r3, [sp, #12]
   147fc:	cmp	r3, #0
   14800:	beq	14820 <_start@@Base+0x1f6c>
   14804:	mov	r1, r0
   14808:	mov	r3, #8
   1480c:	mov	r2, r5
   14810:	mov	r0, r4
   14814:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   14818:	add	sp, sp, #28
   1481c:	pop	{r4, r5, r6, r7, pc}
   14820:	ldrd	r2, [sp, #16]
   14824:	strd	r2, [r6]
   14828:	b	14818 <_start@@Base+0x1f64>
   1482c:	push	{r4, r5, r6, r7, r8, r9, lr}
   14830:	mov	r6, #0
   14834:	sub	sp, sp, #28
   14838:	mov	r7, #0
   1483c:	mov	lr, #0
   14840:	cmp	r1, r2
   14844:	strd	r6, [sp, #16]
   14848:	str	lr, [sp, #12]
   1484c:	str	lr, [r3]
   14850:	moveq	r0, r1
   14854:	beq	148c0 <_start@@Base+0x200c>
   14858:	mov	r6, r3
   1485c:	add	r3, sp, #16
   14860:	str	r3, [sp]
   14864:	add	r3, sp, #12
   14868:	mov	r7, r1
   1486c:	mov	r5, r0
   14870:	mov	r4, r2
   14874:	bl	20cbc <flatcc_json_parser_integer@@Base>
   14878:	cmp	r7, r0
   1487c:	beq	148c0 <_start@@Base+0x200c>
   14880:	ldr	r3, [sp, #12]
   14884:	cmp	r3, #0
   14888:	movne	r3, #8
   1488c:	bne	148b0 <_start@@Base+0x1ffc>
   14890:	ldrd	r2, [sp, #16]
   14894:	mov	r9, #0
   14898:	mvn	r8, #0
   1489c:	cmp	r3, r9
   148a0:	cmpeq	r2, r8
   148a4:	strls	r2, [r6]
   148a8:	bls	148c0 <_start@@Base+0x200c>
   148ac:	mov	r3, #7
   148b0:	mov	r1, r0
   148b4:	mov	r2, r4
   148b8:	mov	r0, r5
   148bc:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   148c0:	add	sp, sp, #28
   148c4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   148c8:	push	{r4, r5, r6, r7, r8, r9, lr}
   148cc:	mov	r6, #0
   148d0:	sub	sp, sp, #28
   148d4:	mov	r7, #0
   148d8:	mov	lr, #0
   148dc:	cmp	r1, r2
   148e0:	strd	r6, [sp, #16]
   148e4:	str	lr, [sp, #12]
   148e8:	strh	lr, [r3]
   148ec:	moveq	r0, r1
   148f0:	beq	1495c <_start@@Base+0x20a8>
   148f4:	mov	r6, r3
   148f8:	add	r3, sp, #16
   148fc:	str	r3, [sp]
   14900:	add	r3, sp, #12
   14904:	mov	r7, r1
   14908:	mov	r5, r0
   1490c:	mov	r4, r2
   14910:	bl	20cbc <flatcc_json_parser_integer@@Base>
   14914:	cmp	r7, r0
   14918:	beq	1495c <_start@@Base+0x20a8>
   1491c:	ldr	r3, [sp, #12]
   14920:	cmp	r3, #0
   14924:	movne	r3, #8
   14928:	bne	1494c <_start@@Base+0x2098>
   1492c:	ldrd	r2, [sp, #16]
   14930:	ldr	r8, [pc, #44]	; 14964 <_start@@Base+0x20b0>
   14934:	mov	r9, #0
   14938:	cmp	r3, r9
   1493c:	cmpeq	r2, r8
   14940:	strhls	r2, [r6]
   14944:	bls	1495c <_start@@Base+0x20a8>
   14948:	mov	r3, #7
   1494c:	mov	r1, r0
   14950:	mov	r2, r4
   14954:	mov	r0, r5
   14958:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   1495c:	add	sp, sp, #28
   14960:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14964:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   14968:	push	{r4, r5, r6, r7, lr}
   1496c:	mov	r6, #0
   14970:	sub	sp, sp, #28
   14974:	mov	r7, #0
   14978:	mov	lr, #0
   1497c:	cmp	r1, r2
   14980:	strd	r6, [sp, #16]
   14984:	str	lr, [sp, #12]
   14988:	strb	lr, [r3]
   1498c:	moveq	r0, r1
   14990:	beq	149f4 <_start@@Base+0x2140>
   14994:	mov	r6, r3
   14998:	add	r3, sp, #16
   1499c:	str	r3, [sp]
   149a0:	add	r3, sp, #12
   149a4:	mov	r7, r1
   149a8:	mov	r5, r0
   149ac:	mov	r4, r2
   149b0:	bl	20cbc <flatcc_json_parser_integer@@Base>
   149b4:	cmp	r7, r0
   149b8:	beq	149f4 <_start@@Base+0x2140>
   149bc:	ldr	r3, [sp, #12]
   149c0:	cmp	r3, #0
   149c4:	movne	r3, #8
   149c8:	bne	149e4 <_start@@Base+0x2130>
   149cc:	ldrd	r2, [sp, #16]
   149d0:	cmp	r3, #0
   149d4:	cmpeq	r2, #255	; 0xff
   149d8:	strbls	r2, [r6]
   149dc:	bls	149f4 <_start@@Base+0x2140>
   149e0:	mov	r3, #7
   149e4:	mov	r1, r0
   149e8:	mov	r2, r4
   149ec:	mov	r0, r5
   149f0:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   149f4:	add	sp, sp, #28
   149f8:	pop	{r4, r5, r6, r7, pc}
   149fc:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14a00:	sub	r7, r2, r1
   14a04:	cmp	r7, #3
   14a08:	mov	r8, r0
   14a0c:	mov	r4, r1
   14a10:	mov	r6, r2
   14a14:	mov	r5, r3
   14a18:	ble	14a68 <_start@@Base+0x21b4>
   14a1c:	mov	r2, #4
   14a20:	ldr	r1, [pc, #108]	; 14a94 <_start@@Base+0x21e0>
   14a24:	mov	r0, r4
   14a28:	bl	125f4 <memcmp@plt>
   14a2c:	cmp	r0, #0
   14a30:	moveq	r3, #1
   14a34:	strbeq	r3, [r5]
   14a38:	addeq	r0, r4, #4
   14a3c:	beq	14a8c <_start@@Base+0x21d8>
   14a40:	cmp	r7, #4
   14a44:	beq	14a68 <_start@@Base+0x21b4>
   14a48:	mov	r2, #5
   14a4c:	ldr	r1, [pc, #68]	; 14a98 <_start@@Base+0x21e4>
   14a50:	mov	r0, r4
   14a54:	bl	125f4 <memcmp@plt>
   14a58:	cmp	r0, #0
   14a5c:	strbeq	r0, [r5]
   14a60:	addeq	r0, r4, #5
   14a64:	beq	14a8c <_start@@Base+0x21d8>
   14a68:	add	r3, sp, #7
   14a6c:	mov	r2, r6
   14a70:	mov	r1, r4
   14a74:	mov	r0, r8
   14a78:	bl	14968 <_start@@Base+0x20b4>
   14a7c:	ldrb	r3, [sp, #7]
   14a80:	adds	r3, r3, #0
   14a84:	movne	r3, #1
   14a88:	strb	r3, [r5]
   14a8c:	add	sp, sp, #8
   14a90:	pop	{r4, r5, r6, r7, r8, pc}
   14a94:	andeq	r2, r2, r4, ror #5
   14a98:	andeq	r2, r2, r9, ror #5
   14a9c:	push	{r4, r5, r6, r7, r8, lr}
   14aa0:	mov	r4, #0
   14aa4:	sub	sp, sp, #24
   14aa8:	mov	r5, #0
   14aac:	cmp	r1, r2
   14ab0:	strd	r4, [sp, #16]
   14ab4:	str	r4, [sp, #12]
   14ab8:	str	r4, [r3]
   14abc:	moveq	r0, r1
   14ac0:	beq	14b20 <_start@@Base+0x226c>
   14ac4:	mov	r6, r3
   14ac8:	add	r3, sp, #16
   14acc:	str	r3, [sp]
   14ad0:	add	r3, sp, #12
   14ad4:	mov	r4, r1
   14ad8:	mov	r8, r0
   14adc:	mov	r7, r2
   14ae0:	bl	20cbc <flatcc_json_parser_integer@@Base>
   14ae4:	cmp	r4, r0
   14ae8:	beq	14b20 <_start@@Base+0x226c>
   14aec:	ldr	r3, [sp, #12]
   14af0:	ldrd	r4, [sp, #16]
   14af4:	cmp	r3, #0
   14af8:	beq	14b28 <_start@@Base+0x2274>
   14afc:	cmp	r5, #0
   14b00:	cmpeq	r4, #-2147483648	; 0x80000000
   14b04:	movhi	r3, #8
   14b08:	rsbls	r4, r4, #0
   14b0c:	bls	14b40 <_start@@Base+0x228c>
   14b10:	mov	r1, r0
   14b14:	mov	r2, r7
   14b18:	mov	r0, r8
   14b1c:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   14b20:	add	sp, sp, #24
   14b24:	pop	{r4, r5, r6, r7, r8, pc}
   14b28:	mov	r3, #0
   14b2c:	mvn	r2, #-2147483648	; 0x80000000
   14b30:	cmp	r5, r3
   14b34:	cmpeq	r4, r2
   14b38:	movhi	r3, #7
   14b3c:	bhi	14b10 <_start@@Base+0x225c>
   14b40:	str	r4, [r6]
   14b44:	b	14b20 <_start@@Base+0x226c>
   14b48:	push	{r4, r5, r6, r7, r8, lr}
   14b4c:	mov	r4, #0
   14b50:	sub	sp, sp, #24
   14b54:	mov	r5, #0
   14b58:	cmp	r1, r2
   14b5c:	strd	r4, [sp, #16]
   14b60:	str	r4, [sp, #12]
   14b64:	strh	r4, [r3]
   14b68:	moveq	r0, r1
   14b6c:	beq	14bcc <_start@@Base+0x2318>
   14b70:	mov	r6, r3
   14b74:	add	r3, sp, #16
   14b78:	str	r3, [sp]
   14b7c:	add	r3, sp, #12
   14b80:	mov	r4, r1
   14b84:	mov	r8, r0
   14b88:	mov	r7, r2
   14b8c:	bl	20cbc <flatcc_json_parser_integer@@Base>
   14b90:	cmp	r4, r0
   14b94:	beq	14bcc <_start@@Base+0x2318>
   14b98:	ldr	r3, [sp, #12]
   14b9c:	ldrd	r4, [sp, #16]
   14ba0:	cmp	r3, #0
   14ba4:	beq	14bd4 <_start@@Base+0x2320>
   14ba8:	cmp	r5, #0
   14bac:	cmpeq	r4, #32768	; 0x8000
   14bb0:	movhi	r3, #8
   14bb4:	rsbls	r4, r4, #0
   14bb8:	bls	14bec <_start@@Base+0x2338>
   14bbc:	mov	r1, r0
   14bc0:	mov	r2, r7
   14bc4:	mov	r0, r8
   14bc8:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   14bcc:	add	sp, sp, #24
   14bd0:	pop	{r4, r5, r6, r7, r8, pc}
   14bd4:	ldr	r2, [pc, #24]	; 14bf4 <_start@@Base+0x2340>
   14bd8:	mov	r3, #0
   14bdc:	cmp	r5, r3
   14be0:	cmpeq	r4, r2
   14be4:	movhi	r3, #7
   14be8:	bhi	14bbc <_start@@Base+0x2308>
   14bec:	strh	r4, [r6]
   14bf0:	b	14bcc <_start@@Base+0x2318>
   14bf4:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   14bf8:	push	{r4, r5, r6, r7, r8, lr}
   14bfc:	mov	r4, #0
   14c00:	sub	sp, sp, #24
   14c04:	mov	r5, #0
   14c08:	mov	lr, #0
   14c0c:	cmp	r1, r2
   14c10:	strd	r4, [sp, #16]
   14c14:	str	lr, [sp, #12]
   14c18:	strb	lr, [r3]
   14c1c:	moveq	r0, r1
   14c20:	beq	14c80 <_start@@Base+0x23cc>
   14c24:	mov	r6, r3
   14c28:	add	r3, sp, #16
   14c2c:	str	r3, [sp]
   14c30:	add	r3, sp, #12
   14c34:	mov	r4, r1
   14c38:	mov	r8, r0
   14c3c:	mov	r7, r2
   14c40:	bl	20cbc <flatcc_json_parser_integer@@Base>
   14c44:	cmp	r4, r0
   14c48:	beq	14c80 <_start@@Base+0x23cc>
   14c4c:	ldr	r3, [sp, #12]
   14c50:	ldrd	r4, [sp, #16]
   14c54:	cmp	r3, #0
   14c58:	beq	14c88 <_start@@Base+0x23d4>
   14c5c:	cmp	r5, #0
   14c60:	cmpeq	r4, #128	; 0x80
   14c64:	movhi	r3, #8
   14c68:	rsbls	r4, r4, #0
   14c6c:	bls	14c98 <_start@@Base+0x23e4>
   14c70:	mov	r1, r0
   14c74:	mov	r2, r7
   14c78:	mov	r0, r8
   14c7c:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   14c80:	add	sp, sp, #24
   14c84:	pop	{r4, r5, r6, r7, r8, pc}
   14c88:	cmp	r5, #0
   14c8c:	cmpeq	r4, #127	; 0x7f
   14c90:	movhi	r3, #7
   14c94:	bhi	14c70 <_start@@Base+0x23bc>
   14c98:	strb	r4, [r6]
   14c9c:	b	14c80 <_start@@Base+0x23cc>
   14ca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ca4:	sub	sp, sp, #28
   14ca8:	mov	fp, r3
   14cac:	ldr	r3, [sp, #64]	; 0x40
   14cb0:	mov	r6, #0
   14cb4:	mov	r4, r2
   14cb8:	strb	r6, [r3]
   14cbc:	mov	r7, r0
   14cc0:	bl	13888 <_start@@Base+0xfd4>
   14cc4:	cmp	r4, r0
   14cc8:	movne	r8, r0
   14ccc:	movne	sl, r6
   14cd0:	bne	14ce4 <_start@@Base+0x2430>
   14cd4:	mov	r0, r4
   14cd8:	add	sp, sp, #28
   14cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ce0:	mov	r8, r5
   14ce4:	mov	r9, fp
   14ce8:	add	r3, sp, #12
   14cec:	str	r3, [sp, #4]
   14cf0:	add	r3, sp, #16
   14cf4:	str	r3, [sp]
   14cf8:	mov	r2, r4
   14cfc:	ldr	r5, [r9]
   14d00:	add	r3, sp, #8
   14d04:	mov	r1, r8
   14d08:	mov	r0, r7
   14d0c:	blx	r5
   14d10:	cmp	r4, r0
   14d14:	mov	r5, r0
   14d18:	beq	14cd4 <_start@@Base+0x2420>
   14d1c:	cmp	r8, r0
   14d20:	bne	14d68 <_start@@Base+0x24b4>
   14d24:	ldr	r3, [r9, #4]!
   14d28:	cmp	r3, #0
   14d2c:	bne	14ce8 <_start@@Base+0x2434>
   14d30:	mov	r3, #23
   14d34:	mov	r2, r4
   14d38:	mov	r1, r8
   14d3c:	b	14d58 <_start@@Base+0x24a4>
   14d40:	ldr	r3, [r7, #12]
   14d44:	cmp	r3, #0
   14d48:	beq	14d70 <_start@@Base+0x24bc>
   14d4c:	mov	r3, #14
   14d50:	mov	r2, r4
   14d54:	mov	r1, r5
   14d58:	mov	r0, r7
   14d5c:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   14d60:	mov	r4, r0
   14d64:	b	14cd4 <_start@@Base+0x2420>
   14d68:	cmp	r6, #0
   14d6c:	bne	14d40 <_start@@Base+0x248c>
   14d70:	ldr	r3, [sp, #8]
   14d74:	cmp	r3, #0
   14d78:	movne	r3, #8
   14d7c:	bne	14d98 <_start@@Base+0x24e4>
   14d80:	ldrd	r2, [sp, #16]
   14d84:	cmp	r3, #0
   14d88:	cmpeq	r2, #255	; 0xff
   14d8c:	uxtbls	sl, r2
   14d90:	bls	14db0 <_start@@Base+0x24fc>
   14d94:	mov	r3, #7
   14d98:	mov	r2, r4
   14d9c:	mov	r1, r5
   14da0:	mov	r0, r7
   14da4:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   14da8:	cmp	r4, r0
   14dac:	beq	14cd4 <_start@@Base+0x2420>
   14db0:	ldr	r3, [sp, #64]	; 0x40
   14db4:	ldr	r2, [sp, #64]	; 0x40
   14db8:	add	r6, r6, #1
   14dbc:	ldrb	r3, [r3]
   14dc0:	add	r3, sl, r3
   14dc4:	strb	r3, [r2]
   14dc8:	ldr	r3, [sp, #12]
   14dcc:	cmp	r3, #0
   14dd0:	bne	14ce0 <_start@@Base+0x242c>
   14dd4:	mov	r4, r5
   14dd8:	b	14cd4 <_start@@Base+0x2420>
   14ddc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14de0:	sub	sp, sp, #36	; 0x24
   14de4:	mov	r6, #0
   14de8:	ldr	r9, [sp, #72]	; 0x48
   14dec:	mov	r4, r2
   14df0:	mov	r7, r0
   14df4:	str	r6, [r9]
   14df8:	str	r3, [sp, #12]
   14dfc:	bl	13888 <_start@@Base+0xfd4>
   14e00:	cmp	r4, r0
   14e04:	movne	r8, r0
   14e08:	movne	fp, r6
   14e0c:	bne	14e20 <_start@@Base+0x256c>
   14e10:	mov	r0, r4
   14e14:	add	sp, sp, #36	; 0x24
   14e18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e1c:	mov	r8, r5
   14e20:	ldr	sl, [sp, #12]
   14e24:	add	r3, sp, #20
   14e28:	str	r3, [sp, #4]
   14e2c:	add	r3, sp, #24
   14e30:	str	r3, [sp]
   14e34:	mov	r2, r4
   14e38:	ldr	r5, [sl]
   14e3c:	add	r3, sp, #16
   14e40:	mov	r1, r8
   14e44:	mov	r0, r7
   14e48:	blx	r5
   14e4c:	cmp	r4, r0
   14e50:	mov	r5, r0
   14e54:	beq	14e10 <_start@@Base+0x255c>
   14e58:	cmp	r8, r0
   14e5c:	bne	14ea4 <_start@@Base+0x25f0>
   14e60:	ldr	r3, [sl, #4]!
   14e64:	cmp	r3, #0
   14e68:	bne	14e24 <_start@@Base+0x2570>
   14e6c:	mov	r3, #23
   14e70:	mov	r2, r4
   14e74:	mov	r1, r8
   14e78:	b	14e94 <_start@@Base+0x25e0>
   14e7c:	ldr	r3, [r7, #12]
   14e80:	cmp	r3, #0
   14e84:	beq	14eac <_start@@Base+0x25f8>
   14e88:	mov	r3, #14
   14e8c:	mov	r2, r4
   14e90:	mov	r1, r5
   14e94:	mov	r0, r7
   14e98:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   14e9c:	mov	r4, r0
   14ea0:	b	14e10 <_start@@Base+0x255c>
   14ea4:	cmp	r6, #0
   14ea8:	bne	14e7c <_start@@Base+0x25c8>
   14eac:	ldr	r3, [sp, #16]
   14eb0:	cmp	r3, #0
   14eb4:	movne	r3, #8
   14eb8:	bne	14edc <_start@@Base+0x2628>
   14ebc:	ldrd	r2, [sp, #24]
   14ec0:	mov	r1, #0
   14ec4:	mvn	r0, #0
   14ec8:	cmp	r3, r1
   14ecc:	cmpeq	r2, r0
   14ed0:	movls	fp, r2
   14ed4:	bls	14ef4 <_start@@Base+0x2640>
   14ed8:	mov	r3, #7
   14edc:	mov	r2, r4
   14ee0:	mov	r1, r5
   14ee4:	mov	r0, r7
   14ee8:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   14eec:	cmp	r4, r0
   14ef0:	beq	14e10 <_start@@Base+0x255c>
   14ef4:	ldr	r3, [r9]
   14ef8:	add	r6, r6, #1
   14efc:	add	r3, r3, fp
   14f00:	str	r3, [r9]
   14f04:	ldr	r3, [sp, #20]
   14f08:	cmp	r3, #0
   14f0c:	bne	14e1c <_start@@Base+0x2568>
   14f10:	mov	r4, r5
   14f14:	b	14e10 <_start@@Base+0x255c>
   14f18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f1c:	sub	sp, sp, #36	; 0x24
   14f20:	mov	r6, #0
   14f24:	str	r3, [sp, #12]
   14f28:	ldr	r3, [sp, #72]	; 0x48
   14f2c:	mov	r4, r2
   14f30:	mov	r7, r0
   14f34:	strh	r6, [r3]
   14f38:	bl	13888 <_start@@Base+0xfd4>
   14f3c:	cmp	r4, r0
   14f40:	movne	r8, r0
   14f44:	movne	sl, r6
   14f48:	bne	14f5c <_start@@Base+0x26a8>
   14f4c:	mov	r0, r4
   14f50:	add	sp, sp, #36	; 0x24
   14f54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f58:	mov	r8, r5
   14f5c:	ldr	r9, [sp, #12]
   14f60:	add	fp, sp, #24
   14f64:	add	r3, sp, #20
   14f68:	str	r3, [sp, #4]
   14f6c:	str	fp, [sp]
   14f70:	add	r3, sp, #16
   14f74:	ldr	r5, [r9]
   14f78:	mov	r2, r4
   14f7c:	mov	r1, r8
   14f80:	mov	r0, r7
   14f84:	blx	r5
   14f88:	cmp	r4, r0
   14f8c:	mov	r5, r0
   14f90:	beq	14f4c <_start@@Base+0x2698>
   14f94:	cmp	r8, r0
   14f98:	bne	14fe0 <_start@@Base+0x272c>
   14f9c:	ldr	r3, [r9, #4]!
   14fa0:	cmp	r3, #0
   14fa4:	bne	14f64 <_start@@Base+0x26b0>
   14fa8:	mov	r3, #23
   14fac:	mov	r2, r4
   14fb0:	mov	r1, r8
   14fb4:	b	14fd0 <_start@@Base+0x271c>
   14fb8:	ldr	r3, [r7, #12]
   14fbc:	cmp	r3, #0
   14fc0:	beq	14fe8 <_start@@Base+0x2734>
   14fc4:	mov	r3, #14
   14fc8:	mov	r2, r4
   14fcc:	mov	r1, r5
   14fd0:	mov	r0, r7
   14fd4:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   14fd8:	mov	r4, r0
   14fdc:	b	14f4c <_start@@Base+0x2698>
   14fe0:	cmp	r6, #0
   14fe4:	bne	14fb8 <_start@@Base+0x2704>
   14fe8:	ldr	r3, [sp, #16]
   14fec:	cmp	r3, #0
   14ff0:	movne	r3, #8
   14ff4:	bne	15018 <_start@@Base+0x2764>
   14ff8:	ldrd	r2, [sp, #24]
   14ffc:	ldr	r0, [pc, #88]	; 1505c <_start@@Base+0x27a8>
   15000:	mov	r1, #0
   15004:	cmp	r3, r1
   15008:	cmpeq	r2, r0
   1500c:	uxthls	sl, r2
   15010:	bls	15030 <_start@@Base+0x277c>
   15014:	mov	r3, #7
   15018:	mov	r2, r4
   1501c:	mov	r1, r5
   15020:	mov	r0, r7
   15024:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   15028:	cmp	r4, r0
   1502c:	beq	14f4c <_start@@Base+0x2698>
   15030:	ldr	r3, [sp, #72]	; 0x48
   15034:	ldr	r2, [sp, #72]	; 0x48
   15038:	add	r6, r6, #1
   1503c:	ldrh	r3, [r3]
   15040:	add	r3, sl, r3
   15044:	strh	r3, [r2]
   15048:	ldr	r3, [sp, #20]
   1504c:	cmp	r3, #0
   15050:	bne	14f58 <_start@@Base+0x26a4>
   15054:	mov	r4, r5
   15058:	b	14f4c <_start@@Base+0x2698>
   1505c:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   15060:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15064:	sub	sp, sp, #28
   15068:	mov	fp, r3
   1506c:	ldr	r3, [sp, #64]	; 0x40
   15070:	mov	r6, #0
   15074:	mov	r4, r2
   15078:	strb	r6, [r3]
   1507c:	mov	r7, r0
   15080:	bl	13888 <_start@@Base+0xfd4>
   15084:	cmp	r4, r0
   15088:	movne	r8, r0
   1508c:	movne	r9, r6
   15090:	bne	150a4 <_start@@Base+0x27f0>
   15094:	mov	r0, r4
   15098:	add	sp, sp, #28
   1509c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150a0:	mov	r8, r5
   150a4:	mov	sl, fp
   150a8:	add	r3, sp, #12
   150ac:	str	r3, [sp, #4]
   150b0:	add	r3, sp, #16
   150b4:	str	r3, [sp]
   150b8:	mov	r2, r4
   150bc:	ldr	r5, [sl]
   150c0:	add	r3, sp, #8
   150c4:	mov	r1, r8
   150c8:	mov	r0, r7
   150cc:	blx	r5
   150d0:	cmp	r4, r0
   150d4:	mov	r5, r0
   150d8:	beq	15094 <_start@@Base+0x27e0>
   150dc:	cmp	r8, r0
   150e0:	bne	15140 <_start@@Base+0x288c>
   150e4:	ldr	r3, [sl, #4]!
   150e8:	cmp	r3, #0
   150ec:	bne	150a8 <_start@@Base+0x27f4>
   150f0:	mov	r3, #23
   150f4:	mov	r2, r4
   150f8:	mov	r1, r8
   150fc:	b	15118 <_start@@Base+0x2864>
   15100:	ldr	r3, [r7, #12]
   15104:	cmp	r3, #0
   15108:	beq	15148 <_start@@Base+0x2894>
   1510c:	mov	r3, #14
   15110:	mov	r2, r4
   15114:	mov	r1, r5
   15118:	mov	r0, r7
   1511c:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   15120:	mov	r4, r0
   15124:	b	15094 <_start@@Base+0x27e0>
   15128:	cmp	r3, #0
   1512c:	cmpeq	r2, #127	; 0x7f
   15130:	sxtbls	r9, r2
   15134:	bls	15188 <_start@@Base+0x28d4>
   15138:	mov	r3, #7
   1513c:	b	15170 <_start@@Base+0x28bc>
   15140:	cmp	r6, #0
   15144:	bne	15100 <_start@@Base+0x284c>
   15148:	ldr	r1, [sp, #8]
   1514c:	ldrd	r2, [sp, #16]
   15150:	cmp	r1, #0
   15154:	beq	15128 <_start@@Base+0x2874>
   15158:	cmp	r3, #0
   1515c:	cmpeq	r2, #128	; 0x80
   15160:	rsbls	r9, r2, #0
   15164:	movhi	r3, #8
   15168:	sxtbls	r9, r9
   1516c:	bls	15188 <_start@@Base+0x28d4>
   15170:	mov	r2, r4
   15174:	mov	r1, r5
   15178:	mov	r0, r7
   1517c:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   15180:	cmp	r4, r0
   15184:	beq	15094 <_start@@Base+0x27e0>
   15188:	ldr	r3, [sp, #64]	; 0x40
   1518c:	ldr	r2, [sp, #64]	; 0x40
   15190:	add	r6, r6, #1
   15194:	ldrb	r3, [r3]
   15198:	add	r3, r3, r9
   1519c:	strb	r3, [r2]
   151a0:	ldr	r3, [sp, #12]
   151a4:	cmp	r3, #0
   151a8:	bne	150a0 <_start@@Base+0x27ec>
   151ac:	mov	r4, r5
   151b0:	b	15094 <_start@@Base+0x27e0>
   151b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151b8:	sub	sp, sp, #36	; 0x24
   151bc:	mov	r5, #0
   151c0:	ldr	sl, [sp, #72]	; 0x48
   151c4:	mov	r4, r2
   151c8:	mov	r7, r0
   151cc:	str	r5, [sl]
   151d0:	str	r3, [sp, #12]
   151d4:	bl	13888 <_start@@Base+0xfd4>
   151d8:	cmp	r4, r0
   151dc:	movne	r8, r0
   151e0:	movne	r9, r5
   151e4:	bne	151f8 <_start@@Base+0x2944>
   151e8:	mov	r0, r4
   151ec:	add	sp, sp, #36	; 0x24
   151f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151f4:	mov	r8, r6
   151f8:	ldr	fp, [sp, #12]
   151fc:	add	r3, sp, #20
   15200:	str	r3, [sp, #4]
   15204:	add	r3, sp, #24
   15208:	str	r3, [sp]
   1520c:	ldr	r6, [fp]
   15210:	add	r3, sp, #16
   15214:	mov	r2, r4
   15218:	mov	r1, r8
   1521c:	mov	r0, r7
   15220:	blx	r6
   15224:	cmp	r4, r0
   15228:	mov	r6, r0
   1522c:	beq	151e8 <_start@@Base+0x2934>
   15230:	cmp	r8, r0
   15234:	bne	1529c <_start@@Base+0x29e8>
   15238:	ldr	r3, [fp, #4]!
   1523c:	cmp	r3, #0
   15240:	bne	151fc <_start@@Base+0x2948>
   15244:	mov	r3, #23
   15248:	mov	r2, r4
   1524c:	mov	r1, r8
   15250:	b	1526c <_start@@Base+0x29b8>
   15254:	ldr	r3, [r7, #12]
   15258:	cmp	r3, #0
   1525c:	beq	152a4 <_start@@Base+0x29f0>
   15260:	mov	r3, #14
   15264:	mov	r2, r4
   15268:	mov	r1, r6
   1526c:	mov	r0, r7
   15270:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   15274:	mov	r4, r0
   15278:	b	151e8 <_start@@Base+0x2934>
   1527c:	mov	r1, #0
   15280:	cmp	r3, r1
   15284:	mvn	r0, #-2147483648	; 0x80000000
   15288:	cmpeq	r2, r0
   1528c:	movls	r9, r2
   15290:	bls	152e0 <_start@@Base+0x2a2c>
   15294:	mov	r3, #7
   15298:	b	152c8 <_start@@Base+0x2a14>
   1529c:	cmp	r5, #0
   152a0:	bne	15254 <_start@@Base+0x29a0>
   152a4:	ldr	r1, [sp, #16]
   152a8:	ldrd	r2, [sp, #24]
   152ac:	cmp	r1, #0
   152b0:	beq	1527c <_start@@Base+0x29c8>
   152b4:	cmp	r3, #0
   152b8:	cmpeq	r2, #-2147483648	; 0x80000000
   152bc:	movhi	r3, #8
   152c0:	rsbls	r9, r2, #0
   152c4:	bls	152e0 <_start@@Base+0x2a2c>
   152c8:	mov	r2, r4
   152cc:	mov	r1, r6
   152d0:	mov	r0, r7
   152d4:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   152d8:	cmp	r4, r0
   152dc:	beq	151e8 <_start@@Base+0x2934>
   152e0:	ldr	r3, [sl]
   152e4:	add	r5, r5, #1
   152e8:	add	r3, r3, r9
   152ec:	str	r3, [sl]
   152f0:	ldr	r3, [sp, #20]
   152f4:	cmp	r3, #0
   152f8:	bne	151f4 <_start@@Base+0x2940>
   152fc:	mov	r4, r6
   15300:	b	151e8 <_start@@Base+0x2934>
   15304:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   15308:	mov	r9, r3
   1530c:	mov	r4, r2
   15310:	mov	r3, #0
   15314:	mov	r2, #4
   15318:	mov	r5, r0
   1531c:	mov	r6, r1
   15320:	str	r3, [r9]
   15324:	mov	r1, r2
   15328:	ldr	r0, [r0]
   1532c:	bl	1c9e8 <flatcc_builder_start_struct@@Base>
   15330:	subs	sl, r0, #0
   15334:	beq	15490 <_start@@Base+0x2bdc>
   15338:	add	r3, sp, #8
   1533c:	mov	r2, r4
   15340:	mov	r1, r6
   15344:	mov	r0, r5
   15348:	bl	14520 <_start@@Base+0x1c6c>
   1534c:	ldr	r3, [sp, #8]
   15350:	mov	r6, r0
   15354:	cmp	r3, #0
   15358:	beq	15474 <_start@@Base+0x2bc0>
   1535c:	mov	r2, r4
   15360:	mov	r1, r6
   15364:	mov	r0, r5
   15368:	bl	13830 <_start@@Base+0xf7c>
   1536c:	mov	r1, r4
   15370:	mov	r6, r0
   15374:	bl	129e0 <_start@@Base+0x12c>
   15378:	add	r3, pc, #336	; 0x150
   1537c:	ldrd	r2, [r3]
   15380:	cmp	r1, r3
   15384:	cmpeq	r0, r2
   15388:	bne	154b4 <_start@@Base+0x2c00>
   1538c:	add	r6, r6, #8
   15390:	mov	r1, r4
   15394:	mov	r0, r6
   15398:	bl	129e0 <_start@@Base+0x12c>
   1539c:	ldr	r3, [pc, #308]	; 154d8 <_start@@Base+0x2c24>
   153a0:	mov	r2, #0
   153a4:	and	r3, r3, r1
   153a8:	mov	r1, r3
   153ac:	ldr	r3, [pc, #296]	; 154dc <_start@@Base+0x2c28>
   153b0:	and	r2, r2, r0
   153b4:	mov	r0, r2
   153b8:	cmp	r1, r3
   153bc:	mov	r2, #0
   153c0:	cmpeq	r0, r2
   153c4:	bne	154b4 <_start@@Base+0x2c00>
   153c8:	mov	r3, #2
   153cc:	mov	r2, r4
   153d0:	mov	r1, r6
   153d4:	mov	r0, r5
   153d8:	bl	14674 <_start@@Base+0x1dc0>
   153dc:	cmp	r6, r0
   153e0:	mov	r8, r0
   153e4:	beq	154b4 <_start@@Base+0x2c00>
   153e8:	add	r7, sp, #16
   153ec:	mov	r3, #0
   153f0:	str	r3, [r7, #-4]!
   153f4:	mov	r1, r0
   153f8:	mov	r3, r7
   153fc:	mov	r2, r4
   15400:	mov	r0, r5
   15404:	bl	14a9c <_start@@Base+0x21e8>
   15408:	cmp	r8, r0
   1540c:	mov	r6, r0
   15410:	bne	15440 <_start@@Base+0x2b8c>
   15414:	mov	r1, r0
   15418:	str	r7, [sp]
   1541c:	ldr	r3, [pc, #188]	; 154e0 <_start@@Base+0x2c2c>
   15420:	mov	r2, r4
   15424:	mov	r0, r5
   15428:	bl	151b4 <_start@@Base+0x2900>
   1542c:	cmp	r4, r0
   15430:	cmpne	r6, r0
   15434:	mov	r1, r0
   15438:	beq	15460 <_start@@Base+0x2bac>
   1543c:	mov	r6, r0
   15440:	ldr	r3, [sp, #12]
   15444:	str	r3, [sl]
   15448:	add	r3, sp, #8
   1544c:	mov	r2, r4
   15450:	mov	r1, r6
   15454:	mov	r0, r5
   15458:	bl	13758 <_start@@Base+0xea4>
   1545c:	b	1534c <_start@@Base+0x2a98>
   15460:	mov	r3, #33	; 0x21
   15464:	mov	r2, r4
   15468:	mov	r0, r5
   1546c:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   15470:	mov	r6, r0
   15474:	cmp	r4, r6
   15478:	beq	15490 <_start@@Base+0x2bdc>
   1547c:	ldr	r0, [r5]
   15480:	bl	1ca3c <flatcc_builder_end_struct@@Base>
   15484:	cmp	r0, #0
   15488:	str	r0, [r9]
   1548c:	bne	154a8 <_start@@Base+0x2bf4>
   15490:	mov	r1, r6
   15494:	mov	r3, #33	; 0x21
   15498:	mov	r2, r4
   1549c:	mov	r0, r5
   154a0:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   154a4:	mov	r6, r0
   154a8:	mov	r0, r6
   154ac:	add	sp, sp, #16
   154b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   154b4:	mov	r1, r6
   154b8:	mov	r2, r4
   154bc:	mov	r0, r5
   154c0:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   154c4:	mov	r6, r0
   154c8:	b	15448 <_start@@Base+0x2b94>
   154cc:	nop			; (mov r0, r0)
   154d0:	cmpvc	pc, #1342177286	; 0x50000006
   154d4:	rsbvs	r6, pc, #428	; 0x1ac
   154d8:			; <UNDEFINED> instruction: 0xffff0000
   154dc:	cmnvs	r4, r0
   154e0:	andeq	r4, r3, r0, lsl #1
   154e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154e8:	sub	sp, sp, #20
   154ec:	mov	ip, #0
   154f0:	ldr	r7, [sp, #56]	; 0x38
   154f4:	cmp	r3, #9
   154f8:	mov	r5, r0
   154fc:	mov	r6, r2
   15500:	str	ip, [r7]
   15504:	beq	158f8 <_start@@Base+0x3044>
   15508:	mov	r4, r1
   1550c:	bhi	1553c <_start@@Base+0x2c88>
   15510:	cmp	r3, #2
   15514:	beq	15574 <_start@@Base+0x2cc0>
   15518:	cmp	r3, #8
   1551c:	beq	15788 <_start@@Base+0x2ed4>
   15520:	cmp	r3, ip
   15524:	bne	15550 <_start@@Base+0x2c9c>
   15528:	bl	12b60 <_start@@Base+0x2ac>
   1552c:	mov	r4, r0
   15530:	mov	r0, r4
   15534:	add	sp, sp, #20
   15538:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1553c:	cmp	r3, #11
   15540:	beq	15904 <_start@@Base+0x3050>
   15544:	bcc	158f8 <_start@@Base+0x3044>
   15548:	cmp	r3, #255	; 0xff
   1554c:	beq	15904 <_start@@Base+0x3050>
   15550:	ldr	r3, [r5, #8]
   15554:	tst	r3, #1
   15558:	moveq	r3, #15
   1555c:	beq	15608 <_start@@Base+0x2d54>
   15560:	mov	r2, r6
   15564:	mov	r1, r4
   15568:	mov	r0, r5
   1556c:	bl	20724 <flatcc_json_parser_generic_json@@Base>
   15570:	b	1552c <_start@@Base+0x2c78>
   15574:	mov	r1, #1
   15578:	ldr	r0, [r0]
   1557c:	bl	1d090 <flatcc_builder_start_table@@Base>
   15580:	cmp	r0, #0
   15584:	bne	155d4 <_start@@Base+0x2d20>
   15588:	mov	r1, r4
   1558c:	add	r3, sp, #8
   15590:	mov	r2, r6
   15594:	mov	r0, r5
   15598:	bl	14520 <_start@@Base+0x1c6c>
   1559c:	mov	r8, #0
   155a0:	mvn	r9, #255	; 0xff
   155a4:	mov	r4, r0
   155a8:	ldr	r3, [sp, #8]
   155ac:	cmp	r3, #0
   155b0:	bne	1561c <_start@@Base+0x2d68>
   155b4:	ldr	r3, [r5, #24]
   155b8:	cmp	r3, #0
   155bc:	bne	155d4 <_start@@Base+0x2d20>
   155c0:	ldr	r0, [r5]
   155c4:	bl	1d6cc <flatcc_builder_end_table@@Base>
   155c8:	cmp	r0, #0
   155cc:	str	r0, [r7]
   155d0:	bne	155ec <_start@@Base+0x2d38>
   155d4:	mov	r3, #33	; 0x21
   155d8:	mov	r2, r6
   155dc:	mov	r1, r4
   155e0:	mov	r0, r5
   155e4:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   155e8:	mov	r4, r0
   155ec:	ldr	r3, [r5, #24]
   155f0:	cmp	r3, #0
   155f4:	bne	15530 <_start@@Base+0x2c7c>
   155f8:	ldr	r3, [r7]
   155fc:	cmp	r3, #0
   15600:	bne	15530 <_start@@Base+0x2c7c>
   15604:	mov	r3, #33	; 0x21
   15608:	mov	r2, r6
   1560c:	mov	r1, r4
   15610:	mov	r0, r5
   15614:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   15618:	b	1552c <_start@@Base+0x2c78>
   1561c:	mov	r2, r6
   15620:	mov	r1, r4
   15624:	mov	r0, r5
   15628:	bl	13830 <_start@@Base+0xf7c>
   1562c:	mov	r1, r6
   15630:	mov	r4, r0
   15634:	bl	129e0 <_start@@Base+0x12c>
   15638:	add	r3, pc, #720	; 0x2d0
   1563c:	ldrd	r2, [r3]
   15640:	cmp	r1, r3
   15644:	cmpeq	r0, r2
   15648:	bne	15770 <_start@@Base+0x2ebc>
   1564c:	add	sl, r4, #8
   15650:	mov	r1, r6
   15654:	mov	r0, sl
   15658:	bl	129e0 <_start@@Base+0x12c>
   1565c:	add	r3, pc, #692	; 0x2b4
   15660:	ldrd	r2, [r3]
   15664:	cmp	r1, r3
   15668:	cmpeq	r0, r2
   1566c:	movne	r2, r6
   15670:	movne	r1, sl
   15674:	bne	15778 <_start@@Base+0x2ec4>
   15678:	add	r4, r4, #16
   1567c:	mov	r1, r6
   15680:	mov	r0, r4
   15684:	bl	129e0 <_start@@Base+0x12c>
   15688:	add	r3, pc, #656	; 0x290
   1568c:	ldrd	r2, [r3]
   15690:	and	r1, r1, r9
   15694:	and	r0, r0, r8
   15698:	cmp	r1, r3
   1569c:	cmpeq	r0, r2
   156a0:	bne	15770 <_start@@Base+0x2ebc>
   156a4:	mov	r3, #3
   156a8:	mov	r2, r6
   156ac:	mov	r1, r4
   156b0:	mov	r0, r5
   156b4:	bl	14674 <_start@@Base+0x1dc0>
   156b8:	cmp	r4, r0
   156bc:	mov	sl, r0
   156c0:	beq	15770 <_start@@Base+0x2ebc>
   156c4:	add	fp, sp, #16
   156c8:	mov	r3, #0
   156cc:	str	r3, [fp, #-4]!
   156d0:	mov	r1, r0
   156d4:	mov	r3, fp
   156d8:	mov	r2, r6
   156dc:	mov	r0, r5
   156e0:	bl	14a9c <_start@@Base+0x21e8>
   156e4:	cmp	sl, r0
   156e8:	mov	r4, r0
   156ec:	bne	15718 <_start@@Base+0x2e64>
   156f0:	mov	r1, r0
   156f4:	str	fp, [sp]
   156f8:	ldr	r3, [pc, #568]	; 15938 <_start@@Base+0x3084>
   156fc:	mov	r2, r6
   15700:	mov	r0, r5
   15704:	bl	151b4 <_start@@Base+0x2900>
   15708:	cmp	r6, r0
   1570c:	cmpne	r4, r0
   15710:	mov	r4, r0
   15714:	beq	155d4 <_start@@Base+0x2d20>
   15718:	ldr	r3, [sp, #12]
   1571c:	cmp	r3, #0
   15720:	bne	15730 <_start@@Base+0x2e7c>
   15724:	ldr	r3, [r5, #8]
   15728:	tst	r3, #2
   1572c:	beq	15754 <_start@@Base+0x2ea0>
   15730:	mov	r3, #4
   15734:	mov	r2, r3
   15738:	mov	r1, #0
   1573c:	ldr	r0, [r5]
   15740:	bl	1e050 <flatcc_builder_table_add@@Base>
   15744:	cmp	r0, #0
   15748:	beq	155d4 <_start@@Base+0x2d20>
   1574c:	ldr	r3, [sp, #12]
   15750:	str	r3, [r0]
   15754:	mov	r1, r4
   15758:	add	r3, sp, #8
   1575c:	mov	r2, r6
   15760:	mov	r0, r5
   15764:	bl	13758 <_start@@Base+0xea4>
   15768:	mov	r4, r0
   1576c:	b	155a8 <_start@@Base+0x2cf4>
   15770:	mov	r2, r6
   15774:	mov	r1, r4
   15778:	mov	r0, r5
   1577c:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   15780:	mov	r4, r0
   15784:	b	15754 <_start@@Base+0x2ea0>
   15788:	mov	r2, #2
   1578c:	mov	r1, r2
   15790:	ldr	r0, [r0]
   15794:	bl	1c9e8 <flatcc_builder_start_struct@@Base>
   15798:	subs	sl, r0, #0
   1579c:	beq	155d4 <_start@@Base+0x2d20>
   157a0:	add	r3, sp, #12
   157a4:	mov	r2, r6
   157a8:	mov	r1, r4
   157ac:	mov	r0, r5
   157b0:	bl	14520 <_start@@Base+0x1c6c>
   157b4:	ldr	r3, [sp, #12]
   157b8:	mov	r4, r0
   157bc:	cmp	r3, #0
   157c0:	beq	158cc <_start@@Base+0x3018>
   157c4:	mov	r2, r6
   157c8:	mov	r1, r4
   157cc:	mov	r0, r5
   157d0:	bl	13830 <_start@@Base+0xf7c>
   157d4:	mov	r1, r6
   157d8:	mov	r4, r0
   157dc:	bl	129e0 <_start@@Base+0x12c>
   157e0:	add	r3, pc, #320	; 0x140
   157e4:	ldrd	r2, [r3]
   157e8:	cmp	r1, r3
   157ec:	cmpeq	r0, r2
   157f0:	bne	158e0 <_start@@Base+0x302c>
   157f4:	add	r4, r4, #8
   157f8:	mov	r1, r6
   157fc:	mov	r0, r4
   15800:	bl	129e0 <_start@@Base+0x12c>
   15804:	add	r3, pc, #292	; 0x124
   15808:	ldrd	r2, [r3]
   1580c:	mov	r0, #0
   15810:	bic	r1, r1, #255	; 0xff
   15814:	cmp	r1, r3
   15818:	cmpeq	r0, r2
   1581c:	bne	158e0 <_start@@Base+0x302c>
   15820:	mov	r3, #3
   15824:	mov	r2, r6
   15828:	mov	r1, r4
   1582c:	mov	r0, r5
   15830:	bl	14674 <_start@@Base+0x1dc0>
   15834:	cmp	r4, r0
   15838:	mov	r9, r0
   1583c:	beq	158e0 <_start@@Base+0x302c>
   15840:	add	r8, sp, #16
   15844:	mov	r3, #0
   15848:	strh	r3, [r8, #-8]!
   1584c:	mov	r1, r0
   15850:	mov	r3, r8
   15854:	mov	r2, r6
   15858:	mov	r0, r5
   1585c:	bl	148c8 <_start@@Base+0x2014>
   15860:	cmp	r9, r0
   15864:	mov	r4, r0
   15868:	bne	15898 <_start@@Base+0x2fe4>
   1586c:	mov	r1, r0
   15870:	str	r8, [sp]
   15874:	ldr	r3, [pc, #192]	; 1593c <_start@@Base+0x3088>
   15878:	mov	r2, r6
   1587c:	mov	r0, r5
   15880:	bl	14f18 <_start@@Base+0x2664>
   15884:	cmp	r6, r0
   15888:	cmpne	r4, r0
   1588c:	mov	r1, r0
   15890:	beq	158b8 <_start@@Base+0x3004>
   15894:	mov	r4, r0
   15898:	ldrh	r3, [sp, #8]
   1589c:	strh	r3, [sl]
   158a0:	add	r3, sp, #12
   158a4:	mov	r2, r6
   158a8:	mov	r1, r4
   158ac:	mov	r0, r5
   158b0:	bl	13758 <_start@@Base+0xea4>
   158b4:	b	157b4 <_start@@Base+0x2f00>
   158b8:	mov	r3, #33	; 0x21
   158bc:	mov	r2, r6
   158c0:	mov	r0, r5
   158c4:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   158c8:	mov	r4, r0
   158cc:	cmp	r6, r4
   158d0:	beq	155d4 <_start@@Base+0x2d20>
   158d4:	ldr	r0, [r5]
   158d8:	bl	1ca3c <flatcc_builder_end_struct@@Base>
   158dc:	b	155c8 <_start@@Base+0x2d14>
   158e0:	mov	r1, r4
   158e4:	mov	r2, r6
   158e8:	mov	r0, r5
   158ec:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   158f0:	mov	r4, r0
   158f4:	b	158a0 <_start@@Base+0x2fec>
   158f8:	mov	r3, r7
   158fc:	bl	15304 <_start@@Base+0x2a50>
   15900:	b	155e8 <_start@@Base+0x2d34>
   15904:	mov	r3, r7
   15908:	bl	21140 <flatcc_json_parser_build_string@@Base>
   1590c:	b	155e8 <_start@@Base+0x2d34>
   15910:	ldrbvs	r6, [pc], #-372	; 15918 <_start@@Base+0x3064>
   15914:	cmnvc	r7, #456	; 0x1c8
   15918:	svcpl	0x0064616d
   1591c:	strbtvc	r6, [r1], #-875	; 0xfffffc95
   15920:	andeq	r0, r0, r0
   15924:	cmnvs	r7, r0, lsl #10
   15928:	svcpl	0x006c656e
   1592c:	stmdavs	r1!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   15930:	andeq	r0, r0, r0
   15934:	ldrbvs	r6, [r4, -r0, lsl #16]!
   15938:	andeq	r4, r3, ip, lsl #1
   1593c:	muleq	r3, r8, r0
   15940:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15944:	sub	sp, sp, #36	; 0x24
   15948:	mov	r6, #0
   1594c:	str	r3, [sp, #12]
   15950:	ldr	r3, [sp, #72]	; 0x48
   15954:	mov	r4, r2
   15958:	mov	r7, r0
   1595c:	strh	r6, [r3]
   15960:	bl	13888 <_start@@Base+0xfd4>
   15964:	cmp	r4, r0
   15968:	movne	r8, r0
   1596c:	movne	r9, r6
   15970:	bne	15984 <_start@@Base+0x30d0>
   15974:	mov	r0, r4
   15978:	add	sp, sp, #36	; 0x24
   1597c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15980:	mov	r8, r5
   15984:	ldr	sl, [sp, #12]
   15988:	add	fp, sp, #24
   1598c:	add	r3, sp, #20
   15990:	str	r3, [sp, #4]
   15994:	str	fp, [sp]
   15998:	add	r3, sp, #16
   1599c:	ldr	r5, [sl]
   159a0:	mov	r2, r4
   159a4:	mov	r1, r8
   159a8:	mov	r0, r7
   159ac:	blx	r5
   159b0:	cmp	r4, r0
   159b4:	mov	r5, r0
   159b8:	beq	15974 <_start@@Base+0x30c0>
   159bc:	cmp	r8, r0
   159c0:	bne	15a28 <_start@@Base+0x3174>
   159c4:	ldr	r3, [sl, #4]!
   159c8:	cmp	r3, #0
   159cc:	bne	1598c <_start@@Base+0x30d8>
   159d0:	mov	r3, #23
   159d4:	mov	r2, r4
   159d8:	mov	r1, r8
   159dc:	b	159f8 <_start@@Base+0x3144>
   159e0:	ldr	r3, [r7, #12]
   159e4:	cmp	r3, #0
   159e8:	beq	15a30 <_start@@Base+0x317c>
   159ec:	mov	r3, #14
   159f0:	mov	r2, r4
   159f4:	mov	r1, r5
   159f8:	mov	r0, r7
   159fc:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   15a00:	mov	r4, r0
   15a04:	b	15974 <_start@@Base+0x30c0>
   15a08:	ldr	r0, [pc, #140]	; 15a9c <_start@@Base+0x31e8>
   15a0c:	mov	r1, #0
   15a10:	cmp	r3, r1
   15a14:	cmpeq	r2, r0
   15a18:	sxthls	r9, r2
   15a1c:	bls	15a70 <_start@@Base+0x31bc>
   15a20:	mov	r3, #7
   15a24:	b	15a58 <_start@@Base+0x31a4>
   15a28:	cmp	r6, #0
   15a2c:	bne	159e0 <_start@@Base+0x312c>
   15a30:	ldr	r1, [sp, #16]
   15a34:	ldrd	r2, [sp, #24]
   15a38:	cmp	r1, #0
   15a3c:	beq	15a08 <_start@@Base+0x3154>
   15a40:	cmp	r3, #0
   15a44:	cmpeq	r2, #32768	; 0x8000
   15a48:	rsbls	r9, r2, #0
   15a4c:	movhi	r3, #8
   15a50:	sxthls	r9, r9
   15a54:	bls	15a70 <_start@@Base+0x31bc>
   15a58:	mov	r2, r4
   15a5c:	mov	r1, r5
   15a60:	mov	r0, r7
   15a64:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   15a68:	cmp	r4, r0
   15a6c:	beq	15974 <_start@@Base+0x30c0>
   15a70:	ldr	r3, [sp, #72]	; 0x48
   15a74:	ldr	r2, [sp, #72]	; 0x48
   15a78:	add	r6, r6, #1
   15a7c:	ldrh	r3, [r3]
   15a80:	add	r3, r3, r9
   15a84:	strh	r3, [r2]
   15a88:	ldr	r3, [sp, #20]
   15a8c:	cmp	r3, #0
   15a90:	bne	15980 <_start@@Base+0x30cc>
   15a94:	mov	r4, r5
   15a98:	b	15974 <_start@@Base+0x30c0>
   15a9c:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   15aa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15aa4:	sub	sp, sp, #20
   15aa8:	mov	sl, r3
   15aac:	add	r3, sp, #12
   15ab0:	mov	r6, r0
   15ab4:	mov	r4, r2
   15ab8:	bl	14520 <_start@@Base+0x1c6c>
   15abc:	mov	r8, #0
   15ac0:	mov	r9, #1627389952	; 0x61000000
   15ac4:	ldr	r3, [sp, #12]
   15ac8:	cmp	r3, #0
   15acc:	bne	15ad8 <_start@@Base+0x3224>
   15ad0:	add	sp, sp, #20
   15ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ad8:	mov	r1, r0
   15adc:	mov	r2, r4
   15ae0:	mov	r0, r6
   15ae4:	bl	13830 <_start@@Base+0xf7c>
   15ae8:	mov	r1, r4
   15aec:	mov	r5, r0
   15af0:	bl	129e0 <_start@@Base+0x12c>
   15af4:	mov	r0, #0
   15af8:	and	r1, r1, #-16777216	; 0xff000000
   15afc:	cmp	r1, #1644167168	; 0x62000000
   15b00:	cmpeq	r0, #0
   15b04:	bne	15b9c <_start@@Base+0x32e8>
   15b08:	mov	r3, #1
   15b0c:	mov	r2, r4
   15b10:	mov	r1, r5
   15b14:	mov	r0, r6
   15b18:	bl	14674 <_start@@Base+0x1dc0>
   15b1c:	cmp	r5, r0
   15b20:	mov	r7, r0
   15b24:	beq	15c28 <_start@@Base+0x3374>
   15b28:	add	fp, sp, #16
   15b2c:	mov	r3, #0
   15b30:	strb	r3, [fp, #-6]!
   15b34:	mov	r1, r0
   15b38:	mov	r3, fp
   15b3c:	mov	r2, r4
   15b40:	mov	r0, r6
   15b44:	bl	14bf8 <_start@@Base+0x2344>
   15b48:	cmp	r7, r0
   15b4c:	mov	r5, r0
   15b50:	bne	15b7c <_start@@Base+0x32c8>
   15b54:	mov	r1, r0
   15b58:	str	fp, [sp]
   15b5c:	ldr	r3, [pc, #244]	; 15c58 <_start@@Base+0x33a4>
   15b60:	mov	r2, r4
   15b64:	mov	r0, r6
   15b68:	bl	15060 <_start@@Base+0x27ac>
   15b6c:	cmp	r4, r0
   15b70:	cmpne	r5, r0
   15b74:	beq	15c40 <_start@@Base+0x338c>
   15b78:	mov	r5, r0
   15b7c:	ldrb	r3, [sp, #10]
   15b80:	strb	r3, [sl, #2]
   15b84:	add	r3, sp, #12
   15b88:	mov	r2, r4
   15b8c:	mov	r1, r5
   15b90:	mov	r0, r6
   15b94:	bl	13758 <_start@@Base+0xea4>
   15b98:	b	15ac4 <_start@@Base+0x3210>
   15b9c:	cmp	r1, r9
   15ba0:	cmpeq	r0, r8
   15ba4:	bne	15c28 <_start@@Base+0x3374>
   15ba8:	mov	r3, #1
   15bac:	mov	r2, r4
   15bb0:	mov	r1, r5
   15bb4:	mov	r0, r6
   15bb8:	bl	14674 <_start@@Base+0x1dc0>
   15bbc:	cmp	r5, r0
   15bc0:	mov	r7, r0
   15bc4:	beq	15c28 <_start@@Base+0x3374>
   15bc8:	add	fp, sp, #16
   15bcc:	mov	r3, #0
   15bd0:	strh	r3, [fp, #-6]!
   15bd4:	mov	r1, r0
   15bd8:	mov	r3, fp
   15bdc:	mov	r2, r4
   15be0:	mov	r0, r6
   15be4:	bl	14b48 <_start@@Base+0x2294>
   15be8:	cmp	r7, r0
   15bec:	mov	r5, r0
   15bf0:	bne	15c1c <_start@@Base+0x3368>
   15bf4:	mov	r1, r0
   15bf8:	str	fp, [sp]
   15bfc:	ldr	r3, [pc, #88]	; 15c5c <_start@@Base+0x33a8>
   15c00:	mov	r2, r4
   15c04:	mov	r0, r6
   15c08:	bl	15940 <_start@@Base+0x308c>
   15c0c:	cmp	r4, r0
   15c10:	cmpne	r5, r0
   15c14:	beq	15c40 <_start@@Base+0x338c>
   15c18:	mov	r5, r0
   15c1c:	ldrh	r3, [sp, #10]
   15c20:	strh	r3, [sl]
   15c24:	b	15b84 <_start@@Base+0x32d0>
   15c28:	mov	r1, r5
   15c2c:	mov	r2, r4
   15c30:	mov	r0, r6
   15c34:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   15c38:	mov	r5, r0
   15c3c:	b	15b84 <_start@@Base+0x32d0>
   15c40:	mov	r1, r0
   15c44:	mov	r3, #33	; 0x21
   15c48:	mov	r2, r4
   15c4c:	mov	r0, r6
   15c50:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   15c54:	b	15ad0 <_start@@Base+0x321c>
   15c58:	andeq	r4, r3, r4, lsr #1
   15c5c:	strheq	r4, [r3], -r0
   15c60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c64:	sub	sp, sp, #44	; 0x2c
   15c68:	mov	sl, #0
   15c6c:	ldr	r8, [sp, #80]	; 0x50
   15c70:	mov	r4, r2
   15c74:	mov	r6, r0
   15c78:	str	sl, [r8]
   15c7c:	str	sl, [r8, #4]
   15c80:	str	r3, [sp, #20]
   15c84:	bl	13888 <_start@@Base+0xfd4>
   15c88:	cmp	r4, r0
   15c8c:	beq	15d84 <_start@@Base+0x34d0>
   15c90:	mov	r7, r0
   15c94:	mov	r9, sl
   15c98:	str	sl, [sp, #8]
   15c9c:	str	sl, [sp, #12]
   15ca0:	ldr	sl, [sp, #20]
   15ca4:	add	fp, sp, #32
   15ca8:	add	r3, sp, #28
   15cac:	str	r3, [sp, #4]
   15cb0:	str	fp, [sp]
   15cb4:	add	r3, sp, #24
   15cb8:	ldr	r5, [sl]
   15cbc:	mov	r2, r4
   15cc0:	mov	r1, r7
   15cc4:	mov	r0, r6
   15cc8:	blx	r5
   15ccc:	cmp	r4, r0
   15cd0:	mov	r5, r0
   15cd4:	beq	15d84 <_start@@Base+0x34d0>
   15cd8:	cmp	r7, r0
   15cdc:	bne	15d90 <_start@@Base+0x34dc>
   15ce0:	ldr	r3, [sl, #4]!
   15ce4:	cmp	r3, #0
   15ce8:	bne	15ca8 <_start@@Base+0x33f4>
   15cec:	mov	r3, #23
   15cf0:	mov	r2, r4
   15cf4:	mov	r1, r7
   15cf8:	b	15d1c <_start@@Base+0x3468>
   15cfc:	mov	r7, r5
   15d00:	b	15ca0 <_start@@Base+0x33ec>
   15d04:	ldr	r3, [r6, #12]
   15d08:	cmp	r3, #0
   15d0c:	beq	15d98 <_start@@Base+0x34e4>
   15d10:	mov	r3, #14
   15d14:	mov	r2, r4
   15d18:	mov	r1, r5
   15d1c:	mov	r0, r6
   15d20:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   15d24:	mov	r4, r0
   15d28:	b	15d84 <_start@@Base+0x34d0>
   15d2c:	cmp	r2, #0
   15d30:	sbcs	r1, r3, #0
   15d34:	bge	15dc0 <_start@@Base+0x350c>
   15d38:	mov	r3, #7
   15d3c:	mov	r2, r4
   15d40:	mov	r1, r5
   15d44:	mov	r0, r6
   15d48:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   15d4c:	cmp	r4, r0
   15d50:	beq	15d84 <_start@@Base+0x34d0>
   15d54:	ldrd	r2, [r8]
   15d58:	ldrd	r0, [sp, #8]
   15d5c:	add	r9, r9, #1
   15d60:	adds	r0, r0, r2
   15d64:	adc	r1, r1, r3
   15d68:	mov	r3, r1
   15d6c:	mov	r2, r0
   15d70:	strd	r2, [r8]
   15d74:	ldr	r3, [sp, #28]
   15d78:	cmp	r3, #0
   15d7c:	bne	15cfc <_start@@Base+0x3448>
   15d80:	mov	r4, r5
   15d84:	mov	r0, r4
   15d88:	add	sp, sp, #44	; 0x2c
   15d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d90:	cmp	r9, #0
   15d94:	bne	15d04 <_start@@Base+0x3450>
   15d98:	ldr	r1, [sp, #24]
   15d9c:	ldrd	r2, [sp, #32]
   15da0:	cmp	r1, #0
   15da4:	beq	15d2c <_start@@Base+0x3478>
   15da8:	cmp	r3, #-2147483648	; 0x80000000
   15dac:	cmpeq	r2, #0
   15db0:	movhi	r3, #8
   15db4:	bhi	15d3c <_start@@Base+0x3488>
   15db8:	rsbs	r2, r2, #0
   15dbc:	rsc	r3, r3, #0
   15dc0:	strd	r2, [sp, #8]
   15dc4:	b	15d54 <_start@@Base+0x34a0>
   15dc8:	push	{r4, r5, r6, r7, r8, lr}
   15dcc:	mov	r4, #0
   15dd0:	sub	sp, sp, #24
   15dd4:	mov	r5, #0
   15dd8:	mov	lr, #0
   15ddc:	cmp	r1, r2
   15de0:	strd	r4, [sp, #16]
   15de4:	str	lr, [sp, #12]
   15de8:	strd	r4, [r3]
   15dec:	moveq	r0, r1
   15df0:	beq	15e6c <_start@@Base+0x35b8>
   15df4:	mov	r6, r3
   15df8:	add	r3, sp, #16
   15dfc:	str	r3, [sp]
   15e00:	add	r3, sp, #12
   15e04:	mov	r4, r1
   15e08:	mov	r8, r0
   15e0c:	mov	r7, r2
   15e10:	bl	20cbc <flatcc_json_parser_integer@@Base>
   15e14:	cmp	r4, r0
   15e18:	beq	15e6c <_start@@Base+0x35b8>
   15e1c:	ldr	r3, [sp, #12]
   15e20:	ldrd	r4, [sp, #16]
   15e24:	cmp	r3, #0
   15e28:	beq	15e4c <_start@@Base+0x3598>
   15e2c:	cmp	r5, #-2147483648	; 0x80000000
   15e30:	cmpeq	r4, #0
   15e34:	movhi	r3, #8
   15e38:	bhi	15e5c <_start@@Base+0x35a8>
   15e3c:	rsbs	r4, r4, #0
   15e40:	rsc	r5, r5, #0
   15e44:	strd	r4, [r6]
   15e48:	b	15e6c <_start@@Base+0x35b8>
   15e4c:	cmp	r4, #0
   15e50:	sbcs	r3, r5, #0
   15e54:	bge	15e44 <_start@@Base+0x3590>
   15e58:	mov	r3, #7
   15e5c:	mov	r1, r0
   15e60:	mov	r2, r7
   15e64:	mov	r0, r8
   15e68:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   15e6c:	add	sp, sp, #24
   15e70:	pop	{r4, r5, r6, r7, r8, pc}
   15e74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e78:	vpush	{d8-d9}
   15e7c:	mov	r8, r2
   15e80:	mov	r4, r0
   15e84:	mov	r9, r1
   15e88:	sub	sp, sp, #60	; 0x3c
   15e8c:	mov	r1, #36	; 0x24
   15e90:	str	r3, [sp, #20]
   15e94:	ldr	r2, [sp, #20]
   15e98:	mov	r3, #0
   15e9c:	ldr	r0, [r0]
   15ea0:	str	r3, [r2]
   15ea4:	bl	1d090 <flatcc_builder_start_table@@Base>
   15ea8:	cmp	r0, #0
   15eac:	bne	19274 <_start@@Base+0x69c0>
   15eb0:	add	r3, sp, #36	; 0x24
   15eb4:	str	r3, [sp]
   15eb8:	mov	r2, r8
   15ebc:	mov	r3, #1
   15ec0:	mov	r1, r9
   15ec4:	mov	r0, r4
   15ec8:	bl	21278 <flatcc_json_parser_prepare_unions@@Base>
   15ecc:	cmp	r8, r0
   15ed0:	beq	19274 <_start@@Base+0x69c0>
   15ed4:	mov	r1, r9
   15ed8:	add	r3, sp, #28
   15edc:	mov	r2, r8
   15ee0:	mov	r0, r4
   15ee4:	bl	14520 <_start@@Base+0x1c6c>
   15ee8:	vldr	d9, [pc, #936]	; 16298 <_start@@Base+0x39e4>
   15eec:	vldr	s16, [pc, #988]	; 162d0 <_start@@Base+0x3a1c>
   15ef0:	mov	r9, r0
   15ef4:	ldr	r3, [sp, #28]
   15ef8:	cmp	r3, #0
   15efc:	bne	15f3c <_start@@Base+0x3688>
   15f00:	ldr	r3, [r4, #24]
   15f04:	cmp	r3, #0
   15f08:	bne	19274 <_start@@Base+0x69c0>
   15f0c:	mov	r1, #3
   15f10:	ldr	r0, [r4]
   15f14:	bl	1d550 <flatcc_builder_check_required_field@@Base>
   15f18:	cmp	r0, #0
   15f1c:	bne	192d8 <_start@@Base+0x6a24>
   15f20:	mov	r1, r9
   15f24:	mov	r3, #29
   15f28:	mov	r2, r8
   15f2c:	mov	r0, r4
   15f30:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   15f34:	mov	r9, r0
   15f38:	b	19274 <_start@@Base+0x69c0>
   15f3c:	mov	r2, r8
   15f40:	mov	r1, r9
   15f44:	mov	r0, r4
   15f48:	bl	13830 <_start@@Base+0xf7c>
   15f4c:	mov	r1, r8
   15f50:	mov	r5, r0
   15f54:	bl	129e0 <_start@@Base+0x12c>
   15f58:	add	r3, pc, #832	; 0x340
   15f5c:	ldrd	r2, [r3]
   15f60:	cmp	r1, r3
   15f64:	cmpeq	r0, r2
   15f68:	mov	r6, r0
   15f6c:	mov	r7, r1
   15f70:	bhi	17088 <_start@@Base+0x47d4>
   15f74:	add	r3, pc, #812	; 0x32c
   15f78:	ldrd	r2, [r3]
   15f7c:	cmp	r1, r3
   15f80:	cmpeq	r0, r2
   15f84:	bhi	166cc <_start@@Base+0x3e18>
   15f88:	add	r3, pc, #800	; 0x320
   15f8c:	ldrd	r2, [r3]
   15f90:	cmp	r1, r3
   15f94:	cmpeq	r0, r2
   15f98:	bhi	1613c <_start@@Base+0x3888>
   15f9c:	add	r3, pc, #788	; 0x314
   15fa0:	ldrd	r2, [r3]
   15fa4:	and	r6, r0, #-16777216	; 0xff000000
   15fa8:	cmp	r1, r3
   15fac:	cmpeq	r6, r2
   15fb0:	bne	16044 <_start@@Base+0x3790>
   15fb4:	mov	r1, r5
   15fb8:	mov	r3, #5
   15fbc:	mov	r2, r8
   15fc0:	mov	r0, r4
   15fc4:	bl	14674 <_start@@Base+0x1dc0>
   15fc8:	cmp	r5, r0
   15fcc:	mov	r1, r0
   15fd0:	beq	1602c <_start@@Base+0x3778>
   15fd4:	add	r3, sp, #32
   15fd8:	mov	r2, r8
   15fdc:	mov	r0, r4
   15fe0:	bl	15e74 <_start@@Base+0x35c0>
   15fe4:	ldr	r3, [sp, #32]
   15fe8:	cmp	r3, #0
   15fec:	mov	r9, r0
   15ff0:	beq	19274 <_start@@Base+0x69c0>
   15ff4:	mov	r1, #12
   15ff8:	ldr	r0, [r4]
   15ffc:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   16000:	cmp	r0, #0
   16004:	beq	19274 <_start@@Base+0x69c0>
   16008:	ldr	r3, [sp, #32]
   1600c:	str	r3, [r0]
   16010:	mov	r1, r9
   16014:	add	r3, sp, #28
   16018:	mov	r2, r8
   1601c:	mov	r0, r4
   16020:	bl	13758 <_start@@Base+0xea4>
   16024:	mov	r9, r0
   16028:	b	15ef4 <_start@@Base+0x3640>
   1602c:	mov	r2, r8
   16030:	mov	r1, r5
   16034:	mov	r0, r4
   16038:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   1603c:	mov	r9, r0
   16040:	b	16010 <_start@@Base+0x375c>
   16044:	add	r3, pc, #628	; 0x274
   16048:	ldrd	r2, [r3]
   1604c:	cmp	r1, r3
   16050:	cmpeq	r6, r2
   16054:	bne	16124 <_start@@Base+0x3870>
   16058:	mov	r3, #5
   1605c:	mov	r2, r8
   16060:	mov	r1, r5
   16064:	mov	r0, r4
   16068:	bl	14674 <_start@@Base+0x1dc0>
   1606c:	cmp	r5, r0
   16070:	mov	r6, r0
   16074:	beq	1610c <_start@@Base+0x3858>
   16078:	add	r5, sp, #56	; 0x38
   1607c:	mov	r3, #0
   16080:	strb	r3, [r5, #-8]!
   16084:	mov	r1, r0
   16088:	mov	r3, r5
   1608c:	mov	r2, r8
   16090:	mov	r0, r4
   16094:	bl	14bf8 <_start@@Base+0x2344>
   16098:	cmp	r6, r0
   1609c:	mov	r9, r0
   160a0:	bne	160cc <_start@@Base+0x3818>
   160a4:	mov	r1, r0
   160a8:	str	r5, [sp]
   160ac:	ldr	r3, [pc, #544]	; 162d4 <_start@@Base+0x3a20>
   160b0:	mov	r2, r8
   160b4:	mov	r0, r4
   160b8:	bl	15060 <_start@@Base+0x27ac>
   160bc:	cmp	r8, r0
   160c0:	cmpne	r9, r0
   160c4:	mov	r9, r0
   160c8:	beq	19274 <_start@@Base+0x69c0>
   160cc:	ldrsb	r3, [sp, #48]	; 0x30
   160d0:	cmp	r3, #8
   160d4:	bne	160e4 <_start@@Base+0x3830>
   160d8:	ldr	r3, [r4, #8]
   160dc:	tst	r3, #2
   160e0:	beq	16010 <_start@@Base+0x375c>
   160e4:	mov	r3, #1
   160e8:	mov	r2, r3
   160ec:	mov	r1, #6
   160f0:	ldr	r0, [r4]
   160f4:	bl	1e050 <flatcc_builder_table_add@@Base>
   160f8:	cmp	r0, #0
   160fc:	beq	19274 <_start@@Base+0x69c0>
   16100:	ldrsb	r3, [sp, #48]	; 0x30
   16104:	strb	r3, [r0]
   16108:	b	16010 <_start@@Base+0x375c>
   1610c:	mov	r2, r8
   16110:	mov	r1, r5
   16114:	mov	r0, r4
   16118:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   1611c:	mov	r9, r0
   16120:	b	16010 <_start@@Base+0x375c>
   16124:	mov	r2, r8
   16128:	mov	r1, r5
   1612c:	mov	r0, r4
   16130:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   16134:	mov	r9, r0
   16138:	b	16010 <_start@@Base+0x375c>
   1613c:	ldr	r3, [pc, #404]	; 162d8 <_start@@Base+0x3a24>
   16140:	mvn	r2, #0
   16144:	cmp	r1, r3
   16148:	cmpeq	r0, r2
   1614c:	bhi	162f8 <_start@@Base+0x3a44>
   16150:	add	r3, pc, #368	; 0x170
   16154:	ldrd	r2, [r3]
   16158:	mov	r6, #0
   1615c:	cmp	r1, r3
   16160:	cmpeq	r6, r2
   16164:	bne	162e0 <_start@@Base+0x3a2c>
   16168:	mov	r3, #4
   1616c:	mov	r2, r8
   16170:	mov	r1, r5
   16174:	mov	r0, r4
   16178:	bl	14674 <_start@@Base+0x1dc0>
   1617c:	cmp	r5, r0
   16180:	mov	r9, r0
   16184:	beq	16280 <_start@@Base+0x39cc>
   16188:	mov	r2, #1
   1618c:	mvn	r3, #0
   16190:	mov	r1, r2
   16194:	ldr	r0, [r4]
   16198:	bl	1cf74 <flatcc_builder_start_vector@@Base>
   1619c:	subs	r5, r0, #0
   161a0:	bne	19274 <_start@@Base+0x69c0>
   161a4:	mov	r1, r9
   161a8:	add	r3, sp, #28
   161ac:	mov	r2, r8
   161b0:	mov	r0, r4
   161b4:	bl	1471c <_start@@Base+0x1e68>
   161b8:	ldr	r7, [pc, #284]	; 162dc <_start@@Base+0x3a28>
   161bc:	add	r6, sp, #48	; 0x30
   161c0:	mov	r9, r0
   161c4:	ldr	r3, [sp, #28]
   161c8:	cmp	r3, #0
   161cc:	bne	16204 <_start@@Base+0x3950>
   161d0:	ldr	r0, [r4]
   161d4:	bl	1d8ec <flatcc_builder_end_vector@@Base>
   161d8:	cmp	r0, #0
   161dc:	str	r0, [sp, #32]
   161e0:	beq	19274 <_start@@Base+0x69c0>
   161e4:	mov	r1, #30
   161e8:	ldr	r0, [r4]
   161ec:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   161f0:	cmp	r0, #0
   161f4:	beq	19274 <_start@@Base+0x69c0>
   161f8:	ldr	r3, [sp, #32]
   161fc:	str	r3, [r0]
   16200:	b	16010 <_start@@Base+0x375c>
   16204:	mov	r1, #1
   16208:	ldr	r0, [r4]
   1620c:	strb	r5, [sp, #48]	; 0x30
   16210:	bl	1ca9c <flatcc_builder_extend_vector@@Base>
   16214:	subs	sl, r0, #0
   16218:	beq	1926c <_start@@Base+0x69b8>
   1621c:	mov	r1, r9
   16220:	mov	r3, r6
   16224:	mov	r2, r8
   16228:	mov	r0, r4
   1622c:	bl	14968 <_start@@Base+0x20b4>
   16230:	cmp	r9, r0
   16234:	mov	r1, r0
   16238:	bne	16260 <_start@@Base+0x39ac>
   1623c:	str	r6, [sp]
   16240:	mov	r3, r7
   16244:	mov	r2, r8
   16248:	mov	r0, r4
   1624c:	bl	14ca0 <_start@@Base+0x23ec>
   16250:	cmp	r8, r0
   16254:	cmpne	r9, r0
   16258:	mov	r1, r0
   1625c:	beq	19270 <_start@@Base+0x69bc>
   16260:	ldrb	r3, [sp, #48]	; 0x30
   16264:	mov	r2, r8
   16268:	mov	r0, r4
   1626c:	strb	r3, [sl]
   16270:	add	r3, sp, #28
   16274:	bl	136a0 <_start@@Base+0xdec>
   16278:	mov	r9, r0
   1627c:	b	161c4 <_start@@Base+0x3910>
   16280:	mov	r1, r0
   16284:	mov	r2, r8
   16288:	mov	r0, r4
   1628c:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   16290:	mov	r9, r0
   16294:	b	16010 <_start@@Base+0x375c>
	...
   162a0:	cmnvs	r2, r0, ror #4
   162a4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   162a8:			; <UNDEFINED> instruction: 0xffffffff
   162ac:	cdpvs	13, 6, cr6, cr1, cr4, {3}
   162b0:			; <UNDEFINED> instruction: 0xffffffff
   162b4:			; <UNDEFINED> instruction: 0x666c6577
   162b8:	stmdbvc	r0, {}	; <UNPREDICTABLE>
   162bc:	strbvs	r6, [lr, #-1389]!	; 0xfffffa93
   162c0:	andvc	r0, r0, #0
   162c4:	cmnvs	pc, #28416	; 0x6f00
   162c8:	andeq	r0, r0, r0
   162cc:			; <UNDEFINED> instruction: 0x666c6578
   162d0:	andeq	r0, r0, r0
   162d4:	strheq	r4, [r3], -ip
   162d8:	stmdavs	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
   162dc:	andeq	r4, r3, ip, asr #1
   162e0:	mov	r2, r8
   162e4:	mov	r1, r5
   162e8:	mov	r0, r4
   162ec:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   162f0:	mov	r9, r0
   162f4:	b	16010 <_start@@Base+0x375c>
   162f8:	add	r3, pc, #928	; 0x3a0
   162fc:	ldrd	r2, [r3]
   16300:	cmp	r1, r3
   16304:	cmpeq	r0, r2
   16308:	bhi	1641c <_start@@Base+0x3b68>
   1630c:	ldr	r3, [pc, #932]	; 166b8 <_start@@Base+0x3e04>
   16310:	mov	r2, #0
   16314:	and	r3, r3, r1
   16318:	mov	r7, r3
   1631c:	ldr	r3, [pc, #920]	; 166bc <_start@@Base+0x3e08>
   16320:	and	r2, r2, r0
   16324:	mov	r6, r2
   16328:	cmp	r7, r3
   1632c:	mov	r2, #0
   16330:	cmpeq	r6, r2
   16334:	bne	16404 <_start@@Base+0x3b50>
   16338:	mov	r3, #2
   1633c:	mov	r2, r8
   16340:	mov	r1, r5
   16344:	mov	r0, r4
   16348:	bl	14674 <_start@@Base+0x1dc0>
   1634c:	cmp	r5, r0
   16350:	mov	r6, r0
   16354:	beq	163ec <_start@@Base+0x3b38>
   16358:	add	r5, sp, #56	; 0x38
   1635c:	mov	r3, #0
   16360:	strh	r3, [r5, #-8]!
   16364:	mov	r1, r0
   16368:	mov	r3, r5
   1636c:	mov	r2, r8
   16370:	mov	r0, r4
   16374:	bl	14b48 <_start@@Base+0x2294>
   16378:	cmp	r6, r0
   1637c:	mov	r9, r0
   16380:	bne	163ac <_start@@Base+0x3af8>
   16384:	mov	r1, r0
   16388:	str	r5, [sp]
   1638c:	ldr	r3, [pc, #812]	; 166c0 <_start@@Base+0x3e0c>
   16390:	mov	r2, r8
   16394:	mov	r0, r4
   16398:	bl	15940 <_start@@Base+0x308c>
   1639c:	cmp	r8, r0
   163a0:	cmpne	r9, r0
   163a4:	mov	r9, r0
   163a8:	beq	19274 <_start@@Base+0x69c0>
   163ac:	ldrsh	r3, [sp, #48]	; 0x30
   163b0:	cmp	r3, #100	; 0x64
   163b4:	bne	163c4 <_start@@Base+0x3b10>
   163b8:	ldr	r3, [r4, #8]
   163bc:	tst	r3, #2
   163c0:	beq	16010 <_start@@Base+0x375c>
   163c4:	mov	r3, #2
   163c8:	mov	r2, r3
   163cc:	mov	r1, r3
   163d0:	ldr	r0, [r4]
   163d4:	bl	1e050 <flatcc_builder_table_add@@Base>
   163d8:	cmp	r0, #0
   163dc:	beq	19274 <_start@@Base+0x69c0>
   163e0:	ldrsh	r3, [sp, #48]	; 0x30
   163e4:	strh	r3, [r0]
   163e8:	b	16010 <_start@@Base+0x375c>
   163ec:	mov	r2, r8
   163f0:	mov	r1, r5
   163f4:	mov	r0, r4
   163f8:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   163fc:	mov	r9, r0
   16400:	b	16010 <_start@@Base+0x375c>
   16404:	mov	r2, r8
   16408:	mov	r1, r5
   1640c:	mov	r0, r4
   16410:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   16414:	mov	r9, r0
   16418:	b	16010 <_start@@Base+0x375c>
   1641c:	add	r3, pc, #644	; 0x284
   16420:	ldrd	r2, [r3]
   16424:	cmp	r1, r3
   16428:	cmpeq	r0, r2
   1642c:	bne	165a0 <_start@@Base+0x3cec>
   16430:	add	r5, r5, #8
   16434:	mov	r1, r8
   16438:	mov	r0, r5
   1643c:	bl	129e0 <_start@@Base+0x12c>
   16440:	mov	r0, #0
   16444:	and	r1, r1, #-16777216	; 0xff000000
   16448:	cmp	r1, #2030043136	; 0x79000000
   1644c:	cmpeq	r0, #0
   16450:	bne	16588 <_start@@Base+0x3cd4>
   16454:	mov	r3, #1
   16458:	mov	r2, r8
   1645c:	mov	r1, r5
   16460:	mov	r0, r4
   16464:	bl	14674 <_start@@Base+0x1dc0>
   16468:	cmp	r5, r0
   1646c:	mov	r9, r0
   16470:	beq	16570 <_start@@Base+0x3cbc>
   16474:	mov	r2, #1
   16478:	mvn	r3, #0
   1647c:	mov	r1, r2
   16480:	ldr	r0, [r4]
   16484:	bl	1cf74 <flatcc_builder_start_vector@@Base>
   16488:	cmp	r0, #0
   1648c:	bne	19274 <_start@@Base+0x69c0>
   16490:	mov	r1, r9
   16494:	add	r3, sp, #28
   16498:	mov	r2, r8
   1649c:	mov	r0, r4
   164a0:	bl	1471c <_start@@Base+0x1e68>
   164a4:	ldr	r7, [pc, #536]	; 166c4 <_start@@Base+0x3e10>
   164a8:	mov	r6, #0
   164ac:	add	r5, sp, #48	; 0x30
   164b0:	mov	r9, r0
   164b4:	ldr	r3, [sp, #28]
   164b8:	cmp	r3, #0
   164bc:	bne	164f4 <_start@@Base+0x3c40>
   164c0:	ldr	r0, [r4]
   164c4:	bl	1d8ec <flatcc_builder_end_vector@@Base>
   164c8:	cmp	r0, #0
   164cc:	str	r0, [sp, #32]
   164d0:	beq	19274 <_start@@Base+0x69c0>
   164d4:	mov	r1, #5
   164d8:	ldr	r0, [r4]
   164dc:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   164e0:	cmp	r0, #0
   164e4:	beq	19274 <_start@@Base+0x69c0>
   164e8:	ldr	r3, [sp, #32]
   164ec:	str	r3, [r0]
   164f0:	b	16010 <_start@@Base+0x375c>
   164f4:	mov	r1, #1
   164f8:	ldr	r0, [r4]
   164fc:	strb	r6, [sp, #48]	; 0x30
   16500:	bl	1ca9c <flatcc_builder_extend_vector@@Base>
   16504:	subs	sl, r0, #0
   16508:	beq	1926c <_start@@Base+0x69b8>
   1650c:	mov	r1, r9
   16510:	mov	r3, r5
   16514:	mov	r2, r8
   16518:	mov	r0, r4
   1651c:	bl	14968 <_start@@Base+0x20b4>
   16520:	cmp	r9, r0
   16524:	mov	r1, r0
   16528:	bne	16550 <_start@@Base+0x3c9c>
   1652c:	str	r5, [sp]
   16530:	mov	r3, r7
   16534:	mov	r2, r8
   16538:	mov	r0, r4
   1653c:	bl	14ca0 <_start@@Base+0x23ec>
   16540:	cmp	r8, r0
   16544:	cmpne	r9, r0
   16548:	mov	r1, r0
   1654c:	beq	19270 <_start@@Base+0x69bc>
   16550:	ldrb	r3, [sp, #48]	; 0x30
   16554:	mov	r2, r8
   16558:	mov	r0, r4
   1655c:	strb	r3, [sl]
   16560:	add	r3, sp, #28
   16564:	bl	136a0 <_start@@Base+0xdec>
   16568:	mov	r9, r0
   1656c:	b	164b4 <_start@@Base+0x3c00>
   16570:	mov	r1, r0
   16574:	mov	r2, r8
   16578:	mov	r0, r4
   1657c:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   16580:	mov	r9, r0
   16584:	b	16010 <_start@@Base+0x375c>
   16588:	mov	r2, r8
   1658c:	mov	r1, r5
   16590:	mov	r0, r4
   16594:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   16598:	mov	r9, r0
   1659c:	b	16010 <_start@@Base+0x375c>
   165a0:	add	r3, pc, #264	; 0x108
   165a4:	ldrd	r2, [r3]
   165a8:	mov	r6, #0
   165ac:	cmp	r1, r3
   165b0:	cmpeq	r6, r2
   165b4:	bne	16684 <_start@@Base+0x3dd0>
   165b8:	mov	r3, #4
   165bc:	mov	r2, r8
   165c0:	mov	r1, r5
   165c4:	mov	r0, r4
   165c8:	bl	14674 <_start@@Base+0x1dc0>
   165cc:	cmp	r5, r0
   165d0:	mov	r6, r0
   165d4:	beq	1666c <_start@@Base+0x3db8>
   165d8:	add	r5, sp, #56	; 0x38
   165dc:	mov	r3, #0
   165e0:	strh	r3, [r5, #-8]!
   165e4:	mov	r1, r0
   165e8:	mov	r3, r5
   165ec:	mov	r2, r8
   165f0:	mov	r0, r4
   165f4:	bl	14b48 <_start@@Base+0x2294>
   165f8:	cmp	r6, r0
   165fc:	mov	r9, r0
   16600:	bne	1662c <_start@@Base+0x3d78>
   16604:	mov	r1, r0
   16608:	str	r5, [sp]
   1660c:	ldr	r3, [pc, #180]	; 166c8 <_start@@Base+0x3e14>
   16610:	mov	r2, r8
   16614:	mov	r0, r4
   16618:	bl	15940 <_start@@Base+0x308c>
   1661c:	cmp	r8, r0
   16620:	cmpne	r9, r0
   16624:	mov	r9, r0
   16628:	beq	19274 <_start@@Base+0x69c0>
   1662c:	ldrsh	r3, [sp, #48]	; 0x30
   16630:	cmp	r3, #150	; 0x96
   16634:	bne	16644 <_start@@Base+0x3d90>
   16638:	ldr	r3, [r4, #8]
   1663c:	tst	r3, #2
   16640:	beq	16010 <_start@@Base+0x375c>
   16644:	mov	r3, #2
   16648:	mov	r2, r3
   1664c:	mov	r1, #1
   16650:	ldr	r0, [r4]
   16654:	bl	1e050 <flatcc_builder_table_add@@Base>
   16658:	cmp	r0, #0
   1665c:	beq	19274 <_start@@Base+0x69c0>
   16660:	ldrsh	r3, [sp, #48]	; 0x30
   16664:	strh	r3, [r0]
   16668:	b	16010 <_start@@Base+0x375c>
   1666c:	mov	r2, r8
   16670:	mov	r1, r5
   16674:	mov	r0, r4
   16678:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   1667c:	mov	r9, r0
   16680:	b	16010 <_start@@Base+0x375c>
   16684:	mov	r2, r8
   16688:	mov	r1, r5
   1668c:	mov	r0, r4
   16690:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   16694:	mov	r9, r0
   16698:	b	16010 <_start@@Base+0x375c>
   1669c:	nop			; (mov r0, r0)
   166a0:	mrcvs	15, 3, r6, cr4, cr1, {3}
   166a4:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   166a8:	mrcvs	15, 3, r6, cr4, cr2, {3}
   166ac:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   166b0:	andeq	r0, r0, r0
   166b4:	stclvs	14, cr6, [r1, #-388]!	; 0xfffffe7c
   166b8:			; <UNDEFINED> instruction: 0xffff0000
   166bc:	ldmdavs	r0!, {}^	; <UNPREDICTABLE>
   166c0:	ldrdeq	r4, [r3], -r8
   166c4:	andeq	r4, r3, r4, ror #1
   166c8:	strdeq	r4, [r3], -r0
   166cc:	add	r3, pc, #956	; 0x3bc
   166d0:	ldrd	r2, [r3]
   166d4:	cmp	r1, r3
   166d8:	cmpeq	r0, r2
   166dc:	bhi	16d60 <_start@@Base+0x44ac>
   166e0:	add	r3, pc, #944	; 0x3b0
   166e4:	ldrd	r2, [r3]
   166e8:	cmp	r1, r3
   166ec:	cmpeq	r0, r2
   166f0:	bhi	1679c <_start@@Base+0x3ee8>
   166f4:	add	r3, pc, #932	; 0x3a4
   166f8:	ldrd	r2, [r3]
   166fc:	mov	r6, #0
   16700:	cmp	r1, r3
   16704:	cmpeq	r6, r2
   16708:	bne	16784 <_start@@Base+0x3ed0>
   1670c:	mov	r1, r5
   16710:	mov	r3, #4
   16714:	mov	r2, r8
   16718:	mov	r0, r4
   1671c:	bl	14674 <_start@@Base+0x1dc0>
   16720:	cmp	r5, r0
   16724:	mov	r1, r0
   16728:	beq	1676c <_start@@Base+0x3eb8>
   1672c:	add	r3, sp, #32
   16730:	mov	r2, r8
   16734:	mov	r0, r4
   16738:	bl	21140 <flatcc_json_parser_build_string@@Base>
   1673c:	ldr	r3, [sp, #32]
   16740:	cmp	r3, #0
   16744:	mov	r9, r0
   16748:	beq	19274 <_start@@Base+0x69c0>
   1674c:	mov	r1, #3
   16750:	ldr	r0, [r4]
   16754:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   16758:	cmp	r0, #0
   1675c:	beq	19274 <_start@@Base+0x69c0>
   16760:	ldr	r3, [sp, #32]
   16764:	str	r3, [r0]
   16768:	b	16010 <_start@@Base+0x375c>
   1676c:	mov	r2, r8
   16770:	mov	r1, r5
   16774:	mov	r0, r4
   16778:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   1677c:	mov	r9, r0
   16780:	b	16010 <_start@@Base+0x375c>
   16784:	mov	r2, r8
   16788:	mov	r1, r5
   1678c:	mov	r0, r4
   16790:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   16794:	mov	r9, r0
   16798:	b	16010 <_start@@Base+0x375c>
   1679c:	add	r3, pc, #772	; 0x304
   167a0:	ldrd	r2, [r3]
   167a4:	cmp	r1, r3
   167a8:	cmpeq	r0, r2
   167ac:	bne	168a4 <_start@@Base+0x3ff0>
   167b0:	add	r6, r5, #8
   167b4:	mov	r1, r8
   167b8:	mov	r0, r6
   167bc:	bl	129e0 <_start@@Base+0x12c>
   167c0:	add	r3, pc, #744	; 0x2e8
   167c4:	ldrd	r2, [r3]
   167c8:	cmp	r1, r3
   167cc:	cmpeq	r0, r2
   167d0:	bne	1688c <_start@@Base+0x3fd8>
   167d4:	add	r5, r5, #16
   167d8:	mov	r1, r8
   167dc:	mov	r0, r5
   167e0:	bl	129e0 <_start@@Base+0x12c>
   167e4:	add	r3, pc, #716	; 0x2cc
   167e8:	ldrd	r2, [r3]
   167ec:	and	r0, r0, #-16777216	; 0xff000000
   167f0:	cmp	r1, r3
   167f4:	cmpeq	r0, r2
   167f8:	bne	16874 <_start@@Base+0x3fc0>
   167fc:	mov	r1, r5
   16800:	mov	r3, #5
   16804:	mov	r2, r8
   16808:	mov	r0, r4
   1680c:	bl	14674 <_start@@Base+0x1dc0>
   16810:	cmp	r5, r0
   16814:	mov	r1, r0
   16818:	beq	1685c <_start@@Base+0x3fa8>
   1681c:	add	r3, sp, #32
   16820:	mov	r2, r8
   16824:	mov	r0, r4
   16828:	bl	145a8 <_start@@Base+0x1cf4>
   1682c:	ldr	r3, [sp, #32]
   16830:	cmp	r3, #0
   16834:	mov	r9, r0
   16838:	beq	19274 <_start@@Base+0x69c0>
   1683c:	mov	r1, #34	; 0x22
   16840:	ldr	r0, [r4]
   16844:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   16848:	cmp	r0, #0
   1684c:	beq	19274 <_start@@Base+0x69c0>
   16850:	ldr	r3, [sp, #32]
   16854:	str	r3, [r0]
   16858:	b	16010 <_start@@Base+0x375c>
   1685c:	mov	r2, r8
   16860:	mov	r1, r5
   16864:	mov	r0, r4
   16868:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   1686c:	mov	r9, r0
   16870:	b	16010 <_start@@Base+0x375c>
   16874:	mov	r2, r8
   16878:	mov	r1, r5
   1687c:	mov	r0, r4
   16880:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   16884:	mov	r9, r0
   16888:	b	16010 <_start@@Base+0x375c>
   1688c:	mov	r2, r8
   16890:	mov	r1, r6
   16894:	mov	r0, r4
   16898:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   1689c:	mov	r9, r0
   168a0:	b	16010 <_start@@Base+0x375c>
   168a4:	add	r3, pc, #532	; 0x214
   168a8:	ldrd	r2, [r3]
   168ac:	bic	r7, r1, #255	; 0xff
   168b0:	mov	r6, #0
   168b4:	cmp	r7, r3
   168b8:	cmpeq	r6, r2
   168bc:	bne	16d48 <_start@@Base+0x4494>
   168c0:	mov	r3, #3
   168c4:	mov	r2, r8
   168c8:	mov	r1, r5
   168cc:	mov	r0, r4
   168d0:	bl	14674 <_start@@Base+0x1dc0>
   168d4:	cmp	r5, r0
   168d8:	mov	r9, r0
   168dc:	beq	16d30 <_start@@Base+0x447c>
   168e0:	mov	r3, #16
   168e4:	mov	r2, #32
   168e8:	mov	r1, #0
   168ec:	ldr	r0, [r4]
   168f0:	bl	1e050 <flatcc_builder_table_add@@Base>
   168f4:	subs	sl, r0, #0
   168f8:	beq	19274 <_start@@Base+0x69c0>
   168fc:	mov	r1, r9
   16900:	add	r3, sp, #44	; 0x2c
   16904:	mov	r2, r8
   16908:	mov	r0, r4
   1690c:	bl	14520 <_start@@Base+0x1c6c>
   16910:	add	r7, pc, #432	; 0x1b0
   16914:	ldrd	r6, [r7]
   16918:	mov	r9, r0
   1691c:	ldr	r3, [sp, #44]	; 0x2c
   16920:	cmp	r3, #0
   16924:	beq	16010 <_start@@Base+0x375c>
   16928:	mov	r2, r8
   1692c:	mov	r1, r9
   16930:	mov	r0, r4
   16934:	bl	13830 <_start@@Base+0xf7c>
   16938:	mov	r1, r8
   1693c:	mov	r5, r0
   16940:	bl	129e0 <_start@@Base+0x12c>
   16944:	cmp	r1, r7
   16948:	cmpeq	r0, r6
   1694c:	bhi	16ae8 <_start@@Base+0x4234>
   16950:	add	r3, pc, #376	; 0x178
   16954:	ldrd	r2, [r3]
   16958:	and	r0, r0, #-16777216	; 0xff000000
   1695c:	cmp	r1, r3
   16960:	cmpeq	r0, r2
   16964:	bne	16a00 <_start@@Base+0x414c>
   16968:	mov	r3, #5
   1696c:	mov	r2, r8
   16970:	mov	r1, r5
   16974:	mov	r0, r4
   16978:	bl	14674 <_start@@Base+0x1dc0>
   1697c:	cmp	r5, r0
   16980:	mov	r9, r0
   16984:	beq	16d00 <_start@@Base+0x444c>
   16988:	add	fp, sp, #56	; 0x38
   1698c:	mov	r3, #0
   16990:	strb	r3, [fp, #-8]!
   16994:	mov	r1, r0
   16998:	mov	r3, fp
   1699c:	mov	r2, r8
   169a0:	mov	r0, r4
   169a4:	bl	14bf8 <_start@@Base+0x2344>
   169a8:	cmp	r9, r0
   169ac:	mov	r5, r0
   169b0:	bne	169dc <_start@@Base+0x4128>
   169b4:	mov	r1, r0
   169b8:	str	fp, [sp]
   169bc:	ldr	r3, [pc, #284]	; 16ae0 <_start@@Base+0x422c>
   169c0:	mov	r2, r8
   169c4:	mov	r0, r4
   169c8:	bl	15060 <_start@@Base+0x27ac>
   169cc:	cmp	r8, r0
   169d0:	cmpne	r5, r0
   169d4:	beq	16d14 <_start@@Base+0x4460>
   169d8:	mov	r5, r0
   169dc:	ldrsb	r3, [sp, #48]	; 0x30
   169e0:	strb	r3, [sl, #24]
   169e4:	add	r3, sp, #44	; 0x2c
   169e8:	mov	r2, r8
   169ec:	mov	r1, r5
   169f0:	mov	r0, r4
   169f4:	bl	13758 <_start@@Base+0xea4>
   169f8:	mov	r9, r0
   169fc:	b	1691c <_start@@Base+0x4068>
   16a00:	add	r3, pc, #208	; 0xd0
   16a04:	ldrd	r2, [r3]
   16a08:	cmp	r1, r3
   16a0c:	cmpeq	r0, r2
   16a10:	bne	16d00 <_start@@Base+0x444c>
   16a14:	mov	r3, #5
   16a18:	mov	r2, r8
   16a1c:	mov	r1, r5
   16a20:	mov	r0, r4
   16a24:	bl	14674 <_start@@Base+0x1dc0>
   16a28:	cmp	r5, r0
   16a2c:	mov	r9, r0
   16a30:	beq	16d00 <_start@@Base+0x444c>
   16a34:	add	fp, sp, #56	; 0x38
   16a38:	mov	r1, r0
   16a3c:	vstmdb	fp!, {d9}
   16a40:	mov	r2, r8
   16a44:	mov	r0, r4
   16a48:	mov	r3, fp
   16a4c:	bl	20550 <flatcc_json_parser_double@@Base>
   16a50:	cmp	r9, r0
   16a54:	mov	r5, r0
   16a58:	bne	16a84 <_start@@Base+0x41d0>
   16a5c:	mov	r1, r0
   16a60:	str	fp, [sp]
   16a64:	ldr	r3, [pc, #120]	; 16ae4 <_start@@Base+0x4230>
   16a68:	mov	r2, r8
   16a6c:	mov	r0, r4
   16a70:	bl	13afc <_start@@Base+0x1248>
   16a74:	cmp	r8, r0
   16a78:	cmpne	r5, r0
   16a7c:	beq	16d14 <_start@@Base+0x4460>
   16a80:	mov	r5, r0
   16a84:	ldrd	r2, [sp, #48]	; 0x30
   16a88:	strd	r2, [sl, #16]
   16a8c:	b	169e4 <_start@@Base+0x4130>
   16a90:			; <UNDEFINED> instruction: 0xffffffff
   16a94:	strbtvc	r7, [r5], #-883	; 0xfffffc8d
   16a98:	cdpvs	15, 7, cr5, cr4, cr13, {3}
   16a9c:	rsbvc	r7, r1, r5, ror #4
   16aa0:	andeq	r0, r0, r0
   16aa4:	cdpvs	13, 6, cr6, cr1, cr5, {3}
   16aa8:	cdpvs	15, 7, cr5, cr4, cr14, {3}
   16aac:	rsbvc	r7, r1, r5, ror #4
   16ab0:	rsbvc	r6, r1, r5, ror #6
   16ab4:	smcvs	54867	; 0xd653
   16ab8:	strvc	r0, [r0], #-0
   16abc:	svcpl	0x00746573
   16ac0:	andeq	r0, r0, r0
   16ac4:	rsbvc	r7, pc, r0, lsl #6
   16ac8:	rscscc	pc, pc, #1020	; 0x3fc
   16acc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   16ad0:	andcc	r0, r0, #0
   16ad4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   16ad8:	mrscc	r0, (UNDEF: 0)
   16adc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   16ae0:	strdeq	r4, [r3], -ip
   16ae4:	andeq	r4, r3, ip, lsl #2
   16ae8:	mvn	r3, #-2013265920	; 0x88000000
   16aec:	mvn	r2, #0
   16af0:	cmp	r1, r3
   16af4:	cmpeq	r0, r2
   16af8:	bhi	16b4c <_start@@Base+0x4298>
   16afc:	add	r3, pc, #932	; 0x3a4
   16b00:	ldrd	r2, [r3]
   16b04:	and	r0, r0, #-16777216	; 0xff000000
   16b08:	cmp	r1, r3
   16b0c:	cmpeq	r0, r2
   16b10:	bne	16d00 <_start@@Base+0x444c>
   16b14:	mov	r1, r5
   16b18:	mov	r3, #5
   16b1c:	mov	r2, r8
   16b20:	mov	r0, r4
   16b24:	bl	14674 <_start@@Base+0x1dc0>
   16b28:	cmp	r5, r0
   16b2c:	mov	r1, r0
   16b30:	beq	16d00 <_start@@Base+0x444c>
   16b34:	add	r3, sl, #26
   16b38:	mov	r2, r8
   16b3c:	mov	r0, r4
   16b40:	bl	15aa0 <_start@@Base+0x31ec>
   16b44:	mov	r5, r0
   16b48:	b	169e4 <_start@@Base+0x4130>
   16b4c:	mvn	r3, #-2030043136	; 0x87000000
   16b50:	mvn	r2, #0
   16b54:	cmp	r1, r3
   16b58:	cmpeq	r0, r2
   16b5c:	bhi	16be0 <_start@@Base+0x432c>
   16b60:	mov	r3, #1
   16b64:	mov	r2, r8
   16b68:	mov	r1, r5
   16b6c:	mov	r0, r4
   16b70:	bl	14674 <_start@@Base+0x1dc0>
   16b74:	cmp	r5, r0
   16b78:	mov	r9, r0
   16b7c:	beq	16d00 <_start@@Base+0x444c>
   16b80:	vmov	r3, s16
   16b84:	add	fp, sp, #56	; 0x38
   16b88:	mov	r1, r0
   16b8c:	mov	r2, r8
   16b90:	str	r3, [fp, #-8]!
   16b94:	mov	r0, r4
   16b98:	mov	r3, fp
   16b9c:	bl	20620 <flatcc_json_parser_float@@Base>
   16ba0:	cmp	r9, r0
   16ba4:	mov	r5, r0
   16ba8:	bne	16bd4 <_start@@Base+0x4320>
   16bac:	mov	r1, r0
   16bb0:	str	fp, [sp]
   16bb4:	ldr	r3, [pc, #764]	; 16eb8 <_start@@Base+0x4604>
   16bb8:	mov	r2, r8
   16bbc:	mov	r0, r4
   16bc0:	bl	139f4 <_start@@Base+0x1140>
   16bc4:	cmp	r8, r0
   16bc8:	cmpne	r5, r0
   16bcc:	beq	16d14 <_start@@Base+0x4460>
   16bd0:	mov	r5, r0
   16bd4:	ldr	r3, [sp, #48]	; 0x30
   16bd8:	str	r3, [sl]
   16bdc:	b	169e4 <_start@@Base+0x4130>
   16be0:	and	r1, r1, #-16777216	; 0xff000000
   16be4:	mov	r0, #0
   16be8:	cmp	r1, #2046820352	; 0x7a000000
   16bec:	cmpeq	r0, #0
   16bf0:	bne	16c74 <_start@@Base+0x43c0>
   16bf4:	mov	r3, #1
   16bf8:	mov	r2, r8
   16bfc:	mov	r1, r5
   16c00:	mov	r0, r4
   16c04:	bl	14674 <_start@@Base+0x1dc0>
   16c08:	cmp	r5, r0
   16c0c:	mov	r9, r0
   16c10:	beq	16d00 <_start@@Base+0x444c>
   16c14:	vmov	r3, s16
   16c18:	add	fp, sp, #56	; 0x38
   16c1c:	mov	r1, r0
   16c20:	mov	r2, r8
   16c24:	str	r3, [fp, #-8]!
   16c28:	mov	r0, r4
   16c2c:	mov	r3, fp
   16c30:	bl	20620 <flatcc_json_parser_float@@Base>
   16c34:	cmp	r9, r0
   16c38:	mov	r5, r0
   16c3c:	bne	16c68 <_start@@Base+0x43b4>
   16c40:	mov	r1, r0
   16c44:	str	fp, [sp]
   16c48:	ldr	r3, [pc, #620]	; 16ebc <_start@@Base+0x4608>
   16c4c:	mov	r2, r8
   16c50:	mov	r0, r4
   16c54:	bl	139f4 <_start@@Base+0x1140>
   16c58:	cmp	r8, r0
   16c5c:	cmpne	r5, r0
   16c60:	beq	16d14 <_start@@Base+0x4460>
   16c64:	mov	r5, r0
   16c68:	ldr	r3, [sp, #48]	; 0x30
   16c6c:	str	r3, [sl, #8]
   16c70:	b	169e4 <_start@@Base+0x4130>
   16c74:	cmp	r1, #2030043136	; 0x79000000
   16c78:	cmpeq	r0, #0
   16c7c:	bne	16d00 <_start@@Base+0x444c>
   16c80:	mov	r3, #1
   16c84:	mov	r2, r8
   16c88:	mov	r1, r5
   16c8c:	mov	r0, r4
   16c90:	bl	14674 <_start@@Base+0x1dc0>
   16c94:	cmp	r5, r0
   16c98:	mov	r9, r0
   16c9c:	beq	16d00 <_start@@Base+0x444c>
   16ca0:	vmov	r3, s16
   16ca4:	add	fp, sp, #56	; 0x38
   16ca8:	mov	r1, r0
   16cac:	mov	r2, r8
   16cb0:	str	r3, [fp, #-8]!
   16cb4:	mov	r0, r4
   16cb8:	mov	r3, fp
   16cbc:	bl	20620 <flatcc_json_parser_float@@Base>
   16cc0:	cmp	r9, r0
   16cc4:	mov	r5, r0
   16cc8:	bne	16cf4 <_start@@Base+0x4440>
   16ccc:	mov	r1, r0
   16cd0:	str	fp, [sp]
   16cd4:	ldr	r3, [pc, #484]	; 16ec0 <_start@@Base+0x460c>
   16cd8:	mov	r2, r8
   16cdc:	mov	r0, r4
   16ce0:	bl	139f4 <_start@@Base+0x1140>
   16ce4:	cmp	r8, r0
   16ce8:	cmpne	r5, r0
   16cec:	beq	16d14 <_start@@Base+0x4460>
   16cf0:	mov	r5, r0
   16cf4:	ldr	r3, [sp, #48]	; 0x30
   16cf8:	str	r3, [sl, #4]
   16cfc:	b	169e4 <_start@@Base+0x4130>
   16d00:	mov	r2, r8
   16d04:	mov	r1, r5
   16d08:	mov	r0, r4
   16d0c:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   16d10:	b	16b44 <_start@@Base+0x4290>
   16d14:	mov	r1, r0
   16d18:	mov	r3, #33	; 0x21
   16d1c:	mov	r2, r8
   16d20:	mov	r0, r4
   16d24:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   16d28:	mov	r9, r0
   16d2c:	b	16010 <_start@@Base+0x375c>
   16d30:	mov	r1, r0
   16d34:	mov	r2, r8
   16d38:	mov	r0, r4
   16d3c:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   16d40:	mov	r9, r0
   16d44:	b	16010 <_start@@Base+0x375c>
   16d48:	mov	r2, r8
   16d4c:	mov	r1, r5
   16d50:	mov	r0, r4
   16d54:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   16d58:	mov	r9, r0
   16d5c:	b	16010 <_start@@Base+0x375c>
   16d60:	add	r3, pc, #328	; 0x148
   16d64:	ldrd	r2, [r3]
   16d68:	and	sl, r0, #-16777216	; 0xff000000
   16d6c:	cmp	r1, r3
   16d70:	cmpeq	sl, r2
   16d74:	bne	16e50 <_start@@Base+0x459c>
   16d78:	mov	r3, #5
   16d7c:	mov	r2, r8
   16d80:	mov	r1, r5
   16d84:	mov	r0, r4
   16d88:	bl	14674 <_start@@Base+0x1dc0>
   16d8c:	cmp	r5, r0
   16d90:	mov	r9, r0
   16d94:	beq	17070 <_start@@Base+0x47bc>
   16d98:	mvn	r3, #-1073741824	; 0xc0000000
   16d9c:	mov	r2, #2
   16da0:	mov	r1, #4
   16da4:	ldr	r0, [r4]
   16da8:	bl	1cf74 <flatcc_builder_start_vector@@Base>
   16dac:	cmp	r0, #0
   16db0:	bne	19274 <_start@@Base+0x69c0>
   16db4:	mov	r1, r9
   16db8:	add	r3, sp, #28
   16dbc:	mov	r2, r8
   16dc0:	mov	r0, r4
   16dc4:	bl	1471c <_start@@Base+0x1e68>
   16dc8:	mov	r5, #1
   16dcc:	mov	r9, r0
   16dd0:	ldr	r3, [sp, #28]
   16dd4:	cmp	r3, #0
   16dd8:	bne	16e10 <_start@@Base+0x455c>
   16ddc:	ldr	r0, [r4]
   16de0:	bl	1d8ec <flatcc_builder_end_vector@@Base>
   16de4:	cmp	r0, #0
   16de8:	str	r0, [sp, #32]
   16dec:	beq	19274 <_start@@Base+0x69c0>
   16df0:	mov	r1, #9
   16df4:	ldr	r0, [r4]
   16df8:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   16dfc:	cmp	r0, #0
   16e00:	beq	19274 <_start@@Base+0x69c0>
   16e04:	ldr	r3, [sp, #32]
   16e08:	str	r3, [r0]
   16e0c:	b	16010 <_start@@Base+0x375c>
   16e10:	mov	r1, r5
   16e14:	ldr	r0, [r4]
   16e18:	bl	1ca9c <flatcc_builder_extend_vector@@Base>
   16e1c:	subs	r3, r0, #0
   16e20:	beq	19274 <_start@@Base+0x69c0>
   16e24:	mov	r1, r9
   16e28:	mov	r2, r8
   16e2c:	mov	r0, r4
   16e30:	bl	15aa0 <_start@@Base+0x31ec>
   16e34:	add	r3, sp, #28
   16e38:	mov	r2, r8
   16e3c:	mov	r1, r0
   16e40:	mov	r0, r4
   16e44:	bl	136a0 <_start@@Base+0xdec>
   16e48:	mov	r9, r0
   16e4c:	b	16dd0 <_start@@Base+0x451c>
   16e50:	mov	r3, #4
   16e54:	mov	r2, r8
   16e58:	mov	r1, r5
   16e5c:	mov	r0, r4
   16e60:	bl	14674 <_start@@Base+0x1dc0>
   16e64:	cmp	r5, r0
   16e68:	mov	r9, r0
   16e6c:	beq	16ec8 <_start@@Base+0x4614>
   16e70:	ldr	r3, [pc, #76]	; 16ec4 <_start@@Base+0x4610>
   16e74:	mov	r1, r0
   16e78:	str	r3, [sp, #8]
   16e7c:	ldr	r3, [sp, #36]	; 0x24
   16e80:	mov	r2, r8
   16e84:	str	r3, [sp, #4]
   16e88:	mov	r3, #8
   16e8c:	str	r3, [sp]
   16e90:	mov	r0, r4
   16e94:	mov	r3, #0
   16e98:	bl	21338 <flatcc_json_parser_union@@Base>
   16e9c:	mov	r9, r0
   16ea0:	b	16010 <_start@@Base+0x375c>
   16ea4:	nop			; (mov r0, r0)
   16ea8:	movwcc	r0, #0
   16eac:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   16eb0:	strcc	r0, [r0], #-0
   16eb4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   16eb8:	andeq	r4, r3, r8, lsl r1
   16ebc:	andeq	r4, r3, r4, lsr #2
   16ec0:	andeq	r4, r3, r0, lsr r1
   16ec4:	andeq	r9, r1, r0, asr #6
   16ec8:	add	r3, pc, #816	; 0x330
   16ecc:	ldrd	r2, [r3]
   16ed0:	cmp	r7, r3
   16ed4:	cmpeq	sl, r2
   16ed8:	bne	16fb4 <_start@@Base+0x4700>
   16edc:	mov	r1, r0
   16ee0:	mov	r3, #5
   16ee4:	mov	r2, r8
   16ee8:	mov	r0, r4
   16eec:	bl	14674 <_start@@Base+0x1dc0>
   16ef0:	cmp	r9, r0
   16ef4:	mov	r5, r0
   16ef8:	beq	17070 <_start@@Base+0x47bc>
   16efc:	mvn	r3, #-1073741824	; 0xc0000000
   16f00:	mov	r2, #2
   16f04:	mov	r1, #4
   16f08:	ldr	r0, [r4]
   16f0c:	bl	1cf74 <flatcc_builder_start_vector@@Base>
   16f10:	cmp	r0, #0
   16f14:	bne	19318 <_start@@Base+0x6a64>
   16f18:	mov	r1, r5
   16f1c:	add	r3, sp, #28
   16f20:	mov	r2, r8
   16f24:	mov	r0, r4
   16f28:	bl	1471c <_start@@Base+0x1e68>
   16f2c:	mov	r5, #1
   16f30:	mov	r9, r0
   16f34:	ldr	r3, [sp, #28]
   16f38:	cmp	r3, #0
   16f3c:	bne	16f74 <_start@@Base+0x46c0>
   16f40:	ldr	r0, [r4]
   16f44:	bl	1d8ec <flatcc_builder_end_vector@@Base>
   16f48:	cmp	r0, #0
   16f4c:	str	r0, [sp, #32]
   16f50:	beq	19274 <_start@@Base+0x69c0>
   16f54:	mov	r1, #31
   16f58:	ldr	r0, [r4]
   16f5c:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   16f60:	cmp	r0, #0
   16f64:	beq	19274 <_start@@Base+0x69c0>
   16f68:	ldr	r3, [sp, #32]
   16f6c:	str	r3, [r0]
   16f70:	b	16010 <_start@@Base+0x375c>
   16f74:	mov	r1, r5
   16f78:	ldr	r0, [r4]
   16f7c:	bl	1ca9c <flatcc_builder_extend_vector@@Base>
   16f80:	subs	r3, r0, #0
   16f84:	beq	19274 <_start@@Base+0x69c0>
   16f88:	mov	r1, r9
   16f8c:	mov	r2, r8
   16f90:	mov	r0, r4
   16f94:	bl	15aa0 <_start@@Base+0x31ec>
   16f98:	add	r3, sp, #28
   16f9c:	mov	r2, r8
   16fa0:	mov	r1, r0
   16fa4:	mov	r0, r4
   16fa8:	bl	136a0 <_start@@Base+0xdec>
   16fac:	mov	r9, r0
   16fb0:	b	16f34 <_start@@Base+0x4680>
   16fb4:	add	r3, pc, #588	; 0x24c
   16fb8:	ldrd	r2, [r3]
   16fbc:	cmp	r7, r3
   16fc0:	cmpeq	r6, r2
   16fc4:	bne	17070 <_start@@Base+0x47bc>
   16fc8:	add	r9, r0, #8
   16fcc:	mov	r1, r8
   16fd0:	mov	r0, r9
   16fd4:	bl	129e0 <_start@@Base+0x12c>
   16fd8:	mov	r0, #0
   16fdc:	and	r1, r1, #-16777216	; 0xff000000
   16fe0:	cmp	r1, #1694498816	; 0x65000000
   16fe4:	cmpeq	r0, #0
   16fe8:	bne	17058 <_start@@Base+0x47a4>
   16fec:	mov	r1, r9
   16ff0:	mov	r3, #1
   16ff4:	mov	r2, r8
   16ff8:	mov	r0, r4
   16ffc:	bl	14674 <_start@@Base+0x1dc0>
   17000:	cmp	r9, r0
   17004:	mov	r1, r0
   17008:	beq	17044 <_start@@Base+0x4790>
   1700c:	ldr	r3, [pc, #540]	; 17230 <_start@@Base+0x497c>
   17010:	mov	r2, r8
   17014:	str	r3, [sp, #12]
   17018:	ldr	r3, [pc, #532]	; 17234 <_start@@Base+0x4980>
   1701c:	mov	r0, r4
   17020:	str	r3, [sp, #8]
   17024:	ldr	r3, [sp, #36]	; 0x24
   17028:	str	r3, [sp, #4]
   1702c:	mov	r3, #8
   17030:	str	r3, [sp]
   17034:	mov	r3, #0
   17038:	bl	21444 <flatcc_json_parser_union_type@@Base>
   1703c:	mov	r9, r0
   17040:	b	16010 <_start@@Base+0x375c>
   17044:	mov	r2, r8
   17048:	mov	r0, r4
   1704c:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   17050:	mov	r9, r0
   17054:	b	16010 <_start@@Base+0x375c>
   17058:	mov	r1, r9
   1705c:	mov	r2, r8
   17060:	mov	r0, r4
   17064:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   17068:	mov	r9, r0
   1706c:	b	16010 <_start@@Base+0x375c>
   17070:	mov	r1, r9
   17074:	mov	r2, r8
   17078:	mov	r0, r4
   1707c:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   17080:	mov	r9, r0
   17084:	b	16010 <_start@@Base+0x375c>
   17088:	add	r3, pc, #384	; 0x180
   1708c:	ldrd	r2, [r3]
   17090:	cmp	r1, r3
   17094:	cmpeq	r0, r2
   17098:	bhi	18384 <_start@@Base+0x5ad0>
   1709c:	add	r3, pc, #372	; 0x174
   170a0:	ldrd	r2, [r3]
   170a4:	cmp	r1, r3
   170a8:	cmpeq	r0, r2
   170ac:	bne	1794c <_start@@Base+0x5098>
   170b0:	add	r6, r5, #8
   170b4:	mov	r1, r8
   170b8:	mov	r0, r6
   170bc:	bl	129e0 <_start@@Base+0x12c>
   170c0:	add	r3, pc, #344	; 0x158
   170c4:	ldrd	r2, [r3]
   170c8:	cmp	r1, r3
   170cc:	cmpeq	r0, r2
   170d0:	bhi	1753c <_start@@Base+0x4c88>
   170d4:	add	r3, pc, #332	; 0x14c
   170d8:	ldrd	r2, [r3]
   170dc:	cmp	r1, r3
   170e0:	cmpeq	r0, r2
   170e4:	bne	1723c <_start@@Base+0x4988>
   170e8:	mov	r3, #8
   170ec:	mov	r2, r8
   170f0:	mov	r1, r6
   170f4:	mov	r0, r4
   170f8:	bl	14674 <_start@@Base+0x1dc0>
   170fc:	cmp	r6, r0
   17100:	mov	r9, r0
   17104:	beq	17520 <_start@@Base+0x4c6c>
   17108:	mov	r2, #1
   1710c:	mvn	r3, #0
   17110:	mov	r1, r2
   17114:	ldr	r0, [r4]
   17118:	bl	1cf74 <flatcc_builder_start_vector@@Base>
   1711c:	subs	r5, r0, #0
   17120:	bne	19274 <_start@@Base+0x69c0>
   17124:	mov	r1, r9
   17128:	add	r3, sp, #28
   1712c:	mov	r2, r8
   17130:	mov	r0, r4
   17134:	bl	1471c <_start@@Base+0x1e68>
   17138:	ldr	r7, [pc, #248]	; 17238 <_start@@Base+0x4984>
   1713c:	add	r6, sp, #48	; 0x30
   17140:	mov	r9, r0
   17144:	ldr	r3, [sp, #28]
   17148:	cmp	r3, #0
   1714c:	bne	17184 <_start@@Base+0x48d0>
   17150:	ldr	r0, [r4]
   17154:	bl	1d8ec <flatcc_builder_end_vector@@Base>
   17158:	cmp	r0, #0
   1715c:	str	r0, [sp, #32]
   17160:	beq	19274 <_start@@Base+0x69c0>
   17164:	mov	r1, #24
   17168:	ldr	r0, [r4]
   1716c:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   17170:	cmp	r0, #0
   17174:	beq	19274 <_start@@Base+0x69c0>
   17178:	ldr	r3, [sp, #32]
   1717c:	str	r3, [r0]
   17180:	b	16010 <_start@@Base+0x375c>
   17184:	mov	r1, #1
   17188:	ldr	r0, [r4]
   1718c:	strb	r5, [sp, #48]	; 0x30
   17190:	bl	1ca9c <flatcc_builder_extend_vector@@Base>
   17194:	subs	sl, r0, #0
   17198:	beq	1926c <_start@@Base+0x69b8>
   1719c:	mov	r1, r9
   171a0:	mov	r3, r6
   171a4:	mov	r2, r8
   171a8:	mov	r0, r4
   171ac:	bl	149fc <_start@@Base+0x2148>
   171b0:	cmp	r9, r0
   171b4:	mov	r1, r0
   171b8:	bne	171e0 <_start@@Base+0x492c>
   171bc:	str	r6, [sp]
   171c0:	mov	r3, r7
   171c4:	mov	r2, r8
   171c8:	mov	r0, r4
   171cc:	bl	138b8 <_start@@Base+0x1004>
   171d0:	cmp	r8, r0
   171d4:	cmpne	r9, r0
   171d8:	mov	r1, r0
   171dc:	beq	19270 <_start@@Base+0x69bc>
   171e0:	ldrb	r3, [sp, #48]	; 0x30
   171e4:	mov	r2, r8
   171e8:	mov	r0, r4
   171ec:	strb	r3, [sl]
   171f0:	add	r3, sp, #28
   171f4:	bl	136a0 <_start@@Base+0xdec>
   171f8:	mov	r9, r0
   171fc:	b	17144 <_start@@Base+0x4890>
   17200:	strcc	r0, [r0, #-0]
   17204:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   17208:	svcpl	0x00747970
   1720c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   17210:	shsub8vs	pc, r2, pc	; <UNPREDICTABLE>
   17214:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   17218:	cmnvs	r2, r1, ror #4
   1721c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   17220:	ldrbtvc	r6, [r2], #-2413	; 0xfffff693
   17224:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   17228:	svcvs	0x006f6c73
   1722c:	stmdbvc	pc!, {r1, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   17230:	andeq	r9, r1, r0, asr #6
   17234:	andeq	r4, r3, ip, lsr r1
   17238:	andeq	r4, r3, ip, asr #2
   1723c:	add	r3, pc, #972	; 0x3cc
   17240:	ldrd	r2, [r3]
   17244:	cmp	r1, r3
   17248:	cmpeq	r0, r2
   1724c:	bne	17524 <_start@@Base+0x4c70>
   17250:	add	r5, r5, #16
   17254:	mov	r1, r8
   17258:	mov	r0, r5
   1725c:	bl	129e0 <_start@@Base+0x12c>
   17260:	add	r3, pc, #944	; 0x3b0
   17264:	ldrd	r2, [r3]
   17268:	bic	r0, r0, #255	; 0xff
   1726c:	cmp	r1, r3
   17270:	cmpeq	r0, r2
   17274:	bne	17508 <_start@@Base+0x4c54>
   17278:	mov	r3, #7
   1727c:	mov	r2, r8
   17280:	mov	r1, r5
   17284:	mov	r0, r4
   17288:	bl	14674 <_start@@Base+0x1dc0>
   1728c:	cmp	r5, r0
   17290:	mov	r9, r0
   17294:	beq	174f0 <_start@@Base+0x4c3c>
   17298:	mvn	r3, #-536870912	; 0xe0000000
   1729c:	mov	r2, #4
   172a0:	mov	r1, #8
   172a4:	ldr	r0, [r4]
   172a8:	bl	1cf74 <flatcc_builder_start_vector@@Base>
   172ac:	cmp	r0, #0
   172b0:	bne	19274 <_start@@Base+0x69c0>
   172b4:	add	r3, sp, #28
   172b8:	mov	r2, r8
   172bc:	mov	r1, r9
   172c0:	mov	r0, r4
   172c4:	bl	1471c <_start@@Base+0x1e68>
   172c8:	ldr	r3, [sp, #28]
   172cc:	mov	r9, r0
   172d0:	cmp	r3, #0
   172d4:	bne	1730c <_start@@Base+0x4a58>
   172d8:	ldr	r0, [r4]
   172dc:	bl	1d8ec <flatcc_builder_end_vector@@Base>
   172e0:	cmp	r0, #0
   172e4:	str	r0, [sp, #32]
   172e8:	beq	19274 <_start@@Base+0x69c0>
   172ec:	mov	r1, #29
   172f0:	ldr	r0, [r4]
   172f4:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   172f8:	cmp	r0, #0
   172fc:	beq	19274 <_start@@Base+0x69c0>
   17300:	ldr	r3, [sp, #32]
   17304:	str	r3, [r0]
   17308:	b	16010 <_start@@Base+0x375c>
   1730c:	mov	r1, #1
   17310:	ldr	r0, [r4]
   17314:	bl	1ca9c <flatcc_builder_extend_vector@@Base>
   17318:	subs	sl, r0, #0
   1731c:	beq	19274 <_start@@Base+0x69c0>
   17320:	add	r3, sp, #44	; 0x2c
   17324:	mov	r2, r8
   17328:	mov	r1, r9
   1732c:	mov	r0, r4
   17330:	bl	14520 <_start@@Base+0x1c6c>
   17334:	ldr	r3, [sp, #44]	; 0x2c
   17338:	cmp	r3, #0
   1733c:	bne	17358 <_start@@Base+0x4aa4>
   17340:	mov	r1, r0
   17344:	add	r3, sp, #28
   17348:	mov	r2, r8
   1734c:	mov	r0, r4
   17350:	bl	136a0 <_start@@Base+0xdec>
   17354:	b	172c8 <_start@@Base+0x4a14>
   17358:	mov	r2, r8
   1735c:	mov	r1, r0
   17360:	mov	r0, r4
   17364:	bl	13830 <_start@@Base+0xf7c>
   17368:	mov	r1, r8
   1736c:	ldr	r7, [pc, #700]	; 17630 <_start@@Base+0x4d7c>
   17370:	mov	r6, #0
   17374:	mov	r5, r0
   17378:	bl	129e0 <_start@@Base+0x12c>
   1737c:	ldr	r3, [pc, #688]	; 17634 <_start@@Base+0x4d80>
   17380:	mov	r2, #0
   17384:	and	r3, r3, r1
   17388:	and	r2, r2, r0
   1738c:	cmp	r3, r7
   17390:	cmpeq	r2, r6
   17394:	bne	1742c <_start@@Base+0x4b78>
   17398:	mov	r3, #2
   1739c:	mov	r2, r8
   173a0:	mov	r1, r5
   173a4:	mov	r0, r4
   173a8:	bl	14674 <_start@@Base+0x1dc0>
   173ac:	cmp	r5, r0
   173b0:	mov	r9, r0
   173b4:	beq	174c0 <_start@@Base+0x4c0c>
   173b8:	add	fp, sp, #56	; 0x38
   173bc:	mov	r3, #0
   173c0:	str	r3, [fp, #-8]!
   173c4:	mov	r1, r0
   173c8:	mov	r3, fp
   173cc:	mov	r2, r8
   173d0:	mov	r0, r4
   173d4:	bl	1482c <_start@@Base+0x1f78>
   173d8:	cmp	r9, r0
   173dc:	mov	r5, r0
   173e0:	bne	1740c <_start@@Base+0x4b58>
   173e4:	mov	r1, r0
   173e8:	str	fp, [sp]
   173ec:	ldr	r3, [pc, #580]	; 17638 <_start@@Base+0x4d84>
   173f0:	mov	r2, r8
   173f4:	mov	r0, r4
   173f8:	bl	14ddc <_start@@Base+0x2528>
   173fc:	cmp	r8, r0
   17400:	cmpne	r5, r0
   17404:	beq	174d8 <_start@@Base+0x4c24>
   17408:	mov	r5, r0
   1740c:	ldr	r3, [sp, #48]	; 0x30
   17410:	str	r3, [sl]
   17414:	add	r3, sp, #44	; 0x2c
   17418:	mov	r2, r8
   1741c:	mov	r1, r5
   17420:	mov	r0, r4
   17424:	bl	13758 <_start@@Base+0xea4>
   17428:	b	17334 <_start@@Base+0x4a80>
   1742c:	add	r3, pc, #492	; 0x1ec
   17430:	ldrd	r2, [r3]
   17434:	cmp	r1, r3
   17438:	cmpeq	r0, r2
   1743c:	bne	174c0 <_start@@Base+0x4c0c>
   17440:	mov	r3, #8
   17444:	mov	r2, r8
   17448:	mov	r1, r5
   1744c:	mov	r0, r4
   17450:	bl	14674 <_start@@Base+0x1dc0>
   17454:	cmp	r5, r0
   17458:	mov	r9, r0
   1745c:	beq	174c0 <_start@@Base+0x4c0c>
   17460:	add	fp, sp, #56	; 0x38
   17464:	mov	r3, #0
   17468:	str	r3, [fp, #-8]!
   1746c:	mov	r1, r0
   17470:	mov	r3, fp
   17474:	mov	r2, r8
   17478:	mov	r0, r4
   1747c:	bl	1482c <_start@@Base+0x1f78>
   17480:	cmp	r9, r0
   17484:	mov	r5, r0
   17488:	bne	174b4 <_start@@Base+0x4c00>
   1748c:	mov	r1, r0
   17490:	str	fp, [sp]
   17494:	ldr	r3, [pc, #416]	; 1763c <_start@@Base+0x4d88>
   17498:	mov	r2, r8
   1749c:	mov	r0, r4
   174a0:	bl	14ddc <_start@@Base+0x2528>
   174a4:	cmp	r8, r0
   174a8:	cmpne	r5, r0
   174ac:	beq	174d8 <_start@@Base+0x4c24>
   174b0:	mov	r5, r0
   174b4:	ldr	r3, [sp, #48]	; 0x30
   174b8:	str	r3, [sl, #4]
   174bc:	b	17414 <_start@@Base+0x4b60>
   174c0:	mov	r1, r5
   174c4:	mov	r2, r8
   174c8:	mov	r0, r4
   174cc:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   174d0:	mov	r5, r0
   174d4:	b	17414 <_start@@Base+0x4b60>
   174d8:	mov	r1, r0
   174dc:	mov	r3, #33	; 0x21
   174e0:	mov	r2, r8
   174e4:	mov	r0, r4
   174e8:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   174ec:	b	17340 <_start@@Base+0x4a8c>
   174f0:	mov	r1, r0
   174f4:	mov	r2, r8
   174f8:	mov	r0, r4
   174fc:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   17500:	mov	r9, r0
   17504:	b	16010 <_start@@Base+0x375c>
   17508:	mov	r2, r8
   1750c:	mov	r1, r5
   17510:	mov	r0, r4
   17514:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   17518:	mov	r9, r0
   1751c:	b	16010 <_start@@Base+0x375c>
   17520:	mov	r6, r0
   17524:	mov	r2, r8
   17528:	mov	r1, r6
   1752c:	mov	r0, r4
   17530:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   17534:	mov	r9, r0
   17538:	b	16010 <_start@@Base+0x375c>
   1753c:	add	r3, pc, #228	; 0xe4
   17540:	ldrd	r2, [r3]
   17544:	cmp	r1, r3
   17548:	cmpeq	r0, r2
   1754c:	bne	177e4 <_start@@Base+0x4f30>
   17550:	add	r5, r5, #16
   17554:	mov	r1, r8
   17558:	mov	r0, r5
   1755c:	bl	129e0 <_start@@Base+0x12c>
   17560:	ldr	r7, [pc, #204]	; 17634 <_start@@Base+0x4d80>
   17564:	ldr	r3, [pc, #212]	; 17640 <_start@@Base+0x4d8c>
   17568:	mov	r6, #0
   1756c:	mov	r2, #0
   17570:	and	r7, r7, r1
   17574:	and	r6, r6, r0
   17578:	cmp	r7, r3
   1757c:	cmpeq	r6, r2
   17580:	bne	176b8 <_start@@Base+0x4e04>
   17584:	mov	r3, #2
   17588:	mov	r2, r8
   1758c:	mov	r1, r5
   17590:	mov	r0, r4
   17594:	bl	14674 <_start@@Base+0x1dc0>
   17598:	cmp	r5, r0
   1759c:	mov	r9, r0
   175a0:	beq	176a0 <_start@@Base+0x4dec>
   175a4:	ldr	r0, [r4]
   175a8:	bl	1cfcc <flatcc_builder_start_offset_vector@@Base>
   175ac:	cmp	r0, #0
   175b0:	bne	19274 <_start@@Base+0x69c0>
   175b4:	mov	r1, r9
   175b8:	add	r3, sp, #28
   175bc:	mov	r2, r8
   175c0:	mov	r0, r4
   175c4:	bl	1471c <_start@@Base+0x1e68>
   175c8:	mov	r5, #1
   175cc:	mov	r9, r0
   175d0:	ldr	r3, [sp, #28]
   175d4:	cmp	r3, #0
   175d8:	bne	17644 <_start@@Base+0x4d90>
   175dc:	ldr	r0, [r4]
   175e0:	bl	1d990 <flatcc_builder_end_offset_vector@@Base>
   175e4:	cmp	r0, #0
   175e8:	str	r0, [sp, #32]
   175ec:	beq	19274 <_start@@Base+0x69c0>
   175f0:	mov	r1, #28
   175f4:	ldr	r0, [r4]
   175f8:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   175fc:	cmp	r0, #0
   17600:	beq	19274 <_start@@Base+0x69c0>
   17604:	ldr	r3, [sp, #32]
   17608:	str	r3, [r0]
   1760c:	b	16010 <_start@@Base+0x375c>
   17610:	svcvs	0x00727465
   17614:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   17618:	strbvc	r7, [r3, #-1024]!	; 0xfffffc00
   1761c:	ldrbtvs	r7, [r3], #-1138	; 0xfffffb8e
   17620:	cmnvs	lr, r5, ror #6
   17624:	strbtvs	r7, [r9], #-884	; 0xfffffc8c
   17628:	ldrbtvc	r6, [r2], #-2414	; 0xfffff692
   1762c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   17630:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   17634:			; <UNDEFINED> instruction: 0xffff0000
   17638:	andeq	r4, r3, r8, asr r1
   1763c:	andeq	r4, r3, r4, ror #2
   17640:	ldrvs	r0, [r2, -r0]!
   17644:	add	r3, sp, #32
   17648:	mov	r1, r9
   1764c:	mov	r2, r8
   17650:	mov	r0, r4
   17654:	bl	21140 <flatcc_json_parser_build_string@@Base>
   17658:	ldr	r3, [sp, #32]
   1765c:	cmp	r3, #0
   17660:	mov	r9, r0
   17664:	beq	19274 <_start@@Base+0x69c0>
   17668:	mov	r1, r5
   1766c:	ldr	r0, [r4]
   17670:	bl	1cbc8 <flatcc_builder_extend_offset_vector@@Base>
   17674:	cmp	r0, #0
   17678:	beq	19274 <_start@@Base+0x69c0>
   1767c:	ldr	r3, [sp, #32]
   17680:	mov	r1, r9
   17684:	str	r3, [r0]
   17688:	mov	r2, r8
   1768c:	add	r3, sp, #28
   17690:	mov	r0, r4
   17694:	bl	136a0 <_start@@Base+0xdec>
   17698:	mov	r9, r0
   1769c:	b	175d0 <_start@@Base+0x4d1c>
   176a0:	mov	r1, r0
   176a4:	mov	r2, r8
   176a8:	mov	r0, r4
   176ac:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   176b0:	mov	r9, r0
   176b4:	b	16010 <_start@@Base+0x375c>
   176b8:	and	r1, r1, #-16777216	; 0xff000000
   176bc:	mov	r0, #0
   176c0:	cmp	r1, #1728053248	; 0x67000000
   176c4:	cmpeq	r0, #0
   176c8:	bne	177cc <_start@@Base+0x4f18>
   176cc:	mov	r3, #1
   176d0:	mov	r2, r8
   176d4:	mov	r1, r5
   176d8:	mov	r0, r4
   176dc:	bl	14674 <_start@@Base+0x1dc0>
   176e0:	cmp	r5, r0
   176e4:	mov	r9, r0
   176e8:	beq	177b4 <_start@@Base+0x4f00>
   176ec:	ldr	r0, [r4]
   176f0:	bl	1cfcc <flatcc_builder_start_offset_vector@@Base>
   176f4:	cmp	r0, #0
   176f8:	bne	19274 <_start@@Base+0x69c0>
   176fc:	mov	r1, r9
   17700:	add	r3, sp, #28
   17704:	mov	r2, r8
   17708:	mov	r0, r4
   1770c:	bl	1471c <_start@@Base+0x1e68>
   17710:	mov	r5, #1
   17714:	mov	r9, r0
   17718:	ldr	r3, [sp, #28]
   1771c:	cmp	r3, #0
   17720:	bne	17758 <_start@@Base+0x4ea4>
   17724:	ldr	r0, [r4]
   17728:	bl	1d990 <flatcc_builder_end_offset_vector@@Base>
   1772c:	cmp	r0, #0
   17730:	str	r0, [sp, #32]
   17734:	beq	19274 <_start@@Base+0x69c0>
   17738:	mov	r1, #10
   1773c:	ldr	r0, [r4]
   17740:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   17744:	cmp	r0, #0
   17748:	beq	19274 <_start@@Base+0x69c0>
   1774c:	ldr	r3, [sp, #32]
   17750:	str	r3, [r0]
   17754:	b	16010 <_start@@Base+0x375c>
   17758:	add	r3, sp, #32
   1775c:	mov	r1, r9
   17760:	mov	r2, r8
   17764:	mov	r0, r4
   17768:	bl	21140 <flatcc_json_parser_build_string@@Base>
   1776c:	ldr	r3, [sp, #32]
   17770:	cmp	r3, #0
   17774:	mov	r9, r0
   17778:	beq	19274 <_start@@Base+0x69c0>
   1777c:	mov	r1, r5
   17780:	ldr	r0, [r4]
   17784:	bl	1cbc8 <flatcc_builder_extend_offset_vector@@Base>
   17788:	cmp	r0, #0
   1778c:	beq	19274 <_start@@Base+0x69c0>
   17790:	ldr	r3, [sp, #32]
   17794:	mov	r1, r9
   17798:	str	r3, [r0]
   1779c:	mov	r2, r8
   177a0:	add	r3, sp, #28
   177a4:	mov	r0, r4
   177a8:	bl	136a0 <_start@@Base+0xdec>
   177ac:	mov	r9, r0
   177b0:	b	17718 <_start@@Base+0x4e64>
   177b4:	mov	r1, r0
   177b8:	mov	r2, r8
   177bc:	mov	r0, r4
   177c0:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   177c4:	mov	r9, r0
   177c8:	b	16010 <_start@@Base+0x375c>
   177cc:	mov	r2, r8
   177d0:	mov	r1, r5
   177d4:	mov	r0, r4
   177d8:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   177dc:	mov	r9, r0
   177e0:	b	16010 <_start@@Base+0x375c>
   177e4:	add	r3, pc, #956	; 0x3bc
   177e8:	ldrd	r2, [r3]
   177ec:	cmp	r1, r3
   177f0:	cmpeq	r0, r2
   177f4:	bne	17934 <_start@@Base+0x5080>
   177f8:	add	r5, r5, #16
   177fc:	mov	r1, r8
   17800:	mov	r0, r5
   17804:	bl	129e0 <_start@@Base+0x12c>
   17808:	mov	r0, #0
   1780c:	and	r1, r1, #-16777216	; 0xff000000
   17810:	cmp	r1, #1929379840	; 0x73000000
   17814:	cmpeq	r0, #0
   17818:	bne	1791c <_start@@Base+0x5068>
   1781c:	mov	r3, #1
   17820:	mov	r2, r8
   17824:	mov	r1, r5
   17828:	mov	r0, r4
   1782c:	bl	14674 <_start@@Base+0x1dc0>
   17830:	cmp	r5, r0
   17834:	mov	r9, r0
   17838:	beq	17904 <_start@@Base+0x5050>
   1783c:	ldr	r0, [r4]
   17840:	bl	1cfcc <flatcc_builder_start_offset_vector@@Base>
   17844:	cmp	r0, #0
   17848:	bne	19274 <_start@@Base+0x69c0>
   1784c:	mov	r1, r9
   17850:	add	r3, sp, #28
   17854:	mov	r2, r8
   17858:	mov	r0, r4
   1785c:	bl	1471c <_start@@Base+0x1e68>
   17860:	mov	r5, #1
   17864:	mov	r9, r0
   17868:	ldr	r3, [sp, #28]
   1786c:	cmp	r3, #0
   17870:	bne	178a8 <_start@@Base+0x4ff4>
   17874:	ldr	r0, [r4]
   17878:	bl	1d990 <flatcc_builder_end_offset_vector@@Base>
   1787c:	cmp	r0, #0
   17880:	str	r0, [sp, #32]
   17884:	beq	19274 <_start@@Base+0x69c0>
   17888:	mov	r1, #11
   1788c:	ldr	r0, [r4]
   17890:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   17894:	cmp	r0, #0
   17898:	beq	19274 <_start@@Base+0x69c0>
   1789c:	ldr	r3, [sp, #32]
   178a0:	str	r3, [r0]
   178a4:	b	16010 <_start@@Base+0x375c>
   178a8:	add	r3, sp, #32
   178ac:	mov	r1, r9
   178b0:	mov	r2, r8
   178b4:	mov	r0, r4
   178b8:	bl	15e74 <_start@@Base+0x35c0>
   178bc:	ldr	r3, [sp, #32]
   178c0:	cmp	r3, #0
   178c4:	mov	r9, r0
   178c8:	beq	19274 <_start@@Base+0x69c0>
   178cc:	mov	r1, r5
   178d0:	ldr	r0, [r4]
   178d4:	bl	1cbc8 <flatcc_builder_extend_offset_vector@@Base>
   178d8:	cmp	r0, #0
   178dc:	beq	19274 <_start@@Base+0x69c0>
   178e0:	ldr	r3, [sp, #32]
   178e4:	mov	r1, r9
   178e8:	str	r3, [r0]
   178ec:	mov	r2, r8
   178f0:	add	r3, sp, #28
   178f4:	mov	r0, r4
   178f8:	bl	136a0 <_start@@Base+0xdec>
   178fc:	mov	r9, r0
   17900:	b	17868 <_start@@Base+0x4fb4>
   17904:	mov	r1, r0
   17908:	mov	r2, r8
   1790c:	mov	r0, r4
   17910:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   17914:	mov	r9, r0
   17918:	b	16010 <_start@@Base+0x375c>
   1791c:	mov	r2, r8
   17920:	mov	r1, r5
   17924:	mov	r0, r4
   17928:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   1792c:	mov	r9, r0
   17930:	b	16010 <_start@@Base+0x375c>
   17934:	mov	r2, r8
   17938:	mov	r1, r6
   1793c:	mov	r0, r4
   17940:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   17944:	mov	r9, r0
   17948:	b	16010 <_start@@Base+0x375c>
   1794c:	add	r3, pc, #604	; 0x25c
   17950:	ldrd	r2, [r3]
   17954:	cmp	r1, r3
   17958:	cmpeq	r0, r2
   1795c:	bhi	17d94 <_start@@Base+0x54e0>
   17960:	add	r3, pc, #592	; 0x250
   17964:	ldrd	r2, [r3]
   17968:	cmp	r1, r3
   1796c:	cmpeq	r0, r2
   17970:	bne	17c9c <_start@@Base+0x53e8>
   17974:	add	r5, r5, #8
   17978:	mov	r1, r8
   1797c:	mov	r0, r5
   17980:	bl	129e0 <_start@@Base+0x12c>
   17984:	ldr	r3, [pc, #600]	; 17be4 <_start@@Base+0x5330>
   17988:	mov	r2, #0
   1798c:	and	r3, r3, r1
   17990:	mov	r1, r3
   17994:	ldr	r3, [pc, #580]	; 17be0 <_start@@Base+0x532c>
   17998:	and	r2, r2, r0
   1799c:	mov	r0, r2
   179a0:	cmp	r1, r3
   179a4:	mov	r2, #0
   179a8:	cmpeq	r0, r2
   179ac:	bne	17c84 <_start@@Base+0x53d0>
   179b0:	mov	r3, #2
   179b4:	mov	r2, r8
   179b8:	mov	r1, r5
   179bc:	mov	r0, r4
   179c0:	bl	14674 <_start@@Base+0x1dc0>
   179c4:	cmp	r5, r0
   179c8:	mov	r9, r0
   179cc:	beq	17c6c <_start@@Base+0x53b8>
   179d0:	mov	r3, #0
   179d4:	mov	r1, #3
   179d8:	ldr	r0, [r4]
   179dc:	str	r3, [sp, #32]
   179e0:	bl	1d090 <flatcc_builder_start_table@@Base>
   179e4:	cmp	r0, #0
   179e8:	bne	17a40 <_start@@Base+0x518c>
   179ec:	mov	r1, r9
   179f0:	add	r3, sp, #44	; 0x2c
   179f4:	mov	r2, r8
   179f8:	mov	r0, r4
   179fc:	bl	14520 <_start@@Base+0x1c6c>
   17a00:	add	fp, pc, #440	; 0x1b8
   17a04:	ldrd	sl, [fp]
   17a08:	add	r7, pc, #440	; 0x1b8
   17a0c:	ldrd	r6, [r7]
   17a10:	mov	r9, r0
   17a14:	ldr	r3, [sp, #44]	; 0x2c
   17a18:	cmp	r3, #0
   17a1c:	bne	17a84 <_start@@Base+0x51d0>
   17a20:	ldr	r3, [r4, #24]
   17a24:	cmp	r3, #0
   17a28:	bne	17a40 <_start@@Base+0x518c>
   17a2c:	ldr	r0, [r4]
   17a30:	bl	1d6cc <flatcc_builder_end_table@@Base>
   17a34:	cmp	r0, #0
   17a38:	str	r0, [sp, #32]
   17a3c:	bne	17a58 <_start@@Base+0x51a4>
   17a40:	mov	r1, r9
   17a44:	mov	r3, #33	; 0x21
   17a48:	mov	r2, r8
   17a4c:	mov	r0, r4
   17a50:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   17a54:	mov	r9, r0
   17a58:	ldr	r3, [sp, #32]
   17a5c:	cmp	r3, #0
   17a60:	beq	19274 <_start@@Base+0x69c0>
   17a64:	mov	r1, #35	; 0x23
   17a68:	ldr	r0, [r4]
   17a6c:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   17a70:	cmp	r0, #0
   17a74:	beq	19274 <_start@@Base+0x69c0>
   17a78:	ldr	r3, [sp, #32]
   17a7c:	str	r3, [r0]
   17a80:	b	16010 <_start@@Base+0x375c>
   17a84:	mov	r2, r8
   17a88:	mov	r1, r9
   17a8c:	mov	r0, r4
   17a90:	bl	13830 <_start@@Base+0xf7c>
   17a94:	mov	r1, r8
   17a98:	mov	r5, r0
   17a9c:	bl	129e0 <_start@@Base+0x12c>
   17aa0:	add	r3, pc, #296	; 0x128
   17aa4:	ldrd	r2, [r3]
   17aa8:	cmp	r1, r3
   17aac:	cmpeq	r0, r2
   17ab0:	bhi	17b4c <_start@@Base+0x5298>
   17ab4:	add	r3, pc, #284	; 0x11c
   17ab8:	ldrd	r2, [r3]
   17abc:	mov	r0, #0
   17ac0:	cmp	r1, r3
   17ac4:	cmpeq	r0, r2
   17ac8:	bne	17c54 <_start@@Base+0x53a0>
   17acc:	mov	r1, r5
   17ad0:	mov	r3, #4
   17ad4:	mov	r2, r8
   17ad8:	mov	r0, r4
   17adc:	bl	14674 <_start@@Base+0x1dc0>
   17ae0:	cmp	r5, r0
   17ae4:	mov	r1, r0
   17ae8:	beq	17c54 <_start@@Base+0x53a0>
   17aec:	mov	r5, #0
   17af0:	add	r3, sp, #48	; 0x30
   17af4:	str	r5, [sp]
   17af8:	mov	r2, r8
   17afc:	mov	r0, r4
   17b00:	bl	20e18 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   17b04:	ldr	r3, [sp, #48]	; 0x30
   17b08:	cmp	r3, r5
   17b0c:	mov	r9, r0
   17b10:	beq	17a40 <_start@@Base+0x518c>
   17b14:	mov	r1, r5
   17b18:	ldr	r0, [r4]
   17b1c:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   17b20:	cmp	r0, #0
   17b24:	beq	17a40 <_start@@Base+0x518c>
   17b28:	ldr	r3, [sp, #48]	; 0x30
   17b2c:	str	r3, [r0]
   17b30:	mov	r1, r9
   17b34:	add	r3, sp, #44	; 0x2c
   17b38:	mov	r2, r8
   17b3c:	mov	r0, r4
   17b40:	bl	13758 <_start@@Base+0xea4>
   17b44:	mov	r9, r0
   17b48:	b	17a14 <_start@@Base+0x5160>
   17b4c:	bic	r2, r0, #255	; 0xff
   17b50:	cmp	r1, fp
   17b54:	cmpeq	r2, sl
   17b58:	bne	17be8 <_start@@Base+0x5334>
   17b5c:	mov	r1, r5
   17b60:	mov	r3, #7
   17b64:	mov	r2, r8
   17b68:	mov	r0, r4
   17b6c:	bl	14674 <_start@@Base+0x1dc0>
   17b70:	cmp	r5, r0
   17b74:	mov	r1, r0
   17b78:	beq	17c54 <_start@@Base+0x53a0>
   17b7c:	mov	r5, #1
   17b80:	add	r3, sp, #48	; 0x30
   17b84:	str	r5, [sp]
   17b88:	mov	r2, r8
   17b8c:	mov	r0, r4
   17b90:	bl	20e18 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   17b94:	ldr	r3, [sp, #48]	; 0x30
   17b98:	cmp	r3, #0
   17b9c:	mov	r9, r0
   17ba0:	b	17b10 <_start@@Base+0x525c>
   17ba4:	nop			; (mov r0, r0)
   17ba8:	cmnvs	r2, r5, ror #24
   17bac:	stmdbvc	pc!, {r2, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   17bb0:	strbvs	r7, [sp, #-115]!	; 0xffffff8d
   17bb4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   17bb8:	rsbvs	r7, r1, #-1811939327	; 0x94000001
   17bbc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   17bc0:	cmnvs	r4, r0, lsl #2
   17bc4:	ldrbvc	r6, [r2, #-3172]!	; 0xfffff39c
   17bc8:	strbvs	r0, [r4, #-0]!
   17bcc:	mcrvs	3, 3, r7, cr5, cr4, {3}
   17bd0:	strbvs	pc, [r3, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   17bd4:	mcrvs	3, 3, r7, cr5, cr4, {3}
   17bd8:	andeq	r0, r0, r0
   17bdc:	strbtvs	r7, [r1], #-1121	; 0xfffffb9f
   17be0:	ldrtcc	r0, [r4], -r0
   17be4:			; <UNDEFINED> instruction: 0xffff0000
   17be8:	ldr	r2, [pc, #-12]	; 17be4 <_start@@Base+0x5330>
   17bec:	mvn	r3, #0
   17bf0:	and	r1, r1, r3
   17bf4:	and	r0, r0, r2
   17bf8:	cmp	r1, r7
   17bfc:	cmpeq	r0, r6
   17c00:	bne	17c54 <_start@@Base+0x53a0>
   17c04:	mov	r1, r5
   17c08:	mov	r3, #6
   17c0c:	mov	r2, r8
   17c10:	mov	r0, r4
   17c14:	bl	14674 <_start@@Base+0x1dc0>
   17c18:	cmp	r5, r0
   17c1c:	mov	r1, r0
   17c20:	beq	17c54 <_start@@Base+0x53a0>
   17c24:	mov	r3, #0
   17c28:	str	r3, [sp]
   17c2c:	mov	r2, r8
   17c30:	add	r3, sp, #48	; 0x30
   17c34:	mov	r0, r4
   17c38:	bl	20e18 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   17c3c:	ldr	r3, [sp, #48]	; 0x30
   17c40:	cmp	r3, #0
   17c44:	mov	r9, r0
   17c48:	beq	17a40 <_start@@Base+0x518c>
   17c4c:	mov	r1, #2
   17c50:	b	17b18 <_start@@Base+0x5264>
   17c54:	mov	r2, r8
   17c58:	mov	r1, r5
   17c5c:	mov	r0, r4
   17c60:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   17c64:	mov	r9, r0
   17c68:	b	17b30 <_start@@Base+0x527c>
   17c6c:	mov	r1, r0
   17c70:	mov	r2, r8
   17c74:	mov	r0, r4
   17c78:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   17c7c:	mov	r9, r0
   17c80:	b	16010 <_start@@Base+0x375c>
   17c84:	mov	r2, r8
   17c88:	mov	r1, r5
   17c8c:	mov	r0, r4
   17c90:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   17c94:	mov	r9, r0
   17c98:	b	16010 <_start@@Base+0x375c>
   17c9c:	add	r3, pc, #796	; 0x31c
   17ca0:	ldrd	r2, [r3]
   17ca4:	cmp	r1, r3
   17ca8:	cmpeq	r0, r2
   17cac:	bne	17d7c <_start@@Base+0x54c8>
   17cb0:	mov	r3, #8
   17cb4:	mov	r2, r8
   17cb8:	mov	r1, r5
   17cbc:	mov	r0, r4
   17cc0:	bl	14674 <_start@@Base+0x1dc0>
   17cc4:	cmp	r5, r0
   17cc8:	mov	r6, r0
   17ccc:	beq	17d64 <_start@@Base+0x54b0>
   17cd0:	add	r5, sp, #56	; 0x38
   17cd4:	mov	r3, #0
   17cd8:	strb	r3, [r5, #-8]!
   17cdc:	mov	r1, r0
   17ce0:	mov	r3, r5
   17ce4:	mov	r2, r8
   17ce8:	mov	r0, r4
   17cec:	bl	149fc <_start@@Base+0x2148>
   17cf0:	cmp	r6, r0
   17cf4:	mov	r9, r0
   17cf8:	bne	17d24 <_start@@Base+0x5470>
   17cfc:	mov	r1, r0
   17d00:	str	r5, [sp]
   17d04:	ldr	r3, [pc, #732]	; 17fe8 <_start@@Base+0x5734>
   17d08:	mov	r2, r8
   17d0c:	mov	r0, r4
   17d10:	bl	138b8 <_start@@Base+0x1004>
   17d14:	cmp	r8, r0
   17d18:	cmpne	r9, r0
   17d1c:	mov	r9, r0
   17d20:	beq	19274 <_start@@Base+0x69c0>
   17d24:	ldrb	r3, [sp, #48]	; 0x30
   17d28:	cmp	r3, #1
   17d2c:	bne	17d3c <_start@@Base+0x5488>
   17d30:	ldr	r3, [r4, #8]
   17d34:	tst	r3, #2
   17d38:	beq	16010 <_start@@Base+0x375c>
   17d3c:	mov	r3, #1
   17d40:	mov	r2, r3
   17d44:	mov	r1, #15
   17d48:	ldr	r0, [r4]
   17d4c:	bl	1e050 <flatcc_builder_table_add@@Base>
   17d50:	cmp	r0, #0
   17d54:	beq	19274 <_start@@Base+0x69c0>
   17d58:	ldrb	r3, [sp, #48]	; 0x30
   17d5c:	strb	r3, [r0]
   17d60:	b	16010 <_start@@Base+0x375c>
   17d64:	mov	r2, r8
   17d68:	mov	r1, r5
   17d6c:	mov	r0, r4
   17d70:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   17d74:	mov	r9, r0
   17d78:	b	16010 <_start@@Base+0x375c>
   17d7c:	mov	r2, r8
   17d80:	mov	r1, r5
   17d84:	mov	r0, r4
   17d88:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   17d8c:	mov	r9, r0
   17d90:	b	16010 <_start@@Base+0x375c>
   17d94:	add	r3, pc, #556	; 0x22c
   17d98:	ldrd	r2, [r3]
   17d9c:	cmp	r1, r3
   17da0:	cmpeq	r0, r2
   17da4:	bhi	181b8 <_start@@Base+0x5904>
   17da8:	add	r3, pc, #544	; 0x220
   17dac:	ldrd	r2, [r3]
   17db0:	cmp	r1, r3
   17db4:	cmpeq	r0, r2
   17db8:	bne	181a0 <_start@@Base+0x58ec>
   17dbc:	add	r5, r5, #8
   17dc0:	mov	r1, r8
   17dc4:	mov	r0, r5
   17dc8:	bl	129e0 <_start@@Base+0x12c>
   17dcc:	mov	r0, #0
   17dd0:	and	r1, r1, #-16777216	; 0xff000000
   17dd4:	cmp	r1, #2030043136	; 0x79000000
   17dd8:	cmpeq	r0, #0
   17ddc:	bne	18188 <_start@@Base+0x58d4>
   17de0:	mov	r3, #1
   17de4:	mov	r2, r8
   17de8:	mov	r1, r5
   17dec:	mov	r0, r4
   17df0:	bl	14674 <_start@@Base+0x1dc0>
   17df4:	cmp	r5, r0
   17df8:	mov	r9, r0
   17dfc:	beq	18170 <_start@@Base+0x58bc>
   17e00:	mov	r3, #0
   17e04:	mov	r1, #3
   17e08:	ldr	r0, [r4]
   17e0c:	str	r3, [sp, #32]
   17e10:	bl	1d090 <flatcc_builder_start_table@@Base>
   17e14:	cmp	r0, #0
   17e18:	bne	17e68 <_start@@Base+0x55b4>
   17e1c:	mov	r1, r9
   17e20:	add	r3, sp, #40	; 0x28
   17e24:	mov	r2, r8
   17e28:	mov	r0, r4
   17e2c:	bl	14520 <_start@@Base+0x1c6c>
   17e30:	add	fp, pc, #416	; 0x1a0
   17e34:	ldrd	sl, [fp]
   17e38:	mov	r9, r0
   17e3c:	ldr	r3, [sp, #40]	; 0x28
   17e40:	cmp	r3, #0
   17e44:	bne	17eac <_start@@Base+0x55f8>
   17e48:	ldr	r3, [r4, #24]
   17e4c:	cmp	r3, #0
   17e50:	bne	17e68 <_start@@Base+0x55b4>
   17e54:	ldr	r0, [r4]
   17e58:	bl	1d6cc <flatcc_builder_end_table@@Base>
   17e5c:	cmp	r0, #0
   17e60:	str	r0, [sp, #32]
   17e64:	bne	17e80 <_start@@Base+0x55cc>
   17e68:	mov	r1, r9
   17e6c:	mov	r3, #33	; 0x21
   17e70:	mov	r2, r8
   17e74:	mov	r0, r4
   17e78:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   17e7c:	mov	r9, r0
   17e80:	ldr	r3, [sp, #32]
   17e84:	cmp	r3, #0
   17e88:	beq	19274 <_start@@Base+0x69c0>
   17e8c:	mov	r1, #14
   17e90:	ldr	r0, [r4]
   17e94:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   17e98:	cmp	r0, #0
   17e9c:	beq	19274 <_start@@Base+0x69c0>
   17ea0:	ldr	r3, [sp, #32]
   17ea4:	str	r3, [r0]
   17ea8:	b	16010 <_start@@Base+0x375c>
   17eac:	mov	r2, r8
   17eb0:	mov	r1, r9
   17eb4:	mov	r0, r4
   17eb8:	bl	13830 <_start@@Base+0xf7c>
   17ebc:	mov	r1, r8
   17ec0:	mov	r5, r0
   17ec4:	bl	129e0 <_start@@Base+0x12c>
   17ec8:	ldr	r3, [pc, #284]	; 17fec <_start@@Base+0x5738>
   17ecc:	mvn	r2, #0
   17ed0:	cmp	r1, r3
   17ed4:	cmpeq	r0, r2
   17ed8:	bhi	18000 <_start@@Base+0x574c>
   17edc:	add	r3, pc, #252	; 0xfc
   17ee0:	ldrd	r2, [r3]
   17ee4:	and	r0, r0, #-16777216	; 0xff000000
   17ee8:	cmp	r1, r3
   17eec:	cmpeq	r0, r2
   17ef0:	bne	18158 <_start@@Base+0x58a4>
   17ef4:	mov	r3, #5
   17ef8:	mov	r2, r8
   17efc:	mov	r1, r5
   17f00:	mov	r0, r4
   17f04:	bl	14674 <_start@@Base+0x1dc0>
   17f08:	cmp	r5, r0
   17f0c:	mov	r6, r0
   17f10:	beq	18158 <_start@@Base+0x58a4>
   17f14:	add	r5, sp, #56	; 0x38
   17f18:	mov	r3, #0
   17f1c:	strh	r3, [r5, #-8]!
   17f20:	mov	r1, r0
   17f24:	mov	r3, r5
   17f28:	mov	r2, r8
   17f2c:	mov	r0, r4
   17f30:	bl	148c8 <_start@@Base+0x2014>
   17f34:	cmp	r6, r0
   17f38:	mov	r9, r0
   17f3c:	bne	17f68 <_start@@Base+0x56b4>
   17f40:	mov	r1, r0
   17f44:	str	r5, [sp]
   17f48:	ldr	r3, [pc, #160]	; 17ff0 <_start@@Base+0x573c>
   17f4c:	mov	r2, r8
   17f50:	mov	r0, r4
   17f54:	bl	14f18 <_start@@Base+0x2664>
   17f58:	cmp	r8, r0
   17f5c:	cmpne	r9, r0
   17f60:	mov	r9, r0
   17f64:	beq	17e68 <_start@@Base+0x55b4>
   17f68:	ldrh	r3, [sp, #48]	; 0x30
   17f6c:	cmp	r3, #0
   17f70:	bne	17f80 <_start@@Base+0x56cc>
   17f74:	ldr	r3, [r4, #8]
   17f78:	tst	r3, #2
   17f7c:	beq	17fa4 <_start@@Base+0x56f0>
   17f80:	mov	r3, #2
   17f84:	mov	r2, r3
   17f88:	mov	r1, r3
   17f8c:	ldr	r0, [r4]
   17f90:	bl	1e050 <flatcc_builder_table_add@@Base>
   17f94:	cmp	r0, #0
   17f98:	beq	17e68 <_start@@Base+0x55b4>
   17f9c:	ldrh	r3, [sp, #48]	; 0x30
   17fa0:	strh	r3, [r0]
   17fa4:	mov	r1, r9
   17fa8:	add	r3, sp, #40	; 0x28
   17fac:	mov	r2, r8
   17fb0:	mov	r0, r4
   17fb4:	bl	13758 <_start@@Base+0xea4>
   17fb8:	mov	r9, r0
   17fbc:	b	17e3c <_start@@Base+0x5588>
   17fc0:	rsbvs	r6, pc, #108, 30	; 0x1b0
   17fc4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   17fc8:	ldrbvs	pc, [pc, #4095]!	; 18fcf <_start@@Base+0x671b>	; <UNPREDICTABLE>
   17fcc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   17fd0:	strbvs	r7, [sp, #-116]!	; 0xffffff8c
   17fd4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   17fd8:	andeq	r0, r0, r0
   17fdc:	strbtvc	r6, [r1], -r0, lsl #24
   17fe0:	strvc	r0, [r0], #-0
   17fe4:	cmnvs	pc, #461373440	; 0x1b800000
   17fe8:	andeq	r4, r3, r0, ror r1
   17fec:	stmdbvs	r3!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   17ff0:	andeq	r4, r3, ip, ror r1
   17ff4:	andeq	r4, r3, r8, lsl #3
   17ff8:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   17ffc:			; <UNDEFINED> instruction: 0xffff0000
   18000:	bic	r3, r1, #255	; 0xff
   18004:	mov	r2, #0
   18008:	cmp	r3, fp
   1800c:	cmpeq	r2, sl
   18010:	bne	180cc <_start@@Base+0x5818>
   18014:	mov	r3, #3
   18018:	mov	r2, r8
   1801c:	mov	r1, r5
   18020:	mov	r0, r4
   18024:	bl	14674 <_start@@Base+0x1dc0>
   18028:	cmp	r5, r0
   1802c:	mov	r6, r0
   18030:	beq	18158 <_start@@Base+0x58a4>
   18034:	add	r5, sp, #56	; 0x38
   18038:	mov	r2, #0
   1803c:	mov	r3, #0
   18040:	mov	r1, r0
   18044:	strd	r2, [r5, #-8]!
   18048:	mov	r0, r4
   1804c:	mov	r3, r5
   18050:	mov	r2, r8
   18054:	bl	15dc8 <_start@@Base+0x3514>
   18058:	cmp	r6, r0
   1805c:	mov	r9, r0
   18060:	bne	1808c <_start@@Base+0x57d8>
   18064:	mov	r1, r0
   18068:	str	r5, [sp]
   1806c:	ldr	r3, [pc, #-128]	; 17ff4 <_start@@Base+0x5740>
   18070:	mov	r2, r8
   18074:	mov	r0, r4
   18078:	bl	15c60 <_start@@Base+0x33ac>
   1807c:	cmp	r8, r0
   18080:	cmpne	r9, r0
   18084:	mov	r9, r0
   18088:	beq	17e68 <_start@@Base+0x55b4>
   1808c:	ldrd	r2, [sp, #48]	; 0x30
   18090:	orrs	r3, r2, r3
   18094:	bne	180a4 <_start@@Base+0x57f0>
   18098:	ldr	r3, [r4, #8]
   1809c:	tst	r3, #2
   180a0:	beq	17fa4 <_start@@Base+0x56f0>
   180a4:	mov	r3, #8
   180a8:	mov	r2, r3
   180ac:	mov	r1, #1
   180b0:	ldr	r0, [r4]
   180b4:	bl	1e050 <flatcc_builder_table_add@@Base>
   180b8:	cmp	r0, #0
   180bc:	beq	17e68 <_start@@Base+0x55b4>
   180c0:	ldrd	r2, [sp, #48]	; 0x30
   180c4:	strd	r2, [r0]
   180c8:	b	17fa4 <_start@@Base+0x56f0>
   180cc:	ldr	r3, [pc, #-216]	; 17ffc <_start@@Base+0x5748>
   180d0:	mov	r2, #0
   180d4:	and	r3, r3, r1
   180d8:	mov	r1, r3
   180dc:	ldr	r3, [pc, #-236]	; 17ff8 <_start@@Base+0x5744>
   180e0:	and	r2, r2, r0
   180e4:	mov	r0, r2
   180e8:	cmp	r1, r3
   180ec:	mov	r2, #0
   180f0:	cmpeq	r0, r2
   180f4:	bne	18158 <_start@@Base+0x58a4>
   180f8:	mov	r1, r5
   180fc:	mov	r3, #2
   18100:	mov	r2, r8
   18104:	mov	r0, r4
   18108:	bl	14674 <_start@@Base+0x1dc0>
   1810c:	cmp	r5, r0
   18110:	mov	r1, r0
   18114:	beq	18158 <_start@@Base+0x58a4>
   18118:	add	r3, sp, #44	; 0x2c
   1811c:	mov	r2, r8
   18120:	mov	r0, r4
   18124:	bl	21140 <flatcc_json_parser_build_string@@Base>
   18128:	ldr	r3, [sp, #44]	; 0x2c
   1812c:	cmp	r3, #0
   18130:	mov	r9, r0
   18134:	beq	17e68 <_start@@Base+0x55b4>
   18138:	mov	r1, #0
   1813c:	ldr	r0, [r4]
   18140:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   18144:	cmp	r0, #0
   18148:	beq	17e68 <_start@@Base+0x55b4>
   1814c:	ldr	r3, [sp, #44]	; 0x2c
   18150:	str	r3, [r0]
   18154:	b	17fa4 <_start@@Base+0x56f0>
   18158:	mov	r2, r8
   1815c:	mov	r1, r5
   18160:	mov	r0, r4
   18164:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   18168:	mov	r9, r0
   1816c:	b	17fa4 <_start@@Base+0x56f0>
   18170:	mov	r1, r0
   18174:	mov	r2, r8
   18178:	mov	r0, r4
   1817c:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   18180:	mov	r9, r0
   18184:	b	16010 <_start@@Base+0x375c>
   18188:	mov	r2, r8
   1818c:	mov	r1, r5
   18190:	mov	r0, r4
   18194:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   18198:	mov	r9, r0
   1819c:	b	16010 <_start@@Base+0x375c>
   181a0:	mov	r2, r8
   181a4:	mov	r1, r5
   181a8:	mov	r0, r4
   181ac:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   181b0:	mov	r9, r0
   181b4:	b	16010 <_start@@Base+0x375c>
   181b8:	ldr	r2, [pc, #-452]	; 17ffc <_start@@Base+0x5748>
   181bc:	mvn	r3, #0
   181c0:	and	r6, r6, r2
   181c4:	and	r7, r7, r3
   181c8:	add	r3, pc, #984	; 0x3d8
   181cc:	ldrd	r2, [r3]
   181d0:	cmp	r7, r3
   181d4:	cmpeq	r6, r2
   181d8:	bne	182b0 <_start@@Base+0x59fc>
   181dc:	mov	r3, #6
   181e0:	mov	r2, r8
   181e4:	mov	r1, r5
   181e8:	mov	r0, r4
   181ec:	bl	14674 <_start@@Base+0x1dc0>
   181f0:	cmp	r5, r0
   181f4:	mov	r6, r0
   181f8:	beq	18298 <_start@@Base+0x59e4>
   181fc:	vmov	r3, s16
   18200:	add	r5, sp, #56	; 0x38
   18204:	mov	r1, r0
   18208:	mov	r2, r8
   1820c:	str	r3, [r5, #-8]!
   18210:	mov	r0, r4
   18214:	mov	r3, r5
   18218:	bl	20620 <flatcc_json_parser_float@@Base>
   1821c:	cmp	r6, r0
   18220:	mov	r9, r0
   18224:	bne	18250 <_start@@Base+0x599c>
   18228:	mov	r1, r0
   1822c:	str	r5, [sp]
   18230:	ldr	r3, [pc, #936]	; 185e0 <_start@@Base+0x5d2c>
   18234:	mov	r2, r8
   18238:	mov	r0, r4
   1823c:	bl	139f4 <_start@@Base+0x1140>
   18240:	cmp	r8, r0
   18244:	cmpne	r9, r0
   18248:	mov	r9, r0
   1824c:	beq	19274 <_start@@Base+0x69c0>
   18250:	vldr	s14, [sp, #48]	; 0x30
   18254:	vldr	s15, [pc, #892]	; 185d8 <_start@@Base+0x5d24>
   18258:	vcmp.f32	s14, s15
   1825c:	vmrs	APSR_nzcv, fpscr
   18260:	bne	18270 <_start@@Base+0x59bc>
   18264:	ldr	r3, [r4, #8]
   18268:	tst	r3, #2
   1826c:	beq	16010 <_start@@Base+0x375c>
   18270:	mov	r3, #4
   18274:	mov	r2, r3
   18278:	mov	r1, #26
   1827c:	ldr	r0, [r4]
   18280:	bl	1e050 <flatcc_builder_table_add@@Base>
   18284:	cmp	r0, #0
   18288:	beq	19274 <_start@@Base+0x69c0>
   1828c:	ldr	r3, [sp, #48]	; 0x30
   18290:	str	r3, [r0]
   18294:	b	16010 <_start@@Base+0x375c>
   18298:	mov	r2, r8
   1829c:	mov	r1, r5
   182a0:	mov	r0, r4
   182a4:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   182a8:	mov	r9, r0
   182ac:	b	16010 <_start@@Base+0x375c>
   182b0:	mov	r3, #5
   182b4:	mov	r2, r8
   182b8:	mov	r1, r5
   182bc:	mov	r0, r4
   182c0:	bl	14674 <_start@@Base+0x1dc0>
   182c4:	cmp	r5, r0
   182c8:	mov	r6, r0
   182cc:	beq	1836c <_start@@Base+0x5ab8>
   182d0:	vmov	r3, s16
   182d4:	add	r5, sp, #56	; 0x38
   182d8:	mov	r1, r0
   182dc:	mov	r2, r8
   182e0:	str	r3, [r5, #-8]!
   182e4:	mov	r0, r4
   182e8:	mov	r3, r5
   182ec:	bl	20620 <flatcc_json_parser_float@@Base>
   182f0:	cmp	r6, r0
   182f4:	mov	r9, r0
   182f8:	bne	18324 <_start@@Base+0x5a70>
   182fc:	mov	r1, r0
   18300:	str	r5, [sp]
   18304:	ldr	r3, [pc, #728]	; 185e4 <_start@@Base+0x5d30>
   18308:	mov	r2, r8
   1830c:	mov	r0, r4
   18310:	bl	139f4 <_start@@Base+0x1140>
   18314:	cmp	r8, r0
   18318:	cmpne	r9, r0
   1831c:	mov	r9, r0
   18320:	beq	19274 <_start@@Base+0x69c0>
   18324:	vldr	s14, [sp, #48]	; 0x30
   18328:	vldr	s15, [pc, #684]	; 185dc <_start@@Base+0x5d28>
   1832c:	vcmp.f32	s14, s15
   18330:	vmrs	APSR_nzcv, fpscr
   18334:	bne	18344 <_start@@Base+0x5a90>
   18338:	ldr	r3, [r4, #8]
   1833c:	tst	r3, #2
   18340:	beq	16010 <_start@@Base+0x375c>
   18344:	mov	r3, #4
   18348:	mov	r2, r3
   1834c:	mov	r1, #25
   18350:	ldr	r0, [r4]
   18354:	bl	1e050 <flatcc_builder_table_add@@Base>
   18358:	cmp	r0, #0
   1835c:	beq	19274 <_start@@Base+0x69c0>
   18360:	ldr	r3, [sp, #48]	; 0x30
   18364:	str	r3, [r0]
   18368:	b	16010 <_start@@Base+0x375c>
   1836c:	mov	r2, r8
   18370:	mov	r1, r5
   18374:	mov	r0, r4
   18378:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   1837c:	mov	r9, r0
   18380:	b	16010 <_start@@Base+0x375c>
   18384:	add	r3, pc, #548	; 0x224
   18388:	ldrd	r2, [r3]
   1838c:	cmp	r1, r3
   18390:	cmpeq	r0, r2
   18394:	bhi	184a4 <_start@@Base+0x5bf0>
   18398:	ldr	r2, [pc, #584]	; 185e8 <_start@@Base+0x5d34>
   1839c:	mvn	r3, #0
   183a0:	and	r6, r6, r2
   183a4:	and	r7, r7, r3
   183a8:	add	r3, pc, #520	; 0x208
   183ac:	ldrd	r2, [r3]
   183b0:	cmp	r7, r3
   183b4:	cmpeq	r6, r2
   183b8:	bne	1848c <_start@@Base+0x5bd8>
   183bc:	mov	r3, #6
   183c0:	mov	r2, r8
   183c4:	mov	r1, r5
   183c8:	mov	r0, r4
   183cc:	bl	14674 <_start@@Base+0x1dc0>
   183d0:	cmp	r5, r0
   183d4:	mov	r6, r0
   183d8:	beq	18474 <_start@@Base+0x5bc0>
   183dc:	vmov	r3, s16
   183e0:	add	r5, sp, #56	; 0x38
   183e4:	mov	r1, r0
   183e8:	mov	r2, r8
   183ec:	str	r3, [r5, #-8]!
   183f0:	mov	r0, r4
   183f4:	mov	r3, r5
   183f8:	bl	20620 <flatcc_json_parser_float@@Base>
   183fc:	cmp	r6, r0
   18400:	mov	r9, r0
   18404:	bne	18430 <_start@@Base+0x5b7c>
   18408:	mov	r1, r0
   1840c:	str	r5, [sp]
   18410:	ldr	r3, [pc, #468]	; 185ec <_start@@Base+0x5d38>
   18414:	mov	r2, r8
   18418:	mov	r0, r4
   1841c:	bl	139f4 <_start@@Base+0x1140>
   18420:	cmp	r8, r0
   18424:	cmpne	r9, r0
   18428:	mov	r9, r0
   1842c:	beq	19274 <_start@@Base+0x69c0>
   18430:	vldr	s15, [sp, #48]	; 0x30
   18434:	vcmp.f32	s15, s16
   18438:	vmrs	APSR_nzcv, fpscr
   1843c:	bne	1844c <_start@@Base+0x5b98>
   18440:	ldr	r3, [r4, #8]
   18444:	tst	r3, #2
   18448:	beq	16010 <_start@@Base+0x375c>
   1844c:	mov	r3, #4
   18450:	mov	r2, r3
   18454:	mov	r1, #27
   18458:	ldr	r0, [r4]
   1845c:	bl	1e050 <flatcc_builder_table_add@@Base>
   18460:	cmp	r0, #0
   18464:	beq	19274 <_start@@Base+0x69c0>
   18468:	ldr	r3, [sp, #48]	; 0x30
   1846c:	str	r3, [r0]
   18470:	b	16010 <_start@@Base+0x375c>
   18474:	mov	r2, r8
   18478:	mov	r1, r5
   1847c:	mov	r0, r4
   18480:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   18484:	mov	r9, r0
   18488:	b	16010 <_start@@Base+0x375c>
   1848c:	mov	r2, r8
   18490:	mov	r1, r5
   18494:	mov	r0, r4
   18498:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   1849c:	mov	r9, r0
   184a0:	b	16010 <_start@@Base+0x375c>
   184a4:	add	r3, pc, #276	; 0x114
   184a8:	ldrd	r2, [r3]
   184ac:	cmp	r1, r3
   184b0:	cmpeq	r0, r2
   184b4:	bne	18d08 <_start@@Base+0x6454>
   184b8:	add	r6, r5, #8
   184bc:	mov	r1, r8
   184c0:	mov	r0, r6
   184c4:	bl	129e0 <_start@@Base+0x12c>
   184c8:	add	r3, pc, #248	; 0xf8
   184cc:	ldrd	r2, [r3]
   184d0:	cmp	r1, r3
   184d4:	cmpeq	r0, r2
   184d8:	bhi	18718 <_start@@Base+0x5e64>
   184dc:	add	r3, pc, #236	; 0xec
   184e0:	ldrd	r2, [r3]
   184e4:	cmp	r1, r3
   184e8:	cmpeq	r0, r2
   184ec:	bne	18700 <_start@@Base+0x5e4c>
   184f0:	mov	r3, #8
   184f4:	mov	r2, r8
   184f8:	mov	r1, r6
   184fc:	mov	r0, r4
   18500:	bl	14674 <_start@@Base+0x1dc0>
   18504:	cmp	r6, r0
   18508:	mov	r7, r0
   1850c:	beq	185f8 <_start@@Base+0x5d44>
   18510:	add	r5, sp, #56	; 0x38
   18514:	mov	r3, #0
   18518:	str	r3, [r5, #-8]!
   1851c:	mov	r1, r0
   18520:	mov	r3, r5
   18524:	mov	r2, r8
   18528:	mov	r0, r4
   1852c:	bl	14a9c <_start@@Base+0x21e8>
   18530:	cmp	r7, r0
   18534:	mov	r9, r0
   18538:	bne	18564 <_start@@Base+0x5cb0>
   1853c:	mov	r1, r0
   18540:	str	r5, [sp]
   18544:	ldr	r3, [pc, #164]	; 185f0 <_start@@Base+0x5d3c>
   18548:	mov	r2, r8
   1854c:	mov	r0, r4
   18550:	bl	151b4 <_start@@Base+0x2900>
   18554:	cmp	r8, r0
   18558:	cmpne	r9, r0
   1855c:	mov	r9, r0
   18560:	beq	19274 <_start@@Base+0x69c0>
   18564:	ldr	r3, [sp, #48]	; 0x30
   18568:	cmp	r3, #0
   1856c:	bne	1857c <_start@@Base+0x5cc8>
   18570:	ldr	r3, [r4, #8]
   18574:	tst	r3, #2
   18578:	beq	16010 <_start@@Base+0x375c>
   1857c:	mov	r3, #4
   18580:	mov	r2, r3
   18584:	mov	r1, #16
   18588:	ldr	r0, [r4]
   1858c:	bl	1e050 <flatcc_builder_table_add@@Base>
   18590:	cmp	r0, #0
   18594:	beq	19274 <_start@@Base+0x69c0>
   18598:	ldr	r3, [sp, #48]	; 0x30
   1859c:	str	r3, [r0]
   185a0:	b	16010 <_start@@Base+0x375c>
   185a4:	nop			; (mov r0, r0)
   185a8:	ldrtvs	r0, [r2], -r0
   185ac:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   185b0:	stmdavs	r1!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^
   185b4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   185b8:	ldrtvs	r0, [r3], -r0
   185bc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   185c0:	stmdavs	r1!, {r3, r5, r6, r8, r9, ip, sp, lr}^
   185c4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   185c8:			; <UNDEFINED> instruction: 0x666e7630
   185cc:	teqvc	r6, #1593835520	; 0x5f000000
   185d0:			; <UNDEFINED> instruction: 0x666e7631
   185d4:	teqvc	r3, #-268435451	; 0xf0000005
   185d8:	submi	r0, r0, r0
   185dc:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   185e0:	muleq	r3, r4, r1
   185e4:	andeq	r4, r3, r0, lsr #3
   185e8:			; <UNDEFINED> instruction: 0xffff0000
   185ec:	andeq	r4, r3, ip, lsr #3
   185f0:			; <UNDEFINED> instruction: 0x000341b8
   185f4:	andeq	r4, r3, r4, asr #3
   185f8:	add	r5, r5, #16
   185fc:	mov	r1, r8
   18600:	mov	r0, r5
   18604:	bl	129e0 <_start@@Base+0x12c>
   18608:	mov	r0, #0
   1860c:	and	r1, r1, #-16777216	; 0xff000000
   18610:	cmp	r1, #1627389952	; 0x61000000
   18614:	cmpeq	r0, #0
   18618:	bne	186e8 <_start@@Base+0x5e34>
   1861c:	mov	r3, #1
   18620:	mov	r2, r8
   18624:	mov	r1, r5
   18628:	mov	r0, r4
   1862c:	bl	14674 <_start@@Base+0x1dc0>
   18630:	cmp	r5, r0
   18634:	mov	r6, r0
   18638:	beq	186d0 <_start@@Base+0x5e1c>
   1863c:	add	r5, sp, #56	; 0x38
   18640:	mov	r3, #0
   18644:	str	r3, [r5, #-8]!
   18648:	mov	r1, r0
   1864c:	mov	r3, r5
   18650:	mov	r2, r8
   18654:	mov	r0, r4
   18658:	bl	14a9c <_start@@Base+0x21e8>
   1865c:	cmp	r6, r0
   18660:	mov	r9, r0
   18664:	bne	18690 <_start@@Base+0x5ddc>
   18668:	mov	r1, r0
   1866c:	str	r5, [sp]
   18670:	ldr	r3, [pc, #-132]	; 185f4 <_start@@Base+0x5d40>
   18674:	mov	r2, r8
   18678:	mov	r0, r4
   1867c:	bl	151b4 <_start@@Base+0x2900>
   18680:	cmp	r8, r0
   18684:	cmpne	r9, r0
   18688:	mov	r9, r0
   1868c:	beq	19274 <_start@@Base+0x69c0>
   18690:	ldr	r3, [sp, #48]	; 0x30
   18694:	cmp	r3, #0
   18698:	bne	186a8 <_start@@Base+0x5df4>
   1869c:	ldr	r3, [r4, #8]
   186a0:	tst	r3, #2
   186a4:	beq	16010 <_start@@Base+0x375c>
   186a8:	mov	r3, #4
   186ac:	mov	r2, r3
   186b0:	mov	r1, #20
   186b4:	ldr	r0, [r4]
   186b8:	bl	1e050 <flatcc_builder_table_add@@Base>
   186bc:	cmp	r0, #0
   186c0:	beq	19274 <_start@@Base+0x69c0>
   186c4:	ldr	r3, [sp, #48]	; 0x30
   186c8:	str	r3, [r0]
   186cc:	b	16010 <_start@@Base+0x375c>
   186d0:	mov	r1, r0
   186d4:	mov	r2, r8
   186d8:	mov	r0, r4
   186dc:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   186e0:	mov	r9, r0
   186e4:	b	16010 <_start@@Base+0x375c>
   186e8:	mov	r2, r8
   186ec:	mov	r1, r5
   186f0:	mov	r0, r4
   186f4:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   186f8:	mov	r9, r0
   186fc:	b	16010 <_start@@Base+0x375c>
   18700:	mov	r2, r8
   18704:	mov	r1, r6
   18708:	mov	r0, r4
   1870c:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   18710:	mov	r9, r0
   18714:	b	16010 <_start@@Base+0x375c>
   18718:	add	r3, pc, #976	; 0x3d0
   1871c:	ldrd	r2, [r3]
   18720:	cmp	r1, r3
   18724:	cmpeq	r0, r2
   18728:	bhi	1891c <_start@@Base+0x6068>
   1872c:	add	r3, pc, #964	; 0x3c4
   18730:	ldrd	r2, [r3]
   18734:	cmp	r1, r3
   18738:	cmpeq	r0, r2
   1873c:	bne	18904 <_start@@Base+0x6050>
   18740:	mov	r3, #8
   18744:	mov	r2, r8
   18748:	mov	r1, r6
   1874c:	mov	r0, r4
   18750:	bl	14674 <_start@@Base+0x1dc0>
   18754:	cmp	r6, r0
   18758:	mov	r7, r0
   1875c:	beq	187f8 <_start@@Base+0x5f44>
   18760:	add	r5, sp, #56	; 0x38
   18764:	mov	r2, #0
   18768:	mov	r3, #0
   1876c:	mov	r1, r0
   18770:	strd	r2, [r5, #-8]!
   18774:	mov	r0, r4
   18778:	mov	r3, r5
   1877c:	mov	r2, r8
   18780:	bl	15dc8 <_start@@Base+0x3514>
   18784:	cmp	r7, r0
   18788:	mov	r9, r0
   1878c:	bne	187b8 <_start@@Base+0x5f04>
   18790:	mov	r1, r0
   18794:	str	r5, [sp]
   18798:	ldr	r3, [pc, #872]	; 18b08 <_start@@Base+0x6254>
   1879c:	mov	r2, r8
   187a0:	mov	r0, r4
   187a4:	bl	15c60 <_start@@Base+0x33ac>
   187a8:	cmp	r8, r0
   187ac:	cmpne	r9, r0
   187b0:	mov	r9, r0
   187b4:	beq	19274 <_start@@Base+0x69c0>
   187b8:	ldrd	r2, [sp, #48]	; 0x30
   187bc:	orrs	r3, r2, r3
   187c0:	bne	187d0 <_start@@Base+0x5f1c>
   187c4:	ldr	r3, [r4, #8]
   187c8:	tst	r3, #2
   187cc:	beq	16010 <_start@@Base+0x375c>
   187d0:	mov	r3, #8
   187d4:	mov	r2, r3
   187d8:	mov	r1, #18
   187dc:	ldr	r0, [r4]
   187e0:	bl	1e050 <flatcc_builder_table_add@@Base>
   187e4:	cmp	r0, #0
   187e8:	beq	19274 <_start@@Base+0x69c0>
   187ec:	ldrd	r2, [sp, #48]	; 0x30
   187f0:	strd	r2, [r0]
   187f4:	b	16010 <_start@@Base+0x375c>
   187f8:	add	r5, r5, #16
   187fc:	mov	r1, r8
   18800:	mov	r0, r5
   18804:	bl	129e0 <_start@@Base+0x12c>
   18808:	mov	r0, #0
   1880c:	and	r1, r1, #-16777216	; 0xff000000
   18810:	cmp	r1, #1627389952	; 0x61000000
   18814:	cmpeq	r0, #0
   18818:	bne	188ec <_start@@Base+0x6038>
   1881c:	mov	r3, #1
   18820:	mov	r2, r8
   18824:	mov	r1, r5
   18828:	mov	r0, r4
   1882c:	bl	14674 <_start@@Base+0x1dc0>
   18830:	cmp	r5, r0
   18834:	mov	r6, r0
   18838:	beq	188d4 <_start@@Base+0x6020>
   1883c:	add	r5, sp, #56	; 0x38
   18840:	mov	r2, #0
   18844:	mov	r3, #0
   18848:	mov	r1, r0
   1884c:	strd	r2, [r5, #-8]!
   18850:	mov	r0, r4
   18854:	mov	r3, r5
   18858:	mov	r2, r8
   1885c:	bl	15dc8 <_start@@Base+0x3514>
   18860:	cmp	r6, r0
   18864:	mov	r9, r0
   18868:	bne	18894 <_start@@Base+0x5fe0>
   1886c:	mov	r1, r0
   18870:	str	r5, [sp]
   18874:	ldr	r3, [pc, #656]	; 18b0c <_start@@Base+0x6258>
   18878:	mov	r2, r8
   1887c:	mov	r0, r4
   18880:	bl	15c60 <_start@@Base+0x33ac>
   18884:	cmp	r8, r0
   18888:	cmpne	r9, r0
   1888c:	mov	r9, r0
   18890:	beq	19274 <_start@@Base+0x69c0>
   18894:	ldrd	r2, [sp, #48]	; 0x30
   18898:	orrs	r3, r2, r3
   1889c:	bne	188ac <_start@@Base+0x5ff8>
   188a0:	ldr	r3, [r4, #8]
   188a4:	tst	r3, #2
   188a8:	beq	16010 <_start@@Base+0x375c>
   188ac:	mov	r3, #8
   188b0:	mov	r2, r3
   188b4:	mov	r1, #22
   188b8:	ldr	r0, [r4]
   188bc:	bl	1e050 <flatcc_builder_table_add@@Base>
   188c0:	cmp	r0, #0
   188c4:	beq	19274 <_start@@Base+0x69c0>
   188c8:	ldrd	r2, [sp, #48]	; 0x30
   188cc:	strd	r2, [r0]
   188d0:	b	16010 <_start@@Base+0x375c>
   188d4:	mov	r2, r8
   188d8:	mov	r1, r5
   188dc:	mov	r0, r4
   188e0:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   188e4:	mov	r9, r0
   188e8:	b	16010 <_start@@Base+0x375c>
   188ec:	mov	r2, r8
   188f0:	mov	r1, r5
   188f4:	mov	r0, r4
   188f8:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   188fc:	mov	r9, r0
   18900:	b	16010 <_start@@Base+0x375c>
   18904:	mov	r2, r8
   18908:	mov	r1, r6
   1890c:	mov	r0, r4
   18910:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   18914:	mov	r9, r0
   18918:	b	16010 <_start@@Base+0x375c>
   1891c:	add	r3, pc, #476	; 0x1dc
   18920:	ldrd	r2, [r3]
   18924:	cmp	r1, r3
   18928:	cmpeq	r0, r2
   1892c:	bne	18b18 <_start@@Base+0x6264>
   18930:	mov	r3, #8
   18934:	mov	r2, r8
   18938:	mov	r1, r6
   1893c:	mov	r0, r4
   18940:	bl	14674 <_start@@Base+0x1dc0>
   18944:	cmp	r6, r0
   18948:	mov	r7, r0
   1894c:	beq	189e4 <_start@@Base+0x6130>
   18950:	add	r5, sp, #56	; 0x38
   18954:	mov	r3, #0
   18958:	str	r3, [r5, #-8]!
   1895c:	mov	r1, r0
   18960:	mov	r3, r5
   18964:	mov	r2, r8
   18968:	mov	r0, r4
   1896c:	bl	1482c <_start@@Base+0x1f78>
   18970:	cmp	r7, r0
   18974:	mov	r9, r0
   18978:	bne	189a4 <_start@@Base+0x60f0>
   1897c:	mov	r1, r0
   18980:	str	r5, [sp]
   18984:	ldr	r3, [pc, #388]	; 18b10 <_start@@Base+0x625c>
   18988:	mov	r2, r8
   1898c:	mov	r0, r4
   18990:	bl	14ddc <_start@@Base+0x2528>
   18994:	cmp	r8, r0
   18998:	cmpne	r9, r0
   1899c:	mov	r9, r0
   189a0:	beq	19274 <_start@@Base+0x69c0>
   189a4:	ldr	r3, [sp, #48]	; 0x30
   189a8:	cmp	r3, #0
   189ac:	bne	189bc <_start@@Base+0x6108>
   189b0:	ldr	r3, [r4, #8]
   189b4:	tst	r3, #2
   189b8:	beq	16010 <_start@@Base+0x375c>
   189bc:	mov	r3, #4
   189c0:	mov	r2, r3
   189c4:	mov	r1, #17
   189c8:	ldr	r0, [r4]
   189cc:	bl	1e050 <flatcc_builder_table_add@@Base>
   189d0:	cmp	r0, #0
   189d4:	beq	19274 <_start@@Base+0x69c0>
   189d8:	ldr	r3, [sp, #48]	; 0x30
   189dc:	str	r3, [r0]
   189e0:	b	16010 <_start@@Base+0x375c>
   189e4:	add	r5, r5, #16
   189e8:	mov	r1, r8
   189ec:	mov	r0, r5
   189f0:	bl	129e0 <_start@@Base+0x12c>
   189f4:	mov	r0, #0
   189f8:	and	r1, r1, #-16777216	; 0xff000000
   189fc:	cmp	r1, #1627389952	; 0x61000000
   18a00:	cmpeq	r0, #0
   18a04:	bne	18ad4 <_start@@Base+0x6220>
   18a08:	mov	r3, #1
   18a0c:	mov	r2, r8
   18a10:	mov	r1, r5
   18a14:	mov	r0, r4
   18a18:	bl	14674 <_start@@Base+0x1dc0>
   18a1c:	cmp	r5, r0
   18a20:	mov	r6, r0
   18a24:	beq	18abc <_start@@Base+0x6208>
   18a28:	add	r5, sp, #56	; 0x38
   18a2c:	mov	r3, #0
   18a30:	str	r3, [r5, #-8]!
   18a34:	mov	r1, r0
   18a38:	mov	r3, r5
   18a3c:	mov	r2, r8
   18a40:	mov	r0, r4
   18a44:	bl	1482c <_start@@Base+0x1f78>
   18a48:	cmp	r6, r0
   18a4c:	mov	r9, r0
   18a50:	bne	18a7c <_start@@Base+0x61c8>
   18a54:	mov	r1, r0
   18a58:	str	r5, [sp]
   18a5c:	ldr	r3, [pc, #176]	; 18b14 <_start@@Base+0x6260>
   18a60:	mov	r2, r8
   18a64:	mov	r0, r4
   18a68:	bl	14ddc <_start@@Base+0x2528>
   18a6c:	cmp	r8, r0
   18a70:	cmpne	r9, r0
   18a74:	mov	r9, r0
   18a78:	beq	19274 <_start@@Base+0x69c0>
   18a7c:	ldr	r3, [sp, #48]	; 0x30
   18a80:	cmp	r3, #0
   18a84:	bne	18a94 <_start@@Base+0x61e0>
   18a88:	ldr	r3, [r4, #8]
   18a8c:	tst	r3, #2
   18a90:	beq	16010 <_start@@Base+0x375c>
   18a94:	mov	r3, #4
   18a98:	mov	r2, r3
   18a9c:	mov	r1, #21
   18aa0:	ldr	r0, [r4]
   18aa4:	bl	1e050 <flatcc_builder_table_add@@Base>
   18aa8:	cmp	r0, #0
   18aac:	beq	19274 <_start@@Base+0x69c0>
   18ab0:	ldr	r3, [sp, #48]	; 0x30
   18ab4:	str	r3, [r0]
   18ab8:	b	16010 <_start@@Base+0x375c>
   18abc:	mov	r2, r8
   18ac0:	mov	r1, r5
   18ac4:	mov	r0, r4
   18ac8:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   18acc:	mov	r9, r0
   18ad0:	b	16010 <_start@@Base+0x375c>
   18ad4:	mov	r2, r8
   18ad8:	mov	r1, r5
   18adc:	mov	r0, r4
   18ae0:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   18ae4:	mov	r9, r0
   18ae8:	b	16010 <_start@@Base+0x375c>
   18aec:	nop			; (mov r0, r0)
   18af0:			; <UNDEFINED> instruction: 0x666e7630
   18af4:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   18af8:			; <UNDEFINED> instruction: 0x666e7631
   18afc:	teqvc	r6, #1593835520	; 0x5f000000
   18b00:			; <UNDEFINED> instruction: 0x666e7631
   18b04:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   18b08:	ldrdeq	r4, [r3], -r0
   18b0c:	ldrdeq	r4, [r3], -ip
   18b10:	andeq	r4, r3, r8, ror #3
   18b14:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   18b18:	add	r3, pc, #912	; 0x390
   18b1c:	ldrd	r2, [r3]
   18b20:	cmp	r1, r3
   18b24:	cmpeq	r0, r2
   18b28:	bne	18cf0 <_start@@Base+0x643c>
   18b2c:	mov	r3, #8
   18b30:	mov	r2, r8
   18b34:	mov	r1, r6
   18b38:	mov	r0, r4
   18b3c:	bl	14674 <_start@@Base+0x1dc0>
   18b40:	cmp	r6, r0
   18b44:	mov	r7, r0
   18b48:	beq	18be4 <_start@@Base+0x6330>
   18b4c:	add	r5, sp, #56	; 0x38
   18b50:	mov	r2, #0
   18b54:	mov	r3, #0
   18b58:	mov	r1, r0
   18b5c:	strd	r2, [r5, #-8]!
   18b60:	mov	r0, r4
   18b64:	mov	r3, r5
   18b68:	mov	r2, r8
   18b6c:	bl	147a4 <_start@@Base+0x1ef0>
   18b70:	cmp	r7, r0
   18b74:	mov	r9, r0
   18b78:	bne	18ba4 <_start@@Base+0x62f0>
   18b7c:	mov	r1, r0
   18b80:	str	r5, [sp]
   18b84:	ldr	r3, [pc, #844]	; 18ed8 <_start@@Base+0x6624>
   18b88:	mov	r2, r8
   18b8c:	mov	r0, r4
   18b90:	bl	126e8 <__assert_fail@plt+0x10>
   18b94:	cmp	r8, r0
   18b98:	cmpne	r9, r0
   18b9c:	mov	r9, r0
   18ba0:	beq	19274 <_start@@Base+0x69c0>
   18ba4:	ldrd	r2, [sp, #48]	; 0x30
   18ba8:	orrs	r3, r2, r3
   18bac:	bne	18bbc <_start@@Base+0x6308>
   18bb0:	ldr	r3, [r4, #8]
   18bb4:	tst	r3, #2
   18bb8:	beq	16010 <_start@@Base+0x375c>
   18bbc:	mov	r3, #8
   18bc0:	mov	r2, r3
   18bc4:	mov	r1, #19
   18bc8:	ldr	r0, [r4]
   18bcc:	bl	1e050 <flatcc_builder_table_add@@Base>
   18bd0:	cmp	r0, #0
   18bd4:	beq	19274 <_start@@Base+0x69c0>
   18bd8:	ldrd	r2, [sp, #48]	; 0x30
   18bdc:	strd	r2, [r0]
   18be0:	b	16010 <_start@@Base+0x375c>
   18be4:	add	r5, r5, #16
   18be8:	mov	r1, r8
   18bec:	mov	r0, r5
   18bf0:	bl	129e0 <_start@@Base+0x12c>
   18bf4:	mov	r0, #0
   18bf8:	and	r1, r1, #-16777216	; 0xff000000
   18bfc:	cmp	r1, #1627389952	; 0x61000000
   18c00:	cmpeq	r0, #0
   18c04:	bne	18cd8 <_start@@Base+0x6424>
   18c08:	mov	r3, #1
   18c0c:	mov	r2, r8
   18c10:	mov	r1, r5
   18c14:	mov	r0, r4
   18c18:	bl	14674 <_start@@Base+0x1dc0>
   18c1c:	cmp	r5, r0
   18c20:	mov	r6, r0
   18c24:	beq	18cc0 <_start@@Base+0x640c>
   18c28:	add	r5, sp, #56	; 0x38
   18c2c:	mov	r2, #0
   18c30:	mov	r3, #0
   18c34:	mov	r1, r0
   18c38:	strd	r2, [r5, #-8]!
   18c3c:	mov	r0, r4
   18c40:	mov	r3, r5
   18c44:	mov	r2, r8
   18c48:	bl	147a4 <_start@@Base+0x1ef0>
   18c4c:	cmp	r6, r0
   18c50:	mov	r9, r0
   18c54:	bne	18c80 <_start@@Base+0x63cc>
   18c58:	mov	r1, r0
   18c5c:	str	r5, [sp]
   18c60:	ldr	r3, [pc, #628]	; 18edc <_start@@Base+0x6628>
   18c64:	mov	r2, r8
   18c68:	mov	r0, r4
   18c6c:	bl	126e8 <__assert_fail@plt+0x10>
   18c70:	cmp	r8, r0
   18c74:	cmpne	r9, r0
   18c78:	mov	r9, r0
   18c7c:	beq	19274 <_start@@Base+0x69c0>
   18c80:	ldrd	r2, [sp, #48]	; 0x30
   18c84:	orrs	r3, r2, r3
   18c88:	bne	18c98 <_start@@Base+0x63e4>
   18c8c:	ldr	r3, [r4, #8]
   18c90:	tst	r3, #2
   18c94:	beq	16010 <_start@@Base+0x375c>
   18c98:	mov	r3, #8
   18c9c:	mov	r2, r3
   18ca0:	mov	r1, #23
   18ca4:	ldr	r0, [r4]
   18ca8:	bl	1e050 <flatcc_builder_table_add@@Base>
   18cac:	cmp	r0, #0
   18cb0:	beq	19274 <_start@@Base+0x69c0>
   18cb4:	ldrd	r2, [sp, #48]	; 0x30
   18cb8:	strd	r2, [r0]
   18cbc:	b	16010 <_start@@Base+0x375c>
   18cc0:	mov	r2, r8
   18cc4:	mov	r1, r5
   18cc8:	mov	r0, r4
   18ccc:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   18cd0:	mov	r9, r0
   18cd4:	b	16010 <_start@@Base+0x375c>
   18cd8:	mov	r2, r8
   18cdc:	mov	r1, r5
   18ce0:	mov	r0, r4
   18ce4:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   18ce8:	mov	r9, r0
   18cec:	b	16010 <_start@@Base+0x375c>
   18cf0:	mov	r2, r8
   18cf4:	mov	r1, r6
   18cf8:	mov	r0, r4
   18cfc:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   18d00:	mov	r9, r0
   18d04:	b	16010 <_start@@Base+0x375c>
   18d08:	add	r3, pc, #424	; 0x1a8
   18d0c:	ldrd	r2, [r3]
   18d10:	cmp	r1, r3
   18d14:	cmpeq	r0, r2
   18d18:	bhi	18f90 <_start@@Base+0x66dc>
   18d1c:	add	r3, pc, #412	; 0x19c
   18d20:	ldrd	r2, [r3]
   18d24:	cmp	r1, r3
   18d28:	cmpeq	r0, r2
   18d2c:	bne	18f78 <_start@@Base+0x66c4>
   18d30:	add	r6, r5, #8
   18d34:	mov	r1, r8
   18d38:	mov	r0, r6
   18d3c:	bl	129e0 <_start@@Base+0x12c>
   18d40:	add	r3, pc, #384	; 0x180
   18d44:	ldrd	r2, [r3]
   18d48:	cmp	r1, r3
   18d4c:	cmpeq	r0, r2
   18d50:	bne	18f60 <_start@@Base+0x66ac>
   18d54:	add	r5, r5, #16
   18d58:	mov	r1, r8
   18d5c:	mov	r0, r5
   18d60:	bl	129e0 <_start@@Base+0x12c>
   18d64:	add	r3, pc, #356	; 0x164
   18d68:	ldrd	r2, [r3]
   18d6c:	mov	r0, #0
   18d70:	cmp	r1, r3
   18d74:	cmpeq	r0, r2
   18d78:	bne	18f48 <_start@@Base+0x6694>
   18d7c:	mov	r3, #4
   18d80:	mov	r2, r8
   18d84:	mov	r1, r5
   18d88:	mov	r0, r4
   18d8c:	bl	14674 <_start@@Base+0x1dc0>
   18d90:	cmp	r5, r0
   18d94:	mov	r9, r0
   18d98:	beq	18f30 <_start@@Base+0x667c>
   18d9c:	cmp	r8, r0
   18da0:	beq	18ee4 <_start@@Base+0x6630>
   18da4:	ldrb	r3, [r0]
   18da8:	cmp	r3, #91	; 0x5b
   18dac:	bne	18ee4 <_start@@Base+0x6630>
   18db0:	mov	r2, #1
   18db4:	mvn	r3, #0
   18db8:	mov	r1, r2
   18dbc:	ldr	r0, [r4]
   18dc0:	bl	1cf74 <flatcc_builder_start_vector@@Base>
   18dc4:	subs	r5, r0, #0
   18dc8:	bne	19274 <_start@@Base+0x69c0>
   18dcc:	mov	r1, r9
   18dd0:	add	r3, sp, #28
   18dd4:	mov	r2, r8
   18dd8:	mov	r0, r4
   18ddc:	bl	1471c <_start@@Base+0x1e68>
   18de0:	ldr	r7, [pc, #248]	; 18ee0 <_start@@Base+0x662c>
   18de4:	add	r6, sp, #48	; 0x30
   18de8:	mov	r9, r0
   18dec:	ldr	r3, [sp, #28]
   18df0:	cmp	r3, #0
   18df4:	bne	18e30 <_start@@Base+0x657c>
   18df8:	ldr	r0, [r4]
   18dfc:	bl	1d8ec <flatcc_builder_end_vector@@Base>
   18e00:	str	r0, [sp, #32]
   18e04:	ldr	r3, [sp, #32]
   18e08:	cmp	r3, #0
   18e0c:	beq	19274 <_start@@Base+0x69c0>
   18e10:	mov	r1, #13
   18e14:	ldr	r0, [r4]
   18e18:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   18e1c:	cmp	r0, #0
   18e20:	beq	19274 <_start@@Base+0x69c0>
   18e24:	ldr	r3, [sp, #32]
   18e28:	str	r3, [r0]
   18e2c:	b	16010 <_start@@Base+0x375c>
   18e30:	mov	r1, #1
   18e34:	ldr	r0, [r4]
   18e38:	strb	r5, [sp, #48]	; 0x30
   18e3c:	bl	1ca9c <flatcc_builder_extend_vector@@Base>
   18e40:	subs	sl, r0, #0
   18e44:	beq	1926c <_start@@Base+0x69b8>
   18e48:	mov	r1, r9
   18e4c:	mov	r3, r6
   18e50:	mov	r2, r8
   18e54:	mov	r0, r4
   18e58:	bl	14968 <_start@@Base+0x20b4>
   18e5c:	cmp	r9, r0
   18e60:	mov	r1, r0
   18e64:	bne	18e8c <_start@@Base+0x65d8>
   18e68:	str	r6, [sp]
   18e6c:	mov	r3, r7
   18e70:	mov	r2, r8
   18e74:	mov	r0, r4
   18e78:	bl	14ca0 <_start@@Base+0x23ec>
   18e7c:	cmp	r8, r0
   18e80:	cmpne	r9, r0
   18e84:	mov	r1, r0
   18e88:	beq	19270 <_start@@Base+0x69bc>
   18e8c:	ldrb	r3, [sp, #48]	; 0x30
   18e90:	mov	r2, r8
   18e94:	mov	r0, r4
   18e98:	strb	r3, [sl]
   18e9c:	add	r3, sp, #28
   18ea0:	bl	136a0 <_start@@Base+0xdec>
   18ea4:	mov	r9, r0
   18ea8:	b	18dec <_start@@Base+0x6538>
   18eac:	nop			; (mov r0, r0)
   18eb0:			; <UNDEFINED> instruction: 0x666e7631
   18eb4:	ldrvc	r3, [r6, #-1119]!	; 0xfffffba1
   18eb8:	svcvs	0x00725f6e
   18ebc:			; <UNDEFINED> instruction: 0x76656374
   18ec0:	mcrvs	3, 3, r7, cr5, cr4, {3}
   18ec4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   18ec8:	cmnvs	r4, r5, ror r2
   18ecc:	strbvs	r6, [r4, #-1644]!	; 0xfffff994
   18ed0:	andeq	r0, r0, r0
   18ed4:			; <UNDEFINED> instruction: 0x66666572
   18ed8:	andeq	r4, r3, r0, lsl #4
   18edc:	andeq	r4, r3, ip, lsl #4
   18ee0:	andeq	r4, r3, r8, lsl r2
   18ee4:	mov	r3, #0
   18ee8:	mov	r2, r3
   18eec:	mov	r1, r3
   18ef0:	ldr	r0, [r4]
   18ef4:	bl	1c88c <flatcc_builder_start_buffer@@Base>
   18ef8:	cmp	r0, #0
   18efc:	bne	19274 <_start@@Base+0x69c0>
   18f00:	mov	r1, r9
   18f04:	add	r3, sp, #32
   18f08:	mov	r2, r8
   18f0c:	mov	r0, r4
   18f10:	bl	15e74 <_start@@Base+0x35c0>
   18f14:	ldr	r1, [sp, #32]
   18f18:	cmp	r1, #0
   18f1c:	mov	r9, r0
   18f20:	beq	19274 <_start@@Base+0x69c0>
   18f24:	ldr	r0, [r4]
   18f28:	bl	1c92c <flatcc_builder_end_buffer@@Base>
   18f2c:	b	18e00 <_start@@Base+0x654c>
   18f30:	mov	r1, r0
   18f34:	mov	r2, r8
   18f38:	mov	r0, r4
   18f3c:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   18f40:	mov	r9, r0
   18f44:	b	16010 <_start@@Base+0x375c>
   18f48:	mov	r2, r8
   18f4c:	mov	r1, r5
   18f50:	mov	r0, r4
   18f54:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   18f58:	mov	r9, r0
   18f5c:	b	16010 <_start@@Base+0x375c>
   18f60:	mov	r2, r8
   18f64:	mov	r1, r6
   18f68:	mov	r0, r4
   18f6c:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   18f70:	mov	r9, r0
   18f74:	b	16010 <_start@@Base+0x375c>
   18f78:	mov	r2, r8
   18f7c:	mov	r1, r5
   18f80:	mov	r0, r4
   18f84:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   18f88:	mov	r9, r0
   18f8c:	b	16010 <_start@@Base+0x375c>
   18f90:	add	r3, pc, #904	; 0x388
   18f94:	ldrd	r2, [r3]
   18f98:	cmp	r1, r3
   18f9c:	cmpeq	r0, r2
   18fa0:	bne	192c0 <_start@@Base+0x6a0c>
   18fa4:	add	r6, r5, #8
   18fa8:	mov	r1, r8
   18fac:	mov	r0, r6
   18fb0:	bl	129e0 <_start@@Base+0x12c>
   18fb4:	add	r3, pc, #876	; 0x36c
   18fb8:	ldrd	r2, [r3]
   18fbc:	cmp	r1, r3
   18fc0:	cmpeq	r0, r2
   18fc4:	bne	19134 <_start@@Base+0x6880>
   18fc8:	add	r5, r5, #16
   18fcc:	mov	r1, r8
   18fd0:	mov	r0, r5
   18fd4:	bl	129e0 <_start@@Base+0x12c>
   18fd8:	mov	r0, #0
   18fdc:	and	r1, r1, #-16777216	; 0xff000000
   18fe0:	cmp	r1, #1929379840	; 0x73000000
   18fe4:	cmpeq	r0, #0
   18fe8:	bne	1911c <_start@@Base+0x6868>
   18fec:	mov	r3, #1
   18ff0:	mov	r2, r8
   18ff4:	mov	r1, r5
   18ff8:	mov	r0, r4
   18ffc:	bl	14674 <_start@@Base+0x1dc0>
   19000:	cmp	r5, r0
   19004:	mov	r9, r0
   19008:	beq	19104 <_start@@Base+0x6850>
   1900c:	mov	r2, #8
   19010:	mvn	r3, #-536870912	; 0xe0000000
   19014:	mov	r1, r2
   19018:	ldr	r0, [r4]
   1901c:	bl	1cf74 <flatcc_builder_start_vector@@Base>
   19020:	cmp	r0, #0
   19024:	bne	19274 <_start@@Base+0x69c0>
   19028:	mov	r1, r9
   1902c:	add	r3, sp, #28
   19030:	mov	r2, r8
   19034:	mov	r0, r4
   19038:	bl	1471c <_start@@Base+0x1e68>
   1903c:	ldr	r6, [pc, #756]	; 19338 <_start@@Base+0x6a84>
   19040:	add	r5, sp, #48	; 0x30
   19044:	mov	r9, r0
   19048:	ldr	r3, [sp, #28]
   1904c:	cmp	r3, #0
   19050:	bne	19088 <_start@@Base+0x67d4>
   19054:	ldr	r0, [r4]
   19058:	bl	1d8ec <flatcc_builder_end_vector@@Base>
   1905c:	cmp	r0, #0
   19060:	str	r0, [sp, #32]
   19064:	beq	19274 <_start@@Base+0x69c0>
   19068:	mov	r1, #33	; 0x21
   1906c:	ldr	r0, [r4]
   19070:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   19074:	cmp	r0, #0
   19078:	beq	19274 <_start@@Base+0x69c0>
   1907c:	ldr	r3, [sp, #32]
   19080:	str	r3, [r0]
   19084:	b	16010 <_start@@Base+0x375c>
   19088:	mov	r1, #1
   1908c:	ldr	r0, [r4]
   19090:	vstr	d9, [sp, #48]	; 0x30
   19094:	bl	1ca9c <flatcc_builder_extend_vector@@Base>
   19098:	subs	r7, r0, #0
   1909c:	beq	1926c <_start@@Base+0x69b8>
   190a0:	mov	r1, r9
   190a4:	mov	r3, r5
   190a8:	mov	r2, r8
   190ac:	mov	r0, r4
   190b0:	bl	20550 <flatcc_json_parser_double@@Base>
   190b4:	cmp	r9, r0
   190b8:	mov	r1, r0
   190bc:	bne	190e4 <_start@@Base+0x6830>
   190c0:	str	r5, [sp]
   190c4:	mov	r3, r6
   190c8:	mov	r2, r8
   190cc:	mov	r0, r4
   190d0:	bl	13afc <_start@@Base+0x1248>
   190d4:	cmp	r8, r0
   190d8:	cmpne	r9, r0
   190dc:	mov	r1, r0
   190e0:	beq	19270 <_start@@Base+0x69bc>
   190e4:	ldrd	r2, [sp, #48]	; 0x30
   190e8:	mov	r0, r4
   190ec:	strd	r2, [r7]
   190f0:	add	r3, sp, #28
   190f4:	mov	r2, r8
   190f8:	bl	136a0 <_start@@Base+0xdec>
   190fc:	mov	r9, r0
   19100:	b	19048 <_start@@Base+0x6794>
   19104:	mov	r1, r0
   19108:	mov	r2, r8
   1910c:	mov	r0, r4
   19110:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   19114:	mov	r9, r0
   19118:	b	16010 <_start@@Base+0x375c>
   1911c:	mov	r2, r8
   19120:	mov	r1, r5
   19124:	mov	r0, r4
   19128:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   1912c:	mov	r9, r0
   19130:	b	16010 <_start@@Base+0x375c>
   19134:	add	r3, pc, #500	; 0x1f4
   19138:	ldrd	r2, [r3]
   1913c:	bic	r0, r0, #255	; 0xff
   19140:	cmp	r1, r3
   19144:	cmpeq	r0, r2
   19148:	bne	192a8 <_start@@Base+0x69f4>
   1914c:	mov	r3, #7
   19150:	mov	r2, r8
   19154:	mov	r1, r6
   19158:	mov	r0, r4
   1915c:	bl	14674 <_start@@Base+0x1dc0>
   19160:	cmp	r6, r0
   19164:	mov	r9, r0
   19168:	beq	19290 <_start@@Base+0x69dc>
   1916c:	mov	r2, #8
   19170:	mvn	r3, #-536870912	; 0xe0000000
   19174:	mov	r1, r2
   19178:	ldr	r0, [r4]
   1917c:	bl	1cf74 <flatcc_builder_start_vector@@Base>
   19180:	cmp	r0, #0
   19184:	bne	19274 <_start@@Base+0x69c0>
   19188:	mov	r1, r9
   1918c:	add	r3, sp, #28
   19190:	mov	r2, r8
   19194:	mov	r0, r4
   19198:	bl	1471c <_start@@Base+0x1e68>
   1919c:	ldr	sl, [pc, #408]	; 1933c <_start@@Base+0x6a88>
   191a0:	mov	r6, #0
   191a4:	mov	r7, #0
   191a8:	add	r5, sp, #48	; 0x30
   191ac:	mov	r9, r0
   191b0:	ldr	r3, [sp, #28]
   191b4:	cmp	r3, #0
   191b8:	bne	191f0 <_start@@Base+0x693c>
   191bc:	ldr	r0, [r4]
   191c0:	bl	1d8ec <flatcc_builder_end_vector@@Base>
   191c4:	cmp	r0, #0
   191c8:	str	r0, [sp, #32]
   191cc:	beq	19274 <_start@@Base+0x69c0>
   191d0:	mov	r1, #32
   191d4:	ldr	r0, [r4]
   191d8:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   191dc:	cmp	r0, #0
   191e0:	beq	19274 <_start@@Base+0x69c0>
   191e4:	ldr	r3, [sp, #32]
   191e8:	str	r3, [r0]
   191ec:	b	16010 <_start@@Base+0x375c>
   191f0:	mov	r1, #1
   191f4:	ldr	r0, [r4]
   191f8:	strd	r6, [sp, #48]	; 0x30
   191fc:	bl	1ca9c <flatcc_builder_extend_vector@@Base>
   19200:	subs	fp, r0, #0
   19204:	beq	1926c <_start@@Base+0x69b8>
   19208:	mov	r1, r9
   1920c:	mov	r3, r5
   19210:	mov	r2, r8
   19214:	mov	r0, r4
   19218:	bl	15dc8 <_start@@Base+0x3514>
   1921c:	cmp	r9, r0
   19220:	mov	r1, r0
   19224:	bne	1924c <_start@@Base+0x6998>
   19228:	str	r5, [sp]
   1922c:	mov	r3, sl
   19230:	mov	r2, r8
   19234:	mov	r0, r4
   19238:	bl	15c60 <_start@@Base+0x33ac>
   1923c:	cmp	r8, r0
   19240:	cmpne	r9, r0
   19244:	mov	r1, r0
   19248:	beq	19270 <_start@@Base+0x69bc>
   1924c:	ldrd	r2, [sp, #48]	; 0x30
   19250:	mov	r0, r4
   19254:	strd	r2, [fp]
   19258:	add	r3, sp, #28
   1925c:	mov	r2, r8
   19260:	bl	136a0 <_start@@Base+0xdec>
   19264:	mov	r9, r0
   19268:	b	191b0 <_start@@Base+0x68fc>
   1926c:	mov	r1, r9
   19270:	mov	r9, r1
   19274:	mov	r1, r9
   19278:	mov	r3, #33	; 0x21
   1927c:	mov	r2, r8
   19280:	mov	r0, r4
   19284:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   19288:	mov	r9, r0
   1928c:	b	19308 <_start@@Base+0x6a54>
   19290:	mov	r1, r0
   19294:	mov	r2, r8
   19298:	mov	r0, r4
   1929c:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   192a0:	mov	r9, r0
   192a4:	b	16010 <_start@@Base+0x375c>
   192a8:	mov	r2, r8
   192ac:	mov	r1, r6
   192b0:	mov	r0, r4
   192b4:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   192b8:	mov	r9, r0
   192bc:	b	16010 <_start@@Base+0x375c>
   192c0:	mov	r2, r8
   192c4:	mov	r1, r5
   192c8:	mov	r0, r4
   192cc:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   192d0:	mov	r9, r0
   192d4:	b	16010 <_start@@Base+0x375c>
   192d8:	ldr	r3, [sp, #36]	; 0x24
   192dc:	mov	r1, r9
   192e0:	mov	r2, r8
   192e4:	mov	r0, r4
   192e8:	bl	212e0 <flatcc_json_parser_finalize_unions@@Base>
   192ec:	mov	r9, r0
   192f0:	ldr	r0, [r4]
   192f4:	bl	1d6cc <flatcc_builder_end_table@@Base>
   192f8:	ldr	r3, [sp, #20]
   192fc:	cmp	r0, #0
   19300:	str	r0, [r3]
   19304:	beq	19274 <_start@@Base+0x69c0>
   19308:	mov	r0, r9
   1930c:	add	sp, sp, #60	; 0x3c
   19310:	vpop	{d8-d9}
   19314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19318:	mov	r9, r5
   1931c:	b	19274 <_start@@Base+0x69c0>
   19320:	svcvs	0x00725f6f
   19324:			; <UNDEFINED> instruction: 0x76656374
   19328:	strbvc	r6, [r2, #-3173]!	; 0xfffff39b
   1932c:	ldrbvs	r6, [pc], -pc, ror #8
   19330:	cdpvs	3, 6, cr7, cr7, cr0, {0}
   19334:	ldrbvs	r6, [pc], -pc, ror #24
   19338:	andeq	r4, r3, r4, lsr #4
   1933c:	andeq	r4, r3, r0, lsr r2
   19340:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19344:	sub	sp, sp, #60	; 0x3c
   19348:	mov	r6, r1
   1934c:	ldr	r1, [sp, #96]	; 0x60
   19350:	mov	r5, r2
   19354:	mov	r2, #0
   19358:	mov	r4, r0
   1935c:	str	r2, [r1]
   19360:	cmp	r3, #4
   19364:	ldrls	pc, [pc, r3, lsl #2]
   19368:	b	1af94 <_start@@Base+0x86e0>
   1936c:	andeq	r9, r1, r0, lsl #7
   19370:	muleq	r1, r4, r3
   19374:	ldrdeq	r9, [r1], -r8
   19378:	andeq	r9, r1, ip, lsr #15
   1937c:	strdeq	r9, [r1], -r0
   19380:	mov	r2, r5
   19384:	mov	r1, r6
   19388:	bl	12b60 <_start@@Base+0x2ac>
   1938c:	add	sp, sp, #60	; 0x3c
   19390:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19394:	ldr	r3, [sp, #96]	; 0x60
   19398:	mov	r2, r5
   1939c:	mov	r1, r6
   193a0:	bl	15e74 <_start@@Base+0x35c0>
   193a4:	ldr	r3, [r4, #24]
   193a8:	cmp	r3, #0
   193ac:	bne	1938c <_start@@Base+0x6ad8>
   193b0:	ldr	r3, [sp, #96]	; 0x60
   193b4:	ldr	r3, [r3]
   193b8:	cmp	r3, #0
   193bc:	bne	1938c <_start@@Base+0x6ad8>
   193c0:	mov	r3, #33	; 0x21
   193c4:	mov	r2, r5
   193c8:	mov	r1, r0
   193cc:	mov	r0, r4
   193d0:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   193d4:	b	1938c <_start@@Base+0x6ad8>
   193d8:	mov	r1, #4
   193dc:	ldr	r0, [r0]
   193e0:	bl	1d090 <flatcc_builder_start_table@@Base>
   193e4:	cmp	r0, #0
   193e8:	bne	19b94 <_start@@Base+0x72e0>
   193ec:	mov	r1, r6
   193f0:	add	r3, sp, #48	; 0x30
   193f4:	mov	r2, r5
   193f8:	mov	r0, r4
   193fc:	bl	14520 <_start@@Base+0x1c6c>
   19400:	add	r9, pc, #952	; 0x3b8
   19404:	ldrd	r8, [r9]
   19408:	mov	r6, r0
   1940c:	ldr	r3, [sp, #48]	; 0x30
   19410:	cmp	r3, #0
   19414:	bne	19444 <_start@@Base+0x6b90>
   19418:	ldr	r3, [r4, #24]
   1941c:	cmp	r3, #0
   19420:	bne	19b94 <_start@@Base+0x72e0>
   19424:	ldr	r0, [r4]
   19428:	bl	1d6cc <flatcc_builder_end_table@@Base>
   1942c:	ldr	r3, [sp, #96]	; 0x60
   19430:	cmp	r0, #0
   19434:	str	r0, [r3]
   19438:	beq	19b94 <_start@@Base+0x72e0>
   1943c:	mov	r0, r6
   19440:	b	193a4 <_start@@Base+0x6af0>
   19444:	mov	r2, r5
   19448:	mov	r1, r6
   1944c:	mov	r0, r4
   19450:	bl	13830 <_start@@Base+0xf7c>
   19454:	mov	r1, r5
   19458:	mov	fp, r0
   1945c:	bl	129e0 <_start@@Base+0x12c>
   19460:	ldr	r2, [pc, #880]	; 197d8 <_start@@Base+0x6f24>
   19464:	mvn	r3, #0
   19468:	and	r2, r2, r0
   1946c:	and	r3, r3, r1
   19470:	mov	r6, r0
   19474:	mov	r7, r1
   19478:	add	r1, pc, #840	; 0x348
   1947c:	ldrd	r0, [r1]
   19480:	cmp	r3, r1
   19484:	cmpeq	r2, r0
   19488:	bne	19558 <_start@@Base+0x6ca4>
   1948c:	mov	r3, #6
   19490:	mov	r2, r5
   19494:	mov	r1, fp
   19498:	mov	r0, r4
   1949c:	bl	14674 <_start@@Base+0x1dc0>
   194a0:	cmp	fp, r0
   194a4:	mov	sl, r0
   194a8:	beq	19610 <_start@@Base+0x6d5c>
   194ac:	add	r7, sp, #56	; 0x38
   194b0:	mov	r3, #0
   194b4:	strb	r3, [r7, #-12]!
   194b8:	mov	r1, r0
   194bc:	mov	r3, r7
   194c0:	mov	r2, r5
   194c4:	mov	r0, r4
   194c8:	bl	14bf8 <_start@@Base+0x2344>
   194cc:	cmp	sl, r0
   194d0:	mov	r6, r0
   194d4:	bne	19500 <_start@@Base+0x6c4c>
   194d8:	mov	r1, r0
   194dc:	str	r7, [sp]
   194e0:	ldr	r3, [pc, #756]	; 197dc <_start@@Base+0x6f28>
   194e4:	mov	r2, r5
   194e8:	mov	r0, r4
   194ec:	bl	15060 <_start@@Base+0x27ac>
   194f0:	cmp	r5, r0
   194f4:	cmpne	r6, r0
   194f8:	mov	r6, r0
   194fc:	beq	19b94 <_start@@Base+0x72e0>
   19500:	ldrsb	r3, [sp, #44]	; 0x2c
   19504:	cmp	r3, #2
   19508:	bne	19518 <_start@@Base+0x6c64>
   1950c:	ldr	r3, [r4, #8]
   19510:	tst	r3, #2
   19514:	beq	1953c <_start@@Base+0x6c88>
   19518:	mov	r3, #1
   1951c:	mov	r2, r3
   19520:	mov	r1, r3
   19524:	ldr	r0, [r4]
   19528:	bl	1e050 <flatcc_builder_table_add@@Base>
   1952c:	cmp	r0, #0
   19530:	beq	19b94 <_start@@Base+0x72e0>
   19534:	ldrsb	r3, [sp, #44]	; 0x2c
   19538:	strb	r3, [r0]
   1953c:	mov	r1, r6
   19540:	add	r3, sp, #48	; 0x30
   19544:	mov	r2, r5
   19548:	mov	r0, r4
   1954c:	bl	13758 <_start@@Base+0xea4>
   19550:	mov	r6, r0
   19554:	b	1940c <_start@@Base+0x6b58>
   19558:	add	r3, pc, #624	; 0x270
   1955c:	ldrd	r2, [r3]
   19560:	and	r0, r6, #-16777216	; 0xff000000
   19564:	cmp	r7, r3
   19568:	cmpeq	r0, r2
   1956c:	movne	sl, fp
   19570:	bne	19610 <_start@@Base+0x6d5c>
   19574:	mov	r3, #5
   19578:	mov	r2, r5
   1957c:	mov	r1, fp
   19580:	mov	r0, r4
   19584:	bl	14674 <_start@@Base+0x1dc0>
   19588:	cmp	fp, r0
   1958c:	mov	sl, r0
   19590:	beq	19610 <_start@@Base+0x6d5c>
   19594:	add	r7, sp, #56	; 0x38
   19598:	mov	r3, #0
   1959c:	strb	r3, [r7, #-12]!
   195a0:	mov	r1, r0
   195a4:	mov	r3, r7
   195a8:	mov	r2, r5
   195ac:	mov	r0, r4
   195b0:	bl	14bf8 <_start@@Base+0x2344>
   195b4:	cmp	sl, r0
   195b8:	mov	r6, r0
   195bc:	bne	195e8 <_start@@Base+0x6d34>
   195c0:	mov	r1, r0
   195c4:	str	r7, [sp]
   195c8:	ldr	r3, [pc, #528]	; 197e0 <_start@@Base+0x6f2c>
   195cc:	mov	r2, r5
   195d0:	mov	r0, r4
   195d4:	bl	15060 <_start@@Base+0x27ac>
   195d8:	cmp	r5, r0
   195dc:	cmpne	r6, r0
   195e0:	mov	r6, r0
   195e4:	beq	19b94 <_start@@Base+0x72e0>
   195e8:	ldrsb	r3, [sp, #44]	; 0x2c
   195ec:	cmp	r3, #2
   195f0:	bne	19600 <_start@@Base+0x6d4c>
   195f4:	ldr	r3, [r4, #8]
   195f8:	tst	r3, #2
   195fc:	beq	1953c <_start@@Base+0x6c88>
   19600:	mov	r3, #1
   19604:	mov	r2, r3
   19608:	mov	r1, #0
   1960c:	b	19524 <_start@@Base+0x6c70>
   19610:	bic	r3, r7, #255	; 0xff
   19614:	mov	r2, #0
   19618:	cmp	r3, r9
   1961c:	cmpeq	r2, r8
   19620:	bne	196d4 <_start@@Base+0x6e20>
   19624:	mov	r3, #3
   19628:	mov	r2, r5
   1962c:	mov	r1, sl
   19630:	mov	r0, r4
   19634:	bl	14674 <_start@@Base+0x1dc0>
   19638:	cmp	sl, r0
   1963c:	mov	fp, r0
   19640:	beq	19794 <_start@@Base+0x6ee0>
   19644:	add	r7, sp, #56	; 0x38
   19648:	mov	r3, #0
   1964c:	strb	r3, [r7, #-12]!
   19650:	mov	r1, r0
   19654:	mov	r3, r7
   19658:	mov	r2, r5
   1965c:	mov	r0, r4
   19660:	bl	14968 <_start@@Base+0x20b4>
   19664:	cmp	fp, r0
   19668:	mov	r6, r0
   1966c:	bne	19698 <_start@@Base+0x6de4>
   19670:	mov	r1, r0
   19674:	str	r7, [sp]
   19678:	ldr	r3, [pc, #356]	; 197e4 <_start@@Base+0x6f30>
   1967c:	mov	r2, r5
   19680:	mov	r0, r4
   19684:	bl	14ca0 <_start@@Base+0x23ec>
   19688:	cmp	r5, r0
   1968c:	cmpne	r6, r0
   19690:	mov	r6, r0
   19694:	beq	19b94 <_start@@Base+0x72e0>
   19698:	ldrb	r3, [sp, #44]	; 0x2c
   1969c:	cmp	r3, #2
   196a0:	bne	196b0 <_start@@Base+0x6dfc>
   196a4:	ldr	r3, [r4, #8]
   196a8:	tst	r3, #2
   196ac:	beq	1953c <_start@@Base+0x6c88>
   196b0:	mov	r3, #1
   196b4:	mov	r2, r3
   196b8:	mov	r1, #3
   196bc:	ldr	r0, [r4]
   196c0:	bl	1e050 <flatcc_builder_table_add@@Base>
   196c4:	cmp	r0, #0
   196c8:	beq	19b94 <_start@@Base+0x72e0>
   196cc:	ldrb	r3, [sp, #44]	; 0x2c
   196d0:	b	19538 <_start@@Base+0x6c84>
   196d4:	ldr	r3, [pc, #252]	; 197d8 <_start@@Base+0x6f24>
   196d8:	mov	r2, #0
   196dc:	and	r7, r7, r3
   196e0:	ldr	r3, [pc, #256]	; 197e8 <_start@@Base+0x6f34>
   196e4:	and	r6, r6, r2
   196e8:	cmp	r7, r3
   196ec:	mov	r2, #0
   196f0:	cmpeq	r6, r2
   196f4:	bne	19794 <_start@@Base+0x6ee0>
   196f8:	mov	r3, #2
   196fc:	mov	r2, r5
   19700:	mov	r1, sl
   19704:	mov	r0, r4
   19708:	bl	14674 <_start@@Base+0x1dc0>
   1970c:	cmp	sl, r0
   19710:	mov	fp, r0
   19714:	beq	19794 <_start@@Base+0x6ee0>
   19718:	add	r7, sp, #56	; 0x38
   1971c:	mov	r3, #0
   19720:	strb	r3, [r7, #-12]!
   19724:	mov	r1, r0
   19728:	mov	r3, r7
   1972c:	mov	r2, r5
   19730:	mov	r0, r4
   19734:	bl	14968 <_start@@Base+0x20b4>
   19738:	cmp	fp, r0
   1973c:	mov	r6, r0
   19740:	bne	1976c <_start@@Base+0x6eb8>
   19744:	mov	r1, r0
   19748:	str	r7, [sp]
   1974c:	ldr	r3, [pc, #152]	; 197ec <_start@@Base+0x6f38>
   19750:	mov	r2, r5
   19754:	mov	r0, r4
   19758:	bl	14ca0 <_start@@Base+0x23ec>
   1975c:	cmp	r5, r0
   19760:	cmpne	r6, r0
   19764:	mov	r6, r0
   19768:	beq	19b94 <_start@@Base+0x72e0>
   1976c:	ldrb	r3, [sp, #44]	; 0x2c
   19770:	cmp	r3, #2
   19774:	bne	19784 <_start@@Base+0x6ed0>
   19778:	ldr	r3, [r4, #8]
   1977c:	tst	r3, #2
   19780:	beq	1953c <_start@@Base+0x6c88>
   19784:	mov	r3, #1
   19788:	mov	r2, r3
   1978c:	mov	r1, #2
   19790:	b	196bc <_start@@Base+0x6e08>
   19794:	mov	r2, r5
   19798:	mov	r1, sl
   1979c:	mov	r0, r4
   197a0:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   197a4:	mov	r6, r0
   197a8:	b	1953c <_start@@Base+0x6c88>
   197ac:	ldr	r3, [sp, #96]	; 0x60
   197b0:	mov	r2, r5
   197b4:	mov	r1, r6
   197b8:	bl	145a8 <_start@@Base+0x1cf4>
   197bc:	b	193a4 <_start@@Base+0x6af0>
   197c0:	andeq	r0, r0, r0
   197c4:	strbvc	r3, [r3, #-512]!	; 0xfffffe00
   197c8:	eorsvc	r0, r2, #0
   197cc:	cmnvs	pc, #28416	; 0x6f00
   197d0:	andvc	r0, r0, #0
   197d4:	cmnvs	pc, #28416	; 0x6f00
   197d8:			; <UNDEFINED> instruction: 0xffff0000
   197dc:	andeq	r4, r3, ip, lsr r2
   197e0:	andeq	r4, r3, ip, asr #4
   197e4:	andeq	r4, r3, ip, asr r2
   197e8:	strbvc	r0, [r3, #-0]!
   197ec:	andeq	r4, r3, r8, ror #4
   197f0:	mov	r1, #4
   197f4:	ldr	r0, [r0]
   197f8:	bl	1d090 <flatcc_builder_start_table@@Base>
   197fc:	cmp	r0, #0
   19800:	bne	19b94 <_start@@Base+0x72e0>
   19804:	add	r3, sp, #32
   19808:	str	r3, [sp]
   1980c:	mov	r2, r5
   19810:	mov	r3, #1
   19814:	mov	r1, r6
   19818:	mov	r0, r4
   1981c:	bl	21278 <flatcc_json_parser_prepare_unions@@Base>
   19820:	cmp	r5, r0
   19824:	beq	19b94 <_start@@Base+0x72e0>
   19828:	add	r3, sp, #28
   1982c:	mov	r2, r5
   19830:	mov	r1, r6
   19834:	mov	r0, r4
   19838:	bl	14520 <_start@@Base+0x1c6c>
   1983c:	ldr	r3, [sp, #28]
   19840:	mov	r6, r0
   19844:	cmp	r3, #0
   19848:	bne	19874 <_start@@Base+0x6fc0>
   1984c:	ldr	r3, [r4, #24]
   19850:	cmp	r3, #0
   19854:	bne	19b94 <_start@@Base+0x72e0>
   19858:	mov	r1, r0
   1985c:	ldr	r3, [sp, #32]
   19860:	mov	r2, r5
   19864:	mov	r0, r4
   19868:	bl	212e0 <flatcc_json_parser_finalize_unions@@Base>
   1986c:	mov	r6, r0
   19870:	b	19424 <_start@@Base+0x6b70>
   19874:	mov	r2, r5
   19878:	mov	r1, r6
   1987c:	mov	r0, r4
   19880:	bl	13830 <_start@@Base+0xf7c>
   19884:	mov	r1, r5
   19888:	mov	r8, r0
   1988c:	bl	129e0 <_start@@Base+0x12c>
   19890:	add	r3, pc, #792	; 0x318
   19894:	ldrd	r2, [r3]
   19898:	cmp	r1, r3
   1989c:	cmpeq	r0, r2
   198a0:	mov	r6, r0
   198a4:	mov	r7, r1
   198a8:	bne	19934 <_start@@Base+0x7080>
   198ac:	add	r8, r8, #8
   198b0:	mov	r1, r5
   198b4:	mov	r0, r8
   198b8:	bl	129e0 <_start@@Base+0x12c>
   198bc:	add	r3, pc, #756	; 0x2f4
   198c0:	ldrd	r2, [r3]
   198c4:	mov	r0, #0
   198c8:	cmp	r1, r3
   198cc:	cmpeq	r0, r2
   198d0:	bne	1af88 <_start@@Base+0x86d4>
   198d4:	mov	r1, r8
   198d8:	mov	r3, #4
   198dc:	mov	r2, r5
   198e0:	mov	r0, r4
   198e4:	bl	14674 <_start@@Base+0x1dc0>
   198e8:	cmp	r8, r0
   198ec:	mov	r1, r0
   198f0:	beq	1af88 <_start@@Base+0x86d4>
   198f4:	ldr	r3, [pc, #756]	; 19bf0 <_start@@Base+0x733c>
   198f8:	mov	r2, r5
   198fc:	str	r3, [sp, #16]
   19900:	ldr	r3, [pc, #748]	; 19bf4 <_start@@Base+0x7340>
   19904:	mov	r0, r4
   19908:	str	r3, [sp, #12]
   1990c:	ldr	r3, [pc, #740]	; 19bf8 <_start@@Base+0x7344>
   19910:	str	r3, [sp, #8]
   19914:	ldr	r3, [sp, #32]
   19918:	str	r3, [sp, #4]
   1991c:	mov	r3, #3
   19920:	str	r3, [sp]
   19924:	mov	r3, #0
   19928:	bl	21694 <flatcc_json_parser_union_type_vector@@Base>
   1992c:	mov	r6, r0
   19930:	b	19a48 <_start@@Base+0x7194>
   19934:	add	r3, pc, #644	; 0x284
   19938:	ldrd	r2, [r3]
   1993c:	bic	r0, r0, #255	; 0xff
   19940:	cmp	r1, r3
   19944:	cmpeq	r0, r2
   19948:	bne	19998 <_start@@Base+0x70e4>
   1994c:	mov	r1, r8
   19950:	mov	r3, #7
   19954:	mov	r2, r5
   19958:	mov	r0, r4
   1995c:	bl	14674 <_start@@Base+0x1dc0>
   19960:	cmp	r8, r0
   19964:	mov	r1, r0
   19968:	beq	19998 <_start@@Base+0x70e4>
   1996c:	ldr	r3, [pc, #640]	; 19bf4 <_start@@Base+0x7340>
   19970:	mov	r2, r5
   19974:	str	r3, [sp, #8]
   19978:	ldr	r3, [sp, #32]
   1997c:	mov	r0, r4
   19980:	str	r3, [sp, #4]
   19984:	mov	r3, #3
   19988:	str	r3, [sp]
   1998c:	mov	r3, #0
   19990:	bl	215c8 <flatcc_json_parser_union_vector@@Base>
   19994:	b	1992c <_start@@Base+0x7078>
   19998:	add	r1, pc, #552	; 0x228
   1999c:	ldrd	r0, [r1]
   199a0:	ldr	r2, [pc, #596]	; 19bfc <_start@@Base+0x7348>
   199a4:	mvn	r3, #0
   199a8:	and	r3, r3, r7
   199ac:	and	r2, r2, r6
   199b0:	cmp	r3, r1
   199b4:	cmpeq	r2, r0
   199b8:	bne	1a8a4 <_start@@Base+0x7ff0>
   199bc:	mov	r3, #6
   199c0:	mov	r2, r5
   199c4:	mov	r1, r8
   199c8:	mov	r0, r4
   199cc:	bl	14674 <_start@@Base+0x1dc0>
   199d0:	cmp	r8, r0
   199d4:	mov	r6, r0
   199d8:	beq	1af74 <_start@@Base+0x86c0>
   199dc:	mov	r1, #3
   199e0:	ldr	r0, [r4]
   199e4:	bl	1d090 <flatcc_builder_start_table@@Base>
   199e8:	cmp	r0, #0
   199ec:	bne	19b7c <_start@@Base+0x72c8>
   199f0:	add	r3, sp, #36	; 0x24
   199f4:	mov	r2, r5
   199f8:	mov	r1, r6
   199fc:	mov	r0, r4
   19a00:	bl	14520 <_start@@Base+0x1c6c>
   19a04:	ldr	r3, [sp, #36]	; 0x24
   19a08:	mov	r6, r0
   19a0c:	cmp	r3, #0
   19a10:	bne	19a60 <_start@@Base+0x71ac>
   19a14:	ldr	r7, [r4, #24]
   19a18:	cmp	r7, #0
   19a1c:	bne	19b7c <_start@@Base+0x72c8>
   19a20:	ldr	r0, [r4]
   19a24:	bl	1d6cc <flatcc_builder_end_table@@Base>
   19a28:	subs	r8, r0, #0
   19a2c:	beq	19b7c <_start@@Base+0x72c8>
   19a30:	mov	r1, r7
   19a34:	ldr	r0, [r4]
   19a38:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   19a3c:	cmp	r0, #0
   19a40:	beq	19b94 <_start@@Base+0x72e0>
   19a44:	str	r8, [r0]
   19a48:	add	r3, sp, #28
   19a4c:	mov	r2, r5
   19a50:	mov	r1, r6
   19a54:	mov	r0, r4
   19a58:	bl	13758 <_start@@Base+0xea4>
   19a5c:	b	1983c <_start@@Base+0x6f88>
   19a60:	mov	r2, r5
   19a64:	mov	r1, r6
   19a68:	mov	r0, r4
   19a6c:	bl	13830 <_start@@Base+0xf7c>
   19a70:	mov	r1, r5
   19a74:	mov	r7, r0
   19a78:	bl	129e0 <_start@@Base+0x12c>
   19a7c:	add	r3, pc, #332	; 0x14c
   19a80:	ldrd	r2, [r3]
   19a84:	cmp	r1, r3
   19a88:	cmpeq	r0, r2
   19a8c:	bne	1a880 <_start@@Base+0x7fcc>
   19a90:	add	r6, r7, #8
   19a94:	mov	r1, r5
   19a98:	mov	r0, r6
   19a9c:	bl	129e0 <_start@@Base+0x12c>
   19aa0:	add	r3, pc, #304	; 0x130
   19aa4:	ldrd	r2, [r3]
   19aa8:	cmp	r1, r3
   19aac:	cmpeq	r0, r2
   19ab0:	bne	1a88c <_start@@Base+0x7fd8>
   19ab4:	add	r7, r7, #16
   19ab8:	mov	r1, r5
   19abc:	mov	r0, r7
   19ac0:	bl	129e0 <_start@@Base+0x12c>
   19ac4:	add	r3, pc, #276	; 0x114
   19ac8:	ldrd	r2, [r3]
   19acc:	ldr	r8, [pc, #296]	; 19bfc <_start@@Base+0x7348>
   19ad0:	mvn	r9, #0
   19ad4:	and	r9, r9, r1
   19ad8:	and	r8, r8, r0
   19adc:	cmp	r9, r3
   19ae0:	cmpeq	r8, r2
   19ae4:	bne	19e00 <_start@@Base+0x754c>
   19ae8:	mov	r3, #6
   19aec:	mov	r2, r5
   19af0:	mov	r1, r7
   19af4:	mov	r0, r4
   19af8:	bl	14674 <_start@@Base+0x1dc0>
   19afc:	cmp	r7, r0
   19b00:	mov	r6, r0
   19b04:	beq	1a87c <_start@@Base+0x7fc8>
   19b08:	mov	r1, #2
   19b0c:	ldr	r0, [r4]
   19b10:	bl	1d090 <flatcc_builder_start_table@@Base>
   19b14:	cmp	r0, #0
   19b18:	bne	19b64 <_start@@Base+0x72b0>
   19b1c:	mov	r1, r6
   19b20:	add	r3, sp, #44	; 0x2c
   19b24:	mov	r2, r5
   19b28:	mov	r0, r4
   19b2c:	bl	14520 <_start@@Base+0x1c6c>
   19b30:	add	r9, pc, #176	; 0xb0
   19b34:	ldrd	r8, [r9]
   19b38:	mov	r6, r0
   19b3c:	ldr	r3, [sp, #44]	; 0x2c
   19b40:	cmp	r3, #0
   19b44:	bne	19c00 <_start@@Base+0x734c>
   19b48:	ldr	r3, [r4, #24]
   19b4c:	cmp	r3, #0
   19b50:	bne	19b64 <_start@@Base+0x72b0>
   19b54:	ldr	r0, [r4]
   19b58:	bl	1d6cc <flatcc_builder_end_table@@Base>
   19b5c:	subs	r7, r0, #0
   19b60:	bne	1afbc <_start@@Base+0x8708>
   19b64:	mov	r1, r6
   19b68:	mov	r3, #33	; 0x21
   19b6c:	mov	r2, r5
   19b70:	mov	r0, r4
   19b74:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   19b78:	mov	r6, r0
   19b7c:	mov	r1, r6
   19b80:	mov	r3, #33	; 0x21
   19b84:	mov	r2, r5
   19b88:	mov	r0, r4
   19b8c:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   19b90:	mov	r6, r0
   19b94:	mov	r1, r6
   19b98:	mov	r3, #33	; 0x21
   19b9c:	mov	r2, r5
   19ba0:	mov	r0, r4
   19ba4:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   19ba8:	mov	r6, r0
   19bac:	b	1943c <_start@@Base+0x6b88>
   19bb0:	cmnvs	lr, pc, asr r9
   19bb4:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   19bb8:	andeq	r0, r0, r0
   19bbc:	ldrbtvc	r7, [r9], #-101	; 0xffffff9b
   19bc0:	cmnvs	lr, r0, lsl #18
   19bc4:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   19bc8:	ldmdbvs	r8!, {}^	; <UNPREDICTABLE>
   19bcc:	rsbsvc	r6, r2, r6, ror #10
   19bd0:	bvs	1cf5990 <__bss_end__@@Base+0x1cc15c4>
   19bd4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19bd8:	ldmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
   19bdc:	rsbsvc	r6, r2, r6, ror #10
   19be0:	ldrvs	r0, [r2, -r0]!
   19be4:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   19be8:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   19bec:	subsvs	r7, pc, #116, 6	; 0xd0000001
   19bf0:	andeq	r2, r1, r8, lsl fp
   19bf4:	andeq	r9, r1, r0, asr #6
   19bf8:	andeq	r4, r3, r4, ror r2
   19bfc:			; <UNDEFINED> instruction: 0xffff0000
   19c00:	mov	r2, r5
   19c04:	mov	r1, r6
   19c08:	mov	r0, r4
   19c0c:	bl	13830 <_start@@Base+0xf7c>
   19c10:	mov	r1, r5
   19c14:	mov	r6, r0
   19c18:	bl	129e0 <_start@@Base+0x12c>
   19c1c:	add	r3, pc, #964	; 0x3c4
   19c20:	ldrd	r2, [r3]
   19c24:	cmp	r1, r3
   19c28:	cmpeq	r0, r2
   19c2c:	bne	19de8 <_start@@Base+0x7534>
   19c30:	add	r6, r6, #8
   19c34:	mov	r1, r5
   19c38:	mov	r0, r6
   19c3c:	bl	129e0 <_start@@Base+0x12c>
   19c40:	bic	r2, r0, #255	; 0xff
   19c44:	cmp	r1, r9
   19c48:	cmpeq	r2, r8
   19c4c:	bne	19d20 <_start@@Base+0x746c>
   19c50:	mov	r3, #7
   19c54:	mov	r2, r5
   19c58:	mov	r1, r6
   19c5c:	mov	r0, r4
   19c60:	bl	14674 <_start@@Base+0x1dc0>
   19c64:	cmp	r6, r0
   19c68:	mov	r7, r0
   19c6c:	beq	19de8 <_start@@Base+0x7534>
   19c70:	add	sl, sp, #56	; 0x38
   19c74:	mov	r2, #0
   19c78:	mov	r3, #0
   19c7c:	mov	r1, r0
   19c80:	strd	r2, [sl, #-8]!
   19c84:	mov	r0, r4
   19c88:	mov	r3, sl
   19c8c:	mov	r2, r5
   19c90:	bl	15dc8 <_start@@Base+0x3514>
   19c94:	cmp	r7, r0
   19c98:	mov	r6, r0
   19c9c:	bne	19cc8 <_start@@Base+0x7414>
   19ca0:	mov	r1, r0
   19ca4:	str	sl, [sp]
   19ca8:	ldr	r3, [pc, #872]	; 1a018 <_start@@Base+0x7764>
   19cac:	mov	r2, r5
   19cb0:	mov	r0, r4
   19cb4:	bl	15c60 <_start@@Base+0x33ac>
   19cb8:	cmp	r5, r0
   19cbc:	cmpne	r6, r0
   19cc0:	mov	r6, r0
   19cc4:	beq	19b64 <_start@@Base+0x72b0>
   19cc8:	ldrd	r2, [sp, #48]	; 0x30
   19ccc:	orrs	r3, r2, r3
   19cd0:	bne	19ce0 <_start@@Base+0x742c>
   19cd4:	ldr	r3, [r4, #8]
   19cd8:	tst	r3, #2
   19cdc:	beq	19d04 <_start@@Base+0x7450>
   19ce0:	mov	r3, #8
   19ce4:	mov	r2, r3
   19ce8:	mov	r1, #0
   19cec:	ldr	r0, [r4]
   19cf0:	bl	1e050 <flatcc_builder_table_add@@Base>
   19cf4:	cmp	r0, #0
   19cf8:	beq	19b64 <_start@@Base+0x72b0>
   19cfc:	ldrd	r2, [sp, #48]	; 0x30
   19d00:	strd	r2, [r0]
   19d04:	mov	r1, r6
   19d08:	add	r3, sp, #44	; 0x2c
   19d0c:	mov	r2, r5
   19d10:	mov	r0, r4
   19d14:	bl	13758 <_start@@Base+0xea4>
   19d18:	mov	r6, r0
   19d1c:	b	19b3c <_start@@Base+0x7288>
   19d20:	add	r3, pc, #712	; 0x2c8
   19d24:	ldrd	r2, [r3]
   19d28:	cmp	r1, r3
   19d2c:	cmpeq	r0, r2
   19d30:	bne	19de8 <_start@@Base+0x7534>
   19d34:	mov	r3, #8
   19d38:	mov	r2, r5
   19d3c:	mov	r1, r6
   19d40:	mov	r0, r4
   19d44:	bl	14674 <_start@@Base+0x1dc0>
   19d48:	cmp	r6, r0
   19d4c:	mov	r7, r0
   19d50:	beq	19de8 <_start@@Base+0x7534>
   19d54:	add	sl, sp, #56	; 0x38
   19d58:	mov	r3, #0
   19d5c:	str	r3, [sl, #-8]!
   19d60:	mov	r1, r0
   19d64:	mov	r3, sl
   19d68:	mov	r2, r5
   19d6c:	mov	r0, r4
   19d70:	bl	1482c <_start@@Base+0x1f78>
   19d74:	cmp	r7, r0
   19d78:	mov	r6, r0
   19d7c:	bne	19da8 <_start@@Base+0x74f4>
   19d80:	mov	r1, r0
   19d84:	str	sl, [sp]
   19d88:	ldr	r3, [pc, #652]	; 1a01c <_start@@Base+0x7768>
   19d8c:	mov	r2, r5
   19d90:	mov	r0, r4
   19d94:	bl	14ddc <_start@@Base+0x2528>
   19d98:	cmp	r5, r0
   19d9c:	cmpne	r6, r0
   19da0:	mov	r6, r0
   19da4:	beq	19b64 <_start@@Base+0x72b0>
   19da8:	ldr	r3, [sp, #48]	; 0x30
   19dac:	cmp	r3, #0
   19db0:	bne	19dc0 <_start@@Base+0x750c>
   19db4:	ldr	r3, [r4, #8]
   19db8:	tst	r3, #2
   19dbc:	beq	19d04 <_start@@Base+0x7450>
   19dc0:	mov	r3, #4
   19dc4:	mov	r2, r3
   19dc8:	mov	r1, #1
   19dcc:	ldr	r0, [r4]
   19dd0:	bl	1e050 <flatcc_builder_table_add@@Base>
   19dd4:	cmp	r0, #0
   19dd8:	beq	19b64 <_start@@Base+0x72b0>
   19ddc:	ldr	r3, [sp, #48]	; 0x30
   19de0:	str	r3, [r0]
   19de4:	b	19d04 <_start@@Base+0x7450>
   19de8:	mov	r1, r6
   19dec:	mov	r2, r5
   19df0:	mov	r0, r4
   19df4:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   19df8:	mov	r6, r0
   19dfc:	b	19d04 <_start@@Base+0x7450>
   19e00:	add	r3, pc, #496	; 0x1f0
   19e04:	ldrd	r2, [r3]
   19e08:	and	r0, r0, #-16777216	; 0xff000000
   19e0c:	cmp	r1, r3
   19e10:	cmpeq	r0, r2
   19e14:	bne	1a570 <_start@@Base+0x7cbc>
   19e18:	mov	r3, #5
   19e1c:	mov	r2, r5
   19e20:	mov	r1, r7
   19e24:	mov	r0, r4
   19e28:	bl	14674 <_start@@Base+0x1dc0>
   19e2c:	cmp	r7, r0
   19e30:	mov	r6, r0
   19e34:	beq	1a56c <_start@@Base+0x7cb8>
   19e38:	mov	r1, #9
   19e3c:	ldr	r0, [r4]
   19e40:	bl	1d090 <flatcc_builder_start_table@@Base>
   19e44:	cmp	r0, #0
   19e48:	bne	19b64 <_start@@Base+0x72b0>
   19e4c:	mov	r1, r6
   19e50:	add	r3, sp, #40	; 0x28
   19e54:	mov	r2, r5
   19e58:	mov	r0, r4
   19e5c:	bl	14520 <_start@@Base+0x1c6c>
   19e60:	add	fp, pc, #408	; 0x198
   19e64:	ldrd	sl, [fp]
   19e68:	mov	r6, r0
   19e6c:	ldr	r3, [sp, #40]	; 0x28
   19e70:	cmp	r3, #0
   19e74:	bne	19ec4 <_start@@Base+0x7610>
   19e78:	ldr	r7, [r4, #24]
   19e7c:	cmp	r7, #0
   19e80:	bne	19b64 <_start@@Base+0x72b0>
   19e84:	ldr	r0, [r4]
   19e88:	bl	1d6cc <flatcc_builder_end_table@@Base>
   19e8c:	subs	r8, r0, #0
   19e90:	beq	19b64 <_start@@Base+0x72b0>
   19e94:	mov	r1, r7
   19e98:	ldr	r0, [r4]
   19e9c:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   19ea0:	cmp	r0, #0
   19ea4:	beq	19b7c <_start@@Base+0x72c8>
   19ea8:	str	r8, [r0]
   19eac:	add	r3, sp, #36	; 0x24
   19eb0:	mov	r2, r5
   19eb4:	mov	r1, r6
   19eb8:	mov	r0, r4
   19ebc:	bl	13758 <_start@@Base+0xea4>
   19ec0:	b	19a04 <_start@@Base+0x7150>
   19ec4:	mov	r2, r5
   19ec8:	mov	r1, r6
   19ecc:	mov	r0, r4
   19ed0:	bl	13830 <_start@@Base+0xf7c>
   19ed4:	mov	r1, r5
   19ed8:	mov	r6, r0
   19edc:	bl	129e0 <_start@@Base+0x12c>
   19ee0:	add	r3, pc, #288	; 0x120
   19ee4:	ldrd	r2, [r3]
   19ee8:	cmp	r1, r3
   19eec:	cmpeq	r0, r2
   19ef0:	mov	r8, r0
   19ef4:	mov	r9, r1
   19ef8:	bhi	1a1dc <_start@@Base+0x7928>
   19efc:	add	r3, pc, #268	; 0x10c
   19f00:	ldrd	r2, [r3]
   19f04:	cmp	r1, r3
   19f08:	cmpeq	r0, r2
   19f0c:	bne	1a024 <_start@@Base+0x7770>
   19f10:	add	r6, r6, #8
   19f14:	mov	r1, r5
   19f18:	mov	r0, r6
   19f1c:	bl	129e0 <_start@@Base+0x12c>
   19f20:	mov	r0, #0
   19f24:	and	r1, r1, #-16777216	; 0xff000000
   19f28:	cmp	r1, #889192448	; 0x35000000
   19f2c:	cmpeq	r0, #0
   19f30:	bne	1a548 <_start@@Base+0x7c94>
   19f34:	mov	r3, #1
   19f38:	mov	r2, r5
   19f3c:	mov	r1, r6
   19f40:	mov	r0, r4
   19f44:	bl	14674 <_start@@Base+0x1dc0>
   19f48:	cmp	r6, r0
   19f4c:	mov	r7, r0
   19f50:	beq	1a548 <_start@@Base+0x7c94>
   19f54:	add	r8, sp, #56	; 0x38
   19f58:	mov	r3, #0
   19f5c:	str	r3, [r8, #-8]!
   19f60:	mov	r1, r0
   19f64:	mov	r3, r8
   19f68:	mov	r2, r5
   19f6c:	mov	r0, r4
   19f70:	bl	1482c <_start@@Base+0x1f78>
   19f74:	cmp	r7, r0
   19f78:	mov	r6, r0
   19f7c:	bne	19fa8 <_start@@Base+0x76f4>
   19f80:	mov	r1, r0
   19f84:	str	r8, [sp]
   19f88:	ldr	r3, [pc, #144]	; 1a020 <_start@@Base+0x776c>
   19f8c:	mov	r2, r5
   19f90:	mov	r0, r4
   19f94:	bl	14ddc <_start@@Base+0x2528>
   19f98:	cmp	r5, r0
   19f9c:	cmpne	r6, r0
   19fa0:	mov	r6, r0
   19fa4:	beq	19b64 <_start@@Base+0x72b0>
   19fa8:	ldr	r3, [sp, #48]	; 0x30
   19fac:	cmp	r3, #0
   19fb0:	bne	19fc0 <_start@@Base+0x770c>
   19fb4:	ldr	r3, [r4, #8]
   19fb8:	tst	r3, #2
   19fbc:	beq	1a164 <_start@@Base+0x78b0>
   19fc0:	mov	r3, #4
   19fc4:	mov	r2, r3
   19fc8:	mov	r1, #1
   19fcc:	ldr	r0, [r4]
   19fd0:	bl	1e050 <flatcc_builder_table_add@@Base>
   19fd4:	cmp	r0, #0
   19fd8:	beq	19b64 <_start@@Base+0x72b0>
   19fdc:	ldr	r3, [sp, #48]	; 0x30
   19fe0:	b	1a094 <_start@@Base+0x77e0>
   19fe4:	nop			; (mov r0, r0)
   19fe8:	svcpl	0x00626262
   19fec:	cmnvs	r1, r1, ror #2
   19ff0:	cmnvs	r2, pc, asr r4
   19ff4:	subsvs	r7, pc, #116, 6	; 0xd0000001
   19ff8:	strvs	r0, [r0, -r0]
   19ffc:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1a000:	andeq	r0, r0, r0
   1a004:	cmnvs	r3, #-1946157055	; 0x8c000001
   1a008:			; <UNDEFINED> instruction: 0xffffffff
   1a00c:	cmnvs	r3, #-2013265919	; 0x88000001
   1a010:	teqcc	r2, r4, lsr r3
   1a014:	cmnvs	r1, r1, ror #2
   1a018:	andeq	r4, r3, r4, lsl #5
   1a01c:	muleq	r3, r0, r2
   1a020:	muleq	r3, ip, r2
   1a024:	add	r1, pc, #892	; 0x37c
   1a028:	ldrd	r0, [r1]
   1a02c:	mov	r2, #0
   1a030:	cmp	r9, r1
   1a034:	cmpeq	r2, r0
   1a038:	bne	1a09c <_start@@Base+0x77e8>
   1a03c:	mov	r1, r6
   1a040:	mov	r3, #4
   1a044:	mov	r2, r5
   1a048:	mov	r0, r4
   1a04c:	bl	14674 <_start@@Base+0x1dc0>
   1a050:	cmp	r6, r0
   1a054:	mov	r1, r0
   1a058:	beq	1a564 <_start@@Base+0x7cb0>
   1a05c:	add	r3, sp, #44	; 0x2c
   1a060:	mov	r2, r5
   1a064:	mov	r0, r4
   1a068:	bl	21140 <flatcc_json_parser_build_string@@Base>
   1a06c:	ldr	r3, [sp, #44]	; 0x2c
   1a070:	cmp	r3, #0
   1a074:	mov	r6, r0
   1a078:	beq	19b64 <_start@@Base+0x72b0>
   1a07c:	mov	r1, #0
   1a080:	ldr	r0, [r4]
   1a084:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   1a088:	cmp	r0, #0
   1a08c:	beq	19b64 <_start@@Base+0x72b0>
   1a090:	ldr	r3, [sp, #44]	; 0x2c
   1a094:	str	r3, [r0]
   1a098:	b	1a164 <_start@@Base+0x78b0>
   1a09c:	add	r1, pc, #780	; 0x30c
   1a0a0:	ldrd	r0, [r1]
   1a0a4:	cmp	r9, r1
   1a0a8:	cmpeq	r8, r0
   1a0ac:	bne	1a180 <_start@@Base+0x78cc>
   1a0b0:	mov	r3, #8
   1a0b4:	mov	r2, r5
   1a0b8:	mov	r1, r6
   1a0bc:	mov	r0, r4
   1a0c0:	bl	14674 <_start@@Base+0x1dc0>
   1a0c4:	cmp	r6, r0
   1a0c8:	mov	r7, r0
   1a0cc:	beq	1a548 <_start@@Base+0x7c94>
   1a0d0:	add	r8, sp, #56	; 0x38
   1a0d4:	mov	r2, #0
   1a0d8:	mov	r3, #0
   1a0dc:	mov	r1, r0
   1a0e0:	strd	r2, [r8, #-8]!
   1a0e4:	mov	r0, r4
   1a0e8:	mov	r3, r8
   1a0ec:	mov	r2, r5
   1a0f0:	bl	15dc8 <_start@@Base+0x3514>
   1a0f4:	cmp	r7, r0
   1a0f8:	mov	r6, r0
   1a0fc:	bne	1a128 <_start@@Base+0x7874>
   1a100:	mov	r1, r0
   1a104:	str	r8, [sp]
   1a108:	ldr	r3, [pc, #696]	; 1a3c8 <_start@@Base+0x7b14>
   1a10c:	mov	r2, r5
   1a110:	mov	r0, r4
   1a114:	bl	15c60 <_start@@Base+0x33ac>
   1a118:	cmp	r5, r0
   1a11c:	cmpne	r6, r0
   1a120:	mov	r6, r0
   1a124:	beq	19b64 <_start@@Base+0x72b0>
   1a128:	ldrd	r2, [sp, #48]	; 0x30
   1a12c:	orrs	r3, r2, r3
   1a130:	bne	1a140 <_start@@Base+0x788c>
   1a134:	ldr	r3, [r4, #8]
   1a138:	tst	r3, #2
   1a13c:	beq	1a164 <_start@@Base+0x78b0>
   1a140:	mov	r3, #8
   1a144:	mov	r2, r3
   1a148:	mov	r1, #3
   1a14c:	ldr	r0, [r4]
   1a150:	bl	1e050 <flatcc_builder_table_add@@Base>
   1a154:	cmp	r0, #0
   1a158:	beq	19b64 <_start@@Base+0x72b0>
   1a15c:	ldrd	r2, [sp, #48]	; 0x30
   1a160:	strd	r2, [r0]
   1a164:	mov	r1, r6
   1a168:	add	r3, sp, #40	; 0x28
   1a16c:	mov	r2, r5
   1a170:	mov	r0, r4
   1a174:	bl	13758 <_start@@Base+0xea4>
   1a178:	mov	r6, r0
   1a17c:	b	19e6c <_start@@Base+0x75b8>
   1a180:	add	r1, pc, #560	; 0x230
   1a184:	ldrd	r0, [r1]
   1a188:	cmp	r9, r1
   1a18c:	cmpeq	r2, r0
   1a190:	bne	1a560 <_start@@Base+0x7cac>
   1a194:	mov	r1, r6
   1a198:	mov	r3, #4
   1a19c:	mov	r2, r5
   1a1a0:	mov	r0, r4
   1a1a4:	bl	14674 <_start@@Base+0x1dc0>
   1a1a8:	cmp	r6, r0
   1a1ac:	mov	r1, r0
   1a1b0:	beq	1a548 <_start@@Base+0x7c94>
   1a1b4:	add	r3, sp, #44	; 0x2c
   1a1b8:	mov	r2, r5
   1a1bc:	mov	r0, r4
   1a1c0:	bl	21140 <flatcc_json_parser_build_string@@Base>
   1a1c4:	ldr	r3, [sp, #44]	; 0x2c
   1a1c8:	cmp	r3, #0
   1a1cc:	mov	r6, r0
   1a1d0:	beq	19b64 <_start@@Base+0x72b0>
   1a1d4:	mov	r1, #2
   1a1d8:	b	1a080 <_start@@Base+0x77cc>
   1a1dc:	add	r3, pc, #476	; 0x1dc
   1a1e0:	ldrd	r2, [r3]
   1a1e4:	cmp	r1, r3
   1a1e8:	cmpeq	r0, r2
   1a1ec:	bne	1a350 <_start@@Base+0x7a9c>
   1a1f0:	mov	r3, #8
   1a1f4:	mov	r2, r5
   1a1f8:	mov	r1, r6
   1a1fc:	mov	r0, r4
   1a200:	bl	14674 <_start@@Base+0x1dc0>
   1a204:	cmp	r6, r0
   1a208:	mov	r7, r0
   1a20c:	beq	1a290 <_start@@Base+0x79dc>
   1a210:	add	r8, sp, #56	; 0x38
   1a214:	mov	r2, #0
   1a218:	mov	r3, #0
   1a21c:	mov	r1, r0
   1a220:	strd	r2, [r8, #-8]!
   1a224:	mov	r0, r4
   1a228:	mov	r3, r8
   1a22c:	mov	r2, r5
   1a230:	bl	15dc8 <_start@@Base+0x3514>
   1a234:	cmp	r7, r0
   1a238:	mov	r6, r0
   1a23c:	bne	1a268 <_start@@Base+0x79b4>
   1a240:	mov	r1, r0
   1a244:	str	r8, [sp]
   1a248:	ldr	r3, [pc, #380]	; 1a3cc <_start@@Base+0x7b18>
   1a24c:	mov	r2, r5
   1a250:	mov	r0, r4
   1a254:	bl	15c60 <_start@@Base+0x33ac>
   1a258:	cmp	r5, r0
   1a25c:	cmpne	r6, r0
   1a260:	mov	r6, r0
   1a264:	beq	19b64 <_start@@Base+0x72b0>
   1a268:	ldrd	r2, [sp, #48]	; 0x30
   1a26c:	orrs	r3, r2, r3
   1a270:	bne	1a280 <_start@@Base+0x79cc>
   1a274:	ldr	r3, [r4, #8]
   1a278:	tst	r3, #2
   1a27c:	beq	1a164 <_start@@Base+0x78b0>
   1a280:	mov	r3, #8
   1a284:	mov	r2, r3
   1a288:	mov	r1, #5
   1a28c:	b	1a14c <_start@@Base+0x7898>
   1a290:	add	r6, r6, #8
   1a294:	mov	r1, r5
   1a298:	mov	r0, r6
   1a29c:	bl	129e0 <_start@@Base+0x12c>
   1a2a0:	mov	r0, #0
   1a2a4:	and	r1, r1, #-16777216	; 0xff000000
   1a2a8:	cmp	r1, #889192448	; 0x35000000
   1a2ac:	cmpeq	r0, #0
   1a2b0:	bne	1a548 <_start@@Base+0x7c94>
   1a2b4:	mov	r3, #1
   1a2b8:	mov	r2, r5
   1a2bc:	mov	r1, r6
   1a2c0:	mov	r0, r4
   1a2c4:	bl	14674 <_start@@Base+0x1dc0>
   1a2c8:	cmp	r6, r0
   1a2cc:	mov	r7, r0
   1a2d0:	beq	1a548 <_start@@Base+0x7c94>
   1a2d4:	add	r8, sp, #56	; 0x38
   1a2d8:	mov	r3, #0
   1a2dc:	str	r3, [r8, #-8]!
   1a2e0:	mov	r1, r0
   1a2e4:	mov	r3, r8
   1a2e8:	mov	r2, r5
   1a2ec:	mov	r0, r4
   1a2f0:	bl	1482c <_start@@Base+0x1f78>
   1a2f4:	cmp	r7, r0
   1a2f8:	mov	r6, r0
   1a2fc:	bne	1a328 <_start@@Base+0x7a74>
   1a300:	mov	r1, r0
   1a304:	str	r8, [sp]
   1a308:	ldr	r3, [pc, #192]	; 1a3d0 <_start@@Base+0x7b1c>
   1a30c:	mov	r2, r5
   1a310:	mov	r0, r4
   1a314:	bl	14ddc <_start@@Base+0x2528>
   1a318:	cmp	r5, r0
   1a31c:	cmpne	r6, r0
   1a320:	mov	r6, r0
   1a324:	beq	19b64 <_start@@Base+0x72b0>
   1a328:	ldr	r3, [sp, #48]	; 0x30
   1a32c:	cmp	r3, #0
   1a330:	bne	1a340 <_start@@Base+0x7a8c>
   1a334:	ldr	r3, [r4, #8]
   1a338:	tst	r3, #2
   1a33c:	beq	1a164 <_start@@Base+0x78b0>
   1a340:	mov	r3, #4
   1a344:	mov	r2, r3
   1a348:	mov	r1, #6
   1a34c:	b	19fcc <_start@@Base+0x7718>
   1a350:	mov	r2, #0
   1a354:	cmp	r1, fp
   1a358:	cmpeq	r2, sl
   1a35c:	bne	1a3d4 <_start@@Base+0x7b20>
   1a360:	mov	r1, r6
   1a364:	mov	r3, #4
   1a368:	mov	r2, r5
   1a36c:	mov	r0, r4
   1a370:	bl	14674 <_start@@Base+0x1dc0>
   1a374:	cmp	r6, r0
   1a378:	mov	r1, r0
   1a37c:	beq	1a564 <_start@@Base+0x7cb0>
   1a380:	add	r3, sp, #44	; 0x2c
   1a384:	mov	r2, r5
   1a388:	mov	r0, r4
   1a38c:	bl	21140 <flatcc_json_parser_build_string@@Base>
   1a390:	ldr	r3, [sp, #44]	; 0x2c
   1a394:	cmp	r3, #0
   1a398:	mov	r6, r0
   1a39c:	beq	19b64 <_start@@Base+0x72b0>
   1a3a0:	mov	r1, #4
   1a3a4:	b	1a080 <_start@@Base+0x77cc>
   1a3a8:	andeq	r0, r0, r0
   1a3ac:	cmnvs	r1, r1, ror #2
   1a3b0:	teqcc	r2, r4, lsr r3
   1a3b4:	rsbvs	r6, r2, #536870918	; 0x20000006
   1a3b8:	andeq	r0, r0, r0
   1a3bc:	rsbvs	r6, r2, #536870918	; 0x20000006
   1a3c0:	teqcc	r2, r4, lsr r3
   1a3c4:	cmnvs	r3, #-1946157055	; 0x8c000001
   1a3c8:	andeq	r4, r3, r8, lsr #5
   1a3cc:			; <UNDEFINED> instruction: 0x000342b4
   1a3d0:	andeq	r4, r3, r0, asr #5
   1a3d4:	add	r3, pc, #884	; 0x374
   1a3d8:	ldrd	r2, [r3]
   1a3dc:	cmp	r1, r3
   1a3e0:	cmpeq	r0, r2
   1a3e4:	bne	1a560 <_start@@Base+0x7cac>
   1a3e8:	mov	r3, #8
   1a3ec:	mov	r2, r5
   1a3f0:	mov	r1, r6
   1a3f4:	mov	r0, r4
   1a3f8:	bl	14674 <_start@@Base+0x1dc0>
   1a3fc:	cmp	r6, r0
   1a400:	mov	r7, r0
   1a404:	beq	1a488 <_start@@Base+0x7bd4>
   1a408:	add	r8, sp, #56	; 0x38
   1a40c:	mov	r2, #0
   1a410:	mov	r3, #0
   1a414:	mov	r1, r0
   1a418:	strd	r2, [r8, #-8]!
   1a41c:	mov	r0, r4
   1a420:	mov	r3, r8
   1a424:	mov	r2, r5
   1a428:	bl	15dc8 <_start@@Base+0x3514>
   1a42c:	cmp	r7, r0
   1a430:	mov	r6, r0
   1a434:	bne	1a460 <_start@@Base+0x7bac>
   1a438:	mov	r1, r0
   1a43c:	str	r8, [sp]
   1a440:	ldr	r3, [pc, #824]	; 1a780 <_start@@Base+0x7ecc>
   1a444:	mov	r2, r5
   1a448:	mov	r0, r4
   1a44c:	bl	15c60 <_start@@Base+0x33ac>
   1a450:	cmp	r5, r0
   1a454:	cmpne	r6, r0
   1a458:	mov	r6, r0
   1a45c:	beq	19b64 <_start@@Base+0x72b0>
   1a460:	ldrd	r2, [sp, #48]	; 0x30
   1a464:	orrs	r3, r2, r3
   1a468:	bne	1a478 <_start@@Base+0x7bc4>
   1a46c:	ldr	r3, [r4, #8]
   1a470:	tst	r3, #2
   1a474:	beq	1a164 <_start@@Base+0x78b0>
   1a478:	mov	r3, #8
   1a47c:	mov	r2, r3
   1a480:	mov	r1, #7
   1a484:	b	1a14c <_start@@Base+0x7898>
   1a488:	add	r6, r6, #8
   1a48c:	mov	r1, r5
   1a490:	mov	r0, r6
   1a494:	bl	129e0 <_start@@Base+0x12c>
   1a498:	mov	r0, #0
   1a49c:	and	r1, r1, #-16777216	; 0xff000000
   1a4a0:	cmp	r1, #889192448	; 0x35000000
   1a4a4:	cmpeq	r0, #0
   1a4a8:	bne	1a548 <_start@@Base+0x7c94>
   1a4ac:	mov	r3, #1
   1a4b0:	mov	r2, r5
   1a4b4:	mov	r1, r6
   1a4b8:	mov	r0, r4
   1a4bc:	bl	14674 <_start@@Base+0x1dc0>
   1a4c0:	cmp	r6, r0
   1a4c4:	mov	r7, r0
   1a4c8:	beq	1a548 <_start@@Base+0x7c94>
   1a4cc:	add	r8, sp, #56	; 0x38
   1a4d0:	mov	r3, #0
   1a4d4:	str	r3, [r8, #-8]!
   1a4d8:	mov	r1, r0
   1a4dc:	mov	r3, r8
   1a4e0:	mov	r2, r5
   1a4e4:	mov	r0, r4
   1a4e8:	bl	1482c <_start@@Base+0x1f78>
   1a4ec:	cmp	r7, r0
   1a4f0:	mov	r6, r0
   1a4f4:	bne	1a520 <_start@@Base+0x7c6c>
   1a4f8:	mov	r1, r0
   1a4fc:	str	r8, [sp]
   1a500:	ldr	r3, [pc, #636]	; 1a784 <_start@@Base+0x7ed0>
   1a504:	mov	r2, r5
   1a508:	mov	r0, r4
   1a50c:	bl	14ddc <_start@@Base+0x2528>
   1a510:	cmp	r5, r0
   1a514:	cmpne	r6, r0
   1a518:	mov	r6, r0
   1a51c:	beq	19b64 <_start@@Base+0x72b0>
   1a520:	ldr	r3, [sp, #48]	; 0x30
   1a524:	cmp	r3, #0
   1a528:	bne	1a538 <_start@@Base+0x7c84>
   1a52c:	ldr	r3, [r4, #8]
   1a530:	tst	r3, #2
   1a534:	beq	1a164 <_start@@Base+0x78b0>
   1a538:	mov	r3, #4
   1a53c:	mov	r2, r3
   1a540:	mov	r1, #8
   1a544:	b	19fcc <_start@@Base+0x7718>
   1a548:	mov	r2, r5
   1a54c:	mov	r1, r6
   1a550:	mov	r0, r4
   1a554:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   1a558:	mov	r6, r0
   1a55c:	b	1a164 <_start@@Base+0x78b0>
   1a560:	mov	r1, r6
   1a564:	mov	r2, r5
   1a568:	b	1a550 <_start@@Base+0x7c9c>
   1a56c:	mov	r7, r0
   1a570:	add	r3, pc, #480	; 0x1e0
   1a574:	ldrd	r2, [r3]
   1a578:	cmp	r9, r3
   1a57c:	cmpeq	r8, r2
   1a580:	bne	1a880 <_start@@Base+0x7fcc>
   1a584:	mov	r3, #6
   1a588:	mov	r2, r5
   1a58c:	mov	r1, r7
   1a590:	mov	r0, r4
   1a594:	bl	14674 <_start@@Base+0x1dc0>
   1a598:	cmp	r7, r0
   1a59c:	mov	r6, r0
   1a5a0:	beq	1a88c <_start@@Base+0x7fd8>
   1a5a4:	mov	r1, #2
   1a5a8:	ldr	r0, [r4]
   1a5ac:	bl	1d090 <flatcc_builder_start_table@@Base>
   1a5b0:	cmp	r0, #0
   1a5b4:	bne	19b64 <_start@@Base+0x72b0>
   1a5b8:	mov	r1, r6
   1a5bc:	add	r3, sp, #44	; 0x2c
   1a5c0:	mov	r2, r5
   1a5c4:	mov	r0, r4
   1a5c8:	bl	14520 <_start@@Base+0x1c6c>
   1a5cc:	add	r9, pc, #396	; 0x18c
   1a5d0:	ldrd	r8, [r9]
   1a5d4:	mov	r6, r0
   1a5d8:	ldr	r3, [sp, #44]	; 0x2c
   1a5dc:	cmp	r3, #0
   1a5e0:	bne	1a608 <_start@@Base+0x7d54>
   1a5e4:	ldr	r3, [r4, #24]
   1a5e8:	cmp	r3, #0
   1a5ec:	bne	19b64 <_start@@Base+0x72b0>
   1a5f0:	ldr	r0, [r4]
   1a5f4:	bl	1d6cc <flatcc_builder_end_table@@Base>
   1a5f8:	subs	r7, r0, #0
   1a5fc:	beq	19b64 <_start@@Base+0x72b0>
   1a600:	mov	r1, #2
   1a604:	b	1afc0 <_start@@Base+0x870c>
   1a608:	mov	r2, r5
   1a60c:	mov	r1, r6
   1a610:	mov	r0, r4
   1a614:	bl	13830 <_start@@Base+0xf7c>
   1a618:	mov	r1, r5
   1a61c:	mov	r6, r0
   1a620:	bl	129e0 <_start@@Base+0x12c>
   1a624:	add	r3, pc, #316	; 0x13c
   1a628:	ldrd	r2, [r3]
   1a62c:	cmp	r1, r3
   1a630:	cmpeq	r0, r2
   1a634:	bne	1a870 <_start@@Base+0x7fbc>
   1a638:	add	r7, r6, #8
   1a63c:	mov	r1, r5
   1a640:	mov	r0, r7
   1a644:	bl	129e0 <_start@@Base+0x12c>
   1a648:	add	r3, pc, #288	; 0x120
   1a64c:	ldrd	r2, [r3]
   1a650:	cmp	r1, r3
   1a654:	cmpeq	r0, r2
   1a658:	bne	1a790 <_start@@Base+0x7edc>
   1a65c:	add	r6, r6, #16
   1a660:	mov	r1, r5
   1a664:	mov	r0, r6
   1a668:	bl	129e0 <_start@@Base+0x12c>
   1a66c:	add	r3, pc, #260	; 0x104
   1a670:	ldrd	r2, [r3]
   1a674:	and	r0, r0, #-16777216	; 0xff000000
   1a678:	cmp	r1, r3
   1a67c:	cmpeq	r0, r2
   1a680:	bne	1a870 <_start@@Base+0x7fbc>
   1a684:	mov	r3, #5
   1a688:	mov	r2, r5
   1a68c:	mov	r1, r6
   1a690:	mov	r0, r4
   1a694:	bl	14674 <_start@@Base+0x1dc0>
   1a698:	cmp	r6, r0
   1a69c:	mov	r7, r0
   1a6a0:	beq	1a870 <_start@@Base+0x7fbc>
   1a6a4:	add	sl, sp, #56	; 0x38
   1a6a8:	mov	r3, #0
   1a6ac:	str	r3, [sl, #-8]!
   1a6b0:	mov	r1, r0
   1a6b4:	mov	r3, sl
   1a6b8:	mov	r2, r5
   1a6bc:	mov	r0, r4
   1a6c0:	bl	1482c <_start@@Base+0x1f78>
   1a6c4:	cmp	r7, r0
   1a6c8:	mov	r6, r0
   1a6cc:	bne	1a6f8 <_start@@Base+0x7e44>
   1a6d0:	mov	r1, r0
   1a6d4:	str	sl, [sp]
   1a6d8:	ldr	r3, [pc, #168]	; 1a788 <_start@@Base+0x7ed4>
   1a6dc:	mov	r2, r5
   1a6e0:	mov	r0, r4
   1a6e4:	bl	14ddc <_start@@Base+0x2528>
   1a6e8:	cmp	r5, r0
   1a6ec:	cmpne	r6, r0
   1a6f0:	mov	r6, r0
   1a6f4:	beq	19b64 <_start@@Base+0x72b0>
   1a6f8:	ldr	r3, [sp, #48]	; 0x30
   1a6fc:	cmp	r3, #0
   1a700:	bne	1a710 <_start@@Base+0x7e5c>
   1a704:	ldr	r3, [r4, #8]
   1a708:	tst	r3, #2
   1a70c:	beq	1a734 <_start@@Base+0x7e80>
   1a710:	mov	r3, #4
   1a714:	mov	r2, r3
   1a718:	mov	r1, #1
   1a71c:	ldr	r0, [r4]
   1a720:	bl	1e050 <flatcc_builder_table_add@@Base>
   1a724:	cmp	r0, #0
   1a728:	beq	19b64 <_start@@Base+0x72b0>
   1a72c:	ldr	r3, [sp, #48]	; 0x30
   1a730:	str	r3, [r0]
   1a734:	mov	r1, r6
   1a738:	add	r3, sp, #44	; 0x2c
   1a73c:	mov	r2, r5
   1a740:	mov	r0, r4
   1a744:	bl	13758 <_start@@Base+0xea4>
   1a748:	mov	r6, r0
   1a74c:	b	1a5d8 <_start@@Base+0x7d24>
   1a750:	teqcc	r2, r4, lsr r3
   1a754:	strbtvs	r6, [r4], #-1124	; 0xfffffb9c
   1a758:	ldrvs	r0, [r3, -r0]!
   1a75c:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1a760:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1a764:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1a768:	svcpl	0x00626262
   1a76c:	cmnvs	r1, r1, ror #2
   1a770:	cmnvs	r2, pc, asr r4
   1a774:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1a778:	movwvc	r0, #0
   1a77c:	cmnvc	r4, #112, 10	; 0x1c000000
   1a780:	andeq	r4, r3, ip, asr #5
   1a784:	ldrdeq	r4, [r3], -r8
   1a788:	andeq	r4, r3, r4, ror #5
   1a78c:	strdeq	r4, [r3], -r0
   1a790:	bic	r0, r0, #255	; 0xff
   1a794:	cmp	r1, r9
   1a798:	cmpeq	r0, r8
   1a79c:	bne	1a858 <_start@@Base+0x7fa4>
   1a7a0:	mov	r3, #7
   1a7a4:	mov	r2, r5
   1a7a8:	mov	r1, r7
   1a7ac:	mov	r0, r4
   1a7b0:	bl	14674 <_start@@Base+0x1dc0>
   1a7b4:	cmp	r7, r0
   1a7b8:	mov	sl, r0
   1a7bc:	beq	1a858 <_start@@Base+0x7fa4>
   1a7c0:	add	r7, sp, #56	; 0x38
   1a7c4:	mov	r2, #0
   1a7c8:	mov	r3, #0
   1a7cc:	mov	r1, r0
   1a7d0:	strd	r2, [r7, #-8]!
   1a7d4:	mov	r0, r4
   1a7d8:	mov	r3, r7
   1a7dc:	mov	r2, r5
   1a7e0:	bl	15dc8 <_start@@Base+0x3514>
   1a7e4:	cmp	sl, r0
   1a7e8:	mov	r6, r0
   1a7ec:	bne	1a818 <_start@@Base+0x7f64>
   1a7f0:	mov	r1, r0
   1a7f4:	str	r7, [sp]
   1a7f8:	ldr	r3, [pc, #-116]	; 1a78c <_start@@Base+0x7ed8>
   1a7fc:	mov	r2, r5
   1a800:	mov	r0, r4
   1a804:	bl	15c60 <_start@@Base+0x33ac>
   1a808:	cmp	r5, r0
   1a80c:	cmpne	r6, r0
   1a810:	mov	r6, r0
   1a814:	beq	19b64 <_start@@Base+0x72b0>
   1a818:	ldrd	r2, [sp, #48]	; 0x30
   1a81c:	orrs	r3, r2, r3
   1a820:	bne	1a830 <_start@@Base+0x7f7c>
   1a824:	ldr	r3, [r4, #8]
   1a828:	tst	r3, #2
   1a82c:	beq	1a734 <_start@@Base+0x7e80>
   1a830:	mov	r3, #8
   1a834:	mov	r2, r3
   1a838:	mov	r1, #0
   1a83c:	ldr	r0, [r4]
   1a840:	bl	1e050 <flatcc_builder_table_add@@Base>
   1a844:	cmp	r0, #0
   1a848:	beq	19b64 <_start@@Base+0x72b0>
   1a84c:	ldrd	r2, [sp, #48]	; 0x30
   1a850:	strd	r2, [r0]
   1a854:	b	1a734 <_start@@Base+0x7e80>
   1a858:	mov	r2, r5
   1a85c:	mov	r1, r7
   1a860:	mov	r0, r4
   1a864:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   1a868:	mov	r6, r0
   1a86c:	b	1a734 <_start@@Base+0x7e80>
   1a870:	mov	r2, r5
   1a874:	mov	r1, r6
   1a878:	b	1a860 <_start@@Base+0x7fac>
   1a87c:	mov	r7, r0
   1a880:	mov	r2, r5
   1a884:	mov	r1, r7
   1a888:	b	1a894 <_start@@Base+0x7fe0>
   1a88c:	mov	r2, r5
   1a890:	mov	r1, r6
   1a894:	mov	r0, r4
   1a898:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   1a89c:	mov	r6, r0
   1a8a0:	b	19eac <_start@@Base+0x75f8>
   1a8a4:	add	r3, pc, #980	; 0x3d4
   1a8a8:	ldrd	r2, [r3]
   1a8ac:	and	r6, r6, #-16777216	; 0xff000000
   1a8b0:	cmp	r7, r3
   1a8b4:	cmpeq	r6, r2
   1a8b8:	bne	1af88 <_start@@Base+0x86d4>
   1a8bc:	mov	r3, #5
   1a8c0:	mov	r2, r5
   1a8c4:	mov	r1, r8
   1a8c8:	mov	r0, r4
   1a8cc:	bl	14674 <_start@@Base+0x1dc0>
   1a8d0:	cmp	r8, r0
   1a8d4:	mov	r6, r0
   1a8d8:	beq	1af74 <_start@@Base+0x86c0>
   1a8dc:	mov	r1, #10
   1a8e0:	ldr	r0, [r4]
   1a8e4:	bl	1d090 <flatcc_builder_start_table@@Base>
   1a8e8:	cmp	r0, #0
   1a8ec:	bne	19b7c <_start@@Base+0x72c8>
   1a8f0:	add	r3, sp, #48	; 0x30
   1a8f4:	str	r3, [sp]
   1a8f8:	mov	r2, r5
   1a8fc:	mov	r3, #5
   1a900:	mov	r1, r6
   1a904:	mov	r0, r4
   1a908:	bl	21278 <flatcc_json_parser_prepare_unions@@Base>
   1a90c:	cmp	r5, r0
   1a910:	beq	19b7c <_start@@Base+0x72c8>
   1a914:	mov	r1, r6
   1a918:	add	r3, sp, #44	; 0x2c
   1a91c:	mov	r2, r5
   1a920:	mov	r0, r4
   1a924:	bl	14520 <_start@@Base+0x1c6c>
   1a928:	add	fp, pc, #856	; 0x358
   1a92c:	ldrd	sl, [fp]
   1a930:	mov	r6, r0
   1a934:	ldr	r3, [sp, #44]	; 0x2c
   1a938:	cmp	r3, #0
   1a93c:	bne	1a990 <_start@@Base+0x80dc>
   1a940:	ldr	r3, [r4, #24]
   1a944:	cmp	r3, #0
   1a948:	bne	19b7c <_start@@Base+0x72c8>
   1a94c:	mov	r1, r6
   1a950:	ldr	r3, [sp, #48]	; 0x30
   1a954:	mov	r2, r5
   1a958:	mov	r0, r4
   1a95c:	bl	212e0 <flatcc_json_parser_finalize_unions@@Base>
   1a960:	mov	r6, r0
   1a964:	ldr	r0, [r4]
   1a968:	bl	1d6cc <flatcc_builder_end_table@@Base>
   1a96c:	subs	r7, r0, #0
   1a970:	beq	19b7c <_start@@Base+0x72c8>
   1a974:	mov	r1, #1
   1a978:	ldr	r0, [r4]
   1a97c:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   1a980:	cmp	r0, #0
   1a984:	beq	19b94 <_start@@Base+0x72e0>
   1a988:	str	r7, [r0]
   1a98c:	b	19a48 <_start@@Base+0x7194>
   1a990:	mov	r2, r5
   1a994:	mov	r1, r6
   1a998:	mov	r0, r4
   1a99c:	bl	13830 <_start@@Base+0xf7c>
   1a9a0:	mov	r1, r5
   1a9a4:	mov	r6, r0
   1a9a8:	bl	129e0 <_start@@Base+0x12c>
   1a9ac:	add	r3, pc, #732	; 0x2dc
   1a9b0:	ldrd	r2, [r3]
   1a9b4:	cmp	r1, r3
   1a9b8:	cmpeq	r0, r2
   1a9bc:	bhi	1abc8 <_start@@Base+0x8314>
   1a9c0:	add	r3, pc, #720	; 0x2d0
   1a9c4:	ldrd	r2, [r3]
   1a9c8:	cmp	r1, r3
   1a9cc:	cmpeq	r0, r2
   1a9d0:	bne	1aae0 <_start@@Base+0x822c>
   1a9d4:	add	r6, r6, #8
   1a9d8:	mov	r1, r5
   1a9dc:	mov	r0, r6
   1a9e0:	bl	129e0 <_start@@Base+0x12c>
   1a9e4:	add	r3, pc, #692	; 0x2b4
   1a9e8:	ldrd	r2, [r3]
   1a9ec:	mov	r8, r0
   1a9f0:	cmp	r1, r3
   1a9f4:	bic	r0, r0, #255	; 0xff
   1a9f8:	cmpeq	r0, r2
   1a9fc:	mov	r9, r1
   1aa00:	bne	1aa70 <_start@@Base+0x81bc>
   1aa04:	mov	r1, r6
   1aa08:	mov	r3, #7
   1aa0c:	mov	r2, r5
   1aa10:	mov	r0, r4
   1aa14:	bl	14674 <_start@@Base+0x1dc0>
   1aa18:	cmp	r6, r0
   1aa1c:	mov	r1, r0
   1aa20:	beq	1af68 <_start@@Base+0x86b4>
   1aa24:	ldr	r3, [pc, #708]	; 1acf0 <_start@@Base+0x843c>
   1aa28:	str	r3, [sp, #12]
   1aa2c:	ldr	r3, [pc, #668]	; 1acd0 <_start@@Base+0x841c>
   1aa30:	str	r3, [sp, #8]
   1aa34:	ldr	r3, [sp, #48]	; 0x30
   1aa38:	str	r3, [sp, #4]
   1aa3c:	mov	r3, #3
   1aa40:	str	r3, [sp]
   1aa44:	mov	r3, #1
   1aa48:	mov	r2, r5
   1aa4c:	mov	r0, r4
   1aa50:	bl	21444 <flatcc_json_parser_union_type@@Base>
   1aa54:	mov	r1, r0
   1aa58:	add	r3, sp, #44	; 0x2c
   1aa5c:	mov	r2, r5
   1aa60:	mov	r0, r4
   1aa64:	bl	13758 <_start@@Base+0xea4>
   1aa68:	mov	r6, r0
   1aa6c:	b	1a934 <_start@@Base+0x8080>
   1aa70:	ldr	r1, [pc, #624]	; 1ace8 <_start@@Base+0x8434>
   1aa74:	ldr	r3, [pc, #600]	; 1acd4 <_start@@Base+0x8420>
   1aa78:	mov	r0, #0
   1aa7c:	and	r9, r9, r1
   1aa80:	and	r8, r8, r0
   1aa84:	mov	r2, #0
   1aa88:	cmp	r9, r3
   1aa8c:	cmpeq	r8, r2
   1aa90:	bne	1af68 <_start@@Base+0x86b4>
   1aa94:	mov	r1, r6
   1aa98:	mov	r3, #2
   1aa9c:	mov	r2, r5
   1aaa0:	mov	r0, r4
   1aaa4:	bl	14674 <_start@@Base+0x1dc0>
   1aaa8:	cmp	r6, r0
   1aaac:	mov	r1, r0
   1aab0:	beq	1af68 <_start@@Base+0x86b4>
   1aab4:	ldr	r3, [pc, #564]	; 1acf0 <_start@@Base+0x843c>
   1aab8:	str	r3, [sp, #8]
   1aabc:	ldr	r3, [sp, #48]	; 0x30
   1aac0:	str	r3, [sp, #4]
   1aac4:	mov	r3, #3
   1aac8:	str	r3, [sp]
   1aacc:	mov	r3, #1
   1aad0:	mov	r2, r5
   1aad4:	mov	r0, r4
   1aad8:	bl	21338 <flatcc_json_parser_union@@Base>
   1aadc:	b	1aa54 <_start@@Base+0x81a0>
   1aae0:	add	r3, pc, #448	; 0x1c0
   1aae4:	ldrd	r2, [r3]
   1aae8:	cmp	r1, r3
   1aaec:	cmpeq	r0, r2
   1aaf0:	bne	1ab70 <_start@@Base+0x82bc>
   1aaf4:	add	r6, r6, #8
   1aaf8:	mov	r1, r5
   1aafc:	mov	r0, r6
   1ab00:	bl	129e0 <_start@@Base+0x12c>
   1ab04:	ldr	r3, [pc, #476]	; 1ace8 <_start@@Base+0x8434>
   1ab08:	mov	r2, #0
   1ab0c:	and	r1, r1, r3
   1ab10:	ldr	r3, [pc, #448]	; 1acd8 <_start@@Base+0x8424>
   1ab14:	and	r0, r0, r2
   1ab18:	cmp	r1, r3
   1ab1c:	mov	r2, #0
   1ab20:	cmpeq	r0, r2
   1ab24:	bne	1af68 <_start@@Base+0x86b4>
   1ab28:	mov	r1, r6
   1ab2c:	mov	r3, #2
   1ab30:	mov	r2, r5
   1ab34:	mov	r0, r4
   1ab38:	bl	14674 <_start@@Base+0x1dc0>
   1ab3c:	cmp	r6, r0
   1ab40:	mov	r1, r0
   1ab44:	beq	1af68 <_start@@Base+0x86b4>
   1ab48:	ldr	r3, [pc, #416]	; 1acf0 <_start@@Base+0x843c>
   1ab4c:	str	r3, [sp, #12]
   1ab50:	ldr	r3, [pc, #388]	; 1acdc <_start@@Base+0x8428>
   1ab54:	str	r3, [sp, #8]
   1ab58:	ldr	r3, [sp, #48]	; 0x30
   1ab5c:	str	r3, [sp, #4]
   1ab60:	mov	r3, #7
   1ab64:	str	r3, [sp]
   1ab68:	mov	r3, #3
   1ab6c:	b	1aa48 <_start@@Base+0x8194>
   1ab70:	add	r3, pc, #312	; 0x138
   1ab74:	ldrd	r2, [r3]
   1ab78:	and	r0, r0, #-16777216	; 0xff000000
   1ab7c:	cmp	r1, r3
   1ab80:	cmpeq	r0, r2
   1ab84:	bne	1af68 <_start@@Base+0x86b4>
   1ab88:	mov	r1, r6
   1ab8c:	mov	r3, #5
   1ab90:	mov	r2, r5
   1ab94:	mov	r0, r4
   1ab98:	bl	14674 <_start@@Base+0x1dc0>
   1ab9c:	cmp	r6, r0
   1aba0:	mov	r1, r0
   1aba4:	beq	1af68 <_start@@Base+0x86b4>
   1aba8:	ldr	r3, [pc, #320]	; 1acf0 <_start@@Base+0x843c>
   1abac:	str	r3, [sp, #8]
   1abb0:	ldr	r3, [sp, #48]	; 0x30
   1abb4:	str	r3, [sp, #4]
   1abb8:	mov	r3, #7
   1abbc:	str	r3, [sp]
   1abc0:	mov	r3, #3
   1abc4:	b	1aad0 <_start@@Base+0x821c>
   1abc8:	add	r3, pc, #232	; 0xe8
   1abcc:	ldrd	r2, [r3]
   1abd0:	cmp	r1, r3
   1abd4:	cmpeq	r0, r2
   1abd8:	bhi	1ad64 <_start@@Base+0x84b0>
   1abdc:	add	r3, pc, #220	; 0xdc
   1abe0:	ldrd	r2, [r3]
   1abe4:	cmp	r1, r3
   1abe8:	cmpeq	r0, r2
   1abec:	bne	1af68 <_start@@Base+0x86b4>
   1abf0:	add	r6, r6, #8
   1abf4:	mov	r1, r5
   1abf8:	mov	r0, r6
   1abfc:	bl	129e0 <_start@@Base+0x12c>
   1ac00:	add	r3, pc, #192	; 0xc0
   1ac04:	ldrd	r2, [r3]
   1ac08:	mov	r8, r0
   1ac0c:	cmp	r1, r3
   1ac10:	bic	r0, r0, #255	; 0xff
   1ac14:	cmpeq	r0, r2
   1ac18:	mov	r9, r1
   1ac1c:	bne	1acf4 <_start@@Base+0x8440>
   1ac20:	mov	r1, r6
   1ac24:	mov	r3, #7
   1ac28:	mov	r2, r5
   1ac2c:	mov	r0, r4
   1ac30:	bl	14674 <_start@@Base+0x1dc0>
   1ac34:	cmp	r6, r0
   1ac38:	mov	r1, r0
   1ac3c:	beq	1af68 <_start@@Base+0x86b4>
   1ac40:	ldr	r3, [pc, #152]	; 1ace0 <_start@@Base+0x842c>
   1ac44:	mov	r2, r5
   1ac48:	str	r3, [sp, #16]
   1ac4c:	ldr	r3, [pc, #156]	; 1acf0 <_start@@Base+0x843c>
   1ac50:	mov	r0, r4
   1ac54:	str	r3, [sp, #12]
   1ac58:	ldr	r3, [pc, #132]	; 1ace4 <_start@@Base+0x8430>
   1ac5c:	str	r3, [sp, #8]
   1ac60:	ldr	r3, [sp, #48]	; 0x30
   1ac64:	str	r3, [sp, #4]
   1ac68:	mov	r3, #9
   1ac6c:	str	r3, [sp]
   1ac70:	mov	r3, #4
   1ac74:	bl	21694 <flatcc_json_parser_union_type_vector@@Base>
   1ac78:	b	1aa54 <_start@@Base+0x81a0>
   1ac7c:	nop			; (mov r0, r0)
   1ac80:	strvs	r0, [r0, #-0]
   1ac84:	stclvs	6, cr7, [pc, #-420]!	; 1aae8 <_start@@Base+0x8234>
   1ac88:	svcpl	0x00636861
   1ac8c:			; <UNDEFINED> instruction: 0x6d61696e
   1ac90:	cmnvs	r3, r4, ror #8
   1ac94:	cmnvs	r8, #-2147483620	; 0x8000001c
   1ac98:	strbvs	r6, [pc, -r9, ror #28]!
   1ac9c:	cmnvs	lr, r1, ror #8
   1aca0:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1aca4:	cmnvc	r4, #116, 30	; 0x1d0
   1aca8:	svcvs	0x005f7479
   1acac:	cmnvs	r1, #6464	; 0x1940
   1acb0:	svcvs	0x00000000
   1acb4:	cmnvs	r1, #6464	; 0x1940
   1acb8:	svcpl	0x00636860
   1acbc:			; <UNDEFINED> instruction: 0x6d61696e
   1acc0:	cmnvs	r3, r5, ror #8
   1acc4:	cmnvs	r8, #-2147483620	; 0x8000001c
   1acc8:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1accc:	rsbsvc	r5, r3, #116, 30	; 0x1d0
   1acd0:	strdeq	r4, [r3], -ip
   1acd4:	cmnvc	r4, #0
   1acd8:	rsbvc	r0, r5, r0
   1acdc:	andeq	r4, r3, ip, lsl #6
   1ace0:	andeq	r2, r1, r8, lsr #22
   1ace4:	andeq	r4, r3, ip, lsl r3
   1ace8:			; <UNDEFINED> instruction: 0xffff0000
   1acec:	rsbsvc	r0, r3, #0
   1acf0:	andeq	r5, r1, r4, ror #9
   1acf4:	ldr	r1, [pc, #-20]	; 1ace8 <_start@@Base+0x8434>
   1acf8:	ldr	r3, [pc, #-20]	; 1acec <_start@@Base+0x8438>
   1acfc:	mov	r0, #0
   1ad00:	and	r9, r9, r1
   1ad04:	and	r8, r8, r0
   1ad08:	mov	r2, #0
   1ad0c:	cmp	r9, r3
   1ad10:	cmpeq	r8, r2
   1ad14:	bne	1af68 <_start@@Base+0x86b4>
   1ad18:	mov	r1, r6
   1ad1c:	mov	r3, #2
   1ad20:	mov	r2, r5
   1ad24:	mov	r0, r4
   1ad28:	bl	14674 <_start@@Base+0x1dc0>
   1ad2c:	cmp	r6, r0
   1ad30:	mov	r1, r0
   1ad34:	beq	1af68 <_start@@Base+0x86b4>
   1ad38:	ldr	r3, [pc, #-80]	; 1acf0 <_start@@Base+0x843c>
   1ad3c:	mov	r2, r5
   1ad40:	str	r3, [sp, #8]
   1ad44:	ldr	r3, [sp, #48]	; 0x30
   1ad48:	mov	r0, r4
   1ad4c:	str	r3, [sp, #4]
   1ad50:	mov	r3, #9
   1ad54:	str	r3, [sp]
   1ad58:	mov	r3, #4
   1ad5c:	bl	215c8 <flatcc_json_parser_union_vector@@Base>
   1ad60:	b	1aa54 <_start@@Base+0x81a0>
   1ad64:	cmp	r1, fp
   1ad68:	cmpeq	r0, sl
   1ad6c:	bne	1ae80 <_start@@Base+0x85cc>
   1ad70:	add	r7, r6, #8
   1ad74:	mov	r1, r5
   1ad78:	mov	r0, r7
   1ad7c:	bl	129e0 <_start@@Base+0x12c>
   1ad80:	add	r3, pc, #592	; 0x250
   1ad84:	ldrd	r2, [r3]
   1ad88:	cmp	r1, r3
   1ad8c:	cmpeq	r0, r2
   1ad90:	bne	1ae08 <_start@@Base+0x8554>
   1ad94:	add	r6, r6, #16
   1ad98:	mov	r1, r5
   1ad9c:	mov	r0, r6
   1ada0:	bl	129e0 <_start@@Base+0x12c>
   1ada4:	add	r3, pc, #564	; 0x234
   1ada8:	ldrd	r2, [r3]
   1adac:	mov	r0, #0
   1adb0:	bic	r1, r1, #255	; 0xff
   1adb4:	cmp	r1, r3
   1adb8:	cmpeq	r0, r2
   1adbc:	bne	1af68 <_start@@Base+0x86b4>
   1adc0:	mov	r1, r6
   1adc4:	mov	r3, #3
   1adc8:	mov	r2, r5
   1adcc:	mov	r0, r4
   1add0:	bl	14674 <_start@@Base+0x1dc0>
   1add4:	cmp	r6, r0
   1add8:	mov	r1, r0
   1addc:	beq	1af68 <_start@@Base+0x86b4>
   1ade0:	ldr	r3, [pc, #536]	; 1b000 <_start@@Base+0x874c>
   1ade4:	str	r3, [sp, #12]
   1ade8:	ldr	r3, [pc, #532]	; 1b004 <_start@@Base+0x8750>
   1adec:	str	r3, [sp, #8]
   1adf0:	ldr	r3, [sp, #48]	; 0x30
   1adf4:	str	r3, [sp, #4]
   1adf8:	mov	r3, #1
   1adfc:	str	r3, [sp]
   1ae00:	mov	r3, #0
   1ae04:	b	1aa48 <_start@@Base+0x8194>
   1ae08:	ldr	r2, [pc, #504]	; 1b008 <_start@@Base+0x8754>
   1ae0c:	mvn	r3, #0
   1ae10:	and	r0, r0, r2
   1ae14:	and	r1, r1, r3
   1ae18:	add	r3, pc, #456	; 0x1c8
   1ae1c:	ldrd	r2, [r3]
   1ae20:	cmp	r1, r3
   1ae24:	cmpeq	r0, r2
   1ae28:	bne	1ae6c <_start@@Base+0x85b8>
   1ae2c:	mov	r1, r7
   1ae30:	mov	r3, #6
   1ae34:	mov	r2, r5
   1ae38:	mov	r0, r4
   1ae3c:	bl	14674 <_start@@Base+0x1dc0>
   1ae40:	cmp	r7, r0
   1ae44:	mov	r1, r0
   1ae48:	beq	1ae6c <_start@@Base+0x85b8>
   1ae4c:	ldr	r3, [pc, #428]	; 1b000 <_start@@Base+0x874c>
   1ae50:	str	r3, [sp, #8]
   1ae54:	ldr	r3, [sp, #48]	; 0x30
   1ae58:	str	r3, [sp, #4]
   1ae5c:	mov	r3, #1
   1ae60:	str	r3, [sp]
   1ae64:	mov	r3, #0
   1ae68:	b	1aad0 <_start@@Base+0x821c>
   1ae6c:	mov	r2, r5
   1ae70:	mov	r1, r7
   1ae74:	mov	r0, r4
   1ae78:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   1ae7c:	b	1aa54 <_start@@Base+0x81a0>
   1ae80:	add	r3, pc, #360	; 0x168
   1ae84:	ldrd	r2, [r3]
   1ae88:	cmp	r1, r3
   1ae8c:	cmpeq	r0, r2
   1ae90:	bne	1af68 <_start@@Base+0x86b4>
   1ae94:	add	r6, r6, #8
   1ae98:	mov	r1, r5
   1ae9c:	mov	r0, r6
   1aea0:	bl	129e0 <_start@@Base+0x12c>
   1aea4:	ldr	r2, [pc, #348]	; 1b008 <_start@@Base+0x8754>
   1aea8:	mvn	r3, #0
   1aeac:	and	r2, r2, r0
   1aeb0:	and	r3, r3, r1
   1aeb4:	mov	r9, r1
   1aeb8:	add	r1, pc, #312	; 0x138
   1aebc:	ldrd	r0, [r1]
   1aec0:	cmp	r3, r1
   1aec4:	cmpeq	r2, r0
   1aec8:	bne	1af14 <_start@@Base+0x8660>
   1aecc:	mov	r1, r6
   1aed0:	mov	r3, #6
   1aed4:	mov	r2, r5
   1aed8:	mov	r0, r4
   1aedc:	bl	14674 <_start@@Base+0x1dc0>
   1aee0:	cmp	r6, r0
   1aee4:	mov	r1, r0
   1aee8:	beq	1af68 <_start@@Base+0x86b4>
   1aeec:	ldr	r3, [pc, #268]	; 1b000 <_start@@Base+0x874c>
   1aef0:	str	r3, [sp, #12]
   1aef4:	ldr	r3, [pc, #272]	; 1b00c <_start@@Base+0x8758>
   1aef8:	str	r3, [sp, #8]
   1aefc:	ldr	r3, [sp, #48]	; 0x30
   1af00:	str	r3, [sp, #4]
   1af04:	mov	r3, #5
   1af08:	str	r3, [sp]
   1af0c:	mov	r3, #2
   1af10:	b	1aa48 <_start@@Base+0x8194>
   1af14:	and	r9, r9, #-16777216	; 0xff000000
   1af18:	mov	r8, #0
   1af1c:	cmp	r9, #1795162112	; 0x6b000000
   1af20:	cmpeq	r8, #0
   1af24:	bne	1af68 <_start@@Base+0x86b4>
   1af28:	mov	r1, r6
   1af2c:	mov	r3, #1
   1af30:	mov	r2, r5
   1af34:	mov	r0, r4
   1af38:	bl	14674 <_start@@Base+0x1dc0>
   1af3c:	cmp	r6, r0
   1af40:	mov	r1, r0
   1af44:	beq	1af68 <_start@@Base+0x86b4>
   1af48:	ldr	r3, [pc, #176]	; 1b000 <_start@@Base+0x874c>
   1af4c:	str	r3, [sp, #8]
   1af50:	ldr	r3, [sp, #48]	; 0x30
   1af54:	str	r3, [sp, #4]
   1af58:	mov	r3, #5
   1af5c:	str	r3, [sp]
   1af60:	mov	r3, #2
   1af64:	b	1aad0 <_start@@Base+0x821c>
   1af68:	mov	r2, r5
   1af6c:	mov	r1, r6
   1af70:	b	1ae74 <_start@@Base+0x85c0>
   1af74:	mov	r2, r5
   1af78:	mov	r1, r6
   1af7c:	mov	r0, r4
   1af80:	bl	20c44 <flatcc_json_parser_unmatched_symbol@@Base>
   1af84:	b	1992c <_start@@Base+0x7078>
   1af88:	mov	r2, r5
   1af8c:	mov	r1, r8
   1af90:	b	1af7c <_start@@Base+0x86c8>
   1af94:	ldr	r3, [r0, #8]
   1af98:	tst	r3, #1
   1af9c:	moveq	r3, #15
   1afa0:	moveq	r2, r5
   1afa4:	moveq	r1, r6
   1afa8:	beq	193cc <_start@@Base+0x6b18>
   1afac:	mov	r2, r5
   1afb0:	mov	r1, r6
   1afb4:	bl	20724 <flatcc_json_parser_generic_json@@Base>
   1afb8:	b	1938c <_start@@Base+0x6ad8>
   1afbc:	mov	r1, #1
   1afc0:	ldr	r0, [r4]
   1afc4:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   1afc8:	cmp	r0, #0
   1afcc:	beq	19b7c <_start@@Base+0x72c8>
   1afd0:	str	r7, [r0]
   1afd4:	b	19eac <_start@@Base+0x75f8>
   1afd8:	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
   1afdc:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   1afe0:	andeq	r0, r0, r0
   1afe4:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1afe8:	ldrbvs	r0, [r2, #-0]!
   1afec:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   1aff0:	svcpl	0x006b6963
   1aff4:	cmnvc	r9, #1694498816	; 0x65000000
   1aff8:	rsbvc	r0, r5, r0
   1affc:	blvs	17f81e8 <__bss_end__@@Base+0x17c3e1c>
   1b000:	andeq	r5, r1, r4, ror #9
   1b004:	andeq	r4, r3, ip, lsr #6
   1b008:			; <UNDEFINED> instruction: 0xffff0000
   1b00c:	andeq	r4, r3, ip, lsr r3
   1b010:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b014:	mov	r4, r1
   1b018:	mov	r8, r0
   1b01c:	mov	r1, r2
   1b020:	mov	r0, r4
   1b024:	mov	r5, r2
   1b028:	mov	r6, r3
   1b02c:	bl	129e0 <_start@@Base+0x12c>
   1b030:	add	r3, pc, #760	; 0x2f8
   1b034:	ldrd	r2, [r3]
   1b038:	ldr	r7, [sp, #48]	; 0x30
   1b03c:	ldr	r9, [sp, #52]	; 0x34
   1b040:	cmp	r1, r3
   1b044:	cmpeq	r0, r2
   1b048:	bhi	1b15c <_start@@Base+0x88a8>
   1b04c:	add	r3, pc, #740	; 0x2e4
   1b050:	ldrd	r2, [r3]
   1b054:	mov	sl, #0
   1b058:	bic	fp, r1, #255	; 0xff
   1b05c:	cmp	r1, r3
   1b060:	cmpeq	r0, r2
   1b064:	bhi	1b0b8 <_start@@Base+0x8804>
   1b068:	add	r3, pc, #720	; 0x2d0
   1b06c:	ldrd	r2, [r3]
   1b070:	cmp	fp, r3
   1b074:	cmpeq	sl, r2
   1b078:	bne	1b320 <_start@@Base+0x8a6c>
   1b07c:	mov	r1, r5
   1b080:	mov	r2, #3
   1b084:	mov	r0, r4
   1b088:	bl	13810 <_start@@Base+0xf5c>
   1b08c:	cmp	r4, r0
   1b090:	mov	r1, r0
   1b094:	beq	1b320 <_start@@Base+0x8a6c>
   1b098:	str	r9, [sp, #52]	; 0x34
   1b09c:	str	r7, [sp, #48]	; 0x30
   1b0a0:	mov	r3, r6
   1b0a4:	mov	r2, r5
   1b0a8:	mov	r0, r8
   1b0ac:	add	sp, sp, #12
   1b0b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0b4:	b	12e74 <_start@@Base+0x5c0>
   1b0b8:	add	r3, pc, #648	; 0x288
   1b0bc:	ldrd	r2, [r3]
   1b0c0:	cmp	fp, r3
   1b0c4:	cmpeq	sl, r2
   1b0c8:	bne	1b108 <_start@@Base+0x8854>
   1b0cc:	mov	r1, r5
   1b0d0:	mov	r2, #3
   1b0d4:	mov	r0, r4
   1b0d8:	bl	13810 <_start@@Base+0xf5c>
   1b0dc:	cmp	r4, r0
   1b0e0:	mov	r1, r0
   1b0e4:	beq	1b320 <_start@@Base+0x8a6c>
   1b0e8:	str	r9, [sp, #52]	; 0x34
   1b0ec:	str	r7, [sp, #48]	; 0x30
   1b0f0:	mov	r3, r6
   1b0f4:	mov	r2, r5
   1b0f8:	mov	r0, r8
   1b0fc:	add	sp, sp, #12
   1b100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b104:	b	13cb8 <_start@@Base+0x1404>
   1b108:	add	r3, pc, #576	; 0x240
   1b10c:	ldrd	r2, [r3]
   1b110:	and	r0, r0, #-16777216	; 0xff000000
   1b114:	cmp	r1, r3
   1b118:	cmpeq	r0, r2
   1b11c:	bne	1b320 <_start@@Base+0x8a6c>
   1b120:	mov	r1, r5
   1b124:	mov	r2, #5
   1b128:	mov	r0, r4
   1b12c:	bl	13810 <_start@@Base+0xf5c>
   1b130:	cmp	r4, r0
   1b134:	mov	r1, r0
   1b138:	beq	1b320 <_start@@Base+0x8a6c>
   1b13c:	str	r9, [sp, #52]	; 0x34
   1b140:	str	r7, [sp, #48]	; 0x30
   1b144:	mov	r3, r6
   1b148:	mov	r2, r5
   1b14c:	mov	r0, r8
   1b150:	add	sp, sp, #12
   1b154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b158:	b	13520 <_start@@Base+0xc6c>
   1b15c:	add	r3, pc, #500	; 0x1f4
   1b160:	ldrd	r2, [r3]
   1b164:	cmp	r1, r3
   1b168:	cmpeq	r0, r2
   1b16c:	bhi	1b1c0 <_start@@Base+0x890c>
   1b170:	add	r3, pc, #488	; 0x1e8
   1b174:	ldrd	r2, [r3]
   1b178:	cmp	r1, r3
   1b17c:	cmpeq	r0, r2
   1b180:	bne	1b320 <_start@@Base+0x8a6c>
   1b184:	mov	r1, r5
   1b188:	mov	r2, #8
   1b18c:	mov	r0, r4
   1b190:	bl	13810 <_start@@Base+0xf5c>
   1b194:	cmp	r4, r0
   1b198:	mov	r1, r0
   1b19c:	beq	1b320 <_start@@Base+0x8a6c>
   1b1a0:	str	r9, [sp, #52]	; 0x34
   1b1a4:	str	r7, [sp, #48]	; 0x30
   1b1a8:	mov	r3, r6
   1b1ac:	mov	r2, r5
   1b1b0:	mov	r0, r8
   1b1b4:	add	sp, sp, #12
   1b1b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1bc:	b	130c8 <_start@@Base+0x814>
   1b1c0:	add	r3, pc, #416	; 0x1a0
   1b1c4:	ldrd	r2, [r3]
   1b1c8:	cmp	r1, r3
   1b1cc:	cmpeq	r0, r2
   1b1d0:	bhi	1b224 <_start@@Base+0x8970>
   1b1d4:	add	r3, pc, #404	; 0x194
   1b1d8:	ldrd	r2, [r3]
   1b1dc:	cmp	r1, r3
   1b1e0:	cmpeq	r0, r2
   1b1e4:	bne	1b320 <_start@@Base+0x8a6c>
   1b1e8:	mov	r1, r5
   1b1ec:	mov	r2, #8
   1b1f0:	mov	r0, r4
   1b1f4:	bl	13810 <_start@@Base+0xf5c>
   1b1f8:	cmp	r4, r0
   1b1fc:	mov	r1, r0
   1b200:	beq	1b320 <_start@@Base+0x8a6c>
   1b204:	str	r9, [sp, #52]	; 0x34
   1b208:	str	r7, [sp, #48]	; 0x30
   1b20c:	mov	r3, r6
   1b210:	mov	r2, r5
   1b214:	mov	r0, r8
   1b218:	add	sp, sp, #12
   1b21c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b220:	b	13234 <_start@@Base+0x980>
   1b224:	add	r3, pc, #332	; 0x14c
   1b228:	ldrd	r2, [r3]
   1b22c:	cmp	r1, r3
   1b230:	cmpeq	r0, r2
   1b234:	bne	1b274 <_start@@Base+0x89c0>
   1b238:	mov	r1, r5
   1b23c:	mov	r2, #8
   1b240:	mov	r0, r4
   1b244:	bl	13810 <_start@@Base+0xf5c>
   1b248:	cmp	r4, r0
   1b24c:	mov	r1, r0
   1b250:	beq	1b320 <_start@@Base+0x8a6c>
   1b254:	str	r9, [sp, #52]	; 0x34
   1b258:	str	r7, [sp, #48]	; 0x30
   1b25c:	mov	r3, r6
   1b260:	mov	r2, r5
   1b264:	mov	r0, r8
   1b268:	add	sp, sp, #12
   1b26c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b270:	b	133ec <_start@@Base+0xb38>
   1b274:	add	r3, pc, #260	; 0x104
   1b278:	ldrd	r2, [r3]
   1b27c:	cmp	r1, r3
   1b280:	cmpeq	r0, r2
   1b284:	bne	1b320 <_start@@Base+0x8a6c>
   1b288:	add	sl, r4, #8
   1b28c:	mov	r1, r5
   1b290:	mov	r0, sl
   1b294:	bl	129e0 <_start@@Base+0x12c>
   1b298:	add	r3, pc, #232	; 0xe8
   1b29c:	ldrd	r2, [r3]
   1b2a0:	mov	r0, #0
   1b2a4:	cmp	r1, r3
   1b2a8:	cmpeq	r0, r2
   1b2ac:	bne	1b320 <_start@@Base+0x8a6c>
   1b2b0:	mov	r2, #4
   1b2b4:	mov	r1, r5
   1b2b8:	mov	r0, sl
   1b2bc:	bl	13810 <_start@@Base+0xf5c>
   1b2c0:	cmp	sl, r0
   1b2c4:	mov	fp, r0
   1b2c8:	beq	1b320 <_start@@Base+0x8a6c>
   1b2cc:	mov	r1, r5
   1b2d0:	bl	129e0 <_start@@Base+0x12c>
   1b2d4:	mov	r0, #0
   1b2d8:	and	r1, r1, #-16777216	; 0xff000000
   1b2dc:	cmp	r1, #2013265920	; 0x78000000
   1b2e0:	cmpeq	r0, #0
   1b2e4:	movne	r4, fp
   1b2e8:	bne	1b320 <_start@@Base+0x8a6c>
   1b2ec:	str	r9, [sp]
   1b2f0:	mov	r3, #1
   1b2f4:	mov	r2, r5
   1b2f8:	mov	r1, fp
   1b2fc:	mov	r0, r8
   1b300:	bl	20400 <flatcc_json_parser_match_constant@@Base>
   1b304:	cmp	fp, r0
   1b308:	mov	r4, r0
   1b30c:	movne	r3, #0
   1b310:	movne	r2, #0
   1b314:	strdne	r2, [r7]
   1b318:	movne	r3, #0
   1b31c:	strne	r3, [r6]
   1b320:	mov	r0, r4
   1b324:	add	sp, sp, #12
   1b328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b32c:	nop			; (mov r0, r0)
   1b330:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1b334:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   1b338:	ldrshvc	pc, [pc, #255]	; 1b43f <verify_parse@@Base+0xaf>	; <UNPREDICTABLE>
   1b33c:	cmnmi	pc, #28416	; 0x6f00
   1b340:	andeq	r0, r0, r0
   1b344:	cmnmi	lr, r0, lsl #18
   1b348:	andeq	r0, r0, r0
   1b34c:	strbtmi	r6, [pc], -r0, lsl #30
   1b350:	andvc	r0, r0, #0
   1b354:	cmnmi	pc, #28416	; 0x6f00
   1b358:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1b35c:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   1b360:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1b364:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   1b368:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1b36c:	mcrvs	7, 3, r6, cr5, cr15, {2}
   1b370:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1b374:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   1b378:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1b37c:	mcrvs	7, 3, r6, cr5, cr15, {2}
   1b380:	cfldrdvs	mvd7, [r0, #-484]!	; 0xfffffe1c
   1b384:	cdpvs	4, 6, cr7, cr15, cr5, {3}
   1b388:	andeq	r0, r0, r0
   1b38c:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93

0001b390 <verify_parse@@Base>:
   1b390:	push	{r0, r1, r2, lr}
   1b394:	cmp	r0, #0
   1b398:	beq	1b3b0 <verify_parse@@Base+0x20>
   1b39c:	ldr	r3, [pc, #312]	; 1b4dc <verify_parse@@Base+0x14c>
   1b3a0:	ldr	r2, [r0, #4]
   1b3a4:	str	r3, [sp, #4]
   1b3a8:	cmp	r2, r3
   1b3ac:	beq	1b47c <verify_parse@@Base+0xec>
   1b3b0:	ldr	r3, [pc, #296]	; 1b4e0 <verify_parse@@Base+0x150>
   1b3b4:	ldr	r1, [pc, #296]	; 1b4e4 <verify_parse@@Base+0x154>
   1b3b8:	ldr	r0, [pc, #296]	; 1b4e8 <verify_parse@@Base+0x158>
   1b3bc:	mov	r2, #696	; 0x2b8
   1b3c0:	bl	126d8 <__assert_fail@plt>
   1b3c4:	vldr	s14, [r3]
   1b3c8:	vldr	s15, [pc, #256]	; 1b4d0 <verify_parse@@Base+0x140>
   1b3cc:	vcmp.f32	s14, s15
   1b3d0:	vmrs	APSR_nzcv, fpscr
   1b3d4:	ldrne	r3, [pc, #272]	; 1b4ec <verify_parse@@Base+0x15c>
   1b3d8:	movne	r2, #46	; 0x2e
   1b3dc:	bne	1b4b8 <verify_parse@@Base+0x128>
   1b3e0:	vldr	s14, [r3, #4]
   1b3e4:	vldr	s15, [pc, #232]	; 1b4d4 <verify_parse@@Base+0x144>
   1b3e8:	vcmp.f32	s14, s15
   1b3ec:	vmrs	APSR_nzcv, fpscr
   1b3f0:	ldrne	r3, [pc, #244]	; 1b4ec <verify_parse@@Base+0x15c>
   1b3f4:	movne	r2, #47	; 0x2f
   1b3f8:	bne	1b4b8 <verify_parse@@Base+0x128>
   1b3fc:	vldr	s14, [r3, #8]
   1b400:	vldr	s15, [pc, #208]	; 1b4d8 <verify_parse@@Base+0x148>
   1b404:	vcmp.f32	s14, s15
   1b408:	vmrs	APSR_nzcv, fpscr
   1b40c:	ldrne	r3, [pc, #216]	; 1b4ec <verify_parse@@Base+0x15c>
   1b410:	movne	r2, #48	; 0x30
   1b414:	bne	1b4b8 <verify_parse@@Base+0x128>
   1b418:	vldr	d6, [r3, #16]
   1b41c:	vldr	d7, [pc, #164]	; 1b4c8 <verify_parse@@Base+0x138>
   1b420:	vcmp.f64	d6, d7
   1b424:	vmrs	APSR_nzcv, fpscr
   1b428:	ldrne	r3, [pc, #188]	; 1b4ec <verify_parse@@Base+0x15c>
   1b42c:	movne	r2, #49	; 0x31
   1b430:	bne	1b4b8 <verify_parse@@Base+0x128>
   1b434:	ldrsb	r2, [r3, #24]
   1b438:	cmp	r2, #2
   1b43c:	movne	r2, #50	; 0x32
   1b440:	ldrne	r3, [pc, #164]	; 1b4ec <verify_parse@@Base+0x15c>
   1b444:	bne	1b4b8 <verify_parse@@Base+0x128>
   1b448:	ldrsh	r2, [r3, #26]
   1b44c:	cmp	r2, #5
   1b450:	movne	r2, #53	; 0x35
   1b454:	ldrne	r3, [pc, #144]	; 1b4ec <verify_parse@@Base+0x15c>
   1b458:	bne	1b4b8 <verify_parse@@Base+0x128>
   1b45c:	ldrsb	r3, [r3, #28]
   1b460:	cmp	r3, #6
   1b464:	movne	r2, #54	; 0x36
   1b468:	ldrne	r3, [pc, #124]	; 1b4ec <verify_parse@@Base+0x15c>
   1b46c:	bne	1b4b8 <verify_parse@@Base+0x128>
   1b470:	mov	r0, #0
   1b474:	add	sp, sp, #12
   1b478:	pop	{pc}		; (ldr pc, [sp], #4)
   1b47c:	ldr	r2, [r0]
   1b480:	adds	r3, r0, r2
   1b484:	beq	1b3b0 <verify_parse@@Base+0x20>
   1b488:	ldr	r2, [r0, r2]
   1b48c:	sub	r2, r3, r2
   1b490:	ldrh	r1, [r2]
   1b494:	cmp	r1, #5
   1b498:	bls	1b4b0 <verify_parse@@Base+0x120>
   1b49c:	ldrh	r2, [r2, #4]
   1b4a0:	cmp	r2, #0
   1b4a4:	beq	1b4b0 <verify_parse@@Base+0x120>
   1b4a8:	adds	r3, r3, r2
   1b4ac:	bne	1b3c4 <verify_parse@@Base+0x34>
   1b4b0:	ldr	r3, [pc, #52]	; 1b4ec <verify_parse@@Base+0x15c>
   1b4b4:	mov	r2, #45	; 0x2d
   1b4b8:	ldr	r1, [pc, #48]	; 1b4f0 <verify_parse@@Base+0x160>
   1b4bc:	ldr	r0, [pc, #48]	; 1b4f4 <verify_parse@@Base+0x164>
   1b4c0:	b	1b3c0 <verify_parse@@Base+0x30>
   1b4c4:	nop			; (mov r0, r0)
   1b4c8:	andeq	r0, r0, r0
   1b4cc:	andmi	r0, r8, r0
   1b4d0:	svccc	0x00800000
   1b4d4:	andmi	r0, r0, r0
   1b4d8:	submi	r0, r0, r0
   1b4dc:	movtpl	r4, #61261	; 0xef4d
   1b4e0:			; <UNDEFINED> instruction: 0x000222bc
   1b4e4:	andeq	r2, r2, pc, ror #5
   1b4e8:	andeq	r2, r2, lr, asr #6
   1b4ec:	ldrdeq	r2, [r2], -r7
   1b4f0:	andeq	r2, r2, r4, ror r3
   1b4f4:	andeq	r2, r2, sl, ror #24

0001b4f8 <test_parse@@Base>:
   1b4f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4fc:	sub	sp, sp, #332	; 0x14c
   1b500:	ldr	r6, [pc, #900]	; 1b88c <test_parse@@Base+0x394>
   1b504:	add	r5, sp, #96	; 0x60
   1b508:	mov	r0, r5
   1b50c:	bl	1c188 <flatcc_builder_init@@Base>
   1b510:	ldr	r1, [pc, #888]	; 1b890 <test_parse@@Base+0x398>
   1b514:	ldr	r0, [r6, #716]	; 0x2cc
   1b518:	bl	125c4 <fopen@plt>
   1b51c:	subs	r7, r0, #0
   1b520:	beq	1b584 <test_parse@@Base+0x8c>
   1b524:	mov	r2, #2
   1b528:	mov	r1, #0
   1b52c:	bl	126b4 <fseek@plt>
   1b530:	mov	r0, r7
   1b534:	bl	125e8 <ftell@plt>
   1b538:	cmp	r0, #10240	; 0x2800
   1b53c:	mov	r9, r0
   1b540:	bhi	1b568 <test_parse@@Base+0x70>
   1b544:	mov	r0, r7
   1b548:	bl	12600 <rewind@plt>
   1b54c:	cmp	r9, #0
   1b550:	movne	r0, r9
   1b554:	moveq	r0, #1
   1b558:	bl	12624 <malloc@plt>
   1b55c:	subs	r4, r0, #0
   1b560:	movne	r8, #0
   1b564:	bne	1b5a8 <test_parse@@Base+0xb0>
   1b568:	mov	r4, #0
   1b56c:	mov	r0, r7
   1b570:	bl	1269c <fclose@plt>
   1b574:	cmp	r4, #0
   1b578:	beq	1b584 <test_parse@@Base+0x8c>
   1b57c:	mov	r0, r4
   1b580:	bl	125d0 <free@plt>
   1b584:	ldr	r3, [pc, #776]	; 1b894 <test_parse@@Base+0x39c>
   1b588:	ldr	r2, [r6, #716]	; 0x2cc
   1b58c:	ldr	r1, [pc, #772]	; 1b898 <test_parse@@Base+0x3a0>
   1b590:	ldr	r0, [r3]
   1b594:	bl	12660 <fprintf@plt>
   1b598:	mvn	r3, #0
   1b59c:	str	r3, [sp, #16]
   1b5a0:	b	1b7a8 <test_parse@@Base+0x2b0>
   1b5a4:	add	r8, r8, fp
   1b5a8:	add	sl, r4, r8
   1b5ac:	mov	r3, r7
   1b5b0:	sub	r2, r9, r8
   1b5b4:	mov	r1, #1
   1b5b8:	mov	r0, sl
   1b5bc:	bl	12618 <fread@plt>
   1b5c0:	subs	fp, r0, #0
   1b5c4:	bne	1b5a4 <test_parse@@Base+0xac>
   1b5c8:	cmp	r9, r8
   1b5cc:	bne	1b56c <test_parse@@Base+0x74>
   1b5d0:	mov	r0, r7
   1b5d4:	bl	1269c <fclose@plt>
   1b5d8:	mov	r1, fp
   1b5dc:	mov	r2, #44	; 0x2c
   1b5e0:	add	r0, sp, #52	; 0x34
   1b5e4:	bl	12678 <memset@plt>
   1b5e8:	mov	r2, #1
   1b5ec:	str	r2, [sp, #68]	; 0x44
   1b5f0:	mov	r3, fp
   1b5f4:	mov	r2, fp
   1b5f8:	ldr	r1, [pc, #668]	; 1b89c <test_parse@@Base+0x3a4>
   1b5fc:	mov	r0, r5
   1b600:	str	r5, [sp, #52]	; 0x34
   1b604:	str	r4, [sp, #56]	; 0x38
   1b608:	str	r4, [sp, #80]	; 0x50
   1b60c:	str	sl, [sp, #84]	; 0x54
   1b610:	str	r4, [sp, #88]	; 0x58
   1b614:	bl	1c88c <flatcc_builder_start_buffer@@Base>
   1b618:	ldr	fp, [pc, #628]	; 1b894 <test_parse@@Base+0x39c>
   1b61c:	cmp	r0, #0
   1b620:	beq	1b670 <test_parse@@Base+0x178>
   1b624:	ldr	r8, [r6, #716]	; 0x2cc
   1b628:	ldr	r3, [sp, #56]	; 0x38
   1b62c:	ldr	r6, [sp, #88]	; 0x58
   1b630:	ldr	r0, [sp, #76]	; 0x4c
   1b634:	sub	r6, r6, r3
   1b638:	ldr	r7, [fp]
   1b63c:	ldr	r9, [sp, #68]	; 0x44
   1b640:	bl	1f9a8 <flatcc_json_parser_error_string@@Base>
   1b644:	add	r6, r6, #1
   1b648:	mov	r3, r9
   1b64c:	str	r6, [sp]
   1b650:	mov	r2, r8
   1b654:	ldr	r1, [pc, #580]	; 1b8a0 <test_parse@@Base+0x3a8>
   1b658:	str	r0, [sp, #4]
   1b65c:	mov	r0, r7
   1b660:	bl	12660 <fprintf@plt>
   1b664:	mvn	r3, #0
   1b668:	str	r3, [sp, #16]
   1b66c:	b	1b798 <test_parse@@Base+0x2a0>
   1b670:	add	r3, sp, #32
   1b674:	mov	r2, sl
   1b678:	mov	r1, r4
   1b67c:	add	r0, sp, #52	; 0x34
   1b680:	bl	15e74 <_start@@Base+0x35c0>
   1b684:	ldr	r3, [sp, #76]	; 0x4c
   1b688:	cmp	r3, #0
   1b68c:	str	r3, [sp, #16]
   1b690:	bne	1b624 <test_parse@@Base+0x12c>
   1b694:	ldr	r1, [sp, #32]
   1b698:	mov	r0, r5
   1b69c:	bl	1c92c <flatcc_builder_end_buffer@@Base>
   1b6a0:	cmp	r0, #0
   1b6a4:	beq	1b624 <test_parse@@Base+0x12c>
   1b6a8:	ldr	r3, [sp, #68]	; 0x44
   1b6ac:	ldr	r2, [r6, #716]	; 0x2cc
   1b6b0:	ldr	r1, [pc, #492]	; 1b8a4 <test_parse@@Base+0x3ac>
   1b6b4:	ldr	r0, [fp]
   1b6b8:	str	r4, [sp, #92]	; 0x5c
   1b6bc:	bl	12660 <fprintf@plt>
   1b6c0:	add	r1, sp, #28
   1b6c4:	mov	r0, r5
   1b6c8:	bl	1e710 <flatcc_builder_finalize_aligned_buffer@@Base>
   1b6cc:	ldr	r3, [sp, #28]
   1b6d0:	ldr	r2, [pc, #464]	; 1b8a8 <test_parse@@Base+0x3b0>
   1b6d4:	str	r3, [sp, #20]
   1b6d8:	ldr	r3, [pc, #460]	; 1b8ac <test_parse@@Base+0x3b4>
   1b6dc:	ldr	r1, [pc, #460]	; 1b8b0 <test_parse@@Base+0x3b8>
   1b6e0:	ldr	r7, [r3]
   1b6e4:	str	r0, [sp, #12]
   1b6e8:	mov	r0, r7
   1b6ec:	bl	12660 <fprintf@plt>
   1b6f0:	ldr	r3, [sp, #12]
   1b6f4:	ldr	r9, [sp, #16]
   1b6f8:	sub	sl, r3, #1
   1b6fc:	ldr	r3, [sp, #20]
   1b700:	cmp	r3, r9
   1b704:	bne	1b7b4 <test_parse@@Base+0x2bc>
   1b708:	ldr	sl, [pc, #420]	; 1b8b4 <test_parse@@Base+0x3bc>
   1b70c:	ands	r6, r9, #15
   1b710:	bne	1b838 <test_parse@@Base+0x340>
   1b714:	add	r2, sp, #32
   1b718:	ldr	r1, [pc, #408]	; 1b8b8 <test_parse@@Base+0x3c0>
   1b71c:	mov	r0, r7
   1b720:	bl	12660 <fprintf@plt>
   1b724:	mov	r2, r8
   1b728:	ldr	r3, [sp, #28]
   1b72c:	ldr	r1, [pc, #392]	; 1b8bc <test_parse@@Base+0x3c4>
   1b730:	ldr	r0, [fp]
   1b734:	bl	12660 <fprintf@plt>
   1b738:	ldr	r0, [sp, #12]
   1b73c:	bl	1b390 <verify_parse@@Base>
   1b740:	ldr	r3, [pc, #356]	; 1b8ac <test_parse@@Base+0x3b4>
   1b744:	ldr	r2, [pc, #372]	; 1b8c0 <test_parse@@Base+0x3c8>
   1b748:	ldr	r1, [pc, #372]	; 1b8c4 <test_parse@@Base+0x3cc>
   1b74c:	ldr	r7, [r3]
   1b750:	ldr	r8, [sp, #28]
   1b754:	mov	r0, r7
   1b758:	bl	12660 <fprintf@plt>
   1b75c:	ldr	r9, [pc, #336]	; 1b8b4 <test_parse@@Base+0x3bc>
   1b760:	ldr	sl, [pc, #352]	; 1b8c8 <test_parse@@Base+0x3d0>
   1b764:	ldr	fp, [pc, #352]	; 1b8cc <test_parse@@Base+0x3d4>
   1b768:	cmp	r8, r6
   1b76c:	bne	1b84c <test_parse@@Base+0x354>
   1b770:	mov	r1, r7
   1b774:	ldr	r0, [pc, #340]	; 1b8d0 <test_parse@@Base+0x3d8>
   1b778:	bl	126c0 <fputs@plt>
   1b77c:	mov	r0, r5
   1b780:	bl	1c308 <flatcc_builder_reset@@Base>
   1b784:	ldr	r3, [sp, #12]
   1b788:	cmp	r3, #0
   1b78c:	beq	1b798 <test_parse@@Base+0x2a0>
   1b790:	mov	r0, r3
   1b794:	bl	1e79c <flatcc_builder_aligned_free@@Base>
   1b798:	mov	r0, r4
   1b79c:	bl	125d0 <free@plt>
   1b7a0:	mov	r0, r5
   1b7a4:	bl	1c314 <flatcc_builder_clear@@Base>
   1b7a8:	ldr	r0, [sp, #16]
   1b7ac:	add	sp, sp, #332	; 0x14c
   1b7b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b7b4:	ands	r6, r9, #15
   1b7b8:	bne	1b820 <test_parse@@Base+0x328>
   1b7bc:	cmp	r9, #0
   1b7c0:	beq	1b7d4 <test_parse@@Base+0x2dc>
   1b7c4:	add	r2, sp, #32
   1b7c8:	ldr	r1, [pc, #232]	; 1b8b8 <test_parse@@Base+0x3c0>
   1b7cc:	mov	r0, r7
   1b7d0:	bl	12660 <fprintf@plt>
   1b7d4:	mov	r2, r9
   1b7d8:	ldr	r1, [pc, #244]	; 1b8d4 <test_parse@@Base+0x3dc>
   1b7dc:	mov	r0, r7
   1b7e0:	bl	12660 <fprintf@plt>
   1b7e4:	ldrb	r2, [sl, #1]
   1b7e8:	ldr	r1, [pc, #232]	; 1b8d8 <test_parse@@Base+0x3e0>
   1b7ec:	mov	r0, r7
   1b7f0:	bl	12660 <fprintf@plt>
   1b7f4:	ldrb	r2, [sl, #1]!
   1b7f8:	add	r3, sp, #328	; 0x148
   1b7fc:	add	r6, r3, r6
   1b800:	sub	r1, r2, #32
   1b804:	cmp	r1, #94	; 0x5e
   1b808:	movhi	r2, #46	; 0x2e
   1b80c:	strb	r2, [r6, #-296]	; 0xfffffed8
   1b810:	mov	r2, #0
   1b814:	strb	r2, [r6, #-295]	; 0xfffffed9
   1b818:	add	r9, r9, #1
   1b81c:	b	1b6fc <test_parse@@Base+0x204>
   1b820:	tst	r9, #7
   1b824:	bne	1b7e4 <test_parse@@Base+0x2ec>
   1b828:	mov	r1, r7
   1b82c:	mov	r0, #32
   1b830:	bl	126a8 <fputc@plt>
   1b834:	b	1b7e4 <test_parse@@Base+0x2ec>
   1b838:	mov	r1, r7
   1b83c:	mov	r0, sl
   1b840:	bl	126c0 <fputs@plt>
   1b844:	add	r9, r9, #1
   1b848:	b	1b70c <test_parse@@Base+0x214>
   1b84c:	tst	r6, #15
   1b850:	moveq	r1, r7
   1b854:	moveq	r0, sl
   1b858:	beq	1b86c <test_parse@@Base+0x374>
   1b85c:	tst	r6, #7
   1b860:	bne	1b870 <test_parse@@Base+0x378>
   1b864:	mov	r1, r7
   1b868:	mov	r0, r9
   1b86c:	bl	126c0 <fputs@plt>
   1b870:	ldr	r3, [sp, #12]
   1b874:	mov	r1, fp
   1b878:	mov	r0, r7
   1b87c:	ldrb	r2, [r3, r6]
   1b880:	bl	12660 <fprintf@plt>
   1b884:	add	r6, r6, #1
   1b888:	b	1b768 <test_parse@@Base+0x270>
   1b88c:	andeq	r4, r3, r0, lsl #1
   1b890:	andeq	r2, r2, r6, asr #7
   1b894:	andeq	r4, r3, r0, asr #7
   1b898:	andeq	r2, r2, fp, ror r4
   1b89c:	andeq	r2, r2, r9, asr #7
   1b8a0:	muleq	r2, pc, r4	; <UNPREDICTABLE>
   1b8a4:	andeq	r2, r2, lr, asr #7
   1b8a8:	strdeq	r2, [r2], -r0
   1b8ac:	andeq	r4, r3, r4, asr #7
   1b8b0:	andeq	r2, r2, pc, lsl #8
   1b8b4:	andeq	r2, r2, r9, ror #8
   1b8b8:	andeq	r2, r2, r4, lsl r4
   1b8bc:	andeq	r2, r2, r8, lsr #8
   1b8c0:	andeq	r2, r2, r8, lsl #8
   1b8c4:	andeq	r2, r2, fp, asr #8
   1b8c8:	andeq	r2, r2, r8, ror #8
   1b8cc:	andeq	r2, r2, sp, ror #8
   1b8d0:	andeq	r2, r2, r6, ror r4
   1b8d4:	andeq	r2, r2, sl, lsl r4
   1b8d8:	andeq	r2, r2, r2, lsr #8
   1b8dc:	ldr	ip, [r0, #28]
   1b8e0:	ldr	r3, [r0, #64]	; 0x40
   1b8e4:	ldr	r2, [r0, #60]	; 0x3c
   1b8e8:	sub	r3, r3, ip
   1b8ec:	cmp	r3, r1
   1b8f0:	strls	r3, [r0, #24]
   1b8f4:	strhi	r1, [r0, #24]
   1b8f8:	ldr	r3, [r0, #32]
   1b8fc:	add	r2, r2, ip
   1b900:	str	r2, [r0, #16]
   1b904:	str	r1, [r3, #4]
   1b908:	bx	lr
   1b90c:	push	{r0, r1, r4, r5, r6, lr}
   1b910:	mov	r6, r2
   1b914:	ldr	r2, [r0, #28]
   1b918:	mov	r3, #1
   1b91c:	str	r3, [sp]
   1b920:	add	r2, r1, r2
   1b924:	ldr	r5, [r0, #48]	; 0x30
   1b928:	add	r1, r0, #60	; 0x3c
   1b92c:	mov	r4, r0
   1b930:	ldr	r0, [r0, #40]	; 0x28
   1b934:	blx	r5
   1b938:	subs	r5, r0, #0
   1b93c:	mvnne	r5, #0
   1b940:	bne	1b950 <test_parse@@Base+0x458>
   1b944:	mov	r1, r6
   1b948:	mov	r0, r4
   1b94c:	bl	1b8dc <test_parse@@Base+0x3e4>
   1b950:	mov	r0, r5
   1b954:	add	sp, sp, #8
   1b958:	pop	{r4, r5, r6, pc}
   1b95c:	push	{r4, r5, r6, lr}
   1b960:	mov	r4, r0
   1b964:	ldr	r5, [r0, #20]
   1b968:	ldr	r3, [r0, #24]
   1b96c:	add	r1, r5, r1
   1b970:	cmp	r1, r3
   1b974:	str	r1, [r0, #20]
   1b978:	bcs	1b988 <test_parse@@Base+0x490>
   1b97c:	ldr	r0, [r4, #16]
   1b980:	add	r0, r0, r5
   1b984:	pop	{r4, r5, r6, pc}
   1b988:	mvn	r2, #3
   1b98c:	add	r1, r1, #1
   1b990:	bl	1b90c <test_parse@@Base+0x414>
   1b994:	cmp	r0, #0
   1b998:	beq	1b97c <test_parse@@Base+0x484>
   1b99c:	mov	r0, #0
   1b9a0:	pop	{r4, r5, r6, pc}
   1b9a4:	push	{r4, lr}
   1b9a8:	mov	r4, r0
   1b9ac:	ldr	r2, [r0, #20]
   1b9b0:	mov	r1, #0
   1b9b4:	ldr	r0, [r0, #16]
   1b9b8:	bl	12678 <memset@plt>
   1b9bc:	ldr	r3, [r4, #32]
   1b9c0:	mov	r0, r4
   1b9c4:	ldr	r2, [r3, #8]
   1b9c8:	ldr	r1, [r3, #4]
   1b9cc:	str	r2, [r4, #20]
   1b9d0:	ldr	r2, [r3]
   1b9d4:	str	r2, [r4, #28]
   1b9d8:	bl	1b8dc <test_parse@@Base+0x3e4>
   1b9dc:	ldrh	r3, [r4, #130]	; 0x82
   1b9e0:	ldrh	r2, [r4, #128]	; 0x80
   1b9e4:	cmp	r2, r3
   1b9e8:	strhcc	r3, [r4, #128]	; 0x80
   1b9ec:	ldr	r3, [r4, #32]
   1b9f0:	sub	r3, r3, #36	; 0x24
   1b9f4:	ldrh	r2, [r3, #48]	; 0x30
   1b9f8:	str	r3, [r4, #32]
   1b9fc:	ldr	r3, [r4, #156]	; 0x9c
   1ba00:	strh	r2, [r4, #130]	; 0x82
   1ba04:	sub	r3, r3, #1
   1ba08:	str	r3, [r4, #156]	; 0x9c
   1ba0c:	pop	{r4, pc}
   1ba10:	ldr	r3, [r0, #20]
   1ba14:	mov	r2, r1
   1ba18:	sub	r3, r3, r1
   1ba1c:	str	r3, [r0, #20]
   1ba20:	ldr	r0, [r0, #16]
   1ba24:	mov	r1, #0
   1ba28:	add	r0, r0, r3
   1ba2c:	b	12678 <memset@plt>
   1ba30:	push	{r4, r5, r6, lr}
   1ba34:	mov	r6, r1
   1ba38:	mov	r1, r2
   1ba3c:	mov	r4, r2
   1ba40:	bl	1b95c <test_parse@@Base+0x464>
   1ba44:	subs	r5, r0, #0
   1ba48:	beq	1ba58 <test_parse@@Base+0x560>
   1ba4c:	mov	r2, r4
   1ba50:	mov	r1, r6
   1ba54:	bl	125dc <memcpy@plt>
   1ba58:	mov	r0, r5
   1ba5c:	pop	{r4, r5, r6, pc}
   1ba60:	push	{r0, r1, r4, lr}
   1ba64:	add	r3, sp, #8
   1ba68:	cmp	r0, #4
   1ba6c:	mov	r4, #0
   1ba70:	mov	r2, r1
   1ba74:	str	r4, [r3, #-4]!
   1ba78:	movcs	r1, r0
   1ba7c:	movcc	r1, #4
   1ba80:	mov	r0, r3
   1ba84:	bl	1266c <posix_memalign@plt>
   1ba88:	cmp	r0, r4
   1ba8c:	beq	1baa4 <test_parse@@Base+0x5ac>
   1ba90:	ldr	r0, [sp, #4]
   1ba94:	cmp	r0, r4
   1ba98:	beq	1baa4 <test_parse@@Base+0x5ac>
   1ba9c:	bl	125d0 <free@plt>
   1baa0:	str	r4, [sp, #4]
   1baa4:	ldr	r0, [sp, #4]
   1baa8:	add	sp, sp, #8
   1baac:	pop	{r4, pc}

0001bab0 <flatcc_builder_default_alloc@@Base>:
   1bab0:	push	{r4, r5, r6, r7, r8, lr}
   1bab4:	subs	r6, r2, #0
   1bab8:	mov	r5, r1
   1babc:	bne	1bae0 <flatcc_builder_default_alloc@@Base+0x30>
   1bac0:	ldr	r0, [r1]
   1bac4:	cmp	r0, #0
   1bac8:	popeq	{r4, r5, r6, r7, r8, pc}
   1bacc:	bl	125d0 <free@plt>
   1bad0:	str	r6, [r5]
   1bad4:	str	r6, [r5, #4]
   1bad8:	mov	r0, #0
   1badc:	pop	{r4, r5, r6, r7, r8, pc}
   1bae0:	ldr	r2, [sp, #24]
   1bae4:	mov	r7, r3
   1bae8:	sub	r2, r2, #1
   1baec:	cmp	r2, #6
   1baf0:	ldrls	pc, [pc, r2, lsl #2]
   1baf4:	b	1bb88 <flatcc_builder_default_alloc@@Base+0xd8>
   1baf8:	muleq	r1, r0, fp
   1bafc:	andeq	fp, r1, r8, lsl #23
   1bb00:	andeq	fp, r1, r8, lsl #23
   1bb04:	andeq	fp, r1, r8, ror fp
   1bb08:	andeq	fp, r1, r4, lsl fp
   1bb0c:	andeq	fp, r1, r8, lsl #23
   1bb10:	andeq	fp, r1, r0, lsl #23
   1bb14:	mov	r4, r6
   1bb18:	cmp	r6, r4
   1bb1c:	bhi	1bb98 <flatcc_builder_default_alloc@@Base+0xe8>
   1bb20:	ldr	r2, [r5, #4]
   1bb24:	cmp	r6, r2
   1bb28:	bhi	1bb34 <flatcc_builder_default_alloc@@Base+0x84>
   1bb2c:	cmp	r4, r2, lsr #1
   1bb30:	bls	1bad8 <flatcc_builder_default_alloc@@Base+0x28>
   1bb34:	mov	r1, r4
   1bb38:	ldr	r0, [r5]
   1bb3c:	bl	1260c <realloc@plt>
   1bb40:	subs	r6, r0, #0
   1bb44:	beq	1bba0 <flatcc_builder_default_alloc@@Base+0xf0>
   1bb48:	cmp	r7, #0
   1bb4c:	beq	1bb6c <flatcc_builder_default_alloc@@Base+0xbc>
   1bb50:	ldr	r0, [r5, #4]
   1bb54:	cmp	r4, r0
   1bb58:	bls	1bb6c <flatcc_builder_default_alloc@@Base+0xbc>
   1bb5c:	sub	r2, r4, r0
   1bb60:	mov	r1, #0
   1bb64:	add	r0, r6, r0
   1bb68:	bl	12678 <memset@plt>
   1bb6c:	str	r6, [r5]
   1bb70:	str	r4, [r5, #4]
   1bb74:	b	1bad8 <flatcc_builder_default_alloc@@Base+0x28>
   1bb78:	mov	r4, #288	; 0x120
   1bb7c:	b	1bb18 <flatcc_builder_default_alloc@@Base+0x68>
   1bb80:	mov	r4, #64	; 0x40
   1bb84:	b	1bb18 <flatcc_builder_default_alloc@@Base+0x68>
   1bb88:	mov	r4, #32
   1bb8c:	b	1bb18 <flatcc_builder_default_alloc@@Base+0x68>
   1bb90:	mov	r4, #256	; 0x100
   1bb94:	b	1bb18 <flatcc_builder_default_alloc@@Base+0x68>
   1bb98:	lsl	r4, r4, #1
   1bb9c:	b	1bb18 <flatcc_builder_default_alloc@@Base+0x68>
   1bba0:	mvn	r0, #0
   1bba4:	pop	{r4, r5, r6, r7, r8, pc}
   1bba8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bbac:	add	r6, r0, #52	; 0x34
   1bbb0:	mov	r4, r1
   1bbb4:	add	r1, r6, r1, lsl #3
   1bbb8:	mov	r5, r2
   1bbbc:	add	r2, r2, r3
   1bbc0:	ldr	r3, [r1, #4]
   1bbc4:	cmp	r2, r3
   1bbc8:	bls	1bbfc <flatcc_builder_default_alloc@@Base+0x14c>
   1bbcc:	str	r4, [sp]
   1bbd0:	ldr	r3, [sp, #32]
   1bbd4:	ldr	r7, [r0, #48]	; 0x30
   1bbd8:	ldr	r0, [r0, #40]	; 0x28
   1bbdc:	blx	r7
   1bbe0:	cmp	r0, #0
   1bbe4:	beq	1bbfc <flatcc_builder_default_alloc@@Base+0x14c>
   1bbe8:	ldr	r3, [pc, #28]	; 1bc0c <flatcc_builder_default_alloc@@Base+0x15c>
   1bbec:	mov	r2, #308	; 0x134
   1bbf0:	ldr	r1, [pc, #24]	; 1bc10 <flatcc_builder_default_alloc@@Base+0x160>
   1bbf4:	ldr	r0, [pc, #24]	; 1bc14 <flatcc_builder_default_alloc@@Base+0x164>
   1bbf8:	bl	126d8 <__assert_fail@plt>
   1bbfc:	ldr	r0, [r6, r4, lsl #3]
   1bc00:	add	r0, r0, r5
   1bc04:	add	sp, sp, #12
   1bc08:	pop	{r4, r5, r6, r7, pc}
   1bc0c:	strdeq	r2, [r2], -lr
   1bc10:	strdeq	r2, [r2], -sp
   1bc14:	andeq	r2, r2, sl, ror #24
   1bc18:	ldr	r2, [r0, #156]	; 0x9c
   1bc1c:	ldr	r3, [r0, #160]	; 0xa0
   1bc20:	push	{r0, r1, r4, r5, r6, lr}
   1bc24:	mov	r5, r1
   1bc28:	add	r1, r2, #1
   1bc2c:	cmp	r1, r3
   1bc30:	mov	r4, r0
   1bc34:	str	r1, [r0, #156]	; 0x9c
   1bc38:	ble	1bce8 <flatcc_builder_default_alloc@@Base+0x238>
   1bc3c:	ldr	r3, [r0, #176]	; 0xb0
   1bc40:	cmp	r3, #0
   1bc44:	cmpgt	r1, r3
   1bc48:	movgt	r3, #1
   1bc4c:	movle	r3, #0
   1bc50:	ble	1bc60 <flatcc_builder_default_alloc@@Base+0x1b0>
   1bc54:	mvn	r0, #0
   1bc58:	add	sp, sp, #8
   1bc5c:	pop	{r4, r5, r6, pc}
   1bc60:	mov	r6, #36	; 0x24
   1bc64:	str	r3, [sp]
   1bc68:	mul	r2, r6, r2
   1bc6c:	mov	r3, r6
   1bc70:	mov	r1, #4
   1bc74:	bl	1bba8 <flatcc_builder_default_alloc@@Base+0xf8>
   1bc78:	cmp	r0, #0
   1bc7c:	str	r0, [r4, #32]
   1bc80:	beq	1bc54 <flatcc_builder_default_alloc@@Base+0x1a4>
   1bc84:	mov	r1, r6
   1bc88:	ldr	r0, [r4, #88]	; 0x58
   1bc8c:	bl	219ec <flatcc_json_parser_table_as_root@@Base+0x4>
   1bc90:	ldr	r3, [r4, #176]	; 0xb0
   1bc94:	cmp	r3, #0
   1bc98:	cmpgt	r0, r3
   1bc9c:	str	r0, [r4, #160]	; 0xa0
   1bca0:	strgt	r3, [r4, #160]	; 0xa0
   1bca4:	ldrh	r1, [r4, #130]	; 0x82
   1bca8:	ldr	r2, [r4, #32]
   1bcac:	ldr	r3, [r4, #20]
   1bcb0:	mvn	r0, #3
   1bcb4:	strh	r1, [r2, #12]
   1bcb8:	ldr	r1, [r4, #28]
   1bcbc:	str	r3, [r2, #8]
   1bcc0:	add	r3, r3, r1
   1bcc4:	add	r3, r3, #7
   1bcc8:	strh	r5, [r4, #130]	; 0x82
   1bccc:	bic	r3, r3, #7
   1bcd0:	str	r0, [r2, #4]
   1bcd4:	mov	r0, #0
   1bcd8:	str	r1, [r2]
   1bcdc:	str	r3, [r4, #28]
   1bce0:	str	r0, [r4, #20]
   1bce4:	b	1bc58 <flatcc_builder_default_alloc@@Base+0x1a8>
   1bce8:	ldr	r3, [r0, #32]
   1bcec:	add	r3, r3, #36	; 0x24
   1bcf0:	str	r3, [r0, #32]
   1bcf4:	b	1bca4 <flatcc_builder_default_alloc@@Base+0x1f4>
   1bcf8:	ldr	r3, [r0, #32]
   1bcfc:	push	{r0, r1, r2, r4, r5, lr}
   1bd00:	add	r1, r1, #2
   1bd04:	ldr	r2, [r3, #16]
   1bd08:	lsl	r5, r1, #1
   1bd0c:	ldrh	r1, [r3, #28]
   1bd10:	mov	r3, #1
   1bd14:	str	r3, [sp]
   1bd18:	mov	r3, r5
   1bd1c:	add	r2, r2, r1, lsl #1
   1bd20:	mov	r1, #0
   1bd24:	mov	r4, r0
   1bd28:	bl	1bba8 <flatcc_builder_default_alloc@@Base+0xf8>
   1bd2c:	cmp	r0, #0
   1bd30:	streq	r0, [r4, #4]
   1bd34:	mvneq	r0, #0
   1bd38:	beq	1bd74 <flatcc_builder_default_alloc@@Base+0x2c4>
   1bd3c:	ldr	r2, [r4, #32]
   1bd40:	add	r0, r0, #4
   1bd44:	mov	r3, #0
   1bd48:	str	r0, [r4, #4]
   1bd4c:	str	r3, [sp]
   1bd50:	mov	r1, #3
   1bd54:	sub	r3, r5, #3
   1bd58:	ldr	r2, [r2, #20]
   1bd5c:	mov	r0, r4
   1bd60:	bl	1bba8 <flatcc_builder_default_alloc@@Base+0xf8>
   1bd64:	cmp	r0, #0
   1bd68:	str	r0, [r4]
   1bd6c:	movne	r0, #0
   1bd70:	mvneq	r0, #0
   1bd74:	add	sp, sp, #12
   1bd78:	pop	{r4, r5, pc}
   1bd7c:	push	{r0, r1, r2, r4, r5, lr}
   1bd80:	ldr	r3, [r1]
   1bd84:	ldr	r4, [r0, #140]	; 0x8c
   1bd88:	add	r2, r3, r4
   1bd8c:	cmp	r4, r2
   1bd90:	str	r2, [r0, #140]	; 0x8c
   1bd94:	ble	1bdac <flatcc_builder_default_alloc@@Base+0x2fc>
   1bd98:	ldr	r3, [pc, #68]	; 1bde4 <flatcc_builder_default_alloc@@Base+0x334>
   1bd9c:	ldr	r2, [pc, #68]	; 1bde8 <flatcc_builder_default_alloc@@Base+0x338>
   1bda0:	ldr	r1, [pc, #68]	; 1bdec <flatcc_builder_default_alloc@@Base+0x33c>
   1bda4:	ldr	r0, [pc, #68]	; 1bdf0 <flatcc_builder_default_alloc@@Base+0x340>
   1bda8:	bl	126d8 <__assert_fail@plt>
   1bdac:	str	r3, [sp]
   1bdb0:	add	r1, r1, #8
   1bdb4:	ldr	r5, [r0, #44]	; 0x2c
   1bdb8:	ldr	r2, [r1, #-4]
   1bdbc:	mov	r3, r4
   1bdc0:	ldr	r0, [r0, #36]	; 0x24
   1bdc4:	blx	r5
   1bdc8:	cmp	r0, #0
   1bdcc:	ldrne	r3, [pc, #16]	; 1bde4 <flatcc_builder_default_alloc@@Base+0x334>
   1bdd0:	ldrne	r2, [pc, #28]	; 1bdf4 <flatcc_builder_default_alloc@@Base+0x344>
   1bdd4:	bne	1bda0 <flatcc_builder_default_alloc@@Base+0x2f0>
   1bdd8:	add	r0, r4, #1
   1bddc:	add	sp, sp, #12
   1bde0:	pop	{r4, r5, pc}
   1bde4:	andeq	r2, r2, sp, lsl #10
   1bde8:	andeq	r0, r0, r1, lsr #5
   1bdec:	strdeq	r2, [r2], -sp
   1bdf0:	andeq	r2, r2, sl, ror #24
   1bdf4:	andeq	r0, r0, r5, lsr #5
   1bdf8:	cmp	r2, #0
   1bdfc:	bne	1be0c <flatcc_builder_default_alloc@@Base+0x35c>
   1be00:	ldrh	r2, [r0, #132]	; 0x84
   1be04:	cmp	r2, #0
   1be08:	moveq	r2, #1
   1be0c:	ldrh	ip, [r1]
   1be10:	cmp	ip, #3
   1be14:	movls	ip, #4
   1be18:	strhls	ip, [r1]
   1be1c:	ldrh	ip, [r1]
   1be20:	cmp	ip, r2
   1be24:	strhcc	r2, [r1]
   1be28:	cmp	r3, #0
   1be2c:	bne	1be90 <flatcc_builder_default_alloc@@Base+0x3e0>
   1be30:	ldr	r3, [r0, #140]	; 0x8c
   1be34:	sub	r2, r2, #1
   1be38:	ands	r2, r2, r3
   1be3c:	beq	1be90 <flatcc_builder_default_alloc@@Base+0x3e0>
   1be40:	push	{r4, lr}
   1be44:	sub	sp, sp, #72	; 0x48
   1be48:	ldr	r4, [pc, #72]	; 1be98 <flatcc_builder_default_alloc@@Base+0x3e8>
   1be4c:	mov	r3, #1
   1be50:	mov	r1, sp
   1be54:	str	r2, [sp]
   1be58:	str	r4, [sp, #8]
   1be5c:	str	r2, [sp, #12]
   1be60:	str	r3, [sp, #4]
   1be64:	bl	1bd7c <flatcc_builder_default_alloc@@Base+0x2cc>
   1be68:	cmp	r0, #0
   1be6c:	bne	1be84 <flatcc_builder_default_alloc@@Base+0x3d4>
   1be70:	add	r3, r4, #512	; 0x200
   1be74:	ldr	r2, [pc, #32]	; 1be9c <flatcc_builder_default_alloc@@Base+0x3ec>
   1be78:	ldr	r1, [pc, #32]	; 1bea0 <flatcc_builder_default_alloc@@Base+0x3f0>
   1be7c:	ldr	r0, [pc, #32]	; 1bea4 <flatcc_builder_default_alloc@@Base+0x3f4>
   1be80:	bl	126d8 <__assert_fail@plt>
   1be84:	mov	r0, #0
   1be88:	add	sp, sp, #72	; 0x48
   1be8c:	pop	{r4, pc}
   1be90:	mov	r0, #0
   1be94:	bx	lr
   1be98:	andeq	r2, r2, r7, lsl r5
   1be9c:			; <UNDEFINED> instruction: 0x000002be
   1bea0:	strdeq	r2, [r2], -sp
   1bea4:	andeq	r2, r2, sl, ror #24
   1bea8:	ldr	r2, [r0, #136]	; 0x88
   1beac:	ldr	r3, [r1]
   1beb0:	push	{r0, r1, r4, r5, r6, lr}
   1beb4:	sub	r4, r2, r3
   1beb8:	cmp	r2, r4
   1bebc:	bgt	1bed4 <flatcc_builder_default_alloc@@Base+0x424>
   1bec0:	ldr	r3, [pc, #76]	; 1bf14 <flatcc_builder_default_alloc@@Base+0x464>
   1bec4:	ldr	r2, [pc, #76]	; 1bf18 <flatcc_builder_default_alloc@@Base+0x468>
   1bec8:	ldr	r1, [pc, #76]	; 1bf1c <flatcc_builder_default_alloc@@Base+0x46c>
   1becc:	ldr	r0, [pc, #76]	; 1bf20 <flatcc_builder_default_alloc@@Base+0x470>
   1bed0:	bl	126d8 <__assert_fail@plt>
   1bed4:	str	r3, [sp]
   1bed8:	mov	r5, r0
   1bedc:	ldr	r6, [r0, #44]	; 0x2c
   1bee0:	ldr	r2, [r1, #4]
   1bee4:	mov	r3, r4
   1bee8:	add	r1, r1, #8
   1beec:	ldr	r0, [r0, #36]	; 0x24
   1bef0:	blx	r6
   1bef4:	cmp	r0, #0
   1bef8:	ldrne	r3, [pc, #20]	; 1bf14 <flatcc_builder_default_alloc@@Base+0x464>
   1befc:	ldrne	r2, [pc, #32]	; 1bf24 <flatcc_builder_default_alloc@@Base+0x474>
   1bf00:	bne	1bec8 <flatcc_builder_default_alloc@@Base+0x418>
   1bf04:	mov	r0, r4
   1bf08:	str	r4, [r5, #136]	; 0x88
   1bf0c:	add	sp, sp, #8
   1bf10:	pop	{r4, r5, r6, pc}
   1bf14:	andeq	r2, r2, r6, lsr #14
   1bf18:	andeq	r0, r0, r7, lsl #5
   1bf1c:	strdeq	r2, [r2], -sp
   1bf20:	andeq	r2, r2, sl, ror #24
   1bf24:	andeq	r0, r0, fp, lsl #5
   1bf28:	ldr	r3, [r0, #20]
   1bf2c:	adds	r1, r3, r1
   1bf30:	movcs	r3, #1
   1bf34:	movcc	r3, #0
   1bf38:	cmp	r1, r2
   1bf3c:	movls	r2, r3
   1bf40:	orrhi	r2, r3, #1
   1bf44:	cmp	r2, #0
   1bf48:	beq	1bf64 <flatcc_builder_default_alloc@@Base+0x4b4>
   1bf4c:	push	{r4, lr}
   1bf50:	mov	r2, #892	; 0x37c
   1bf54:	ldr	r3, [pc, #20]	; 1bf70 <flatcc_builder_default_alloc@@Base+0x4c0>
   1bf58:	ldr	r1, [pc, #20]	; 1bf74 <flatcc_builder_default_alloc@@Base+0x4c4>
   1bf5c:	ldr	r0, [pc, #20]	; 1bf78 <flatcc_builder_default_alloc@@Base+0x4c8>
   1bf60:	bl	126d8 <__assert_fail@plt>
   1bf64:	str	r1, [r0, #20]
   1bf68:	mov	r0, r2
   1bf6c:	bx	lr
   1bf70:	andeq	r2, r2, r1, lsr r7
   1bf74:	strdeq	r2, [r2], -sp
   1bf78:	andeq	r2, r2, r3, asr #24
   1bf7c:	ldrh	ip, [r0, #128]	; 0x80
   1bf80:	push	{r4, r5, r6, r7, lr}
   1bf84:	sub	sp, sp, #84	; 0x54
   1bf88:	cmp	ip, #3
   1bf8c:	movls	ip, #4
   1bf90:	strhls	ip, [r0, #128]	; 0x80
   1bf94:	mov	ip, #4
   1bf98:	add	r5, sp, ip
   1bf9c:	str	ip, [sp, #8]
   1bfa0:	ldr	r4, [r0, #136]	; 0x88
   1bfa4:	str	ip, [sp, #20]
   1bfa8:	mov	ip, #1
   1bfac:	str	ip, [sp, #12]
   1bfb0:	lsls	ip, r2, #2
   1bfb4:	strne	ip, [sp, #28]
   1bfb8:	and	lr, r4, #3
   1bfbc:	str	r5, [sp, #16]
   1bfc0:	addne	r5, ip, #4
   1bfc4:	movne	ip, #2
   1bfc8:	strne	r5, [sp, #8]
   1bfcc:	strne	r1, [sp, #24]
   1bfd0:	strne	ip, [sp, #12]
   1bfd4:	cmp	lr, #0
   1bfd8:	str	r2, [sp, #4]
   1bfdc:	beq	1c00c <flatcc_builder_default_alloc@@Base+0x55c>
   1bfe0:	ldr	ip, [sp, #8]
   1bfe4:	add	r5, sp, #80	; 0x50
   1bfe8:	add	ip, ip, lr
   1bfec:	str	ip, [sp, #8]
   1bff0:	ldr	ip, [sp, #12]
   1bff4:	ldr	r6, [pc, #204]	; 1c0c8 <flatcc_builder_default_alloc@@Base+0x618>
   1bff8:	add	ip, ip, #1
   1bffc:	str	ip, [sp, #12]
   1c000:	add	r5, r5, ip, lsl #3
   1c004:	str	r6, [r5, #-72]	; 0xffffffb8
   1c008:	str	lr, [r5, #-68]	; 0xffffffbc
   1c00c:	ldr	r5, [sp, #8]
   1c010:	sub	r6, r1, #4
   1c014:	sub	r5, r4, r5
   1c018:	mov	lr, r3
   1c01c:	add	r2, r3, r2
   1c020:	mvn	r7, #3
   1c024:	cmp	r2, lr
   1c028:	bne	1c03c <flatcc_builder_default_alloc@@Base+0x58c>
   1c02c:	add	r1, sp, #8
   1c030:	bl	1bea8 <flatcc_builder_default_alloc@@Base+0x3f8>
   1c034:	add	sp, sp, #84	; 0x54
   1c038:	pop	{r4, r5, r6, r7, pc}
   1c03c:	ldr	r4, [r6, #4]!
   1c040:	cmp	r4, #0
   1c044:	beq	1c084 <flatcc_builder_default_alloc@@Base+0x5d4>
   1c048:	sub	ip, r7, r6
   1c04c:	add	ip, r1, ip
   1c050:	add	ip, ip, r4
   1c054:	sub	ip, ip, r5
   1c058:	cmp	r3, #0
   1c05c:	str	ip, [r6]
   1c060:	beq	1c0c0 <flatcc_builder_default_alloc@@Base+0x610>
   1c064:	ldrb	ip, [lr]
   1c068:	cmp	ip, #0
   1c06c:	bne	1c0c0 <flatcc_builder_default_alloc@@Base+0x610>
   1c070:	ldr	r3, [pc, #84]	; 1c0cc <flatcc_builder_default_alloc@@Base+0x61c>
   1c074:	ldr	r2, [pc, #84]	; 1c0d0 <flatcc_builder_default_alloc@@Base+0x620>
   1c078:	ldr	r1, [pc, #84]	; 1c0d4 <flatcc_builder_default_alloc@@Base+0x624>
   1c07c:	ldr	r0, [pc, #84]	; 1c0d8 <flatcc_builder_default_alloc@@Base+0x628>
   1c080:	bl	126d8 <__assert_fail@plt>
   1c084:	cmp	r3, #0
   1c088:	beq	1c0ac <flatcc_builder_default_alloc@@Base+0x5fc>
   1c08c:	ldrb	ip, [lr]
   1c090:	cmp	ip, #0
   1c094:	beq	1c0c0 <flatcc_builder_default_alloc@@Base+0x610>
   1c098:	ldr	r3, [pc, #44]	; 1c0cc <flatcc_builder_default_alloc@@Base+0x61c>
   1c09c:	ldr	r2, [pc, #56]	; 1c0dc <flatcc_builder_default_alloc@@Base+0x62c>
   1c0a0:	ldr	r1, [pc, #44]	; 1c0d4 <flatcc_builder_default_alloc@@Base+0x624>
   1c0a4:	ldr	r0, [pc, #52]	; 1c0e0 <flatcc_builder_default_alloc@@Base+0x630>
   1c0a8:	b	1c080 <flatcc_builder_default_alloc@@Base+0x5d0>
   1c0ac:	ldr	r3, [pc, #24]	; 1c0cc <flatcc_builder_default_alloc@@Base+0x61c>
   1c0b0:	ldr	r2, [pc, #44]	; 1c0e4 <flatcc_builder_default_alloc@@Base+0x634>
   1c0b4:	ldr	r1, [pc, #24]	; 1c0d4 <flatcc_builder_default_alloc@@Base+0x624>
   1c0b8:	ldr	r0, [pc, #40]	; 1c0e8 <flatcc_builder_default_alloc@@Base+0x638>
   1c0bc:	b	1c080 <flatcc_builder_default_alloc@@Base+0x5d0>
   1c0c0:	add	lr, lr, #1
   1c0c4:	b	1c024 <flatcc_builder_default_alloc@@Base+0x574>
   1c0c8:	andeq	r2, r2, r7, lsl r5
   1c0cc:	andeq	r2, r2, r2, asr #14
   1c0d0:			; <UNDEFINED> instruction: 0x000005b1
   1c0d4:	strdeq	r2, [r2], -sp
   1c0d8:	andeq	r2, r2, lr, asr ip
   1c0dc:			; <UNDEFINED> instruction: 0x000005b5
   1c0e0:	andeq	r2, r2, ip, ror #24
   1c0e4:			; <UNDEFINED> instruction: 0x000005b7
   1c0e8:	andeq	r2, r2, sl, ror #24

0001c0ec <flatcc_builder_flush_vtable_cache@@Base>:
   1c0ec:	ldr	r3, [r0, #116]	; 0x74
   1c0f0:	cmp	r3, #0
   1c0f4:	bxeq	lr
   1c0f8:	push	{r4, lr}
   1c0fc:	mov	r1, #0
   1c100:	mov	r4, r0
   1c104:	ldr	r2, [r0, #96]	; 0x60
   1c108:	ldr	r0, [r0, #92]	; 0x5c
   1c10c:	bl	12678 <memset@plt>
   1c110:	mov	r3, #16
   1c114:	str	r3, [r4, #124]	; 0x7c
   1c118:	mov	r3, #0
   1c11c:	str	r3, [r4, #120]	; 0x78
   1c120:	pop	{r4, pc}

0001c124 <flatcc_builder_custom_init@@Base>:
   1c124:	push	{r4, r5, r6, r7, r8, lr}
   1c128:	mov	r6, r1
   1c12c:	mov	r7, r2
   1c130:	mov	r1, #0
   1c134:	mov	r2, #232	; 0xe8
   1c138:	mov	r4, r0
   1c13c:	mov	r5, r3
   1c140:	bl	12678 <memset@plt>
   1c144:	cmp	r6, #0
   1c148:	moveq	r3, #1
   1c14c:	addeq	r7, r4, #188	; 0xbc
   1c150:	ldreq	r6, [pc, #40]	; 1c180 <flatcc_builder_custom_init@@Base+0x5c>
   1c154:	str	r7, [r4, #36]	; 0x24
   1c158:	str	r6, [r4, #44]	; 0x2c
   1c15c:	mov	r0, #0
   1c160:	streq	r3, [r4, #184]	; 0xb8
   1c164:	ldr	r3, [pc, #24]	; 1c184 <flatcc_builder_custom_init@@Base+0x60>
   1c168:	cmp	r5, #0
   1c16c:	moveq	r5, r3
   1c170:	ldr	r3, [sp, #24]
   1c174:	str	r5, [r4, #48]	; 0x30
   1c178:	str	r3, [r4, #40]	; 0x28
   1c17c:	pop	{r4, r5, r6, r7, r8, pc}
   1c180:	andeq	lr, r1, r4, lsl #18
   1c184:			; <UNDEFINED> instruction: 0x0001bab0

0001c188 <flatcc_builder_init@@Base>:
   1c188:	push	{r4, lr}
   1c18c:	mov	r2, #232	; 0xe8
   1c190:	mov	r4, r0
   1c194:	mov	r1, #0
   1c198:	bl	12678 <memset@plt>
   1c19c:	mov	r3, #1
   1c1a0:	str	r3, [r4, #184]	; 0xb8
   1c1a4:	ldr	r3, [pc, #24]	; 1c1c4 <flatcc_builder_init@@Base+0x3c>
   1c1a8:	mov	r0, #0
   1c1ac:	str	r3, [r4, #48]	; 0x30
   1c1b0:	add	r3, r4, #188	; 0xbc
   1c1b4:	str	r3, [r4, #36]	; 0x24
   1c1b8:	ldr	r3, [pc, #8]	; 1c1c8 <flatcc_builder_init@@Base+0x40>
   1c1bc:	str	r3, [r4, #44]	; 0x2c
   1c1c0:	pop	{r4, pc}
   1c1c4:			; <UNDEFINED> instruction: 0x0001bab0
   1c1c8:	andeq	lr, r1, r4, lsl #18

0001c1cc <flatcc_builder_custom_reset@@Base>:
   1c1cc:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c1d0:	mov	r6, #0
   1c1d4:	mov	r4, r0
   1c1d8:	mov	r7, r1
   1c1dc:	mov	r8, r2
   1c1e0:	mov	r5, r0
   1c1e4:	mov	r9, #1
   1c1e8:	mov	sl, r6
   1c1ec:	ldr	r3, [r5, #52]	; 0x34
   1c1f0:	add	r1, r5, #52	; 0x34
   1c1f4:	cmp	r3, #0
   1c1f8:	beq	1c2d8 <flatcc_builder_custom_reset@@Base+0x10c>
   1c1fc:	cmp	r6, #5
   1c200:	cmpne	r8, #0
   1c204:	bne	1c2b0 <flatcc_builder_custom_reset@@Base+0xe4>
   1c208:	ldr	r2, [r5, #56]	; 0x38
   1c20c:	mov	r1, sl
   1c210:	ldr	r0, [r5, #52]	; 0x34
   1c214:	bl	12678 <memset@plt>
   1c218:	add	r6, r6, #1
   1c21c:	cmp	r6, #8
   1c220:	add	r5, r5, #8
   1c224:	bne	1c1ec <flatcc_builder_custom_reset@@Base+0x20>
   1c228:	ldr	r2, [r4, #124]	; 0x7c
   1c22c:	mov	r3, #0
   1c230:	cmp	r2, r3
   1c234:	movne	r2, #16
   1c238:	strne	r2, [r4, #124]	; 0x7c
   1c23c:	ldr	r2, [r4, #60]	; 0x3c
   1c240:	ldr	r0, [r4, #184]	; 0xb8
   1c244:	str	r2, [r4, #16]
   1c248:	ldr	r2, [r4, #76]	; 0x4c
   1c24c:	cmp	r7, #0
   1c250:	str	r2, [r4]
   1c254:	ldr	r2, [r4, #52]	; 0x34
   1c258:	strne	r3, [r4, #172]	; 0xac
   1c25c:	strne	r3, [r4, #176]	; 0xb0
   1c260:	strne	r3, [r4, #180]	; 0xb4
   1c264:	cmp	r0, #0
   1c268:	str	r3, [r4, #120]	; 0x78
   1c26c:	strh	r3, [r4, #128]	; 0x80
   1c270:	str	r3, [r4, #136]	; 0x88
   1c274:	str	r3, [r4, #140]	; 0x8c
   1c278:	str	r3, [r4, #156]	; 0x9c
   1c27c:	str	r3, [r4, #160]	; 0xa0
   1c280:	str	r3, [r4, #20]
   1c284:	str	r3, [r4, #24]
   1c288:	str	r3, [r4, #148]	; 0x94
   1c28c:	str	r3, [r4, #152]	; 0x98
   1c290:	str	r2, [r4, #4]
   1c294:	str	r3, [r4, #32]
   1c298:	beq	1c2a8 <flatcc_builder_custom_reset@@Base+0xdc>
   1c29c:	add	r0, r4, #188	; 0xbc
   1c2a0:	bl	1e7fc <flatcc_emitter_reset@@Base>
   1c2a4:	mov	r0, #0
   1c2a8:	add	sp, sp, #12
   1c2ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c2b0:	str	r6, [sp]
   1c2b4:	ldr	fp, [r4, #48]	; 0x30
   1c2b8:	mov	r3, r9
   1c2bc:	mov	r2, #1
   1c2c0:	ldr	r0, [r4, #40]	; 0x28
   1c2c4:	blx	fp
   1c2c8:	cmp	r0, #0
   1c2cc:	beq	1c208 <flatcc_builder_custom_reset@@Base+0x3c>
   1c2d0:	mvn	r0, #0
   1c2d4:	b	1c2a8 <flatcc_builder_custom_reset@@Base+0xdc>
   1c2d8:	ldr	r3, [r5, #56]	; 0x38
   1c2dc:	cmp	r3, #0
   1c2e0:	beq	1c218 <flatcc_builder_custom_reset@@Base+0x4c>
   1c2e4:	ldr	r3, [pc, #12]	; 1c2f8 <flatcc_builder_custom_reset@@Base+0x12c>
   1c2e8:	ldr	r2, [pc, #12]	; 1c2fc <flatcc_builder_custom_reset@@Base+0x130>
   1c2ec:	ldr	r1, [pc, #12]	; 1c300 <flatcc_builder_custom_reset@@Base+0x134>
   1c2f0:	ldr	r0, [pc, #12]	; 1c304 <flatcc_builder_custom_reset@@Base+0x138>
   1c2f4:	bl	126d8 <__assert_fail@plt>
   1c2f8:	andeq	r2, r2, pc, asr r7
   1c2fc:			; <UNDEFINED> instruction: 0x000001b2
   1c300:	strdeq	r2, [r2], -sp
   1c304:	andeq	r2, r2, sl, ror ip

0001c308 <flatcc_builder_reset@@Base>:
   1c308:	mov	r2, #0
   1c30c:	mov	r1, r2
   1c310:	b	1c1cc <flatcc_builder_custom_reset@@Base>

0001c314 <flatcc_builder_clear@@Base>:
   1c314:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1c318:	mov	r5, #0
   1c31c:	mov	r4, r0
   1c320:	add	r6, r0, #52	; 0x34
   1c324:	mov	r8, r5
   1c328:	str	r5, [sp]
   1c32c:	mov	r1, r6
   1c330:	ldr	r7, [r4, #48]	; 0x30
   1c334:	mov	r3, r8
   1c338:	mov	r2, #0
   1c33c:	ldr	r0, [r4, #40]	; 0x28
   1c340:	add	r5, r5, #1
   1c344:	blx	r7
   1c348:	cmp	r5, #8
   1c34c:	add	r6, r6, #8
   1c350:	bne	1c328 <flatcc_builder_clear@@Base+0x14>
   1c354:	ldr	r3, [r4, #184]	; 0xb8
   1c358:	cmp	r3, #0
   1c35c:	beq	1c368 <flatcc_builder_clear@@Base+0x54>
   1c360:	add	r0, r4, #188	; 0xbc
   1c364:	bl	1e8ac <flatcc_emitter_clear@@Base>
   1c368:	mov	r2, #232	; 0xe8
   1c36c:	mov	r1, #0
   1c370:	mov	r0, r4
   1c374:	add	sp, sp, #8
   1c378:	pop	{r4, r5, r6, r7, r8, lr}
   1c37c:	b	12678 <memset@plt>

0001c380 <flatcc_builder_enter_user_frame_ptr@@Base>:
   1c380:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c384:	add	r4, r1, #3
   1c388:	bic	r4, r4, #3
   1c38c:	add	r4, r4, #4
   1c390:	mov	r7, #0
   1c394:	str	r7, [sp]
   1c398:	mov	r3, r4
   1c39c:	ldr	r2, [r0, #228]	; 0xe4
   1c3a0:	mov	r1, #7
   1c3a4:	mov	r6, r0
   1c3a8:	bl	1bba8 <flatcc_builder_default_alloc@@Base+0xf8>
   1c3ac:	subs	r5, r0, #0
   1c3b0:	moveq	r0, r5
   1c3b4:	beq	1c3e4 <flatcc_builder_enter_user_frame_ptr@@Base+0x64>
   1c3b8:	mov	r2, r4
   1c3bc:	mov	r1, r7
   1c3c0:	bl	12678 <memset@plt>
   1c3c4:	ldr	r3, [r6, #224]	; 0xe0
   1c3c8:	add	r0, r5, #4
   1c3cc:	str	r3, [r5]
   1c3d0:	ldr	r1, [r6, #228]	; 0xe4
   1c3d4:	add	r3, r1, #4
   1c3d8:	add	r4, r4, r1
   1c3dc:	str	r3, [r6, #224]	; 0xe0
   1c3e0:	str	r4, [r6, #228]	; 0xe4
   1c3e4:	add	sp, sp, #12
   1c3e8:	pop	{r4, r5, r6, r7, pc}

0001c3ec <flatcc_builder_enter_user_frame@@Base>:
   1c3ec:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c3f0:	add	r4, r1, #3
   1c3f4:	bic	r4, r4, #3
   1c3f8:	add	r4, r4, #4
   1c3fc:	mov	r7, #0
   1c400:	str	r7, [sp]
   1c404:	mov	r3, r4
   1c408:	ldr	r2, [r0, #228]	; 0xe4
   1c40c:	mov	r1, #7
   1c410:	mov	r6, r0
   1c414:	bl	1bba8 <flatcc_builder_default_alloc@@Base+0xf8>
   1c418:	subs	r5, r0, #0
   1c41c:	moveq	r0, r5
   1c420:	beq	1c44c <flatcc_builder_enter_user_frame@@Base+0x60>
   1c424:	mov	r2, r4
   1c428:	mov	r1, r7
   1c42c:	bl	12678 <memset@plt>
   1c430:	ldr	r3, [r6, #224]	; 0xe0
   1c434:	str	r3, [r5]
   1c438:	ldr	r1, [r6, #228]	; 0xe4
   1c43c:	add	r0, r1, #4
   1c440:	add	r4, r4, r1
   1c444:	str	r0, [r6, #224]	; 0xe0
   1c448:	str	r4, [r6, #228]	; 0xe4
   1c44c:	add	sp, sp, #12
   1c450:	pop	{r4, r5, r6, r7, pc}

0001c454 <flatcc_builder_exit_user_frame@@Base>:
   1c454:	ldr	r3, [r0, #224]	; 0xe0
   1c458:	cmp	r3, #0
   1c45c:	bne	1c478 <flatcc_builder_exit_user_frame@@Base+0x24>
   1c460:	push	{r4, lr}
   1c464:	ldr	r3, [pc, #44]	; 1c498 <flatcc_builder_exit_user_frame@@Base+0x44>
   1c468:	ldr	r2, [pc, #44]	; 1c49c <flatcc_builder_exit_user_frame@@Base+0x48>
   1c46c:	ldr	r1, [pc, #44]	; 1c4a0 <flatcc_builder_exit_user_frame@@Base+0x4c>
   1c470:	ldr	r0, [pc, #44]	; 1c4a4 <flatcc_builder_exit_user_frame@@Base+0x50>
   1c474:	bl	126d8 <__assert_fail@plt>
   1c478:	ldr	r1, [r0, #108]	; 0x6c
   1c47c:	mov	r2, r0
   1c480:	add	r1, r1, r3
   1c484:	sub	r3, r3, #4
   1c488:	str	r3, [r0, #228]	; 0xe4
   1c48c:	ldr	r0, [r1, #-4]
   1c490:	str	r0, [r2, #224]	; 0xe0
   1c494:	bx	lr
   1c498:	andeq	r2, r2, fp, ror r7
   1c49c:	andeq	r0, r0, lr, lsl r2
   1c4a0:	strdeq	r2, [r2], -sp
   1c4a4:	andeq	r2, r2, ip, lsl #25

0001c4a8 <flatcc_builder_exit_user_frame_at@@Base>:
   1c4a8:	ldr	r2, [r0, #224]	; 0xe0
   1c4ac:	cmp	r2, r1
   1c4b0:	bcs	1c4cc <flatcc_builder_exit_user_frame_at@@Base+0x24>
   1c4b4:	push	{r4, lr}
   1c4b8:	ldr	r3, [pc, #20]	; 1c4d4 <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   1c4bc:	ldr	r2, [pc, #20]	; 1c4d8 <flatcc_builder_exit_user_frame_at@@Base+0x30>
   1c4c0:	ldr	r1, [pc, #20]	; 1c4dc <flatcc_builder_exit_user_frame_at@@Base+0x34>
   1c4c4:	ldr	r0, [pc, #20]	; 1c4e0 <flatcc_builder_exit_user_frame_at@@Base+0x38>
   1c4c8:	bl	126d8 <__assert_fail@plt>
   1c4cc:	str	r1, [r0, #224]	; 0xe0
   1c4d0:	b	1c454 <flatcc_builder_exit_user_frame@@Base>
   1c4d4:	muleq	r2, sl, r7
   1c4d8:	andeq	r0, r0, r7, lsr #4
   1c4dc:	strdeq	r2, [r2], -sp
   1c4e0:	andeq	r2, r2, r5, lsr #25

0001c4e4 <flatcc_builder_get_current_user_frame@@Base>:
   1c4e4:	ldr	r0, [r0, #224]	; 0xe0
   1c4e8:	bx	lr

0001c4ec <flatcc_builder_get_user_frame_ptr@@Base>:
   1c4ec:	ldr	r0, [r0, #108]	; 0x6c
   1c4f0:	add	r0, r0, r1
   1c4f4:	bx	lr

0001c4f8 <flatcc_builder_embed_buffer@@Base>:
   1c4f8:	push	{r4, r5, r6, lr}
   1c4fc:	mov	r4, r3
   1c500:	ldr	r3, [r0, #152]	; 0x98
   1c504:	sub	sp, sp, #80	; 0x50
   1c508:	adds	r3, r3, #0
   1c50c:	movne	r3, #1
   1c510:	mov	r6, r2
   1c514:	mov	r2, r1
   1c518:	add	r1, sp, #96	; 0x60
   1c51c:	mov	r5, r0
   1c520:	bl	1bdf8 <flatcc_builder_default_alloc@@Base+0x348>
   1c524:	cmp	r0, #0
   1c528:	movne	r0, #0
   1c52c:	bne	1c600 <flatcc_builder_embed_buffer@@Base+0x108>
   1c530:	ldr	r3, [sp, #100]	; 0x64
   1c534:	str	r0, [sp, #8]
   1c538:	tst	r3, #2
   1c53c:	ldr	r3, [r5, #136]	; 0x88
   1c540:	movne	r2, #4
   1c544:	moveq	r2, #0
   1c548:	sub	r3, r3, r4
   1c54c:	sub	r3, r3, r2
   1c550:	ldrh	r2, [sp, #96]	; 0x60
   1c554:	str	r0, [sp, #12]
   1c558:	sub	r2, r2, #1
   1c55c:	and	r3, r3, r2
   1c560:	add	r2, r4, r3
   1c564:	str	r2, [sp, #4]
   1c568:	ldr	r2, [r5, #152]	; 0x98
   1c56c:	cmp	r2, #0
   1c570:	beq	1c590 <flatcc_builder_embed_buffer@@Base+0x98>
   1c574:	mov	r2, #4
   1c578:	add	r1, sp, r2
   1c57c:	str	r2, [sp, #8]
   1c580:	str	r2, [sp, #20]
   1c584:	mov	r2, #1
   1c588:	str	r1, [sp, #16]
   1c58c:	str	r2, [sp, #12]
   1c590:	cmp	r4, #0
   1c594:	beq	1c5c0 <flatcc_builder_embed_buffer@@Base+0xc8>
   1c598:	ldr	r2, [sp, #8]
   1c59c:	add	r1, sp, #80	; 0x50
   1c5a0:	add	r2, r2, r4
   1c5a4:	str	r2, [sp, #8]
   1c5a8:	ldr	r2, [sp, #12]
   1c5ac:	add	r2, r2, #1
   1c5b0:	str	r2, [sp, #12]
   1c5b4:	add	r1, r1, r2, lsl #3
   1c5b8:	str	r6, [r1, #-72]	; 0xffffffb8
   1c5bc:	str	r4, [r1, #-68]	; 0xffffffbc
   1c5c0:	cmp	r3, #0
   1c5c4:	beq	1c5f4 <flatcc_builder_embed_buffer@@Base+0xfc>
   1c5c8:	ldr	r2, [sp, #8]
   1c5cc:	add	r1, sp, #80	; 0x50
   1c5d0:	add	r2, r2, r3
   1c5d4:	str	r2, [sp, #8]
   1c5d8:	ldr	r2, [sp, #12]
   1c5dc:	ldr	r0, [pc, #36]	; 1c608 <flatcc_builder_embed_buffer@@Base+0x110>
   1c5e0:	add	r2, r2, #1
   1c5e4:	str	r2, [sp, #12]
   1c5e8:	add	r1, r1, r2, lsl #3
   1c5ec:	str	r0, [r1, #-72]	; 0xffffffb8
   1c5f0:	str	r3, [r1, #-68]	; 0xffffffbc
   1c5f4:	add	r1, sp, #8
   1c5f8:	mov	r0, r5
   1c5fc:	bl	1bea8 <flatcc_builder_default_alloc@@Base+0x3f8>
   1c600:	add	sp, sp, #80	; 0x50
   1c604:	pop	{r4, r5, r6, pc}
   1c608:	andeq	r2, r2, r7, lsl r5

0001c60c <flatcc_builder_create_buffer@@Base>:
   1c60c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c610:	sub	sp, sp, #92	; 0x5c
   1c614:	mov	r7, #0
   1c618:	ldr	r8, [sp, #124]	; 0x7c
   1c61c:	mov	r9, r1
   1c620:	and	r6, r8, #1
   1c624:	mov	r5, r3
   1c628:	add	r1, sp, #120	; 0x78
   1c62c:	mov	r3, r6
   1c630:	mov	r4, r0
   1c634:	str	r7, [sp, #12]
   1c638:	bl	1bdf8 <flatcc_builder_default_alloc@@Base+0x348>
   1c63c:	cmp	r0, r7
   1c640:	bne	1c7b4 <flatcc_builder_create_buffer@@Base+0x1a8>
   1c644:	ldrh	r3, [r4, #128]	; 0x80
   1c648:	ldrh	r1, [sp, #120]	; 0x78
   1c64c:	ldr	r2, [r4, #136]	; 0x88
   1c650:	and	r8, r8, #2
   1c654:	cmp	r3, r1
   1c658:	strhcc	r1, [r4, #128]	; 0x80
   1c65c:	cmp	r9, #0
   1c660:	sub	r1, r1, #1
   1c664:	ldrne	r3, [r9]
   1c668:	strne	r3, [sp, #12]
   1c66c:	ldr	r0, [sp, #12]
   1c670:	sub	r3, r2, #4
   1c674:	cmp	r0, #0
   1c678:	movne	r0, #4
   1c67c:	moveq	r0, #0
   1c680:	cmp	r8, #0
   1c684:	moveq	ip, #0
   1c688:	movne	ip, #4
   1c68c:	sub	r3, r3, r0
   1c690:	sub	r3, r3, ip
   1c694:	and	r3, r3, r1
   1c698:	moveq	lr, r6
   1c69c:	mov	r1, #0
   1c6a0:	orrne	lr, r6, #1
   1c6a4:	cmp	lr, r1
   1c6a8:	str	r1, [sp, #16]
   1c6ac:	str	r1, [sp, #20]
   1c6b0:	beq	1c6d0 <flatcc_builder_create_buffer@@Base+0xc4>
   1c6b4:	mov	r1, #4
   1c6b8:	str	r1, [sp, #16]
   1c6bc:	add	ip, sp, #8
   1c6c0:	str	r1, [sp, #28]
   1c6c4:	mov	r1, #1
   1c6c8:	str	ip, [sp, #24]
   1c6cc:	str	r1, [sp, #20]
   1c6d0:	ldr	r7, [sp, #20]
   1c6d4:	add	r8, sp, #88	; 0x58
   1c6d8:	add	r1, r7, #1
   1c6dc:	ldr	ip, [sp, #16]
   1c6e0:	add	r8, r8, r1, lsl #3
   1c6e4:	add	r9, sp, #4
   1c6e8:	add	ip, ip, #4
   1c6ec:	str	r9, [r8, #-72]	; 0xffffffb8
   1c6f0:	cmp	r0, #0
   1c6f4:	mov	r9, #4
   1c6f8:	str	ip, [sp, #16]
   1c6fc:	str	r9, [r8, #-68]	; 0xffffffbc
   1c700:	str	r1, [sp, #20]
   1c704:	beq	1c730 <flatcc_builder_create_buffer@@Base+0x124>
   1c708:	add	ip, r0, ip
   1c70c:	add	r1, r7, #2
   1c710:	str	ip, [sp, #16]
   1c714:	add	ip, sp, #88	; 0x58
   1c718:	add	r1, ip, r1, lsl #3
   1c71c:	add	r7, r7, #2
   1c720:	add	ip, sp, #12
   1c724:	str	ip, [r1, #-72]	; 0xffffffb8
   1c728:	str	r0, [r1, #-68]	; 0xffffffbc
   1c72c:	str	r7, [sp, #20]
   1c730:	cmp	r3, #0
   1c734:	beq	1c764 <flatcc_builder_create_buffer@@Base+0x158>
   1c738:	ldr	r1, [sp, #16]
   1c73c:	add	r0, sp, #88	; 0x58
   1c740:	add	r1, r1, r3
   1c744:	str	r1, [sp, #16]
   1c748:	ldr	r1, [sp, #20]
   1c74c:	ldr	ip, [pc, #108]	; 1c7c0 <flatcc_builder_create_buffer@@Base+0x1b4>
   1c750:	add	r1, r1, #1
   1c754:	str	r1, [sp, #20]
   1c758:	add	r0, r0, r1, lsl #3
   1c75c:	str	ip, [r0, #-72]	; 0xffffffb8
   1c760:	str	r3, [r0, #-68]	; 0xffffffbc
   1c764:	cmp	r6, #0
   1c768:	ldr	r3, [sp, #16]
   1c76c:	add	r1, sp, #16
   1c770:	sub	r3, r2, r3
   1c774:	ldrne	r2, [r4, #144]	; 0x90
   1c778:	ldreq	r2, [r4, #140]	; 0x8c
   1c77c:	add	r3, r3, lr, lsl #2
   1c780:	sub	r2, r2, r3
   1c784:	mov	r0, r4
   1c788:	sub	r3, r5, r3
   1c78c:	str	r2, [sp, #8]
   1c790:	str	r3, [sp, #4]
   1c794:	bl	1bea8 <flatcc_builder_default_alloc@@Base+0x3f8>
   1c798:	cmp	r0, #0
   1c79c:	bne	1c7b8 <flatcc_builder_create_buffer@@Base+0x1ac>
   1c7a0:	ldr	r3, [pc, #28]	; 1c7c4 <flatcc_builder_create_buffer@@Base+0x1b8>
   1c7a4:	mov	r2, #772	; 0x304
   1c7a8:	ldr	r1, [pc, #24]	; 1c7c8 <flatcc_builder_create_buffer@@Base+0x1bc>
   1c7ac:	ldr	r0, [pc, #24]	; 1c7cc <flatcc_builder_create_buffer@@Base+0x1c0>
   1c7b0:	bl	126d8 <__assert_fail@plt>
   1c7b4:	mov	r0, r7
   1c7b8:	add	sp, sp, #92	; 0x5c
   1c7bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c7c0:	andeq	r2, r2, r7, lsl r5
   1c7c4:			; <UNDEFINED> instruction: 0x000227bc
   1c7c8:	strdeq	r2, [r2], -sp
   1c7cc:	andeq	r2, r2, sl, ror #24

0001c7d0 <flatcc_builder_create_struct@@Base>:
   1c7d0:	cmp	r3, #0
   1c7d4:	push	{lr}		; (str lr, [sp, #-4]!)
   1c7d8:	sub	sp, sp, #76	; 0x4c
   1c7dc:	bne	1c7f4 <flatcc_builder_create_struct@@Base+0x24>
   1c7e0:	ldr	r3, [pc, #144]	; 1c878 <flatcc_builder_create_struct@@Base+0xa8>
   1c7e4:	ldr	r2, [pc, #144]	; 1c87c <flatcc_builder_create_struct@@Base+0xac>
   1c7e8:	ldr	r1, [pc, #144]	; 1c880 <flatcc_builder_create_struct@@Base+0xb0>
   1c7ec:	ldr	r0, [pc, #144]	; 1c884 <flatcc_builder_create_struct@@Base+0xb4>
   1c7f0:	bl	126d8 <__assert_fail@plt>
   1c7f4:	ldrh	ip, [r0, #128]	; 0x80
   1c7f8:	cmp	ip, r3
   1c7fc:	ldr	ip, [r0, #136]	; 0x88
   1c800:	strhcc	r3, [r0, #128]	; 0x80
   1c804:	sub	ip, ip, r2
   1c808:	sub	r3, r3, #1
   1c80c:	and	r3, r3, ip
   1c810:	mov	ip, #0
   1c814:	cmp	r2, ip
   1c818:	strne	r2, [sp, #12]
   1c81c:	str	ip, [sp]
   1c820:	strne	r2, [sp]
   1c824:	movne	r2, #1
   1c828:	str	ip, [sp, #4]
   1c82c:	strne	r1, [sp, #8]
   1c830:	strne	r2, [sp, #4]
   1c834:	cmp	r3, #0
   1c838:	beq	1c868 <flatcc_builder_create_struct@@Base+0x98>
   1c83c:	ldr	r2, [sp]
   1c840:	add	r1, sp, #72	; 0x48
   1c844:	add	r2, r2, r3
   1c848:	str	r2, [sp]
   1c84c:	ldr	r2, [sp, #4]
   1c850:	ldr	ip, [pc, #48]	; 1c888 <flatcc_builder_create_struct@@Base+0xb8>
   1c854:	add	r2, r2, #1
   1c858:	str	r2, [sp, #4]
   1c85c:	add	r1, r1, r2, lsl #3
   1c860:	str	ip, [r1, #-72]	; 0xffffffb8
   1c864:	str	r3, [r1, #-68]	; 0xffffffbc
   1c868:	mov	r1, sp
   1c86c:	bl	1bea8 <flatcc_builder_default_alloc@@Base+0x3f8>
   1c870:	add	sp, sp, #76	; 0x4c
   1c874:	pop	{pc}		; (ldr pc, [sp], #4)
   1c878:	ldrdeq	r2, [r2], -r9
   1c87c:	andeq	r0, r0, pc, lsl #6
   1c880:	strdeq	r2, [r2], -sp
   1c884:	andeq	r2, r2, r4, asr #25
   1c888:	andeq	r2, r2, r7, lsl r5

0001c88c <flatcc_builder_start_buffer@@Base>:
   1c88c:	push	{r4, r5, r6, r7, r8, lr}
   1c890:	mov	r5, r1
   1c894:	ldrh	r1, [r0, #128]	; 0x80
   1c898:	mov	r4, r0
   1c89c:	mov	r7, r2
   1c8a0:	mov	r6, r3
   1c8a4:	bl	1bc18 <flatcc_builder_default_alloc@@Base+0x168>
   1c8a8:	cmp	r0, #0
   1c8ac:	bne	1c920 <flatcc_builder_start_buffer@@Base+0x94>
   1c8b0:	ldrh	r3, [r4, #132]	; 0x84
   1c8b4:	ldr	ip, [r4, #32]
   1c8b8:	mov	r1, #1
   1c8bc:	strh	r1, [r4, #128]	; 0x80
   1c8c0:	strh	r3, [ip, #34]	; 0x22
   1c8c4:	ldrh	r3, [r4, #164]	; 0xa4
   1c8c8:	strh	r7, [r4, #132]	; 0x84
   1c8cc:	cmp	r5, #0
   1c8d0:	strh	r3, [ip, #32]
   1c8d4:	ldr	r3, [r4, #144]	; 0x90
   1c8d8:	strh	r6, [r4, #164]	; 0xa4
   1c8dc:	str	r3, [ip, #20]
   1c8e0:	ldr	r3, [r4, #152]	; 0x98
   1c8e4:	str	r3, [ip, #28]
   1c8e8:	ldr	r3, [r4, #136]	; 0x88
   1c8ec:	str	r3, [r4, #144]	; 0x90
   1c8f0:	ldr	r3, [r4, #148]	; 0x94
   1c8f4:	str	r3, [r4, #152]	; 0x98
   1c8f8:	add	r2, r3, r1
   1c8fc:	ldr	r3, [r4, #168]	; 0xa8
   1c900:	str	r2, [r4, #148]	; 0x94
   1c904:	str	r3, [ip, #16]
   1c908:	ldr	r3, [pc, #24]	; 1c928 <flatcc_builder_start_buffer@@Base+0x9c>
   1c90c:	moveq	r5, r3
   1c910:	ldr	r3, [r5]
   1c914:	str	r3, [r4, #168]	; 0xa8
   1c918:	strh	r1, [ip, #14]
   1c91c:	pop	{r4, r5, r6, r7, r8, pc}
   1c920:	mvn	r0, #0
   1c924:	pop	{r4, r5, r6, r7, r8, pc}
   1c928:	andeq	r2, r2, r7, lsl r5

0001c92c <flatcc_builder_end_buffer@@Base>:
   1c92c:	push	{r0, r1, r2, r4, r5, lr}
   1c930:	mov	r4, r0
   1c934:	ldrh	r0, [r0, #164]	; 0xa4
   1c938:	ldr	r2, [r4, #152]	; 0x98
   1c93c:	and	r0, r0, #2
   1c940:	cmp	r2, #0
   1c944:	orrne	r0, r0, #1
   1c948:	ldr	r2, [r4, #32]
   1c94c:	ldrh	r2, [r2, #14]
   1c950:	cmp	r2, #1
   1c954:	beq	1c96c <flatcc_builder_end_buffer@@Base+0x40>
   1c958:	ldr	r3, [pc, #120]	; 1c9d8 <flatcc_builder_end_buffer@@Base+0xac>
   1c95c:	ldr	r2, [pc, #120]	; 1c9dc <flatcc_builder_end_buffer@@Base+0xb0>
   1c960:	ldr	r1, [pc, #120]	; 1c9e0 <flatcc_builder_end_buffer@@Base+0xb4>
   1c964:	ldr	r0, [pc, #120]	; 1c9e4 <flatcc_builder_end_buffer@@Base+0xb8>
   1c968:	bl	126d8 <__assert_fail@plt>
   1c96c:	ldrh	r2, [r4, #132]	; 0x84
   1c970:	mov	r3, r1
   1c974:	ldrh	r1, [r4, #128]	; 0x80
   1c978:	str	r0, [sp, #4]
   1c97c:	mov	r0, r4
   1c980:	cmp	r1, r2
   1c984:	strhcc	r2, [r4, #128]	; 0x80
   1c988:	ldrh	r1, [r4, #128]	; 0x80
   1c98c:	str	r1, [sp]
   1c990:	add	r1, r4, #168	; 0xa8
   1c994:	bl	1c60c <flatcc_builder_create_buffer@@Base>
   1c998:	subs	r5, r0, #0
   1c99c:	beq	1c9cc <flatcc_builder_end_buffer@@Base+0xa0>
   1c9a0:	ldr	r3, [r4, #32]
   1c9a4:	mov	r0, r4
   1c9a8:	ldr	r2, [r3, #20]
   1c9ac:	str	r2, [r4, #144]	; 0x90
   1c9b0:	ldr	r2, [r3, #28]
   1c9b4:	str	r2, [r4, #152]	; 0x98
   1c9b8:	ldr	r2, [r3, #16]
   1c9bc:	str	r2, [r4, #168]	; 0xa8
   1c9c0:	ldrh	r3, [r3, #32]
   1c9c4:	strh	r3, [r4, #164]	; 0xa4
   1c9c8:	bl	1b9a4 <test_parse@@Base+0x4ac>
   1c9cc:	mov	r0, r5
   1c9d0:	add	sp, sp, #12
   1c9d4:	pop	{r4, r5, pc}
   1c9d8:	strdeq	r2, [r2], -r6
   1c9dc:	andeq	r0, r0, r6, asr #6
   1c9e0:	strdeq	r2, [r2], -sp
   1c9e4:	andeq	r2, r2, pc, asr #25

0001c9e8 <flatcc_builder_start_struct@@Base>:
   1c9e8:	push	{r4, r5, r6, lr}
   1c9ec:	mov	r5, r1
   1c9f0:	mov	r1, r2
   1c9f4:	mov	r4, r0
   1c9f8:	bl	1bc18 <flatcc_builder_default_alloc@@Base+0x168>
   1c9fc:	cmp	r0, #0
   1ca00:	bne	1ca2c <flatcc_builder_start_struct@@Base+0x44>
   1ca04:	ldr	r3, [r4, #32]
   1ca08:	mov	r2, #2
   1ca0c:	mov	r0, r4
   1ca10:	mvn	r1, #3
   1ca14:	strh	r2, [r3, #14]
   1ca18:	bl	1b8dc <test_parse@@Base+0x3e4>
   1ca1c:	mov	r1, r5
   1ca20:	mov	r0, r4
   1ca24:	pop	{r4, r5, r6, lr}
   1ca28:	b	1b95c <test_parse@@Base+0x464>
   1ca2c:	mov	r0, #0
   1ca30:	pop	{r4, r5, r6, pc}

0001ca34 <flatcc_builder_struct_edit@@Base>:
   1ca34:	ldr	r0, [r0, #16]
   1ca38:	bx	lr

0001ca3c <flatcc_builder_end_struct@@Base>:
   1ca3c:	ldr	r3, [r0, #32]
   1ca40:	push	{r4, r5, r6, lr}
   1ca44:	ldrh	r3, [r3, #14]
   1ca48:	cmp	r3, #2
   1ca4c:	beq	1ca64 <flatcc_builder_end_struct@@Base+0x28>
   1ca50:	ldr	r3, [pc, #56]	; 1ca90 <flatcc_builder_end_struct@@Base+0x54>
   1ca54:	mov	r2, #872	; 0x368
   1ca58:	ldr	r1, [pc, #52]	; 1ca94 <flatcc_builder_end_struct@@Base+0x58>
   1ca5c:	ldr	r0, [pc, #52]	; 1ca98 <flatcc_builder_end_struct@@Base+0x5c>
   1ca60:	bl	126d8 <__assert_fail@plt>
   1ca64:	ldrh	r3, [r0, #130]	; 0x82
   1ca68:	ldr	r2, [r0, #20]
   1ca6c:	ldr	r1, [r0, #16]
   1ca70:	mov	r4, r0
   1ca74:	bl	1c7d0 <flatcc_builder_create_struct@@Base>
   1ca78:	subs	r5, r0, #0
   1ca7c:	beq	1ca88 <flatcc_builder_end_struct@@Base+0x4c>
   1ca80:	mov	r0, r4
   1ca84:	bl	1b9a4 <test_parse@@Base+0x4ac>
   1ca88:	mov	r0, r5
   1ca8c:	pop	{r4, r5, r6, pc}
   1ca90:	andeq	r2, r2, r0, lsl r8
   1ca94:	strdeq	r2, [r2], -sp
   1ca98:	strdeq	r2, [r2], -fp

0001ca9c <flatcc_builder_extend_vector@@Base>:
   1ca9c:	push	{r4, r5, r6, lr}
   1caa0:	mov	r4, r0
   1caa4:	ldr	r0, [r0, #32]
   1caa8:	mov	r5, r1
   1caac:	ldr	r2, [r0, #24]
   1cab0:	bl	1bf28 <flatcc_builder_default_alloc@@Base+0x478>
   1cab4:	cmp	r0, #0
   1cab8:	bne	1cad4 <flatcc_builder_extend_vector@@Base+0x38>
   1cabc:	ldr	r3, [r4, #32]
   1cac0:	mov	r0, r4
   1cac4:	ldr	r1, [r3, #16]
   1cac8:	mul	r1, r1, r5
   1cacc:	pop	{r4, r5, r6, lr}
   1cad0:	b	1b95c <test_parse@@Base+0x464>
   1cad4:	mov	r0, #0
   1cad8:	pop	{r4, r5, r6, pc}

0001cadc <flatcc_builder_vector_push@@Base>:
   1cadc:	ldr	r3, [r0, #32]
   1cae0:	push	{r4, lr}
   1cae4:	ldrh	r2, [r3, #14]
   1cae8:	cmp	r2, #4
   1caec:	beq	1cb04 <flatcc_builder_vector_push@@Base+0x28>
   1caf0:	ldr	r3, [pc, #64]	; 1cb38 <flatcc_builder_vector_push@@Base+0x5c>
   1caf4:	ldr	r2, [pc, #64]	; 1cb3c <flatcc_builder_vector_push@@Base+0x60>
   1caf8:	ldr	r1, [pc, #64]	; 1cb40 <flatcc_builder_vector_push@@Base+0x64>
   1cafc:	ldr	r0, [pc, #64]	; 1cb44 <flatcc_builder_vector_push@@Base+0x68>
   1cb00:	bl	126d8 <__assert_fail@plt>
   1cb04:	ldr	r2, [r3, #20]
   1cb08:	ldr	ip, [r3, #24]
   1cb0c:	cmp	r2, ip
   1cb10:	ldrhi	r3, [pc, #32]	; 1cb38 <flatcc_builder_vector_push@@Base+0x5c>
   1cb14:	movhi	r2, #908	; 0x38c
   1cb18:	ldrhi	r1, [pc, #32]	; 1cb40 <flatcc_builder_vector_push@@Base+0x64>
   1cb1c:	ldrhi	r0, [pc, #36]	; 1cb48 <flatcc_builder_vector_push@@Base+0x6c>
   1cb20:	bhi	1cb00 <flatcc_builder_vector_push@@Base+0x24>
   1cb24:	add	r2, r2, #1
   1cb28:	str	r2, [r3, #20]
   1cb2c:	ldr	r2, [r3, #16]
   1cb30:	pop	{r4, lr}
   1cb34:	b	1ba30 <test_parse@@Base+0x538>
   1cb38:	andeq	r2, r2, sl, lsr #16
   1cb3c:	andeq	r0, r0, fp, lsl #7
   1cb40:	strdeq	r2, [r2], -sp
   1cb44:	andeq	r2, r2, r7, lsr #26
   1cb48:	andeq	r2, r2, r3, asr sp

0001cb4c <flatcc_builder_append_vector@@Base>:
   1cb4c:	push	{r4, r5, r6, lr}
   1cb50:	mov	r4, r0
   1cb54:	ldr	r0, [r0, #32]
   1cb58:	ldrh	r3, [r0, #14]
   1cb5c:	cmp	r3, #4
   1cb60:	beq	1cb78 <flatcc_builder_append_vector@@Base+0x2c>
   1cb64:	ldr	r3, [pc, #76]	; 1cbb8 <flatcc_builder_append_vector@@Base+0x6c>
   1cb68:	ldr	r2, [pc, #76]	; 1cbbc <flatcc_builder_append_vector@@Base+0x70>
   1cb6c:	ldr	r1, [pc, #76]	; 1cbc0 <flatcc_builder_append_vector@@Base+0x74>
   1cb70:	ldr	r0, [pc, #76]	; 1cbc4 <flatcc_builder_append_vector@@Base+0x78>
   1cb74:	bl	126d8 <__assert_fail@plt>
   1cb78:	mov	r5, r2
   1cb7c:	mov	r6, r1
   1cb80:	ldr	r2, [r0, #24]
   1cb84:	mov	r1, r5
   1cb88:	bl	1bf28 <flatcc_builder_default_alloc@@Base+0x478>
   1cb8c:	cmp	r0, #0
   1cb90:	bne	1cbb0 <flatcc_builder_append_vector@@Base+0x64>
   1cb94:	ldr	r3, [r4, #32]
   1cb98:	mov	r1, r6
   1cb9c:	mov	r0, r4
   1cba0:	ldr	r2, [r3, #16]
   1cba4:	mul	r2, r2, r5
   1cba8:	pop	{r4, r5, r6, lr}
   1cbac:	b	1ba30 <test_parse@@Base+0x538>
   1cbb0:	mov	r0, #0
   1cbb4:	pop	{r4, r5, r6, pc}
   1cbb8:	andeq	r2, r2, r5, asr #16
   1cbbc:	muleq	r0, r3, r3
   1cbc0:	strdeq	r2, [r2], -sp
   1cbc4:	andeq	r2, r2, r7, lsr #26

0001cbc8 <flatcc_builder_extend_offset_vector@@Base>:
   1cbc8:	push	{r4, r5, r6, lr}
   1cbcc:	mvn	r2, #-1073741824	; 0xc0000000
   1cbd0:	mov	r4, r0
   1cbd4:	ldr	r0, [r0, #32]
   1cbd8:	mov	r5, r1
   1cbdc:	bl	1bf28 <flatcc_builder_default_alloc@@Base+0x478>
   1cbe0:	cmp	r0, #0
   1cbe4:	bne	1cbf8 <flatcc_builder_extend_offset_vector@@Base+0x30>
   1cbe8:	lsl	r1, r5, #2
   1cbec:	mov	r0, r4
   1cbf0:	pop	{r4, r5, r6, lr}
   1cbf4:	b	1b95c <test_parse@@Base+0x464>
   1cbf8:	mov	r0, #0
   1cbfc:	pop	{r4, r5, r6, pc}

0001cc00 <flatcc_builder_offset_vector_push@@Base>:
   1cc00:	ldr	r2, [r0, #32]
   1cc04:	push	{r4, lr}
   1cc08:	ldrh	r3, [r2, #14]
   1cc0c:	cmp	r3, #5
   1cc10:	beq	1cc28 <flatcc_builder_offset_vector_push@@Base+0x28>
   1cc14:	ldr	r3, [pc, #64]	; 1cc5c <flatcc_builder_offset_vector_push@@Base+0x5c>
   1cc18:	ldr	r2, [pc, #64]	; 1cc60 <flatcc_builder_offset_vector_push@@Base+0x60>
   1cc1c:	ldr	r1, [pc, #64]	; 1cc64 <flatcc_builder_offset_vector_push@@Base+0x64>
   1cc20:	ldr	r0, [pc, #64]	; 1cc68 <flatcc_builder_offset_vector_push@@Base+0x68>
   1cc24:	bl	126d8 <__assert_fail@plt>
   1cc28:	ldr	r3, [r2, #20]
   1cc2c:	cmn	r3, #-1073741823	; 0xc0000001
   1cc30:	beq	1cc54 <flatcc_builder_offset_vector_push@@Base+0x54>
   1cc34:	add	r3, r3, #1
   1cc38:	mov	r4, r1
   1cc3c:	str	r3, [r2, #20]
   1cc40:	mov	r1, #4
   1cc44:	bl	1b95c <test_parse@@Base+0x464>
   1cc48:	cmp	r0, #0
   1cc4c:	strne	r4, [r0]
   1cc50:	pop	{r4, pc}
   1cc54:	mov	r0, #0
   1cc58:	pop	{r4, pc}
   1cc5c:	andeq	r2, r2, r2, ror #16
   1cc60:	andeq	r0, r0, r6, lsr #7
   1cc64:	strdeq	r2, [r2], -sp
   1cc68:	muleq	r2, r0, sp

0001cc6c <flatcc_builder_append_offset_vector@@Base>:
   1cc6c:	push	{r4, r5, r6, lr}
   1cc70:	mov	r4, r0
   1cc74:	ldr	r0, [r0, #32]
   1cc78:	ldrh	r3, [r0, #14]
   1cc7c:	cmp	r3, #5
   1cc80:	beq	1cc98 <flatcc_builder_append_offset_vector@@Base+0x2c>
   1cc84:	ldr	r3, [pc, #68]	; 1ccd0 <flatcc_builder_append_offset_vector@@Base+0x64>
   1cc88:	mov	r2, #948	; 0x3b4
   1cc8c:	ldr	r1, [pc, #64]	; 1ccd4 <flatcc_builder_append_offset_vector@@Base+0x68>
   1cc90:	ldr	r0, [pc, #64]	; 1ccd8 <flatcc_builder_append_offset_vector@@Base+0x6c>
   1cc94:	bl	126d8 <__assert_fail@plt>
   1cc98:	mov	r5, r2
   1cc9c:	mov	r6, r1
   1cca0:	mvn	r2, #-1073741824	; 0xc0000000
   1cca4:	mov	r1, r5
   1cca8:	bl	1bf28 <flatcc_builder_default_alloc@@Base+0x478>
   1ccac:	cmp	r0, #0
   1ccb0:	bne	1ccc8 <flatcc_builder_append_offset_vector@@Base+0x5c>
   1ccb4:	lsl	r2, r5, #2
   1ccb8:	mov	r1, r6
   1ccbc:	mov	r0, r4
   1ccc0:	pop	{r4, r5, r6, lr}
   1ccc4:	b	1ba30 <test_parse@@Base+0x538>
   1ccc8:	mov	r0, #0
   1cccc:	pop	{r4, r5, r6, pc}
   1ccd0:	andeq	r2, r2, r4, lsl #17
   1ccd4:	strdeq	r2, [r2], -sp
   1ccd8:	muleq	r2, r0, sp

0001ccdc <flatcc_builder_extend_string@@Base>:
   1ccdc:	push	{r4, r5, r6, lr}
   1cce0:	mov	r4, r0
   1cce4:	ldr	r0, [r0, #32]
   1cce8:	ldrh	r3, [r0, #14]
   1ccec:	cmp	r3, #6
   1ccf0:	beq	1cd08 <flatcc_builder_extend_string@@Base+0x2c>
   1ccf4:	ldr	r3, [pc, #56]	; 1cd34 <flatcc_builder_extend_string@@Base+0x58>
   1ccf8:	ldr	r2, [pc, #56]	; 1cd38 <flatcc_builder_extend_string@@Base+0x5c>
   1ccfc:	ldr	r1, [pc, #56]	; 1cd3c <flatcc_builder_extend_string@@Base+0x60>
   1cd00:	ldr	r0, [pc, #56]	; 1cd40 <flatcc_builder_extend_string@@Base+0x64>
   1cd04:	bl	126d8 <__assert_fail@plt>
   1cd08:	mvn	r2, #0
   1cd0c:	mov	r5, r1
   1cd10:	bl	1bf28 <flatcc_builder_default_alloc@@Base+0x478>
   1cd14:	cmp	r0, #0
   1cd18:	bne	1cd2c <flatcc_builder_extend_string@@Base+0x50>
   1cd1c:	mov	r1, r5
   1cd20:	mov	r0, r4
   1cd24:	pop	{r4, r5, r6, lr}
   1cd28:	b	1b95c <test_parse@@Base+0x464>
   1cd2c:	mov	r0, #0
   1cd30:	pop	{r4, r5, r6, pc}
   1cd34:	andeq	r2, r2, r8, lsr #17
   1cd38:			; <UNDEFINED> instruction: 0x000003bd
   1cd3c:	strdeq	r2, [r2], -sp
   1cd40:	andeq	r2, r2, r3, asr #27

0001cd44 <flatcc_builder_append_string@@Base>:
   1cd44:	push	{r4, r5, r6, lr}
   1cd48:	mov	r4, r0
   1cd4c:	ldr	r0, [r0, #32]
   1cd50:	ldrh	r3, [r0, #14]
   1cd54:	cmp	r3, #6
   1cd58:	beq	1cd70 <flatcc_builder_append_string@@Base+0x2c>
   1cd5c:	ldr	r3, [pc, #68]	; 1cda8 <flatcc_builder_append_string@@Base+0x64>
   1cd60:	ldr	r2, [pc, #68]	; 1cdac <flatcc_builder_append_string@@Base+0x68>
   1cd64:	ldr	r1, [pc, #68]	; 1cdb0 <flatcc_builder_append_string@@Base+0x6c>
   1cd68:	ldr	r0, [pc, #68]	; 1cdb4 <flatcc_builder_append_string@@Base+0x70>
   1cd6c:	bl	126d8 <__assert_fail@plt>
   1cd70:	mov	r5, r2
   1cd74:	mov	r6, r1
   1cd78:	mvn	r2, #0
   1cd7c:	mov	r1, r5
   1cd80:	bl	1bf28 <flatcc_builder_default_alloc@@Base+0x478>
   1cd84:	cmp	r0, #0
   1cd88:	bne	1cda0 <flatcc_builder_append_string@@Base+0x5c>
   1cd8c:	mov	r2, r5
   1cd90:	mov	r1, r6
   1cd94:	mov	r0, r4
   1cd98:	pop	{r4, r5, r6, lr}
   1cd9c:	b	1ba30 <test_parse@@Base+0x538>
   1cda0:	mov	r0, #0
   1cda4:	pop	{r4, r5, r6, pc}
   1cda8:	andeq	r2, r2, r5, asr #17
   1cdac:	andeq	r0, r0, r6, asr #7
   1cdb0:	strdeq	r2, [r2], -sp
   1cdb4:	andeq	r2, r2, r3, asr #27

0001cdb8 <flatcc_builder_append_string_str@@Base>:
   1cdb8:	push	{r4, r5, r6, lr}
   1cdbc:	mov	r5, r0
   1cdc0:	mov	r0, r1
   1cdc4:	mov	r4, r1
   1cdc8:	bl	12654 <strlen@plt>
   1cdcc:	mov	r1, r4
   1cdd0:	mov	r2, r0
   1cdd4:	mov	r0, r5
   1cdd8:	pop	{r4, r5, r6, lr}
   1cddc:	b	1cd44 <flatcc_builder_append_string@@Base>

0001cde0 <flatcc_builder_append_string_strn@@Base>:
   1cde0:	push	{r4, r5, r6, lr}
   1cde4:	mov	r4, r1
   1cde8:	mov	r6, r0
   1cdec:	mov	r1, #0
   1cdf0:	mov	r0, r4
   1cdf4:	mov	r5, r2
   1cdf8:	bl	12690 <memchr@plt>
   1cdfc:	mov	r1, r4
   1ce00:	cmp	r0, #0
   1ce04:	subne	r5, r0, r4
   1ce08:	mov	r2, r5
   1ce0c:	mov	r0, r6
   1ce10:	pop	{r4, r5, r6, lr}
   1ce14:	b	1cd44 <flatcc_builder_append_string@@Base>

0001ce18 <flatcc_builder_truncate_vector@@Base>:
   1ce18:	ldr	r3, [r0, #32]
   1ce1c:	push	{r4, lr}
   1ce20:	ldrh	r2, [r3, #14]
   1ce24:	cmp	r2, #4
   1ce28:	beq	1ce40 <flatcc_builder_truncate_vector@@Base+0x28>
   1ce2c:	ldr	r3, [pc, #68]	; 1ce78 <flatcc_builder_truncate_vector@@Base+0x60>
   1ce30:	ldr	r2, [pc, #68]	; 1ce7c <flatcc_builder_truncate_vector@@Base+0x64>
   1ce34:	ldr	r1, [pc, #68]	; 1ce80 <flatcc_builder_truncate_vector@@Base+0x68>
   1ce38:	ldr	r0, [pc, #68]	; 1ce84 <flatcc_builder_truncate_vector@@Base+0x6c>
   1ce3c:	bl	126d8 <__assert_fail@plt>
   1ce40:	ldr	r2, [r3, #20]
   1ce44:	cmp	r2, r1
   1ce48:	ldrcc	r3, [pc, #40]	; 1ce78 <flatcc_builder_truncate_vector@@Base+0x60>
   1ce4c:	ldrcc	r2, [pc, #52]	; 1ce88 <flatcc_builder_truncate_vector@@Base+0x70>
   1ce50:	ldrcc	r1, [pc, #40]	; 1ce80 <flatcc_builder_truncate_vector@@Base+0x68>
   1ce54:	ldrcc	r0, [pc, #48]	; 1ce8c <flatcc_builder_truncate_vector@@Base+0x74>
   1ce58:	bcc	1ce3c <flatcc_builder_truncate_vector@@Base+0x24>
   1ce5c:	sub	r2, r2, r1
   1ce60:	str	r2, [r3, #20]
   1ce64:	ldr	r3, [r3, #16]
   1ce68:	mul	r1, r3, r1
   1ce6c:	bl	1ba10 <test_parse@@Base+0x518>
   1ce70:	mov	r0, #0
   1ce74:	pop	{r4, pc}
   1ce78:	andeq	r2, r2, r2, ror #17
   1ce7c:	ldrdeq	r0, [r0], -r9
   1ce80:	strdeq	r2, [r2], -sp
   1ce84:	andeq	r2, r2, r7, lsr #26
   1ce88:	ldrdeq	r0, [r0], -sl
   1ce8c:	andeq	r2, r2, pc, ror #27

0001ce90 <flatcc_builder_truncate_offset_vector@@Base>:
   1ce90:	ldr	r3, [r0, #32]
   1ce94:	push	{r4, lr}
   1ce98:	ldrh	r2, [r3, #14]
   1ce9c:	cmp	r2, #5
   1cea0:	beq	1ceb8 <flatcc_builder_truncate_offset_vector@@Base+0x28>
   1cea4:	ldr	r3, [pc, #68]	; 1cef0 <flatcc_builder_truncate_offset_vector@@Base+0x60>
   1cea8:	ldr	r2, [pc, #68]	; 1cef4 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   1ceac:	ldr	r1, [pc, #68]	; 1cef8 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   1ceb0:	ldr	r0, [pc, #68]	; 1cefc <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   1ceb4:	bl	126d8 <__assert_fail@plt>
   1ceb8:	ldr	r2, [r3, #20]
   1cebc:	cmp	r2, r1
   1cec0:	ldrcc	r3, [pc, #40]	; 1cef0 <flatcc_builder_truncate_offset_vector@@Base+0x60>
   1cec4:	ldrcc	r2, [pc, #52]	; 1cf00 <flatcc_builder_truncate_offset_vector@@Base+0x70>
   1cec8:	ldrcc	r1, [pc, #40]	; 1cef8 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   1cecc:	ldrcc	r0, [pc, #48]	; 1cf04 <flatcc_builder_truncate_offset_vector@@Base+0x74>
   1ced0:	bcc	1ceb4 <flatcc_builder_truncate_offset_vector@@Base+0x24>
   1ced4:	sub	r2, r2, r1
   1ced8:	str	r2, [r3, #20]
   1cedc:	ldr	r3, [r3, #16]
   1cee0:	mul	r1, r3, r1
   1cee4:	bl	1ba10 <test_parse@@Base+0x518>
   1cee8:	mov	r0, #0
   1ceec:	pop	{r4, pc}
   1cef0:	andeq	r2, r2, r1, lsl #18
   1cef4:	andeq	r0, r0, r2, ror #7
   1cef8:	strdeq	r2, [r2], -sp
   1cefc:	muleq	r2, r0, sp
   1cf00:	andeq	r0, r0, r3, ror #7
   1cf04:	andeq	r2, r2, r3, lsl lr

0001cf08 <flatcc_builder_truncate_string@@Base>:
   1cf08:	ldr	r2, [r0, #32]
   1cf0c:	push	{r4, lr}
   1cf10:	ldrh	r3, [r2, #14]
   1cf14:	cmp	r3, #6
   1cf18:	beq	1cf30 <flatcc_builder_truncate_string@@Base+0x28>
   1cf1c:	ldr	r3, [pc, #60]	; 1cf60 <flatcc_builder_truncate_string@@Base+0x58>
   1cf20:	ldr	r2, [pc, #60]	; 1cf64 <flatcc_builder_truncate_string@@Base+0x5c>
   1cf24:	ldr	r1, [pc, #60]	; 1cf68 <flatcc_builder_truncate_string@@Base+0x60>
   1cf28:	ldr	r0, [pc, #60]	; 1cf6c <flatcc_builder_truncate_string@@Base+0x64>
   1cf2c:	bl	126d8 <__assert_fail@plt>
   1cf30:	ldr	r3, [r2, #20]
   1cf34:	cmp	r3, r1
   1cf38:	ldrcc	r3, [pc, #32]	; 1cf60 <flatcc_builder_truncate_string@@Base+0x58>
   1cf3c:	movcc	r2, #1004	; 0x3ec
   1cf40:	ldrcc	r1, [pc, #32]	; 1cf68 <flatcc_builder_truncate_string@@Base+0x60>
   1cf44:	ldrcc	r0, [pc, #36]	; 1cf70 <flatcc_builder_truncate_string@@Base+0x68>
   1cf48:	bcc	1cf2c <flatcc_builder_truncate_string@@Base+0x24>
   1cf4c:	sub	r3, r3, r1
   1cf50:	str	r3, [r2, #20]
   1cf54:	bl	1ba10 <test_parse@@Base+0x518>
   1cf58:	mov	r0, #0
   1cf5c:	pop	{r4, pc}
   1cf60:	andeq	r2, r2, r7, lsr #18
   1cf64:	andeq	r0, r0, fp, ror #7
   1cf68:	strdeq	r2, [r2], -sp
   1cf6c:	andeq	r2, r2, r3, asr #27
   1cf70:	andeq	r2, r2, lr, asr #28

0001cf74 <flatcc_builder_start_vector@@Base>:
   1cf74:	cmp	r2, #4
   1cf78:	push	{r4, r5, r6, r7, r8, lr}
   1cf7c:	mov	r7, r1
   1cf80:	movcs	r1, r2
   1cf84:	movcc	r1, #4
   1cf88:	mov	r5, r0
   1cf8c:	mov	r6, r3
   1cf90:	bl	1bc18 <flatcc_builder_default_alloc@@Base+0x168>
   1cf94:	subs	r4, r0, #0
   1cf98:	mvnne	r4, #0
   1cf9c:	bne	1cfc4 <flatcc_builder_start_vector@@Base+0x50>
   1cfa0:	ldr	r2, [r5, #32]
   1cfa4:	mov	r3, #4
   1cfa8:	mvn	r1, #3
   1cfac:	str	r7, [r2, #16]
   1cfb0:	str	r4, [r2, #20]
   1cfb4:	str	r6, [r2, #24]
   1cfb8:	strh	r3, [r2, #14]
   1cfbc:	mov	r0, r5
   1cfc0:	bl	1b8dc <test_parse@@Base+0x3e4>
   1cfc4:	mov	r0, r4
   1cfc8:	pop	{r4, r5, r6, r7, r8, pc}

0001cfcc <flatcc_builder_start_offset_vector@@Base>:
   1cfcc:	push	{r4, r5, r6, lr}
   1cfd0:	mov	r1, #4
   1cfd4:	mov	r5, r0
   1cfd8:	bl	1bc18 <flatcc_builder_default_alloc@@Base+0x168>
   1cfdc:	subs	r4, r0, #0
   1cfe0:	mvnne	r4, #0
   1cfe4:	bne	1d00c <flatcc_builder_start_offset_vector@@Base+0x40>
   1cfe8:	ldr	r3, [r5, #32]
   1cfec:	mov	r2, #4
   1cff0:	mvn	r1, #3
   1cff4:	str	r2, [r3, #16]
   1cff8:	mov	r2, #5
   1cffc:	str	r4, [r3, #20]
   1d000:	strh	r2, [r3, #14]
   1d004:	mov	r0, r5
   1d008:	bl	1b8dc <test_parse@@Base+0x3e4>
   1d00c:	mov	r0, r4
   1d010:	pop	{r4, r5, r6, pc}

0001d014 <flatcc_builder_start_string@@Base>:
   1d014:	push	{r4, r5, r6, lr}
   1d018:	mov	r1, #1
   1d01c:	mov	r5, r0
   1d020:	bl	1bc18 <flatcc_builder_default_alloc@@Base+0x168>
   1d024:	subs	r4, r0, #0
   1d028:	mvnne	r4, #0
   1d02c:	bne	1d054 <flatcc_builder_start_string@@Base+0x40>
   1d030:	ldr	r3, [r5, #32]
   1d034:	mov	r2, #1
   1d038:	mvn	r1, #3
   1d03c:	str	r2, [r3, #16]
   1d040:	mov	r2, #6
   1d044:	str	r4, [r3, #20]
   1d048:	strh	r2, [r3, #14]
   1d04c:	mov	r0, r5
   1d050:	bl	1b8dc <test_parse@@Base+0x3e4>
   1d054:	mov	r0, r4
   1d058:	pop	{r4, r5, r6, pc}

0001d05c <flatcc_builder_reserve_table@@Base>:
   1d05c:	cmp	r1, #0
   1d060:	bge	1d07c <flatcc_builder_reserve_table@@Base+0x20>
   1d064:	push	{r4, lr}
   1d068:	ldr	r3, [pc, #16]	; 1d080 <flatcc_builder_reserve_table@@Base+0x24>
   1d06c:	ldr	r2, [pc, #16]	; 1d084 <flatcc_builder_reserve_table@@Base+0x28>
   1d070:	ldr	r1, [pc, #16]	; 1d088 <flatcc_builder_reserve_table@@Base+0x2c>
   1d074:	ldr	r0, [pc, #16]	; 1d08c <flatcc_builder_reserve_table@@Base+0x30>
   1d078:	bl	126d8 <__assert_fail@plt>
   1d07c:	b	1bcf8 <flatcc_builder_default_alloc@@Base+0x248>
   1d080:	andeq	r2, r2, r6, asr #18
   1d084:	andeq	r0, r0, r9, lsr #8
   1d088:	strdeq	r2, [r2], -sp
   1d08c:	andeq	r2, r2, r6, lsl #29

0001d090 <flatcc_builder_start_table@@Base>:
   1d090:	push	{r4, r5, r6, lr}
   1d094:	mov	r5, r1
   1d098:	mov	r1, #4
   1d09c:	mov	r4, r0
   1d0a0:	bl	1bc18 <flatcc_builder_default_alloc@@Base+0x168>
   1d0a4:	cmp	r0, #0
   1d0a8:	beq	1d0b8 <flatcc_builder_start_table@@Base+0x28>
   1d0ac:	mvn	r5, #0
   1d0b0:	mov	r0, r5
   1d0b4:	pop	{r4, r5, r6, pc}
   1d0b8:	ldr	r1, [r4, #52]	; 0x34
   1d0bc:	ldr	r2, [r4, #4]
   1d0c0:	ldr	r3, [r4, #32]
   1d0c4:	sub	r2, r2, r1
   1d0c8:	str	r2, [r3, #16]
   1d0cc:	ldr	r1, [r4, #76]	; 0x4c
   1d0d0:	ldr	r2, [r4]
   1d0d4:	sub	r2, r2, r1
   1d0d8:	str	r2, [r3, #20]
   1d0dc:	ldr	r2, [r4, #12]
   1d0e0:	mov	r1, r5
   1d0e4:	str	r2, [r3, #24]
   1d0e8:	ldrh	r2, [r4, #8]
   1d0ec:	strh	r2, [r3, #28]
   1d0f0:	ldr	r2, [pc, #44]	; 1d124 <flatcc_builder_start_table@@Base+0x94>
   1d0f4:	strh	r0, [r4, #8]
   1d0f8:	str	r2, [r4, #12]
   1d0fc:	mov	r2, #3
   1d100:	strh	r2, [r3, #14]
   1d104:	mov	r0, r4
   1d108:	bl	1bcf8 <flatcc_builder_default_alloc@@Base+0x248>
   1d10c:	subs	r5, r0, #0
   1d110:	bne	1d0ac <flatcc_builder_start_table@@Base+0x1c>
   1d114:	ldr	r1, [pc, #12]	; 1d128 <flatcc_builder_start_table@@Base+0x98>
   1d118:	mov	r0, r4
   1d11c:	bl	1b8dc <test_parse@@Base+0x3e4>
   1d120:	b	1d0b0 <flatcc_builder_start_table@@Base+0x20>
   1d124:	svccs	0x00693b52
   1d128:	strdeq	pc, [r0], -ip

0001d12c <flatcc_builder_create_vtable@@Base>:
   1d12c:	push	{lr}		; (str lr, [sp, #-4]!)
   1d130:	sub	sp, sp, #76	; 0x4c
   1d134:	cmp	r2, #0
   1d138:	mov	r3, #0
   1d13c:	str	r3, [sp]
   1d140:	str	r3, [sp, #4]
   1d144:	movne	r3, #1
   1d148:	strne	r3, [sp, #4]
   1d14c:	ldr	r3, [r0, #152]	; 0x98
   1d150:	strne	r1, [sp, #8]
   1d154:	strne	r2, [sp]
   1d158:	strne	r2, [sp, #12]
   1d15c:	cmp	r3, #0
   1d160:	mov	r1, sp
   1d164:	bne	1d180 <flatcc_builder_create_vtable@@Base+0x54>
   1d168:	ldr	r3, [r0, #180]	; 0xb4
   1d16c:	cmp	r3, #0
   1d170:	bne	1d180 <flatcc_builder_create_vtable@@Base+0x54>
   1d174:	bl	1bd7c <flatcc_builder_default_alloc@@Base+0x2cc>
   1d178:	add	sp, sp, #76	; 0x4c
   1d17c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d180:	bl	1bea8 <flatcc_builder_default_alloc@@Base+0x3f8>
   1d184:	cmp	r0, #0
   1d188:	addne	r0, r0, #1
   1d18c:	b	1d178 <flatcc_builder_create_vtable@@Base+0x4c>

0001d190 <flatcc_builder_create_cached_vtable@@Base>:
   1d190:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d194:	mov	r4, r0
   1d198:	ldr	r5, [r0, #116]	; 0x74
   1d19c:	sub	sp, sp, #20
   1d1a0:	cmp	r5, #0
   1d1a4:	mov	fp, r1
   1d1a8:	mov	r7, r2
   1d1ac:	mov	r6, r3
   1d1b0:	bne	1d258 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   1d1b4:	ldr	r3, [r0, #124]	; 0x7c
   1d1b8:	add	r9, r0, #92	; 0x5c
   1d1bc:	cmp	r3, #0
   1d1c0:	beq	1d1d8 <flatcc_builder_create_cached_vtable@@Base+0x48>
   1d1c4:	ldr	r3, [pc, #556]	; 1d3f8 <flatcc_builder_create_cached_vtable@@Base+0x268>
   1d1c8:	ldr	r2, [pc, #556]	; 1d3fc <flatcc_builder_create_cached_vtable@@Base+0x26c>
   1d1cc:	ldr	r1, [pc, #556]	; 1d400 <flatcc_builder_create_cached_vtable@@Base+0x270>
   1d1d0:	ldr	r0, [pc, #556]	; 1d404 <flatcc_builder_create_cached_vtable@@Base+0x274>
   1d1d4:	bl	126d8 <__assert_fail@plt>
   1d1d8:	str	r5, [sp]
   1d1dc:	mov	r3, #16
   1d1e0:	mov	r2, r5
   1d1e4:	mov	r1, #6
   1d1e8:	bl	1bba8 <flatcc_builder_default_alloc@@Base+0xf8>
   1d1ec:	cmp	r0, #0
   1d1f0:	beq	1d22c <flatcc_builder_create_cached_vtable@@Base+0x9c>
   1d1f4:	mov	r3, #16
   1d1f8:	str	r3, [r4, #124]	; 0x7c
   1d1fc:	mov	r3, #5
   1d200:	str	r3, [sp]
   1d204:	mov	r1, r9
   1d208:	mov	r3, #1
   1d20c:	ldr	r8, [r4, #48]	; 0x30
   1d210:	mov	r2, #256	; 0x100
   1d214:	ldr	r0, [r4, #40]	; 0x28
   1d218:	blx	r8
   1d21c:	cmp	r0, #0
   1d220:	moveq	r3, #256	; 0x100
   1d224:	ldreq	r1, [r4, #96]	; 0x60
   1d228:	beq	1d238 <flatcc_builder_create_cached_vtable@@Base+0xa8>
   1d22c:	mov	r0, #0
   1d230:	b	1d3a8 <flatcc_builder_create_cached_vtable@@Base+0x218>
   1d234:	mov	r3, r2
   1d238:	lsl	r2, r3, #1
   1d23c:	cmp	r2, r1
   1d240:	bls	1d234 <flatcc_builder_create_cached_vtable@@Base+0xa4>
   1d244:	lsr	r3, r3, #2
   1d248:	mov	r2, #1
   1d24c:	cmp	r3, r2, lsl r5
   1d250:	bhi	1d318 <flatcc_builder_create_cached_vtable@@Base+0x188>
   1d254:	str	r5, [r4, #116]	; 0x74
   1d258:	ldr	r3, [r4, #116]	; 0x74
   1d25c:	ldr	r8, [r4, #92]	; 0x5c
   1d260:	rsb	r3, r3, #32
   1d264:	lsr	r6, r6, r3
   1d268:	adds	r3, r8, r6, lsl #2
   1d26c:	str	r3, [sp, #8]
   1d270:	ldrne	r9, [r8, r6, lsl #2]
   1d274:	movne	sl, #0
   1d278:	beq	1d22c <flatcc_builder_create_cached_vtable@@Base+0x9c>
   1d27c:	cmp	r9, #0
   1d280:	bne	1d320 <flatcc_builder_create_cached_vtable@@Base+0x190>
   1d284:	str	r9, [sp]
   1d288:	mov	r3, #16
   1d28c:	ldr	r2, [r4, #124]	; 0x7c
   1d290:	mov	r1, #6
   1d294:	mov	r0, r4
   1d298:	bl	1bba8 <flatcc_builder_default_alloc@@Base+0xf8>
   1d29c:	subs	r5, r0, #0
   1d2a0:	beq	1d22c <flatcc_builder_create_cached_vtable@@Base+0x9c>
   1d2a4:	ldr	r3, [r4, #124]	; 0x7c
   1d2a8:	mov	r1, fp
   1d2ac:	add	r2, r3, #16
   1d2b0:	str	r2, [r4, #124]	; 0x7c
   1d2b4:	ldr	r2, [r4, #152]	; 0x98
   1d2b8:	mov	r0, r4
   1d2bc:	str	r2, [r5, #4]
   1d2c0:	ldr	r2, [r8, r6, lsl #2]
   1d2c4:	str	r2, [r5, #12]
   1d2c8:	str	r3, [r8, r6, lsl #2]
   1d2cc:	mov	r2, r7
   1d2d0:	bl	1d12c <flatcc_builder_create_vtable@@Base>
   1d2d4:	cmp	r0, #0
   1d2d8:	str	r0, [r5]
   1d2dc:	beq	1d22c <flatcc_builder_create_cached_vtable@@Base+0x9c>
   1d2e0:	cmp	sl, #0
   1d2e4:	ldrne	r3, [sl, #8]
   1d2e8:	strne	r3, [r5, #8]
   1d2ec:	bne	1d3a4 <flatcc_builder_create_cached_vtable@@Base+0x214>
   1d2f0:	ldr	r2, [r4, #172]	; 0xac
   1d2f4:	cmp	r2, #0
   1d2f8:	beq	1d3b0 <flatcc_builder_create_cached_vtable@@Base+0x220>
   1d2fc:	ldr	r3, [r4, #120]	; 0x78
   1d300:	add	r3, r7, r3
   1d304:	cmp	r2, r3
   1d308:	bcs	1d3b0 <flatcc_builder_create_cached_vtable@@Base+0x220>
   1d30c:	mov	r0, r4
   1d310:	bl	1c0ec <flatcc_builder_flush_vtable_cache@@Base>
   1d314:	b	1d3a4 <flatcc_builder_create_cached_vtable@@Base+0x214>
   1d318:	add	r5, r5, #1
   1d31c:	b	1d24c <flatcc_builder_create_cached_vtable@@Base+0xbc>
   1d320:	ldr	r5, [r4, #100]	; 0x64
   1d324:	ldr	r0, [r4, #68]	; 0x44
   1d328:	add	r5, r5, r9
   1d32c:	ldr	r2, [r5, #8]
   1d330:	add	r1, r0, r2
   1d334:	ldrh	r2, [r0, r2]
   1d338:	cmp	r2, r7
   1d33c:	bne	1d35c <flatcc_builder_create_cached_vtable@@Base+0x1cc>
   1d340:	mov	r2, r7
   1d344:	mov	r0, fp
   1d348:	str	r3, [sp, #12]
   1d34c:	bl	125f4 <memcmp@plt>
   1d350:	ldr	r3, [sp, #12]
   1d354:	cmp	r0, #0
   1d358:	beq	1d370 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   1d35c:	add	r3, r5, #12
   1d360:	ldr	r9, [r5, #12]
   1d364:	mov	r5, sl
   1d368:	mov	sl, r5
   1d36c:	b	1d27c <flatcc_builder_create_cached_vtable@@Base+0xec>
   1d370:	ldr	r1, [r5, #4]
   1d374:	ldr	r2, [r4, #152]	; 0x98
   1d378:	cmp	r1, r2
   1d37c:	addne	r3, r5, #12
   1d380:	ldrne	r9, [r5, #12]
   1d384:	bne	1d368 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   1d388:	ldr	r2, [sp, #8]
   1d38c:	cmp	r3, r2
   1d390:	ldrne	r2, [r5, #12]
   1d394:	strne	r2, [r3]
   1d398:	ldrne	r3, [r8, r6, lsl #2]
   1d39c:	strne	r3, [r5, #12]
   1d3a0:	strne	r9, [r8, r6, lsl #2]
   1d3a4:	ldr	r0, [r5]
   1d3a8:	add	sp, sp, #20
   1d3ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3b0:	mov	r3, #0
   1d3b4:	str	r3, [sp]
   1d3b8:	ldr	r2, [r4, #120]	; 0x78
   1d3bc:	mov	r3, r7
   1d3c0:	mov	r1, #2
   1d3c4:	mov	r0, r4
   1d3c8:	bl	1bba8 <flatcc_builder_default_alloc@@Base+0xf8>
   1d3cc:	cmp	r0, #0
   1d3d0:	mvneq	r0, #0
   1d3d4:	beq	1d3a8 <flatcc_builder_create_cached_vtable@@Base+0x218>
   1d3d8:	ldr	r3, [r4, #120]	; 0x78
   1d3dc:	mov	r2, r7
   1d3e0:	str	r3, [r5, #8]
   1d3e4:	add	r3, r7, r3
   1d3e8:	str	r3, [r4, #120]	; 0x78
   1d3ec:	mov	r1, fp
   1d3f0:	bl	125dc <memcpy@plt>
   1d3f4:	b	1d3a4 <flatcc_builder_create_cached_vtable@@Base+0x214>
   1d3f8:	andeq	r2, r2, r3, ror #18
   1d3fc:	andeq	r0, r0, r6, asr r1
   1d400:	strdeq	r2, [r2], -sp
   1d404:	andeq	r2, r2, r0, ror lr

0001d408 <flatcc_builder_create_table@@Base>:
   1d408:	push	{r4, r5, r6, r7, lr}
   1d40c:	sub	sp, sp, #84	; 0x54
   1d410:	ldr	r4, [sp, #108]	; 0x6c
   1d414:	ldr	lr, [sp, #112]	; 0x70
   1d418:	cmp	r4, #0
   1d41c:	bge	1d434 <flatcc_builder_create_table@@Base+0x2c>
   1d420:	ldr	r3, [pc, #268]	; 1d534 <flatcc_builder_create_table@@Base+0x12c>
   1d424:	ldr	r2, [pc, #268]	; 1d538 <flatcc_builder_create_table@@Base+0x130>
   1d428:	ldr	r1, [pc, #268]	; 1d53c <flatcc_builder_create_table@@Base+0x134>
   1d42c:	ldr	r0, [pc, #268]	; 1d540 <flatcc_builder_create_table@@Base+0x138>
   1d430:	bl	126d8 <__assert_fail@plt>
   1d434:	tst	lr, #1
   1d438:	ldreq	r3, [pc, #244]	; 1d534 <flatcc_builder_create_table@@Base+0x12c>
   1d43c:	ldreq	r2, [pc, #256]	; 1d544 <flatcc_builder_create_table@@Base+0x13c>
   1d440:	ldreq	r1, [pc, #244]	; 1d53c <flatcc_builder_create_table@@Base+0x134>
   1d444:	ldreq	r0, [pc, #252]	; 1d548 <flatcc_builder_create_table@@Base+0x140>
   1d448:	beq	1d430 <flatcc_builder_create_table@@Base+0x28>
   1d44c:	ldrh	ip, [r0, #128]	; 0x80
   1d450:	cmp	r3, #4
   1d454:	movcc	r3, #4
   1d458:	ldr	r6, [r0, #136]	; 0x88
   1d45c:	cmp	ip, r3
   1d460:	mvn	r5, #3
   1d464:	sub	ip, r6, r2
   1d468:	strhcc	r3, [r0, #128]	; 0x80
   1d46c:	sub	r3, r3, #1
   1d470:	and	r3, r3, ip
   1d474:	sub	ip, r5, r2
   1d478:	add	ip, ip, r6
   1d47c:	sub	ip, ip, r3
   1d480:	sub	lr, lr, #1
   1d484:	sub	lr, ip, lr
   1d488:	str	lr, [sp, #4]
   1d48c:	ldr	lr, [sp, #104]	; 0x68
   1d490:	sub	ip, r5, ip
   1d494:	add	r4, lr, r4, lsl #1
   1d498:	cmp	r4, lr
   1d49c:	bne	1d51c <flatcc_builder_create_table@@Base+0x114>
   1d4a0:	mov	ip, #4
   1d4a4:	cmp	r2, #0
   1d4a8:	str	ip, [sp, #8]
   1d4ac:	add	lr, sp, ip
   1d4b0:	str	ip, [sp, #20]
   1d4b4:	mov	ip, #1
   1d4b8:	str	ip, [sp, #12]
   1d4bc:	strne	r2, [sp, #28]
   1d4c0:	addne	ip, r2, #4
   1d4c4:	movne	r2, #2
   1d4c8:	strne	ip, [sp, #8]
   1d4cc:	strne	r1, [sp, #24]
   1d4d0:	strne	r2, [sp, #12]
   1d4d4:	cmp	r3, #0
   1d4d8:	str	lr, [sp, #16]
   1d4dc:	beq	1d50c <flatcc_builder_create_table@@Base+0x104>
   1d4e0:	ldr	r2, [sp, #8]
   1d4e4:	add	r1, sp, #80	; 0x50
   1d4e8:	add	r2, r2, r3
   1d4ec:	str	r2, [sp, #8]
   1d4f0:	ldr	r2, [sp, #12]
   1d4f4:	ldr	ip, [pc, #80]	; 1d54c <flatcc_builder_create_table@@Base+0x144>
   1d4f8:	add	r2, r2, #1
   1d4fc:	str	r2, [sp, #12]
   1d500:	add	r1, r1, r2, lsl #3
   1d504:	str	ip, [r1, #-72]	; 0xffffffb8
   1d508:	str	r3, [r1, #-68]	; 0xffffffbc
   1d50c:	add	r1, sp, #8
   1d510:	bl	1bea8 <flatcc_builder_default_alloc@@Base+0x3f8>
   1d514:	add	sp, sp, #84	; 0x54
   1d518:	pop	{r4, r5, r6, r7, pc}
   1d51c:	ldrh	r5, [lr], #2
   1d520:	sub	r7, ip, r5
   1d524:	ldr	r6, [r1, r5]
   1d528:	add	r6, r6, r7
   1d52c:	str	r6, [r1, r5]
   1d530:	b	1d498 <flatcc_builder_create_table@@Base+0x90>
   1d534:	andeq	r2, r2, ip, ror #18
   1d538:	ldrdeq	r0, [r0], -r5
   1d53c:	strdeq	r2, [r2], -sp
   1d540:	andeq	r2, r2, pc, ror lr
   1d544:	ldrdeq	r0, [r0], -fp
   1d548:	muleq	r2, r1, lr
   1d54c:	andeq	r2, r2, r7, lsl r5

0001d550 <flatcc_builder_check_required_field@@Base>:
   1d550:	ldr	r3, [r0, #32]
   1d554:	ldrh	r3, [r3, #14]
   1d558:	cmp	r3, #3
   1d55c:	beq	1d578 <flatcc_builder_check_required_field@@Base+0x28>
   1d560:	push	{r4, lr}
   1d564:	ldr	r3, [pc, #52]	; 1d5a0 <flatcc_builder_check_required_field@@Base+0x50>
   1d568:	ldr	r2, [pc, #52]	; 1d5a4 <flatcc_builder_check_required_field@@Base+0x54>
   1d56c:	ldr	r1, [pc, #52]	; 1d5a8 <flatcc_builder_check_required_field@@Base+0x58>
   1d570:	ldr	r0, [pc, #52]	; 1d5ac <flatcc_builder_check_required_field@@Base+0x5c>
   1d574:	bl	126d8 <__assert_fail@plt>
   1d578:	ldrh	r3, [r0, #8]
   1d57c:	cmp	r3, r1
   1d580:	movls	r0, #0
   1d584:	bls	1d59c <flatcc_builder_check_required_field@@Base+0x4c>
   1d588:	ldr	r3, [r0, #4]
   1d58c:	lsl	r1, r1, #1
   1d590:	ldrh	r0, [r3, r1]
   1d594:	adds	r0, r0, #0
   1d598:	movne	r0, #1
   1d59c:	bx	lr
   1d5a0:	andeq	r2, r2, r8, lsl #19
   1d5a4:	strdeq	r0, [r0], -r8
   1d5a8:	strdeq	r2, [r2], -sp
   1d5ac:	muleq	r2, ip, lr

0001d5b0 <flatcc_builder_check_union_field@@Base>:
   1d5b0:	ldr	r3, [r0, #32]
   1d5b4:	ldrh	r3, [r3, #14]
   1d5b8:	cmp	r3, #3
   1d5bc:	beq	1d5d8 <flatcc_builder_check_union_field@@Base+0x28>
   1d5c0:	push	{r4, lr}
   1d5c4:	ldr	r3, [pc, #112]	; 1d63c <flatcc_builder_check_union_field@@Base+0x8c>
   1d5c8:	ldr	r2, [pc, #112]	; 1d640 <flatcc_builder_check_union_field@@Base+0x90>
   1d5cc:	ldr	r1, [pc, #112]	; 1d644 <flatcc_builder_check_union_field@@Base+0x94>
   1d5d0:	ldr	r0, [pc, #112]	; 1d648 <flatcc_builder_check_union_field@@Base+0x98>
   1d5d4:	bl	126d8 <__assert_fail@plt>
   1d5d8:	cmp	r1, #0
   1d5dc:	beq	1d634 <flatcc_builder_check_union_field@@Base+0x84>
   1d5e0:	ldrh	r3, [r0, #8]
   1d5e4:	cmp	r3, r1
   1d5e8:	bls	1d634 <flatcc_builder_check_union_field@@Base+0x84>
   1d5ec:	sub	r1, r1, #-2147483647	; 0x80000001
   1d5f0:	ldr	r3, [r0, #4]
   1d5f4:	lsl	r1, r1, #1
   1d5f8:	ldrh	r2, [r3, r1]!
   1d5fc:	cmp	r2, #0
   1d600:	ldrheq	r0, [r3, #2]
   1d604:	beq	1d628 <flatcc_builder_check_union_field@@Base+0x78>
   1d608:	ldr	r1, [r0, #16]
   1d60c:	ldrh	r0, [r3, #2]
   1d610:	ldrb	r2, [r1, r2]
   1d614:	cmp	r2, #0
   1d618:	beq	1d628 <flatcc_builder_check_union_field@@Base+0x78>
   1d61c:	adds	r0, r0, #0
   1d620:	movne	r0, #1
   1d624:	bx	lr
   1d628:	clz	r0, r0
   1d62c:	lsr	r0, r0, #5
   1d630:	b	1d624 <flatcc_builder_check_union_field@@Base+0x74>
   1d634:	mov	r0, #0
   1d638:	b	1d624 <flatcc_builder_check_union_field@@Base+0x74>
   1d63c:	andeq	r2, r2, ip, lsr #19
   1d640:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1d644:	strdeq	r2, [r2], -sp
   1d648:	muleq	r2, ip, lr

0001d64c <flatcc_builder_check_required@@Base>:
   1d64c:	ldr	r3, [r0, #32]
   1d650:	push	{r4, lr}
   1d654:	ldrh	r3, [r3, #14]
   1d658:	cmp	r3, #3
   1d65c:	beq	1d674 <flatcc_builder_check_required@@Base+0x28>
   1d660:	ldr	r3, [pc, #84]	; 1d6bc <flatcc_builder_check_required@@Base+0x70>
   1d664:	ldr	r2, [pc, #84]	; 1d6c0 <flatcc_builder_check_required@@Base+0x74>
   1d668:	ldr	r1, [pc, #84]	; 1d6c4 <flatcc_builder_check_required@@Base+0x78>
   1d66c:	ldr	r0, [pc, #84]	; 1d6c8 <flatcc_builder_check_required@@Base+0x7c>
   1d670:	bl	126d8 <__assert_fail@plt>
   1d674:	ldrh	r3, [r0, #8]
   1d678:	cmp	r3, r2
   1d67c:	subge	r1, r1, #2
   1d680:	movge	ip, #0
   1d684:	bge	1d6ac <flatcc_builder_check_required@@Base+0x60>
   1d688:	mov	r0, #0
   1d68c:	pop	{r4, pc}
   1d690:	ldrh	r3, [r1, #2]!
   1d694:	ldr	lr, [r0, #4]
   1d698:	lsl	r3, r3, #1
   1d69c:	ldrh	r3, [lr, r3]
   1d6a0:	cmp	r3, #0
   1d6a4:	beq	1d688 <flatcc_builder_check_required@@Base+0x3c>
   1d6a8:	add	ip, ip, #1
   1d6ac:	cmp	ip, r2
   1d6b0:	blt	1d690 <flatcc_builder_check_required@@Base+0x44>
   1d6b4:	mov	r0, #1
   1d6b8:	pop	{r4, pc}
   1d6bc:	andeq	r2, r2, sp, asr #19
   1d6c0:	andeq	r0, r0, r1, lsl r5
   1d6c4:	strdeq	r2, [r2], -sp
   1d6c8:	muleq	r2, ip, lr

0001d6cc <flatcc_builder_end_table@@Base>:
   1d6cc:	ldr	r3, [r0, #32]
   1d6d0:	push	{r4, r5, r6, r7, lr}
   1d6d4:	sub	sp, sp, #20
   1d6d8:	ldrh	r3, [r3, #14]
   1d6dc:	cmp	r3, #3
   1d6e0:	beq	1d6f8 <flatcc_builder_end_table@@Base+0x2c>
   1d6e4:	ldr	r3, [pc, #260]	; 1d7f0 <flatcc_builder_end_table@@Base+0x124>
   1d6e8:	ldr	r2, [pc, #260]	; 1d7f4 <flatcc_builder_end_table@@Base+0x128>
   1d6ec:	ldr	r1, [pc, #260]	; 1d7f8 <flatcc_builder_end_table@@Base+0x12c>
   1d6f0:	ldr	r0, [pc, #260]	; 1d7fc <flatcc_builder_end_table@@Base+0x130>
   1d6f4:	bl	126d8 <__assert_fail@plt>
   1d6f8:	ldrh	r5, [r0, #8]
   1d6fc:	ldr	r3, [r0, #20]
   1d700:	ldr	r1, [r0, #4]
   1d704:	add	r5, r5, #2
   1d708:	add	r3, r3, #4
   1d70c:	lsl	r5, r5, #1
   1d710:	uxth	r2, r3
   1d714:	uxth	r5, r5
   1d718:	ldr	r3, [r0, #12]
   1d71c:	strh	r2, [r1, #-2]
   1d720:	strh	r5, [r1, #-4]
   1d724:	sub	r6, r1, #4
   1d728:	ldr	r1, [pc, #208]	; 1d800 <flatcc_builder_end_table@@Base+0x134>
   1d72c:	eor	r3, r3, r5
   1d730:	mov	r4, r0
   1d734:	mul	r3, r1, r3
   1d738:	eor	r3, r3, r2
   1d73c:	mov	r2, r5
   1d740:	mul	r3, r1, r3
   1d744:	mov	r1, r6
   1d748:	str	r3, [r0, #12]
   1d74c:	bl	1d190 <flatcc_builder_create_cached_vtable@@Base>
   1d750:	subs	r7, r0, #0
   1d754:	beq	1d7e4 <flatcc_builder_end_table@@Base+0x118>
   1d758:	mov	r2, r5
   1d75c:	mov	r1, #0
   1d760:	mov	r0, r6
   1d764:	bl	12678 <memset@plt>
   1d768:	ldr	r3, [r4, #32]
   1d76c:	ldr	r1, [r4, #76]	; 0x4c
   1d770:	mov	r0, r4
   1d774:	ldr	r3, [r3, #20]
   1d778:	add	r1, r1, r3
   1d77c:	ldrh	r3, [r4, #130]	; 0x82
   1d780:	str	r7, [sp, #8]
   1d784:	ldr	r2, [r4]
   1d788:	sub	r2, r2, r1
   1d78c:	asr	r2, r2, #1
   1d790:	stm	sp, {r1, r2}
   1d794:	ldr	r2, [r4, #20]
   1d798:	ldr	r1, [r4, #16]
   1d79c:	bl	1d408 <flatcc_builder_create_table@@Base>
   1d7a0:	subs	r7, r0, #0
   1d7a4:	beq	1d7e4 <flatcc_builder_end_table@@Base+0x118>
   1d7a8:	ldr	r3, [r4, #32]
   1d7ac:	mov	r0, r4
   1d7b0:	ldr	r2, [r3, #24]
   1d7b4:	str	r2, [r4, #12]
   1d7b8:	ldrh	r2, [r3, #28]
   1d7bc:	strh	r2, [r4, #8]
   1d7c0:	ldr	r2, [r4, #52]	; 0x34
   1d7c4:	ldr	r1, [r3, #16]
   1d7c8:	add	r2, r2, r1
   1d7cc:	str	r2, [r4, #4]
   1d7d0:	ldr	r2, [r4, #76]	; 0x4c
   1d7d4:	ldr	r3, [r3, #20]
   1d7d8:	add	r3, r2, r3
   1d7dc:	str	r3, [r4]
   1d7e0:	bl	1b9a4 <test_parse@@Base+0x4ac>
   1d7e4:	mov	r0, r7
   1d7e8:	add	sp, sp, #20
   1d7ec:	pop	{r4, r5, r6, r7, pc}
   1d7f0:	andeq	r2, r2, fp, ror #19
   1d7f4:	andeq	r0, r0, r5, lsr #10
   1d7f8:	strdeq	r2, [r2], -sp
   1d7fc:	muleq	r2, ip, lr
   1d800:			; <UNDEFINED> instruction: 0x9e3779b1

0001d804 <flatcc_builder_create_vector@@Base>:
   1d804:	push	{lr}		; (str lr, [sp, #-4]!)
   1d808:	sub	sp, sp, #84	; 0x54
   1d80c:	ldr	lr, [sp, #92]	; 0x5c
   1d810:	ldrh	ip, [sp, #88]	; 0x58
   1d814:	cmp	r2, lr
   1d818:	bls	1d830 <flatcc_builder_create_vector@@Base+0x2c>
   1d81c:	ldr	r3, [pc, #180]	; 1d8d8 <flatcc_builder_create_vector@@Base+0xd4>
   1d820:	ldr	r2, [pc, #180]	; 1d8dc <flatcc_builder_create_vector@@Base+0xd8>
   1d824:	ldr	r1, [pc, #180]	; 1d8e0 <flatcc_builder_create_vector@@Base+0xdc>
   1d828:	ldr	r0, [pc, #180]	; 1d8e4 <flatcc_builder_create_vector@@Base+0xe0>
   1d82c:	bl	126d8 <__assert_fail@plt>
   1d830:	ldrh	lr, [r0, #128]	; 0x80
   1d834:	mul	r3, r3, r2
   1d838:	cmp	ip, #4
   1d83c:	movcc	ip, #4
   1d840:	str	r2, [sp, #4]
   1d844:	ldr	r2, [r0, #136]	; 0x88
   1d848:	cmp	lr, ip
   1d84c:	sub	r2, r2, r3
   1d850:	strhcc	ip, [r0, #128]	; 0x80
   1d854:	sub	ip, ip, #1
   1d858:	and	ip, ip, r2
   1d85c:	mov	r2, #4
   1d860:	cmp	r3, #0
   1d864:	str	r2, [sp, #8]
   1d868:	add	lr, sp, r2
   1d86c:	str	r2, [sp, #20]
   1d870:	mov	r2, #1
   1d874:	str	r2, [sp, #12]
   1d878:	strne	r3, [sp, #28]
   1d87c:	addne	r2, r3, #4
   1d880:	movne	r3, #2
   1d884:	strne	r2, [sp, #8]
   1d888:	strne	r1, [sp, #24]
   1d88c:	strne	r3, [sp, #12]
   1d890:	cmp	ip, #0
   1d894:	str	lr, [sp, #16]
   1d898:	beq	1d8c8 <flatcc_builder_create_vector@@Base+0xc4>
   1d89c:	ldr	r3, [sp, #8]
   1d8a0:	add	r2, sp, #80	; 0x50
   1d8a4:	add	r3, r3, ip
   1d8a8:	str	r3, [sp, #8]
   1d8ac:	ldr	r3, [sp, #12]
   1d8b0:	ldr	r1, [pc, #48]	; 1d8e8 <flatcc_builder_create_vector@@Base+0xe4>
   1d8b4:	add	r3, r3, #1
   1d8b8:	str	r3, [sp, #12]
   1d8bc:	add	r2, r2, r3, lsl #3
   1d8c0:	str	r1, [r2, #-72]	; 0xffffffb8
   1d8c4:	str	ip, [r2, #-68]	; 0xffffffbc
   1d8c8:	add	r1, sp, #8
   1d8cc:	bl	1bea8 <flatcc_builder_default_alloc@@Base+0x3f8>
   1d8d0:	add	sp, sp, #84	; 0x54
   1d8d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d8d8:	andeq	r2, r2, r4, lsl #20
   1d8dc:	andeq	r0, r0, r5, asr r5
   1d8e0:	strdeq	r2, [r2], -sp
   1d8e4:	andeq	r2, r2, r7, asr #29
   1d8e8:	andeq	r2, r2, r7, lsl r5

0001d8ec <flatcc_builder_end_vector@@Base>:
   1d8ec:	push	{r0, r1, r2, r4, r5, lr}
   1d8f0:	ldr	r2, [r0, #32]
   1d8f4:	ldrh	r3, [r2, #14]
   1d8f8:	cmp	r3, #4
   1d8fc:	beq	1d914 <flatcc_builder_end_vector@@Base+0x28>
   1d900:	ldr	r3, [pc, #76]	; 1d954 <flatcc_builder_end_vector@@Base+0x68>
   1d904:	ldr	r2, [pc, #76]	; 1d958 <flatcc_builder_end_vector@@Base+0x6c>
   1d908:	ldr	r1, [pc, #76]	; 1d95c <flatcc_builder_end_vector@@Base+0x70>
   1d90c:	ldr	r0, [pc, #76]	; 1d960 <flatcc_builder_end_vector@@Base+0x74>
   1d910:	bl	126d8 <__assert_fail@plt>
   1d914:	ldr	r3, [r2, #24]
   1d918:	mov	r4, r0
   1d91c:	str	r3, [sp, #4]
   1d920:	ldrh	r3, [r0, #130]	; 0x82
   1d924:	str	r3, [sp]
   1d928:	ldr	r3, [r2, #16]
   1d92c:	ldr	r1, [r0, #16]
   1d930:	ldr	r2, [r2, #20]
   1d934:	bl	1d804 <flatcc_builder_create_vector@@Base>
   1d938:	subs	r5, r0, #0
   1d93c:	beq	1d948 <flatcc_builder_end_vector@@Base+0x5c>
   1d940:	mov	r0, r4
   1d944:	bl	1b9a4 <test_parse@@Base+0x4ac>
   1d948:	mov	r0, r5
   1d94c:	add	sp, sp, #12
   1d950:	pop	{r4, r5, pc}
   1d954:	andeq	r2, r2, r1, lsr #20
   1d958:	andeq	r0, r0, r8, ror r5
   1d95c:	strdeq	r2, [r2], -sp
   1d960:	andeq	r2, r2, r7, lsr #26

0001d964 <flatcc_builder_vector_count@@Base>:
   1d964:	ldr	r3, [r0, #32]
   1d968:	ldr	r0, [r3, #20]
   1d96c:	bx	lr

0001d970 <flatcc_builder_vector_edit@@Base>:
   1d970:	ldr	r0, [r0, #16]
   1d974:	bx	lr

0001d978 <flatcc_builder_create_offset_vector_direct@@Base>:
   1d978:	cmn	r2, #-1073741823	; 0xc0000001
   1d97c:	bhi	1d988 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   1d980:	mov	r3, #0
   1d984:	b	1bf7c <flatcc_builder_default_alloc@@Base+0x4cc>
   1d988:	mov	r0, #0
   1d98c:	bx	lr

0001d990 <flatcc_builder_end_offset_vector@@Base>:
   1d990:	ldr	r3, [r0, #32]
   1d994:	push	{r4, r5, r6, lr}
   1d998:	ldrh	r2, [r3, #14]
   1d99c:	cmp	r2, #5
   1d9a0:	beq	1d9b8 <flatcc_builder_end_offset_vector@@Base+0x28>
   1d9a4:	ldr	r3, [pc, #52]	; 1d9e0 <flatcc_builder_end_offset_vector@@Base+0x50>
   1d9a8:	ldr	r2, [pc, #52]	; 1d9e4 <flatcc_builder_end_offset_vector@@Base+0x54>
   1d9ac:	ldr	r1, [pc, #52]	; 1d9e8 <flatcc_builder_end_offset_vector@@Base+0x58>
   1d9b0:	ldr	r0, [pc, #52]	; 1d9ec <flatcc_builder_end_offset_vector@@Base+0x5c>
   1d9b4:	bl	126d8 <__assert_fail@plt>
   1d9b8:	ldr	r2, [r3, #20]
   1d9bc:	ldr	r1, [r0, #16]
   1d9c0:	mov	r4, r0
   1d9c4:	bl	1d978 <flatcc_builder_create_offset_vector_direct@@Base>
   1d9c8:	subs	r5, r0, #0
   1d9cc:	beq	1d9d8 <flatcc_builder_end_offset_vector@@Base+0x48>
   1d9d0:	mov	r0, r4
   1d9d4:	bl	1b9a4 <test_parse@@Base+0x4ac>
   1d9d8:	mov	r0, r5
   1d9dc:	pop	{r4, r5, r6, pc}
   1d9e0:	andeq	r2, r2, fp, lsr sl
   1d9e4:	andeq	r0, r0, r8, asr #11
   1d9e8:	strdeq	r2, [r2], -sp
   1d9ec:	muleq	r2, r0, sp

0001d9f0 <flatcc_builder_create_offset_vector@@Base>:
   1d9f0:	push	{r4, r5, r6, lr}
   1d9f4:	mov	r4, r0
   1d9f8:	mov	r6, r1
   1d9fc:	mov	r5, r2
   1da00:	bl	1cfcc <flatcc_builder_start_offset_vector@@Base>
   1da04:	cmp	r0, #0
   1da08:	bne	1da38 <flatcc_builder_create_offset_vector@@Base+0x48>
   1da0c:	mov	r1, r5
   1da10:	mov	r0, r4
   1da14:	bl	1cbc8 <flatcc_builder_extend_offset_vector@@Base>
   1da18:	cmp	r0, #0
   1da1c:	beq	1da38 <flatcc_builder_create_offset_vector@@Base+0x48>
   1da20:	lsl	r2, r5, #2
   1da24:	mov	r1, r6
   1da28:	bl	125dc <memcpy@plt>
   1da2c:	mov	r0, r4
   1da30:	pop	{r4, r5, r6, lr}
   1da34:	b	1d990 <flatcc_builder_end_offset_vector@@Base>
   1da38:	mov	r0, #0
   1da3c:	pop	{r4, r5, r6, pc}

0001da40 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   1da40:	ldr	r2, [r0, #32]
   1da44:	mov	r3, r1
   1da48:	push	{r4, r5, r6, lr}
   1da4c:	ldrh	r1, [r2, #14]
   1da50:	cmp	r1, #5
   1da54:	beq	1da6c <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   1da58:	ldr	r3, [pc, #64]	; 1daa0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x60>
   1da5c:	ldr	r2, [pc, #64]	; 1daa4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x64>
   1da60:	ldr	r1, [pc, #64]	; 1daa8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x68>
   1da64:	ldr	r0, [pc, #64]	; 1daac <flatcc_builder_end_offset_vector_for_unions@@Base+0x6c>
   1da68:	bl	126d8 <__assert_fail@plt>
   1da6c:	ldr	r2, [r2, #20]
   1da70:	cmn	r2, #-1073741823	; 0xc0000001
   1da74:	movhi	r5, #0
   1da78:	bhi	1da98 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   1da7c:	ldr	r1, [r0, #16]
   1da80:	mov	r4, r0
   1da84:	bl	1bf7c <flatcc_builder_default_alloc@@Base+0x4cc>
   1da88:	subs	r5, r0, #0
   1da8c:	beq	1da98 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   1da90:	mov	r0, r4
   1da94:	bl	1b9a4 <test_parse@@Base+0x4ac>
   1da98:	mov	r0, r5
   1da9c:	pop	{r4, r5, r6, pc}
   1daa0:	andeq	r2, r2, ip, asr sl
   1daa4:	ldrdeq	r0, [r0], -r5
   1daa8:	strdeq	r2, [r2], -sp
   1daac:	muleq	r2, r0, sp

0001dab0 <flatcc_builder_offset_vector_edit@@Base>:
   1dab0:	ldr	r0, [r0, #16]
   1dab4:	bx	lr

0001dab8 <flatcc_builder_offset_vector_count@@Base>:
   1dab8:	ldr	r3, [r0, #32]
   1dabc:	ldr	r0, [r3, #20]
   1dac0:	bx	lr

0001dac4 <flatcc_builder_create_union_vector_direct@@Base>:
   1dac4:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1dac8:	mov	r4, r0
   1dacc:	ldr	r5, [sp, #32]
   1dad0:	cmn	r5, #-1073741823	; 0xc0000001
   1dad4:	bls	1daf0 <flatcc_builder_create_union_vector_direct@@Base+0x2c>
   1dad8:	mov	r3, #0
   1dadc:	str	r3, [r4]
   1dae0:	str	r3, [r4, #4]
   1dae4:	mov	r0, r4
   1dae8:	add	sp, sp, #8
   1daec:	pop	{r4, r5, r6, r7, r8, pc}
   1daf0:	mov	r7, r1
   1daf4:	mov	r8, r2
   1daf8:	mov	r1, r3
   1dafc:	mov	r0, r7
   1db00:	mov	r3, r2
   1db04:	mov	r2, r5
   1db08:	bl	1bf7c <flatcc_builder_default_alloc@@Base+0x4cc>
   1db0c:	subs	r6, r0, #0
   1db10:	beq	1dad8 <flatcc_builder_create_union_vector_direct@@Base+0x14>
   1db14:	mvn	r3, #0
   1db18:	str	r3, [sp, #4]
   1db1c:	mov	r3, #1
   1db20:	str	r3, [sp]
   1db24:	mov	r2, r5
   1db28:	mov	r1, r8
   1db2c:	mov	r0, r7
   1db30:	bl	1d804 <flatcc_builder_create_vector@@Base>
   1db34:	stm	r4, {r0, r6}
   1db38:	b	1dae4 <flatcc_builder_create_union_vector_direct@@Base+0x20>

0001db3c <flatcc_builder_create_union_vector@@Base>:
   1db3c:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1db40:	mov	r7, r0
   1db44:	mov	r0, r1
   1db48:	mov	r5, r1
   1db4c:	mov	r6, r2
   1db50:	mov	r8, r3
   1db54:	bl	1cfcc <flatcc_builder_start_offset_vector@@Base>
   1db58:	subs	r4, r0, #0
   1db5c:	beq	1db78 <flatcc_builder_create_union_vector@@Base+0x3c>
   1db60:	mov	r3, #0
   1db64:	str	r3, [r7]
   1db68:	str	r3, [r7, #4]
   1db6c:	mov	r0, r7
   1db70:	add	sp, sp, #16
   1db74:	pop	{r4, r5, r6, r7, r8, pc}
   1db78:	mov	r1, r8
   1db7c:	mov	r0, r5
   1db80:	bl	1cbc8 <flatcc_builder_extend_offset_vector@@Base>
   1db84:	cmp	r0, #0
   1db88:	beq	1db60 <flatcc_builder_create_union_vector@@Base+0x24>
   1db8c:	mov	r1, r8
   1db90:	mov	r0, r5
   1db94:	bl	1b95c <test_parse@@Base+0x464>
   1db98:	subs	r2, r0, #0
   1db9c:	movne	ip, r6
   1dba0:	ldrne	r3, [r5, #16]
   1dba4:	movne	r1, r4
   1dba8:	beq	1db60 <flatcc_builder_create_union_vector@@Base+0x24>
   1dbac:	cmp	r1, r8
   1dbb0:	add	ip, ip, #8
   1dbb4:	bne	1dbe4 <flatcc_builder_create_union_vector@@Base+0xa8>
   1dbb8:	str	r1, [sp]
   1dbbc:	add	r0, sp, #8
   1dbc0:	mov	r1, r5
   1dbc4:	bl	1dac4 <flatcc_builder_create_union_vector_direct@@Base>
   1dbc8:	ldr	r6, [sp, #8]
   1dbcc:	ldr	r4, [sp, #12]
   1dbd0:	mov	r0, r5
   1dbd4:	bl	1b9a4 <test_parse@@Base+0x4ac>
   1dbd8:	str	r6, [r7]
   1dbdc:	str	r4, [r7, #4]
   1dbe0:	b	1db6c <flatcc_builder_create_union_vector@@Base+0x30>
   1dbe4:	ldrb	r0, [ip, #-8]
   1dbe8:	strb	r0, [r2, r1]
   1dbec:	ldr	r0, [ip, #-4]
   1dbf0:	str	r0, [r3, r1, lsl #2]
   1dbf4:	add	r1, r1, #1
   1dbf8:	b	1dbac <flatcc_builder_create_union_vector@@Base+0x70>

0001dbfc <flatcc_builder_start_union_vector@@Base>:
   1dbfc:	push	{r4, r5, r6, lr}
   1dc00:	mov	r1, #4
   1dc04:	mov	r5, r0
   1dc08:	bl	1bc18 <flatcc_builder_default_alloc@@Base+0x168>
   1dc0c:	subs	r4, r0, #0
   1dc10:	mvnne	r4, #0
   1dc14:	bne	1dc3c <flatcc_builder_start_union_vector@@Base+0x40>
   1dc18:	ldr	r3, [r5, #32]
   1dc1c:	mov	r2, #8
   1dc20:	mvn	r1, #3
   1dc24:	str	r2, [r3, #16]
   1dc28:	mov	r2, #7
   1dc2c:	str	r4, [r3, #20]
   1dc30:	strh	r2, [r3, #14]
   1dc34:	mov	r0, r5
   1dc38:	bl	1b8dc <test_parse@@Base+0x3e4>
   1dc3c:	mov	r0, r4
   1dc40:	pop	{r4, r5, r6, pc}

0001dc44 <flatcc_builder_end_union_vector@@Base>:
   1dc44:	ldr	r3, [r1, #32]
   1dc48:	push	{r4, r5, r6, r7, lr}
   1dc4c:	sub	sp, sp, #20
   1dc50:	ldrh	r2, [r3, #14]
   1dc54:	cmp	r2, #7
   1dc58:	beq	1dc70 <flatcc_builder_end_union_vector@@Base+0x2c>
   1dc5c:	ldr	r3, [pc, #156]	; 1dd00 <flatcc_builder_end_union_vector@@Base+0xbc>
   1dc60:	ldr	r2, [pc, #156]	; 1dd04 <flatcc_builder_end_union_vector@@Base+0xc0>
   1dc64:	ldr	r1, [pc, #156]	; 1dd08 <flatcc_builder_end_union_vector@@Base+0xc4>
   1dc68:	ldr	r0, [pc, #156]	; 1dd0c <flatcc_builder_end_union_vector@@Base+0xc8>
   1dc6c:	bl	126d8 <__assert_fail@plt>
   1dc70:	ldr	r7, [r3, #20]
   1dc74:	mov	r5, r1
   1dc78:	mov	r4, r0
   1dc7c:	lsl	r6, r7, #2
   1dc80:	add	r1, r6, r7
   1dc84:	mov	r0, r5
   1dc88:	bl	1b95c <test_parse@@Base+0x464>
   1dc8c:	subs	r3, r0, #0
   1dc90:	streq	r3, [r4]
   1dc94:	streq	r3, [r4, #4]
   1dc98:	addne	r2, r3, r6
   1dc9c:	ldrne	r0, [r5, #16]
   1dca0:	movne	r1, #0
   1dca4:	bne	1dcc8 <flatcc_builder_end_union_vector@@Base+0x84>
   1dca8:	mov	r0, r4
   1dcac:	add	sp, sp, #20
   1dcb0:	pop	{r4, r5, r6, r7, pc}
   1dcb4:	ldrb	ip, [r0, #-8]
   1dcb8:	strb	ip, [r2, r1]
   1dcbc:	ldr	ip, [r0, #-4]
   1dcc0:	str	ip, [r3, r1, lsl #2]
   1dcc4:	add	r1, r1, #1
   1dcc8:	cmp	r1, r7
   1dccc:	add	r0, r0, #8
   1dcd0:	bne	1dcb4 <flatcc_builder_end_union_vector@@Base+0x70>
   1dcd4:	str	r1, [sp]
   1dcd8:	add	r0, sp, #8
   1dcdc:	mov	r1, r5
   1dce0:	bl	1dac4 <flatcc_builder_create_union_vector_direct@@Base>
   1dce4:	ldr	r7, [sp, #8]
   1dce8:	ldr	r6, [sp, #12]
   1dcec:	mov	r0, r5
   1dcf0:	bl	1b9a4 <test_parse@@Base+0x4ac>
   1dcf4:	str	r7, [r4]
   1dcf8:	str	r6, [r4, #4]
   1dcfc:	b	1dca8 <flatcc_builder_end_union_vector@@Base+0x64>
   1dd00:	andeq	r2, r2, r8, lsl #21
   1dd04:	andeq	r0, r0, r1, asr r6
   1dd08:	strdeq	r2, [r2], -sp
   1dd0c:	ldrdeq	r2, [r2], -sl

0001dd10 <flatcc_builder_union_vector_edit@@Base>:
   1dd10:	ldr	r0, [r0, #16]
   1dd14:	bx	lr

0001dd18 <flatcc_builder_union_vector_count@@Base>:
   1dd18:	ldr	r3, [r0, #32]
   1dd1c:	ldr	r0, [r3, #20]
   1dd20:	bx	lr

0001dd24 <flatcc_builder_extend_union_vector@@Base>:
   1dd24:	push	{r4, r5, r6, lr}
   1dd28:	mvn	r2, #-536870912	; 0xe0000000
   1dd2c:	mov	r4, r0
   1dd30:	ldr	r0, [r0, #32]
   1dd34:	mov	r5, r1
   1dd38:	bl	1bf28 <flatcc_builder_default_alloc@@Base+0x478>
   1dd3c:	cmp	r0, #0
   1dd40:	bne	1dd54 <flatcc_builder_extend_union_vector@@Base+0x30>
   1dd44:	lsl	r1, r5, #3
   1dd48:	mov	r0, r4
   1dd4c:	pop	{r4, r5, r6, lr}
   1dd50:	b	1b95c <test_parse@@Base+0x464>
   1dd54:	mov	r0, #0
   1dd58:	pop	{r4, r5, r6, pc}

0001dd5c <flatcc_builder_truncate_union_vector@@Base>:
   1dd5c:	ldr	r3, [r0, #32]
   1dd60:	push	{r4, lr}
   1dd64:	ldrh	r2, [r3, #14]
   1dd68:	cmp	r2, #7
   1dd6c:	beq	1dd84 <flatcc_builder_truncate_union_vector@@Base+0x28>
   1dd70:	ldr	r3, [pc, #68]	; 1ddbc <flatcc_builder_truncate_union_vector@@Base+0x60>
   1dd74:	ldr	r2, [pc, #68]	; 1ddc0 <flatcc_builder_truncate_union_vector@@Base+0x64>
   1dd78:	ldr	r1, [pc, #68]	; 1ddc4 <flatcc_builder_truncate_union_vector@@Base+0x68>
   1dd7c:	ldr	r0, [pc, #68]	; 1ddc8 <flatcc_builder_truncate_union_vector@@Base+0x6c>
   1dd80:	bl	126d8 <__assert_fail@plt>
   1dd84:	ldr	r2, [r3, #20]
   1dd88:	cmp	r2, r1
   1dd8c:	ldrcc	r3, [pc, #40]	; 1ddbc <flatcc_builder_truncate_union_vector@@Base+0x60>
   1dd90:	ldrcc	r2, [pc, #52]	; 1ddcc <flatcc_builder_truncate_union_vector@@Base+0x70>
   1dd94:	ldrcc	r1, [pc, #40]	; 1ddc4 <flatcc_builder_truncate_union_vector@@Base+0x68>
   1dd98:	ldrcc	r0, [pc, #48]	; 1ddd0 <flatcc_builder_truncate_union_vector@@Base+0x74>
   1dd9c:	bcc	1dd80 <flatcc_builder_truncate_union_vector@@Base+0x24>
   1dda0:	sub	r2, r2, r1
   1dda4:	str	r2, [r3, #20]
   1dda8:	ldr	r3, [r3, #16]
   1ddac:	mul	r1, r3, r1
   1ddb0:	bl	1ba10 <test_parse@@Base+0x518>
   1ddb4:	mov	r0, #0
   1ddb8:	pop	{r4, pc}
   1ddbc:	andeq	r2, r2, r8, lsr #21
   1ddc0:	andeq	r0, r0, r1, lsl #13
   1ddc4:	strdeq	r2, [r2], -sp
   1ddc8:	ldrdeq	r2, [r2], -sl
   1ddcc:	andeq	r0, r0, r2, lsl #13
   1ddd0:	andeq	r2, r2, r3, lsl lr

0001ddd4 <flatcc_builder_union_vector_push@@Base>:
   1ddd4:	push	{r0, r1, r4, lr}
   1ddd8:	stm	sp, {r1, r2}
   1dddc:	ldr	r2, [r0, #32]
   1dde0:	ldrh	r3, [r2, #14]
   1dde4:	cmp	r3, #7
   1dde8:	beq	1de00 <flatcc_builder_union_vector_push@@Base+0x2c>
   1ddec:	ldr	r3, [pc, #72]	; 1de3c <flatcc_builder_union_vector_push@@Base+0x68>
   1ddf0:	ldr	r2, [pc, #72]	; 1de40 <flatcc_builder_union_vector_push@@Base+0x6c>
   1ddf4:	ldr	r1, [pc, #72]	; 1de44 <flatcc_builder_union_vector_push@@Base+0x70>
   1ddf8:	ldr	r0, [pc, #72]	; 1de48 <flatcc_builder_union_vector_push@@Base+0x74>
   1ddfc:	bl	126d8 <__assert_fail@plt>
   1de00:	ldr	r3, [r2, #20]
   1de04:	cmn	r3, #-536870911	; 0xe0000001
   1de08:	moveq	r3, #0
   1de0c:	beq	1de30 <flatcc_builder_union_vector_push@@Base+0x5c>
   1de10:	add	r3, r3, #1
   1de14:	mov	r1, #8
   1de18:	str	r3, [r2, #20]
   1de1c:	bl	1b95c <test_parse@@Base+0x464>
   1de20:	subs	r3, r0, #0
   1de24:	movne	r4, sp
   1de28:	ldmne	r4, {r0, r1}
   1de2c:	stmne	r3, {r0, r1}
   1de30:	mov	r0, r3
   1de34:	add	sp, sp, #8
   1de38:	pop	{r4, pc}
   1de3c:	andeq	r2, r2, sp, asr #21
   1de40:	andeq	r0, r0, sp, lsl #13
   1de44:	strdeq	r2, [r2], -sp
   1de48:	ldrdeq	r2, [r2], -sl

0001de4c <flatcc_builder_append_union_vector@@Base>:
   1de4c:	push	{r4, r5, r6, lr}
   1de50:	mov	r4, r0
   1de54:	ldr	r0, [r0, #32]
   1de58:	ldrh	r3, [r0, #14]
   1de5c:	cmp	r3, #7
   1de60:	beq	1de78 <flatcc_builder_append_union_vector@@Base+0x2c>
   1de64:	ldr	r3, [pc, #68]	; 1deb0 <flatcc_builder_append_union_vector@@Base+0x64>
   1de68:	ldr	r2, [pc, #68]	; 1deb4 <flatcc_builder_append_union_vector@@Base+0x68>
   1de6c:	ldr	r1, [pc, #68]	; 1deb8 <flatcc_builder_append_union_vector@@Base+0x6c>
   1de70:	ldr	r0, [pc, #68]	; 1debc <flatcc_builder_append_union_vector@@Base+0x70>
   1de74:	bl	126d8 <__assert_fail@plt>
   1de78:	mov	r5, r2
   1de7c:	mov	r6, r1
   1de80:	mvn	r2, #-536870912	; 0xe0000000
   1de84:	mov	r1, r5
   1de88:	bl	1bf28 <flatcc_builder_default_alloc@@Base+0x478>
   1de8c:	cmp	r0, #0
   1de90:	bne	1dea8 <flatcc_builder_append_union_vector@@Base+0x5c>
   1de94:	lsl	r2, r5, #3
   1de98:	mov	r1, r6
   1de9c:	mov	r0, r4
   1dea0:	pop	{r4, r5, r6, lr}
   1dea4:	b	1ba30 <test_parse@@Base+0x538>
   1dea8:	mov	r0, #0
   1deac:	pop	{r4, r5, r6, pc}
   1deb0:	andeq	r2, r2, lr, ror #21
   1deb4:	muleq	r0, ip, r6
   1deb8:	strdeq	r2, [r2], -sp
   1debc:	ldrdeq	r2, [r2], -sl

0001dec0 <flatcc_builder_create_string@@Base>:
   1dec0:	push	{lr}		; (str lr, [sp, #-4]!)
   1dec4:	sub	sp, sp, #84	; 0x54
   1dec8:	ldr	r3, [r0, #136]	; 0x88
   1decc:	mov	ip, #4
   1ded0:	cmp	r2, #0
   1ded4:	str	ip, [sp, #8]
   1ded8:	add	lr, sp, ip
   1dedc:	str	ip, [sp, #20]
   1dee0:	sub	r3, r3, r2
   1dee4:	mov	ip, #1
   1dee8:	str	ip, [sp, #12]
   1deec:	strne	r2, [sp, #28]
   1def0:	addne	ip, r2, #4
   1def4:	str	r2, [sp, #4]
   1def8:	sub	r3, r3, #1
   1defc:	movne	r2, #2
   1df00:	strne	ip, [sp, #8]
   1df04:	strne	r2, [sp, #12]
   1df08:	and	r3, r3, #3
   1df0c:	ldr	r2, [sp, #8]
   1df10:	add	r3, r3, #1
   1df14:	add	r2, r2, r3
   1df18:	str	r2, [sp, #8]
   1df1c:	ldr	r2, [sp, #12]
   1df20:	strne	r1, [sp, #24]
   1df24:	add	r2, r2, #1
   1df28:	add	r1, sp, #80	; 0x50
   1df2c:	add	r1, r1, r2, lsl #3
   1df30:	ldr	ip, [pc, #28]	; 1df54 <flatcc_builder_create_string@@Base+0x94>
   1df34:	str	lr, [sp, #16]
   1df38:	str	r3, [r1, #-68]	; 0xffffffbc
   1df3c:	str	ip, [r1, #-72]	; 0xffffffb8
   1df40:	add	r1, sp, #8
   1df44:	str	r2, [sp, #12]
   1df48:	bl	1bea8 <flatcc_builder_default_alloc@@Base+0x3f8>
   1df4c:	add	sp, sp, #84	; 0x54
   1df50:	pop	{pc}		; (ldr pc, [sp], #4)
   1df54:	andeq	r2, r2, r7, lsl r5

0001df58 <flatcc_builder_create_string_str@@Base>:
   1df58:	push	{r4, r5, r6, lr}
   1df5c:	mov	r5, r0
   1df60:	mov	r0, r1
   1df64:	mov	r4, r1
   1df68:	bl	12654 <strlen@plt>
   1df6c:	mov	r1, r4
   1df70:	mov	r2, r0
   1df74:	mov	r0, r5
   1df78:	pop	{r4, r5, r6, lr}
   1df7c:	b	1dec0 <flatcc_builder_create_string@@Base>

0001df80 <flatcc_builder_create_string_strn@@Base>:
   1df80:	push	{r4, r5, r6, lr}
   1df84:	mov	r4, r1
   1df88:	mov	r6, r0
   1df8c:	mov	r1, #0
   1df90:	mov	r0, r4
   1df94:	mov	r5, r2
   1df98:	bl	12690 <memchr@plt>
   1df9c:	mov	r1, r4
   1dfa0:	cmp	r0, #0
   1dfa4:	subne	r5, r0, r4
   1dfa8:	mov	r2, r5
   1dfac:	mov	r0, r6
   1dfb0:	pop	{r4, r5, r6, lr}
   1dfb4:	b	1dec0 <flatcc_builder_create_string@@Base>

0001dfb8 <flatcc_builder_end_string@@Base>:
   1dfb8:	ldr	r3, [r0, #32]
   1dfbc:	push	{r4, r5, r6, lr}
   1dfc0:	ldrh	r2, [r3, #14]
   1dfc4:	cmp	r2, #6
   1dfc8:	beq	1dfe0 <flatcc_builder_end_string@@Base+0x28>
   1dfcc:	ldr	r3, [pc, #80]	; 1e024 <flatcc_builder_end_string@@Base+0x6c>
   1dfd0:	ldr	r2, [pc, #80]	; 1e028 <flatcc_builder_end_string@@Base+0x70>
   1dfd4:	ldr	r1, [pc, #80]	; 1e02c <flatcc_builder_end_string@@Base+0x74>
   1dfd8:	ldr	r0, [pc, #80]	; 1e030 <flatcc_builder_end_string@@Base+0x78>
   1dfdc:	bl	126d8 <__assert_fail@plt>
   1dfe0:	ldr	r2, [r3, #20]
   1dfe4:	ldr	r3, [r0, #20]
   1dfe8:	mov	r4, r0
   1dfec:	cmp	r2, r3
   1dff0:	ldrne	r3, [pc, #44]	; 1e024 <flatcc_builder_end_string@@Base+0x6c>
   1dff4:	ldrne	r2, [pc, #56]	; 1e034 <flatcc_builder_end_string@@Base+0x7c>
   1dff8:	ldrne	r1, [pc, #44]	; 1e02c <flatcc_builder_end_string@@Base+0x74>
   1dffc:	ldrne	r0, [pc, #52]	; 1e038 <flatcc_builder_end_string@@Base+0x80>
   1e000:	bne	1dfdc <flatcc_builder_end_string@@Base+0x24>
   1e004:	ldr	r1, [r0, #16]
   1e008:	bl	1dec0 <flatcc_builder_create_string@@Base>
   1e00c:	subs	r5, r0, #0
   1e010:	beq	1e01c <flatcc_builder_end_string@@Base+0x64>
   1e014:	mov	r0, r4
   1e018:	bl	1b9a4 <test_parse@@Base+0x4ac>
   1e01c:	mov	r0, r5
   1e020:	pop	{r4, r5, r6, pc}
   1e024:	andeq	r2, r2, r1, lsl fp
   1e028:	andeq	r0, r0, r4, asr #13
   1e02c:	strdeq	r2, [r2], -sp
   1e030:	andeq	r2, r2, r3, asr #27
   1e034:	andeq	r0, r0, r5, asr #13
   1e038:	andeq	r2, r2, ip, lsl #30

0001e03c <flatcc_builder_string_edit@@Base>:
   1e03c:	ldr	r0, [r0, #16]
   1e040:	bx	lr

0001e044 <flatcc_builder_string_len@@Base>:
   1e044:	ldr	r3, [r0, #32]
   1e048:	ldr	r0, [r3, #20]
   1e04c:	bx	lr

0001e050 <flatcc_builder_table_add@@Base>:
   1e050:	push	{r4, r5, r6, r7, r8, lr}
   1e054:	mov	r4, r0
   1e058:	ldr	r0, [r0, #32]
   1e05c:	ldrh	r0, [r0, #14]
   1e060:	cmp	r0, #3
   1e064:	beq	1e07c <flatcc_builder_table_add@@Base+0x2c>
   1e068:	ldr	r3, [pc, #232]	; 1e158 <flatcc_builder_table_add@@Base+0x108>
   1e06c:	ldr	r2, [pc, #232]	; 1e15c <flatcc_builder_table_add@@Base+0x10c>
   1e070:	ldr	r1, [pc, #232]	; 1e160 <flatcc_builder_table_add@@Base+0x110>
   1e074:	ldr	r0, [pc, #232]	; 1e164 <flatcc_builder_table_add@@Base+0x114>
   1e078:	bl	126d8 <__assert_fail@plt>
   1e07c:	ldr	r0, [pc, #228]	; 1e168 <flatcc_builder_table_add@@Base+0x118>
   1e080:	cmp	r1, r0
   1e084:	ldrhi	r3, [pc, #204]	; 1e158 <flatcc_builder_table_add@@Base+0x108>
   1e088:	ldrhi	r2, [pc, #220]	; 1e16c <flatcc_builder_table_add@@Base+0x11c>
   1e08c:	ldrhi	r1, [pc, #204]	; 1e160 <flatcc_builder_table_add@@Base+0x110>
   1e090:	ldrhi	r0, [pc, #216]	; 1e170 <flatcc_builder_table_add@@Base+0x120>
   1e094:	bhi	1e078 <flatcc_builder_table_add@@Base+0x28>
   1e098:	ldrh	r0, [r4, #130]	; 0x82
   1e09c:	lsl	r7, r1, #1
   1e0a0:	cmp	r0, r3
   1e0a4:	ldr	r0, [r4, #4]
   1e0a8:	strhcc	r3, [r4, #130]	; 0x82
   1e0ac:	ldrh	r5, [r0, r7]
   1e0b0:	cmp	r5, #0
   1e0b4:	ldrne	r3, [pc, #156]	; 1e158 <flatcc_builder_table_add@@Base+0x108>
   1e0b8:	ldrne	r2, [pc, #180]	; 1e174 <flatcc_builder_table_add@@Base+0x124>
   1e0bc:	ldrne	r1, [pc, #156]	; 1e160 <flatcc_builder_table_add@@Base+0x110>
   1e0c0:	ldrne	r0, [pc, #176]	; 1e178 <flatcc_builder_table_add@@Base+0x128>
   1e0c4:	bne	1e078 <flatcc_builder_table_add@@Base+0x28>
   1e0c8:	ldr	ip, [r4, #12]
   1e0cc:	ldr	lr, [pc, #168]	; 1e17c <flatcc_builder_table_add@@Base+0x12c>
   1e0d0:	eor	ip, ip, r1
   1e0d4:	ldr	r6, [r4, #20]
   1e0d8:	mul	ip, lr, ip
   1e0dc:	sub	r0, r3, #1
   1e0e0:	eor	ip, ip, r2
   1e0e4:	rsb	r3, r3, #0
   1e0e8:	add	r0, r0, r6
   1e0ec:	and	r6, r0, r3
   1e0f0:	mul	ip, lr, ip
   1e0f4:	ldr	r3, [r4, #24]
   1e0f8:	uxth	r8, r1
   1e0fc:	add	r1, r2, r6
   1e100:	cmp	r1, r3
   1e104:	str	ip, [r4, #12]
   1e108:	str	r1, [r4, #20]
   1e10c:	bcs	1e138 <flatcc_builder_table_add@@Base+0xe8>
   1e110:	ldr	r3, [r4, #4]
   1e114:	add	r2, r6, #4
   1e118:	ldr	r0, [r4, #16]
   1e11c:	strh	r2, [r3, r7]
   1e120:	ldrh	r3, [r4, #8]
   1e124:	add	r0, r0, r6
   1e128:	cmp	r3, r8
   1e12c:	addls	r1, r8, #1
   1e130:	strhls	r1, [r4, #8]
   1e134:	pop	{r4, r5, r6, r7, r8, pc}
   1e138:	ldr	r2, [pc, #64]	; 1e180 <flatcc_builder_table_add@@Base+0x130>
   1e13c:	add	r1, r1, #1
   1e140:	mov	r0, r4
   1e144:	bl	1b90c <test_parse@@Base+0x414>
   1e148:	cmp	r0, #0
   1e14c:	beq	1e110 <flatcc_builder_table_add@@Base+0xc0>
   1e150:	mov	r0, r5
   1e154:	pop	{r4, r5, r6, r7, r8, pc}
   1e158:	andeq	r2, r2, fp, lsr #22
   1e15c:	andeq	r0, r0, sp, ror #13
   1e160:	strdeq	r2, [r2], -sp
   1e164:	muleq	r2, ip, lr
   1e168:	strdeq	r7, [r0], -ip
   1e16c:	andeq	r0, r0, lr, ror #13
   1e170:	andeq	r2, r2, r0, lsr pc
   1e174:	strdeq	r0, [r0], -r8
   1e178:	andeq	r2, r2, sl, ror #24
   1e17c:			; <UNDEFINED> instruction: 0x9e3779b1
   1e180:	strdeq	pc, [r0], -ip

0001e184 <flatcc_builder_table_edit@@Base>:
   1e184:	ldr	r3, [r0, #32]
   1e188:	ldrh	r3, [r3, #14]
   1e18c:	cmp	r3, #3
   1e190:	beq	1e1ac <flatcc_builder_table_edit@@Base+0x28>
   1e194:	push	{r4, lr}
   1e198:	ldr	r3, [pc, #32]	; 1e1c0 <flatcc_builder_table_edit@@Base+0x3c>
   1e19c:	ldr	r2, [pc, #32]	; 1e1c4 <flatcc_builder_table_edit@@Base+0x40>
   1e1a0:	ldr	r1, [pc, #32]	; 1e1c8 <flatcc_builder_table_edit@@Base+0x44>
   1e1a4:	ldr	r0, [pc, #32]	; 1e1cc <flatcc_builder_table_edit@@Base+0x48>
   1e1a8:	bl	126d8 <__assert_fail@plt>
   1e1ac:	ldr	r3, [r0, #20]
   1e1b0:	ldr	r0, [r0, #16]
   1e1b4:	sub	r1, r3, r1
   1e1b8:	add	r0, r0, r1
   1e1bc:	bx	lr
   1e1c0:	andeq	r2, r2, r4, asr #22
   1e1c4:	andeq	r0, r0, r2, lsl #14
   1e1c8:	strdeq	r2, [r2], -sp
   1e1cc:	muleq	r2, ip, lr

0001e1d0 <flatcc_builder_table_add_copy@@Base>:
   1e1d0:	push	{r4, r5, r6, lr}
   1e1d4:	mov	r4, r3
   1e1d8:	mov	r6, r2
   1e1dc:	ldrh	r3, [sp, #16]
   1e1e0:	mov	r2, r4
   1e1e4:	bl	1e050 <flatcc_builder_table_add@@Base>
   1e1e8:	subs	r5, r0, #0
   1e1ec:	beq	1e1fc <flatcc_builder_table_add_copy@@Base+0x2c>
   1e1f0:	mov	r2, r4
   1e1f4:	mov	r1, r6
   1e1f8:	bl	125dc <memcpy@plt>
   1e1fc:	mov	r0, r5
   1e200:	pop	{r4, r5, r6, pc}

0001e204 <flatcc_builder_table_add_offset@@Base>:
   1e204:	ldr	r3, [r0, #32]
   1e208:	push	{r4, r5, r6, r7, r8, lr}
   1e20c:	ldrh	r3, [r3, #14]
   1e210:	cmp	r3, #3
   1e214:	beq	1e22c <flatcc_builder_table_add_offset@@Base+0x28>
   1e218:	ldr	r3, [pc, #228]	; 1e304 <flatcc_builder_table_add_offset@@Base+0x100>
   1e21c:	ldr	r2, [pc, #228]	; 1e308 <flatcc_builder_table_add_offset@@Base+0x104>
   1e220:	ldr	r1, [pc, #228]	; 1e30c <flatcc_builder_table_add_offset@@Base+0x108>
   1e224:	ldr	r0, [pc, #228]	; 1e310 <flatcc_builder_table_add_offset@@Base+0x10c>
   1e228:	bl	126d8 <__assert_fail@plt>
   1e22c:	ldr	r3, [pc, #224]	; 1e314 <flatcc_builder_table_add_offset@@Base+0x110>
   1e230:	cmp	r1, r3
   1e234:	ldrhi	r3, [pc, #200]	; 1e304 <flatcc_builder_table_add_offset@@Base+0x100>
   1e238:	ldrhi	r2, [pc, #216]	; 1e318 <flatcc_builder_table_add_offset@@Base+0x114>
   1e23c:	ldrhi	r1, [pc, #200]	; 1e30c <flatcc_builder_table_add_offset@@Base+0x108>
   1e240:	ldrhi	r0, [pc, #212]	; 1e31c <flatcc_builder_table_add_offset@@Base+0x118>
   1e244:	bhi	1e228 <flatcc_builder_table_add_offset@@Base+0x24>
   1e248:	ldr	r3, [r0, #4]
   1e24c:	lsl	r7, r1, #1
   1e250:	mov	r4, r0
   1e254:	ldrh	r6, [r3, r7]
   1e258:	cmp	r6, #0
   1e25c:	ldrne	r3, [pc, #160]	; 1e304 <flatcc_builder_table_add_offset@@Base+0x100>
   1e260:	ldrne	r2, [pc, #184]	; 1e320 <flatcc_builder_table_add_offset@@Base+0x11c>
   1e264:	ldrne	r1, [pc, #160]	; 1e30c <flatcc_builder_table_add_offset@@Base+0x108>
   1e268:	ldrne	r0, [pc, #180]	; 1e324 <flatcc_builder_table_add_offset@@Base+0x120>
   1e26c:	bne	1e228 <flatcc_builder_table_add_offset@@Base+0x24>
   1e270:	ldr	r3, [r0, #12]
   1e274:	ldr	r2, [pc, #172]	; 1e328 <flatcc_builder_table_add_offset@@Base+0x124>
   1e278:	eor	r3, r3, r1
   1e27c:	ldr	r8, [r0, #20]
   1e280:	mul	r3, r2, r3
   1e284:	add	r8, r8, #3
   1e288:	eor	r3, r3, #4
   1e28c:	bic	r8, r8, #3
   1e290:	mul	r3, r2, r3
   1e294:	uxth	r5, r1
   1e298:	str	r3, [r0, #12]
   1e29c:	ldr	r3, [r0, #24]
   1e2a0:	add	r1, r8, #4
   1e2a4:	cmp	r1, r3
   1e2a8:	str	r1, [r0, #20]
   1e2ac:	bhi	1e2ec <flatcc_builder_table_add_offset@@Base+0xe8>
   1e2b0:	ldr	r3, [r4, #4]
   1e2b4:	uxth	r2, r8
   1e2b8:	add	r1, r2, #4
   1e2bc:	strh	r1, [r3, r7]
   1e2c0:	ldrh	r3, [r4, #8]
   1e2c4:	ldr	r0, [r4, #16]
   1e2c8:	cmp	r3, r5
   1e2cc:	ldr	r3, [r4]
   1e2d0:	addls	r1, r5, #1
   1e2d4:	strhls	r1, [r4, #8]
   1e2d8:	add	r1, r3, #2
   1e2dc:	str	r1, [r4]
   1e2e0:	add	r0, r0, r8
   1e2e4:	strh	r2, [r3]
   1e2e8:	pop	{r4, r5, r6, r7, r8, pc}
   1e2ec:	ldr	r2, [pc, #56]	; 1e32c <flatcc_builder_table_add_offset@@Base+0x128>
   1e2f0:	bl	1b90c <test_parse@@Base+0x414>
   1e2f4:	cmp	r0, #0
   1e2f8:	beq	1e2b0 <flatcc_builder_table_add_offset@@Base+0xac>
   1e2fc:	mov	r0, r6
   1e300:	pop	{r4, r5, r6, r7, r8, pc}
   1e304:	andeq	r2, r2, lr, asr fp
   1e308:	andeq	r0, r0, r3, lsl r7
   1e30c:	strdeq	r2, [r2], -sp
   1e310:	muleq	r2, ip, lr
   1e314:	strdeq	r7, [r0], -ip
   1e318:	andeq	r0, r0, r4, lsl r7
   1e31c:	andeq	r2, r2, r0, lsr pc
   1e320:	andeq	r0, r0, fp, lsl r7
   1e324:	andeq	r2, r2, sl, ror #24
   1e328:			; <UNDEFINED> instruction: 0x9e3779b1
   1e32c:	strdeq	pc, [r0], -ip

0001e330 <flatcc_builder_table_add_union@@Base>:
   1e330:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e334:	add	ip, sp, #8
   1e338:	stmdb	ip, {r2, r3}
   1e33c:	ldr	r3, [r0, #32]
   1e340:	ldrb	r5, [sp]
   1e344:	ldr	r4, [sp, #4]
   1e348:	ldrh	r3, [r3, #14]
   1e34c:	cmp	r3, #3
   1e350:	beq	1e368 <flatcc_builder_table_add_union@@Base+0x38>
   1e354:	ldr	r3, [pc, #156]	; 1e3f8 <flatcc_builder_table_add_union@@Base+0xc8>
   1e358:	ldr	r2, [pc, #156]	; 1e3fc <flatcc_builder_table_add_union@@Base+0xcc>
   1e35c:	ldr	r1, [pc, #156]	; 1e400 <flatcc_builder_table_add_union@@Base+0xd0>
   1e360:	ldr	r0, [pc, #156]	; 1e404 <flatcc_builder_table_add_union@@Base+0xd4>
   1e364:	bl	126d8 <__assert_fail@plt>
   1e368:	cmp	r5, #0
   1e36c:	mov	r6, r0
   1e370:	mov	r7, r1
   1e374:	bne	1e394 <flatcc_builder_table_add_union@@Base+0x64>
   1e378:	cmp	r4, #0
   1e37c:	beq	1e3bc <flatcc_builder_table_add_union@@Base+0x8c>
   1e380:	ldr	r3, [pc, #112]	; 1e3f8 <flatcc_builder_table_add_union@@Base+0xc8>
   1e384:	ldr	r2, [pc, #124]	; 1e408 <flatcc_builder_table_add_union@@Base+0xd8>
   1e388:	ldr	r1, [pc, #112]	; 1e400 <flatcc_builder_table_add_union@@Base+0xd0>
   1e38c:	ldr	r0, [pc, #120]	; 1e40c <flatcc_builder_table_add_union@@Base+0xdc>
   1e390:	b	1e364 <flatcc_builder_table_add_union@@Base+0x34>
   1e394:	cmp	r4, #0
   1e398:	beq	1e3bc <flatcc_builder_table_add_union@@Base+0x8c>
   1e39c:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   1e3a0:	cmp	r0, #0
   1e3a4:	strne	r4, [r0]
   1e3a8:	ldreq	r3, [pc, #72]	; 1e3f8 <flatcc_builder_table_add_union@@Base+0xc8>
   1e3ac:	ldreq	r2, [pc, #92]	; 1e410 <flatcc_builder_table_add_union@@Base+0xe0>
   1e3b0:	ldreq	r1, [pc, #72]	; 1e400 <flatcc_builder_table_add_union@@Base+0xd0>
   1e3b4:	ldreq	r0, [pc, #88]	; 1e414 <flatcc_builder_table_add_union@@Base+0xe4>
   1e3b8:	beq	1e364 <flatcc_builder_table_add_union@@Base+0x34>
   1e3bc:	mov	r3, #1
   1e3c0:	mov	r2, r3
   1e3c4:	sub	r1, r7, #1
   1e3c8:	mov	r0, r6
   1e3cc:	bl	1e050 <flatcc_builder_table_add@@Base>
   1e3d0:	cmp	r0, #0
   1e3d4:	ldreq	r3, [pc, #28]	; 1e3f8 <flatcc_builder_table_add_union@@Base+0xc8>
   1e3d8:	ldreq	r2, [pc, #56]	; 1e418 <flatcc_builder_table_add_union@@Base+0xe8>
   1e3dc:	ldreq	r1, [pc, #28]	; 1e400 <flatcc_builder_table_add_union@@Base+0xd0>
   1e3e0:	ldreq	r0, [pc, #52]	; 1e41c <flatcc_builder_table_add_union@@Base+0xec>
   1e3e4:	beq	1e364 <flatcc_builder_table_add_union@@Base+0x34>
   1e3e8:	strb	r5, [r0]
   1e3ec:	mov	r0, #0
   1e3f0:	add	sp, sp, #12
   1e3f4:	pop	{r4, r5, r6, r7, pc}
   1e3f8:	andeq	r2, r2, lr, ror fp
   1e3fc:	andeq	r0, r0, lr, ror #11
   1e400:	strdeq	r2, [r2], -sp
   1e404:	muleq	r2, ip, lr
   1e408:	andeq	r0, r0, pc, ror #11
   1e40c:	andeq	r2, r2, r4, ror pc
   1e410:	strdeq	r0, [r0], -r2
   1e414:	muleq	r2, r6, pc	; <UNPREDICTABLE>
   1e418:	strdeq	r0, [r0], -r6
   1e41c:	andeq	r2, r2, r0, lsr #31

0001e420 <flatcc_builder_table_add_union_vector@@Base>:
   1e420:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e424:	mov	r7, r1
   1e428:	add	r1, sp, #8
   1e42c:	stmdb	r1, {r2, r3}
   1e430:	ldr	r3, [r0, #32]
   1e434:	ldm	sp, {r4, r5}
   1e438:	ldrh	r3, [r3, #14]
   1e43c:	cmp	r3, #3
   1e440:	beq	1e458 <flatcc_builder_table_add_union_vector@@Base+0x38>
   1e444:	ldr	r3, [pc, #176]	; 1e4fc <flatcc_builder_table_add_union_vector@@Base+0xdc>
   1e448:	ldr	r1, [pc, #176]	; 1e500 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   1e44c:	ldr	r0, [pc, #176]	; 1e504 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   1e450:	mov	r2, #1536	; 0x600
   1e454:	bl	126d8 <__assert_fail@plt>
   1e458:	clz	r3, r5
   1e45c:	clz	r2, r4
   1e460:	lsr	r3, r3, #5
   1e464:	lsr	r2, r2, #5
   1e468:	cmp	r2, r3
   1e46c:	beq	1e498 <flatcc_builder_table_add_union_vector@@Base+0x78>
   1e470:	adds	r4, r4, #0
   1e474:	movne	r4, #1
   1e478:	cmp	r4, r3
   1e47c:	mvnne	r0, #0
   1e480:	bne	1e4f4 <flatcc_builder_table_add_union_vector@@Base+0xd4>
   1e484:	ldr	r3, [pc, #112]	; 1e4fc <flatcc_builder_table_add_union_vector@@Base+0xdc>
   1e488:	ldr	r2, [pc, #120]	; 1e508 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   1e48c:	ldr	r1, [pc, #108]	; 1e500 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   1e490:	ldr	r0, [pc, #116]	; 1e50c <flatcc_builder_table_add_union_vector@@Base+0xec>
   1e494:	b	1e454 <flatcc_builder_table_add_union_vector@@Base+0x34>
   1e498:	cmp	r4, #0
   1e49c:	moveq	r0, r4
   1e4a0:	beq	1e4f4 <flatcc_builder_table_add_union_vector@@Base+0xd4>
   1e4a4:	sub	r1, r7, #1
   1e4a8:	mov	r6, r0
   1e4ac:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   1e4b0:	cmp	r0, #0
   1e4b4:	bne	1e4cc <flatcc_builder_table_add_union_vector@@Base+0xac>
   1e4b8:	ldr	r3, [pc, #60]	; 1e4fc <flatcc_builder_table_add_union_vector@@Base+0xdc>
   1e4bc:	ldr	r2, [pc, #76]	; 1e510 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   1e4c0:	ldr	r1, [pc, #56]	; 1e500 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   1e4c4:	ldr	r0, [pc, #72]	; 1e514 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   1e4c8:	b	1e454 <flatcc_builder_table_add_union_vector@@Base+0x34>
   1e4cc:	str	r4, [r0]
   1e4d0:	mov	r1, r7
   1e4d4:	mov	r0, r6
   1e4d8:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   1e4dc:	cmp	r0, #0
   1e4e0:	strne	r5, [r0]
   1e4e4:	movne	r0, #0
   1e4e8:	ldreq	r3, [pc, #12]	; 1e4fc <flatcc_builder_table_add_union_vector@@Base+0xdc>
   1e4ec:	ldreq	r2, [pc, #36]	; 1e518 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   1e4f0:	beq	1e4c0 <flatcc_builder_table_add_union_vector@@Base+0xa0>
   1e4f4:	add	sp, sp, #12
   1e4f8:	pop	{r4, r5, r6, r7, pc}
   1e4fc:	muleq	r2, sp, fp
   1e500:	strdeq	r2, [r2], -sp
   1e504:	muleq	r2, ip, lr
   1e508:	andeq	r0, r0, r1, lsl #12
   1e50c:	andeq	r2, r2, ip, lsr #31
   1e510:	andeq	r0, r0, r4, lsl #12
   1e514:	muleq	r2, r6, pc	; <UNPREDICTABLE>
   1e518:	andeq	r0, r0, r8, lsl #12

0001e51c <flatcc_builder_push_buffer_alignment@@Base>:
   1e51c:	mov	r3, r0
   1e520:	mov	r2, #4
   1e524:	ldrh	r0, [r0, #128]	; 0x80
   1e528:	strh	r2, [r3, #128]	; 0x80
   1e52c:	bx	lr

0001e530 <flatcc_builder_pop_buffer_alignment@@Base>:
   1e530:	ldrh	r3, [r0, #128]	; 0x80
   1e534:	cmp	r3, r1
   1e538:	strhcc	r1, [r0, #128]	; 0x80
   1e53c:	bx	lr

0001e540 <flatcc_builder_get_buffer_alignment@@Base>:
   1e540:	ldrh	r0, [r0, #128]	; 0x80
   1e544:	bx	lr

0001e548 <flatcc_builder_set_vtable_clustering@@Base>:
   1e548:	clz	r1, r1
   1e54c:	lsr	r1, r1, #5
   1e550:	str	r1, [r0, #180]	; 0xb4
   1e554:	bx	lr

0001e558 <flatcc_builder_set_block_align@@Base>:
   1e558:	strh	r1, [r0, #132]	; 0x84
   1e55c:	bx	lr

0001e560 <flatcc_builder_get_level@@Base>:
   1e560:	ldr	r0, [r0, #156]	; 0x9c
   1e564:	bx	lr

0001e568 <flatcc_builder_set_max_level@@Base>:
   1e568:	ldr	r3, [r0, #160]	; 0xa0
   1e56c:	str	r1, [r0, #176]	; 0xb0
   1e570:	cmp	r1, r3
   1e574:	strgt	r1, [r0, #160]	; 0xa0
   1e578:	bx	lr

0001e57c <flatcc_builder_get_buffer_size@@Base>:
   1e57c:	ldr	r2, [r0, #140]	; 0x8c
   1e580:	ldr	r0, [r0, #136]	; 0x88
   1e584:	sub	r0, r2, r0
   1e588:	bx	lr

0001e58c <flatcc_builder_get_buffer_start@@Base>:
   1e58c:	ldr	r0, [r0, #136]	; 0x88
   1e590:	bx	lr

0001e594 <flatcc_builder_get_buffer_end@@Base>:
   1e594:	ldr	r0, [r0, #140]	; 0x8c
   1e598:	bx	lr

0001e59c <flatcc_builder_set_vtable_cache_limit@@Base>:
   1e59c:	str	r1, [r0, #172]	; 0xac
   1e5a0:	bx	lr

0001e5a4 <flatcc_builder_set_identifier@@Base>:
   1e5a4:	ldr	r3, [pc, #16]	; 1e5bc <flatcc_builder_set_identifier@@Base+0x18>
   1e5a8:	cmp	r1, #0
   1e5ac:	moveq	r1, r3
   1e5b0:	ldr	r3, [r1]
   1e5b4:	str	r3, [r0, #168]	; 0xa8
   1e5b8:	bx	lr
   1e5bc:	andeq	r2, r2, r7, lsl r5

0001e5c0 <flatcc_builder_get_type@@Base>:
   1e5c0:	ldr	r0, [r0, #32]
   1e5c4:	cmp	r0, #0
   1e5c8:	ldrhne	r0, [r0, #14]
   1e5cc:	bx	lr

0001e5d0 <flatcc_builder_get_type_at@@Base>:
   1e5d0:	cmp	r1, #0
   1e5d4:	ble	1e5fc <flatcc_builder_get_type_at@@Base+0x2c>
   1e5d8:	ldr	r3, [r0, #156]	; 0x9c
   1e5dc:	cmp	r1, r3
   1e5e0:	bgt	1e5fc <flatcc_builder_get_type_at@@Base+0x2c>
   1e5e4:	sub	r1, r1, r3
   1e5e8:	mov	r2, #36	; 0x24
   1e5ec:	ldr	r3, [r0, #32]
   1e5f0:	mla	r1, r2, r1, r3
   1e5f4:	ldrh	r0, [r1, #14]
   1e5f8:	bx	lr
   1e5fc:	mov	r0, #0
   1e600:	bx	lr

0001e604 <flatcc_builder_get_direct_buffer@@Base>:
   1e604:	ldr	r3, [r0, #184]	; 0xb8
   1e608:	cmp	r3, #0
   1e60c:	beq	1e634 <flatcc_builder_get_direct_buffer@@Base+0x30>
   1e610:	ldr	r2, [r0, #188]	; 0xbc
   1e614:	ldr	r3, [r0, #192]	; 0xc0
   1e618:	cmp	r2, r3
   1e61c:	bne	1e634 <flatcc_builder_get_direct_buffer@@Base+0x30>
   1e620:	cmp	r1, #0
   1e624:	ldrne	r3, [r0, #212]	; 0xd4
   1e628:	ldr	r0, [r0, #196]	; 0xc4
   1e62c:	strne	r3, [r1]
   1e630:	bx	lr
   1e634:	mov	r0, #0
   1e638:	cmp	r1, #0
   1e63c:	strne	r0, [r1]
   1e640:	moveq	r0, r1
   1e644:	bx	lr

0001e648 <flatcc_builder_copy_buffer@@Base>:
   1e648:	ldr	r3, [r0, #184]	; 0xb8
   1e64c:	cmp	r3, #0
   1e650:	beq	1e67c <flatcc_builder_copy_buffer@@Base+0x34>
   1e654:	push	{r4, lr}
   1e658:	add	r0, r0, #188	; 0xbc
   1e65c:	bl	1ec3c <flatcc_emitter_copy_buffer@@Base>
   1e660:	cmp	r0, #0
   1e664:	popne	{r4, pc}
   1e668:	ldr	r3, [pc, #20]	; 1e684 <flatcc_builder_copy_buffer@@Base+0x3c>
   1e66c:	ldr	r2, [pc, #20]	; 1e688 <flatcc_builder_copy_buffer@@Base+0x40>
   1e670:	ldr	r1, [pc, #20]	; 1e68c <flatcc_builder_copy_buffer@@Base+0x44>
   1e674:	ldr	r0, [pc, #20]	; 1e690 <flatcc_builder_copy_buffer@@Base+0x48>
   1e678:	bl	126d8 <__assert_fail@plt>
   1e67c:	mov	r0, r3
   1e680:	bx	lr
   1e684:	andeq	r2, r2, r3, asr #23
   1e688:	andeq	r0, r0, r6, lsl #15
   1e68c:	strdeq	r2, [r2], -sp
   1e690:	strdeq	r2, [r2], -r4

0001e694 <flatcc_builder_finalize_buffer@@Base>:
   1e694:	push	{r4, r5, r6, lr}
   1e698:	cmp	r1, #0
   1e69c:	ldr	r4, [r0, #140]	; 0x8c
   1e6a0:	ldr	r2, [r0, #136]	; 0x88
   1e6a4:	mov	r5, r0
   1e6a8:	sub	r4, r4, r2
   1e6ac:	strne	r4, [r1]
   1e6b0:	mov	r0, r4
   1e6b4:	bl	12624 <malloc@plt>
   1e6b8:	subs	r6, r0, #0
   1e6bc:	bne	1e6d4 <flatcc_builder_finalize_buffer@@Base+0x40>
   1e6c0:	ldr	r3, [pc, #52]	; 1e6fc <flatcc_builder_finalize_buffer@@Base+0x68>
   1e6c4:	ldr	r2, [pc, #52]	; 1e700 <flatcc_builder_finalize_buffer@@Base+0x6c>
   1e6c8:	ldr	r1, [pc, #52]	; 1e704 <flatcc_builder_finalize_buffer@@Base+0x70>
   1e6cc:	ldr	r0, [pc, #52]	; 1e708 <flatcc_builder_finalize_buffer@@Base+0x74>
   1e6d0:	bl	126d8 <__assert_fail@plt>
   1e6d4:	mov	r2, r4
   1e6d8:	mov	r1, r6
   1e6dc:	mov	r0, r5
   1e6e0:	bl	1e648 <flatcc_builder_copy_buffer@@Base>
   1e6e4:	cmp	r0, #0
   1e6e8:	ldreq	r3, [pc, #12]	; 1e6fc <flatcc_builder_finalize_buffer@@Base+0x68>
   1e6ec:	ldreq	r2, [pc, #24]	; 1e70c <flatcc_builder_finalize_buffer@@Base+0x78>
   1e6f0:	beq	1e6c8 <flatcc_builder_finalize_buffer@@Base+0x34>
   1e6f4:	mov	r0, r6
   1e6f8:	pop	{r4, r5, r6, pc}
   1e6fc:	ldrdeq	r2, [r2], -lr
   1e700:	muleq	r0, r8, r7
   1e704:	strdeq	r2, [r2], -sp
   1e708:	andeq	r2, r2, sl, ror #24
   1e70c:	muleq	r0, ip, r7

0001e710 <flatcc_builder_finalize_aligned_buffer@@Base>:
   1e710:	push	{r4, r5, r6, r7, r8, lr}
   1e714:	mov	r6, r0
   1e718:	ldr	r4, [r0, #140]	; 0x8c
   1e71c:	ldr	r2, [r0, #136]	; 0x88
   1e720:	ldrh	r0, [r0, #128]	; 0x80
   1e724:	subs	r7, r1, #0
   1e728:	sub	r2, r4, r2
   1e72c:	sub	r4, r0, #1
   1e730:	strne	r2, [r7]
   1e734:	add	r4, r4, r2
   1e738:	rsb	r2, r0, #0
   1e73c:	and	r4, r4, r2
   1e740:	mov	r1, r4
   1e744:	bl	1ba60 <test_parse@@Base+0x568>
   1e748:	subs	r5, r0, #0
   1e74c:	beq	1e774 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   1e750:	mov	r2, r4
   1e754:	mov	r1, r5
   1e758:	mov	r0, r6
   1e75c:	bl	1e648 <flatcc_builder_copy_buffer@@Base>
   1e760:	subs	r4, r0, #0
   1e764:	bne	1e774 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   1e768:	mov	r0, r5
   1e76c:	bl	125d0 <free@plt>
   1e770:	mov	r5, r4
   1e774:	cmp	r7, #0
   1e778:	clz	r3, r5
   1e77c:	lsr	r3, r3, #5
   1e780:	moveq	r3, #0
   1e784:	cmp	r3, #0
   1e788:	movne	r3, #0
   1e78c:	strne	r3, [r7]
   1e790:	mov	r0, r5
   1e794:	pop	{r4, r5, r6, r7, r8, pc}

0001e798 <flatcc_builder_aligned_alloc@@Base>:
   1e798:	b	1ba60 <test_parse@@Base+0x568>

0001e79c <flatcc_builder_aligned_free@@Base>:
   1e79c:	b	125d0 <free@plt>

0001e7a0 <flatcc_builder_get_emit_context@@Base>:
   1e7a0:	ldr	r0, [r0, #36]	; 0x24
   1e7a4:	bx	lr

0001e7a8 <flatcc_emitter_recycle_page@@Base>:
   1e7a8:	ldr	r3, [r0]
   1e7ac:	cmp	r3, r1
   1e7b0:	beq	1e7f4 <flatcc_emitter_recycle_page@@Base+0x4c>
   1e7b4:	ldr	r2, [r0, #4]
   1e7b8:	cmp	r1, r2
   1e7bc:	beq	1e7f4 <flatcc_emitter_recycle_page@@Base+0x4c>
   1e7c0:	ldr	r2, [r1, #2944]	; 0xb80
   1e7c4:	ldr	r0, [r1, #2948]	; 0xb84
   1e7c8:	str	r0, [r2, #2948]	; 0xb84
   1e7cc:	ldr	r0, [r1, #2948]	; 0xb84
   1e7d0:	str	r2, [r0, #2944]	; 0xb80
   1e7d4:	ldr	r2, [r3, #2948]	; 0xb84
   1e7d8:	str	r3, [r1, #2944]	; 0xb80
   1e7dc:	str	r2, [r1, #2948]	; 0xb84
   1e7e0:	str	r1, [r2, #2944]	; 0xb80
   1e7e4:	ldr	r3, [r1, #2944]	; 0xb80
   1e7e8:	mov	r0, #0
   1e7ec:	str	r1, [r3, #2948]	; 0xb84
   1e7f0:	bx	lr
   1e7f4:	mvn	r0, #0
   1e7f8:	bx	lr

0001e7fc <flatcc_emitter_reset@@Base>:
   1e7fc:	ldr	r3, [r0]
   1e800:	cmp	r3, #0
   1e804:	bxeq	lr
   1e808:	add	r2, r3, #1472	; 0x5c0
   1e80c:	push	{r4, lr}
   1e810:	mov	r4, r0
   1e814:	str	r2, [r0, #8]
   1e818:	str	r2, [r0, #16]
   1e81c:	mov	r2, #1472	; 0x5c0
   1e820:	str	r2, [r0, #12]
   1e824:	str	r2, [r0, #20]
   1e828:	sub	r2, r2, #2944	; 0xb80
   1e82c:	str	r3, [r0, #4]
   1e830:	str	r2, [r3, #2952]	; 0xb88
   1e834:	ldr	r3, [r0, #32]
   1e838:	cmp	r3, #0
   1e83c:	ldr	r3, [r0, #24]
   1e840:	streq	r3, [r0, #32]
   1e844:	ldr	r2, [r0, #32]
   1e848:	lsr	r3, r3, #2
   1e84c:	add	r2, r2, r2, lsl #1
   1e850:	add	r3, r3, r2, lsr #2
   1e854:	str	r3, [r0, #32]
   1e858:	mov	r3, #0
   1e85c:	str	r3, [r0, #24]
   1e860:	ldr	r2, [r4, #32]
   1e864:	ldr	r3, [r4, #28]
   1e868:	cmp	r3, r2, lsl #1
   1e86c:	popls	{r4, pc}
   1e870:	ldr	r3, [r4, #4]
   1e874:	ldr	r2, [r4]
   1e878:	ldr	r0, [r3, #2944]	; 0xb80
   1e87c:	cmp	r0, r2
   1e880:	bne	1e888 <flatcc_emitter_reset@@Base+0x8c>
   1e884:	pop	{r4, pc}
   1e888:	ldr	r2, [r0, #2944]	; 0xb80
   1e88c:	str	r2, [r3, #2944]	; 0xb80
   1e890:	ldr	r2, [r0, #2944]	; 0xb80
   1e894:	str	r3, [r2, #2948]	; 0xb84
   1e898:	bl	125d0 <free@plt>
   1e89c:	ldr	r3, [r4, #28]
   1e8a0:	sub	r3, r3, #2944	; 0xb80
   1e8a4:	str	r3, [r4, #28]
   1e8a8:	b	1e860 <flatcc_emitter_reset@@Base+0x64>

0001e8ac <flatcc_emitter_clear@@Base>:
   1e8ac:	ldr	r3, [r0]
   1e8b0:	cmp	r3, #0
   1e8b4:	bxeq	lr
   1e8b8:	ldr	r2, [r3, #2948]	; 0xb84
   1e8bc:	push	{r4, r5, r6, lr}
   1e8c0:	mov	r4, r0
   1e8c4:	mov	r1, #0
   1e8c8:	str	r1, [r2, #2944]	; 0xb80
   1e8cc:	ldr	r5, [r3, #2944]	; 0xb80
   1e8d0:	cmp	r5, #0
   1e8d4:	bne	1e8f4 <flatcc_emitter_clear@@Base+0x48>
   1e8d8:	mov	r0, r3
   1e8dc:	bl	125d0 <free@plt>
   1e8e0:	mov	r1, r5
   1e8e4:	mov	r0, r4
   1e8e8:	mov	r2, #36	; 0x24
   1e8ec:	pop	{r4, r5, r6, lr}
   1e8f0:	b	12678 <memset@plt>
   1e8f4:	ldr	r0, [r5, #2948]	; 0xb84
   1e8f8:	bl	125d0 <free@plt>
   1e8fc:	mov	r3, r5
   1e900:	b	1e8cc <flatcc_emitter_clear@@Base+0x20>

0001e904 <flatcc_emitter@@Base>:
   1e904:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e908:	mov	r4, r0
   1e90c:	ldr	r0, [sp, #48]	; 0x30
   1e910:	ldr	ip, [r4, #24]
   1e914:	cmp	r3, #0
   1e918:	add	ip, ip, r0
   1e91c:	str	ip, [r4, #24]
   1e920:	bge	1ead0 <flatcc_emitter@@Base+0x1cc>
   1e924:	ldr	ip, [r4, #12]
   1e928:	cmp	r0, ip
   1e92c:	bhi	1e974 <flatcc_emitter@@Base+0x70>
   1e930:	ldr	r3, [r4, #8]
   1e934:	sub	r3, r3, r0
   1e938:	sub	r0, ip, r0
   1e93c:	str	r3, [r4, #8]
   1e940:	str	r0, [r4, #12]
   1e944:	mov	r4, r1
   1e948:	mov	r5, r2
   1e94c:	cmp	r5, #0
   1e950:	add	r4, r4, #8
   1e954:	beq	1e98c <flatcc_emitter@@Base+0x88>
   1e958:	ldmdb	r4, {r1, r2}
   1e95c:	mov	r0, r3
   1e960:	bl	125dc <memcpy@plt>
   1e964:	ldr	r2, [r4, #-4]
   1e968:	sub	r5, r5, #1
   1e96c:	add	r3, r0, r2
   1e970:	b	1e94c <flatcc_emitter@@Base+0x48>
   1e974:	ldr	sl, [pc, #696]	; 1ec34 <flatcc_emitter@@Base+0x330>
   1e978:	add	r5, r1, r2, lsl #3
   1e97c:	sub	r6, r2, #1
   1e980:	mov	r9, #2944	; 0xb80
   1e984:	cmn	r6, #1
   1e988:	bne	1e994 <flatcc_emitter@@Base+0x90>
   1e98c:	mov	r0, #0
   1e990:	b	1ea38 <flatcc_emitter@@Base+0x134>
   1e994:	ldr	r7, [r5, #-4]
   1e998:	ldr	fp, [r5, #-8]
   1e99c:	mov	r8, #1472	; 0x5c0
   1e9a0:	add	fp, fp, r7
   1e9a4:	cmp	r7, #0
   1e9a8:	subeq	r5, r5, #8
   1e9ac:	subeq	r6, r6, #1
   1e9b0:	beq	1e984 <flatcc_emitter@@Base+0x80>
   1e9b4:	ldr	r3, [r4, #12]
   1e9b8:	cmp	r3, r7
   1e9bc:	bcs	1eaa0 <flatcc_emitter@@Base+0x19c>
   1e9c0:	cmp	r3, #0
   1e9c4:	movne	r2, r3
   1e9c8:	bne	1eaa4 <flatcc_emitter@@Base+0x1a0>
   1e9cc:	ldr	r3, [r4]
   1e9d0:	cmp	r3, #0
   1e9d4:	beq	1ea1c <flatcc_emitter@@Base+0x118>
   1e9d8:	ldr	r2, [r3, #2948]	; 0xb84
   1e9dc:	ldr	r1, [r4, #4]
   1e9e0:	cmp	r2, r1
   1e9e4:	beq	1ea1c <flatcc_emitter@@Base+0x118>
   1e9e8:	ldr	r3, [r3, #2952]	; 0xb88
   1e9ec:	sub	r3, r3, #2944	; 0xb80
   1e9f0:	str	r3, [r2, #2952]	; 0xb88
   1e9f4:	str	r2, [r4]
   1e9f8:	ldr	r3, [r4]
   1e9fc:	str	r9, [r4, #12]
   1ea00:	add	r2, r3, #2944	; 0xb80
   1ea04:	str	r2, [r4, #8]
   1ea08:	ldr	r2, [r3, #2944]	; 0xb80
   1ea0c:	ldr	r2, [r2, #2952]	; 0xb88
   1ea10:	sub	r2, r2, #2944	; 0xb80
   1ea14:	str	r2, [r3, #2952]	; 0xb88
   1ea18:	b	1e9a4 <flatcc_emitter@@Base+0xa0>
   1ea1c:	mov	r0, sl
   1ea20:	str	r3, [sp, #4]
   1ea24:	bl	12624 <malloc@plt>
   1ea28:	ldr	r3, [sp, #4]
   1ea2c:	cmp	r0, #0
   1ea30:	bne	1ea40 <flatcc_emitter@@Base+0x13c>
   1ea34:	mvn	r0, #0
   1ea38:	add	sp, sp, #12
   1ea3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea40:	ldr	r2, [r4, #28]
   1ea44:	cmp	r3, #0
   1ea48:	add	r2, r2, #2944	; 0xb80
   1ea4c:	str	r2, [r4, #28]
   1ea50:	beq	1ea70 <flatcc_emitter@@Base+0x16c>
   1ea54:	ldr	r2, [r4, #4]
   1ea58:	str	r3, [r0, #2944]	; 0xb80
   1ea5c:	str	r2, [r0, #2948]	; 0xb84
   1ea60:	str	r0, [r3, #2948]	; 0xb84
   1ea64:	str	r0, [r2, #2944]	; 0xb80
   1ea68:	str	r0, [r4]
   1ea6c:	b	1e9f8 <flatcc_emitter@@Base+0xf4>
   1ea70:	add	r3, r0, #1472	; 0x5c0
   1ea74:	str	r3, [r4, #8]
   1ea78:	str	r3, [r4, #16]
   1ea7c:	ldr	r3, [pc, #436]	; 1ec38 <flatcc_emitter@@Base+0x334>
   1ea80:	str	r0, [r4]
   1ea84:	str	r0, [r4, #4]
   1ea88:	str	r0, [r0, #2944]	; 0xb80
   1ea8c:	str	r0, [r0, #2948]	; 0xb84
   1ea90:	str	r8, [r4, #12]
   1ea94:	str	r8, [r4, #20]
   1ea98:	str	r3, [r0, #2952]	; 0xb88
   1ea9c:	b	1e9a4 <flatcc_emitter@@Base+0xa0>
   1eaa0:	mov	r2, r7
   1eaa4:	ldr	r0, [r4, #8]
   1eaa8:	rsb	r1, r2, #0
   1eaac:	add	r0, r0, r1
   1eab0:	sub	r3, r3, r2
   1eab4:	add	fp, fp, r1
   1eab8:	str	r0, [r4, #8]
   1eabc:	str	r3, [r4, #12]
   1eac0:	mov	r1, fp
   1eac4:	sub	r7, r7, r2
   1eac8:	bl	125dc <memcpy@plt>
   1eacc:	b	1e9a4 <flatcc_emitter@@Base+0xa0>
   1ead0:	ldr	ip, [r4, #20]
   1ead4:	cmp	r0, ip
   1ead8:	bls	1eb14 <flatcc_emitter@@Base+0x210>
   1eadc:	ldr	sl, [pc, #336]	; 1ec34 <flatcc_emitter@@Base+0x330>
   1eae0:	mov	r6, r2
   1eae4:	add	r5, r1, #8
   1eae8:	mov	r9, #2944	; 0xb80
   1eaec:	cmp	r6, #0
   1eaf0:	beq	1e98c <flatcc_emitter@@Base+0x88>
   1eaf4:	ldr	r7, [r5, #-4]
   1eaf8:	ldr	fp, [r5, #-8]
   1eafc:	mov	r8, #1472	; 0x5c0
   1eb00:	cmp	r7, #0
   1eb04:	bne	1eb2c <flatcc_emitter@@Base+0x228>
   1eb08:	sub	r6, r6, #1
   1eb0c:	add	r5, r5, #8
   1eb10:	b	1eaec <flatcc_emitter@@Base+0x1e8>
   1eb14:	ldr	r3, [r4, #16]
   1eb18:	add	lr, r3, r0
   1eb1c:	sub	r0, ip, r0
   1eb20:	str	lr, [r4, #16]
   1eb24:	str	r0, [r4, #20]
   1eb28:	b	1e944 <flatcc_emitter@@Base+0x40>
   1eb2c:	ldr	r3, [r4, #20]
   1eb30:	cmp	r3, r7
   1eb34:	bcs	1ebf4 <flatcc_emitter@@Base+0x2f0>
   1eb38:	cmp	r3, #0
   1eb3c:	bne	1ebf8 <flatcc_emitter@@Base+0x2f4>
   1eb40:	ldr	r3, [r4, #4]
   1eb44:	cmp	r3, #0
   1eb48:	beq	1eb60 <flatcc_emitter@@Base+0x25c>
   1eb4c:	ldr	r2, [r3, #2944]	; 0xb80
   1eb50:	ldr	r1, [r4]
   1eb54:	cmp	r2, r1
   1eb58:	strne	r2, [r4, #4]
   1eb5c:	bne	1eba4 <flatcc_emitter@@Base+0x2a0>
   1eb60:	mov	r0, sl
   1eb64:	str	r3, [sp, #4]
   1eb68:	bl	12624 <malloc@plt>
   1eb6c:	cmp	r0, #0
   1eb70:	beq	1ea34 <flatcc_emitter@@Base+0x130>
   1eb74:	ldr	r2, [r4, #28]
   1eb78:	ldr	r3, [sp, #4]
   1eb7c:	add	r2, r2, #2944	; 0xb80
   1eb80:	cmp	r3, #0
   1eb84:	str	r2, [r4, #28]
   1eb88:	beq	1ebc4 <flatcc_emitter@@Base+0x2c0>
   1eb8c:	ldr	r2, [r4]
   1eb90:	str	r3, [r0, #2948]	; 0xb84
   1eb94:	str	r2, [r0, #2944]	; 0xb80
   1eb98:	str	r0, [r2, #2948]	; 0xb84
   1eb9c:	str	r0, [r3, #2944]	; 0xb80
   1eba0:	str	r0, [r4, #4]
   1eba4:	ldr	r3, [r4, #4]
   1eba8:	str	r9, [r4, #20]
   1ebac:	str	r3, [r4, #16]
   1ebb0:	ldr	r2, [r3, #2948]	; 0xb84
   1ebb4:	ldr	r2, [r2, #2952]	; 0xb88
   1ebb8:	add	r2, r2, #2944	; 0xb80
   1ebbc:	str	r2, [r3, #2952]	; 0xb88
   1ebc0:	b	1eb00 <flatcc_emitter@@Base+0x1fc>
   1ebc4:	add	r3, r0, #1472	; 0x5c0
   1ebc8:	str	r3, [r4, #8]
   1ebcc:	str	r3, [r4, #16]
   1ebd0:	ldr	r3, [pc, #96]	; 1ec38 <flatcc_emitter@@Base+0x334>
   1ebd4:	str	r0, [r4]
   1ebd8:	str	r0, [r4, #4]
   1ebdc:	str	r0, [r0, #2944]	; 0xb80
   1ebe0:	str	r0, [r0, #2948]	; 0xb84
   1ebe4:	str	r8, [r4, #12]
   1ebe8:	str	r8, [r4, #20]
   1ebec:	str	r3, [r0, #2952]	; 0xb88
   1ebf0:	b	1eb00 <flatcc_emitter@@Base+0x1fc>
   1ebf4:	mov	r3, r7
   1ebf8:	mov	r2, r3
   1ebfc:	mov	r1, fp
   1ec00:	ldr	r0, [r4, #16]
   1ec04:	str	r3, [sp, #4]
   1ec08:	bl	125dc <memcpy@plt>
   1ec0c:	ldr	r3, [sp, #4]
   1ec10:	ldr	r2, [r4, #16]
   1ec14:	sub	r7, r7, r3
   1ec18:	add	r2, r2, r3
   1ec1c:	str	r2, [r4, #16]
   1ec20:	ldr	r2, [r4, #20]
   1ec24:	add	fp, fp, r3
   1ec28:	sub	r3, r2, r3
   1ec2c:	str	r3, [r4, #20]
   1ec30:	b	1eb00 <flatcc_emitter@@Base+0x1fc>
   1ec34:	andeq	r0, r0, ip, lsl #23
   1ec38:			; <UNDEFINED> instruction: 0xfffffa40

0001ec3c <flatcc_emitter_copy_buffer@@Base>:
   1ec3c:	push	{r4, r5, r6, lr}
   1ec40:	mov	r4, r0
   1ec44:	ldr	r0, [r0, #24]
   1ec48:	cmp	r0, r2
   1ec4c:	movhi	r3, #0
   1ec50:	bhi	1ecc4 <flatcc_emitter_copy_buffer@@Base+0x88>
   1ec54:	ldr	r2, [r4]
   1ec58:	cmp	r2, #0
   1ec5c:	moveq	r3, r2
   1ec60:	beq	1ecc4 <flatcc_emitter_copy_buffer@@Base+0x88>
   1ec64:	mov	r3, r1
   1ec68:	ldr	r1, [r4, #4]
   1ec6c:	cmp	r2, r1
   1ec70:	moveq	r2, r0
   1ec74:	ldr	r1, [r4, #8]
   1ec78:	beq	1ecb8 <flatcc_emitter_copy_buffer@@Base+0x7c>
   1ec7c:	ldr	r5, [r4, #12]
   1ec80:	mov	r0, r3
   1ec84:	rsb	r5, r5, #2944	; 0xb80
   1ec88:	mov	r2, r5
   1ec8c:	bl	125dc <memcpy@plt>
   1ec90:	ldr	r2, [r4]
   1ec94:	mov	r6, #2944	; 0xb80
   1ec98:	add	r3, r0, r5
   1ec9c:	ldr	r5, [r2, #2944]	; 0xb80
   1eca0:	ldr	r2, [r4, #4]
   1eca4:	cmp	r5, r2
   1eca8:	bne	1eccc <flatcc_emitter_copy_buffer@@Base+0x90>
   1ecac:	ldr	r2, [r4, #20]
   1ecb0:	mov	r1, r5
   1ecb4:	rsb	r2, r2, #2944	; 0xb80
   1ecb8:	mov	r0, r3
   1ecbc:	bl	125dc <memcpy@plt>
   1ecc0:	mov	r3, r0
   1ecc4:	mov	r0, r3
   1ecc8:	pop	{r4, r5, r6, pc}
   1eccc:	mov	r1, r5
   1ecd0:	mov	r0, r3
   1ecd4:	mov	r2, r6
   1ecd8:	bl	125dc <memcpy@plt>
   1ecdc:	ldr	r5, [r5, #2944]	; 0xb80
   1ece0:	add	r3, r0, #2944	; 0xb80
   1ece4:	b	1eca0 <flatcc_emitter_copy_buffer@@Base+0x64>

0001ece8 <grisu3_diy_fp_encode_double@@Base>:
   1ece8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ecec:	sub	sp, sp, #44	; 0x2c
   1ecf0:	mov	r8, r0
   1ecf4:	ldr	fp, [sp, #80]	; 0x50
   1ecf8:	mov	r9, r1
   1ecfc:	cmp	fp, #0
   1ed00:	mov	ip, r3
   1ed04:	sub	r2, r2, r3
   1ed08:	movne	fp, #4
   1ed0c:	moveq	fp, #0
   1ed10:	orrs	r3, r8, r9
   1ed14:	movne	r3, #0
   1ed18:	movne	r4, #0
   1ed1c:	ldrne	r5, [pc, #1132]	; 1f190 <grisu3_diy_fp_encode_double@@Base+0x4a8>
   1ed20:	bne	1ed40 <grisu3_diy_fp_encode_double@@Base+0x58>
   1ed24:	bl	1282c <__assert_fail@plt+0x154>
   1ed28:	lsl	r3, r9, #10
   1ed2c:	orr	r3, r3, r8, lsr #22
   1ed30:	lsl	r1, r8, #10
   1ed34:	mov	r9, r3
   1ed38:	mov	r8, r1
   1ed3c:	mov	r3, lr
   1ed40:	and	r0, r8, r4
   1ed44:	and	r1, r9, r5
   1ed48:	orrs	r1, r0, r1
   1ed4c:	sub	lr, r3, #10
   1ed50:	beq	1ed28 <grisu3_diy_fp_encode_double@@Base+0x40>
   1ed54:	cmp	r8, #0
   1ed58:	sbcs	r1, r9, #0
   1ed5c:	mov	sl, r3
   1ed60:	sub	r3, r3, #1
   1ed64:	bge	1ed8c <grisu3_diy_fp_encode_double@@Base+0xa4>
   1ed68:	rsb	r7, sl, #0
   1ed6c:	cmn	r2, #348	; 0x15c
   1ed70:	lsl	fp, fp, r7
   1ed74:	bge	1ed98 <grisu3_diy_fp_encode_double@@Base+0xb0>
   1ed78:	ldr	r3, [pc, #1044]	; 1f194 <grisu3_diy_fp_encode_double@@Base+0x4ac>
   1ed7c:	ldr	r1, [pc, #1044]	; 1f198 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   1ed80:	ldr	r0, [pc, #1044]	; 1f19c <grisu3_diy_fp_encode_double@@Base+0x4b4>
   1ed84:	mov	r2, #80	; 0x50
   1ed88:	bl	126d8 <__assert_fail@plt>
   1ed8c:	adds	r8, r8, r8
   1ed90:	adc	r9, r9, r9
   1ed94:	b	1ed54 <grisu3_diy_fp_encode_double@@Base+0x6c>
   1ed98:	cmp	r2, #348	; 0x15c
   1ed9c:	ldrge	r3, [pc, #1008]	; 1f194 <grisu3_diy_fp_encode_double@@Base+0x4ac>
   1eda0:	movge	r2, #81	; 0x51
   1eda4:	ldrge	r1, [pc, #1004]	; 1f198 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   1eda8:	ldrge	r0, [pc, #1008]	; 1f1a0 <grisu3_diy_fp_encode_double@@Base+0x4b8>
   1edac:	bge	1ed88 <grisu3_diy_fp_encode_double@@Base+0xa0>
   1edb0:	add	r1, r2, #348	; 0x15c
   1edb4:	ldr	r3, [pc, #1000]	; 1f1a4 <grisu3_diy_fp_encode_double@@Base+0x4bc>
   1edb8:	asr	r1, r1, #3
   1edbc:	add	r1, r3, r1, lsl #4
   1edc0:	ldrsh	r0, [r1, #66]	; 0x42
   1edc4:	ldrd	r4, [r1, #56]	; 0x38
   1edc8:	ldrsh	r1, [r1, #64]	; 0x40
   1edcc:	cmp	r2, r0
   1edd0:	strd	r4, [sp, #8]
   1edd4:	str	r1, [sp, #32]
   1edd8:	addlt	r3, r3, #24
   1eddc:	movlt	r2, #88	; 0x58
   1ede0:	ldrlt	r1, [pc, #944]	; 1f198 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   1ede4:	ldrlt	r0, [pc, #956]	; 1f1a8 <grisu3_diy_fp_encode_double@@Base+0x4c0>
   1ede8:	blt	1ed88 <grisu3_diy_fp_encode_double@@Base+0xa0>
   1edec:	add	r1, r0, #7
   1edf0:	cmp	r2, r1
   1edf4:	addgt	r3, r3, #24
   1edf8:	movgt	r2, #89	; 0x59
   1edfc:	ldrgt	r1, [pc, #916]	; 1f198 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   1ee00:	ldrgt	r0, [pc, #932]	; 1f1ac <grisu3_diy_fp_encode_double@@Base+0x4c4>
   1ee04:	bgt	1ed88 <grisu3_diy_fp_encode_double@@Base+0xa0>
   1ee08:	cmp	r2, r0
   1ee0c:	beq	1eeec <grisu3_diy_fp_encode_double@@Base+0x204>
   1ee10:	sub	r2, r2, r0
   1ee14:	sub	r2, r2, #1
   1ee18:	cmp	r2, #6
   1ee1c:	ldrhi	r3, [pc, #908]	; 1f1b0 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   1ee20:	movhi	r2, #185	; 0xb9
   1ee24:	ldrhi	r1, [pc, #876]	; 1f198 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   1ee28:	ldrhi	r0, [pc, #900]	; 1f1b4 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   1ee2c:	bhi	1ed88 <grisu3_diy_fp_encode_double@@Base+0xa0>
   1ee30:	ldr	r1, [pc, #896]	; 1f1b8 <grisu3_diy_fp_encode_double@@Base+0x4d0>
   1ee34:	lsl	r3, r2, #4
   1ee38:	add	r0, r1, r3
   1ee3c:	str	r0, [sp, #28]
   1ee40:	ldrd	r0, [r1, r3]
   1ee44:	mov	r3, #0
   1ee48:	add	ip, ip, #1
   1ee4c:	strd	r0, [sp]
   1ee50:	ldr	lr, [sp, #4]
   1ee54:	ldrd	r4, [sp]
   1ee58:	mov	r1, #0
   1ee5c:	umull	r6, r7, r8, lr
   1ee60:	mov	r0, r8
   1ee64:	strd	r6, [sp, #16]
   1ee68:	ldr	r6, [sp, #20]
   1ee6c:	mov	r5, #0
   1ee70:	mla	r8, lr, r1, r6
   1ee74:	umull	r6, r7, r9, r4
   1ee78:	mla	lr, r9, r5, r7
   1ee7c:	add	r2, ip, r2
   1ee80:	str	lr, [sp, #36]	; 0x24
   1ee84:	mul	lr, r0, r5
   1ee88:	mla	lr, r4, r1, lr
   1ee8c:	umull	r4, r5, r0, r4
   1ee90:	add	r0, lr, r5
   1ee94:	adds	r0, r0, r6
   1ee98:	ldr	lr, [sp, #16]
   1ee9c:	adc	r1, r3, #0
   1eea0:	ldr	r6, [sp, #36]	; 0x24
   1eea4:	adds	r0, r0, #-2147483648	; 0x80000000
   1eea8:	adc	r1, r1, #0
   1eeac:	adds	r0, r0, lr
   1eeb0:	adc	r1, r1, #0
   1eeb4:	adds	r0, r8, r6
   1eeb8:	mov	r4, r1
   1eebc:	mov	r5, r3
   1eec0:	adc	r1, r3, r3
   1eec4:	ldr	r3, [sp, #4]
   1eec8:	umlal	r0, r1, r3, r9
   1eecc:	ldr	r3, [sp, #28]
   1eed0:	adds	r8, r4, r0
   1eed4:	adc	r9, r5, r1
   1eed8:	ldr	r3, [r3, #8]
   1eedc:	cmp	r2, #19
   1eee0:	add	sl, sl, r3
   1eee4:	add	sl, sl, #64	; 0x40
   1eee8:	addgt	fp, fp, #4
   1eeec:	ldrd	r0, [sp, #8]
   1eef0:	ldr	lr, [sp, #12]
   1eef4:	mov	r3, #0
   1eef8:	umull	r6, r7, r9, r0
   1eefc:	umull	r4, r5, r8, lr
   1ef00:	mov	r1, #0
   1ef04:	mla	lr, lr, r3, r5
   1ef08:	mla	r5, r9, r1, r7
   1ef0c:	mul	r7, r8, r1
   1ef10:	mov	ip, #0
   1ef14:	mla	r7, r0, r3, r7
   1ef18:	umull	r0, r1, r8, r0
   1ef1c:	add	r2, r7, r1
   1ef20:	adds	r2, r2, r6
   1ef24:	adc	r3, ip, #0
   1ef28:	adds	r2, r2, #-2147483648	; 0x80000000
   1ef2c:	adc	r3, r3, #0
   1ef30:	adds	r2, r2, r4
   1ef34:	adc	r3, r3, #0
   1ef38:	mov	r6, r3
   1ef3c:	mov	r2, r5
   1ef40:	ldr	r3, [sp, #12]
   1ef44:	adds	r4, lr, r2
   1ef48:	adc	r5, ip, ip
   1ef4c:	umlal	r4, r5, r3, r9
   1ef50:	ldr	r3, [sp, #32]
   1ef54:	adds	r4, r4, r6
   1ef58:	adc	r5, r5, ip
   1ef5c:	cmp	fp, ip
   1ef60:	mov	r7, ip
   1ef64:	add	sl, sl, r3
   1ef68:	moveq	r7, #8
   1ef6c:	movne	r7, #9
   1ef70:	orrs	r3, r4, r5
   1ef74:	add	sl, sl, #64	; 0x40
   1ef78:	add	fp, fp, r7
   1ef7c:	movne	ip, sl
   1ef80:	movne	r0, #0
   1ef84:	ldrne	r1, [pc, #516]	; 1f190 <grisu3_diy_fp_encode_double@@Base+0x4a8>
   1ef88:	beq	1ed24 <grisu3_diy_fp_encode_double@@Base+0x3c>
   1ef8c:	and	r2, r4, r0
   1ef90:	and	r3, r5, r1
   1ef94:	orrs	r3, r2, r3
   1ef98:	sub	lr, ip, #10
   1ef9c:	beq	1f0cc <grisu3_diy_fp_encode_double@@Base+0x3e4>
   1efa0:	cmp	r4, #0
   1efa4:	sbcs	r3, r5, #0
   1efa8:	mov	r6, ip
   1efac:	sub	ip, ip, #1
   1efb0:	bge	1f0e8 <grisu3_diy_fp_encode_double@@Base+0x400>
   1efb4:	ldr	r2, [pc, #512]	; 1f1bc <grisu3_diy_fp_encode_double@@Base+0x4d4>
   1efb8:	sub	sl, sl, r6
   1efbc:	add	r3, r6, #64	; 0x40
   1efc0:	cmp	r3, r2
   1efc4:	lsl	r7, fp, sl
   1efc8:	movge	r2, #64	; 0x40
   1efcc:	bge	1efe4 <grisu3_diy_fp_encode_double@@Base+0x2fc>
   1efd0:	mvn	r2, #1072	; 0x430
   1efd4:	cmp	r3, r2
   1efd8:	addge	r2, r6, #1136	; 0x470
   1efdc:	addge	r2, r2, #2
   1efe0:	movlt	r2, #0
   1efe4:	rsb	sl, r2, #64	; 0x40
   1efe8:	cmp	sl, #60	; 0x3c
   1efec:	ble	1f01c <grisu3_diy_fp_encode_double@@Base+0x334>
   1eff0:	rsb	r8, r2, #2
   1eff4:	mov	r0, r4
   1eff8:	mov	r1, r5
   1effc:	mov	r2, r8
   1f000:	bl	21bf8 <flatcc_json_parser_table_as_root@@Base+0x210>
   1f004:	asr	r7, r7, r8
   1f008:	add	r6, r6, r8
   1f00c:	add	r7, r7, #9
   1f010:	mov	sl, #62	; 0x3e
   1f014:	mov	r4, r0
   1f018:	mov	r5, r1
   1f01c:	mov	r2, sl
   1f020:	mov	r0, r4
   1f024:	mov	r1, r5
   1f028:	bl	21bf8 <flatcc_json_parser_table_as_root@@Base+0x210>
   1f02c:	sub	fp, sl, #1
   1f030:	mov	r2, fp
   1f034:	add	r6, sl, r6
   1f038:	mov	r8, r0
   1f03c:	mov	r9, r1
   1f040:	mov	r0, #1
   1f044:	mov	r1, #0
   1f048:	bl	21c14 <flatcc_json_parser_table_as_root@@Base+0x22c>
   1f04c:	mov	r2, fp
   1f050:	mov	r1, #0
   1f054:	and	r0, r0, r4
   1f058:	lsl	r3, r0, #3
   1f05c:	mov	r0, #8
   1f060:	str	r3, [sp]
   1f064:	bl	21c14 <flatcc_json_parser_table_as_root@@Base+0x22c>
   1f068:	add	r3, r7, r0
   1f06c:	cmp	sl, r3
   1f070:	blt	1f098 <grisu3_diy_fp_encode_double@@Base+0x3b0>
   1f074:	adds	r8, r8, #1
   1f078:	adc	r9, r9, #0
   1f07c:	mov	r4, #0
   1f080:	and	r5, r9, #2097152	; 0x200000
   1f084:	orrs	r2, r4, r5
   1f088:	beq	1f098 <grisu3_diy_fp_encode_double@@Base+0x3b0>
   1f08c:	lsrs	r9, r9, #1
   1f090:	rrx	r8, r8
   1f094:	add	r6, r6, #1
   1f098:	ldr	r5, [pc, #288]	; 1f1c0 <grisu3_diy_fp_encode_double@@Base+0x4d8>
   1f09c:	mvn	r4, #0
   1f0a0:	cmp	r9, r5
   1f0a4:	cmpeq	r8, r4
   1f0a8:	add	r2, r6, #1
   1f0ac:	bhi	1f0f4 <grisu3_diy_fp_encode_double@@Base+0x40c>
   1f0b0:	ldr	r2, [pc, #268]	; 1f1c4 <grisu3_diy_fp_encode_double@@Base+0x4dc>
   1f0b4:	cmp	r6, r2
   1f0b8:	movge	r1, r2
   1f0bc:	bge	1f10c <grisu3_diy_fp_encode_double@@Base+0x424>
   1f0c0:	mov	r8, #0
   1f0c4:	mov	r9, #0
   1f0c8:	b	1f154 <grisu3_diy_fp_encode_double@@Base+0x46c>
   1f0cc:	lsl	r3, r5, #10
   1f0d0:	orr	r3, r3, r4, lsr #22
   1f0d4:	lsl	r2, r4, #10
   1f0d8:	mov	r4, r2
   1f0dc:	mov	r5, r3
   1f0e0:	mov	ip, lr
   1f0e4:	b	1ef8c <grisu3_diy_fp_encode_double@@Base+0x2a4>
   1f0e8:	adds	r4, r4, r4
   1f0ec:	adc	r5, r5, r5
   1f0f0:	b	1efa0 <grisu3_diy_fp_encode_double@@Base+0x2b8>
   1f0f4:	lsrs	r9, r9, #1
   1f0f8:	rrx	r8, r8
   1f0fc:	mov	r6, r2
   1f100:	b	1f0a0 <grisu3_diy_fp_encode_double@@Base+0x3b8>
   1f104:	adds	r8, r8, r8
   1f108:	adc	r9, r9, r9
   1f10c:	cmp	r6, r1
   1f110:	mov	r2, r6
   1f114:	mov	r4, #0
   1f118:	and	r5, r9, #1048576	; 0x100000
   1f11c:	beq	1f184 <grisu3_diy_fp_encode_double@@Base+0x49c>
   1f120:	orrs	ip, r4, r5
   1f124:	sub	r6, r6, #1
   1f128:	beq	1f104 <grisu3_diy_fp_encode_double@@Base+0x41c>
   1f12c:	add	r4, r2, #1072	; 0x430
   1f130:	add	r4, r4, #3
   1f134:	ldr	fp, [pc, #140]	; 1f1c8 <grisu3_diy_fp_encode_double@@Base+0x4e0>
   1f138:	mvn	sl, #0
   1f13c:	and	r8, r8, sl
   1f140:	and	r9, r9, fp
   1f144:	mov	sl, #0
   1f148:	lsl	fp, r4, #20
   1f14c:	orr	r8, r8, sl
   1f150:	orr	r9, r9, fp
   1f154:	ldr	r2, [sp, #84]	; 0x54
   1f158:	sub	r0, r0, r7
   1f15c:	strd	r8, [r2]
   1f160:	ldr	r2, [sp]
   1f164:	cmp	r2, r3
   1f168:	movlt	r3, #0
   1f16c:	movge	r3, #1
   1f170:	cmp	r2, r0
   1f174:	movgt	r0, r3
   1f178:	orrle	r0, r3, #1
   1f17c:	add	sp, sp, #44	; 0x2c
   1f180:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f184:	orrs	r1, r4, r5
   1f188:	beq	1f134 <grisu3_diy_fp_encode_double@@Base+0x44c>
   1f18c:	b	1f12c <grisu3_diy_fp_encode_double@@Base+0x444>
   1f190:			; <UNDEFINED> instruction: 0xffc00000
   1f194:	strdeq	r2, [r2], -r0
   1f198:	andeq	r3, r2, sl, asr #17
   1f19c:	andeq	r3, r2, r1, lsr #18
   1f1a0:	andeq	r3, r2, r0, asr #18
   1f1a4:	ldrdeq	r2, [r2], -r8
   1f1a8:	andeq	r3, r2, fp, ror #18
   1f1ac:	andeq	r3, r2, sl, ror r9
   1f1b0:	andeq	r3, r2, r0, lsl #11
   1f1b4:	muleq	r2, r5, r9
   1f1b8:	andeq	r4, r3, r0, asr r3
   1f1bc:			; <UNDEFINED> instruction: 0xfffffc0e
   1f1c0:			; <UNDEFINED> instruction: 0x001fffff
   1f1c4:			; <UNDEFINED> instruction: 0xfffffbce
   1f1c8:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   1f1cc:	cmp	r1, #1000	; 0x3e8
   1f1d0:	addle	r1, r1, #1
   1f1d4:	addgt	r1, r0, #1000	; 0x3e8
   1f1d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f1dc:	mov	r3, #0
   1f1e0:	mov	r5, r2
   1f1e4:	addle	r1, r0, r1
   1f1e8:	mov	r2, #0
   1f1ec:	addgt	r1, r1, #1
   1f1f0:	cmp	r1, r0
   1f1f4:	sub	sp, sp, #36	; 0x24
   1f1f8:	mov	r4, r0
   1f1fc:	strd	r2, [r5]
   1f200:	beq	1f260 <grisu3_diy_fp_encode_double@@Base+0x578>
   1f204:	ldrb	r3, [r0]
   1f208:	cmp	r3, #45	; 0x2d
   1f20c:	movne	r3, r0
   1f210:	movne	r2, #0
   1f214:	bne	1f230 <grisu3_diy_fp_encode_double@@Base+0x548>
   1f218:	add	r3, r0, #1
   1f21c:	cmp	r1, r3
   1f220:	movne	r2, #1
   1f224:	bne	1f230 <grisu3_diy_fp_encode_double@@Base+0x548>
   1f228:	mov	r4, #0
   1f22c:	b	1f260 <grisu3_diy_fp_encode_double@@Base+0x578>
   1f230:	ldrb	r6, [r3]
   1f234:	str	r2, [sp, #12]
   1f238:	cmp	r6, #48	; 0x30
   1f23c:	bne	1f2cc <grisu3_diy_fp_encode_double@@Base+0x5e4>
   1f240:	add	lr, r3, #1
   1f244:	cmp	r1, lr
   1f248:	beq	1f498 <grisu3_diy_fp_encode_double@@Base+0x7b0>
   1f24c:	ldrb	r3, [r3, #1]
   1f250:	orr	r3, r3, #32
   1f254:	cmp	r3, #120	; 0x78
   1f258:	movne	r2, lr
   1f25c:	bne	1f278 <grisu3_diy_fp_encode_double@@Base+0x590>
   1f260:	mov	r0, r4
   1f264:	add	sp, sp, #36	; 0x24
   1f268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f26c:	cmp	r1, r2
   1f270:	mov	lr, r2
   1f274:	beq	1f498 <grisu3_diy_fp_encode_double@@Base+0x7b0>
   1f278:	mov	r3, r2
   1f27c:	add	r2, r2, #1
   1f280:	ldrb	r0, [r3]
   1f284:	cmp	r0, #48	; 0x30
   1f288:	beq	1f26c <grisu3_diy_fp_encode_double@@Base+0x584>
   1f28c:	mov	sl, #0
   1f290:	mov	fp, #0
   1f294:	add	r9, pc, #884	; 0x374
   1f298:	ldrd	r8, [r9]
   1f29c:	mov	r0, r3
   1f2a0:	mov	ip, #10
   1f2a4:	cmp	r1, r0
   1f2a8:	mov	lr, r0
   1f2ac:	beq	1f4ac <grisu3_diy_fp_encode_double@@Base+0x7c4>
   1f2b0:	ldrb	r2, [r0]
   1f2b4:	add	r0, r0, #1
   1f2b8:	sub	r6, r2, #48	; 0x30
   1f2bc:	cmp	r6, #9
   1f2c0:	bls	1f2fc <grisu3_diy_fp_encode_double@@Base+0x614>
   1f2c4:	mov	ip, #0
   1f2c8:	b	1f320 <grisu3_diy_fp_encode_double@@Base+0x638>
   1f2cc:	sub	r2, r6, #49	; 0x31
   1f2d0:	cmp	r2, #8
   1f2d4:	bls	1f2e8 <grisu3_diy_fp_encode_double@@Base+0x600>
   1f2d8:	ldr	r3, [sp, #12]
   1f2dc:	cmp	r3, #0
   1f2e0:	movne	r4, #0
   1f2e4:	b	1f260 <grisu3_diy_fp_encode_double@@Base+0x578>
   1f2e8:	sub	r6, r6, #48	; 0x30
   1f2ec:	add	r3, r3, #1
   1f2f0:	mov	sl, r6
   1f2f4:	asr	fp, r6, #31
   1f2f8:	b	1f294 <grisu3_diy_fp_encode_double@@Base+0x5ac>
   1f2fc:	cmp	fp, r9
   1f300:	cmpeq	sl, r8
   1f304:	bls	1f47c <grisu3_diy_fp_encode_double@@Base+0x794>
   1f308:	cmp	r2, #52	; 0x34
   1f30c:	movls	r2, #0
   1f310:	movhi	r2, #1
   1f314:	adds	sl, sl, r2
   1f318:	adc	fp, fp, #0
   1f31c:	mov	ip, #1
   1f320:	sub	r3, lr, r3
   1f324:	str	r3, [sp, #8]
   1f328:	mov	r3, lr
   1f32c:	cmp	r3, r1
   1f330:	mov	r7, r3
   1f334:	sub	r6, r3, lr
   1f338:	beq	1f4d4 <grisu3_diy_fp_encode_double@@Base+0x7ec>
   1f33c:	ldrb	r2, [r3], #1
   1f340:	cmp	r2, #48	; 0x30
   1f344:	beq	1f32c <grisu3_diy_fp_encode_double@@Base+0x644>
   1f348:	sub	r2, r2, #49	; 0x31
   1f34c:	cmp	r2, #8
   1f350:	bhi	1f380 <grisu3_diy_fp_encode_double@@Base+0x698>
   1f354:	mov	r2, r3
   1f358:	cmp	r2, r1
   1f35c:	mov	r7, r2
   1f360:	sub	r6, r2, lr
   1f364:	beq	1f5c8 <grisu3_diy_fp_encode_double@@Base+0x8e0>
   1f368:	ldrb	r3, [r7]
   1f36c:	add	r2, r2, #1
   1f370:	sub	r3, r3, #48	; 0x30
   1f374:	cmp	r3, #9
   1f378:	bls	1f358 <grisu3_diy_fp_encode_double@@Base+0x670>
   1f37c:	mov	ip, #1
   1f380:	ldrb	r3, [r7]
   1f384:	cmp	r3, #46	; 0x2e
   1f388:	bne	1f4d8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1f38c:	add	r3, r7, #1
   1f390:	str	r3, [sp, #16]
   1f394:	ldrb	r3, [r7, #1]
   1f398:	sub	r3, r3, #48	; 0x30
   1f39c:	cmp	r3, #9
   1f3a0:	bhi	1f228 <grisu3_diy_fp_encode_double@@Base+0x540>
   1f3a4:	add	r2, r6, #1
   1f3a8:	add	r3, r7, #1
   1f3ac:	mov	r6, #10
   1f3b0:	str	r2, [sp, #20]
   1f3b4:	ldr	r2, [sp, #20]
   1f3b8:	cmp	r3, r1
   1f3bc:	sub	r2, r2, r3
   1f3c0:	add	r2, r7, r2
   1f3c4:	beq	1f410 <grisu3_diy_fp_encode_double@@Base+0x728>
   1f3c8:	mov	lr, r3
   1f3cc:	ldrb	r0, [lr], #1
   1f3d0:	sub	r8, r0, #48	; 0x30
   1f3d4:	cmp	r8, #9
   1f3d8:	bhi	1f410 <grisu3_diy_fp_encode_double@@Base+0x728>
   1f3dc:	add	r9, pc, #556	; 0x22c
   1f3e0:	ldrd	r8, [r9]
   1f3e4:	cmp	fp, r9
   1f3e8:	cmpeq	sl, r8
   1f3ec:	bls	1f4b4 <grisu3_diy_fp_encode_double@@Base+0x7cc>
   1f3f0:	cmp	ip, #0
   1f3f4:	bne	1f410 <grisu3_diy_fp_encode_double@@Base+0x728>
   1f3f8:	cmp	r0, #52	; 0x34
   1f3fc:	movls	r0, #0
   1f400:	movhi	r0, #1
   1f404:	adds	sl, sl, r0
   1f408:	adc	fp, fp, #0
   1f40c:	mov	ip, #1
   1f410:	ldr	r0, [sp, #16]
   1f414:	ldr	lr, [sp, #8]
   1f418:	sub	r0, r3, r0
   1f41c:	sub	r2, r2, r3
   1f420:	add	r0, lr, r0
   1f424:	str	r0, [sp, #8]
   1f428:	cmp	r1, r3
   1f42c:	mov	r7, r3
   1f430:	add	r6, r2, r3
   1f434:	beq	1f4d4 <grisu3_diy_fp_encode_double@@Base+0x7ec>
   1f438:	ldrb	r0, [r3], #1
   1f43c:	cmp	r0, #48	; 0x30
   1f440:	beq	1f428 <grisu3_diy_fp_encode_double@@Base+0x740>
   1f444:	sub	r0, r0, #49	; 0x31
   1f448:	cmp	r0, #8
   1f44c:	bhi	1f4d8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1f450:	mov	r2, r3
   1f454:	cmp	r1, r2
   1f458:	mov	r7, r2
   1f45c:	beq	1f5c8 <grisu3_diy_fp_encode_double@@Base+0x8e0>
   1f460:	ldrb	r3, [r7]
   1f464:	add	r2, r2, #1
   1f468:	sub	r3, r3, #48	; 0x30
   1f46c:	cmp	r3, #9
   1f470:	bls	1f454 <grisu3_diy_fp_encode_double@@Base+0x76c>
   1f474:	mov	ip, #1
   1f478:	b	1f4d8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1f47c:	umull	r6, r7, sl, ip
   1f480:	mla	r7, ip, fp, r7
   1f484:	subs	r6, r6, #48	; 0x30
   1f488:	sbc	r7, r7, #0
   1f48c:	adds	sl, r6, r2
   1f490:	adc	fp, r7, #0
   1f494:	b	1f2a4 <grisu3_diy_fp_encode_double@@Base+0x5bc>
   1f498:	mov	r3, r1
   1f49c:	mov	ip, #0
   1f4a0:	mov	sl, #0
   1f4a4:	mov	fp, #0
   1f4a8:	b	1f320 <grisu3_diy_fp_encode_double@@Base+0x638>
   1f4ac:	mov	lr, r1
   1f4b0:	b	1f2c4 <grisu3_diy_fp_encode_double@@Base+0x5dc>
   1f4b4:	umull	r2, r3, sl, r6
   1f4b8:	mla	r3, r6, fp, r3
   1f4bc:	subs	sl, r2, #48	; 0x30
   1f4c0:	sbc	fp, r3, #0
   1f4c4:	adds	sl, sl, r0
   1f4c8:	adc	fp, fp, #0
   1f4cc:	mov	r3, lr
   1f4d0:	b	1f3b4 <grisu3_diy_fp_encode_double@@Base+0x6cc>
   1f4d4:	mov	r7, r1
   1f4d8:	ldr	r3, [sp, #8]
   1f4dc:	cmp	r7, r1
   1f4e0:	add	r3, r6, r3
   1f4e4:	mov	r8, r3
   1f4e8:	beq	1f604 <grisu3_diy_fp_encode_double@@Base+0x91c>
   1f4ec:	ldrb	r3, [r7]
   1f4f0:	orr	r3, r3, #32
   1f4f4:	cmp	r3, #101	; 0x65
   1f4f8:	bne	1f604 <grisu3_diy_fp_encode_double@@Base+0x91c>
   1f4fc:	sub	r3, r1, r7
   1f500:	cmp	r3, #1
   1f504:	ble	1f228 <grisu3_diy_fp_encode_double@@Base+0x540>
   1f508:	ldrb	r3, [r7, #1]
   1f50c:	cmp	r3, #43	; 0x2b
   1f510:	bne	1f5d0 <grisu3_diy_fp_encode_double@@Base+0x8e8>
   1f514:	add	r7, r7, #2
   1f518:	cmp	r1, r7
   1f51c:	beq	1f228 <grisu3_diy_fp_encode_double@@Base+0x540>
   1f520:	mov	lr, #0
   1f524:	ldrb	r6, [r7]
   1f528:	sub	r6, r6, #48	; 0x30
   1f52c:	uxtb	r3, r6
   1f530:	cmp	r3, #9
   1f534:	addls	r0, r7, #1
   1f538:	movls	r9, #10
   1f53c:	bhi	1f228 <grisu3_diy_fp_encode_double@@Base+0x540>
   1f540:	cmp	r1, r0
   1f544:	mov	r7, r0
   1f548:	beq	1f8e4 <grisu3_diy_fp_encode_double@@Base+0xbfc>
   1f54c:	ldrb	r2, [r0]
   1f550:	add	r0, r0, #1
   1f554:	sub	r3, r2, #48	; 0x30
   1f558:	cmp	r3, #9
   1f55c:	bls	1f5f0 <grisu3_diy_fp_encode_double@@Base+0x908>
   1f560:	cmp	lr, #0
   1f564:	beq	1f56c <grisu3_diy_fp_encode_double@@Base+0x884>
   1f568:	rsb	r6, r6, #0
   1f56c:	cmp	r1, r7
   1f570:	add	r6, r6, r8
   1f574:	beq	1f228 <grisu3_diy_fp_encode_double@@Base+0x540>
   1f578:	orrs	r3, sl, fp
   1f57c:	moveq	r2, #1
   1f580:	movne	r2, #0
   1f584:	cmn	r6, #324	; 0x144
   1f588:	movge	r3, #0
   1f58c:	movlt	r3, #1
   1f590:	orrs	r3, r2, r3
   1f594:	bne	1f5b0 <grisu3_diy_fp_encode_double@@Base+0x8c8>
   1f598:	ldr	r3, [pc, #120]	; 1f618 <grisu3_diy_fp_encode_double@@Base+0x930>
   1f59c:	cmp	r6, r3
   1f5a0:	ble	1f628 <grisu3_diy_fp_encode_double@@Base+0x940>
   1f5a4:	ldr	r3, [pc, #112]	; 1f61c <grisu3_diy_fp_encode_double@@Base+0x934>
   1f5a8:	mov	r2, #0
   1f5ac:	strd	r2, [r5]
   1f5b0:	ldr	r3, [sp, #12]
   1f5b4:	cmp	r3, #0
   1f5b8:	vldrne	d7, [r5]
   1f5bc:	vnegne.f64	d7, d7
   1f5c0:	vstrne	d7, [r5]
   1f5c4:	b	1f8dc <grisu3_diy_fp_encode_double@@Base+0xbf4>
   1f5c8:	mov	r7, r1
   1f5cc:	b	1f474 <grisu3_diy_fp_encode_double@@Base+0x78c>
   1f5d0:	cmp	r3, #45	; 0x2d
   1f5d4:	addne	r7, r7, #1
   1f5d8:	bne	1f520 <grisu3_diy_fp_encode_double@@Base+0x838>
   1f5dc:	add	r7, r7, #2
   1f5e0:	cmp	r1, r7
   1f5e4:	beq	1f228 <grisu3_diy_fp_encode_double@@Base+0x540>
   1f5e8:	mov	lr, #1
   1f5ec:	b	1f524 <grisu3_diy_fp_encode_double@@Base+0x83c>
   1f5f0:	ldr	r3, [pc, #40]	; 1f620 <grisu3_diy_fp_encode_double@@Base+0x938>
   1f5f4:	cmp	r6, r3
   1f5f8:	mlale	r6, r9, r6, r2
   1f5fc:	suble	r6, r6, #48	; 0x30
   1f600:	b	1f540 <grisu3_diy_fp_encode_double@@Base+0x858>
   1f604:	mov	r6, #0
   1f608:	b	1f56c <grisu3_diy_fp_encode_double@@Base+0x884>
   1f60c:	nop			; (mov r0, r0)
   1f610:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   1f614:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1f618:	andeq	r0, r0, r6, lsr r1
   1f61c:	svcvc	0x00f00000	; IMB
   1f620:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   1f624:			; <UNDEFINED> instruction: 0x001fffff
   1f628:	ldr	r3, [pc, #-12]	; 1f624 <grisu3_diy_fp_encode_double@@Base+0x93c>
   1f62c:	mvn	r2, #0
   1f630:	cmp	fp, r3
   1f634:	cmpeq	sl, r2
   1f638:	movls	r3, #1
   1f63c:	movhi	r3, #0
   1f640:	cmp	r6, #22
   1f644:	movhi	r3, #0
   1f648:	andls	r3, r3, #1
   1f64c:	cmp	r3, #0
   1f650:	beq	1f89c <grisu3_diy_fp_encode_double@@Base+0xbb4>
   1f654:	mov	r0, sl
   1f658:	mov	r1, fp
   1f65c:	bl	21f74 <flatcc_json_parser_table_as_root@@Base+0x58c>
   1f660:	ldr	r3, [sp, #8]
   1f664:	sub	r6, r6, r3
   1f668:	add	r6, r6, #22
   1f66c:	vmov	d7, r0, r1
   1f670:	cmp	r6, #44	; 0x2c
   1f674:	ldrls	pc, [pc, r6, lsl #2]
   1f678:	b	1f738 <grisu3_diy_fp_encode_double@@Base+0xa50>
   1f67c:	andeq	pc, r1, r0, lsr r7	; <UNPREDICTABLE>
   1f680:	andeq	pc, r1, r0, asr #14
   1f684:	andeq	pc, r1, r8, asr #14
   1f688:	andeq	pc, r1, r0, asr r7	; <UNPREDICTABLE>
   1f68c:	andeq	pc, r1, r8, asr r7	; <UNPREDICTABLE>
   1f690:	andeq	pc, r1, r0, ror #14
   1f694:	andeq	pc, r1, r8, ror #14
   1f698:	andeq	pc, r1, r0, ror r7	; <UNPREDICTABLE>
   1f69c:	andeq	pc, r1, r8, ror r7	; <UNPREDICTABLE>
   1f6a0:	andeq	pc, r1, r0, lsl #15
   1f6a4:	andeq	pc, r1, r8, lsl #15
   1f6a8:	muleq	r1, r0, r7
   1f6ac:	muleq	r1, r8, r7
   1f6b0:	andeq	pc, r1, r0, lsr #15
   1f6b4:	andeq	pc, r1, r8, lsr #15
   1f6b8:			; <UNDEFINED> instruction: 0x0001f7b0
   1f6bc:			; <UNDEFINED> instruction: 0x0001f7b8
   1f6c0:	andeq	pc, r1, r0, asr #15
   1f6c4:	andeq	pc, r1, r8, asr #15
   1f6c8:	ldrdeq	pc, [r1], -r0
   1f6cc:	ldrdeq	pc, [r1], -r8
   1f6d0:	andeq	pc, r1, r0, ror #15
   1f6d4:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f6d8:	andeq	pc, r1, r8, ror #15
   1f6dc:	strdeq	pc, [r1], -r4
   1f6e0:	strdeq	pc, [r1], -ip
   1f6e4:	andeq	pc, r1, r4, lsl #16
   1f6e8:	andeq	pc, r1, ip, lsl #16
   1f6ec:	andeq	pc, r1, r4, lsl r8	; <UNPREDICTABLE>
   1f6f0:	andeq	pc, r1, ip, lsl r8	; <UNPREDICTABLE>
   1f6f4:	andeq	pc, r1, r4, lsr #16
   1f6f8:	andeq	pc, r1, ip, lsr #16
   1f6fc:	andeq	pc, r1, r4, lsr r8	; <UNPREDICTABLE>
   1f700:	andeq	pc, r1, ip, lsr r8	; <UNPREDICTABLE>
   1f704:	andeq	pc, r1, r4, asr #16
   1f708:	andeq	pc, r1, ip, asr #16
   1f70c:	andeq	pc, r1, r4, asr r8	; <UNPREDICTABLE>
   1f710:	andeq	pc, r1, ip, asr r8	; <UNPREDICTABLE>
   1f714:	andeq	pc, r1, r4, ror #16
   1f718:	andeq	pc, r1, ip, ror #16
   1f71c:	andeq	pc, r1, r4, ror r8	; <UNPREDICTABLE>
   1f720:	andeq	pc, r1, ip, ror r8	; <UNPREDICTABLE>
   1f724:	andeq	pc, r1, r4, lsl #17
   1f728:	andeq	pc, r1, ip, lsl #17
   1f72c:	muleq	r1, r4, r8
   1f730:	vldr	d6, [pc, #448]	; 1f8f8 <grisu3_diy_fp_encode_double@@Base+0xc10>
   1f734:	vdiv.f64	d7, d7, d6
   1f738:	vstr	d7, [r5]
   1f73c:	b	1f5b0 <grisu3_diy_fp_encode_double@@Base+0x8c8>
   1f740:	vldr	d6, [pc, #440]	; 1f900 <grisu3_diy_fp_encode_double@@Base+0xc18>
   1f744:	b	1f734 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   1f748:	vldr	d6, [pc, #440]	; 1f908 <grisu3_diy_fp_encode_double@@Base+0xc20>
   1f74c:	b	1f734 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   1f750:	vldr	d6, [pc, #440]	; 1f910 <grisu3_diy_fp_encode_double@@Base+0xc28>
   1f754:	b	1f734 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   1f758:	vldr	d6, [pc, #440]	; 1f918 <grisu3_diy_fp_encode_double@@Base+0xc30>
   1f75c:	b	1f734 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   1f760:	vldr	d6, [pc, #440]	; 1f920 <grisu3_diy_fp_encode_double@@Base+0xc38>
   1f764:	b	1f734 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   1f768:	vldr	d6, [pc, #440]	; 1f928 <grisu3_diy_fp_encode_double@@Base+0xc40>
   1f76c:	b	1f734 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   1f770:	vldr	d6, [pc, #440]	; 1f930 <grisu3_diy_fp_encode_double@@Base+0xc48>
   1f774:	b	1f734 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   1f778:	vldr	d6, [pc, #440]	; 1f938 <grisu3_diy_fp_encode_double@@Base+0xc50>
   1f77c:	b	1f734 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   1f780:	vldr	d6, [pc, #440]	; 1f940 <grisu3_diy_fp_encode_double@@Base+0xc58>
   1f784:	b	1f734 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   1f788:	vldr	d6, [pc, #440]	; 1f948 <grisu3_diy_fp_encode_double@@Base+0xc60>
   1f78c:	b	1f734 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   1f790:	vldr	d6, [pc, #440]	; 1f950 <grisu3_diy_fp_encode_double@@Base+0xc68>
   1f794:	b	1f734 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   1f798:	vldr	d6, [pc, #440]	; 1f958 <grisu3_diy_fp_encode_double@@Base+0xc70>
   1f79c:	b	1f734 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   1f7a0:	vldr	d6, [pc, #440]	; 1f960 <grisu3_diy_fp_encode_double@@Base+0xc78>
   1f7a4:	b	1f734 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   1f7a8:	vldr	d6, [pc, #440]	; 1f968 <grisu3_diy_fp_encode_double@@Base+0xc80>
   1f7ac:	b	1f734 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   1f7b0:	vldr	d6, [pc, #440]	; 1f970 <grisu3_diy_fp_encode_double@@Base+0xc88>
   1f7b4:	b	1f734 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   1f7b8:	vldr	d6, [pc, #440]	; 1f978 <grisu3_diy_fp_encode_double@@Base+0xc90>
   1f7bc:	b	1f734 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   1f7c0:	vldr	d6, [pc, #440]	; 1f980 <grisu3_diy_fp_encode_double@@Base+0xc98>
   1f7c4:	b	1f734 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   1f7c8:	vldr	d6, [pc, #440]	; 1f988 <grisu3_diy_fp_encode_double@@Base+0xca0>
   1f7cc:	b	1f734 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   1f7d0:	vldr	d6, [pc, #440]	; 1f990 <grisu3_diy_fp_encode_double@@Base+0xca8>
   1f7d4:	b	1f734 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   1f7d8:	vldr	d6, [pc, #440]	; 1f998 <grisu3_diy_fp_encode_double@@Base+0xcb0>
   1f7dc:	b	1f734 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   1f7e0:	vldr	d6, [pc, #440]	; 1f9a0 <grisu3_diy_fp_encode_double@@Base+0xcb8>
   1f7e4:	b	1f734 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   1f7e8:	vldr	d6, [pc, #432]	; 1f9a0 <grisu3_diy_fp_encode_double@@Base+0xcb8>
   1f7ec:	vmul.f64	d7, d7, d6
   1f7f0:	b	1f738 <grisu3_diy_fp_encode_double@@Base+0xa50>
   1f7f4:	vldr	d6, [pc, #412]	; 1f998 <grisu3_diy_fp_encode_double@@Base+0xcb0>
   1f7f8:	b	1f7ec <grisu3_diy_fp_encode_double@@Base+0xb04>
   1f7fc:	vldr	d6, [pc, #396]	; 1f990 <grisu3_diy_fp_encode_double@@Base+0xca8>
   1f800:	b	1f7ec <grisu3_diy_fp_encode_double@@Base+0xb04>
   1f804:	vldr	d6, [pc, #380]	; 1f988 <grisu3_diy_fp_encode_double@@Base+0xca0>
   1f808:	b	1f7ec <grisu3_diy_fp_encode_double@@Base+0xb04>
   1f80c:	vldr	d6, [pc, #364]	; 1f980 <grisu3_diy_fp_encode_double@@Base+0xc98>
   1f810:	b	1f7ec <grisu3_diy_fp_encode_double@@Base+0xb04>
   1f814:	vldr	d6, [pc, #348]	; 1f978 <grisu3_diy_fp_encode_double@@Base+0xc90>
   1f818:	b	1f7ec <grisu3_diy_fp_encode_double@@Base+0xb04>
   1f81c:	vldr	d6, [pc, #332]	; 1f970 <grisu3_diy_fp_encode_double@@Base+0xc88>
   1f820:	b	1f7ec <grisu3_diy_fp_encode_double@@Base+0xb04>
   1f824:	vldr	d6, [pc, #316]	; 1f968 <grisu3_diy_fp_encode_double@@Base+0xc80>
   1f828:	b	1f7ec <grisu3_diy_fp_encode_double@@Base+0xb04>
   1f82c:	vldr	d6, [pc, #300]	; 1f960 <grisu3_diy_fp_encode_double@@Base+0xc78>
   1f830:	b	1f7ec <grisu3_diy_fp_encode_double@@Base+0xb04>
   1f834:	vldr	d6, [pc, #284]	; 1f958 <grisu3_diy_fp_encode_double@@Base+0xc70>
   1f838:	b	1f7ec <grisu3_diy_fp_encode_double@@Base+0xb04>
   1f83c:	vldr	d6, [pc, #268]	; 1f950 <grisu3_diy_fp_encode_double@@Base+0xc68>
   1f840:	b	1f7ec <grisu3_diy_fp_encode_double@@Base+0xb04>
   1f844:	vldr	d6, [pc, #252]	; 1f948 <grisu3_diy_fp_encode_double@@Base+0xc60>
   1f848:	b	1f7ec <grisu3_diy_fp_encode_double@@Base+0xb04>
   1f84c:	vldr	d6, [pc, #236]	; 1f940 <grisu3_diy_fp_encode_double@@Base+0xc58>
   1f850:	b	1f7ec <grisu3_diy_fp_encode_double@@Base+0xb04>
   1f854:	vldr	d6, [pc, #220]	; 1f938 <grisu3_diy_fp_encode_double@@Base+0xc50>
   1f858:	b	1f7ec <grisu3_diy_fp_encode_double@@Base+0xb04>
   1f85c:	vldr	d6, [pc, #204]	; 1f930 <grisu3_diy_fp_encode_double@@Base+0xc48>
   1f860:	b	1f7ec <grisu3_diy_fp_encode_double@@Base+0xb04>
   1f864:	vldr	d6, [pc, #188]	; 1f928 <grisu3_diy_fp_encode_double@@Base+0xc40>
   1f868:	b	1f7ec <grisu3_diy_fp_encode_double@@Base+0xb04>
   1f86c:	vldr	d6, [pc, #172]	; 1f920 <grisu3_diy_fp_encode_double@@Base+0xc38>
   1f870:	b	1f7ec <grisu3_diy_fp_encode_double@@Base+0xb04>
   1f874:	vldr	d6, [pc, #156]	; 1f918 <grisu3_diy_fp_encode_double@@Base+0xc30>
   1f878:	b	1f7ec <grisu3_diy_fp_encode_double@@Base+0xb04>
   1f87c:	vldr	d6, [pc, #140]	; 1f910 <grisu3_diy_fp_encode_double@@Base+0xc28>
   1f880:	b	1f7ec <grisu3_diy_fp_encode_double@@Base+0xb04>
   1f884:	vldr	d6, [pc, #124]	; 1f908 <grisu3_diy_fp_encode_double@@Base+0xc20>
   1f888:	b	1f7ec <grisu3_diy_fp_encode_double@@Base+0xb04>
   1f88c:	vldr	d6, [pc, #108]	; 1f900 <grisu3_diy_fp_encode_double@@Base+0xc18>
   1f890:	b	1f7ec <grisu3_diy_fp_encode_double@@Base+0xb04>
   1f894:	vldr	d6, [pc, #92]	; 1f8f8 <grisu3_diy_fp_encode_double@@Base+0xc10>
   1f898:	b	1f7ec <grisu3_diy_fp_encode_double@@Base+0xb04>
   1f89c:	str	r5, [sp, #4]
   1f8a0:	str	ip, [sp]
   1f8a4:	ldr	r3, [sp, #8]
   1f8a8:	mov	r2, r6
   1f8ac:	mov	r0, sl
   1f8b0:	mov	r1, fp
   1f8b4:	bl	1ece8 <grisu3_diy_fp_encode_double@@Base>
   1f8b8:	cmp	r0, #0
   1f8bc:	bne	1f5b0 <grisu3_diy_fp_encode_double@@Base+0x8c8>
   1f8c0:	add	r1, sp, #28
   1f8c4:	mov	r0, r4
   1f8c8:	bl	12684 <strtod@plt>
   1f8cc:	ldr	r3, [sp, #28]
   1f8d0:	cmp	r7, r3
   1f8d4:	movcs	r7, r3
   1f8d8:	vstr	d0, [r5]
   1f8dc:	mov	r4, r7
   1f8e0:	b	1f260 <grisu3_diy_fp_encode_double@@Base+0x578>
   1f8e4:	cmp	lr, #0
   1f8e8:	bne	1f568 <grisu3_diy_fp_encode_double@@Base+0x880>
   1f8ec:	mov	r4, lr
   1f8f0:	b	1f260 <grisu3_diy_fp_encode_double@@Base+0x578>
   1f8f4:	nop			; (mov r0, r0)
   1f8f8:			; <UNDEFINED> instruction: 0x064dd592
   1f8fc:	strmi	pc, [r0], #207	; 0xcf
   1f900:	usatle	lr, #2, r0, asr #30
   1f904:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   1f908:	ldmvc	r5!, {r6, sl, fp, pc}
   1f90c:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   1f910:	addsvs	r3, r1, r0, lsl #26
   1f914:	mvnmi	r5, #228, 16	; 0xe40000
   1f918:	strbvs	ip, [lr, -r0, lsl #16]
   1f91c:			; <UNDEFINED> instruction: 0x43abc16d
   1f920:	ldrbhi	sl, [r8]
   1f924:	cmnmi	r6, #1459617792	; 0x57000000
   1f928:	strbcc	r8, [r0, r0]!
   1f92c:	movtmi	ip, #4985	; 0x1379
   1f930:	ldrtcs	r0, [r4], -r0
   1f934:	movwmi	r6, #52213	; 0xcbf5
   1f938:	cdpne	0, 9, cr0, cr0, cr0, {0}
   1f93c:	sbcsmi	fp, r6, #196, 24	; 0xc400
   1f940:	strb	r0, [r0, #-0]
   1f944:	adcmi	r3, r2, #156	; 0x9c
   1f948:	andge	r0, r0, #0
   1f94c:	rsbmi	r1, sp, #148, 20	; 0x94000
   1f950:	stmda	r0, {}	; <UNPREDICTABLE>
   1f954:	eorsmi	r4, r7, #7733248	; 0x760000
   1f958:	andcs	r0, r0, r0
   1f95c:	andmi	sl, r2, #95	; 0x5f
   1f960:	andeq	r0, r0, r0
   1f964:	bicmi	ip, sp, r5, ror #26
   1f968:	andeq	r0, r0, r0
   1f96c:	orrsmi	sp, r7, r4, lsl #15
   1f970:	andeq	r0, r0, r0
   1f974:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   1f978:	andeq	r0, r0, r0
   1f97c:	smlawbmi	lr, r0, r4, r8
   1f980:	andeq	r0, r0, r0
   1f984:	rscsmi	r6, r8, r0, lsl #20
   1f988:	andeq	r0, r0, r0
   1f98c:	sbcmi	r8, r3, r0, lsl #16
   1f990:	andeq	r0, r0, r0
   1f994:	addmi	r4, pc, r0
   1f998:	andeq	r0, r0, r0
   1f99c:	subsmi	r0, r9, r0
   1f9a0:	andeq	r0, r0, r0
   1f9a4:	eormi	r0, r4, r0

0001f9a8 <flatcc_json_parser_error_string@@Base>:
   1f9a8:	cmp	r0, #34	; 0x22
   1f9ac:	ldrls	r3, [pc, #12]	; 1f9c0 <flatcc_json_parser_error_string@@Base+0x18>
   1f9b0:	addls	r0, r3, r0, lsl #2
   1f9b4:	ldrls	r0, [r0, #1476]	; 0x5c4
   1f9b8:	ldrhi	r0, [pc, #4]	; 1f9c4 <flatcc_json_parser_error_string@@Base+0x1c>
   1f9bc:	bx	lr
   1f9c0:	ldrdeq	r2, [r2], -r8
   1f9c4:			; <UNDEFINED> instruction: 0x000239b1

0001f9c8 <flatcc_json_parser_set_error@@Base>:
   1f9c8:	ldr	ip, [r0, #24]
   1f9cc:	cmp	ip, #0
   1f9d0:	streq	r3, [r0, #24]
   1f9d4:	ldreq	r3, [r0, #4]
   1f9d8:	streq	r1, [r0, #36]	; 0x24
   1f9dc:	subeq	r3, r1, r3
   1f9e0:	addeq	r3, r3, #1
   1f9e4:	streq	r3, [r0, #20]
   1f9e8:	mov	r0, r2
   1f9ec:	bx	lr
   1f9f0:	ldr	r3, [r0, #12]
   1f9f4:	cmp	r3, #0
   1f9f8:	beq	1fa94 <flatcc_json_parser_set_error@@Base+0xcc>
   1f9fc:	push	{lr}		; (str lr, [sp, #-4]!)
   1fa00:	mov	r3, r1
   1fa04:	mov	lr, #0
   1fa08:	cmp	r2, r3
   1fa0c:	mov	r1, r3
   1fa10:	beq	1fa24 <flatcc_json_parser_set_error@@Base+0x5c>
   1fa14:	ldrb	ip, [r3]
   1fa18:	add	r3, r3, #1
   1fa1c:	cmp	ip, #32
   1fa20:	bhi	1fa38 <flatcc_json_parser_set_error@@Base+0x70>
   1fa24:	cmp	lr, #46	; 0x2e
   1fa28:	bne	1fabc <flatcc_json_parser_set_error@@Base+0xf4>
   1fa2c:	pop	{lr}		; (ldr lr, [sp], #4)
   1fa30:	mov	r3, #5
   1fa34:	b	1f9c8 <flatcc_json_parser_set_error@@Base>
   1fa38:	cmp	ip, #46	; 0x2e
   1fa3c:	cmpne	ip, #95	; 0x5f
   1fa40:	beq	1fa68 <flatcc_json_parser_set_error@@Base+0xa0>
   1fa44:	tst	ip, #128	; 0x80
   1fa48:	bne	1fa68 <flatcc_json_parser_set_error@@Base+0xa0>
   1fa4c:	sub	lr, ip, #48	; 0x30
   1fa50:	cmp	lr, #9
   1fa54:	bls	1fa68 <flatcc_json_parser_set_error@@Base+0xa0>
   1fa58:	orr	lr, ip, #32
   1fa5c:	sub	lr, lr, #97	; 0x61
   1fa60:	cmp	lr, #25
   1fa64:	bhi	1fa70 <flatcc_json_parser_set_error@@Base+0xa8>
   1fa68:	mov	lr, ip
   1fa6c:	b	1fa08 <flatcc_json_parser_set_error@@Base+0x40>
   1fa70:	mov	lr, ip
   1fa74:	b	1fa24 <flatcc_json_parser_set_error@@Base+0x5c>
   1fa78:	cmp	r3, #92	; 0x5c
   1fa7c:	bne	1fa90 <flatcc_json_parser_set_error@@Base+0xc8>
   1fa80:	sub	r3, r2, r1
   1fa84:	cmp	r3, #1
   1fa88:	ble	1fab4 <flatcc_json_parser_set_error@@Base+0xec>
   1fa8c:	add	r1, r1, #1
   1fa90:	add	r1, r1, #1
   1fa94:	cmp	r1, r2
   1fa98:	beq	1fab4 <flatcc_json_parser_set_error@@Base+0xec>
   1fa9c:	ldrb	r3, [r1]
   1faa0:	cmp	r3, #34	; 0x22
   1faa4:	bne	1fa78 <flatcc_json_parser_set_error@@Base+0xb0>
   1faa8:	add	r1, r1, #1
   1faac:	mov	r0, r1
   1fab0:	bx	lr
   1fab4:	mov	r3, #20
   1fab8:	b	1fa34 <flatcc_json_parser_set_error@@Base+0x6c>
   1fabc:	mov	r0, r1
   1fac0:	pop	{pc}		; (ldr pc, [sp], #4)
   1fac4:	cmp	r1, r2
   1fac8:	beq	1fad8 <flatcc_json_parser_set_error@@Base+0x110>
   1facc:	ldrb	r3, [r1]
   1fad0:	cmp	r3, #34	; 0x22
   1fad4:	beq	1fae0 <flatcc_json_parser_set_error@@Base+0x118>
   1fad8:	mov	r3, #16
   1fadc:	b	1f9c8 <flatcc_json_parser_set_error@@Base>
   1fae0:	add	r0, r1, #1
   1fae4:	bx	lr
   1fae8:	cmp	r1, r2
   1faec:	beq	1fafc <flatcc_json_parser_set_error@@Base+0x134>
   1faf0:	ldrb	r3, [r1]
   1faf4:	cmp	r3, #34	; 0x22
   1faf8:	beq	1fb04 <flatcc_json_parser_set_error@@Base+0x13c>
   1fafc:	mov	r3, #20
   1fb00:	b	1f9c8 <flatcc_json_parser_set_error@@Base>
   1fb04:	add	r0, r1, #1
   1fb08:	bx	lr

0001fb0c <flatcc_json_parser_string_part@@Base>:
   1fb0c:	cmp	r2, r1
   1fb10:	beq	1fb7c <flatcc_json_parser_string_part@@Base+0x70>
   1fb14:	push	{lr}		; (str lr, [sp, #-4]!)
   1fb18:	b	1fb24 <flatcc_json_parser_string_part@@Base+0x18>
   1fb1c:	cmp	r2, r1
   1fb20:	beq	1fb70 <flatcc_json_parser_string_part@@Base+0x64>
   1fb24:	mov	lr, r1
   1fb28:	ldrb	r3, [r1], #1
   1fb2c:	cmp	r3, #34	; 0x22
   1fb30:	cmpne	r3, #31
   1fb34:	movhi	ip, #1
   1fb38:	movls	ip, #0
   1fb3c:	cmp	r3, #92	; 0x5c
   1fb40:	moveq	ip, #0
   1fb44:	andne	ip, ip, #1
   1fb48:	cmp	ip, #0
   1fb4c:	bne	1fb1c <flatcc_json_parser_string_part@@Base+0x10>
   1fb50:	cmp	r3, #31
   1fb54:	bls	1fb60 <flatcc_json_parser_string_part@@Base+0x54>
   1fb58:	mov	r0, lr
   1fb5c:	pop	{pc}		; (ldr pc, [sp], #4)
   1fb60:	mov	r3, #17
   1fb64:	mov	r1, lr
   1fb68:	pop	{lr}		; (ldr lr, [sp], #4)
   1fb6c:	b	1f9c8 <flatcc_json_parser_set_error@@Base>
   1fb70:	mov	r3, #20
   1fb74:	mov	r1, r2
   1fb78:	b	1fb68 <flatcc_json_parser_string_part@@Base+0x5c>
   1fb7c:	mov	r3, #20
   1fb80:	mov	r1, r2
   1fb84:	b	1fb6c <flatcc_json_parser_string_part@@Base+0x60>

0001fb88 <flatcc_json_parser_space_ext@@Base>:
   1fb88:	cmp	r1, r2
   1fb8c:	mov	ip, #0
   1fb90:	mov	r3, r1
   1fb94:	bne	1fc14 <flatcc_json_parser_space_ext@@Base+0x8c>
   1fb98:	mov	r0, r2
   1fb9c:	bx	lr
   1fba0:	cmp	r3, #13
   1fba4:	beq	1fbcc <flatcc_json_parser_space_ext@@Base+0x44>
   1fba8:	cmp	r3, #32
   1fbac:	bne	1fc48 <flatcc_json_parser_space_ext@@Base+0xc0>
   1fbb0:	mov	r3, r1
   1fbb4:	cmp	r3, r2
   1fbb8:	mov	r1, r3
   1fbbc:	bne	1fc18 <flatcc_json_parser_space_ext@@Base+0x90>
   1fbc0:	mov	r1, r2
   1fbc4:	mov	r0, r1
   1fbc8:	pop	{pc}		; (ldr pc, [sp], #4)
   1fbcc:	sub	r3, r2, r1
   1fbd0:	cmp	r3, #1
   1fbd4:	movle	r3, ip
   1fbd8:	ldrbgt	r3, [r1, #1]
   1fbdc:	subgt	r3, r3, #10
   1fbe0:	clzgt	r3, r3
   1fbe4:	lsrgt	r3, r3, #5
   1fbe8:	add	r1, r1, r3
   1fbec:	ldr	r3, [r0, #16]
   1fbf0:	add	r1, r1, #1
   1fbf4:	add	r3, r3, #1
   1fbf8:	str	r3, [r0, #16]
   1fbfc:	str	r1, [r0, #4]
   1fc00:	cmp	r2, r1
   1fc04:	bne	1fc28 <flatcc_json_parser_space_ext@@Base+0xa0>
   1fc08:	b	1fbc0 <flatcc_json_parser_space_ext@@Base+0x38>
   1fc0c:	add	r1, r1, #1
   1fc10:	b	1fc00 <flatcc_json_parser_space_ext@@Base+0x78>
   1fc14:	push	{lr}		; (str lr, [sp, #-4]!)
   1fc18:	add	r3, r3, #1
   1fc1c:	ldrb	lr, [r1]
   1fc20:	cmp	lr, #32
   1fc24:	beq	1fbb4 <flatcc_json_parser_space_ext@@Base+0x2c>
   1fc28:	ldrb	r3, [r1]
   1fc2c:	cmp	r3, #32
   1fc30:	bhi	1fbc4 <flatcc_json_parser_space_ext@@Base+0x3c>
   1fc34:	cmp	r3, #10
   1fc38:	beq	1fbec <flatcc_json_parser_space_ext@@Base+0x64>
   1fc3c:	bhi	1fba0 <flatcc_json_parser_space_ext@@Base+0x18>
   1fc40:	cmp	r3, #9
   1fc44:	beq	1fc0c <flatcc_json_parser_space_ext@@Base+0x84>
   1fc48:	mov	r3, #5
   1fc4c:	pop	{lr}		; (ldr lr, [sp], #4)
   1fc50:	b	1f9c8 <flatcc_json_parser_set_error@@Base>
   1fc54:	sub	r3, r2, r1
   1fc58:	cmp	r3, #1
   1fc5c:	ble	1fc80 <flatcc_json_parser_space_ext@@Base+0xf8>
   1fc60:	ldrb	r3, [r1]
   1fc64:	cmp	r3, #32
   1fc68:	bhi	1fc84 <flatcc_json_parser_space_ext@@Base+0xfc>
   1fc6c:	bne	1fc80 <flatcc_json_parser_space_ext@@Base+0xf8>
   1fc70:	ldrb	r3, [r1, #1]
   1fc74:	cmp	r3, #32
   1fc78:	addhi	r1, r1, #1
   1fc7c:	bhi	1fc84 <flatcc_json_parser_space_ext@@Base+0xfc>
   1fc80:	b	1fb88 <flatcc_json_parser_space_ext@@Base>
   1fc84:	mov	r0, r1
   1fc88:	bx	lr
   1fc8c:	push	{r4, r5, r6, lr}
   1fc90:	mov	r5, r3
   1fc94:	mov	r6, r0
   1fc98:	bl	1fc54 <flatcc_json_parser_space_ext@@Base+0xcc>
   1fc9c:	cmp	r2, r0
   1fca0:	moveq	r3, #0
   1fca4:	beq	1fd30 <flatcc_json_parser_space_ext@@Base+0x1a8>
   1fca8:	ldrb	r3, [r0]
   1fcac:	mov	r4, r2
   1fcb0:	cmp	r3, #44	; 0x2c
   1fcb4:	beq	1fce8 <flatcc_json_parser_space_ext@@Base+0x160>
   1fcb8:	mov	r3, #0
   1fcbc:	str	r3, [r5]
   1fcc0:	ldrb	r3, [r0]
   1fcc4:	cmp	r3, #93	; 0x5d
   1fcc8:	movne	r3, #9
   1fccc:	movne	r1, r0
   1fcd0:	bne	1fd0c <flatcc_json_parser_space_ext@@Base+0x184>
   1fcd4:	mov	r2, r4
   1fcd8:	add	r1, r0, #1
   1fcdc:	mov	r0, r6
   1fce0:	pop	{r4, r5, r6, lr}
   1fce4:	b	1fc54 <flatcc_json_parser_space_ext@@Base+0xcc>
   1fce8:	add	r1, r0, #1
   1fcec:	mov	r0, r6
   1fcf0:	bl	1fc54 <flatcc_json_parser_space_ext@@Base+0xcc>
   1fcf4:	cmp	r2, r0
   1fcf8:	bne	1fd18 <flatcc_json_parser_space_ext@@Base+0x190>
   1fcfc:	mov	r3, #0
   1fd00:	str	r3, [r5]
   1fd04:	mov	r1, r2
   1fd08:	mov	r3, #9
   1fd0c:	mov	r0, r6
   1fd10:	pop	{r4, r5, r6, lr}
   1fd14:	b	1f9c8 <flatcc_json_parser_set_error@@Base>
   1fd18:	ldrb	r3, [r0]
   1fd1c:	cmp	r3, #93	; 0x5d
   1fd20:	movne	r3, #1
   1fd24:	moveq	r3, #0
   1fd28:	streq	r3, [r5]
   1fd2c:	beq	1fcd4 <flatcc_json_parser_space_ext@@Base+0x14c>
   1fd30:	str	r3, [r5]
   1fd34:	pop	{r4, r5, r6, pc}
   1fd38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd3c:	sub	sp, sp, #28
   1fd40:	mov	fp, r3
   1fd44:	ldr	r3, [sp, #64]	; 0x40
   1fd48:	mov	ip, #0
   1fd4c:	cmp	r1, r2
   1fd50:	mov	r6, r0
   1fd54:	mov	r5, r1
   1fd58:	mov	r4, r2
   1fd5c:	strb	ip, [r3]
   1fd60:	beq	1fd94 <flatcc_json_parser_space_ext@@Base+0x20c>
   1fd64:	ldrb	r3, [r1]
   1fd68:	cmp	r3, #34	; 0x22
   1fd6c:	addeq	r5, r1, #1
   1fd70:	streq	ip, [r0, #12]
   1fd74:	beq	1fd94 <flatcc_json_parser_space_ext@@Base+0x20c>
   1fd78:	cmp	r3, #46	; 0x2e
   1fd7c:	movne	r3, #1
   1fd80:	strne	r3, [r0, #12]
   1fd84:	bne	1fd94 <flatcc_json_parser_space_ext@@Base+0x20c>
   1fd88:	mov	r3, #5
   1fd8c:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   1fd90:	mov	r5, r0
   1fd94:	ldr	r3, [r6, #12]
   1fd98:	cmp	r3, #0
   1fd9c:	bne	1fdb4 <flatcc_json_parser_space_ext@@Base+0x22c>
   1fda0:	mov	r1, r5
   1fda4:	mov	r2, r4
   1fda8:	mov	r0, r6
   1fdac:	bl	1fc54 <flatcc_json_parser_space_ext@@Base+0xcc>
   1fdb0:	mov	r5, r0
   1fdb4:	cmp	r4, r5
   1fdb8:	movne	r8, #0
   1fdbc:	movne	sl, r8
   1fdc0:	bne	1fdd4 <flatcc_json_parser_space_ext@@Base+0x24c>
   1fdc4:	mov	r0, r4
   1fdc8:	add	sp, sp, #28
   1fdcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fdd0:	mov	r5, r7
   1fdd4:	mov	r9, fp
   1fdd8:	add	r3, sp, #12
   1fddc:	str	r3, [sp, #4]
   1fde0:	add	r3, sp, #16
   1fde4:	str	r3, [sp]
   1fde8:	mov	r2, r4
   1fdec:	ldr	r7, [r9]
   1fdf0:	add	r3, sp, #8
   1fdf4:	mov	r1, r5
   1fdf8:	mov	r0, r6
   1fdfc:	blx	r7
   1fe00:	cmp	r4, r0
   1fe04:	mov	r7, r0
   1fe08:	beq	1fdc4 <flatcc_json_parser_space_ext@@Base+0x23c>
   1fe0c:	cmp	r5, r0
   1fe10:	bne	1fe58 <flatcc_json_parser_space_ext@@Base+0x2d0>
   1fe14:	ldr	r3, [r9, #4]!
   1fe18:	cmp	r3, #0
   1fe1c:	bne	1fdd8 <flatcc_json_parser_space_ext@@Base+0x250>
   1fe20:	mov	r3, #23
   1fe24:	mov	r2, r4
   1fe28:	mov	r1, r5
   1fe2c:	b	1fe48 <flatcc_json_parser_space_ext@@Base+0x2c0>
   1fe30:	ldr	r3, [r6, #12]
   1fe34:	cmp	r3, #0
   1fe38:	beq	1fe60 <flatcc_json_parser_space_ext@@Base+0x2d8>
   1fe3c:	mov	r3, #14
   1fe40:	mov	r2, r4
   1fe44:	mov	r1, r7
   1fe48:	mov	r0, r6
   1fe4c:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   1fe50:	mov	r4, r0
   1fe54:	b	1fdc4 <flatcc_json_parser_space_ext@@Base+0x23c>
   1fe58:	cmp	r8, #0
   1fe5c:	bne	1fe30 <flatcc_json_parser_space_ext@@Base+0x2a8>
   1fe60:	ldr	r3, [sp, #8]
   1fe64:	cmp	r3, #0
   1fe68:	movne	r3, #8
   1fe6c:	bne	1fe88 <flatcc_json_parser_space_ext@@Base+0x300>
   1fe70:	ldrd	r2, [sp, #16]
   1fe74:	cmp	r3, #0
   1fe78:	cmpeq	r2, #255	; 0xff
   1fe7c:	uxtbls	sl, r2
   1fe80:	bls	1fea0 <flatcc_json_parser_space_ext@@Base+0x318>
   1fe84:	mov	r3, #7
   1fe88:	mov	r2, r4
   1fe8c:	mov	r1, r7
   1fe90:	mov	r0, r6
   1fe94:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   1fe98:	cmp	r4, r0
   1fe9c:	beq	1fdc4 <flatcc_json_parser_space_ext@@Base+0x23c>
   1fea0:	ldr	r3, [sp, #64]	; 0x40
   1fea4:	ldr	r2, [sp, #64]	; 0x40
   1fea8:	add	r8, r8, #1
   1feac:	ldrb	r3, [r3]
   1feb0:	add	r3, sl, r3
   1feb4:	strb	r3, [r2]
   1feb8:	ldr	r3, [sp, #12]
   1febc:	cmp	r3, #0
   1fec0:	bne	1fdd0 <flatcc_json_parser_space_ext@@Base+0x248>
   1fec4:	mov	r4, r7
   1fec8:	b	1fdc4 <flatcc_json_parser_space_ext@@Base+0x23c>
   1fecc:	cmp	r1, r2
   1fed0:	push	{r4, r5, r6, lr}
   1fed4:	mov	ip, r2
   1fed8:	mov	r6, r0
   1fedc:	beq	1feec <flatcc_json_parser_space_ext@@Base+0x364>
   1fee0:	ldrb	r4, [r1]
   1fee4:	cmp	r4, #91	; 0x5b
   1fee8:	beq	1ff08 <flatcc_json_parser_space_ext@@Base+0x380>
   1feec:	mov	r2, #0
   1fef0:	str	r2, [r3]
   1fef4:	mov	r0, r6
   1fef8:	mov	r3, #22
   1fefc:	mov	r2, ip
   1ff00:	pop	{r4, r5, r6, lr}
   1ff04:	b	1f9c8 <flatcc_json_parser_set_error@@Base>
   1ff08:	add	r1, r1, #1
   1ff0c:	mov	r5, r3
   1ff10:	mov	r4, r2
   1ff14:	bl	1fc54 <flatcc_json_parser_space_ext@@Base+0xcc>
   1ff18:	cmp	r2, r0
   1ff1c:	beq	1ff44 <flatcc_json_parser_space_ext@@Base+0x3bc>
   1ff20:	ldrb	r3, [r0]
   1ff24:	cmp	r3, #93	; 0x5d
   1ff28:	bne	1ff44 <flatcc_json_parser_space_ext@@Base+0x3bc>
   1ff2c:	mov	r3, #0
   1ff30:	str	r3, [r5]
   1ff34:	add	r1, r0, #1
   1ff38:	mov	r0, r6
   1ff3c:	pop	{r4, r5, r6, lr}
   1ff40:	b	1fc54 <flatcc_json_parser_space_ext@@Base+0xcc>
   1ff44:	mov	r3, #1
   1ff48:	str	r3, [r5]
   1ff4c:	pop	{r4, r5, r6, pc}
   1ff50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff54:	sub	sp, sp, #20
   1ff58:	mov	r5, r0
   1ff5c:	mov	r8, r3
   1ff60:	ldr	r0, [r0]
   1ff64:	mov	r3, #0
   1ff68:	mov	r6, r1
   1ff6c:	mov	r4, r2
   1ff70:	ldr	r9, [sp, #56]	; 0x38
   1ff74:	str	r3, [sp, #8]
   1ff78:	bl	1cfcc <flatcc_builder_start_offset_vector@@Base>
   1ff7c:	subs	r7, r0, #0
   1ff80:	bne	1fffc <flatcc_json_parser_space_ext@@Base+0x474>
   1ff84:	mov	r1, r6
   1ff88:	add	r3, sp, #12
   1ff8c:	mov	r2, r4
   1ff90:	mov	r0, r5
   1ff94:	bl	1fecc <flatcc_json_parser_space_ext@@Base+0x344>
   1ff98:	add	sl, sp, #8
   1ff9c:	mov	fp, #1
   1ffa0:	mov	r6, r0
   1ffa4:	ldr	r3, [sp, #12]
   1ffa8:	cmp	r3, #0
   1ffac:	bne	20004 <flatcc_json_parser_space_ext@@Base+0x47c>
   1ffb0:	cmp	r7, r9
   1ffb4:	bne	2000c <flatcc_json_parser_space_ext@@Base+0x484>
   1ffb8:	mov	r1, r8
   1ffbc:	ldr	r0, [r5]
   1ffc0:	bl	1c4ec <flatcc_builder_get_user_frame_ptr@@Base>
   1ffc4:	mov	r1, r0
   1ffc8:	ldr	r0, [r5]
   1ffcc:	bl	1da40 <flatcc_builder_end_offset_vector_for_unions@@Base>
   1ffd0:	cmp	r0, #0
   1ffd4:	str	r0, [sp, #8]
   1ffd8:	beq	1fffc <flatcc_json_parser_space_ext@@Base+0x474>
   1ffdc:	ldrh	r1, [sp, #60]	; 0x3c
   1ffe0:	ldr	r0, [r5]
   1ffe4:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   1ffe8:	cmp	r0, #0
   1ffec:	movne	r4, r6
   1fff0:	ldrne	r3, [sp, #8]
   1fff4:	strne	r3, [r0]
   1fff8:	bne	20024 <flatcc_json_parser_space_ext@@Base+0x49c>
   1fffc:	mov	r3, #33	; 0x21
   20000:	b	20010 <flatcc_json_parser_space_ext@@Base+0x488>
   20004:	cmp	r7, r9
   20008:	bne	20030 <flatcc_json_parser_space_ext@@Base+0x4a8>
   2000c:	mov	r3, #30
   20010:	mov	r2, r4
   20014:	mov	r1, r6
   20018:	mov	r0, r5
   2001c:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   20020:	mov	r4, r0
   20024:	mov	r0, r4
   20028:	add	sp, sp, #20
   2002c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20030:	mov	r1, r8
   20034:	ldr	r0, [r5]
   20038:	bl	1c4ec <flatcc_builder_get_user_frame_ptr@@Base>
   2003c:	mov	r1, r6
   20040:	mov	r2, r4
   20044:	ldr	ip, [sp, #64]	; 0x40
   20048:	ldrb	r3, [r0, r7]
   2004c:	str	sl, [sp]
   20050:	mov	r0, r5
   20054:	blx	ip
   20058:	cmp	r4, r0
   2005c:	mov	r6, r0
   20060:	beq	20024 <flatcc_json_parser_space_ext@@Base+0x49c>
   20064:	mov	r1, fp
   20068:	ldr	r0, [r5]
   2006c:	bl	1cbc8 <flatcc_builder_extend_offset_vector@@Base>
   20070:	cmp	r0, #0
   20074:	beq	1fffc <flatcc_json_parser_space_ext@@Base+0x474>
   20078:	ldr	r3, [sp, #8]
   2007c:	mov	r1, r6
   20080:	str	r3, [r0]
   20084:	mov	r2, r4
   20088:	add	r3, sp, #12
   2008c:	mov	r0, r5
   20090:	bl	1fc8c <flatcc_json_parser_space_ext@@Base+0x104>
   20094:	add	r7, r7, #1
   20098:	mov	r6, r0
   2009c:	b	1ffa4 <flatcc_json_parser_space_ext@@Base+0x41c>

000200a0 <flatcc_json_parser_string_escape@@Base>:
   200a0:	push	{r4, r5, lr}
   200a4:	sub	lr, r2, r1
   200a8:	cmp	lr, #1
   200ac:	ble	200bc <flatcc_json_parser_string_escape@@Base+0x1c>
   200b0:	ldrb	ip, [r1]
   200b4:	cmp	ip, #92	; 0x5c
   200b8:	beq	200d0 <flatcc_json_parser_string_escape@@Base+0x30>
   200bc:	mov	ip, #0
   200c0:	strb	ip, [r3]
   200c4:	mov	r3, #18
   200c8:	pop	{r4, r5, lr}
   200cc:	b	1f9c8 <flatcc_json_parser_set_error@@Base>
   200d0:	ldrb	ip, [r1, #1]
   200d4:	cmp	ip, #102	; 0x66
   200d8:	beq	20374 <flatcc_json_parser_string_escape@@Base+0x2d4>
   200dc:	bhi	2012c <flatcc_json_parser_string_escape@@Base+0x8c>
   200e0:	cmp	ip, #47	; 0x2f
   200e4:	beq	200f4 <flatcc_json_parser_string_escape@@Base+0x54>
   200e8:	bhi	20104 <flatcc_json_parser_string_escape@@Base+0x64>
   200ec:	cmp	ip, #34	; 0x22
   200f0:	bne	200bc <flatcc_json_parser_string_escape@@Base+0x1c>
   200f4:	mov	r2, #1
   200f8:	strb	r2, [r3]
   200fc:	strb	ip, [r3, #1]
   20100:	b	20124 <flatcc_json_parser_string_escape@@Base+0x84>
   20104:	cmp	ip, #92	; 0x5c
   20108:	beq	200f4 <flatcc_json_parser_string_escape@@Base+0x54>
   2010c:	cmp	ip, #98	; 0x62
   20110:	moveq	r2, #1
   20114:	strbeq	r2, [r3]
   20118:	moveq	r2, #8
   2011c:	bne	200bc <flatcc_json_parser_string_escape@@Base+0x1c>
   20120:	strb	r2, [r3, #1]
   20124:	add	r0, r1, #2
   20128:	pop	{r4, r5, pc}
   2012c:	cmp	ip, #116	; 0x74
   20130:	beq	20354 <flatcc_json_parser_string_escape@@Base+0x2b4>
   20134:	bhi	20158 <flatcc_json_parser_string_escape@@Base+0xb8>
   20138:	cmp	ip, #110	; 0x6e
   2013c:	beq	20364 <flatcc_json_parser_string_escape@@Base+0x2c4>
   20140:	cmp	ip, #114	; 0x72
   20144:	moveq	r2, #1
   20148:	strbeq	r2, [r3]
   2014c:	moveq	r2, #13
   20150:	beq	20120 <flatcc_json_parser_string_escape@@Base+0x80>
   20154:	b	200bc <flatcc_json_parser_string_escape@@Base+0x1c>
   20158:	cmp	ip, #117	; 0x75
   2015c:	beq	201ec <flatcc_json_parser_string_escape@@Base+0x14c>
   20160:	cmp	ip, #120	; 0x78
   20164:	bne	200bc <flatcc_json_parser_string_escape@@Base+0x1c>
   20168:	mov	ip, #1
   2016c:	cmp	lr, #3
   20170:	strb	ip, [r3]
   20174:	ble	200bc <flatcc_json_parser_string_escape@@Base+0x1c>
   20178:	ldrb	ip, [r1, #2]
   2017c:	sub	lr, ip, #48	; 0x30
   20180:	uxtb	r4, lr
   20184:	cmp	r4, #9
   20188:	lslls	ip, lr, #4
   2018c:	bls	201a8 <flatcc_json_parser_string_escape@@Base+0x108>
   20190:	orr	ip, ip, #32
   20194:	sub	lr, ip, #97	; 0x61
   20198:	cmp	lr, #5
   2019c:	bhi	200bc <flatcc_json_parser_string_escape@@Base+0x1c>
   201a0:	sub	ip, ip, #87	; 0x57
   201a4:	lsl	ip, ip, #4
   201a8:	ldrb	lr, [r1, #3]
   201ac:	uxtb	ip, ip
   201b0:	sub	r4, lr, #48	; 0x30
   201b4:	uxtb	r4, r4
   201b8:	cmp	r4, #9
   201bc:	orrls	ip, r4, ip
   201c0:	bls	201e0 <flatcc_json_parser_string_escape@@Base+0x140>
   201c4:	orr	lr, lr, #32
   201c8:	sub	r4, lr, #97	; 0x61
   201cc:	cmp	r4, #5
   201d0:	bhi	200bc <flatcc_json_parser_string_escape@@Base+0x1c>
   201d4:	sub	lr, lr, #87	; 0x57
   201d8:	orr	ip, lr, ip
   201dc:	uxtb	ip, ip
   201e0:	strb	ip, [r3, #1]
   201e4:	add	r0, r1, #4
   201e8:	pop	{r4, r5, pc}
   201ec:	cmp	lr, #5
   201f0:	ble	200bc <flatcc_json_parser_string_escape@@Base+0x1c>
   201f4:	ldrb	ip, [r1, #2]
   201f8:	sub	lr, ip, #48	; 0x30
   201fc:	uxtb	r4, lr
   20200:	cmp	r4, #9
   20204:	lslls	ip, lr, #12
   20208:	uxthls	ip, ip
   2020c:	bls	2022c <flatcc_json_parser_string_escape@@Base+0x18c>
   20210:	orr	ip, ip, #32
   20214:	sub	lr, ip, #97	; 0x61
   20218:	cmp	lr, #5
   2021c:	bhi	200bc <flatcc_json_parser_string_escape@@Base+0x1c>
   20220:	sub	ip, ip, #87	; 0x57
   20224:	lsl	ip, ip, #12
   20228:	and	ip, ip, #61440	; 0xf000
   2022c:	ldrb	lr, [r1, #3]
   20230:	sub	r4, lr, #48	; 0x30
   20234:	uxtb	r5, r4
   20238:	cmp	r5, #9
   2023c:	uxthls	r4, r4
   20240:	orrls	ip, ip, r4, lsl #8
   20244:	bls	20264 <flatcc_json_parser_string_escape@@Base+0x1c4>
   20248:	orr	lr, lr, #32
   2024c:	sub	r4, lr, #97	; 0x61
   20250:	cmp	r4, #5
   20254:	bhi	200bc <flatcc_json_parser_string_escape@@Base+0x1c>
   20258:	sub	lr, lr, #87	; 0x57
   2025c:	uxth	lr, lr
   20260:	orr	ip, ip, lr, lsl #8
   20264:	ldrb	lr, [r1, #4]
   20268:	and	ip, ip, #65280	; 0xff00
   2026c:	sub	r4, lr, #48	; 0x30
   20270:	uxtb	r5, r4
   20274:	cmp	r5, #9
   20278:	uxthls	r4, r4
   2027c:	orrls	ip, ip, r4, lsl #4
   20280:	bls	202a0 <flatcc_json_parser_string_escape@@Base+0x200>
   20284:	orr	lr, lr, #32
   20288:	sub	r4, lr, #97	; 0x61
   2028c:	cmp	r4, #5
   20290:	bhi	200bc <flatcc_json_parser_string_escape@@Base+0x1c>
   20294:	sub	lr, lr, #87	; 0x57
   20298:	uxth	lr, lr
   2029c:	orr	ip, ip, lr, lsl #4
   202a0:	ldrb	lr, [r1, #5]
   202a4:	uxth	ip, ip
   202a8:	sub	r4, lr, #48	; 0x30
   202ac:	uxtb	r5, r4
   202b0:	cmp	r5, #9
   202b4:	orrls	r2, ip, r4
   202b8:	bls	202d4 <flatcc_json_parser_string_escape@@Base+0x234>
   202bc:	orr	lr, lr, #32
   202c0:	sub	r4, lr, #97	; 0x61
   202c4:	cmp	r4, #5
   202c8:	bhi	200bc <flatcc_json_parser_string_escape@@Base+0x1c>
   202cc:	sub	r2, lr, #87	; 0x57
   202d0:	orr	r2, ip, r2
   202d4:	uxth	r2, r2
   202d8:	cmp	r2, #127	; 0x7f
   202dc:	movls	r0, #1
   202e0:	strbls	r0, [r3]
   202e4:	strbls	r2, [r3, #1]
   202e8:	bls	2031c <flatcc_json_parser_string_escape@@Base+0x27c>
   202ec:	cmp	r2, #2048	; 0x800
   202f0:	lsr	r0, r2, #6
   202f4:	and	ip, r2, #63	; 0x3f
   202f8:	bcs	20324 <flatcc_json_parser_string_escape@@Base+0x284>
   202fc:	mov	r2, #2
   20300:	strb	r2, [r3]
   20304:	mvn	r2, r0, lsl #26
   20308:	mvn	r2, r2, lsr #26
   2030c:	strb	r2, [r3, #1]
   20310:	mvn	r2, ip, lsl #25
   20314:	mvn	r2, r2, lsr #25
   20318:	strb	r2, [r3, #2]
   2031c:	add	r0, r1, #6
   20320:	pop	{r4, r5, pc}
   20324:	mov	lr, #3
   20328:	strb	lr, [r3]
   2032c:	mvn	lr, #31
   20330:	orr	r2, lr, r2, lsr #12
   20334:	strb	r2, [r3, #1]
   20338:	and	r2, r0, #63	; 0x3f
   2033c:	mvn	r0, #127	; 0x7f
   20340:	orr	r2, r2, r0
   20344:	strb	r2, [r3, #2]
   20348:	orr	r2, ip, r0
   2034c:	strb	r2, [r3, #3]
   20350:	b	2031c <flatcc_json_parser_string_escape@@Base+0x27c>
   20354:	mov	r2, #1
   20358:	strb	r2, [r3]
   2035c:	mov	r2, #9
   20360:	b	20120 <flatcc_json_parser_string_escape@@Base+0x80>
   20364:	mov	r2, #1
   20368:	strb	r2, [r3]
   2036c:	mov	r2, #10
   20370:	b	20120 <flatcc_json_parser_string_escape@@Base+0x80>
   20374:	mov	r2, #1
   20378:	strb	r2, [r3]
   2037c:	mov	r2, #12
   20380:	b	20120 <flatcc_json_parser_string_escape@@Base+0x80>

00020384 <flatcc_json_parser_skip_constant@@Base>:
   20384:	push	{r4, r5, r6, lr}
   20388:	mov	r6, r0
   2038c:	mov	r5, r2
   20390:	mov	r4, r1
   20394:	cmp	r4, r5
   20398:	beq	203f8 <flatcc_json_parser_skip_constant@@Base+0x74>
   2039c:	ldrb	r3, [r4]
   203a0:	sub	r2, r3, #95	; 0x5f
   203a4:	clz	r2, r2
   203a8:	lsr	r2, r2, #5
   203ac:	orrs	r2, r2, r3, lsr #7
   203b0:	bne	203c4 <flatcc_json_parser_skip_constant@@Base+0x40>
   203b4:	sub	r2, r3, #48	; 0x30
   203b8:	cmp	r3, #46	; 0x2e
   203bc:	cmpne	r2, #9
   203c0:	bhi	203d0 <flatcc_json_parser_skip_constant@@Base+0x4c>
   203c4:	add	r0, r4, #1
   203c8:	mov	r4, r0
   203cc:	b	20394 <flatcc_json_parser_skip_constant@@Base+0x10>
   203d0:	orr	r3, r3, #32
   203d4:	sub	r3, r3, #97	; 0x61
   203d8:	cmp	r3, #25
   203dc:	bls	203c4 <flatcc_json_parser_skip_constant@@Base+0x40>
   203e0:	mov	r2, r5
   203e4:	mov	r1, r4
   203e8:	mov	r0, r6
   203ec:	bl	1fc54 <flatcc_json_parser_space_ext@@Base+0xcc>
   203f0:	cmp	r4, r0
   203f4:	bne	203c8 <flatcc_json_parser_skip_constant@@Base+0x44>
   203f8:	mov	r0, r4
   203fc:	pop	{r4, r5, r6, pc}

00020400 <flatcc_json_parser_match_constant@@Base>:
   20400:	push	{r4, r5, r6, r7, r8, lr}
   20404:	sub	lr, r2, r1
   20408:	cmp	r3, lr
   2040c:	ldr	r4, [sp, #24]
   20410:	blt	20424 <flatcc_json_parser_match_constant@@Base+0x24>
   20414:	mov	r3, #0
   20418:	str	r3, [r4]
   2041c:	mov	r0, r1
   20420:	pop	{r4, r5, r6, r7, r8, pc}
   20424:	mov	r6, r1
   20428:	add	r5, r1, r3
   2042c:	ldr	r1, [r0, #12]
   20430:	mov	ip, r0
   20434:	cmp	r1, #0
   20438:	mov	r7, r2
   2043c:	beq	204bc <flatcc_json_parser_match_constant@@Base+0xbc>
   20440:	mov	r1, r5
   20444:	bl	1fc54 <flatcc_json_parser_space_ext@@Base+0xcc>
   20448:	cmp	r2, r0
   2044c:	bne	20460 <flatcc_json_parser_match_constant@@Base+0x60>
   20450:	mov	r3, #0
   20454:	str	r3, [r4]
   20458:	mov	r0, r7
   2045c:	pop	{r4, r5, r6, r7, r8, pc}
   20460:	cmp	r5, r0
   20464:	beq	2049c <flatcc_json_parser_match_constant@@Base+0x9c>
   20468:	ldrb	r3, [r0]
   2046c:	sub	r2, r3, #95	; 0x5f
   20470:	clz	r2, r2
   20474:	lsr	r2, r2, #5
   20478:	orrs	r2, r2, r3, lsr #7
   2047c:	beq	2048c <flatcc_json_parser_match_constant@@Base+0x8c>
   20480:	mov	r3, #1
   20484:	str	r3, [r4]
   20488:	pop	{r4, r5, r6, r7, r8, pc}
   2048c:	orr	r3, r3, #32
   20490:	sub	r3, r3, #97	; 0x61
   20494:	cmp	r3, #25
   20498:	bls	20480 <flatcc_json_parser_match_constant@@Base+0x80>
   2049c:	mov	r3, #0
   204a0:	str	r3, [r4]
   204a4:	ldrb	r3, [r0]
   204a8:	and	r2, r3, #223	; 0xdf
   204ac:	cmp	r3, #44	; 0x2c
   204b0:	cmpne	r2, #93	; 0x5d
   204b4:	movne	r0, r6
   204b8:	pop	{r4, r5, r6, r7, r8, pc}
   204bc:	ldrb	r3, [r6, r3]
   204c0:	cmp	r3, #32
   204c4:	bne	204ec <flatcc_json_parser_match_constant@@Base+0xec>
   204c8:	add	r3, r5, #1
   204cc:	cmp	r3, r7
   204d0:	mov	r5, r3
   204d4:	beq	20450 <flatcc_json_parser_match_constant@@Base+0x50>
   204d8:	ldrb	r2, [r3], #1
   204dc:	cmp	r2, #32
   204e0:	beq	204cc <flatcc_json_parser_match_constant@@Base+0xcc>
   204e4:	cmp	r2, #34	; 0x22
   204e8:	bne	20520 <flatcc_json_parser_match_constant@@Base+0x120>
   204ec:	ldrb	r3, [r5]
   204f0:	cmp	r3, #34	; 0x22
   204f4:	beq	20530 <flatcc_json_parser_match_constant@@Base+0x130>
   204f8:	cmp	r3, #92	; 0x5c
   204fc:	mov	r3, #0
   20500:	str	r3, [r4]
   20504:	bne	20548 <flatcc_json_parser_match_constant@@Base+0x148>
   20508:	mov	r2, r7
   2050c:	mov	r1, r5
   20510:	mov	r3, #18
   20514:	mov	r0, ip
   20518:	pop	{r4, r5, r6, r7, r8, lr}
   2051c:	b	1f9c8 <flatcc_json_parser_set_error@@Base>
   20520:	mov	r3, #1
   20524:	str	r3, [r4]
   20528:	mov	r0, r5
   2052c:	pop	{r4, r5, r6, r7, r8, pc}
   20530:	mov	r2, #0
   20534:	add	r1, r5, #1
   20538:	mov	r0, ip
   2053c:	bl	1fc54 <flatcc_json_parser_space_ext@@Base+0xcc>
   20540:	mov	r3, #0
   20544:	b	20484 <flatcc_json_parser_match_constant@@Base+0x84>
   20548:	mov	r0, r6
   2054c:	pop	{r4, r5, r6, r7, r8, pc}

00020550 <flatcc_json_parser_double@@Base>:
   20550:	push	{r4, r5, r6, r7, r8, lr}
   20554:	mov	r4, #0
   20558:	mov	r5, #0
   2055c:	cmp	r1, r2
   20560:	strd	r4, [r3]
   20564:	beq	2060c <flatcc_json_parser_double@@Base+0xbc>
   20568:	ldrb	ip, [r1]
   2056c:	cmp	ip, #45	; 0x2d
   20570:	addeq	ip, r1, #1
   20574:	movne	ip, r1
   20578:	sub	lr, r2, ip
   2057c:	cmp	lr, #1
   20580:	ble	205b0 <flatcc_json_parser_double@@Base+0x60>
   20584:	ldrb	lr, [ip]
   20588:	cmp	lr, #46	; 0x2e
   2058c:	beq	205a4 <flatcc_json_parser_double@@Base+0x54>
   20590:	cmp	lr, #48	; 0x30
   20594:	bne	205b0 <flatcc_json_parser_double@@Base+0x60>
   20598:	ldrb	ip, [ip, #1]
   2059c:	cmp	ip, #48	; 0x30
   205a0:	bne	205b0 <flatcc_json_parser_double@@Base+0x60>
   205a4:	mov	r3, #6
   205a8:	pop	{r4, r5, r6, r7, r8, lr}
   205ac:	b	1f9c8 <flatcc_json_parser_set_error@@Base>
   205b0:	mov	r6, r1
   205b4:	mov	r4, r2
   205b8:	sub	r1, r4, r1
   205bc:	mov	r5, r0
   205c0:	mov	r2, r3
   205c4:	mov	r0, r6
   205c8:	mov	r7, r3
   205cc:	bl	1f1cc <grisu3_diy_fp_encode_double@@Base+0x4e4>
   205d0:	cmp	r6, r0
   205d4:	cmpne	r0, #0
   205d8:	mov	r1, r0
   205dc:	bne	2060c <flatcc_json_parser_double@@Base+0xbc>
   205e0:	vldr	d7, [r7]
   205e4:	vldr	d6, [pc, #44]	; 20618 <flatcc_json_parser_double@@Base+0xc8>
   205e8:	mov	r2, r4
   205ec:	mov	r1, r6
   205f0:	vabs.f64	d7, d7
   205f4:	mov	r0, r5
   205f8:	vcmp.f64	d7, d6
   205fc:	vmrs	APSR_nzcv, fpscr
   20600:	movgt	r3, #7
   20604:	movle	r3, #6
   20608:	b	205a8 <flatcc_json_parser_double@@Base+0x58>
   2060c:	mov	r0, r1
   20610:	pop	{r4, r5, r6, r7, r8, pc}
   20614:	nop			; (mov r0, r0)
   20618:			; <UNDEFINED> instruction: 0xffffffff
   2061c:	svcvc	0x00efffff

00020620 <flatcc_json_parser_float@@Base>:
   20620:	mov	ip, #0
   20624:	cmp	r1, r2
   20628:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2062c:	moveq	r0, r1
   20630:	str	ip, [r3]
   20634:	beq	20698 <flatcc_json_parser_float@@Base+0x78>
   20638:	ldrb	ip, [r1]
   2063c:	mov	r7, r3
   20640:	mov	r4, r2
   20644:	cmp	ip, #45	; 0x2d
   20648:	addeq	ip, r1, #1
   2064c:	movne	ip, r1
   20650:	sub	r3, r2, ip
   20654:	cmp	r3, #1
   20658:	mov	r5, r1
   2065c:	mov	r6, r0
   20660:	ble	206a0 <flatcc_json_parser_float@@Base+0x80>
   20664:	ldrb	r2, [ip]
   20668:	cmp	r2, #46	; 0x2e
   2066c:	beq	20684 <flatcc_json_parser_float@@Base+0x64>
   20670:	cmp	r2, #48	; 0x30
   20674:	bne	206a0 <flatcc_json_parser_float@@Base+0x80>
   20678:	ldrb	r3, [ip, #1]
   2067c:	cmp	r3, #48	; 0x30
   20680:	bne	206a0 <flatcc_json_parser_float@@Base+0x80>
   20684:	mov	r3, #6
   20688:	mov	r2, r4
   2068c:	mov	r1, r5
   20690:	mov	r0, r6
   20694:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   20698:	add	sp, sp, #12
   2069c:	pop	{r4, r5, r6, r7, pc}
   206a0:	mov	r2, sp
   206a4:	sub	r1, r4, r5
   206a8:	mov	r0, r5
   206ac:	bl	1f1cc <grisu3_diy_fp_encode_double@@Base+0x4e4>
   206b0:	vldr	d6, [sp]
   206b4:	vldr	s15, [pc, #92]	; 20718 <flatcc_json_parser_float@@Base+0xf8>
   206b8:	vcvt.f32.f64	s14, d6
   206bc:	vabs.f32	s11, s14
   206c0:	vcmp.f32	s11, s15
   206c4:	vmrs	APSR_nzcv, fpscr
   206c8:	bgt	206f8 <flatcc_json_parser_float@@Base+0xd8>
   206cc:	vstr	s14, [r7]
   206d0:	cmp	r5, r0
   206d4:	cmpne	r0, #0
   206d8:	bne	20698 <flatcc_json_parser_float@@Base+0x78>
   206dc:	vldr	s14, [r7]
   206e0:	vabs.f32	s14, s14
   206e4:	vcmp.f32	s14, s15
   206e8:	vmrs	APSR_nzcv, fpscr
   206ec:	ble	20684 <flatcc_json_parser_float@@Base+0x64>
   206f0:	mov	r3, #7
   206f4:	b	20688 <flatcc_json_parser_float@@Base+0x68>
   206f8:	vcmpe.f64	d6, #0.0
   206fc:	vldr	s14, [pc, #24]	; 2071c <flatcc_json_parser_float@@Base+0xfc>
   20700:	vldr	s13, [pc, #24]	; 20720 <flatcc_json_parser_float@@Base+0x100>
   20704:	mov	r0, r5
   20708:	vmrs	APSR_nzcv, fpscr
   2070c:	vmovpl.f32	s14, s13
   20710:	vstr	s14, [r7]
   20714:	b	206d0 <flatcc_json_parser_float@@Base+0xb0>
   20718:	svcvc	0x007fffff
   2071c:			; <UNDEFINED> instruction: 0xff800000
   20720:	svcvc	0x00800000

00020724 <flatcc_json_parser_generic_json@@Base>:
   20724:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20728:	sub	sp, sp, #524	; 0x20c
   2072c:	add	r7, sp, #8
   20730:	mov	r5, r0
   20734:	mov	r6, r1
   20738:	mov	r4, r2
   2073c:	mov	sl, r7
   20740:	mov	fp, #1
   20744:	mov	r9, #0
   20748:	str	r9, [sp, #4]
   2074c:	cmp	r6, r4
   20750:	bne	2076c <flatcc_json_parser_generic_json@@Base+0x48>
   20754:	mov	r0, r4
   20758:	add	sp, sp, #524	; 0x20c
   2075c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20760:	mov	r7, r8
   20764:	mov	r6, r0
   20768:	b	2074c <flatcc_json_parser_generic_json@@Base+0x28>
   2076c:	cmp	r7, sl
   20770:	beq	20828 <flatcc_json_parser_generic_json@@Base+0x104>
   20774:	ldrb	r3, [r7, #-1]
   20778:	cmp	r3, #125	; 0x7d
   2077c:	bne	20828 <flatcc_json_parser_generic_json@@Base+0x104>
   20780:	ldrb	r3, [r6]
   20784:	cmp	r3, #34	; 0x22
   20788:	addeq	r6, r6, #1
   2078c:	streq	r9, [r5, #12]
   20790:	beq	207b8 <flatcc_json_parser_generic_json@@Base+0x94>
   20794:	cmp	r3, #46	; 0x2e
   20798:	strne	fp, [r5, #12]
   2079c:	bne	207b8 <flatcc_json_parser_generic_json@@Base+0x94>
   207a0:	mov	r1, r6
   207a4:	mov	r3, #5
   207a8:	mov	r2, r4
   207ac:	mov	r0, r5
   207b0:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   207b4:	mov	r6, r0
   207b8:	mov	r2, r4
   207bc:	mov	r1, r6
   207c0:	mov	r0, r5
   207c4:	bl	1f9f0 <flatcc_json_parser_set_error@@Base+0x28>
   207c8:	mov	r2, r4
   207cc:	mov	r1, r0
   207d0:	mov	r0, r5
   207d4:	bl	1fc54 <flatcc_json_parser_space_ext@@Base+0xcc>
   207d8:	cmp	r4, r0
   207dc:	mov	r1, r0
   207e0:	bne	207f4 <flatcc_json_parser_generic_json@@Base+0xd0>
   207e4:	mov	r3, #10
   207e8:	mov	r2, r4
   207ec:	mov	r1, r2
   207f0:	b	20808 <flatcc_json_parser_generic_json@@Base+0xe4>
   207f4:	ldrb	r3, [r0]
   207f8:	cmp	r3, #58	; 0x3a
   207fc:	beq	20814 <flatcc_json_parser_generic_json@@Base+0xf0>
   20800:	mov	r3, #4
   20804:	mov	r2, r4
   20808:	mov	r0, r5
   2080c:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   20810:	b	20758 <flatcc_json_parser_generic_json@@Base+0x34>
   20814:	add	r1, r0, #1
   20818:	mov	r2, r4
   2081c:	mov	r0, r5
   20820:	bl	1fc54 <flatcc_json_parser_space_ext@@Base+0xcc>
   20824:	mov	r6, r0
   20828:	ldrb	r3, [r6]
   2082c:	cmp	r3, #57	; 0x39
   20830:	bhi	20874 <flatcc_json_parser_generic_json@@Base+0x150>
   20834:	cmp	r3, #48	; 0x30
   20838:	bcs	20934 <flatcc_json_parser_generic_json@@Base+0x210>
   2083c:	cmp	r3, #34	; 0x22
   20840:	beq	208c0 <flatcc_json_parser_generic_json@@Base+0x19c>
   20844:	cmp	r3, #45	; 0x2d
   20848:	beq	20934 <flatcc_json_parser_generic_json@@Base+0x210>
   2084c:	mov	r2, r4
   20850:	mov	r1, r6
   20854:	mov	r0, r5
   20858:	bl	20384 <flatcc_json_parser_skip_constant@@Base>
   2085c:	cmp	r6, r0
   20860:	bne	208f4 <flatcc_json_parser_generic_json@@Base+0x1d0>
   20864:	mov	r3, #5
   20868:	mov	r2, r4
   2086c:	mov	r1, r0
   20870:	b	20808 <flatcc_json_parser_generic_json@@Base+0xe4>
   20874:	cmp	r3, #91	; 0x5b
   20878:	beq	20ae4 <flatcc_json_parser_generic_json@@Base+0x3c0>
   2087c:	cmp	r3, #123	; 0x7b
   20880:	bne	2084c <flatcc_json_parser_generic_json@@Base+0x128>
   20884:	add	r3, sp, #520	; 0x208
   20888:	cmp	r7, r3
   2088c:	beq	20af0 <flatcc_json_parser_generic_json@@Base+0x3cc>
   20890:	mov	r3, #125	; 0x7d
   20894:	strb	r3, [r7]
   20898:	mov	r2, r4
   2089c:	add	r1, r6, #1
   208a0:	mov	r0, r5
   208a4:	bl	1fc54 <flatcc_json_parser_space_ext@@Base+0xcc>
   208a8:	add	r8, r7, #1
   208ac:	cmp	r4, r0
   208b0:	beq	20760 <flatcc_json_parser_generic_json@@Base+0x3c>
   208b4:	ldrb	r3, [r0]
   208b8:	cmp	r3, #125	; 0x7d
   208bc:	b	20b2c <flatcc_json_parser_generic_json@@Base+0x408>
   208c0:	mov	r2, r4
   208c4:	mov	r1, r6
   208c8:	mov	r0, r5
   208cc:	bl	1fac4 <flatcc_json_parser_set_error@@Base+0xfc>
   208d0:	cmp	r0, r4
   208d4:	mov	r1, r0
   208d8:	beq	208e8 <flatcc_json_parser_generic_json@@Base+0x1c4>
   208dc:	ldrb	r3, [r0]
   208e0:	cmp	r3, #34	; 0x22
   208e4:	bne	208fc <flatcc_json_parser_generic_json@@Base+0x1d8>
   208e8:	mov	r2, r4
   208ec:	mov	r0, r5
   208f0:	bl	1fae8 <flatcc_json_parser_set_error@@Base+0x120>
   208f4:	mov	r8, r7
   208f8:	b	20b6c <flatcc_json_parser_generic_json@@Base+0x448>
   208fc:	mov	r2, r4
   20900:	mov	r0, r5
   20904:	bl	1fb0c <flatcc_json_parser_string_part@@Base>
   20908:	cmp	r4, r0
   2090c:	mov	r1, r0
   20910:	beq	20920 <flatcc_json_parser_generic_json@@Base+0x1fc>
   20914:	ldrb	r3, [r0]
   20918:	cmp	r3, #34	; 0x22
   2091c:	beq	208e8 <flatcc_json_parser_generic_json@@Base+0x1c4>
   20920:	mov	r3, sp
   20924:	mov	r2, r4
   20928:	mov	r0, r5
   2092c:	bl	200a0 <flatcc_json_parser_string_escape@@Base>
   20930:	b	208d0 <flatcc_json_parser_generic_json@@Base+0x1ac>
   20934:	cmp	r6, r4
   20938:	moveq	r0, r4
   2093c:	beq	208f4 <flatcc_json_parser_generic_json@@Base+0x1d0>
   20940:	cmp	r3, #45	; 0x2d
   20944:	bne	2096c <flatcc_json_parser_generic_json@@Base+0x248>
   20948:	add	r6, r6, #1
   2094c:	cmp	r4, r6
   20950:	bne	2096c <flatcc_json_parser_generic_json@@Base+0x248>
   20954:	mov	r3, #6
   20958:	mov	r2, r4
   2095c:	mov	r1, r4
   20960:	mov	r0, r5
   20964:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   20968:	b	208f4 <flatcc_json_parser_generic_json@@Base+0x1d0>
   2096c:	ldrb	r3, [r6]
   20970:	cmp	r3, #48	; 0x30
   20974:	bne	20994 <flatcc_json_parser_generic_json@@Base+0x270>
   20978:	add	r0, r6, #1
   2097c:	cmp	r4, r0
   20980:	bne	209d0 <flatcc_json_parser_generic_json@@Base+0x2ac>
   20984:	mov	r3, #6
   20988:	mov	r2, r4
   2098c:	mov	r1, r0
   20990:	b	20960 <flatcc_json_parser_generic_json@@Base+0x23c>
   20994:	sub	r3, r3, #49	; 0x31
   20998:	cmp	r3, #8
   2099c:	movhi	r3, #6
   209a0:	movhi	r2, r4
   209a4:	movhi	r1, r6
   209a8:	bhi	20960 <flatcc_json_parser_generic_json@@Base+0x23c>
   209ac:	add	r6, r6, #1
   209b0:	cmp	r4, r6
   209b4:	mov	r0, r6
   209b8:	beq	20984 <flatcc_json_parser_generic_json@@Base+0x260>
   209bc:	ldrb	r3, [r0]
   209c0:	add	r6, r6, #1
   209c4:	sub	r3, r3, #48	; 0x30
   209c8:	cmp	r3, #9
   209cc:	bls	209b0 <flatcc_json_parser_generic_json@@Base+0x28c>
   209d0:	ldrb	r3, [r0]
   209d4:	cmp	r3, #46	; 0x2e
   209d8:	bne	20a1c <flatcc_json_parser_generic_json@@Base+0x2f8>
   209dc:	ldrb	r3, [r0, #1]
   209e0:	sub	r3, r3, #48	; 0x30
   209e4:	cmp	r3, #9
   209e8:	movhi	r3, #6
   209ec:	movhi	r2, r4
   209f0:	addhi	r1, r0, #1
   209f4:	bhi	20960 <flatcc_json_parser_generic_json@@Base+0x23c>
   209f8:	add	r3, r0, #2
   209fc:	cmp	r3, r4
   20a00:	mov	r0, r3
   20a04:	beq	20984 <flatcc_json_parser_generic_json@@Base+0x260>
   20a08:	ldrb	r2, [r0]
   20a0c:	add	r3, r3, #1
   20a10:	sub	r2, r2, #48	; 0x30
   20a14:	cmp	r2, #9
   20a18:	bls	209fc <flatcc_json_parser_generic_json@@Base+0x2d8>
   20a1c:	ldrb	r3, [r0]
   20a20:	and	r3, r3, #223	; 0xdf
   20a24:	cmp	r3, #69	; 0x45
   20a28:	bne	20a94 <flatcc_json_parser_generic_json@@Base+0x370>
   20a2c:	add	r1, r0, #1
   20a30:	cmp	r4, r1
   20a34:	beq	20954 <flatcc_json_parser_generic_json@@Base+0x230>
   20a38:	ldrb	r3, [r0, #1]
   20a3c:	sub	r3, r3, #43	; 0x2b
   20a40:	tst	r3, #253	; 0xfd
   20a44:	bne	20a54 <flatcc_json_parser_generic_json@@Base+0x330>
   20a48:	add	r1, r0, #2
   20a4c:	cmp	r4, r1
   20a50:	beq	20a68 <flatcc_json_parser_generic_json@@Base+0x344>
   20a54:	ldrb	r3, [r1]
   20a58:	sub	r3, r3, #48	; 0x30
   20a5c:	cmp	r3, #9
   20a60:	addls	r1, r1, #1
   20a64:	bls	20a74 <flatcc_json_parser_generic_json@@Base+0x350>
   20a68:	mov	r3, #6
   20a6c:	mov	r2, r4
   20a70:	b	20960 <flatcc_json_parser_generic_json@@Base+0x23c>
   20a74:	cmp	r4, r1
   20a78:	mov	r0, r1
   20a7c:	beq	20984 <flatcc_json_parser_generic_json@@Base+0x260>
   20a80:	ldrb	r3, [r0]
   20a84:	add	r1, r1, #1
   20a88:	sub	r3, r3, #48	; 0x30
   20a8c:	cmp	r3, #9
   20a90:	bls	20a74 <flatcc_json_parser_generic_json@@Base+0x350>
   20a94:	ldrb	r3, [r0]
   20a98:	cmp	r3, #32
   20a9c:	beq	208f4 <flatcc_json_parser_generic_json@@Base+0x1d0>
   20aa0:	bhi	20ac0 <flatcc_json_parser_generic_json@@Base+0x39c>
   20aa4:	cmp	r3, #9
   20aa8:	bcc	20984 <flatcc_json_parser_generic_json@@Base+0x260>
   20aac:	cmp	r3, #11
   20ab0:	bls	208f4 <flatcc_json_parser_generic_json@@Base+0x1d0>
   20ab4:	cmp	r3, #13
   20ab8:	bne	20984 <flatcc_json_parser_generic_json@@Base+0x260>
   20abc:	b	208f4 <flatcc_json_parser_generic_json@@Base+0x1d0>
   20ac0:	cmp	r3, #58	; 0x3a
   20ac4:	beq	208f4 <flatcc_json_parser_generic_json@@Base+0x1d0>
   20ac8:	bhi	20ad4 <flatcc_json_parser_generic_json@@Base+0x3b0>
   20acc:	cmp	r3, #44	; 0x2c
   20ad0:	b	20ab8 <flatcc_json_parser_generic_json@@Base+0x394>
   20ad4:	cmp	r3, #93	; 0x5d
   20ad8:	beq	208f4 <flatcc_json_parser_generic_json@@Base+0x1d0>
   20adc:	cmp	r3, #125	; 0x7d
   20ae0:	b	20ab8 <flatcc_json_parser_generic_json@@Base+0x394>
   20ae4:	add	r3, sp, #520	; 0x208
   20ae8:	cmp	r7, r3
   20aec:	bne	20b00 <flatcc_json_parser_generic_json@@Base+0x3dc>
   20af0:	mov	r3, #2
   20af4:	mov	r2, r4
   20af8:	mov	r1, r6
   20afc:	b	20808 <flatcc_json_parser_generic_json@@Base+0xe4>
   20b00:	mov	r3, #93	; 0x5d
   20b04:	strb	r3, [r7]
   20b08:	mov	r2, r4
   20b0c:	add	r1, r6, #1
   20b10:	mov	r0, r5
   20b14:	bl	1fc54 <flatcc_json_parser_space_ext@@Base+0xcc>
   20b18:	add	r8, r7, #1
   20b1c:	cmp	r4, r0
   20b20:	beq	20760 <flatcc_json_parser_generic_json@@Base+0x3c>
   20b24:	ldrb	r3, [r0]
   20b28:	cmp	r3, #93	; 0x5d
   20b2c:	bne	20760 <flatcc_json_parser_generic_json@@Base+0x3c>
   20b30:	mov	r7, r8
   20b34:	b	208f4 <flatcc_json_parser_generic_json@@Base+0x1d0>
   20b38:	ldrb	r3, [r8, #-1]
   20b3c:	sub	r6, r8, #1
   20b40:	cmp	r3, #93	; 0x5d
   20b44:	bne	20b80 <flatcc_json_parser_generic_json@@Base+0x45c>
   20b48:	mov	r1, r0
   20b4c:	add	r3, sp, #4
   20b50:	mov	r2, r4
   20b54:	mov	r0, r5
   20b58:	bl	1fc8c <flatcc_json_parser_space_ext@@Base+0x104>
   20b5c:	ldr	r3, [sp, #4]
   20b60:	cmp	r3, #0
   20b64:	bne	20760 <flatcc_json_parser_generic_json@@Base+0x3c>
   20b68:	mov	r8, r6
   20b6c:	cmp	r0, r4
   20b70:	beq	20c24 <flatcc_json_parser_generic_json@@Base+0x500>
   20b74:	cmp	r8, sl
   20b78:	bne	20b38 <flatcc_json_parser_generic_json@@Base+0x414>
   20b7c:	b	20758 <flatcc_json_parser_generic_json@@Base+0x34>
   20b80:	mov	r1, r0
   20b84:	mov	r2, r4
   20b88:	mov	r0, r5
   20b8c:	bl	1fc54 <flatcc_json_parser_space_ext@@Base+0xcc>
   20b90:	cmp	r4, r0
   20b94:	streq	r9, [sp, #4]
   20b98:	beq	20b5c <flatcc_json_parser_generic_json@@Base+0x438>
   20b9c:	ldrb	r3, [r0]
   20ba0:	cmp	r3, #44	; 0x2c
   20ba4:	beq	20bd8 <flatcc_json_parser_generic_json@@Base+0x4b4>
   20ba8:	str	r9, [sp, #4]
   20bac:	ldrb	r3, [r0]
   20bb0:	cmp	r3, #125	; 0x7d
   20bb4:	movne	r3, #10
   20bb8:	movne	r2, r4
   20bbc:	movne	r1, r0
   20bc0:	bne	20c00 <flatcc_json_parser_generic_json@@Base+0x4dc>
   20bc4:	add	r1, r0, #1
   20bc8:	mov	r2, r4
   20bcc:	mov	r0, r5
   20bd0:	bl	1fc54 <flatcc_json_parser_space_ext@@Base+0xcc>
   20bd4:	b	20b5c <flatcc_json_parser_generic_json@@Base+0x438>
   20bd8:	add	r1, r0, #1
   20bdc:	mov	r2, r4
   20be0:	mov	r0, r5
   20be4:	bl	1fc54 <flatcc_json_parser_space_ext@@Base+0xcc>
   20be8:	cmp	r4, r0
   20bec:	bne	20c0c <flatcc_json_parser_generic_json@@Base+0x4e8>
   20bf0:	mov	r3, #10
   20bf4:	mov	r2, r4
   20bf8:	mov	r1, r4
   20bfc:	str	r9, [sp, #4]
   20c00:	mov	r0, r5
   20c04:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   20c08:	b	20b5c <flatcc_json_parser_generic_json@@Base+0x438>
   20c0c:	ldrb	r3, [r0]
   20c10:	cmp	r3, #125	; 0x7d
   20c14:	strne	fp, [sp, #4]
   20c18:	bne	20b5c <flatcc_json_parser_generic_json@@Base+0x438>
   20c1c:	str	r9, [sp, #4]
   20c20:	b	20bc4 <flatcc_json_parser_generic_json@@Base+0x4a0>
   20c24:	cmp	r8, sl
   20c28:	beq	20754 <flatcc_json_parser_generic_json@@Base+0x30>
   20c2c:	ldrb	r3, [r8, #-1]
   20c30:	mov	r2, r0
   20c34:	cmp	r3, #93	; 0x5d
   20c38:	moveq	r3, #9
   20c3c:	movne	r3, #10
   20c40:	b	207ec <flatcc_json_parser_generic_json@@Base+0xc8>

00020c44 <flatcc_json_parser_unmatched_symbol@@Base>:
   20c44:	ldr	r3, [r0, #8]
   20c48:	tst	r3, #1
   20c4c:	beq	20cb4 <flatcc_json_parser_unmatched_symbol@@Base+0x70>
   20c50:	push	{r4, r5, r6, lr}
   20c54:	mov	r4, r0
   20c58:	mov	r5, r2
   20c5c:	bl	1f9f0 <flatcc_json_parser_set_error@@Base+0x28>
   20c60:	mov	r1, r0
   20c64:	mov	r0, r4
   20c68:	bl	1fc54 <flatcc_json_parser_space_ext@@Base+0xcc>
   20c6c:	cmp	r2, r0
   20c70:	mov	r1, r0
   20c74:	beq	20ca0 <flatcc_json_parser_unmatched_symbol@@Base+0x5c>
   20c78:	ldrb	r3, [r0]
   20c7c:	cmp	r3, #58	; 0x3a
   20c80:	bne	20ca0 <flatcc_json_parser_unmatched_symbol@@Base+0x5c>
   20c84:	add	r1, r0, #1
   20c88:	mov	r0, r4
   20c8c:	bl	1fc54 <flatcc_json_parser_space_ext@@Base+0xcc>
   20c90:	mov	r1, r0
   20c94:	mov	r0, r4
   20c98:	pop	{r4, r5, r6, lr}
   20c9c:	b	20724 <flatcc_json_parser_generic_json@@Base>
   20ca0:	mov	r2, r5
   20ca4:	mov	r0, r4
   20ca8:	pop	{r4, r5, r6, lr}
   20cac:	mov	r3, #4
   20cb0:	b	1f9c8 <flatcc_json_parser_set_error@@Base>
   20cb4:	mov	r3, #13
   20cb8:	b	20cb0 <flatcc_json_parser_unmatched_symbol@@Base+0x6c>

00020cbc <flatcc_json_parser_integer@@Base>:
   20cbc:	push	{r4, r5, r6, r7, r8, r9, lr}
   20cc0:	cmp	r1, r2
   20cc4:	ldr	r9, [sp, #28]
   20cc8:	beq	20d74 <flatcc_json_parser_integer@@Base+0xb8>
   20ccc:	mov	ip, r1
   20cd0:	ldrb	r1, [r1]
   20cd4:	mov	r6, #0
   20cd8:	mov	r7, #0
   20cdc:	sub	r1, r1, #45	; 0x2d
   20ce0:	clz	r1, r1
   20ce4:	lsr	r1, r1, #5
   20ce8:	str	r1, [r3]
   20cec:	mov	r8, #10
   20cf0:	add	r3, ip, r1
   20cf4:	cmp	r3, r2
   20cf8:	mov	r1, r3
   20cfc:	beq	20d6c <flatcc_json_parser_integer@@Base+0xb0>
   20d00:	ldrb	lr, [r3], #1
   20d04:	sub	r4, lr, #48	; 0x30
   20d08:	cmp	r4, #9
   20d0c:	bls	20d30 <flatcc_json_parser_integer@@Base+0x74>
   20d10:	cmp	r1, ip
   20d14:	beq	20d7c <flatcc_json_parser_integer@@Base+0xc0>
   20d18:	and	r3, lr, #223	; 0xdf
   20d1c:	cmp	lr, #46	; 0x2e
   20d20:	cmpne	r3, #69	; 0x45
   20d24:	bne	20d6c <flatcc_json_parser_integer@@Base+0xb0>
   20d28:	mov	r3, #12
   20d2c:	b	20d58 <flatcc_json_parser_integer@@Base+0x9c>
   20d30:	umull	r4, r5, r6, r8
   20d34:	mla	r5, r8, r7, r5
   20d38:	subs	r4, r4, #48	; 0x30
   20d3c:	sbc	r5, r5, #0
   20d40:	adds	r4, r4, lr
   20d44:	adc	r5, r5, #0
   20d48:	cmp	r7, r5
   20d4c:	cmpeq	r6, r4
   20d50:	bls	20d60 <flatcc_json_parser_integer@@Base+0xa4>
   20d54:	mov	r3, #8
   20d58:	pop	{r4, r5, r6, r7, r8, r9, lr}
   20d5c:	b	1f9c8 <flatcc_json_parser_set_error@@Base>
   20d60:	mov	r6, r4
   20d64:	mov	r7, r5
   20d68:	b	20cf4 <flatcc_json_parser_integer@@Base+0x38>
   20d6c:	mov	r2, r1
   20d70:	strd	r6, [r9]
   20d74:	mov	r0, r2
   20d78:	pop	{r4, r5, r6, r7, r8, r9, pc}
   20d7c:	mov	r2, ip
   20d80:	b	20d74 <flatcc_json_parser_integer@@Base+0xb8>
   20d84:	push	{r4, r5, r6, r7, lr}
   20d88:	mov	r6, #0
   20d8c:	sub	sp, sp, #28
   20d90:	mov	r7, #0
   20d94:	mov	lr, #0
   20d98:	cmp	r1, r2
   20d9c:	strd	r6, [sp, #16]
   20da0:	str	lr, [sp, #12]
   20da4:	strb	lr, [r3]
   20da8:	moveq	r0, r1
   20dac:	beq	20e10 <flatcc_json_parser_integer@@Base+0x154>
   20db0:	mov	r6, r3
   20db4:	add	r3, sp, #16
   20db8:	str	r3, [sp]
   20dbc:	add	r3, sp, #12
   20dc0:	mov	r7, r1
   20dc4:	mov	r5, r0
   20dc8:	mov	r4, r2
   20dcc:	bl	20cbc <flatcc_json_parser_integer@@Base>
   20dd0:	cmp	r7, r0
   20dd4:	beq	20e10 <flatcc_json_parser_integer@@Base+0x154>
   20dd8:	ldr	r3, [sp, #12]
   20ddc:	cmp	r3, #0
   20de0:	movne	r3, #8
   20de4:	bne	20e00 <flatcc_json_parser_integer@@Base+0x144>
   20de8:	ldrd	r2, [sp, #16]
   20dec:	cmp	r3, #0
   20df0:	cmpeq	r2, #255	; 0xff
   20df4:	strbls	r2, [r6]
   20df8:	bls	20e10 <flatcc_json_parser_integer@@Base+0x154>
   20dfc:	mov	r3, #7
   20e00:	mov	r1, r0
   20e04:	mov	r2, r4
   20e08:	mov	r0, r5
   20e0c:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   20e10:	add	sp, sp, #28
   20e14:	pop	{r4, r5, r6, r7, pc}

00020e18 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   20e18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e1c:	sub	sp, sp, #36	; 0x24
   20e20:	mov	r7, r0
   20e24:	str	r3, [sp, #8]
   20e28:	ldr	r3, [sp, #72]	; 0x48
   20e2c:	mov	sl, r2
   20e30:	adds	fp, r3, #0
   20e34:	movne	fp, #1
   20e38:	str	r3, [sp, #20]
   20e3c:	bl	1fac4 <flatcc_json_parser_set_error@@Base+0xfc>
   20e40:	mov	r1, r0
   20e44:	mov	r9, r0
   20e48:	mov	r0, r7
   20e4c:	bl	1fb0c <flatcc_json_parser_string_part@@Base>
   20e50:	cmp	r2, r0
   20e54:	mov	r6, r0
   20e58:	beq	20fdc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c4>
   20e5c:	ldrb	r3, [r0]
   20e60:	cmp	r3, #34	; 0x22
   20e64:	bne	20fdc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c4>
   20e68:	sub	r8, r0, r9
   20e6c:	and	r3, r8, #3
   20e70:	lsr	r5, r8, #2
   20e74:	cmp	r3, #2
   20e78:	add	r5, r5, r5, lsl #1
   20e7c:	addeq	r5, r5, #1
   20e80:	beq	20e8c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x74>
   20e84:	cmp	r3, #3
   20e88:	addeq	r5, r5, #2
   20e8c:	mov	r2, #1
   20e90:	mvn	r3, #0
   20e94:	mov	r1, r2
   20e98:	ldr	r0, [r7]
   20e9c:	bl	1cf74 <flatcc_builder_start_vector@@Base>
   20ea0:	subs	r4, r0, #0
   20ea4:	bne	21114 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   20ea8:	mov	r1, r5
   20eac:	ldr	r0, [r7]
   20eb0:	bl	1ca9c <flatcc_builder_extend_vector@@Base>
   20eb4:	subs	r3, r0, #0
   20eb8:	str	r3, [sp, #12]
   20ebc:	beq	21114 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   20ec0:	ldr	r3, [pc, #628]	; 2113c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x324>
   20ec4:	cmp	fp, #0
   20ec8:	add	r2, r3, #256	; 0x100
   20ecc:	moveq	r3, r2
   20ed0:	cmp	r5, #0
   20ed4:	movne	fp, r5
   20ed8:	mvneq	fp, #0
   20edc:	mov	ip, r8
   20ee0:	mov	r1, r0
   20ee4:	str	r3, [sp, #16]
   20ee8:	str	r9, [sp, #4]
   20eec:	mov	r2, ip
   20ef0:	mov	r3, #0
   20ef4:	cmp	r3, r2
   20ef8:	bne	20f24 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x10c>
   20efc:	mov	lr, #0
   20f00:	cmp	r2, #2
   20f04:	beq	21058 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x240>
   20f08:	cmp	r2, #3
   20f0c:	beq	21080 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x268>
   20f10:	cmp	r2, #0
   20f14:	movne	r4, #4
   20f18:	bne	20fc4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   20f1c:	sub	lr, r8, lr
   20f20:	b	20fd0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   20f24:	ldr	r0, [sp, #4]
   20f28:	ldrb	lr, [r0, r3]
   20f2c:	ldr	r0, [sp, #16]
   20f30:	ldrb	lr, [r0, lr]
   20f34:	add	r0, sp, #32
   20f38:	add	r0, r0, r3
   20f3c:	cmp	lr, #63	; 0x3f
   20f40:	strb	lr, [r0, #-4]
   20f44:	bls	20f64 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   20f48:	cmp	lr, #65	; 0x41
   20f4c:	bne	20ffc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e4>
   20f50:	ldr	r0, [sp, #4]
   20f54:	sub	r2, r2, #1
   20f58:	sub	r3, r3, #1
   20f5c:	add	r0, r0, #1
   20f60:	str	r0, [sp, #4]
   20f64:	add	r3, r3, #1
   20f68:	cmp	r3, #3
   20f6c:	bls	20ef4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xdc>
   20f70:	cmp	fp, #2
   20f74:	bls	21048 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
   20f78:	ldrb	lr, [sp, #29]
   20f7c:	ldrb	r3, [sp, #28]
   20f80:	subs	fp, fp, #3
   20f84:	add	r1, r1, #3
   20f88:	lsr	ip, lr, #4
   20f8c:	orr	ip, ip, r3, lsl #2
   20f90:	strb	ip, [r1, #-3]
   20f94:	ldrb	ip, [sp, #30]
   20f98:	lsr	r3, ip, #2
   20f9c:	orr	r3, r3, lr, lsl #4
   20fa0:	strb	r3, [r1, #-2]
   20fa4:	ldrb	r3, [sp, #31]
   20fa8:	orr	ip, r3, ip, lsl #6
   20fac:	ldr	r3, [sp, #4]
   20fb0:	strb	ip, [r1, #-1]
   20fb4:	add	r3, r3, #4
   20fb8:	str	r3, [sp, #4]
   20fbc:	sub	ip, r2, #4
   20fc0:	bne	20eec <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd4>
   20fc4:	cmp	r4, #0
   20fc8:	sub	lr, r8, ip
   20fcc:	bne	20fd8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c0>
   20fd0:	cmp	r8, lr
   20fd4:	beq	210c0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2a8>
   20fd8:	add	r6, r9, lr
   20fdc:	ldr	r2, [sp, #8]
   20fe0:	mov	r3, #0
   20fe4:	str	r3, [r2]
   20fe8:	ldr	r3, [sp, #20]
   20fec:	cmp	r3, #0
   20ff0:	movne	r3, #32
   20ff4:	moveq	r3, #31
   20ff8:	b	21124 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x30c>
   20ffc:	cmp	lr, #66	; 0x42
   21000:	addeq	lr, r3, #1
   21004:	beq	21030 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x218>
   21008:	mov	lr, r3
   2100c:	b	2103c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x224>
   21010:	ldr	r0, [sp, #4]
   21014:	ldrb	r4, [r0, lr]
   21018:	ldr	r0, [sp, #16]
   2101c:	ldrb	r4, [r0, r4]
   21020:	sub	r4, r4, #65	; 0x41
   21024:	cmp	r4, #1
   21028:	bhi	2103c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x224>
   2102c:	add	lr, lr, #1
   21030:	cmp	lr, #7
   21034:	cmpls	lr, r2
   21038:	bcc	21010 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f8>
   2103c:	sub	lr, r2, lr
   21040:	mov	r2, r3
   21044:	b	20f00 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xe8>
   21048:	mov	r4, #1
   2104c:	b	20fc4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   21050:	mov	r4, #5
   21054:	b	20fc4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   21058:	ldrb	r3, [sp, #29]
   2105c:	lsl	r4, r3, #4
   21060:	ands	r4, r4, #255	; 0xff
   21064:	bne	21050 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x238>
   21068:	ldrb	r2, [sp, #28]
   2106c:	lsr	r3, r3, #4
   21070:	orr	r3, r3, r2, lsl #2
   21074:	strb	r3, [r1], #1
   21078:	mov	ip, lr
   2107c:	b	20fc4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   21080:	ldrb	r3, [sp, #30]
   21084:	lsl	r4, r3, #6
   21088:	ands	r4, r4, #255	; 0xff
   2108c:	bne	21050 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x238>
   21090:	cmp	fp, #1
   21094:	beq	21048 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
   21098:	ldrb	r0, [sp, #29]
   2109c:	ldrb	ip, [sp, #28]
   210a0:	lsr	r3, r3, #2
   210a4:	add	r1, r1, #2
   210a8:	lsr	r2, r0, #4
   210ac:	orr	r2, r2, ip, lsl #2
   210b0:	orr	r0, r3, r0, lsl #4
   210b4:	strb	r2, [r1, #-2]
   210b8:	strb	r0, [r1, #-1]
   210bc:	b	21078 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x260>
   210c0:	ldr	r3, [sp, #12]
   210c4:	sub	r1, r1, r3
   210c8:	cmp	r5, r1
   210cc:	bhi	21100 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e8>
   210d0:	ldr	r0, [r7]
   210d4:	bl	1d8ec <flatcc_builder_end_vector@@Base>
   210d8:	ldr	r3, [sp, #8]
   210dc:	cmp	r0, #0
   210e0:	str	r0, [r3]
   210e4:	beq	21114 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   210e8:	mov	r2, sl
   210ec:	mov	r1, r6
   210f0:	mov	r0, r7
   210f4:	add	sp, sp, #36	; 0x24
   210f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   210fc:	b	1fae8 <flatcc_json_parser_set_error@@Base+0x120>
   21100:	sub	r1, r5, r1
   21104:	ldr	r0, [r7]
   21108:	bl	1ce18 <flatcc_builder_truncate_vector@@Base>
   2110c:	cmp	r0, #0
   21110:	beq	210d0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2b8>
   21114:	ldr	r2, [sp, #8]
   21118:	mov	r3, #0
   2111c:	str	r3, [r2]
   21120:	mov	r3, #33	; 0x21
   21124:	mov	r2, sl
   21128:	mov	r1, r6
   2112c:	mov	r0, r7
   21130:	add	sp, sp, #36	; 0x24
   21134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21138:	b	1f9c8 <flatcc_json_parser_set_error@@Base>
   2113c:	andeq	r3, r2, r8, lsr #12

00021140 <flatcc_json_parser_build_string@@Base>:
   21140:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21144:	mov	r5, r0
   21148:	mov	r6, r2
   2114c:	mov	r8, r3
   21150:	bl	1fac4 <flatcc_json_parser_set_error@@Base+0xfc>
   21154:	mov	r1, r0
   21158:	mov	r7, r0
   2115c:	mov	r0, r5
   21160:	bl	1fb0c <flatcc_json_parser_string_part@@Base>
   21164:	cmp	r2, r0
   21168:	mov	r4, r0
   2116c:	beq	211b0 <flatcc_json_parser_build_string@@Base+0x70>
   21170:	ldrb	r3, [r0]
   21174:	cmp	r3, #34	; 0x22
   21178:	bne	211b0 <flatcc_json_parser_build_string@@Base+0x70>
   2117c:	sub	r2, r0, r7
   21180:	mov	r1, r7
   21184:	ldr	r0, [r5]
   21188:	bl	1dec0 <flatcc_builder_create_string@@Base>
   2118c:	str	r0, [r8]
   21190:	mov	r1, r4
   21194:	mov	r2, r6
   21198:	mov	r0, r5
   2119c:	bl	1fae8 <flatcc_json_parser_set_error@@Base+0x120>
   211a0:	mov	r4, r0
   211a4:	mov	r0, r4
   211a8:	add	sp, sp, #12
   211ac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   211b0:	ldr	r0, [r5]
   211b4:	bl	1d014 <flatcc_builder_start_string@@Base>
   211b8:	cmp	r0, #0
   211bc:	bne	211dc <flatcc_json_parser_build_string@@Base+0x9c>
   211c0:	sub	r2, r4, r7
   211c4:	mov	r1, r7
   211c8:	ldr	r0, [r5]
   211cc:	bl	1cd44 <flatcc_builder_append_string@@Base>
   211d0:	cmp	r0, #0
   211d4:	addne	r9, sp, #5
   211d8:	bne	21264 <flatcc_json_parser_build_string@@Base+0x124>
   211dc:	mov	r3, #0
   211e0:	str	r3, [r8]
   211e4:	b	211a4 <flatcc_json_parser_build_string@@Base+0x64>
   211e8:	sub	r2, r0, r4
   211ec:	mov	r1, r4
   211f0:	ldr	r0, [r5]
   211f4:	bl	1cd44 <flatcc_builder_append_string@@Base>
   211f8:	cmp	r0, #0
   211fc:	bne	21260 <flatcc_json_parser_build_string@@Base+0x120>
   21200:	mov	r4, r7
   21204:	b	211dc <flatcc_json_parser_build_string@@Base+0x9c>
   21208:	ldrb	r3, [r4]
   2120c:	cmp	r3, #34	; 0x22
   21210:	beq	2126c <flatcc_json_parser_build_string@@Base+0x12c>
   21214:	mov	r1, r4
   21218:	add	r3, sp, #4
   2121c:	mov	r2, r6
   21220:	mov	r0, r5
   21224:	bl	200a0 <flatcc_json_parser_string_escape@@Base>
   21228:	ldrb	r2, [sp, #4]
   2122c:	mov	r1, r9
   21230:	mov	r4, r0
   21234:	ldr	r0, [r5]
   21238:	bl	1cd44 <flatcc_builder_append_string@@Base>
   2123c:	cmp	r0, #0
   21240:	beq	211dc <flatcc_json_parser_build_string@@Base+0x9c>
   21244:	mov	r2, r6
   21248:	mov	r1, r4
   2124c:	mov	r0, r5
   21250:	bl	1fb0c <flatcc_json_parser_string_part@@Base>
   21254:	cmp	r6, r0
   21258:	mov	r7, r0
   2125c:	bne	211e8 <flatcc_json_parser_build_string@@Base+0xa8>
   21260:	mov	r4, r7
   21264:	cmp	r4, r6
   21268:	bne	21208 <flatcc_json_parser_build_string@@Base+0xc8>
   2126c:	ldr	r0, [r5]
   21270:	bl	1dfb8 <flatcc_builder_end_string@@Base>
   21274:	b	2118c <flatcc_json_parser_build_string@@Base+0x4c>

00021278 <flatcc_json_parser_prepare_unions@@Base>:
   21278:	push	{r4, r5, r6, r7, r8, lr}
   2127c:	mov	r5, r1
   21280:	mov	r1, #24
   21284:	mov	r4, r0
   21288:	mul	r1, r1, r3
   2128c:	ldr	r0, [r0]
   21290:	add	r1, r1, #8
   21294:	ldr	r8, [sp, #24]
   21298:	mov	r7, r2
   2129c:	mov	r6, r3
   212a0:	bl	1c3ec <flatcc_builder_enter_user_frame@@Base>
   212a4:	cmp	r0, #0
   212a8:	str	r0, [r8]
   212ac:	bne	212c8 <flatcc_json_parser_prepare_unions@@Base+0x50>
   212b0:	mov	r2, r7
   212b4:	mov	r1, r5
   212b8:	mov	r0, r4
   212bc:	mov	r3, #33	; 0x21
   212c0:	pop	{r4, r5, r6, r7, r8, lr}
   212c4:	b	1f9c8 <flatcc_json_parser_set_error@@Base>
   212c8:	mov	r1, r0
   212cc:	ldr	r0, [r4]
   212d0:	bl	1c4ec <flatcc_builder_get_user_frame_ptr@@Base>
   212d4:	str	r6, [r0]
   212d8:	mov	r0, r5
   212dc:	pop	{r4, r5, r6, r7, r8, pc}

000212e0 <flatcc_json_parser_finalize_unions@@Base>:
   212e0:	push	{r4, r5, r6, r7, r8, lr}
   212e4:	mov	r5, r0
   212e8:	mov	r4, r1
   212ec:	ldr	r0, [r0]
   212f0:	mov	r1, r3
   212f4:	mov	r6, r3
   212f8:	mov	r7, r2
   212fc:	bl	1c4ec <flatcc_builder_get_user_frame_ptr@@Base>
   21300:	ldr	r3, [r0, #4]
   21304:	cmp	r3, #0
   21308:	beq	21324 <flatcc_json_parser_finalize_unions@@Base+0x44>
   2130c:	mov	r1, r4
   21310:	mov	r3, #27
   21314:	mov	r2, r7
   21318:	mov	r0, r5
   2131c:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   21320:	mov	r4, r0
   21324:	mov	r1, r6
   21328:	ldr	r0, [r5]
   2132c:	bl	1c4a8 <flatcc_builder_exit_user_frame_at@@Base>
   21330:	mov	r0, r4
   21334:	pop	{r4, r5, r6, r7, r8, pc}

00021338 <flatcc_json_parser_union@@Base>:
   21338:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2133c:	mov	r4, r0
   21340:	mov	r7, r1
   21344:	ldr	r0, [r0]
   21348:	ldr	r1, [sp, #44]	; 0x2c
   2134c:	mov	r5, r3
   21350:	mov	r6, r2
   21354:	bl	1c4ec <flatcc_builder_get_user_frame_ptr@@Base>
   21358:	mov	r3, #24
   2135c:	mla	r3, r3, r5, r0
   21360:	ldr	r2, [r3, #8]
   21364:	cmp	r2, #0
   21368:	movne	r3, #28
   2136c:	bne	213d0 <flatcc_json_parser_union@@Base+0x98>
   21370:	ldrb	r2, [r3, #20]
   21374:	cmp	r2, #0
   21378:	bne	213bc <flatcc_json_parser_union@@Base+0x84>
   2137c:	ldr	r2, [r0, #4]
   21380:	mov	r1, r7
   21384:	add	r2, r2, #1
   21388:	str	r2, [r0, #4]
   2138c:	ldr	r2, [r4, #16]
   21390:	mov	r0, r4
   21394:	str	r2, [r3, #16]
   21398:	ldr	r2, [r4, #4]
   2139c:	str	r7, [r3, #8]
   213a0:	str	r2, [r3, #12]
   213a4:	mov	r2, r6
   213a8:	bl	20724 <flatcc_json_parser_generic_json@@Base>
   213ac:	mov	r5, r0
   213b0:	mov	r0, r5
   213b4:	add	sp, sp, #16
   213b8:	pop	{r4, r5, r6, r7, r8, pc}
   213bc:	ldrb	r3, [r3, #21]
   213c0:	cmp	r3, #0
   213c4:	strb	r3, [sp, #8]
   213c8:	bne	213e4 <flatcc_json_parser_union@@Base+0xac>
   213cc:	mov	r3, #25
   213d0:	mov	r2, r6
   213d4:	mov	r1, r7
   213d8:	mov	r0, r4
   213dc:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   213e0:	b	213ac <flatcc_json_parser_union@@Base+0x74>
   213e4:	ldr	r2, [r0, #4]
   213e8:	ldr	r5, [sp, #48]	; 0x30
   213ec:	sub	r2, r2, #1
   213f0:	str	r2, [r0, #4]
   213f4:	add	r2, sp, #12
   213f8:	str	r2, [sp]
   213fc:	mov	r1, r7
   21400:	mov	r2, r6
   21404:	mov	r0, r4
   21408:	blx	r5
   2140c:	add	r8, sp, #8
   21410:	cmp	r6, r0
   21414:	mov	r5, r0
   21418:	beq	213b0 <flatcc_json_parser_union@@Base+0x78>
   2141c:	ldm	r8, {r2, r3}
   21420:	ldrh	r1, [sp, #40]	; 0x28
   21424:	ldr	r0, [r4]
   21428:	bl	1e330 <flatcc_builder_table_add_union@@Base>
   2142c:	cmp	r0, #0
   21430:	beq	213b0 <flatcc_json_parser_union@@Base+0x78>
   21434:	mov	r3, #28
   21438:	mov	r2, r6
   2143c:	mov	r1, r5
   21440:	b	213d8 <flatcc_json_parser_union@@Base+0xa0>

00021444 <flatcc_json_parser_union_type@@Base>:
   21444:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21448:	sub	sp, sp, #28
   2144c:	mov	r9, r1
   21450:	mov	r4, r0
   21454:	ldr	r1, [sp, #68]	; 0x44
   21458:	ldr	r0, [r0]
   2145c:	mov	r5, r3
   21460:	mov	r6, r2
   21464:	bl	1c4ec <flatcc_builder_get_user_frame_ptr@@Base>
   21468:	mov	r3, #24
   2146c:	mul	r3, r3, r5
   21470:	str	r3, [sp, #12]
   21474:	add	sl, r0, #8
   21478:	add	r7, sl, r3
   2147c:	ldrb	r3, [r7, #12]
   21480:	cmp	r3, #0
   21484:	movne	r3, #28
   21488:	movne	r2, r6
   2148c:	movne	r1, r9
   21490:	bne	215a8 <flatcc_json_parser_union_type@@Base+0x164>
   21494:	mov	r3, #1
   21498:	add	fp, r7, #13
   2149c:	strb	r3, [r7, #12]
   214a0:	mov	r8, r0
   214a4:	mov	r3, fp
   214a8:	mov	r2, r6
   214ac:	mov	r1, r9
   214b0:	mov	r0, r4
   214b4:	bl	20d84 <flatcc_json_parser_integer@@Base+0xc8>
   214b8:	cmp	r9, r0
   214bc:	mov	r5, r0
   214c0:	bne	214e0 <flatcc_json_parser_union_type@@Base+0x9c>
   214c4:	mov	r1, r0
   214c8:	str	fp, [sp]
   214cc:	ldr	r3, [sp, #72]	; 0x48
   214d0:	mov	r2, r6
   214d4:	mov	r0, r4
   214d8:	bl	1fd38 <flatcc_json_parser_space_ext@@Base+0x1b0>
   214dc:	mov	r5, r0
   214e0:	ldr	r3, [sp, #12]
   214e4:	ldr	r1, [sl, r3]
   214e8:	ldr	r3, [r8, #4]
   214ec:	cmp	r1, #0
   214f0:	bne	21510 <flatcc_json_parser_union_type@@Base+0xcc>
   214f4:	ldrb	r2, [r7, #13]
   214f8:	cmp	r2, #0
   214fc:	addne	r3, r3, #1
   21500:	str	r3, [r8, #4]
   21504:	mov	r0, r5
   21508:	add	sp, sp, #28
   2150c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21510:	cmp	r3, #0
   21514:	bne	2152c <flatcc_json_parser_union_type@@Base+0xe8>
   21518:	ldr	r3, [pc, #152]	; 215b8 <flatcc_json_parser_union_type@@Base+0x174>
   2151c:	ldr	r2, [pc, #152]	; 215bc <flatcc_json_parser_union_type@@Base+0x178>
   21520:	ldr	r1, [pc, #152]	; 215c0 <flatcc_json_parser_union_type@@Base+0x17c>
   21524:	ldr	r0, [pc, #152]	; 215c4 <flatcc_json_parser_union_type@@Base+0x180>
   21528:	bl	126d8 <__assert_fail@plt>
   2152c:	sub	r3, r3, #1
   21530:	str	r3, [r8, #4]
   21534:	ldr	r3, [r7, #8]
   21538:	ldr	r9, [r4, #16]
   2153c:	str	r3, [r4, #16]
   21540:	ldr	r3, [r7, #4]
   21544:	ldr	r8, [r4, #4]
   21548:	str	r3, [r4, #4]
   2154c:	ldrb	r3, [r7, #13]
   21550:	add	r7, sp, #24
   21554:	mov	r0, r4
   21558:	strb	r3, [r7, #-8]!
   2155c:	add	r2, r7, #4
   21560:	str	r2, [sp]
   21564:	ldr	sl, [sp, #76]	; 0x4c
   21568:	mov	r2, r6
   2156c:	blx	sl
   21570:	cmp	r6, r0
   21574:	moveq	r5, r6
   21578:	beq	21504 <flatcc_json_parser_union_type@@Base+0xc0>
   2157c:	ldm	r7, {r2, r3}
   21580:	ldrh	r1, [sp, #64]	; 0x40
   21584:	ldr	r0, [r4]
   21588:	bl	1e330 <flatcc_builder_table_add_union@@Base>
   2158c:	cmp	r0, #0
   21590:	streq	r9, [r4, #16]
   21594:	streq	r8, [r4, #4]
   21598:	beq	21504 <flatcc_json_parser_union_type@@Base+0xc0>
   2159c:	mov	r3, #28
   215a0:	mov	r2, r6
   215a4:	mov	r1, r5
   215a8:	mov	r0, r4
   215ac:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   215b0:	mov	r5, r0
   215b4:	b	21504 <flatcc_json_parser_union_type@@Base+0xc0>
   215b8:	andeq	r3, r2, r8, lsr #16
   215bc:	andeq	r0, r0, r5, asr #7
   215c0:			; <UNDEFINED> instruction: 0x000239b9
   215c4:	andeq	r3, r2, r3, lsl #20

000215c8 <flatcc_json_parser_union_vector@@Base>:
   215c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   215cc:	mov	r4, r0
   215d0:	mov	r5, r1
   215d4:	ldr	r0, [r0]
   215d8:	ldr	r1, [sp, #36]	; 0x24
   215dc:	mov	r9, r3
   215e0:	mov	r6, r2
   215e4:	ldrh	r7, [sp, #32]
   215e8:	ldr	r8, [sp, #40]	; 0x28
   215ec:	bl	1c4ec <flatcc_builder_get_user_frame_ptr@@Base>
   215f0:	mov	r3, #24
   215f4:	mul	r3, r3, r9
   215f8:	add	r2, r0, #8
   215fc:	add	ip, r2, r3
   21600:	ldr	r1, [r2, r3]
   21604:	cmp	r1, #0
   21608:	beq	21624 <flatcc_json_parser_union_vector@@Base+0x5c>
   2160c:	mov	r2, r6
   21610:	mov	r1, r5
   21614:	mov	r0, r4
   21618:	mov	r3, #28
   2161c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   21620:	b	1f9c8 <flatcc_json_parser_set_error@@Base>
   21624:	ldrb	r1, [ip, #12]
   21628:	cmp	r1, #0
   2162c:	ldr	r1, [r0, #4]
   21630:	bne	21664 <flatcc_json_parser_union_vector@@Base+0x9c>
   21634:	add	r1, r1, #1
   21638:	str	r1, [r0, #4]
   2163c:	ldr	r1, [r4, #16]
   21640:	mov	r0, r4
   21644:	str	r1, [ip, #8]
   21648:	ldr	r1, [r4, #4]
   2164c:	str	r1, [ip, #4]
   21650:	str	r5, [r2, r3]
   21654:	mov	r1, r5
   21658:	mov	r2, r6
   2165c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   21660:	b	20724 <flatcc_json_parser_generic_json@@Base>
   21664:	sub	r1, r1, #1
   21668:	str	r1, [r0, #4]
   2166c:	str	r8, [sp, #40]	; 0x28
   21670:	str	r7, [sp, #36]	; 0x24
   21674:	ldr	r3, [ip, #16]
   21678:	mov	r2, r6
   2167c:	str	r3, [sp, #32]
   21680:	mov	r1, r5
   21684:	mov	r0, r4
   21688:	ldr	r3, [ip, #20]
   2168c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   21690:	b	1ff50 <flatcc_json_parser_space_ext@@Base+0x3c8>

00021694 <flatcc_json_parser_union_type_vector@@Base>:
   21694:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21698:	sub	sp, sp, #36	; 0x24
   2169c:	mov	r4, r0
   216a0:	mov	r5, r1
   216a4:	ldr	r0, [r0]
   216a8:	ldr	r1, [sp, #76]	; 0x4c
   216ac:	mov	r7, r3
   216b0:	mov	r6, r2
   216b4:	ldrh	r9, [sp, #72]	; 0x48
   216b8:	bl	1c4ec <flatcc_builder_get_user_frame_ptr@@Base>
   216bc:	mov	r3, #24
   216c0:	mul	r7, r3, r7
   216c4:	add	r0, r0, #8
   216c8:	add	r8, r0, r7
   216cc:	ldrb	r3, [r8, #12]
   216d0:	cmp	r3, #0
   216d4:	movne	r3, #28
   216d8:	bne	21908 <flatcc_json_parser_union_type_vector@@Base+0x274>
   216dc:	mov	sl, #1
   216e0:	strb	sl, [r8, #12]
   216e4:	mvn	r3, #0
   216e8:	mov	r2, sl
   216ec:	mov	r1, sl
   216f0:	ldr	r0, [r4]
   216f4:	bl	1cf74 <flatcc_builder_start_vector@@Base>
   216f8:	cmp	r0, #0
   216fc:	bne	21904 <flatcc_json_parser_union_type_vector@@Base+0x270>
   21700:	mov	r1, r5
   21704:	add	r3, sp, #28
   21708:	mov	r2, r6
   2170c:	mov	r0, r4
   21710:	bl	1fecc <flatcc_json_parser_space_ext@@Base+0x344>
   21714:	str	sl, [sp, #16]
   21718:	add	sl, sp, #27
   2171c:	mov	r5, r0
   21720:	ldr	r3, [sp, #28]
   21724:	cmp	r3, #0
   21728:	bne	217e8 <flatcc_json_parser_union_type_vector@@Base+0x154>
   2172c:	ldr	r0, [r4]
   21730:	bl	1d964 <flatcc_builder_vector_count@@Base>
   21734:	str	r0, [r8, #16]
   21738:	mov	r1, r0
   2173c:	mov	sl, r0
   21740:	ldr	r0, [r4]
   21744:	bl	1c3ec <flatcc_builder_enter_user_frame@@Base>
   21748:	mov	r1, r0
   2174c:	mov	r8, r0
   21750:	ldr	r0, [r4]
   21754:	bl	1c4ec <flatcc_builder_get_user_frame_ptr@@Base>
   21758:	mov	fp, r0
   2175c:	ldr	r0, [r4]
   21760:	bl	1d970 <flatcc_builder_vector_edit@@Base>
   21764:	mov	r2, sl
   21768:	mov	r1, r0
   2176c:	mov	r0, fp
   21770:	bl	125dc <memcpy@plt>
   21774:	ldr	r0, [r4]
   21778:	bl	1d8ec <flatcc_builder_end_vector@@Base>
   2177c:	subs	fp, r0, #0
   21780:	beq	21904 <flatcc_json_parser_union_type_vector@@Base+0x270>
   21784:	sub	r1, r9, #1
   21788:	ldr	r0, [r4]
   2178c:	bl	1e204 <flatcc_builder_table_add_offset@@Base>
   21790:	cmp	r0, #0
   21794:	beq	21904 <flatcc_json_parser_union_type_vector@@Base+0x270>
   21798:	str	fp, [r0]
   2179c:	ldr	r1, [sp, #76]	; 0x4c
   217a0:	ldr	r0, [r4]
   217a4:	bl	1c4ec <flatcc_builder_get_user_frame_ptr@@Base>
   217a8:	add	r3, r0, #8
   217ac:	add	r2, r3, r7
   217b0:	ldr	r1, [r3, r7]
   217b4:	ldr	r3, [r0, #4]
   217b8:	cmp	r1, #0
   217bc:	addeq	r3, r3, #1
   217c0:	str	r8, [r2, #20]
   217c4:	streq	r3, [r0, #4]
   217c8:	beq	218f4 <flatcc_json_parser_union_type_vector@@Base+0x260>
   217cc:	cmp	r3, #0
   217d0:	bne	218a4 <flatcc_json_parser_union_type_vector@@Base+0x210>
   217d4:	ldr	r3, [pc, #312]	; 21914 <flatcc_json_parser_union_type_vector@@Base+0x280>
   217d8:	ldr	r2, [pc, #312]	; 21918 <flatcc_json_parser_union_type_vector@@Base+0x284>
   217dc:	ldr	r1, [pc, #312]	; 2191c <flatcc_json_parser_union_type_vector@@Base+0x288>
   217e0:	ldr	r0, [pc, #312]	; 21920 <flatcc_json_parser_union_type_vector@@Base+0x28c>
   217e4:	bl	126d8 <__assert_fail@plt>
   217e8:	ldr	r1, [sp, #16]
   217ec:	ldr	r0, [r4]
   217f0:	bl	1ca9c <flatcc_builder_extend_vector@@Base>
   217f4:	subs	fp, r0, #0
   217f8:	beq	21904 <flatcc_json_parser_union_type_vector@@Base+0x270>
   217fc:	mov	r1, r5
   21800:	mov	r3, sl
   21804:	mov	r2, r6
   21808:	mov	r0, r4
   2180c:	bl	20d84 <flatcc_json_parser_integer@@Base+0xc8>
   21810:	cmp	r5, r0
   21814:	mov	r1, r0
   21818:	bne	21844 <flatcc_json_parser_union_type_vector@@Base+0x1b0>
   2181c:	mov	r1, r5
   21820:	str	sl, [sp]
   21824:	ldr	r3, [sp, #80]	; 0x50
   21828:	mov	r2, r6
   2182c:	mov	r0, r4
   21830:	bl	1fd38 <flatcc_json_parser_space_ext@@Base+0x1b0>
   21834:	cmp	r6, r0
   21838:	cmpne	r5, r0
   2183c:	mov	r1, r0
   21840:	beq	21900 <flatcc_json_parser_union_type_vector@@Base+0x26c>
   21844:	ldrb	r0, [sp, #27]
   21848:	ldr	r3, [sp, #88]	; 0x58
   2184c:	str	r1, [sp, #20]
   21850:	blx	r3
   21854:	ldr	r1, [sp, #20]
   21858:	cmp	r0, #0
   2185c:	bne	21884 <flatcc_json_parser_union_type_vector@@Base+0x1f0>
   21860:	ldr	r3, [r4, #8]
   21864:	tst	r3, #1
   21868:	bne	21880 <flatcc_json_parser_union_type_vector@@Base+0x1ec>
   2186c:	mov	r3, #15
   21870:	mov	r2, r6
   21874:	mov	r0, r4
   21878:	bl	1f9c8 <flatcc_json_parser_set_error@@Base>
   2187c:	b	218f8 <flatcc_json_parser_union_type_vector@@Base+0x264>
   21880:	strb	r0, [sp, #27]
   21884:	ldrb	r3, [sp, #27]
   21888:	mov	r2, r6
   2188c:	mov	r0, r4
   21890:	strb	r3, [fp]
   21894:	add	r3, sp, #28
   21898:	bl	1fc8c <flatcc_json_parser_space_ext@@Base+0x104>
   2189c:	mov	r5, r0
   218a0:	b	21720 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   218a4:	sub	r3, r3, #1
   218a8:	str	r3, [r0, #4]
   218ac:	ldr	r3, [r2, #8]
   218b0:	ldr	fp, [r4, #16]
   218b4:	str	r3, [r4, #16]
   218b8:	ldr	r3, [r2, #4]
   218bc:	ldr	r7, [r4, #4]
   218c0:	str	r3, [r4, #4]
   218c4:	ldr	r3, [sp, #84]	; 0x54
   218c8:	str	r9, [sp, #4]
   218cc:	str	r3, [sp, #8]
   218d0:	str	sl, [sp]
   218d4:	mov	r3, r8
   218d8:	mov	r2, r6
   218dc:	mov	r0, r4
   218e0:	bl	1ff50 <flatcc_json_parser_space_ext@@Base+0x3c8>
   218e4:	cmp	r6, r0
   218e8:	beq	218f8 <flatcc_json_parser_union_type_vector@@Base+0x264>
   218ec:	str	fp, [r4, #16]
   218f0:	str	r7, [r4, #4]
   218f4:	mov	r0, r5
   218f8:	add	sp, sp, #36	; 0x24
   218fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21900:	mov	r5, r0
   21904:	mov	r3, #33	; 0x21
   21908:	mov	r2, r6
   2190c:	mov	r1, r5
   21910:	b	21874 <flatcc_json_parser_union_type_vector@@Base+0x1e0>
   21914:	andeq	r3, r2, r6, asr #16
   21918:	andeq	r0, r0, r2, ror #8
   2191c:			; <UNDEFINED> instruction: 0x000239b9
   21920:	andeq	r3, r2, r3, lsl #20

00021924 <flatcc_json_parser_struct_as_root@@Base>:
   21924:	push	{r4, r5, r6, r7, r8, r9, lr}
   21928:	sub	sp, sp, #52	; 0x34
   2192c:	mov	r5, r2
   21930:	ldr	r9, [sp, #80]	; 0x50
   21934:	add	r6, r2, r3
   21938:	ands	r8, r9, #4
   2193c:	movne	r8, #2
   21940:	subs	r4, r1, #0
   21944:	addeq	r4, sp, #4
   21948:	mov	r7, r0
   2194c:	mov	r2, #44	; 0x2c
   21950:	mov	r1, #0
   21954:	mov	r0, r4
   21958:	bl	12678 <memset@plt>
   2195c:	mov	r3, #1
   21960:	str	r3, [r4, #16]
   21964:	str	r7, [r4]
   21968:	str	r5, [r4, #4]
   2196c:	str	r9, [r4, #8]
   21970:	str	r5, [r4, #28]
   21974:	str	r6, [r4, #32]
   21978:	str	r5, [r4, #36]	; 0x24
   2197c:	mov	r3, r8
   21980:	mov	r2, #0
   21984:	ldr	r1, [sp, #84]	; 0x54
   21988:	mov	r0, r7
   2198c:	bl	1c88c <flatcc_builder_start_buffer@@Base>
   21990:	cmp	r0, #0
   21994:	beq	219a8 <flatcc_json_parser_struct_as_root@@Base+0x84>
   21998:	mvn	r6, #0
   2199c:	mov	r0, r6
   219a0:	add	sp, sp, #52	; 0x34
   219a4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   219a8:	mov	r2, r6
   219ac:	mov	r3, sp
   219b0:	ldr	r6, [sp, #88]	; 0x58
   219b4:	mov	r1, r5
   219b8:	mov	r0, r4
   219bc:	blx	r6
   219c0:	ldr	r6, [r4, #24]
   219c4:	cmp	r6, #0
   219c8:	bne	2199c <flatcc_json_parser_struct_as_root@@Base+0x78>
   219cc:	ldr	r1, [sp]
   219d0:	mov	r0, r7
   219d4:	bl	1c92c <flatcc_builder_end_buffer@@Base>
   219d8:	cmp	r0, #0
   219dc:	beq	21998 <flatcc_json_parser_struct_as_root@@Base+0x74>
   219e0:	str	r5, [r4, #40]	; 0x28
   219e4:	b	2199c <flatcc_json_parser_struct_as_root@@Base+0x78>

000219e8 <flatcc_json_parser_table_as_root@@Base>:
   219e8:	b	21924 <flatcc_json_parser_struct_as_root@@Base>
   219ec:	subs	r2, r1, #1
   219f0:	bxeq	lr
   219f4:	bcc	21bcc <flatcc_json_parser_table_as_root@@Base+0x1e4>
   219f8:	cmp	r0, r1
   219fc:	bls	21bb0 <flatcc_json_parser_table_as_root@@Base+0x1c8>
   21a00:	tst	r1, r2
   21a04:	beq	21bbc <flatcc_json_parser_table_as_root@@Base+0x1d4>
   21a08:	clz	r3, r0
   21a0c:	clz	r2, r1
   21a10:	sub	r3, r2, r3
   21a14:	rsbs	r3, r3, #31
   21a18:	addne	r3, r3, r3, lsl #1
   21a1c:	mov	r2, #0
   21a20:	addne	pc, pc, r3, lsl #2
   21a24:	nop			; (mov r0, r0)
   21a28:	cmp	r0, r1, lsl #31
   21a2c:	adc	r2, r2, r2
   21a30:	subcs	r0, r0, r1, lsl #31
   21a34:	cmp	r0, r1, lsl #30
   21a38:	adc	r2, r2, r2
   21a3c:	subcs	r0, r0, r1, lsl #30
   21a40:	cmp	r0, r1, lsl #29
   21a44:	adc	r2, r2, r2
   21a48:	subcs	r0, r0, r1, lsl #29
   21a4c:	cmp	r0, r1, lsl #28
   21a50:	adc	r2, r2, r2
   21a54:	subcs	r0, r0, r1, lsl #28
   21a58:	cmp	r0, r1, lsl #27
   21a5c:	adc	r2, r2, r2
   21a60:	subcs	r0, r0, r1, lsl #27
   21a64:	cmp	r0, r1, lsl #26
   21a68:	adc	r2, r2, r2
   21a6c:	subcs	r0, r0, r1, lsl #26
   21a70:	cmp	r0, r1, lsl #25
   21a74:	adc	r2, r2, r2
   21a78:	subcs	r0, r0, r1, lsl #25
   21a7c:	cmp	r0, r1, lsl #24
   21a80:	adc	r2, r2, r2
   21a84:	subcs	r0, r0, r1, lsl #24
   21a88:	cmp	r0, r1, lsl #23
   21a8c:	adc	r2, r2, r2
   21a90:	subcs	r0, r0, r1, lsl #23
   21a94:	cmp	r0, r1, lsl #22
   21a98:	adc	r2, r2, r2
   21a9c:	subcs	r0, r0, r1, lsl #22
   21aa0:	cmp	r0, r1, lsl #21
   21aa4:	adc	r2, r2, r2
   21aa8:	subcs	r0, r0, r1, lsl #21
   21aac:	cmp	r0, r1, lsl #20
   21ab0:	adc	r2, r2, r2
   21ab4:	subcs	r0, r0, r1, lsl #20
   21ab8:	cmp	r0, r1, lsl #19
   21abc:	adc	r2, r2, r2
   21ac0:	subcs	r0, r0, r1, lsl #19
   21ac4:	cmp	r0, r1, lsl #18
   21ac8:	adc	r2, r2, r2
   21acc:	subcs	r0, r0, r1, lsl #18
   21ad0:	cmp	r0, r1, lsl #17
   21ad4:	adc	r2, r2, r2
   21ad8:	subcs	r0, r0, r1, lsl #17
   21adc:	cmp	r0, r1, lsl #16
   21ae0:	adc	r2, r2, r2
   21ae4:	subcs	r0, r0, r1, lsl #16
   21ae8:	cmp	r0, r1, lsl #15
   21aec:	adc	r2, r2, r2
   21af0:	subcs	r0, r0, r1, lsl #15
   21af4:	cmp	r0, r1, lsl #14
   21af8:	adc	r2, r2, r2
   21afc:	subcs	r0, r0, r1, lsl #14
   21b00:	cmp	r0, r1, lsl #13
   21b04:	adc	r2, r2, r2
   21b08:	subcs	r0, r0, r1, lsl #13
   21b0c:	cmp	r0, r1, lsl #12
   21b10:	adc	r2, r2, r2
   21b14:	subcs	r0, r0, r1, lsl #12
   21b18:	cmp	r0, r1, lsl #11
   21b1c:	adc	r2, r2, r2
   21b20:	subcs	r0, r0, r1, lsl #11
   21b24:	cmp	r0, r1, lsl #10
   21b28:	adc	r2, r2, r2
   21b2c:	subcs	r0, r0, r1, lsl #10
   21b30:	cmp	r0, r1, lsl #9
   21b34:	adc	r2, r2, r2
   21b38:	subcs	r0, r0, r1, lsl #9
   21b3c:	cmp	r0, r1, lsl #8
   21b40:	adc	r2, r2, r2
   21b44:	subcs	r0, r0, r1, lsl #8
   21b48:	cmp	r0, r1, lsl #7
   21b4c:	adc	r2, r2, r2
   21b50:	subcs	r0, r0, r1, lsl #7
   21b54:	cmp	r0, r1, lsl #6
   21b58:	adc	r2, r2, r2
   21b5c:	subcs	r0, r0, r1, lsl #6
   21b60:	cmp	r0, r1, lsl #5
   21b64:	adc	r2, r2, r2
   21b68:	subcs	r0, r0, r1, lsl #5
   21b6c:	cmp	r0, r1, lsl #4
   21b70:	adc	r2, r2, r2
   21b74:	subcs	r0, r0, r1, lsl #4
   21b78:	cmp	r0, r1, lsl #3
   21b7c:	adc	r2, r2, r2
   21b80:	subcs	r0, r0, r1, lsl #3
   21b84:	cmp	r0, r1, lsl #2
   21b88:	adc	r2, r2, r2
   21b8c:	subcs	r0, r0, r1, lsl #2
   21b90:	cmp	r0, r1, lsl #1
   21b94:	adc	r2, r2, r2
   21b98:	subcs	r0, r0, r1, lsl #1
   21b9c:	cmp	r0, r1
   21ba0:	adc	r2, r2, r2
   21ba4:	subcs	r0, r0, r1
   21ba8:	mov	r0, r2
   21bac:	bx	lr
   21bb0:	moveq	r0, #1
   21bb4:	movne	r0, #0
   21bb8:	bx	lr
   21bbc:	clz	r2, r1
   21bc0:	rsb	r2, r2, #31
   21bc4:	lsr	r0, r0, r2
   21bc8:	bx	lr
   21bcc:	cmp	r0, #0
   21bd0:	mvnne	r0, #0
   21bd4:	b	22238 <flatcc_json_parser_table_as_root@@Base+0x850>
   21bd8:	cmp	r1, #0
   21bdc:	beq	21bcc <flatcc_json_parser_table_as_root@@Base+0x1e4>
   21be0:	push	{r0, r1, lr}
   21be4:	bl	219ec <flatcc_json_parser_table_as_root@@Base+0x4>
   21be8:	pop	{r1, r2, lr}
   21bec:	mul	r3, r2, r0
   21bf0:	sub	r1, r1, r3
   21bf4:	bx	lr
   21bf8:	subs	r3, r2, #32
   21bfc:	rsb	ip, r2, #32
   21c00:	lsrmi	r0, r0, r2
   21c04:	lsrpl	r0, r1, r3
   21c08:	orrmi	r0, r0, r1, lsl ip
   21c0c:	lsr	r1, r1, r2
   21c10:	bx	lr
   21c14:	subs	r3, r2, #32
   21c18:	rsb	ip, r2, #32
   21c1c:	lslmi	r1, r1, r2
   21c20:	lslpl	r1, r0, r3
   21c24:	orrmi	r1, r1, r0, lsr ip
   21c28:	lsl	r0, r0, r2
   21c2c:	bx	lr
   21c30:	eor	r1, r1, #-2147483648	; 0x80000000
   21c34:	b	21c3c <flatcc_json_parser_table_as_root@@Base+0x254>
   21c38:	eor	r3, r3, #-2147483648	; 0x80000000
   21c3c:	push	{r4, r5, lr}
   21c40:	lsl	r4, r1, #1
   21c44:	lsl	r5, r3, #1
   21c48:	teq	r4, r5
   21c4c:	teqeq	r0, r2
   21c50:	orrsne	ip, r4, r0
   21c54:	orrsne	ip, r5, r2
   21c58:	mvnsne	ip, r4, asr #21
   21c5c:	mvnsne	ip, r5, asr #21
   21c60:	beq	21e4c <flatcc_json_parser_table_as_root@@Base+0x464>
   21c64:	lsr	r4, r4, #21
   21c68:	rsbs	r5, r4, r5, lsr #21
   21c6c:	rsblt	r5, r5, #0
   21c70:	ble	21c90 <flatcc_json_parser_table_as_root@@Base+0x2a8>
   21c74:	add	r4, r4, r5
   21c78:	eor	r2, r0, r2
   21c7c:	eor	r3, r1, r3
   21c80:	eor	r0, r2, r0
   21c84:	eor	r1, r3, r1
   21c88:	eor	r2, r0, r2
   21c8c:	eor	r3, r1, r3
   21c90:	cmp	r5, #54	; 0x36
   21c94:	pophi	{r4, r5, pc}
   21c98:	tst	r1, #-2147483648	; 0x80000000
   21c9c:	lsl	r1, r1, #12
   21ca0:	mov	ip, #1048576	; 0x100000
   21ca4:	orr	r1, ip, r1, lsr #12
   21ca8:	beq	21cb4 <flatcc_json_parser_table_as_root@@Base+0x2cc>
   21cac:	rsbs	r0, r0, #0
   21cb0:	rsc	r1, r1, #0
   21cb4:	tst	r3, #-2147483648	; 0x80000000
   21cb8:	lsl	r3, r3, #12
   21cbc:	orr	r3, ip, r3, lsr #12
   21cc0:	beq	21ccc <flatcc_json_parser_table_as_root@@Base+0x2e4>
   21cc4:	rsbs	r2, r2, #0
   21cc8:	rsc	r3, r3, #0
   21ccc:	teq	r4, r5
   21cd0:	beq	21e34 <flatcc_json_parser_table_as_root@@Base+0x44c>
   21cd4:	sub	r4, r4, #1
   21cd8:	rsbs	lr, r5, #32
   21cdc:	blt	21cf8 <flatcc_json_parser_table_as_root@@Base+0x310>
   21ce0:	lsl	ip, r2, lr
   21ce4:	adds	r0, r0, r2, lsr r5
   21ce8:	adc	r1, r1, #0
   21cec:	adds	r0, r0, r3, lsl lr
   21cf0:	adcs	r1, r1, r3, asr r5
   21cf4:	b	21d14 <flatcc_json_parser_table_as_root@@Base+0x32c>
   21cf8:	sub	r5, r5, #32
   21cfc:	add	lr, lr, #32
   21d00:	cmp	r2, #1
   21d04:	lsl	ip, r3, lr
   21d08:	orrcs	ip, ip, #2
   21d0c:	adds	r0, r0, r3, asr r5
   21d10:	adcs	r1, r1, r3, asr #31
   21d14:	and	r5, r1, #-2147483648	; 0x80000000
   21d18:	bpl	21d28 <flatcc_json_parser_table_as_root@@Base+0x340>
   21d1c:	rsbs	ip, ip, #0
   21d20:	rscs	r0, r0, #0
   21d24:	rsc	r1, r1, #0
   21d28:	cmp	r1, #1048576	; 0x100000
   21d2c:	bcc	21d6c <flatcc_json_parser_table_as_root@@Base+0x384>
   21d30:	cmp	r1, #2097152	; 0x200000
   21d34:	bcc	21d54 <flatcc_json_parser_table_as_root@@Base+0x36c>
   21d38:	lsrs	r1, r1, #1
   21d3c:	rrxs	r0, r0
   21d40:	rrx	ip, ip
   21d44:	add	r4, r4, #1
   21d48:	lsl	r2, r4, #21
   21d4c:	cmn	r2, #4194304	; 0x400000
   21d50:	bcs	21eac <flatcc_json_parser_table_as_root@@Base+0x4c4>
   21d54:	cmp	ip, #-2147483648	; 0x80000000
   21d58:	lsrseq	ip, r0, #1
   21d5c:	adcs	r0, r0, #0
   21d60:	adc	r1, r1, r4, lsl #20
   21d64:	orr	r1, r1, r5
   21d68:	pop	{r4, r5, pc}
   21d6c:	lsls	ip, ip, #1
   21d70:	adcs	r0, r0, r0
   21d74:	adc	r1, r1, r1
   21d78:	tst	r1, #1048576	; 0x100000
   21d7c:	sub	r4, r4, #1
   21d80:	bne	21d54 <flatcc_json_parser_table_as_root@@Base+0x36c>
   21d84:	teq	r1, #0
   21d88:	moveq	r1, r0
   21d8c:	moveq	r0, #0
   21d90:	clz	r3, r1
   21d94:	addeq	r3, r3, #32
   21d98:	sub	r3, r3, #11
   21d9c:	subs	r2, r3, #32
   21da0:	bge	21dc4 <flatcc_json_parser_table_as_root@@Base+0x3dc>
   21da4:	adds	r2, r2, #12
   21da8:	ble	21dc0 <flatcc_json_parser_table_as_root@@Base+0x3d8>
   21dac:	add	ip, r2, #20
   21db0:	rsb	r2, r2, #12
   21db4:	lsl	r0, r1, ip
   21db8:	lsr	r1, r1, r2
   21dbc:	b	21dd4 <flatcc_json_parser_table_as_root@@Base+0x3ec>
   21dc0:	add	r2, r2, #20
   21dc4:	rsble	ip, r2, #32
   21dc8:	lsl	r1, r1, r2
   21dcc:	orrle	r1, r1, r0, lsr ip
   21dd0:	lslle	r0, r0, r2
   21dd4:	subs	r4, r4, r3
   21dd8:	addge	r1, r1, r4, lsl #20
   21ddc:	orrge	r1, r1, r5
   21de0:	popge	{r4, r5, pc}
   21de4:	mvn	r4, r4
   21de8:	subs	r4, r4, #31
   21dec:	bge	21e28 <flatcc_json_parser_table_as_root@@Base+0x440>
   21df0:	adds	r4, r4, #12
   21df4:	bgt	21e10 <flatcc_json_parser_table_as_root@@Base+0x428>
   21df8:	add	r4, r4, #20
   21dfc:	rsb	r2, r4, #32
   21e00:	lsr	r0, r0, r4
   21e04:	orr	r0, r0, r1, lsl r2
   21e08:	orr	r1, r5, r1, lsr r4
   21e0c:	pop	{r4, r5, pc}
   21e10:	rsb	r4, r4, #12
   21e14:	rsb	r2, r4, #32
   21e18:	lsr	r0, r0, r2
   21e1c:	orr	r0, r0, r1, lsl r4
   21e20:	mov	r1, r5
   21e24:	pop	{r4, r5, pc}
   21e28:	lsr	r0, r1, r4
   21e2c:	mov	r1, r5
   21e30:	pop	{r4, r5, pc}
   21e34:	teq	r4, #0
   21e38:	eor	r3, r3, #1048576	; 0x100000
   21e3c:	eoreq	r1, r1, #1048576	; 0x100000
   21e40:	addeq	r4, r4, #1
   21e44:	subne	r5, r5, #1
   21e48:	b	21cd4 <flatcc_json_parser_table_as_root@@Base+0x2ec>
   21e4c:	mvns	ip, r4, asr #21
   21e50:	mvnsne	ip, r5, asr #21
   21e54:	beq	21ebc <flatcc_json_parser_table_as_root@@Base+0x4d4>
   21e58:	teq	r4, r5
   21e5c:	teqeq	r0, r2
   21e60:	beq	21e74 <flatcc_json_parser_table_as_root@@Base+0x48c>
   21e64:	orrs	ip, r4, r0
   21e68:	moveq	r1, r3
   21e6c:	moveq	r0, r2
   21e70:	pop	{r4, r5, pc}
   21e74:	teq	r1, r3
   21e78:	movne	r1, #0
   21e7c:	movne	r0, #0
   21e80:	popne	{r4, r5, pc}
   21e84:	lsrs	ip, r4, #21
   21e88:	bne	21e9c <flatcc_json_parser_table_as_root@@Base+0x4b4>
   21e8c:	lsls	r0, r0, #1
   21e90:	adcs	r1, r1, r1
   21e94:	orrcs	r1, r1, #-2147483648	; 0x80000000
   21e98:	pop	{r4, r5, pc}
   21e9c:	adds	r4, r4, #4194304	; 0x400000
   21ea0:	addcc	r1, r1, #1048576	; 0x100000
   21ea4:	popcc	{r4, r5, pc}
   21ea8:	and	r5, r1, #-2147483648	; 0x80000000
   21eac:	orr	r1, r5, #2130706432	; 0x7f000000
   21eb0:	orr	r1, r1, #15728640	; 0xf00000
   21eb4:	mov	r0, #0
   21eb8:	pop	{r4, r5, pc}
   21ebc:	mvns	ip, r4, asr #21
   21ec0:	movne	r1, r3
   21ec4:	movne	r0, r2
   21ec8:	mvnseq	ip, r5, asr #21
   21ecc:	movne	r3, r1
   21ed0:	movne	r2, r0
   21ed4:	orrs	r4, r0, r1, lsl #12
   21ed8:	orrseq	r5, r2, r3, lsl #12
   21edc:	teqeq	r1, r3
   21ee0:	orrne	r1, r1, #524288	; 0x80000
   21ee4:	pop	{r4, r5, pc}
   21ee8:	teq	r0, #0
   21eec:	moveq	r1, #0
   21ef0:	bxeq	lr
   21ef4:	push	{r4, r5, lr}
   21ef8:	mov	r4, #1024	; 0x400
   21efc:	add	r4, r4, #50	; 0x32
   21f00:	mov	r5, #0
   21f04:	mov	r1, #0
   21f08:	b	21d84 <flatcc_json_parser_table_as_root@@Base+0x39c>
   21f0c:	teq	r0, #0
   21f10:	moveq	r1, #0
   21f14:	bxeq	lr
   21f18:	push	{r4, r5, lr}
   21f1c:	mov	r4, #1024	; 0x400
   21f20:	add	r4, r4, #50	; 0x32
   21f24:	ands	r5, r0, #-2147483648	; 0x80000000
   21f28:	rsbmi	r0, r0, #0
   21f2c:	mov	r1, #0
   21f30:	b	21d84 <flatcc_json_parser_table_as_root@@Base+0x39c>
   21f34:	lsls	r2, r0, #1
   21f38:	asr	r1, r2, #3
   21f3c:	rrx	r1, r1
   21f40:	lsl	r0, r2, #28
   21f44:	andsne	r3, r2, #-16777216	; 0xff000000
   21f48:	teqne	r3, #-16777216	; 0xff000000
   21f4c:	eorne	r1, r1, #939524096	; 0x38000000
   21f50:	bxne	lr
   21f54:	teq	r2, #0
   21f58:	teqne	r3, #-16777216	; 0xff000000
   21f5c:	bxeq	lr
   21f60:	push	{r4, r5, lr}
   21f64:	mov	r4, #896	; 0x380
   21f68:	and	r5, r1, #-2147483648	; 0x80000000
   21f6c:	bic	r1, r1, #-2147483648	; 0x80000000
   21f70:	b	21d84 <flatcc_json_parser_table_as_root@@Base+0x39c>
   21f74:	orrs	r2, r0, r1
   21f78:	bxeq	lr
   21f7c:	push	{r4, r5, lr}
   21f80:	mov	r5, #0
   21f84:	b	21fa4 <flatcc_json_parser_table_as_root@@Base+0x5bc>
   21f88:	orrs	r2, r0, r1
   21f8c:	bxeq	lr
   21f90:	push	{r4, r5, lr}
   21f94:	ands	r5, r1, #-2147483648	; 0x80000000
   21f98:	bpl	21fa4 <flatcc_json_parser_table_as_root@@Base+0x5bc>
   21f9c:	rsbs	r0, r0, #0
   21fa0:	rsc	r1, r1, #0
   21fa4:	mov	r4, #1024	; 0x400
   21fa8:	add	r4, r4, #50	; 0x32
   21fac:	lsrs	ip, r1, #22
   21fb0:	beq	21d28 <flatcc_json_parser_table_as_root@@Base+0x340>
   21fb4:	mov	r2, #3
   21fb8:	lsrs	ip, ip, #3
   21fbc:	addne	r2, r2, #3
   21fc0:	lsrs	ip, ip, #3
   21fc4:	addne	r2, r2, #3
   21fc8:	add	r2, r2, ip, lsr #3
   21fcc:	rsb	r3, r2, #32
   21fd0:	lsl	ip, r0, r3
   21fd4:	lsr	r0, r0, r2
   21fd8:	orr	r0, r0, r1, lsl r3
   21fdc:	lsr	r1, r1, r2
   21fe0:	add	r4, r4, r2
   21fe4:	b	21d28 <flatcc_json_parser_table_as_root@@Base+0x340>
   21fe8:	eor	r0, r0, #-2147483648	; 0x80000000
   21fec:	b	21ff4 <flatcc_json_parser_table_as_root@@Base+0x60c>
   21ff0:	eor	r1, r1, #-2147483648	; 0x80000000
   21ff4:	lsls	r2, r0, #1
   21ff8:	lslsne	r3, r1, #1
   21ffc:	teqne	r2, r3
   22000:	mvnsne	ip, r2, asr #24
   22004:	mvnsne	ip, r3, asr #24
   22008:	beq	22100 <flatcc_json_parser_table_as_root@@Base+0x718>
   2200c:	lsr	r2, r2, #24
   22010:	rsbs	r3, r2, r3, lsr #24
   22014:	addgt	r2, r2, r3
   22018:	eorgt	r1, r0, r1
   2201c:	eorgt	r0, r1, r0
   22020:	eorgt	r1, r0, r1
   22024:	rsblt	r3, r3, #0
   22028:	cmp	r3, #25
   2202c:	bxhi	lr
   22030:	tst	r0, #-2147483648	; 0x80000000
   22034:	orr	r0, r0, #8388608	; 0x800000
   22038:	bic	r0, r0, #-16777216	; 0xff000000
   2203c:	rsbne	r0, r0, #0
   22040:	tst	r1, #-2147483648	; 0x80000000
   22044:	orr	r1, r1, #8388608	; 0x800000
   22048:	bic	r1, r1, #-16777216	; 0xff000000
   2204c:	rsbne	r1, r1, #0
   22050:	teq	r2, r3
   22054:	beq	220e8 <flatcc_json_parser_table_as_root@@Base+0x700>
   22058:	sub	r2, r2, #1
   2205c:	adds	r0, r0, r1, asr r3
   22060:	rsb	r3, r3, #32
   22064:	lsl	r1, r1, r3
   22068:	and	r3, r0, #-2147483648	; 0x80000000
   2206c:	bpl	22078 <flatcc_json_parser_table_as_root@@Base+0x690>
   22070:	rsbs	r1, r1, #0
   22074:	rsc	r0, r0, #0
   22078:	cmp	r0, #8388608	; 0x800000
   2207c:	bcc	220b0 <flatcc_json_parser_table_as_root@@Base+0x6c8>
   22080:	cmp	r0, #16777216	; 0x1000000
   22084:	bcc	2209c <flatcc_json_parser_table_as_root@@Base+0x6b4>
   22088:	lsrs	r0, r0, #1
   2208c:	rrx	r1, r1
   22090:	add	r2, r2, #1
   22094:	cmp	r2, #254	; 0xfe
   22098:	bcs	22154 <flatcc_json_parser_table_as_root@@Base+0x76c>
   2209c:	cmp	r1, #-2147483648	; 0x80000000
   220a0:	adc	r0, r0, r2, lsl #23
   220a4:	biceq	r0, r0, #1
   220a8:	orr	r0, r0, r3
   220ac:	bx	lr
   220b0:	lsls	r1, r1, #1
   220b4:	adc	r0, r0, r0
   220b8:	tst	r0, #8388608	; 0x800000
   220bc:	sub	r2, r2, #1
   220c0:	bne	2209c <flatcc_json_parser_table_as_root@@Base+0x6b4>
   220c4:	clz	ip, r0
   220c8:	sub	ip, ip, #8
   220cc:	subs	r2, r2, ip
   220d0:	lsl	r0, r0, ip
   220d4:	addge	r0, r0, r2, lsl #23
   220d8:	rsblt	r2, r2, #0
   220dc:	orrge	r0, r0, r3
   220e0:	orrlt	r0, r3, r0, lsr r2
   220e4:	bx	lr
   220e8:	teq	r2, #0
   220ec:	eor	r1, r1, #8388608	; 0x800000
   220f0:	eoreq	r0, r0, #8388608	; 0x800000
   220f4:	addeq	r2, r2, #1
   220f8:	subne	r3, r3, #1
   220fc:	b	22058 <flatcc_json_parser_table_as_root@@Base+0x670>
   22100:	lsl	r3, r1, #1
   22104:	mvns	ip, r2, asr #24
   22108:	mvnsne	ip, r3, asr #24
   2210c:	beq	22160 <flatcc_json_parser_table_as_root@@Base+0x778>
   22110:	teq	r2, r3
   22114:	beq	22124 <flatcc_json_parser_table_as_root@@Base+0x73c>
   22118:	teq	r2, #0
   2211c:	moveq	r0, r1
   22120:	bx	lr
   22124:	teq	r0, r1
   22128:	movne	r0, #0
   2212c:	bxne	lr
   22130:	tst	r2, #-16777216	; 0xff000000
   22134:	bne	22144 <flatcc_json_parser_table_as_root@@Base+0x75c>
   22138:	lsls	r0, r0, #1
   2213c:	orrcs	r0, r0, #-2147483648	; 0x80000000
   22140:	bx	lr
   22144:	adds	r2, r2, #33554432	; 0x2000000
   22148:	addcc	r0, r0, #8388608	; 0x800000
   2214c:	bxcc	lr
   22150:	and	r3, r0, #-2147483648	; 0x80000000
   22154:	orr	r0, r3, #2130706432	; 0x7f000000
   22158:	orr	r0, r0, #8388608	; 0x800000
   2215c:	bx	lr
   22160:	mvns	r2, r2, asr #24
   22164:	movne	r0, r1
   22168:	mvnseq	r3, r3, asr #24
   2216c:	movne	r1, r0
   22170:	lsls	r2, r0, #9
   22174:	lslseq	r3, r1, #9
   22178:	teqeq	r0, r1
   2217c:	orrne	r0, r0, #4194304	; 0x400000
   22180:	bx	lr
   22184:	mov	r3, #0
   22188:	b	22194 <flatcc_json_parser_table_as_root@@Base+0x7ac>
   2218c:	ands	r3, r0, #-2147483648	; 0x80000000
   22190:	rsbmi	r0, r0, #0
   22194:	movs	ip, r0
   22198:	bxeq	lr
   2219c:	orr	r3, r3, #1258291200	; 0x4b000000
   221a0:	mov	r1, r0
   221a4:	mov	r0, #0
   221a8:	b	221ec <flatcc_json_parser_table_as_root@@Base+0x804>
   221ac:	orrs	r2, r0, r1
   221b0:	bxeq	lr
   221b4:	mov	r3, #0
   221b8:	b	221d4 <flatcc_json_parser_table_as_root@@Base+0x7ec>
   221bc:	orrs	r2, r0, r1
   221c0:	bxeq	lr
   221c4:	ands	r3, r1, #-2147483648	; 0x80000000
   221c8:	bpl	221d4 <flatcc_json_parser_table_as_root@@Base+0x7ec>
   221cc:	rsbs	r0, r0, #0
   221d0:	rsc	r1, r1, #0
   221d4:	movs	ip, r1
   221d8:	moveq	ip, r0
   221dc:	moveq	r1, r0
   221e0:	moveq	r0, #0
   221e4:	orr	r3, r3, #1526726656	; 0x5b000000
   221e8:	subeq	r3, r3, #268435456	; 0x10000000
   221ec:	sub	r3, r3, #8388608	; 0x800000
   221f0:	clz	r2, ip
   221f4:	subs	r2, r2, #8
   221f8:	sub	r3, r3, r2, lsl #23
   221fc:	blt	2221c <flatcc_json_parser_table_as_root@@Base+0x834>
   22200:	add	r3, r3, r1, lsl r2
   22204:	lsl	ip, r0, r2
   22208:	rsb	r2, r2, #32
   2220c:	cmp	ip, #-2147483648	; 0x80000000
   22210:	adc	r0, r3, r0, lsr r2
   22214:	biceq	r0, r0, #1
   22218:	bx	lr
   2221c:	add	r2, r2, #32
   22220:	lsl	ip, r1, r2
   22224:	rsb	r2, r2, #32
   22228:	orrs	r0, r0, ip, lsl #1
   2222c:	adc	r0, r3, r1, lsr r2
   22230:	biceq	r0, r0, ip, lsr #31
   22234:	bx	lr
   22238:	push	{r1, lr}
   2223c:	mov	r0, #8
   22240:	bl	125b8 <raise@plt>
   22244:	pop	{r1, pc}

00022248 <__libc_csu_init@@Base>:
   22248:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2224c:	mov	r7, r0
   22250:	ldr	r6, [pc, #72]	; 222a0 <__libc_csu_init@@Base+0x58>
   22254:	ldr	r5, [pc, #72]	; 222a4 <__libc_csu_init@@Base+0x5c>
   22258:	add	r6, pc, r6
   2225c:	add	r5, pc, r5
   22260:	sub	r6, r6, r5
   22264:	mov	r8, r1
   22268:	mov	r9, r2
   2226c:	bl	12598 <raise@plt-0x20>
   22270:	asrs	r6, r6, #2
   22274:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   22278:	mov	r4, #0
   2227c:	add	r4, r4, #1
   22280:	ldr	r3, [r5], #4
   22284:	mov	r2, r9
   22288:	mov	r1, r8
   2228c:	mov	r0, r7
   22290:	blx	r3
   22294:	cmp	r6, r4
   22298:	bne	2227c <__libc_csu_init@@Base+0x34>
   2229c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   222a0:			; <UNDEFINED> instruction: 0x00011cb0
   222a4:	andeq	r1, r1, r8, lsr #25

000222a8 <__libc_csu_fini@@Base>:
   222a8:	bx	lr

Disassembly of section .fini:

000222ac <.fini>:
   222ac:	push	{r3, lr}
   222b0:	pop	{r3, pc}
