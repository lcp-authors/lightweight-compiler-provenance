
../repos/charybdis/modules/.libs/m_map.so:     file format elf32-littlearm


Disassembly of section .init:

00000584 <_init>:
 584:	push	{r3, lr}
 588:	bl	610 <call_weak_fn>
 58c:	pop	{r3, pc}

Disassembly of section .plt:

00000590 <.plt>:
 590:	push	{lr}		; (str lr, [sp, #-4]!)
 594:	ldr	lr, [pc, #4]	; 5a0 <.plt+0x10>
 598:	add	lr, pc, lr
 59c:	ldr	pc, [lr, #8]!
 5a0:	.word	0x00011a60

000005a4 <raise@plt>:
 5a4:	add	ip, pc, #0, 12
 5a8:	add	ip, ip, #69632	; 0x11000
 5ac:	ldr	pc, [ip, #2656]!	; 0xa60

000005b0 <__cxa_finalize@plt>:
 5b0:	add	ip, pc, #0, 12
 5b4:	add	ip, ip, #69632	; 0x11000
 5b8:	ldr	pc, [ip, #2648]!	; 0xa58

000005bc <__gmon_start__@plt>:
 5bc:	add	ip, pc, #0, 12
 5c0:	add	ip, ip, #69632	; 0x11000
 5c4:	ldr	pc, [ip, #2640]!	; 0xa50

000005c8 <sendto_one_numeric@plt>:
 5c8:	add	ip, pc, #0, 12
 5cc:	add	ip, ip, #69632	; 0x11000
 5d0:	ldr	pc, [ip, #2632]!	; 0xa48

000005d4 <strlen@plt>:
 5d4:	add	ip, pc, #0, 12
 5d8:	add	ip, ip, #69632	; 0x11000
 5dc:	ldr	pc, [ip, #2624]!	; 0xa40

000005e0 <snprintf@plt>:
 5e0:	add	ip, pc, #0, 12
 5e4:	add	ip, ip, #69632	; 0x11000
 5e8:	ldr	pc, [ip, #2616]!	; 0xa38

000005ec <scache_send_missing@plt>:
 5ec:	add	ip, pc, #0, 12
 5f0:	add	ip, ip, #69632	; 0x11000
 5f4:	ldr	pc, [ip, #2608]!	; 0xa30

000005f8 <rb_strlcpy@plt>:
 5f8:	add	ip, pc, #0, 12
 5fc:	add	ip, ip, #69632	; 0x11000
 600:	ldr	pc, [ip, #2600]!	; 0xa28

00000604 <rb_strlcat@plt>:
 604:	add	ip, pc, #0, 12
 608:	add	ip, ip, #69632	; 0x11000
 60c:	ldr	pc, [ip, #2592]!	; 0xa20

Disassembly of section .text:

00000610 <call_weak_fn>:
     610:	ldr	r3, [pc, #20]	; 62c <call_weak_fn+0x1c>
     614:	ldr	r2, [pc, #20]	; 630 <call_weak_fn+0x20>
     618:	add	r3, pc, r3
     61c:	ldr	r2, [r3, r2]
     620:	cmp	r2, #0
     624:	bxeq	lr
     628:	b	5bc <__gmon_start__@plt>
     62c:	.word	0x000119e0
     630:	.word	0x00000044

00000634 <deregister_tm_clones>:
     634:	ldr	r3, [pc, #52]	; 670 <deregister_tm_clones+0x3c>
     638:	ldr	r0, [pc, #52]	; 674 <deregister_tm_clones+0x40>
     63c:	add	r3, pc, r3
     640:	add	r0, pc, r0
     644:	add	r3, r3, #3
     648:	sub	r3, r3, r0
     64c:	cmp	r3, #6
     650:	ldr	r3, [pc, #32]	; 678 <deregister_tm_clones+0x44>
     654:	add	r3, pc, r3
     658:	bxls	lr
     65c:	ldr	r2, [pc, #24]	; 67c <deregister_tm_clones+0x48>
     660:	ldr	r3, [r3, r2]
     664:	cmp	r3, #0
     668:	bxeq	lr
     66c:	bx	r3
     670:	.word	0x00011a8c
     674:	.word	0x00011a88
     678:	.word	0x000119a4
     67c:	.word	0x00000038

00000680 <register_tm_clones>:
     680:	ldr	r1, [pc, #56]	; 6c0 <register_tm_clones+0x40>
     684:	ldr	r0, [pc, #56]	; 6c4 <register_tm_clones+0x44>
     688:	add	r1, pc, r1
     68c:	add	r0, pc, r0
     690:	sub	r1, r1, r0
     694:	ldr	r3, [pc, #44]	; 6c8 <register_tm_clones+0x48>
     698:	asr	r1, r1, #2
     69c:	add	r3, pc, r3
     6a0:	add	r1, r1, r1, lsr #31
     6a4:	asrs	r1, r1, #1
     6a8:	bxeq	lr
     6ac:	ldr	r2, [pc, #24]	; 6cc <register_tm_clones+0x4c>
     6b0:	ldr	r3, [r3, r2]
     6b4:	cmp	r3, #0
     6b8:	bxeq	lr
     6bc:	bx	r3
     6c0:	.word	0x00011a40
     6c4:	.word	0x00011a3c
     6c8:	.word	0x0001195c
     6cc:	.word	0x0000004c

000006d0 <__do_global_dtors_aux>:
     6d0:	ldr	r3, [pc, #76]	; 724 <__do_global_dtors_aux+0x54>
     6d4:	ldr	r2, [pc, #76]	; 728 <__do_global_dtors_aux+0x58>
     6d8:	add	r3, pc, r3
     6dc:	add	r2, pc, r2
     6e0:	ldrb	r3, [r3]
     6e4:	cmp	r3, #0
     6e8:	bxne	lr
     6ec:	ldr	r3, [pc, #56]	; 72c <__do_global_dtors_aux+0x5c>
     6f0:	push	{r4, lr}
     6f4:	ldr	r3, [r2, r3]
     6f8:	cmp	r3, #0
     6fc:	beq	70c <__do_global_dtors_aux+0x3c>
     700:	ldr	r3, [pc, #40]	; 730 <__do_global_dtors_aux+0x60>
     704:	ldr	r0, [pc, r3]
     708:	bl	5b0 <__cxa_finalize@plt>
     70c:	bl	634 <deregister_tm_clones>
     710:	ldr	r3, [pc, #28]	; 734 <__do_global_dtors_aux+0x64>
     714:	mov	r2, #1
     718:	add	r3, pc, r3
     71c:	strb	r2, [r3]
     720:	pop	{r4, pc}
     724:	.word	0x000119f0
     728:	.word	0x0001191c
     72c:	.word	0x00000034
     730:	.word	0x0001194c
     734:	.word	0x000119b0

00000738 <frame_dummy>:
     738:	ldr	r0, [pc, #56]	; 778 <frame_dummy+0x40>
     73c:	ldr	r3, [pc, #56]	; 77c <frame_dummy+0x44>
     740:	add	r0, pc, r0
     744:	ldr	r2, [r0]
     748:	add	r3, pc, r3
     74c:	cmp	r2, #0
     750:	bne	758 <frame_dummy+0x20>
     754:	b	680 <register_tm_clones>
     758:	ldr	r2, [pc, #32]	; 780 <frame_dummy+0x48>
     75c:	ldr	r3, [r3, r2]
     760:	cmp	r3, #0
     764:	beq	754 <frame_dummy+0x1c>
     768:	push	{r4, lr}
     76c:	blx	r3
     770:	pop	{r4, lr}
     774:	b	680 <register_tm_clones>
     778:	.word	0x000117b4
     77c:	.word	0x000118b0
     780:	.word	0x00000048

00000784 <dump_map>:
     784:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     788:	mov	r3, #0
     78c:	mov	r6, r1
     790:	mov	r4, r2
     794:	strb	r3, [r2]
     798:	mov	r8, r0
     79c:	mov	r2, #512	; 0x200
     7a0:	add	r1, r1, #88	; 0x58
     7a4:	mov	r0, r4
     7a8:	bl	604 <rb_strlcat@plt>
     7ac:	ldrb	r3, [r6, #396]	; 0x18c
     7b0:	ldr	r5, [pc, #428]	; 964 <dump_map+0x1e0>
     7b4:	cmp	r3, #0
     7b8:	add	r5, pc, r5
     7bc:	beq	7f8 <dump_map+0x74>
     7c0:	ldr	r1, [pc, #416]	; 968 <dump_map+0x1e4>
     7c4:	mov	r2, #512	; 0x200
     7c8:	add	r1, pc, r1
     7cc:	mov	r0, r4
     7d0:	bl	604 <rb_strlcat@plt>
     7d4:	mov	r2, #512	; 0x200
     7d8:	add	r1, r6, #396	; 0x18c
     7dc:	mov	r0, r4
     7e0:	bl	604 <rb_strlcat@plt>
     7e4:	ldr	r1, [pc, #384]	; 96c <dump_map+0x1e8>
     7e8:	mov	r2, #512	; 0x200
     7ec:	add	r1, pc, r1
     7f0:	mov	r0, r4
     7f4:	bl	604 <rb_strlcat@plt>
     7f8:	ldr	r7, [pc, #368]	; 970 <dump_map+0x1ec>
     7fc:	add	r7, pc, r7
     800:	mov	r0, r7
     804:	bl	5d4 <strlen@plt>
     808:	mov	r3, #32
     80c:	cmp	r0, #49	; 0x31
     810:	strb	r3, [r7, r0]
     814:	ble	8d4 <dump_map+0x150>
     818:	ldr	r3, [r6, #28]
     81c:	mov	r0, #1000	; 0x3e8
     820:	ldr	r7, [pc, #332]	; 974 <dump_map+0x1f0>
     824:	ldr	r9, [r3, #56]	; 0x38
     828:	ldr	r3, [pc, #328]	; 978 <dump_map+0x1f4>
     82c:	add	r7, pc, r7
     830:	ldr	r3, [r5, r3]
     834:	add	r5, r7, #50	; 0x32
     838:	ldr	r1, [r3, #4]
     83c:	add	r2, r1, r1, lsr #31
     840:	asr	r2, r2, #1
     844:	mla	r0, r0, r9, r2
     848:	bl	cf4 <__udivsi3>
     84c:	mov	r1, #10
     850:	mov	sl, r0
     854:	bl	1120 <__aeabi_idivmod>
     858:	mov	r0, sl
     85c:	str	r1, [sp, #4]
     860:	mov	r1, #10
     864:	bl	f00 <__divsi3>
     868:	ldr	r2, [pc, #268]	; 97c <dump_map+0x1f8>
     86c:	mov	r3, r9
     870:	add	r2, pc, r2
     874:	ldr	r1, [pc, #260]	; 980 <dump_map+0x1fc>
     878:	str	r0, [sp]
     87c:	mov	r0, r5
     880:	bl	5e0 <snprintf@plt>
     884:	ldr	r2, [pc, #248]	; 984 <dump_map+0x200>
     888:	mov	r3, r7
     88c:	add	r2, pc, r2
     890:	mov	r1, #15
     894:	mov	r0, r8
     898:	bl	5c8 <sendto_one_numeric@plt>
     89c:	ldr	r3, [r6, #28]
     8a0:	ldr	r5, [r3, #36]	; 0x24
     8a4:	cmp	r5, #0
     8a8:	bne	8f8 <dump_map+0x174>
     8ac:	ldr	r3, [r6, #28]
     8b0:	mov	r7, #1
     8b4:	mov	r9, #32
     8b8:	ldr	r6, [r3, #36]	; 0x24
     8bc:	mov	sl, #96	; 0x60
     8c0:	mov	fp, #124	; 0x7c
     8c4:	cmp	r6, #0
     8c8:	bne	928 <dump_map+0x1a4>
     8cc:	add	sp, sp, #12
     8d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8d4:	ldr	r3, [pc, #172]	; 988 <dump_map+0x204>
     8d8:	add	r0, r0, #1
     8dc:	add	r3, pc, r3
     8e0:	mov	r2, #45	; 0x2d
     8e4:	cmp	r0, #50	; 0x32
     8e8:	beq	818 <dump_map+0x94>
     8ec:	strb	r2, [r0, r3]
     8f0:	add	r0, r0, #1
     8f4:	b	8e4 <dump_map+0x160>
     8f8:	ldr	r5, [r3, #44]	; 0x2c
     8fc:	cmp	r5, #0
     900:	beq	8ac <dump_map+0x128>
     904:	add	r7, r7, #3
     908:	cmp	r4, r7
     90c:	bls	8ac <dump_map+0x128>
     910:	ldrb	r2, [r4, #-3]
     914:	mov	r3, #32
     918:	strb	r3, [r4, #-2]
     91c:	cmp	r2, #96	; 0x60
     920:	strbeq	r3, [r4, #-3]
     924:	b	8ac <dump_map+0x128>
     928:	cmp	r5, r7
     92c:	movle	r3, sl
     930:	movgt	r3, fp
     934:	ldr	r1, [r6]
     938:	strb	r3, [r4, #1]
     93c:	mov	r3, #45	; 0x2d
     940:	strb	r9, [r4]
     944:	strb	r3, [r4, #2]
     948:	strb	r9, [r4, #3]
     94c:	add	r2, r4, #4
     950:	mov	r0, r8
     954:	bl	784 <dump_map>
     958:	add	r7, r7, #1
     95c:	ldr	r6, [r6, #8]
     960:	b	8c4 <dump_map+0x140>
     964:	.word	0x00011840
     968:	.word	0x000009c6
     96c:	.word	0x000009a4
     970:	.word	0x000118cd
     974:	.word	0x0001189d
     978:	.word	0x0000003c
     97c:	.word	0x00000922
     980:	.word	0x000001ce
     984:	.word	0x00000921
     988:	.word	0x000117ed

0000098c <mo_map>:
     98c:	ldr	r3, [pc, #76]	; 9e0 <mo_map+0x54>
     990:	ldr	r2, [pc, #76]	; 9e4 <mo_map+0x58>
     994:	add	r3, pc, r3
     998:	push	{r0, r1, r4, lr}
     99c:	mov	r4, r1
     9a0:	ldr	r3, [r3, r2]
     9a4:	ldr	r2, [pc, #60]	; 9e8 <mo_map+0x5c>
     9a8:	mov	r1, r3
     9ac:	add	r2, pc, r2
     9b0:	mov	r0, r4
     9b4:	str	r3, [sp, #4]
     9b8:	bl	784 <dump_map>
     9bc:	mov	r0, r4
     9c0:	bl	5ec <scache_send_missing@plt>
     9c4:	ldr	r2, [pc, #32]	; 9ec <mo_map+0x60>
     9c8:	mov	r1, #17
     9cc:	add	r2, pc, r2
     9d0:	mov	r0, r4
     9d4:	add	sp, sp, #8
     9d8:	pop	{r4, lr}
     9dc:	b	5c8 <sendto_one_numeric@plt>
     9e0:	.word	0x00011664
     9e4:	.word	0x00000050
     9e8:	.word	0x0001171d
     9ec:	.word	0x000007e5

000009f0 <flattened_map>:
     9f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9f4:	vpush	{d8}
     9f8:	ldr	r5, [pc, #524]	; c0c <flattened_map+0x21c>
     9fc:	ldr	r3, [pc, #524]	; c10 <flattened_map+0x220>
     a00:	add	r5, pc, r5
     a04:	sub	sp, sp, #540	; 0x21c
     a08:	ldr	r6, [r5, r3]
     a0c:	add	r4, sp, #24
     a10:	mov	r2, #512	; 0x200
     a14:	add	r1, r6, #88	; 0x58
     a18:	mov	r8, r0
     a1c:	mov	r0, r4
     a20:	bl	5f8 <rb_strlcpy@plt>
     a24:	mov	r0, r4
     a28:	bl	5d4 <strlen@plt>
     a2c:	add	r3, sp, #536	; 0x218
     a30:	mov	r2, #32
     a34:	add	r3, r3, r0
     a38:	cmp	r0, #49	; 0x31
     a3c:	strb	r2, [r3, #-512]	; 0xfffffe00
     a40:	ble	aec <flattened_map+0xfc>
     a44:	ldr	r3, [r6, #28]
     a48:	ldr	r2, [pc, #452]	; c14 <flattened_map+0x224>
     a4c:	vldr	s16, [pc, #436]	; c08 <flattened_map+0x218>
     a50:	ldr	r3, [r3, #56]	; 0x38
     a54:	ldr	r9, [r5, r2]
     a58:	ldr	r2, [pc, #440]	; c18 <flattened_map+0x228>
     a5c:	vmov	s15, r3
     a60:	add	r2, pc, r2
     a64:	ldr	r1, [pc, #432]	; c1c <flattened_map+0x22c>
     a68:	add	r0, r4, #50	; 0x32
     a6c:	vcvt.f32.u32	s13, s15
     a70:	vldr	s15, [r9, #4]
     a74:	ldr	fp, [pc, #420]	; c20 <flattened_map+0x230>
     a78:	mov	r7, #0
     a7c:	add	fp, pc, fp
     a80:	vcvt.f32.s32	s15, s15
     a84:	vmul.f32	s13, s13, s16
     a88:	vdiv.f32	s14, s13, s15
     a8c:	vcvt.f64.f32	d7, s14
     a90:	vstr	d7, [sp]
     a94:	bl	5e0 <snprintf@plt>
     a98:	ldr	r2, [pc, #388]	; c24 <flattened_map+0x234>
     a9c:	mov	r3, r4
     aa0:	add	r2, pc, r2
     aa4:	mov	r1, #15
     aa8:	mov	r0, r8
     aac:	bl	5c8 <sendto_one_numeric@plt>
     ab0:	ldr	r3, [pc, #368]	; c28 <flattened_map+0x238>
     ab4:	ldr	r3, [r5, r3]
     ab8:	str	r3, [sp, #12]
     abc:	ldr	r6, [r3]
     ac0:	ldr	r3, [pc, #356]	; c2c <flattened_map+0x23c>
     ac4:	add	r3, pc, r3
     ac8:	str	r3, [sp, #16]
     acc:	ldr	r3, [pc, #348]	; c30 <flattened_map+0x240>
     ad0:	add	r3, pc, r3
     ad4:	str	r3, [sp, #20]
     ad8:	cmp	r6, #0
     adc:	bne	b08 <flattened_map+0x118>
     ae0:	add	sp, sp, #540	; 0x21c
     ae4:	vpop	{d8}
     ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     aec:	add	r0, r0, #1
     af0:	mov	r3, #45	; 0x2d
     af4:	cmp	r0, #50	; 0x32
     af8:	beq	a44 <flattened_map+0x54>
     afc:	strb	r3, [r4, r0]
     b00:	add	r0, r0, #1
     b04:	b	af4 <flattened_map+0x104>
     b08:	ldr	sl, [r6]
     b0c:	add	r7, r7, #1
     b10:	ldrh	r2, [sl, #80]	; 0x50
     b14:	cmp	r2, #4
     b18:	beq	be4 <flattened_map+0x1f4>
     b1c:	ldr	r2, [pc, #272]	; c34 <flattened_map+0x244>
     b20:	ldr	r2, [r5, r2]
     b24:	ldr	r2, [r2, #12]
     b28:	cmp	r2, #0
     b2c:	bne	b44 <flattened_map+0x154>
     b30:	ldrd	r0, [sl, #64]	; 0x40
     b34:	mov	r3, #0
     b38:	and	r2, r0, #2048	; 0x800
     b3c:	orrs	r3, r2, r3
     b40:	bne	be4 <flattened_map+0x1f4>
     b44:	ldr	r3, [sp, #12]
     b48:	ldr	r2, [r3, #8]
     b4c:	cmp	r7, r2
     b50:	movne	r1, fp
     b54:	mov	r2, #512	; 0x200
     b58:	ldreq	r1, [pc, #216]	; c38 <flattened_map+0x248>
     b5c:	addeq	r1, pc, r1
     b60:	mov	r0, r4
     b64:	bl	5f8 <rb_strlcpy@plt>
     b68:	mov	r2, #512	; 0x200
     b6c:	add	r1, sl, #88	; 0x58
     b70:	mov	r0, r4
     b74:	bl	604 <rb_strlcat@plt>
     b78:	mov	r0, r4
     b7c:	bl	5d4 <strlen@plt>
     b80:	add	r3, sp, #536	; 0x218
     b84:	mov	r1, #32
     b88:	add	r2, r3, r0
     b8c:	cmp	r0, #49	; 0x31
     b90:	strb	r1, [r2, #-512]	; 0xfffffe00
     b94:	ble	bec <flattened_map+0x1fc>
     b98:	ldr	r3, [sl, #28]
     b9c:	ldr	r2, [sp, #16]
     ba0:	ldr	r1, [pc, #116]	; c1c <flattened_map+0x22c>
     ba4:	ldr	r3, [r3, #56]	; 0x38
     ba8:	add	r0, r4, #50	; 0x32
     bac:	vmov	s15, r3
     bb0:	vcvt.f32.u32	s13, s15
     bb4:	vldr	s15, [r9, #4]
     bb8:	vcvt.f32.s32	s15, s15
     bbc:	vmul.f32	s13, s13, s16
     bc0:	vdiv.f32	s14, s13, s15
     bc4:	vcvt.f64.f32	d7, s14
     bc8:	vstr	d7, [sp]
     bcc:	bl	5e0 <snprintf@plt>
     bd0:	mov	r3, r4
     bd4:	ldr	r2, [sp, #20]
     bd8:	mov	r1, #15
     bdc:	mov	r0, r8
     be0:	bl	5c8 <sendto_one_numeric@plt>
     be4:	ldr	r6, [r6, #8]
     be8:	b	ad8 <flattened_map+0xe8>
     bec:	add	r0, r0, #1
     bf0:	mov	r2, #45	; 0x2d
     bf4:	cmp	r0, #50	; 0x32
     bf8:	beq	b98 <flattened_map+0x1a8>
     bfc:	strb	r2, [r4, r0]
     c00:	add	r0, r0, #1
     c04:	b	bf4 <flattened_map+0x204>
     c08:	.word	0x42c80000
     c0c:	.word	0x000115f8
     c10:	.word	0x00000050
     c14:	.word	0x0000003c
     c18:	.word	0x0000075e
     c1c:	.word	0x000001ce
     c20:	.word	0x00000760
     c24:	.word	0x0000070d
     c28:	.word	0x00000030
     c2c:	.word	0x000006fa
     c30:	.word	0x000006dd
     c34:	.word	0x00000040
     c38:	.word	0x0000067b

00000c3c <m_map>:
     c3c:	push	{r0, r1, r4, lr}
     c40:	mov	r4, r1
     c44:	ldrd	r0, [r2, #64]	; 0x40
     c48:	ldr	r3, [pc, #136]	; cd8 <m_map+0x9c>
     c4c:	mov	r1, #0
     c50:	and	r0, r0, #67108864	; 0x4000000
     c54:	orrs	r2, r0, r1
     c58:	add	r3, pc, r3
     c5c:	bne	c74 <m_map+0x38>
     c60:	ldr	r2, [pc, #116]	; cdc <m_map+0xa0>
     c64:	ldr	r2, [r3, r2]
     c68:	ldr	r2, [r2]
     c6c:	cmp	r2, #0
     c70:	bne	c88 <m_map+0x4c>
     c74:	ldr	r2, [pc, #100]	; ce0 <m_map+0xa4>
     c78:	ldr	r2, [r3, r2]
     c7c:	ldr	r2, [r2, #176]	; 0xb0
     c80:	cmp	r2, #0
     c84:	beq	cac <m_map+0x70>
     c88:	mov	r0, r4
     c8c:	bl	9f0 <flattened_map>
     c90:	ldr	r2, [pc, #76]	; ce4 <m_map+0xa8>
     c94:	add	r2, pc, r2
     c98:	mov	r1, #17
     c9c:	mov	r0, r4
     ca0:	add	sp, sp, #8
     ca4:	pop	{r4, lr}
     ca8:	b	5c8 <sendto_one_numeric@plt>
     cac:	ldr	r2, [pc, #52]	; ce8 <m_map+0xac>
     cb0:	mov	r0, r4
     cb4:	ldr	r3, [r3, r2]
     cb8:	ldr	r2, [pc, #44]	; cec <m_map+0xb0>
     cbc:	mov	r1, r3
     cc0:	add	r2, pc, r2
     cc4:	str	r3, [sp, #4]
     cc8:	bl	784 <dump_map>
     ccc:	ldr	r2, [pc, #28]	; cf0 <m_map+0xb4>
     cd0:	add	r2, pc, r2
     cd4:	b	c98 <m_map+0x5c>
     cd8:	.word	0x000113a0
     cdc:	.word	0x00000040
     ce0:	.word	0x00000054
     ce4:	.word	0x0000051d
     ce8:	.word	0x00000050
     cec:	.word	0x00011409
     cf0:	.word	0x000004e1

00000cf4 <__udivsi3>:
     cf4:	subs	r2, r1, #1
     cf8:	bxeq	lr
     cfc:	bcc	ed4 <__udivsi3+0x1e0>
     d00:	cmp	r0, r1
     d04:	bls	eb8 <__udivsi3+0x1c4>
     d08:	tst	r1, r2
     d0c:	beq	ec4 <__udivsi3+0x1d0>
     d10:	clz	r3, r0
     d14:	clz	r2, r1
     d18:	sub	r3, r2, r3
     d1c:	rsbs	r3, r3, #31
     d20:	addne	r3, r3, r3, lsl #1
     d24:	mov	r2, #0
     d28:	addne	pc, pc, r3, lsl #2
     d2c:	nop			; (mov r0, r0)
     d30:	cmp	r0, r1, lsl #31
     d34:	adc	r2, r2, r2
     d38:	subcs	r0, r0, r1, lsl #31
     d3c:	cmp	r0, r1, lsl #30
     d40:	adc	r2, r2, r2
     d44:	subcs	r0, r0, r1, lsl #30
     d48:	cmp	r0, r1, lsl #29
     d4c:	adc	r2, r2, r2
     d50:	subcs	r0, r0, r1, lsl #29
     d54:	cmp	r0, r1, lsl #28
     d58:	adc	r2, r2, r2
     d5c:	subcs	r0, r0, r1, lsl #28
     d60:	cmp	r0, r1, lsl #27
     d64:	adc	r2, r2, r2
     d68:	subcs	r0, r0, r1, lsl #27
     d6c:	cmp	r0, r1, lsl #26
     d70:	adc	r2, r2, r2
     d74:	subcs	r0, r0, r1, lsl #26
     d78:	cmp	r0, r1, lsl #25
     d7c:	adc	r2, r2, r2
     d80:	subcs	r0, r0, r1, lsl #25
     d84:	cmp	r0, r1, lsl #24
     d88:	adc	r2, r2, r2
     d8c:	subcs	r0, r0, r1, lsl #24
     d90:	cmp	r0, r1, lsl #23
     d94:	adc	r2, r2, r2
     d98:	subcs	r0, r0, r1, lsl #23
     d9c:	cmp	r0, r1, lsl #22
     da0:	adc	r2, r2, r2
     da4:	subcs	r0, r0, r1, lsl #22
     da8:	cmp	r0, r1, lsl #21
     dac:	adc	r2, r2, r2
     db0:	subcs	r0, r0, r1, lsl #21
     db4:	cmp	r0, r1, lsl #20
     db8:	adc	r2, r2, r2
     dbc:	subcs	r0, r0, r1, lsl #20
     dc0:	cmp	r0, r1, lsl #19
     dc4:	adc	r2, r2, r2
     dc8:	subcs	r0, r0, r1, lsl #19
     dcc:	cmp	r0, r1, lsl #18
     dd0:	adc	r2, r2, r2
     dd4:	subcs	r0, r0, r1, lsl #18
     dd8:	cmp	r0, r1, lsl #17
     ddc:	adc	r2, r2, r2
     de0:	subcs	r0, r0, r1, lsl #17
     de4:	cmp	r0, r1, lsl #16
     de8:	adc	r2, r2, r2
     dec:	subcs	r0, r0, r1, lsl #16
     df0:	cmp	r0, r1, lsl #15
     df4:	adc	r2, r2, r2
     df8:	subcs	r0, r0, r1, lsl #15
     dfc:	cmp	r0, r1, lsl #14
     e00:	adc	r2, r2, r2
     e04:	subcs	r0, r0, r1, lsl #14
     e08:	cmp	r0, r1, lsl #13
     e0c:	adc	r2, r2, r2
     e10:	subcs	r0, r0, r1, lsl #13
     e14:	cmp	r0, r1, lsl #12
     e18:	adc	r2, r2, r2
     e1c:	subcs	r0, r0, r1, lsl #12
     e20:	cmp	r0, r1, lsl #11
     e24:	adc	r2, r2, r2
     e28:	subcs	r0, r0, r1, lsl #11
     e2c:	cmp	r0, r1, lsl #10
     e30:	adc	r2, r2, r2
     e34:	subcs	r0, r0, r1, lsl #10
     e38:	cmp	r0, r1, lsl #9
     e3c:	adc	r2, r2, r2
     e40:	subcs	r0, r0, r1, lsl #9
     e44:	cmp	r0, r1, lsl #8
     e48:	adc	r2, r2, r2
     e4c:	subcs	r0, r0, r1, lsl #8
     e50:	cmp	r0, r1, lsl #7
     e54:	adc	r2, r2, r2
     e58:	subcs	r0, r0, r1, lsl #7
     e5c:	cmp	r0, r1, lsl #6
     e60:	adc	r2, r2, r2
     e64:	subcs	r0, r0, r1, lsl #6
     e68:	cmp	r0, r1, lsl #5
     e6c:	adc	r2, r2, r2
     e70:	subcs	r0, r0, r1, lsl #5
     e74:	cmp	r0, r1, lsl #4
     e78:	adc	r2, r2, r2
     e7c:	subcs	r0, r0, r1, lsl #4
     e80:	cmp	r0, r1, lsl #3
     e84:	adc	r2, r2, r2
     e88:	subcs	r0, r0, r1, lsl #3
     e8c:	cmp	r0, r1, lsl #2
     e90:	adc	r2, r2, r2
     e94:	subcs	r0, r0, r1, lsl #2
     e98:	cmp	r0, r1, lsl #1
     e9c:	adc	r2, r2, r2
     ea0:	subcs	r0, r0, r1, lsl #1
     ea4:	cmp	r0, r1
     ea8:	adc	r2, r2, r2
     eac:	subcs	r0, r0, r1
     eb0:	mov	r0, r2
     eb4:	bx	lr
     eb8:	moveq	r0, #1
     ebc:	movne	r0, #0
     ec0:	bx	lr
     ec4:	clz	r2, r1
     ec8:	rsb	r2, r2, #31
     ecc:	lsr	r0, r0, r2
     ed0:	bx	lr
     ed4:	cmp	r0, #0
     ed8:	mvnne	r0, #0
     edc:	b	1140 <__aeabi_idiv0>

00000ee0 <__aeabi_uidivmod>:
     ee0:	cmp	r1, #0
     ee4:	beq	ed4 <__udivsi3+0x1e0>
     ee8:	push	{r0, r1, lr}
     eec:	bl	cf4 <__udivsi3>
     ef0:	pop	{r1, r2, lr}
     ef4:	mul	r3, r2, r0
     ef8:	sub	r1, r1, r3
     efc:	bx	lr

00000f00 <__divsi3>:
     f00:	cmp	r1, #0
     f04:	beq	1110 <.divsi3_skip_div0_test+0x208>

00000f08 <.divsi3_skip_div0_test>:
     f08:	eor	ip, r0, r1
     f0c:	rsbmi	r1, r1, #0
     f10:	subs	r2, r1, #1
     f14:	beq	10dc <.divsi3_skip_div0_test+0x1d4>
     f18:	movs	r3, r0
     f1c:	rsbmi	r3, r0, #0
     f20:	cmp	r3, r1
     f24:	bls	10e8 <.divsi3_skip_div0_test+0x1e0>
     f28:	tst	r1, r2
     f2c:	beq	10f8 <.divsi3_skip_div0_test+0x1f0>
     f30:	clz	r2, r3
     f34:	clz	r0, r1
     f38:	sub	r2, r0, r2
     f3c:	rsbs	r2, r2, #31
     f40:	addne	r2, r2, r2, lsl #1
     f44:	mov	r0, #0
     f48:	addne	pc, pc, r2, lsl #2
     f4c:	nop			; (mov r0, r0)
     f50:	cmp	r3, r1, lsl #31
     f54:	adc	r0, r0, r0
     f58:	subcs	r3, r3, r1, lsl #31
     f5c:	cmp	r3, r1, lsl #30
     f60:	adc	r0, r0, r0
     f64:	subcs	r3, r3, r1, lsl #30
     f68:	cmp	r3, r1, lsl #29
     f6c:	adc	r0, r0, r0
     f70:	subcs	r3, r3, r1, lsl #29
     f74:	cmp	r3, r1, lsl #28
     f78:	adc	r0, r0, r0
     f7c:	subcs	r3, r3, r1, lsl #28
     f80:	cmp	r3, r1, lsl #27
     f84:	adc	r0, r0, r0
     f88:	subcs	r3, r3, r1, lsl #27
     f8c:	cmp	r3, r1, lsl #26
     f90:	adc	r0, r0, r0
     f94:	subcs	r3, r3, r1, lsl #26
     f98:	cmp	r3, r1, lsl #25
     f9c:	adc	r0, r0, r0
     fa0:	subcs	r3, r3, r1, lsl #25
     fa4:	cmp	r3, r1, lsl #24
     fa8:	adc	r0, r0, r0
     fac:	subcs	r3, r3, r1, lsl #24
     fb0:	cmp	r3, r1, lsl #23
     fb4:	adc	r0, r0, r0
     fb8:	subcs	r3, r3, r1, lsl #23
     fbc:	cmp	r3, r1, lsl #22
     fc0:	adc	r0, r0, r0
     fc4:	subcs	r3, r3, r1, lsl #22
     fc8:	cmp	r3, r1, lsl #21
     fcc:	adc	r0, r0, r0
     fd0:	subcs	r3, r3, r1, lsl #21
     fd4:	cmp	r3, r1, lsl #20
     fd8:	adc	r0, r0, r0
     fdc:	subcs	r3, r3, r1, lsl #20
     fe0:	cmp	r3, r1, lsl #19
     fe4:	adc	r0, r0, r0
     fe8:	subcs	r3, r3, r1, lsl #19
     fec:	cmp	r3, r1, lsl #18
     ff0:	adc	r0, r0, r0
     ff4:	subcs	r3, r3, r1, lsl #18
     ff8:	cmp	r3, r1, lsl #17
     ffc:	adc	r0, r0, r0
    1000:	subcs	r3, r3, r1, lsl #17
    1004:	cmp	r3, r1, lsl #16
    1008:	adc	r0, r0, r0
    100c:	subcs	r3, r3, r1, lsl #16
    1010:	cmp	r3, r1, lsl #15
    1014:	adc	r0, r0, r0
    1018:	subcs	r3, r3, r1, lsl #15
    101c:	cmp	r3, r1, lsl #14
    1020:	adc	r0, r0, r0
    1024:	subcs	r3, r3, r1, lsl #14
    1028:	cmp	r3, r1, lsl #13
    102c:	adc	r0, r0, r0
    1030:	subcs	r3, r3, r1, lsl #13
    1034:	cmp	r3, r1, lsl #12
    1038:	adc	r0, r0, r0
    103c:	subcs	r3, r3, r1, lsl #12
    1040:	cmp	r3, r1, lsl #11
    1044:	adc	r0, r0, r0
    1048:	subcs	r3, r3, r1, lsl #11
    104c:	cmp	r3, r1, lsl #10
    1050:	adc	r0, r0, r0
    1054:	subcs	r3, r3, r1, lsl #10
    1058:	cmp	r3, r1, lsl #9
    105c:	adc	r0, r0, r0
    1060:	subcs	r3, r3, r1, lsl #9
    1064:	cmp	r3, r1, lsl #8
    1068:	adc	r0, r0, r0
    106c:	subcs	r3, r3, r1, lsl #8
    1070:	cmp	r3, r1, lsl #7
    1074:	adc	r0, r0, r0
    1078:	subcs	r3, r3, r1, lsl #7
    107c:	cmp	r3, r1, lsl #6
    1080:	adc	r0, r0, r0
    1084:	subcs	r3, r3, r1, lsl #6
    1088:	cmp	r3, r1, lsl #5
    108c:	adc	r0, r0, r0
    1090:	subcs	r3, r3, r1, lsl #5
    1094:	cmp	r3, r1, lsl #4
    1098:	adc	r0, r0, r0
    109c:	subcs	r3, r3, r1, lsl #4
    10a0:	cmp	r3, r1, lsl #3
    10a4:	adc	r0, r0, r0
    10a8:	subcs	r3, r3, r1, lsl #3
    10ac:	cmp	r3, r1, lsl #2
    10b0:	adc	r0, r0, r0
    10b4:	subcs	r3, r3, r1, lsl #2
    10b8:	cmp	r3, r1, lsl #1
    10bc:	adc	r0, r0, r0
    10c0:	subcs	r3, r3, r1, lsl #1
    10c4:	cmp	r3, r1
    10c8:	adc	r0, r0, r0
    10cc:	subcs	r3, r3, r1
    10d0:	cmp	ip, #0
    10d4:	rsbmi	r0, r0, #0
    10d8:	bx	lr
    10dc:	teq	ip, r0
    10e0:	rsbmi	r0, r0, #0
    10e4:	bx	lr
    10e8:	movcc	r0, #0
    10ec:	asreq	r0, ip, #31
    10f0:	orreq	r0, r0, #1
    10f4:	bx	lr
    10f8:	clz	r2, r1
    10fc:	rsb	r2, r2, #31
    1100:	cmp	ip, #0
    1104:	lsr	r0, r3, r2
    1108:	rsbmi	r0, r0, #0
    110c:	bx	lr
    1110:	cmp	r0, #0
    1114:	mvngt	r0, #-2147483648	; 0x80000000
    1118:	movlt	r0, #-2147483648	; 0x80000000
    111c:	b	1140 <__aeabi_idiv0>

00001120 <__aeabi_idivmod>:
    1120:	cmp	r1, #0
    1124:	beq	1110 <.divsi3_skip_div0_test+0x208>
    1128:	push	{r0, r1, lr}
    112c:	bl	f08 <.divsi3_skip_div0_test>
    1130:	pop	{r1, r2, lr}
    1134:	mul	r3, r2, r0
    1138:	sub	r1, r1, r3
    113c:	bx	lr

00001140 <__aeabi_idiv0>:
    1140:	push	{r1, lr}
    1144:	mov	r0, #8
    1148:	bl	5a4 <raise@plt>
    114c:	pop	{r1, pc}

Disassembly of section .fini:

00001150 <_fini>:
    1150:	push	{r3, lr}
    1154:	pop	{r3, pc}
