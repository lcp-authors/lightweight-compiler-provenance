
../repos/maitesin-acc-4891b9a/bin/grammar_tests:     file format elf32-littlearm


Disassembly of section .init:

00011814 <.init>:
   11814:	push	{r3, lr}
   11818:	bl	12198 <_start@@Base+0x3c>
   1181c:	pop	{r3, pc}

Disassembly of section .plt:

00011820 <fdopen@plt-0x14>:
   11820:	push	{lr}		; (str lr, [sp, #-4]!)
   11824:	ldr	lr, [pc, #4]	; 11830 <fdopen@plt-0x4>
   11828:	add	lr, pc, lr
   1182c:	ldr	pc, [lr, #8]!
   11830:	ldrdeq	r8, [r1], -r0

00011834 <fdopen@plt>:
   11834:	add	ip, pc, #0, 12
   11838:	add	ip, ip, #24, 20	; 0x18000
   1183c:	ldr	pc, [ip, #2000]!	; 0x7d0

00011840 <raise@plt>:
   11840:	add	ip, pc, #0, 12
   11844:	add	ip, ip, #24, 20	; 0x18000
   11848:	ldr	pc, [ip, #1992]!	; 0x7c8

0001184c <setbuf@plt>:
   1184c:	add	ip, pc, #0, 12
   11850:	add	ip, ip, #24, 20	; 0x18000
   11854:	ldr	pc, [ip, #1984]!	; 0x7c0

00011858 <printf@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #24, 20	; 0x18000
   11860:	ldr	pc, [ip, #1976]!	; 0x7b8

00011864 <fflush@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #24, 20	; 0x18000
   1186c:	ldr	pc, [ip, #1968]!	; 0x7b0

00011870 <free@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #24, 20	; 0x18000
   11878:	ldr	pc, [ip, #1960]!	; 0x7a8

0001187c <memcpy@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #24, 20	; 0x18000
   11884:	ldr	pc, [ip, #1952]!	; 0x7a0

00011888 <ftell@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #24, 20	; 0x18000
   11890:	ldr	pc, [ip, #1944]!	; 0x798

00011894 <fwrite@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #24, 20	; 0x18000
   1189c:	ldr	pc, [ip, #1936]!	; 0x790

000118a0 <strcpy@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #24, 20	; 0x18000
   118a8:	ldr	pc, [ip, #1928]!	; 0x788

000118ac <fread@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #24, 20	; 0x18000
   118b4:	ldr	pc, [ip, #1920]!	; 0x780

000118b8 <getenv@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #24, 20	; 0x18000
   118c0:	ldr	pc, [ip, #1912]!	; 0x778

000118c4 <puts@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #24, 20	; 0x18000
   118cc:	ldr	pc, [ip, #1904]!	; 0x770

000118d0 <malloc@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #24, 20	; 0x18000
   118d8:	ldr	pc, [ip, #1896]!	; 0x768

000118dc <__libc_start_main@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #24, 20	; 0x18000
   118e4:	ldr	pc, [ip, #1888]!	; 0x760

000118e8 <__fxstat@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #24, 20	; 0x18000
   118f0:	ldr	pc, [ip, #1880]!	; 0x758

000118f4 <__gmon_start__@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #24, 20	; 0x18000
   118fc:	ldr	pc, [ip, #1872]!	; 0x750

00011900 <open@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #24, 20	; 0x18000
   11908:	ldr	pc, [ip, #1864]!	; 0x748

0001190c <getpid@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #24, 20	; 0x18000
   11914:	ldr	pc, [ip, #1856]!	; 0x740

00011918 <exit@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #24, 20	; 0x18000
   11920:	ldr	pc, [ip, #1848]!	; 0x738

00011924 <strlen@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #24, 20	; 0x18000
   1192c:	ldr	pc, [ip, #1840]!	; 0x730

00011930 <fprintf@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #24, 20	; 0x18000
   11938:	ldr	pc, [ip, #1832]!	; 0x728

0001193c <__errno_location@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #24, 20	; 0x18000
   11944:	ldr	pc, [ip, #1824]!	; 0x720

00011948 <__cxa_atexit@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #24, 20	; 0x18000
   11950:	ldr	pc, [ip, #1816]!	; 0x718

00011954 <mkdir@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #24, 20	; 0x18000
   1195c:	ldr	pc, [ip, #1808]!	; 0x710

00011960 <fcntl@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #24, 20	; 0x18000
   11968:	ldr	pc, [ip, #1800]!	; 0x708

0001196c <memset@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #24, 20	; 0x18000
   11974:	ldr	pc, [ip, #1792]!	; 0x700

00011978 <access@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #24, 20	; 0x18000
   11980:	ldr	pc, [ip, #1784]!	; 0x6f8

00011984 <fclose@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #24, 20	; 0x18000
   1198c:	ldr	pc, [ip, #1776]!	; 0x6f0

00011990 <strnlen@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #24, 20	; 0x18000
   11998:	ldr	pc, [ip, #1768]!	; 0x6e8

0001199c <vfprintf@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #24, 20	; 0x18000
   119a4:	ldr	pc, [ip, #1760]!	; 0x6e0

000119a8 <atoi@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #24, 20	; 0x18000
   119b0:	ldr	pc, [ip, #1752]!	; 0x6d8

000119b4 <fseek@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #24, 20	; 0x18000
   119bc:	ldr	pc, [ip, #1744]!	; 0x6d0

000119c0 <strncmp@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #24, 20	; 0x18000
   119c8:	ldr	pc, [ip, #1736]!	; 0x6c8

000119cc <abort@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #24, 20	; 0x18000
   119d4:	ldr	pc, [ip, #1728]!	; 0x6c0

000119d8 <close@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #24, 20	; 0x18000
   119e0:	ldr	pc, [ip, #1720]!	; 0x6b8

000119e4 <__assert_fail@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #24, 20	; 0x18000
   119ec:	ldr	pc, [ip, #1712]!	; 0x6b0

Disassembly of section .text:

000119f0 <main@@Base>:
   119f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119f4:	sub	sp, sp, #20
   119f8:	ldr	r4, [pc, #1728]	; 120c0 <main@@Base+0x6d0>
   119fc:	ldr	r0, [pc, #1728]	; 120c4 <main@@Base+0x6d4>
   11a00:	add	r4, pc, r4
   11a04:	add	r6, r4, #1520	; 0x5f0
   11a08:	ldr	ip, [pc, #1720]	; 120c8 <main@@Base+0x6d8>
   11a0c:	ldrd	r2, [r6, #-8]
   11a10:	add	r0, pc, r0
   11a14:	mov	r1, #0
   11a18:	adds	sl, r2, #1
   11a1c:	adc	fp, r3, #0
   11a20:	ldr	r3, [pc, #1700]	; 120cc <main@@Base+0x6dc>
   11a24:	strd	sl, [r6, #-8]
   11a28:	add	r3, pc, r3
   11a2c:	str	r3, [sp, #8]
   11a30:	ldr	r5, [r0, ip]
   11a34:	ldr	r8, [pc, #1684]	; 120d0 <main@@Base+0x6e0>
   11a38:	ldr	r7, [pc, #1684]	; 120d4 <main@@Base+0x6e4>
   11a3c:	ldr	r0, [r5]
   11a40:	bl	1184c <setbuf@plt>
   11a44:	ldrd	sl, [r6]
   11a48:	add	r8, pc, r8
   11a4c:	str	r8, [sp, #4]
   11a50:	mov	r0, r8
   11a54:	adds	r8, sl, #1
   11a58:	adc	r9, fp, #0
   11a5c:	mov	sl, r8
   11a60:	mov	fp, r9
   11a64:	ldr	r3, [r5]
   11a68:	mov	r2, #14
   11a6c:	mov	r1, #1
   11a70:	strd	sl, [r6]
   11a74:	bl	11894 <fwrite@plt>
   11a78:	ldrd	sl, [r6, #8]
   11a7c:	ldr	r3, [r5]
   11a80:	mov	r2, #14
   11a84:	adds	r0, sl, #1
   11a88:	adc	r1, fp, #0
   11a8c:	mov	sl, r0
   11a90:	ldr	r0, [pc, #1600]	; 120d8 <main@@Base+0x6e8>
   11a94:	mov	fp, r1
   11a98:	add	r0, pc, r0
   11a9c:	mov	r1, #1
   11aa0:	strd	sl, [r6, #8]
   11aa4:	bl	11894 <fwrite@plt>
   11aa8:	ldrd	sl, [r6, #16]
   11aac:	ldr	r3, [r5]
   11ab0:	mov	r2, #15
   11ab4:	adds	r0, sl, #1
   11ab8:	adc	r1, fp, #0
   11abc:	mov	sl, r0
   11ac0:	ldr	r0, [pc, #1556]	; 120dc <main@@Base+0x6ec>
   11ac4:	mov	fp, r1
   11ac8:	add	r0, pc, r0
   11acc:	mov	r1, #1
   11ad0:	strd	sl, [r6, #16]
   11ad4:	bl	11894 <fwrite@plt>
   11ad8:	ldrd	sl, [r6, #24]
   11adc:	mov	r0, #0
   11ae0:	add	r7, pc, r7
   11ae4:	adds	r2, sl, #1
   11ae8:	adc	r3, fp, #0
   11aec:	mov	fp, r3
   11af0:	add	r3, r4, #1792	; 0x700
   11af4:	str	r3, [sp, #12]
   11af8:	mov	r3, fp
   11afc:	ldr	r5, [pc, #1500]	; 120e0 <main@@Base+0x6f0>
   11b00:	strd	r2, [r6, #24]
   11b04:	bl	11864 <fflush@plt>
   11b08:	ldrd	sl, [r6, #32]
   11b0c:	ldr	r9, [sp, #8]
   11b10:	mov	r0, r7
   11b14:	adds	r2, sl, #1
   11b18:	adc	r3, fp, #0
   11b1c:	mov	r1, r9
   11b20:	strd	r2, [r6, #32]
   11b24:	ldr	r2, [pc, #1464]	; 120e4 <main@@Base+0x6f4>
   11b28:	add	r5, pc, r5
   11b2c:	add	r2, pc, r2
   11b30:	bl	11858 <printf@plt>
   11b34:	ldrd	r0, [r6, #40]	; 0x28
   11b38:	add	r8, r4, #1808	; 0x710
   11b3c:	adds	r2, r0, #1
   11b40:	adc	r3, r1, #0
   11b44:	strd	r2, [r6, #40]	; 0x28
   11b48:	bl	125e0 <setup@@Base>
   11b4c:	ldrd	r0, [r6, #48]	; 0x30
   11b50:	adds	r2, r0, #1
   11b54:	adc	r3, r1, #0
   11b58:	strd	r2, [r6, #48]	; 0x30
   11b5c:	bl	1262c <no_int_as_first_stuff@@Base>
   11b60:	ldrd	sl, [r6, #56]	; 0x38
   11b64:	mov	r0, r5
   11b68:	adds	r2, sl, #1
   11b6c:	adc	r3, fp, #0
   11b70:	strd	r2, [r6, #56]	; 0x38
   11b74:	bl	118c4 <puts@plt>
   11b78:	ldrd	sl, [r6, #64]	; 0x40
   11b7c:	mov	r1, r9
   11b80:	mov	r0, r7
   11b84:	adds	r2, sl, #1
   11b88:	adc	r3, fp, #0
   11b8c:	strd	r2, [r6, #64]	; 0x40
   11b90:	ldr	r2, [pc, #1360]	; 120e8 <main@@Base+0x6f8>
   11b94:	add	r2, pc, r2
   11b98:	bl	11858 <printf@plt>
   11b9c:	ldrd	r0, [r6, #72]	; 0x48
   11ba0:	adds	r2, r0, #1
   11ba4:	adc	r3, r1, #0
   11ba8:	strd	r2, [r6, #72]	; 0x48
   11bac:	bl	125e0 <setup@@Base>
   11bb0:	ldrd	r0, [r6, #80]	; 0x50
   11bb4:	adds	r2, r0, #1
   11bb8:	adc	r3, r1, #0
   11bbc:	strd	r2, [r6, #80]	; 0x50
   11bc0:	bl	12754 <int_but_not_followed_by_function@@Base>
   11bc4:	ldrd	sl, [r6, #88]	; 0x58
   11bc8:	mov	r0, r5
   11bcc:	adds	r2, sl, #1
   11bd0:	adc	r3, fp, #0
   11bd4:	strd	r2, [r6, #88]	; 0x58
   11bd8:	bl	118c4 <puts@plt>
   11bdc:	ldrd	sl, [r6, #96]	; 0x60
   11be0:	mov	r1, r9
   11be4:	mov	r0, r7
   11be8:	adds	r2, sl, #1
   11bec:	adc	r3, fp, #0
   11bf0:	strd	r2, [r6, #96]	; 0x60
   11bf4:	ldr	r2, [pc, #1264]	; 120ec <main@@Base+0x6fc>
   11bf8:	add	r2, pc, r2
   11bfc:	bl	11858 <printf@plt>
   11c00:	ldrd	r0, [r6, #104]	; 0x68
   11c04:	adds	r2, r0, #1
   11c08:	adc	r3, r1, #0
   11c0c:	strd	r2, [r6, #104]	; 0x68
   11c10:	bl	125e0 <setup@@Base>
   11c14:	ldrd	r0, [r6, #112]	; 0x70
   11c18:	adds	r2, r0, #1
   11c1c:	adc	r3, r1, #0
   11c20:	strd	r2, [r6, #112]	; 0x70
   11c24:	bl	130b4 <boolean_unary_operator_is_read_properly@@Base>
   11c28:	ldrd	sl, [r6, #120]	; 0x78
   11c2c:	mov	r0, r5
   11c30:	adds	r2, sl, #1
   11c34:	adc	r3, fp, #0
   11c38:	strd	r2, [r6, #120]	; 0x78
   11c3c:	bl	118c4 <puts@plt>
   11c40:	ldrd	sl, [r6, #128]	; 0x80
   11c44:	mov	r1, r9
   11c48:	mov	r0, r7
   11c4c:	adds	r2, sl, #1
   11c50:	adc	r3, fp, #0
   11c54:	strd	r2, [r6, #128]	; 0x80
   11c58:	ldr	r2, [pc, #1168]	; 120f0 <main@@Base+0x700>
   11c5c:	add	r2, pc, r2
   11c60:	bl	11858 <printf@plt>
   11c64:	ldrd	r0, [r6, #136]	; 0x88
   11c68:	adds	r2, r0, #1
   11c6c:	adc	r3, r1, #0
   11c70:	strd	r2, [r6, #136]	; 0x88
   11c74:	bl	125e0 <setup@@Base>
   11c78:	ldrd	r0, [r6, #144]	; 0x90
   11c7c:	adds	r2, r0, #1
   11c80:	adc	r3, r1, #0
   11c84:	strd	r2, [r6, #144]	; 0x90
   11c88:	bl	12e0c <boolean_binary_operator_is_read_properly@@Base>
   11c8c:	ldrd	sl, [r6, #152]	; 0x98
   11c90:	mov	r0, r5
   11c94:	adds	r2, sl, #1
   11c98:	adc	r3, fp, #0
   11c9c:	strd	r2, [r6, #152]	; 0x98
   11ca0:	bl	118c4 <puts@plt>
   11ca4:	ldrd	sl, [r6, #160]	; 0xa0
   11ca8:	mov	r1, r9
   11cac:	mov	r0, r7
   11cb0:	adds	r2, sl, #1
   11cb4:	adc	r3, fp, #0
   11cb8:	strd	r2, [r6, #160]	; 0xa0
   11cbc:	ldr	r2, [pc, #1072]	; 120f4 <main@@Base+0x704>
   11cc0:	add	r2, pc, r2
   11cc4:	bl	11858 <printf@plt>
   11cc8:	ldrd	r0, [r6, #168]	; 0xa8
   11ccc:	adds	r2, r0, #1
   11cd0:	adc	r3, r1, #0
   11cd4:	strd	r2, [r6, #168]	; 0xa8
   11cd8:	bl	125e0 <setup@@Base>
   11cdc:	ldrd	r0, [r6, #176]	; 0xb0
   11ce0:	adds	r2, r0, #1
   11ce4:	adc	r3, r1, #0
   11ce8:	strd	r2, [r6, #176]	; 0xb0
   11cec:	bl	128b8 <boolean_expression_is_read_properly@@Base>
   11cf0:	ldrd	sl, [r6, #184]	; 0xb8
   11cf4:	mov	r0, r5
   11cf8:	adds	r2, sl, #1
   11cfc:	adc	r3, fp, #0
   11d00:	strd	r2, [r6, #184]	; 0xb8
   11d04:	bl	118c4 <puts@plt>
   11d08:	ldrd	sl, [r6, #192]	; 0xc0
   11d0c:	mov	r1, r9
   11d10:	mov	r0, r7
   11d14:	adds	r2, sl, #1
   11d18:	adc	r3, fp, #0
   11d1c:	strd	r2, [r6, #192]	; 0xc0
   11d20:	ldr	r2, [pc, #976]	; 120f8 <main@@Base+0x708>
   11d24:	add	r2, pc, r2
   11d28:	bl	11858 <printf@plt>
   11d2c:	ldrd	r0, [r6, #200]	; 0xc8
   11d30:	adds	r2, r0, #1
   11d34:	adc	r3, r1, #0
   11d38:	strd	r2, [r6, #200]	; 0xc8
   11d3c:	bl	125e0 <setup@@Base>
   11d40:	ldrd	r0, [r6, #208]	; 0xd0
   11d44:	adds	r2, r0, #1
   11d48:	adc	r3, r1, #0
   11d4c:	strd	r2, [r6, #208]	; 0xd0
   11d50:	bl	12b24 <boolean_expression_complex@@Base>
   11d54:	ldrd	sl, [r6, #216]	; 0xd8
   11d58:	mov	r0, r5
   11d5c:	adds	r2, sl, #1
   11d60:	adc	r3, fp, #0
   11d64:	strd	r2, [r6, #216]	; 0xd8
   11d68:	bl	118c4 <puts@plt>
   11d6c:	ldrd	sl, [r6, #224]	; 0xe0
   11d70:	mov	r1, r9
   11d74:	mov	r0, r7
   11d78:	adds	r2, sl, #1
   11d7c:	adc	r3, fp, #0
   11d80:	strd	r2, [r6, #224]	; 0xe0
   11d84:	ldr	r2, [pc, #880]	; 120fc <main@@Base+0x70c>
   11d88:	add	r2, pc, r2
   11d8c:	bl	11858 <printf@plt>
   11d90:	ldrd	r0, [r6, #232]	; 0xe8
   11d94:	adds	r2, r0, #1
   11d98:	adc	r3, r1, #0
   11d9c:	strd	r2, [r6, #232]	; 0xe8
   11da0:	bl	125e0 <setup@@Base>
   11da4:	ldrd	r0, [r6, #240]	; 0xf0
   11da8:	adds	r2, r0, #1
   11dac:	adc	r3, r1, #0
   11db0:	strd	r2, [r6, #240]	; 0xf0
   11db4:	bl	1332c <if_statement_only@@Base>
   11db8:	ldrd	r2, [r6, #248]	; 0xf8
   11dbc:	mov	r0, r5
   11dc0:	adds	r2, r2, #1
   11dc4:	adc	r3, r3, #0
   11dc8:	strd	r2, [r6, #248]	; 0xf8
   11dcc:	bl	118c4 <puts@plt>
   11dd0:	add	r2, r4, #1776	; 0x6f0
   11dd4:	mov	r1, r9
   11dd8:	ldrd	sl, [r2]
   11ddc:	mov	r0, r7
   11de0:	add	r6, r4, #1824	; 0x720
   11de4:	adds	sl, sl, #1
   11de8:	adc	fp, fp, #0
   11dec:	strd	sl, [r2]
   11df0:	ldr	r2, [pc, #776]	; 12100 <main@@Base+0x710>
   11df4:	add	r2, pc, r2
   11df8:	bl	11858 <printf@plt>
   11dfc:	ldr	r3, [sp, #12]
   11e00:	str	r3, [sp, #8]
   11e04:	ldrd	r0, [r3, #-8]
   11e08:	adds	sl, r0, #1
   11e0c:	adc	fp, r1, #0
   11e10:	strd	sl, [r3, #-8]
   11e14:	bl	125e0 <setup@@Base>
   11e18:	ldr	r3, [sp, #8]
   11e1c:	ldrd	r0, [r3]
   11e20:	adds	sl, r0, #1
   11e24:	adc	fp, r1, #0
   11e28:	strd	sl, [r3]
   11e2c:	bl	135fc <if_else_statements@@Base>
   11e30:	ldrd	r2, [r8, #-8]
   11e34:	mov	r0, r5
   11e38:	adds	sl, r2, #1
   11e3c:	adc	fp, r3, #0
   11e40:	mov	r2, sl
   11e44:	mov	r3, fp
   11e48:	strd	r2, [r8, #-8]
   11e4c:	bl	118c4 <puts@plt>
   11e50:	ldrd	r2, [r8]
   11e54:	mov	r1, r9
   11e58:	mov	r0, r7
   11e5c:	adds	sl, r2, #1
   11e60:	adc	fp, r3, #0
   11e64:	mov	r3, fp
   11e68:	mov	r2, sl
   11e6c:	strd	r2, [r8]
   11e70:	ldr	r2, [pc, #652]	; 12104 <main@@Base+0x714>
   11e74:	add	r8, r4, #1856	; 0x740
   11e78:	add	r2, pc, r2
   11e7c:	bl	11858 <printf@plt>
   11e80:	ldrd	r2, [r6, #-8]
   11e84:	adds	r0, r2, #1
   11e88:	adc	r1, r3, #0
   11e8c:	strd	r0, [r6, #-8]
   11e90:	bl	125e0 <setup@@Base>
   11e94:	ldrd	r2, [r6]
   11e98:	mov	ip, r6
   11e9c:	add	r6, r4, #1872	; 0x750
   11ea0:	adds	r0, r2, #1
   11ea4:	adc	r1, r3, #0
   11ea8:	strd	r0, [ip]
   11eac:	bl	13ea4 <if_statement_inside_if_statement@@Base>
   11eb0:	add	r3, r4, #1840	; 0x730
   11eb4:	add	r1, r4, #1840	; 0x730
   11eb8:	ldrd	r2, [r3, #-8]
   11ebc:	mov	r0, r5
   11ec0:	adds	sl, r2, #1
   11ec4:	adc	fp, r3, #0
   11ec8:	mov	r2, sl
   11ecc:	mov	r3, fp
   11ed0:	strd	r2, [r1, #-8]
   11ed4:	bl	118c4 <puts@plt>
   11ed8:	add	r3, r4, #1840	; 0x730
   11edc:	add	r0, r4, #1840	; 0x730
   11ee0:	ldrd	r2, [r3]
   11ee4:	mov	r1, r9
   11ee8:	adds	sl, r2, #1
   11eec:	adc	fp, r3, #0
   11ef0:	mov	r3, fp
   11ef4:	mov	r2, sl
   11ef8:	add	sl, r4, #1888	; 0x760
   11efc:	strd	r2, [r0]
   11f00:	ldr	r2, [pc, #512]	; 12108 <main@@Base+0x718>
   11f04:	mov	r0, r7
   11f08:	add	r2, pc, r2
   11f0c:	bl	11858 <printf@plt>
   11f10:	ldrd	r2, [r8, #-8]
   11f14:	adds	r0, r2, #1
   11f18:	adc	r1, r3, #0
   11f1c:	strd	r0, [r8, #-8]
   11f20:	bl	125e0 <setup@@Base>
   11f24:	ldrd	r0, [r8]
   11f28:	add	ip, r4, #1904	; 0x770
   11f2c:	str	ip, [sp, #8]
   11f30:	adds	r2, r0, #1
   11f34:	adc	r3, r1, #0
   11f38:	strd	r2, [r8]
   11f3c:	bl	142dc <if_statement_inside_else_statement@@Base>
   11f40:	ldrd	r2, [r6, #-8]
   11f44:	mov	r0, r5
   11f48:	add	r8, r4, #1920	; 0x780
   11f4c:	adds	r2, r2, #1
   11f50:	adc	r3, r3, #0
   11f54:	strd	r2, [r6, #-8]
   11f58:	bl	118c4 <puts@plt>
   11f5c:	ldrd	r2, [r6]
   11f60:	mov	r1, r9
   11f64:	mov	r0, r7
   11f68:	adds	r2, r2, #1
   11f6c:	adc	r3, r3, #0
   11f70:	strd	r2, [r6]
   11f74:	ldr	r2, [pc, #400]	; 1210c <main@@Base+0x71c>
   11f78:	add	r2, pc, r2
   11f7c:	bl	11858 <printf@plt>
   11f80:	ldrd	r0, [sl, #-8]
   11f84:	adds	r2, r0, #1
   11f88:	adc	r3, r1, #0
   11f8c:	strd	r2, [sl, #-8]
   11f90:	bl	125e0 <setup@@Base>
   11f94:	ldrd	r0, [sl]
   11f98:	adds	r2, r0, #1
   11f9c:	adc	r3, r1, #0
   11fa0:	strd	r2, [sl]
   11fa4:	bl	13c34 <body_with_one_return@@Base>
   11fa8:	ldr	ip, [sp, #8]
   11fac:	mov	r0, r5
   11fb0:	ldrd	sl, [ip, #-8]
   11fb4:	adds	r2, sl, #1
   11fb8:	adc	r3, fp, #0
   11fbc:	mov	fp, r3
   11fc0:	mov	sl, r2
   11fc4:	strd	sl, [ip, #-8]
   11fc8:	bl	118c4 <puts@plt>
   11fcc:	ldr	ip, [sp, #8]
   11fd0:	mov	r0, r7
   11fd4:	ldr	r2, [pc, #308]	; 12110 <main@@Base+0x720>
   11fd8:	ldrd	sl, [ip]
   11fdc:	mov	r1, r9
   11fe0:	add	r2, pc, r2
   11fe4:	adds	r6, sl, #1
   11fe8:	adc	r7, fp, #0
   11fec:	mov	sl, r6
   11ff0:	mov	fp, r7
   11ff4:	add	r7, r4, #1952	; 0x7a0
   11ff8:	strd	sl, [ip]
   11ffc:	bl	11858 <printf@plt>
   12000:	ldrd	r2, [r8, #-8]
   12004:	adds	sl, r2, #1
   12008:	adc	fp, r3, #0
   1200c:	strd	sl, [r8, #-8]
   12010:	bl	125e0 <setup@@Base>
   12014:	ldrd	r2, [r8]
   12018:	adds	sl, r2, #1
   1201c:	adc	fp, r3, #0
   12020:	strd	sl, [r8]
   12024:	bl	1390c <body_with_two_returns@@Base>
   12028:	add	r3, r4, #1936	; 0x790
   1202c:	mov	r0, r5
   12030:	ldrd	r2, [r3, #-8]
   12034:	adds	sl, r2, #1
   12038:	adc	fp, r3, #0
   1203c:	add	r3, r4, #1936	; 0x790
   12040:	strd	sl, [r3, #-8]
   12044:	bl	118c4 <puts@plt>
   12048:	add	r3, r4, #1936	; 0x790
   1204c:	ldr	r0, [pc, #192]	; 12114 <main@@Base+0x724>
   12050:	ldrd	r2, [r3]
   12054:	add	r0, pc, r0
   12058:	adds	sl, r2, #1
   1205c:	adc	fp, r3, #0
   12060:	add	r3, r4, #1936	; 0x790
   12064:	add	r4, r4, #1968	; 0x7b0
   12068:	strd	sl, [r3]
   1206c:	bl	118c4 <puts@plt>
   12070:	ldrd	r2, [r7, #-8]
   12074:	ldr	r0, [pc, #156]	; 12118 <main@@Base+0x728>
   12078:	adds	sl, r2, #1
   1207c:	adc	fp, r3, #0
   12080:	add	r0, pc, r0
   12084:	strd	sl, [r7, #-8]
   12088:	bl	118c4 <puts@plt>
   1208c:	ldrd	r2, [r7]
   12090:	ldr	r0, [sp, #4]
   12094:	adds	r8, r2, #1
   12098:	adc	r9, r3, #0
   1209c:	strd	r8, [r7]
   120a0:	bl	118c4 <puts@plt>
   120a4:	ldrd	r2, [r4, #-8]
   120a8:	mov	r0, #0
   120ac:	adds	r6, r2, #1
   120b0:	adc	r7, r3, #0
   120b4:	strd	r6, [r4, #-8]
   120b8:	add	sp, sp, #20
   120bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120c0:	andeq	r8, r1, r0, lsr #31
   120c4:	andeq	r8, r1, r8, ror #11
   120c8:	strheq	r0, [r0], -ip
   120cc:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   120d0:	andeq	r6, r0, r0, lsr pc
   120d4:	andeq	r6, r0, ip, ror #29
   120d8:	strdeq	r6, [r0], -r0
   120dc:	ldrdeq	r6, [r0], -r0
   120e0:			; <UNDEFINED> instruction: 0x00006eb8
   120e4:	andeq	r6, r0, ip, ror lr
   120e8:	andeq	r6, r0, r8, asr lr
   120ec:	andeq	r6, r0, r8, lsl lr
   120f0:	ldrdeq	r6, [r0], -ip
   120f4:	andeq	r6, r0, r4, lsr #27
   120f8:	andeq	r6, r0, r4, ror #26
   120fc:	andeq	r6, r0, ip, lsl sp
   12100:	andeq	r6, r0, r4, asr #25
   12104:	andeq	r6, r0, r4, asr ip
   12108:	andeq	r6, r0, r8, ror #23
   1210c:	muleq	r0, ip, fp
   12110:	andeq	r6, r0, ip, asr #22
   12114:	strdeq	r6, [r0], -r0
   12118:	ldrdeq	r6, [r0], -r4
   1211c:	ldr	r0, [pc, #4]	; 12128 <main@@Base+0x738>
   12120:	add	r0, pc, r0
   12124:	b	1818c <__gcov_sort_n_vals@@Base+0x458>
   12128:	andeq	r7, r1, r8, lsr #31
   1212c:	ldr	r0, [pc, #4]	; 12138 <main@@Base+0x748>
   12130:	add	r0, pc, r0
   12134:	b	1818c <__gcov_sort_n_vals@@Base+0x458>
   12138:	ldrdeq	r8, [r1], -r0
   1213c:	ldr	r0, [pc, #4]	; 12148 <main@@Base+0x758>
   12140:	add	r0, pc, r0
   12144:	b	1818c <__gcov_sort_n_vals@@Base+0x458>
   12148:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1214c:	ldr	r0, [pc, #4]	; 12158 <main@@Base+0x768>
   12150:	add	r0, pc, r0
   12154:	b	1818c <__gcov_sort_n_vals@@Base+0x458>
   12158:	andeq	r8, r1, r8, asr #13

0001215c <_start@@Base>:
   1215c:	mov	fp, #0
   12160:	mov	lr, #0
   12164:	pop	{r1}		; (ldr r1, [sp], #4)
   12168:	mov	r2, sp
   1216c:	push	{r2}		; (str r2, [sp, #-4]!)
   12170:	push	{r0}		; (str r0, [sp, #-4]!)
   12174:	ldr	ip, [pc, #16]	; 1218c <_start@@Base+0x30>
   12178:	push	{ip}		; (str ip, [sp, #-4]!)
   1217c:	ldr	r0, [pc, #12]	; 12190 <_start@@Base+0x34>
   12180:	ldr	r3, [pc, #12]	; 12194 <_start@@Base+0x38>
   12184:	bl	118dc <__libc_start_main@plt>
   12188:	bl	119cc <abort@plt>
   1218c:	andeq	r8, r1, r8, lsl r5
   12190:	strdeq	r1, [r1], -r0
   12194:			; <UNDEFINED> instruction: 0x000184b8
   12198:	ldr	r3, [pc, #20]	; 121b4 <_start@@Base+0x58>
   1219c:	ldr	r2, [pc, #20]	; 121b8 <_start@@Base+0x5c>
   121a0:	add	r3, pc, r3
   121a4:	ldr	r2, [r3, r2]
   121a8:	cmp	r2, #0
   121ac:	bxeq	lr
   121b0:	b	118f4 <__gmon_start__@plt>
   121b4:	andeq	r7, r1, r8, asr lr
   121b8:	andeq	r0, r0, ip, lsr #1
   121bc:	ldr	r3, [pc, #28]	; 121e0 <_start@@Base+0x84>
   121c0:	ldr	r0, [pc, #28]	; 121e4 <_start@@Base+0x88>
   121c4:	sub	r3, r3, r0
   121c8:	cmp	r3, #6
   121cc:	bxls	lr
   121d0:	ldr	r3, [pc, #16]	; 121e8 <_start@@Base+0x8c>
   121d4:	cmp	r3, #0
   121d8:	bxeq	lr
   121dc:	bx	r3
   121e0:	muleq	r2, pc, r9	; <UNPREDICTABLE>
   121e4:	muleq	r2, ip, r9
   121e8:	andeq	r0, r0, r0
   121ec:	ldr	r1, [pc, #36]	; 12218 <_start@@Base+0xbc>
   121f0:	ldr	r0, [pc, #36]	; 1221c <_start@@Base+0xc0>
   121f4:	sub	r1, r1, r0
   121f8:	asr	r1, r1, #2
   121fc:	add	r1, r1, r1, lsr #31
   12200:	asrs	r1, r1, #1
   12204:	bxeq	lr
   12208:	ldr	r3, [pc, #16]	; 12220 <_start@@Base+0xc4>
   1220c:	cmp	r3, #0
   12210:	bxeq	lr
   12214:	bx	r3
   12218:	muleq	r2, ip, r9
   1221c:	muleq	r2, ip, r9
   12220:	andeq	r0, r0, r0
   12224:	push	{r4, lr}
   12228:	ldr	r4, [pc, #24]	; 12248 <_start@@Base+0xec>
   1222c:	ldrb	r3, [r4]
   12230:	cmp	r3, #0
   12234:	popne	{r4, pc}
   12238:	bl	121bc <_start@@Base+0x60>
   1223c:	mov	r3, #1
   12240:	strb	r3, [r4]
   12244:	pop	{r4, pc}
   12248:	andeq	sl, r2, r0, lsr #19
   1224c:	ldr	r0, [pc, #40]	; 1227c <_start@@Base+0x120>
   12250:	ldr	r3, [r0]
   12254:	cmp	r3, #0
   12258:	bne	12260 <_start@@Base+0x104>
   1225c:	b	121ec <_start@@Base+0x90>
   12260:	ldr	r3, [pc, #24]	; 12280 <_start@@Base+0x124>
   12264:	cmp	r3, #0
   12268:	beq	1225c <_start@@Base+0x100>
   1226c:	push	{r4, lr}
   12270:	blx	r3
   12274:	pop	{r4, lr}
   12278:	b	121ec <_start@@Base+0x90>
   1227c:	andeq	r9, r2, r4, lsl pc
   12280:	andeq	r0, r0, r0

00012284 <next@@Base>:
   12284:	ldr	r1, [pc, #352]	; 123ec <next@@Base+0x168>
   12288:	ldr	r3, [pc, #352]	; 123f0 <next@@Base+0x16c>
   1228c:	add	r1, pc, r1
   12290:	push	{r4, r5, r6, r7, r8, lr}
   12294:	ldr	r3, [r1, r3]
   12298:	ldr	r2, [r3, #204]	; 0xcc
   1229c:	str	r0, [r3]
   122a0:	cmp	r2, #49	; 0x31
   122a4:	bhi	12338 <next@@Base+0xb4>
   122a8:	add	r2, r2, #1
   122ac:	str	r0, [r3, r2, lsl #2]
   122b0:	ldr	r2, [r3, #204]	; 0xcc
   122b4:	ldr	ip, [pc, #312]	; 123f4 <next@@Base+0x170>
   122b8:	add	r2, r2, #1
   122bc:	str	r2, [r3, #204]	; 0xcc
   122c0:	ldr	r2, [r1, ip]
   122c4:	ldr	ip, [r2, #200]	; 0xc8
   122c8:	cmp	ip, #49	; 0x31
   122cc:	bhi	122fc <next@@Base+0x78>
   122d0:	ldr	r6, [pc, #288]	; 123f8 <next@@Base+0x174>
   122d4:	ldr	lr, [pc, #288]	; 123fc <next@@Base+0x178>
   122d8:	add	r6, pc, r6
   122dc:	add	r7, ip, #1
   122e0:	ldrd	r4, [r6, #8]
   122e4:	str	r7, [r2, #200]	; 0xc8
   122e8:	ldr	r1, [r1, lr]
   122ec:	adds	r4, r4, #1
   122f0:	adc	r5, r5, #0
   122f4:	str	r1, [r2, ip, lsl #2]
   122f8:	strd	r4, [r6, #8]
   122fc:	ldr	r2, [r3, #232]	; 0xe8
   12300:	cmp	r2, #0
   12304:	beq	12360 <next@@Base+0xdc>
   12308:	ldr	r4, [pc, #240]	; 12400 <next@@Base+0x17c>
   1230c:	add	r4, pc, r4
   12310:	ldrd	r6, [r4, #16]
   12314:	adds	r6, r6, #1
   12318:	adc	r7, r7, #0
   1231c:	strd	r6, [r4, #16]
   12320:	blx	r2
   12324:	ldrd	r2, [r4, #24]
   12328:	adds	r2, r2, #1
   1232c:	adc	r3, r3, #0
   12330:	strd	r2, [r4, #24]
   12334:	pop	{r4, r5, r6, r7, r8, pc}
   12338:	ldr	lr, [pc, #196]	; 12404 <next@@Base+0x180>
   1233c:	ldr	ip, [r3, #212]	; 0xd4
   12340:	add	lr, pc, lr
   12344:	add	ip, ip, #1
   12348:	ldrd	r4, [lr]
   1234c:	str	ip, [r3, #212]	; 0xd4
   12350:	adds	r4, r4, #1
   12354:	adc	r5, r5, #0
   12358:	strd	r4, [lr]
   1235c:	b	122b4 <next@@Base+0x30>
   12360:	ldr	r2, [r3, #220]	; 0xdc
   12364:	cmp	r2, #0
   12368:	beq	123a4 <next@@Base+0x120>
   1236c:	ldr	r1, [r3, #224]	; 0xe0
   12370:	cmp	r2, r1
   12374:	ble	123c4 <next@@Base+0x140>
   12378:	ldr	r2, [pc, #136]	; 12408 <next@@Base+0x184>
   1237c:	ldr	r0, [r3, #228]	; 0xe4
   12380:	add	r2, pc, r2
   12384:	add	ip, r1, #1
   12388:	ldrd	r4, [r2, #32]
   1238c:	ldr	r0, [r0, r1, lsl #2]
   12390:	str	ip, [r3, #224]	; 0xe0
   12394:	adds	r4, r4, #1
   12398:	adc	r5, r5, #0
   1239c:	strd	r4, [r2, #32]
   123a0:	pop	{r4, r5, r6, r7, r8, pc}
   123a4:	ldr	r1, [pc, #96]	; 1240c <next@@Base+0x188>
   123a8:	ldr	r0, [r3, #216]	; 0xd8
   123ac:	add	r1, pc, r1
   123b0:	ldrd	r2, [r1, #48]	; 0x30
   123b4:	adds	r2, r2, #1
   123b8:	adc	r3, r3, #0
   123bc:	strd	r2, [r1, #48]	; 0x30
   123c0:	pop	{r4, r5, r6, r7, r8, pc}
   123c4:	ldr	r1, [pc, #68]	; 12410 <next@@Base+0x18c>
   123c8:	ldr	r3, [r3, #228]	; 0xe4
   123cc:	add	r1, pc, r1
   123d0:	sub	r2, r2, #-1073741823	; 0xc0000001
   123d4:	ldrd	r4, [r1, #40]	; 0x28
   123d8:	ldr	r0, [r3, r2, lsl #2]
   123dc:	adds	r4, r4, #1
   123e0:	adc	r5, r5, #0
   123e4:	strd	r4, [r1, #40]	; 0x28
   123e8:	pop	{r4, r5, r6, r7, r8, pc}
   123ec:	andeq	r7, r1, ip, ror #26
   123f0:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   123f4:	andeq	r0, r0, r4, asr #1
   123f8:	andeq	r8, r1, r8, asr #13
   123fc:	andeq	r0, r0, r8, lsr #1
   12400:	muleq	r1, r4, r6
   12404:	andeq	r8, r1, r0, ror #12
   12408:	andeq	r8, r1, r0, lsr #12
   1240c:	strdeq	r8, [r1], -r4
   12410:	ldrdeq	r8, [r1], -r4

00012414 <push_back@@Base>:
   12414:	ldr	ip, [pc, #252]	; 12518 <push_back@@Base+0x104>
   12418:	ldr	r3, [pc, #252]	; 1251c <push_back@@Base+0x108>
   1241c:	add	ip, pc, ip
   12420:	push	{r4, r5, r6, r7, r8, lr}
   12424:	ldr	r3, [ip, r3]
   12428:	ldr	r2, [r3, #408]	; 0x198
   1242c:	str	r0, [r3]
   12430:	cmp	r2, #49	; 0x31
   12434:	str	r1, [r3, #204]	; 0xcc
   12438:	bhi	124f0 <push_back@@Base+0xdc>
   1243c:	ldr	lr, [pc, #220]	; 12520 <push_back@@Base+0x10c>
   12440:	add	r2, r2, #1
   12444:	add	lr, pc, lr
   12448:	str	r0, [r3, r2, lsl #2]
   1244c:	ldr	r2, [r3, #408]	; 0x198
   12450:	ldrd	r4, [lr, #56]	; 0x38
   12454:	add	r2, r2, #52	; 0x34
   12458:	adds	r4, r4, #1
   1245c:	str	r1, [r3, r2, lsl #2]
   12460:	ldr	r2, [r3, #408]	; 0x198
   12464:	adc	r5, r5, #0
   12468:	strd	r4, [lr, #56]	; 0x38
   1246c:	ldr	lr, [pc, #176]	; 12524 <push_back@@Base+0x110>
   12470:	add	r2, r2, #1
   12474:	str	r2, [r3, #408]	; 0x198
   12478:	ldr	r2, [ip, lr]
   1247c:	ldr	lr, [r2, #200]	; 0xc8
   12480:	cmp	lr, #49	; 0x31
   12484:	bhi	124b4 <push_back@@Base+0xa0>
   12488:	ldr	r7, [pc, #152]	; 12528 <push_back@@Base+0x114>
   1248c:	ldr	r6, [pc, #152]	; 1252c <push_back@@Base+0x118>
   12490:	add	r7, pc, r7
   12494:	add	r8, lr, #1
   12498:	ldrd	r4, [r7, #72]	; 0x48
   1249c:	str	r8, [r2, #200]	; 0xc8
   124a0:	ldr	ip, [ip, r6]
   124a4:	adds	r4, r4, #1
   124a8:	adc	r5, r5, #0
   124ac:	str	ip, [r2, lr, lsl #2]
   124b0:	strd	r4, [r7, #72]	; 0x48
   124b4:	ldr	r5, [r3, #420]	; 0x1a4
   124b8:	cmp	r5, #0
   124bc:	popeq	{r4, r5, r6, r7, r8, pc}
   124c0:	ldr	r4, [pc, #104]	; 12530 <push_back@@Base+0x11c>
   124c4:	add	r4, pc, r4
   124c8:	ldrd	r2, [r4, #80]	; 0x50
   124cc:	adds	r2, r2, #1
   124d0:	adc	r3, r3, #0
   124d4:	strd	r2, [r4, #80]	; 0x50
   124d8:	blx	r5
   124dc:	ldrd	r2, [r4, #88]	; 0x58
   124e0:	adds	r2, r2, #1
   124e4:	adc	r3, r3, #0
   124e8:	strd	r2, [r4, #88]	; 0x58
   124ec:	pop	{r4, r5, r6, r7, r8, pc}
   124f0:	ldr	r6, [pc, #60]	; 12534 <push_back@@Base+0x120>
   124f4:	ldr	lr, [r3, #416]	; 0x1a0
   124f8:	add	r6, pc, r6
   124fc:	add	lr, lr, #1
   12500:	ldrd	r4, [r6, #64]	; 0x40
   12504:	str	lr, [r3, #416]	; 0x1a0
   12508:	adds	r4, r4, #1
   1250c:	adc	r5, r5, #0
   12510:	strd	r4, [r6, #64]	; 0x40
   12514:	b	1246c <push_back@@Base+0x58>
   12518:	ldrdeq	r7, [r1], -ip
   1251c:	andeq	r0, r0, r0, lsr #1
   12520:	andeq	r8, r1, ip, asr r5
   12524:	andeq	r0, r0, r4, asr #1
   12528:	andeq	r8, r1, r0, lsl r5
   1252c:	andeq	r0, r0, r0, asr #1
   12530:	ldrdeq	r8, [r1], -ip
   12534:	andeq	r8, r1, r8, lsr #9

00012538 <next_reset@@Base>:
   12538:	ldr	ip, [pc, #64]	; 12580 <next_reset@@Base+0x48>
   1253c:	push	{r4, r5, r6, lr}
   12540:	add	ip, pc, ip
   12544:	ldr	r3, [pc, #56]	; 12584 <next_reset@@Base+0x4c>
   12548:	ldrd	r4, [ip, #96]	; 0x60
   1254c:	ldr	r0, [pc, #52]	; 12588 <next_reset@@Base+0x50>
   12550:	add	r3, pc, r3
   12554:	adds	r4, r4, #1
   12558:	adc	r5, r5, #0
   1255c:	mov	r2, #236	; 0xec
   12560:	strd	r4, [ip, #96]	; 0x60
   12564:	ldr	r4, [r3, r0]
   12568:	mov	r1, #0
   1256c:	mov	r0, r4
   12570:	bl	1196c <memset@plt>
   12574:	mov	r3, #50	; 0x32
   12578:	str	r3, [r4, #208]	; 0xd0
   1257c:	pop	{r4, r5, r6, pc}
   12580:	andeq	r8, r1, r0, ror #8
   12584:	andeq	r7, r1, r8, lsr #21
   12588:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>

0001258c <push_back_reset@@Base>:
   1258c:	ldr	ip, [pc, #64]	; 125d4 <push_back_reset@@Base+0x48>
   12590:	push	{r4, r5, r6, lr}
   12594:	add	ip, pc, ip
   12598:	ldr	r3, [pc, #56]	; 125d8 <push_back_reset@@Base+0x4c>
   1259c:	ldrd	r4, [ip, #104]	; 0x68
   125a0:	ldr	r0, [pc, #52]	; 125dc <push_back_reset@@Base+0x50>
   125a4:	add	r3, pc, r3
   125a8:	adds	r4, r4, #1
   125ac:	adc	r5, r5, #0
   125b0:	mov	r2, #424	; 0x1a8
   125b4:	strd	r4, [ip, #104]	; 0x68
   125b8:	ldr	r4, [r3, r0]
   125bc:	mov	r1, #0
   125c0:	mov	r0, r4
   125c4:	bl	1196c <memset@plt>
   125c8:	mov	r3, #50	; 0x32
   125cc:	str	r3, [r4, #412]	; 0x19c
   125d0:	pop	{r4, r5, r6, pc}
   125d4:	andeq	r8, r1, ip, lsl #8
   125d8:	andeq	r7, r1, r4, asr sl
   125dc:	andeq	r0, r0, r0, lsr #1

000125e0 <setup@@Base>:
   125e0:	push	{r4, lr}
   125e4:	ldr	r4, [pc, #60]	; 12628 <setup@@Base+0x48>
   125e8:	add	r4, pc, r4
   125ec:	ldrd	r2, [r4, #112]	; 0x70
   125f0:	adds	r2, r2, #1
   125f4:	adc	r3, r3, #0
   125f8:	strd	r2, [r4, #112]	; 0x70
   125fc:	bl	12538 <next_reset@@Base>
   12600:	ldrd	r2, [r4, #120]	; 0x78
   12604:	adds	r2, r2, #1
   12608:	adc	r3, r3, #0
   1260c:	strd	r2, [r4, #120]	; 0x78
   12610:	bl	1258c <push_back_reset@@Base>
   12614:	ldrd	r2, [r4, #128]	; 0x80
   12618:	adds	r2, r2, #1
   1261c:	adc	r3, r3, #0
   12620:	strd	r2, [r4, #128]	; 0x80
   12624:	pop	{r4, pc}
   12628:			; <UNDEFINED> instruction: 0x000183b8

0001262c <no_int_as_first_stuff@@Base>:
   1262c:	push	{r4, r5, r6, r7, lr}
   12630:	sub	sp, sp, #20
   12634:	ldr	r4, [pc, #244]	; 12730 <no_int_as_first_stuff@@Base+0x104>
   12638:	add	r1, sp, #4
   1263c:	add	r4, pc, r4
   12640:	mov	r0, sp
   12644:	ldrd	r2, [r4, #136]	; 0x88
   12648:	ldr	r5, [pc, #228]	; 12734 <no_int_as_first_stuff@@Base+0x108>
   1264c:	adds	r2, r2, #1
   12650:	adc	r3, r3, #0
   12654:	add	r5, pc, r5
   12658:	strd	r2, [r4, #136]	; 0x88
   1265c:	bl	154dc <init_grammar@@Base>
   12660:	ldrd	r2, [r4, #144]	; 0x90
   12664:	mov	r0, #4
   12668:	adds	r2, r2, #1
   1266c:	adc	r3, r3, #0
   12670:	strd	r2, [r4, #144]	; 0x90
   12674:	bl	118d0 <malloc@plt>
   12678:	mov	r7, r0
   1267c:	bl	147dc <init_token_opar@@Base>
   12680:	ldrd	r2, [r4, #152]	; 0x98
   12684:	ldr	r1, [pc, #172]	; 12738 <no_int_as_first_stuff@@Base+0x10c>
   12688:	mov	r0, sp
   1268c:	adds	r2, r2, #1
   12690:	adc	r3, r3, #0
   12694:	strd	r2, [r4, #152]	; 0x98
   12698:	ldr	r5, [r5, r1]
   1269c:	str	r7, [r5, #216]	; 0xd8
   126a0:	bl	16074 <read_function_ast_node@@Base>
   126a4:	ldr	r3, [r5, #204]	; 0xcc
   126a8:	cmp	r3, #1
   126ac:	bne	126d0 <no_int_as_first_stuff@@Base+0xa4>
   126b0:	cmp	r0, #0
   126b4:	bne	12700 <no_int_as_first_stuff@@Base+0xd4>
   126b8:	ldrd	r2, [r4, #168]	; 0xa8
   126bc:	adds	r2, r2, #1
   126c0:	adc	r3, r3, #0
   126c4:	strd	r2, [r4, #168]	; 0xa8
   126c8:	add	sp, sp, #20
   126cc:	pop	{r4, r5, r6, r7, pc}
   126d0:	ldrd	r6, [r4, #160]	; 0xa0
   126d4:	ldr	r3, [pc, #96]	; 1273c <no_int_as_first_stuff@@Base+0x110>
   126d8:	ldr	r1, [pc, #96]	; 12740 <no_int_as_first_stuff@@Base+0x114>
   126dc:	adds	r6, r6, #1
   126e0:	ldr	r0, [pc, #92]	; 12744 <no_int_as_first_stuff@@Base+0x118>
   126e4:	adc	r7, r7, #0
   126e8:	add	r3, pc, r3
   126ec:	mov	r2, #41	; 0x29
   126f0:	add	r1, pc, r1
   126f4:	add	r0, pc, r0
   126f8:	strd	r6, [r4, #160]	; 0xa0
   126fc:	bl	119e4 <__assert_fail@plt>
   12700:	ldrd	r6, [r4, #176]	; 0xb0
   12704:	ldr	r3, [pc, #60]	; 12748 <no_int_as_first_stuff@@Base+0x11c>
   12708:	ldr	r1, [pc, #60]	; 1274c <no_int_as_first_stuff@@Base+0x120>
   1270c:	adds	r6, r6, #1
   12710:	ldr	r0, [pc, #56]	; 12750 <no_int_as_first_stuff@@Base+0x124>
   12714:	adc	r7, r7, #0
   12718:	add	r3, pc, r3
   1271c:	mov	r2, #42	; 0x2a
   12720:	add	r1, pc, r1
   12724:	add	r0, pc, r0
   12728:	strd	r6, [r4, #176]	; 0xb0
   1272c:	bl	119e4 <__assert_fail@plt>
   12730:	andeq	r8, r1, r4, ror #6
   12734:	andeq	r7, r1, r4, lsr #19
   12738:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   1273c:	andeq	r5, r0, r0, ror #28
   12740:	andeq	r5, r0, r8, asr #31
   12744:	andeq	r6, r0, r0, lsr #32
   12748:	andeq	r5, r0, r0, lsr lr
   1274c:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   12750:	andeq	r6, r0, ip

00012754 <int_but_not_followed_by_function@@Base>:
   12754:	push	{r4, r5, r6, r7, lr}
   12758:	sub	sp, sp, #20
   1275c:	ldr	r4, [pc, #304]	; 12894 <int_but_not_followed_by_function@@Base+0x140>
   12760:	add	r1, sp, #4
   12764:	add	r4, pc, r4
   12768:	mov	r0, sp
   1276c:	ldrd	r2, [r4, #184]	; 0xb8
   12770:	ldr	r5, [pc, #288]	; 12898 <int_but_not_followed_by_function@@Base+0x144>
   12774:	adds	r2, r2, #1
   12778:	adc	r3, r3, #0
   1277c:	add	r5, pc, r5
   12780:	strd	r2, [r4, #184]	; 0xb8
   12784:	bl	154dc <init_grammar@@Base>
   12788:	ldrd	r2, [r4, #192]	; 0xc0
   1278c:	mov	r0, #8
   12790:	adds	r2, r2, #1
   12794:	adc	r3, r3, #0
   12798:	strd	r2, [r4, #192]	; 0xc0
   1279c:	bl	118d0 <malloc@plt>
   127a0:	mov	r6, r0
   127a4:	mov	r0, #4
   127a8:	bl	118d0 <malloc@plt>
   127ac:	str	r0, [r6]
   127b0:	bl	14754 <init_token_int_type@@Base>
   127b4:	ldrd	r2, [r4, #200]	; 0xc8
   127b8:	mov	r0, #4
   127bc:	adds	r2, r2, #1
   127c0:	adc	r3, r3, #0
   127c4:	strd	r2, [r4, #200]	; 0xc8
   127c8:	bl	118d0 <malloc@plt>
   127cc:	str	r0, [r6, #4]
   127d0:	bl	147dc <init_token_opar@@Base>
   127d4:	ldrd	r2, [r4, #208]	; 0xd0
   127d8:	ldr	r1, [pc, #188]	; 1289c <int_but_not_followed_by_function@@Base+0x148>
   127dc:	mov	ip, #2
   127e0:	adds	r2, r2, #1
   127e4:	adc	r3, r3, #0
   127e8:	mov	r0, sp
   127ec:	strd	r2, [r4, #208]	; 0xd0
   127f0:	ldr	r5, [r5, r1]
   127f4:	str	r6, [r5, #228]	; 0xe4
   127f8:	str	ip, [r5, #220]	; 0xdc
   127fc:	bl	16074 <read_function_ast_node@@Base>
   12800:	ldr	r3, [r5, #204]	; 0xcc
   12804:	cmp	r3, #2
   12808:	bne	1282c <int_but_not_followed_by_function@@Base+0xd8>
   1280c:	cmp	r0, #0
   12810:	bne	12860 <int_but_not_followed_by_function@@Base+0x10c>
   12814:	ldrd	r2, [r4, #224]	; 0xe0
   12818:	adds	r2, r2, #1
   1281c:	adc	r3, r3, #0
   12820:	strd	r2, [r4, #224]	; 0xe0
   12824:	add	sp, sp, #20
   12828:	pop	{r4, r5, r6, r7, pc}
   1282c:	ldrd	r6, [r4, #216]	; 0xd8
   12830:	ldr	r3, [pc, #104]	; 128a0 <int_but_not_followed_by_function@@Base+0x14c>
   12834:	ldr	r1, [pc, #104]	; 128a4 <int_but_not_followed_by_function@@Base+0x150>
   12838:	adds	r6, r6, #1
   1283c:	ldr	r0, [pc, #100]	; 128a8 <int_but_not_followed_by_function@@Base+0x154>
   12840:	add	r3, pc, r3
   12844:	adc	r7, r7, #0
   12848:	mov	r2, #67	; 0x43
   1284c:	add	r3, r3, #24
   12850:	add	r1, pc, r1
   12854:	add	r0, pc, r0
   12858:	strd	r6, [r4, #216]	; 0xd8
   1285c:	bl	119e4 <__assert_fail@plt>
   12860:	ldrd	r6, [r4, #232]	; 0xe8
   12864:	ldr	r3, [pc, #64]	; 128ac <int_but_not_followed_by_function@@Base+0x158>
   12868:	ldr	r1, [pc, #64]	; 128b0 <int_but_not_followed_by_function@@Base+0x15c>
   1286c:	adds	r6, r6, #1
   12870:	ldr	r0, [pc, #60]	; 128b4 <int_but_not_followed_by_function@@Base+0x160>
   12874:	add	r3, pc, r3
   12878:	adc	r7, r7, #0
   1287c:	mov	r2, #68	; 0x44
   12880:	add	r3, r3, #24
   12884:	add	r1, pc, r1
   12888:	add	r0, pc, r0
   1288c:	strd	r6, [r4, #232]	; 0xe8
   12890:	bl	119e4 <__assert_fail@plt>
   12894:	andeq	r8, r1, ip, lsr r2
   12898:	andeq	r7, r1, ip, ror r8
   1289c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   128a0:	andeq	r5, r0, r8, lsl #26
   128a4:	andeq	r5, r0, r8, ror #28
   128a8:	andeq	r5, r0, r8, ror #29
   128ac:	ldrdeq	r5, [r0], -r4
   128b0:	andeq	r5, r0, r4, lsr lr
   128b4:	andeq	r5, r0, r8, lsr #29

000128b8 <boolean_expression_is_read_properly@@Base>:
   128b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   128bc:	mov	r0, #3
   128c0:	ldr	r4, [pc, #552]	; 12af0 <boolean_expression_is_read_properly@@Base+0x238>
   128c4:	sub	sp, sp, #16
   128c8:	add	r4, pc, r4
   128cc:	add	r8, r4, #272	; 0x110
   128d0:	ldrd	r2, [r4, #240]	; 0xf0
   128d4:	add	r6, r4, #288	; 0x120
   128d8:	ldr	r7, [pc, #532]	; 12af4 <boolean_expression_is_read_properly@@Base+0x23c>
   128dc:	adds	r2, r2, #1
   128e0:	adc	r3, r3, #0
   128e4:	add	r7, pc, r7
   128e8:	strd	r2, [r4, #240]	; 0xf0
   128ec:	bl	118d0 <malloc@plt>
   128f0:	mov	r1, #33	; 0x21
   128f4:	mov	r2, #61	; 0x3d
   128f8:	mov	r3, #0
   128fc:	mov	r9, r0
   12900:	mov	r0, sp
   12904:	strb	r1, [r9]
   12908:	add	r1, sp, #4
   1290c:	strb	r2, [r9, #1]
   12910:	strb	r3, [r9, #2]
   12914:	bl	154dc <init_grammar@@Base>
   12918:	ldrd	r2, [r4, #248]	; 0xf8
   1291c:	mov	r0, #20
   12920:	adds	r2, r2, #1
   12924:	adc	r3, r3, #0
   12928:	strd	r2, [r4, #248]	; 0xf8
   1292c:	bl	118d0 <malloc@plt>
   12930:	mov	r5, r0
   12934:	mov	r0, #8
   12938:	bl	118d0 <malloc@plt>
   1293c:	mov	r1, #2
   12940:	str	r0, [r5]
   12944:	bl	1477c <init_token_int_value@@Base>
   12948:	add	r1, r4, #256	; 0x100
   1294c:	mov	r0, #8
   12950:	ldrd	r2, [r1]
   12954:	adds	r2, r2, #1
   12958:	adc	r3, r3, #0
   1295c:	strd	r2, [r1]
   12960:	bl	118d0 <malloc@plt>
   12964:	mov	r1, #2
   12968:	str	r0, [r5, #4]
   1296c:	bl	1477c <init_token_int_value@@Base>
   12970:	ldrd	r2, [r8, #-8]
   12974:	mov	r0, #8
   12978:	adds	r2, r2, #1
   1297c:	adc	r3, r3, #0
   12980:	strd	r2, [r8, #-8]
   12984:	bl	118d0 <malloc@plt>
   12988:	mov	r1, r9
   1298c:	str	r0, [r5, #8]
   12990:	bl	14944 <init_token_boolean_op@@Base>
   12994:	ldrd	r2, [r8]
   12998:	mov	r0, #8
   1299c:	adds	r2, r2, #1
   129a0:	adc	r3, r3, #0
   129a4:	strd	r2, [r8]
   129a8:	bl	118d0 <malloc@plt>
   129ac:	mov	r1, #1
   129b0:	str	r0, [r5, #12]
   129b4:	bl	1477c <init_token_int_value@@Base>
   129b8:	ldrd	r2, [r6, #-8]
   129bc:	mov	r0, #4
   129c0:	adds	r2, r2, #1
   129c4:	adc	r3, r3, #0
   129c8:	strd	r2, [r6, #-8]
   129cc:	bl	118d0 <malloc@plt>
   129d0:	str	r0, [r5, #16]
   129d4:	bl	14804 <init_token_cpar@@Base>
   129d8:	ldrd	r2, [r6]
   129dc:	ldr	r1, [pc, #276]	; 12af8 <boolean_expression_is_read_properly@@Base+0x240>
   129e0:	mov	r0, sp
   129e4:	adds	r2, r2, #1
   129e8:	adc	r3, r3, #0
   129ec:	strd	r2, [r6]
   129f0:	ldr	r6, [r7, r1]
   129f4:	mov	r3, #5
   129f8:	str	r3, [r6, #220]	; 0xdc
   129fc:	str	r5, [r6, #228]	; 0xe4
   12a00:	bl	15b10 <read_boolean_expression@@Base>
   12a04:	ldr	r3, [r6, #204]	; 0xcc
   12a08:	cmp	r3, #5
   12a0c:	bne	12a4c <boolean_expression_is_read_properly@@Base+0x194>
   12a10:	ldr	r3, [pc, #228]	; 12afc <boolean_expression_is_read_properly@@Base+0x244>
   12a14:	ldr	r3, [r7, r3]
   12a18:	ldr	r3, [r3, #408]	; 0x198
   12a1c:	cmp	r3, #1
   12a20:	bne	12ab8 <boolean_expression_is_read_properly@@Base+0x200>
   12a24:	ldr	r3, [r0]
   12a28:	add	r4, r4, #320	; 0x140
   12a2c:	cmp	r3, #5
   12a30:	bne	12a84 <boolean_expression_is_read_properly@@Base+0x1cc>
   12a34:	ldrd	r2, [r4, #-8]
   12a38:	adds	r2, r2, #1
   12a3c:	adc	r3, r3, #0
   12a40:	strd	r2, [r4, #-8]
   12a44:	add	sp, sp, #16
   12a48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12a4c:	add	r4, r4, #304	; 0x130
   12a50:	ldr	r3, [pc, #168]	; 12b00 <boolean_expression_is_read_properly@@Base+0x248>
   12a54:	ldrd	r6, [r4, #-8]
   12a58:	ldr	r1, [pc, #164]	; 12b04 <boolean_expression_is_read_properly@@Base+0x24c>
   12a5c:	ldr	r0, [pc, #164]	; 12b08 <boolean_expression_is_read_properly@@Base+0x250>
   12a60:	adds	r6, r6, #1
   12a64:	add	r3, pc, r3
   12a68:	adc	r7, r7, #0
   12a6c:	add	r3, r3, #60	; 0x3c
   12a70:	mov	r2, #105	; 0x69
   12a74:	add	r1, pc, r1
   12a78:	add	r0, pc, r0
   12a7c:	strd	r6, [r4, #-8]
   12a80:	bl	119e4 <__assert_fail@plt>
   12a84:	ldrd	r6, [r4]
   12a88:	ldr	r3, [pc, #124]	; 12b0c <boolean_expression_is_read_properly@@Base+0x254>
   12a8c:	ldr	r1, [pc, #124]	; 12b10 <boolean_expression_is_read_properly@@Base+0x258>
   12a90:	adds	r6, r6, #1
   12a94:	ldr	r0, [pc, #120]	; 12b14 <boolean_expression_is_read_properly@@Base+0x25c>
   12a98:	add	r3, pc, r3
   12a9c:	adc	r7, r7, #0
   12aa0:	add	r3, r3, #60	; 0x3c
   12aa4:	mov	r2, #107	; 0x6b
   12aa8:	add	r1, pc, r1
   12aac:	add	r0, pc, r0
   12ab0:	strd	r6, [r4]
   12ab4:	bl	119e4 <__assert_fail@plt>
   12ab8:	add	r4, r4, #304	; 0x130
   12abc:	ldr	r3, [pc, #84]	; 12b18 <boolean_expression_is_read_properly@@Base+0x260>
   12ac0:	ldrd	r6, [r4]
   12ac4:	ldr	r1, [pc, #80]	; 12b1c <boolean_expression_is_read_properly@@Base+0x264>
   12ac8:	ldr	r0, [pc, #80]	; 12b20 <boolean_expression_is_read_properly@@Base+0x268>
   12acc:	adds	r6, r6, #1
   12ad0:	add	r3, pc, r3
   12ad4:	adc	r7, r7, #0
   12ad8:	add	r3, r3, #60	; 0x3c
   12adc:	mov	r2, #106	; 0x6a
   12ae0:	add	r1, pc, r1
   12ae4:	add	r0, pc, r0
   12ae8:	strd	r6, [r4]
   12aec:	bl	119e4 <__assert_fail@plt>
   12af0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12af4:	andeq	r7, r1, r4, lsl r7
   12af8:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   12afc:	andeq	r0, r0, r0, lsr #1
   12b00:	andeq	r5, r0, r4, ror #21
   12b04:	andeq	r5, r0, r4, asr #24
   12b08:	andeq	r5, r0, r0, ror #25
   12b0c:			; <UNDEFINED> instruction: 0x00005ab0
   12b10:	andeq	r5, r0, r0, lsl ip
   12b14:	andeq	r5, r0, r8, ror #25
   12b18:	andeq	r5, r0, r8, ror sl
   12b1c:	ldrdeq	r5, [r0], -r8
   12b20:	muleq	r0, r0, ip

00012b24 <boolean_expression_complex@@Base>:
   12b24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12b28:	mov	r0, #3
   12b2c:	ldr	r4, [pc, #692]	; 12de8 <boolean_expression_complex@@Base+0x2c4>
   12b30:	sub	sp, sp, #16
   12b34:	add	r4, pc, r4
   12b38:	add	r4, r4, #336	; 0x150
   12b3c:	ldr	sl, [pc, #680]	; 12dec <boolean_expression_complex@@Base+0x2c8>
   12b40:	ldrd	r2, [r4, #-8]
   12b44:	add	sl, pc, sl
   12b48:	adds	r2, r2, #1
   12b4c:	adc	r3, r3, #0
   12b50:	strd	r2, [r4, #-8]
   12b54:	bl	118d0 <malloc@plt>
   12b58:	mov	r7, r0
   12b5c:	mov	r0, #3
   12b60:	bl	118d0 <malloc@plt>
   12b64:	mov	r6, r0
   12b68:	mov	r0, #3
   12b6c:	bl	118d0 <malloc@plt>
   12b70:	mov	ip, #38	; 0x26
   12b74:	mov	r2, #61	; 0x3d
   12b78:	mov	r3, #0
   12b7c:	mov	r1, #60	; 0x3c
   12b80:	strb	ip, [r6]
   12b84:	strb	ip, [r6, #1]
   12b88:	strb	r3, [r6, #2]
   12b8c:	strb	r1, [r7]
   12b90:	strb	r2, [r7, #1]
   12b94:	add	r1, sp, #4
   12b98:	strb	r3, [r7, #2]
   12b9c:	mov	r8, r0
   12ba0:	strb	r2, [r0]
   12ba4:	strb	r2, [r0, #1]
   12ba8:	mov	r0, sp
   12bac:	strb	r3, [r8, #2]
   12bb0:	bl	154dc <init_grammar@@Base>
   12bb4:	ldrd	r2, [r4]
   12bb8:	mov	r0, #40	; 0x28
   12bbc:	adds	r2, r2, #1
   12bc0:	adc	r3, r3, #0
   12bc4:	strd	r2, [r4]
   12bc8:	bl	118d0 <malloc@plt>
   12bcc:	mov	r5, r0
   12bd0:	mov	r0, #8
   12bd4:	bl	118d0 <malloc@plt>
   12bd8:	mov	r1, #2
   12bdc:	str	r0, [r5]
   12be0:	bl	1477c <init_token_int_value@@Base>
   12be4:	ldrd	r2, [r4, #8]
   12be8:	mov	r0, #8
   12bec:	adds	r2, r2, #1
   12bf0:	adc	r3, r3, #0
   12bf4:	strd	r2, [r4, #8]
   12bf8:	bl	118d0 <malloc@plt>
   12bfc:	mov	r1, #2
   12c00:	str	r0, [r5, #4]
   12c04:	bl	1477c <init_token_int_value@@Base>
   12c08:	ldrd	r2, [r4, #16]
   12c0c:	mov	r0, #8
   12c10:	adds	r2, r2, #1
   12c14:	adc	r3, r3, #0
   12c18:	strd	r2, [r4, #16]
   12c1c:	bl	118d0 <malloc@plt>
   12c20:	mov	r1, r7
   12c24:	str	r0, [r5, #8]
   12c28:	bl	14944 <init_token_boolean_op@@Base>
   12c2c:	ldrd	r2, [r4, #24]
   12c30:	mov	r0, #8
   12c34:	adds	r2, r2, #1
   12c38:	adc	r3, r3, #0
   12c3c:	strd	r2, [r4, #24]
   12c40:	bl	118d0 <malloc@plt>
   12c44:	mov	r1, #1
   12c48:	str	r0, [r5, #12]
   12c4c:	bl	1477c <init_token_int_value@@Base>
   12c50:	ldrd	r2, [r4, #32]
   12c54:	mov	r0, #8
   12c58:	adds	r2, r2, #1
   12c5c:	adc	r3, r3, #0
   12c60:	strd	r2, [r4, #32]
   12c64:	bl	118d0 <malloc@plt>
   12c68:	mov	r1, r6
   12c6c:	str	r0, [r5, #16]
   12c70:	bl	14944 <init_token_boolean_op@@Base>
   12c74:	ldrd	r2, [r4, #40]	; 0x28
   12c78:	mov	r0, #8
   12c7c:	adds	r2, r2, #1
   12c80:	adc	r3, r3, #0
   12c84:	strd	r2, [r4, #40]	; 0x28
   12c88:	bl	118d0 <malloc@plt>
   12c8c:	mov	r1, #4
   12c90:	str	r0, [r5, #20]
   12c94:	bl	1477c <init_token_int_value@@Base>
   12c98:	ldrd	r2, [r4, #48]	; 0x30
   12c9c:	mov	r0, #8
   12ca0:	adds	r2, r2, #1
   12ca4:	adc	r3, r3, #0
   12ca8:	strd	r2, [r4, #48]	; 0x30
   12cac:	bl	118d0 <malloc@plt>
   12cb0:	mov	r1, #4
   12cb4:	str	r0, [r5, #24]
   12cb8:	bl	1477c <init_token_int_value@@Base>
   12cbc:	ldrd	r2, [r4, #56]	; 0x38
   12cc0:	mov	r0, #8
   12cc4:	adds	r2, r2, #1
   12cc8:	adc	r3, r3, #0
   12ccc:	strd	r2, [r4, #56]	; 0x38
   12cd0:	bl	118d0 <malloc@plt>
   12cd4:	mov	r1, r8
   12cd8:	str	r0, [r5, #28]
   12cdc:	bl	14944 <init_token_boolean_op@@Base>
   12ce0:	ldrd	r2, [r4, #64]	; 0x40
   12ce4:	mov	r0, #8
   12ce8:	adds	r2, r2, #1
   12cec:	adc	r3, r3, #0
   12cf0:	strd	r2, [r4, #64]	; 0x40
   12cf4:	bl	118d0 <malloc@plt>
   12cf8:	mov	r1, #4
   12cfc:	str	r0, [r5, #32]
   12d00:	bl	1477c <init_token_int_value@@Base>
   12d04:	ldrd	r2, [r4, #72]	; 0x48
   12d08:	mov	r0, #4
   12d0c:	adds	r2, r2, #1
   12d10:	adc	r3, r3, #0
   12d14:	strd	r2, [r4, #72]	; 0x48
   12d18:	bl	118d0 <malloc@plt>
   12d1c:	str	r0, [r5, #36]	; 0x24
   12d20:	bl	14804 <init_token_cpar@@Base>
   12d24:	ldrd	r2, [r4, #80]	; 0x50
   12d28:	ldr	r1, [pc, #192]	; 12df0 <boolean_expression_complex@@Base+0x2cc>
   12d2c:	mov	ip, #10
   12d30:	adds	r2, r2, #1
   12d34:	adc	r3, r3, #0
   12d38:	mov	r0, sp
   12d3c:	strd	r2, [r4, #80]	; 0x50
   12d40:	ldr	r6, [sl, r1]
   12d44:	str	r5, [r6, #228]	; 0xe4
   12d48:	str	ip, [r6, #220]	; 0xdc
   12d4c:	bl	15b10 <read_boolean_expression@@Base>
   12d50:	ldr	r3, [r6, #204]	; 0xcc
   12d54:	cmp	r3, #10
   12d58:	bne	12d80 <boolean_expression_complex@@Base+0x25c>
   12d5c:	ldr	r3, [r0]
   12d60:	cmp	r3, #5
   12d64:	bne	12db4 <boolean_expression_complex@@Base+0x290>
   12d68:	ldrd	r2, [r4, #96]	; 0x60
   12d6c:	adds	r2, r2, #1
   12d70:	adc	r3, r3, #0
   12d74:	strd	r2, [r4, #96]	; 0x60
   12d78:	add	sp, sp, #16
   12d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12d80:	ldrd	r6, [r4, #88]	; 0x58
   12d84:	ldr	r3, [pc, #104]	; 12df4 <boolean_expression_complex@@Base+0x2d0>
   12d88:	ldr	r1, [pc, #104]	; 12df8 <boolean_expression_complex@@Base+0x2d4>
   12d8c:	adds	r6, r6, #1
   12d90:	ldr	r0, [pc, #100]	; 12dfc <boolean_expression_complex@@Base+0x2d8>
   12d94:	add	r3, pc, r3
   12d98:	adc	r7, r7, #0
   12d9c:	mov	r2, #166	; 0xa6
   12da0:	add	r3, r3, #96	; 0x60
   12da4:	add	r1, pc, r1
   12da8:	add	r0, pc, r0
   12dac:	strd	r6, [r4, #88]	; 0x58
   12db0:	bl	119e4 <__assert_fail@plt>
   12db4:	ldrd	r6, [r4, #104]	; 0x68
   12db8:	ldr	r3, [pc, #64]	; 12e00 <boolean_expression_complex@@Base+0x2dc>
   12dbc:	ldr	r1, [pc, #64]	; 12e04 <boolean_expression_complex@@Base+0x2e0>
   12dc0:	adds	r6, r6, #1
   12dc4:	ldr	r0, [pc, #60]	; 12e08 <boolean_expression_complex@@Base+0x2e4>
   12dc8:	add	r3, pc, r3
   12dcc:	adc	r7, r7, #0
   12dd0:	mov	r2, #167	; 0xa7
   12dd4:	add	r3, r3, #96	; 0x60
   12dd8:	add	r1, pc, r1
   12ddc:	add	r0, pc, r0
   12de0:	strd	r6, [r4, #104]	; 0x68
   12de4:	bl	119e4 <__assert_fail@plt>
   12de8:	andeq	r7, r1, ip, ror #28
   12dec:			; <UNDEFINED> instruction: 0x000174b4
   12df0:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   12df4:			; <UNDEFINED> instruction: 0x000057b4
   12df8:	andeq	r5, r0, r4, lsl r9
   12dfc:	andeq	r5, r0, ip, lsl #20
   12e00:	andeq	r5, r0, r0, lsl #15
   12e04:	andeq	r5, r0, r0, ror #17
   12e08:			; <UNDEFINED> instruction: 0x000059b8

00012e0c <boolean_binary_operator_is_read_properly@@Base>:
   12e0c:	push	{r4, r5, r6, r7, r8, lr}
   12e10:	mov	r0, #3
   12e14:	ldr	r4, [pc, #592]	; 1306c <boolean_binary_operator_is_read_properly@@Base+0x260>
   12e18:	sub	sp, sp, #16
   12e1c:	add	r4, pc, r4
   12e20:	add	r4, r4, #448	; 0x1c0
   12e24:	ldr	r7, [pc, #580]	; 13070 <boolean_binary_operator_is_read_properly@@Base+0x264>
   12e28:	ldrd	r2, [r4]
   12e2c:	add	r7, pc, r7
   12e30:	adds	r2, r2, #1
   12e34:	adc	r3, r3, #0
   12e38:	strd	r2, [r4]
   12e3c:	bl	118d0 <malloc@plt>
   12e40:	mov	r1, #33	; 0x21
   12e44:	mov	r2, #61	; 0x3d
   12e48:	mov	r3, #0
   12e4c:	mov	r8, r0
   12e50:	mov	r0, sp
   12e54:	strb	r1, [r8]
   12e58:	add	r1, sp, #4
   12e5c:	strb	r2, [r8, #1]
   12e60:	strb	r3, [r8, #2]
   12e64:	bl	154dc <init_grammar@@Base>
   12e68:	ldrd	r2, [r4, #8]
   12e6c:	mov	r0, #12
   12e70:	adds	r2, r2, #1
   12e74:	adc	r3, r3, #0
   12e78:	strd	r2, [r4, #8]
   12e7c:	bl	118d0 <malloc@plt>
   12e80:	mov	r5, r0
   12e84:	mov	r0, #8
   12e88:	bl	118d0 <malloc@plt>
   12e8c:	mov	r1, #2
   12e90:	str	r0, [r5]
   12e94:	bl	1477c <init_token_int_value@@Base>
   12e98:	ldrd	r2, [r4, #16]
   12e9c:	mov	r0, #8
   12ea0:	adds	r2, r2, #1
   12ea4:	adc	r3, r3, #0
   12ea8:	strd	r2, [r4, #16]
   12eac:	bl	118d0 <malloc@plt>
   12eb0:	mov	r1, r8
   12eb4:	str	r0, [r5, #4]
   12eb8:	bl	14944 <init_token_boolean_op@@Base>
   12ebc:	ldrd	r2, [r4, #24]
   12ec0:	mov	r0, #8
   12ec4:	adds	r2, r2, #1
   12ec8:	adc	r3, r3, #0
   12ecc:	strd	r2, [r4, #24]
   12ed0:	bl	118d0 <malloc@plt>
   12ed4:	mov	r1, #1
   12ed8:	str	r0, [r5, #8]
   12edc:	bl	1477c <init_token_int_value@@Base>
   12ee0:	ldrd	r2, [r4, #32]
   12ee4:	ldr	r1, [pc, #392]	; 13074 <boolean_binary_operator_is_read_properly@@Base+0x268>
   12ee8:	mov	ip, #3
   12eec:	adds	r2, r2, #1
   12ef0:	adc	r3, r3, #0
   12ef4:	mov	r0, sp
   12ef8:	strd	r2, [r4, #32]
   12efc:	ldr	r6, [r7, r1]
   12f00:	str	r5, [r6, #228]	; 0xe4
   12f04:	str	ip, [r6, #220]	; 0xdc
   12f08:	bl	157b8 <read_boolean_binary_expression@@Base>
   12f0c:	ldr	r3, [r6, #204]	; 0xcc
   12f10:	cmp	r3, #3
   12f14:	bne	12f68 <boolean_binary_operator_is_read_properly@@Base+0x15c>
   12f18:	ldr	r3, [r0]
   12f1c:	cmp	r3, #5
   12f20:	bne	13038 <boolean_binary_operator_is_read_properly@@Base+0x22c>
   12f24:	ldr	r3, [r0, #8]
   12f28:	ldr	r3, [r3]
   12f2c:	cmp	r3, #1
   12f30:	bne	13004 <boolean_binary_operator_is_read_properly@@Base+0x1f8>
   12f34:	ldr	r3, [r0, #16]
   12f38:	cmp	r3, #1
   12f3c:	bne	12fd0 <boolean_binary_operator_is_read_properly@@Base+0x1c4>
   12f40:	ldr	r3, [r0, #12]
   12f44:	ldr	r3, [r3]
   12f48:	cmp	r3, #1
   12f4c:	bne	12f9c <boolean_binary_operator_is_read_properly@@Base+0x190>
   12f50:	ldrd	r2, [r4, #72]	; 0x48
   12f54:	adds	r2, r2, #1
   12f58:	adc	r3, r3, #0
   12f5c:	strd	r2, [r4, #72]	; 0x48
   12f60:	add	sp, sp, #16
   12f64:	pop	{r4, r5, r6, r7, r8, pc}
   12f68:	ldrd	r6, [r4, #40]	; 0x28
   12f6c:	ldr	r3, [pc, #260]	; 13078 <boolean_binary_operator_is_read_properly@@Base+0x26c>
   12f70:	ldr	r1, [pc, #260]	; 1307c <boolean_binary_operator_is_read_properly@@Base+0x270>
   12f74:	adds	r6, r6, #1
   12f78:	ldr	r0, [pc, #256]	; 13080 <boolean_binary_operator_is_read_properly@@Base+0x274>
   12f7c:	add	r3, pc, r3
   12f80:	adc	r7, r7, #0
   12f84:	mov	r2, #200	; 0xc8
   12f88:	add	r3, r3, #124	; 0x7c
   12f8c:	add	r1, pc, r1
   12f90:	add	r0, pc, r0
   12f94:	strd	r6, [r4, #40]	; 0x28
   12f98:	bl	119e4 <__assert_fail@plt>
   12f9c:	ldrd	r6, [r4, #80]	; 0x50
   12fa0:	ldr	r3, [pc, #220]	; 13084 <boolean_binary_operator_is_read_properly@@Base+0x278>
   12fa4:	ldr	r1, [pc, #220]	; 13088 <boolean_binary_operator_is_read_properly@@Base+0x27c>
   12fa8:	adds	r6, r6, #1
   12fac:	ldr	r0, [pc, #216]	; 1308c <boolean_binary_operator_is_read_properly@@Base+0x280>
   12fb0:	add	r3, pc, r3
   12fb4:	adc	r7, r7, #0
   12fb8:	mov	r2, #205	; 0xcd
   12fbc:	add	r3, r3, #124	; 0x7c
   12fc0:	add	r1, pc, r1
   12fc4:	add	r0, pc, r0
   12fc8:	strd	r6, [r4, #80]	; 0x50
   12fcc:	bl	119e4 <__assert_fail@plt>
   12fd0:	ldrd	r6, [r4, #64]	; 0x40
   12fd4:	ldr	r3, [pc, #180]	; 13090 <boolean_binary_operator_is_read_properly@@Base+0x284>
   12fd8:	ldr	r1, [pc, #180]	; 13094 <boolean_binary_operator_is_read_properly@@Base+0x288>
   12fdc:	adds	r6, r6, #1
   12fe0:	ldr	r0, [pc, #176]	; 13098 <boolean_binary_operator_is_read_properly@@Base+0x28c>
   12fe4:	add	r3, pc, r3
   12fe8:	adc	r7, r7, #0
   12fec:	mov	r2, #204	; 0xcc
   12ff0:	add	r3, r3, #124	; 0x7c
   12ff4:	add	r1, pc, r1
   12ff8:	add	r0, pc, r0
   12ffc:	strd	r6, [r4, #64]	; 0x40
   13000:	bl	119e4 <__assert_fail@plt>
   13004:	ldrd	r6, [r4, #56]	; 0x38
   13008:	ldr	r3, [pc, #140]	; 1309c <boolean_binary_operator_is_read_properly@@Base+0x290>
   1300c:	ldr	r1, [pc, #140]	; 130a0 <boolean_binary_operator_is_read_properly@@Base+0x294>
   13010:	adds	r6, r6, #1
   13014:	ldr	r0, [pc, #136]	; 130a4 <boolean_binary_operator_is_read_properly@@Base+0x298>
   13018:	add	r3, pc, r3
   1301c:	adc	r7, r7, #0
   13020:	mov	r2, #203	; 0xcb
   13024:	add	r3, r3, #124	; 0x7c
   13028:	add	r1, pc, r1
   1302c:	add	r0, pc, r0
   13030:	strd	r6, [r4, #56]	; 0x38
   13034:	bl	119e4 <__assert_fail@plt>
   13038:	ldrd	r6, [r4, #48]	; 0x30
   1303c:	ldr	r3, [pc, #100]	; 130a8 <boolean_binary_operator_is_read_properly@@Base+0x29c>
   13040:	ldr	r1, [pc, #100]	; 130ac <boolean_binary_operator_is_read_properly@@Base+0x2a0>
   13044:	adds	r6, r6, #1
   13048:	ldr	r0, [pc, #96]	; 130b0 <boolean_binary_operator_is_read_properly@@Base+0x2a4>
   1304c:	add	r3, pc, r3
   13050:	adc	r7, r7, #0
   13054:	mov	r2, #201	; 0xc9
   13058:	add	r3, r3, #124	; 0x7c
   1305c:	add	r1, pc, r1
   13060:	add	r0, pc, r0
   13064:	strd	r6, [r4, #48]	; 0x30
   13068:	bl	119e4 <__assert_fail@plt>
   1306c:	andeq	r7, r1, r4, lsl #23
   13070:	andeq	r7, r1, ip, asr #3
   13074:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   13078:	andeq	r5, r0, ip, asr #11
   1307c:	andeq	r5, r0, ip, lsr #14
   13080:	andeq	r5, r0, r0, asr #16
   13084:	muleq	r0, r8, r5
   13088:	strdeq	r5, [r0], -r8
   1308c:	andeq	r5, r0, r0, ror #16
   13090:	andeq	r5, r0, r4, ror #10
   13094:	andeq	r5, r0, r4, asr #13
   13098:	andeq	r5, r0, r0, lsl r8
   1309c:	andeq	r5, r0, r0, lsr r5
   130a0:	muleq	r0, r0, r6
   130a4:	andeq	r5, r0, r0, asr #15
   130a8:	strdeq	r5, [r0], -ip
   130ac:	andeq	r5, r0, ip, asr r6
   130b0:	andeq	r5, r0, r4, lsr r7

000130b4 <boolean_unary_operator_is_read_properly@@Base>:
   130b4:	push	{r4, r5, r6, r7, r8, lr}
   130b8:	mov	r0, #2
   130bc:	ldr	r4, [pc, #544]	; 132e4 <boolean_unary_operator_is_read_properly@@Base+0x230>
   130c0:	sub	sp, sp, #16
   130c4:	add	r4, pc, r4
   130c8:	add	r4, r4, #544	; 0x220
   130cc:	ldr	r7, [pc, #532]	; 132e8 <boolean_unary_operator_is_read_properly@@Base+0x234>
   130d0:	ldrd	r2, [r4, #-8]
   130d4:	add	r7, pc, r7
   130d8:	adds	r2, r2, #1
   130dc:	adc	r3, r3, #0
   130e0:	strd	r2, [r4, #-8]
   130e4:	bl	118d0 <malloc@plt>
   130e8:	add	r1, sp, #4
   130ec:	mov	r2, #33	; 0x21
   130f0:	mov	r3, #0
   130f4:	mov	r8, r0
   130f8:	mov	r0, sp
   130fc:	strb	r2, [r8]
   13100:	strb	r3, [r8, #1]
   13104:	bl	154dc <init_grammar@@Base>
   13108:	ldrd	r2, [r4]
   1310c:	mov	r0, #8
   13110:	adds	r2, r2, #1
   13114:	adc	r3, r3, #0
   13118:	strd	r2, [r4]
   1311c:	bl	118d0 <malloc@plt>
   13120:	mov	r6, r0
   13124:	mov	r0, #8
   13128:	bl	118d0 <malloc@plt>
   1312c:	mov	r1, r8
   13130:	str	r0, [r6]
   13134:	bl	14944 <init_token_boolean_op@@Base>
   13138:	ldrd	r2, [r4, #8]
   1313c:	mov	r0, #8
   13140:	adds	r2, r2, #1
   13144:	adc	r3, r3, #0
   13148:	strd	r2, [r4, #8]
   1314c:	bl	118d0 <malloc@plt>
   13150:	mov	r1, #1
   13154:	str	r0, [r6, #4]
   13158:	bl	1477c <init_token_int_value@@Base>
   1315c:	ldrd	r2, [r4, #16]
   13160:	ldr	r1, [pc, #388]	; 132ec <boolean_unary_operator_is_read_properly@@Base+0x238>
   13164:	mov	ip, #2
   13168:	adds	r2, r2, #1
   1316c:	adc	r3, r3, #0
   13170:	mov	r0, sp
   13174:	strd	r2, [r4, #16]
   13178:	ldr	r5, [r7, r1]
   1317c:	str	r6, [r5, #228]	; 0xe4
   13180:	str	ip, [r5, #220]	; 0xdc
   13184:	bl	15638 <read_boolean_unary_expression@@Base>
   13188:	ldr	r3, [r5, #204]	; 0xcc
   1318c:	cmp	r3, #2
   13190:	bne	131e0 <boolean_unary_operator_is_read_properly@@Base+0x12c>
   13194:	ldr	r3, [r0]
   13198:	cmp	r3, #5
   1319c:	bne	132b0 <boolean_unary_operator_is_read_properly@@Base+0x1fc>
   131a0:	ldr	r3, [r0, #8]
   131a4:	ldr	r3, [r3]
   131a8:	cmp	r3, #1
   131ac:	bne	1327c <boolean_unary_operator_is_read_properly@@Base+0x1c8>
   131b0:	ldr	r3, [r0, #16]
   131b4:	cmp	r3, #8
   131b8:	bne	13248 <boolean_unary_operator_is_read_properly@@Base+0x194>
   131bc:	ldr	r3, [r0, #12]
   131c0:	cmp	r3, #0
   131c4:	bne	13214 <boolean_unary_operator_is_read_properly@@Base+0x160>
   131c8:	ldrd	r2, [r4, #56]	; 0x38
   131cc:	adds	r2, r2, #1
   131d0:	adc	r3, r3, #0
   131d4:	strd	r2, [r4, #56]	; 0x38
   131d8:	add	sp, sp, #16
   131dc:	pop	{r4, r5, r6, r7, r8, pc}
   131e0:	ldrd	r6, [r4, #24]
   131e4:	ldr	r3, [pc, #260]	; 132f0 <boolean_unary_operator_is_read_properly@@Base+0x23c>
   131e8:	ldr	r1, [pc, #260]	; 132f4 <boolean_unary_operator_is_read_properly@@Base+0x240>
   131ec:	adds	r6, r6, #1
   131f0:	ldr	r0, [pc, #256]	; 132f8 <boolean_unary_operator_is_read_properly@@Base+0x244>
   131f4:	add	r3, pc, r3
   131f8:	adc	r7, r7, #0
   131fc:	mov	r2, #235	; 0xeb
   13200:	add	r3, r3, #168	; 0xa8
   13204:	add	r1, pc, r1
   13208:	add	r0, pc, r0
   1320c:	strd	r6, [r4, #24]
   13210:	bl	119e4 <__assert_fail@plt>
   13214:	ldrd	r6, [r4, #64]	; 0x40
   13218:	ldr	r3, [pc, #220]	; 132fc <boolean_unary_operator_is_read_properly@@Base+0x248>
   1321c:	ldr	r1, [pc, #220]	; 13300 <boolean_unary_operator_is_read_properly@@Base+0x24c>
   13220:	adds	r6, r6, #1
   13224:	ldr	r0, [pc, #216]	; 13304 <boolean_unary_operator_is_read_properly@@Base+0x250>
   13228:	add	r3, pc, r3
   1322c:	adc	r7, r7, #0
   13230:	mov	r2, #240	; 0xf0
   13234:	add	r3, r3, #168	; 0xa8
   13238:	add	r1, pc, r1
   1323c:	add	r0, pc, r0
   13240:	strd	r6, [r4, #64]	; 0x40
   13244:	bl	119e4 <__assert_fail@plt>
   13248:	ldrd	r6, [r4, #48]	; 0x30
   1324c:	ldr	r3, [pc, #180]	; 13308 <boolean_unary_operator_is_read_properly@@Base+0x254>
   13250:	ldr	r1, [pc, #180]	; 1330c <boolean_unary_operator_is_read_properly@@Base+0x258>
   13254:	adds	r6, r6, #1
   13258:	ldr	r0, [pc, #176]	; 13310 <boolean_unary_operator_is_read_properly@@Base+0x25c>
   1325c:	add	r3, pc, r3
   13260:	adc	r7, r7, #0
   13264:	mov	r2, #239	; 0xef
   13268:	add	r3, r3, #168	; 0xa8
   1326c:	add	r1, pc, r1
   13270:	add	r0, pc, r0
   13274:	strd	r6, [r4, #48]	; 0x30
   13278:	bl	119e4 <__assert_fail@plt>
   1327c:	ldrd	r6, [r4, #40]	; 0x28
   13280:	ldr	r3, [pc, #140]	; 13314 <boolean_unary_operator_is_read_properly@@Base+0x260>
   13284:	ldr	r1, [pc, #140]	; 13318 <boolean_unary_operator_is_read_properly@@Base+0x264>
   13288:	adds	r6, r6, #1
   1328c:	ldr	r0, [pc, #136]	; 1331c <boolean_unary_operator_is_read_properly@@Base+0x268>
   13290:	add	r3, pc, r3
   13294:	adc	r7, r7, #0
   13298:	mov	r2, #238	; 0xee
   1329c:	add	r3, r3, #168	; 0xa8
   132a0:	add	r1, pc, r1
   132a4:	add	r0, pc, r0
   132a8:	strd	r6, [r4, #40]	; 0x28
   132ac:	bl	119e4 <__assert_fail@plt>
   132b0:	ldrd	r6, [r4, #32]
   132b4:	ldr	r3, [pc, #100]	; 13320 <boolean_unary_operator_is_read_properly@@Base+0x26c>
   132b8:	ldr	r1, [pc, #100]	; 13324 <boolean_unary_operator_is_read_properly@@Base+0x270>
   132bc:	adds	r6, r6, #1
   132c0:	ldr	r0, [pc, #96]	; 13328 <boolean_unary_operator_is_read_properly@@Base+0x274>
   132c4:	add	r3, pc, r3
   132c8:	adc	r7, r7, #0
   132cc:	mov	r2, #236	; 0xec
   132d0:	add	r3, r3, #168	; 0xa8
   132d4:	add	r1, pc, r1
   132d8:	add	r0, pc, r0
   132dc:	strd	r6, [r4, #32]
   132e0:	bl	119e4 <__assert_fail@plt>
   132e4:	ldrdeq	r7, [r1], -ip
   132e8:	andeq	r6, r1, r4, lsr #30
   132ec:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   132f0:	andeq	r5, r0, r4, asr r3
   132f4:			; <UNDEFINED> instruction: 0x000054b4
   132f8:	andeq	r5, r0, r4, lsr r5
   132fc:	andeq	r5, r0, r0, lsr #6
   13300:	andeq	r5, r0, r0, lsl #9
   13304:	andeq	r5, r0, r8, lsl r6
   13308:	andeq	r5, r0, ip, ror #5
   1330c:	andeq	r5, r0, ip, asr #8
   13310:	ldrdeq	r5, [r0], -r0
   13314:			; <UNDEFINED> instruction: 0x000052b8
   13318:	andeq	r5, r0, r8, lsl r4
   1331c:	andeq	r5, r0, r8, asr #10
   13320:	andeq	r5, r0, r4, lsl #5
   13324:	andeq	r5, r0, r4, ror #7
   13328:			; <UNDEFINED> instruction: 0x000054bc

0001332c <if_statement_only@@Base>:
   1332c:	push	{r4, r5, r6, r7, r8, lr}
   13330:	sub	sp, sp, #16
   13334:	ldr	r4, [pc, #648]	; 135c4 <if_statement_only@@Base+0x298>
   13338:	add	r1, sp, #4
   1333c:	add	r4, pc, r4
   13340:	add	r4, r4, #624	; 0x270
   13344:	mov	r0, sp
   13348:	ldrd	r2, [r4, #-8]
   1334c:	ldr	r8, [pc, #628]	; 135c8 <if_statement_only@@Base+0x29c>
   13350:	adds	r2, r2, #1
   13354:	adc	r3, r3, #0
   13358:	add	r8, pc, r8
   1335c:	strd	r2, [r4, #-8]
   13360:	bl	154dc <init_grammar@@Base>
   13364:	ldrd	r2, [r4]
   13368:	mov	r0, #3
   1336c:	adds	r2, r2, #1
   13370:	adc	r3, r3, #0
   13374:	strd	r2, [r4]
   13378:	bl	118d0 <malloc@plt>
   1337c:	mov	r1, #33	; 0x21
   13380:	mov	r2, #61	; 0x3d
   13384:	mov	r3, #0
   13388:	mov	r7, r0
   1338c:	mov	r0, #36	; 0x24
   13390:	strb	r1, [r7]
   13394:	strb	r2, [r7, #1]
   13398:	strb	r3, [r7, #2]
   1339c:	bl	118d0 <malloc@plt>
   133a0:	mov	r5, r0
   133a4:	mov	r0, #4
   133a8:	bl	118d0 <malloc@plt>
   133ac:	str	r0, [r5]
   133b0:	bl	147dc <init_token_opar@@Base>
   133b4:	ldrd	r2, [r4, #8]
   133b8:	mov	r0, #8
   133bc:	adds	r2, r2, #1
   133c0:	adc	r3, r3, #0
   133c4:	strd	r2, [r4, #8]
   133c8:	bl	118d0 <malloc@plt>
   133cc:	mov	r1, #1
   133d0:	str	r0, [r5, #4]
   133d4:	bl	1477c <init_token_int_value@@Base>
   133d8:	ldrd	r2, [r4, #16]
   133dc:	mov	r0, #8
   133e0:	adds	r2, r2, #1
   133e4:	adc	r3, r3, #0
   133e8:	strd	r2, [r4, #16]
   133ec:	bl	118d0 <malloc@plt>
   133f0:	mov	r1, #1
   133f4:	str	r0, [r5, #8]
   133f8:	bl	1477c <init_token_int_value@@Base>
   133fc:	ldrd	r2, [r4, #24]
   13400:	mov	r0, #8
   13404:	adds	r2, r2, #1
   13408:	adc	r3, r3, #0
   1340c:	strd	r2, [r4, #24]
   13410:	bl	118d0 <malloc@plt>
   13414:	mov	r1, r7
   13418:	str	r0, [r5, #12]
   1341c:	bl	14944 <init_token_boolean_op@@Base>
   13420:	ldrd	r2, [r4, #32]
   13424:	mov	r0, #8
   13428:	adds	r2, r2, #1
   1342c:	adc	r3, r3, #0
   13430:	strd	r2, [r4, #32]
   13434:	bl	118d0 <malloc@plt>
   13438:	mov	r1, #1
   1343c:	str	r0, [r5, #16]
   13440:	bl	1477c <init_token_int_value@@Base>
   13444:	ldrd	r2, [r4, #40]	; 0x28
   13448:	mov	r0, #4
   1344c:	adds	r2, r2, #1
   13450:	adc	r3, r3, #0
   13454:	strd	r2, [r4, #40]	; 0x28
   13458:	bl	118d0 <malloc@plt>
   1345c:	str	r0, [r5, #20]
   13460:	bl	14804 <init_token_cpar@@Base>
   13464:	ldrd	r2, [r4, #48]	; 0x30
   13468:	mov	r0, #4
   1346c:	adds	r2, r2, #1
   13470:	adc	r3, r3, #0
   13474:	strd	r2, [r4, #48]	; 0x30
   13478:	bl	118d0 <malloc@plt>
   1347c:	str	r0, [r5, #24]
   13480:	bl	1482c <init_token_obra@@Base>
   13484:	ldrd	r2, [r4, #56]	; 0x38
   13488:	mov	r0, #4
   1348c:	adds	r2, r2, #1
   13490:	adc	r3, r3, #0
   13494:	strd	r2, [r4, #56]	; 0x38
   13498:	bl	118d0 <malloc@plt>
   1349c:	str	r0, [r5, #28]
   134a0:	bl	14854 <init_token_cbra@@Base>
   134a4:	ldrd	r2, [r4, #64]	; 0x40
   134a8:	mov	r0, #4
   134ac:	adds	r2, r2, #1
   134b0:	adc	r3, r3, #0
   134b4:	strd	r2, [r4, #64]	; 0x40
   134b8:	bl	118d0 <malloc@plt>
   134bc:	str	r0, [r5, #32]
   134c0:	bl	148cc <init_token_eof@@Base>
   134c4:	ldrd	r2, [r4, #72]	; 0x48
   134c8:	ldr	r1, [pc, #252]	; 135cc <if_statement_only@@Base+0x2a0>
   134cc:	mov	ip, #9
   134d0:	adds	r2, r2, #1
   134d4:	adc	r3, r3, #0
   134d8:	mov	r0, sp
   134dc:	strd	r2, [r4, #72]	; 0x48
   134e0:	ldr	r6, [r8, r1]
   134e4:	str	r5, [r6, #228]	; 0xe4
   134e8:	str	ip, [r6, #220]	; 0xdc
   134ec:	bl	15cf8 <read_if_statement@@Base>
   134f0:	ldr	r3, [r6, #204]	; 0xcc
   134f4:	cmp	r3, #9
   134f8:	bne	13528 <if_statement_only@@Base+0x1fc>
   134fc:	cmp	r0, #0
   13500:	beq	13590 <if_statement_only@@Base+0x264>
   13504:	ldr	r3, [r0]
   13508:	cmp	r3, #4
   1350c:	bne	1355c <if_statement_only@@Base+0x230>
   13510:	ldrd	r2, [r4, #96]	; 0x60
   13514:	adds	r2, r2, #1
   13518:	adc	r3, r3, #0
   1351c:	strd	r2, [r4, #96]	; 0x60
   13520:	add	sp, sp, #16
   13524:	pop	{r4, r5, r6, r7, r8, pc}
   13528:	ldrd	r6, [r4, #80]	; 0x50
   1352c:	ldr	r3, [pc, #156]	; 135d0 <if_statement_only@@Base+0x2a4>
   13530:	ldr	r1, [pc, #156]	; 135d4 <if_statement_only@@Base+0x2a8>
   13534:	adds	r6, r6, #1
   13538:	ldr	r0, [pc, #152]	; 135d8 <if_statement_only@@Base+0x2ac>
   1353c:	add	r3, pc, r3
   13540:	adc	r7, r7, #0
   13544:	ldr	r2, [pc, #144]	; 135dc <if_statement_only@@Base+0x2b0>
   13548:	add	r3, r3, #208	; 0xd0
   1354c:	add	r1, pc, r1
   13550:	add	r0, pc, r0
   13554:	strd	r6, [r4, #80]	; 0x50
   13558:	bl	119e4 <__assert_fail@plt>
   1355c:	ldrd	r6, [r4, #104]	; 0x68
   13560:	ldr	r3, [pc, #120]	; 135e0 <if_statement_only@@Base+0x2b4>
   13564:	ldr	r1, [pc, #120]	; 135e4 <if_statement_only@@Base+0x2b8>
   13568:	adds	r6, r6, #1
   1356c:	ldr	r0, [pc, #116]	; 135e8 <if_statement_only@@Base+0x2bc>
   13570:	add	r3, pc, r3
   13574:	adc	r7, r7, #0
   13578:	ldr	r2, [pc, #108]	; 135ec <if_statement_only@@Base+0x2c0>
   1357c:	add	r3, r3, #208	; 0xd0
   13580:	add	r1, pc, r1
   13584:	add	r0, pc, r0
   13588:	strd	r6, [r4, #104]	; 0x68
   1358c:	bl	119e4 <__assert_fail@plt>
   13590:	ldrd	r6, [r4, #88]	; 0x58
   13594:	ldr	r3, [pc, #84]	; 135f0 <if_statement_only@@Base+0x2c4>
   13598:	ldr	r1, [pc, #84]	; 135f4 <if_statement_only@@Base+0x2c8>
   1359c:	adds	r6, r6, #1
   135a0:	ldr	r0, [pc, #80]	; 135f8 <if_statement_only@@Base+0x2cc>
   135a4:	add	r3, pc, r3
   135a8:	adc	r7, r7, #0
   135ac:	mov	r2, #284	; 0x11c
   135b0:	add	r3, r3, #208	; 0xd0
   135b4:	add	r1, pc, r1
   135b8:	add	r0, pc, r0
   135bc:	strd	r6, [r4, #88]	; 0x58
   135c0:	bl	119e4 <__assert_fail@plt>
   135c4:	andeq	r7, r1, r4, ror #12
   135c8:	andeq	r6, r1, r0, lsr #25
   135cc:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   135d0:	andeq	r5, r0, ip
   135d4:	andeq	r5, r0, ip, ror #2
   135d8:	andeq	r5, r0, ip, lsl r3
   135dc:	andeq	r0, r0, fp, lsl r1
   135e0:	ldrdeq	r4, [r0], -r8
   135e4:	andeq	r5, r0, r8, lsr r1
   135e8:	andeq	r5, r0, r0, lsl r3
   135ec:	andeq	r0, r0, sp, lsl r1
   135f0:	andeq	r4, r0, r4, lsr #31
   135f4:	andeq	r5, r0, r4, lsl #2
   135f8:	ldrdeq	r5, [r0], -r0

000135fc <if_else_statements@@Base>:
   135fc:	push	{r4, r5, r6, r7, r8, lr}
   13600:	sub	sp, sp, #16
   13604:	ldr	r4, [pc, #712]	; 138d4 <if_else_statements@@Base+0x2d8>
   13608:	add	r1, sp, #4
   1360c:	add	r4, pc, r4
   13610:	add	r4, r4, #736	; 0x2e0
   13614:	mov	r0, sp
   13618:	ldrd	r2, [r4]
   1361c:	ldr	r8, [pc, #692]	; 138d8 <if_else_statements@@Base+0x2dc>
   13620:	adds	r2, r2, #1
   13624:	adc	r3, r3, #0
   13628:	add	r8, pc, r8
   1362c:	strd	r2, [r4]
   13630:	bl	154dc <init_grammar@@Base>
   13634:	ldrd	r2, [r4, #8]
   13638:	mov	r0, #3
   1363c:	adds	r2, r2, #1
   13640:	adc	r3, r3, #0
   13644:	strd	r2, [r4, #8]
   13648:	bl	118d0 <malloc@plt>
   1364c:	mov	r1, #33	; 0x21
   13650:	mov	r2, #61	; 0x3d
   13654:	mov	r3, #0
   13658:	mov	r7, r0
   1365c:	mov	r0, #44	; 0x2c
   13660:	strb	r1, [r7]
   13664:	strb	r2, [r7, #1]
   13668:	strb	r3, [r7, #2]
   1366c:	bl	118d0 <malloc@plt>
   13670:	mov	r5, r0
   13674:	mov	r0, #4
   13678:	bl	118d0 <malloc@plt>
   1367c:	str	r0, [r5]
   13680:	bl	147dc <init_token_opar@@Base>
   13684:	ldrd	r2, [r4, #16]
   13688:	mov	r0, #8
   1368c:	adds	r2, r2, #1
   13690:	adc	r3, r3, #0
   13694:	strd	r2, [r4, #16]
   13698:	bl	118d0 <malloc@plt>
   1369c:	mov	r1, #1
   136a0:	str	r0, [r5, #4]
   136a4:	bl	1477c <init_token_int_value@@Base>
   136a8:	ldrd	r2, [r4, #24]
   136ac:	mov	r0, #8
   136b0:	adds	r2, r2, #1
   136b4:	adc	r3, r3, #0
   136b8:	strd	r2, [r4, #24]
   136bc:	bl	118d0 <malloc@plt>
   136c0:	mov	r1, #1
   136c4:	str	r0, [r5, #8]
   136c8:	bl	1477c <init_token_int_value@@Base>
   136cc:	ldrd	r2, [r4, #32]
   136d0:	mov	r0, #8
   136d4:	adds	r2, r2, #1
   136d8:	adc	r3, r3, #0
   136dc:	strd	r2, [r4, #32]
   136e0:	bl	118d0 <malloc@plt>
   136e4:	mov	r1, r7
   136e8:	str	r0, [r5, #12]
   136ec:	bl	14944 <init_token_boolean_op@@Base>
   136f0:	ldrd	r2, [r4, #40]	; 0x28
   136f4:	mov	r0, #8
   136f8:	adds	r2, r2, #1
   136fc:	adc	r3, r3, #0
   13700:	strd	r2, [r4, #40]	; 0x28
   13704:	bl	118d0 <malloc@plt>
   13708:	mov	r1, #1
   1370c:	str	r0, [r5, #16]
   13710:	bl	1477c <init_token_int_value@@Base>
   13714:	ldrd	r2, [r4, #48]	; 0x30
   13718:	mov	r0, #4
   1371c:	adds	r2, r2, #1
   13720:	adc	r3, r3, #0
   13724:	strd	r2, [r4, #48]	; 0x30
   13728:	bl	118d0 <malloc@plt>
   1372c:	str	r0, [r5, #20]
   13730:	bl	14804 <init_token_cpar@@Base>
   13734:	ldrd	r2, [r4, #56]	; 0x38
   13738:	mov	r0, #4
   1373c:	adds	r2, r2, #1
   13740:	adc	r3, r3, #0
   13744:	strd	r2, [r4, #56]	; 0x38
   13748:	bl	118d0 <malloc@plt>
   1374c:	str	r0, [r5, #24]
   13750:	bl	1482c <init_token_obra@@Base>
   13754:	ldrd	r2, [r4, #64]	; 0x40
   13758:	mov	r0, #4
   1375c:	adds	r2, r2, #1
   13760:	adc	r3, r3, #0
   13764:	strd	r2, [r4, #64]	; 0x40
   13768:	bl	118d0 <malloc@plt>
   1376c:	str	r0, [r5, #28]
   13770:	bl	14854 <init_token_cbra@@Base>
   13774:	ldrd	r2, [r4, #72]	; 0x48
   13778:	mov	r0, #4
   1377c:	adds	r2, r2, #1
   13780:	adc	r3, r3, #0
   13784:	strd	r2, [r4, #72]	; 0x48
   13788:	bl	118d0 <malloc@plt>
   1378c:	str	r0, [r5, #32]
   13790:	bl	1491c <init_token_else@@Base>
   13794:	ldrd	r2, [r4, #80]	; 0x50
   13798:	mov	r0, #4
   1379c:	adds	r2, r2, #1
   137a0:	adc	r3, r3, #0
   137a4:	strd	r2, [r4, #80]	; 0x50
   137a8:	bl	118d0 <malloc@plt>
   137ac:	str	r0, [r5, #36]	; 0x24
   137b0:	bl	1482c <init_token_obra@@Base>
   137b4:	ldrd	r2, [r4, #88]	; 0x58
   137b8:	mov	r0, #4
   137bc:	adds	r2, r2, #1
   137c0:	adc	r3, r3, #0
   137c4:	strd	r2, [r4, #88]	; 0x58
   137c8:	bl	118d0 <malloc@plt>
   137cc:	str	r0, [r5, #40]	; 0x28
   137d0:	bl	14854 <init_token_cbra@@Base>
   137d4:	ldrd	r2, [r4, #96]	; 0x60
   137d8:	ldr	r1, [pc, #252]	; 138dc <if_else_statements@@Base+0x2e0>
   137dc:	mov	ip, #11
   137e0:	adds	r2, r2, #1
   137e4:	adc	r3, r3, #0
   137e8:	mov	r0, sp
   137ec:	strd	r2, [r4, #96]	; 0x60
   137f0:	ldr	r6, [r8, r1]
   137f4:	str	r5, [r6, #228]	; 0xe4
   137f8:	str	ip, [r6, #220]	; 0xdc
   137fc:	bl	15cf8 <read_if_statement@@Base>
   13800:	ldr	r3, [r6, #204]	; 0xcc
   13804:	cmp	r3, #11
   13808:	bne	13838 <if_else_statements@@Base+0x23c>
   1380c:	cmp	r0, #0
   13810:	beq	138a0 <if_else_statements@@Base+0x2a4>
   13814:	ldr	r3, [r0]
   13818:	cmp	r3, #4
   1381c:	bne	1386c <if_else_statements@@Base+0x270>
   13820:	ldrd	r2, [r4, #120]	; 0x78
   13824:	adds	r2, r2, #1
   13828:	adc	r3, r3, #0
   1382c:	strd	r2, [r4, #120]	; 0x78
   13830:	add	sp, sp, #16
   13834:	pop	{r4, r5, r6, r7, r8, pc}
   13838:	ldrd	r6, [r4, #104]	; 0x68
   1383c:	ldr	r3, [pc, #156]	; 138e0 <if_else_statements@@Base+0x2e4>
   13840:	ldr	r1, [pc, #156]	; 138e4 <if_else_statements@@Base+0x2e8>
   13844:	adds	r6, r6, #1
   13848:	ldr	r0, [pc, #152]	; 138e8 <if_else_statements@@Base+0x2ec>
   1384c:	add	r3, pc, r3
   13850:	adc	r7, r7, #0
   13854:	mov	r2, #332	; 0x14c
   13858:	add	r3, r3, #228	; 0xe4
   1385c:	add	r1, pc, r1
   13860:	add	r0, pc, r0
   13864:	strd	r6, [r4, #104]	; 0x68
   13868:	bl	119e4 <__assert_fail@plt>
   1386c:	ldrd	r6, [r4, #128]	; 0x80
   13870:	ldr	r3, [pc, #116]	; 138ec <if_else_statements@@Base+0x2f0>
   13874:	ldr	r1, [pc, #116]	; 138f0 <if_else_statements@@Base+0x2f4>
   13878:	adds	r6, r6, #1
   1387c:	ldr	r0, [pc, #112]	; 138f4 <if_else_statements@@Base+0x2f8>
   13880:	add	r3, pc, r3
   13884:	adc	r7, r7, #0
   13888:	ldr	r2, [pc, #104]	; 138f8 <if_else_statements@@Base+0x2fc>
   1388c:	add	r3, r3, #228	; 0xe4
   13890:	add	r1, pc, r1
   13894:	add	r0, pc, r0
   13898:	strd	r6, [r4, #128]	; 0x80
   1389c:	bl	119e4 <__assert_fail@plt>
   138a0:	ldrd	r6, [r4, #112]	; 0x70
   138a4:	ldr	r3, [pc, #80]	; 138fc <if_else_statements@@Base+0x300>
   138a8:	ldr	r1, [pc, #80]	; 13900 <if_else_statements@@Base+0x304>
   138ac:	adds	r6, r6, #1
   138b0:	ldr	r0, [pc, #76]	; 13904 <if_else_statements@@Base+0x308>
   138b4:	add	r3, pc, r3
   138b8:	adc	r7, r7, #0
   138bc:	ldr	r2, [pc, #68]	; 13908 <if_else_statements@@Base+0x30c>
   138c0:	add	r3, r3, #228	; 0xe4
   138c4:	add	r1, pc, r1
   138c8:	add	r0, pc, r0
   138cc:	strd	r6, [r4, #112]	; 0x70
   138d0:	bl	119e4 <__assert_fail@plt>
   138d4:	muleq	r1, r4, r3
   138d8:	ldrdeq	r6, [r1], -r0
   138dc:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   138e0:	strdeq	r4, [r0], -ip
   138e4:	andeq	r4, r0, ip, asr lr
   138e8:	andeq	r5, r0, r8, asr #32
   138ec:	andeq	r4, r0, r8, asr #25
   138f0:	andeq	r4, r0, r8, lsr #28
   138f4:	andeq	r5, r0, r0
   138f8:	andeq	r0, r0, lr, asr #2
   138fc:	muleq	r0, r4, ip
   13900:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   13904:	andeq	r4, r0, r0, asr #31
   13908:	andeq	r0, r0, sp, asr #2

0001390c <body_with_two_returns@@Base>:
   1390c:	push	{r4, r5, r6, r7, lr}
   13910:	sub	sp, sp, #20
   13914:	ldr	r4, [pc, #704]	; 13bdc <body_with_two_returns@@Base+0x2d0>
   13918:	add	r1, sp, #4
   1391c:	add	r4, pc, r4
   13920:	add	r4, r4, #880	; 0x370
   13924:	mov	r0, sp
   13928:	ldrd	r2, [r4, #-8]
   1392c:	ldr	r7, [pc, #684]	; 13be0 <body_with_two_returns@@Base+0x2d4>
   13930:	adds	r2, r2, #1
   13934:	adc	r3, r3, #0
   13938:	add	r7, pc, r7
   1393c:	strd	r2, [r4, #-8]
   13940:	bl	154dc <init_grammar@@Base>
   13944:	ldrd	r2, [r4]
   13948:	mov	r0, #32
   1394c:	adds	r2, r2, #1
   13950:	adc	r3, r3, #0
   13954:	strd	r2, [r4]
   13958:	bl	118d0 <malloc@plt>
   1395c:	mov	r5, r0
   13960:	mov	r0, #4
   13964:	bl	118d0 <malloc@plt>
   13968:	str	r0, [r5]
   1396c:	bl	1482c <init_token_obra@@Base>
   13970:	ldrd	r2, [r4, #8]
   13974:	mov	r0, #4
   13978:	adds	r2, r2, #1
   1397c:	adc	r3, r3, #0
   13980:	strd	r2, [r4, #8]
   13984:	bl	118d0 <malloc@plt>
   13988:	str	r0, [r5, #4]
   1398c:	bl	1487c <init_token_return@@Base>
   13990:	ldrd	r2, [r4, #16]
   13994:	mov	r0, #8
   13998:	adds	r2, r2, #1
   1399c:	adc	r3, r3, #0
   139a0:	strd	r2, [r4, #16]
   139a4:	bl	118d0 <malloc@plt>
   139a8:	mov	r1, #1
   139ac:	str	r0, [r5, #8]
   139b0:	bl	1477c <init_token_int_value@@Base>
   139b4:	ldrd	r2, [r4, #24]
   139b8:	mov	r0, #4
   139bc:	adds	r2, r2, #1
   139c0:	adc	r3, r3, #0
   139c4:	strd	r2, [r4, #24]
   139c8:	bl	118d0 <malloc@plt>
   139cc:	str	r0, [r5, #12]
   139d0:	bl	148a4 <init_token_semicolon@@Base>
   139d4:	ldrd	r2, [r4, #32]
   139d8:	mov	r0, #4
   139dc:	adds	r2, r2, #1
   139e0:	adc	r3, r3, #0
   139e4:	strd	r2, [r4, #32]
   139e8:	bl	118d0 <malloc@plt>
   139ec:	str	r0, [r5, #16]
   139f0:	bl	1487c <init_token_return@@Base>
   139f4:	ldrd	r2, [r4, #40]	; 0x28
   139f8:	mov	r0, #8
   139fc:	adds	r2, r2, #1
   13a00:	adc	r3, r3, #0
   13a04:	strd	r2, [r4, #40]	; 0x28
   13a08:	bl	118d0 <malloc@plt>
   13a0c:	mov	r1, #1
   13a10:	str	r0, [r5, #20]
   13a14:	bl	1477c <init_token_int_value@@Base>
   13a18:	ldrd	r2, [r4, #48]	; 0x30
   13a1c:	mov	r0, #4
   13a20:	adds	r2, r2, #1
   13a24:	adc	r3, r3, #0
   13a28:	strd	r2, [r4, #48]	; 0x30
   13a2c:	bl	118d0 <malloc@plt>
   13a30:	str	r0, [r5, #24]
   13a34:	bl	148a4 <init_token_semicolon@@Base>
   13a38:	ldrd	r2, [r4, #56]	; 0x38
   13a3c:	mov	r0, #4
   13a40:	adds	r2, r2, #1
   13a44:	adc	r3, r3, #0
   13a48:	strd	r2, [r4, #56]	; 0x38
   13a4c:	bl	118d0 <malloc@plt>
   13a50:	str	r0, [r5, #28]
   13a54:	bl	14854 <init_token_cbra@@Base>
   13a58:	ldrd	r2, [r4, #64]	; 0x40
   13a5c:	ldr	r1, [pc, #384]	; 13be4 <body_with_two_returns@@Base+0x2d8>
   13a60:	mov	ip, #8
   13a64:	adds	r2, r2, #1
   13a68:	adc	r3, r3, #0
   13a6c:	mov	r0, sp
   13a70:	strd	r2, [r4, #64]	; 0x40
   13a74:	ldr	r6, [r7, r1]
   13a78:	str	r5, [r6, #228]	; 0xe4
   13a7c:	str	ip, [r6, #220]	; 0xdc
   13a80:	bl	15e70 <read_body@@Base>
   13a84:	ldr	r3, [r6, #204]	; 0xcc
   13a88:	cmp	r3, #8
   13a8c:	bne	13ad8 <body_with_two_returns@@Base+0x1cc>
   13a90:	cmp	r0, #0
   13a94:	beq	13ba8 <body_with_two_returns@@Base+0x29c>
   13a98:	ldr	r3, [r0]
   13a9c:	cmp	r3, #3
   13aa0:	bne	13b74 <body_with_two_returns@@Base+0x268>
   13aa4:	ldr	r3, [r0, #4]
   13aa8:	ldr	r2, [r3]
   13aac:	cmp	r2, #3
   13ab0:	bne	13b40 <body_with_two_returns@@Base+0x234>
   13ab4:	ldr	r3, [r3, #4]
   13ab8:	cmp	r3, #0
   13abc:	bne	13b0c <body_with_two_returns@@Base+0x200>
   13ac0:	ldrd	r2, [r4, #104]	; 0x68
   13ac4:	adds	r2, r2, #1
   13ac8:	adc	r3, r3, #0
   13acc:	strd	r2, [r4, #104]	; 0x68
   13ad0:	add	sp, sp, #20
   13ad4:	pop	{r4, r5, r6, r7, pc}
   13ad8:	ldrd	r6, [r4, #72]	; 0x48
   13adc:	ldr	r3, [pc, #260]	; 13be8 <body_with_two_returns@@Base+0x2dc>
   13ae0:	ldr	r1, [pc, #260]	; 13bec <body_with_two_returns@@Base+0x2e0>
   13ae4:	adds	r6, r6, #1
   13ae8:	ldr	r0, [pc, #256]	; 13bf0 <body_with_two_returns@@Base+0x2e4>
   13aec:	add	r3, pc, r3
   13af0:	adc	r7, r7, #0
   13af4:	ldr	r2, [pc, #248]	; 13bf4 <body_with_two_returns@@Base+0x2e8>
   13af8:	add	r3, r3, #248	; 0xf8
   13afc:	add	r1, pc, r1
   13b00:	add	r0, pc, r0
   13b04:	strd	r6, [r4, #72]	; 0x48
   13b08:	bl	119e4 <__assert_fail@plt>
   13b0c:	ldrd	r6, [r4, #112]	; 0x70
   13b10:	ldr	r3, [pc, #224]	; 13bf8 <body_with_two_returns@@Base+0x2ec>
   13b14:	ldr	r1, [pc, #224]	; 13bfc <body_with_two_returns@@Base+0x2f0>
   13b18:	adds	r6, r6, #1
   13b1c:	ldr	r0, [pc, #220]	; 13c00 <body_with_two_returns@@Base+0x2f4>
   13b20:	add	r3, pc, r3
   13b24:	adc	r7, r7, #0
   13b28:	ldr	r2, [pc, #212]	; 13c04 <body_with_two_returns@@Base+0x2f8>
   13b2c:	add	r3, r3, #248	; 0xf8
   13b30:	add	r1, pc, r1
   13b34:	add	r0, pc, r0
   13b38:	strd	r6, [r4, #112]	; 0x70
   13b3c:	bl	119e4 <__assert_fail@plt>
   13b40:	ldrd	r6, [r4, #96]	; 0x60
   13b44:	ldr	r3, [pc, #188]	; 13c08 <body_with_two_returns@@Base+0x2fc>
   13b48:	ldr	r1, [pc, #188]	; 13c0c <body_with_two_returns@@Base+0x300>
   13b4c:	adds	r6, r6, #1
   13b50:	ldr	r0, [pc, #184]	; 13c10 <body_with_two_returns@@Base+0x304>
   13b54:	add	r3, pc, r3
   13b58:	adc	r7, r7, #0
   13b5c:	ldr	r2, [pc, #176]	; 13c14 <body_with_two_returns@@Base+0x308>
   13b60:	add	r3, r3, #248	; 0xf8
   13b64:	add	r1, pc, r1
   13b68:	add	r0, pc, r0
   13b6c:	strd	r6, [r4, #96]	; 0x60
   13b70:	bl	119e4 <__assert_fail@plt>
   13b74:	ldrd	r6, [r4, #88]	; 0x58
   13b78:	ldr	r3, [pc, #152]	; 13c18 <body_with_two_returns@@Base+0x30c>
   13b7c:	ldr	r1, [pc, #152]	; 13c1c <body_with_two_returns@@Base+0x310>
   13b80:	adds	r6, r6, #1
   13b84:	ldr	r0, [pc, #148]	; 13c20 <body_with_two_returns@@Base+0x314>
   13b88:	add	r3, pc, r3
   13b8c:	adc	r7, r7, #0
   13b90:	ldr	r2, [pc, #140]	; 13c24 <body_with_two_returns@@Base+0x318>
   13b94:	add	r3, r3, #248	; 0xf8
   13b98:	add	r1, pc, r1
   13b9c:	add	r0, pc, r0
   13ba0:	strd	r6, [r4, #88]	; 0x58
   13ba4:	bl	119e4 <__assert_fail@plt>
   13ba8:	ldrd	r6, [r4, #80]	; 0x50
   13bac:	ldr	r3, [pc, #116]	; 13c28 <body_with_two_returns@@Base+0x31c>
   13bb0:	ldr	r1, [pc, #116]	; 13c2c <body_with_two_returns@@Base+0x320>
   13bb4:	adds	r6, r6, #1
   13bb8:	ldr	r0, [pc, #112]	; 13c30 <body_with_two_returns@@Base+0x324>
   13bbc:	add	r3, pc, r3
   13bc0:	adc	r7, r7, #0
   13bc4:	mov	r2, #372	; 0x174
   13bc8:	add	r3, r3, #248	; 0xf8
   13bcc:	add	r1, pc, r1
   13bd0:	add	r0, pc, r0
   13bd4:	strd	r6, [r4, #80]	; 0x50
   13bd8:	bl	119e4 <__assert_fail@plt>
   13bdc:	andeq	r7, r1, r4, lsl #1
   13be0:	andeq	r6, r1, r0, asr #13
   13be4:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   13be8:	andeq	r4, r0, ip, asr sl
   13bec:			; <UNDEFINED> instruction: 0x00004bbc
   13bf0:	andeq	r4, r0, r4, asr #27
   13bf4:	andeq	r0, r0, r3, ror r1
   13bf8:	andeq	r4, r0, r8, lsr #20
   13bfc:	andeq	r4, r0, r8, lsl #23
   13c00:	andeq	r4, r0, r0, ror #27
   13c04:	andeq	r0, r0, r7, ror r1
   13c08:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   13c0c:	andeq	r4, r0, r4, asr fp
   13c10:	muleq	r0, r0, sp
   13c14:	andeq	r0, r0, r6, ror r1
   13c18:	andeq	r4, r0, r0, asr #19
   13c1c:	andeq	r4, r0, r0, lsr #22
   13c20:	andeq	r4, r0, r4, asr #26
   13c24:	andeq	r0, r0, r5, ror r1
   13c28:	andeq	r4, r0, ip, lsl #19
   13c2c:	andeq	r4, r0, ip, ror #21
   13c30:			; <UNDEFINED> instruction: 0x00004cb8

00013c34 <body_with_one_return@@Base>:
   13c34:	push	{r4, r5, r6, r7, lr}
   13c38:	sub	sp, sp, #20
   13c3c:	ldr	r4, [pc, #536]	; 13e5c <body_with_one_return@@Base+0x228>
   13c40:	add	r1, sp, #4
   13c44:	add	r4, pc, r4
   13c48:	add	r4, r4, #1008	; 0x3f0
   13c4c:	mov	r0, sp
   13c50:	ldrd	r2, [r4, #-8]
   13c54:	ldr	r7, [pc, #516]	; 13e60 <body_with_one_return@@Base+0x22c>
   13c58:	adds	r2, r2, #1
   13c5c:	adc	r3, r3, #0
   13c60:	add	r7, pc, r7
   13c64:	strd	r2, [r4, #-8]
   13c68:	bl	154dc <init_grammar@@Base>
   13c6c:	ldrd	r2, [r4]
   13c70:	mov	r0, #20
   13c74:	adds	r2, r2, #1
   13c78:	adc	r3, r3, #0
   13c7c:	strd	r2, [r4]
   13c80:	bl	118d0 <malloc@plt>
   13c84:	mov	r5, r0
   13c88:	mov	r0, #4
   13c8c:	bl	118d0 <malloc@plt>
   13c90:	str	r0, [r5]
   13c94:	bl	1482c <init_token_obra@@Base>
   13c98:	ldrd	r2, [r4, #8]
   13c9c:	mov	r0, #4
   13ca0:	adds	r2, r2, #1
   13ca4:	adc	r3, r3, #0
   13ca8:	strd	r2, [r4, #8]
   13cac:	bl	118d0 <malloc@plt>
   13cb0:	str	r0, [r5, #4]
   13cb4:	bl	1487c <init_token_return@@Base>
   13cb8:	ldrd	r2, [r4, #16]
   13cbc:	mov	r0, #8
   13cc0:	adds	r2, r2, #1
   13cc4:	adc	r3, r3, #0
   13cc8:	strd	r2, [r4, #16]
   13ccc:	bl	118d0 <malloc@plt>
   13cd0:	mov	r1, #1
   13cd4:	str	r0, [r5, #8]
   13cd8:	bl	1477c <init_token_int_value@@Base>
   13cdc:	ldrd	r2, [r4, #24]
   13ce0:	mov	r0, #4
   13ce4:	adds	r2, r2, #1
   13ce8:	adc	r3, r3, #0
   13cec:	strd	r2, [r4, #24]
   13cf0:	bl	118d0 <malloc@plt>
   13cf4:	str	r0, [r5, #12]
   13cf8:	bl	148a4 <init_token_semicolon@@Base>
   13cfc:	ldrd	r2, [r4, #32]
   13d00:	mov	r0, #4
   13d04:	adds	r2, r2, #1
   13d08:	adc	r3, r3, #0
   13d0c:	strd	r2, [r4, #32]
   13d10:	bl	118d0 <malloc@plt>
   13d14:	str	r0, [r5, #16]
   13d18:	bl	14854 <init_token_cbra@@Base>
   13d1c:	ldrd	r2, [r4, #40]	; 0x28
   13d20:	ldr	r1, [pc, #316]	; 13e64 <body_with_one_return@@Base+0x230>
   13d24:	mov	ip, #5
   13d28:	adds	r2, r2, #1
   13d2c:	adc	r3, r3, #0
   13d30:	mov	r0, sp
   13d34:	strd	r2, [r4, #40]	; 0x28
   13d38:	ldr	r6, [r7, r1]
   13d3c:	str	r5, [r6, #228]	; 0xe4
   13d40:	str	ip, [r6, #220]	; 0xdc
   13d44:	bl	15e70 <read_body@@Base>
   13d48:	ldr	r3, [r6, #204]	; 0xcc
   13d4c:	cmp	r3, #5
   13d50:	bne	13d8c <body_with_one_return@@Base+0x158>
   13d54:	cmp	r0, #0
   13d58:	beq	13e28 <body_with_one_return@@Base+0x1f4>
   13d5c:	ldr	r3, [r0]
   13d60:	cmp	r3, #3
   13d64:	bne	13df4 <body_with_one_return@@Base+0x1c0>
   13d68:	ldr	r3, [r0, #4]
   13d6c:	cmp	r3, #0
   13d70:	bne	13dc0 <body_with_one_return@@Base+0x18c>
   13d74:	ldrd	r2, [r4, #72]	; 0x48
   13d78:	adds	r2, r2, #1
   13d7c:	adc	r3, r3, #0
   13d80:	strd	r2, [r4, #72]	; 0x48
   13d84:	add	sp, sp, #20
   13d88:	pop	{r4, r5, r6, r7, pc}
   13d8c:	ldrd	r6, [r4, #48]	; 0x30
   13d90:	ldr	r3, [pc, #208]	; 13e68 <body_with_one_return@@Base+0x234>
   13d94:	ldr	r1, [pc, #208]	; 13e6c <body_with_one_return@@Base+0x238>
   13d98:	adds	r6, r6, #1
   13d9c:	ldr	r0, [pc, #204]	; 13e70 <body_with_one_return@@Base+0x23c>
   13da0:	add	r3, pc, r3
   13da4:	adc	r7, r7, #0
   13da8:	ldr	r2, [pc, #196]	; 13e74 <body_with_one_return@@Base+0x240>
   13dac:	add	r3, r3, #272	; 0x110
   13db0:	add	r1, pc, r1
   13db4:	add	r0, pc, r0
   13db8:	strd	r6, [r4, #48]	; 0x30
   13dbc:	bl	119e4 <__assert_fail@plt>
   13dc0:	ldrd	r6, [r4, #80]	; 0x50
   13dc4:	ldr	r3, [pc, #172]	; 13e78 <body_with_one_return@@Base+0x244>
   13dc8:	ldr	r1, [pc, #172]	; 13e7c <body_with_one_return@@Base+0x248>
   13dcc:	adds	r6, r6, #1
   13dd0:	ldr	r0, [pc, #168]	; 13e80 <body_with_one_return@@Base+0x24c>
   13dd4:	add	r3, pc, r3
   13dd8:	adc	r7, r7, #0
   13ddc:	ldr	r2, [pc, #160]	; 13e84 <body_with_one_return@@Base+0x250>
   13de0:	add	r3, r3, #272	; 0x110
   13de4:	add	r1, pc, r1
   13de8:	add	r0, pc, r0
   13dec:	strd	r6, [r4, #80]	; 0x50
   13df0:	bl	119e4 <__assert_fail@plt>
   13df4:	ldrd	r6, [r4, #64]	; 0x40
   13df8:	ldr	r3, [pc, #136]	; 13e88 <body_with_one_return@@Base+0x254>
   13dfc:	ldr	r1, [pc, #136]	; 13e8c <body_with_one_return@@Base+0x258>
   13e00:	adds	r6, r6, #1
   13e04:	ldr	r0, [pc, #132]	; 13e90 <body_with_one_return@@Base+0x25c>
   13e08:	add	r3, pc, r3
   13e0c:	adc	r7, r7, #0
   13e10:	mov	r2, #408	; 0x198
   13e14:	add	r3, r3, #272	; 0x110
   13e18:	add	r1, pc, r1
   13e1c:	add	r0, pc, r0
   13e20:	strd	r6, [r4, #64]	; 0x40
   13e24:	bl	119e4 <__assert_fail@plt>
   13e28:	ldrd	r6, [r4, #56]	; 0x38
   13e2c:	ldr	r3, [pc, #96]	; 13e94 <body_with_one_return@@Base+0x260>
   13e30:	ldr	r1, [pc, #96]	; 13e98 <body_with_one_return@@Base+0x264>
   13e34:	adds	r6, r6, #1
   13e38:	ldr	r0, [pc, #92]	; 13e9c <body_with_one_return@@Base+0x268>
   13e3c:	add	r3, pc, r3
   13e40:	adc	r7, r7, #0
   13e44:	ldr	r2, [pc, #84]	; 13ea0 <body_with_one_return@@Base+0x26c>
   13e48:	add	r3, r3, #272	; 0x110
   13e4c:	add	r1, pc, r1
   13e50:	add	r0, pc, r0
   13e54:	strd	r6, [r4, #56]	; 0x38
   13e58:	bl	119e4 <__assert_fail@plt>
   13e5c:	andeq	r6, r1, ip, asr sp
   13e60:	muleq	r1, r8, r3
   13e64:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   13e68:	andeq	r4, r0, r8, lsr #15
   13e6c:	andeq	r4, r0, r8, lsl #18
   13e70:	andeq	r4, r0, r4, lsr #19
   13e74:	muleq	r0, r6, r1
   13e78:	andeq	r4, r0, r4, ror r7
   13e7c:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   13e80:	andeq	r4, r0, r4, asr #22
   13e84:	muleq	r0, r9, r1
   13e88:	andeq	r4, r0, r0, asr #14
   13e8c:	andeq	r4, r0, r0, lsr #17
   13e90:	andeq	r4, r0, r4, asr #21
   13e94:	andeq	r4, r0, ip, lsl #14
   13e98:	andeq	r4, r0, ip, ror #16
   13e9c:	andeq	r4, r0, r8, lsr sl
   13ea0:	muleq	r0, r7, r1

00013ea4 <if_statement_inside_if_statement@@Base>:
   13ea4:	push	{r4, r5, r6, r7, r8, r9, lr}
   13ea8:	sub	sp, sp, #20
   13eac:	ldr	r4, [pc, #1008]	; 142a4 <if_statement_inside_if_statement@@Base+0x400>
   13eb0:	add	r1, sp, #4
   13eb4:	add	r4, pc, r4
   13eb8:	add	r4, r4, #1104	; 0x450
   13ebc:	mov	r0, sp
   13ec0:	ldrd	r2, [r4, #-8]
   13ec4:	ldr	r9, [pc, #988]	; 142a8 <if_statement_inside_if_statement@@Base+0x404>
   13ec8:	adds	r2, r2, #1
   13ecc:	adc	r3, r3, #0
   13ed0:	add	r9, pc, r9
   13ed4:	strd	r2, [r4, #-8]
   13ed8:	bl	154dc <init_grammar@@Base>
   13edc:	ldrd	r2, [r4]
   13ee0:	mov	r0, #3
   13ee4:	adds	r2, r2, #1
   13ee8:	adc	r3, r3, #0
   13eec:	strd	r2, [r4]
   13ef0:	bl	118d0 <malloc@plt>
   13ef4:	mov	r7, r0
   13ef8:	mov	r0, #3
   13efc:	bl	118d0 <malloc@plt>
   13f00:	mov	r1, #33	; 0x21
   13f04:	mov	r2, #61	; 0x3d
   13f08:	mov	r3, #0
   13f0c:	strb	r1, [r7]
   13f10:	strb	r2, [r7, #1]
   13f14:	strb	r3, [r7, #2]
   13f18:	mov	r6, r0
   13f1c:	strb	r1, [r0]
   13f20:	strb	r2, [r6, #1]
   13f24:	strb	r3, [r6, #2]
   13f28:	mov	r0, #76	; 0x4c
   13f2c:	bl	118d0 <malloc@plt>
   13f30:	mov	r5, r0
   13f34:	mov	r0, #4
   13f38:	bl	118d0 <malloc@plt>
   13f3c:	str	r0, [r5]
   13f40:	bl	147dc <init_token_opar@@Base>
   13f44:	ldrd	r2, [r4, #8]
   13f48:	mov	r0, #8
   13f4c:	adds	r2, r2, #1
   13f50:	adc	r3, r3, #0
   13f54:	strd	r2, [r4, #8]
   13f58:	bl	118d0 <malloc@plt>
   13f5c:	mov	r1, #1
   13f60:	str	r0, [r5, #4]
   13f64:	bl	1477c <init_token_int_value@@Base>
   13f68:	ldrd	r2, [r4, #16]
   13f6c:	mov	r0, #8
   13f70:	adds	r2, r2, #1
   13f74:	adc	r3, r3, #0
   13f78:	strd	r2, [r4, #16]
   13f7c:	bl	118d0 <malloc@plt>
   13f80:	mov	r1, #1
   13f84:	str	r0, [r5, #8]
   13f88:	bl	1477c <init_token_int_value@@Base>
   13f8c:	ldrd	r2, [r4, #24]
   13f90:	mov	r0, #8
   13f94:	adds	r2, r2, #1
   13f98:	adc	r3, r3, #0
   13f9c:	strd	r2, [r4, #24]
   13fa0:	bl	118d0 <malloc@plt>
   13fa4:	mov	r1, r7
   13fa8:	str	r0, [r5, #12]
   13fac:	bl	14944 <init_token_boolean_op@@Base>
   13fb0:	ldrd	r2, [r4, #32]
   13fb4:	mov	r0, #8
   13fb8:	adds	r2, r2, #1
   13fbc:	adc	r3, r3, #0
   13fc0:	strd	r2, [r4, #32]
   13fc4:	bl	118d0 <malloc@plt>
   13fc8:	mov	r1, #1
   13fcc:	str	r0, [r5, #16]
   13fd0:	bl	1477c <init_token_int_value@@Base>
   13fd4:	ldrd	r2, [r4, #40]	; 0x28
   13fd8:	mov	r0, #4
   13fdc:	adds	r2, r2, #1
   13fe0:	adc	r3, r3, #0
   13fe4:	strd	r2, [r4, #40]	; 0x28
   13fe8:	bl	118d0 <malloc@plt>
   13fec:	str	r0, [r5, #20]
   13ff0:	bl	14804 <init_token_cpar@@Base>
   13ff4:	ldrd	r2, [r4, #48]	; 0x30
   13ff8:	mov	r0, #4
   13ffc:	adds	r2, r2, #1
   14000:	adc	r3, r3, #0
   14004:	strd	r2, [r4, #48]	; 0x30
   14008:	bl	118d0 <malloc@plt>
   1400c:	str	r0, [r5, #24]
   14010:	bl	1482c <init_token_obra@@Base>
   14014:	ldrd	r2, [r4, #56]	; 0x38
   14018:	mov	r0, #4
   1401c:	adds	r2, r2, #1
   14020:	adc	r3, r3, #0
   14024:	strd	r2, [r4, #56]	; 0x38
   14028:	bl	118d0 <malloc@plt>
   1402c:	str	r0, [r5, #28]
   14030:	bl	148f4 <init_token_if@@Base>
   14034:	ldrd	r2, [r4, #64]	; 0x40
   14038:	mov	r0, #4
   1403c:	adds	r2, r2, #1
   14040:	adc	r3, r3, #0
   14044:	strd	r2, [r4, #64]	; 0x40
   14048:	bl	118d0 <malloc@plt>
   1404c:	str	r0, [r5, #32]
   14050:	bl	147dc <init_token_opar@@Base>
   14054:	ldrd	r2, [r4, #72]	; 0x48
   14058:	mov	r0, #8
   1405c:	adds	r2, r2, #1
   14060:	adc	r3, r3, #0
   14064:	strd	r2, [r4, #72]	; 0x48
   14068:	bl	118d0 <malloc@plt>
   1406c:	mov	r1, #1
   14070:	str	r0, [r5, #36]	; 0x24
   14074:	bl	1477c <init_token_int_value@@Base>
   14078:	ldrd	r2, [r4, #80]	; 0x50
   1407c:	mov	r0, #8
   14080:	adds	r2, r2, #1
   14084:	adc	r3, r3, #0
   14088:	strd	r2, [r4, #80]	; 0x50
   1408c:	bl	118d0 <malloc@plt>
   14090:	mov	r1, #1
   14094:	str	r0, [r5, #40]	; 0x28
   14098:	bl	1477c <init_token_int_value@@Base>
   1409c:	ldrd	r2, [r4, #88]	; 0x58
   140a0:	mov	r0, #8
   140a4:	adds	r2, r2, #1
   140a8:	adc	r3, r3, #0
   140ac:	strd	r2, [r4, #88]	; 0x58
   140b0:	bl	118d0 <malloc@plt>
   140b4:	mov	r1, r6
   140b8:	str	r0, [r5, #44]	; 0x2c
   140bc:	bl	14944 <init_token_boolean_op@@Base>
   140c0:	ldrd	r2, [r4, #96]	; 0x60
   140c4:	mov	r0, #8
   140c8:	adds	r2, r2, #1
   140cc:	adc	r3, r3, #0
   140d0:	strd	r2, [r4, #96]	; 0x60
   140d4:	bl	118d0 <malloc@plt>
   140d8:	mov	r1, #1
   140dc:	str	r0, [r5, #48]	; 0x30
   140e0:	bl	1477c <init_token_int_value@@Base>
   140e4:	ldrd	r2, [r4, #104]	; 0x68
   140e8:	mov	r0, #4
   140ec:	adds	r2, r2, #1
   140f0:	adc	r3, r3, #0
   140f4:	strd	r2, [r4, #104]	; 0x68
   140f8:	bl	118d0 <malloc@plt>
   140fc:	str	r0, [r5, #52]	; 0x34
   14100:	bl	14804 <init_token_cpar@@Base>
   14104:	ldrd	r2, [r4, #112]	; 0x70
   14108:	mov	r0, #4
   1410c:	adds	r2, r2, #1
   14110:	adc	r3, r3, #0
   14114:	strd	r2, [r4, #112]	; 0x70
   14118:	bl	118d0 <malloc@plt>
   1411c:	str	r0, [r5, #56]	; 0x38
   14120:	bl	1482c <init_token_obra@@Base>
   14124:	ldrd	r2, [r4, #120]	; 0x78
   14128:	mov	r0, #4
   1412c:	adds	r2, r2, #1
   14130:	adc	r3, r3, #0
   14134:	strd	r2, [r4, #120]	; 0x78
   14138:	bl	118d0 <malloc@plt>
   1413c:	str	r0, [r5, #60]	; 0x3c
   14140:	bl	14854 <init_token_cbra@@Base>
   14144:	ldrd	r2, [r4, #128]	; 0x80
   14148:	mov	r0, #4
   1414c:	adds	r2, r2, #1
   14150:	adc	r3, r3, #0
   14154:	strd	r2, [r4, #128]	; 0x80
   14158:	bl	118d0 <malloc@plt>
   1415c:	str	r0, [r5, #64]	; 0x40
   14160:	bl	14854 <init_token_cbra@@Base>
   14164:	ldrd	r2, [r4, #136]	; 0x88
   14168:	mov	r0, #4
   1416c:	adds	r2, r2, #1
   14170:	adc	r3, r3, #0
   14174:	strd	r2, [r4, #136]	; 0x88
   14178:	bl	118d0 <malloc@plt>
   1417c:	str	r0, [r5, #68]	; 0x44
   14180:	bl	14854 <init_token_cbra@@Base>
   14184:	ldrd	r2, [r4, #144]	; 0x90
   14188:	mov	r0, #4
   1418c:	adds	r2, r2, #1
   14190:	adc	r3, r3, #0
   14194:	strd	r2, [r4, #144]	; 0x90
   14198:	bl	118d0 <malloc@plt>
   1419c:	str	r0, [r5, #72]	; 0x48
   141a0:	bl	148cc <init_token_eof@@Base>
   141a4:	ldrd	r2, [r4, #152]	; 0x98
   141a8:	ldr	r1, [pc, #252]	; 142ac <if_statement_inside_if_statement@@Base+0x408>
   141ac:	mov	ip, #19
   141b0:	adds	r2, r2, #1
   141b4:	adc	r3, r3, #0
   141b8:	mov	r0, sp
   141bc:	strd	r2, [r4, #152]	; 0x98
   141c0:	ldr	r6, [r9, r1]
   141c4:	str	r5, [r6, #228]	; 0xe4
   141c8:	str	ip, [r6, #220]	; 0xdc
   141cc:	bl	15cf8 <read_if_statement@@Base>
   141d0:	ldr	r3, [r6, #204]	; 0xcc
   141d4:	cmp	r3, #19
   141d8:	bne	14208 <if_statement_inside_if_statement@@Base+0x364>
   141dc:	cmp	r0, #0
   141e0:	beq	14270 <if_statement_inside_if_statement@@Base+0x3cc>
   141e4:	ldr	r3, [r0]
   141e8:	cmp	r3, #4
   141ec:	bne	1423c <if_statement_inside_if_statement@@Base+0x398>
   141f0:	ldrd	r2, [r4, #176]	; 0xb0
   141f4:	adds	r2, r2, #1
   141f8:	adc	r3, r3, #0
   141fc:	strd	r2, [r4, #176]	; 0xb0
   14200:	add	sp, sp, #20
   14204:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14208:	ldrd	r6, [r4, #160]	; 0xa0
   1420c:	ldr	r3, [pc, #156]	; 142b0 <if_statement_inside_if_statement@@Base+0x40c>
   14210:	ldr	r1, [pc, #156]	; 142b4 <if_statement_inside_if_statement@@Base+0x410>
   14214:	adds	r6, r6, #1
   14218:	ldr	r0, [pc, #152]	; 142b8 <if_statement_inside_if_statement@@Base+0x414>
   1421c:	add	r3, pc, r3
   14220:	adc	r7, r7, #0
   14224:	mov	r2, #480	; 0x1e0
   14228:	add	r3, r3, #296	; 0x128
   1422c:	add	r1, pc, r1
   14230:	add	r0, pc, r0
   14234:	strd	r6, [r4, #160]	; 0xa0
   14238:	bl	119e4 <__assert_fail@plt>
   1423c:	ldrd	r6, [r4, #184]	; 0xb8
   14240:	ldr	r3, [pc, #116]	; 142bc <if_statement_inside_if_statement@@Base+0x418>
   14244:	ldr	r1, [pc, #116]	; 142c0 <if_statement_inside_if_statement@@Base+0x41c>
   14248:	adds	r6, r6, #1
   1424c:	ldr	r0, [pc, #112]	; 142c4 <if_statement_inside_if_statement@@Base+0x420>
   14250:	add	r3, pc, r3
   14254:	adc	r7, r7, #0
   14258:	ldr	r2, [pc, #104]	; 142c8 <if_statement_inside_if_statement@@Base+0x424>
   1425c:	add	r3, r3, #296	; 0x128
   14260:	add	r1, pc, r1
   14264:	add	r0, pc, r0
   14268:	strd	r6, [r4, #184]	; 0xb8
   1426c:	bl	119e4 <__assert_fail@plt>
   14270:	ldrd	r6, [r4, #168]	; 0xa8
   14274:	ldr	r3, [pc, #80]	; 142cc <if_statement_inside_if_statement@@Base+0x428>
   14278:	ldr	r1, [pc, #80]	; 142d0 <if_statement_inside_if_statement@@Base+0x42c>
   1427c:	adds	r6, r6, #1
   14280:	ldr	r0, [pc, #76]	; 142d4 <if_statement_inside_if_statement@@Base+0x430>
   14284:	add	r3, pc, r3
   14288:	adc	r7, r7, #0
   1428c:	ldr	r2, [pc, #68]	; 142d8 <if_statement_inside_if_statement@@Base+0x434>
   14290:	add	r3, r3, #296	; 0x128
   14294:	add	r1, pc, r1
   14298:	add	r0, pc, r0
   1429c:	strd	r6, [r4, #168]	; 0xa8
   142a0:	bl	119e4 <__assert_fail@plt>
   142a4:	andeq	r6, r1, ip, ror #21
   142a8:	andeq	r6, r1, r8, lsr #2
   142ac:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   142b0:	andeq	r4, r0, ip, lsr #6
   142b4:	andeq	r4, r0, ip, lsl #9
   142b8:	andeq	r4, r0, r0, lsl r7
   142bc:	strdeq	r4, [r0], -r8
   142c0:	andeq	r4, r0, r8, asr r4
   142c4:	andeq	r4, r0, r0, lsr r6
   142c8:	andeq	r0, r0, r2, ror #3
   142cc:	andeq	r4, r0, r4, asr #5
   142d0:	andeq	r4, r0, r4, lsr #8
   142d4:	strdeq	r4, [r0], -r0
   142d8:	andeq	r0, r0, r1, ror #3

000142dc <if_statement_inside_else_statement@@Base>:
   142dc:	push	{r4, r5, r6, r7, r8, r9, lr}
   142e0:	sub	sp, sp, #20
   142e4:	ldr	r4, [pc, #1072]	; 1471c <if_statement_inside_else_statement@@Base+0x440>
   142e8:	add	r1, sp, #4
   142ec:	add	r4, pc, r4
   142f0:	add	r4, r4, #1296	; 0x510
   142f4:	mov	r0, sp
   142f8:	ldrd	r2, [r4]
   142fc:	ldr	r9, [pc, #1052]	; 14720 <if_statement_inside_else_statement@@Base+0x444>
   14300:	adds	r2, r2, #1
   14304:	adc	r3, r3, #0
   14308:	add	r9, pc, r9
   1430c:	strd	r2, [r4]
   14310:	bl	154dc <init_grammar@@Base>
   14314:	ldrd	r2, [r4, #8]
   14318:	mov	r0, #3
   1431c:	adds	r2, r2, #1
   14320:	adc	r3, r3, #0
   14324:	strd	r2, [r4, #8]
   14328:	bl	118d0 <malloc@plt>
   1432c:	mov	r7, r0
   14330:	mov	r0, #3
   14334:	bl	118d0 <malloc@plt>
   14338:	mov	r1, #33	; 0x21
   1433c:	mov	r2, #61	; 0x3d
   14340:	mov	r3, #0
   14344:	strb	r1, [r7]
   14348:	strb	r2, [r7, #1]
   1434c:	strb	r3, [r7, #2]
   14350:	mov	r6, r0
   14354:	strb	r1, [r0]
   14358:	strb	r2, [r6, #1]
   1435c:	strb	r3, [r6, #2]
   14360:	mov	r0, #84	; 0x54
   14364:	bl	118d0 <malloc@plt>
   14368:	mov	r5, r0
   1436c:	mov	r0, #4
   14370:	bl	118d0 <malloc@plt>
   14374:	str	r0, [r5]
   14378:	bl	147dc <init_token_opar@@Base>
   1437c:	ldrd	r2, [r4, #16]
   14380:	mov	r0, #8
   14384:	adds	r2, r2, #1
   14388:	adc	r3, r3, #0
   1438c:	strd	r2, [r4, #16]
   14390:	bl	118d0 <malloc@plt>
   14394:	mov	r1, #1
   14398:	str	r0, [r5, #4]
   1439c:	bl	1477c <init_token_int_value@@Base>
   143a0:	ldrd	r2, [r4, #24]
   143a4:	mov	r0, #8
   143a8:	adds	r2, r2, #1
   143ac:	adc	r3, r3, #0
   143b0:	strd	r2, [r4, #24]
   143b4:	bl	118d0 <malloc@plt>
   143b8:	mov	r1, #1
   143bc:	str	r0, [r5, #8]
   143c0:	bl	1477c <init_token_int_value@@Base>
   143c4:	ldrd	r2, [r4, #32]
   143c8:	mov	r0, #8
   143cc:	adds	r2, r2, #1
   143d0:	adc	r3, r3, #0
   143d4:	strd	r2, [r4, #32]
   143d8:	bl	118d0 <malloc@plt>
   143dc:	mov	r1, r7
   143e0:	str	r0, [r5, #12]
   143e4:	bl	14944 <init_token_boolean_op@@Base>
   143e8:	ldrd	r2, [r4, #40]	; 0x28
   143ec:	mov	r0, #8
   143f0:	adds	r2, r2, #1
   143f4:	adc	r3, r3, #0
   143f8:	strd	r2, [r4, #40]	; 0x28
   143fc:	bl	118d0 <malloc@plt>
   14400:	mov	r1, #1
   14404:	str	r0, [r5, #16]
   14408:	bl	1477c <init_token_int_value@@Base>
   1440c:	ldrd	r2, [r4, #48]	; 0x30
   14410:	mov	r0, #4
   14414:	adds	r2, r2, #1
   14418:	adc	r3, r3, #0
   1441c:	strd	r2, [r4, #48]	; 0x30
   14420:	bl	118d0 <malloc@plt>
   14424:	str	r0, [r5, #20]
   14428:	bl	14804 <init_token_cpar@@Base>
   1442c:	ldrd	r2, [r4, #56]	; 0x38
   14430:	mov	r0, #4
   14434:	adds	r2, r2, #1
   14438:	adc	r3, r3, #0
   1443c:	strd	r2, [r4, #56]	; 0x38
   14440:	bl	118d0 <malloc@plt>
   14444:	str	r0, [r5, #24]
   14448:	bl	1482c <init_token_obra@@Base>
   1444c:	ldrd	r2, [r4, #64]	; 0x40
   14450:	mov	r0, #4
   14454:	adds	r2, r2, #1
   14458:	adc	r3, r3, #0
   1445c:	strd	r2, [r4, #64]	; 0x40
   14460:	bl	118d0 <malloc@plt>
   14464:	str	r0, [r5, #28]
   14468:	bl	14854 <init_token_cbra@@Base>
   1446c:	ldrd	r2, [r4, #72]	; 0x48
   14470:	mov	r0, #4
   14474:	adds	r2, r2, #1
   14478:	adc	r3, r3, #0
   1447c:	strd	r2, [r4, #72]	; 0x48
   14480:	bl	118d0 <malloc@plt>
   14484:	str	r0, [r5, #32]
   14488:	bl	1491c <init_token_else@@Base>
   1448c:	ldrd	r2, [r4, #80]	; 0x50
   14490:	mov	r0, #4
   14494:	adds	r2, r2, #1
   14498:	adc	r3, r3, #0
   1449c:	strd	r2, [r4, #80]	; 0x50
   144a0:	bl	118d0 <malloc@plt>
   144a4:	str	r0, [r5, #36]	; 0x24
   144a8:	bl	1482c <init_token_obra@@Base>
   144ac:	ldrd	r2, [r4, #88]	; 0x58
   144b0:	mov	r0, #4
   144b4:	adds	r2, r2, #1
   144b8:	adc	r3, r3, #0
   144bc:	strd	r2, [r4, #88]	; 0x58
   144c0:	bl	118d0 <malloc@plt>
   144c4:	str	r0, [r5, #40]	; 0x28
   144c8:	bl	148f4 <init_token_if@@Base>
   144cc:	ldrd	r2, [r4, #96]	; 0x60
   144d0:	mov	r0, #4
   144d4:	adds	r2, r2, #1
   144d8:	adc	r3, r3, #0
   144dc:	strd	r2, [r4, #96]	; 0x60
   144e0:	bl	118d0 <malloc@plt>
   144e4:	str	r0, [r5, #44]	; 0x2c
   144e8:	bl	147dc <init_token_opar@@Base>
   144ec:	ldrd	r2, [r4, #104]	; 0x68
   144f0:	mov	r0, #8
   144f4:	adds	r2, r2, #1
   144f8:	adc	r3, r3, #0
   144fc:	strd	r2, [r4, #104]	; 0x68
   14500:	bl	118d0 <malloc@plt>
   14504:	mov	r1, #1
   14508:	str	r0, [r5, #48]	; 0x30
   1450c:	bl	1477c <init_token_int_value@@Base>
   14510:	ldrd	r2, [r4, #112]	; 0x70
   14514:	mov	r0, #8
   14518:	adds	r2, r2, #1
   1451c:	adc	r3, r3, #0
   14520:	strd	r2, [r4, #112]	; 0x70
   14524:	bl	118d0 <malloc@plt>
   14528:	mov	r1, #1
   1452c:	str	r0, [r5, #52]	; 0x34
   14530:	bl	1477c <init_token_int_value@@Base>
   14534:	ldrd	r2, [r4, #120]	; 0x78
   14538:	mov	r0, #8
   1453c:	adds	r2, r2, #1
   14540:	adc	r3, r3, #0
   14544:	strd	r2, [r4, #120]	; 0x78
   14548:	bl	118d0 <malloc@plt>
   1454c:	mov	r1, r6
   14550:	str	r0, [r5, #56]	; 0x38
   14554:	bl	14944 <init_token_boolean_op@@Base>
   14558:	ldrd	r2, [r4, #128]	; 0x80
   1455c:	mov	r0, #8
   14560:	adds	r2, r2, #1
   14564:	adc	r3, r3, #0
   14568:	strd	r2, [r4, #128]	; 0x80
   1456c:	bl	118d0 <malloc@plt>
   14570:	mov	r1, #1
   14574:	str	r0, [r5, #60]	; 0x3c
   14578:	bl	1477c <init_token_int_value@@Base>
   1457c:	ldrd	r2, [r4, #136]	; 0x88
   14580:	mov	r0, #4
   14584:	adds	r2, r2, #1
   14588:	adc	r3, r3, #0
   1458c:	strd	r2, [r4, #136]	; 0x88
   14590:	bl	118d0 <malloc@plt>
   14594:	str	r0, [r5, #64]	; 0x40
   14598:	bl	14804 <init_token_cpar@@Base>
   1459c:	ldrd	r2, [r4, #144]	; 0x90
   145a0:	mov	r0, #4
   145a4:	adds	r2, r2, #1
   145a8:	adc	r3, r3, #0
   145ac:	strd	r2, [r4, #144]	; 0x90
   145b0:	bl	118d0 <malloc@plt>
   145b4:	str	r0, [r5, #68]	; 0x44
   145b8:	bl	1482c <init_token_obra@@Base>
   145bc:	ldrd	r2, [r4, #152]	; 0x98
   145c0:	mov	r0, #4
   145c4:	adds	r2, r2, #1
   145c8:	adc	r3, r3, #0
   145cc:	strd	r2, [r4, #152]	; 0x98
   145d0:	bl	118d0 <malloc@plt>
   145d4:	str	r0, [r5, #72]	; 0x48
   145d8:	bl	14854 <init_token_cbra@@Base>
   145dc:	ldrd	r2, [r4, #160]	; 0xa0
   145e0:	mov	r0, #4
   145e4:	adds	r2, r2, #1
   145e8:	adc	r3, r3, #0
   145ec:	strd	r2, [r4, #160]	; 0xa0
   145f0:	bl	118d0 <malloc@plt>
   145f4:	str	r0, [r5, #76]	; 0x4c
   145f8:	bl	14854 <init_token_cbra@@Base>
   145fc:	ldrd	r2, [r4, #168]	; 0xa8
   14600:	mov	r0, #4
   14604:	adds	r2, r2, #1
   14608:	adc	r3, r3, #0
   1460c:	strd	r2, [r4, #168]	; 0xa8
   14610:	bl	118d0 <malloc@plt>
   14614:	str	r0, [r5, #80]	; 0x50
   14618:	bl	14854 <init_token_cbra@@Base>
   1461c:	ldrd	r2, [r4, #176]	; 0xb0
   14620:	ldr	r1, [pc, #252]	; 14724 <if_statement_inside_else_statement@@Base+0x448>
   14624:	mov	ip, #21
   14628:	adds	r2, r2, #1
   1462c:	adc	r3, r3, #0
   14630:	mov	r0, sp
   14634:	strd	r2, [r4, #176]	; 0xb0
   14638:	ldr	r6, [r9, r1]
   1463c:	str	r5, [r6, #228]	; 0xe4
   14640:	str	ip, [r6, #220]	; 0xdc
   14644:	bl	15cf8 <read_if_statement@@Base>
   14648:	ldr	r3, [r6, #204]	; 0xcc
   1464c:	cmp	r3, #21
   14650:	bne	14680 <if_statement_inside_else_statement@@Base+0x3a4>
   14654:	cmp	r0, #0
   14658:	beq	146e8 <if_statement_inside_else_statement@@Base+0x40c>
   1465c:	ldr	r3, [r0]
   14660:	cmp	r3, #4
   14664:	bne	146b4 <if_statement_inside_else_statement@@Base+0x3d8>
   14668:	ldrd	r2, [r4, #200]	; 0xc8
   1466c:	adds	r2, r2, #1
   14670:	adc	r3, r3, #0
   14674:	strd	r2, [r4, #200]	; 0xc8
   14678:	add	sp, sp, #20
   1467c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14680:	ldrd	r6, [r4, #184]	; 0xb8
   14684:	ldr	r3, [pc, #156]	; 14728 <if_statement_inside_else_statement@@Base+0x44c>
   14688:	ldr	r1, [pc, #156]	; 1472c <if_statement_inside_else_statement@@Base+0x450>
   1468c:	adds	r6, r6, #1
   14690:	ldr	r0, [pc, #152]	; 14730 <if_statement_inside_else_statement@@Base+0x454>
   14694:	add	r3, pc, r3
   14698:	adc	r7, r7, #0
   1469c:	ldr	r2, [pc, #144]	; 14734 <if_statement_inside_else_statement@@Base+0x458>
   146a0:	add	r3, r3, #332	; 0x14c
   146a4:	add	r1, pc, r1
   146a8:	add	r0, pc, r0
   146ac:	strd	r6, [r4, #184]	; 0xb8
   146b0:	bl	119e4 <__assert_fail@plt>
   146b4:	ldrd	r6, [r4, #208]	; 0xd0
   146b8:	ldr	r3, [pc, #120]	; 14738 <if_statement_inside_else_statement@@Base+0x45c>
   146bc:	ldr	r1, [pc, #120]	; 1473c <if_statement_inside_else_statement@@Base+0x460>
   146c0:	adds	r6, r6, #1
   146c4:	ldr	r0, [pc, #116]	; 14740 <if_statement_inside_else_statement@@Base+0x464>
   146c8:	add	r3, pc, r3
   146cc:	adc	r7, r7, #0
   146d0:	mov	r2, #560	; 0x230
   146d4:	add	r3, r3, #332	; 0x14c
   146d8:	add	r1, pc, r1
   146dc:	add	r0, pc, r0
   146e0:	strd	r6, [r4, #208]	; 0xd0
   146e4:	bl	119e4 <__assert_fail@plt>
   146e8:	ldrd	r6, [r4, #192]	; 0xc0
   146ec:	ldr	r3, [pc, #80]	; 14744 <if_statement_inside_else_statement@@Base+0x468>
   146f0:	ldr	r1, [pc, #80]	; 14748 <if_statement_inside_else_statement@@Base+0x46c>
   146f4:	adds	r6, r6, #1
   146f8:	ldr	r0, [pc, #76]	; 1474c <if_statement_inside_else_statement@@Base+0x470>
   146fc:	add	r3, pc, r3
   14700:	adc	r7, r7, #0
   14704:	ldr	r2, [pc, #68]	; 14750 <if_statement_inside_else_statement@@Base+0x474>
   14708:	add	r3, r3, #332	; 0x14c
   1470c:	add	r1, pc, r1
   14710:	add	r0, pc, r0
   14714:	strd	r6, [r4, #192]	; 0xc0
   14718:	bl	119e4 <__assert_fail@plt>
   1471c:			; <UNDEFINED> instruction: 0x000166b4
   14720:	strdeq	r5, [r1], -r0
   14724:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   14728:			; <UNDEFINED> instruction: 0x00003eb4
   1472c:	andeq	r4, r0, r4, lsl r0
   14730:			; <UNDEFINED> instruction: 0x000042b4
   14734:	andeq	r0, r0, lr, lsr #4
   14738:	andeq	r3, r0, r0, lsl #29
   1473c:	andeq	r3, r0, r0, ror #31
   14740:			; <UNDEFINED> instruction: 0x000041b8
   14744:	andeq	r3, r0, ip, asr #28
   14748:	andeq	r3, r0, ip, lsr #31
   1474c:	andeq	r4, r0, r8, ror r1
   14750:	andeq	r0, r0, pc, lsr #4

00014754 <init_token_int_type@@Base>:
   14754:	ldr	r1, [pc, #28]	; 14778 <init_token_int_type@@Base+0x24>
   14758:	mov	ip, #0
   1475c:	add	r1, pc, r1
   14760:	str	ip, [r0]
   14764:	ldrd	r2, [r1]
   14768:	adds	r2, r2, #1
   1476c:	adc	r3, r3, #0
   14770:	strd	r2, [r1]
   14774:	bx	lr
   14778:	strdeq	r6, [r1], -r4

0001477c <init_token_int_value@@Base>:
   1477c:	ldr	ip, [pc, #36]	; 147a8 <init_token_int_value@@Base+0x2c>
   14780:	push	{lr}		; (str lr, [sp, #-4]!)
   14784:	add	ip, pc, ip
   14788:	mov	lr, #1
   1478c:	ldrd	r2, [ip, #8]
   14790:	str	r1, [r0, #4]
   14794:	str	lr, [r0]
   14798:	adds	r2, r2, #1
   1479c:	adc	r3, r3, #0
   147a0:	strd	r2, [ip, #8]
   147a4:	pop	{pc}		; (ldr pc, [sp], #4)
   147a8:	andeq	r6, r1, ip, asr #19

000147ac <init_token_function@@Base>:
   147ac:	ldr	ip, [pc, #36]	; 147d8 <init_token_function@@Base+0x2c>
   147b0:	push	{lr}		; (str lr, [sp, #-4]!)
   147b4:	add	ip, pc, ip
   147b8:	mov	lr, #2
   147bc:	ldrd	r2, [ip, #16]
   147c0:	str	r1, [r0, #4]
   147c4:	str	lr, [r0]
   147c8:	adds	r2, r2, #1
   147cc:	adc	r3, r3, #0
   147d0:	strd	r2, [ip, #16]
   147d4:	pop	{pc}		; (ldr pc, [sp], #4)
   147d8:	muleq	r1, ip, r9

000147dc <init_token_opar@@Base>:
   147dc:	ldr	r1, [pc, #28]	; 14800 <init_token_opar@@Base+0x24>
   147e0:	mov	r3, #3
   147e4:	add	r1, pc, r1
   147e8:	str	r3, [r0]
   147ec:	ldrd	r2, [r1, #24]
   147f0:	adds	r2, r2, #1
   147f4:	adc	r3, r3, #0
   147f8:	strd	r2, [r1, #24]
   147fc:	bx	lr
   14800:	andeq	r6, r1, ip, ror #18

00014804 <init_token_cpar@@Base>:
   14804:	ldr	r1, [pc, #28]	; 14828 <init_token_cpar@@Base+0x24>
   14808:	mov	r3, #4
   1480c:	add	r1, pc, r1
   14810:	str	r3, [r0]
   14814:	ldrd	r2, [r1, #32]
   14818:	adds	r2, r2, #1
   1481c:	adc	r3, r3, #0
   14820:	strd	r2, [r1, #32]
   14824:	bx	lr
   14828:	andeq	r6, r1, r4, asr #18

0001482c <init_token_obra@@Base>:
   1482c:	ldr	r1, [pc, #28]	; 14850 <init_token_obra@@Base+0x24>
   14830:	mov	r3, #5
   14834:	add	r1, pc, r1
   14838:	str	r3, [r0]
   1483c:	ldrd	r2, [r1, #40]	; 0x28
   14840:	adds	r2, r2, #1
   14844:	adc	r3, r3, #0
   14848:	strd	r2, [r1, #40]	; 0x28
   1484c:	bx	lr
   14850:	andeq	r6, r1, ip, lsl r9

00014854 <init_token_cbra@@Base>:
   14854:	ldr	r1, [pc, #28]	; 14878 <init_token_cbra@@Base+0x24>
   14858:	mov	r3, #6
   1485c:	add	r1, pc, r1
   14860:	str	r3, [r0]
   14864:	ldrd	r2, [r1, #48]	; 0x30
   14868:	adds	r2, r2, #1
   1486c:	adc	r3, r3, #0
   14870:	strd	r2, [r1, #48]	; 0x30
   14874:	bx	lr
   14878:	strdeq	r6, [r1], -r4

0001487c <init_token_return@@Base>:
   1487c:	ldr	r1, [pc, #28]	; 148a0 <init_token_return@@Base+0x24>
   14880:	mov	r3, #7
   14884:	add	r1, pc, r1
   14888:	str	r3, [r0]
   1488c:	ldrd	r2, [r1, #56]	; 0x38
   14890:	adds	r2, r2, #1
   14894:	adc	r3, r3, #0
   14898:	strd	r2, [r1, #56]	; 0x38
   1489c:	bx	lr
   148a0:	andeq	r6, r1, ip, asr #17

000148a4 <init_token_semicolon@@Base>:
   148a4:	ldr	r1, [pc, #28]	; 148c8 <init_token_semicolon@@Base+0x24>
   148a8:	mov	r3, #8
   148ac:	add	r1, pc, r1
   148b0:	str	r3, [r0]
   148b4:	ldrd	r2, [r1, #64]	; 0x40
   148b8:	adds	r2, r2, #1
   148bc:	adc	r3, r3, #0
   148c0:	strd	r2, [r1, #64]	; 0x40
   148c4:	bx	lr
   148c8:	andeq	r6, r1, r4, lsr #17

000148cc <init_token_eof@@Base>:
   148cc:	ldr	r1, [pc, #28]	; 148f0 <init_token_eof@@Base+0x24>
   148d0:	mov	r3, #9
   148d4:	add	r1, pc, r1
   148d8:	str	r3, [r0]
   148dc:	ldrd	r2, [r1, #72]	; 0x48
   148e0:	adds	r2, r2, #1
   148e4:	adc	r3, r3, #0
   148e8:	strd	r2, [r1, #72]	; 0x48
   148ec:	bx	lr
   148f0:	andeq	r6, r1, ip, ror r8

000148f4 <init_token_if@@Base>:
   148f4:	ldr	r1, [pc, #28]	; 14918 <init_token_if@@Base+0x24>
   148f8:	mov	r3, #10
   148fc:	add	r1, pc, r1
   14900:	str	r3, [r0]
   14904:	ldrd	r2, [r1, #80]	; 0x50
   14908:	adds	r2, r2, #1
   1490c:	adc	r3, r3, #0
   14910:	strd	r2, [r1, #80]	; 0x50
   14914:	bx	lr
   14918:	andeq	r6, r1, r4, asr r8

0001491c <init_token_else@@Base>:
   1491c:	ldr	r1, [pc, #28]	; 14940 <init_token_else@@Base+0x24>
   14920:	mov	r3, #11
   14924:	add	r1, pc, r1
   14928:	str	r3, [r0]
   1492c:	ldrd	r2, [r1, #88]	; 0x58
   14930:	adds	r2, r2, #1
   14934:	adc	r3, r3, #0
   14938:	strd	r2, [r1, #88]	; 0x58
   1493c:	bx	lr
   14940:	andeq	r6, r1, ip, lsr #16

00014944 <init_token_boolean_op@@Base>:
   14944:	ldr	ip, [pc, #36]	; 14970 <init_token_boolean_op@@Base+0x2c>
   14948:	push	{lr}		; (str lr, [sp, #-4]!)
   1494c:	add	ip, pc, ip
   14950:	mov	lr, #12
   14954:	ldrd	r2, [ip, #96]	; 0x60
   14958:	str	r1, [r0, #4]
   1495c:	str	lr, [r0]
   14960:	adds	r2, r2, #1
   14964:	adc	r3, r3, #0
   14968:	strd	r2, [ip, #96]	; 0x60
   1496c:	pop	{pc}		; (ldr pc, [sp], #4)
   14970:	andeq	r6, r1, r4, lsl #16

00014974 <free_token_int_type@@Base>:
   14974:	ldr	r1, [pc, #20]	; 14990 <free_token_int_type@@Base+0x1c>
   14978:	add	r1, pc, r1
   1497c:	ldrd	r2, [r1, #104]	; 0x68
   14980:	adds	r2, r2, #1
   14984:	adc	r3, r3, #0
   14988:	strd	r2, [r1, #104]	; 0x68
   1498c:	b	11870 <free@plt>
   14990:	ldrdeq	r6, [r1], -r8

00014994 <free_token_int_value@@Base>:
   14994:	ldr	r1, [pc, #20]	; 149b0 <free_token_int_value@@Base+0x1c>
   14998:	add	r1, pc, r1
   1499c:	ldrd	r2, [r1, #112]	; 0x70
   149a0:	adds	r2, r2, #1
   149a4:	adc	r3, r3, #0
   149a8:	strd	r2, [r1, #112]	; 0x70
   149ac:	b	11870 <free@plt>
   149b0:			; <UNDEFINED> instruction: 0x000167b8

000149b4 <free_token_function@@Base>:
   149b4:	ldr	r1, [pc, #20]	; 149d0 <free_token_function@@Base+0x1c>
   149b8:	add	r1, pc, r1
   149bc:	ldrd	r2, [r1, #120]	; 0x78
   149c0:	adds	r2, r2, #1
   149c4:	adc	r3, r3, #0
   149c8:	strd	r2, [r1, #120]	; 0x78
   149cc:	b	11870 <free@plt>
   149d0:	muleq	r1, r8, r7

000149d4 <free_token_opar@@Base>:
   149d4:	ldr	r1, [pc, #20]	; 149f0 <free_token_opar@@Base+0x1c>
   149d8:	add	r1, pc, r1
   149dc:	ldrd	r2, [r1, #128]	; 0x80
   149e0:	adds	r2, r2, #1
   149e4:	adc	r3, r3, #0
   149e8:	strd	r2, [r1, #128]	; 0x80
   149ec:	b	11870 <free@plt>
   149f0:	andeq	r6, r1, r8, ror r7

000149f4 <free_token_cpar@@Base>:
   149f4:	ldr	r1, [pc, #20]	; 14a10 <free_token_cpar@@Base+0x1c>
   149f8:	add	r1, pc, r1
   149fc:	ldrd	r2, [r1, #136]	; 0x88
   14a00:	adds	r2, r2, #1
   14a04:	adc	r3, r3, #0
   14a08:	strd	r2, [r1, #136]	; 0x88
   14a0c:	b	11870 <free@plt>
   14a10:	andeq	r6, r1, r8, asr r7

00014a14 <free_token_obra@@Base>:
   14a14:	ldr	r1, [pc, #20]	; 14a30 <free_token_obra@@Base+0x1c>
   14a18:	add	r1, pc, r1
   14a1c:	ldrd	r2, [r1, #144]	; 0x90
   14a20:	adds	r2, r2, #1
   14a24:	adc	r3, r3, #0
   14a28:	strd	r2, [r1, #144]	; 0x90
   14a2c:	b	11870 <free@plt>
   14a30:	andeq	r6, r1, r8, lsr r7

00014a34 <free_token_cbra@@Base>:
   14a34:	ldr	r1, [pc, #20]	; 14a50 <free_token_cbra@@Base+0x1c>
   14a38:	add	r1, pc, r1
   14a3c:	ldrd	r2, [r1, #152]	; 0x98
   14a40:	adds	r2, r2, #1
   14a44:	adc	r3, r3, #0
   14a48:	strd	r2, [r1, #152]	; 0x98
   14a4c:	b	11870 <free@plt>
   14a50:	andeq	r6, r1, r8, lsl r7

00014a54 <free_token_return@@Base>:
   14a54:	ldr	r1, [pc, #20]	; 14a70 <free_token_return@@Base+0x1c>
   14a58:	add	r1, pc, r1
   14a5c:	ldrd	r2, [r1, #160]	; 0xa0
   14a60:	adds	r2, r2, #1
   14a64:	adc	r3, r3, #0
   14a68:	strd	r2, [r1, #160]	; 0xa0
   14a6c:	b	11870 <free@plt>
   14a70:	strdeq	r6, [r1], -r8

00014a74 <free_token_semicolon@@Base>:
   14a74:	ldr	r1, [pc, #20]	; 14a90 <free_token_semicolon@@Base+0x1c>
   14a78:	add	r1, pc, r1
   14a7c:	ldrd	r2, [r1, #168]	; 0xa8
   14a80:	adds	r2, r2, #1
   14a84:	adc	r3, r3, #0
   14a88:	strd	r2, [r1, #168]	; 0xa8
   14a8c:	b	11870 <free@plt>
   14a90:	ldrdeq	r6, [r1], -r8

00014a94 <free_token_eof@@Base>:
   14a94:	ldr	r1, [pc, #20]	; 14ab0 <free_token_eof@@Base+0x1c>
   14a98:	add	r1, pc, r1
   14a9c:	ldrd	r2, [r1, #176]	; 0xb0
   14aa0:	adds	r2, r2, #1
   14aa4:	adc	r3, r3, #0
   14aa8:	strd	r2, [r1, #176]	; 0xb0
   14aac:	b	11870 <free@plt>
   14ab0:			; <UNDEFINED> instruction: 0x000166b8

00014ab4 <free_token_if@@Base>:
   14ab4:	ldr	r1, [pc, #20]	; 14ad0 <free_token_if@@Base+0x1c>
   14ab8:	add	r1, pc, r1
   14abc:	ldrd	r2, [r1, #184]	; 0xb8
   14ac0:	adds	r2, r2, #1
   14ac4:	adc	r3, r3, #0
   14ac8:	strd	r2, [r1, #184]	; 0xb8
   14acc:	b	11870 <free@plt>
   14ad0:	muleq	r1, r8, r6

00014ad4 <free_token_else@@Base>:
   14ad4:	ldr	r1, [pc, #20]	; 14af0 <free_token_else@@Base+0x1c>
   14ad8:	add	r1, pc, r1
   14adc:	ldrd	r2, [r1, #192]	; 0xc0
   14ae0:	adds	r2, r2, #1
   14ae4:	adc	r3, r3, #0
   14ae8:	strd	r2, [r1, #192]	; 0xc0
   14aec:	b	11870 <free@plt>
   14af0:	andeq	r6, r1, r8, ror r6

00014af4 <free_token_boolean_op@@Base>:
   14af4:	push	{r4, r5, r6, lr}
   14af8:	mov	r5, r0
   14afc:	ldr	r4, [pc, #60]	; 14b40 <free_token_boolean_op@@Base+0x4c>
   14b00:	ldr	r0, [r0, #4]
   14b04:	add	r4, pc, r4
   14b08:	ldrd	r2, [r4, #200]	; 0xc8
   14b0c:	adds	r2, r2, #1
   14b10:	adc	r3, r3, #0
   14b14:	cmp	r0, #0
   14b18:	strd	r2, [r4, #200]	; 0xc8
   14b1c:	beq	14b34 <free_token_boolean_op@@Base+0x40>
   14b20:	bl	11870 <free@plt>
   14b24:	ldrd	r2, [r4, #208]	; 0xd0
   14b28:	adds	r2, r2, #1
   14b2c:	adc	r3, r3, #0
   14b30:	strd	r2, [r4, #208]	; 0xd0
   14b34:	mov	r0, r5
   14b38:	pop	{r4, r5, r6, lr}
   14b3c:	b	11870 <free@plt>
   14b40:	andeq	r6, r1, ip, asr #12

00014b44 <init_ast_base@@Base>:
   14b44:	ldr	r3, [pc, #32]	; 14b6c <init_ast_base@@Base+0x28>
   14b48:	push	{r4, r5}
   14b4c:	add	r3, pc, r3
   14b50:	stm	r0, {r1, r2}
   14b54:	ldrd	r4, [r3]
   14b58:	adds	r4, r4, #1
   14b5c:	adc	r5, r5, #0
   14b60:	strd	r4, [r3]
   14b64:	pop	{r4, r5}
   14b68:	bx	lr
   14b6c:	ldrdeq	r6, [r1], -ip

00014b70 <init_ast_base_single@@Base>:
   14b70:	push	{r4, r6, r7, lr}
   14b74:	mov	r2, #0
   14b78:	ldr	r4, [pc, #40]	; 14ba8 <init_ast_base_single@@Base+0x38>
   14b7c:	add	r4, pc, r4
   14b80:	ldrd	r6, [r4, #8]
   14b84:	adds	r6, r6, #1
   14b88:	adc	r7, r7, #0
   14b8c:	strd	r6, [r4, #8]
   14b90:	bl	14b44 <init_ast_base@@Base>
   14b94:	ldrd	r2, [r4, #16]
   14b98:	adds	r2, r2, #1
   14b9c:	adc	r3, r3, #0
   14ba0:	strd	r2, [r4, #16]
   14ba4:	pop	{r4, r6, r7, pc}
   14ba8:	andeq	r6, r1, ip, lsr #13

00014bac <init_node_id@@Base>:
   14bac:	push	{r4, r5, r6, lr}
   14bb0:	mov	r6, r1
   14bb4:	ldr	r4, [pc, #52]	; 14bf0 <init_node_id@@Base+0x44>
   14bb8:	mov	r1, #0
   14bbc:	add	r4, pc, r4
   14bc0:	mov	r5, r0
   14bc4:	ldrd	r2, [r4, #24]
   14bc8:	adds	r2, r2, #1
   14bcc:	adc	r3, r3, #0
   14bd0:	strd	r2, [r4, #24]
   14bd4:	bl	14b70 <init_ast_base_single@@Base>
   14bd8:	ldrd	r2, [r4, #32]
   14bdc:	str	r6, [r5, #8]
   14be0:	adds	r2, r2, #1
   14be4:	adc	r3, r3, #0
   14be8:	strd	r2, [r4, #32]
   14bec:	pop	{r4, r5, r6, pc}
   14bf0:	andeq	r6, r1, ip, ror #12

00014bf4 <init_node_int@@Base>:
   14bf4:	push	{r4, r5, r6, lr}
   14bf8:	mov	r6, r1
   14bfc:	ldr	r4, [pc, #52]	; 14c38 <init_node_int@@Base+0x44>
   14c00:	mov	r1, #1
   14c04:	add	r4, pc, r4
   14c08:	mov	r5, r0
   14c0c:	ldrd	r2, [r4, #40]	; 0x28
   14c10:	adds	r2, r2, #1
   14c14:	adc	r3, r3, #0
   14c18:	strd	r2, [r4, #40]	; 0x28
   14c1c:	bl	14b70 <init_ast_base_single@@Base>
   14c20:	ldrd	r2, [r4, #48]	; 0x30
   14c24:	str	r6, [r5, #8]
   14c28:	adds	r2, r2, #1
   14c2c:	adc	r3, r3, #0
   14c30:	strd	r2, [r4, #48]	; 0x30
   14c34:	pop	{r4, r5, r6, pc}
   14c38:	andeq	r6, r1, r4, lsr #12

00014c3c <init_node_function@@Base>:
   14c3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14c40:	mov	r8, r1
   14c44:	ldr	r4, [pc, #60]	; 14c88 <init_node_function@@Base+0x4c>
   14c48:	mov	r1, #2
   14c4c:	add	r4, pc, r4
   14c50:	mov	r5, r0
   14c54:	ldrd	r6, [r4, #56]	; 0x38
   14c58:	mov	r9, r2
   14c5c:	adds	r6, r6, #1
   14c60:	adc	r7, r7, #0
   14c64:	strd	r6, [r4, #56]	; 0x38
   14c68:	bl	14b70 <init_ast_base_single@@Base>
   14c6c:	ldrd	r0, [r4, #64]	; 0x40
   14c70:	str	r8, [r5, #8]
   14c74:	str	r9, [r5, #12]
   14c78:	adds	r0, r0, #1
   14c7c:	adc	r1, r1, #0
   14c80:	strd	r0, [r4, #64]	; 0x40
   14c84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14c88:	ldrdeq	r6, [r1], -ip

00014c8c <init_node_return@@Base>:
   14c8c:	push	{r4, r5, r6, lr}
   14c90:	mov	r6, r1
   14c94:	ldr	r4, [pc, #52]	; 14cd0 <init_node_return@@Base+0x44>
   14c98:	mov	r1, #3
   14c9c:	add	r4, pc, r4
   14ca0:	mov	r5, r0
   14ca4:	ldrd	r2, [r4, #72]	; 0x48
   14ca8:	adds	r2, r2, #1
   14cac:	adc	r3, r3, #0
   14cb0:	strd	r2, [r4, #72]	; 0x48
   14cb4:	bl	14b70 <init_ast_base_single@@Base>
   14cb8:	ldrd	r2, [r4, #80]	; 0x50
   14cbc:	str	r6, [r5, #8]
   14cc0:	adds	r2, r2, #1
   14cc4:	adc	r3, r3, #0
   14cc8:	strd	r2, [r4, #80]	; 0x50
   14ccc:	pop	{r4, r5, r6, pc}
   14cd0:	andeq	r6, r1, ip, lsl #11

00014cd4 <init_node_if@@Base>:
   14cd4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14cd8:	mov	r9, r1
   14cdc:	ldr	r4, [pc, #68]	; 14d28 <init_node_if@@Base+0x54>
   14ce0:	mov	r1, #4
   14ce4:	add	r4, pc, r4
   14ce8:	mov	r5, r0
   14cec:	ldrd	r6, [r4, #88]	; 0x58
   14cf0:	mov	sl, r2
   14cf4:	mov	r8, r3
   14cf8:	adds	r6, r6, #1
   14cfc:	adc	r7, r7, #0
   14d00:	strd	r6, [r4, #88]	; 0x58
   14d04:	bl	14b70 <init_ast_base_single@@Base>
   14d08:	ldrd	r0, [r4, #96]	; 0x60
   14d0c:	str	r9, [r5, #8]
   14d10:	str	sl, [r5, #12]
   14d14:	adds	r0, r0, #1
   14d18:	adc	r1, r1, #0
   14d1c:	str	r8, [r5, #16]
   14d20:	strd	r0, [r4, #96]	; 0x60
   14d24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14d28:	andeq	r6, r1, r4, asr #10

00014d2c <init_node_boolean_operator@@Base>:
   14d2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14d30:	mov	r9, r1
   14d34:	ldr	r5, [pc, #76]	; 14d88 <init_node_boolean_operator@@Base+0x5c>
   14d38:	mov	r1, #0
   14d3c:	add	r5, pc, r5
   14d40:	mov	r4, r0
   14d44:	ldrd	r6, [r5, #104]	; 0x68
   14d48:	mov	r8, r3
   14d4c:	mov	sl, r2
   14d50:	adds	r6, r6, #1
   14d54:	adc	r7, r7, #0
   14d58:	strd	r6, [r5, #104]	; 0x68
   14d5c:	bl	14b70 <init_ast_base_single@@Base>
   14d60:	ldrd	r0, [r5, #112]	; 0x70
   14d64:	mov	r3, #5
   14d68:	str	r9, [r4, #16]
   14d6c:	adds	r0, r0, #1
   14d70:	adc	r1, r1, #0
   14d74:	str	sl, [r4, #8]
   14d78:	str	r8, [r4, #12]
   14d7c:	strd	r0, [r5, #112]	; 0x70
   14d80:	str	r3, [r4]
   14d84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14d88:	andeq	r6, r1, ip, ror #9

00014d8c <free_node_boolean_operator@@Base>:
   14d8c:	push	{r4, r5, r6, lr}
   14d90:	mov	r5, r0
   14d94:	ldr	r4, [pc, #132]	; 14e20 <free_node_boolean_operator@@Base+0x94>
   14d98:	ldr	r0, [r0, #4]
   14d9c:	add	r4, pc, r4
   14da0:	ldrd	r2, [r4, #120]	; 0x78
   14da4:	adds	r2, r2, #1
   14da8:	adc	r3, r3, #0
   14dac:	cmp	r0, #0
   14db0:	strd	r2, [r4, #120]	; 0x78
   14db4:	beq	14ddc <free_node_boolean_operator@@Base+0x50>
   14db8:	ldrd	r2, [r4, #128]	; 0x80
   14dbc:	adds	r2, r2, #1
   14dc0:	adc	r3, r3, #0
   14dc4:	strd	r2, [r4, #128]	; 0x80
   14dc8:	bl	14e28 <free_node@@Base>
   14dcc:	ldrd	r2, [r4, #136]	; 0x88
   14dd0:	adds	r2, r2, #1
   14dd4:	adc	r3, r3, #0
   14dd8:	strd	r2, [r4, #136]	; 0x88
   14ddc:	ldr	r4, [pc, #64]	; 14e24 <free_node_boolean_operator@@Base+0x98>
   14de0:	ldr	r0, [r5, #8]
   14de4:	add	r4, pc, r4
   14de8:	bl	14e28 <free_node@@Base>
   14dec:	ldrd	r2, [r4, #144]	; 0x90
   14df0:	ldr	r0, [r5, #12]
   14df4:	adds	r2, r2, #1
   14df8:	adc	r3, r3, #0
   14dfc:	strd	r2, [r4, #144]	; 0x90
   14e00:	bl	14e28 <free_node@@Base>
   14e04:	ldrd	r2, [r4, #152]	; 0x98
   14e08:	mov	r0, r5
   14e0c:	adds	r2, r2, #1
   14e10:	adc	r3, r3, #0
   14e14:	strd	r2, [r4, #152]	; 0x98
   14e18:	pop	{r4, r5, r6, lr}
   14e1c:	b	11870 <free@plt>
   14e20:	andeq	r6, r1, ip, lsl #9
   14e24:	andeq	r6, r1, r4, asr #8

00014e28 <free_node@@Base>:
   14e28:	ldr	ip, [pc, #420]	; 14fd4 <free_node@@Base+0x1ac>
   14e2c:	ldr	r3, [r0]
   14e30:	push	{r4, r5, r6, lr}
   14e34:	add	ip, pc, ip
   14e38:	cmp	r3, #5
   14e3c:	addls	pc, pc, r3, lsl #2
   14e40:	b	14f80 <free_node@@Base+0x158>
   14e44:	b	14e8c <free_node@@Base+0x64>
   14e48:	b	14ec0 <free_node@@Base+0x98>
   14e4c:	b	14ef0 <free_node@@Base+0xc8>
   14e50:	b	14f20 <free_node@@Base+0xf8>
   14e54:	b	14f50 <free_node@@Base+0x128>
   14e58:	b	14e5c <free_node@@Base+0x34>
   14e5c:	ldr	r4, [pc, #372]	; 14fd8 <free_node@@Base+0x1b0>
   14e60:	add	r4, pc, r4
   14e64:	ldrd	r2, [r4, #208]	; 0xd0
   14e68:	adds	r2, r2, #1
   14e6c:	adc	r3, r3, #0
   14e70:	strd	r2, [r4, #208]	; 0xd0
   14e74:	bl	14d8c <free_node_boolean_operator@@Base>
   14e78:	ldrd	r2, [r4, #248]	; 0xf8
   14e7c:	adds	r2, r2, #1
   14e80:	adc	r3, r3, #0
   14e84:	strd	r2, [r4, #248]	; 0xf8
   14e88:	pop	{r4, r5, r6, pc}
   14e8c:	ldr	r4, [pc, #328]	; 14fdc <free_node@@Base+0x1b4>
   14e90:	add	r4, pc, r4
   14e94:	add	r4, r4, #272	; 0x110
   14e98:	ldrd	r2, [r4, #-104]	; 0xffffff98
   14e9c:	adds	r2, r2, #1
   14ea0:	adc	r3, r3, #0
   14ea4:	strd	r2, [r4, #-104]	; 0xffffff98
   14ea8:	bl	151ec <free_node_id@@Base>
   14eac:	ldrd	r2, [r4, #-8]
   14eb0:	adds	r2, r2, #1
   14eb4:	adc	r3, r3, #0
   14eb8:	strd	r2, [r4, #-8]
   14ebc:	pop	{r4, r5, r6, pc}
   14ec0:	ldr	r4, [pc, #280]	; 14fe0 <free_node@@Base+0x1b8>
   14ec4:	add	r4, pc, r4
   14ec8:	ldrd	r2, [r4, #176]	; 0xb0
   14ecc:	adds	r2, r2, #1
   14ed0:	adc	r3, r3, #0
   14ed4:	strd	r2, [r4, #176]	; 0xb0
   14ed8:	bl	15188 <free_node_int@@Base>
   14edc:	ldrd	r2, [r4, #216]	; 0xd8
   14ee0:	adds	r2, r2, #1
   14ee4:	adc	r3, r3, #0
   14ee8:	strd	r2, [r4, #216]	; 0xd8
   14eec:	pop	{r4, r5, r6, pc}
   14ef0:	ldr	r4, [pc, #236]	; 14fe4 <free_node@@Base+0x1bc>
   14ef4:	add	r4, pc, r4
   14ef8:	ldrd	r2, [r4, #184]	; 0xb8
   14efc:	adds	r2, r2, #1
   14f00:	adc	r3, r3, #0
   14f04:	strd	r2, [r4, #184]	; 0xb8
   14f08:	bl	1511c <free_node_function@@Base>
   14f0c:	ldrd	r2, [r4, #224]	; 0xe0
   14f10:	adds	r2, r2, #1
   14f14:	adc	r3, r3, #0
   14f18:	strd	r2, [r4, #224]	; 0xe0
   14f1c:	pop	{r4, r5, r6, pc}
   14f20:	ldr	r4, [pc, #192]	; 14fe8 <free_node@@Base+0x1c0>
   14f24:	add	r4, pc, r4
   14f28:	ldrd	r2, [r4, #192]	; 0xc0
   14f2c:	adds	r2, r2, #1
   14f30:	adc	r3, r3, #0
   14f34:	strd	r2, [r4, #192]	; 0xc0
   14f38:	bl	150b8 <free_node_return@@Base>
   14f3c:	ldrd	r2, [r4, #232]	; 0xe8
   14f40:	adds	r2, r2, #1
   14f44:	adc	r3, r3, #0
   14f48:	strd	r2, [r4, #232]	; 0xe8
   14f4c:	pop	{r4, r5, r6, pc}
   14f50:	ldr	r4, [pc, #148]	; 14fec <free_node@@Base+0x1c4>
   14f54:	add	r4, pc, r4
   14f58:	ldrd	r2, [r4, #200]	; 0xc8
   14f5c:	adds	r2, r2, #1
   14f60:	adc	r3, r3, #0
   14f64:	strd	r2, [r4, #200]	; 0xc8
   14f68:	bl	14ffc <free_node_if@@Base>
   14f6c:	ldrd	r2, [r4, #240]	; 0xf0
   14f70:	adds	r2, r2, #1
   14f74:	adc	r3, r3, #0
   14f78:	strd	r2, [r4, #240]	; 0xf0
   14f7c:	pop	{r4, r5, r6, pc}
   14f80:	ldr	r6, [pc, #104]	; 14ff0 <free_node@@Base+0x1c8>
   14f84:	ldr	r3, [pc, #104]	; 14ff4 <free_node@@Base+0x1cc>
   14f88:	add	r6, pc, r6
   14f8c:	ldr	r0, [pc, #100]	; 14ff8 <free_node@@Base+0x1d0>
   14f90:	ldrd	r4, [r6, #160]	; 0xa0
   14f94:	add	r6, r6, #256	; 0x100
   14f98:	mov	r2, #31
   14f9c:	adds	r4, r4, #1
   14fa0:	adc	r5, r5, #0
   14fa4:	mov	r1, #1
   14fa8:	strd	r4, [r6, #-96]	; 0xffffffa0
   14fac:	ldr	r3, [ip, r3]
   14fb0:	add	r0, pc, r0
   14fb4:	ldr	r3, [r3]
   14fb8:	bl	11894 <fwrite@plt>
   14fbc:	ldrd	r2, [r6]
   14fc0:	mov	r0, #1
   14fc4:	adds	r2, r2, #1
   14fc8:	adc	r3, r3, #0
   14fcc:	strd	r2, [r6]
   14fd0:	bl	11918 <exit@plt>
   14fd4:	andeq	r5, r1, r4, asr #3
   14fd8:	andeq	r6, r1, r8, asr #7
   14fdc:	muleq	r1, r8, r3
   14fe0:	andeq	r6, r1, r4, ror #6
   14fe4:	andeq	r6, r1, r4, lsr r3
   14fe8:	andeq	r6, r1, r4, lsl #6
   14fec:	ldrdeq	r6, [r1], -r4
   14ff0:	andeq	r6, r1, r0, lsr #5
   14ff4:	andeq	r0, r0, r4, lsr #1
   14ff8:	andeq	r3, r0, r4, lsr #25

00014ffc <free_node_if@@Base>:
   14ffc:	push	{r4, r5, r6, lr}
   15000:	mov	r5, r0
   15004:	ldr	r4, [pc, #164]	; 150b0 <free_node_if@@Base+0xb4>
   15008:	ldr	r0, [r0, #4]
   1500c:	add	r4, pc, r4
   15010:	add	r4, r4, #272	; 0x110
   15014:	ldrd	r2, [r4]
   15018:	adds	r2, r2, #1
   1501c:	adc	r3, r3, #0
   15020:	cmp	r0, #0
   15024:	strd	r2, [r4]
   15028:	beq	15050 <free_node_if@@Base+0x54>
   1502c:	ldrd	r2, [r4, #8]
   15030:	adds	r2, r2, #1
   15034:	adc	r3, r3, #0
   15038:	strd	r2, [r4, #8]
   1503c:	bl	14e28 <free_node@@Base>
   15040:	ldrd	r2, [r4, #16]
   15044:	adds	r2, r2, #1
   15048:	adc	r3, r3, #0
   1504c:	strd	r2, [r4, #16]
   15050:	ldr	r4, [pc, #92]	; 150b4 <free_node_if@@Base+0xb8>
   15054:	ldr	r0, [r5, #8]
   15058:	add	r4, pc, r4
   1505c:	add	r4, r4, #272	; 0x110
   15060:	bl	14e28 <free_node@@Base>
   15064:	ldrd	r2, [r4, #24]
   15068:	ldr	r0, [r5, #12]
   1506c:	adds	r2, r2, #1
   15070:	adc	r3, r3, #0
   15074:	strd	r2, [r4, #24]
   15078:	bl	14e28 <free_node@@Base>
   1507c:	ldrd	r2, [r4, #32]
   15080:	ldr	r0, [r5, #16]
   15084:	adds	r2, r2, #1
   15088:	adc	r3, r3, #0
   1508c:	strd	r2, [r4, #32]
   15090:	bl	14e28 <free_node@@Base>
   15094:	ldrd	r2, [r4, #40]	; 0x28
   15098:	mov	r0, r5
   1509c:	adds	r2, r2, #1
   150a0:	adc	r3, r3, #0
   150a4:	strd	r2, [r4, #40]	; 0x28
   150a8:	pop	{r4, r5, r6, lr}
   150ac:	b	11870 <free@plt>
   150b0:	andeq	r6, r1, ip, lsl r2
   150b4:	ldrdeq	r6, [r1], -r0

000150b8 <free_node_return@@Base>:
   150b8:	push	{r4, r5, r6, lr}
   150bc:	mov	r5, r0
   150c0:	ldr	r4, [pc, #80]	; 15118 <free_node_return@@Base+0x60>
   150c4:	ldr	r0, [r0, #4]
   150c8:	add	r4, pc, r4
   150cc:	add	r4, r4, #320	; 0x140
   150d0:	ldrd	r2, [r4]
   150d4:	adds	r2, r2, #1
   150d8:	adc	r3, r3, #0
   150dc:	cmp	r0, #0
   150e0:	strd	r2, [r4]
   150e4:	beq	1510c <free_node_return@@Base+0x54>
   150e8:	ldrd	r2, [r4, #8]
   150ec:	adds	r2, r2, #1
   150f0:	adc	r3, r3, #0
   150f4:	strd	r2, [r4, #8]
   150f8:	bl	14e28 <free_node@@Base>
   150fc:	ldrd	r2, [r4, #16]
   15100:	adds	r2, r2, #1
   15104:	adc	r3, r3, #0
   15108:	strd	r2, [r4, #16]
   1510c:	mov	r0, r5
   15110:	pop	{r4, r5, r6, lr}
   15114:	b	11870 <free@plt>
   15118:	andeq	r6, r1, r0, ror #2

0001511c <free_node_function@@Base>:
   1511c:	push	{r4, r5, r6, lr}
   15120:	mov	r5, r0
   15124:	ldr	r4, [pc, #88]	; 15184 <free_node_function@@Base+0x68>
   15128:	ldr	r0, [r0, #4]
   1512c:	add	r4, pc, r4
   15130:	add	r4, r4, #352	; 0x160
   15134:	ldrd	r2, [r4, #-8]
   15138:	adds	r2, r2, #1
   1513c:	adc	r3, r3, #0
   15140:	cmp	r0, #0
   15144:	strd	r2, [r4, #-8]
   15148:	beq	15170 <free_node_function@@Base+0x54>
   1514c:	ldrd	r2, [r4]
   15150:	adds	r2, r2, #1
   15154:	adc	r3, r3, #0
   15158:	strd	r2, [r4]
   1515c:	bl	14e28 <free_node@@Base>
   15160:	ldrd	r2, [r4, #8]
   15164:	adds	r2, r2, #1
   15168:	adc	r3, r3, #0
   1516c:	strd	r2, [r4, #8]
   15170:	ldr	r0, [r5, #8]
   15174:	bl	11870 <free@plt>
   15178:	mov	r0, r5
   1517c:	pop	{r4, r5, r6, lr}
   15180:	b	11870 <free@plt>
   15184:	strdeq	r6, [r1], -ip

00015188 <free_node_int@@Base>:
   15188:	push	{r4, r5, r6, lr}
   1518c:	mov	r5, r0
   15190:	ldr	r4, [pc, #80]	; 151e8 <free_node_int@@Base+0x60>
   15194:	ldr	r0, [r0, #4]
   15198:	add	r4, pc, r4
   1519c:	add	r4, r4, #368	; 0x170
   151a0:	ldrd	r2, [r4]
   151a4:	adds	r2, r2, #1
   151a8:	adc	r3, r3, #0
   151ac:	cmp	r0, #0
   151b0:	strd	r2, [r4]
   151b4:	beq	151dc <free_node_int@@Base+0x54>
   151b8:	ldrd	r2, [r4, #8]
   151bc:	adds	r2, r2, #1
   151c0:	adc	r3, r3, #0
   151c4:	strd	r2, [r4, #8]
   151c8:	bl	14e28 <free_node@@Base>
   151cc:	ldrd	r2, [r4, #16]
   151d0:	adds	r2, r2, #1
   151d4:	adc	r3, r3, #0
   151d8:	strd	r2, [r4, #16]
   151dc:	mov	r0, r5
   151e0:	pop	{r4, r5, r6, lr}
   151e4:	b	11870 <free@plt>
   151e8:	muleq	r1, r0, r0

000151ec <free_node_id@@Base>:
   151ec:	push	{r4, r5, r6, lr}
   151f0:	mov	r5, r0
   151f4:	ldr	r4, [pc, #80]	; 1524c <free_node_id@@Base+0x60>
   151f8:	ldr	r0, [r0, #4]
   151fc:	add	r4, pc, r4
   15200:	add	r4, r4, #400	; 0x190
   15204:	ldrd	r2, [r4, #-8]
   15208:	adds	r2, r2, #1
   1520c:	adc	r3, r3, #0
   15210:	cmp	r0, #0
   15214:	strd	r2, [r4, #-8]
   15218:	beq	15240 <free_node_id@@Base+0x54>
   1521c:	ldrd	r2, [r4]
   15220:	adds	r2, r2, #1
   15224:	adc	r3, r3, #0
   15228:	strd	r2, [r4]
   1522c:	bl	14e28 <free_node@@Base>
   15230:	ldrd	r2, [r4, #8]
   15234:	adds	r2, r2, #1
   15238:	adc	r3, r3, #0
   1523c:	strd	r2, [r4, #8]
   15240:	mov	r0, r5
   15244:	pop	{r4, r5, r6, lr}
   15248:	b	11870 <free@plt>
   1524c:	andeq	r6, r1, ip, lsr #32

00015250 <get_boolean_op_value@@Base>:
   15250:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15254:	mov	r1, #2
   15258:	ldr	r4, [pc, #592]	; 154b0 <get_boolean_op_value@@Base+0x260>
   1525c:	ldr	r5, [r0, #4]
   15260:	add	r4, pc, r4
   15264:	add	r4, r4, #416	; 0x1a0
   15268:	mov	r0, r5
   1526c:	ldrd	r2, [r4]
   15270:	ldr	r6, [pc, #572]	; 154b4 <get_boolean_op_value@@Base+0x264>
   15274:	adds	r2, r2, #1
   15278:	adc	r3, r3, #0
   1527c:	add	r6, pc, r6
   15280:	strd	r2, [r4]
   15284:	bl	11990 <strnlen@plt>
   15288:	cmp	r0, #2
   1528c:	beq	15300 <get_boolean_op_value@@Base+0xb0>
   15290:	ldrd	r2, [r4, #16]
   15294:	ldrb	r1, [r5]
   15298:	adds	r2, r2, #1
   1529c:	adc	r3, r3, #0
   152a0:	cmp	r1, #60	; 0x3c
   152a4:	strd	r2, [r4, #16]
   152a8:	beq	153b0 <get_boolean_op_value@@Base+0x160>
   152ac:	cmp	r1, #62	; 0x3e
   152b0:	beq	15390 <get_boolean_op_value@@Base+0x140>
   152b4:	cmp	r1, #33	; 0x21
   152b8:	beq	153a8 <get_boolean_op_value@@Base+0x158>
   152bc:	ldrd	r8, [r4, #80]	; 0x50
   152c0:	ldr	r3, [pc, #496]	; 154b8 <get_boolean_op_value@@Base+0x268>
   152c4:	ldr	r1, [pc, #496]	; 154bc <get_boolean_op_value@@Base+0x26c>
   152c8:	adds	r8, r8, #1
   152cc:	adc	r9, r9, #0
   152d0:	mov	r2, r5
   152d4:	strd	r8, [r4, #80]	; 0x50
   152d8:	ldr	r3, [r6, r3]
   152dc:	add	r1, pc, r1
   152e0:	ldr	r0, [r3]
   152e4:	bl	11930 <fprintf@plt>
   152e8:	ldrd	r2, [r4, #104]	; 0x68
   152ec:	mov	r0, #1
   152f0:	adds	r2, r2, #1
   152f4:	adc	r3, r3, #0
   152f8:	strd	r2, [r4, #104]	; 0x68
   152fc:	bl	11918 <exit@plt>
   15300:	ldrd	r8, [r4, #8]
   15304:	ldr	r1, [pc, #436]	; 154c0 <get_boolean_op_value@@Base+0x270>
   15308:	mov	r2, r0
   1530c:	adds	r8, r8, #1
   15310:	adc	r9, r9, #0
   15314:	mov	r7, r0
   15318:	add	r1, pc, r1
   1531c:	mov	r0, r5
   15320:	strd	r8, [r4, #8]
   15324:	bl	119c0 <strncmp@plt>
   15328:	cmp	r0, #0
   1532c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15330:	ldrd	r8, [r4, #24]
   15334:	ldr	r1, [pc, #392]	; 154c4 <get_boolean_op_value@@Base+0x274>
   15338:	mov	r2, r7
   1533c:	adds	r8, r8, #1
   15340:	adc	r9, r9, #0
   15344:	add	r1, pc, r1
   15348:	mov	r0, r5
   1534c:	strd	r8, [r4, #24]
   15350:	bl	119c0 <strncmp@plt>
   15354:	cmp	r0, #0
   15358:	beq	153c8 <get_boolean_op_value@@Base+0x178>
   1535c:	ldrd	r8, [r4, #32]
   15360:	ldr	r1, [pc, #352]	; 154c8 <get_boolean_op_value@@Base+0x278>
   15364:	mov	r2, r7
   15368:	adds	r8, r8, #1
   1536c:	adc	r9, r9, #0
   15370:	add	r1, pc, r1
   15374:	mov	r0, r5
   15378:	strd	r8, [r4, #32]
   1537c:	bl	119c0 <strncmp@plt>
   15380:	cmp	r0, #0
   15384:	bne	153d0 <get_boolean_op_value@@Base+0x180>
   15388:	mov	r0, r7
   1538c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15390:	ldrd	r2, [r4, #96]	; 0x60
   15394:	mov	r0, #7
   15398:	adds	r2, r2, #1
   1539c:	adc	r3, r3, #0
   153a0:	strd	r2, [r4, #96]	; 0x60
   153a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   153a8:	mov	r0, #8
   153ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   153b0:	ldrd	r2, [r4, #88]	; 0x58
   153b4:	mov	r0, #6
   153b8:	adds	r2, r2, #1
   153bc:	adc	r3, r3, #0
   153c0:	strd	r2, [r4, #88]	; 0x58
   153c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   153c8:	mov	r0, #1
   153cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   153d0:	ldrd	r8, [r4, #40]	; 0x28
   153d4:	ldr	r1, [pc, #240]	; 154cc <get_boolean_op_value@@Base+0x27c>
   153d8:	mov	r2, r7
   153dc:	adds	r8, r8, #1
   153e0:	adc	r9, r9, #0
   153e4:	add	r1, pc, r1
   153e8:	mov	r0, r5
   153ec:	strd	r8, [r4, #40]	; 0x28
   153f0:	bl	119c0 <strncmp@plt>
   153f4:	cmp	r0, #0
   153f8:	bne	15404 <get_boolean_op_value@@Base+0x1b4>
   153fc:	mov	r0, #3
   15400:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15404:	ldrd	r8, [r4, #48]	; 0x30
   15408:	ldr	r1, [pc, #192]	; 154d0 <get_boolean_op_value@@Base+0x280>
   1540c:	mov	r2, r7
   15410:	adds	r8, r8, #1
   15414:	adc	r9, r9, #0
   15418:	add	r1, pc, r1
   1541c:	mov	r0, r5
   15420:	strd	r8, [r4, #48]	; 0x30
   15424:	bl	119c0 <strncmp@plt>
   15428:	cmp	r0, #0
   1542c:	bne	15438 <get_boolean_op_value@@Base+0x1e8>
   15430:	mov	r0, #4
   15434:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15438:	ldrd	r8, [r4, #56]	; 0x38
   1543c:	ldr	r1, [pc, #144]	; 154d4 <get_boolean_op_value@@Base+0x284>
   15440:	mov	r2, r7
   15444:	adds	r8, r8, #1
   15448:	adc	r9, r9, #0
   1544c:	add	r1, pc, r1
   15450:	mov	r0, r5
   15454:	strd	r8, [r4, #56]	; 0x38
   15458:	bl	119c0 <strncmp@plt>
   1545c:	cmp	r0, #0
   15460:	bne	1546c <get_boolean_op_value@@Base+0x21c>
   15464:	mov	r0, #5
   15468:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1546c:	ldrd	r8, [r4, #64]	; 0x40
   15470:	ldr	r3, [pc, #64]	; 154b8 <get_boolean_op_value@@Base+0x268>
   15474:	ldr	r1, [pc, #92]	; 154d8 <get_boolean_op_value@@Base+0x288>
   15478:	adds	r8, r8, #1
   1547c:	adc	r9, r9, #0
   15480:	mov	r2, r5
   15484:	strd	r8, [r4, #64]	; 0x40
   15488:	ldr	r3, [r6, r3]
   1548c:	add	r1, pc, r1
   15490:	ldr	r0, [r3]
   15494:	bl	11930 <fprintf@plt>
   15498:	ldrd	r2, [r4, #72]	; 0x48
   1549c:	mov	r0, #1
   154a0:	adds	r2, r2, #1
   154a4:	adc	r3, r3, #0
   154a8:	strd	r2, [r4, #72]	; 0x48
   154ac:	bl	11918 <exit@plt>
   154b0:	andeq	r5, r1, r8, asr #31
   154b4:	andeq	r4, r1, ip, ror sp
   154b8:	andeq	r0, r0, r4, lsr #1
   154bc:			; <UNDEFINED> instruction: 0x000039b0
   154c0:	andeq	r3, r0, ip, asr r9
   154c4:	andeq	r3, r0, r4, lsr r9
   154c8:	andeq	r3, r0, ip, lsl #18
   154cc:	muleq	r0, ip, r8
   154d0:	andeq	r3, r0, ip, ror #16
   154d4:	andeq	r3, r0, ip, lsr r8
   154d8:	andeq	r3, r0, r0, lsl #16

000154dc <init_grammar@@Base>:
   154dc:	ldr	ip, [pc, #24]	; 154fc <init_grammar@@Base+0x20>
   154e0:	str	r1, [r0]
   154e4:	add	ip, pc, ip
   154e8:	ldrd	r2, [ip]
   154ec:	adds	r2, r2, #1
   154f0:	adc	r3, r3, #0
   154f4:	strd	r2, [ip]
   154f8:	bx	lr
   154fc:	andeq	r5, r1, r4, asr pc

00015500 <destroy_grammar@@Base>:
   15500:	ldr	r1, [pc, #20]	; 1551c <destroy_grammar@@Base+0x1c>
   15504:	add	r1, pc, r1
   15508:	ldrd	r2, [r1, #8]
   1550c:	adds	r2, r2, #1
   15510:	adc	r3, r3, #0
   15514:	strd	r2, [r1, #8]
   15518:	bx	lr
   1551c:	andeq	r5, r1, r4, lsr pc

00015520 <read_return_expression@@Base>:
   15520:	push	{r4, r5, r6, r7, r8, lr}
   15524:	mov	r5, r0
   15528:	ldr	r4, [pc, #260]	; 15634 <read_return_expression@@Base+0x114>
   1552c:	ldr	r0, [r0]
   15530:	add	r4, pc, r4
   15534:	ldrd	r2, [r4, #16]
   15538:	adds	r2, r2, #1
   1553c:	adc	r3, r3, #0
   15540:	strd	r2, [r4, #16]
   15544:	bl	12284 <next@@Base>
   15548:	ldrd	r2, [r4, #24]
   1554c:	adds	r2, r2, #1
   15550:	adc	r3, r3, #0
   15554:	strd	r2, [r4, #24]
   15558:	ldr	r1, [r0]
   1555c:	cmp	r1, #1
   15560:	bne	15628 <read_return_expression@@Base+0x108>
   15564:	ldrd	r2, [r4, #32]
   15568:	mov	r6, r0
   1556c:	mov	r0, #12
   15570:	adds	r2, r2, #1
   15574:	adc	r3, r3, #0
   15578:	strd	r2, [r4, #32]
   1557c:	bl	118d0 <malloc@plt>
   15580:	ldr	r1, [r6, #4]
   15584:	mov	r7, r0
   15588:	bl	14bf4 <init_node_int@@Base>
   1558c:	ldrd	r2, [r4, #40]	; 0x28
   15590:	mov	r0, r6
   15594:	adds	r2, r2, #1
   15598:	adc	r3, r3, #0
   1559c:	strd	r2, [r4, #40]	; 0x28
   155a0:	bl	14994 <free_token_int_value@@Base>
   155a4:	ldrd	r2, [r4, #48]	; 0x30
   155a8:	mov	r0, #12
   155ac:	adds	r2, r2, #1
   155b0:	adc	r3, r3, #0
   155b4:	strd	r2, [r4, #48]	; 0x30
   155b8:	bl	118d0 <malloc@plt>
   155bc:	mov	r1, r7
   155c0:	mov	r6, r0
   155c4:	bl	14c8c <init_node_return@@Base>
   155c8:	ldrd	r2, [r4, #56]	; 0x38
   155cc:	ldr	r0, [r5]
   155d0:	adds	r2, r2, #1
   155d4:	adc	r3, r3, #0
   155d8:	strd	r2, [r4, #56]	; 0x38
   155dc:	bl	12284 <next@@Base>
   155e0:	ldrd	r2, [r4, #64]	; 0x40
   155e4:	adds	r2, r2, #1
   155e8:	adc	r3, r3, #0
   155ec:	strd	r2, [r4, #64]	; 0x40
   155f0:	ldr	r3, [r0]
   155f4:	cmp	r3, #8
   155f8:	bne	15628 <read_return_expression@@Base+0x108>
   155fc:	ldrd	r2, [r4, #72]	; 0x48
   15600:	adds	r2, r2, #1
   15604:	adc	r3, r3, #0
   15608:	strd	r2, [r4, #72]	; 0x48
   1560c:	bl	14a74 <free_token_semicolon@@Base>
   15610:	ldrd	r2, [r4, #80]	; 0x50
   15614:	mov	r0, r6
   15618:	adds	r2, r2, #1
   1561c:	adc	r3, r3, #0
   15620:	strd	r2, [r4, #80]	; 0x50
   15624:	pop	{r4, r5, r6, r7, r8, pc}
   15628:	mov	r6, #0
   1562c:	mov	r0, r6
   15630:	pop	{r4, r5, r6, r7, r8, pc}
   15634:	andeq	r5, r1, r8, lsl #30

00015638 <read_boolean_unary_expression@@Base>:
   15638:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1563c:	mov	r6, r0
   15640:	ldr	r4, [pc, #364]	; 157b4 <read_boolean_unary_expression@@Base+0x17c>
   15644:	mov	r0, #20
   15648:	add	r4, pc, r4
   1564c:	ldrd	r2, [r4, #88]	; 0x58
   15650:	adds	r2, r2, #1
   15654:	adc	r3, r3, #0
   15658:	strd	r2, [r4, #88]	; 0x58
   1565c:	bl	118d0 <malloc@plt>
   15660:	mov	r5, r0
   15664:	ldr	r0, [r6]
   15668:	bl	12284 <next@@Base>
   1566c:	ldr	r7, [r0]
   15670:	cmp	r7, #12
   15674:	bne	1574c <read_boolean_unary_expression@@Base+0x114>
   15678:	ldrd	r2, [r4, #104]	; 0x68
   1567c:	mov	r9, r0
   15680:	adds	r2, r2, #1
   15684:	adc	r3, r3, #0
   15688:	strd	r2, [r4, #104]	; 0x68
   1568c:	bl	15250 <get_boolean_op_value@@Base>
   15690:	ldrd	r2, [r4, #120]	; 0x78
   15694:	adds	r2, r2, #1
   15698:	adc	r3, r3, #0
   1569c:	strd	r2, [r4, #120]	; 0x78
   156a0:	mov	r8, r0
   156a4:	mov	r0, r9
   156a8:	bl	14af4 <free_token_boolean_op@@Base>
   156ac:	ldrd	r2, [r4, #128]	; 0x80
   156b0:	ldr	r0, [r6]
   156b4:	adds	r2, r2, #1
   156b8:	adc	r3, r3, #0
   156bc:	strd	r2, [r4, #128]	; 0x80
   156c0:	bl	12284 <next@@Base>
   156c4:	ldr	r3, [r0]
   156c8:	mov	r9, r0
   156cc:	cmp	r3, #1
   156d0:	bne	15780 <read_boolean_unary_expression@@Base+0x148>
   156d4:	ldrd	r2, [r4, #144]	; 0x90
   156d8:	mov	r0, r7
   156dc:	adds	r2, r2, #1
   156e0:	adc	r3, r3, #0
   156e4:	strd	r2, [r4, #144]	; 0x90
   156e8:	bl	118d0 <malloc@plt>
   156ec:	ldr	r1, [r9, #4]
   156f0:	mov	sl, r0
   156f4:	bl	14bf4 <init_node_int@@Base>
   156f8:	ldrd	r6, [r4, #160]	; 0xa0
   156fc:	mov	r0, r9
   15700:	adds	r6, r6, #1
   15704:	adc	r7, r7, #0
   15708:	strd	r6, [r4, #160]	; 0xa0
   1570c:	bl	14994 <free_token_int_value@@Base>
   15710:	ldrd	r6, [r4, #168]	; 0xa8
   15714:	mov	r2, sl
   15718:	mov	r0, r5
   1571c:	adds	r6, r6, #1
   15720:	adc	r7, r7, #0
   15724:	mov	r1, r8
   15728:	mov	r3, #0
   1572c:	strd	r6, [r4, #168]	; 0xa8
   15730:	bl	14d2c <init_node_boolean_operator@@Base>
   15734:	ldrd	r2, [r4, #176]	; 0xb0
   15738:	mov	r0, r5
   1573c:	adds	r2, r2, #1
   15740:	adc	r3, r3, #0
   15744:	strd	r2, [r4, #176]	; 0xb0
   15748:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1574c:	ldrd	r2, [r4, #96]	; 0x60
   15750:	mov	r0, r5
   15754:	mov	r5, #0
   15758:	adds	r2, r2, #1
   1575c:	adc	r3, r3, #0
   15760:	strd	r2, [r4, #96]	; 0x60
   15764:	bl	14d8c <free_node_boolean_operator@@Base>
   15768:	ldrd	r2, [r4, #112]	; 0x70
   1576c:	mov	r0, r5
   15770:	adds	r2, r2, #1
   15774:	adc	r3, r3, #0
   15778:	strd	r2, [r4, #112]	; 0x70
   1577c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15780:	ldrd	r2, [r4, #136]	; 0x88
   15784:	mov	r0, r5
   15788:	mov	r5, #0
   1578c:	adds	r2, r2, #1
   15790:	adc	r3, r3, #0
   15794:	strd	r2, [r4, #136]	; 0x88
   15798:	bl	14d8c <free_node_boolean_operator@@Base>
   1579c:	ldrd	r2, [r4, #152]	; 0x98
   157a0:	mov	r0, r5
   157a4:	adds	r2, r2, #1
   157a8:	adc	r3, r3, #0
   157ac:	strd	r2, [r4, #152]	; 0x98
   157b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   157b4:	strdeq	r5, [r1], -r0

000157b8 <read_boolean_binary_expression@@Base>:
   157b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   157bc:	mov	r5, r0
   157c0:	ldr	r4, [pc, #588]	; 15a14 <read_boolean_binary_expression@@Base+0x25c>
   157c4:	ldr	r0, [r0]
   157c8:	add	r4, pc, r4
   157cc:	ldrd	r2, [r4, #184]	; 0xb8
   157d0:	adds	r2, r2, #1
   157d4:	adc	r3, r3, #0
   157d8:	strd	r2, [r4, #184]	; 0xb8
   157dc:	bl	12284 <next@@Base>
   157e0:	ldr	r1, [r0]
   157e4:	mov	r7, r0
   157e8:	cmp	r1, #1
   157ec:	beq	1585c <read_boolean_binary_expression@@Base+0xa4>
   157f0:	ldrd	r2, [r4, #192]	; 0xc0
   157f4:	adds	r2, r2, #1
   157f8:	adc	r3, r3, #0
   157fc:	cmp	r1, #12
   15800:	strd	r2, [r4, #192]	; 0xc0
   15804:	movne	r5, #0
   15808:	bne	15854 <read_boolean_binary_expression@@Base+0x9c>
   1580c:	ldrd	r2, [r4, #208]	; 0xd0
   15810:	mov	r1, r0
   15814:	ldr	r0, [r5]
   15818:	adds	r2, r2, #1
   1581c:	adc	r3, r3, #0
   15820:	strd	r2, [r4, #208]	; 0xd0
   15824:	bl	12414 <push_back@@Base>
   15828:	ldrd	r2, [r4, #216]	; 0xd8
   1582c:	mov	r0, r5
   15830:	adds	r2, r2, #1
   15834:	adc	r3, r3, #0
   15838:	strd	r2, [r4, #216]	; 0xd8
   1583c:	bl	15638 <read_boolean_unary_expression@@Base>
   15840:	ldrd	r2, [r4, #224]	; 0xe0
   15844:	adds	r2, r2, #1
   15848:	adc	r3, r3, #0
   1584c:	strd	r2, [r4, #224]	; 0xe0
   15850:	mov	r5, r0
   15854:	mov	r0, r5
   15858:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1585c:	ldrd	r2, [r4, #200]	; 0xc8
   15860:	mov	r0, #12
   15864:	adds	r2, r2, #1
   15868:	adc	r3, r3, #0
   1586c:	strd	r2, [r4, #200]	; 0xc8
   15870:	bl	118d0 <malloc@plt>
   15874:	ldr	r1, [r7, #4]
   15878:	mov	r6, r0
   1587c:	bl	14bf4 <init_node_int@@Base>
   15880:	ldrd	r2, [r4, #232]	; 0xe8
   15884:	mov	r0, r7
   15888:	adds	r2, r2, #1
   1588c:	adc	r3, r3, #0
   15890:	strd	r2, [r4, #232]	; 0xe8
   15894:	bl	14994 <free_token_int_value@@Base>
   15898:	ldrd	r2, [r4, #240]	; 0xf0
   1589c:	ldr	r0, [r5]
   158a0:	adds	r2, r2, #1
   158a4:	adc	r3, r3, #0
   158a8:	strd	r2, [r4, #240]	; 0xf0
   158ac:	bl	12284 <next@@Base>
   158b0:	ldr	r8, [r0]
   158b4:	mov	r9, r0
   158b8:	cmp	r8, #12
   158bc:	bne	159ac <read_boolean_binary_expression@@Base+0x1f4>
   158c0:	add	r1, r4, #256	; 0x100
   158c4:	add	r7, r4, #288	; 0x120
   158c8:	ldrd	r2, [r1]
   158cc:	adds	r2, r2, #1
   158d0:	adc	r3, r3, #0
   158d4:	strd	r2, [r1]
   158d8:	bl	15250 <get_boolean_op_value@@Base>
   158dc:	add	r1, r4, #272	; 0x110
   158e0:	ldrd	r2, [r1]
   158e4:	adds	r2, r2, #1
   158e8:	adc	r3, r3, #0
   158ec:	strd	r2, [r1]
   158f0:	mov	sl, r0
   158f4:	mov	r0, r9
   158f8:	bl	14af4 <free_token_boolean_op@@Base>
   158fc:	ldrd	r2, [r7, #-8]
   15900:	ldr	r0, [r5]
   15904:	adds	r2, r2, #1
   15908:	adc	r3, r3, #0
   1590c:	strd	r2, [r7, #-8]
   15910:	bl	12284 <next@@Base>
   15914:	ldr	r3, [r0]
   15918:	mov	r9, r0
   1591c:	cmp	r3, #1
   15920:	bne	159e0 <read_boolean_binary_expression@@Base+0x228>
   15924:	add	r1, r4, #304	; 0x130
   15928:	mov	r0, r8
   1592c:	ldrd	r2, [r1, #-8]
   15930:	add	r5, r4, #320	; 0x140
   15934:	add	r4, r4, #336	; 0x150
   15938:	adds	r2, r2, #1
   1593c:	adc	r3, r3, #0
   15940:	strd	r2, [r1, #-8]
   15944:	bl	118d0 <malloc@plt>
   15948:	ldr	r1, [r9, #4]
   1594c:	mov	r7, r0
   15950:	bl	14bf4 <init_node_int@@Base>
   15954:	ldrd	r2, [r5, #-8]
   15958:	mov	r0, r9
   1595c:	adds	r2, r2, #1
   15960:	adc	r3, r3, #0
   15964:	strd	r2, [r5, #-8]
   15968:	bl	14994 <free_token_int_value@@Base>
   1596c:	ldrd	r2, [r5]
   15970:	mov	r0, #20
   15974:	adds	r2, r2, #1
   15978:	adc	r3, r3, #0
   1597c:	strd	r2, [r5]
   15980:	bl	118d0 <malloc@plt>
   15984:	mov	r3, r7
   15988:	mov	r2, r6
   1598c:	mov	r1, sl
   15990:	mov	r5, r0
   15994:	bl	14d2c <init_node_boolean_operator@@Base>
   15998:	ldrd	r2, [r4, #-8]
   1599c:	adds	r2, r2, #1
   159a0:	adc	r3, r3, #0
   159a4:	strd	r2, [r4, #-8]
   159a8:	b	15854 <read_boolean_binary_expression@@Base+0x9c>
   159ac:	ldrd	r2, [r4, #248]	; 0xf8
   159b0:	add	r4, r4, #272	; 0x110
   159b4:	mov	r0, r6
   159b8:	adds	r2, r2, #1
   159bc:	adc	r3, r3, #0
   159c0:	mov	r5, #0
   159c4:	strd	r2, [r4, #-24]	; 0xffffffe8
   159c8:	bl	14e28 <free_node@@Base>
   159cc:	ldrd	r2, [r4, #-8]
   159d0:	adds	r2, r2, #1
   159d4:	adc	r3, r3, #0
   159d8:	strd	r2, [r4, #-8]
   159dc:	b	15854 <read_boolean_binary_expression@@Base+0x9c>
   159e0:	ldrd	r2, [r7]
   159e4:	add	r4, r4, #304	; 0x130
   159e8:	mov	r0, r6
   159ec:	adds	r2, r2, #1
   159f0:	adc	r3, r3, #0
   159f4:	mov	r5, #0
   159f8:	strd	r2, [r7]
   159fc:	bl	14e28 <free_node@@Base>
   15a00:	ldrd	r2, [r4]
   15a04:	adds	r2, r2, #1
   15a08:	adc	r3, r3, #0
   15a0c:	strd	r2, [r4]
   15a10:	b	15854 <read_boolean_binary_expression@@Base+0x9c>
   15a14:	andeq	r5, r1, r0, ror ip

00015a18 <read_single_boolean_expression@@Base>:
   15a18:	cmp	r1, #0
   15a1c:	push	{r4, r5, r6, r7, r8, lr}
   15a20:	beq	15aa8 <read_single_boolean_expression@@Base+0x90>
   15a24:	mov	r6, r3
   15a28:	ldr	r3, [r2]
   15a2c:	mov	r5, r2
   15a30:	cmp	r3, #0
   15a34:	beq	15ae0 <read_single_boolean_expression@@Base+0xc8>
   15a38:	ldr	r4, [pc, #196]	; 15b04 <read_single_boolean_expression@@Base+0xec>
   15a3c:	add	r4, pc, r4
   15a40:	add	r4, r4, #336	; 0x150
   15a44:	ldrd	r2, [r4, #16]
   15a48:	adds	r2, r2, #1
   15a4c:	adc	r3, r3, #0
   15a50:	strd	r2, [r4, #16]
   15a54:	bl	157b8 <read_boolean_binary_expression@@Base>
   15a58:	ldrd	r2, [r4, #32]
   15a5c:	adds	r2, r2, #1
   15a60:	adc	r3, r3, #0
   15a64:	strd	r2, [r4, #32]
   15a68:	mov	r8, r0
   15a6c:	mov	r0, #20
   15a70:	bl	118d0 <malloc@plt>
   15a74:	mov	r3, r8
   15a78:	mov	r1, r6
   15a7c:	mov	r2, #0
   15a80:	mov	r7, r0
   15a84:	bl	14d2c <init_node_boolean_operator@@Base>
   15a88:	ldrd	r2, [r4, #40]	; 0x28
   15a8c:	mov	r1, #0
   15a90:	str	r1, [r5]
   15a94:	adds	r2, r2, #1
   15a98:	adc	r3, r3, #0
   15a9c:	strd	r2, [r4, #40]	; 0x28
   15aa0:	mov	r0, r7
   15aa4:	pop	{r4, r5, r6, r7, r8, pc}
   15aa8:	ldr	r4, [pc, #88]	; 15b08 <read_single_boolean_expression@@Base+0xf0>
   15aac:	add	r4, pc, r4
   15ab0:	add	r4, r4, #336	; 0x150
   15ab4:	ldrd	r2, [r4]
   15ab8:	adds	r2, r2, #1
   15abc:	adc	r3, r3, #0
   15ac0:	strd	r2, [r4]
   15ac4:	bl	157b8 <read_boolean_binary_expression@@Base>
   15ac8:	ldrd	r2, [r4, #8]
   15acc:	adds	r2, r2, #1
   15ad0:	adc	r3, r3, #0
   15ad4:	strd	r2, [r4, #8]
   15ad8:	mov	r7, r0
   15adc:	b	15aa0 <read_single_boolean_expression@@Base+0x88>
   15ae0:	ldr	r2, [pc, #36]	; 15b0c <read_single_boolean_expression@@Base+0xf4>
   15ae4:	ldr	r3, [r3, #4]
   15ae8:	add	r2, pc, r2
   15aec:	add	r3, r2, #336	; 0x150
   15af0:	ldrd	r0, [r3, #24]
   15af4:	adds	r0, r0, #1
   15af8:	adc	r1, r1, #0
   15afc:	strd	r0, [r3, #24]
   15b00:	udf	#0
   15b04:	strdeq	r5, [r1], -ip
   15b08:	andeq	r5, r1, ip, lsl #19
   15b0c:	andeq	r5, r1, r0, asr r9

00015b10 <read_boolean_expression@@Base>:
   15b10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b14:	sub	sp, sp, #12
   15b18:	ldr	r4, [pc, #452]	; 15ce4 <read_boolean_expression@@Base+0x1d4>
   15b1c:	mov	r8, r0
   15b20:	add	r4, pc, r4
   15b24:	add	r4, r4, #400	; 0x190
   15b28:	ldr	r0, [r0]
   15b2c:	ldrd	r2, [r4, #-8]
   15b30:	mov	r5, #0
   15b34:	str	r5, [sp, #4]
   15b38:	adds	r2, r2, #1
   15b3c:	adc	r3, r3, #0
   15b40:	ldr	fp, [pc, #416]	; 15ce8 <read_boolean_expression@@Base+0x1d8>
   15b44:	strd	r2, [r4, #-8]
   15b48:	bl	12284 <next@@Base>
   15b4c:	ldrd	r6, [r4]
   15b50:	add	fp, pc, fp
   15b54:	adds	r6, r6, #1
   15b58:	adc	r7, r7, #0
   15b5c:	strd	r6, [r4]
   15b60:	ldr	r3, [r0]
   15b64:	cmp	r3, #4
   15b68:	beq	15c1c <read_boolean_expression@@Base+0x10c>
   15b6c:	add	sl, sp, #4
   15b70:	ldrd	r6, [r4, #72]	; 0x48
   15b74:	adds	r6, r6, #1
   15b78:	adc	r7, r7, #0
   15b7c:	cmp	r3, #3
   15b80:	strd	r6, [r4, #72]	; 0x48
   15b84:	beq	15bd0 <read_boolean_expression@@Base+0xc0>
   15b88:	cmp	r3, #12
   15b8c:	beq	15cb0 <read_boolean_expression@@Base+0x1a0>
   15b90:	cmp	r3, #1
   15b94:	beq	15c58 <read_boolean_expression@@Base+0x148>
   15b98:	ldr	r3, [pc, #332]	; 15cec <read_boolean_expression@@Base+0x1dc>
   15b9c:	ldr	r0, [pc, #332]	; 15cf0 <read_boolean_expression@@Base+0x1e0>
   15ba0:	mov	r2, #33	; 0x21
   15ba4:	ldr	r3, [fp, r3]
   15ba8:	mov	r1, #1
   15bac:	add	r0, pc, r0
   15bb0:	ldr	r3, [r3]
   15bb4:	bl	11894 <fwrite@plt>
   15bb8:	ldrd	r2, [r4, #56]	; 0x38
   15bbc:	mov	r0, #1
   15bc0:	adds	r2, r2, #1
   15bc4:	adc	r3, r3, #0
   15bc8:	strd	r2, [r4, #56]	; 0x38
   15bcc:	bl	11918 <exit@plt>
   15bd0:	ldrd	r6, [r4, #16]
   15bd4:	mov	r1, r5
   15bd8:	mov	r3, r9
   15bdc:	adds	r6, r6, #1
   15be0:	adc	r7, r7, #0
   15be4:	mov	r2, sl
   15be8:	mov	r0, r8
   15bec:	strd	r6, [r4, #16]
   15bf0:	bl	15a18 <read_single_boolean_expression@@Base>
   15bf4:	ldrd	r2, [r4, #48]	; 0x30
   15bf8:	adds	r2, r2, #1
   15bfc:	adc	r3, r3, #0
   15c00:	strd	r2, [r4, #48]	; 0x30
   15c04:	mov	r5, r0
   15c08:	ldr	r0, [r8]
   15c0c:	bl	12284 <next@@Base>
   15c10:	ldr	r3, [r0]
   15c14:	cmp	r3, #4
   15c18:	bne	15b70 <read_boolean_expression@@Base+0x60>
   15c1c:	ldr	r4, [pc, #208]	; 15cf4 <read_boolean_expression@@Base+0x1e4>
   15c20:	add	r4, pc, r4
   15c24:	add	r4, r4, #400	; 0x190
   15c28:	ldrd	r2, [r4, #80]	; 0x50
   15c2c:	adds	r2, r2, #1
   15c30:	adc	r3, r3, #0
   15c34:	strd	r2, [r4, #80]	; 0x50
   15c38:	bl	149f4 <free_token_cpar@@Base>
   15c3c:	ldrd	r2, [r4, #88]	; 0x58
   15c40:	mov	r0, r5
   15c44:	adds	r2, r2, #1
   15c48:	adc	r3, r3, #0
   15c4c:	strd	r2, [r4, #88]	; 0x58
   15c50:	add	sp, sp, #12
   15c54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c58:	ldrd	r2, [r4, #8]
   15c5c:	mov	r1, r0
   15c60:	ldr	r0, [r8]
   15c64:	adds	r2, r2, #1
   15c68:	adc	r3, r3, #0
   15c6c:	strd	r2, [r4, #8]
   15c70:	bl	12414 <push_back@@Base>
   15c74:	ldrd	r6, [r4, #32]
   15c78:	mov	r1, r5
   15c7c:	mov	r3, r9
   15c80:	adds	r6, r6, #1
   15c84:	adc	r7, r7, #0
   15c88:	mov	r2, sl
   15c8c:	mov	r0, r8
   15c90:	strd	r6, [r4, #32]
   15c94:	bl	15a18 <read_single_boolean_expression@@Base>
   15c98:	ldrd	r2, [r4, #64]	; 0x40
   15c9c:	adds	r2, r2, #1
   15ca0:	adc	r3, r3, #0
   15ca4:	strd	r2, [r4, #64]	; 0x40
   15ca8:	mov	r5, r0
   15cac:	b	15c08 <read_boolean_expression@@Base+0xf8>
   15cb0:	ldrd	r2, [r4, #24]
   15cb4:	adds	r2, r2, #1
   15cb8:	adc	r3, r3, #0
   15cbc:	strd	r2, [r4, #24]
   15cc0:	bl	15250 <get_boolean_op_value@@Base>
   15cc4:	ldrd	r2, [r4, #40]	; 0x28
   15cc8:	mov	r1, #1
   15ccc:	str	r1, [sp, #4]
   15cd0:	adds	r2, r2, #1
   15cd4:	adc	r3, r3, #0
   15cd8:	strd	r2, [r4, #40]	; 0x28
   15cdc:	mov	r9, r0
   15ce0:	b	15c08 <read_boolean_expression@@Base+0xf8>
   15ce4:	andeq	r5, r1, r8, lsl r9
   15ce8:	andeq	r4, r1, r8, lsr #9
   15cec:	andeq	r0, r0, r4, lsr #1
   15cf0:	andeq	r3, r0, r8, lsl #3
   15cf4:	andeq	r5, r1, r8, lsl r8

00015cf8 <read_if_statement@@Base>:
   15cf8:	push	{r4, r5, r6, r7, r8, lr}
   15cfc:	mov	r5, r0
   15d00:	ldr	r4, [pc, #352]	; 15e68 <read_if_statement@@Base+0x170>
   15d04:	ldr	r0, [r0]
   15d08:	add	r4, pc, r4
   15d0c:	add	r4, r4, #496	; 0x1f0
   15d10:	ldrd	r2, [r4]
   15d14:	adds	r2, r2, #1
   15d18:	adc	r3, r3, #0
   15d1c:	strd	r2, [r4]
   15d20:	bl	12284 <next@@Base>
   15d24:	ldrd	r2, [r4, #8]
   15d28:	adds	r2, r2, #1
   15d2c:	adc	r3, r3, #0
   15d30:	strd	r2, [r4, #8]
   15d34:	ldr	r3, [r0]
   15d38:	cmp	r3, #3
   15d3c:	movne	r4, #0
   15d40:	bne	15e1c <read_if_statement@@Base+0x124>
   15d44:	ldrd	r2, [r4, #16]
   15d48:	adds	r2, r2, #1
   15d4c:	adc	r3, r3, #0
   15d50:	strd	r2, [r4, #16]
   15d54:	bl	149d4 <free_token_opar@@Base>
   15d58:	ldrd	r2, [r4, #24]
   15d5c:	mov	r0, r5
   15d60:	adds	r2, r2, #1
   15d64:	adc	r3, r3, #0
   15d68:	strd	r2, [r4, #24]
   15d6c:	bl	15b10 <read_boolean_expression@@Base>
   15d70:	ldrd	r2, [r4, #32]
   15d74:	adds	r2, r2, #1
   15d78:	adc	r3, r3, #0
   15d7c:	strd	r2, [r4, #32]
   15d80:	mov	r7, r0
   15d84:	mov	r0, r5
   15d88:	bl	15e70 <read_body@@Base>
   15d8c:	ldrd	r2, [r4, #40]	; 0x28
   15d90:	adds	r2, r2, #1
   15d94:	adc	r3, r3, #0
   15d98:	strd	r2, [r4, #40]	; 0x28
   15d9c:	mov	r6, r0
   15da0:	ldr	r0, [r5]
   15da4:	bl	12284 <next@@Base>
   15da8:	ldr	r3, [r0]
   15dac:	mov	r1, r0
   15db0:	cmp	r3, #11
   15db4:	beq	15e24 <read_if_statement@@Base+0x12c>
   15db8:	ldrd	r2, [r4, #56]	; 0x38
   15dbc:	ldr	r0, [r5]
   15dc0:	mov	r5, #0
   15dc4:	adds	r2, r2, #1
   15dc8:	adc	r3, r3, #0
   15dcc:	strd	r2, [r4, #56]	; 0x38
   15dd0:	bl	12414 <push_back@@Base>
   15dd4:	ldrd	r2, [r4, #80]	; 0x50
   15dd8:	adds	r2, r2, #1
   15ddc:	adc	r3, r3, #0
   15de0:	strd	r2, [r4, #80]	; 0x50
   15de4:	mov	r0, #20
   15de8:	bl	118d0 <malloc@plt>
   15dec:	mov	r3, r5
   15df0:	mov	r1, r7
   15df4:	mov	r2, r6
   15df8:	mov	r4, r0
   15dfc:	bl	14cd4 <init_node_if@@Base>
   15e00:	ldr	r3, [pc, #100]	; 15e6c <read_if_statement@@Base+0x174>
   15e04:	add	r3, pc, r3
   15e08:	add	r3, r3, #496	; 0x1f0
   15e0c:	ldrd	r0, [r3, #88]	; 0x58
   15e10:	adds	r0, r0, #1
   15e14:	adc	r1, r1, #0
   15e18:	strd	r0, [r3, #88]	; 0x58
   15e1c:	mov	r0, r4
   15e20:	pop	{r4, r5, r6, r7, r8, pc}
   15e24:	ldrd	r2, [r4, #48]	; 0x30
   15e28:	adds	r2, r2, #1
   15e2c:	adc	r3, r3, #0
   15e30:	strd	r2, [r4, #48]	; 0x30
   15e34:	bl	14ad4 <free_token_else@@Base>
   15e38:	ldrd	r2, [r4, #64]	; 0x40
   15e3c:	mov	r0, r5
   15e40:	adds	r2, r2, #1
   15e44:	adc	r3, r3, #0
   15e48:	strd	r2, [r4, #64]	; 0x40
   15e4c:	bl	15e70 <read_body@@Base>
   15e50:	ldrd	r2, [r4, #72]	; 0x48
   15e54:	adds	r2, r2, #1
   15e58:	adc	r3, r3, #0
   15e5c:	strd	r2, [r4, #72]	; 0x48
   15e60:	mov	r5, r0
   15e64:	b	15de4 <read_if_statement@@Base+0xec>
   15e68:	andeq	r5, r1, r0, lsr r7
   15e6c:	andeq	r5, r1, r4, lsr r6

00015e70 <read_body@@Base>:
   15e70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15e74:	mov	r5, r0
   15e78:	ldr	r4, [pc, #488]	; 16068 <read_body@@Base+0x1f8>
   15e7c:	ldr	r0, [r0]
   15e80:	add	r4, pc, r4
   15e84:	add	r4, r4, #592	; 0x250
   15e88:	ldrd	r2, [r4]
   15e8c:	adds	r2, r2, #1
   15e90:	adc	r3, r3, #0
   15e94:	strd	r2, [r4]
   15e98:	bl	12284 <next@@Base>
   15e9c:	ldrd	r2, [r4, #8]
   15ea0:	adds	r2, r2, #1
   15ea4:	adc	r3, r3, #0
   15ea8:	strd	r2, [r4, #8]
   15eac:	ldr	r3, [r0]
   15eb0:	cmp	r3, #5
   15eb4:	movne	r6, #0
   15eb8:	bne	15ff0 <read_body@@Base+0x180>
   15ebc:	ldrd	r2, [r4, #16]
   15ec0:	adds	r2, r2, #1
   15ec4:	adc	r3, r3, #0
   15ec8:	strd	r2, [r4, #16]
   15ecc:	bl	14a14 <free_token_obra@@Base>
   15ed0:	ldrd	r2, [r4, #24]
   15ed4:	ldr	r0, [r5]
   15ed8:	adds	r2, r2, #1
   15edc:	adc	r3, r3, #0
   15ee0:	strd	r2, [r4, #24]
   15ee4:	bl	12284 <next@@Base>
   15ee8:	ldrd	r2, [r4, #32]
   15eec:	adds	r2, r2, #1
   15ef0:	adc	r3, r3, #0
   15ef4:	strd	r2, [r4, #32]
   15ef8:	ldr	ip, [r0]
   15efc:	mov	r1, r0
   15f00:	cmp	ip, #6
   15f04:	beq	16060 <read_body@@Base+0x1f0>
   15f08:	ldr	r7, [pc, #348]	; 1606c <read_body@@Base+0x1fc>
   15f0c:	mov	r8, #0
   15f10:	add	r7, pc, r7
   15f14:	add	r7, r7, #592	; 0x250
   15f18:	mov	r6, r8
   15f1c:	ldrd	r2, [r4, #104]	; 0x68
   15f20:	adds	r2, r2, #1
   15f24:	adc	r3, r3, #0
   15f28:	cmp	ip, #7
   15f2c:	strd	r2, [r4, #104]	; 0x68
   15f30:	beq	16018 <read_body@@Base+0x1a8>
   15f34:	cmp	ip, #10
   15f38:	mov	r0, r1
   15f3c:	bne	15ff8 <read_body@@Base+0x188>
   15f40:	ldrd	r2, [r4, #48]	; 0x30
   15f44:	adds	r2, r2, #1
   15f48:	adc	r3, r3, #0
   15f4c:	strd	r2, [r4, #48]	; 0x30
   15f50:	bl	14ab4 <free_token_if@@Base>
   15f54:	ldrd	r2, [r4, #64]	; 0x40
   15f58:	mov	r0, r5
   15f5c:	adds	r2, r2, #1
   15f60:	adc	r3, r3, #0
   15f64:	strd	r2, [r4, #64]	; 0x40
   15f68:	bl	15cf8 <read_if_statement@@Base>
   15f6c:	ldrd	r2, [r4, #72]	; 0x48
   15f70:	adds	r2, r2, #1
   15f74:	adc	r3, r3, #0
   15f78:	strd	r2, [r4, #72]	; 0x48
   15f7c:	mov	r9, r0
   15f80:	cmp	r6, #0
   15f84:	moveq	r6, r9
   15f88:	beq	15fa0 <read_body@@Base+0x130>
   15f8c:	ldrd	r2, [r7, #96]	; 0x60
   15f90:	str	r9, [r8, #4]
   15f94:	adds	r2, r2, #1
   15f98:	adc	r3, r3, #0
   15f9c:	strd	r2, [r7, #96]	; 0x60
   15fa0:	ldr	r0, [r5]
   15fa4:	bl	12284 <next@@Base>
   15fa8:	mov	r8, r9
   15fac:	ldr	ip, [r0]
   15fb0:	mov	r1, r0
   15fb4:	cmp	ip, #6
   15fb8:	bne	15f1c <read_body@@Base+0xac>
   15fbc:	ldr	r4, [pc, #172]	; 16070 <read_body@@Base+0x200>
   15fc0:	mov	r0, r1
   15fc4:	add	r4, pc, r4
   15fc8:	add	r4, r4, #592	; 0x250
   15fcc:	ldrd	r2, [r4, #112]	; 0x70
   15fd0:	adds	r2, r2, #1
   15fd4:	adc	r3, r3, #0
   15fd8:	strd	r2, [r4, #112]	; 0x70
   15fdc:	bl	14a34 <free_token_cbra@@Base>
   15fe0:	ldrd	r2, [r4, #120]	; 0x78
   15fe4:	adds	r2, r2, #1
   15fe8:	adc	r3, r3, #0
   15fec:	strd	r2, [r4, #120]	; 0x78
   15ff0:	mov	r0, r6
   15ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ff8:	ldr	r0, [r5]
   15ffc:	bl	12414 <push_back@@Base>
   16000:	ldrd	r2, [r4, #80]	; 0x50
   16004:	mov	r0, r6
   16008:	adds	r2, r2, #1
   1600c:	adc	r3, r3, #0
   16010:	strd	r2, [r4, #80]	; 0x50
   16014:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16018:	ldrd	r2, [r4, #40]	; 0x28
   1601c:	mov	r0, r1
   16020:	adds	r2, r2, #1
   16024:	adc	r3, r3, #0
   16028:	strd	r2, [r4, #40]	; 0x28
   1602c:	bl	14a54 <free_token_return@@Base>
   16030:	ldrd	r2, [r4, #56]	; 0x38
   16034:	mov	r0, r5
   16038:	adds	r2, r2, #1
   1603c:	adc	r3, r3, #0
   16040:	strd	r2, [r4, #56]	; 0x38
   16044:	bl	15520 <read_return_expression@@Base>
   16048:	ldrd	r2, [r4, #88]	; 0x58
   1604c:	adds	r2, r2, #1
   16050:	adc	r3, r3, #0
   16054:	strd	r2, [r4, #88]	; 0x58
   16058:	mov	r9, r0
   1605c:	b	15f80 <read_body@@Base+0x110>
   16060:	mov	r6, #0
   16064:	b	15fbc <read_body@@Base+0x14c>
   16068:			; <UNDEFINED> instruction: 0x000155b8
   1606c:	andeq	r5, r1, r8, lsr #10
   16070:	andeq	r5, r1, r4, ror r4

00016074 <read_function_ast_node@@Base>:
   16074:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16078:	mov	r5, r0
   1607c:	ldr	r4, [pc, #404]	; 16218 <read_function_ast_node@@Base+0x1a4>
   16080:	ldr	r0, [r0]
   16084:	add	r4, pc, r4
   16088:	add	r4, r4, #720	; 0x2d0
   1608c:	ldrd	r2, [r4]
   16090:	adds	r2, r2, #1
   16094:	adc	r3, r3, #0
   16098:	strd	r2, [r4]
   1609c:	bl	12284 <next@@Base>
   160a0:	ldrd	r2, [r4, #8]
   160a4:	adds	r2, r2, #1
   160a8:	adc	r3, r3, #0
   160ac:	strd	r2, [r4, #8]
   160b0:	ldr	r3, [r0]
   160b4:	cmp	r3, #0
   160b8:	bne	1620c <read_function_ast_node@@Base+0x198>
   160bc:	ldrd	r2, [r4, #16]
   160c0:	adds	r2, r2, #1
   160c4:	adc	r3, r3, #0
   160c8:	strd	r2, [r4, #16]
   160cc:	bl	14974 <free_token_int_type@@Base>
   160d0:	ldrd	r2, [r4, #24]
   160d4:	ldr	r0, [r5]
   160d8:	adds	r2, r2, #1
   160dc:	adc	r3, r3, #0
   160e0:	strd	r2, [r4, #24]
   160e4:	bl	12284 <next@@Base>
   160e8:	ldrd	r2, [r4, #32]
   160ec:	adds	r2, r2, #1
   160f0:	adc	r3, r3, #0
   160f4:	strd	r2, [r4, #32]
   160f8:	ldr	r1, [r0]
   160fc:	mov	r6, r0
   16100:	cmp	r1, #2
   16104:	bne	1620c <read_function_ast_node@@Base+0x198>
   16108:	ldrd	r2, [r4, #40]	; 0x28
   1610c:	ldr	r0, [r5]
   16110:	adds	r2, r2, #1
   16114:	adc	r3, r3, #0
   16118:	strd	r2, [r4, #40]	; 0x28
   1611c:	bl	12284 <next@@Base>
   16120:	ldrd	r2, [r4, #48]	; 0x30
   16124:	adds	r2, r2, #1
   16128:	adc	r3, r3, #0
   1612c:	strd	r2, [r4, #48]	; 0x30
   16130:	ldr	r3, [r0]
   16134:	cmp	r3, #3
   16138:	bne	1620c <read_function_ast_node@@Base+0x198>
   1613c:	ldrd	r2, [r4, #56]	; 0x38
   16140:	adds	r2, r2, #1
   16144:	adc	r3, r3, #0
   16148:	strd	r2, [r4, #56]	; 0x38
   1614c:	bl	149d4 <free_token_opar@@Base>
   16150:	ldrd	r2, [r4, #64]	; 0x40
   16154:	ldr	r0, [r5]
   16158:	adds	r2, r2, #1
   1615c:	adc	r3, r3, #0
   16160:	strd	r2, [r4, #64]	; 0x40
   16164:	bl	12284 <next@@Base>
   16168:	ldrd	r2, [r4, #72]	; 0x48
   1616c:	adds	r2, r2, #1
   16170:	adc	r3, r3, #0
   16174:	strd	r2, [r4, #72]	; 0x48
   16178:	ldr	r3, [r0]
   1617c:	cmp	r3, #4
   16180:	bne	1620c <read_function_ast_node@@Base+0x198>
   16184:	ldrd	r2, [r4, #80]	; 0x50
   16188:	adds	r2, r2, #1
   1618c:	adc	r3, r3, #0
   16190:	strd	r2, [r4, #80]	; 0x50
   16194:	bl	149f4 <free_token_cpar@@Base>
   16198:	ldrd	r2, [r4, #88]	; 0x58
   1619c:	mov	r0, r5
   161a0:	adds	r2, r2, #1
   161a4:	adc	r3, r3, #0
   161a8:	strd	r2, [r4, #88]	; 0x58
   161ac:	bl	15e70 <read_body@@Base>
   161b0:	ldrd	r8, [r4, #96]	; 0x60
   161b4:	adds	r8, r8, #1
   161b8:	adc	r9, r9, #0
   161bc:	strd	r8, [r4, #96]	; 0x60
   161c0:	mov	r7, r0
   161c4:	mov	r0, #16
   161c8:	bl	118d0 <malloc@plt>
   161cc:	mov	r2, r7
   161d0:	ldr	r1, [r6, #4]
   161d4:	mov	r5, r0
   161d8:	bl	14c3c <init_node_function@@Base>
   161dc:	ldrd	r2, [r4, #104]	; 0x68
   161e0:	mov	r0, r6
   161e4:	adds	r2, r2, #1
   161e8:	adc	r3, r3, #0
   161ec:	strd	r2, [r4, #104]	; 0x68
   161f0:	bl	149b4 <free_token_function@@Base>
   161f4:	ldrd	r2, [r4, #112]	; 0x70
   161f8:	mov	r0, r5
   161fc:	adds	r2, r2, #1
   16200:	adc	r3, r3, #0
   16204:	strd	r2, [r4, #112]	; 0x70
   16208:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1620c:	mov	r5, #0
   16210:	mov	r0, r5
   16214:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16218:			; <UNDEFINED> instruction: 0x000153b4

0001621c <build_ast@@Base>:
   1621c:	push	{r4, lr}
   16220:	ldr	r4, [pc, #44]	; 16254 <build_ast@@Base+0x38>
   16224:	add	r4, pc, r4
   16228:	add	r4, r4, #848	; 0x350
   1622c:	ldrd	r2, [r4, #-8]
   16230:	adds	r2, r2, #1
   16234:	adc	r3, r3, #0
   16238:	strd	r2, [r4, #-8]
   1623c:	bl	16074 <read_function_ast_node@@Base>
   16240:	ldrd	r2, [r4]
   16244:	adds	r2, r2, #1
   16248:	adc	r3, r3, #0
   1624c:	strd	r2, [r4]
   16250:	pop	{r4, pc}
   16254:	andeq	r5, r1, r4, lsl r2
   16258:	b	17484 <build_ast@@Base+0x1268>
   1625c:	push	{r4, r5, r6, lr}
   16260:	subs	r5, r1, #0
   16264:	popeq	{r4, r5, r6, pc}
   16268:	mov	r4, r0
   1626c:	bl	16258 <build_ast@@Base+0x3c>
   16270:	ldrd	r2, [r4]
   16274:	adds	r0, r0, r2
   16278:	adc	r1, r1, r3
   1627c:	subs	r5, r5, #1
   16280:	strd	r0, [r4], #8
   16284:	bne	1626c <build_ast@@Base+0x50>
   16288:	pop	{r4, r5, r6, pc}
   1628c:	ldr	r3, [pc, #20]	; 162a8 <build_ast@@Base+0x8c>
   16290:	ldr	r2, [pc, #20]	; 162ac <build_ast@@Base+0x90>
   16294:	add	r3, pc, r3
   16298:	ldr	r3, [r3, r2]
   1629c:	ldmib	r3, {r0, r3}
   162a0:	add	r0, r0, r3
   162a4:	bx	lr
   162a8:	andeq	r3, r1, r4, ror #26
   162ac:	strheq	r0, [r0], -r8
   162b0:	ldr	r3, [pc, #28]	; 162d4 <build_ast@@Base+0xb8>
   162b4:	ldr	r2, [pc, #28]	; 162d8 <build_ast@@Base+0xbc>
   162b8:	add	r3, pc, r3
   162bc:	ldr	r3, [r3, r2]
   162c0:	ldr	r2, [r3]
   162c4:	cmp	r2, #0
   162c8:	ldrne	r0, [r3, #20]
   162cc:	moveq	r0, #1
   162d0:	bx	lr
   162d4:	andeq	r3, r1, r0, asr #26
   162d8:	strheq	r0, [r0], -r8
   162dc:	bx	lr
   162e0:	ldr	ip, [pc, #32]	; 16308 <build_ast@@Base+0xec>
   162e4:	mov	r3, #32
   162e8:	teq	r0, r1
   162ec:	movmi	r2, ip
   162f0:	movpl	r2, #0
   162f4:	subs	r3, r3, #1
   162f8:	lsl	r1, r1, #1
   162fc:	eor	r0, r2, r0, lsl #1
   16300:	bne	162e8 <build_ast@@Base+0xcc>
   16304:	bx	lr
   16308:	strbeq	r1, [r1], #3511	; 0xdb7
   1630c:	ldr	r3, [pc, #76]	; 16360 <build_ast@@Base+0x144>
   16310:	ldr	r1, [pc, #76]	; 16364 <build_ast@@Base+0x148>
   16314:	add	r3, pc, r3
   16318:	push	{r4, r5, r6, lr}
   1631c:	mov	r5, r0
   16320:	ldr	r4, [r3, r1]
   16324:	lsl	r1, r0, #2
   16328:	mov	r0, r4
   1632c:	mov	r2, #1
   16330:	ldr	r3, [r0], #28
   16334:	bl	11894 <fwrite@plt>
   16338:	cmp	r0, #1
   1633c:	movne	r3, #1
   16340:	ldr	r0, [r4, #8]
   16344:	strne	r3, [r4, #20]
   16348:	ldr	r3, [r4, #4]
   1634c:	sub	r0, r0, r5
   16350:	add	r3, r3, r5
   16354:	str	r3, [r4, #4]
   16358:	str	r0, [r4, #8]
   1635c:	pop	{r4, r5, r6, pc}
   16360:	andeq	r3, r1, r4, ror #25
   16364:	strheq	r0, [r0], -r8
   16368:	ldr	r3, [pc, #76]	; 163bc <build_ast@@Base+0x1a0>
   1636c:	ldr	r2, [pc, #76]	; 163c0 <build_ast@@Base+0x1a4>
   16370:	add	r3, pc, r3
   16374:	push	{r4, r5, r6, lr}
   16378:	mov	r5, r0
   1637c:	ldr	r4, [r3, r2]
   16380:	ldr	r3, [r4, #8]
   16384:	cmp	r3, #1024	; 0x400
   16388:	bcc	163a8 <build_ast@@Base+0x18c>
   1638c:	mov	r0, #1024	; 0x400
   16390:	bl	1630c <build_ast@@Base+0xf0>
   16394:	ldr	r3, [r4, #8]
   16398:	cmp	r3, #0
   1639c:	addne	r2, r4, #4096	; 0x1000
   163a0:	ldrne	r2, [r2, #28]
   163a4:	strne	r2, [r4, #28]
   163a8:	add	r0, r3, #7
   163ac:	add	r3, r5, r3
   163b0:	str	r3, [r4, #8]
   163b4:	add	r0, r4, r0, lsl #2
   163b8:	pop	{r4, r5, r6, pc}
   163bc:	andeq	r3, r1, r8, lsl #25
   163c0:	strheq	r0, [r0], -r8
   163c4:	ldr	r3, [pc, #172]	; 16478 <build_ast@@Base+0x25c>
   163c8:	ldr	r2, [pc, #172]	; 1647c <build_ast@@Base+0x260>
   163cc:	add	r3, pc, r3
   163d0:	push	{r4, r5, r6, lr}
   163d4:	mov	r5, r0
   163d8:	ldr	r4, [r3, r2]
   163dc:	ldr	r3, [r4, #8]
   163e0:	ldr	ip, [r4, #12]
   163e4:	sub	ip, ip, r3
   163e8:	cmp	ip, r0
   163ec:	bcs	16448 <build_ast@@Base+0x22c>
   163f0:	ldr	r2, [r4, #4]
   163f4:	cmp	ip, #0
   163f8:	add	r2, r2, r3
   163fc:	str	r2, [r4, #4]
   16400:	addne	r2, r4, #28
   16404:	mov	r0, r4
   16408:	ldrne	r3, [r2, r3, lsl #2]
   1640c:	mov	r6, #0
   16410:	strne	r3, [r4, #28]
   16414:	ldr	r3, [r0], #28
   16418:	mov	r2, #4096	; 0x1000
   1641c:	add	r0, r0, ip, lsl #2
   16420:	mov	r1, #1
   16424:	str	ip, [r4, #12]
   16428:	str	r6, [r4, #8]
   1642c:	bl	118ac <fread@plt>
   16430:	ldr	r3, [r4, #12]
   16434:	add	r0, r3, r0, lsr #2
   16438:	cmp	r5, r0
   1643c:	str	r0, [r4, #12]
   16440:	bhi	1645c <build_ast@@Base+0x240>
   16444:	ldr	r3, [r4, #8]
   16448:	add	r0, r3, #7
   1644c:	add	r5, r5, r3
   16450:	add	r0, r4, r0, lsl #2
   16454:	str	r5, [r4, #8]
   16458:	pop	{r4, r5, r6, pc}
   1645c:	ldr	r3, [r4, #16]
   16460:	str	r6, [r4, #12]
   16464:	add	r5, r5, r3
   16468:	sub	r5, r5, r0
   1646c:	str	r5, [r4, #16]
   16470:	mov	r0, r6
   16474:	pop	{r4, r5, r6, pc}
   16478:	andeq	r3, r1, ip, lsr #24
   1647c:	strheq	r0, [r0], -r8
   16480:	push	{r0, r1, r2, r3}
   16484:	ldr	r3, [pc, #52]	; 164c0 <build_ast@@Base+0x2a4>
   16488:	ldr	r1, [pc, #52]	; 164c4 <build_ast@@Base+0x2a8>
   1648c:	push	{lr}		; (str lr, [sp, #-4]!)
   16490:	add	r3, pc, r3
   16494:	sub	sp, sp, #12
   16498:	add	r2, sp, #20
   1649c:	str	r2, [sp, #4]
   164a0:	ldr	r0, [r3, r1]
   164a4:	ldr	r1, [sp, #16]
   164a8:	ldr	r0, [r0]
   164ac:	bl	1199c <vfprintf@plt>
   164b0:	add	sp, sp, #12
   164b4:	pop	{lr}		; (ldr lr, [sp], #4)
   164b8:	add	sp, sp, #16
   164bc:	bx	lr
   164c0:	andeq	r3, r1, r8, ror #22
   164c4:	andeq	r0, r0, r4, lsr #1
   164c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   164cc:	subs	r6, r1, #0
   164d0:	beq	1652c <build_ast@@Base+0x310>
   164d4:	cmp	r2, #0
   164d8:	movne	r3, #0
   164dc:	mov	r7, r2
   164e0:	ldr	r8, [r6]
   164e4:	addne	r5, r0, #12
   164e8:	movne	r4, r3
   164ec:	beq	1651c <build_ast@@Base+0x300>
   164f0:	ldr	r0, [r5, #4]!
   164f4:	add	r2, r6, r3, lsl #3
   164f8:	cmp	r0, #0
   164fc:	add	r9, r3, #1
   16500:	add	r4, r4, #1
   16504:	beq	16514 <build_ast@@Base+0x2f8>
   16508:	ldr	r0, [r2, #28]
   1650c:	bl	11870 <free@plt>
   16510:	mov	r3, r9
   16514:	cmp	r7, r4
   16518:	bne	164f0 <build_ast@@Base+0x2d4>
   1651c:	mov	r0, r6
   16520:	bl	11870 <free@plt>
   16524:	mov	r0, r8
   16528:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1652c:	mov	r8, r6
   16530:	b	16524 <build_ast@@Base+0x308>
   16534:	push	{r4, r5}
   16538:	mov	r4, r0
   1653c:	mov	r5, r1
   16540:	orrs	r3, r4, r5
   16544:	beq	16588 <build_ast@@Base+0x36c>
   16548:	cmp	r1, #0
   1654c:	clzeq	r1, r0
   16550:	addeq	r1, r1, #32
   16554:	clzne	r1, r1
   16558:	rsb	r3, r1, #63	; 0x3f
   1655c:	cmp	r3, #1
   16560:	bls	16588 <build_ast@@Base+0x36c>
   16564:	rsb	r2, r1, #61	; 0x3d
   16568:	rsb	r0, r2, #32
   1656c:	lsr	r3, r4, r2
   16570:	sub	r2, r2, #32
   16574:	orr	r3, r3, r5, lsl r0
   16578:	orr	r3, r3, r5, lsr r2
   1657c:	rsb	r1, r1, #1073741886	; 0x4000003e
   16580:	and	r0, r3, #3
   16584:	add	r0, r0, r1, lsl #2
   16588:	pop	{r4, r5}
   1658c:	bx	lr
   16590:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16594:	mov	r1, r3
   16598:	mov	sl, r0
   1659c:	mov	r0, r2
   165a0:	mov	r8, r2
   165a4:	mov	r9, r3
   165a8:	bl	16534 <build_ast@@Base+0x318>
   165ac:	add	r0, r0, r0, lsl #1
   165b0:	lsl	r0, r0, #3
   165b4:	add	r3, sl, r0
   165b8:	ldr	r2, [sl, r0]
   165bc:	ldrd	r4, [r3, #16]
   165c0:	ldrd	r6, [r3, #8]
   165c4:	add	r2, r2, #1
   165c8:	adds	r4, r4, r8
   165cc:	adc	r5, r5, r9
   165d0:	cmp	r8, r6
   165d4:	sbcs	r1, r9, r7
   165d8:	str	r2, [sl, r0]
   165dc:	strd	r4, [r3, #16]
   165e0:	strdlt	r8, [r3, #8]
   165e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   165e8:	ldr	r3, [r1, #8]
   165ec:	cmp	r3, #0
   165f0:	bxeq	lr
   165f4:	push	{r4, r5, r6, r7, r8, lr}
   165f8:	add	r2, r1, #6016	; 0x1780
   165fc:	mov	r8, r1
   16600:	mov	r7, r0
   16604:	ldrd	r0, [r1, #24]
   16608:	add	r2, r2, #32
   1660c:	mov	r3, r8
   16610:	mov	ip, #0
   16614:	mov	r4, #0
   16618:	mov	r5, #0
   1661c:	str	ip, [r3, #40]	; 0x28
   16620:	strd	r0, [r3, #48]	; 0x30
   16624:	strd	r4, [r3, #56]	; 0x38
   16628:	add	r3, r3, #24
   1662c:	cmp	r2, r3
   16630:	bne	1661c <build_ast@@Base+0x400>
   16634:	cmp	r7, #0
   16638:	popeq	{r4, r5, r6, r7, r8, pc}
   1663c:	add	r8, r8, #40	; 0x28
   16640:	ldr	r3, [r7, #16]
   16644:	cmp	r3, #0
   16648:	beq	166d0 <build_ast@@Base+0x4b4>
   1664c:	ldr	r2, [r7, #56]	; 0x38
   16650:	cmp	r2, #0
   16654:	beq	166d0 <build_ast@@Base+0x4b4>
   16658:	mov	r6, #0
   1665c:	b	1666c <build_ast@@Base+0x450>
   16660:	add	r6, r6, #1
   16664:	cmp	r2, r6
   16668:	beq	166d0 <build_ast@@Base+0x4b4>
   1666c:	ldr	r3, [r7, #60]	; 0x3c
   16670:	ldr	r4, [r3, r6, lsl #2]
   16674:	cmp	r4, #0
   16678:	beq	16660 <build_ast@@Base+0x444>
   1667c:	ldr	r3, [r4]
   16680:	cmp	r3, r7
   16684:	bne	16660 <build_ast@@Base+0x444>
   16688:	ldr	r3, [r4, #16]
   1668c:	cmp	r3, #0
   16690:	beq	16660 <build_ast@@Base+0x444>
   16694:	mov	r5, #0
   16698:	ldr	r2, [r4, #20]
   1669c:	lsl	r3, r5, #3
   166a0:	add	r2, r2, r3
   166a4:	mov	r0, r8
   166a8:	ldrd	r2, [r2]
   166ac:	bl	16590 <build_ast@@Base+0x374>
   166b0:	ldr	r3, [r4, #16]
   166b4:	add	r5, r5, #1
   166b8:	cmp	r3, r5
   166bc:	bhi	16698 <build_ast@@Base+0x47c>
   166c0:	ldr	r2, [r7, #56]	; 0x38
   166c4:	add	r6, r6, #1
   166c8:	cmp	r2, r6
   166cc:	bne	1666c <build_ast@@Base+0x450>
   166d0:	ldr	r7, [r7, #4]
   166d4:	cmp	r7, #0
   166d8:	bne	16640 <build_ast@@Base+0x424>
   166dc:	pop	{r4, r5, r6, r7, r8, pc}
   166e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166e4:	sub	sp, sp, #12
   166e8:	mov	r5, r0
   166ec:	str	r0, [sp, #4]
   166f0:	mov	r6, r2
   166f4:	str	r2, [sp]
   166f8:	mov	r0, r1
   166fc:	mov	r4, r1
   16700:	ldr	r2, [pc, #344]	; 16860 <build_ast@@Base+0x644>
   16704:	mov	r1, #0
   16708:	bl	1196c <memset@plt>
   1670c:	subs	r3, r5, #0
   16710:	mov	r5, #0
   16714:	str	r5, [r6]
   16718:	beq	16844 <build_ast@@Base+0x628>
   1671c:	mov	r7, r5
   16720:	mov	r9, r5
   16724:	mov	r8, r3
   16728:	ldr	r0, [r8, #12]
   1672c:	bl	11924 <strlen@plt>
   16730:	cmp	r5, r0
   16734:	ldrcc	r3, [sp]
   16738:	strcc	r0, [r3]
   1673c:	mov	r0, r7
   16740:	ldr	r1, [r8, #8]
   16744:	bl	162e0 <build_ast@@Base+0xc4>
   16748:	ldr	r6, [r8, #56]	; 0x38
   1674c:	mov	r1, r6
   16750:	bl	162e0 <build_ast@@Base+0xc4>
   16754:	cmp	r6, #0
   16758:	mov	r7, r0
   1675c:	beq	1682c <build_ast@@Base+0x610>
   16760:	ldr	r5, [r8, #60]	; 0x3c
   16764:	add	r6, r5, r6, lsl #2
   16768:	b	1678c <build_ast@@Base+0x570>
   1676c:	mov	r0, r7
   16770:	mov	r1, r9
   16774:	bl	162e0 <build_ast@@Base+0xc4>
   16778:	mov	r1, r9
   1677c:	bl	162e0 <build_ast@@Base+0xc4>
   16780:	mov	r7, r0
   16784:	cmp	r6, r5
   16788:	beq	1682c <build_ast@@Base+0x610>
   1678c:	ldr	fp, [r5], #4
   16790:	cmp	fp, #0
   16794:	beq	1676c <build_ast@@Base+0x550>
   16798:	ldr	r3, [fp]
   1679c:	cmp	r3, r8
   167a0:	bne	1676c <build_ast@@Base+0x550>
   167a4:	mov	r0, r7
   167a8:	ldr	r1, [fp, #12]
   167ac:	bl	162e0 <build_ast@@Base+0xc4>
   167b0:	ldr	r1, [fp, #8]
   167b4:	bl	162e0 <build_ast@@Base+0xc4>
   167b8:	ldr	r3, [r8, #16]
   167bc:	cmp	r3, #0
   167c0:	mov	r7, r0
   167c4:	beq	16784 <build_ast@@Base+0x568>
   167c8:	ldr	sl, [fp, #16]
   167cc:	ldr	r3, [r4, #8]
   167d0:	mov	r1, sl
   167d4:	add	r3, r3, sl
   167d8:	str	r3, [r4, #8]
   167dc:	bl	162e0 <build_ast@@Base+0xc4>
   167e0:	cmp	sl, #0
   167e4:	mov	r7, r0
   167e8:	beq	16784 <build_ast@@Base+0x568>
   167ec:	ldr	ip, [fp, #20]
   167f0:	ldrd	r2, [r4, #16]
   167f4:	add	lr, ip, sl, lsl #3
   167f8:	ldrd	r0, [ip]
   167fc:	ldrd	sl, [r4, #24]
   16800:	adds	r2, r2, r0
   16804:	adc	r3, r3, r1
   16808:	strd	r2, [r4, #16]
   1680c:	ldrd	r0, [ip], #8
   16810:	cmp	sl, r0
   16814:	sbcs	sl, fp, r1
   16818:	strdlt	r0, [r4, #24]
   1681c:	cmp	lr, ip
   16820:	bne	167f8 <build_ast@@Base+0x5dc>
   16824:	cmp	r6, r5
   16828:	bne	1678c <build_ast@@Base+0x570>
   1682c:	ldr	r8, [r8, #4]
   16830:	cmp	r8, #0
   16834:	beq	16848 <build_ast@@Base+0x62c>
   16838:	ldr	r3, [sp]
   1683c:	ldr	r5, [r3]
   16840:	b	16728 <build_ast@@Base+0x50c>
   16844:	ldr	r7, [sp, #4]
   16848:	ldr	r0, [sp, #4]
   1684c:	mov	r1, r4
   16850:	bl	165e8 <build_ast@@Base+0x3cc>
   16854:	mov	r0, r7
   16858:	add	sp, sp, #12
   1685c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16860:	andeq	r1, r0, r8, asr #15
   16864:	push	{r4, r5, r6, lr}
   16868:	mov	r4, r0
   1686c:	ldr	r0, [pc, #172]	; 16920 <build_ast@@Base+0x704>
   16870:	add	r0, pc, r0
   16874:	bl	118b8 <getenv@plt>
   16878:	subs	r3, r0, #0
   1687c:	beq	16888 <build_ast@@Base+0x66c>
   16880:	bl	119a8 <atoi@plt>
   16884:	bic	r3, r0, r0, asr #31
   16888:	ldr	r0, [pc, #148]	; 16924 <build_ast@@Base+0x708>
   1688c:	str	r3, [r4, #8]
   16890:	add	r0, pc, r0
   16894:	bl	118b8 <getenv@plt>
   16898:	subs	r6, r0, #0
   1689c:	beq	168f0 <build_ast@@Base+0x6d4>
   168a0:	bl	11924 <strlen@plt>
   168a4:	subs	r5, r0, #0
   168a8:	beq	168f0 <build_ast@@Base+0x6d4>
   168ac:	sub	r3, r5, #1
   168b0:	ldrb	r2, [r6, r3]
   168b4:	cmp	r2, #47	; 0x2f
   168b8:	beq	168e4 <build_ast@@Base+0x6c8>
   168bc:	ldr	r0, [r4, #4]
   168c0:	str	r5, [r4, #12]
   168c4:	add	r0, r0, #2
   168c8:	add	r0, r0, r5
   168cc:	bl	118d0 <malloc@plt>
   168d0:	mov	r2, r5
   168d4:	mov	r1, r6
   168d8:	str	r0, [r4]
   168dc:	pop	{r4, r5, r6, lr}
   168e0:	b	1187c <memcpy@plt>
   168e4:	cmp	r3, #0
   168e8:	movne	r5, r3
   168ec:	bne	168bc <build_ast@@Base+0x6a0>
   168f0:	ldr	r3, [r4, #8]
   168f4:	cmp	r3, #0
   168f8:	ldrne	r6, [pc, #40]	; 16928 <build_ast@@Base+0x70c>
   168fc:	movne	r5, #1
   16900:	addne	r6, pc, r6
   16904:	bne	168bc <build_ast@@Base+0x6a0>
   16908:	ldr	r0, [r4, #4]
   1690c:	str	r3, [r4, #12]
   16910:	add	r0, r0, #2
   16914:	bl	118d0 <malloc@plt>
   16918:	str	r0, [r4]
   1691c:	pop	{r4, r5, r6, pc}
   16920:	andeq	r2, r0, r0, ror #10
   16924:	andeq	r2, r0, r4, asr r5
   16928:	andeq	r2, r0, ip, asr #9
   1692c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16930:	sub	sp, sp, #6080	; 0x17c0
   16934:	sub	sp, sp, #44	; 0x2c
   16938:	add	r3, sp, #72	; 0x48
   1693c:	mov	r4, r0
   16940:	str	r0, [sp, #64]	; 0x40
   16944:	str	r1, [sp, #60]	; 0x3c
   16948:	mov	r0, r3
   1694c:	ldr	r2, [pc, #1068]	; 16d80 <build_ast@@Base+0xb64>
   16950:	mov	r1, #0
   16954:	str	r3, [sp, #68]	; 0x44
   16958:	bl	1196c <memset@plt>
   1695c:	add	r3, r4, #6016	; 0x1780
   16960:	add	r3, r3, #8
   16964:	add	r2, sp, #2016	; 0x7e0
   16968:	mov	sl, #251	; 0xfb
   1696c:	add	r2, r2, #8
   16970:	mov	fp, #0
   16974:	str	r3, [sp, #56]	; 0x38
   16978:	add	r3, sp, #72	; 0x48
   1697c:	str	r2, [sp, #44]	; 0x2c
   16980:	str	r3, [sp, #48]	; 0x30
   16984:	mov	r2, #0
   16988:	mov	r3, #0
   1698c:	mov	r5, sl
   16990:	mov	r0, fp
   16994:	strd	r2, [sp, #24]
   16998:	str	sl, [sp, #52]	; 0x34
   1699c:	ldr	r9, [sp, #56]	; 0x38
   169a0:	str	r5, [sp, #40]	; 0x28
   169a4:	ldr	sl, [sp, #60]	; 0x3c
   169a8:	ldrd	r2, [r9, #16]
   169ac:	ldr	r4, [r9]
   169b0:	str	r4, [sp, #4]
   169b4:	strd	r2, [sp, #8]
   169b8:	ldr	r3, [sp, #4]
   169bc:	cmp	r3, #0
   169c0:	beq	16c6c <build_ast@@Base+0xa50>
   169c4:	cmp	fp, #0
   169c8:	bne	16b50 <build_ast@@Base+0x934>
   169cc:	ldr	r5, [sp, #40]	; 0x28
   169d0:	cmp	r5, #0
   169d4:	blt	16d5c <build_ast@@Base+0xb40>
   169d8:	add	ip, r5, r5, lsl #1
   169dc:	ldr	fp, [sl, ip, lsl #3]
   169e0:	add	ip, sl, ip, lsl #3
   169e4:	cmp	fp, #0
   169e8:	bne	16d50 <build_ast@@Base+0xb34>
   169ec:	mov	r3, ip
   169f0:	ldr	r4, [sp, #4]
   169f4:	b	16a08 <build_ast@@Base+0x7ec>
   169f8:	ldr	fp, [r3]
   169fc:	mov	ip, r3
   16a00:	cmp	fp, #0
   16a04:	bne	16d48 <build_ast@@Base+0xb2c>
   16a08:	subs	r5, r5, #1
   16a0c:	sub	r3, r3, #24
   16a10:	bcs	169f8 <build_ast@@Base+0x7dc>
   16a14:	ldr	sl, [sp, #52]	; 0x34
   16a18:	mov	r8, r0
   16a1c:	mov	r5, r4
   16a20:	lsl	r4, sl, #1
   16a24:	ldr	r3, [sp, #44]	; 0x2c
   16a28:	add	lr, r4, sl
   16a2c:	sub	ip, r3, #1952	; 0x7a0
   16a30:	lsl	lr, lr, #3
   16a34:	add	ip, ip, lr
   16a38:	ldrd	r0, [sp, #8]
   16a3c:	add	lr, r3, lr
   16a40:	ldrd	r2, [ip, #16]
   16a44:	ldr	r6, [lr, #-1952]	; 0xfffff860
   16a48:	adds	r0, r0, r2
   16a4c:	adc	r1, r1, r3
   16a50:	mov	r2, r0
   16a54:	mov	r3, r1
   16a58:	ldrd	r0, [ip, #8]
   16a5c:	strd	r2, [ip, #16]
   16a60:	ldr	r3, [sp, #56]	; 0x38
   16a64:	add	r5, r6, r5
   16a68:	str	r5, [lr, #-1952]	; 0xfffff860
   16a6c:	orrs	lr, r0, r1
   16a70:	ldrd	r2, [r3, #8]
   16a74:	beq	16a84 <build_ast@@Base+0x868>
   16a78:	cmp	r2, r0
   16a7c:	sbcs	r1, r3, r1
   16a80:	bge	16a98 <build_ast@@Base+0x87c>
   16a84:	ldr	r1, [sp, #44]	; 0x2c
   16a88:	add	r0, r4, sl
   16a8c:	sub	r1, r1, #1952	; 0x7a0
   16a90:	add	r1, r1, r0, lsl #3
   16a94:	strd	r2, [r1, #8]
   16a98:	add	lr, r4, sl
   16a9c:	ldr	r3, [sp, #68]	; 0x44
   16aa0:	lsl	lr, lr, #3
   16aa4:	add	ip, r3, lr
   16aa8:	ldr	r3, [sp, #64]	; 0x40
   16aac:	add	lr, r3, lr
   16ab0:	b	16b00 <build_ast@@Base+0x8e4>
   16ab4:	ldrd	r0, [ip, #-8]
   16ab8:	ldrd	r2, [lr, #-8]
   16abc:	ldrd	r4, [ip, #-16]
   16ac0:	adds	r6, r0, r2
   16ac4:	adc	r7, r1, r3
   16ac8:	ldr	r2, [lr, #-24]	; 0xffffffe8
   16acc:	ldr	r3, [ip, #-24]	; 0xffffffe8
   16ad0:	orrs	r1, r4, r5
   16ad4:	add	r3, r3, r2
   16ad8:	str	r3, [ip, #-24]	; 0xffffffe8
   16adc:	strd	r6, [ip, #-8]
   16ae0:	ldrd	r2, [lr, #-16]
   16ae4:	beq	16af4 <build_ast@@Base+0x8d8>
   16ae8:	cmp	r2, r4
   16aec:	sbcs	r1, r3, r5
   16af0:	bge	16af8 <build_ast@@Base+0x8dc>
   16af4:	strd	r2, [ip, #-16]
   16af8:	sub	ip, ip, #24
   16afc:	sub	lr, lr, #24
   16b00:	subs	sl, sl, #1
   16b04:	bpl	16ab4 <build_ast@@Base+0x898>
   16b08:	ldr	r3, [sp, #44]	; 0x2c
   16b0c:	add	r0, r8, r8, lsl #1
   16b10:	sub	r3, r3, #1952	; 0x7a0
   16b14:	add	r3, r3, r0, lsl #3
   16b18:	ldrd	r6, [sp, #24]
   16b1c:	ldrd	r4, [r3, #16]
   16b20:	ldr	r1, [sp, #68]	; 0x44
   16b24:	ldr	r0, [sp, #64]	; 0x40
   16b28:	adds	r6, r6, r4
   16b2c:	adc	r7, r7, r5
   16b30:	mov	r4, r6
   16b34:	mov	r5, r7
   16b38:	ldr	r2, [pc, #576]	; 16d80 <build_ast@@Base+0xb64>
   16b3c:	strd	r4, [r3, #16]
   16b40:	bl	1187c <memcpy@plt>
   16b44:	add	sp, sp, #6080	; 0x17c0
   16b48:	add	sp, sp, #44	; 0x2c
   16b4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b50:	ldr	r3, [sp, #40]	; 0x28
   16b54:	add	ip, r3, r3, lsl #1
   16b58:	add	ip, sl, ip, lsl #3
   16b5c:	ldr	lr, [sp, #4]
   16b60:	cmp	fp, lr
   16b64:	bcc	16cdc <build_ast@@Base+0xac0>
   16b68:	ldrd	r2, [r9, #8]
   16b6c:	ldrd	r0, [ip, #8]
   16b70:	adds	r4, r2, r0
   16b74:	adc	r5, r3, r1
   16b78:	cmp	fp, lr
   16b7c:	strd	r4, [sp, #16]
   16b80:	bls	16d6c <build_ast@@Base+0xb50>
   16b84:	ldrd	r6, [sp, #24]
   16b88:	mov	r2, fp
   16b8c:	mov	r3, #0
   16b90:	umull	r0, r1, lr, r6
   16b94:	mla	r1, lr, r7, r1
   16b98:	bl	18268 <__gcov_sort_n_vals@@Base+0x534>
   16b9c:	mov	r2, r0
   16ba0:	subs	r0, r6, r2
   16ba4:	mov	r3, r1
   16ba8:	sbc	r1, r7, r3
   16bac:	strd	r0, [sp, #24]
   16bb0:	ldr	r1, [sp, #4]
   16bb4:	mov	r0, #0
   16bb8:	sub	fp, fp, r1
   16bbc:	mov	r8, r1
   16bc0:	mov	r1, #0
   16bc4:	str	r1, [sp, #4]
   16bc8:	mov	r1, #0
   16bcc:	ldrd	r6, [sp, #8]
   16bd0:	strd	r0, [sp, #8]
   16bd4:	adds	r4, r2, r6
   16bd8:	adc	r5, r3, r7
   16bdc:	ldrd	r0, [sp, #16]
   16be0:	strd	r4, [sp, #32]
   16be4:	bl	16534 <build_ast@@Base+0x318>
   16be8:	ldr	r3, [sp, #48]	; 0x30
   16bec:	ldrd	r4, [sp, #32]
   16bf0:	add	r1, r0, r0, lsl #1
   16bf4:	lsl	r1, r1, #3
   16bf8:	add	ip, r3, r1
   16bfc:	ldr	r3, [sp, #44]	; 0x2c
   16c00:	ldrd	r6, [ip, #8]
   16c04:	add	r1, r3, r1
   16c08:	ldrd	r2, [ip, #16]
   16c0c:	adds	r2, r2, r4
   16c10:	adc	r3, r3, r5
   16c14:	strd	r2, [sp, #32]
   16c18:	ldrd	r2, [sp, #16]
   16c1c:	cmp	r2, r6
   16c20:	sbcs	lr, r3, r7
   16c24:	movlt	lr, #1
   16c28:	movge	lr, #0
   16c2c:	orrs	r4, r6, r7
   16c30:	ldr	r4, [r1, #-1952]	; 0xfffff860
   16c34:	orreq	lr, lr, #1
   16c38:	add	r8, r4, r8
   16c3c:	ldrd	r4, [sp, #32]
   16c40:	cmp	lr, #0
   16c44:	str	r8, [r1, #-1952]	; 0xfffff860
   16c48:	strd	r4, [ip, #16]
   16c4c:	strdne	r2, [ip, #8]
   16c50:	cmp	fp, #0
   16c54:	ldreq	r3, [sp, #40]	; 0x28
   16c58:	subeq	r3, r3, #1
   16c5c:	streq	r3, [sp, #40]	; 0x28
   16c60:	ldr	r3, [sp, #4]
   16c64:	cmp	r3, #0
   16c68:	bne	169c4 <build_ast@@Base+0x7a8>
   16c6c:	ldr	r3, [sp, #52]	; 0x34
   16c70:	ldr	r5, [sp, #40]	; 0x28
   16c74:	sub	r3, r3, #1
   16c78:	str	r3, [sp, #52]	; 0x34
   16c7c:	cmn	r3, #1
   16c80:	ldr	r3, [sp, #56]	; 0x38
   16c84:	sub	r3, r3, #24
   16c88:	str	r3, [sp, #56]	; 0x38
   16c8c:	bne	1699c <build_ast@@Base+0x780>
   16c90:	cmp	fp, #0
   16c94:	mov	r9, r5
   16c98:	subne	r9, r5, #1
   16c9c:	cmp	r9, #0
   16ca0:	mov	r8, r0
   16ca4:	blt	16b08 <build_ast@@Base+0x8ec>
   16ca8:	ldr	r2, [sp, #60]	; 0x3c
   16cac:	add	r3, r9, r9, lsl #1
   16cb0:	sub	r0, r2, #24
   16cb4:	add	r1, r2, r3, lsl #3
   16cb8:	ldrd	r2, [sp, #24]
   16cbc:	ldrd	r4, [r1, #16]
   16cc0:	sub	r1, r1, #24
   16cc4:	adds	r2, r2, r4
   16cc8:	adc	r3, r3, r5
   16ccc:	cmp	r0, r1
   16cd0:	bne	16cbc <build_ast@@Base+0xaa0>
   16cd4:	strd	r2, [sp, #24]
   16cd8:	b	16b08 <build_ast@@Base+0x8ec>
   16cdc:	ldrd	r2, [sp, #8]
   16ce0:	ldrd	r6, [ip, #8]
   16ce4:	ldrd	r4, [r9, #8]
   16ce8:	umull	r0, r1, fp, r2
   16cec:	ldr	r8, [sp, #4]
   16cf0:	adds	r4, r4, r6
   16cf4:	adc	r5, r5, r7
   16cf8:	mla	r1, fp, r3, r1
   16cfc:	mov	r2, r8
   16d00:	mov	r3, #0
   16d04:	strd	r4, [sp, #16]
   16d08:	bl	18268 <__gcov_sort_n_vals@@Base+0x534>
   16d0c:	sub	r3, r8, fp
   16d10:	str	r3, [sp, #4]
   16d14:	ldrd	r2, [sp, #8]
   16d18:	mov	r8, fp
   16d1c:	mov	fp, #0
   16d20:	subs	r2, r2, r0
   16d24:	sbc	r3, r3, r1
   16d28:	mov	r6, r0
   16d2c:	mov	r7, r1
   16d30:	mov	r0, #0
   16d34:	mov	r1, #0
   16d38:	strd	r2, [sp, #8]
   16d3c:	ldrd	r2, [sp, #24]
   16d40:	strd	r0, [sp, #24]
   16d44:	b	16bd4 <build_ast@@Base+0x9b8>
   16d48:	str	r5, [sp, #40]	; 0x28
   16d4c:	str	r4, [sp, #4]
   16d50:	ldrd	r2, [ip, #16]
   16d54:	strd	r2, [sp, #24]
   16d58:	b	16b5c <build_ast@@Base+0x940>
   16d5c:	ldr	sl, [sp, #52]	; 0x34
   16d60:	mov	r8, r0
   16d64:	ldr	r5, [sp, #4]
   16d68:	b	16a20 <build_ast@@Base+0x804>
   16d6c:	mov	r0, #0
   16d70:	mov	r1, #0
   16d74:	ldrd	r2, [sp, #24]
   16d78:	strd	r0, [sp, #24]
   16d7c:	b	16bb0 <build_ast@@Base+0x994>
   16d80:	andeq	r1, r0, r0, lsr #15
   16d84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16d88:	ldrb	r4, [r0]
   16d8c:	cmp	r4, #47	; 0x2f
   16d90:	addeq	r5, r0, #1
   16d94:	ldrbeq	r4, [r0, #1]
   16d98:	movne	r5, r0
   16d9c:	cmp	r4, #0
   16da0:	beq	16df4 <build_ast@@Base+0xbd8>
   16da4:	mov	r6, r0
   16da8:	ldr	sl, [pc, #144]	; 16e40 <build_ast@@Base+0xc24>
   16dac:	mov	r8, #0
   16db0:	mov	r7, #47	; 0x2f
   16db4:	b	16dc4 <build_ast@@Base+0xba8>
   16db8:	ldrb	r4, [r5, #1]!
   16dbc:	cmp	r4, #0
   16dc0:	beq	16df4 <build_ast@@Base+0xbd8>
   16dc4:	cmp	r4, #47	; 0x2f
   16dc8:	bne	16db8 <build_ast@@Base+0xb9c>
   16dcc:	strb	r8, [r5]
   16dd0:	mov	r1, #0
   16dd4:	mov	r0, r6
   16dd8:	bl	11978 <access@plt>
   16ddc:	cmn	r0, #1
   16de0:	beq	16e00 <build_ast@@Base+0xbe4>
   16de4:	strb	r7, [r5]
   16de8:	ldrb	r4, [r5, #1]!
   16dec:	cmp	r4, #0
   16df0:	bne	16dc4 <build_ast@@Base+0xba8>
   16df4:	mov	r9, #0
   16df8:	mov	r0, r9
   16dfc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e00:	mov	r1, sl
   16e04:	mov	r0, r6
   16e08:	bl	11954 <mkdir@plt>
   16e0c:	cmn	r0, #1
   16e10:	mov	r9, r0
   16e14:	bne	16de4 <build_ast@@Base+0xbc8>
   16e18:	bl	1193c <__errno_location@plt>
   16e1c:	ldr	r3, [r0]
   16e20:	cmp	r3, #17
   16e24:	beq	16de4 <build_ast@@Base+0xbc8>
   16e28:	ldr	r0, [pc, #20]	; 16e44 <build_ast@@Base+0xc28>
   16e2c:	mov	r1, r6
   16e30:	add	r0, pc, r0
   16e34:	bl	16480 <build_ast@@Base+0x264>
   16e38:	strb	r4, [r5]
   16e3c:	b	16df8 <build_ast@@Base+0xbdc>
   16e40:	andeq	r0, r0, sp, ror #3
   16e44:	andeq	r1, r0, r0, asr #31
   16e48:	ldr	r3, [pc, #124]	; 16ecc <build_ast@@Base+0xcb0>
   16e4c:	cmp	r1, r3
   16e50:	beq	16ec4 <build_ast@@Base+0xca8>
   16e54:	cmp	r2, #0
   16e58:	push	{r4, r5, lr}
   16e5c:	sub	sp, sp, #12
   16e60:	ldreq	r2, [r0]
   16e64:	lsr	r3, r1, #24
   16e68:	ldr	r0, [pc, #96]	; 16ed0 <build_ast@@Base+0xcb4>
   16e6c:	lsr	r5, r1, #16
   16e70:	lsr	r4, r1, #8
   16e74:	strb	r1, [sp, #3]
   16e78:	strb	r3, [sp]
   16e7c:	mov	r1, #53	; 0x35
   16e80:	mov	r3, #42	; 0x2a
   16e84:	mov	lr, #54	; 0x36
   16e88:	mov	ip, #48	; 0x30
   16e8c:	strb	r1, [sp, #6]
   16e90:	strb	r3, [sp, #7]
   16e94:	mov	r1, r2
   16e98:	mov	r3, sp
   16e9c:	add	r2, sp, #4
   16ea0:	add	r0, pc, r0
   16ea4:	strb	r5, [sp, #1]
   16ea8:	strb	r4, [sp, #2]
   16eac:	strb	lr, [sp, #4]
   16eb0:	strb	ip, [sp, #5]
   16eb4:	bl	16480 <build_ast@@Base+0x264>
   16eb8:	mov	r0, #0
   16ebc:	add	sp, sp, #12
   16ec0:	pop	{r4, r5, pc}
   16ec4:	mov	r0, #1
   16ec8:	bx	lr
   16ecc:	ldrtcc	r3, [r0], -sl, lsr #10
   16ed0:	andeq	r1, r0, r8, ror pc
   16ed4:	ldr	r2, [r2, #16]
   16ed8:	push	{r4, r5, r6, lr}
   16edc:	cmp	r2, #0
   16ee0:	mov	r6, r3
   16ee4:	ldr	ip, [sp, #16]
   16ee8:	beq	16fb4 <build_ast@@Base+0xd98>
   16eec:	ldr	r3, [r3, #12]
   16ef0:	cmp	r1, #0
   16ef4:	addeq	r2, r3, #1
   16ef8:	streq	r2, [r6, #12]
   16efc:	cmp	r3, #0
   16f00:	beq	16f58 <build_ast@@Base+0xd3c>
   16f04:	ldrd	r0, [ip, #16]
   16f08:	ldrd	r2, [r6, #16]
   16f0c:	ldrd	r4, [r6, #24]
   16f10:	adds	r2, r2, r0
   16f14:	adc	r3, r3, r1
   16f18:	strd	r2, [r6, #16]
   16f1c:	ldrd	r0, [ip, #24]
   16f20:	cmp	r4, r0
   16f24:	sbcs	r3, r5, r1
   16f28:	blt	16fd8 <build_ast@@Base+0xdbc>
   16f2c:	ldrd	r2, [r6, #32]
   16f30:	adds	r2, r2, r0
   16f34:	adc	r3, r3, r1
   16f38:	strd	r2, [r6, #32]
   16f3c:	add	r1, ip, #40	; 0x28
   16f40:	add	r0, r6, #40	; 0x28
   16f44:	bl	1692c <build_ast@@Base+0x710>
   16f48:	ldr	r3, [sp, #20]
   16f4c:	mov	r0, #0
   16f50:	str	r3, [r6]
   16f54:	pop	{r4, r5, r6, pc}
   16f58:	ldr	r1, [ip, #8]
   16f5c:	ldrd	r2, [r6, #16]
   16f60:	str	r1, [r6, #8]
   16f64:	ldrd	r0, [ip, #16]
   16f68:	ldrd	r4, [r6, #24]
   16f6c:	adds	r2, r2, r0
   16f70:	adc	r3, r3, r1
   16f74:	strd	r2, [r6, #16]
   16f78:	ldrd	r0, [ip, #24]
   16f7c:	cmp	r4, r0
   16f80:	sbcs	r3, r5, r1
   16f84:	bge	16ff4 <build_ast@@Base+0xdd8>
   16f88:	ldrd	r2, [r6, #32]
   16f8c:	strd	r0, [r6, #24]
   16f90:	ldrd	r0, [ip, #24]
   16f94:	adds	r2, r2, r0
   16f98:	adc	r3, r3, r1
   16f9c:	strd	r2, [r6, #32]
   16fa0:	add	r1, ip, #40	; 0x28
   16fa4:	ldr	r2, [pc, #92]	; 17008 <build_ast@@Base+0xdec>
   16fa8:	add	r0, r6, #40	; 0x28
   16fac:	bl	1187c <memcpy@plt>
   16fb0:	b	16f48 <build_ast@@Base+0xd2c>
   16fb4:	ldr	r3, [r3, #12]
   16fb8:	cmp	r3, #0
   16fbc:	beq	16f48 <build_ast@@Base+0xd2c>
   16fc0:	mov	r1, r0
   16fc4:	ldr	r0, [pc, #64]	; 1700c <build_ast@@Base+0xdf0>
   16fc8:	add	r0, pc, r0
   16fcc:	bl	16480 <build_ast@@Base+0x264>
   16fd0:	mvn	r0, #0
   16fd4:	pop	{r4, r5, r6, pc}
   16fd8:	ldrd	r2, [r6, #32]
   16fdc:	strd	r0, [r6, #24]
   16fe0:	ldrd	r0, [ip, #24]
   16fe4:	adds	r2, r2, r0
   16fe8:	adc	r3, r3, r1
   16fec:	strd	r2, [r6, #32]
   16ff0:	b	16f3c <build_ast@@Base+0xd20>
   16ff4:	ldrd	r2, [r6, #32]
   16ff8:	adds	r2, r2, r0
   16ffc:	adc	r3, r3, r1
   17000:	strd	r2, [r6, #32]
   17004:	b	16fa0 <build_ast@@Base+0xd84>
   17008:	andeq	r1, r0, r0, lsr #15
   1700c:	andeq	r1, r0, r8, lsl #29
   17010:	ldr	ip, [pc, #52]	; 1704c <build_ast@@Base+0xe30>
   17014:	ldr	r3, [pc, #52]	; 17050 <build_ast@@Base+0xe34>
   17018:	add	ip, pc, ip
   1701c:	push	{r4, lr}
   17020:	mov	lr, #0
   17024:	ldr	r3, [ip, r3]
   17028:	mvn	r4, #0
   1702c:	mov	r2, lr
   17030:	mov	r1, lr
   17034:	str	r4, [r3, #24]
   17038:	str	lr, [r3, #4]
   1703c:	str	lr, [r3, #8]
   17040:	ldr	r0, [r3]
   17044:	pop	{r4, lr}
   17048:	b	119b4 <fseek@plt>
   1704c:	andeq	r2, r1, r0, ror #31
   17050:	strheq	r0, [r0], -r8
   17054:	push	{r4, r5, r6, r7, lr}
   17058:	sub	sp, sp, #108	; 0x6c
   1705c:	mov	r4, #0
   17060:	mov	r7, r0
   17064:	strh	r4, [sp, #2]
   17068:	str	r4, [sp, #4]
   1706c:	str	r4, [sp, #8]
   17070:	bl	1190c <getpid@plt>
   17074:	ldr	r3, [pc, #240]	; 1716c <build_ast@@Base+0xf50>
   17078:	ldr	ip, [pc, #240]	; 17170 <build_ast@@Base+0xf54>
   1707c:	add	r3, pc, r3
   17080:	mvn	lr, #0
   17084:	mov	r6, #1
   17088:	ldr	r2, [pc, #228]	; 17174 <build_ast@@Base+0xf58>
   1708c:	mov	r1, #66	; 0x42
   17090:	str	r0, [sp, #12]
   17094:	ldr	r5, [r3, ip]
   17098:	mov	r0, r7
   1709c:	strh	r6, [sp]
   170a0:	str	r4, [r5, #4]
   170a4:	str	r4, [r5, #12]
   170a8:	str	r4, [r5, #8]
   170ac:	str	r4, [r5, #20]
   170b0:	str	lr, [r5, #16]
   170b4:	bl	11900 <open@plt>
   170b8:	subs	r6, r0, #0
   170bc:	movlt	r0, r4
   170c0:	blt	17140 <build_ast@@Base+0xf24>
   170c4:	mov	r7, sp
   170c8:	mov	r4, #7
   170cc:	mov	r2, r7
   170d0:	mov	r1, r4
   170d4:	mov	r0, r6
   170d8:	bl	11960 <fcntl@plt>
   170dc:	cmp	r0, #0
   170e0:	beq	170f4 <build_ast@@Base+0xed8>
   170e4:	bl	1193c <__errno_location@plt>
   170e8:	ldr	r3, [r0]
   170ec:	cmp	r3, #4
   170f0:	beq	170cc <build_ast@@Base+0xeb0>
   170f4:	ldr	r1, [pc, #124]	; 17178 <build_ast@@Base+0xf5c>
   170f8:	mov	r0, r6
   170fc:	add	r1, pc, r1
   17100:	bl	11834 <fdopen@plt>
   17104:	mov	r4, r0
   17108:	cmp	r4, #0
   1710c:	mov	r0, r6
   17110:	str	r4, [r5]
   17114:	beq	17148 <build_ast@@Base+0xf2c>
   17118:	add	r1, sp, #16
   1711c:	bl	18534 <__libc_csu_fini@@Base+0x1c>
   17120:	cmp	r0, #0
   17124:	blt	17154 <build_ast@@Base+0xf38>
   17128:	mov	r4, #1
   1712c:	ldr	r0, [r5]
   17130:	mov	r1, #0
   17134:	str	r4, [r5, #24]
   17138:	bl	1184c <setbuf@plt>
   1713c:	mov	r0, r4
   17140:	add	sp, sp, #108	; 0x6c
   17144:	pop	{r4, r5, r6, r7, pc}
   17148:	bl	119d8 <close@plt>
   1714c:	mov	r0, r4
   17150:	b	17140 <build_ast@@Base+0xf24>
   17154:	mov	r4, #0
   17158:	ldr	r0, [r5]
   1715c:	bl	11984 <fclose@plt>
   17160:	str	r4, [r5]
   17164:	mov	r0, r4
   17168:	b	17140 <build_ast@@Base+0xf24>
   1716c:	andeq	r2, r1, ip, ror pc
   17170:	strheq	r0, [r0], -r8
   17174:			; <UNDEFINED> instruction: 0x000001b6
   17178:	andeq	r1, r0, r0, lsl #27
   1717c:	push	{r4, r5, r6, lr}
   17180:	mov	r4, r1
   17184:	ldr	r5, [pc, #244]	; 17280 <build_ast@@Base+0x1064>
   17188:	ldr	ip, [r4, #8]
   1718c:	ldr	lr, [r4, #12]
   17190:	ldr	r6, [r4]
   17194:	cmp	ip, #0
   17198:	mov	r1, r0
   1719c:	add	r5, pc, r5
   171a0:	add	r0, r6, lr
   171a4:	ble	171e0 <build_ast@@Base+0xfc4>
   171a8:	ldrb	r3, [r1]
   171ac:	cmp	r3, #47	; 0x2f
   171b0:	addeq	r2, r1, #1
   171b4:	ldrbeq	r3, [r1, #1]
   171b8:	movne	r2, r1
   171bc:	cmp	r3, #0
   171c0:	beq	171e0 <build_ast@@Base+0xfc4>
   171c4:	cmp	r3, #47	; 0x2f
   171c8:	moveq	r1, r2
   171cc:	ldrb	r3, [r2, #1]!
   171d0:	subeq	ip, ip, #1
   171d4:	cmp	r3, #0
   171d8:	cmpne	ip, #0
   171dc:	bne	171c4 <build_ast@@Base+0xfa8>
   171e0:	cmp	lr, #0
   171e4:	beq	171fc <build_ast@@Base+0xfe0>
   171e8:	ldrb	r3, [r1]
   171ec:	cmp	r3, #47	; 0x2f
   171f0:	addne	r0, r0, #1
   171f4:	movne	r3, #47	; 0x2f
   171f8:	strbne	r3, [r6, lr]
   171fc:	bl	118a0 <strcpy@plt>
   17200:	ldr	r0, [r4]
   17204:	bl	17054 <build_ast@@Base+0xe38>
   17208:	cmp	r0, #0
   1720c:	beq	17218 <build_ast@@Base+0xffc>
   17210:	mov	r0, #0
   17214:	pop	{r4, r5, r6, pc}
   17218:	ldr	r0, [r4]
   1721c:	bl	16d84 <build_ast@@Base+0xb68>
   17220:	cmp	r0, #0
   17224:	bne	1725c <build_ast@@Base+0x1040>
   17228:	ldr	r0, [r4]
   1722c:	bl	17054 <build_ast@@Base+0xe38>
   17230:	cmp	r0, #0
   17234:	bne	17210 <build_ast@@Base+0xff4>
   17238:	ldr	r3, [pc, #68]	; 17284 <build_ast@@Base+0x1068>
   1723c:	ldr	r1, [pc, #68]	; 17288 <build_ast@@Base+0x106c>
   17240:	ldr	r2, [r4]
   17244:	ldr	r3, [r5, r3]
   17248:	add	r1, pc, r1
   1724c:	ldr	r0, [r3]
   17250:	bl	11930 <fprintf@plt>
   17254:	mvn	r0, #0
   17258:	pop	{r4, r5, r6, pc}
   1725c:	ldr	r3, [pc, #32]	; 17284 <build_ast@@Base+0x1068>
   17260:	ldr	r1, [pc, #36]	; 1728c <build_ast@@Base+0x1070>
   17264:	ldr	r2, [r4]
   17268:	ldr	r3, [r5, r3]
   1726c:	add	r1, pc, r1
   17270:	ldr	r0, [r3]
   17274:	bl	11930 <fprintf@plt>
   17278:	mvn	r0, #0
   1727c:	pop	{r4, r5, r6, pc}
   17280:	andeq	r2, r1, ip, asr lr
   17284:	andeq	r0, r0, r4, lsr #1
   17288:	andeq	r1, r0, ip, asr #24
   1728c:	andeq	r1, r0, r4, lsl ip
   17290:	ldr	r3, [pc, #96]	; 172f8 <build_ast@@Base+0x10dc>
   17294:	ldr	r2, [pc, #96]	; 172fc <build_ast@@Base+0x10e0>
   17298:	add	r3, pc, r3
   1729c:	push	{r4, lr}
   172a0:	ldr	r4, [r3, r2]
   172a4:	ldr	r0, [r4]
   172a8:	cmp	r0, #0
   172ac:	beq	172cc <build_ast@@Base+0x10b0>
   172b0:	ldr	r3, [r4, #8]
   172b4:	cmp	r3, #0
   172b8:	bne	172dc <build_ast@@Base+0x10c0>
   172bc:	bl	11984 <fclose@plt>
   172c0:	mov	r3, #0
   172c4:	str	r3, [r4]
   172c8:	str	r3, [r4, #12]
   172cc:	mov	r3, #0
   172d0:	str	r3, [r4, #24]
   172d4:	ldr	r0, [r4, #20]
   172d8:	pop	{r4, pc}
   172dc:	ldr	r2, [r4, #24]
   172e0:	cmp	r2, #0
   172e4:	bge	172bc <build_ast@@Base+0x10a0>
   172e8:	mov	r0, r3
   172ec:	bl	1630c <build_ast@@Base+0xf0>
   172f0:	ldr	r0, [r4]
   172f4:	b	172bc <build_ast@@Base+0x10a0>
   172f8:	andeq	r2, r1, r0, ror #26
   172fc:	strheq	r0, [r0], -r8
   17300:	push	{r4, lr}
   17304:	mov	r4, r0
   17308:	mov	r0, #1
   1730c:	bl	16368 <build_ast@@Base+0x14c>
   17310:	str	r4, [r0]
   17314:	pop	{r4, pc}
   17318:	push	{r4, r5, r6, lr}
   1731c:	mov	r5, r0
   17320:	mov	r0, #2
   17324:	mov	r4, r1
   17328:	bl	16368 <build_ast@@Base+0x14c>
   1732c:	str	r5, [r0]
   17330:	str	r4, [r0, #4]
   17334:	pop	{r4, r5, r6, pc}
   17338:	push	{r4, r5, r6, lr}
   1733c:	mov	r5, r0
   17340:	mov	r0, #2
   17344:	mov	r4, r1
   17348:	bl	16368 <build_ast@@Base+0x14c>
   1734c:	str	r5, [r0]
   17350:	str	r4, [r0, #4]
   17354:	pop	{r4, r5, r6, pc}
   17358:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1735c:	sub	sp, sp, #32
   17360:	mov	r7, sp
   17364:	mov	r5, r1
   17368:	mov	r6, sp
   1736c:	add	r2, sp, #32
   17370:	mov	r3, #0
   17374:	str	r3, [r6], #4
   17378:	cmp	r2, r6
   1737c:	bne	17374 <build_ast@@Base+0x1158>
   17380:	mov	r8, #0
   17384:	mov	r3, r8
   17388:	mov	r4, r5
   1738c:	mov	r1, r5
   17390:	mov	r9, #1
   17394:	lsr	r2, r3, #5
   17398:	ldr	lr, [r1, #40]	; 0x28
   1739c:	add	ip, sp, #32
   173a0:	cmp	lr, #0
   173a4:	add	r2, ip, r2, lsl #2
   173a8:	and	sl, r3, #31
   173ac:	ldrne	ip, [r2, #-32]	; 0xffffffe0
   173b0:	add	r3, r3, #1
   173b4:	orrne	ip, ip, r9, lsl sl
   173b8:	addne	r8, r8, #1
   173bc:	strne	ip, [r2, #-32]	; 0xffffffe0
   173c0:	cmp	r3, #252	; 0xfc
   173c4:	add	r1, r1, #24
   173c8:	bne	17394 <build_ast@@Base+0x1178>
   173cc:	add	r8, r8, r8, lsl #2
   173d0:	add	r1, r8, #17
   173d4:	bl	17338 <build_ast@@Base+0x111c>
   173d8:	ldr	r0, [r5]
   173dc:	bl	17300 <build_ast@@Base+0x10e4>
   173e0:	ldr	r0, [r5, #8]
   173e4:	bl	17300 <build_ast@@Base+0x10e4>
   173e8:	ldr	r0, [r5, #12]
   173ec:	bl	17300 <build_ast@@Base+0x10e4>
   173f0:	ldrd	r0, [r5, #16]
   173f4:	bl	17318 <build_ast@@Base+0x10fc>
   173f8:	ldrd	r0, [r5, #24]
   173fc:	bl	17318 <build_ast@@Base+0x10fc>
   17400:	ldrd	r0, [r5, #32]
   17404:	bl	17318 <build_ast@@Base+0x10fc>
   17408:	ldr	r0, [r7], #4
   1740c:	bl	17300 <build_ast@@Base+0x10e4>
   17410:	cmp	r7, r6
   17414:	bne	17408 <build_ast@@Base+0x11ec>
   17418:	add	r5, r5, #6016	; 0x1780
   1741c:	add	r5, r5, #32
   17420:	b	17430 <build_ast@@Base+0x1214>
   17424:	add	r4, r4, #24
   17428:	cmp	r4, r5
   1742c:	beq	1745c <build_ast@@Base+0x1240>
   17430:	ldr	r0, [r4, #40]	; 0x28
   17434:	cmp	r0, #0
   17438:	beq	17424 <build_ast@@Base+0x1208>
   1743c:	bl	17300 <build_ast@@Base+0x10e4>
   17440:	ldrd	r0, [r4, #48]	; 0x30
   17444:	bl	17318 <build_ast@@Base+0x10fc>
   17448:	add	r4, r4, #24
   1744c:	ldrd	r0, [r4, #32]
   17450:	bl	17318 <build_ast@@Base+0x10fc>
   17454:	cmp	r4, r5
   17458:	bne	17430 <build_ast@@Base+0x1214>
   1745c:	add	sp, sp, #32
   17460:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17464:	push	{r4, lr}
   17468:	mov	r0, #1
   1746c:	bl	163c4 <build_ast@@Base+0x1a8>
   17470:	subs	r3, r0, #0
   17474:	popeq	{r4, pc}
   17478:	ldr	r0, [r3]
   1747c:	pop	{r4, lr}
   17480:	b	162dc <build_ast@@Base+0xc0>
   17484:	push	{r4, r5, r6, lr}
   17488:	mov	r0, #2
   1748c:	bl	163c4 <build_ast@@Base+0x1a8>
   17490:	subs	r3, r0, #0
   17494:	beq	174c4 <build_ast@@Base+0x12a8>
   17498:	ldr	r0, [r3]
   1749c:	bl	162dc <build_ast@@Base+0xc0>
   174a0:	mov	r5, #0
   174a4:	mov	r4, r0
   174a8:	ldr	r0, [r3, #4]
   174ac:	bl	162dc <build_ast@@Base+0xc0>
   174b0:	mov	r2, #0
   174b4:	mov	r3, r0
   174b8:	orr	r1, r3, r5
   174bc:	orr	r0, r2, r4
   174c0:	pop	{r4, r5, r6, pc}
   174c4:	mov	r0, #0
   174c8:	mov	r1, #0
   174cc:	pop	{r4, r5, r6, pc}
   174d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174d4:	sub	sp, sp, #28
   174d8:	mov	r4, #0
   174dc:	str	r1, [sp, #8]
   174e0:	str	r3, [sp, #12]
   174e4:	add	r3, r1, #56	; 0x38
   174e8:	add	r1, r1, #16
   174ec:	str	r0, [sp, #16]
   174f0:	str	r2, [sp, #20]
   174f4:	ldr	r2, [r3, #-4]!
   174f8:	cmp	r2, #0
   174fc:	addne	r4, r4, #1
   17500:	cmp	r3, r1
   17504:	bne	174f4 <build_ast@@Base+0x12d8>
   17508:	add	r4, r4, #4
   1750c:	lsl	r4, r4, #3
   17510:	mov	r0, r4
   17514:	bl	118d0 <malloc@plt>
   17518:	subs	r8, r0, #0
   1751c:	beq	175e0 <build_ast@@Base+0x13c4>
   17520:	ldr	r3, [sp, #12]
   17524:	mov	r4, #0
   17528:	str	r3, [r8, #4]
   1752c:	str	r4, [r8]
   17530:	bl	17464 <build_ast@@Base+0x1248>
   17534:	ldr	r3, [sp, #8]
   17538:	ldr	r5, [pc, #272]	; 17650 <build_ast@@Base+0x1434>
   1753c:	add	r6, r3, #12
   17540:	mov	r7, r4
   17544:	str	r0, [r8, #12]
   17548:	bl	17464 <build_ast@@Base+0x1248>
   1754c:	str	r0, [r8, #16]
   17550:	bl	17464 <build_ast@@Base+0x1248>
   17554:	str	r0, [r8, #20]
   17558:	ldr	r3, [r6, #4]!
   1755c:	cmp	r3, #0
   17560:	beq	175bc <build_ast@@Base+0x13a0>
   17564:	bl	17464 <build_ast@@Base+0x1248>
   17568:	cmp	r5, r0
   1756c:	bne	17634 <build_ast@@Base+0x1418>
   17570:	bl	17464 <build_ast@@Base+0x1248>
   17574:	lsr	r9, r0, #1
   17578:	lsl	fp, r9, #3
   1757c:	mov	r0, fp
   17580:	bl	118d0 <malloc@plt>
   17584:	subs	sl, r0, #0
   17588:	beq	17644 <build_ast@@Base+0x1428>
   1758c:	add	r3, r8, r7, lsl #3
   17590:	cmp	r9, #0
   17594:	str	r9, [r3, #24]
   17598:	str	sl, [r3, #28]
   1759c:	sub	r9, r9, #1
   175a0:	beq	175b8 <build_ast@@Base+0x139c>
   175a4:	bl	17484 <build_ast@@Base+0x1268>
   175a8:	sub	r9, r9, #1
   175ac:	cmn	r9, #1
   175b0:	strd	r0, [sl], #8
   175b4:	bne	175a4 <build_ast@@Base+0x1388>
   175b8:	add	r7, r7, #1
   175bc:	add	r4, r4, #1
   175c0:	cmp	r4, #10
   175c4:	add	r5, r5, #131072	; 0x20000
   175c8:	bne	17558 <build_ast@@Base+0x133c>
   175cc:	ldr	r3, [sp, #20]
   175d0:	mov	r0, r8
   175d4:	str	r8, [r3]
   175d8:	add	sp, sp, #28
   175dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175e0:	mvn	r5, #0
   175e4:	cmp	r4, #0
   175e8:	beq	17624 <build_ast@@Base+0x1408>
   175ec:	ldr	r3, [pc, #96]	; 17654 <build_ast@@Base+0x1438>
   175f0:	add	r3, pc, r3
   175f4:	ldr	r0, [pc, #92]	; 17658 <build_ast@@Base+0x143c>
   175f8:	ldr	r2, [sp, #12]
   175fc:	ldr	r1, [sp, #16]
   17600:	str	r4, [sp]
   17604:	add	r0, pc, r0
   17608:	bl	16480 <build_ast@@Base+0x264>
   1760c:	mov	r2, r5
   17610:	mov	r1, r8
   17614:	ldr	r0, [sp, #8]
   17618:	add	sp, sp, #28
   1761c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17620:	b	164c8 <build_ast@@Base+0x2ac>
   17624:	ldr	r3, [pc, #48]	; 1765c <build_ast@@Base+0x1440>
   17628:	mov	r4, r5
   1762c:	add	r3, pc, r3
   17630:	b	175f4 <build_ast@@Base+0x13d8>
   17634:	ldr	r3, [pc, #36]	; 17660 <build_ast@@Base+0x1444>
   17638:	mov	r5, r4
   1763c:	add	r3, pc, r3
   17640:	b	175f4 <build_ast@@Base+0x13d8>
   17644:	mov	r5, r4
   17648:	mov	r4, fp
   1764c:	b	175e4 <build_ast@@Base+0x13c8>
   17650:			; <UNDEFINED> instruction: 0x01a10000
   17654:	andeq	r1, r0, r0, asr #17
   17658:	ldrdeq	r1, [r0], -r0
   1765c:	muleq	r0, r4, r8
   17660:	andeq	r1, r0, r4, lsl #17
   17664:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17668:	sub	sp, sp, #44	; 0x2c
   1766c:	mov	r9, r0
   17670:	bl	17464 <build_ast@@Base+0x1248>
   17674:	mov	r7, #0
   17678:	add	sl, sp, #8
   1767c:	mov	r4, sl
   17680:	add	r5, sp, #40	; 0x28
   17684:	str	r0, [r9]
   17688:	bl	17464 <build_ast@@Base+0x1248>
   1768c:	str	r0, [r9, #8]
   17690:	bl	17464 <build_ast@@Base+0x1248>
   17694:	str	r0, [r9, #12]
   17698:	bl	17484 <build_ast@@Base+0x1268>
   1769c:	strd	r0, [r9, #16]
   176a0:	bl	17484 <build_ast@@Base+0x1268>
   176a4:	strd	r0, [r9, #24]
   176a8:	bl	17484 <build_ast@@Base+0x1268>
   176ac:	ldr	r2, [pc, #244]	; 177a8 <build_ast@@Base+0x158c>
   176b0:	strd	r0, [r9, #32]
   176b4:	add	r0, r9, #40	; 0x28
   176b8:	mov	r1, r7
   176bc:	bl	1196c <memset@plt>
   176c0:	bl	17464 <build_ast@@Base+0x1248>
   176c4:	str	r0, [r4], #4
   176c8:	bl	1834c <__gcov_sort_n_vals@@Base+0x618>
   176cc:	cmp	r5, r4
   176d0:	add	r7, r7, r0
   176d4:	bne	176c0 <build_ast@@Base+0x14a4>
   176d8:	cmp	r7, #0
   176dc:	sub	r7, r7, #1
   176e0:	beq	17794 <build_ast@@Base+0x1578>
   176e4:	ldr	r8, [pc, #192]	; 177ac <build_ast@@Base+0x1590>
   176e8:	mov	r4, #0
   176ec:	ldr	r3, [pc, #188]	; 177b0 <build_ast@@Base+0x1594>
   176f0:	add	r8, pc, r8
   176f4:	mov	r5, r4
   176f8:	mov	r6, r4
   176fc:	add	r3, pc, r3
   17700:	str	r3, [sp, #4]
   17704:	cmp	r4, #0
   17708:	addeq	r6, sl, r5, lsl #2
   1770c:	beq	17718 <build_ast@@Base+0x14fc>
   17710:	b	17740 <build_ast@@Base+0x1524>
   17714:	mov	r5, r3
   17718:	cmp	r5, #7
   1771c:	bls	17728 <build_ast@@Base+0x150c>
   17720:	mov	r0, r8
   17724:	bl	16480 <build_ast@@Base+0x264>
   17728:	ldr	r4, [r6], #4
   1772c:	add	r3, r5, #1
   17730:	cmp	r4, #0
   17734:	beq	17714 <build_ast@@Base+0x14f8>
   17738:	lsl	r6, r5, #5
   1773c:	mov	r5, r3
   17740:	tst	r4, #1
   17744:	bne	17758 <build_ast@@Base+0x153c>
   17748:	lsr	r4, r4, #1
   1774c:	tst	r4, #1
   17750:	add	r6, r6, #1
   17754:	beq	17748 <build_ast@@Base+0x152c>
   17758:	cmp	r6, #251	; 0xfb
   1775c:	bhi	1779c <build_ast@@Base+0x1580>
   17760:	bl	17464 <build_ast@@Base+0x1248>
   17764:	add	r3, r6, r6, lsl #1
   17768:	sub	r7, r7, #1
   1776c:	add	fp, r9, r3, lsl #3
   17770:	lsr	r4, r4, #1
   17774:	add	r6, r6, #1
   17778:	str	r0, [fp, #40]	; 0x28
   1777c:	bl	17484 <build_ast@@Base+0x1268>
   17780:	strd	r0, [fp, #48]	; 0x30
   17784:	bl	17484 <build_ast@@Base+0x1268>
   17788:	cmn	r7, #1
   1778c:	strd	r0, [fp, #56]	; 0x38
   17790:	bne	17704 <build_ast@@Base+0x14e8>
   17794:	add	sp, sp, #44	; 0x2c
   17798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1779c:	ldr	r0, [sp, #4]
   177a0:	bl	16480 <build_ast@@Base+0x264>
   177a4:	b	17760 <build_ast@@Base+0x1544>
   177a8:	andeq	r1, r0, r0, lsr #15
   177ac:	andeq	r1, r0, r4, asr #16
   177b0:	strdeq	r1, [r0], -ip
   177b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177b8:	sub	sp, sp, #6080	; 0x17c0
   177bc:	sub	sp, sp, #28
   177c0:	mov	r4, r1
   177c4:	stmib	sp, {r2, r3}
   177c8:	add	r3, sp, #6144	; 0x1800
   177cc:	mov	sl, r0
   177d0:	ldr	r7, [r3]
   177d4:	add	r3, sp, #6144	; 0x1800
   177d8:	add	r3, r3, #4
   177dc:	ldr	r6, [r3]
   177e0:	bl	17464 <build_ast@@Base+0x1248>
   177e4:	add	r3, r4, #12
   177e8:	mov	r2, sl
   177ec:	str	r3, [sp, #12]
   177f0:	mov	r1, r0
   177f4:	mov	r0, r3
   177f8:	bl	16e48 <build_ast@@Base+0xc2c>
   177fc:	cmp	r0, #0
   17800:	beq	17a80 <build_ast@@Base+0x1864>
   17804:	bl	17464 <build_ast@@Base+0x1248>
   17808:	ldr	r3, [r4, #8]
   1780c:	cmp	r0, r3
   17810:	beq	17824 <build_ast@@Base+0x1608>
   17814:	mov	r0, #0
   17818:	add	sp, sp, #6080	; 0x17c0
   1781c:	add	sp, sp, #28
   17820:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17824:	ldr	fp, [pc, #628]	; 17aa0 <build_ast@@Base+0x1884>
   17828:	add	r9, sp, #2000	; 0x7d0
   1782c:	add	r5, sp, #16
   17830:	add	fp, pc, fp
   17834:	add	r9, r9, #8
   17838:	bl	1628c <build_ast@@Base+0x70>
   1783c:	str	r0, [r6]
   17840:	bl	17464 <build_ast@@Base+0x1248>
   17844:	cmp	r0, #-1560281088	; 0xa3000000
   17848:	bne	178ec <build_ast@@Base+0x16d0>
   1784c:	bl	17464 <build_ast@@Base+0x1248>
   17850:	mov	r0, r5
   17854:	bl	17664 <build_ast@@Base+0x1448>
   17858:	bl	162b0 <build_ast@@Base+0x94>
   1785c:	subs	r8, r0, #0
   17860:	bne	17a20 <build_ast@@Base+0x1804>
   17864:	ldr	r3, [r7]
   17868:	cmp	r3, #0
   1786c:	bne	178b8 <build_ast@@Base+0x169c>
   17870:	add	r2, sp, #6144	; 0x1800
   17874:	add	r2, r2, #8
   17878:	ldr	r3, [r9, #-1992]	; 0xfffff838
   1787c:	ldr	r2, [r2]
   17880:	cmp	r3, r2
   17884:	bne	17838 <build_ast@@Base+0x161c>
   17888:	ldr	r3, [sp, #8]
   1788c:	ldr	ip, [r9, #-1984]	; 0xfffff840
   17890:	ldr	r2, [pc, #524]	; 17aa4 <build_ast@@Base+0x1888>
   17894:	ldr	r3, [r3, #8]
   17898:	mov	r1, r5
   1789c:	cmp	ip, r3
   178a0:	ldr	r0, [sp, #4]
   178a4:	bne	17838 <build_ast@@Base+0x161c>
   178a8:	bl	1187c <memcpy@plt>
   178ac:	ldr	r3, [r6]
   178b0:	str	r3, [r7]
   178b4:	b	17838 <build_ast@@Base+0x161c>
   178b8:	ldr	r0, [pc, #488]	; 17aa8 <build_ast@@Base+0x188c>
   178bc:	bl	118d0 <malloc@plt>
   178c0:	ldr	r2, [pc, #476]	; 17aa4 <build_ast@@Base+0x1888>
   178c4:	mov	r1, r5
   178c8:	mov	r3, r0
   178cc:	str	r0, [fp]
   178d0:	add	r0, r0, #8
   178d4:	str	r3, [sp]
   178d8:	bl	1187c <memcpy@plt>
   178dc:	ldr	r3, [sp]
   178e0:	str	r8, [r3]
   178e4:	ldr	fp, [fp]
   178e8:	b	17838 <build_ast@@Base+0x161c>
   178ec:	ldr	r5, [r4, #56]	; 0x38
   178f0:	cmp	r5, #0
   178f4:	beq	17a88 <build_ast@@Base+0x186c>
   178f8:	ldr	r3, [r4, #60]	; 0x3c
   178fc:	cmp	r0, #16777216	; 0x1000000
   17900:	ldr	r8, [r3]
   17904:	bne	17a50 <build_ast@@Base+0x1834>
   17908:	ldr	r6, [pc, #412]	; 17aac <build_ast@@Base+0x1890>
   1790c:	mov	r5, #0
   17910:	add	r6, pc, r6
   17914:	add	r6, r6, #4
   17918:	b	1795c <build_ast@@Base+0x1740>
   1791c:	mov	r2, r6
   17920:	mov	r3, r5
   17924:	mov	r1, r4
   17928:	mov	r0, sl
   1792c:	bl	174d0 <build_ast@@Base+0x12b4>
   17930:	subs	r6, r0, #0
   17934:	beq	17a54 <build_ast@@Base+0x1838>
   17938:	bl	17464 <build_ast@@Base+0x1248>
   1793c:	ldr	r3, [r4, #56]	; 0x38
   17940:	add	r5, r5, #1
   17944:	cmp	r3, r5
   17948:	beq	17a88 <build_ast@@Base+0x186c>
   1794c:	ldr	r3, [r4, #60]	; 0x3c
   17950:	cmp	r0, #16777216	; 0x1000000
   17954:	ldr	r8, [r3, r5, lsl #2]
   17958:	bne	17a54 <build_ast@@Base+0x1838>
   1795c:	bl	17464 <build_ast@@Base+0x1248>
   17960:	cmp	r0, #0
   17964:	beq	17938 <build_ast@@Base+0x171c>
   17968:	cmp	r0, #3
   1796c:	bne	17a54 <build_ast@@Base+0x1838>
   17970:	cmp	r8, #0
   17974:	beq	1791c <build_ast@@Base+0x1700>
   17978:	ldr	r3, [r8]
   1797c:	cmp	r4, r3
   17980:	bne	1791c <build_ast@@Base+0x1700>
   17984:	bl	17464 <build_ast@@Base+0x1248>
   17988:	ldr	r3, [r8, #4]
   1798c:	cmp	r0, r3
   17990:	bne	17a54 <build_ast@@Base+0x1838>
   17994:	bl	17464 <build_ast@@Base+0x1248>
   17998:	ldr	r3, [r8, #8]
   1799c:	cmp	r0, r3
   179a0:	bne	17a54 <build_ast@@Base+0x1838>
   179a4:	bl	17464 <build_ast@@Base+0x1248>
   179a8:	ldr	r3, [r8, #12]
   179ac:	cmp	r0, r3
   179b0:	bne	17a54 <build_ast@@Base+0x1838>
   179b4:	ldr	r7, [pc, #244]	; 17ab0 <build_ast@@Base+0x1894>
   179b8:	ldr	fp, [sp, #12]
   179bc:	add	r8, r8, #16
   179c0:	ldr	r9, [fp, #4]!
   179c4:	cmp	r9, #0
   179c8:	beq	17a00 <build_ast@@Base+0x17e4>
   179cc:	bl	17464 <build_ast@@Base+0x1248>
   179d0:	str	r0, [sp]
   179d4:	bl	17464 <build_ast@@Base+0x1248>
   179d8:	ldr	r3, [sp]
   179dc:	cmp	r3, r7
   179e0:	bne	17a54 <build_ast@@Base+0x1838>
   179e4:	ldr	r3, [r8]
   179e8:	mov	r1, r3
   179ec:	cmp	r0, r3, lsl #1
   179f0:	bne	17a54 <build_ast@@Base+0x1838>
   179f4:	ldr	r0, [r8, #4]
   179f8:	blx	r9
   179fc:	add	r8, r8, #8
   17a00:	ldr	r3, [pc, #172]	; 17ab4 <build_ast@@Base+0x1898>
   17a04:	add	r7, r7, #131072	; 0x20000
   17a08:	cmp	r7, r3
   17a0c:	bne	179c0 <build_ast@@Base+0x17a4>
   17a10:	bl	162b0 <build_ast@@Base+0x94>
   17a14:	cmp	r0, #0
   17a18:	beq	17938 <build_ast@@Base+0x171c>
   17a1c:	mov	r8, r0
   17a20:	cmp	r8, #0
   17a24:	blt	17a94 <build_ast@@Base+0x1878>
   17a28:	ldr	r2, [pc, #136]	; 17ab8 <build_ast@@Base+0x189c>
   17a2c:	add	r2, pc, r2
   17a30:	ldr	r0, [pc, #132]	; 17abc <build_ast@@Base+0x18a0>
   17a34:	mov	r1, sl
   17a38:	add	r0, pc, r0
   17a3c:	bl	16480 <build_ast@@Base+0x264>
   17a40:	mvn	r0, #0
   17a44:	add	sp, sp, #6080	; 0x17c0
   17a48:	add	sp, sp, #28
   17a4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a50:	mov	r5, #0
   17a54:	ldr	r2, [pc, #100]	; 17ac0 <build_ast@@Base+0x18a4>
   17a58:	ldr	r0, [pc, #100]	; 17ac4 <build_ast@@Base+0x18a8>
   17a5c:	mov	r3, r5
   17a60:	mov	r1, sl
   17a64:	add	r2, pc, r2
   17a68:	add	r0, pc, r0
   17a6c:	bl	16480 <build_ast@@Base+0x264>
   17a70:	mvn	r0, #0
   17a74:	add	sp, sp, #6080	; 0x17c0
   17a78:	add	sp, sp, #28
   17a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a80:	mvn	r0, #0
   17a84:	b	17818 <build_ast@@Base+0x15fc>
   17a88:	cmp	r0, #0
   17a8c:	beq	17814 <build_ast@@Base+0x15f8>
   17a90:	b	17a54 <build_ast@@Base+0x1838>
   17a94:	ldr	r2, [pc, #44]	; 17ac8 <build_ast@@Base+0x18ac>
   17a98:	add	r2, pc, r2
   17a9c:	b	17a30 <build_ast@@Base+0x1814>
   17aa0:	andeq	r3, r1, r0, ror #30
   17aa4:	andeq	r1, r0, r8, asr #15
   17aa8:	ldrdeq	r1, [r0], -r0
   17aac:	andeq	r3, r1, r0, lsl #29
   17ab0:			; <UNDEFINED> instruction: 0x01a10000
   17ab4:			; <UNDEFINED> instruction: 0x01b50000
   17ab8:	andeq	r1, r0, r4, asr r5
   17abc:	andeq	r1, r0, r8, ror r5
   17ac0:	andeq	r0, r0, r0, lsr #31
   17ac4:	andeq	r1, r0, r0, lsr #10
   17ac8:	ldrdeq	r1, [r0], -ip
   17acc:	ldr	r3, [pc, #68]	; 17b18 <build_ast@@Base+0x18fc>
   17ad0:	ldr	r2, [pc, #68]	; 17b1c <build_ast@@Base+0x1900>
   17ad4:	add	r3, pc, r3
   17ad8:	push	{r4, r5, r6, lr}
   17adc:	mov	r5, r0
   17ae0:	ldr	r4, [r3, r2]
   17ae4:	ldr	r0, [r4, #8]
   17ae8:	cmp	r0, #0
   17aec:	beq	17af4 <build_ast@@Base+0x18d8>
   17af0:	bl	1630c <build_ast@@Base+0xf0>
   17af4:	lsl	r1, r5, #2
   17af8:	mov	r2, #0
   17afc:	ldr	r0, [r4]
   17b00:	bl	119b4 <fseek@plt>
   17b04:	ldr	r0, [r4]
   17b08:	bl	11888 <ftell@plt>
   17b0c:	asr	r0, r0, #2
   17b10:	str	r0, [r4, #4]
   17b14:	pop	{r4, r5, r6, pc}
   17b18:	andeq	r2, r1, r4, lsr #10
   17b1c:	strheq	r0, [r0], -r8
   17b20:	cmp	r2, #0
   17b24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b28:	mov	r9, r0
   17b2c:	sub	sp, sp, #20
   17b30:	mov	r5, r1
   17b34:	mov	r4, r3
   17b38:	beq	17cf0 <build_ast@@Base+0x1ad4>
   17b3c:	cmp	r4, #0
   17b40:	bne	17d0c <build_ast@@Base+0x1af0>
   17b44:	mov	r1, r5
   17b48:	ldr	r5, [pc, #456]	; 17d18 <build_ast@@Base+0x1afc>
   17b4c:	mov	r0, #-1560281088	; 0xa3000000
   17b50:	add	r5, pc, r5
   17b54:	bl	17358 <build_ast@@Base+0x113c>
   17b58:	ldr	r4, [r5]
   17b5c:	cmp	r4, #0
   17b60:	movne	r6, #-1560281088	; 0xa3000000
   17b64:	beq	17b90 <build_ast@@Base+0x1974>
   17b68:	add	r1, r4, #8
   17b6c:	mov	r0, r6
   17b70:	bl	17358 <build_ast@@Base+0x113c>
   17b74:	ldr	r3, [r5]
   17b78:	mov	r0, r3
   17b7c:	ldr	r4, [r3]
   17b80:	bl	11870 <free@plt>
   17b84:	cmp	r4, #0
   17b88:	str	r4, [r5]
   17b8c:	bne	17b68 <build_ast@@Base+0x194c>
   17b90:	ldr	r3, [r9, #56]	; 0x38
   17b94:	cmp	r3, #0
   17b98:	beq	17cd4 <build_ast@@Base+0x1ab8>
   17b9c:	ldr	r3, [pc, #376]	; 17d1c <build_ast@@Base+0x1b00>
   17ba0:	ldr	r8, [pc, #376]	; 17d20 <build_ast@@Base+0x1b04>
   17ba4:	add	r3, pc, r3
   17ba8:	str	r3, [sp, #4]
   17bac:	ldr	r3, [pc, #368]	; 17d24 <build_ast@@Base+0x1b08>
   17bb0:	mov	r7, #0
   17bb4:	add	r3, pc, r3
   17bb8:	str	r3, [sp, #12]
   17bbc:	b	17bf8 <build_ast@@Base+0x19dc>
   17bc0:	ldr	r3, [r9, #60]	; 0x3c
   17bc4:	ldr	r4, [r3, r7, lsl #2]
   17bc8:	cmp	r4, #0
   17bcc:	beq	17bdc <build_ast@@Base+0x19c0>
   17bd0:	ldr	r3, [r4]
   17bd4:	cmp	r9, r3
   17bd8:	beq	17ce4 <build_ast@@Base+0x1ac8>
   17bdc:	mov	r1, #0
   17be0:	mov	r0, #16777216	; 0x1000000
   17be4:	bl	17338 <build_ast@@Base+0x111c>
   17be8:	ldr	r3, [r9, #56]	; 0x38
   17bec:	add	r7, r7, #1
   17bf0:	cmp	r3, r7
   17bf4:	beq	17cd4 <build_ast@@Base+0x1ab8>
   17bf8:	ldr	r3, [sp, #4]
   17bfc:	ldr	r4, [r3, #4]
   17c00:	cmp	r4, #0
   17c04:	beq	17bc0 <build_ast@@Base+0x19a4>
   17c08:	ldr	r3, [r4, #4]
   17c0c:	cmp	r3, r7
   17c10:	moveq	r3, #1
   17c14:	addeq	r4, r4, #8
   17c18:	streq	r3, [sp, #8]
   17c1c:	bne	17bc0 <build_ast@@Base+0x19a4>
   17c20:	mov	r1, #3
   17c24:	mov	r0, #16777216	; 0x1000000
   17c28:	bl	17338 <build_ast@@Base+0x111c>
   17c2c:	ldr	r0, [r4, #4]
   17c30:	bl	17300 <build_ast@@Base+0x10e4>
   17c34:	ldr	r0, [r4, #8]
   17c38:	bl	17300 <build_ast@@Base+0x10e4>
   17c3c:	ldr	r0, [r4, #12]
   17c40:	bl	17300 <build_ast@@Base+0x10e4>
   17c44:	ldr	r5, [pc, #220]	; 17d28 <build_ast@@Base+0x1b0c>
   17c48:	add	r4, r4, #16
   17c4c:	add	r6, r9, #12
   17c50:	ldr	r3, [r6, #4]!
   17c54:	cmp	r3, #0
   17c58:	beq	17c94 <build_ast@@Base+0x1a78>
   17c5c:	ldr	fp, [r4]
   17c60:	mov	r0, r5
   17c64:	sub	sl, fp, #1
   17c68:	lsl	r1, fp, #1
   17c6c:	bl	17338 <build_ast@@Base+0x111c>
   17c70:	cmp	fp, #0
   17c74:	ldr	fp, [r4, #4]
   17c78:	beq	17c90 <build_ast@@Base+0x1a74>
   17c7c:	sub	sl, sl, #1
   17c80:	ldrd	r0, [fp], #8
   17c84:	bl	17318 <build_ast@@Base+0x10fc>
   17c88:	cmn	sl, #1
   17c8c:	bne	17c7c <build_ast@@Base+0x1a60>
   17c90:	add	r4, r4, #8
   17c94:	add	r5, r5, #131072	; 0x20000
   17c98:	cmp	r5, r8
   17c9c:	bne	17c50 <build_ast@@Base+0x1a34>
   17ca0:	ldr	r3, [sp, #8]
   17ca4:	cmp	r3, #0
   17ca8:	beq	17be8 <build_ast@@Base+0x19cc>
   17cac:	ldr	r4, [sp, #12]
   17cb0:	mov	r2, #10
   17cb4:	mov	r0, r9
   17cb8:	ldr	r1, [r4, #4]
   17cbc:	bl	164c8 <build_ast@@Base+0x2ac>
   17cc0:	ldr	r3, [r9, #56]	; 0x38
   17cc4:	add	r7, r7, #1
   17cc8:	cmp	r3, r7
   17ccc:	str	r0, [r4, #4]
   17cd0:	bne	17bf8 <build_ast@@Base+0x19dc>
   17cd4:	mov	r0, #0
   17cd8:	add	sp, sp, #20
   17cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ce0:	b	17300 <build_ast@@Base+0x10e4>
   17ce4:	mov	r3, #0
   17ce8:	str	r3, [sp, #8]
   17cec:	b	17c20 <build_ast@@Base+0x1a04>
   17cf0:	ldr	r1, [pc, #52]	; 17d2c <build_ast@@Base+0x1b10>
   17cf4:	ldr	r0, [pc, #52]	; 17d30 <build_ast@@Base+0x1b14>
   17cf8:	bl	17338 <build_ast@@Base+0x111c>
   17cfc:	ldr	r0, [r9, #8]
   17d00:	bl	17300 <build_ast@@Base+0x10e4>
   17d04:	cmp	r4, #0
   17d08:	beq	17b44 <build_ast@@Base+0x1928>
   17d0c:	mov	r0, r4
   17d10:	bl	17acc <build_ast@@Base+0x18b0>
   17d14:	b	17b44 <build_ast@@Base+0x1928>
   17d18:	andeq	r3, r1, r0, asr #24
   17d1c:	andeq	r3, r1, ip, ror #23
   17d20:			; <UNDEFINED> instruction: 0x01b50000
   17d24:	ldrdeq	r3, [r1], -ip
   17d28:			; <UNDEFINED> instruction: 0x01a10000
   17d2c:	ldrtcc	r3, [r0], -sl, lsr #10
   17d30:	strbvs	r6, [r3, -r1, ror #8]!

00017d34 <__gcov_sort_n_vals@@Base>:
   17d34:	cmp	r1, #2
   17d38:	bxle	lr
   17d3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d40:	sub	lr, r1, #3
   17d44:	mov	ip, #0
   17d48:	lsr	lr, lr, #1
   17d4c:	add	r1, r0, #8
   17d50:	add	lr, r0, lr, lsl #4
   17d54:	add	lr, lr, #24
   17d58:	ldrd	r4, [r1, #16]
   17d5c:	ldrd	r6, [r1]
   17d60:	ldrd	r8, [r1, #8]
   17d64:	mov	r2, ip
   17d68:	cmp	r6, r4
   17d6c:	sbcs	r3, r7, r5
   17d70:	mov	fp, ip
   17d74:	bge	17dbc <__gcov_sort_n_vals@@Base+0x88>
   17d78:	add	r3, r1, #8
   17d7c:	mov	sl, #0
   17d80:	b	17d98 <__gcov_sort_n_vals@@Base+0x64>
   17d84:	ldrd	r6, [r3, #-24]	; 0xffffffe8
   17d88:	sub	r3, r3, #16
   17d8c:	cmp	r6, r4
   17d90:	sbcs	r6, r7, r5
   17d94:	bge	17dbc <__gcov_sort_n_vals@@Base+0x88>
   17d98:	ldrd	r6, [r3, #-16]
   17d9c:	subs	r2, r2, #2
   17da0:	mov	fp, r2
   17da4:	strd	r6, [r3]
   17da8:	ldrd	r6, [r1, sl]
   17dac:	sub	sl, sl, #16
   17db0:	strd	r6, [r3, #8]
   17db4:	mov	r6, r3
   17db8:	bpl	17d84 <__gcov_sort_n_vals@@Base+0x50>
   17dbc:	add	fp, fp, #2
   17dc0:	mov	r3, r0
   17dc4:	add	r1, r1, #16
   17dc8:	lsl	fp, fp, #3
   17dcc:	cmp	lr, r1
   17dd0:	strd	r8, [r3, fp]!
   17dd4:	add	ip, ip, #2
   17dd8:	strd	r4, [r3, #8]
   17ddc:	bne	17d58 <__gcov_sort_n_vals@@Base+0x24>
   17de0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17de4:	push	{r4, r5, r6, r7, r8, lr}
   17de8:	ldr	r6, [r0]
   17dec:	ldr	r4, [pc, #76]	; 17e40 <__gcov_sort_n_vals@@Base+0x10c>
   17df0:	smull	r2, r3, r4, r6
   17df4:	asr	r4, r6, #31
   17df8:	rsb	r4, r4, r3, asr #1
   17dfc:	add	r4, r4, r4, lsl #3
   17e00:	subs	r4, r6, r4
   17e04:	bne	17e3c <__gcov_sort_n_vals@@Base+0x108>
   17e08:	cmp	r6, #0
   17e0c:	ldr	r5, [r0, #4]
   17e10:	pople	{r4, r5, r6, r7, r8, pc}
   17e14:	add	r5, r5, #8
   17e18:	mov	r7, #8
   17e1c:	mov	r0, r5
   17e20:	add	r4, r4, #9
   17e24:	mov	r1, r7
   17e28:	bl	17d34 <__gcov_sort_n_vals@@Base>
   17e2c:	cmp	r6, r4
   17e30:	add	r5, r5, #72	; 0x48
   17e34:	bgt	17e1c <__gcov_sort_n_vals@@Base+0xe8>
   17e38:	pop	{r4, r5, r6, r7, r8, pc}
   17e3c:	bl	119cc <abort@plt>
   17e40:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   17e44:	ldr	r3, [r0, #52]	; 0x34
   17e48:	cmp	r3, #0
   17e4c:	bxeq	lr
   17e50:	ldr	ip, [r0, #56]	; 0x38
   17e54:	cmp	ip, #0
   17e58:	bxeq	lr
   17e5c:	push	{r4, r5, r6, lr}
   17e60:	mov	r5, r0
   17e64:	mov	r4, #0
   17e68:	add	r6, r0, #12
   17e6c:	ldr	r1, [r5, #60]	; 0x3c
   17e70:	mov	r2, r6
   17e74:	mov	r3, #0
   17e78:	ldr	r0, [r1, r4, lsl #2]
   17e7c:	add	r0, r0, #16
   17e80:	ldr	r1, [r2, #4]!
   17e84:	cmp	r1, #0
   17e88:	beq	17e98 <__gcov_sort_n_vals@@Base+0x164>
   17e8c:	cmp	r3, #9
   17e90:	beq	17eb4 <__gcov_sort_n_vals@@Base+0x180>
   17e94:	add	r0, r0, #8
   17e98:	add	r3, r3, #1
   17e9c:	cmp	r3, #10
   17ea0:	bne	17e80 <__gcov_sort_n_vals@@Base+0x14c>
   17ea4:	add	r4, r4, #1
   17ea8:	cmp	ip, r4
   17eac:	bne	17e6c <__gcov_sort_n_vals@@Base+0x138>
   17eb0:	pop	{r4, r5, r6, pc}
   17eb4:	bl	17de4 <__gcov_sort_n_vals@@Base+0xb0>
   17eb8:	ldr	ip, [r5, #56]	; 0x38
   17ebc:	add	r4, r4, #1
   17ec0:	cmp	ip, r4
   17ec4:	bne	17e6c <__gcov_sort_n_vals@@Base+0x138>
   17ec8:	b	17eb0 <__gcov_sort_n_vals@@Base+0x17c>
   17ecc:	push	{r4, r5, r6, r7, r8, r9, lr}
   17ed0:	sub	sp, sp, #6080	; 0x17c0
   17ed4:	ldr	ip, [pc, #388]	; 18060 <__gcov_sort_n_vals@@Base+0x32c>
   17ed8:	sub	sp, sp, #36	; 0x24
   17edc:	add	ip, pc, ip
   17ee0:	add	r5, sp, #2016	; 0x7e0
   17ee4:	mov	r4, r0
   17ee8:	mov	r7, r1
   17eec:	mov	r1, #0
   17ef0:	str	r1, [ip, #4]
   17ef4:	str	r1, [ip]
   17ef8:	mov	r8, r2
   17efc:	mov	r6, r3
   17f00:	str	r1, [r5, #-2000]	; 0xfffff830
   17f04:	str	r1, [r5, #-1996]	; 0xfffff834
   17f08:	bl	17e44 <__gcov_sort_n_vals@@Base+0x110>
   17f0c:	mov	r1, r7
   17f10:	ldr	r0, [r4, #12]
   17f14:	bl	1717c <build_ast@@Base+0xf60>
   17f18:	cmn	r0, #1
   17f1c:	beq	17f9c <__gcov_sort_n_vals@@Base+0x268>
   17f20:	bl	17464 <build_ast@@Base+0x1248>
   17f24:	cmp	r0, #0
   17f28:	beq	17fa8 <__gcov_sort_n_vals@@Base+0x274>
   17f2c:	ldr	r3, [pc, #304]	; 18064 <__gcov_sort_n_vals@@Base+0x330>
   17f30:	cmp	r0, r3
   17f34:	beq	18000 <__gcov_sort_n_vals@@Base+0x2cc>
   17f38:	ldr	r0, [pc, #296]	; 18068 <__gcov_sort_n_vals@@Base+0x334>
   17f3c:	ldr	r1, [r7]
   17f40:	add	r0, pc, r0
   17f44:	bl	16480 <build_ast@@Base+0x264>
   17f48:	ldr	r5, [pc, #284]	; 1806c <__gcov_sort_n_vals@@Base+0x338>
   17f4c:	add	r5, pc, r5
   17f50:	ldr	r1, [r5, #4]
   17f54:	cmp	r1, #0
   17f58:	movne	r6, #10
   17f5c:	beq	17f7c <__gcov_sort_n_vals@@Base+0x248>
   17f60:	mov	r2, r6
   17f64:	mov	r0, r4
   17f68:	bl	164c8 <build_ast@@Base+0x2ac>
   17f6c:	cmp	r0, #0
   17f70:	mov	r1, r0
   17f74:	str	r0, [r5, #4]
   17f78:	bne	17f60 <__gcov_sort_n_vals@@Base+0x22c>
   17f7c:	bl	17290 <build_ast@@Base+0x1074>
   17f80:	cmp	r0, #0
   17f84:	beq	17f9c <__gcov_sort_n_vals@@Base+0x268>
   17f88:	blt	1803c <__gcov_sort_n_vals@@Base+0x308>
   17f8c:	ldr	r0, [pc, #220]	; 18070 <__gcov_sort_n_vals@@Base+0x33c>
   17f90:	add	r0, pc, r0
   17f94:	ldr	r1, [r7]
   17f98:	bl	16480 <build_ast@@Base+0x264>
   17f9c:	add	sp, sp, #6080	; 0x17c0
   17fa0:	add	sp, sp, #36	; 0x24
   17fa4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17fa8:	add	r9, sp, #24
   17fac:	bl	17010 <build_ast@@Base+0xdf4>
   17fb0:	ldr	r1, [r5, #-2000]	; 0xfffff830
   17fb4:	cmp	r1, #0
   17fb8:	beq	18048 <__gcov_sort_n_vals@@Base+0x314>
   17fbc:	add	r3, sp, #6144	; 0x1800
   17fc0:	ldr	r0, [r7]
   17fc4:	str	r6, [sp, #4]
   17fc8:	ldr	r3, [r3]
   17fcc:	mov	r1, r8
   17fd0:	str	r3, [sp]
   17fd4:	mov	r2, r4
   17fd8:	mov	r3, r9
   17fdc:	bl	16ed4 <build_ast@@Base+0xcb8>
   17fe0:	cmn	r0, #1
   17fe4:	beq	17f48 <__gcov_sort_n_vals@@Base+0x214>
   17fe8:	mov	r1, r9
   17fec:	ldr	r3, [r5, #-2000]	; 0xfffff830
   17ff0:	ldr	r2, [r5, #-1996]	; 0xfffff834
   17ff4:	mov	r0, r4
   17ff8:	bl	17b20 <build_ast@@Base+0x1904>
   17ffc:	b	17f48 <__gcov_sort_n_vals@@Base+0x214>
   18000:	add	r3, sp, #16
   18004:	ldr	r0, [r7]
   18008:	str	r3, [sp]
   1800c:	add	r3, sp, #6144	; 0x1800
   18010:	add	r1, sp, #20
   18014:	add	r9, sp, #24
   18018:	str	r1, [sp, #4]
   1801c:	str	r6, [sp, #8]
   18020:	mov	r2, r9
   18024:	ldr	r3, [r3]
   18028:	mov	r1, r4
   1802c:	bl	177b4 <build_ast@@Base+0x1598>
   18030:	cmn	r0, #1
   18034:	bne	17fac <__gcov_sort_n_vals@@Base+0x278>
   18038:	b	17f48 <__gcov_sort_n_vals@@Base+0x214>
   1803c:	ldr	r0, [pc, #48]	; 18074 <__gcov_sort_n_vals@@Base+0x340>
   18040:	add	r0, pc, r0
   18044:	b	17f94 <__gcov_sort_n_vals@@Base+0x260>
   18048:	ldr	r2, [pc, #40]	; 18078 <__gcov_sort_n_vals@@Base+0x344>
   1804c:	mov	r0, r9
   18050:	bl	1196c <memset@plt>
   18054:	ldr	r3, [r5, #-1996]	; 0xfffff834
   18058:	str	r3, [r5, #-2000]	; 0xfffff830
   1805c:	b	17fbc <__gcov_sort_n_vals@@Base+0x288>
   18060:			; <UNDEFINED> instruction: 0x000138b4
   18064:	strbvs	r6, [r3, -r1, ror #8]!
   18068:	andeq	r1, r0, r8, asr #1
   1806c:	andeq	r3, r1, r4, asr #16
   18070:	andeq	r1, r0, ip, asr r0
   18074:	andeq	r0, r0, ip, lsl #31
   18078:	andeq	r1, r0, r8, asr #15
   1807c:	push	{r4, r5, r6, r7, r8, lr}
   18080:	sub	sp, sp, #6080	; 0x17c0
   18084:	sub	sp, sp, #32
   18088:	add	r6, sp, #24
   1808c:	add	r2, sp, #12
   18090:	mov	r8, r1
   18094:	mov	r1, r6
   18098:	mov	r4, r0
   1809c:	bl	166e0 <build_ast@@Base+0x4c4>
   180a0:	add	r5, sp, #8
   180a4:	mov	r7, r0
   180a8:	mov	r0, r5
   180ac:	bl	16864 <build_ast@@Base+0x648>
   180b0:	cmp	r4, #0
   180b4:	beq	180dc <__gcov_sort_n_vals@@Base+0x3a8>
   180b8:	mov	r0, r4
   180bc:	str	r6, [sp]
   180c0:	mov	r3, r7
   180c4:	mov	r2, r8
   180c8:	mov	r1, r5
   180cc:	bl	17ecc <__gcov_sort_n_vals@@Base+0x198>
   180d0:	ldr	r4, [r4, #4]
   180d4:	cmp	r4, #0
   180d8:	bne	180b8 <__gcov_sort_n_vals@@Base+0x384>
   180dc:	ldr	r0, [sp, #8]
   180e0:	bl	11870 <free@plt>
   180e4:	add	sp, sp, #6080	; 0x17c0
   180e8:	add	sp, sp, #32
   180ec:	pop	{r4, r5, r6, r7, r8, pc}
   180f0:	ldrb	r1, [r0, #4]
   180f4:	tst	r1, #1
   180f8:	bxne	lr
   180fc:	push	{r4, lr}
   18100:	lsr	r1, r1, #1
   18104:	mov	r4, r0
   18108:	and	r1, r1, #1
   1810c:	ldr	r0, [r0]
   18110:	bl	1807c <__gcov_sort_n_vals@@Base+0x348>
   18114:	ldrb	r3, [r4, #4]
   18118:	orr	r3, r3, #3
   1811c:	strb	r3, [r4, #4]
   18120:	pop	{r4, pc}
   18124:	push	{r4, r5, r6, lr}
   18128:	ldr	r4, [pc, #76]	; 1817c <__gcov_sort_n_vals@@Base+0x448>
   1812c:	ldr	r5, [pc, #76]	; 18180 <__gcov_sort_n_vals@@Base+0x44c>
   18130:	add	r4, pc, r4
   18134:	mov	r0, r4
   18138:	bl	180f0 <__gcov_sort_n_vals@@Base+0x3bc>
   1813c:	ldr	r3, [r4, #8]
   18140:	add	r5, pc, r5
   18144:	cmp	r3, #0
   18148:	ldrne	r2, [r4, #12]
   1814c:	strne	r2, [r3, #12]
   18150:	ldr	r2, [pc, #44]	; 18184 <__gcov_sort_n_vals@@Base+0x450>
   18154:	add	r2, pc, r2
   18158:	ldr	r2, [r2, #12]
   1815c:	cmp	r2, #0
   18160:	beq	1816c <__gcov_sort_n_vals@@Base+0x438>
   18164:	str	r3, [r2, #8]
   18168:	pop	{r4, r5, r6, pc}
   1816c:	ldr	r2, [pc, #20]	; 18188 <__gcov_sort_n_vals@@Base+0x454>
   18170:	ldr	r2, [r5, r2]
   18174:	str	r3, [r2, #4]
   18178:	pop	{r4, r5, r6, pc}
   1817c:	andeq	r3, r1, r8, asr #19
   18180:			; <UNDEFINED> instruction: 0x00011eb8
   18184:	andeq	r3, r1, r4, lsr #19
   18188:	strheq	r0, [r0], -r4
   1818c:	ldr	r1, [r0]
   18190:	push	{r4, r5, r6, lr}
   18194:	cmp	r1, #0
   18198:	ldr	r5, [pc, #168]	; 18248 <__gcov_sort_n_vals@@Base+0x514>
   1819c:	add	r5, pc, r5
   181a0:	popeq	{r4, r5, r6, pc}
   181a4:	ldr	r3, [r0, #56]	; 0x38
   181a8:	cmp	r3, #0
   181ac:	popeq	{r4, r5, r6, pc}
   181b0:	mov	r4, r0
   181b4:	mov	r2, #0
   181b8:	add	r0, r0, #12
   181bc:	bl	16e48 <build_ast@@Base+0xc2c>
   181c0:	cmp	r0, #0
   181c4:	popeq	{r4, r5, r6, pc}
   181c8:	ldr	r6, [pc, #124]	; 1824c <__gcov_sort_n_vals@@Base+0x518>
   181cc:	add	r6, pc, r6
   181d0:	ldr	r2, [r6]
   181d4:	cmp	r2, #0
   181d8:	beq	181f0 <__gcov_sort_n_vals@@Base+0x4bc>
   181dc:	ldr	r3, [pc, #108]	; 18250 <__gcov_sort_n_vals@@Base+0x51c>
   181e0:	str	r2, [r4, #4]
   181e4:	add	r3, pc, r3
   181e8:	str	r4, [r3]
   181ec:	pop	{r4, r5, r6, pc}
   181f0:	ldr	r3, [pc, #92]	; 18254 <__gcov_sort_n_vals@@Base+0x520>
   181f4:	ldr	r2, [pc, #92]	; 18258 <__gcov_sort_n_vals@@Base+0x524>
   181f8:	mov	r0, #12
   181fc:	ldr	r5, [r5, r3]
   18200:	add	r2, pc, r2
   18204:	ldr	r1, [r5]
   18208:	bl	16e48 <build_ast@@Base+0xc2c>
   1820c:	cmp	r0, #0
   18210:	beq	18230 <__gcov_sort_n_vals@@Base+0x4fc>
   18214:	ldr	r3, [r5, #4]
   18218:	cmp	r3, #0
   1821c:	str	r3, [r6, #8]
   18220:	strne	r6, [r3, #12]
   18224:	ldr	r3, [pc, #48]	; 1825c <__gcov_sort_n_vals@@Base+0x528>
   18228:	add	r3, pc, r3
   1822c:	str	r3, [r5, #4]
   18230:	ldr	r0, [pc, #40]	; 18260 <__gcov_sort_n_vals@@Base+0x52c>
   18234:	add	r0, pc, r0
   18238:	bl	1851c <__libc_csu_fini@@Base+0x4>
   1823c:	ldr	r3, [pc, #32]	; 18264 <__gcov_sort_n_vals@@Base+0x530>
   18240:	ldr	r2, [pc, r3]
   18244:	b	181dc <__gcov_sort_n_vals@@Base+0x4a8>
   18248:	andeq	r1, r1, ip, asr lr
   1824c:	andeq	r3, r1, ip, lsr #18
   18250:	andeq	r3, r1, r4, lsl r9
   18254:	strheq	r0, [r0], -r4
   18258:	andeq	r0, r0, ip, lsr #28
   1825c:	ldrdeq	r3, [r1], -r0
   18260:			; <UNDEFINED> instruction: 0xfffffee8
   18264:			; <UNDEFINED> instruction: 0x000138b8
   18268:	cmp	r3, #0
   1826c:	cmpeq	r2, #0
   18270:	bne	18294 <__gcov_sort_n_vals@@Base+0x560>
   18274:	cmp	r1, #0
   18278:	movlt	r1, #-2147483648	; 0x80000000
   1827c:	movlt	r0, #0
   18280:	blt	18290 <__gcov_sort_n_vals@@Base+0x55c>
   18284:	cmpeq	r0, #0
   18288:	mvnne	r1, #-2147483648	; 0x80000000
   1828c:	mvnne	r0, #0
   18290:	b	1833c <__gcov_sort_n_vals@@Base+0x608>
   18294:	sub	sp, sp, #8
   18298:	push	{sp, lr}
   1829c:	cmp	r1, #0
   182a0:	blt	182c0 <__gcov_sort_n_vals@@Base+0x58c>
   182a4:	cmp	r3, #0
   182a8:	blt	182f4 <__gcov_sort_n_vals@@Base+0x5c0>
   182ac:	bl	18390 <__gcov_sort_n_vals@@Base+0x65c>
   182b0:	ldr	lr, [sp, #4]
   182b4:	add	sp, sp, #8
   182b8:	pop	{r2, r3}
   182bc:	bx	lr
   182c0:	rsbs	r0, r0, #0
   182c4:	sbc	r1, r1, r1, lsl #1
   182c8:	cmp	r3, #0
   182cc:	blt	18318 <__gcov_sort_n_vals@@Base+0x5e4>
   182d0:	bl	18390 <__gcov_sort_n_vals@@Base+0x65c>
   182d4:	ldr	lr, [sp, #4]
   182d8:	add	sp, sp, #8
   182dc:	pop	{r2, r3}
   182e0:	rsbs	r0, r0, #0
   182e4:	sbc	r1, r1, r1, lsl #1
   182e8:	rsbs	r2, r2, #0
   182ec:	sbc	r3, r3, r3, lsl #1
   182f0:	bx	lr
   182f4:	rsbs	r2, r2, #0
   182f8:	sbc	r3, r3, r3, lsl #1
   182fc:	bl	18390 <__gcov_sort_n_vals@@Base+0x65c>
   18300:	ldr	lr, [sp, #4]
   18304:	add	sp, sp, #8
   18308:	pop	{r2, r3}
   1830c:	rsbs	r0, r0, #0
   18310:	sbc	r1, r1, r1, lsl #1
   18314:	bx	lr
   18318:	rsbs	r2, r2, #0
   1831c:	sbc	r3, r3, r3, lsl #1
   18320:	bl	18390 <__gcov_sort_n_vals@@Base+0x65c>
   18324:	ldr	lr, [sp, #4]
   18328:	add	sp, sp, #8
   1832c:	pop	{r2, r3}
   18330:	rsbs	r2, r2, #0
   18334:	sbc	r3, r3, r3, lsl #1
   18338:	bx	lr
   1833c:	push	{r1, lr}
   18340:	mov	r0, #8
   18344:	bl	11840 <raise@plt>
   18348:	pop	{r1, pc}
   1834c:	ldr	r3, [pc, #48]	; 18384 <__gcov_sort_n_vals@@Base+0x650>
   18350:	ldr	r2, [pc, #48]	; 18388 <__gcov_sort_n_vals@@Base+0x654>
   18354:	and	r3, r3, r0, lsr #1
   18358:	sub	r0, r0, r3
   1835c:	and	r3, r0, r2
   18360:	and	r0, r2, r0, lsr #2
   18364:	add	r3, r3, r0
   18368:	ldr	r0, [pc, #28]	; 1838c <__gcov_sort_n_vals@@Base+0x658>
   1836c:	add	r3, r3, r3, lsr #4
   18370:	and	r0, r0, r3
   18374:	add	r0, r0, r0, lsl #8
   18378:	add	r0, r0, r0, lsl #16
   1837c:	lsr	r0, r0, #24
   18380:	bx	lr
   18384:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   18388:	teqcc	r3, #-872415232	; 0xcc000000
   1838c:	svceq	0x000f0f0f
   18390:	cmp	r1, r3
   18394:	push	{r4, r5, r6, r7, r8, r9, lr}
   18398:	cmpeq	r0, r2
   1839c:	mov	r4, r0
   183a0:	mov	r5, r1
   183a4:	ldr	r9, [sp, #28]
   183a8:	movcc	r0, #0
   183ac:	movcc	r1, #0
   183b0:	bcc	184a8 <__gcov_sort_n_vals@@Base+0x774>
   183b4:	cmp	r3, #0
   183b8:	clzeq	ip, r2
   183bc:	clzne	ip, r3
   183c0:	addeq	ip, ip, #32
   183c4:	cmp	r5, #0
   183c8:	clzeq	r1, r4
   183cc:	addeq	r1, r1, #32
   183d0:	clzne	r1, r5
   183d4:	sub	ip, ip, r1
   183d8:	sub	lr, ip, #32
   183dc:	lsl	r7, r3, ip
   183e0:	rsb	r8, ip, #32
   183e4:	orr	r7, r7, r2, lsl lr
   183e8:	orr	r7, r7, r2, lsr r8
   183ec:	lsl	r6, r2, ip
   183f0:	cmp	r5, r7
   183f4:	cmpeq	r4, r6
   183f8:	movcc	r0, #0
   183fc:	movcc	r1, #0
   18400:	bcc	1841c <__gcov_sort_n_vals@@Base+0x6e8>
   18404:	mov	r3, #1
   18408:	subs	r4, r4, r6
   1840c:	lsl	r1, r3, lr
   18410:	lsl	r0, r3, ip
   18414:	orr	r1, r1, r3, lsr r8
   18418:	sbc	r5, r5, r7
   1841c:	cmp	ip, #0
   18420:	beq	184a8 <__gcov_sort_n_vals@@Base+0x774>
   18424:	lsrs	r3, r7, #1
   18428:	rrx	r2, r6
   1842c:	mov	r6, ip
   18430:	b	18454 <__gcov_sort_n_vals@@Base+0x720>
   18434:	subs	r4, r4, r2
   18438:	sbc	r5, r5, r3
   1843c:	adds	r4, r4, r4
   18440:	adc	r5, r5, r5
   18444:	adds	r4, r4, #1
   18448:	adc	r5, r5, #0
   1844c:	subs	r6, r6, #1
   18450:	beq	18470 <__gcov_sort_n_vals@@Base+0x73c>
   18454:	cmp	r5, r3
   18458:	cmpeq	r4, r2
   1845c:	bcs	18434 <__gcov_sort_n_vals@@Base+0x700>
   18460:	adds	r4, r4, r4
   18464:	adc	r5, r5, r5
   18468:	subs	r6, r6, #1
   1846c:	bne	18454 <__gcov_sort_n_vals@@Base+0x720>
   18470:	lsr	r6, r4, ip
   18474:	lsr	r7, r5, ip
   18478:	orr	r6, r6, r5, lsl r8
   1847c:	adds	r2, r0, r4
   18480:	orr	r6, r6, r5, lsr lr
   18484:	adc	r3, r1, r5
   18488:	lsl	r1, r7, ip
   1848c:	orr	r1, r1, r6, lsl lr
   18490:	lsl	r0, r6, ip
   18494:	orr	r1, r1, r6, lsr r8
   18498:	subs	r0, r2, r0
   1849c:	mov	r4, r6
   184a0:	mov	r5, r7
   184a4:	sbc	r1, r3, r1
   184a8:	cmp	r9, #0
   184ac:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   184b0:	strd	r4, [r9]
   184b4:	pop	{r4, r5, r6, r7, r8, r9, pc}

000184b8 <__libc_csu_init@@Base>:
   184b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   184bc:	mov	r7, r0
   184c0:	ldr	r6, [pc, #72]	; 18510 <__libc_csu_init@@Base+0x58>
   184c4:	ldr	r5, [pc, #72]	; 18514 <__libc_csu_init@@Base+0x5c>
   184c8:	add	r6, pc, r6
   184cc:	add	r5, pc, r5
   184d0:	sub	r6, r6, r5
   184d4:	mov	r8, r1
   184d8:	mov	r9, r2
   184dc:	bl	11814 <fdopen@plt-0x20>
   184e0:	asrs	r6, r6, #2
   184e4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   184e8:	mov	r4, #0
   184ec:	add	r4, r4, #1
   184f0:	ldr	r3, [r5], #4
   184f4:	mov	r2, r9
   184f8:	mov	r1, r8
   184fc:	mov	r0, r7
   18500:	blx	r3
   18504:	cmp	r6, r4
   18508:	bne	184ec <__libc_csu_init@@Base+0x34>
   1850c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18510:	andeq	r1, r1, r0, asr #20
   18514:	andeq	r1, r1, r8, lsr #20

00018518 <__libc_csu_fini@@Base>:
   18518:	bx	lr
   1851c:	ldr	r3, [pc, #12]	; 18530 <__libc_csu_fini@@Base+0x18>
   18520:	mov	r1, #0
   18524:	add	r3, pc, r3
   18528:	ldr	r2, [r3]
   1852c:	b	11948 <__cxa_atexit@plt>
   18530:	andeq	r1, r1, r0, lsr #23
   18534:	mov	r2, r1
   18538:	mov	r1, r0
   1853c:	mov	r0, #3
   18540:	b	118e8 <__fxstat@plt>

Disassembly of section .fini:

00018544 <.fini>:
   18544:	push	{r3, lr}
   18548:	pop	{r3, pc}
