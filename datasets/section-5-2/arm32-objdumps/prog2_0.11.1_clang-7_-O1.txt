
../repos/prog2/0.11.1:     file format elf32-littlearm


Disassembly of section .init:

0001061c <.init>:
   1061c:	push	{r3, lr}
   10620:	bl	106b4 <_start@@Base+0x3c>
   10624:	pop	{r3, pc}

Disassembly of section .plt:

00010628 <printf@plt-0x14>:
   10628:	push	{lr}		; (str lr, [sp, #-4]!)
   1062c:	ldr	lr, [pc, #4]	; 10638 <printf@plt-0x4>
   10630:	add	lr, pc, lr
   10634:	ldr	pc, [lr, #8]!
   10638:	andeq	r0, r1, r8, asr #19

0001063c <printf@plt>:
   1063c:	add	ip, pc, #0, 12
   10640:	add	ip, ip, #16, 20	; 0x10000
   10644:	ldr	pc, [ip, #2504]!	; 0x9c8

00010648 <__libc_start_main@plt>:
   10648:	add	ip, pc, #0, 12
   1064c:	add	ip, ip, #16, 20	; 0x10000
   10650:	ldr	pc, [ip, #2496]!	; 0x9c0

00010654 <__gmon_start__@plt>:
   10654:	add	ip, pc, #0, 12
   10658:	add	ip, ip, #16, 20	; 0x10000
   1065c:	ldr	pc, [ip, #2488]!	; 0x9b8

00010660 <__isoc99_scanf@plt>:
   10660:	add	ip, pc, #0, 12
   10664:	add	ip, ip, #16, 20	; 0x10000
   10668:	ldr	pc, [ip, #2480]!	; 0x9b0

0001066c <abort@plt>:
   1066c:	add	ip, pc, #0, 12
   10670:	add	ip, ip, #16, 20	; 0x10000
   10674:	ldr	pc, [ip, #2472]!	; 0x9a8

Disassembly of section .text:

00010678 <_start@@Base>:
   10678:	mov	fp, #0
   1067c:	mov	lr, #0
   10680:	pop	{r1}		; (ldr r1, [sp], #4)
   10684:	mov	r2, sp
   10688:	push	{r2}		; (str r2, [sp, #-4]!)
   1068c:	push	{r0}		; (str r0, [sp, #-4]!)
   10690:	ldr	ip, [pc, #16]	; 106a8 <_start@@Base+0x30>
   10694:	push	{ip}		; (str ip, [sp, #-4]!)
   10698:	ldr	r0, [pc, #12]	; 106ac <_start@@Base+0x34>
   1069c:	ldr	r3, [pc, #12]	; 106b0 <_start@@Base+0x38>
   106a0:	bl	10648 <__libc_start_main@plt>
   106a4:	bl	1066c <abort@plt>
   106a8:	andeq	r0, r1, ip, lsr #17
   106ac:			; <UNDEFINED> instruction: 0x000107b4
   106b0:	andeq	r0, r1, ip, asr #16
   106b4:	ldr	r3, [pc, #20]	; 106d0 <_start@@Base+0x58>
   106b8:	ldr	r2, [pc, #20]	; 106d4 <_start@@Base+0x5c>
   106bc:	add	r3, pc, r3
   106c0:	ldr	r2, [r3, r2]
   106c4:	cmp	r2, #0
   106c8:	bxeq	lr
   106cc:	b	10654 <__gmon_start__@plt>
   106d0:	andeq	r0, r1, ip, lsr r9
   106d4:	andeq	r0, r0, r0, lsr #32
   106d8:	ldr	r0, [pc, #24]	; 106f8 <_start@@Base+0x80>
   106dc:	ldr	r3, [pc, #24]	; 106fc <_start@@Base+0x84>
   106e0:	cmp	r3, r0
   106e4:	bxeq	lr
   106e8:	ldr	r3, [pc, #16]	; 10700 <_start@@Base+0x88>
   106ec:	cmp	r3, #0
   106f0:	bxeq	lr
   106f4:	bx	r3
   106f8:	andeq	r1, r2, ip, lsr #32
   106fc:	andeq	r1, r2, ip, lsr #32
   10700:	andeq	r0, r0, r0
   10704:	ldr	r0, [pc, #36]	; 10730 <_start@@Base+0xb8>
   10708:	ldr	r1, [pc, #36]	; 10734 <_start@@Base+0xbc>
   1070c:	sub	r1, r1, r0
   10710:	asr	r1, r1, #2
   10714:	add	r1, r1, r1, lsr #31
   10718:	asrs	r1, r1, #1
   1071c:	bxeq	lr
   10720:	ldr	r3, [pc, #16]	; 10738 <_start@@Base+0xc0>
   10724:	cmp	r3, #0
   10728:	bxeq	lr
   1072c:	bx	r3
   10730:	andeq	r1, r2, ip, lsr #32
   10734:	andeq	r1, r2, ip, lsr #32
   10738:	andeq	r0, r0, r0
   1073c:	push	{r4, lr}
   10740:	ldr	r4, [pc, #24]	; 10760 <_start@@Base+0xe8>
   10744:	ldrb	r3, [r4]
   10748:	cmp	r3, #0
   1074c:	popne	{r4, pc}
   10750:	bl	106d8 <_start@@Base+0x60>
   10754:	mov	r3, #1
   10758:	strb	r3, [r4]
   1075c:	pop	{r4, pc}
   10760:	andeq	r1, r2, ip, lsr #32
   10764:	b	10704 <_start@@Base+0x8c>

00010768 <invert@@Base>:
   10768:	cmp	r0, #0
   1076c:	moveq	r0, #0
   10770:	bxeq	lr
   10774:	mov	r1, r0
   10778:	mov	r0, #0
   1077c:	movw	ip, #26215	; 0x6667
   10780:	movt	ip, #26214	; 0x6666
   10784:	smmul	r3, r1, ip
   10788:	asr	r2, r3, #2
   1078c:	add	r2, r2, r3, lsr #31
   10790:	add	r3, r2, r2, lsl #2
   10794:	sub	r3, r1, r3, lsl #1
   10798:	add	r0, r0, r0, lsl #2
   1079c:	add	r0, r3, r0, lsl #1
   107a0:	add	r1, r1, #9
   107a4:	cmp	r1, #18
   107a8:	mov	r1, r2
   107ac:	bhi	10784 <invert@@Base+0x1c>
   107b0:	bx	lr

000107b4 <main@@Base>:
   107b4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   107b8:	add	fp, sp, #24
   107bc:	sub	sp, sp, #16
   107c0:	movw	r0, #2239	; 0x8bf
   107c4:	movt	r0, #1
   107c8:	add	r1, sp, #12
   107cc:	bl	10660 <__isoc99_scanf@plt>
   107d0:	ldr	r0, [sp, #12]
   107d4:	cmp	r0, #1
   107d8:	blt	10840 <main@@Base+0x8c>
   107dc:	mov	r5, #0
   107e0:	movw	r8, #2236	; 0x8bc
   107e4:	movt	r8, #1
   107e8:	add	r9, sp, #8
   107ec:	add	r6, sp, #4
   107f0:	movw	r7, #2242	; 0x8c2
   107f4:	movt	r7, #1
   107f8:	mov	r0, r8
   107fc:	mov	r1, r9
   10800:	mov	r2, r6
   10804:	bl	10660 <__isoc99_scanf@plt>
   10808:	ldr	r0, [sp, #8]
   1080c:	bl	10768 <invert@@Base>
   10810:	mov	r4, r0
   10814:	ldr	r0, [sp, #4]
   10818:	bl	10768 <invert@@Base>
   1081c:	add	r0, r0, r4
   10820:	bl	10768 <invert@@Base>
   10824:	mov	r1, r0
   10828:	mov	r0, r7
   1082c:	bl	1063c <printf@plt>
   10830:	add	r5, r5, #1
   10834:	ldr	r0, [sp, #12]
   10838:	cmp	r5, r0
   1083c:	blt	107f8 <main@@Base+0x44>
   10840:	mov	r0, #0
   10844:	sub	sp, fp, #24
   10848:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0001084c <__libc_csu_init@@Base>:
   1084c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10850:	mov	r7, r0
   10854:	ldr	r6, [pc, #72]	; 108a4 <__libc_csu_init@@Base+0x58>
   10858:	ldr	r5, [pc, #72]	; 108a8 <__libc_csu_init@@Base+0x5c>
   1085c:	add	r6, pc, r6
   10860:	add	r5, pc, r5
   10864:	sub	r6, r6, r5
   10868:	mov	r8, r1
   1086c:	mov	r9, r2
   10870:	bl	1061c <printf@plt-0x20>
   10874:	asrs	r6, r6, #2
   10878:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1087c:	mov	r4, #0
   10880:	add	r4, r4, #1
   10884:	ldr	r3, [r5], #4
   10888:	mov	r2, r9
   1088c:	mov	r1, r8
   10890:	mov	r0, r7
   10894:	blx	r3
   10898:	cmp	r6, r4
   1089c:	bne	10880 <__libc_csu_init@@Base+0x34>
   108a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108a4:	andeq	r0, r1, r8, lsr #13
   108a8:	andeq	r0, r1, r0, lsr #13

000108ac <__libc_csu_fini@@Base>:
   108ac:	bx	lr

Disassembly of section .fini:

000108b0 <.fini>:
   108b0:	push	{r3, lr}
   108b4:	pop	{r3, pc}
