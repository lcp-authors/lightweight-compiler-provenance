
../repos/eddieantonio-ocreval-3ab279a/wordfreq/wordfreq:     file format elf32-littlearm


Disassembly of section .init:

000109e4 <.init>:
   109e4:	push	{r3, lr}
   109e8:	bl	10c80 <__assert_fail@plt+0xc0>
   109ec:	pop	{r3, pc}

Disassembly of section .plt:

000109f0 <calloc@plt-0x14>:
   109f0:	push	{lr}		; (str lr, [sp, #-4]!)
   109f4:	ldr	lr, [pc, #4]	; 10a00 <calloc@plt-0x4>
   109f8:	add	lr, pc, lr
   109fc:	ldr	pc, [lr, #8]!
   10a00:	andeq	r6, r1, r0, lsl #12

00010a04 <calloc@plt>:
   10a04:	add	ip, pc, #0, 12
   10a08:	add	ip, ip, #90112	; 0x16000
   10a0c:	ldr	pc, [ip, #1536]!	; 0x600

00010a10 <strcmp@plt>:
   10a10:	add	ip, pc, #0, 12
   10a14:	add	ip, ip, #90112	; 0x16000
   10a18:	ldr	pc, [ip, #1528]!	; 0x5f8

00010a1c <strtol@plt>:
   10a1c:	add	ip, pc, #0, 12
   10a20:	add	ip, ip, #90112	; 0x16000
   10a24:	ldr	pc, [ip, #1520]!	; 0x5f0

00010a28 <printf@plt>:
   10a28:	add	ip, pc, #0, 12
   10a2c:	add	ip, ip, #90112	; 0x16000
   10a30:	ldr	pc, [ip, #1512]!	; 0x5e8

00010a34 <fopen@plt>:
   10a34:	add	ip, pc, #0, 12
   10a38:	add	ip, ip, #90112	; 0x16000
   10a3c:	ldr	pc, [ip, #1504]!	; 0x5e0

00010a40 <free@plt>:
   10a40:	add	ip, pc, #0, 12
   10a44:	add	ip, ip, #90112	; 0x16000
   10a48:	ldr	pc, [ip, #1496]!	; 0x5d8

00010a4c <utf8proc_get_property@plt>:
   10a4c:	add	ip, pc, #0, 12
   10a50:	add	ip, ip, #90112	; 0x16000
   10a54:	ldr	pc, [ip, #1488]!	; 0x5d0

00010a58 <fgets@plt>:
   10a58:	add	ip, pc, #0, 12
   10a5c:	add	ip, ip, #90112	; 0x16000
   10a60:	ldr	pc, [ip, #1480]!	; 0x5c8

00010a64 <utf8proc_encode_char@plt>:
   10a64:	add	ip, pc, #0, 12
   10a68:	add	ip, ip, #90112	; 0x16000
   10a6c:	ldr	pc, [ip, #1472]!	; 0x5c0

00010a70 <strdup@plt>:
   10a70:	add	ip, pc, #0, 12
   10a74:	add	ip, ip, #90112	; 0x16000
   10a78:	ldr	pc, [ip, #1464]!	; 0x5b8

00010a7c <rewind@plt>:
   10a7c:	add	ip, pc, #0, 12
   10a80:	add	ip, ip, #90112	; 0x16000
   10a84:	ldr	pc, [ip, #1456]!	; 0x5b0

00010a88 <unlink@plt>:
   10a88:	add	ip, pc, #0, 12
   10a8c:	add	ip, ip, #90112	; 0x16000
   10a90:	ldr	pc, [ip, #1448]!	; 0x5a8

00010a94 <utf8proc_tolower@plt>:
   10a94:	add	ip, pc, #0, 12
   10a98:	add	ip, ip, #90112	; 0x16000
   10a9c:	ldr	pc, [ip, #1440]!	; 0x5a0

00010aa0 <__xstat@plt>:
   10aa0:	add	ip, pc, #0, 12
   10aa4:	add	ip, ip, #90112	; 0x16000
   10aa8:	ldr	pc, [ip, #1432]!	; 0x598

00010aac <fwrite@plt>:
   10aac:	add	ip, pc, #0, 12
   10ab0:	add	ip, ip, #90112	; 0x16000
   10ab4:	ldr	pc, [ip, #1424]!	; 0x590

00010ab8 <fread@plt>:
   10ab8:	add	ip, pc, #0, 12
   10abc:	add	ip, ip, #90112	; 0x16000
   10ac0:	ldr	pc, [ip, #1416]!	; 0x588

00010ac4 <utf8proc_iterate@plt>:
   10ac4:	add	ip, pc, #0, 12
   10ac8:	add	ip, ip, #90112	; 0x16000
   10acc:	ldr	pc, [ip, #1408]!	; 0x580

00010ad0 <puts@plt>:
   10ad0:	add	ip, pc, #0, 12
   10ad4:	add	ip, ip, #90112	; 0x16000
   10ad8:	ldr	pc, [ip, #1400]!	; 0x578

00010adc <malloc@plt>:
   10adc:	add	ip, pc, #0, 12
   10ae0:	add	ip, ip, #90112	; 0x16000
   10ae4:	ldr	pc, [ip, #1392]!	; 0x570

00010ae8 <__libc_start_main@plt>:
   10ae8:	add	ip, pc, #0, 12
   10aec:	add	ip, ip, #90112	; 0x16000
   10af0:	ldr	pc, [ip, #1384]!	; 0x568

00010af4 <__sysv_signal@plt>:
   10af4:	add	ip, pc, #0, 12
   10af8:	add	ip, ip, #90112	; 0x16000
   10afc:	ldr	pc, [ip, #1376]!	; 0x560

00010b00 <__gmon_start__@plt>:
   10b00:	add	ip, pc, #0, 12
   10b04:	add	ip, ip, #90112	; 0x16000
   10b08:	ldr	pc, [ip, #1368]!	; 0x558

00010b0c <getpid@plt>:
   10b0c:	add	ip, pc, #0, 12
   10b10:	add	ip, ip, #90112	; 0x16000
   10b14:	ldr	pc, [ip, #1360]!	; 0x550

00010b18 <exit@plt>:
   10b18:	add	ip, pc, #0, 12
   10b1c:	add	ip, ip, #90112	; 0x16000
   10b20:	ldr	pc, [ip, #1352]!	; 0x548

00010b24 <utf8proc_category@plt>:
   10b24:	add	ip, pc, #0, 12
   10b28:	add	ip, ip, #90112	; 0x16000
   10b2c:	ldr	pc, [ip, #1344]!	; 0x540

00010b30 <strlen@plt>:
   10b30:	add	ip, pc, #0, 12
   10b34:	add	ip, ip, #90112	; 0x16000
   10b38:	ldr	pc, [ip, #1336]!	; 0x538

00010b3c <fprintf@plt>:
   10b3c:	add	ip, pc, #0, 12
   10b40:	add	ip, ip, #90112	; 0x16000
   10b44:	ldr	pc, [ip, #1328]!	; 0x530

00010b48 <__isoc99_sscanf@plt>:
   10b48:	add	ip, pc, #0, 12
   10b4c:	add	ip, ip, #90112	; 0x16000
   10b50:	ldr	pc, [ip, #1320]!	; 0x528

00010b54 <fclose@plt>:
   10b54:	add	ip, pc, #0, 12
   10b58:	add	ip, ip, #90112	; 0x16000
   10b5c:	ldr	pc, [ip, #1312]!	; 0x520

00010b60 <utf8proc_NFC@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #90112	; 0x16000
   10b68:	ldr	pc, [ip, #1304]!	; 0x518

00010b6c <fputc@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #90112	; 0x16000
   10b74:	ldr	pc, [ip, #1296]!	; 0x510

00010b78 <sprintf@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #90112	; 0x16000
   10b80:	ldr	pc, [ip, #1288]!	; 0x508

00010b84 <utf8proc_errmsg@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #90112	; 0x16000
   10b8c:	ldr	pc, [ip, #1280]!	; 0x500

00010b90 <fputs@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #90112	; 0x16000
   10b98:	ldr	pc, [ip, #1272]!	; 0x4f8

00010b9c <strncmp@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #90112	; 0x16000
   10ba4:	ldr	pc, [ip, #1264]!	; 0x4f0

00010ba8 <abort@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #90112	; 0x16000
   10bb0:	ldr	pc, [ip, #1256]!	; 0x4e8

00010bb4 <getc@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #90112	; 0x16000
   10bbc:	ldr	pc, [ip, #1248]!	; 0x4e0

00010bc0 <__assert_fail@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #90112	; 0x16000
   10bc8:	ldr	pc, [ip, #1240]!	; 0x4d8

Disassembly of section .text:

00010bd0 <error@@Base-0xd14>:
   10bd0:	push	{r4, r5, lr}
   10bd4:	sub	sp, sp, #12
   10bd8:	add	ip, sp, #8
   10bdc:	ldr	r2, [pc, #88]	; 10c3c <__assert_fail@plt+0x7c>
   10be0:	mov	r3, #0
   10be4:	str	r0, [ip, #-4]!
   10be8:	add	r2, pc, r2
   10bec:	mov	r0, ip
   10bf0:	mov	r5, r1
   10bf4:	bl	11a84 <error@@Base+0x1a0>
   10bf8:	ldr	r3, [sp, #4]
   10bfc:	cmp	r3, #0
   10c00:	beq	10c30 <__assert_fail@plt+0x70>
   10c04:	subgt	r5, r5, #4
   10c08:	movgt	r4, #0
   10c0c:	ble	10c28 <__assert_fail@plt+0x68>
   10c10:	ldr	r0, [r5, #4]!
   10c14:	bl	10d94 <__assert_fail@plt+0x1d4>
   10c18:	ldr	r3, [sp, #4]
   10c1c:	add	r4, r4, #1
   10c20:	cmp	r3, r4
   10c24:	bgt	10c10 <__assert_fail@plt+0x50>
   10c28:	bl	10eec <__assert_fail@plt+0x32c>
   10c2c:	bl	11870 <__assert_fail@plt+0xcb0>
   10c30:	ldr	r0, [pc, #8]	; 10c40 <__assert_fail@plt+0x80>
   10c34:	add	r0, pc, r0
   10c38:	bl	118e4 <error@@Base>
   10c3c:	andeq	r2, r0, ip, asr fp
   10c40:	andeq	r2, r0, r4, lsr fp
   10c44:	mov	fp, #0
   10c48:	mov	lr, #0
   10c4c:	pop	{r1}		; (ldr r1, [sp], #4)
   10c50:	mov	r2, sp
   10c54:	push	{r2}		; (str r2, [sp, #-4]!)
   10c58:	push	{r0}		; (str r0, [sp, #-4]!)
   10c5c:	ldr	ip, [pc, #16]	; 10c74 <__assert_fail@plt+0xb4>
   10c60:	push	{ip}		; (str ip, [sp, #-4]!)
   10c64:	ldr	r0, [pc, #12]	; 10c78 <__assert_fail@plt+0xb8>
   10c68:	ldr	r3, [pc, #12]	; 10c7c <__assert_fail@plt+0xbc>
   10c6c:	bl	10ae8 <__libc_start_main@plt>
   10c70:	bl	10ba8 <abort@plt>
   10c74:	andeq	r3, r1, r4, lsl r7
   10c78:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10c7c:			; <UNDEFINED> instruction: 0x000136b4
   10c80:	ldr	r3, [pc, #20]	; 10c9c <__assert_fail@plt+0xdc>
   10c84:	ldr	r2, [pc, #20]	; 10ca0 <__assert_fail@plt+0xe0>
   10c88:	add	r3, pc, r3
   10c8c:	ldr	r2, [r3, r2]
   10c90:	cmp	r2, #0
   10c94:	bxeq	lr
   10c98:	b	10b00 <__gmon_start__@plt>
   10c9c:	andeq	r6, r1, r0, ror r3
   10ca0:	andeq	r0, r0, r4, asr #1
   10ca4:	ldr	r3, [pc, #28]	; 10cc8 <__assert_fail@plt+0x108>
   10ca8:	ldr	r0, [pc, #28]	; 10ccc <__assert_fail@plt+0x10c>
   10cac:	sub	r3, r3, r0
   10cb0:	cmp	r3, #6
   10cb4:	bxls	lr
   10cb8:	ldr	r3, [pc, #16]	; 10cd0 <__assert_fail@plt+0x110>
   10cbc:	cmp	r3, #0
   10cc0:	bxeq	lr
   10cc4:	bx	r3
   10cc8:	andeq	r7, r2, fp, lsl #2
   10ccc:	andeq	r7, r2, r8, lsl #2
   10cd0:	andeq	r0, r0, r0
   10cd4:	ldr	r1, [pc, #36]	; 10d00 <__assert_fail@plt+0x140>
   10cd8:	ldr	r0, [pc, #36]	; 10d04 <__assert_fail@plt+0x144>
   10cdc:	sub	r1, r1, r0
   10ce0:	asr	r1, r1, #2
   10ce4:	add	r1, r1, r1, lsr #31
   10ce8:	asrs	r1, r1, #1
   10cec:	bxeq	lr
   10cf0:	ldr	r3, [pc, #16]	; 10d08 <__assert_fail@plt+0x148>
   10cf4:	cmp	r3, #0
   10cf8:	bxeq	lr
   10cfc:	bx	r3
   10d00:	andeq	r7, r2, r8, lsl #2
   10d04:	andeq	r7, r2, r8, lsl #2
   10d08:	andeq	r0, r0, r0
   10d0c:	push	{r4, lr}
   10d10:	ldr	r4, [pc, #24]	; 10d30 <__assert_fail@plt+0x170>
   10d14:	ldrb	r3, [r4]
   10d18:	cmp	r3, #0
   10d1c:	popne	{r4, pc}
   10d20:	bl	10ca4 <__assert_fail@plt+0xe4>
   10d24:	mov	r3, #1
   10d28:	strb	r3, [r4]
   10d2c:	pop	{r4, pc}
   10d30:	andeq	r7, r2, r8, lsl #2
   10d34:	ldr	r0, [pc, #40]	; 10d64 <__assert_fail@plt+0x1a4>
   10d38:	ldr	r3, [r0]
   10d3c:	cmp	r3, #0
   10d40:	bne	10d48 <__assert_fail@plt+0x188>
   10d44:	b	10cd4 <__assert_fail@plt+0x114>
   10d48:	ldr	r3, [pc, #24]	; 10d68 <__assert_fail@plt+0x1a8>
   10d4c:	cmp	r3, #0
   10d50:	beq	10d44 <__assert_fail@plt+0x184>
   10d54:	push	{r4, lr}
   10d58:	blx	r3
   10d5c:	pop	{r4, lr}
   10d60:	b	10cd4 <__assert_fail@plt+0x114>
   10d64:	andeq	r6, r2, r4, lsl #30
   10d68:	andeq	r0, r0, r0
   10d6c:	ldr	r1, [r1, #8]
   10d70:	ldr	r0, [r0, #8]
   10d74:	b	116f4 <__assert_fail@plt+0xb34>
   10d78:	ldr	r2, [r0, #12]
   10d7c:	ldr	r3, [r1, #12]
   10d80:	cmp	r2, r3
   10d84:	beq	10d90 <__assert_fail@plt+0x1d0>
   10d88:	sub	r0, r3, r2
   10d8c:	bx	lr
   10d90:	b	10d6c <__assert_fail@plt+0x1ac>
   10d94:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10d98:	mov	r1, r0
   10d9c:	ldr	r8, [pc, #140]	; 10e30 <__assert_fail@plt+0x270>
   10da0:	ldr	r3, [pc, #140]	; 10e34 <__assert_fail@plt+0x274>
   10da4:	add	r8, pc, r8
   10da8:	ldr	r2, [pc, #136]	; 10e38 <__assert_fail@plt+0x278>
   10dac:	ldr	r9, [r8, r3]
   10db0:	ldr	r2, [r8, r2]
   10db4:	mov	r0, r9
   10db8:	bl	13030 <error@@Base+0x174c>
   10dbc:	ldr	r3, [pc, #120]	; 10e3c <__assert_fail@plt+0x27c>
   10dc0:	mov	r1, r9
   10dc4:	ldr	sl, [r8, r3]
   10dc8:	mov	r0, sl
   10dcc:	bl	12758 <error@@Base+0xe74>
   10dd0:	ldr	r4, [sl]
   10dd4:	cmp	r4, #0
   10dd8:	beq	10e0c <__assert_fail@plt+0x24c>
   10ddc:	ldr	r3, [pc, #92]	; 10e40 <__assert_fail@plt+0x280>
   10de0:	mov	r7, #0
   10de4:	mov	r6, #1
   10de8:	ldr	r5, [r8, r3]
   10dec:	ldr	r1, [r4, #8]
   10df0:	mov	r3, r7
   10df4:	mov	r2, r6
   10df8:	mov	r0, r5
   10dfc:	bl	121d0 <error@@Base+0x8ec>
   10e00:	ldr	r4, [r4, #4]
   10e04:	cmp	r4, #0
   10e08:	bne	10dec <__assert_fail@plt+0x22c>
   10e0c:	ldr	r3, [pc, #48]	; 10e44 <__assert_fail@plt+0x284>
   10e10:	mov	r0, r9
   10e14:	ldr	r1, [r8, r3]
   10e18:	bl	11158 <__assert_fail@plt+0x598>
   10e1c:	ldr	r3, [pc, #36]	; 10e48 <__assert_fail@plt+0x288>
   10e20:	mov	r0, sl
   10e24:	ldr	r1, [r8, r3]
   10e28:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   10e2c:	b	11158 <__assert_fail@plt+0x598>
   10e30:	andeq	r6, r1, r4, asr r2
   10e34:	andeq	r0, r0, r4, lsr #1
   10e38:	strheq	r0, [r0], -r8
   10e3c:	strheq	r0, [r0], -ip
   10e40:	ldrdeq	r0, [r0], -ip
   10e44:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   10e48:	andeq	r0, r0, r8, lsr #1
   10e4c:	ldr	r0, [pc, #132]	; 10ed8 <__assert_fail@plt+0x318>
   10e50:	push	{r4, r5, r6, r7, r8, lr}
   10e54:	add	r0, pc, r0
   10e58:	bl	10ad0 <puts@plt>
   10e5c:	ldr	r3, [pc, #120]	; 10edc <__assert_fail@plt+0x31c>
   10e60:	ldr	r2, [pc, #120]	; 10ee0 <__assert_fail@plt+0x320>
   10e64:	add	r3, pc, r3
   10e68:	mov	r6, #0
   10e6c:	ldr	r5, [r3, r2]
   10e70:	add	r5, r5, #4096	; 0x1000
   10e74:	ldr	r3, [r5, #3956]	; 0xf74
   10e78:	cmp	r3, #0
   10e7c:	ble	10ec4 <__assert_fail@plt+0x304>
   10e80:	ldr	r7, [pc, #92]	; 10ee4 <__assert_fail@plt+0x324>
   10e84:	ldr	r3, [r5, #3952]	; 0xf70
   10e88:	add	r7, pc, r7
   10e8c:	mov	r4, r6
   10e90:	ldr	r3, [r3, r4, lsl #2]
   10e94:	mov	r0, r7
   10e98:	ldr	r2, [r3, #8]
   10e9c:	ldr	r1, [r3, #12]
   10ea0:	bl	10a28 <printf@plt>
   10ea4:	ldr	r3, [r5, #3952]	; 0xf70
   10ea8:	ldr	r1, [r5, #3956]	; 0xf74
   10eac:	ldr	r2, [r3, r4, lsl #2]
   10eb0:	add	r4, r4, #1
   10eb4:	cmp	r1, r4
   10eb8:	ldr	r2, [r2, #12]
   10ebc:	add	r6, r6, r2
   10ec0:	bgt	10e90 <__assert_fail@plt+0x2d0>
   10ec4:	ldr	r0, [pc, #28]	; 10ee8 <__assert_fail@plt+0x328>
   10ec8:	mov	r1, r6
   10ecc:	add	r0, pc, r0
   10ed0:	pop	{r4, r5, r6, r7, r8, lr}
   10ed4:	b	10a28 <printf@plt>
   10ed8:	andeq	r2, r0, r8, asr #17
   10edc:	muleq	r1, r4, r1
   10ee0:	ldrdeq	r0, [r0], -ip
   10ee4:	andeq	r2, r0, r0, lsr #17
   10ee8:	andeq	r2, r0, r8, ror #16
   10eec:	push	{r4, r5, r6, lr}
   10ef0:	ldr	r5, [pc, #84]	; 10f4c <__assert_fail@plt+0x38c>
   10ef4:	ldr	r3, [pc, #84]	; 10f50 <__assert_fail@plt+0x390>
   10ef8:	add	r5, pc, r5
   10efc:	ldr	r4, [r5, r3]
   10f00:	mov	r0, r4
   10f04:	bl	11544 <__assert_fail@plt+0x984>
   10f08:	ldr	r3, [pc, #68]	; 10f54 <__assert_fail@plt+0x394>
   10f0c:	add	r4, r4, #4096	; 0x1000
   10f10:	ldr	r2, [r5, r3]
   10f14:	ldr	r1, [r4, #3952]	; 0xf70
   10f18:	ldr	r0, [r4, #3956]	; 0xf74
   10f1c:	bl	11350 <__assert_fail@plt+0x790>
   10f20:	bl	10e4c <__assert_fail@plt+0x28c>
   10f24:	ldr	r0, [pc, #44]	; 10f58 <__assert_fail@plt+0x398>
   10f28:	add	r0, pc, r0
   10f2c:	bl	10ad0 <puts@plt>
   10f30:	ldr	r3, [pc, #36]	; 10f5c <__assert_fail@plt+0x39c>
   10f34:	ldr	r1, [r4, #3952]	; 0xf70
   10f38:	ldr	r0, [r4, #3956]	; 0xf74
   10f3c:	ldr	r2, [r5, r3]
   10f40:	bl	11350 <__assert_fail@plt+0x790>
   10f44:	pop	{r4, r5, r6, lr}
   10f48:	b	10e4c <__assert_fail@plt+0x28c>
   10f4c:	andeq	r6, r1, r0, lsl #2
   10f50:	ldrdeq	r0, [r0], -ip
   10f54:	andeq	r0, r0, r4, ror #1
   10f58:	andeq	r2, r0, r4, lsl sl
   10f5c:	andeq	r0, r0, r8, ror #1
   10f60:	mov	r3, #0
   10f64:	str	r3, [r0, #4]
   10f68:	str	r3, [r0]
   10f6c:	str	r3, [r0, #8]
   10f70:	str	r3, [r0, #12]
   10f74:	bx	lr
   10f78:	ldr	r3, [r0]
   10f7c:	mov	r2, #0
   10f80:	cmp	r3, r2
   10f84:	push	{r4, lr}
   10f88:	mov	r4, r0
   10f8c:	stm	r1, {r2, r3}
   10f90:	str	r1, [r0]
   10f94:	streq	r1, [r0, #4]
   10f98:	ldr	r0, [r0, #8]
   10f9c:	strne	r1, [r3]
   10fa0:	cmp	r0, #0
   10fa4:	beq	10fb4 <__assert_fail@plt+0x3f4>
   10fa8:	bl	10a40 <free@plt>
   10fac:	mov	r3, #0
   10fb0:	str	r3, [r4, #8]
   10fb4:	ldr	r3, [r4, #12]
   10fb8:	add	r3, r3, #1
   10fbc:	str	r3, [r4, #12]
   10fc0:	pop	{r4, pc}
   10fc4:	ldr	r3, [r0, #4]
   10fc8:	mov	r2, #0
   10fcc:	cmp	r3, r2
   10fd0:	push	{r4, lr}
   10fd4:	mov	r4, r0
   10fd8:	str	r3, [r1]
   10fdc:	str	r2, [r1, #4]
   10fe0:	streq	r1, [r0]
   10fe4:	ldr	r0, [r0, #8]
   10fe8:	strne	r1, [r3, #4]
   10fec:	cmp	r0, #0
   10ff0:	str	r1, [r4, #4]
   10ff4:	beq	11004 <__assert_fail@plt+0x444>
   10ff8:	bl	10a40 <free@plt>
   10ffc:	mov	r3, #0
   11000:	str	r3, [r4, #8]
   11004:	ldr	r3, [r4, #12]
   11008:	add	r3, r3, #1
   1100c:	str	r3, [r4, #12]
   11010:	pop	{r4, pc}
   11014:	ldr	r3, [r2]
   11018:	push	{r4, lr}
   1101c:	cmp	r3, #0
   11020:	str	r3, [r1]
   11024:	str	r2, [r1, #4]
   11028:	mov	r4, r0
   1102c:	streq	r1, [r0]
   11030:	ldr	r0, [r0, #8]
   11034:	strne	r1, [r3, #4]
   11038:	cmp	r0, #0
   1103c:	str	r1, [r2]
   11040:	beq	11050 <__assert_fail@plt+0x490>
   11044:	bl	10a40 <free@plt>
   11048:	mov	r3, #0
   1104c:	str	r3, [r4, #8]
   11050:	ldr	r3, [r4, #12]
   11054:	add	r3, r3, #1
   11058:	str	r3, [r4, #12]
   1105c:	pop	{r4, pc}
   11060:	ldr	r3, [r1, #4]
   11064:	push	{r4, lr}
   11068:	cmp	r3, #0
   1106c:	stm	r2, {r1, r3}
   11070:	mov	r4, r0
   11074:	str	r2, [r1, #4]
   11078:	streq	r2, [r0, #4]
   1107c:	ldr	r0, [r0, #8]
   11080:	strne	r2, [r3]
   11084:	cmp	r0, #0
   11088:	beq	11098 <__assert_fail@plt+0x4d8>
   1108c:	bl	10a40 <free@plt>
   11090:	mov	r3, #0
   11094:	str	r3, [r4, #8]
   11098:	ldr	r3, [r4, #12]
   1109c:	add	r3, r3, #1
   110a0:	str	r3, [r4, #12]
   110a4:	pop	{r4, pc}
   110a8:	ldr	r3, [r1]
   110ac:	ldr	r2, [r1, #4]
   110b0:	cmp	r3, #0
   110b4:	push	{r4, r5, r6, lr}
   110b8:	mov	r4, r0
   110bc:	strne	r2, [r3, #4]
   110c0:	ldrne	r2, [r1, #4]
   110c4:	streq	r2, [r0]
   110c8:	cmp	r2, #0
   110cc:	streq	r3, [r0, #4]
   110d0:	ldr	r0, [r0, #8]
   110d4:	mov	r5, #0
   110d8:	strne	r3, [r2]
   110dc:	cmp	r0, r5
   110e0:	str	r5, [r1, #4]
   110e4:	str	r5, [r1]
   110e8:	beq	110f4 <__assert_fail@plt+0x534>
   110ec:	bl	10a40 <free@plt>
   110f0:	str	r5, [r4, #8]
   110f4:	ldr	r3, [r4, #12]
   110f8:	sub	r3, r3, #1
   110fc:	str	r3, [r4, #12]
   11100:	pop	{r4, r5, r6, pc}
   11104:	ldr	r3, [r0, #8]
   11108:	cmp	r3, #0
   1110c:	bxne	lr
   11110:	ldr	r3, [r0, #12]
   11114:	cmp	r3, #0
   11118:	bxeq	lr
   1111c:	push	{r4, lr}
   11120:	mov	r1, #4
   11124:	mov	r4, r0
   11128:	mov	r0, r3
   1112c:	bl	1193c <error@@Base+0x58>
   11130:	ldr	r3, [r4]
   11134:	cmp	r3, #0
   11138:	str	r0, [r4, #8]
   1113c:	popeq	{r4, pc}
   11140:	sub	r0, r0, #4
   11144:	str	r3, [r0, #4]!
   11148:	ldr	r3, [r3, #4]
   1114c:	cmp	r3, #0
   11150:	bne	11144 <__assert_fail@plt+0x584>
   11154:	pop	{r4, pc}
   11158:	push	{r4, r5, r6, lr}
   1115c:	ldr	r4, [r0]
   11160:	cmp	r4, #0
   11164:	popeq	{r4, r5, r6, pc}
   11168:	mov	r5, r0
   1116c:	mov	r6, r1
   11170:	mov	r1, r4
   11174:	mov	r0, r5
   11178:	bl	110a8 <__assert_fail@plt+0x4e8>
   1117c:	mov	r0, r4
   11180:	blx	r6
   11184:	ldr	r4, [r5]
   11188:	cmp	r4, #0
   1118c:	bne	11170 <__assert_fail@plt+0x5b0>
   11190:	pop	{r4, r5, r6, pc}
   11194:	ldr	r2, [pc, #420]	; 11340 <__assert_fail@plt+0x780>
   11198:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1119c:	sub	sp, sp, #28
   111a0:	add	r2, pc, r2
   111a4:	ldr	r9, [pc, #408]	; 11344 <__assert_fail@plt+0x784>
   111a8:	ldr	r8, [pc, #408]	; 11348 <__assert_fail@plt+0x788>
   111ac:	str	r2, [sp, #16]
   111b0:	ldr	r2, [pc, #404]	; 1134c <__assert_fail@plt+0x78c>
   111b4:	add	r9, pc, r9
   111b8:	add	r8, pc, r8
   111bc:	add	r2, pc, r2
   111c0:	lsl	r3, r1, #2
   111c4:	str	r1, [sp, #12]
   111c8:	str	r2, [sp, #4]
   111cc:	str	r0, [sp, #8]
   111d0:	str	r3, [sp, #20]
   111d4:	ldr	r3, [sp, #16]
   111d8:	ldr	r2, [sp, #12]
   111dc:	ldr	r1, [r3]
   111e0:	ldr	r3, [sp, #8]
   111e4:	cmp	r3, r2
   111e8:	ldr	r7, [r1, r3, lsl #2]
   111ec:	bge	11324 <__assert_fail@plt+0x764>
   111f0:	ldr	r4, [sp, #8]
   111f4:	ldr	r5, [sp, #12]
   111f8:	lsl	r6, r5, #2
   111fc:	b	11204 <__assert_fail@plt+0x644>
   11200:	ldr	r1, [r9]
   11204:	ldr	r1, [r1, r6]
   11208:	ldr	r3, [r9, #4]
   1120c:	mov	r0, r7
   11210:	blx	r3
   11214:	cmp	r0, #0
   11218:	bge	11270 <__assert_fail@plt+0x6b0>
   1121c:	sub	r5, r5, #1
   11220:	cmp	r5, r4
   11224:	sub	r6, r6, #4
   11228:	bgt	11200 <__assert_fail@plt+0x640>
   1122c:	bne	1126c <__assert_fail@plt+0x6ac>
   11230:	ldr	r1, [r9]
   11234:	mov	fp, r5
   11238:	add	r0, r1, fp, lsl #2
   1123c:	ldr	r3, [sp, #8]
   11240:	sub	r1, fp, #1
   11244:	cmp	r3, r1
   11248:	str	r7, [r0]
   1124c:	blt	11308 <__assert_fail@plt+0x748>
   11250:	ldr	r2, [sp, #12]
   11254:	add	r3, r5, #1
   11258:	cmp	r3, r2
   1125c:	str	r3, [sp, #8]
   11260:	blt	111d4 <__assert_fail@plt+0x614>
   11264:	add	sp, sp, #28
   11268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1126c:	lsl	r6, r5, #2
   11270:	ldr	r3, [sp, #4]
   11274:	add	sl, r4, #1
   11278:	cmp	sl, r5
   1127c:	ldr	r1, [r3]
   11280:	add	r0, r1, r6
   11284:	ldr	r2, [r1, r6]
   11288:	str	r2, [r1, r4, lsl #2]
   1128c:	lsl	r4, r4, #2
   11290:	bge	11314 <__assert_fail@plt+0x754>
   11294:	add	fp, r4, #4
   11298:	b	112b0 <__assert_fail@plt+0x6f0>
   1129c:	add	sl, sl, #1
   112a0:	cmp	sl, r5
   112a4:	add	fp, fp, #4
   112a8:	beq	112f4 <__assert_fail@plt+0x734>
   112ac:	ldr	r1, [r8]
   112b0:	ldr	r1, [r1, fp]
   112b4:	ldr	r3, [r8, #4]
   112b8:	mov	r0, r7
   112bc:	blx	r3
   112c0:	cmp	r0, #0
   112c4:	bgt	1129c <__assert_fail@plt+0x6dc>
   112c8:	ldr	r1, [r8]
   112cc:	mov	r4, sl
   112d0:	add	r0, r1, r6
   112d4:	sub	r5, r5, #1
   112d8:	ldr	r2, [r1, fp]
   112dc:	cmp	r5, sl
   112e0:	str	r2, [r0]
   112e4:	bgt	111f8 <__assert_fail@plt+0x638>
   112e8:	mov	fp, r5
   112ec:	mov	r5, r4
   112f0:	b	11238 <__assert_fail@plt+0x678>
   112f4:	ldr	r0, [r8]
   112f8:	mov	fp, sl
   112fc:	add	r0, r0, r6
   11300:	mov	r5, fp
   11304:	b	1123c <__assert_fail@plt+0x67c>
   11308:	mov	r0, r3
   1130c:	bl	11194 <__assert_fail@plt+0x5d4>
   11310:	b	11250 <__assert_fail@plt+0x690>
   11314:	beq	11338 <__assert_fail@plt+0x778>
   11318:	lsl	fp, sl, #2
   1131c:	mov	r4, sl
   11320:	b	112d4 <__assert_fail@plt+0x714>
   11324:	ldr	r3, [sp, #20]
   11328:	mov	fp, r2
   1132c:	add	r0, r1, r3
   11330:	ldr	r5, [sp, #8]
   11334:	b	1123c <__assert_fail@plt+0x67c>
   11338:	mov	fp, sl
   1133c:	b	11300 <__assert_fail@plt+0x740>
   11340:	andeq	r5, r1, r4, ror #30
   11344:	andeq	r5, r1, r0, asr pc
   11348:	andeq	r5, r1, ip, asr #30
   1134c:	andeq	r5, r1, r8, asr #30
   11350:	cmp	r0, #1
   11354:	mov	ip, r1
   11358:	bxle	lr
   1135c:	ldr	r3, [pc, #20]	; 11378 <__assert_fail@plt+0x7b8>
   11360:	sub	r1, r0, #1
   11364:	add	r3, pc, r3
   11368:	mov	r0, #0
   1136c:	str	ip, [r3]
   11370:	str	r2, [r3, #4]
   11374:	b	11194 <__assert_fail@plt+0x5d4>
   11378:	andeq	r5, r1, r0, lsr #27
   1137c:	push	{r4, r5, r6, lr}
   11380:	add	r5, r0, #8000	; 0x1f40
   11384:	mov	r6, r0
   11388:	add	r5, r5, #48	; 0x30
   1138c:	mov	r4, r0
   11390:	mov	r0, r4
   11394:	add	r4, r4, #16
   11398:	bl	10f60 <__assert_fail@plt+0x3a0>
   1139c:	cmp	r4, r5
   113a0:	bne	11390 <__assert_fail@plt+0x7d0>
   113a4:	add	r6, r6, #4096	; 0x1000
   113a8:	mov	r3, #0
   113ac:	str	r3, [r6, #3952]	; 0xf70
   113b0:	str	r3, [r6, #3956]	; 0xf74
   113b4:	pop	{r4, r5, r6, pc}
   113b8:	push	{r4, r5, r6, lr}
   113bc:	mov	r5, r1
   113c0:	ldrb	r3, [r1]
   113c4:	cmp	r3, #0
   113c8:	beq	11400 <__assert_fail@plt+0x840>
   113cc:	mov	r2, #0
   113d0:	add	r2, r2, r3
   113d4:	ldrb	r3, [r1, #1]!
   113d8:	cmp	r3, #0
   113dc:	bne	113d0 <__assert_fail@plt+0x810>
   113e0:	ldr	r1, [pc, #80]	; 11438 <__assert_fail@plt+0x878>
   113e4:	asr	r3, r2, #31
   113e8:	smull	ip, r1, r1, r2
   113ec:	add	r1, r1, r2
   113f0:	rsb	r3, r3, r1, asr #8
   113f4:	rsb	r1, r3, r3, lsl #6
   113f8:	rsb	r3, r3, r1, lsl #3
   113fc:	sub	r3, r2, r3
   11400:	ldr	r4, [r0, r3, lsl #4]
   11404:	cmp	r4, #0
   11408:	bne	1141c <__assert_fail@plt+0x85c>
   1140c:	b	11430 <__assert_fail@plt+0x870>
   11410:	ldr	r4, [r4, #4]
   11414:	cmp	r4, #0
   11418:	beq	11430 <__assert_fail@plt+0x870>
   1141c:	ldr	r1, [r4, #8]
   11420:	mov	r0, r5
   11424:	bl	10a10 <strcmp@plt>
   11428:	cmp	r0, #0
   1142c:	bne	11410 <__assert_fail@plt+0x850>
   11430:	mov	r0, r4
   11434:	pop	{r4, r5, r6, pc}
   11438:	subhi	r4, sl, #1552	; 0x610
   1143c:	ldr	ip, [r1, #8]
   11440:	push	{r4, lr}
   11444:	ldrb	r3, [ip]
   11448:	cmp	r3, #0
   1144c:	beq	11488 <__assert_fail@plt+0x8c8>
   11450:	mov	r2, #0
   11454:	add	r2, r2, r3
   11458:	ldrb	r3, [ip, #1]!
   1145c:	cmp	r3, #0
   11460:	bne	11454 <__assert_fail@plt+0x894>
   11464:	ldr	ip, [pc, #80]	; 114bc <__assert_fail@plt+0x8fc>
   11468:	asr	r3, r2, #31
   1146c:	smull	lr, ip, ip, r2
   11470:	add	ip, ip, r2
   11474:	rsb	r3, r3, ip, asr #8
   11478:	rsb	ip, r3, r3, lsl #6
   1147c:	rsb	r3, r3, ip, lsl #3
   11480:	sub	r3, r2, r3
   11484:	lsl	r3, r3, #4
   11488:	add	r4, r0, #4096	; 0x1000
   1148c:	add	r0, r0, r3
   11490:	bl	10f78 <__assert_fail@plt+0x3b8>
   11494:	ldr	r0, [r4, #3952]	; 0xf70
   11498:	cmp	r0, #0
   1149c:	beq	114ac <__assert_fail@plt+0x8ec>
   114a0:	bl	10a40 <free@plt>
   114a4:	mov	r3, #0
   114a8:	str	r3, [r4, #3952]	; 0xf70
   114ac:	ldr	r3, [r4, #3956]	; 0xf74
   114b0:	add	r3, r3, #1
   114b4:	str	r3, [r4, #3956]	; 0xf74
   114b8:	pop	{r4, pc}
   114bc:	subhi	r4, sl, #1552	; 0x610
   114c0:	ldr	ip, [r1, #8]
   114c4:	push	{r4, lr}
   114c8:	ldrb	r3, [ip]
   114cc:	cmp	r3, #0
   114d0:	beq	1150c <__assert_fail@plt+0x94c>
   114d4:	mov	r2, #0
   114d8:	add	r2, r2, r3
   114dc:	ldrb	r3, [ip, #1]!
   114e0:	cmp	r3, #0
   114e4:	bne	114d8 <__assert_fail@plt+0x918>
   114e8:	ldr	ip, [pc, #80]	; 11540 <__assert_fail@plt+0x980>
   114ec:	asr	r3, r2, #31
   114f0:	smull	lr, ip, ip, r2
   114f4:	add	ip, ip, r2
   114f8:	rsb	r3, r3, ip, asr #8
   114fc:	rsb	ip, r3, r3, lsl #6
   11500:	rsb	r3, r3, ip, lsl #3
   11504:	sub	r3, r2, r3
   11508:	lsl	r3, r3, #4
   1150c:	add	r4, r0, #4096	; 0x1000
   11510:	add	r0, r0, r3
   11514:	bl	110a8 <__assert_fail@plt+0x4e8>
   11518:	ldr	r0, [r4, #3952]	; 0xf70
   1151c:	cmp	r0, #0
   11520:	beq	11530 <__assert_fail@plt+0x970>
   11524:	bl	10a40 <free@plt>
   11528:	mov	r3, #0
   1152c:	str	r3, [r4, #3952]	; 0xf70
   11530:	ldr	r3, [r4, #3956]	; 0xf74
   11534:	sub	r3, r3, #1
   11538:	str	r3, [r4, #3956]	; 0xf74
   1153c:	pop	{r4, pc}
   11540:	subhi	r4, sl, #1552	; 0x610
   11544:	push	{r4, r5, r6, lr}
   11548:	add	r6, r0, #4096	; 0x1000
   1154c:	ldr	r4, [r6, #3952]	; 0xf70
   11550:	cmp	r4, #0
   11554:	popne	{r4, r5, r6, pc}
   11558:	ldr	r3, [r6, #3956]	; 0xf74
   1155c:	cmp	r3, #0
   11560:	popeq	{r4, r5, r6, pc}
   11564:	mov	r5, r0
   11568:	mov	r1, #4
   1156c:	mov	r0, r3
   11570:	bl	1193c <error@@Base+0x58>
   11574:	ldr	lr, [pc, #60]	; 115b8 <__assert_fail@plt+0x9f8>
   11578:	mov	r2, r4
   1157c:	mov	ip, r4
   11580:	str	r0, [r6, #3952]	; 0xf70
   11584:	ldr	r3, [r5, ip, lsl #4]
   11588:	cmp	r3, #0
   1158c:	beq	115a8 <__assert_fail@plt+0x9e8>
   11590:	add	r1, r0, r2, lsl #2
   11594:	str	r3, [r1], #4
   11598:	ldr	r3, [r3, #4]
   1159c:	add	r2, r2, #1
   115a0:	cmp	r3, #0
   115a4:	bne	11594 <__assert_fail@plt+0x9d4>
   115a8:	add	ip, ip, #1
   115ac:	cmp	ip, lr
   115b0:	bne	11584 <__assert_fail@plt+0x9c4>
   115b4:	pop	{r4, r5, r6, pc}
   115b8:	strdeq	r0, [r0], -r7
   115bc:	push	{r4, r5, r6, r7, r8, lr}
   115c0:	add	r5, r0, #8000	; 0x1f40
   115c4:	mov	r7, r0
   115c8:	mov	r6, r1
   115cc:	add	r5, r5, #48	; 0x30
   115d0:	mov	r4, r0
   115d4:	mov	r0, r4
   115d8:	mov	r1, r6
   115dc:	add	r4, r4, #16
   115e0:	bl	11158 <__assert_fail@plt+0x598>
   115e4:	cmp	r4, r5
   115e8:	bne	115d4 <__assert_fail@plt+0xa14>
   115ec:	add	r7, r7, #4096	; 0x1000
   115f0:	ldr	r0, [r7, #3952]	; 0xf70
   115f4:	cmp	r0, #0
   115f8:	beq	11608 <__assert_fail@plt+0xa48>
   115fc:	bl	10a40 <free@plt>
   11600:	mov	r3, #0
   11604:	str	r3, [r7, #3952]	; 0xf70
   11608:	mov	r3, #0
   1160c:	str	r3, [r7, #3956]	; 0xf74
   11610:	pop	{r4, r5, r6, r7, r8, pc}
   11614:	ldr	r3, [pc, #76]	; 11668 <__assert_fail@plt+0xaa8>
   11618:	ldr	r2, [pc, #76]	; 1166c <__assert_fail@plt+0xaac>
   1161c:	add	r3, pc, r3
   11620:	push	{r4, r5, lr}
   11624:	sub	sp, sp, #116	; 0x74
   11628:	ldr	r3, [r3, r2]
   1162c:	mov	r5, r0
   11630:	ldr	r4, [r3]
   11634:	bl	10b0c <getpid@plt>
   11638:	ldr	r1, [pc, #48]	; 11670 <__assert_fail@plt+0xab0>
   1163c:	mov	r2, r4
   11640:	add	r4, sp, #12
   11644:	add	r1, pc, r1
   11648:	str	r5, [sp]
   1164c:	mov	r3, r0
   11650:	mov	r0, r4
   11654:	bl	10b78 <sprintf@plt>
   11658:	mov	r0, r4
   1165c:	bl	10a70 <strdup@plt>
   11660:	add	sp, sp, #116	; 0x74
   11664:	pop	{r4, r5, pc}
   11668:	ldrdeq	r5, [r1], -ip
   1166c:	andeq	r0, r0, r8, asr #1
   11670:	andeq	r2, r0, ip, lsr r1
   11674:	ldr	r3, [pc, #108]	; 116e8 <__assert_fail@plt+0xb28>
   11678:	ldr	r2, [pc, #108]	; 116ec <__assert_fail@plt+0xb2c>
   1167c:	add	r3, pc, r3
   11680:	push	{r7, lr}
   11684:	mov	r7, r0
   11688:	ldr	r3, [r3, r2]
   1168c:	ldr	r3, [r3]
   11690:	cmp	r3, #0
   11694:	beq	1169c <__assert_fail@plt+0xadc>
   11698:	blx	r3
   1169c:	ldr	r6, [pc, #76]	; 116f0 <__assert_fail@plt+0xb30>
   116a0:	add	r6, pc, r6
   116a4:	ldrsh	r3, [r6]
   116a8:	cmp	r3, #0
   116ac:	movgt	r4, #1
   116b0:	ble	116e0 <__assert_fail@plt+0xb20>
   116b4:	mov	r0, r4
   116b8:	bl	11614 <__assert_fail@plt+0xa54>
   116bc:	add	r4, r4, #1
   116c0:	sxth	r4, r4
   116c4:	mov	r5, r0
   116c8:	bl	10a88 <unlink@plt>
   116cc:	mov	r0, r5
   116d0:	bl	10a40 <free@plt>
   116d4:	ldrsh	r3, [r6]
   116d8:	cmp	r3, r4
   116dc:	bge	116b4 <__assert_fail@plt+0xaf4>
   116e0:	mov	r0, r7
   116e4:	bl	10b18 <exit@plt>
   116e8:	andeq	r5, r1, ip, ror r9
   116ec:	andeq	r0, r0, ip, asr #1
   116f0:	andeq	r5, r1, ip, ror #20
   116f4:	ldrb	r3, [r0]
   116f8:	cmp	r3, #0
   116fc:	beq	11760 <__assert_fail@plt+0xba0>
   11700:	ldrb	ip, [r1]
   11704:	cmp	ip, r3
   11708:	bne	11770 <__assert_fail@plt+0xbb0>
   1170c:	push	{lr}		; (str lr, [sp, #-4]!)
   11710:	mov	r2, #0
   11714:	mov	lr, r1
   11718:	b	11728 <__assert_fail@plt+0xb68>
   1171c:	ldrb	ip, [lr, #1]!
   11720:	cmp	r3, ip
   11724:	bne	11748 <__assert_fail@plt+0xb88>
   11728:	ldrb	r3, [r0, #1]!
   1172c:	add	r2, r2, #1
   11730:	cmp	r3, #0
   11734:	bne	1171c <__assert_fail@plt+0xb5c>
   11738:	ldrb	ip, [r1, r2]
   1173c:	cmp	ip, #0
   11740:	movne	r3, #0
   11744:	beq	11758 <__assert_fail@plt+0xb98>
   11748:	cmp	r3, ip
   1174c:	movcs	r0, #1
   11750:	mvncc	r0, #0
   11754:	pop	{pc}		; (ldr pc, [sp], #4)
   11758:	mov	r0, ip
   1175c:	pop	{pc}		; (ldr pc, [sp], #4)
   11760:	ldrb	ip, [r1, r3]
   11764:	cmp	ip, #0
   11768:	movne	r3, #0
   1176c:	beq	11780 <__assert_fail@plt+0xbc0>
   11770:	cmp	r3, ip
   11774:	movcs	r0, #1
   11778:	mvncc	r0, #0
   1177c:	bx	lr
   11780:	mov	r0, ip
   11784:	bx	lr
   11788:	ldr	r2, [pc, #44]	; 117bc <__assert_fail@plt+0xbfc>
   1178c:	ldr	r3, [pc, #44]	; 117c0 <__assert_fail@plt+0xc00>
   11790:	add	r2, pc, r2
   11794:	ldr	r3, [r2, r3]
   11798:	ldr	r3, [r3]
   1179c:	cmp	r3, r0
   117a0:	bxeq	lr
   117a4:	ldr	r3, [pc, #24]	; 117c4 <__assert_fail@plt+0xc04>
   117a8:	ldr	r3, [r2, r3]
   117ac:	ldr	r3, [r3]
   117b0:	cmp	r0, r3
   117b4:	bxeq	lr
   117b8:	b	10b54 <fclose@plt>
   117bc:	andeq	r5, r1, r8, ror #16
   117c0:	ldrdeq	r0, [r0], -r4
   117c4:	ldrdeq	r0, [r0], -r8
   117c8:	push	{lr}		; (str lr, [sp, #-4]!)
   117cc:	sub	sp, sp, #92	; 0x5c
   117d0:	mov	r1, r0
   117d4:	mov	r2, sp
   117d8:	mov	r0, #3
   117dc:	bl	10aa0 <__xstat@plt>
   117e0:	clz	r0, r0
   117e4:	lsr	r0, r0, #5
   117e8:	add	sp, sp, #92	; 0x5c
   117ec:	pop	{pc}		; (ldr pc, [sp], #4)
   117f0:	ldr	r2, [pc, #44]	; 11824 <__assert_fail@plt+0xc64>
   117f4:	push	{r4, lr}
   117f8:	add	r2, pc, r2
   117fc:	ldrh	r3, [r2]
   11800:	add	r3, r3, #1
   11804:	sxth	r3, r3
   11808:	mov	r0, r3
   1180c:	strh	r3, [r2]
   11810:	bl	11614 <__assert_fail@plt+0xa54>
   11814:	mov	r4, r0
   11818:	bl	10a88 <unlink@plt>
   1181c:	mov	r0, r4
   11820:	pop	{r4, pc}
   11824:	andeq	r5, r1, r4, lsl r9
   11828:	push	{r4, lr}
   1182c:	mov	r4, r0
   11830:	bl	10b30 <strlen@plt>
   11834:	sub	r0, r0, #1
   11838:	sxth	r0, r0
   1183c:	cmp	r0, #0
   11840:	bge	11858 <__assert_fail@plt+0xc98>
   11844:	b	11864 <__assert_fail@plt+0xca4>
   11848:	sub	r0, r0, #1
   1184c:	sxth	r0, r0
   11850:	cmn	r0, #1
   11854:	beq	11864 <__assert_fail@plt+0xca4>
   11858:	ldrb	r3, [r4, r0]
   1185c:	cmp	r3, #47	; 0x2f
   11860:	bne	11848 <__assert_fail@plt+0xc88>
   11864:	add	r0, r0, #1
   11868:	add	r0, r4, r0
   1186c:	pop	{r4, pc}
   11870:	push	{r4, lr}
   11874:	mov	r0, #0
   11878:	bl	11674 <__assert_fail@plt+0xab4>
   1187c:	ldr	r1, [pc, #76]	; 118d0 <__assert_fail@plt+0xd10>
   11880:	ldr	r2, [pc, #76]	; 118d4 <__assert_fail@plt+0xd14>
   11884:	add	r1, pc, r1
   11888:	push	{r4, lr}
   1188c:	ldr	r2, [r1, r2]
   11890:	ldr	r2, [r2]
   11894:	cmp	r2, #0
   11898:	beq	118a4 <__assert_fail@plt+0xce4>
   1189c:	blx	r2
   118a0:	bl	11870 <__assert_fail@plt+0xcb0>
   118a4:	ldr	r2, [pc, #44]	; 118d8 <__assert_fail@plt+0xd18>
   118a8:	ldr	ip, [pc, #44]	; 118dc <__assert_fail@plt+0xd1c>
   118ac:	mov	r3, r0
   118b0:	ldr	r0, [r1, r2]
   118b4:	ldr	ip, [r1, ip]
   118b8:	ldr	r1, [pc, #32]	; 118e0 <__assert_fail@plt+0xd20>
   118bc:	ldr	r0, [r0]
   118c0:	add	r1, pc, r1
   118c4:	ldr	r2, [ip]
   118c8:	bl	10b3c <fprintf@plt>
   118cc:	b	118a0 <__assert_fail@plt+0xce0>
   118d0:	andeq	r5, r1, r4, ror r7
   118d4:	strheq	r0, [r0], -r4
   118d8:	andeq	r0, r0, r0, asr #1
   118dc:	andeq	r0, r0, r8, asr #1
   118e0:	ldrdeq	r1, [r0], -r0

000118e4 <error@@Base>:
   118e4:	push	{r4, lr}
   118e8:	mov	r3, r0
   118ec:	ldr	r4, [pc, #52]	; 11928 <error@@Base+0x44>
   118f0:	ldr	r1, [pc, #52]	; 1192c <error@@Base+0x48>
   118f4:	ldr	r2, [pc, #52]	; 11930 <error@@Base+0x4c>
   118f8:	add	r4, pc, r4
   118fc:	ldr	ip, [r4, r1]
   11900:	ldr	r0, [r4, r2]
   11904:	ldr	r1, [pc, #40]	; 11934 <error@@Base+0x50>
   11908:	ldr	r2, [ip]
   1190c:	add	r1, pc, r1
   11910:	ldr	r0, [r0]
   11914:	bl	10b3c <fprintf@plt>
   11918:	ldr	r3, [pc, #24]	; 11938 <error@@Base+0x54>
   1191c:	ldr	r3, [r4, r3]
   11920:	ldr	r0, [r3]
   11924:	bl	11674 <__assert_fail@plt+0xab4>
   11928:	andeq	r5, r1, r0, lsl #14
   1192c:	andeq	r0, r0, r8, asr #1
   11930:	andeq	r0, r0, r0, asr #1
   11934:	muleq	r0, r4, lr
   11938:	andeq	r0, r0, r0, ror #1
   1193c:	push	{r4, lr}
   11940:	bl	10a04 <calloc@plt>
   11944:	cmp	r0, #0
   11948:	popne	{r4, pc}
   1194c:	ldr	r0, [pc, #4]	; 11958 <error@@Base+0x74>
   11950:	add	r0, pc, r0
   11954:	bl	118e4 <error@@Base>
   11958:	andeq	r1, r0, r8, asr lr
   1195c:	ldr	r3, [pc, #40]	; 1198c <error@@Base+0xa8>
   11960:	add	r3, pc, r3
   11964:	ldrb	r2, [r3, #2]
   11968:	cmp	r2, #0
   1196c:	beq	11974 <error@@Base+0x90>
   11970:	bx	lr
   11974:	ldr	r0, [pc, #20]	; 11990 <error@@Base+0xac>
   11978:	push	{r4, lr}
   1197c:	mov	r2, #1
   11980:	add	r0, pc, r0
   11984:	strb	r2, [r3, #2]
   11988:	bl	118e4 <error@@Base>
   1198c:	andeq	r5, r1, ip, lsr #15
   11990:	andeq	r1, r0, r4, asr #28
   11994:	ldr	r4, [pc, #68]	; 119e0 <error@@Base+0xfc>
   11998:	ldr	r2, [pc, #68]	; 119e4 <error@@Base+0x100>
   1199c:	ldr	ip, [pc, #68]	; 119e8 <error@@Base+0x104>
   119a0:	add	r4, pc, r4
   119a4:	push	{lr}		; (str lr, [sp, #-4]!)
   119a8:	sub	sp, sp, #12
   119ac:	mov	r3, r0
   119b0:	ldr	ip, [r4, ip]
   119b4:	ldr	r0, [r4, r2]
   119b8:	str	r1, [sp]
   119bc:	ldr	r1, [pc, #40]	; 119ec <error@@Base+0x108>
   119c0:	ldr	r2, [ip]
   119c4:	ldr	r0, [r0]
   119c8:	add	r1, pc, r1
   119cc:	bl	10b3c <fprintf@plt>
   119d0:	ldr	r3, [pc, #24]	; 119f0 <error@@Base+0x10c>
   119d4:	ldr	r3, [r4, r3]
   119d8:	ldr	r0, [r3]
   119dc:	bl	11674 <__assert_fail@plt+0xab4>
   119e0:	andeq	r5, r1, r8, asr r6
   119e4:	andeq	r0, r0, r0, asr #1
   119e8:	andeq	r0, r0, r8, asr #1
   119ec:	andeq	r1, r0, ip, lsl #28
   119f0:	andeq	r0, r0, r0, ror #1
   119f4:	ldr	ip, [pc, #116]	; 11a70 <error@@Base+0x18c>
   119f8:	subs	r2, r0, #0
   119fc:	push	{r4, r5, r6, lr}
   11a00:	add	ip, pc, ip
   11a04:	mov	r4, r1
   11a08:	beq	11a38 <error@@Base+0x154>
   11a0c:	mov	r5, r2
   11a10:	bl	10a34 <fopen@plt>
   11a14:	cmp	r0, #0
   11a18:	popne	{r4, r5, r6, pc}
   11a1c:	ldrb	r3, [r4]
   11a20:	mov	r1, r5
   11a24:	cmp	r3, #119	; 0x77
   11a28:	beq	11a64 <error@@Base+0x180>
   11a2c:	ldr	r0, [pc, #64]	; 11a74 <error@@Base+0x190>
   11a30:	add	r0, pc, r0
   11a34:	bl	11994 <error@@Base+0xb0>
   11a38:	ldrb	r3, [r1]
   11a3c:	cmp	r3, #114	; 0x72
   11a40:	beq	11a54 <error@@Base+0x170>
   11a44:	ldr	r3, [pc, #44]	; 11a78 <error@@Base+0x194>
   11a48:	ldr	r3, [ip, r3]
   11a4c:	ldr	r0, [r3]
   11a50:	pop	{r4, r5, r6, pc}
   11a54:	ldr	r3, [pc, #32]	; 11a7c <error@@Base+0x198>
   11a58:	ldr	r3, [ip, r3]
   11a5c:	ldr	r0, [r3]
   11a60:	pop	{r4, r5, r6, pc}
   11a64:	ldr	r0, [pc, #20]	; 11a80 <error@@Base+0x19c>
   11a68:	add	r0, pc, r0
   11a6c:	bl	11994 <error@@Base+0xb0>
   11a70:	strdeq	r5, [r1], -r8
   11a74:	andeq	r1, r0, ip, asr #27
   11a78:	ldrdeq	r0, [r0], -r8
   11a7c:	ldrdeq	r0, [r0], -r4
   11a80:	andeq	r1, r0, ip, ror sp
   11a84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a88:	sub	sp, sp, #20
   11a8c:	mov	r7, r0
   11a90:	str	r0, [sp, #8]
   11a94:	ldr	r0, [r1]
   11a98:	str	r2, [sp, #12]
   11a9c:	mov	r9, r1
   11aa0:	mov	r6, r3
   11aa4:	bl	11828 <__assert_fail@plt+0xc68>
   11aa8:	ldr	r5, [pc, #496]	; 11ca0 <error@@Base+0x3bc>
   11aac:	ldr	r3, [pc, #496]	; 11ca4 <error@@Base+0x3c0>
   11ab0:	add	r5, pc, r5
   11ab4:	ldr	r4, [pc, #492]	; 11ca8 <error@@Base+0x3c4>
   11ab8:	ldr	r3, [r5, r3]
   11abc:	add	r4, pc, r4
   11ac0:	mov	r1, r4
   11ac4:	str	r0, [r3]
   11ac8:	mov	r0, #2
   11acc:	bl	10af4 <__sysv_signal@plt>
   11ad0:	mov	r1, r4
   11ad4:	mov	r0, #15
   11ad8:	bl	10af4 <__sysv_signal@plt>
   11adc:	ldr	fp, [r7]
   11ae0:	cmp	fp, #1
   11ae4:	beq	11c2c <error@@Base+0x348>
   11ae8:	mov	r7, #0
   11aec:	ble	11c40 <error@@Base+0x35c>
   11af0:	ldr	r3, [pc, #436]	; 11cac <error@@Base+0x3c8>
   11af4:	mov	sl, #1
   11af8:	add	r3, pc, r3
   11afc:	str	r3, [sp, #4]
   11b00:	mov	r4, sl
   11b04:	mov	r3, fp
   11b08:	b	11b2c <error@@Base+0x248>
   11b0c:	add	r2, r7, #1
   11b10:	str	r5, [r9, r7, lsl #2]
   11b14:	sxth	r7, r2
   11b18:	add	r4, r4, #1
   11b1c:	sxth	r4, r4
   11b20:	cmp	r4, r3
   11b24:	mov	sl, r4
   11b28:	bge	11c40 <error@@Base+0x35c>
   11b2c:	ldr	r5, [r9, r4, lsl #2]
   11b30:	lsl	fp, r4, #2
   11b34:	ldrb	r2, [r5]
   11b38:	cmp	r2, #45	; 0x2d
   11b3c:	bne	11b0c <error@@Base+0x228>
   11b40:	ldrb	r8, [r5, #1]
   11b44:	cmp	r8, #0
   11b48:	beq	11b0c <error@@Base+0x228>
   11b4c:	mov	r0, r5
   11b50:	str	r3, [sp]
   11b54:	bl	10b30 <strlen@plt>
   11b58:	mov	r1, r5
   11b5c:	mov	r2, r0
   11b60:	ldr	r0, [sp, #4]
   11b64:	bl	10b9c <strncmp@plt>
   11b68:	cmp	r0, #0
   11b6c:	beq	11c88 <error@@Base+0x3a4>
   11b70:	ldr	r3, [sp]
   11b74:	add	sl, sl, #1
   11b78:	cmp	sl, r3
   11b7c:	addlt	fp, r9, fp
   11b80:	movge	ip, #0
   11b84:	ldrlt	ip, [fp, #4]
   11b88:	cmp	r6, #0
   11b8c:	beq	11bd0 <error@@Base+0x2ec>
   11b90:	ldrb	r2, [r6]
   11b94:	cmp	r2, #0
   11b98:	beq	11bd0 <error@@Base+0x2ec>
   11b9c:	cmp	r2, r8
   11ba0:	beq	11be0 <error@@Base+0x2fc>
   11ba4:	mov	r2, #0
   11ba8:	b	11bb4 <error@@Base+0x2d0>
   11bac:	cmp	r8, r0
   11bb0:	beq	11be4 <error@@Base+0x300>
   11bb4:	add	r2, r2, #1
   11bb8:	sxth	r2, r2
   11bbc:	add	r1, r2, r2, lsl #1
   11bc0:	ldrb	r0, [r6, r1, lsl #2]
   11bc4:	add	r1, r6, r1, lsl #2
   11bc8:	cmp	r0, #0
   11bcc:	bne	11bac <error@@Base+0x2c8>
   11bd0:	ldr	r0, [pc, #216]	; 11cb0 <error@@Base+0x3cc>
   11bd4:	mov	r1, r5
   11bd8:	add	r0, pc, r0
   11bdc:	bl	11994 <error@@Base+0xb0>
   11be0:	mov	r1, r6
   11be4:	ldr	r2, [r1, #4]
   11be8:	cmp	r2, #0
   11bec:	beq	11c50 <error@@Base+0x36c>
   11bf0:	ldrb	r0, [r5, #2]
   11bf4:	cmp	r0, #0
   11bf8:	cmpeq	ip, #0
   11bfc:	beq	11c50 <error@@Base+0x36c>
   11c00:	ldr	r1, [r2]
   11c04:	cmp	r1, #0
   11c08:	bne	11c90 <error@@Base+0x3ac>
   11c0c:	cmp	r0, #0
   11c10:	addne	ip, r5, #2
   11c14:	str	ip, [r2]
   11c18:	ldrb	r2, [r5, #2]
   11c1c:	cmp	r2, #0
   11c20:	addeq	r4, r4, #1
   11c24:	sxtheq	r4, r4
   11c28:	b	11b18 <error@@Base+0x234>
   11c2c:	ldr	r3, [pc, #128]	; 11cb4 <error@@Base+0x3d0>
   11c30:	ldr	r3, [r5, r3]
   11c34:	ldrb	r7, [r3]
   11c38:	cmp	r7, #0
   11c3c:	bne	11c88 <error@@Base+0x3a4>
   11c40:	ldr	r3, [sp, #8]
   11c44:	str	r7, [r3]
   11c48:	add	sp, sp, #20
   11c4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c50:	ldr	r3, [r1, #8]
   11c54:	cmp	r3, #0
   11c58:	beq	11bd0 <error@@Base+0x2ec>
   11c5c:	ldrb	r2, [r5, #2]
   11c60:	cmp	r2, #0
   11c64:	bne	11bd0 <error@@Base+0x2ec>
   11c68:	ldrb	r2, [r3]
   11c6c:	cmp	r2, #0
   11c70:	bne	11c90 <error@@Base+0x3ac>
   11c74:	mov	r2, #1
   11c78:	strb	r2, [r3]
   11c7c:	ldr	r3, [sp, #8]
   11c80:	ldr	r3, [r3]
   11c84:	b	11b18 <error@@Base+0x234>
   11c88:	ldr	r0, [sp, #12]
   11c8c:	bl	1187c <__assert_fail@plt+0xcbc>
   11c90:	ldr	r0, [pc, #32]	; 11cb8 <error@@Base+0x3d4>
   11c94:	mov	r1, r5
   11c98:	add	r0, pc, r0
   11c9c:	bl	11994 <error@@Base+0xb0>
   11ca0:	andeq	r5, r1, r8, asr #10
   11ca4:	andeq	r0, r0, r8, asr #1
   11ca8:			; <UNDEFINED> instruction: 0xfffffe98
   11cac:	andeq	r1, r0, r8, lsl sp
   11cb0:	andeq	r1, r0, r0, asr #24
   11cb4:	andeq	r0, r0, ip, lsr #1
   11cb8:	muleq	r0, r0, fp
   11cbc:	ldr	ip, [pc, #60]	; 11d00 <error@@Base+0x41c>
   11cc0:	push	{lr}		; (str lr, [sp, #-4]!)
   11cc4:	add	ip, pc, ip
   11cc8:	ldr	r2, [pc, #52]	; 11d04 <error@@Base+0x420>
   11ccc:	ldr	lr, [pc, #52]	; 11d08 <error@@Base+0x424>
   11cd0:	sub	sp, sp, #12
   11cd4:	mov	r3, r0
   11cd8:	ldr	lr, [ip, lr]
   11cdc:	ldr	r0, [ip, r2]
   11ce0:	str	r1, [sp]
   11ce4:	ldr	r1, [pc, #32]	; 11d0c <error@@Base+0x428>
   11ce8:	ldr	r2, [lr]
   11cec:	add	r1, pc, r1
   11cf0:	ldr	r0, [r0]
   11cf4:	bl	10b3c <fprintf@plt>
   11cf8:	add	sp, sp, #12
   11cfc:	pop	{pc}		; (ldr pc, [sp], #4)
   11d00:	andeq	r5, r1, r4, lsr r3
   11d04:	andeq	r0, r0, r0, asr #1
   11d08:	andeq	r0, r0, r8, asr #1
   11d0c:	andeq	r1, r0, r8, ror #21
   11d10:	push	{r4, r5, r6, lr}
   11d14:	mov	r2, r0
   11d18:	ldr	r4, [pc, #60]	; 11d5c <error@@Base+0x478>
   11d1c:	mov	r5, r1
   11d20:	add	r4, pc, r4
   11d24:	mov	r1, #99	; 0x63
   11d28:	mov	r0, r4
   11d2c:	bl	10a58 <fgets@plt>
   11d30:	cmp	r0, #0
   11d34:	popeq	{r4, r5, r6, pc}
   11d38:	ldr	r1, [pc, #32]	; 11d60 <error@@Base+0x47c>
   11d3c:	mov	r2, r5
   11d40:	mov	r0, r4
   11d44:	add	r1, pc, r1
   11d48:	bl	10b48 <__isoc99_sscanf@plt>
   11d4c:	sub	r0, r0, #1
   11d50:	clz	r0, r0
   11d54:	lsr	r0, r0, #5
   11d58:	pop	{r4, r5, r6, pc}
   11d5c:	strdeq	r5, [r1], -r0
   11d60:	strdeq	r1, [r0], -ip
   11d64:	push	{r4, r5, r6, lr}
   11d68:	mov	r6, r2
   11d6c:	ldr	r4, [pc, #68]	; 11db8 <error@@Base+0x4d4>
   11d70:	mov	r2, r0
   11d74:	add	r4, pc, r4
   11d78:	mov	r5, r1
   11d7c:	mov	r0, r4
   11d80:	mov	r1, #99	; 0x63
   11d84:	bl	10a58 <fgets@plt>
   11d88:	cmp	r0, #0
   11d8c:	popeq	{r4, r5, r6, pc}
   11d90:	ldr	r1, [pc, #36]	; 11dbc <error@@Base+0x4d8>
   11d94:	mov	r3, r6
   11d98:	mov	r2, r5
   11d9c:	mov	r0, r4
   11da0:	add	r1, pc, r1
   11da4:	bl	10b48 <__isoc99_sscanf@plt>
   11da8:	sub	r0, r0, #2
   11dac:	clz	r0, r0
   11db0:	lsr	r0, r0, #5
   11db4:	pop	{r4, r5, r6, pc}
   11db8:	muleq	r1, ip, r3
   11dbc:	muleq	r0, ip, sl
   11dc0:	ldr	r1, [r1, #8]
   11dc4:	ldr	r0, [r0, #8]
   11dc8:	b	116f4 <__assert_fail@plt+0xb34>
   11dcc:	ldr	r2, [r1]
   11dd0:	mov	r3, r0
   11dd4:	cmp	r2, #0
   11dd8:	beq	11e10 <error@@Base+0x52c>
   11ddc:	ldr	r3, [r1, #4]
   11de0:	vmov	s15, r2
   11de4:	sub	r3, r2, r3
   11de8:	vldr	d5, [pc, #56]	; 11e28 <error@@Base+0x544>
   11dec:	vmov	s14, r3
   11df0:	vcvt.f64.s32	d6, s15
   11df4:	ldr	r1, [pc, #52]	; 11e30 <error@@Base+0x54c>
   11df8:	vcvt.f64.s32	d7, s14
   11dfc:	add	r1, pc, r1
   11e00:	vmul.f64	d7, d7, d5
   11e04:	vdiv.f64	d5, d7, d6
   11e08:	vmov	r2, r3, d5
   11e0c:	b	10b3c <fprintf@plt>
   11e10:	ldr	r0, [pc, #28]	; 11e34 <error@@Base+0x550>
   11e14:	mov	r2, #8
   11e18:	mov	r1, #1
   11e1c:	add	r0, pc, r0
   11e20:	b	10aac <fwrite@plt>
   11e24:	nop			; (mov r0, r0)
   11e28:	andeq	r0, r0, r0
   11e2c:	subsmi	r0, r9, r0
   11e30:	andeq	r1, r0, r4, asr sl
   11e34:	andeq	r1, r0, r8, lsr #20
   11e38:	push	{r4, r5, r6, lr}
   11e3c:	subs	r4, r1, #0
   11e40:	mov	r5, r0
   11e44:	beq	11e80 <error@@Base+0x59c>
   11e48:	ldr	r1, [pc, #76]	; 11e9c <error@@Base+0x5b8>
   11e4c:	ldm	r4, {r2, r3}
   11e50:	add	r1, pc, r1
   11e54:	bl	10b3c <fprintf@plt>
   11e58:	mov	r1, r4
   11e5c:	mov	r0, r5
   11e60:	bl	11dcc <error@@Base+0x4e8>
   11e64:	ldr	r0, [pc, #52]	; 11ea0 <error@@Base+0x5bc>
   11e68:	mov	r3, r5
   11e6c:	mov	r2, #3
   11e70:	mov	r1, #1
   11e74:	add	r0, pc, r0
   11e78:	pop	{r4, r5, r6, lr}
   11e7c:	b	10aac <fwrite@plt>
   11e80:	mov	r3, r0
   11e84:	ldr	r0, [pc, #24]	; 11ea4 <error@@Base+0x5c0>
   11e88:	mov	r2, #26
   11e8c:	mov	r1, #1
   11e90:	add	r0, pc, r0
   11e94:	bl	10aac <fwrite@plt>
   11e98:	b	11e64 <error@@Base+0x580>
   11e9c:	andeq	r1, r0, r8, lsl #20
   11ea0:	andeq	r1, r0, ip, lsl #20
   11ea4:	ldrdeq	r1, [r0], -r4
   11ea8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11eac:	mov	r5, r1
   11eb0:	ldr	r1, [pc, #284]	; 11fd4 <error@@Base+0x6f0>
   11eb4:	ldrb	r9, [sp, #32]
   11eb8:	mov	r6, r0
   11ebc:	add	r1, pc, r1
   11ec0:	mov	r7, r2
   11ec4:	mov	r2, r3
   11ec8:	ldrb	sl, [sp, #36]	; 0x24
   11ecc:	bl	10b3c <fprintf@plt>
   11ed0:	mov	r0, r6
   11ed4:	mov	r1, #0
   11ed8:	bl	11e38 <error@@Base+0x554>
   11edc:	cmp	r9, #0
   11ee0:	beq	11fb0 <error@@Base+0x6cc>
   11ee4:	ldr	r2, [pc, #236]	; 11fd8 <error@@Base+0x6f4>
   11ee8:	ldr	r1, [pc, #236]	; 11fdc <error@@Base+0x6f8>
   11eec:	add	r2, pc, r2
   11ef0:	add	r1, pc, r1
   11ef4:	mov	r0, r6
   11ef8:	bl	10b3c <fprintf@plt>
   11efc:	cmp	r7, #0
   11f00:	ble	11f50 <error@@Base+0x66c>
   11f04:	ldr	r8, [pc, #212]	; 11fe0 <error@@Base+0x6fc>
   11f08:	mov	r4, #1
   11f0c:	add	r8, pc, r8
   11f10:	ldr	r3, [r5, r4, lsl #3]
   11f14:	mov	r0, r6
   11f18:	cmp	r3, #0
   11f1c:	add	r1, r5, r4, lsl #3
   11f20:	ble	11f38 <error@@Base+0x654>
   11f24:	bl	11e38 <error@@Base+0x554>
   11f28:	mov	r2, r4
   11f2c:	mov	r1, r8
   11f30:	mov	r0, r6
   11f34:	bl	10b3c <fprintf@plt>
   11f38:	add	r4, r4, #1
   11f3c:	sxth	r4, r4
   11f40:	cmp	r7, r4
   11f44:	bge	11f10 <error@@Base+0x62c>
   11f48:	cmp	r9, #0
   11f4c:	beq	11f80 <error@@Base+0x69c>
   11f50:	add	r1, r7, #1
   11f54:	ldr	r3, [r5, r1, lsl #3]
   11f58:	add	r1, r5, r1, lsl #3
   11f5c:	cmp	r3, #0
   11f60:	ble	11f80 <error@@Base+0x69c>
   11f64:	mov	r0, r6
   11f68:	bl	11e38 <error@@Base+0x554>
   11f6c:	ldr	r1, [pc, #112]	; 11fe4 <error@@Base+0x700>
   11f70:	mov	r2, r7
   11f74:	add	r1, pc, r1
   11f78:	mov	r0, r6
   11f7c:	bl	10b3c <fprintf@plt>
   11f80:	cmp	sl, #0
   11f84:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11f88:	mov	r1, r5
   11f8c:	mov	r0, r6
   11f90:	bl	11e38 <error@@Base+0x554>
   11f94:	ldr	r0, [pc, #76]	; 11fe8 <error@@Base+0x704>
   11f98:	mov	r3, r6
   11f9c:	mov	r2, #7
   11fa0:	mov	r1, #1
   11fa4:	add	r0, pc, r0
   11fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   11fac:	b	10aac <fwrite@plt>
   11fb0:	ldr	r2, [pc, #52]	; 11fec <error@@Base+0x708>
   11fb4:	ldr	r1, [pc, #52]	; 11ff0 <error@@Base+0x70c>
   11fb8:	add	r2, pc, r2
   11fbc:	add	r1, pc, r1
   11fc0:	mov	r0, r6
   11fc4:	bl	10b3c <fprintf@plt>
   11fc8:	cmp	r7, #0
   11fcc:	bgt	11f04 <error@@Base+0x620>
   11fd0:	b	11f80 <error@@Base+0x69c>
   11fd4:	andeq	r1, r0, r8, asr #19
   11fd8:	andeq	r1, r0, r0, asr #19
   11fdc:			; <UNDEFINED> instruction: 0x000018b4
   11fe0:	andeq	r1, r0, r0, lsl #19
   11fe4:	andeq	r1, r0, r4, lsr #18
   11fe8:	andeq	r1, r0, r0, lsl #18
   11fec:	strdeq	r1, [r0], -ip
   11ff0:	andeq	r1, r0, r8, ror #15
   11ff4:	push	{r4, r5, r6, r7, r8, lr}
   11ff8:	mov	r6, r0
   11ffc:	mov	r0, r1
   12000:	add	r5, r1, #4096	; 0x1000
   12004:	mov	r4, r2
   12008:	bl	11544 <__assert_fail@plt+0x984>
   1200c:	ldr	r2, [pc, #144]	; 120a4 <error@@Base+0x7c0>
   12010:	ldr	r1, [r5, #3952]	; 0xf70
   12014:	ldr	r0, [r5, #3956]	; 0xf74
   12018:	add	r2, pc, r2
   1201c:	bl	11350 <__assert_fail@plt+0x790>
   12020:	ldr	r1, [pc, #128]	; 120a8 <error@@Base+0x7c4>
   12024:	mov	r2, r4
   12028:	add	r1, pc, r1
   1202c:	mov	r0, r6
   12030:	bl	10b3c <fprintf@plt>
   12034:	mov	r0, r6
   12038:	mov	r1, #0
   1203c:	bl	11e38 <error@@Base+0x554>
   12040:	mov	r1, r6
   12044:	mov	r0, #10
   12048:	bl	10b6c <fputc@plt>
   1204c:	ldr	r3, [r5, #3956]	; 0xf74
   12050:	cmp	r3, #0
   12054:	pople	{r4, r5, r6, r7, r8, pc}
   12058:	ldr	r7, [pc, #76]	; 120ac <error@@Base+0x7c8>
   1205c:	mov	r4, #0
   12060:	add	r7, pc, r7
   12064:	ldr	r3, [r5, #3952]	; 0xf70
   12068:	mov	r0, r6
   1206c:	ldr	r1, [r3, r4, lsl #2]
   12070:	add	r1, r1, #12
   12074:	bl	11e38 <error@@Base+0x554>
   12078:	ldr	r3, [r5, #3952]	; 0xf70
   1207c:	mov	r1, r7
   12080:	mov	r0, r6
   12084:	ldr	r3, [r3, r4, lsl #2]
   12088:	add	r4, r4, #1
   1208c:	ldr	r2, [r3, #8]
   12090:	bl	10b3c <fprintf@plt>
   12094:	ldr	r3, [r5, #3956]	; 0xf74
   12098:	cmp	r3, r4
   1209c:	bgt	12064 <error@@Base+0x780>
   120a0:	pop	{r4, r5, r6, r7, r8, pc}
   120a4:			; <UNDEFINED> instruction: 0xfffffda0
   120a8:	andeq	r1, r0, ip, asr r8
   120ac:	andeq	r1, r0, r4, asr #14
   120b0:	ldr	ip, [r0]
   120b4:	ldr	r3, [r0, #4]
   120b8:	add	r1, ip, r1
   120bc:	add	r2, r3, r2
   120c0:	stm	r0, {r1, r2}
   120c4:	bx	lr
   120c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120cc:	mov	r2, r0
   120d0:	ldr	r4, [pc, #236]	; 121c4 <error@@Base+0x8e0>
   120d4:	sub	sp, sp, #20
   120d8:	add	r4, pc, r4
   120dc:	mov	r6, r0
   120e0:	mov	sl, r1
   120e4:	mov	r0, r4
   120e8:	mov	r1, #99	; 0x63
   120ec:	bl	10a58 <fgets@plt>
   120f0:	cmp	r0, #0
   120f4:	beq	121b0 <error@@Base+0x8cc>
   120f8:	mov	r0, r4
   120fc:	mov	r2, r6
   12100:	mov	r1, #99	; 0x63
   12104:	bl	10a58 <fgets@plt>
   12108:	cmp	r0, #0
   1210c:	beq	121b0 <error@@Base+0x8cc>
   12110:	ldr	r4, [pc, #176]	; 121c8 <error@@Base+0x8e4>
   12114:	ldr	fp, [pc, #176]	; 121cc <error@@Base+0x8e8>
   12118:	mov	r3, #0
   1211c:	add	r4, pc, r4
   12120:	str	r3, [sp, #4]
   12124:	add	r4, r4, #29
   12128:	mov	r5, r3
   1212c:	add	r9, sp, #12
   12130:	add	r8, sp, #8
   12134:	mov	r7, #10
   12138:	add	fp, pc, fp
   1213c:	b	12154 <error@@Base+0x870>
   12140:	ldr	r1, [sp, #8]
   12144:	lsl	r3, r3, #3
   12148:	add	r0, sl, r3
   1214c:	ldr	r2, [sp, #12]
   12150:	bl	120b0 <error@@Base+0x7cc>
   12154:	mov	r2, r9
   12158:	mov	r1, r8
   1215c:	mov	r0, r6
   12160:	bl	11d64 <error@@Base+0x480>
   12164:	mov	r2, r7
   12168:	mov	r1, r5
   1216c:	cmp	r0, #0
   12170:	mov	r0, r4
   12174:	beq	121b8 <error@@Base+0x8d4>
   12178:	bl	10a1c <strtol@plt>
   1217c:	mov	r1, fp
   12180:	subs	r3, r0, #0
   12184:	mov	r0, r4
   12188:	bne	12140 <error@@Base+0x85c>
   1218c:	bl	10a10 <strcmp@plt>
   12190:	mov	r3, r5
   12194:	cmp	r0, #0
   12198:	movne	r3, #88	; 0x58
   1219c:	ldreq	r2, [sp, #8]
   121a0:	ldrne	r1, [sp, #8]
   121a4:	streq	r2, [sp, #4]
   121a8:	moveq	r1, r2
   121ac:	b	12148 <error@@Base+0x864>
   121b0:	mov	r3, #0
   121b4:	str	r3, [sp, #4]
   121b8:	ldr	r0, [sp, #4]
   121bc:	add	sp, sp, #20
   121c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121c4:	andeq	r5, r1, r8, lsr r0
   121c8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   121cc:	andeq	r1, r0, ip, ror #14
   121d0:	push	{r4, r5, r6, r7, r8, lr}
   121d4:	mov	r5, r2
   121d8:	mov	r6, r3
   121dc:	mov	r7, r0
   121e0:	mov	r8, r1
   121e4:	bl	113b8 <__assert_fail@plt+0x7f8>
   121e8:	subs	r4, r0, #0
   121ec:	beq	12204 <error@@Base+0x920>
   121f0:	mov	r2, r6
   121f4:	mov	r1, r5
   121f8:	add	r0, r4, #12
   121fc:	pop	{r4, r5, r6, r7, r8, lr}
   12200:	b	120b0 <error@@Base+0x7cc>
   12204:	mov	r1, #20
   12208:	mov	r0, #1
   1220c:	bl	1193c <error@@Base+0x58>
   12210:	mov	r4, r0
   12214:	mov	r0, r8
   12218:	bl	10a70 <strdup@plt>
   1221c:	mov	r1, r4
   12220:	str	r0, [r4, #8]
   12224:	mov	r0, r7
   12228:	bl	1143c <__assert_fail@plt+0x87c>
   1222c:	b	121f0 <error@@Base+0x90c>
   12230:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12234:	mov	r2, r0
   12238:	ldr	r4, [pc, #148]	; 122d4 <error@@Base+0x9f0>
   1223c:	sub	sp, sp, #8
   12240:	add	r4, pc, r4
   12244:	mov	r5, r0
   12248:	mov	r8, r1
   1224c:	mov	r0, r4
   12250:	mov	r1, #99	; 0x63
   12254:	bl	10a58 <fgets@plt>
   12258:	cmp	r0, #0
   1225c:	beq	122cc <error@@Base+0x9e8>
   12260:	mov	r0, r4
   12264:	mov	r2, r5
   12268:	mov	r1, #99	; 0x63
   1226c:	bl	10a58 <fgets@plt>
   12270:	cmp	r0, #0
   12274:	beq	122cc <error@@Base+0x9e8>
   12278:	ldr	r4, [pc, #88]	; 122d8 <error@@Base+0x9f4>
   1227c:	add	r7, sp, #4
   12280:	add	r4, pc, r4
   12284:	add	sl, r4, #29
   12288:	mov	r6, sp
   1228c:	mov	r9, #0
   12290:	b	122b0 <error@@Base+0x9cc>
   12294:	bl	10b30 <strlen@plt>
   12298:	ldm	sp, {r2, r3}
   1229c:	mov	r1, sl
   122a0:	add	ip, r4, r0
   122a4:	mov	r0, r8
   122a8:	strb	r9, [ip, #-1]
   122ac:	bl	121d0 <error@@Base+0x8ec>
   122b0:	mov	r2, r7
   122b4:	mov	r1, r6
   122b8:	mov	r0, r5
   122bc:	bl	11d64 <error@@Base+0x480>
   122c0:	cmp	r0, #0
   122c4:	mov	r0, r4
   122c8:	bne	12294 <error@@Base+0x9b0>
   122cc:	add	sp, sp, #8
   122d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   122d4:	ldrdeq	r4, [r1], -r0
   122d8:	muleq	r1, r0, lr
   122dc:	push	{r4, r5, r6, r7, lr}
   122e0:	mov	r7, r1
   122e4:	ldr	r1, [pc, #392]	; 12474 <error@@Base+0xb90>
   122e8:	sub	sp, sp, #12
   122ec:	add	r1, pc, r1
   122f0:	mov	r6, r0
   122f4:	mov	r0, r7
   122f8:	bl	119f4 <error@@Base+0x110>
   122fc:	ldr	r5, [pc, #372]	; 12478 <error@@Base+0xb94>
   12300:	mov	r1, #99	; 0x63
   12304:	add	r5, pc, r5
   12308:	mov	r2, r0
   1230c:	mov	r4, r0
   12310:	mov	r0, r5
   12314:	bl	10a58 <fgets@plt>
   12318:	cmp	r0, #0
   1231c:	beq	12450 <error@@Base+0xb6c>
   12320:	ldr	r1, [pc, #340]	; 1247c <error@@Base+0xb98>
   12324:	mov	r2, #45	; 0x2d
   12328:	add	r1, pc, r1
   1232c:	mov	r0, r5
   12330:	bl	10b9c <strncmp@plt>
   12334:	cmp	r0, #0
   12338:	bne	12450 <error@@Base+0xb6c>
   1233c:	mov	r2, r4
   12340:	mov	r1, #99	; 0x63
   12344:	mov	r0, r5
   12348:	bl	10a58 <fgets@plt>
   1234c:	cmp	r0, #0
   12350:	beq	12450 <error@@Base+0xb6c>
   12354:	ldr	r1, [pc, #292]	; 12480 <error@@Base+0xb9c>
   12358:	mov	r0, r5
   1235c:	add	r1, pc, r1
   12360:	bl	10a10 <strcmp@plt>
   12364:	cmp	r0, #0
   12368:	bne	12450 <error@@Base+0xb6c>
   1236c:	mov	r1, sp
   12370:	mov	r0, r4
   12374:	bl	11d10 <error@@Base+0x42c>
   12378:	cmp	r0, #0
   1237c:	beq	12450 <error@@Base+0xb6c>
   12380:	add	r1, sp, #4
   12384:	mov	r0, r4
   12388:	bl	11d10 <error@@Base+0x42c>
   1238c:	cmp	r0, #0
   12390:	beq	12450 <error@@Base+0xb6c>
   12394:	mov	r2, r4
   12398:	mov	r1, #99	; 0x63
   1239c:	mov	r0, r5
   123a0:	bl	10a58 <fgets@plt>
   123a4:	cmp	r0, #0
   123a8:	beq	12450 <error@@Base+0xb6c>
   123ac:	mov	r0, r5
   123b0:	mov	r2, r4
   123b4:	mov	r1, #99	; 0x63
   123b8:	bl	10a58 <fgets@plt>
   123bc:	cmp	r0, #0
   123c0:	beq	12450 <error@@Base+0xb6c>
   123c4:	ldm	sp, {r1, r2}
   123c8:	mov	r0, r6
   123cc:	bl	120b0 <error@@Base+0x7cc>
   123d0:	add	r1, r6, #8
   123d4:	mov	r0, r4
   123d8:	bl	120c8 <error@@Base+0x7e4>
   123dc:	add	r1, r6, #416	; 0x1a0
   123e0:	mov	r7, r0
   123e4:	mov	r0, r4
   123e8:	bl	120c8 <error@@Base+0x7e4>
   123ec:	add	r1, r6, #824	; 0x338
   123f0:	mov	r5, r0
   123f4:	mov	r0, r4
   123f8:	bl	120c8 <error@@Base+0x7e4>
   123fc:	ldr	r3, [sp]
   12400:	cmp	r3, #0
   12404:	ble	12440 <error@@Base+0xb5c>
   12408:	add	r1, r6, #920	; 0x398
   1240c:	mov	r0, r4
   12410:	bl	120c8 <error@@Base+0x7e4>
   12414:	cmp	r7, #0
   12418:	ble	12428 <error@@Base+0xb44>
   1241c:	add	r1, r6, #992	; 0x3e0
   12420:	mov	r0, r4
   12424:	bl	12230 <error@@Base+0x94c>
   12428:	cmp	r5, #0
   1242c:	ble	12440 <error@@Base+0xb5c>
   12430:	add	r1, r6, #9024	; 0x2340
   12434:	add	r1, r1, #24
   12438:	mov	r0, r4
   1243c:	bl	12230 <error@@Base+0x94c>
   12440:	mov	r0, r4
   12444:	bl	11788 <__assert_fail@plt+0xbc8>
   12448:	add	sp, sp, #12
   1244c:	pop	{r4, r5, r6, r7, pc}
   12450:	cmp	r7, #0
   12454:	beq	12468 <error@@Base+0xb84>
   12458:	ldr	r0, [pc, #36]	; 12484 <error@@Base+0xba0>
   1245c:	mov	r1, r7
   12460:	add	r0, pc, r0
   12464:	bl	11994 <error@@Base+0xb0>
   12468:	ldr	r7, [pc, #24]	; 12488 <error@@Base+0xba4>
   1246c:	add	r7, pc, r7
   12470:	b	12458 <error@@Base+0xb74>
   12474:	ldrdeq	r1, [r0], -r8
   12478:	andeq	r4, r1, ip, lsl #28
   1247c:	andeq	r1, r0, r0, lsr #11
   12480:	andeq	r4, r0, ip, lsl sl
   12484:	muleq	r0, r8, r4
   12488:	andeq	r1, r0, r0, asr r4
   1248c:	mov	r3, r1
   12490:	ldr	r1, [pc, #360]	; 12600 <error@@Base+0xd1c>
   12494:	push	{r4, r5, r6, r7, r8, lr}
   12498:	add	r1, pc, r1
   1249c:	sub	sp, sp, #8
   124a0:	mov	r4, r0
   124a4:	mov	r0, r3
   124a8:	bl	119f4 <error@@Base+0x110>
   124ac:	ldr	r3, [pc, #336]	; 12604 <error@@Base+0xd20>
   124b0:	ldr	r2, [pc, #336]	; 12608 <error@@Base+0xd24>
   124b4:	ldr	r1, [pc, #336]	; 1260c <error@@Base+0xd28>
   124b8:	add	r3, pc, r3
   124bc:	add	r2, pc, r2
   124c0:	add	r1, pc, r1
   124c4:	ldr	r8, [pc, #324]	; 12610 <error@@Base+0xd2c>
   124c8:	mov	r7, #0
   124cc:	add	r8, pc, r8
   124d0:	mov	r5, r0
   124d4:	bl	10b3c <fprintf@plt>
   124d8:	ldr	r1, [pc, #308]	; 12614 <error@@Base+0xd30>
   124dc:	ldr	r2, [r4]
   124e0:	add	r1, pc, r1
   124e4:	mov	r0, r5
   124e8:	bl	10b3c <fprintf@plt>
   124ec:	ldr	r1, [pc, #292]	; 12618 <error@@Base+0xd34>
   124f0:	ldr	r2, [r4, #4]
   124f4:	add	r1, pc, r1
   124f8:	mov	r0, r5
   124fc:	bl	10b3c <fprintf@plt>
   12500:	mov	r1, r4
   12504:	mov	r0, r5
   12508:	bl	11dcc <error@@Base+0x4e8>
   1250c:	ldr	r0, [pc, #264]	; 1261c <error@@Base+0xd38>
   12510:	mov	r1, #1
   12514:	mov	r6, r1
   12518:	mov	r3, r5
   1251c:	mov	r2, #12
   12520:	add	r0, pc, r0
   12524:	bl	10aac <fwrite@plt>
   12528:	add	r1, r4, #8
   1252c:	mov	r0, r5
   12530:	mov	r3, r8
   12534:	mov	r2, #50	; 0x32
   12538:	str	r6, [sp, #4]
   1253c:	str	r7, [sp]
   12540:	bl	11ea8 <error@@Base+0x5c4>
   12544:	ldr	r3, [pc, #212]	; 12620 <error@@Base+0xd3c>
   12548:	add	r1, r4, #416	; 0x1a0
   1254c:	mov	r0, r5
   12550:	add	r3, pc, r3
   12554:	mov	r2, #50	; 0x32
   12558:	str	r6, [sp, #4]
   1255c:	str	r7, [sp]
   12560:	bl	11ea8 <error@@Base+0x5c4>
   12564:	ldr	r3, [pc, #184]	; 12624 <error@@Base+0xd40>
   12568:	str	r6, [sp, #4]
   1256c:	add	r3, pc, r3
   12570:	str	r6, [sp]
   12574:	add	r1, r4, #824	; 0x338
   12578:	mov	r0, r5
   1257c:	mov	r2, #10
   12580:	bl	11ea8 <error@@Base+0x5c4>
   12584:	ldr	r3, [r4]
   12588:	cmp	r3, r7
   1258c:	ble	125f0 <error@@Base+0xd0c>
   12590:	ldr	r3, [pc, #144]	; 12628 <error@@Base+0xd44>
   12594:	str	r7, [sp, #4]
   12598:	add	r3, pc, r3
   1259c:	str	r7, [sp]
   125a0:	mov	r2, #8
   125a4:	add	r1, r4, #920	; 0x398
   125a8:	mov	r0, r5
   125ac:	bl	11ea8 <error@@Base+0x5c4>
   125b0:	ldr	r3, [r4, #8]
   125b4:	cmp	r3, r7
   125b8:	ble	125cc <error@@Base+0xce8>
   125bc:	mov	r2, r8
   125c0:	add	r1, r4, #992	; 0x3e0
   125c4:	mov	r0, r5
   125c8:	bl	11ff4 <error@@Base+0x710>
   125cc:	ldr	r3, [r4, #416]	; 0x1a0
   125d0:	cmp	r3, #0
   125d4:	ble	125f0 <error@@Base+0xd0c>
   125d8:	ldr	r2, [pc, #76]	; 1262c <error@@Base+0xd48>
   125dc:	add	r1, r4, #9024	; 0x2340
   125e0:	add	r1, r1, #24
   125e4:	add	r2, pc, r2
   125e8:	mov	r0, r5
   125ec:	bl	11ff4 <error@@Base+0x710>
   125f0:	mov	r0, r5
   125f4:	add	sp, sp, #8
   125f8:	pop	{r4, r5, r6, r7, r8, lr}
   125fc:	b	11788 <__assert_fail@plt+0xbc8>
   12600:	andeq	r1, r0, r4, ror r4
   12604:	andeq	r4, r0, r0, asr #17
   12608:	andeq	r1, r0, ip, lsl #8
   1260c:	andeq	r1, r0, r0, asr r4
   12610:	andeq	r1, r0, r4, lsl #9
   12614:	andeq	r1, r0, r8, lsr r4
   12618:	andeq	r1, r0, r4, lsr r4
   1261c:	andeq	r1, r0, r0, lsr #8
   12620:	andeq	r1, r0, ip, lsl #8
   12624:	andeq	r1, r0, r0, lsl #8
   12628:	andeq	r1, r0, ip, ror #7
   1262c:	andeq	r1, r0, r8, ror r3
   12630:	cmp	r0, #0
   12634:	bxeq	lr
   12638:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1263c:	mov	r8, #0
   12640:	ldr	r5, [pc, #248]	; 12740 <error@@Base+0xe5c>
   12644:	ldr	lr, [pc, #248]	; 12744 <error@@Base+0xe60>
   12648:	ldr	r6, [pc, #248]	; 12748 <error@@Base+0xe64>
   1264c:	ldr	r4, [pc, #248]	; 1274c <error@@Base+0xe68>
   12650:	ldr	r9, [pc, #248]	; 12750 <error@@Base+0xe6c>
   12654:	ldr	r7, [pc, #248]	; 12754 <error@@Base+0xe70>
   12658:	add	r5, pc, r5
   1265c:	add	lr, pc, lr
   12660:	add	r6, pc, r6
   12664:	add	r4, pc, r4
   12668:	ldr	r0, [r0, #4]
   1266c:	cmp	r0, #0
   12670:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12674:	ldr	ip, [r0, #12]
   12678:	mov	r2, r9
   1267c:	mov	r1, r8
   12680:	mov	sl, r7
   12684:	ldr	r3, [pc, #200]	; 12754 <error@@Base+0xe70>
   12688:	b	12694 <error@@Base+0xdb0>
   1268c:	add	r2, r2, r2, lsl #1
   12690:	ldr	r2, [lr, r2, lsl #2]
   12694:	cmp	ip, r2
   12698:	add	r3, r1, r3, lsr #1
   1269c:	subcc	sl, r3, #1
   126a0:	bcc	126bc <error@@Base+0xdd8>
   126a4:	add	r2, r3, r3, lsl #1
   126a8:	add	r1, r3, #1
   126ac:	add	r3, r5, r2, lsl #2
   126b0:	ldr	r2, [r3, #4]
   126b4:	cmp	ip, r2
   126b8:	bls	12730 <error@@Base+0xe4c>
   126bc:	sub	r3, sl, r1
   126c0:	cmp	r1, sl
   126c4:	add	r2, r1, r3, lsr #1
   126c8:	bls	1268c <error@@Base+0xda8>
   126cc:	mov	r2, r9
   126d0:	mov	r1, r8
   126d4:	mov	sl, r7
   126d8:	mov	r3, r7
   126dc:	b	126f8 <error@@Base+0xe14>
   126e0:	sub	r3, sl, r1
   126e4:	cmp	r1, sl
   126e8:	add	r2, r1, r3, lsr #1
   126ec:	pophi	{r4, r5, r6, r7, r8, r9, sl, pc}
   126f0:	add	r2, r2, r2, lsl #1
   126f4:	ldr	r2, [r4, r2, lsl #2]
   126f8:	cmp	ip, r2
   126fc:	add	r3, r1, r3, lsr #1
   12700:	subcc	sl, r3, #1
   12704:	bcc	126e0 <error@@Base+0xdfc>
   12708:	add	r2, r3, r3, lsl #1
   1270c:	add	r1, r3, #1
   12710:	add	r3, r6, r2, lsl #2
   12714:	ldr	r2, [r3, #4]
   12718:	cmp	ip, r2
   1271c:	bhi	126e0 <error@@Base+0xdfc>
   12720:	ldr	r3, [r3, #8]
   12724:	cmp	r3, #6
   12728:	beq	12668 <error@@Base+0xd84>
   1272c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12730:	ldr	r3, [r3, #8]
   12734:	cmp	r3, #4
   12738:	beq	12668 <error@@Base+0xd84>
   1273c:	b	126cc <error@@Base+0xde8>
   12740:	andeq	r1, r0, r4, lsr r3
   12744:	andeq	r1, r0, r0, lsr r3
   12748:	andeq	r1, r0, ip, lsr #6
   1274c:	andeq	r1, r0, r8, lsr #6
   12750:	andeq	r2, r0, r6, rrx
   12754:	andeq	r0, r0, r4, asr #8
   12758:	ldr	r3, [r1]
   1275c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12760:	sub	sp, sp, #60	; 0x3c
   12764:	cmp	r3, #0
   12768:	str	r3, [sp, #16]
   1276c:	str	r3, [sp, #44]	; 0x2c
   12770:	beq	12994 <error@@Base+0x10b0>
   12774:	ldr	r3, [pc, #2056]	; 12f84 <error@@Base+0x16a0>
   12778:	ldr	r7, [pc, #2056]	; 12f88 <error@@Base+0x16a4>
   1277c:	add	r3, pc, r3
   12780:	str	r3, [sp, #24]
   12784:	ldr	r8, [pc, #2048]	; 12f8c <error@@Base+0x16a8>
   12788:	ldr	r3, [pc, #2048]	; 12f90 <error@@Base+0x16ac>
   1278c:	ldr	sl, [pc, #2048]	; 12f94 <error@@Base+0x16b0>
   12790:	ldr	r9, [pc, #2048]	; 12f98 <error@@Base+0x16b4>
   12794:	add	r3, pc, r3
   12798:	add	r7, pc, r7
   1279c:	add	r8, pc, r8
   127a0:	add	sl, pc, sl
   127a4:	str	r3, [sp, #28]
   127a8:	add	r9, pc, r9
   127ac:	add	r3, sp, #40	; 0x28
   127b0:	str	r0, [sp, #36]	; 0x24
   127b4:	str	r3, [sp, #20]
   127b8:	str	r9, [sp, #32]
   127bc:	add	r4, sp, #24
   127c0:	ldr	fp, [sp, #20]
   127c4:	ldm	r4, {r4, r5, r6}
   127c8:	mov	r9, #0
   127cc:	mov	r3, #17
   127d0:	str	r3, [sp, #8]
   127d4:	mov	r0, fp
   127d8:	bl	12630 <error@@Base+0xd4c>
   127dc:	subs	fp, r0, #0
   127e0:	beq	12b30 <error@@Base+0x124c>
   127e4:	ldr	r0, [pc, #1968]	; 12f9c <error@@Base+0x16b8>
   127e8:	ldr	ip, [fp, #12]
   127ec:	ldr	r2, [pc, #1964]	; 12fa0 <error@@Base+0x16bc>
   127f0:	mov	r1, r9
   127f4:	mov	r3, r0
   127f8:	b	1280c <error@@Base+0xf28>
   127fc:	sub	r3, r0, r1
   12800:	add	r2, r1, r3, lsr #1
   12804:	add	r2, r2, r2, lsl #1
   12808:	ldr	r2, [r7, r2, lsl #2]
   1280c:	cmp	ip, r2
   12810:	add	r3, r1, r3, lsr #1
   12814:	subcc	r0, r3, #1
   12818:	bcc	12834 <error@@Base+0xf50>
   1281c:	add	r2, r3, r3, lsl #1
   12820:	add	r2, r4, r2, lsl #2
   12824:	ldr	r1, [r2, #4]
   12828:	cmp	ip, r1
   1282c:	bls	12a14 <error@@Base+0x1130>
   12830:	add	r1, r3, #1
   12834:	cmp	r1, r0
   12838:	bls	127fc <error@@Base+0xf18>
   1283c:	mov	r3, #0
   12840:	str	r9, [sp, #4]
   12844:	str	r3, [sp]
   12848:	mov	r0, fp
   1284c:	bl	12630 <error@@Base+0xd4c>
   12850:	cmp	r0, #0
   12854:	beq	12a3c <error@@Base+0x1158>
   12858:	ldr	ip, [pc, #1852]	; 12f9c <error@@Base+0x16b8>
   1285c:	ldr	lr, [r0, #12]
   12860:	ldr	r2, [pc, #1848]	; 12fa0 <error@@Base+0x16bc>
   12864:	mov	r1, r9
   12868:	mov	r3, ip
   1286c:	b	12880 <error@@Base+0xf9c>
   12870:	sub	r3, ip, r1
   12874:	add	r2, r1, r3, lsr #1
   12878:	add	r2, r2, r2, lsl #1
   1287c:	ldr	r2, [sl, r2, lsl #2]
   12880:	cmp	lr, r2
   12884:	add	r3, r1, r3, lsr #1
   12888:	subcc	ip, r3, #1
   1288c:	bcc	128a8 <error@@Base+0xfc4>
   12890:	add	r2, r3, r3, lsl #1
   12894:	add	r2, r6, r2, lsl #2
   12898:	ldr	r1, [r2, #4]
   1289c:	cmp	lr, r1
   128a0:	bls	12a4c <error@@Base+0x1168>
   128a4:	add	r1, r3, #1
   128a8:	cmp	ip, r1
   128ac:	bcs	12870 <error@@Base+0xf8c>
   128b0:	mov	r1, r9
   128b4:	str	r1, [sp, #12]
   128b8:	bl	12630 <error@@Base+0xd4c>
   128bc:	ldr	r1, [sp, #12]
   128c0:	cmp	r0, #0
   128c4:	beq	1299c <error@@Base+0x10b8>
   128c8:	ldr	ip, [pc, #1740]	; 12f9c <error@@Base+0x16b8>
   128cc:	ldr	lr, [r0, #12]
   128d0:	ldr	r2, [pc, #1736]	; 12fa0 <error@@Base+0x16bc>
   128d4:	mov	r0, r9
   128d8:	mov	r3, ip
   128dc:	b	128f0 <error@@Base+0x100c>
   128e0:	sub	r3, ip, r0
   128e4:	add	r2, r0, r3, lsr #1
   128e8:	add	r2, r2, r2, lsl #1
   128ec:	ldr	r2, [r8, r2, lsl #2]
   128f0:	cmp	lr, r2
   128f4:	add	r3, r0, r3, lsr #1
   128f8:	subcc	ip, r3, #1
   128fc:	bcc	12918 <error@@Base+0x1034>
   12900:	add	r2, r3, r3, lsl #1
   12904:	add	r2, r5, r2, lsl #2
   12908:	ldr	r0, [r2, #4]
   1290c:	cmp	lr, r0
   12910:	bls	12a44 <error@@Base+0x1160>
   12914:	add	r0, r3, #1
   12918:	cmp	r0, ip
   1291c:	bls	128e0 <error@@Base+0xffc>
   12920:	mov	r3, r9
   12924:	ldr	r2, [sp, #4]
   12928:	cmp	r1, #2
   1292c:	movne	r2, #0
   12930:	andeq	r2, r2, #1
   12934:	cmp	r2, #0
   12938:	movne	r3, #1
   1293c:	strne	r3, [sp, #8]
   12940:	beq	129a0 <error@@Base+0x10bc>
   12944:	ldr	r3, [fp, #4]
   12948:	cmp	r3, #0
   1294c:	bne	127d4 <error@@Base+0xef0>
   12950:	ldr	r3, [sp, #16]
   12954:	ldr	r0, [r3, #12]
   12958:	bl	10a4c <utf8proc_get_property@plt>
   1295c:	ldrh	r3, [r0]
   12960:	sub	r3, r3, #1
   12964:	uxth	r3, r3
   12968:	cmp	r3, #28
   1296c:	bhi	12980 <error@@Base+0x109c>
   12970:	mov	r0, #1
   12974:	ldr	r2, [pc, #1576]	; 12fa4 <error@@Base+0x16c0>
   12978:	ands	r3, r2, r0, lsl r3
   1297c:	bne	12df4 <error@@Base+0x1510>
   12980:	ldr	r3, [fp, #4]
   12984:	cmp	r3, #0
   12988:	str	r3, [sp, #16]
   1298c:	str	r3, [sp, #44]	; 0x2c
   12990:	bne	127bc <error@@Base+0xed8>
   12994:	add	sp, sp, #60	; 0x3c
   12998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1299c:	mov	r3, #18
   129a0:	ldr	ip, [sp]
   129a4:	ldr	r0, [sp, #4]
   129a8:	sub	r2, ip, #2
   129ac:	cmp	r2, #1
   129b0:	orrls	r0, r0, #1
   129b4:	cmp	r0, #0
   129b8:	bne	12bd0 <error@@Base+0x12ec>
   129bc:	sub	r2, r1, #1
   129c0:	cmp	r2, #2
   129c4:	bls	12bd0 <error@@Base+0x12ec>
   129c8:	sub	lr, ip, #8
   129cc:	cmp	lr, #1
   129d0:	bls	12b40 <error@@Base+0x125c>
   129d4:	ldr	r2, [sp, #8]
   129d8:	sub	r2, r2, #8
   129dc:	cmp	r2, #1
   129e0:	bls	12b74 <error@@Base+0x1290>
   129e4:	ldr	r2, [sp]
   129e8:	sub	r0, r1, #10
   129ec:	sub	r2, r2, #8
   129f0:	clz	r0, r0
   129f4:	clz	r2, r2
   129f8:	lsr	r0, r0, #5
   129fc:	lsr	r2, r2, #5
   12a00:	tst	r2, r0
   12a04:	beq	12a6c <error@@Base+0x1188>
   12a08:	mov	r3, #8
   12a0c:	str	r3, [sp, #8]
   12a10:	b	12944 <error@@Base+0x1060>
   12a14:	ldr	r3, [r2, #8]
   12a18:	mov	r0, fp
   12a1c:	str	r3, [sp]
   12a20:	sub	r3, r3, #1
   12a24:	clz	r3, r3
   12a28:	lsr	r3, r3, #5
   12a2c:	str	r3, [sp, #4]
   12a30:	bl	12630 <error@@Base+0xd4c>
   12a34:	cmp	r0, #0
   12a38:	bne	12858 <error@@Base+0xf74>
   12a3c:	mov	r1, #18
   12a40:	b	128b4 <error@@Base+0xfd0>
   12a44:	ldr	r3, [r2, #8]
   12a48:	b	12924 <error@@Base+0x1040>
   12a4c:	ldr	r1, [r2, #8]
   12a50:	str	r1, [sp, #12]
   12a54:	bl	12630 <error@@Base+0xd4c>
   12a58:	ldr	r1, [sp, #12]
   12a5c:	cmp	r0, #0
   12a60:	moveq	r3, #18
   12a64:	bne	128c8 <error@@Base+0xfe4>
   12a68:	b	12924 <error@@Base+0x1040>
   12a6c:	cmp	r1, #11
   12a70:	cmpeq	r3, #8
   12a74:	moveq	ip, #1
   12a78:	movne	ip, #0
   12a7c:	tst	r2, ip
   12a80:	bne	12a08 <error@@Base+0x1124>
   12a84:	ldr	r2, [sp]
   12a88:	ldr	ip, [sp, #8]
   12a8c:	cmp	ip, #8
   12a90:	cmpeq	r2, #11
   12a94:	moveq	r2, #1
   12a98:	movne	r2, #0
   12a9c:	cmp	r1, #8
   12aa0:	movne	r2, #0
   12aa4:	andeq	r2, r2, #1
   12aa8:	cmp	r2, #0
   12aac:	bne	12cd8 <error@@Base+0x13f4>
   12ab0:	ldr	r2, [sp]
   12ab4:	sub	ip, r2, #15
   12ab8:	sub	r2, r1, #15
   12abc:	clz	ip, ip
   12ac0:	clz	r2, r2
   12ac4:	lsr	ip, ip, #5
   12ac8:	lsr	r2, r2, #5
   12acc:	str	r2, [sp, #12]
   12ad0:	ands	r2, ip, r2
   12ad4:	str	r2, [sp, #4]
   12ad8:	bne	12ba4 <error@@Base+0x12c0>
   12adc:	cmp	lr, #1
   12ae0:	bls	12d80 <error@@Base+0x149c>
   12ae4:	ldr	r2, [sp]
   12ae8:	cmp	r2, #15
   12aec:	beq	12d00 <error@@Base+0x141c>
   12af0:	ldr	r2, [sp, #8]
   12af4:	cmp	r2, #15
   12af8:	beq	12edc <error@@Base+0x15f8>
   12afc:	ldr	r3, [sp]
   12b00:	sub	r2, r3, #7
   12b04:	sub	r3, r1, #7
   12b08:	clz	r2, r2
   12b0c:	clz	r3, r3
   12b10:	lsr	r2, r2, #5
   12b14:	lsr	r3, r3, #5
   12b18:	tst	r3, r2
   12b1c:	str	r2, [sp, #4]
   12b20:	beq	12dd8 <error@@Base+0x14f4>
   12b24:	mov	r3, #7
   12b28:	str	r3, [sp, #8]
   12b2c:	b	12944 <error@@Base+0x1060>
   12b30:	mov	r3, #18
   12b34:	str	r9, [sp, #4]
   12b38:	str	r3, [sp]
   12b3c:	b	12848 <error@@Base+0xf64>
   12b40:	sub	r2, r1, #8
   12b44:	cmp	r2, #1
   12b48:	bls	12b68 <error@@Base+0x1284>
   12b4c:	sub	r2, r1, #12
   12b50:	cmp	r1, #10
   12b54:	cmpne	r2, #1
   12b58:	bhi	129d4 <error@@Base+0x10f0>
   12b5c:	sub	r2, r3, #8
   12b60:	cmp	r2, #1
   12b64:	bhi	129d4 <error@@Base+0x10f0>
   12b68:	ldr	r3, [sp]
   12b6c:	str	r3, [sp, #8]
   12b70:	b	12944 <error@@Base+0x1060>
   12b74:	ldr	r2, [sp]
   12b78:	cmp	r2, #13
   12b7c:	beq	12ce4 <error@@Base+0x1400>
   12b80:	sub	r2, r2, #10
   12b84:	bics	r2, r2, #2
   12b88:	bne	129e4 <error@@Base+0x1100>
   12b8c:	sub	r2, r1, #8
   12b90:	cmp	r2, #1
   12b94:	bhi	129e4 <error@@Base+0x1100>
   12b98:	ldr	r3, [sp]
   12b9c:	str	r3, [sp, #8]
   12ba0:	b	12944 <error@@Base+0x1060>
   12ba4:	mov	r3, #15
   12ba8:	str	r3, [sp, #8]
   12bac:	b	12944 <error@@Base+0x1060>
   12bb0:	ldr	r2, [sp, #12]
   12bb4:	sub	r1, r1, #8
   12bb8:	cmp	r1, #1
   12bbc:	orrls	r2, r2, #1
   12bc0:	cmp	r2, #0
   12bc4:	bne	12b68 <error@@Base+0x1284>
   12bc8:	cmp	r3, #0
   12bcc:	bne	12b68 <error@@Base+0x1284>
   12bd0:	cmp	fp, #0
   12bd4:	beq	12994 <error@@Base+0x10b0>
   12bd8:	ldr	r5, [pc, #968]	; 12fa8 <error@@Base+0x16c4>
   12bdc:	ldr	lr, [pc, #968]	; 12fac <error@@Base+0x16c8>
   12be0:	ldr	r6, [pc, #968]	; 12fb0 <error@@Base+0x16cc>
   12be4:	ldr	r4, [pc, #968]	; 12fb4 <error@@Base+0x16d0>
   12be8:	add	r5, pc, r5
   12bec:	add	lr, pc, lr
   12bf0:	add	r6, pc, r6
   12bf4:	add	r4, pc, r4
   12bf8:	ldr	r9, [fp, #4]
   12bfc:	cmp	r9, #0
   12c00:	beq	12950 <error@@Base+0x106c>
   12c04:	ldr	ip, [pc, #912]	; 12f9c <error@@Base+0x16b8>
   12c08:	ldr	r0, [r9, #12]
   12c0c:	ldr	r2, [pc, #908]	; 12fa0 <error@@Base+0x16bc>
   12c10:	mov	r1, #0
   12c14:	mov	r3, ip
   12c18:	b	12c2c <error@@Base+0x1348>
   12c1c:	sub	r3, ip, r1
   12c20:	add	r2, r1, r3, lsr #1
   12c24:	add	r2, r2, r2, lsl #1
   12c28:	ldr	r2, [lr, r2, lsl #2]
   12c2c:	cmp	r0, r2
   12c30:	add	r3, r1, r3, lsr #1
   12c34:	subcc	ip, r3, #1
   12c38:	bcc	12c54 <error@@Base+0x1370>
   12c3c:	add	r2, r3, r3, lsl #1
   12c40:	add	r2, r5, r2, lsl #2
   12c44:	ldr	r1, [r2, #4]
   12c48:	cmp	r0, r1
   12c4c:	bls	12cb4 <error@@Base+0x13d0>
   12c50:	add	r1, r3, #1
   12c54:	cmp	r1, ip
   12c58:	bls	12c1c <error@@Base+0x1338>
   12c5c:	ldr	r2, [pc, #828]	; 12fa0 <error@@Base+0x16bc>
   12c60:	mov	r1, #0
   12c64:	ldr	ip, [pc, #816]	; 12f9c <error@@Base+0x16b8>
   12c68:	ldr	r3, [pc, #812]	; 12f9c <error@@Base+0x16b8>
   12c6c:	b	12c80 <error@@Base+0x139c>
   12c70:	sub	r3, ip, r1
   12c74:	add	r2, r1, r3, lsr #1
   12c78:	add	r2, r2, r2, lsl #1
   12c7c:	ldr	r2, [r4, r2, lsl #2]
   12c80:	cmp	r0, r2
   12c84:	add	r3, r1, r3, lsr #1
   12c88:	subcc	ip, r3, #1
   12c8c:	bcc	12ca8 <error@@Base+0x13c4>
   12c90:	add	r2, r3, r3, lsl #1
   12c94:	add	r2, r6, r2, lsl #2
   12c98:	ldr	r1, [r2, #4]
   12c9c:	cmp	r0, r1
   12ca0:	bls	12cc8 <error@@Base+0x13e4>
   12ca4:	add	r1, r3, #1
   12ca8:	cmp	r1, ip
   12cac:	bls	12c70 <error@@Base+0x138c>
   12cb0:	b	12950 <error@@Base+0x106c>
   12cb4:	ldr	r3, [r2, #8]
   12cb8:	cmp	r3, #4
   12cbc:	bne	12c5c <error@@Base+0x1378>
   12cc0:	mov	fp, r9
   12cc4:	b	12bf8 <error@@Base+0x1314>
   12cc8:	ldr	r3, [r2, #8]
   12ccc:	cmp	r3, #6
   12cd0:	beq	12cc0 <error@@Base+0x13dc>
   12cd4:	b	12950 <error@@Base+0x106c>
   12cd8:	mov	r3, #11
   12cdc:	str	r3, [sp, #8]
   12ce0:	b	12944 <error@@Base+0x1060>
   12ce4:	sub	r2, r1, #8
   12ce8:	cmp	r2, #1
   12cec:	bls	12b68 <error@@Base+0x1284>
   12cf0:	sub	r0, r1, #10
   12cf4:	clz	r0, r0
   12cf8:	lsr	r0, r0, #5
   12cfc:	b	12a84 <error@@Base+0x11a0>
   12d00:	sub	r2, r1, #8
   12d04:	cmp	r2, #1
   12d08:	bls	12ba4 <error@@Base+0x12c0>
   12d0c:	ldr	r2, [sp, #8]
   12d10:	cmp	r2, #15
   12d14:	beq	12eb8 <error@@Base+0x15d4>
   12d18:	bic	r2, r1, #2
   12d1c:	cmp	r2, #12
   12d20:	orreq	r0, r0, #1
   12d24:	cmp	r0, #0
   12d28:	beq	12d34 <error@@Base+0x1450>
   12d2c:	cmp	r3, #15
   12d30:	beq	12ba4 <error@@Base+0x12c0>
   12d34:	ldr	r2, [sp]
   12d38:	sub	r3, r1, #7
   12d3c:	cmp	r2, #7
   12d40:	cmpeq	r1, #7
   12d44:	clz	r3, r3
   12d48:	lsr	r3, r3, #5
   12d4c:	beq	12b24 <error@@Base+0x1240>
   12d50:	cmp	r1, #16
   12d54:	beq	12b68 <error@@Base+0x1284>
   12d58:	ldr	r2, [sp]
   12d5c:	cmp	r2, #16
   12d60:	beq	12bb0 <error@@Base+0x12cc>
   12d64:	ldr	r3, [sp]
   12d68:	cmp	r3, #5
   12d6c:	cmpeq	r1, #5
   12d70:	bne	12bd0 <error@@Base+0x12ec>
   12d74:	mov	r3, #5
   12d78:	str	r3, [sp, #8]
   12d7c:	b	12944 <error@@Base+0x1060>
   12d80:	cmp	r1, #15
   12d84:	beq	12b68 <error@@Base+0x1284>
   12d88:	ldr	r2, [sp, #8]
   12d8c:	cmp	r2, #15
   12d90:	beq	12eb8 <error@@Base+0x15d4>
   12d94:	ldr	r2, [sp]
   12d98:	cmp	r2, #15
   12d9c:	beq	12d18 <error@@Base+0x1434>
   12da0:	ldr	r3, [sp]
   12da4:	sub	r2, r3, #7
   12da8:	sub	r3, r1, #7
   12dac:	clz	r2, r2
   12db0:	clz	r3, r3
   12db4:	lsr	r2, r2, #5
   12db8:	lsr	r3, r3, #5
   12dbc:	tst	r2, r3
   12dc0:	str	r2, [sp, #4]
   12dc4:	bne	12b24 <error@@Base+0x1240>
   12dc8:	cmp	lr, #1
   12dcc:	orrls	ip, ip, #1
   12dd0:	cmp	ip, #0
   12dd4:	bne	12d50 <error@@Base+0x146c>
   12dd8:	ldr	r2, [sp]
   12ddc:	ldr	r0, [sp, #4]
   12de0:	cmp	r2, #16
   12de4:	orreq	r0, r0, #1
   12de8:	cmp	r0, #0
   12dec:	beq	12d64 <error@@Base+0x1480>
   12df0:	b	12d50 <error@@Base+0x146c>
   12df4:	ldr	r4, [fp, #4]
   12df8:	ldr	r3, [sp, #16]
   12dfc:	cmp	r4, r3
   12e00:	beq	12f00 <error@@Base+0x161c>
   12e04:	ldr	r5, [sp, #16]
   12e08:	mov	r6, #0
   12e0c:	ldr	r9, [sp, #20]
   12e10:	b	12e1c <error@@Base+0x1538>
   12e14:	cmp	r5, #0
   12e18:	beq	12f38 <error@@Base+0x1654>
   12e1c:	mov	r1, r9
   12e20:	ldr	r0, [r5, #12]
   12e24:	bl	10a64 <utf8proc_encode_char@plt>
   12e28:	cmp	r0, #0
   12e2c:	beq	12f10 <error@@Base+0x162c>
   12e30:	ldr	r5, [r5, #4]
   12e34:	add	r6, r6, r0
   12e38:	cmp	r4, r5
   12e3c:	bne	12e14 <error@@Base+0x1530>
   12e40:	add	r0, r6, #1
   12e44:	bl	10adc <malloc@plt>
   12e48:	mov	r6, #0
   12e4c:	ldr	r9, [sp, #16]
   12e50:	mov	r4, r0
   12e54:	b	12e60 <error@@Base+0x157c>
   12e58:	cmp	r9, #0
   12e5c:	beq	12f60 <error@@Base+0x167c>
   12e60:	add	r1, r4, r6
   12e64:	ldr	r0, [r9, #12]
   12e68:	bl	10a64 <utf8proc_encode_char@plt>
   12e6c:	ldr	r9, [r9, #4]
   12e70:	cmp	r9, r5
   12e74:	add	r6, r6, r0
   12e78:	bne	12e58 <error@@Base+0x1574>
   12e7c:	mov	r3, #0
   12e80:	strb	r3, [r4, r6]
   12e84:	mov	r1, #12
   12e88:	mov	r0, #1
   12e8c:	bl	1193c <error@@Base+0x58>
   12e90:	mov	r5, r0
   12e94:	mov	r0, r4
   12e98:	bl	10b60 <utf8proc_NFC@plt>
   12e9c:	mov	r1, r5
   12ea0:	str	r0, [r5, #8]
   12ea4:	ldr	r0, [sp, #36]	; 0x24
   12ea8:	bl	10fc4 <__assert_fail@plt+0x404>
   12eac:	mov	r0, r4
   12eb0:	bl	10a40 <free@plt>
   12eb4:	b	12980 <error@@Base+0x109c>
   12eb8:	ldr	r2, [sp]
   12ebc:	sub	r2, r2, #10
   12ec0:	bics	r2, r2, #2
   12ec4:	bne	12d94 <error@@Base+0x14b0>
   12ec8:	cmp	r1, #15
   12ecc:	bne	12d94 <error@@Base+0x14b0>
   12ed0:	ldr	r3, [sp]
   12ed4:	str	r3, [sp, #8]
   12ed8:	b	12944 <error@@Base+0x1060>
   12edc:	ldr	r2, [sp]
   12ee0:	cmp	r2, #14
   12ee4:	bne	12eb8 <error@@Base+0x15d4>
   12ee8:	cmp	r1, #15
   12eec:	beq	12b68 <error@@Base+0x1284>
   12ef0:	sub	r3, r1, #7
   12ef4:	clz	r3, r3
   12ef8:	lsr	r3, r3, #5
   12efc:	b	12dc8 <error@@Base+0x14e4>
   12f00:	bl	10adc <malloc@plt>
   12f04:	mov	r6, #0
   12f08:	mov	r4, r0
   12f0c:	b	12e7c <error@@Base+0x1598>
   12f10:	ldr	r3, [pc, #160]	; 12fb8 <error@@Base+0x16d4>
   12f14:	ldr	r1, [pc, #160]	; 12fbc <error@@Base+0x16d8>
   12f18:	add	r3, pc, r3
   12f1c:	ldr	r0, [pc, #156]	; 12fc0 <error@@Base+0x16dc>
   12f20:	sub	r3, r3, #3248	; 0xcb0
   12f24:	mov	r2, #253	; 0xfd
   12f28:	sub	r3, r3, #4
   12f2c:	add	r1, pc, r1
   12f30:	add	r0, pc, r0
   12f34:	bl	10bc0 <__assert_fail@plt>
   12f38:	ldr	r3, [pc, #132]	; 12fc4 <error@@Base+0x16e0>
   12f3c:	ldr	r1, [pc, #132]	; 12fc8 <error@@Base+0x16e4>
   12f40:	add	r3, pc, r3
   12f44:	ldr	r0, [pc, #128]	; 12fcc <error@@Base+0x16e8>
   12f48:	sub	r3, r3, #3248	; 0xcb0
   12f4c:	mov	r2, #249	; 0xf9
   12f50:	sub	r3, r3, #4
   12f54:	add	r1, pc, r1
   12f58:	add	r0, pc, r0
   12f5c:	bl	10bc0 <__assert_fail@plt>
   12f60:	ldr	r3, [pc, #104]	; 12fd0 <error@@Base+0x16ec>
   12f64:	ldr	r1, [pc, #104]	; 12fd4 <error@@Base+0x16f0>
   12f68:	ldr	r0, [pc, #104]	; 12fd8 <error@@Base+0x16f4>
   12f6c:	add	r3, pc, r3
   12f70:	ldr	r2, [pc, #100]	; 12fdc <error@@Base+0x16f8>
   12f74:	sub	r3, r3, #3232	; 0xca0
   12f78:	add	r1, pc, r1
   12f7c:	add	r0, pc, r0
   12f80:	bl	10bc0 <__assert_fail@plt>
   12f84:	andeq	r1, r0, r0, lsl r2
   12f88:	strdeq	r1, [r0], -r4
   12f8c:	strdeq	r1, [r0], -r0
   12f90:	strdeq	r1, [r0], -r8
   12f94:	andeq	r1, r0, ip, ror #3
   12f98:	andeq	r1, r0, r4, ror #3
   12f9c:	andeq	r0, r0, r4, asr #8
   12fa0:	andeq	r2, r0, r6, rrx
   12fa4:	strdne	r0, [r0], -pc	; <UNPREDICTABLE>
   12fa8:	andeq	r0, r0, r4, lsr #27
   12fac:	andeq	r0, r0, r0, lsr #27
   12fb0:	muleq	r0, ip, sp
   12fb4:	muleq	r0, r8, sp
   12fb8:	andeq	r4, r0, r4, ror #20
   12fbc:	andeq	r3, r0, r4, asr #27
   12fc0:	ldrdeq	r3, [r0], -r8
   12fc4:	andeq	r4, r0, ip, lsr sl
   12fc8:	muleq	r0, ip, sp
   12fcc:	andeq	r3, r0, r0, lsr #27
   12fd0:	andeq	r4, r0, r0, lsl sl
   12fd4:	andeq	r3, r0, r8, ror sp
   12fd8:	andeq	r3, r0, ip, ror sp
   12fdc:	andeq	r0, r0, sp, lsl #2
   12fe0:	push	{r4, lr}
   12fe4:	mov	r4, r0
   12fe8:	ldr	r0, [r0, #8]
   12fec:	bl	10a40 <free@plt>
   12ff0:	mov	r0, r4
   12ff4:	pop	{r4, lr}
   12ff8:	b	10a40 <free@plt>
   12ffc:	push	{r4, r5, r6, lr}
   13000:	mov	r4, r0
   13004:	uxtb	r6, r1
   13008:	mov	r0, #1
   1300c:	mov	r1, #16
   13010:	mov	r5, r2
   13014:	bl	1193c <error@@Base+0x58>
   13018:	strb	r6, [r0, #8]
   1301c:	str	r5, [r0, #12]
   13020:	mov	r1, r0
   13024:	mov	r0, r4
   13028:	pop	{r4, r5, r6, lr}
   1302c:	b	10fc4 <__assert_fail@plt+0x404>
   13030:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13034:	sub	sp, sp, #132	; 0x84
   13038:	ldrb	r3, [r2]
   1303c:	ldr	r6, [pc, #936]	; 133ec <error@@Base+0x1b08>
   13040:	str	r2, [sp, #16]
   13044:	adds	r3, r3, #0
   13048:	movne	r3, #1
   1304c:	cmp	r1, #0
   13050:	movne	r3, #0
   13054:	cmp	r3, #0
   13058:	str	r0, [sp, #4]
   1305c:	add	r6, pc, r6
   13060:	bne	133d8 <error@@Base+0x1af4>
   13064:	ldr	r3, [sp, #4]
   13068:	mov	r0, r1
   1306c:	ldr	r1, [pc, #892]	; 133f0 <error@@Base+0x1b0c>
   13070:	ldr	r3, [r3, #4]
   13074:	add	r1, pc, r1
   13078:	str	r3, [sp, #20]
   1307c:	bl	119f4 <error@@Base+0x110>
   13080:	ldr	r3, [sp, #16]
   13084:	ldrb	r3, [r3]
   13088:	cmp	r3, #0
   1308c:	mov	r7, r0
   13090:	bne	13318 <error@@Base+0x1a34>
   13094:	ldr	r2, [sp, #16]
   13098:	mov	r0, r7
   1309c:	ldr	r3, [r2, #4]
   130a0:	ldrb	fp, [r2, #1]
   130a4:	mov	r4, r3
   130a8:	bl	10bb4 <getc@plt>
   130ac:	cmp	r4, #0
   130b0:	mov	r2, r4
   130b4:	moveq	r2, #94	; 0x5e
   130b8:	str	r2, [sp, #12]
   130bc:	cmn	r0, #1
   130c0:	beq	13188 <error@@Base+0x18a4>
   130c4:	ldr	r3, [pc, #808]	; 133f4 <error@@Base+0x1b10>
   130c8:	ldr	r3, [r6, r3]
   130cc:	str	r3, [sp]
   130d0:	ldrsb	r4, [r3, r0]
   130d4:	cmp	r4, #0
   130d8:	ble	133c0 <error@@Base+0x1adc>
   130dc:	add	r3, sp, #25
   130e0:	mov	r6, #0
   130e4:	str	r3, [sp, #8]
   130e8:	add	sl, sp, #28
   130ec:	add	r9, sp, #24
   130f0:	mov	r8, #4
   130f4:	b	13108 <error@@Base+0x1824>
   130f8:	ldr	r3, [sp]
   130fc:	ldrsb	r4, [r3, r0]
   13100:	cmp	r4, #0
   13104:	ble	133c0 <error@@Base+0x1adc>
   13108:	cmp	r4, #1
   1310c:	strb	r0, [sp, #24]
   13110:	beq	13134 <error@@Base+0x1850>
   13114:	sub	r5, r4, #1
   13118:	mov	r2, r5
   1311c:	mov	r3, r7
   13120:	mov	r1, #1
   13124:	ldr	r0, [sp, #8]
   13128:	bl	10ab8 <fread@plt>
   1312c:	cmp	r5, r0
   13130:	bne	133cc <error@@Base+0x1ae8>
   13134:	mov	r2, sl
   13138:	mov	r1, r8
   1313c:	mov	r0, r9
   13140:	bl	10ac4 <utf8proc_iterate@plt>
   13144:	cmp	r0, r4
   13148:	bne	133b8 <error@@Base+0x1ad4>
   1314c:	cmp	fp, #0
   13150:	ldr	r2, [sp, #28]
   13154:	beq	13168 <error@@Base+0x1884>
   13158:	ldr	r3, [sp, #12]
   1315c:	cmp	r2, r3
   13160:	moveq	r6, #1
   13164:	beq	13178 <error@@Base+0x1894>
   13168:	mov	r1, r6
   1316c:	ldr	r0, [sp, #4]
   13170:	bl	12ffc <error@@Base+0x1718>
   13174:	mov	r6, #0
   13178:	mov	r0, r7
   1317c:	bl	10bb4 <getc@plt>
   13180:	cmn	r0, #1
   13184:	bne	130f8 <error@@Base+0x1814>
   13188:	mov	r0, r7
   1318c:	bl	11788 <__assert_fail@plt+0xbc8>
   13190:	ldr	r3, [sp, #16]
   13194:	ldrb	r3, [r3, #9]
   13198:	cmp	r3, #0
   1319c:	beq	132d0 <error@@Base+0x19ec>
   131a0:	ldr	r3, [sp, #20]
   131a4:	cmp	r3, #0
   131a8:	ldreq	r3, [sp, #4]
   131ac:	ldrne	r6, [r3, #4]
   131b0:	ldreq	r6, [r3]
   131b4:	cmp	r6, #0
   131b8:	beq	132d0 <error@@Base+0x19ec>
   131bc:	mov	r5, r6
   131c0:	mov	r7, #32
   131c4:	b	131ec <error@@Base+0x1908>
   131c8:	cmp	r4, #11
   131cc:	bcs	13218 <error@@Base+0x1934>
   131d0:	cmp	r4, #9
   131d4:	beq	13218 <error@@Base+0x1934>
   131d8:	cmp	r4, #10
   131dc:	bne	13208 <error@@Base+0x1924>
   131e0:	ldr	r5, [r5, #4]
   131e4:	cmp	r5, #0
   131e8:	beq	13228 <error@@Base+0x1944>
   131ec:	ldr	r4, [r5, #12]
   131f0:	mov	r0, r4
   131f4:	bl	10a4c <utf8proc_get_property@plt>
   131f8:	cmp	r4, #13
   131fc:	bls	131c8 <error@@Base+0x18e4>
   13200:	cmp	r4, #160	; 0xa0
   13204:	beq	13218 <error@@Base+0x1934>
   13208:	ldrsh	r3, [r0]
   1320c:	sub	r3, r3, #23
   13210:	cmp	r3, #2
   13214:	bhi	131e0 <error@@Base+0x18fc>
   13218:	str	r7, [r5, #12]
   1321c:	ldr	r5, [r5, #4]
   13220:	cmp	r5, #0
   13224:	bne	131ec <error@@Base+0x1908>
   13228:	ldr	r7, [sp, #4]
   1322c:	b	1328c <error@@Base+0x19a8>
   13230:	cmp	r3, #10
   13234:	movne	r2, #0
   13238:	andeq	r2, r2, #1
   1323c:	cmp	r2, #0
   13240:	beq	132c0 <error@@Base+0x19dc>
   13244:	cmp	r4, #0
   13248:	moveq	r3, #0
   1324c:	andne	r3, r5, #1
   13250:	cmp	r3, #0
   13254:	beq	13270 <error@@Base+0x198c>
   13258:	ldr	r3, [r4, #12]
   1325c:	cmp	r3, #32
   13260:	ldrbeq	r3, [r4, #8]
   13264:	ldrbeq	r2, [r6, #8]
   13268:	orreq	r3, r3, r2
   1326c:	strbeq	r3, [r4, #8]
   13270:	mov	r1, r6
   13274:	mov	r0, r7
   13278:	bl	110a8 <__assert_fail@plt+0x4e8>
   1327c:	mov	r0, r6
   13280:	bl	10a40 <free@plt>
   13284:	subs	r6, r4, #0
   13288:	beq	132d0 <error@@Base+0x19ec>
   1328c:	ldr	r3, [r6, #12]
   13290:	ldr	r4, [r6, #4]
   13294:	cmp	r3, #32
   13298:	eor	r2, r5, #1
   1329c:	bne	13230 <error@@Base+0x194c>
   132a0:	cmp	r4, #0
   132a4:	orreq	r2, r2, #1
   132a8:	cmp	r2, #0
   132ac:	bne	13244 <error@@Base+0x1960>
   132b0:	ldr	r2, [r4, #12]
   132b4:	cmp	r2, #10
   132b8:	cmpne	r2, #32
   132bc:	beq	13244 <error@@Base+0x1960>
   132c0:	subs	r5, r3, #10
   132c4:	movne	r5, #1
   132c8:	subs	r6, r4, #0
   132cc:	bne	1328c <error@@Base+0x19a8>
   132d0:	ldr	r3, [sp, #16]
   132d4:	ldrb	r3, [r3, #10]
   132d8:	cmp	r3, #0
   132dc:	beq	13310 <error@@Base+0x1a2c>
   132e0:	ldr	r3, [sp, #20]
   132e4:	cmp	r3, #0
   132e8:	ldreq	r3, [sp, #4]
   132ec:	ldrne	r4, [r3, #4]
   132f0:	ldreq	r4, [r3]
   132f4:	b	13308 <error@@Base+0x1a24>
   132f8:	ldr	r0, [r4, #12]
   132fc:	bl	10a94 <utf8proc_tolower@plt>
   13300:	str	r0, [r4, #12]
   13304:	ldr	r4, [r4, #4]
   13308:	cmp	r4, #0
   1330c:	bne	132f8 <error@@Base+0x1a14>
   13310:	add	sp, sp, #132	; 0x84
   13314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13318:	add	r5, sp, #28
   1331c:	mov	r0, r5
   13320:	mov	r2, r7
   13324:	mov	r1, #99	; 0x63
   13328:	bl	10a58 <fgets@plt>
   1332c:	cmp	r0, #0
   13330:	beq	133a0 <error@@Base+0x1abc>
   13334:	ldr	r1, [pc, #188]	; 133f8 <error@@Base+0x1b14>
   13338:	mov	r2, #51	; 0x33
   1333c:	add	r1, pc, r1
   13340:	mov	r0, r5
   13344:	bl	10b9c <strncmp@plt>
   13348:	subs	r4, r0, #0
   1334c:	bne	133a0 <error@@Base+0x1abc>
   13350:	ldr	r9, [pc, #164]	; 133fc <error@@Base+0x1b18>
   13354:	mov	r8, #99	; 0x63
   13358:	add	r9, pc, r9
   1335c:	mov	r2, r7
   13360:	mov	r1, r8
   13364:	mov	r0, r5
   13368:	bl	10a58 <fgets@plt>
   1336c:	cmp	r0, #0
   13370:	beq	13398 <error@@Base+0x1ab4>
   13374:	mov	r1, r9
   13378:	mov	r0, r5
   1337c:	bl	10a10 <strcmp@plt>
   13380:	cmp	r0, #0
   13384:	bne	1335c <error@@Base+0x1a78>
   13388:	add	r4, r4, #1
   1338c:	sxth	r4, r4
   13390:	cmp	r4, #1
   13394:	ble	1335c <error@@Base+0x1a78>
   13398:	mov	r3, #1
   1339c:	b	133ac <error@@Base+0x1ac8>
   133a0:	mov	r0, r7
   133a4:	bl	10a7c <rewind@plt>
   133a8:	mov	r3, #0
   133ac:	ldr	r2, [sp, #16]
   133b0:	strb	r3, [r2, #11]
   133b4:	b	13094 <error@@Base+0x17b0>
   133b8:	bl	10b84 <utf8proc_errmsg@plt>
   133bc:	bl	118e4 <error@@Base>
   133c0:	ldr	r0, [pc, #56]	; 13400 <error@@Base+0x1b1c>
   133c4:	add	r0, pc, r0
   133c8:	bl	118e4 <error@@Base>
   133cc:	ldr	r0, [pc, #48]	; 13404 <error@@Base+0x1b20>
   133d0:	add	r0, pc, r0
   133d4:	bl	118e4 <error@@Base>
   133d8:	ldr	r1, [pc, #40]	; 13408 <error@@Base+0x1b24>
   133dc:	ldr	r0, [pc, #40]	; 1340c <error@@Base+0x1b28>
   133e0:	add	r1, pc, r1
   133e4:	add	r0, pc, r0
   133e8:	bl	11994 <error@@Base+0xb0>
   133ec:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   133f0:	andeq	r0, r0, r0, asr r8
   133f4:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   133f8:	strdeq	r3, [r0], -ip
   133fc:	andeq	r3, r0, r8, lsl sl
   13400:	andeq	r3, r0, r4, ror #19
   13404:	strdeq	r3, [r0], -r0
   13408:	andeq	r3, r0, ip, lsr r9
   1340c:	andeq	r3, r0, r4, asr #18
   13410:	push	{r4, lr}
   13414:	bl	10a64 <utf8proc_encode_char@plt>
   13418:	cmp	r0, #0
   1341c:	ble	13428 <error@@Base+0x1b44>
   13420:	sxtb	r0, r0
   13424:	pop	{r4, pc}
   13428:	ldr	r0, [pc, #4]	; 13434 <error@@Base+0x1b50>
   1342c:	add	r0, pc, r0
   13430:	bl	118e4 <error@@Base>
   13434:	andeq	r3, r0, ip, lsr #19
   13438:	push	{r4, r5, r6, r7, r8, lr}
   1343c:	uxtb	r4, r0
   13440:	cmp	r4, #0
   13444:	mov	r6, r1
   13448:	mov	r8, r2
   1344c:	uxtb	r5, r3
   13450:	moveq	r7, r4
   13454:	bne	134cc <error@@Base+0x1be8>
   13458:	cmp	r6, #10
   1345c:	beq	134ac <error@@Base+0x1bc8>
   13460:	mov	r0, r6
   13464:	bl	10a4c <utf8proc_get_property@plt>
   13468:	cmp	r6, #32
   1346c:	beq	134e4 <error@@Base+0x1c00>
   13470:	ldrh	r3, [r0]
   13474:	cmp	r3, #29
   13478:	bhi	1348c <error@@Base+0x1ba8>
   1347c:	mov	r1, #1
   13480:	ldr	r2, [pc, #192]	; 13548 <error@@Base+0x1c64>
   13484:	ands	r3, r2, r1, lsl r3
   13488:	bne	134e4 <error@@Base+0x1c00>
   1348c:	cmp	r6, #255	; 0xff
   13490:	bls	13530 <error@@Base+0x1c4c>
   13494:	ldr	r1, [pc, #176]	; 1354c <error@@Base+0x1c68>
   13498:	mov	r2, r6
   1349c:	add	r0, r8, r4
   134a0:	add	r1, pc, r1
   134a4:	pop	{r4, r5, r6, r7, r8, lr}
   134a8:	b	10b78 <sprintf@plt>
   134ac:	ldr	r1, [pc, #156]	; 13550 <error@@Base+0x1c6c>
   134b0:	cmp	r5, #0
   134b4:	add	r1, pc, r1
   134b8:	add	r0, r8, r4
   134bc:	ldreq	r1, [pc, #144]	; 13554 <error@@Base+0x1c70>
   134c0:	addeq	r1, pc, r1
   134c4:	pop	{r4, r5, r6, r7, r8, lr}
   134c8:	b	10b78 <sprintf@plt>
   134cc:	mov	r1, r2
   134d0:	mov	r0, #94	; 0x5e
   134d4:	bl	13410 <error@@Base+0x1b2c>
   134d8:	mov	r4, r0
   134dc:	sxth	r7, r0
   134e0:	b	13458 <error@@Base+0x1b74>
   134e4:	mov	r0, r6
   134e8:	bl	10b24 <utf8proc_category@plt>
   134ec:	sub	r0, r0, #6
   134f0:	cmp	r0, #2
   134f4:	bhi	13510 <error@@Base+0x1c2c>
   134f8:	add	r1, r8, r4
   134fc:	ldr	r0, [pc, #84]	; 13558 <error@@Base+0x1c74>
   13500:	bl	13410 <error@@Base+0x1b2c>
   13504:	add	r7, r0, r7
   13508:	sxth	r7, r7
   1350c:	mov	r4, r7
   13510:	add	r1, r8, r4
   13514:	mov	r0, r6
   13518:	bl	13410 <error@@Base+0x1b2c>
   1351c:	mov	r3, #0
   13520:	add	r0, r0, r7
   13524:	sxth	r0, r0
   13528:	strb	r3, [r8, r0]
   1352c:	pop	{r4, r5, r6, r7, r8, pc}
   13530:	ldr	r1, [pc, #36]	; 1355c <error@@Base+0x1c78>
   13534:	mov	r2, r6
   13538:	add	r0, r8, r4
   1353c:	add	r1, pc, r1
   13540:	pop	{r4, r5, r6, r7, r8, lr}
   13544:	b	10b78 <sprintf@plt>
   13548:	ldrshtcs	pc, [pc], #-254	; <UNPREDICTABLE>
   1354c:	andeq	r3, r0, r0, ror #18
   13550:	andeq	r3, r0, ip, lsr r9
   13554:	andeq	r0, r0, ip, ror r4
   13558:	andeq	r2, r0, ip, asr #11
   1355c:			; <UNDEFINED> instruction: 0x000038bc
   13560:	push	{r4, r5, r6, r7, lr}
   13564:	mov	r7, r0
   13568:	mov	r0, r1
   1356c:	ldr	r1, [pc, #184]	; 1362c <error@@Base+0x1d48>
   13570:	sub	sp, sp, #20
   13574:	add	r1, pc, r1
   13578:	mov	r5, r2
   1357c:	bl	119f4 <error@@Base+0x110>
   13580:	cmp	r5, #0
   13584:	mov	r6, r0
   13588:	beq	135dc <error@@Base+0x1cf8>
   1358c:	mov	r3, r0
   13590:	ldr	r4, [pc, #152]	; 13630 <error@@Base+0x1d4c>
   13594:	ldr	r0, [pc, #152]	; 13634 <error@@Base+0x1d50>
   13598:	add	r4, pc, r4
   1359c:	mov	r2, #55	; 0x37
   135a0:	mov	r1, #1
   135a4:	add	r0, pc, r0
   135a8:	bl	10aac <fwrite@plt>
   135ac:	mov	r3, r6
   135b0:	mov	r2, #55	; 0x37
   135b4:	mov	r1, #1
   135b8:	mov	r0, r4
   135bc:	bl	10aac <fwrite@plt>
   135c0:	mov	r0, r6
   135c4:	blx	r5
   135c8:	mov	r3, r6
   135cc:	mov	r0, r4
   135d0:	mov	r2, #55	; 0x37
   135d4:	mov	r1, #1
   135d8:	bl	10aac <fwrite@plt>
   135dc:	ldr	r4, [r7]
   135e0:	cmp	r4, #0
   135e4:	addne	r5, sp, #4
   135e8:	movne	r7, #0
   135ec:	beq	1361c <error@@Base+0x1d38>
   135f0:	ldr	r1, [r4, #12]
   135f4:	ldrb	r0, [r4, #8]
   135f8:	mov	r3, r7
   135fc:	mov	r2, r5
   13600:	bl	13438 <error@@Base+0x1b54>
   13604:	mov	r1, r6
   13608:	mov	r0, r5
   1360c:	bl	10b90 <fputs@plt>
   13610:	ldr	r4, [r4, #4]
   13614:	cmp	r4, #0
   13618:	bne	135f0 <error@@Base+0x1d0c>
   1361c:	mov	r0, r6
   13620:	bl	11788 <__assert_fail@plt+0xbc8>
   13624:	add	sp, sp, #20
   13628:	pop	{r4, r5, r6, r7, pc}
   1362c:	muleq	r0, r8, r3
   13630:	ldrdeq	r3, [r0], -r8
   13634:	muleq	r0, r4, r7
   13638:	push	{r4, r5, r6, r7, r8, r9, lr}
   1363c:	mov	r5, #0
   13640:	ldrb	r3, [r1]
   13644:	sub	sp, sp, #12
   13648:	cmp	r3, r5
   1364c:	str	r5, [sp, #4]
   13650:	movne	r4, r1
   13654:	movne	r6, r0
   13658:	addne	r8, sp, #4
   1365c:	mvnne	r7, #0
   13660:	bne	1367c <error@@Base+0x1d98>
   13664:	b	136a8 <error@@Base+0x1dc4>
   13668:	ldr	r2, [sp, #4]
   1366c:	bl	12ffc <error@@Base+0x1718>
   13670:	ldrb	r3, [r4, r9]!
   13674:	cmp	r3, #0
   13678:	beq	136a8 <error@@Base+0x1dc4>
   1367c:	mov	r1, r7
   13680:	mov	r2, r8
   13684:	mov	r0, r4
   13688:	bl	10ac4 <utf8proc_iterate@plt>
   1368c:	mov	r1, r5
   13690:	subs	r9, r0, #0
   13694:	mov	r0, r6
   13698:	bgt	13668 <error@@Base+0x1d84>
   1369c:	mov	r0, #0
   136a0:	add	sp, sp, #12
   136a4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   136a8:	mov	r0, #1
   136ac:	add	sp, sp, #12
   136b0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   136b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   136b8:	mov	r7, r0
   136bc:	ldr	r6, [pc, #72]	; 1370c <error@@Base+0x1e28>
   136c0:	ldr	r5, [pc, #72]	; 13710 <error@@Base+0x1e2c>
   136c4:	add	r6, pc, r6
   136c8:	add	r5, pc, r5
   136cc:	sub	r6, r6, r5
   136d0:	mov	r8, r1
   136d4:	mov	r9, r2
   136d8:	bl	109e4 <calloc@plt-0x20>
   136dc:	asrs	r6, r6, #2
   136e0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   136e4:	mov	r4, #0
   136e8:	add	r4, r4, #1
   136ec:	ldr	r3, [r5], #4
   136f0:	mov	r2, r9
   136f4:	mov	r1, r8
   136f8:	mov	r0, r7
   136fc:	blx	r3
   13700:	cmp	r6, r4
   13704:	bne	136e8 <error@@Base+0x1e04>
   13708:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1370c:	andeq	r3, r1, r4, lsr r8
   13710:	andeq	r3, r1, ip, lsr #16
   13714:	bx	lr

Disassembly of section .fini:

00013718 <.fini>:
   13718:	push	{r3, lr}
   1371c:	pop	{r3, pc}
