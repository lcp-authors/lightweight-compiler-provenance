
../repos/charybdis/librb/src/.libs/librb.so:     file format elf32-littlearm


Disassembly of section .init:

00004c2c <_init>:
    4c2c:	push	{r3, lr}
    4c30:	bl	5580 <call_weak_fn>
    4c34:	pop	{r3, pc}

Disassembly of section .plt:

00004c38 <.plt>:
    4c38:	push	{lr}		; (str lr, [sp, #-4]!)
    4c3c:	ldr	lr, [pc, #4]	; 4c48 <.plt+0x10>
    4c40:	add	lr, pc, lr
    4c44:	ldr	pc, [lr, #8]!
    4c48:	.word	0x000263b8

00004c4c <rb_helper_run@plt>:
    4c4c:	add	ip, pc, #0, 12
    4c50:	add	ip, ip, #155648	; 0x26000
    4c54:	ldr	pc, [ip, #952]!	; 0x3b8

00004c58 <TLS_method@plt>:
    4c58:	add	ip, pc, #0, 12
    4c5c:	add	ip, ip, #155648	; 0x26000
    4c60:	ldr	pc, [ip, #944]!	; 0x3b0

00004c64 <open@plt>:
    4c64:	add	ip, pc, #0, 12
    4c68:	add	ip, ip, #155648	; 0x26000
    4c6c:	ldr	pc, [ip, #936]!	; 0x3a8

00004c70 <rb_init_netio@plt>:
    4c70:	add	ip, pc, #0, 12
    4c74:	add	ip, ip, #155648	; 0x26000
    4c78:	ldr	pc, [ip, #928]!	; 0x3a0

00004c7c <sigemptyset@plt>:
    4c7c:	add	ip, pc, #0, 12
    4c80:	add	ip, ip, #155648	; 0x26000
    4c84:	ldr	pc, [ip, #920]!	; 0x398

00004c88 <strerror@plt>:
    4c88:	add	ip, pc, #0, 12
    4c8c:	add	ip, ip, #155648	; 0x26000
    4c90:	ldr	pc, [ip, #912]!	; 0x390

00004c94 <rb_radixtree_elem_delete@plt>:
    4c94:	add	ip, pc, #0, 12
    4c98:	add	ip, ip, #155648	; 0x26000
    4c9c:	ldr	pc, [ip, #904]!	; 0x388

00004ca0 <getdtablesize@plt>:
    4ca0:	add	ip, pc, #0, 12
    4ca4:	add	ip, ip, #155648	; 0x26000
    4ca8:	ldr	pc, [ip, #896]!	; 0x380

00004cac <abort@plt>:
    4cac:	add	ip, pc, #0, 12
    4cb0:	add	ip, ip, #155648	; 0x26000
    4cb4:	ldr	pc, [ip, #888]!	; 0x378

00004cb8 <connect@plt>:
    4cb8:	add	ip, pc, #0, 12
    4cbc:	add	ip, ip, #155648	; 0x26000
    4cc0:	ldr	pc, [ip, #880]!	; 0x370

00004cc4 <rb_ignore_errno@plt>:
    4cc4:	add	ip, pc, #0, 12
    4cc8:	add	ip, ip, #155648	; 0x26000
    4ccc:	ldr	pc, [ip, #872]!	; 0x368

00004cd0 <rb_settimeout@plt>:
    4cd0:	add	ip, pc, #0, 12
    4cd4:	add	ip, ip, #155648	; 0x26000
    4cd8:	ldr	pc, [ip, #864]!	; 0x360

00004cdc <SSL_CTX_set_cipher_list@plt>:
    4cdc:	add	ip, pc, #0, 12
    4ce0:	add	ip, ip, #155648	; 0x26000
    4ce4:	ldr	pc, [ip, #856]!	; 0x358

00004ce8 <ERR_get_error@plt>:
    4ce8:	add	ip, pc, #0, 12
    4cec:	add	ip, ip, #155648	; 0x26000
    4cf0:	ldr	pc, [ip, #848]!	; 0x350

00004cf4 <strcasestr@plt>:
    4cf4:	add	ip, pc, #0, 12
    4cf8:	add	ip, ip, #155648	; 0x26000
    4cfc:	ldr	pc, [ip, #840]!	; 0x348

00004d00 <rb_connect_tcp@plt>:
    4d00:	add	ip, pc, #0, 12
    4d04:	add	ip, ip, #155648	; 0x26000
    4d08:	ldr	pc, [ip, #832]!	; 0x340

00004d0c <RAND_load_file@plt>:
    4d0c:	add	ip, pc, #0, 12
    4d10:	add	ip, ip, #155648	; 0x26000
    4d14:	ldr	pc, [ip, #824]!	; 0x338

00004d18 <signalfd@plt>:
    4d18:	add	ip, pc, #0, 12
    4d1c:	add	ip, ip, #155648	; 0x26000
    4d20:	ldr	pc, [ip, #816]!	; 0x330

00004d24 <memcmp@plt>:
    4d24:	add	ip, pc, #0, 12
    4d28:	add	ip, ip, #155648	; 0x26000
    4d2c:	ldr	pc, [ip, #808]!	; 0x328

00004d30 <SSL_CTX_free@plt>:
    4d30:	add	ip, pc, #0, 12
    4d34:	add	ip, ip, #155648	; 0x26000
    4d38:	ldr	pc, [ip, #800]!	; 0x320

00004d3c <rb_getmaxconnect@plt>:
    4d3c:	add	ip, pc, #0, 12
    4d40:	add	ip, ip, #155648	; 0x26000
    4d44:	ldr	pc, [ip, #792]!	; 0x318

00004d48 <sigwaitinfo@plt>:
    4d48:	add	ip, pc, #0, 12
    4d4c:	add	ip, ip, #155648	; 0x26000
    4d50:	ldr	pc, [ip, #784]!	; 0x310

00004d54 <__libc_current_sigrtmin@plt>:
    4d54:	add	ip, pc, #0, 12
    4d58:	add	ip, ip, #155648	; 0x26000
    4d5c:	ldr	pc, [ip, #776]!	; 0x308

00004d60 <__xstat@plt>:
    4d60:	add	ip, pc, #0, 12
    4d64:	add	ip, ip, #155648	; 0x26000
    4d68:	ldr	pc, [ip, #768]!	; 0x300

00004d6c <rb_event_delete@plt>:
    4d6c:	add	ip, pc, #0, 12
    4d70:	add	ip, ip, #155648	; 0x26000
    4d74:	ldr	pc, [ip, #760]!	; 0x2f8

00004d78 <rb_setselect@plt>:
    4d78:	add	ip, pc, #0, 12
    4d7c:	add	ip, ip, #155648	; 0x26000
    4d80:	ldr	pc, [ip, #752]!	; 0x2f0

00004d84 <rb_fd_ssl@plt>:
    4d84:	add	ip, pc, #0, 12
    4d88:	add	ip, ip, #155648	; 0x26000
    4d8c:	ldr	pc, [ip, #744]!	; 0x2e8

00004d90 <sigtimedwait@plt>:
    4d90:	add	ip, pc, #0, 12
    4d94:	add	ip, ip, #155648	; 0x26000
    4d98:	ldr	pc, [ip, #736]!	; 0x2e0

00004d9c <rb_setenv@plt>:
    4d9c:	add	ip, pc, #0, 12
    4da0:	add	ip, ip, #155648	; 0x26000
    4da4:	ldr	pc, [ip, #728]!	; 0x2d8

00004da8 <signal@plt>:
    4da8:	add	ip, pc, #0, 12
    4dac:	add	ip, ip, #155648	; 0x26000
    4db0:	ldr	pc, [ip, #720]!	; 0x2d0

00004db4 <rb_get_fd@plt>:
    4db4:	add	ip, pc, #0, 12
    4db8:	add	ip, ip, #155648	; 0x26000
    4dbc:	ldr	pc, [ip, #712]!	; 0x2c8

00004dc0 <epoll_create@plt>:
    4dc0:	add	ip, pc, #0, 12
    4dc4:	add	ip, ip, #155648	; 0x26000
    4dc8:	ldr	pc, [ip, #704]!	; 0x2c0

00004dcc <rb_clear_patricia@plt>:
    4dcc:	add	ip, pc, #0, 12
    4dd0:	add	ip, ip, #155648	; 0x26000
    4dd4:	ldr	pc, [ip, #696]!	; 0x2b8

00004dd8 <__gmon_start__@plt>:
    4dd8:	add	ip, pc, #0, 12
    4ddc:	add	ip, ip, #155648	; 0x26000
    4de0:	ldr	pc, [ip, #688]!	; 0x2b0

00004de4 <SSL_CTX_clear_options@plt>:
    4de4:	add	ip, pc, #0, 12
    4de8:	add	ip, ip, #155648	; 0x26000
    4dec:	ldr	pc, [ip, #680]!	; 0x2a8

00004df0 <SSL_get_current_cipher@plt>:
    4df0:	add	ip, pc, #0, 12
    4df4:	add	ip, ip, #155648	; 0x26000
    4df8:	ldr	pc, [ip, #672]!	; 0x2a0

00004dfc <timer_create@plt>:
    4dfc:	add	ip, pc, #0, 12
    4e00:	add	ip, ip, #155648	; 0x26000
    4e04:	ldr	pc, [ip, #664]!	; 0x298

00004e08 <X509_get_X509_PUBKEY@plt>:
    4e08:	add	ip, pc, #0, 12
    4e0c:	add	ip, ip, #155648	; 0x26000
    4e10:	ldr	pc, [ip, #656]!	; 0x290

00004e14 <rb_select@plt>:
    4e14:	add	ip, pc, #0, 12
    4e18:	add	ip, ip, #155648	; 0x26000
    4e1c:	ldr	pc, [ip, #648]!	; 0x288

00004e20 <vsnprintf@plt>:
    4e20:	add	ip, pc, #0, 12
    4e24:	add	ip, ip, #155648	; 0x26000
    4e28:	ldr	pc, [ip, #640]!	; 0x280

00004e2c <socketpair@plt>:
    4e2c:	add	ip, pc, #0, 12
    4e30:	add	ip, ip, #155648	; 0x26000
    4e34:	ldr	pc, [ip, #632]!	; 0x278

00004e38 <strncpy@plt>:
    4e38:	add	ip, pc, #0, 12
    4e3c:	add	ip, ip, #155648	; 0x26000
    4e40:	ldr	pc, [ip, #624]!	; 0x270

00004e44 <fclose@plt>:
    4e44:	add	ip, pc, #0, 12
    4e48:	add	ip, ip, #155648	; 0x26000
    4e4c:	ldr	pc, [ip, #616]!	; 0x268

00004e50 <recv@plt>:
    4e50:	add	ip, pc, #0, 12
    4e54:	add	ip, ip, #155648	; 0x26000
    4e58:	ldr	pc, [ip, #608]!	; 0x260

00004e5c <getenv@plt>:
    4e5c:	add	ip, pc, #0, 12
    4e60:	add	ip, ip, #155648	; 0x26000
    4e64:	ldr	pc, [ip, #600]!	; 0x258

00004e68 <ERR_error_string_n@plt>:
    4e68:	add	ip, pc, #0, 12
    4e6c:	add	ip, ip, #155648	; 0x26000
    4e70:	ldr	pc, [ip, #592]!	; 0x250

00004e74 <strchr@plt>:
    4e74:	add	ip, pc, #0, 12
    4e78:	add	ip, ip, #155648	; 0x26000
    4e7c:	ldr	pc, [ip, #584]!	; 0x248

00004e80 <rb_gettimeofday@plt>:
    4e80:	add	ip, pc, #0, 12
    4e84:	add	ip, ip, #155648	; 0x26000
    4e88:	ldr	pc, [ip, #576]!	; 0x240

00004e8c <strcasecmp@plt>:
    4e8c:	add	ip, pc, #0, 12
    4e90:	add	ip, ip, #155648	; 0x26000
    4e94:	ldr	pc, [ip, #568]!	; 0x238

00004e98 <listen@plt>:
    4e98:	add	ip, pc, #0, 12
    4e9c:	add	ip, ip, #155648	; 0x26000
    4ea0:	ldr	pc, [ip, #560]!	; 0x230

00004ea4 <calloc@plt>:
    4ea4:	add	ip, pc, #0, 12
    4ea8:	add	ip, ip, #155648	; 0x26000
    4eac:	ldr	pc, [ip, #552]!	; 0x228

00004eb0 <SSL_write@plt>:
    4eb0:	add	ip, pc, #0, 12
    4eb4:	add	ip, ip, #155648	; 0x26000
    4eb8:	ldr	pc, [ip, #544]!	; 0x220

00004ebc <rb_event_init@plt>:
    4ebc:	add	ip, pc, #0, 12
    4ec0:	add	ip, ip, #155648	; 0x26000
    4ec4:	ldr	pc, [ip, #536]!	; 0x218

00004ec8 <fopen@plt>:
    4ec8:	add	ip, pc, #0, 12
    4ecc:	add	ip, ip, #155648	; 0x26000
    4ed0:	ldr	pc, [ip, #528]!	; 0x210

00004ed4 <rb_set_nb@plt>:
    4ed4:	add	ip, pc, #0, 12
    4ed8:	add	ip, ip, #155648	; 0x26000
    4edc:	ldr	pc, [ip, #520]!	; 0x208

00004ee0 <memset@plt>:
    4ee0:	add	ip, pc, #0, 12
    4ee4:	add	ip, ip, #155648	; 0x26000
    4ee8:	ldr	pc, [ip, #512]!	; 0x200

00004eec <rb_inet_pton@plt>:
    4eec:	add	ip, pc, #0, 12
    4ef0:	add	ip, ip, #155648	; 0x26000
    4ef4:	ldr	pc, [ip, #504]!	; 0x1f8

00004ef8 <rb_radixtree_stats@plt>:
    4ef8:	add	ip, pc, #0, 12
    4efc:	add	ip, ip, #155648	; 0x26000
    4f00:	ldr	pc, [ip, #496]!	; 0x1f0

00004f04 <strrchr@plt>:
    4f04:	add	ip, pc, #0, 12
    4f08:	add	ip, ip, #155648	; 0x26000
    4f0c:	ldr	pc, [ip, #488]!	; 0x1e8

00004f10 <rb_write@plt>:
    4f10:	add	ip, pc, #0, 12
    4f14:	add	ip, ip, #155648	; 0x26000
    4f18:	ldr	pc, [ip, #480]!	; 0x1e0

00004f1c <SSL_set_fd@plt>:
    4f1c:	add	ip, pc, #0, 12
    4f20:	add	ip, ip, #155648	; 0x26000
    4f24:	ldr	pc, [ip, #472]!	; 0x1d8

00004f28 <SSL_CTX_ctrl@plt>:
    4f28:	add	ip, pc, #0, 12
    4f2c:	add	ip, ip, #155648	; 0x26000
    4f30:	ldr	pc, [ip, #464]!	; 0x1d0

00004f34 <rb_linebuf_parse@plt>:
    4f34:	add	ip, pc, #0, 12
    4f38:	add	ip, ip, #155648	; 0x26000
    4f3c:	ldr	pc, [ip, #456]!	; 0x1c8

00004f40 <writev@plt>:
    4f40:	add	ip, pc, #0, 12
    4f44:	add	ip, ip, #155648	; 0x26000
    4f48:	ldr	pc, [ip, #448]!	; 0x1c0

00004f4c <rb_fsnprint@plt>:
    4f4c:	add	ip, pc, #0, 12
    4f50:	add	ip, ip, #155648	; 0x26000
    4f54:	ldr	pc, [ip, #440]!	; 0x1b8

00004f58 <rb_strlcpy@plt>:
    4f58:	add	ip, pc, #0, 12
    4f5c:	add	ip, ip, #155648	; 0x26000
    4f60:	ldr	pc, [ip, #432]!	; 0x1b0

00004f64 <rb_patricia_search_best2@plt>:
    4f64:	add	ip, pc, #0, 12
    4f68:	add	ip, ip, #155648	; 0x26000
    4f6c:	ldr	pc, [ip, #424]!	; 0x1a8

00004f70 <SSL_CIPHER_get_name@plt>:
    4f70:	add	ip, pc, #0, 12
    4f74:	add	ip, ip, #155648	; 0x26000
    4f78:	ldr	pc, [ip, #416]!	; 0x1a0

00004f7c <posix_spawnattr_init@plt>:
    4f7c:	add	ip, pc, #0, 12
    4f80:	add	ip, ip, #155648	; 0x26000
    4f84:	ldr	pc, [ip, #408]!	; 0x198

00004f88 <OpenSSL_version_num@plt>:
    4f88:	add	ip, pc, #0, 12
    4f8c:	add	ip, ip, #155648	; 0x26000
    4f90:	ldr	pc, [ip, #400]!	; 0x190

00004f94 <rb_kill@plt>:
    4f94:	add	ip, pc, #0, 12
    4f98:	add	ip, ip, #155648	; 0x26000
    4f9c:	ldr	pc, [ip, #392]!	; 0x188

00004fa0 <free@plt>:
    4fa0:	add	ip, pc, #0, 12
    4fa4:	add	ip, ip, #155648	; 0x26000
    4fa8:	ldr	pc, [ip, #384]!	; 0x180

00004fac <sendmsg@plt>:
    4fac:	add	ip, pc, #0, 12
    4fb0:	add	ip, ip, #155648	; 0x26000
    4fb4:	ldr	pc, [ip, #376]!	; 0x178

00004fb8 <read@plt>:
    4fb8:	add	ip, pc, #0, 12
    4fbc:	add	ip, ip, #155648	; 0x26000
    4fc0:	ldr	pc, [ip, #368]!	; 0x170

00004fc4 <rb_radixtree_elem_add@plt>:
    4fc4:	add	ip, pc, #0, 12
    4fc8:	add	ip, ip, #155648	; 0x26000
    4fcc:	ldr	pc, [ip, #360]!	; 0x168

00004fd0 <write@plt>:
    4fd0:	add	ip, pc, #0, 12
    4fd4:	add	ip, ip, #155648	; 0x26000
    4fd8:	ldr	pc, [ip, #352]!	; 0x160

00004fdc <SSL_new@plt>:
    4fdc:	add	ip, pc, #0, 12
    4fe0:	add	ip, ip, #155648	; 0x26000
    4fe4:	ldr	pc, [ip, #344]!	; 0x158

00004fe8 <access@plt>:
    4fe8:	add	ip, pc, #0, 12
    4fec:	add	ip, ip, #155648	; 0x26000
    4ff0:	ldr	pc, [ip, #336]!	; 0x150

00004ff4 <rb_lib_loop@plt>:
    4ff4:	add	ip, pc, #0, 12
    4ff8:	add	ip, ip, #155648	; 0x26000
    4ffc:	ldr	pc, [ip, #328]!	; 0x148

00005000 <timer_settime@plt>:
    5000:	add	ip, pc, #0, 12
    5004:	add	ip, ip, #155648	; 0x26000
    5008:	ldr	pc, [ip, #320]!	; 0x140

0000500c <gettimeofday@plt>:
    500c:	add	ip, pc, #0, 12
    5010:	add	ip, ip, #155648	; 0x26000
    5014:	ldr	pc, [ip, #312]!	; 0x138

00005018 <accept@plt>:
    5018:	add	ip, pc, #0, 12
    501c:	add	ip, ip, #155648	; 0x26000
    5020:	ldr	pc, [ip, #304]!	; 0x130

00005024 <SSL_read@plt>:
    5024:	add	ip, pc, #0, 12
    5028:	add	ip, ip, #155648	; 0x26000
    502c:	ldr	pc, [ip, #296]!	; 0x128

00005030 <rb_read@plt>:
    5030:	add	ip, pc, #0, 12
    5034:	add	ip, ip, #155648	; 0x26000
    5038:	ldr	pc, [ip, #288]!	; 0x120

0000503c <socket@plt>:
    503c:	add	ip, pc, #0, 12
    5040:	add	ip, ip, #155648	; 0x26000
    5044:	ldr	pc, [ip, #280]!	; 0x118

00005048 <rb_linebuf_get@plt>:
    5048:	add	ip, pc, #0, 12
    504c:	add	ip, ip, #155648	; 0x26000
    5050:	ldr	pc, [ip, #272]!	; 0x110

00005054 <epoll_wait@plt>:
    5054:	add	ip, pc, #0, 12
    5058:	add	ip, ip, #155648	; 0x26000
    505c:	ldr	pc, [ip, #264]!	; 0x108

00005060 <SSL_do_handshake@plt>:
    5060:	add	ip, pc, #0, 12
    5064:	add	ip, ip, #155648	; 0x26000
    5068:	ldr	pc, [ip, #256]!	; 0x100

0000506c <rb_linebuf_flush@plt>:
    506c:	add	ip, pc, #0, 12
    5070:	add	ip, ip, #155648	; 0x26000
    5074:	ldr	pc, [ip, #248]!	; 0xf8

00005078 <posix_spawn@plt>:
    5078:	add	ip, pc, #0, 12
    507c:	add	ip, ip, #155648	; 0x26000
    5080:	ldr	pc, [ip, #240]!	; 0xf0

00005084 <strlen@plt>:
    5084:	add	ip, pc, #0, 12
    5088:	add	ip, ip, #155648	; 0x26000
    508c:	ldr	pc, [ip, #232]!	; 0xe8

00005090 <rb_current_time@plt>:
    5090:	add	ip, pc, #0, 12
    5094:	add	ip, ip, #155648	; 0x26000
    5098:	ldr	pc, [ip, #224]!	; 0xe0

0000509c <strtoul@plt>:
    509c:	add	ip, pc, #0, 12
    50a0:	add	ip, ip, #155648	; 0x26000
    50a4:	ldr	pc, [ip, #216]!	; 0xd8

000050a8 <memcpy@plt>:
    50a8:	add	ip, pc, #0, 12
    50ac:	add	ip, ip, #155648	; 0x26000
    50b0:	ldr	pc, [ip, #208]!	; 0xd0

000050b4 <PEM_read_X509@plt>:
    50b4:	add	ip, pc, #0, 12
    50b8:	add	ip, ip, #155648	; 0x26000
    50bc:	ldr	pc, [ip, #200]!	; 0xc8

000050c0 <posix_spawnattr_setflags@plt>:
    50c0:	add	ip, pc, #0, 12
    50c4:	add	ip, ip, #155648	; 0x26000
    50c8:	ldr	pc, [ip, #192]!	; 0xc0

000050cc <__ctype_tolower_loc@plt>:
    50cc:	add	ip, pc, #0, 12
    50d0:	add	ip, ip, #155648	; 0x26000
    50d4:	ldr	pc, [ip, #184]!	; 0xb8

000050d8 <SSL_CTX_use_certificate_chain_file@plt>:
    50d8:	add	ip, pc, #0, 12
    50dc:	add	ip, ip, #155648	; 0x26000
    50e0:	ldr	pc, [ip, #176]!	; 0xb0

000050e4 <rb_free_rb_dlink_node@plt>:
    50e4:	add	ip, pc, #0, 12
    50e8:	add	ip, ip, #155648	; 0x26000
    50ec:	ldr	pc, [ip, #168]!	; 0xa8

000050f0 <SSL_CTX_set_options@plt>:
    50f0:	add	ip, pc, #0, 12
    50f4:	add	ip, ip, #155648	; 0x26000
    50f8:	ldr	pc, [ip, #160]!	; 0xa0

000050fc <posix_spawnattr_destroy@plt>:
    50fc:	add	ip, pc, #0, 12
    5100:	add	ip, ip, #155648	; 0x26000
    5104:	ldr	pc, [ip, #152]!	; 0x98

00005108 <rb_close@plt>:
    5108:	add	ip, pc, #0, 12
    510c:	add	ip, ip, #155648	; 0x26000
    5110:	ldr	pc, [ip, #144]!	; 0x90

00005114 <strtol@plt>:
    5114:	add	ip, pc, #0, 12
    5118:	add	ip, ip, #155648	; 0x26000
    511c:	ldr	pc, [ip, #136]!	; 0x88

00005120 <sigaddset@plt>:
    5120:	add	ip, pc, #0, 12
    5124:	add	ip, ip, #155648	; 0x26000
    5128:	ldr	pc, [ip, #128]!	; 0x80

0000512c <strcpy@plt>:
    512c:	add	ip, pc, #0, 12
    5130:	add	ip, ip, #155648	; 0x26000
    5134:	ldr	pc, [ip, #120]!	; 0x78

00005138 <waitpid@plt>:
    5138:	add	ip, pc, #0, 12
    513c:	add	ip, ip, #155648	; 0x26000
    5140:	ldr	pc, [ip, #112]!	; 0x70

00005144 <rb_run_one_event@plt>:
    5144:	add	ip, pc, #0, 12
    5148:	add	ip, ip, #155648	; 0x26000
    514c:	ldr	pc, [ip, #104]!	; 0x68

00005150 <strncat@plt>:
    5150:	add	ip, pc, #0, 12
    5154:	add	ip, ip, #155648	; 0x26000
    5158:	ldr	pc, [ip, #96]!	; 0x60

0000515c <rb_bh_free@plt>:
    515c:	add	ip, pc, #0, 12
    5160:	add	ip, ip, #155648	; 0x26000
    5164:	ldr	pc, [ip, #88]!	; 0x58

00005168 <rb_init_rb_dlink_nodes@plt>:
    5168:	add	ip, pc, #0, 12
    516c:	add	ip, ip, #155648	; 0x26000
    5170:	ldr	pc, [ip, #80]!	; 0x50

00005174 <EVP_sha1@plt>:
    5174:	add	ip, pc, #0, 12
    5178:	add	ip, ip, #155648	; 0x26000
    517c:	ldr	pc, [ip, #72]!	; 0x48

00005180 <rb_patricia_lookup@plt>:
    5180:	add	ip, pc, #0, 12
    5184:	add	ip, ip, #155648	; 0x26000
    5188:	ldr	pc, [ip, #64]!	; 0x40

0000518c <shutdown@plt>:
    518c:	add	ip, pc, #0, 12
    5190:	add	ip, ip, #155648	; 0x26000
    5194:	ldr	pc, [ip, #56]!	; 0x38

00005198 <bind@plt>:
    5198:	add	ip, pc, #0, 12
    519c:	add	ip, ip, #155648	; 0x26000
    51a0:	ldr	pc, [ip, #48]!	; 0x30

000051a4 <rb_lib_log@plt>:
    51a4:	add	ip, pc, #0, 12
    51a8:	add	ip, ip, #155648	; 0x26000
    51ac:	ldr	pc, [ip, #40]!	; 0x28

000051b0 <SSL_CTX_use_PrivateKey_file@plt>:
    51b0:	add	ip, pc, #0, 12
    51b4:	add	ip, ip, #155648	; 0x26000
    51b8:	ldr	pc, [ip, #32]!

000051bc <select@plt>:
    51bc:	add	ip, pc, #0, 12
    51c0:	add	ip, ip, #155648	; 0x26000
    51c4:	ldr	pc, [ip, #24]!

000051c8 <close@plt>:
    51c8:	add	ip, pc, #0, 12
    51cc:	add	ip, ip, #155648	; 0x26000
    51d0:	ldr	pc, [ip, #16]!

000051d4 <rb_bh_alloc@plt>:
    51d4:	add	ip, pc, #0, 12
    51d8:	add	ip, ip, #155648	; 0x26000
    51dc:	ldr	pc, [ip, #8]!

000051e0 <SSL_free@plt>:
    51e0:	add	ip, pc, #0, 12
    51e4:	add	ip, ip, #155648	; 0x26000
    51e8:	ldr	pc, [ip, #0]!

000051ec <rb_pipe@plt>:
    51ec:	add	ip, pc, #0, 12
    51f0:	add	ip, ip, #151552	; 0x25000
    51f4:	ldr	pc, [ip, #4088]!	; 0xff8

000051f8 <strncasecmp@plt>:
    51f8:	add	ip, pc, #0, 12
    51fc:	add	ip, ip, #151552	; 0x25000
    5200:	ldr	pc, [ip, #4080]!	; 0xff0

00005204 <rb_outofmemory@plt>:
    5204:	add	ip, pc, #0, 12
    5208:	add	ip, ip, #151552	; 0x25000
    520c:	ldr	pc, [ip, #4072]!	; 0xfe8

00005210 <rb_set_time@plt>:
    5210:	add	ip, pc, #0, 12
    5214:	add	ip, ip, #151552	; 0x25000
    5218:	ldr	pc, [ip, #4064]!	; 0xfe0

0000521c <rb_dictionary_stats@plt>:
    521c:	add	ip, pc, #0, 12
    5220:	add	ip, ip, #151552	; 0x25000
    5224:	ldr	pc, [ip, #4056]!	; 0xfd8

00005228 <malloc@plt>:
    5228:	add	ip, pc, #0, 12
    522c:	add	ip, ip, #151552	; 0x25000
    5230:	ldr	pc, [ip, #4048]!	; 0xfd0

00005234 <sigprocmask@plt>:
    5234:	add	ip, pc, #0, 12
    5238:	add	ip, ip, #151552	; 0x25000
    523c:	ldr	pc, [ip, #4040]!	; 0xfc8

00005240 <rb_event_run@plt>:
    5240:	add	ip, pc, #0, 12
    5244:	add	ip, ip, #151552	; 0x25000
    5248:	ldr	pc, [ip, #4032]!	; 0xfc0

0000524c <SSL_set_accept_state@plt>:
    524c:	add	ip, pc, #0, 12
    5250:	add	ip, ip, #151552	; 0x25000
    5254:	ldr	pc, [ip, #4024]!	; 0xfb8

00005258 <rb_init_bh@plt>:
    5258:	add	ip, pc, #0, 12
    525c:	add	ip, ip, #151552	; 0x25000
    5260:	ldr	pc, [ip, #4016]!	; 0xfb0

00005264 <PEM_read_DHparams@plt>:
    5264:	add	ip, pc, #0, 12
    5268:	add	ip, ip, #151552	; 0x25000
    526c:	ldr	pc, [ip, #4008]!	; 0xfa8

00005270 <gmtime_r@plt>:
    5270:	add	ip, pc, #0, 12
    5274:	add	ip, ip, #151552	; 0x25000
    5278:	ldr	pc, [ip, #4000]!	; 0xfa0

0000527c <poll@plt>:
    527c:	add	ip, pc, #0, 12
    5280:	add	ip, ip, #151552	; 0x25000
    5284:	ldr	pc, [ip, #3992]!	; 0xf98

00005288 <ASN1_item_digest@plt>:
    5288:	add	ip, pc, #0, 12
    528c:	add	ip, ip, #151552	; 0x25000
    5290:	ldr	pc, [ip, #3984]!	; 0xf90

00005294 <strnlen@plt>:
    5294:	add	ip, pc, #0, 12
    5298:	add	ip, ip, #151552	; 0x25000
    529c:	ldr	pc, [ip, #3976]!	; 0xf88

000052a0 <SSL_get_peer_certificate@plt>:
    52a0:	add	ip, pc, #0, 12
    52a4:	add	ip, ip, #151552	; 0x25000
    52a8:	ldr	pc, [ip, #3968]!	; 0xf80

000052ac <rb_lib_init@plt>:
    52ac:	add	ip, pc, #0, 12
    52b0:	add	ip, ip, #151552	; 0x25000
    52b4:	ldr	pc, [ip, #3960]!	; 0xf78

000052b8 <SSL_get_verify_result@plt>:
    52b8:	add	ip, pc, #0, 12
    52bc:	add	ip, ip, #151552	; 0x25000
    52c0:	ldr	pc, [ip, #3952]!	; 0xf70

000052c4 <strtok_r@plt>:
    52c4:	add	ip, pc, #0, 12
    52c8:	add	ip, ip, #151552	; 0x25000
    52cc:	ldr	pc, [ip, #3944]!	; 0xf68

000052d0 <rb_lib_restart@plt>:
    52d0:	add	ip, pc, #0, 12
    52d4:	add	ip, ip, #151552	; 0x25000
    52d8:	ldr	pc, [ip, #3936]!	; 0xf60

000052dc <DH_free@plt>:
    52dc:	add	ip, pc, #0, 12
    52e0:	add	ip, ip, #151552	; 0x25000
    52e4:	ldr	pc, [ip, #3928]!	; 0xf58

000052e8 <timer_delete@plt>:
    52e8:	add	ip, pc, #0, 12
    52ec:	add	ip, ip, #151552	; 0x25000
    52f0:	ldr	pc, [ip, #3920]!	; 0xf50

000052f4 <rb_open@plt>:
    52f4:	add	ip, pc, #0, 12
    52f8:	add	ip, ip, #151552	; 0x25000
    52fc:	ldr	pc, [ip, #3912]!	; 0xf48

00005300 <send@plt>:
    5300:	add	ip, pc, #0, 12
    5304:	add	ip, ip, #151552	; 0x25000
    5308:	ldr	pc, [ip, #3904]!	; 0xf40

0000530c <SSL_shutdown@plt>:
    530c:	add	ip, pc, #0, 12
    5310:	add	ip, ip, #151552	; 0x25000
    5314:	ldr	pc, [ip, #3896]!	; 0xf38

00005318 <rb_bh_create@plt>:
    5318:	add	ip, pc, #0, 12
    531c:	add	ip, ip, #151552	; 0x25000
    5320:	ldr	pc, [ip, #3888]!	; 0xf30

00005324 <dup2@plt>:
    5324:	add	ip, pc, #0, 12
    5328:	add	ip, ip, #151552	; 0x25000
    532c:	ldr	pc, [ip, #3880]!	; 0xf28

00005330 <getpid@plt>:
    5330:	add	ip, pc, #0, 12
    5334:	add	ip, ip, #151552	; 0x25000
    5338:	ldr	pc, [ip, #3872]!	; 0xf20

0000533c <rb_writev@plt>:
    533c:	add	ip, pc, #0, 12
    5340:	add	ip, ip, #151552	; 0x25000
    5344:	ldr	pc, [ip, #3864]!	; 0xf18

00005348 <RAND_bytes@plt>:
    5348:	add	ip, pc, #0, 12
    534c:	add	ip, ip, #151552	; 0x25000
    5350:	ldr	pc, [ip, #3856]!	; 0xf10

00005354 <rb_linebuf_newbuf@plt>:
    5354:	add	ip, pc, #0, 12
    5358:	add	ip, ip, #151552	; 0x25000
    535c:	ldr	pc, [ip, #3848]!	; 0xf08

00005360 <rb_fdlist_init@plt>:
    5360:	add	ip, pc, #0, 12
    5364:	add	ip, ip, #151552	; 0x25000
    5368:	ldr	pc, [ip, #3840]!	; 0xf00

0000536c <rb_event_add@plt>:
    536c:	add	ip, pc, #0, 12
    5370:	add	ip, ip, #151552	; 0x25000
    5374:	ldr	pc, [ip, #3832]!	; 0xef8

00005378 <readlink@plt>:
    5378:	add	ip, pc, #0, 12
    537c:	add	ip, ip, #151552	; 0x25000
    5380:	ldr	pc, [ip, #3824]!	; 0xef0

00005384 <SSL_CTX_new@plt>:
    5384:	add	ip, pc, #0, 12
    5388:	add	ip, ip, #151552	; 0x25000
    538c:	ldr	pc, [ip, #3816]!	; 0xee8

00005390 <recvmsg@plt>:
    5390:	add	ip, pc, #0, 12
    5394:	add	ip, ip, #151552	; 0x25000
    5398:	ldr	pc, [ip, #3808]!	; 0xee0

0000539c <rand@plt>:
    539c:	add	ip, pc, #0, 12
    53a0:	add	ip, ip, #151552	; 0x25000
    53a4:	ldr	pc, [ip, #3800]!	; 0xed8

000053a8 <rb_linebuf_init@plt>:
    53a8:	add	ip, pc, #0, 12
    53ac:	add	ip, ip, #151552	; 0x25000
    53b0:	ldr	pc, [ip, #3792]!	; 0xed0

000053b4 <__fxstat@plt>:
    53b4:	add	ip, pc, #0, 12
    53b8:	add	ip, ip, #151552	; 0x25000
    53bc:	ldr	pc, [ip, #3784]!	; 0xec8

000053c0 <SSL_set_connect_state@plt>:
    53c0:	add	ip, pc, #0, 12
    53c4:	add	ip, ip, #151552	; 0x25000
    53c8:	ldr	pc, [ip, #3776]!	; 0xec0

000053cc <rb_radixtree_elem_find@plt>:
    53cc:	add	ip, pc, #0, 12
    53d0:	add	ip, ip, #151552	; 0x25000
    53d4:	ldr	pc, [ip, #3768]!	; 0xeb8

000053d8 <rb_make_rb_dlink_node@plt>:
    53d8:	add	ip, pc, #0, 12
    53dc:	add	ip, ip, #151552	; 0x25000
    53e0:	ldr	pc, [ip, #3760]!	; 0xeb0

000053e4 <rb_strlcat@plt>:
    53e4:	add	ip, pc, #0, 12
    53e8:	add	ip, ip, #151552	; 0x25000
    53ec:	ldr	pc, [ip, #3752]!	; 0xea8

000053f0 <rb_spawn_process@plt>:
    53f0:	add	ip, pc, #0, 12
    53f4:	add	ip, ip, #151552	; 0x25000
    53f8:	ldr	pc, [ip, #3744]!	; 0xea0

000053fc <EVP_sha512@plt>:
    53fc:	add	ip, pc, #0, 12
    5400:	add	ip, ip, #151552	; 0x25000
    5404:	ldr	pc, [ip, #3736]!	; 0xe98

00005408 <snprintf@plt>:
    5408:	add	ip, pc, #0, 12
    540c:	add	ip, ip, #151552	; 0x25000
    5410:	ldr	pc, [ip, #3728]!	; 0xe90

00005414 <RAND_status@plt>:
    5414:	add	ip, pc, #0, 12
    5418:	add	ip, ip, #151552	; 0x25000
    541c:	ldr	pc, [ip, #3720]!	; 0xe88

00005420 <timerfd_create@plt>:
    5420:	add	ip, pc, #0, 12
    5424:	add	ip, ip, #151552	; 0x25000
    5428:	ldr	pc, [ip, #3712]!	; 0xe80

0000542c <EVP_sha256@plt>:
    542c:	add	ip, pc, #0, 12
    5430:	add	ip, ip, #151552	; 0x25000
    5434:	ldr	pc, [ip, #3704]!	; 0xe78

00005438 <strcspn@plt>:
    5438:	add	ip, pc, #0, 12
    543c:	add	ip, ip, #151552	; 0x25000
    5440:	ldr	pc, [ip, #3696]!	; 0xe70

00005444 <rb_linebuf_put@plt>:
    5444:	add	ip, pc, #0, 12
    5448:	add	ip, ip, #151552	; 0x25000
    544c:	ldr	pc, [ip, #3688]!	; 0xe68

00005450 <rb_listen@plt>:
    5450:	add	ip, pc, #0, 12
    5454:	add	ip, ip, #151552	; 0x25000
    5458:	ldr	pc, [ip, #3680]!	; 0xe60

0000545c <fcntl@plt>:
    545c:	add	ip, pc, #0, 12
    5460:	add	ip, ip, #151552	; 0x25000
    5464:	ldr	pc, [ip, #3672]!	; 0xe58

00005468 <strncmp@plt>:
    5468:	add	ip, pc, #0, 12
    546c:	add	ip, ip, #151552	; 0x25000
    5470:	ldr	pc, [ip, #3664]!	; 0xe50

00005474 <kill@plt>:
    5474:	add	ip, pc, #0, 12
    5478:	add	ip, ip, #151552	; 0x25000
    547c:	ldr	pc, [ip, #3656]!	; 0xe48

00005480 <nanosleep@plt>:
    5480:	add	ip, pc, #0, 12
    5484:	add	ip, ip, #151552	; 0x25000
    5488:	ldr	pc, [ip, #3648]!	; 0xe40

0000548c <rb_event_next@plt>:
    548c:	add	ip, pc, #0, 12
    5490:	add	ip, ip, #151552	; 0x25000
    5494:	ldr	pc, [ip, #3640]!	; 0xe38

00005498 <realloc@plt>:
    5498:	add	ip, pc, #0, 12
    549c:	add	ip, ip, #151552	; 0x25000
    54a0:	ldr	pc, [ip, #3632]!	; 0xe30

000054a4 <timerfd_settime@plt>:
    54a4:	add	ip, pc, #0, 12
    54a8:	add	ip, ip, #151552	; 0x25000
    54ac:	ldr	pc, [ip, #3624]!	; 0xe28

000054b0 <epoll_ctl@plt>:
    54b0:	add	ip, pc, #0, 12
    54b4:	add	ip, ip, #151552	; 0x25000
    54b8:	ldr	pc, [ip, #3616]!	; 0xe20

000054bc <X509_free@plt>:
    54bc:	add	ip, pc, #0, 12
    54c0:	add	ip, ip, #151552	; 0x25000
    54c4:	ldr	pc, [ip, #3608]!	; 0xe18

000054c8 <readv@plt>:
    54c8:	add	ip, pc, #0, 12
    54cc:	add	ip, ip, #151552	; 0x25000
    54d0:	ldr	pc, [ip, #3600]!	; 0xe10

000054d4 <getsockopt@plt>:
    54d4:	add	ip, pc, #0, 12
    54d8:	add	ip, ip, #151552	; 0x25000
    54dc:	ldr	pc, [ip, #3592]!	; 0xe08

000054e0 <pipe@plt>:
    54e0:	add	ip, pc, #0, 12
    54e4:	add	ip, ip, #151552	; 0x25000
    54e8:	ldr	pc, [ip, #3584]!	; 0xe00

000054ec <OpenSSL_version@plt>:
    54ec:	add	ip, pc, #0, 12
    54f0:	add	ip, ip, #151552	; 0x25000
    54f4:	ldr	pc, [ip, #3576]!	; 0xdf8

000054f8 <setsockopt@plt>:
    54f8:	add	ip, pc, #0, 12
    54fc:	add	ip, ip, #151552	; 0x25000
    5500:	ldr	pc, [ip, #3568]!	; 0xdf0

00005504 <SSL_get_error@plt>:
    5504:	add	ip, pc, #0, 12
    5508:	add	ip, ip, #151552	; 0x25000
    550c:	ldr	pc, [ip, #3560]!	; 0xde8

00005510 <SSL_get_version@plt>:
    5510:	add	ip, pc, #0, 12
    5514:	add	ip, ip, #151552	; 0x25000
    5518:	ldr	pc, [ip, #3552]!	; 0xde0

0000551c <memchr@plt>:
    551c:	add	ip, pc, #0, 12
    5520:	add	ip, ip, #151552	; 0x25000
    5524:	ldr	pc, [ip, #3544]!	; 0xdd8

00005528 <setenv@plt>:
    5528:	add	ip, pc, #0, 12
    552c:	add	ip, ip, #151552	; 0x25000
    5530:	ldr	pc, [ip, #3536]!	; 0xdd0

00005534 <strcmp@plt>:
    5534:	add	ip, pc, #0, 12
    5538:	add	ip, ip, #151552	; 0x25000
    553c:	ldr	pc, [ip, #3528]!	; 0xdc8

00005540 <__errno_location@plt>:
    5540:	add	ip, pc, #0, 12
    5544:	add	ip, ip, #151552	; 0x25000
    5548:	ldr	pc, [ip, #3520]!	; 0xdc0

0000554c <__cxa_finalize@plt>:
    554c:	add	ip, pc, #0, 12
    5550:	add	ip, ip, #151552	; 0x25000
    5554:	ldr	pc, [ip, #3512]!	; 0xdb8

00005558 <sprintf@plt>:
    5558:	add	ip, pc, #0, 12
    555c:	add	ip, ip, #151552	; 0x25000
    5560:	ldr	pc, [ip, #3504]!	; 0xdb0

00005564 <rb_bh_usage@plt>:
    5564:	add	ip, pc, #0, 12
    5568:	add	ip, ip, #151552	; 0x25000
    556c:	ldr	pc, [ip, #3496]!	; 0xda8

00005570 <SSL_CTX_set_verify@plt>:
    5570:	add	ip, pc, #0, 12
    5574:	add	ip, ip, #151552	; 0x25000
    5578:	ldr	pc, [ip, #3488]!	; 0xda0

Disassembly of section .text:

00005580 <call_weak_fn>:
    5580:	ldr	r3, [pc, #20]	; 559c <call_weak_fn+0x1c>
    5584:	ldr	r2, [pc, #20]	; 55a0 <call_weak_fn+0x20>
    5588:	add	r3, pc, r3
    558c:	ldr	r2, [r3, r2]
    5590:	cmp	r2, #0
    5594:	bxeq	lr
    5598:	b	4dd8 <__gmon_start__@plt>
    559c:	.word	0x00025a70
    55a0:	.word	0x0000032c

000055a4 <deregister_tm_clones>:
    55a4:	ldr	r0, [pc, #44]	; 55d8 <deregister_tm_clones+0x34>
    55a8:	ldr	r3, [pc, #44]	; 55dc <deregister_tm_clones+0x38>
    55ac:	add	r0, pc, r0
    55b0:	add	r3, pc, r3
    55b4:	cmp	r3, r0
    55b8:	ldr	r3, [pc, #32]	; 55e0 <deregister_tm_clones+0x3c>
    55bc:	add	r3, pc, r3
    55c0:	bxeq	lr
    55c4:	ldr	r2, [pc, #24]	; 55e4 <deregister_tm_clones+0x40>
    55c8:	ldr	r3, [r3, r2]
    55cc:	cmp	r3, #0
    55d0:	bxeq	lr
    55d4:	bx	r3
    55d8:	.word	0x00025eec
    55dc:	.word	0x00025ee8
    55e0:	.word	0x00025a3c
    55e4:	.word	0x00000348

000055e8 <register_tm_clones>:
    55e8:	ldr	r0, [pc, #56]	; 5628 <register_tm_clones+0x40>
    55ec:	ldr	r3, [pc, #56]	; 562c <register_tm_clones+0x44>
    55f0:	add	r0, pc, r0
    55f4:	add	r3, pc, r3
    55f8:	sub	r1, r3, r0
    55fc:	ldr	r3, [pc, #44]	; 5630 <register_tm_clones+0x48>
    5600:	asr	r1, r1, #2
    5604:	add	r3, pc, r3
    5608:	add	r1, r1, r1, lsr #31
    560c:	asrs	r1, r1, #1
    5610:	bxeq	lr
    5614:	ldr	r2, [pc, #24]	; 5634 <register_tm_clones+0x4c>
    5618:	ldr	r3, [r3, r2]
    561c:	cmp	r3, #0
    5620:	bxeq	lr
    5624:	bx	r3
    5628:	.word	0x00025ea8
    562c:	.word	0x00025ea4
    5630:	.word	0x000259f4
    5634:	.word	0x00000358

00005638 <__do_global_dtors_aux>:
    5638:	ldr	r3, [pc, #76]	; 568c <__do_global_dtors_aux+0x54>
    563c:	ldr	r2, [pc, #76]	; 5690 <__do_global_dtors_aux+0x58>
    5640:	add	r3, pc, r3
    5644:	add	r2, pc, r2
    5648:	ldrb	r3, [r3]
    564c:	cmp	r3, #0
    5650:	bxne	lr
    5654:	ldr	r3, [pc, #56]	; 5694 <__do_global_dtors_aux+0x5c>
    5658:	push	{r4, lr}
    565c:	ldr	r3, [r2, r3]
    5660:	cmp	r3, #0
    5664:	beq	5674 <__do_global_dtors_aux+0x3c>
    5668:	ldr	r3, [pc, #40]	; 5698 <__do_global_dtors_aux+0x60>
    566c:	ldr	r0, [pc, r3]
    5670:	bl	554c <__cxa_finalize@plt>
    5674:	bl	55a4 <deregister_tm_clones>
    5678:	ldr	r3, [pc, #28]	; 569c <__do_global_dtors_aux+0x64>
    567c:	mov	r2, #1
    5680:	add	r3, pc, r3
    5684:	strb	r2, [r3]
    5688:	pop	{r4, pc}
    568c:	.word	0x00025e58
    5690:	.word	0x000259b4
    5694:	.word	0x000003e8
    5698:	.word	0x00025d7c
    569c:	.word	0x00025e18

000056a0 <frame_dummy>:
    56a0:	b	55e8 <register_tm_clones>

000056a4 <rb_spawn_process>:
    56a4:	push	{r4, r5, r6, sl, fp, lr}
    56a8:	add	fp, sp, #16
    56ac:	sub	sp, sp, #352	; 0x160
    56b0:	add	r6, sp, #12
    56b4:	mov	r5, r0
    56b8:	mov	r4, r1
    56bc:	mov	r0, r6
    56c0:	bl	4f7c <posix_spawnattr_init@plt>
    56c4:	mov	r0, r6
    56c8:	mov	r1, #64	; 0x40
    56cc:	bl	50c0 <posix_spawnattr_setflags@plt>
    56d0:	ldr	r0, [pc, #84]	; 572c <rb_spawn_process+0x88>
    56d4:	mov	r1, r5
    56d8:	mov	r2, #0
    56dc:	mov	r3, r6
    56e0:	ldr	r0, [pc, r0]
    56e4:	str	r4, [sp]
    56e8:	ldr	r0, [r0]
    56ec:	str	r0, [sp, #4]
    56f0:	sub	r0, fp, #20
    56f4:	bl	5078 <posix_spawn@plt>
    56f8:	mov	r4, r0
    56fc:	mov	r0, r6
    5700:	bl	50fc <posix_spawnattr_destroy@plt>
    5704:	cmp	r4, #0
    5708:	ldreq	r0, [fp, #-20]	; 0xffffffec
    570c:	subeq	sp, fp, #16
    5710:	popeq	{r4, r5, r6, sl, fp, pc}
    5714:	bl	5540 <__errno_location@plt>
    5718:	str	r4, [r0]
    571c:	mvn	r0, #0
    5720:	str	r0, [fp, #-20]	; 0xffffffec
    5724:	sub	sp, fp, #16
    5728:	pop	{r4, r5, r6, sl, fp, pc}
    572c:	.word	0x00025c88

00005730 <rb_gettimeofday>:
    5730:	b	500c <gettimeofday@plt>

00005734 <rb_sleep>:
    5734:	push	{fp, lr}
    5738:	mov	fp, sp
    573c:	sub	sp, sp, #8
    5740:	str	r0, [sp]
    5744:	mov	r0, #1000	; 0x3e8
    5748:	mul	r0, r1, r0
    574c:	mov	r1, #0
    5750:	str	r0, [sp, #4]
    5754:	mov	r0, sp
    5758:	bl	5480 <nanosleep@plt>
    575c:	mov	sp, fp
    5760:	pop	{fp, pc}

00005764 <rb_strerror>:
    5764:	b	4c88 <strerror@plt>

00005768 <rb_kill>:
    5768:	b	5474 <kill@plt>

0000576c <rb_setenv>:
    576c:	b	5528 <setenv@plt>

00005770 <rb_waitpid>:
    5770:	b	5138 <waitpid@plt>

00005774 <rb_getpid>:
    5774:	b	5330 <getpid@plt>

00005778 <rb_path_to_self>:
    5778:	push	{r4, sl, fp, lr}
    577c:	add	fp, sp, #8
    5780:	ldr	r0, [pc, #36]	; 57ac <rb_path_to_self+0x34>
    5784:	ldr	r4, [pc, #36]	; 57b0 <rb_path_to_self+0x38>
    5788:	mov	r2, #4096	; 0x1000
    578c:	add	r4, pc, r4
    5790:	add	r0, pc, r0
    5794:	mov	r1, r4
    5798:	bl	5378 <readlink@plt>
    579c:	cmn	r0, #1
    57a0:	addeq	r4, r0, #1
    57a4:	mov	r0, r4
    57a8:	pop	{r4, sl, fp, pc}
    57ac:	.word	0x00012c98
    57b0:	.word	0x00025d0d

000057b4 <rb_init_netio_win32>:
    57b4:	push	{fp, lr}
    57b8:	mov	fp, sp
    57bc:	bl	5540 <__errno_location@plt>
    57c0:	mov	r1, #38	; 0x26
    57c4:	str	r1, [r0]
    57c8:	mvn	r0, #0
    57cc:	pop	{fp, pc}

000057d0 <rb_setselect_win32>:
    57d0:	push	{fp, lr}
    57d4:	mov	fp, sp
    57d8:	bl	5540 <__errno_location@plt>
    57dc:	mov	r1, #38	; 0x26
    57e0:	str	r1, [r0]
    57e4:	pop	{fp, pc}

000057e8 <rb_select_win32>:
    57e8:	push	{fp, lr}
    57ec:	mov	fp, sp
    57f0:	bl	5540 <__errno_location@plt>
    57f4:	mov	r1, #38	; 0x26
    57f8:	str	r1, [r0]
    57fc:	mvn	r0, #0
    5800:	pop	{fp, pc}

00005804 <rb_setup_fd_win32>:
    5804:	push	{fp, lr}
    5808:	mov	fp, sp
    580c:	bl	5540 <__errno_location@plt>
    5810:	mov	r1, #38	; 0x26
    5814:	str	r1, [r0]
    5818:	mvn	r0, #0
    581c:	pop	{fp, pc}

00005820 <rb_crypt>:
    5820:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5824:	add	fp, sp, #28
    5828:	sub	sp, sp, #236	; 0xec
    582c:	mov	r4, r0
    5830:	ldrb	r0, [r1]
    5834:	mov	sl, r1
    5838:	cmp	r0, #36	; 0x24
    583c:	bne	58b8 <rb_crypt+0x98>
    5840:	ldrb	r0, [sl, #2]
    5844:	cmp	r0, #36	; 0x24
    5848:	ldrbne	r0, [sl, #3]
    584c:	cmpne	r0, #36	; 0x24
    5850:	bne	58b8 <rb_crypt+0x98>
    5854:	ldrb	r0, [sl, #1]
    5858:	mov	r6, #0
    585c:	cmp	r0, #54	; 0x36
    5860:	beq	5bc0 <rb_crypt+0x3a0>
    5864:	cmp	r0, #53	; 0x35
    5868:	beq	5c18 <rb_crypt+0x3f8>
    586c:	cmp	r0, #49	; 0x31
    5870:	bne	6334 <rb_crypt+0xb14>
    5874:	ldr	r5, [pc, #3852]	; 6788 <rb_crypt+0xf68>
    5878:	mov	r0, sl
    587c:	mov	r2, #3
    5880:	add	r5, pc, r5
    5884:	str	sl, [r5]
    5888:	ldr	r1, [pc, #3836]	; 678c <rb_crypt+0xf6c>
    588c:	add	r1, pc, r1
    5890:	bl	5468 <strncmp@plt>
    5894:	cmp	r0, #0
    5898:	mov	r1, #0
    589c:	addeq	sl, sl, #3
    58a0:	streq	sl, [r5]
    58a4:	mov	r7, sl
    58a8:	ldr	r0, [pc, #3808]	; 6790 <rb_crypt+0xf70>
    58ac:	add	r0, pc, r0
    58b0:	str	sl, [r0]
    58b4:	b	5c6c <rb_crypt+0x44c>
    58b8:	str	sl, [sp, #24]
    58bc:	bl	6ed0 <rb_des_init>
    58c0:	sub	r0, fp, #120	; 0x78
    58c4:	mov	r2, #254	; 0xfe
    58c8:	orr	r1, r0, #1
    58cc:	mov	r3, r4
    58d0:	ldrb	r7, [r3], #1
    58d4:	tst	r2, r7, lsl #1
    58d8:	lsl	r6, r7, #1
    58dc:	movne	r4, r3
    58e0:	sub	r3, r1, r0
    58e4:	strb	r6, [r1, #-1]
    58e8:	add	r1, r1, #1
    58ec:	cmp	r3, #8
    58f0:	bne	58cc <rb_crypt+0xac>
    58f4:	bl	6ed0 <rb_des_init>
    58f8:	ldr	r2, [fp, #-120]	; 0xffffff88
    58fc:	ldr	r3, [fp, #-116]	; 0xffffff8c
    5900:	ldr	r7, [pc, #3724]	; 6794 <rb_crypt+0xf74>
    5904:	ldr	r7, [pc, r7]
    5908:	rev	r0, r3
    590c:	rev	r1, r2
    5910:	cmp	r0, r7
    5914:	ldreq	r7, [pc, #3708]	; 6798 <rb_crypt+0xf78>
    5918:	ldreq	r7, [pc, r7]
    591c:	cmpeq	r1, r7
    5920:	beq	5b6c <rb_crypt+0x34c>
    5924:	ldr	r2, [pc, #3696]	; 679c <rb_crypt+0xf7c>
    5928:	lsr	ip, r1, #25
    592c:	and	r9, r1, #254	; 0xfe
    5930:	add	r2, pc, r2
    5934:	str	r0, [r2]
    5938:	ldr	r2, [pc, #3680]	; 67a0 <rb_crypt+0xf80>
    593c:	add	r2, pc, r2
    5940:	str	r1, [r2]
    5944:	ldr	r3, [pc, #3672]	; 67a4 <rb_crypt+0xf84>
    5948:	add	r3, pc, r3
    594c:	ldr	r7, [r3, ip, lsl #2]
    5950:	ubfx	lr, r1, #17, #7
    5954:	add	r5, r3, lr, lsl #2
    5958:	ldr	r5, [r5, #512]	; 0x200
    595c:	ubfx	r8, r1, #9, #7
    5960:	add	r4, r3, r8, lsl #2
    5964:	ldr	r4, [r4, #1024]	; 0x400
    5968:	orr	r7, r5, r7
    596c:	orr	r7, r7, r4
    5970:	add	r4, r3, r9, lsl #1
    5974:	ldr	r4, [r4, #1536]	; 0x600
    5978:	orr	r7, r7, r4
    597c:	lsr	r4, r0, #25
    5980:	add	r2, r3, r4, lsl #2
    5984:	ldr	r2, [r2, #2048]	; 0x800
    5988:	orr	r2, r7, r2
    598c:	ubfx	r7, r0, #17, #7
    5990:	add	r6, r3, r7, lsl #2
    5994:	ldr	r6, [r6, #2560]	; 0xa00
    5998:	orr	r2, r2, r6
    599c:	ubfx	r6, r0, #9, #7
    59a0:	add	r5, r3, r6, lsl #2
    59a4:	ldr	r5, [r5, #3072]	; 0xc00
    59a8:	orr	r2, r2, r5
    59ac:	and	r5, r0, #254	; 0xfe
    59b0:	add	r0, r3, r5, lsl #1
    59b4:	ldr	r0, [r0, #3584]	; 0xe00
    59b8:	orr	r0, r2, r0
    59bc:	str	r0, [sp, #32]
    59c0:	ldr	r2, [pc, #3980]	; 6954 <rb_crypt+0x1134>
    59c4:	add	r2, pc, r2
    59c8:	add	r1, r2, lr, lsl #2
    59cc:	ldr	r3, [r2, ip, lsl #2]
    59d0:	ldr	r1, [r1, #512]	; 0x200
    59d4:	orr	r1, r1, r3
    59d8:	add	r3, r2, r8, lsl #2
    59dc:	ldr	r3, [r3, #1024]	; 0x400
    59e0:	orr	r1, r1, r3
    59e4:	add	r3, r2, r9, lsl #1
    59e8:	ldr	r3, [r3, #1536]	; 0x600
    59ec:	orr	r1, r1, r3
    59f0:	add	r3, r2, r4, lsl #2
    59f4:	ldr	r3, [r3, #2048]	; 0x800
    59f8:	orr	r1, r1, r3
    59fc:	add	r3, r2, r7, lsl #2
    5a00:	ldr	r3, [r3, #2560]	; 0xa00
    5a04:	orr	r1, r1, r3
    5a08:	add	r3, r2, r6, lsl #2
    5a0c:	add	r2, r2, r5, lsl #1
    5a10:	ldr	r3, [r3, #3072]	; 0xc00
    5a14:	ldr	r2, [r2, #3584]	; 0xe00
    5a18:	orr	r1, r1, r3
    5a1c:	mov	r3, #0
    5a20:	orr	r0, r1, r2
    5a24:	mov	r2, #0
    5a28:	str	r0, [sp, #28]
    5a2c:	ldr	ip, [pc, #3876]	; 6958 <rb_crypt+0x1138>
    5a30:	add	ip, pc, ip
    5a34:	ldr	r0, [pc, #3872]	; 695c <rb_crypt+0x113c>
    5a38:	ldr	r1, [sp, #28]
    5a3c:	add	r0, pc, r0
    5a40:	ldrb	r5, [r0, r3]
    5a44:	add	r2, r2, r5
    5a48:	rsb	r0, r2, #28
    5a4c:	lsr	r5, r1, r0
    5a50:	orr	r1, r5, r1, lsl r2
    5a54:	ubfx	r6, r1, #14, #7
    5a58:	and	sl, r1, #127	; 0x7f
    5a5c:	str	r6, [sp, #36]	; 0x24
    5a60:	add	r6, ip, r6, lsl #2
    5a64:	ldr	r6, [r6, #512]	; 0x200
    5a68:	ubfx	r9, r1, #21, #7
    5a6c:	ldr	lr, [ip, r9, lsl #2]
    5a70:	orr	r7, r6, lr
    5a74:	ubfx	lr, r1, #7, #7
    5a78:	ldr	r1, [sp, #32]
    5a7c:	add	r4, ip, lr, lsl #2
    5a80:	ldr	r4, [r4, #1024]	; 0x400
    5a84:	lsr	r0, r1, r0
    5a88:	orr	r0, r0, r1, lsl r2
    5a8c:	orr	r7, r7, r4
    5a90:	add	r4, ip, sl, lsl #2
    5a94:	ldr	r4, [r4, #1536]	; 0x600
    5a98:	orr	r7, r7, r4
    5a9c:	ubfx	r4, r0, #21, #7
    5aa0:	add	r5, ip, r4, lsl #2
    5aa4:	ldr	r5, [r5, #2048]	; 0x800
    5aa8:	orr	r7, r7, r5
    5aac:	ubfx	r5, r0, #14, #7
    5ab0:	add	r6, ip, r5, lsl #2
    5ab4:	ldr	r6, [r6, #2560]	; 0xa00
    5ab8:	orr	r6, r7, r6
    5abc:	ubfx	r7, r0, #7, #7
    5ac0:	add	r8, ip, r7, lsl #2
    5ac4:	ldr	r1, [r8, #3072]	; 0xc00
    5ac8:	and	r8, r0, #127	; 0x7f
    5acc:	orr	r1, r6, r1
    5ad0:	add	r6, ip, r8, lsl #2
    5ad4:	ldr	r6, [r6, #3584]	; 0xe00
    5ad8:	orr	r1, r1, r6
    5adc:	ldr	r6, [pc, #4076]	; 6ad0 <rb_crypt+0x12b0>
    5ae0:	add	r6, pc, r6
    5ae4:	str	r1, [r6, r3, lsl #2]
    5ae8:	ldr	r1, [pc, #4068]	; 6ad4 <rb_crypt+0x12b4>
    5aec:	ldr	r6, [sp, #36]	; 0x24
    5af0:	add	r1, pc, r1
    5af4:	mov	r0, r1
    5af8:	ldr	r1, [r1, r9, lsl #2]
    5afc:	add	r6, r0, r6, lsl #2
    5b00:	add	r7, r0, r7, lsl #2
    5b04:	ldr	r6, [r6, #512]	; 0x200
    5b08:	ldr	r7, [r7, #3072]	; 0xc00
    5b0c:	orr	r1, r6, r1
    5b10:	add	r6, r0, lr, lsl #2
    5b14:	ldr	r6, [r6, #1024]	; 0x400
    5b18:	orr	r1, r1, r6
    5b1c:	add	r6, r0, sl, lsl #2
    5b20:	ldr	r6, [r6, #1536]	; 0x600
    5b24:	orr	r1, r1, r6
    5b28:	add	r6, r0, r4, lsl #2
    5b2c:	ldr	r6, [r6, #2048]	; 0x800
    5b30:	orr	r1, r1, r6
    5b34:	add	r6, r0, r5, lsl #2
    5b38:	add	r0, r0, r8, lsl #2
    5b3c:	ldr	r6, [r6, #2560]	; 0xa00
    5b40:	ldr	r0, [r0, #3584]	; 0xe00
    5b44:	orr	r1, r1, r6
    5b48:	orr	r1, r1, r7
    5b4c:	orr	r0, r1, r0
    5b50:	ldr	r1, [pc, #4048]	; 6b28 <rb_crypt+0x1308>
    5b54:	add	r1, pc, r1
    5b58:	str	r0, [r1, r3, lsl #2]
    5b5c:	add	r3, r3, #1
    5b60:	cmp	r3, #16
    5b64:	bne	5a34 <rb_crypt+0x214>
    5b68:	b	5b7c <rb_crypt+0x35c>
    5b6c:	orr	r2, r3, r2
    5b70:	rev	r2, r2
    5b74:	cmp	r2, #0
    5b78:	beq	5924 <rb_crypt+0x104>
    5b7c:	ldr	r7, [sp, #24]
    5b80:	mov	r1, #0
    5b84:	mov	r2, #0
    5b88:	ldrb	r0, [r7, #1]
    5b8c:	cmp	r0, #122	; 0x7a
    5b90:	bhi	5ea8 <rb_crypt+0x688>
    5b94:	cmp	r0, #97	; 0x61
    5b98:	bcc	5ba4 <rb_crypt+0x384>
    5b9c:	sub	r2, r0, #59	; 0x3b
    5ba0:	b	5ea8 <rb_crypt+0x688>
    5ba4:	cmp	r0, #90	; 0x5a
    5ba8:	mov	r2, #0
    5bac:	bhi	5ea8 <rb_crypt+0x688>
    5bb0:	cmp	r0, #65	; 0x41
    5bb4:	bcc	5e98 <rb_crypt+0x678>
    5bb8:	sub	r2, r0, #53	; 0x35
    5bbc:	b	5ea8 <rb_crypt+0x688>
    5bc0:	mov	r0, sl
    5bc4:	bl	5084 <strlen@plt>
    5bc8:	ldr	r2, [pc, #4044]	; 6b9c <rb_crypt+0x137c>
    5bcc:	add	r5, r0, #109	; 0x6d
    5bd0:	ldr	r2, [pc, r2]
    5bd4:	ldr	r0, [pc, #4036]	; 6ba0 <rb_crypt+0x1380>
    5bd8:	ldr	r0, [pc, r0]
    5bdc:	cmp	r0, r5
    5be0:	bge	5d9c <rb_crypt+0x57c>
    5be4:	mov	r0, r2
    5be8:	mov	r1, r5
    5bec:	bl	5498 <realloc@plt>
    5bf0:	cmp	r0, #0
    5bf4:	beq	6334 <rb_crypt+0xb14>
    5bf8:	mov	r2, r0
    5bfc:	ldr	r0, [pc, #4084]	; 6bf8 <rb_crypt+0x13d8>
    5c00:	add	r0, pc, r0
    5c04:	str	r5, [r0]
    5c08:	ldr	r0, [pc, #4076]	; 6bfc <rb_crypt+0x13dc>
    5c0c:	add	r0, pc, r0
    5c10:	str	r2, [r0]
    5c14:	b	5da0 <rb_crypt+0x580>
    5c18:	mov	r0, sl
    5c1c:	bl	5084 <strlen@plt>
    5c20:	add	r5, r0, #66	; 0x42
    5c24:	mov	r0, r5
    5c28:	bl	5228 <malloc@plt>
    5c2c:	cmp	r0, #0
    5c30:	beq	6334 <rb_crypt+0xb14>
    5c34:	mov	r2, r0
    5c38:	ldr	r0, [pc, #4084]	; 6c34 <rb_crypt+0x1414>
    5c3c:	mov	r1, sl
    5c40:	mov	r3, r5
    5c44:	add	r0, pc, r0
    5c48:	str	r2, [r0]
    5c4c:	mov	r0, r4
    5c50:	sub	sp, fp, #28
    5c54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c58:	b	8950 <rb_sha256_crypt_r>
    5c5c:	add	r2, sl, r1
    5c60:	add	r1, r1, #1
    5c64:	add	r7, r2, #1
    5c68:	str	r7, [r0]
    5c6c:	ldrb	r2, [sl, r1]
    5c70:	cmp	r2, #0
    5c74:	cmpne	r2, #36	; 0x24
    5c78:	beq	5c84 <rb_crypt+0x464>
    5c7c:	cmp	r1, #7
    5c80:	bls	5c5c <rb_crypt+0x43c>
    5c84:	add	r0, pc, #676	; 0x2a4
    5c88:	sub	r8, fp, #120	; 0x78
    5c8c:	vld1.64	{d16-d17}, [r0 :128]
    5c90:	mov	r0, #24
    5c94:	vst1.32	{d16-d17}, [r8], r0
    5c98:	mov	r0, r4
    5c9c:	bl	5084 <strlen@plt>
    5ca0:	mov	r5, r0
    5ca4:	lsl	r6, r0, #3
    5ca8:	lsr	r9, r0, #29
    5cac:	mov	r0, #0
    5cb0:	str	r8, [sp, #28]
    5cb4:	cmp	r5, #64	; 0x40
    5cb8:	str	r6, [fp, #-104]	; 0xffffff98
    5cbc:	str	r9, [fp, #-100]	; 0xffffff9c
    5cc0:	bcc	5d4c <rb_crypt+0x52c>
    5cc4:	mov	r1, #48	; 0x30
    5cc8:	mov	r2, r4
    5ccc:	add	r0, r4, #32
    5cd0:	add	r3, r4, #16
    5cd4:	vld1.8	{d16-d17}, [r2], r1
    5cd8:	vld1.8	{d18-d19}, [r0]
    5cdc:	vld1.8	{d20-d21}, [r3]
    5ce0:	add	r0, r8, #32
    5ce4:	vld1.8	{d22-d23}, [r2]
    5ce8:	vst1.8	{d18-d19}, [r0]
    5cec:	add	r0, r8, #16
    5cf0:	vst1.8	{d20-d21}, [r0]
    5cf4:	mov	r0, r8
    5cf8:	vst1.8	{d16-d17}, [r0], r1
    5cfc:	mov	r1, r8
    5d00:	vst1.8	{d22-d23}, [r0]
    5d04:	sub	r0, fp, #120	; 0x78
    5d08:	bl	7f1c <MD5Transform>
    5d0c:	mov	r0, #64	; 0x40
    5d10:	cmp	r5, #128	; 0x80
    5d14:	bcc	5d40 <rb_crypt+0x520>
    5d18:	mov	r6, #64	; 0x40
    5d1c:	sub	r9, fp, #120	; 0x78
    5d20:	add	r1, r4, r6
    5d24:	mov	r0, r9
    5d28:	bl	7f1c <MD5Transform>
    5d2c:	add	r1, r6, #127	; 0x7f
    5d30:	add	r0, r6, #64	; 0x40
    5d34:	cmp	r1, r5
    5d38:	mov	r6, r0
    5d3c:	bcc	5d20 <rb_crypt+0x500>
    5d40:	ldr	r6, [fp, #-104]	; 0xffffff98
    5d44:	ldr	r9, [fp, #-100]	; 0xffffff9c
    5d48:	ldr	r8, [sp, #28]
    5d4c:	add	r1, r4, r0
    5d50:	sub	r2, r5, r0
    5d54:	mov	r0, r8
    5d58:	bl	50a8 <memcpy@plt>
    5d5c:	add	r0, r6, #24
    5d60:	cmn	r6, #24
    5d64:	str	r0, [fp, #-104]	; 0xffffff98
    5d68:	ubfx	r1, r6, #3, #6
    5d6c:	sub	r0, fp, #120	; 0x78
    5d70:	addcs	r9, r9, #1
    5d74:	sub	r6, r7, sl
    5d78:	add	r0, r0, r1
    5d7c:	rsb	r5, r1, #64	; 0x40
    5d80:	strcs	r9, [fp, #-100]	; 0xffffff9c
    5d84:	str	r9, [fp, #-100]	; 0xffffff9c
    5d88:	add	r0, r0, #24
    5d8c:	cmp	r5, #3
    5d90:	bls	5db8 <rb_crypt+0x598>
    5d94:	mov	r5, #0
    5d98:	b	5ddc <rb_crypt+0x5bc>
    5d9c:	mov	r5, r0
    5da0:	mov	r0, r4
    5da4:	mov	r1, sl
    5da8:	mov	r3, r5
    5dac:	sub	sp, fp, #28
    5db0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5db4:	b	9bb0 <rb_sha512_crypt_r>
    5db8:	ldr	r1, [pc, #3784]	; 6c88 <rb_crypt+0x1468>
    5dbc:	mov	r2, r5
    5dc0:	add	r1, pc, r1
    5dc4:	bl	50a8 <memcpy@plt>
    5dc8:	ldr	r7, [sp, #28]
    5dcc:	sub	r0, fp, #120	; 0x78
    5dd0:	mov	r1, r7
    5dd4:	bl	7f1c <MD5Transform>
    5dd8:	mov	r0, r7
    5ddc:	ldr	r1, [pc, #3752]	; 6c8c <rb_crypt+0x146c>
    5de0:	rsb	r2, r5, #3
    5de4:	add	r1, pc, r1
    5de8:	add	r1, r1, r5
    5dec:	bl	50a8 <memcpy@plt>
    5df0:	ldr	r2, [fp, #-104]	; 0xffffff98
    5df4:	ldr	r0, [fp, #-100]	; 0xffffff9c
    5df8:	mov	r7, #0
    5dfc:	add	r3, r2, r6, lsl #3
    5e00:	cmp	r3, r2
    5e04:	str	r3, [fp, #-104]	; 0xffffff98
    5e08:	ubfx	r1, r2, #3, #6
    5e0c:	str	r6, [sp, #32]
    5e10:	addcc	r0, r0, #1
    5e14:	rsb	r5, r1, #64	; 0x40
    5e18:	strcc	r0, [fp, #-100]	; 0xffffff9c
    5e1c:	add	r0, r0, r6, lsr #29
    5e20:	cmp	r5, r6
    5e24:	str	r0, [fp, #-100]	; 0xffffff9c
    5e28:	sub	r0, fp, #120	; 0x78
    5e2c:	add	r0, r0, r1
    5e30:	add	r0, r0, #24
    5e34:	bls	5e40 <rb_crypt+0x620>
    5e38:	mov	r2, #0
    5e3c:	b	6348 <rb_crypt+0xb28>
    5e40:	mov	r1, sl
    5e44:	mov	r2, r5
    5e48:	bl	50a8 <memcpy@plt>
    5e4c:	ldr	r8, [sp, #28]
    5e50:	sub	r0, fp, #120	; 0x78
    5e54:	mov	r1, r8
    5e58:	bl	7f1c <MD5Transform>
    5e5c:	add	r0, r5, #63	; 0x3f
    5e60:	cmp	r0, r6
    5e64:	bcs	6340 <rb_crypt+0xb20>
    5e68:	ldr	r6, [sp, #32]
    5e6c:	sub	r8, fp, #120	; 0x78
    5e70:	add	r1, sl, r5
    5e74:	mov	r0, r8
    5e78:	bl	7f1c <MD5Transform>
    5e7c:	add	r0, r5, #127	; 0x7f
    5e80:	add	r2, r5, #64	; 0x40
    5e84:	cmp	r0, r6
    5e88:	mov	r5, r2
    5e8c:	bcc	5e70 <rb_crypt+0x650>
    5e90:	ldr	r0, [sp, #28]
    5e94:	b	6348 <rb_crypt+0xb28>
    5e98:	sub	r2, r0, #46	; 0x2e
    5e9c:	uxtb	r3, r2
    5ea0:	cmp	r3, #12
    5ea4:	movcs	r2, #0
    5ea8:	ldrb	r3, [r7]
    5eac:	lsl	r2, r2, #6
    5eb0:	cmp	r3, #122	; 0x7a
    5eb4:	bhi	5ef0 <rb_crypt+0x6d0>
    5eb8:	cmp	r3, #97	; 0x61
    5ebc:	bcc	5ec8 <rb_crypt+0x6a8>
    5ec0:	sub	r1, r3, #59	; 0x3b
    5ec4:	b	5ef0 <rb_crypt+0x6d0>
    5ec8:	cmp	r3, #90	; 0x5a
    5ecc:	bhi	5ef0 <rb_crypt+0x6d0>
    5ed0:	cmp	r3, #65	; 0x41
    5ed4:	bcc	5ee0 <rb_crypt+0x6c0>
    5ed8:	sub	r1, r3, #53	; 0x35
    5edc:	b	5ef0 <rb_crypt+0x6d0>
    5ee0:	sub	r1, r3, #46	; 0x2e
    5ee4:	uxtb	r7, r1
    5ee8:	cmp	r7, #12
    5eec:	movcs	r1, #0
    5ef0:	ldr	r7, [pc, #3988]	; 6e8c <rb_crypt+0x166c>
    5ef4:	cmp	r0, #0
    5ef8:	orr	r1, r1, r2
    5efc:	add	r7, pc, r7
    5f00:	strb	r3, [r7]
    5f04:	movne	r3, r0
    5f08:	strb	r3, [r7, #1]
    5f0c:	ldr	r0, [pc, #3964]	; 6e90 <rb_crypt+0x1670>
    5f10:	ldr	r0, [pc, r0]
    5f14:	cmp	r0, r1
    5f18:	bne	5f40 <rb_crypt+0x720>
    5f1c:	ldr	r0, [pc, #3952]	; 6e94 <rb_crypt+0x1674>
    5f20:	ldr	r0, [pc, r0]
    5f24:	b	5f84 <rb_crypt+0x764>
    5f28:	nop	{0}
    5f2c:	nop	{0}
    5f30:	.word	0x67452301
    5f34:	.word	0xefcdab89
    5f38:	.word	0x98badcfe
    5f3c:	.word	0x10325476
    5f40:	ldr	r2, [pc, #3920]	; 6e98 <rb_crypt+0x1678>
    5f44:	mov	r0, #0
    5f48:	mov	r7, #1
    5f4c:	mov	r6, #24
    5f50:	add	r2, pc, r2
    5f54:	str	r0, [r2]
    5f58:	ldr	r3, [pc, #3900]	; 6e9c <rb_crypt+0x167c>
    5f5c:	add	r3, pc, r3
    5f60:	str	r1, [r3]
    5f64:	mov	r3, #8388608	; 0x800000
    5f68:	tst	r7, r1
    5f6c:	lsl	r7, r7, #1
    5f70:	orrne	r0, r3, r0
    5f74:	lsr	r3, r3, #1
    5f78:	strne	r0, [r2]
    5f7c:	subs	r6, r6, #1
    5f80:	bne	5f68 <rb_crypt+0x748>
    5f84:	str	r0, [sp, #32]
    5f88:	mov	r5, #4096	; 0x1000
    5f8c:	mov	ip, #5120	; 0x1400
    5f90:	ldr	r1, [pc, #3848]	; 6ea0 <rb_crypt+0x1680>
    5f94:	add	r1, pc, r1
    5f98:	ldr	r2, [r1, r5]
    5f9c:	ldr	r3, [r1, #1024]	; 0x400
    5fa0:	ldr	r7, [pc, #3836]	; 6ea4 <rb_crypt+0x1684>
    5fa4:	ldr	r7, [pc, r7]
    5fa8:	orr	r3, r3, r7
    5fac:	ldr	r7, [r1, #2048]	; 0x800
    5fb0:	orr	r3, r3, r7
    5fb4:	ldr	r7, [r1, #3072]	; 0xc00
    5fb8:	orr	r3, r3, r7
    5fbc:	ldr	r7, [r1, ip]
    5fc0:	orr	r2, r3, r2
    5fc4:	orr	r2, r2, r7
    5fc8:	mov	r7, #6144	; 0x1800
    5fcc:	ldr	r6, [r1, r7]
    5fd0:	orr	r2, r2, r6
    5fd4:	mov	r6, #7168	; 0x1c00
    5fd8:	ldr	r1, [r1, r6]
    5fdc:	orr	r2, r2, r1
    5fe0:	ldr	r1, [pc, #3776]	; 6ea8 <rb_crypt+0x1688>
    5fe4:	add	r1, pc, r1
    5fe8:	ldr	r5, [r1, r5]
    5fec:	ldr	r4, [r1, #1024]	; 0x400
    5ff0:	ldr	r3, [pc, #3764]	; 6eac <rb_crypt+0x168c>
    5ff4:	ldr	r3, [pc, r3]
    5ff8:	ldr	r7, [r1, r7]
    5ffc:	orr	r3, r4, r3
    6000:	ldr	r4, [r1, #2048]	; 0x800
    6004:	orr	r3, r3, r4
    6008:	ldr	r4, [r1, #3072]	; 0xc00
    600c:	orr	r3, r3, r4
    6010:	orr	r3, r3, r5
    6014:	ldr	r5, [r1, ip]
    6018:	ldr	r1, [r1, r6]
    601c:	ldr	r4, [pc, #3724]	; 6eb0 <rb_crypt+0x1690>
    6020:	mov	ip, #24
    6024:	mov	r6, #16515072	; 0xfc0000
    6028:	orr	r3, r3, r5
    602c:	add	r4, pc, r4
    6030:	orr	r3, r3, r7
    6034:	mov	r7, #4032	; 0xfc0
    6038:	orr	lr, r3, r1
    603c:	ldr	r1, [pc, #3696]	; 6eb4 <rb_crypt+0x1694>
    6040:	ldr	r9, [pc, #3696]	; 6eb8 <rb_crypt+0x1698>
    6044:	ldr	r8, [sp, #32]
    6048:	mov	r3, #258048	; 0x3f000
    604c:	add	r1, pc, r1
    6050:	add	r9, pc, r9
    6054:	mov	sl, lr
    6058:	str	ip, [sp, #36]	; 0x24
    605c:	mov	ip, #0
    6060:	mov	lr, r2
    6064:	and	r5, r3, lr, lsr #11
    6068:	and	r3, r6, lr, ror #9
    606c:	and	r6, lr, #129024	; 0x1f800
    6070:	mov	r2, lr
    6074:	orr	r3, r3, r5
    6078:	and	r5, r7, lr, lsr #13
    607c:	and	r7, lr, #8064	; 0x1f80
    6080:	orr	r3, r3, r5
    6084:	ubfx	r5, lr, #15, #6
    6088:	ldr	r0, [pc, #3628]	; 6ebc <rb_crypt+0x169c>
    608c:	lsl	r7, r7, #5
    6090:	orr	r7, r7, lr, lsr #31
    6094:	orr	r3, r3, r5
    6098:	orr	r7, r7, r6, lsl #7
    609c:	and	r6, lr, #504	; 0x1f8
    60a0:	orr	r7, r7, r6, lsl #3
    60a4:	and	r6, lr, #31
    60a8:	add	r0, pc, r0
    60ac:	orr	r7, r7, r6, lsl #1
    60b0:	ldr	r5, [r0, ip, lsl #2]
    60b4:	mov	r0, #4096	; 0x1000
    60b8:	eor	r5, r3, r5
    60bc:	eor	r3, r3, r7
    60c0:	and	r3, r3, r8
    60c4:	eor	r6, r5, r3
    60c8:	ldrb	r5, [r4, r6, lsr #12]
    60cc:	bfc	r6, #12, #20
    60d0:	add	r6, r4, r6
    60d4:	ldrb	r6, [r6, r0]
    60d8:	ldr	r5, [r1, r5, lsl #2]
    60dc:	add	r6, r1, r6, lsl #2
    60e0:	ldr	r6, [r6, #1024]	; 0x400
    60e4:	orr	r6, r6, r5
    60e8:	ldr	r5, [r9, ip, lsl #2]
    60ec:	add	ip, ip, #1
    60f0:	cmp	ip, #16
    60f4:	eor	r7, r7, r5
    60f8:	mov	r5, #8192	; 0x2000
    60fc:	eor	r3, r7, r3
    6100:	add	r7, r4, r3, lsr #12
    6104:	bfc	r3, #12, #20
    6108:	ldrb	r7, [r7, r5]
    610c:	mov	r5, #12288	; 0x3000
    6110:	add	r3, r4, r3
    6114:	ldrb	r3, [r3, r5]
    6118:	add	r7, r1, r7, lsl #2
    611c:	ldr	r7, [r7, #2048]	; 0x800
    6120:	add	r3, r1, r3, lsl #2
    6124:	ldr	r3, [r3, #3072]	; 0xc00
    6128:	orr	r7, r6, r7
    612c:	mov	r6, #16515072	; 0xfc0000
    6130:	orr	r3, r7, r3
    6134:	mov	r7, #4032	; 0xfc0
    6138:	eor	lr, r3, sl
    613c:	mov	r3, #258048	; 0x3f000
    6140:	mov	sl, r2
    6144:	bne	6064 <rb_crypt+0x844>
    6148:	ldr	r0, [sp, #36]	; 0x24
    614c:	sub	ip, r0, #1
    6150:	cmp	r0, #0
    6154:	bne	6054 <rb_crypt+0x834>
    6158:	ldr	r1, [pc, #3424]	; 6ec0 <rb_crypt+0x16a0>
    615c:	uxtb	r6, r2
    6160:	mov	r0, #7168	; 0x1c00
    6164:	mov	sl, #4096	; 0x1000
    6168:	uxtb	ip, lr
    616c:	add	r1, pc, r1
    6170:	add	r3, r1, r6, lsl #2
    6174:	ldr	r0, [r3, r0]
    6178:	str	r0, [sp, #36]	; 0x24
    617c:	ubfx	r8, r2, #8, #8
    6180:	mov	r0, #6144	; 0x1800
    6184:	add	r4, r1, r8, lsl #2
    6188:	ldr	r0, [r4, r0]
    618c:	str	r0, [sp, #32]
    6190:	ubfx	r5, r2, #16, #8
    6194:	mov	r0, #5120	; 0x1400
    6198:	add	r4, r1, r5, lsl #2
    619c:	ldr	r0, [r4, r0]
    61a0:	lsr	r4, r2, #24
    61a4:	add	r2, r1, r4, lsl #2
    61a8:	str	r0, [sp, #28]
    61ac:	ldr	r0, [r2, sl]
    61b0:	add	r2, r1, ip, lsl #2
    61b4:	str	r0, [sp, #24]
    61b8:	ldr	r0, [r2, #3072]	; 0xc00
    61bc:	str	r0, [sp, #20]
    61c0:	ubfx	r3, lr, #8, #8
    61c4:	add	r2, r1, r3, lsl #2
    61c8:	ldr	r0, [r2, #2048]	; 0x800
    61cc:	str	r0, [sp, #16]
    61d0:	ubfx	r2, lr, #16, #8
    61d4:	lsr	r0, lr, #24
    61d8:	ldr	r7, [r1, r0, lsl #2]
    61dc:	add	r1, r1, r2, lsl #2
    61e0:	ldr	r1, [r1, #1024]	; 0x400
    61e4:	str	r7, [sp, #12]
    61e8:	str	r1, [sp, #8]
    61ec:	ldr	r1, [pc, #3280]	; 6ec4 <rb_crypt+0x16a4>
    61f0:	add	r1, pc, r1
    61f4:	add	r7, r1, r6, lsl #2
    61f8:	mov	r6, #7168	; 0x1c00
    61fc:	add	r4, r1, r4, lsl #2
    6200:	add	r3, r1, r3, lsl #2
    6204:	add	r5, r1, r5, lsl #2
    6208:	ldr	r0, [r1, r0, lsl #2]
    620c:	ldr	r9, [r7, r6]
    6210:	add	r6, r1, r8, lsl #2
    6214:	mov	r7, #6144	; 0x1800
    6218:	ldr	r3, [r3, #2048]	; 0x800
    621c:	ldr	r4, [r4, sl]
    6220:	ldr	lr, [r6, r7]
    6224:	add	r7, r1, ip, lsl #2
    6228:	add	r1, r1, r2, lsl #2
    622c:	mov	r6, #5120	; 0x1400
    6230:	mov	r2, #0
    6234:	ldr	r1, [r1, #1024]	; 0x400
    6238:	ldr	r7, [r7, #3072]	; 0xc00
    623c:	ldr	r5, [r5, r6]
    6240:	ldr	r6, [pc, #3200]	; 6ec8 <rb_crypt+0x16a8>
    6244:	orr	r0, r1, r0
    6248:	add	r6, pc, r6
    624c:	orr	r0, r0, r3
    6250:	strb	r2, [r6, #13]
    6254:	orr	r0, r0, r7
    6258:	orr	r0, r0, r4
    625c:	orr	r0, r0, r5
    6260:	orr	r0, r0, lr
    6264:	orr	r1, r0, r9
    6268:	ldr	r0, [pc, #3164]	; 6ecc <rb_crypt+0x16ac>
    626c:	add	r0, pc, r0
    6270:	ldrb	r2, [r0, r1, lsr #26]
    6274:	strb	r2, [r6, #2]
    6278:	ubfx	r2, r1, #20, #6
    627c:	ldrb	r2, [r0, r2]
    6280:	strb	r2, [r6, #3]
    6284:	ubfx	r2, r1, #14, #6
    6288:	ldrb	r2, [r0, r2]
    628c:	strb	r2, [r6, #4]
    6290:	ubfx	r2, r1, #8, #6
    6294:	ldrb	r2, [r0, r2]
    6298:	strb	r2, [r6, #5]
    629c:	ubfx	r2, r1, #2, #6
    62a0:	ldr	r3, [sp, #8]
    62a4:	ldrb	r2, [r0, r2]
    62a8:	strb	r2, [r6, #6]
    62ac:	ldr	r2, [sp, #12]
    62b0:	orr	r2, r3, r2
    62b4:	ldr	r3, [sp, #16]
    62b8:	orr	r2, r2, r3
    62bc:	ldr	r3, [sp, #20]
    62c0:	orr	r2, r2, r3
    62c4:	ldr	r3, [sp, #24]
    62c8:	orr	r2, r2, r3
    62cc:	ldr	r3, [sp, #28]
    62d0:	orr	r2, r2, r3
    62d4:	ldr	r3, [sp, #32]
    62d8:	orr	r2, r2, r3
    62dc:	ldr	r3, [sp, #36]	; 0x24
    62e0:	orr	r2, r2, r3
    62e4:	ubfx	r3, r2, #22, #6
    62e8:	ldrb	r3, [r0, r3]
    62ec:	strb	r3, [r6, #8]
    62f0:	ubfx	r3, r2, #16, #6
    62f4:	ldrb	r3, [r0, r3]
    62f8:	strb	r3, [r6, #9]
    62fc:	ubfx	r3, r2, #10, #6
    6300:	ldrb	r3, [r0, r3]
    6304:	strb	r3, [r6, #10]
    6308:	ubfx	r3, r2, #4, #6
    630c:	ldrb	r3, [r0, r3]
    6310:	strb	r3, [r6, #11]
    6314:	and	r3, r2, #15
    6318:	lsr	r2, r2, #16
    631c:	ldrb	r3, [r0, r3, lsl #2]
    6320:	orr	r1, r2, r1, lsl #16
    6324:	strb	r3, [r6, #12]
    6328:	ubfx	r1, r1, #12, #6
    632c:	ldrb	r0, [r0, r1]
    6330:	strb	r0, [r6, #7]
    6334:	mov	r0, r6
    6338:	sub	sp, fp, #28
    633c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6340:	mov	r0, r8
    6344:	mov	r2, r5
    6348:	ldr	r3, [sp, #32]
    634c:	lsl	r1, r3, #3
    6350:	str	r1, [sp, #20]
    6354:	add	r1, sl, r2
    6358:	sub	r2, r3, r2
    635c:	str	sl, [sp, #24]
    6360:	bl	50a8 <memcpy@plt>
    6364:	add	r0, pc, #996	; 0x3e4
    6368:	add	r8, sp, #56	; 0x38
    636c:	vld1.64	{d16-d17}, [r0 :128]
    6370:	mov	r0, #24
    6374:	mov	sl, r8
    6378:	vst1.32	{d16-d17}, [sl], r0
    637c:	mov	r0, r4
    6380:	bl	5084 <strlen@plt>
    6384:	mov	r5, r0
    6388:	lsl	r0, r0, #3
    638c:	str	r0, [sp, #72]	; 0x48
    6390:	lsr	r0, r5, #29
    6394:	cmp	r5, #64	; 0x40
    6398:	str	r0, [sp, #76]	; 0x4c
    639c:	bcc	641c <rb_crypt+0xbfc>
    63a0:	mov	r1, #48	; 0x30
    63a4:	mov	r2, r4
    63a8:	add	r0, r4, #32
    63ac:	add	r3, r4, #16
    63b0:	vld1.8	{d16-d17}, [r2], r1
    63b4:	vld1.8	{d18-d19}, [r0]
    63b8:	vld1.8	{d20-d21}, [r3]
    63bc:	add	r0, sl, #32
    63c0:	vld1.8	{d22-d23}, [r2]
    63c4:	vst1.8	{d18-d19}, [r0]
    63c8:	add	r0, sl, #16
    63cc:	vst1.8	{d20-d21}, [r0]
    63d0:	mov	r0, sl
    63d4:	vst1.8	{d16-d17}, [r0], r1
    63d8:	mov	r1, sl
    63dc:	vst1.8	{d22-d23}, [r0]
    63e0:	add	r0, sp, #56	; 0x38
    63e4:	bl	7f1c <MD5Transform>
    63e8:	mov	r7, #64	; 0x40
    63ec:	cmp	r5, #128	; 0x80
    63f0:	bcc	641c <rb_crypt+0xbfc>
    63f4:	mov	r6, #64	; 0x40
    63f8:	add	r9, sp, #56	; 0x38
    63fc:	add	r1, r4, r6
    6400:	mov	r0, r9
    6404:	bl	7f1c <MD5Transform>
    6408:	add	r0, r6, #127	; 0x7f
    640c:	add	r7, r6, #64	; 0x40
    6410:	cmp	r0, r5
    6414:	mov	r6, r7
    6418:	bcc	63fc <rb_crypt+0xbdc>
    641c:	ldr	r0, [sp, #32]
    6420:	add	r1, r4, r7
    6424:	sub	r2, r5, r7
    6428:	lsr	r9, r0, #29
    642c:	mov	r0, sl
    6430:	bl	50a8 <memcpy@plt>
    6434:	ldr	r1, [sp, #72]	; 0x48
    6438:	ldr	r2, [sp, #20]
    643c:	ldr	r0, [sp, #76]	; 0x4c
    6440:	adds	r2, r1, r2
    6444:	str	r2, [sp, #72]	; 0x48
    6448:	ubfx	r1, r1, #3, #6
    644c:	ldr	r7, [sp, #32]
    6450:	addcs	r0, r0, #1
    6454:	mov	r2, #0
    6458:	strcs	r0, [sp, #76]	; 0x4c
    645c:	add	r0, r0, r9
    6460:	rsb	r5, r1, #64	; 0x40
    6464:	str	r0, [sp, #76]	; 0x4c
    6468:	add	r0, r8, r1
    646c:	add	r0, r0, #24
    6470:	cmp	r5, r7
    6474:	bhi	64e0 <rb_crypt+0xcc0>
    6478:	ldr	r1, [sp, #24]
    647c:	mov	r2, r5
    6480:	bl	50a8 <memcpy@plt>
    6484:	add	r0, sp, #56	; 0x38
    6488:	mov	r1, sl
    648c:	bl	7f1c <MD5Transform>
    6490:	add	r0, r5, #63	; 0x3f
    6494:	cmp	r0, r7
    6498:	bcs	64d8 <rb_crypt+0xcb8>
    649c:	ldr	r8, [sp, #24]
    64a0:	mov	r6, r7
    64a4:	add	r7, sp, #56	; 0x38
    64a8:	add	r1, r8, r5
    64ac:	mov	r0, r7
    64b0:	bl	7f1c <MD5Transform>
    64b4:	add	r0, r5, #127	; 0x7f
    64b8:	add	r2, r5, #64	; 0x40
    64bc:	cmp	r0, r6
    64c0:	mov	r5, r2
    64c4:	bcc	64a8 <rb_crypt+0xc88>
    64c8:	mov	r0, sl
    64cc:	mov	r7, r6
    64d0:	add	r8, sp, #56	; 0x38
    64d4:	b	64e0 <rb_crypt+0xcc0>
    64d8:	mov	r0, sl
    64dc:	mov	r2, r5
    64e0:	ldr	r1, [sp, #24]
    64e4:	add	r1, r1, r2
    64e8:	sub	r2, r7, r2
    64ec:	bl	50a8 <memcpy@plt>
    64f0:	mov	r0, r4
    64f4:	bl	5084 <strlen@plt>
    64f8:	ldr	r2, [sp, #72]	; 0x48
    64fc:	mov	r5, r0
    6500:	ldr	r0, [sp, #76]	; 0x4c
    6504:	add	r3, r2, r5, lsl #3
    6508:	cmp	r3, r2
    650c:	str	r3, [sp, #72]	; 0x48
    6510:	ubfx	r1, r2, #3, #6
    6514:	mov	r2, #0
    6518:	str	r9, [sp, #16]
    651c:	addcc	r0, r0, #1
    6520:	rsb	r6, r1, #64	; 0x40
    6524:	strcc	r0, [sp, #76]	; 0x4c
    6528:	add	r0, r0, r5, lsr #29
    652c:	cmp	r6, r5
    6530:	str	r0, [sp, #76]	; 0x4c
    6534:	add	r0, r8, r1
    6538:	add	r0, r0, #24
    653c:	bhi	659c <rb_crypt+0xd7c>
    6540:	mov	r1, r4
    6544:	mov	r2, r6
    6548:	bl	50a8 <memcpy@plt>
    654c:	add	r0, sp, #56	; 0x38
    6550:	mov	r1, sl
    6554:	bl	7f1c <MD5Transform>
    6558:	add	r0, r6, #63	; 0x3f
    655c:	cmp	r0, r5
    6560:	bcs	6594 <rb_crypt+0xd74>
    6564:	add	r7, sp, #56	; 0x38
    6568:	add	r1, r4, r6
    656c:	mov	r0, r7
    6570:	bl	7f1c <MD5Transform>
    6574:	add	r0, r6, #127	; 0x7f
    6578:	add	r2, r6, #64	; 0x40
    657c:	cmp	r0, r5
    6580:	mov	r6, r2
    6584:	bcc	6568 <rb_crypt+0xd48>
    6588:	ldr	r7, [sp, #32]
    658c:	mov	r0, sl
    6590:	b	659c <rb_crypt+0xd7c>
    6594:	mov	r0, sl
    6598:	mov	r2, r6
    659c:	add	r1, r4, r2
    65a0:	sub	r2, r5, r2
    65a4:	str	sl, [sp, #36]	; 0x24
    65a8:	bl	50a8 <memcpy@plt>
    65ac:	add	r8, sp, #56	; 0x38
    65b0:	add	r0, sp, #40	; 0x28
    65b4:	mov	r1, r8
    65b8:	bl	7d6c <MD5Final>
    65bc:	mov	r0, r4
    65c0:	bl	5084 <strlen@plt>
    65c4:	cmp	r0, #1
    65c8:	sub	sl, fp, #120	; 0x78
    65cc:	blt	66a0 <rb_crypt+0xe80>
    65d0:	mov	r5, r0
    65d4:	add	r9, sp, #40	; 0x28
    65d8:	ldr	r1, [fp, #-104]	; 0xffffff98
    65dc:	cmp	r5, #16
    65e0:	mov	r6, r5
    65e4:	ldr	r0, [fp, #-100]	; 0xffffff9c
    65e8:	movge	r6, #16
    65ec:	add	r2, r1, r6, lsl #3
    65f0:	cmp	r2, r6, lsl #3
    65f4:	str	r2, [fp, #-104]	; 0xffffff98
    65f8:	ubfx	r1, r1, #3, #6
    65fc:	mov	r2, #0
    6600:	addcc	r0, r0, #1
    6604:	rsb	r7, r1, #64	; 0x40
    6608:	strcc	r0, [fp, #-100]	; 0xffffff9c
    660c:	add	r0, r0, r6, lsr #29
    6610:	cmp	r7, r6
    6614:	str	r0, [fp, #-100]	; 0xffffff9c
    6618:	add	r0, sl, r1
    661c:	add	r0, r0, #24
    6620:	bls	662c <rb_crypt+0xe0c>
    6624:	ldr	r7, [sp, #32]
    6628:	b	668c <rb_crypt+0xe6c>
    662c:	mov	r1, r9
    6630:	mov	r2, r7
    6634:	bl	50a8 <memcpy@plt>
    6638:	ldr	r8, [sp, #28]
    663c:	mov	r0, sl
    6640:	mov	r1, r8
    6644:	bl	7f1c <MD5Transform>
    6648:	add	r0, r7, #63	; 0x3f
    664c:	cmp	r0, r6
    6650:	bcs	667c <rb_crypt+0xe5c>
    6654:	add	r1, r9, r7
    6658:	mov	r0, sl
    665c:	bl	7f1c <MD5Transform>
    6660:	add	r0, r7, #127	; 0x7f
    6664:	add	r2, r7, #64	; 0x40
    6668:	cmp	r0, r6
    666c:	mov	r7, r2
    6670:	bcc	6654 <rb_crypt+0xe34>
    6674:	ldr	r0, [sp, #28]
    6678:	b	6684 <rb_crypt+0xe64>
    667c:	mov	r0, r8
    6680:	mov	r2, r7
    6684:	ldr	r7, [sp, #32]
    6688:	add	r8, sp, #56	; 0x38
    668c:	add	r1, r9, r2
    6690:	sub	r2, r6, r2
    6694:	bl	50a8 <memcpy@plt>
    6698:	subs	r5, r5, #16
    669c:	bgt	65d8 <rb_crypt+0xdb8>
    66a0:	vmov.i32	q8, #0	; 0x00000000
    66a4:	add	r0, sp, #40	; 0x28
    66a8:	vst1.64	{d16-d17}, [r0]
    66ac:	mov	r0, r4
    66b0:	bl	5084 <strlen@plt>
    66b4:	ldr	r9, [sp, #16]
    66b8:	cmp	r0, #0
    66bc:	beq	67ec <rb_crypt+0xfcc>
    66c0:	mov	sl, r0
    66c4:	ldr	r2, [fp, #-104]	; 0xffffff98
    66c8:	ldr	r0, [fp, #-100]	; 0xffffff9c
    66cc:	tst	sl, #1
    66d0:	add	r1, r2, #8
    66d4:	str	r1, [fp, #-104]	; 0xffffff98
    66d8:	ubfx	r1, r2, #3, #6
    66dc:	bne	6710 <rb_crypt+0xef0>
    66e0:	cmn	r2, #8
    66e4:	sub	r6, fp, #120	; 0x78
    66e8:	rsb	r5, r1, #64	; 0x40
    66ec:	addcs	r0, r0, #1
    66f0:	strcs	r0, [fp, #-100]	; 0xffffff9c
    66f4:	str	r0, [fp, #-100]	; 0xffffff9c
    66f8:	add	r0, r6, r1
    66fc:	cmp	r5, #1
    6700:	add	r0, r0, #24
    6704:	bls	6760 <rb_crypt+0xf40>
    6708:	mov	r5, #0
    670c:	b	6780 <rb_crypt+0xf60>
    6710:	cmn	r2, #8
    6714:	sub	r9, fp, #120	; 0x78
    6718:	rsb	r5, r1, #64	; 0x40
    671c:	addcs	r0, r0, #1
    6720:	strcs	r0, [fp, #-100]	; 0xffffff9c
    6724:	str	r0, [fp, #-100]	; 0xffffff9c
    6728:	add	r0, r9, r1
    672c:	add	r1, sp, #40	; 0x28
    6730:	cmp	r5, #1
    6734:	add	r0, r0, #24
    6738:	bls	67a8 <rb_crypt+0xf88>
    673c:	ldr	r9, [sp, #16]
    6740:	mov	r5, #0
    6744:	b	67d0 <rb_crypt+0xfb0>
    6748:	nop	{0}
    674c:	nop	{0}
    6750:	.word	0x67452301
    6754:	.word	0xefcdab89
    6758:	.word	0x98badcfe
    675c:	.word	0x10325476
    6760:	mov	r1, r4
    6764:	mov	r2, r5
    6768:	bl	50a8 <memcpy@plt>
    676c:	mov	r0, r6
    6770:	ldr	r6, [sp, #28]
    6774:	mov	r1, r6
    6778:	bl	7f1c <MD5Transform>
    677c:	mov	r0, r6
    6780:	add	r1, r4, r5
    6784:	b	67d0 <rb_crypt+0xfb0>
    6788:	.word	0x00037fe8
    678c:	.word	0x00012bec
    6790:	.word	0x00037fc0
    6794:	.word	0x00026bb8
    6798:	.word	0x00026ba8
    679c:	.word	0x00026b8c
    67a0:	.word	0x00026b84
    67a4:	.word	0x00033e80
    67a8:	mov	r2, r5
    67ac:	bl	50a8 <memcpy@plt>
    67b0:	ldr	r6, [sp, #28]
    67b4:	mov	r0, r9
    67b8:	mov	r1, r6
    67bc:	bl	7f1c <MD5Transform>
    67c0:	ldr	r9, [sp, #16]
    67c4:	add	r0, sp, #40	; 0x28
    67c8:	add	r1, r0, r5
    67cc:	mov	r0, r6
    67d0:	rsb	r2, r5, #1
    67d4:	bl	50a8 <memcpy@plt>
    67d8:	mov	r1, #0
    67dc:	lsr	r0, sl, #1
    67e0:	cmp	r1, sl, lsr #1
    67e4:	mov	sl, r0
    67e8:	bne	66c4 <rb_crypt+0xea4>
    67ec:	ldr	r5, [pc, #1656]	; 6e6c <rb_crypt+0x164c>
    67f0:	ldr	r1, [pc, #1656]	; 6e70 <rb_crypt+0x1650>
    67f4:	mov	r2, #120	; 0x78
    67f8:	add	r5, pc, r5
    67fc:	add	r1, pc, r1
    6800:	mov	r0, r5
    6804:	bl	4f58 <rb_strlcpy@plt>
    6808:	ldr	r1, [pc, #1636]	; 6e74 <rb_crypt+0x1654>
    680c:	mov	r0, r5
    6810:	mov	r2, r7
    6814:	ldr	r1, [pc, r1]
    6818:	bl	5150 <strncat@plt>
    681c:	ldr	r1, [pc, #1620]	; 6e78 <rb_crypt+0x1658>
    6820:	mov	r0, r5
    6824:	mov	r2, #120	; 0x78
    6828:	add	r1, pc, r1
    682c:	bl	53e4 <rb_strlcat@plt>
    6830:	add	r6, sp, #40	; 0x28
    6834:	sub	r1, fp, #120	; 0x78
    6838:	mov	r0, r6
    683c:	bl	7d6c <MD5Final>
    6840:	ldr	r0, [pc, #1588]	; 6e7c <rb_crypt+0x165c>
    6844:	mov	r1, #0
    6848:	mov	sl, #0
    684c:	ldr	r0, [pc, r0]
    6850:	str	r0, [sp, #24]
    6854:	add	r0, r4, #32
    6858:	str	r0, [sp, #12]
    685c:	ldr	r0, [sp, #36]	; 0x24
    6860:	add	r2, r0, #32
    6864:	add	r0, r0, #16
    6868:	str	r2, [sp, #8]
    686c:	add	r2, r4, #16
    6870:	str	r2, [sp, #4]
    6874:	str	r0, [sp]
    6878:	sub	r0, pc, #304	; 0x130
    687c:	vld1.64	{d16-d17}, [r0 :128]
    6880:	mov	r0, r8
    6884:	vst1.32	{d16-d17}, [r0]!
    6888:	str	r1, [r0]
    688c:	ands	r0, sl, #1
    6890:	str	r1, [sp, #76]	; 0x4c
    6894:	str	r0, [sp, #28]
    6898:	beq	6960 <rb_crypt+0x1140>
    689c:	mov	r0, r4
    68a0:	bl	5084 <strlen@plt>
    68a4:	mov	r5, r0
    68a8:	lsl	r0, r0, #3
    68ac:	str	r0, [sp, #72]	; 0x48
    68b0:	lsr	r0, r5, #29
    68b4:	cmp	r5, #64	; 0x40
    68b8:	str	r0, [sp, #76]	; 0x4c
    68bc:	mov	r0, #0
    68c0:	bcc	693c <rb_crypt+0x111c>
    68c4:	mov	r0, r4
    68c8:	mov	r2, #48	; 0x30
    68cc:	ldr	r1, [sp, #12]
    68d0:	vld1.8	{d16-d17}, [r0], r2
    68d4:	vld1.8	{d18-d19}, [r1]
    68d8:	ldr	r1, [sp, #4]
    68dc:	vld1.8	{d22-d23}, [r0]
    68e0:	ldr	r0, [sp, #8]
    68e4:	vld1.8	{d20-d21}, [r1]
    68e8:	ldr	r1, [sp, #36]	; 0x24
    68ec:	vst1.8	{d18-d19}, [r0]
    68f0:	ldr	r0, [sp]
    68f4:	vst1.8	{d20-d21}, [r0]
    68f8:	mov	r0, r1
    68fc:	vst1.8	{d16-d17}, [r0], r2
    6900:	vst1.8	{d22-d23}, [r0]
    6904:	mov	r0, r8
    6908:	bl	7f1c <MD5Transform>
    690c:	mov	r0, #64	; 0x40
    6910:	cmp	r5, #128	; 0x80
    6914:	bcc	693c <rb_crypt+0x111c>
    6918:	mov	r7, #64	; 0x40
    691c:	add	r1, r4, r7
    6920:	mov	r0, r8
    6924:	bl	7f1c <MD5Transform>
    6928:	add	r1, r7, #127	; 0x7f
    692c:	add	r0, r7, #64	; 0x40
    6930:	cmp	r1, r5
    6934:	mov	r7, r0
    6938:	bcc	691c <rb_crypt+0x10fc>
    693c:	add	r1, r4, r0
    6940:	sub	r2, r5, r0
    6944:	ldr	r0, [sp, #36]	; 0x24
    6948:	bl	50a8 <memcpy@plt>
    694c:	ldr	r7, [sp, #32]
    6950:	b	6978 <rb_crypt+0x1158>
    6954:	.word	0x00032e04
    6958:	.word	0x00034d98
    695c:	.word	0x000131fc
    6960:	mov	r0, #128	; 0x80
    6964:	str	r1, [sp, #76]	; 0x4c
    6968:	vld1.64	{d16-d17}, [r6]
    696c:	str	r0, [sp, #72]	; 0x48
    6970:	ldr	r0, [sp, #36]	; 0x24
    6974:	vst1.64	{d16-d17}, [r0]
    6978:	movw	r0, #43691	; 0xaaab
    697c:	movt	r0, #43690	; 0xaaaa
    6980:	umull	r0, r1, sl, r0
    6984:	lsr	r0, r1, #1
    6988:	add	r0, r0, r0, lsl #1
    698c:	subs	r0, sl, r0
    6990:	beq	6a54 <rb_crypt+0x1234>
    6994:	ldr	r1, [sp, #72]	; 0x48
    6998:	ldr	r2, [sp, #20]
    699c:	ldr	r0, [sp, #76]	; 0x4c
    69a0:	adds	r2, r1, r2
    69a4:	addcs	r0, r0, #1
    69a8:	str	r2, [sp, #72]	; 0x48
    69ac:	ubfx	r1, r1, #3, #6
    69b0:	mov	r2, #0
    69b4:	strcs	r0, [sp, #76]	; 0x4c
    69b8:	add	r0, r0, r9
    69bc:	rsb	r5, r1, #64	; 0x40
    69c0:	str	r0, [sp, #76]	; 0x4c
    69c4:	add	r0, r8, r1
    69c8:	cmp	r5, r7
    69cc:	add	r0, r0, #24
    69d0:	bhi	6a44 <rb_crypt+0x1224>
    69d4:	ldr	r1, [sp, #24]
    69d8:	mov	r2, r5
    69dc:	bl	50a8 <memcpy@plt>
    69e0:	ldr	r9, [sp, #36]	; 0x24
    69e4:	mov	r0, r8
    69e8:	mov	r1, r9
    69ec:	bl	7f1c <MD5Transform>
    69f0:	add	r0, r5, #63	; 0x3f
    69f4:	cmp	r0, r7
    69f8:	bcs	6a38 <rb_crypt+0x1218>
    69fc:	mov	r9, r6
    6a00:	ldr	r6, [sp, #24]
    6a04:	add	r1, r6, r5
    6a08:	mov	r0, r8
    6a0c:	bl	7f1c <MD5Transform>
    6a10:	add	r0, r5, #127	; 0x7f
    6a14:	add	r2, r5, #64	; 0x40
    6a18:	cmp	r0, r7
    6a1c:	mov	r5, r2
    6a20:	bcc	6a04 <rb_crypt+0x11e4>
    6a24:	ldr	r1, [sp, #16]
    6a28:	ldr	r0, [sp, #36]	; 0x24
    6a2c:	mov	r6, r9
    6a30:	mov	r9, r1
    6a34:	b	6a44 <rb_crypt+0x1224>
    6a38:	mov	r0, r9
    6a3c:	ldr	r9, [sp, #16]
    6a40:	mov	r2, r5
    6a44:	ldr	r1, [sp, #24]
    6a48:	add	r1, r1, r2
    6a4c:	sub	r2, r7, r2
    6a50:	bl	50a8 <memcpy@plt>
    6a54:	movw	r0, #18725	; 0x4925
    6a58:	movt	r0, #9362	; 0x2492
    6a5c:	umull	r0, r1, sl, r0
    6a60:	sub	r0, sl, r1
    6a64:	add	r0, r1, r0, lsr #1
    6a68:	lsr	r1, r0, #2
    6a6c:	lsl	r1, r1, #3
    6a70:	sub	r0, r1, r0, lsr #2
    6a74:	subs	r0, sl, r0
    6a78:	beq	6b48 <rb_crypt+0x1328>
    6a7c:	mov	r0, r4
    6a80:	bl	5084 <strlen@plt>
    6a84:	ldr	r2, [sp, #72]	; 0x48
    6a88:	mov	r5, r0
    6a8c:	ldr	r0, [sp, #76]	; 0x4c
    6a90:	add	r3, r2, r5, lsl #3
    6a94:	cmp	r3, r2
    6a98:	str	r3, [sp, #72]	; 0x48
    6a9c:	ubfx	r1, r2, #3, #6
    6aa0:	mov	r2, #0
    6aa4:	addcc	r0, r0, #1
    6aa8:	rsb	r7, r1, #64	; 0x40
    6aac:	strcc	r0, [sp, #76]	; 0x4c
    6ab0:	add	r0, r0, r5, lsr #29
    6ab4:	cmp	r7, r5
    6ab8:	str	r0, [sp, #76]	; 0x4c
    6abc:	add	r0, r8, r1
    6ac0:	add	r0, r0, #24
    6ac4:	bls	6ad8 <rb_crypt+0x12b8>
    6ac8:	ldr	r7, [sp, #32]
    6acc:	b	6b3c <rb_crypt+0x131c>
    6ad0:	.word	0x00037d08
    6ad4:	.word	0x00035cd8
    6ad8:	mov	r1, r4
    6adc:	mov	r2, r7
    6ae0:	bl	50a8 <memcpy@plt>
    6ae4:	ldr	r6, [sp, #36]	; 0x24
    6ae8:	mov	r0, r8
    6aec:	mov	r1, r6
    6af0:	bl	7f1c <MD5Transform>
    6af4:	add	r0, r7, #63	; 0x3f
    6af8:	cmp	r0, r5
    6afc:	bcs	6b2c <rb_crypt+0x130c>
    6b00:	add	r1, r4, r7
    6b04:	mov	r0, r8
    6b08:	bl	7f1c <MD5Transform>
    6b0c:	add	r0, r7, #127	; 0x7f
    6b10:	add	r2, r7, #64	; 0x40
    6b14:	cmp	r0, r5
    6b18:	mov	r7, r2
    6b1c:	bcc	6b00 <rb_crypt+0x12e0>
    6b20:	ldr	r0, [sp, #36]	; 0x24
    6b24:	b	6b34 <rb_crypt+0x1314>
    6b28:	.word	0x00037cd4
    6b2c:	mov	r0, r6
    6b30:	mov	r2, r7
    6b34:	ldr	r7, [sp, #32]
    6b38:	add	r6, sp, #40	; 0x28
    6b3c:	add	r1, r4, r2
    6b40:	sub	r2, r5, r2
    6b44:	bl	50a8 <memcpy@plt>
    6b48:	ldr	r0, [sp, #28]
    6b4c:	cmp	r0, #0
    6b50:	beq	6ba4 <rb_crypt+0x1384>
    6b54:	ldr	r2, [sp, #72]	; 0x48
    6b58:	ldr	r0, [sp, #76]	; 0x4c
    6b5c:	add	r1, r2, #128	; 0x80
    6b60:	cmn	r2, #128	; 0x80
    6b64:	str	r1, [sp, #72]	; 0x48
    6b68:	ubfx	r1, r2, #3, #6
    6b6c:	addcs	r0, r0, #1
    6b70:	strcs	r0, [sp, #76]	; 0x4c
    6b74:	str	r0, [sp, #76]	; 0x4c
    6b78:	add	r0, r8, r1
    6b7c:	rsb	r5, r1, #64	; 0x40
    6b80:	add	r0, r0, #24
    6b84:	cmp	r5, #16
    6b88:	bls	6c00 <rb_crypt+0x13e0>
    6b8c:	mov	r5, #0
    6b90:	mov	r1, r6
    6b94:	rsb	r2, r5, #16
    6b98:	b	6ca8 <rb_crypt+0x1488>
    6b9c:	.word	0x00037d20
    6ba0:	.word	0x00037d1c
    6ba4:	mov	r0, r4
    6ba8:	bl	5084 <strlen@plt>
    6bac:	ldr	r2, [sp, #72]	; 0x48
    6bb0:	mov	r5, r0
    6bb4:	ldr	r0, [sp, #76]	; 0x4c
    6bb8:	add	r3, r2, r5, lsl #3
    6bbc:	cmp	r3, r2
    6bc0:	str	r3, [sp, #72]	; 0x48
    6bc4:	ubfx	r1, r2, #3, #6
    6bc8:	mov	r2, #0
    6bcc:	addcc	r0, r0, #1
    6bd0:	rsb	r7, r1, #64	; 0x40
    6bd4:	strcc	r0, [sp, #76]	; 0x4c
    6bd8:	add	r0, r0, r5, lsr #29
    6bdc:	cmp	r7, r5
    6be0:	str	r0, [sp, #76]	; 0x4c
    6be4:	add	r0, r8, r1
    6be8:	add	r0, r0, #24
    6bec:	bls	6c38 <rb_crypt+0x1418>
    6bf0:	ldr	r7, [sp, #32]
    6bf4:	b	6ca0 <rb_crypt+0x1480>
    6bf8:	.word	0x00037cf4
    6bfc:	.word	0x00037ce4
    6c00:	mov	r1, r6
    6c04:	mov	r2, r5
    6c08:	bl	50a8 <memcpy@plt>
    6c0c:	ldr	r6, [sp, #36]	; 0x24
    6c10:	mov	r0, r8
    6c14:	mov	r1, r6
    6c18:	bl	7f1c <MD5Transform>
    6c1c:	add	r0, sp, #40	; 0x28
    6c20:	rsb	r2, r5, #16
    6c24:	add	r1, r0, r5
    6c28:	mov	r0, r6
    6c2c:	add	r6, sp, #40	; 0x28
    6c30:	b	6ca8 <rb_crypt+0x1488>
    6c34:	.word	0x00037ca8
    6c38:	mov	r1, r4
    6c3c:	mov	r2, r7
    6c40:	bl	50a8 <memcpy@plt>
    6c44:	ldr	r6, [sp, #36]	; 0x24
    6c48:	mov	r0, r8
    6c4c:	mov	r1, r6
    6c50:	bl	7f1c <MD5Transform>
    6c54:	add	r0, r7, #63	; 0x3f
    6c58:	cmp	r0, r5
    6c5c:	bcs	6c90 <rb_crypt+0x1470>
    6c60:	add	r1, r4, r7
    6c64:	mov	r0, r8
    6c68:	bl	7f1c <MD5Transform>
    6c6c:	add	r0, r7, #127	; 0x7f
    6c70:	add	r2, r7, #64	; 0x40
    6c74:	cmp	r0, r5
    6c78:	mov	r7, r2
    6c7c:	bcc	6c60 <rb_crypt+0x1440>
    6c80:	ldr	r0, [sp, #36]	; 0x24
    6c84:	b	6c98 <rb_crypt+0x1478>
    6c88:	.word	0x000126b8
    6c8c:	.word	0x00012694
    6c90:	mov	r0, r6
    6c94:	mov	r2, r7
    6c98:	ldr	r7, [sp, #32]
    6c9c:	add	r6, sp, #40	; 0x28
    6ca0:	add	r1, r4, r2
    6ca4:	sub	r2, r5, r2
    6ca8:	bl	50a8 <memcpy@plt>
    6cac:	mov	r0, r6
    6cb0:	mov	r1, r8
    6cb4:	bl	7d6c <MD5Final>
    6cb8:	add	sl, sl, #1
    6cbc:	mov	r1, #0
    6cc0:	cmp	sl, #1000	; 0x3e8
    6cc4:	bne	6878 <rb_crypt+0x1058>
    6cc8:	ldr	r6, [pc, #432]	; 6e80 <rb_crypt+0x1660>
    6ccc:	add	r6, pc, r6
    6cd0:	mov	r0, r6
    6cd4:	bl	5084 <strlen@plt>
    6cd8:	ldrb	r3, [sp, #52]	; 0x34
    6cdc:	ldr	r1, [pc, #416]	; 6e84 <rb_crypt+0x1664>
    6ce0:	ldrb	r7, [sp, #40]	; 0x28
    6ce4:	ldrb	lr, [sp, #41]	; 0x29
    6ce8:	ldrb	r5, [sp, #46]	; 0x2e
    6cec:	ldrb	ip, [sp, #42]	; 0x2a
    6cf0:	add	r1, pc, r1
    6cf4:	and	r2, r3, #63	; 0x3f
    6cf8:	ldrb	r2, [r1, r2]
    6cfc:	ldrb	r4, [r1, r7, lsr #2]
    6d00:	strb	r2, [r6, r0]
    6d04:	add	r0, r6, r0
    6d08:	strb	r4, [r0, #3]
    6d0c:	ldrb	r4, [r1, lr, lsr #2]
    6d10:	strb	r4, [r0, #7]
    6d14:	ldrb	r4, [sp, #53]	; 0x35
    6d18:	and	r2, r4, #63	; 0x3f
    6d1c:	ldrb	r2, [r1, r2]
    6d20:	strb	r2, [r0, #4]
    6d24:	orr	r2, r3, r5, lsl #8
    6d28:	ubfx	r2, r2, #6, #6
    6d2c:	ldrb	r2, [r1, r2]
    6d30:	strb	r2, [r0, #1]
    6d34:	ldrb	r2, [sp, #47]	; 0x2f
    6d38:	orr	r3, r4, r2, lsl #8
    6d3c:	lsl	r2, r2, #8
    6d40:	ubfx	r3, r3, #6, #6
    6d44:	orr	r2, r2, lr, lsl #16
    6d48:	ldrb	r3, [r1, r3]
    6d4c:	strb	r3, [r0, #5]
    6d50:	lsl	r3, r5, #8
    6d54:	orr	r3, r3, r7, lsl #16
    6d58:	ubfx	r3, r3, #12, #6
    6d5c:	ldrb	r3, [r1, r3]
    6d60:	strb	r3, [r0, #2]
    6d64:	ubfx	r2, r2, #12, #6
    6d68:	ldrb	r3, [sp, #54]	; 0x36
    6d6c:	ldrb	r2, [r1, r2]
    6d70:	strb	r2, [r0, #6]
    6d74:	ldrb	r2, [sp, #48]	; 0x30
    6d78:	orr	r7, r3, r2, lsl #8
    6d7c:	and	r3, r3, #63	; 0x3f
    6d80:	lsl	r2, r2, #8
    6d84:	ubfx	r7, r7, #6, #6
    6d88:	ldrb	r3, [r1, r3]
    6d8c:	orr	r2, r2, ip, lsl #16
    6d90:	ldrb	r7, [r1, r7]
    6d94:	strb	r7, [r0, #9]
    6d98:	strb	r3, [r0, #8]
    6d9c:	ubfx	r2, r2, #12, #6
    6da0:	ldrb	r3, [sp, #43]	; 0x2b
    6da4:	ldrb	r7, [sp, #45]	; 0x2d
    6da8:	ldrb	r2, [r1, r2]
    6dac:	ldrb	r5, [r1, r3, lsr #2]
    6db0:	strb	r2, [r0, #10]
    6db4:	ldrb	r2, [r1, ip, lsr #2]
    6db8:	ldrb	ip, [sp, #44]	; 0x2c
    6dbc:	strb	r2, [r0, #11]
    6dc0:	strb	r5, [r0, #15]
    6dc4:	ldrb	r5, [sp, #55]	; 0x37
    6dc8:	ldrb	r2, [sp, #49]	; 0x31
    6dcc:	and	r4, r5, #63	; 0x3f
    6dd0:	orr	r5, r5, r2, lsl #8
    6dd4:	ldrb	r4, [r1, r4]
    6dd8:	strb	r4, [r0, #12]
    6ddc:	and	r4, r7, #63	; 0x3f
    6de0:	ldrb	r4, [r1, r4]
    6de4:	strb	r4, [r0, #16]
    6de8:	ubfx	r5, r5, #6, #6
    6dec:	ldrb	r5, [r1, r5]
    6df0:	strb	r5, [r0, #13]
    6df4:	ldrb	r5, [sp, #50]	; 0x32
    6df8:	orr	r7, r7, r5, lsl #8
    6dfc:	ubfx	r7, r7, #6, #6
    6e00:	ldrb	r7, [r1, r7]
    6e04:	strb	r7, [r0, #17]
    6e08:	lsl	r7, r2, #8
    6e0c:	ldrb	r2, [r1, ip, lsr #2]
    6e10:	orr	r3, r7, r3, lsl #16
    6e14:	ubfx	r3, r3, #12, #6
    6e18:	ldrb	r3, [r1, r3]
    6e1c:	strb	r3, [r0, #14]
    6e20:	lsl	r3, r5, #8
    6e24:	orr	r3, r3, ip, lsl #16
    6e28:	ubfx	r3, r3, #12, #6
    6e2c:	ldrb	r3, [r1, r3]
    6e30:	strb	r3, [r0, #18]
    6e34:	strb	r2, [r0, #19]
    6e38:	ldrb	r2, [sp, #51]	; 0x33
    6e3c:	ldrb	r3, [r1, r2, lsr #6]
    6e40:	and	r2, r2, #63	; 0x3f
    6e44:	ldrb	r1, [r1, r2]
    6e48:	strb	r3, [r0, #21]
    6e4c:	strb	r1, [r0, #20]
    6e50:	add	r1, r0, #22
    6e54:	ldr	r2, [pc, #44]	; 6e88 <rb_crypt+0x1668>
    6e58:	add	r2, pc, r2
    6e5c:	str	r1, [r2]
    6e60:	mov	r1, #0
    6e64:	strb	r1, [r0, #22]
    6e68:	b	6334 <rb_crypt+0xb14>
    6e6c:	.word	0x00037078
    6e70:	.word	0x00011c7c
    6e74:	.word	0x00037054
    6e78:	.word	0x00011c52
    6e7c:	.word	0x0003701c
    6e80:	.word	0x00036ba4
    6e84:	.word	0x00011747
    6e88:	.word	0x00036a90
    6e8c:	.word	0x000265a4
    6e90:	.word	0x000265b8
    6e94:	.word	0x000265a4
    6e98:	.word	0x00026574
    6e9c:	.word	0x0002656c
    6ea0:	.word	0x0002c834
    6ea4:	.word	0x0002c824
    6ea8:	.word	0x0002a7e4
    6eac:	.word	0x0002a7d4
    6eb0:	.word	0x000266a0
    6eb4:	.word	0x0003679c
    6eb8:	.word	0x000377d8
    6ebc:	.word	0x00037740
    6ec0:	.word	0x0003065c
    6ec4:	.word	0x0002e5d8
    6ec8:	.word	0x00026258
    6ecc:	.word	0x000121cb

00006ed0 <rb_des_init>:
    6ed0:	ldr	r0, [pc, #3492]	; 7c7c <rb_des_init+0xdac>
    6ed4:	add	r0, pc, r0
    6ed8:	ldrb	r0, [r0]
    6edc:	cmp	r0, #0
    6ee0:	bxne	lr
    6ee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ee8:	add	fp, sp, #28
    6eec:	sub	sp, sp, #92	; 0x5c
    6ef0:	ldr	r0, [pc, #3464]	; 7c80 <rb_des_init+0xdb0>
    6ef4:	mov	r2, #0
    6ef8:	mov	r3, #0
    6efc:	add	r0, pc, r0
    6f00:	str	r2, [r0]
    6f04:	ldr	r0, [pc, #3448]	; 7c84 <rb_des_init+0xdb4>
    6f08:	add	r0, pc, r0
    6f0c:	str	r2, [r0]
    6f10:	ldr	r0, [pc, #3440]	; 7c88 <rb_des_init+0xdb8>
    6f14:	add	r0, pc, r0
    6f18:	str	r2, [r0]
    6f1c:	ldr	r0, [pc, #3432]	; 7c8c <rb_des_init+0xdbc>
    6f20:	add	r0, pc, r0
    6f24:	str	r2, [r0]
    6f28:	ldr	r1, [pc, #3424]	; 7c90 <rb_des_init+0xdc0>
    6f2c:	ldr	r0, [pc, #3424]	; 7c94 <rb_des_init+0xdc4>
    6f30:	add	r1, pc, r1
    6f34:	add	r0, pc, r0
    6f38:	and	r6, r2, #16
    6f3c:	and	r7, r3, #32
    6f40:	add	r2, r2, #16
    6f44:	orr	r7, r6, r7
    6f48:	ubfx	r6, r3, #1, #4
    6f4c:	orr	r7, r7, r6
    6f50:	ldrb	r7, [r1, r7]
    6f54:	strb	r7, [r0, r3]
    6f58:	add	r3, r3, #1
    6f5c:	cmp	r3, #64	; 0x40
    6f60:	bne	6f38 <rb_des_init+0x68>
    6f64:	mov	r2, #0
    6f68:	mov	r3, #0
    6f6c:	and	r5, r2, #16
    6f70:	and	r6, r3, #32
    6f74:	add	r2, r2, #16
    6f78:	add	r7, r0, r3
    6f7c:	orr	r6, r5, r6
    6f80:	ubfx	r5, r3, #1, #4
    6f84:	add	r3, r3, #1
    6f88:	cmp	r2, #1024	; 0x400
    6f8c:	orr	r6, r6, r5
    6f90:	add	r6, r1, r6
    6f94:	ldrb	r6, [r6, #64]	; 0x40
    6f98:	strb	r6, [r7, #64]	; 0x40
    6f9c:	bne	6f6c <rb_des_init+0x9c>
    6fa0:	mov	r2, #0
    6fa4:	mov	r3, #0
    6fa8:	and	r5, r2, #16
    6fac:	and	r6, r3, #32
    6fb0:	add	r2, r2, #16
    6fb4:	add	r7, r0, r3
    6fb8:	orr	r6, r5, r6
    6fbc:	ubfx	r5, r3, #1, #4
    6fc0:	add	r3, r3, #1
    6fc4:	cmp	r2, #1024	; 0x400
    6fc8:	orr	r6, r6, r5
    6fcc:	add	r6, r1, r6
    6fd0:	ldrb	r6, [r6, #128]	; 0x80
    6fd4:	strb	r6, [r7, #128]	; 0x80
    6fd8:	bne	6fa8 <rb_des_init+0xd8>
    6fdc:	mov	r2, #0
    6fe0:	mov	r3, #0
    6fe4:	and	r5, r2, #16
    6fe8:	and	r6, r3, #32
    6fec:	add	r2, r2, #16
    6ff0:	add	r7, r0, r3
    6ff4:	orr	r6, r5, r6
    6ff8:	ubfx	r5, r3, #1, #4
    6ffc:	add	r3, r3, #1
    7000:	cmp	r2, #1024	; 0x400
    7004:	orr	r6, r6, r5
    7008:	add	r6, r1, r6
    700c:	ldrb	r6, [r6, #192]	; 0xc0
    7010:	strb	r6, [r7, #192]	; 0xc0
    7014:	bne	6fe4 <rb_des_init+0x114>
    7018:	mov	r2, #0
    701c:	mov	r3, #0
    7020:	and	r5, r2, #16
    7024:	and	r6, r3, #32
    7028:	add	r2, r2, #16
    702c:	add	r7, r0, r3
    7030:	orr	r6, r5, r6
    7034:	ubfx	r5, r3, #1, #4
    7038:	add	r3, r3, #1
    703c:	cmp	r2, #1024	; 0x400
    7040:	orr	r6, r6, r5
    7044:	add	r6, r1, r6
    7048:	ldrb	r6, [r6, #256]	; 0x100
    704c:	strb	r6, [r7, #256]	; 0x100
    7050:	bne	7020 <rb_des_init+0x150>
    7054:	mov	r2, #0
    7058:	mov	r3, #0
    705c:	and	r5, r2, #16
    7060:	and	r6, r3, #32
    7064:	add	r2, r2, #16
    7068:	add	r7, r0, r3
    706c:	orr	r6, r5, r6
    7070:	ubfx	r5, r3, #1, #4
    7074:	add	r3, r3, #1
    7078:	cmp	r2, #1024	; 0x400
    707c:	orr	r6, r6, r5
    7080:	add	r6, r1, r6
    7084:	ldrb	r6, [r6, #320]	; 0x140
    7088:	strb	r6, [r7, #320]	; 0x140
    708c:	bne	705c <rb_des_init+0x18c>
    7090:	mov	r2, #0
    7094:	mov	r3, #0
    7098:	and	r5, r2, #16
    709c:	and	r6, r3, #32
    70a0:	add	r2, r2, #16
    70a4:	add	r7, r0, r3
    70a8:	orr	r6, r5, r6
    70ac:	ubfx	r5, r3, #1, #4
    70b0:	add	r3, r3, #1
    70b4:	cmp	r2, #1024	; 0x400
    70b8:	orr	r6, r6, r5
    70bc:	add	r6, r1, r6
    70c0:	ldrb	r6, [r6, #384]	; 0x180
    70c4:	strb	r6, [r7, #384]	; 0x180
    70c8:	bne	7098 <rb_des_init+0x1c8>
    70cc:	mov	r2, #0
    70d0:	mov	r3, #0
    70d4:	and	r5, r2, #16
    70d8:	and	r6, r3, #32
    70dc:	add	r2, r2, #16
    70e0:	add	r7, r0, r3
    70e4:	orr	r6, r5, r6
    70e8:	ubfx	r5, r3, #1, #4
    70ec:	add	r3, r3, #1
    70f0:	cmp	r2, #1024	; 0x400
    70f4:	orr	r6, r6, r5
    70f8:	add	r6, r1, r6
    70fc:	ldrb	r6, [r6, #448]	; 0x1c0
    7100:	strb	r6, [r7, #448]	; 0x1c0
    7104:	bne	70d4 <rb_des_init+0x204>
    7108:	ldr	r1, [pc, #2952]	; 7c98 <rb_des_init+0xdc8>
    710c:	mov	r2, #0
    7110:	add	r1, pc, r1
    7114:	ldrb	r3, [r0, r2]
    7118:	lsl	r7, r2, #6
    711c:	mov	r6, #0
    7120:	lsl	r3, r3, #4
    7124:	add	r4, r0, r6
    7128:	orr	r5, r6, r7
    712c:	add	r6, r6, #1
    7130:	ldrb	r4, [r4, #64]	; 0x40
    7134:	cmp	r6, #64	; 0x40
    7138:	orr	r4, r3, r4
    713c:	strb	r4, [r1, r5]
    7140:	bne	7124 <rb_des_init+0x254>
    7144:	add	r2, r2, #1
    7148:	cmp	r2, #64	; 0x40
    714c:	bne	7114 <rb_des_init+0x244>
    7150:	mov	ip, #0
    7154:	mov	r3, #4096	; 0x1000
    7158:	add	r7, r0, ip
    715c:	lsl	r6, ip, #6
    7160:	mov	r5, #0
    7164:	ldrb	r7, [r7, #128]	; 0x80
    7168:	lsl	r7, r7, #4
    716c:	add	r2, r0, r5
    7170:	orr	r4, r5, r6
    7174:	add	r5, r5, #1
    7178:	ldrb	r2, [r2, #192]	; 0xc0
    717c:	cmp	r5, #64	; 0x40
    7180:	add	r4, r1, r4
    7184:	orr	r2, r7, r2
    7188:	strb	r2, [r4, r3]
    718c:	bne	716c <rb_des_init+0x29c>
    7190:	add	ip, ip, #1
    7194:	cmp	ip, #64	; 0x40
    7198:	bne	7158 <rb_des_init+0x288>
    719c:	mov	ip, #0
    71a0:	mov	r3, #8192	; 0x2000
    71a4:	add	r7, r0, ip
    71a8:	lsl	r6, ip, #6
    71ac:	mov	r5, #0
    71b0:	ldrb	r7, [r7, #256]	; 0x100
    71b4:	lsl	r7, r7, #4
    71b8:	add	r2, r0, r5
    71bc:	orr	r4, r5, r6
    71c0:	add	r5, r5, #1
    71c4:	ldrb	r2, [r2, #320]	; 0x140
    71c8:	cmp	r5, #64	; 0x40
    71cc:	add	r4, r1, r4
    71d0:	orr	r2, r7, r2
    71d4:	strb	r2, [r4, r3]
    71d8:	bne	71b8 <rb_des_init+0x2e8>
    71dc:	add	ip, ip, #1
    71e0:	cmp	ip, #64	; 0x40
    71e4:	bne	71a4 <rb_des_init+0x2d4>
    71e8:	mov	ip, #0
    71ec:	mov	r3, #12288	; 0x3000
    71f0:	add	r7, r0, ip
    71f4:	lsl	r6, ip, #6
    71f8:	mov	r5, #0
    71fc:	ldrb	r7, [r7, #384]	; 0x180
    7200:	lsl	r7, r7, #4
    7204:	add	r2, r0, r5
    7208:	orr	r4, r5, r6
    720c:	add	r5, r5, #1
    7210:	ldrb	r2, [r2, #448]	; 0x1c0
    7214:	cmp	r5, #64	; 0x40
    7218:	add	r4, r1, r4
    721c:	orr	r2, r7, r2
    7220:	strb	r2, [r4, r3]
    7224:	bne	7204 <rb_des_init+0x334>
    7228:	add	ip, ip, #1
    722c:	cmp	ip, #64	; 0x40
    7230:	bne	71f0 <rb_des_init+0x320>
    7234:	ldr	r4, [pc, #2656]	; 7c9c <rb_des_init+0xdcc>
    7238:	mov	r1, #255	; 0xff
    723c:	mov	r2, #64	; 0x40
    7240:	add	r4, pc, r4
    7244:	mov	r0, r4
    7248:	bl	4ee0 <memset@plt>
    724c:	ldr	r1, [pc, #2636]	; 7ca0 <rb_des_init+0xdd0>
    7250:	ldr	r5, [pc, #2636]	; 7ca4 <rb_des_init+0xdd4>
    7254:	ldr	r7, [pc, #2636]	; 7ca8 <rb_des_init+0xdd8>
    7258:	mov	r0, #0
    725c:	add	r1, pc, r1
    7260:	add	r5, pc, r5
    7264:	add	r7, pc, r7
    7268:	ldrb	r2, [r1, r0]
    726c:	sub	r2, r2, #1
    7270:	strb	r2, [r5, r0]
    7274:	uxtb	r2, r2
    7278:	strb	r0, [r7, r2]
    727c:	add	r0, r0, #1
    7280:	cmp	r0, #64	; 0x40
    7284:	bne	7268 <rb_des_init+0x398>
    7288:	ldr	r6, [pc, #2588]	; 7cac <rb_des_init+0xddc>
    728c:	mov	r1, #255	; 0xff
    7290:	mov	r2, #56	; 0x38
    7294:	add	r6, pc, r6
    7298:	mov	r0, r6
    729c:	bl	4ee0 <memset@plt>
    72a0:	ldr	r1, [pc, #2568]	; 7cb0 <rb_des_init+0xde0>
    72a4:	mov	r0, #0
    72a8:	add	r1, pc, r1
    72ac:	ldrb	r2, [r1, r0]
    72b0:	add	r2, r4, r2
    72b4:	strb	r0, [r2, #-1]
    72b8:	add	r0, r0, #1
    72bc:	cmp	r0, #56	; 0x38
    72c0:	bne	72ac <rb_des_init+0x3dc>
    72c4:	ldr	r1, [pc, #2536]	; 7cb4 <rb_des_init+0xde4>
    72c8:	mov	r0, #0
    72cc:	add	r1, pc, r1
    72d0:	ldrb	r2, [r1, r0]
    72d4:	add	r2, r6, r2
    72d8:	strb	r0, [r2, #-1]
    72dc:	add	r0, r0, #1
    72e0:	cmp	r0, #48	; 0x30
    72e4:	bne	72d0 <rb_des_init+0x400>
    72e8:	ldr	r8, [pc, #2504]	; 7cb8 <rb_des_init+0xde8>
    72ec:	ldr	r1, [pc, #2504]	; 7cbc <rb_des_init+0xdec>
    72f0:	mov	r0, #0
    72f4:	add	r1, pc, r1
    72f8:	add	r8, pc, r8
    72fc:	str	r1, [fp, #-44]	; 0xffffffd4
    7300:	ldr	r1, [pc, #2488]	; 7cc0 <rb_des_init+0xdf0>
    7304:	add	r1, pc, r1
    7308:	str	r1, [fp, #-48]	; 0xffffffd0
    730c:	ldr	r1, [pc, #2480]	; 7cc4 <rb_des_init+0xdf4>
    7310:	add	r1, pc, r1
    7314:	str	r1, [fp, #-52]	; 0xffffffcc
    7318:	lsl	r1, r0, #3
    731c:	str	r8, [sp, #4]
    7320:	str	r5, [fp, #-32]	; 0xffffffe0
    7324:	str	r7, [fp, #-36]	; 0xffffffdc
    7328:	str	r0, [fp, #-56]	; 0xffffffc8
    732c:	str	r1, [sp, #60]	; 0x3c
    7330:	mov	r1, #0
    7334:	ldr	r2, [pc, #2444]	; 7cc8 <rb_des_init+0xdf8>
    7338:	mov	r3, #0
    733c:	mov	r6, #0
    7340:	mov	lr, #0
    7344:	add	r2, pc, r2
    7348:	add	r2, r2, r0, lsl #10
    734c:	str	r3, [r2, r1, lsl #2]!
    7350:	str	r2, [fp, #-40]	; 0xffffffd8
    7354:	ldr	r2, [pc, #2416]	; 7ccc <rb_des_init+0xdfc>
    7358:	add	r2, pc, r2
    735c:	add	r9, r2, r0, lsl #10
    7360:	str	r3, [r9, r1, lsl #2]!
    7364:	ldr	r2, [pc, #2404]	; 7cd0 <rb_des_init+0xe00>
    7368:	add	r2, pc, r2
    736c:	add	sl, r2, r0, lsl #10
    7370:	str	r3, [sl, r1, lsl #2]!
    7374:	ldr	r2, [pc, #2392]	; 7cd4 <rb_des_init+0xe04>
    7378:	add	r2, pc, r2
    737c:	add	ip, r2, r0, lsl #10
    7380:	mov	r0, #0
    7384:	mov	r2, #0
    7388:	str	r3, [ip, r1, lsl #2]!
    738c:	ldr	r4, [pc, #2372]	; 7cd8 <rb_des_init+0xe08>
    7390:	add	r4, pc, r4
    7394:	ldrb	r5, [r4, lr]
    7398:	tst	r1, r5
    739c:	beq	741c <rb_des_init+0x54c>
    73a0:	ldrb	r8, [r7, lr]
    73a4:	cmp	r8, #31
    73a8:	bhi	73c8 <rb_des_init+0x4f8>
    73ac:	ldr	r5, [pc, #2344]	; 7cdc <rb_des_init+0xe0c>
    73b0:	ldr	r4, [fp, #-40]	; 0xffffffd8
    73b4:	add	r5, pc, r5
    73b8:	ldr	r5, [r5, r8, lsl #2]
    73bc:	orr	r0, r0, r5
    73c0:	str	r0, [r4]
    73c4:	b	73e0 <rb_des_init+0x510>
    73c8:	ldr	r4, [pc, #2320]	; 7ce0 <rb_des_init+0xe10>
    73cc:	add	r4, pc, r4
    73d0:	add	r5, r4, r8, lsl #2
    73d4:	ldr	r5, [r5, #-128]	; 0xffffff80
    73d8:	orr	r2, r2, r5
    73dc:	str	r2, [r9]
    73e0:	ldr	r5, [fp, #-32]	; 0xffffffe0
    73e4:	ldr	r7, [fp, #-36]	; 0xffffffdc
    73e8:	ldrb	r5, [r5, lr]
    73ec:	ldr	r4, [pc, #2288]	; 7ce4 <rb_des_init+0xe14>
    73f0:	add	r4, pc, r4
    73f4:	cmp	r5, #31
    73f8:	bhi	740c <rb_des_init+0x53c>
    73fc:	ldr	r5, [r4, r5, lsl #2]
    7400:	orr	r3, r3, r5
    7404:	str	r3, [sl]
    7408:	b	741c <rb_des_init+0x54c>
    740c:	add	r5, r4, r5, lsl #2
    7410:	ldr	r5, [r5, #-128]	; 0xffffff80
    7414:	orr	r6, r6, r5
    7418:	str	r6, [ip]
    741c:	add	lr, lr, #1
    7420:	cmp	lr, #8
    7424:	bne	738c <rb_des_init+0x4bc>
    7428:	ldr	r0, [fp, #-56]	; 0xffffffc8
    742c:	add	r1, r1, #1
    7430:	cmp	r1, #256	; 0x100
    7434:	bne	7334 <rb_des_init+0x464>
    7438:	ldr	r1, [sp, #60]	; 0x3c
    743c:	mov	ip, #0
    7440:	orr	r2, r1, #6
    7444:	str	r2, [sp, #56]	; 0x38
    7448:	orr	r2, r1, #5
    744c:	str	r2, [sp, #52]	; 0x34
    7450:	orr	r2, r1, #4
    7454:	str	r2, [sp, #48]	; 0x30
    7458:	orr	r2, r1, #3
    745c:	str	r2, [sp, #44]	; 0x2c
    7460:	orr	r2, r1, #2
    7464:	orr	r1, r1, #1
    7468:	str	r1, [sp, #36]	; 0x24
    746c:	rsb	r1, r0, r0, lsl #3
    7470:	str	r2, [sp, #40]	; 0x28
    7474:	add	r0, r1, #6
    7478:	str	r1, [sp, #32]
    747c:	str	r0, [sp, #28]
    7480:	add	r0, r1, #5
    7484:	str	r0, [sp, #24]
    7488:	add	r0, r1, #4
    748c:	str	r0, [sp, #20]
    7490:	add	r0, r1, #3
    7494:	str	r0, [sp, #16]
    7498:	add	r0, r1, #2
    749c:	str	r0, [sp, #12]
    74a0:	mov	r0, r1
    74a4:	add	r0, r1, #1
    74a8:	str	r0, [sp, #8]
    74ac:	ldr	r8, [pc, #2100]	; 7ce8 <rb_des_init+0xe18>
    74b0:	ldr	r9, [pc, #2100]	; 7cec <rb_des_init+0xe1c>
    74b4:	add	r8, pc, r8
    74b8:	add	r9, pc, r9
    74bc:	mov	r4, r8
    74c0:	ldr	r8, [sp, #4]
    74c4:	mov	r6, r9
    74c8:	ldr	r0, [fp, #-44]	; 0xffffffd4
    74cc:	mov	r1, #0
    74d0:	ands	r5, ip, #64	; 0x40
    74d4:	mov	r2, #0
    74d8:	str	r1, [r8, ip, lsl #2]
    74dc:	str	r1, [r0, ip, lsl #2]
    74e0:	mov	r1, #0
    74e4:	beq	7520 <rb_des_init+0x650>
    74e8:	ldr	r0, [sp, #60]	; 0x3c
    74ec:	mov	r1, #0
    74f0:	mov	r2, #0
    74f4:	ldrb	r0, [r4, r0]
    74f8:	cmp	r0, #255	; 0xff
    74fc:	beq	7520 <rb_des_init+0x650>
    7500:	ldr	r1, [pc, #2024]	; 7cf0 <rb_des_init+0xe20>
    7504:	cmp	r0, #27
    7508:	add	r1, pc, r1
    750c:	bhi	7564 <rb_des_init+0x694>
    7510:	add	r0, r1, r0, lsl #2
    7514:	mov	r2, #0
    7518:	ldr	r1, [r0, #16]
    751c:	str	r1, [r8, ip, lsl #2]
    7520:	ands	lr, ip, #32
    7524:	beq	7598 <rb_des_init+0x6c8>
    7528:	ldr	r0, [sp, #36]	; 0x24
    752c:	ldrb	r0, [r4, r0]
    7530:	cmp	r0, #255	; 0xff
    7534:	beq	7598 <rb_des_init+0x6c8>
    7538:	ldr	r3, [pc, #1972]	; 7cf4 <rb_des_init+0xe24>
    753c:	cmp	r0, #28
    7540:	add	r3, pc, r3
    7544:	bcs	7584 <rb_des_init+0x6b4>
    7548:	add	r0, r3, r0, lsl #2
    754c:	ldr	r0, [r0, #16]
    7550:	orr	r1, r1, r0
    7554:	str	r1, [r8, ip, lsl #2]
    7558:	ands	r9, ip, #16
    755c:	bne	75a0 <rb_des_init+0x6d0>
    7560:	b	75d0 <rb_des_init+0x700>
    7564:	add	r0, r1, r0, lsl #2
    7568:	mov	r1, #0
    756c:	ldr	r2, [r0, #-96]	; 0xffffffa0
    7570:	ldr	r0, [fp, #-44]	; 0xffffffd4
    7574:	str	r2, [r0, ip, lsl #2]
    7578:	ands	lr, ip, #32
    757c:	bne	7528 <rb_des_init+0x658>
    7580:	b	7598 <rb_des_init+0x6c8>
    7584:	add	r0, r3, r0, lsl #2
    7588:	ldr	r0, [r0, #-96]	; 0xffffffa0
    758c:	orr	r2, r2, r0
    7590:	ldr	r0, [fp, #-44]	; 0xffffffd4
    7594:	str	r2, [r0, ip, lsl #2]
    7598:	ands	r9, ip, #16
    759c:	beq	75d0 <rb_des_init+0x700>
    75a0:	ldr	r0, [sp, #40]	; 0x28
    75a4:	ldrb	r0, [r4, r0]
    75a8:	cmp	r0, #255	; 0xff
    75ac:	beq	75d0 <rb_des_init+0x700>
    75b0:	ldr	r3, [pc, #1916]	; 7d34 <rb_des_init+0xe64>
    75b4:	cmp	r0, #28
    75b8:	add	r3, pc, r3
    75bc:	bcs	760c <rb_des_init+0x73c>
    75c0:	add	r0, r3, r0, lsl #2
    75c4:	ldr	r0, [r0, #16]
    75c8:	orr	r1, r1, r0
    75cc:	str	r1, [r8, ip, lsl #2]
    75d0:	ands	r7, ip, #8
    75d4:	beq	7640 <rb_des_init+0x770>
    75d8:	ldr	r0, [sp, #44]	; 0x2c
    75dc:	ldrb	r0, [r4, r0]
    75e0:	cmp	r0, #255	; 0xff
    75e4:	beq	7640 <rb_des_init+0x770>
    75e8:	ldr	r3, [pc, #1864]	; 7d38 <rb_des_init+0xe68>
    75ec:	cmp	r0, #28
    75f0:	add	r3, pc, r3
    75f4:	bcs	762c <rb_des_init+0x75c>
    75f8:	add	r0, r3, r0, lsl #2
    75fc:	ldr	r0, [r0, #16]
    7600:	orr	r1, r1, r0
    7604:	str	r1, [r8, ip, lsl #2]
    7608:	b	7640 <rb_des_init+0x770>
    760c:	add	r0, r3, r0, lsl #2
    7610:	ldr	r0, [r0, #-96]	; 0xffffffa0
    7614:	orr	r2, r2, r0
    7618:	ldr	r0, [fp, #-44]	; 0xffffffd4
    761c:	str	r2, [r0, ip, lsl #2]
    7620:	ands	r7, ip, #8
    7624:	bne	75d8 <rb_des_init+0x708>
    7628:	b	7640 <rb_des_init+0x770>
    762c:	add	r0, r3, r0, lsl #2
    7630:	ldr	r0, [r0, #-96]	; 0xffffffa0
    7634:	orr	r2, r2, r0
    7638:	ldr	r0, [fp, #-44]	; 0xffffffd4
    763c:	str	r2, [r0, ip, lsl #2]
    7640:	ands	sl, ip, #4
    7644:	str	sl, [fp, #-40]	; 0xffffffd8
    7648:	beq	767c <rb_des_init+0x7ac>
    764c:	ldr	r0, [sp, #48]	; 0x30
    7650:	ldrb	r0, [r4, r0]
    7654:	cmp	r0, #255	; 0xff
    7658:	beq	767c <rb_des_init+0x7ac>
    765c:	ldr	r3, [pc, #1752]	; 7d3c <rb_des_init+0xe6c>
    7660:	cmp	r0, #28
    7664:	add	r3, pc, r3
    7668:	bcs	76c0 <rb_des_init+0x7f0>
    766c:	add	r0, r3, r0, lsl #2
    7670:	ldr	r0, [r0, #16]
    7674:	orr	r1, r1, r0
    7678:	str	r1, [r8, ip, lsl #2]
    767c:	ands	r3, ip, #2
    7680:	beq	76f4 <rb_des_init+0x824>
    7684:	ldr	r0, [sp, #52]	; 0x34
    7688:	ldrb	r0, [r4, r0]
    768c:	cmp	r0, #255	; 0xff
    7690:	beq	76f4 <rb_des_init+0x824>
    7694:	ldr	r4, [pc, #1700]	; 7d40 <rb_des_init+0xe70>
    7698:	cmp	r0, #28
    769c:	add	r4, pc, r4
    76a0:	bcs	76e0 <rb_des_init+0x810>
    76a4:	add	r0, r4, r0, lsl #2
    76a8:	ldr	r0, [r0, #16]
    76ac:	orr	r1, r1, r0
    76b0:	str	r1, [r8, ip, lsl #2]
    76b4:	ands	r4, ip, #1
    76b8:	bne	76fc <rb_des_init+0x82c>
    76bc:	b	7790 <rb_des_init+0x8c0>
    76c0:	add	r0, r3, r0, lsl #2
    76c4:	ldr	r0, [r0, #-96]	; 0xffffffa0
    76c8:	orr	r2, r2, r0
    76cc:	ldr	r0, [fp, #-44]	; 0xffffffd4
    76d0:	str	r2, [r0, ip, lsl #2]
    76d4:	ands	r3, ip, #2
    76d8:	bne	7684 <rb_des_init+0x7b4>
    76dc:	b	76f4 <rb_des_init+0x824>
    76e0:	add	r0, r4, r0, lsl #2
    76e4:	ldr	r0, [r0, #-96]	; 0xffffffa0
    76e8:	orr	r2, r2, r0
    76ec:	ldr	r0, [fp, #-44]	; 0xffffffd4
    76f0:	str	r2, [r0, ip, lsl #2]
    76f4:	ands	r4, ip, #1
    76f8:	beq	7790 <rb_des_init+0x8c0>
    76fc:	mov	sl, r2
    7700:	mov	r2, r1
    7704:	mov	r1, r5
    7708:	mov	r5, r9
    770c:	mov	r9, r4
    7710:	mov	r4, lr
    7714:	mov	lr, r3
    7718:	ldr	r0, [sp, #56]	; 0x38
    771c:	mov	r3, r8
    7720:	ldr	r8, [pc, #1564]	; 7d44 <rb_des_init+0xe74>
    7724:	add	r8, pc, r8
    7728:	ldrb	r0, [r8, r0]
    772c:	mov	r8, r3
    7730:	mov	r3, lr
    7734:	mov	lr, r4
    7738:	mov	r4, r9
    773c:	mov	r9, r5
    7740:	mov	r5, r1
    7744:	cmp	r0, #255	; 0xff
    7748:	beq	7790 <rb_des_init+0x8c0>
    774c:	cmp	r0, #28
    7750:	bcs	7774 <rb_des_init+0x8a4>
    7754:	mov	r1, r2
    7758:	ldr	r2, [pc, #1516]	; 7d4c <rb_des_init+0xe7c>
    775c:	add	r2, pc, r2
    7760:	add	r0, r2, r0, lsl #2
    7764:	ldr	r0, [r0, #16]
    7768:	orr	r0, r1, r0
    776c:	str	r0, [r8, ip, lsl #2]
    7770:	b	7790 <rb_des_init+0x8c0>
    7774:	ldr	r1, [pc, #1484]	; 7d48 <rb_des_init+0xe78>
    7778:	add	r1, pc, r1
    777c:	add	r0, r1, r0, lsl #2
    7780:	ldr	r1, [fp, #-44]	; 0xffffffd4
    7784:	ldr	r0, [r0, #-96]	; 0xffffffa0
    7788:	orr	r0, sl, r0
    778c:	str	r0, [r1, ip, lsl #2]
    7790:	ldr	r0, [fp, #-48]	; 0xffffffd0
    7794:	mov	r1, #0
    7798:	cmp	r5, #0
    779c:	str	r1, [r0, ip, lsl #2]
    77a0:	ldr	r0, [fp, #-52]	; 0xffffffcc
    77a4:	str	r1, [r0, ip, lsl #2]
    77a8:	beq	7800 <rb_des_init+0x930>
    77ac:	ldr	r0, [sp, #32]
    77b0:	ldrb	r0, [r6, r0]
    77b4:	cmp	r0, #255	; 0xff
    77b8:	beq	7800 <rb_des_init+0x930>
    77bc:	cmp	r0, #23
    77c0:	bhi	77e8 <rb_des_init+0x918>
    77c4:	ldr	r2, [pc, #1324]	; 7cf8 <rb_des_init+0xe28>
    77c8:	add	r2, pc, r2
    77cc:	add	r0, r2, r0, lsl #2
    77d0:	ldr	r5, [r0, #32]
    77d4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    77d8:	str	r5, [r0, ip, lsl #2]
    77dc:	cmp	lr, #0
    77e0:	bne	780c <rb_des_init+0x93c>
    77e4:	b	7840 <rb_des_init+0x970>
    77e8:	ldr	r1, [pc, #1292]	; 7cfc <rb_des_init+0xe2c>
    77ec:	add	r1, pc, r1
    77f0:	add	r0, r1, r0, lsl #2
    77f4:	ldr	r1, [r0, #-64]	; 0xffffffc0
    77f8:	ldr	r0, [fp, #-52]	; 0xffffffcc
    77fc:	str	r1, [r0, ip, lsl #2]
    7800:	mov	r5, #0
    7804:	cmp	lr, #0
    7808:	beq	7840 <rb_des_init+0x970>
    780c:	ldr	r0, [sp, #8]
    7810:	ldrb	r0, [r6, r0]
    7814:	cmp	r0, #255	; 0xff
    7818:	beq	7840 <rb_des_init+0x970>
    781c:	ldr	r2, [pc, #1244]	; 7d00 <rb_des_init+0xe30>
    7820:	cmp	r0, #24
    7824:	add	r2, pc, r2
    7828:	bcs	7888 <rb_des_init+0x9b8>
    782c:	add	r0, r2, r0, lsl #2
    7830:	ldr	r0, [r0, #32]
    7834:	orr	r5, r5, r0
    7838:	ldr	r0, [fp, #-48]	; 0xffffffd0
    783c:	str	r5, [r0, ip, lsl #2]
    7840:	cmp	r9, #0
    7844:	beq	78bc <rb_des_init+0x9ec>
    7848:	ldr	r0, [sp, #12]
    784c:	ldrb	r0, [r6, r0]
    7850:	cmp	r0, #255	; 0xff
    7854:	beq	78bc <rb_des_init+0x9ec>
    7858:	ldr	r2, [pc, #1264]	; 7d50 <rb_des_init+0xe80>
    785c:	cmp	r0, #24
    7860:	add	r2, pc, r2
    7864:	bcs	78a8 <rb_des_init+0x9d8>
    7868:	add	r0, r2, r0, lsl #2
    786c:	ldr	r0, [r0, #32]
    7870:	orr	r5, r5, r0
    7874:	ldr	r0, [fp, #-48]	; 0xffffffd0
    7878:	str	r5, [r0, ip, lsl #2]
    787c:	cmp	r7, #0
    7880:	bne	78c4 <rb_des_init+0x9f4>
    7884:	b	7910 <rb_des_init+0xa40>
    7888:	add	r0, r2, r0, lsl #2
    788c:	ldr	r0, [r0, #-64]	; 0xffffffc0
    7890:	orr	r1, r1, r0
    7894:	ldr	r0, [fp, #-52]	; 0xffffffcc
    7898:	str	r1, [r0, ip, lsl #2]
    789c:	cmp	r9, #0
    78a0:	bne	7848 <rb_des_init+0x978>
    78a4:	b	78bc <rb_des_init+0x9ec>
    78a8:	add	r0, r2, r0, lsl #2
    78ac:	ldr	r0, [r0, #-64]	; 0xffffffc0
    78b0:	orr	r1, r1, r0
    78b4:	ldr	r0, [fp, #-52]	; 0xffffffcc
    78b8:	str	r1, [r0, ip, lsl #2]
    78bc:	cmp	r7, #0
    78c0:	beq	7910 <rb_des_init+0xa40>
    78c4:	ldr	r0, [sp, #16]
    78c8:	ldrb	r0, [r6, r0]
    78cc:	cmp	r0, #255	; 0xff
    78d0:	beq	7910 <rb_des_init+0xa40>
    78d4:	ldr	r2, [pc, #1144]	; 7d54 <rb_des_init+0xe84>
    78d8:	cmp	r0, #24
    78dc:	add	r2, pc, r2
    78e0:	bcs	78fc <rb_des_init+0xa2c>
    78e4:	add	r0, r2, r0, lsl #2
    78e8:	ldr	r0, [r0, #32]
    78ec:	orr	r5, r5, r0
    78f0:	ldr	r0, [fp, #-48]	; 0xffffffd0
    78f4:	str	r5, [r0, ip, lsl #2]
    78f8:	b	7910 <rb_des_init+0xa40>
    78fc:	add	r0, r2, r0, lsl #2
    7900:	ldr	r0, [r0, #-64]	; 0xffffffc0
    7904:	orr	r1, r1, r0
    7908:	ldr	r0, [fp, #-52]	; 0xffffffcc
    790c:	str	r1, [r0, ip, lsl #2]
    7910:	ldr	r0, [fp, #-40]	; 0xffffffd8
    7914:	cmp	r0, #0
    7918:	beq	7950 <rb_des_init+0xa80>
    791c:	ldr	r0, [sp, #20]
    7920:	ldrb	r0, [r6, r0]
    7924:	cmp	r0, #255	; 0xff
    7928:	beq	7950 <rb_des_init+0xa80>
    792c:	ldr	r2, [pc, #1060]	; 7d58 <rb_des_init+0xe88>
    7930:	cmp	r0, #24
    7934:	add	r2, pc, r2
    7938:	bcs	7990 <rb_des_init+0xac0>
    793c:	add	r0, r2, r0, lsl #2
    7940:	ldr	r0, [r0, #32]
    7944:	orr	r5, r5, r0
    7948:	ldr	r0, [fp, #-48]	; 0xffffffd0
    794c:	str	r5, [r0, ip, lsl #2]
    7950:	cmp	r3, #0
    7954:	beq	79c4 <rb_des_init+0xaf4>
    7958:	ldr	r0, [sp, #24]
    795c:	ldrb	r0, [r6, r0]
    7960:	cmp	r0, #255	; 0xff
    7964:	beq	79c4 <rb_des_init+0xaf4>
    7968:	ldr	r2, [pc, #1004]	; 7d5c <rb_des_init+0xe8c>
    796c:	cmp	r0, #24
    7970:	add	r2, pc, r2
    7974:	bcs	79b0 <rb_des_init+0xae0>
    7978:	add	r0, r2, r0, lsl #2
    797c:	ldr	r0, [r0, #32]
    7980:	orr	r5, r5, r0
    7984:	ldr	r0, [fp, #-48]	; 0xffffffd0
    7988:	str	r5, [r0, ip, lsl #2]
    798c:	b	79c4 <rb_des_init+0xaf4>
    7990:	add	r0, r2, r0, lsl #2
    7994:	ldr	r0, [r0, #-64]	; 0xffffffc0
    7998:	orr	r1, r1, r0
    799c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    79a0:	str	r1, [r0, ip, lsl #2]
    79a4:	cmp	r3, #0
    79a8:	bne	7958 <rb_des_init+0xa88>
    79ac:	b	79c4 <rb_des_init+0xaf4>
    79b0:	add	r0, r2, r0, lsl #2
    79b4:	ldr	r0, [r0, #-64]	; 0xffffffc0
    79b8:	orr	r1, r1, r0
    79bc:	ldr	r0, [fp, #-52]	; 0xffffffcc
    79c0:	str	r1, [r0, ip, lsl #2]
    79c4:	cmp	r4, #0
    79c8:	ldr	r4, [pc, #912]	; 7d60 <rb_des_init+0xe90>
    79cc:	add	r4, pc, r4
    79d0:	beq	7a24 <rb_des_init+0xb54>
    79d4:	ldr	r0, [sp, #28]
    79d8:	ldrb	r0, [r6, r0]
    79dc:	cmp	r0, #255	; 0xff
    79e0:	beq	7a24 <rb_des_init+0xb54>
    79e4:	cmp	r0, #24
    79e8:	bcs	7a08 <rb_des_init+0xb38>
    79ec:	ldr	r1, [pc, #884]	; 7d68 <rb_des_init+0xe98>
    79f0:	add	r1, pc, r1
    79f4:	add	r0, r1, r0, lsl #2
    79f8:	ldr	r1, [fp, #-48]	; 0xffffffd0
    79fc:	ldr	r0, [r0, #32]
    7a00:	orr	r0, r5, r0
    7a04:	b	7a20 <rb_des_init+0xb50>
    7a08:	ldr	r2, [pc, #852]	; 7d64 <rb_des_init+0xe94>
    7a0c:	add	r2, pc, r2
    7a10:	add	r0, r2, r0, lsl #2
    7a14:	ldr	r0, [r0, #-64]	; 0xffffffc0
    7a18:	orr	r0, r1, r0
    7a1c:	ldr	r1, [fp, #-52]	; 0xffffffcc
    7a20:	str	r0, [r1, ip, lsl #2]
    7a24:	add	ip, ip, #1
    7a28:	cmp	ip, #128	; 0x80
    7a2c:	bne	74c8 <rb_des_init+0x5f8>
    7a30:	ldr	r0, [fp, #-52]	; 0xffffffcc
    7a34:	ldr	r7, [fp, #-36]	; 0xffffffdc
    7a38:	ldr	r5, [fp, #-32]	; 0xffffffe0
    7a3c:	add	r8, r8, #512	; 0x200
    7a40:	add	r0, r0, #512	; 0x200
    7a44:	add	r7, r7, #8
    7a48:	add	r5, r5, #8
    7a4c:	str	r0, [fp, #-52]	; 0xffffffcc
    7a50:	ldr	r0, [fp, #-48]	; 0xffffffd0
    7a54:	add	r0, r0, #512	; 0x200
    7a58:	str	r0, [fp, #-48]	; 0xffffffd0
    7a5c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    7a60:	add	r0, r0, #512	; 0x200
    7a64:	str	r0, [fp, #-44]	; 0xffffffd4
    7a68:	ldr	r0, [fp, #-56]	; 0xffffffc8
    7a6c:	add	r0, r0, #1
    7a70:	cmp	r0, #8
    7a74:	bne	7318 <rb_des_init+0x448>
    7a78:	ldr	r2, [pc, #644]	; 7d04 <rb_des_init+0xe34>
    7a7c:	ldr	r1, [pc, #644]	; 7d08 <rb_des_init+0xe38>
    7a80:	mov	r0, #0
    7a84:	add	r2, pc, r2
    7a88:	add	r1, pc, r1
    7a8c:	ldrb	r3, [r2, r0]
    7a90:	add	r3, r1, r3
    7a94:	strb	r0, [r3, #-1]
    7a98:	add	r0, r0, #1
    7a9c:	cmp	r0, #32
    7aa0:	bne	7a8c <rb_des_init+0xbbc>
    7aa4:	ldr	r3, [pc, #608]	; 7d0c <rb_des_init+0xe3c>
    7aa8:	mov	r2, #0
    7aac:	add	r3, pc, r3
    7ab0:	mov	r0, #7
    7ab4:	lsl	r6, r2, #3
    7ab8:	mov	r5, #0
    7abc:	str	r2, [fp, #-36]	; 0xffffffdc
    7ac0:	orr	r0, r0, r2, lsl #3
    7ac4:	str	r0, [fp, #-32]	; 0xffffffe0
    7ac8:	mov	r0, #6
    7acc:	orr	sl, r0, r2, lsl #3
    7ad0:	mov	r0, #5
    7ad4:	orr	ip, r0, r2, lsl #3
    7ad8:	mov	r0, #4
    7adc:	orr	lr, r0, r2, lsl #3
    7ae0:	mov	r0, #3
    7ae4:	orr	r8, r0, r2, lsl #3
    7ae8:	mov	r0, #2
    7aec:	orr	r9, r0, r2, lsl #3
    7af0:	mov	r0, #1
    7af4:	orr	r0, r0, r2, lsl #3
    7af8:	b	7bdc <rb_des_init+0xd0c>
    7afc:	ldrb	r2, [r1, r6]
    7b00:	ldr	r4, [pc, #520]	; 7d10 <rb_des_init+0xe40>
    7b04:	add	r4, pc, r4
    7b08:	ldr	r2, [r4, r2, lsl #2]
    7b0c:	str	r2, [r3, r5, lsl #2]
    7b10:	tst	r5, #64	; 0x40
    7b14:	beq	7bf4 <rb_des_init+0xd24>
    7b18:	ldrb	r4, [r1, r0]
    7b1c:	ldr	r7, [pc, #496]	; 7d14 <rb_des_init+0xe44>
    7b20:	add	r7, pc, r7
    7b24:	ldr	r4, [r7, r4, lsl #2]
    7b28:	orr	r2, r2, r4
    7b2c:	str	r2, [r3, r5, lsl #2]
    7b30:	tst	r5, #32
    7b34:	beq	7bfc <rb_des_init+0xd2c>
    7b38:	ldrb	r4, [r1, r9]
    7b3c:	ldr	r7, [pc, #468]	; 7d18 <rb_des_init+0xe48>
    7b40:	add	r7, pc, r7
    7b44:	ldr	r4, [r7, r4, lsl #2]
    7b48:	orr	r2, r2, r4
    7b4c:	str	r2, [r3, r5, lsl #2]
    7b50:	tst	r5, #16
    7b54:	beq	7c04 <rb_des_init+0xd34>
    7b58:	ldrb	r4, [r1, r8]
    7b5c:	ldr	r7, [pc, #440]	; 7d1c <rb_des_init+0xe4c>
    7b60:	add	r7, pc, r7
    7b64:	ldr	r4, [r7, r4, lsl #2]
    7b68:	orr	r2, r2, r4
    7b6c:	str	r2, [r3, r5, lsl #2]
    7b70:	tst	r5, #8
    7b74:	beq	7c0c <rb_des_init+0xd3c>
    7b78:	ldrb	r4, [r1, lr]
    7b7c:	ldr	r7, [pc, #412]	; 7d20 <rb_des_init+0xe50>
    7b80:	add	r7, pc, r7
    7b84:	ldr	r4, [r7, r4, lsl #2]
    7b88:	orr	r2, r2, r4
    7b8c:	str	r2, [r3, r5, lsl #2]
    7b90:	tst	r5, #4
    7b94:	beq	7c14 <rb_des_init+0xd44>
    7b98:	ldrb	r4, [r1, ip]
    7b9c:	ldr	r7, [pc, #384]	; 7d24 <rb_des_init+0xe54>
    7ba0:	add	r7, pc, r7
    7ba4:	ldr	r4, [r7, r4, lsl #2]
    7ba8:	orr	r2, r2, r4
    7bac:	str	r2, [r3, r5, lsl #2]
    7bb0:	tst	r5, #2
    7bb4:	beq	7c1c <rb_des_init+0xd4c>
    7bb8:	ldrb	r4, [r1, sl]
    7bbc:	ldr	r7, [pc, #356]	; 7d28 <rb_des_init+0xe58>
    7bc0:	add	r7, pc, r7
    7bc4:	ldr	r4, [r7, r4, lsl #2]
    7bc8:	orr	r2, r2, r4
    7bcc:	str	r2, [r3, r5, lsl #2]
    7bd0:	tst	r5, #1
    7bd4:	bne	7c24 <rb_des_init+0xd54>
    7bd8:	b	7c40 <rb_des_init+0xd70>
    7bdc:	mov	r2, #0
    7be0:	tst	r5, #128	; 0x80
    7be4:	str	r2, [r3, r5, lsl #2]
    7be8:	bne	7afc <rb_des_init+0xc2c>
    7bec:	tst	r5, #64	; 0x40
    7bf0:	bne	7b18 <rb_des_init+0xc48>
    7bf4:	tst	r5, #32
    7bf8:	bne	7b38 <rb_des_init+0xc68>
    7bfc:	tst	r5, #16
    7c00:	bne	7b58 <rb_des_init+0xc88>
    7c04:	tst	r5, #8
    7c08:	bne	7b78 <rb_des_init+0xca8>
    7c0c:	tst	r5, #4
    7c10:	bne	7b98 <rb_des_init+0xcc8>
    7c14:	tst	r5, #2
    7c18:	bne	7bb8 <rb_des_init+0xce8>
    7c1c:	tst	r5, #1
    7c20:	beq	7c40 <rb_des_init+0xd70>
    7c24:	ldr	r4, [fp, #-32]	; 0xffffffe0
    7c28:	ldrb	r4, [r1, r4]
    7c2c:	ldr	r7, [pc, #248]	; 7d2c <rb_des_init+0xe5c>
    7c30:	add	r7, pc, r7
    7c34:	ldr	r4, [r7, r4, lsl #2]
    7c38:	orr	r2, r2, r4
    7c3c:	str	r2, [r3, r5, lsl #2]
    7c40:	add	r5, r5, #1
    7c44:	cmp	r5, #256	; 0x100
    7c48:	bne	7bdc <rb_des_init+0xd0c>
    7c4c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    7c50:	add	r3, r3, #1024	; 0x400
    7c54:	add	r2, r2, #1
    7c58:	cmp	r2, #4
    7c5c:	bne	7ab0 <rb_des_init+0xbe0>
    7c60:	ldr	r1, [pc, #200]	; 7d30 <rb_des_init+0xe60>
    7c64:	mov	r0, #1
    7c68:	add	r1, pc, r1
    7c6c:	strb	r0, [r1]
    7c70:	sub	sp, fp, #28
    7c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7c78:	bx	lr
    7c7c:	.word	0x000255e4
    7c80:	.word	0x000255c4
    7c84:	.word	0x000255b4
    7c88:	.word	0x000255b0
    7c8c:	.word	0x000255a8
    7c90:	.word	0x000115d8
    7c94:	.word	0x00025598
    7c98:	.word	0x000255bc
    7c9c:	.word	0x00029510
    7ca0:	.word	0x000114ac
    7ca4:	.word	0x000294ac
    7ca8:	.word	0x00029468
    7cac:	.word	0x000294fc
    7cb0:	.word	0x000114a0
    7cb4:	.word	0x000114b4
    7cb8:	.word	0x000314d0
    7cbc:	.word	0x000324d4
    7cc0:	.word	0x000334c4
    7cc4:	.word	0x000344b8
    7cc8:	.word	0x00029484
    7ccc:	.word	0x0002b470
    7cd0:	.word	0x0002d460
    7cd4:	.word	0x0002f450
    7cd8:	.word	0x00011880
    7cdc:	.word	0x000110d4
    7ce0:	.word	0x000110bc
    7ce4:	.word	0x00011098
    7ce8:	.word	0x0002929c
    7cec:	.word	0x000292d8
    7cf0:	.word	0x00010f80
    7cf4:	.word	0x00010f48
    7cf8:	.word	0x00010cc0
    7cfc:	.word	0x00010c9c
    7d00:	.word	0x00010c64
    7d04:	.word	0x00011194
    7d08:	.word	0x00034d40
    7d0c:	.word	0x00034d3c
    7d10:	.word	0x00010984
    7d14:	.word	0x00010968
    7d18:	.word	0x00010948
    7d1c:	.word	0x00010928
    7d20:	.word	0x00010908
    7d24:	.word	0x000108e8
    7d28:	.word	0x000108c8
    7d2c:	.word	0x00010858
    7d30:	.word	0x00024850
    7d34:	.word	0x00010ed0
    7d38:	.word	0x00010e98
    7d3c:	.word	0x00010e24
    7d40:	.word	0x00010dec
    7d44:	.word	0x0002902c
    7d48:	.word	0x00010d10
    7d4c:	.word	0x00010d2c
    7d50:	.word	0x00010c28
    7d54:	.word	0x00010bac
    7d58:	.word	0x00010b54
    7d5c:	.word	0x00010b18
    7d60:	.word	0x00028d84
    7d64:	.word	0x00010a7c
    7d68:	.word	0x00010a98

00007d6c <MD5Final>:
    7d6c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    7d70:	add	fp, sp, #24
    7d74:	sub	sp, sp, #8
    7d78:	mov	r4, r1
    7d7c:	mov	r8, r0
    7d80:	ldr	r1, [r1, #16]
    7d84:	mov	r2, #120	; 0x78
    7d88:	ldr	r0, [r4, #20]
    7d8c:	str	r1, [sp]
    7d90:	str	r0, [sp, #4]
    7d94:	ubfx	r0, r1, #3, #6
    7d98:	cmp	r0, #56	; 0x38
    7d9c:	rsb	r7, r0, #64	; 0x40
    7da0:	movwcc	r2, #56	; 0x38
    7da4:	sub	r6, r2, r0
    7da8:	add	r2, r1, r6, lsl #3
    7dac:	str	r2, [r4, #16]
    7db0:	cmp	r2, r6, lsl #3
    7db4:	ldr	r1, [r4, #20]
    7db8:	addcc	r1, r1, #1
    7dbc:	strcc	r1, [r4, #20]
    7dc0:	add	r1, r1, r6, lsr #29
    7dc4:	cmp	r7, r6
    7dc8:	str	r1, [r4, #20]
    7dcc:	add	r1, r4, r0
    7dd0:	mov	r0, #0
    7dd4:	add	r9, r1, #24
    7dd8:	bhi	7e38 <MD5Final+0xcc>
    7ddc:	ldr	r5, [pc, #304]	; 7f14 <MD5Final+0x1a8>
    7de0:	mov	r0, r9
    7de4:	mov	r2, r7
    7de8:	add	r5, pc, r5
    7dec:	mov	r1, r5
    7df0:	bl	50a8 <memcpy@plt>
    7df4:	add	r9, r4, #24
    7df8:	mov	r0, r4
    7dfc:	mov	r1, r9
    7e00:	bl	7f1c <MD5Transform>
    7e04:	add	r0, r7, #63	; 0x3f
    7e08:	cmp	r0, r6
    7e0c:	bcs	7e34 <MD5Final+0xc8>
    7e10:	add	r1, r5, r7
    7e14:	mov	r0, r4
    7e18:	bl	7f1c <MD5Transform>
    7e1c:	add	r1, r7, #127	; 0x7f
    7e20:	add	r0, r7, #64	; 0x40
    7e24:	cmp	r1, r6
    7e28:	mov	r7, r0
    7e2c:	bcc	7e10 <MD5Final+0xa4>
    7e30:	b	7e38 <MD5Final+0xcc>
    7e34:	mov	r0, r7
    7e38:	ldr	r1, [pc, #216]	; 7f18 <MD5Final+0x1ac>
    7e3c:	sub	r2, r6, r0
    7e40:	add	r1, pc, r1
    7e44:	add	r1, r1, r0
    7e48:	mov	r0, r9
    7e4c:	bl	50a8 <memcpy@plt>
    7e50:	ldr	r2, [r4, #16]
    7e54:	ldr	r1, [r4, #20]
    7e58:	mov	r7, #0
    7e5c:	add	r0, r2, #64	; 0x40
    7e60:	cmn	r2, #64	; 0x40
    7e64:	str	r0, [r4, #16]
    7e68:	ubfx	r0, r2, #3, #6
    7e6c:	addcs	r1, r1, #1
    7e70:	strcs	r1, [r4, #20]
    7e74:	str	r1, [r4, #20]
    7e78:	add	r1, r4, r0
    7e7c:	rsb	r5, r0, #64	; 0x40
    7e80:	add	r6, r1, #24
    7e84:	cmp	r5, #8
    7e88:	bls	7e94 <MD5Final+0x128>
    7e8c:	mov	r5, #0
    7e90:	b	7eb4 <MD5Final+0x148>
    7e94:	mov	r1, sp
    7e98:	mov	r0, r6
    7e9c:	mov	r2, r5
    7ea0:	bl	50a8 <memcpy@plt>
    7ea4:	add	r6, r4, #24
    7ea8:	mov	r0, r4
    7eac:	mov	r1, r6
    7eb0:	bl	7f1c <MD5Transform>
    7eb4:	mov	r0, sp
    7eb8:	rsb	r2, r5, #8
    7ebc:	add	r1, r0, r5
    7ec0:	mov	r0, r6
    7ec4:	bl	50a8 <memcpy@plt>
    7ec8:	mov	r0, #80	; 0x50
    7ecc:	mov	r1, r4
    7ed0:	vmov.i32	q9, #0	; 0x00000000
    7ed4:	vld1.8	{d16-d17}, [r1], r0
    7ed8:	add	r0, r4, #64	; 0x40
    7edc:	vst1.8	{d16-d17}, [r8]
    7ee0:	vst1.8	{d18-d19}, [r0]
    7ee4:	add	r0, r4, #48	; 0x30
    7ee8:	str	r7, [r1]
    7eec:	vst1.8	{d18-d19}, [r0]
    7ef0:	add	r0, r4, #32
    7ef4:	vst1.8	{d18-d19}, [r0]
    7ef8:	add	r0, r4, #16
    7efc:	vst1.8	{d18-d19}, [r0]
    7f00:	mov	r0, #84	; 0x54
    7f04:	vst1.8	{d18-d19}, [r4], r0
    7f08:	str	r7, [r4]
    7f0c:	sub	sp, fp, #24
    7f10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    7f14:	.word	0x00023608
    7f18:	.word	0x000235b0

00007f1c <MD5Transform>:
    7f1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7f20:	add	fp, sp, #28
    7f24:	sub	sp, sp, #84	; 0x54
    7f28:	mov	ip, r1
    7f2c:	ldr	r4, [r0, #4]
    7f30:	ldr	r2, [r0, #12]
    7f34:	ldr	r1, [r0, #8]
    7f38:	ldr	r5, [r0]
    7f3c:	str	r0, [sp, #16]
    7f40:	ldr	r9, [ip, #4]
    7f44:	ldr	lr, [ip, #8]
    7f48:	ldr	r8, [ip, #12]
    7f4c:	and	r0, r1, r4
    7f50:	bic	r3, r2, r4
    7f54:	str	r5, [sp, #24]
    7f58:	str	r1, [sp, #32]
    7f5c:	str	r4, [sp, #20]
    7f60:	str	r2, [sp, #28]
    7f64:	orr	r0, r3, r0
    7f68:	ldr	r3, [ip]
    7f6c:	str	r8, [fp, #-44]	; 0xffffffd4
    7f70:	str	lr, [fp, #-52]	; 0xffffffcc
    7f74:	str	r9, [fp, #-48]	; 0xffffffd0
    7f78:	str	r3, [fp, #-36]	; 0xffffffdc
    7f7c:	add	r3, r5, r3
    7f80:	add	r0, r3, r0
    7f84:	movw	r3, #42104	; 0xa478
    7f88:	movt	r3, #55146	; 0xd76a
    7f8c:	add	r0, r0, r3
    7f90:	add	r0, r4, r0, ror #25
    7f94:	bic	r3, r1, r0
    7f98:	and	r7, r0, r4
    7f9c:	orr	r3, r7, r3
    7fa0:	add	r7, r2, r9
    7fa4:	add	r3, r7, r3
    7fa8:	movw	r7, #46934	; 0xb756
    7fac:	movt	r7, #59591	; 0xe8c7
    7fb0:	add	r3, r3, r7
    7fb4:	add	r3, r0, r3, ror #20
    7fb8:	bic	r7, r4, r3
    7fbc:	and	r6, r3, r0
    7fc0:	orr	r7, r6, r7
    7fc4:	add	r6, r1, lr
    7fc8:	ldr	r1, [ip, #16]
    7fcc:	ldr	lr, [ip, #44]	; 0x2c
    7fd0:	add	r7, r6, r7
    7fd4:	movw	r6, #28891	; 0x70db
    7fd8:	movt	r6, #9248	; 0x2420
    7fdc:	add	r7, r7, r6
    7fe0:	add	r7, r3, r7, ror #15
    7fe4:	str	r1, [sp, #48]	; 0x30
    7fe8:	str	lr, [fp, #-40]	; 0xffffffd8
    7fec:	bic	r6, r0, r7
    7ff0:	and	r5, r7, r3
    7ff4:	add	r0, r1, r0
    7ff8:	ldr	r1, [ip, #20]
    7ffc:	orr	r6, r5, r6
    8000:	add	r5, r4, r8
    8004:	ldr	r8, [ip, #24]
    8008:	add	r6, r5, r6
    800c:	movw	r5, #52974	; 0xceee
    8010:	movt	r5, #49597	; 0xc1bd
    8014:	add	r6, r6, r5
    8018:	str	r1, [sp, #36]	; 0x24
    801c:	add	r4, r7, r6, ror #10
    8020:	str	r8, [sp, #12]
    8024:	bic	r6, r3, r4
    8028:	and	r5, r4, r7
    802c:	add	r3, r1, r3
    8030:	ldr	r1, [ip, #28]
    8034:	orr	r6, r5, r6
    8038:	add	r0, r0, r6
    803c:	movw	r6, #4015	; 0xfaf
    8040:	movt	r6, #62844	; 0xf57c
    8044:	add	r0, r0, r6
    8048:	str	r1, [sp, #52]	; 0x34
    804c:	add	r0, r4, r0, ror #25
    8050:	bic	r6, r7, r0
    8054:	and	r5, r0, r4
    8058:	add	r7, r8, r7
    805c:	orr	r5, r5, r6
    8060:	add	r3, r3, r5
    8064:	movw	r5, #50730	; 0xc62a
    8068:	movt	r5, #18311	; 0x4787
    806c:	add	r3, r3, r5
    8070:	add	r3, r0, r3, ror #20
    8074:	bic	r5, r4, r3
    8078:	and	r6, r3, r0
    807c:	add	r4, r1, r4
    8080:	ldr	r1, [ip, #32]
    8084:	orr	r5, r6, r5
    8088:	add	r7, r7, r5
    808c:	movw	r5, #17939	; 0x4613
    8090:	movt	r5, #43056	; 0xa830
    8094:	add	r7, r7, r5
    8098:	str	r1, [sp, #44]	; 0x2c
    809c:	add	r5, r3, r7, ror #15
    80a0:	bic	r7, r0, r5
    80a4:	and	r6, r5, r3
    80a8:	add	r0, r1, r0
    80ac:	ldr	r1, [ip, #36]	; 0x24
    80b0:	orr	r6, r6, r7
    80b4:	add	r4, r4, r6
    80b8:	movw	r6, #38145	; 0x9501
    80bc:	movt	r6, #64838	; 0xfd46
    80c0:	add	r4, r4, r6
    80c4:	str	r1, [fp, #-32]	; 0xffffffe0
    80c8:	add	r6, r5, r4, ror #10
    80cc:	bic	r4, r3, r6
    80d0:	and	r7, r6, r5
    80d4:	add	r3, r1, r3
    80d8:	ldr	r1, [ip, #40]	; 0x28
    80dc:	orr	r4, r7, r4
    80e0:	add	r0, r0, r4
    80e4:	movw	r4, #39128	; 0x98d8
    80e8:	movt	r4, #27008	; 0x6980
    80ec:	add	r0, r0, r4
    80f0:	str	r1, [sp, #56]	; 0x38
    80f4:	add	r0, r6, r0, ror #25
    80f8:	bic	r4, r5, r0
    80fc:	and	r7, r0, r6
    8100:	add	r5, r1, r5
    8104:	orr	r4, r7, r4
    8108:	add	r3, r3, r4
    810c:	movw	r4, #63407	; 0xf7af
    8110:	movt	r4, #35652	; 0x8b44
    8114:	add	r3, r3, r4
    8118:	add	r3, r0, r3, ror #20
    811c:	bic	r4, r6, r3
    8120:	and	r7, r3, r0
    8124:	add	r6, lr, r6
    8128:	orr	r7, r7, r4
    812c:	ldr	r4, [ip, #48]	; 0x30
    8130:	add	r5, r5, r7
    8134:	movw	r7, #42063	; 0xa44f
    8138:	sub	r5, r5, r7
    813c:	add	r1, r3, r5, ror #15
    8140:	bic	r5, r0, r1
    8144:	and	r7, r1, r3
    8148:	add	r0, r4, r0
    814c:	str	r4, [sp, #4]
    8150:	ldr	r4, [ip, #52]	; 0x34
    8154:	orr	r5, r7, r5
    8158:	add	r5, r6, r5
    815c:	movw	r6, #55230	; 0xd7be
    8160:	movt	r6, #35164	; 0x895c
    8164:	add	r5, r5, r6
    8168:	str	r4, [sp, #40]	; 0x28
    816c:	add	r2, r1, r5, ror #10
    8170:	bic	r5, r3, r2
    8174:	and	r6, r2, r1
    8178:	add	r3, r4, r3
    817c:	ldr	r4, [ip, #56]	; 0x38
    8180:	orr	r5, r6, r5
    8184:	add	r0, r0, r5
    8188:	movw	r5, #4386	; 0x1122
    818c:	movt	r5, #27536	; 0x6b90
    8190:	add	r0, r0, r5
    8194:	add	r0, r2, r0, ror #25
    8198:	bic	r5, r1, r0
    819c:	and	r7, r0, r2
    81a0:	add	r1, r4, r1
    81a4:	orr	r7, r7, r5
    81a8:	add	r3, r3, r7
    81ac:	movw	r7, #29075	; 0x7193
    81b0:	movt	r7, #64920	; 0xfd98
    81b4:	add	r3, r3, r7
    81b8:	add	r7, r0, r3, ror #20
    81bc:	bic	r3, r2, r7
    81c0:	and	sl, r7, r0
    81c4:	orr	r3, sl, r3
    81c8:	mov	sl, r4
    81cc:	add	r1, r1, r3
    81d0:	movw	r3, #17294	; 0x438e
    81d4:	str	sl, [sp]
    81d8:	movt	r3, #42617	; 0xa679
    81dc:	add	r1, r1, r3
    81e0:	add	r3, r7, r1, ror #15
    81e4:	bic	r1, r0, r3
    81e8:	and	r5, r3, r7
    81ec:	bic	r4, r3, r7
    81f0:	add	r0, r9, r0
    81f4:	ldr	r9, [sp, #36]	; 0x24
    81f8:	orr	r5, r5, r1
    81fc:	ldr	r1, [ip, #60]	; 0x3c
    8200:	ldr	ip, [sp, #48]	; 0x30
    8204:	add	r2, r1, r2
    8208:	mov	r6, r1
    820c:	str	r1, [sp, #8]
    8210:	ldr	r1, [fp, #-36]	; 0xffffffdc
    8214:	add	r2, r2, r5
    8218:	movw	r5, #2081	; 0x821
    821c:	movt	r5, #18868	; 0x49b4
    8220:	add	r2, r2, r5
    8224:	add	r2, r3, r2, ror #10
    8228:	and	r5, r2, r7
    822c:	add	r7, r8, r7
    8230:	ldr	r8, [sp, #44]	; 0x2c
    8234:	orr	r5, r5, r4
    8238:	bic	r4, r2, r3
    823c:	add	r0, r0, r5
    8240:	movw	r5, #9570	; 0x2562
    8244:	movt	r5, #63006	; 0xf61e
    8248:	add	r0, r0, r5
    824c:	add	r0, r2, r0, ror #27
    8250:	and	r5, r0, r3
    8254:	add	r3, lr, r3
    8258:	mov	lr, sl
    825c:	orr	r5, r5, r4
    8260:	bic	r4, r0, r2
    8264:	add	r7, r7, r5
    8268:	movw	r5, #45888	; 0xb340
    826c:	movt	r5, #49216	; 0xc040
    8270:	add	r7, r7, r5
    8274:	add	r7, r0, r7, ror #23
    8278:	and	r5, r7, r2
    827c:	add	r2, r1, r2
    8280:	ldr	r1, [sp, #56]	; 0x38
    8284:	orr	r5, r5, r4
    8288:	bic	r4, r7, r0
    828c:	add	r3, r3, r5
    8290:	movw	r5, #23121	; 0x5a51
    8294:	movt	r5, #9822	; 0x265e
    8298:	add	r3, r3, r5
    829c:	add	r3, r7, r3, ror #18
    82a0:	and	r5, r3, r0
    82a4:	add	r0, r9, r0
    82a8:	orr	r5, r5, r4
    82ac:	bic	r4, r3, r7
    82b0:	add	r2, r2, r5
    82b4:	movw	r5, #51114	; 0xc7aa
    82b8:	movt	r5, #59830	; 0xe9b6
    82bc:	add	r2, r2, r5
    82c0:	add	r2, r3, r2, ror #12
    82c4:	and	r5, r2, r7
    82c8:	add	r7, r1, r7
    82cc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    82d0:	orr	r5, r5, r4
    82d4:	bic	r4, r2, r3
    82d8:	add	r0, r0, r5
    82dc:	movw	r5, #4189	; 0x105d
    82e0:	movt	r5, #54831	; 0xd62f
    82e4:	add	r0, r0, r5
    82e8:	add	r0, r2, r0, ror #27
    82ec:	and	r5, r0, r3
    82f0:	add	r3, r6, r3
    82f4:	ldr	r6, [sp, #4]
    82f8:	orr	r5, r5, r4
    82fc:	bic	r4, r0, r2
    8300:	add	r7, r7, r5
    8304:	movw	r5, #5203	; 0x1453
    8308:	movt	r5, #580	; 0x244
    830c:	add	r7, r7, r5
    8310:	add	r7, r0, r7, ror #23
    8314:	and	r5, r7, r2
    8318:	add	r2, ip, r2
    831c:	orr	r5, r5, r4
    8320:	bic	r4, r7, r0
    8324:	add	r3, r3, r5
    8328:	movw	r5, #59009	; 0xe681
    832c:	movt	r5, #55457	; 0xd8a1
    8330:	add	r3, r3, r5
    8334:	add	r3, r7, r3, ror #18
    8338:	and	r5, r3, r0
    833c:	add	r0, r1, r0
    8340:	ldr	r1, [fp, #-44]	; 0xffffffd4
    8344:	orr	r5, r5, r4
    8348:	bic	r4, r3, r7
    834c:	add	r2, r2, r5
    8350:	movw	r5, #64456	; 0xfbc8
    8354:	movt	r5, #59347	; 0xe7d3
    8358:	add	r2, r2, r5
    835c:	add	r2, r3, r2, ror #12
    8360:	and	r5, r2, r7
    8364:	add	r7, sl, r7
    8368:	ldr	sl, [sp, #40]	; 0x28
    836c:	orr	r5, r5, r4
    8370:	bic	r4, r2, r3
    8374:	add	r0, r0, r5
    8378:	movw	r5, #52710	; 0xcde6
    837c:	movt	r5, #8673	; 0x21e1
    8380:	add	r0, r0, r5
    8384:	add	r0, r2, r0, ror #27
    8388:	and	r5, r0, r3
    838c:	add	r3, r1, r3
    8390:	ldr	r1, [fp, #-52]	; 0xffffffcc
    8394:	orr	r5, r5, r4
    8398:	bic	r4, r0, r2
    839c:	add	r7, r7, r5
    83a0:	movw	r5, #2006	; 0x7d6
    83a4:	movt	r5, #49975	; 0xc337
    83a8:	add	r7, r7, r5
    83ac:	add	r7, r0, r7, ror #23
    83b0:	and	r5, r7, r2
    83b4:	add	r2, r8, r2
    83b8:	orr	r5, r5, r4
    83bc:	bic	r4, r7, r0
    83c0:	add	r3, r3, r5
    83c4:	movw	r5, #3463	; 0xd87
    83c8:	movt	r5, #62677	; 0xf4d5
    83cc:	add	r3, r3, r5
    83d0:	add	r3, r7, r3, ror #18
    83d4:	and	r5, r3, r0
    83d8:	add	r0, sl, r0
    83dc:	orr	r5, r5, r4
    83e0:	bic	r4, r3, r7
    83e4:	add	r2, r2, r5
    83e8:	movw	r5, #5357	; 0x14ed
    83ec:	movt	r5, #17754	; 0x455a
    83f0:	add	r2, r2, r5
    83f4:	add	r2, r3, r2, ror #12
    83f8:	and	r5, r2, r7
    83fc:	add	r7, r1, r7
    8400:	ldr	r1, [sp, #52]	; 0x34
    8404:	orr	r5, r5, r4
    8408:	bic	r4, r2, r3
    840c:	add	r0, r0, r5
    8410:	movw	r5, #59653	; 0xe905
    8414:	movt	r5, #43491	; 0xa9e3
    8418:	add	r0, r0, r5
    841c:	add	r0, r2, r0, ror #27
    8420:	and	r5, r0, r3
    8424:	add	r3, r1, r3
    8428:	orr	r5, r5, r4
    842c:	bic	r4, r0, r2
    8430:	add	r7, r7, r5
    8434:	movw	r5, #41976	; 0xa3f8
    8438:	movt	r5, #64751	; 0xfcef
    843c:	add	r7, r7, r5
    8440:	add	r7, r0, r7, ror #23
    8444:	and	r5, r7, r2
    8448:	add	r2, r6, r2
    844c:	orr	r5, r5, r4
    8450:	bic	r4, r7, r0
    8454:	add	r3, r3, r5
    8458:	movw	r5, #729	; 0x2d9
    845c:	movt	r5, #26479	; 0x676f
    8460:	add	r3, r3, r5
    8464:	add	r3, r7, r3, ror #18
    8468:	and	r5, r3, r0
    846c:	add	r0, r9, r0
    8470:	ldr	r9, [sp, #12]
    8474:	orr	r5, r5, r4
    8478:	add	r2, r2, r5
    847c:	movw	r5, #19594	; 0x4c8a
    8480:	movt	r5, #36138	; 0x8d2a
    8484:	add	r2, r2, r5
    8488:	add	r2, r3, r2, ror #12
    848c:	eor	r5, r2, r3
    8490:	eor	r4, r5, r7
    8494:	add	r7, r8, r7
    8498:	ldr	r8, [sp, #56]	; 0x38
    849c:	add	r0, r0, r4
    84a0:	movw	r4, #14658	; 0x3942
    84a4:	movt	r4, #65530	; 0xfffa
    84a8:	add	r0, r0, r4
    84ac:	ldr	r4, [fp, #-40]	; 0xffffffd8
    84b0:	add	r0, r2, r0, ror #28
    84b4:	eor	r5, r5, r0
    84b8:	add	r7, r7, r5
    84bc:	movw	r5, #63105	; 0xf681
    84c0:	movt	r5, #34673	; 0x8771
    84c4:	add	r3, r4, r3
    84c8:	ldr	r4, [fp, #-48]	; 0xffffffd0
    84cc:	add	r7, r7, r5
    84d0:	eor	r5, r0, r2
    84d4:	add	r2, lr, r2
    84d8:	ldr	lr, [sp, #8]
    84dc:	add	r7, r0, r7, ror #21
    84e0:	eor	r5, r5, r7
    84e4:	add	r3, r3, r5
    84e8:	movw	r5, #24866	; 0x6122
    84ec:	movt	r5, #28061	; 0x6d9d
    84f0:	add	r3, r3, r5
    84f4:	eor	r5, r7, r0
    84f8:	add	r0, r4, r0
    84fc:	ldr	r4, [fp, #-36]	; 0xffffffdc
    8500:	add	r3, r7, r3, ror #16
    8504:	eor	r5, r5, r3
    8508:	add	r2, r2, r5
    850c:	movw	r5, #14348	; 0x380c
    8510:	movt	r5, #64997	; 0xfde5
    8514:	add	r2, r2, r5
    8518:	eor	r5, r3, r7
    851c:	add	r7, ip, r7
    8520:	ldr	ip, [fp, #-44]	; 0xffffffd4
    8524:	add	r2, r3, r2, ror #9
    8528:	eor	r5, r5, r2
    852c:	add	r0, r0, r5
    8530:	movw	r5, #59972	; 0xea44
    8534:	movt	r5, #42174	; 0xa4be
    8538:	add	r0, r0, r5
    853c:	eor	r5, r2, r3
    8540:	add	r3, r1, r3
    8544:	ldr	r1, [fp, #-32]	; 0xffffffe0
    8548:	add	r0, r2, r0, ror #28
    854c:	eor	r5, r5, r0
    8550:	add	r7, r7, r5
    8554:	movw	r5, #53161	; 0xcfa9
    8558:	movt	r5, #19422	; 0x4bde
    855c:	add	r7, r7, r5
    8560:	eor	r5, r0, r2
    8564:	add	r2, r8, r2
    8568:	add	r7, r0, r7, ror #21
    856c:	eor	r5, r5, r7
    8570:	add	r3, r3, r5
    8574:	movw	r5, #19296	; 0x4b60
    8578:	movt	r5, #63163	; 0xf6bb
    857c:	add	r3, r3, r5
    8580:	eor	r5, r7, r0
    8584:	add	r0, sl, r0
    8588:	ldr	sl, [fp, #-52]	; 0xffffffcc
    858c:	add	r3, r7, r3, ror #16
    8590:	eor	r5, r5, r3
    8594:	add	r2, r2, r5
    8598:	movw	r5, #48240	; 0xbc70
    859c:	movt	r5, #48831	; 0xbebf
    85a0:	add	r2, r2, r5
    85a4:	eor	r5, r3, r7
    85a8:	add	r7, r4, r7
    85ac:	add	r2, r3, r2, ror #9
    85b0:	eor	r5, r5, r2
    85b4:	add	r0, r0, r5
    85b8:	movw	r5, #32454	; 0x7ec6
    85bc:	movt	r5, #10395	; 0x289b
    85c0:	add	r0, r0, r5
    85c4:	eor	r5, r2, r3
    85c8:	add	r3, ip, r3
    85cc:	add	r0, r2, r0, ror #28
    85d0:	eor	r5, r5, r0
    85d4:	add	r7, r7, r5
    85d8:	movw	r5, #10234	; 0x27fa
    85dc:	movt	r5, #60065	; 0xeaa1
    85e0:	add	r7, r7, r5
    85e4:	eor	r5, r0, r2
    85e8:	add	r2, r9, r2
    85ec:	add	r7, r0, r7, ror #21
    85f0:	eor	r5, r5, r7
    85f4:	add	r3, r3, r5
    85f8:	movw	r5, #12421	; 0x3085
    85fc:	movt	r5, #54511	; 0xd4ef
    8600:	add	r3, r3, r5
    8604:	eor	r5, r7, r0
    8608:	add	r0, r1, r0
    860c:	ldr	r1, [sp, #52]	; 0x34
    8610:	add	r3, r7, r3, ror #16
    8614:	eor	r5, r5, r3
    8618:	add	r2, r2, r5
    861c:	movw	r5, #7429	; 0x1d05
    8620:	movt	r5, #1160	; 0x488
    8624:	add	r2, r2, r5
    8628:	eor	r5, r3, r7
    862c:	add	r7, r6, r7
    8630:	add	r2, r3, r2, ror #9
    8634:	eor	r5, r5, r2
    8638:	add	r0, r0, r5
    863c:	movw	r5, #53305	; 0xd039
    8640:	movt	r5, #55764	; 0xd9d4
    8644:	add	r0, r0, r5
    8648:	eor	r5, r2, r3
    864c:	add	r3, lr, r3
    8650:	add	r0, r2, r0, ror #28
    8654:	eor	r5, r5, r0
    8658:	add	r7, r7, r5
    865c:	movw	r5, #39397	; 0x99e5
    8660:	movt	r5, #59099	; 0xe6db
    8664:	add	r7, r7, r5
    8668:	eor	r5, r0, r2
    866c:	add	r2, sl, r2
    8670:	add	r7, r0, r7, ror #21
    8674:	eor	r5, r5, r7
    8678:	add	r3, r3, r5
    867c:	movw	r5, #31992	; 0x7cf8
    8680:	movt	r5, #8098	; 0x1fa2
    8684:	add	r3, r3, r5
    8688:	eor	r5, r7, r0
    868c:	add	r0, r4, r0
    8690:	add	r3, r7, r3, ror #16
    8694:	eor	r5, r5, r3
    8698:	add	r2, r2, r5
    869c:	movw	r5, #22117	; 0x5665
    86a0:	movt	r5, #50348	; 0xc4ac
    86a4:	add	r2, r2, r5
    86a8:	mvn	r5, r7
    86ac:	add	r7, r1, r7
    86b0:	ldr	r1, [sp]
    86b4:	add	r2, r3, r2, ror #9
    86b8:	orr	r5, r2, r5
    86bc:	eor	r5, r5, r3
    86c0:	add	r0, r0, r5
    86c4:	movw	r5, #8772	; 0x2244
    86c8:	movt	r5, #62505	; 0xf429
    86cc:	add	r0, r0, r5
    86d0:	mvn	r5, r3
    86d4:	add	r3, r1, r3
    86d8:	ldr	r1, [sp, #36]	; 0x24
    86dc:	add	r0, r2, r0, ror #26
    86e0:	orr	r5, r0, r5
    86e4:	eor	r5, r5, r2
    86e8:	add	r7, r7, r5
    86ec:	movw	r5, #65431	; 0xff97
    86f0:	movt	r5, #17194	; 0x432a
    86f4:	add	r7, r7, r5
    86f8:	mvn	r5, r2
    86fc:	add	r2, r1, r2
    8700:	ldr	r1, [fp, #-48]	; 0xffffffd0
    8704:	add	r7, r0, r7, ror #22
    8708:	orr	r5, r7, r5
    870c:	eor	r5, r5, r0
    8710:	add	r3, r3, r5
    8714:	movw	r5, #9127	; 0x23a7
    8718:	movt	r5, #43924	; 0xab94
    871c:	add	r3, r3, r5
    8720:	mvn	r5, r0
    8724:	add	r0, r6, r0
    8728:	movw	r6, #22979	; 0x59c3
    872c:	add	r3, r7, r3, ror #17
    8730:	movt	r6, #25947	; 0x655b
    8734:	orr	r5, r3, r5
    8738:	eor	r5, r5, r7
    873c:	add	r2, r2, r5
    8740:	movw	r5, #41017	; 0xa039
    8744:	movt	r5, #64659	; 0xfc93
    8748:	add	r2, r2, r5
    874c:	mvn	r5, r7
    8750:	add	r7, ip, r7
    8754:	add	r2, r3, r2, ror #11
    8758:	orr	r5, r2, r5
    875c:	eor	r5, r5, r3
    8760:	add	r0, r0, r5
    8764:	ldr	r5, [fp, #-40]	; 0xffffffd8
    8768:	add	r0, r0, r6
    876c:	mvn	r6, r3
    8770:	add	r3, r8, r3
    8774:	add	r0, r2, r0, ror #26
    8778:	orr	r6, r0, r6
    877c:	eor	r6, r6, r2
    8780:	add	r7, r7, r6
    8784:	movw	r6, #52370	; 0xcc92
    8788:	movt	r6, #36620	; 0x8f0c
    878c:	add	r7, r7, r6
    8790:	mvn	r6, r2
    8794:	add	r2, r1, r2
    8798:	ldr	r1, [sp, #44]	; 0x2c
    879c:	add	r7, r0, r7, ror #22
    87a0:	orr	r6, r7, r6
    87a4:	eor	r6, r6, r0
    87a8:	add	r3, r3, r6
    87ac:	movw	r6, #62589	; 0xf47d
    87b0:	movt	r6, #65519	; 0xffef
    87b4:	add	r3, r3, r6
    87b8:	mvn	r6, r0
    87bc:	add	r0, r1, r0
    87c0:	add	r1, lr, r7
    87c4:	add	r3, r7, r3, ror #17
    87c8:	orr	r6, r3, r6
    87cc:	eor	r6, r6, r7
    87d0:	add	r2, r2, r6
    87d4:	movw	r6, #24017	; 0x5dd1
    87d8:	movt	r6, #34180	; 0x8584
    87dc:	add	r2, r2, r6
    87e0:	mvn	r6, r7
    87e4:	ldr	r7, [sp, #40]	; 0x28
    87e8:	add	r2, r3, r2, ror #11
    87ec:	orr	r6, r2, r6
    87f0:	eor	r6, r6, r3
    87f4:	add	r0, r0, r6
    87f8:	movw	r6, #32335	; 0x7e4f
    87fc:	movt	r6, #28584	; 0x6fa8
    8800:	add	r0, r0, r6
    8804:	add	r6, r2, r0, ror #26
    8808:	mvn	r0, r3
    880c:	add	r3, r9, r3
    8810:	orr	r0, r6, r0
    8814:	eor	r0, r0, r2
    8818:	add	r0, r1, r0
    881c:	movw	r1, #59104	; 0xe6e0
    8820:	movt	r1, #65068	; 0xfe2c
    8824:	add	r0, r0, r1
    8828:	add	r1, r6, r0, ror #22
    882c:	mvn	r0, r2
    8830:	add	r2, r7, r2
    8834:	ldr	r7, [sp, #48]	; 0x30
    8838:	orr	r0, r1, r0
    883c:	eor	r0, r0, r6
    8840:	add	r0, r3, r0
    8844:	movw	r3, #17172	; 0x4314
    8848:	movt	r3, #41729	; 0xa301
    884c:	add	r7, r7, r6
    8850:	add	r0, r0, r3
    8854:	add	r3, r1, r0, ror #17
    8858:	mvn	r0, r6
    885c:	ldr	r6, [sp, #16]
    8860:	orr	r0, r3, r0
    8864:	eor	r0, r0, r1
    8868:	add	r0, r2, r0
    886c:	movw	r2, #4513	; 0x11a1
    8870:	movt	r2, #19976	; 0x4e08
    8874:	add	r0, r0, r2
    8878:	mvn	r2, r1
    887c:	add	r1, r5, r1
    8880:	add	r0, r3, r0, ror #11
    8884:	orr	r2, r0, r2
    8888:	eor	r2, r2, r3
    888c:	add	r2, r7, r2
    8890:	movw	r7, #32386	; 0x7e82
    8894:	movt	r7, #63315	; 0xf753
    8898:	add	r2, r2, r7
    889c:	ldr	r7, [sp, #24]
    88a0:	add	r2, r0, r2, ror #26
    88a4:	add	r7, r2, r7
    88a8:	str	r7, [r6]
    88ac:	mvn	r7, r3
    88b0:	add	r3, sl, r3
    88b4:	orr	r7, r2, r7
    88b8:	eor	r7, r7, r0
    88bc:	add	r1, r1, r7
    88c0:	movw	r7, #62005	; 0xf235
    88c4:	movt	r7, #48442	; 0xbd3a
    88c8:	add	r1, r1, r7
    88cc:	ldr	r7, [sp, #28]
    88d0:	add	r1, r2, r1, ror #22
    88d4:	add	r7, r1, r7
    88d8:	str	r7, [r6, #12]
    88dc:	mvn	r7, r0
    88e0:	orr	r7, r1, r7
    88e4:	eor	r7, r7, r2
    88e8:	mvn	r2, r2
    88ec:	add	r3, r3, r7
    88f0:	movw	r7, #53947	; 0xd2bb
    88f4:	movt	r7, #10967	; 0x2ad7
    88f8:	add	r3, r3, r7
    88fc:	ldr	r7, [sp, #32]
    8900:	add	r3, r1, r3, ror #17
    8904:	orr	r2, r3, r2
    8908:	eor	r1, r2, r1
    890c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    8910:	add	r7, r3, r7
    8914:	str	r7, [r6, #8]
    8918:	ldr	r7, [sp, #20]
    891c:	add	r0, r2, r0
    8920:	add	r0, r0, r1
    8924:	movw	r1, #54161	; 0xd391
    8928:	movt	r1, #60294	; 0xeb86
    892c:	add	r7, r3, r7
    8930:	add	r0, r0, r1
    8934:	add	r0, r7, r0, ror #11
    8938:	str	r0, [r6, #4]
    893c:	sub	sp, fp, #28
    8940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8944:	nop	{0}
    8948:	nop	{0}
    894c:	nop	{0}

00008950 <rb_sha256_crypt_r>:
    8950:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8954:	add	fp, sp, #28
    8958:	sub	sp, sp, #4
    895c:	vpush	{d8-d11}
    8960:	sub	sp, sp, #480	; 0x1e0
    8964:	str	r2, [fp, #-516]	; 0xfffffdfc
    8968:	str	r3, [fp, #-532]	; 0xfffffdec
    896c:	mov	r4, r0
    8970:	mov	r2, #3
    8974:	mov	r7, r1
    8978:	ldr	r0, [pc, #3136]	; 95c0 <rb_sha256_crypt_r+0xc70>
    897c:	add	r0, pc, r0
    8980:	bl	5468 <strncmp@plt>
    8984:	ldr	r1, [pc, #3128]	; 95c4 <rb_sha256_crypt_r+0xc74>
    8988:	cmp	r0, #0
    898c:	mov	r2, #7
    8990:	addeq	r7, r7, #3
    8994:	mov	r0, r7
    8998:	add	r1, pc, r1
    899c:	bl	5468 <strncmp@plt>
    89a0:	movw	r1, #5000	; 0x1388
    89a4:	mov	r5, #0
    89a8:	cmp	r0, #0
    89ac:	str	r1, [fp, #-500]	; 0xfffffe0c
    89b0:	beq	89bc <rb_sha256_crypt_r+0x6c>
    89b4:	mov	r0, #0
    89b8:	b	8a00 <rb_sha256_crypt_r+0xb0>
    89bc:	add	r0, r7, #7
    89c0:	sub	r1, fp, #312	; 0x138
    89c4:	mov	r2, #10
    89c8:	bl	509c <strtoul@plt>
    89cc:	ldr	r1, [fp, #-312]	; 0xfffffec8
    89d0:	ldrb	r2, [r1]
    89d4:	cmp	r2, #36	; 0x24
    89d8:	bne	9574 <rb_sha256_crypt_r+0xc24>
    89dc:	movw	r2, #51711	; 0xc9ff
    89e0:	add	r7, r1, #1
    89e4:	movt	r2, #15258	; 0x3b9a
    89e8:	cmp	r0, r2
    89ec:	movcc	r2, r0
    89f0:	mov	r0, #1
    89f4:	cmp	r2, #1000	; 0x3e8
    89f8:	movls	r2, #1000	; 0x3e8
    89fc:	str	r2, [fp, #-500]	; 0xfffffe0c
    8a00:	str	r0, [fp, #-536]	; 0xfffffde8
    8a04:	ldr	r1, [pc, #3004]	; 95c8 <rb_sha256_crypt_r+0xc78>
    8a08:	mov	r0, r7
    8a0c:	add	r1, pc, r1
    8a10:	bl	5438 <strcspn@plt>
    8a14:	mov	r6, r0
    8a18:	cmp	r0, #16
    8a1c:	str	r0, [fp, #-540]	; 0xfffffde4
    8a20:	mov	r0, r4
    8a24:	movcs	r6, #16
    8a28:	bl	5084 <strlen@plt>
    8a2c:	mov	sl, r0
    8a30:	tst	r4, #3
    8a34:	beq	8a60 <rb_sha256_crypt_r+0x110>
    8a38:	add	r0, sl, #11
    8a3c:	bic	r0, r0, #7
    8a40:	sub	r0, sp, r0
    8a44:	add	r5, r0, #4
    8a48:	mov	sp, r0
    8a4c:	mov	r0, r5
    8a50:	mov	r1, r4
    8a54:	mov	r2, sl
    8a58:	bl	50a8 <memcpy@plt>
    8a5c:	mov	r4, r5
    8a60:	mov	r9, #0
    8a64:	tst	r7, #3
    8a68:	str	r5, [fp, #-524]	; 0xfffffdf4
    8a6c:	beq	8aa0 <rb_sha256_crypt_r+0x150>
    8a70:	add	r0, r6, #11
    8a74:	bic	r0, r0, #7
    8a78:	sub	r0, sp, r0
    8a7c:	add	r5, r0, #4
    8a80:	mov	sp, r0
    8a84:	mov	r0, r5
    8a88:	mov	r1, r7
    8a8c:	mov	r2, r6
    8a90:	bl	50a8 <memcpy@plt>
    8a94:	mov	r7, r5
    8a98:	str	r5, [fp, #-528]	; 0xfffffdf0
    8a9c:	b	8aa8 <rb_sha256_crypt_r+0x158>
    8aa0:	mov	r0, #0
    8aa4:	str	r0, [fp, #-528]	; 0xfffffdf0
    8aa8:	add	r0, pc, #704	; 0x2c0
    8aac:	sub	r5, fp, #312	; 0x138
    8ab0:	mov	r1, #36	; 0x24
    8ab4:	vld1.64	{d8-d9}, [r0 :128]
    8ab8:	add	r0, pc, #704	; 0x2c0
    8abc:	mov	r2, r5
    8ac0:	vld1.64	{d10-d11}, [r0 :128]
    8ac4:	add	r0, r5, #16
    8ac8:	str	r0, [fp, #-504]	; 0xfffffe08
    8acc:	vst1.64	{d8-d9}, [r0]
    8ad0:	mov	r0, r5
    8ad4:	vst1.32	{d10-d11}, [r0], r1
    8ad8:	mov	r1, sl
    8adc:	str	r9, [r0]
    8ae0:	mov	r0, r4
    8ae4:	str	r9, [fp, #-280]	; 0xfffffee8
    8ae8:	str	r9, [fp, #-272]	; 0xfffffef0
    8aec:	bl	95dc <rb_sha256_process_bytes>
    8af0:	mov	r0, r7
    8af4:	mov	r1, r6
    8af8:	mov	r2, r5
    8afc:	bl	95dc <rb_sha256_process_bytes>
    8b00:	sub	r8, fp, #488	; 0x1e8
    8b04:	mov	r1, #36	; 0x24
    8b08:	mov	r0, r8
    8b0c:	mov	r2, r8
    8b10:	vst1.32	{d10-d11}, [r0], r1
    8b14:	mov	r1, sl
    8b18:	str	r9, [r0]
    8b1c:	add	r0, r8, #16
    8b20:	vst1.64	{d8-d9}, [r0]
    8b24:	str	r0, [fp, #-512]	; 0xfffffe00
    8b28:	mov	r0, r4
    8b2c:	str	r9, [fp, #-456]	; 0xfffffe38
    8b30:	str	r9, [fp, #-448]	; 0xfffffe40
    8b34:	bl	95dc <rb_sha256_process_bytes>
    8b38:	mov	r0, r7
    8b3c:	mov	r1, r6
    8b40:	mov	r2, r8
    8b44:	str	r6, [fp, #-508]	; 0xfffffe04
    8b48:	bl	95dc <rb_sha256_process_bytes>
    8b4c:	mov	r0, r4
    8b50:	mov	r1, sl
    8b54:	mov	r2, r8
    8b58:	bl	95dc <rb_sha256_process_bytes>
    8b5c:	sub	r1, fp, #100	; 0x64
    8b60:	mov	r0, r8
    8b64:	bl	97b8 <rb_sha256_finish_ctx>
    8b68:	cmp	sl, #33	; 0x21
    8b6c:	mov	r1, sl
    8b70:	mov	r9, r7
    8b74:	str	r7, [fp, #-520]	; 0xfffffdf8
    8b78:	bcc	8bb8 <rb_sha256_crypt_r+0x268>
    8b7c:	sub	r0, sl, #33	; 0x21
    8b80:	sub	r5, fp, #100	; 0x64
    8b84:	sub	r7, fp, #312	; 0x138
    8b88:	mov	r6, sl
    8b8c:	bic	r9, r0, #31
    8b90:	mov	r0, r5
    8b94:	mov	r1, #32
    8b98:	mov	r2, r7
    8b9c:	bl	95dc <rb_sha256_process_bytes>
    8ba0:	sub	r6, r6, #32
    8ba4:	cmp	r6, #32
    8ba8:	bhi	8b90 <rb_sha256_crypt_r+0x240>
    8bac:	sub	r0, sl, #32
    8bb0:	sub	r1, r0, r9
    8bb4:	ldr	r9, [fp, #-520]	; 0xfffffdf8
    8bb8:	sub	r7, fp, #312	; 0x138
    8bbc:	sub	r0, fp, #100	; 0x64
    8bc0:	mov	r2, r7
    8bc4:	bl	95dc <rb_sha256_process_bytes>
    8bc8:	cmp	sl, #0
    8bcc:	str	sl, [fp, #-492]	; 0xfffffe14
    8bd0:	beq	8d00 <rb_sha256_crypt_r+0x3b0>
    8bd4:	mov	r6, sl
    8bd8:	sub	r5, fp, #312	; 0x138
    8bdc:	mov	r7, #0
    8be0:	sub	sl, fp, #100	; 0x64
    8be4:	tst	r6, #1
    8be8:	bne	8bf8 <rb_sha256_crypt_r+0x2a8>
    8bec:	ldr	r1, [fp, #-492]	; 0xfffffe14
    8bf0:	mov	r0, r4
    8bf4:	b	8c00 <rb_sha256_crypt_r+0x2b0>
    8bf8:	mov	r0, sl
    8bfc:	mov	r1, #32
    8c00:	mov	r2, r5
    8c04:	bl	95dc <rb_sha256_process_bytes>
    8c08:	lsr	r0, r6, #1
    8c0c:	cmp	r7, r6, lsr #1
    8c10:	mov	r6, r0
    8c14:	bne	8be4 <rb_sha256_crypt_r+0x294>
    8c18:	sub	r0, fp, #312	; 0x138
    8c1c:	sub	r1, fp, #100	; 0x64
    8c20:	bl	97b8 <rb_sha256_finish_ctx>
    8c24:	add	r0, pc, #340	; 0x154
    8c28:	add	r1, pc, #320	; 0x140
    8c2c:	ldr	sl, [fp, #-492]	; 0xfffffe14
    8c30:	sub	r7, fp, #312	; 0x138
    8c34:	vld1.64	{d16-d17}, [r0 :128]
    8c38:	vld1.64	{d18-d19}, [r1 :128]
    8c3c:	mov	r0, #40	; 0x28
    8c40:	mov	r1, r8
    8c44:	cmp	sl, #0
    8c48:	vst1.32	{d16-d17}, [r1], r0
    8c4c:	ldr	r0, [fp, #-512]	; 0xfffffe00
    8c50:	vst1.32	{d18-d19}, [r0]
    8c54:	mov	r0, #0
    8c58:	str	r0, [r1]
    8c5c:	str	r0, [fp, #-456]	; 0xfffffe38
    8c60:	str	r0, [fp, #-452]	; 0xfffffe3c
    8c64:	beq	8d40 <rb_sha256_crypt_r+0x3f0>
    8c68:	sub	r5, fp, #488	; 0x1e8
    8c6c:	mov	r6, sl
    8c70:	mov	r0, r4
    8c74:	mov	r1, sl
    8c78:	mov	r2, r5
    8c7c:	bl	95dc <rb_sha256_process_bytes>
    8c80:	subs	r6, r6, #1
    8c84:	bne	8c70 <rb_sha256_crypt_r+0x320>
    8c88:	sub	r5, fp, #136	; 0x88
    8c8c:	sub	r0, fp, #488	; 0x1e8
    8c90:	mov	r1, r5
    8c94:	bl	97b8 <rb_sha256_finish_ctx>
    8c98:	add	r0, sl, #7
    8c9c:	bic	r0, r0, #7
    8ca0:	sub	r1, sp, r0
    8ca4:	mov	sp, r1
    8ca8:	ldr	r6, [fp, #-508]	; 0xfffffe04
    8cac:	cmp	sl, #32
    8cb0:	str	r1, [fp, #-496]	; 0xfffffe10
    8cb4:	bcc	8d90 <rb_sha256_crypt_r+0x440>
    8cb8:	sub	ip, sl, #32
    8cbc:	mov	r3, #0
    8cc0:	bic	r2, ip, #31
    8cc4:	add	r0, r1, r2
    8cc8:	add	r0, r0, #32
    8ccc:	mov	r4, r5
    8cd0:	sub	r7, r1, r3
    8cd4:	sub	r3, r3, #32
    8cd8:	vld1.64	{d16-d17}, [r4]!
    8cdc:	vld1.64	{d18-d19}, [r4]
    8ce0:	vst1.64	{d16-d17}, [r7]!
    8ce4:	vst1.64	{d18-d19}, [r7]
    8ce8:	add	r7, sl, r3
    8cec:	cmp	r7, #31
    8cf0:	bhi	8ccc <rb_sha256_crypt_r+0x37c>
    8cf4:	sub	r2, ip, r2
    8cf8:	sub	r7, fp, #312	; 0x138
    8cfc:	b	8d98 <rb_sha256_crypt_r+0x448>
    8d00:	sub	r0, fp, #312	; 0x138
    8d04:	sub	r1, fp, #100	; 0x64
    8d08:	bl	97b8 <rb_sha256_finish_ctx>
    8d0c:	add	r0, pc, #108	; 0x6c
    8d10:	add	r1, pc, #88	; 0x58
    8d14:	vld1.64	{d16-d17}, [r0 :128]
    8d18:	vld1.64	{d18-d19}, [r1 :128]
    8d1c:	mov	r0, #40	; 0x28
    8d20:	mov	r1, r8
    8d24:	vst1.32	{d16-d17}, [r1], r0
    8d28:	ldr	r0, [fp, #-512]	; 0xfffffe00
    8d2c:	vst1.32	{d18-d19}, [r0]
    8d30:	mov	r0, #0
    8d34:	str	r0, [r1]
    8d38:	str	r0, [fp, #-456]	; 0xfffffe38
    8d3c:	str	r0, [fp, #-452]	; 0xfffffe3c
    8d40:	sub	r0, fp, #488	; 0x1e8
    8d44:	sub	r1, fp, #136	; 0x88
    8d48:	bl	97b8 <rb_sha256_finish_ctx>
    8d4c:	add	r0, sl, #7
    8d50:	bic	r0, r0, #7
    8d54:	sub	r0, sp, r0
    8d58:	mov	sp, r0
    8d5c:	ldr	r6, [fp, #-508]	; 0xfffffe04
    8d60:	mov	r2, #0
    8d64:	str	r0, [fp, #-496]	; 0xfffffe10
    8d68:	b	8d98 <rb_sha256_crypt_r+0x448>
    8d6c:	nop	{0}
    8d70:	.word	0x510e527f
    8d74:	.word	0x9b05688c
    8d78:	.word	0x1f83d9ab
    8d7c:	.word	0x5be0cd19
    8d80:	.word	0x6a09e667
    8d84:	.word	0xbb67ae85
    8d88:	.word	0x3c6ef372
    8d8c:	.word	0xa54ff53a
    8d90:	mov	r0, r1
    8d94:	mov	r2, sl
    8d98:	sub	r1, fp, #136	; 0x88
    8d9c:	bl	50a8 <memcpy@plt>
    8da0:	sub	r0, pc, #40	; 0x28
    8da4:	sub	r1, pc, #60	; 0x3c
    8da8:	mov	r4, #0
    8dac:	vld1.64	{d16-d17}, [r0 :128]
    8db0:	vld1.64	{d18-d19}, [r1 :128]
    8db4:	mov	r0, #40	; 0x28
    8db8:	mov	r1, r8
    8dbc:	vst1.32	{d16-d17}, [r1], r0
    8dc0:	ldr	r0, [fp, #-512]	; 0xfffffe00
    8dc4:	vst1.32	{d18-d19}, [r0]
    8dc8:	str	r4, [r1]
    8dcc:	str	r4, [fp, #-456]	; 0xfffffe38
    8dd0:	str	r4, [fp, #-452]	; 0xfffffe3c
    8dd4:	mov	r0, r9
    8dd8:	mov	r1, r6
    8ddc:	mov	r2, r8
    8de0:	bl	95dc <rb_sha256_process_bytes>
    8de4:	ldrb	r0, [fp, #-100]	; 0xffffff9c
    8de8:	add	r4, r4, #1
    8dec:	add	r0, r0, #16
    8df0:	cmp	r4, r0
    8df4:	bcc	8dd4 <rb_sha256_crypt_r+0x484>
    8df8:	sub	r4, fp, #136	; 0x88
    8dfc:	sub	r0, fp, #488	; 0x1e8
    8e00:	mov	r1, r4
    8e04:	bl	97b8 <rb_sha256_finish_ctx>
    8e08:	add	r0, r6, #7
    8e0c:	bic	r0, r0, #7
    8e10:	sub	r0, sp, r0
    8e14:	mov	sp, r0
    8e18:	cmp	r6, #32
    8e1c:	bcc	8e70 <rb_sha256_crypt_r+0x520>
    8e20:	ldr	r3, [fp, #-540]	; 0xfffffde4
    8e24:	mvn	r1, #32
    8e28:	mvn	r2, r3
    8e2c:	cmn	r2, #17
    8e30:	mvnls	r2, #16
    8e34:	sub	r5, r1, r2
    8e38:	mov	r2, r3
    8e3c:	mov	r1, #32
    8e40:	mov	r3, r0
    8e44:	mov	r6, r4
    8e48:	sub	r2, r2, #32
    8e4c:	add	r7, r3, #16
    8e50:	vld1.8	{d16-d17}, [r6]!
    8e54:	cmp	r2, #31
    8e58:	vld1.64	{d18-d19}, [r6]
    8e5c:	vst1.8	{d16-d17}, [r3], r1
    8e60:	vst1.8	{d18-d19}, [r7]
    8e64:	bhi	8e44 <rb_sha256_crypt_r+0x4f4>
    8e68:	add	r6, r5, #32
    8e6c:	sub	r7, fp, #312	; 0x138
    8e70:	sub	r1, fp, #136	; 0x88
    8e74:	mov	r2, r6
    8e78:	str	r0, [fp, #-512]	; 0xfffffe00
    8e7c:	bl	50a8 <memcpy@plt>
    8e80:	ldr	r0, [fp, #-500]	; 0xfffffe0c
    8e84:	cmp	r0, #0
    8e88:	beq	8f98 <rb_sha256_crypt_r+0x648>
    8e8c:	mov	r4, #0
    8e90:	sub	r6, fp, #100	; 0x64
    8e94:	mov	r8, #0
    8e98:	sub	r0, pc, #288	; 0x120
    8e9c:	mov	r1, #40	; 0x28
    8ea0:	mov	r2, r7
    8ea4:	ands	r9, r8, #1
    8ea8:	vld1.64	{d16-d17}, [r0 :128]
    8eac:	sub	r0, pc, #324	; 0x144
    8eb0:	vld1.64	{d18-d19}, [r0 :128]
    8eb4:	mov	r0, r7
    8eb8:	vst1.32	{d16-d17}, [r0], r1
    8ebc:	ldr	r1, [fp, #-504]	; 0xfffffe08
    8ec0:	vst1.32	{d18-d19}, [r1]
    8ec4:	str	r4, [r0]
    8ec8:	movw	r0, #18725	; 0x4925
    8ecc:	str	r4, [fp, #-280]	; 0xfffffee8
    8ed0:	str	r4, [fp, #-276]	; 0xfffffeec
    8ed4:	movt	r0, #9362	; 0x2492
    8ed8:	umull	r0, r1, r8, r0
    8edc:	sub	r0, r8, r1
    8ee0:	add	r5, r1, r0, lsr #1
    8ee4:	lsr	r0, r5, #2
    8ee8:	lsl	sl, r0, #3
    8eec:	movw	r0, #43691	; 0xaaab
    8ef0:	movt	r0, #43690	; 0xaaaa
    8ef4:	umull	r0, r1, r8, r0
    8ef8:	lsr	r0, r1, #1
    8efc:	add	r7, r0, r0, lsl #1
    8f00:	beq	8f10 <rb_sha256_crypt_r+0x5c0>
    8f04:	ldr	r0, [fp, #-496]	; 0xfffffe10
    8f08:	ldr	r1, [fp, #-492]	; 0xfffffe14
    8f0c:	b	8f18 <rb_sha256_crypt_r+0x5c8>
    8f10:	mov	r0, r6
    8f14:	mov	r1, #32
    8f18:	bl	95dc <rb_sha256_process_bytes>
    8f1c:	cmp	r7, r8
    8f20:	sub	r5, sl, r5, lsr #2
    8f24:	sub	r7, fp, #312	; 0x138
    8f28:	beq	8f3c <rb_sha256_crypt_r+0x5ec>
    8f2c:	ldr	r0, [fp, #-512]	; 0xfffffe00
    8f30:	ldr	r1, [fp, #-508]	; 0xfffffe04
    8f34:	mov	r2, r7
    8f38:	bl	95dc <rb_sha256_process_bytes>
    8f3c:	ldr	sl, [fp, #-492]	; 0xfffffe14
    8f40:	cmp	r5, r8
    8f44:	beq	8f58 <rb_sha256_crypt_r+0x608>
    8f48:	ldr	r0, [fp, #-496]	; 0xfffffe10
    8f4c:	mov	r1, sl
    8f50:	mov	r2, r7
    8f54:	bl	95dc <rb_sha256_process_bytes>
    8f58:	cmp	r9, #0
    8f5c:	beq	8f6c <rb_sha256_crypt_r+0x61c>
    8f60:	mov	r0, r6
    8f64:	mov	r1, #32
    8f68:	b	8f74 <rb_sha256_crypt_r+0x624>
    8f6c:	ldr	r0, [fp, #-496]	; 0xfffffe10
    8f70:	mov	r1, sl
    8f74:	mov	r2, r7
    8f78:	bl	95dc <rb_sha256_process_bytes>
    8f7c:	mov	r0, r7
    8f80:	mov	r1, r6
    8f84:	bl	97b8 <rb_sha256_finish_ctx>
    8f88:	ldr	r0, [fp, #-500]	; 0xfffffe0c
    8f8c:	add	r8, r8, #1
    8f90:	cmp	r0, r8
    8f94:	bne	8e98 <rb_sha256_crypt_r+0x548>
    8f98:	ldr	r6, [fp, #-532]	; 0xfffffdec
    8f9c:	ldr	r5, [fp, #-516]	; 0xfffffdfc
    8fa0:	mov	r1, #0
    8fa4:	mov	r9, #0
    8fa8:	bic	r4, r6, r6, asr #31
    8fac:	mov	r0, r5
    8fb0:	mov	r2, r4
    8fb4:	bl	4ee0 <memset@plt>
    8fb8:	ldr	r1, [pc, #1548]	; 95cc <rb_sha256_crypt_r+0xc7c>
    8fbc:	mov	r0, r5
    8fc0:	mov	r2, r4
    8fc4:	add	r1, pc, r1
    8fc8:	bl	4e38 <strncpy@plt>
    8fcc:	mov	r0, r5
    8fd0:	bl	5084 <strlen@plt>
    8fd4:	adds	r7, r5, r0
    8fd8:	ldr	r0, [fp, #-536]	; 0xfffffde8
    8fdc:	sub	r8, r6, #3
    8fe0:	addeq	r7, r5, r4
    8fe4:	cmp	r0, #0
    8fe8:	beq	9020 <rb_sha256_crypt_r+0x6d0>
    8fec:	sub	sp, sp, #8
    8ff0:	ldr	r0, [fp, #-500]	; 0xfffffe0c
    8ff4:	bic	r1, r8, r8, asr #31
    8ff8:	str	r0, [sp]
    8ffc:	mov	r0, r7
    9000:	ldr	r2, [pc, #1480]	; 95d0 <rb_sha256_crypt_r+0xc80>
    9004:	ldr	r3, [pc, #1480]	; 95d4 <rb_sha256_crypt_r+0xc84>
    9008:	add	r2, pc, r2
    900c:	add	r3, pc, r3
    9010:	bl	5408 <snprintf@plt>
    9014:	add	sp, sp, #8
    9018:	sub	r8, r8, r0
    901c:	add	r7, r7, r0
    9020:	ldr	r6, [fp, #-508]	; 0xfffffe04
    9024:	mov	r0, r7
    9028:	mov	r1, #0
    902c:	mov	r2, r6
    9030:	bl	4ee0 <memset@plt>
    9034:	bic	r5, r8, r8, asr #31
    9038:	ldr	r1, [fp, #-520]	; 0xfffffdf8
    903c:	mov	r4, r6
    9040:	mov	r0, r7
    9044:	cmp	r5, r6
    9048:	movcc	r4, r5
    904c:	mov	r2, r4
    9050:	bl	4e38 <strncpy@plt>
    9054:	ldr	r7, [fp, #-516]	; 0xfffffdfc
    9058:	mov	r0, r7
    905c:	bl	5084 <strlen@plt>
    9060:	adds	r0, r7, r0
    9064:	sub	r1, r8, r4
    9068:	mov	r2, r0
    906c:	moveq	r9, r6
    9070:	addeq	r2, r2, r6
    9074:	cmp	r1, #1
    9078:	blt	9484 <rb_sha256_crypt_r+0xb34>
    907c:	mov	r1, #36	; 0x24
    9080:	strb	r1, [r0, r9]
    9084:	beq	9484 <rb_sha256_crypt_r+0xb34>
    9088:	ldr	r0, [fp, #-540]	; 0xfffffde4
    908c:	mvn	ip, r5
    9090:	ldrb	r3, [fp, #-90]	; 0xffffffa6
    9094:	ldrb	r6, [fp, #-80]	; 0xffffffb0
    9098:	mvn	r9, r0
    909c:	lsl	r3, r3, #8
    90a0:	cmp	ip, r9
    90a4:	mov	r0, r9
    90a8:	movhi	r0, ip
    90ac:	cmn	r0, #17
    90b0:	mvnls	r0, #16
    90b4:	add	r7, r8, r0
    90b8:	ldrb	r0, [fp, #-100]	; 0xffffff9c
    90bc:	ldr	lr, [pc, #1300]	; 95d8 <rb_sha256_crypt_r+0xc88>
    90c0:	orr	r0, r3, r0, lsl #16
    90c4:	add	r3, r2, #1
    90c8:	add	lr, pc, lr
    90cc:	orr	r5, r0, r6
    90d0:	mov	r6, #0
    90d4:	and	r0, r5, #63	; 0x3f
    90d8:	add	r4, r7, r6
    90dc:	ldrb	r0, [lr, r0]
    90e0:	cmp	r4, #2
    90e4:	strb	r0, [r3, -r6]
    90e8:	sub	r0, r6, #1
    90ec:	blt	9104 <rb_sha256_crypt_r+0x7b4>
    90f0:	add	r4, r6, #4
    90f4:	lsr	r5, r5, #6
    90f8:	mov	r6, r0
    90fc:	cmp	r4, #1
    9100:	bhi	90d4 <rb_sha256_crypt_r+0x784>
    9104:	cmp	ip, r9
    9108:	mov	r5, r9
    910c:	mvn	r4, #16
    9110:	ldr	r6, [fp, #-508]	; 0xfffffe04
    9114:	movhi	r5, ip
    9118:	cmn	r5, #17
    911c:	movls	r5, r4
    9120:	add	r5, r8, r5
    9124:	add	r5, r5, r0
    9128:	add	r5, r5, #1
    912c:	cmp	r5, #2
    9130:	blt	9484 <rb_sha256_crypt_r+0xb34>
    9134:	cmp	ip, r9
    9138:	mov	r5, r9
    913c:	ldrb	r6, [fp, #-79]	; 0xffffffb1
    9140:	movhi	r5, ip
    9144:	cmn	r5, #17
    9148:	movhi	r4, r5
    914c:	ldrb	r5, [fp, #-89]	; 0xffffffa7
    9150:	add	r7, r8, r4
    9154:	ldrb	r4, [fp, #-99]	; 0xffffff9d
    9158:	lsl	r4, r4, #8
    915c:	orr	r4, r4, r6, lsl #16
    9160:	orr	r5, r4, r5
    9164:	mvn	r4, #0
    9168:	and	r6, r5, #63	; 0x3f
    916c:	sub	r1, r2, r0
    9170:	ldrb	r6, [lr, r6]
    9174:	strb	r6, [r1, #1]
    9178:	add	r1, r7, r0
    917c:	sub	r0, r0, #1
    9180:	cmp	r1, #2
    9184:	blt	919c <rb_sha256_crypt_r+0x84c>
    9188:	add	r1, r4, #5
    918c:	sub	r4, r4, #1
    9190:	lsr	r5, r5, #6
    9194:	cmp	r1, #1
    9198:	bhi	9168 <rb_sha256_crypt_r+0x818>
    919c:	cmp	ip, r9
    91a0:	mov	r1, r9
    91a4:	mvn	r2, #16
    91a8:	ldr	r6, [fp, #-508]	; 0xfffffe04
    91ac:	movhi	r1, ip
    91b0:	cmn	r1, #17
    91b4:	movls	r1, r2
    91b8:	add	r1, r8, r1
    91bc:	add	r1, r1, r0
    91c0:	add	r1, r1, #1
    91c4:	cmp	r1, #2
    91c8:	blt	9484 <rb_sha256_crypt_r+0xb34>
    91cc:	cmp	ip, r9
    91d0:	mov	r1, r9
    91d4:	ldrb	r5, [fp, #-78]	; 0xffffffb2
    91d8:	ldrb	r4, [fp, #-88]	; 0xffffffa8
    91dc:	movhi	r1, ip
    91e0:	cmn	r1, #17
    91e4:	movhi	r2, r1
    91e8:	ldrb	r1, [fp, #-98]	; 0xffffff9e
    91ec:	lsl	r5, r5, #8
    91f0:	add	r2, r8, r2
    91f4:	orr	r4, r5, r4, lsl #16
    91f8:	mov	r5, #4
    91fc:	orr	r7, r4, r1
    9200:	and	r1, r7, #63	; 0x3f
    9204:	ldrb	r1, [lr, r1]
    9208:	strb	r1, [r3, -r0]
    920c:	add	r1, r2, r0
    9210:	sub	r0, r0, #1
    9214:	cmp	r1, #2
    9218:	blt	9228 <rb_sha256_crypt_r+0x8d8>
    921c:	lsr	r7, r7, #6
    9220:	subs	r5, r5, #1
    9224:	bhi	9200 <rb_sha256_crypt_r+0x8b0>
    9228:	cmp	ip, r9
    922c:	movhi	r9, ip
    9230:	cmn	r9, #17
    9234:	mvnls	r9, #16
    9238:	add	r1, r8, r9
    923c:	add	r1, r1, r0
    9240:	add	r1, r1, #1
    9244:	cmp	r1, #2
    9248:	blt	9484 <rb_sha256_crypt_r+0xb34>
    924c:	sub	r2, r3, r0
    9250:	ldrb	r3, [fp, #-87]	; 0xffffffa9
    9254:	ldrb	r0, [fp, #-97]	; 0xffffff9f
    9258:	ldrb	r7, [fp, #-77]	; 0xffffffb3
    925c:	lsl	r3, r3, #8
    9260:	orr	r0, r3, r0, lsl #16
    9264:	orr	r3, r0, r7
    9268:	mov	r7, #4
    926c:	and	r0, r3, #63	; 0x3f
    9270:	sub	r1, r1, #1
    9274:	ldrb	r0, [lr, r0]
    9278:	cmp	r1, #2
    927c:	strb	r0, [r2], #1
    9280:	blt	9290 <rb_sha256_crypt_r+0x940>
    9284:	lsr	r3, r3, #6
    9288:	subs	r7, r7, #1
    928c:	bhi	926c <rb_sha256_crypt_r+0x91c>
    9290:	cmp	r1, #2
    9294:	blt	9484 <rb_sha256_crypt_r+0xb34>
    9298:	ldrb	r0, [fp, #-96]	; 0xffffffa0
    929c:	ldrb	r7, [fp, #-76]	; 0xffffffb4
    92a0:	ldrb	r3, [fp, #-86]	; 0xffffffaa
    92a4:	lsl	r0, r0, #8
    92a8:	orr	r0, r0, r7, lsl #16
    92ac:	mov	r7, #4
    92b0:	orr	r3, r0, r3
    92b4:	and	r0, r3, #63	; 0x3f
    92b8:	sub	r1, r1, #1
    92bc:	ldrb	r0, [lr, r0]
    92c0:	cmp	r1, #2
    92c4:	strb	r0, [r2], #1
    92c8:	blt	92d8 <rb_sha256_crypt_r+0x988>
    92cc:	lsr	r3, r3, #6
    92d0:	subs	r7, r7, #1
    92d4:	bhi	92b4 <rb_sha256_crypt_r+0x964>
    92d8:	cmp	r1, #2
    92dc:	blt	9484 <rb_sha256_crypt_r+0xb34>
    92e0:	ldrb	r7, [fp, #-75]	; 0xffffffb5
    92e4:	ldrb	r3, [fp, #-85]	; 0xffffffab
    92e8:	ldrb	r0, [fp, #-95]	; 0xffffffa1
    92ec:	lsl	r7, r7, #8
    92f0:	orr	r3, r7, r3, lsl #16
    92f4:	mov	r7, #4
    92f8:	orr	r3, r3, r0
    92fc:	and	r0, r3, #63	; 0x3f
    9300:	sub	r1, r1, #1
    9304:	ldrb	r0, [lr, r0]
    9308:	cmp	r1, #2
    930c:	strb	r0, [r2], #1
    9310:	blt	9320 <rb_sha256_crypt_r+0x9d0>
    9314:	lsr	r3, r3, #6
    9318:	subs	r7, r7, #1
    931c:	bhi	92fc <rb_sha256_crypt_r+0x9ac>
    9320:	cmp	r1, #2
    9324:	blt	9484 <rb_sha256_crypt_r+0xb34>
    9328:	ldrb	r3, [fp, #-84]	; 0xffffffac
    932c:	ldrb	r0, [fp, #-94]	; 0xffffffa2
    9330:	ldrb	r7, [fp, #-74]	; 0xffffffb6
    9334:	lsl	r3, r3, #8
    9338:	orr	r0, r3, r0, lsl #16
    933c:	orr	r3, r0, r7
    9340:	mov	r7, #4
    9344:	and	r0, r3, #63	; 0x3f
    9348:	sub	r1, r1, #1
    934c:	ldrb	r0, [lr, r0]
    9350:	cmp	r1, #2
    9354:	strb	r0, [r2], #1
    9358:	blt	9368 <rb_sha256_crypt_r+0xa18>
    935c:	lsr	r3, r3, #6
    9360:	subs	r7, r7, #1
    9364:	bhi	9344 <rb_sha256_crypt_r+0x9f4>
    9368:	cmp	r1, #2
    936c:	blt	9484 <rb_sha256_crypt_r+0xb34>
    9370:	ldrb	r0, [fp, #-93]	; 0xffffffa3
    9374:	ldrb	r7, [fp, #-73]	; 0xffffffb7
    9378:	ldrb	r3, [fp, #-83]	; 0xffffffad
    937c:	lsl	r0, r0, #8
    9380:	orr	r0, r0, r7, lsl #16
    9384:	mov	r7, #4
    9388:	orr	r3, r0, r3
    938c:	and	r0, r3, #63	; 0x3f
    9390:	sub	r1, r1, #1
    9394:	ldrb	r0, [lr, r0]
    9398:	cmp	r1, #2
    939c:	strb	r0, [r2], #1
    93a0:	blt	93b0 <rb_sha256_crypt_r+0xa60>
    93a4:	lsr	r3, r3, #6
    93a8:	subs	r7, r7, #1
    93ac:	bhi	938c <rb_sha256_crypt_r+0xa3c>
    93b0:	cmp	r1, #2
    93b4:	blt	9484 <rb_sha256_crypt_r+0xb34>
    93b8:	ldrb	r7, [fp, #-72]	; 0xffffffb8
    93bc:	ldrb	r3, [fp, #-82]	; 0xffffffae
    93c0:	ldrb	r0, [fp, #-92]	; 0xffffffa4
    93c4:	lsl	r7, r7, #8
    93c8:	orr	r3, r7, r3, lsl #16
    93cc:	mov	r7, #4
    93d0:	orr	r3, r3, r0
    93d4:	and	r0, r3, #63	; 0x3f
    93d8:	sub	r1, r1, #1
    93dc:	ldrb	r0, [lr, r0]
    93e0:	cmp	r1, #2
    93e4:	strb	r0, [r2], #1
    93e8:	blt	93f8 <rb_sha256_crypt_r+0xaa8>
    93ec:	lsr	r3, r3, #6
    93f0:	subs	r7, r7, #1
    93f4:	bhi	93d4 <rb_sha256_crypt_r+0xa84>
    93f8:	cmp	r1, #2
    93fc:	blt	9484 <rb_sha256_crypt_r+0xb34>
    9400:	ldrb	r3, [fp, #-81]	; 0xffffffaf
    9404:	ldrb	r0, [fp, #-91]	; 0xffffffa5
    9408:	ldrb	r7, [fp, #-71]	; 0xffffffb9
    940c:	lsl	r3, r3, #8
    9410:	orr	r0, r3, r0, lsl #16
    9414:	orr	r3, r0, r7
    9418:	mov	r7, #4
    941c:	and	r0, r3, #63	; 0x3f
    9420:	sub	r1, r1, #1
    9424:	ldrb	r0, [lr, r0]
    9428:	cmp	r1, #2
    942c:	strb	r0, [r2], #1
    9430:	blt	9440 <rb_sha256_crypt_r+0xaf0>
    9434:	lsr	r3, r3, #6
    9438:	subs	r7, r7, #1
    943c:	bhi	941c <rb_sha256_crypt_r+0xacc>
    9440:	cmp	r1, #2
    9444:	blt	9484 <rb_sha256_crypt_r+0xb34>
    9448:	ldrb	r0, [fp, #-70]	; 0xffffffba
    944c:	ldrb	r3, [fp, #-69]	; 0xffffffbb
    9450:	mov	r7, #3
    9454:	orr	r3, r0, r3, lsl #8
    9458:	and	r0, r3, #63	; 0x3f
    945c:	sub	r1, r1, #1
    9460:	ldrb	r0, [lr, r0]
    9464:	cmp	r1, #2
    9468:	strb	r0, [r2], #1
    946c:	blt	947c <rb_sha256_crypt_r+0xb2c>
    9470:	lsr	r3, r3, #6
    9474:	subs	r7, r7, #1
    9478:	bhi	9458 <rb_sha256_crypt_r+0xb08>
    947c:	cmp	r1, #1
    9480:	bgt	9588 <rb_sha256_crypt_r+0xc38>
    9484:	bl	5540 <__errno_location@plt>
    9488:	mov	r1, #34	; 0x22
    948c:	str	r1, [r0]
    9490:	mov	r0, #0
    9494:	str	r0, [fp, #-516]	; 0xfffffdfc
    9498:	add	r0, pc, #272	; 0x110
    949c:	add	r1, pc, #252	; 0xfc
    94a0:	sub	r4, fp, #312	; 0x138
    94a4:	vld1.64	{d16-d17}, [r0 :128]
    94a8:	vld1.64	{d18-d19}, [r1 :128]
    94ac:	mov	r0, #40	; 0x28
    94b0:	mov	r1, r4
    94b4:	vst1.32	{d16-d17}, [r1], r0
    94b8:	ldr	r0, [fp, #-504]	; 0xfffffe08
    94bc:	vst1.32	{d18-d19}, [r0]
    94c0:	mov	r0, #0
    94c4:	str	r0, [r1]
    94c8:	str	r0, [fp, #-280]	; 0xfffffee8
    94cc:	str	r0, [fp, #-276]	; 0xfffffeec
    94d0:	sub	r1, fp, #100	; 0x64
    94d4:	mov	r0, r4
    94d8:	bl	97b8 <rb_sha256_finish_ctx>
    94dc:	vmov.i32	q8, #0	; 0x00000000
    94e0:	sub	r0, fp, #136	; 0x88
    94e4:	mov	r1, #0
    94e8:	mov	r2, sl
    94ec:	vst1.64	{d16-d17}, [r0]!
    94f0:	vst1.64	{d16-d17}, [r0]
    94f4:	ldr	r0, [fp, #-496]	; 0xfffffe10
    94f8:	bl	4ee0 <memset@plt>
    94fc:	ldr	r0, [fp, #-512]	; 0xfffffe00
    9500:	mov	r1, #0
    9504:	mov	r2, r6
    9508:	bl	4ee0 <memset@plt>
    950c:	mov	r0, r4
    9510:	mov	r1, #0
    9514:	mov	r2, #172	; 0xac
    9518:	bl	4ee0 <memset@plt>
    951c:	sub	r0, fp, #488	; 0x1e8
    9520:	mov	r1, #0
    9524:	mov	r2, #172	; 0xac
    9528:	bl	4ee0 <memset@plt>
    952c:	ldr	r0, [fp, #-524]	; 0xfffffdf4
    9530:	ldr	r4, [fp, #-528]	; 0xfffffdf0
    9534:	cmp	r0, #0
    9538:	beq	9548 <rb_sha256_crypt_r+0xbf8>
    953c:	mov	r1, #0
    9540:	mov	r2, sl
    9544:	bl	4ee0 <memset@plt>
    9548:	cmp	r4, #0
    954c:	beq	9560 <rb_sha256_crypt_r+0xc10>
    9550:	mov	r0, r4
    9554:	mov	r1, #0
    9558:	mov	r2, r6
    955c:	bl	4ee0 <memset@plt>
    9560:	ldr	r0, [fp, #-516]	; 0xfffffdfc
    9564:	sub	sp, fp, #64	; 0x40
    9568:	vpop	{d8-d11}
    956c:	add	sp, sp, #4
    9570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9574:	mov	r0, #0
    9578:	str	r0, [fp, #-536]	; 0xfffffde8
    957c:	movw	r0, #5000	; 0x1388
    9580:	str	r0, [fp, #-500]	; 0xfffffe0c
    9584:	b	8a04 <rb_sha256_crypt_r+0xb4>
    9588:	mov	r0, #0
    958c:	strb	r0, [r2]
    9590:	b	9498 <rb_sha256_crypt_r+0xb48>
    9594:	nop	{0}
    9598:	nop	{0}
    959c:	nop	{0}
    95a0:	.word	0x510e527f
    95a4:	.word	0x9b05688c
    95a8:	.word	0x1f83d9ab
    95ac:	.word	0x5be0cd19
    95b0:	.word	0x6a09e667
    95b4:	.word	0xbb67ae85
    95b8:	.word	0x3c6ef372
    95bc:	.word	0xa54ff53a
    95c0:	.word	0x0000fe34
    95c4:	.word	0x0000fe1c
    95c8:	.word	0x0000fa6e
    95cc:	.word	0x0000f7ec
    95d0:	.word	0x0000f474
    95d4:	.word	0x0000f7a8
    95d8:	.word	0x0000f36f

000095dc <rb_sha256_process_bytes>:
    95dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    95e0:	add	fp, sp, #28
    95e4:	sub	sp, sp, #20
    95e8:	ldr	r6, [r2, #40]	; 0x28
    95ec:	mov	r4, r2
    95f0:	mov	r5, r1
    95f4:	mov	r8, r0
    95f8:	cmp	r6, #0
    95fc:	beq	9670 <rb_sha256_process_bytes+0x94>
    9600:	rsb	r7, r6, #128	; 0x80
    9604:	add	r0, r4, r6
    9608:	mov	r1, r8
    960c:	cmp	r7, r5
    9610:	add	r0, r0, #44	; 0x2c
    9614:	movhi	r7, r5
    9618:	mov	r2, r7
    961c:	bl	50a8 <memcpy@plt>
    9620:	ldr	r0, [r4, #40]	; 0x28
    9624:	add	r0, r0, r7
    9628:	cmp	r0, #65	; 0x41
    962c:	str	r0, [r4, #40]	; 0x28
    9630:	bcc	9668 <rb_sha256_process_bytes+0x8c>
    9634:	add	r9, r4, #44	; 0x2c
    9638:	bic	r1, r0, #63	; 0x3f
    963c:	mov	r2, r4
    9640:	mov	r0, r9
    9644:	bl	98d8 <rb_sha256_process_block>
    9648:	ldr	r0, [r4, #40]	; 0x28
    964c:	and	r2, r0, #63	; 0x3f
    9650:	add	r0, r7, r6
    9654:	bic	r0, r0, #63	; 0x3f
    9658:	str	r2, [r4, #40]	; 0x28
    965c:	add	r1, r9, r0
    9660:	mov	r0, r9
    9664:	bl	50a8 <memcpy@plt>
    9668:	sub	r5, r5, r7
    966c:	add	r8, r8, r7
    9670:	cmp	r5, #64	; 0x40
    9674:	bcc	974c <rb_sha256_process_bytes+0x170>
    9678:	tst	r8, #3
    967c:	beq	9730 <rb_sha256_process_bytes+0x154>
    9680:	cmp	r5, #65	; 0x41
    9684:	bcc	975c <rb_sha256_process_bytes+0x180>
    9688:	sub	r0, r5, #64	; 0x40
    968c:	add	r7, r4, #44	; 0x2c
    9690:	mov	sl, #48	; 0x30
    9694:	str	r0, [sp, #12]
    9698:	sub	r0, r5, #65	; 0x41
    969c:	add	r6, r7, #32
    96a0:	bic	r0, r0, #63	; 0x3f
    96a4:	str	r0, [sp, #8]
    96a8:	add	r0, r0, #64	; 0x40
    96ac:	str	r0, [sp, #4]
    96b0:	mov	r0, r8
    96b4:	add	r8, r7, #16
    96b8:	mov	r9, r0
    96bc:	str	r0, [sp, #16]
    96c0:	mov	r1, #64	; 0x40
    96c4:	add	r2, r0, #48	; 0x30
    96c8:	vld1.8	{d16-d17}, [r9], r1
    96cc:	add	r1, r0, #32
    96d0:	vld1.8	{d18-d19}, [r2]
    96d4:	add	r0, r0, #16
    96d8:	mov	r2, r4
    96dc:	vld1.8	{d20-d21}, [r1]
    96e0:	mov	r1, r7
    96e4:	vst1.8	{d16-d17}, [r1], sl
    96e8:	vld1.8	{d16-d17}, [r0]
    96ec:	vst1.8	{d18-d19}, [r1]
    96f0:	mov	r0, r7
    96f4:	mov	r1, #64	; 0x40
    96f8:	vst1.8	{d20-d21}, [r6]
    96fc:	vst1.8	{d16-d17}, [r8]
    9700:	bl	98d8 <rb_sha256_process_block>
    9704:	sub	r5, r5, #64	; 0x40
    9708:	mov	r0, r9
    970c:	cmp	r5, #64	; 0x40
    9710:	bhi	96c0 <rb_sha256_process_bytes+0xe4>
    9714:	ldr	r0, [sp, #12]
    9718:	ldr	r1, [sp, #8]
    971c:	ldr	r8, [sp, #16]
    9720:	sub	r5, r0, r1
    9724:	ldr	r0, [sp, #4]
    9728:	add	r8, r8, r0
    972c:	b	9760 <rb_sha256_process_bytes+0x184>
    9730:	bic	r6, r5, #63	; 0x3f
    9734:	mov	r0, r8
    9738:	mov	r2, r4
    973c:	mov	r1, r6
    9740:	bl	98d8 <rb_sha256_process_block>
    9744:	add	r8, r8, r6
    9748:	and	r5, r5, #63	; 0x3f
    974c:	cmp	r5, #0
    9750:	bne	9760 <rb_sha256_process_bytes+0x184>
    9754:	sub	sp, fp, #28
    9758:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    975c:	mov	r5, #64	; 0x40
    9760:	ldr	r6, [r4, #40]	; 0x28
    9764:	mov	r1, r8
    9768:	mov	r2, r5
    976c:	add	r0, r4, r6
    9770:	add	r0, r0, #44	; 0x2c
    9774:	bl	50a8 <memcpy@plt>
    9778:	add	r5, r6, r5
    977c:	cmp	r5, #64	; 0x40
    9780:	bcc	97ac <rb_sha256_process_bytes+0x1d0>
    9784:	add	r6, r4, #44	; 0x2c
    9788:	mov	r1, #64	; 0x40
    978c:	mov	r2, r4
    9790:	mov	r0, r6
    9794:	bl	98d8 <rb_sha256_process_block>
    9798:	sub	r5, r5, #64	; 0x40
    979c:	add	r1, r4, #108	; 0x6c
    97a0:	mov	r0, r6
    97a4:	mov	r2, r5
    97a8:	bl	50a8 <memcpy@plt>
    97ac:	str	r5, [r4, #40]	; 0x28
    97b0:	sub	sp, fp, #28
    97b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000097b8 <rb_sha256_finish_ctx>:
    97b8:	push	{r4, r5, r6, r7, fp, lr}
    97bc:	add	fp, sp, #16
    97c0:	mov	r5, r0
    97c4:	mov	r4, r1
    97c8:	ldr	r0, [r0, #32]
    97cc:	mov	r7, #56	; 0x38
    97d0:	ldr	r1, [r5, #40]	; 0x28
    97d4:	add	r6, r5, #44	; 0x2c
    97d8:	adds	r0, r0, r1
    97dc:	str	r0, [r5, #32]
    97e0:	ldrcs	r0, [r5, #36]	; 0x24
    97e4:	addcs	r0, r0, #1
    97e8:	strcs	r0, [r5, #36]	; 0x24
    97ec:	cmp	r1, #55	; 0x37
    97f0:	add	r0, r6, r1
    97f4:	movwhi	r7, #120	; 0x78
    97f8:	sub	r2, r7, r1
    97fc:	ldr	r1, [pc, #208]	; 98d4 <rb_sha256_finish_ctx+0x11c>
    9800:	add	r1, pc, r1
    9804:	bl	50a8 <memcpy@plt>
    9808:	ldr	r0, [r5, #32]
    980c:	mov	r1, #65280	; 0xff00
    9810:	lsl	r3, r0, #11
    9814:	and	r2, r1, r0, lsr #5
    9818:	uxtb16	r3, r3
    981c:	orr	r3, r3, r0, lsl #27
    9820:	orr	r2, r3, r2
    9824:	ubfx	r3, r0, #21, #8
    9828:	orr	r2, r2, r3
    982c:	orr	r3, r7, #4
    9830:	str	r2, [r6, r3]
    9834:	movw	r3, #8160	; 0x1fe0
    9838:	ldr	r2, [r5, #36]	; 0x24
    983c:	and	r3, r2, r3
    9840:	and	r1, r1, r2, lsr #5
    9844:	orr	r1, r1, r3, lsl #11
    9848:	ubfx	r3, r2, #21, #8
    984c:	lsl	r2, r2, #3
    9850:	orr	r0, r2, r0, lsr #29
    9854:	orr	r1, r1, r3
    9858:	mov	r2, r5
    985c:	orr	r0, r1, r0, lsl #24
    9860:	add	r1, r7, #8
    9864:	str	r0, [r6, r7]
    9868:	mov	r0, r6
    986c:	bl	98d8 <rb_sha256_process_block>
    9870:	ldr	r0, [r5]
    9874:	rev	r0, r0
    9878:	str	r0, [r4]
    987c:	ldr	r0, [r5, #4]
    9880:	rev	r0, r0
    9884:	str	r0, [r4, #4]
    9888:	ldr	r0, [r5, #8]
    988c:	rev	r0, r0
    9890:	str	r0, [r4, #8]
    9894:	ldr	r0, [r5, #12]
    9898:	rev	r0, r0
    989c:	str	r0, [r4, #12]
    98a0:	ldr	r0, [r5, #16]
    98a4:	rev	r0, r0
    98a8:	str	r0, [r4, #16]
    98ac:	ldr	r0, [r5, #20]
    98b0:	rev	r0, r0
    98b4:	str	r0, [r4, #20]
    98b8:	ldr	r0, [r5, #24]
    98bc:	rev	r0, r0
    98c0:	str	r0, [r4, #24]
    98c4:	ldr	r0, [r5, #28]
    98c8:	rev	r0, r0
    98cc:	str	r0, [r4, #28]
    98d0:	pop	{r4, r5, r6, r7, fp, pc}
    98d4:	.word	0x0000f0c0

000098d8 <rb_sha256_process_block>:
    98d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    98dc:	add	fp, sp, #28
    98e0:	sub	sp, sp, #304	; 0x130
    98e4:	mov	r3, r0
    98e8:	ldr	r0, [r2, #32]
    98ec:	add	lr, r2, #16
    98f0:	lsr	r4, r1, #2
    98f4:	adds	r0, r0, r1
    98f8:	str	r0, [r2, #32]
    98fc:	ldr	r0, [r2, #4]
    9900:	ldr	r9, [r2]
    9904:	str	r0, [sp, #32]
    9908:	ldr	r0, [r2, #8]
    990c:	str	r0, [sp, #36]	; 0x24
    9910:	ldr	r0, [r2, #12]
    9914:	str	r0, [sp, #40]	; 0x28
    9918:	ldm	lr, {sl, ip, lr}
    991c:	ldrcs	r1, [r2, #36]	; 0x24
    9920:	ldr	r0, [r2, #28]
    9924:	str	r2, [sp]
    9928:	addcs	r1, r1, #1
    992c:	strcs	r1, [r2, #36]	; 0x24
    9930:	cmp	r4, #0
    9934:	beq	9b78 <rb_sha256_process_block+0x2a0>
    9938:	ldr	r1, [r3]
    993c:	str	r4, [sp, #4]
    9940:	str	r3, [sp, #8]
    9944:	rev	r8, r1
    9948:	str	r8, [sp, #44]	; 0x2c
    994c:	ldr	r1, [r3, #4]
    9950:	rev	r1, r1
    9954:	str	r1, [sp, #48]	; 0x30
    9958:	ldr	r1, [r3, #8]
    995c:	rev	r1, r1
    9960:	str	r1, [sp, #52]	; 0x34
    9964:	ldr	r1, [r3, #12]
    9968:	rev	r1, r1
    996c:	str	r1, [sp, #56]	; 0x38
    9970:	ldr	r1, [r3, #16]
    9974:	rev	r1, r1
    9978:	str	r1, [sp, #60]	; 0x3c
    997c:	ldr	r1, [r3, #20]
    9980:	rev	r1, r1
    9984:	str	r1, [sp, #64]	; 0x40
    9988:	ldr	r1, [r3, #24]
    998c:	rev	r1, r1
    9990:	str	r1, [sp, #68]	; 0x44
    9994:	ldr	r1, [r3, #28]
    9998:	rev	r1, r1
    999c:	str	r1, [sp, #72]	; 0x48
    99a0:	ldr	r1, [r3, #32]
    99a4:	rev	r1, r1
    99a8:	str	r1, [sp, #76]	; 0x4c
    99ac:	ldr	r1, [r3, #36]	; 0x24
    99b0:	rev	r1, r1
    99b4:	str	r1, [sp, #80]	; 0x50
    99b8:	ldr	r1, [r3, #40]	; 0x28
    99bc:	rev	r1, r1
    99c0:	str	r1, [sp, #84]	; 0x54
    99c4:	ldr	r1, [r3, #44]	; 0x2c
    99c8:	rev	r1, r1
    99cc:	str	r1, [sp, #88]	; 0x58
    99d0:	ldr	r1, [r3, #48]	; 0x30
    99d4:	rev	r1, r1
    99d8:	str	r1, [sp, #92]	; 0x5c
    99dc:	ldr	r1, [r3, #52]	; 0x34
    99e0:	rev	r1, r1
    99e4:	str	r1, [sp, #96]	; 0x60
    99e8:	ldr	r1, [r3, #56]	; 0x38
    99ec:	rev	r1, r1
    99f0:	str	r1, [sp, #100]	; 0x64
    99f4:	ldr	r1, [r3, #60]	; 0x3c
    99f8:	rev	r1, r1
    99fc:	str	r1, [sp, #104]	; 0x68
    9a00:	mov	r1, #0
    9a04:	add	r2, sp, #44	; 0x2c
    9a08:	add	r2, r2, r1
    9a0c:	add	r1, r1, #4
    9a10:	ldr	r6, [r2, #56]	; 0x38
    9a14:	ldr	r3, [r2, #4]
    9a18:	ldr	r7, [r2, #36]	; 0x24
    9a1c:	cmp	r1, #192	; 0xc0
    9a20:	ror	r4, r6, #19
    9a24:	ror	r5, r3, #18
    9a28:	add	r7, r8, r7
    9a2c:	mov	r8, r3
    9a30:	eor	r4, r4, r6, lsr #10
    9a34:	eor	r5, r5, r3, lsr #3
    9a38:	eor	r6, r4, r6, ror #17
    9a3c:	eor	r5, r5, r3, ror #7
    9a40:	add	r7, r7, r6
    9a44:	add	r7, r7, r5
    9a48:	str	r7, [r2, #64]	; 0x40
    9a4c:	bne	9a04 <rb_sha256_process_block+0x12c>
    9a50:	ldr	r6, [sp, #32]
    9a54:	ldr	r3, [sp, #36]	; 0x24
    9a58:	ldr	r8, [sp, #40]	; 0x28
    9a5c:	mov	r2, #0
    9a60:	mov	r4, ip
    9a64:	mov	r7, r0
    9a68:	str	r9, [sp, #12]
    9a6c:	str	sl, [sp, #16]
    9a70:	str	ip, [sp, #20]
    9a74:	str	lr, [sp, #24]
    9a78:	str	r0, [sp, #28]
    9a7c:	mov	r5, r3
    9a80:	mov	r3, r6
    9a84:	mov	r6, r9
    9a88:	mov	ip, lr
    9a8c:	mov	lr, r4
    9a90:	mov	r4, sl
    9a94:	eor	r1, r3, r5
    9a98:	ror	r0, r6, #2
    9a9c:	and	r9, r3, r5
    9aa0:	and	r1, r6, r1
    9aa4:	eor	r0, r0, r6, ror #13
    9aa8:	eor	r1, r1, r9
    9aac:	eor	r0, r0, r6, ror #22
    9ab0:	add	r9, r0, r1
    9ab4:	bic	r1, ip, sl
    9ab8:	and	r0, sl, lr
    9abc:	orr	r0, r0, r1
    9ac0:	ror	r1, sl, #6
    9ac4:	eor	r1, r1, sl, ror #11
    9ac8:	add	r0, r0, r7
    9acc:	mov	r7, ip
    9ad0:	eor	r1, r1, sl, ror #25
    9ad4:	add	r0, r0, r1
    9ad8:	ldr	r1, [pc, #200]	; 9ba8 <rb_sha256_process_block+0x2d0>
    9adc:	add	r1, pc, r1
    9ae0:	ldr	r1, [r1, r2, lsl #2]
    9ae4:	add	r0, r0, r1
    9ae8:	add	r1, sp, #44	; 0x2c
    9aec:	ldr	r1, [r1, r2, lsl #2]
    9af0:	add	r2, r2, #1
    9af4:	cmp	r2, #64	; 0x40
    9af8:	add	r0, r0, r1
    9afc:	add	sl, r0, r8
    9b00:	add	r9, r9, r0
    9b04:	mov	r8, r5
    9b08:	bne	9a7c <rb_sha256_process_block+0x1a4>
    9b0c:	ldr	r1, [sp, #24]
    9b10:	ldr	r0, [sp, #28]
    9b14:	add	r1, lr, r1
    9b18:	add	r0, ip, r0
    9b1c:	ldr	ip, [sp, #20]
    9b20:	mov	lr, r1
    9b24:	ldr	r1, [sp, #16]
    9b28:	add	ip, r4, ip
    9b2c:	ldr	r4, [sp, #4]
    9b30:	add	r1, sl, r1
    9b34:	mov	sl, r1
    9b38:	ldr	r1, [sp, #40]	; 0x28
    9b3c:	subs	r4, r4, #16
    9b40:	add	r1, r5, r1
    9b44:	str	r1, [sp, #40]	; 0x28
    9b48:	ldr	r1, [sp, #36]	; 0x24
    9b4c:	add	r1, r3, r1
    9b50:	ldr	r3, [sp, #8]
    9b54:	str	r1, [sp, #36]	; 0x24
    9b58:	ldr	r1, [sp, #32]
    9b5c:	add	r3, r3, #64	; 0x40
    9b60:	add	r1, r6, r1
    9b64:	str	r1, [sp, #32]
    9b68:	ldr	r1, [sp, #12]
    9b6c:	add	r1, r9, r1
    9b70:	mov	r9, r1
    9b74:	bne	9938 <rb_sha256_process_block+0x60>
    9b78:	ldr	r1, [sp]
    9b7c:	ldr	r2, [sp, #32]
    9b80:	str	r9, [r1]
    9b84:	str	r2, [r1, #4]
    9b88:	ldr	r2, [sp, #36]	; 0x24
    9b8c:	add	r3, r1, #12
    9b90:	str	r2, [r1, #8]
    9b94:	ldr	r2, [sp, #40]	; 0x28
    9b98:	stm	r3, {r2, sl, ip, lr}
    9b9c:	str	r0, [r1, #28]
    9ba0:	sub	sp, fp, #28
    9ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ba8:	.word	0x0000ece0
    9bac:	.word	0xe320f000

00009bb0 <rb_sha512_crypt_r>:
    9bb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9bb4:	add	fp, sp, #28
    9bb8:	sub	sp, sp, #4
    9bbc:	vpush	{d8-d15}
    9bc0:	sub	sp, sp, #904	; 0x388
    9bc4:	str	r2, [fp, #-960]	; 0xfffffc40
    9bc8:	str	r3, [fp, #-988]	; 0xfffffc24
    9bcc:	mov	sl, r0
    9bd0:	mov	r2, #3
    9bd4:	mov	r7, r1
    9bd8:	ldr	r0, [pc, #1736]	; a2a8 <rb_sha512_crypt_r+0x6f8>
    9bdc:	add	r0, pc, r0
    9be0:	bl	5468 <strncmp@plt>
    9be4:	ldr	r1, [pc, #1728]	; a2ac <rb_sha512_crypt_r+0x6fc>
    9be8:	cmp	r0, #0
    9bec:	mov	r2, #7
    9bf0:	addeq	r7, r7, #3
    9bf4:	mov	r0, r7
    9bf8:	add	r1, pc, r1
    9bfc:	bl	5468 <strncmp@plt>
    9c00:	movw	r1, #5000	; 0x1388
    9c04:	mov	r4, #0
    9c08:	cmp	r0, #0
    9c0c:	str	r1, [fp, #-932]	; 0xfffffc5c
    9c10:	beq	9c1c <rb_sha512_crypt_r+0x6c>
    9c14:	mov	r0, #0
    9c18:	b	9c60 <rb_sha512_crypt_r+0xb0>
    9c1c:	add	r0, r7, #7
    9c20:	sub	r1, fp, #576	; 0x240
    9c24:	mov	r2, #10
    9c28:	bl	509c <strtoul@plt>
    9c2c:	ldr	r1, [fp, #-576]	; 0xfffffdc0
    9c30:	ldrb	r2, [r1]
    9c34:	cmp	r2, #36	; 0x24
    9c38:	bne	ac44 <rb_sha512_crypt_r+0x1094>
    9c3c:	movw	r2, #51711	; 0xc9ff
    9c40:	add	r7, r1, #1
    9c44:	movt	r2, #15258	; 0x3b9a
    9c48:	cmp	r0, r2
    9c4c:	movcc	r2, r0
    9c50:	mov	r0, #1
    9c54:	cmp	r2, #1000	; 0x3e8
    9c58:	movls	r2, #1000	; 0x3e8
    9c5c:	str	r2, [fp, #-932]	; 0xfffffc5c
    9c60:	str	r0, [fp, #-992]	; 0xfffffc20
    9c64:	ldr	r1, [pc, #4076]	; ac58 <rb_sha512_crypt_r+0x10a8>
    9c68:	mov	r0, r7
    9c6c:	add	r1, pc, r1
    9c70:	bl	5438 <strcspn@plt>
    9c74:	mov	r6, r0
    9c78:	cmp	r0, #16
    9c7c:	str	r0, [fp, #-996]	; 0xfffffc1c
    9c80:	mov	r0, sl
    9c84:	movcs	r6, #16
    9c88:	bl	5084 <strlen@plt>
    9c8c:	mov	r5, r0
    9c90:	tst	sl, #7
    9c94:	beq	9cc0 <rb_sha512_crypt_r+0x110>
    9c98:	add	r0, r5, #15
    9c9c:	bic	r0, r0, #7
    9ca0:	sub	r0, sp, r0
    9ca4:	add	r4, r0, #8
    9ca8:	mov	sp, r0
    9cac:	mov	r0, r4
    9cb0:	mov	r1, sl
    9cb4:	mov	r2, r5
    9cb8:	bl	50a8 <memcpy@plt>
    9cbc:	mov	sl, r4
    9cc0:	mov	r9, #0
    9cc4:	tst	r7, #7
    9cc8:	str	r4, [fp, #-980]	; 0xfffffc2c
    9ccc:	beq	9d00 <rb_sha512_crypt_r+0x150>
    9cd0:	add	r0, r6, #15
    9cd4:	bic	r0, r0, #7
    9cd8:	sub	r0, sp, r0
    9cdc:	add	r4, r0, #8
    9ce0:	mov	sp, r0
    9ce4:	mov	r0, r4
    9ce8:	mov	r1, r7
    9cec:	mov	r2, r6
    9cf0:	bl	50a8 <memcpy@plt>
    9cf4:	mov	r7, r4
    9cf8:	str	r4, [fp, #-984]	; 0xfffffc28
    9cfc:	b	9d08 <rb_sha512_crypt_r+0x158>
    9d00:	mov	r0, #0
    9d04:	str	r0, [fp, #-984]	; 0xfffffc28
    9d08:	add	r0, pc, #816	; 0x330
    9d0c:	add	r1, pc, #828	; 0x33c
    9d10:	add	r2, pc, #840	; 0x348
    9d14:	sub	r4, fp, #576	; 0x240
    9d18:	vmov.i32	q8, #0	; 0x00000000
    9d1c:	mov	r8, #80	; 0x50
    9d20:	vld1.64	{d10-d11}, [r2 :128]
    9d24:	add	r2, pc, #836	; 0x344
    9d28:	vld1.64	{d14-d15}, [r1 :128]
    9d2c:	add	r3, r4, #64	; 0x40
    9d30:	vld1.64	{d8-d9}, [r0 :128]
    9d34:	add	r0, r4, #16
    9d38:	mov	r1, r5
    9d3c:	vld1.64	{d12-d13}, [r2 :128]
    9d40:	vst1.64	{d16-d17}, [r3]
    9d44:	str	r0, [fp, #-940]	; 0xfffffc54
    9d48:	mov	r2, r4
    9d4c:	str	r3, [fp, #-936]	; 0xfffffc58
    9d50:	vst1.64	{d10-d11}, [r0]
    9d54:	add	r0, r4, #32
    9d58:	str	r0, [fp, #-944]	; 0xfffffc50
    9d5c:	vst1.64	{d12-d13}, [r0]
    9d60:	add	r0, r4, #48	; 0x30
    9d64:	str	r0, [fp, #-948]	; 0xfffffc4c
    9d68:	vst1.64	{d14-d15}, [r0]
    9d6c:	mov	r0, r4
    9d70:	vst1.64	{d8-d9}, [r0], r8
    9d74:	str	r9, [fp, #-492]	; 0xfffffe14
    9d78:	str	r9, [r0]
    9d7c:	mov	r0, sl
    9d80:	bl	acc0 <rb_sha512_process_bytes>
    9d84:	mov	r0, r7
    9d88:	mov	r1, r6
    9d8c:	mov	r2, r4
    9d90:	bl	acc0 <rb_sha512_process_bytes>
    9d94:	sub	r9, fp, #920	; 0x398
    9d98:	mov	r1, #0
    9d9c:	vmov.i32	q8, #0	; 0x00000000
    9da0:	mov	r0, r9
    9da4:	mov	r2, r9
    9da8:	vst1.64	{d8-d9}, [r0], r8
    9dac:	str	r1, [fp, #-836]	; 0xfffffcbc
    9db0:	str	r1, [r0]
    9db4:	add	r0, r9, #16
    9db8:	mov	r1, r5
    9dbc:	str	r0, [fp, #-968]	; 0xfffffc38
    9dc0:	vst1.64	{d10-d11}, [r0]
    9dc4:	add	r0, r9, #32
    9dc8:	str	r0, [fp, #-956]	; 0xfffffc44
    9dcc:	vst1.64	{d12-d13}, [r0]
    9dd0:	add	r0, r9, #48	; 0x30
    9dd4:	str	r0, [fp, #-972]	; 0xfffffc34
    9dd8:	vst1.64	{d14-d15}, [r0]
    9ddc:	add	r0, r9, #64	; 0x40
    9de0:	str	r0, [fp, #-976]	; 0xfffffc30
    9de4:	vst1.64	{d16-d17}, [r0]
    9de8:	mov	r0, sl
    9dec:	bl	acc0 <rb_sha512_process_bytes>
    9df0:	mov	r0, r7
    9df4:	mov	r1, r6
    9df8:	mov	r2, r9
    9dfc:	str	r7, [fp, #-964]	; 0xfffffc3c
    9e00:	bl	acc0 <rb_sha512_process_bytes>
    9e04:	mov	r0, sl
    9e08:	mov	r1, r5
    9e0c:	mov	r2, r9
    9e10:	bl	acc0 <rb_sha512_process_bytes>
    9e14:	sub	r1, fp, #168	; 0xa8
    9e18:	mov	r0, r9
    9e1c:	bl	ae80 <rb_sha512_finish_ctx>
    9e20:	cmp	r5, #65	; 0x41
    9e24:	mov	r1, r5
    9e28:	str	r6, [fp, #-952]	; 0xfffffc48
    9e2c:	bcc	9e6c <rb_sha512_crypt_r+0x2bc>
    9e30:	sub	r0, r5, #65	; 0x41
    9e34:	sub	r4, fp, #168	; 0xa8
    9e38:	sub	r7, fp, #576	; 0x240
    9e3c:	mov	r6, r5
    9e40:	bic	r8, r0, #63	; 0x3f
    9e44:	mov	r0, r4
    9e48:	mov	r1, #64	; 0x40
    9e4c:	mov	r2, r7
    9e50:	bl	acc0 <rb_sha512_process_bytes>
    9e54:	sub	r6, r6, #64	; 0x40
    9e58:	cmp	r6, #64	; 0x40
    9e5c:	bhi	9e44 <rb_sha512_crypt_r+0x294>
    9e60:	ldr	r6, [fp, #-952]	; 0xfffffc48
    9e64:	sub	r0, r5, #64	; 0x40
    9e68:	sub	r1, r0, r8
    9e6c:	sub	r0, fp, #168	; 0xa8
    9e70:	sub	r2, fp, #576	; 0x240
    9e74:	bl	acc0 <rb_sha512_process_bytes>
    9e78:	cmp	r5, #0
    9e7c:	str	r5, [fp, #-924]	; 0xfffffc64
    9e80:	beq	9ed8 <rb_sha512_crypt_r+0x328>
    9e84:	clz	r0, r5
    9e88:	mov	r6, r5
    9e8c:	sub	r4, fp, #576	; 0x240
    9e90:	mov	r5, #0
    9e94:	sub	r7, fp, #168	; 0xa8
    9e98:	lsr	r8, r0, #5
    9e9c:	tst	r6, #1
    9ea0:	bne	9eb0 <rb_sha512_crypt_r+0x300>
    9ea4:	ldr	r1, [fp, #-924]	; 0xfffffc64
    9ea8:	mov	r0, sl
    9eac:	b	9eb8 <rb_sha512_crypt_r+0x308>
    9eb0:	mov	r0, r7
    9eb4:	mov	r1, #64	; 0x40
    9eb8:	mov	r2, r4
    9ebc:	bl	acc0 <rb_sha512_process_bytes>
    9ec0:	lsr	r0, r6, #1
    9ec4:	cmp	r5, r6, lsr #1
    9ec8:	mov	r6, r0
    9ecc:	bne	9e9c <rb_sha512_crypt_r+0x2ec>
    9ed0:	ldr	r6, [fp, #-952]	; 0xfffffc48
    9ed4:	b	9edc <rb_sha512_crypt_r+0x32c>
    9ed8:	mov	r8, #1
    9edc:	sub	r0, fp, #576	; 0x240
    9ee0:	sub	r1, fp, #168	; 0xa8
    9ee4:	bl	ae80 <rb_sha512_finish_ctx>
    9ee8:	add	r0, pc, #336	; 0x150
    9eec:	mov	r7, #0
    9ef0:	cmp	r8, #0
    9ef4:	vld1.64	{d16-d17}, [r0 :128]
    9ef8:	add	r0, pc, #368	; 0x170
    9efc:	add	r1, pc, #348	; 0x15c
    9f00:	vld1.64	{d20-d21}, [r0 :128]
    9f04:	vld1.64	{d18-d19}, [r1 :128]
    9f08:	vst1.64	{d16-d17}, [r9]
    9f0c:	add	r0, pc, #316	; 0x13c
    9f10:	ldr	r5, [fp, #-976]	; 0xfffffc30
    9f14:	vld1.64	{d16-d17}, [r0 :128]
    9f18:	ldr	r0, [fp, #-968]	; 0xfffffc38
    9f1c:	mov	r1, r5
    9f20:	vst1.64	{d18-d19}, [r0]
    9f24:	ldr	r0, [fp, #-956]	; 0xfffffc44
    9f28:	vst1.64	{d20-d21}, [r0]
    9f2c:	ldr	r0, [fp, #-972]	; 0xfffffc34
    9f30:	vst1.64	{d16-d17}, [r0]
    9f34:	vmov.i32	q8, #0	; 0x00000000
    9f38:	mov	r0, #20
    9f3c:	str	r7, [r5, #16]
    9f40:	vst1.64	{d16-d17}, [r1], r0
    9f44:	str	r7, [r1]
    9f48:	beq	9f74 <rb_sha512_crypt_r+0x3c4>
    9f4c:	sub	r0, fp, #920	; 0x398
    9f50:	sub	r1, fp, #232	; 0xe8
    9f54:	bl	ae80 <rb_sha512_finish_ctx>
    9f58:	ldr	r0, [fp, #-924]	; 0xfffffc64
    9f5c:	add	r0, r0, #7
    9f60:	bic	r0, r0, #7
    9f64:	sub	r0, sp, r0
    9f68:	mov	sp, r0
    9f6c:	str	r0, [fp, #-928]	; 0xfffffc60
    9f70:	b	a08c <rb_sha512_crypt_r+0x4dc>
    9f74:	ldr	r5, [fp, #-924]	; 0xfffffc64
    9f78:	sub	r7, fp, #920	; 0x398
    9f7c:	mov	r4, r5
    9f80:	mov	r0, sl
    9f84:	mov	r1, r5
    9f88:	mov	r2, r7
    9f8c:	bl	acc0 <rb_sha512_process_bytes>
    9f90:	subs	r4, r4, #1
    9f94:	bne	9f80 <rb_sha512_crypt_r+0x3d0>
    9f98:	sub	r8, fp, #232	; 0xe8
    9f9c:	sub	r0, fp, #920	; 0x398
    9fa0:	mov	sl, r5
    9fa4:	mov	r1, r8
    9fa8:	bl	ae80 <rb_sha512_finish_ctx>
    9fac:	add	r0, r5, #7
    9fb0:	bic	r0, r0, #7
    9fb4:	sub	ip, sp, r0
    9fb8:	mov	sp, ip
    9fbc:	cmp	r5, #64	; 0x40
    9fc0:	str	ip, [fp, #-928]	; 0xfffffc60
    9fc4:	bcc	a080 <rb_sha512_crypt_r+0x4d0>
    9fc8:	sub	r0, sl, #64	; 0x40
    9fcc:	mov	r3, #0
    9fd0:	add	r7, r8, #32
    9fd4:	mov	r5, #48	; 0x30
    9fd8:	add	r4, r8, #16
    9fdc:	bic	lr, r0, #63	; 0x3f
    9fe0:	str	r0, [fp, #-1000]	; 0xfffffc18
    9fe4:	add	r0, ip, lr
    9fe8:	add	r0, r0, #64	; 0x40
    9fec:	mov	r6, r8
    9ff0:	vld1.64	{d18-d19}, [r7]
    9ff4:	sub	r1, ip, r3
    9ff8:	vld1.64	{d20-d21}, [r4]
    9ffc:	sub	r3, r3, #64	; 0x40
    a000:	vld1.64	{d16-d17}, [r6], r5
    a004:	add	r2, r1, #32
    a008:	vst1.64	{d18-d19}, [r2]
    a00c:	add	r2, r1, #16
    a010:	vld1.64	{d22-d23}, [r6]
    a014:	vst1.64	{d16-d17}, [r1], r5
    a018:	vst1.64	{d20-d21}, [r2]
    a01c:	vst1.64	{d22-d23}, [r1]
    a020:	add	r1, sl, r3
    a024:	cmp	r1, #63	; 0x3f
    a028:	bhi	9fec <rb_sha512_crypt_r+0x43c>
    a02c:	ldr	r1, [fp, #-1000]	; 0xfffffc18
    a030:	ldr	r6, [fp, #-952]	; 0xfffffc48
    a034:	sub	r7, r1, lr
    a038:	b	a088 <rb_sha512_crypt_r+0x4d8>
    a03c:	nop	{0}
    a040:	.word	0xf3bcc908
    a044:	.word	0x6a09e667
    a048:	.word	0x84caa73b
    a04c:	.word	0xbb67ae85
    a050:	.word	0xfb41bd6b
    a054:	.word	0x1f83d9ab
    a058:	.word	0x137e2179
    a05c:	.word	0x5be0cd19
    a060:	.word	0xfe94f82b
    a064:	.word	0x3c6ef372
    a068:	.word	0x5f1d36f1
    a06c:	.word	0xa54ff53a
    a070:	.word	0xade682d1
    a074:	.word	0x510e527f
    a078:	.word	0x2b3e6c1f
    a07c:	.word	0x9b05688c
    a080:	mov	r0, ip
    a084:	mov	r7, sl
    a088:	ldr	r5, [fp, #-976]	; 0xfffffc30
    a08c:	sub	r1, fp, #232	; 0xe8
    a090:	mov	r2, r7
    a094:	bl	50a8 <memcpy@plt>
    a098:	sub	r0, pc, #96	; 0x60
    a09c:	mov	r4, #0
    a0a0:	vld1.64	{d16-d17}, [r0 :128]
    a0a4:	sub	r0, pc, #76	; 0x4c
    a0a8:	vld1.64	{d18-d19}, [r0 :128]
    a0ac:	vst1.64	{d16-d17}, [r9]
    a0b0:	sub	r0, pc, #72	; 0x48
    a0b4:	vld1.64	{d16-d17}, [r0 :128]
    a0b8:	ldr	r0, [fp, #-968]	; 0xfffffc38
    a0bc:	vst1.64	{d18-d19}, [r0]
    a0c0:	sub	r0, pc, #120	; 0x78
    a0c4:	vld1.64	{d18-d19}, [r0 :128]
    a0c8:	ldr	r0, [fp, #-956]	; 0xfffffc44
    a0cc:	vst1.64	{d16-d17}, [r0]
    a0d0:	ldr	r0, [fp, #-972]	; 0xfffffc34
    a0d4:	vmov.i32	q8, #0	; 0x00000000
    a0d8:	vst1.64	{d18-d19}, [r0]
    a0dc:	mov	r0, #20
    a0e0:	str	r4, [r5, #16]
    a0e4:	vst1.64	{d16-d17}, [r5], r0
    a0e8:	str	r4, [r5]
    a0ec:	ldr	r5, [fp, #-964]	; 0xfffffc3c
    a0f0:	mov	r0, r5
    a0f4:	mov	r1, r6
    a0f8:	mov	r2, r9
    a0fc:	bl	acc0 <rb_sha512_process_bytes>
    a100:	ldrb	r0, [fp, #-168]	; 0xffffff58
    a104:	add	r4, r4, #1
    a108:	add	r0, r0, #16
    a10c:	cmp	r4, r0
    a110:	bcc	a0f0 <rb_sha512_crypt_r+0x540>
    a114:	sub	r8, fp, #232	; 0xe8
    a118:	sub	r0, fp, #920	; 0x398
    a11c:	mov	r1, r8
    a120:	bl	ae80 <rb_sha512_finish_ctx>
    a124:	add	r0, r6, #7
    a128:	bic	r0, r0, #7
    a12c:	sub	r0, sp, r0
    a130:	mov	sp, r0
    a134:	cmp	r6, #64	; 0x40
    a138:	sub	r9, fp, #576	; 0x240
    a13c:	bcc	a1ac <rb_sha512_crypt_r+0x5fc>
    a140:	ldr	r6, [fp, #-996]	; 0xfffffc1c
    a144:	mvn	r1, #64	; 0x40
    a148:	mov	lr, #48	; 0x30
    a14c:	add	r3, r8, #16
    a150:	mov	r7, #64	; 0x40
    a154:	mov	r4, r0
    a158:	mvn	r2, r6
    a15c:	cmn	r2, #17
    a160:	mvnls	r2, #16
    a164:	sub	ip, r1, r2
    a168:	add	r1, r8, #32
    a16c:	mov	r5, r8
    a170:	vld1.64	{d18-d19}, [r1]
    a174:	vld1.64	{d20-d21}, [r3]
    a178:	add	r2, r4, #32
    a17c:	sub	r6, r6, #64	; 0x40
    a180:	vld1.8	{d16-d17}, [r5], lr
    a184:	cmp	r6, #63	; 0x3f
    a188:	vst1.8	{d18-d19}, [r2]
    a18c:	add	r2, r4, #16
    a190:	vld1.64	{d22-d23}, [r5]
    a194:	vst1.8	{d20-d21}, [r2]
    a198:	add	r2, r4, #48	; 0x30
    a19c:	vst1.8	{d16-d17}, [r4], r7
    a1a0:	vst1.8	{d22-d23}, [r2]
    a1a4:	bhi	a16c <rb_sha512_crypt_r+0x5bc>
    a1a8:	add	r6, ip, #64	; 0x40
    a1ac:	sub	r1, fp, #232	; 0xe8
    a1b0:	mov	r2, r6
    a1b4:	str	r0, [fp, #-956]	; 0xfffffc44
    a1b8:	bl	50a8 <memcpy@plt>
    a1bc:	ldr	r0, [fp, #-932]	; 0xfffffc5c
    a1c0:	cmp	r0, #0
    a1c4:	beq	a30c <rb_sha512_crypt_r+0x75c>
    a1c8:	mov	r6, #0
    a1cc:	vmov.i32	q4, #0	; 0x00000000
    a1d0:	sub	r5, fp, #168	; 0xa8
    a1d4:	mov	r8, #0
    a1d8:	sub	r0, pc, #416	; 0x1a0
    a1dc:	mov	r2, r9
    a1e0:	ands	sl, r8, #1
    a1e4:	vld1.64	{d16-d17}, [r0 :128]
    a1e8:	sub	r0, pc, #384	; 0x180
    a1ec:	sub	r1, pc, #404	; 0x194
    a1f0:	vld1.64	{d20-d21}, [r0 :128]
    a1f4:	vld1.64	{d18-d19}, [r1 :128]
    a1f8:	mov	r1, #20
    a1fc:	vst1.64	{d16-d17}, [r9]
    a200:	sub	r0, pc, #440	; 0x1b8
    a204:	vld1.64	{d16-d17}, [r0 :128]
    a208:	ldr	r0, [fp, #-940]	; 0xfffffc54
    a20c:	vst1.64	{d18-d19}, [r0]
    a210:	ldr	r0, [fp, #-944]	; 0xfffffc50
    a214:	vst1.64	{d20-d21}, [r0]
    a218:	ldr	r0, [fp, #-948]	; 0xfffffc4c
    a21c:	vst1.64	{d16-d17}, [r0]
    a220:	ldr	r0, [fp, #-936]	; 0xfffffc58
    a224:	str	r6, [r0, #16]
    a228:	vst1.64	{d8-d9}, [r0], r1
    a22c:	str	r6, [r0]
    a230:	movw	r0, #18725	; 0x4925
    a234:	movt	r0, #9362	; 0x2492
    a238:	umull	r0, r1, r8, r0
    a23c:	sub	r0, r8, r1
    a240:	add	r7, r1, r0, lsr #1
    a244:	lsr	r0, r7, #2
    a248:	lsl	r9, r0, #3
    a24c:	movw	r0, #43691	; 0xaaab
    a250:	movt	r0, #43690	; 0xaaaa
    a254:	umull	r0, r1, r8, r0
    a258:	lsr	r0, r1, #1
    a25c:	add	r4, r0, r0, lsl #1
    a260:	beq	a270 <rb_sha512_crypt_r+0x6c0>
    a264:	ldr	r0, [fp, #-928]	; 0xfffffc60
    a268:	ldr	r1, [fp, #-924]	; 0xfffffc64
    a26c:	b	a278 <rb_sha512_crypt_r+0x6c8>
    a270:	mov	r0, r5
    a274:	mov	r1, #64	; 0x40
    a278:	bl	acc0 <rb_sha512_process_bytes>
    a27c:	sub	r7, r9, r7, lsr #2
    a280:	cmp	r4, r8
    a284:	sub	r9, fp, #576	; 0x240
    a288:	bne	a2b0 <rb_sha512_crypt_r+0x700>
    a28c:	cmp	r7, r8
    a290:	bne	a2c8 <rb_sha512_crypt_r+0x718>
    a294:	cmp	sl, #0
    a298:	beq	a2e0 <rb_sha512_crypt_r+0x730>
    a29c:	mov	r0, r5
    a2a0:	mov	r1, #64	; 0x40
    a2a4:	b	a2e8 <rb_sha512_crypt_r+0x738>
    a2a8:	.word	0x0000ed24
    a2ac:	.word	0x0000ed0c
    a2b0:	ldr	r0, [fp, #-956]	; 0xfffffc44
    a2b4:	ldr	r1, [fp, #-952]	; 0xfffffc48
    a2b8:	mov	r2, r9
    a2bc:	bl	acc0 <rb_sha512_process_bytes>
    a2c0:	cmp	r7, r8
    a2c4:	beq	a294 <rb_sha512_crypt_r+0x6e4>
    a2c8:	ldr	r0, [fp, #-928]	; 0xfffffc60
    a2cc:	ldr	r1, [fp, #-924]	; 0xfffffc64
    a2d0:	mov	r2, r9
    a2d4:	bl	acc0 <rb_sha512_process_bytes>
    a2d8:	cmp	sl, #0
    a2dc:	bne	a29c <rb_sha512_crypt_r+0x6ec>
    a2e0:	ldr	r0, [fp, #-928]	; 0xfffffc60
    a2e4:	ldr	r1, [fp, #-924]	; 0xfffffc64
    a2e8:	mov	r2, r9
    a2ec:	bl	acc0 <rb_sha512_process_bytes>
    a2f0:	mov	r0, r9
    a2f4:	mov	r1, r5
    a2f8:	bl	ae80 <rb_sha512_finish_ctx>
    a2fc:	ldr	r0, [fp, #-932]	; 0xfffffc5c
    a300:	add	r8, r8, #1
    a304:	cmp	r0, r8
    a308:	bne	a1d8 <rb_sha512_crypt_r+0x628>
    a30c:	ldr	r6, [fp, #-988]	; 0xfffffc24
    a310:	ldr	r4, [fp, #-960]	; 0xfffffc40
    a314:	mov	r1, #0
    a318:	bic	r7, r6, r6, asr #31
    a31c:	mov	r0, r4
    a320:	mov	r2, r7
    a324:	bl	4ee0 <memset@plt>
    a328:	ldr	r1, [pc, #2432]	; acb0 <rb_sha512_crypt_r+0x1100>
    a32c:	mov	r0, r4
    a330:	mov	r2, r7
    a334:	add	r1, pc, r1
    a338:	bl	4e38 <strncpy@plt>
    a33c:	mov	r0, r4
    a340:	bl	5084 <strlen@plt>
    a344:	adds	r5, r4, r0
    a348:	ldr	r0, [fp, #-992]	; 0xfffffc20
    a34c:	sub	r9, r6, #3
    a350:	addeq	r5, r4, r7
    a354:	cmp	r0, #0
    a358:	beq	a390 <rb_sha512_crypt_r+0x7e0>
    a35c:	sub	sp, sp, #8
    a360:	ldr	r0, [fp, #-932]	; 0xfffffc5c
    a364:	bic	r1, r9, r9, asr #31
    a368:	str	r0, [sp]
    a36c:	mov	r0, r5
    a370:	ldr	r2, [pc, #2364]	; acb4 <rb_sha512_crypt_r+0x1104>
    a374:	ldr	r3, [pc, #2364]	; acb8 <rb_sha512_crypt_r+0x1108>
    a378:	add	r2, pc, r2
    a37c:	add	r3, pc, r3
    a380:	bl	5408 <snprintf@plt>
    a384:	add	sp, sp, #8
    a388:	sub	r9, r9, r0
    a38c:	add	r5, r5, r0
    a390:	ldr	sl, [fp, #-952]	; 0xfffffc48
    a394:	bic	r4, r9, r9, asr #31
    a398:	mov	r0, #0
    a39c:	mov	r1, #0
    a3a0:	str	r0, [fp, #-932]	; 0xfffffc5c
    a3a4:	mov	r0, r5
    a3a8:	cmp	r4, sl
    a3ac:	mov	r7, sl
    a3b0:	movcc	r7, r4
    a3b4:	mov	r2, r7
    a3b8:	bl	4ee0 <memset@plt>
    a3bc:	ldr	r1, [fp, #-964]	; 0xfffffc3c
    a3c0:	mov	r0, r5
    a3c4:	mov	r2, r7
    a3c8:	bl	4e38 <strncpy@plt>
    a3cc:	ldr	r6, [fp, #-960]	; 0xfffffc40
    a3d0:	mov	r0, r6
    a3d4:	bl	5084 <strlen@plt>
    a3d8:	adds	r5, r6, r0
    a3dc:	sub	r0, r9, r7
    a3e0:	addeq	r5, r6, sl
    a3e4:	cmp	r0, #1
    a3e8:	blt	ab24 <rb_sha512_crypt_r+0xf74>
    a3ec:	mov	r0, #36	; 0x24
    a3f0:	strb	r0, [r5]
    a3f4:	beq	ab24 <rb_sha512_crypt_r+0xf74>
    a3f8:	ldr	r0, [fp, #-996]	; 0xfffffc1c
    a3fc:	mvn	lr, r4
    a400:	ldrb	r2, [fp, #-147]	; 0xffffff6d
    a404:	ldrb	r3, [fp, #-126]	; 0xffffff82
    a408:	mvn	r8, r0
    a40c:	lsl	r2, r2, #8
    a410:	cmp	lr, r8
    a414:	mov	r0, r8
    a418:	movhi	r0, lr
    a41c:	cmn	r0, #17
    a420:	mvnls	r0, #16
    a424:	add	r4, r9, r0
    a428:	ldrb	r0, [fp, #-168]	; 0xffffff58
    a42c:	ldr	ip, [pc, #2184]	; acbc <rb_sha512_crypt_r+0x110c>
    a430:	orr	r0, r2, r0, lsl #16
    a434:	mov	r2, #0
    a438:	add	ip, pc, ip
    a43c:	orr	r0, r0, r3
    a440:	add	r3, r5, #1
    a444:	and	r7, r0, #63	; 0x3f
    a448:	add	r1, r4, r2
    a44c:	ldrb	r7, [ip, r7]
    a450:	cmp	r1, #2
    a454:	strb	r7, [r3, -r2]
    a458:	sub	r7, r2, #1
    a45c:	blt	a474 <rb_sha512_crypt_r+0x8c4>
    a460:	add	r1, r2, #4
    a464:	lsr	r0, r0, #6
    a468:	mov	r2, r7
    a46c:	cmp	r1, #1
    a470:	bhi	a444 <rb_sha512_crypt_r+0x894>
    a474:	cmp	lr, r8
    a478:	mov	r1, r8
    a47c:	mvn	r0, #16
    a480:	movhi	r1, lr
    a484:	cmn	r1, #17
    a488:	movls	r1, r0
    a48c:	add	r1, r9, r1
    a490:	add	r1, r1, r7
    a494:	add	r1, r1, #1
    a498:	cmp	r1, #2
    a49c:	blt	ab24 <rb_sha512_crypt_r+0xf74>
    a4a0:	cmp	lr, r8
    a4a4:	mov	r1, r8
    a4a8:	ldrb	r2, [fp, #-125]	; 0xffffff83
    a4ac:	movhi	r1, lr
    a4b0:	cmn	r1, #17
    a4b4:	movhi	r0, r1
    a4b8:	ldrb	r1, [fp, #-146]	; 0xffffff6e
    a4bc:	add	r4, r9, r0
    a4c0:	ldrb	r0, [fp, #-167]	; 0xffffff59
    a4c4:	lsl	r2, r2, #8
    a4c8:	orr	r1, r2, r1, lsl #16
    a4cc:	mvn	r2, #0
    a4d0:	orr	r0, r1, r0
    a4d4:	and	r1, r0, #63	; 0x3f
    a4d8:	sub	r6, r5, r7
    a4dc:	ldrb	r1, [ip, r1]
    a4e0:	strb	r1, [r6, #1]
    a4e4:	add	r1, r4, r7
    a4e8:	sub	r7, r7, #1
    a4ec:	cmp	r1, #2
    a4f0:	blt	a508 <rb_sha512_crypt_r+0x958>
    a4f4:	add	r1, r2, #5
    a4f8:	sub	r2, r2, #1
    a4fc:	lsr	r0, r0, #6
    a500:	cmp	r1, #1
    a504:	bhi	a4d4 <rb_sha512_crypt_r+0x924>
    a508:	cmp	lr, r8
    a50c:	mov	r1, r8
    a510:	mvn	r0, #16
    a514:	ldr	sl, [fp, #-952]	; 0xfffffc48
    a518:	movhi	r1, lr
    a51c:	cmn	r1, #17
    a520:	movls	r1, r0
    a524:	add	r1, r9, r1
    a528:	add	r1, r1, r7
    a52c:	add	r1, r1, #1
    a530:	cmp	r1, #2
    a534:	blt	ab24 <rb_sha512_crypt_r+0xf74>
    a538:	cmp	lr, r8
    a53c:	mov	r1, r8
    a540:	ldrb	r2, [fp, #-124]	; 0xffffff84
    a544:	movhi	r1, lr
    a548:	cmn	r1, #17
    a54c:	movhi	r0, r1
    a550:	ldrb	r1, [fp, #-145]	; 0xffffff6f
    a554:	add	r5, r9, r0
    a558:	ldrb	r0, [fp, #-166]	; 0xffffff5a
    a55c:	lsl	r0, r0, #8
    a560:	orr	r0, r0, r2, lsl #16
    a564:	mov	r2, #4
    a568:	orr	r0, r0, r1
    a56c:	and	r1, r0, #63	; 0x3f
    a570:	ldrb	r1, [ip, r1]
    a574:	strb	r1, [r3, -r7]
    a578:	add	r1, r5, r7
    a57c:	sub	r7, r7, #1
    a580:	cmp	r1, #2
    a584:	blt	a594 <rb_sha512_crypt_r+0x9e4>
    a588:	lsr	r0, r0, #6
    a58c:	subs	r2, r2, #1
    a590:	bhi	a56c <rb_sha512_crypt_r+0x9bc>
    a594:	cmp	lr, r8
    a598:	movhi	r8, lr
    a59c:	cmn	r8, #17
    a5a0:	mvnls	r8, #16
    a5a4:	add	r0, r9, r8
    a5a8:	add	r0, r0, r7
    a5ac:	add	r1, r0, #1
    a5b0:	cmp	r1, #2
    a5b4:	blt	ab24 <rb_sha512_crypt_r+0xf74>
    a5b8:	sub	r2, r3, r7
    a5bc:	ldrb	r3, [fp, #-144]	; 0xffffff70
    a5c0:	ldrb	r0, [fp, #-165]	; 0xffffff5b
    a5c4:	ldrb	r7, [fp, #-123]	; 0xffffff85
    a5c8:	lsl	r3, r3, #8
    a5cc:	orr	r0, r3, r0, lsl #16
    a5d0:	mov	r3, #4
    a5d4:	orr	r0, r0, r7
    a5d8:	and	r7, r0, #63	; 0x3f
    a5dc:	sub	r1, r1, #1
    a5e0:	ldrb	r7, [ip, r7]
    a5e4:	cmp	r1, #2
    a5e8:	strb	r7, [r2], #1
    a5ec:	blt	a5fc <rb_sha512_crypt_r+0xa4c>
    a5f0:	lsr	r0, r0, #6
    a5f4:	subs	r3, r3, #1
    a5f8:	bhi	a5d8 <rb_sha512_crypt_r+0xa28>
    a5fc:	cmp	r1, #2
    a600:	blt	ab24 <rb_sha512_crypt_r+0xf74>
    a604:	ldrb	r7, [fp, #-122]	; 0xffffff86
    a608:	ldrb	r3, [fp, #-143]	; 0xffffff71
    a60c:	ldrb	r0, [fp, #-164]	; 0xffffff5c
    a610:	lsl	r7, r7, #8
    a614:	orr	r3, r7, r3, lsl #16
    a618:	orr	r0, r3, r0
    a61c:	mov	r3, #4
    a620:	and	r7, r0, #63	; 0x3f
    a624:	sub	r1, r1, #1
    a628:	ldrb	r7, [ip, r7]
    a62c:	cmp	r1, #2
    a630:	strb	r7, [r2], #1
    a634:	blt	a644 <rb_sha512_crypt_r+0xa94>
    a638:	lsr	r0, r0, #6
    a63c:	subs	r3, r3, #1
    a640:	bhi	a620 <rb_sha512_crypt_r+0xa70>
    a644:	cmp	r1, #2
    a648:	blt	ab24 <rb_sha512_crypt_r+0xf74>
    a64c:	ldrb	r0, [fp, #-163]	; 0xffffff5d
    a650:	ldrb	r7, [fp, #-121]	; 0xffffff87
    a654:	ldrb	r3, [fp, #-142]	; 0xffffff72
    a658:	lsl	r0, r0, #8
    a65c:	orr	r0, r0, r7, lsl #16
    a660:	orr	r0, r0, r3
    a664:	mov	r3, #4
    a668:	and	r7, r0, #63	; 0x3f
    a66c:	sub	r1, r1, #1
    a670:	ldrb	r7, [ip, r7]
    a674:	cmp	r1, #2
    a678:	strb	r7, [r2], #1
    a67c:	blt	a68c <rb_sha512_crypt_r+0xadc>
    a680:	lsr	r0, r0, #6
    a684:	subs	r3, r3, #1
    a688:	bhi	a668 <rb_sha512_crypt_r+0xab8>
    a68c:	cmp	r1, #2
    a690:	blt	ab24 <rb_sha512_crypt_r+0xf74>
    a694:	ldrb	r3, [fp, #-141]	; 0xffffff73
    a698:	ldrb	r0, [fp, #-162]	; 0xffffff5e
    a69c:	ldrb	r7, [fp, #-120]	; 0xffffff88
    a6a0:	lsl	r3, r3, #8
    a6a4:	orr	r0, r3, r0, lsl #16
    a6a8:	mov	r3, #4
    a6ac:	orr	r0, r0, r7
    a6b0:	and	r7, r0, #63	; 0x3f
    a6b4:	sub	r1, r1, #1
    a6b8:	ldrb	r7, [ip, r7]
    a6bc:	cmp	r1, #2
    a6c0:	strb	r7, [r2], #1
    a6c4:	blt	a6d4 <rb_sha512_crypt_r+0xb24>
    a6c8:	lsr	r0, r0, #6
    a6cc:	subs	r3, r3, #1
    a6d0:	bhi	a6b0 <rb_sha512_crypt_r+0xb00>
    a6d4:	cmp	r1, #2
    a6d8:	blt	ab24 <rb_sha512_crypt_r+0xf74>
    a6dc:	ldrb	r7, [fp, #-119]	; 0xffffff89
    a6e0:	ldrb	r3, [fp, #-140]	; 0xffffff74
    a6e4:	ldrb	r0, [fp, #-161]	; 0xffffff5f
    a6e8:	lsl	r7, r7, #8
    a6ec:	orr	r3, r7, r3, lsl #16
    a6f0:	orr	r0, r3, r0
    a6f4:	mov	r3, #4
    a6f8:	and	r7, r0, #63	; 0x3f
    a6fc:	sub	r1, r1, #1
    a700:	ldrb	r7, [ip, r7]
    a704:	cmp	r1, #2
    a708:	strb	r7, [r2], #1
    a70c:	blt	a71c <rb_sha512_crypt_r+0xb6c>
    a710:	lsr	r0, r0, #6
    a714:	subs	r3, r3, #1
    a718:	bhi	a6f8 <rb_sha512_crypt_r+0xb48>
    a71c:	cmp	r1, #2
    a720:	blt	ab24 <rb_sha512_crypt_r+0xf74>
    a724:	ldrb	r0, [fp, #-160]	; 0xffffff60
    a728:	ldrb	r7, [fp, #-118]	; 0xffffff8a
    a72c:	ldrb	r3, [fp, #-139]	; 0xffffff75
    a730:	lsl	r0, r0, #8
    a734:	orr	r0, r0, r7, lsl #16
    a738:	orr	r0, r0, r3
    a73c:	mov	r3, #4
    a740:	and	r7, r0, #63	; 0x3f
    a744:	sub	r1, r1, #1
    a748:	ldrb	r7, [ip, r7]
    a74c:	cmp	r1, #2
    a750:	strb	r7, [r2], #1
    a754:	blt	a764 <rb_sha512_crypt_r+0xbb4>
    a758:	lsr	r0, r0, #6
    a75c:	subs	r3, r3, #1
    a760:	bhi	a740 <rb_sha512_crypt_r+0xb90>
    a764:	cmp	r1, #2
    a768:	blt	ab24 <rb_sha512_crypt_r+0xf74>
    a76c:	ldrb	r3, [fp, #-138]	; 0xffffff76
    a770:	ldrb	r0, [fp, #-159]	; 0xffffff61
    a774:	ldrb	r7, [fp, #-117]	; 0xffffff8b
    a778:	lsl	r3, r3, #8
    a77c:	orr	r0, r3, r0, lsl #16
    a780:	mov	r3, #4
    a784:	orr	r0, r0, r7
    a788:	and	r7, r0, #63	; 0x3f
    a78c:	sub	r1, r1, #1
    a790:	ldrb	r7, [ip, r7]
    a794:	cmp	r1, #2
    a798:	strb	r7, [r2], #1
    a79c:	blt	a7ac <rb_sha512_crypt_r+0xbfc>
    a7a0:	lsr	r0, r0, #6
    a7a4:	subs	r3, r3, #1
    a7a8:	bhi	a788 <rb_sha512_crypt_r+0xbd8>
    a7ac:	cmp	r1, #2
    a7b0:	blt	ab24 <rb_sha512_crypt_r+0xf74>
    a7b4:	ldrb	r7, [fp, #-116]	; 0xffffff8c
    a7b8:	ldrb	r3, [fp, #-137]	; 0xffffff77
    a7bc:	ldrb	r0, [fp, #-158]	; 0xffffff62
    a7c0:	lsl	r7, r7, #8
    a7c4:	orr	r3, r7, r3, lsl #16
    a7c8:	orr	r0, r3, r0
    a7cc:	mov	r3, #4
    a7d0:	and	r7, r0, #63	; 0x3f
    a7d4:	sub	r1, r1, #1
    a7d8:	ldrb	r7, [ip, r7]
    a7dc:	cmp	r1, #2
    a7e0:	strb	r7, [r2], #1
    a7e4:	blt	a7f4 <rb_sha512_crypt_r+0xc44>
    a7e8:	lsr	r0, r0, #6
    a7ec:	subs	r3, r3, #1
    a7f0:	bhi	a7d0 <rb_sha512_crypt_r+0xc20>
    a7f4:	cmp	r1, #2
    a7f8:	blt	ab24 <rb_sha512_crypt_r+0xf74>
    a7fc:	ldrb	r0, [fp, #-157]	; 0xffffff63
    a800:	ldrb	r7, [fp, #-115]	; 0xffffff8d
    a804:	ldrb	r3, [fp, #-136]	; 0xffffff78
    a808:	lsl	r0, r0, #8
    a80c:	orr	r0, r0, r7, lsl #16
    a810:	orr	r0, r0, r3
    a814:	mov	r3, #4
    a818:	and	r7, r0, #63	; 0x3f
    a81c:	sub	r1, r1, #1
    a820:	ldrb	r7, [ip, r7]
    a824:	cmp	r1, #2
    a828:	strb	r7, [r2], #1
    a82c:	blt	a83c <rb_sha512_crypt_r+0xc8c>
    a830:	lsr	r0, r0, #6
    a834:	subs	r3, r3, #1
    a838:	bhi	a818 <rb_sha512_crypt_r+0xc68>
    a83c:	cmp	r1, #2
    a840:	blt	ab24 <rb_sha512_crypt_r+0xf74>
    a844:	ldrb	r3, [fp, #-135]	; 0xffffff79
    a848:	ldrb	r0, [fp, #-156]	; 0xffffff64
    a84c:	ldrb	r7, [fp, #-114]	; 0xffffff8e
    a850:	lsl	r3, r3, #8
    a854:	orr	r0, r3, r0, lsl #16
    a858:	mov	r3, #4
    a85c:	orr	r0, r0, r7
    a860:	and	r7, r0, #63	; 0x3f
    a864:	sub	r1, r1, #1
    a868:	ldrb	r7, [ip, r7]
    a86c:	cmp	r1, #2
    a870:	strb	r7, [r2], #1
    a874:	blt	a884 <rb_sha512_crypt_r+0xcd4>
    a878:	lsr	r0, r0, #6
    a87c:	subs	r3, r3, #1
    a880:	bhi	a860 <rb_sha512_crypt_r+0xcb0>
    a884:	cmp	r1, #2
    a888:	blt	ab24 <rb_sha512_crypt_r+0xf74>
    a88c:	ldrb	r7, [fp, #-113]	; 0xffffff8f
    a890:	ldrb	r3, [fp, #-134]	; 0xffffff7a
    a894:	ldrb	r0, [fp, #-155]	; 0xffffff65
    a898:	lsl	r7, r7, #8
    a89c:	orr	r3, r7, r3, lsl #16
    a8a0:	orr	r0, r3, r0
    a8a4:	mov	r3, #4
    a8a8:	and	r7, r0, #63	; 0x3f
    a8ac:	sub	r1, r1, #1
    a8b0:	ldrb	r7, [ip, r7]
    a8b4:	cmp	r1, #2
    a8b8:	strb	r7, [r2], #1
    a8bc:	blt	a8cc <rb_sha512_crypt_r+0xd1c>
    a8c0:	lsr	r0, r0, #6
    a8c4:	subs	r3, r3, #1
    a8c8:	bhi	a8a8 <rb_sha512_crypt_r+0xcf8>
    a8cc:	ldr	sl, [fp, #-952]	; 0xfffffc48
    a8d0:	cmp	r1, #2
    a8d4:	blt	ab24 <rb_sha512_crypt_r+0xf74>
    a8d8:	ldrb	r0, [fp, #-154]	; 0xffffff66
    a8dc:	ldrb	r7, [fp, #-112]	; 0xffffff90
    a8e0:	ldrb	r3, [fp, #-133]	; 0xffffff7b
    a8e4:	lsl	r0, r0, #8
    a8e8:	orr	r0, r0, r7, lsl #16
    a8ec:	orr	r0, r0, r3
    a8f0:	mov	r3, #4
    a8f4:	and	r7, r0, #63	; 0x3f
    a8f8:	sub	r1, r1, #1
    a8fc:	ldrb	r7, [ip, r7]
    a900:	cmp	r1, #2
    a904:	strb	r7, [r2], #1
    a908:	blt	a918 <rb_sha512_crypt_r+0xd68>
    a90c:	lsr	r0, r0, #6
    a910:	subs	r3, r3, #1
    a914:	bhi	a8f4 <rb_sha512_crypt_r+0xd44>
    a918:	ldr	sl, [fp, #-952]	; 0xfffffc48
    a91c:	cmp	r1, #2
    a920:	blt	ab24 <rb_sha512_crypt_r+0xf74>
    a924:	ldrb	r3, [fp, #-132]	; 0xffffff7c
    a928:	ldrb	r0, [fp, #-153]	; 0xffffff67
    a92c:	ldrb	r7, [fp, #-111]	; 0xffffff91
    a930:	lsl	r3, r3, #8
    a934:	orr	r0, r3, r0, lsl #16
    a938:	mov	r3, #4
    a93c:	orr	r0, r0, r7
    a940:	and	r7, r0, #63	; 0x3f
    a944:	sub	r1, r1, #1
    a948:	ldrb	r7, [ip, r7]
    a94c:	cmp	r1, #2
    a950:	strb	r7, [r2], #1
    a954:	blt	a964 <rb_sha512_crypt_r+0xdb4>
    a958:	lsr	r0, r0, #6
    a95c:	subs	r3, r3, #1
    a960:	bhi	a940 <rb_sha512_crypt_r+0xd90>
    a964:	ldr	sl, [fp, #-952]	; 0xfffffc48
    a968:	cmp	r1, #2
    a96c:	blt	ab24 <rb_sha512_crypt_r+0xf74>
    a970:	ldrb	r7, [fp, #-110]	; 0xffffff92
    a974:	ldrb	r3, [fp, #-131]	; 0xffffff7d
    a978:	ldrb	r0, [fp, #-152]	; 0xffffff68
    a97c:	lsl	r7, r7, #8
    a980:	orr	r3, r7, r3, lsl #16
    a984:	orr	r0, r3, r0
    a988:	mov	r3, #4
    a98c:	and	r7, r0, #63	; 0x3f
    a990:	sub	r1, r1, #1
    a994:	ldrb	r7, [ip, r7]
    a998:	cmp	r1, #2
    a99c:	strb	r7, [r2], #1
    a9a0:	blt	a9b0 <rb_sha512_crypt_r+0xe00>
    a9a4:	lsr	r0, r0, #6
    a9a8:	subs	r3, r3, #1
    a9ac:	bhi	a98c <rb_sha512_crypt_r+0xddc>
    a9b0:	ldr	sl, [fp, #-952]	; 0xfffffc48
    a9b4:	cmp	r1, #2
    a9b8:	blt	ab24 <rb_sha512_crypt_r+0xf74>
    a9bc:	ldrb	r0, [fp, #-151]	; 0xffffff69
    a9c0:	ldrb	r7, [fp, #-109]	; 0xffffff93
    a9c4:	ldrb	r3, [fp, #-130]	; 0xffffff7e
    a9c8:	lsl	r0, r0, #8
    a9cc:	orr	r0, r0, r7, lsl #16
    a9d0:	orr	r0, r0, r3
    a9d4:	mov	r3, #4
    a9d8:	and	r7, r0, #63	; 0x3f
    a9dc:	sub	r1, r1, #1
    a9e0:	ldrb	r7, [ip, r7]
    a9e4:	cmp	r1, #2
    a9e8:	strb	r7, [r2], #1
    a9ec:	blt	a9fc <rb_sha512_crypt_r+0xe4c>
    a9f0:	lsr	r0, r0, #6
    a9f4:	subs	r3, r3, #1
    a9f8:	bhi	a9d8 <rb_sha512_crypt_r+0xe28>
    a9fc:	ldr	sl, [fp, #-952]	; 0xfffffc48
    aa00:	cmp	r1, #2
    aa04:	blt	ab24 <rb_sha512_crypt_r+0xf74>
    aa08:	ldrb	r3, [fp, #-129]	; 0xffffff7f
    aa0c:	ldrb	r0, [fp, #-150]	; 0xffffff6a
    aa10:	ldrb	r7, [fp, #-108]	; 0xffffff94
    aa14:	lsl	r3, r3, #8
    aa18:	orr	r0, r3, r0, lsl #16
    aa1c:	mov	r3, #4
    aa20:	orr	r0, r0, r7
    aa24:	and	r7, r0, #63	; 0x3f
    aa28:	sub	r1, r1, #1
    aa2c:	ldrb	r7, [ip, r7]
    aa30:	cmp	r1, #2
    aa34:	strb	r7, [r2], #1
    aa38:	blt	aa48 <rb_sha512_crypt_r+0xe98>
    aa3c:	lsr	r0, r0, #6
    aa40:	subs	r3, r3, #1
    aa44:	bhi	aa24 <rb_sha512_crypt_r+0xe74>
    aa48:	ldr	sl, [fp, #-952]	; 0xfffffc48
    aa4c:	cmp	r1, #2
    aa50:	blt	ab24 <rb_sha512_crypt_r+0xf74>
    aa54:	ldrb	r7, [fp, #-107]	; 0xffffff95
    aa58:	ldrb	r3, [fp, #-128]	; 0xffffff80
    aa5c:	ldrb	r0, [fp, #-149]	; 0xffffff6b
    aa60:	lsl	r7, r7, #8
    aa64:	orr	r3, r7, r3, lsl #16
    aa68:	orr	r0, r3, r0
    aa6c:	mov	r3, #4
    aa70:	and	r7, r0, #63	; 0x3f
    aa74:	sub	r1, r1, #1
    aa78:	ldrb	r7, [ip, r7]
    aa7c:	cmp	r1, #2
    aa80:	strb	r7, [r2], #1
    aa84:	blt	aa94 <rb_sha512_crypt_r+0xee4>
    aa88:	lsr	r0, r0, #6
    aa8c:	subs	r3, r3, #1
    aa90:	bhi	aa70 <rb_sha512_crypt_r+0xec0>
    aa94:	ldr	sl, [fp, #-952]	; 0xfffffc48
    aa98:	cmp	r1, #2
    aa9c:	blt	ab24 <rb_sha512_crypt_r+0xf74>
    aaa0:	ldrb	r0, [fp, #-148]	; 0xffffff6c
    aaa4:	ldrb	r7, [fp, #-106]	; 0xffffff96
    aaa8:	ldrb	r3, [fp, #-127]	; 0xffffff81
    aaac:	lsl	r0, r0, #8
    aab0:	orr	r0, r0, r7, lsl #16
    aab4:	orr	r0, r0, r3
    aab8:	mov	r3, #4
    aabc:	and	r7, r0, #63	; 0x3f
    aac0:	sub	r1, r1, #1
    aac4:	ldrb	r7, [ip, r7]
    aac8:	cmp	r1, #2
    aacc:	strb	r7, [r2], #1
    aad0:	blt	aae0 <rb_sha512_crypt_r+0xf30>
    aad4:	lsr	r0, r0, #6
    aad8:	subs	r3, r3, #1
    aadc:	bhi	aabc <rb_sha512_crypt_r+0xf0c>
    aae0:	ldr	sl, [fp, #-952]	; 0xfffffc48
    aae4:	cmp	r1, #2
    aae8:	blt	ab24 <rb_sha512_crypt_r+0xf74>
    aaec:	ldrb	r0, [fp, #-105]	; 0xffffff97
    aaf0:	mov	r3, #2
    aaf4:	and	r7, r0, #63	; 0x3f
    aaf8:	sub	r1, r1, #1
    aafc:	ldrb	r7, [ip, r7]
    ab00:	cmp	r1, #2
    ab04:	strb	r7, [r2], #1
    ab08:	blt	ab18 <rb_sha512_crypt_r+0xf68>
    ab0c:	lsr	r0, r0, #6
    ab10:	subs	r3, r3, #1
    ab14:	bhi	aaf4 <rb_sha512_crypt_r+0xf44>
    ab18:	ldr	sl, [fp, #-952]	; 0xfffffc48
    ab1c:	cmp	r1, #1
    ab20:	bgt	ac5c <rb_sha512_crypt_r+0x10ac>
    ab24:	bl	5540 <__errno_location@plt>
    ab28:	mov	r1, #34	; 0x22
    ab2c:	str	r1, [r0]
    ab30:	add	r0, pc, #312	; 0x138
    ab34:	sub	r5, fp, #576	; 0x240
    ab38:	vmov.i32	q4, #0	; 0x00000000
    ab3c:	vld1.64	{d16-d17}, [r0 :128]
    ab40:	add	r0, pc, #344	; 0x158
    ab44:	add	r1, pc, #324	; 0x144
    ab48:	vld1.64	{d20-d21}, [r0 :128]
    ab4c:	vld1.64	{d18-d19}, [r1 :128]
    ab50:	mov	r1, #20
    ab54:	vst1.64	{d16-d17}, [r5]
    ab58:	add	r0, pc, #288	; 0x120
    ab5c:	ldr	r2, [fp, #-936]	; 0xfffffc58
    ab60:	vld1.64	{d16-d17}, [r0 :128]
    ab64:	ldr	r0, [fp, #-940]	; 0xfffffc54
    ab68:	vst1.64	{d18-d19}, [r0]
    ab6c:	ldr	r0, [fp, #-944]	; 0xfffffc50
    ab70:	vst1.64	{d20-d21}, [r0]
    ab74:	ldr	r0, [fp, #-948]	; 0xfffffc4c
    ab78:	vst1.64	{d16-d17}, [r0]
    ab7c:	mov	r0, #0
    ab80:	str	r0, [r2, #16]
    ab84:	vst1.64	{d8-d9}, [r2], r1
    ab88:	sub	r1, fp, #168	; 0xa8
    ab8c:	str	r0, [r2]
    ab90:	mov	r0, r5
    ab94:	bl	ae80 <rb_sha512_finish_ctx>
    ab98:	sub	r0, fp, #232	; 0xe8
    ab9c:	ldr	r4, [fp, #-924]	; 0xfffffc64
    aba0:	mov	r1, r0
    aba4:	add	r0, r0, #32
    aba8:	vst1.64	{d8-d9}, [r0]
    abac:	add	r0, r1, #16
    abb0:	vst1.64	{d8-d9}, [r0]
    abb4:	mov	r0, #48	; 0x30
    abb8:	vst1.64	{d8-d9}, [r1], r0
    abbc:	ldr	r0, [fp, #-928]	; 0xfffffc60
    abc0:	mov	r2, r4
    abc4:	vst1.64	{d8-d9}, [r1]
    abc8:	mov	r1, #0
    abcc:	bl	4ee0 <memset@plt>
    abd0:	ldr	r0, [fp, #-956]	; 0xfffffc44
    abd4:	mov	r1, #0
    abd8:	mov	r2, sl
    abdc:	bl	4ee0 <memset@plt>
    abe0:	mov	r0, r5
    abe4:	mov	r1, #0
    abe8:	mov	r2, #344	; 0x158
    abec:	bl	4ee0 <memset@plt>
    abf0:	sub	r0, fp, #920	; 0x398
    abf4:	mov	r1, #0
    abf8:	mov	r2, #344	; 0x158
    abfc:	bl	4ee0 <memset@plt>
    ac00:	ldr	r0, [fp, #-980]	; 0xfffffc2c
    ac04:	cmp	r0, #0
    ac08:	beq	ac18 <rb_sha512_crypt_r+0x1068>
    ac0c:	mov	r1, #0
    ac10:	mov	r2, r4
    ac14:	bl	4ee0 <memset@plt>
    ac18:	ldr	r0, [fp, #-984]	; 0xfffffc28
    ac1c:	cmp	r0, #0
    ac20:	beq	ac30 <rb_sha512_crypt_r+0x1080>
    ac24:	mov	r1, #0
    ac28:	mov	r2, sl
    ac2c:	bl	4ee0 <memset@plt>
    ac30:	ldr	r0, [fp, #-932]	; 0xfffffc5c
    ac34:	sub	sp, fp, #96	; 0x60
    ac38:	vpop	{d8-d15}
    ac3c:	add	sp, sp, #4
    ac40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac44:	mov	r0, #0
    ac48:	str	r0, [fp, #-992]	; 0xfffffc20
    ac4c:	movw	r0, #5000	; 0x1388
    ac50:	str	r0, [fp, #-932]	; 0xfffffc5c
    ac54:	b	9c64 <rb_sha512_crypt_r+0xb4>
    ac58:	.word	0x0000e80e
    ac5c:	mov	r0, #0
    ac60:	strb	r0, [r2]
    ac64:	ldr	r0, [fp, #-960]	; 0xfffffc40
    ac68:	str	r0, [fp, #-932]	; 0xfffffc5c
    ac6c:	b	ab30 <rb_sha512_crypt_r+0xf80>
    ac70:	.word	0xf3bcc908
    ac74:	.word	0x6a09e667
    ac78:	.word	0x84caa73b
    ac7c:	.word	0xbb67ae85
    ac80:	.word	0xfb41bd6b
    ac84:	.word	0x1f83d9ab
    ac88:	.word	0x137e2179
    ac8c:	.word	0x5be0cd19
    ac90:	.word	0xfe94f82b
    ac94:	.word	0x3c6ef372
    ac98:	.word	0x5f1d36f1
    ac9c:	.word	0xa54ff53a
    aca0:	.word	0xade682d1
    aca4:	.word	0x510e527f
    aca8:	.word	0x2b3e6c1f
    acac:	.word	0x9b05688c
    acb0:	.word	0x0000e5cc
    acb4:	.word	0x0000e104
    acb8:	.word	0x0000e588
    acbc:	.word	0x0000dfff

0000acc0 <rb_sha512_process_bytes>:
    acc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    acc4:	add	fp, sp, #28
    acc8:	sub	sp, sp, #12
    accc:	mov	r9, r2
    acd0:	mov	r8, r0
    acd4:	mov	r4, r2
    acd8:	mov	r5, r1
    acdc:	ldr	r6, [r9, #80]!	; 0x50
    ace0:	ldr	r0, [r9, #4]
    ace4:	orrs	r0, r6, r0
    ace8:	beq	ad6c <rb_sha512_process_bytes+0xac>
    acec:	rsb	r7, r6, #256	; 0x100
    acf0:	add	r0, r4, r6
    acf4:	mov	r1, r8
    acf8:	cmp	r7, r5
    acfc:	add	r0, r0, #88	; 0x58
    ad00:	movhi	r7, r5
    ad04:	mov	r2, r7
    ad08:	bl	50a8 <memcpy@plt>
    ad0c:	ldrd	r0, [r9]
    ad10:	adds	r0, r0, r7
    ad14:	adc	r1, r1, #0
    ad18:	subs	r2, r0, #129	; 0x81
    ad1c:	strd	r0, [r9]
    ad20:	sbcs	r1, r1, #0
    ad24:	bcc	ad64 <rb_sha512_process_bytes+0xa4>
    ad28:	add	sl, r4, #88	; 0x58
    ad2c:	bic	r1, r0, #127	; 0x7f
    ad30:	mov	r2, r4
    ad34:	mov	r0, sl
    ad38:	bl	b20c <rb_sha512_process_block>
    ad3c:	mov	r0, #0
    ad40:	str	r0, [r9, #4]
    ad44:	ldr	r0, [r9]
    ad48:	and	r2, r0, #127	; 0x7f
    ad4c:	add	r0, r7, r6
    ad50:	bic	r0, r0, #127	; 0x7f
    ad54:	str	r2, [r9]
    ad58:	add	r1, sl, r0
    ad5c:	mov	r0, sl
    ad60:	bl	50a8 <memcpy@plt>
    ad64:	sub	r5, r5, r7
    ad68:	add	r8, r8, r7
    ad6c:	cmp	r5, #128	; 0x80
    ad70:	bcc	ae04 <rb_sha512_process_bytes+0x144>
    ad74:	tst	r8, #7
    ad78:	beq	ade8 <rb_sha512_process_bytes+0x128>
    ad7c:	cmp	r5, #129	; 0x81
    ad80:	bcc	ae14 <rb_sha512_process_bytes+0x154>
    ad84:	sub	r0, r5, #128	; 0x80
    ad88:	add	r7, r4, #88	; 0x58
    ad8c:	mov	r6, r8
    ad90:	str	r0, [sp, #8]
    ad94:	sub	r0, r5, #129	; 0x81
    ad98:	bic	sl, r0, #127	; 0x7f
    ad9c:	add	r0, sl, #128	; 0x80
    ada0:	str	r0, [sp, #4]
    ada4:	mov	r0, r7
    ada8:	mov	r1, r6
    adac:	mov	r2, #128	; 0x80
    adb0:	bl	50a8 <memcpy@plt>
    adb4:	mov	r0, r7
    adb8:	mov	r1, #128	; 0x80
    adbc:	mov	r2, r4
    adc0:	bl	b20c <rb_sha512_process_block>
    adc4:	sub	r5, r5, #128	; 0x80
    adc8:	add	r6, r6, #128	; 0x80
    adcc:	cmp	r5, #128	; 0x80
    add0:	bhi	ada4 <rb_sha512_process_bytes+0xe4>
    add4:	ldr	r0, [sp, #8]
    add8:	sub	r5, r0, sl
    addc:	ldr	r0, [sp, #4]
    ade0:	add	r8, r8, r0
    ade4:	b	ae18 <rb_sha512_process_bytes+0x158>
    ade8:	bic	r6, r5, #127	; 0x7f
    adec:	mov	r0, r8
    adf0:	mov	r2, r4
    adf4:	mov	r1, r6
    adf8:	bl	b20c <rb_sha512_process_block>
    adfc:	add	r8, r8, r6
    ae00:	and	r5, r5, #127	; 0x7f
    ae04:	cmp	r5, #0
    ae08:	bne	ae18 <rb_sha512_process_bytes+0x158>
    ae0c:	sub	sp, fp, #28
    ae10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae14:	mov	r5, #128	; 0x80
    ae18:	ldr	r6, [r9]
    ae1c:	mov	r1, r8
    ae20:	mov	r2, r5
    ae24:	add	r0, r4, r6
    ae28:	add	r0, r0, #88	; 0x58
    ae2c:	bl	50a8 <memcpy@plt>
    ae30:	add	r6, r5, r6
    ae34:	cmp	r6, #128	; 0x80
    ae38:	bcc	ae64 <rb_sha512_process_bytes+0x1a4>
    ae3c:	add	r5, r4, #88	; 0x58
    ae40:	mov	r1, #128	; 0x80
    ae44:	mov	r2, r4
    ae48:	mov	r0, r5
    ae4c:	bl	b20c <rb_sha512_process_block>
    ae50:	sub	r6, r6, #128	; 0x80
    ae54:	add	r1, r4, #216	; 0xd8
    ae58:	mov	r0, r5
    ae5c:	mov	r2, r6
    ae60:	bl	50a8 <memcpy@plt>
    ae64:	mov	r7, #0
    ae68:	strd	r6, [r9]
    ae6c:	sub	sp, fp, #28
    ae70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae74:	nop	{0}
    ae78:	nop	{0}
    ae7c:	nop	{0}

0000ae80 <rb_sha512_finish_ctx>:
    ae80:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    ae84:	add	fp, sp, #24
    ae88:	mov	r5, r0
    ae8c:	mov	r6, r0
    ae90:	mov	r4, r1
    ae94:	ldr	r0, [r5, #64]!	; 0x40
    ae98:	ldrd	r2, [r5, #16]
    ae9c:	ldr	r1, [r5, #4]
    aea0:	adds	r0, r0, r2
    aea4:	adcs	r1, r1, r3
    aea8:	strd	r0, [r5]
    aeac:	mov	r1, #0
    aeb0:	adc	r0, r1, #0
    aeb4:	cmp	r0, #1
    aeb8:	bne	aed0 <rb_sha512_finish_ctx+0x50>
    aebc:	add	r0, r5, #8
    aec0:	ldrd	r8, [r0]
    aec4:	adds	r8, r8, #1
    aec8:	adc	r9, r9, #0
    aecc:	strd	r8, [r0]
    aed0:	rsbs	r7, r2, #111	; 0x6f
    aed4:	add	r8, r6, #88	; 0x58
    aed8:	rscs	r3, r3, #0
    aedc:	mov	r7, #112	; 0x70
    aee0:	add	r0, r8, r2
    aee4:	movwcc	r1, #1
    aee8:	cmp	r1, #0
    aeec:	ldr	r1, [pc, #788]	; b208 <rb_sha512_finish_ctx+0x388>
    aef0:	movwne	r7, #240	; 0xf0
    aef4:	sub	r2, r7, r2
    aef8:	add	r1, pc, r1
    aefc:	bl	50a8 <memcpy@plt>
    af00:	vld1.64	{d1-d2}, [r5]
    af04:	vmov.i64	q10, #0x00ff000000000000
    af08:	vmov.32	r0, d2[1]
    af0c:	vmov.32	r1, d2[0]
    af10:	vmov.32	r3, d1[1]
    af14:	vldr	s0, [pc, #740]	; b200 <rb_sha512_finish_ctx+0x380>
    af18:	lsl	r5, r1, #11
    af1c:	lsl	r2, r0, #3
    af20:	orr	r2, r2, r1, lsr #29
    af24:	vmov	s1, r5
    af28:	lsr	r5, r3, #29
    af2c:	lsl	r3, r3, #11
    af30:	vmov	s8, r5
    af34:	add	r5, pc, #516	; 0x204
    af38:	vld1.64	{d16-d17}, [r5 :128]
    af3c:	add	r5, pc, #524	; 0x20c
    af40:	vmov.f32	s9, s0
    af44:	vorr	d3, d1, d1
    af48:	vld1.64	{d22-d23}, [r5 :128]
    af4c:	add	r5, pc, #524	; 0x20c
    af50:	vand	q10, q0, q10
    af54:	vorr	d5, d1, d1
    af58:	vld1.64	{d24-d25}, [r5 :128]
    af5c:	add	r5, pc, #524	; 0x20c
    af60:	vld1.64	{d18-d19}, [r5 :128]
    af64:	lsl	r5, r1, #3
    af68:	lsr	r1, r1, #5
    af6c:	vmov	s12, r5
    af70:	add	r5, pc, #520	; 0x208
    af74:	vshl.u64	q13, q0, q8
    af78:	orr	r1, r1, r0, lsl #27
    af7c:	vmov.i32	q8, #0	; 0x00000000
    af80:	lsr	r0, r0, #5
    af84:	vmov	s13, r2
    af88:	vld1.64	{d28-d29}, [r5 :128]
    af8c:	add	r5, pc, #508	; 0x1fc
    af90:	vshl.u64	q11, q1, q11
    af94:	vorr	d21, d27, d27
    af98:	vmov.32	r2, d1[0]
    af9c:	vldr	s14, [pc, #608]	; b204 <rb_sha512_finish_ctx+0x384>
    afa0:	vld1.64	{d30-d31}, [r5 :128]
    afa4:	vshl.u64	q12, q1, q12
    afa8:	add	r5, pc, #496	; 0x1f0
    afac:	orr	r3, r3, r2, lsr #21
    afb0:	lsl	r2, r2, #11
    afb4:	vand	q9, q11, q9
    afb8:	vmov.32	d23[0], r2
    afbc:	vorr	q10, q9, q10
    afc0:	vmov.32	d23[1], r3
    afc4:	vsub.i64	q13, q8, q14
    afc8:	vld1.64	{d28-d29}, [r5 :128]
    afcc:	vmov.i64	d22, #0x00000000ff000000
    afd0:	vmov.f32	s15, s0
    afd4:	vand	q12, q12, q15
    afd8:	vshl.u64	q13, q1, q13
    afdc:	vsub.i64	q15, q8, q3
    afe0:	vorr	q9, q2, q3
    afe4:	vmov.32	d6[0], r1
    afe8:	vorr	q10, q10, q12
    afec:	vmov.i64	d7, #0x000000ff00000000
    aff0:	vshl.u64	q15, q2, q15
    aff4:	vmov.32	d6[1], r0
    aff8:	add	r0, pc, #432	; 0x1b0
    affc:	add	r1, pc, #444	; 0x1bc
    b000:	vsub.i64	q14, q8, q14
    b004:	vorr	d19, d31, d31
    b008:	vld1.64	{d4-d5}, [r1 :128]
    b00c:	vld1.64	{d24-d25}, [r0 :128]
    b010:	add	r0, pc, #440	; 0x1b8
    b014:	add	r1, pc, #452	; 0x1c4
    b018:	add	r2, pc, #464	; 0x1d0
    b01c:	vand	q11, q11, q3
    b020:	vshl.u64	q14, q1, q14
    b024:	vld1.64	{d6-d7}, [r1 :128]
    b028:	vorr	q10, q10, q11
    b02c:	vmov.i64	q11, #0x00000000000000ff
    b030:	add	r1, r7, #16
    b034:	vand	q11, q9, q11
    b038:	vsub.i64	q8, q8, q2
    b03c:	vld1.64	{d4-d5}, [r2 :128]
    b040:	vand	q12, q13, q12
    b044:	vld1.64	{d26-d27}, [r0 :128]
    b048:	add	r0, r8, r7
    b04c:	mov	r2, r6
    b050:	vshl.u64	q8, q1, q8
    b054:	vorr	q10, q10, q12
    b058:	vshl.u64	q9, q9, q3
    b05c:	vorr	d19, d23, d23
    b060:	vand	q14, q14, q2
    b064:	vand	q8, q8, q13
    b068:	vorr	q10, q10, q14
    b06c:	vorr	q8, q10, q8
    b070:	vorr	q8, q8, q9
    b074:	vst1.64	{d16-d17}, [r0]
    b078:	mov	r0, r8
    b07c:	bl	b20c <rb_sha512_process_block>
    b080:	ldm	r6, {r0, r1}
    b084:	rev	r0, r0
    b088:	str	r0, [r4, #4]
    b08c:	rev	r0, r1
    b090:	str	r0, [r4]
    b094:	ldr	r0, [r6, #8]
    b098:	ldr	r1, [r6, #12]
    b09c:	rev	r0, r0
    b0a0:	str	r0, [r4, #12]
    b0a4:	rev	r0, r1
    b0a8:	str	r0, [r4, #8]
    b0ac:	ldr	r0, [r6, #16]
    b0b0:	ldr	r1, [r6, #20]
    b0b4:	rev	r0, r0
    b0b8:	str	r0, [r4, #20]
    b0bc:	rev	r0, r1
    b0c0:	str	r0, [r4, #16]
    b0c4:	ldr	r0, [r6, #24]
    b0c8:	ldr	r1, [r6, #28]
    b0cc:	rev	r0, r0
    b0d0:	str	r0, [r4, #28]
    b0d4:	rev	r0, r1
    b0d8:	str	r0, [r4, #24]
    b0dc:	ldr	r0, [r6, #32]
    b0e0:	ldr	r1, [r6, #36]	; 0x24
    b0e4:	rev	r0, r0
    b0e8:	str	r0, [r4, #36]	; 0x24
    b0ec:	rev	r0, r1
    b0f0:	str	r0, [r4, #32]
    b0f4:	ldr	r0, [r6, #40]	; 0x28
    b0f8:	ldr	r1, [r6, #44]	; 0x2c
    b0fc:	rev	r0, r0
    b100:	str	r0, [r4, #44]	; 0x2c
    b104:	rev	r0, r1
    b108:	str	r0, [r4, #40]	; 0x28
    b10c:	ldr	r0, [r6, #48]	; 0x30
    b110:	ldr	r1, [r6, #52]	; 0x34
    b114:	rev	r0, r0
    b118:	str	r0, [r4, #52]	; 0x34
    b11c:	rev	r0, r1
    b120:	str	r0, [r4, #48]	; 0x30
    b124:	ldr	r0, [r6, #56]	; 0x38
    b128:	ldr	r1, [r6, #60]	; 0x3c
    b12c:	rev	r0, r0
    b130:	str	r0, [r4, #60]	; 0x3c
    b134:	rev	r0, r1
    b138:	str	r0, [r4, #56]	; 0x38
    b13c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    b140:	.word	0x00000000
    b144:	.word	0x00ff0000
    b148:	.word	0x0000003b
    b14c:	.word	0x00000000
    b150:	.word	0x0000001b
    b154:	.word	0x00000000
    b158:	.word	0x0000002b
    b15c:	.word	0x00000000
    b160:	.word	0x0000000b
    b164:	.word	0x00000000
    b168:	.word	0x0000001b
	...
    b174:	.word	0x0000ff00
    b178:	.word	0x00000000
    b17c:	.word	0x00ff0000
    b180:	.word	0x00000015
    b184:	.word	0x00000000
    b188:	.word	0x00000005
	...
    b194:	.word	0x000000ff
    b198:	.word	0x00000000
    b19c:	.word	0x0000ff00
    b1a0:	.word	0x00000025
    b1a4:	.word	0x00000000
    b1a8:	.word	0x00000015
    b1ac:	.word	0x00000000
    b1b0:	.word	0x00ff0000
    b1b4:	.word	0x00000000
    b1b8:	.word	0xff000000
    b1bc:	.word	0x00000000
    b1c0:	.word	0x00000035
    b1c4:	.word	0x00000000
    b1c8:	.word	0x00000025
    b1cc:	.word	0x00000000
    b1d0:	.word	0x000000ff
    b1d4:	.word	0x00000000
    b1d8:	.word	0x0000ff00
    b1dc:	.word	0x00000000
    b1e0:	.word	0x00000038
    b1e4:	.word	0x00000000
    b1e8:	.word	0x000000ff
    b1ec:	.word	0x00000000
    b1f0:	.word	0x0000ff00
    b1f4:	.word	0x00000000
    b1f8:	.word	0x00ff0000
	...
    b204:	.word	0x00000035
    b208:	.word	0x0000dc98

0000b20c <rb_sha512_process_block>:
    b20c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b210:	add	fp, sp, #28
    b214:	sub	sp, sp, #860	; 0x35c
    b218:	mov	r6, r0
    b21c:	ldr	r0, [r2, #64]	; 0x40
    b220:	lsr	r7, r1, #3
    b224:	adds	r0, r0, r1
    b228:	str	r0, [r2, #64]	; 0x40
    b22c:	ldr	r0, [r2, #68]	; 0x44
    b230:	adcs	r0, r0, #0
    b234:	str	r0, [r2, #68]	; 0x44
    b238:	mov	r0, #0
    b23c:	ldr	r1, [r2, #60]	; 0x3c
    b240:	ldr	r5, [r2, #36]	; 0x24
    b244:	ldr	sl, [r2, #28]
    b248:	adc	r0, r0, #0
    b24c:	cmp	r0, #1
    b250:	str	r1, [sp, #160]	; 0xa0
    b254:	mov	r1, r2
    b258:	ldr	r3, [r1, #56]!	; 0x38
    b25c:	str	r1, [sp, #24]
    b260:	ldr	r1, [r2, #52]	; 0x34
    b264:	str	r3, [sp, #156]	; 0x9c
    b268:	str	r1, [sp, #152]	; 0x98
    b26c:	mov	r1, r2
    b270:	ldr	r3, [r1, #48]!	; 0x30
    b274:	str	r1, [sp, #20]
    b278:	ldr	r1, [r2, #44]	; 0x2c
    b27c:	str	r3, [sp, #148]	; 0x94
    b280:	str	r1, [sp, #144]	; 0x90
    b284:	mov	r1, r2
    b288:	ldr	r3, [r1, #40]!	; 0x28
    b28c:	str	r1, [sp, #16]
    b290:	mov	r1, r2
    b294:	str	r3, [sp, #140]	; 0x8c
    b298:	ldr	r9, [r1, #32]!
    b29c:	str	r1, [sp, #12]
    b2a0:	mov	r1, r2
    b2a4:	ldr	r3, [r1, #24]!
    b2a8:	str	r3, [sp, #136]	; 0x88
    b2ac:	str	r1, [sp, #8]
    b2b0:	ldm	r2, {r1, r3}
    b2b4:	str	r1, [sp, #124]	; 0x7c
    b2b8:	ldr	r1, [r2, #12]
    b2bc:	str	r3, [sp, #120]	; 0x78
    b2c0:	str	r1, [sp, #128]	; 0x80
    b2c4:	ldr	r1, [r2, #20]
    b2c8:	str	r1, [sp, #132]	; 0x84
    b2cc:	mov	r1, r2
    b2d0:	ldr	r3, [r1, #16]!
    b2d4:	str	r1, [sp, #4]
    b2d8:	mov	r1, r2
    b2dc:	str	r3, [sp, #116]	; 0x74
    b2e0:	ldr	r3, [r1, #8]!
    b2e4:	str	r3, [sp, #112]	; 0x70
    b2e8:	str	r1, [sp]
    b2ec:	bne	b300 <rb_sha512_process_block+0xf4>
    b2f0:	ldrd	r0, [r2, #72]	; 0x48
    b2f4:	adds	r0, r0, #1
    b2f8:	adc	r1, r1, #0
    b2fc:	strd	r0, [r2, #72]	; 0x48
    b300:	cmp	r7, #0
    b304:	str	r2, [sp, #28]
    b308:	beq	b8dc <rb_sha512_process_block+0x6d0>
    b30c:	add	r0, sp, #216	; 0xd8
    b310:	add	r1, r0, #120	; 0x78
    b314:	str	r1, [sp, #88]	; 0x58
    b318:	add	r1, r0, #112	; 0x70
    b31c:	str	r1, [sp, #84]	; 0x54
    b320:	add	r1, r0, #104	; 0x68
    b324:	str	r1, [sp, #80]	; 0x50
    b328:	add	r1, r0, #96	; 0x60
    b32c:	str	r1, [sp, #76]	; 0x4c
    b330:	add	r1, r0, #88	; 0x58
    b334:	str	r1, [sp, #72]	; 0x48
    b338:	add	r1, r0, #80	; 0x50
    b33c:	str	r1, [sp, #68]	; 0x44
    b340:	add	r1, r0, #72	; 0x48
    b344:	str	r1, [sp, #64]	; 0x40
    b348:	add	r1, r0, #64	; 0x40
    b34c:	str	r1, [sp, #60]	; 0x3c
    b350:	add	r1, r0, #56	; 0x38
    b354:	str	r1, [sp, #56]	; 0x38
    b358:	add	r1, r0, #48	; 0x30
    b35c:	str	r1, [sp, #52]	; 0x34
    b360:	add	r1, r0, #40	; 0x28
    b364:	str	r1, [sp, #48]	; 0x30
    b368:	add	r1, r0, #32
    b36c:	str	r1, [sp, #44]	; 0x2c
    b370:	add	r1, r0, #24
    b374:	str	r1, [sp, #40]	; 0x28
    b378:	add	r1, r0, #16
    b37c:	add	r0, r0, #8
    b380:	str	r1, [sp, #36]	; 0x24
    b384:	str	r0, [sp, #32]
    b388:	str	r5, [sp, #108]	; 0x6c
    b38c:	str	r7, [sp, #92]	; 0x5c
    b390:	ldm	r6, {r0, r2}
    b394:	str	r6, [sp, #96]	; 0x60
    b398:	rev	ip, r0
    b39c:	rev	lr, r2
    b3a0:	str	ip, [sp, #220]	; 0xdc
    b3a4:	str	lr, [sp, #216]	; 0xd8
    b3a8:	ldr	r0, [r6, #8]
    b3ac:	ldr	r3, [r6, #12]
    b3b0:	rev	r5, r0
    b3b4:	ldr	r0, [sp, #32]
    b3b8:	rev	r4, r3
    b3bc:	strd	r4, [r0]
    b3c0:	ldr	r0, [r6, #16]
    b3c4:	ldr	r3, [r6, #20]
    b3c8:	rev	r5, r0
    b3cc:	ldr	r0, [sp, #36]	; 0x24
    b3d0:	rev	r4, r3
    b3d4:	strd	r4, [r0]
    b3d8:	ldr	r0, [r6, #24]
    b3dc:	ldr	r3, [r6, #28]
    b3e0:	rev	r5, r0
    b3e4:	ldr	r0, [sp, #40]	; 0x28
    b3e8:	rev	r4, r3
    b3ec:	strd	r4, [r0]
    b3f0:	ldr	r0, [r6, #32]
    b3f4:	ldr	r3, [r6, #36]	; 0x24
    b3f8:	rev	r5, r0
    b3fc:	ldr	r0, [sp, #44]	; 0x2c
    b400:	rev	r4, r3
    b404:	strd	r4, [r0]
    b408:	ldr	r0, [r6, #40]	; 0x28
    b40c:	ldr	r3, [r6, #44]	; 0x2c
    b410:	rev	r5, r0
    b414:	ldr	r0, [sp, #48]	; 0x30
    b418:	rev	r4, r3
    b41c:	strd	r4, [r0]
    b420:	ldr	r0, [r6, #48]	; 0x30
    b424:	ldr	r3, [r6, #52]	; 0x34
    b428:	rev	r5, r0
    b42c:	ldr	r0, [sp, #52]	; 0x34
    b430:	rev	r4, r3
    b434:	strd	r4, [r0]
    b438:	ldr	r0, [r6, #56]	; 0x38
    b43c:	ldr	r3, [r6, #60]	; 0x3c
    b440:	rev	r5, r0
    b444:	ldr	r0, [sp, #56]	; 0x38
    b448:	rev	r4, r3
    b44c:	strd	r4, [r0]
    b450:	ldr	r0, [r6, #64]	; 0x40
    b454:	ldr	r3, [r6, #68]	; 0x44
    b458:	rev	r5, r0
    b45c:	ldr	r0, [sp, #60]	; 0x3c
    b460:	rev	r4, r3
    b464:	strd	r4, [r0]
    b468:	ldr	r0, [r6, #72]	; 0x48
    b46c:	ldr	r3, [r6, #76]	; 0x4c
    b470:	rev	r5, r0
    b474:	ldr	r0, [sp, #64]	; 0x40
    b478:	rev	r4, r3
    b47c:	strd	r4, [r0]
    b480:	ldr	r0, [r6, #80]	; 0x50
    b484:	ldr	r3, [r6, #84]	; 0x54
    b488:	rev	r5, r0
    b48c:	ldr	r0, [sp, #68]	; 0x44
    b490:	rev	r4, r3
    b494:	strd	r4, [r0]
    b498:	ldr	r0, [r6, #88]	; 0x58
    b49c:	ldr	r3, [r6, #92]	; 0x5c
    b4a0:	rev	r5, r0
    b4a4:	ldr	r0, [sp, #72]	; 0x48
    b4a8:	rev	r4, r3
    b4ac:	strd	r4, [r0]
    b4b0:	ldr	r0, [r6, #96]	; 0x60
    b4b4:	ldr	r3, [r6, #100]	; 0x64
    b4b8:	rev	r5, r0
    b4bc:	ldr	r0, [sp, #76]	; 0x4c
    b4c0:	rev	r4, r3
    b4c4:	strd	r4, [r0]
    b4c8:	ldr	r0, [r6, #104]	; 0x68
    b4cc:	ldr	r3, [r6, #108]	; 0x6c
    b4d0:	rev	r5, r0
    b4d4:	ldr	r0, [sp, #80]	; 0x50
    b4d8:	rev	r4, r3
    b4dc:	strd	r4, [r0]
    b4e0:	ldr	r0, [r6, #112]	; 0x70
    b4e4:	ldr	r3, [r6, #116]	; 0x74
    b4e8:	rev	r5, r0
    b4ec:	ldr	r0, [sp, #84]	; 0x54
    b4f0:	rev	r4, r3
    b4f4:	strd	r4, [r0]
    b4f8:	ldr	r0, [r6, #120]	; 0x78
    b4fc:	ldr	r3, [r6, #124]	; 0x7c
    b500:	rev	r5, r0
    b504:	ldr	r0, [sp, #88]	; 0x58
    b508:	rev	r4, r3
    b50c:	strd	r4, [r0]
    b510:	movw	r0, #65024	; 0xfe00
    b514:	movt	r0, #65535	; 0xffff
    b518:	add	r1, sp, #216	; 0xd8
    b51c:	add	r3, r1, r0
    b520:	ldr	r6, [r3, #628]	; 0x274
    b524:	ldr	r7, [r3, #624]	; 0x270
    b528:	ldr	r2, [r3, #520]	; 0x208
    b52c:	lsl	r4, r6, #3
    b530:	lsr	r5, r6, #19
    b534:	lsr	r1, r6, #29
    b538:	orr	r4, r4, r7, lsr #29
    b53c:	orr	r5, r5, r7, lsl #13
    b540:	orr	r1, r1, r7, lsl #3
    b544:	eor	r4, r4, r6, lsr #6
    b548:	eor	r5, r4, r5
    b54c:	lsr	r4, r7, #6
    b550:	lsr	r7, r7, #19
    b554:	orr	r4, r4, r6, lsl #26
    b558:	orr	r7, r7, r6, lsl #13
    b55c:	ldr	r6, [r3, #584]	; 0x248
    b560:	eor	r1, r1, r4
    b564:	ldr	r4, [r3, #524]	; 0x20c
    b568:	eor	r1, r1, r7
    b56c:	ldr	r7, [r3, #588]	; 0x24c
    b570:	adds	r6, lr, r6
    b574:	mov	lr, r2
    b578:	adc	r7, ip, r7
    b57c:	adds	r1, r6, r1
    b580:	lsr	r6, r2, #7
    b584:	adc	ip, r7, r5
    b588:	lsr	r5, r2, #8
    b58c:	orr	r6, r6, r4, lsl #25
    b590:	orr	r5, r5, r4, lsl #24
    b594:	eor	r6, r5, r6
    b598:	lsrs	r5, r4, #1
    b59c:	rrx	r7, r2
    b5a0:	eor	r7, r6, r7
    b5a4:	orr	r6, r5, r2, lsl #31
    b5a8:	lsr	r5, r4, #8
    b5ac:	orr	r5, r5, r2, lsl #24
    b5b0:	adds	r1, r1, r7
    b5b4:	eor	r5, r5, r4, lsr #7
    b5b8:	str	r1, [r3, #640]	; 0x280
    b5bc:	eor	r7, r5, r6
    b5c0:	adc	r7, ip, r7
    b5c4:	adds	r0, r0, #8
    b5c8:	mov	ip, r4
    b5cc:	str	r7, [r3, #644]	; 0x284
    b5d0:	bne	b518 <rb_sha512_process_block+0x30c>
    b5d4:	ldr	r0, [sp, #124]	; 0x7c
    b5d8:	ldr	r7, [sp, #116]	; 0x74
    b5dc:	ldr	r6, [sp, #152]	; 0x98
    b5e0:	ldr	r2, [sp, #112]	; 0x70
    b5e4:	ldr	r3, [sp, #128]	; 0x80
    b5e8:	ldr	r8, [sp, #108]	; 0x6c
    b5ec:	ldr	r5, [sp, #140]	; 0x8c
    b5f0:	ldr	lr, [sp, #156]	; 0x9c
    b5f4:	ldr	r4, [sp, #160]	; 0xa0
    b5f8:	mov	ip, #0
    b5fc:	str	sl, [sp, #100]	; 0x64
    b600:	str	sl, [sp, #176]	; 0xb0
    b604:	str	r9, [sp, #104]	; 0x68
    b608:	str	r9, [sp, #188]	; 0xbc
    b60c:	str	r0, [sp, #196]	; 0xc4
    b610:	ldr	r0, [sp, #120]	; 0x78
    b614:	str	r7, [sp, #208]	; 0xd0
    b618:	ldr	r7, [sp, #132]	; 0x84
    b61c:	str	r6, [sp, #200]	; 0xc8
    b620:	str	r0, [sp, #192]	; 0xc0
    b624:	ldr	r0, [sp, #136]	; 0x88
    b628:	str	r7, [sp, #204]	; 0xcc
    b62c:	ldr	r7, [sp, #144]	; 0x90
    b630:	str	r0, [sp, #180]	; 0xb4
    b634:	ldr	r0, [sp, #148]	; 0x94
    b638:	str	r0, [sp, #212]	; 0xd4
    b63c:	ldr	r1, [sp, #204]	; 0xcc
    b640:	ldr	r9, [sp, #212]	; 0xd4
    b644:	ldr	r0, [sp, #200]	; 0xc8
    b648:	mov	r6, r7
    b64c:	str	r5, [sp, #212]	; 0xd4
    b650:	mov	r7, r8
    b654:	ldr	r5, [sp, #188]	; 0xbc
    b658:	mov	r8, r3
    b65c:	mov	sl, r2
    b660:	ldr	r3, [sp, #192]	; 0xc0
    b664:	ldr	r2, [sp, #196]	; 0xc4
    b668:	str	r6, [sp, #200]	; 0xc8
    b66c:	str	r1, [sp, #164]	; 0xa4
    b670:	ldr	r1, [sp, #208]	; 0xd0
    b674:	str	r0, [sp, #172]	; 0xac
    b678:	bic	r0, r0, r7
    b67c:	str	r9, [sp, #168]	; 0xa8
    b680:	str	r1, [sp, #184]	; 0xb8
    b684:	and	r1, r7, r6
    b688:	ldr	r6, [sp, #212]	; 0xd4
    b68c:	orr	r0, r1, r0
    b690:	bic	r1, r9, r5
    b694:	and	r6, r5, r6
    b698:	orr	r1, r6, r1
    b69c:	lsr	r6, r7, #18
    b6a0:	adds	r1, r1, lr
    b6a4:	orr	r6, r6, r5, lsl #14
    b6a8:	adc	lr, r0, r4
    b6ac:	lsr	r4, r7, #14
    b6b0:	lsr	r0, r5, #14
    b6b4:	orr	r4, r4, r5, lsl #18
    b6b8:	orr	r0, r0, r7, lsl #18
    b6bc:	eor	r6, r4, r6
    b6c0:	lsl	r4, r7, #23
    b6c4:	orr	r4, r4, r5, lsr #9
    b6c8:	eor	r6, r6, r4
    b6cc:	lsr	r4, r5, #18
    b6d0:	orr	r4, r4, r7, lsl #14
    b6d4:	eor	r0, r0, r4
    b6d8:	lsr	r4, r7, #9
    b6dc:	orr	r4, r4, r5, lsl #23
    b6e0:	eor	r0, r0, r4
    b6e4:	adds	r0, r1, r0
    b6e8:	adc	r1, lr, r6
    b6ec:	ldr	r6, [pc, #636]	; b970 <rb_sha512_process_block+0x764>
    b6f0:	ldr	lr, [sp, #164]	; 0xa4
    b6f4:	str	r8, [sp, #204]	; 0xcc
    b6f8:	str	sl, [sp, #208]	; 0xd0
    b6fc:	add	r6, pc, r6
    b700:	ldr	r4, [r6, ip]!
    b704:	ldr	r6, [r6, #4]
    b708:	adds	r0, r0, r4
    b70c:	adc	r1, r1, r6
    b710:	add	r6, sp, #216	; 0xd8
    b714:	mov	r4, r6
    b718:	add	r6, r6, ip
    b71c:	ldr	r4, [r4, ip]
    b720:	ldr	r6, [r6, #4]
    b724:	add	ip, ip, #8
    b728:	adds	r9, r0, r4
    b72c:	and	r0, r8, lr
    b730:	ldr	r4, [sp, #184]	; 0xb8
    b734:	adc	r6, r1, r6
    b738:	eor	r1, r8, lr
    b73c:	and	r1, r3, r1
    b740:	eor	r0, r1, r0
    b744:	lsl	r1, r3, #30
    b748:	str	r0, [sp, #196]	; 0xc4
    b74c:	lsr	r0, r3, #28
    b750:	orr	r1, r1, r2, lsr #2
    b754:	orr	r0, r0, r2, lsl #4
    b758:	eor	r0, r0, r1
    b75c:	lsl	r1, r3, #25
    b760:	orr	r1, r1, r2, lsr #7
    b764:	eor	r8, r0, r1
    b768:	eor	r0, sl, r4
    b76c:	and	r1, sl, r4
    b770:	mov	sl, r4
    b774:	lsr	r4, r3, #2
    b778:	and	r0, r2, r0
    b77c:	orr	r4, r4, r2, lsl #30
    b780:	eor	r0, r0, r1
    b784:	lsr	r1, r2, #28
    b788:	orr	r1, r1, r3, lsl #4
    b78c:	eor	r1, r1, r4
    b790:	lsr	r4, r3, #7
    b794:	orr	r4, r4, r2, lsl #25
    b798:	eor	r1, r1, r4
    b79c:	ldr	r4, [sp, #172]	; 0xac
    b7a0:	adds	r0, r1, r0
    b7a4:	ldr	r1, [sp, #196]	; 0xc4
    b7a8:	adc	r1, r8, r1
    b7ac:	adds	r0, r0, r9
    b7b0:	str	r0, [sp, #196]	; 0xc4
    b7b4:	adc	r0, r1, r6
    b7b8:	mov	r1, lr
    b7bc:	str	r0, [sp, #192]	; 0xc0
    b7c0:	ldr	r0, [sp, #180]	; 0xb4
    b7c4:	str	sl, [sp, #180]	; 0xb4
    b7c8:	adds	r0, r9, r0
    b7cc:	str	r0, [sp, #188]	; 0xbc
    b7d0:	ldr	r0, [sp, #176]	; 0xb0
    b7d4:	str	lr, [sp, #176]	; 0xb0
    b7d8:	ldr	lr, [sp, #168]	; 0xa8
    b7dc:	adc	r8, r6, r0
    b7e0:	cmp	ip, #640	; 0x280
    b7e4:	bne	b63c <rb_sha512_process_block+0x430>
    b7e8:	ldr	r6, [sp, #156]	; 0x9c
    b7ec:	mov	r0, r4
    b7f0:	ldr	r9, [sp, #104]	; 0x68
    b7f4:	mov	sl, lr
    b7f8:	ldr	r0, [sp, #212]	; 0xd4
    b7fc:	ldr	sl, [sp, #100]	; 0x64
    b800:	adds	r6, lr, r6
    b804:	str	r6, [sp, #156]	; 0x9c
    b808:	ldr	r6, [sp, #160]	; 0xa0
    b80c:	adc	r6, r4, r6
    b810:	ldr	r4, [sp, #200]	; 0xc8
    b814:	str	r6, [sp, #160]	; 0xa0
    b818:	ldr	r6, [sp, #148]	; 0x94
    b81c:	adds	r6, r0, r6
    b820:	ldr	r0, [sp, #188]	; 0xbc
    b824:	str	r6, [sp, #148]	; 0x94
    b828:	ldr	r6, [sp, #152]	; 0x98
    b82c:	adc	r6, r4, r6
    b830:	str	r6, [sp, #152]	; 0x98
    b834:	ldr	r6, [sp, #140]	; 0x8c
    b838:	adds	r6, r5, r6
    b83c:	str	r6, [sp, #140]	; 0x8c
    b840:	ldr	r6, [sp, #144]	; 0x90
    b844:	adc	r6, r7, r6
    b848:	ldr	r7, [sp, #108]	; 0x6c
    b84c:	adds	r9, r0, r9
    b850:	ldr	r0, [sp, #184]	; 0xb8
    b854:	str	r6, [sp, #144]	; 0x90
    b858:	ldr	r6, [sp, #208]	; 0xd0
    b85c:	adc	r7, r8, r7
    b860:	mov	r5, r7
    b864:	ldr	r7, [sp, #136]	; 0x88
    b868:	adds	r7, r0, r7
    b86c:	ldr	r0, [sp, #196]	; 0xc4
    b870:	str	r7, [sp, #136]	; 0x88
    b874:	ldr	r7, [sp, #116]	; 0x74
    b878:	adc	sl, r1, sl
    b87c:	ldr	r1, [sp, #192]	; 0xc0
    b880:	adds	r7, r6, r7
    b884:	ldr	r6, [sp, #204]	; 0xcc
    b888:	str	r7, [sp, #116]	; 0x74
    b88c:	ldr	r7, [sp, #132]	; 0x84
    b890:	adc	r7, r6, r7
    b894:	ldr	r6, [sp, #96]	; 0x60
    b898:	str	r7, [sp, #132]	; 0x84
    b89c:	ldr	r7, [sp, #112]	; 0x70
    b8a0:	add	r6, r6, #128	; 0x80
    b8a4:	adds	r7, r2, r7
    b8a8:	ldr	r2, [sp, #128]	; 0x80
    b8ac:	str	r7, [sp, #112]	; 0x70
    b8b0:	ldr	r7, [sp, #92]	; 0x5c
    b8b4:	adc	r2, r3, r2
    b8b8:	str	r2, [sp, #128]	; 0x80
    b8bc:	ldr	r2, [sp, #124]	; 0x7c
    b8c0:	adds	r2, r0, r2
    b8c4:	ldr	r0, [sp, #120]	; 0x78
    b8c8:	str	r2, [sp, #124]	; 0x7c
    b8cc:	adc	r0, r1, r0
    b8d0:	subs	r7, r7, #16
    b8d4:	str	r0, [sp, #120]	; 0x78
    b8d8:	bne	b388 <rb_sha512_process_block+0x17c>
    b8dc:	ldr	r0, [sp, #28]
    b8e0:	ldr	r1, [sp, #124]	; 0x7c
    b8e4:	ldr	r2, [sp, #120]	; 0x78
    b8e8:	stm	r0, {r1, r2}
    b8ec:	ldr	r0, [sp, #128]	; 0x80
    b8f0:	ldr	r1, [sp]
    b8f4:	ldr	r2, [sp, #112]	; 0x70
    b8f8:	str	r2, [r1]
    b8fc:	str	r0, [r1, #4]
    b900:	ldr	r0, [sp, #132]	; 0x84
    b904:	ldr	r1, [sp, #4]
    b908:	ldr	r2, [sp, #116]	; 0x74
    b90c:	str	r2, [r1]
    b910:	str	r0, [r1, #4]
    b914:	ldr	r0, [sp, #8]
    b918:	ldr	r1, [sp, #136]	; 0x88
    b91c:	stm	r0, {r1, sl}
    b920:	ldr	r0, [sp, #12]
    b924:	str	r9, [r0]
    b928:	str	r5, [r0, #4]
    b92c:	ldr	r0, [sp, #144]	; 0x90
    b930:	ldr	r1, [sp, #16]
    b934:	ldr	r2, [sp, #140]	; 0x8c
    b938:	str	r2, [r1]
    b93c:	str	r0, [r1, #4]
    b940:	ldr	r0, [sp, #152]	; 0x98
    b944:	ldr	r1, [sp, #20]
    b948:	ldr	r2, [sp, #148]	; 0x94
    b94c:	str	r2, [r1]
    b950:	str	r0, [r1, #4]
    b954:	ldr	r0, [sp, #160]	; 0xa0
    b958:	ldr	r1, [sp, #24]
    b95c:	ldr	r2, [sp, #156]	; 0x9c
    b960:	str	r2, [r1]
    b964:	str	r0, [r1, #4]
    b968:	sub	sp, fp, #28
    b96c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b970:	.word	0x0000d214

0000b974 <rb_init_bh>:
    b974:	push	{fp, lr}
    b978:	mov	fp, sp
    b97c:	mov	r0, #1
    b980:	mov	r1, #12
    b984:	bl	4ea4 <calloc@plt>
    b988:	cmp	r0, #0
    b98c:	ldrne	r1, [pc, #12]	; b9a0 <rb_init_bh+0x2c>
    b990:	addne	r1, pc, r1
    b994:	strne	r0, [r1]
    b998:	popne	{fp, pc}
    b99c:	bl	5204 <rb_outofmemory@plt>
    b9a0:	.word	0x00031f68

0000b9a4 <rb_bh_create>:
    b9a4:	push	{r4, r5, r6, r7, fp, lr}
    b9a8:	add	fp, sp, #16
    b9ac:	cmp	r0, #0
    b9b0:	beq	ba78 <rb_bh_create+0xd4>
    b9b4:	mov	r6, r1
    b9b8:	cmp	r1, #0
    b9bc:	ble	ba78 <rb_bh_create+0xd4>
    b9c0:	mov	r7, r0
    b9c4:	cmp	r0, #11
    b9c8:	bls	ba8c <rb_bh_create+0xe8>
    b9cc:	mov	r0, #1
    b9d0:	mov	r1, #48	; 0x30
    b9d4:	mov	r5, r2
    b9d8:	bl	4ea4 <calloc@plt>
    b9dc:	cmp	r0, #0
    b9e0:	beq	ba88 <rb_bh_create+0xe4>
    b9e4:	mov	r4, r0
    b9e8:	cmp	r5, #0
    b9ec:	str	r7, [r0, #12]
    b9f0:	str	r6, [r0, #16]
    b9f4:	beq	ba20 <rb_bh_create+0x7c>
    b9f8:	mov	r0, r5
    b9fc:	bl	5084 <strlen@plt>
    ba00:	add	r0, r0, #1
    ba04:	bl	5228 <malloc@plt>
    ba08:	cmp	r0, #0
    ba0c:	beq	ba88 <rb_bh_create+0xe4>
    ba10:	mov	r1, r5
    ba14:	mov	r6, r0
    ba18:	bl	512c <strcpy@plt>
    ba1c:	str	r6, [r4, #44]	; 0x2c
    ba20:	ldr	r0, [pc, #116]	; ba9c <rb_bh_create+0xf8>
    ba24:	mov	r1, #0
    ba28:	ldr	r0, [pc, r0]
    ba2c:	str	r1, [r4, #4]
    ba30:	str	r4, [r4]
    ba34:	ldr	r1, [r0]
    ba38:	cmp	r1, #0
    ba3c:	str	r1, [r4, #8]
    ba40:	beq	ba50 <rb_bh_create+0xac>
    ba44:	add	r1, r1, #4
    ba48:	str	r4, [r1]
    ba4c:	b	ba60 <rb_bh_create+0xbc>
    ba50:	mov	r1, r0
    ba54:	ldr	r2, [r1, #4]!
    ba58:	cmp	r2, #0
    ba5c:	streq	r4, [r1]
    ba60:	str	r4, [r0]
    ba64:	ldr	r1, [r0, #8]
    ba68:	add	r1, r1, #1
    ba6c:	str	r1, [r0, #8]
    ba70:	mov	r0, r4
    ba74:	pop	{r4, r5, r6, r7, fp, pc}
    ba78:	ldr	r0, [pc, #32]	; baa0 <rb_bh_create+0xfc>
    ba7c:	mov	r1, #147	; 0x93
    ba80:	add	r0, pc, r0
    ba84:	bl	baa8 <_rb_bh_fail>
    ba88:	bl	5204 <rb_outofmemory@plt>
    ba8c:	ldr	r0, [pc, #16]	; baa4 <rb_bh_create+0x100>
    ba90:	mov	r1, #151	; 0x97
    ba94:	add	r0, pc, r0
    ba98:	bl	baa8 <_rb_bh_fail>
    ba9c:	.word	0x00031ed0
    baa0:	.word	0x0000d1c8
    baa4:	.word	0x0000d1e6

0000baa8 <_rb_bh_fail>:
    baa8:	push	{fp, lr}
    baac:	mov	fp, sp
    bab0:	mov	r3, r1
    bab4:	mov	r1, r0
    bab8:	ldr	r0, [pc, #16]	; bad0 <_rb_bh_fail+0x28>
    babc:	ldr	r2, [pc, #16]	; bad4 <_rb_bh_fail+0x2c>
    bac0:	add	r0, pc, r0
    bac4:	add	r2, pc, r2
    bac8:	bl	51a4 <rb_lib_log@plt>
    bacc:	bl	4cac <abort@plt>
    bad0:	.word	0x0000d26e
    bad4:	.word	0x0000d1ad

0000bad8 <rb_bh_alloc>:
    bad8:	push	{fp, lr}
    badc:	mov	fp, sp
    bae0:	cmp	r0, #0
    bae4:	beq	bb00 <rb_bh_alloc+0x28>
    bae8:	ldr	r1, [r0, #12]
    baec:	mov	r0, #1
    baf0:	bl	4ea4 <calloc@plt>
    baf4:	cmp	r0, #0
    baf8:	popne	{fp, pc}
    bafc:	bl	5204 <rb_outofmemory@plt>
    bb00:	ldr	r0, [pc, #8]	; bb10 <rb_bh_alloc+0x38>
    bb04:	mov	r1, #186	; 0xba
    bb08:	add	r0, pc, r0
    bb0c:	bl	baa8 <_rb_bh_fail>
    bb10:	.word	0x0000d1ad

0000bb14 <rb_bh_free>:
    bb14:	push	{fp, lr}
    bb18:	mov	fp, sp
    bb1c:	cmp	r0, #0
    bb20:	beq	bb3c <rb_bh_free+0x28>
    bb24:	cmp	r1, #0
    bb28:	beq	bb48 <rb_bh_free+0x34>
    bb2c:	mov	r0, r1
    bb30:	bl	4fa0 <free@plt>
    bb34:	mov	r0, #0
    bb38:	pop	{fp, pc}
    bb3c:	ldr	r0, [pc, #24]	; bb5c <rb_bh_free+0x48>
    bb40:	add	r0, pc, r0
    bb44:	b	bb50 <rb_bh_free+0x3c>
    bb48:	ldr	r0, [pc, #16]	; bb60 <rb_bh_free+0x4c>
    bb4c:	add	r0, pc, r0
    bb50:	bl	51a4 <rb_lib_log@plt>
    bb54:	mov	r0, #1
    bb58:	pop	{fp, pc}
    bb5c:	.word	0x0000d193
    bb60:	.word	0x0000d1a7

0000bb64 <rb_bh_destroy>:
    bb64:	push	{r4, r5, fp, lr}
    bb68:	add	fp, sp, #8
    bb6c:	cmp	r0, #0
    bb70:	moveq	r5, #1
    bb74:	moveq	r0, r5
    bb78:	popeq	{r4, r5, fp, pc}
    bb7c:	ldr	r1, [r0, #8]
    bb80:	mov	r4, r0
    bb84:	ldr	r2, [r0, #4]
    bb88:	ldr	r0, [pc, #88]	; bbe8 <rb_bh_destroy+0x84>
    bb8c:	mov	r5, #0
    bb90:	ldr	r0, [pc, r0]
    bb94:	cmp	r1, #0
    bb98:	streq	r2, [r0, #4]
    bb9c:	strne	r2, [r1, #4]
    bba0:	mov	r3, r0
    bba4:	ldrne	r2, [r4, #4]
    bba8:	cmp	r2, #0
    bbac:	addne	r3, r2, #8
    bbb0:	str	r1, [r3]
    bbb4:	str	r5, [r4, #4]
    bbb8:	str	r5, [r4, #8]
    bbbc:	ldr	r1, [r0, #8]
    bbc0:	sub	r1, r1, #1
    bbc4:	str	r1, [r0, #8]
    bbc8:	ldr	r0, [r4, #44]	; 0x2c
    bbcc:	cmp	r0, #0
    bbd0:	beq	bbd8 <rb_bh_destroy+0x74>
    bbd4:	bl	4fa0 <free@plt>
    bbd8:	mov	r0, r4
    bbdc:	bl	4fa0 <free@plt>
    bbe0:	mov	r0, r5
    bbe4:	pop	{r4, r5, fp, pc}
    bbe8:	.word	0x00031d68

0000bbec <rb_bh_usage>:
    bbec:	cmp	r1, #0
    bbf0:	movne	r0, #0
    bbf4:	strne	r0, [r1]
    bbf8:	cmp	r2, #0
    bbfc:	movne	r0, #0
    bc00:	strne	r0, [r2]
    bc04:	ldr	r0, [sp]
    bc08:	cmp	r3, #0
    bc0c:	movne	r1, #0
    bc10:	strne	r1, [r3]
    bc14:	cmp	r0, #0
    bc18:	ldrne	r1, [pc, #8]	; bc28 <rb_bh_usage+0x3c>
    bc1c:	addne	r1, pc, r1
    bc20:	strne	r1, [r0]
    bc24:	bx	lr
    bc28:	.word	0x0000d0f6

0000bc2c <rb_bh_usage_all>:
    bc2c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    bc30:	add	fp, sp, #24
    bc34:	sub	sp, sp, #8
    bc38:	cmp	r0, #0
    bc3c:	beq	bca8 <rb_bh_usage_all+0x7c>
    bc40:	mov	r5, r0
    bc44:	ldr	r0, [pc, #100]	; bcb0 <rb_bh_usage_all+0x84>
    bc48:	ldr	r0, [pc, r0]
    bc4c:	ldr	r6, [r0]
    bc50:	cmp	r6, #0
    bc54:	beq	bca8 <rb_bh_usage_all+0x7c>
    bc58:	ldr	r7, [pc, #84]	; bcb4 <rb_bh_usage_all+0x88>
    bc5c:	mov	r8, r1
    bc60:	add	r7, pc, r7
    bc64:	ldr	r0, [r6]
    bc68:	ldr	r2, [r0, #12]
    bc6c:	ldr	r3, [r0, #16]
    bc70:	ldr	r4, [r0, #28]
    bc74:	ldr	r1, [r0, #40]	; 0x28
    bc78:	ldr	r0, [r0, #44]	; 0x2c
    bc7c:	cmp	r0, #0
    bc80:	movne	r7, r0
    bc84:	mul	r0, r3, r4
    bc88:	mul	r3, r0, r2
    bc8c:	sub	r0, r0, r1
    bc90:	stm	sp, {r7, r8}
    bc94:	mul	r2, r0, r2
    bc98:	blx	r5
    bc9c:	ldr	r6, [r6, #8]
    bca0:	cmp	r6, #0
    bca4:	bne	bc64 <rb_bh_usage_all+0x38>
    bca8:	sub	sp, fp, #24
    bcac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    bcb0:	.word	0x00031cb0
    bcb4:	.word	0x0000d0bf

0000bcb8 <rb_bh_total_usage>:
    bcb8:	push	{r4, r5, r6, sl, fp, lr}
    bcbc:	add	fp, sp, #16
    bcc0:	ldr	r2, [pc, #100]	; bd2c <rb_bh_total_usage+0x74>
    bcc4:	ldr	r2, [pc, r2]
    bcc8:	ldr	r2, [r2]
    bccc:	cmp	r2, #0
    bcd0:	beq	bd10 <rb_bh_total_usage+0x58>
    bcd4:	mov	lr, #0
    bcd8:	mov	ip, #0
    bcdc:	ldr	r3, [r2]
    bce0:	ldr	r2, [r2, #8]
    bce4:	ldr	r5, [r3, #16]
    bce8:	ldr	r6, [r3, #28]
    bcec:	ldr	r4, [r3, #12]
    bcf0:	ldr	r3, [r3, #40]	; 0x28
    bcf4:	cmp	r2, #0
    bcf8:	mul	r5, r5, r6
    bcfc:	sub	r3, r5, r3
    bd00:	mla	lr, r5, r4, lr
    bd04:	mla	ip, r3, r4, ip
    bd08:	bne	bcdc <rb_bh_total_usage+0x24>
    bd0c:	b	bd18 <rb_bh_total_usage+0x60>
    bd10:	mov	ip, #0
    bd14:	mov	lr, #0
    bd18:	cmp	r0, #0
    bd1c:	strne	lr, [r0]
    bd20:	cmp	r1, #0
    bd24:	strne	ip, [r1]
    bd28:	pop	{r4, r5, r6, sl, fp, pc}
    bd2c:	.word	0x00031c34

0000bd30 <rb_get_sockerr>:
    bd30:	push	{r4, r5, r6, r7, fp, lr}
    bd34:	add	fp, sp, #16
    bd38:	sub	sp, sp, #16
    bd3c:	mov	r5, r0
    bd40:	mov	r0, #0
    bd44:	str	r0, [sp, #12]
    bd48:	mov	r0, #4
    bd4c:	str	r0, [sp, #8]
    bd50:	ldrb	r7, [r5, #17]
    bd54:	bl	5540 <__errno_location@plt>
    bd58:	ldr	r6, [r0]
    bd5c:	tst	r7, #4
    bd60:	moveq	r0, r6
    bd64:	subeq	sp, fp, #16
    bd68:	popeq	{r4, r5, r6, r7, fp, pc}
    bd6c:	mov	r4, r0
    bd70:	ldr	r0, [r5, #12]
    bd74:	add	r1, sp, #8
    bd78:	add	r3, sp, #12
    bd7c:	mov	r2, #4
    bd80:	str	r1, [sp]
    bd84:	mov	r1, #1
    bd88:	bl	54d4 <getsockopt@plt>
    bd8c:	mov	r1, r0
    bd90:	ldr	r0, [sp, #12]
    bd94:	cmp	r0, #0
    bd98:	moveq	r0, r6
    bd9c:	cmp	r1, #0
    bda0:	movne	r0, r6
    bda4:	str	r0, [r4]
    bda8:	sub	sp, fp, #16
    bdac:	pop	{r4, r5, r6, r7, fp, pc}

0000bdb0 <rb_get_fd>:
    bdb0:	cmp	r0, #0
    bdb4:	ldrne	r0, [r0, #12]
    bdb8:	mvneq	r0, #0
    bdbc:	bx	lr

0000bdc0 <rb_getmaxconnect>:
    bdc0:	ldr	r0, [pc, #8]	; bdd0 <rb_getmaxconnect+0x10>
    bdc4:	ldr	r0, [pc, r0]
    bdc8:	ldr	r0, [r0]
    bdcc:	bx	lr
    bdd0:	.word	0x0001f5a0

0000bdd4 <rb_set_buffers>:
    bdd4:	push	{r4, r5, fp, lr}
    bdd8:	add	fp, sp, #8
    bddc:	sub	sp, sp, #8
    bde0:	cmp	r0, #0
    bde4:	str	r1, [sp, #4]
    bde8:	beq	be14 <rb_set_buffers+0x40>
    bdec:	mov	r4, r0
    bdf0:	ldr	r0, [r0, #12]
    bdf4:	mov	r5, #4
    bdf8:	add	r3, sp, #4
    bdfc:	mov	r1, #1
    be00:	mov	r2, #8
    be04:	str	r5, [sp]
    be08:	bl	54f8 <setsockopt@plt>
    be0c:	cmp	r0, #0
    be10:	beq	be20 <rb_set_buffers+0x4c>
    be14:	mov	r0, #0
    be18:	sub	sp, fp, #8
    be1c:	pop	{r4, r5, fp, pc}
    be20:	ldr	r0, [r4, #12]
    be24:	add	r3, sp, #4
    be28:	mov	r1, #1
    be2c:	mov	r2, #7
    be30:	str	r5, [sp]
    be34:	bl	54f8 <setsockopt@plt>
    be38:	clz	r0, r0
    be3c:	lsr	r0, r0, #5
    be40:	sub	sp, fp, #8
    be44:	pop	{r4, r5, fp, pc}

0000be48 <rb_set_nb>:
    be48:	push	{r4, r5, fp, lr}
    be4c:	add	fp, sp, #8
    be50:	cmp	r0, #0
    be54:	beq	beb4 <rb_set_nb+0x6c>
    be58:	ldr	r4, [r0, #12]
    be5c:	ldr	r1, [pc, #92]	; bec0 <rb_set_nb+0x78>
    be60:	ldr	r1, [pc, r1]
    be64:	blx	r1
    be68:	mov	r5, r0
    be6c:	cmp	r0, #0
    be70:	bne	beb8 <rb_set_nb+0x70>
    be74:	mov	r0, r4
    be78:	mov	r1, #3
    be7c:	mov	r2, #0
    be80:	mov	r5, #0
    be84:	bl	545c <fcntl@plt>
    be88:	cmn	r0, #1
    be8c:	beq	beb8 <rb_set_nb+0x70>
    be90:	orr	r2, r0, #2048	; 0x800
    be94:	mov	r0, r4
    be98:	mov	r1, #4
    be9c:	bl	545c <fcntl@plt>
    bea0:	add	r1, r0, #1
    bea4:	cmn	r0, #1
    bea8:	movwne	r1, #1
    beac:	mov	r0, r1
    beb0:	pop	{r4, r5, fp, pc}
    beb4:	mov	r5, #0
    beb8:	mov	r0, r5
    bebc:	pop	{r4, r5, fp, pc}
    bec0:	.word	0x00031af0

0000bec4 <rb_setup_fd>:
    bec4:	ldr	r1, [pc, #4]	; bed0 <rb_setup_fd+0xc>
    bec8:	ldr	r1, [pc, r1]
    becc:	bx	r1
    bed0:	.word	0x00031a88

0000bed4 <rb_settimeout>:
    bed4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    bed8:	add	fp, sp, #24
    bedc:	cmp	r0, #0
    bee0:	beq	bff0 <rb_settimeout+0x11c>
    bee4:	ldr	r5, [r0, #44]	; 0x2c
    bee8:	mov	r7, r2
    beec:	mov	r4, r0
    bef0:	cmp	r2, #0
    bef4:	beq	bf68 <rb_settimeout+0x94>
    bef8:	mov	r8, r3
    befc:	mov	r6, r1
    bf00:	cmp	r5, #0
    bf04:	bne	bf24 <rb_settimeout+0x50>
    bf08:	mov	r0, #1
    bf0c:	mov	r1, #28
    bf10:	bl	4ea4 <calloc@plt>
    bf14:	cmp	r0, #0
    bf18:	beq	c064 <rb_settimeout+0x190>
    bf1c:	mov	r5, r0
    bf20:	str	r0, [r4, #44]	; 0x2c
    bf24:	str	r4, [r5]
    bf28:	bl	5090 <rb_current_time@plt>
    bf2c:	ldr	r1, [pc, #324]	; c078 <rb_settimeout+0x1a4>
    bf30:	mov	r2, #0
    bf34:	add	r0, r0, r6
    bf38:	ldr	r1, [pc, r1]
    bf3c:	str	r5, [r5, #4]
    bf40:	str	r2, [r5, #8]
    bf44:	add	r2, r5, #16
    bf48:	str	r1, [r5, #12]
    bf4c:	stm	r2, {r0, r7, r8}
    bf50:	add	r0, r5, #4
    bf54:	cmp	r1, #0
    bf58:	beq	bf8c <rb_settimeout+0xb8>
    bf5c:	add	r1, r1, #4
    bf60:	str	r0, [r1]
    bf64:	b	bfa0 <rb_settimeout+0xcc>
    bf68:	cmp	r5, #0
    bf6c:	beq	bff0 <rb_settimeout+0x11c>
    bf70:	ldr	r0, [r5, #12]
    bf74:	ldr	r1, [r5, #8]
    bf78:	cmp	r0, #0
    bf7c:	beq	bff4 <rb_settimeout+0x120>
    bf80:	str	r1, [r0, #4]
    bf84:	ldr	r1, [r5, #8]
    bf88:	b	c000 <rb_settimeout+0x12c>
    bf8c:	ldr	r1, [pc, #232]	; c07c <rb_settimeout+0x1a8>
    bf90:	add	r1, pc, r1
    bf94:	ldr	r2, [r1, #4]!
    bf98:	cmp	r2, #0
    bf9c:	streq	r0, [r1]
    bfa0:	ldr	r1, [pc, #216]	; c080 <rb_settimeout+0x1ac>
    bfa4:	add	r1, pc, r1
    bfa8:	str	r0, [r1]
    bfac:	ldr	r0, [r1, #8]
    bfb0:	add	r0, r0, #1
    bfb4:	str	r0, [r1, #8]
    bfb8:	ldr	r0, [pc, #196]	; c084 <rb_settimeout+0x1b0>
    bfbc:	ldr	r0, [pc, r0]
    bfc0:	cmp	r0, #0
    bfc4:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
    bfc8:	ldr	r1, [pc, #184]	; c088 <rb_settimeout+0x1b4>
    bfcc:	mov	r2, #0
    bfd0:	mov	r3, #5
    bfd4:	ldr	r1, [pc, r1]
    bfd8:	ldr	r0, [pc, #172]	; c08c <rb_settimeout+0x1b8>
    bfdc:	add	r0, pc, r0
    bfe0:	bl	536c <rb_event_add@plt>
    bfe4:	ldr	r1, [pc, #164]	; c090 <rb_settimeout+0x1bc>
    bfe8:	add	r1, pc, r1
    bfec:	str	r0, [r1]
    bff0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    bff4:	ldr	r2, [pc, #108]	; c068 <rb_settimeout+0x194>
    bff8:	add	r2, pc, r2
    bffc:	str	r1, [r2, #4]
    c000:	ldr	r7, [pc, #100]	; c06c <rb_settimeout+0x198>
    c004:	cmp	r1, #0
    c008:	mov	r6, #0
    c00c:	add	r7, pc, r7
    c010:	mov	r2, r7
    c014:	addne	r2, r1, #8
    c018:	str	r0, [r2]
    c01c:	str	r6, [r5, #8]
    c020:	str	r6, [r5, #12]
    c024:	ldr	r0, [r7, #8]
    c028:	sub	r0, r0, #1
    c02c:	str	r0, [r7, #8]
    c030:	mov	r0, r5
    c034:	bl	4fa0 <free@plt>
    c038:	ldr	r0, [r7, #8]
    c03c:	str	r6, [r4, #44]	; 0x2c
    c040:	cmp	r0, #0
    c044:	bne	bff0 <rb_settimeout+0x11c>
    c048:	ldr	r0, [pc, #32]	; c070 <rb_settimeout+0x19c>
    c04c:	ldr	r0, [pc, r0]
    c050:	bl	4d6c <rb_event_delete@plt>
    c054:	ldr	r0, [pc, #24]	; c074 <rb_settimeout+0x1a0>
    c058:	add	r0, pc, r0
    c05c:	str	r6, [r0]
    c060:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    c064:	bl	5204 <rb_outofmemory@plt>
    c068:	.word	0x00031908
    c06c:	.word	0x000318f4
    c070:	.word	0x000318c0
    c074:	.word	0x000318b4
    c078:	.word	0x000319c8
    c07c:	.word	0x00031970
    c080:	.word	0x0003195c
    c084:	.word	0x00031950
    c088:	.word	0x0001f340
    c08c:	.word	0x0000cd78
    c090:	.word	0x00031924

0000c094 <rb_checktimeouts>:
    c094:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c098:	add	fp, sp, #28
    c09c:	sub	sp, sp, #4
    c0a0:	ldr	r7, [pc, #184]	; c160 <rb_checktimeouts+0xcc>
    c0a4:	ldr	r7, [pc, r7]
    c0a8:	cmp	r7, #0
    c0ac:	beq	c158 <rb_checktimeouts+0xc4>
    c0b0:	ldr	r8, [pc, #172]	; c164 <rb_checktimeouts+0xd0>
    c0b4:	mov	r9, #0
    c0b8:	add	r8, pc, r8
    c0bc:	ldr	r5, [r7]
    c0c0:	ldr	r7, [r7, #8]
    c0c4:	ldr	r4, [r5]
    c0c8:	cmp	r4, #0
    c0cc:	ldrbne	r0, [r4, #16]
    c0d0:	tstne	r0, #1
    c0d4:	bne	c0e4 <rb_checktimeouts+0x50>
    c0d8:	cmp	r7, #0
    c0dc:	bne	c0bc <rb_checktimeouts+0x28>
    c0e0:	b	c158 <rb_checktimeouts+0xc4>
    c0e4:	ldr	r6, [r5, #16]
    c0e8:	bl	5090 <rb_current_time@plt>
    c0ec:	cmp	r6, r0
    c0f0:	bge	c0d8 <rb_checktimeouts+0x44>
    c0f4:	ldr	r0, [r5, #12]
    c0f8:	ldr	r1, [r5, #8]
    c0fc:	ldr	sl, [r5, #20]
    c100:	ldr	r6, [r5, #24]
    c104:	mov	r2, r8
    c108:	cmp	r0, #0
    c10c:	streq	r1, [r8, #4]
    c110:	strne	r1, [r0, #4]
    c114:	ldrne	r1, [r5, #8]
    c118:	cmp	r1, #0
    c11c:	addne	r2, r1, #8
    c120:	str	r0, [r2]
    c124:	str	r9, [r5, #8]
    c128:	str	r9, [r5, #12]
    c12c:	ldr	r0, [r8, #8]
    c130:	sub	r0, r0, #1
    c134:	str	r0, [r8, #8]
    c138:	mov	r0, r5
    c13c:	str	r9, [r4, #44]	; 0x2c
    c140:	bl	4fa0 <free@plt>
    c144:	mov	r0, r4
    c148:	mov	r1, r6
    c14c:	blx	sl
    c150:	cmp	r7, #0
    c154:	bne	c0bc <rb_checktimeouts+0x28>
    c158:	sub	sp, fp, #28
    c15c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c160:	.word	0x0003185c
    c164:	.word	0x00031848

0000c168 <rb_bind>:
    c168:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    c16c:	add	fp, sp, #24
    c170:	sub	sp, sp, #16
    c174:	mov	r6, r0
    c178:	mov	r0, #1
    c17c:	mov	r5, r1
    c180:	mov	r7, #4
    c184:	add	r3, sp, #4
    c188:	mov	r1, #1
    c18c:	mov	r2, #2
    c190:	str	r0, [sp, #4]
    c194:	ldr	r0, [r6, #12]
    c198:	str	r7, [sp]
    c19c:	bl	54f8 <setsockopt@plt>
    c1a0:	cmp	r0, #0
    c1a4:	beq	c1d8 <rb_bind+0x70>
    c1a8:	mov	r4, r0
    c1ac:	mov	r0, #0
    c1b0:	ldr	r8, [r6, #12]
    c1b4:	str	r7, [sp, #8]
    c1b8:	str	r0, [sp, #12]
    c1bc:	ldrb	r5, [r6, #17]
    c1c0:	bl	5540 <__errno_location@plt>
    c1c4:	ldr	r7, [r0]
    c1c8:	tst	r5, #4
    c1cc:	bne	c1fc <rb_bind+0x94>
    c1d0:	mov	r0, r7
    c1d4:	b	c238 <rb_bind+0xd0>
    c1d8:	ldrh	r0, [r5]
    c1dc:	mov	r2, #28
    c1e0:	mov	r1, r5
    c1e4:	cmp	r0, #2
    c1e8:	ldr	r0, [r6, #12]
    c1ec:	movweq	r2, #16
    c1f0:	bl	5198 <bind@plt>
    c1f4:	mov	r4, r0
    c1f8:	b	c250 <rb_bind+0xe8>
    c1fc:	mov	r6, r0
    c200:	add	r0, sp, #8
    c204:	add	r3, sp, #12
    c208:	mov	r1, #1
    c20c:	mov	r2, #4
    c210:	str	r0, [sp]
    c214:	mov	r0, r8
    c218:	bl	54d4 <getsockopt@plt>
    c21c:	mov	r1, r0
    c220:	ldr	r0, [sp, #12]
    c224:	cmp	r0, #0
    c228:	moveq	r0, r7
    c22c:	cmp	r1, #0
    c230:	movne	r0, r7
    c234:	str	r0, [r6]
    c238:	bl	4c88 <strerror@plt>
    c23c:	mov	r2, r0
    c240:	ldr	r0, [pc, #20]	; c25c <rb_bind+0xf4>
    c244:	mov	r1, r8
    c248:	add	r0, pc, r0
    c24c:	bl	51a4 <rb_lib_log@plt>
    c250:	mov	r0, r4
    c254:	sub	sp, fp, #24
    c258:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    c25c:	.word	0x0000ccd3

0000c260 <rb_sctp_bindx>:
    c260:	mvn	r0, #0
    c264:	bx	lr

0000c268 <rb_inet_get_proto>:
    c268:	mov	r0, #6
    c26c:	bx	lr

0000c270 <rb_accept_tcp>:
    c270:	push	{r4, r5, r6, r7, fp, lr}
    c274:	add	fp, sp, #16
    c278:	cmp	r0, #0
    c27c:	popeq	{r4, r5, r6, r7, fp, pc}
    c280:	mov	r6, r1
    c284:	mov	r5, r0
    c288:	mov	r0, #1
    c28c:	mov	r1, #144	; 0x90
    c290:	mov	r4, r3
    c294:	mov	r7, r2
    c298:	bl	4ea4 <calloc@plt>
    c29c:	cmp	r0, #0
    c2a0:	beq	c2c4 <rb_accept_tcp+0x54>
    c2a4:	str	r0, [r5, #52]	; 0x34
    c2a8:	str	r7, [r0, #132]	; 0x84
    c2ac:	str	r6, [r0, #136]	; 0x88
    c2b0:	str	r4, [r0, #140]	; 0x8c
    c2b4:	mov	r0, r5
    c2b8:	mov	r1, #0
    c2bc:	pop	{r4, r5, r6, r7, fp, lr}
    c2c0:	b	c2c8 <rb_accept_tryaccept>
    c2c4:	bl	5204 <rb_outofmemory@plt>

0000c2c8 <rb_accept_tryaccept>:
    c2c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c2cc:	add	fp, sp, #28
    c2d0:	sub	sp, sp, #4
    c2d4:	vpush	{d8-d9}
    c2d8:	sub	sp, sp, #160	; 0xa0
    c2dc:	add	r5, sp, #32
    c2e0:	mov	r4, r0
    c2e4:	vmov.i32	q4, #0	; 0x00000000
    c2e8:	mov	r1, #112	; 0x70
    c2ec:	add	r2, sp, #28
    c2f0:	add	r0, r5, #96	; 0x60
    c2f4:	add	sl, r5, #32
    c2f8:	add	r8, r5, #16
    c2fc:	str	r0, [sp, #24]
    c300:	vst1.64	{d8-d9}, [r0]
    c304:	add	r0, r5, #80	; 0x50
    c308:	vst1.64	{d8-d9}, [sl]
    c30c:	vst1.64	{d8-d9}, [r8]
    c310:	str	r0, [sp, #20]
    c314:	vst1.64	{d8-d9}, [r0]
    c318:	add	r0, r5, #64	; 0x40
    c31c:	str	r0, [sp, #16]
    c320:	vst1.64	{d8-d9}, [r0]
    c324:	add	r0, r5, #48	; 0x30
    c328:	str	r0, [sp, #12]
    c32c:	vst1.64	{d8-d9}, [r0]
    c330:	mov	r0, r5
    c334:	vst1.64	{d8-d9}, [r0], r1
    c338:	mov	r1, r5
    c33c:	vst1.64	{d8-d9}, [r0]
    c340:	mov	r0, #128	; 0x80
    c344:	str	r0, [sp, #28]
    c348:	ldr	r0, [r4, #12]
    c34c:	bl	5018 <accept@plt>
    c350:	cmp	r0, #0
    c354:	blt	c51c <rb_accept_tryaccept+0x254>
    c358:	mov	r9, r0
    c35c:	add	r0, r5, #8
    c360:	str	r0, [sp, #8]
    c364:	ldrb	r0, [r4, #17]
    c368:	ldr	r2, [pc, #476]	; c54c <rb_accept_tryaccept+0x284>
    c36c:	and	r0, r0, #128	; 0x80
    c370:	add	r2, pc, r2
    c374:	orr	r1, r0, #4
    c378:	mov	r0, r9
    c37c:	bl	52f4 <rb_open@plt>
    c380:	cmp	r0, #0
    c384:	beq	c490 <rb_accept_tryaccept+0x1c8>
    c388:	ldr	r7, [r0, #12]
    c38c:	ldr	r1, [pc, #456]	; c55c <rb_accept_tryaccept+0x294>
    c390:	mov	r6, r0
    c394:	ldr	r1, [pc, r1]
    c398:	blx	r1
    c39c:	cmp	r0, #0
    c3a0:	bne	c3ec <rb_accept_tryaccept+0x124>
    c3a4:	mov	r0, r7
    c3a8:	mov	r1, #3
    c3ac:	mov	r2, #0
    c3b0:	bl	545c <fcntl@plt>
    c3b4:	cmn	r0, #1
    c3b8:	beq	c3d4 <rb_accept_tryaccept+0x10c>
    c3bc:	orr	r2, r0, #2048	; 0x800
    c3c0:	mov	r0, r7
    c3c4:	mov	r1, #4
    c3c8:	bl	545c <fcntl@plt>
    c3cc:	cmn	r0, #1
    c3d0:	bne	c3ec <rb_accept_tryaccept+0x124>
    c3d4:	ldr	r1, [r6, #12]
    c3d8:	ldr	r0, [pc, #384]	; c560 <rb_accept_tryaccept+0x298>
    c3dc:	add	r0, pc, r0
    c3e0:	bl	51a4 <rb_lib_log@plt>
    c3e4:	mov	r0, r6
    c3e8:	bl	5108 <rb_close@plt>
    c3ec:	ldr	r0, [sp, #40]	; 0x28
    c3f0:	ldr	r1, [sp, #44]	; 0x2c
    c3f4:	orrs	r0, r0, r1
    c3f8:	bne	c430 <rb_accept_tryaccept+0x168>
    c3fc:	ldrh	r0, [sp, #32]
    c400:	cmp	r0, #10
    c404:	ldreq	r0, [sp, #48]	; 0x30
    c408:	cmneq	r0, #65536	; 0x10000
    c40c:	bne	c430 <rb_accept_tryaccept+0x168>
    c410:	mov	r0, #2
    c414:	mov	r1, #0
    c418:	strh	r0, [sp, #32]
    c41c:	ldr	r0, [sp, #52]	; 0x34
    c420:	str	r0, [sp, #36]	; 0x24
    c424:	ldr	r0, [sp, #8]
    c428:	str	r1, [r0, #4]
    c42c:	str	r1, [r0]
    c430:	ldr	r0, [r4, #52]	; 0x34
    c434:	ldr	r7, [r0, #136]	; 0x88
    c438:	cmp	r7, #0
    c43c:	beq	c45c <rb_accept_tryaccept+0x194>
    c440:	ldr	r3, [r0, #140]	; 0x8c
    c444:	ldr	r2, [sp, #28]
    c448:	mov	r0, r6
    c44c:	mov	r1, r5
    c450:	blx	r7
    c454:	cmp	r0, #0
    c458:	beq	c4c0 <rb_accept_tryaccept+0x1f8>
    c45c:	ldrb	r0, [r4, #17]
    c460:	tst	r0, #32
    c464:	bne	c4ac <rb_accept_tryaccept+0x1e4>
    c468:	ldr	r0, [r4, #52]	; 0x34
    c46c:	ldr	r3, [sp, #28]
    c470:	mov	r1, #0
    c474:	mov	r2, r5
    c478:	ldr	r7, [r0, #132]	; 0x84
    c47c:	ldr	r0, [r0, #140]	; 0x8c
    c480:	str	r0, [sp]
    c484:	mov	r0, r6
    c488:	blx	r7
    c48c:	b	c4c0 <rb_accept_tryaccept+0x1f8>
    c490:	ldr	r0, [pc, #184]	; c550 <rb_accept_tryaccept+0x288>
    c494:	mov	r1, r9
    c498:	add	r0, pc, r0
    c49c:	bl	51a4 <rb_lib_log@plt>
    c4a0:	mov	r0, r9
    c4a4:	bl	51c8 <close@plt>
    c4a8:	b	c4c0 <rb_accept_tryaccept+0x1f8>
    c4ac:	ldr	r3, [sp, #28]
    c4b0:	mov	r0, r4
    c4b4:	mov	r1, r6
    c4b8:	mov	r2, r5
    c4bc:	bl	10040 <rb_ssl_accept_setup>
    c4c0:	mov	r0, r5
    c4c4:	mov	r1, #112	; 0x70
    c4c8:	vst1.64	{d8-d9}, [sl]
    c4cc:	vst1.64	{d8-d9}, [r8]
    c4d0:	add	r2, sp, #28
    c4d4:	vst1.64	{d8-d9}, [r0], r1
    c4d8:	mov	r1, r5
    c4dc:	vst1.64	{d8-d9}, [r0]
    c4e0:	ldr	r0, [sp, #24]
    c4e4:	vst1.64	{d8-d9}, [r0]
    c4e8:	ldr	r0, [sp, #20]
    c4ec:	vst1.64	{d8-d9}, [r0]
    c4f0:	ldr	r0, [sp, #16]
    c4f4:	vst1.64	{d8-d9}, [r0]
    c4f8:	ldr	r0, [sp, #12]
    c4fc:	vst1.64	{d8-d9}, [r0]
    c500:	mov	r0, #128	; 0x80
    c504:	str	r0, [sp, #28]
    c508:	ldr	r0, [r4, #12]
    c50c:	bl	5018 <accept@plt>
    c510:	mov	r9, r0
    c514:	cmp	r0, #0
    c518:	bge	c364 <rb_accept_tryaccept+0x9c>
    c51c:	ldr	r7, [pc, #48]	; c554 <rb_accept_tryaccept+0x28c>
    c520:	mov	r0, r4
    c524:	mov	r1, #1
    c528:	mov	r3, #0
    c52c:	ldr	r7, [pc, r7]
    c530:	ldr	r2, [pc, #32]	; c558 <rb_accept_tryaccept+0x290>
    c534:	add	r2, pc, r2
    c538:	blx	r7
    c53c:	sub	sp, fp, #48	; 0x30
    c540:	vpop	{d8-d9}
    c544:	add	sp, sp, #4
    c548:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c54c:	.word	0x0000cbea
    c550:	.word	0x0000cad6
    c554:	.word	0x0003141c
    c558:	.word	0xfffffd8c
    c55c:	.word	0x000315bc
    c560:	.word	0x0000cbd8

0000c564 <rb_connect_tcp>:
    c564:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    c568:	add	fp, sp, #24
    c56c:	cmp	r0, #0
    c570:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
    c574:	ldr	r8, [fp, #12]
    c578:	ldr	r9, [fp, #8]
    c57c:	mov	r7, r1
    c580:	mov	r4, r0
    c584:	mov	r0, #1
    c588:	mov	r1, #268	; 0x10c
    c58c:	mov	r5, r3
    c590:	mov	r6, r2
    c594:	bl	4ea4 <calloc@plt>
    c598:	cmp	r0, #0
    c59c:	beq	c720 <rb_connect_tcp+0x1bc>
    c5a0:	str	r0, [r4, #48]	; 0x30
    c5a4:	str	r5, [r0, #260]	; 0x104
    c5a8:	str	r9, [r0, #264]	; 0x108
    c5ac:	add	r0, r0, #128	; 0x80
    c5b0:	mov	r1, r7
    c5b4:	mov	r2, #128	; 0x80
    c5b8:	bl	50a8 <memcpy@plt>
    c5bc:	cmp	r6, #0
    c5c0:	beq	c5e8 <rb_connect_tcp+0x84>
    c5c4:	ldrh	r0, [r6]
    c5c8:	mov	r2, #28
    c5cc:	mov	r1, r6
    c5d0:	cmp	r0, #2
    c5d4:	ldr	r0, [r4, #12]
    c5d8:	movweq	r2, #16
    c5dc:	bl	5198 <bind@plt>
    c5e0:	cmn	r0, #1
    c5e4:	ble	c6d0 <rb_connect_tcp+0x16c>
    c5e8:	ldr	r2, [pc, #308]	; c724 <rb_connect_tcp+0x1c0>
    c5ec:	mov	r0, r4
    c5f0:	mov	r1, r8
    c5f4:	mov	r3, #0
    c5f8:	add	r2, pc, r2
    c5fc:	bl	4cd0 <rb_settimeout@plt>
    c600:	ldr	r1, [r4, #48]	; 0x30
    c604:	ldr	r0, [r4, #12]
    c608:	mov	r2, #28
    c60c:	ldrh	r3, [r1, #128]!	; 0x80
    c610:	cmp	r3, #2
    c614:	movweq	r2, #16
    c618:	bl	4cb8 <connect@plt>
    c61c:	cmn	r0, #1
    c620:	ble	c634 <rb_connect_tcp+0xd0>
    c624:	mov	r0, r4
    c628:	mov	r1, #0
    c62c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    c630:	b	c730 <rb_connect_callback>
    c634:	bl	5540 <__errno_location@plt>
    c638:	ldr	r0, [r0]
    c63c:	sub	r1, r0, #85	; 0x55
    c640:	cmp	r1, #30
    c644:	bhi	c6e0 <rb_connect_tcp+0x17c>
    c648:	add	r0, pc, #4
    c64c:	ldr	r1, [r0, r1, lsl #2]
    c650:	add	pc, r0, r1
    c654:	.word	0x00000098
    c658:	.word	0x000000bc
    c65c:	.word	0x000000bc
    c660:	.word	0x000000bc
    c664:	.word	0x000000bc
    c668:	.word	0x000000bc
    c66c:	.word	0x000000bc
    c670:	.word	0x000000bc
    c674:	.word	0x000000bc
    c678:	.word	0x000000bc
    c67c:	.word	0x000000bc
    c680:	.word	0x000000bc
    c684:	.word	0x000000bc
    c688:	.word	0x000000bc
    c68c:	.word	0x000000bc
    c690:	.word	0x000000bc
    c694:	.word	0x000000bc
    c698:	.word	0x000000bc
    c69c:	.word	0x000000bc
    c6a0:	.word	0x000000bc
    c6a4:	.word	0x00000098
    c6a8:	.word	0xffffffd0
    c6ac:	.word	0x000000bc
    c6b0:	.word	0x000000bc
    c6b4:	.word	0x000000bc
    c6b8:	.word	0x000000bc
    c6bc:	.word	0x000000bc
    c6c0:	.word	0x000000bc
    c6c4:	.word	0x000000bc
    c6c8:	.word	0x000000bc
    c6cc:	.word	0x00000098
    c6d0:	mov	r0, r4
    c6d4:	mov	r1, #1
    c6d8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    c6dc:	b	c730 <rb_connect_callback>
    c6e0:	cmp	r0, #4
    c6e4:	cmpne	r0, #11
    c6e8:	bne	c710 <rb_connect_tcp+0x1ac>
    c6ec:	ldr	ip, [pc, #52]	; c728 <rb_connect_tcp+0x1c4>
    c6f0:	mov	r0, r4
    c6f4:	mov	r1, #2
    c6f8:	mov	r3, #0
    c6fc:	ldr	ip, [pc, ip]
    c700:	ldr	r2, [pc, #36]	; c72c <rb_connect_tcp+0x1c8>
    c704:	add	r2, pc, r2
    c708:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    c70c:	bx	ip
    c710:	mov	r0, r4
    c714:	mov	r1, #4
    c718:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    c71c:	b	c730 <rb_connect_callback>
    c720:	bl	5204 <rb_outofmemory@plt>
    c724:	.word	0x00000248
    c728:	.word	0x0003124c
    c72c:	.word	0x00000194

0000c730 <rb_connect_callback>:
    c730:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c734:	add	fp, sp, #28
    c738:	sub	sp, sp, #4
    c73c:	mov	r4, r1
    c740:	mov	r5, r0
    c744:	bl	5540 <__errno_location@plt>
    c748:	cmp	r5, #0
    c74c:	beq	c768 <rb_connect_callback+0x38>
    c750:	mov	r6, r0
    c754:	ldr	r0, [r5, #48]	; 0x30
    c758:	cmp	r0, #0
    c75c:	ldrne	r3, [r0, #260]	; 0x104
    c760:	cmpne	r3, #0
    c764:	bne	c770 <rb_connect_callback+0x40>
    c768:	sub	sp, fp, #28
    c76c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c770:	mov	r1, #0
    c774:	ldr	r8, [r6]
    c778:	str	r1, [r0, #260]	; 0x104
    c77c:	ldr	r9, [r0, #264]	; 0x108
    c780:	ldr	r0, [r5, #44]	; 0x2c
    c784:	cmp	r0, #0
    c788:	beq	c81c <rb_connect_callback+0xec>
    c78c:	ldr	r1, [r0, #12]
    c790:	ldr	r2, [r0, #8]
    c794:	str	r3, [sp]
    c798:	cmp	r1, #0
    c79c:	beq	c7ac <rb_connect_callback+0x7c>
    c7a0:	str	r2, [r1, #4]
    c7a4:	ldr	r2, [r0, #8]
    c7a8:	b	c7b8 <rb_connect_callback+0x88>
    c7ac:	ldr	r3, [pc, #132]	; c838 <rb_connect_callback+0x108>
    c7b0:	add	r3, pc, r3
    c7b4:	str	r2, [r3, #4]
    c7b8:	ldr	r7, [pc, #124]	; c83c <rb_connect_callback+0x10c>
    c7bc:	cmp	r2, #0
    c7c0:	mov	sl, #0
    c7c4:	add	r7, pc, r7
    c7c8:	mov	r3, r7
    c7cc:	addne	r3, r2, #8
    c7d0:	str	r1, [r3]
    c7d4:	str	sl, [r0, #8]
    c7d8:	str	sl, [r0, #12]
    c7dc:	ldr	r1, [r7, #8]
    c7e0:	sub	r1, r1, #1
    c7e4:	str	r1, [r7, #8]
    c7e8:	bl	4fa0 <free@plt>
    c7ec:	ldr	r0, [r7, #8]
    c7f0:	ldr	r3, [sp]
    c7f4:	str	sl, [r5, #44]	; 0x2c
    c7f8:	cmp	r0, #0
    c7fc:	bne	c81c <rb_connect_callback+0xec>
    c800:	ldr	r0, [pc, #56]	; c840 <rb_connect_callback+0x110>
    c804:	ldr	r0, [pc, r0]
    c808:	bl	4d6c <rb_event_delete@plt>
    c80c:	ldr	r3, [sp]
    c810:	ldr	r0, [pc, #44]	; c844 <rb_connect_callback+0x114>
    c814:	add	r0, pc, r0
    c818:	str	sl, [r0]
    c81c:	str	r8, [r6]
    c820:	mov	r0, r5
    c824:	mov	r1, r4
    c828:	mov	r2, r9
    c82c:	sub	sp, fp, #28
    c830:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c834:	bx	r3
    c838:	.word	0x00031150
    c83c:	.word	0x0003113c
    c840:	.word	0x00031108
    c844:	.word	0x000310f8

0000c848 <rb_connect_timeout>:
    c848:	mov	r1, #3
    c84c:	b	c730 <rb_connect_callback>

0000c850 <rb_ignore_errno>:
    c850:	sub	r2, r0, #85	; 0x55
    c854:	mov	r1, r0
    c858:	mov	r0, #1
    c85c:	cmp	r2, #30
    c860:	bhi	c878 <rb_ignore_errno+0x28>
    c864:	movw	r3, #1
    c868:	mov	ip, #1
    c86c:	movt	r3, #16400	; 0x4010
    c870:	tst	r3, ip, lsl r2
    c874:	bxne	lr
    c878:	cmp	r1, #4
    c87c:	cmpne	r1, #11
    c880:	bne	c888 <rb_ignore_errno+0x38>
    c884:	bx	lr
    c888:	mov	r0, #0
    c88c:	bx	lr

0000c890 <rb_setselect>:
    c890:	ldr	ip, [pc, #4]	; c89c <rb_setselect+0xc>
    c894:	ldr	ip, [pc, ip]
    c898:	bx	ip
    c89c:	.word	0x000310b4

0000c8a0 <rb_connect_outcome>:
    c8a0:	push	{r4, r5, fp, lr}
    c8a4:	add	fp, sp, #8
    c8a8:	sub	sp, sp, #16
    c8ac:	mov	r4, r0
    c8b0:	mov	r0, #0
    c8b4:	str	r0, [sp, #12]
    c8b8:	mov	r0, #4
    c8bc:	cmp	r4, #0
    c8c0:	str	r0, [sp, #8]
    c8c4:	beq	c8dc <rb_connect_outcome+0x3c>
    c8c8:	ldr	r0, [r4, #48]	; 0x30
    c8cc:	cmp	r0, #0
    c8d0:	ldrne	r0, [r0, #260]	; 0x104
    c8d4:	cmpne	r0, #0
    c8d8:	bne	c8e4 <rb_connect_outcome+0x44>
    c8dc:	sub	sp, fp, #8
    c8e0:	pop	{r4, r5, fp, pc}
    c8e4:	ldr	r0, [r4, #12]
    c8e8:	add	r1, sp, #8
    c8ec:	add	r3, sp, #12
    c8f0:	mov	r2, #4
    c8f4:	str	r1, [sp]
    c8f8:	mov	r1, #1
    c8fc:	bl	54d4 <getsockopt@plt>
    c900:	cmp	r0, #0
    c904:	blt	c920 <rb_connect_outcome+0x80>
    c908:	ldr	r5, [sp, #12]
    c90c:	cmp	r5, #0
    c910:	beq	c920 <rb_connect_outcome+0x80>
    c914:	bl	5540 <__errno_location@plt>
    c918:	str	r5, [r0]
    c91c:	b	c934 <rb_connect_outcome+0x94>
    c920:	cmn	r0, #1
    c924:	ble	c934 <rb_connect_outcome+0x94>
    c928:	mov	r0, r4
    c92c:	mov	r1, #0
    c930:	b	c93c <rb_connect_outcome+0x9c>
    c934:	mov	r0, r4
    c938:	mov	r1, #4
    c93c:	bl	c730 <rb_connect_callback>
    c940:	sub	sp, fp, #8
    c944:	pop	{r4, r5, fp, pc}

0000c948 <rb_connect_sctp>:
    c948:	mov	r1, #4
    c94c:	b	c730 <rb_connect_callback>

0000c950 <rb_connect_sockaddr>:
    c950:	cmp	r0, #0
    c954:	moveq	r0, #0
    c958:	bxeq	lr
    c95c:	push	{fp, lr}
    c960:	mov	fp, sp
    c964:	ldr	r0, [r0, #48]	; 0x30
    c968:	add	r3, r0, #128	; 0x80
    c96c:	mov	r0, r1
    c970:	mov	r1, r3
    c974:	bl	50a8 <memcpy@plt>
    c978:	mov	r0, #1
    c97c:	pop	{fp, pc}

0000c980 <rb_errstr>:
    c980:	cmp	r0, #6
    c984:	ldrls	r1, [pc, #24]	; c9a4 <rb_errstr+0x24>
    c988:	addls	r1, pc, r1
    c98c:	ldrls	r0, [r1, r0, lsl #2]
    c990:	bxls	lr
    c994:	ldr	r0, [pc, #4]	; c9a0 <rb_errstr+0x20>
    c998:	add	r0, pc, r0
    c99c:	bx	lr
    c9a0:	.word	0x0000c3cd
    c9a4:	.word	0x0001e0ac

0000c9a8 <rb_socketpair>:
    c9a8:	push	{r4, r5, r6, r7, fp, lr}
    c9ac:	add	fp, sp, #16
    c9b0:	sub	sp, sp, #8
    c9b4:	mov	r4, r3
    c9b8:	ldr	r3, [pc, #436]	; cb74 <rb_socketpair+0x1cc>
    c9bc:	ldr	r3, [pc, r3]
    c9c0:	ldr	r3, [r3]
    c9c4:	ldr	r7, [pc, #428]	; cb78 <rb_socketpair+0x1d0>
    c9c8:	ldr	r7, [pc, r7]
    c9cc:	cmp	r7, r3
    c9d0:	bge	cb0c <rb_socketpair+0x164>
    c9d4:	mov	r3, sp
    c9d8:	bl	4e2c <socketpair@plt>
    c9dc:	mvn	r5, #0
    c9e0:	cmp	r0, #0
    c9e4:	bne	cb1c <rb_socketpair+0x174>
    c9e8:	ldr	r6, [fp, #12]
    c9ec:	ldr	r0, [sp]
    c9f0:	ldr	r7, [fp, #8]
    c9f4:	mov	r1, #4
    c9f8:	mov	r2, r6
    c9fc:	bl	52f4 <rb_open@plt>
    ca00:	str	r0, [r4]
    ca04:	mov	r1, #4
    ca08:	mov	r2, r6
    ca0c:	ldr	r0, [sp, #4]
    ca10:	bl	52f4 <rb_open@plt>
    ca14:	str	r0, [r7]
    ca18:	mov	r1, r0
    ca1c:	ldr	r0, [r4]
    ca20:	cmp	r0, #0
    ca24:	beq	cb28 <rb_socketpair+0x180>
    ca28:	cmp	r1, #0
    ca2c:	beq	cb34 <rb_socketpair+0x18c>
    ca30:	ldr	r6, [r0, #12]
    ca34:	ldr	r1, [pc, #320]	; cb7c <rb_socketpair+0x1d4>
    ca38:	ldr	r1, [pc, r1]
    ca3c:	blx	r1
    ca40:	cmp	r0, #0
    ca44:	bne	ca78 <rb_socketpair+0xd0>
    ca48:	mov	r0, r6
    ca4c:	mov	r1, #3
    ca50:	mov	r2, #0
    ca54:	bl	545c <fcntl@plt>
    ca58:	cmn	r0, #1
    ca5c:	beq	cb3c <rb_socketpair+0x194>
    ca60:	orr	r2, r0, #2048	; 0x800
    ca64:	mov	r0, r6
    ca68:	mov	r1, #4
    ca6c:	bl	545c <fcntl@plt>
    ca70:	cmn	r0, #1
    ca74:	beq	cb3c <rb_socketpair+0x194>
    ca78:	ldr	r0, [r7]
    ca7c:	cmp	r0, #0
    ca80:	beq	cad4 <rb_socketpair+0x12c>
    ca84:	ldr	r6, [r0, #12]
    ca88:	ldr	r1, [pc, #244]	; cb84 <rb_socketpair+0x1dc>
    ca8c:	ldr	r1, [pc, r1]
    ca90:	blx	r1
    ca94:	mov	r5, #0
    ca98:	cmp	r0, #0
    ca9c:	bne	cb1c <rb_socketpair+0x174>
    caa0:	mov	r0, r6
    caa4:	mov	r1, #3
    caa8:	mov	r2, #0
    caac:	mov	r5, #0
    cab0:	bl	545c <fcntl@plt>
    cab4:	cmn	r0, #1
    cab8:	beq	cad4 <rb_socketpair+0x12c>
    cabc:	orr	r2, r0, #2048	; 0x800
    cac0:	mov	r0, r6
    cac4:	mov	r1, #4
    cac8:	bl	545c <fcntl@plt>
    cacc:	cmn	r0, #1
    cad0:	bne	cb1c <rb_socketpair+0x174>
    cad4:	ldr	r5, [sp, #4]
    cad8:	bl	5540 <__errno_location@plt>
    cadc:	ldr	r0, [r0]
    cae0:	bl	4c88 <strerror@plt>
    cae4:	mov	r2, r0
    cae8:	ldr	r0, [pc, #152]	; cb88 <rb_socketpair+0x1e0>
    caec:	mov	r1, r5
    caf0:	add	r0, pc, r0
    caf4:	bl	51a4 <rb_lib_log@plt>
    caf8:	ldr	r0, [r4]
    cafc:	bl	5108 <rb_close@plt>
    cb00:	ldr	r0, [r7]
    cb04:	bl	5108 <rb_close@plt>
    cb08:	b	cb18 <rb_socketpair+0x170>
    cb0c:	bl	5540 <__errno_location@plt>
    cb10:	mov	r1, #23
    cb14:	str	r1, [r0]
    cb18:	mvn	r5, #0
    cb1c:	mov	r0, r5
    cb20:	sub	sp, fp, #16
    cb24:	pop	{r4, r5, r6, r7, fp, pc}
    cb28:	cmp	r1, #0
    cb2c:	beq	cb1c <rb_socketpair+0x174>
    cb30:	mov	r0, r1
    cb34:	bl	5108 <rb_close@plt>
    cb38:	b	cb1c <rb_socketpair+0x174>
    cb3c:	ldr	r6, [sp]
    cb40:	bl	5540 <__errno_location@plt>
    cb44:	ldr	r0, [r0]
    cb48:	bl	4c88 <strerror@plt>
    cb4c:	mov	r2, r0
    cb50:	ldr	r0, [pc, #40]	; cb80 <rb_socketpair+0x1d8>
    cb54:	mov	r1, r6
    cb58:	add	r0, pc, r0
    cb5c:	bl	51a4 <rb_lib_log@plt>
    cb60:	ldr	r0, [r4]
    cb64:	bl	5108 <rb_close@plt>
    cb68:	ldr	r0, [r7]
    cb6c:	bl	5108 <rb_close@plt>
    cb70:	b	cb1c <rb_socketpair+0x174>
    cb74:	.word	0x0001e9a8
    cb78:	.word	0x00030f48
    cb7c:	.word	0x00030f18
    cb80:	.word	0x0000c223
    cb84:	.word	0x00030ec4
    cb88:	.word	0x0000c28b

0000cb8c <rb_open>:
    cb8c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    cb90:	add	fp, sp, #24
    cb94:	mov	r4, r2
    cb98:	mov	r8, r1
    cb9c:	mov	r5, r0
    cba0:	eor	r7, r0, r0, lsr #12
    cba4:	cmn	r0, #1
    cba8:	ble	cbfc <rb_open+0x70>
    cbac:	ldr	r1, [pc, #356]	; cd18 <rb_open+0x18c>
    cbb0:	mov	r0, r7
    cbb4:	bfc	r0, #12, #20
    cbb8:	eor	r0, r0, r5, lsr #24
    cbbc:	add	r0, r0, r0, lsl #1
    cbc0:	ldr	r1, [pc, r1]
    cbc4:	ldr	r1, [r1]
    cbc8:	ldr	r0, [r1, r0, lsl #2]
    cbcc:	cmp	r0, #0
    cbd0:	bne	cbe4 <rb_open+0x58>
    cbd4:	b	cbfc <rb_open+0x70>
    cbd8:	ldr	r0, [r0, #8]
    cbdc:	cmp	r0, #0
    cbe0:	beq	cbfc <rb_open+0x70>
    cbe4:	ldr	r6, [r0]
    cbe8:	ldr	r1, [r6, #12]
    cbec:	cmp	r1, r5
    cbf0:	bne	cbd8 <rb_open+0x4c>
    cbf4:	cmp	r6, #0
    cbf8:	bne	cc78 <rb_open+0xec>
    cbfc:	ldr	r0, [pc, #280]	; cd1c <rb_open+0x190>
    cc00:	ldr	r0, [pc, r0]
    cc04:	bl	51d4 <rb_bh_alloc@plt>
    cc08:	str	r5, [r0, #12]
    cc0c:	mov	r6, r0
    cc10:	mov	r1, #0
    cc14:	ldr	r0, [pc, #260]	; cd20 <rb_open+0x194>
    cc18:	ldr	r0, [pc, r0]
    cc1c:	ldr	r0, [r0]
    cc20:	str	r1, [r6, #4]
    cc24:	eor	r1, r7, r5, asr #24
    cc28:	str	r6, [r6]
    cc2c:	bfc	r1, #12, #20
    cc30:	add	r1, r1, r1, lsl #1
    cc34:	mov	r2, r0
    cc38:	ldr	r3, [r2, r1, lsl #2]!
    cc3c:	cmp	r3, #0
    cc40:	str	r3, [r6, #8]
    cc44:	beq	cc54 <rb_open+0xc8>
    cc48:	add	r3, r3, #4
    cc4c:	str	r6, [r3]
    cc50:	b	cc64 <rb_open+0xd8>
    cc54:	add	r3, r0, r1, lsl #2
    cc58:	ldr	r7, [r3, #4]!
    cc5c:	cmp	r7, #0
    cc60:	streq	r6, [r3]
    cc64:	str	r6, [r2]
    cc68:	add	r0, r0, r1, lsl #2
    cc6c:	ldr	r1, [r0, #8]
    cc70:	add	r1, r1, #1
    cc74:	str	r1, [r0, #8]
    cc78:	ldrb	r0, [r6, #16]
    cc7c:	tst	r0, #1
    cc80:	bne	cce0 <rb_open+0x154>
    cc84:	cmp	r4, #0
    cc88:	orr	r0, r0, #1
    cc8c:	strb	r8, [r6, #17]
    cc90:	str	r5, [r6, #12]
    cc94:	strb	r0, [r6, #16]
    cc98:	beq	ccc0 <rb_open+0x134>
    cc9c:	mov	r0, #128	; 0x80
    cca0:	bl	5228 <malloc@plt>
    cca4:	cmp	r0, #0
    cca8:	beq	cd14 <rb_open+0x188>
    ccac:	mov	r1, r4
    ccb0:	mov	r2, #128	; 0x80
    ccb4:	mov	r5, r0
    ccb8:	bl	4f58 <rb_strlcpy@plt>
    ccbc:	str	r5, [r6, #24]
    ccc0:	ldr	r0, [pc, #100]	; cd2c <rb_open+0x1a0>
    ccc4:	ldr	r0, [pc, r0]
    ccc8:	ldr	r1, [pc, #96]	; cd30 <rb_open+0x1a4>
    cccc:	add	r0, r0, #1
    ccd0:	add	r1, pc, r1
    ccd4:	str	r0, [r1]
    ccd8:	mov	r0, r6
    ccdc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    cce0:	cmp	r6, #0
    cce4:	ldrne	r2, [r6, #24]
    cce8:	cmpne	r2, #0
    ccec:	bne	ccf8 <rb_open+0x16c>
    ccf0:	ldr	r2, [pc, #44]	; cd24 <rb_open+0x198>
    ccf4:	add	r2, pc, r2
    ccf8:	ldr	r0, [pc, #40]	; cd28 <rb_open+0x19c>
    ccfc:	mov	r1, r5
    cd00:	add	r0, pc, r0
    cd04:	bl	51a4 <rb_lib_log@plt>
    cd08:	mov	r6, #0
    cd0c:	mov	r0, r6
    cd10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    cd14:	bl	5204 <rb_outofmemory@plt>
    cd18:	.word	0x0001e7c4
    cd1c:	.word	0x00030d18
    cd20:	.word	0x0001e76c
    cd24:	.word	0x0000bffa
    cd28:	.word	0x0000c12e
    cd2c:	.word	0x00030c4c
    cd30:	.word	0x00030c40

0000cd34 <rb_close>:
    cd34:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    cd38:	add	fp, sp, #24
    cd3c:	cmp	r0, #0
    cd40:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
    cd44:	ldrb	r7, [r0, #17]
    cd48:	ldr	r8, [r0, #12]
    cd4c:	mov	r5, r0
    cd50:	ands	r9, r7, #16
    cd54:	beq	cd64 <rb_close+0x30>
    cd58:	mov	r0, r8
    cd5c:	mov	r1, #0
    cd60:	bl	4e98 <listen@plt>
    cd64:	ldr	r4, [pc, #456]	; cf34 <rb_close+0x200>
    cd68:	mov	r0, r5
    cd6c:	mov	r1, #3
    cd70:	mov	r2, #0
    cd74:	mov	r3, #0
    cd78:	ldr	r4, [pc, r4]
    cd7c:	blx	r4
    cd80:	ldr	r0, [r5, #44]	; 0x2c
    cd84:	cmp	r0, #0
    cd88:	beq	ce10 <rb_close+0xdc>
    cd8c:	ldr	r1, [r0, #12]
    cd90:	ldr	r2, [r0, #8]
    cd94:	cmp	r1, #0
    cd98:	beq	cda8 <rb_close+0x74>
    cd9c:	str	r2, [r1, #4]
    cda0:	ldr	r2, [r0, #8]
    cda4:	b	cdb4 <rb_close+0x80>
    cda8:	ldr	r3, [pc, #392]	; cf38 <rb_close+0x204>
    cdac:	add	r3, pc, r3
    cdb0:	str	r2, [r3, #4]
    cdb4:	ldr	r6, [pc, #384]	; cf3c <rb_close+0x208>
    cdb8:	cmp	r2, #0
    cdbc:	mov	r4, #0
    cdc0:	add	r6, pc, r6
    cdc4:	mov	r3, r6
    cdc8:	addne	r3, r2, #8
    cdcc:	str	r1, [r3]
    cdd0:	str	r4, [r0, #8]
    cdd4:	str	r4, [r0, #12]
    cdd8:	ldr	r1, [r6, #8]
    cddc:	sub	r1, r1, #1
    cde0:	str	r1, [r6, #8]
    cde4:	bl	4fa0 <free@plt>
    cde8:	ldr	r0, [r6, #8]
    cdec:	str	r4, [r5, #44]	; 0x2c
    cdf0:	cmp	r0, #0
    cdf4:	bne	ce10 <rb_close+0xdc>
    cdf8:	ldr	r0, [pc, #320]	; cf40 <rb_close+0x20c>
    cdfc:	ldr	r0, [pc, r0]
    ce00:	bl	4d6c <rb_event_delete@plt>
    ce04:	ldr	r0, [pc, #312]	; cf44 <rb_close+0x210>
    ce08:	add	r0, pc, r0
    ce0c:	str	r4, [r0]
    ce10:	ldr	r0, [r5, #52]	; 0x34
    ce14:	cmp	r0, #0
    ce18:	beq	ce20 <rb_close+0xec>
    ce1c:	bl	4fa0 <free@plt>
    ce20:	ldr	r0, [r5, #48]	; 0x30
    ce24:	cmp	r0, #0
    ce28:	beq	ce30 <rb_close+0xfc>
    ce2c:	bl	4fa0 <free@plt>
    ce30:	ldr	r0, [r5, #24]
    ce34:	cmp	r0, #0
    ce38:	beq	ce40 <rb_close+0x10c>
    ce3c:	bl	4fa0 <free@plt>
    ce40:	tst	r7, #32
    ce44:	beq	ce50 <rb_close+0x11c>
    ce48:	mov	r0, r5
    ce4c:	bl	f1e0 <rb_ssl_shutdown>
    ce50:	ldrb	r0, [r5, #16]
    ce54:	tst	r0, #1
    ce58:	bne	ce74 <rb_close+0x140>
    ce5c:	cmp	r9, #0
    ce60:	beq	cf30 <rb_close+0x1fc>
    ce64:	mov	r0, r8
    ce68:	mov	r1, #2
    ce6c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    ce70:	b	518c <shutdown@plt>
    ce74:	ldr	r1, [r5, #12]
    ce78:	ldr	r2, [r5, #8]
    ce7c:	ldr	r3, [r5, #4]
    ce80:	eor	r7, r1, r1, lsr #12
    ce84:	cmp	r2, #0
    ce88:	eor	r1, r7, r1, asr #24
    ce8c:	ldr	r7, [pc, #180]	; cf48 <rb_close+0x214>
    ce90:	bfc	r1, #12, #20
    ce94:	add	r1, r1, r1, lsl #1
    ce98:	ldr	r7, [pc, r7]
    ce9c:	ldr	r7, [r7]
    cea0:	add	r7, r7, r1, lsl #2
    cea4:	streq	r3, [r7, #4]
    cea8:	strne	r3, [r2, #4]
    ceac:	mov	r1, r7
    ceb0:	ldrne	r3, [r5, #4]
    ceb4:	cmp	r3, #0
    ceb8:	addne	r1, r3, #8
    cebc:	str	r2, [r1]
    cec0:	mov	r1, #0
    cec4:	str	r1, [r5, #4]
    cec8:	ldr	r2, [pc, #124]	; cf4c <rb_close+0x218>
    cecc:	ldr	r2, [pc, r2]
    ced0:	cmp	r2, #0
    ced4:	str	r2, [r5, #8]
    ced8:	beq	cee8 <rb_close+0x1b4>
    cedc:	add	r2, r2, #4
    cee0:	str	r5, [r2]
    cee4:	b	cefc <rb_close+0x1c8>
    cee8:	ldr	r2, [pc, #96]	; cf50 <rb_close+0x21c>
    ceec:	add	r2, pc, r2
    cef0:	ldr	r1, [r2, #4]!
    cef4:	cmp	r1, #0
    cef8:	streq	r5, [r2]
    cefc:	ldr	r1, [pc, #80]	; cf54 <rb_close+0x220>
    cf00:	and	r0, r0, #254	; 0xfe
    cf04:	add	r1, pc, r1
    cf08:	str	r5, [r1]
    cf0c:	ldr	r2, [r7, #8]
    cf10:	sub	r2, r2, #1
    cf14:	str	r2, [r7, #8]
    cf18:	ldr	r2, [r1, #8]
    cf1c:	add	r2, r2, #1
    cf20:	str	r2, [r1, #8]
    cf24:	strb	r0, [r5, #16]
    cf28:	cmp	r9, #0
    cf2c:	bne	ce64 <rb_close+0x130>
    cf30:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    cf34:	.word	0x00030bd0
    cf38:	.word	0x00030b54
    cf3c:	.word	0x00030b40
    cf40:	.word	0x00030b10
    cf44:	.word	0x00030b04
    cf48:	.word	0x0001e4ec
    cf4c:	.word	0x00030a88
    cf50:	.word	0x00030a68
    cf54:	.word	0x00030a50

0000cf58 <rb_pipe>:
    cf58:	push	{r4, r5, r6, r7, fp, lr}
    cf5c:	add	fp, sp, #16
    cf60:	sub	sp, sp, #8
    cf64:	mov	r5, r0
    cf68:	ldr	r0, [pc, #356]	; d0d4 <rb_pipe+0x17c>
    cf6c:	mov	r4, r1
    cf70:	ldr	r0, [pc, r0]
    cf74:	ldr	r0, [r0]
    cf78:	ldr	r1, [pc, #344]	; d0d8 <rb_pipe+0x180>
    cf7c:	ldr	r1, [pc, r1]
    cf80:	cmp	r1, r0
    cf84:	bge	d080 <rb_pipe+0x128>
    cf88:	mov	r0, sp
    cf8c:	mov	r7, r2
    cf90:	bl	54e0 <pipe@plt>
    cf94:	mvn	r6, #0
    cf98:	cmn	r0, #1
    cf9c:	beq	d0c8 <rb_pipe+0x170>
    cfa0:	ldr	r0, [sp]
    cfa4:	mov	r1, #8
    cfa8:	mov	r2, r7
    cfac:	bl	52f4 <rb_open@plt>
    cfb0:	str	r0, [r5]
    cfb4:	mov	r1, #8
    cfb8:	mov	r2, r7
    cfbc:	ldr	r0, [sp, #4]
    cfc0:	bl	52f4 <rb_open@plt>
    cfc4:	str	r0, [r4]
    cfc8:	ldr	r0, [r5]
    cfcc:	cmp	r0, #0
    cfd0:	beq	d090 <rb_pipe+0x138>
    cfd4:	ldr	r6, [r0, #12]
    cfd8:	ldr	r1, [pc, #252]	; d0dc <rb_pipe+0x184>
    cfdc:	ldr	r1, [pc, r1]
    cfe0:	blx	r1
    cfe4:	cmp	r0, #0
    cfe8:	bne	d01c <rb_pipe+0xc4>
    cfec:	mov	r0, r6
    cff0:	mov	r1, #3
    cff4:	mov	r2, #0
    cff8:	bl	545c <fcntl@plt>
    cffc:	cmn	r0, #1
    d000:	beq	d090 <rb_pipe+0x138>
    d004:	orr	r2, r0, #2048	; 0x800
    d008:	mov	r0, r6
    d00c:	mov	r1, #4
    d010:	bl	545c <fcntl@plt>
    d014:	cmn	r0, #1
    d018:	beq	d090 <rb_pipe+0x138>
    d01c:	ldr	r0, [r4]
    d020:	cmp	r0, #0
    d024:	beq	d078 <rb_pipe+0x120>
    d028:	ldr	r7, [r0, #12]
    d02c:	ldr	r1, [pc, #172]	; d0e0 <rb_pipe+0x188>
    d030:	ldr	r1, [pc, r1]
    d034:	blx	r1
    d038:	mov	r6, #0
    d03c:	cmp	r0, #0
    d040:	bne	d0c8 <rb_pipe+0x170>
    d044:	mov	r0, r7
    d048:	mov	r1, #3
    d04c:	mov	r2, #0
    d050:	mov	r6, #0
    d054:	bl	545c <fcntl@plt>
    d058:	cmn	r0, #1
    d05c:	beq	d078 <rb_pipe+0x120>
    d060:	orr	r2, r0, #2048	; 0x800
    d064:	mov	r0, r7
    d068:	mov	r1, #4
    d06c:	bl	545c <fcntl@plt>
    d070:	cmn	r0, #1
    d074:	bne	d0c8 <rb_pipe+0x170>
    d078:	ldr	r6, [sp, #4]
    d07c:	b	d094 <rb_pipe+0x13c>
    d080:	bl	5540 <__errno_location@plt>
    d084:	mov	r1, #23
    d088:	str	r1, [r0]
    d08c:	b	d0c4 <rb_pipe+0x16c>
    d090:	ldr	r6, [sp]
    d094:	bl	5540 <__errno_location@plt>
    d098:	ldr	r0, [r0]
    d09c:	bl	4c88 <strerror@plt>
    d0a0:	mov	r2, r0
    d0a4:	ldr	r0, [pc, #56]	; d0e4 <rb_pipe+0x18c>
    d0a8:	mov	r1, r6
    d0ac:	add	r0, pc, r0
    d0b0:	bl	51a4 <rb_lib_log@plt>
    d0b4:	ldr	r0, [r5]
    d0b8:	bl	5108 <rb_close@plt>
    d0bc:	ldr	r0, [r4]
    d0c0:	bl	5108 <rb_close@plt>
    d0c4:	mvn	r6, #0
    d0c8:	mov	r0, r6
    d0cc:	sub	sp, fp, #16
    d0d0:	pop	{r4, r5, r6, r7, fp, pc}
    d0d4:	.word	0x0001e3f4
    d0d8:	.word	0x00030994
    d0dc:	.word	0x00030974
    d0e0:	.word	0x00030920
    d0e4:	.word	0x0000bccf

0000d0e8 <rb_socket>:
    d0e8:	push	{r4, r5, r6, r7, fp, lr}
    d0ec:	add	fp, sp, #16
    d0f0:	sub	sp, sp, #8
    d0f4:	mov	r7, r0
    d0f8:	ldr	r0, [pc, #372]	; d274 <rb_socket+0x18c>
    d0fc:	mov	r6, r3
    d100:	ldr	r0, [pc, r0]
    d104:	ldr	r0, [r0]
    d108:	ldr	r3, [pc, #360]	; d278 <rb_socket+0x190>
    d10c:	ldr	r3, [pc, r3]
    d110:	cmp	r3, r0
    d114:	bge	d260 <rb_socket+0x178>
    d118:	mov	r0, r7
    d11c:	bl	503c <socket@plt>
    d120:	mov	r4, #0
    d124:	cmp	r0, #0
    d128:	blt	d228 <rb_socket+0x140>
    d12c:	mov	r5, r0
    d130:	cmp	r7, #10
    d134:	bne	d164 <rb_socket+0x7c>
    d138:	mov	r0, #1
    d13c:	add	r3, sp, #4
    d140:	mov	r1, #41	; 0x29
    d144:	mov	r2, #26
    d148:	str	r0, [sp, #4]
    d14c:	mov	r0, #4
    d150:	str	r0, [sp]
    d154:	mov	r0, r5
    d158:	bl	54f8 <setsockopt@plt>
    d15c:	cmn	r0, #1
    d160:	beq	d1f8 <rb_socket+0x110>
    d164:	mov	r0, r5
    d168:	mov	r1, #4
    d16c:	mov	r2, r6
    d170:	bl	52f4 <rb_open@plt>
    d174:	cmp	r0, #0
    d178:	beq	d1d4 <rb_socket+0xec>
    d17c:	ldr	r7, [r0, #12]
    d180:	ldr	r1, [pc, #252]	; d284 <rb_socket+0x19c>
    d184:	mov	r6, r0
    d188:	ldr	r1, [pc, r1]
    d18c:	blx	r1
    d190:	cmp	r0, #0
    d194:	bne	d1cc <rb_socket+0xe4>
    d198:	mov	r0, r7
    d19c:	mov	r1, #3
    d1a0:	mov	r2, #0
    d1a4:	mov	r4, #0
    d1a8:	bl	545c <fcntl@plt>
    d1ac:	cmn	r0, #1
    d1b0:	beq	d234 <rb_socket+0x14c>
    d1b4:	orr	r2, r0, #2048	; 0x800
    d1b8:	mov	r0, r7
    d1bc:	mov	r1, #4
    d1c0:	bl	545c <fcntl@plt>
    d1c4:	cmn	r0, #1
    d1c8:	beq	d234 <rb_socket+0x14c>
    d1cc:	mov	r4, r6
    d1d0:	b	d228 <rb_socket+0x140>
    d1d4:	bl	5540 <__errno_location@plt>
    d1d8:	ldr	r0, [r0]
    d1dc:	bl	4c88 <strerror@plt>
    d1e0:	mov	r2, r0
    d1e4:	ldr	r0, [pc, #148]	; d280 <rb_socket+0x198>
    d1e8:	mov	r1, r5
    d1ec:	add	r0, pc, r0
    d1f0:	bl	51a4 <rb_lib_log@plt>
    d1f4:	b	d220 <rb_socket+0x138>
    d1f8:	ldr	r6, [sp, #4]
    d1fc:	bl	5540 <__errno_location@plt>
    d200:	ldr	r0, [r0]
    d204:	bl	4c88 <strerror@plt>
    d208:	mov	r3, r0
    d20c:	ldr	r0, [pc, #104]	; d27c <rb_socket+0x194>
    d210:	mov	r1, r6
    d214:	mov	r2, r5
    d218:	add	r0, pc, r0
    d21c:	bl	51a4 <rb_lib_log@plt>
    d220:	mov	r0, r5
    d224:	bl	51c8 <close@plt>
    d228:	mov	r0, r4
    d22c:	sub	sp, fp, #16
    d230:	pop	{r4, r5, r6, r7, fp, pc}
    d234:	bl	5540 <__errno_location@plt>
    d238:	ldr	r0, [r0]
    d23c:	bl	4c88 <strerror@plt>
    d240:	mov	r2, r0
    d244:	ldr	r0, [pc, #60]	; d288 <rb_socket+0x1a0>
    d248:	mov	r1, r5
    d24c:	add	r0, pc, r0
    d250:	bl	51a4 <rb_lib_log@plt>
    d254:	mov	r0, r6
    d258:	bl	5108 <rb_close@plt>
    d25c:	b	d228 <rb_socket+0x140>
    d260:	bl	5540 <__errno_location@plt>
    d264:	mov	r1, #23
    d268:	mov	r4, #0
    d26c:	str	r1, [r0]
    d270:	b	d228 <rb_socket+0x140>
    d274:	.word	0x0001e264
    d278:	.word	0x00030804
    d27c:	.word	0x0000bb90
    d280:	.word	0x0000bbfb
    d284:	.word	0x000307c8
    d288:	.word	0x0000bb2f

0000d28c <rb_listen>:
    d28c:	push	{r4, r5, r6, sl, fp, lr}
    d290:	add	fp, sp, #16
    d294:	sub	sp, sp, #8
    d298:	str	r1, [sp, #4]
    d29c:	mov	r5, r0
    d2a0:	mov	r6, r2
    d2a4:	ldrb	r0, [r0, #17]
    d2a8:	and	r0, r0, #128	; 0x80
    d2ac:	orr	r0, r0, #20
    d2b0:	strb	r0, [r5, #17]
    d2b4:	ldr	r0, [r5, #12]
    d2b8:	bl	4e98 <listen@plt>
    d2bc:	mov	r4, r0
    d2c0:	cmp	r6, #0
    d2c4:	beq	d2ec <rb_listen+0x60>
    d2c8:	cmp	r4, #0
    d2cc:	bne	d2ec <rb_listen+0x60>
    d2d0:	ldr	r0, [r5, #12]
    d2d4:	mov	r1, #4
    d2d8:	add	r3, sp, #4
    d2dc:	mov	r2, #9
    d2e0:	str	r1, [sp]
    d2e4:	mov	r1, #6
    d2e8:	bl	54f8 <setsockopt@plt>
    d2ec:	mov	r0, r4
    d2f0:	sub	sp, fp, #16
    d2f4:	pop	{r4, r5, r6, sl, fp, pc}

0000d2f8 <rb_fdlist_init>:
    d2f8:	push	{r4, r5, r6, r7, fp, lr}
    d2fc:	add	fp, sp, #16
    d300:	ldr	r6, [pc, #116]	; d37c <rb_fdlist_init+0x84>
    d304:	mov	r4, r2
    d308:	add	r6, pc, r6
    d30c:	ldrb	r2, [r6]
    d310:	cmp	r2, #0
    d314:	bne	d358 <rb_fdlist_init+0x60>
    d318:	ldr	r7, [pc, #96]	; d380 <rb_fdlist_init+0x88>
    d31c:	cmp	r0, #0
    d320:	ldr	r7, [pc, r7]
    d324:	str	r1, [r7]
    d328:	beq	d350 <rb_fdlist_init+0x58>
    d32c:	cmp	r1, #4
    d330:	blt	d350 <rb_fdlist_init+0x58>
    d334:	mov	r5, #3
    d338:	mov	r0, r5
    d33c:	bl	51c8 <close@plt>
    d340:	ldr	r0, [r7]
    d344:	add	r5, r5, #1
    d348:	cmp	r5, r0
    d34c:	blt	d338 <rb_fdlist_init+0x40>
    d350:	mov	r0, #1
    d354:	strb	r0, [r6]
    d358:	ldr	r2, [pc, #36]	; d384 <rb_fdlist_init+0x8c>
    d35c:	mov	r0, #68	; 0x44
    d360:	mov	r1, r4
    d364:	add	r2, pc, r2
    d368:	bl	5318 <rb_bh_create@plt>
    d36c:	ldr	r1, [pc, #20]	; d388 <rb_fdlist_init+0x90>
    d370:	add	r1, pc, r1
    d374:	str	r0, [r1]
    d378:	pop	{r4, r5, r6, r7, fp, pc}
    d37c:	.word	0x0003060c
    d380:	.word	0x0001e044
    d384:	.word	0x0000babc
    d388:	.word	0x000305a8

0000d38c <rb_dump_fd>:
    d38c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    d390:	add	fp, sp, #24
    d394:	ldr	r8, [pc, #136]	; d424 <rb_dump_fd+0x98>
    d398:	mov	r4, r1
    d39c:	mov	r5, r0
    d3a0:	mov	r6, #0
    d3a4:	ldr	r8, [pc, r8]
    d3a8:	ldr	r9, [pc, #120]	; d428 <rb_dump_fd+0x9c>
    d3ac:	add	r9, pc, r9
    d3b0:	b	d3c0 <rb_dump_fd+0x34>
    d3b4:	add	r6, r6, #1
    d3b8:	cmp	r6, #4096	; 0x1000
    d3bc:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
    d3c0:	ldr	r0, [r8]
    d3c4:	add	r1, r6, r6, lsl #1
    d3c8:	add	r2, r0, r1, lsl #2
    d3cc:	ldr	r2, [r2, #8]
    d3d0:	cmp	r2, #0
    d3d4:	beq	d3b4 <rb_dump_fd+0x28>
    d3d8:	ldr	r7, [r0, r1, lsl #2]
    d3dc:	cmp	r7, #0
    d3e0:	bne	d3f4 <rb_dump_fd+0x68>
    d3e4:	b	d3b4 <rb_dump_fd+0x28>
    d3e8:	ldr	r7, [r7, #8]
    d3ec:	cmp	r7, #0
    d3f0:	beq	d3b4 <rb_dump_fd+0x28>
    d3f4:	ldr	r1, [r7]
    d3f8:	cmp	r1, #0
    d3fc:	ldrbne	r0, [r1, #16]
    d400:	tstne	r0, #1
    d404:	beq	d3e8 <rb_dump_fd+0x5c>
    d408:	ldr	r0, [r1, #12]
    d40c:	ldr	r1, [r1, #24]
    d410:	mov	r2, r4
    d414:	cmp	r1, #0
    d418:	moveq	r1, r9
    d41c:	blx	r5
    d420:	b	d3e8 <rb_dump_fd+0x5c>
    d424:	.word	0x0001dfe0
    d428:	.word	0x0000bb6e

0000d42c <rb_note>:
    d42c:	push	{r4, r5, r6, sl, fp, lr}
    d430:	add	fp, sp, #16
    d434:	cmp	r0, #0
    d438:	popeq	{r4, r5, r6, sl, fp, pc}
    d43c:	mov	r4, r0
    d440:	ldr	r0, [r0, #24]
    d444:	mov	r5, r1
    d448:	cmp	r0, #0
    d44c:	beq	d454 <rb_note+0x28>
    d450:	bl	4fa0 <free@plt>
    d454:	mov	r0, #128	; 0x80
    d458:	bl	5228 <malloc@plt>
    d45c:	cmp	r0, #0
    d460:	beq	d47c <rb_note+0x50>
    d464:	mov	r1, r5
    d468:	mov	r2, #128	; 0x80
    d46c:	mov	r6, r0
    d470:	bl	4f58 <rb_strlcpy@plt>
    d474:	str	r6, [r4, #24]
    d478:	pop	{r4, r5, r6, sl, fp, pc}
    d47c:	bl	5204 <rb_outofmemory@plt>

0000d480 <rb_set_type>:
    d480:	strb	r1, [r0, #17]
    d484:	bx	lr

0000d488 <rb_get_type>:
    d488:	ldrb	r0, [r0, #17]
    d48c:	bx	lr

0000d490 <rb_fd_ssl>:
    d490:	cmp	r0, #0
    d494:	moveq	r0, #0
    d498:	ldrbne	r0, [r0, #17]
    d49c:	ubfxne	r0, r0, #5, #1
    d4a0:	bx	lr

0000d4a4 <rb_get_fde>:
    d4a4:	cmp	r0, #0
    d4a8:	blt	d4fc <rb_get_fde+0x58>
    d4ac:	ldr	r2, [pc, #84]	; d508 <rb_get_fde+0x64>
    d4b0:	eor	r1, r0, r0, lsr #12
    d4b4:	bfc	r1, #12, #20
    d4b8:	eor	r1, r1, r0, lsr #24
    d4bc:	add	r1, r1, r1, lsl #1
    d4c0:	ldr	r2, [pc, r2]
    d4c4:	ldr	r2, [r2]
    d4c8:	ldr	r2, [r2, r1, lsl #2]
    d4cc:	cmp	r2, #0
    d4d0:	bne	d4e4 <rb_get_fde+0x40>
    d4d4:	b	d4fc <rb_get_fde+0x58>
    d4d8:	ldr	r2, [r2, #8]
    d4dc:	cmp	r2, #0
    d4e0:	beq	d4fc <rb_get_fde+0x58>
    d4e4:	ldr	r1, [r2]
    d4e8:	ldr	r3, [r1, #12]
    d4ec:	cmp	r3, r0
    d4f0:	bne	d4d8 <rb_get_fde+0x34>
    d4f4:	mov	r0, r1
    d4f8:	bx	lr
    d4fc:	mov	r1, #0
    d500:	mov	r0, r1
    d504:	bx	lr
    d508:	.word	0x0001dec4

0000d50c <rb_read>:
    d50c:	cmp	r0, #0
    d510:	moveq	r0, #0
    d514:	bxeq	lr
    d518:	ldrb	r3, [r0, #17]
    d51c:	tst	r3, #32
    d520:	bne	d534 <rb_read+0x28>
    d524:	ldr	r0, [r0, #12]
    d528:	tst	r3, #4
    d52c:	bne	d538 <rb_read+0x2c>
    d530:	b	4fb8 <read@plt>
    d534:	b	fbb8 <rb_ssl_read>
    d538:	mov	r3, #0
    d53c:	b	4e50 <recv@plt>

0000d540 <rb_write>:
    d540:	cmp	r0, #0
    d544:	moveq	r0, #0
    d548:	bxeq	lr
    d54c:	ldrb	r3, [r0, #17]
    d550:	tst	r3, #32
    d554:	bne	d568 <rb_write+0x28>
    d558:	ldr	r0, [r0, #12]
    d55c:	tst	r3, #4
    d560:	bne	d56c <rb_write+0x2c>
    d564:	b	4fd0 <write@plt>
    d568:	b	fd24 <rb_ssl_write>
    d56c:	mov	r3, #16384	; 0x4000
    d570:	b	5300 <send@plt>

0000d574 <rb_writev>:
    d574:	push	{r4, r5, r6, r7, fp, lr}
    d578:	add	fp, sp, #16
    d57c:	sub	sp, sp, #32
    d580:	cmp	r0, #0
    d584:	beq	d5b8 <rb_writev+0x44>
    d588:	mov	r5, r0
    d58c:	ldrb	r0, [r0, #17]
    d590:	mov	r4, r1
    d594:	tst	r0, #32
    d598:	bne	d5d0 <rb_writev+0x5c>
    d59c:	tst	r0, #4
    d5a0:	bne	d660 <rb_writev+0xec>
    d5a4:	ldr	r0, [r5, #12]
    d5a8:	mov	r1, r4
    d5ac:	sub	sp, fp, #16
    d5b0:	pop	{r4, r5, r6, r7, fp, lr}
    d5b4:	b	4f40 <writev@plt>
    d5b8:	bl	5540 <__errno_location@plt>
    d5bc:	mov	r1, #9
    d5c0:	str	r1, [r0]
    d5c4:	mvn	r0, #0
    d5c8:	sub	sp, fp, #16
    d5cc:	pop	{r4, r5, r6, r7, fp, pc}
    d5d0:	cmp	r2, #0
    d5d4:	moveq	r0, #0
    d5d8:	subeq	sp, fp, #16
    d5dc:	popeq	{r4, r5, r6, r7, fp, pc}
    d5e0:	rsb	r7, r2, #1
    d5e4:	mov	r6, #0
    d5e8:	b	d5f8 <rb_writev+0x84>
    d5ec:	ldrb	r0, [r5, #17]
    d5f0:	add	r4, r4, #8
    d5f4:	add	r7, r7, #1
    d5f8:	ldm	r4, {r1, r2}
    d5fc:	tst	r0, #32
    d600:	bne	d624 <rb_writev+0xb0>
    d604:	uxtb	r3, r0
    d608:	ldr	r0, [r5, #12]
    d60c:	tst	r3, #4
    d610:	bne	d638 <rb_writev+0xc4>
    d614:	bl	4fd0 <write@plt>
    d618:	cmp	r0, #0
    d61c:	bgt	d648 <rb_writev+0xd4>
    d620:	b	d698 <rb_writev+0x124>
    d624:	mov	r0, r5
    d628:	bl	fd24 <rb_ssl_write>
    d62c:	cmp	r0, #0
    d630:	bgt	d648 <rb_writev+0xd4>
    d634:	b	d698 <rb_writev+0x124>
    d638:	mov	r3, #16384	; 0x4000
    d63c:	bl	5300 <send@plt>
    d640:	cmp	r0, #0
    d644:	ble	d698 <rb_writev+0x124>
    d648:	add	r6, r0, r6
    d64c:	cmp	r7, #0
    d650:	bne	d5ec <rb_writev+0x78>
    d654:	mov	r0, r6
    d658:	sub	sp, fp, #16
    d65c:	pop	{r4, r5, r6, r7, fp, pc}
    d660:	mov	r1, sp
    d664:	vmov.i32	q8, #0	; 0x00000000
    d668:	add	r0, r1, #12
    d66c:	mov	r3, r1
    d670:	vst1.32	{d16-d17}, [r0]
    d674:	mov	r0, #8
    d678:	vst1.64	{d16-d17}, [r3], r0
    d67c:	str	r4, [r3]
    d680:	str	r2, [sp, #12]
    d684:	mov	r2, #16384	; 0x4000
    d688:	ldr	r0, [r5, #12]
    d68c:	bl	4fac <sendmsg@plt>
    d690:	sub	sp, fp, #16
    d694:	pop	{r4, r5, r6, r7, fp, pc}
    d698:	cmp	r6, #0
    d69c:	movgt	r0, r6
    d6a0:	sub	sp, fp, #16
    d6a4:	pop	{r4, r5, r6, r7, fp, pc}

0000d6a8 <rb_inet_pton_sock>:
    d6a8:	push	{r4, r5, r6, r7, fp, lr}
    d6ac:	add	fp, sp, #16
    d6b0:	sub	sp, sp, #8
    d6b4:	mov	ip, r0
    d6b8:	mov	r7, r1
    d6bc:	vmov.i32	q8, #0	; 0x00000000
    d6c0:	mov	r0, #112	; 0x70
    d6c4:	vst1.32	{d16-d17}, [r1], r0
    d6c8:	add	r0, r7, #96	; 0x60
    d6cc:	vst1.32	{d16-d17}, [r0]
    d6d0:	add	r0, r7, #80	; 0x50
    d6d4:	vst1.32	{d16-d17}, [r1]
    d6d8:	mov	r1, #0
    d6dc:	vst1.32	{d16-d17}, [r0]
    d6e0:	add	r0, r7, #64	; 0x40
    d6e4:	vst1.32	{d16-d17}, [r0]
    d6e8:	add	r0, r7, #48	; 0x30
    d6ec:	vst1.32	{d16-d17}, [r0]
    d6f0:	add	r0, r7, #32
    d6f4:	vst1.32	{d16-d17}, [r0]
    d6f8:	add	r0, r7, #16
    d6fc:	vst1.32	{d16-d17}, [r0]
    d700:	strb	r1, [sp, #4]
    d704:	ldrb	r5, [ip]
    d708:	cmp	r5, #0
    d70c:	beq	d7ac <rb_inet_pton_sock+0x104>
    d710:	add	r0, ip, #1
    d714:	add	r2, sp, #4
    d718:	mov	r3, #0
    d71c:	mov	r4, #0
    d720:	sub	r6, r5, #48	; 0x30
    d724:	uxtb	r6, r6
    d728:	cmp	r6, #9
    d72c:	bhi	d770 <rb_inet_pton_sock+0xc8>
    d730:	uxtb	r6, r1
    d734:	lsl	r6, r6, #2
    d738:	uxtab	r1, r6, r1
    d73c:	lsl	r1, r1, #1
    d740:	uxtab	r1, r1, r5
    d744:	sub	r1, r1, #48	; 0x30
    d748:	cmp	r1, #255	; 0xff
    d74c:	bhi	d7ac <rb_inet_pton_sock+0x104>
    d750:	cmp	r4, #0
    d754:	strb	r1, [r2]
    d758:	bne	d798 <rb_inet_pton_sock+0xf0>
    d75c:	cmp	r3, #3
    d760:	bgt	d7ac <rb_inet_pton_sock+0x104>
    d764:	add	r3, r3, #1
    d768:	mov	r4, #1
    d76c:	b	d798 <rb_inet_pton_sock+0xf0>
    d770:	cmp	r3, #4
    d774:	beq	d7ac <rb_inet_pton_sock+0x104>
    d778:	uxtb	r1, r5
    d77c:	cmp	r1, #46	; 0x2e
    d780:	bne	d7ac <rb_inet_pton_sock+0x104>
    d784:	cmp	r4, #0
    d788:	beq	d7ac <rb_inet_pton_sock+0x104>
    d78c:	mov	r1, #0
    d790:	mov	r4, #0
    d794:	strb	r1, [r2, #1]!
    d798:	ldrb	r5, [r0], #1
    d79c:	cmp	r5, #0
    d7a0:	bne	d720 <rb_inet_pton_sock+0x78>
    d7a4:	cmp	r3, #4
    d7a8:	bge	d7d4 <rb_inet_pton_sock+0x12c>
    d7ac:	add	r2, r7, #8
    d7b0:	mov	r0, #10
    d7b4:	mov	r1, ip
    d7b8:	mov	r4, #10
    d7bc:	bl	4eec <rb_inet_pton@plt>
    d7c0:	cmp	r0, #0
    d7c4:	moveq	r0, #0
    d7c8:	subeq	sp, fp, #16
    d7cc:	popeq	{r4, r5, r6, r7, fp, pc}
    d7d0:	b	d7e0 <rb_inet_pton_sock+0x138>
    d7d4:	ldr	r0, [sp, #4]
    d7d8:	mov	r4, #2
    d7dc:	str	r0, [r7, #4]
    d7e0:	mov	r0, #0
    d7e4:	strh	r0, [r7, #2]
    d7e8:	strh	r4, [r7]
    d7ec:	mov	r0, #1
    d7f0:	sub	sp, fp, #16
    d7f4:	pop	{r4, r5, r6, r7, fp, pc}

0000d7f8 <rb_inet_pton>:
    d7f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    d7fc:	add	fp, sp, #24
    d800:	sub	sp, sp, #56	; 0x38
    d804:	mov	r8, r2
    d808:	mov	r2, r1
    d80c:	cmp	r0, #10
    d810:	beq	d8f8 <rb_inet_pton+0x100>
    d814:	mov	r1, r0
    d818:	mvn	r0, #0
    d81c:	cmp	r1, #2
    d820:	bne	d9e8 <rb_inet_pton+0x1f0>
    d824:	mov	r0, #0
    d828:	strb	r0, [sp]
    d82c:	ldrb	r6, [r2]
    d830:	cmp	r6, #0
    d834:	beq	d9e8 <rb_inet_pton+0x1f0>
    d838:	add	r1, r2, #1
    d83c:	mov	r5, #0
    d840:	mov	r2, sp
    d844:	mov	r3, #0
    d848:	mov	r4, #0
    d84c:	sub	r0, r6, #48	; 0x30
    d850:	uxtb	r0, r0
    d854:	cmp	r0, #9
    d858:	bhi	d8a0 <rb_inet_pton+0xa8>
    d85c:	uxtb	r0, r5
    d860:	lsl	r0, r0, #2
    d864:	uxtab	r0, r0, r5
    d868:	lsl	r0, r0, #1
    d86c:	uxtab	r0, r0, r6
    d870:	sub	r5, r0, #48	; 0x30
    d874:	mov	r0, #0
    d878:	cmp	r5, #255	; 0xff
    d87c:	bhi	d9e8 <rb_inet_pton+0x1f0>
    d880:	cmp	r4, #0
    d884:	strb	r5, [r2]
    d888:	bne	d8cc <rb_inet_pton+0xd4>
    d88c:	cmp	r3, #3
    d890:	bgt	d9e8 <rb_inet_pton+0x1f0>
    d894:	add	r3, r3, #1
    d898:	mov	r4, #1
    d89c:	b	d8cc <rb_inet_pton+0xd4>
    d8a0:	mov	r0, #0
    d8a4:	cmp	r3, #4
    d8a8:	beq	d9e8 <rb_inet_pton+0x1f0>
    d8ac:	uxtb	r6, r6
    d8b0:	cmp	r6, #46	; 0x2e
    d8b4:	bne	d9e8 <rb_inet_pton+0x1f0>
    d8b8:	cmp	r4, #0
    d8bc:	beq	d9e8 <rb_inet_pton+0x1f0>
    d8c0:	mov	r5, #0
    d8c4:	mov	r4, #0
    d8c8:	strb	r5, [r2, #1]!
    d8cc:	ldrb	r6, [r1], #1
    d8d0:	cmp	r6, #0
    d8d4:	bne	d84c <rb_inet_pton+0x54>
    d8d8:	mov	r0, #0
    d8dc:	cmp	r3, #4
    d8e0:	blt	d9e8 <rb_inet_pton+0x1f0>
    d8e4:	ldr	r0, [sp]
    d8e8:	str	r0, [r8]
    d8ec:	mov	r0, #1
    d8f0:	sub	sp, fp, #24
    d8f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d8f8:	mov	r5, #0
    d8fc:	strb	r5, [sp]
    d900:	ldrb	r6, [r2]
    d904:	cmp	r6, #0
    d908:	beq	d9ac <rb_inet_pton+0x1b4>
    d90c:	mov	r0, #1
    d910:	mov	r1, sp
    d914:	mov	r3, #0
    d918:	mov	r4, #0
    d91c:	sub	r7, r6, #48	; 0x30
    d920:	uxtb	r7, r7
    d924:	cmp	r7, #9
    d928:	bhi	d96c <rb_inet_pton+0x174>
    d92c:	uxtb	r7, r5
    d930:	lsl	r7, r7, #2
    d934:	uxtab	r7, r7, r5
    d938:	lsl	r7, r7, #1
    d93c:	uxtab	r7, r7, r6
    d940:	sub	r5, r7, #48	; 0x30
    d944:	cmp	r5, #255	; 0xff
    d948:	bhi	d9ac <rb_inet_pton+0x1b4>
    d94c:	cmp	r4, #0
    d950:	strb	r5, [r1]
    d954:	bne	d994 <rb_inet_pton+0x19c>
    d958:	cmp	r3, #3
    d95c:	bgt	d9ac <rb_inet_pton+0x1b4>
    d960:	add	r3, r3, #1
    d964:	mov	r4, #1
    d968:	b	d994 <rb_inet_pton+0x19c>
    d96c:	cmp	r3, #4
    d970:	beq	d9ac <rb_inet_pton+0x1b4>
    d974:	uxtb	r7, r6
    d978:	cmp	r7, #46	; 0x2e
    d97c:	bne	d9ac <rb_inet_pton+0x1b4>
    d980:	cmp	r4, #0
    d984:	beq	d9ac <rb_inet_pton+0x1b4>
    d988:	mov	r5, #0
    d98c:	mov	r4, #0
    d990:	strb	r5, [r1, #1]!
    d994:	ldrb	r6, [r2, r0]
    d998:	add	r0, r0, #1
    d99c:	cmp	r6, #0
    d9a0:	bne	d91c <rb_inet_pton+0x124>
    d9a4:	cmp	r3, #4
    d9a8:	bge	d9c0 <rb_inet_pton+0x1c8>
    d9ac:	mov	r0, r2
    d9b0:	mov	r1, r8
    d9b4:	sub	sp, fp, #24
    d9b8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
    d9bc:	b	e058 <inet_pton6>
    d9c0:	ldr	r0, [sp]
    d9c4:	mov	r5, sp
    d9c8:	str	r0, [r8]
    d9cc:	mov	r0, r5
    d9d0:	ldr	r1, [pc, #24]	; d9f0 <rb_inet_pton+0x1f8>
    d9d4:	add	r1, pc, r1
    d9d8:	bl	5558 <sprintf@plt>
    d9dc:	mov	r0, r5
    d9e0:	mov	r1, r8
    d9e4:	bl	e058 <inet_pton6>
    d9e8:	sub	sp, fp, #24
    d9ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d9f0:	.word	0x0000b48c

0000d9f4 <rb_inet_ntop_sock>:
    d9f4:	mov	r3, r2
    d9f8:	mov	r2, r1
    d9fc:	ldrh	r1, [r0]
    da00:	cmp	r1, #10
    da04:	beq	da24 <rb_inet_ntop_sock+0x30>
    da08:	cmp	r1, #2
    da0c:	movne	r0, #0
    da10:	bxne	lr
    da14:	mov	r1, r2
    da18:	add	r0, r0, #4
    da1c:	mov	r2, r3
    da20:	b	df38 <inet_ntop4>
    da24:	add	r1, r0, #8
    da28:	mov	r0, #10
    da2c:	b	da30 <rb_inet_ntop>

0000da30 <rb_inet_ntop>:
    da30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da34:	add	fp, sp, #28
    da38:	sub	sp, sp, #100	; 0x64
    da3c:	mov	sl, r1
    da40:	cmp	r0, #10
    da44:	beq	da70 <rb_inet_ntop+0x40>
    da48:	mov	r1, r0
    da4c:	mov	r0, #0
    da50:	cmp	r1, #2
    da54:	bne	dec8 <rb_inet_ntop+0x498>
    da58:	mov	r0, sl
    da5c:	mov	r1, r2
    da60:	mov	r2, r3
    da64:	sub	sp, fp, #28
    da68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da6c:	b	df38 <inet_ntop4>
    da70:	ldr	r1, [sl]
    da74:	cmp	r1, #0
    da78:	beq	da84 <rb_inet_ntop+0x54>
    da7c:	ldrb	r7, [sl, #4]
    da80:	b	da90 <rb_inet_ntop+0x60>
    da84:	ldr	r7, [sl, #4]
    da88:	cmp	r7, #0
    da8c:	beq	deec <rb_inet_ntop+0x4bc>
    da90:	ldrb	r4, [sl, #1]
    da94:	str	r2, [sp, #4]
    da98:	uxtb	r2, r7
    da9c:	bfi	r4, r1, #8, #8
    daa0:	str	r4, [sp, #16]
    daa4:	cmp	r4, #0
    daa8:	ldrb	r0, [sl, #2]
    daac:	ldrb	r1, [sl, #3]
    dab0:	orr	r0, r1, r0, lsl #8
    dab4:	str	r0, [sp, #20]
    dab8:	ldrb	r1, [sl, #5]
    dabc:	orr	r2, r1, r2, lsl #8
    dac0:	str	r2, [sp, #24]
    dac4:	ldrb	r1, [sl, #6]
    dac8:	ldrb	r7, [sl, #7]
    dacc:	orr	ip, r7, r1, lsl #8
    dad0:	str	ip, [sp, #28]
    dad4:	ldrb	r1, [sl, #8]
    dad8:	ldrb	r7, [sl, #9]
    dadc:	orr	r7, r7, r1, lsl #8
    dae0:	str	r7, [sp, #32]
    dae4:	ldrb	r1, [sl, #10]
    dae8:	ldrb	r6, [sl, #11]
    daec:	orr	r8, r6, r1, lsl #8
    daf0:	str	r8, [sp, #36]	; 0x24
    daf4:	ldrb	r6, [sl, #12]!
    daf8:	ldrb	r5, [sl, #1]
    dafc:	orr	r1, r5, r6, lsl #8
    db00:	str	r1, [sp, #40]	; 0x28
    db04:	str	r1, [sp, #12]
    db08:	ldrb	r6, [sl, #2]
    db0c:	ldrb	r5, [sl, #3]
    db10:	orr	r1, r5, r6, lsl #8
    db14:	mov	r6, r4
    db18:	movwne	r6, #1
    db1c:	mov	lr, r1
    db20:	cmp	r0, #0
    db24:	str	r1, [sp, #44]	; 0x2c
    db28:	beq	db98 <rb_inet_ntop+0x168>
    db2c:	clz	r0, r4
    db30:	rsb	r5, r6, #0
    db34:	mvn	r6, #0
    db38:	lsr	r0, r0, #5
    db3c:	mov	r9, r0
    db40:	cmp	r2, #0
    db44:	beq	dbb4 <rb_inet_ntop+0x184>
    db48:	mvn	r2, #0
    db4c:	cmn	r6, #1
    db50:	beq	dbc8 <rb_inet_ntop+0x198>
    db54:	add	r1, r5, #1
    db58:	mov	r4, #0
    db5c:	cmp	r0, r9
    db60:	clz	r1, r1
    db64:	movwhi	r4, #1
    db68:	lsr	r1, r1, #5
    db6c:	orrs	r1, r1, r4
    db70:	moveq	r6, r5
    db74:	movne	r9, r0
    db78:	cmp	ip, #0
    db7c:	bne	dbd4 <rb_inet_ntop+0x1a4>
    db80:	add	r0, r0, #1
    db84:	cmn	r2, #1
    db88:	mov	r4, r2
    db8c:	movweq	r0, #1
    db90:	movweq	r4, #3
    db94:	b	dc08 <rb_inet_ntop+0x1d8>
    db98:	mov	r0, #1
    db9c:	cmp	r4, #0
    dba0:	mvn	r5, #0
    dba4:	mov	r9, #0
    dba8:	movweq	r0, #2
    dbac:	cmp	r2, #0
    dbb0:	bne	db48 <rb_inet_ntop+0x118>
    dbb4:	add	r0, r0, #1
    dbb8:	cmn	r6, #1
    dbbc:	mov	r2, r6
    dbc0:	movweq	r0, #1
    dbc4:	movweq	r2, #2
    dbc8:	mov	r6, r5
    dbcc:	cmp	ip, #0
    dbd0:	beq	db80 <rb_inet_ntop+0x150>
    dbd4:	mvn	r4, #0
    dbd8:	cmn	r2, #1
    dbdc:	beq	dc08 <rb_inet_ntop+0x1d8>
    dbe0:	add	r5, r6, #1
    dbe4:	mov	r1, #0
    dbe8:	cmp	r0, r9
    dbec:	clz	r5, r5
    dbf0:	movwgt	r1, #1
    dbf4:	lsr	r5, r5, #5
    dbf8:	orrs	r1, r5, r1
    dbfc:	moveq	r2, r6
    dc00:	movne	r9, r0
    dc04:	b	dc0c <rb_inet_ntop+0x1dc>
    dc08:	mov	r2, r6
    dc0c:	ldr	r6, [sp, #12]
    dc10:	cmp	r7, #0
    dc14:	beq	dc68 <rb_inet_ntop+0x238>
    dc18:	mvn	r7, #0
    dc1c:	cmn	r4, #1
    dc20:	beq	dc7c <rb_inet_ntop+0x24c>
    dc24:	add	r5, r2, #1
    dc28:	mov	r1, #0
    dc2c:	cmp	r0, r9
    dc30:	clz	r5, r5
    dc34:	movwgt	r1, #1
    dc38:	lsr	r5, r5, #5
    dc3c:	orrs	r1, r5, r1
    dc40:	moveq	r4, r2
    dc44:	movne	r9, r0
    dc48:	cmp	r8, #0
    dc4c:	bne	dc88 <rb_inet_ntop+0x258>
    dc50:	add	r0, r0, #1
    dc54:	cmn	r7, #1
    dc58:	mov	r5, r7
    dc5c:	movweq	r0, #1
    dc60:	movweq	r5, #5
    dc64:	b	dcd8 <rb_inet_ntop+0x2a8>
    dc68:	add	r0, r0, #1
    dc6c:	cmn	r4, #1
    dc70:	mov	r7, r4
    dc74:	movweq	r0, #1
    dc78:	movweq	r7, #4
    dc7c:	mov	r4, r2
    dc80:	cmp	r8, #0
    dc84:	beq	dc50 <rb_inet_ntop+0x220>
    dc88:	mvn	r5, #0
    dc8c:	cmn	r7, #1
    dc90:	beq	dcd8 <rb_inet_ntop+0x2a8>
    dc94:	add	r2, r4, #1
    dc98:	mov	r1, #0
    dc9c:	cmp	r0, r9
    dca0:	clz	r2, r2
    dca4:	movwgt	r1, #1
    dca8:	lsr	r2, r2, #5
    dcac:	orrs	r1, r2, r1
    dcb0:	moveq	r7, r4
    dcb4:	movne	r9, r0
    dcb8:	cmp	r6, #0
    dcbc:	bne	dce4 <rb_inet_ntop+0x2b4>
    dcc0:	add	r0, r0, #1
    dcc4:	cmn	r5, #1
    dcc8:	mov	r1, r5
    dccc:	movweq	r0, #1
    dcd0:	movweq	r1, #6
    dcd4:	b	dd18 <rb_inet_ntop+0x2e8>
    dcd8:	mov	r7, r4
    dcdc:	cmp	r6, #0
    dce0:	beq	dcc0 <rb_inet_ntop+0x290>
    dce4:	mvn	r1, #0
    dce8:	cmn	r5, #1
    dcec:	beq	dd18 <rb_inet_ntop+0x2e8>
    dcf0:	add	r6, r7, #1
    dcf4:	mov	r2, #0
    dcf8:	cmp	r0, r9
    dcfc:	clz	r6, r6
    dd00:	movwgt	r2, #1
    dd04:	lsr	r6, r6, #5
    dd08:	orrs	r2, r6, r2
    dd0c:	moveq	r5, r7
    dd10:	movne	r9, r0
    dd14:	b	dd1c <rb_inet_ntop+0x2ec>
    dd18:	mov	r5, r7
    dd1c:	cmp	lr, #0
    dd20:	str	r3, [sp, #8]
    dd24:	str	sl, [sp]
    dd28:	beq	dd5c <rb_inet_ntop+0x32c>
    dd2c:	cmn	r1, #1
    dd30:	beq	dd9c <rb_inet_ntop+0x36c>
    dd34:	add	r3, r5, #1
    dd38:	mov	r2, #0
    dd3c:	cmp	r0, r9
    dd40:	clz	r3, r3
    dd44:	movwgt	r2, #1
    dd48:	lsr	r3, r3, #5
    dd4c:	orrs	r2, r3, r2
    dd50:	moveq	r1, r5
    dd54:	movne	r9, r0
    dd58:	b	dda0 <rb_inet_ntop+0x370>
    dd5c:	add	r0, r0, #1
    dd60:	cmn	r1, #1
    dd64:	add	r3, r5, #1
    dd68:	mov	r2, #0
    dd6c:	movweq	r0, #1
    dd70:	clz	r3, r3
    dd74:	cmp	r0, r9
    dd78:	lsr	r3, r3, #5
    dd7c:	movwgt	r2, #1
    dd80:	orrs	r2, r3, r2
    dd84:	movne	r9, r0
    dd88:	cmn	r1, #1
    dd8c:	movweq	r1, #7
    dd90:	cmp	r2, #0
    dd94:	moveq	r1, r5
    dd98:	b	dda0 <rb_inet_ntop+0x370>
    dd9c:	mov	r1, r5
    dda0:	str	r9, [sp, #12]
    dda4:	cmn	r1, #1
    dda8:	mov	r6, r1
    ddac:	add	r7, sp, #48	; 0x30
    ddb0:	mov	sl, #58	; 0x3a
    ddb4:	add	r5, sp, #16
    ddb8:	ldr	r4, [pc, #372]	; df34 <rb_inet_ntop+0x504>
    ddbc:	mvnne	r6, #0
    ddc0:	cmp	r9, #2
    ddc4:	movge	r6, r1
    ddc8:	add	r8, r6, r9
    ddcc:	mov	r9, #0
    ddd0:	add	r4, pc, r4
    ddd4:	cmp	r9, r8
    ddd8:	bge	de08 <rb_inet_ntop+0x3d8>
    dddc:	cmn	r6, #1
    dde0:	beq	de08 <rb_inet_ntop+0x3d8>
    dde4:	cmp	r9, r6
    dde8:	blt	de08 <rb_inet_ntop+0x3d8>
    ddec:	cmp	r6, r9
    ddf0:	bne	de34 <rb_inet_ntop+0x404>
    ddf4:	cmp	r6, #0
    ddf8:	moveq	r0, #48	; 0x30
    ddfc:	strbeq	r0, [r7], #1
    de00:	strb	sl, [r7], #1
    de04:	b	de34 <rb_inet_ntop+0x404>
    de08:	cmp	r9, #0
    de0c:	beq	de20 <rb_inet_ntop+0x3f0>
    de10:	cmp	r6, #0
    de14:	strb	sl, [r7], #1
    de18:	cmpeq	r9, #6
    de1c:	beq	de44 <rb_inet_ntop+0x414>
    de20:	ldr	r2, [r5, r9, lsl #2]
    de24:	mov	r0, r7
    de28:	mov	r1, r4
    de2c:	bl	5558 <sprintf@plt>
    de30:	add	r7, r7, r0
    de34:	add	r9, r9, #1
    de38:	cmp	r9, #8
    de3c:	bcc	ddd4 <rb_inet_ntop+0x3a4>
    de40:	b	de98 <rb_inet_ntop+0x468>
    de44:	ldr	r0, [sp, #12]
    de48:	cmp	r0, #5
    de4c:	beq	de5c <rb_inet_ntop+0x42c>
    de50:	cmp	r0, #6
    de54:	bne	de20 <rb_inet_ntop+0x3f0>
    de58:	b	de6c <rb_inet_ntop+0x43c>
    de5c:	ldr	r0, [sp, #36]	; 0x24
    de60:	movw	r1, #65535	; 0xffff
    de64:	cmp	r0, r1
    de68:	bne	de20 <rb_inet_ntop+0x3f0>
    de6c:	add	r0, sp, #48	; 0x30
    de70:	mov	r1, r7
    de74:	add	r0, r0, #46	; 0x2e
    de78:	sub	r2, r0, r7
    de7c:	ldr	r0, [sp]
    de80:	bl	df38 <inet_ntop4>
    de84:	cmp	r0, #0
    de88:	beq	df28 <rb_inet_ntop+0x4f8>
    de8c:	mov	r0, r7
    de90:	bl	5084 <strlen@plt>
    de94:	add	r7, r7, r0
    de98:	cmn	r6, #1
    de9c:	beq	deac <rb_inet_ntop+0x47c>
    dea0:	cmp	r8, #8
    dea4:	moveq	r0, #58	; 0x3a
    dea8:	strbeq	r0, [r7], #1
    deac:	ldr	r3, [sp, #8]
    deb0:	mov	r0, #0
    deb4:	add	r1, sp, #48	; 0x30
    deb8:	strb	r0, [r7], #1
    debc:	sub	r2, r7, r1
    dec0:	cmp	r2, r3
    dec4:	bls	ded0 <rb_inet_ntop+0x4a0>
    dec8:	sub	sp, fp, #28
    decc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ded0:	ldr	r4, [sp, #4]
    ded4:	add	r1, sp, #48	; 0x30
    ded8:	mov	r0, r4
    dedc:	bl	50a8 <memcpy@plt>
    dee0:	mov	r0, r4
    dee4:	sub	sp, fp, #28
    dee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    deec:	ldr	r0, [sl, #8]
    def0:	cmn	r0, #65536	; 0x10000
    def4:	bne	df00 <rb_inet_ntop+0x4d0>
    def8:	add	r0, sl, #12
    defc:	b	da5c <rb_inet_ntop+0x2c>
    df00:	ldr	r0, [sl, #8]
    df04:	mov	r7, #0
    df08:	cmp	r0, #0
    df0c:	bne	da90 <rb_inet_ntop+0x60>
    df10:	mov	r0, sl
    df14:	ldr	r6, [r0, #12]!
    df18:	rev	r6, r6
    df1c:	cmp	r6, #2
    df20:	bcs	da5c <rb_inet_ntop+0x2c>
    df24:	b	da90 <rb_inet_ntop+0x60>
    df28:	mov	r0, #0
    df2c:	sub	sp, fp, #28
    df30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df34:	.word	0x0000b4f5

0000df38 <inet_ntop4>:
    df38:	cmp	r2, #16
    df3c:	movcc	r0, #0
    df40:	bxcc	lr
    df44:	push	{r4, r5, fp, lr}
    df48:	add	fp, sp, #8
    df4c:	ldrb	r2, [r0]
    df50:	ldr	ip, [pc, #240]	; e048 <inet_ntop4+0x110>
    df54:	add	ip, pc, ip
    df58:	ldr	r2, [ip, r2, lsl #2]
    df5c:	ldrb	r3, [r2]
    df60:	cmp	r3, #0
    df64:	beq	df88 <inet_ntop4+0x50>
    df68:	ldr	r4, [pc, #224]	; e050 <inet_ntop4+0x118>
    df6c:	add	r2, r2, #1
    df70:	add	r4, pc, r4
    df74:	strb	r3, [r4], #1
    df78:	ldrb	r3, [r2], #1
    df7c:	cmp	r3, #0
    df80:	bne	df74 <inet_ntop4+0x3c>
    df84:	b	df90 <inet_ntop4+0x58>
    df88:	ldr	r4, [pc, #188]	; e04c <inet_ntop4+0x114>
    df8c:	add	r4, pc, r4
    df90:	mov	lr, #46	; 0x2e
    df94:	mov	r3, r4
    df98:	strb	lr, [r3], #1
    df9c:	ldrb	r2, [r0, #1]
    dfa0:	ldr	r5, [ip, r2, lsl #2]
    dfa4:	ldrb	r2, [r5]
    dfa8:	cmp	r2, #0
    dfac:	beq	dfc8 <inet_ntop4+0x90>
    dfb0:	add	r4, r5, #1
    dfb4:	strb	r2, [r3], #1
    dfb8:	ldrb	r2, [r4], #1
    dfbc:	cmp	r2, #0
    dfc0:	bne	dfb4 <inet_ntop4+0x7c>
    dfc4:	sub	r4, r3, #1
    dfc8:	strb	lr, [r3]
    dfcc:	add	r3, r4, #2
    dfd0:	ldrb	r2, [r0, #2]
    dfd4:	ldr	lr, [ip, r2, lsl #2]
    dfd8:	ldrb	r2, [lr]
    dfdc:	cmp	r2, #0
    dfe0:	beq	dff8 <inet_ntop4+0xc0>
    dfe4:	add	r4, lr, #1
    dfe8:	strb	r2, [r3], #1
    dfec:	ldrb	r2, [r4], #1
    dff0:	cmp	r2, #0
    dff4:	bne	dfe8 <inet_ntop4+0xb0>
    dff8:	mov	r2, #46	; 0x2e
    dffc:	strb	r2, [r3], #1
    e000:	ldrb	r0, [r0, #3]
    e004:	ldr	r2, [ip, r0, lsl #2]
    e008:	ldrb	r0, [r2]
    e00c:	cmp	r0, #0
    e010:	pop	{r4, r5, fp, lr}
    e014:	beq	e02c <inet_ntop4+0xf4>
    e018:	add	r2, r2, #1
    e01c:	strb	r0, [r3], #1
    e020:	ldrb	r0, [r2], #1
    e024:	cmp	r0, #0
    e028:	bne	e01c <inet_ntop4+0xe4>
    e02c:	mov	r0, #0
    e030:	strb	r0, [r3]
    e034:	mov	r0, r1
    e038:	ldr	r2, [pc, #20]	; e054 <inet_ntop4+0x11c>
    e03c:	add	r2, pc, r2
    e040:	mov	r1, r2
    e044:	b	512c <strcpy@plt>
    e048:	.word	0x0001cafc
    e04c:	.word	0x0002f9d4
    e050:	.word	0x0002f9f0
    e054:	.word	0x0002f924

0000e058 <inet_pton6>:
    e058:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e05c:	add	fp, sp, #28
    e060:	sub	sp, sp, #36	; 0x24
    e064:	mov	sl, r0
    e068:	add	r0, sp, #16
    e06c:	vmov.i32	q8, #0	; 0x00000000
    e070:	str	r1, [sp]
    e074:	str	r0, [sp, #12]
    e078:	vst1.64	{d16-d17}, [r0]!
    e07c:	ldrb	r4, [sl]
    e080:	str	r0, [sp, #4]
    e084:	cmp	r4, #58	; 0x3a
    e088:	bne	e09c <inet_pton6+0x44>
    e08c:	ldrb	r1, [sl, #1]!
    e090:	mov	r0, #0
    e094:	cmp	r1, #58	; 0x3a
    e098:	bne	e2d8 <inet_pton6+0x280>
    e09c:	bl	50cc <__ctype_tolower_loc@plt>
    e0a0:	mov	r6, r0
    e0a4:	ldr	r0, [r0]
    e0a8:	ldr	r4, [r0, r4, lsl #2]
    e0ac:	cmp	r4, #0
    e0b0:	beq	e1dc <inet_pton6+0x184>
    e0b4:	add	r0, sp, #16
    e0b8:	add	r5, sl, #1
    e0bc:	mov	r8, #0
    e0c0:	mov	r9, #0
    e0c4:	str	r0, [sp, #12]
    e0c8:	mov	r0, #0
    e0cc:	ldr	r7, [pc, #836]	; e418 <inet_pton6+0x3c0>
    e0d0:	str	r0, [sp, #8]
    e0d4:	add	r7, pc, r7
    e0d8:	mov	r0, r7
    e0dc:	mov	r1, r4
    e0e0:	mov	r2, #17
    e0e4:	bl	551c <memchr@plt>
    e0e8:	cmp	r0, #0
    e0ec:	beq	e130 <inet_pton6+0xd8>
    e0f0:	sub	r0, r0, r7
    e0f4:	mov	r1, #2
    e0f8:	orr	r8, r0, r8, lsl #4
    e0fc:	mov	r0, #0
    e100:	cmp	r0, r8, lsr #16
    e104:	mov	r0, #1
    e108:	moveq	r9, r0
    e10c:	movwne	r1, #1
    e110:	cmp	r1, #2
    e114:	bne	e1cc <inet_pton6+0x174>
    e118:	ldrb	r0, [r5], #1
    e11c:	ldr	r1, [r6]
    e120:	ldr	r4, [r1, r0, lsl #2]
    e124:	cmp	r4, #0
    e128:	bne	e0d8 <inet_pton6+0x80>
    e12c:	b	e1ec <inet_pton6+0x194>
    e130:	cmp	r4, #58	; 0x3a
    e134:	bne	e188 <inet_pton6+0x130>
    e138:	cmp	r9, #0
    e13c:	beq	e1a0 <inet_pton6+0x148>
    e140:	ldr	r0, [sp, #12]
    e144:	ldr	r2, [sp, #4]
    e148:	add	r1, r0, #2
    e14c:	mov	r0, #0
    e150:	cmp	r1, r2
    e154:	bhi	e2d8 <inet_pton6+0x280>
    e158:	ldrb	r2, [r5]
    e15c:	cmp	r2, #0
    e160:	beq	e2d8 <inet_pton6+0x280>
    e164:	ldr	r2, [sp, #12]
    e168:	lsr	r0, r8, #8
    e16c:	mov	r9, #0
    e170:	mov	sl, r5
    e174:	str	r1, [sp, #12]
    e178:	strb	r8, [r2, #1]
    e17c:	mov	r8, #0
    e180:	strb	r0, [r2]
    e184:	b	e118 <inet_pton6+0xc0>
    e188:	cmp	r4, #46	; 0x2e
    e18c:	bne	e118 <inet_pton6+0xc0>
    e190:	ldrb	r0, [r5]
    e194:	cmp	r0, #0
    e198:	beq	e118 <inet_pton6+0xc0>
    e19c:	b	e2e0 <inet_pton6+0x288>
    e1a0:	ldr	r0, [sp, #8]
    e1a4:	ldr	r1, [sp, #12]
    e1a8:	mov	r9, #0
    e1ac:	mov	sl, r5
    e1b0:	cmp	r0, #0
    e1b4:	moveq	r0, r1
    e1b8:	mov	r1, #1
    e1bc:	str	r0, [sp, #8]
    e1c0:	movweq	r1, #2
    e1c4:	cmp	r1, #2
    e1c8:	beq	e118 <inet_pton6+0xc0>
    e1cc:	mov	r0, #0
    e1d0:	cmp	r1, #3
    e1d4:	beq	e1ec <inet_pton6+0x194>
    e1d8:	b	e2d8 <inet_pton6+0x280>
    e1dc:	mov	r0, #0
    e1e0:	mov	r9, #0
    e1e4:	mov	r8, #0
    e1e8:	str	r0, [sp, #8]
    e1ec:	cmp	r9, #0
    e1f0:	beq	e220 <inet_pton6+0x1c8>
    e1f4:	ldr	r0, [sp, #12]
    e1f8:	ldr	r2, [sp, #4]
    e1fc:	add	r1, r0, #2
    e200:	mov	r0, #0
    e204:	cmp	r1, r2
    e208:	bhi	e2d8 <inet_pton6+0x280>
    e20c:	ldr	r2, [sp, #12]
    e210:	lsr	r0, r8, #8
    e214:	strb	r8, [r2, #1]
    e218:	strb	r0, [r2]
    e21c:	b	e224 <inet_pton6+0x1cc>
    e220:	ldr	r1, [sp, #12]
    e224:	ldr	r0, [sp, #8]
    e228:	cmp	r0, #0
    e22c:	beq	e2b4 <inet_pton6+0x25c>
    e230:	ldr	r2, [sp, #4]
    e234:	cmp	r1, r2
    e238:	beq	e3a8 <inet_pton6+0x350>
    e23c:	sub	r2, r1, r0
    e240:	cmp	r2, #1
    e244:	blt	e2c4 <inet_pton6+0x26c>
    e248:	mov	r0, #1
    e24c:	cmp	r2, #16
    e250:	bcc	e278 <inet_pton6+0x220>
    e254:	ldr	r5, [sp, #8]
    e258:	mvn	r3, r5
    e25c:	add	r7, r3, r1
    e260:	add	r3, sp, #16
    e264:	add	r6, r3, #15
    e268:	cmp	r7, r6
    e26c:	addls	r6, r5, r7
    e270:	cmpls	r7, r6
    e274:	bls	e3b4 <inet_pton6+0x35c>
    e278:	ldr	r2, [sp, #8]
    e27c:	ldr	r7, [sp, #8]
    e280:	add	r2, r0, r2
    e284:	sub	r1, r2, r1
    e288:	add	r2, sp, #16
    e28c:	sub	r0, r2, r0
    e290:	mov	r2, #0
    e294:	add	r0, r0, #16
    e298:	ldrb	r3, [r7, -r1]
    e29c:	strb	r3, [r0], #-1
    e2a0:	strb	r2, [r7, -r1]
    e2a4:	add	r1, r1, #1
    e2a8:	cmp	r1, #1
    e2ac:	bne	e298 <inet_pton6+0x240>
    e2b0:	b	e2c4 <inet_pton6+0x26c>
    e2b4:	ldr	r2, [sp, #4]
    e2b8:	mov	r0, #0
    e2bc:	cmp	r1, r2
    e2c0:	bne	e2d8 <inet_pton6+0x280>
    e2c4:	add	r0, sp, #16
    e2c8:	vld1.64	{d16-d17}, [r0]
    e2cc:	ldr	r0, [sp]
    e2d0:	vst1.8	{d16-d17}, [r0]
    e2d4:	mov	r0, #1
    e2d8:	sub	sp, fp, #28
    e2dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e2e0:	ldr	r0, [sp, #12]
    e2e4:	ldr	r2, [sp, #4]
    e2e8:	add	r1, r0, #4
    e2ec:	mov	r0, #0
    e2f0:	cmp	r1, r2
    e2f4:	bhi	e2d8 <inet_pton6+0x280>
    e2f8:	mov	r7, #0
    e2fc:	strb	r7, [sp, #32]
    e300:	ldrb	r5, [sl]
    e304:	cmp	r5, #0
    e308:	beq	e3a8 <inet_pton6+0x350>
    e30c:	add	r0, sl, #1
    e310:	add	r2, sp, #32
    e314:	mov	r3, #0
    e318:	mov	r6, #0
    e31c:	sub	r4, r5, #48	; 0x30
    e320:	uxtb	r4, r4
    e324:	cmp	r4, #9
    e328:	bhi	e36c <inet_pton6+0x314>
    e32c:	uxtb	r4, r7
    e330:	lsl	r4, r4, #2
    e334:	uxtab	r7, r4, r7
    e338:	lsl	r7, r7, #1
    e33c:	uxtab	r7, r7, r5
    e340:	sub	r7, r7, #48	; 0x30
    e344:	cmp	r7, #255	; 0xff
    e348:	bhi	e3a8 <inet_pton6+0x350>
    e34c:	cmp	r6, #0
    e350:	strb	r7, [r2]
    e354:	bne	e394 <inet_pton6+0x33c>
    e358:	cmp	r3, #3
    e35c:	bgt	e3a8 <inet_pton6+0x350>
    e360:	add	r3, r3, #1
    e364:	mov	r6, #1
    e368:	b	e394 <inet_pton6+0x33c>
    e36c:	cmp	r3, #4
    e370:	beq	e3a8 <inet_pton6+0x350>
    e374:	uxtb	r7, r5
    e378:	cmp	r7, #46	; 0x2e
    e37c:	bne	e3a8 <inet_pton6+0x350>
    e380:	cmp	r6, #0
    e384:	beq	e3a8 <inet_pton6+0x350>
    e388:	mov	r7, #0
    e38c:	mov	r6, #0
    e390:	strb	r7, [r2, #1]!
    e394:	ldrb	r5, [r0], #1
    e398:	cmp	r5, #0
    e39c:	bne	e31c <inet_pton6+0x2c4>
    e3a0:	cmp	r3, #3
    e3a4:	bgt	e408 <inet_pton6+0x3b0>
    e3a8:	mov	r0, #0
    e3ac:	sub	sp, fp, #28
    e3b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e3b4:	sub	r6, r5, r1
    e3b8:	add	r7, r3, #16
    e3bc:	add	r6, r7, r6
    e3c0:	cmp	r6, r1
    e3c4:	ldrcc	r6, [sp, #8]
    e3c8:	cmpcc	r6, r7
    e3cc:	bcc	e278 <inet_pton6+0x220>
    e3d0:	bic	r4, r2, #15
    e3d4:	sub	r6, r1, #16
    e3d8:	mvn	r5, #15
    e3dc:	vmov.i32	q8, #0	; 0x00000000
    e3e0:	orr	r0, r4, #1
    e3e4:	mov	r7, r4
    e3e8:	vld1.8	{d18-d19}, [r6]
    e3ec:	subs	r7, r7, #16
    e3f0:	vst1.8	{d18-d19}, [r3], r5
    e3f4:	vst1.8	{d16-d17}, [r6], r5
    e3f8:	bne	e3e8 <inet_pton6+0x390>
    e3fc:	cmp	r2, r4
    e400:	bne	e278 <inet_pton6+0x220>
    e404:	b	e2c4 <inet_pton6+0x26c>
    e408:	ldr	r0, [sp, #32]
    e40c:	ldr	r2, [sp, #12]
    e410:	str	r0, [r2]
    e414:	b	e224 <inet_pton6+0x1cc>
    e418:	.word	0x0000b1f9

0000e41c <rb_get_iotype>:
    e41c:	ldr	r0, [pc, #4]	; e428 <rb_get_iotype+0xc>
    e420:	add	r0, pc, r0
    e424:	bx	lr
    e428:	.word	0x0002f4fc

0000e42c <rb_io_sched_event>:
    e42c:	push	{r4, r5, fp, lr}
    e430:	add	fp, sp, #8
    e434:	cmp	r0, #0
    e438:	beq	e460 <rb_io_sched_event+0x34>
    e43c:	mov	r5, r0
    e440:	ldr	r0, [pc, #68]	; e48c <rb_io_sched_event+0x60>
    e444:	ldr	r0, [pc, r0]
    e448:	cmp	r0, #0
    e44c:	movne	r4, r1
    e450:	ldrne	r1, [pc, #56]	; e490 <rb_io_sched_event+0x64>
    e454:	ldrne	r1, [pc, r1]
    e458:	cmpne	r1, #0
    e45c:	bne	e468 <rb_io_sched_event+0x3c>
    e460:	mov	r0, #0
    e464:	pop	{r4, r5, fp, pc}
    e468:	blx	r0
    e46c:	cmp	r0, #0
    e470:	beq	e460 <rb_io_sched_event+0x34>
    e474:	ldr	r2, [pc, #24]	; e494 <rb_io_sched_event+0x68>
    e478:	mov	r0, r5
    e47c:	mov	r1, r4
    e480:	ldr	r2, [pc, r2]
    e484:	pop	{r4, r5, fp, lr}
    e488:	bx	r2
    e48c:	.word	0x0002f4f4
    e490:	.word	0x0002f4e8
    e494:	.word	0x0002f4bc

0000e498 <rb_io_unsched_event>:
    e498:	push	{r4, sl, fp, lr}
    e49c:	add	fp, sp, #8
    e4a0:	cmp	r0, #0
    e4a4:	beq	e4c8 <rb_io_unsched_event+0x30>
    e4a8:	mov	r4, r0
    e4ac:	ldr	r0, [pc, #56]	; e4ec <rb_io_unsched_event+0x54>
    e4b0:	ldr	r0, [pc, r0]
    e4b4:	cmp	r0, #0
    e4b8:	ldrne	r1, [pc, #48]	; e4f0 <rb_io_unsched_event+0x58>
    e4bc:	ldrne	r1, [pc, r1]
    e4c0:	cmpne	r1, #0
    e4c4:	bne	e4cc <rb_io_unsched_event+0x34>
    e4c8:	pop	{r4, sl, fp, pc}
    e4cc:	blx	r0
    e4d0:	cmp	r0, #0
    e4d4:	popeq	{r4, sl, fp, pc}
    e4d8:	ldr	r1, [pc, #20]	; e4f4 <rb_io_unsched_event+0x5c>
    e4dc:	mov	r0, r4
    e4e0:	ldr	r1, [pc, r1]
    e4e4:	pop	{r4, sl, fp, lr}
    e4e8:	bx	r1
    e4ec:	.word	0x0002f488
    e4f0:	.word	0x0002f484
    e4f4:	.word	0x0002f460

0000e4f8 <rb_io_supports_event>:
    e4f8:	ldr	r0, [pc, #16]	; e510 <rb_io_supports_event+0x18>
    e4fc:	ldr	r0, [pc, r0]
    e500:	cmp	r0, #0
    e504:	moveq	r0, #0
    e508:	bxeq	lr
    e50c:	bx	r0
    e510:	.word	0x0002f43c

0000e514 <rb_io_init_event>:
    e514:	push	{fp, lr}
    e518:	mov	fp, sp
    e51c:	ldr	r0, [pc, #12]	; e530 <rb_io_init_event+0x1c>
    e520:	ldr	r0, [pc, r0]
    e524:	blx	r0
    e528:	pop	{fp, lr}
    e52c:	b	1099c <rb_event_io_register_all>
    e530:	.word	0x0002f424

0000e534 <rb_init_netio>:
    e534:	push	{r4, sl, fp, lr}
    e538:	add	fp, sp, #8
    e53c:	ldr	r0, [pc, #1688]	; ebdc <rb_init_netio+0x6a8>
    e540:	add	r0, pc, r0
    e544:	bl	4e5c <getenv@plt>
    e548:	mov	r4, r0
    e54c:	mov	r0, #1
    e550:	mov	r1, #49152	; 0xc000
    e554:	bl	4ea4 <calloc@plt>
    e558:	cmp	r0, #0
    e55c:	beq	ebc8 <rb_init_netio+0x694>
    e560:	ldr	r1, [pc, #1656]	; ebe0 <rb_init_netio+0x6ac>
    e564:	ldr	r1, [pc, r1]
    e568:	str	r0, [r1]
    e56c:	bl	f260 <rb_init_ssl>
    e570:	cmp	r4, #0
    e574:	beq	e6b0 <rb_init_netio+0x17c>
    e578:	ldr	r0, [pc, #1636]	; ebe4 <rb_init_netio+0x6b0>
    e57c:	mov	r1, r4
    e580:	add	r0, pc, r0
    e584:	bl	5534 <strcmp@plt>
    e588:	cmp	r0, #0
    e58c:	beq	e630 <rb_init_netio+0xfc>
    e590:	ldr	r0, [pc, #1680]	; ec28 <rb_init_netio+0x6f4>
    e594:	mov	r1, r4
    e598:	add	r0, pc, r0
    e59c:	bl	5534 <strcmp@plt>
    e5a0:	cmp	r0, #0
    e5a4:	beq	e640 <rb_init_netio+0x10c>
    e5a8:	ldr	r0, [pc, #1724]	; ec6c <rb_init_netio+0x738>
    e5ac:	mov	r1, r4
    e5b0:	add	r0, pc, r0
    e5b4:	bl	5534 <strcmp@plt>
    e5b8:	cmp	r0, #0
    e5bc:	beq	e650 <rb_init_netio+0x11c>
    e5c0:	ldr	r0, [pc, #1768]	; ecb0 <rb_init_netio+0x77c>
    e5c4:	mov	r1, r4
    e5c8:	add	r0, pc, r0
    e5cc:	bl	5534 <strcmp@plt>
    e5d0:	cmp	r0, #0
    e5d4:	beq	e660 <rb_init_netio+0x12c>
    e5d8:	ldr	r0, [pc, #1800]	; ece8 <rb_init_netio+0x7b4>
    e5dc:	mov	r1, r4
    e5e0:	add	r0, pc, r0
    e5e4:	bl	5534 <strcmp@plt>
    e5e8:	cmp	r0, #0
    e5ec:	beq	e670 <rb_init_netio+0x13c>
    e5f0:	ldr	r0, [pc, #1832]	; ed20 <rb_init_netio+0x7ec>
    e5f4:	mov	r1, r4
    e5f8:	add	r0, pc, r0
    e5fc:	bl	5534 <strcmp@plt>
    e600:	cmp	r0, #0
    e604:	beq	e680 <rb_init_netio+0x14c>
    e608:	ldr	r0, [pc, #1876]	; ed64 <rb_init_netio+0x830>
    e60c:	mov	r1, r4
    e610:	add	r0, pc, r0
    e614:	bl	5534 <strcmp@plt>
    e618:	cmp	r0, #0
    e61c:	bne	e68c <rb_init_netio+0x158>
    e620:	bl	147a0 <rb_init_netio_select>
    e624:	cmp	r0, #0
    e628:	bne	e68c <rb_init_netio+0x158>
    e62c:	b	e710 <rb_init_netio+0x1dc>
    e630:	bl	12e84 <rb_init_netio_epoll>
    e634:	cmp	r0, #0
    e638:	bne	e68c <rb_init_netio+0x158>
    e63c:	b	e83c <rb_init_netio+0x308>
    e640:	bl	14e60 <rb_init_netio_kqueue>
    e644:	cmp	r0, #0
    e648:	bne	e68c <rb_init_netio+0x158>
    e64c:	b	e79c <rb_init_netio+0x268>
    e650:	bl	13d68 <rb_init_netio_ports>
    e654:	cmp	r0, #0
    e658:	bne	e68c <rb_init_netio+0x158>
    e65c:	b	e8dc <rb_init_netio+0x3a8>
    e660:	bl	13920 <rb_init_netio_poll>
    e664:	cmp	r0, #0
    e668:	bne	e68c <rb_init_netio+0x158>
    e66c:	b	eb34 <rb_init_netio+0x600>
    e670:	bl	12e2c <rb_init_netio_devpoll>
    e674:	cmp	r0, #0
    e678:	bne	e68c <rb_init_netio+0x158>
    e67c:	b	e97c <rb_init_netio+0x448>
    e680:	bl	13dc0 <rb_init_netio_sigio>
    e684:	cmp	r0, #0
    e688:	beq	ea94 <rb_init_netio+0x560>
    e68c:	ldr	r0, [pc, #1800]	; ed9c <rb_init_netio+0x868>
    e690:	mov	r1, r4
    e694:	add	r0, pc, r0
    e698:	bl	5534 <strcmp@plt>
    e69c:	cmp	r0, #0
    e6a0:	bne	e6b0 <rb_init_netio+0x17c>
    e6a4:	bl	57b4 <rb_init_netio_win32>
    e6a8:	cmp	r0, #0
    e6ac:	beq	ea08 <rb_init_netio+0x4d4>
    e6b0:	bl	14e60 <rb_init_netio_kqueue>
    e6b4:	cmp	r0, #0
    e6b8:	beq	e79c <rb_init_netio+0x268>
    e6bc:	bl	12e84 <rb_init_netio_epoll>
    e6c0:	cmp	r0, #0
    e6c4:	beq	e83c <rb_init_netio+0x308>
    e6c8:	bl	13d68 <rb_init_netio_ports>
    e6cc:	cmp	r0, #0
    e6d0:	beq	e8dc <rb_init_netio+0x3a8>
    e6d4:	bl	12e2c <rb_init_netio_devpoll>
    e6d8:	cmp	r0, #0
    e6dc:	beq	e97c <rb_init_netio+0x448>
    e6e0:	bl	13dc0 <rb_init_netio_sigio>
    e6e4:	cmp	r0, #0
    e6e8:	beq	ea94 <rb_init_netio+0x560>
    e6ec:	bl	13920 <rb_init_netio_poll>
    e6f0:	cmp	r0, #0
    e6f4:	beq	eb34 <rb_init_netio+0x600>
    e6f8:	bl	57b4 <rb_init_netio_win32>
    e6fc:	cmp	r0, #0
    e700:	beq	ea08 <rb_init_netio+0x4d4>
    e704:	bl	147a0 <rb_init_netio_select>
    e708:	cmp	r0, #0
    e70c:	bne	ebcc <rb_init_netio+0x698>
    e710:	ldr	r0, [pc, #1616]	; ed68 <rb_init_netio+0x834>
    e714:	mov	r1, #0
    e718:	add	r0, pc, r0
    e71c:	str	r1, [r0]
    e720:	ldr	r0, [pc, #1604]	; ed6c <rb_init_netio+0x838>
    e724:	add	r0, pc, r0
    e728:	str	r1, [r0]
    e72c:	ldr	r0, [pc, #1596]	; ed70 <rb_init_netio+0x83c>
    e730:	add	r0, pc, r0
    e734:	str	r1, [r0]
    e738:	ldr	r0, [pc, #1588]	; ed74 <rb_init_netio+0x840>
    e73c:	ldr	r1, [pc, #1588]	; ed78 <rb_init_netio+0x844>
    e740:	add	r0, pc, r0
    e744:	add	r1, pc, r1
    e748:	str	r1, [r0]
    e74c:	ldr	r0, [pc, #1576]	; ed7c <rb_init_netio+0x848>
    e750:	ldr	r0, [pc, r0]
    e754:	ldr	r1, [pc, #1572]	; ed80 <rb_init_netio+0x84c>
    e758:	add	r1, pc, r1
    e75c:	str	r0, [r1]
    e760:	ldr	r0, [pc, #1564]	; ed84 <rb_init_netio+0x850>
    e764:	ldr	r0, [pc, r0]
    e768:	ldr	r1, [pc, #1560]	; ed88 <rb_init_netio+0x854>
    e76c:	add	r1, pc, r1
    e770:	str	r0, [r1]
    e774:	ldr	r0, [pc, #1552]	; ed8c <rb_init_netio+0x858>
    e778:	ldr	r0, [pc, r0]
    e77c:	ldr	r1, [pc, #1548]	; ed90 <rb_init_netio+0x85c>
    e780:	add	r1, pc, r1
    e784:	str	r0, [r1]
    e788:	ldr	r0, [pc, #1540]	; ed94 <rb_init_netio+0x860>
    e78c:	ldr	r1, [pc, #1540]	; ed98 <rb_init_netio+0x864>
    e790:	add	r0, pc, r0
    e794:	add	r1, pc, r1
    e798:	b	ebbc <rb_init_netio+0x688>
    e79c:	ldr	r0, [pc, #1160]	; ec2c <rb_init_netio+0x6f8>
    e7a0:	ldr	r0, [pc, r0]
    e7a4:	ldr	r1, [pc, #1156]	; ec30 <rb_init_netio+0x6fc>
    e7a8:	add	r1, pc, r1
    e7ac:	str	r0, [r1]
    e7b0:	ldr	r0, [pc, #1148]	; ec34 <rb_init_netio+0x700>
    e7b4:	ldr	r0, [pc, r0]
    e7b8:	ldr	r1, [pc, #1144]	; ec38 <rb_init_netio+0x704>
    e7bc:	add	r1, pc, r1
    e7c0:	str	r0, [r1]
    e7c4:	ldr	r0, [pc, #1136]	; ec3c <rb_init_netio+0x708>
    e7c8:	ldr	r0, [pc, r0]
    e7cc:	ldr	r1, [pc, #1132]	; ec40 <rb_init_netio+0x70c>
    e7d0:	add	r1, pc, r1
    e7d4:	str	r0, [r1]
    e7d8:	ldr	r0, [pc, #1124]	; ec44 <rb_init_netio+0x710>
    e7dc:	ldr	r0, [pc, r0]
    e7e0:	ldr	r1, [pc, #1120]	; ec48 <rb_init_netio+0x714>
    e7e4:	add	r1, pc, r1
    e7e8:	str	r0, [r1]
    e7ec:	ldr	r0, [pc, #1112]	; ec4c <rb_init_netio+0x718>
    e7f0:	ldr	r0, [pc, r0]
    e7f4:	ldr	r1, [pc, #1108]	; ec50 <rb_init_netio+0x71c>
    e7f8:	add	r1, pc, r1
    e7fc:	str	r0, [r1]
    e800:	ldr	r0, [pc, #1100]	; ec54 <rb_init_netio+0x720>
    e804:	ldr	r0, [pc, r0]
    e808:	ldr	r1, [pc, #1096]	; ec58 <rb_init_netio+0x724>
    e80c:	add	r1, pc, r1
    e810:	str	r0, [r1]
    e814:	ldr	r0, [pc, #1088]	; ec5c <rb_init_netio+0x728>
    e818:	ldr	r0, [pc, r0]
    e81c:	ldr	r1, [pc, #1084]	; ec60 <rb_init_netio+0x72c>
    e820:	add	r1, pc, r1
    e824:	str	r0, [r1]
    e828:	ldr	r0, [pc, #1076]	; ec64 <rb_init_netio+0x730>
    e82c:	ldr	r1, [pc, #1076]	; ec68 <rb_init_netio+0x734>
    e830:	add	r0, pc, r0
    e834:	add	r1, pc, r1
    e838:	b	ebbc <rb_init_netio+0x688>
    e83c:	ldr	r0, [pc, #932]	; ebe8 <rb_init_netio+0x6b4>
    e840:	ldr	r0, [pc, r0]
    e844:	ldr	r1, [pc, #928]	; ebec <rb_init_netio+0x6b8>
    e848:	add	r1, pc, r1
    e84c:	str	r0, [r1]
    e850:	ldr	r0, [pc, #920]	; ebf0 <rb_init_netio+0x6bc>
    e854:	ldr	r0, [pc, r0]
    e858:	ldr	r1, [pc, #916]	; ebf4 <rb_init_netio+0x6c0>
    e85c:	add	r1, pc, r1
    e860:	str	r0, [r1]
    e864:	ldr	r0, [pc, #908]	; ebf8 <rb_init_netio+0x6c4>
    e868:	ldr	r0, [pc, r0]
    e86c:	ldr	r1, [pc, #904]	; ebfc <rb_init_netio+0x6c8>
    e870:	add	r1, pc, r1
    e874:	str	r0, [r1]
    e878:	ldr	r0, [pc, #896]	; ec00 <rb_init_netio+0x6cc>
    e87c:	ldr	r0, [pc, r0]
    e880:	ldr	r1, [pc, #892]	; ec04 <rb_init_netio+0x6d0>
    e884:	add	r1, pc, r1
    e888:	str	r0, [r1]
    e88c:	ldr	r0, [pc, #884]	; ec08 <rb_init_netio+0x6d4>
    e890:	ldr	r0, [pc, r0]
    e894:	ldr	r1, [pc, #880]	; ec0c <rb_init_netio+0x6d8>
    e898:	add	r1, pc, r1
    e89c:	str	r0, [r1]
    e8a0:	ldr	r0, [pc, #872]	; ec10 <rb_init_netio+0x6dc>
    e8a4:	ldr	r0, [pc, r0]
    e8a8:	ldr	r1, [pc, #868]	; ec14 <rb_init_netio+0x6e0>
    e8ac:	add	r1, pc, r1
    e8b0:	str	r0, [r1]
    e8b4:	ldr	r0, [pc, #860]	; ec18 <rb_init_netio+0x6e4>
    e8b8:	ldr	r0, [pc, r0]
    e8bc:	ldr	r1, [pc, #856]	; ec1c <rb_init_netio+0x6e8>
    e8c0:	add	r1, pc, r1
    e8c4:	str	r0, [r1]
    e8c8:	ldr	r0, [pc, #848]	; ec20 <rb_init_netio+0x6ec>
    e8cc:	ldr	r1, [pc, #848]	; ec24 <rb_init_netio+0x6f0>
    e8d0:	add	r0, pc, r0
    e8d4:	add	r1, pc, r1
    e8d8:	b	ebbc <rb_init_netio+0x688>
    e8dc:	ldr	r0, [pc, #908]	; ec70 <rb_init_netio+0x73c>
    e8e0:	ldr	r0, [pc, r0]
    e8e4:	ldr	r1, [pc, #904]	; ec74 <rb_init_netio+0x740>
    e8e8:	add	r1, pc, r1
    e8ec:	str	r0, [r1]
    e8f0:	ldr	r0, [pc, #896]	; ec78 <rb_init_netio+0x744>
    e8f4:	ldr	r0, [pc, r0]
    e8f8:	ldr	r1, [pc, #892]	; ec7c <rb_init_netio+0x748>
    e8fc:	add	r1, pc, r1
    e900:	str	r0, [r1]
    e904:	ldr	r0, [pc, #884]	; ec80 <rb_init_netio+0x74c>
    e908:	ldr	r0, [pc, r0]
    e90c:	ldr	r1, [pc, #880]	; ec84 <rb_init_netio+0x750>
    e910:	add	r1, pc, r1
    e914:	str	r0, [r1]
    e918:	ldr	r0, [pc, #872]	; ec88 <rb_init_netio+0x754>
    e91c:	ldr	r0, [pc, r0]
    e920:	ldr	r1, [pc, #868]	; ec8c <rb_init_netio+0x758>
    e924:	add	r1, pc, r1
    e928:	str	r0, [r1]
    e92c:	ldr	r0, [pc, #860]	; ec90 <rb_init_netio+0x75c>
    e930:	ldr	r0, [pc, r0]
    e934:	ldr	r1, [pc, #856]	; ec94 <rb_init_netio+0x760>
    e938:	add	r1, pc, r1
    e93c:	str	r0, [r1]
    e940:	ldr	r0, [pc, #848]	; ec98 <rb_init_netio+0x764>
    e944:	ldr	r0, [pc, r0]
    e948:	ldr	r1, [pc, #844]	; ec9c <rb_init_netio+0x768>
    e94c:	add	r1, pc, r1
    e950:	str	r0, [r1]
    e954:	ldr	r0, [pc, #836]	; eca0 <rb_init_netio+0x76c>
    e958:	ldr	r0, [pc, r0]
    e95c:	ldr	r1, [pc, #832]	; eca4 <rb_init_netio+0x770>
    e960:	add	r1, pc, r1
    e964:	str	r0, [r1]
    e968:	ldr	r0, [pc, #824]	; eca8 <rb_init_netio+0x774>
    e96c:	ldr	r1, [pc, #824]	; ecac <rb_init_netio+0x778>
    e970:	add	r0, pc, r0
    e974:	add	r1, pc, r1
    e978:	b	ebbc <rb_init_netio+0x688>
    e97c:	ldr	r0, [pc, #872]	; ecec <rb_init_netio+0x7b8>
    e980:	mov	r1, #0
    e984:	add	r0, pc, r0
    e988:	str	r1, [r0]
    e98c:	ldr	r0, [pc, #860]	; ecf0 <rb_init_netio+0x7bc>
    e990:	add	r0, pc, r0
    e994:	str	r1, [r0]
    e998:	ldr	r0, [pc, #852]	; ecf4 <rb_init_netio+0x7c0>
    e99c:	add	r0, pc, r0
    e9a0:	str	r1, [r0]
    e9a4:	ldr	r0, [pc, #844]	; ecf8 <rb_init_netio+0x7c4>
    e9a8:	ldr	r1, [pc, #844]	; ecfc <rb_init_netio+0x7c8>
    e9ac:	add	r0, pc, r0
    e9b0:	add	r1, pc, r1
    e9b4:	str	r1, [r0]
    e9b8:	ldr	r0, [pc, #832]	; ed00 <rb_init_netio+0x7cc>
    e9bc:	ldr	r0, [pc, r0]
    e9c0:	ldr	r1, [pc, #828]	; ed04 <rb_init_netio+0x7d0>
    e9c4:	add	r1, pc, r1
    e9c8:	str	r0, [r1]
    e9cc:	ldr	r0, [pc, #820]	; ed08 <rb_init_netio+0x7d4>
    e9d0:	ldr	r0, [pc, r0]
    e9d4:	ldr	r1, [pc, #816]	; ed0c <rb_init_netio+0x7d8>
    e9d8:	add	r1, pc, r1
    e9dc:	str	r0, [r1]
    e9e0:	ldr	r0, [pc, #808]	; ed10 <rb_init_netio+0x7dc>
    e9e4:	ldr	r0, [pc, r0]
    e9e8:	ldr	r1, [pc, #804]	; ed14 <rb_init_netio+0x7e0>
    e9ec:	add	r1, pc, r1
    e9f0:	str	r0, [r1]
    e9f4:	ldr	r0, [pc, #796]	; ed18 <rb_init_netio+0x7e4>
    e9f8:	ldr	r1, [pc, #796]	; ed1c <rb_init_netio+0x7e8>
    e9fc:	add	r0, pc, r0
    ea00:	add	r1, pc, r1
    ea04:	b	ebbc <rb_init_netio+0x688>
    ea08:	ldr	r0, [pc, #912]	; eda0 <rb_init_netio+0x86c>
    ea0c:	mov	r1, #0
    ea10:	add	r0, pc, r0
    ea14:	str	r1, [r0]
    ea18:	ldr	r0, [pc, #900]	; eda4 <rb_init_netio+0x870>
    ea1c:	add	r0, pc, r0
    ea20:	str	r1, [r0]
    ea24:	ldr	r0, [pc, #892]	; eda8 <rb_init_netio+0x874>
    ea28:	add	r0, pc, r0
    ea2c:	str	r1, [r0]
    ea30:	ldr	r0, [pc, #884]	; edac <rb_init_netio+0x878>
    ea34:	ldr	r1, [pc, #884]	; edb0 <rb_init_netio+0x87c>
    ea38:	add	r0, pc, r0
    ea3c:	add	r1, pc, r1
    ea40:	str	r1, [r0]
    ea44:	ldr	r0, [pc, #872]	; edb4 <rb_init_netio+0x880>
    ea48:	ldr	r0, [pc, r0]
    ea4c:	ldr	r1, [pc, #868]	; edb8 <rb_init_netio+0x884>
    ea50:	add	r1, pc, r1
    ea54:	str	r0, [r1]
    ea58:	ldr	r0, [pc, #860]	; edbc <rb_init_netio+0x888>
    ea5c:	ldr	r0, [pc, r0]
    ea60:	ldr	r1, [pc, #856]	; edc0 <rb_init_netio+0x88c>
    ea64:	add	r1, pc, r1
    ea68:	str	r0, [r1]
    ea6c:	ldr	r0, [pc, #848]	; edc4 <rb_init_netio+0x890>
    ea70:	ldr	r0, [pc, r0]
    ea74:	ldr	r1, [pc, #844]	; edc8 <rb_init_netio+0x894>
    ea78:	add	r1, pc, r1
    ea7c:	str	r0, [r1]
    ea80:	ldr	r0, [pc, #836]	; edcc <rb_init_netio+0x898>
    ea84:	ldr	r1, [pc, #836]	; edd0 <rb_init_netio+0x89c>
    ea88:	add	r0, pc, r0
    ea8c:	add	r1, pc, r1
    ea90:	b	ebbc <rb_init_netio+0x688>
    ea94:	ldr	r0, [pc, #648]	; ed24 <rb_init_netio+0x7f0>
    ea98:	ldr	r0, [pc, r0]
    ea9c:	ldr	r1, [pc, #644]	; ed28 <rb_init_netio+0x7f4>
    eaa0:	add	r1, pc, r1
    eaa4:	str	r0, [r1]
    eaa8:	ldr	r0, [pc, #636]	; ed2c <rb_init_netio+0x7f8>
    eaac:	ldr	r0, [pc, r0]
    eab0:	ldr	r1, [pc, #632]	; ed30 <rb_init_netio+0x7fc>
    eab4:	add	r1, pc, r1
    eab8:	str	r0, [r1]
    eabc:	ldr	r0, [pc, #624]	; ed34 <rb_init_netio+0x800>
    eac0:	ldr	r0, [pc, r0]
    eac4:	ldr	r1, [pc, #620]	; ed38 <rb_init_netio+0x804>
    eac8:	add	r1, pc, r1
    eacc:	str	r0, [r1]
    ead0:	ldr	r0, [pc, #612]	; ed3c <rb_init_netio+0x808>
    ead4:	ldr	r0, [pc, r0]
    ead8:	ldr	r1, [pc, #608]	; ed40 <rb_init_netio+0x80c>
    eadc:	add	r1, pc, r1
    eae0:	str	r0, [r1]
    eae4:	ldr	r0, [pc, #600]	; ed44 <rb_init_netio+0x810>
    eae8:	ldr	r0, [pc, r0]
    eaec:	ldr	r1, [pc, #596]	; ed48 <rb_init_netio+0x814>
    eaf0:	add	r1, pc, r1
    eaf4:	str	r0, [r1]
    eaf8:	ldr	r0, [pc, #588]	; ed4c <rb_init_netio+0x818>
    eafc:	ldr	r0, [pc, r0]
    eb00:	ldr	r1, [pc, #584]	; ed50 <rb_init_netio+0x81c>
    eb04:	add	r1, pc, r1
    eb08:	str	r0, [r1]
    eb0c:	ldr	r0, [pc, #576]	; ed54 <rb_init_netio+0x820>
    eb10:	ldr	r0, [pc, r0]
    eb14:	ldr	r1, [pc, #572]	; ed58 <rb_init_netio+0x824>
    eb18:	add	r1, pc, r1
    eb1c:	str	r0, [r1]
    eb20:	ldr	r0, [pc, #564]	; ed5c <rb_init_netio+0x828>
    eb24:	ldr	r1, [pc, #564]	; ed60 <rb_init_netio+0x82c>
    eb28:	add	r0, pc, r0
    eb2c:	add	r1, pc, r1
    eb30:	b	ebbc <rb_init_netio+0x688>
    eb34:	ldr	r0, [pc, #376]	; ecb4 <rb_init_netio+0x780>
    eb38:	mov	r1, #0
    eb3c:	add	r0, pc, r0
    eb40:	str	r1, [r0]
    eb44:	ldr	r0, [pc, #364]	; ecb8 <rb_init_netio+0x784>
    eb48:	add	r0, pc, r0
    eb4c:	str	r1, [r0]
    eb50:	ldr	r0, [pc, #356]	; ecbc <rb_init_netio+0x788>
    eb54:	add	r0, pc, r0
    eb58:	str	r1, [r0]
    eb5c:	ldr	r0, [pc, #348]	; ecc0 <rb_init_netio+0x78c>
    eb60:	ldr	r1, [pc, #348]	; ecc4 <rb_init_netio+0x790>
    eb64:	add	r0, pc, r0
    eb68:	add	r1, pc, r1
    eb6c:	str	r1, [r0]
    eb70:	ldr	r0, [pc, #336]	; ecc8 <rb_init_netio+0x794>
    eb74:	ldr	r0, [pc, r0]
    eb78:	ldr	r1, [pc, #332]	; eccc <rb_init_netio+0x798>
    eb7c:	add	r1, pc, r1
    eb80:	str	r0, [r1]
    eb84:	ldr	r0, [pc, #324]	; ecd0 <rb_init_netio+0x79c>
    eb88:	ldr	r0, [pc, r0]
    eb8c:	ldr	r1, [pc, #320]	; ecd4 <rb_init_netio+0x7a0>
    eb90:	add	r1, pc, r1
    eb94:	str	r0, [r1]
    eb98:	ldr	r0, [pc, #312]	; ecd8 <rb_init_netio+0x7a4>
    eb9c:	ldr	r0, [pc, r0]
    eba0:	ldr	r1, [pc, #308]	; ecdc <rb_init_netio+0x7a8>
    eba4:	add	r1, pc, r1
    eba8:	str	r0, [r1]
    ebac:	ldr	r0, [pc, #300]	; ece0 <rb_init_netio+0x7ac>
    ebb0:	ldr	r1, [pc, #300]	; ece4 <rb_init_netio+0x7b0>
    ebb4:	add	r0, pc, r0
    ebb8:	add	r1, pc, r1
    ebbc:	mov	r2, #25
    ebc0:	pop	{r4, sl, fp, lr}
    ebc4:	b	4f58 <rb_strlcpy@plt>
    ebc8:	bl	5204 <rb_outofmemory@plt>
    ebcc:	ldr	r0, [pc, #512]	; edd4 <rb_init_netio+0x8a0>
    ebd0:	add	r0, pc, r0
    ebd4:	bl	51a4 <rb_lib_log@plt>
    ebd8:	bl	4cac <abort@plt>
    ebdc:	.word	0x0000a92a
    ebe0:	.word	0x0001ce20
    ebe4:	.word	0x0000a8fb
    ebe8:	.word	0x0001cb4c
    ebec:	.word	0x0002f104
    ebf0:	.word	0x0001cad8
    ebf4:	.word	0x0002f0ec
    ebf8:	.word	0x0001cb60
    ebfc:	.word	0x0002f0e0
    ec00:	.word	0x0001cacc
    ec04:	.word	0x0002f0b8
    ec08:	.word	0x0001caf8
    ec0c:	.word	0x0002f0a8
    ec10:	.word	0x0001ca78
    ec14:	.word	0x0002f08c
    ec18:	.word	0x0001cb24
    ec1c:	.word	0x0002f084
    ec20:	.word	0x0002f04c
    ec24:	.word	0x0000a5a7
    ec28:	.word	0x0000a8e9
    ec2c:	.word	0x0001cb9c
    ec30:	.word	0x0002f1a4
    ec34:	.word	0x0001cbcc
    ec38:	.word	0x0002f18c
    ec3c:	.word	0x0001cb94
    ec40:	.word	0x0002f180
    ec44:	.word	0x0001cb78
    ec48:	.word	0x0002f158
    ec4c:	.word	0x0001cba8
    ec50:	.word	0x0002f148
    ec54:	.word	0x0001cb54
    ec58:	.word	0x0002f138
    ec5c:	.word	0x0001cb90
    ec60:	.word	0x0002f118
    ec64:	.word	0x0002f0ec
    ec68:	.word	0x0000a64d
    ec6c:	.word	0x0000a8d8
    ec70:	.word	0x0001ca6c
    ec74:	.word	0x0002f064
    ec78:	.word	0x0001cab8
    ec7c:	.word	0x0002f04c
    ec80:	.word	0x0001cacc
    ec84:	.word	0x0002f040
    ec88:	.word	0x0001c9fc
    ec8c:	.word	0x0002f018
    ec90:	.word	0x0001caa0
    ec94:	.word	0x0002f008
    ec98:	.word	0x0001c9e4
    ec9c:	.word	0x0002eff8
    eca0:	.word	0x0001ca4c
    eca4:	.word	0x0002efd8
    eca8:	.word	0x0002efac
    ecac:	.word	0x0000a514
    ecb0:	.word	0x0000a8b4
    ecb4:	.word	0x0002ee00
    ecb8:	.word	0x0002edf8
    ecbc:	.word	0x0002edf0
    ecc0:	.word	0x0002edd4
    ecc4:	.word	0x00000668
    ecc8:	.word	0x0001c84c
    eccc:	.word	0x0002edd0
    ecd0:	.word	0x0001c828
    ecd4:	.word	0x0002edb8
    ecd8:	.word	0x0001c7a8
    ecdc:	.word	0x0002edac
    ece0:	.word	0x0002ed68
    ece4:	.word	0x0000a2c4
    ece8:	.word	0x0000a8ae
    ecec:	.word	0x0002efb8
    ecf0:	.word	0x0002efb0
    ecf4:	.word	0x0002efa8
    ecf8:	.word	0x0002ef8c
    ecfc:	.word	0x00000820
    ed00:	.word	0x0001c9f8
    ed04:	.word	0x0002ef88
    ed08:	.word	0x0001c9a4
    ed0c:	.word	0x0002ef70
    ed10:	.word	0x0001c994
    ed14:	.word	0x0002ef64
    ed18:	.word	0x0002ef20
    ed1c:	.word	0x0000a48e
    ed20:	.word	0x0000a89e
    ed24:	.word	0x0001c898
    ed28:	.word	0x0002eeac
    ed2c:	.word	0x0001c8e4
    ed30:	.word	0x0002ee94
    ed34:	.word	0x0001c8e0
    ed38:	.word	0x0002ee88
    ed3c:	.word	0x0001c864
    ed40:	.word	0x0002ee60
    ed44:	.word	0x0001c838
    ed48:	.word	0x0002ee50
    ed4c:	.word	0x0001c8a0
    ed50:	.word	0x0002ee34
    ed54:	.word	0x0001c8ac
    ed58:	.word	0x0002ee2c
    ed5c:	.word	0x0002edf4
    ed60:	.word	0x0000a36a
    ed64:	.word	0x0000a88c
    ed68:	.word	0x0002f224
    ed6c:	.word	0x0002f21c
    ed70:	.word	0x0002f214
    ed74:	.word	0x0002f1f8
    ed78:	.word	0x00000a8c
    ed7c:	.word	0x0001cc2c
    ed80:	.word	0x0002f1f4
    ed84:	.word	0x0001cc80
    ed88:	.word	0x0002f1dc
    ed8c:	.word	0x0001cc4c
    ed90:	.word	0x0002f1d0
    ed94:	.word	0x0002f18c
    ed98:	.word	0x0000a708
    ed9c:	.word	0x0000a80f
    eda0:	.word	0x0002ef2c
    eda4:	.word	0x0002ef24
    eda8:	.word	0x0002ef1c
    edac:	.word	0x0002ef00
    edb0:	.word	0x00000794
    edb4:	.word	0x0001c924
    edb8:	.word	0x0002eefc
    edbc:	.word	0x0001c904
    edc0:	.word	0x0002eee4
    edc4:	.word	0x0001c8c4
    edc8:	.word	0x0002eed8
    edcc:	.word	0x0002ee94
    edd0:	.word	0x0000a417
    edd4:	.word	0x0000a2d9

0000edd8 <rb_select>:
    edd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eddc:	add	fp, sp, #28
    ede0:	sub	sp, sp, #4
    ede4:	ldr	r1, [pc, #176]	; ee9c <rb_select+0xc4>
    ede8:	ldr	r1, [pc, r1]
    edec:	blx	r1
    edf0:	ldr	r6, [pc, #168]	; eea0 <rb_select+0xc8>
    edf4:	mov	r8, r0
    edf8:	ldr	r6, [pc, r6]
    edfc:	cmp	r6, #0
    ee00:	beq	ee90 <rb_select+0xb8>
    ee04:	ldr	r9, [pc, #152]	; eea4 <rb_select+0xcc>
    ee08:	ldr	r7, [pc, #152]	; eea8 <rb_select+0xd0>
    ee0c:	mov	sl, #0
    ee10:	add	r9, pc, r9
    ee14:	add	r7, pc, r7
    ee18:	ldr	r5, [r6]
    ee1c:	ldr	r4, [r6, #8]
    ee20:	ldr	r0, [pc, #132]	; eeac <rb_select+0xd4>
    ee24:	ldr	r0, [pc, r0]
    ee28:	sub	r0, r0, #1
    ee2c:	str	r0, [r9]
    ee30:	ldr	r0, [r5, #12]
    ee34:	bl	51c8 <close@plt>
    ee38:	ldr	r0, [r6, #8]
    ee3c:	ldr	r1, [r6, #4]
    ee40:	mov	r2, r7
    ee44:	cmp	r0, #0
    ee48:	streq	r1, [r7, #4]
    ee4c:	strne	r1, [r0, #4]
    ee50:	ldrne	r1, [r6, #4]
    ee54:	cmp	r1, #0
    ee58:	addne	r2, r1, #8
    ee5c:	mov	r1, r5
    ee60:	str	r0, [r2]
    ee64:	str	sl, [r6, #4]
    ee68:	str	sl, [r6, #8]
    ee6c:	ldr	r0, [r7, #8]
    ee70:	sub	r0, r0, #1
    ee74:	str	r0, [r7, #8]
    ee78:	ldr	r0, [pc, #48]	; eeb0 <rb_select+0xd8>
    ee7c:	ldr	r0, [pc, r0]
    ee80:	bl	515c <rb_bh_free@plt>
    ee84:	cmp	r4, #0
    ee88:	mov	r6, r4
    ee8c:	bne	ee18 <rb_select+0x40>
    ee90:	mov	r0, r8
    ee94:	sub	sp, fp, #28
    ee98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee9c:	.word	0x0002eb64
    eea0:	.word	0x0002eb5c
    eea4:	.word	0x0002eb00
    eea8:	.word	0x0002eb40
    eeac:	.word	0x0002eaec
    eeb0:	.word	0x0002ea9c

0000eeb4 <rb_recv_fd_buf>:
    eeb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eeb8:	add	fp, sp, #28
    eebc:	sub	sp, sp, #132	; 0x84
    eec0:	ldr	r9, [fp, #8]
    eec4:	str	r2, [fp, #-64]	; 0xffffffc0
    eec8:	str	r1, [fp, #-68]	; 0xffffffbc
    eecc:	mov	r1, #0
    eed0:	sub	r2, fp, #68	; 0x44
    eed4:	mov	r4, r3
    eed8:	str	r1, [fp, #-60]	; 0xffffffc4
    eedc:	str	r1, [fp, #-56]	; 0xffffffc8
    eee0:	str	r2, [fp, #-52]	; 0xffffffcc
    eee4:	mov	r2, #1
    eee8:	str	r2, [fp, #-48]	; 0xffffffd0
    eeec:	str	r1, [fp, #-36]	; 0xffffffdc
    eef0:	mov	r1, #19
    eef4:	mov	r2, #12
    eef8:	add	r1, r1, r9, lsl #2
    eefc:	add	r2, r2, r9, lsl #2
    ef00:	bic	r1, r1, #7
    ef04:	sub	r1, sp, r1
    ef08:	mov	sp, r1
    ef0c:	str	r2, [fp, #-40]	; 0xffffffd8
    ef10:	str	r1, [fp, #-44]	; 0xffffffd4
    ef14:	cmp	r0, #0
    ef18:	sub	r1, fp, #60	; 0x3c
    ef1c:	mov	r2, #0
    ef20:	ldrne	r0, [r0, #12]
    ef24:	mvneq	r0, #0
    ef28:	bl	5390 <recvmsg@plt>
    ef2c:	mov	sl, r0
    ef30:	cmp	r0, #1
    ef34:	blt	f020 <rb_recv_fd_buf+0x16c>
    ef38:	ldr	r0, [fp, #-40]	; 0xffffffd8
    ef3c:	cmp	r0, #0
    ef40:	beq	f018 <rb_recv_fd_buf+0x164>
    ef44:	cmp	r0, #12
    ef48:	bcc	f018 <rb_recv_fd_buf+0x164>
    ef4c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    ef50:	cmp	r0, #0
    ef54:	beq	f018 <rb_recv_fd_buf+0x164>
    ef58:	cmp	r9, #1
    ef5c:	blt	f020 <rb_recv_fd_buf+0x16c>
    ef60:	ldr	r1, [r0]
    ef64:	sub	r1, r1, #12
    ef68:	lsr	r6, r1, #2
    ef6c:	cmp	r6, #0
    ef70:	beq	f020 <rb_recv_fd_buf+0x16c>
    ef74:	add	r5, r0, #12
    ef78:	mov	r8, #0
    ef7c:	ldr	r7, [r5, r8, lsl #2]
    ef80:	mov	r0, #3
    ef84:	sub	r2, fp, #160	; 0xa0
    ef88:	mov	r1, r7
    ef8c:	bl	53b4 <__fxstat@plt>
    ef90:	mov	r1, #64	; 0x40
    ef94:	cmp	r0, #0
    ef98:	beq	efc8 <rb_recv_fd_buf+0x114>
    ef9c:	ldr	r2, [pc, #148]	; f038 <rb_recv_fd_buf+0x184>
    efa0:	add	r2, pc, r2
    efa4:	mov	r0, r7
    efa8:	bl	52f4 <rb_open@plt>
    efac:	str	r0, [r4, r8, lsl #2]
    efb0:	add	r8, r8, #1
    efb4:	cmp	r8, r9
    efb8:	bge	f020 <rb_recv_fd_buf+0x16c>
    efbc:	cmp	r8, r6
    efc0:	bcc	ef7c <rb_recv_fd_buf+0xc8>
    efc4:	b	f020 <rb_recv_fd_buf+0x16c>
    efc8:	ldr	r0, [fp, #-144]	; 0xffffff70
    efcc:	and	r0, r0, #61440	; 0xf000
    efd0:	cmp	r0, #49152	; 0xc000
    efd4:	beq	eff8 <rb_recv_fd_buf+0x144>
    efd8:	cmp	r0, #32768	; 0x8000
    efdc:	beq	f008 <rb_recv_fd_buf+0x154>
    efe0:	cmp	r0, #4096	; 0x1000
    efe4:	bne	ef9c <rb_recv_fd_buf+0xe8>
    efe8:	ldr	r2, [pc, #64]	; f030 <rb_recv_fd_buf+0x17c>
    efec:	mov	r1, #8
    eff0:	add	r2, pc, r2
    eff4:	b	efa4 <rb_recv_fd_buf+0xf0>
    eff8:	ldr	r2, [pc, #44]	; f02c <rb_recv_fd_buf+0x178>
    effc:	mov	r1, #4
    f000:	add	r2, pc, r2
    f004:	b	efa4 <rb_recv_fd_buf+0xf0>
    f008:	ldr	r2, [pc, #36]	; f034 <rb_recv_fd_buf+0x180>
    f00c:	mov	r1, #2
    f010:	add	r2, pc, r2
    f014:	b	efa4 <rb_recv_fd_buf+0xf0>
    f018:	mov	r0, #0
    f01c:	str	r0, [r4]
    f020:	mov	r0, sl
    f024:	sub	sp, fp, #28
    f028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f02c:	.word	0x00009ef2
    f030:	.word	0x00009f10
    f034:	.word	0x00009efc
    f038:	.word	0x00009f43

0000f03c <rb_send_fd_buf>:
    f03c:	push	{r4, r5, r6, sl, fp, lr}
    f040:	add	fp, sp, #16
    f044:	sub	sp, sp, #48	; 0x30
    f048:	sub	r5, fp, #48	; 0x30
    f04c:	vmov.i32	q8, #0	; 0x00000000
    f050:	mov	ip, #0
    f054:	mov	lr, #1
    f058:	add	r4, r5, #12
    f05c:	vst1.32	{d16-d17}, [r4]
    f060:	mov	r4, #48	; 0x30
    f064:	strb	r4, [fp, #-57]	; 0xffffffc7
    f068:	mov	r4, #20
    f06c:	vst1.64	{d16-d17}, [r5], r4
    f070:	sub	r4, fp, #57	; 0x39
    f074:	str	ip, [r5]
    f078:	sub	r5, fp, #56	; 0x38
    f07c:	str	ip, [fp, #-48]	; 0xffffffd0
    f080:	str	ip, [fp, #-44]	; 0xffffffd4
    f084:	str	ip, [fp, #-24]	; 0xffffffe8
    f088:	str	ip, [fp, #-32]	; 0xffffffe0
    f08c:	str	r5, [fp, #-40]	; 0xffffffd8
    f090:	ldr	r5, [fp, #8]
    f094:	str	lr, [fp, #-36]	; 0xffffffdc
    f098:	cmp	r5, #0
    f09c:	movne	r4, r3
    f0a0:	movweq	r5, #1
    f0a4:	cmp	r2, #1
    f0a8:	str	r4, [fp, #-56]	; 0xffffffc8
    f0ac:	str	r5, [fp, #-52]	; 0xffffffcc
    f0b0:	blt	f140 <rb_send_fd_buf+0x104>
    f0b4:	mov	r3, #19
    f0b8:	mov	r4, #12
    f0bc:	mov	r5, sp
    f0c0:	add	r3, r3, r2, lsl #2
    f0c4:	add	r4, r4, r2, lsl #2
    f0c8:	bic	r3, r3, #7
    f0cc:	sub	r3, sp, r3
    f0d0:	mov	sp, r3
    f0d4:	lsl	r6, r2, #2
    f0d8:	str	r4, [fp, #-28]	; 0xffffffe4
    f0dc:	str	r3, [fp, #-32]	; 0xffffffe0
    f0e0:	cmn	r6, #12
    f0e4:	movcc	ip, r3
    f0e8:	add	r3, ip, #12
    f0ec:	stm	ip, {r4, lr}
    f0f0:	str	lr, [ip, #8]
    f0f4:	ldr	r4, [r1]
    f0f8:	add	r1, r1, #4
    f0fc:	cmp	r4, #0
    f100:	ldrne	r4, [r4, #12]
    f104:	mvneq	r4, #0
    f108:	subs	r2, r2, #1
    f10c:	str	r4, [r3], #4
    f110:	bne	f0f4 <rb_send_fd_buf+0xb8>
    f114:	ldr	r1, [ip]
    f118:	cmp	r0, #0
    f11c:	mov	r2, #16384	; 0x4000
    f120:	str	r1, [fp, #-28]	; 0xffffffe4
    f124:	sub	r1, fp, #48	; 0x30
    f128:	ldrne	r0, [r0, #12]
    f12c:	mvneq	r0, #0
    f130:	bl	4fac <sendmsg@plt>
    f134:	mov	sp, r5
    f138:	sub	sp, fp, #16
    f13c:	pop	{r4, r5, r6, sl, fp, pc}
    f140:	cmp	r0, #0
    f144:	sub	r1, fp, #48	; 0x30
    f148:	mov	r2, #16384	; 0x4000
    f14c:	ldrne	r0, [r0, #12]
    f150:	mvneq	r0, #0
    f154:	bl	4fac <sendmsg@plt>
    f158:	sub	sp, fp, #16
    f15c:	pop	{r4, r5, r6, sl, fp, pc}

0000f160 <rb_ipv4_from_ipv6>:
    f160:	mov	r2, r0
    f164:	ldrh	r3, [r2, #8]!
    f168:	cmp	r3, #544	; 0x220
    f16c:	beq	f188 <rb_ipv4_from_ipv6+0x28>
    f170:	ldr	r3, [r2]
    f174:	mov	r2, #0
    f178:	cmp	r3, #288	; 0x120
    f17c:	beq	f194 <rb_ipv4_from_ipv6+0x34>
    f180:	mov	r0, r2
    f184:	bx	lr
    f188:	ldr	r0, [r2, #2]
    f18c:	str	r0, [r1, #4]
    f190:	b	f1c4 <rb_ipv4_from_ipv6+0x64>
    f194:	ldrb	r2, [r0, #20]
    f198:	mvn	r2, r2
    f19c:	strb	r2, [r1, #4]
    f1a0:	ldrb	r2, [r0, #21]
    f1a4:	mvn	r2, r2
    f1a8:	strb	r2, [r1, #5]
    f1ac:	ldrb	r2, [r0, #22]
    f1b0:	ldrb	r0, [r0, #23]
    f1b4:	mvn	r2, r2
    f1b8:	mvn	r0, r0
    f1bc:	strb	r2, [r1, #6]
    f1c0:	strb	r0, [r1, #7]
    f1c4:	mov	r0, #2
    f1c8:	mov	r2, #1
    f1cc:	str	r0, [r1]
    f1d0:	mov	r0, r2
    f1d4:	bx	lr

0000f1d8 <rb_unsupported_event>:
    f1d8:	mov	r0, #0
    f1dc:	bx	lr

0000f1e0 <rb_ssl_shutdown>:
    f1e0:	push	{r4, r5, r6, sl, fp, lr}
    f1e4:	add	fp, sp, #16
    f1e8:	cmp	r0, #0
    f1ec:	beq	f25c <rb_ssl_shutdown+0x7c>
    f1f0:	mov	r4, r0
    f1f4:	ldr	r0, [r0, #56]	; 0x38
    f1f8:	cmp	r0, #0
    f1fc:	popeq	{r4, r5, r6, sl, fp, pc}
    f200:	bl	4ce8 <ERR_get_error@plt>
    f204:	cmp	r0, #0
    f208:	bne	f200 <rb_ssl_shutdown+0x20>
    f20c:	mov	r6, #1
    f210:	ldr	r0, [r4, #56]	; 0x38
    f214:	bl	530c <SSL_shutdown@plt>
    f218:	mov	r5, r0
    f21c:	ldr	r0, [r4, #56]	; 0x38
    f220:	mov	r1, r5
    f224:	bl	5504 <SSL_get_error@plt>
    f228:	cmn	r5, #1
    f22c:	bgt	f24c <rb_ssl_shutdown+0x6c>
    f230:	orr	r0, r0, #1
    f234:	cmp	r0, #3
    f238:	bne	f24c <rb_ssl_shutdown+0x6c>
    f23c:	add	r0, r6, #1
    f240:	cmp	r6, #4
    f244:	mov	r6, r0
    f248:	bcc	f210 <rb_ssl_shutdown+0x30>
    f24c:	ldr	r0, [r4, #56]	; 0x38
    f250:	bl	51e0 <SSL_free@plt>
    f254:	mov	r0, #0
    f258:	str	r0, [r4, #56]	; 0x38
    f25c:	pop	{r4, r5, r6, sl, fp, pc}

0000f260 <rb_init_ssl>:
    f260:	push	{fp, lr}
    f264:	mov	fp, sp
    f268:	ldr	r0, [pc, #20]	; f284 <rb_init_ssl+0x24>
    f26c:	ldr	r1, [pc, #20]	; f288 <rb_init_ssl+0x28>
    f270:	add	r0, pc, r0
    f274:	add	r1, pc, r1
    f278:	bl	51a4 <rb_lib_log@plt>
    f27c:	mov	r0, #1
    f280:	pop	{fp, pc}
    f284:	.word	0x0000a06e
    f288:	.word	0x0000a08a

0000f28c <rb_setup_ssl_server>:
    f28c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    f290:	add	fp, sp, #24
    f294:	sub	sp, sp, #8
    f298:	cmp	r0, #0
    f29c:	beq	f3d0 <rb_setup_ssl_server+0x144>
    f2a0:	mov	r4, r3
    f2a4:	mov	r8, r2
    f2a8:	mov	r7, r1
    f2ac:	mov	r6, r0
    f2b0:	bl	4ce8 <ERR_get_error@plt>
    f2b4:	cmp	r0, #0
    f2b8:	bne	f2b0 <rb_setup_ssl_server+0x24>
    f2bc:	ldr	r5, [pc, #844]	; f610 <rb_setup_ssl_server+0x384>
    f2c0:	cmp	r4, #0
    f2c4:	add	r5, pc, r5
    f2c8:	movne	r5, r4
    f2cc:	cmp	r7, #0
    f2d0:	moveq	r7, r6
    f2d4:	bl	4c58 <TLS_method@plt>
    f2d8:	bl	5384 <SSL_CTX_new@plt>
    f2dc:	cmp	r0, #0
    f2e0:	beq	f3e8 <rb_setup_ssl_server+0x15c>
    f2e4:	mov	r1, r6
    f2e8:	mov	r4, r0
    f2ec:	bl	50d8 <SSL_CTX_use_certificate_chain_file@plt>
    f2f0:	cmp	r0, #1
    f2f4:	bne	f430 <rb_setup_ssl_server+0x1a4>
    f2f8:	mov	r0, r4
    f2fc:	mov	r1, r7
    f300:	mov	r2, #1
    f304:	bl	51b0 <SSL_CTX_use_PrivateKey_file@plt>
    f308:	cmp	r0, #1
    f30c:	bne	f478 <rb_setup_ssl_server+0x1ec>
    f310:	cmp	r8, #0
    f314:	beq	f4d4 <rb_setup_ssl_server+0x248>
    f318:	ldr	r1, [pc, #800]	; f640 <rb_setup_ssl_server+0x3b4>
    f31c:	mov	r0, r8
    f320:	add	r1, pc, r1
    f324:	bl	4ec8 <fopen@plt>
    f328:	mov	r9, r0
    f32c:	mov	r0, #0
    f330:	cmp	r9, #0
    f334:	str	r0, [sp, #4]
    f338:	beq	f4ec <rb_setup_ssl_server+0x260>
    f33c:	add	r1, sp, #4
    f340:	mov	r0, r9
    f344:	mov	r2, #0
    f348:	mov	r3, #0
    f34c:	mov	r7, #0
    f350:	bl	5264 <PEM_read_DHparams@plt>
    f354:	cmp	r0, #0
    f358:	beq	f37c <rb_setup_ssl_server+0xf0>
    f35c:	ldr	r3, [sp, #4]
    f360:	mov	r0, r4
    f364:	mov	r1, #3
    f368:	mov	r2, #0
    f36c:	bl	4f28 <SSL_CTX_ctrl@plt>
    f370:	ldr	r0, [sp, #4]
    f374:	bl	52dc <DH_free@plt>
    f378:	b	f3c4 <rb_setup_ssl_server+0x138>
    f37c:	mov	r6, r7
    f380:	bl	4ce8 <ERR_get_error@plt>
    f384:	mov	r7, r0
    f388:	cmp	r0, #0
    f38c:	bne	f37c <rb_setup_ssl_server+0xf0>
    f390:	ldr	r7, [pc, #692]	; f64c <rb_setup_ssl_server+0x3c0>
    f394:	mov	r0, r6
    f398:	mov	r2, #512	; 0x200
    f39c:	add	r7, pc, r7
    f3a0:	mov	r1, r7
    f3a4:	bl	4e68 <ERR_error_string_n@plt>
    f3a8:	ldr	r0, [pc, #672]	; f650 <rb_setup_ssl_server+0x3c4>
    f3ac:	ldr	r1, [pc, #672]	; f654 <rb_setup_ssl_server+0x3c8>
    f3b0:	mov	r2, r8
    f3b4:	mov	r3, r7
    f3b8:	add	r0, pc, r0
    f3bc:	add	r1, pc, r1
    f3c0:	bl	51a4 <rb_lib_log@plt>
    f3c4:	mov	r0, r9
    f3c8:	bl	4e44 <fclose@plt>
    f3cc:	b	f514 <rb_setup_ssl_server+0x288>
    f3d0:	ldr	r0, [pc, #560]	; f608 <rb_setup_ssl_server+0x37c>
    f3d4:	ldr	r1, [pc, #560]	; f60c <rb_setup_ssl_server+0x380>
    f3d8:	add	r0, pc, r0
    f3dc:	add	r1, pc, r1
    f3e0:	bl	51a4 <rb_lib_log@plt>
    f3e4:	b	f4c8 <rb_setup_ssl_server+0x23c>
    f3e8:	mov	r0, #0
    f3ec:	mov	r4, r0
    f3f0:	bl	4ce8 <ERR_get_error@plt>
    f3f4:	cmp	r0, #0
    f3f8:	bne	f3ec <rb_setup_ssl_server+0x160>
    f3fc:	ldr	r5, [pc, #528]	; f614 <rb_setup_ssl_server+0x388>
    f400:	mov	r0, r4
    f404:	mov	r2, #512	; 0x200
    f408:	add	r5, pc, r5
    f40c:	mov	r1, r5
    f410:	bl	4e68 <ERR_error_string_n@plt>
    f414:	ldr	r0, [pc, #508]	; f618 <rb_setup_ssl_server+0x38c>
    f418:	ldr	r1, [pc, #508]	; f61c <rb_setup_ssl_server+0x390>
    f41c:	mov	r2, r5
    f420:	add	r0, pc, r0
    f424:	add	r1, pc, r1
    f428:	bl	51a4 <rb_lib_log@plt>
    f42c:	b	f4c8 <rb_setup_ssl_server+0x23c>
    f430:	mov	r0, #0
    f434:	mov	r5, r0
    f438:	bl	4ce8 <ERR_get_error@plt>
    f43c:	cmp	r0, #0
    f440:	bne	f434 <rb_setup_ssl_server+0x1a8>
    f444:	ldr	r7, [pc, #468]	; f620 <rb_setup_ssl_server+0x394>
    f448:	mov	r0, r5
    f44c:	mov	r2, #512	; 0x200
    f450:	add	r7, pc, r7
    f454:	mov	r1, r7
    f458:	bl	4e68 <ERR_error_string_n@plt>
    f45c:	ldr	r0, [pc, #448]	; f624 <rb_setup_ssl_server+0x398>
    f460:	ldr	r1, [pc, #448]	; f628 <rb_setup_ssl_server+0x39c>
    f464:	mov	r2, r6
    f468:	mov	r3, r7
    f46c:	add	r0, pc, r0
    f470:	add	r1, pc, r1
    f474:	b	f4bc <rb_setup_ssl_server+0x230>
    f478:	mov	r0, #0
    f47c:	mov	r5, r0
    f480:	bl	4ce8 <ERR_get_error@plt>
    f484:	cmp	r0, #0
    f488:	bne	f47c <rb_setup_ssl_server+0x1f0>
    f48c:	ldr	r6, [pc, #408]	; f62c <rb_setup_ssl_server+0x3a0>
    f490:	mov	r0, r5
    f494:	mov	r2, #512	; 0x200
    f498:	add	r6, pc, r6
    f49c:	mov	r1, r6
    f4a0:	bl	4e68 <ERR_error_string_n@plt>
    f4a4:	ldr	r0, [pc, #388]	; f630 <rb_setup_ssl_server+0x3a4>
    f4a8:	ldr	r1, [pc, #388]	; f634 <rb_setup_ssl_server+0x3a8>
    f4ac:	mov	r2, r7
    f4b0:	mov	r3, r6
    f4b4:	add	r0, pc, r0
    f4b8:	add	r1, pc, r1
    f4bc:	bl	51a4 <rb_lib_log@plt>
    f4c0:	mov	r0, r4
    f4c4:	bl	4d30 <SSL_CTX_free@plt>
    f4c8:	mov	r0, #0
    f4cc:	sub	sp, fp, #24
    f4d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    f4d4:	ldr	r0, [pc, #348]	; f638 <rb_setup_ssl_server+0x3ac>
    f4d8:	ldr	r1, [pc, #348]	; f63c <rb_setup_ssl_server+0x3b0>
    f4dc:	add	r0, pc, r0
    f4e0:	add	r1, pc, r1
    f4e4:	bl	51a4 <rb_lib_log@plt>
    f4e8:	b	f514 <rb_setup_ssl_server+0x288>
    f4ec:	bl	5540 <__errno_location@plt>
    f4f0:	ldr	r0, [r0]
    f4f4:	bl	4c88 <strerror@plt>
    f4f8:	mov	r3, r0
    f4fc:	ldr	r0, [pc, #320]	; f644 <rb_setup_ssl_server+0x3b8>
    f500:	ldr	r1, [pc, #320]	; f648 <rb_setup_ssl_server+0x3bc>
    f504:	mov	r2, r8
    f508:	add	r0, pc, r0
    f50c:	add	r1, pc, r1
    f510:	bl	51a4 <rb_lib_log@plt>
    f514:	mov	r0, r4
    f518:	mov	r1, r5
    f51c:	bl	4cdc <SSL_CTX_set_cipher_list@plt>
    f520:	cmp	r0, #1
    f524:	bne	f5f0 <rb_setup_ssl_server+0x364>
    f528:	mov	r0, r4
    f52c:	mov	r1, #44	; 0x2c
    f530:	mov	r2, #0
    f534:	mov	r3, #0
    f538:	bl	4f28 <SSL_CTX_ctrl@plt>
    f53c:	ldr	r2, [pc, #284]	; f660 <rb_setup_ssl_server+0x3d4>
    f540:	mov	r0, r4
    f544:	mov	r1, #5
    f548:	add	r2, pc, r2
    f54c:	bl	5570 <SSL_CTX_set_verify@plt>
    f550:	mov	r0, r4
    f554:	mov	r1, #2048	; 0x800
    f558:	bl	4de4 <SSL_CTX_clear_options@plt>
    f55c:	mov	r0, r4
    f560:	mov	r1, #67108864	; 0x4000000
    f564:	bl	50f0 <SSL_CTX_set_options@plt>
    f568:	mov	r0, r4
    f56c:	mov	r1, #16384	; 0x4000
    f570:	bl	50f0 <SSL_CTX_set_options@plt>
    f574:	mov	r0, r4
    f578:	mov	r1, #4194304	; 0x400000
    f57c:	bl	50f0 <SSL_CTX_set_options@plt>
    f580:	mov	r0, r4
    f584:	mov	r1, #0
    f588:	bl	50f0 <SSL_CTX_set_options@plt>
    f58c:	mov	r0, r4
    f590:	mov	r1, #0
    f594:	bl	50f0 <SSL_CTX_set_options@plt>
    f598:	ldr	r3, [pc, #196]	; f664 <rb_setup_ssl_server+0x3d8>
    f59c:	mov	r0, r4
    f5a0:	mov	r1, #92	; 0x5c
    f5a4:	mov	r2, #0
    f5a8:	add	r3, pc, r3
    f5ac:	bl	4f28 <SSL_CTX_ctrl@plt>
    f5b0:	ldr	r0, [pc, #176]	; f668 <rb_setup_ssl_server+0x3dc>
    f5b4:	ldr	r0, [pc, r0]
    f5b8:	cmp	r0, #0
    f5bc:	beq	f5c4 <rb_setup_ssl_server+0x338>
    f5c0:	bl	4d30 <SSL_CTX_free@plt>
    f5c4:	ldr	r0, [pc, #160]	; f66c <rb_setup_ssl_server+0x3e0>
    f5c8:	add	r0, pc, r0
    f5cc:	str	r4, [r0]
    f5d0:	ldr	r0, [pc, #152]	; f670 <rb_setup_ssl_server+0x3e4>
    f5d4:	ldr	r1, [pc, #152]	; f674 <rb_setup_ssl_server+0x3e8>
    f5d8:	add	r0, pc, r0
    f5dc:	add	r1, pc, r1
    f5e0:	bl	51a4 <rb_lib_log@plt>
    f5e4:	mov	r0, #1
    f5e8:	sub	sp, fp, #24
    f5ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    f5f0:	ldr	r0, [pc, #96]	; f658 <rb_setup_ssl_server+0x3cc>
    f5f4:	ldr	r1, [pc, #96]	; f65c <rb_setup_ssl_server+0x3d0>
    f5f8:	add	r0, pc, r0
    f5fc:	add	r1, pc, r1
    f600:	bl	51a4 <rb_lib_log@plt>
    f604:	b	f4c0 <rb_setup_ssl_server+0x234>
    f608:	.word	0x00009f32
    f60c:	.word	0x00009f50
    f610:	.word	0x0000a2d1
    f614:	.word	0x0002e76c
    f618:	.word	0x00009f20
    f61c:	.word	0x00009f08
    f620:	.word	0x0002e724
    f624:	.word	0x00009ee8
    f628:	.word	0x00009ebc
    f62c:	.word	0x0002e6dc
    f630:	.word	0x00009ed2
    f634:	.word	0x00009e74
    f638:	.word	0x00009ed5
    f63c:	.word	0x00009e4c
    f640:	.word	0x0000a5d4
    f644:	.word	0x00009ecd
    f648:	.word	0x00009e20
    f64c:	.word	0x0002e7d8
    f650:	.word	0x0000a032
    f654:	.word	0x00009f70
    f658:	.word	0x00009e13
    f65c:	.word	0x00009d30
    f660:	.word	0x00000128
    f664:	.word	0x0001be88
    f668:	.word	0x0002e3bc
    f66c:	.word	0x0002e3a8
    f670:	.word	0x00009e70
    f674:	.word	0x00009d50

0000f678 <verify_accept_all_cb>:
    f678:	mov	r0, #1
    f67c:	bx	lr

0000f680 <rb_init_prng>:
    f680:	push	{r4, r5, fp, lr}
    f684:	add	fp, sp, #8
    f688:	mov	r5, r1
    f68c:	mov	r4, r0
    f690:	bl	4ce8 <ERR_get_error@plt>
    f694:	cmp	r0, #0
    f698:	bne	f690 <rb_init_prng+0x10>
    f69c:	cmp	r5, #0
    f6a0:	bne	f6fc <rb_init_prng+0x7c>
    f6a4:	mov	r0, r4
    f6a8:	mvn	r1, #0
    f6ac:	bl	4d0c <RAND_load_file@plt>
    f6b0:	cmn	r0, #1
    f6b4:	bgt	f6fc <rb_init_prng+0x7c>
    f6b8:	mov	r0, #0
    f6bc:	mov	r4, r0
    f6c0:	bl	4ce8 <ERR_get_error@plt>
    f6c4:	cmp	r0, #0
    f6c8:	bne	f6bc <rb_init_prng+0x3c>
    f6cc:	ldr	r5, [pc, #156]	; f770 <rb_init_prng+0xf0>
    f6d0:	mov	r0, r4
    f6d4:	mov	r2, #512	; 0x200
    f6d8:	add	r5, pc, r5
    f6dc:	mov	r1, r5
    f6e0:	bl	4e68 <ERR_error_string_n@plt>
    f6e4:	ldr	r0, [pc, #136]	; f774 <rb_init_prng+0xf4>
    f6e8:	ldr	r1, [pc, #136]	; f778 <rb_init_prng+0xf8>
    f6ec:	mov	r2, r5
    f6f0:	add	r0, pc, r0
    f6f4:	add	r1, pc, r1
    f6f8:	bl	51a4 <rb_lib_log@plt>
    f6fc:	bl	5414 <RAND_status@plt>
    f700:	cmp	r0, #1
    f704:	bne	f724 <rb_init_prng+0xa4>
    f708:	ldr	r0, [pc, #120]	; f788 <rb_init_prng+0x108>
    f70c:	ldr	r1, [pc, #120]	; f78c <rb_init_prng+0x10c>
    f710:	add	r0, pc, r0
    f714:	add	r1, pc, r1
    f718:	bl	51a4 <rb_lib_log@plt>
    f71c:	mov	r0, #1
    f720:	pop	{r4, r5, fp, pc}
    f724:	mov	r0, #0
    f728:	mov	r4, r0
    f72c:	bl	4ce8 <ERR_get_error@plt>
    f730:	cmp	r0, #0
    f734:	bne	f728 <rb_init_prng+0xa8>
    f738:	ldr	r5, [pc, #60]	; f77c <rb_init_prng+0xfc>
    f73c:	mov	r0, r4
    f740:	mov	r2, #512	; 0x200
    f744:	add	r5, pc, r5
    f748:	mov	r1, r5
    f74c:	bl	4e68 <ERR_error_string_n@plt>
    f750:	ldr	r0, [pc, #40]	; f780 <rb_init_prng+0x100>
    f754:	ldr	r1, [pc, #40]	; f784 <rb_init_prng+0x104>
    f758:	mov	r2, r5
    f75c:	add	r0, pc, r0
    f760:	add	r1, pc, r1
    f764:	bl	51a4 <rb_lib_log@plt>
    f768:	mov	r0, #0
    f76c:	pop	{r4, r5, fp, pc}
    f770:	.word	0x0002e49c
    f774:	.word	0x00009d79
    f778:	.word	0x00009d8c
    f77c:	.word	0x0002e430
    f780:	.word	0x00009d31
    f784:	.word	0x00009d20
    f788:	.word	0x00009d91
    f78c:	.word	0x00009d6c

0000f790 <rb_get_random>:
    f790:	push	{r4, r5, fp, lr}
    f794:	add	fp, sp, #8
    f798:	mov	r4, r1
    f79c:	mov	r5, r0
    f7a0:	bl	4ce8 <ERR_get_error@plt>
    f7a4:	cmp	r0, #0
    f7a8:	bne	f7a0 <rb_get_random+0x10>
    f7ac:	mov	r0, r5
    f7b0:	mov	r1, r4
    f7b4:	bl	5348 <RAND_bytes@plt>
    f7b8:	mov	r1, r0
    f7bc:	mov	r0, #1
    f7c0:	cmp	r1, #1
    f7c4:	popeq	{r4, r5, fp, pc}
    f7c8:	mov	r0, #0
    f7cc:	mov	r4, r0
    f7d0:	bl	4ce8 <ERR_get_error@plt>
    f7d4:	cmp	r0, #0
    f7d8:	bne	f7cc <rb_get_random+0x3c>
    f7dc:	ldr	r5, [pc, #48]	; f814 <rb_get_random+0x84>
    f7e0:	mov	r0, r4
    f7e4:	mov	r2, #512	; 0x200
    f7e8:	add	r5, pc, r5
    f7ec:	mov	r1, r5
    f7f0:	bl	4e68 <ERR_error_string_n@plt>
    f7f4:	ldr	r0, [pc, #28]	; f818 <rb_get_random+0x88>
    f7f8:	ldr	r1, [pc, #28]	; f81c <rb_get_random+0x8c>
    f7fc:	mov	r2, r5
    f800:	add	r0, pc, r0
    f804:	add	r1, pc, r1
    f808:	bl	51a4 <rb_lib_log@plt>
    f80c:	mov	r0, #0
    f810:	pop	{r4, r5, fp, pc}
    f814:	.word	0x0002e38c
    f818:	.word	0x00009cb6
    f81c:	.word	0x00009cc5

0000f820 <rb_get_ssl_strerror>:
    f820:	push	{r4, sl, fp, lr}
    f824:	add	fp, sp, #8
    f828:	ldr	r0, [r0, #64]	; 0x40
    f82c:	ldr	r4, [pc, #20]	; f848 <rb_get_ssl_strerror+0x28>
    f830:	mov	r2, #512	; 0x200
    f834:	add	r4, pc, r4
    f838:	mov	r1, r4
    f83c:	bl	4e68 <ERR_error_string_n@plt>
    f840:	mov	r0, r4
    f844:	pop	{r4, sl, fp, pc}
    f848:	.word	0x0002e340

0000f84c <rb_get_ssl_certfp>:
    f84c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    f850:	add	fp, sp, #24
    f854:	mov	r4, #0
    f858:	cmp	r0, #0
    f85c:	beq	f8cc <rb_get_ssl_certfp+0x80>
    f860:	mov	r5, r0
    f864:	ldr	r0, [r0, #56]	; 0x38
    f868:	cmp	r0, #0
    f86c:	beq	f8cc <rb_get_ssl_certfp+0x80>
    f870:	mov	r8, r2
    f874:	mov	r6, r1
    f878:	bl	52a0 <SSL_get_peer_certificate@plt>
    f87c:	cmp	r0, #0
    f880:	beq	f8cc <rb_get_ssl_certfp+0x80>
    f884:	mov	r7, r0
    f888:	ldr	r0, [r5, #56]	; 0x38
    f88c:	bl	52b8 <SSL_get_verify_result@plt>
    f890:	mov	r4, #0
    f894:	cmp	r0, #27
    f898:	bhi	f8c4 <rb_get_ssl_certfp+0x78>
    f89c:	movw	r2, #1
    f8a0:	mov	r1, #1
    f8a4:	movt	r2, #2108	; 0x83c
    f8a8:	tst	r2, r1, lsl r0
    f8ac:	beq	f8c4 <rb_get_ssl_certfp+0x78>
    f8b0:	mov	r0, r7
    f8b4:	mov	r1, r6
    f8b8:	mov	r2, r8
    f8bc:	bl	f8d4 <make_certfp>
    f8c0:	mov	r4, r0
    f8c4:	mov	r0, r7
    f8c8:	bl	54bc <X509_free@plt>
    f8cc:	mov	r0, r4
    f8d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000f8d4 <make_certfp>:
    f8d4:	push	{r4, r5, r6, sl, fp, lr}
    f8d8:	add	fp, sp, #16
    f8dc:	sub	sp, sp, #8
    f8e0:	mov	r5, r0
    f8e4:	mov	r0, #0
    f8e8:	mov	r4, r1
    f8ec:	cmp	r2, #1
    f8f0:	str	r0, [sp, #4]
    f8f4:	ble	f928 <make_certfp+0x54>
    f8f8:	cmp	r2, #2
    f8fc:	beq	f948 <make_certfp+0x74>
    f900:	movw	r1, #4097	; 0x1001
    f904:	cmp	r2, r1
    f908:	beq	f958 <make_certfp+0x84>
    f90c:	movw	r1, #4098	; 0x1002
    f910:	cmp	r2, r1
    f914:	bne	f9bc <make_certfp+0xe8>
    f918:	mov	r0, #64	; 0x40
    f91c:	str	r0, [sp, #4]
    f920:	bl	53fc <EVP_sha512@plt>
    f924:	b	f964 <make_certfp+0x90>
    f928:	cmp	r2, #0
    f92c:	beq	f980 <make_certfp+0xac>
    f930:	cmp	r2, #1
    f934:	bne	f9bc <make_certfp+0xe8>
    f938:	mov	r0, #32
    f93c:	str	r0, [sp, #4]
    f940:	bl	542c <EVP_sha256@plt>
    f944:	b	f98c <make_certfp+0xb8>
    f948:	mov	r0, #64	; 0x40
    f94c:	str	r0, [sp, #4]
    f950:	bl	53fc <EVP_sha512@plt>
    f954:	b	f98c <make_certfp+0xb8>
    f958:	mov	r0, #32
    f95c:	str	r0, [sp, #4]
    f960:	bl	542c <EVP_sha256@plt>
    f964:	mov	r6, r0
    f968:	mov	r0, r5
    f96c:	bl	4e08 <X509_get_X509_PUBKEY@plt>
    f970:	mov	r5, r0
    f974:	ldr	r0, [pc, #156]	; fa18 <make_certfp+0x144>
    f978:	ldr	r0, [pc, r0]
    f97c:	b	f998 <make_certfp+0xc4>
    f980:	mov	r0, #20
    f984:	str	r0, [sp, #4]
    f988:	bl	5174 <EVP_sha1@plt>
    f98c:	mov	r6, r0
    f990:	ldr	r0, [pc, #124]	; fa14 <make_certfp+0x140>
    f994:	ldr	r0, [pc, r0]
    f998:	add	r1, sp, #4
    f99c:	mov	r2, r5
    f9a0:	mov	r3, r4
    f9a4:	str	r1, [sp]
    f9a8:	mov	r1, r6
    f9ac:	bl	5288 <ASN1_item_digest@plt>
    f9b0:	cmp	r0, #1
    f9b4:	bne	f9c4 <make_certfp+0xf0>
    f9b8:	ldr	r0, [sp, #4]
    f9bc:	sub	sp, fp, #16
    f9c0:	pop	{r4, r5, r6, sl, fp, pc}
    f9c4:	mov	r0, #0
    f9c8:	mov	r4, r0
    f9cc:	bl	4ce8 <ERR_get_error@plt>
    f9d0:	cmp	r0, #0
    f9d4:	bne	f9c8 <make_certfp+0xf4>
    f9d8:	ldr	r5, [pc, #60]	; fa1c <make_certfp+0x148>
    f9dc:	mov	r0, r4
    f9e0:	mov	r2, #512	; 0x200
    f9e4:	add	r5, pc, r5
    f9e8:	mov	r1, r5
    f9ec:	bl	4e68 <ERR_error_string_n@plt>
    f9f0:	ldr	r0, [pc, #40]	; fa20 <make_certfp+0x14c>
    f9f4:	ldr	r1, [pc, #40]	; fa24 <make_certfp+0x150>
    f9f8:	mov	r2, r5
    f9fc:	add	r0, pc, r0
    fa00:	add	r1, pc, r1
    fa04:	bl	51a4 <rb_lib_log@plt>
    fa08:	mov	r0, #0
    fa0c:	sub	sp, fp, #16
    fa10:	pop	{r4, r5, r6, sl, fp, pc}
    fa14:	.word	0x0001ba38
    fa18:	.word	0x0001ba60
    fa1c:	.word	0x0002e190
    fa20:	.word	0x00009b55
    fa24:	.word	0x00009b6a

0000fa28 <rb_get_ssl_certfp_file>:
    fa28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    fa2c:	add	fp, sp, #24
    fa30:	mov	r6, r1
    fa34:	ldr	r1, [pc, #116]	; fab0 <rb_get_ssl_certfp_file+0x88>
    fa38:	mov	r8, r2
    fa3c:	add	r1, pc, r1
    fa40:	bl	4ec8 <fopen@plt>
    fa44:	cmp	r0, #0
    fa48:	mvneq	r7, #0
    fa4c:	moveq	r0, r7
    fa50:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
    fa54:	mov	r1, #0
    fa58:	mov	r2, #0
    fa5c:	mov	r3, #0
    fa60:	mov	r4, r0
    fa64:	mov	r7, #0
    fa68:	bl	50b4 <PEM_read_X509@plt>
    fa6c:	cmp	r0, #0
    fa70:	beq	faa0 <rb_get_ssl_certfp_file+0x78>
    fa74:	mov	r1, r6
    fa78:	mov	r2, r8
    fa7c:	mov	r5, r0
    fa80:	bl	f8d4 <make_certfp>
    fa84:	mov	r6, r0
    fa88:	mov	r0, r5
    fa8c:	bl	54bc <X509_free@plt>
    fa90:	mov	r0, r4
    fa94:	bl	4e44 <fclose@plt>
    fa98:	mov	r0, r6
    fa9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    faa0:	mov	r0, r4
    faa4:	bl	4e44 <fclose@plt>
    faa8:	mov	r0, r7
    faac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    fab0:	.word	0x00009eb8

0000fab4 <rb_get_ssl_info>:
    fab4:	push	{r4, r5, r6, r7, fp, lr}
    fab8:	add	fp, sp, #16
    fabc:	sub	sp, sp, #16
    fac0:	movw	r4, #4175	; 0x104f
    fac4:	mov	r5, r1
    fac8:	mov	r6, r0
    facc:	movt	r4, #4112	; 0x1010
    fad0:	bl	4f88 <OpenSSL_version_num@plt>
    fad4:	cmp	r0, r4
    fad8:	bne	faf4 <rb_get_ssl_info+0x40>
    fadc:	ldr	r0, [pc, #80]	; fb34 <rb_get_ssl_info+0x80>
    fae0:	add	r0, pc, r0
    fae4:	str	r0, [sp]
    fae8:	ldr	r2, [pc, #72]	; fb38 <rb_get_ssl_info+0x84>
    faec:	add	r2, pc, r2
    faf0:	b	fb1c <rb_get_ssl_info+0x68>
    faf4:	bl	4f88 <OpenSSL_version_num@plt>
    faf8:	mov	r7, r0
    fafc:	mov	r0, #0
    fb00:	bl	54ec <OpenSSL_version@plt>
    fb04:	ldr	r1, [pc, #48]	; fb3c <rb_get_ssl_info+0x88>
    fb08:	add	r1, pc, r1
    fb0c:	stm	sp, {r1, r7}
    fb10:	str	r0, [sp, #8]
    fb14:	ldr	r2, [pc, #36]	; fb40 <rb_get_ssl_info+0x8c>
    fb18:	add	r2, pc, r2
    fb1c:	mov	r0, r6
    fb20:	mov	r1, r5
    fb24:	mov	r3, r4
    fb28:	bl	5408 <snprintf@plt>
    fb2c:	sub	sp, fp, #16
    fb30:	pop	{r4, r5, r6, r7, fp, pc}
    fb34:	.word	0x00009a1b
    fb38:	.word	0x000099eb
    fb3c:	.word	0x000099f3
    fb40:	.word	0x000099ff

0000fb44 <rb_ssl_get_cipher>:
    fb44:	push	{r4, r5, r6, sl, fp, lr}
    fb48:	add	fp, sp, #16
    fb4c:	sub	sp, sp, #8
    fb50:	mov	r4, #0
    fb54:	cmp	r0, #0
    fb58:	beq	fba4 <rb_ssl_get_cipher+0x60>
    fb5c:	mov	r5, r0
    fb60:	ldr	r0, [r0, #56]	; 0x38
    fb64:	cmp	r0, #0
    fb68:	beq	fba4 <rb_ssl_get_cipher+0x60>
    fb6c:	bl	5510 <SSL_get_version@plt>
    fb70:	mov	r6, r0
    fb74:	ldr	r0, [r5, #56]	; 0x38
    fb78:	bl	4df0 <SSL_get_current_cipher@plt>
    fb7c:	bl	4f70 <SSL_CIPHER_get_name@plt>
    fb80:	str	r0, [sp]
    fb84:	mov	r1, #512	; 0x200
    fb88:	mov	r3, r6
    fb8c:	ldr	r4, [pc, #28]	; fbb0 <rb_ssl_get_cipher+0x6c>
    fb90:	ldr	r2, [pc, #28]	; fbb4 <rb_ssl_get_cipher+0x70>
    fb94:	add	r4, pc, r4
    fb98:	add	r2, pc, r2
    fb9c:	mov	r0, r4
    fba0:	bl	5408 <snprintf@plt>
    fba4:	mov	r0, r4
    fba8:	sub	sp, fp, #16
    fbac:	pop	{r4, r5, r6, sl, fp, pc}
    fbb0:	.word	0x0002dde0
    fbb4:	.word	0x000099b2

0000fbb8 <rb_ssl_read>:
    fbb8:	push	{fp, lr}
    fbbc:	mov	fp, sp
    fbc0:	sub	sp, sp, #8
    fbc4:	mov	r3, r1
    fbc8:	mov	r1, r0
    fbcc:	str	r2, [sp]
    fbd0:	mov	r0, #0
    fbd4:	mov	r2, r3
    fbd8:	mov	r3, #0
    fbdc:	bl	fbe8 <rb_ssl_read_or_write>
    fbe0:	mov	sp, fp
    fbe4:	pop	{fp, pc}

0000fbe8 <rb_ssl_read_or_write>:
    fbe8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    fbec:	add	fp, sp, #24
    fbf0:	ldr	r5, [fp, #8]
    fbf4:	mov	r6, r3
    fbf8:	mov	r7, r2
    fbfc:	mov	r8, r1
    fc00:	mov	r4, r0
    fc04:	bl	4ce8 <ERR_get_error@plt>
    fc08:	cmp	r0, #0
    fc0c:	bne	fc04 <rb_ssl_read_or_write+0x1c>
    fc10:	ldr	r0, [r8, #56]	; 0x38
    fc14:	cmp	r4, #0
    fc18:	beq	fc2c <rb_ssl_read_or_write+0x44>
    fc1c:	mov	r1, r6
    fc20:	mov	r2, r5
    fc24:	bl	4eb0 <SSL_write@plt>
    fc28:	b	fc38 <rb_ssl_read_or_write+0x50>
    fc2c:	mov	r1, r7
    fc30:	mov	r2, r5
    fc34:	bl	5024 <SSL_read@plt>
    fc38:	mov	r1, r0
    fc3c:	cmn	r0, #1
    fc40:	ble	fc4c <rb_ssl_read_or_write+0x64>
    fc44:	mov	r0, r1
    fc48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    fc4c:	ldr	r0, [r8, #56]	; 0x38
    fc50:	bl	5504 <SSL_get_error@plt>
    fc54:	sub	r0, r0, #2
    fc58:	cmp	r0, #4
    fc5c:	bhi	fcb4 <rb_ssl_read_or_write+0xcc>
    fc60:	add	r2, pc, #8
    fc64:	mov	r1, #0
    fc68:	ldr	r0, [r2, r0, lsl #2]
    fc6c:	add	pc, r2, r0
    fc70:	.word	0x00000014
    fc74:	.word	0x0000002c
    fc78:	.word	0x00000044
    fc7c:	.word	0x00000068
    fc80:	.word	0xffffffd4
    fc84:	bl	5540 <__errno_location@plt>
    fc88:	mov	r1, #11
    fc8c:	str	r1, [r0]
    fc90:	mvn	r1, #2
    fc94:	mov	r0, r1
    fc98:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    fc9c:	bl	5540 <__errno_location@plt>
    fca0:	mov	r1, #11
    fca4:	str	r1, [r0]
    fca8:	mvn	r1, #3
    fcac:	mov	r0, r1
    fcb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    fcb4:	mov	r0, #0
    fcb8:	mov	r4, r0
    fcbc:	bl	4ce8 <ERR_get_error@plt>
    fcc0:	cmp	r0, #0
    fcc4:	bne	fcb8 <rb_ssl_read_or_write+0xd0>
    fcc8:	cmp	r4, #0
    fccc:	str	r4, [r8, #64]	; 0x40
    fcd0:	bne	fcf8 <rb_ssl_read_or_write+0x110>
    fcd4:	b	fd18 <rb_ssl_read_or_write+0x130>
    fcd8:	mov	r0, #0
    fcdc:	mov	r4, r0
    fce0:	bl	4ce8 <ERR_get_error@plt>
    fce4:	cmp	r0, #0
    fce8:	bne	fcdc <rb_ssl_read_or_write+0xf4>
    fcec:	cmp	r4, #0
    fcf0:	beq	fd10 <rb_ssl_read_or_write+0x128>
    fcf4:	str	r4, [r8, #64]	; 0x40
    fcf8:	bl	5540 <__errno_location@plt>
    fcfc:	mov	r1, #5
    fd00:	str	r1, [r0]
    fd04:	mvn	r1, #1
    fd08:	mov	r0, r1
    fd0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    fd10:	mov	r0, #0
    fd14:	str	r0, [r8, #64]	; 0x40
    fd18:	mvn	r1, #0
    fd1c:	mov	r0, r1
    fd20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000fd24 <rb_ssl_write>:
    fd24:	push	{fp, lr}
    fd28:	mov	fp, sp
    fd2c:	sub	sp, sp, #8
    fd30:	mov	r3, r1
    fd34:	mov	r1, r0
    fd38:	str	r2, [sp]
    fd3c:	mov	r0, #1
    fd40:	mov	r2, #0
    fd44:	bl	fbe8 <rb_ssl_read_or_write>
    fd48:	mov	sp, fp
    fd4c:	pop	{fp, pc}

0000fd50 <rb_supports_ssl>:
    fd50:	mov	r0, #1
    fd54:	bx	lr

0000fd58 <rb_ssl_handshake_count>:
    fd58:	ldr	r0, [r0, #60]	; 0x3c
    fd5c:	bx	lr

0000fd60 <rb_ssl_clear_handshake_count>:
    fd60:	mov	r1, #0
    fd64:	str	r1, [r0, #60]	; 0x3c
    fd68:	bx	lr

0000fd6c <rb_ssl_start_accepted>:
    fd6c:	push	{r4, r5, r6, r7, fp, lr}
    fd70:	add	fp, sp, #16
    fd74:	mov	r4, r0
    fd78:	ldrb	r0, [r0, #17]
    fd7c:	mov	r6, r1
    fd80:	mov	r1, #144	; 0x90
    fd84:	mov	r5, r3
    fd88:	mov	r7, r2
    fd8c:	orr	r0, r0, #32
    fd90:	strb	r0, [r4, #17]
    fd94:	mov	r0, #1
    fd98:	bl	4ea4 <calloc@plt>
    fd9c:	cmp	r0, #0
    fda0:	beq	fdf0 <rb_ssl_start_accepted+0x84>
    fda4:	mov	r1, #0
    fda8:	mov	r2, #132	; 0x84
    fdac:	str	r0, [r4, #52]	; 0x34
    fdb0:	str	r7, [r0, #140]	; 0x8c
    fdb4:	str	r6, [r0, #132]	; 0x84
    fdb8:	bl	4ee0 <memset@plt>
    fdbc:	ldr	r2, [pc, #48]	; fdf4 <rb_ssl_start_accepted+0x88>
    fdc0:	mov	r0, r4
    fdc4:	mov	r1, r5
    fdc8:	mov	r3, #0
    fdcc:	add	r2, pc, r2
    fdd0:	bl	4cd0 <rb_settimeout@plt>
    fdd4:	mov	r0, r4
    fdd8:	mov	r1, #0
    fddc:	bl	fe2c <rb_ssl_init_fd>
    fde0:	mov	r0, r4
    fde4:	mov	r1, #0
    fde8:	pop	{r4, r5, r6, r7, fp, lr}
    fdec:	b	fef8 <rb_ssl_accept_common>
    fdf0:	bl	5204 <rb_outofmemory@plt>
    fdf4:	.word	0x00000024

0000fdf8 <rb_ssl_timeout_cb>:
    fdf8:	push	{fp, lr}
    fdfc:	mov	fp, sp
    fe00:	sub	sp, sp, #8
    fe04:	ldr	r1, [r0, #52]	; 0x34
    fe08:	mov	r2, #0
    fe0c:	mov	r3, #0
    fe10:	ldr	ip, [r1, #132]	; 0x84
    fe14:	ldr	r1, [r1, #140]	; 0x8c
    fe18:	str	r1, [sp]
    fe1c:	mov	r1, #3
    fe20:	blx	ip
    fe24:	mov	sp, fp
    fe28:	pop	{fp, pc}

0000fe2c <rb_ssl_init_fd>:
    fe2c:	push	{r4, r5, r6, sl, fp, lr}
    fe30:	add	fp, sp, #16
    fe34:	mov	r5, r1
    fe38:	mov	r4, r0
    fe3c:	bl	4ce8 <ERR_get_error@plt>
    fe40:	cmp	r0, #0
    fe44:	bne	fe3c <rb_ssl_init_fd+0x10>
    fe48:	ldr	r0, [pc, #152]	; fee8 <rb_ssl_init_fd+0xbc>
    fe4c:	ldr	r0, [pc, r0]
    fe50:	bl	4fdc <SSL_new@plt>
    fe54:	cmp	r0, #0
    fe58:	str	r0, [r4, #56]	; 0x38
    fe5c:	beq	fe78 <rb_ssl_init_fd+0x4c>
    fe60:	cmp	r5, #1
    fe64:	beq	fec8 <rb_ssl_init_fd+0x9c>
    fe68:	cmp	r5, #0
    fe6c:	bne	fecc <rb_ssl_init_fd+0xa0>
    fe70:	bl	524c <SSL_set_accept_state@plt>
    fe74:	b	fecc <rb_ssl_init_fd+0xa0>
    fe78:	mov	r0, #0
    fe7c:	mov	r5, r0
    fe80:	bl	4ce8 <ERR_get_error@plt>
    fe84:	cmp	r0, #0
    fe88:	bne	fe7c <rb_ssl_init_fd+0x50>
    fe8c:	ldr	r6, [pc, #88]	; feec <rb_ssl_init_fd+0xc0>
    fe90:	mov	r0, r5
    fe94:	mov	r2, #512	; 0x200
    fe98:	add	r6, pc, r6
    fe9c:	mov	r1, r6
    fea0:	bl	4e68 <ERR_error_string_n@plt>
    fea4:	ldr	r0, [pc, #68]	; fef0 <rb_ssl_init_fd+0xc4>
    fea8:	ldr	r1, [pc, #68]	; fef4 <rb_ssl_init_fd+0xc8>
    feac:	mov	r2, r6
    feb0:	add	r0, pc, r0
    feb4:	add	r1, pc, r1
    feb8:	bl	51a4 <rb_lib_log@plt>
    febc:	mov	r0, r4
    fec0:	pop	{r4, r5, r6, sl, fp, lr}
    fec4:	b	5108 <rb_close@plt>
    fec8:	bl	53c0 <SSL_set_connect_state@plt>
    fecc:	ldr	r5, [r4, #56]	; 0x38
    fed0:	mov	r0, r4
    fed4:	bl	4db4 <rb_get_fd@plt>
    fed8:	mov	r1, r0
    fedc:	mov	r0, r5
    fee0:	pop	{r4, r5, r6, sl, fp, lr}
    fee4:	b	4f1c <SSL_set_fd@plt>
    fee8:	.word	0x0002db24
    feec:	.word	0x0002dcdc
    fef0:	.word	0x000096c6
    fef4:	.word	0x000096d2

0000fef8 <rb_ssl_accept_common>:
    fef8:	push	{r4, r5, r6, sl, fp, lr}
    fefc:	add	fp, sp, #16
    ff00:	sub	sp, sp, #8
    ff04:	mov	r4, r0
    ff08:	bl	4ce8 <ERR_get_error@plt>
    ff0c:	cmp	r0, #0
    ff10:	bne	ff08 <rb_ssl_accept_common+0x10>
    ff14:	ldr	r0, [r4, #56]	; 0x38
    ff18:	bl	5060 <SSL_do_handshake@plt>
    ff1c:	mov	r6, r0
    ff20:	ldr	r0, [r4, #56]	; 0x38
    ff24:	mov	r1, r6
    ff28:	bl	5504 <SSL_get_error@plt>
    ff2c:	cmp	r6, #1
    ff30:	bne	ffac <rb_ssl_accept_common+0xb4>
    ff34:	ldr	r0, [r4, #60]	; 0x3c
    ff38:	mov	r1, #0
    ff3c:	mov	r2, #0
    ff40:	mov	r3, #0
    ff44:	mov	r6, #0
    ff48:	add	r0, r0, #1
    ff4c:	str	r0, [r4, #60]	; 0x3c
    ff50:	mov	r0, r4
    ff54:	bl	4cd0 <rb_settimeout@plt>
    ff58:	mov	r0, r4
    ff5c:	mov	r1, #3
    ff60:	mov	r2, #0
    ff64:	mov	r3, #0
    ff68:	bl	4d78 <rb_setselect@plt>
    ff6c:	ldr	r5, [r4, #52]	; 0x34
    ff70:	str	r6, [r4, #52]	; 0x34
    ff74:	mov	r1, #0
    ff78:	ldr	r0, [r5, #140]	; 0x8c
    ff7c:	ldr	r3, [r5, #128]	; 0x80
    ff80:	ldr	r6, [r5, #132]	; 0x84
    ff84:	mov	r2, r5
    ff88:	str	r0, [sp]
    ff8c:	mov	r0, r4
    ff90:	blx	r6
    ff94:	cmp	r5, #0
    ff98:	beq	fffc <rb_ssl_accept_common+0x104>
    ff9c:	mov	r0, r5
    ffa0:	sub	sp, fp, #16
    ffa4:	pop	{r4, r5, r6, sl, fp, lr}
    ffa8:	b	4fa0 <free@plt>
    ffac:	mov	r5, r0
    ffb0:	cmn	r6, #1
    ffb4:	cmpeq	r5, #2
    ffb8:	beq	10004 <rb_ssl_accept_common+0x10c>
    ffbc:	cmn	r6, #1
    ffc0:	cmpeq	r5, #3
    ffc4:	beq	10018 <rb_ssl_accept_common+0x120>
    ffc8:	bl	5540 <__errno_location@plt>
    ffcc:	mov	r1, #5
    ffd0:	mov	r2, #0
    ffd4:	mov	r3, #0
    ffd8:	str	r1, [r0]
    ffdc:	str	r5, [r4, #64]	; 0x40
    ffe0:	mov	r1, #6
    ffe4:	ldr	r0, [r4, #52]	; 0x34
    ffe8:	ldr	r6, [r0, #132]	; 0x84
    ffec:	ldr	r0, [r0, #140]	; 0x8c
    fff0:	str	r0, [sp]
    fff4:	mov	r0, r4
    fff8:	blx	r6
    fffc:	sub	sp, fp, #16
   10000:	pop	{r4, r5, r6, sl, fp, pc}
   10004:	ldr	r2, [pc, #44]	; 10038 <rb_ssl_accept_common+0x140>
   10008:	mov	r0, r4
   1000c:	mov	r1, #1
   10010:	add	r2, pc, r2
   10014:	b	10028 <rb_ssl_accept_common+0x130>
   10018:	ldr	r2, [pc, #28]	; 1003c <rb_ssl_accept_common+0x144>
   1001c:	mov	r0, r4
   10020:	mov	r1, #2
   10024:	add	r2, pc, r2
   10028:	mov	r3, #0
   1002c:	sub	sp, fp, #16
   10030:	pop	{r4, r5, r6, sl, fp, lr}
   10034:	b	4d78 <rb_setselect@plt>
   10038:	.word	0xfffffee0
   1003c:	.word	0xfffffecc

00010040 <rb_ssl_accept_setup>:
   10040:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   10044:	add	fp, sp, #24
   10048:	mov	r6, r0
   1004c:	ldrb	r0, [r1, #17]
   10050:	mov	r4, r1
   10054:	mov	r5, r3
   10058:	mov	r8, r2
   1005c:	orr	r0, r0, #32
   10060:	strb	r0, [r1, #17]
   10064:	mov	r0, #1
   10068:	mov	r1, #144	; 0x90
   1006c:	bl	4ea4 <calloc@plt>
   10070:	cmp	r0, #0
   10074:	beq	100f4 <rb_ssl_accept_setup+0xb4>
   10078:	str	r0, [r4, #52]	; 0x34
   1007c:	mov	r7, r0
   10080:	rsb	r2, r5, #128	; 0x80
   10084:	cmp	r5, #127	; 0x7f
   10088:	ldr	r0, [r6, #52]	; 0x34
   1008c:	movwhi	r2, #0
   10090:	ldr	r1, [r0, #132]	; 0x84
   10094:	str	r1, [r7, #132]	; 0x84
   10098:	mov	r1, #0
   1009c:	ldr	r0, [r0, #140]	; 0x8c
   100a0:	str	r5, [r7, #128]	; 0x80
   100a4:	str	r0, [r7, #140]	; 0x8c
   100a8:	add	r0, r7, r5
   100ac:	bl	4ee0 <memset@plt>
   100b0:	mov	r0, r7
   100b4:	mov	r1, r8
   100b8:	mov	r2, r5
   100bc:	bl	50a8 <memcpy@plt>
   100c0:	ldr	r2, [pc, #48]	; 100f8 <rb_ssl_accept_setup+0xb8>
   100c4:	mov	r0, r4
   100c8:	mov	r1, #10
   100cc:	mov	r3, #0
   100d0:	add	r2, pc, r2
   100d4:	bl	4cd0 <rb_settimeout@plt>
   100d8:	mov	r0, r4
   100dc:	mov	r1, #0
   100e0:	bl	fe2c <rb_ssl_init_fd>
   100e4:	mov	r0, r4
   100e8:	mov	r1, #0
   100ec:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   100f0:	b	fef8 <rb_ssl_accept_common>
   100f4:	bl	5204 <rb_outofmemory@plt>
   100f8:	.word	0xfffffd20

000100fc <rb_ssl_listen>:
   100fc:	push	{r4, sl, fp, lr}
   10100:	add	fp, sp, #8
   10104:	mov	r4, r0
   10108:	bl	5450 <rb_listen@plt>
   1010c:	mov	r1, #52	; 0x34
   10110:	strb	r1, [r4, #17]
   10114:	pop	{r4, sl, fp, pc}

00010118 <rb_connect_tcp_ssl>:
   10118:	push	{r4, r5, r6, r7, fp, lr}
   1011c:	add	fp, sp, #16
   10120:	sub	sp, sp, #8
   10124:	cmp	r0, #0
   10128:	beq	10180 <rb_connect_tcp_ssl+0x68>
   1012c:	mov	r5, r1
   10130:	mov	r6, r0
   10134:	mov	r0, #1
   10138:	mov	r1, #12
   1013c:	mov	r7, r3
   10140:	mov	r4, r2
   10144:	bl	4ea4 <calloc@plt>
   10148:	cmp	r0, #0
   1014c:	beq	10188 <rb_connect_tcp_ssl+0x70>
   10150:	ldr	r1, [fp, #12]
   10154:	ldr	r2, [fp, #8]
   10158:	str	r7, [r0]
   1015c:	str	r2, [r0, #4]
   10160:	str	r1, [r0, #8]
   10164:	stm	sp, {r0, r1}
   10168:	mov	r0, r6
   1016c:	mov	r1, r5
   10170:	mov	r2, r4
   10174:	ldr	r3, [pc, #16]	; 1018c <rb_connect_tcp_ssl+0x74>
   10178:	add	r3, pc, r3
   1017c:	bl	4d00 <rb_connect_tcp@plt>
   10180:	sub	sp, fp, #16
   10184:	pop	{r4, r5, r6, r7, fp, pc}
   10188:	bl	5204 <rb_outofmemory@plt>
   1018c:	.word	0x00000010

00010190 <rb_ssl_tryconn>:
   10190:	push	{r4, r5, fp, lr}
   10194:	add	fp, sp, #8
   10198:	mov	r4, r2
   1019c:	mov	r5, r0
   101a0:	cmp	r1, #0
   101a4:	beq	101d8 <rb_ssl_tryconn+0x48>
   101a8:	ldr	r0, [r5, #48]	; 0x30
   101ac:	ldr	r2, [r4]
   101b0:	str	r2, [r0, #260]	; 0x104
   101b4:	ldr	r2, [r4, #4]
   101b8:	str	r2, [r0, #264]	; 0x108
   101bc:	mov	r0, r5
   101c0:	bl	c730 <rb_connect_callback>
   101c4:	cmp	r4, #0
   101c8:	popeq	{r4, r5, fp, pc}
   101cc:	mov	r0, r4
   101d0:	pop	{r4, r5, fp, lr}
   101d4:	b	4fa0 <free@plt>
   101d8:	ldrb	r0, [r5, #17]
   101dc:	mov	r3, r4
   101e0:	orr	r0, r0, #32
   101e4:	strb	r0, [r5, #17]
   101e8:	mov	r0, r5
   101ec:	ldr	r1, [r4, #8]
   101f0:	ldr	r2, [pc, #32]	; 10218 <rb_ssl_tryconn+0x88>
   101f4:	add	r2, pc, r2
   101f8:	bl	4cd0 <rb_settimeout@plt>
   101fc:	mov	r0, r5
   10200:	mov	r1, #1
   10204:	bl	fe2c <rb_ssl_init_fd>
   10208:	mov	r0, r5
   1020c:	mov	r1, r4
   10210:	pop	{r4, r5, fp, lr}
   10214:	b	102fc <rb_ssl_connect_common>
   10218:	.word	0x000000c4

0001021c <rb_ssl_start_connected>:
   1021c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   10220:	add	fp, sp, #24
   10224:	cmp	r0, #0
   10228:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1022c:	mov	r5, r1
   10230:	mov	r4, r0
   10234:	mov	r0, #1
   10238:	mov	r1, #12
   1023c:	mov	r8, r3
   10240:	mov	r7, r2
   10244:	bl	4ea4 <calloc@plt>
   10248:	cmp	r0, #0
   1024c:	beq	102b8 <rb_ssl_start_connected+0x9c>
   10250:	mov	r6, r0
   10254:	stm	r0, {r5, r7, r8}
   10258:	mov	r0, #1
   1025c:	mov	r1, #268	; 0x10c
   10260:	bl	4ea4 <calloc@plt>
   10264:	cmp	r0, #0
   10268:	beq	102b8 <rb_ssl_start_connected+0x9c>
   1026c:	str	r0, [r4, #48]	; 0x30
   10270:	str	r5, [r0, #260]	; 0x104
   10274:	str	r7, [r0, #264]	; 0x108
   10278:	mov	r1, r8
   1027c:	mov	r3, r6
   10280:	ldrb	r0, [r4, #17]
   10284:	orr	r0, r0, #32
   10288:	strb	r0, [r4, #17]
   1028c:	mov	r0, r4
   10290:	ldr	r2, [pc, #36]	; 102bc <rb_ssl_start_connected+0xa0>
   10294:	add	r2, pc, r2
   10298:	bl	4cd0 <rb_settimeout@plt>
   1029c:	mov	r0, r4
   102a0:	mov	r1, #1
   102a4:	bl	fe2c <rb_ssl_init_fd>
   102a8:	mov	r0, r4
   102ac:	mov	r1, r6
   102b0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   102b4:	b	102fc <rb_ssl_connect_common>
   102b8:	bl	5204 <rb_outofmemory@plt>
   102bc:	.word	0x00000024

000102c0 <rb_ssl_tryconn_timeout_cb>:
   102c0:	push	{r4, sl, fp, lr}
   102c4:	add	fp, sp, #8
   102c8:	mov	r4, r1
   102cc:	ldr	r1, [r0, #48]	; 0x30
   102d0:	ldr	r2, [r4]
   102d4:	str	r2, [r1, #260]	; 0x104
   102d8:	ldr	r2, [r4, #4]
   102dc:	str	r2, [r1, #264]	; 0x108
   102e0:	mov	r1, #3
   102e4:	bl	c730 <rb_connect_callback>
   102e8:	cmp	r4, #0
   102ec:	popeq	{r4, sl, fp, pc}
   102f0:	mov	r0, r4
   102f4:	pop	{r4, sl, fp, lr}
   102f8:	b	4fa0 <free@plt>

000102fc <rb_ssl_connect_common>:
   102fc:	push	{r4, r5, r6, r7, fp, lr}
   10300:	add	fp, sp, #16
   10304:	mov	r4, r1
   10308:	mov	r5, r0
   1030c:	bl	4ce8 <ERR_get_error@plt>
   10310:	cmp	r0, #0
   10314:	bne	1030c <rb_ssl_connect_common+0x10>
   10318:	ldr	r0, [r5, #56]	; 0x38
   1031c:	bl	5060 <SSL_do_handshake@plt>
   10320:	mov	r7, r0
   10324:	ldr	r0, [r5, #56]	; 0x38
   10328:	mov	r1, r7
   1032c:	bl	5504 <SSL_get_error@plt>
   10330:	cmp	r7, #1
   10334:	bne	1038c <rb_ssl_connect_common+0x90>
   10338:	ldr	r0, [r5, #60]	; 0x3c
   1033c:	mov	r1, #0
   10340:	mov	r2, #0
   10344:	mov	r3, #0
   10348:	add	r0, r0, #1
   1034c:	str	r0, [r5, #60]	; 0x3c
   10350:	mov	r0, r5
   10354:	bl	4cd0 <rb_settimeout@plt>
   10358:	mov	r0, r5
   1035c:	mov	r1, #3
   10360:	mov	r2, #0
   10364:	mov	r3, #0
   10368:	bl	4d78 <rb_setselect@plt>
   1036c:	ldr	r0, [r5, #48]	; 0x30
   10370:	ldr	r1, [r4]
   10374:	str	r1, [r0, #260]	; 0x104
   10378:	ldr	r1, [r4, #4]
   1037c:	str	r1, [r0, #264]	; 0x108
   10380:	mov	r0, r5
   10384:	mov	r1, #0
   10388:	b	103d4 <rb_ssl_connect_common+0xd8>
   1038c:	mov	r6, r0
   10390:	cmn	r7, #1
   10394:	cmpeq	r6, #2
   10398:	beq	103ec <rb_ssl_connect_common+0xf0>
   1039c:	cmn	r7, #1
   103a0:	cmpeq	r6, #3
   103a4:	beq	10400 <rb_ssl_connect_common+0x104>
   103a8:	bl	5540 <__errno_location@plt>
   103ac:	mov	r1, #5
   103b0:	str	r1, [r0]
   103b4:	str	r6, [r5, #64]	; 0x40
   103b8:	ldr	r0, [r5, #48]	; 0x30
   103bc:	ldr	r1, [r4]
   103c0:	str	r1, [r0, #260]	; 0x104
   103c4:	ldr	r1, [r4, #4]
   103c8:	str	r1, [r0, #264]	; 0x108
   103cc:	mov	r0, r5
   103d0:	mov	r1, #6
   103d4:	bl	c730 <rb_connect_callback>
   103d8:	cmp	r4, #0
   103dc:	popeq	{r4, r5, r6, r7, fp, pc}
   103e0:	mov	r0, r4
   103e4:	pop	{r4, r5, r6, r7, fp, lr}
   103e8:	b	4fa0 <free@plt>
   103ec:	ldr	r2, [pc, #40]	; 1041c <rb_ssl_connect_common+0x120>
   103f0:	mov	r0, r5
   103f4:	mov	r1, #1
   103f8:	add	r2, pc, r2
   103fc:	b	10410 <rb_ssl_connect_common+0x114>
   10400:	ldr	r2, [pc, #24]	; 10420 <rb_ssl_connect_common+0x124>
   10404:	mov	r0, r5
   10408:	mov	r1, #2
   1040c:	add	r2, pc, r2
   10410:	mov	r3, r4
   10414:	pop	{r4, r5, r6, r7, fp, lr}
   10418:	b	4d78 <rb_setselect@plt>
   1041c:	.word	0xfffffefc
   10420:	.word	0xfffffee8

00010424 <rb_event_add>:
   10424:	push	{r4, r5, r6, sl, fp, lr}
   10428:	add	fp, sp, #16
   1042c:	sub	sp, sp, #8
   10430:	mov	r4, r2
   10434:	mov	r5, r1
   10438:	mov	r6, r0
   1043c:	cmp	r3, #0
   10440:	ble	10460 <rb_event_add+0x3c>
   10444:	mov	r0, r6
   10448:	mov	r1, r5
   1044c:	mov	r2, r4
   10450:	str	r3, [sp]
   10454:	bl	10480 <rb_event_add_common>
   10458:	sub	sp, fp, #16
   1045c:	pop	{r4, r5, r6, sl, fp, pc}
   10460:	ldr	r0, [pc, #20]	; 1047c <rb_event_add+0x58>
   10464:	mov	r1, r6
   10468:	mov	r2, r3
   1046c:	add	r0, pc, r0
   10470:	bl	51a4 <rb_lib_log@plt>
   10474:	mov	r3, #1
   10478:	b	10444 <rb_event_add+0x20>
   1047c:	.word	0x000092b9

00010480 <rb_event_add_common>:
   10480:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   10484:	add	fp, sp, #24
   10488:	mov	r6, r1
   1048c:	mov	r7, r0
   10490:	mov	r0, #1
   10494:	mov	r1, #48	; 0x30
   10498:	mov	r4, r3
   1049c:	mov	r8, r2
   104a0:	bl	4ea4 <calloc@plt>
   104a4:	cmp	r0, #0
   104a8:	beq	1058c <rb_event_add_common+0x10c>
   104ac:	mov	r5, r0
   104b0:	str	r6, [r0, #12]
   104b4:	mov	r0, #33	; 0x21
   104b8:	bl	5228 <malloc@plt>
   104bc:	cmp	r0, #0
   104c0:	beq	1058c <rb_event_add_common+0x10c>
   104c4:	ldr	r9, [fp, #8]
   104c8:	mov	r1, r7
   104cc:	mov	r2, #33	; 0x21
   104d0:	mov	r6, r0
   104d4:	bl	4f58 <rb_strlcpy@plt>
   104d8:	str	r8, [r5, #16]
   104dc:	str	r6, [r5, #20]
   104e0:	bl	5090 <rb_current_time@plt>
   104e4:	mov	r1, #0
   104e8:	add	r0, r0, r4
   104ec:	str	r1, [r5, #44]	; 0x2c
   104f0:	str	r9, [r5, #24]
   104f4:	str	r0, [r5, #28]
   104f8:	str	r4, [r5, #32]
   104fc:	ldr	r1, [pc, #140]	; 10590 <rb_event_add_common+0x110>
   10500:	ldr	r1, [pc, r1]
   10504:	cmp	r0, r1
   10508:	blt	10514 <rb_event_add_common+0x94>
   1050c:	cmn	r1, #1
   10510:	bne	10520 <rb_event_add_common+0xa0>
   10514:	ldr	r1, [pc, #120]	; 10594 <rb_event_add_common+0x114>
   10518:	add	r1, pc, r1
   1051c:	str	r0, [r1]
   10520:	ldr	r0, [pc, #112]	; 10598 <rb_event_add_common+0x118>
   10524:	mov	r1, #0
   10528:	ldr	r0, [pc, r0]
   1052c:	str	r5, [r5]
   10530:	str	r1, [r5, #4]
   10534:	cmp	r0, #0
   10538:	str	r0, [r5, #8]
   1053c:	beq	1054c <rb_event_add_common+0xcc>
   10540:	add	r0, r0, #4
   10544:	str	r5, [r0]
   10548:	b	10560 <rb_event_add_common+0xe0>
   1054c:	ldr	r0, [pc, #72]	; 1059c <rb_event_add_common+0x11c>
   10550:	add	r0, pc, r0
   10554:	ldr	r1, [r0, #4]!
   10558:	cmp	r1, #0
   1055c:	streq	r5, [r0]
   10560:	ldr	r0, [pc, #56]	; 105a0 <rb_event_add_common+0x120>
   10564:	add	r0, pc, r0
   10568:	str	r5, [r0]
   1056c:	ldr	r1, [r0, #8]
   10570:	add	r1, r1, #1
   10574:	str	r1, [r0, #8]
   10578:	mov	r0, r5
   1057c:	mov	r1, r4
   10580:	bl	e42c <rb_io_sched_event>
   10584:	mov	r0, r5
   10588:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1058c:	bl	5204 <rb_outofmemory@plt>
   10590:	.word	0x0001af4c
   10594:	.word	0x0001af34
   10598:	.word	0x0002d870
   1059c:	.word	0x0002d848
   105a0:	.word	0x0002d834

000105a4 <rb_event_addonce>:
   105a4:	push	{r4, r5, r6, sl, fp, lr}
   105a8:	add	fp, sp, #16
   105ac:	sub	sp, sp, #8
   105b0:	mov	r4, r2
   105b4:	mov	r5, r1
   105b8:	mov	r6, r0
   105bc:	cmp	r3, #0
   105c0:	ble	105e4 <rb_event_addonce+0x40>
   105c4:	mov	r0, #0
   105c8:	mov	r1, r5
   105cc:	mov	r2, r4
   105d0:	str	r0, [sp]
   105d4:	mov	r0, r6
   105d8:	bl	10480 <rb_event_add_common>
   105dc:	sub	sp, fp, #16
   105e0:	pop	{r4, r5, r6, sl, fp, pc}
   105e4:	ldr	r0, [pc, #20]	; 10600 <rb_event_addonce+0x5c>
   105e8:	mov	r1, r6
   105ec:	mov	r2, r3
   105f0:	add	r0, pc, r0
   105f4:	bl	51a4 <rb_lib_log@plt>
   105f8:	mov	r3, #1
   105fc:	b	105c4 <rb_event_addonce+0x20>
   10600:	.word	0x00009179

00010604 <rb_event_delete>:
   10604:	cmp	r0, #0
   10608:	bxeq	lr
   1060c:	mov	r1, #1
   10610:	str	r1, [r0, #44]	; 0x2c
   10614:	b	e498 <rb_io_unsched_event>

00010618 <rb_event_find_delete>:
   10618:	ldr	r3, [pc, #60]	; 1065c <rb_event_find_delete+0x44>
   1061c:	ldr	r3, [pc, r3]
   10620:	b	10628 <rb_event_find_delete+0x10>
   10624:	ldr	r3, [r3, #8]
   10628:	cmp	r3, #0
   1062c:	bxeq	lr
   10630:	ldr	ip, [r3]
   10634:	ldr	r2, [ip, #12]
   10638:	cmp	r2, r0
   1063c:	bne	10624 <rb_event_find_delete+0xc>
   10640:	ldr	r2, [ip, #16]
   10644:	cmp	r2, r1
   10648:	bne	10624 <rb_event_find_delete+0xc>
   1064c:	mov	r0, #1
   10650:	str	r0, [ip, #44]	; 0x2c
   10654:	mov	r0, ip
   10658:	b	e498 <rb_io_unsched_event>
   1065c:	.word	0x0002d77c

00010660 <rb_event_addish>:
   10660:	push	{r4, r5, r6, r7, fp, lr}
   10664:	add	fp, sp, #16
   10668:	sub	sp, sp, #8
   1066c:	mov	r6, r3
   10670:	cmp	r3, #0
   10674:	mov	r4, r2
   10678:	mov	r5, r1
   1067c:	mov	r7, r0
   10680:	rsbmi	r6, r6, #0
   10684:	cmp	r6, #2
   10688:	rsbgt	r6, r6, #0
   1068c:	cmn	r6, #1
   10690:	mov	r3, r6
   10694:	bgt	106e4 <rb_event_addish+0x84>
   10698:	bl	539c <rand@plt>
   1069c:	movw	r1, #19923	; 0x4dd3
   106a0:	movt	r1, #4194	; 0x1062
   106a4:	smmul	r2, r0, r1
   106a8:	asr	r3, r2, #6
   106ac:	add	r2, r3, r2, lsr #31
   106b0:	mov	r3, #1000	; 0x3e8
   106b4:	mls	r0, r2, r3, r0
   106b8:	mov	r2, #0
   106bc:	movw	r3, #21846	; 0x5556
   106c0:	sub	r2, r2, r6, lsl #1
   106c4:	movt	r3, #21845	; 0x5555
   106c8:	smmul	r2, r2, r3
   106cc:	add	r2, r2, r2, lsr #31
   106d0:	mul	r0, r0, r2
   106d4:	smmul	r0, r0, r1
   106d8:	asr	r1, r0, #6
   106dc:	add	r0, r1, r0, lsr #31
   106e0:	add	r3, r0, r2
   106e4:	mov	r0, r7
   106e8:	mov	r1, r5
   106ec:	mov	r2, r4
   106f0:	str	r6, [sp]
   106f4:	bl	10480 <rb_event_add_common>
   106f8:	sub	sp, fp, #16
   106fc:	pop	{r4, r5, r6, r7, fp, pc}

00010700 <rb_run_one_event>:
   10700:	push	{r4, r5, r6, sl, fp, lr}
   10704:	add	fp, sp, #16
   10708:	mov	r4, r0
   1070c:	ldr	r1, [r0, #20]
   10710:	ldr	r0, [pc, #196]	; 107dc <rb_run_one_event+0xdc>
   10714:	mov	r2, #33	; 0x21
   10718:	add	r0, pc, r0
   1071c:	bl	4f58 <rb_strlcpy@plt>
   10720:	ldr	r1, [r4, #12]
   10724:	ldr	r0, [r4, #16]
   10728:	blx	r1
   1072c:	ldr	r0, [r4, #24]
   10730:	cmp	r0, #0
   10734:	beq	107c8 <rb_run_one_event+0xc8>
   10738:	bl	5090 <rb_current_time@plt>
   1073c:	ldr	r6, [r4, #24]
   10740:	mov	r5, r0
   10744:	cmn	r6, #1
   10748:	bgt	10798 <rb_run_one_event+0x98>
   1074c:	bl	539c <rand@plt>
   10750:	movw	r1, #19923	; 0x4dd3
   10754:	movt	r1, #4194	; 0x1062
   10758:	smmul	r2, r0, r1
   1075c:	asr	r3, r2, #6
   10760:	add	r2, r3, r2, lsr #31
   10764:	mov	r3, #1000	; 0x3e8
   10768:	mls	r0, r2, r3, r0
   1076c:	mov	r2, #0
   10770:	movw	r3, #21846	; 0x5556
   10774:	sub	r2, r2, r6, lsl #1
   10778:	movt	r3, #21845	; 0x5555
   1077c:	smmul	r2, r2, r3
   10780:	add	r2, r2, r2, lsr #31
   10784:	mul	r0, r0, r2
   10788:	smmul	r0, r0, r1
   1078c:	asr	r1, r0, #6
   10790:	add	r0, r1, r0, lsr #31
   10794:	add	r6, r0, r2
   10798:	add	r0, r6, r5
   1079c:	str	r0, [r4, #28]
   107a0:	ldr	r1, [pc, #56]	; 107e0 <rb_run_one_event+0xe0>
   107a4:	ldr	r1, [pc, r1]
   107a8:	cmp	r0, r1
   107ac:	blt	107b8 <rb_run_one_event+0xb8>
   107b0:	cmn	r1, #1
   107b4:	popne	{r4, r5, r6, sl, fp, pc}
   107b8:	ldr	r1, [pc, #36]	; 107e4 <rb_run_one_event+0xe4>
   107bc:	add	r1, pc, r1
   107c0:	str	r0, [r1]
   107c4:	pop	{r4, r5, r6, sl, fp, pc}
   107c8:	mov	r0, #1
   107cc:	str	r0, [r4, #44]	; 0x2c
   107d0:	mov	r0, r4
   107d4:	pop	{r4, r5, r6, sl, fp, lr}
   107d8:	b	e498 <rb_io_unsched_event>
   107dc:	.word	0x0002d65c
   107e0:	.word	0x0001aca8
   107e4:	.word	0x0001ac90

000107e8 <rb_event_run>:
   107e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107ec:	add	fp, sp, #28
   107f0:	sub	sp, sp, #4
   107f4:	bl	e4f8 <rb_io_supports_event>
   107f8:	cmp	r0, #0
   107fc:	beq	10808 <rb_event_run+0x20>
   10800:	sub	sp, fp, #28
   10804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10808:	ldr	r9, [pc, #376]	; 10988 <rb_event_run+0x1a0>
   1080c:	mvn	r0, #0
   10810:	add	r9, pc, r9
   10814:	str	r0, [r9]
   10818:	ldr	r4, [pc, #364]	; 1098c <rb_event_run+0x1a4>
   1081c:	ldr	r4, [pc, r4]
   10820:	cmp	r4, #0
   10824:	beq	10800 <rb_event_run+0x18>
   10828:	ldr	r7, [pc, #352]	; 10990 <rb_event_run+0x1a8>
   1082c:	mov	sl, #0
   10830:	add	r7, pc, r7
   10834:	ldr	r5, [r4]
   10838:	ldr	r4, [r4, #8]
   1083c:	ldr	r0, [r5, #44]	; 0x2c
   10840:	cmp	r0, #0
   10844:	beq	108a8 <rb_event_run+0xc0>
   10848:	ldr	r0, [r5, #8]
   1084c:	ldr	r1, [r5, #4]
   10850:	mov	r2, r7
   10854:	cmp	r0, #0
   10858:	streq	r1, [r7, #4]
   1085c:	strne	r1, [r0, #4]
   10860:	ldrne	r1, [r5, #4]
   10864:	cmp	r1, #0
   10868:	addne	r2, r1, #8
   1086c:	str	r0, [r2]
   10870:	str	sl, [r5, #4]
   10874:	str	sl, [r5, #8]
   10878:	ldr	r0, [r7, #8]
   1087c:	sub	r0, r0, #1
   10880:	str	r0, [r7, #8]
   10884:	ldr	r0, [r5, #20]
   10888:	cmp	r0, #0
   1088c:	beq	10894 <rb_event_run+0xac>
   10890:	bl	4fa0 <free@plt>
   10894:	mov	r0, r5
   10898:	bl	4fa0 <free@plt>
   1089c:	cmp	r4, #0
   108a0:	bne	10834 <rb_event_run+0x4c>
   108a4:	b	10800 <rb_event_run+0x18>
   108a8:	ldr	r6, [r5, #28]
   108ac:	bl	5090 <rb_current_time@plt>
   108b0:	cmp	r6, r0
   108b4:	ble	108c0 <rb_event_run+0xd8>
   108b8:	ldr	r0, [r5, #28]
   108bc:	b	10954 <rb_event_run+0x16c>
   108c0:	ldr	r1, [r5, #20]
   108c4:	ldr	r0, [pc, #200]	; 10994 <rb_event_run+0x1ac>
   108c8:	mov	r2, #33	; 0x21
   108cc:	add	r0, pc, r0
   108d0:	bl	4f58 <rb_strlcpy@plt>
   108d4:	ldr	r1, [r5, #12]
   108d8:	ldr	r0, [r5, #16]
   108dc:	blx	r1
   108e0:	ldr	r0, [r5, #24]
   108e4:	cmp	r0, #0
   108e8:	beq	10848 <rb_event_run+0x60>
   108ec:	bl	5090 <rb_current_time@plt>
   108f0:	ldr	r8, [r5, #24]
   108f4:	mov	r6, r0
   108f8:	cmn	r8, #1
   108fc:	bgt	1094c <rb_event_run+0x164>
   10900:	bl	539c <rand@plt>
   10904:	movw	r1, #19923	; 0x4dd3
   10908:	movt	r1, #4194	; 0x1062
   1090c:	mov	r3, r1
   10910:	smmul	r1, r0, r1
   10914:	asr	r2, r1, #6
   10918:	add	r1, r2, r1, lsr #31
   1091c:	mov	r2, #1000	; 0x3e8
   10920:	mls	r0, r1, r2, r0
   10924:	movw	r2, #21846	; 0x5556
   10928:	sub	r1, sl, r8, lsl #1
   1092c:	movt	r2, #21845	; 0x5555
   10930:	smmul	r1, r1, r2
   10934:	add	r1, r1, r1, lsr #31
   10938:	mul	r0, r0, r1
   1093c:	smmul	r0, r0, r3
   10940:	asr	r2, r0, #6
   10944:	add	r0, r2, r0, lsr #31
   10948:	add	r8, r0, r1
   1094c:	add	r0, r8, r6
   10950:	str	r0, [r5, #28]
   10954:	ldr	r1, [pc, #60]	; 10998 <rb_event_run+0x1b0>
   10958:	ldr	r1, [pc, r1]
   1095c:	cmp	r0, r1
   10960:	blt	10978 <rb_event_run+0x190>
   10964:	cmn	r1, #1
   10968:	streq	r0, [r9]
   1096c:	cmp	r4, #0
   10970:	bne	10834 <rb_event_run+0x4c>
   10974:	b	10800 <rb_event_run+0x18>
   10978:	str	r0, [r9]
   1097c:	cmp	r4, #0
   10980:	bne	10834 <rb_event_run+0x4c>
   10984:	b	10800 <rb_event_run+0x18>
   10988:	.word	0x0001ac3c
   1098c:	.word	0x0002d57c
   10990:	.word	0x0002d568
   10994:	.word	0x0002d4a8
   10998:	.word	0x0001aaf4

0001099c <rb_event_io_register_all>:
   1099c:	push	{r4, sl, fp, lr}
   109a0:	add	fp, sp, #8
   109a4:	bl	e4f8 <rb_io_supports_event>
   109a8:	cmp	r0, #0
   109ac:	popeq	{r4, sl, fp, pc}
   109b0:	ldr	r4, [pc, #36]	; 109dc <rb_event_io_register_all+0x40>
   109b4:	ldr	r4, [pc, r4]
   109b8:	cmp	r4, #0
   109bc:	beq	109d8 <rb_event_io_register_all+0x3c>
   109c0:	ldr	r0, [r4]
   109c4:	ldr	r1, [r0, #32]
   109c8:	bl	e42c <rb_io_sched_event>
   109cc:	ldr	r4, [r4, #8]
   109d0:	cmp	r4, #0
   109d4:	bne	109c0 <rb_event_io_register_all+0x24>
   109d8:	pop	{r4, sl, fp, pc}
   109dc:	.word	0x0002d3e4

000109e0 <rb_event_init>:
   109e0:	ldr	r0, [pc, #16]	; 109f8 <rb_event_init+0x18>
   109e4:	ldr	r1, [pc, #16]	; 109fc <rb_event_init+0x1c>
   109e8:	mov	r2, #33	; 0x21
   109ec:	add	r0, pc, r0
   109f0:	add	r1, pc, r1
   109f4:	b	4f58 <rb_strlcpy@plt>
   109f8:	.word	0x0002d388
   109fc:	.word	0x00008dbb

00010a00 <rb_dump_events>:
   10a00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a04:	add	fp, sp, #28
   10a08:	sub	sp, sp, #524	; 0x20c
   10a0c:	ldr	r2, [pc, #180]	; 10ac8 <rb_dump_events+0xc8>
   10a10:	ldr	r3, [pc, #180]	; 10acc <rb_dump_events+0xcc>
   10a14:	add	r6, sp, #8
   10a18:	mov	r9, r1
   10a1c:	mov	sl, r0
   10a20:	mov	r1, #512	; 0x200
   10a24:	mov	r0, r6
   10a28:	add	r2, pc, r2
   10a2c:	add	r3, pc, r3
   10a30:	bl	5408 <snprintf@plt>
   10a34:	mov	r0, r6
   10a38:	mov	r1, r9
   10a3c:	blx	sl
   10a40:	ldr	r1, [pc, #136]	; 10ad0 <rb_dump_events+0xd0>
   10a44:	mov	r0, r6
   10a48:	mov	r2, #512	; 0x200
   10a4c:	add	r1, pc, r1
   10a50:	bl	4f58 <rb_strlcpy@plt>
   10a54:	mov	r0, r6
   10a58:	mov	r1, r9
   10a5c:	blx	sl
   10a60:	ldr	r4, [pc, #108]	; 10ad4 <rb_dump_events+0xd4>
   10a64:	ldr	r4, [pc, r4]
   10a68:	cmp	r4, #0
   10a6c:	beq	10ac0 <rb_dump_events+0xc0>
   10a70:	add	r6, sp, #8
   10a74:	ldr	r5, [r4]
   10a78:	ldr	r7, [r5, #20]
   10a7c:	ldr	r8, [r5, #28]
   10a80:	bl	5090 <rb_current_time@plt>
   10a84:	ldr	r1, [r5, #24]
   10a88:	sub	r0, r8, r0
   10a8c:	mov	r3, r7
   10a90:	stm	sp, {r0, r1}
   10a94:	mov	r0, r6
   10a98:	mov	r1, #512	; 0x200
   10a9c:	ldr	r2, [pc, #52]	; 10ad8 <rb_dump_events+0xd8>
   10aa0:	add	r2, pc, r2
   10aa4:	bl	5408 <snprintf@plt>
   10aa8:	mov	r0, r6
   10aac:	mov	r1, r9
   10ab0:	blx	sl
   10ab4:	ldr	r4, [r4, #8]
   10ab8:	cmp	r4, #0
   10abc:	bne	10a74 <rb_dump_events+0x74>
   10ac0:	sub	sp, fp, #28
   10ac4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ac8:	.word	0x00008d88
   10acc:	.word	0x0002d348
   10ad0:	.word	0x00008d7a
   10ad4:	.word	0x0002d334
   10ad8:	.word	0x00008d52

00010adc <rb_set_back_events>:
   10adc:	ldr	r1, [pc, #40]	; 10b0c <rb_set_back_events+0x30>
   10ae0:	ldr	r1, [pc, r1]
   10ae4:	b	10b00 <rb_set_back_events+0x24>
   10ae8:	ldr	r2, [r1]
   10aec:	ldr	r3, [r2, #28]
   10af0:	subs	r3, r3, r0
   10af4:	movle	r3, #0
   10af8:	str	r3, [r2, #28]
   10afc:	ldr	r1, [r1, #8]
   10b00:	cmp	r1, #0
   10b04:	bxeq	lr
   10b08:	b	10ae8 <rb_set_back_events+0xc>
   10b0c:	.word	0x0002d2b8

00010b10 <rb_event_update>:
   10b10:	push	{r4, r5, fp, lr}
   10b14:	add	fp, sp, #8
   10b18:	cmp	r0, #0
   10b1c:	beq	10ba0 <rb_event_update+0x90>
   10b20:	mov	r5, r1
   10b24:	mov	r4, r0
   10b28:	cmn	r1, #1
   10b2c:	str	r1, [r0, #24]
   10b30:	bgt	10b80 <rb_event_update+0x70>
   10b34:	bl	539c <rand@plt>
   10b38:	movw	r1, #19923	; 0x4dd3
   10b3c:	movt	r1, #4194	; 0x1062
   10b40:	smmul	r2, r0, r1
   10b44:	asr	r3, r2, #6
   10b48:	add	r2, r3, r2, lsr #31
   10b4c:	mov	r3, #1000	; 0x3e8
   10b50:	mls	r0, r2, r3, r0
   10b54:	mov	r2, #0
   10b58:	movw	r3, #21846	; 0x5556
   10b5c:	sub	r2, r2, r5, lsl #1
   10b60:	movt	r3, #21845	; 0x5555
   10b64:	smmul	r2, r2, r3
   10b68:	add	r2, r2, r2, lsr #31
   10b6c:	mul	r0, r0, r2
   10b70:	smmul	r0, r0, r1
   10b74:	asr	r1, r0, #6
   10b78:	add	r0, r1, r0, lsr #31
   10b7c:	add	r5, r0, r2
   10b80:	bl	5090 <rb_current_time@plt>
   10b84:	ldr	r1, [r4, #28]
   10b88:	add	r0, r0, r5
   10b8c:	cmp	r0, r1
   10b90:	popge	{r4, r5, fp, pc}
   10b94:	bl	5090 <rb_current_time@plt>
   10b98:	add	r0, r0, r5
   10b9c:	str	r0, [r4, #28]
   10ba0:	pop	{r4, r5, fp, pc}

00010ba4 <rb_event_next>:
   10ba4:	ldr	r0, [pc, #4]	; 10bb0 <rb_event_next+0xc>
   10ba8:	ldr	r0, [pc, r0]
   10bac:	bx	lr
   10bb0:	.word	0x0001a8a4

00010bb4 <rb_ctime>:
   10bb4:	push	{r4, r5, r6, r7, fp, lr}
   10bb8:	add	fp, sp, #16
   10bbc:	sub	sp, sp, #72	; 0x48
   10bc0:	mov	r6, r1
   10bc4:	str	r0, [fp, #-20]	; 0xffffffec
   10bc8:	sub	r0, fp, #20
   10bcc:	add	r1, sp, #24
   10bd0:	mov	r7, r2
   10bd4:	bl	5270 <gmtime_r@plt>
   10bd8:	ldr	r5, [pc, #144]	; 10c70 <rb_ctime+0xbc>
   10bdc:	cmp	r6, #0
   10be0:	movweq	r7, #128	; 0x80
   10be4:	add	r5, pc, r5
   10be8:	movne	r5, r6
   10bec:	cmp	r0, #0
   10bf0:	beq	10c58 <rb_ctime+0xa4>
   10bf4:	ldm	r0, {r1, r2, r3, r6, ip}
   10bf8:	ldr	r4, [r0, #20]
   10bfc:	ldr	r0, [r0, #24]
   10c00:	str	r1, [sp, #16]
   10c04:	movw	r1, #1900	; 0x76c
   10c08:	str	r2, [sp, #12]
   10c0c:	str	r3, [sp, #8]
   10c10:	str	r6, [sp, #4]
   10c14:	add	r1, r4, r1
   10c18:	str	r1, [sp, #20]
   10c1c:	ldr	r1, [pc, #84]	; 10c78 <rb_ctime+0xc4>
   10c20:	add	r1, pc, r1
   10c24:	ldr	r1, [r1, ip, lsl #2]
   10c28:	str	r1, [sp]
   10c2c:	ldr	r1, [pc, #72]	; 10c7c <rb_ctime+0xc8>
   10c30:	ldr	r2, [pc, #72]	; 10c80 <rb_ctime+0xcc>
   10c34:	add	r1, pc, r1
   10c38:	add	r2, pc, r2
   10c3c:	ldr	r3, [r1, r0, lsl #2]
   10c40:	mov	r0, r5
   10c44:	mov	r1, r7
   10c48:	bl	5408 <snprintf@plt>
   10c4c:	mov	r0, r5
   10c50:	sub	sp, fp, #16
   10c54:	pop	{r4, r5, r6, r7, fp, pc}
   10c58:	ldr	r1, [pc, #20]	; 10c74 <rb_ctime+0xc0>
   10c5c:	mov	r0, r5
   10c60:	mov	r2, r7
   10c64:	add	r1, pc, r1
   10c68:	bl	4f58 <rb_strlcpy@plt>
   10c6c:	b	10c4c <rb_ctime+0x98>
   10c70:	.word	0x0002d1c4
   10c74:	.word	0x000082b6
   10c78:	.word	0x0001a24c
   10c7c:	.word	0x0001a21c
   10c80:	.word	0x00008bdd

00010c84 <rb_date>:
   10c84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   10c88:	add	fp, sp, #24
   10c8c:	sub	sp, sp, #72	; 0x48
   10c90:	mov	r4, r1
   10c94:	str	r0, [fp, #-28]	; 0xffffffe4
   10c98:	sub	r0, fp, #28
   10c9c:	add	r1, sp, #24
   10ca0:	mov	r8, r2
   10ca4:	bl	5270 <gmtime_r@plt>
   10ca8:	cmp	r0, #0
   10cac:	beq	10d10 <rb_date+0x8c>
   10cb0:	ldm	r0, {r1, r2, r3, r5, r6, r7}
   10cb4:	ldr	r0, [r0, #24]
   10cb8:	str	r1, [sp, #20]
   10cbc:	movw	r1, #1900	; 0x76c
   10cc0:	str	r2, [sp, #16]
   10cc4:	str	r3, [sp, #12]
   10cc8:	str	r5, [sp, #4]
   10ccc:	add	r1, r7, r1
   10cd0:	str	r1, [sp, #8]
   10cd4:	ldr	r1, [pc, #80]	; 10d2c <rb_date+0xa8>
   10cd8:	add	r1, pc, r1
   10cdc:	ldr	r1, [r1, r6, lsl #2]
   10ce0:	str	r1, [sp]
   10ce4:	ldr	r1, [pc, #68]	; 10d30 <rb_date+0xac>
   10ce8:	ldr	r2, [pc, #68]	; 10d34 <rb_date+0xb0>
   10cec:	add	r1, pc, r1
   10cf0:	add	r2, pc, r2
   10cf4:	ldr	r3, [r1, r0, lsl #2]
   10cf8:	mov	r0, r4
   10cfc:	mov	r1, r8
   10d00:	bl	5408 <snprintf@plt>
   10d04:	mov	r0, r4
   10d08:	sub	sp, fp, #24
   10d0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   10d10:	ldr	r1, [pc, #16]	; 10d28 <rb_date+0xa4>
   10d14:	mov	r0, r4
   10d18:	mov	r2, r8
   10d1c:	add	r1, pc, r1
   10d20:	bl	4f58 <rb_strlcpy@plt>
   10d24:	b	10d04 <rb_date+0x80>
   10d28:	.word	0x000081fe
   10d2c:	.word	0x0001a1e0
   10d30:	.word	0x0001a1b0
   10d34:	.word	0x00008b40

00010d38 <rb_current_time>:
   10d38:	ldr	r0, [pc, #4]	; 10d44 <rb_current_time+0xc>
   10d3c:	ldr	r0, [pc, r0]
   10d40:	bx	lr
   10d44:	.word	0x0002d0ec

00010d48 <rb_current_time_tv>:
   10d48:	ldr	r0, [pc, #4]	; 10d54 <rb_current_time_tv+0xc>
   10d4c:	add	r0, pc, r0
   10d50:	bx	lr
   10d54:	.word	0x0002d0dc

00010d58 <rb_lib_log>:
   10d58:	sub	sp, sp, #12
   10d5c:	push	{r4, sl, fp, lr}
   10d60:	add	fp, sp, #8
   10d64:	sub	sp, sp, #4
   10d68:	mov	ip, r0
   10d6c:	add	r0, fp, #8
   10d70:	stm	r0, {r1, r2, r3}
   10d74:	ldr	r0, [pc, #72]	; 10dc4 <rb_lib_log+0x6c>
   10d78:	ldr	r0, [pc, r0]
   10d7c:	cmp	r0, #0
   10d80:	beq	10db4 <rb_lib_log+0x5c>
   10d84:	add	r3, fp, #8
   10d88:	mov	r1, #512	; 0x200
   10d8c:	mov	r2, ip
   10d90:	str	r3, [sp]
   10d94:	ldr	r4, [pc, #44]	; 10dc8 <rb_lib_log+0x70>
   10d98:	add	r4, pc, r4
   10d9c:	mov	r0, r4
   10da0:	bl	4e20 <vsnprintf@plt>
   10da4:	ldr	r1, [pc, #32]	; 10dcc <rb_lib_log+0x74>
   10da8:	mov	r0, r4
   10dac:	ldr	r1, [pc, r1]
   10db0:	blx	r1
   10db4:	sub	sp, fp, #8
   10db8:	pop	{r4, sl, fp, lr}
   10dbc:	add	sp, sp, #12
   10dc0:	bx	lr
   10dc4:	.word	0x0002d0b8
   10dc8:	.word	0x0002d09c
   10dcc:	.word	0x0002d084

00010dd0 <rb_lib_die>:
   10dd0:	sub	sp, sp, #12
   10dd4:	push	{r4, sl, fp, lr}
   10dd8:	add	fp, sp, #8
   10ddc:	sub	sp, sp, #4
   10de0:	mov	ip, r0
   10de4:	add	r0, fp, #8
   10de8:	stm	r0, {r1, r2, r3}
   10dec:	ldr	r0, [pc, #76]	; 10e40 <rb_lib_die+0x70>
   10df0:	ldr	r0, [pc, r0]
   10df4:	cmp	r0, #0
   10df8:	beq	10e3c <rb_lib_die+0x6c>
   10dfc:	add	r3, fp, #8
   10e00:	mov	r1, #512	; 0x200
   10e04:	mov	r2, ip
   10e08:	str	r3, [sp]
   10e0c:	ldr	r4, [pc, #48]	; 10e44 <rb_lib_die+0x74>
   10e10:	add	r4, pc, r4
   10e14:	mov	r0, r4
   10e18:	bl	4e20 <vsnprintf@plt>
   10e1c:	ldr	r1, [pc, #36]	; 10e48 <rb_lib_die+0x78>
   10e20:	mov	r0, r4
   10e24:	ldr	r1, [pc, r1]
   10e28:	blx	r1
   10e2c:	sub	sp, fp, #8
   10e30:	pop	{r4, sl, fp, lr}
   10e34:	add	sp, sp, #12
   10e38:	bx	lr
   10e3c:	bl	4cac <abort@plt>
   10e40:	.word	0x0002d244
   10e44:	.word	0x0002d024
   10e48:	.word	0x0002d210

00010e4c <rb_lib_restart>:
   10e4c:	sub	sp, sp, #12
   10e50:	push	{fp, lr}
   10e54:	mov	fp, sp
   10e58:	sub	sp, sp, #4
   10e5c:	mov	ip, r0
   10e60:	add	r0, fp, #8
   10e64:	stm	r0, {r1, r2, r3}
   10e68:	ldr	r0, [pc, #64]	; 10eb0 <rb_lib_restart+0x64>
   10e6c:	ldr	r0, [pc, r0]
   10e70:	cmp	r0, #0
   10e74:	bne	10e7c <rb_lib_restart+0x30>
   10e78:	bl	4cac <abort@plt>
   10e7c:	add	r3, fp, #8
   10e80:	mov	r1, #512	; 0x200
   10e84:	mov	r2, ip
   10e88:	str	r3, [sp]
   10e8c:	ldr	r4, [pc, #32]	; 10eb4 <rb_lib_restart+0x68>
   10e90:	add	r4, pc, r4
   10e94:	mov	r0, r4
   10e98:	bl	4e20 <vsnprintf@plt>
   10e9c:	ldr	r1, [pc, #20]	; 10eb8 <rb_lib_restart+0x6c>
   10ea0:	mov	r0, r4
   10ea4:	ldr	r1, [pc, r1]
   10ea8:	blx	r1
   10eac:	bl	4cac <abort@plt>
   10eb0:	.word	0x0002d1cc
   10eb4:	.word	0x0002cfa4
   10eb8:	.word	0x0002d194

00010ebc <rb_set_time>:
   10ebc:	push	{fp, lr}
   10ec0:	mov	fp, sp
   10ec4:	sub	sp, sp, #8
   10ec8:	mov	r0, sp
   10ecc:	mov	r1, #0
   10ed0:	bl	4e80 <rb_gettimeofday@plt>
   10ed4:	cmn	r0, #1
   10ed8:	beq	10f10 <rb_set_time+0x54>
   10edc:	ldr	r0, [pc, #84]	; 10f38 <rb_set_time+0x7c>
   10ee0:	ldr	r0, [pc, r0]
   10ee4:	ldr	r1, [sp]
   10ee8:	cmp	r0, r1
   10eec:	ble	10ef8 <rb_set_time+0x3c>
   10ef0:	sub	r0, r0, r1
   10ef4:	bl	10adc <rb_set_back_events>
   10ef8:	ldm	sp, {r0, r1}
   10efc:	ldr	r2, [pc, #56]	; 10f3c <rb_set_time+0x80>
   10f00:	add	r2, pc, r2
   10f04:	strd	r0, [r2]
   10f08:	mov	sp, fp
   10f0c:	pop	{fp, pc}
   10f10:	bl	5540 <__errno_location@plt>
   10f14:	ldr	r0, [r0]
   10f18:	bl	4c88 <strerror@plt>
   10f1c:	mov	r1, r0
   10f20:	ldr	r0, [pc, #24]	; 10f40 <rb_set_time+0x84>
   10f24:	add	r0, pc, r0
   10f28:	bl	51a4 <rb_lib_log@plt>
   10f2c:	ldr	r0, [pc, #16]	; 10f44 <rb_set_time+0x88>
   10f30:	add	r0, pc, r0
   10f34:	bl	52d0 <rb_lib_restart@plt>
   10f38:	.word	0x0002cf48
   10f3c:	.word	0x0002cf28
   10f40:	.word	0x00008931
   10f44:	.word	0x00008938

00010f48 <rb_lib_version>:
   10f48:	push	{r4, sl, fp, lr}
   10f4c:	add	fp, sp, #8
   10f50:	sub	sp, sp, #520	; 0x208
   10f54:	add	r4, sp, #8
   10f58:	mov	r1, #512	; 0x200
   10f5c:	mov	r0, r4
   10f60:	bl	fab4 <rb_get_ssl_info>
   10f64:	ldr	r0, [pc, #48]	; 10f9c <rb_lib_version+0x54>
   10f68:	mov	r1, #640	; 0x280
   10f6c:	ldr	r0, [pc, r0]
   10f70:	str	r4, [sp]
   10f74:	ldr	r3, [r0]
   10f78:	ldr	r4, [pc, #32]	; 10fa0 <rb_lib_version+0x58>
   10f7c:	ldr	r2, [pc, #32]	; 10fa4 <rb_lib_version+0x5c>
   10f80:	add	r4, pc, r4
   10f84:	add	r2, pc, r2
   10f88:	mov	r0, r4
   10f8c:	bl	5408 <snprintf@plt>
   10f90:	mov	r0, r4
   10f94:	sub	sp, fp, #8
   10f98:	pop	{r4, sl, fp, pc}
   10f9c:	.word	0x0001a404
   10fa0:	.word	0x0002d0bc
   10fa4:	.word	0x000088f2

00010fa8 <rb_lib_init>:
   10fa8:	push	{r4, r5, r6, r7, fp, lr}
   10fac:	add	fp, sp, #16
   10fb0:	mov	r4, r3
   10fb4:	mov	r5, r2
   10fb8:	mov	r6, r1
   10fbc:	mov	r7, r0
   10fc0:	bl	5210 <rb_set_time@plt>
   10fc4:	ldr	r0, [pc, #84]	; 11020 <rb_lib_init+0x78>
   10fc8:	add	r0, pc, r0
   10fcc:	str	r6, [r0]
   10fd0:	ldr	r0, [pc, #76]	; 11024 <rb_lib_init+0x7c>
   10fd4:	add	r0, pc, r0
   10fd8:	str	r7, [r0]
   10fdc:	ldr	r0, [pc, #68]	; 11028 <rb_lib_init+0x80>
   10fe0:	add	r0, pc, r0
   10fe4:	str	r5, [r0]
   10fe8:	bl	4ebc <rb_event_init@plt>
   10fec:	bl	5258 <rb_init_bh@plt>
   10ff0:	ldr	r1, [fp, #8]
   10ff4:	ldr	r2, [fp, #16]
   10ff8:	mov	r0, r4
   10ffc:	bl	5360 <rb_fdlist_init@plt>
   11000:	bl	4c70 <rb_init_netio@plt>
   11004:	ldr	r0, [fp, #12]
   11008:	bl	5168 <rb_init_rb_dlink_nodes@plt>
   1100c:	bl	e4f8 <rb_io_supports_event>
   11010:	cmp	r0, #0
   11014:	popeq	{r4, r5, r6, r7, fp, pc}
   11018:	pop	{r4, r5, r6, r7, fp, lr}
   1101c:	b	e514 <rb_io_init_event>
   11020:	.word	0x0002d070
   11024:	.word	0x0002ce5c
   11028:	.word	0x0002d054

0001102c <rb_lib_loop>:
   1102c:	push	{fp, lr}
   11030:	mov	fp, sp
   11034:	mov	r4, r0
   11038:	bl	5210 <rb_set_time@plt>
   1103c:	bl	e4f8 <rb_io_supports_event>
   11040:	cmp	r0, #0
   11044:	beq	11054 <rb_lib_loop+0x28>
   11048:	mvn	r0, #0
   1104c:	bl	4e14 <rb_select@plt>
   11050:	b	11048 <rb_lib_loop+0x1c>
   11054:	mov	r5, #1000	; 0x3e8
   11058:	cmp	r4, #0
   1105c:	bne	11074 <rb_lib_loop+0x48>
   11060:	b	1107c <rb_lib_loop+0x50>
   11064:	bl	4e14 <rb_select@plt>
   11068:	bl	5240 <rb_event_run@plt>
   1106c:	cmp	r4, #0
   11070:	beq	1107c <rb_lib_loop+0x50>
   11074:	mov	r0, r4
   11078:	b	11064 <rb_lib_loop+0x38>
   1107c:	bl	548c <rb_event_next@plt>
   11080:	cmp	r0, #1
   11084:	blt	110a4 <rb_lib_loop+0x78>
   11088:	ldr	r1, [pc, #28]	; 110ac <rb_lib_loop+0x80>
   1108c:	ldr	r1, [pc, r1]
   11090:	sub	r1, r0, r1
   11094:	mul	r0, r1, r5
   11098:	cmp	r1, #1
   1109c:	movwlt	r0, #1000	; 0x3e8
   110a0:	b	11064 <rb_lib_loop+0x38>
   110a4:	mvn	r0, #0
   110a8:	b	11064 <rb_lib_loop+0x38>
   110ac:	.word	0x0002cd9c

000110b0 <rb_strtok_r>:
   110b0:	b	52c4 <strtok_r@plt>

000110b4 <rb_base64_encode>:
   110b4:	push	{r4, r5, r6, sl, fp, lr}
   110b8:	add	fp, sp, #16
   110bc:	mov	r4, r0
   110c0:	mov	r0, #0
   110c4:	cmn	r1, #2
   110c8:	poplt	{r4, r5, r6, sl, fp, pc}
   110cc:	mov	r6, r1
   110d0:	add	r0, r1, #2
   110d4:	movw	r1, #21846	; 0x5556
   110d8:	movt	r1, #21845	; 0x5555
   110dc:	smmul	r0, r0, r1
   110e0:	add	r0, r0, r0, lsr #31
   110e4:	add	r1, r0, r0, lsl #2
   110e8:	mov	r0, #1
   110ec:	bl	4ea4 <calloc@plt>
   110f0:	cmp	r0, #0
   110f4:	beq	111f0 <rb_base64_encode+0x13c>
   110f8:	cmp	r6, #3
   110fc:	blt	11178 <rb_base64_encode+0xc4>
   11100:	ldr	ip, [pc, #236]	; 111f4 <rb_base64_encode+0x140>
   11104:	mov	r1, r0
   11108:	add	ip, pc, ip
   1110c:	ldrb	r3, [r4]
   11110:	cmp	r6, #5
   11114:	ldrb	r2, [ip, r3, lsr #2]
   11118:	strb	r2, [r1]
   1111c:	and	r2, r3, #3
   11120:	ldrb	r3, [r4, #1]
   11124:	lsr	r5, r3, #4
   11128:	and	r3, r3, #15
   1112c:	orr	r2, r5, r2, lsl #4
   11130:	ldrb	r2, [ip, r2]
   11134:	strb	r2, [r1, #1]
   11138:	ldrb	r2, [r4, #2]
   1113c:	add	r4, r4, #3
   11140:	and	r5, r2, #63	; 0x3f
   11144:	lsr	r2, r2, #6
   11148:	orr	r2, r2, r3, lsl #2
   1114c:	ldrb	r5, [ip, r5]
   11150:	sub	r3, r6, #3
   11154:	ldrb	r2, [ip, r2]
   11158:	mov	r6, r3
   1115c:	strb	r5, [r1, #3]
   11160:	strb	r2, [r1, #2]
   11164:	add	r1, r1, #4
   11168:	bgt	1110c <rb_base64_encode+0x58>
   1116c:	cmp	r3, #0
   11170:	bne	11188 <rb_base64_encode+0xd4>
   11174:	b	111e4 <rb_base64_encode+0x130>
   11178:	mov	r3, r6
   1117c:	mov	r1, r0
   11180:	cmp	r3, #0
   11184:	beq	111e4 <rb_base64_encode+0x130>
   11188:	ldrb	r6, [r4]
   1118c:	ldr	r2, [pc, #100]	; 111f8 <rb_base64_encode+0x144>
   11190:	cmp	r3, #2
   11194:	add	r2, pc, r2
   11198:	ldrb	r5, [r2, r6, lsr #2]
   1119c:	strb	r5, [r1]
   111a0:	mov	r5, #48	; 0x30
   111a4:	and	r5, r5, r6, lsl #4
   111a8:	blt	111c8 <rb_base64_encode+0x114>
   111ac:	ldrb	r3, [r4, #1]
   111b0:	and	r6, r3, #15
   111b4:	orr	r3, r5, r3, lsr #4
   111b8:	ldrb	r6, [r2, r6, lsl #2]
   111bc:	ldrb	r2, [r2, r3]
   111c0:	strb	r6, [r1, #2]
   111c4:	b	111d4 <rb_base64_encode+0x120>
   111c8:	ldrb	r2, [r2, r5]
   111cc:	mov	r3, #61	; 0x3d
   111d0:	strb	r3, [r1, #2]
   111d4:	strb	r2, [r1, #1]
   111d8:	mov	r2, #61	; 0x3d
   111dc:	strb	r2, [r1, #3]
   111e0:	add	r1, r1, #4
   111e4:	mov	r2, #0
   111e8:	strb	r2, [r1]
   111ec:	pop	{r4, r5, r6, sl, fp, pc}
   111f0:	bl	5204 <rb_outofmemory@plt>
   111f4:	.word	0x00008785
   111f8:	.word	0x000086f9

000111fc <rb_base64_decode>:
   111fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11200:	add	fp, sp, #24
   11204:	mov	r5, r1
   11208:	mov	r6, r0
   1120c:	add	r1, r1, #1
   11210:	mov	r0, #1
   11214:	mov	r8, r2
   11218:	bl	4ea4 <calloc@plt>
   1121c:	cmp	r0, #0
   11220:	beq	11338 <rb_base64_decode+0x13c>
   11224:	ldr	r3, [pc, #272]	; 1133c <rb_base64_decode+0x140>
   11228:	mov	r1, #0
   1122c:	mov	r2, #0
   11230:	add	r3, pc, r3
   11234:	b	11244 <rb_base64_decode+0x48>
   11238:	strb	r7, [r0, r1]
   1123c:	mov	r1, ip
   11240:	add	r2, r2, #1
   11244:	ldrb	r4, [r6], #1
   11248:	cmp	r4, #0
   1124c:	beq	11328 <rb_base64_decode+0x12c>
   11250:	subs	r5, r5, #1
   11254:	blt	112e4 <rb_base64_decode+0xe8>
   11258:	cmp	r4, #61	; 0x3d
   1125c:	beq	112e4 <rb_base64_decode+0xe8>
   11260:	add	r7, r3, r4, lsl #1
   11264:	ldrsh	r4, [r7]
   11268:	cmp	r4, #0
   1126c:	blt	11244 <rb_base64_decode+0x48>
   11270:	and	r7, r2, #3
   11274:	cmp	r7, #1
   11278:	beq	112bc <rb_base64_decode+0xc0>
   1127c:	cmp	r7, #2
   11280:	beq	112a4 <rb_base64_decode+0xa8>
   11284:	cmp	r7, #3
   11288:	bne	112d4 <rb_base64_decode+0xd8>
   1128c:	ldrb	r7, [r0, r1]
   11290:	add	r2, r2, #1
   11294:	orr	r7, r7, r4
   11298:	strb	r7, [r0, r1]
   1129c:	add	r1, r1, #1
   112a0:	b	11244 <rb_base64_decode+0x48>
   112a4:	add	ip, r1, #1
   112a8:	lsl	r7, r4, #6
   112ac:	strb	r7, [r0, ip]
   112b0:	ldrb	r7, [r0, r1]
   112b4:	orr	r7, r7, r4, lsr #2
   112b8:	b	11238 <rb_base64_decode+0x3c>
   112bc:	add	ip, r1, #1
   112c0:	lsl	r7, r4, #4
   112c4:	strb	r7, [r0, ip]
   112c8:	ldrb	r7, [r0, r1]
   112cc:	orr	r7, r7, r4, lsr #4
   112d0:	b	11238 <rb_base64_decode+0x3c>
   112d4:	lsl	r7, r4, #2
   112d8:	add	r2, r2, #1
   112dc:	strb	r7, [r0, r1]
   112e0:	b	11244 <rb_base64_decode+0x48>
   112e4:	cmp	r4, #61	; 0x3d
   112e8:	bne	11328 <rb_base64_decode+0x12c>
   112ec:	and	r2, r2, #3
   112f0:	cmp	r2, #3
   112f4:	beq	11314 <rb_base64_decode+0x118>
   112f8:	cmp	r2, #2
   112fc:	beq	1131c <rb_base64_decode+0x120>
   11300:	cmp	r2, #1
   11304:	bne	11328 <rb_base64_decode+0x12c>
   11308:	bl	4fa0 <free@plt>
   1130c:	mov	r0, #0
   11310:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11314:	mov	r2, r1
   11318:	b	11320 <rb_base64_decode+0x124>
   1131c:	add	r2, r1, #1
   11320:	mov	r3, #0
   11324:	strb	r3, [r0, r2]
   11328:	mov	r2, #0
   1132c:	strb	r2, [r0, r1]
   11330:	str	r1, [r8]
   11334:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11338:	bl	5204 <rb_outofmemory@plt>
   1133c:	.word	0x00008776

00011340 <rb_outofmemory>:
   11340:	push	{fp, lr}
   11344:	mov	fp, sp
   11348:	ldr	r0, [pc, #48]	; 11380 <rb_outofmemory+0x40>
   1134c:	add	r0, pc, r0
   11350:	ldrb	r1, [r0]
   11354:	cmp	r1, #1
   11358:	bne	11360 <rb_outofmemory+0x20>
   1135c:	bl	4cac <abort@plt>
   11360:	mov	r1, #1
   11364:	strb	r1, [r0]
   11368:	ldr	r0, [pc, #20]	; 11384 <rb_outofmemory+0x44>
   1136c:	add	r0, pc, r0
   11370:	bl	51a4 <rb_lib_log@plt>
   11374:	ldr	r0, [pc, #12]	; 11388 <rb_outofmemory+0x48>
   11378:	add	r0, pc, r0
   1137c:	bl	52d0 <rb_lib_restart@plt>
   11380:	.word	0x0002cf70
   11384:	.word	0x0000883a
   11388:	.word	0x00008852

0001138c <rb_linebuf_init>:
   1138c:	push	{fp, lr}
   11390:	mov	fp, sp
   11394:	ldr	r2, [pc, #28]	; 113b8 <rb_linebuf_init+0x2c>
   11398:	mov	r1, r0
   1139c:	movw	r0, #1036	; 0x40c
   113a0:	add	r2, pc, r2
   113a4:	bl	5318 <rb_bh_create@plt>
   113a8:	ldr	r1, [pc, #12]	; 113bc <rb_linebuf_init+0x30>
   113ac:	add	r1, pc, r1
   113b0:	str	r0, [r1]
   113b4:	pop	{fp, pc}
   113b8:	.word	0x00008838
   113bc:	.word	0x0002cf14

000113c0 <rb_linebuf_newbuf>:
   113c0:	vmov.i32	q8, #0	; 0x00000000
   113c4:	mov	r1, #12
   113c8:	vst1.32	{d16-d17}, [r0], r1
   113cc:	vst1.32	{d16-d17}, [r0]
   113d0:	bx	lr

000113d4 <rb_linebuf_donebuf>:
   113d4:	push	{r4, r5, r6, r7, fp, lr}
   113d8:	add	fp, sp, #16
   113dc:	mov	r4, r0
   113e0:	ldr	r0, [r0]
   113e4:	cmp	r0, #0
   113e8:	popeq	{r4, r5, r6, r7, fp, pc}
   113ec:	ldr	r7, [pc, #176]	; 114a4 <rb_linebuf_donebuf+0xd0>
   113f0:	mov	r6, #0
   113f4:	add	r7, pc, r7
   113f8:	ldr	r1, [r0, #8]
   113fc:	ldr	r2, [r0, #4]
   11400:	ldr	r5, [r0]
   11404:	mov	r3, r4
   11408:	cmp	r1, #0
   1140c:	streq	r2, [r4, #4]
   11410:	strne	r2, [r1, #4]
   11414:	ldrne	r2, [r0, #4]
   11418:	cmp	r2, #0
   1141c:	addne	r3, r2, #8
   11420:	str	r1, [r3]
   11424:	str	r6, [r0, #4]
   11428:	str	r6, [r0, #8]
   1142c:	ldr	r1, [r4, #8]
   11430:	sub	r1, r1, #1
   11434:	str	r1, [r4, #8]
   11438:	bl	50e4 <rb_free_rb_dlink_node@plt>
   1143c:	ldr	r1, [r4, #16]
   11440:	ldr	r2, [r4, #24]
   11444:	ldr	r0, [r4, #12]
   11448:	sub	r1, r1, #1
   1144c:	sub	r2, r2, #1
   11450:	str	r1, [r4, #16]
   11454:	ldr	r1, [r5, #1028]	; 0x404
   11458:	str	r2, [r4, #24]
   1145c:	sub	r0, r0, r1
   11460:	str	r0, [r4, #12]
   11464:	ldr	r0, [r5, #1032]	; 0x408
   11468:	subs	r0, r0, #1
   1146c:	str	r0, [r5, #1032]	; 0x408
   11470:	bne	11494 <rb_linebuf_donebuf+0xc0>
   11474:	ldr	r0, [pc, #44]	; 114a8 <rb_linebuf_donebuf+0xd4>
   11478:	mov	r1, r5
   1147c:	ldr	r0, [pc, r0]
   11480:	sub	r0, r0, #1
   11484:	str	r0, [r7]
   11488:	ldr	r0, [pc, #28]	; 114ac <rb_linebuf_donebuf+0xd8>
   1148c:	ldr	r0, [pc, r0]
   11490:	bl	515c <rb_bh_free@plt>
   11494:	ldr	r0, [r4]
   11498:	cmp	r0, #0
   1149c:	bne	113f8 <rb_linebuf_donebuf+0x24>
   114a0:	pop	{r4, r5, r6, r7, fp, pc}
   114a4:	.word	0x0002eed4
   114a8:	.word	0x0002ee4c
   114ac:	.word	0x0002ce34

000114b0 <rb_linebuf_parse>:
   114b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114b4:	add	fp, sp, #28
   114b8:	sub	sp, sp, #4
   114bc:	mov	r9, r0
   114c0:	ldr	r0, [r0, #4]
   114c4:	mov	r8, r3
   114c8:	mov	r5, r2
   114cc:	mov	r6, r1
   114d0:	cmp	r0, #0
   114d4:	beq	11500 <rb_linebuf_parse+0x50>
   114d8:	ldr	r1, [r0]
   114dc:	mov	r0, r9
   114e0:	mov	r2, r6
   114e4:	mov	r3, r5
   114e8:	cmp	r8, #0
   114ec:	beq	11510 <rb_linebuf_parse+0x60>
   114f0:	bl	11834 <rb_linebuf_copy_raw>
   114f4:	cmn	r0, #1
   114f8:	bne	1151c <rb_linebuf_parse+0x6c>
   114fc:	b	11630 <rb_linebuf_parse+0x180>
   11500:	mov	r4, #0
   11504:	cmp	r5, #1
   11508:	bge	1153c <rb_linebuf_parse+0x8c>
   1150c:	b	11634 <rb_linebuf_parse+0x184>
   11510:	bl	1164c <rb_linebuf_copy_line>
   11514:	cmn	r0, #1
   11518:	beq	11630 <rb_linebuf_parse+0x180>
   1151c:	mov	r4, #1
   11520:	cmp	r0, r5
   11524:	beq	11634 <rb_linebuf_parse+0x184>
   11528:	add	r6, r6, r0
   1152c:	sub	r5, r5, r0
   11530:	mov	r4, #1
   11534:	cmp	r5, #1
   11538:	blt	11634 <rb_linebuf_parse+0x184>
   1153c:	mov	sl, #0
   11540:	b	1154c <rb_linebuf_parse+0x9c>
   11544:	mov	r1, r9
   11548:	b	1159c <rb_linebuf_parse+0xec>
   1154c:	ldr	r0, [pc, #236]	; 11640 <rb_linebuf_parse+0x190>
   11550:	ldr	r0, [pc, r0]
   11554:	bl	51d4 <rb_bh_alloc@plt>
   11558:	mov	r7, r0
   1155c:	cmp	r0, #0
   11560:	beq	115e4 <rb_linebuf_parse+0x134>
   11564:	ldr	r0, [pc, #216]	; 11644 <rb_linebuf_parse+0x194>
   11568:	ldr	r0, [pc, r0]
   1156c:	ldr	r1, [pc, #212]	; 11648 <rb_linebuf_parse+0x198>
   11570:	add	r0, r0, #1
   11574:	add	r1, pc, r1
   11578:	str	r0, [r1]
   1157c:	bl	53d8 <rb_make_rb_dlink_node@plt>
   11580:	str	r7, [r0]
   11584:	str	sl, [r0, #8]
   11588:	ldr	r1, [r9, #4]
   1158c:	cmp	r1, #0
   11590:	str	r1, [r0, #4]
   11594:	beq	115a4 <rb_linebuf_parse+0xf4>
   11598:	add	r1, r1, #8
   1159c:	str	r0, [r1]
   115a0:	b	115b0 <rb_linebuf_parse+0x100>
   115a4:	ldr	r1, [r9]
   115a8:	cmp	r1, #0
   115ac:	beq	11544 <rb_linebuf_parse+0x94>
   115b0:	str	r0, [r9, #4]
   115b4:	ldr	r0, [r9, #8]
   115b8:	add	r0, r0, #1
   115bc:	str	r0, [r9, #8]
   115c0:	ldr	r0, [r7, #1032]	; 0x408
   115c4:	add	r0, r0, #1
   115c8:	str	r0, [r7, #1032]	; 0x408
   115cc:	ldr	r0, [r9, #16]
   115d0:	ldr	r1, [r9, #24]
   115d4:	add	r0, r0, #1
   115d8:	str	r0, [r9, #16]
   115dc:	add	r0, r1, #1
   115e0:	str	r0, [r9, #24]
   115e4:	mov	r0, r9
   115e8:	mov	r1, r7
   115ec:	mov	r2, r6
   115f0:	mov	r3, r5
   115f4:	cmp	r8, #0
   115f8:	beq	1160c <rb_linebuf_parse+0x15c>
   115fc:	bl	11834 <rb_linebuf_copy_raw>
   11600:	cmn	r0, #1
   11604:	bne	11618 <rb_linebuf_parse+0x168>
   11608:	b	11630 <rb_linebuf_parse+0x180>
   1160c:	bl	1164c <rb_linebuf_copy_line>
   11610:	cmn	r0, #1
   11614:	beq	11630 <rb_linebuf_parse+0x180>
   11618:	sub	r5, r5, r0
   1161c:	add	r6, r6, r0
   11620:	add	r4, r4, #1
   11624:	cmp	r5, #0
   11628:	bgt	1154c <rb_linebuf_parse+0x9c>
   1162c:	b	11634 <rb_linebuf_parse+0x184>
   11630:	mvn	r4, #0
   11634:	mov	r0, r4
   11638:	sub	sp, fp, #28
   1163c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11640:	.word	0x0002cd70
   11644:	.word	0x0002ed60
   11648:	.word	0x0002ed54

0001164c <rb_linebuf_copy_line>:
   1164c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11650:	add	fp, sp, #24
   11654:	mov	r7, #0
   11658:	mov	r8, r0
   1165c:	strb	r7, [r1, #1026]	; 0x402
   11660:	ldrb	r0, [r1, #1025]	; 0x401
   11664:	cmp	r0, #1
   11668:	beq	1182c <rb_linebuf_copy_line+0x1e0>
   1166c:	ldr	r9, [r1, #1028]	; 0x404
   11670:	mov	r4, r1
   11674:	mov	r7, #0
   11678:	cmp	r3, #0
   1167c:	beq	116e0 <rb_linebuf_copy_line+0x94>
   11680:	rsb	r0, r3, #0
   11684:	add	r1, r2, #1
   11688:	ldrb	r5, [r1, #-1]
   1168c:	cmp	r5, #13
   11690:	cmpne	r5, #10
   11694:	beq	116a8 <rb_linebuf_copy_line+0x5c>
   11698:	adds	r0, r0, #1
   1169c:	add	r1, r1, #1
   116a0:	bne	11688 <rb_linebuf_copy_line+0x3c>
   116a4:	b	116e0 <rb_linebuf_copy_line+0x94>
   116a8:	add	r6, r0, #1
   116ac:	mov	r7, #0
   116b0:	b	116bc <rb_linebuf_copy_line+0x70>
   116b4:	ldrb	r5, [r1, -r7]
   116b8:	sub	r7, r7, #1
   116bc:	uxtb	r5, r5
   116c0:	cmp	r5, #13
   116c4:	cmpne	r5, #10
   116c8:	bne	116dc <rb_linebuf_copy_line+0x90>
   116cc:	cmp	r6, r7
   116d0:	bne	116b4 <rb_linebuf_copy_line+0x68>
   116d4:	mov	r7, #0
   116d8:	b	116e0 <rb_linebuf_copy_line+0x94>
   116dc:	sub	r7, r7, r0
   116e0:	sub	r7, r3, r7
   116e4:	cmn	r7, #1
   116e8:	mvneq	r7, #0
   116ec:	moveq	r0, r7
   116f0:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   116f4:	movw	r0, #1022	; 0x3fe
   116f8:	add	r6, r4, r9
   116fc:	sub	r5, r0, r9
   11700:	cmp	r7, r5
   11704:	ble	11778 <rb_linebuf_copy_line+0x12c>
   11708:	mov	r1, r2
   1170c:	mov	r0, r6
   11710:	mov	r2, r5
   11714:	bl	50a8 <memcpy@plt>
   11718:	mov	r0, #0
   1171c:	cmp	r5, #0
   11720:	strb	r0, [r4, #1022]	; 0x3fe
   11724:	beq	11754 <rb_linebuf_copy_line+0x108>
   11728:	movw	r1, #1022	; 0x3fe
   1172c:	movw	r2, #1021	; 0x3fd
   11730:	sub	r1, r9, r1
   11734:	add	r2, r4, r2
   11738:	ldrb	r3, [r2]
   1173c:	cmp	r3, #13
   11740:	cmpne	r3, #10
   11744:	bne	11754 <rb_linebuf_copy_line+0x108>
   11748:	strb	r0, [r2], #-1
   1174c:	adds	r1, r1, #1
   11750:	bne	11738 <rb_linebuf_copy_line+0xec>
   11754:	movw	r0, #1022	; 0x3fe
   11758:	mov	r1, #1
   1175c:	str	r0, [r4, #1028]	; 0x404
   11760:	strb	r1, [r4, #1025]	; 0x401
   11764:	ldr	r1, [r8, #12]
   11768:	add	r0, r1, r0
   1176c:	str	r0, [r8, #12]
   11770:	mov	r0, r7
   11774:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11778:	mov	r1, r2
   1177c:	mov	r0, r6
   11780:	mov	r2, r7
   11784:	bl	50a8 <memcpy@plt>
   11788:	mov	r0, #0
   1178c:	mov	r1, r6
   11790:	strb	r0, [r1, r7]!
   11794:	ldrb	r2, [r1, #-1]
   11798:	cmp	r2, #10
   1179c:	cmpne	r2, #13
   117a0:	bne	117e8 <rb_linebuf_copy_line+0x19c>
   117a4:	cmp	r7, #0
   117a8:	beq	1180c <rb_linebuf_copy_line+0x1c0>
   117ac:	sub	r1, r6, #2
   117b0:	mov	r6, r7
   117b4:	b	117c0 <rb_linebuf_copy_line+0x174>
   117b8:	ldrb	r2, [r1, r6]
   117bc:	mov	r6, r3
   117c0:	uxtb	r0, r2
   117c4:	cmp	r0, #13
   117c8:	cmpne	r0, #10
   117cc:	bne	11808 <rb_linebuf_copy_line+0x1bc>
   117d0:	add	r2, r1, r6
   117d4:	mov	r0, #0
   117d8:	subs	r3, r6, #1
   117dc:	strb	r0, [r2, #1]
   117e0:	bne	117b8 <rb_linebuf_copy_line+0x16c>
   117e4:	b	1180c <rb_linebuf_copy_line+0x1c0>
   117e8:	ldr	r0, [r8, #12]
   117ec:	add	r0, r0, r7
   117f0:	str	r0, [r8, #12]
   117f4:	mov	r0, #0
   117f8:	strb	r0, [r4, #1025]	; 0x401
   117fc:	ldr	r0, [r4, #1028]	; 0x404
   11800:	add	r0, r0, r7
   11804:	b	11828 <rb_linebuf_copy_line+0x1dc>
   11808:	mov	r0, r6
   1180c:	mov	r1, #1
   11810:	strb	r1, [r4, #1025]	; 0x401
   11814:	ldr	r1, [r8, #12]
   11818:	add	r1, r1, r0
   1181c:	str	r1, [r8, #12]
   11820:	ldr	r1, [r4, #1028]	; 0x404
   11824:	add	r0, r1, r0
   11828:	str	r0, [r4, #1028]	; 0x404
   1182c:	mov	r0, r7
   11830:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00011834 <rb_linebuf_copy_raw>:
   11834:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11838:	add	fp, sp, #24
   1183c:	mov	r8, r0
   11840:	mov	r0, #1
   11844:	mov	r6, #0
   11848:	strb	r0, [r1, #1026]	; 0x402
   1184c:	ldrb	r0, [r1, #1025]	; 0x401
   11850:	cmp	r0, #1
   11854:	beq	1198c <rb_linebuf_copy_raw+0x158>
   11858:	ldr	ip, [r1, #1028]	; 0x404
   1185c:	mov	r4, r1
   11860:	mov	r6, #0
   11864:	cmp	r3, #0
   11868:	beq	118cc <rb_linebuf_copy_raw+0x98>
   1186c:	rsb	r1, r3, #0
   11870:	add	r7, r2, #1
   11874:	ldrb	r0, [r7, #-1]
   11878:	cmp	r0, #13
   1187c:	cmpne	r0, #10
   11880:	beq	11894 <rb_linebuf_copy_raw+0x60>
   11884:	adds	r1, r1, #1
   11888:	add	r7, r7, #1
   1188c:	bne	11874 <rb_linebuf_copy_raw+0x40>
   11890:	b	118cc <rb_linebuf_copy_raw+0x98>
   11894:	add	r5, r1, #1
   11898:	mov	r6, #0
   1189c:	b	118a8 <rb_linebuf_copy_raw+0x74>
   118a0:	ldrb	r0, [r7, -r6]
   118a4:	sub	r6, r6, #1
   118a8:	uxtb	r0, r0
   118ac:	cmp	r0, #13
   118b0:	cmpne	r0, #10
   118b4:	bne	118c8 <rb_linebuf_copy_raw+0x94>
   118b8:	cmp	r5, r6
   118bc:	bne	118a0 <rb_linebuf_copy_raw+0x6c>
   118c0:	mov	r6, #0
   118c4:	b	118cc <rb_linebuf_copy_raw+0x98>
   118c8:	sub	r6, r6, r1
   118cc:	sub	r6, r3, r6
   118d0:	cmn	r6, #1
   118d4:	mvneq	r6, #0
   118d8:	moveq	r0, r6
   118dc:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   118e0:	movw	r9, #1022	; 0x3fe
   118e4:	add	r5, r4, ip
   118e8:	sub	r7, r9, ip
   118ec:	cmp	r6, r7
   118f0:	ble	1192c <rb_linebuf_copy_raw+0xf8>
   118f4:	mov	r1, r2
   118f8:	mov	r0, r5
   118fc:	mov	r2, r7
   11900:	bl	50a8 <memcpy@plt>
   11904:	mov	r0, #0
   11908:	strb	r0, [r4, #1022]	; 0x3fe
   1190c:	mov	r0, #1
   11910:	strb	r0, [r4, #1025]	; 0x401
   11914:	str	r9, [r4, #1028]	; 0x404
   11918:	ldr	r0, [r8, #12]
   1191c:	add	r0, r0, r9
   11920:	str	r0, [r8, #12]
   11924:	mov	r0, r7
   11928:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1192c:	mov	r1, r2
   11930:	mov	r0, r5
   11934:	mov	r2, r6
   11938:	bl	50a8 <memcpy@plt>
   1193c:	mov	r0, #0
   11940:	strb	r0, [r5, r6]!
   11944:	ldrb	r0, [r5, #-1]
   11948:	cmp	r0, #10
   1194c:	cmpne	r0, #13
   11950:	bne	1196c <rb_linebuf_copy_raw+0x138>
   11954:	mov	r0, #1
   11958:	strb	r0, [r4, #1025]	; 0x401
   1195c:	ldr	r0, [r8, #12]
   11960:	add	r0, r0, r6
   11964:	str	r0, [r8, #12]
   11968:	b	11980 <rb_linebuf_copy_raw+0x14c>
   1196c:	ldr	r0, [r8, #12]
   11970:	add	r0, r0, r6
   11974:	str	r0, [r8, #12]
   11978:	mov	r0, #0
   1197c:	strb	r0, [r4, #1025]	; 0x401
   11980:	ldr	r0, [r4, #1028]	; 0x404
   11984:	add	r0, r0, r6
   11988:	str	r0, [r4, #1028]	; 0x404
   1198c:	mov	r0, r6
   11990:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00011994 <rb_linebuf_get>:
   11994:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11998:	add	fp, sp, #24
   1199c:	mov	r5, r0
   119a0:	ldr	r0, [r0]
   119a4:	mov	r6, #0
   119a8:	cmp	r0, #0
   119ac:	beq	11ac4 <rb_linebuf_get+0x130>
   119b0:	ldr	r4, [r0]
   119b4:	mov	r9, r1
   119b8:	cmp	r3, #0
   119bc:	bne	119cc <rb_linebuf_get+0x38>
   119c0:	ldrb	r0, [r4, #1025]	; 0x401
   119c4:	cmp	r0, #0
   119c8:	beq	11ac4 <rb_linebuf_get+0x130>
   119cc:	ldr	r3, [r4, #1028]	; 0x404
   119d0:	ldr	r8, [fp, #8]
   119d4:	cmp	r3, r2
   119d8:	subgt	r3, r2, #1
   119dc:	cmp	r8, #0
   119e0:	bne	11a24 <rb_linebuf_get+0x90>
   119e4:	ldrb	r0, [r4, #1026]	; 0x402
   119e8:	cmp	r0, #0
   119ec:	beq	11a24 <rb_linebuf_get+0x90>
   119f0:	mov	r6, #0
   119f4:	cmp	r3, #0
   119f8:	beq	11a28 <rb_linebuf_get+0x94>
   119fc:	rsb	r0, r3, #0
   11a00:	mov	r1, r4
   11a04:	ldrb	r2, [r1]
   11a08:	cmp	r2, #13
   11a0c:	cmpne	r2, #10
   11a10:	bne	11afc <rb_linebuf_get+0x168>
   11a14:	adds	r0, r0, #1
   11a18:	add	r1, r1, #1
   11a1c:	bne	11a04 <rb_linebuf_get+0x70>
   11a20:	b	11a2c <rb_linebuf_get+0x98>
   11a24:	mov	r6, r3
   11a28:	mov	r1, r4
   11a2c:	mov	r0, r9
   11a30:	mov	r2, r6
   11a34:	bl	50a8 <memcpy@plt>
   11a38:	cmp	r8, #0
   11a3c:	mov	r3, r5
   11a40:	moveq	r0, #0
   11a44:	strbeq	r0, [r9, r6]
   11a48:	ldr	r0, [r5]
   11a4c:	ldr	r1, [r0, #8]
   11a50:	ldr	r2, [r0, #4]
   11a54:	cmp	r1, #0
   11a58:	streq	r2, [r5, #4]
   11a5c:	strne	r2, [r1, #4]
   11a60:	ldrne	r2, [r0, #4]
   11a64:	cmp	r2, #0
   11a68:	addne	r3, r2, #8
   11a6c:	str	r1, [r3]
   11a70:	mov	r1, #0
   11a74:	str	r1, [r0, #4]
   11a78:	str	r1, [r0, #8]
   11a7c:	ldr	r1, [r5, #8]
   11a80:	sub	r1, r1, #1
   11a84:	str	r1, [r5, #8]
   11a88:	bl	50e4 <rb_free_rb_dlink_node@plt>
   11a8c:	ldr	r1, [r5, #16]
   11a90:	ldr	r2, [r5, #24]
   11a94:	ldr	r0, [r5, #12]
   11a98:	sub	r1, r1, #1
   11a9c:	sub	r2, r2, #1
   11aa0:	str	r1, [r5, #16]
   11aa4:	ldr	r1, [r4, #1028]	; 0x404
   11aa8:	str	r2, [r5, #24]
   11aac:	sub	r0, r0, r1
   11ab0:	str	r0, [r5, #12]
   11ab4:	ldr	r0, [r4, #1032]	; 0x408
   11ab8:	subs	r0, r0, #1
   11abc:	str	r0, [r4, #1032]	; 0x408
   11ac0:	beq	11acc <rb_linebuf_get+0x138>
   11ac4:	mov	r0, r6
   11ac8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11acc:	ldr	r0, [pc, #104]	; 11b3c <rb_linebuf_get+0x1a8>
   11ad0:	ldr	r0, [pc, r0]
   11ad4:	ldr	r1, [pc, #100]	; 11b40 <rb_linebuf_get+0x1ac>
   11ad8:	sub	r0, r0, #1
   11adc:	add	r1, pc, r1
   11ae0:	str	r0, [r1]
   11ae4:	mov	r1, r4
   11ae8:	ldr	r0, [pc, #84]	; 11b44 <rb_linebuf_get+0x1b0>
   11aec:	ldr	r0, [pc, r0]
   11af0:	bl	515c <rb_bh_free@plt>
   11af4:	mov	r0, r6
   11af8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11afc:	add	r2, r4, r3
   11b00:	add	r3, r0, #1
   11b04:	mov	r6, #0
   11b08:	sub	r2, r2, #1
   11b0c:	ldrb	r7, [r2, r6]
   11b10:	cmp	r7, #13
   11b14:	cmpne	r7, #10
   11b18:	bne	11b34 <rb_linebuf_get+0x1a0>
   11b1c:	sub	r7, r6, #1
   11b20:	cmp	r3, r6
   11b24:	mov	r6, r7
   11b28:	bne	11b0c <rb_linebuf_get+0x178>
   11b2c:	mov	r6, #0
   11b30:	b	11a2c <rb_linebuf_get+0x98>
   11b34:	sub	r6, r6, r0
   11b38:	b	11a2c <rb_linebuf_get+0x98>
   11b3c:	.word	0x0002e7f8
   11b40:	.word	0x0002e7ec
   11b44:	.word	0x0002c7d4

00011b48 <rb_linebuf_attach>:
   11b48:	push	{r4, r5, r6, r7, fp, lr}
   11b4c:	add	fp, sp, #16
   11b50:	ldr	r5, [r1]
   11b54:	cmp	r5, #0
   11b58:	popeq	{r4, r5, r6, r7, fp, pc}
   11b5c:	mov	r4, r0
   11b60:	mov	r6, #0
   11b64:	b	11b70 <rb_linebuf_attach+0x28>
   11b68:	mov	r1, r4
   11b6c:	b	11b94 <rb_linebuf_attach+0x4c>
   11b70:	ldr	r7, [r5]
   11b74:	bl	53d8 <rb_make_rb_dlink_node@plt>
   11b78:	str	r7, [r0]
   11b7c:	str	r6, [r0, #8]
   11b80:	ldr	r1, [r4, #4]
   11b84:	cmp	r1, #0
   11b88:	str	r1, [r0, #4]
   11b8c:	beq	11b9c <rb_linebuf_attach+0x54>
   11b90:	add	r1, r1, #8
   11b94:	str	r0, [r1]
   11b98:	b	11ba8 <rb_linebuf_attach+0x60>
   11b9c:	ldr	r1, [r4]
   11ba0:	cmp	r1, #0
   11ba4:	beq	11b68 <rb_linebuf_attach+0x20>
   11ba8:	str	r0, [r4, #4]
   11bac:	add	r2, r4, #8
   11bb0:	ldm	r2, {r0, r1, r2}
   11bb4:	ldr	r3, [r4, #24]
   11bb8:	add	r0, r0, #1
   11bbc:	str	r0, [r4, #8]
   11bc0:	add	r0, r2, #1
   11bc4:	add	r2, r3, #1
   11bc8:	str	r0, [r4, #16]
   11bcc:	ldr	r0, [r7, #1028]	; 0x404
   11bd0:	str	r2, [r4, #24]
   11bd4:	add	r0, r1, r0
   11bd8:	str	r0, [r4, #12]
   11bdc:	ldr	r0, [r7, #1032]	; 0x408
   11be0:	add	r0, r0, #1
   11be4:	str	r0, [r7, #1032]	; 0x408
   11be8:	ldr	r5, [r5, #8]
   11bec:	cmp	r5, #0
   11bf0:	bne	11b70 <rb_linebuf_attach+0x28>
   11bf4:	pop	{r4, r5, r6, r7, fp, pc}

00011bf8 <rb_linebuf_put>:
   11bf8:	push	{r4, r5, r6, sl, fp, lr}
   11bfc:	add	fp, sp, #16
   11c00:	mov	r4, r0
   11c04:	ldr	r0, [pc, #244]	; 11d00 <rb_linebuf_put+0x108>
   11c08:	mov	r6, r1
   11c0c:	ldr	r0, [pc, r0]
   11c10:	bl	51d4 <rb_bh_alloc@plt>
   11c14:	mov	r5, r0
   11c18:	cmp	r0, #0
   11c1c:	beq	11ca4 <rb_linebuf_put+0xac>
   11c20:	ldr	r0, [pc, #220]	; 11d04 <rb_linebuf_put+0x10c>
   11c24:	ldr	r0, [pc, r0]
   11c28:	ldr	r1, [pc, #216]	; 11d08 <rb_linebuf_put+0x110>
   11c2c:	add	r0, r0, #1
   11c30:	add	r1, pc, r1
   11c34:	str	r0, [r1]
   11c38:	bl	53d8 <rb_make_rb_dlink_node@plt>
   11c3c:	mov	r1, #0
   11c40:	str	r5, [r0]
   11c44:	str	r1, [r0, #8]
   11c48:	ldr	r1, [r4, #4]
   11c4c:	cmp	r1, #0
   11c50:	str	r1, [r0, #4]
   11c54:	beq	11c64 <rb_linebuf_put+0x6c>
   11c58:	add	r1, r1, #8
   11c5c:	str	r0, [r1]
   11c60:	b	11c70 <rb_linebuf_put+0x78>
   11c64:	ldr	r1, [r4]
   11c68:	cmp	r1, #0
   11c6c:	beq	11cf8 <rb_linebuf_put+0x100>
   11c70:	str	r0, [r4, #4]
   11c74:	ldr	r0, [r4, #8]
   11c78:	add	r0, r0, #1
   11c7c:	str	r0, [r4, #8]
   11c80:	ldr	r0, [r5, #1032]	; 0x408
   11c84:	add	r0, r0, #1
   11c88:	str	r0, [r5, #1032]	; 0x408
   11c8c:	ldr	r0, [r4, #16]
   11c90:	ldr	r1, [r4, #24]
   11c94:	add	r0, r0, #1
   11c98:	str	r0, [r4, #16]
   11c9c:	add	r0, r1, #1
   11ca0:	str	r0, [r4, #24]
   11ca4:	mov	r0, r5
   11ca8:	movw	r1, #1023	; 0x3ff
   11cac:	mov	r2, r6
   11cb0:	bl	4f4c <rb_fsnprint@plt>
   11cb4:	bic	r0, r0, r0, asr #31
   11cb8:	movw	r1, #1022	; 0x3fe
   11cbc:	mov	r2, #0
   11cc0:	cmp	r0, r1
   11cc4:	movcc	r1, r0
   11cc8:	add	r0, r1, #2
   11ccc:	add	r1, r5, r1
   11cd0:	strb	r2, [r5, r0]
   11cd4:	movw	r2, #2573	; 0xa0d
   11cd8:	strh	r2, [r1]
   11cdc:	mov	r1, #1
   11ce0:	str	r0, [r5, #1028]	; 0x404
   11ce4:	strb	r1, [r5, #1025]	; 0x401
   11ce8:	ldr	r1, [r4, #12]
   11cec:	add	r0, r1, r0
   11cf0:	str	r0, [r4, #12]
   11cf4:	pop	{r4, r5, r6, sl, fp, pc}
   11cf8:	mov	r1, r4
   11cfc:	b	11c5c <rb_linebuf_put+0x64>
   11d00:	.word	0x0002c6b4
   11d04:	.word	0x0002e6a4
   11d08:	.word	0x0002e698

00011d0c <rb_linebuf_flush>:
   11d0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d10:	add	fp, sp, #28
   11d14:	sub	sp, sp, #4
   11d18:	mov	r4, r1
   11d1c:	mov	r5, r0
   11d20:	bl	4d84 <rb_fd_ssl@plt>
   11d24:	cmp	r0, #0
   11d28:	beq	11e38 <rb_linebuf_flush+0x12c>
   11d2c:	ldr	r0, [r4]
   11d30:	cmp	r0, #0
   11d34:	beq	11ed8 <rb_linebuf_flush+0x1cc>
   11d38:	ldr	r6, [r0]
   11d3c:	ldrb	r0, [r6, #1025]	; 0x401
   11d40:	cmp	r0, #0
   11d44:	beq	11ed8 <rb_linebuf_flush+0x1cc>
   11d48:	ldr	r0, [r4, #20]
   11d4c:	ldr	r2, [r6, #1028]	; 0x404
   11d50:	add	r1, r6, r0
   11d54:	sub	r2, r2, r0
   11d58:	mov	r0, r5
   11d5c:	bl	4f10 <rb_write@plt>
   11d60:	mov	r8, r0
   11d64:	cmp	r0, #1
   11d68:	blt	11ee8 <rb_linebuf_flush+0x1dc>
   11d6c:	ldr	r0, [r4, #20]
   11d70:	add	r0, r0, r8
   11d74:	str	r0, [r4, #20]
   11d78:	ldr	r1, [r6, #1028]	; 0x404
   11d7c:	cmp	r0, r1
   11d80:	bne	11ee8 <rb_linebuf_flush+0x1dc>
   11d84:	mov	r0, #0
   11d88:	mov	r3, r4
   11d8c:	str	r0, [r4, #20]
   11d90:	ldr	r0, [r4]
   11d94:	ldr	r1, [r0, #8]
   11d98:	ldr	r2, [r0, #4]
   11d9c:	cmp	r1, #0
   11da0:	streq	r2, [r4, #4]
   11da4:	strne	r2, [r1, #4]
   11da8:	ldrne	r2, [r0, #4]
   11dac:	cmp	r2, #0
   11db0:	addne	r3, r2, #8
   11db4:	str	r1, [r3]
   11db8:	mov	r1, #0
   11dbc:	str	r1, [r0, #4]
   11dc0:	str	r1, [r0, #8]
   11dc4:	ldr	r1, [r4, #8]
   11dc8:	sub	r1, r1, #1
   11dcc:	str	r1, [r4, #8]
   11dd0:	bl	50e4 <rb_free_rb_dlink_node@plt>
   11dd4:	ldr	r1, [r4, #16]
   11dd8:	ldr	r2, [r4, #24]
   11ddc:	ldr	r0, [r4, #12]
   11de0:	sub	r1, r1, #1
   11de4:	sub	r2, r2, #1
   11de8:	str	r1, [r4, #16]
   11dec:	ldr	r1, [r6, #1028]	; 0x404
   11df0:	str	r2, [r4, #24]
   11df4:	sub	r0, r0, r1
   11df8:	str	r0, [r4, #12]
   11dfc:	ldr	r0, [r6, #1032]	; 0x408
   11e00:	subs	r0, r0, #1
   11e04:	str	r0, [r6, #1032]	; 0x408
   11e08:	bne	11ee8 <rb_linebuf_flush+0x1dc>
   11e0c:	ldr	r0, [pc, #544]	; 12034 <rb_linebuf_flush+0x328>
   11e10:	ldr	r0, [pc, r0]
   11e14:	ldr	r1, [pc, #540]	; 12038 <rb_linebuf_flush+0x32c>
   11e18:	sub	r0, r0, #1
   11e1c:	add	r1, pc, r1
   11e20:	str	r0, [r1]
   11e24:	mov	r1, r6
   11e28:	ldr	r0, [pc, #524]	; 1203c <rb_linebuf_flush+0x330>
   11e2c:	ldr	r0, [pc, r0]
   11e30:	bl	515c <rb_bh_free@plt>
   11e34:	b	11ee8 <rb_linebuf_flush+0x1dc>
   11e38:	ldr	r6, [pc, #480]	; 12020 <rb_linebuf_flush+0x314>
   11e3c:	mov	r1, #0
   11e40:	mov	r2, #8192	; 0x2000
   11e44:	add	r6, pc, r6
   11e48:	mov	r0, r6
   11e4c:	bl	4ee0 <memset@plt>
   11e50:	ldr	r0, [r4]
   11e54:	cmp	r0, #0
   11e58:	beq	11ed8 <rb_linebuf_flush+0x1cc>
   11e5c:	ldr	r1, [r0]
   11e60:	ldrb	r2, [r1, #1025]	; 0x401
   11e64:	cmp	r2, #0
   11e68:	beq	11ed8 <rb_linebuf_flush+0x1cc>
   11e6c:	ldr	r2, [r4, #20]
   11e70:	add	r8, r1, r2
   11e74:	ldr	r1, [r1, #1028]	; 0x404
   11e78:	sub	r9, r1, r2
   11e7c:	strd	r8, [r6]
   11e80:	ldr	r0, [r0, #8]
   11e84:	cmp	r0, #0
   11e88:	beq	11ef4 <rb_linebuf_flush+0x1e8>
   11e8c:	mov	r2, #0
   11e90:	movw	r1, #1022	; 0x3fe
   11e94:	ldr	r7, [r0]
   11e98:	ldrb	r3, [r7, #1025]	; 0x401
   11e9c:	cmp	r3, #0
   11ea0:	beq	11efc <rb_linebuf_flush+0x1f0>
   11ea4:	add	r3, r2, #1
   11ea8:	add	r2, r6, r2, lsl #3
   11eac:	str	r7, [r2, #8]
   11eb0:	cmp	r3, r1
   11eb4:	ldr	r7, [r7, #1028]	; 0x404
   11eb8:	str	r7, [r2, #12]
   11ebc:	bhi	11ed0 <rb_linebuf_flush+0x1c4>
   11ec0:	ldr	r0, [r0, #8]
   11ec4:	mov	r2, r3
   11ec8:	cmp	r0, #0
   11ecc:	bne	11e94 <rb_linebuf_flush+0x188>
   11ed0:	add	r6, r3, #1
   11ed4:	b	11f00 <rb_linebuf_flush+0x1f4>
   11ed8:	bl	5540 <__errno_location@plt>
   11edc:	mov	r1, #11
   11ee0:	mvn	r8, #0
   11ee4:	str	r1, [r0]
   11ee8:	mov	r0, r8
   11eec:	sub	sp, fp, #28
   11ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ef4:	mov	r6, #1
   11ef8:	b	11f00 <rb_linebuf_flush+0x1f4>
   11efc:	add	r6, r2, #1
   11f00:	ldr	r1, [pc, #284]	; 12024 <rb_linebuf_flush+0x318>
   11f04:	mov	r0, r5
   11f08:	mov	r2, r6
   11f0c:	add	r1, pc, r1
   11f10:	bl	533c <rb_writev@plt>
   11f14:	mov	r8, r0
   11f18:	cmp	r0, #1
   11f1c:	blt	11ee8 <rb_linebuf_flush+0x1dc>
   11f20:	ldr	r5, [r4]
   11f24:	ldr	r0, [r4, #20]
   11f28:	mov	sl, #0
   11f2c:	str	r8, [sp]
   11f30:	ldr	r7, [r5]
   11f34:	ldr	r1, [r7, #1028]	; 0x404
   11f38:	sub	r9, r1, r0
   11f3c:	cmp	r8, r9
   11f40:	blt	12010 <rb_linebuf_flush+0x304>
   11f44:	ldr	r0, [r4]
   11f48:	ldr	r5, [r5, #8]
   11f4c:	mov	r3, r4
   11f50:	ldr	r1, [r0, #8]
   11f54:	ldr	r2, [r0, #4]
   11f58:	cmp	r1, #0
   11f5c:	streq	r2, [r4, #4]
   11f60:	strne	r2, [r1, #4]
   11f64:	ldrne	r2, [r0, #4]
   11f68:	cmp	r2, #0
   11f6c:	addne	r3, r2, #8
   11f70:	str	r1, [r3]
   11f74:	mov	r1, #0
   11f78:	str	r1, [r0, #4]
   11f7c:	str	r1, [r0, #8]
   11f80:	ldr	r1, [r4, #8]
   11f84:	sub	r1, r1, #1
   11f88:	str	r1, [r4, #8]
   11f8c:	bl	50e4 <rb_free_rb_dlink_node@plt>
   11f90:	ldr	r1, [r4, #16]
   11f94:	ldr	r2, [r4, #24]
   11f98:	ldr	r0, [r4, #12]
   11f9c:	sub	r1, r1, #1
   11fa0:	sub	r2, r2, #1
   11fa4:	str	r1, [r4, #16]
   11fa8:	ldr	r1, [r7, #1028]	; 0x404
   11fac:	str	r2, [r4, #24]
   11fb0:	sub	r0, r0, r1
   11fb4:	str	r0, [r4, #12]
   11fb8:	ldr	r0, [r7, #1032]	; 0x408
   11fbc:	subs	r0, r0, #1
   11fc0:	str	r0, [r7, #1032]	; 0x408
   11fc4:	bne	11ff0 <rb_linebuf_flush+0x2e4>
   11fc8:	ldr	r0, [pc, #88]	; 12028 <rb_linebuf_flush+0x31c>
   11fcc:	ldr	r0, [pc, r0]
   11fd0:	ldr	r1, [pc, #84]	; 1202c <rb_linebuf_flush+0x320>
   11fd4:	sub	r0, r0, #1
   11fd8:	add	r1, pc, r1
   11fdc:	str	r0, [r1]
   11fe0:	mov	r1, r7
   11fe4:	ldr	r0, [pc, #68]	; 12030 <rb_linebuf_flush+0x324>
   11fe8:	ldr	r0, [pc, r0]
   11fec:	bl	515c <rb_bh_free@plt>
   11ff0:	add	sl, sl, #1
   11ff4:	mov	r0, #0
   11ff8:	sub	r8, r8, r9
   11ffc:	cmp	sl, r6
   12000:	str	r0, [r4, #20]
   12004:	bcc	11f30 <rb_linebuf_flush+0x224>
   12008:	ldr	r8, [sp]
   1200c:	b	11ee8 <rb_linebuf_flush+0x1dc>
   12010:	add	r0, r0, r8
   12014:	ldr	r8, [sp]
   12018:	str	r0, [r4, #20]
   1201c:	b	11ee8 <rb_linebuf_flush+0x1dc>
   12020:	.word	0x0002c484
   12024:	.word	0x0002c3bc
   12028:	.word	0x0002e2fc
   1202c:	.word	0x0002e2f0
   12030:	.word	0x0002c2d8
   12034:	.word	0x0002e4b8
   12038:	.word	0x0002e4ac
   1203c:	.word	0x0002c494

00012040 <rb_count_rb_linebuf_memory>:
   12040:	push	{fp, lr}
   12044:	mov	fp, sp
   12048:	sub	sp, sp, #8
   1204c:	mov	r3, r1
   12050:	mov	r1, r0
   12054:	ldr	r0, [pc, #24]	; 12074 <rb_count_rb_linebuf_memory+0x34>
   12058:	mov	r2, #0
   1205c:	ldr	r0, [pc, r0]
   12060:	str	r2, [sp]
   12064:	mov	r2, #0
   12068:	bl	5564 <rb_bh_usage@plt>
   1206c:	mov	sp, fp
   12070:	pop	{fp, pc}
   12074:	.word	0x0002c264

00012078 <rb_init_rb_dlink_nodes>:
   12078:	push	{fp, lr}
   1207c:	mov	fp, sp
   12080:	ldr	r2, [pc, #36]	; 120ac <rb_init_rb_dlink_nodes+0x34>
   12084:	mov	r1, r0
   12088:	mov	r0, #12
   1208c:	add	r2, pc, r2
   12090:	bl	5318 <rb_bh_create@plt>
   12094:	ldr	r1, [pc, #20]	; 120b0 <rb_init_rb_dlink_nodes+0x38>
   12098:	cmp	r0, #0
   1209c:	add	r1, pc, r1
   120a0:	str	r0, [r1]
   120a4:	popne	{fp, pc}
   120a8:	bl	5204 <rb_outofmemory@plt>
   120ac:	.word	0x00007b5f
   120b0:	.word	0x0002e230

000120b4 <rb_make_rb_dlink_node>:
   120b4:	ldr	r0, [pc, #4]	; 120c0 <rb_make_rb_dlink_node+0xc>
   120b8:	ldr	r0, [pc, r0]
   120bc:	b	51d4 <rb_bh_alloc@plt>
   120c0:	.word	0x0002e214

000120c4 <rb_free_rb_dlink_node>:
   120c4:	mov	r1, r0
   120c8:	ldr	r0, [pc, #4]	; 120d4 <rb_free_rb_dlink_node+0x10>
   120cc:	ldr	r0, [pc, r0]
   120d0:	b	515c <rb_bh_free@plt>
   120d4:	.word	0x0002e200

000120d8 <rb_string_to_array>:
   120d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   120dc:	add	fp, sp, #24
   120e0:	mov	r4, r1
   120e4:	mov	r1, r0
   120e8:	mov	r0, #0
   120ec:	cmp	r1, #0
   120f0:	ldrbne	r3, [r1]
   120f4:	cmpne	r3, #0
   120f8:	bne	12104 <rb_string_to_array+0x2c>
   120fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12100:	ldrb	r3, [r1, #1]!
   12104:	uxtb	r7, r3
   12108:	cmp	r7, #32
   1210c:	beq	12100 <rb_string_to_array+0x28>
   12110:	cmp	r7, #0
   12114:	beq	120fc <rb_string_to_array+0x24>
   12118:	sub	r6, r2, #1
   1211c:	mov	r8, #0
   12120:	mov	r0, #0
   12124:	mov	r5, r0
   12128:	uxtb	r0, r3
   1212c:	cmp	r0, #58	; 0x3a
   12130:	beq	1219c <rb_string_to_array+0xc4>
   12134:	str	r1, [r4, r5, lsl #2]
   12138:	mov	r0, r1
   1213c:	mov	r1, #32
   12140:	bl	4e74 <strchr@plt>
   12144:	mov	r2, r0
   12148:	add	r0, r5, #1
   1214c:	cmp	r2, #0
   12150:	beq	120fc <rb_string_to_array+0x24>
   12154:	mov	r7, r2
   12158:	strb	r8, [r7], #1
   1215c:	mov	r1, r7
   12160:	b	12168 <rb_string_to_array+0x90>
   12164:	add	r1, r1, #1
   12168:	ldrb	r3, [r1]
   1216c:	cmp	r3, #32
   12170:	beq	12164 <rb_string_to_array+0x8c>
   12174:	cmp	r3, #0
   12178:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1217c:	cmp	r0, r6
   12180:	blt	12124 <rb_string_to_array+0x4c>
   12184:	ldrb	r1, [r2, #1]
   12188:	cmp	r1, #58	; 0x3a
   1218c:	addeq	r7, r2, #2
   12190:	str	r7, [r4, r0, lsl #2]
   12194:	add	r0, r5, #2
   12198:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1219c:	add	r0, r1, #1
   121a0:	str	r0, [r4, r5, lsl #2]
   121a4:	add	r0, r5, #1
   121a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000121ac <rb_strcasecmp>:
   121ac:	b	4e8c <strcasecmp@plt>

000121b0 <rb_strncasecmp>:
   121b0:	b	51f8 <strncasecmp@plt>

000121b4 <rb_strcasestr>:
   121b4:	b	4cf4 <strcasestr@plt>

000121b8 <rb_strlcat>:
   121b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   121bc:	add	fp, sp, #24
   121c0:	mov	r4, r2
   121c4:	mov	r8, r1
   121c8:	mov	r9, r0
   121cc:	bl	5084 <strlen@plt>
   121d0:	mov	r7, r0
   121d4:	sub	r6, r4, r0
   121d8:	mov	r0, r8
   121dc:	bl	5084 <strlen@plt>
   121e0:	cmp	r0, r6
   121e4:	mov	r4, r0
   121e8:	mov	r5, r0
   121ec:	mov	r1, r8
   121f0:	subcs	r4, r6, #1
   121f4:	add	r6, r9, r7
   121f8:	mov	r0, r6
   121fc:	mov	r2, r4
   12200:	bl	50a8 <memcpy@plt>
   12204:	mov	r0, #0
   12208:	strb	r0, [r6, r4]
   1220c:	add	r0, r5, r7
   12210:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00012214 <rb_strlcpy>:
   12214:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12218:	add	fp, sp, #24
   1221c:	mov	r8, r0
   12220:	mov	r0, r1
   12224:	mov	r7, r2
   12228:	mov	r6, r1
   1222c:	bl	5084 <strlen@plt>
   12230:	mov	r4, r0
   12234:	cmp	r7, #0
   12238:	beq	12260 <rb_strlcpy+0x4c>
   1223c:	cmp	r4, r7
   12240:	mov	r5, r4
   12244:	mov	r0, r8
   12248:	mov	r1, r6
   1224c:	subcs	r5, r7, #1
   12250:	mov	r2, r5
   12254:	bl	50a8 <memcpy@plt>
   12258:	mov	r0, #0
   1225c:	strb	r0, [r8, r5]
   12260:	mov	r0, r4
   12264:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00012268 <rb_strnlen>:
   12268:	b	5294 <strnlen@plt>

0001226c <rb_snprintf_append>:
   1226c:	sub	sp, sp, #4
   12270:	push	{r4, r5, r6, r7, fp, lr}
   12274:	add	fp, sp, #16
   12278:	sub	sp, sp, #4
   1227c:	cmp	r1, #0
   12280:	str	r3, [fp, #8]
   12284:	beq	122b0 <rb_snprintf_append+0x44>
   12288:	mov	r4, r2
   1228c:	mov	r6, r1
   12290:	mov	r5, r0
   12294:	bl	5084 <strlen@plt>
   12298:	cmp	r0, r6
   1229c:	ble	122b8 <rb_snprintf_append+0x4c>
   122a0:	sub	r0, r6, #1
   122a4:	mov	r1, #0
   122a8:	strb	r1, [r5, r0]
   122ac:	b	122dc <rb_snprintf_append+0x70>
   122b0:	mvn	r0, #0
   122b4:	b	122dc <rb_snprintf_append+0x70>
   122b8:	mov	r7, r0
   122bc:	add	r3, fp, #8
   122c0:	add	r0, r5, r0
   122c4:	mov	r2, r4
   122c8:	sub	r1, r6, r7
   122cc:	str	r3, [sp]
   122d0:	bl	4e20 <vsnprintf@plt>
   122d4:	cmp	r0, #0
   122d8:	addge	r0, r0, r7
   122dc:	sub	sp, fp, #16
   122e0:	pop	{r4, r5, r6, r7, fp, lr}
   122e4:	add	sp, sp, #4
   122e8:	bx	lr

000122ec <rb_snprintf_try_append>:
   122ec:	sub	sp, sp, #4
   122f0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   122f4:	add	fp, sp, #24
   122f8:	sub	sp, sp, #4
   122fc:	mvn	r4, #0
   12300:	cmp	r1, #0
   12304:	str	r3, [fp, #8]
   12308:	beq	12378 <rb_snprintf_try_append+0x8c>
   1230c:	mov	r9, r2
   12310:	mov	r5, r1
   12314:	mov	r6, r0
   12318:	bl	5084 <strlen@plt>
   1231c:	cmp	r0, r5
   12320:	ble	12334 <rb_snprintf_try_append+0x48>
   12324:	add	r0, r6, r5
   12328:	mov	r1, #0
   1232c:	strb	r1, [r0, #-1]
   12330:	b	12378 <rb_snprintf_try_append+0x8c>
   12334:	add	r8, r6, r0
   12338:	add	r3, fp, #8
   1233c:	mov	r7, r0
   12340:	sub	r1, r5, r0
   12344:	mov	r2, r9
   12348:	mov	r0, r8
   1234c:	str	r3, [sp]
   12350:	bl	4e20 <vsnprintf@plt>
   12354:	mov	r4, r0
   12358:	cmp	r0, #0
   1235c:	blt	12378 <rb_snprintf_try_append+0x8c>
   12360:	add	r4, r4, r7
   12364:	sub	r0, r5, #1
   12368:	cmp	r4, r0
   1236c:	movgt	r0, #0
   12370:	mvngt	r4, #0
   12374:	strbgt	r0, [r8]
   12378:	mov	r0, r4
   1237c:	sub	sp, fp, #24
   12380:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   12384:	add	sp, sp, #4
   12388:	bx	lr

0001238c <rb_basename>:
   1238c:	push	{r4, r5, fp, lr}
   12390:	add	fp, sp, #8
   12394:	mov	r1, #47	; 0x2f
   12398:	mov	r4, r0
   1239c:	bl	4f04 <strrchr@plt>
   123a0:	cmp	r0, #0
   123a4:	addne	r4, r0, #1
   123a8:	mov	r0, r4
   123ac:	bl	5084 <strlen@plt>
   123b0:	add	r0, r0, #1
   123b4:	bl	5228 <malloc@plt>
   123b8:	cmp	r0, #0
   123bc:	beq	123d4 <rb_basename+0x48>
   123c0:	mov	r1, r4
   123c4:	mov	r5, r0
   123c8:	bl	512c <strcpy@plt>
   123cc:	mov	r0, r5
   123d0:	pop	{r4, r5, fp, pc}
   123d4:	bl	5204 <rb_outofmemory@plt>

000123d8 <rb_dirname>:
   123d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   123dc:	add	fp, sp, #24
   123e0:	mov	r1, #47	; 0x2f
   123e4:	mov	r4, r0
   123e8:	bl	4f04 <strrchr@plt>
   123ec:	cmp	r0, #0
   123f0:	bne	1241c <rb_dirname+0x44>
   123f4:	mov	r0, #2
   123f8:	bl	5228 <malloc@plt>
   123fc:	cmp	r0, #0
   12400:	movne	r5, r0
   12404:	movne	r0, #46	; 0x2e
   12408:	strhne	r0, [r5]
   1240c:	movne	r0, r5
   12410:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   12414:	b	12488 <rb_dirname+0xb0>
   12418:	sub	r0, r0, #1
   1241c:	cmp	r0, r4
   12420:	bls	12430 <rb_dirname+0x58>
   12424:	ldrb	r1, [r0]
   12428:	cmp	r1, #47	; 0x2f
   1242c:	beq	12418 <rb_dirname+0x40>
   12430:	sub	r8, r0, r4
   12434:	add	r6, r8, #2
   12438:	mov	r0, r6
   1243c:	bl	5228 <malloc@plt>
   12440:	cmp	r0, #0
   12444:	beq	12488 <rb_dirname+0xb0>
   12448:	mov	r5, r0
   1244c:	mov	r0, r4
   12450:	bl	5084 <strlen@plt>
   12454:	cmp	r6, #0
   12458:	beq	12480 <rb_dirname+0xa8>
   1245c:	mov	r7, r0
   12460:	cmp	r0, r6
   12464:	mov	r0, r5
   12468:	mov	r1, r4
   1246c:	addcs	r7, r8, #1
   12470:	mov	r2, r7
   12474:	bl	50a8 <memcpy@plt>
   12478:	mov	r0, #0
   1247c:	strb	r0, [r5, r7]
   12480:	mov	r0, r5
   12484:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12488:	bl	5204 <rb_outofmemory@plt>

0001248c <rb_fsnprint>:
   1248c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12490:	add	fp, sp, #28
   12494:	sub	sp, sp, #12
   12498:	cmp	r2, #0
   1249c:	str	r0, [sp, #4]
   124a0:	beq	125c4 <rb_fsnprint+0x138>
   124a4:	sub	r0, r1, #1
   124a8:	mov	r4, r2
   124ac:	mov	r8, r1
   124b0:	mov	r9, #0
   124b4:	str	r1, [sp]
   124b8:	str	r0, [sp, #8]
   124bc:	mov	r0, r1
   124c0:	ldr	r7, [r4]
   124c4:	cmp	r7, #0
   124c8:	beq	124d8 <rb_fsnprint+0x4c>
   124cc:	sub	r0, r8, r9
   124d0:	cmp	r7, r0
   124d4:	bls	124e4 <rb_fsnprint+0x58>
   124d8:	cmp	r0, #0
   124dc:	mov	r7, r0
   124e0:	beq	125d4 <rb_fsnprint+0x148>
   124e4:	ldr	r6, [r4, #4]
   124e8:	cmp	r6, #0
   124ec:	beq	1251c <rb_fsnprint+0x90>
   124f0:	ldr	r0, [sp, #4]
   124f4:	add	sl, r0, r9
   124f8:	ldr	r0, [r4, #12]
   124fc:	cmp	r0, #0
   12500:	beq	1254c <rb_fsnprint+0xc0>
   12504:	ldr	r3, [r0]
   12508:	mov	r0, sl
   1250c:	mov	r1, r7
   12510:	mov	r2, r6
   12514:	bl	4e20 <vsnprintf@plt>
   12518:	b	1253c <rb_fsnprint+0xb0>
   1251c:	ldr	r3, [r4, #8]
   12520:	cmp	r3, #0
   12524:	beq	1258c <rb_fsnprint+0x100>
   12528:	ldr	r0, [sp, #4]
   1252c:	ldr	r2, [r4, #12]
   12530:	mov	r1, r7
   12534:	add	r0, r0, r9
   12538:	blx	r3
   1253c:	mov	r5, r0
   12540:	cmp	r5, #0
   12544:	bge	12590 <rb_fsnprint+0x104>
   12548:	b	125d8 <rb_fsnprint+0x14c>
   1254c:	mov	r0, r6
   12550:	bl	5084 <strlen@plt>
   12554:	cmp	r0, r7
   12558:	mov	r8, r0
   1255c:	mov	r5, r0
   12560:	mov	r0, sl
   12564:	mov	r1, r6
   12568:	subcs	r8, r7, #1
   1256c:	mov	r2, r8
   12570:	bl	50a8 <memcpy@plt>
   12574:	mov	r0, #0
   12578:	strb	r0, [sl, r8]
   1257c:	ldr	r8, [sp]
   12580:	cmp	r5, #0
   12584:	bge	12590 <rb_fsnprint+0x104>
   12588:	b	125d8 <rb_fsnprint+0x14c>
   1258c:	mov	r5, #0
   12590:	sub	r0, r7, #1
   12594:	cmp	r5, r0
   12598:	movls	r0, r5
   1259c:	add	r9, r0, r9
   125a0:	ldr	r0, [sp, #8]
   125a4:	cmp	r9, r0
   125a8:	bcs	125cc <rb_fsnprint+0x140>
   125ac:	ldr	r4, [r4, #16]
   125b0:	sub	r0, r7, r5
   125b4:	mov	r5, r9
   125b8:	cmp	r4, #0
   125bc:	bne	124c0 <rb_fsnprint+0x34>
   125c0:	b	125d8 <rb_fsnprint+0x14c>
   125c4:	mov	r5, #0
   125c8:	b	125d8 <rb_fsnprint+0x14c>
   125cc:	ldr	r5, [sp, #8]
   125d0:	b	125d8 <rb_fsnprint+0x14c>
   125d4:	mov	r5, r9
   125d8:	mov	r0, r5
   125dc:	sub	sp, fp, #28
   125e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000125e4 <rb_fsnprintf>:
   125e4:	push	{fp, lr}
   125e8:	mov	fp, sp
   125ec:	sub	sp, sp, #24
   125f0:	str	r3, [sp, #4]
   125f4:	mov	r3, #0
   125f8:	str	r3, [sp]
   125fc:	str	r3, [sp, #8]
   12600:	sub	r3, fp, #4
   12604:	str	r3, [sp, #12]
   12608:	str	r2, [sp, #16]
   1260c:	add	r2, fp, #8
   12610:	str	r2, [fp, #-4]
   12614:	mov	r2, sp
   12618:	bl	4f4c <rb_fsnprint@plt>
   1261c:	mov	sp, fp
   12620:	pop	{fp, pc}

00012624 <rb_helper_child>:
   12624:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12628:	add	fp, sp, #28
   1262c:	sub	sp, sp, #28
   12630:	str	r2, [sp, #24]
   12634:	mov	r4, r0
   12638:	mov	r8, r3
   1263c:	mov	r9, r1
   12640:	ldr	r0, [pc, #480]	; 12828 <rb_helper_child+0x204>
   12644:	add	r0, pc, r0
   12648:	bl	4e5c <getenv@plt>
   1264c:	mov	r7, r0
   12650:	ldr	r0, [pc, #468]	; 1282c <rb_helper_child+0x208>
   12654:	add	r0, pc, r0
   12658:	bl	4e5c <getenv@plt>
   1265c:	mov	r5, r0
   12660:	ldr	r0, [pc, #456]	; 12830 <rb_helper_child+0x20c>
   12664:	add	r0, pc, r0
   12668:	bl	4e5c <getenv@plt>
   1266c:	mov	sl, #0
   12670:	cmp	r7, #0
   12674:	beq	12818 <rb_helper_child+0x1f4>
   12678:	cmp	r5, #0
   1267c:	movne	r6, r0
   12680:	cmpne	r0, #0
   12684:	beq	12818 <rb_helper_child+0x1f4>
   12688:	mov	r0, #1
   1268c:	mov	r1, #84	; 0x54
   12690:	str	r8, [sp, #12]
   12694:	str	r4, [sp, #16]
   12698:	bl	4ea4 <calloc@plt>
   1269c:	cmp	r0, #0
   126a0:	beq	12824 <rb_helper_child+0x200>
   126a4:	mov	sl, r0
   126a8:	mov	r0, r7
   126ac:	mov	r1, #0
   126b0:	mov	r2, #10
   126b4:	mov	r4, #0
   126b8:	bl	5114 <strtol@plt>
   126bc:	mov	r7, r0
   126c0:	mov	r0, r5
   126c4:	mov	r1, #0
   126c8:	mov	r2, #10
   126cc:	bl	5114 <strtol@plt>
   126d0:	mov	r5, r0
   126d4:	mov	r0, r6
   126d8:	mov	r1, #0
   126dc:	mov	r2, #10
   126e0:	bl	5114 <strtol@plt>
   126e4:	mov	r8, r0
   126e8:	cmp	r0, #1
   126ec:	blt	12710 <rb_helper_child+0xec>
   126f0:	cmp	r7, r4
   126f4:	cmpne	r5, r4
   126f8:	beq	12704 <rb_helper_child+0xe0>
   126fc:	mov	r0, r4
   12700:	bl	51c8 <close@plt>
   12704:	add	r4, r4, #1
   12708:	cmp	r8, r4
   1270c:	bne	126f0 <rb_helper_child+0xcc>
   12710:	str	r9, [sp, #20]
   12714:	mov	r1, #2
   12718:	ldr	r0, [pc, #276]	; 12834 <rb_helper_child+0x210>
   1271c:	add	r0, pc, r0
   12720:	bl	4c64 <open@plt>
   12724:	cmp	r7, #0
   12728:	mov	r9, r0
   1272c:	cmpne	r5, #0
   12730:	beq	12740 <rb_helper_child+0x11c>
   12734:	mov	r0, r9
   12738:	mov	r1, #0
   1273c:	bl	5324 <dup2@plt>
   12740:	cmp	r7, #1
   12744:	cmpne	r5, #1
   12748:	beq	12758 <rb_helper_child+0x134>
   1274c:	mov	r0, r9
   12750:	mov	r1, #1
   12754:	bl	5324 <dup2@plt>
   12758:	cmp	r7, #2
   1275c:	cmpne	r5, #2
   12760:	beq	12770 <rb_helper_child+0x14c>
   12764:	mov	r0, r9
   12768:	mov	r1, #2
   1276c:	bl	5324 <dup2@plt>
   12770:	ldr	r4, [fp, #20]
   12774:	ldr	r6, [fp, #16]
   12778:	ldr	r2, [fp, #8]
   1277c:	cmp	r9, #3
   12780:	blt	12794 <rb_helper_child+0x170>
   12784:	mov	r0, r9
   12788:	mov	r9, r2
   1278c:	bl	51c8 <close@plt>
   12790:	mov	r2, r9
   12794:	ldr	r0, [sp, #24]
   12798:	ldr	r1, [sp, #12]
   1279c:	mov	r3, #0
   127a0:	str	r8, [sp]
   127a4:	str	r6, [sp, #4]
   127a8:	str	r4, [sp, #8]
   127ac:	bl	52ac <rb_lib_init@plt>
   127b0:	ldr	r0, [fp, #12]
   127b4:	bl	53a8 <rb_linebuf_init@plt>
   127b8:	add	r0, sl, #4
   127bc:	bl	5354 <rb_linebuf_newbuf@plt>
   127c0:	add	r0, sl, #32
   127c4:	bl	5354 <rb_linebuf_newbuf@plt>
   127c8:	ldr	r2, [pc, #104]	; 12838 <rb_helper_child+0x214>
   127cc:	mov	r0, r7
   127d0:	mov	r1, #8
   127d4:	add	r2, pc, r2
   127d8:	bl	52f4 <rb_open@plt>
   127dc:	str	r0, [sl, #60]	; 0x3c
   127e0:	mov	r0, r5
   127e4:	mov	r1, #8
   127e8:	ldr	r2, [pc, #76]	; 1283c <rb_helper_child+0x218>
   127ec:	add	r2, pc, r2
   127f0:	bl	52f4 <rb_open@plt>
   127f4:	str	r0, [sl, #64]	; 0x40
   127f8:	ldr	r0, [sl, #60]	; 0x3c
   127fc:	bl	4ed4 <rb_set_nb@plt>
   12800:	ldr	r0, [sl, #64]	; 0x40
   12804:	bl	4ed4 <rb_set_nb@plt>
   12808:	ldr	r0, [sp, #16]
   1280c:	str	r0, [sl, #76]	; 0x4c
   12810:	ldr	r0, [sp, #20]
   12814:	str	r0, [sl, #80]	; 0x50
   12818:	mov	r0, sl
   1281c:	sub	sp, fp, #28
   12820:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12824:	bl	5204 <rb_outofmemory@plt>
   12828:	.word	0x000075b8
   1282c:	.word	0x000075ac
   12830:	.word	0x000075a0
   12834:	.word	0x000074ee
   12838:	.word	0x00007440
   1283c:	.word	0x0000743c

00012840 <rb_helper_start>:
   12840:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12844:	add	fp, sp, #28
   12848:	sub	sp, sp, #196	; 0xc4
   1284c:	mov	r9, r0
   12850:	mov	r8, r1
   12854:	mov	r0, r1
   12858:	mov	r1, #1
   1285c:	mov	r5, r3
   12860:	mov	r6, r2
   12864:	bl	4fe8 <access@plt>
   12868:	mov	r4, #0
   1286c:	cmn	r0, #1
   12870:	beq	12a54 <rb_helper_start+0x214>
   12874:	mov	r0, #1
   12878:	mov	r1, #84	; 0x54
   1287c:	bl	4ea4 <calloc@plt>
   12880:	cmp	r0, #0
   12884:	beq	12a60 <rb_helper_start+0x220>
   12888:	ldr	r2, [pc, #468]	; 12a64 <rb_helper_start+0x224>
   1288c:	add	r7, sp, #60	; 0x3c
   12890:	mov	sl, r0
   12894:	mov	r1, #128	; 0x80
   12898:	mov	r3, r9
   1289c:	mov	r0, r7
   128a0:	add	r2, pc, r2
   128a4:	bl	5408 <snprintf@plt>
   128a8:	add	r0, sp, #20
   128ac:	mov	r2, r7
   128b0:	add	r1, r0, #4
   128b4:	bl	51ec <rb_pipe@plt>
   128b8:	cmn	r0, #1
   128bc:	ble	12a4c <rb_helper_start+0x20c>
   128c0:	str	r5, [sp, #8]
   128c4:	str	r6, [sp, #4]
   128c8:	add	r5, sp, #60	; 0x3c
   128cc:	mov	r1, #128	; 0x80
   128d0:	mov	r3, r9
   128d4:	ldr	r2, [pc, #396]	; 12a68 <rb_helper_start+0x228>
   128d8:	mov	r0, r5
   128dc:	add	r2, pc, r2
   128e0:	bl	5408 <snprintf@plt>
   128e4:	add	r0, sp, #12
   128e8:	mov	r2, r5
   128ec:	add	r1, r0, #4
   128f0:	bl	51ec <rb_pipe@plt>
   128f4:	cmn	r0, #1
   128f8:	ble	12a4c <rb_helper_start+0x20c>
   128fc:	ldr	r0, [sp, #24]
   12900:	bl	4db4 <rb_get_fd@plt>
   12904:	ldr	r7, [pc, #352]	; 12a6c <rb_helper_start+0x22c>
   12908:	add	r6, sp, #44	; 0x2c
   1290c:	mov	r3, r0
   12910:	mov	r1, #16
   12914:	mov	r0, r6
   12918:	add	r7, pc, r7
   1291c:	mov	r2, r7
   12920:	bl	5408 <snprintf@plt>
   12924:	ldr	r0, [sp, #12]
   12928:	bl	4db4 <rb_get_fd@plt>
   1292c:	add	r4, sp, #28
   12930:	mov	r3, r0
   12934:	mov	r1, #16
   12938:	mov	r2, r7
   1293c:	mov	r0, r4
   12940:	bl	5408 <snprintf@plt>
   12944:	ldr	r0, [sp, #20]
   12948:	bl	4ed4 <rb_set_nb@plt>
   1294c:	ldr	r0, [sp, #24]
   12950:	bl	4ed4 <rb_set_nb@plt>
   12954:	ldr	r0, [sp, #12]
   12958:	bl	4ed4 <rb_set_nb@plt>
   1295c:	ldr	r0, [sp, #16]
   12960:	bl	4ed4 <rb_set_nb@plt>
   12964:	ldr	r0, [pc, #260]	; 12a70 <rb_helper_start+0x230>
   12968:	mov	r1, r4
   1296c:	mov	r2, #1
   12970:	add	r0, pc, r0
   12974:	bl	4d9c <rb_setenv@plt>
   12978:	ldr	r0, [pc, #244]	; 12a74 <rb_helper_start+0x234>
   1297c:	mov	r1, r6
   12980:	mov	r2, #1
   12984:	add	r0, pc, r0
   12988:	bl	4d9c <rb_setenv@plt>
   1298c:	ldr	r0, [pc, #228]	; 12a78 <rb_helper_start+0x238>
   12990:	ldr	r1, [pc, #228]	; 12a7c <rb_helper_start+0x23c>
   12994:	mov	r2, #1
   12998:	add	r0, pc, r0
   1299c:	add	r1, pc, r1
   129a0:	bl	4d9c <rb_setenv@plt>
   129a4:	ldr	r2, [pc, #212]	; 12a80 <rb_helper_start+0x240>
   129a8:	mov	r0, r5
   129ac:	mov	r1, #128	; 0x80
   129b0:	mov	r3, r9
   129b4:	add	r2, pc, r2
   129b8:	bl	5408 <snprintf@plt>
   129bc:	mov	r4, #0
   129c0:	sub	r1, fp, #36	; 0x24
   129c4:	mov	r0, r8
   129c8:	str	r5, [fp, #-36]	; 0xffffffdc
   129cc:	str	r4, [fp, #-32]	; 0xffffffe0
   129d0:	bl	53f0 <rb_spawn_process@plt>
   129d4:	cmn	r0, #1
   129d8:	beq	12a2c <rb_helper_start+0x1ec>
   129dc:	mov	r5, r0
   129e0:	ldr	r0, [sp, #24]
   129e4:	bl	5108 <rb_close@plt>
   129e8:	ldr	r0, [sp, #12]
   129ec:	bl	5108 <rb_close@plt>
   129f0:	add	r0, sl, #4
   129f4:	bl	5354 <rb_linebuf_newbuf@plt>
   129f8:	add	r0, sl, #32
   129fc:	bl	5354 <rb_linebuf_newbuf@plt>
   12a00:	ldr	r0, [sp, #20]
   12a04:	ldr	r1, [sp, #16]
   12a08:	add	r2, sl, #60	; 0x3c
   12a0c:	stm	r2, {r0, r1, r5}
   12a10:	str	r4, [sl, #72]	; 0x48
   12a14:	mov	r4, sl
   12a18:	ldr	r0, [sp, #4]
   12a1c:	str	r0, [sl, #76]	; 0x4c
   12a20:	ldr	r0, [sp, #8]
   12a24:	str	r0, [sl, #80]	; 0x50
   12a28:	b	12a54 <rb_helper_start+0x214>
   12a2c:	ldr	r0, [sp, #20]
   12a30:	bl	5108 <rb_close@plt>
   12a34:	ldr	r0, [sp, #24]
   12a38:	bl	5108 <rb_close@plt>
   12a3c:	ldr	r0, [sp, #12]
   12a40:	bl	5108 <rb_close@plt>
   12a44:	ldr	r0, [sp, #16]
   12a48:	bl	5108 <rb_close@plt>
   12a4c:	mov	r0, sl
   12a50:	bl	4fa0 <free@plt>
   12a54:	mov	r0, r4
   12a58:	sub	sp, fp, #28
   12a5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a60:	bl	5204 <rb_outofmemory@plt>
   12a64:	.word	0x0000739c
   12a68:	.word	0x00007371
   12a6c:	.word	0x00006699
   12a70:	.word	0x0000728c
   12a74:	.word	0x0000727c
   12a78:	.word	0x0000726c
   12a7c:	.word	0x000072c3
   12a80:	.word	0x000072af

00012a84 <rb_helper_restart>:
   12a84:	ldr	r1, [r0, #80]	; 0x50
   12a88:	bx	r1

00012a8c <rb_helper_write_queue>:
   12a8c:	sub	sp, sp, #8
   12a90:	push	{fp, lr}
   12a94:	mov	fp, sp
   12a98:	sub	sp, sp, #24
   12a9c:	str	r2, [fp, #8]
   12aa0:	str	r1, [sp, #4]
   12aa4:	mov	r1, #0
   12aa8:	sub	r2, fp, #4
   12aac:	add	r0, r0, #4
   12ab0:	str	r3, [fp, #12]
   12ab4:	str	r1, [sp]
   12ab8:	str	r1, [sp, #8]
   12abc:	str	r2, [sp, #12]
   12ac0:	str	r1, [sp, #16]
   12ac4:	add	r1, fp, #8
   12ac8:	str	r1, [fp, #-4]
   12acc:	mov	r1, sp
   12ad0:	bl	5444 <rb_linebuf_put@plt>
   12ad4:	mov	sp, fp
   12ad8:	pop	{fp, lr}
   12adc:	add	sp, sp, #8
   12ae0:	bx	lr

00012ae4 <rb_helper_write_flush>:
   12ae4:	push	{r4, r5, r6, sl, fp, lr}
   12ae8:	add	fp, sp, #16
   12aec:	mov	r4, r0
   12af0:	ldr	r0, [r0, #16]
   12af4:	cmp	r0, #1
   12af8:	poplt	{r4, r5, r6, sl, fp, pc}
   12afc:	ldr	r6, [r4, #64]	; 0x40
   12b00:	add	r5, r4, #4
   12b04:	mov	r0, r6
   12b08:	mov	r1, r5
   12b0c:	bl	506c <rb_linebuf_flush@plt>
   12b10:	cmp	r0, #0
   12b14:	bgt	12b04 <rb_helper_write_flush+0x20>
   12b18:	beq	12b58 <rb_helper_write_flush+0x74>
   12b1c:	bl	5540 <__errno_location@plt>
   12b20:	ldr	r0, [r0]
   12b24:	bl	4cc4 <rb_ignore_errno@plt>
   12b28:	cmp	r0, #0
   12b2c:	beq	12b58 <rb_helper_write_flush+0x74>
   12b30:	ldr	r0, [r4, #16]
   12b34:	cmp	r0, #1
   12b38:	blt	12b68 <rb_helper_write_flush+0x84>
   12b3c:	ldr	r0, [r4, #64]	; 0x40
   12b40:	ldr	r2, [pc, #36]	; 12b6c <rb_helper_write_flush+0x88>
   12b44:	mov	r1, #2
   12b48:	mov	r3, r4
   12b4c:	add	r2, pc, r2
   12b50:	pop	{r4, r5, r6, sl, fp, lr}
   12b54:	b	4d78 <rb_setselect@plt>
   12b58:	ldr	r1, [r4, #80]	; 0x50
   12b5c:	mov	r0, r4
   12b60:	pop	{r4, r5, r6, sl, fp, lr}
   12b64:	bx	r1
   12b68:	pop	{r4, r5, r6, sl, fp, pc}
   12b6c:	.word	0x0000001c

00012b70 <rb_helper_write_sendq>:
   12b70:	push	{r4, r5, r6, sl, fp, lr}
   12b74:	add	fp, sp, #16
   12b78:	mov	r5, r0
   12b7c:	ldr	r0, [r1, #16]
   12b80:	cmp	r0, #1
   12b84:	poplt	{r4, r5, r6, sl, fp, pc}
   12b88:	mov	r4, r1
   12b8c:	add	r6, r1, #4
   12b90:	mov	r0, r5
   12b94:	mov	r1, r6
   12b98:	bl	506c <rb_linebuf_flush@plt>
   12b9c:	cmp	r0, #0
   12ba0:	bgt	12b90 <rb_helper_write_sendq+0x20>
   12ba4:	beq	12be4 <rb_helper_write_sendq+0x74>
   12ba8:	bl	5540 <__errno_location@plt>
   12bac:	ldr	r0, [r0]
   12bb0:	bl	4cc4 <rb_ignore_errno@plt>
   12bb4:	cmp	r0, #0
   12bb8:	beq	12be4 <rb_helper_write_sendq+0x74>
   12bbc:	ldr	r0, [r4, #16]
   12bc0:	cmp	r0, #1
   12bc4:	blt	12bf4 <rb_helper_write_sendq+0x84>
   12bc8:	ldr	r0, [r4, #64]	; 0x40
   12bcc:	ldr	r2, [pc, #36]	; 12bf8 <rb_helper_write_sendq+0x88>
   12bd0:	mov	r1, #2
   12bd4:	mov	r3, r4
   12bd8:	add	r2, pc, r2
   12bdc:	pop	{r4, r5, r6, sl, fp, lr}
   12be0:	b	4d78 <rb_setselect@plt>
   12be4:	ldr	r1, [r4, #80]	; 0x50
   12be8:	mov	r0, r4
   12bec:	pop	{r4, r5, r6, sl, fp, lr}
   12bf0:	bx	r1
   12bf4:	pop	{r4, r5, r6, sl, fp, pc}
   12bf8:	.word	0xffffff90

00012bfc <rb_helper_write>:
   12bfc:	sub	sp, sp, #8
   12c00:	push	{r4, r5, r6, sl, fp, lr}
   12c04:	add	fp, sp, #16
   12c08:	sub	sp, sp, #24
   12c0c:	mov	r4, r0
   12c10:	str	r1, [sp, #4]
   12c14:	mov	r0, #0
   12c18:	add	r1, sp, #20
   12c1c:	str	r3, [fp, #12]
   12c20:	str	r2, [fp, #8]
   12c24:	str	r0, [sp]
   12c28:	str	r0, [sp, #8]
   12c2c:	str	r1, [sp, #12]
   12c30:	str	r0, [sp, #16]
   12c34:	add	r0, fp, #8
   12c38:	add	r5, r4, #4
   12c3c:	mov	r1, sp
   12c40:	str	r0, [sp, #20]
   12c44:	mov	r0, r5
   12c48:	bl	5444 <rb_linebuf_put@plt>
   12c4c:	ldr	r0, [r4, #16]
   12c50:	cmp	r0, #1
   12c54:	blt	12cbc <rb_helper_write+0xc0>
   12c58:	ldr	r6, [r4, #64]	; 0x40
   12c5c:	mov	r0, r6
   12c60:	mov	r1, r5
   12c64:	bl	506c <rb_linebuf_flush@plt>
   12c68:	cmp	r0, #0
   12c6c:	bgt	12c5c <rb_helper_write+0x60>
   12c70:	beq	12cb0 <rb_helper_write+0xb4>
   12c74:	bl	5540 <__errno_location@plt>
   12c78:	ldr	r0, [r0]
   12c7c:	bl	4cc4 <rb_ignore_errno@plt>
   12c80:	cmp	r0, #0
   12c84:	beq	12cb0 <rb_helper_write+0xb4>
   12c88:	ldr	r0, [r4, #16]
   12c8c:	cmp	r0, #1
   12c90:	blt	12cbc <rb_helper_write+0xc0>
   12c94:	ldr	r0, [r4, #64]	; 0x40
   12c98:	ldr	r2, [pc, #44]	; 12ccc <rb_helper_write+0xd0>
   12c9c:	mov	r1, #2
   12ca0:	mov	r3, r4
   12ca4:	add	r2, pc, r2
   12ca8:	bl	4d78 <rb_setselect@plt>
   12cac:	b	12cbc <rb_helper_write+0xc0>
   12cb0:	ldr	r1, [r4, #80]	; 0x50
   12cb4:	mov	r0, r4
   12cb8:	blx	r1
   12cbc:	sub	sp, fp, #16
   12cc0:	pop	{r4, r5, r6, sl, fp, lr}
   12cc4:	add	sp, sp, #8
   12cc8:	bx	lr
   12ccc:	.word	0xfffffec4

00012cd0 <rb_helper_run>:
   12cd0:	cmp	r0, #0
   12cd4:	bxeq	lr
   12cd8:	mov	r1, r0
   12cdc:	ldr	r0, [r0, #60]	; 0x3c
   12ce0:	b	12ce4 <rb_helper_read_cb>

00012ce4 <rb_helper_read_cb>:
   12ce4:	push	{r4, r5, r6, sl, fp, lr}
   12ce8:	add	fp, sp, #16
   12cec:	cmp	r1, #0
   12cf0:	popeq	{r4, r5, r6, sl, fp, pc}
   12cf4:	mov	r4, r1
   12cf8:	ldr	r0, [r1, #60]	; 0x3c
   12cfc:	ldr	r1, [pc, #160]	; 12da4 <rb_helper_read_cb+0xc0>
   12d00:	mov	r2, #32768	; 0x8000
   12d04:	add	r1, pc, r1
   12d08:	bl	5030 <rb_read@plt>
   12d0c:	mov	r2, r0
   12d10:	cmp	r0, #1
   12d14:	blt	12d5c <rb_helper_read_cb+0x78>
   12d18:	ldr	r6, [pc, #136]	; 12da8 <rb_helper_read_cb+0xc4>
   12d1c:	add	r5, r4, #32
   12d20:	add	r6, pc, r6
   12d24:	mov	r0, r5
   12d28:	mov	r1, r6
   12d2c:	mov	r3, #0
   12d30:	bl	4f34 <rb_linebuf_parse@plt>
   12d34:	ldr	r1, [r4, #76]	; 0x4c
   12d38:	mov	r0, r4
   12d3c:	blx	r1
   12d40:	ldr	r0, [r4, #60]	; 0x3c
   12d44:	mov	r1, r6
   12d48:	mov	r2, #32768	; 0x8000
   12d4c:	bl	5030 <rb_read@plt>
   12d50:	mov	r2, r0
   12d54:	cmp	r0, #0
   12d58:	bgt	12d24 <rb_helper_read_cb+0x40>
   12d5c:	cmp	r2, #0
   12d60:	beq	12d94 <rb_helper_read_cb+0xb0>
   12d64:	bl	5540 <__errno_location@plt>
   12d68:	ldr	r0, [r0]
   12d6c:	bl	4cc4 <rb_ignore_errno@plt>
   12d70:	cmp	r0, #0
   12d74:	beq	12d94 <rb_helper_read_cb+0xb0>
   12d78:	ldr	r0, [r4, #60]	; 0x3c
   12d7c:	ldr	r2, [pc, #40]	; 12dac <rb_helper_read_cb+0xc8>
   12d80:	mov	r1, #1
   12d84:	mov	r3, r4
   12d88:	add	r2, pc, r2
   12d8c:	pop	{r4, r5, r6, sl, fp, lr}
   12d90:	b	4d78 <rb_setselect@plt>
   12d94:	ldr	r1, [r4, #80]	; 0x50
   12d98:	mov	r0, r4
   12d9c:	pop	{r4, r5, r6, sl, fp, lr}
   12da0:	bx	r1
   12da4:	.word	0x0002d5cc
   12da8:	.word	0x0002d5b0
   12dac:	.word	0xffffff54

00012db0 <rb_helper_close>:
   12db0:	cmp	r0, #0
   12db4:	bxeq	lr
   12db8:	push	{r4, sl, fp, lr}
   12dbc:	add	fp, sp, #8
   12dc0:	mov	r4, r0
   12dc4:	ldr	r0, [r0, #68]	; 0x44
   12dc8:	mov	r1, #9
   12dcc:	bl	4f94 <rb_kill@plt>
   12dd0:	ldr	r0, [r4, #60]	; 0x3c
   12dd4:	bl	5108 <rb_close@plt>
   12dd8:	ldr	r0, [r4, #64]	; 0x40
   12ddc:	bl	5108 <rb_close@plt>
   12de0:	mov	r0, r4
   12de4:	pop	{r4, sl, fp, lr}
   12de8:	b	4fa0 <free@plt>

00012dec <rb_helper_read>:
   12dec:	push	{fp, lr}
   12df0:	mov	fp, sp
   12df4:	sub	sp, sp, #8
   12df8:	mov	r3, #0
   12dfc:	add	r0, r0, #32
   12e00:	str	r3, [sp]
   12e04:	mov	r3, #0
   12e08:	bl	5048 <rb_linebuf_get@plt>
   12e0c:	mov	sp, fp
   12e10:	pop	{fp, pc}

00012e14 <rb_helper_loop>:
   12e14:	push	{fp, lr}
   12e18:	mov	fp, sp
   12e1c:	mov	r4, r1
   12e20:	bl	4c4c <rb_helper_run@plt>
   12e24:	mov	r0, r4
   12e28:	bl	4ff4 <rb_lib_loop@plt>

00012e2c <rb_init_netio_devpoll>:
   12e2c:	mov	r0, #38	; 0x26
   12e30:	bx	lr

00012e34 <rb_setselect_devpoll>:
   12e34:	push	{fp, lr}
   12e38:	mov	fp, sp
   12e3c:	bl	5540 <__errno_location@plt>
   12e40:	mov	r1, #38	; 0x26
   12e44:	str	r1, [r0]
   12e48:	pop	{fp, pc}

00012e4c <rb_select_devpoll>:
   12e4c:	push	{fp, lr}
   12e50:	mov	fp, sp
   12e54:	bl	5540 <__errno_location@plt>
   12e58:	mov	r1, #38	; 0x26
   12e5c:	str	r1, [r0]
   12e60:	mvn	r0, #0
   12e64:	pop	{fp, pc}

00012e68 <rb_setup_fd_devpoll>:
   12e68:	push	{fp, lr}
   12e6c:	mov	fp, sp
   12e70:	bl	5540 <__errno_location@plt>
   12e74:	mov	r1, #38	; 0x26
   12e78:	str	r1, [r0]
   12e7c:	mvn	r0, #0
   12e80:	pop	{fp, pc}

00012e84 <rb_init_netio_epoll>:
   12e84:	push	{r4, sl, fp, lr}
   12e88:	add	fp, sp, #8
   12e8c:	ldr	r0, [pc, #156]	; 12f30 <rb_init_netio_epoll+0xac>
   12e90:	mov	r1, #0
   12e94:	add	r0, pc, r0
   12e98:	strb	r1, [r0]
   12e9c:	ldr	r0, [pc, #144]	; 12f34 <rb_init_netio_epoll+0xb0>
   12ea0:	add	r0, pc, r0
   12ea4:	str	r1, [r0]
   12ea8:	mov	r0, #1
   12eac:	mov	r1, #12
   12eb0:	bl	4ea4 <calloc@plt>
   12eb4:	cmp	r0, #0
   12eb8:	beq	12f2c <rb_init_netio_epoll+0xa8>
   12ebc:	ldr	r1, [pc, #116]	; 12f38 <rb_init_netio_epoll+0xb4>
   12ec0:	add	r1, pc, r1
   12ec4:	str	r0, [r1]
   12ec8:	bl	4ca0 <getdtablesize@plt>
   12ecc:	ldr	r1, [pc, #104]	; 12f3c <rb_init_netio_epoll+0xb8>
   12ed0:	ldr	r1, [pc, r1]
   12ed4:	str	r0, [r1, #8]
   12ed8:	bl	4dc0 <epoll_create@plt>
   12edc:	ldr	r1, [pc, #92]	; 12f40 <rb_init_netio_epoll+0xbc>
   12ee0:	cmp	r0, #0
   12ee4:	ldr	r1, [pc, r1]
   12ee8:	str	r0, [r1]
   12eec:	mvnlt	r0, #0
   12ef0:	poplt	{r4, sl, fp, pc}
   12ef4:	ldr	r2, [pc, #72]	; 12f44 <rb_init_netio_epoll+0xc0>
   12ef8:	mov	r1, #64	; 0x40
   12efc:	add	r2, pc, r2
   12f00:	bl	52f4 <rb_open@plt>
   12f04:	ldr	r4, [pc, #60]	; 12f48 <rb_init_netio_epoll+0xc4>
   12f08:	ldr	r4, [pc, r4]
   12f0c:	ldr	r0, [r4, #8]
   12f10:	lsl	r1, r0, #4
   12f14:	mov	r0, #1
   12f18:	bl	4ea4 <calloc@plt>
   12f1c:	cmp	r0, #0
   12f20:	strne	r0, [r4, #4]
   12f24:	movne	r0, #0
   12f28:	popne	{r4, sl, fp, pc}
   12f2c:	bl	5204 <rb_outofmemory@plt>
   12f30:	.word	0x00035440
   12f34:	.word	0x00035430
   12f38:	.word	0x00035418
   12f3c:	.word	0x00035408
   12f40:	.word	0x000353f4
   12f44:	.word	0x00006d77
   12f48:	.word	0x000353d0

00012f4c <rb_setup_fd_epoll>:
   12f4c:	mov	r0, #0
   12f50:	bx	lr

00012f54 <rb_setselect_epoll>:
   12f54:	push	{fp, lr}
   12f58:	mov	fp, sp
   12f5c:	sub	sp, sp, #16
   12f60:	ldr	ip, [r0, #20]
   12f64:	tst	r1, #1
   12f68:	mov	lr, ip
   12f6c:	beq	12f88 <rb_setselect_epoll+0x34>
   12f70:	orr	lr, ip, #1
   12f74:	cmp	r2, #0
   12f78:	str	r2, [r0, #28]
   12f7c:	str	r3, [r0, #32]
   12f80:	biceq	lr, ip, #1
   12f84:	str	lr, [r0, #20]
   12f88:	tst	r1, #2
   12f8c:	bne	12fbc <rb_setselect_epoll+0x68>
   12f90:	mov	r3, lr
   12f94:	orrs	r1, r3, ip
   12f98:	beq	13020 <rb_setselect_epoll+0xcc>
   12f9c:	cmp	r3, #1
   12fa0:	blt	12fe0 <rb_setselect_epoll+0x8c>
   12fa4:	cmp	ip, #0
   12fa8:	beq	12ff0 <rb_setselect_epoll+0x9c>
   12fac:	mov	r1, #3
   12fb0:	cmp	r3, ip
   12fb4:	bne	12ff4 <rb_setselect_epoll+0xa0>
   12fb8:	b	13020 <rb_setselect_epoll+0xcc>
   12fbc:	str	r2, [r0, #36]	; 0x24
   12fc0:	str	r3, [r0, #40]	; 0x28
   12fc4:	orr	r3, lr, #4
   12fc8:	cmp	r2, #0
   12fcc:	biceq	r3, lr, #4
   12fd0:	str	r3, [r0, #20]
   12fd4:	orrs	r1, r3, ip
   12fd8:	bne	12f9c <rb_setselect_epoll+0x48>
   12fdc:	b	13020 <rb_setselect_epoll+0xcc>
   12fe0:	str	r0, [sp, #8]
   12fe4:	str	r3, [sp]
   12fe8:	mov	r1, #2
   12fec:	b	13000 <rb_setselect_epoll+0xac>
   12ff0:	mov	r1, #1
   12ff4:	orr	r2, r3, #-2147483648	; 0x80000000
   12ff8:	str	r0, [sp, #8]
   12ffc:	str	r2, [sp]
   13000:	ldr	r2, [r0, #12]
   13004:	ldr	r0, [pc, #60]	; 13048 <rb_setselect_epoll+0xf4>
   13008:	mov	r3, sp
   1300c:	ldr	r0, [pc, r0]
   13010:	ldr	r0, [r0]
   13014:	bl	54b0 <epoll_ctl@plt>
   13018:	cmp	r0, #0
   1301c:	bne	13028 <rb_setselect_epoll+0xd4>
   13020:	mov	sp, fp
   13024:	pop	{fp, pc}
   13028:	bl	5540 <__errno_location@plt>
   1302c:	ldr	r0, [r0]
   13030:	bl	4c88 <strerror@plt>
   13034:	mov	r1, r0
   13038:	ldr	r0, [pc, #12]	; 1304c <rb_setselect_epoll+0xf8>
   1303c:	add	r0, pc, r0
   13040:	bl	51a4 <rb_lib_log@plt>
   13044:	bl	4cac <abort@plt>
   13048:	.word	0x000352cc
   1304c:	.word	0x00006c4d

00013050 <rb_select_epoll>:
   13050:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13054:	add	fp, sp, #28
   13058:	sub	sp, sp, #20
   1305c:	ldr	r2, [pc, #384]	; 131e4 <rb_select_epoll+0x194>
   13060:	mov	r3, r0
   13064:	ldr	r2, [pc, r2]
   13068:	ldm	r2, {r0, r1, r2}
   1306c:	bl	5054 <epoll_wait@plt>
   13070:	mov	r4, r0
   13074:	bl	5540 <__errno_location@plt>
   13078:	ldr	r6, [r0]
   1307c:	mov	sl, r0
   13080:	bl	5210 <rb_set_time@plt>
   13084:	cmn	r4, #1
   13088:	str	r6, [sl]
   1308c:	ble	131c4 <rb_select_epoll+0x174>
   13090:	cmp	r4, #0
   13094:	beq	131b8 <rb_select_epoll+0x168>
   13098:	mov	r6, #0
   1309c:	mov	r9, sp
   130a0:	mov	r5, #0
   130a4:	ldr	r0, [pc, #316]	; 131e8 <rb_select_epoll+0x198>
   130a8:	ldr	r0, [pc, r0]
   130ac:	ldr	r0, [r0, #4]
   130b0:	ldrb	r1, [r0, r5, lsl #4]!
   130b4:	ldr	r7, [r0, #8]
   130b8:	tst	r1, #25
   130bc:	ldr	r8, [r7, #20]
   130c0:	beq	130e4 <rb_select_epoll+0x94>
   130c4:	ldr	r2, [r7, #28]
   130c8:	ldr	r1, [r7, #32]
   130cc:	str	r6, [r7, #28]
   130d0:	str	r6, [r7, #32]
   130d4:	cmp	r2, #0
   130d8:	beq	130e4 <rb_select_epoll+0x94>
   130dc:	mov	r0, r7
   130e0:	blx	r2
   130e4:	ldrb	r0, [r7, #16]
   130e8:	tst	r0, #1
   130ec:	beq	131ac <rb_select_epoll+0x15c>
   130f0:	ldr	r0, [pc, #244]	; 131ec <rb_select_epoll+0x19c>
   130f4:	ldr	r0, [pc, r0]
   130f8:	ldr	r0, [r0, #4]
   130fc:	ldrb	r0, [r0, r5, lsl #4]
   13100:	tst	r0, #28
   13104:	beq	13134 <rb_select_epoll+0xe4>
   13108:	ldr	r2, [r7, #36]	; 0x24
   1310c:	ldr	r1, [r7, #40]	; 0x28
   13110:	str	r6, [r7, #36]	; 0x24
   13114:	str	r6, [r7, #40]	; 0x28
   13118:	cmp	r2, #0
   1311c:	beq	13134 <rb_select_epoll+0xe4>
   13120:	mov	r0, r7
   13124:	blx	r2
   13128:	ldrb	r0, [r7, #16]
   1312c:	tst	r0, #1
   13130:	beq	131ac <rb_select_epoll+0x15c>
   13134:	ldr	r0, [r7, #28]
   13138:	ldr	r1, [r7, #36]	; 0x24
   1313c:	cmp	r0, #0
   13140:	movwne	r0, #1
   13144:	cmp	r1, #0
   13148:	orrne	r0, r0, #4
   1314c:	cmp	r8, r0
   13150:	beq	131ac <rb_select_epoll+0x15c>
   13154:	cmp	r0, #0
   13158:	str	r0, [sp]
   1315c:	str	r0, [r7, #20]
   13160:	str	r7, [sp, #8]
   13164:	mov	r1, #3
   13168:	mov	r3, r9
   1316c:	orrne	r0, r0, #-2147483648	; 0x80000000
   13170:	movweq	r1, #2
   13174:	strne	r0, [sp]
   13178:	ldr	r2, [r7, #12]
   1317c:	ldr	r0, [pc, #108]	; 131f0 <rb_select_epoll+0x1a0>
   13180:	ldr	r0, [pc, r0]
   13184:	ldr	r0, [r0]
   13188:	bl	54b0 <epoll_ctl@plt>
   1318c:	cmp	r0, #0
   13190:	beq	131ac <rb_select_epoll+0x15c>
   13194:	ldr	r0, [sl]
   13198:	bl	4c88 <strerror@plt>
   1319c:	mov	r1, r0
   131a0:	ldr	r0, [pc, #76]	; 131f4 <rb_select_epoll+0x1a4>
   131a4:	add	r0, pc, r0
   131a8:	bl	51a4 <rb_lib_log@plt>
   131ac:	add	r5, r5, #1
   131b0:	cmp	r4, r5
   131b4:	bne	130a4 <rb_select_epoll+0x54>
   131b8:	mov	r0, #0
   131bc:	sub	sp, fp, #28
   131c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131c4:	mov	r0, r6
   131c8:	bl	4cc4 <rb_ignore_errno@plt>
   131cc:	mov	r1, r0
   131d0:	mov	r0, #0
   131d4:	cmp	r1, #0
   131d8:	movweq	r0, #5
   131dc:	sub	sp, fp, #28
   131e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131e4:	.word	0x00035274
   131e8:	.word	0x00035230
   131ec:	.word	0x000351e4
   131f0:	.word	0x00035158
   131f4:	.word	0x00006b10

000131f8 <rb_epoll_supports_event>:
   131f8:	push	{r4, r5, r6, sl, fp, lr}
   131fc:	add	fp, sp, #16
   13200:	sub	sp, sp, #288	; 0x120
   13204:	ldr	r4, [pc, #272]	; 1331c <rb_epoll_supports_event+0x124>
   13208:	ldr	r4, [pc, r4]
   1320c:	cmp	r4, #1
   13210:	beq	132b4 <rb_epoll_supports_event+0xbc>
   13214:	cmn	r4, #1
   13218:	bne	13224 <rb_epoll_supports_event+0x2c>
   1321c:	mov	r4, #0
   13220:	b	132b4 <rb_epoll_supports_event+0xbc>
   13224:	ldr	r1, [pc, #244]	; 13320 <rb_epoll_supports_event+0x128>
   13228:	add	r2, sp, #128	; 0x80
   1322c:	mov	r0, #3
   13230:	add	r1, pc, r1
   13234:	bl	4d60 <__xstat@plt>
   13238:	cmp	r0, #0
   1323c:	beq	132a0 <rb_epoll_supports_event+0xa8>
   13240:	mov	r0, #0
   13244:	mov	r1, #0
   13248:	mov	r4, #0
   1324c:	bl	5420 <timerfd_create@plt>
   13250:	cmp	r0, #0
   13254:	blt	1327c <rb_epoll_supports_event+0x84>
   13258:	bl	51c8 <close@plt>
   1325c:	ldr	r0, [pc, #196]	; 13328 <rb_epoll_supports_event+0x130>
   13260:	mov	r4, #1
   13264:	add	r0, pc, r0
   13268:	str	r4, [r0]
   1326c:	ldr	r0, [pc, #184]	; 1332c <rb_epoll_supports_event+0x134>
   13270:	add	r0, pc, r0
   13274:	strb	r4, [r0]
   13278:	b	132b4 <rb_epoll_supports_event+0xbc>
   1327c:	mov	r0, #26
   13280:	str	r4, [fp, #-76]	; 0xffffffb4
   13284:	sub	r1, fp, #84	; 0x54
   13288:	sub	r2, fp, #20
   1328c:	str	r0, [fp, #-80]	; 0xffffffb0
   13290:	mov	r0, #0
   13294:	bl	4dfc <timer_create@plt>
   13298:	cmp	r0, #0
   1329c:	beq	132c0 <rb_epoll_supports_event+0xc8>
   132a0:	ldr	r0, [pc, #124]	; 13324 <rb_epoll_supports_event+0x12c>
   132a4:	mvn	r1, #0
   132a8:	mov	r4, #0
   132ac:	add	r0, pc, r0
   132b0:	str	r1, [r0]
   132b4:	mov	r0, r4
   132b8:	sub	sp, fp, #16
   132bc:	pop	{r4, r5, r6, sl, fp, pc}
   132c0:	ldr	r0, [fp, #-20]	; 0xffffffec
   132c4:	bl	52e8 <timer_delete@plt>
   132c8:	mov	r5, sp
   132cc:	mov	r0, r5
   132d0:	bl	4c7c <sigemptyset@plt>
   132d4:	mvn	r0, #0
   132d8:	mov	r1, r5
   132dc:	mov	r2, #0
   132e0:	mvn	r6, #0
   132e4:	mov	r4, #0
   132e8:	bl	4d18 <signalfd@plt>
   132ec:	cmn	r0, #1
   132f0:	ble	1330c <rb_epoll_supports_event+0x114>
   132f4:	bl	51c8 <close@plt>
   132f8:	ldr	r0, [pc, #52]	; 13334 <rb_epoll_supports_event+0x13c>
   132fc:	mov	r4, #1
   13300:	add	r0, pc, r0
   13304:	str	r4, [r0]
   13308:	b	132b4 <rb_epoll_supports_event+0xbc>
   1330c:	ldr	r0, [pc, #28]	; 13330 <rb_epoll_supports_event+0x138>
   13310:	add	r0, pc, r0
   13314:	str	r6, [r0]
   13318:	b	132b4 <rb_epoll_supports_event+0xbc>
   1331c:	.word	0x000350c8
   13320:	.word	0x00006aac
   13324:	.word	0x00035024
   13328:	.word	0x0003506c
   1332c:	.word	0x00035064
   13330:	.word	0x00034fc0
   13334:	.word	0x00034fd0

00013338 <rb_epoll_init_event>:
   13338:	push	{r4, r5, fp, lr}
   1333c:	add	fp, sp, #8
   13340:	sub	sp, sp, #128	; 0x80
   13344:	bl	131f8 <rb_epoll_supports_event>
   13348:	ldr	r0, [pc, #172]	; 133fc <rb_epoll_init_event+0xc4>
   1334c:	add	r0, pc, r0
   13350:	ldrb	r0, [r0]
   13354:	cmp	r0, #0
   13358:	bne	133e0 <rb_epoll_init_event+0xa8>
   1335c:	mov	r4, sp
   13360:	mov	r0, r4
   13364:	bl	4c7c <sigemptyset@plt>
   13368:	bl	4d54 <__libc_current_sigrtmin@plt>
   1336c:	mov	r1, r0
   13370:	mov	r0, r4
   13374:	bl	5120 <sigaddset@plt>
   13378:	mov	r0, #0
   1337c:	mov	r1, r4
   13380:	mov	r2, #0
   13384:	bl	5234 <sigprocmask@plt>
   13388:	mov	r0, r4
   1338c:	bl	4c7c <sigemptyset@plt>
   13390:	bl	4d54 <__libc_current_sigrtmin@plt>
   13394:	mov	r1, r0
   13398:	mov	r0, r4
   1339c:	bl	5120 <sigaddset@plt>
   133a0:	mvn	r0, #0
   133a4:	mov	r1, r4
   133a8:	mov	r2, #0
   133ac:	mvn	r5, #0
   133b0:	bl	4d18 <signalfd@plt>
   133b4:	cmn	r0, #1
   133b8:	beq	133e8 <rb_epoll_init_event+0xb0>
   133bc:	ldr	r2, [pc, #64]	; 13404 <rb_epoll_init_event+0xcc>
   133c0:	mov	r1, #64	; 0x40
   133c4:	add	r2, pc, r2
   133c8:	bl	52f4 <rb_open@plt>
   133cc:	mov	r4, r0
   133d0:	bl	4ed4 <rb_set_nb@plt>
   133d4:	mov	r0, r4
   133d8:	mov	r1, #0
   133dc:	bl	13408 <signalfd_handler>
   133e0:	sub	sp, fp, #8
   133e4:	pop	{r4, r5, fp, pc}
   133e8:	ldr	r0, [pc, #16]	; 13400 <rb_epoll_init_event+0xc8>
   133ec:	add	r0, pc, r0
   133f0:	str	r5, [r0]
   133f4:	sub	sp, fp, #8
   133f8:	pop	{r4, r5, fp, pc}
   133fc:	.word	0x00034f88
   13400:	.word	0x00034ee4
   13404:	.word	0x00006930

00013408 <signalfd_handler>:
   13408:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1340c:	add	fp, sp, #24
   13410:	ldr	r5, [pc, #388]	; 1359c <signalfd_handler+0x194>
   13414:	ldr	r6, [pc, #388]	; 135a0 <signalfd_handler+0x198>
   13418:	mov	r4, r0
   1341c:	mov	r0, #128	; 0x80
   13420:	add	r6, pc, r6
   13424:	add	r5, pc, r5
   13428:	add	r1, r6, #128	; 0x80
   1342c:	add	r2, r6, #256	; 0x100
   13430:	add	r3, r6, #384	; 0x180
   13434:	str	r6, [r5]
   13438:	add	r7, r6, #896	; 0x380
   1343c:	stmib	r5, {r0, r1}
   13440:	str	r0, [r5, #12]
   13444:	str	r2, [r5, #16]
   13448:	str	r0, [r5, #20]
   1344c:	str	r3, [r5, #24]
   13450:	add	r1, r6, #512	; 0x200
   13454:	add	r2, r6, #640	; 0x280
   13458:	add	r3, r6, #768	; 0x300
   1345c:	str	r0, [r5, #28]
   13460:	str	r1, [r5, #32]
   13464:	str	r0, [r5, #36]	; 0x24
   13468:	str	r2, [r5, #40]	; 0x28
   1346c:	str	r0, [r5, #44]	; 0x2c
   13470:	str	r3, [r5, #48]	; 0x30
   13474:	str	r0, [r5, #52]	; 0x34
   13478:	str	r7, [r5, #56]	; 0x38
   1347c:	add	r1, r6, #1024	; 0x400
   13480:	add	r2, r6, #1152	; 0x480
   13484:	add	r3, r6, #1280	; 0x500
   13488:	add	r7, r6, #1408	; 0x580
   1348c:	str	r0, [r5, #60]	; 0x3c
   13490:	str	r1, [r5, #64]	; 0x40
   13494:	str	r0, [r5, #68]	; 0x44
   13498:	str	r2, [r5, #72]	; 0x48
   1349c:	str	r0, [r5, #76]	; 0x4c
   134a0:	str	r3, [r5, #80]	; 0x50
   134a4:	str	r0, [r5, #84]	; 0x54
   134a8:	str	r7, [r5, #88]	; 0x58
   134ac:	add	r1, r6, #1536	; 0x600
   134b0:	add	r2, r6, #1664	; 0x680
   134b4:	add	r3, r6, #1792	; 0x700
   134b8:	add	r7, r6, #1920	; 0x780
   134bc:	str	r0, [r5, #92]	; 0x5c
   134c0:	str	r1, [r5, #96]	; 0x60
   134c4:	str	r0, [r5, #100]	; 0x64
   134c8:	str	r2, [r5, #104]	; 0x68
   134cc:	str	r0, [r5, #108]	; 0x6c
   134d0:	str	r3, [r5, #112]	; 0x70
   134d4:	str	r0, [r5, #116]	; 0x74
   134d8:	str	r7, [r5, #120]	; 0x78
   134dc:	str	r0, [r5, #124]	; 0x7c
   134e0:	mov	r0, r4
   134e4:	bl	4db4 <rb_get_fd@plt>
   134e8:	mov	r1, r5
   134ec:	mov	r2, #16
   134f0:	bl	54c8 <readv@plt>
   134f4:	cmp	r0, #0
   134f8:	beq	1358c <signalfd_handler+0x184>
   134fc:	ldr	r8, [pc, #160]	; 135a4 <signalfd_handler+0x19c>
   13500:	add	r5, r6, #48	; 0x30
   13504:	add	r8, pc, r8
   13508:	cmp	r0, #0
   1350c:	blt	1355c <signalfd_handler+0x154>
   13510:	cmp	r0, #128	; 0x80
   13514:	blt	1353c <signalfd_handler+0x134>
   13518:	lsr	r7, r0, #7
   1351c:	mov	r6, r5
   13520:	ldr	r0, [r6]
   13524:	cmp	r0, #0
   13528:	beq	13530 <signalfd_handler+0x128>
   1352c:	bl	5144 <rb_run_one_event@plt>
   13530:	add	r6, r6, #128	; 0x80
   13534:	subs	r7, r7, #1
   13538:	bne	13520 <signalfd_handler+0x118>
   1353c:	mov	r0, r4
   13540:	bl	4db4 <rb_get_fd@plt>
   13544:	mov	r1, r8
   13548:	mov	r2, #16
   1354c:	bl	54c8 <readv@plt>
   13550:	cmp	r0, #0
   13554:	bne	13508 <signalfd_handler+0x100>
   13558:	b	1358c <signalfd_handler+0x184>
   1355c:	bl	5540 <__errno_location@plt>
   13560:	ldr	r0, [r0]
   13564:	bl	4cc4 <rb_ignore_errno@plt>
   13568:	cmp	r0, #0
   1356c:	beq	1358c <signalfd_handler+0x184>
   13570:	ldr	r2, [pc, #48]	; 135a8 <signalfd_handler+0x1a0>
   13574:	mov	r0, r4
   13578:	mov	r1, #1
   1357c:	mov	r3, #0
   13580:	add	r2, pc, r2
   13584:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13588:	b	4d78 <rb_setselect@plt>
   1358c:	mov	r0, r4
   13590:	bl	5108 <rb_close@plt>
   13594:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13598:	b	13338 <rb_epoll_init_event>
   1359c:	.word	0x000356bc
   135a0:	.word	0x00034ec0
   135a4:	.word	0x000355dc
   135a8:	.word	0xfffffe80

000135ac <rb_epoll_sched_event>:
   135ac:	push	{r4, r5, r6, r7, fp, lr}
   135b0:	add	fp, sp, #16
   135b4:	sub	sp, sp, #80	; 0x50
   135b8:	mov	r5, r0
   135bc:	ldr	r0, [pc, #540]	; 137e0 <rb_epoll_sched_event+0x234>
   135c0:	mov	r6, r1
   135c4:	add	r0, pc, r0
   135c8:	ldrb	r0, [r0]
   135cc:	cmp	r0, #1
   135d0:	bne	13698 <rb_epoll_sched_event+0xec>
   135d4:	mov	r0, #0
   135d8:	mov	r1, #0
   135dc:	mov	r4, #0
   135e0:	bl	5420 <timerfd_create@plt>
   135e4:	cmn	r0, #1
   135e8:	ble	1376c <rb_epoll_sched_event+0x1c0>
   135ec:	str	r4, [sp, #20]
   135f0:	str	r4, [sp, #16]
   135f4:	str	r6, [sp, #24]
   135f8:	str	r4, [sp, #28]
   135fc:	mov	r7, r0
   13600:	add	r2, sp, #16
   13604:	mov	r3, #0
   13608:	mov	r4, #0
   1360c:	ldr	r0, [r5, #24]
   13610:	cmp	r0, #0
   13614:	addne	r0, sp, #16
   13618:	addne	r0, r0, #8
   1361c:	ldrdne	r0, [r0]
   13620:	strne	r1, [sp, #20]
   13624:	strne	r0, [sp, #16]
   13628:	mov	r0, r7
   1362c:	mov	r1, #0
   13630:	bl	54a4 <timerfd_settime@plt>
   13634:	cmn	r0, #1
   13638:	ble	137ac <rb_epoll_sched_event+0x200>
   1363c:	ldr	r3, [r5, #20]
   13640:	ldr	r4, [pc, #420]	; 137ec <rb_epoll_sched_event+0x240>
   13644:	ldr	r2, [pc, #420]	; 137f0 <rb_epoll_sched_event+0x244>
   13648:	mov	r1, #136	; 0x88
   1364c:	add	r4, pc, r4
   13650:	add	r2, pc, r2
   13654:	mov	r0, r4
   13658:	bl	5408 <snprintf@plt>
   1365c:	mov	r0, r7
   13660:	mov	r1, #64	; 0x40
   13664:	mov	r2, r4
   13668:	bl	52f4 <rb_open@plt>
   1366c:	mov	r6, r0
   13670:	bl	4ed4 <rb_set_nb@plt>
   13674:	str	r6, [r5, #40]	; 0x28
   13678:	mov	r0, r6
   1367c:	mov	r1, #1
   13680:	mov	r3, r5
   13684:	mov	r4, #1
   13688:	ldr	r2, [pc, #356]	; 137f4 <rb_epoll_sched_event+0x248>
   1368c:	add	r2, pc, r2
   13690:	bl	4d78 <rb_setselect@plt>
   13694:	b	137d0 <rb_epoll_sched_event+0x224>
   13698:	add	r0, sp, #16
   1369c:	vmov.i32	q8, #0	; 0x00000000
   136a0:	add	r1, r0, #32
   136a4:	vst1.64	{d16-d17}, [r1]
   136a8:	add	r1, r0, #16
   136ac:	vst1.64	{d16-d17}, [r1]
   136b0:	mov	r1, #48	; 0x30
   136b4:	vst1.64	{d16-d17}, [r0], r1
   136b8:	mov	r1, #4
   136bc:	vst1.64	{d16-d17}, [r0]
   136c0:	mov	r0, #1
   136c4:	bl	4ea4 <calloc@plt>
   136c8:	cmp	r0, #0
   136cc:	beq	137dc <rb_epoll_sched_event+0x230>
   136d0:	mov	r4, #0
   136d4:	str	r0, [r5, #40]	; 0x28
   136d8:	mov	r7, r0
   136dc:	str	r4, [sp, #24]
   136e0:	bl	4d54 <__libc_current_sigrtmin@plt>
   136e4:	str	r0, [sp, #20]
   136e8:	add	r1, sp, #16
   136ec:	mov	r0, #0
   136f0:	mov	r2, r7
   136f4:	str	r5, [sp, #16]
   136f8:	bl	4dfc <timer_create@plt>
   136fc:	cmn	r0, #1
   13700:	ble	1378c <rb_epoll_sched_event+0x1e0>
   13704:	str	r4, [sp]
   13708:	stmib	sp, {r4, r6}
   1370c:	str	r4, [sp, #12]
   13710:	mov	r2, sp
   13714:	mov	r3, #0
   13718:	ldr	r0, [r5, #24]
   1371c:	cmp	r0, #0
   13720:	movne	r0, sp
   13724:	addne	r0, r0, #8
   13728:	ldrdne	r0, [r0]
   1372c:	stmne	sp, {r0, r1}
   13730:	mov	r1, #0
   13734:	ldr	r0, [r7]
   13738:	bl	5000 <timer_settime@plt>
   1373c:	mov	r4, #1
   13740:	cmn	r0, #1
   13744:	bgt	137d0 <rb_epoll_sched_event+0x224>
   13748:	bl	5540 <__errno_location@plt>
   1374c:	ldr	r0, [r0]
   13750:	bl	4c88 <strerror@plt>
   13754:	mov	r1, r0
   13758:	ldr	r0, [pc, #156]	; 137fc <rb_epoll_sched_event+0x250>
   1375c:	add	r0, pc, r0
   13760:	bl	51a4 <rb_lib_log@plt>
   13764:	mov	r4, #0
   13768:	b	137d0 <rb_epoll_sched_event+0x224>
   1376c:	bl	5540 <__errno_location@plt>
   13770:	ldr	r0, [r0]
   13774:	bl	4c88 <strerror@plt>
   13778:	mov	r1, r0
   1377c:	ldr	r0, [pc, #96]	; 137e4 <rb_epoll_sched_event+0x238>
   13780:	add	r0, pc, r0
   13784:	bl	51a4 <rb_lib_log@plt>
   13788:	b	137d0 <rb_epoll_sched_event+0x224>
   1378c:	bl	5540 <__errno_location@plt>
   13790:	ldr	r0, [r0]
   13794:	bl	4c88 <strerror@plt>
   13798:	mov	r1, r0
   1379c:	ldr	r0, [pc, #84]	; 137f8 <rb_epoll_sched_event+0x24c>
   137a0:	add	r0, pc, r0
   137a4:	bl	51a4 <rb_lib_log@plt>
   137a8:	b	137d0 <rb_epoll_sched_event+0x224>
   137ac:	bl	5540 <__errno_location@plt>
   137b0:	ldr	r0, [r0]
   137b4:	bl	4c88 <strerror@plt>
   137b8:	mov	r1, r0
   137bc:	ldr	r0, [pc, #36]	; 137e8 <rb_epoll_sched_event+0x23c>
   137c0:	add	r0, pc, r0
   137c4:	bl	51a4 <rb_lib_log@plt>
   137c8:	mov	r0, r7
   137cc:	bl	51c8 <close@plt>
   137d0:	mov	r0, r4
   137d4:	sub	sp, fp, #16
   137d8:	pop	{r4, r5, r6, r7, fp, pc}
   137dc:	bl	5204 <rb_outofmemory@plt>
   137e0:	.word	0x00034d10
   137e4:	.word	0x0000657d
   137e8:	.word	0x00006551
   137ec:	.word	0x00035514
   137f0:	.word	0x000066d6
   137f4:	.word	0x000001c0
   137f8:	.word	0x000065c3
   137fc:	.word	0x00006619

00013800 <rb_epoll_unsched_event>:
   13800:	push	{r4, sl, fp, lr}
   13804:	add	fp, sp, #8
   13808:	mov	r4, r0
   1380c:	ldr	r0, [r0, #40]	; 0x28
   13810:	ldr	r1, [pc, #56]	; 13850 <rb_epoll_unsched_event+0x50>
   13814:	add	r1, pc, r1
   13818:	ldrb	r1, [r1]
   1381c:	cmp	r1, #1
   13820:	bne	1382c <rb_epoll_unsched_event+0x2c>
   13824:	bl	5108 <rb_close@plt>
   13828:	b	13844 <rb_epoll_unsched_event+0x44>
   1382c:	ldr	r0, [r0]
   13830:	bl	52e8 <timer_delete@plt>
   13834:	ldr	r0, [r4, #40]	; 0x28
   13838:	cmp	r0, #0
   1383c:	beq	13844 <rb_epoll_unsched_event+0x44>
   13840:	bl	4fa0 <free@plt>
   13844:	mov	r0, #0
   13848:	str	r0, [r4, #40]	; 0x28
   1384c:	pop	{r4, sl, fp, pc}
   13850:	.word	0x00034ac0

00013854 <rb_read_timerfd>:
   13854:	push	{r4, r5, fp, lr}
   13858:	add	fp, sp, #8
   1385c:	sub	sp, sp, #8
   13860:	mov	r5, r0
   13864:	cmp	r1, #0
   13868:	beq	138cc <rb_read_timerfd+0x78>
   1386c:	mov	r4, r1
   13870:	mov	r1, sp
   13874:	mov	r0, r5
   13878:	mov	r2, #8
   1387c:	bl	5030 <rb_read@plt>
   13880:	cmp	r0, #0
   13884:	beq	138dc <rb_read_timerfd+0x88>
   13888:	cmn	r0, #1
   1388c:	bgt	138a4 <rb_read_timerfd+0x50>
   13890:	bl	5540 <__errno_location@plt>
   13894:	ldr	r0, [r0]
   13898:	bl	4cc4 <rb_ignore_errno@plt>
   1389c:	cmp	r0, #0
   138a0:	beq	138dc <rb_read_timerfd+0x88>
   138a4:	ldr	r2, [pc, #104]	; 13914 <rb_read_timerfd+0xc0>
   138a8:	mov	r0, r5
   138ac:	mov	r1, #1
   138b0:	mov	r3, r4
   138b4:	add	r2, pc, r2
   138b8:	bl	4d78 <rb_setselect@plt>
   138bc:	mov	r0, r4
   138c0:	bl	5144 <rb_run_one_event@plt>
   138c4:	sub	sp, fp, #8
   138c8:	pop	{r4, r5, fp, pc}
   138cc:	mov	r0, r5
   138d0:	bl	5108 <rb_close@plt>
   138d4:	sub	sp, fp, #8
   138d8:	pop	{r4, r5, fp, pc}
   138dc:	mov	r0, r5
   138e0:	bl	5108 <rb_close@plt>
   138e4:	ldr	r4, [r4, #20]
   138e8:	bl	5540 <__errno_location@plt>
   138ec:	ldr	r0, [r0]
   138f0:	bl	4c88 <strerror@plt>
   138f4:	mov	r2, r0
   138f8:	ldr	r0, [pc, #16]	; 13910 <rb_read_timerfd+0xbc>
   138fc:	mov	r1, r4
   13900:	add	r0, pc, r0
   13904:	bl	51a4 <rb_lib_log@plt>
   13908:	sub	sp, fp, #8
   1390c:	pop	{r4, r5, fp, pc}
   13910:	.word	0x00006432
   13914:	.word	0xffffff98

00013918 <rb_setup_fd_poll>:
   13918:	mov	r0, #0
   1391c:	bx	lr

00013920 <rb_init_netio_poll>:
   13920:	push	{r4, r5, fp, lr}
   13924:	add	fp, sp, #8
   13928:	bl	4d3c <rb_getmaxconnect@plt>
   1392c:	lsl	r1, r0, #3
   13930:	mov	r0, #1
   13934:	bl	4ea4 <calloc@plt>
   13938:	cmp	r0, #0
   1393c:	beq	139a4 <rb_init_netio_poll+0x84>
   13940:	ldr	r1, [pc, #96]	; 139a8 <rb_init_netio_poll+0x88>
   13944:	add	r1, pc, r1
   13948:	str	r0, [r1]
   1394c:	bl	4d3c <rb_getmaxconnect@plt>
   13950:	ldr	r1, [pc, #84]	; 139ac <rb_init_netio_poll+0x8c>
   13954:	add	r1, pc, r1
   13958:	str	r0, [r1]
   1395c:	bl	4d3c <rb_getmaxconnect@plt>
   13960:	cmp	r0, #1
   13964:	blt	1398c <rb_init_netio_poll+0x6c>
   13968:	mov	r4, #0
   1396c:	mvn	r5, #0
   13970:	ldr	r0, [pc, #56]	; 139b0 <rb_init_netio_poll+0x90>
   13974:	ldr	r0, [pc, r0]
   13978:	str	r5, [r0, r4, lsl #3]
   1397c:	add	r4, r4, #1
   13980:	bl	4d3c <rb_getmaxconnect@plt>
   13984:	cmp	r4, r0
   13988:	blt	13970 <rb_init_netio_poll+0x50>
   1398c:	ldr	r0, [pc, #32]	; 139b4 <rb_init_netio_poll+0x94>
   13990:	mov	r1, #0
   13994:	add	r0, pc, r0
   13998:	str	r1, [r0]
   1399c:	mov	r0, #0
   139a0:	pop	{r4, r5, fp, pc}
   139a4:	bl	5204 <rb_outofmemory@plt>
   139a8:	.word	0x000352a4
   139ac:	.word	0x0003529c
   139b0:	.word	0x00035274
   139b4:	.word	0x00035258

000139b8 <rb_setselect_poll>:
   139b8:	push	{r4, r5, r6, r7, fp, lr}
   139bc:	add	fp, sp, #16
   139c0:	cmp	r0, #0
   139c4:	beq	13ac0 <rb_setselect_poll+0x108>
   139c8:	mov	r4, r0
   139cc:	tst	r1, #1
   139d0:	beq	139f0 <rb_setselect_poll+0x38>
   139d4:	str	r2, [r4, #28]
   139d8:	str	r3, [r4, #32]
   139dc:	cmp	r2, #0
   139e0:	ldr	r0, [r4, #20]
   139e4:	orr	r6, r0, #64	; 0x40
   139e8:	biceq	r6, r0, #64	; 0x40
   139ec:	str	r6, [r4, #20]
   139f0:	tst	r1, #2
   139f4:	beq	13a14 <rb_setselect_poll+0x5c>
   139f8:	str	r2, [r4, #36]	; 0x24
   139fc:	str	r3, [r4, #40]	; 0x28
   13a00:	cmp	r2, #0
   13a04:	ldr	r0, [r4, #20]
   13a08:	orr	r1, r0, #256	; 0x100
   13a0c:	biceq	r1, r0, #256	; 0x100
   13a10:	str	r1, [r4, #20]
   13a14:	ldr	r0, [r4, #12]
   13a18:	ldr	r6, [pc, #296]	; 13b48 <rb_setselect_poll+0x190>
   13a1c:	ldr	r6, [pc, r6]
   13a20:	cmp	r6, r0
   13a24:	ble	13ac4 <rb_setselect_poll+0x10c>
   13a28:	ldr	r1, [r4, #20]
   13a2c:	cmp	r1, #0
   13a30:	ble	13a5c <rb_setselect_poll+0xa4>
   13a34:	ldr	r0, [r4, #12]
   13a38:	ldr	r2, [pc, #292]	; 13b64 <rb_setselect_poll+0x1ac>
   13a3c:	ldr	r2, [pc, r2]
   13a40:	str	r0, [r2, r0, lsl #3]!
   13a44:	strh	r1, [r2, #4]
   13a48:	ldr	r1, [pc, #280]	; 13b68 <rb_setselect_poll+0x1b0>
   13a4c:	ldr	r1, [pc, r1]
   13a50:	cmp	r0, r1
   13a54:	pople	{r4, r5, r6, r7, fp, pc}
   13a58:	b	13ab4 <rb_setselect_poll+0xfc>
   13a5c:	ldr	r0, [r4, #12]
   13a60:	ldr	r1, [pc, #244]	; 13b5c <rb_setselect_poll+0x1a4>
   13a64:	mvn	r2, #0
   13a68:	ldr	r1, [pc, r1]
   13a6c:	mov	r3, r1
   13a70:	str	r2, [r3, r0, lsl #3]!
   13a74:	mov	r2, #0
   13a78:	strh	r2, [r3, #4]
   13a7c:	ldr	r2, [pc, #220]	; 13b60 <rb_setselect_poll+0x1a8>
   13a80:	ldr	r2, [pc, r2]
   13a84:	cmp	r0, r2
   13a88:	bne	13ac0 <rb_setselect_poll+0x108>
   13a8c:	cmp	r2, #0
   13a90:	blt	13ac0 <rb_setselect_poll+0x108>
   13a94:	sub	r1, r1, #8
   13a98:	mov	r2, r0
   13a9c:	subs	r0, r0, #1
   13aa0:	blt	13ab0 <rb_setselect_poll+0xf8>
   13aa4:	ldr	r3, [r1, r2, lsl #3]
   13aa8:	cmn	r3, #1
   13aac:	beq	13a98 <rb_setselect_poll+0xe0>
   13ab0:	sub	r0, r2, #1
   13ab4:	ldr	r1, [pc, #176]	; 13b6c <rb_setselect_poll+0x1b4>
   13ab8:	add	r1, pc, r1
   13abc:	str	r0, [r1]
   13ac0:	pop	{r4, r5, r6, r7, fp, pc}
   13ac4:	ldr	r0, [pc, #128]	; 13b4c <rb_setselect_poll+0x194>
   13ac8:	add	r1, r6, #1024	; 0x400
   13acc:	add	r0, pc, r0
   13ad0:	str	r1, [r0]
   13ad4:	lsl	r1, r1, #3
   13ad8:	ldr	r0, [pc, #112]	; 13b50 <rb_setselect_poll+0x198>
   13adc:	ldr	r0, [pc, r0]
   13ae0:	bl	5498 <realloc@plt>
   13ae4:	cmp	r0, #0
   13ae8:	beq	13b44 <rb_setselect_poll+0x18c>
   13aec:	mov	r5, r0
   13af0:	ldr	r0, [pc, #92]	; 13b54 <rb_setselect_poll+0x19c>
   13af4:	add	r7, r6, #1
   13af8:	mov	r1, #0
   13afc:	mov	r2, #8192	; 0x2000
   13b00:	add	r0, pc, r0
   13b04:	str	r5, [r0]
   13b08:	add	r0, r5, r7, lsl #3
   13b0c:	bl	4ee0 <memset@plt>
   13b10:	ldr	r0, [pc, #64]	; 13b58 <rb_setselect_poll+0x1a0>
   13b14:	ldr	r0, [pc, r0]
   13b18:	cmp	r7, r0
   13b1c:	bge	13a28 <rb_setselect_poll+0x70>
   13b20:	sub	r0, r0, #1
   13b24:	add	r1, r5, r6, lsl #3
   13b28:	mvn	r2, #0
   13b2c:	sub	r0, r0, r6
   13b30:	add	r1, r1, #8
   13b34:	str	r2, [r1], #8
   13b38:	subs	r0, r0, #1
   13b3c:	bne	13b34 <rb_setselect_poll+0x17c>
   13b40:	b	13a28 <rb_setselect_poll+0x70>
   13b44:	bl	5204 <rb_outofmemory@plt>
   13b48:	.word	0x000351d4
   13b4c:	.word	0x00035124
   13b50:	.word	0x0003510c
   13b54:	.word	0x000350e8
   13b58:	.word	0x000350dc
   13b5c:	.word	0x00035180
   13b60:	.word	0x0003516c
   13b64:	.word	0x000351ac
   13b68:	.word	0x000351a0
   13b6c:	.word	0x00035134

00013b70 <rb_select_poll>:
   13b70:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b74:	add	fp, sp, #24
   13b78:	mov	r2, r0
   13b7c:	ldr	r0, [pc, #396]	; 13d10 <rb_select_poll+0x1a0>
   13b80:	ldr	r0, [pc, r0]
   13b84:	ldr	r1, [pc, #392]	; 13d14 <rb_select_poll+0x1a4>
   13b88:	ldr	r1, [pc, r1]
   13b8c:	add	r1, r1, #1
   13b90:	bl	527c <poll@plt>
   13b94:	mov	r4, r0
   13b98:	bl	5210 <rb_set_time@plt>
   13b9c:	cmn	r4, #1
   13ba0:	ble	13cf8 <rb_select_poll+0x188>
   13ba4:	mov	r0, #0
   13ba8:	cmp	r4, #0
   13bac:	beq	13cf4 <rb_select_poll+0x184>
   13bb0:	ldr	r1, [pc, #352]	; 13d18 <rb_select_poll+0x1a8>
   13bb4:	ldr	r1, [pc, r1]
   13bb8:	cmp	r1, #0
   13bbc:	poplt	{r4, r5, r6, r7, r8, sl, fp, pc}
   13bc0:	ldr	r6, [pc, #340]	; 13d1c <rb_select_poll+0x1ac>
   13bc4:	mov	r8, #0
   13bc8:	mov	r0, #0
   13bcc:	ldr	r6, [pc, r6]
   13bd0:	b	13bf8 <rb_select_poll+0x88>
   13bd4:	ldr	r2, [r4, #36]	; 0x24
   13bd8:	ldr	r1, [r4, #40]	; 0x28
   13bdc:	str	r8, [r4, #36]	; 0x24
   13be0:	str	r8, [r4, #40]	; 0x28
   13be4:	cmp	r2, #0
   13be8:	beq	13c9c <rb_select_poll+0x12c>
   13bec:	mov	r0, r4
   13bf0:	blx	r2
   13bf4:	b	13c9c <rb_select_poll+0x12c>
   13bf8:	ldr	r1, [pc, #288]	; 13d20 <rb_select_poll+0x1b0>
   13bfc:	mov	r7, r0
   13c00:	ldr	r1, [pc, r1]
   13c04:	ldr	r0, [r1, r0, lsl #3]!
   13c08:	ldrsh	r5, [r1, #6]
   13c0c:	cmp	r5, #0
   13c10:	beq	13cdc <rb_select_poll+0x16c>
   13c14:	cmp	r0, #0
   13c18:	blt	13cdc <rb_select_poll+0x16c>
   13c1c:	eor	r1, r0, r0, lsr #12
   13c20:	ldr	r2, [r6]
   13c24:	bfc	r1, #12, #20
   13c28:	eor	r1, r1, r0, lsr #24
   13c2c:	add	r1, r1, r1, lsl #1
   13c30:	ldr	r1, [r2, r1, lsl #2]
   13c34:	cmp	r1, #0
   13c38:	bne	13c4c <rb_select_poll+0xdc>
   13c3c:	b	13cdc <rb_select_poll+0x16c>
   13c40:	ldr	r1, [r1, #8]
   13c44:	cmp	r1, #0
   13c48:	beq	13cdc <rb_select_poll+0x16c>
   13c4c:	ldr	r4, [r1]
   13c50:	ldr	r2, [r4, #12]
   13c54:	cmp	r2, r0
   13c58:	bne	13c40 <rb_select_poll+0xd0>
   13c5c:	cmp	r4, #0
   13c60:	beq	13cdc <rb_select_poll+0x16c>
   13c64:	tst	r5, #89	; 0x59
   13c68:	beq	13c8c <rb_select_poll+0x11c>
   13c6c:	ldr	r2, [r4, #28]
   13c70:	ldr	r1, [r4, #32]
   13c74:	str	r8, [r4, #28]
   13c78:	str	r8, [r4, #32]
   13c7c:	cmp	r2, #0
   13c80:	beq	13c8c <rb_select_poll+0x11c>
   13c84:	mov	r0, r4
   13c88:	blx	r2
   13c8c:	tst	r5, #284	; 0x11c
   13c90:	ldrbne	r0, [r4, #16]
   13c94:	andsne	r0, r0, #1
   13c98:	bne	13bd4 <rb_select_poll+0x64>
   13c9c:	ldr	r0, [r4, #28]
   13ca0:	cmp	r0, #0
   13ca4:	bne	13cbc <rb_select_poll+0x14c>
   13ca8:	mov	r0, r4
   13cac:	mov	r1, #1
   13cb0:	mov	r2, #0
   13cb4:	mov	r3, #0
   13cb8:	bl	139b8 <rb_setselect_poll>
   13cbc:	ldr	r0, [r4, #36]	; 0x24
   13cc0:	cmp	r0, #0
   13cc4:	bne	13cdc <rb_select_poll+0x16c>
   13cc8:	mov	r0, r4
   13ccc:	mov	r1, #2
   13cd0:	mov	r2, #0
   13cd4:	mov	r3, #0
   13cd8:	bl	139b8 <rb_setselect_poll>
   13cdc:	ldr	r1, [pc, #64]	; 13d24 <rb_select_poll+0x1b4>
   13ce0:	add	r0, r7, #1
   13ce4:	ldr	r1, [pc, r1]
   13ce8:	cmp	r7, r1
   13cec:	blt	13bf8 <rb_select_poll+0x88>
   13cf0:	mov	r0, #0
   13cf4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13cf8:	bl	5540 <__errno_location@plt>
   13cfc:	ldr	r0, [r0]
   13d00:	bl	4cc4 <rb_ignore_errno@plt>
   13d04:	cmp	r0, #0
   13d08:	movwne	r0, #5
   13d0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13d10:	.word	0x00035068
   13d14:	.word	0x00035064
   13d18:	.word	0x00035038
   13d1c:	.word	0x000177b8
   13d20:	.word	0x00034fe8
   13d24:	.word	0x00034f08

00013d28 <rb_ports_supports_event>:
   13d28:	push	{fp, lr}
   13d2c:	mov	fp, sp
   13d30:	bl	5540 <__errno_location@plt>
   13d34:	mov	r1, #38	; 0x26
   13d38:	str	r1, [r0]
   13d3c:	mov	r0, #0
   13d40:	pop	{fp, pc}

00013d44 <rb_ports_init_event>:
   13d44:	bx	lr

00013d48 <rb_ports_sched_event>:
   13d48:	push	{fp, lr}
   13d4c:	mov	fp, sp
   13d50:	bl	5540 <__errno_location@plt>
   13d54:	mov	r1, #38	; 0x26
   13d58:	str	r1, [r0]
   13d5c:	mvn	r0, #0
   13d60:	pop	{fp, pc}

00013d64 <rb_ports_unsched_event>:
   13d64:	bx	lr

00013d68 <rb_init_netio_ports>:
   13d68:	mov	r0, #38	; 0x26
   13d6c:	bx	lr

00013d70 <rb_setselect_ports>:
   13d70:	push	{fp, lr}
   13d74:	mov	fp, sp
   13d78:	bl	5540 <__errno_location@plt>
   13d7c:	mov	r1, #38	; 0x26
   13d80:	str	r1, [r0]
   13d84:	pop	{fp, pc}

00013d88 <rb_select_ports>:
   13d88:	push	{fp, lr}
   13d8c:	mov	fp, sp
   13d90:	bl	5540 <__errno_location@plt>
   13d94:	mov	r1, #38	; 0x26
   13d98:	str	r1, [r0]
   13d9c:	mvn	r0, #0
   13da0:	pop	{fp, pc}

00013da4 <rb_setup_fd_ports>:
   13da4:	push	{fp, lr}
   13da8:	mov	fp, sp
   13dac:	bl	5540 <__errno_location@plt>
   13db0:	mov	r1, #38	; 0x26
   13db4:	str	r1, [r0]
   13db8:	mvn	r0, #0
   13dbc:	pop	{fp, pc}

00013dc0 <rb_init_netio_sigio>:
   13dc0:	push	{r4, r5, r6, sl, fp, lr}
   13dc4:	add	fp, sp, #16
   13dc8:	bl	4d3c <rb_getmaxconnect@plt>
   13dcc:	lsl	r1, r0, #3
   13dd0:	mov	r0, #1
   13dd4:	bl	4ea4 <calloc@plt>
   13dd8:	cmp	r0, #0
   13ddc:	beq	13e8c <rb_init_netio_sigio+0xcc>
   13de0:	ldr	r4, [pc, #168]	; 13e90 <rb_init_netio_sigio+0xd0>
   13de4:	ldr	r4, [pc, r4]
   13de8:	str	r0, [r4]
   13dec:	bl	4d3c <rb_getmaxconnect@plt>
   13df0:	str	r0, [r4, #8]
   13df4:	bl	4d3c <rb_getmaxconnect@plt>
   13df8:	cmp	r0, #1
   13dfc:	blt	13e20 <rb_init_netio_sigio+0x60>
   13e00:	mov	r5, #0
   13e04:	mvn	r6, #0
   13e08:	ldr	r0, [r4]
   13e0c:	str	r6, [r0, r5, lsl #3]
   13e10:	add	r5, r5, #1
   13e14:	bl	4d3c <rb_getmaxconnect@plt>
   13e18:	cmp	r5, r0
   13e1c:	blt	13e08 <rb_init_netio_sigio+0x48>
   13e20:	ldr	r0, [pc, #108]	; 13e94 <rb_init_netio_sigio+0xd4>
   13e24:	mov	r1, #1
   13e28:	add	r0, pc, r0
   13e2c:	strb	r1, [r0]
   13e30:	mov	r0, #0
   13e34:	str	r0, [r4, #4]
   13e38:	ldr	r4, [pc, #88]	; 13e98 <rb_init_netio_sigio+0xd8>
   13e3c:	add	r4, pc, r4
   13e40:	mov	r0, r4
   13e44:	bl	4c7c <sigemptyset@plt>
   13e48:	bl	4d54 <__libc_current_sigrtmin@plt>
   13e4c:	mov	r1, r0
   13e50:	mov	r0, r4
   13e54:	bl	5120 <sigaddset@plt>
   13e58:	mov	r0, r4
   13e5c:	mov	r1, #29
   13e60:	bl	5120 <sigaddset@plt>
   13e64:	bl	4d54 <__libc_current_sigrtmin@plt>
   13e68:	add	r1, r0, #1
   13e6c:	mov	r0, r4
   13e70:	bl	5120 <sigaddset@plt>
   13e74:	mov	r0, #0
   13e78:	mov	r1, r4
   13e7c:	mov	r2, #0
   13e80:	bl	5234 <sigprocmask@plt>
   13e84:	mov	r0, #0
   13e88:	pop	{r4, r5, r6, sl, fp, pc}
   13e8c:	bl	5204 <rb_outofmemory@plt>
   13e90:	.word	0x000175b0
   13e94:	.word	0x00034dcc
   13e98:	.word	0x00034dbc

00013e9c <rb_setup_fd_sigio>:
   13e9c:	push	{r4, r5, r6, sl, fp, lr}
   13ea0:	add	fp, sp, #16
   13ea4:	ldr	r5, [r0, #12]
   13ea8:	mov	r1, #3
   13eac:	mov	r2, #0
   13eb0:	mov	r4, #0
   13eb4:	mov	r0, r5
   13eb8:	bl	545c <fcntl@plt>
   13ebc:	cmn	r0, #1
   13ec0:	beq	13f38 <rb_setup_fd_sigio+0x9c>
   13ec4:	mov	r6, r0
   13ec8:	tst	r0, #8192	; 0x2000
   13ecc:	beq	13ee4 <rb_setup_fd_sigio+0x48>
   13ed0:	bic	r6, r6, #8192	; 0x2000
   13ed4:	mov	r0, r5
   13ed8:	mov	r1, #4
   13edc:	mov	r2, r6
   13ee0:	bl	545c <fcntl@plt>
   13ee4:	orr	r2, r6, #10240	; 0x2800
   13ee8:	mov	r0, r5
   13eec:	mov	r1, #4
   13ef0:	bl	545c <fcntl@plt>
   13ef4:	cmn	r0, #1
   13ef8:	beq	13f38 <rb_setup_fd_sigio+0x9c>
   13efc:	bl	4d54 <__libc_current_sigrtmin@plt>
   13f00:	mov	r2, r0
   13f04:	mov	r0, r5
   13f08:	mov	r1, #10
   13f0c:	bl	545c <fcntl@plt>
   13f10:	cmn	r0, #1
   13f14:	beq	13f38 <rb_setup_fd_sigio+0x9c>
   13f18:	bl	5330 <getpid@plt>
   13f1c:	mov	r2, r0
   13f20:	mov	r0, r5
   13f24:	mov	r1, #8
   13f28:	bl	545c <fcntl@plt>
   13f2c:	add	r4, r0, #1
   13f30:	cmn	r0, #1
   13f34:	movwne	r4, #1
   13f38:	mov	r0, r4
   13f3c:	pop	{r4, r5, r6, sl, fp, pc}

00013f40 <rb_setselect_sigio>:
   13f40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13f44:	add	fp, sp, #24
   13f48:	cmp	r0, #0
   13f4c:	beq	14034 <rb_setselect_sigio+0xf4>
   13f50:	mov	r4, r0
   13f54:	tst	r1, #1
   13f58:	beq	13f78 <rb_setselect_sigio+0x38>
   13f5c:	str	r2, [r4, #28]
   13f60:	str	r3, [r4, #32]
   13f64:	cmp	r2, #0
   13f68:	ldr	r0, [r4, #20]
   13f6c:	orr	r7, r0, #64	; 0x40
   13f70:	biceq	r7, r0, #64	; 0x40
   13f74:	str	r7, [r4, #20]
   13f78:	tst	r1, #2
   13f7c:	beq	13f9c <rb_setselect_sigio+0x5c>
   13f80:	str	r2, [r4, #36]	; 0x24
   13f84:	str	r3, [r4, #40]	; 0x28
   13f88:	cmp	r2, #0
   13f8c:	ldr	r0, [r4, #20]
   13f90:	orr	r1, r0, #256	; 0x100
   13f94:	biceq	r1, r0, #256	; 0x100
   13f98:	str	r1, [r4, #20]
   13f9c:	ldr	r0, [r4, #12]
   13fa0:	ldr	r6, [pc, #252]	; 140a4 <rb_setselect_sigio+0x164>
   13fa4:	ldr	r6, [pc, r6]
   13fa8:	ldr	r7, [r6, #8]
   13fac:	cmp	r7, r0
   13fb0:	ble	14038 <rb_setselect_sigio+0xf8>
   13fb4:	ldr	r1, [r4, #20]
   13fb8:	cmp	r1, #0
   13fbc:	ble	13fe0 <rb_setselect_sigio+0xa0>
   13fc0:	ldr	r0, [r4, #12]
   13fc4:	ldr	r2, [r6]
   13fc8:	str	r0, [r2, r0, lsl #3]!
   13fcc:	strh	r1, [r2, #4]
   13fd0:	ldr	r1, [r6, #4]
   13fd4:	cmp	r0, r1
   13fd8:	strgt	r0, [r6, #4]
   13fdc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13fe0:	ldr	r1, [r6]
   13fe4:	ldr	r0, [r4, #12]
   13fe8:	mvn	r2, #0
   13fec:	mov	r3, r1
   13ff0:	str	r2, [r3, r0, lsl #3]!
   13ff4:	mov	r2, #0
   13ff8:	strh	r2, [r3, #4]
   13ffc:	ldr	r2, [r6, #4]
   14000:	cmp	r0, r2
   14004:	bne	14034 <rb_setselect_sigio+0xf4>
   14008:	cmp	r2, #0
   1400c:	poplt	{r4, r5, r6, r7, r8, sl, fp, pc}
   14010:	sub	r1, r1, #8
   14014:	mov	r2, r0
   14018:	subs	r0, r0, #1
   1401c:	blt	1402c <rb_setselect_sigio+0xec>
   14020:	ldr	r3, [r1, r2, lsl #3]
   14024:	cmn	r3, #1
   14028:	beq	14014 <rb_setselect_sigio+0xd4>
   1402c:	sub	r0, r2, #1
   14030:	str	r0, [r6, #4]
   14034:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14038:	add	r1, r7, #1024	; 0x400
   1403c:	str	r1, [r6, #8]
   14040:	lsl	r1, r1, #3
   14044:	ldr	r0, [r6]
   14048:	bl	5498 <realloc@plt>
   1404c:	cmp	r0, #0
   14050:	beq	140a0 <rb_setselect_sigio+0x160>
   14054:	add	r8, r7, #1
   14058:	mov	r5, r0
   1405c:	str	r0, [r6]
   14060:	mov	r1, #0
   14064:	mov	r2, #8192	; 0x2000
   14068:	add	r0, r0, r8, lsl #3
   1406c:	bl	4ee0 <memset@plt>
   14070:	ldr	r0, [r6, #8]
   14074:	cmp	r8, r0
   14078:	bge	13fb4 <rb_setselect_sigio+0x74>
   1407c:	sub	r0, r0, #1
   14080:	add	r1, r5, r7, lsl #3
   14084:	mvn	r2, #0
   14088:	sub	r0, r0, r7
   1408c:	add	r1, r1, #8
   14090:	str	r2, [r1], #8
   14094:	subs	r0, r0, #1
   14098:	bne	14090 <rb_setselect_sigio+0x150>
   1409c:	b	13fb4 <rb_setselect_sigio+0x74>
   140a0:	bl	5204 <rb_outofmemory@plt>
   140a4:	.word	0x000173f0

000140a8 <rb_select_sigio>:
   140a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140ac:	add	fp, sp, #28
   140b0:	sub	sp, sp, #140	; 0x8c
   140b4:	mov	r4, r0
   140b8:	ldr	r0, [pc, #1028]	; 144c4 <rb_select_sigio+0x41c>
   140bc:	ldr	r0, [pc, r0]
   140c0:	cmn	r0, #1
   140c4:	beq	14108 <rb_select_sigio+0x60>
   140c8:	cmp	r0, #1
   140cc:	beq	1412c <rb_select_sigio+0x84>
   140d0:	mov	r0, #0
   140d4:	add	r1, sp, #12
   140d8:	add	r2, sp, #4
   140dc:	str	r0, [sp, #20]
   140e0:	mov	r0, #26
   140e4:	str	r0, [sp, #16]
   140e8:	mov	r0, #0
   140ec:	bl	4dfc <timer_create@plt>
   140f0:	cmp	r0, #0
   140f4:	beq	14114 <rb_select_sigio+0x6c>
   140f8:	ldr	r0, [pc, #968]	; 144c8 <rb_select_sigio+0x420>
   140fc:	mvn	r1, #0
   14100:	add	r0, pc, r0
   14104:	str	r1, [r0]
   14108:	cmp	r4, #0
   1410c:	bge	1412c <rb_select_sigio+0x84>
   14110:	b	1415c <rb_select_sigio+0xb4>
   14114:	ldr	r0, [sp, #4]
   14118:	bl	52e8 <timer_delete@plt>
   1411c:	ldr	r0, [pc, #936]	; 144cc <rb_select_sigio+0x424>
   14120:	mov	r1, #1
   14124:	add	r0, pc, r0
   14128:	str	r1, [r0]
   1412c:	movw	r0, #19923	; 0x4dd3
   14130:	movt	r0, #4194	; 0x1062
   14134:	smmul	r0, r4, r0
   14138:	asr	r1, r0, #6
   1413c:	add	r0, r1, r0, lsr #31
   14140:	mov	r1, #1000	; 0x3e8
   14144:	str	r0, [sp, #4]
   14148:	mls	r0, r0, r1, r4
   1414c:	movw	r1, #16960	; 0x4240
   14150:	movt	r1, #15
   14154:	mul	r0, r0, r1
   14158:	str	r0, [sp, #8]
   1415c:	ldr	r6, [pc, #876]	; 144d0 <rb_select_sigio+0x428>
   14160:	add	r6, pc, r6
   14164:	ldrb	r0, [r6]
   14168:	cmp	r0, #0
   1416c:	bne	14310 <rb_select_sigio+0x268>
   14170:	ldr	r9, [pc, #860]	; 144d4 <rb_select_sigio+0x42c>
   14174:	add	r5, sp, #12
   14178:	add	r8, sp, #4
   1417c:	add	r9, pc, r9
   14180:	cmp	r4, #0
   14184:	blt	141ac <rb_select_sigio+0x104>
   14188:	ldr	r0, [pc, #840]	; 144d8 <rb_select_sigio+0x430>
   1418c:	ldr	r0, [pc, r0]
   14190:	cmp	r0, #0
   14194:	bne	141ac <rb_select_sigio+0x104>
   14198:	mov	r0, r9
   1419c:	mov	r1, r5
   141a0:	mov	r2, r8
   141a4:	bl	4d90 <sigtimedwait@plt>
   141a8:	b	141b8 <rb_select_sigio+0x110>
   141ac:	mov	r0, r9
   141b0:	mov	r1, r5
   141b4:	bl	4d48 <sigwaitinfo@plt>
   141b8:	mov	r7, r0
   141bc:	cmp	r0, #1
   141c0:	blt	142e8 <rb_select_sigio+0x240>
   141c4:	cmp	r7, #29
   141c8:	beq	142fc <rb_select_sigio+0x254>
   141cc:	bl	4d54 <__libc_current_sigrtmin@plt>
   141d0:	add	r0, r0, #1
   141d4:	cmp	r7, r0
   141d8:	bne	14200 <rb_select_sigio+0x158>
   141dc:	ldr	r0, [pc, #764]	; 144e0 <rb_select_sigio+0x438>
   141e0:	ldr	r0, [pc, r0]
   141e4:	cmp	r0, #0
   141e8:	beq	14200 <rb_select_sigio+0x158>
   141ec:	ldr	r0, [sp, #32]
   141f0:	cmp	r0, #0
   141f4:	beq	142d8 <rb_select_sigio+0x230>
   141f8:	bl	5144 <rb_run_one_event@plt>
   141fc:	b	142d8 <rb_select_sigio+0x230>
   14200:	ldr	r0, [pc, #736]	; 144e8 <rb_select_sigio+0x440>
   14204:	ldr	r0, [pc, r0]
   14208:	ldrh	r3, [sp, #24]
   1420c:	ldr	r1, [r0]
   14210:	ldr	r0, [sp, #28]
   14214:	add	r1, r1, r0, lsl #3
   14218:	cmp	r0, #0
   1421c:	ldrh	r2, [r1, #6]
   14220:	orr	r2, r2, r3
   14224:	strh	r2, [r1, #6]
   14228:	blt	142d8 <rb_select_sigio+0x230>
   1422c:	ldr	r3, [pc, #696]	; 144ec <rb_select_sigio+0x444>
   14230:	eor	r1, r0, r0, lsr #12
   14234:	bfc	r1, #12, #20
   14238:	eor	r1, r1, r0, lsr #24
   1423c:	add	r1, r1, r1, lsl #1
   14240:	ldr	r3, [pc, r3]
   14244:	ldr	r3, [r3]
   14248:	ldr	r1, [r3, r1, lsl #2]
   1424c:	cmp	r1, #0
   14250:	beq	142d8 <rb_select_sigio+0x230>
   14254:	sxth	sl, r2
   14258:	ldr	r7, [r1]
   1425c:	ldr	r2, [r7, #12]
   14260:	cmp	r2, r0
   14264:	beq	14278 <rb_select_sigio+0x1d0>
   14268:	ldr	r1, [r1, #8]
   1426c:	cmp	r1, #0
   14270:	bne	14258 <rb_select_sigio+0x1b0>
   14274:	b	142d8 <rb_select_sigio+0x230>
   14278:	cmp	r7, #0
   1427c:	beq	142d8 <rb_select_sigio+0x230>
   14280:	tst	sl, #89	; 0x59
   14284:	beq	142ac <rb_select_sigio+0x204>
   14288:	ldr	r2, [r7, #28]
   1428c:	ldr	r1, [r7, #32]
   14290:	mov	r0, #0
   14294:	str	r0, [r7, #28]
   14298:	str	r0, [r7, #32]
   1429c:	cmp	r2, #0
   142a0:	beq	142ac <rb_select_sigio+0x204>
   142a4:	mov	r0, r7
   142a8:	blx	r2
   142ac:	tst	sl, #284	; 0x11c
   142b0:	beq	142d8 <rb_select_sigio+0x230>
   142b4:	ldr	r2, [r7, #36]	; 0x24
   142b8:	ldr	r1, [r7, #40]	; 0x28
   142bc:	mov	r0, #0
   142c0:	str	r0, [r7, #36]	; 0x24
   142c4:	str	r0, [r7, #40]	; 0x28
   142c8:	cmp	r2, #0
   142cc:	beq	142d8 <rb_select_sigio+0x230>
   142d0:	mov	r0, r7
   142d4:	blx	r2
   142d8:	ldrb	r0, [r6]
   142dc:	cmp	r0, #0
   142e0:	beq	14180 <rb_select_sigio+0xd8>
   142e4:	b	14310 <rb_select_sigio+0x268>
   142e8:	ldrb	r0, [r6]
   142ec:	cmp	r0, #0
   142f0:	bne	14310 <rb_select_sigio+0x268>
   142f4:	bl	5210 <rb_set_time@plt>
   142f8:	b	144b4 <rb_select_sigio+0x40c>
   142fc:	ldr	r0, [pc, #472]	; 144dc <rb_select_sigio+0x434>
   14300:	add	r0, pc, r0
   14304:	bl	51a4 <rb_lib_log@plt>
   14308:	mov	r0, #1
   1430c:	strb	r0, [r6]
   14310:	bl	4d54 <__libc_current_sigrtmin@plt>
   14314:	mov	r1, #1
   14318:	bl	4da8 <signal@plt>
   1431c:	bl	4d54 <__libc_current_sigrtmin@plt>
   14320:	mov	r1, #0
   14324:	mov	r5, #0
   14328:	bl	4da8 <signal@plt>
   1432c:	strb	r5, [r6]
   14330:	mov	r2, r4
   14334:	ldr	r6, [pc, #424]	; 144e4 <rb_select_sigio+0x43c>
   14338:	ldr	r6, [pc, r6]
   1433c:	ldm	r6, {r0, r1}
   14340:	add	r1, r1, #1
   14344:	bl	527c <poll@plt>
   14348:	mov	r4, r0
   1434c:	bl	5210 <rb_set_time@plt>
   14350:	cmn	r4, #1
   14354:	ble	14380 <rb_select_sigio+0x2d8>
   14358:	cmp	r4, #0
   1435c:	beq	144b8 <rb_select_sigio+0x410>
   14360:	ldr	r0, [r6, #4]
   14364:	cmp	r0, #0
   14368:	blt	144b8 <rb_select_sigio+0x410>
   1436c:	ldr	r9, [pc, #380]	; 144f0 <rb_select_sigio+0x448>
   14370:	mov	r8, #0
   14374:	mov	r0, #0
   14378:	ldr	r9, [pc, r9]
   1437c:	b	143c0 <rb_select_sigio+0x318>
   14380:	bl	5540 <__errno_location@plt>
   14384:	ldr	r0, [r0]
   14388:	bl	4cc4 <rb_ignore_errno@plt>
   1438c:	mov	r5, r0
   14390:	cmp	r0, #0
   14394:	movwne	r5, #5
   14398:	b	144b8 <rb_select_sigio+0x410>
   1439c:	ldr	r2, [r4, #36]	; 0x24
   143a0:	ldr	r1, [r4, #40]	; 0x28
   143a4:	str	r8, [r4, #36]	; 0x24
   143a8:	str	r8, [r4, #40]	; 0x28
   143ac:	cmp	r2, #0
   143b0:	beq	14464 <rb_select_sigio+0x3bc>
   143b4:	mov	r0, r4
   143b8:	blx	r2
   143bc:	b	14464 <rb_select_sigio+0x3bc>
   143c0:	mov	r5, r0
   143c4:	ldr	r0, [r6]
   143c8:	add	r1, r0, r5, lsl #3
   143cc:	ldrsh	r7, [r1, #6]
   143d0:	cmp	r7, #0
   143d4:	beq	144a4 <rb_select_sigio+0x3fc>
   143d8:	ldr	r0, [r0, r5, lsl #3]
   143dc:	cmp	r0, #0
   143e0:	blt	144a4 <rb_select_sigio+0x3fc>
   143e4:	eor	r1, r0, r0, lsr #12
   143e8:	ldr	r2, [r9]
   143ec:	bfc	r1, #12, #20
   143f0:	eor	r1, r1, r0, lsr #24
   143f4:	add	r1, r1, r1, lsl #1
   143f8:	ldr	r1, [r2, r1, lsl #2]
   143fc:	cmp	r1, #0
   14400:	bne	14414 <rb_select_sigio+0x36c>
   14404:	b	144a4 <rb_select_sigio+0x3fc>
   14408:	ldr	r1, [r1, #8]
   1440c:	cmp	r1, #0
   14410:	beq	144a4 <rb_select_sigio+0x3fc>
   14414:	ldr	r4, [r1]
   14418:	ldr	r2, [r4, #12]
   1441c:	cmp	r2, r0
   14420:	bne	14408 <rb_select_sigio+0x360>
   14424:	cmp	r4, #0
   14428:	beq	144a4 <rb_select_sigio+0x3fc>
   1442c:	tst	r7, #89	; 0x59
   14430:	beq	14454 <rb_select_sigio+0x3ac>
   14434:	ldr	r2, [r4, #28]
   14438:	ldr	r1, [r4, #32]
   1443c:	str	r8, [r4, #28]
   14440:	str	r8, [r4, #32]
   14444:	cmp	r2, #0
   14448:	beq	14454 <rb_select_sigio+0x3ac>
   1444c:	mov	r0, r4
   14450:	blx	r2
   14454:	tst	r7, #284	; 0x11c
   14458:	ldrbne	r0, [r4, #16]
   1445c:	andsne	r0, r0, #1
   14460:	bne	1439c <rb_select_sigio+0x2f4>
   14464:	ldr	r0, [r4, #28]
   14468:	cmp	r0, #0
   1446c:	bne	14484 <rb_select_sigio+0x3dc>
   14470:	mov	r0, r4
   14474:	mov	r1, #1
   14478:	mov	r2, #0
   1447c:	mov	r3, #0
   14480:	bl	13f40 <rb_setselect_sigio>
   14484:	ldr	r0, [r4, #36]	; 0x24
   14488:	cmp	r0, #0
   1448c:	bne	144a4 <rb_select_sigio+0x3fc>
   14490:	mov	r0, r4
   14494:	mov	r1, #2
   14498:	mov	r2, #0
   1449c:	mov	r3, #0
   144a0:	bl	13f40 <rb_setselect_sigio>
   144a4:	ldr	r1, [r6, #4]
   144a8:	add	r0, r5, #1
   144ac:	cmp	r5, r1
   144b0:	blt	143c0 <rb_select_sigio+0x318>
   144b4:	mov	r5, #0
   144b8:	mov	r0, r5
   144bc:	sub	sp, fp, #28
   144c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144c4:	.word	0x00034bbc
   144c8:	.word	0x00034b78
   144cc:	.word	0x00034b54
   144d0:	.word	0x00034a94
   144d4:	.word	0x00034a7c
   144d8:	.word	0x00034aec
   144dc:	.word	0x00005a88
   144e0:	.word	0x00034a98
   144e4:	.word	0x0001705c
   144e8:	.word	0x00017190
   144ec:	.word	0x00017144
   144f0:	.word	0x0001700c

000144f4 <rb_sigio_supports_event>:
   144f4:	push	{r4, sl, fp, lr}
   144f8:	add	fp, sp, #8
   144fc:	sub	sp, sp, #72	; 0x48
   14500:	ldr	r4, [pc, #120]	; 14580 <rb_sigio_supports_event+0x8c>
   14504:	ldr	r4, [pc, r4]
   14508:	cmp	r4, #1
   1450c:	beq	14574 <rb_sigio_supports_event+0x80>
   14510:	cmn	r4, #1
   14514:	bne	14520 <rb_sigio_supports_event+0x2c>
   14518:	mov	r4, #0
   1451c:	b	14574 <rb_sigio_supports_event+0x80>
   14520:	mov	r4, #0
   14524:	mov	r0, #26
   14528:	add	r1, sp, #4
   1452c:	sub	r2, fp, #12
   14530:	str	r4, [sp, #12]
   14534:	str	r0, [sp, #8]
   14538:	mov	r0, #0
   1453c:	bl	4dfc <timer_create@plt>
   14540:	cmp	r0, #0
   14544:	beq	1455c <rb_sigio_supports_event+0x68>
   14548:	ldr	r0, [pc, #52]	; 14584 <rb_sigio_supports_event+0x90>
   1454c:	mvn	r1, #0
   14550:	add	r0, pc, r0
   14554:	str	r1, [r0]
   14558:	b	14574 <rb_sigio_supports_event+0x80>
   1455c:	ldr	r0, [fp, #-12]
   14560:	bl	52e8 <timer_delete@plt>
   14564:	ldr	r0, [pc, #28]	; 14588 <rb_sigio_supports_event+0x94>
   14568:	mov	r4, #1
   1456c:	add	r0, pc, r0
   14570:	str	r4, [r0]
   14574:	mov	r0, r4
   14578:	sub	sp, fp, #8
   1457c:	pop	{r4, sl, fp, pc}
   14580:	.word	0x00034774
   14584:	.word	0x00034728
   14588:	.word	0x0003470c

0001458c <rb_sigio_init_event>:
   1458c:	push	{fp, lr}
   14590:	mov	fp, sp
   14594:	sub	sp, sp, #72	; 0x48
   14598:	ldr	r0, [pc, #108]	; 1460c <rb_sigio_init_event+0x80>
   1459c:	ldr	r0, [pc, r0]
   145a0:	cmn	r0, #1
   145a4:	cmpne	r0, #1
   145a8:	bne	145b4 <rb_sigio_init_event+0x28>
   145ac:	mov	sp, fp
   145b0:	pop	{fp, pc}
   145b4:	mov	r0, #0
   145b8:	add	r1, sp, #4
   145bc:	sub	r2, fp, #4
   145c0:	str	r0, [sp, #12]
   145c4:	mov	r0, #26
   145c8:	str	r0, [sp, #8]
   145cc:	mov	r0, #0
   145d0:	bl	4dfc <timer_create@plt>
   145d4:	cmp	r0, #0
   145d8:	beq	145ec <rb_sigio_init_event+0x60>
   145dc:	ldr	r0, [pc, #44]	; 14610 <rb_sigio_init_event+0x84>
   145e0:	mvn	r1, #0
   145e4:	add	r0, pc, r0
   145e8:	b	14600 <rb_sigio_init_event+0x74>
   145ec:	ldr	r0, [fp, #-4]
   145f0:	bl	52e8 <timer_delete@plt>
   145f4:	ldr	r0, [pc, #24]	; 14614 <rb_sigio_init_event+0x88>
   145f8:	mov	r1, #1
   145fc:	add	r0, pc, r0
   14600:	str	r1, [r0]
   14604:	mov	sp, fp
   14608:	pop	{fp, pc}
   1460c:	.word	0x000346dc
   14610:	.word	0x00034694
   14614:	.word	0x0003467c

00014618 <rb_sigio_sched_event>:
   14618:	push	{r4, r5, r6, r7, fp, lr}
   1461c:	add	fp, sp, #16
   14620:	sub	sp, sp, #80	; 0x50
   14624:	mov	r4, r0
   14628:	ldr	r0, [pc, #276]	; 14744 <rb_sigio_sched_event+0x12c>
   1462c:	ldr	r0, [pc, r0]
   14630:	cmp	r0, #1
   14634:	blt	14710 <rb_sigio_sched_event+0xf8>
   14638:	mov	r6, r1
   1463c:	add	r1, sp, #16
   14640:	vmov.i32	q8, #0	; 0x00000000
   14644:	mov	r0, #48	; 0x30
   14648:	mov	r2, r1
   1464c:	vst1.64	{d16-d17}, [r2], r0
   14650:	add	r0, r1, #32
   14654:	vst1.64	{d16-d17}, [r0]
   14658:	add	r0, r1, #16
   1465c:	mov	r1, #4
   14660:	vst1.64	{d16-d17}, [r2]
   14664:	vst1.64	{d16-d17}, [r0]
   14668:	mov	r0, #1
   1466c:	bl	4ea4 <calloc@plt>
   14670:	cmp	r0, #0
   14674:	beq	14740 <rb_sigio_sched_event+0x128>
   14678:	mov	r5, #0
   1467c:	str	r0, [r4, #40]	; 0x28
   14680:	mov	r7, r0
   14684:	str	r5, [sp, #24]
   14688:	bl	4d54 <__libc_current_sigrtmin@plt>
   1468c:	add	r0, r0, #1
   14690:	str	r4, [sp, #16]
   14694:	add	r1, sp, #16
   14698:	mov	r2, r7
   1469c:	str	r0, [sp, #20]
   146a0:	mov	r0, #0
   146a4:	bl	4dfc <timer_create@plt>
   146a8:	cmn	r0, #1
   146ac:	ble	14718 <rb_sigio_sched_event+0x100>
   146b0:	str	r5, [sp]
   146b4:	stmib	sp, {r5, r6}
   146b8:	str	r5, [sp, #12]
   146bc:	mov	r2, sp
   146c0:	mov	r3, #0
   146c4:	ldr	r0, [r4, #24]
   146c8:	cmp	r0, #0
   146cc:	movne	r0, sp
   146d0:	addne	r0, r0, #8
   146d4:	ldrdne	r0, [r0]
   146d8:	stmne	sp, {r0, r1}
   146dc:	mov	r1, #0
   146e0:	ldr	r0, [r7]
   146e4:	bl	5000 <timer_settime@plt>
   146e8:	mov	r5, #1
   146ec:	cmn	r0, #1
   146f0:	bgt	14734 <rb_sigio_sched_event+0x11c>
   146f4:	bl	5540 <__errno_location@plt>
   146f8:	ldr	r0, [r0]
   146fc:	bl	4c88 <strerror@plt>
   14700:	mov	r1, r0
   14704:	ldr	r0, [pc, #64]	; 1474c <rb_sigio_sched_event+0x134>
   14708:	add	r0, pc, r0
   1470c:	bl	51a4 <rb_lib_log@plt>
   14710:	mov	r5, #0
   14714:	b	14734 <rb_sigio_sched_event+0x11c>
   14718:	bl	5540 <__errno_location@plt>
   1471c:	ldr	r0, [r0]
   14720:	bl	4c88 <strerror@plt>
   14724:	mov	r1, r0
   14728:	ldr	r0, [pc, #24]	; 14748 <rb_sigio_sched_event+0x130>
   1472c:	add	r0, pc, r0
   14730:	bl	51a4 <rb_lib_log@plt>
   14734:	mov	r0, r5
   14738:	sub	sp, fp, #16
   1473c:	pop	{r4, r5, r6, r7, fp, pc}
   14740:	bl	5204 <rb_outofmemory@plt>
   14744:	.word	0x0003464c
   14748:	.word	0x00005637
   1474c:	.word	0x0000566d

00014750 <rb_sigio_unsched_event>:
   14750:	push	{r4, sl, fp, lr}
   14754:	add	fp, sp, #8
   14758:	mov	r4, r0
   1475c:	ldr	r0, [pc, #48]	; 14794 <rb_sigio_unsched_event+0x44>
   14760:	ldr	r0, [pc, r0]
   14764:	cmp	r0, #1
   14768:	poplt	{r4, sl, fp, pc}
   1476c:	ldr	r0, [r4, #40]	; 0x28
   14770:	ldr	r0, [r0]
   14774:	bl	52e8 <timer_delete@plt>
   14778:	ldr	r0, [r4, #40]	; 0x28
   1477c:	cmp	r0, #0
   14780:	beq	14788 <rb_sigio_unsched_event+0x38>
   14784:	bl	4fa0 <free@plt>
   14788:	mov	r0, #0
   1478c:	str	r0, [r4, #40]	; 0x28
   14790:	pop	{r4, sl, fp, pc}
   14794:	.word	0x00034518

00014798 <rb_setup_fd_select>:
   14798:	mov	r0, #0
   1479c:	bx	lr

000147a0 <rb_init_netio_select>:
   147a0:	ldr	r0, [pc, #168]	; 14850 <rb_init_netio_select+0xb0>
   147a4:	vmov.i32	q8, #0	; 0x00000000
   147a8:	ldr	r0, [pc, r0]
   147ac:	ldr	r1, [r0]
   147b0:	cmp	r1, #1024	; 0x400
   147b4:	movgt	r1, #1024	; 0x400
   147b8:	strgt	r1, [r0]
   147bc:	mov	r0, #112	; 0x70
   147c0:	ldr	r1, [pc, #140]	; 14854 <rb_init_netio_select+0xb4>
   147c4:	add	r1, pc, r1
   147c8:	mov	r2, r1
   147cc:	vst1.64	{d16-d17}, [r2], r0
   147d0:	vst1.64	{d16-d17}, [r2]
   147d4:	add	r2, r1, #96	; 0x60
   147d8:	vst1.64	{d16-d17}, [r2]
   147dc:	add	r2, r1, #80	; 0x50
   147e0:	vst1.64	{d16-d17}, [r2]
   147e4:	add	r2, r1, #64	; 0x40
   147e8:	vst1.64	{d16-d17}, [r2]
   147ec:	add	r2, r1, #48	; 0x30
   147f0:	vst1.64	{d16-d17}, [r2]
   147f4:	add	r2, r1, #32
   147f8:	add	r1, r1, #16
   147fc:	vst1.64	{d16-d17}, [r2]
   14800:	vst1.64	{d16-d17}, [r1]
   14804:	ldr	r1, [pc, #76]	; 14858 <rb_init_netio_select+0xb8>
   14808:	add	r1, pc, r1
   1480c:	mov	r2, r1
   14810:	vst1.64	{d16-d17}, [r2], r0
   14814:	add	r0, r1, #96	; 0x60
   14818:	vst1.64	{d16-d17}, [r0]
   1481c:	add	r0, r1, #80	; 0x50
   14820:	vst1.64	{d16-d17}, [r2]
   14824:	vst1.64	{d16-d17}, [r0]
   14828:	add	r0, r1, #64	; 0x40
   1482c:	vst1.64	{d16-d17}, [r0]
   14830:	add	r0, r1, #48	; 0x30
   14834:	vst1.64	{d16-d17}, [r0]
   14838:	add	r0, r1, #32
   1483c:	vst1.64	{d16-d17}, [r0]
   14840:	add	r0, r1, #16
   14844:	vst1.64	{d16-d17}, [r0]
   14848:	mov	r0, #0
   1484c:	bx	lr
   14850:	.word	0x00016bbc
   14854:	.word	0x000344bc
   14858:	.word	0x000344f8

0001485c <rb_setselect_select>:
   1485c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14860:	add	fp, sp, #24
   14864:	tst	r1, #1
   14868:	beq	14964 <rb_setselect_select+0x108>
   1486c:	str	r2, [r0, #28]
   14870:	str	r3, [r0, #32]
   14874:	mov	r6, #1
   14878:	cmp	r2, #0
   1487c:	ldr	ip, [r0, #12]
   14880:	ldr	r5, [pc, #496]	; 14a78 <rb_setselect_select+0x21c>
   14884:	and	r7, ip, #31
   14888:	add	r5, pc, r5
   1488c:	lsl	r6, r6, r7
   14890:	asr	r7, ip, #31
   14894:	add	r7, ip, r7, lsr #27
   14898:	asr	r7, r7, #5
   1489c:	beq	148b8 <rb_setselect_select+0x5c>
   148a0:	ldr	r4, [r5, r7, lsl #2]
   148a4:	orr	r6, r4, r6
   148a8:	str	r6, [r5, r7, lsl #2]
   148ac:	ldr	r7, [r0, #20]
   148b0:	orr	r4, r7, #1
   148b4:	b	148cc <rb_setselect_select+0x70>
   148b8:	ldr	r4, [r5, r7, lsl #2]
   148bc:	bic	r6, r4, r6
   148c0:	str	r6, [r5, r7, lsl #2]
   148c4:	ldr	r7, [r0, #20]
   148c8:	bic	r4, r7, #1
   148cc:	str	r4, [r0, #20]
   148d0:	tst	r4, #3
   148d4:	ldr	lr, [pc, #416]	; 14a7c <rb_setselect_select+0x220>
   148d8:	ldr	lr, [pc, lr]
   148dc:	beq	148fc <rb_setselect_select+0xa0>
   148e0:	cmp	ip, lr
   148e4:	ldrgt	r7, [pc, #404]	; 14a80 <rb_setselect_select+0x224>
   148e8:	addgt	r7, pc, r7
   148ec:	strgt	ip, [r7]
   148f0:	tst	r1, #2
   148f4:	bne	1496c <rb_setselect_select+0x110>
   148f8:	b	14a74 <rb_setselect_select+0x218>
   148fc:	cmp	ip, lr
   14900:	bgt	14964 <rb_setselect_select+0x108>
   14904:	cmp	lr, #0
   14908:	blt	14964 <rb_setselect_select+0x108>
   1490c:	ldr	r4, [pc, #368]	; 14a84 <rb_setselect_select+0x228>
   14910:	ldr	r9, [pc, #368]	; 14a88 <rb_setselect_select+0x22c>
   14914:	ldr	r8, [pc, #368]	; 14a8c <rb_setselect_select+0x230>
   14918:	mov	ip, #1
   1491c:	add	r4, pc, r4
   14920:	add	r9, pc, r9
   14924:	add	r8, pc, r8
   14928:	asr	r6, lr, #31
   1492c:	and	r7, lr, #31
   14930:	add	r6, lr, r6, lsr #27
   14934:	asr	r6, r6, #5
   14938:	ldr	r5, [r4, r6, lsl #2]
   1493c:	tst	r5, ip, lsl r7
   14940:	ldreq	r6, [r9, r6, lsl #2]
   14944:	lsleq	r5, ip, r7
   14948:	tsteq	r6, r5
   1494c:	bne	14964 <rb_setselect_select+0x108>
   14950:	sub	r5, lr, #1
   14954:	cmp	lr, #0
   14958:	mov	lr, r5
   1495c:	str	r5, [r8]
   14960:	bgt	14928 <rb_setselect_select+0xcc>
   14964:	tst	r1, #2
   14968:	beq	14a74 <rb_setselect_select+0x218>
   1496c:	str	r2, [r0, #36]	; 0x24
   14970:	str	r3, [r0, #40]	; 0x28
   14974:	mov	r7, #1
   14978:	cmp	r2, #0
   1497c:	ldr	r1, [r0, #12]
   14980:	and	r3, r1, #31
   14984:	lsl	r3, r7, r3
   14988:	beq	149b8 <rb_setselect_select+0x15c>
   1498c:	ldr	r7, [pc, #252]	; 14a90 <rb_setselect_select+0x234>
   14990:	asr	r2, r1, #31
   14994:	add	r2, r1, r2, lsr #27
   14998:	asr	r2, r2, #5
   1499c:	add	r7, pc, r7
   149a0:	ldr	r6, [r7, r2, lsl #2]
   149a4:	orr	r3, r6, r3
   149a8:	str	r3, [r7, r2, lsl #2]
   149ac:	ldr	r2, [r0, #20]
   149b0:	orr	r2, r2, #2
   149b4:	b	149e0 <rb_setselect_select+0x184>
   149b8:	ldr	r7, [pc, #212]	; 14a94 <rb_setselect_select+0x238>
   149bc:	asr	r2, r1, #31
   149c0:	add	r2, r1, r2, lsr #27
   149c4:	asr	r2, r2, #5
   149c8:	add	r7, pc, r7
   149cc:	ldr	r6, [r7, r2, lsl #2]
   149d0:	bic	r3, r6, r3
   149d4:	str	r3, [r7, r2, lsl #2]
   149d8:	ldr	r2, [r0, #20]
   149dc:	bic	r2, r2, #2
   149e0:	str	r2, [r0, #20]
   149e4:	tst	r2, #3
   149e8:	ldr	r0, [pc, #168]	; 14a98 <rb_setselect_select+0x23c>
   149ec:	ldr	r0, [pc, r0]
   149f0:	beq	14a0c <rb_setselect_select+0x1b0>
   149f4:	cmp	r1, r0
   149f8:	ldrgt	r0, [pc, #156]	; 14a9c <rb_setselect_select+0x240>
   149fc:	addgt	r0, pc, r0
   14a00:	strgt	r1, [r0]
   14a04:	popgt	{r4, r5, r6, r7, r8, r9, fp, pc}
   14a08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14a0c:	cmp	r1, r0
   14a10:	bgt	14a74 <rb_setselect_select+0x218>
   14a14:	cmp	r0, #0
   14a18:	poplt	{r4, r5, r6, r7, r8, r9, fp, pc}
   14a1c:	ldr	r2, [pc, #124]	; 14aa0 <rb_setselect_select+0x244>
   14a20:	ldr	r3, [pc, #124]	; 14aa4 <rb_setselect_select+0x248>
   14a24:	ldr	r6, [pc, #124]	; 14aa8 <rb_setselect_select+0x24c>
   14a28:	mov	r1, #1
   14a2c:	add	r2, pc, r2
   14a30:	add	r3, pc, r3
   14a34:	add	r6, pc, r6
   14a38:	asr	r5, r0, #31
   14a3c:	and	r7, r0, #31
   14a40:	add	r5, r0, r5, lsr #27
   14a44:	asr	r5, r5, #5
   14a48:	ldr	r4, [r2, r5, lsl #2]
   14a4c:	tst	r4, r1, lsl r7
   14a50:	ldreq	r5, [r3, r5, lsl #2]
   14a54:	lsleq	r7, r1, r7
   14a58:	tsteq	r5, r7
   14a5c:	bne	14a74 <rb_setselect_select+0x218>
   14a60:	sub	r7, r0, #1
   14a64:	cmp	r0, #0
   14a68:	mov	r0, r7
   14a6c:	str	r7, [r6]
   14a70:	bgt	14a38 <rb_setselect_select+0x1dc>
   14a74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14a78:	.word	0x000343f8
   14a7c:	.word	0x00016b78
   14a80:	.word	0x00016b68
   14a84:	.word	0x00034364
   14a88:	.word	0x000343e0
   14a8c:	.word	0x00016b2c
   14a90:	.word	0x00034364
   14a94:	.word	0x00034338
   14a98:	.word	0x00016a64
   14a9c:	.word	0x00016a54
   14aa0:	.word	0x00034254
   14aa4:	.word	0x000342d0
   14aa8:	.word	0x00016a1c

00014aac <rb_select_select>:
   14aac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ab0:	add	fp, sp, #28
   14ab4:	sub	sp, sp, #12
   14ab8:	ldr	r9, [pc, #844]	; 14e0c <rb_select_select+0x360>
   14abc:	ldr	r1, [pc, #844]	; 14e10 <rb_select_select+0x364>
   14ac0:	mov	r5, r0
   14ac4:	mov	r2, #128	; 0x80
   14ac8:	add	r9, pc, r9
   14acc:	add	r1, pc, r1
   14ad0:	mov	r0, r9
   14ad4:	bl	50a8 <memcpy@plt>
   14ad8:	ldr	sl, [pc, #820]	; 14e14 <rb_select_select+0x368>
   14adc:	ldr	r1, [pc, #820]	; 14e18 <rb_select_select+0x36c>
   14ae0:	mov	r2, #128	; 0x80
   14ae4:	add	sl, pc, sl
   14ae8:	add	r1, pc, r1
   14aec:	mov	r0, sl
   14af0:	bl	50a8 <memcpy@plt>
   14af4:	mov	r0, #1000	; 0x3e8
   14af8:	mov	r6, #0
   14afc:	add	r4, sp, #4
   14b00:	mul	r7, r5, r0
   14b04:	stmib	sp, {r6, r7}
   14b08:	mov	r1, r9
   14b0c:	mov	r2, sl
   14b10:	mov	r3, #0
   14b14:	ldr	r0, [pc, #768]	; 14e1c <rb_select_select+0x370>
   14b18:	ldr	r0, [pc, r0]
   14b1c:	str	r4, [sp]
   14b20:	add	r0, r0, #1
   14b24:	bl	51bc <select@plt>
   14b28:	cmn	r0, #1
   14b2c:	bgt	14b54 <rb_select_select+0xa8>
   14b30:	bl	5540 <__errno_location@plt>
   14b34:	ldr	r0, [r0]
   14b38:	bl	4cc4 <rb_ignore_errno@plt>
   14b3c:	cmp	r0, #0
   14b40:	bne	14b04 <rb_select_select+0x58>
   14b44:	bl	5210 <rb_set_time@plt>
   14b48:	mvn	r0, #0
   14b4c:	sub	sp, fp, #28
   14b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b54:	mov	r5, r0
   14b58:	bl	5210 <rb_set_time@plt>
   14b5c:	mov	r0, #0
   14b60:	cmp	r5, #0
   14b64:	beq	14e04 <rb_select_select+0x358>
   14b68:	ldr	r1, [pc, #688]	; 14e20 <rb_select_select+0x374>
   14b6c:	ldr	r1, [pc, r1]
   14b70:	cmp	r1, #0
   14b74:	blt	14e04 <rb_select_select+0x358>
   14b78:	ldr	r7, [pc, #676]	; 14e24 <rb_select_select+0x378>
   14b7c:	mov	ip, #1
   14b80:	mov	r0, #0
   14b84:	ldr	r7, [pc, r7]
   14b88:	ldr	lr, [pc, #664]	; 14e28 <rb_select_select+0x37c>
   14b8c:	add	lr, pc, lr
   14b90:	mov	r8, r0
   14b94:	eor	r0, r0, r0, lsr #12
   14b98:	ldr	r1, [r7]
   14b9c:	bfc	r0, #12, #20
   14ba0:	eor	r0, r0, r8, lsr #24
   14ba4:	add	r0, r0, r0, lsl #1
   14ba8:	ldr	r0, [r1, r0, lsl #2]
   14bac:	cmp	r0, #0
   14bb0:	bne	14bc4 <rb_select_select+0x118>
   14bb4:	b	14dec <rb_select_select+0x340>
   14bb8:	ldr	r0, [r0, #8]
   14bbc:	cmp	r0, #0
   14bc0:	beq	14dec <rb_select_select+0x340>
   14bc4:	ldr	r5, [r0]
   14bc8:	ldr	r1, [r5, #12]
   14bcc:	cmp	r1, r8
   14bd0:	bne	14bb8 <rb_select_select+0x10c>
   14bd4:	cmp	r5, #0
   14bd8:	beq	14dec <rb_select_select+0x340>
   14bdc:	lsr	r6, r8, #5
   14be0:	and	r4, r8, #31
   14be4:	ldr	r0, [r9, r6, lsl #2]
   14be8:	tst	r0, ip, lsl r4
   14bec:	beq	14c24 <rb_select_select+0x178>
   14bf0:	ldr	r2, [r5, #28]
   14bf4:	mov	r0, #0
   14bf8:	str	r0, [r5, #28]
   14bfc:	cmp	r2, #0
   14c00:	beq	14c24 <rb_select_select+0x178>
   14c04:	ldr	r1, [r5, #32]
   14c08:	mov	r0, r5
   14c0c:	blx	r2
   14c10:	ldr	lr, [pc, #532]	; 14e2c <rb_select_select+0x380>
   14c14:	ldr	r7, [pc, #532]	; 14e30 <rb_select_select+0x384>
   14c18:	mov	ip, #1
   14c1c:	ldr	r7, [pc, r7]
   14c20:	add	lr, pc, lr
   14c24:	ldrb	r0, [r5, #16]
   14c28:	tst	r0, #1
   14c2c:	beq	14dec <rb_select_select+0x340>
   14c30:	ldr	r1, [sl, r6, lsl #2]
   14c34:	lsl	r0, ip, r4
   14c38:	tst	r1, r0
   14c3c:	beq	14c74 <rb_select_select+0x1c8>
   14c40:	ldr	r2, [r5, #36]	; 0x24
   14c44:	mov	r0, #0
   14c48:	str	r0, [r5, #36]	; 0x24
   14c4c:	cmp	r2, #0
   14c50:	beq	14c74 <rb_select_select+0x1c8>
   14c54:	ldr	r1, [r5, #40]	; 0x28
   14c58:	mov	r0, r5
   14c5c:	blx	r2
   14c60:	ldr	lr, [pc, #460]	; 14e34 <rb_select_select+0x388>
   14c64:	ldr	r7, [pc, #460]	; 14e38 <rb_select_select+0x38c>
   14c68:	mov	ip, #1
   14c6c:	ldr	r7, [pc, r7]
   14c70:	add	lr, pc, lr
   14c74:	ldr	r0, [r5, #28]
   14c78:	cmp	r0, #0
   14c7c:	bne	14d30 <rb_select_select+0x284>
   14c80:	ldr	r1, [r5, #12]
   14c84:	ldr	r2, [pc, #432]	; 14e3c <rb_select_select+0x390>
   14c88:	asr	r0, r1, #31
   14c8c:	add	r2, pc, r2
   14c90:	and	r3, r1, #31
   14c94:	add	r0, r1, r0, lsr #27
   14c98:	mov	r6, r2
   14c9c:	asr	r0, r0, #5
   14ca0:	ldr	r2, [r2, r0, lsl #2]
   14ca4:	bic	r2, r2, ip, lsl r3
   14ca8:	str	r2, [r6, r0, lsl #2]
   14cac:	ldr	r2, [r5, #20]
   14cb0:	bic	r0, r2, #1
   14cb4:	tst	r2, #2
   14cb8:	str	r0, [r5, #20]
   14cbc:	ldr	r0, [pc, #380]	; 14e40 <rb_select_select+0x394>
   14cc0:	ldr	r0, [pc, r0]
   14cc4:	bne	14d28 <rb_select_select+0x27c>
   14cc8:	cmp	r1, r0
   14ccc:	bgt	14d30 <rb_select_select+0x284>
   14cd0:	cmp	r0, #0
   14cd4:	blt	14d30 <rb_select_select+0x284>
   14cd8:	ldr	r3, [pc, #356]	; 14e44 <rb_select_select+0x398>
   14cdc:	asr	r2, r0, #31
   14ce0:	and	r1, r0, #31
   14ce4:	add	r2, r0, r2, lsr #27
   14ce8:	asr	r2, r2, #5
   14cec:	add	r3, pc, r3
   14cf0:	ldr	r3, [r3, r2, lsl #2]
   14cf4:	tst	r3, ip, lsl r1
   14cf8:	ldreq	r3, [pc, #328]	; 14e48 <rb_select_select+0x39c>
   14cfc:	lsleq	r1, ip, r1
   14d00:	addeq	r3, pc, r3
   14d04:	ldreq	r2, [r3, r2, lsl #2]
   14d08:	tsteq	r2, r1
   14d0c:	bne	14d30 <rb_select_select+0x284>
   14d10:	sub	r1, r0, #1
   14d14:	cmp	r0, #0
   14d18:	mov	r0, r1
   14d1c:	str	r1, [lr]
   14d20:	bgt	14cd8 <rb_select_select+0x22c>
   14d24:	b	14d30 <rb_select_select+0x284>
   14d28:	cmp	r1, r0
   14d2c:	strgt	r1, [lr]
   14d30:	ldr	r0, [r5, #36]	; 0x24
   14d34:	cmp	r0, #0
   14d38:	bne	14dec <rb_select_select+0x340>
   14d3c:	ldr	r1, [r5, #12]
   14d40:	ldr	r2, [pc, #260]	; 14e4c <rb_select_select+0x3a0>
   14d44:	asr	r0, r1, #31
   14d48:	add	r2, pc, r2
   14d4c:	and	r3, r1, #31
   14d50:	add	r0, r1, r0, lsr #27
   14d54:	mov	r6, r2
   14d58:	asr	r0, r0, #5
   14d5c:	ldr	r2, [r2, r0, lsl #2]
   14d60:	bic	r2, r2, ip, lsl r3
   14d64:	str	r2, [r6, r0, lsl #2]
   14d68:	ldr	r2, [r5, #20]
   14d6c:	bic	r0, r2, #2
   14d70:	tst	r2, #1
   14d74:	str	r0, [r5, #20]
   14d78:	ldr	r0, [pc, #208]	; 14e50 <rb_select_select+0x3a4>
   14d7c:	ldr	r0, [pc, r0]
   14d80:	bne	14de4 <rb_select_select+0x338>
   14d84:	cmp	r1, r0
   14d88:	bgt	14dec <rb_select_select+0x340>
   14d8c:	cmp	r0, #0
   14d90:	blt	14dec <rb_select_select+0x340>
   14d94:	ldr	r3, [pc, #184]	; 14e54 <rb_select_select+0x3a8>
   14d98:	asr	r2, r0, #31
   14d9c:	and	r1, r0, #31
   14da0:	add	r2, r0, r2, lsr #27
   14da4:	asr	r2, r2, #5
   14da8:	add	r3, pc, r3
   14dac:	ldr	r3, [r3, r2, lsl #2]
   14db0:	tst	r3, ip, lsl r1
   14db4:	ldreq	r3, [pc, #156]	; 14e58 <rb_select_select+0x3ac>
   14db8:	lsleq	r1, ip, r1
   14dbc:	addeq	r3, pc, r3
   14dc0:	ldreq	r2, [r3, r2, lsl #2]
   14dc4:	tsteq	r2, r1
   14dc8:	bne	14dec <rb_select_select+0x340>
   14dcc:	sub	r1, r0, #1
   14dd0:	cmp	r0, #0
   14dd4:	mov	r0, r1
   14dd8:	str	r1, [lr]
   14ddc:	bgt	14d94 <rb_select_select+0x2e8>
   14de0:	b	14dec <rb_select_select+0x340>
   14de4:	cmp	r1, r0
   14de8:	strgt	r1, [lr]
   14dec:	ldr	r1, [pc, #104]	; 14e5c <rb_select_select+0x3b0>
   14df0:	add	r0, r8, #1
   14df4:	ldr	r1, [pc, r1]
   14df8:	cmp	r8, r1
   14dfc:	blt	14b90 <rb_select_select+0xe4>
   14e00:	mov	r0, #0
   14e04:	sub	sp, fp, #28
   14e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e0c:	.word	0x000342b8
   14e10:	.word	0x000341b4
   14e14:	.word	0x0003431c
   14e18:	.word	0x00034218
   14e1c:	.word	0x00016938
   14e20:	.word	0x000168e4
   14e24:	.word	0x00016800
   14e28:	.word	0x000168c4
   14e2c:	.word	0x00016830
   14e30:	.word	0x00016768
   14e34:	.word	0x000167e0
   14e38:	.word	0x00016718
   14e3c:	.word	0x00033ff4
   14e40:	.word	0x00016790
   14e44:	.word	0x00033f94
   14e48:	.word	0x00034000
   14e4c:	.word	0x00033fb8
   14e50:	.word	0x000166d4
   14e54:	.word	0x00033ed8
   14e58:	.word	0x00033f44
   14e5c:	.word	0x0001665c

00014e60 <rb_init_netio_kqueue>:
   14e60:	push	{fp, lr}
   14e64:	mov	fp, sp
   14e68:	bl	5540 <__errno_location@plt>
   14e6c:	mov	r1, #38	; 0x26
   14e70:	str	r1, [r0]
   14e74:	mvn	r0, #0
   14e78:	pop	{fp, pc}

00014e7c <rb_setselect_kqueue>:
   14e7c:	push	{fp, lr}
   14e80:	mov	fp, sp
   14e84:	bl	5540 <__errno_location@plt>
   14e88:	mov	r1, #38	; 0x26
   14e8c:	str	r1, [r0]
   14e90:	pop	{fp, pc}

00014e94 <rb_select_kqueue>:
   14e94:	push	{fp, lr}
   14e98:	mov	fp, sp
   14e9c:	bl	5540 <__errno_location@plt>
   14ea0:	mov	r1, #38	; 0x26
   14ea4:	str	r1, [r0]
   14ea8:	mvn	r0, #0
   14eac:	pop	{fp, pc}

00014eb0 <rb_setup_fd_kqueue>:
   14eb0:	push	{fp, lr}
   14eb4:	mov	fp, sp
   14eb8:	bl	5540 <__errno_location@plt>
   14ebc:	mov	r1, #38	; 0x26
   14ec0:	str	r1, [r0]
   14ec4:	mvn	r0, #0
   14ec8:	pop	{fp, pc}

00014ecc <rb_kqueue_init_event>:
   14ecc:	bx	lr

00014ed0 <rb_kqueue_sched_event>:
   14ed0:	push	{fp, lr}
   14ed4:	mov	fp, sp
   14ed8:	bl	5540 <__errno_location@plt>
   14edc:	mov	r1, #38	; 0x26
   14ee0:	str	r1, [r0]
   14ee4:	mvn	r0, #0
   14ee8:	pop	{fp, pc}

00014eec <rb_kqueue_unsched_event>:
   14eec:	bx	lr

00014ef0 <rb_kqueue_supports_event>:
   14ef0:	push	{fp, lr}
   14ef4:	mov	fp, sp
   14ef8:	bl	5540 <__errno_location@plt>
   14efc:	mov	r1, #38	; 0x26
   14f00:	str	r1, [r0]
   14f04:	mov	r0, #0
   14f08:	pop	{fp, pc}

00014f0c <rb_rawbuf_flush>:
   14f0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f10:	add	fp, sp, #28
   14f14:	sub	sp, sp, #12
   14f18:	sub	sp, sp, #8192	; 0x2000
   14f1c:	mov	r4, r0
   14f20:	ldr	r0, [r0]
   14f24:	cmp	r0, #0
   14f28:	beq	15124 <rb_rawbuf_flush+0x218>
   14f2c:	mov	r0, r1
   14f30:	mov	r8, r1
   14f34:	bl	4d84 <rb_fd_ssl@plt>
   14f38:	cmp	r0, #0
   14f3c:	beq	14f60 <rb_rawbuf_flush+0x54>
   14f40:	ldr	r0, [r4]
   14f44:	ldr	r6, [r0]
   14f48:	ldrb	r0, [r6, #1040]	; 0x410
   14f4c:	cmp	r0, #0
   14f50:	beq	15138 <rb_rawbuf_flush+0x22c>
   14f54:	mov	r5, r4
   14f58:	ldr	r0, [r5, #16]!
   14f5c:	b	1514c <rb_rawbuf_flush+0x240>
   14f60:	add	r6, sp, #8
   14f64:	mov	r1, #0
   14f68:	mov	r2, #8192	; 0x2000
   14f6c:	mov	r7, #0
   14f70:	mov	r0, r6
   14f74:	bl	4ee0 <memset@plt>
   14f78:	ldr	r0, [r4]
   14f7c:	cmp	r0, #0
   14f80:	beq	15124 <rb_rawbuf_flush+0x218>
   14f84:	movw	r1, #1022	; 0x3fe
   14f88:	ldr	r3, [r0]
   14f8c:	ldrb	r2, [r3, #1040]	; 0x410
   14f90:	cmp	r2, #0
   14f94:	beq	14fac <rb_rawbuf_flush+0xa0>
   14f98:	ldr	r5, [r4, #16]
   14f9c:	ldr	r2, [r3, #1036]	; 0x40c
   14fa0:	add	r3, r3, r5
   14fa4:	sub	r2, r2, r5
   14fa8:	b	14fb0 <rb_rawbuf_flush+0xa4>
   14fac:	ldr	r2, [r3, #1036]	; 0x40c
   14fb0:	add	r5, r3, #12
   14fb4:	str	r5, [r6, r7, lsl #3]
   14fb8:	add	r3, r6, r7, lsl #3
   14fbc:	add	r5, r7, #1
   14fc0:	cmp	r7, r1
   14fc4:	str	r2, [r3, #4]
   14fc8:	bhi	14fdc <rb_rawbuf_flush+0xd0>
   14fcc:	ldr	r0, [r0, #8]
   14fd0:	mov	r7, r5
   14fd4:	cmp	r0, #0
   14fd8:	bne	14f88 <rb_rawbuf_flush+0x7c>
   14fdc:	add	r1, sp, #8
   14fe0:	mov	r0, r8
   14fe4:	mov	r2, r5
   14fe8:	bl	533c <rb_writev@plt>
   14fec:	mov	sl, r0
   14ff0:	cmp	r0, #1
   14ff4:	blt	151ec <rb_rawbuf_flush+0x2e0>
   14ff8:	ldr	r6, [r4]
   14ffc:	cmp	r6, #0
   15000:	beq	151ec <rb_rawbuf_flush+0x2e0>
   15004:	sub	r0, r5, #1
   15008:	mov	r5, #0
   1500c:	mov	r7, sl
   15010:	str	r0, [sp, #4]
   15014:	ldr	r1, [r6]
   15018:	ldr	r6, [r6, #8]
   1501c:	ldrb	r0, [r1, #1040]	; 0x410
   15020:	ldr	r9, [r1, #1036]	; 0x40c
   15024:	cmp	r0, #0
   15028:	beq	1503c <rb_rawbuf_flush+0x130>
   1502c:	ldr	r0, [r4, #16]
   15030:	sub	r8, r9, r0
   15034:	cmp	r7, r8
   15038:	bge	150ac <rb_rawbuf_flush+0x1a0>
   1503c:	cmp	r7, r9
   15040:	blt	151f8 <rb_rawbuf_flush+0x2ec>
   15044:	ldr	r0, [r4, #12]
   15048:	mov	r3, r4
   1504c:	sub	r0, r0, r9
   15050:	str	r0, [r4, #12]
   15054:	ldr	r0, [r1, #8]
   15058:	ldr	r2, [r1, #4]
   1505c:	cmp	r0, #0
   15060:	streq	r2, [r4, #4]
   15064:	strne	r2, [r0, #4]
   15068:	ldrne	r2, [r1, #4]
   1506c:	cmp	r2, #0
   15070:	addne	r3, r2, #8
   15074:	str	r0, [r3]
   15078:	mov	r0, #0
   1507c:	str	r0, [r1, #4]
   15080:	str	r0, [r1, #8]
   15084:	ldr	r0, [r4, #8]
   15088:	sub	r0, r0, #1
   1508c:	str	r0, [r4, #8]
   15090:	ldr	r0, [pc, #380]	; 15214 <rb_rawbuf_flush+0x308>
   15094:	ldr	r0, [pc, r0]
   15098:	bl	515c <rb_bh_free@plt>
   1509c:	mov	r8, r9
   150a0:	cmp	r6, #0
   150a4:	bne	1510c <rb_rawbuf_flush+0x200>
   150a8:	b	151ec <rb_rawbuf_flush+0x2e0>
   150ac:	ldr	r0, [r4, #12]
   150b0:	mov	r3, r4
   150b4:	sub	r0, r0, r8
   150b8:	str	r0, [r4, #12]
   150bc:	ldr	r0, [r1, #8]
   150c0:	ldr	r2, [r1, #4]
   150c4:	cmp	r0, #0
   150c8:	streq	r2, [r4, #4]
   150cc:	strne	r2, [r0, #4]
   150d0:	ldrne	r2, [r1, #4]
   150d4:	cmp	r2, #0
   150d8:	addne	r3, r2, #8
   150dc:	str	r0, [r3]
   150e0:	mov	r0, #0
   150e4:	str	r0, [r1, #4]
   150e8:	str	r0, [r1, #8]
   150ec:	ldr	r0, [r4, #8]
   150f0:	sub	r0, r0, #1
   150f4:	str	r0, [r4, #8]
   150f8:	ldr	r0, [pc, #272]	; 15210 <rb_rawbuf_flush+0x304>
   150fc:	ldr	r0, [pc, r0]
   15100:	bl	515c <rb_bh_free@plt>
   15104:	cmp	r6, #0
   15108:	beq	151ec <rb_rawbuf_flush+0x2e0>
   1510c:	ldr	r0, [sp, #4]
   15110:	add	r5, r5, #1
   15114:	sub	r7, r7, r8
   15118:	cmp	r5, r0
   1511c:	bls	15014 <rb_rawbuf_flush+0x108>
   15120:	b	151ec <rb_rawbuf_flush+0x2e0>
   15124:	bl	5540 <__errno_location@plt>
   15128:	mov	r1, #11
   1512c:	mvn	sl, #0
   15130:	str	r1, [r0]
   15134:	b	151ec <rb_rawbuf_flush+0x2e0>
   15138:	mov	r0, #1
   1513c:	mov	r5, r4
   15140:	strb	r0, [r6, #1040]	; 0x410
   15144:	mov	r0, #0
   15148:	str	r0, [r5, #16]!
   1514c:	ldr	r1, [r6, #1036]	; 0x40c
   15150:	sub	r2, r1, r0
   15154:	add	r0, r6, r0
   15158:	add	r1, r0, #12
   1515c:	mov	r0, r8
   15160:	bl	4f10 <rb_write@plt>
   15164:	mov	sl, r0
   15168:	cmp	r0, #1
   1516c:	blt	151ec <rb_rawbuf_flush+0x2e0>
   15170:	ldr	r0, [r5]
   15174:	add	r0, r0, sl
   15178:	str	r0, [r5]
   1517c:	ldr	r1, [r6, #1036]	; 0x40c
   15180:	cmp	r0, r1
   15184:	bne	151e0 <rb_rawbuf_flush+0x2d4>
   15188:	mov	r0, #0
   1518c:	mov	r2, r4
   15190:	str	r0, [r5]
   15194:	ldr	r0, [r6, #8]
   15198:	ldr	r1, [r6, #4]
   1519c:	cmp	r0, #0
   151a0:	streq	r1, [r4, #4]
   151a4:	strne	r1, [r0, #4]
   151a8:	ldrne	r1, [r6, #4]
   151ac:	cmp	r1, #0
   151b0:	addne	r2, r1, #8
   151b4:	mov	r1, r6
   151b8:	str	r0, [r2]
   151bc:	mov	r0, #0
   151c0:	str	r0, [r6, #4]
   151c4:	str	r0, [r6, #8]
   151c8:	ldr	r0, [r4, #8]
   151cc:	sub	r0, r0, #1
   151d0:	str	r0, [r4, #8]
   151d4:	ldr	r0, [pc, #60]	; 15218 <rb_rawbuf_flush+0x30c>
   151d8:	ldr	r0, [pc, r0]
   151dc:	bl	515c <rb_bh_free@plt>
   151e0:	ldr	r0, [r4, #12]
   151e4:	sub	r0, r0, sl
   151e8:	str	r0, [r4, #12]
   151ec:	mov	r0, sl
   151f0:	sub	sp, fp, #28
   151f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151f8:	mov	r0, #1
   151fc:	strb	r0, [r1, #1040]	; 0x410
   15200:	str	r7, [r4, #16]
   15204:	ldr	r0, [r4, #12]
   15208:	sub	r0, r0, r7
   1520c:	b	151e8 <rb_rawbuf_flush+0x2dc>
   15210:	.word	0x00033d84
   15214:	.word	0x00033dec
   15218:	.word	0x00033ca8

0001521c <rb_rawbuf_append>:
   1521c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15220:	add	fp, sp, #24
   15224:	mov	r8, r0
   15228:	ldr	r0, [r0, #4]
   1522c:	mov	r6, r2
   15230:	mov	r5, r1
   15234:	cmp	r0, #0
   15238:	ldrne	r4, [r0]
   1523c:	cmpne	r4, #0
   15240:	bne	152f4 <rb_rawbuf_append+0xd8>
   15244:	cmp	r6, #1
   15248:	poplt	{r4, r5, r6, r7, r8, r9, fp, pc}
   1524c:	mov	r9, #0
   15250:	b	1525c <rb_rawbuf_append+0x40>
   15254:	mov	r0, r8
   15258:	b	15288 <rb_rawbuf_append+0x6c>
   1525c:	ldr	r0, [pc, #240]	; 15354 <rb_rawbuf_append+0x138>
   15260:	ldr	r0, [pc, r0]
   15264:	bl	51d4 <rb_bh_alloc@plt>
   15268:	str	r9, [r0, #8]
   1526c:	str	r0, [r0]
   15270:	mov	r7, r0
   15274:	ldr	r0, [r8, #4]
   15278:	cmp	r0, #0
   1527c:	str	r0, [r7, #4]
   15280:	beq	15290 <rb_rawbuf_append+0x74>
   15284:	add	r0, r0, #8
   15288:	str	r7, [r0]
   1528c:	b	1529c <rb_rawbuf_append+0x80>
   15290:	ldr	r0, [r8]
   15294:	cmp	r0, #0
   15298:	beq	15254 <rb_rawbuf_append+0x38>
   1529c:	str	r7, [r8, #4]
   152a0:	cmp	r6, #1024	; 0x400
   152a4:	mov	r4, r6
   152a8:	mov	r1, r5
   152ac:	ldr	r0, [r8, #8]
   152b0:	movge	r4, #1024	; 0x400
   152b4:	mov	r2, r4
   152b8:	add	r0, r0, #1
   152bc:	str	r0, [r8, #8]
   152c0:	add	r0, r7, #12
   152c4:	bl	50a8 <memcpy@plt>
   152c8:	ldr	r0, [r7, #1036]	; 0x40c
   152cc:	sub	r6, r6, r4
   152d0:	add	r5, r5, r4
   152d4:	cmp	r6, #0
   152d8:	add	r0, r0, r4
   152dc:	str	r0, [r7, #1036]	; 0x40c
   152e0:	ldr	r0, [r8, #12]
   152e4:	add	r0, r0, r4
   152e8:	str	r0, [r8, #12]
   152ec:	bgt	1525c <rb_rawbuf_append+0x40>
   152f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   152f4:	ldr	r0, [r4, #1036]	; 0x40c
   152f8:	cmp	r0, #1024	; 0x400
   152fc:	bge	15244 <rb_rawbuf_append+0x28>
   15300:	ldrb	r1, [r4, #1040]	; 0x410
   15304:	cmp	r1, #0
   15308:	bne	15244 <rb_rawbuf_append+0x28>
   1530c:	rsb	r7, r0, #1024	; 0x400
   15310:	add	r0, r4, r0
   15314:	mov	r1, r5
   15318:	cmp	r7, r6
   1531c:	add	r0, r0, #12
   15320:	movgt	r7, r6
   15324:	mov	r2, r7
   15328:	bl	50a8 <memcpy@plt>
   1532c:	ldr	r0, [r4, #1036]	; 0x40c
   15330:	subs	r6, r6, r7
   15334:	add	r0, r7, r0
   15338:	str	r0, [r4, #1036]	; 0x40c
   1533c:	ldr	r0, [r8, #12]
   15340:	add	r0, r0, r7
   15344:	str	r0, [r8, #12]
   15348:	beq	152f0 <rb_rawbuf_append+0xd4>
   1534c:	add	r5, r5, r7
   15350:	b	15244 <rb_rawbuf_append+0x28>
   15354:	.word	0x00033c20

00015358 <rb_rawbuf_get>:
   15358:	push	{r4, r5, r6, r7, fp, lr}
   1535c:	add	fp, sp, #16
   15360:	mov	r4, r0
   15364:	ldr	r0, [r0]
   15368:	cmp	r0, #0
   1536c:	moveq	r6, #0
   15370:	moveq	r0, r6
   15374:	popeq	{r4, r5, r6, r7, fp, pc}
   15378:	ldr	r7, [r0]
   1537c:	mov	r5, r2
   15380:	ldrb	r0, [r7, #1040]	; 0x410
   15384:	cmp	r0, #0
   15388:	beq	1539c <rb_rawbuf_get+0x44>
   1538c:	ldr	r0, [r4, #16]
   15390:	add	r0, r7, r0
   15394:	add	r2, r0, #12
   15398:	b	153a0 <rb_rawbuf_get+0x48>
   1539c:	add	r2, r7, #12
   153a0:	ldr	r6, [r7, #1036]	; 0x40c
   153a4:	mov	r0, r1
   153a8:	mov	r1, r2
   153ac:	cmp	r6, r5
   153b0:	movge	r6, r5
   153b4:	mov	r2, r6
   153b8:	bl	50a8 <memcpy@plt>
   153bc:	ldr	r0, [r7, #1036]	; 0x40c
   153c0:	cmp	r0, r6
   153c4:	bne	15434 <rb_rawbuf_get+0xdc>
   153c8:	mov	r0, #0
   153cc:	mov	r2, r4
   153d0:	str	r0, [r4, #16]
   153d4:	ldr	r0, [r7, #8]
   153d8:	ldr	r1, [r7, #4]
   153dc:	cmp	r0, #0
   153e0:	streq	r1, [r4, #4]
   153e4:	strne	r1, [r0, #4]
   153e8:	ldrne	r1, [r7, #4]
   153ec:	cmp	r1, #0
   153f0:	addne	r2, r1, #8
   153f4:	mov	r1, r7
   153f8:	str	r0, [r2]
   153fc:	mov	r0, #0
   15400:	str	r0, [r7, #4]
   15404:	str	r0, [r7, #8]
   15408:	ldr	r0, [r4, #8]
   1540c:	sub	r0, r0, #1
   15410:	str	r0, [r4, #8]
   15414:	ldr	r0, [pc, #72]	; 15464 <rb_rawbuf_get+0x10c>
   15418:	ldr	r0, [pc, r0]
   1541c:	bl	515c <rb_bh_free@plt>
   15420:	ldr	r0, [r4, #12]
   15424:	sub	r0, r0, r5
   15428:	str	r0, [r4, #12]
   1542c:	mov	r0, r6
   15430:	pop	{r4, r5, r6, r7, fp, pc}
   15434:	mov	r1, #1
   15438:	sub	r0, r0, r6
   1543c:	strb	r1, [r7, #1040]	; 0x410
   15440:	str	r0, [r7, #1036]	; 0x40c
   15444:	ldr	r0, [r4, #12]
   15448:	ldr	r1, [r4, #16]
   1544c:	sub	r0, r0, r6
   15450:	add	r1, r1, r6
   15454:	str	r0, [r4, #12]
   15458:	mov	r0, r6
   1545c:	str	r1, [r4, #16]
   15460:	pop	{r4, r5, r6, r7, fp, pc}
   15464:	.word	0x00033a68

00015468 <rb_rawbuf_length>:
   15468:	ldr	r0, [r0, #12]
   1546c:	bx	lr

00015470 <rb_new_rawbuffer>:
   15470:	push	{fp, lr}
   15474:	mov	fp, sp
   15478:	mov	r0, #1
   1547c:	mov	r1, #20
   15480:	bl	4ea4 <calloc@plt>
   15484:	cmp	r0, #0
   15488:	popne	{fp, pc}
   1548c:	bl	5204 <rb_outofmemory@plt>

00015490 <rb_free_rawbuffer>:
   15490:	push	{r4, r5, r6, sl, fp, lr}
   15494:	add	fp, sp, #16
   15498:	ldr	r5, [r0]
   1549c:	mov	r4, r0
   154a0:	cmp	r5, #0
   154a4:	beq	15504 <rb_free_rawbuffer+0x74>
   154a8:	mov	r6, #0
   154ac:	ldr	r1, [r5]
   154b0:	ldr	r5, [r5, #8]
   154b4:	mov	r3, r4
   154b8:	ldr	r0, [r1, #8]
   154bc:	ldr	r2, [r1, #4]
   154c0:	cmp	r0, #0
   154c4:	streq	r2, [r4, #4]
   154c8:	strne	r2, [r0, #4]
   154cc:	ldrne	r2, [r1, #4]
   154d0:	cmp	r2, #0
   154d4:	addne	r3, r2, #8
   154d8:	str	r0, [r3]
   154dc:	str	r6, [r1, #4]
   154e0:	str	r6, [r1, #8]
   154e4:	ldr	r0, [r4, #8]
   154e8:	sub	r0, r0, #1
   154ec:	str	r0, [r4, #8]
   154f0:	ldr	r0, [pc, #24]	; 15510 <rb_free_rawbuffer+0x80>
   154f4:	ldr	r0, [pc, r0]
   154f8:	bl	515c <rb_bh_free@plt>
   154fc:	cmp	r5, #0
   15500:	bne	154ac <rb_free_rawbuffer+0x1c>
   15504:	mov	r0, r4
   15508:	pop	{r4, r5, r6, sl, fp, lr}
   1550c:	b	4fa0 <free@plt>
   15510:	.word	0x0003398c

00015514 <rb_init_rawbuffers>:
   15514:	mov	r1, r0
   15518:	ldr	r0, [pc, #52]	; 15554 <rb_init_rawbuffers+0x40>
   1551c:	ldr	r0, [pc, r0]
   15520:	cmp	r0, #0
   15524:	bxne	lr
   15528:	push	{fp, lr}
   1552c:	mov	fp, sp
   15530:	ldr	r2, [pc, #32]	; 15558 <rb_init_rawbuffers+0x44>
   15534:	movw	r0, #1044	; 0x414
   15538:	add	r2, pc, r2
   1553c:	bl	5318 <rb_bh_create@plt>
   15540:	ldr	r1, [pc, #20]	; 1555c <rb_init_rawbuffers+0x48>
   15544:	add	r1, pc, r1
   15548:	str	r0, [r1]
   1554c:	pop	{fp, lr}
   15550:	bx	lr
   15554:	.word	0x00033964
   15558:	.word	0x000048c1
   1555c:	.word	0x0003393c

00015560 <rb_init_patricia>:
   15560:	bx	lr

00015564 <rb_new_patricia>:
   15564:	push	{r4, sl, fp, lr}
   15568:	add	fp, sp, #8
   1556c:	mov	r4, r0
   15570:	mov	r0, #1
   15574:	mov	r1, #12
   15578:	bl	4ea4 <calloc@plt>
   1557c:	cmp	r0, #0
   15580:	strne	r4, [r0, #4]
   15584:	ldrne	r1, [pc, #24]	; 155a4 <rb_new_patricia+0x40>
   15588:	ldrne	r1, [pc, r1]
   1558c:	ldrne	r2, [pc, #20]	; 155a8 <rb_new_patricia+0x44>
   15590:	addne	r1, r1, #1
   15594:	addne	r2, pc, r2
   15598:	strne	r1, [r2]
   1559c:	popne	{r4, sl, fp, pc}
   155a0:	bl	5204 <rb_outofmemory@plt>
   155a4:	.word	0x000338fc
   155a8:	.word	0x000338f0

000155ac <rb_clear_patricia>:
   155ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155b0:	add	fp, sp, #28
   155b4:	sub	sp, sp, #524	; 0x20c
   155b8:	ldr	r6, [r0]
   155bc:	mov	r4, r0
   155c0:	cmp	r6, #0
   155c4:	beq	1567c <rb_clear_patricia+0xd0>
   155c8:	mov	r9, r1
   155cc:	mov	sl, #0
   155d0:	add	r8, sp, #4
   155d4:	ldmib	r6, {r0, r5, r7}
   155d8:	cmp	r0, #0
   155dc:	beq	15608 <rb_clear_patricia+0x5c>
   155e0:	ldr	r1, [r0, #4]
   155e4:	subs	r1, r1, #1
   155e8:	str	r1, [r0, #4]
   155ec:	bgt	155f4 <rb_clear_patricia+0x48>
   155f0:	bl	4fa0 <free@plt>
   155f4:	cmp	r9, #0
   155f8:	ldrne	r0, [r6, #20]
   155fc:	cmpne	r0, #0
   15600:	beq	15608 <rb_clear_patricia+0x5c>
   15604:	blx	r9
   15608:	mov	r0, r6
   1560c:	bl	4fa0 <free@plt>
   15610:	ldr	r0, [r4, #8]
   15614:	cmp	r5, #0
   15618:	sub	r0, r0, #1
   1561c:	str	r0, [r4, #8]
   15620:	beq	15640 <rb_clear_patricia+0x94>
   15624:	cmp	r7, #0
   15628:	mov	r6, r5
   1562c:	strne	r7, [r8, sl, lsl #2]
   15630:	addne	sl, sl, #1
   15634:	cmp	r6, #0
   15638:	bne	155d4 <rb_clear_patricia+0x28>
   1563c:	b	15670 <rb_clear_patricia+0xc4>
   15640:	cmp	r7, #0
   15644:	beq	15658 <rb_clear_patricia+0xac>
   15648:	mov	r6, r7
   1564c:	cmp	r6, #0
   15650:	bne	155d4 <rb_clear_patricia+0x28>
   15654:	b	15670 <rb_clear_patricia+0xc4>
   15658:	cmp	sl, #0
   1565c:	beq	1567c <rb_clear_patricia+0xd0>
   15660:	sub	sl, sl, #1
   15664:	ldr	r6, [r8, sl, lsl #2]
   15668:	cmp	r6, #0
   1566c:	bne	155d4 <rb_clear_patricia+0x28>
   15670:	cmp	r4, #0
   15674:	subeq	sp, fp, #28
   15678:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1567c:	mov	r0, r4
   15680:	sub	sp, fp, #28
   15684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15688:	b	4fa0 <free@plt>

0001568c <rb_destroy_patricia>:
   1568c:	push	{fp, lr}
   15690:	mov	fp, sp
   15694:	bl	4dcc <rb_clear_patricia@plt>
   15698:	ldr	r0, [pc, #20]	; 156b4 <rb_destroy_patricia+0x28>
   1569c:	ldr	r0, [pc, r0]
   156a0:	ldr	r1, [pc, #16]	; 156b8 <rb_destroy_patricia+0x2c>
   156a4:	sub	r0, r0, #1
   156a8:	add	r1, pc, r1
   156ac:	str	r0, [r1]
   156b0:	pop	{fp, pc}
   156b4:	.word	0x000337e8
   156b8:	.word	0x000337dc

000156bc <rb_patricia_process>:
   156bc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   156c0:	add	fp, sp, #24
   156c4:	sub	sp, sp, #520	; 0x208
   156c8:	ldr	r7, [r0]
   156cc:	cmp	r7, #0
   156d0:	beq	1574c <rb_patricia_process+0x90>
   156d4:	mov	r4, r1
   156d8:	mov	r5, #0
   156dc:	add	r6, sp, #4
   156e0:	ldr	r0, [r7, #4]
   156e4:	cmp	r0, #0
   156e8:	beq	156f4 <rb_patricia_process+0x38>
   156ec:	ldr	r1, [r7, #20]
   156f0:	blx	r4
   156f4:	ldr	r0, [r7, #8]
   156f8:	ldr	r7, [r7, #12]
   156fc:	cmp	r0, #0
   15700:	beq	15720 <rb_patricia_process+0x64>
   15704:	cmp	r7, #0
   15708:	strne	r7, [r6, r5, lsl #2]
   1570c:	addne	r5, r5, #1
   15710:	mov	r7, r0
   15714:	cmp	r7, #0
   15718:	bne	156e0 <rb_patricia_process+0x24>
   1571c:	b	1574c <rb_patricia_process+0x90>
   15720:	cmp	r7, #0
   15724:	beq	15734 <rb_patricia_process+0x78>
   15728:	cmp	r7, #0
   1572c:	bne	156e0 <rb_patricia_process+0x24>
   15730:	b	1574c <rb_patricia_process+0x90>
   15734:	cmp	r5, #0
   15738:	beq	1574c <rb_patricia_process+0x90>
   1573c:	sub	r5, r5, #1
   15740:	ldr	r7, [r6, r5, lsl #2]
   15744:	cmp	r7, #0
   15748:	bne	156e0 <rb_patricia_process+0x24>
   1574c:	sub	sp, fp, #24
   15750:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00015754 <rb_patricia_search_exact>:
   15754:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15758:	add	fp, sp, #24
   1575c:	ldr	r4, [r0]
   15760:	cmp	r4, #0
   15764:	beq	157d4 <rb_patricia_search_exact+0x80>
   15768:	ldrh	r6, [r1, #2]
   1576c:	add	r5, r1, #8
   15770:	mov	r0, #128	; 0x80
   15774:	ldr	r1, [r4]
   15778:	cmp	r1, r6
   1577c:	bcs	157a4 <rb_patricia_search_exact+0x50>
   15780:	ldrb	r2, [r5, r1, lsr #3]
   15784:	and	r1, r1, #7
   15788:	tst	r2, r0, lsr r1
   1578c:	mov	r1, #12
   15790:	movweq	r1, #8
   15794:	ldr	r4, [r4, r1]
   15798:	cmp	r4, #0
   1579c:	bne	15774 <rb_patricia_search_exact+0x20>
   157a0:	b	157d4 <rb_patricia_search_exact+0x80>
   157a4:	bhi	157d4 <rb_patricia_search_exact+0x80>
   157a8:	ldr	r0, [r4, #4]
   157ac:	cmp	r0, #0
   157b0:	beq	157d4 <rb_patricia_search_exact+0x80>
   157b4:	add	r8, r0, #8
   157b8:	lsr	r7, r6, #3
   157bc:	mov	r1, r5
   157c0:	mov	r0, r8
   157c4:	mov	r2, r7
   157c8:	bl	4d24 <memcmp@plt>
   157cc:	cmp	r0, #0
   157d0:	beq	157e0 <rb_patricia_search_exact+0x8c>
   157d4:	mov	r4, #0
   157d8:	mov	r0, r4
   157dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   157e0:	ands	r0, r6, #7
   157e4:	beq	157d8 <rb_patricia_search_exact+0x84>
   157e8:	ldrb	r1, [r8, r7]
   157ec:	ldrb	r2, [r5, r7]
   157f0:	rsb	r0, r0, #8
   157f4:	eor	r1, r2, r1
   157f8:	mov	r2, #255	; 0xff
   157fc:	tst	r1, r2, lsl r0
   15800:	movne	r4, #0
   15804:	mov	r0, r4
   15808:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0001580c <rb_patricia_search_best2>:
   1580c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15810:	add	fp, sp, #28
   15814:	sub	sp, sp, #524	; 0x20c
   15818:	ldr	r7, [r0]
   1581c:	cmp	r7, #0
   15820:	beq	1591c <rb_patricia_search_best2+0x110>
   15824:	ldrh	r6, [r1, #2]
   15828:	add	sl, r1, #8
   1582c:	mov	r0, #0
   15830:	mov	r5, #128	; 0x80
   15834:	add	ip, sp, #4
   15838:	ldr	r4, [r7]
   1583c:	cmp	r4, r6
   15840:	bcs	15880 <rb_patricia_search_best2+0x74>
   15844:	ldr	r3, [r7, #4]
   15848:	cmp	r3, #0
   1584c:	strne	r7, [ip, r0, lsl #2]
   15850:	addne	r0, r0, #1
   15854:	ldrb	r3, [sl, r4, lsr #3]
   15858:	and	r4, r4, #7
   1585c:	tst	r3, r5, lsr r4
   15860:	mov	r3, #12
   15864:	movweq	r3, #8
   15868:	ldr	r7, [r7, r3]
   1586c:	cmp	r7, #0
   15870:	bne	15838 <rb_patricia_search_best2+0x2c>
   15874:	cmp	r0, #1
   15878:	bge	1589c <rb_patricia_search_best2+0x90>
   1587c:	b	1591c <rb_patricia_search_best2+0x110>
   15880:	cmp	r2, #0
   15884:	ldrne	r2, [r7, #4]
   15888:	cmpne	r2, #0
   1588c:	strne	r7, [ip, r0, lsl #2]
   15890:	addne	r0, r0, #1
   15894:	cmp	r0, #1
   15898:	blt	1591c <rb_patricia_search_best2+0x110>
   1589c:	cmp	r1, #0
   158a0:	sub	r8, ip, #4
   158a4:	moveq	sl, r1
   158a8:	subs	r4, r0, #1
   158ac:	blt	1591c <rb_patricia_search_best2+0x110>
   158b0:	ldr	r5, [r8, r0, lsl #2]
   158b4:	mov	r1, sl
   158b8:	ldr	r6, [r5, #4]
   158bc:	ldrh	r9, [r6, #2]
   158c0:	cmp	r6, #0
   158c4:	addne	r6, r6, #8
   158c8:	mov	r0, r6
   158cc:	lsr	r7, r9, #3
   158d0:	mov	r2, r7
   158d4:	bl	4d24 <memcmp@plt>
   158d8:	mov	r1, #0
   158dc:	cmp	r0, #0
   158e0:	bne	1590c <rb_patricia_search_best2+0x100>
   158e4:	ands	r0, r9, #7
   158e8:	beq	15920 <rb_patricia_search_best2+0x114>
   158ec:	ldrb	r1, [r6, r7]
   158f0:	ldrb	r2, [sl, r7]
   158f4:	rsb	r0, r0, #8
   158f8:	eor	r1, r2, r1
   158fc:	mov	r2, #255	; 0xff
   15900:	and	r0, r1, r2, lsl r0
   15904:	clz	r0, r0
   15908:	lsr	r1, r0, #5
   1590c:	cmp	r1, #0
   15910:	mov	r0, r4
   15914:	beq	158a8 <rb_patricia_search_best2+0x9c>
   15918:	b	15920 <rb_patricia_search_best2+0x114>
   1591c:	mov	r5, #0
   15920:	mov	r0, r5
   15924:	sub	sp, fp, #28
   15928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001592c <rb_patricia_search_best>:
   1592c:	mov	r2, #1
   15930:	b	1580c <rb_patricia_search_best2>

00015934 <rb_patricia_lookup>:
   15934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15938:	add	fp, sp, #28
   1593c:	sub	sp, sp, #12
   15940:	ldr	r3, [r0]
   15944:	mov	r9, r0
   15948:	cmp	r3, #0
   1594c:	beq	159bc <rb_patricia_lookup+0x88>
   15950:	ldrh	r8, [r1, #2]
   15954:	add	r5, r1, #8
   15958:	mov	r2, #128	; 0x80
   1595c:	ldr	r6, [r3]
   15960:	mov	r0, r3
   15964:	cmp	r6, r8
   15968:	bcc	15978 <rb_patricia_lookup+0x44>
   1596c:	ldr	r3, [r0, #4]
   15970:	cmp	r3, #0
   15974:	bne	15a0c <rb_patricia_lookup+0xd8>
   15978:	ldr	r3, [r9, #4]
   1597c:	cmp	r6, r3
   15980:	bcs	159a4 <rb_patricia_lookup+0x70>
   15984:	ldrb	r3, [r5, r6, lsr #3]
   15988:	and	r7, r6, #7
   1598c:	tst	r3, r2, lsr r7
   15990:	beq	159a4 <rb_patricia_lookup+0x70>
   15994:	ldr	r3, [r0, #12]
   15998:	cmp	r3, #0
   1599c:	bne	1595c <rb_patricia_lookup+0x28>
   159a0:	b	159b0 <rb_patricia_lookup+0x7c>
   159a4:	ldr	r3, [r0, #8]
   159a8:	cmp	r3, #0
   159ac:	bne	1595c <rb_patricia_lookup+0x28>
   159b0:	cmp	r6, r8
   159b4:	movcs	r6, r8
   159b8:	b	15a10 <rb_patricia_lookup+0xdc>
   159bc:	mov	r4, r1
   159c0:	mov	r0, #1
   159c4:	mov	r1, #24
   159c8:	bl	4ea4 <calloc@plt>
   159cc:	cmp	r0, #0
   159d0:	beq	15e54 <rb_patricia_lookup+0x520>
   159d4:	ldrh	r6, [r4, #2]
   159d8:	mov	r5, r0
   159dc:	cmp	r4, #0
   159e0:	str	r6, [r0]
   159e4:	mov	r0, #0
   159e8:	beq	15d90 <rb_patricia_lookup+0x45c>
   159ec:	ldr	r1, [r4, #4]
   159f0:	mov	r2, r4
   159f4:	cmp	r1, #0
   159f8:	beq	15ba4 <rb_patricia_lookup+0x270>
   159fc:	add	r0, r1, #1
   15a00:	str	r0, [r2, #4]
   15a04:	mov	r0, r2
   15a08:	b	15d90 <rb_patricia_lookup+0x45c>
   15a0c:	mov	r6, r8
   15a10:	ldr	r3, [r0, #4]
   15a14:	cmp	r6, #0
   15a18:	str	r5, [sp, #8]
   15a1c:	add	r7, r3, #8
   15a20:	str	r7, [sp, #4]
   15a24:	beq	15ab0 <rb_patricia_lookup+0x17c>
   15a28:	ldrb	r2, [r5]
   15a2c:	ldrb	r7, [r7]
   15a30:	mov	ip, #0
   15a34:	eor	r7, r7, r2
   15a38:	mov	r2, #0
   15a3c:	tst	r7, #255	; 0xff
   15a40:	bne	15a74 <rb_patricia_lookup+0x140>
   15a44:	add	r5, r1, #9
   15a48:	add	r3, r3, #9
   15a4c:	mov	r2, #0
   15a50:	add	sl, r2, #8
   15a54:	cmp	sl, r6
   15a58:	bcs	15ab4 <rb_patricia_lookup+0x180>
   15a5c:	ldrb	r7, [r5], #1
   15a60:	ldrb	r4, [r3], #1
   15a64:	add	r2, r2, #8
   15a68:	eor	r7, r4, r7
   15a6c:	tst	r7, #255	; 0xff
   15a70:	beq	15a50 <rb_patricia_lookup+0x11c>
   15a74:	tst	r7, #128	; 0x80
   15a78:	bne	15aa8 <rb_patricia_lookup+0x174>
   15a7c:	uxtb	r5, r7
   15a80:	mov	ip, #1
   15a84:	tst	r5, #64	; 0x40
   15a88:	moveq	ip, #2
   15a8c:	tsteq	r5, #32
   15a90:	bne	15aa8 <rb_patricia_lookup+0x174>
   15a94:	mov	ip, #3
   15a98:	tst	r5, #16
   15a9c:	moveq	ip, #4
   15aa0:	tsteq	r5, #8
   15aa4:	beq	15df8 <rb_patricia_lookup+0x4c4>
   15aa8:	add	sl, ip, r2
   15aac:	b	15ab4 <rb_patricia_lookup+0x180>
   15ab0:	mov	sl, #0
   15ab4:	cmp	sl, r6
   15ab8:	movhi	sl, r6
   15abc:	mov	r5, r0
   15ac0:	ldr	r0, [r0, #16]
   15ac4:	cmp	r0, #0
   15ac8:	beq	15ad8 <rb_patricia_lookup+0x1a4>
   15acc:	ldr	r2, [r0]
   15ad0:	cmp	r2, sl
   15ad4:	bcs	15abc <rb_patricia_lookup+0x188>
   15ad8:	cmp	sl, r8
   15adc:	mov	r4, r1
   15ae0:	ldreq	r0, [r5]
   15ae4:	cmpeq	r0, r8
   15ae8:	beq	15b30 <rb_patricia_lookup+0x1fc>
   15aec:	mov	r0, #1
   15af0:	mov	r1, #24
   15af4:	bl	4ea4 <calloc@plt>
   15af8:	cmp	r0, #0
   15afc:	beq	15e54 <rb_patricia_lookup+0x520>
   15b00:	mov	r7, r0
   15b04:	str	r8, [r0]
   15b08:	mov	r0, #0
   15b0c:	cmp	r4, #0
   15b10:	beq	15c10 <rb_patricia_lookup+0x2dc>
   15b14:	ldr	r1, [r4, #4]
   15b18:	cmp	r1, #0
   15b1c:	beq	15b68 <rb_patricia_lookup+0x234>
   15b20:	add	r0, r1, #1
   15b24:	str	r0, [r4, #4]
   15b28:	mov	r0, r4
   15b2c:	b	15c10 <rb_patricia_lookup+0x2dc>
   15b30:	ldr	r0, [r5, #4]
   15b34:	cmp	r0, #0
   15b38:	bne	15db0 <rb_patricia_lookup+0x47c>
   15b3c:	mov	r0, #0
   15b40:	cmp	r4, #0
   15b44:	beq	15b60 <rb_patricia_lookup+0x22c>
   15b48:	ldr	r1, [r4, #4]
   15b4c:	cmp	r1, #0
   15b50:	beq	15dbc <rb_patricia_lookup+0x488>
   15b54:	add	r0, r1, #1
   15b58:	str	r0, [r4, #4]
   15b5c:	mov	r0, r4
   15b60:	str	r0, [r5, #4]
   15b64:	b	15db0 <rb_patricia_lookup+0x47c>
   15b68:	ldrh	r4, [r4]
   15b6c:	cmp	r4, #2
   15b70:	beq	15be0 <rb_patricia_lookup+0x2ac>
   15b74:	cmp	r4, #10
   15b78:	bne	15c10 <rb_patricia_lookup+0x2dc>
   15b7c:	mov	r0, #1
   15b80:	mov	r1, #24
   15b84:	bl	4ea4 <calloc@plt>
   15b88:	cmp	r0, #0
   15b8c:	beq	15e54 <rb_patricia_lookup+0x520>
   15b90:	ldr	r1, [sp, #8]
   15b94:	vld1.8	{d16-d17}, [r1]
   15b98:	add	r1, r0, #8
   15b9c:	vst1.8	{d16-d17}, [r1]
   15ba0:	b	15c00 <rb_patricia_lookup+0x2cc>
   15ba4:	ldrh	r7, [r2], #8
   15ba8:	cmp	r7, #2
   15bac:	beq	15d60 <rb_patricia_lookup+0x42c>
   15bb0:	cmp	r7, #10
   15bb4:	bne	15d90 <rb_patricia_lookup+0x45c>
   15bb8:	mov	r0, #1
   15bbc:	mov	r1, #24
   15bc0:	mov	r4, r2
   15bc4:	bl	4ea4 <calloc@plt>
   15bc8:	cmp	r0, #0
   15bcc:	beq	15e54 <rb_patricia_lookup+0x520>
   15bd0:	vld1.8	{d16-d17}, [r4]
   15bd4:	add	r1, r0, #8
   15bd8:	vst1.8	{d16-d17}, [r1]
   15bdc:	b	15d80 <rb_patricia_lookup+0x44c>
   15be0:	mov	r0, #1
   15be4:	mov	r1, #24
   15be8:	bl	4ea4 <calloc@plt>
   15bec:	cmp	r0, #0
   15bf0:	beq	15e54 <rb_patricia_lookup+0x520>
   15bf4:	ldr	r1, [sp, #8]
   15bf8:	ldr	r1, [r1]
   15bfc:	str	r1, [r0, #8]
   15c00:	mov	r1, #1
   15c04:	strh	r4, [r0]
   15c08:	strh	r8, [r0, #2]
   15c0c:	str	r1, [r0, #4]
   15c10:	str	r0, [r7, #4]
   15c14:	vmov.i32	q8, #0	; 0x00000000
   15c18:	add	r0, r7, #8
   15c1c:	vst1.32	{d16-d17}, [r0]
   15c20:	ldr	r4, [r9, #8]
   15c24:	add	r1, r4, #1
   15c28:	str	r1, [r9, #8]
   15c2c:	ldr	r1, [r5]
   15c30:	cmp	r1, sl
   15c34:	bne	15c68 <rb_patricia_lookup+0x334>
   15c38:	str	r5, [r7, #16]
   15c3c:	ldr	r0, [r9, #4]
   15c40:	cmp	sl, r0
   15c44:	bcs	15cc8 <rb_patricia_lookup+0x394>
   15c48:	ldr	r0, [sp, #8]
   15c4c:	and	r1, sl, #7
   15c50:	mov	r2, #128	; 0x80
   15c54:	ldrb	r0, [r0, sl, lsr #3]
   15c58:	tst	r0, r2, lsr r1
   15c5c:	beq	15cc8 <rb_patricia_lookup+0x394>
   15c60:	str	r7, [r5, #12]
   15c64:	b	15d58 <rb_patricia_lookup+0x424>
   15c68:	cmp	sl, r8
   15c6c:	bne	15cd0 <rb_patricia_lookup+0x39c>
   15c70:	ldr	r1, [r9, #4]
   15c74:	cmp	r1, r8
   15c78:	bls	15c94 <rb_patricia_lookup+0x360>
   15c7c:	ldr	r1, [sp, #4]
   15c80:	and	r2, r8, #7
   15c84:	mov	r3, #128	; 0x80
   15c88:	ldrb	r1, [r1, r8, lsr #3]
   15c8c:	tst	r1, r3, lsr r2
   15c90:	addne	r0, r7, #12
   15c94:	str	r5, [r0]
   15c98:	ldr	r0, [r5, #16]
   15c9c:	str	r0, [r7, #16]
   15ca0:	ldr	r0, [r5, #16]
   15ca4:	cmp	r0, #0
   15ca8:	beq	15cbc <rb_patricia_lookup+0x388>
   15cac:	mov	r9, r0
   15cb0:	ldr	r1, [r9, #12]!
   15cb4:	cmp	r1, r5
   15cb8:	addne	r9, r0, #8
   15cbc:	str	r7, [r9]
   15cc0:	str	r7, [r5, #16]
   15cc4:	b	15d58 <rb_patricia_lookup+0x424>
   15cc8:	str	r7, [r5, #8]
   15ccc:	b	15d58 <rb_patricia_lookup+0x424>
   15cd0:	mov	r0, #1
   15cd4:	mov	r1, #24
   15cd8:	bl	4ea4 <calloc@plt>
   15cdc:	cmp	r0, #0
   15ce0:	beq	15e54 <rb_patricia_lookup+0x520>
   15ce4:	str	sl, [r0]
   15ce8:	ldr	r1, [r5, #16]
   15cec:	str	r1, [r0, #16]
   15cf0:	add	r1, r4, #2
   15cf4:	str	r1, [r9, #8]
   15cf8:	ldr	r1, [r9, #4]
   15cfc:	cmp	sl, r1
   15d00:	bcs	15d28 <rb_patricia_lookup+0x3f4>
   15d04:	ldr	r1, [sp, #8]
   15d08:	and	r2, sl, #7
   15d0c:	mov	r3, #128	; 0x80
   15d10:	ldrb	r1, [r1, sl, lsr #3]
   15d14:	tst	r1, r3, lsr r2
   15d18:	beq	15d28 <rb_patricia_lookup+0x3f4>
   15d1c:	str	r5, [r0, #8]
   15d20:	str	r7, [r0, #12]
   15d24:	b	15d30 <rb_patricia_lookup+0x3fc>
   15d28:	str	r7, [r0, #8]
   15d2c:	str	r5, [r0, #12]
   15d30:	str	r0, [r7, #16]
   15d34:	ldr	r1, [r5, #16]
   15d38:	cmp	r1, #0
   15d3c:	beq	15d50 <rb_patricia_lookup+0x41c>
   15d40:	mov	r9, r1
   15d44:	ldr	r2, [r9, #12]!
   15d48:	cmp	r2, r5
   15d4c:	addne	r9, r1, #8
   15d50:	str	r0, [r9]
   15d54:	str	r0, [r5, #16]
   15d58:	mov	r5, r7
   15d5c:	b	15db0 <rb_patricia_lookup+0x47c>
   15d60:	mov	r0, #1
   15d64:	mov	r1, #24
   15d68:	mov	r4, r2
   15d6c:	bl	4ea4 <calloc@plt>
   15d70:	cmp	r0, #0
   15d74:	beq	15e54 <rb_patricia_lookup+0x520>
   15d78:	ldr	r1, [r4]
   15d7c:	str	r1, [r0, #8]
   15d80:	mov	r1, #1
   15d84:	strh	r7, [r0]
   15d88:	strh	r6, [r0, #2]
   15d8c:	str	r1, [r0, #4]
   15d90:	str	r0, [r5, #4]
   15d94:	vmov.i32	q8, #0	; 0x00000000
   15d98:	add	r0, r5, #8
   15d9c:	vst1.32	{d16-d17}, [r0]
   15da0:	str	r5, [r9]
   15da4:	ldr	r0, [r9, #8]
   15da8:	add	r0, r0, #1
   15dac:	str	r0, [r9, #8]
   15db0:	mov	r0, r5
   15db4:	sub	sp, fp, #28
   15db8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15dbc:	ldrh	r4, [r4]
   15dc0:	cmp	r4, #2
   15dc4:	beq	15e1c <rb_patricia_lookup+0x4e8>
   15dc8:	cmp	r4, #10
   15dcc:	bne	15b60 <rb_patricia_lookup+0x22c>
   15dd0:	mov	r0, #1
   15dd4:	mov	r1, #24
   15dd8:	bl	4ea4 <calloc@plt>
   15ddc:	cmp	r0, #0
   15de0:	beq	15e54 <rb_patricia_lookup+0x520>
   15de4:	ldr	r1, [sp, #8]
   15de8:	vld1.8	{d16-d17}, [r1]
   15dec:	add	r1, r0, #8
   15df0:	vst1.8	{d16-d17}, [r1]
   15df4:	b	15e3c <rb_patricia_lookup+0x508>
   15df8:	mov	ip, #5
   15dfc:	tst	r5, #4
   15e00:	moveq	ip, #6
   15e04:	tsteq	r5, #2
   15e08:	bne	15aa8 <rb_patricia_lookup+0x174>
   15e0c:	mov	ip, #7
   15e10:	tst	r5, #1
   15e14:	movweq	ip, #8
   15e18:	b	15aa8 <rb_patricia_lookup+0x174>
   15e1c:	mov	r0, #1
   15e20:	mov	r1, #24
   15e24:	bl	4ea4 <calloc@plt>
   15e28:	cmp	r0, #0
   15e2c:	beq	15e54 <rb_patricia_lookup+0x520>
   15e30:	ldr	r1, [sp, #8]
   15e34:	ldr	r1, [r1]
   15e38:	str	r1, [r0, #8]
   15e3c:	mov	r1, #1
   15e40:	strh	r4, [r0]
   15e44:	strh	r8, [r0, #2]
   15e48:	str	r1, [r0, #4]
   15e4c:	str	r0, [r5, #4]
   15e50:	b	15db0 <rb_patricia_lookup+0x47c>
   15e54:	bl	5204 <rb_outofmemory@plt>

00015e58 <rb_patricia_remove>:
   15e58:	push	{r4, r5, r6, r7, fp, lr}
   15e5c:	add	fp, sp, #16
   15e60:	ldr	r6, [r1, #12]
   15e64:	mov	r4, r0
   15e68:	ldr	r0, [r1, #8]
   15e6c:	mov	r5, r1
   15e70:	cmp	r6, #0
   15e74:	beq	15eb0 <rb_patricia_remove+0x58>
   15e78:	cmp	r0, #0
   15e7c:	beq	15ebc <rb_patricia_remove+0x64>
   15e80:	ldr	r0, [r5, #4]
   15e84:	cmp	r0, #0
   15e88:	beq	15ea0 <rb_patricia_remove+0x48>
   15e8c:	ldr	r1, [r0, #4]
   15e90:	subs	r1, r1, #1
   15e94:	str	r1, [r0, #4]
   15e98:	bgt	15ea0 <rb_patricia_remove+0x48>
   15e9c:	bl	4fa0 <free@plt>
   15ea0:	mov	r0, #0
   15ea4:	str	r0, [r5, #20]
   15ea8:	str	r0, [r5, #4]
   15eac:	pop	{r4, r5, r6, r7, fp, pc}
   15eb0:	cmp	r0, #0
   15eb4:	mov	r6, r0
   15eb8:	beq	15f1c <rb_patricia_remove+0xc4>
   15ebc:	ldr	r7, [r5, #16]
   15ec0:	str	r7, [r6, #16]
   15ec4:	ldr	r0, [r5, #4]
   15ec8:	cmp	r0, #0
   15ecc:	beq	15ee4 <rb_patricia_remove+0x8c>
   15ed0:	ldr	r1, [r0, #4]
   15ed4:	subs	r1, r1, #1
   15ed8:	str	r1, [r0, #4]
   15edc:	bgt	15ee4 <rb_patricia_remove+0x8c>
   15ee0:	bl	4fa0 <free@plt>
   15ee4:	mov	r0, r5
   15ee8:	bl	4fa0 <free@plt>
   15eec:	ldr	r0, [r4, #8]
   15ef0:	cmp	r7, #0
   15ef4:	sub	r0, r0, #1
   15ef8:	str	r0, [r4, #8]
   15efc:	streq	r6, [r4]
   15f00:	popeq	{r4, r5, r6, r7, fp, pc}
   15f04:	ldr	r0, [r7, #12]
   15f08:	cmp	r0, r5
   15f0c:	streq	r6, [r7, #12]
   15f10:	popeq	{r4, r5, r6, r7, fp, pc}
   15f14:	str	r6, [r7, #8]
   15f18:	pop	{r4, r5, r6, r7, fp, pc}
   15f1c:	ldr	r0, [r5, #4]
   15f20:	ldr	r6, [r5, #16]
   15f24:	cmp	r0, #0
   15f28:	beq	15f40 <rb_patricia_remove+0xe8>
   15f2c:	ldr	r1, [r0, #4]
   15f30:	subs	r1, r1, #1
   15f34:	str	r1, [r0, #4]
   15f38:	bgt	15f40 <rb_patricia_remove+0xe8>
   15f3c:	bl	4fa0 <free@plt>
   15f40:	mov	r0, r5
   15f44:	bl	4fa0 <free@plt>
   15f48:	ldr	r0, [r4, #8]
   15f4c:	cmp	r6, #0
   15f50:	sub	r0, r0, #1
   15f54:	str	r0, [r4, #8]
   15f58:	moveq	r0, #0
   15f5c:	streq	r0, [r4]
   15f60:	popeq	{r4, r5, r6, r7, fp, pc}
   15f64:	ldr	r0, [r6, #12]
   15f68:	cmp	r0, r5
   15f6c:	beq	15f7c <rb_patricia_remove+0x124>
   15f70:	mov	r1, #0
   15f74:	str	r1, [r6, #8]
   15f78:	b	15f88 <rb_patricia_remove+0x130>
   15f7c:	mov	r0, #0
   15f80:	str	r0, [r6, #12]
   15f84:	ldr	r0, [r6, #8]
   15f88:	ldr	r1, [r6, #4]
   15f8c:	cmp	r1, #0
   15f90:	popne	{r4, r5, r6, r7, fp, pc}
   15f94:	ldr	r1, [r6, #16]
   15f98:	cmp	r1, #0
   15f9c:	beq	15fb4 <rb_patricia_remove+0x15c>
   15fa0:	mov	r2, r1
   15fa4:	ldr	r3, [r2, #12]!
   15fa8:	cmp	r3, r6
   15fac:	subne	r2, r2, #4
   15fb0:	b	15fb8 <rb_patricia_remove+0x160>
   15fb4:	mov	r2, r4
   15fb8:	str	r0, [r2]
   15fbc:	str	r1, [r0, #16]
   15fc0:	mov	r0, r6
   15fc4:	bl	4fa0 <free@plt>
   15fc8:	ldr	r0, [r4, #8]
   15fcc:	sub	r0, r0, #1
   15fd0:	str	r0, [r4, #8]
   15fd4:	pop	{r4, r5, r6, r7, fp, pc}

00015fd8 <make_and_lookup_ip>:
   15fd8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15fdc:	add	fp, sp, #24
   15fe0:	mov	r5, r1
   15fe4:	mov	r9, r2
   15fe8:	mov	r8, r0
   15fec:	ldrh	r4, [r5], #8
   15ff0:	cmp	r4, #10
   15ff4:	addne	r5, r1, #4
   15ff8:	cmp	r4, #2
   15ffc:	beq	16034 <make_and_lookup_ip+0x5c>
   16000:	mov	r7, #0
   16004:	cmp	r4, #10
   16008:	bne	16094 <make_and_lookup_ip+0xbc>
   1600c:	mov	r0, #1
   16010:	mov	r1, #24
   16014:	bl	4ea4 <calloc@plt>
   16018:	cmp	r0, #0
   1601c:	beq	1609c <make_and_lookup_ip+0xc4>
   16020:	vld1.8	{d16-d17}, [r5]
   16024:	mov	r6, r0
   16028:	add	r0, r0, #8
   1602c:	vst1.8	{d16-d17}, [r0]
   16030:	b	16054 <make_and_lookup_ip+0x7c>
   16034:	mov	r0, #1
   16038:	mov	r1, #24
   1603c:	bl	4ea4 <calloc@plt>
   16040:	cmp	r0, #0
   16044:	beq	1609c <make_and_lookup_ip+0xc4>
   16048:	mov	r6, r0
   1604c:	ldr	r0, [r5]
   16050:	str	r0, [r6, #8]
   16054:	cmn	r9, #1
   16058:	mov	r0, #1
   1605c:	strh	r4, [r6]
   16060:	mov	r1, r6
   16064:	str	r0, [r6, #4]
   16068:	movle	r9, #128	; 0x80
   1606c:	mov	r0, r8
   16070:	strh	r9, [r6, #2]
   16074:	bl	5180 <rb_patricia_lookup@plt>
   16078:	mov	r7, r0
   1607c:	ldr	r0, [r6, #4]
   16080:	subs	r0, r0, #1
   16084:	str	r0, [r6, #4]
   16088:	bgt	16094 <make_and_lookup_ip+0xbc>
   1608c:	mov	r0, r6
   16090:	bl	4fa0 <free@plt>
   16094:	mov	r0, r7
   16098:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1609c:	bl	5204 <rb_outofmemory@plt>

000160a0 <make_and_lookup>:
   160a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   160a4:	add	fp, sp, #24
   160a8:	sub	sp, sp, #24
   160ac:	sub	sp, sp, #1024	; 0x400
   160b0:	mov	r5, r1
   160b4:	mov	r8, r0
   160b8:	cmp	r1, #0
   160bc:	beq	1617c <make_and_lookup+0xdc>
   160c0:	mov	r0, r5
   160c4:	mov	r1, #47	; 0x2f
   160c8:	bl	4e74 <strchr@plt>
   160cc:	cmp	r0, #0
   160d0:	beq	1611c <make_and_lookup+0x7c>
   160d4:	mov	r7, r0
   160d8:	add	r0, r0, #1
   160dc:	mov	r1, #0
   160e0:	mov	r2, #10
   160e4:	mov	r9, #0
   160e8:	bl	5114 <strtol@plt>
   160ec:	sub	r4, r7, r5
   160f0:	mov	r7, sp
   160f4:	mov	r6, r0
   160f8:	mov	r1, r5
   160fc:	mov	r0, r7
   16100:	mov	r2, r4
   16104:	bl	50a8 <memcpy@plt>
   16108:	sub	r0, r6, #1
   1610c:	strb	r9, [r7, r4]
   16110:	cmp	r0, #31
   16114:	movwhi	r6, #32
   16118:	b	16124 <make_and_lookup+0x84>
   1611c:	mov	r6, #32
   16120:	mov	r7, r5
   16124:	sub	r2, fp, #48	; 0x30
   16128:	mov	r0, #2
   1612c:	mov	r1, r7
   16130:	bl	4eec <rb_inet_pton@plt>
   16134:	cmp	r0, #1
   16138:	blt	1617c <make_and_lookup+0xdc>
   1613c:	mov	r0, #1
   16140:	mov	r1, #24
   16144:	mov	r4, #1
   16148:	bl	4ea4 <calloc@plt>
   1614c:	cmp	r0, #0
   16150:	beq	16280 <make_and_lookup+0x1e0>
   16154:	mov	r5, r0
   16158:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1615c:	cmn	r6, #1
   16160:	mov	r1, #2
   16164:	movle	r6, #128	; 0x80
   16168:	strh	r1, [r5]
   1616c:	strh	r6, [r5, #2]
   16170:	str	r4, [r5, #4]
   16174:	str	r0, [r5, #8]
   16178:	b	16244 <make_and_lookup+0x1a4>
   1617c:	cmp	r5, #0
   16180:	beq	16270 <make_and_lookup+0x1d0>
   16184:	mov	r0, r5
   16188:	mov	r1, #47	; 0x2f
   1618c:	bl	4e74 <strchr@plt>
   16190:	cmp	r0, #0
   16194:	beq	161e4 <make_and_lookup+0x144>
   16198:	mov	r7, r0
   1619c:	add	r0, r0, #1
   161a0:	mov	r1, #0
   161a4:	mov	r2, #10
   161a8:	mov	r9, #0
   161ac:	bl	5114 <strtol@plt>
   161b0:	sub	r4, r7, r5
   161b4:	mov	r7, sp
   161b8:	mov	r6, r0
   161bc:	mov	r1, r5
   161c0:	mov	r0, r7
   161c4:	mov	r2, r4
   161c8:	bl	50a8 <memcpy@plt>
   161cc:	sub	r0, r6, #1
   161d0:	mov	r5, r7
   161d4:	strb	r9, [r7, r4]
   161d8:	cmp	r0, #127	; 0x7f
   161dc:	movwhi	r6, #128	; 0x80
   161e0:	b	161e8 <make_and_lookup+0x148>
   161e4:	mov	r6, #128	; 0x80
   161e8:	sub	r7, fp, #48	; 0x30
   161ec:	mov	r0, #10
   161f0:	mov	r1, r5
   161f4:	mov	r2, r7
   161f8:	bl	4eec <rb_inet_pton@plt>
   161fc:	cmp	r0, #1
   16200:	blt	16270 <make_and_lookup+0x1d0>
   16204:	mov	r0, #1
   16208:	mov	r1, #24
   1620c:	mov	r4, #1
   16210:	bl	4ea4 <calloc@plt>
   16214:	cmp	r0, #0
   16218:	beq	16280 <make_and_lookup+0x1e0>
   1621c:	cmn	r6, #1
   16220:	vld1.64	{d16-d17}, [r7]
   16224:	mov	r5, r0
   16228:	movle	r6, #128	; 0x80
   1622c:	strh	r6, [r0, #2]
   16230:	mov	r0, #10
   16234:	strh	r0, [r5]
   16238:	add	r0, r5, #8
   1623c:	str	r4, [r5, #4]
   16240:	vst1.32	{d16-d17}, [r0]
   16244:	mov	r0, r8
   16248:	mov	r1, r5
   1624c:	bl	5180 <rb_patricia_lookup@plt>
   16250:	mov	r4, r0
   16254:	ldr	r0, [r5, #4]
   16258:	subs	r0, r0, #1
   1625c:	str	r0, [r5, #4]
   16260:	bgt	16274 <make_and_lookup+0x1d4>
   16264:	mov	r0, r5
   16268:	bl	4fa0 <free@plt>
   1626c:	b	16274 <make_and_lookup+0x1d4>
   16270:	mov	r4, #0
   16274:	mov	r0, r4
   16278:	sub	sp, fp, #24
   1627c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16280:	bl	5204 <rb_outofmemory@plt>

00016284 <rb_match_ip>:
   16284:	push	{r4, r5, r6, r7, fp, lr}
   16288:	add	fp, sp, #16
   1628c:	mov	r7, r1
   16290:	mov	r4, r0
   16294:	mov	r0, #1
   16298:	ldrh	r6, [r7], #8
   1629c:	cmp	r6, #10
   162a0:	addne	r7, r1, #4
   162a4:	mov	r1, #24
   162a8:	bl	4ea4 <calloc@plt>
   162ac:	mov	r5, r0
   162b0:	cmp	r6, #10
   162b4:	bne	162d0 <rb_match_ip+0x4c>
   162b8:	cmp	r5, #0
   162bc:	beq	16324 <rb_match_ip+0xa0>
   162c0:	vld1.8	{d16-d17}, [r7]
   162c4:	add	r0, r5, #8
   162c8:	vst1.8	{d16-d17}, [r0]
   162cc:	b	162e0 <rb_match_ip+0x5c>
   162d0:	cmp	r5, #0
   162d4:	beq	16324 <rb_match_ip+0xa0>
   162d8:	ldr	r0, [r7]
   162dc:	str	r0, [r5, #8]
   162e0:	mov	r0, #1
   162e4:	cmp	r6, #10
   162e8:	mov	r1, r5
   162ec:	mov	r2, #1
   162f0:	str	r0, [r5, #4]
   162f4:	mov	r0, #32
   162f8:	movwne	r6, #2
   162fc:	movweq	r0, #128	; 0x80
   16300:	strh	r6, [r5]
   16304:	strh	r0, [r5, #2]
   16308:	mov	r0, r4
   1630c:	bl	4f64 <rb_patricia_search_best2@plt>
   16310:	mov	r4, r0
   16314:	mov	r0, r5
   16318:	bl	4fa0 <free@plt>
   1631c:	mov	r0, r4
   16320:	pop	{r4, r5, r6, r7, fp, pc}
   16324:	bl	5204 <rb_outofmemory@plt>

00016328 <rb_match_ip_exact>:
   16328:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1632c:	add	fp, sp, #24
   16330:	mov	r6, r1
   16334:	mov	r8, r0
   16338:	cmp	r2, #128	; 0x80
   1633c:	mov	r0, r2
   16340:	mov	r5, r2
   16344:	ldrh	r7, [r6], #8
   16348:	movcs	r0, #128	; 0x80
   1634c:	cmp	r2, #32
   16350:	movcs	r5, #32
   16354:	cmp	r7, #10
   16358:	moveq	r5, r0
   1635c:	addne	r6, r1, #4
   16360:	mov	r0, #1
   16364:	mov	r1, #24
   16368:	bl	4ea4 <calloc@plt>
   1636c:	mov	r4, r0
   16370:	cmp	r7, #10
   16374:	bne	16390 <rb_match_ip_exact+0x68>
   16378:	cmp	r4, #0
   1637c:	beq	16470 <rb_match_ip_exact+0x148>
   16380:	vld1.8	{d16-d17}, [r6]
   16384:	add	r0, r4, #8
   16388:	vst1.8	{d16-d17}, [r0]
   1638c:	b	163a0 <rb_match_ip_exact+0x78>
   16390:	cmp	r4, #0
   16394:	beq	16470 <rb_match_ip_exact+0x148>
   16398:	ldr	r0, [r6]
   1639c:	str	r0, [r4, #8]
   163a0:	cmp	r7, #10
   163a4:	mov	r0, #1
   163a8:	str	r0, [r4, #4]
   163ac:	movwne	r7, #2
   163b0:	mov	r0, #128	; 0x80
   163b4:	cmn	r5, #1
   163b8:	movle	r5, r0
   163bc:	strh	r7, [r4]
   163c0:	strh	r5, [r4, #2]
   163c4:	ldr	r6, [r8]
   163c8:	cmp	r6, #0
   163cc:	beq	16434 <rb_match_ip_exact+0x10c>
   163d0:	add	r7, r4, #8
   163d4:	ldr	r1, [r6]
   163d8:	cmp	r1, r5
   163dc:	bcs	16404 <rb_match_ip_exact+0xdc>
   163e0:	ldrb	r2, [r7, r1, lsr #3]
   163e4:	and	r1, r1, #7
   163e8:	tst	r2, r0, lsr r1
   163ec:	mov	r1, #12
   163f0:	movweq	r1, #8
   163f4:	ldr	r6, [r6, r1]
   163f8:	cmp	r6, #0
   163fc:	bne	163d4 <rb_match_ip_exact+0xac>
   16400:	b	16434 <rb_match_ip_exact+0x10c>
   16404:	bhi	16434 <rb_match_ip_exact+0x10c>
   16408:	ldr	r0, [r6, #4]
   1640c:	cmp	r0, #0
   16410:	beq	16434 <rb_match_ip_exact+0x10c>
   16414:	add	r8, r0, #8
   16418:	lsr	r9, r5, #3
   1641c:	mov	r1, r7
   16420:	mov	r0, r8
   16424:	mov	r2, r9
   16428:	bl	4d24 <memcmp@plt>
   1642c:	cmp	r0, #0
   16430:	beq	16448 <rb_match_ip_exact+0x120>
   16434:	mov	r6, #0
   16438:	mov	r0, r4
   1643c:	bl	4fa0 <free@plt>
   16440:	mov	r0, r6
   16444:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16448:	ands	r0, r5, #7
   1644c:	beq	16438 <rb_match_ip_exact+0x110>
   16450:	ldrb	r1, [r8, r9]
   16454:	ldrb	r2, [r7, r9]
   16458:	rsb	r0, r0, #8
   1645c:	eor	r1, r2, r1
   16460:	mov	r2, #255	; 0xff
   16464:	tst	r1, r2, lsl r0
   16468:	movne	r6, #0
   1646c:	b	16438 <rb_match_ip_exact+0x110>
   16470:	bl	5204 <rb_outofmemory@plt>

00016474 <rb_match_string>:
   16474:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16478:	add	fp, sp, #24
   1647c:	sub	sp, sp, #24
   16480:	sub	sp, sp, #1024	; 0x400
   16484:	mov	r5, r1
   16488:	mov	r8, r0
   1648c:	cmp	r1, #0
   16490:	beq	16550 <rb_match_string+0xdc>
   16494:	mov	r0, r5
   16498:	mov	r1, #47	; 0x2f
   1649c:	bl	4e74 <strchr@plt>
   164a0:	cmp	r0, #0
   164a4:	beq	164f0 <rb_match_string+0x7c>
   164a8:	mov	r7, r0
   164ac:	add	r0, r0, #1
   164b0:	mov	r1, #0
   164b4:	mov	r2, #10
   164b8:	mov	r9, #0
   164bc:	bl	5114 <strtol@plt>
   164c0:	sub	r4, r7, r5
   164c4:	mov	r7, sp
   164c8:	mov	r6, r0
   164cc:	mov	r1, r5
   164d0:	mov	r0, r7
   164d4:	mov	r2, r4
   164d8:	bl	50a8 <memcpy@plt>
   164dc:	sub	r0, r6, #1
   164e0:	strb	r9, [r7, r4]
   164e4:	cmp	r0, #31
   164e8:	movwhi	r6, #32
   164ec:	b	164f8 <rb_match_string+0x84>
   164f0:	mov	r6, #32
   164f4:	mov	r7, r5
   164f8:	sub	r2, fp, #48	; 0x30
   164fc:	mov	r0, #2
   16500:	mov	r1, r7
   16504:	bl	4eec <rb_inet_pton@plt>
   16508:	cmp	r0, #1
   1650c:	blt	16550 <rb_match_string+0xdc>
   16510:	mov	r0, #1
   16514:	mov	r1, #24
   16518:	mov	r4, #1
   1651c:	bl	4ea4 <calloc@plt>
   16520:	cmp	r0, #0
   16524:	beq	16648 <rb_match_string+0x1d4>
   16528:	mov	r5, r0
   1652c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16530:	cmn	r6, #1
   16534:	mov	r1, #2
   16538:	movle	r6, #128	; 0x80
   1653c:	strh	r1, [r5]
   16540:	strh	r6, [r5, #2]
   16544:	str	r4, [r5, #4]
   16548:	str	r0, [r5, #8]
   1654c:	b	16618 <rb_match_string+0x1a4>
   16550:	cmp	r5, #0
   16554:	beq	16638 <rb_match_string+0x1c4>
   16558:	mov	r0, r5
   1655c:	mov	r1, #47	; 0x2f
   16560:	bl	4e74 <strchr@plt>
   16564:	cmp	r0, #0
   16568:	beq	165b8 <rb_match_string+0x144>
   1656c:	mov	r7, r0
   16570:	add	r0, r0, #1
   16574:	mov	r1, #0
   16578:	mov	r2, #10
   1657c:	mov	r9, #0
   16580:	bl	5114 <strtol@plt>
   16584:	sub	r4, r7, r5
   16588:	mov	r7, sp
   1658c:	mov	r6, r0
   16590:	mov	r1, r5
   16594:	mov	r0, r7
   16598:	mov	r2, r4
   1659c:	bl	50a8 <memcpy@plt>
   165a0:	sub	r0, r6, #1
   165a4:	mov	r5, r7
   165a8:	strb	r9, [r7, r4]
   165ac:	cmp	r0, #127	; 0x7f
   165b0:	movwhi	r6, #128	; 0x80
   165b4:	b	165bc <rb_match_string+0x148>
   165b8:	mov	r6, #128	; 0x80
   165bc:	sub	r7, fp, #48	; 0x30
   165c0:	mov	r0, #10
   165c4:	mov	r1, r5
   165c8:	mov	r2, r7
   165cc:	bl	4eec <rb_inet_pton@plt>
   165d0:	cmp	r0, #1
   165d4:	blt	16638 <rb_match_string+0x1c4>
   165d8:	mov	r0, #1
   165dc:	mov	r1, #24
   165e0:	mov	r4, #1
   165e4:	bl	4ea4 <calloc@plt>
   165e8:	cmp	r0, #0
   165ec:	beq	16648 <rb_match_string+0x1d4>
   165f0:	cmn	r6, #1
   165f4:	vld1.64	{d16-d17}, [r7]
   165f8:	mov	r5, r0
   165fc:	movle	r6, #128	; 0x80
   16600:	strh	r6, [r0, #2]
   16604:	mov	r0, #10
   16608:	strh	r0, [r5]
   1660c:	add	r0, r5, #8
   16610:	str	r4, [r5, #4]
   16614:	vst1.32	{d16-d17}, [r0]
   16618:	mov	r0, r8
   1661c:	mov	r1, r5
   16620:	mov	r2, #1
   16624:	bl	4f64 <rb_patricia_search_best2@plt>
   16628:	mov	r4, r0
   1662c:	mov	r0, r5
   16630:	bl	4fa0 <free@plt>
   16634:	b	1663c <rb_match_string+0x1c8>
   16638:	mov	r4, #0
   1663c:	mov	r0, r4
   16640:	sub	sp, fp, #24
   16644:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16648:	bl	5204 <rb_outofmemory@plt>

0001664c <rb_match_exact_string>:
   1664c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16650:	add	fp, sp, #24
   16654:	sub	sp, sp, #24
   16658:	sub	sp, sp, #1024	; 0x400
   1665c:	mov	r5, r1
   16660:	mov	r8, r0
   16664:	cmp	r1, #0
   16668:	beq	1676c <rb_match_exact_string+0x120>
   1666c:	mov	r0, r5
   16670:	mov	r1, #47	; 0x2f
   16674:	bl	4e74 <strchr@plt>
   16678:	cmp	r0, #0
   1667c:	beq	166c8 <rb_match_exact_string+0x7c>
   16680:	mov	r7, r0
   16684:	add	r0, r0, #1
   16688:	mov	r1, #0
   1668c:	mov	r2, #10
   16690:	mov	r9, #0
   16694:	bl	5114 <strtol@plt>
   16698:	sub	r4, r7, r5
   1669c:	mov	r7, sp
   166a0:	mov	r6, r0
   166a4:	mov	r1, r5
   166a8:	mov	r0, r7
   166ac:	mov	r2, r4
   166b0:	bl	50a8 <memcpy@plt>
   166b4:	sub	r0, r6, #1
   166b8:	strb	r9, [r7, r4]
   166bc:	cmp	r0, #31
   166c0:	movwhi	r6, #32
   166c4:	b	166d0 <rb_match_exact_string+0x84>
   166c8:	mov	r6, #32
   166cc:	mov	r7, r5
   166d0:	sub	r2, fp, #48	; 0x30
   166d4:	mov	r0, #2
   166d8:	mov	r1, r7
   166dc:	bl	4eec <rb_inet_pton@plt>
   166e0:	cmp	r0, #1
   166e4:	blt	1676c <rb_match_exact_string+0x120>
   166e8:	mov	r0, #1
   166ec:	mov	r1, #24
   166f0:	mov	r4, #1
   166f4:	bl	4ea4 <calloc@plt>
   166f8:	cmp	r0, #0
   166fc:	beq	168f0 <rb_match_exact_string+0x2a4>
   16700:	ldr	r1, [fp, #-48]	; 0xffffffd0
   16704:	mov	r5, r0
   16708:	mov	r0, #2
   1670c:	cmn	r6, #1
   16710:	strh	r0, [r5]
   16714:	mov	r0, #128	; 0x80
   16718:	mov	r7, r5
   1671c:	str	r4, [r5, #4]
   16720:	movle	r6, r0
   16724:	strh	r6, [r5, #2]
   16728:	str	r1, [r7, #8]!
   1672c:	ldr	r4, [r8]
   16730:	cmp	r4, #0
   16734:	beq	168b0 <rb_match_exact_string+0x264>
   16738:	uxth	r1, r6
   1673c:	ldr	r2, [r4]
   16740:	cmp	r2, r1
   16744:	bcs	16880 <rb_match_exact_string+0x234>
   16748:	ldrb	r3, [r7, r2, lsr #3]
   1674c:	and	r2, r2, #7
   16750:	tst	r3, r0, lsr r2
   16754:	mov	r2, #12
   16758:	movweq	r2, #8
   1675c:	ldr	r4, [r4, r2]
   16760:	cmp	r4, #0
   16764:	bne	1673c <rb_match_exact_string+0xf0>
   16768:	b	168b0 <rb_match_exact_string+0x264>
   1676c:	cmp	r5, #0
   16770:	beq	16878 <rb_match_exact_string+0x22c>
   16774:	mov	r0, r5
   16778:	mov	r1, #47	; 0x2f
   1677c:	bl	4e74 <strchr@plt>
   16780:	cmp	r0, #0
   16784:	beq	167d4 <rb_match_exact_string+0x188>
   16788:	mov	r7, r0
   1678c:	add	r0, r0, #1
   16790:	mov	r1, #0
   16794:	mov	r2, #10
   16798:	mov	r9, #0
   1679c:	bl	5114 <strtol@plt>
   167a0:	sub	r4, r7, r5
   167a4:	mov	r7, sp
   167a8:	mov	r6, r0
   167ac:	mov	r1, r5
   167b0:	mov	r0, r7
   167b4:	mov	r2, r4
   167b8:	bl	50a8 <memcpy@plt>
   167bc:	sub	r0, r6, #1
   167c0:	mov	r5, r7
   167c4:	strb	r9, [r7, r4]
   167c8:	cmp	r0, #127	; 0x7f
   167cc:	movwhi	r6, #128	; 0x80
   167d0:	b	167d8 <rb_match_exact_string+0x18c>
   167d4:	mov	r6, #128	; 0x80
   167d8:	sub	r7, fp, #48	; 0x30
   167dc:	mov	r0, #10
   167e0:	mov	r1, r5
   167e4:	mov	r2, r7
   167e8:	bl	4eec <rb_inet_pton@plt>
   167ec:	cmp	r0, #1
   167f0:	blt	16878 <rb_match_exact_string+0x22c>
   167f4:	mov	r0, #1
   167f8:	mov	r1, #24
   167fc:	mov	r4, #1
   16800:	bl	4ea4 <calloc@plt>
   16804:	cmp	r0, #0
   16808:	beq	168f0 <rb_match_exact_string+0x2a4>
   1680c:	vld1.64	{d16-d17}, [r7]
   16810:	mov	r5, r0
   16814:	mov	r0, #128	; 0x80
   16818:	cmn	r6, #1
   1681c:	mov	r1, #10
   16820:	movle	r6, r0
   16824:	add	r7, r5, #8
   16828:	strh	r6, [r5, #2]
   1682c:	strh	r1, [r5]
   16830:	str	r4, [r5, #4]
   16834:	vst1.32	{d16-d17}, [r7]
   16838:	ldr	r4, [r8]
   1683c:	cmp	r4, #0
   16840:	beq	168b0 <rb_match_exact_string+0x264>
   16844:	uxth	r1, r6
   16848:	ldr	r2, [r4]
   1684c:	cmp	r2, r1
   16850:	bcs	16880 <rb_match_exact_string+0x234>
   16854:	ldrb	r3, [r7, r2, lsr #3]
   16858:	and	r2, r2, #7
   1685c:	tst	r3, r0, lsr r2
   16860:	mov	r2, #12
   16864:	movweq	r2, #8
   16868:	ldr	r4, [r4, r2]
   1686c:	cmp	r4, #0
   16870:	bne	16848 <rb_match_exact_string+0x1fc>
   16874:	b	168b0 <rb_match_exact_string+0x264>
   16878:	mov	r4, #0
   1687c:	b	168bc <rb_match_exact_string+0x270>
   16880:	bhi	168b0 <rb_match_exact_string+0x264>
   16884:	ldr	r0, [r4, #4]
   16888:	cmp	r0, #0
   1688c:	beq	168b0 <rb_match_exact_string+0x264>
   16890:	add	r8, r0, #8
   16894:	lsr	r9, r1, #3
   16898:	mov	r1, r7
   1689c:	mov	r0, r8
   168a0:	mov	r2, r9
   168a4:	bl	4d24 <memcmp@plt>
   168a8:	cmp	r0, #0
   168ac:	beq	168c8 <rb_match_exact_string+0x27c>
   168b0:	mov	r4, #0
   168b4:	mov	r0, r5
   168b8:	bl	4fa0 <free@plt>
   168bc:	mov	r0, r4
   168c0:	sub	sp, fp, #24
   168c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   168c8:	ands	r0, r6, #7
   168cc:	beq	168b4 <rb_match_exact_string+0x268>
   168d0:	ldrb	r1, [r8, r9]
   168d4:	ldrb	r2, [r7, r9]
   168d8:	rsb	r0, r0, #8
   168dc:	eor	r1, r2, r1
   168e0:	mov	r2, #255	; 0xff
   168e4:	tst	r1, r2, lsl r0
   168e8:	movne	r4, #0
   168ec:	b	168b4 <rb_match_exact_string+0x268>
   168f0:	bl	5204 <rb_outofmemory@plt>

000168f4 <rb_dictionary_create>:
   168f4:	push	{r4, r5, r6, sl, fp, lr}
   168f8:	add	fp, sp, #16
   168fc:	mov	r6, r1
   16900:	mov	r5, r0
   16904:	mov	r0, #1
   16908:	mov	r1, #40	; 0x28
   1690c:	bl	4ea4 <calloc@plt>
   16910:	cmp	r0, #0
   16914:	beq	169ac <rb_dictionary_create+0xb8>
   16918:	mov	r4, r0
   1691c:	str	r6, [r0]
   16920:	mov	r0, r5
   16924:	bl	5084 <strlen@plt>
   16928:	add	r0, r0, #1
   1692c:	bl	5228 <malloc@plt>
   16930:	cmp	r0, #0
   16934:	beq	169ac <rb_dictionary_create+0xb8>
   16938:	mov	r1, r5
   1693c:	mov	r6, r0
   16940:	bl	512c <strcpy@plt>
   16944:	str	r6, [r4, #20]
   16948:	mov	r0, #0
   1694c:	ldr	r1, [pc, #92]	; 169b0 <rb_dictionary_create+0xbc>
   16950:	ldr	r1, [pc, r1]
   16954:	str	r4, [r4, #28]
   16958:	str	r0, [r4, #32]
   1695c:	add	r0, r4, #28
   16960:	cmp	r1, #0
   16964:	str	r1, [r4, #36]	; 0x24
   16968:	beq	16978 <rb_dictionary_create+0x84>
   1696c:	add	r1, r1, #4
   16970:	str	r0, [r1]
   16974:	b	1698c <rb_dictionary_create+0x98>
   16978:	ldr	r1, [pc, #52]	; 169b4 <rb_dictionary_create+0xc0>
   1697c:	add	r1, pc, r1
   16980:	ldr	r2, [r1, #4]!
   16984:	cmp	r2, #0
   16988:	streq	r0, [r1]
   1698c:	ldr	r1, [pc, #36]	; 169b8 <rb_dictionary_create+0xc4>
   16990:	add	r1, pc, r1
   16994:	str	r0, [r1]
   16998:	ldr	r0, [r1, #8]
   1699c:	add	r0, r0, #1
   169a0:	str	r0, [r1, #8]
   169a4:	mov	r0, r4
   169a8:	pop	{r4, r5, r6, sl, fp, pc}
   169ac:	bl	5204 <rb_outofmemory@plt>
   169b0:	.word	0x00032538
   169b4:	.word	0x0003250c
   169b8:	.word	0x000324f8

000169bc <rb_dictionary_set_comparator_func>:
   169bc:	str	r1, [r0]
   169c0:	bx	lr

000169c4 <rb_dictionary_get_comparator_func>:
   169c4:	ldr	r0, [r0]
   169c8:	bx	lr

000169cc <rb_dictionary_get_linear_index>:
   169cc:	push	{r4, r5, r6, sl, fp, lr}
   169d0:	add	fp, sp, #16
   169d4:	mov	r6, r1
   169d8:	mov	r4, r0
   169dc:	bl	16c68 <rb_dictionary_retune>
   169e0:	ldr	r0, [r4, #4]
   169e4:	mvn	r5, #0
   169e8:	cmp	r0, #0
   169ec:	beq	16a54 <rb_dictionary_get_linear_index+0x88>
   169f0:	ldr	r1, [r0, #20]
   169f4:	ldr	r2, [r4]
   169f8:	mov	r0, r6
   169fc:	blx	r2
   16a00:	cmp	r0, #0
   16a04:	bne	16a54 <rb_dictionary_get_linear_index+0x88>
   16a08:	ldr	r0, [r4, #4]
   16a0c:	cmp	r0, #0
   16a10:	beq	16a54 <rb_dictionary_get_linear_index+0x88>
   16a14:	ldrb	r2, [r4, #24]
   16a18:	tst	r2, #1
   16a1c:	beq	16a50 <rb_dictionary_get_linear_index+0x84>
   16a20:	ldr	r1, [r4, #8]
   16a24:	cmp	r1, #0
   16a28:	beq	16a48 <rb_dictionary_get_linear_index+0x7c>
   16a2c:	mov	r2, #0
   16a30:	str	r2, [r1, #24]
   16a34:	add	r2, r2, #1
   16a38:	ldr	r1, [r1, #12]
   16a3c:	cmp	r1, #0
   16a40:	bne	16a30 <rb_dictionary_get_linear_index+0x64>
   16a44:	ldrb	r2, [r4, #24]
   16a48:	and	r1, r2, #254	; 0xfe
   16a4c:	strb	r1, [r4, #24]
   16a50:	ldr	r5, [r0, #24]
   16a54:	mov	r0, r5
   16a58:	pop	{r4, r5, r6, sl, fp, pc}

00016a5c <rb_dictionary_find>:
   16a5c:	push	{r4, r5, r6, sl, fp, lr}
   16a60:	add	fp, sp, #16
   16a64:	mov	r6, r1
   16a68:	mov	r4, r0
   16a6c:	bl	16c68 <rb_dictionary_retune>
   16a70:	ldr	r0, [r4, #4]
   16a74:	mov	r5, #0
   16a78:	cmp	r0, #0
   16a7c:	beq	16a98 <rb_dictionary_find+0x3c>
   16a80:	ldr	r1, [r0, #20]
   16a84:	ldr	r2, [r4]
   16a88:	mov	r0, r6
   16a8c:	blx	r2
   16a90:	cmp	r0, #0
   16a94:	ldreq	r5, [r4, #4]
   16a98:	mov	r0, r5
   16a9c:	pop	{r4, r5, r6, sl, fp, pc}

00016aa0 <rb_dictionary_destroy>:
   16aa0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16aa4:	add	fp, sp, #24
   16aa8:	ldr	r7, [r0, #8]
   16aac:	mov	r8, r0
   16ab0:	cmp	r7, #0
   16ab4:	beq	16aec <rb_dictionary_destroy+0x4c>
   16ab8:	mov	r5, r2
   16abc:	mov	r6, r1
   16ac0:	ldr	r4, [r7, #12]
   16ac4:	cmp	r6, #0
   16ac8:	beq	16ad8 <rb_dictionary_destroy+0x38>
   16acc:	mov	r0, r7
   16ad0:	mov	r1, r5
   16ad4:	blx	r6
   16ad8:	mov	r0, r7
   16adc:	bl	4fa0 <free@plt>
   16ae0:	cmp	r4, #0
   16ae4:	mov	r7, r4
   16ae8:	bne	16ac0 <rb_dictionary_destroy+0x20>
   16aec:	ldr	r0, [r8, #36]	; 0x24
   16af0:	ldr	r1, [r8, #32]
   16af4:	cmp	r0, #0
   16af8:	beq	16b08 <rb_dictionary_destroy+0x68>
   16afc:	str	r1, [r0, #4]
   16b00:	ldr	r1, [r8, #32]
   16b04:	b	16b14 <rb_dictionary_destroy+0x74>
   16b08:	ldr	r2, [pc, #80]	; 16b60 <rb_dictionary_destroy+0xc0>
   16b0c:	add	r2, pc, r2
   16b10:	str	r1, [r2, #4]
   16b14:	ldr	r2, [pc, #72]	; 16b64 <rb_dictionary_destroy+0xc4>
   16b18:	cmp	r1, #0
   16b1c:	add	r2, pc, r2
   16b20:	mov	r3, r2
   16b24:	addne	r3, r1, #8
   16b28:	str	r0, [r3]
   16b2c:	mov	r0, #0
   16b30:	str	r0, [r8, #32]
   16b34:	str	r0, [r8, #36]	; 0x24
   16b38:	ldr	r0, [r2, #8]
   16b3c:	sub	r0, r0, #1
   16b40:	str	r0, [r2, #8]
   16b44:	ldr	r0, [r8, #20]
   16b48:	cmp	r0, #0
   16b4c:	beq	16b54 <rb_dictionary_destroy+0xb4>
   16b50:	bl	4fa0 <free@plt>
   16b54:	mov	r0, r8
   16b58:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   16b5c:	b	4fa0 <free@plt>
   16b60:	.word	0x0003237c
   16b64:	.word	0x0003236c

00016b68 <rb_dictionary_foreach>:
   16b68:	push	{r4, r5, r6, sl, fp, lr}
   16b6c:	add	fp, sp, #16
   16b70:	ldr	r0, [r0, #8]
   16b74:	cmp	r0, #0
   16b78:	popeq	{r4, r5, r6, sl, fp, pc}
   16b7c:	mov	r4, r2
   16b80:	mov	r5, r1
   16b84:	ldr	r6, [r0, #12]
   16b88:	cmp	r5, #0
   16b8c:	beq	16b98 <rb_dictionary_foreach+0x30>
   16b90:	mov	r1, r4
   16b94:	blx	r5
   16b98:	cmp	r6, #0
   16b9c:	mov	r0, r6
   16ba0:	bne	16b84 <rb_dictionary_foreach+0x1c>
   16ba4:	pop	{r4, r5, r6, sl, fp, pc}

00016ba8 <rb_dictionary_search>:
   16ba8:	push	{r4, r5, r6, sl, fp, lr}
   16bac:	add	fp, sp, #16
   16bb0:	ldr	r0, [r0, #8]
   16bb4:	cmp	r0, #0
   16bb8:	beq	16bec <rb_dictionary_search+0x44>
   16bbc:	mov	r4, r2
   16bc0:	mov	r5, r1
   16bc4:	ldr	r6, [r0, #12]
   16bc8:	cmp	r5, #0
   16bcc:	beq	16be0 <rb_dictionary_search+0x38>
   16bd0:	mov	r1, r4
   16bd4:	blx	r5
   16bd8:	cmp	r0, #0
   16bdc:	popne	{r4, r5, r6, sl, fp, pc}
   16be0:	cmp	r6, #0
   16be4:	mov	r0, r6
   16be8:	bne	16bc4 <rb_dictionary_search+0x1c>
   16bec:	mov	r0, #0
   16bf0:	pop	{r4, r5, r6, sl, fp, pc}

00016bf4 <rb_dictionary_foreach_start>:
   16bf4:	mov	r2, #0
   16bf8:	str	r2, [r1, #4]
   16bfc:	ldr	r0, [r0, #8]
   16c00:	cmp	r0, #0
   16c04:	str	r0, [r1]
   16c08:	strne	r0, [r1]
   16c0c:	ldrne	r0, [r0, #12]
   16c10:	strne	r0, [r1, #4]
   16c14:	bx	lr

00016c18 <rb_dictionary_foreach_next>:
   16c18:	mov	r2, r0
   16c1c:	ldr	r0, [r1]
   16c20:	cmp	r0, #0
   16c24:	beq	16c40 <rb_dictionary_foreach_next+0x28>
   16c28:	ldr	r0, [r1, #4]
   16c2c:	str	r0, [r1]
   16c30:	cmp	r0, #0
   16c34:	ldrne	r0, [r0, #12]
   16c38:	strne	r0, [r1, #4]
   16c3c:	bx	lr
   16c40:	ldr	r0, [pc, #8]	; 16c50 <rb_dictionary_foreach_next+0x38>
   16c44:	mov	r1, r2
   16c48:	add	r0, pc, r0
   16c4c:	b	51a4 <rb_lib_log@plt>
   16c50:	.word	0x000031c3

00016c54 <rb_dictionary_foreach_cur>:
   16c54:	ldr	r0, [r1]
   16c58:	cmp	r0, #0
   16c5c:	ldrne	r0, [r0, #16]
   16c60:	moveq	r0, #0
   16c64:	bx	lr

00016c68 <rb_dictionary_retune>:
   16c68:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16c6c:	add	fp, sp, #24
   16c70:	sub	sp, sp, #32
   16c74:	ldr	r6, [r0, #4]
   16c78:	cmp	r6, #0
   16c7c:	beq	16dc4 <rb_dictionary_retune+0x15c>
   16c80:	mov	r4, r0
   16c84:	mov	r0, #0
   16c88:	mov	r5, r1
   16c8c:	str	r0, [sp, #4]
   16c90:	str	r0, [sp, #8]
   16c94:	mov	r0, r5
   16c98:	ldr	r1, [r6, #20]
   16c9c:	ldr	r2, [r4]
   16ca0:	blx	r2
   16ca4:	add	r8, sp, #4
   16ca8:	cmp	r0, #0
   16cac:	beq	16d88 <rb_dictionary_retune+0x120>
   16cb0:	mov	r9, r8
   16cb4:	cmn	r0, #1
   16cb8:	ble	16d08 <rb_dictionary_retune+0xa0>
   16cbc:	mov	r7, r6
   16cc0:	ldr	r0, [r7, #4]!
   16cc4:	cmp	r0, #0
   16cc8:	beq	16d9c <rb_dictionary_retune+0x134>
   16ccc:	ldr	r1, [r0, #20]
   16cd0:	ldr	r2, [r4]
   16cd4:	mov	r0, r5
   16cd8:	blx	r2
   16cdc:	cmp	r0, #1
   16ce0:	blt	16d34 <rb_dictionary_retune+0xcc>
   16ce4:	ldr	r0, [r6, #4]
   16ce8:	ldr	r1, [r0]
   16cec:	mov	r7, r0
   16cf0:	str	r1, [r6, #4]
   16cf4:	str	r6, [r7], #4
   16cf8:	ldr	r1, [r7]
   16cfc:	cmp	r1, #0
   16d00:	bne	16d38 <rb_dictionary_retune+0xd0>
   16d04:	b	16d90 <rb_dictionary_retune+0x128>
   16d08:	ldr	r0, [r6]
   16d0c:	cmp	r0, #0
   16d10:	beq	16d9c <rb_dictionary_retune+0x134>
   16d14:	ldr	r1, [r0, #20]
   16d18:	ldr	r2, [r4]
   16d1c:	mov	r0, r5
   16d20:	blx	r2
   16d24:	cmn	r0, #1
   16d28:	ble	16d44 <rb_dictionary_retune+0xdc>
   16d2c:	mov	r7, r6
   16d30:	b	16d60 <rb_dictionary_retune+0xf8>
   16d34:	mov	r0, r6
   16d38:	str	r0, [r9, #4]
   16d3c:	mov	r9, r0
   16d40:	b	16d68 <rb_dictionary_retune+0x100>
   16d44:	ldr	r7, [r6]
   16d48:	ldr	r0, [r7, #4]
   16d4c:	str	r0, [r6]
   16d50:	str	r6, [r7, #4]
   16d54:	ldr	r0, [r7]
   16d58:	cmp	r0, #0
   16d5c:	beq	16d98 <rb_dictionary_retune+0x130>
   16d60:	str	r7, [r8]
   16d64:	mov	r8, r7
   16d68:	ldr	r6, [r7]
   16d6c:	ldr	r2, [r4]
   16d70:	mov	r0, r5
   16d74:	ldr	r1, [r6, #20]
   16d78:	blx	r2
   16d7c:	cmp	r0, #0
   16d80:	bne	16cb4 <rb_dictionary_retune+0x4c>
   16d84:	b	16d9c <rb_dictionary_retune+0x134>
   16d88:	add	r0, r8, #4
   16d8c:	b	16da0 <rb_dictionary_retune+0x138>
   16d90:	mov	r6, r0
   16d94:	b	16d9c <rb_dictionary_retune+0x134>
   16d98:	mov	r6, r7
   16d9c:	add	r0, r9, #4
   16da0:	ldr	r1, [r6]
   16da4:	str	r1, [r0]
   16da8:	ldr	r0, [r6, #4]
   16dac:	str	r0, [r8]
   16db0:	ldr	r0, [sp, #8]
   16db4:	str	r0, [r6]
   16db8:	ldr	r0, [sp, #4]
   16dbc:	str	r0, [r6, #4]
   16dc0:	str	r6, [r4, #4]
   16dc4:	sub	sp, fp, #24
   16dc8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00016dcc <rb_dictionary_add>:
   16dcc:	push	{r4, r5, r6, r7, fp, lr}
   16dd0:	add	fp, sp, #16
   16dd4:	mov	r6, r1
   16dd8:	mov	r5, r0
   16ddc:	mov	r0, #1
   16de0:	mov	r1, #28
   16de4:	mov	r7, r2
   16de8:	bl	4ea4 <calloc@plt>
   16dec:	cmp	r0, #0
   16df0:	beq	16f20 <rb_dictionary_add+0x154>
   16df4:	str	r7, [r0, #16]
   16df8:	str	r6, [r0, #20]
   16dfc:	mov	r4, r0
   16e00:	ldrb	r0, [r5, #24]
   16e04:	orr	r0, r0, #1
   16e08:	strb	r0, [r5, #24]
   16e0c:	ldr	r1, [r5, #16]
   16e10:	ldr	r0, [r5, #4]
   16e14:	add	r1, r1, #1
   16e18:	cmp	r0, #0
   16e1c:	str	r1, [r5, #16]
   16e20:	beq	16e8c <rb_dictionary_add+0xc0>
   16e24:	mov	r0, r5
   16e28:	mov	r1, r6
   16e2c:	bl	16c68 <rb_dictionary_retune>
   16e30:	ldr	r1, [r5, #4]
   16e34:	ldr	r0, [r4, #20]
   16e38:	ldr	r2, [r5]
   16e3c:	ldr	r1, [r1, #20]
   16e40:	blx	r2
   16e44:	cmn	r0, #1
   16e48:	ble	16ea8 <rb_dictionary_add+0xdc>
   16e4c:	cmp	r0, #0
   16e50:	beq	16eec <rb_dictionary_add+0x120>
   16e54:	ldr	r0, [r5, #4]
   16e58:	ldr	r1, [r0, #4]
   16e5c:	stm	r4, {r0, r1}
   16e60:	mov	r1, #0
   16e64:	str	r1, [r0, #4]
   16e68:	ldr	r1, [r0, #12]
   16e6c:	add	r2, r1, #8
   16e70:	cmp	r1, #0
   16e74:	addeq	r2, r5, #12
   16e78:	str	r4, [r2]
   16e7c:	str	r0, [r4, #8]
   16e80:	str	r1, [r4, #12]
   16e84:	str	r4, [r0, #12]
   16e88:	b	16ee0 <rb_dictionary_add+0x114>
   16e8c:	vmov.i32	q8, #0	; 0x00000000
   16e90:	mov	r0, r4
   16e94:	vst1.32	{d16-d17}, [r4]
   16e98:	str	r4, [r5, #4]
   16e9c:	str	r4, [r5, #8]
   16ea0:	str	r4, [r5, #12]
   16ea4:	pop	{r4, r5, r6, r7, fp, pc}
   16ea8:	ldr	r0, [r5, #4]
   16eac:	ldr	r1, [r0]
   16eb0:	str	r0, [r4, #4]
   16eb4:	str	r1, [r4]
   16eb8:	mov	r1, #0
   16ebc:	str	r1, [r0]
   16ec0:	ldr	r1, [r0, #8]
   16ec4:	add	r2, r1, #12
   16ec8:	cmp	r1, #0
   16ecc:	addeq	r2, r5, #8
   16ed0:	str	r4, [r2]
   16ed4:	str	r0, [r4, #12]
   16ed8:	str	r1, [r4, #8]
   16edc:	str	r4, [r0, #8]
   16ee0:	mov	r0, r4
   16ee4:	str	r4, [r5, #4]
   16ee8:	pop	{r4, r5, r6, r7, fp, pc}
   16eec:	ldr	r0, [r5, #4]
   16ef0:	ldr	r1, [r4, #20]
   16ef4:	str	r1, [r0, #20]
   16ef8:	ldr	r1, [r4, #16]
   16efc:	str	r1, [r0, #16]
   16f00:	ldr	r0, [r5, #16]
   16f04:	sub	r0, r0, #1
   16f08:	str	r0, [r5, #16]
   16f0c:	mov	r0, r4
   16f10:	bl	4fa0 <free@plt>
   16f14:	ldr	r4, [r5, #4]
   16f18:	mov	r0, r4
   16f1c:	pop	{r4, r5, r6, r7, fp, pc}
   16f20:	bl	5204 <rb_outofmemory@plt>

00016f24 <rb_dictionary_delete>:
   16f24:	push	{r4, r5, r6, sl, fp, lr}
   16f28:	add	fp, sp, #16
   16f2c:	mov	r6, r1
   16f30:	mov	r5, r0
   16f34:	bl	16c68 <rb_dictionary_retune>
   16f38:	ldr	r0, [r5, #4]
   16f3c:	mov	r4, #0
   16f40:	cmp	r0, #0
   16f44:	beq	17034 <rb_dictionary_delete+0x110>
   16f48:	ldr	r1, [r0, #20]
   16f4c:	ldr	r2, [r5]
   16f50:	mov	r0, r6
   16f54:	blx	r2
   16f58:	cmp	r0, #0
   16f5c:	bne	17034 <rb_dictionary_delete+0x110>
   16f60:	ldr	r0, [r5, #4]
   16f64:	cmp	r0, #0
   16f68:	beq	17034 <rb_dictionary_delete+0x110>
   16f6c:	ldrb	r1, [r5, #24]
   16f70:	ldr	r4, [r0, #16]
   16f74:	orr	r1, r1, #1
   16f78:	strb	r1, [r5, #24]
   16f7c:	ldr	r3, [r0]
   16f80:	ldr	r1, [r0, #4]
   16f84:	cmp	r3, #0
   16f88:	beq	16fd4 <rb_dictionary_delete+0xb0>
   16f8c:	cmp	r1, #0
   16f90:	beq	16fdc <rb_dictionary_delete+0xb8>
   16f94:	ldr	r2, [r0, #12]
   16f98:	cmp	r2, r1
   16f9c:	beq	16fe4 <rb_dictionary_delete+0xc0>
   16fa0:	mov	r3, r1
   16fa4:	mov	r6, r3
   16fa8:	ldr	r3, [r3]
   16fac:	cmp	r3, #0
   16fb0:	cmpne	r3, r2
   16fb4:	bne	16fa4 <rb_dictionary_delete+0x80>
   16fb8:	ldr	r3, [r2, #4]
   16fbc:	str	r3, [r6]
   16fc0:	str	r2, [r5, #4]
   16fc4:	ldr	r3, [r0]
   16fc8:	str	r3, [r2]
   16fcc:	str	r1, [r2, #4]
   16fd0:	b	16fec <rb_dictionary_delete+0xc8>
   16fd4:	str	r1, [r5, #4]
   16fd8:	b	16fec <rb_dictionary_delete+0xc8>
   16fdc:	str	r3, [r5, #4]
   16fe0:	b	16fec <rb_dictionary_delete+0xc8>
   16fe4:	str	r1, [r5, #4]
   16fe8:	str	r3, [r1]
   16fec:	ldr	r1, [r0, #8]
   16ff0:	cmp	r1, #0
   16ff4:	ldrne	r2, [r0, #12]
   16ff8:	strne	r2, [r1, #12]
   16ffc:	ldr	r2, [r5, #8]
   17000:	cmp	r2, r0
   17004:	ldr	r2, [r0, #12]
   17008:	streq	r2, [r5, #8]
   1700c:	cmp	r2, #0
   17010:	strne	r1, [r2, #8]
   17014:	ldr	r1, [r5, #12]
   17018:	cmp	r1, r0
   1701c:	ldreq	r1, [r0, #8]
   17020:	streq	r1, [r5, #12]
   17024:	ldr	r1, [r5, #16]
   17028:	sub	r1, r1, #1
   1702c:	str	r1, [r5, #16]
   17030:	bl	4fa0 <free@plt>
   17034:	mov	r0, r4
   17038:	pop	{r4, r5, r6, sl, fp, pc}

0001703c <rb_dictionary_retrieve>:
   1703c:	push	{r4, r5, r6, sl, fp, lr}
   17040:	add	fp, sp, #16
   17044:	mov	r6, r1
   17048:	mov	r5, r0
   1704c:	bl	16c68 <rb_dictionary_retune>
   17050:	ldr	r0, [r5, #4]
   17054:	mov	r4, #0
   17058:	cmp	r0, #0
   1705c:	beq	17078 <rb_dictionary_retrieve+0x3c>
   17060:	ldr	r1, [r0, #20]
   17064:	ldr	r2, [r5]
   17068:	mov	r0, r6
   1706c:	blx	r2
   17070:	cmp	r0, #0
   17074:	beq	17080 <rb_dictionary_retrieve+0x44>
   17078:	mov	r0, r4
   1707c:	pop	{r4, r5, r6, sl, fp, pc}
   17080:	ldr	r0, [r5, #4]
   17084:	cmp	r0, #0
   17088:	ldrne	r4, [r0, #16]
   1708c:	mov	r0, r4
   17090:	pop	{r4, r5, r6, sl, fp, pc}

00017094 <rb_dictionary_size>:
   17094:	ldr	r0, [r0, #16]
   17098:	bx	lr

0001709c <rb_dictionary_stats>:
   1709c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   170a0:	add	fp, sp, #24
   170a4:	sub	sp, sp, #280	; 0x118
   170a8:	mov	r6, r0
   170ac:	ldr	r0, [r0, #16]
   170b0:	mov	r5, r2
   170b4:	mov	r7, r1
   170b8:	cmp	r0, #0
   170bc:	beq	17114 <rb_dictionary_stats+0x78>
   170c0:	mov	r0, #0
   170c4:	add	r2, sp, #20
   170c8:	mov	r1, #0
   170cc:	str	r0, [sp, #20]
   170d0:	ldr	r0, [r6, #4]
   170d4:	bl	17178 <stats_recurse>
   170d8:	ldr	r1, [r6, #16]
   170dc:	ldr	r3, [r6, #20]
   170e0:	ldr	r2, [sp, #20]
   170e4:	ldr	r6, [pc, #120]	; 17164 <rb_dictionary_stats+0xc8>
   170e8:	str	r0, [sp, #8]
   170ec:	udiv	r4, r0, r1
   170f0:	add	r6, pc, r6
   170f4:	str	r1, [sp, #4]
   170f8:	str	r2, [sp, #16]
   170fc:	add	r0, sp, #24
   17100:	str	r6, [sp]
   17104:	str	r4, [sp, #12]
   17108:	ldr	r2, [pc, #88]	; 17168 <rb_dictionary_stats+0xcc>
   1710c:	add	r2, pc, r2
   17110:	b	17148 <rb_dictionary_stats+0xac>
   17114:	ldr	r3, [r6, #20]
   17118:	ldr	r0, [pc, #76]	; 1716c <rb_dictionary_stats+0xd0>
   1711c:	ldr	r1, [pc, #76]	; 17170 <rb_dictionary_stats+0xd4>
   17120:	add	r0, pc, r0
   17124:	add	r1, pc, r1
   17128:	str	r1, [sp]
   1712c:	str	r0, [sp, #4]
   17130:	str	r0, [sp, #8]
   17134:	str	r0, [sp, #12]
   17138:	str	r0, [sp, #16]
   1713c:	add	r0, sp, #24
   17140:	ldr	r2, [pc, #44]	; 17174 <rb_dictionary_stats+0xd8>
   17144:	add	r2, pc, r2
   17148:	mov	r1, #256	; 0x100
   1714c:	bl	5408 <snprintf@plt>
   17150:	add	r0, sp, #24
   17154:	mov	r1, r5
   17158:	blx	r7
   1715c:	sub	sp, fp, #24
   17160:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17164:	.word	0x00002d90
   17168:	.word	0x00002d50
   1716c:	.word	0x00001f37
   17170:	.word	0x00002d5c
   17174:	.word	0x00002d41

00017178 <stats_recurse>:
   17178:	push	{r4, r5, r6, r7, fp, lr}
   1717c:	add	fp, sp, #16
   17180:	mov	r6, r0
   17184:	ldr	r0, [r2]
   17188:	mov	r5, r2
   1718c:	mov	r4, r1
   17190:	cmp	r0, r1
   17194:	strlt	r4, [r5]
   17198:	cmp	r6, #0
   1719c:	beq	171e4 <stats_recurse+0x6c>
   171a0:	ldr	r0, [r6]
   171a4:	mov	r7, r4
   171a8:	cmp	r0, #0
   171ac:	beq	171c0 <stats_recurse+0x48>
   171b0:	add	r1, r4, #1
   171b4:	mov	r2, r5
   171b8:	bl	17178 <stats_recurse>
   171bc:	add	r7, r0, r4
   171c0:	ldr	r0, [r6, #4]
   171c4:	cmp	r0, #0
   171c8:	beq	171e0 <stats_recurse+0x68>
   171cc:	add	r1, r4, #1
   171d0:	mov	r2, r5
   171d4:	bl	17178 <stats_recurse>
   171d8:	add	r0, r0, r7
   171dc:	pop	{r4, r5, r6, r7, fp, pc}
   171e0:	mov	r4, r7
   171e4:	mov	r0, r4
   171e8:	pop	{r4, r5, r6, r7, fp, pc}

000171ec <rb_dictionary_stats_walk>:
   171ec:	push	{r4, r5, r6, sl, fp, lr}
   171f0:	add	fp, sp, #16
   171f4:	ldr	r6, [pc, #48]	; 1722c <rb_dictionary_stats_walk+0x40>
   171f8:	ldr	r6, [pc, r6]
   171fc:	cmp	r6, #0
   17200:	popeq	{r4, r5, r6, sl, fp, pc}
   17204:	mov	r4, r1
   17208:	mov	r5, r0
   1720c:	ldr	r0, [r6]
   17210:	mov	r1, r5
   17214:	mov	r2, r4
   17218:	bl	521c <rb_dictionary_stats@plt>
   1721c:	ldr	r6, [r6, #8]
   17220:	cmp	r6, #0
   17224:	bne	1720c <rb_dictionary_stats_walk+0x20>
   17228:	pop	{r4, r5, r6, sl, fp, pc}
   1722c:	.word	0x00031c90

00017230 <rb_radixtree_create>:
   17230:	push	{r4, r5, r6, sl, fp, lr}
   17234:	add	fp, sp, #16
   17238:	mov	r6, r1
   1723c:	mov	r5, r0
   17240:	mov	r0, #1
   17244:	mov	r1, #28
   17248:	bl	4ea4 <calloc@plt>
   1724c:	cmp	r0, #0
   17250:	beq	172e4 <rb_radixtree_create+0xb4>
   17254:	mov	r4, r0
   17258:	str	r6, [r0]
   1725c:	mov	r0, r5
   17260:	bl	5084 <strlen@plt>
   17264:	add	r0, r0, #1
   17268:	bl	5228 <malloc@plt>
   1726c:	cmp	r0, #0
   17270:	beq	172e4 <rb_radixtree_create+0xb4>
   17274:	mov	r1, r5
   17278:	mov	r6, r0
   1727c:	bl	512c <strcpy@plt>
   17280:	mov	r1, #0
   17284:	str	r1, [r4, #4]
   17288:	ldr	r0, [pc, #88]	; 172e8 <rb_radixtree_create+0xb8>
   1728c:	ldr	r0, [pc, r0]
   17290:	str	r6, [r4, #12]
   17294:	str	r4, [r4, #16]
   17298:	str	r1, [r4, #20]
   1729c:	add	r1, r4, #16
   172a0:	ldr	r2, [r0]
   172a4:	cmp	r2, #0
   172a8:	str	r2, [r4, #24]
   172ac:	beq	172bc <rb_radixtree_create+0x8c>
   172b0:	add	r2, r2, #4
   172b4:	str	r1, [r2]
   172b8:	b	172cc <rb_radixtree_create+0x9c>
   172bc:	mov	r2, r0
   172c0:	ldr	r3, [r2, #4]!
   172c4:	cmp	r3, #0
   172c8:	streq	r1, [r2]
   172cc:	str	r1, [r0]
   172d0:	ldr	r1, [r0, #8]
   172d4:	add	r1, r1, #1
   172d8:	str	r1, [r0, #8]
   172dc:	mov	r0, r4
   172e0:	pop	{r4, r5, r6, sl, fp, pc}
   172e4:	bl	5204 <rb_outofmemory@plt>
   172e8:	.word	0x0001412c

000172ec <rb_radixtree_destroy>:
   172ec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   172f0:	add	fp, sp, #24
   172f4:	mov	r4, r0
   172f8:	cmp	r0, #0
   172fc:	ldrne	r0, [r4, #4]
   17300:	cmpne	r0, #0
   17304:	beq	17500 <rb_radixtree_destroy+0x214>
   17308:	mov	r8, r2
   1730c:	mov	r9, r1
   17310:	bl	1798c <first_leaf>
   17314:	mov	r6, r0
   17318:	cmp	r0, #0
   1731c:	beq	17334 <rb_radixtree_destroy+0x48>
   17320:	ldr	r0, [r6, #12]
   17324:	cmp	r0, #0
   17328:	beq	173c0 <rb_radixtree_destroy+0xd4>
   1732c:	ldrb	r1, [r6, #16]
   17330:	b	1734c <rb_radixtree_destroy+0x60>
   17334:	mov	r7, r6
   17338:	cmp	r4, #0
   1733c:	bne	173f4 <rb_radixtree_destroy+0x108>
   17340:	b	17500 <rb_radixtree_destroy+0x214>
   17344:	mov	r1, #0
   17348:	mov	r0, r7
   1734c:	mov	r2, r1
   17350:	add	r1, r0, r2, lsl #2
   17354:	cmp	r2, #14
   17358:	ldr	r7, [r1, #4]
   1735c:	add	r1, r2, #1
   17360:	bgt	17370 <rb_radixtree_destroy+0x84>
   17364:	cmp	r7, #0
   17368:	mov	r2, r1
   1736c:	beq	17350 <rb_radixtree_destroy+0x64>
   17370:	cmp	r7, #0
   17374:	beq	1738c <rb_radixtree_destroy+0xa0>
   17378:	ldr	r2, [r7]
   1737c:	cmn	r2, #1
   17380:	bne	17344 <rb_radixtree_destroy+0x58>
   17384:	cmp	r7, r6
   17388:	bne	173d0 <rb_radixtree_destroy+0xe4>
   1738c:	sub	r2, r1, #1
   17390:	cmp	r2, #15
   17394:	blt	1734c <rb_radixtree_destroy+0x60>
   17398:	ldr	r2, [r0, #68]	; 0x44
   1739c:	cmp	r2, #0
   173a0:	beq	173c0 <rb_radixtree_destroy+0xd4>
   173a4:	ldrb	r1, [r0, #72]	; 0x48
   173a8:	mov	r0, r2
   173ac:	cmp	r1, #14
   173b0:	bhi	17398 <rb_radixtree_destroy+0xac>
   173b4:	add	r1, r1, #1
   173b8:	mov	r0, r2
   173bc:	b	1734c <rb_radixtree_destroy+0x60>
   173c0:	mov	r7, #0
   173c4:	cmp	r4, #0
   173c8:	bne	173f4 <rb_radixtree_destroy+0x108>
   173cc:	b	17500 <rb_radixtree_destroy+0x214>
   173d0:	ldr	r1, [r6, #8]
   173d4:	ldr	r0, [r7, #8]
   173d8:	bl	5534 <strcmp@plt>
   173dc:	cmp	r0, #0
   173e0:	movwlt	r7, #0
   173e4:	cmp	r4, #0
   173e8:	bne	173f4 <rb_radixtree_destroy+0x108>
   173ec:	b	17500 <rb_radixtree_destroy+0x214>
   173f0:	mov	r7, #0
   173f4:	cmp	r6, #0
   173f8:	ldrne	r0, [r6, #4]
   173fc:	movne	r5, r6
   17400:	cmpne	r0, #0
   17404:	beq	17500 <rb_radixtree_destroy+0x214>
   17408:	mov	r6, r7
   1740c:	cmp	r9, #0
   17410:	beq	17424 <rb_radixtree_destroy+0x138>
   17414:	ldr	r1, [r5, #4]
   17418:	ldr	r0, [r5, #8]
   1741c:	mov	r2, r8
   17420:	blx	r9
   17424:	ldr	r1, [r5, #8]
   17428:	mov	r0, r4
   1742c:	mov	r2, #0
   17430:	bl	53cc <rb_radixtree_elem_find@plt>
   17434:	cmp	r0, #0
   17438:	beq	17448 <rb_radixtree_destroy+0x15c>
   1743c:	mov	r1, r0
   17440:	mov	r0, r4
   17444:	bl	4c94 <rb_radixtree_elem_delete@plt>
   17448:	cmp	r6, #0
   1744c:	beq	17500 <rb_radixtree_destroy+0x214>
   17450:	ldr	r0, [r6, #12]
   17454:	cmp	r0, #0
   17458:	beq	173f0 <rb_radixtree_destroy+0x104>
   1745c:	ldrb	r1, [r6, #16]
   17460:	b	1746c <rb_radixtree_destroy+0x180>
   17464:	mov	r1, #0
   17468:	mov	r0, r7
   1746c:	mov	r2, r1
   17470:	add	r1, r0, r2, lsl #2
   17474:	cmp	r2, #14
   17478:	ldr	r7, [r1, #4]
   1747c:	add	r1, r2, #1
   17480:	bgt	17490 <rb_radixtree_destroy+0x1a4>
   17484:	cmp	r7, #0
   17488:	mov	r2, r1
   1748c:	beq	17470 <rb_radixtree_destroy+0x184>
   17490:	cmp	r7, #0
   17494:	beq	174ac <rb_radixtree_destroy+0x1c0>
   17498:	ldr	r2, [r7]
   1749c:	cmn	r2, #1
   174a0:	bne	17464 <rb_radixtree_destroy+0x178>
   174a4:	cmp	r7, r6
   174a8:	bne	174e0 <rb_radixtree_destroy+0x1f4>
   174ac:	sub	r2, r1, #1
   174b0:	cmp	r2, #15
   174b4:	blt	1746c <rb_radixtree_destroy+0x180>
   174b8:	ldr	r2, [r0, #68]	; 0x44
   174bc:	cmp	r2, #0
   174c0:	beq	174f8 <rb_radixtree_destroy+0x20c>
   174c4:	ldrb	r1, [r0, #72]	; 0x48
   174c8:	mov	r0, r2
   174cc:	cmp	r1, #14
   174d0:	bhi	174b8 <rb_radixtree_destroy+0x1cc>
   174d4:	add	r1, r1, #1
   174d8:	mov	r0, r2
   174dc:	b	1746c <rb_radixtree_destroy+0x180>
   174e0:	ldr	r1, [r6, #8]
   174e4:	ldr	r0, [r7, #8]
   174e8:	bl	5534 <strcmp@plt>
   174ec:	cmp	r0, #0
   174f0:	movwlt	r7, #0
   174f4:	b	173f4 <rb_radixtree_destroy+0x108>
   174f8:	mov	r7, #0
   174fc:	b	173f4 <rb_radixtree_destroy+0x108>
   17500:	ldr	r0, [r4, #24]
   17504:	ldr	r1, [r4, #20]
   17508:	cmp	r0, #0
   1750c:	beq	1751c <rb_radixtree_destroy+0x230>
   17510:	str	r1, [r0, #4]
   17514:	ldr	r1, [r4, #20]
   17518:	b	17528 <rb_radixtree_destroy+0x23c>
   1751c:	ldr	r2, [pc, #80]	; 17574 <rb_radixtree_destroy+0x288>
   17520:	ldr	r2, [pc, r2]
   17524:	str	r1, [r2, #4]
   17528:	ldr	r2, [pc, #72]	; 17578 <rb_radixtree_destroy+0x28c>
   1752c:	cmp	r1, #0
   17530:	ldr	r2, [pc, r2]
   17534:	mov	r3, r2
   17538:	addne	r3, r1, #8
   1753c:	str	r0, [r3]
   17540:	mov	r0, #0
   17544:	str	r0, [r4, #20]
   17548:	str	r0, [r4, #24]
   1754c:	ldr	r0, [r2, #8]
   17550:	sub	r0, r0, #1
   17554:	str	r0, [r2, #8]
   17558:	ldr	r0, [r4, #12]
   1755c:	cmp	r0, #0
   17560:	beq	17568 <rb_radixtree_destroy+0x27c>
   17564:	bl	4fa0 <free@plt>
   17568:	mov	r0, r4
   1756c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   17570:	b	4fa0 <free@plt>
   17574:	.word	0x00013e98
   17578:	.word	0x00013e88

0001757c <rb_radixtree_foreach_start>:
   1757c:	push	{r4, r5, fp, lr}
   17580:	add	fp, sp, #8
   17584:	cmp	r0, #0
   17588:	beq	17670 <rb_radixtree_foreach_start+0xf4>
   1758c:	ldr	r0, [r0, #4]
   17590:	mov	r4, r1
   17594:	cmp	r0, #0
   17598:	beq	175c8 <rb_radixtree_foreach_start+0x4c>
   1759c:	bl	1798c <first_leaf>
   175a0:	cmp	r0, #0
   175a4:	str	r0, [r4, #8]
   175a8:	str	r0, [r4, #12]
   175ac:	popeq	{r4, r5, fp, pc}
   175b0:	str	r0, [r4, #8]
   175b4:	ldr	r1, [r0, #12]
   175b8:	cmp	r1, #0
   175bc:	beq	17668 <rb_radixtree_foreach_start+0xec>
   175c0:	ldrb	r2, [r0, #16]
   175c4:	b	175dc <rb_radixtree_foreach_start+0x60>
   175c8:	mov	r0, #0
   175cc:	str	r0, [r4, #8]
   175d0:	b	1766c <rb_radixtree_foreach_start+0xf0>
   175d4:	mov	r2, #0
   175d8:	mov	r1, r5
   175dc:	mov	r3, r2
   175e0:	add	r2, r1, r3, lsl #2
   175e4:	cmp	r3, #14
   175e8:	ldr	r5, [r2, #4]
   175ec:	add	r2, r3, #1
   175f0:	bgt	17600 <rb_radixtree_foreach_start+0x84>
   175f4:	cmp	r5, #0
   175f8:	mov	r3, r2
   175fc:	beq	175e0 <rb_radixtree_foreach_start+0x64>
   17600:	cmp	r5, #0
   17604:	beq	1761c <rb_radixtree_foreach_start+0xa0>
   17608:	ldr	r3, [r5]
   1760c:	cmn	r3, #1
   17610:	bne	175d4 <rb_radixtree_foreach_start+0x58>
   17614:	cmp	r5, r0
   17618:	bne	17650 <rb_radixtree_foreach_start+0xd4>
   1761c:	sub	r3, r2, #1
   17620:	cmp	r3, #15
   17624:	blt	175dc <rb_radixtree_foreach_start+0x60>
   17628:	ldr	r3, [r1, #68]	; 0x44
   1762c:	cmp	r3, #0
   17630:	beq	17668 <rb_radixtree_foreach_start+0xec>
   17634:	ldrb	r2, [r1, #72]	; 0x48
   17638:	mov	r1, r3
   1763c:	cmp	r2, #14
   17640:	bhi	17628 <rb_radixtree_foreach_start+0xac>
   17644:	add	r2, r2, #1
   17648:	mov	r1, r3
   1764c:	b	175dc <rb_radixtree_foreach_start+0x60>
   17650:	ldr	r1, [r0, #8]
   17654:	ldr	r0, [r5, #8]
   17658:	bl	5534 <strcmp@plt>
   1765c:	cmn	r0, #1
   17660:	strgt	r5, [r4, #12]
   17664:	popgt	{r4, r5, fp, pc}
   17668:	mov	r0, #0
   1766c:	str	r0, [r4, #12]
   17670:	pop	{r4, r5, fp, pc}

00017674 <rb_radixtree_foreach_cur>:
   17674:	mov	r2, r0
   17678:	mov	r0, #0
   1767c:	cmp	r2, #0
   17680:	ldrne	r1, [r1, #8]
   17684:	cmpne	r1, #0
   17688:	ldrne	r0, [r1, #4]
   1768c:	bx	lr

00017690 <rb_radixtree_delete>:
   17690:	push	{r4, r5, fp, lr}
   17694:	add	fp, sp, #8
   17698:	mov	r2, #0
   1769c:	mov	r5, r0
   176a0:	mov	r4, #0
   176a4:	bl	53cc <rb_radixtree_elem_find@plt>
   176a8:	cmp	r0, #0
   176ac:	beq	176c0 <rb_radixtree_delete+0x30>
   176b0:	ldr	r4, [r0, #4]
   176b4:	mov	r1, r0
   176b8:	mov	r0, r5
   176bc:	bl	4c94 <rb_radixtree_elem_delete@plt>
   176c0:	mov	r0, r4
   176c4:	pop	{r4, r5, fp, pc}

000176c8 <rb_radixtree_foreach_next>:
   176c8:	push	{r4, r5, fp, lr}
   176cc:	add	fp, sp, #8
   176d0:	cmp	r0, #0
   176d4:	beq	177a8 <rb_radixtree_foreach_next+0xe0>
   176d8:	ldr	r0, [r1, #8]
   176dc:	mov	r4, r1
   176e0:	cmp	r0, #0
   176e4:	beq	177a8 <rb_radixtree_foreach_next+0xe0>
   176e8:	ldr	r0, [r4, #12]
   176ec:	cmp	r0, #0
   176f0:	str	r0, [r4, #8]
   176f4:	popeq	{r4, r5, fp, pc}
   176f8:	ldr	r1, [r0, #12]
   176fc:	cmp	r1, #0
   17700:	beq	177a0 <rb_radixtree_foreach_next+0xd8>
   17704:	ldrb	r2, [r0, #16]
   17708:	b	17714 <rb_radixtree_foreach_next+0x4c>
   1770c:	mov	r2, #0
   17710:	mov	r1, r5
   17714:	mov	r3, r2
   17718:	add	r2, r1, r3, lsl #2
   1771c:	cmp	r3, #14
   17720:	ldr	r5, [r2, #4]
   17724:	add	r2, r3, #1
   17728:	bgt	17738 <rb_radixtree_foreach_next+0x70>
   1772c:	cmp	r5, #0
   17730:	mov	r3, r2
   17734:	beq	17718 <rb_radixtree_foreach_next+0x50>
   17738:	cmp	r5, #0
   1773c:	beq	17754 <rb_radixtree_foreach_next+0x8c>
   17740:	ldr	r3, [r5]
   17744:	cmn	r3, #1
   17748:	bne	1770c <rb_radixtree_foreach_next+0x44>
   1774c:	cmp	r5, r0
   17750:	bne	17788 <rb_radixtree_foreach_next+0xc0>
   17754:	sub	r3, r2, #1
   17758:	cmp	r3, #15
   1775c:	blt	17714 <rb_radixtree_foreach_next+0x4c>
   17760:	ldr	r3, [r1, #68]	; 0x44
   17764:	cmp	r3, #0
   17768:	beq	177a0 <rb_radixtree_foreach_next+0xd8>
   1776c:	ldrb	r2, [r1, #72]	; 0x48
   17770:	mov	r1, r3
   17774:	cmp	r2, #14
   17778:	bhi	17760 <rb_radixtree_foreach_next+0x98>
   1777c:	add	r2, r2, #1
   17780:	mov	r1, r3
   17784:	b	17714 <rb_radixtree_foreach_next+0x4c>
   17788:	ldr	r1, [r0, #8]
   1778c:	ldr	r0, [r5, #8]
   17790:	bl	5534 <strcmp@plt>
   17794:	cmn	r0, #1
   17798:	strgt	r5, [r4, #12]
   1779c:	popgt	{r4, r5, fp, pc}
   177a0:	mov	r0, #0
   177a4:	str	r0, [r4, #12]
   177a8:	pop	{r4, r5, fp, pc}

000177ac <rb_radixtree_foreach>:
   177ac:	push	{r4, r5, r6, r7, fp, lr}
   177b0:	add	fp, sp, #16
   177b4:	ldr	r0, [r0, #4]
   177b8:	cmp	r0, #0
   177bc:	beq	17898 <rb_radixtree_foreach+0xec>
   177c0:	mov	r3, r1
   177c4:	ldr	r1, [r0]
   177c8:	mov	r4, r2
   177cc:	cmn	r1, #1
   177d0:	beq	1787c <rb_radixtree_foreach+0xd0>
   177d4:	mov	r1, #0
   177d8:	b	177e0 <rb_radixtree_foreach+0x34>
   177dc:	add	r1, r2, #1
   177e0:	mov	r5, r0
   177e4:	add	r0, r5, r1, lsl #2
   177e8:	add	r6, r1, #1
   177ec:	cmp	r1, #14
   177f0:	ldr	r2, [r0, #4]
   177f4:	bgt	17804 <rb_radixtree_foreach+0x58>
   177f8:	cmp	r2, #0
   177fc:	mov	r1, r6
   17800:	beq	177e4 <rb_radixtree_foreach+0x38>
   17804:	cmp	r2, #0
   17808:	beq	17848 <rb_radixtree_foreach+0x9c>
   1780c:	ldr	r0, [r2]
   17810:	mov	r1, r6
   17814:	cmn	r0, #1
   17818:	mov	r0, r5
   1781c:	movne	r0, r2
   17820:	movwne	r1, #0
   17824:	bne	17850 <rb_radixtree_foreach+0xa4>
   17828:	cmp	r3, #0
   1782c:	beq	17850 <rb_radixtree_foreach+0xa4>
   17830:	ldr	r1, [r2, #4]
   17834:	ldr	r0, [r2, #8]
   17838:	mov	r2, r4
   1783c:	mov	r7, r3
   17840:	blx	r3
   17844:	mov	r3, r7
   17848:	mov	r0, r5
   1784c:	mov	r1, r6
   17850:	cmp	r1, #16
   17854:	blt	177e0 <rb_radixtree_foreach+0x34>
   17858:	mov	r1, r0
   1785c:	ldr	r0, [r1, #68]	; 0x44
   17860:	cmp	r0, #0
   17864:	popeq	{r4, r5, r6, r7, fp, pc}
   17868:	ldrb	r2, [r1, #72]	; 0x48
   1786c:	mov	r1, r0
   17870:	cmp	r2, #14
   17874:	bhi	1785c <rb_radixtree_foreach+0xb0>
   17878:	b	177dc <rb_radixtree_foreach+0x30>
   1787c:	cmp	r3, #0
   17880:	beq	17898 <rb_radixtree_foreach+0xec>
   17884:	ldr	r1, [r0, #4]
   17888:	ldr	r0, [r0, #8]
   1788c:	mov	r2, r4
   17890:	pop	{r4, r5, r6, r7, fp, lr}
   17894:	bx	r3
   17898:	pop	{r4, r5, r6, r7, fp, pc}

0001789c <rb_radixtree_search>:
   1789c:	push	{r4, r5, r6, r7, fp, lr}
   178a0:	add	fp, sp, #16
   178a4:	ldr	r5, [r0, #4]
   178a8:	mov	r0, #0
   178ac:	cmp	r5, #0
   178b0:	beq	17988 <rb_radixtree_search+0xec>
   178b4:	mov	r3, r1
   178b8:	ldr	r1, [r5]
   178bc:	mov	r4, r2
   178c0:	cmn	r1, #1
   178c4:	bne	178e8 <rb_radixtree_search+0x4c>
   178c8:	cmp	r3, #0
   178cc:	beq	17988 <rb_radixtree_search+0xec>
   178d0:	ldr	r1, [r5, #4]
   178d4:	ldr	r0, [r5, #8]
   178d8:	mov	r2, r4
   178dc:	pop	{r4, r5, r6, r7, fp, lr}
   178e0:	bx	r3
   178e4:	mov	r5, r0
   178e8:	mov	r6, #0
   178ec:	b	178f4 <rb_radixtree_search+0x58>
   178f0:	mov	r5, #0
   178f4:	mov	r1, r6
   178f8:	add	r0, r5, r1, lsl #2
   178fc:	add	r6, r1, #1
   17900:	cmp	r1, #14
   17904:	ldr	r0, [r0, #4]
   17908:	bgt	17918 <rb_radixtree_search+0x7c>
   1790c:	cmp	r0, #0
   17910:	mov	r1, r6
   17914:	beq	178f8 <rb_radixtree_search+0x5c>
   17918:	cmp	r0, #0
   1791c:	beq	17954 <rb_radixtree_search+0xb8>
   17920:	ldr	r1, [r0]
   17924:	cmn	r1, #1
   17928:	bne	178e4 <rb_radixtree_search+0x48>
   1792c:	cmp	r3, #0
   17930:	beq	17954 <rb_radixtree_search+0xb8>
   17934:	ldr	r1, [r0, #4]
   17938:	ldr	r0, [r0, #8]
   1793c:	mov	r2, r4
   17940:	mov	r7, r3
   17944:	blx	r3
   17948:	cmp	r0, #0
   1794c:	mov	r3, r7
   17950:	popne	{r4, r5, r6, r7, fp, pc}
   17954:	sub	r0, r6, #1
   17958:	cmp	r0, #15
   1795c:	blt	178f4 <rb_radixtree_search+0x58>
   17960:	ldr	r0, [r5, #68]	; 0x44
   17964:	ldrb	r6, [r5, #72]	; 0x48
   17968:	cmp	r0, #0
   1796c:	beq	178f0 <rb_radixtree_search+0x54>
   17970:	cmp	r6, #14
   17974:	mov	r5, r0
   17978:	bhi	17960 <rb_radixtree_search+0xc4>
   1797c:	add	r6, r6, #1
   17980:	mov	r5, r0
   17984:	b	178f4 <rb_radixtree_search+0x58>
   17988:	pop	{r4, r5, r6, r7, fp, pc}

0001798c <first_leaf>:
   1798c:	b	17a58 <first_leaf+0xcc>
   17990:	ldr	r0, [r1, #64]	; 0x40
   17994:	cmp	r0, #0
   17998:	moveq	r0, r1
   1799c:	b	17a58 <first_leaf+0xcc>
   179a0:	mov	r1, r0
   179a4:	ldr	r0, [r0, #4]
   179a8:	cmp	r0, #0
   179ac:	bne	17a58 <first_leaf+0xcc>
   179b0:	ldr	r0, [r1, #8]
   179b4:	cmp	r0, #0
   179b8:	bne	17a58 <first_leaf+0xcc>
   179bc:	ldr	r0, [r1, #12]
   179c0:	cmp	r0, #0
   179c4:	bne	17a58 <first_leaf+0xcc>
   179c8:	ldr	r0, [r1, #16]
   179cc:	cmp	r0, #0
   179d0:	bne	17a58 <first_leaf+0xcc>
   179d4:	ldr	r0, [r1, #20]
   179d8:	cmp	r0, #0
   179dc:	bne	17a58 <first_leaf+0xcc>
   179e0:	ldr	r0, [r1, #24]
   179e4:	cmp	r0, #0
   179e8:	bne	17a58 <first_leaf+0xcc>
   179ec:	ldr	r0, [r1, #28]
   179f0:	cmp	r0, #0
   179f4:	bne	17a58 <first_leaf+0xcc>
   179f8:	ldr	r0, [r1, #32]
   179fc:	cmp	r0, #0
   17a00:	bne	17a58 <first_leaf+0xcc>
   17a04:	ldr	r0, [r1, #36]	; 0x24
   17a08:	cmp	r0, #0
   17a0c:	bne	17a58 <first_leaf+0xcc>
   17a10:	ldr	r0, [r1, #40]	; 0x28
   17a14:	cmp	r0, #0
   17a18:	bne	17a58 <first_leaf+0xcc>
   17a1c:	ldr	r0, [r1, #44]	; 0x2c
   17a20:	cmp	r0, #0
   17a24:	bne	17a58 <first_leaf+0xcc>
   17a28:	ldr	r0, [r1, #48]	; 0x30
   17a2c:	cmp	r0, #0
   17a30:	bne	17a58 <first_leaf+0xcc>
   17a34:	ldr	r0, [r1, #52]	; 0x34
   17a38:	cmp	r0, #0
   17a3c:	bne	17a58 <first_leaf+0xcc>
   17a40:	ldr	r0, [r1, #56]	; 0x38
   17a44:	cmp	r0, #0
   17a48:	bne	17a58 <first_leaf+0xcc>
   17a4c:	ldr	r0, [r1, #60]	; 0x3c
   17a50:	cmp	r0, #0
   17a54:	beq	17990 <first_leaf+0x4>
   17a58:	ldr	r1, [r0]
   17a5c:	cmn	r1, #1
   17a60:	bxeq	lr
   17a64:	b	179a0 <first_leaf+0x14>

00017a68 <rb_radixtree_elem_find>:
   17a68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a6c:	add	fp, sp, #28
   17a70:	sub	sp, sp, #260	; 0x104
   17a74:	mov	sl, r0
   17a78:	mov	r0, r1
   17a7c:	mov	r8, r2
   17a80:	mov	r4, r1
   17a84:	bl	5084 <strlen@plt>
   17a88:	mov	r5, r0
   17a8c:	ldr	r0, [sl]
   17a90:	mov	r6, #0
   17a94:	cmp	r0, #0
   17a98:	beq	17ad4 <rb_radixtree_elem_find+0x6c>
   17a9c:	cmp	r5, #256	; 0x100
   17aa0:	blt	17adc <rb_radixtree_elem_find+0x74>
   17aa4:	add	r0, r5, #1
   17aa8:	bl	5228 <malloc@plt>
   17aac:	cmp	r0, #0
   17ab0:	beq	17b98 <rb_radixtree_elem_find+0x130>
   17ab4:	mov	r1, r4
   17ab8:	mov	r7, r0
   17abc:	bl	512c <strcpy@plt>
   17ac0:	ldr	r1, [sl]
   17ac4:	mov	r0, r7
   17ac8:	blx	r1
   17acc:	mov	r9, r7
   17ad0:	b	17b00 <rb_radixtree_elem_find+0x98>
   17ad4:	mov	r7, r4
   17ad8:	b	17afc <rb_radixtree_elem_find+0x94>
   17adc:	mov	r7, sp
   17ae0:	mov	r1, r4
   17ae4:	mov	r2, #256	; 0x100
   17ae8:	mov	r0, r7
   17aec:	bl	4f58 <rb_strlcpy@plt>
   17af0:	ldr	r1, [sl]
   17af4:	mov	r0, r7
   17af8:	blx	r1
   17afc:	mov	r9, #0
   17b00:	ldr	r4, [sl, #4]
   17b04:	cmp	r4, #0
   17b08:	beq	17b50 <rb_radixtree_elem_find+0xe8>
   17b0c:	mov	ip, #4
   17b10:	mov	r1, #15
   17b14:	mov	r6, #0
   17b18:	ldr	r2, [r4]
   17b1c:	cmn	r2, #1
   17b20:	beq	17b6c <rb_radixtree_elem_find+0x104>
   17b24:	add	r3, r2, r2, lsr #31
   17b28:	mov	r0, #0
   17b2c:	cmp	r5, r3, asr #1
   17b30:	asrgt	r0, r3, #1
   17b34:	bicgt	r2, ip, r2, lsl #2
   17b38:	ldrbgt	r0, [r7, r0]
   17b3c:	andgt	r0, r1, r0, lsr r2
   17b40:	add	r0, r4, r0, lsl #2
   17b44:	ldr	r4, [r0, #4]
   17b48:	cmp	r4, #0
   17b4c:	bne	17b18 <rb_radixtree_elem_find+0xb0>
   17b50:	cmp	r9, #0
   17b54:	beq	17b60 <rb_radixtree_elem_find+0xf8>
   17b58:	mov	r0, r9
   17b5c:	bl	4fa0 <free@plt>
   17b60:	mov	r0, r6
   17b64:	sub	sp, fp, #28
   17b68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b6c:	cmp	r8, #0
   17b70:	bne	17b88 <rb_radixtree_elem_find+0x120>
   17b74:	ldr	r0, [r4, #8]
   17b78:	mov	r1, r7
   17b7c:	bl	5534 <strcmp@plt>
   17b80:	cmp	r0, #0
   17b84:	movne	r4, #0
   17b88:	mov	r6, r4
   17b8c:	cmp	r9, #0
   17b90:	bne	17b58 <rb_radixtree_elem_find+0xf0>
   17b94:	b	17b60 <rb_radixtree_elem_find+0xf8>
   17b98:	bl	5204 <rb_outofmemory@plt>

00017b9c <rb_radixtree_foreach_start_from>:
   17b9c:	push	{r4, r5, fp, lr}
   17ba0:	add	fp, sp, #8
   17ba4:	mov	r4, r1
   17ba8:	mov	r5, r0
   17bac:	cmp	r2, #0
   17bb0:	beq	17bf0 <rb_radixtree_foreach_start_from+0x54>
   17bb4:	mov	r0, #0
   17bb8:	mov	r1, r2
   17bbc:	mov	r2, #1
   17bc0:	str	r0, [r4, #8]
   17bc4:	mov	r0, r5
   17bc8:	bl	53cc <rb_radixtree_elem_find@plt>
   17bcc:	cmp	r5, #0
   17bd0:	str	r0, [r4, #12]
   17bd4:	popeq	{r4, r5, fp, pc}
   17bd8:	ldr	r1, [r4, #8]
   17bdc:	cmp	r1, #0
   17be0:	strne	r0, [r4, #8]
   17be4:	cmpne	r0, #0
   17be8:	bne	17c00 <rb_radixtree_foreach_start_from+0x64>
   17bec:	pop	{r4, r5, fp, pc}
   17bf0:	mov	r0, r5
   17bf4:	mov	r1, r4
   17bf8:	pop	{r4, r5, fp, lr}
   17bfc:	b	1757c <rb_radixtree_foreach_start>
   17c00:	ldr	r1, [r0, #12]
   17c04:	cmp	r1, #0
   17c08:	beq	17ca4 <rb_radixtree_foreach_start_from+0x108>
   17c0c:	ldrb	r2, [r0, #16]
   17c10:	b	17c1c <rb_radixtree_foreach_start_from+0x80>
   17c14:	mov	r2, #0
   17c18:	mov	r1, r5
   17c1c:	mov	r3, r2
   17c20:	add	r2, r1, r3, lsl #2
   17c24:	cmp	r3, #14
   17c28:	ldr	r5, [r2, #4]
   17c2c:	add	r2, r3, #1
   17c30:	bgt	17c40 <rb_radixtree_foreach_start_from+0xa4>
   17c34:	cmp	r5, #0
   17c38:	mov	r3, r2
   17c3c:	beq	17c20 <rb_radixtree_foreach_start_from+0x84>
   17c40:	cmp	r5, #0
   17c44:	beq	17c5c <rb_radixtree_foreach_start_from+0xc0>
   17c48:	ldr	r3, [r5]
   17c4c:	cmn	r3, #1
   17c50:	bne	17c14 <rb_radixtree_foreach_start_from+0x78>
   17c54:	cmp	r0, r5
   17c58:	bne	17c90 <rb_radixtree_foreach_start_from+0xf4>
   17c5c:	sub	r3, r2, #1
   17c60:	cmp	r3, #15
   17c64:	blt	17c1c <rb_radixtree_foreach_start_from+0x80>
   17c68:	ldr	r3, [r1, #68]	; 0x44
   17c6c:	cmp	r3, #0
   17c70:	beq	17ca4 <rb_radixtree_foreach_start_from+0x108>
   17c74:	ldrb	r2, [r1, #72]	; 0x48
   17c78:	mov	r1, r3
   17c7c:	cmp	r2, #14
   17c80:	bhi	17c68 <rb_radixtree_foreach_start_from+0xcc>
   17c84:	add	r2, r2, #1
   17c88:	mov	r1, r3
   17c8c:	b	17c1c <rb_radixtree_foreach_start_from+0x80>
   17c90:	ldr	r1, [r0, #8]
   17c94:	ldr	r0, [r5, #8]
   17c98:	bl	5534 <strcmp@plt>
   17c9c:	cmn	r0, #1
   17ca0:	bgt	17cb0 <rb_radixtree_foreach_start_from+0x114>
   17ca4:	mov	r0, #0
   17ca8:	str	r0, [r4, #12]
   17cac:	pop	{r4, r5, fp, pc}
   17cb0:	str	r5, [r4, #12]
   17cb4:	pop	{r4, r5, fp, pc}

00017cb8 <rb_radixtree_elem_add>:
   17cb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cbc:	add	fp, sp, #28
   17cc0:	sub	sp, sp, #28
   17cc4:	mov	sl, r0
   17cc8:	mov	r0, r1
   17ccc:	mov	r8, r2
   17cd0:	mov	r5, r1
   17cd4:	bl	5084 <strlen@plt>
   17cd8:	mov	r4, r0
   17cdc:	add	r0, r0, #1
   17ce0:	bl	5228 <malloc@plt>
   17ce4:	cmp	r0, #0
   17ce8:	beq	18018 <rb_radixtree_elem_add+0x360>
   17cec:	mov	r1, r5
   17cf0:	mov	r5, r0
   17cf4:	bl	512c <strcpy@plt>
   17cf8:	ldr	r1, [sl]
   17cfc:	cmp	r1, #0
   17d00:	beq	17d0c <rb_radixtree_elem_add+0x54>
   17d04:	mov	r0, r5
   17d08:	blx	r1
   17d0c:	mov	r0, sl
   17d10:	str	r5, [sp, #24]
   17d14:	ldr	r7, [r0, #4]!
   17d18:	cmp	r7, #0
   17d1c:	beq	17d80 <rb_radixtree_elem_add+0xc8>
   17d20:	ldr	r2, [r7]
   17d24:	str	r0, [sp, #8]
   17d28:	str	r7, [sp, #20]
   17d2c:	cmn	r2, #1
   17d30:	beq	17dcc <rb_radixtree_elem_add+0x114>
   17d34:	ldr	r1, [sp, #24]
   17d38:	mov	r0, #4
   17d3c:	mov	r6, #15
   17d40:	add	r3, r2, r2, lsr #31
   17d44:	mov	r9, #0
   17d48:	mov	r5, r7
   17d4c:	cmp	r4, r3, asr #1
   17d50:	asrgt	r3, r3, #1
   17d54:	bicgt	r2, r0, r2, lsl #2
   17d58:	ldrbgt	r3, [r1, r3]
   17d5c:	andgt	r9, r6, r3, lsr r2
   17d60:	add	r2, r5, r9, lsl #2
   17d64:	ldr	r7, [r2, #4]
   17d68:	cmp	r7, #0
   17d6c:	beq	17dfc <rb_radixtree_elem_add+0x144>
   17d70:	ldr	r2, [r7]
   17d74:	cmn	r2, #1
   17d78:	bne	17d40 <rb_radixtree_elem_add+0x88>
   17d7c:	b	17dd8 <rb_radixtree_elem_add+0x120>
   17d80:	mov	r9, #18
   17d84:	mov	r5, #0
   17d88:	mov	r0, #1
   17d8c:	mov	r1, #20
   17d90:	bl	4ea4 <calloc@plt>
   17d94:	cmp	r0, #0
   17d98:	mvnne	r1, #0
   17d9c:	strne	r0, [sl, #4]
   17da0:	stmne	r0, {r1, r8}
   17da4:	ldrne	r1, [sp, #24]
   17da8:	strne	r1, [r0, #8]
   17dac:	strne	r5, [r0, #12]
   17db0:	strbne	r9, [r0, #16]
   17db4:	ldrne	r1, [sl, #8]
   17db8:	addne	r1, r1, #1
   17dbc:	strne	r1, [sl, #8]
   17dc0:	subne	sp, fp, #28
   17dc4:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17dc8:	bl	5204 <rb_outofmemory@plt>
   17dcc:	ldr	r1, [sp, #24]
   17dd0:	mov	r5, #0
   17dd4:	mov	r9, #18
   17dd8:	ldr	r0, [r7, #8]
   17ddc:	bl	5534 <strcmp@plt>
   17de0:	cmp	r0, #0
   17de4:	bne	17e10 <rb_radixtree_elem_add+0x158>
   17de8:	ldr	r0, [sp, #24]
   17dec:	bl	4fa0 <free@plt>
   17df0:	mov	r0, #0
   17df4:	sub	sp, fp, #28
   17df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17dfc:	mov	r0, r5
   17e00:	bl	1798c <first_leaf>
   17e04:	mov	r7, r0
   17e08:	cmp	r0, #0
   17e0c:	beq	17d88 <rb_radixtree_elem_add+0xd0>
   17e10:	ldr	r0, [r7, #8]
   17e14:	ldr	ip, [sp, #24]
   17e18:	str	r8, [sp, #12]
   17e1c:	mvn	r8, #0
   17e20:	mov	r1, #0
   17e24:	mov	r2, #4
   17e28:	mov	r3, #15
   17e2c:	str	sl, [sp, #16]
   17e30:	add	r8, r8, #1
   17e34:	bic	sl, r2, r1
   17e38:	add	r1, r1, #4
   17e3c:	ldrb	r4, [ip, r8, lsr #1]
   17e40:	ldrb	r6, [r0, r8, lsr #1]
   17e44:	eor	r6, r6, r4
   17e48:	tst	r6, r3, lsl sl
   17e4c:	beq	17e30 <rb_radixtree_elem_add+0x178>
   17e50:	lsr	lr, r8, #1
   17e54:	mov	r6, #1
   17e58:	cmp	r5, #0
   17e5c:	beq	17ea4 <rb_radixtree_elem_add+0x1ec>
   17e60:	ldr	r0, [r5]
   17e64:	cmp	r0, r8
   17e68:	ble	17e8c <rb_radixtree_elem_add+0x1d4>
   17e6c:	mov	r1, r5
   17e70:	ldr	r5, [r5, #68]	; 0x44
   17e74:	cmp	r5, #0
   17e78:	beq	17ea0 <rb_radixtree_elem_add+0x1e8>
   17e7c:	ldr	r0, [r5]
   17e80:	cmp	r0, r8
   17e84:	bgt	17e6c <rb_radixtree_elem_add+0x1b4>
   17e88:	ldrb	r9, [r1, #72]	; 0x48
   17e8c:	mov	r6, #0
   17e90:	cmp	r0, r8
   17e94:	mov	r4, r5
   17e98:	blt	17ea8 <rb_radixtree_elem_add+0x1f0>
   17e9c:	b	17fa8 <rb_radixtree_elem_add+0x2f0>
   17ea0:	ldrb	r9, [r1, #72]	; 0x48
   17ea4:	mov	r5, #0
   17ea8:	mov	r0, #1
   17eac:	mov	r1, #76	; 0x4c
   17eb0:	str	lr, [sp, #4]
   17eb4:	bl	4ea4 <calloc@plt>
   17eb8:	cmp	r0, #0
   17ebc:	beq	18018 <rb_radixtree_elem_add+0x360>
   17ec0:	ldr	r3, [sp, #20]
   17ec4:	ldr	lr, [sp, #4]
   17ec8:	mov	r4, r0
   17ecc:	str	r5, [r0, #68]	; 0x44
   17ed0:	str	r8, [r0]
   17ed4:	strb	r9, [r0, #72]	; 0x48
   17ed8:	vmov.i32	q8, #0	; 0x00000000
   17edc:	add	r0, r0, #52	; 0x34
   17ee0:	cmp	r6, #0
   17ee4:	vst1.32	{d16-d17}, [r0]
   17ee8:	add	r0, r4, #36	; 0x24
   17eec:	add	r1, r4, #4
   17ef0:	vst1.32	{d16-d17}, [r0]
   17ef4:	add	r0, r4, #20
   17ef8:	vst1.32	{d16-d17}, [r1]
   17efc:	vst1.32	{d16-d17}, [r0]
   17f00:	beq	17f34 <rb_radixtree_elem_add+0x27c>
   17f04:	ldr	r0, [r7, #8]
   17f08:	ldr	ip, [sp, #24]
   17f0c:	ldrb	r2, [r0, lr]
   17f10:	mov	r0, #15
   17f14:	and	r2, r0, r2, lsr sl
   17f18:	str	r3, [r1, r2, lsl #2]
   17f1c:	ldr	r1, [r3]
   17f20:	cmn	r1, #1
   17f24:	beq	17f80 <rb_radixtree_elem_add+0x2c8>
   17f28:	str	r4, [r3, #68]	; 0x44
   17f2c:	ldr	r6, [sp, #8]
   17f30:	b	17f68 <rb_radixtree_elem_add+0x2b0>
   17f34:	ldr	r0, [r7, #8]
   17f38:	add	r6, r5, r9, lsl #2
   17f3c:	ldr	ip, [sp, #24]
   17f40:	ldr	r3, [r6, #4]!
   17f44:	ldrb	r2, [r0, lr]
   17f48:	mov	r0, #15
   17f4c:	and	r2, r0, r2, lsr sl
   17f50:	str	r3, [r1, r2, lsl #2]
   17f54:	ldr	r1, [r6]
   17f58:	ldr	r2, [r1]
   17f5c:	cmn	r2, #1
   17f60:	beq	17f8c <rb_radixtree_elem_add+0x2d4>
   17f64:	str	r4, [r1, #68]	; 0x44
   17f68:	ldr	r1, [r7, #8]
   17f6c:	ldrb	r1, [r1, lr]
   17f70:	and	r0, r0, r1, lsr sl
   17f74:	ldr	r1, [r6]
   17f78:	strb	r0, [r1, #72]	; 0x48
   17f7c:	b	17fa4 <rb_radixtree_elem_add+0x2ec>
   17f80:	str	r4, [r3, #12]
   17f84:	ldr	r6, [sp, #8]
   17f88:	b	17f90 <rb_radixtree_elem_add+0x2d8>
   17f8c:	str	r4, [r1, #12]
   17f90:	ldr	r1, [r7, #8]
   17f94:	ldrb	r1, [r1, lr]
   17f98:	and	r0, r0, r1, lsr sl
   17f9c:	ldr	r1, [r6]
   17fa0:	strb	r0, [r1, #16]
   17fa4:	str	r4, [r6]
   17fa8:	ldrb	r5, [ip, lr]
   17fac:	mov	r0, #1
   17fb0:	mov	r1, #20
   17fb4:	mov	r6, ip
   17fb8:	bl	4ea4 <calloc@plt>
   17fbc:	cmp	r0, #0
   17fc0:	movne	r1, #15
   17fc4:	mvnne	r3, #0
   17fc8:	andne	r1, r1, r5, lsr sl
   17fcc:	addne	r2, r4, r1, lsl #2
   17fd0:	strne	r0, [r2, #4]!
   17fd4:	strne	r3, [r0]
   17fd8:	ldrne	r0, [r2]
   17fdc:	ldrne	r3, [sp, #12]
   17fe0:	strne	r3, [r0, #4]
   17fe4:	ldrne	r0, [r2]
   17fe8:	strne	r6, [r0, #8]
   17fec:	ldrne	r0, [r2]
   17ff0:	strne	r4, [r0, #12]
   17ff4:	ldrne	r0, [r2]
   17ff8:	strbne	r1, [r0, #16]
   17ffc:	ldrne	r1, [sp, #16]
   18000:	ldrne	r0, [r1, #8]
   18004:	addne	r0, r0, #1
   18008:	strne	r0, [r1, #8]
   1800c:	ldrne	r0, [r2]
   18010:	subne	sp, fp, #28
   18014:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18018:	bl	5204 <rb_outofmemory@plt>

0001801c <rb_radixtree_add>:
   1801c:	push	{fp, lr}
   18020:	mov	fp, sp
   18024:	bl	4fc4 <rb_radixtree_elem_add@plt>
   18028:	cmp	r0, #0
   1802c:	movwne	r0, #1
   18030:	pop	{fp, pc}

00018034 <rb_radixtree_elem_delete>:
   18034:	push	{r4, r5, r6, r7, fp, lr}
   18038:	add	fp, sp, #16
   1803c:	mov	r4, r0
   18040:	ldr	r0, [r1, #8]
   18044:	ldr	r5, [r1, #12]
   18048:	ldrb	r7, [r1, #16]
   1804c:	mov	r6, r1
   18050:	cmp	r0, #0
   18054:	beq	1805c <rb_radixtree_elem_delete+0x28>
   18058:	bl	4fa0 <free@plt>
   1805c:	mov	r0, r6
   18060:	bl	4fa0 <free@plt>
   18064:	cmp	r5, #0
   18068:	beq	18220 <rb_radixtree_elem_delete+0x1ec>
   1806c:	add	r0, r5, #4
   18070:	mov	r1, #0
   18074:	mvn	r6, #1
   18078:	str	r1, [r0, r7, lsl #2]
   1807c:	ldmib	r5, {r0, r2, r3, r7}
   18080:	cmp	r0, #0
   18084:	mvn	r0, #1
   18088:	mvneq	r1, #0
   1808c:	movweq	r6, #1
   18090:	cmp	r2, #0
   18094:	mvn	r2, #1
   18098:	moveq	r6, r1
   1809c:	mvn	r1, #1
   180a0:	cmn	r6, #1
   180a4:	movweq	r1, #2
   180a8:	cmp	r3, #0
   180ac:	ldr	r3, [r5, #20]
   180b0:	moveq	r1, r6
   180b4:	cmn	r1, #1
   180b8:	movweq	r2, #3
   180bc:	cmp	r7, #0
   180c0:	moveq	r2, r1
   180c4:	mvn	r1, #1
   180c8:	cmn	r2, #1
   180cc:	movweq	r1, #4
   180d0:	cmp	r3, #0
   180d4:	ldr	r3, [r5, #24]
   180d8:	moveq	r1, r2
   180dc:	mvn	r2, #1
   180e0:	cmn	r1, #1
   180e4:	movweq	r2, #5
   180e8:	cmp	r3, #0
   180ec:	ldr	r3, [r5, #28]
   180f0:	moveq	r2, r1
   180f4:	mvn	r1, #1
   180f8:	cmn	r2, #1
   180fc:	movweq	r1, #6
   18100:	cmp	r3, #0
   18104:	ldr	r3, [r5, #32]
   18108:	moveq	r1, r2
   1810c:	mvn	r2, #1
   18110:	cmn	r1, #1
   18114:	movweq	r2, #7
   18118:	cmp	r3, #0
   1811c:	ldr	r3, [r5, #36]	; 0x24
   18120:	moveq	r2, r1
   18124:	mvn	r1, #1
   18128:	cmn	r2, #1
   1812c:	movweq	r1, #8
   18130:	cmp	r3, #0
   18134:	ldr	r3, [r5, #40]	; 0x28
   18138:	moveq	r1, r2
   1813c:	mvn	r2, #1
   18140:	cmn	r1, #1
   18144:	movweq	r2, #9
   18148:	cmp	r3, #0
   1814c:	ldr	r3, [r5, #44]	; 0x2c
   18150:	moveq	r2, r1
   18154:	mvn	r1, #1
   18158:	cmn	r2, #1
   1815c:	movweq	r1, #10
   18160:	cmp	r3, #0
   18164:	ldr	r3, [r5, #48]	; 0x30
   18168:	moveq	r1, r2
   1816c:	mvn	r2, #1
   18170:	cmn	r1, #1
   18174:	movweq	r2, #11
   18178:	cmp	r3, #0
   1817c:	ldr	r3, [r5, #52]	; 0x34
   18180:	moveq	r2, r1
   18184:	mvn	r1, #1
   18188:	cmn	r2, #1
   1818c:	movweq	r1, #12
   18190:	cmp	r3, #0
   18194:	ldr	r3, [r5, #56]	; 0x38
   18198:	moveq	r1, r2
   1819c:	mvn	r2, #1
   181a0:	cmn	r1, #1
   181a4:	movweq	r2, #13
   181a8:	cmp	r3, #0
   181ac:	ldr	r3, [r5, #60]	; 0x3c
   181b0:	moveq	r2, r1
   181b4:	mvn	r1, #1
   181b8:	cmn	r2, #1
   181bc:	movweq	r1, #14
   181c0:	cmp	r3, #0
   181c4:	moveq	r1, r2
   181c8:	ldr	r2, [r5, #64]	; 0x40
   181cc:	cmn	r1, #1
   181d0:	movweq	r0, #15
   181d4:	cmp	r2, #0
   181d8:	moveq	r0, r1
   181dc:	cmp	r0, #0
   181e0:	blt	18240 <rb_radixtree_elem_delete+0x20c>
   181e4:	ldr	r2, [r5, #68]	; 0x44
   181e8:	ldrb	r1, [r5, #72]	; 0x48
   181ec:	add	r0, r5, r0, lsl #2
   181f0:	ldr	r0, [r0, #4]
   181f4:	add	r3, r2, r1, lsl #2
   181f8:	cmp	r2, #0
   181fc:	add	r3, r3, #4
   18200:	addeq	r3, r4, #4
   18204:	str	r0, [r3]
   18208:	ldr	r3, [r0]
   1820c:	cmn	r3, #1
   18210:	beq	1822c <rb_radixtree_elem_delete+0x1f8>
   18214:	str	r2, [r0, #68]	; 0x44
   18218:	add	r0, r0, #72	; 0x48
   1821c:	b	18234 <rb_radixtree_elem_delete+0x200>
   18220:	mov	r0, #0
   18224:	str	r0, [r4, #4]
   18228:	b	18240 <rb_radixtree_elem_delete+0x20c>
   1822c:	str	r2, [r0, #12]
   18230:	add	r0, r0, #16
   18234:	strb	r1, [r0]
   18238:	mov	r0, r5
   1823c:	bl	4fa0 <free@plt>
   18240:	ldr	r0, [r4, #8]
   18244:	subs	r0, r0, #1
   18248:	str	r0, [r4, #8]
   1824c:	moveq	r0, #0
   18250:	streq	r0, [r4, #4]
   18254:	pop	{r4, r5, r6, r7, fp, pc}

00018258 <rb_radixtree_retrieve>:
   18258:	push	{r4, sl, fp, lr}
   1825c:	add	fp, sp, #8
   18260:	mov	r2, #0
   18264:	mov	r4, #0
   18268:	bl	53cc <rb_radixtree_elem_find@plt>
   1826c:	cmp	r0, #0
   18270:	ldrne	r4, [r0, #4]
   18274:	mov	r0, r4
   18278:	pop	{r4, sl, fp, pc}

0001827c <rb_radixtree_elem_get_key>:
   1827c:	ldr	r0, [r0, #8]
   18280:	bx	lr

00018284 <rb_radixtree_elem_set_data>:
   18284:	str	r1, [r0, #4]
   18288:	bx	lr

0001828c <rb_radixtree_elem_get_data>:
   1828c:	ldr	r0, [r0, #4]
   18290:	bx	lr

00018294 <rb_radixtree_size>:
   18294:	ldr	r0, [r0, #8]
   18298:	bx	lr

0001829c <rb_radixtree_stats>:
   1829c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   182a0:	add	fp, sp, #24
   182a4:	sub	sp, sp, #280	; 0x118
   182a8:	mov	r6, r0
   182ac:	mov	r0, #0
   182b0:	mov	r5, r2
   182b4:	mov	r7, r1
   182b8:	str	r0, [sp, #20]
   182bc:	ldr	r0, [r6, #8]
   182c0:	cmp	r0, #0
   182c4:	beq	18314 <rb_radixtree_stats+0x78>
   182c8:	ldr	r0, [r6, #4]
   182cc:	add	r2, sp, #20
   182d0:	mov	r1, #0
   182d4:	bl	18378 <stats_recurse>
   182d8:	ldr	r1, [r6, #8]
   182dc:	ldr	r3, [r6, #12]
   182e0:	ldr	r2, [sp, #20]
   182e4:	ldr	r6, [pc, #120]	; 18364 <rb_radixtree_stats+0xc8>
   182e8:	str	r0, [sp, #8]
   182ec:	udiv	r4, r0, r1
   182f0:	add	r6, pc, r6
   182f4:	str	r1, [sp, #4]
   182f8:	str	r2, [sp, #16]
   182fc:	add	r0, sp, #24
   18300:	str	r6, [sp]
   18304:	str	r4, [sp, #12]
   18308:	ldr	r2, [pc, #88]	; 18368 <rb_radixtree_stats+0xcc>
   1830c:	add	r2, pc, r2
   18310:	b	18348 <rb_radixtree_stats+0xac>
   18314:	ldr	r3, [r6, #12]
   18318:	ldr	r0, [pc, #76]	; 1836c <rb_radixtree_stats+0xd0>
   1831c:	ldr	r1, [pc, #76]	; 18370 <rb_radixtree_stats+0xd4>
   18320:	add	r0, pc, r0
   18324:	add	r1, pc, r1
   18328:	str	r1, [sp]
   1832c:	str	r0, [sp, #4]
   18330:	str	r0, [sp, #8]
   18334:	str	r0, [sp, #12]
   18338:	str	r0, [sp, #16]
   1833c:	add	r0, sp, #24
   18340:	ldr	r2, [pc, #44]	; 18374 <rb_radixtree_stats+0xd8>
   18344:	add	r2, pc, r2
   18348:	mov	r1, #256	; 0x100
   1834c:	bl	5408 <snprintf@plt>
   18350:	add	r0, sp, #24
   18354:	mov	r1, r5
   18358:	blx	r7
   1835c:	sub	sp, fp, #24
   18360:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18364:	.word	0x00001bb9
   18368:	.word	0x00001b50
   1836c:	.word	0x00000d37
   18370:	.word	0x00001b85
   18374:	.word	0x00001b41

00018378 <stats_recurse>:
   18378:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1837c:	add	fp, sp, #24
   18380:	mov	r4, r1
   18384:	ldr	r1, [r2]
   18388:	mov	r8, r2
   1838c:	cmp	r1, r4
   18390:	strlt	r4, [r8]
   18394:	ldr	r1, [r0]
   18398:	cmn	r1, #1
   1839c:	beq	183d8 <stats_recurse+0x60>
   183a0:	add	r6, r4, #1
   183a4:	add	r7, r0, #4
   183a8:	mov	r5, #0
   183ac:	mov	r4, #0
   183b0:	ldr	r0, [r7, r5, lsl #2]
   183b4:	cmp	r0, #0
   183b8:	beq	183cc <stats_recurse+0x54>
   183bc:	mov	r1, r6
   183c0:	mov	r2, r8
   183c4:	bl	18378 <stats_recurse>
   183c8:	add	r4, r0, r4
   183cc:	add	r5, r5, #1
   183d0:	cmp	r5, #16
   183d4:	bne	183b0 <stats_recurse+0x38>
   183d8:	mov	r0, r4
   183dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000183e0 <rb_radixtree_stats_walk>:
   183e0:	push	{r4, r5, r6, sl, fp, lr}
   183e4:	add	fp, sp, #16
   183e8:	mov	r5, r0
   183ec:	ldr	r0, [pc, #48]	; 18424 <rb_radixtree_stats_walk+0x44>
   183f0:	ldr	r0, [pc, r0]
   183f4:	ldr	r6, [r0]
   183f8:	cmp	r6, #0
   183fc:	popeq	{r4, r5, r6, sl, fp, pc}
   18400:	mov	r4, r1
   18404:	ldr	r0, [r6]
   18408:	mov	r1, r5
   1840c:	mov	r2, r4
   18410:	bl	4ef8 <rb_radixtree_stats@plt>
   18414:	ldr	r6, [r6, #8]
   18418:	cmp	r6, #0
   1841c:	bne	18404 <rb_radixtree_stats_walk+0x24>
   18420:	pop	{r4, r5, r6, sl, fp, pc}
   18424:	.word	0x00012fc8

Disassembly of section .fini:

00018428 <_fini>:
   18428:	push	{r3, lr}
   1842c:	pop	{r3, pc}
