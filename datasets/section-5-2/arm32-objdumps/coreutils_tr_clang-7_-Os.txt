
../repos/coreutils/src/tr:     file format elf32-littlearm


Disassembly of section .init:

00010e20 <.init>:
   10e20:	push	{r3, lr}
   10e24:	bl	11104 <__assert_fail@plt+0x48>
   10e28:	pop	{r3, pc}

Disassembly of section .plt:

00010e2c <calloc@plt-0x14>:
   10e2c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e30:	ldr	lr, [pc, #4]	; 10e3c <calloc@plt-0x4>
   10e34:	add	lr, pc, lr
   10e38:	ldr	pc, [lr, #8]!
   10e3c:	andeq	r8, r1, r4, asr #3

00010e40 <calloc@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #24, 20	; 0x18000
   10e48:	ldr	pc, [ip, #452]!	; 0x1c4

00010e4c <fputs_unlocked@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #24, 20	; 0x18000
   10e54:	ldr	pc, [ip, #444]!	; 0x1bc

00010e58 <raise@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #24, 20	; 0x18000
   10e60:	ldr	pc, [ip, #436]!	; 0x1b4

00010e64 <strcmp@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #24, 20	; 0x18000
   10e6c:	ldr	pc, [ip, #428]!	; 0x1ac

00010e70 <posix_fadvise64@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #24, 20	; 0x18000
   10e78:	ldr	pc, [ip, #420]!	; 0x1a4

00010e7c <read@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #24, 20	; 0x18000
   10e84:	ldr	pc, [ip, #412]!	; 0x19c

00010e88 <fflush@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #24, 20	; 0x18000
   10e90:	ldr	pc, [ip, #404]!	; 0x194

00010e94 <free@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #24, 20	; 0x18000
   10e9c:	ldr	pc, [ip, #396]!	; 0x18c

00010ea0 <_exit@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #24, 20	; 0x18000
   10ea8:	ldr	pc, [ip, #388]!	; 0x184

00010eac <memcpy@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #24, 20	; 0x18000
   10eb4:	ldr	pc, [ip, #380]!	; 0x17c

00010eb8 <tolower@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #24, 20	; 0x18000
   10ec0:	ldr	pc, [ip, #372]!	; 0x174

00010ec4 <mbsinit@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #24, 20	; 0x18000
   10ecc:	ldr	pc, [ip, #364]!	; 0x16c

00010ed0 <fwrite_unlocked@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #24, 20	; 0x18000
   10ed8:	ldr	pc, [ip, #356]!	; 0x164

00010edc <memcmp@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #24, 20	; 0x18000
   10ee4:	ldr	pc, [ip, #348]!	; 0x15c

00010ee8 <stpcpy@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #24, 20	; 0x18000
   10ef0:	ldr	pc, [ip, #340]!	; 0x154

00010ef4 <dcgettext@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #24, 20	; 0x18000
   10efc:	ldr	pc, [ip, #332]!	; 0x14c

00010f00 <realloc@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #24, 20	; 0x18000
   10f08:	ldr	pc, [ip, #324]!	; 0x144

00010f0c <textdomain@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #24, 20	; 0x18000
   10f14:	ldr	pc, [ip, #316]!	; 0x13c

00010f18 <iswprint@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #24, 20	; 0x18000
   10f20:	ldr	pc, [ip, #308]!	; 0x134

00010f24 <lseek64@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #24, 20	; 0x18000
   10f2c:	ldr	pc, [ip, #300]!	; 0x12c

00010f30 <__ctype_get_mb_cur_max@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #24, 20	; 0x18000
   10f38:	ldr	pc, [ip, #292]!	; 0x124

00010f3c <__fpending@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #24, 20	; 0x18000
   10f44:	ldr	pc, [ip, #284]!	; 0x11c

00010f48 <ferror_unlocked@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #24, 20	; 0x18000
   10f50:	ldr	pc, [ip, #276]!	; 0x114

00010f54 <mbrtowc@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #24, 20	; 0x18000
   10f5c:	ldr	pc, [ip, #268]!	; 0x10c

00010f60 <error@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #24, 20	; 0x18000
   10f68:	ldr	pc, [ip, #260]!	; 0x104

00010f6c <malloc@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #24, 20	; 0x18000
   10f74:	ldr	pc, [ip, #252]!	; 0xfc

00010f78 <__libc_start_main@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #24, 20	; 0x18000
   10f80:	ldr	pc, [ip, #244]!	; 0xf4

00010f84 <__freading@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #24, 20	; 0x18000
   10f8c:	ldr	pc, [ip, #236]!	; 0xec

00010f90 <__gmon_start__@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #24, 20	; 0x18000
   10f98:	ldr	pc, [ip, #228]!	; 0xe4

00010f9c <getopt_long@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #24, 20	; 0x18000
   10fa4:	ldr	pc, [ip, #220]!	; 0xdc

00010fa8 <__ctype_b_loc@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #24, 20	; 0x18000
   10fb0:	ldr	pc, [ip, #212]!	; 0xd4

00010fb4 <exit@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #24, 20	; 0x18000
   10fbc:	ldr	pc, [ip, #204]!	; 0xcc

00010fc0 <strlen@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #24, 20	; 0x18000
   10fc8:	ldr	pc, [ip, #196]!	; 0xc4

00010fcc <strchr@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #24, 20	; 0x18000
   10fd4:	ldr	pc, [ip, #188]!	; 0xbc

00010fd8 <__errno_location@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #24, 20	; 0x18000
   10fe0:	ldr	pc, [ip, #180]!	; 0xb4

00010fe4 <__sprintf_chk@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #24, 20	; 0x18000
   10fec:	ldr	pc, [ip, #172]!	; 0xac

00010ff0 <__cxa_atexit@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #24, 20	; 0x18000
   10ff8:	ldr	pc, [ip, #164]!	; 0xa4

00010ffc <memset@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #24, 20	; 0x18000
   11004:	ldr	pc, [ip, #156]!	; 0x9c

00011008 <__printf_chk@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #24, 20	; 0x18000
   11010:	ldr	pc, [ip, #148]!	; 0x94

00011014 <fileno@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #24, 20	; 0x18000
   1101c:	ldr	pc, [ip, #140]!	; 0x8c

00011020 <strtoumax@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #24, 20	; 0x18000
   11028:	ldr	pc, [ip, #132]!	; 0x84

0001102c <__fprintf_chk@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #24, 20	; 0x18000
   11034:	ldr	pc, [ip, #124]!	; 0x7c

00011038 <fclose@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #24, 20	; 0x18000
   11040:	ldr	pc, [ip, #116]!	; 0x74

00011044 <fseeko64@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #24, 20	; 0x18000
   1104c:	ldr	pc, [ip, #108]!	; 0x6c

00011050 <setlocale@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #24, 20	; 0x18000
   11058:	ldr	pc, [ip, #100]!	; 0x64

0001105c <toupper@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #24, 20	; 0x18000
   11064:	ldr	pc, [ip, #92]!	; 0x5c

00011068 <strrchr@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #24, 20	; 0x18000
   11070:	ldr	pc, [ip, #84]!	; 0x54

00011074 <nl_langinfo@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #24, 20	; 0x18000
   1107c:	ldr	pc, [ip, #76]!	; 0x4c

00011080 <bindtextdomain@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #24, 20	; 0x18000
   11088:	ldr	pc, [ip, #68]!	; 0x44

0001108c <fputs@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #24, 20	; 0x18000
   11094:	ldr	pc, [ip, #60]!	; 0x3c

00011098 <strncmp@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #24, 20	; 0x18000
   110a0:	ldr	pc, [ip, #52]!	; 0x34

000110a4 <abort@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #24, 20	; 0x18000
   110ac:	ldr	pc, [ip, #44]!	; 0x2c

000110b0 <close@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #24, 20	; 0x18000
   110b8:	ldr	pc, [ip, #36]!	; 0x24

000110bc <__assert_fail@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #24, 20	; 0x18000
   110c4:	ldr	pc, [ip, #28]!

Disassembly of section .text:

000110c8 <.text>:
   110c8:	mov	fp, #0
   110cc:	mov	lr, #0
   110d0:	pop	{r1}		; (ldr r1, [sp], #4)
   110d4:	mov	r2, sp
   110d8:	push	{r2}		; (str r2, [sp, #-4]!)
   110dc:	push	{r0}		; (str r0, [sp, #-4]!)
   110e0:	ldr	ip, [pc, #16]	; 110f8 <__assert_fail@plt+0x3c>
   110e4:	push	{ip}		; (str ip, [sp, #-4]!)
   110e8:	ldr	r0, [pc, #12]	; 110fc <__assert_fail@plt+0x40>
   110ec:	ldr	r3, [pc, #12]	; 11100 <__assert_fail@plt+0x44>
   110f0:	bl	10f78 <__libc_start_main@plt>
   110f4:	bl	110a4 <abort@plt>
   110f8:	andeq	r6, r1, ip, asr #19
   110fc:	andeq	r1, r1, r0, asr r4
   11100:	andeq	r6, r1, ip, ror #18
   11104:	ldr	r3, [pc, #20]	; 11120 <__assert_fail@plt+0x64>
   11108:	ldr	r2, [pc, #20]	; 11124 <__assert_fail@plt+0x68>
   1110c:	add	r3, pc, r3
   11110:	ldr	r2, [r3, r2]
   11114:	cmp	r2, #0
   11118:	bxeq	lr
   1111c:	b	10f90 <__gmon_start__@plt>
   11120:	andeq	r7, r1, ip, ror #29
   11124:	andeq	r0, r0, r4, ror #1
   11128:	ldr	r0, [pc, #24]	; 11148 <__assert_fail@plt+0x8c>
   1112c:	ldr	r3, [pc, #24]	; 1114c <__assert_fail@plt+0x90>
   11130:	cmp	r3, r0
   11134:	bxeq	lr
   11138:	ldr	r3, [pc, #16]	; 11150 <__assert_fail@plt+0x94>
   1113c:	cmp	r3, #0
   11140:	bxeq	lr
   11144:	bx	r3
   11148:	andeq	r9, r2, r8, lsr r1
   1114c:	andeq	r9, r2, r8, lsr r1
   11150:	andeq	r0, r0, r0
   11154:	ldr	r0, [pc, #36]	; 11180 <__assert_fail@plt+0xc4>
   11158:	ldr	r1, [pc, #36]	; 11184 <__assert_fail@plt+0xc8>
   1115c:	sub	r1, r1, r0
   11160:	asr	r1, r1, #2
   11164:	add	r1, r1, r1, lsr #31
   11168:	asrs	r1, r1, #1
   1116c:	bxeq	lr
   11170:	ldr	r3, [pc, #16]	; 11188 <__assert_fail@plt+0xcc>
   11174:	cmp	r3, #0
   11178:	bxeq	lr
   1117c:	bx	r3
   11180:	andeq	r9, r2, r8, lsr r1
   11184:	andeq	r9, r2, r8, lsr r1
   11188:	andeq	r0, r0, r0
   1118c:	push	{r4, lr}
   11190:	ldr	r4, [pc, #24]	; 111b0 <__assert_fail@plt+0xf4>
   11194:	ldrb	r3, [r4]
   11198:	cmp	r3, #0
   1119c:	popne	{r4, pc}
   111a0:	bl	11128 <__assert_fail@plt+0x6c>
   111a4:	mov	r3, #1
   111a8:	strb	r3, [r4]
   111ac:	pop	{r4, pc}
   111b0:	andeq	r9, r2, r8, asr r1
   111b4:	b	11154 <__assert_fail@plt+0x98>
   111b8:	push	{fp, lr}
   111bc:	mov	fp, sp
   111c0:	sub	sp, sp, #56	; 0x38
   111c4:	mov	r8, r0
   111c8:	cmp	r0, #0
   111cc:	bne	1140c <__assert_fail@plt+0x350>
   111d0:	movw	r1, #27163	; 0x6a1b
   111d4:	mov	r0, #0
   111d8:	mov	r2, #5
   111dc:	movt	r1, #1
   111e0:	bl	10ef4 <dcgettext@plt>
   111e4:	mov	r1, r0
   111e8:	movw	r0, #46184	; 0xb468
   111ec:	movt	r0, #2
   111f0:	ldr	r2, [r0]
   111f4:	mov	r0, #1
   111f8:	bl	11008 <__printf_chk@plt>
   111fc:	movw	r1, #27198	; 0x6a3e
   11200:	mov	r0, #0
   11204:	mov	r2, #5
   11208:	movt	r1, #1
   1120c:	bl	10ef4 <dcgettext@plt>
   11210:	movw	r9, #37204	; 0x9154
   11214:	movt	r9, #2
   11218:	ldr	r1, [r9]
   1121c:	bl	10e4c <fputs_unlocked@plt>
   11220:	movw	r1, #27694	; 0x6c2e
   11224:	mov	r0, #0
   11228:	mov	r2, #5
   1122c:	movt	r1, #1
   11230:	bl	10ef4 <dcgettext@plt>
   11234:	ldr	r1, [r9]
   11238:	bl	10e4c <fputs_unlocked@plt>
   1123c:	movw	r1, #27739	; 0x6c5b
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	movt	r1, #1
   1124c:	bl	10ef4 <dcgettext@plt>
   11250:	ldr	r1, [r9]
   11254:	bl	10e4c <fputs_unlocked@plt>
   11258:	movw	r1, #27793	; 0x6c91
   1125c:	mov	r0, #0
   11260:	mov	r2, #5
   11264:	movt	r1, #1
   11268:	bl	10ef4 <dcgettext@plt>
   1126c:	ldr	r1, [r9]
   11270:	bl	10e4c <fputs_unlocked@plt>
   11274:	movw	r1, #28166	; 0x6e06
   11278:	mov	r0, #0
   1127c:	mov	r2, #5
   11280:	movt	r1, #1
   11284:	bl	10ef4 <dcgettext@plt>
   11288:	ldr	r1, [r9]
   1128c:	bl	10e4c <fputs_unlocked@plt>
   11290:	movw	r1, #28591	; 0x6faf
   11294:	mov	r0, #0
   11298:	mov	r2, #5
   1129c:	movt	r1, #1
   112a0:	bl	10ef4 <dcgettext@plt>
   112a4:	ldr	r1, [r9]
   112a8:	bl	10e4c <fputs_unlocked@plt>
   112ac:	movw	r1, #29002	; 0x714a
   112b0:	mov	r0, #0
   112b4:	mov	r2, #5
   112b8:	movt	r1, #1
   112bc:	bl	10ef4 <dcgettext@plt>
   112c0:	ldr	r1, [r9]
   112c4:	bl	10e4c <fputs_unlocked@plt>
   112c8:	movw	r0, #32440	; 0x7eb8
   112cc:	mov	r6, sp
   112d0:	movt	r0, #1
   112d4:	mov	r1, r6
   112d8:	ldm	r0!, {r2, r3, r4, r5}
   112dc:	stmia	r1!, {r2, r3, r4, r5}
   112e0:	ldm	r0!, {r2, r3, r4, r5, r7}
   112e4:	stmia	r1!, {r2, r3, r4, r5, r7}
   112e8:	ldm	r0, {r2, r3, r4, r5, r7}
   112ec:	stm	r1, {r2, r3, r4, r5, r7}
   112f0:	movw	r1, #29889	; 0x74c1
   112f4:	movw	r5, #29474	; 0x7322
   112f8:	movt	r1, #1
   112fc:	movt	r5, #1
   11300:	mov	r0, r5
   11304:	bl	10e64 <strcmp@plt>
   11308:	cmp	r0, #0
   1130c:	ldrne	r1, [r6, #8]!
   11310:	cmpne	r1, #0
   11314:	bne	11300 <__assert_fail@plt+0x244>
   11318:	ldr	r6, [r6, #4]
   1131c:	movw	r1, #29984	; 0x7520
   11320:	mov	r0, #0
   11324:	mov	r2, #5
   11328:	movt	r1, #1
   1132c:	bl	10ef4 <dcgettext@plt>
   11330:	movw	r2, #29511	; 0x7347
   11334:	movw	r3, #30007	; 0x7537
   11338:	mov	r1, r0
   1133c:	mov	r0, #1
   11340:	movt	r2, #1
   11344:	movt	r3, #1
   11348:	bl	11008 <__printf_chk@plt>
   1134c:	cmp	r6, #0
   11350:	mov	r0, #5
   11354:	mov	r1, #0
   11358:	moveq	r6, r5
   1135c:	bl	11050 <setlocale@plt>
   11360:	cmp	r0, #0
   11364:	beq	1139c <__assert_fail@plt+0x2e0>
   11368:	movw	r1, #30047	; 0x755f
   1136c:	mov	r2, #3
   11370:	movt	r1, #1
   11374:	bl	11098 <strncmp@plt>
   11378:	cmp	r0, #0
   1137c:	beq	1139c <__assert_fail@plt+0x2e0>
   11380:	movw	r1, #30051	; 0x7563
   11384:	mov	r0, #0
   11388:	mov	r2, #5
   1138c:	movt	r1, #1
   11390:	bl	10ef4 <dcgettext@plt>
   11394:	ldr	r1, [r9]
   11398:	bl	10e4c <fputs_unlocked@plt>
   1139c:	movw	r1, #30122	; 0x75aa
   113a0:	mov	r0, #0
   113a4:	mov	r2, #5
   113a8:	movt	r1, #1
   113ac:	bl	10ef4 <dcgettext@plt>
   113b0:	movw	r2, #30007	; 0x7537
   113b4:	mov	r1, r0
   113b8:	mov	r0, #1
   113bc:	mov	r3, r5
   113c0:	movt	r2, #1
   113c4:	bl	11008 <__printf_chk@plt>
   113c8:	movw	r1, #30149	; 0x75c5
   113cc:	mov	r0, #0
   113d0:	mov	r2, #5
   113d4:	movt	r1, #1
   113d8:	bl	10ef4 <dcgettext@plt>
   113dc:	movw	r3, #30199	; 0x75f7
   113e0:	mov	r1, r0
   113e4:	movw	r0, #29917	; 0x74dd
   113e8:	cmp	r6, r5
   113ec:	mov	r2, r6
   113f0:	movt	r0, #1
   113f4:	movt	r3, #1
   113f8:	moveq	r3, r0
   113fc:	mov	r0, #1
   11400:	bl	11008 <__printf_chk@plt>
   11404:	mov	r0, r8
   11408:	bl	10fb4 <exit@plt>
   1140c:	movw	r0, #37192	; 0x9148
   11410:	movw	r1, #27124	; 0x69f4
   11414:	mov	r2, #5
   11418:	movt	r0, #2
   1141c:	movt	r1, #1
   11420:	ldr	r5, [r0]
   11424:	mov	r0, #0
   11428:	bl	10ef4 <dcgettext@plt>
   1142c:	mov	r2, r0
   11430:	movw	r0, #46184	; 0xb468
   11434:	mov	r1, #1
   11438:	movt	r0, #2
   1143c:	ldr	r3, [r0]
   11440:	mov	r0, r5
   11444:	bl	1102c <__fprintf_chk@plt>
   11448:	b	11404 <__assert_fail@plt+0x348>
   1144c:	nop	{0}
   11450:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11454:	add	fp, sp, #28
   11458:	sub	sp, sp, #412	; 0x19c
   1145c:	mov	r4, r0
   11460:	ldr	r0, [r1]
   11464:	mov	r5, r1
   11468:	bl	13794 <__assert_fail@plt+0x26d8>
   1146c:	movw	r1, #30199	; 0x75f7
   11470:	mov	r0, #6
   11474:	movt	r1, #1
   11478:	bl	11050 <setlocale@plt>
   1147c:	movw	r6, #29515	; 0x734b
   11480:	movw	r1, #29477	; 0x7325
   11484:	movt	r6, #1
   11488:	movt	r1, #1
   1148c:	mov	r0, r6
   11490:	bl	11080 <bindtextdomain@plt>
   11494:	mov	r0, r6
   11498:	bl	10f0c <textdomain@plt>
   1149c:	movw	r0, #13892	; 0x3644
   114a0:	movt	r0, #1
   114a4:	bl	169d0 <__assert_fail@plt+0x5914>
   114a8:	movw	r6, #29501	; 0x733d
   114ac:	movw	r7, #32328	; 0x7e48
   114b0:	movw	r8, #29509	; 0x7345
   114b4:	mov	r9, #0
   114b8:	mov	sl, #1
   114bc:	movt	r6, #1
   114c0:	movt	r7, #1
   114c4:	movt	r8, #1
   114c8:	b	11534 <__assert_fail@plt+0x478>
   114cc:	cmp	r0, #65	; 0x41
   114d0:	bne	11520 <__assert_fail@plt+0x464>
   114d4:	mov	r0, #3
   114d8:	mov	r1, r8
   114dc:	bl	11050 <setlocale@plt>
   114e0:	mov	r0, #0
   114e4:	mov	r1, r8
   114e8:	bl	11050 <setlocale@plt>
   114ec:	b	11534 <__assert_fail@plt+0x478>
   114f0:	cmp	r0, #115	; 0x73
   114f4:	bne	11508 <__assert_fail@plt+0x44c>
   114f8:	movw	r0, #37211	; 0x915b
   114fc:	movt	r0, #2
   11500:	strb	sl, [r0]
   11504:	b	11534 <__assert_fail@plt+0x478>
   11508:	cmp	r0, #116	; 0x74
   1150c:	bne	12154 <__assert_fail@plt+0x1098>
   11510:	movw	r0, #37212	; 0x915c
   11514:	movt	r0, #2
   11518:	strb	sl, [r0]
   1151c:	b	11534 <__assert_fail@plt+0x478>
   11520:	cmp	r0, #67	; 0x43
   11524:	bne	12154 <__assert_fail@plt+0x1098>
   11528:	movw	r0, #37209	; 0x9159
   1152c:	movt	r0, #2
   11530:	strb	sl, [r0]
   11534:	mov	r0, r4
   11538:	mov	r1, r5
   1153c:	mov	r2, r6
   11540:	mov	r3, r7
   11544:	str	r9, [sp]
   11548:	bl	10f9c <getopt_long@plt>
   1154c:	cmp	r0, #98	; 0x62
   11550:	ble	1157c <__assert_fail@plt+0x4c0>
   11554:	cmp	r0, #114	; 0x72
   11558:	bgt	114f0 <__assert_fail@plt+0x434>
   1155c:	cmp	r0, #99	; 0x63
   11560:	beq	11528 <__assert_fail@plt+0x46c>
   11564:	cmp	r0, #100	; 0x64
   11568:	bne	12154 <__assert_fail@plt+0x1098>
   1156c:	movw	r0, #37210	; 0x915a
   11570:	movt	r0, #2
   11574:	strb	sl, [r0]
   11578:	b	11534 <__assert_fail@plt+0x478>
   1157c:	cmp	r0, #64	; 0x40
   11580:	bgt	114cc <__assert_fail@plt+0x410>
   11584:	cmn	r0, #1
   11588:	bne	11fcc <__assert_fail@plt+0xf10>
   1158c:	movw	r7, #37184	; 0x9140
   11590:	movw	sl, #37213	; 0x915d
   11594:	mov	r2, #2
   11598:	mov	r6, #2
   1159c:	movt	r7, #2
   115a0:	movt	sl, #2
   115a4:	ldr	r0, [r7]
   115a8:	sub	r9, r4, r0
   115ac:	sub	r0, r9, #2
   115b0:	clz	r0, r0
   115b4:	lsr	r3, r0, #5
   115b8:	movw	r0, #37210	; 0x915a
   115bc:	movt	r0, #2
   115c0:	ldrb	r0, [r0]
   115c4:	eor	r1, r0, #1
   115c8:	and	r1, r3, r1
   115cc:	strb	r1, [sl]
   115d0:	movw	r1, #37211	; 0x915b
   115d4:	movt	r1, #2
   115d8:	ldrb	r1, [r1]
   115dc:	teq	r0, r1
   115e0:	movwne	r2, #1
   115e4:	cmp	r0, #0
   115e8:	movwne	r6, #1
   115ec:	cmp	r1, #0
   115f0:	movwne	r6, #2
   115f4:	cmp	r9, r2
   115f8:	blt	1202c <__assert_fail@plt+0xf70>
   115fc:	cmp	r6, r9
   11600:	str	r3, [sp, #36]	; 0x24
   11604:	blt	1205c <__assert_fail@plt+0xfa0>
   11608:	mov	r0, #24
   1160c:	bl	157f0 <__assert_fail@plt+0x4734>
   11610:	mov	r8, #0
   11614:	str	r0, [sp, #104]	; 0x68
   11618:	str	r0, [sp, #108]	; 0x6c
   1161c:	add	r1, sp, #104	; 0x68
   11620:	str	r8, [r0, #4]
   11624:	ldr	r0, [r7]
   11628:	ldr	r0, [r5, r0, lsl #2]
   1162c:	bl	12240 <__assert_fail@plt+0x1184>
   11630:	mov	r6, #1
   11634:	cmp	r0, #0
   11638:	beq	11fc0 <__assert_fail@plt+0xf04>
   1163c:	cmp	r9, #2
   11640:	bne	1167c <__assert_fail@plt+0x5c0>
   11644:	mov	r0, #24
   11648:	bl	157f0 <__assert_fail@plt+0x4734>
   1164c:	mov	r1, #0
   11650:	str	r0, [sp, #64]	; 0x40
   11654:	str	r0, [sp, #68]	; 0x44
   11658:	add	r8, sp, #64	; 0x40
   1165c:	str	r1, [r0, #4]
   11660:	ldr	r0, [r7]
   11664:	mov	r1, r8
   11668:	add	r0, r5, r0, lsl #2
   1166c:	ldr	r0, [r0, #4]
   11670:	bl	12240 <__assert_fail@plt+0x1184>
   11674:	cmp	r0, #0
   11678:	beq	11fc0 <__assert_fail@plt+0xf04>
   1167c:	add	r0, sp, #104	; 0x68
   11680:	bl	13338 <__assert_fail@plt+0x227c>
   11684:	movw	r0, #37209	; 0x9159
   11688:	movt	r0, #2
   1168c:	ldrb	r0, [r0]
   11690:	cmp	r0, #1
   11694:	bne	11718 <__assert_fail@plt+0x65c>
   11698:	add	r5, sp, #144	; 0x90
   1169c:	mov	r1, #0
   116a0:	mov	r2, #256	; 0x100
   116a4:	mov	r6, #0
   116a8:	mov	r4, #256	; 0x100
   116ac:	mov	r0, r5
   116b0:	bl	10ffc <memset@plt>
   116b4:	mvn	r0, #0
   116b8:	subs	r1, r0, #1
   116bc:	sbc	r0, r0, #0
   116c0:	str	r1, [sp, #112]	; 0x70
   116c4:	mov	r1, #0
   116c8:	str	r0, [sp, #116]	; 0x74
   116cc:	add	r0, sp, #104	; 0x68
   116d0:	bl	12d94 <__assert_fail@plt+0x1cd8>
   116d4:	cmn	r0, #1
   116d8:	beq	11710 <__assert_fail@plt+0x654>
   116dc:	mov	r4, #256	; 0x100
   116e0:	mov	r7, #1
   116e4:	add	r6, sp, #104	; 0x68
   116e8:	ldrb	r1, [r5, r0]
   116ec:	strb	r7, [r5, r0]
   116f0:	eor	r0, r1, #1
   116f4:	mov	r1, #0
   116f8:	sub	r4, r4, r0
   116fc:	mov	r0, r6
   11700:	bl	12d94 <__assert_fail@plt+0x1cd8>
   11704:	cmn	r0, #1
   11708:	bne	116e8 <__assert_fail@plt+0x62c>
   1170c:	asr	r6, r4, #31
   11710:	str	r4, [sp, #120]	; 0x78
   11714:	str	r6, [sp, #124]	; 0x7c
   11718:	ldr	r0, [sp, #128]	; 0x80
   1171c:	cmp	r0, #0
   11720:	bne	12168 <__assert_fail@plt+0x10ac>
   11724:	cmp	r8, #0
   11728:	beq	11b5c <__assert_fail@plt+0xaa0>
   1172c:	ldr	r4, [sp, #120]	; 0x78
   11730:	ldr	r5, [sp, #124]	; 0x7c
   11734:	mov	r0, r8
   11738:	bl	13338 <__assert_fail@plt+0x227c>
   1173c:	mov	r0, r8
   11740:	ldr	r3, [r0, #16]!
   11744:	ldr	r2, [r0, #4]
   11748:	str	r0, [sp, #48]	; 0x30
   1174c:	subs	r0, r4, r3
   11750:	sbcs	r0, r5, r2
   11754:	bcc	11784 <__assert_fail@plt+0x6c8>
   11758:	ldr	r0, [r8, #24]
   1175c:	cmp	r0, #1
   11760:	bne	11788 <__assert_fail@plt+0x6cc>
   11764:	subs	r0, r4, r3
   11768:	mov	r3, r4
   1176c:	sbc	r1, r5, r2
   11770:	ldr	r2, [r8, #28]
   11774:	strd	r0, [r2, #16]
   11778:	mov	r2, r5
   1177c:	ldr	r0, [sp, #48]	; 0x30
   11780:	strd	r4, [r0]
   11784:	ldr	r0, [r8, #24]
   11788:	cmp	r0, #2
   1178c:	bcs	12188 <__assert_fail@plt+0x10cc>
   11790:	ldrb	r1, [sl]
   11794:	cmp	r1, #0
   11798:	beq	11aa0 <__assert_fail@plt+0x9e4>
   1179c:	ldrb	r0, [r8, #32]
   117a0:	cmp	r0, #0
   117a4:	bne	12194 <__assert_fail@plt+0x10d8>
   117a8:	ldrb	r0, [r8, #34]	; 0x22
   117ac:	cmp	r0, #0
   117b0:	bne	121a0 <__assert_fail@plt+0x10e4>
   117b4:	movw	r0, #37209	; 0x9159
   117b8:	ldr	r7, [r8, #4]
   117bc:	movt	r0, #2
   117c0:	ldrb	r0, [r0]
   117c4:	cmp	r0, #0
   117c8:	bne	11a34 <__assert_fail@plt+0x978>
   117cc:	ldrb	r0, [r8, #33]	; 0x21
   117d0:	cmp	r0, #0
   117d4:	beq	11a34 <__assert_fail@plt+0x978>
   117d8:	add	r0, sp, #104	; 0x68
   117dc:	str	r8, [sp, #60]	; 0x3c
   117e0:	str	r3, [sp, #12]
   117e4:	str	r7, [sp, #16]
   117e8:	str	r2, [sp, #20]
   117ec:	str	r4, [sp, #24]
   117f0:	str	r9, [sp, #32]
   117f4:	add	r0, r0, #16
   117f8:	str	r0, [sp, #44]	; 0x2c
   117fc:	ldr	r0, [sp, #108]	; 0x6c
   11800:	str	r0, [sp, #8]
   11804:	bl	10fa8 <__ctype_b_loc@plt>
   11808:	ldr	r0, [r0]
   1180c:	vmov.i32	q8, #0	; 0x00000000
   11810:	mov	r1, #0
   11814:	vmov.i16	d20, #1	; 0x0001
   11818:	vmov.i32	q9, #0	; 0x00000000
   1181c:	add	r2, r0, r1
   11820:	add	r1, r1, #8
   11824:	vld1.16	{d21}, [r2]
   11828:	cmp	r1, #512	; 0x200
   1182c:	vshr.u16	d22, d21, #9
   11830:	vshr.u16	d21, d21, #8
   11834:	vand	d22, d22, d20
   11838:	vand	d21, d21, d20
   1183c:	vaddw.u16	q9, q9, d22
   11840:	vaddw.u16	q8, q8, d21
   11844:	bne	1181c <__assert_fail@plt+0x760>
   11848:	vext.8	q10, q8, q8, #8
   1184c:	ldr	r2, [sp, #60]	; 0x3c
   11850:	vext.8	q11, q9, q8, #8
   11854:	mvn	r8, #0
   11858:	ldr	r6, [sp, #44]	; 0x2c
   1185c:	mov	sl, #1
   11860:	mov	r7, #1
   11864:	str	r5, [sp, #28]
   11868:	vadd.i32	q8, q8, q10
   1186c:	subs	r0, r8, #1
   11870:	vadd.i32	q9, q9, q11
   11874:	vdup.32	q10, d16[1]
   11878:	sbc	r1, r8, #0
   1187c:	str	r0, [sp, #112]	; 0x70
   11880:	vdup.32	q11, d18[1]
   11884:	vadd.i32	q8, q8, q10
   11888:	str	r1, [sp, #116]	; 0x74
   1188c:	vadd.i32	q9, q9, q11
   11890:	str	r0, [r2, #8]!
   11894:	vmov.32	r0, d16[0]
   11898:	vmov.32	r9, d18[0]
   1189c:	str	r0, [sp, #40]	; 0x28
   118a0:	add	r0, sp, #104	; 0x68
   118a4:	str	r2, [sp, #56]	; 0x38
   118a8:	str	r1, [r2, #4]
   118ac:	ldr	r4, [sp, #40]	; 0x28
   118b0:	add	r0, r0, #8
   118b4:	str	r0, [sp, #52]	; 0x34
   118b8:	add	r0, sp, #104	; 0x68
   118bc:	add	r1, sp, #144	; 0x90
   118c0:	bl	12d94 <__assert_fail@plt+0x1cd8>
   118c4:	mov	r5, r0
   118c8:	ldr	r0, [sp, #60]	; 0x3c
   118cc:	sub	r1, fp, #36	; 0x24
   118d0:	bl	12d94 <__assert_fail@plt+0x1cd8>
   118d4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   118d8:	tst	sl, #1
   118dc:	cmpne	r1, #2
   118e0:	bne	11900 <__assert_fail@plt+0x844>
   118e4:	cmp	r1, #2
   118e8:	bne	11918 <__assert_fail@plt+0x85c>
   118ec:	ldr	r1, [sp, #52]	; 0x34
   118f0:	ldrd	r2, [r1]
   118f4:	ldr	r1, [sp, #56]	; 0x38
   118f8:	ldm	r1, {r1, r7}
   118fc:	b	119a4 <__assert_fail@plt+0x8e8>
   11900:	ldr	r2, [sp, #144]	; 0x90
   11904:	subs	r3, r2, #2
   11908:	movwne	r3, #1
   1190c:	tst	r7, r3
   11910:	bne	1191c <__assert_fail@plt+0x860>
   11914:	b	1215c <__assert_fail@plt+0x10a0>
   11918:	ldr	r2, [sp, #144]	; 0x90
   1191c:	ldr	r3, [sp, #108]	; 0x6c
   11920:	cmp	r2, #1
   11924:	mov	r2, r9
   11928:	moveq	r2, r4
   1192c:	sub	r2, r2, #1
   11930:	ldr	r3, [r3, #4]
   11934:	str	r3, [sp, #108]	; 0x6c
   11938:	ldr	r3, [sp, #52]	; 0x34
   1193c:	str	r8, [r3]
   11940:	str	r8, [r3, #4]
   11944:	ldr	r7, [sp, #60]	; 0x3c
   11948:	ldr	r3, [r7, #4]
   1194c:	ldr	r3, [r3, #4]
   11950:	str	r3, [r7, #4]
   11954:	ldr	r3, [sp, #56]	; 0x38
   11958:	str	r8, [r3]
   1195c:	str	r8, [r3, #4]
   11960:	ldm	r6, {r3, r7}
   11964:	subs	r2, r3, r2
   11968:	sbc	r3, r7, #0
   1196c:	ldr	r7, [sp, #48]	; 0x30
   11970:	cmp	r1, #1
   11974:	mov	r1, r9
   11978:	strd	r2, [r6]
   1197c:	moveq	r1, r4
   11980:	sub	r1, r1, #1
   11984:	ldrd	r2, [r7]
   11988:	subs	r2, r2, r1
   1198c:	mvn	r1, #0
   11990:	sbc	r3, r3, #0
   11994:	strd	r2, [r7]
   11998:	mvn	r2, #0
   1199c:	mvn	r3, #0
   119a0:	mvn	r7, #0
   119a4:	cmn	r5, #1
   119a8:	eorne	r1, r1, r8
   119ac:	eorne	r7, r7, r8
   119b0:	orrne	r1, r1, r7
   119b4:	clzne	r1, r1
   119b8:	lsrne	sl, r1, #5
   119bc:	eorne	r1, r2, r8
   119c0:	eorne	r2, r3, r8
   119c4:	orrne	r1, r1, r2
   119c8:	clzne	r1, r1
   119cc:	lsrne	r7, r1, #5
   119d0:	cmnne	r0, #1
   119d4:	bne	118b8 <__assert_fail@plt+0x7fc>
   119d8:	ldr	r0, [sp, #44]	; 0x2c
   119dc:	ldrd	r4, [r0]
   119e0:	ldr	r0, [sp, #24]
   119e4:	subs	r0, r0, r4
   119e8:	ldr	r0, [sp, #28]
   119ec:	sbcs	r0, r0, r5
   119f0:	bcc	121c4 <__assert_fail@plt+0x1108>
   119f4:	ldr	r0, [sp, #48]	; 0x30
   119f8:	ldr	r2, [sp, #12]
   119fc:	ldrd	r0, [r0]
   11a00:	subs	r2, r2, r0
   11a04:	ldr	r2, [sp, #20]
   11a08:	sbcs	r2, r2, r1
   11a0c:	bcc	121c4 <__assert_fail@plt+0x1108>
   11a10:	ldr	r2, [sp, #8]
   11a14:	ldr	r7, [sp, #16]
   11a18:	ldr	r8, [sp, #60]	; 0x3c
   11a1c:	ldr	r9, [sp, #32]
   11a20:	movw	sl, #37213	; 0x915d
   11a24:	movt	sl, #2
   11a28:	str	r2, [sp, #108]	; 0x6c
   11a2c:	str	r7, [r8, #4]
   11a30:	b	11a3c <__assert_fail@plt+0x980>
   11a34:	mov	r0, r3
   11a38:	mov	r1, r2
   11a3c:	subs	r2, r0, r4
   11a40:	sbcs	r2, r1, r5
   11a44:	bcs	11adc <__assert_fail@plt+0xa20>
   11a48:	movw	r2, #37212	; 0x915c
   11a4c:	movt	r2, #2
   11a50:	ldrb	r2, [r2]
   11a54:	cmp	r2, #0
   11a58:	bne	11adc <__assert_fail@plt+0xa20>
   11a5c:	orrs	r2, r0, r1
   11a60:	beq	121e8 <__assert_fail@plt+0x112c>
   11a64:	ldrb	r2, [sl]
   11a68:	cmp	r2, #0
   11a6c:	beq	121f4 <__assert_fail@plt+0x1138>
   11a70:	ldr	r2, [r7]
   11a74:	cmp	r2, #4
   11a78:	bhi	121e4 <__assert_fail@plt+0x1128>
   11a7c:	add	r3, pc, #0
   11a80:	ldr	pc, [r3, r2, lsl #2]
   11a84:	muleq	r1, r8, sl
   11a88:			; <UNDEFINED> instruction: 0x00011ab4
   11a8c:	andeq	r2, r1, r4, lsl r2
   11a90:	andeq	r2, r1, r4, ror #3
   11a94:	muleq	r1, r8, sl
   11a98:	add	r7, r7, #8
   11a9c:	b	11ab8 <__assert_fail@plt+0x9fc>
   11aa0:	cmp	r0, #0
   11aa4:	beq	11b5c <__assert_fail@plt+0xaa0>
   11aa8:	movw	r1, #31675	; 0x7bbb
   11aac:	movt	r1, #1
   11ab0:	b	121a8 <__assert_fail@plt+0x10ec>
   11ab4:	add	r7, r7, #9
   11ab8:	subs	r2, r4, r0
   11abc:	mov	r0, r8
   11ac0:	sbc	r3, r5, r1
   11ac4:	ldrb	r1, [r7]
   11ac8:	bl	13204 <__assert_fail@plt+0x2148>
   11acc:	ldr	r0, [sp, #48]	; 0x30
   11ad0:	mov	r1, r5
   11ad4:	strd	r4, [r0]
   11ad8:	mov	r0, r4
   11adc:	movw	r2, #37209	; 0x9159
   11ae0:	movt	r2, #2
   11ae4:	ldrb	r2, [r2]
   11ae8:	cmp	r2, #1
   11aec:	bne	11b5c <__assert_fail@plt+0xaa0>
   11af0:	ldrb	r2, [sp, #137]	; 0x89
   11af4:	cmp	r2, #0
   11af8:	beq	11b5c <__assert_fail@plt+0xaa0>
   11afc:	eor	r0, r0, r4
   11b00:	eor	r1, r1, r5
   11b04:	orrs	r0, r0, r1
   11b08:	bne	11b50 <__assert_fail@plt+0xa94>
   11b0c:	mvn	r0, #0
   11b10:	mov	r1, #0
   11b14:	subs	r2, r0, #1
   11b18:	sbc	r3, r0, #0
   11b1c:	mov	r0, r8
   11b20:	strd	r2, [r8, #8]
   11b24:	bl	12d94 <__assert_fail@plt+0x1cd8>
   11b28:	cmn	r0, #1
   11b2c:	beq	11b50 <__assert_fail@plt+0xa94>
   11b30:	mov	r5, r0
   11b34:	mov	r0, r8
   11b38:	mov	r1, #0
   11b3c:	bl	12d94 <__assert_fail@plt+0x1cd8>
   11b40:	cmn	r0, #1
   11b44:	beq	11b5c <__assert_fail@plt+0xaa0>
   11b48:	cmp	r0, r5
   11b4c:	beq	11b34 <__assert_fail@plt+0xa78>
   11b50:	movw	r1, #31568	; 0x7b50
   11b54:	movt	r1, #1
   11b58:	b	121a8 <__assert_fail@plt+0x10ec>
   11b5c:	movw	r0, #37200	; 0x9150
   11b60:	mov	r1, #2
   11b64:	movt	r0, #2
   11b68:	ldr	r0, [r0]
   11b6c:	bl	13730 <__assert_fail@plt+0x2674>
   11b70:	movw	r0, #37211	; 0x915b
   11b74:	cmp	r9, #1
   11b78:	movt	r0, #2
   11b7c:	ldrb	r0, [r0]
   11b80:	bne	11bb8 <__assert_fail@plt+0xafc>
   11b84:	cmp	r0, #0
   11b88:	beq	11bb8 <__assert_fail@plt+0xafc>
   11b8c:	movw	r0, #37209	; 0x9159
   11b90:	movw	r2, #37214	; 0x915e
   11b94:	movt	r0, #2
   11b98:	movt	r2, #2
   11b9c:	ldrb	r1, [r0]
   11ba0:	add	r0, sp, #104	; 0x68
   11ba4:	bl	12a98 <__assert_fail@plt+0x19dc>
   11ba8:	movw	r0, #11436	; 0x2cac
   11bac:	movt	r0, #1
   11bb0:	bl	12b18 <__assert_fail@plt+0x1a5c>
   11bb4:	b	11fac <__assert_fail@plt+0xef0>
   11bb8:	movw	r1, #37210	; 0x915a
   11bbc:	cmp	r9, #1
   11bc0:	movt	r1, #2
   11bc4:	ldrb	r1, [r1]
   11bc8:	bne	11c60 <__assert_fail@plt+0xba4>
   11bcc:	cmp	r1, #0
   11bd0:	beq	11c60 <__assert_fail@plt+0xba4>
   11bd4:	movw	r0, #37209	; 0x9159
   11bd8:	movw	r2, #45662	; 0xb25e
   11bdc:	movt	r0, #2
   11be0:	movt	r2, #2
   11be4:	ldrb	r1, [r0]
   11be8:	add	r0, sp, #104	; 0x68
   11bec:	bl	12a98 <__assert_fail@plt+0x19dc>
   11bf0:	movw	r4, #37470	; 0x925e
   11bf4:	movw	r6, #37204	; 0x9154
   11bf8:	movt	r4, #2
   11bfc:	movt	r6, #2
   11c00:	mov	r0, r4
   11c04:	mov	r1, #8192	; 0x2000
   11c08:	bl	12cf8 <__assert_fail@plt+0x1c3c>
   11c0c:	cmp	r0, #0
   11c10:	beq	11fac <__assert_fail@plt+0xef0>
   11c14:	ldr	r3, [r6]
   11c18:	mov	r5, r0
   11c1c:	mov	r0, r4
   11c20:	mov	r1, #1
   11c24:	mov	r2, r5
   11c28:	bl	10ed0 <fwrite_unlocked@plt>
   11c2c:	cmp	r0, r5
   11c30:	beq	11c00 <__assert_fail@plt+0xb44>
   11c34:	bl	10fd8 <__errno_location@plt>
   11c38:	ldr	r4, [r0]
   11c3c:	movw	r1, #29778	; 0x7452
   11c40:	movt	r1, #1
   11c44:	mov	r0, #0
   11c48:	mov	r2, #5
   11c4c:	bl	10ef4 <dcgettext@plt>
   11c50:	mov	r2, r0
   11c54:	mov	r0, #1
   11c58:	mov	r1, r4
   11c5c:	bl	10f60 <error@plt>
   11c60:	ldr	r2, [sp, #36]	; 0x24
   11c64:	and	r1, r2, r1
   11c68:	and	r0, r0, r1
   11c6c:	cmp	r0, #1
   11c70:	bne	11cb0 <__assert_fail@plt+0xbf4>
   11c74:	movw	r0, #37209	; 0x9159
   11c78:	movw	r2, #45662	; 0xb25e
   11c7c:	movt	r0, #2
   11c80:	movt	r2, #2
   11c84:	ldrb	r1, [r0]
   11c88:	add	r0, sp, #104	; 0x68
   11c8c:	bl	12a98 <__assert_fail@plt+0x19dc>
   11c90:	movw	r2, #37214	; 0x915e
   11c94:	mov	r0, r8
   11c98:	mov	r1, #0
   11c9c:	movt	r2, #2
   11ca0:	bl	12a98 <__assert_fail@plt+0x19dc>
   11ca4:	movw	r0, #11512	; 0x2cf8
   11ca8:	movt	r0, #1
   11cac:	b	11bb0 <__assert_fail@plt+0xaf4>
   11cb0:	ldrb	r0, [sl]
   11cb4:	cmp	r0, #0
   11cb8:	beq	11fac <__assert_fail@plt+0xef0>
   11cbc:	movw	r0, #37209	; 0x9159
   11cc0:	movt	r0, #2
   11cc4:	ldrb	r0, [r0]
   11cc8:	cmp	r0, #1
   11ccc:	bne	11d64 <__assert_fail@plt+0xca8>
   11cd0:	movw	r5, #45662	; 0xb25e
   11cd4:	add	r0, sp, #104	; 0x68
   11cd8:	mov	r1, #0
   11cdc:	mov	r6, #0
   11ce0:	movt	r5, #2
   11ce4:	mov	r2, r5
   11ce8:	bl	12a98 <__assert_fail@plt+0x19dc>
   11cec:	add	r0, pc, #964	; 0x3c4
   11cf0:	mvn	r1, #0
   11cf4:	movw	r4, #45918	; 0xb35e
   11cf8:	vmov.i8	q8, #16	; 0x10
   11cfc:	vld1.64	{d18-d19}, [r0]
   11d00:	subs	r2, r1, #1
   11d04:	movt	r4, #2
   11d08:	sbc	r3, r1, #0
   11d0c:	strd	r2, [r8, #8]
   11d10:	add	r0, r4, r6
   11d14:	add	r6, r6, #16
   11d18:	vadd.i8	q10, q9, q8
   11d1c:	vst1.8	{d18-d19}, [r0]
   11d20:	cmp	r6, #256	; 0x100
   11d24:	vorr	q9, q10, q10
   11d28:	bne	11d10 <__assert_fail@plt+0xc54>
   11d2c:	mov	r6, #0
   11d30:	ldrb	r0, [r5, r6]
   11d34:	cmp	r0, #0
   11d38:	bne	11d54 <__assert_fail@plt+0xc98>
   11d3c:	mov	r0, r8
   11d40:	mov	r1, #0
   11d44:	bl	12d94 <__assert_fail@plt+0x1cd8>
   11d48:	cmn	r0, #1
   11d4c:	beq	11ef8 <__assert_fail@plt+0xe3c>
   11d50:	strb	r0, [r4, r6]
   11d54:	add	r6, r6, #1
   11d58:	cmp	r6, #256	; 0x100
   11d5c:	bcc	11d30 <__assert_fail@plt+0xc74>
   11d60:	b	11f0c <__assert_fail@plt+0xe50>
   11d64:	add	r0, pc, #844	; 0x34c
   11d68:	movw	r6, #45918	; 0xb35e
   11d6c:	vmov.i8	q8, #16	; 0x10
   11d70:	vld1.64	{d18-d19}, [r0]
   11d74:	mov	r0, #0
   11d78:	movt	r6, #2
   11d7c:	add	r1, r6, r0
   11d80:	add	r0, r0, #16
   11d84:	vadd.i8	q10, q9, q8
   11d88:	vst1.8	{d18-d19}, [r1]
   11d8c:	cmp	r0, #256	; 0x100
   11d90:	vorr	q9, q10, q10
   11d94:	bne	11d7c <__assert_fail@plt+0xcc0>
   11d98:	mvn	r1, #0
   11d9c:	mov	r4, r8
   11da0:	subs	r0, r1, #1
   11da4:	sbc	r1, r1, #0
   11da8:	str	r0, [sp, #112]	; 0x70
   11dac:	str	r1, [sp, #116]	; 0x74
   11db0:	str	r0, [r4, #8]!
   11db4:	add	r0, sp, #104	; 0x68
   11db8:	add	r0, r0, #8
   11dbc:	str	r1, [r4, #4]
   11dc0:	str	r0, [sp, #60]	; 0x3c
   11dc4:	b	11e74 <__assert_fail@plt+0xdb8>
   11dc8:	strb	r0, [r6, r5]
   11dcc:	b	11e3c <__assert_fail@plt+0xd80>
   11dd0:	bl	10fa8 <__ctype_b_loc@plt>
   11dd4:	ldr	sl, [r0]
   11dd8:	mov	r5, #0
   11ddc:	ldrb	r0, [sl, #1]
   11de0:	tst	r0, #2
   11de4:	beq	11df4 <__assert_fail@plt+0xd38>
   11de8:	mov	r0, r5
   11dec:	bl	1105c <toupper@plt>
   11df0:	strb	r0, [r6, r5]
   11df4:	add	r5, r5, #1
   11df8:	add	sl, sl, #2
   11dfc:	cmp	r5, #256	; 0x100
   11e00:	bne	11ddc <__assert_fail@plt+0xd20>
   11e04:	b	11e3c <__assert_fail@plt+0xd80>
   11e08:	bl	10fa8 <__ctype_b_loc@plt>
   11e0c:	ldr	r7, [r0]
   11e10:	mov	r5, #0
   11e14:	ldrb	r0, [r7, #1]
   11e18:	tst	r0, #1
   11e1c:	beq	11e2c <__assert_fail@plt+0xd70>
   11e20:	mov	r0, r5
   11e24:	bl	10eb8 <tolower@plt>
   11e28:	strb	r0, [r6, r5]
   11e2c:	add	r5, r5, #1
   11e30:	add	r7, r7, #2
   11e34:	cmp	r5, #256	; 0x100
   11e38:	bne	11e14 <__assert_fail@plt+0xd58>
   11e3c:	cmp	r9, #2
   11e40:	beq	11e74 <__assert_fail@plt+0xdb8>
   11e44:	ldr	r0, [sp, #108]	; 0x6c
   11e48:	mvn	r1, #0
   11e4c:	ldr	r0, [r0, #4]
   11e50:	str	r0, [sp, #108]	; 0x6c
   11e54:	ldr	r0, [sp, #60]	; 0x3c
   11e58:	str	r1, [r0]
   11e5c:	str	r1, [r0, #4]
   11e60:	ldr	r0, [r8, #4]
   11e64:	ldr	r0, [r0, #4]
   11e68:	str	r0, [r8, #4]
   11e6c:	str	r1, [r4]
   11e70:	str	r1, [r4, #4]
   11e74:	add	r0, sp, #104	; 0x68
   11e78:	add	r1, sp, #144	; 0x90
   11e7c:	bl	12d94 <__assert_fail@plt+0x1cd8>
   11e80:	mov	r5, r0
   11e84:	mov	r0, r8
   11e88:	sub	r1, fp, #36	; 0x24
   11e8c:	bl	12d94 <__assert_fail@plt+0x1cd8>
   11e90:	ldr	r1, [sp, #144]	; 0x90
   11e94:	ldr	r9, [fp, #-36]	; 0xffffffdc
   11e98:	cmp	r1, #0
   11e9c:	cmpeq	r9, #1
   11ea0:	beq	11dd0 <__assert_fail@plt+0xd14>
   11ea4:	cmp	r1, #1
   11ea8:	cmpeq	r9, #0
   11eac:	beq	11e08 <__assert_fail@plt+0xd4c>
   11eb0:	cmn	r5, #1
   11eb4:	cmnne	r0, #1
   11eb8:	bne	11dc8 <__assert_fail@plt+0xd0c>
   11ebc:	cmn	r5, #1
   11ec0:	beq	11f0c <__assert_fail@plt+0xe50>
   11ec4:	movw	r0, #37212	; 0x915c
   11ec8:	movt	r0, #2
   11ecc:	ldrb	r0, [r0]
   11ed0:	cmp	r0, #0
   11ed4:	bne	11f0c <__assert_fail@plt+0xe50>
   11ed8:	movw	r0, #29848	; 0x7498
   11edc:	movw	r1, #29816	; 0x7478
   11ee0:	movw	r3, #29825	; 0x7481
   11ee4:	movw	r2, #1893	; 0x765
   11ee8:	movt	r0, #1
   11eec:	movt	r1, #1
   11ef0:	movt	r3, #1
   11ef4:	bl	110bc <__assert_fail@plt>
   11ef8:	movw	r0, #37212	; 0x915c
   11efc:	movt	r0, #2
   11f00:	ldrb	r0, [r0]
   11f04:	cmp	r0, #0
   11f08:	beq	12220 <__assert_fail@plt+0x1164>
   11f0c:	movw	r0, #37211	; 0x915b
   11f10:	movt	r0, #2
   11f14:	ldrb	r0, [r0]
   11f18:	cmp	r0, #0
   11f1c:	beq	11f40 <__assert_fail@plt+0xe84>
   11f20:	movw	r2, #37214	; 0x915e
   11f24:	mov	r0, r8
   11f28:	mov	r1, #0
   11f2c:	movt	r2, #2
   11f30:	bl	12a98 <__assert_fail@plt+0x19dc>
   11f34:	movw	r0, #12304	; 0x3010
   11f38:	movt	r0, #1
   11f3c:	b	11bb0 <__assert_fail@plt+0xaf4>
   11f40:	movw	r4, #37470	; 0x925e
   11f44:	movw	r6, #45918	; 0xb35e
   11f48:	movw	r7, #37204	; 0x9154
   11f4c:	movt	r4, #2
   11f50:	movt	r6, #2
   11f54:	movt	r7, #2
   11f58:	mov	r0, r4
   11f5c:	mov	r1, #8192	; 0x2000
   11f60:	bl	12cac <__assert_fail@plt+0x1bf0>
   11f64:	cmp	r0, #0
   11f68:	beq	11fac <__assert_fail@plt+0xef0>
   11f6c:	mov	r5, r0
   11f70:	mov	r0, #0
   11f74:	ldrb	r1, [r4, r0]
   11f78:	ldrb	r1, [r6, r1]
   11f7c:	strb	r1, [r4, r0]
   11f80:	add	r0, r0, #1
   11f84:	cmp	r5, r0
   11f88:	bne	11f74 <__assert_fail@plt+0xeb8>
   11f8c:	ldr	r3, [r7]
   11f90:	mov	r0, r4
   11f94:	mov	r1, #1
   11f98:	mov	r2, r5
   11f9c:	bl	10ed0 <fwrite_unlocked@plt>
   11fa0:	cmp	r0, r5
   11fa4:	beq	11f58 <__assert_fail@plt+0xe9c>
   11fa8:	b	11c34 <__assert_fail@plt+0xb78>
   11fac:	mov	r0, #0
   11fb0:	mov	r6, #0
   11fb4:	bl	110b0 <close@plt>
   11fb8:	cmp	r0, #0
   11fbc:	bne	12174 <__assert_fail@plt+0x10b8>
   11fc0:	mov	r0, r6
   11fc4:	sub	sp, fp, #28
   11fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fcc:	cmn	r0, #3
   11fd0:	bne	1201c <__assert_fail@plt+0xf60>
   11fd4:	movw	r0, #37104	; 0x90f0
   11fd8:	movw	r2, #29525	; 0x7355
   11fdc:	mov	r1, #0
   11fe0:	movt	r0, #2
   11fe4:	movt	r2, #1
   11fe8:	str	r1, [sp, #4]
   11fec:	movw	r1, #29474	; 0x7322
   11ff0:	ldr	r3, [r0]
   11ff4:	movw	r0, #37204	; 0x9154
   11ff8:	str	r2, [sp]
   11ffc:	movw	r2, #29511	; 0x7347
   12000:	movt	r1, #1
   12004:	movt	r0, #2
   12008:	movt	r2, #1
   1200c:	ldr	r0, [r0]
   12010:	bl	156e8 <__assert_fail@plt+0x462c>
   12014:	mov	r0, #0
   12018:	bl	10fb4 <exit@plt>
   1201c:	cmn	r0, #2
   12020:	bne	12154 <__assert_fail@plt+0x1098>
   12024:	mov	r0, #0
   12028:	bl	111b8 <__assert_fail@plt+0xfc>
   1202c:	cmp	r9, #0
   12030:	bne	120c8 <__assert_fail@plt+0x100c>
   12034:	movw	r1, #29538	; 0x7362
   12038:	mov	r0, #0
   1203c:	mov	r2, #5
   12040:	movt	r1, #1
   12044:	bl	10ef4 <dcgettext@plt>
   12048:	mov	r2, r0
   1204c:	mov	r0, #0
   12050:	mov	r1, #0
   12054:	bl	10f60 <error@plt>
   12058:	b	12154 <__assert_fail@plt+0x1098>
   1205c:	movw	r1, #29691	; 0x73fb
   12060:	mov	r0, #0
   12064:	mov	r2, #5
   12068:	movt	r1, #1
   1206c:	bl	10ef4 <dcgettext@plt>
   12070:	mov	r4, r0
   12074:	ldr	r0, [r7]
   12078:	add	r0, r0, r6
   1207c:	ldr	r0, [r5, r0, lsl #2]
   12080:	bl	15198 <__assert_fail@plt+0x40dc>
   12084:	mov	r3, r0
   12088:	mov	r0, #0
   1208c:	mov	r1, #0
   12090:	mov	r2, r4
   12094:	bl	10f60 <error@plt>
   12098:	cmp	r9, #2
   1209c:	bne	12154 <__assert_fail@plt+0x1098>
   120a0:	movw	r0, #37192	; 0x9148
   120a4:	movw	r1, #29708	; 0x740c
   120a8:	movt	r0, #2
   120ac:	movt	r1, #1
   120b0:	b	1212c <__assert_fail@plt+0x1070>
   120b4:	nop	{0}
   120b8:	movweq	r0, #8448	; 0x2100
   120bc:	streq	r0, [r6, -r4, lsl #10]
   120c0:	bleq	2944e8 <stdout@@GLIBC_2.4+0x26b394>
   120c4:	svceq	0x000e0d0c
   120c8:	movw	r1, #29554	; 0x7372
   120cc:	mov	r0, #0
   120d0:	mov	r2, #5
   120d4:	movt	r1, #1
   120d8:	bl	10ef4 <dcgettext@plt>
   120dc:	mov	r6, r0
   120e0:	add	r0, r5, r4, lsl #2
   120e4:	ldr	r0, [r0, #-4]
   120e8:	bl	15198 <__assert_fail@plt+0x40dc>
   120ec:	mov	r3, r0
   120f0:	mov	r0, #0
   120f4:	mov	r1, #0
   120f8:	mov	r2, r6
   120fc:	bl	10f60 <error@plt>
   12100:	movw	r0, #37211	; 0x915b
   12104:	movw	r2, #29579	; 0x738b
   12108:	movw	r1, #29647	; 0x73cf
   1210c:	movt	r0, #2
   12110:	movt	r2, #1
   12114:	movt	r1, #1
   12118:	ldrb	r0, [r0]
   1211c:	cmp	r0, #0
   12120:	movw	r0, #37192	; 0x9148
   12124:	movt	r0, #2
   12128:	movne	r1, r2
   1212c:	ldr	r4, [r0]
   12130:	mov	r0, #0
   12134:	mov	r2, #5
   12138:	bl	10ef4 <dcgettext@plt>
   1213c:	movw	r2, #32824	; 0x8038
   12140:	mov	r3, r0
   12144:	mov	r0, r4
   12148:	mov	r1, #1
   1214c:	movt	r2, #1
   12150:	bl	1102c <__fprintf_chk@plt>
   12154:	mov	r0, #1
   12158:	bl	111b8 <__assert_fail@plt+0xfc>
   1215c:	movw	r1, #31851	; 0x7c6b
   12160:	movt	r1, #1
   12164:	b	121a8 <__assert_fail@plt+0x10ec>
   12168:	movw	r1, #31254	; 0x7a16
   1216c:	movt	r1, #1
   12170:	b	121a8 <__assert_fail@plt+0x10ec>
   12174:	bl	10fd8 <__errno_location@plt>
   12178:	ldr	r4, [r0]
   1217c:	movw	r1, #29874	; 0x74b2
   12180:	movt	r1, #1
   12184:	b	11c44 <__assert_fail@plt+0xb88>
   12188:	movw	r1, #31306	; 0x7a4a
   1218c:	movt	r1, #1
   12190:	b	121a8 <__assert_fail@plt+0x10ec>
   12194:	movw	r1, #31359	; 0x7a7f
   12198:	movt	r1, #1
   1219c:	b	121a8 <__assert_fail@plt+0x10ec>
   121a0:	movw	r1, #31420	; 0x7abc
   121a4:	movt	r1, #1
   121a8:	mov	r0, #0
   121ac:	mov	r2, #5
   121b0:	bl	10ef4 <dcgettext@plt>
   121b4:	mov	r2, r0
   121b8:	mov	r0, #1
   121bc:	mov	r1, #0
   121c0:	bl	10f60 <error@plt>
   121c4:	movw	r0, #31899	; 0x7c9b
   121c8:	movw	r1, #29816	; 0x7478
   121cc:	movw	r3, #31952	; 0x7cd0
   121d0:	movw	r2, #1224	; 0x4c8
   121d4:	movt	r0, #1
   121d8:	movt	r1, #1
   121dc:	movt	r3, #1
   121e0:	bl	110bc <__assert_fail@plt>
   121e4:	bl	110a4 <abort@plt>
   121e8:	movw	r1, #31516	; 0x7b1c
   121ec:	movt	r1, #1
   121f0:	b	121a8 <__assert_fail@plt+0x10ec>
   121f4:	movw	r0, #31408	; 0x7ab0
   121f8:	movw	r1, #29816	; 0x7478
   121fc:	movw	r3, #32019	; 0x7d13
   12200:	movw	r2, #1377	; 0x561
   12204:	movt	r0, #1
   12208:	movt	r1, #1
   1220c:	movt	r3, #1
   12210:	bl	110bc <__assert_fail@plt>
   12214:	movw	r1, #32085	; 0x7d55
   12218:	movt	r1, #1
   1221c:	b	121a8 <__assert_fail@plt+0x10ec>
   12220:	movw	r0, #29790	; 0x745e
   12224:	movw	r1, #29816	; 0x7478
   12228:	movw	r3, #29825	; 0x7481
   1222c:	mov	r2, #1840	; 0x730
   12230:	movt	r0, #1
   12234:	movt	r1, #1
   12238:	movt	r3, #1
   1223c:	bl	110bc <__assert_fail@plt>
   12240:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12244:	add	fp, sp, #28
   12248:	sub	sp, sp, #100	; 0x64
   1224c:	str	r1, [sp, #60]	; 0x3c
   12250:	mov	r6, r0
   12254:	bl	10fc0 <strlen@plt>
   12258:	mov	r5, r0
   1225c:	bl	157f0 <__assert_fail@plt+0x4734>
   12260:	mov	r4, r0
   12264:	str	r0, [fp, #-52]	; 0xffffffcc
   12268:	mov	r0, r5
   1226c:	mov	r1, #1
   12270:	mov	r7, #1
   12274:	bl	15af4 <__assert_fail@plt+0x4a38>
   12278:	mov	lr, r4
   1227c:	mov	r3, r0
   12280:	mov	sl, #0
   12284:	mov	r5, #0
   12288:	str	r0, [fp, #-48]	; 0xffffffd0
   1228c:	str	r4, [fp, #-56]	; 0xffffffc8
   12290:	str	r0, [sp, #64]	; 0x40
   12294:	b	12444 <__assert_fail@plt+0x1388>
   12298:	strb	r7, [r3, sl]
   1229c:	add	r4, r5, #1
   122a0:	ldrb	r0, [r6, r4]
   122a4:	cmp	r0, #96	; 0x60
   122a8:	bgt	12304 <__assert_fail@plt+0x1248>
   122ac:	sub	r1, r0, #48	; 0x30
   122b0:	cmp	r1, #8
   122b4:	bcs	12370 <__assert_fail@plt+0x12b4>
   122b8:	add	r9, r5, #2
   122bc:	ldrb	r0, [r6, r9]
   122c0:	and	r2, r0, #248	; 0xf8
   122c4:	cmp	r2, #48	; 0x30
   122c8:	bne	1234c <__assert_fail@plt+0x1290>
   122cc:	add	r0, r0, r1, lsl #3
   122d0:	add	r5, r5, #3
   122d4:	sub	r8, r0, #48	; 0x30
   122d8:	ldrb	r0, [r6, r5]
   122dc:	and	r1, r0, #248	; 0xf8
   122e0:	cmp	r1, #48	; 0x30
   122e4:	bne	12414 <__assert_fail@plt+0x1358>
   122e8:	uxtb	r1, r8
   122ec:	add	r0, r0, r1, lsl #3
   122f0:	sub	r0, r0, #48	; 0x30
   122f4:	cmp	r0, #255	; 0xff
   122f8:	bgt	123d0 <__assert_fail@plt+0x1314>
   122fc:	mov	r5, r9
   12300:	b	1241c <__assert_fail@plt+0x1360>
   12304:	cmp	r0, #109	; 0x6d
   12308:	ble	12354 <__assert_fail@plt+0x1298>
   1230c:	sub	r1, r0, #110	; 0x6e
   12310:	cmp	r1, #8
   12314:	bhi	12420 <__assert_fail@plt+0x1364>
   12318:	add	r2, pc, #0
   1231c:	ldr	pc, [r2, r1, lsl #2]
   12320:	andeq	r2, r1, r4, asr #6
   12324:	andeq	r2, r1, r0, lsr #8
   12328:	andeq	r2, r1, r0, lsr #8
   1232c:	andeq	r2, r1, r0, lsr #8
   12330:			; <UNDEFINED> instruction: 0x000123b8
   12334:	andeq	r2, r1, r0, lsr #8
   12338:	andeq	r2, r1, r8, asr #7
   1233c:	andeq	r2, r1, r0, lsr #8
   12340:	andeq	r2, r1, r0, asr #7
   12344:	mov	r0, #10
   12348:	b	12420 <__assert_fail@plt+0x1364>
   1234c:	mov	r0, r1
   12350:	b	12420 <__assert_fail@plt+0x1364>
   12354:	cmp	r0, #97	; 0x61
   12358:	beq	1243c <__assert_fail@plt+0x1380>
   1235c:	cmp	r0, #98	; 0x62
   12360:	beq	12434 <__assert_fail@plt+0x1378>
   12364:	cmp	r0, #102	; 0x66
   12368:	moveq	r0, #12
   1236c:	b	12420 <__assert_fail@plt+0x1364>
   12370:	cmp	r0, #0
   12374:	bne	12420 <__assert_fail@plt+0x1364>
   12378:	movw	r1, #30361	; 0x7699
   1237c:	mov	r0, #0
   12380:	mov	r2, #5
   12384:	movt	r1, #1
   12388:	bl	10ef4 <dcgettext@plt>
   1238c:	mov	r2, r0
   12390:	mov	r0, #0
   12394:	mov	r1, #0
   12398:	bl	10f60 <error@plt>
   1239c:	ldr	r3, [sp, #64]	; 0x40
   123a0:	ldr	lr, [fp, #-56]	; 0xffffffc8
   123a4:	mov	r0, #0
   123a8:	sub	r5, r5, #1
   123ac:	strb	r0, [r3, sl]
   123b0:	mov	r0, #92	; 0x5c
   123b4:	b	12420 <__assert_fail@plt+0x1364>
   123b8:	mov	r0, #13
   123bc:	b	12420 <__assert_fail@plt+0x1364>
   123c0:	mov	r0, #11
   123c4:	b	12420 <__assert_fail@plt+0x1364>
   123c8:	mov	r0, #9
   123cc:	b	12420 <__assert_fail@plt+0x1364>
   123d0:	movw	r1, #30261	; 0x7635
   123d4:	mov	r0, #0
   123d8:	mov	r2, #5
   123dc:	movt	r1, #1
   123e0:	bl	10ef4 <dcgettext@plt>
   123e4:	mov	r2, r0
   123e8:	ldrb	r3, [r6, r4]
   123ec:	ldrb	r0, [r6, r9]
   123f0:	ldrb	r1, [r6, r5]
   123f4:	stm	sp, {r0, r1, r3}
   123f8:	str	r0, [sp, #12]
   123fc:	str	r1, [sp, #16]
   12400:	mov	r0, #0
   12404:	mov	r1, #0
   12408:	bl	10f60 <error@plt>
   1240c:	ldr	r3, [sp, #64]	; 0x40
   12410:	ldr	lr, [fp, #-56]	; 0xffffffc8
   12414:	mov	r5, r4
   12418:	mov	r0, r8
   1241c:	mov	r7, #1
   12420:	add	r5, r5, #1
   12424:	strb	r0, [lr, sl]
   12428:	add	r5, r5, #1
   1242c:	add	sl, sl, #1
   12430:	b	12444 <__assert_fail@plt+0x1388>
   12434:	mov	r0, #8
   12438:	b	12420 <__assert_fail@plt+0x1364>
   1243c:	mov	r0, #7
   12440:	b	12420 <__assert_fail@plt+0x1364>
   12444:	ldrb	r0, [r6, r5]
   12448:	cmp	r0, #92	; 0x5c
   1244c:	beq	12298 <__assert_fail@plt+0x11dc>
   12450:	cmp	r0, #0
   12454:	bne	12424 <__assert_fail@plt+0x1368>
   12458:	ldr	r5, [sp, #60]	; 0x3c
   1245c:	mov	r6, #0
   12460:	cmp	sl, #3
   12464:	str	sl, [fp, #-44]	; 0xffffffd4
   12468:	bcc	12860 <__assert_fail@plt+0x17a4>
   1246c:	mvn	r0, #2
   12470:	mov	r9, #2
   12474:	mov	r6, #0
   12478:	sub	r0, r0, lr
   1247c:	str	r0, [sp, #20]
   12480:	add	r0, r3, #3
   12484:	str	r0, [sp, #32]
   12488:	add	r0, lr, #3
   1248c:	str	r0, [sp, #28]
   12490:	add	r0, lr, #1
   12494:	str	r0, [sp, #52]	; 0x34
   12498:	add	r0, r3, #1
   1249c:	str	r0, [sp, #48]	; 0x30
   124a0:	sub	r0, sl, #1
   124a4:	str	r0, [fp, #-60]	; 0xffffffc4
   124a8:	add	r0, lr, #2
   124ac:	str	r0, [sp, #24]
   124b0:	ldrb	r8, [lr, r6]
   124b4:	cmp	r8, #91	; 0x5b
   124b8:	ldrbeq	r0, [r3, r6]
   124bc:	cmpeq	r0, #0
   124c0:	beq	12504 <__assert_fail@plt+0x1448>
   124c4:	add	r4, r6, #1
   124c8:	ldrb	r0, [lr, r4]
   124cc:	cmp	r0, #45	; 0x2d
   124d0:	ldrbeq	r0, [r3, r4]
   124d4:	cmpeq	r0, #0
   124d8:	beq	12528 <__assert_fail@plt+0x146c>
   124dc:	mov	r0, r5
   124e0:	mov	r1, r8
   124e4:	bl	13270 <__assert_fail@plt+0x21b4>
   124e8:	ldr	r3, [sp, #64]	; 0x40
   124ec:	mov	r6, r4
   124f0:	ldr	lr, [fp, #-56]	; 0xffffffc8
   124f4:	add	r9, r6, #2
   124f8:	cmp	r9, sl
   124fc:	bcc	124b0 <__assert_fail@plt+0x13f4>
   12500:	b	12860 <__assert_fail@plt+0x17a4>
   12504:	add	r0, r6, #1
   12508:	ldrb	r7, [lr, r0]
   1250c:	cmp	r7, #61	; 0x3d
   12510:	beq	1257c <__assert_fail@plt+0x14c0>
   12514:	cmp	r7, #58	; 0x3a
   12518:	bne	126f4 <__assert_fail@plt+0x1638>
   1251c:	ldr	r1, [sp, #64]	; 0x40
   12520:	ldrb	r0, [r1, r0]
   12524:	b	12580 <__assert_fail@plt+0x14c4>
   12528:	add	r0, lr, r6
   1252c:	ldrb	r5, [r0, #2]
   12530:	cmp	r5, r8
   12534:	bcc	128a4 <__assert_fail@plt+0x17e8>
   12538:	mov	r0, #24
   1253c:	bl	157f0 <__assert_fail@plt+0x4734>
   12540:	mov	r2, #1
   12544:	mov	r1, #0
   12548:	str	r2, [r0]
   1254c:	str	r1, [r0, #4]
   12550:	strb	r8, [r0, #8]
   12554:	strb	r5, [r0, #9]
   12558:	ldr	r5, [sp, #60]	; 0x3c
   1255c:	ldr	r1, [r5, #4]
   12560:	cmp	r1, #0
   12564:	beq	12a38 <__assert_fail@plt+0x197c>
   12568:	ldr	r3, [sp, #64]	; 0x40
   1256c:	str	r0, [r1, #4]
   12570:	str	r0, [r5, #4]
   12574:	add	r6, r6, #3
   12578:	b	124f0 <__assert_fail@plt+0x1434>
   1257c:	ldrb	r0, [r3, r0]
   12580:	cmp	r0, #0
   12584:	bne	126f4 <__assert_fail@plt+0x1638>
   12588:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1258c:	cmp	r0, r9
   12590:	bls	126f4 <__assert_fail@plt+0x1638>
   12594:	ldr	r1, [sp, #52]	; 0x34
   12598:	ldr	r2, [sp, #48]	; 0x30
   1259c:	add	r4, r6, #2
   125a0:	add	r0, r6, #3
   125a4:	mov	r5, #0
   125a8:	add	r3, r1, r9
   125ac:	ldrb	r3, [r3, #-1]
   125b0:	cmp	r3, r7
   125b4:	ldrbeq	r3, [r1, r9]
   125b8:	cmpeq	r3, #93	; 0x5d
   125bc:	beq	125f0 <__assert_fail@plt+0x1534>
   125c0:	mov	ip, r7
   125c4:	ldr	r7, [fp, #-60]	; 0xffffffc4
   125c8:	add	r5, r5, #1
   125cc:	add	r1, r1, #1
   125d0:	add	r2, r2, #1
   125d4:	sub	r4, r4, #1
   125d8:	sub	r0, r0, #1
   125dc:	add	r3, r9, r5
   125e0:	cmp	r3, r7
   125e4:	mov	r7, ip
   125e8:	bcc	125a8 <__assert_fail@plt+0x14ec>
   125ec:	b	126f4 <__assert_fail@plt+0x1638>
   125f0:	add	r3, r2, r9
   125f4:	ldrb	r3, [r3, #-1]
   125f8:	cmp	r3, #0
   125fc:	bne	125c0 <__assert_fail@plt+0x1504>
   12600:	ldrb	r3, [r2, r9]
   12604:	cmp	r3, #0
   12608:	bne	125c0 <__assert_fail@plt+0x1504>
   1260c:	subs	r1, r9, r4
   12610:	str	r1, [sp, #36]	; 0x24
   12614:	beq	12904 <__assert_fail@plt+0x1848>
   12618:	ldr	r1, [sp, #24]
   1261c:	cmp	r7, #58	; 0x3a
   12620:	add	r1, r1, r6
   12624:	str	r1, [sp, #40]	; 0x28
   12628:	bne	1269c <__assert_fail@plt+0x15e0>
   1262c:	mov	r1, #0
   12630:	movw	r0, #32496	; 0x7ef0
   12634:	str	r1, [sp, #56]	; 0x38
   12638:	ldr	r2, [sp, #36]	; 0x24
   1263c:	movt	r0, #1
   12640:	ldr	r1, [r0, r1, lsl #2]
   12644:	ldr	r0, [sp, #40]	; 0x28
   12648:	str	r1, [sp, #44]	; 0x2c
   1264c:	bl	11098 <strncmp@plt>
   12650:	cmp	r0, #0
   12654:	bne	1266c <__assert_fail@plt+0x15b0>
   12658:	ldr	r0, [sp, #44]	; 0x2c
   1265c:	bl	10fc0 <strlen@plt>
   12660:	sub	r0, r9, r0
   12664:	cmp	r0, r4
   12668:	beq	12808 <__assert_fail@plt+0x174c>
   1266c:	ldr	r0, [sp, #56]	; 0x38
   12670:	add	r0, r0, #1
   12674:	cmp	r0, #12
   12678:	mov	r1, r0
   1267c:	bcc	12630 <__assert_fail@plt+0x1574>
   12680:	sub	r0, fp, #52	; 0x34
   12684:	mov	r1, r9
   12688:	bl	1304c <__assert_fail@plt+0x1f90>
   1268c:	ldr	lr, [fp, #-56]	; 0xffffffc8
   12690:	cmp	r0, #0
   12694:	bne	126f4 <__assert_fail@plt+0x1638>
   12698:	b	1298c <__assert_fail@plt+0x18d0>
   1269c:	cmp	r9, r0
   126a0:	bne	126dc <__assert_fail@plt+0x1620>
   126a4:	mov	r0, #24
   126a8:	bl	157f0 <__assert_fail@plt+0x4734>
   126ac:	mov	r2, #3
   126b0:	mov	r1, #0
   126b4:	str	r2, [r0]
   126b8:	str	r1, [r0, #4]
   126bc:	ldr	r1, [sp, #40]	; 0x28
   126c0:	ldr	r2, [sp, #60]	; 0x3c
   126c4:	ldrb	r1, [r1]
   126c8:	strb	r1, [r0, #8]
   126cc:	ldr	r1, [r2, #4]
   126d0:	cmp	r1, #0
   126d4:	bne	12838 <__assert_fail@plt+0x177c>
   126d8:	b	12a58 <__assert_fail@plt+0x199c>
   126dc:	sub	r0, fp, #52	; 0x34
   126e0:	mov	r1, r9
   126e4:	bl	1304c <__assert_fail@plt+0x1f90>
   126e8:	ldr	lr, [fp, #-56]	; 0xffffffc8
   126ec:	cmp	r0, #0
   126f0:	beq	129d0 <__assert_fail@plt+0x1914>
   126f4:	add	r0, r6, #2
   126f8:	cmp	r0, sl
   126fc:	bcs	12a18 <__assert_fail@plt+0x195c>
   12700:	ldrb	r1, [lr, r0]
   12704:	cmp	r1, #42	; 0x2a
   12708:	bne	12768 <__assert_fail@plt+0x16ac>
   1270c:	ldr	r1, [sp, #64]	; 0x40
   12710:	ldrb	r0, [r1, r0]
   12714:	cmp	r0, #0
   12718:	bne	12768 <__assert_fail@plt+0x16ac>
   1271c:	add	r0, r6, #3
   12720:	cmp	r0, sl
   12724:	bcs	12768 <__assert_fail@plt+0x16ac>
   12728:	ldr	r1, [sp, #32]
   1272c:	ldr	r2, [sp, #28]
   12730:	mov	r5, #0
   12734:	add	r1, r1, r6
   12738:	add	r2, r2, r6
   1273c:	ldrb	r3, [r1, r5]
   12740:	cmp	r3, #0
   12744:	bne	12768 <__assert_fail@plt+0x16ac>
   12748:	ldrb	r3, [r2, r5]
   1274c:	cmp	r3, #93	; 0x5d
   12750:	beq	12774 <__assert_fail@plt+0x16b8>
   12754:	add	r5, r5, #1
   12758:	add	r3, r6, r5
   1275c:	add	r3, r3, #3
   12760:	cmp	r3, sl
   12764:	bcc	1273c <__assert_fail@plt+0x1680>
   12768:	ldr	r5, [sp, #60]	; 0x3c
   1276c:	ldr	r3, [sp, #64]	; 0x40
   12770:	b	124c4 <__assert_fail@plt+0x1408>
   12774:	cmp	r5, #0
   12778:	beq	127e0 <__assert_fail@plt+0x1724>
   1277c:	mov	r8, lr
   12780:	mov	r1, #0
   12784:	mov	r2, #10
   12788:	sub	r3, fp, #40	; 0x28
   1278c:	ldrb	r0, [r8, r0]!
   12790:	str	r1, [sp]
   12794:	sub	r1, fp, #32
   12798:	cmp	r0, #48	; 0x30
   1279c:	mov	r0, r8
   127a0:	movweq	r2, #8
   127a4:	bl	15c84 <__assert_fail@plt+0x4bc8>
   127a8:	cmp	r0, #0
   127ac:	bne	12918 <__assert_fail@plt+0x185c>
   127b0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   127b4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   127b8:	and	r0, r2, r3
   127bc:	cmn	r0, #1
   127c0:	beq	12918 <__assert_fail@plt+0x185c>
   127c4:	ldr	r0, [sp, #20]
   127c8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   127cc:	sub	r0, r0, r6
   127d0:	add	r0, r1, r0
   127d4:	cmp	r0, r5
   127d8:	beq	127f0 <__assert_fail@plt+0x1734>
   127dc:	b	12918 <__assert_fail@plt+0x185c>
   127e0:	mov	r2, #0
   127e4:	mov	r3, #0
   127e8:	str	r2, [fp, #-36]	; 0xffffffdc
   127ec:	str	r2, [fp, #-40]	; 0xffffffd8
   127f0:	ldr	r0, [sp, #60]	; 0x3c
   127f4:	mov	r1, r7
   127f8:	bl	13204 <__assert_fail@plt+0x2148>
   127fc:	add	r0, r6, r5
   12800:	add	r6, r0, #4
   12804:	b	12848 <__assert_fail@plt+0x178c>
   12808:	mov	r0, #24
   1280c:	bl	157f0 <__assert_fail@plt+0x4734>
   12810:	mov	r1, #2
   12814:	ldr	r2, [sp, #60]	; 0x3c
   12818:	str	r1, [r0]
   1281c:	mov	r1, #0
   12820:	str	r1, [r0, #4]
   12824:	ldr	r1, [sp, #56]	; 0x38
   12828:	str	r1, [r0, #8]
   1282c:	ldr	r1, [r2, #4]
   12830:	cmp	r1, #0
   12834:	beq	12a78 <__assert_fail@plt+0x19bc>
   12838:	str	r0, [r1, #4]
   1283c:	str	r0, [r2, #4]
   12840:	add	r0, r9, r5
   12844:	add	r6, r0, #2
   12848:	ldr	lr, [fp, #-56]	; 0xffffffc8
   1284c:	ldr	r3, [sp, #64]	; 0x40
   12850:	ldr	r5, [sp, #60]	; 0x3c
   12854:	add	r9, r6, #2
   12858:	cmp	r9, sl
   1285c:	bcc	124b0 <__assert_fail@plt+0x13f4>
   12860:	mov	r4, #1
   12864:	cmp	r6, sl
   12868:	bcs	12888 <__assert_fail@plt+0x17cc>
   1286c:	ldrb	r1, [lr, r6]
   12870:	mov	r0, r5
   12874:	bl	13270 <__assert_fail@plt+0x21b4>
   12878:	ldr	lr, [fp, #-56]	; 0xffffffc8
   1287c:	add	r6, r6, #1
   12880:	cmp	sl, r6
   12884:	bne	1286c <__assert_fail@plt+0x17b0>
   12888:	mov	r0, lr
   1288c:	bl	1376c <__assert_fail@plt+0x26b0>
   12890:	ldr	r0, [sp, #64]	; 0x40
   12894:	bl	1376c <__assert_fail@plt+0x26b0>
   12898:	mov	r0, r4
   1289c:	sub	sp, fp, #28
   128a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128a4:	mov	r0, r8
   128a8:	bl	132cc <__assert_fail@plt+0x2210>
   128ac:	mov	r6, r0
   128b0:	mov	r0, r5
   128b4:	bl	132cc <__assert_fail@plt+0x2210>
   128b8:	movw	r1, #31059	; 0x7953
   128bc:	mov	r5, r0
   128c0:	mov	r0, #0
   128c4:	mov	r2, #5
   128c8:	mov	r4, #0
   128cc:	movt	r1, #1
   128d0:	bl	10ef4 <dcgettext@plt>
   128d4:	mov	r2, r0
   128d8:	mov	r0, #0
   128dc:	mov	r1, #0
   128e0:	mov	r3, r6
   128e4:	str	r5, [sp]
   128e8:	bl	10f60 <error@plt>
   128ec:	mov	r0, r6
   128f0:	bl	1376c <__assert_fail@plt+0x26b0>
   128f4:	mov	r0, r5
   128f8:	bl	1376c <__assert_fail@plt+0x26b0>
   128fc:	ldr	lr, [fp, #-56]	; 0xffffffc8
   12900:	b	12888 <__assert_fail@plt+0x17cc>
   12904:	cmp	r7, #58	; 0x3a
   12908:	bne	12964 <__assert_fail@plt+0x18a8>
   1290c:	movw	r1, #30426	; 0x76da
   12910:	movt	r1, #1
   12914:	b	1296c <__assert_fail@plt+0x18b0>
   12918:	mov	r0, r8
   1291c:	mov	r1, r5
   12920:	bl	130c8 <__assert_fail@plt+0x200c>
   12924:	movw	r1, #30948	; 0x78e4
   12928:	mov	r5, r0
   1292c:	mov	r0, #0
   12930:	mov	r2, #5
   12934:	mov	r4, #0
   12938:	movt	r1, #1
   1293c:	bl	10ef4 <dcgettext@plt>
   12940:	mov	r6, r0
   12944:	mov	r0, r5
   12948:	bl	15198 <__assert_fail@plt+0x40dc>
   1294c:	mov	r3, r0
   12950:	mov	r0, #0
   12954:	mov	r1, #0
   12958:	mov	r2, r6
   1295c:	bl	10f60 <error@plt>
   12960:	b	128f4 <__assert_fail@plt+0x1838>
   12964:	movw	r1, #30462	; 0x76fe
   12968:	movt	r1, #1
   1296c:	mov	r0, #0
   12970:	mov	r2, #5
   12974:	bl	10ef4 <dcgettext@plt>
   12978:	mov	r2, r0
   1297c:	mov	r0, #0
   12980:	mov	r1, #0
   12984:	bl	10f60 <error@plt>
   12988:	b	12a10 <__assert_fail@plt+0x1954>
   1298c:	ldr	r0, [sp, #40]	; 0x28
   12990:	ldr	r1, [sp, #36]	; 0x24
   12994:	bl	130c8 <__assert_fail@plt+0x200c>
   12998:	movw	r1, #30505	; 0x7729
   1299c:	mov	r5, r0
   129a0:	mov	r0, #0
   129a4:	mov	r2, #5
   129a8:	movt	r1, #1
   129ac:	bl	10ef4 <dcgettext@plt>
   129b0:	mov	r6, r0
   129b4:	mov	r0, r5
   129b8:	bl	15198 <__assert_fail@plt+0x40dc>
   129bc:	mov	r3, r0
   129c0:	mov	r0, #0
   129c4:	mov	r1, #0
   129c8:	mov	r2, r6
   129cc:	b	12a04 <__assert_fail@plt+0x1948>
   129d0:	ldr	r0, [sp, #40]	; 0x28
   129d4:	ldr	r1, [sp, #36]	; 0x24
   129d8:	bl	130c8 <__assert_fail@plt+0x200c>
   129dc:	movw	r1, #30532	; 0x7744
   129e0:	mov	r5, r0
   129e4:	mov	r0, #0
   129e8:	mov	r2, #5
   129ec:	movt	r1, #1
   129f0:	bl	10ef4 <dcgettext@plt>
   129f4:	mov	r2, r0
   129f8:	mov	r0, #0
   129fc:	mov	r1, #0
   12a00:	mov	r3, r5
   12a04:	bl	10f60 <error@plt>
   12a08:	mov	r0, r5
   12a0c:	bl	1376c <__assert_fail@plt+0x26b0>
   12a10:	mov	r4, #0
   12a14:	b	128fc <__assert_fail@plt+0x1840>
   12a18:	movw	r0, #30829	; 0x786d
   12a1c:	movw	r1, #29816	; 0x7478
   12a20:	movw	r3, #30853	; 0x7885
   12a24:	mov	r2, #784	; 0x310
   12a28:	movt	r0, #1
   12a2c:	movt	r1, #1
   12a30:	movt	r3, #1
   12a34:	bl	110bc <__assert_fail@plt>
   12a38:	movw	r0, #30589	; 0x777d
   12a3c:	movw	r1, #29816	; 0x7478
   12a40:	movw	r3, #31126	; 0x7996
   12a44:	movw	r2, #679	; 0x2a7
   12a48:	movt	r0, #1
   12a4c:	movt	r1, #1
   12a50:	movt	r3, #1
   12a54:	bl	110bc <__assert_fail@plt>
   12a58:	movw	r0, #30589	; 0x777d
   12a5c:	movw	r1, #29816	; 0x7478
   12a60:	movw	r3, #30762	; 0x782a
   12a64:	movw	r2, #743	; 0x2e7
   12a68:	movt	r0, #1
   12a6c:	movt	r1, #1
   12a70:	movt	r3, #1
   12a74:	bl	110bc <__assert_fail@plt>
   12a78:	movw	r0, #30589	; 0x777d
   12a7c:	movw	r1, #29816	; 0x7478
   12a80:	movw	r3, #30600	; 0x7788
   12a84:	movw	r2, #701	; 0x2bd
   12a88:	movt	r0, #1
   12a8c:	movt	r1, #1
   12a90:	movt	r3, #1
   12a94:	bl	110bc <__assert_fail@plt>
   12a98:	push	{r4, r5, r6, r7, fp, lr}
   12a9c:	add	fp, sp, #16
   12aa0:	mov	r5, r1
   12aa4:	mov	r6, r0
   12aa8:	mvn	r1, #0
   12aac:	mvn	r0, #1
   12ab0:	mov	r4, r2
   12ab4:	strd	r0, [r6, #8]
   12ab8:	mov	r0, r6
   12abc:	mov	r1, #0
   12ac0:	bl	12d94 <__assert_fail@plt+0x1cd8>
   12ac4:	cmn	r0, #1
   12ac8:	beq	12ae8 <__assert_fail@plt+0x1a2c>
   12acc:	mov	r7, #1
   12ad0:	strb	r7, [r4, r0]
   12ad4:	mov	r0, r6
   12ad8:	mov	r1, #0
   12adc:	bl	12d94 <__assert_fail@plt+0x1cd8>
   12ae0:	cmn	r0, #1
   12ae4:	bne	12ad0 <__assert_fail@plt+0x1a14>
   12ae8:	cmp	r5, #0
   12aec:	popeq	{r4, r5, r6, r7, fp, pc}
   12af0:	mov	r0, #0
   12af4:	vmov.i8	q8, #1	; 0x01
   12af8:	add	r1, r4, r0
   12afc:	add	r0, r0, #16
   12b00:	vld1.8	{d18-d19}, [r1]
   12b04:	cmp	r0, #256	; 0x100
   12b08:	veor	q9, q9, q8
   12b0c:	vst1.8	{d18-d19}, [r1]
   12b10:	bne	12af8 <__assert_fail@plt+0x1a3c>
   12b14:	pop	{r4, r5, r6, r7, fp, pc}
   12b18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b1c:	add	fp, sp, #28
   12b20:	sub	sp, sp, #4
   12b24:	movw	r5, #37470	; 0x925e
   12b28:	movw	sl, #37214	; 0x915e
   12b2c:	mov	r8, r0
   12b30:	mvn	r7, #-2147483648	; 0x80000000
   12b34:	mov	r0, #0
   12b38:	mov	r6, #0
   12b3c:	movt	r5, #2
   12b40:	movt	sl, #2
   12b44:	b	12b94 <__assert_fail@plt+0x1ad8>
   12b48:	cmn	r9, #-2147483647	; 0x80000001
   12b4c:	mov	r0, r4
   12b50:	mvn	r7, #-2147483648	; 0x80000000
   12b54:	beq	12b94 <__assert_fail@plt+0x1ad8>
   12b58:	cmp	r4, r6
   12b5c:	mov	r0, r4
   12b60:	mov	r7, r9
   12b64:	bcs	12b94 <__assert_fail@plt+0x1ad8>
   12b68:	ldrb	r0, [r5, r4]
   12b6c:	cmp	r9, r0
   12b70:	bne	12b8c <__assert_fail@plt+0x1ad0>
   12b74:	add	r4, r4, #1
   12b78:	cmp	r4, r6
   12b7c:	bcc	12b68 <__assert_fail@plt+0x1aac>
   12b80:	mov	r0, r4
   12b84:	mov	r7, r9
   12b88:	b	12b94 <__assert_fail@plt+0x1ad8>
   12b8c:	mov	r0, r4
   12b90:	mvn	r7, #-2147483648	; 0x80000000
   12b94:	cmp	r0, r6
   12b98:	bcc	12bbc <__assert_fail@plt+0x1b00>
   12b9c:	mov	r0, r5
   12ba0:	mov	r1, #8192	; 0x2000
   12ba4:	blx	r8
   12ba8:	cmp	r0, #0
   12bac:	subeq	sp, fp, #28
   12bb0:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bb4:	mov	r6, r0
   12bb8:	mov	r0, #0
   12bbc:	cmn	r7, #-2147483647	; 0x80000001
   12bc0:	bne	12c40 <__assert_fail@plt+0x1b84>
   12bc4:	cmp	r6, r0
   12bc8:	mov	r4, r0
   12bcc:	bls	12bf0 <__assert_fail@plt+0x1b34>
   12bd0:	mov	r4, r0
   12bd4:	ldrb	r1, [r5, r4]
   12bd8:	ldrb	r1, [sl, r1]
   12bdc:	cmp	r1, #0
   12be0:	bne	12bf0 <__assert_fail@plt+0x1b34>
   12be4:	add	r4, r4, #2
   12be8:	cmp	r4, r6
   12bec:	bcc	12bd4 <__assert_fail@plt+0x1b18>
   12bf0:	cmp	r4, r6
   12bf4:	bne	12c0c <__assert_fail@plt+0x1b50>
   12bf8:	sub	r4, r6, #1
   12bfc:	ldrb	r1, [r5, r4]
   12c00:	ldrb	r1, [sl, r1]
   12c04:	cmp	r1, #0
   12c08:	moveq	r4, r6
   12c0c:	cmp	r4, r6
   12c10:	bcs	12c4c <__assert_fail@plt+0x1b90>
   12c14:	ldrb	r9, [r5, r4]
   12c18:	sub	r1, r4, r0
   12c1c:	cmp	r4, #0
   12c20:	add	r7, r1, #1
   12c24:	beq	12c38 <__assert_fail@plt+0x1b7c>
   12c28:	add	r2, r5, r4
   12c2c:	ldrb	r2, [r2, #-1]
   12c30:	cmp	r2, r9
   12c34:	moveq	r7, r1
   12c38:	add	r4, r4, #1
   12c3c:	b	12c54 <__assert_fail@plt+0x1b98>
   12c40:	mov	r9, r7
   12c44:	mov	r4, r0
   12c48:	b	12b58 <__assert_fail@plt+0x1a9c>
   12c4c:	sub	r7, r6, r0
   12c50:	mvn	r9, #-2147483648	; 0x80000000
   12c54:	cmp	r7, #0
   12c58:	beq	12b48 <__assert_fail@plt+0x1a8c>
   12c5c:	movw	r1, #37204	; 0x9154
   12c60:	add	r0, r5, r0
   12c64:	mov	r2, r7
   12c68:	movt	r1, #2
   12c6c:	ldr	r3, [r1]
   12c70:	mov	r1, #1
   12c74:	bl	10ed0 <fwrite_unlocked@plt>
   12c78:	cmp	r0, r7
   12c7c:	beq	12b48 <__assert_fail@plt+0x1a8c>
   12c80:	bl	10fd8 <__errno_location@plt>
   12c84:	ldr	r4, [r0]
   12c88:	movw	r1, #29778	; 0x7452
   12c8c:	mov	r0, #0
   12c90:	mov	r2, #5
   12c94:	movt	r1, #1
   12c98:	bl	10ef4 <dcgettext@plt>
   12c9c:	mov	r2, r0
   12ca0:	mov	r0, #1
   12ca4:	mov	r1, r4
   12ca8:	bl	10f60 <error@plt>
   12cac:	push	{r4, sl, fp, lr}
   12cb0:	add	fp, sp, #8
   12cb4:	mov	r2, r1
   12cb8:	mov	r1, r0
   12cbc:	mov	r0, #0
   12cc0:	bl	152d0 <__assert_fail@plt+0x4214>
   12cc4:	cmn	r0, #1
   12cc8:	popne	{r4, sl, fp, pc}
   12ccc:	bl	10fd8 <__errno_location@plt>
   12cd0:	ldr	r4, [r0]
   12cd4:	movw	r1, #32190	; 0x7dbe
   12cd8:	mov	r0, #0
   12cdc:	mov	r2, #5
   12ce0:	movt	r1, #1
   12ce4:	bl	10ef4 <dcgettext@plt>
   12ce8:	mov	r2, r0
   12cec:	mov	r0, #1
   12cf0:	mov	r1, r4
   12cf4:	bl	10f60 <error@plt>
   12cf8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12cfc:	add	fp, sp, #24
   12d00:	movw	r7, #45662	; 0xb25e
   12d04:	mov	r4, r1
   12d08:	mov	r5, r0
   12d0c:	add	r8, r0, #1
   12d10:	movt	r7, #2
   12d14:	mov	r0, r5
   12d18:	mov	r1, r4
   12d1c:	bl	12cac <__assert_fail@plt+0x1bf0>
   12d20:	cmp	r0, #0
   12d24:	moveq	r0, #0
   12d28:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d2c:	mov	r1, r0
   12d30:	mov	r0, #0
   12d34:	ldrb	r2, [r5, r0]
   12d38:	ldrb	r2, [r7, r2]
   12d3c:	cmp	r2, #0
   12d40:	bne	12d50 <__assert_fail@plt+0x1c94>
   12d44:	add	r0, r0, #1
   12d48:	cmp	r0, r1
   12d4c:	bcc	12d34 <__assert_fail@plt+0x1c78>
   12d50:	add	r2, r0, #1
   12d54:	cmp	r2, r1
   12d58:	bcs	12d88 <__assert_fail@plt+0x1ccc>
   12d5c:	sub	r1, r1, #1
   12d60:	add	r2, r8, r0
   12d64:	sub	r1, r1, r0
   12d68:	ldrb	r3, [r2]
   12d6c:	add	r2, r2, #1
   12d70:	ldrb	r6, [r7, r3]
   12d74:	cmp	r6, #0
   12d78:	strbeq	r3, [r5, r0]
   12d7c:	addeq	r0, r0, #1
   12d80:	subs	r1, r1, #1
   12d84:	bne	12d68 <__assert_fail@plt+0x1cac>
   12d88:	cmp	r0, #0
   12d8c:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d90:	b	12d14 <__assert_fail@plt+0x1c58>
   12d94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d98:	add	fp, sp, #28
   12d9c:	sub	sp, sp, #4
   12da0:	mov	r4, r0
   12da4:	add	sl, r0, #8
   12da8:	mvn	r9, #0
   12dac:	mov	ip, #2
   12db0:	b	12dd8 <__assert_fail@plt+0x1d1c>
   12db4:	mov	r7, r6
   12db8:	ldr	r5, [r7, #16]!
   12dbc:	ldr	r2, [r7, #4]
   12dc0:	orrs	r2, r5, r2
   12dc4:	bne	12fb0 <__assert_fail@plt+0x1ef4>
   12dc8:	ldr	r0, [r6, #4]
   12dcc:	str	r0, [r4, #4]
   12dd0:	str	r9, [sl]
   12dd4:	str	r9, [sl, #4]
   12dd8:	cmp	r1, #0
   12ddc:	strne	ip, [r1]
   12de0:	subs	r7, r9, #1
   12de4:	ldm	sl, {r0, r3}
   12de8:	sbc	r6, r9, #0
   12dec:	eor	r6, r3, r6
   12df0:	eor	r7, r0, r7
   12df4:	orrs	r7, r7, r6
   12df8:	bne	12e1c <__assert_fail@plt+0x1d60>
   12dfc:	ldr	r0, [r4]
   12e00:	mvn	r3, #0
   12e04:	ldr	r6, [r0, #4]
   12e08:	mvn	r0, #0
   12e0c:	str	r6, [r4, #4]
   12e10:	str	r9, [sl]
   12e14:	str	r9, [sl, #4]
   12e18:	b	12e20 <__assert_fail@plt+0x1d64>
   12e1c:	ldr	r6, [r4, #4]
   12e20:	cmp	r6, #0
   12e24:	beq	12fa8 <__assert_fail@plt+0x1eec>
   12e28:	ldr	r7, [r6]
   12e2c:	cmp	r7, #4
   12e30:	bhi	12fec <__assert_fail@plt+0x1f30>
   12e34:	add	r5, pc, #0
   12e38:	ldr	pc, [r5, r7, lsl #2]
   12e3c:	andeq	r2, r1, r0, asr lr
   12e40:	andeq	r2, r1, ip, lsl #29
   12e44:	andeq	r2, r1, r8, ror #28
   12e48:	andeq	r2, r1, r0, asr lr
   12e4c:			; <UNDEFINED> instruction: 0x00012db4
   12e50:	ldrb	r8, [r6, #8]
   12e54:	str	r9, [sl]
   12e58:	str	r9, [sl, #4]
   12e5c:	ldr	r0, [r6, #4]
   12e60:	str	r0, [r4, #4]
   12e64:	b	12f9c <__assert_fail@plt+0x1ee0>
   12e68:	cmp	r1, #0
   12e6c:	beq	12ed4 <__assert_fail@plt+0x1e18>
   12e70:	ldr	r0, [r6, #8]
   12e74:	cmp	r0, #10
   12e78:	beq	12ecc <__assert_fail@plt+0x1e10>
   12e7c:	cmp	r0, #6
   12e80:	bne	12ed4 <__assert_fail@plt+0x1e18>
   12e84:	mov	r0, #0
   12e88:	b	12ed0 <__assert_fail@plt+0x1e14>
   12e8c:	eor	r1, r0, r9
   12e90:	eor	r2, r3, r9
   12e94:	orrs	r1, r1, r2
   12e98:	bne	12ea8 <__assert_fail@plt+0x1dec>
   12e9c:	ldrb	r8, [r6, #8]
   12ea0:	mov	r1, #0
   12ea4:	b	12eb0 <__assert_fail@plt+0x1df4>
   12ea8:	adds	r8, r0, #1
   12eac:	adc	r1, r3, #0
   12eb0:	str	r8, [sl]
   12eb4:	str	r1, [sl, #4]
   12eb8:	ldrb	r0, [r6, #9]
   12ebc:	eor	r0, r8, r0
   12ec0:	orrs	r0, r0, r1
   12ec4:	bne	12f9c <__assert_fail@plt+0x1ee0>
   12ec8:	b	12f8c <__assert_fail@plt+0x1ed0>
   12ecc:	mov	r0, #1
   12ed0:	str	r0, [r1]
   12ed4:	ldr	r8, [sl]
   12ed8:	ldr	r1, [sl, #4]
   12edc:	eor	r0, r1, r9
   12ee0:	eor	r1, r8, r9
   12ee4:	orrs	r0, r1, r0
   12ee8:	bne	12f40 <__assert_fail@plt+0x1e84>
   12eec:	ldr	r5, [r6, #8]
   12ef0:	mov	r8, #0
   12ef4:	uxtb	r1, r8
   12ef8:	mov	r0, r5
   12efc:	bl	13560 <__assert_fail@plt+0x24a4>
   12f00:	cmp	r0, #0
   12f04:	bne	12f34 <__assert_fail@plt+0x1e78>
   12f08:	add	r8, r8, #1
   12f0c:	cmp	r8, #256	; 0x100
   12f10:	bcc	12ef4 <__assert_fail@plt+0x1e38>
   12f14:	movw	r0, #32201	; 0x7dc9
   12f18:	movw	r1, #29816	; 0x7478
   12f1c:	movw	r3, #32213	; 0x7dd5
   12f20:	movw	r2, #1079	; 0x437
   12f24:	movt	r0, #1
   12f28:	movt	r1, #1
   12f2c:	movt	r3, #1
   12f30:	bl	110bc <__assert_fail@plt>
   12f34:	mov	r1, #0
   12f38:	str	r8, [sl]
   12f3c:	str	r1, [sl, #4]
   12f40:	ldr	r5, [r6, #8]
   12f44:	uxtb	r1, r8
   12f48:	mov	r0, r5
   12f4c:	bl	13560 <__assert_fail@plt+0x24a4>
   12f50:	cmp	r0, #0
   12f54:	beq	12ff0 <__assert_fail@plt+0x1f34>
   12f58:	mov	r7, r8
   12f5c:	add	r7, r7, #1
   12f60:	cmp	r7, #255	; 0xff
   12f64:	bgt	12f8c <__assert_fail@plt+0x1ed0>
   12f68:	uxtb	r1, r7
   12f6c:	mov	r0, r5
   12f70:	bl	13560 <__assert_fail@plt+0x24a4>
   12f74:	cmp	r0, #0
   12f78:	beq	12f5c <__assert_fail@plt+0x1ea0>
   12f7c:	asr	r1, r7, #31
   12f80:	str	r7, [sl]
   12f84:	str	r1, [sl, #4]
   12f88:	b	12f9c <__assert_fail@plt+0x1ee0>
   12f8c:	ldr	r0, [r6, #4]
   12f90:	str	r0, [r4, #4]
   12f94:	str	r9, [sl]
   12f98:	str	r9, [sl, #4]
   12f9c:	mov	r0, r8
   12fa0:	sub	sp, fp, #28
   12fa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fa8:	mvn	r8, #0
   12fac:	b	12f9c <__assert_fail@plt+0x1ee0>
   12fb0:	eor	r1, r0, r9
   12fb4:	eor	r2, r3, r9
   12fb8:	orrs	r1, r1, r2
   12fbc:	moveq	r0, #0
   12fc0:	moveq	r3, #0
   12fc4:	streq	r0, [sl]
   12fc8:	streq	r0, [sl, #4]
   12fcc:	adds	r0, r0, #1
   12fd0:	adc	r1, r3, #0
   12fd4:	strd	r0, [sl]
   12fd8:	ldrd	r2, [r7]
   12fdc:	ldrb	r8, [r6, #8]
   12fe0:	eor	r1, r1, r3
   12fe4:	eor	r0, r0, r2
   12fe8:	b	12ec0 <__assert_fail@plt+0x1e04>
   12fec:	bl	110a4 <abort@plt>
   12ff0:	movw	r0, #32272	; 0x7e10
   12ff4:	movw	r1, #29816	; 0x7478
   12ff8:	movw	r3, #32213	; 0x7dd5
   12ffc:	movw	r2, #1082	; 0x43a
   13000:	movt	r0, #1
   13004:	movt	r1, #1
   13008:	movt	r3, #1
   1300c:	bl	110bc <__assert_fail@plt>
   13010:	push	{r4, sl, fp, lr}
   13014:	add	fp, sp, #8
   13018:	mov	r4, r0
   1301c:	bl	12cac <__assert_fail@plt+0x1bf0>
   13020:	cmp	r0, #0
   13024:	popeq	{r4, sl, fp, pc}
   13028:	movw	r1, #45918	; 0xb35e
   1302c:	mov	r2, r0
   13030:	movt	r1, #2
   13034:	ldrb	r3, [r4]
   13038:	subs	r2, r2, #1
   1303c:	ldrb	r3, [r1, r3]
   13040:	strb	r3, [r4], #1
   13044:	bne	13034 <__assert_fail@plt+0x1f78>
   13048:	pop	{r4, sl, fp, pc}
   1304c:	push	{r4, r5, fp, lr}
   13050:	add	fp, sp, #8
   13054:	ldr	r3, [r0]
   13058:	mov	r2, r0
   1305c:	mov	r0, #0
   13060:	ldrb	r4, [r3, r1]
   13064:	cmp	r4, #42	; 0x2a
   13068:	bne	1307c <__assert_fail@plt+0x1fc0>
   1306c:	ldr	ip, [r2, #4]
   13070:	ldrb	r4, [ip, r1]
   13074:	cmp	r4, #0
   13078:	beq	13080 <__assert_fail@plt+0x1fc4>
   1307c:	pop	{r4, r5, fp, pc}
   13080:	ldr	lr, [r2, #8]
   13084:	add	r4, r1, #1
   13088:	cmp	r4, lr
   1308c:	popcs	{r4, r5, fp, pc}
   13090:	ldrb	r2, [r3, r4]
   13094:	mov	r1, r4
   13098:	sub	r4, r2, #48	; 0x30
   1309c:	cmp	r4, #9
   130a0:	bhi	130b4 <__assert_fail@plt+0x1ff8>
   130a4:	ldrb	r5, [ip, r1]
   130a8:	add	r4, r1, #1
   130ac:	cmp	r5, #0
   130b0:	beq	13088 <__assert_fail@plt+0x1fcc>
   130b4:	cmp	r2, #93	; 0x5d
   130b8:	ldrbeq	r0, [ip, r1]
   130bc:	clzeq	r0, r0
   130c0:	lsreq	r0, r0, #5
   130c4:	pop	{r4, r5, fp, pc}
   130c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130cc:	add	fp, sp, #28
   130d0:	sub	sp, sp, #12
   130d4:	mov	r5, r0
   130d8:	mov	r4, r1
   130dc:	add	r0, r1, #1
   130e0:	mov	r1, #4
   130e4:	bl	158c0 <__assert_fail@plt+0x4804>
   130e8:	mov	sl, r0
   130ec:	cmp	r4, #0
   130f0:	beq	131f8 <__assert_fail@plt+0x213c>
   130f4:	movw	r7, #30733	; 0x780d
   130f8:	add	r9, sp, #7
   130fc:	mov	r6, sl
   13100:	movt	r7, #1
   13104:	ldrb	r8, [r5]
   13108:	sub	r0, r8, #7
   1310c:	cmp	r0, #6
   13110:	bhi	13144 <__assert_fail@plt+0x2088>
   13114:	add	r1, pc, #0
   13118:	ldr	pc, [r1, r0, lsl #2]
   1311c:	andeq	r3, r1, r8, lsr r1
   13120:	andeq	r3, r1, r8, lsl #3
   13124:	muleq	r1, r4, r1
   13128:	andeq	r3, r1, r0, lsr #3
   1312c:	andeq	r3, r1, ip, lsr #3
   13130:			; <UNDEFINED> instruction: 0x000131b8
   13134:	andeq	r3, r1, r4, asr #3
   13138:	movw	r1, #30735	; 0x780f
   1313c:	movt	r1, #1
   13140:	b	131e0 <__assert_fail@plt+0x2124>
   13144:	cmp	r8, #92	; 0x5c
   13148:	mov	r1, r7
   1314c:	beq	131e0 <__assert_fail@plt+0x2124>
   13150:	bl	10fa8 <__ctype_b_loc@plt>
   13154:	ldr	r0, [r0]
   13158:	add	r0, r0, r8, lsl #1
   1315c:	ldrb	r0, [r0, #1]
   13160:	tst	r0, #64	; 0x40
   13164:	bne	131d0 <__assert_fail@plt+0x2114>
   13168:	movw	r3, #30756	; 0x7824
   1316c:	mov	r0, r9
   13170:	mov	r1, #1
   13174:	mov	r2, #5
   13178:	str	r8, [sp]
   1317c:	movt	r3, #1
   13180:	bl	10fe4 <__sprintf_chk@plt>
   13184:	b	131dc <__assert_fail@plt+0x2120>
   13188:	movw	r1, #30738	; 0x7812
   1318c:	movt	r1, #1
   13190:	b	131e0 <__assert_fail@plt+0x2124>
   13194:	movw	r1, #30750	; 0x781e
   13198:	movt	r1, #1
   1319c:	b	131e0 <__assert_fail@plt+0x2124>
   131a0:	movw	r1, #30744	; 0x7818
   131a4:	movt	r1, #1
   131a8:	b	131e0 <__assert_fail@plt+0x2124>
   131ac:	movw	r1, #30753	; 0x7821
   131b0:	movt	r1, #1
   131b4:	b	131e0 <__assert_fail@plt+0x2124>
   131b8:	movw	r1, #30741	; 0x7815
   131bc:	movt	r1, #1
   131c0:	b	131e0 <__assert_fail@plt+0x2124>
   131c4:	movw	r1, #30747	; 0x781b
   131c8:	movt	r1, #1
   131cc:	b	131e0 <__assert_fail@plt+0x2124>
   131d0:	mov	r0, #0
   131d4:	strb	r0, [sp, #8]
   131d8:	strb	r8, [sp, #7]
   131dc:	mov	r1, r9
   131e0:	mov	r0, r6
   131e4:	bl	10ee8 <stpcpy@plt>
   131e8:	mov	r6, r0
   131ec:	subs	r4, r4, #1
   131f0:	add	r5, r5, #1
   131f4:	bne	13104 <__assert_fail@plt+0x2048>
   131f8:	mov	r0, sl
   131fc:	sub	sp, fp, #28
   13200:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13204:	push	{r4, r5, r6, r7, fp, lr}
   13208:	add	fp, sp, #16
   1320c:	mov	r4, r0
   13210:	mov	r0, #24
   13214:	mov	r7, r3
   13218:	mov	r6, r2
   1321c:	mov	r5, r1
   13220:	bl	157f0 <__assert_fail@plt+0x4734>
   13224:	mov	r2, #4
   13228:	mov	r1, #0
   1322c:	str	r2, [r0]
   13230:	str	r1, [r0, #4]
   13234:	strb	r5, [r0, #8]
   13238:	strd	r6, [r0, #16]
   1323c:	ldr	r1, [r4, #4]
   13240:	cmp	r1, #0
   13244:	strne	r0, [r1, #4]
   13248:	strne	r0, [r4, #4]
   1324c:	popne	{r4, r5, r6, r7, fp, pc}
   13250:	movw	r0, #30589	; 0x777d
   13254:	movw	r1, #29816	; 0x7478
   13258:	movw	r3, #30991	; 0x790f
   1325c:	movw	r2, #721	; 0x2d1
   13260:	movt	r0, #1
   13264:	movt	r1, #1
   13268:	movt	r3, #1
   1326c:	bl	110bc <__assert_fail@plt>
   13270:	push	{r4, r5, fp, lr}
   13274:	add	fp, sp, #8
   13278:	mov	r4, r0
   1327c:	mov	r0, #24
   13280:	mov	r5, r1
   13284:	bl	157f0 <__assert_fail@plt+0x4734>
   13288:	mov	r1, #0
   1328c:	str	r1, [r0]
   13290:	str	r1, [r0, #4]
   13294:	strb	r5, [r0, #8]
   13298:	ldr	r1, [r4, #4]
   1329c:	cmp	r1, #0
   132a0:	strne	r0, [r1, #4]
   132a4:	strne	r0, [r4, #4]
   132a8:	popne	{r4, r5, fp, pc}
   132ac:	movw	r0, #30589	; 0x777d
   132b0:	movw	r1, #29816	; 0x7478
   132b4:	movw	r3, #31195	; 0x79db
   132b8:	movw	r2, #649	; 0x289
   132bc:	movt	r0, #1
   132c0:	movt	r1, #1
   132c4:	movt	r3, #1
   132c8:	bl	110bc <__assert_fail@plt>
   132cc:	push	{r4, r5, fp, lr}
   132d0:	add	fp, sp, #8
   132d4:	sub	sp, sp, #8
   132d8:	mov	r5, r0
   132dc:	mov	r0, #5
   132e0:	bl	157f0 <__assert_fail@plt+0x4734>
   132e4:	mov	r4, r0
   132e8:	bl	10fa8 <__ctype_b_loc@plt>
   132ec:	ldr	r0, [r0]
   132f0:	add	r0, r0, r5, lsl #1
   132f4:	ldrb	r0, [r0, #1]
   132f8:	tst	r0, #64	; 0x40
   132fc:	bne	13320 <__assert_fail@plt+0x2264>
   13300:	movw	r3, #30756	; 0x7824
   13304:	mov	r0, r4
   13308:	mov	r1, #1
   1330c:	mov	r2, #5
   13310:	str	r5, [sp]
   13314:	movt	r3, #1
   13318:	bl	10fe4 <__sprintf_chk@plt>
   1331c:	b	1332c <__assert_fail@plt+0x2270>
   13320:	mov	r0, #0
   13324:	strb	r0, [r4, #1]
   13328:	strb	r5, [r4]
   1332c:	mov	r0, r4
   13330:	sub	sp, fp, #8
   13334:	pop	{r4, r5, fp, pc}
   13338:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1333c:	add	fp, sp, #28
   13340:	sub	sp, sp, #4
   13344:	vpush	{d8-d10}
   13348:	sub	sp, sp, #8
   1334c:	mov	r2, #0
   13350:	vldr	d8, [pc, #496]	; 13548 <__assert_fail@plt+0x248c>
   13354:	mov	r1, #0
   13358:	mov	ip, #1
   1335c:	vmov.i32	d9, #255	; 0x000000ff
   13360:	vmov.i32	d10, #2	; 0x00000002
   13364:	mov	r8, #0
   13368:	mov	r6, #0
   1336c:	str	r0, [sp, #4]
   13370:	str	r2, [r0, #24]
   13374:	strb	r2, [r0, #34]	; 0x22
   13378:	strh	r2, [r0, #32]
   1337c:	str	r1, [sp]
   13380:	ldr	r7, [r0]
   13384:	ldr	r7, [r7, #4]
   13388:	cmp	r7, #0
   1338c:	beq	13508 <__assert_fail@plt+0x244c>
   13390:	ldr	r2, [r7]
   13394:	cmp	r2, #4
   13398:	bhi	13520 <__assert_fail@plt+0x2464>
   1339c:	add	r1, pc, #8
   133a0:	mov	r5, #0
   133a4:	mov	r4, #1
   133a8:	ldr	pc, [r1, r2, lsl #2]
   133ac:			; <UNDEFINED> instruction: 0x000134bc
   133b0:	andeq	r3, r1, r0, asr #7
   133b4:	andeq	r3, r1, ip, lsl #8
   133b8:	andeq	r3, r1, ip, asr r4
   133bc:	andeq	r3, r1, r0, ror #7
   133c0:	ldrb	r2, [r7, #8]
   133c4:	ldrb	r1, [r7, #9]
   133c8:	cmp	r1, r2
   133cc:	bcc	13524 <__assert_fail@plt+0x2468>
   133d0:	add	r1, r1, #1
   133d4:	sub	r4, r1, r2
   133d8:	asr	r5, r4, #31
   133dc:	b	134bc <__assert_fail@plt+0x2400>
   133e0:	ldrd	r4, [r7, #16]
   133e4:	orrs	r1, r4, r5
   133e8:	bne	134bc <__assert_fail@plt+0x2400>
   133ec:	ldr	r1, [sp]
   133f0:	mov	r4, #0
   133f4:	mov	r5, #0
   133f8:	add	r1, r1, #1
   133fc:	str	r1, [sp]
   13400:	str	r1, [r0, #24]
   13404:	str	r7, [r0, #28]
   13408:	b	134bc <__assert_fail@plt+0x2400>
   1340c:	strb	ip, [r0, #33]	; 0x21
   13410:	mov	sl, #0
   13414:	mov	r4, #0
   13418:	mov	r5, #0
   1341c:	ldr	r9, [r7, #8]
   13420:	uxtb	r1, sl
   13424:	mov	r0, r9
   13428:	bl	13560 <__assert_fail@plt+0x24a4>
   1342c:	adds	r4, r4, r0
   13430:	add	sl, sl, #1
   13434:	adc	r5, r5, #0
   13438:	cmp	sl, #256	; 0x100
   1343c:	bne	13420 <__assert_fail@plt+0x2364>
   13440:	cmp	r9, #6
   13444:	beq	134b4 <__assert_fail@plt+0x23f8>
   13448:	ldr	r0, [sp, #4]
   1344c:	cmp	r9, #10
   13450:	mov	ip, #1
   13454:	strbne	ip, [r0, #34]	; 0x22
   13458:	b	134bc <__assert_fail@plt+0x2400>
   1345c:	ldrb	r1, [r7, #8]
   13460:	vmov.i32	q8, #0	; 0x00000000
   13464:	mov	r2, #256	; 0x100
   13468:	vorr	d19, d8, d8
   1346c:	vdup.32	d18, r1
   13470:	add	r1, pc, #216	; 0xd8
   13474:	vand	d20, d19, d9
   13478:	vand	d21, d18, d9
   1347c:	subs	r2, r2, #2
   13480:	vadd.i32	d19, d19, d10
   13484:	vld1.64	{d22-d23}, [r1]
   13488:	vceq.i32	d20, d21, d20
   1348c:	vmovl.u32	q10, d20
   13490:	vand	q10, q10, q11
   13494:	vadd.i64	q8, q8, q10
   13498:	bne	13470 <__assert_fail@plt+0x23b4>
   1349c:	vorr	d18, d17, d17
   134a0:	strb	ip, [r0, #32]
   134a4:	vadd.i64	q8, q8, q9
   134a8:	vmov.32	r5, d16[1]
   134ac:	vmov.32	r4, d16[0]
   134b0:	b	134bc <__assert_fail@plt+0x2400>
   134b4:	ldr	r0, [sp, #4]
   134b8:	mov	ip, #1
   134bc:	adds	r3, r4, r8
   134c0:	adc	r1, r5, r6
   134c4:	subs	r2, r3, r8
   134c8:	sbcs	r2, r1, r6
   134cc:	bcc	134e4 <__assert_fail@plt+0x2428>
   134d0:	and	r2, r3, r1
   134d4:	mov	r8, r3
   134d8:	mov	r6, r1
   134dc:	cmn	r2, #1
   134e0:	bne	13384 <__assert_fail@plt+0x22c8>
   134e4:	movw	r1, #31824	; 0x7c50
   134e8:	mov	r0, #0
   134ec:	mov	r2, #5
   134f0:	movt	r1, #1
   134f4:	bl	10ef4 <dcgettext@plt>
   134f8:	mov	r2, r0
   134fc:	mov	r0, #1
   13500:	mov	r1, #0
   13504:	bl	10f60 <error@plt>
   13508:	str	r8, [r0, #16]
   1350c:	str	r6, [r0, #20]
   13510:	sub	sp, fp, #56	; 0x38
   13514:	vpop	{d8-d10}
   13518:	add	sp, sp, #4
   1351c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13520:	bl	110a4 <abort@plt>
   13524:	movw	r0, #31738	; 0x7bfa
   13528:	movw	r1, #29816	; 0x7478
   1352c:	movw	r3, #31784	; 0x7c28
   13530:	movw	r2, #1265	; 0x4f1
   13534:	movt	r0, #1
   13538:	movt	r1, #1
   1353c:	movt	r3, #1
   13540:	bl	110bc <__assert_fail@plt>
   13544:	nop	{0}
   13548:	andeq	r0, r0, r0
   1354c:	andeq	r0, r0, r1
   13550:	andeq	r0, r0, r1
   13554:	andeq	r0, r0, r0
   13558:	andeq	r0, r0, r1
   1355c:	andeq	r0, r0, r0
   13560:	push	{r4, r5, fp, lr}
   13564:	add	fp, sp, #8
   13568:	cmp	r0, #11
   1356c:	bhi	13620 <__assert_fail@plt+0x2564>
   13570:	mov	r4, r1
   13574:	add	r1, pc, #4
   13578:	mov	r5, #8
   1357c:	ldr	pc, [r1, r0, lsl #2]
   13580:	andeq	r3, r1, r4, lsl #12
   13584:			; <UNDEFINED> instruction: 0x000135b0
   13588:	andeq	r3, r1, r8, asr #11
   1358c:	ldrdeq	r3, [r1], -r8
   13590:	andeq	r3, r1, r0, asr #11
   13594:	andeq	r3, r1, r8, ror #11
   13598:	strdeq	r3, [r1], -r0
   1359c:	andeq	r3, r1, r0, ror #11
   135a0:	strdeq	r3, [r1], -r8
   135a4:	ldrdeq	r3, [r1], -r0
   135a8:	andeq	r3, r1, r0, lsl #12
   135ac:			; <UNDEFINED> instruction: 0x000135b8
   135b0:	mov	r5, #1024	; 0x400
   135b4:	b	13604 <__assert_fail@plt+0x2548>
   135b8:	mov	r5, #4096	; 0x1000
   135bc:	b	13604 <__assert_fail@plt+0x2548>
   135c0:	mov	r5, #2048	; 0x800
   135c4:	b	13604 <__assert_fail@plt+0x2548>
   135c8:	mov	r5, #1
   135cc:	b	13604 <__assert_fail@plt+0x2548>
   135d0:	mov	r5, #8192	; 0x2000
   135d4:	b	13604 <__assert_fail@plt+0x2548>
   135d8:	mov	r5, #2
   135dc:	b	13604 <__assert_fail@plt+0x2548>
   135e0:	mov	r5, #16384	; 0x4000
   135e4:	b	13604 <__assert_fail@plt+0x2548>
   135e8:	mov	r5, #32768	; 0x8000
   135ec:	b	13604 <__assert_fail@plt+0x2548>
   135f0:	mov	r5, #512	; 0x200
   135f4:	b	13604 <__assert_fail@plt+0x2548>
   135f8:	mov	r5, #4
   135fc:	b	13604 <__assert_fail@plt+0x2548>
   13600:	mov	r5, #256	; 0x100
   13604:	bl	10fa8 <__ctype_b_loc@plt>
   13608:	ldr	r0, [r0]
   1360c:	add	r0, r0, r4, lsl #1
   13610:	ldrh	r0, [r0]
   13614:	ands	r0, r0, r5
   13618:	movwne	r0, #1
   1361c:	pop	{r4, r5, fp, pc}
   13620:	bl	110a4 <abort@plt>
   13624:	movw	r1, #46176	; 0xb460
   13628:	movt	r1, #2
   1362c:	str	r0, [r1]
   13630:	bx	lr
   13634:	movw	r1, #46180	; 0xb464
   13638:	movt	r1, #2
   1363c:	strb	r0, [r1]
   13640:	bx	lr
   13644:	push	{r4, r5, r6, sl, fp, lr}
   13648:	add	fp, sp, #16
   1364c:	sub	sp, sp, #8
   13650:	movw	r0, #37204	; 0x9154
   13654:	movt	r0, #2
   13658:	ldr	r0, [r0]
   1365c:	bl	16410 <__assert_fail@plt+0x5354>
   13660:	cmp	r0, #0
   13664:	beq	1368c <__assert_fail@plt+0x25d0>
   13668:	movw	r0, #46180	; 0xb464
   1366c:	movt	r0, #2
   13670:	ldrb	r0, [r0]
   13674:	cmp	r0, #0
   13678:	beq	136ac <__assert_fail@plt+0x25f0>
   1367c:	bl	10fd8 <__errno_location@plt>
   13680:	ldr	r0, [r0]
   13684:	cmp	r0, #32
   13688:	bne	136ac <__assert_fail@plt+0x25f0>
   1368c:	movw	r0, #37192	; 0x9148
   13690:	movt	r0, #2
   13694:	ldr	r0, [r0]
   13698:	bl	16410 <__assert_fail@plt+0x5354>
   1369c:	cmp	r0, #0
   136a0:	subeq	sp, fp, #16
   136a4:	popeq	{r4, r5, r6, sl, fp, pc}
   136a8:	b	1371c <__assert_fail@plt+0x2660>
   136ac:	movw	r1, #29778	; 0x7452
   136b0:	mov	r0, #0
   136b4:	mov	r2, #5
   136b8:	movt	r1, #1
   136bc:	bl	10ef4 <dcgettext@plt>
   136c0:	mov	r4, r0
   136c4:	movw	r0, #46176	; 0xb460
   136c8:	movt	r0, #2
   136cc:	ldr	r6, [r0]
   136d0:	bl	10fd8 <__errno_location@plt>
   136d4:	ldr	r5, [r0]
   136d8:	cmp	r6, #0
   136dc:	bne	136f8 <__assert_fail@plt+0x263c>
   136e0:	movw	r2, #32563	; 0x7f33
   136e4:	mov	r0, #0
   136e8:	mov	r1, r5
   136ec:	mov	r3, r4
   136f0:	movt	r2, #1
   136f4:	b	13718 <__assert_fail@plt+0x265c>
   136f8:	mov	r0, r6
   136fc:	bl	14f58 <__assert_fail@plt+0x3e9c>
   13700:	movw	r2, #32559	; 0x7f2f
   13704:	mov	r3, r0
   13708:	str	r4, [sp]
   1370c:	mov	r0, #0
   13710:	mov	r1, r5
   13714:	movt	r2, #1
   13718:	bl	10f60 <error@plt>
   1371c:	movw	r0, #37108	; 0x90f4
   13720:	movt	r0, #2
   13724:	ldr	r0, [r0]
   13728:	bl	10ea0 <_exit@plt>
   1372c:	b	10e70 <posix_fadvise64@plt>
   13730:	cmp	r0, #0
   13734:	bxeq	lr
   13738:	push	{r4, sl, fp, lr}
   1373c:	add	fp, sp, #8
   13740:	sub	sp, sp, #16
   13744:	mov	r4, r1
   13748:	bl	11014 <fileno@plt>
   1374c:	mov	r1, #0
   13750:	mov	r2, #0
   13754:	mov	r3, #0
   13758:	str	r1, [sp]
   1375c:	stmib	sp, {r1, r4}
   13760:	bl	10e70 <posix_fadvise64@plt>
   13764:	sub	sp, fp, #8
   13768:	pop	{r4, sl, fp, pc}
   1376c:	push	{r4, r5, r6, sl, fp, lr}
   13770:	add	fp, sp, #16
   13774:	mov	r4, r0
   13778:	bl	10fd8 <__errno_location@plt>
   1377c:	ldr	r6, [r0]
   13780:	mov	r5, r0
   13784:	mov	r0, r4
   13788:	bl	10e94 <free@plt>
   1378c:	str	r6, [r5]
   13790:	pop	{r4, r5, r6, sl, fp, pc}
   13794:	push	{r4, r5, fp, lr}
   13798:	add	fp, sp, #8
   1379c:	cmp	r0, #0
   137a0:	beq	13834 <__assert_fail@plt+0x2778>
   137a4:	mov	r1, #47	; 0x2f
   137a8:	mov	r4, r0
   137ac:	bl	11068 <strrchr@plt>
   137b0:	cmp	r0, #0
   137b4:	mov	r5, r4
   137b8:	addne	r5, r0, #1
   137bc:	sub	r0, r5, r4
   137c0:	cmp	r0, #7
   137c4:	blt	13818 <__assert_fail@plt+0x275c>
   137c8:	movw	r1, #32622	; 0x7f6e
   137cc:	sub	r0, r5, #7
   137d0:	mov	r2, #7
   137d4:	movt	r1, #1
   137d8:	bl	11098 <strncmp@plt>
   137dc:	cmp	r0, #0
   137e0:	bne	13818 <__assert_fail@plt+0x275c>
   137e4:	movw	r1, #32630	; 0x7f76
   137e8:	mov	r0, r5
   137ec:	mov	r2, #3
   137f0:	movt	r1, #1
   137f4:	bl	11098 <strncmp@plt>
   137f8:	cmp	r0, #0
   137fc:	beq	13808 <__assert_fail@plt+0x274c>
   13800:	mov	r4, r5
   13804:	b	13818 <__assert_fail@plt+0x275c>
   13808:	movw	r0, #37176	; 0x9138
   1380c:	add	r4, r5, #3
   13810:	movt	r0, #2
   13814:	str	r4, [r0]
   13818:	movw	r0, #37180	; 0x913c
   1381c:	movt	r0, #2
   13820:	str	r4, [r0]
   13824:	movw	r0, #46184	; 0xb468
   13828:	movt	r0, #2
   1382c:	str	r4, [r0]
   13830:	pop	{r4, r5, fp, pc}
   13834:	movw	r0, #37192	; 0x9148
   13838:	movt	r0, #2
   1383c:	ldr	r1, [r0]
   13840:	movw	r0, #32566	; 0x7f36
   13844:	movt	r0, #1
   13848:	bl	1108c <fputs@plt>
   1384c:	bl	110a4 <abort@plt>
   13850:	push	{r4, r5, r6, sl, fp, lr}
   13854:	add	fp, sp, #16
   13858:	mov	r4, r0
   1385c:	movw	r0, #46192	; 0xb470
   13860:	movt	r0, #2
   13864:	cmp	r4, #0
   13868:	moveq	r4, r0
   1386c:	bl	10fd8 <__errno_location@plt>
   13870:	ldr	r6, [r0]
   13874:	mov	r5, r0
   13878:	mov	r0, r4
   1387c:	mov	r1, #48	; 0x30
   13880:	bl	15b40 <__assert_fail@plt+0x4a84>
   13884:	str	r6, [r5]
   13888:	pop	{r4, r5, r6, sl, fp, pc}
   1388c:	movw	r1, #46192	; 0xb470
   13890:	cmp	r0, #0
   13894:	movt	r1, #2
   13898:	movne	r1, r0
   1389c:	ldr	r0, [r1]
   138a0:	bx	lr
   138a4:	movw	r2, #46192	; 0xb470
   138a8:	cmp	r0, #0
   138ac:	movt	r2, #2
   138b0:	movne	r2, r0
   138b4:	str	r1, [r2]
   138b8:	bx	lr
   138bc:	movw	r3, #46192	; 0xb470
   138c0:	cmp	r0, #0
   138c4:	movt	r3, #2
   138c8:	movne	r3, r0
   138cc:	ubfx	r0, r1, #5, #3
   138d0:	and	r1, r1, #31
   138d4:	add	r0, r3, r0, lsl #2
   138d8:	ldr	r3, [r0, #8]
   138dc:	eor	r2, r2, r3, lsr r1
   138e0:	and	r2, r2, #1
   138e4:	eor	r2, r3, r2, lsl r1
   138e8:	str	r2, [r0, #8]
   138ec:	mov	r0, #1
   138f0:	and	r0, r0, r3, lsr r1
   138f4:	bx	lr
   138f8:	movw	r2, #46192	; 0xb470
   138fc:	cmp	r0, #0
   13900:	movt	r2, #2
   13904:	movne	r2, r0
   13908:	ldr	r0, [r2, #4]
   1390c:	str	r1, [r2, #4]
   13910:	bx	lr
   13914:	movw	r3, #46192	; 0xb470
   13918:	cmp	r0, #0
   1391c:	movt	r3, #2
   13920:	movne	r3, r0
   13924:	cmp	r1, #0
   13928:	mov	r0, #10
   1392c:	cmpne	r2, #0
   13930:	str	r0, [r3]
   13934:	bne	13944 <__assert_fail@plt+0x2888>
   13938:	push	{fp, lr}
   1393c:	mov	fp, sp
   13940:	bl	110a4 <abort@plt>
   13944:	str	r1, [r3, #40]	; 0x28
   13948:	str	r2, [r3, #44]	; 0x2c
   1394c:	bx	lr
   13950:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13954:	add	fp, sp, #28
   13958:	sub	sp, sp, #20
   1395c:	mov	r7, r0
   13960:	ldr	r0, [fp, #8]
   13964:	movw	r5, #46192	; 0xb470
   13968:	mov	r8, r3
   1396c:	mov	r9, r2
   13970:	mov	sl, r1
   13974:	movt	r5, #2
   13978:	cmp	r0, #0
   1397c:	movne	r5, r0
   13980:	bl	10fd8 <__errno_location@plt>
   13984:	mov	r4, r0
   13988:	ldm	r5, {r0, r1}
   1398c:	ldr	r2, [r5, #40]	; 0x28
   13990:	ldr	r3, [r5, #44]	; 0x2c
   13994:	add	r5, r5, #8
   13998:	ldr	r6, [r4]
   1399c:	stm	sp, {r0, r1, r5}
   139a0:	str	r2, [sp, #12]
   139a4:	str	r3, [sp, #16]
   139a8:	mov	r0, r7
   139ac:	mov	r1, sl
   139b0:	mov	r2, r9
   139b4:	mov	r3, r8
   139b8:	bl	139c8 <__assert_fail@plt+0x290c>
   139bc:	str	r6, [r4]
   139c0:	sub	sp, fp, #28
   139c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139cc:	add	fp, sp, #28
   139d0:	sub	sp, sp, #156	; 0x9c
   139d4:	str	r0, [fp, #-56]	; 0xffffffc8
   139d8:	ldr	r0, [fp, #12]
   139dc:	mov	r4, r1
   139e0:	str	r3, [sp, #80]	; 0x50
   139e4:	str	r2, [fp, #-84]	; 0xffffffac
   139e8:	and	r1, r0, #4
   139ec:	str	r1, [sp, #24]
   139f0:	and	r1, r0, #1
   139f4:	str	r1, [sp, #28]
   139f8:	ubfx	r7, r0, #1, #1
   139fc:	bl	10f30 <__ctype_get_mb_cur_max@plt>
   13a00:	str	r0, [sp, #32]
   13a04:	ldr	r0, [fp, #24]
   13a08:	ldr	r9, [fp, #8]
   13a0c:	mov	r2, #0
   13a10:	mov	r1, #0
   13a14:	mov	r5, #0
   13a18:	str	r2, [sp, #52]	; 0x34
   13a1c:	mov	r2, #1
   13a20:	str	r0, [sp, #72]	; 0x48
   13a24:	ldr	r0, [fp, #20]
   13a28:	str	r0, [sp, #64]	; 0x40
   13a2c:	mov	r0, #0
   13a30:	str	r0, [sp, #92]	; 0x5c
   13a34:	mov	r0, #0
   13a38:	str	r0, [fp, #-76]	; 0xffffffb4
   13a3c:	mov	r0, #0
   13a40:	cmp	r9, #10
   13a44:	str	r1, [sp, #68]	; 0x44
   13a48:	bhi	14a48 <__assert_fail@plt+0x398c>
   13a4c:	add	r1, pc, #28
   13a50:	ldr	ip, [fp, #-84]	; 0xffffffac
   13a54:	ldr	lr, [sp, #80]	; 0x50
   13a58:	mov	r6, r4
   13a5c:	mov	r8, #0
   13a60:	mov	r3, #1
   13a64:	mov	sl, #0
   13a68:	mov	r4, r2
   13a6c:	ldr	pc, [r1, r9, lsl #2]
   13a70:	andeq	r3, r1, r0, asr #22
   13a74:	andeq	r3, r1, ip, ror fp
   13a78:	andeq	r3, r1, r0, asr fp
   13a7c:	andeq	r3, r1, r8, lsr fp
   13a80:	andeq	r3, r1, r0, ror fp
   13a84:	andeq	r3, r1, r8, asr #23
   13a88:	andeq	r3, r1, r0, ror #22
   13a8c:	andeq	r3, r1, r8, lsr #24
   13a90:	muleq	r1, ip, sl
   13a94:	muleq	r1, ip, sl
   13a98:	andeq	r3, r1, r4, asr #21
   13a9c:	movw	r0, #32712	; 0x7fc8
   13aa0:	mov	r1, r9
   13aa4:	movt	r0, #1
   13aa8:	bl	151b0 <__assert_fail@plt+0x40f4>
   13aac:	str	r0, [sp, #64]	; 0x40
   13ab0:	movw	r0, #30460	; 0x76fc
   13ab4:	mov	r1, r9
   13ab8:	movt	r0, #1
   13abc:	bl	151b0 <__assert_fail@plt+0x40f4>
   13ac0:	str	r0, [sp, #72]	; 0x48
   13ac4:	mov	r8, #0
   13ac8:	mov	sl, r7
   13acc:	tst	r7, #1
   13ad0:	str	r5, [fp, #-48]	; 0xffffffd0
   13ad4:	bne	13b10 <__assert_fail@plt+0x2a54>
   13ad8:	ldr	r0, [sp, #64]	; 0x40
   13adc:	ldrb	r0, [r0]
   13ae0:	cmp	r0, #0
   13ae4:	beq	13b10 <__assert_fail@plt+0x2a54>
   13ae8:	ldr	r1, [sp, #64]	; 0x40
   13aec:	mov	r8, #0
   13af0:	add	r1, r1, #1
   13af4:	cmp	r8, r6
   13af8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13afc:	strbcc	r0, [r2, r8]
   13b00:	ldrb	r0, [r1, r8]
   13b04:	add	r8, r8, #1
   13b08:	cmp	r0, #0
   13b0c:	bne	13af4 <__assert_fail@plt+0x2a38>
   13b10:	ldr	r7, [sp, #72]	; 0x48
   13b14:	mov	r0, r7
   13b18:	bl	10fc0 <strlen@plt>
   13b1c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13b20:	ldr	lr, [sp, #80]	; 0x50
   13b24:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13b28:	str	r0, [fp, #-76]	; 0xffffffb4
   13b2c:	str	r7, [sp, #92]	; 0x5c
   13b30:	mov	r3, #1
   13b34:	b	13c28 <__assert_fail@plt+0x2b6c>
   13b38:	mov	r0, #1
   13b3c:	b	13b7c <__assert_fail@plt+0x2ac0>
   13b40:	mov	r9, #0
   13b44:	mov	r8, #0
   13b48:	mov	r3, r0
   13b4c:	b	13c24 <__assert_fail@plt+0x2b68>
   13b50:	tst	r7, #1
   13b54:	bne	13b7c <__assert_fail@plt+0x2ac0>
   13b58:	mov	r3, r0
   13b5c:	b	13ba4 <__assert_fail@plt+0x2ae8>
   13b60:	mov	r0, #1
   13b64:	mov	r8, #0
   13b68:	mov	r9, #5
   13b6c:	b	13bdc <__assert_fail@plt+0x2b20>
   13b70:	mov	r3, #1
   13b74:	tst	r7, #1
   13b78:	beq	13ba4 <__assert_fail@plt+0x2ae8>
   13b7c:	mov	r1, #1
   13b80:	mov	r8, #0
   13b84:	mov	r9, #2
   13b88:	mov	r3, r0
   13b8c:	mov	sl, #1
   13b90:	str	r1, [fp, #-76]	; 0xffffffb4
   13b94:	movw	r1, #30460	; 0x76fc
   13b98:	movt	r1, #1
   13b9c:	str	r1, [sp, #92]	; 0x5c
   13ba0:	b	13c28 <__assert_fail@plt+0x2b6c>
   13ba4:	cmp	r6, #0
   13ba8:	mov	r8, #1
   13bac:	mov	r9, #2
   13bb0:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   13bb4:	movne	r0, #39	; 0x27
   13bb8:	strbne	r0, [r1]
   13bbc:	movw	r0, #30460	; 0x76fc
   13bc0:	movt	r0, #1
   13bc4:	b	13c18 <__assert_fail@plt+0x2b5c>
   13bc8:	mov	r9, #5
   13bcc:	tst	r7, #1
   13bd0:	beq	13bf8 <__assert_fail@plt+0x2b3c>
   13bd4:	mov	r0, #1
   13bd8:	mov	r8, #0
   13bdc:	str	r0, [fp, #-76]	; 0xffffffb4
   13be0:	movw	r0, #32710	; 0x7fc6
   13be4:	mov	r3, #1
   13be8:	mov	sl, #1
   13bec:	movt	r0, #1
   13bf0:	str	r0, [sp, #92]	; 0x5c
   13bf4:	b	13c28 <__assert_fail@plt+0x2b6c>
   13bf8:	cmp	r6, #0
   13bfc:	mov	r8, #1
   13c00:	mov	r3, #1
   13c04:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   13c08:	movne	r0, #34	; 0x22
   13c0c:	strbne	r0, [r1]
   13c10:	movw	r0, #32710	; 0x7fc6
   13c14:	movt	r0, #1
   13c18:	str	r0, [sp, #92]	; 0x5c
   13c1c:	mov	r0, #1
   13c20:	str	r0, [fp, #-76]	; 0xffffffb4
   13c24:	mov	sl, #0
   13c28:	ldr	r0, [fp, #16]
   13c2c:	mov	r7, #0
   13c30:	str	r9, [fp, #-64]	; 0xffffffc0
   13c34:	str	sl, [fp, #-72]	; 0xffffffb8
   13c38:	str	r3, [sp, #84]	; 0x54
   13c3c:	cmp	r0, #0
   13c40:	movwne	r0, #1
   13c44:	and	r0, r0, sl
   13c48:	str	r0, [fp, #-88]	; 0xffffffa8
   13c4c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13c50:	cmp	r0, #0
   13c54:	movwne	r0, #1
   13c58:	subs	r2, r9, #2
   13c5c:	and	r1, r0, sl
   13c60:	str	r2, [fp, #-80]	; 0xffffffb0
   13c64:	and	r1, r3, r1
   13c68:	str	r1, [sp, #44]	; 0x2c
   13c6c:	clz	r1, r2
   13c70:	lsr	r1, r1, #5
   13c74:	and	r1, r1, sl
   13c78:	str	r1, [sp, #56]	; 0x38
   13c7c:	mov	r1, r2
   13c80:	eor	r2, sl, #1
   13c84:	movwne	r1, #1
   13c88:	str	r2, [sp, #88]	; 0x58
   13c8c:	orr	r2, r1, r2
   13c90:	and	r1, r1, r3
   13c94:	and	r0, r0, r1
   13c98:	str	r2, [sp, #60]	; 0x3c
   13c9c:	str	r1, [fp, #-68]	; 0xffffffbc
   13ca0:	str	r0, [fp, #-60]	; 0xffffffc4
   13ca4:	eor	r0, r3, #1
   13ca8:	str	r0, [sp, #48]	; 0x30
   13cac:	cmn	lr, #1
   13cb0:	beq	13cc0 <__assert_fail@plt+0x2c04>
   13cb4:	cmp	r7, lr
   13cb8:	bne	13ccc <__assert_fail@plt+0x2c10>
   13cbc:	b	14878 <__assert_fail@plt+0x37bc>
   13cc0:	ldrb	r0, [ip, r7]
   13cc4:	cmp	r0, #0
   13cc8:	beq	14880 <__assert_fail@plt+0x37c4>
   13ccc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13cd0:	mov	r9, #0
   13cd4:	str	r5, [fp, #-48]	; 0xffffffd0
   13cd8:	str	r6, [fp, #-52]	; 0xffffffcc
   13cdc:	cmp	r0, #0
   13ce0:	beq	13d20 <__assert_fail@plt+0x2c64>
   13ce4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13ce8:	mov	r5, r4
   13cec:	add	r4, r7, r0
   13cf0:	cmp	r0, #2
   13cf4:	bcc	13d10 <__assert_fail@plt+0x2c54>
   13cf8:	cmn	lr, #1
   13cfc:	bne	13d10 <__assert_fail@plt+0x2c54>
   13d00:	mov	r0, ip
   13d04:	bl	10fc0 <strlen@plt>
   13d08:	ldr	ip, [fp, #-84]	; 0xffffffac
   13d0c:	mov	lr, r0
   13d10:	cmp	r4, lr
   13d14:	bls	13d28 <__assert_fail@plt+0x2c6c>
   13d18:	mov	r6, #0
   13d1c:	b	13d68 <__assert_fail@plt+0x2cac>
   13d20:	mov	r6, #0
   13d24:	b	13d6c <__assert_fail@plt+0x2cb0>
   13d28:	ldr	r1, [sp, #92]	; 0x5c
   13d2c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13d30:	add	r0, ip, r7
   13d34:	mov	r4, lr
   13d38:	bl	10edc <memcmp@plt>
   13d3c:	ldr	r2, [sp, #88]	; 0x58
   13d40:	cmp	r0, #0
   13d44:	mov	r1, r0
   13d48:	movwne	r1, #1
   13d4c:	orr	r1, r1, r2
   13d50:	tst	r1, #1
   13d54:	beq	14914 <__assert_fail@plt+0x3858>
   13d58:	ldr	ip, [fp, #-84]	; 0xffffffac
   13d5c:	clz	r0, r0
   13d60:	mov	lr, r4
   13d64:	lsr	r6, r0, #5
   13d68:	mov	r4, r5
   13d6c:	ldrb	r5, [ip, r7]
   13d70:	cmp	r5, #126	; 0x7e
   13d74:	bhi	1413c <__assert_fail@plt+0x3080>
   13d78:	add	r3, pc, #16
   13d7c:	mov	sl, #1
   13d80:	mov	r2, #110	; 0x6e
   13d84:	mov	r0, #97	; 0x61
   13d88:	mov	r1, #0
   13d8c:	ldr	pc, [r3, r5, lsl #2]
   13d90:	andeq	r4, r1, r0, lsr #32
   13d94:	andeq	r4, r1, ip, lsr r1
   13d98:	andeq	r4, r1, ip, lsr r1
   13d9c:	andeq	r4, r1, ip, lsr r1
   13da0:	andeq	r4, r1, ip, lsr r1
   13da4:	andeq	r4, r1, ip, lsr r1
   13da8:	andeq	r4, r1, ip, lsr r1
   13dac:	andeq	r4, r1, r0, ror #3
   13db0:	andeq	r4, r1, r0
   13db4:	strdeq	r3, [r1], -r8
   13db8:	andeq	r4, r1, ip
   13dbc:	muleq	r1, r0, r0
   13dc0:	strdeq	r3, [r1], -r0
   13dc4:	andeq	r4, r1, r8
   13dc8:	andeq	r4, r1, ip, lsr r1
   13dcc:	andeq	r4, r1, ip, lsr r1
   13dd0:	andeq	r4, r1, ip, lsr r1
   13dd4:	andeq	r4, r1, ip, lsr r1
   13dd8:	andeq	r4, r1, ip, lsr r1
   13ddc:	andeq	r4, r1, ip, lsr r1
   13de0:	andeq	r4, r1, ip, lsr r1
   13de4:	andeq	r4, r1, ip, lsr r1
   13de8:	andeq	r4, r1, ip, lsr r1
   13dec:	andeq	r4, r1, ip, lsr r1
   13df0:	andeq	r4, r1, ip, lsr r1
   13df4:	andeq	r4, r1, ip, lsr r1
   13df8:	andeq	r4, r1, ip, lsr r1
   13dfc:	andeq	r4, r1, ip, lsr r1
   13e00:	andeq	r4, r1, ip, lsr r1
   13e04:	andeq	r4, r1, ip, lsr r1
   13e08:	andeq	r4, r1, ip, lsr r1
   13e0c:	andeq	r4, r1, ip, lsr r1
   13e10:	andeq	r4, r1, r0, lsr #3
   13e14:	andeq	r4, r1, r4, lsr #3
   13e18:	andeq	r4, r1, r4, lsr #3
   13e1c:	andeq	r3, r1, r0, lsr #31
   13e20:	andeq	r4, r1, r4, lsr #3
   13e24:	andeq	r3, r1, ip, lsl #31
   13e28:	andeq	r4, r1, r4, lsr #3
   13e2c:	muleq	r1, r8, r0
   13e30:	andeq	r4, r1, r4, lsr #3
   13e34:	andeq	r4, r1, r4, lsr #3
   13e38:	andeq	r4, r1, r4, lsr #3
   13e3c:	andeq	r3, r1, ip, lsl #31
   13e40:	andeq	r3, r1, ip, lsl #31
   13e44:	andeq	r3, r1, ip, lsl #31
   13e48:	andeq	r3, r1, ip, lsl #31
   13e4c:	andeq	r3, r1, ip, lsl #31
   13e50:	andeq	r3, r1, ip, lsl #31
   13e54:	andeq	r3, r1, ip, lsl #31
   13e58:	andeq	r3, r1, ip, lsl #31
   13e5c:	andeq	r3, r1, ip, lsl #31
   13e60:	andeq	r3, r1, ip, lsl #31
   13e64:	andeq	r3, r1, ip, lsl #31
   13e68:	andeq	r3, r1, ip, lsl #31
   13e6c:	andeq	r3, r1, ip, lsl #31
   13e70:	andeq	r3, r1, ip, lsl #31
   13e74:	andeq	r3, r1, ip, lsl #31
   13e78:	andeq	r3, r1, ip, lsl #31
   13e7c:	andeq	r4, r1, r4, lsr #3
   13e80:	andeq	r4, r1, r4, lsr #3
   13e84:	andeq	r4, r1, r4, lsr #3
   13e88:	andeq	r4, r1, r4, lsr #3
   13e8c:	andeq	r4, r1, r4, rrx
   13e90:	andeq	r4, r1, ip, lsr r1
   13e94:	andeq	r3, r1, ip, lsl #31
   13e98:	andeq	r3, r1, ip, lsl #31
   13e9c:	andeq	r3, r1, ip, lsl #31
   13ea0:	andeq	r3, r1, ip, lsl #31
   13ea4:	andeq	r3, r1, ip, lsl #31
   13ea8:	andeq	r3, r1, ip, lsl #31
   13eac:	andeq	r3, r1, ip, lsl #31
   13eb0:	andeq	r3, r1, ip, lsl #31
   13eb4:	andeq	r3, r1, ip, lsl #31
   13eb8:	andeq	r3, r1, ip, lsl #31
   13ebc:	andeq	r3, r1, ip, lsl #31
   13ec0:	andeq	r3, r1, ip, lsl #31
   13ec4:	andeq	r3, r1, ip, lsl #31
   13ec8:	andeq	r3, r1, ip, lsl #31
   13ecc:	andeq	r3, r1, ip, lsl #31
   13ed0:	andeq	r3, r1, ip, lsl #31
   13ed4:	andeq	r3, r1, ip, lsl #31
   13ed8:	andeq	r3, r1, ip, lsl #31
   13edc:	andeq	r3, r1, ip, lsl #31
   13ee0:	andeq	r3, r1, ip, lsl #31
   13ee4:	andeq	r3, r1, ip, lsl #31
   13ee8:	andeq	r3, r1, ip, lsl #31
   13eec:	andeq	r3, r1, ip, lsl #31
   13ef0:	andeq	r3, r1, ip, lsl #31
   13ef4:	andeq	r3, r1, ip, lsl #31
   13ef8:	andeq	r3, r1, ip, lsl #31
   13efc:	andeq	r4, r1, r4, lsr #3
   13f00:	andeq	r3, r1, ip, asr #31
   13f04:	andeq	r3, r1, ip, lsl #31
   13f08:	andeq	r4, r1, r4, lsr #3
   13f0c:	andeq	r3, r1, ip, lsl #31
   13f10:	andeq	r4, r1, r4, lsr #3
   13f14:	andeq	r3, r1, ip, lsl #31
   13f18:	andeq	r3, r1, ip, lsl #31
   13f1c:	andeq	r3, r1, ip, lsl #31
   13f20:	andeq	r3, r1, ip, lsl #31
   13f24:	andeq	r3, r1, ip, lsl #31
   13f28:	andeq	r3, r1, ip, lsl #31
   13f2c:	andeq	r3, r1, ip, lsl #31
   13f30:	andeq	r3, r1, ip, lsl #31
   13f34:	andeq	r3, r1, ip, lsl #31
   13f38:	andeq	r3, r1, ip, lsl #31
   13f3c:	andeq	r3, r1, ip, lsl #31
   13f40:	andeq	r3, r1, ip, lsl #31
   13f44:	andeq	r3, r1, ip, lsl #31
   13f48:	andeq	r3, r1, ip, lsl #31
   13f4c:	andeq	r3, r1, ip, lsl #31
   13f50:	andeq	r3, r1, ip, lsl #31
   13f54:	andeq	r3, r1, ip, lsl #31
   13f58:	andeq	r3, r1, ip, lsl #31
   13f5c:	andeq	r3, r1, ip, lsl #31
   13f60:	andeq	r3, r1, ip, lsl #31
   13f64:	andeq	r3, r1, ip, lsl #31
   13f68:	andeq	r3, r1, ip, lsl #31
   13f6c:	andeq	r3, r1, ip, lsl #31
   13f70:	andeq	r3, r1, ip, lsl #31
   13f74:	andeq	r3, r1, ip, lsl #31
   13f78:	andeq	r3, r1, ip, lsl #31
   13f7c:			; <UNDEFINED> instruction: 0x00013fb0
   13f80:	andeq	r4, r1, r4, lsr #3
   13f84:			; <UNDEFINED> instruction: 0x00013fb0
   13f88:	andeq	r3, r1, r0, lsr #31
   13f8c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13f90:	cmp	r0, #0
   13f94:	beq	141f4 <__assert_fail@plt+0x3138>
   13f98:	ldr	r0, [fp, #16]
   13f9c:	b	141f8 <__assert_fail@plt+0x313c>
   13fa0:	mov	sl, #0
   13fa4:	cmp	r7, #0
   13fa8:	bne	14410 <__assert_fail@plt+0x3354>
   13fac:	b	141a0 <__assert_fail@plt+0x30e4>
   13fb0:	mov	sl, #0
   13fb4:	cmn	lr, #1
   13fb8:	beq	1418c <__assert_fail@plt+0x30d0>
   13fbc:	cmp	r7, #0
   13fc0:	cmpeq	lr, #1
   13fc4:	bne	14410 <__assert_fail@plt+0x3354>
   13fc8:	b	141a0 <__assert_fail@plt+0x30e4>
   13fcc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13fd0:	cmp	r0, #2
   13fd4:	bne	141c4 <__assert_fail@plt+0x3108>
   13fd8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13fdc:	tst	r0, #1
   13fe0:	bne	14930 <__assert_fail@plt+0x3874>
   13fe4:	mov	r9, #0
   13fe8:	mov	r0, #92	; 0x5c
   13fec:	b	141d8 <__assert_fail@plt+0x311c>
   13ff0:	mov	r0, #102	; 0x66
   13ff4:	b	141e0 <__assert_fail@plt+0x3124>
   13ff8:	mov	r2, #116	; 0x74
   13ffc:	b	1400c <__assert_fail@plt+0x2f50>
   14000:	mov	r0, #98	; 0x62
   14004:	b	141e0 <__assert_fail@plt+0x3124>
   14008:	mov	r2, #114	; 0x72
   1400c:	ldr	r0, [sp, #60]	; 0x3c
   14010:	tst	r0, #1
   14014:	mov	r0, r2
   14018:	bne	141e0 <__assert_fail@plt+0x3124>
   1401c:	b	14930 <__assert_fail@plt+0x3874>
   14020:	ldr	r0, [sp, #84]	; 0x54
   14024:	tst	r0, #1
   14028:	beq	142cc <__assert_fail@plt+0x3210>
   1402c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14030:	tst	r0, #1
   14034:	bne	14a38 <__assert_fail@plt+0x397c>
   14038:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1403c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14040:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14044:	cmp	r0, #2
   14048:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1404c:	movwne	r0, #1
   14050:	orr	r0, r0, r3
   14054:	tst	r0, #1
   14058:	beq	1474c <__assert_fail@plt+0x3690>
   1405c:	mov	r0, r8
   14060:	b	1478c <__assert_fail@plt+0x36d0>
   14064:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14068:	mov	r9, #0
   1406c:	mov	r5, #63	; 0x3f
   14070:	cmp	r0, #5
   14074:	beq	14418 <__assert_fail@plt+0x335c>
   14078:	cmp	r0, #2
   1407c:	bne	144d8 <__assert_fail@plt+0x341c>
   14080:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14084:	tst	r0, #1
   14088:	beq	144dc <__assert_fail@plt+0x3420>
   1408c:	b	14930 <__assert_fail@plt+0x3874>
   14090:	mov	r0, #118	; 0x76
   14094:	b	141e0 <__assert_fail@plt+0x3124>
   14098:	mov	r0, #1
   1409c:	mov	r5, #39	; 0x27
   140a0:	str	r0, [sp, #52]	; 0x34
   140a4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   140a8:	cmp	r0, #2
   140ac:	bne	14134 <__assert_fail@plt+0x3078>
   140b0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   140b4:	tst	r0, #1
   140b8:	bne	14930 <__assert_fail@plt+0x3874>
   140bc:	ldr	r3, [sp, #68]	; 0x44
   140c0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   140c4:	mov	r9, #0
   140c8:	clz	r1, r2
   140cc:	cmp	r3, #0
   140d0:	mov	r0, r3
   140d4:	movwne	r0, #1
   140d8:	lsr	r1, r1, #5
   140dc:	orrs	r0, r0, r1
   140e0:	moveq	r3, r2
   140e4:	moveq	r2, r0
   140e8:	cmp	r8, r2
   140ec:	str	r3, [sp, #68]	; 0x44
   140f0:	str	r2, [fp, #-52]	; 0xffffffcc
   140f4:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   140f8:	movcc	r0, #39	; 0x27
   140fc:	strbcc	r0, [r1, r8]
   14100:	add	r0, r8, #1
   14104:	cmp	r0, r2
   14108:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1410c:	movcc	r1, #92	; 0x5c
   14110:	strbcc	r1, [r3, r0]
   14114:	add	r0, r8, #2
   14118:	add	r8, r8, #3
   1411c:	cmp	r0, r2
   14120:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14124:	movcc	r1, #39	; 0x27
   14128:	strbcc	r1, [r2, r0]
   1412c:	mov	r0, #0
   14130:	str	r0, [fp, #-48]	; 0xffffffd0
   14134:	mov	sl, #1
   14138:	b	13f8c <__assert_fail@plt+0x2ed0>
   1413c:	ldr	r0, [sp, #32]
   14140:	cmp	r0, #1
   14144:	bne	142f0 <__assert_fail@plt+0x3234>
   14148:	str	lr, [sp, #80]	; 0x50
   1414c:	bl	10fa8 <__ctype_b_loc@plt>
   14150:	ldr	r0, [r0]
   14154:	ldr	ip, [fp, #-84]	; 0xffffffac
   14158:	mov	r1, #1
   1415c:	add	r0, r0, r5, lsl #1
   14160:	ldrb	r0, [r0, #1]
   14164:	ubfx	sl, r0, #6, #1
   14168:	ldr	r0, [sp, #48]	; 0x30
   1416c:	mov	r2, r1
   14170:	cmp	r1, #1
   14174:	orr	r0, sl, r0
   14178:	bhi	144e4 <__assert_fail@plt+0x3428>
   1417c:	tst	r0, #1
   14180:	beq	144e4 <__assert_fail@plt+0x3428>
   14184:	ldr	lr, [sp, #80]	; 0x50
   14188:	b	13f8c <__assert_fail@plt+0x2ed0>
   1418c:	cmp	r7, #0
   14190:	bne	1440c <__assert_fail@plt+0x3350>
   14194:	ldrb	r0, [ip, #1]
   14198:	cmp	r0, #0
   1419c:	bne	1440c <__assert_fail@plt+0x3350>
   141a0:	mov	r1, #1
   141a4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   141a8:	cmp	r0, #2
   141ac:	bne	141bc <__assert_fail@plt+0x3100>
   141b0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   141b4:	tst	r0, #1
   141b8:	bne	14930 <__assert_fail@plt+0x3874>
   141bc:	mov	sl, r1
   141c0:	b	13f8c <__assert_fail@plt+0x2ed0>
   141c4:	ldr	r1, [sp, #44]	; 0x2c
   141c8:	mov	r9, #0
   141cc:	mov	r0, #92	; 0x5c
   141d0:	cmp	r1, #0
   141d4:	beq	141e0 <__assert_fail@plt+0x3124>
   141d8:	mov	sl, #0
   141dc:	b	146f8 <__assert_fail@plt+0x363c>
   141e0:	ldr	r1, [sp, #84]	; 0x54
   141e4:	mov	sl, #0
   141e8:	mov	r9, #0
   141ec:	tst	r1, #1
   141f0:	bne	1422c <__assert_fail@plt+0x3170>
   141f4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   141f8:	cmp	r0, #0
   141fc:	mov	r0, r5
   14200:	beq	14224 <__assert_fail@plt+0x3168>
   14204:	ldr	r1, [fp, #16]
   14208:	ubfx	r0, r5, #5, #3
   1420c:	mov	r2, #1
   14210:	ldr	r0, [r1, r0, lsl #2]
   14214:	and	r1, r5, #31
   14218:	tst	r0, r2, lsl r1
   1421c:	mov	r0, r5
   14220:	bne	1422c <__assert_fail@plt+0x3170>
   14224:	cmp	r6, #0
   14228:	beq	146f8 <__assert_fail@plt+0x363c>
   1422c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14230:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14234:	tst	r1, #1
   14238:	bne	1490c <__assert_fail@plt+0x3850>
   1423c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14240:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14244:	cmp	r1, #2
   14248:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1424c:	movwne	r1, #1
   14250:	orr	r1, r1, r5
   14254:	tst	r1, #1
   14258:	bne	1429c <__assert_fail@plt+0x31e0>
   1425c:	cmp	r8, r6
   14260:	mov	r5, #1
   14264:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14268:	movcc	r1, #39	; 0x27
   1426c:	strbcc	r1, [r2, r8]
   14270:	add	r1, r8, #1
   14274:	cmp	r1, r6
   14278:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1427c:	movcc	r2, #36	; 0x24
   14280:	strbcc	r2, [r3, r1]
   14284:	add	r1, r8, #2
   14288:	add	r8, r8, #3
   1428c:	cmp	r1, r6
   14290:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14294:	movcc	r2, #39	; 0x27
   14298:	strbcc	r2, [r3, r1]
   1429c:	cmp	r8, r6
   142a0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   142a4:	movcc	r1, #92	; 0x5c
   142a8:	strbcc	r1, [r2, r8]
   142ac:	add	r8, r8, #1
   142b0:	cmp	r8, r6
   142b4:	and	r4, r4, sl
   142b8:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   142bc:	strbcc	r0, [r1, r8]
   142c0:	add	r8, r8, #1
   142c4:	add	r7, r7, #1
   142c8:	b	13cac <__assert_fail@plt+0x2bf0>
   142cc:	ldr	r0, [sp, #28]
   142d0:	mov	sl, #0
   142d4:	mov	r9, #0
   142d8:	mov	r5, #0
   142dc:	cmp	r0, #0
   142e0:	beq	141f4 <__assert_fail@plt+0x3138>
   142e4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   142e8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   142ec:	b	142c4 <__assert_fail@plt+0x3208>
   142f0:	mov	r0, #0
   142f4:	cmn	lr, #1
   142f8:	str	r6, [sp, #76]	; 0x4c
   142fc:	str	r4, [sp, #20]
   14300:	str	r0, [fp, #-36]	; 0xffffffdc
   14304:	str	r0, [fp, #-40]	; 0xffffffd8
   14308:	bne	1431c <__assert_fail@plt+0x3260>
   1430c:	mov	r0, ip
   14310:	bl	10fc0 <strlen@plt>
   14314:	ldr	ip, [fp, #-84]	; 0xffffffac
   14318:	mov	lr, r0
   1431c:	add	r0, ip, r7
   14320:	mov	sl, #1
   14324:	mov	r6, #0
   14328:	sub	r4, fp, #40	; 0x28
   1432c:	str	lr, [sp, #80]	; 0x50
   14330:	str	r0, [sp, #36]	; 0x24
   14334:	str	r6, [sp, #40]	; 0x28
   14338:	add	r6, r6, r7
   1433c:	sub	r0, fp, #44	; 0x2c
   14340:	mov	r3, r4
   14344:	add	r1, ip, r6
   14348:	sub	r2, lr, r6
   1434c:	bl	16664 <__assert_fail@plt+0x55a8>
   14350:	cmp	r0, #0
   14354:	beq	14860 <__assert_fail@plt+0x37a4>
   14358:	cmn	r0, #1
   1435c:	beq	14820 <__assert_fail@plt+0x3764>
   14360:	ldr	lr, [sp, #80]	; 0x50
   14364:	cmn	r0, #2
   14368:	beq	14828 <__assert_fail@plt+0x376c>
   1436c:	ldr	r2, [sp, #56]	; 0x38
   14370:	cmp	r0, #2
   14374:	mov	r1, #0
   14378:	movwcc	r1, #1
   1437c:	eor	r2, r2, #1
   14380:	orrs	r1, r2, r1
   14384:	bne	143d0 <__assert_fail@plt+0x3314>
   14388:	ldr	r1, [sp, #40]	; 0x28
   1438c:	ldr	r2, [sp, #36]	; 0x24
   14390:	add	ip, r2, r1
   14394:	mov	r2, #1
   14398:	ldrb	r3, [ip, r2]
   1439c:	sub	r6, r3, #94	; 0x5e
   143a0:	cmp	r6, #30
   143a4:	bhi	143b8 <__assert_fail@plt+0x32fc>
   143a8:	mov	r4, #1
   143ac:	mov	r1, #1073741829	; 0x40000005
   143b0:	tst	r1, r4, lsl r6
   143b4:	bne	1492c <__assert_fail@plt+0x3870>
   143b8:	sub	r3, r3, #91	; 0x5b
   143bc:	cmp	r3, #2
   143c0:	bcc	1492c <__assert_fail@plt+0x3870>
   143c4:	add	r2, r2, #1
   143c8:	cmp	r2, r0
   143cc:	bcc	14398 <__assert_fail@plt+0x32dc>
   143d0:	ldr	r6, [sp, #40]	; 0x28
   143d4:	add	r6, r0, r6
   143d8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   143dc:	bl	10f18 <iswprint@plt>
   143e0:	cmp	r0, #0
   143e4:	sub	r4, fp, #40	; 0x28
   143e8:	movwne	r0, #1
   143ec:	and	sl, sl, r0
   143f0:	mov	r0, r4
   143f4:	bl	10ec4 <mbsinit@plt>
   143f8:	ldr	lr, [sp, #80]	; 0x50
   143fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   14400:	cmp	r0, #0
   14404:	beq	14334 <__assert_fail@plt+0x3278>
   14408:	b	14868 <__assert_fail@plt+0x37ac>
   1440c:	mvn	lr, #0
   14410:	mov	r9, #0
   14414:	b	13f8c <__assert_fail@plt+0x2ed0>
   14418:	ldr	r0, [sp, #24]
   1441c:	cmp	r0, #0
   14420:	beq	144d8 <__assert_fail@plt+0x341c>
   14424:	add	r0, r7, #2
   14428:	cmp	r0, lr
   1442c:	bcs	144d8 <__assert_fail@plt+0x341c>
   14430:	add	r1, ip, r7
   14434:	ldrb	r1, [r1, #1]
   14438:	cmp	r1, #63	; 0x3f
   1443c:	bne	144d8 <__assert_fail@plt+0x341c>
   14440:	ldrb	r5, [ip, r0]
   14444:	sub	r1, r5, #33	; 0x21
   14448:	cmp	r1, #29
   1444c:	bhi	144d8 <__assert_fail@plt+0x341c>
   14450:	movw	r3, #20929	; 0x51c1
   14454:	mov	r2, #1
   14458:	movt	r3, #14336	; 0x3800
   1445c:	tst	r3, r2, lsl r1
   14460:	beq	144d8 <__assert_fail@plt+0x341c>
   14464:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14468:	tst	r1, #1
   1446c:	bne	14a40 <__assert_fail@plt+0x3984>
   14470:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14474:	mov	r7, r0
   14478:	cmp	r8, r1
   1447c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14480:	movcc	r1, #63	; 0x3f
   14484:	strbcc	r1, [r2, r8]
   14488:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1448c:	add	r1, r8, #1
   14490:	cmp	r1, r2
   14494:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14498:	movcc	r2, #34	; 0x22
   1449c:	strbcc	r2, [r3, r1]
   144a0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   144a4:	add	r1, r8, #2
   144a8:	cmp	r1, r2
   144ac:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   144b0:	movcc	r2, #34	; 0x22
   144b4:	strbcc	r2, [r3, r1]
   144b8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   144bc:	add	r1, r8, #3
   144c0:	add	r8, r8, #4
   144c4:	cmp	r1, r2
   144c8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   144cc:	movcc	r2, #63	; 0x3f
   144d0:	strbcc	r2, [r3, r1]
   144d4:	b	144dc <__assert_fail@plt+0x3420>
   144d8:	mov	r5, #63	; 0x3f
   144dc:	mov	sl, #0
   144e0:	b	13f8c <__assert_fail@plt+0x2ed0>
   144e4:	str	r0, [sp, #40]	; 0x28
   144e8:	add	r0, r2, r7
   144ec:	str	r6, [sp, #76]	; 0x4c
   144f0:	add	r1, r7, #1
   144f4:	ldr	lr, [sp, #80]	; 0x50
   144f8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   144fc:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14500:	mov	r3, #0
   14504:	str	r0, [sp, #36]	; 0x24
   14508:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1450c:	b	145a0 <__assert_fail@plt+0x34e4>
   14510:	str	r0, [sp, #76]	; 0x4c
   14514:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14518:	cmp	r9, #0
   1451c:	movwne	r9, #1
   14520:	mvn	r7, r0
   14524:	orr	r7, r7, r9
   14528:	tst	r7, #1
   1452c:	bne	1457c <__assert_fail@plt+0x34c0>
   14530:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14534:	cmp	r8, r6
   14538:	bcs	14550 <__assert_fail@plt+0x3494>
   1453c:	ldr	r7, [fp, #-56]	; 0xffffffc8
   14540:	mov	r2, r4
   14544:	mov	r4, #39	; 0x27
   14548:	strb	r4, [r7, r8]
   1454c:	mov	r4, r2
   14550:	add	r7, r8, #1
   14554:	cmp	r7, r6
   14558:	bcs	14570 <__assert_fail@plt+0x34b4>
   1455c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14560:	mov	r2, r4
   14564:	mov	r4, #39	; 0x27
   14568:	strb	r4, [r0, r7]
   1456c:	mov	r4, r2
   14570:	add	r8, r8, #2
   14574:	mov	r0, #0
   14578:	b	14584 <__assert_fail@plt+0x34c8>
   1457c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14580:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14584:	cmp	r8, r6
   14588:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1458c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14590:	strbcc	r5, [r2, r8]
   14594:	add	r8, r8, #1
   14598:	ldrb	r5, [ip, r1]
   1459c:	add	r1, r1, #1
   145a0:	ldr	r2, [sp, #40]	; 0x28
   145a4:	tst	r2, #1
   145a8:	beq	145e4 <__assert_fail@plt+0x3528>
   145ac:	ldr	r2, [sp, #76]	; 0x4c
   145b0:	str	r0, [fp, #-48]	; 0xffffffd0
   145b4:	tst	r2, #1
   145b8:	beq	145dc <__assert_fail@plt+0x3520>
   145bc:	cmp	r8, r6
   145c0:	bcs	145d8 <__assert_fail@plt+0x351c>
   145c4:	ldr	r6, [fp, #-56]	; 0xffffffc8
   145c8:	mov	r2, r4
   145cc:	mov	r4, #92	; 0x5c
   145d0:	strb	r4, [r6, r8]
   145d4:	mov	r4, r2
   145d8:	add	r8, r8, #1
   145dc:	mov	r0, #0
   145e0:	b	146d8 <__assert_fail@plt+0x361c>
   145e4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   145e8:	tst	r2, #1
   145ec:	bne	14938 <__assert_fail@plt+0x387c>
   145f0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   145f4:	cmp	r7, #2
   145f8:	movwne	r3, #1
   145fc:	orr	r3, r3, r0
   14600:	tst	r3, #1
   14604:	bne	14660 <__assert_fail@plt+0x35a4>
   14608:	cmp	r8, r6
   1460c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14610:	movcc	r3, #39	; 0x27
   14614:	strbcc	r3, [r2, r8]
   14618:	add	r3, r8, #1
   1461c:	cmp	r3, r6
   14620:	bcs	14638 <__assert_fail@plt+0x357c>
   14624:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14628:	mov	r7, r4
   1462c:	mov	r4, #36	; 0x24
   14630:	strb	r4, [r2, r3]
   14634:	mov	r4, r7
   14638:	add	r3, r8, #2
   1463c:	cmp	r3, r6
   14640:	bcs	14658 <__assert_fail@plt+0x359c>
   14644:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14648:	mov	r7, r4
   1464c:	mov	r4, #39	; 0x27
   14650:	strb	r4, [r2, r3]
   14654:	mov	r4, r7
   14658:	add	r8, r8, #3
   1465c:	mov	r0, #1
   14660:	cmp	r8, r6
   14664:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14668:	movcc	r3, #92	; 0x5c
   1466c:	strbcc	r3, [r2, r8]
   14670:	add	r3, r8, #1
   14674:	cmp	r3, r6
   14678:	bcs	14698 <__assert_fail@plt+0x35dc>
   1467c:	mov	r2, r4
   14680:	and	r7, r5, #192	; 0xc0
   14684:	mov	r4, #48	; 0x30
   14688:	orr	r7, r4, r7, lsr #6
   1468c:	mov	r4, r2
   14690:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14694:	strb	r7, [r2, r3]
   14698:	add	r3, r8, #2
   1469c:	cmp	r3, r6
   146a0:	bcs	146c0 <__assert_fail@plt+0x3604>
   146a4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   146a8:	mov	r6, r4
   146ac:	lsr	r7, r5, #3
   146b0:	mov	r4, #6
   146b4:	bfi	r7, r4, #3, #29
   146b8:	mov	r4, r6
   146bc:	strb	r7, [r2, r3]
   146c0:	str	r0, [fp, #-48]	; 0xffffffd0
   146c4:	ldr	r0, [sp, #76]	; 0x4c
   146c8:	mov	r3, #6
   146cc:	add	r8, r8, #3
   146d0:	bfi	r5, r3, #3, #29
   146d4:	mov	r3, #1
   146d8:	ldr	r2, [sp, #36]	; 0x24
   146dc:	and	r9, r3, #1
   146e0:	cmp	r2, r1
   146e4:	bhi	14510 <__assert_fail@plt+0x3454>
   146e8:	cmp	r9, #0
   146ec:	sub	r7, r1, #1
   146f0:	mov	r0, r5
   146f4:	movwne	r9, #1
   146f8:	cmp	r9, #0
   146fc:	bne	14740 <__assert_fail@plt+0x3684>
   14700:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14704:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14708:	tst	r5, #1
   1470c:	beq	142b0 <__assert_fail@plt+0x31f4>
   14710:	cmp	r8, r6
   14714:	mov	r5, #0
   14718:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1471c:	movcc	r1, #39	; 0x27
   14720:	strbcc	r1, [r2, r8]
   14724:	add	r1, r8, #1
   14728:	add	r8, r8, #2
   1472c:	cmp	r1, r6
   14730:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14734:	movcc	r2, #39	; 0x27
   14738:	strbcc	r2, [r3, r1]
   1473c:	b	142b0 <__assert_fail@plt+0x31f4>
   14740:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14744:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14748:	b	142b0 <__assert_fail@plt+0x31f4>
   1474c:	cmp	r8, r1
   14750:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14754:	movcc	r0, #39	; 0x27
   14758:	strbcc	r0, [r2, r8]
   1475c:	add	r0, r8, #1
   14760:	cmp	r0, r1
   14764:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14768:	movcc	r2, #36	; 0x24
   1476c:	strbcc	r2, [r3, r0]
   14770:	add	r0, r8, #2
   14774:	cmp	r0, r1
   14778:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1477c:	movcc	r2, #39	; 0x27
   14780:	strbcc	r2, [r3, r0]
   14784:	add	r0, r8, #3
   14788:	mov	r3, #1
   1478c:	cmp	r0, r1
   14790:	add	r8, r0, #1
   14794:	str	r3, [fp, #-48]	; 0xffffffd0
   14798:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1479c:	movcc	r1, #92	; 0x5c
   147a0:	strbcc	r1, [r2, r0]
   147a4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   147a8:	cmp	r1, #2
   147ac:	beq	14810 <__assert_fail@plt+0x3754>
   147b0:	add	r1, r7, #1
   147b4:	mov	sl, #0
   147b8:	mov	r9, #1
   147bc:	mov	r5, #48	; 0x30
   147c0:	cmp	r1, lr
   147c4:	bcs	13f8c <__assert_fail@plt+0x2ed0>
   147c8:	ldrb	r1, [ip, r1]
   147cc:	sub	r1, r1, #48	; 0x30
   147d0:	uxtb	r1, r1
   147d4:	cmp	r1, #9
   147d8:	bhi	13f8c <__assert_fail@plt+0x2ed0>
   147dc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   147e0:	cmp	r8, r1
   147e4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   147e8:	movcc	r1, #48	; 0x30
   147ec:	strbcc	r1, [r2, r8]
   147f0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   147f4:	add	r1, r0, #2
   147f8:	add	r8, r0, #3
   147fc:	cmp	r1, r2
   14800:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14804:	movcc	r2, #48	; 0x30
   14808:	strbcc	r2, [r3, r1]
   1480c:	b	13f8c <__assert_fail@plt+0x2ed0>
   14810:	mov	r0, #48	; 0x30
   14814:	mov	r9, #1
   14818:	mov	sl, #0
   1481c:	b	14224 <__assert_fail@plt+0x3168>
   14820:	mov	sl, #0
   14824:	b	14860 <__assert_fail@plt+0x37a4>
   14828:	mov	sl, #0
   1482c:	cmp	lr, r6
   14830:	bls	14860 <__assert_fail@plt+0x37a4>
   14834:	ldr	ip, [fp, #-84]	; 0xffffffac
   14838:	ldr	r6, [sp, #40]	; 0x28
   1483c:	ldr	r0, [sp, #36]	; 0x24
   14840:	ldrb	r0, [r0, r6]
   14844:	cmp	r0, #0
   14848:	beq	14868 <__assert_fail@plt+0x37ac>
   1484c:	add	r6, r6, #1
   14850:	add	r0, r7, r6
   14854:	cmp	r0, lr
   14858:	bcc	1483c <__assert_fail@plt+0x3780>
   1485c:	b	14868 <__assert_fail@plt+0x37ac>
   14860:	ldr	ip, [fp, #-84]	; 0xffffffac
   14864:	ldr	r6, [sp, #40]	; 0x28
   14868:	mov	r1, r6
   1486c:	ldr	r4, [sp, #20]
   14870:	ldr	r6, [sp, #76]	; 0x4c
   14874:	b	14168 <__assert_fail@plt+0x30ac>
   14878:	mov	lr, r7
   1487c:	b	14884 <__assert_fail@plt+0x37c8>
   14880:	mvn	lr, #0
   14884:	ldr	r9, [fp, #-64]	; 0xffffffc0
   14888:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1488c:	eor	r0, r9, #2
   14890:	orr	r0, r0, r8
   14894:	clz	r0, r0
   14898:	lsr	r0, r0, #5
   1489c:	tst	r1, r0
   148a0:	bne	1499c <__assert_fail@plt+0x38e0>
   148a4:	mov	r0, r1
   148a8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   148ac:	cmp	r9, #2
   148b0:	movwne	r1, #1
   148b4:	orr	r0, r0, r1
   148b8:	tst	r0, #1
   148bc:	bne	149dc <__assert_fail@plt+0x3920>
   148c0:	ldr	r0, [sp, #52]	; 0x34
   148c4:	ldr	r1, [sp, #68]	; 0x44
   148c8:	str	lr, [sp, #80]	; 0x50
   148cc:	eor	r0, r0, #1
   148d0:	tst	r0, #1
   148d4:	bne	149dc <__assert_fail@plt+0x3920>
   148d8:	tst	r4, #1
   148dc:	bne	149a4 <__assert_fail@plt+0x38e8>
   148e0:	mov	r7, #0
   148e4:	cmp	r1, #0
   148e8:	beq	149d4 <__assert_fail@plt+0x3918>
   148ec:	ldr	r0, [sp, #84]	; 0x54
   148f0:	mov	r3, #0
   148f4:	cmp	r6, #0
   148f8:	mov	r2, #0
   148fc:	mov	r4, r1
   14900:	str	r3, [fp, #-72]	; 0xffffffb8
   14904:	beq	13a40 <__assert_fail@plt+0x2984>
   14908:	b	149dc <__assert_fail@plt+0x3920>
   1490c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14910:	b	14938 <__assert_fail@plt+0x387c>
   14914:	ldr	ip, [fp, #-84]	; 0xffffffac
   14918:	mov	r2, #1
   1491c:	mov	lr, r4
   14920:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14924:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14928:	b	1493c <__assert_fail@plt+0x3880>
   1492c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14930:	mov	r7, #2
   14934:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14938:	ldr	r2, [sp, #84]	; 0x54
   1493c:	mov	r0, #0
   14940:	ldr	r1, [fp, #12]
   14944:	tst	r2, #1
   14948:	mov	r2, r7
   1494c:	mov	r3, lr
   14950:	str	r0, [sp, #8]
   14954:	ldr	r0, [sp, #64]	; 0x40
   14958:	movwne	r2, #4
   1495c:	cmp	r7, #2
   14960:	movne	r2, r7
   14964:	str	r2, [sp]
   14968:	mov	r2, ip
   1496c:	bic	r1, r1, #2
   14970:	str	r0, [sp, #12]
   14974:	ldr	r0, [sp, #72]	; 0x48
   14978:	str	r1, [sp, #4]
   1497c:	mov	r1, r6
   14980:	str	r0, [sp, #16]
   14984:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14988:	bl	139c8 <__assert_fail@plt+0x290c>
   1498c:	mov	r8, r0
   14990:	mov	r0, r8
   14994:	sub	sp, fp, #28
   14998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1499c:	mov	r7, #2
   149a0:	b	14938 <__assert_fail@plt+0x387c>
   149a4:	mov	r0, #5
   149a8:	ldr	r2, [fp, #-84]	; 0xffffffac
   149ac:	ldr	r3, [sp, #80]	; 0x50
   149b0:	str	r0, [sp]
   149b4:	ldr	r0, [fp, #12]
   149b8:	str	r0, [sp, #4]
   149bc:	ldr	r0, [fp, #16]
   149c0:	str	r0, [sp, #8]
   149c4:	ldr	r0, [sp, #64]	; 0x40
   149c8:	str	r0, [sp, #12]
   149cc:	ldr	r0, [sp, #72]	; 0x48
   149d0:	b	14980 <__assert_fail@plt+0x38c4>
   149d4:	mov	r0, #0
   149d8:	str	r0, [fp, #-72]	; 0xffffffb8
   149dc:	ldr	r1, [sp, #92]	; 0x5c
   149e0:	cmp	r1, #0
   149e4:	beq	14a24 <__assert_fail@plt+0x3968>
   149e8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   149ec:	ldr	r2, [fp, #-56]	; 0xffffffc8
   149f0:	tst	r0, #1
   149f4:	bne	14a28 <__assert_fail@plt+0x396c>
   149f8:	ldrb	r0, [r1]
   149fc:	cmp	r0, #0
   14a00:	beq	14a28 <__assert_fail@plt+0x396c>
   14a04:	add	r1, r1, #1
   14a08:	cmp	r8, r6
   14a0c:	strbcc	r0, [r2, r8]
   14a10:	add	r8, r8, #1
   14a14:	ldrb	r0, [r1], #1
   14a18:	cmp	r0, #0
   14a1c:	bne	14a08 <__assert_fail@plt+0x394c>
   14a20:	b	14a28 <__assert_fail@plt+0x396c>
   14a24:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14a28:	cmp	r8, r6
   14a2c:	movcc	r0, #0
   14a30:	strbcc	r0, [r2, r8]
   14a34:	b	14990 <__assert_fail@plt+0x38d4>
   14a38:	mov	r2, #1
   14a3c:	b	14920 <__assert_fail@plt+0x3864>
   14a40:	mov	r7, #5
   14a44:	b	14934 <__assert_fail@plt+0x3878>
   14a48:	bl	110a4 <abort@plt>
   14a4c:	mov	r3, r2
   14a50:	mov	r2, #0
   14a54:	b	14a58 <__assert_fail@plt+0x399c>
   14a58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a5c:	add	fp, sp, #28
   14a60:	sub	sp, sp, #36	; 0x24
   14a64:	movw	r8, #46192	; 0xb470
   14a68:	cmp	r3, #0
   14a6c:	mov	r4, r2
   14a70:	str	r2, [sp, #24]
   14a74:	mov	r5, r1
   14a78:	mov	r6, r0
   14a7c:	str	r0, [sp, #20]
   14a80:	movt	r8, #2
   14a84:	movne	r8, r3
   14a88:	bl	10fd8 <__errno_location@plt>
   14a8c:	str	r0, [sp, #28]
   14a90:	cmp	r4, #0
   14a94:	add	sl, r8, #8
   14a98:	ldm	r8, {r3, r9}
   14a9c:	ldr	r7, [r0]
   14aa0:	ldr	r1, [r8, #40]	; 0x28
   14aa4:	ldr	r2, [r8, #44]	; 0x2c
   14aa8:	mov	r0, #0
   14aac:	orreq	r9, r9, #1
   14ab0:	str	r7, [sp, #32]
   14ab4:	mov	r7, r5
   14ab8:	stm	sp, {r3, r9, sl}
   14abc:	str	r1, [sp, #12]
   14ac0:	str	r2, [sp, #16]
   14ac4:	mov	r1, #0
   14ac8:	mov	r2, r6
   14acc:	mov	r3, r5
   14ad0:	bl	139c8 <__assert_fail@plt+0x290c>
   14ad4:	add	r4, r0, #1
   14ad8:	mov	r5, r0
   14adc:	mov	r0, r4
   14ae0:	bl	15820 <__assert_fail@plt+0x4764>
   14ae4:	mov	r6, r0
   14ae8:	ldr	r0, [r8]
   14aec:	ldr	r2, [r8, #44]	; 0x2c
   14af0:	ldr	r1, [r8, #40]	; 0x28
   14af4:	mov	r3, r7
   14af8:	stm	sp, {r0, r9, sl}
   14afc:	str	r2, [sp, #16]
   14b00:	str	r1, [sp, #12]
   14b04:	mov	r0, r6
   14b08:	mov	r1, r4
   14b0c:	ldr	r2, [sp, #20]
   14b10:	bl	139c8 <__assert_fail@plt+0x290c>
   14b14:	ldr	r0, [sp, #24]
   14b18:	ldr	r1, [sp, #32]
   14b1c:	ldr	r2, [sp, #28]
   14b20:	cmp	r0, #0
   14b24:	str	r1, [r2]
   14b28:	strne	r5, [r0]
   14b2c:	mov	r0, r6
   14b30:	sub	sp, fp, #28
   14b34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b38:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14b3c:	add	fp, sp, #24
   14b40:	movw	r5, #37116	; 0x90fc
   14b44:	movw	r8, #37112	; 0x90f8
   14b48:	movt	r5, #2
   14b4c:	movt	r8, #2
   14b50:	ldr	r0, [r5]
   14b54:	ldr	r4, [r8]
   14b58:	cmp	r0, #2
   14b5c:	blt	14b88 <__assert_fail@plt+0x3acc>
   14b60:	add	r7, r4, #12
   14b64:	mov	r6, #0
   14b68:	ldr	r0, [r7, r6, lsl #3]
   14b6c:	bl	1376c <__assert_fail@plt+0x26b0>
   14b70:	ldr	r1, [r5]
   14b74:	add	r2, r6, #2
   14b78:	add	r0, r6, #1
   14b7c:	mov	r6, r0
   14b80:	cmp	r2, r1
   14b84:	blt	14b68 <__assert_fail@plt+0x3aac>
   14b88:	ldr	r0, [r4, #4]
   14b8c:	movw	r7, #46240	; 0xb4a0
   14b90:	movt	r7, #2
   14b94:	cmp	r0, r7
   14b98:	beq	14bb0 <__assert_fail@plt+0x3af4>
   14b9c:	bl	1376c <__assert_fail@plt+0x26b0>
   14ba0:	movw	r0, #37120	; 0x9100
   14ba4:	mov	r6, #256	; 0x100
   14ba8:	movt	r0, #2
   14bac:	strd	r6, [r0]
   14bb0:	movw	r6, #37120	; 0x9100
   14bb4:	movt	r6, #2
   14bb8:	cmp	r4, r6
   14bbc:	beq	14bcc <__assert_fail@plt+0x3b10>
   14bc0:	mov	r0, r4
   14bc4:	bl	1376c <__assert_fail@plt+0x26b0>
   14bc8:	str	r6, [r8]
   14bcc:	mov	r0, #1
   14bd0:	str	r0, [r5]
   14bd4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14bd8:	movw	r3, #46192	; 0xb470
   14bdc:	mvn	r2, #0
   14be0:	movt	r3, #2
   14be4:	b	14be8 <__assert_fail@plt+0x3b2c>
   14be8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bec:	add	fp, sp, #28
   14bf0:	sub	sp, sp, #44	; 0x2c
   14bf4:	mov	r7, r3
   14bf8:	str	r2, [sp, #36]	; 0x24
   14bfc:	str	r1, [sp, #32]
   14c00:	mov	r5, r0
   14c04:	bl	10fd8 <__errno_location@plt>
   14c08:	cmp	r5, #0
   14c0c:	blt	14d78 <__assert_fail@plt+0x3cbc>
   14c10:	cmn	r5, #-2147483647	; 0x80000001
   14c14:	beq	14d78 <__assert_fail@plt+0x3cbc>
   14c18:	movw	r8, #37116	; 0x90fc
   14c1c:	movw	r4, #37112	; 0x90f8
   14c20:	str	r0, [sp, #28]
   14c24:	ldr	r0, [r0]
   14c28:	movt	r8, #2
   14c2c:	movt	r4, #2
   14c30:	ldr	r1, [r8]
   14c34:	ldr	r6, [r4]
   14c38:	str	r0, [sp, #24]
   14c3c:	cmp	r1, r5
   14c40:	ble	14c4c <__assert_fail@plt+0x3b90>
   14c44:	mov	sl, r6
   14c48:	b	14cb4 <__assert_fail@plt+0x3bf8>
   14c4c:	movw	r9, #37120	; 0x9100
   14c50:	mov	r0, #8
   14c54:	add	r2, r5, #1
   14c58:	str	r1, [fp, #-32]	; 0xffffffe0
   14c5c:	mvn	r3, #-2147483648	; 0x80000000
   14c60:	movt	r9, #2
   14c64:	str	r0, [sp]
   14c68:	sub	r2, r2, r1
   14c6c:	sub	r1, fp, #32
   14c70:	subs	r0, r6, r9
   14c74:	movne	r0, r6
   14c78:	bl	15950 <__assert_fail@plt+0x4894>
   14c7c:	cmp	r6, r9
   14c80:	mov	sl, r0
   14c84:	str	r0, [r4]
   14c88:	ldrdeq	r0, [r9]
   14c8c:	stmeq	sl, {r0, r1}
   14c90:	ldr	r1, [r8]
   14c94:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14c98:	add	r0, sl, r1, lsl #3
   14c9c:	sub	r1, r2, r1
   14ca0:	lsl	r2, r1, #3
   14ca4:	mov	r1, #0
   14ca8:	bl	10ffc <memset@plt>
   14cac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14cb0:	str	r0, [r8]
   14cb4:	mov	r9, sl
   14cb8:	ldr	r6, [r9, r5, lsl #3]!
   14cbc:	ldr	r4, [r9, #4]!
   14cc0:	ldm	r7, {r0, r1}
   14cc4:	ldr	r2, [r7, #40]	; 0x28
   14cc8:	ldr	r3, [r7, #44]	; 0x2c
   14ccc:	orr	r8, r1, #1
   14cd0:	add	r1, r7, #8
   14cd4:	stm	sp, {r0, r8}
   14cd8:	add	r0, sp, #8
   14cdc:	str	r1, [sp, #20]
   14ce0:	stm	r0, {r1, r2, r3}
   14ce4:	mov	r0, r4
   14ce8:	mov	r1, r6
   14cec:	ldr	r2, [sp, #32]
   14cf0:	ldr	r3, [sp, #36]	; 0x24
   14cf4:	bl	139c8 <__assert_fail@plt+0x290c>
   14cf8:	cmp	r6, r0
   14cfc:	bhi	14d60 <__assert_fail@plt+0x3ca4>
   14d00:	add	r6, r0, #1
   14d04:	movw	r0, #46240	; 0xb4a0
   14d08:	movt	r0, #2
   14d0c:	str	r6, [sl, r5, lsl #3]
   14d10:	cmp	r4, r0
   14d14:	beq	14d20 <__assert_fail@plt+0x3c64>
   14d18:	mov	r0, r4
   14d1c:	bl	1376c <__assert_fail@plt+0x26b0>
   14d20:	mov	r0, r6
   14d24:	bl	15820 <__assert_fail@plt+0x4764>
   14d28:	str	r0, [r9]
   14d2c:	mov	r4, r0
   14d30:	add	r3, sp, #8
   14d34:	ldr	r0, [r7]
   14d38:	ldr	r1, [r7, #40]	; 0x28
   14d3c:	ldr	r2, [r7, #44]	; 0x2c
   14d40:	stm	sp, {r0, r8}
   14d44:	ldr	r0, [sp, #20]
   14d48:	stm	r3, {r0, r1, r2}
   14d4c:	mov	r0, r4
   14d50:	mov	r1, r6
   14d54:	ldr	r2, [sp, #32]
   14d58:	ldr	r3, [sp, #36]	; 0x24
   14d5c:	bl	139c8 <__assert_fail@plt+0x290c>
   14d60:	ldr	r0, [sp, #28]
   14d64:	ldr	r1, [sp, #24]
   14d68:	str	r1, [r0]
   14d6c:	mov	r0, r4
   14d70:	sub	sp, fp, #28
   14d74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d78:	bl	110a4 <abort@plt>
   14d7c:	movw	r3, #46192	; 0xb470
   14d80:	movt	r3, #2
   14d84:	b	14be8 <__assert_fail@plt+0x3b2c>
   14d88:	movw	r3, #46192	; 0xb470
   14d8c:	mov	r1, r0
   14d90:	mov	r0, #0
   14d94:	mvn	r2, #0
   14d98:	movt	r3, #2
   14d9c:	b	14be8 <__assert_fail@plt+0x3b2c>
   14da0:	movw	r3, #46192	; 0xb470
   14da4:	mov	r2, r1
   14da8:	mov	r1, r0
   14dac:	mov	r0, #0
   14db0:	movt	r3, #2
   14db4:	b	14be8 <__assert_fail@plt+0x3b2c>
   14db8:	push	{fp, lr}
   14dbc:	mov	fp, sp
   14dc0:	sub	sp, sp, #48	; 0x30
   14dc4:	vmov.i32	q8, #0	; 0x00000000
   14dc8:	mov	ip, #32
   14dcc:	mov	r3, sp
   14dd0:	mov	lr, r2
   14dd4:	cmp	r1, #10
   14dd8:	add	r2, r3, #16
   14ddc:	vst1.64	{d16-d17}, [r3], ip
   14de0:	vst1.64	{d16-d17}, [r3]
   14de4:	vst1.64	{d16-d17}, [r2]
   14de8:	beq	14e08 <__assert_fail@plt+0x3d4c>
   14dec:	str	r1, [sp]
   14df0:	mov	r3, sp
   14df4:	mov	r1, lr
   14df8:	mvn	r2, #0
   14dfc:	bl	14be8 <__assert_fail@plt+0x3b2c>
   14e00:	mov	sp, fp
   14e04:	pop	{fp, pc}
   14e08:	bl	110a4 <abort@plt>
   14e0c:	push	{r4, sl, fp, lr}
   14e10:	add	fp, sp, #8
   14e14:	sub	sp, sp, #48	; 0x30
   14e18:	mov	ip, r3
   14e1c:	mov	r3, sp
   14e20:	vmov.i32	q8, #0	; 0x00000000
   14e24:	mov	lr, #32
   14e28:	cmp	r1, #10
   14e2c:	add	r4, r3, #16
   14e30:	vst1.64	{d16-d17}, [r3], lr
   14e34:	vst1.64	{d16-d17}, [r3]
   14e38:	vst1.64	{d16-d17}, [r4]
   14e3c:	beq	14e5c <__assert_fail@plt+0x3da0>
   14e40:	str	r1, [sp]
   14e44:	mov	r1, r2
   14e48:	mov	r3, sp
   14e4c:	mov	r2, ip
   14e50:	bl	14be8 <__assert_fail@plt+0x3b2c>
   14e54:	sub	sp, fp, #8
   14e58:	pop	{r4, sl, fp, pc}
   14e5c:	bl	110a4 <abort@plt>
   14e60:	mov	r2, r1
   14e64:	mov	r1, r0
   14e68:	mov	r0, #0
   14e6c:	b	14db8 <__assert_fail@plt+0x3cfc>
   14e70:	mov	r3, r2
   14e74:	mov	r2, r1
   14e78:	mov	r1, r0
   14e7c:	mov	r0, #0
   14e80:	b	14e0c <__assert_fail@plt+0x3d50>
   14e84:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14e88:	add	fp, sp, #24
   14e8c:	sub	sp, sp, #48	; 0x30
   14e90:	movw	r8, #46192	; 0xb470
   14e94:	mov	lr, r0
   14e98:	mov	r3, sp
   14e9c:	mov	ip, r1
   14ea0:	movt	r8, #2
   14ea4:	mov	r1, r3
   14ea8:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   14eac:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   14eb0:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   14eb4:	stm	r1, {r0, r4, r5, r6, r7, r9}
   14eb8:	ubfx	r0, r2, #5, #3
   14ebc:	and	r2, r2, #31
   14ec0:	mov	r4, #1
   14ec4:	add	r0, r3, r0, lsl #2
   14ec8:	ldr	r1, [r0, #8]
   14ecc:	bic	r4, r4, r1, lsr r2
   14ed0:	eor	r1, r1, r4, lsl r2
   14ed4:	mov	r2, ip
   14ed8:	str	r1, [r0, #8]
   14edc:	mov	r0, #0
   14ee0:	mov	r1, lr
   14ee4:	bl	14be8 <__assert_fail@plt+0x3b2c>
   14ee8:	sub	sp, fp, #24
   14eec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14ef0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ef4:	add	fp, sp, #24
   14ef8:	sub	sp, sp, #48	; 0x30
   14efc:	movw	lr, #46192	; 0xb470
   14f00:	mov	ip, r0
   14f04:	mov	r3, sp
   14f08:	movt	lr, #2
   14f0c:	mov	r2, r3
   14f10:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   14f14:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   14f18:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   14f1c:	stm	r2, {r0, r4, r5, r6, r7, r8}
   14f20:	ubfx	r0, r1, #5, #3
   14f24:	and	r1, r1, #31
   14f28:	mov	r7, #1
   14f2c:	add	r0, r3, r0, lsl #2
   14f30:	ldr	r2, [r0, #8]
   14f34:	bic	r7, r7, r2, lsr r1
   14f38:	eor	r1, r2, r7, lsl r1
   14f3c:	mvn	r2, #0
   14f40:	str	r1, [r0, #8]
   14f44:	mov	r0, #0
   14f48:	mov	r1, ip
   14f4c:	bl	14be8 <__assert_fail@plt+0x3b2c>
   14f50:	sub	sp, fp, #24
   14f54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f58:	push	{r4, r5, r6, r7, fp, lr}
   14f5c:	add	fp, sp, #16
   14f60:	sub	sp, sp, #48	; 0x30
   14f64:	movw	lr, #46192	; 0xb470
   14f68:	mov	ip, r0
   14f6c:	mov	r3, sp
   14f70:	movt	lr, #2
   14f74:	mov	r2, r3
   14f78:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   14f7c:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   14f80:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   14f84:	stm	r2, {r0, r1, r4, r5, r6, r7}
   14f88:	mov	r1, ip
   14f8c:	mvn	r2, #0
   14f90:	ldr	r0, [sp, #12]
   14f94:	orr	r0, r0, #67108864	; 0x4000000
   14f98:	str	r0, [sp, #12]
   14f9c:	mov	r0, #0
   14fa0:	bl	14be8 <__assert_fail@plt+0x3b2c>
   14fa4:	sub	sp, fp, #16
   14fa8:	pop	{r4, r5, r6, r7, fp, pc}
   14fac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14fb0:	add	fp, sp, #24
   14fb4:	sub	sp, sp, #48	; 0x30
   14fb8:	movw	r8, #46192	; 0xb470
   14fbc:	mov	ip, r1
   14fc0:	mov	lr, r0
   14fc4:	mov	r3, sp
   14fc8:	movt	r8, #2
   14fcc:	mov	r2, r3
   14fd0:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   14fd4:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   14fd8:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   14fdc:	stm	r2, {r0, r1, r4, r5, r6, r7}
   14fe0:	mov	r1, lr
   14fe4:	mov	r2, ip
   14fe8:	ldr	r0, [sp, #12]
   14fec:	orr	r0, r0, #67108864	; 0x4000000
   14ff0:	str	r0, [sp, #12]
   14ff4:	mov	r0, #0
   14ff8:	bl	14be8 <__assert_fail@plt+0x3b2c>
   14ffc:	sub	sp, fp, #24
   15000:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15004:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15008:	add	fp, sp, #24
   1500c:	sub	sp, sp, #96	; 0x60
   15010:	mov	lr, sp
   15014:	vmov.i32	q8, #0	; 0x00000000
   15018:	mov	ip, r2
   1501c:	cmp	r1, #10
   15020:	add	r3, lr, #16
   15024:	mov	r2, lr
   15028:	vst1.64	{d16-d17}, [r3]
   1502c:	mov	r3, #28
   15030:	vst1.64	{d16-d17}, [r2], r3
   15034:	vst1.32	{d16-d17}, [r2]
   15038:	beq	15078 <__assert_fail@plt+0x3fbc>
   1503c:	str	r1, [sp, #48]	; 0x30
   15040:	add	r3, sp, #48	; 0x30
   15044:	ldm	lr!, {r2, r4, r5, r6, r7}
   15048:	add	r1, r3, #4
   1504c:	stmia	r1!, {r2, r4, r5, r6, r7}
   15050:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   15054:	stm	r1, {r2, r4, r5, r6, r7, r8}
   15058:	mvn	r2, #0
   1505c:	ldr	r1, [sp, #60]	; 0x3c
   15060:	orr	r1, r1, #67108864	; 0x4000000
   15064:	str	r1, [sp, #60]	; 0x3c
   15068:	mov	r1, ip
   1506c:	bl	14be8 <__assert_fail@plt+0x3b2c>
   15070:	sub	sp, fp, #24
   15074:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15078:	bl	110a4 <abort@plt>
   1507c:	push	{fp, lr}
   15080:	mov	fp, sp
   15084:	sub	sp, sp, #8
   15088:	mvn	ip, #0
   1508c:	str	ip, [sp]
   15090:	bl	1509c <__assert_fail@plt+0x3fe0>
   15094:	mov	sp, fp
   15098:	pop	{fp, pc}
   1509c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   150a0:	add	fp, sp, #24
   150a4:	sub	sp, sp, #48	; 0x30
   150a8:	movw	ip, #46192	; 0xb470
   150ac:	mov	lr, r3
   150b0:	mov	r3, sp
   150b4:	cmp	r1, #0
   150b8:	movt	ip, #2
   150bc:	cmpne	r2, #0
   150c0:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   150c4:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   150c8:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   150cc:	stm	r3, {r4, r5, r6, r7, r8, r9}
   150d0:	mov	r3, #10
   150d4:	str	r3, [sp]
   150d8:	bne	150e0 <__assert_fail@plt+0x4024>
   150dc:	bl	110a4 <abort@plt>
   150e0:	ldr	ip, [fp, #8]
   150e4:	str	r2, [sp, #44]	; 0x2c
   150e8:	str	r1, [sp, #40]	; 0x28
   150ec:	mov	r3, sp
   150f0:	mov	r1, lr
   150f4:	mov	r2, ip
   150f8:	bl	14be8 <__assert_fail@plt+0x3b2c>
   150fc:	sub	sp, fp, #24
   15100:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15104:	push	{fp, lr}
   15108:	mov	fp, sp
   1510c:	sub	sp, sp, #8
   15110:	mov	r3, r2
   15114:	mov	r2, r1
   15118:	mov	r1, r0
   1511c:	mvn	r0, #0
   15120:	str	r0, [sp]
   15124:	mov	r0, #0
   15128:	bl	1509c <__assert_fail@plt+0x3fe0>
   1512c:	mov	sp, fp
   15130:	pop	{fp, pc}
   15134:	push	{fp, lr}
   15138:	mov	fp, sp
   1513c:	sub	sp, sp, #8
   15140:	mov	ip, r2
   15144:	mov	r2, r1
   15148:	mov	r1, r0
   1514c:	str	r3, [sp]
   15150:	mov	r0, #0
   15154:	mov	r3, ip
   15158:	bl	1509c <__assert_fail@plt+0x3fe0>
   1515c:	mov	sp, fp
   15160:	pop	{fp, pc}
   15164:	movw	r3, #37128	; 0x9108
   15168:	movt	r3, #2
   1516c:	b	14be8 <__assert_fail@plt+0x3b2c>
   15170:	movw	r3, #37128	; 0x9108
   15174:	mov	r2, r1
   15178:	mov	r1, r0
   1517c:	mov	r0, #0
   15180:	movt	r3, #2
   15184:	b	14be8 <__assert_fail@plt+0x3b2c>
   15188:	movw	r3, #37128	; 0x9108
   1518c:	mvn	r2, #0
   15190:	movt	r3, #2
   15194:	b	14be8 <__assert_fail@plt+0x3b2c>
   15198:	movw	r3, #37128	; 0x9108
   1519c:	mov	r1, r0
   151a0:	mov	r0, #0
   151a4:	mvn	r2, #0
   151a8:	movt	r3, #2
   151ac:	b	14be8 <__assert_fail@plt+0x3b2c>
   151b0:	push	{r4, r5, fp, lr}
   151b4:	add	fp, sp, #8
   151b8:	mov	r5, r0
   151bc:	mov	r4, r1
   151c0:	mov	r0, #0
   151c4:	mov	r2, #5
   151c8:	mov	r1, r5
   151cc:	bl	10ef4 <dcgettext@plt>
   151d0:	cmp	r0, r5
   151d4:	popne	{r4, r5, fp, pc}
   151d8:	bl	1662c <__assert_fail@plt+0x5570>
   151dc:	ldrb	r1, [r0]
   151e0:	and	r1, r1, #223	; 0xdf
   151e4:	cmp	r1, #71	; 0x47
   151e8:	beq	15250 <__assert_fail@plt+0x4194>
   151ec:	cmp	r1, #85	; 0x55
   151f0:	bne	15274 <__assert_fail@plt+0x41b8>
   151f4:	ldrb	r1, [r0, #1]
   151f8:	and	r1, r1, #223	; 0xdf
   151fc:	cmp	r1, #84	; 0x54
   15200:	bne	15274 <__assert_fail@plt+0x41b8>
   15204:	ldrb	r1, [r0, #2]
   15208:	and	r1, r1, #223	; 0xdf
   1520c:	cmp	r1, #70	; 0x46
   15210:	ldrbeq	r1, [r0, #3]
   15214:	cmpeq	r1, #45	; 0x2d
   15218:	bne	15274 <__assert_fail@plt+0x41b8>
   1521c:	ldrb	r1, [r0, #4]
   15220:	cmp	r1, #56	; 0x38
   15224:	ldrbeq	r0, [r0, #5]
   15228:	cmpeq	r0, #0
   1522c:	bne	15274 <__assert_fail@plt+0x41b8>
   15230:	ldrb	r1, [r5]
   15234:	movw	r2, #32714	; 0x7fca
   15238:	movw	r0, #32718	; 0x7fce
   1523c:	movt	r2, #1
   15240:	movt	r0, #1
   15244:	cmp	r1, #96	; 0x60
   15248:	moveq	r0, r2
   1524c:	pop	{r4, r5, fp, pc}
   15250:	ldrb	r1, [r0, #1]
   15254:	and	r1, r1, #223	; 0xdf
   15258:	cmp	r1, #66	; 0x42
   1525c:	bne	15274 <__assert_fail@plt+0x41b8>
   15260:	ldrb	r1, [r0, #2]
   15264:	cmp	r1, #49	; 0x31
   15268:	ldrbeq	r1, [r0, #3]
   1526c:	cmpeq	r1, #56	; 0x38
   15270:	beq	15290 <__assert_fail@plt+0x41d4>
   15274:	movw	r1, #32710	; 0x7fc6
   15278:	movw	r0, #30460	; 0x76fc
   1527c:	cmp	r4, #9
   15280:	movt	r1, #1
   15284:	movt	r0, #1
   15288:	moveq	r0, r1
   1528c:	pop	{r4, r5, fp, pc}
   15290:	ldrb	r1, [r0, #4]
   15294:	cmp	r1, #48	; 0x30
   15298:	ldrbeq	r1, [r0, #5]
   1529c:	cmpeq	r1, #51	; 0x33
   152a0:	bne	15274 <__assert_fail@plt+0x41b8>
   152a4:	ldrb	r1, [r0, #6]
   152a8:	cmp	r1, #48	; 0x30
   152ac:	ldrbeq	r0, [r0, #7]
   152b0:	cmpeq	r0, #0
   152b4:	bne	15274 <__assert_fail@plt+0x41b8>
   152b8:	ldrb	r1, [r5]
   152bc:	movw	r2, #32722	; 0x7fd2
   152c0:	movw	r0, #32726	; 0x7fd6
   152c4:	movt	r2, #1
   152c8:	movt	r0, #1
   152cc:	b	15244 <__assert_fail@plt+0x4188>
   152d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   152d4:	add	fp, sp, #24
   152d8:	movw	r8, #0
   152dc:	mov	r6, r2
   152e0:	mov	r4, r1
   152e4:	mov	r5, r0
   152e8:	movt	r8, #32752	; 0x7ff0
   152ec:	mov	r0, r5
   152f0:	mov	r1, r4
   152f4:	mov	r2, r6
   152f8:	bl	10e7c <read@plt>
   152fc:	mov	r7, r0
   15300:	cmn	r0, #1
   15304:	bgt	1532c <__assert_fail@plt+0x4270>
   15308:	bl	10fd8 <__errno_location@plt>
   1530c:	ldr	r0, [r0]
   15310:	cmp	r0, #4
   15314:	beq	152ec <__assert_fail@plt+0x4230>
   15318:	cmp	r6, r8
   1531c:	bls	1532c <__assert_fail@plt+0x4270>
   15320:	cmp	r0, #22
   15324:	mov	r6, r8
   15328:	beq	152ec <__assert_fail@plt+0x4230>
   1532c:	mov	r0, r7
   15330:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15334:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15338:	add	fp, sp, #24
   1533c:	sub	sp, sp, #32
   15340:	ldr	r6, [fp, #12]
   15344:	ldr	r7, [fp, #8]
   15348:	mov	r4, r2
   1534c:	mov	r8, r0
   15350:	cmp	r1, #0
   15354:	beq	1537c <__assert_fail@plt+0x42c0>
   15358:	movw	r2, #32816	; 0x8030
   1535c:	mov	r5, r1
   15360:	str	r3, [sp, #4]
   15364:	str	r4, [sp]
   15368:	mov	r0, r8
   1536c:	mov	r1, #1
   15370:	movt	r2, #1
   15374:	mov	r3, r5
   15378:	b	15394 <__assert_fail@plt+0x42d8>
   1537c:	movw	r2, #32828	; 0x803c
   15380:	str	r3, [sp]
   15384:	mov	r0, r8
   15388:	mov	r1, #1
   1538c:	mov	r3, r4
   15390:	movt	r2, #1
   15394:	bl	1102c <__fprintf_chk@plt>
   15398:	movw	r1, #32835	; 0x8043
   1539c:	mov	r0, #0
   153a0:	mov	r2, #5
   153a4:	movt	r1, #1
   153a8:	bl	10ef4 <dcgettext@plt>
   153ac:	movw	r2, #33553	; 0x8311
   153b0:	mov	r3, r0
   153b4:	movw	r0, #2022	; 0x7e6
   153b8:	mov	r1, #1
   153bc:	str	r0, [sp]
   153c0:	movt	r2, #1
   153c4:	mov	r0, r8
   153c8:	bl	1102c <__fprintf_chk@plt>
   153cc:	movw	r4, #30198	; 0x75f6
   153d0:	mov	r1, r8
   153d4:	movt	r4, #1
   153d8:	mov	r0, r4
   153dc:	bl	10e4c <fputs_unlocked@plt>
   153e0:	movw	r1, #32839	; 0x8047
   153e4:	mov	r0, #0
   153e8:	mov	r2, #5
   153ec:	movt	r1, #1
   153f0:	bl	10ef4 <dcgettext@plt>
   153f4:	movw	r3, #33010	; 0x80f2
   153f8:	mov	r2, r0
   153fc:	mov	r0, r8
   15400:	mov	r1, #1
   15404:	movt	r3, #1
   15408:	bl	1102c <__fprintf_chk@plt>
   1540c:	mov	r0, r4
   15410:	mov	r1, r8
   15414:	bl	10e4c <fputs_unlocked@plt>
   15418:	cmp	r6, #9
   1541c:	bhi	15480 <__assert_fail@plt+0x43c4>
   15420:	add	r0, pc, #0
   15424:	ldr	pc, [r0, r6, lsl #2]
   15428:	andeq	r5, r1, r8, asr r6
   1542c:	andeq	r5, r1, r0, asr r4
   15430:	andeq	r5, r1, ip, lsl #9
   15434:			; <UNDEFINED> instruction: 0x000154b4
   15438:	ldrdeq	r5, [r1], -ip
   1543c:	andeq	r5, r1, r4, lsl #10
   15440:	andeq	r5, r1, ip, lsr #10
   15444:	andeq	r5, r1, r4, ror #10
   15448:	andeq	r5, r1, r4, lsl #12
   1544c:	andeq	r5, r1, ip, lsr #11
   15450:	movw	r1, #33044	; 0x8114
   15454:	mov	r0, #0
   15458:	mov	r2, #5
   1545c:	movt	r1, #1
   15460:	bl	10ef4 <dcgettext@plt>
   15464:	ldr	r3, [r7]
   15468:	mov	r2, r0
   1546c:	mov	r0, r8
   15470:	mov	r1, #1
   15474:	sub	sp, fp, #24
   15478:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1547c:	b	1102c <__fprintf_chk@plt>
   15480:	movw	r1, #33363	; 0x8253
   15484:	movt	r1, #1
   15488:	b	155b4 <__assert_fail@plt+0x44f8>
   1548c:	movw	r1, #33060	; 0x8124
   15490:	mov	r0, #0
   15494:	mov	r2, #5
   15498:	movt	r1, #1
   1549c:	bl	10ef4 <dcgettext@plt>
   154a0:	mov	r2, r0
   154a4:	ldr	r3, [r7]
   154a8:	ldr	r0, [r7, #4]
   154ac:	str	r0, [sp]
   154b0:	b	155a0 <__assert_fail@plt+0x44e4>
   154b4:	movw	r1, #33083	; 0x813b
   154b8:	mov	r0, #0
   154bc:	mov	r2, #5
   154c0:	movt	r1, #1
   154c4:	bl	10ef4 <dcgettext@plt>
   154c8:	ldr	r3, [r7]
   154cc:	mov	r2, r0
   154d0:	ldmib	r7, {r0, r1}
   154d4:	stm	sp, {r0, r1}
   154d8:	b	155a0 <__assert_fail@plt+0x44e4>
   154dc:	movw	r1, #33111	; 0x8157
   154e0:	mov	r0, #0
   154e4:	mov	r2, #5
   154e8:	movt	r1, #1
   154ec:	bl	10ef4 <dcgettext@plt>
   154f0:	ldr	r3, [r7]
   154f4:	mov	r2, r0
   154f8:	ldmib	r7, {r0, r1, r7}
   154fc:	stm	sp, {r0, r1, r7}
   15500:	b	155a0 <__assert_fail@plt+0x44e4>
   15504:	movw	r1, #33143	; 0x8177
   15508:	mov	r0, #0
   1550c:	mov	r2, #5
   15510:	movt	r1, #1
   15514:	bl	10ef4 <dcgettext@plt>
   15518:	ldr	r3, [r7]
   1551c:	mov	r2, r0
   15520:	ldmib	r7, {r0, r1, r6, r7}
   15524:	stm	sp, {r0, r1, r6, r7}
   15528:	b	155a0 <__assert_fail@plt+0x44e4>
   1552c:	movw	r1, #33179	; 0x819b
   15530:	mov	r0, #0
   15534:	mov	r2, #5
   15538:	movt	r1, #1
   1553c:	bl	10ef4 <dcgettext@plt>
   15540:	ldr	r3, [r7]
   15544:	mov	r2, r0
   15548:	ldmib	r7, {r0, r1, r6}
   1554c:	ldr	r5, [r7, #16]
   15550:	ldr	r7, [r7, #20]
   15554:	stm	sp, {r0, r1, r6}
   15558:	str	r5, [sp, #12]
   1555c:	str	r7, [sp, #16]
   15560:	b	155a0 <__assert_fail@plt+0x44e4>
   15564:	movw	r1, #33219	; 0x81c3
   15568:	mov	r0, #0
   1556c:	mov	r2, #5
   15570:	movt	r1, #1
   15574:	bl	10ef4 <dcgettext@plt>
   15578:	ldr	r3, [r7]
   1557c:	mov	r2, r0
   15580:	ldmib	r7, {r0, r1, r6}
   15584:	ldr	r5, [r7, #16]
   15588:	ldr	r4, [r7, #20]
   1558c:	ldr	r7, [r7, #24]
   15590:	stm	sp, {r0, r1, r6}
   15594:	str	r5, [sp, #12]
   15598:	str	r4, [sp, #16]
   1559c:	str	r7, [sp, #20]
   155a0:	mov	r0, r8
   155a4:	mov	r1, #1
   155a8:	b	15654 <__assert_fail@plt+0x4598>
   155ac:	movw	r1, #33311	; 0x821f
   155b0:	movt	r1, #1
   155b4:	mov	r0, #0
   155b8:	mov	r2, #5
   155bc:	bl	10ef4 <dcgettext@plt>
   155c0:	mov	ip, r0
   155c4:	ldr	r3, [r7]
   155c8:	ldr	r0, [r7, #4]
   155cc:	ldr	r1, [r7, #8]
   155d0:	ldr	r6, [r7, #12]
   155d4:	ldr	r5, [r7, #16]
   155d8:	ldr	r4, [r7, #20]
   155dc:	ldr	r2, [r7, #24]
   155e0:	ldr	lr, [r7, #28]
   155e4:	ldr	r7, [r7, #32]
   155e8:	stm	sp, {r0, r1, r6}
   155ec:	str	r5, [sp, #12]
   155f0:	str	r4, [sp, #16]
   155f4:	str	r2, [sp, #20]
   155f8:	str	lr, [sp, #24]
   155fc:	str	r7, [sp, #28]
   15600:	b	15648 <__assert_fail@plt+0x458c>
   15604:	movw	r1, #33263	; 0x81ef
   15608:	mov	r0, #0
   1560c:	mov	r2, #5
   15610:	movt	r1, #1
   15614:	bl	10ef4 <dcgettext@plt>
   15618:	mov	ip, r0
   1561c:	ldr	r3, [r7]
   15620:	ldmib	r7, {r0, r1, r6}
   15624:	ldr	r5, [r7, #16]
   15628:	ldr	r4, [r7, #20]
   1562c:	ldr	r2, [r7, #24]
   15630:	ldr	r7, [r7, #28]
   15634:	stm	sp, {r0, r1, r6}
   15638:	str	r5, [sp, #12]
   1563c:	str	r4, [sp, #16]
   15640:	str	r2, [sp, #20]
   15644:	str	r7, [sp, #24]
   15648:	mov	r0, r8
   1564c:	mov	r1, #1
   15650:	mov	r2, ip
   15654:	bl	1102c <__fprintf_chk@plt>
   15658:	sub	sp, fp, #24
   1565c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15660:	push	{r4, sl, fp, lr}
   15664:	add	fp, sp, #8
   15668:	sub	sp, sp, #8
   1566c:	ldr	ip, [fp, #8]
   15670:	mov	lr, #0
   15674:	ldr	r4, [ip, lr, lsl #2]
   15678:	add	lr, lr, #1
   1567c:	cmp	r4, #0
   15680:	bne	15674 <__assert_fail@plt+0x45b8>
   15684:	sub	r4, lr, #1
   15688:	str	ip, [sp]
   1568c:	str	r4, [sp, #4]
   15690:	bl	15334 <__assert_fail@plt+0x4278>
   15694:	sub	sp, fp, #8
   15698:	pop	{r4, sl, fp, pc}
   1569c:	push	{r4, r5, fp, lr}
   156a0:	add	fp, sp, #8
   156a4:	sub	sp, sp, #48	; 0x30
   156a8:	ldr	r4, [fp, #8]
   156ac:	mov	ip, #0
   156b0:	add	lr, sp, #8
   156b4:	ldr	r5, [r4]
   156b8:	cmp	r5, #0
   156bc:	str	r5, [lr, ip, lsl #2]
   156c0:	beq	156d4 <__assert_fail@plt+0x4618>
   156c4:	add	ip, ip, #1
   156c8:	add	r4, r4, #4
   156cc:	cmp	ip, #10
   156d0:	bcc	156b4 <__assert_fail@plt+0x45f8>
   156d4:	str	lr, [sp]
   156d8:	str	ip, [sp, #4]
   156dc:	bl	15334 <__assert_fail@plt+0x4278>
   156e0:	sub	sp, fp, #8
   156e4:	pop	{r4, r5, fp, pc}
   156e8:	push	{fp, lr}
   156ec:	mov	fp, sp
   156f0:	sub	sp, sp, #8
   156f4:	add	ip, fp, #8
   156f8:	str	ip, [sp, #4]
   156fc:	str	ip, [sp]
   15700:	bl	1569c <__assert_fail@plt+0x45e0>
   15704:	mov	sp, fp
   15708:	pop	{fp, pc}
   1570c:	push	{fp, lr}
   15710:	mov	fp, sp
   15714:	movw	r0, #37204	; 0x9154
   15718:	movt	r0, #2
   1571c:	ldr	r1, [r0]
   15720:	movw	r0, #30198	; 0x75f6
   15724:	movt	r0, #1
   15728:	bl	10e4c <fputs_unlocked@plt>
   1572c:	movw	r1, #33423	; 0x828f
   15730:	mov	r0, #0
   15734:	mov	r2, #5
   15738:	movt	r1, #1
   1573c:	bl	10ef4 <dcgettext@plt>
   15740:	movw	r2, #33443	; 0x82a3
   15744:	mov	r1, r0
   15748:	mov	r0, #1
   1574c:	movt	r2, #1
   15750:	bl	11008 <__printf_chk@plt>
   15754:	movw	r1, #33465	; 0x82b9
   15758:	mov	r0, #0
   1575c:	mov	r2, #5
   15760:	movt	r1, #1
   15764:	bl	10ef4 <dcgettext@plt>
   15768:	movw	r2, #29511	; 0x7347
   1576c:	movw	r3, #30007	; 0x7537
   15770:	mov	r1, r0
   15774:	mov	r0, #1
   15778:	movt	r2, #1
   1577c:	movt	r3, #1
   15780:	bl	11008 <__printf_chk@plt>
   15784:	movw	r1, #33485	; 0x82cd
   15788:	mov	r0, #0
   1578c:	mov	r2, #5
   15790:	movt	r1, #1
   15794:	bl	10ef4 <dcgettext@plt>
   15798:	movw	r2, #33524	; 0x82f4
   1579c:	mov	r1, r0
   157a0:	mov	r0, #1
   157a4:	movt	r2, #1
   157a8:	pop	{fp, lr}
   157ac:	b	11008 <__printf_chk@plt>
   157b0:	b	157b4 <__assert_fail@plt+0x46f8>
   157b4:	push	{r4, r5, r6, sl, fp, lr}
   157b8:	add	fp, sp, #16
   157bc:	mov	r4, r2
   157c0:	mov	r5, r1
   157c4:	mov	r6, r0
   157c8:	bl	166c4 <__assert_fail@plt+0x5608>
   157cc:	cmp	r0, #0
   157d0:	popne	{r4, r5, r6, sl, fp, pc}
   157d4:	cmp	r6, #0
   157d8:	beq	157ec <__assert_fail@plt+0x4730>
   157dc:	cmp	r5, #0
   157e0:	cmpne	r4, #0
   157e4:	bne	157ec <__assert_fail@plt+0x4730>
   157e8:	pop	{r4, r5, r6, sl, fp, pc}
   157ec:	bl	15c40 <__assert_fail@plt+0x4b84>
   157f0:	push	{fp, lr}
   157f4:	mov	fp, sp
   157f8:	bl	16390 <__assert_fail@plt+0x52d4>
   157fc:	cmp	r0, #0
   15800:	popne	{fp, pc}
   15804:	bl	15c40 <__assert_fail@plt+0x4b84>
   15808:	push	{fp, lr}
   1580c:	mov	fp, sp
   15810:	bl	16390 <__assert_fail@plt+0x52d4>
   15814:	cmp	r0, #0
   15818:	popne	{fp, pc}
   1581c:	bl	15c40 <__assert_fail@plt+0x4b84>
   15820:	push	{fp, lr}
   15824:	mov	fp, sp
   15828:	bl	16390 <__assert_fail@plt+0x52d4>
   1582c:	cmp	r0, #0
   15830:	popne	{fp, pc}
   15834:	bl	15c40 <__assert_fail@plt+0x4b84>
   15838:	push	{r4, r5, fp, lr}
   1583c:	add	fp, sp, #8
   15840:	mov	r4, r1
   15844:	mov	r5, r0
   15848:	bl	163c0 <__assert_fail@plt+0x5304>
   1584c:	cmp	r0, #0
   15850:	popne	{r4, r5, fp, pc}
   15854:	cmp	r5, #0
   15858:	beq	15868 <__assert_fail@plt+0x47ac>
   1585c:	cmp	r4, #0
   15860:	bne	15868 <__assert_fail@plt+0x47ac>
   15864:	pop	{r4, r5, fp, pc}
   15868:	bl	15c40 <__assert_fail@plt+0x4b84>
   1586c:	push	{fp, lr}
   15870:	mov	fp, sp
   15874:	cmp	r1, #0
   15878:	orreq	r1, r1, #1
   1587c:	bl	163c0 <__assert_fail@plt+0x5304>
   15880:	cmp	r0, #0
   15884:	popne	{fp, pc}
   15888:	bl	15c40 <__assert_fail@plt+0x4b84>
   1588c:	push	{fp, lr}
   15890:	mov	fp, sp
   15894:	clz	r3, r2
   15898:	lsr	ip, r3, #5
   1589c:	clz	r3, r1
   158a0:	lsr	r3, r3, #5
   158a4:	orrs	r3, r3, ip
   158a8:	movwne	r1, #1
   158ac:	movwne	r2, #1
   158b0:	bl	166c4 <__assert_fail@plt+0x5608>
   158b4:	cmp	r0, #0
   158b8:	popne	{fp, pc}
   158bc:	bl	15c40 <__assert_fail@plt+0x4b84>
   158c0:	push	{fp, lr}
   158c4:	mov	fp, sp
   158c8:	mov	r2, r1
   158cc:	mov	r1, r0
   158d0:	mov	r0, #0
   158d4:	bl	166c4 <__assert_fail@plt+0x5608>
   158d8:	cmp	r0, #0
   158dc:	popne	{fp, pc}
   158e0:	bl	15c40 <__assert_fail@plt+0x4b84>
   158e4:	mov	r2, r1
   158e8:	mov	r1, r0
   158ec:	mov	r0, #0
   158f0:	b	1588c <__assert_fail@plt+0x47d0>
   158f4:	mov	r2, #1
   158f8:	b	158fc <__assert_fail@plt+0x4840>
   158fc:	push	{r4, r5, fp, lr}
   15900:	add	fp, sp, #8
   15904:	ldr	r5, [r1]
   15908:	mov	r4, r1
   1590c:	cmp	r0, #0
   15910:	beq	15928 <__assert_fail@plt+0x486c>
   15914:	mov	r1, #1
   15918:	add	r1, r1, r5, lsr #1
   1591c:	adds	r5, r5, r1
   15920:	bcc	15940 <__assert_fail@plt+0x4884>
   15924:	bl	15c40 <__assert_fail@plt+0x4b84>
   15928:	cmp	r5, #0
   1592c:	bne	15940 <__assert_fail@plt+0x4884>
   15930:	mov	r1, #64	; 0x40
   15934:	cmp	r2, #64	; 0x40
   15938:	udiv	r5, r1, r2
   1593c:	addhi	r5, r5, #1
   15940:	mov	r1, r5
   15944:	bl	157b4 <__assert_fail@plt+0x46f8>
   15948:	str	r5, [r4]
   1594c:	pop	{r4, r5, fp, pc}
   15950:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15954:	add	fp, sp, #24
   15958:	ldr	r6, [r1]
   1595c:	mov	r8, r1
   15960:	ldr	r4, [fp, #8]
   15964:	add	r1, r6, r6, asr #1
   15968:	cmp	r1, r6
   1596c:	mvnvs	r1, #-2147483648	; 0x80000000
   15970:	cmp	r1, r3
   15974:	mov	r5, r1
   15978:	movgt	r5, r3
   1597c:	cmn	r3, #1
   15980:	movle	r5, r1
   15984:	cmn	r4, #1
   15988:	ble	159a8 <__assert_fail@plt+0x48ec>
   1598c:	cmp	r4, #0
   15990:	beq	159fc <__assert_fail@plt+0x4940>
   15994:	cmn	r5, #1
   15998:	ble	159d0 <__assert_fail@plt+0x4914>
   1599c:	mvn	r7, #-2147483648	; 0x80000000
   159a0:	udiv	r1, r7, r4
   159a4:	b	159c4 <__assert_fail@plt+0x4908>
   159a8:	cmn	r5, #1
   159ac:	ble	159ec <__assert_fail@plt+0x4930>
   159b0:	cmn	r4, #1
   159b4:	beq	159fc <__assert_fail@plt+0x4940>
   159b8:	mov	r1, #-2147483648	; 0x80000000
   159bc:	mvn	r7, #-2147483648	; 0x80000000
   159c0:	sdiv	r1, r1, r4
   159c4:	cmp	r1, r5
   159c8:	bge	159fc <__assert_fail@plt+0x4940>
   159cc:	b	15a0c <__assert_fail@plt+0x4950>
   159d0:	beq	159fc <__assert_fail@plt+0x4940>
   159d4:	mov	r1, #-2147483648	; 0x80000000
   159d8:	mvn	r7, #-2147483648	; 0x80000000
   159dc:	sdiv	r1, r1, r5
   159e0:	cmp	r1, r4
   159e4:	bge	159fc <__assert_fail@plt+0x4940>
   159e8:	b	15a0c <__assert_fail@plt+0x4950>
   159ec:	mvn	r7, #-2147483648	; 0x80000000
   159f0:	sdiv	r1, r7, r4
   159f4:	cmp	r5, r1
   159f8:	blt	15a0c <__assert_fail@plt+0x4950>
   159fc:	mul	r1, r5, r4
   15a00:	mov	r7, #64	; 0x40
   15a04:	cmp	r1, #63	; 0x3f
   15a08:	bgt	15a14 <__assert_fail@plt+0x4958>
   15a0c:	sdiv	r5, r7, r4
   15a10:	mul	r1, r5, r4
   15a14:	cmp	r0, #0
   15a18:	moveq	r7, #0
   15a1c:	streq	r7, [r8]
   15a20:	sub	r7, r5, r6
   15a24:	cmp	r7, r2
   15a28:	bge	15acc <__assert_fail@plt+0x4a10>
   15a2c:	add	r5, r6, r2
   15a30:	mov	r2, #0
   15a34:	mov	r1, #0
   15a38:	cmp	r5, r3
   15a3c:	movwgt	r2, #1
   15a40:	cmn	r3, #1
   15a44:	movwgt	r1, #1
   15a48:	cmp	r5, r6
   15a4c:	bvs	15ab4 <__assert_fail@plt+0x49f8>
   15a50:	ands	r1, r1, r2
   15a54:	bne	15ab4 <__assert_fail@plt+0x49f8>
   15a58:	cmn	r4, #1
   15a5c:	ble	15a7c <__assert_fail@plt+0x49c0>
   15a60:	cmp	r4, #0
   15a64:	beq	15ac8 <__assert_fail@plt+0x4a0c>
   15a68:	cmn	r5, #1
   15a6c:	ble	15aa0 <__assert_fail@plt+0x49e4>
   15a70:	mvn	r1, #-2147483648	; 0x80000000
   15a74:	udiv	r1, r1, r4
   15a78:	b	15a94 <__assert_fail@plt+0x49d8>
   15a7c:	cmn	r5, #1
   15a80:	ble	15ab8 <__assert_fail@plt+0x49fc>
   15a84:	cmn	r4, #1
   15a88:	beq	15ac8 <__assert_fail@plt+0x4a0c>
   15a8c:	mov	r1, #-2147483648	; 0x80000000
   15a90:	sdiv	r1, r1, r4
   15a94:	cmp	r1, r5
   15a98:	bge	15ac8 <__assert_fail@plt+0x4a0c>
   15a9c:	b	15ab4 <__assert_fail@plt+0x49f8>
   15aa0:	beq	15ac8 <__assert_fail@plt+0x4a0c>
   15aa4:	mov	r1, #-2147483648	; 0x80000000
   15aa8:	sdiv	r1, r1, r5
   15aac:	cmp	r1, r4
   15ab0:	bge	15ac8 <__assert_fail@plt+0x4a0c>
   15ab4:	bl	15c40 <__assert_fail@plt+0x4b84>
   15ab8:	mvn	r1, #-2147483648	; 0x80000000
   15abc:	sdiv	r1, r1, r4
   15ac0:	cmp	r5, r1
   15ac4:	blt	15ab4 <__assert_fail@plt+0x49f8>
   15ac8:	mul	r1, r5, r4
   15acc:	bl	15838 <__assert_fail@plt+0x477c>
   15ad0:	str	r5, [r8]
   15ad4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ad8:	push	{fp, lr}
   15adc:	mov	fp, sp
   15ae0:	mov	r1, #1
   15ae4:	bl	1633c <__assert_fail@plt+0x5280>
   15ae8:	cmp	r0, #0
   15aec:	popne	{fp, pc}
   15af0:	bl	15c40 <__assert_fail@plt+0x4b84>
   15af4:	push	{fp, lr}
   15af8:	mov	fp, sp
   15afc:	bl	1633c <__assert_fail@plt+0x5280>
   15b00:	cmp	r0, #0
   15b04:	popne	{fp, pc}
   15b08:	bl	15c40 <__assert_fail@plt+0x4b84>
   15b0c:	push	{fp, lr}
   15b10:	mov	fp, sp
   15b14:	mov	r1, #1
   15b18:	bl	1633c <__assert_fail@plt+0x5280>
   15b1c:	cmp	r0, #0
   15b20:	popne	{fp, pc}
   15b24:	bl	15c40 <__assert_fail@plt+0x4b84>
   15b28:	push	{fp, lr}
   15b2c:	mov	fp, sp
   15b30:	bl	1633c <__assert_fail@plt+0x5280>
   15b34:	cmp	r0, #0
   15b38:	popne	{fp, pc}
   15b3c:	bl	15c40 <__assert_fail@plt+0x4b84>
   15b40:	push	{r4, r5, r6, sl, fp, lr}
   15b44:	add	fp, sp, #16
   15b48:	mov	r5, r0
   15b4c:	mov	r0, r1
   15b50:	mov	r4, r1
   15b54:	bl	16390 <__assert_fail@plt+0x52d4>
   15b58:	cmp	r0, #0
   15b5c:	beq	15b78 <__assert_fail@plt+0x4abc>
   15b60:	mov	r1, r5
   15b64:	mov	r2, r4
   15b68:	mov	r6, r0
   15b6c:	bl	10eac <memcpy@plt>
   15b70:	mov	r0, r6
   15b74:	pop	{r4, r5, r6, sl, fp, pc}
   15b78:	bl	15c40 <__assert_fail@plt+0x4b84>
   15b7c:	push	{r4, r5, r6, sl, fp, lr}
   15b80:	add	fp, sp, #16
   15b84:	mov	r5, r0
   15b88:	mov	r0, r1
   15b8c:	mov	r4, r1
   15b90:	bl	16390 <__assert_fail@plt+0x52d4>
   15b94:	cmp	r0, #0
   15b98:	beq	15bb4 <__assert_fail@plt+0x4af8>
   15b9c:	mov	r1, r5
   15ba0:	mov	r2, r4
   15ba4:	mov	r6, r0
   15ba8:	bl	10eac <memcpy@plt>
   15bac:	mov	r0, r6
   15bb0:	pop	{r4, r5, r6, sl, fp, pc}
   15bb4:	bl	15c40 <__assert_fail@plt+0x4b84>
   15bb8:	push	{r4, r5, r6, sl, fp, lr}
   15bbc:	add	fp, sp, #16
   15bc0:	mov	r5, r0
   15bc4:	add	r0, r1, #1
   15bc8:	mov	r4, r1
   15bcc:	bl	16390 <__assert_fail@plt+0x52d4>
   15bd0:	cmp	r0, #0
   15bd4:	beq	15bfc <__assert_fail@plt+0x4b40>
   15bd8:	mov	r6, r0
   15bdc:	mov	r0, #0
   15be0:	mov	r1, r5
   15be4:	mov	r2, r4
   15be8:	strb	r0, [r6, r4]
   15bec:	mov	r0, r6
   15bf0:	bl	10eac <memcpy@plt>
   15bf4:	mov	r0, r6
   15bf8:	pop	{r4, r5, r6, sl, fp, pc}
   15bfc:	bl	15c40 <__assert_fail@plt+0x4b84>
   15c00:	push	{r4, r5, r6, sl, fp, lr}
   15c04:	add	fp, sp, #16
   15c08:	mov	r4, r0
   15c0c:	bl	10fc0 <strlen@plt>
   15c10:	add	r5, r0, #1
   15c14:	mov	r0, r5
   15c18:	bl	16390 <__assert_fail@plt+0x52d4>
   15c1c:	cmp	r0, #0
   15c20:	beq	15c3c <__assert_fail@plt+0x4b80>
   15c24:	mov	r1, r4
   15c28:	mov	r2, r5
   15c2c:	mov	r6, r0
   15c30:	bl	10eac <memcpy@plt>
   15c34:	mov	r0, r6
   15c38:	pop	{r4, r5, r6, sl, fp, pc}
   15c3c:	bl	15c40 <__assert_fail@plt+0x4b84>
   15c40:	push	{fp, lr}
   15c44:	mov	fp, sp
   15c48:	movw	r0, #37108	; 0x90f4
   15c4c:	movw	r1, #33600	; 0x8340
   15c50:	mov	r2, #5
   15c54:	movt	r0, #2
   15c58:	movt	r1, #1
   15c5c:	ldr	r4, [r0]
   15c60:	mov	r0, #0
   15c64:	bl	10ef4 <dcgettext@plt>
   15c68:	movw	r2, #32563	; 0x7f33
   15c6c:	mov	r3, r0
   15c70:	mov	r0, r4
   15c74:	mov	r1, #0
   15c78:	movt	r2, #1
   15c7c:	bl	10f60 <error@plt>
   15c80:	bl	110a4 <abort@plt>
   15c84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c88:	add	fp, sp, #28
   15c8c:	sub	sp, sp, #20
   15c90:	cmp	r2, #37	; 0x25
   15c94:	bcs	1631c <__assert_fail@plt+0x5260>
   15c98:	mov	r8, r3
   15c9c:	mov	r5, r2
   15ca0:	mov	r6, r1
   15ca4:	mov	r4, r0
   15ca8:	bl	10fd8 <__errno_location@plt>
   15cac:	mov	r7, r0
   15cb0:	mov	r0, #0
   15cb4:	str	r0, [r7]
   15cb8:	bl	10fa8 <__ctype_b_loc@plt>
   15cbc:	ldr	r1, [r0]
   15cc0:	mov	r2, r4
   15cc4:	ldrb	r0, [r2], #1
   15cc8:	add	r3, r1, r0, lsl #1
   15ccc:	ldrb	r3, [r3, #1]
   15cd0:	tst	r3, #32
   15cd4:	bne	15cc4 <__assert_fail@plt+0x4c08>
   15cd8:	add	sl, sp, #16
   15cdc:	cmp	r6, #0
   15ce0:	movne	sl, r6
   15ce4:	mov	r6, #4
   15ce8:	cmp	r0, #45	; 0x2d
   15cec:	beq	16310 <__assert_fail@plt+0x5254>
   15cf0:	mov	r0, r4
   15cf4:	mov	r1, sl
   15cf8:	mov	r2, r5
   15cfc:	str	r8, [sp, #12]
   15d00:	bl	11020 <strtoumax@plt>
   15d04:	ldr	r5, [sl]
   15d08:	cmp	r5, r4
   15d0c:	beq	15d34 <__assert_fail@plt+0x4c78>
   15d10:	mov	r8, r0
   15d14:	ldr	r0, [r7]
   15d18:	mov	r9, r1
   15d1c:	cmp	r0, #0
   15d20:	beq	15d64 <__assert_fail@plt+0x4ca8>
   15d24:	cmp	r0, #34	; 0x22
   15d28:	bne	16310 <__assert_fail@plt+0x5254>
   15d2c:	mov	r6, #1
   15d30:	b	15d68 <__assert_fail@plt+0x4cac>
   15d34:	ldr	r0, [fp, #8]
   15d38:	cmp	r0, #0
   15d3c:	ldrbne	r1, [r4]
   15d40:	cmpne	r1, #0
   15d44:	beq	16310 <__assert_fail@plt+0x5254>
   15d48:	bl	10fcc <strchr@plt>
   15d4c:	cmp	r0, #0
   15d50:	beq	16310 <__assert_fail@plt+0x5254>
   15d54:	mov	r6, #0
   15d58:	mov	r8, #1
   15d5c:	mov	r9, #0
   15d60:	b	15d74 <__assert_fail@plt+0x4cb8>
   15d64:	mov	r6, r0
   15d68:	ldr	r0, [fp, #8]
   15d6c:	cmp	r0, #0
   15d70:	beq	16308 <__assert_fail@plt+0x524c>
   15d74:	ldrb	r7, [r5]
   15d78:	cmp	r7, #0
   15d7c:	beq	16308 <__assert_fail@plt+0x524c>
   15d80:	ldr	r0, [fp, #8]
   15d84:	mov	r1, r7
   15d88:	bl	10fcc <strchr@plt>
   15d8c:	cmp	r0, #0
   15d90:	beq	15e98 <__assert_fail@plt+0x4ddc>
   15d94:	sub	r0, r7, #69	; 0x45
   15d98:	mov	r1, #1
   15d9c:	mov	r3, #0
   15da0:	mov	r4, #1024	; 0x400
   15da4:	cmp	r0, #21
   15da8:	str	r1, [sp, #8]
   15dac:	bhi	15dc4 <__assert_fail@plt+0x4d08>
   15db0:	movw	r2, #35141	; 0x8945
   15db4:	mov	r1, #1
   15db8:	movt	r2, #48	; 0x30
   15dbc:	tst	r2, r1, lsl r0
   15dc0:	bne	15de0 <__assert_fail@plt+0x4d24>
   15dc4:	sub	r0, r7, #103	; 0x67
   15dc8:	cmp	r0, #13
   15dcc:	bhi	15e14 <__assert_fail@plt+0x4d58>
   15dd0:	mov	r1, #1
   15dd4:	movw	r2, #8273	; 0x2051
   15dd8:	tst	r2, r1, lsl r0
   15ddc:	beq	15e14 <__assert_fail@plt+0x4d58>
   15de0:	ldr	r0, [fp, #8]
   15de4:	mov	r1, #48	; 0x30
   15de8:	bl	10fcc <strchr@plt>
   15dec:	cmp	r0, #0
   15df0:	beq	15e10 <__assert_fail@plt+0x4d54>
   15df4:	ldrb	r0, [r5, #1]
   15df8:	cmp	r0, #66	; 0x42
   15dfc:	cmpne	r0, #68	; 0x44
   15e00:	bne	15f28 <__assert_fail@plt+0x4e6c>
   15e04:	mov	r4, #1000	; 0x3e8
   15e08:	mov	r0, #2
   15e0c:	str	r0, [sp, #8]
   15e10:	mov	r3, #0
   15e14:	cmp	r7, #89	; 0x59
   15e18:	stm	sp, {r5, r6}
   15e1c:	bgt	15ea4 <__assert_fail@plt+0x4de8>
   15e20:	sub	r0, r7, #66	; 0x42
   15e24:	cmp	r0, #14
   15e28:	bhi	15f4c <__assert_fail@plt+0x4e90>
   15e2c:	add	r1, pc, #0
   15e30:	ldr	pc, [r1, r0, lsl #2]
   15e34:	andeq	r5, r1, r0, ror lr
   15e38:	strdeq	r6, [r1], -ip
   15e3c:	strdeq	r6, [r1], -ip
   15e40:	andeq	r6, r1, r0, lsl r2
   15e44:	strdeq	r6, [r1], -ip
   15e48:	andeq	r6, r1, r0
   15e4c:	strdeq	r6, [r1], -ip
   15e50:	strdeq	r6, [r1], -ip
   15e54:	strdeq	r6, [r1], -ip
   15e58:	andeq	r6, r1, ip, rrx
   15e5c:	strdeq	r6, [r1], -ip
   15e60:	strheq	r6, [r1], -r0
   15e64:	strdeq	r6, [r1], -ip
   15e68:	strdeq	r6, [r1], -ip
   15e6c:	andeq	r6, r1, ip, ror r2
   15e70:	mov	r1, #0
   15e74:	lsl	r3, r9, #10
   15e78:	lsl	r0, r8, #10
   15e7c:	lsr	r2, r9, #22
   15e80:	cmp	r1, r9, lsr #22
   15e84:	orr	r3, r3, r8, lsr #22
   15e88:	mvnne	r0, #0
   15e8c:	movwne	r2, #1
   15e90:	cmp	r1, r9, lsr #22
   15e94:	b	15f18 <__assert_fail@plt+0x4e5c>
   15e98:	ldr	r0, [sp, #12]
   15e9c:	orr	r6, r6, #2
   15ea0:	b	1630c <__assert_fail@plt+0x5250>
   15ea4:	cmp	r7, #115	; 0x73
   15ea8:	bgt	15fc8 <__assert_fail@plt+0x4f0c>
   15eac:	sub	r0, r7, #98	; 0x62
   15eb0:	cmp	r0, #11
   15eb4:	bhi	16188 <__assert_fail@plt+0x50cc>
   15eb8:	add	r1, pc, #4
   15ebc:	mov	r2, #0
   15ec0:	ldr	pc, [r1, r0, lsl #2]
   15ec4:	strdeq	r5, [r1], -r4
   15ec8:	andeq	r6, r1, r4, ror #5
   15ecc:	strdeq	r6, [r1], -ip
   15ed0:	strdeq	r6, [r1], -ip
   15ed4:	strdeq	r6, [r1], -ip
   15ed8:	andeq	r6, r1, r0
   15edc:	strdeq	r6, [r1], -ip
   15ee0:	strdeq	r6, [r1], -ip
   15ee4:	strdeq	r6, [r1], -ip
   15ee8:	andeq	r6, r1, ip, rrx
   15eec:	strdeq	r6, [r1], -ip
   15ef0:	strheq	r6, [r1], -r0
   15ef4:	mov	r1, #0
   15ef8:	lsl	r3, r9, #9
   15efc:	lsl	r0, r8, #9
   15f00:	lsr	r2, r9, #23
   15f04:	cmp	r1, r9, lsr #23
   15f08:	orr	r3, r3, r8, lsr #23
   15f0c:	mvnne	r0, #0
   15f10:	movwne	r2, #1
   15f14:	cmp	r1, r9, lsr #23
   15f18:	mvnne	r3, #0
   15f1c:	mov	r8, r0
   15f20:	mov	r9, r3
   15f24:	b	162e4 <__assert_fail@plt+0x5228>
   15f28:	cmp	r0, #105	; 0x69
   15f2c:	mov	r3, #0
   15f30:	bne	15e14 <__assert_fail@plt+0x4d58>
   15f34:	ldrb	r0, [r5, #2]
   15f38:	mov	r1, #1
   15f3c:	cmp	r0, #66	; 0x42
   15f40:	movweq	r1, #3
   15f44:	str	r1, [sp, #8]
   15f48:	b	15e14 <__assert_fail@plt+0x4d58>
   15f4c:	cmp	r7, #84	; 0x54
   15f50:	beq	1611c <__assert_fail@plt+0x5060>
   15f54:	cmp	r7, #89	; 0x59
   15f58:	bne	161fc <__assert_fail@plt+0x5140>
   15f5c:	mvn	r0, #0
   15f60:	mvn	r1, #0
   15f64:	mov	r2, r4
   15f68:	mov	r5, r3
   15f6c:	bl	167f8 <__assert_fail@plt+0x573c>
   15f70:	mov	ip, r5
   15f74:	mvn	lr, #0
   15f78:	mov	r2, #0
   15f7c:	mvn	r3, #7
   15f80:	mov	r5, r8
   15f84:	mov	r7, r9
   15f88:	umull	r8, r6, r5, r4
   15f8c:	mvn	r9, #0
   15f90:	mla	r6, r5, ip, r6
   15f94:	subs	r5, r0, r5
   15f98:	sbcs	r5, r1, r7
   15f9c:	mov	r5, #0
   15fa0:	movwcc	r5, #1
   15fa4:	cmp	r5, #0
   15fa8:	mlaeq	r9, r7, r4, r6
   15fac:	movne	r8, lr
   15fb0:	orrne	r2, r2, #1
   15fb4:	adds	r3, r3, #1
   15fb8:	mov	r5, r8
   15fbc:	mov	r7, r9
   15fc0:	bne	15f88 <__assert_fail@plt+0x4ecc>
   15fc4:	b	162e4 <__assert_fail@plt+0x5228>
   15fc8:	cmp	r7, #116	; 0x74
   15fcc:	beq	1611c <__assert_fail@plt+0x5060>
   15fd0:	cmp	r7, #119	; 0x77
   15fd4:	bne	161fc <__assert_fail@plt+0x5140>
   15fd8:	lsl	r1, r9, #1
   15fdc:	lsl	r0, r8, #1
   15fe0:	cmp	r9, #0
   15fe4:	lsr	r2, r9, #31
   15fe8:	orr	r1, r1, r8, lsr #31
   15fec:	mvnlt	r0, #0
   15ff0:	mvnlt	r1, #0
   15ff4:	mov	r8, r0
   15ff8:	mov	r9, r1
   15ffc:	b	162e4 <__assert_fail@plt+0x5228>
   16000:	mvn	r0, #0
   16004:	mvn	r1, #0
   16008:	mov	r2, r4
   1600c:	mov	r5, r3
   16010:	bl	167f8 <__assert_fail@plt+0x573c>
   16014:	mov	ip, r5
   16018:	mvn	lr, #0
   1601c:	mov	r2, #0
   16020:	mvn	r3, #2
   16024:	mov	r6, r8
   16028:	mov	r5, r9
   1602c:	umull	r8, r7, r6, r4
   16030:	mvn	r9, #0
   16034:	mla	r7, r6, ip, r7
   16038:	subs	r6, r0, r6
   1603c:	sbcs	r6, r1, r5
   16040:	mov	r6, #0
   16044:	movwcc	r6, #1
   16048:	cmp	r6, #0
   1604c:	mlaeq	r9, r5, r4, r7
   16050:	movne	r8, lr
   16054:	orrne	r2, r2, #1
   16058:	adds	r3, r3, #1
   1605c:	mov	r6, r8
   16060:	mov	r5, r9
   16064:	bne	1602c <__assert_fail@plt+0x4f70>
   16068:	b	162e4 <__assert_fail@plt+0x5228>
   1606c:	mvn	r0, #0
   16070:	mvn	r1, #0
   16074:	mov	r2, r4
   16078:	mov	r5, r3
   1607c:	bl	167f8 <__assert_fail@plt+0x573c>
   16080:	subs	r0, r0, r8
   16084:	mov	r2, #0
   16088:	sbcs	r0, r1, r9
   1608c:	movwcc	r2, #1
   16090:	umull	r0, r1, r8, r4
   16094:	mla	r1, r8, r5, r1
   16098:	cmp	r2, #0
   1609c:	mla	r9, r9, r4, r1
   160a0:	mvnne	r0, #0
   160a4:	mvnne	r9, #0
   160a8:	mov	r8, r0
   160ac:	b	162e4 <__assert_fail@plt+0x5228>
   160b0:	mvn	r0, #0
   160b4:	mvn	r1, #0
   160b8:	mov	r2, r4
   160bc:	mov	r5, r3
   160c0:	bl	167f8 <__assert_fail@plt+0x573c>
   160c4:	mov	ip, r5
   160c8:	mvn	lr, #0
   160cc:	mov	r2, #0
   160d0:	mvn	r3, #1
   160d4:	mov	r6, r8
   160d8:	mov	r5, r9
   160dc:	umull	r8, r7, r6, r4
   160e0:	mvn	r9, #0
   160e4:	mla	r7, r6, ip, r7
   160e8:	subs	r6, r0, r6
   160ec:	sbcs	r6, r1, r5
   160f0:	mov	r6, #0
   160f4:	movwcc	r6, #1
   160f8:	cmp	r6, #0
   160fc:	mlaeq	r9, r5, r4, r7
   16100:	movne	r8, lr
   16104:	orrne	r2, r2, #1
   16108:	adds	r3, r3, #1
   1610c:	mov	r6, r8
   16110:	mov	r5, r9
   16114:	bne	160dc <__assert_fail@plt+0x5020>
   16118:	b	162e4 <__assert_fail@plt+0x5228>
   1611c:	mvn	r0, #0
   16120:	mvn	r1, #0
   16124:	mov	r2, r4
   16128:	mov	r5, r3
   1612c:	bl	167f8 <__assert_fail@plt+0x573c>
   16130:	mov	ip, r5
   16134:	mvn	lr, #0
   16138:	mov	r2, #0
   1613c:	mvn	r3, #3
   16140:	mov	r6, r8
   16144:	mov	r5, r9
   16148:	umull	r8, r7, r6, r4
   1614c:	mvn	r9, #0
   16150:	mla	r7, r6, ip, r7
   16154:	subs	r6, r0, r6
   16158:	sbcs	r6, r1, r5
   1615c:	mov	r6, #0
   16160:	movwcc	r6, #1
   16164:	cmp	r6, #0
   16168:	mlaeq	r9, r5, r4, r7
   1616c:	movne	r8, lr
   16170:	orrne	r2, r2, #1
   16174:	adds	r3, r3, #1
   16178:	mov	r6, r8
   1617c:	mov	r5, r9
   16180:	bne	16148 <__assert_fail@plt+0x508c>
   16184:	b	162e4 <__assert_fail@plt+0x5228>
   16188:	cmp	r7, #90	; 0x5a
   1618c:	bne	161fc <__assert_fail@plt+0x5140>
   16190:	mvn	r0, #0
   16194:	mvn	r1, #0
   16198:	mov	r2, r4
   1619c:	mov	r5, r3
   161a0:	bl	167f8 <__assert_fail@plt+0x573c>
   161a4:	mov	ip, r5
   161a8:	mvn	lr, #0
   161ac:	mov	r2, #0
   161b0:	mvn	r3, #6
   161b4:	mov	r5, r8
   161b8:	mov	r7, r9
   161bc:	umull	r8, r6, r5, r4
   161c0:	mvn	r9, #0
   161c4:	mla	r6, r5, ip, r6
   161c8:	subs	r5, r0, r5
   161cc:	sbcs	r5, r1, r7
   161d0:	mov	r5, #0
   161d4:	movwcc	r5, #1
   161d8:	cmp	r5, #0
   161dc:	mlaeq	r9, r7, r4, r6
   161e0:	movne	r8, lr
   161e4:	orrne	r2, r2, #1
   161e8:	adds	r3, r3, #1
   161ec:	mov	r5, r8
   161f0:	mov	r7, r9
   161f4:	bne	161bc <__assert_fail@plt+0x5100>
   161f8:	b	162e4 <__assert_fail@plt+0x5228>
   161fc:	ldr	r0, [sp, #12]
   16200:	strd	r8, [r0]
   16204:	ldr	r6, [sp, #4]
   16208:	orr	r6, r6, #2
   1620c:	b	16310 <__assert_fail@plt+0x5254>
   16210:	mvn	r0, #0
   16214:	mvn	r1, #0
   16218:	mov	r2, r4
   1621c:	mov	r5, r3
   16220:	bl	167f8 <__assert_fail@plt+0x573c>
   16224:	mov	ip, r5
   16228:	mvn	lr, #0
   1622c:	mov	r2, #0
   16230:	mvn	r3, #5
   16234:	mov	r5, r8
   16238:	mov	r7, r9
   1623c:	umull	r8, r6, r5, r4
   16240:	mvn	r9, #0
   16244:	mla	r6, r5, ip, r6
   16248:	subs	r5, r0, r5
   1624c:	sbcs	r5, r1, r7
   16250:	mov	r5, #0
   16254:	movwcc	r5, #1
   16258:	cmp	r5, #0
   1625c:	mlaeq	r9, r7, r4, r6
   16260:	movne	r8, lr
   16264:	orrne	r2, r2, #1
   16268:	adds	r3, r3, #1
   1626c:	mov	r5, r8
   16270:	mov	r7, r9
   16274:	bne	1623c <__assert_fail@plt+0x5180>
   16278:	b	162e4 <__assert_fail@plt+0x5228>
   1627c:	mvn	r0, #0
   16280:	mvn	r1, #0
   16284:	mov	r2, r4
   16288:	mov	r5, r3
   1628c:	bl	167f8 <__assert_fail@plt+0x573c>
   16290:	mov	ip, r5
   16294:	mvn	lr, #0
   16298:	mov	r2, #0
   1629c:	mvn	r3, #4
   162a0:	mov	r5, r8
   162a4:	mov	r7, r9
   162a8:	umull	r8, r6, r5, r4
   162ac:	mvn	r9, #0
   162b0:	mla	r6, r5, ip, r6
   162b4:	subs	r5, r0, r5
   162b8:	sbcs	r5, r1, r7
   162bc:	mov	r5, #0
   162c0:	movwcc	r5, #1
   162c4:	cmp	r5, #0
   162c8:	mlaeq	r9, r7, r4, r6
   162cc:	movne	r8, lr
   162d0:	orrne	r2, r2, #1
   162d4:	adds	r3, r3, #1
   162d8:	mov	r5, r8
   162dc:	mov	r7, r9
   162e0:	bne	162a8 <__assert_fail@plt+0x51ec>
   162e4:	ldr	r1, [sp]
   162e8:	ldr	r3, [sp, #8]
   162ec:	ldr	r6, [sp, #4]
   162f0:	add	r0, r1, r3
   162f4:	orr	r6, r2, r6
   162f8:	str	r0, [sl]
   162fc:	ldrb	r0, [r1, r3]
   16300:	cmp	r0, #0
   16304:	orrne	r6, r6, #2
   16308:	ldr	r0, [sp, #12]
   1630c:	strd	r8, [r0]
   16310:	mov	r0, r6
   16314:	sub	sp, fp, #28
   16318:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1631c:	movw	r0, #33617	; 0x8351
   16320:	movw	r1, #33655	; 0x8377
   16324:	movw	r3, #33671	; 0x8387
   16328:	mov	r2, #85	; 0x55
   1632c:	movt	r0, #1
   16330:	movt	r1, #1
   16334:	movt	r3, #1
   16338:	bl	110bc <__assert_fail@plt>
   1633c:	clz	r2, r1
   16340:	clz	r3, r0
   16344:	lsr	r2, r2, #5
   16348:	lsr	r3, r3, #5
   1634c:	orrs	r2, r3, r2
   16350:	movwne	r1, #1
   16354:	movwne	r0, #1
   16358:	cmp	r1, #0
   1635c:	beq	1638c <__assert_fail@plt+0x52d0>
   16360:	mvn	r2, #-2147483648	; 0x80000000
   16364:	udiv	r2, r2, r1
   16368:	cmp	r2, r0
   1636c:	bcs	1638c <__assert_fail@plt+0x52d0>
   16370:	push	{fp, lr}
   16374:	mov	fp, sp
   16378:	bl	10fd8 <__errno_location@plt>
   1637c:	mov	r1, #12
   16380:	str	r1, [r0]
   16384:	mov	r0, #0
   16388:	pop	{fp, pc}
   1638c:	b	10e40 <calloc@plt>
   16390:	cmp	r0, #0
   16394:	movweq	r0, #1
   16398:	cmn	r0, #1
   1639c:	ble	163a4 <__assert_fail@plt+0x52e8>
   163a0:	b	10f6c <malloc@plt>
   163a4:	push	{fp, lr}
   163a8:	mov	fp, sp
   163ac:	bl	10fd8 <__errno_location@plt>
   163b0:	mov	r1, #12
   163b4:	str	r1, [r0]
   163b8:	mov	r0, #0
   163bc:	pop	{fp, pc}
   163c0:	push	{fp, lr}
   163c4:	mov	fp, sp
   163c8:	cmp	r0, #0
   163cc:	beq	163e8 <__assert_fail@plt+0x532c>
   163d0:	cmp	r1, #0
   163d4:	beq	163f4 <__assert_fail@plt+0x5338>
   163d8:	cmn	r1, #1
   163dc:	ble	163fc <__assert_fail@plt+0x5340>
   163e0:	pop	{fp, lr}
   163e4:	b	10f00 <realloc@plt>
   163e8:	mov	r0, r1
   163ec:	pop	{fp, lr}
   163f0:	b	16390 <__assert_fail@plt+0x52d4>
   163f4:	bl	1376c <__assert_fail@plt+0x26b0>
   163f8:	b	16408 <__assert_fail@plt+0x534c>
   163fc:	bl	10fd8 <__errno_location@plt>
   16400:	mov	r1, #12
   16404:	str	r1, [r0]
   16408:	mov	r0, #0
   1640c:	pop	{fp, pc}
   16410:	push	{r4, r5, r6, sl, fp, lr}
   16414:	add	fp, sp, #16
   16418:	mov	r4, r0
   1641c:	bl	10f3c <__fpending@plt>
   16420:	mov	r5, r0
   16424:	mov	r0, r4
   16428:	bl	10f48 <ferror_unlocked@plt>
   1642c:	mov	r6, r0
   16430:	mov	r0, r4
   16434:	bl	16490 <__assert_fail@plt+0x53d4>
   16438:	cmp	r6, #0
   1643c:	beq	1645c <__assert_fail@plt+0x53a0>
   16440:	mvn	r4, #0
   16444:	cmp	r0, #0
   16448:	bne	16488 <__assert_fail@plt+0x53cc>
   1644c:	bl	10fd8 <__errno_location@plt>
   16450:	mov	r1, #0
   16454:	str	r1, [r0]
   16458:	b	16488 <__assert_fail@plt+0x53cc>
   1645c:	cmp	r0, #0
   16460:	mov	r4, r0
   16464:	mvnne	r4, #0
   16468:	cmp	r5, #0
   1646c:	bne	16488 <__assert_fail@plt+0x53cc>
   16470:	cmp	r0, #0
   16474:	beq	16488 <__assert_fail@plt+0x53cc>
   16478:	bl	10fd8 <__errno_location@plt>
   1647c:	ldr	r0, [r0]
   16480:	subs	r4, r0, #9
   16484:	mvnne	r4, #0
   16488:	mov	r0, r4
   1648c:	pop	{r4, r5, r6, sl, fp, pc}
   16490:	push	{r4, r5, r6, sl, fp, lr}
   16494:	add	fp, sp, #16
   16498:	sub	sp, sp, #8
   1649c:	mov	r4, r0
   164a0:	bl	11014 <fileno@plt>
   164a4:	cmn	r0, #1
   164a8:	ble	1651c <__assert_fail@plt+0x5460>
   164ac:	mov	r0, r4
   164b0:	bl	10f84 <__freading@plt>
   164b4:	cmp	r0, #0
   164b8:	beq	164e4 <__assert_fail@plt+0x5428>
   164bc:	mov	r0, r4
   164c0:	bl	11014 <fileno@plt>
   164c4:	mov	r1, #1
   164c8:	mov	r2, #0
   164cc:	mov	r3, #0
   164d0:	str	r1, [sp]
   164d4:	bl	10f24 <lseek64@plt>
   164d8:	and	r0, r0, r1
   164dc:	cmn	r0, #1
   164e0:	beq	1651c <__assert_fail@plt+0x5460>
   164e4:	mov	r0, r4
   164e8:	bl	1652c <__assert_fail@plt+0x5470>
   164ec:	cmp	r0, #0
   164f0:	beq	1651c <__assert_fail@plt+0x5460>
   164f4:	bl	10fd8 <__errno_location@plt>
   164f8:	ldr	r6, [r0]
   164fc:	mov	r5, r0
   16500:	mov	r0, r4
   16504:	bl	11038 <fclose@plt>
   16508:	cmp	r6, #0
   1650c:	strne	r6, [r5]
   16510:	mvnne	r0, #0
   16514:	sub	sp, fp, #16
   16518:	pop	{r4, r5, r6, sl, fp, pc}
   1651c:	mov	r0, r4
   16520:	sub	sp, fp, #16
   16524:	pop	{r4, r5, r6, sl, fp, lr}
   16528:	b	11038 <fclose@plt>
   1652c:	push	{r4, sl, fp, lr}
   16530:	add	fp, sp, #8
   16534:	sub	sp, sp, #8
   16538:	mov	r4, r0
   1653c:	cmp	r0, #0
   16540:	beq	1655c <__assert_fail@plt+0x54a0>
   16544:	mov	r0, r4
   16548:	bl	10f84 <__freading@plt>
   1654c:	cmp	r0, #0
   16550:	ldrbne	r0, [r4, #1]
   16554:	tstne	r0, #1
   16558:	bne	1656c <__assert_fail@plt+0x54b0>
   1655c:	mov	r0, r4
   16560:	sub	sp, fp, #8
   16564:	pop	{r4, sl, fp, lr}
   16568:	b	10e88 <fflush@plt>
   1656c:	mov	r0, #1
   16570:	mov	r2, #0
   16574:	mov	r3, #0
   16578:	str	r0, [sp]
   1657c:	mov	r0, r4
   16580:	bl	16588 <__assert_fail@plt+0x54cc>
   16584:	b	1655c <__assert_fail@plt+0x54a0>
   16588:	push	{r4, r5, r6, r7, fp, lr}
   1658c:	add	fp, sp, #16
   16590:	sub	sp, sp, #8
   16594:	mov	r4, r0
   16598:	ldr	r0, [r0, #4]
   1659c:	mov	r5, r3
   165a0:	mov	r6, r2
   165a4:	ldr	r1, [r4, #8]
   165a8:	cmp	r1, r0
   165ac:	bne	165c8 <__assert_fail@plt+0x550c>
   165b0:	ldrd	r0, [r4, #16]
   165b4:	cmp	r1, r0
   165b8:	bne	165c8 <__assert_fail@plt+0x550c>
   165bc:	ldr	r0, [r4, #36]	; 0x24
   165c0:	cmp	r0, #0
   165c4:	beq	165e0 <__assert_fail@plt+0x5524>
   165c8:	mov	r0, r4
   165cc:	mov	r2, r6
   165d0:	mov	r3, r5
   165d4:	sub	sp, fp, #16
   165d8:	pop	{r4, r5, r6, r7, fp, lr}
   165dc:	b	11044 <fseeko64@plt>
   165e0:	ldr	r7, [fp, #8]
   165e4:	mov	r0, r4
   165e8:	bl	11014 <fileno@plt>
   165ec:	mov	r2, r6
   165f0:	mov	r3, r5
   165f4:	str	r7, [sp]
   165f8:	bl	10f24 <lseek64@plt>
   165fc:	and	r2, r0, r1
   16600:	cmn	r2, #1
   16604:	beq	16620 <__assert_fail@plt+0x5564>
   16608:	strd	r0, [r4, #80]	; 0x50
   1660c:	ldr	r0, [r4]
   16610:	bic	r0, r0, #16
   16614:	str	r0, [r4]
   16618:	mov	r0, #0
   1661c:	b	16624 <__assert_fail@plt+0x5568>
   16620:	mvn	r0, #0
   16624:	sub	sp, fp, #16
   16628:	pop	{r4, r5, r6, r7, fp, pc}
   1662c:	push	{fp, lr}
   16630:	mov	fp, sp
   16634:	mov	r0, #14
   16638:	bl	11074 <nl_langinfo@plt>
   1663c:	movw	r1, #30199	; 0x75f7
   16640:	cmp	r0, #0
   16644:	movt	r1, #1
   16648:	movne	r1, r0
   1664c:	movw	r0, #33750	; 0x83d6
   16650:	ldrb	r2, [r1]
   16654:	movt	r0, #1
   16658:	cmp	r2, #0
   1665c:	movne	r0, r1
   16660:	pop	{fp, pc}
   16664:	push	{r4, r5, r6, r7, fp, lr}
   16668:	add	fp, sp, #16
   1666c:	sub	sp, sp, #8
   16670:	add	r5, sp, #4
   16674:	cmp	r0, #0
   16678:	mov	r7, r2
   1667c:	mov	r4, r1
   16680:	movne	r5, r0
   16684:	mov	r0, r5
   16688:	bl	10f54 <mbrtowc@plt>
   1668c:	mov	r6, r0
   16690:	cmp	r7, #0
   16694:	beq	166b8 <__assert_fail@plt+0x55fc>
   16698:	cmn	r6, #2
   1669c:	bcc	166b8 <__assert_fail@plt+0x55fc>
   166a0:	mov	r0, #0
   166a4:	bl	16700 <__assert_fail@plt+0x5644>
   166a8:	cmp	r0, #0
   166ac:	ldrbeq	r0, [r4]
   166b0:	moveq	r6, #1
   166b4:	streq	r0, [r5]
   166b8:	mov	r0, r6
   166bc:	sub	sp, fp, #16
   166c0:	pop	{r4, r5, r6, r7, fp, pc}
   166c4:	cmp	r2, #0
   166c8:	beq	166f8 <__assert_fail@plt+0x563c>
   166cc:	mvn	r3, #0
   166d0:	udiv	r3, r3, r2
   166d4:	cmp	r3, r1
   166d8:	bcs	166f8 <__assert_fail@plt+0x563c>
   166dc:	push	{fp, lr}
   166e0:	mov	fp, sp
   166e4:	bl	10fd8 <__errno_location@plt>
   166e8:	mov	r1, #12
   166ec:	str	r1, [r0]
   166f0:	mov	r0, #0
   166f4:	pop	{fp, pc}
   166f8:	mul	r1, r2, r1
   166fc:	b	163c0 <__assert_fail@plt+0x5304>
   16700:	push	{r4, sl, fp, lr}
   16704:	add	fp, sp, #8
   16708:	sub	sp, sp, #264	; 0x108
   1670c:	add	r1, sp, #7
   16710:	movw	r2, #257	; 0x101
   16714:	bl	16764 <__assert_fail@plt+0x56a8>
   16718:	mov	r4, #0
   1671c:	cmp	r0, #0
   16720:	bne	16758 <__assert_fail@plt+0x569c>
   16724:	movw	r1, #29509	; 0x7345
   16728:	add	r0, sp, #7
   1672c:	movt	r1, #1
   16730:	bl	10e64 <strcmp@plt>
   16734:	cmp	r0, #0
   16738:	beq	16758 <__assert_fail@plt+0x569c>
   1673c:	movw	r1, #33756	; 0x83dc
   16740:	add	r0, sp, #7
   16744:	movt	r1, #1
   16748:	bl	10e64 <strcmp@plt>
   1674c:	mov	r4, r0
   16750:	cmp	r0, #0
   16754:	movwne	r4, #1
   16758:	mov	r0, r4
   1675c:	sub	sp, fp, #8
   16760:	pop	{r4, sl, fp, pc}
   16764:	push	{r4, r5, r6, r7, fp, lr}
   16768:	add	fp, sp, #16
   1676c:	mov	r4, r1
   16770:	mov	r1, #0
   16774:	mov	r6, r2
   16778:	bl	11050 <setlocale@plt>
   1677c:	cmp	r0, #0
   16780:	beq	167ac <__assert_fail@plt+0x56f0>
   16784:	mov	r7, r0
   16788:	bl	10fc0 <strlen@plt>
   1678c:	cmp	r0, r6
   16790:	bcs	167c0 <__assert_fail@plt+0x5704>
   16794:	add	r2, r0, #1
   16798:	mov	r0, r4
   1679c:	mov	r1, r7
   167a0:	bl	10eac <memcpy@plt>
   167a4:	mov	r5, #0
   167a8:	b	167e8 <__assert_fail@plt+0x572c>
   167ac:	cmp	r6, #0
   167b0:	mov	r5, #22
   167b4:	movne	r0, #0
   167b8:	strbne	r0, [r4]
   167bc:	b	167e8 <__assert_fail@plt+0x572c>
   167c0:	mov	r5, #34	; 0x22
   167c4:	cmp	r6, #0
   167c8:	beq	167e8 <__assert_fail@plt+0x572c>
   167cc:	sub	r6, r6, #1
   167d0:	mov	r0, r4
   167d4:	mov	r1, r7
   167d8:	mov	r2, r6
   167dc:	bl	10eac <memcpy@plt>
   167e0:	mov	r0, #0
   167e4:	strb	r0, [r4, r6]
   167e8:	mov	r0, r5
   167ec:	pop	{r4, r5, r6, r7, fp, pc}
   167f0:	mov	r1, #0
   167f4:	b	11050 <setlocale@plt>
   167f8:	cmp	r3, #0
   167fc:	cmpeq	r2, #0
   16800:	bne	16818 <__assert_fail@plt+0x575c>
   16804:	cmp	r1, #0
   16808:	cmpeq	r0, #0
   1680c:	mvnne	r1, #0
   16810:	mvnne	r0, #0
   16814:	b	16834 <__assert_fail@plt+0x5778>
   16818:	sub	sp, sp, #8
   1681c:	push	{sp, lr}
   16820:	bl	16844 <__assert_fail@plt+0x5788>
   16824:	ldr	lr, [sp, #4]
   16828:	add	sp, sp, #8
   1682c:	pop	{r2, r3}
   16830:	bx	lr
   16834:	push	{r1, lr}
   16838:	mov	r0, #8
   1683c:	bl	10e58 <raise@plt>
   16840:	pop	{r1, pc}
   16844:	cmp	r1, r3
   16848:	cmpeq	r0, r2
   1684c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16850:	mov	r4, r0
   16854:	movcc	r0, #0
   16858:	mov	r5, r1
   1685c:	ldr	lr, [sp, #36]	; 0x24
   16860:	movcc	r1, r0
   16864:	bcc	16960 <__assert_fail@plt+0x58a4>
   16868:	cmp	r3, #0
   1686c:	clzeq	ip, r2
   16870:	clzne	ip, r3
   16874:	addeq	ip, ip, #32
   16878:	cmp	r5, #0
   1687c:	clzeq	r1, r4
   16880:	addeq	r1, r1, #32
   16884:	clzne	r1, r5
   16888:	sub	ip, ip, r1
   1688c:	sub	sl, ip, #32
   16890:	lsl	r9, r3, ip
   16894:	rsb	fp, ip, #32
   16898:	orr	r9, r9, r2, lsl sl
   1689c:	orr	r9, r9, r2, lsr fp
   168a0:	lsl	r8, r2, ip
   168a4:	cmp	r5, r9
   168a8:	cmpeq	r4, r8
   168ac:	movcc	r0, #0
   168b0:	movcc	r1, r0
   168b4:	bcc	168d0 <__assert_fail@plt+0x5814>
   168b8:	mov	r0, #1
   168bc:	subs	r4, r4, r8
   168c0:	lsl	r1, r0, sl
   168c4:	orr	r1, r1, r0, lsr fp
   168c8:	lsl	r0, r0, ip
   168cc:	sbc	r5, r5, r9
   168d0:	cmp	ip, #0
   168d4:	beq	16960 <__assert_fail@plt+0x58a4>
   168d8:	lsr	r6, r8, #1
   168dc:	orr	r6, r6, r9, lsl #31
   168e0:	lsr	r7, r9, #1
   168e4:	mov	r2, ip
   168e8:	b	1690c <__assert_fail@plt+0x5850>
   168ec:	subs	r3, r4, r6
   168f0:	sbc	r8, r5, r7
   168f4:	adds	r3, r3, r3
   168f8:	adc	r8, r8, r8
   168fc:	adds	r4, r3, #1
   16900:	adc	r5, r8, #0
   16904:	subs	r2, r2, #1
   16908:	beq	16928 <__assert_fail@plt+0x586c>
   1690c:	cmp	r5, r7
   16910:	cmpeq	r4, r6
   16914:	bcs	168ec <__assert_fail@plt+0x5830>
   16918:	adds	r4, r4, r4
   1691c:	adc	r5, r5, r5
   16920:	subs	r2, r2, #1
   16924:	bne	1690c <__assert_fail@plt+0x5850>
   16928:	lsr	r3, r4, ip
   1692c:	orr	r3, r3, r5, lsl fp
   16930:	lsr	r2, r5, ip
   16934:	orr	r3, r3, r5, lsr sl
   16938:	adds	r0, r0, r4
   1693c:	mov	r4, r3
   16940:	lsl	r3, r2, ip
   16944:	orr	r3, r3, r4, lsl sl
   16948:	lsl	ip, r4, ip
   1694c:	orr	r3, r3, r4, lsr fp
   16950:	adc	r1, r1, r5
   16954:	subs	r0, r0, ip
   16958:	mov	r5, r2
   1695c:	sbc	r1, r1, r3
   16960:	cmp	lr, #0
   16964:	strdne	r4, [lr]
   16968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1696c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16970:	mov	r7, r0
   16974:	ldr	r6, [pc, #72]	; 169c4 <__assert_fail@plt+0x5908>
   16978:	ldr	r5, [pc, #72]	; 169c8 <__assert_fail@plt+0x590c>
   1697c:	add	r6, pc, r6
   16980:	add	r5, pc, r5
   16984:	sub	r6, r6, r5
   16988:	mov	r8, r1
   1698c:	mov	r9, r2
   16990:	bl	10e20 <calloc@plt-0x20>
   16994:	asrs	r6, r6, #2
   16998:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1699c:	mov	r4, #0
   169a0:	add	r4, r4, #1
   169a4:	ldr	r3, [r5], #4
   169a8:	mov	r2, r9
   169ac:	mov	r1, r8
   169b0:	mov	r0, r7
   169b4:	blx	r3
   169b8:	cmp	r6, r4
   169bc:	bne	169a0 <__assert_fail@plt+0x58e4>
   169c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   169c4:	andeq	r2, r1, r8, lsl #11
   169c8:	andeq	r2, r1, r0, lsl #11
   169cc:	bx	lr
   169d0:	ldr	r3, [pc, #12]	; 169e4 <__assert_fail@plt+0x5928>
   169d4:	mov	r1, #0
   169d8:	add	r3, pc, r3
   169dc:	ldr	r2, [r3]
   169e0:	b	10ff0 <__cxa_atexit@plt>
   169e4:	andeq	r2, r1, ip, lsl #14

Disassembly of section .fini:

000169e8 <.fini>:
   169e8:	push	{r3, lr}
   169ec:	pop	{r3, pc}
