
../repos/coreutils/src/chroot:     file format elf32-littlearm


Disassembly of section .init:

00010e94 <.init>:
   10e94:	push	{r3, lr}
   10e98:	bl	118b8 <__assert_fail@plt+0x710>
   10e9c:	pop	{r3, pc}

Disassembly of section .plt:

00010ea0 <calloc@plt-0x14>:
   10ea0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea4:	ldr	lr, [pc, #4]	; 10eb0 <calloc@plt-0x4>
   10ea8:	add	lr, pc, lr
   10eac:	ldr	pc, [lr, #8]!
   10eb0:	andeq	sl, r1, r0, asr r1

00010eb4 <calloc@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #106496	; 0x1a000
   10ebc:	ldr	pc, [ip, #336]!	; 0x150

00010ec0 <endgrent@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #106496	; 0x1a000
   10ec8:	ldr	pc, [ip, #328]!	; 0x148

00010ecc <fputs_unlocked@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #106496	; 0x1a000
   10ed4:	ldr	pc, [ip, #320]!	; 0x140

00010ed8 <raise@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #106496	; 0x1a000
   10ee0:	ldr	pc, [ip, #312]!	; 0x138

00010ee4 <getpwnam@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #106496	; 0x1a000
   10eec:	ldr	pc, [ip, #304]!	; 0x130

00010ef0 <strcmp@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #106496	; 0x1a000
   10ef8:	ldr	pc, [ip, #296]!	; 0x128

00010efc <getpwuid@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #106496	; 0x1a000
   10f04:	ldr	pc, [ip, #288]!	; 0x120

00010f08 <fflush@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #106496	; 0x1a000
   10f10:	ldr	pc, [ip, #280]!	; 0x118

00010f14 <free@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #106496	; 0x1a000
   10f1c:	ldr	pc, [ip, #272]!	; 0x110

00010f20 <_exit@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #106496	; 0x1a000
   10f28:	ldr	pc, [ip, #264]!	; 0x108

00010f2c <memcpy@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #106496	; 0x1a000
   10f34:	ldr	pc, [ip, #256]!	; 0x100

00010f38 <execvp@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #106496	; 0x1a000
   10f40:	ldr	pc, [ip, #248]!	; 0xf8

00010f44 <__strtoull_internal@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #106496	; 0x1a000
   10f4c:	ldr	pc, [ip, #240]!	; 0xf0

00010f50 <mbsinit@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #106496	; 0x1a000
   10f58:	ldr	pc, [ip, #232]!	; 0xe8

00010f5c <memcmp@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #106496	; 0x1a000
   10f64:	ldr	pc, [ip, #224]!	; 0xe0

00010f68 <fputc_unlocked@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #106496	; 0x1a000
   10f70:	ldr	pc, [ip, #216]!	; 0xd8

00010f74 <dcgettext@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #106496	; 0x1a000
   10f7c:	ldr	pc, [ip, #208]!	; 0xd0

00010f80 <realloc@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #106496	; 0x1a000
   10f88:	ldr	pc, [ip, #200]!	; 0xc8

00010f8c <textdomain@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #106496	; 0x1a000
   10f94:	ldr	pc, [ip, #192]!	; 0xc0

00010f98 <chdir@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #106496	; 0x1a000
   10fa0:	ldr	pc, [ip, #184]!	; 0xb8

00010fa4 <iswprint@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #106496	; 0x1a000
   10fac:	ldr	pc, [ip, #176]!	; 0xb0

00010fb0 <setgroups@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #106496	; 0x1a000
   10fb8:	ldr	pc, [ip, #168]!	; 0xa8

00010fbc <fwrite@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #106496	; 0x1a000
   10fc4:	ldr	pc, [ip, #160]!	; 0xa0

00010fc8 <lseek64@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #106496	; 0x1a000
   10fd0:	ldr	pc, [ip, #152]!	; 0x98

00010fd4 <__ctype_get_mb_cur_max@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #106496	; 0x1a000
   10fdc:	ldr	pc, [ip, #144]!	; 0x90

00010fe0 <chroot@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #106496	; 0x1a000
   10fe8:	ldr	pc, [ip, #136]!	; 0x88

00010fec <__fpending@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #106496	; 0x1a000
   10ff4:	ldr	pc, [ip, #128]!	; 0x80

00010ff8 <mbrtowc@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #106496	; 0x1a000
   11000:	ldr	pc, [ip, #120]!	; 0x78

00011004 <error@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #106496	; 0x1a000
   1100c:	ldr	pc, [ip, #112]!	; 0x70

00011010 <getenv@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #106496	; 0x1a000
   11018:	ldr	pc, [ip, #104]!	; 0x68

0001101c <setgid@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #106496	; 0x1a000
   11024:	ldr	pc, [ip, #96]!	; 0x60

00011028 <malloc@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #106496	; 0x1a000
   11030:	ldr	pc, [ip, #88]!	; 0x58

00011034 <__libc_start_main@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #106496	; 0x1a000
   1103c:	ldr	pc, [ip, #80]!	; 0x50

00011040 <__freading@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #106496	; 0x1a000
   11048:	ldr	pc, [ip, #72]!	; 0x48

0001104c <__gmon_start__@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #106496	; 0x1a000
   11054:	ldr	pc, [ip, #64]!	; 0x40

00011058 <getopt_long@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #106496	; 0x1a000
   11060:	ldr	pc, [ip, #56]!	; 0x38

00011064 <__ctype_b_loc@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #106496	; 0x1a000
   1106c:	ldr	pc, [ip, #48]!	; 0x30

00011070 <exit@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #106496	; 0x1a000
   11078:	ldr	pc, [ip, #40]!	; 0x28

0001107c <strtoul@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #106496	; 0x1a000
   11084:	ldr	pc, [ip, #32]!

00011088 <strlen@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #106496	; 0x1a000
   11090:	ldr	pc, [ip, #24]!

00011094 <strchr@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #106496	; 0x1a000
   1109c:	ldr	pc, [ip, #16]!

000110a0 <__errno_location@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #106496	; 0x1a000
   110a8:	ldr	pc, [ip, #8]!

000110ac <__cxa_atexit@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #106496	; 0x1a000
   110b4:	ldr	pc, [ip, #0]!

000110b8 <getgrouplist@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #102400	; 0x19000
   110c0:	ldr	pc, [ip, #4088]!	; 0xff8

000110c4 <memset@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #102400	; 0x19000
   110cc:	ldr	pc, [ip, #4080]!	; 0xff0

000110d0 <__printf_chk@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #102400	; 0x19000
   110d8:	ldr	pc, [ip, #4072]!	; 0xfe8

000110dc <fileno@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #102400	; 0x19000
   110e4:	ldr	pc, [ip, #4064]!	; 0xfe0

000110e8 <__fprintf_chk@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #102400	; 0x19000
   110f0:	ldr	pc, [ip, #4056]!	; 0xfd8

000110f4 <fclose@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #102400	; 0x19000
   110fc:	ldr	pc, [ip, #4048]!	; 0xfd0

00011100 <fseeko64@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #102400	; 0x19000
   11108:	ldr	pc, [ip, #4040]!	; 0xfc8

0001110c <strtok@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #102400	; 0x19000
   11114:	ldr	pc, [ip, #4032]!	; 0xfc0

00011118 <setlocale@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #102400	; 0x19000
   11120:	ldr	pc, [ip, #4024]!	; 0xfb8

00011124 <endpwent@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #102400	; 0x19000
   1112c:	ldr	pc, [ip, #4016]!	; 0xfb0

00011130 <strrchr@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #102400	; 0x19000
   11138:	ldr	pc, [ip, #4008]!	; 0xfa8

0001113c <nl_langinfo@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #102400	; 0x19000
   11144:	ldr	pc, [ip, #4000]!	; 0xfa0

00011148 <setuid@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #102400	; 0x19000
   11150:	ldr	pc, [ip, #3992]!	; 0xf98

00011154 <getgroups@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #102400	; 0x19000
   1115c:	ldr	pc, [ip, #3984]!	; 0xf90

00011160 <canonicalize_file_name@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #102400	; 0x19000
   11168:	ldr	pc, [ip, #3976]!	; 0xf88

0001116c <bindtextdomain@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #102400	; 0x19000
   11174:	ldr	pc, [ip, #3968]!	; 0xf80

00011178 <strncmp@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #102400	; 0x19000
   11180:	ldr	pc, [ip, #3960]!	; 0xf78

00011184 <abort@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #102400	; 0x19000
   1118c:	ldr	pc, [ip, #3952]!	; 0xf70

00011190 <getgrgid@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #102400	; 0x19000
   11198:	ldr	pc, [ip, #3944]!	; 0xf68

0001119c <getgrnam@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #102400	; 0x19000
   111a4:	ldr	pc, [ip, #3936]!	; 0xf60

000111a8 <__assert_fail@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #102400	; 0x19000
   111b0:	ldr	pc, [ip, #3928]!	; 0xf58

Disassembly of section .text:

000111b8 <.text>:
   111b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111bc:	sub	sp, sp, #44	; 0x2c
   111c0:	mvn	r3, #0
   111c4:	mov	r4, #0
   111c8:	mov	r7, r0
   111cc:	ldr	r0, [r1]
   111d0:	str	r3, [sp, #20]
   111d4:	str	r3, [sp, #24]
   111d8:	mov	r6, r1
   111dc:	str	r4, [sp, #28]
   111e0:	str	r4, [sp, #32]
   111e4:	bl	12090 <__assert_fail@plt+0xee8>
   111e8:	ldr	r1, [pc, #1552]	; 11800 <__assert_fail@plt+0x658>
   111ec:	mov	r0, #6
   111f0:	bl	11118 <setlocale@plt>
   111f4:	ldr	r1, [pc, #1544]	; 11804 <__assert_fail@plt+0x65c>
   111f8:	ldr	r0, [pc, #1544]	; 11808 <__assert_fail@plt+0x660>
   111fc:	bl	1116c <bindtextdomain@plt>
   11200:	ldr	r0, [pc, #1536]	; 11808 <__assert_fail@plt+0x660>
   11204:	bl	10f8c <textdomain@plt>
   11208:	ldr	r3, [pc, #1532]	; 1180c <__assert_fail@plt+0x664>
   1120c:	mov	r2, #125	; 0x7d
   11210:	ldr	r0, [pc, #1528]	; 11810 <__assert_fail@plt+0x668>
   11214:	str	r4, [sp, #12]
   11218:	str	r2, [r3]
   1121c:	bl	1996c <__assert_fail@plt+0x87c4>
   11220:	ldr	r9, [pc, #1516]	; 11814 <__assert_fail@plt+0x66c>
   11224:	ldr	r8, [pc, #1516]	; 11818 <__assert_fail@plt+0x670>
   11228:	ldr	fp, [pc, #1516]	; 1181c <__assert_fail@plt+0x674>
   1122c:	mov	sl, r4
   11230:	mov	r5, #0
   11234:	str	r5, [sp]
   11238:	mov	r3, r9
   1123c:	mov	r2, r8
   11240:	mov	r1, r6
   11244:	mov	r0, r7
   11248:	bl	11058 <getopt_long@plt>
   1124c:	cmn	r0, #1
   11250:	beq	11328 <__assert_fail@plt+0x180>
   11254:	cmp	r0, #256	; 0x100
   11258:	beq	11318 <__assert_fail@plt+0x170>
   1125c:	bgt	11278 <__assert_fail@plt+0xd0>
   11260:	cmn	r0, #3
   11264:	beq	11294 <__assert_fail@plt+0xec>
   11268:	cmn	r0, #2
   1126c:	bne	11310 <__assert_fail@plt+0x168>
   11270:	mov	r0, r5
   11274:	bl	11bdc <__assert_fail@plt+0xa34>
   11278:	cmp	r0, fp
   1127c:	beq	112c4 <__assert_fail@plt+0x11c>
   11280:	ldr	r3, [pc, #1432]	; 11820 <__assert_fail@plt+0x678>
   11284:	cmp	r0, r3
   11288:	bne	11310 <__assert_fail@plt+0x168>
   1128c:	mov	r4, #1
   11290:	b	11230 <__assert_fail@plt+0x88>
   11294:	ldr	r1, [pc, #1416]	; 11824 <__assert_fail@plt+0x67c>
   11298:	ldr	r3, [pc, #1416]	; 11828 <__assert_fail@plt+0x680>
   1129c:	ldr	r2, [pc, #1416]	; 1182c <__assert_fail@plt+0x684>
   112a0:	str	r5, [sp, #4]
   112a4:	ldr	r0, [r1]
   112a8:	ldr	r3, [r3]
   112ac:	ldr	r1, [pc, #1404]	; 11830 <__assert_fail@plt+0x688>
   112b0:	str	r2, [sp]
   112b4:	ldr	r2, [pc, #1400]	; 11834 <__assert_fail@plt+0x68c>
   112b8:	bl	16f8c <__assert_fail@plt+0x5de4>
   112bc:	mov	r0, r5
   112c0:	bl	11070 <exit@plt>
   112c4:	ldr	r3, [pc, #1388]	; 11838 <__assert_fail@plt+0x690>
   112c8:	ldr	sl, [r3]
   112cc:	mov	r0, sl
   112d0:	bl	11088 <strlen@plt>
   112d4:	cmp	r0, #0
   112d8:	beq	11230 <__assert_fail@plt+0x88>
   112dc:	sub	r0, r0, #1
   112e0:	ldrb	r3, [sl, r0]
   112e4:	cmp	r3, #58	; 0x3a
   112e8:	strbeq	r5, [sl, r0]
   112ec:	b	11230 <__assert_fail@plt+0x88>
   112f0:	mov	r2, #5
   112f4:	ldr	r1, [pc, #1344]	; 1183c <__assert_fail@plt+0x694>
   112f8:	mov	r0, r5
   112fc:	bl	10f74 <dcgettext@plt>
   11300:	mov	r1, r5
   11304:	mov	r2, r0
   11308:	mov	r0, r5
   1130c:	bl	11004 <error@plt>
   11310:	mov	r0, #125	; 0x7d
   11314:	bl	11bdc <__assert_fail@plt+0xa34>
   11318:	ldr	r3, [pc, #1304]	; 11838 <__assert_fail@plt+0x690>
   1131c:	ldr	r3, [r3]
   11320:	str	r3, [sp, #12]
   11324:	b	11230 <__assert_fail@plt+0x88>
   11328:	ldr	r8, [pc, #1296]	; 11840 <__assert_fail@plt+0x698>
   1132c:	ldr	r3, [r8]
   11330:	cmp	r7, r3
   11334:	ble	112f0 <__assert_fail@plt+0x148>
   11338:	ldr	r5, [r6, r3, lsl #2]
   1133c:	mov	r0, r5
   11340:	bl	11160 <canonicalize_file_name@plt>
   11344:	subs	r9, r0, #0
   11348:	beq	11360 <__assert_fail@plt+0x1b8>
   1134c:	mov	r1, r9
   11350:	ldr	r0, [pc, #1260]	; 11844 <__assert_fail@plt+0x69c>
   11354:	bl	10ef0 <strcmp@plt>
   11358:	cmp	r0, #0
   1135c:	beq	11514 <__assert_fail@plt+0x36c>
   11360:	mov	r0, r9
   11364:	bl	12038 <__assert_fail@plt+0xe90>
   11368:	cmp	r4, #0
   1136c:	bne	117b4 <__assert_fail@plt+0x60c>
   11370:	cmp	sl, #0
   11374:	beq	11390 <__assert_fail@plt+0x1e8>
   11378:	str	r4, [sp]
   1137c:	mov	r3, r4
   11380:	add	r2, sp, #24
   11384:	add	r1, sp, #20
   11388:	mov	r0, sl
   1138c:	bl	160dc <__assert_fail@plt+0x4f34>
   11390:	ldr	r0, [sp, #20]
   11394:	cmn	r0, #1
   11398:	beq	11688 <__assert_fail@plt+0x4e0>
   1139c:	ldr	r3, [sp, #12]
   113a0:	cmp	r3, #0
   113a4:	beq	1173c <__assert_fail@plt+0x594>
   113a8:	ldr	r3, [sp, #24]
   113ac:	cmn	r3, #1
   113b0:	beq	116e4 <__assert_fail@plt+0x53c>
   113b4:	mov	r4, #0
   113b8:	ldr	r3, [sp, #12]
   113bc:	ldrb	r3, [r3]
   113c0:	cmp	r3, #0
   113c4:	bne	116cc <__assert_fail@plt+0x524>
   113c8:	mov	r0, r5
   113cc:	bl	10fe0 <chroot@plt>
   113d0:	cmp	r0, #0
   113d4:	bne	11600 <__assert_fail@plt+0x458>
   113d8:	ldr	r0, [pc, #1124]	; 11844 <__assert_fail@plt+0x69c>
   113dc:	bl	10f98 <chdir@plt>
   113e0:	cmp	r0, #0
   113e4:	bne	11794 <__assert_fail@plt+0x5ec>
   113e8:	ldr	r3, [r8]
   113ec:	add	r3, r3, #1
   113f0:	cmp	r7, r3
   113f4:	addne	r6, r6, r3, lsl #2
   113f8:	beq	11660 <__assert_fail@plt+0x4b8>
   113fc:	cmp	sl, #0
   11400:	beq	1153c <__assert_fail@plt+0x394>
   11404:	mov	r3, #0
   11408:	mov	r0, sl
   1140c:	str	r3, [sp]
   11410:	add	r2, sp, #24
   11414:	add	r1, sp, #20
   11418:	bl	160dc <__assert_fail@plt+0x4f34>
   1141c:	subs	r5, r0, #0
   11420:	beq	1153c <__assert_fail@plt+0x394>
   11424:	ldr	r0, [sp, #20]
   11428:	cmn	r0, #1
   1142c:	beq	1163c <__assert_fail@plt+0x494>
   11430:	ldr	r3, [sp, #12]
   11434:	cmp	r3, #0
   11438:	beq	115dc <__assert_fail@plt+0x434>
   1143c:	ldr	r3, [sp, #24]
   11440:	cmn	r3, #1
   11444:	movne	r3, #0
   11448:	strne	r3, [sp, #36]	; 0x24
   1144c:	ldrne	r5, [sp, #28]
   11450:	beq	115dc <__assert_fail@plt+0x434>
   11454:	ldr	r3, [sp, #12]
   11458:	ldrb	r3, [r3]
   1145c:	cmp	r3, #0
   11460:	bne	115a4 <__assert_fail@plt+0x3fc>
   11464:	mov	r1, r5
   11468:	ldr	r0, [sp, #32]
   1146c:	bl	10fb0 <setgroups@plt>
   11470:	cmp	r0, #0
   11474:	bne	11784 <__assert_fail@plt+0x5dc>
   11478:	ldr	r0, [sp, #36]	; 0x24
   1147c:	bl	12038 <__assert_fail@plt+0xe90>
   11480:	ldr	r0, [sp, #28]
   11484:	bl	12038 <__assert_fail@plt+0xe90>
   11488:	ldr	r0, [sp, #24]
   1148c:	cmn	r0, #1
   11490:	beq	114a0 <__assert_fail@plt+0x2f8>
   11494:	bl	1101c <setgid@plt>
   11498:	cmp	r0, #0
   1149c:	bne	117f0 <__assert_fail@plt+0x648>
   114a0:	ldr	r0, [sp, #20]
   114a4:	cmn	r0, #1
   114a8:	beq	114b8 <__assert_fail@plt+0x310>
   114ac:	bl	11148 <setuid@plt>
   114b0:	cmp	r0, #0
   114b4:	bne	117a4 <__assert_fail@plt+0x5fc>
   114b8:	mov	r1, r6
   114bc:	ldr	r0, [r6]
   114c0:	bl	10f38 <execvp@plt>
   114c4:	bl	110a0 <__errno_location@plt>
   114c8:	mov	r2, #5
   114cc:	ldr	r1, [pc, #884]	; 11848 <__assert_fail@plt+0x6a0>
   114d0:	ldr	r4, [r0]
   114d4:	mov	r0, #0
   114d8:	bl	10f74 <dcgettext@plt>
   114dc:	mov	r5, r0
   114e0:	ldr	r0, [r6]
   114e4:	bl	15f5c <__assert_fail@plt+0x4db4>
   114e8:	mov	r1, r4
   114ec:	cmp	r4, #2
   114f0:	mov	r2, r5
   114f4:	movne	r4, #126	; 0x7e
   114f8:	moveq	r4, #127	; 0x7f
   114fc:	mov	r3, r0
   11500:	mov	r0, #0
   11504:	bl	11004 <error@plt>
   11508:	mov	r0, r4
   1150c:	add	sp, sp, #44	; 0x2c
   11510:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11514:	mov	r0, r9
   11518:	bl	12038 <__assert_fail@plt+0xe90>
   1151c:	mov	r0, r5
   11520:	bl	10fe0 <chroot@plt>
   11524:	cmp	r0, #0
   11528:	bne	11600 <__assert_fail@plt+0x458>
   1152c:	cmp	r4, #0
   11530:	movne	r4, r0
   11534:	bne	113e8 <__assert_fail@plt+0x240>
   11538:	b	113d8 <__assert_fail@plt+0x230>
   1153c:	ldr	r0, [sp, #20]
   11540:	cmn	r0, #1
   11544:	bne	11430 <__assert_fail@plt+0x288>
   11548:	ldr	r3, [sp, #12]
   1154c:	ldr	r5, [sp, #28]
   11550:	cmp	r3, #0
   11554:	mov	r3, #0
   11558:	str	r3, [sp, #36]	; 0x24
   1155c:	bne	11454 <__assert_fail@plt+0x2ac>
   11560:	ldr	r1, [sp, #24]
   11564:	cmp	r4, #0
   11568:	cmnne	r1, #1
   1156c:	beq	1158c <__assert_fail@plt+0x3e4>
   11570:	mov	r0, r4
   11574:	add	r2, sp, #36	; 0x24
   11578:	bl	177fc <__assert_fail@plt+0x6654>
   1157c:	cmp	r0, #0
   11580:	strgt	r0, [sp, #32]
   11584:	ldrgt	r5, [sp, #36]	; 0x24
   11588:	ble	11750 <__assert_fail@plt+0x5a8>
   1158c:	ldr	r3, [sp, #20]
   11590:	ldr	r2, [sp, #12]
   11594:	cmn	r3, #1
   11598:	cmpeq	r2, #0
   1159c:	bne	11464 <__assert_fail@plt+0x2bc>
   115a0:	b	11478 <__assert_fail@plt+0x2d0>
   115a4:	add	r2, sp, #40	; 0x28
   115a8:	add	r1, sp, #36	; 0x24
   115ac:	ldr	r3, [r2, #-8]!
   115b0:	ldr	r0, [sp, #12]
   115b4:	clz	r3, r3
   115b8:	lsr	r3, r3, #5
   115bc:	bl	119a4 <__assert_fail@plt+0x7fc>
   115c0:	cmp	r0, #0
   115c4:	beq	116c4 <__assert_fail@plt+0x51c>
   115c8:	ldr	r3, [sp, #32]
   115cc:	cmp	r3, #0
   115d0:	moveq	r4, #125	; 0x7d
   115d4:	beq	11508 <__assert_fail@plt+0x360>
   115d8:	b	1158c <__assert_fail@plt+0x3e4>
   115dc:	bl	10efc <getpwuid@plt>
   115e0:	ldr	r3, [sp, #24]
   115e4:	subs	r5, r0, #0
   115e8:	beq	11708 <__assert_fail@plt+0x560>
   115ec:	cmn	r3, #1
   115f0:	ldr	r4, [r5]
   115f4:	ldreq	r3, [r5, #12]
   115f8:	streq	r3, [sp, #24]
   115fc:	b	11548 <__assert_fail@plt+0x3a0>
   11600:	bl	110a0 <__errno_location@plt>
   11604:	mov	r2, #5
   11608:	ldr	r1, [pc, #572]	; 1184c <__assert_fail@plt+0x6a4>
   1160c:	ldr	r4, [r0]
   11610:	mov	r0, #0
   11614:	bl	10f74 <dcgettext@plt>
   11618:	mov	r1, r5
   1161c:	mov	r6, r0
   11620:	mov	r0, #4
   11624:	bl	145ec <__assert_fail@plt+0x3444>
   11628:	mov	r2, r6
   1162c:	mov	r1, r4
   11630:	mov	r3, r0
   11634:	mov	r0, #125	; 0x7d
   11638:	bl	11004 <error@plt>
   1163c:	ldr	r3, [sp, #24]
   11640:	cmn	r3, #1
   11644:	bne	11548 <__assert_fail@plt+0x3a0>
   11648:	bl	110a0 <__errno_location@plt>
   1164c:	mov	r3, r5
   11650:	ldr	r2, [pc, #504]	; 11850 <__assert_fail@plt+0x6a8>
   11654:	ldr	r1, [r0]
   11658:	mov	r0, #125	; 0x7d
   1165c:	bl	11004 <error@plt>
   11660:	ldr	r0, [pc, #492]	; 11854 <__assert_fail@plt+0x6ac>
   11664:	bl	11010 <getenv@plt>
   11668:	mov	r2, #0
   1166c:	ldr	r3, [pc, #484]	; 11858 <__assert_fail@plt+0x6b0>
   11670:	ldr	r1, [pc, #484]	; 1185c <__assert_fail@plt+0x6b4>
   11674:	stmib	r6, {r1, r2}
   11678:	cmp	r0, r2
   1167c:	moveq	r0, r3
   11680:	str	r0, [r6]
   11684:	b	113fc <__assert_fail@plt+0x254>
   11688:	mov	r4, #0
   1168c:	ldr	r3, [sp, #12]
   11690:	cmp	r3, #0
   11694:	bne	113b8 <__assert_fail@plt+0x210>
   11698:	ldr	r1, [sp, #24]
   1169c:	cmn	r1, #1
   116a0:	beq	113c8 <__assert_fail@plt+0x220>
   116a4:	cmp	r4, #0
   116a8:	beq	113c8 <__assert_fail@plt+0x220>
   116ac:	add	r2, sp, #28
   116b0:	mov	r0, r4
   116b4:	bl	177fc <__assert_fail@plt+0x6654>
   116b8:	cmp	r0, #0
   116bc:	strgt	r0, [sp, #32]
   116c0:	b	113c8 <__assert_fail@plt+0x220>
   116c4:	ldr	r5, [sp, #36]	; 0x24
   116c8:	b	1158c <__assert_fail@plt+0x3e4>
   116cc:	mov	r3, #0
   116d0:	add	r2, sp, #32
   116d4:	add	r1, sp, #28
   116d8:	ldr	r0, [sp, #12]
   116dc:	bl	119a4 <__assert_fail@plt+0x7fc>
   116e0:	b	113c8 <__assert_fail@plt+0x220>
   116e4:	bl	10efc <getpwuid@plt>
   116e8:	cmp	r0, #0
   116ec:	beq	113b4 <__assert_fail@plt+0x20c>
   116f0:	ldr	r3, [sp, #24]
   116f4:	ldr	r4, [r0]
   116f8:	cmn	r3, #1
   116fc:	ldreq	r3, [r0, #12]
   11700:	streq	r3, [sp, #24]
   11704:	b	1168c <__assert_fail@plt+0x4e4>
   11708:	cmn	r3, #1
   1170c:	bne	11548 <__assert_fail@plt+0x3a0>
   11710:	bl	110a0 <__errno_location@plt>
   11714:	mov	r2, #5
   11718:	ldr	r1, [pc, #320]	; 11860 <__assert_fail@plt+0x6b8>
   1171c:	ldr	r4, [r0]
   11720:	mov	r0, r5
   11724:	bl	10f74 <dcgettext@plt>
   11728:	mov	r1, r4
   1172c:	ldr	r3, [sp, #20]
   11730:	mov	r2, r0
   11734:	mov	r0, #125	; 0x7d
   11738:	bl	11004 <error@plt>
   1173c:	bl	10efc <getpwuid@plt>
   11740:	cmp	r0, #0
   11744:	bne	116f0 <__assert_fail@plt+0x548>
   11748:	ldr	r4, [sp, #12]
   1174c:	b	113c8 <__assert_fail@plt+0x220>
   11750:	ldr	r3, [sp, #32]
   11754:	cmp	r3, #0
   11758:	bne	1158c <__assert_fail@plt+0x3e4>
   1175c:	bl	110a0 <__errno_location@plt>
   11760:	ldr	r1, [pc, #252]	; 11864 <__assert_fail@plt+0x6bc>
   11764:	mov	r2, #5
   11768:	ldr	r4, [r0]
   1176c:	mov	r0, #0
   11770:	bl	10f74 <dcgettext@plt>
   11774:	mov	r1, r4
   11778:	mov	r2, r0
   1177c:	mov	r0, #125	; 0x7d
   11780:	bl	11004 <error@plt>
   11784:	bl	110a0 <__errno_location@plt>
   11788:	mov	r2, #5
   1178c:	ldr	r1, [pc, #212]	; 11868 <__assert_fail@plt+0x6c0>
   11790:	b	11768 <__assert_fail@plt+0x5c0>
   11794:	bl	110a0 <__errno_location@plt>
   11798:	mov	r2, #5
   1179c:	ldr	r1, [pc, #200]	; 1186c <__assert_fail@plt+0x6c4>
   117a0:	b	11768 <__assert_fail@plt+0x5c0>
   117a4:	bl	110a0 <__errno_location@plt>
   117a8:	mov	r2, #5
   117ac:	ldr	r1, [pc, #188]	; 11870 <__assert_fail@plt+0x6c8>
   117b0:	b	11768 <__assert_fail@plt+0x5c0>
   117b4:	mov	r2, #5
   117b8:	ldr	r1, [pc, #180]	; 11874 <__assert_fail@plt+0x6cc>
   117bc:	mov	r0, #0
   117c0:	bl	10f74 <dcgettext@plt>
   117c4:	ldr	r1, [pc, #120]	; 11844 <__assert_fail@plt+0x69c>
   117c8:	mov	r4, r0
   117cc:	mov	r0, #4
   117d0:	bl	145ec <__assert_fail@plt+0x3444>
   117d4:	mov	r1, #0
   117d8:	mov	r2, r4
   117dc:	mov	r3, r0
   117e0:	mov	r0, r1
   117e4:	bl	11004 <error@plt>
   117e8:	mov	r0, #125	; 0x7d
   117ec:	bl	11bdc <__assert_fail@plt+0xa34>
   117f0:	bl	110a0 <__errno_location@plt>
   117f4:	mov	r2, #5
   117f8:	ldr	r1, [pc, #120]	; 11878 <__assert_fail@plt+0x6d0>
   117fc:	b	11768 <__assert_fail@plt+0x5c0>
   11800:	andeq	r9, r1, r8, lsl #25
   11804:	andeq	r9, r1, r0, lsl #27
   11808:	ldrdeq	r9, [r1], -r0
   1180c:	andeq	fp, r2, ip, lsl r1
   11810:	andeq	r1, r1, r4, asr pc
   11814:	andeq	r9, r1, r8, asr #19
   11818:	andeq	r9, r1, r8, lsr #27
   1181c:	andeq	r0, r0, r1, lsl #2
   11820:	andeq	r0, r0, r2, lsl #2
   11824:	andeq	fp, r2, r4, ror r1
   11828:	andeq	fp, r2, r8, lsl r1
   1182c:	muleq	r1, r8, sp
   11830:	andeq	r9, r1, r8, asr sl
   11834:	andeq	r9, r1, ip, asr #25
   11838:	andeq	fp, r2, r8, ror r1
   1183c:	andeq	r9, r1, ip, lsr #27
   11840:	andeq	fp, r2, r8, ror #2
   11844:	ldrdeq	r9, [r1], -r8
   11848:	andeq	r9, r1, r4, ror #29
   1184c:	strdeq	r9, [r1], -r4
   11850:			; <UNDEFINED> instruction: 0x00019fbc
   11854:	andeq	r9, r1, r8, lsr lr
   11858:	andeq	r9, r1, r8, ror sp
   1185c:	andeq	r9, r1, r0, asr #28
   11860:	andeq	r9, r1, r4, asr #28
   11864:	andeq	r9, r1, ip, ror #28
   11868:	muleq	r1, r0, lr
   1186c:	andeq	r9, r1, r8, lsl lr
   11870:	andeq	r9, r1, ip, asr #29
   11874:			; <UNDEFINED> instruction: 0x00019dbc
   11878:			; <UNDEFINED> instruction: 0x00019eb4
   1187c:	mov	fp, #0
   11880:	mov	lr, #0
   11884:	pop	{r1}		; (ldr r1, [sp], #4)
   11888:	mov	r2, sp
   1188c:	push	{r2}		; (str r2, [sp, #-4]!)
   11890:	push	{r0}		; (str r0, [sp, #-4]!)
   11894:	ldr	ip, [pc, #16]	; 118ac <__assert_fail@plt+0x704>
   11898:	push	{ip}		; (str ip, [sp, #-4]!)
   1189c:	ldr	r0, [pc, #12]	; 118b0 <__assert_fail@plt+0x708>
   118a0:	ldr	r3, [pc, #12]	; 118b4 <__assert_fail@plt+0x70c>
   118a4:	bl	11034 <__libc_start_main@plt>
   118a8:	bl	11184 <abort@plt>
   118ac:	andeq	r9, r1, r8, ror #18
   118b0:			; <UNDEFINED> instruction: 0x000111b8
   118b4:	andeq	r9, r1, r8, lsl #18
   118b8:	ldr	r3, [pc, #20]	; 118d4 <__assert_fail@plt+0x72c>
   118bc:	ldr	r2, [pc, #20]	; 118d8 <__assert_fail@plt+0x730>
   118c0:	add	r3, pc, r3
   118c4:	ldr	r2, [r3, r2]
   118c8:	cmp	r2, #0
   118cc:	bxeq	lr
   118d0:	b	1104c <__gmon_start__@plt>
   118d4:	andeq	r9, r1, r8, lsr r7
   118d8:	andeq	r0, r0, ip, lsl #2
   118dc:	ldr	r3, [pc, #28]	; 11900 <__assert_fail@plt+0x758>
   118e0:	ldr	r0, [pc, #28]	; 11904 <__assert_fail@plt+0x75c>
   118e4:	sub	r3, r3, r0
   118e8:	cmp	r3, #6
   118ec:	bxls	lr
   118f0:	ldr	r3, [pc, #16]	; 11908 <__assert_fail@plt+0x760>
   118f4:	cmp	r3, #0
   118f8:	bxeq	lr
   118fc:	bx	r3
   11900:	andeq	fp, r2, r3, ror #2
   11904:	andeq	fp, r2, r0, ror #2
   11908:	andeq	r0, r0, r0
   1190c:	ldr	r1, [pc, #36]	; 11938 <__assert_fail@plt+0x790>
   11910:	ldr	r0, [pc, #36]	; 1193c <__assert_fail@plt+0x794>
   11914:	sub	r1, r1, r0
   11918:	asr	r1, r1, #2
   1191c:	add	r1, r1, r1, lsr #31
   11920:	asrs	r1, r1, #1
   11924:	bxeq	lr
   11928:	ldr	r3, [pc, #16]	; 11940 <__assert_fail@plt+0x798>
   1192c:	cmp	r3, #0
   11930:	bxeq	lr
   11934:	bx	r3
   11938:	andeq	fp, r2, r0, ror #2
   1193c:	andeq	fp, r2, r0, ror #2
   11940:	andeq	r0, r0, r0
   11944:	push	{r4, lr}
   11948:	ldr	r4, [pc, #24]	; 11968 <__assert_fail@plt+0x7c0>
   1194c:	ldrb	r3, [r4]
   11950:	cmp	r3, #0
   11954:	popne	{r4, pc}
   11958:	bl	118dc <__assert_fail@plt+0x734>
   1195c:	mov	r3, #1
   11960:	strb	r3, [r4]
   11964:	pop	{r4, pc}
   11968:	andeq	fp, r2, ip, ror r1
   1196c:	ldr	r0, [pc, #40]	; 1199c <__assert_fail@plt+0x7f4>
   11970:	ldr	r3, [r0]
   11974:	cmp	r3, #0
   11978:	bne	11980 <__assert_fail@plt+0x7d8>
   1197c:	b	1190c <__assert_fail@plt+0x764>
   11980:	ldr	r3, [pc, #24]	; 119a0 <__assert_fail@plt+0x7f8>
   11984:	cmp	r3, #0
   11988:	beq	1197c <__assert_fail@plt+0x7d4>
   1198c:	push	{r4, lr}
   11990:	blx	r3
   11994:	pop	{r4, lr}
   11998:	b	1190c <__assert_fail@plt+0x764>
   1199c:	andeq	sl, r2, r4, lsl pc
   119a0:	andeq	r0, r0, r0
   119a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119a8:	sub	sp, sp, #60	; 0x3c
   119ac:	mov	r7, #0
   119b0:	str	r1, [sp, #20]
   119b4:	str	r2, [sp, #28]
   119b8:	str	r3, [sp, #16]
   119bc:	str	r7, [sp, #44]	; 0x2c
   119c0:	str	r0, [sp, #32]
   119c4:	bl	17784 <__assert_fail@plt+0x65dc>
   119c8:	ldr	r1, [pc, #508]	; 11bcc <__assert_fail@plt+0xa24>
   119cc:	str	r0, [sp, #24]
   119d0:	bl	1110c <strtok@plt>
   119d4:	subs	r4, r0, #0
   119d8:	beq	11ba8 <__assert_fail@plt+0xa00>
   119dc:	mov	r6, r7
   119e0:	str	r7, [sp, #12]
   119e4:	ldr	sl, [pc, #484]	; 11bd0 <__assert_fail@plt+0xa28>
   119e8:	ldr	r7, [pc, #476]	; 11bcc <__assert_fail@plt+0xa24>
   119ec:	mov	r5, r6
   119f0:	mov	r8, r6
   119f4:	mov	r9, #10
   119f8:	str	sl, [sp]
   119fc:	add	r3, sp, #48	; 0x30
   11a00:	mov	r2, r9
   11a04:	mov	r1, r6
   11a08:	mov	r0, r4
   11a0c:	bl	17e48 <__assert_fail@plt+0x6ca0>
   11a10:	cmp	r0, #0
   11a14:	bne	11af4 <__assert_fail@plt+0x94c>
   11a18:	ldrd	r2, [sp, #48]	; 0x30
   11a1c:	mov	r1, #0
   11a20:	mvn	r0, #0
   11a24:	cmp	r3, r1
   11a28:	cmpeq	r2, r0
   11a2c:	bhi	11af4 <__assert_fail@plt+0x94c>
   11a30:	bl	11064 <__ctype_b_loc@plt>
   11a34:	ldr	r1, [r0]
   11a38:	mov	r0, r4
   11a3c:	ldrb	r2, [r4], #1
   11a40:	lsl	r3, r2, #1
   11a44:	ldrh	fp, [r1, r3]
   11a48:	ands	fp, fp, #8192	; 0x2000
   11a4c:	bne	11a38 <__assert_fail@plt+0x890>
   11a50:	cmp	r2, #43	; 0x2b
   11a54:	beq	11a6c <__assert_fail@plt+0x8c4>
   11a58:	bl	1119c <getgrnam@plt>
   11a5c:	cmp	r0, #0
   11a60:	ldrne	r3, [r0, #8]
   11a64:	strne	fp, [sp, #52]	; 0x34
   11a68:	strne	r3, [sp, #48]	; 0x30
   11a6c:	ldr	r3, [sp, #44]	; 0x2c
   11a70:	cmp	r3, r5
   11a74:	beq	11b1c <__assert_fail@plt+0x974>
   11a78:	ldr	r3, [sp, #48]	; 0x30
   11a7c:	str	r3, [r8, r5, lsl #2]
   11a80:	add	r5, r5, #1
   11a84:	mov	r1, r7
   11a88:	mov	r0, r6
   11a8c:	bl	1110c <strtok@plt>
   11a90:	subs	r4, r0, #0
   11a94:	bne	119f8 <__assert_fail@plt+0x850>
   11a98:	ldr	r3, [sp, #12]
   11a9c:	add	r3, r3, #1
   11aa0:	cmp	r5, #0
   11aa4:	movne	r3, #0
   11aa8:	andeq	r3, r3, #1
   11aac:	cmp	r3, #0
   11ab0:	beq	11bb0 <__assert_fail@plt+0xa08>
   11ab4:	ldr	r3, [sp, #16]
   11ab8:	cmp	r3, #0
   11abc:	beq	11b40 <__assert_fail@plt+0x998>
   11ac0:	mov	r2, #5
   11ac4:	ldr	r1, [pc, #264]	; 11bd4 <__assert_fail@plt+0xa2c>
   11ac8:	mov	r0, #0
   11acc:	bl	10f74 <dcgettext@plt>
   11ad0:	mov	r4, r0
   11ad4:	ldr	r0, [sp, #32]
   11ad8:	bl	15f5c <__assert_fail@plt+0x4db4>
   11adc:	mov	r1, #0
   11ae0:	mov	r2, r4
   11ae4:	mov	r3, r0
   11ae8:	mov	r0, r1
   11aec:	bl	11004 <error@plt>
   11af0:	b	11b40 <__assert_fail@plt+0x998>
   11af4:	mov	r0, r4
   11af8:	bl	1119c <getgrnam@plt>
   11afc:	cmp	r0, #0
   11b00:	beq	11b34 <__assert_fail@plt+0x98c>
   11b04:	ldr	r3, [r0, #8]
   11b08:	str	r6, [sp, #52]	; 0x34
   11b0c:	str	r3, [sp, #48]	; 0x30
   11b10:	ldr	r3, [sp, #44]	; 0x2c
   11b14:	cmp	r3, r5
   11b18:	bne	11a78 <__assert_fail@plt+0x8d0>
   11b1c:	mov	r0, r8
   11b20:	mov	r2, #4
   11b24:	add	r1, sp, #44	; 0x2c
   11b28:	bl	17324 <__assert_fail@plt+0x617c>
   11b2c:	mov	r8, r0
   11b30:	b	11a78 <__assert_fail@plt+0x8d0>
   11b34:	ldr	r3, [sp, #16]
   11b38:	cmp	r3, #0
   11b3c:	bne	11b64 <__assert_fail@plt+0x9bc>
   11b40:	ldr	r3, [sp, #20]
   11b44:	str	r8, [r3]
   11b48:	mvn	r3, #0
   11b4c:	str	r3, [sp, #12]
   11b50:	ldr	r0, [sp, #24]
   11b54:	bl	12038 <__assert_fail@plt+0xe90>
   11b58:	ldr	r0, [sp, #12]
   11b5c:	add	sp, sp, #60	; 0x3c
   11b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b64:	bl	110a0 <__errno_location@plt>
   11b68:	mvn	r3, #0
   11b6c:	mov	r2, #5
   11b70:	ldr	r1, [pc, #96]	; 11bd8 <__assert_fail@plt+0xa30>
   11b74:	str	r3, [sp, #12]
   11b78:	ldr	fp, [r0]
   11b7c:	mov	r0, r6
   11b80:	bl	10f74 <dcgettext@plt>
   11b84:	str	r0, [sp, #36]	; 0x24
   11b88:	mov	r0, r4
   11b8c:	bl	15f5c <__assert_fail@plt+0x4db4>
   11b90:	ldr	r2, [sp, #36]	; 0x24
   11b94:	mov	r1, fp
   11b98:	mov	r3, r0
   11b9c:	mov	r0, r6
   11ba0:	bl	11004 <error@plt>
   11ba4:	b	11a84 <__assert_fail@plt+0x8dc>
   11ba8:	mov	r8, r4
   11bac:	b	11ab4 <__assert_fail@plt+0x90c>
   11bb0:	ldr	r3, [sp, #12]
   11bb4:	cmp	r3, #0
   11bb8:	ldr	r3, [sp, #20]
   11bbc:	str	r8, [r3]
   11bc0:	ldreq	r3, [sp, #28]
   11bc4:	streq	r5, [r3]
   11bc8:	b	11b50 <__assert_fail@plt+0x9a8>
   11bcc:	andeq	r9, r1, r8, lsr #20
   11bd0:	andeq	r9, r1, r8, lsl #25
   11bd4:	andeq	r9, r1, r0, asr #20
   11bd8:	andeq	r9, r1, ip, lsr #20
   11bdc:	subs	r6, r0, #0
   11be0:	push	{r7, lr}
   11be4:	sub	sp, sp, #56	; 0x38
   11be8:	beq	11c24 <__assert_fail@plt+0xa7c>
   11bec:	ldr	r3, [pc, #736]	; 11ed4 <__assert_fail@plt+0xd2c>
   11bf0:	mov	r2, #5
   11bf4:	ldr	r1, [pc, #732]	; 11ed8 <__assert_fail@plt+0xd30>
   11bf8:	mov	r0, #0
   11bfc:	ldr	r4, [r3]
   11c00:	bl	10f74 <dcgettext@plt>
   11c04:	ldr	r3, [pc, #720]	; 11edc <__assert_fail@plt+0xd34>
   11c08:	mov	r1, #1
   11c0c:	ldr	r3, [r3]
   11c10:	mov	r2, r0
   11c14:	mov	r0, r4
   11c18:	bl	110e8 <__fprintf_chk@plt>
   11c1c:	mov	r0, r6
   11c20:	bl	11070 <exit@plt>
   11c24:	mov	r2, #5
   11c28:	ldr	r1, [pc, #688]	; 11ee0 <__assert_fail@plt+0xd38>
   11c2c:	bl	10f74 <dcgettext@plt>
   11c30:	ldr	r3, [pc, #676]	; 11edc <__assert_fail@plt+0xd34>
   11c34:	ldr	r7, [pc, #680]	; 11ee4 <__assert_fail@plt+0xd3c>
   11c38:	ldr	r3, [r3]
   11c3c:	mov	r2, r3
   11c40:	mov	r1, r0
   11c44:	mov	r0, #1
   11c48:	bl	110d0 <__printf_chk@plt>
   11c4c:	mov	r2, #5
   11c50:	ldr	r1, [pc, #656]	; 11ee8 <__assert_fail@plt+0xd40>
   11c54:	mov	r0, r6
   11c58:	bl	10f74 <dcgettext@plt>
   11c5c:	ldr	r1, [r7]
   11c60:	bl	10ecc <fputs_unlocked@plt>
   11c64:	mov	r2, #5
   11c68:	ldr	r1, [pc, #636]	; 11eec <__assert_fail@plt+0xd44>
   11c6c:	mov	r0, r6
   11c70:	bl	10f74 <dcgettext@plt>
   11c74:	ldr	r1, [r7]
   11c78:	bl	10ecc <fputs_unlocked@plt>
   11c7c:	mov	r2, #5
   11c80:	ldr	r1, [pc, #616]	; 11ef0 <__assert_fail@plt+0xd48>
   11c84:	mov	r0, r6
   11c88:	bl	10f74 <dcgettext@plt>
   11c8c:	ldr	r1, [r7]
   11c90:	bl	10ecc <fputs_unlocked@plt>
   11c94:	mov	r2, #5
   11c98:	ldr	r1, [pc, #596]	; 11ef4 <__assert_fail@plt+0xd4c>
   11c9c:	mov	r0, r6
   11ca0:	bl	10f74 <dcgettext@plt>
   11ca4:	ldr	r1, [pc, #588]	; 11ef8 <__assert_fail@plt+0xd50>
   11ca8:	mov	r4, r0
   11cac:	mov	r0, #4
   11cb0:	bl	145ec <__assert_fail@plt+0x3444>
   11cb4:	mov	r1, r4
   11cb8:	ldr	r4, [pc, #572]	; 11efc <__assert_fail@plt+0xd54>
   11cbc:	mov	r2, r0
   11cc0:	mov	r0, #1
   11cc4:	bl	110d0 <__printf_chk@plt>
   11cc8:	mov	r2, #5
   11ccc:	ldr	r1, [pc, #556]	; 11f00 <__assert_fail@plt+0xd58>
   11cd0:	mov	r0, r6
   11cd4:	bl	10f74 <dcgettext@plt>
   11cd8:	ldr	r1, [r7]
   11cdc:	bl	10ecc <fputs_unlocked@plt>
   11ce0:	mov	r2, #5
   11ce4:	ldr	r1, [pc, #536]	; 11f04 <__assert_fail@plt+0xd5c>
   11ce8:	mov	r0, r6
   11cec:	bl	10f74 <dcgettext@plt>
   11cf0:	ldr	r1, [r7]
   11cf4:	bl	10ecc <fputs_unlocked@plt>
   11cf8:	mov	r2, #5
   11cfc:	ldr	r1, [pc, #516]	; 11f08 <__assert_fail@plt+0xd60>
   11d00:	mov	r0, r6
   11d04:	bl	10f74 <dcgettext@plt>
   11d08:	ldr	r1, [r7]
   11d0c:	bl	10ecc <fputs_unlocked@plt>
   11d10:	ldm	r4!, {r0, r1, r2, r3}
   11d14:	mov	lr, sp
   11d18:	stmia	lr!, {r0, r1, r2, r3}
   11d1c:	ldm	r4!, {r0, r1, r2, r3}
   11d20:	ldr	ip, [sp]
   11d24:	stmia	lr!, {r0, r1, r2, r3}
   11d28:	cmp	ip, #0
   11d2c:	ldm	r4!, {r0, r1, r2, r3}
   11d30:	stmia	lr!, {r0, r1, r2, r3}
   11d34:	ldm	r4, {r0, r1}
   11d38:	moveq	r4, sp
   11d3c:	stm	lr, {r0, r1}
   11d40:	beq	11d70 <__assert_fail@plt+0xbc8>
   11d44:	ldr	r5, [pc, #448]	; 11f0c <__assert_fail@plt+0xd64>
   11d48:	mov	r4, sp
   11d4c:	b	11d5c <__assert_fail@plt+0xbb4>
   11d50:	ldr	ip, [r4, #8]!
   11d54:	cmp	ip, #0
   11d58:	beq	11d70 <__assert_fail@plt+0xbc8>
   11d5c:	mov	r1, ip
   11d60:	mov	r0, r5
   11d64:	bl	10ef0 <strcmp@plt>
   11d68:	cmp	r0, #0
   11d6c:	bne	11d50 <__assert_fail@plt+0xba8>
   11d70:	ldr	r4, [r4, #4]
   11d74:	mov	r2, #5
   11d78:	cmp	r4, #0
   11d7c:	ldr	r1, [pc, #396]	; 11f10 <__assert_fail@plt+0xd68>
   11d80:	beq	11e28 <__assert_fail@plt+0xc80>
   11d84:	mov	r0, #0
   11d88:	bl	10f74 <dcgettext@plt>
   11d8c:	ldr	r3, [pc, #384]	; 11f14 <__assert_fail@plt+0xd6c>
   11d90:	ldr	r2, [pc, #384]	; 11f18 <__assert_fail@plt+0xd70>
   11d94:	mov	r1, r0
   11d98:	mov	r0, #1
   11d9c:	bl	110d0 <__printf_chk@plt>
   11da0:	mov	r1, #0
   11da4:	mov	r0, #5
   11da8:	bl	11118 <setlocale@plt>
   11dac:	cmp	r0, #0
   11db0:	ldreq	r5, [pc, #340]	; 11f0c <__assert_fail@plt+0xd64>
   11db4:	beq	11dd0 <__assert_fail@plt+0xc28>
   11db8:	mov	r2, #3
   11dbc:	ldr	r1, [pc, #344]	; 11f1c <__assert_fail@plt+0xd74>
   11dc0:	bl	11178 <strncmp@plt>
   11dc4:	ldr	r5, [pc, #320]	; 11f0c <__assert_fail@plt+0xd64>
   11dc8:	cmp	r0, #0
   11dcc:	bne	11eb8 <__assert_fail@plt+0xd10>
   11dd0:	mov	r2, #5
   11dd4:	ldr	r1, [pc, #324]	; 11f20 <__assert_fail@plt+0xd78>
   11dd8:	mov	r0, #0
   11ddc:	bl	10f74 <dcgettext@plt>
   11de0:	ldr	r3, [pc, #292]	; 11f0c <__assert_fail@plt+0xd64>
   11de4:	ldr	r2, [pc, #296]	; 11f14 <__assert_fail@plt+0xd6c>
   11de8:	mov	r1, r0
   11dec:	mov	r0, #1
   11df0:	bl	110d0 <__printf_chk@plt>
   11df4:	mov	r2, #5
   11df8:	ldr	r1, [pc, #292]	; 11f24 <__assert_fail@plt+0xd7c>
   11dfc:	mov	r0, #0
   11e00:	bl	10f74 <dcgettext@plt>
   11e04:	ldr	r2, [pc, #284]	; 11f28 <__assert_fail@plt+0xd80>
   11e08:	cmp	r4, r5
   11e0c:	ldr	r3, [pc, #280]	; 11f2c <__assert_fail@plt+0xd84>
   11e10:	movne	r3, r2
   11e14:	mov	r1, r0
   11e18:	mov	r2, r4
   11e1c:	mov	r0, #1
   11e20:	bl	110d0 <__printf_chk@plt>
   11e24:	b	11c1c <__assert_fail@plt+0xa74>
   11e28:	mov	r0, r4
   11e2c:	bl	10f74 <dcgettext@plt>
   11e30:	ldr	r3, [pc, #220]	; 11f14 <__assert_fail@plt+0xd6c>
   11e34:	ldr	r2, [pc, #220]	; 11f18 <__assert_fail@plt+0xd70>
   11e38:	mov	r1, r0
   11e3c:	mov	r0, #1
   11e40:	bl	110d0 <__printf_chk@plt>
   11e44:	mov	r1, r4
   11e48:	mov	r0, #5
   11e4c:	bl	11118 <setlocale@plt>
   11e50:	cmp	r0, #0
   11e54:	beq	11e6c <__assert_fail@plt+0xcc4>
   11e58:	mov	r2, #3
   11e5c:	ldr	r1, [pc, #184]	; 11f1c <__assert_fail@plt+0xd74>
   11e60:	bl	11178 <strncmp@plt>
   11e64:	cmp	r0, #0
   11e68:	bne	11eb0 <__assert_fail@plt+0xd08>
   11e6c:	mov	r2, #5
   11e70:	ldr	r1, [pc, #168]	; 11f20 <__assert_fail@plt+0xd78>
   11e74:	mov	r0, #0
   11e78:	bl	10f74 <dcgettext@plt>
   11e7c:	ldr	r3, [pc, #136]	; 11f0c <__assert_fail@plt+0xd64>
   11e80:	ldr	r2, [pc, #140]	; 11f14 <__assert_fail@plt+0xd6c>
   11e84:	mov	r4, r3
   11e88:	mov	r1, r0
   11e8c:	mov	r0, #1
   11e90:	bl	110d0 <__printf_chk@plt>
   11e94:	ldr	r1, [pc, #136]	; 11f24 <__assert_fail@plt+0xd7c>
   11e98:	mov	r2, #5
   11e9c:	mov	r0, #0
   11ea0:	bl	10f74 <dcgettext@plt>
   11ea4:	ldr	r3, [pc, #128]	; 11f2c <__assert_fail@plt+0xd84>
   11ea8:	mov	r1, r0
   11eac:	b	11e18 <__assert_fail@plt+0xc70>
   11eb0:	ldr	r5, [pc, #84]	; 11f0c <__assert_fail@plt+0xd64>
   11eb4:	mov	r4, r5
   11eb8:	mov	r2, #5
   11ebc:	ldr	r1, [pc, #108]	; 11f30 <__assert_fail@plt+0xd88>
   11ec0:	mov	r0, #0
   11ec4:	bl	10f74 <dcgettext@plt>
   11ec8:	ldr	r1, [r7]
   11ecc:	bl	10ecc <fputs_unlocked@plt>
   11ed0:	b	11dd0 <__assert_fail@plt+0xc28>
   11ed4:	andeq	fp, r2, r0, ror r1
   11ed8:	andeq	r9, r1, r0, ror #20
   11edc:	andeq	fp, r2, r8, lsl #3
   11ee0:	andeq	r9, r1, r8, lsl #21
   11ee4:	andeq	fp, r2, r4, ror r1
   11ee8:	andeq	r9, r1, r8, asr #21
   11eec:	strdeq	r9, [r1], -ip
   11ef0:	andeq	r9, r1, r8, asr #22
   11ef4:	muleq	r1, r4, fp
   11ef8:	ldrdeq	r9, [r1], -r8
   11efc:	muleq	r1, r0, r9
   11f00:	ldrdeq	r9, [r1], -ip
   11f04:	andeq	r9, r1, ip, lsl #24
   11f08:	andeq	r9, r1, r4, asr #24
   11f0c:	andeq	r9, r1, r8, asr sl
   11f10:	andeq	r9, r1, ip, lsl #25
   11f14:	andeq	r9, r1, r4, lsr #25
   11f18:	andeq	r9, r1, ip, asr #25
   11f1c:	ldrdeq	r9, [r1], -ip
   11f20:	andeq	r9, r1, r8, lsr #26
   11f24:	andeq	r9, r1, r4, asr #26
   11f28:	andeq	r9, r1, r8, lsl #25
   11f2c:	andeq	r9, r1, r8, lsl #30
   11f30:	andeq	r9, r1, r0, ror #25
   11f34:	ldr	r3, [pc, #4]	; 11f40 <__assert_fail@plt+0xd98>
   11f38:	str	r0, [r3]
   11f3c:	bx	lr
   11f40:	andeq	fp, r2, r0, lsl #3
   11f44:	ldr	r3, [pc, #4]	; 11f50 <__assert_fail@plt+0xda8>
   11f48:	strb	r0, [r3, #4]
   11f4c:	bx	lr
   11f50:	andeq	fp, r2, r0, lsl #3
   11f54:	ldr	r3, [pc, #192]	; 1201c <__assert_fail@plt+0xe74>
   11f58:	push	{r4, r5, r6, lr}
   11f5c:	sub	sp, sp, #8
   11f60:	ldr	r0, [r3]
   11f64:	bl	18ce4 <__assert_fail@plt+0x7b3c>
   11f68:	cmp	r0, #0
   11f6c:	beq	11f90 <__assert_fail@plt+0xde8>
   11f70:	ldr	r4, [pc, #168]	; 12020 <__assert_fail@plt+0xe78>
   11f74:	ldrb	r3, [r4, #4]
   11f78:	cmp	r3, #0
   11f7c:	beq	11fac <__assert_fail@plt+0xe04>
   11f80:	bl	110a0 <__errno_location@plt>
   11f84:	ldr	r3, [r0]
   11f88:	cmp	r3, #32
   11f8c:	bne	11fac <__assert_fail@plt+0xe04>
   11f90:	ldr	r3, [pc, #140]	; 12024 <__assert_fail@plt+0xe7c>
   11f94:	ldr	r0, [r3]
   11f98:	bl	18ce4 <__assert_fail@plt+0x7b3c>
   11f9c:	cmp	r0, #0
   11fa0:	bne	11ff4 <__assert_fail@plt+0xe4c>
   11fa4:	add	sp, sp, #8
   11fa8:	pop	{r4, r5, r6, pc}
   11fac:	mov	r2, #5
   11fb0:	ldr	r1, [pc, #112]	; 12028 <__assert_fail@plt+0xe80>
   11fb4:	mov	r0, #0
   11fb8:	bl	10f74 <dcgettext@plt>
   11fbc:	ldr	r4, [r4]
   11fc0:	cmp	r4, #0
   11fc4:	mov	r5, r0
   11fc8:	beq	12000 <__assert_fail@plt+0xe58>
   11fcc:	bl	110a0 <__errno_location@plt>
   11fd0:	ldr	r6, [r0]
   11fd4:	mov	r0, r4
   11fd8:	bl	14cfc <__assert_fail@plt+0x3b54>
   11fdc:	mov	r1, r6
   11fe0:	str	r5, [sp]
   11fe4:	ldr	r2, [pc, #64]	; 1202c <__assert_fail@plt+0xe84>
   11fe8:	mov	r3, r0
   11fec:	mov	r0, #0
   11ff0:	bl	11004 <error@plt>
   11ff4:	ldr	r3, [pc, #52]	; 12030 <__assert_fail@plt+0xe88>
   11ff8:	ldr	r0, [r3]
   11ffc:	bl	10f20 <_exit@plt>
   12000:	bl	110a0 <__errno_location@plt>
   12004:	mov	r3, r5
   12008:	ldr	r2, [pc, #36]	; 12034 <__assert_fail@plt+0xe8c>
   1200c:	ldr	r1, [r0]
   12010:	mov	r0, r4
   12014:	bl	11004 <error@plt>
   12018:	b	11ff4 <__assert_fail@plt+0xe4c>
   1201c:	andeq	fp, r2, r4, ror r1
   12020:	andeq	fp, r2, r0, lsl #3
   12024:	andeq	fp, r2, r0, ror r1
   12028:	andeq	r9, r1, ip, lsr #31
   1202c:			; <UNDEFINED> instruction: 0x00019fb8
   12030:	andeq	fp, r2, ip, lsl r1
   12034:			; <UNDEFINED> instruction: 0x00019fbc
   12038:	push	{r4, r5, lr}
   1203c:	sub	sp, sp, #12
   12040:	mov	r5, r0
   12044:	bl	110a0 <__errno_location@plt>
   12048:	mov	r2, #0
   1204c:	mov	r4, r0
   12050:	ldr	r3, [r0]
   12054:	str	r2, [r4]
   12058:	mov	r0, r5
   1205c:	str	r3, [sp]
   12060:	str	r3, [sp, #4]
   12064:	bl	10f14 <free@plt>
   12068:	ldr	r3, [r4]
   1206c:	add	r2, sp, #8
   12070:	cmp	r3, #0
   12074:	moveq	r3, #4
   12078:	movne	r3, #0
   1207c:	add	r3, r2, r3
   12080:	ldr	r3, [r3, #-8]
   12084:	str	r3, [r4]
   12088:	add	sp, sp, #12
   1208c:	pop	{r4, r5, pc}
   12090:	push	{r4, r5, r6, lr}
   12094:	subs	r4, r0, #0
   12098:	beq	1210c <__assert_fail@plt+0xf64>
   1209c:	mov	r1, #47	; 0x2f
   120a0:	bl	11130 <strrchr@plt>
   120a4:	subs	r5, r0, #0
   120a8:	beq	120f8 <__assert_fail@plt+0xf50>
   120ac:	add	r6, r5, #1
   120b0:	sub	r3, r6, r4
   120b4:	cmp	r3, #6
   120b8:	ble	120f8 <__assert_fail@plt+0xf50>
   120bc:	mov	r2, #7
   120c0:	ldr	r1, [pc, #96]	; 12128 <__assert_fail@plt+0xf80>
   120c4:	sub	r0, r5, #6
   120c8:	bl	11178 <strncmp@plt>
   120cc:	cmp	r0, #0
   120d0:	bne	120f8 <__assert_fail@plt+0xf50>
   120d4:	mov	r2, #3
   120d8:	ldr	r1, [pc, #76]	; 1212c <__assert_fail@plt+0xf84>
   120dc:	mov	r0, r6
   120e0:	bl	11178 <strncmp@plt>
   120e4:	cmp	r0, #0
   120e8:	movne	r4, r6
   120ec:	ldreq	r3, [pc, #60]	; 12130 <__assert_fail@plt+0xf88>
   120f0:	addeq	r4, r5, #4
   120f4:	streq	r4, [r3]
   120f8:	ldr	r2, [pc, #52]	; 12134 <__assert_fail@plt+0xf8c>
   120fc:	ldr	r3, [pc, #52]	; 12138 <__assert_fail@plt+0xf90>
   12100:	str	r4, [r2]
   12104:	str	r4, [r3]
   12108:	pop	{r4, r5, r6, pc}
   1210c:	ldr	r3, [pc, #40]	; 1213c <__assert_fail@plt+0xf94>
   12110:	mov	r2, #55	; 0x37
   12114:	mov	r1, #1
   12118:	ldr	r3, [r3]
   1211c:	ldr	r0, [pc, #28]	; 12140 <__assert_fail@plt+0xf98>
   12120:	bl	10fbc <fwrite@plt>
   12124:	bl	11184 <abort@plt>
   12128:	strdeq	r9, [r1], -r8
   1212c:	andeq	sl, r1, r0
   12130:	andeq	fp, r2, r0, ror #2
   12134:	andeq	fp, r2, r8, lsl #3
   12138:	andeq	fp, r2, r4, ror #2
   1213c:	andeq	fp, r2, r0, ror r1
   12140:	andeq	r9, r1, r0, asr #31
   12144:	push	{r4, r5, r6, lr}
   12148:	mov	r4, r0
   1214c:	mov	r5, r1
   12150:	bl	18f68 <__assert_fail@plt+0x7dc0>
   12154:	ldrb	r3, [r0]
   12158:	bic	r3, r3, #32
   1215c:	cmp	r3, #85	; 0x55
   12160:	bne	121c0 <__assert_fail@plt+0x1018>
   12164:	ldrb	r3, [r0, #1]
   12168:	bic	r3, r3, #32
   1216c:	cmp	r3, #84	; 0x54
   12170:	bne	121fc <__assert_fail@plt+0x1054>
   12174:	ldrb	r3, [r0, #2]
   12178:	bic	r3, r3, #32
   1217c:	cmp	r3, #70	; 0x46
   12180:	bne	121fc <__assert_fail@plt+0x1054>
   12184:	ldrb	r3, [r0, #3]
   12188:	cmp	r3, #45	; 0x2d
   1218c:	bne	121fc <__assert_fail@plt+0x1054>
   12190:	ldrb	r3, [r0, #4]
   12194:	cmp	r3, #56	; 0x38
   12198:	bne	121fc <__assert_fail@plt+0x1054>
   1219c:	ldrb	r3, [r0, #5]
   121a0:	cmp	r3, #0
   121a4:	bne	121fc <__assert_fail@plt+0x1054>
   121a8:	ldrb	r2, [r4]
   121ac:	ldr	r3, [pc, #152]	; 1224c <__assert_fail@plt+0x10a4>
   121b0:	ldr	r0, [pc, #152]	; 12250 <__assert_fail@plt+0x10a8>
   121b4:	cmp	r2, #96	; 0x60
   121b8:	movne	r0, r3
   121bc:	pop	{r4, r5, r6, pc}
   121c0:	cmp	r3, #71	; 0x47
   121c4:	bne	121fc <__assert_fail@plt+0x1054>
   121c8:	ldrb	r3, [r0, #1]
   121cc:	bic	r3, r3, #32
   121d0:	cmp	r3, #66	; 0x42
   121d4:	bne	121fc <__assert_fail@plt+0x1054>
   121d8:	ldrb	r3, [r0, #2]
   121dc:	cmp	r3, #49	; 0x31
   121e0:	bne	121fc <__assert_fail@plt+0x1054>
   121e4:	ldrb	r3, [r0, #3]
   121e8:	cmp	r3, #56	; 0x38
   121ec:	bne	121fc <__assert_fail@plt+0x1054>
   121f0:	ldrb	r3, [r0, #4]
   121f4:	cmp	r3, #48	; 0x30
   121f8:	beq	12210 <__assert_fail@plt+0x1068>
   121fc:	ldr	r3, [pc, #80]	; 12254 <__assert_fail@plt+0x10ac>
   12200:	cmp	r5, #9
   12204:	ldr	r0, [pc, #76]	; 12258 <__assert_fail@plt+0x10b0>
   12208:	movne	r0, r3
   1220c:	pop	{r4, r5, r6, pc}
   12210:	ldrb	r3, [r0, #5]
   12214:	cmp	r3, #51	; 0x33
   12218:	bne	121fc <__assert_fail@plt+0x1054>
   1221c:	ldrb	r3, [r0, #6]
   12220:	cmp	r3, #48	; 0x30
   12224:	bne	121fc <__assert_fail@plt+0x1054>
   12228:	ldrb	r3, [r0, #7]
   1222c:	cmp	r3, #0
   12230:	bne	121fc <__assert_fail@plt+0x1054>
   12234:	ldrb	r2, [r4]
   12238:	ldr	r3, [pc, #28]	; 1225c <__assert_fail@plt+0x10b4>
   1223c:	ldr	r0, [pc, #28]	; 12260 <__assert_fail@plt+0x10b8>
   12240:	cmp	r2, #96	; 0x60
   12244:	movne	r0, r3
   12248:	pop	{r4, r5, r6, pc}
   1224c:	andeq	sl, r1, ip, asr r0
   12250:	andeq	sl, r1, r8, asr r0
   12254:	andeq	sl, r1, ip, rrx
   12258:	andeq	sl, r1, r8, rrx
   1225c:	andeq	sl, r1, r4, rrx
   12260:	andeq	sl, r1, r0, rrx
   12264:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12268:	sub	sp, sp, #140	; 0x8c
   1226c:	mov	r9, r1
   12270:	str	r3, [sp, #24]
   12274:	mov	r3, #1
   12278:	mov	sl, r0
   1227c:	str	r2, [sp, #44]	; 0x2c
   12280:	str	r3, [sp, #28]
   12284:	bl	10fd4 <__ctype_get_mb_cur_max@plt>
   12288:	ldr	r3, [sp, #180]	; 0xb4
   1228c:	mov	fp, r9
   12290:	mov	r9, sl
   12294:	lsr	r3, r3, #1
   12298:	and	r3, r3, #1
   1229c:	str	r3, [sp, #40]	; 0x28
   122a0:	ldr	r3, [sp, #180]	; 0xb4
   122a4:	mov	r2, #0
   122a8:	and	r3, r3, #4
   122ac:	str	r3, [sp, #100]	; 0x64
   122b0:	ldr	r3, [sp, #180]	; 0xb4
   122b4:	str	r2, [sp, #76]	; 0x4c
   122b8:	and	r3, r3, #1
   122bc:	str	r3, [sp, #96]	; 0x60
   122c0:	str	r2, [sp, #36]	; 0x24
   122c4:	str	r2, [sp, #56]	; 0x38
   122c8:	str	r2, [sp, #68]	; 0x44
   122cc:	str	r2, [sp, #72]	; 0x48
   122d0:	str	r2, [sp, #84]	; 0x54
   122d4:	str	r0, [sp, #80]	; 0x50
   122d8:	ldr	r3, [sp, #176]	; 0xb0
   122dc:	cmp	r3, #10
   122e0:	ldrls	pc, [pc, r3, lsl #2]
   122e4:	b	134bc <__assert_fail@plt+0x2314>
   122e8:	andeq	r2, r1, r4, lsl r3
   122ec:	andeq	r2, r1, r4, lsr r6
   122f0:	andeq	r2, r1, ip, lsl #15
   122f4:	andeq	r2, r1, r8, ror #12
   122f8:	andeq	r2, r1, r0, ror #15
   122fc:	andeq	r2, r1, r0, asr #15
   12300:	andeq	r2, r1, r8, lsl #13
   12304:	andeq	r2, r1, ip, lsr #13
   12308:	ldrdeq	r2, [r1], -r4
   1230c:	ldrdeq	r2, [r1], -r4
   12310:	ldrdeq	r2, [r1], -r4
   12314:	mov	r3, #0
   12318:	ldr	r1, [sp, #56]	; 0x38
   1231c:	ldr	r2, [sp, #176]	; 0xb0
   12320:	ldr	lr, [sp, #176]	; 0xb0
   12324:	mov	r8, r3
   12328:	mov	ip, r3
   1232c:	str	r3, [sp, #40]	; 0x28
   12330:	mov	r3, r1
   12334:	cmp	r2, #2
   12338:	moveq	r3, #0
   1233c:	andne	r3, r3, #1
   12340:	mov	r0, r3
   12344:	str	r3, [sp, #92]	; 0x5c
   12348:	ldr	r3, [sp, #68]	; 0x44
   1234c:	sub	lr, lr, #2
   12350:	adds	r2, r3, #0
   12354:	movne	r2, #1
   12358:	and	r3, r1, ip
   1235c:	and	r3, r2, r3
   12360:	clz	lr, lr
   12364:	str	r3, [sp, #88]	; 0x58
   12368:	lsr	lr, lr, #5
   1236c:	mov	r3, ip
   12370:	and	r3, r3, lr
   12374:	mov	sl, #0
   12378:	and	r0, r2, r0
   1237c:	str	r3, [sp, #64]	; 0x40
   12380:	eor	r3, r1, #1
   12384:	str	lr, [sp, #52]	; 0x34
   12388:	str	r0, [sp, #48]	; 0x30
   1238c:	str	r3, [sp, #60]	; 0x3c
   12390:	ldr	r3, [sp, #24]
   12394:	cmn	r3, #1
   12398:	beq	128c8 <__assert_fail@plt+0x1720>
   1239c:	subs	r7, r3, sl
   123a0:	movne	r7, #1
   123a4:	cmp	r7, #0
   123a8:	beq	128e0 <__assert_fail@plt+0x1738>
   123ac:	ldr	r3, [sp, #48]	; 0x30
   123b0:	cmp	r3, #0
   123b4:	beq	12c4c <__assert_fail@plt+0x1aa4>
   123b8:	ldr	r2, [sp, #68]	; 0x44
   123bc:	ldr	r1, [sp, #24]
   123c0:	cmp	r2, #1
   123c4:	mov	r3, r2
   123c8:	movls	r3, #0
   123cc:	movhi	r3, #1
   123d0:	cmn	r1, #1
   123d4:	movne	r3, #0
   123d8:	cmp	r3, #0
   123dc:	add	r4, sl, r2
   123e0:	beq	123f0 <__assert_fail@plt+0x1248>
   123e4:	ldr	r0, [sp, #44]	; 0x2c
   123e8:	bl	11088 <strlen@plt>
   123ec:	str	r0, [sp, #24]
   123f0:	ldr	r3, [sp, #24]
   123f4:	cmp	r3, r4
   123f8:	ldr	r3, [sp, #44]	; 0x2c
   123fc:	add	r5, r3, sl
   12400:	bcc	12c54 <__assert_fail@plt+0x1aac>
   12404:	mov	r0, r5
   12408:	ldr	r2, [sp, #68]	; 0x44
   1240c:	ldr	r1, [sp, #72]	; 0x48
   12410:	bl	10f5c <memcmp@plt>
   12414:	cmp	r0, #0
   12418:	bne	12c54 <__assert_fail@plt+0x1aac>
   1241c:	ldr	r3, [sp, #40]	; 0x28
   12420:	cmp	r3, #0
   12424:	bne	13610 <__assert_fail@plt+0x2468>
   12428:	ldrb	r4, [r5]
   1242c:	cmp	r4, #126	; 0x7e
   12430:	ldrls	pc, [pc, r4, lsl #2]
   12434:	b	1354c <__assert_fail@plt+0x23a4>
   12438:	andeq	r2, r1, ip, lsl #22
   1243c:	andeq	r3, r1, ip, asr #10
   12440:	andeq	r3, r1, ip, asr #10
   12444:	andeq	r3, r1, ip, asr #10
   12448:	andeq	r3, r1, ip, asr #10
   1244c:	andeq	r3, r1, ip, asr #10
   12450:	andeq	r3, r1, ip, asr #10
   12454:	strdeq	r2, [r1], -r8
   12458:	andeq	r2, r1, r4, ror #21
   1245c:	andeq	r2, r1, r0, asr #21
   12460:	andeq	r2, r1, r0, lsr #21
   12464:	ldrdeq	r2, [r1], -r0
   12468:	andeq	r2, r1, r8, lsl #20
   1246c:	andeq	r2, r1, ip, lsr ip
   12470:	andeq	r3, r1, ip, asr #10
   12474:	andeq	r3, r1, ip, asr #10
   12478:	andeq	r3, r1, ip, asr #10
   1247c:	andeq	r3, r1, ip, asr #10
   12480:	andeq	r3, r1, ip, asr #10
   12484:	andeq	r3, r1, ip, asr #10
   12488:	andeq	r3, r1, ip, asr #10
   1248c:	andeq	r3, r1, ip, asr #10
   12490:	andeq	r3, r1, ip, asr #10
   12494:	andeq	r3, r1, ip, asr #10
   12498:	andeq	r3, r1, ip, asr #10
   1249c:	andeq	r3, r1, ip, asr #10
   124a0:	andeq	r3, r1, ip, asr #10
   124a4:	andeq	r3, r1, ip, asr #10
   124a8:	andeq	r3, r1, ip, asr #10
   124ac:	andeq	r3, r1, ip, asr #10
   124b0:	andeq	r3, r1, ip, asr #10
   124b4:	andeq	r3, r1, ip, asr #10
   124b8:	andeq	r2, r1, ip, lsr #24
   124bc:	andeq	r2, r1, ip, lsl #24
   124c0:	andeq	r2, r1, ip, lsl #24
   124c4:	andeq	r2, r1, ip, ror #23
   124c8:	andeq	r2, r1, ip, lsl #24
   124cc:	strdeq	r2, [r1], -r8
   124d0:	andeq	r2, r1, ip, lsl #24
   124d4:	ldrdeq	r2, [r1], -r4
   124d8:	andeq	r2, r1, ip, lsl #24
   124dc:	andeq	r2, r1, ip, lsl #24
   124e0:	andeq	r2, r1, ip, lsl #24
   124e4:	strdeq	r2, [r1], -r8
   124e8:	strdeq	r2, [r1], -r8
   124ec:	strdeq	r2, [r1], -r8
   124f0:	strdeq	r2, [r1], -r8
   124f4:	strdeq	r2, [r1], -r8
   124f8:	strdeq	r2, [r1], -r8
   124fc:	strdeq	r2, [r1], -r8
   12500:	strdeq	r2, [r1], -r8
   12504:	strdeq	r2, [r1], -r8
   12508:	strdeq	r2, [r1], -r8
   1250c:	strdeq	r2, [r1], -r8
   12510:	strdeq	r2, [r1], -r8
   12514:	strdeq	r2, [r1], -r8
   12518:	strdeq	r2, [r1], -r8
   1251c:	strdeq	r2, [r1], -r8
   12520:	strdeq	r2, [r1], -r8
   12524:	andeq	r2, r1, ip, lsl #24
   12528:	andeq	r2, r1, ip, lsl #24
   1252c:	andeq	r2, r1, ip, lsl #24
   12530:	andeq	r2, r1, ip, lsl #24
   12534:	andeq	r2, r1, r4, lsl #19
   12538:	andeq	r3, r1, ip, asr #10
   1253c:	strdeq	r2, [r1], -r8
   12540:	strdeq	r2, [r1], -r8
   12544:	strdeq	r2, [r1], -r8
   12548:	strdeq	r2, [r1], -r8
   1254c:	strdeq	r2, [r1], -r8
   12550:	strdeq	r2, [r1], -r8
   12554:	strdeq	r2, [r1], -r8
   12558:	strdeq	r2, [r1], -r8
   1255c:	strdeq	r2, [r1], -r8
   12560:	strdeq	r2, [r1], -r8
   12564:	strdeq	r2, [r1], -r8
   12568:	strdeq	r2, [r1], -r8
   1256c:	strdeq	r2, [r1], -r8
   12570:	strdeq	r2, [r1], -r8
   12574:	strdeq	r2, [r1], -r8
   12578:	strdeq	r2, [r1], -r8
   1257c:	strdeq	r2, [r1], -r8
   12580:	strdeq	r2, [r1], -r8
   12584:	strdeq	r2, [r1], -r8
   12588:	strdeq	r2, [r1], -r8
   1258c:	strdeq	r2, [r1], -r8
   12590:	strdeq	r2, [r1], -r8
   12594:	strdeq	r2, [r1], -r8
   12598:	strdeq	r2, [r1], -r8
   1259c:	strdeq	r2, [r1], -r8
   125a0:	strdeq	r2, [r1], -r8
   125a4:	andeq	r2, r1, ip, lsl #24
   125a8:	andeq	r2, r1, r0, asr r9
   125ac:	strdeq	r2, [r1], -r8
   125b0:	andeq	r2, r1, ip, lsl #24
   125b4:	strdeq	r2, [r1], -r8
   125b8:	andeq	r2, r1, ip, lsl #24
   125bc:	strdeq	r2, [r1], -r8
   125c0:	strdeq	r2, [r1], -r8
   125c4:	strdeq	r2, [r1], -r8
   125c8:	strdeq	r2, [r1], -r8
   125cc:	strdeq	r2, [r1], -r8
   125d0:	strdeq	r2, [r1], -r8
   125d4:	strdeq	r2, [r1], -r8
   125d8:	strdeq	r2, [r1], -r8
   125dc:	strdeq	r2, [r1], -r8
   125e0:	strdeq	r2, [r1], -r8
   125e4:	strdeq	r2, [r1], -r8
   125e8:	strdeq	r2, [r1], -r8
   125ec:	strdeq	r2, [r1], -r8
   125f0:	strdeq	r2, [r1], -r8
   125f4:	strdeq	r2, [r1], -r8
   125f8:	strdeq	r2, [r1], -r8
   125fc:	strdeq	r2, [r1], -r8
   12600:	strdeq	r2, [r1], -r8
   12604:	strdeq	r2, [r1], -r8
   12608:	strdeq	r2, [r1], -r8
   1260c:	strdeq	r2, [r1], -r8
   12610:	strdeq	r2, [r1], -r8
   12614:	strdeq	r2, [r1], -r8
   12618:	strdeq	r2, [r1], -r8
   1261c:	strdeq	r2, [r1], -r8
   12620:	strdeq	r2, [r1], -r8
   12624:	andeq	r2, r1, r8, lsl #16
   12628:	andeq	r2, r1, ip, lsl #24
   1262c:	andeq	r2, r1, r8, lsl #16
   12630:	andeq	r2, r1, ip, ror #23
   12634:	mov	r3, #1
   12638:	str	r3, [sp, #40]	; 0x28
   1263c:	str	r3, [sp, #68]	; 0x44
   12640:	mov	r8, #0
   12644:	ldr	r3, [pc, #4056]	; 13624 <__assert_fail@plt+0x247c>
   12648:	str	r3, [sp, #72]	; 0x48
   1264c:	mov	r3, #2
   12650:	str	r3, [sp, #176]	; 0xb0
   12654:	ldr	r1, [sp, #56]	; 0x38
   12658:	mov	r2, r3
   1265c:	ldr	ip, [sp, #40]	; 0x28
   12660:	mov	lr, r3
   12664:	b	12330 <__assert_fail@plt+0x1188>
   12668:	mov	r3, #1
   1266c:	str	r3, [sp, #56]	; 0x38
   12670:	str	r3, [sp, #68]	; 0x44
   12674:	str	r3, [sp, #40]	; 0x28
   12678:	ldr	r3, [pc, #4004]	; 13624 <__assert_fail@plt+0x247c>
   1267c:	mov	r8, #0
   12680:	str	r3, [sp, #72]	; 0x48
   12684:	b	1264c <__assert_fail@plt+0x14a4>
   12688:	mov	r3, #1
   1268c:	str	r3, [sp, #56]	; 0x38
   12690:	str	r3, [sp, #68]	; 0x44
   12694:	str	r3, [sp, #40]	; 0x28
   12698:	ldr	r3, [pc, #3976]	; 13628 <__assert_fail@plt+0x2480>
   1269c:	mov	r8, #0
   126a0:	str	r3, [sp, #72]	; 0x48
   126a4:	mov	r3, #5
   126a8:	b	12650 <__assert_fail@plt+0x14a8>
   126ac:	mov	r3, #0
   126b0:	str	r3, [sp, #40]	; 0x28
   126b4:	mov	r3, #1
   126b8:	str	r3, [sp, #56]	; 0x38
   126bc:	mov	r8, #0
   126c0:	mov	r1, r3
   126c4:	ldr	r2, [sp, #176]	; 0xb0
   126c8:	ldr	ip, [sp, #40]	; 0x28
   126cc:	ldr	lr, [sp, #176]	; 0xb0
   126d0:	b	12330 <__assert_fail@plt+0x1188>
   126d4:	ldr	r3, [sp, #176]	; 0xb0
   126d8:	cmp	r3, #10
   126dc:	beq	12720 <__assert_fail@plt+0x1578>
   126e0:	mov	r2, #5
   126e4:	ldr	r1, [pc, #3904]	; 1362c <__assert_fail@plt+0x2484>
   126e8:	mov	r0, #0
   126ec:	bl	10f74 <dcgettext@plt>
   126f0:	ldr	r2, [pc, #3892]	; 1362c <__assert_fail@plt+0x2484>
   126f4:	cmp	r0, r2
   126f8:	str	r0, [sp, #188]	; 0xbc
   126fc:	beq	137b8 <__assert_fail@plt+0x2610>
   12700:	mov	r2, #5
   12704:	ldr	r1, [pc, #3864]	; 13624 <__assert_fail@plt+0x247c>
   12708:	mov	r0, #0
   1270c:	bl	10f74 <dcgettext@plt>
   12710:	ldr	r2, [pc, #3852]	; 13624 <__assert_fail@plt+0x247c>
   12714:	cmp	r0, r2
   12718:	str	r0, [sp, #192]	; 0xc0
   1271c:	beq	137a8 <__assert_fail@plt+0x2600>
   12720:	ldr	r8, [sp, #40]	; 0x28
   12724:	cmp	r8, #0
   12728:	movne	r8, #0
   1272c:	bne	1275c <__assert_fail@plt+0x15b4>
   12730:	ldr	r3, [sp, #188]	; 0xbc
   12734:	ldrb	r3, [r3]
   12738:	cmp	r3, #0
   1273c:	beq	1275c <__assert_fail@plt+0x15b4>
   12740:	ldr	r2, [sp, #188]	; 0xbc
   12744:	cmp	fp, r8
   12748:	strbhi	r3, [r9, r8]
   1274c:	ldrb	r3, [r2, #1]!
   12750:	add	r8, r8, #1
   12754:	cmp	r3, #0
   12758:	bne	12744 <__assert_fail@plt+0x159c>
   1275c:	ldr	r0, [sp, #192]	; 0xc0
   12760:	bl	11088 <strlen@plt>
   12764:	ldr	r3, [sp, #192]	; 0xc0
   12768:	ldr	r2, [sp, #176]	; 0xb0
   1276c:	str	r3, [sp, #72]	; 0x48
   12770:	mov	r3, #1
   12774:	str	r3, [sp, #56]	; 0x38
   12778:	mov	r1, r3
   1277c:	ldr	ip, [sp, #40]	; 0x28
   12780:	ldr	lr, [sp, #176]	; 0xb0
   12784:	str	r0, [sp, #68]	; 0x44
   12788:	b	12330 <__assert_fail@plt+0x1188>
   1278c:	ldr	r3, [sp, #40]	; 0x28
   12790:	cmp	r3, #0
   12794:	beq	1343c <__assert_fail@plt+0x2294>
   12798:	mov	r3, #1
   1279c:	str	r3, [sp, #68]	; 0x44
   127a0:	ldr	r3, [pc, #3708]	; 13624 <__assert_fail@plt+0x247c>
   127a4:	str	r3, [sp, #72]	; 0x48
   127a8:	mov	r8, #0
   127ac:	ldr	r1, [sp, #56]	; 0x38
   127b0:	ldr	r2, [sp, #176]	; 0xb0
   127b4:	ldr	ip, [sp, #40]	; 0x28
   127b8:	ldr	lr, [sp, #176]	; 0xb0
   127bc:	b	12330 <__assert_fail@plt+0x1188>
   127c0:	ldr	r3, [sp, #40]	; 0x28
   127c4:	cmp	r3, #0
   127c8:	beq	134c0 <__assert_fail@plt+0x2318>
   127cc:	str	r3, [sp, #56]	; 0x38
   127d0:	mov	r3, #1
   127d4:	str	r3, [sp, #68]	; 0x44
   127d8:	ldr	r3, [pc, #3656]	; 13628 <__assert_fail@plt+0x2480>
   127dc:	b	127a4 <__assert_fail@plt+0x15fc>
   127e0:	ldr	r3, [sp, #40]	; 0x28
   127e4:	cmp	r3, #0
   127e8:	mov	r3, #1
   127ec:	streq	r3, [sp, #56]	; 0x38
   127f0:	beq	1343c <__assert_fail@plt+0x2294>
   127f4:	str	r3, [sp, #68]	; 0x44
   127f8:	ldr	r3, [pc, #3620]	; 13624 <__assert_fail@plt+0x247c>
   127fc:	mov	r8, #0
   12800:	str	r3, [sp, #72]	; 0x48
   12804:	b	1264c <__assert_fail@plt+0x14a4>
   12808:	ldr	r3, [sp, #24]
   1280c:	ldr	r6, [sp, #48]	; 0x30
   12810:	cmn	r3, #1
   12814:	beq	12e70 <__assert_fail@plt+0x1cc8>
   12818:	subs	r3, r3, #1
   1281c:	movne	r3, #1
   12820:	cmp	r3, #0
   12824:	beq	12bf0 <__assert_fail@plt+0x1a48>
   12828:	ldr	r1, [sp, #52]	; 0x34
   1282c:	mov	r7, r3
   12830:	mov	r3, #0
   12834:	str	r3, [sp, #32]
   12838:	ldr	r3, [sp, #60]	; 0x3c
   1283c:	orr	r2, r1, r3
   12840:	ldr	r3, [sp, #40]	; 0x28
   12844:	eor	r2, r2, #1
   12848:	orr	r2, r3, r2
   1284c:	tst	r2, #255	; 0xff
   12850:	bne	13174 <__assert_fail@plt+0x1fcc>
   12854:	cmp	r6, #0
   12858:	bne	12a34 <__assert_fail@plt+0x188c>
   1285c:	ldr	r3, [sp, #36]	; 0x24
   12860:	add	sl, sl, #1
   12864:	and	r3, r3, r7
   12868:	uxtb	r6, r3
   1286c:	cmp	r6, #0
   12870:	beq	1289c <__assert_fail@plt+0x16f4>
   12874:	cmp	fp, r8
   12878:	movhi	r3, #39	; 0x27
   1287c:	strbhi	r3, [r9, r8]
   12880:	add	r3, r8, #1
   12884:	cmp	fp, r3
   12888:	movhi	r2, #39	; 0x27
   1288c:	add	r8, r8, #2
   12890:	strbhi	r2, [r9, r3]
   12894:	mov	r3, #0
   12898:	str	r3, [sp, #36]	; 0x24
   1289c:	ldr	r2, [sp, #32]
   128a0:	cmp	r8, fp
   128a4:	ldr	r3, [sp, #28]
   128a8:	strbcc	r4, [r9, r8]
   128ac:	cmp	r2, #0
   128b0:	moveq	r3, #0
   128b4:	str	r3, [sp, #28]
   128b8:	ldr	r3, [sp, #24]
   128bc:	add	r8, r8, #1
   128c0:	cmn	r3, #1
   128c4:	bne	1239c <__assert_fail@plt+0x11f4>
   128c8:	ldr	r3, [sp, #44]	; 0x2c
   128cc:	ldrb	r3, [r3, sl]
   128d0:	adds	r7, r3, #0
   128d4:	movne	r7, #1
   128d8:	cmp	r7, #0
   128dc:	bne	123ac <__assert_fail@plt+0x1204>
   128e0:	ldr	r3, [sp, #64]	; 0x40
   128e4:	cmp	r8, #0
   128e8:	movne	r3, #0
   128ec:	andeq	r3, r3, #1
   128f0:	cmp	r3, #0
   128f4:	str	r3, [sp, #64]	; 0x40
   128f8:	bne	1339c <__assert_fail@plt+0x21f4>
   128fc:	ldr	r3, [sp, #40]	; 0x28
   12900:	ldr	r2, [sp, #52]	; 0x34
   12904:	eor	r3, r3, #1
   12908:	ands	r2, r2, r3
   1290c:	beq	137c8 <__assert_fail@plt+0x2620>
   12910:	ldr	r3, [sp, #76]	; 0x4c
   12914:	cmp	r3, #0
   12918:	beq	13798 <__assert_fail@plt+0x25f0>
   1291c:	ldr	r3, [sp, #28]
   12920:	cmp	r3, #0
   12924:	bne	13754 <__assert_fail@plt+0x25ac>
   12928:	ldr	r2, [sp, #84]	; 0x54
   1292c:	clz	r3, fp
   12930:	cmp	r2, #0
   12934:	lsr	r3, r3, #5
   12938:	moveq	r3, #0
   1293c:	cmp	r3, #0
   12940:	beq	136f4 <__assert_fail@plt+0x254c>
   12944:	mov	fp, r2
   12948:	str	r3, [sp, #76]	; 0x4c
   1294c:	b	122d8 <__assert_fail@plt+0x1130>
   12950:	ldr	r3, [sp, #176]	; 0xb0
   12954:	ldr	r6, [sp, #48]	; 0x30
   12958:	cmp	r3, #2
   1295c:	beq	12e94 <__assert_fail@plt+0x1cec>
   12960:	ldr	r3, [sp, #88]	; 0x58
   12964:	cmp	r3, #0
   12968:	beq	13418 <__assert_fail@plt+0x2270>
   1296c:	mov	r3, #0
   12970:	add	sl, sl, #1
   12974:	ldr	r6, [sp, #36]	; 0x24
   12978:	str	r3, [sp, #32]
   1297c:	mov	r4, #92	; 0x5c
   12980:	b	1286c <__assert_fail@plt+0x16c4>
   12984:	ldr	r3, [sp, #176]	; 0xb0
   12988:	ldr	r6, [sp, #48]	; 0x30
   1298c:	cmp	r3, #2
   12990:	beq	12ec4 <__assert_fail@plt+0x1d1c>
   12994:	cmp	r3, #5
   12998:	bne	13428 <__assert_fail@plt+0x2280>
   1299c:	ldr	r3, [sp, #100]	; 0x64
   129a0:	cmp	r3, #0
   129a4:	beq	1348c <__assert_fail@plt+0x22e4>
   129a8:	ldr	r2, [sp, #24]
   129ac:	add	r3, sl, #2
   129b0:	cmp	r2, r3
   129b4:	bls	129c4 <__assert_fail@plt+0x181c>
   129b8:	ldrb	r4, [r5, #1]
   129bc:	cmp	r4, #63	; 0x3f
   129c0:	beq	13634 <__assert_fail@plt+0x248c>
   129c4:	mov	r1, #0
   129c8:	str	r1, [sp, #32]
   129cc:	mov	r4, #63	; 0x3f
   129d0:	b	12838 <__assert_fail@plt+0x1690>
   129d4:	ldr	r3, [sp, #176]	; 0xb0
   129d8:	ldr	r6, [sp, #48]	; 0x30
   129dc:	cmp	r3, #2
   129e0:	beq	12ef0 <__assert_fail@plt+0x1d48>
   129e4:	str	r7, [sp, #32]
   129e8:	str	r7, [sp, #76]	; 0x4c
   129ec:	mov	r1, #0
   129f0:	mov	r4, #39	; 0x27
   129f4:	b	12838 <__assert_fail@plt+0x1690>
   129f8:	ldr	r6, [sp, #48]	; 0x30
   129fc:	ldr	r1, [sp, #52]	; 0x34
   12a00:	str	r7, [sp, #32]
   12a04:	b	12838 <__assert_fail@plt+0x1690>
   12a08:	ldr	r6, [sp, #48]	; 0x30
   12a0c:	ldr	r1, [sp, #52]	; 0x34
   12a10:	mov	r4, #12
   12a14:	mov	r3, #102	; 0x66
   12a18:	ldr	r2, [sp, #56]	; 0x38
   12a1c:	cmp	r2, #0
   12a20:	streq	r2, [sp, #32]
   12a24:	beq	12838 <__assert_fail@plt+0x1690>
   12a28:	mov	r4, r3
   12a2c:	mov	r3, #0
   12a30:	str	r3, [sp, #32]
   12a34:	ldr	r3, [sp, #40]	; 0x28
   12a38:	cmp	r3, #0
   12a3c:	bne	131ac <__assert_fail@plt+0x2004>
   12a40:	ldr	r3, [sp, #36]	; 0x24
   12a44:	eor	r3, r3, #1
   12a48:	and	r3, r3, r1
   12a4c:	ands	r3, r3, #255	; 0xff
   12a50:	beq	12a88 <__assert_fail@plt+0x18e0>
   12a54:	cmp	fp, r8
   12a58:	movhi	r2, #39	; 0x27
   12a5c:	strbhi	r2, [r9, r8]
   12a60:	add	r2, r8, #1
   12a64:	cmp	fp, r2
   12a68:	movhi	r1, #36	; 0x24
   12a6c:	strbhi	r1, [r9, r2]
   12a70:	add	r2, r8, #2
   12a74:	cmp	fp, r2
   12a78:	add	r8, r8, #3
   12a7c:	movhi	r1, #39	; 0x27
   12a80:	strbhi	r1, [r9, r2]
   12a84:	str	r3, [sp, #36]	; 0x24
   12a88:	cmp	fp, r8
   12a8c:	movhi	r3, #92	; 0x5c
   12a90:	strbhi	r3, [r9, r8]
   12a94:	add	sl, sl, #1
   12a98:	add	r8, r8, #1
   12a9c:	b	1289c <__assert_fail@plt+0x16f4>
   12aa0:	ldr	r6, [sp, #48]	; 0x30
   12aa4:	mov	r4, #10
   12aa8:	mov	r3, #110	; 0x6e
   12aac:	ldr	r2, [sp, #64]	; 0x40
   12ab0:	cmp	r2, #0
   12ab4:	bne	13534 <__assert_fail@plt+0x238c>
   12ab8:	ldr	r1, [sp, #52]	; 0x34
   12abc:	b	12a18 <__assert_fail@plt+0x1870>
   12ac0:	ldr	r6, [sp, #48]	; 0x30
   12ac4:	ldr	r1, [sp, #52]	; 0x34
   12ac8:	mov	r3, #116	; 0x74
   12acc:	b	12a18 <__assert_fail@plt+0x1870>
   12ad0:	ldr	r6, [sp, #48]	; 0x30
   12ad4:	ldr	r1, [sp, #52]	; 0x34
   12ad8:	mov	r4, #11
   12adc:	mov	r3, #118	; 0x76
   12ae0:	b	12a18 <__assert_fail@plt+0x1870>
   12ae4:	ldr	r6, [sp, #48]	; 0x30
   12ae8:	ldr	r1, [sp, #52]	; 0x34
   12aec:	mov	r4, #8
   12af0:	mov	r3, #98	; 0x62
   12af4:	b	12a18 <__assert_fail@plt+0x1870>
   12af8:	ldr	r6, [sp, #48]	; 0x30
   12afc:	ldr	r1, [sp, #52]	; 0x34
   12b00:	mov	r4, #7
   12b04:	mov	r3, #97	; 0x61
   12b08:	b	12a18 <__assert_fail@plt+0x1870>
   12b0c:	ldr	r3, [sp, #56]	; 0x38
   12b10:	ldr	r6, [sp, #48]	; 0x30
   12b14:	cmp	r3, #0
   12b18:	beq	12fdc <__assert_fail@plt+0x1e34>
   12b1c:	ldr	r3, [sp, #40]	; 0x28
   12b20:	cmp	r3, #0
   12b24:	bne	13610 <__assert_fail@plt+0x2468>
   12b28:	ldr	r3, [sp, #36]	; 0x24
   12b2c:	ldr	r2, [sp, #52]	; 0x34
   12b30:	eor	r3, r3, #1
   12b34:	ands	r3, r2, r3
   12b38:	moveq	r2, r8
   12b3c:	beq	12b74 <__assert_fail@plt+0x19cc>
   12b40:	cmp	fp, r8
   12b44:	movhi	r2, #39	; 0x27
   12b48:	strbhi	r2, [r9, r8]
   12b4c:	add	r2, r8, #1
   12b50:	cmp	fp, r2
   12b54:	movhi	r1, #36	; 0x24
   12b58:	strbhi	r1, [r9, r2]
   12b5c:	add	r2, r8, #2
   12b60:	cmp	fp, r2
   12b64:	movhi	r1, #39	; 0x27
   12b68:	strbhi	r1, [r9, r2]
   12b6c:	add	r2, r8, #3
   12b70:	str	r3, [sp, #36]	; 0x24
   12b74:	cmp	fp, r2
   12b78:	movhi	r3, #92	; 0x5c
   12b7c:	strbhi	r3, [r9, r2]
   12b80:	ldr	r3, [sp, #92]	; 0x5c
   12b84:	add	r8, r2, #1
   12b88:	cmp	r3, #0
   12b8c:	beq	13510 <__assert_fail@plt+0x2368>
   12b90:	ldr	r1, [sp, #24]
   12b94:	add	r3, sl, #1
   12b98:	cmp	r1, r3
   12b9c:	bls	12bd4 <__assert_fail@plt+0x1a2c>
   12ba0:	ldr	r1, [sp, #44]	; 0x2c
   12ba4:	ldrb	r3, [r1, r3]
   12ba8:	sub	r3, r3, #48	; 0x30
   12bac:	cmp	r3, #9
   12bb0:	bhi	12bd4 <__assert_fail@plt+0x1a2c>
   12bb4:	cmp	fp, r8
   12bb8:	movhi	r3, #48	; 0x30
   12bbc:	strbhi	r3, [r9, r8]
   12bc0:	add	r3, r2, #2
   12bc4:	cmp	fp, r3
   12bc8:	add	r8, r2, #3
   12bcc:	movhi	r1, #48	; 0x30
   12bd0:	strbhi	r1, [r9, r3]
   12bd4:	ldr	r3, [sp, #40]	; 0x28
   12bd8:	ldr	r1, [sp, #52]	; 0x34
   12bdc:	mov	r7, r3
   12be0:	str	r3, [sp, #32]
   12be4:	mov	r4, #48	; 0x30
   12be8:	b	12838 <__assert_fail@plt+0x1690>
   12bec:	ldr	r6, [sp, #48]	; 0x30
   12bf0:	cmp	sl, #0
   12bf4:	streq	r7, [sp, #32]
   12bf8:	beq	12c18 <__assert_fail@plt+0x1a70>
   12bfc:	mov	r3, #0
   12c00:	ldr	r1, [sp, #52]	; 0x34
   12c04:	str	r3, [sp, #32]
   12c08:	b	12838 <__assert_fail@plt+0x1690>
   12c0c:	ldr	r6, [sp, #48]	; 0x30
   12c10:	mov	r3, #0
   12c14:	str	r3, [sp, #32]
   12c18:	ldr	r3, [sp, #64]	; 0x40
   12c1c:	cmp	r3, #0
   12c20:	bne	1339c <__assert_fail@plt+0x21f4>
   12c24:	ldr	r1, [sp, #52]	; 0x34
   12c28:	b	12838 <__assert_fail@plt+0x1690>
   12c2c:	ldr	r3, [sp, #48]	; 0x30
   12c30:	mov	r6, r3
   12c34:	str	r3, [sp, #32]
   12c38:	b	12c18 <__assert_fail@plt+0x1a70>
   12c3c:	ldr	r6, [sp, #48]	; 0x30
   12c40:	mov	r4, #13
   12c44:	mov	r3, #114	; 0x72
   12c48:	b	12aac <__assert_fail@plt+0x1904>
   12c4c:	ldr	r3, [sp, #44]	; 0x2c
   12c50:	add	r5, r3, sl
   12c54:	ldrb	r4, [r5]
   12c58:	cmp	r4, #126	; 0x7e
   12c5c:	ldrls	pc, [pc, r4, lsl #2]
   12c60:	b	12ffc <__assert_fail@plt+0x1e54>
   12c64:	andeq	r2, r1, ip, asr #31
   12c68:	strdeq	r2, [r1], -ip
   12c6c:	strdeq	r2, [r1], -ip
   12c70:	strdeq	r2, [r1], -ip
   12c74:	strdeq	r2, [r1], -ip
   12c78:	strdeq	r2, [r1], -ip
   12c7c:	strdeq	r2, [r1], -ip
   12c80:	andeq	r2, r1, r4, asr #31
   12c84:			; <UNDEFINED> instruction: 0x00012fbc
   12c88:			; <UNDEFINED> instruction: 0x00012fb0
   12c8c:	andeq	r2, r1, r8, lsr #31
   12c90:	andeq	r2, r1, r0, lsr #31
   12c94:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   12c98:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12c9c:	strdeq	r2, [r1], -ip
   12ca0:	strdeq	r2, [r1], -ip
   12ca4:	strdeq	r2, [r1], -ip
   12ca8:	strdeq	r2, [r1], -ip
   12cac:	strdeq	r2, [r1], -ip
   12cb0:	strdeq	r2, [r1], -ip
   12cb4:	strdeq	r2, [r1], -ip
   12cb8:	strdeq	r2, [r1], -ip
   12cbc:	strdeq	r2, [r1], -ip
   12cc0:	strdeq	r2, [r1], -ip
   12cc4:	strdeq	r2, [r1], -ip
   12cc8:	strdeq	r2, [r1], -ip
   12ccc:	strdeq	r2, [r1], -ip
   12cd0:	strdeq	r2, [r1], -ip
   12cd4:	strdeq	r2, [r1], -ip
   12cd8:	strdeq	r2, [r1], -ip
   12cdc:	strdeq	r2, [r1], -ip
   12ce0:	strdeq	r2, [r1], -ip
   12ce4:	andeq	r2, r1, r4, lsl #31
   12ce8:	andeq	r2, r1, ip, ror pc
   12cec:	andeq	r2, r1, ip, ror pc
   12cf0:	andeq	r2, r1, r4, ror pc
   12cf4:	andeq	r2, r1, ip, ror pc
   12cf8:	andeq	r2, r1, ip, ror #30
   12cfc:	andeq	r2, r1, ip, ror pc
   12d00:	andeq	r2, r1, r0, ror #29
   12d04:	andeq	r2, r1, ip, ror pc
   12d08:	andeq	r2, r1, ip, ror pc
   12d0c:	andeq	r2, r1, ip, ror pc
   12d10:	andeq	r2, r1, ip, ror #30
   12d14:	andeq	r2, r1, ip, ror #30
   12d18:	andeq	r2, r1, ip, ror #30
   12d1c:	andeq	r2, r1, ip, ror #30
   12d20:	andeq	r2, r1, ip, ror #30
   12d24:	andeq	r2, r1, ip, ror #30
   12d28:	andeq	r2, r1, ip, ror #30
   12d2c:	andeq	r2, r1, ip, ror #30
   12d30:	andeq	r2, r1, ip, ror #30
   12d34:	andeq	r2, r1, ip, ror #30
   12d38:	andeq	r2, r1, ip, ror #30
   12d3c:	andeq	r2, r1, ip, ror #30
   12d40:	andeq	r2, r1, ip, ror #30
   12d44:	andeq	r2, r1, ip, ror #30
   12d48:	andeq	r2, r1, ip, ror #30
   12d4c:	andeq	r2, r1, ip, ror #30
   12d50:	andeq	r2, r1, ip, ror pc
   12d54:	andeq	r2, r1, ip, ror pc
   12d58:	andeq	r2, r1, ip, ror pc
   12d5c:	andeq	r2, r1, ip, ror pc
   12d60:			; <UNDEFINED> instruction: 0x00012eb4
   12d64:	strdeq	r2, [r1], -ip
   12d68:	andeq	r2, r1, ip, ror #30
   12d6c:	andeq	r2, r1, ip, ror #30
   12d70:	andeq	r2, r1, ip, ror #30
   12d74:	andeq	r2, r1, ip, ror #30
   12d78:	andeq	r2, r1, ip, ror #30
   12d7c:	andeq	r2, r1, ip, ror #30
   12d80:	andeq	r2, r1, ip, ror #30
   12d84:	andeq	r2, r1, ip, ror #30
   12d88:	andeq	r2, r1, ip, ror #30
   12d8c:	andeq	r2, r1, ip, ror #30
   12d90:	andeq	r2, r1, ip, ror #30
   12d94:	andeq	r2, r1, ip, ror #30
   12d98:	andeq	r2, r1, ip, ror #30
   12d9c:	andeq	r2, r1, ip, ror #30
   12da0:	andeq	r2, r1, ip, ror #30
   12da4:	andeq	r2, r1, ip, ror #30
   12da8:	andeq	r2, r1, ip, ror #30
   12dac:	andeq	r2, r1, ip, ror #30
   12db0:	andeq	r2, r1, ip, ror #30
   12db4:	andeq	r2, r1, ip, ror #30
   12db8:	andeq	r2, r1, ip, ror #30
   12dbc:	andeq	r2, r1, ip, ror #30
   12dc0:	andeq	r2, r1, ip, ror #30
   12dc4:	andeq	r2, r1, ip, ror #30
   12dc8:	andeq	r2, r1, ip, ror #30
   12dcc:	andeq	r2, r1, ip, ror #30
   12dd0:	andeq	r2, r1, ip, ror pc
   12dd4:	andeq	r2, r1, r4, lsl #29
   12dd8:	andeq	r2, r1, ip, ror #30
   12ddc:	andeq	r2, r1, ip, ror pc
   12de0:	andeq	r2, r1, ip, ror #30
   12de4:	andeq	r2, r1, ip, ror pc
   12de8:	andeq	r2, r1, ip, ror #30
   12dec:	andeq	r2, r1, ip, ror #30
   12df0:	andeq	r2, r1, ip, ror #30
   12df4:	andeq	r2, r1, ip, ror #30
   12df8:	andeq	r2, r1, ip, ror #30
   12dfc:	andeq	r2, r1, ip, ror #30
   12e00:	andeq	r2, r1, ip, ror #30
   12e04:	andeq	r2, r1, ip, ror #30
   12e08:	andeq	r2, r1, ip, ror #30
   12e0c:	andeq	r2, r1, ip, ror #30
   12e10:	andeq	r2, r1, ip, ror #30
   12e14:	andeq	r2, r1, ip, ror #30
   12e18:	andeq	r2, r1, ip, ror #30
   12e1c:	andeq	r2, r1, ip, ror #30
   12e20:	andeq	r2, r1, ip, ror #30
   12e24:	andeq	r2, r1, ip, ror #30
   12e28:	andeq	r2, r1, ip, ror #30
   12e2c:	andeq	r2, r1, ip, ror #30
   12e30:	andeq	r2, r1, ip, ror #30
   12e34:	andeq	r2, r1, ip, ror #30
   12e38:	andeq	r2, r1, ip, ror #30
   12e3c:	andeq	r2, r1, ip, ror #30
   12e40:	andeq	r2, r1, ip, ror #30
   12e44:	andeq	r2, r1, ip, ror #30
   12e48:	andeq	r2, r1, ip, ror #30
   12e4c:	andeq	r2, r1, ip, ror #30
   12e50:	andeq	r2, r1, r0, ror #28
   12e54:	andeq	r2, r1, ip, ror pc
   12e58:	andeq	r2, r1, r0, ror #28
   12e5c:	andeq	r2, r1, r4, ror pc
   12e60:	ldr	r3, [sp, #24]
   12e64:	mov	r6, #0
   12e68:	cmn	r3, #1
   12e6c:	bne	12818 <__assert_fail@plt+0x1670>
   12e70:	ldr	r3, [sp, #44]	; 0x2c
   12e74:	ldrb	r3, [r3, #1]
   12e78:	adds	r3, r3, #0
   12e7c:	movne	r3, #1
   12e80:	b	12820 <__assert_fail@plt+0x1678>
   12e84:	ldr	r3, [sp, #176]	; 0xb0
   12e88:	mov	r6, #0
   12e8c:	cmp	r3, #2
   12e90:	bne	12960 <__assert_fail@plt+0x17b8>
   12e94:	ldr	r3, [sp, #64]	; 0x40
   12e98:	cmp	r3, #0
   12e9c:	bne	136d4 <__assert_fail@plt+0x252c>
   12ea0:	add	sl, sl, #1
   12ea4:	ldr	r6, [sp, #36]	; 0x24
   12ea8:	str	r3, [sp, #32]
   12eac:	mov	r4, #92	; 0x5c
   12eb0:	b	1286c <__assert_fail@plt+0x16c4>
   12eb4:	ldr	r3, [sp, #176]	; 0xb0
   12eb8:	mov	r6, #0
   12ebc:	cmp	r3, #2
   12ec0:	bne	12994 <__assert_fail@plt+0x17ec>
   12ec4:	ldr	r3, [sp, #40]	; 0x28
   12ec8:	cmp	r3, #0
   12ecc:	bne	131b0 <__assert_fail@plt+0x2008>
   12ed0:	mov	r1, r7
   12ed4:	str	r3, [sp, #32]
   12ed8:	mov	r4, #63	; 0x3f
   12edc:	b	12838 <__assert_fail@plt+0x1690>
   12ee0:	ldr	r3, [sp, #176]	; 0xb0
   12ee4:	mov	r6, #0
   12ee8:	cmp	r3, #2
   12eec:	bne	129e4 <__assert_fail@plt+0x183c>
   12ef0:	ldr	r3, [sp, #64]	; 0x40
   12ef4:	cmp	r3, #0
   12ef8:	bne	136d4 <__assert_fail@plt+0x252c>
   12efc:	ldr	r2, [sp, #84]	; 0x54
   12f00:	adds	r3, fp, #0
   12f04:	movne	r3, #1
   12f08:	cmp	r2, #0
   12f0c:	movne	r3, #0
   12f10:	cmp	r3, #0
   12f14:	strne	fp, [sp, #84]	; 0x54
   12f18:	movne	fp, #0
   12f1c:	bne	12f4c <__assert_fail@plt+0x1da4>
   12f20:	cmp	fp, r8
   12f24:	movhi	r3, #39	; 0x27
   12f28:	strbhi	r3, [r9, r8]
   12f2c:	add	r3, r8, #1
   12f30:	cmp	fp, r3
   12f34:	movhi	r2, #92	; 0x5c
   12f38:	strbhi	r2, [r9, r3]
   12f3c:	add	r3, r8, #2
   12f40:	cmp	fp, r3
   12f44:	movhi	r2, #39	; 0x27
   12f48:	strbhi	r2, [r9, r3]
   12f4c:	ldr	r3, [sp, #64]	; 0x40
   12f50:	add	r8, r8, #3
   12f54:	mov	r1, r7
   12f58:	str	r7, [sp, #32]
   12f5c:	str	r7, [sp, #76]	; 0x4c
   12f60:	str	r3, [sp, #36]	; 0x24
   12f64:	mov	r4, #39	; 0x27
   12f68:	b	12838 <__assert_fail@plt+0x1690>
   12f6c:	mov	r6, #0
   12f70:	b	129fc <__assert_fail@plt+0x1854>
   12f74:	mov	r6, #0
   12f78:	b	12bf0 <__assert_fail@plt+0x1a48>
   12f7c:	mov	r6, #0
   12f80:	b	12c10 <__assert_fail@plt+0x1a68>
   12f84:	str	r7, [sp, #32]
   12f88:	mov	r6, #0
   12f8c:	b	12c18 <__assert_fail@plt+0x1a70>
   12f90:	mov	r6, #0
   12f94:	b	12c40 <__assert_fail@plt+0x1a98>
   12f98:	mov	r6, #0
   12f9c:	b	12a0c <__assert_fail@plt+0x1864>
   12fa0:	mov	r6, #0
   12fa4:	b	12ad4 <__assert_fail@plt+0x192c>
   12fa8:	mov	r6, #0
   12fac:	b	12aa4 <__assert_fail@plt+0x18fc>
   12fb0:	mov	r6, #0
   12fb4:	mov	r3, #116	; 0x74
   12fb8:	b	12aac <__assert_fail@plt+0x1904>
   12fbc:	mov	r6, #0
   12fc0:	b	12ae8 <__assert_fail@plt+0x1940>
   12fc4:	mov	r6, #0
   12fc8:	b	12afc <__assert_fail@plt+0x1954>
   12fcc:	ldr	r3, [sp, #56]	; 0x38
   12fd0:	mov	r6, #0
   12fd4:	cmp	r3, #0
   12fd8:	bne	12b1c <__assert_fail@plt+0x1974>
   12fdc:	ldr	r3, [sp, #96]	; 0x60
   12fe0:	cmp	r3, #0
   12fe4:	addne	sl, sl, #1
   12fe8:	bne	12390 <__assert_fail@plt+0x11e8>
   12fec:	ldr	r1, [sp, #52]	; 0x34
   12ff0:	str	r3, [sp, #32]
   12ff4:	mov	r4, r3
   12ff8:	b	12838 <__assert_fail@plt+0x1690>
   12ffc:	mov	r6, #0
   13000:	ldr	r3, [sp, #80]	; 0x50
   13004:	cmp	r3, #1
   13008:	bne	131f8 <__assert_fail@plt+0x2050>
   1300c:	bl	11064 <__ctype_b_loc@plt>
   13010:	ldr	r2, [sp, #80]	; 0x50
   13014:	sxth	r3, r4
   13018:	mov	r1, r2
   1301c:	lsl	r3, r3, #1
   13020:	ldr	r2, [r0]
   13024:	ldrh	r3, [r2, r3]
   13028:	and	r3, r3, #16384	; 0x4000
   1302c:	cmp	r3, #0
   13030:	movne	r3, #1
   13034:	moveq	r3, #0
   13038:	str	r3, [sp, #32]
   1303c:	moveq	r3, #1
   13040:	movne	r3, #0
   13044:	ldr	r2, [sp, #56]	; 0x38
   13048:	and	r3, r3, r2
   1304c:	ands	r3, r3, #255	; 0xff
   13050:	beq	12c24 <__assert_fail@plt+0x1a7c>
   13054:	add	r1, sl, r1
   13058:	mov	r0, #0
   1305c:	ldr	r7, [sp, #40]	; 0x28
   13060:	ldr	r2, [sp, #36]	; 0x24
   13064:	ldr	lr, [sp, #52]	; 0x34
   13068:	b	13118 <__assert_fail@plt+0x1f70>
   1306c:	cmp	r7, #0
   13070:	bne	1346c <__assert_fail@plt+0x22c4>
   13074:	eor	r0, r2, #1
   13078:	ands	r0, lr, r0
   1307c:	beq	130b4 <__assert_fail@plt+0x1f0c>
   13080:	cmp	fp, r8
   13084:	movhi	r2, #39	; 0x27
   13088:	strbhi	r2, [r9, r8]
   1308c:	add	r2, r8, #1
   13090:	cmp	fp, r2
   13094:	movhi	ip, #36	; 0x24
   13098:	strbhi	ip, [r9, r2]
   1309c:	add	r2, r8, #2
   130a0:	cmp	fp, r2
   130a4:	movhi	ip, #39	; 0x27
   130a8:	strbhi	ip, [r9, r2]
   130ac:	add	r8, r8, #3
   130b0:	mov	r2, r0
   130b4:	cmp	fp, r8
   130b8:	movhi	r0, #92	; 0x5c
   130bc:	strbhi	r0, [r9, r8]
   130c0:	add	r0, r8, #1
   130c4:	cmp	fp, r0
   130c8:	lsrhi	ip, r4, #6
   130cc:	addhi	ip, ip, #48	; 0x30
   130d0:	strbhi	ip, [r9, r0]
   130d4:	add	ip, r8, #2
   130d8:	cmp	fp, ip
   130dc:	lsrhi	r0, r4, #3
   130e0:	andhi	r0, r0, #7
   130e4:	addhi	r0, r0, #48	; 0x30
   130e8:	add	sl, sl, #1
   130ec:	strbhi	r0, [r9, ip]
   130f0:	and	r4, r4, #7
   130f4:	cmp	sl, r1
   130f8:	add	r4, r4, #48	; 0x30
   130fc:	add	r8, r8, #3
   13100:	bcs	13484 <__assert_fail@plt+0x22dc>
   13104:	mov	r0, r3
   13108:	cmp	fp, r8
   1310c:	strbhi	r4, [r9, r8]
   13110:	ldrb	r4, [r5, #1]!
   13114:	add	r8, r8, #1
   13118:	cmp	r3, #0
   1311c:	bne	1306c <__assert_fail@plt+0x1ec4>
   13120:	cmp	r6, #0
   13124:	bne	131c8 <__assert_fail@plt+0x2020>
   13128:	eor	r6, r0, #1
   1312c:	and	r6, r6, r2
   13130:	add	sl, sl, #1
   13134:	cmp	r1, sl
   13138:	uxtb	r6, r6
   1313c:	bls	131f0 <__assert_fail@plt+0x2048>
   13140:	cmp	r6, #0
   13144:	beq	13108 <__assert_fail@plt+0x1f60>
   13148:	cmp	fp, r8
   1314c:	movhi	r2, #39	; 0x27
   13150:	strbhi	r2, [r9, r8]
   13154:	add	r2, r8, #1
   13158:	cmp	fp, r2
   1315c:	movhi	ip, #39	; 0x27
   13160:	strbhi	ip, [r9, r2]
   13164:	add	r8, r8, #2
   13168:	mov	r6, r3
   1316c:	mov	r2, r3
   13170:	b	13108 <__assert_fail@plt+0x1f60>
   13174:	ldr	r3, [sp, #184]	; 0xb8
   13178:	cmp	r3, #0
   1317c:	beq	12854 <__assert_fail@plt+0x16ac>
   13180:	lsr	r2, r4, #5
   13184:	mov	r0, r3
   13188:	uxtb	r2, r2
   1318c:	and	r3, r4, #31
   13190:	ldr	r2, [r0, r2, lsl #2]
   13194:	lsr	r3, r2, r3
   13198:	tst	r3, #1
   1319c:	beq	12854 <__assert_fail@plt+0x16ac>
   131a0:	ldr	r3, [sp, #40]	; 0x28
   131a4:	cmp	r3, #0
   131a8:	beq	12a40 <__assert_fail@plt+0x1898>
   131ac:	mov	r3, r1
   131b0:	str	r3, [sp, #64]	; 0x40
   131b4:	mov	sl, r9
   131b8:	ldr	r3, [sp, #56]	; 0x38
   131bc:	mov	r9, fp
   131c0:	ldr	r2, [sp, #64]	; 0x40
   131c4:	b	133b4 <__assert_fail@plt+0x220c>
   131c8:	cmp	fp, r8
   131cc:	eor	r6, r0, #1
   131d0:	movhi	ip, #92	; 0x5c
   131d4:	and	r6, r6, r2
   131d8:	add	sl, sl, #1
   131dc:	strbhi	ip, [r9, r8]
   131e0:	cmp	r1, sl
   131e4:	add	r8, r8, #1
   131e8:	uxtb	r6, r6
   131ec:	bhi	13140 <__assert_fail@plt+0x1f98>
   131f0:	str	r2, [sp, #36]	; 0x24
   131f4:	b	1286c <__assert_fail@plt+0x16c4>
   131f8:	ldr	r3, [sp, #24]
   131fc:	cmn	r3, #1
   13200:	mov	r3, #0
   13204:	str	r3, [sp, #128]	; 0x80
   13208:	str	r3, [sp, #132]	; 0x84
   1320c:	beq	13500 <__assert_fail@plt+0x2358>
   13210:	mov	r2, r7
   13214:	mov	r3, #0
   13218:	str	r7, [sp, #104]	; 0x68
   1321c:	str	r5, [sp, #116]	; 0x74
   13220:	mov	r7, r3
   13224:	mov	r5, r2
   13228:	str	r4, [sp, #32]
   1322c:	str	r6, [sp, #108]	; 0x6c
   13230:	str	r8, [sp, #112]	; 0x70
   13234:	ldr	r3, [sp, #44]	; 0x2c
   13238:	add	r6, sl, r7
   1323c:	add	r4, r3, r6
   13240:	ldr	r3, [sp, #24]
   13244:	mov	r1, r4
   13248:	sub	r2, r3, r6
   1324c:	add	r0, sp, #124	; 0x7c
   13250:	add	r3, sp, #128	; 0x80
   13254:	bl	18f9c <__assert_fail@plt+0x7df4>
   13258:	subs	r8, r0, #0
   1325c:	beq	135e4 <__assert_fail@plt+0x243c>
   13260:	cmn	r8, #1
   13264:	beq	135bc <__assert_fail@plt+0x2414>
   13268:	cmn	r8, #2
   1326c:	beq	13554 <__assert_fail@plt+0x23ac>
   13270:	ldr	r3, [sp, #64]	; 0x40
   13274:	cmp	r3, #0
   13278:	beq	13338 <__assert_fail@plt+0x2190>
   1327c:	cmp	r8, #1
   13280:	beq	13338 <__assert_fail@plt+0x2190>
   13284:	sub	r3, r8, #1
   13288:	add	r6, r3, r6
   1328c:	ldr	r3, [sp, #44]	; 0x2c
   13290:	add	r6, r3, r6
   13294:	ldrb	r3, [r4, #1]!
   13298:	sub	r3, r3, #91	; 0x5b
   1329c:	cmp	r3, #33	; 0x21
   132a0:	ldrls	pc, [pc, r3, lsl #2]
   132a4:	b	13330 <__assert_fail@plt+0x2188>
   132a8:	muleq	r1, ip, r3
   132ac:	muleq	r1, ip, r3
   132b0:	andeq	r3, r1, r0, lsr r3
   132b4:	muleq	r1, ip, r3
   132b8:	andeq	r3, r1, r0, lsr r3
   132bc:	muleq	r1, ip, r3
   132c0:	andeq	r3, r1, r0, lsr r3
   132c4:	andeq	r3, r1, r0, lsr r3
   132c8:	andeq	r3, r1, r0, lsr r3
   132cc:	andeq	r3, r1, r0, lsr r3
   132d0:	andeq	r3, r1, r0, lsr r3
   132d4:	andeq	r3, r1, r0, lsr r3
   132d8:	andeq	r3, r1, r0, lsr r3
   132dc:	andeq	r3, r1, r0, lsr r3
   132e0:	andeq	r3, r1, r0, lsr r3
   132e4:	andeq	r3, r1, r0, lsr r3
   132e8:	andeq	r3, r1, r0, lsr r3
   132ec:	andeq	r3, r1, r0, lsr r3
   132f0:	andeq	r3, r1, r0, lsr r3
   132f4:	andeq	r3, r1, r0, lsr r3
   132f8:	andeq	r3, r1, r0, lsr r3
   132fc:	andeq	r3, r1, r0, lsr r3
   13300:	andeq	r3, r1, r0, lsr r3
   13304:	andeq	r3, r1, r0, lsr r3
   13308:	andeq	r3, r1, r0, lsr r3
   1330c:	andeq	r3, r1, r0, lsr r3
   13310:	andeq	r3, r1, r0, lsr r3
   13314:	andeq	r3, r1, r0, lsr r3
   13318:	andeq	r3, r1, r0, lsr r3
   1331c:	andeq	r3, r1, r0, lsr r3
   13320:	andeq	r3, r1, r0, lsr r3
   13324:	andeq	r3, r1, r0, lsr r3
   13328:	andeq	r3, r1, r0, lsr r3
   1332c:	muleq	r1, ip, r3
   13330:	cmp	r6, r4
   13334:	bne	13294 <__assert_fail@plt+0x20ec>
   13338:	ldr	r0, [sp, #124]	; 0x7c
   1333c:	bl	10fa4 <iswprint@plt>
   13340:	add	r7, r7, r8
   13344:	cmp	r0, #0
   13348:	add	r0, sp, #128	; 0x80
   1334c:	moveq	r5, #0
   13350:	bl	10f50 <mbsinit@plt>
   13354:	cmp	r0, #0
   13358:	beq	13234 <__assert_fail@plt+0x208c>
   1335c:	ldr	r4, [sp, #32]
   13360:	str	r5, [sp, #32]
   13364:	ldr	r3, [sp, #32]
   13368:	mov	r1, r7
   1336c:	eor	r3, r3, #1
   13370:	ldr	r7, [sp, #104]	; 0x68
   13374:	ldr	r6, [sp, #108]	; 0x6c
   13378:	ldr	r8, [sp, #112]	; 0x70
   1337c:	ldr	r5, [sp, #116]	; 0x74
   13380:	uxtb	r3, r3
   13384:	cmp	r1, #1
   13388:	bls	13044 <__assert_fail@plt+0x1e9c>
   1338c:	ldr	r2, [sp, #56]	; 0x38
   13390:	and	r3, r3, r2
   13394:	uxtb	r3, r3
   13398:	b	13054 <__assert_fail@plt+0x1eac>
   1339c:	mov	r3, #2
   133a0:	str	r3, [sp, #176]	; 0xb0
   133a4:	ldr	r2, [sp, #64]	; 0x40
   133a8:	ldr	r3, [sp, #56]	; 0x38
   133ac:	mov	sl, r9
   133b0:	mov	r9, fp
   133b4:	and	r3, r3, r2
   133b8:	tst	r3, #255	; 0xff
   133bc:	ldr	r3, [sp, #176]	; 0xb0
   133c0:	movne	r3, #4
   133c4:	str	r3, [sp, #176]	; 0xb0
   133c8:	ldr	r3, [sp, #180]	; 0xb4
   133cc:	mov	ip, #0
   133d0:	bic	r3, r3, #2
   133d4:	str	r3, [sp, #4]
   133d8:	ldr	r3, [sp, #192]	; 0xc0
   133dc:	ldr	r2, [sp, #44]	; 0x2c
   133e0:	str	r3, [sp, #16]
   133e4:	ldr	r3, [sp, #188]	; 0xbc
   133e8:	mov	r1, r9
   133ec:	str	r3, [sp, #12]
   133f0:	ldr	r3, [sp, #176]	; 0xb0
   133f4:	mov	r0, sl
   133f8:	str	r3, [sp]
   133fc:	str	ip, [sp, #8]
   13400:	ldr	r3, [sp, #24]
   13404:	bl	12264 <__assert_fail@plt+0x10bc>
   13408:	mov	fp, r0
   1340c:	mov	r0, fp
   13410:	add	sp, sp, #140	; 0x8c
   13414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13418:	mov	r4, #92	; 0x5c
   1341c:	mov	r1, #0
   13420:	mov	r3, r4
   13424:	b	12a18 <__assert_fail@plt+0x1870>
   13428:	mov	r3, #0
   1342c:	ldr	r1, [sp, #52]	; 0x34
   13430:	str	r3, [sp, #32]
   13434:	mov	r4, #63	; 0x3f
   13438:	b	12838 <__assert_fail@plt+0x1690>
   1343c:	cmp	fp, #0
   13440:	beq	1349c <__assert_fail@plt+0x22f4>
   13444:	mov	r3, #39	; 0x27
   13448:	strb	r3, [r9]
   1344c:	mov	r3, #0
   13450:	str	r3, [sp, #40]	; 0x28
   13454:	mov	r3, #1
   13458:	str	r3, [sp, #68]	; 0x44
   1345c:	ldr	r3, [pc, #448]	; 13624 <__assert_fail@plt+0x247c>
   13460:	mov	r8, #1
   13464:	str	r3, [sp, #72]	; 0x48
   13468:	b	1264c <__assert_fail@plt+0x14a4>
   1346c:	ldr	r3, [sp, #40]	; 0x28
   13470:	mov	sl, r9
   13474:	str	r3, [sp, #56]	; 0x38
   13478:	mov	r9, fp
   1347c:	ldr	r2, [sp, #64]	; 0x40
   13480:	b	133b4 <__assert_fail@plt+0x220c>
   13484:	str	r2, [sp, #36]	; 0x24
   13488:	b	1289c <__assert_fail@plt+0x16f4>
   1348c:	mov	r1, #0
   13490:	str	r3, [sp, #32]
   13494:	mov	r4, #63	; 0x3f
   13498:	b	12838 <__assert_fail@plt+0x1690>
   1349c:	ldr	r3, [pc, #384]	; 13624 <__assert_fail@plt+0x247c>
   134a0:	str	r3, [sp, #72]	; 0x48
   134a4:	mov	r3, #0
   134a8:	str	r3, [sp, #40]	; 0x28
   134ac:	mov	r3, #1
   134b0:	str	r3, [sp, #68]	; 0x44
   134b4:	mov	r8, r3
   134b8:	b	1264c <__assert_fail@plt+0x14a4>
   134bc:	bl	11184 <abort@plt>
   134c0:	cmp	fp, #0
   134c4:	beq	13524 <__assert_fail@plt+0x237c>
   134c8:	mov	r2, #1
   134cc:	mov	r3, #34	; 0x22
   134d0:	strb	r3, [r9]
   134d4:	mov	r8, r2
   134d8:	mov	r3, r2
   134dc:	str	r2, [sp, #68]	; 0x44
   134e0:	str	r3, [sp, #56]	; 0x38
   134e4:	ldr	r3, [pc, #316]	; 13628 <__assert_fail@plt+0x2480>
   134e8:	ldr	r1, [sp, #56]	; 0x38
   134ec:	str	r3, [sp, #72]	; 0x48
   134f0:	ldr	r2, [sp, #176]	; 0xb0
   134f4:	ldr	ip, [sp, #40]	; 0x28
   134f8:	ldr	lr, [sp, #176]	; 0xb0
   134fc:	b	12330 <__assert_fail@plt+0x1188>
   13500:	ldr	r0, [sp, #44]	; 0x2c
   13504:	bl	11088 <strlen@plt>
   13508:	str	r0, [sp, #24]
   1350c:	b	13210 <__assert_fail@plt+0x2068>
   13510:	mov	r7, #0
   13514:	ldr	r1, [sp, #52]	; 0x34
   13518:	str	r3, [sp, #32]
   1351c:	mov	r4, #48	; 0x30
   13520:	b	12838 <__assert_fail@plt+0x1690>
   13524:	mov	r3, #1
   13528:	str	r3, [sp, #68]	; 0x44
   1352c:	mov	r8, r3
   13530:	b	134e0 <__assert_fail@plt+0x2338>
   13534:	mov	r3, #2
   13538:	mov	sl, r9
   1353c:	str	r3, [sp, #176]	; 0xb0
   13540:	mov	r9, fp
   13544:	ldr	r3, [sp, #56]	; 0x38
   13548:	b	133b4 <__assert_fail@plt+0x220c>
   1354c:	ldr	r6, [sp, #48]	; 0x30
   13550:	b	13000 <__assert_fail@plt+0x1e58>
   13554:	ldr	r0, [sp, #24]
   13558:	mov	ip, r6
   1355c:	cmp	r0, ip
   13560:	mov	r1, r7
   13564:	mov	r2, r4
   13568:	ldr	r7, [sp, #104]	; 0x68
   1356c:	ldr	r4, [sp, #32]
   13570:	ldr	r6, [sp, #108]	; 0x6c
   13574:	ldr	r8, [sp, #112]	; 0x70
   13578:	ldr	r5, [sp, #116]	; 0x74
   1357c:	bls	135ac <__assert_fail@plt+0x2404>
   13580:	ldrb	r3, [r2]
   13584:	cmp	r3, #0
   13588:	bne	1359c <__assert_fail@plt+0x23f4>
   1358c:	b	136bc <__assert_fail@plt+0x2514>
   13590:	ldrb	r3, [r2, #1]!
   13594:	cmp	r3, #0
   13598:	beq	136bc <__assert_fail@plt+0x2514>
   1359c:	add	r1, r1, #1
   135a0:	add	r3, sl, r1
   135a4:	cmp	r0, r3
   135a8:	bhi	13590 <__assert_fail@plt+0x23e8>
   135ac:	mov	r2, #0
   135b0:	mov	r3, r7
   135b4:	str	r2, [sp, #32]
   135b8:	b	13384 <__assert_fail@plt+0x21dc>
   135bc:	mov	r1, r7
   135c0:	ldr	r7, [sp, #104]	; 0x68
   135c4:	mov	r2, #0
   135c8:	ldr	r4, [sp, #32]
   135cc:	ldr	r6, [sp, #108]	; 0x6c
   135d0:	ldr	r8, [sp, #112]	; 0x70
   135d4:	ldr	r5, [sp, #116]	; 0x74
   135d8:	mov	r3, r7
   135dc:	str	r2, [sp, #32]
   135e0:	b	13384 <__assert_fail@plt+0x21dc>
   135e4:	mov	r3, r5
   135e8:	eor	r3, r3, #1
   135ec:	ldr	r4, [sp, #32]
   135f0:	mov	r1, r7
   135f4:	str	r5, [sp, #32]
   135f8:	ldr	r7, [sp, #104]	; 0x68
   135fc:	ldr	r6, [sp, #108]	; 0x6c
   13600:	ldr	r8, [sp, #112]	; 0x70
   13604:	ldr	r5, [sp, #116]	; 0x74
   13608:	uxtb	r3, r3
   1360c:	b	13384 <__assert_fail@plt+0x21dc>
   13610:	mov	sl, r9
   13614:	str	r3, [sp, #56]	; 0x38
   13618:	mov	r9, fp
   1361c:	ldr	r2, [sp, #64]	; 0x40
   13620:	b	133b4 <__assert_fail@plt+0x220c>
   13624:	andeq	sl, r1, ip, rrx
   13628:	andeq	sl, r1, r8, rrx
   1362c:	andeq	sl, r1, r0, ror r0
   13630:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13634:	ldr	r2, [sp, #44]	; 0x2c
   13638:	ldrb	r1, [r2, r3]
   1363c:	sub	r2, r1, #33	; 0x21
   13640:	uxtb	r2, r2
   13644:	cmp	r2, #29
   13648:	bhi	136c8 <__assert_fail@plt+0x2520>
   1364c:	ldr	r0, [pc, #-36]	; 13630 <__assert_fail@plt+0x2488>
   13650:	mov	ip, #1
   13654:	ands	r2, r0, ip, lsl r2
   13658:	beq	136e8 <__assert_fail@plt+0x2540>
   1365c:	ldr	r2, [sp, #40]	; 0x28
   13660:	cmp	r2, #0
   13664:	bne	137dc <__assert_fail@plt+0x2634>
   13668:	add	r2, r8, #1
   1366c:	cmp	fp, r8
   13670:	strbhi	r4, [r9, r8]
   13674:	cmp	fp, r2
   13678:	movhi	r0, #34	; 0x22
   1367c:	strbhi	r0, [r9, r2]
   13680:	add	r2, r8, #2
   13684:	cmp	fp, r2
   13688:	movhi	r0, #34	; 0x22
   1368c:	strbhi	r0, [r9, r2]
   13690:	add	r2, r8, #3
   13694:	cmp	fp, r2
   13698:	mov	sl, r3
   1369c:	ldr	r3, [sp, #40]	; 0x28
   136a0:	movhi	r0, #63	; 0x3f
   136a4:	mov	r4, r1
   136a8:	strbhi	r0, [r9, r2]
   136ac:	add	r8, r8, #4
   136b0:	mov	r1, r3
   136b4:	str	r3, [sp, #32]
   136b8:	b	12838 <__assert_fail@plt+0x1690>
   136bc:	str	r3, [sp, #32]
   136c0:	mov	r3, r7
   136c4:	b	13384 <__assert_fail@plt+0x21dc>
   136c8:	mov	r1, #0
   136cc:	str	r1, [sp, #32]
   136d0:	b	12838 <__assert_fail@plt+0x1690>
   136d4:	mov	sl, r9
   136d8:	ldr	r3, [sp, #56]	; 0x38
   136dc:	mov	r9, fp
   136e0:	ldr	r2, [sp, #64]	; 0x40
   136e4:	b	133b4 <__assert_fail@plt+0x220c>
   136e8:	str	r2, [sp, #32]
   136ec:	mov	r1, #0
   136f0:	b	12838 <__assert_fail@plt+0x1690>
   136f4:	ldr	r2, [sp, #76]	; 0x4c
   136f8:	mov	sl, r9
   136fc:	mov	r9, fp
   13700:	mov	fp, r8
   13704:	ldr	r1, [sp, #72]	; 0x48
   13708:	cmp	r1, #0
   1370c:	moveq	r3, #0
   13710:	andne	r3, r2, #1
   13714:	cmp	r3, #0
   13718:	beq	13744 <__assert_fail@plt+0x259c>
   1371c:	ldrb	r3, [r1]
   13720:	cmp	r3, #0
   13724:	beq	13744 <__assert_fail@plt+0x259c>
   13728:	mov	r2, r1
   1372c:	cmp	r9, fp
   13730:	strbhi	r3, [sl, fp]
   13734:	ldrb	r3, [r2, #1]!
   13738:	add	fp, fp, #1
   1373c:	cmp	r3, #0
   13740:	bne	1372c <__assert_fail@plt+0x2584>
   13744:	cmp	r9, fp
   13748:	movhi	r3, #0
   1374c:	strbhi	r3, [sl, fp]
   13750:	b	1340c <__assert_fail@plt+0x2264>
   13754:	ldr	r3, [sp, #192]	; 0xc0
   13758:	mov	ip, #5
   1375c:	str	r3, [sp, #16]
   13760:	ldr	r3, [sp, #188]	; 0xbc
   13764:	ldr	r2, [sp, #44]	; 0x2c
   13768:	str	r3, [sp, #12]
   1376c:	ldr	r3, [sp, #184]	; 0xb8
   13770:	ldr	r1, [sp, #84]	; 0x54
   13774:	str	r3, [sp, #8]
   13778:	ldr	r3, [sp, #180]	; 0xb4
   1377c:	mov	r0, r9
   13780:	str	r3, [sp, #4]
   13784:	str	ip, [sp]
   13788:	ldr	r3, [sp, #24]
   1378c:	bl	12264 <__assert_fail@plt+0x10bc>
   13790:	mov	fp, r0
   13794:	b	1340c <__assert_fail@plt+0x2264>
   13798:	mov	sl, r9
   1379c:	mov	r9, fp
   137a0:	mov	fp, r8
   137a4:	b	13704 <__assert_fail@plt+0x255c>
   137a8:	ldr	r1, [sp, #176]	; 0xb0
   137ac:	bl	12144 <__assert_fail@plt+0xf9c>
   137b0:	str	r0, [sp, #192]	; 0xc0
   137b4:	b	12720 <__assert_fail@plt+0x1578>
   137b8:	ldr	r1, [sp, #176]	; 0xb0
   137bc:	bl	12144 <__assert_fail@plt+0xf9c>
   137c0:	str	r0, [sp, #188]	; 0xbc
   137c4:	b	12700 <__assert_fail@plt+0x1558>
   137c8:	mov	sl, r9
   137cc:	mov	r2, r3
   137d0:	mov	r9, fp
   137d4:	mov	fp, r8
   137d8:	b	13704 <__assert_fail@plt+0x255c>
   137dc:	mov	sl, r9
   137e0:	mov	r9, fp
   137e4:	b	133c8 <__assert_fail@plt+0x2220>
   137e8:	push	{r4, r5, r6, lr}
   137ec:	mov	r5, r0
   137f0:	bl	110a0 <__errno_location@plt>
   137f4:	cmp	r5, #0
   137f8:	mov	r1, #48	; 0x30
   137fc:	mov	r4, r0
   13800:	ldr	r0, [pc, #16]	; 13818 <__assert_fail@plt+0x2670>
   13804:	ldr	r6, [r4]
   13808:	movne	r0, r5
   1380c:	bl	176e0 <__assert_fail@plt+0x6538>
   13810:	str	r6, [r4]
   13814:	pop	{r4, r5, r6, pc}
   13818:	andeq	fp, r2, ip, lsl #3
   1381c:	ldr	r3, [pc, #12]	; 13830 <__assert_fail@plt+0x2688>
   13820:	cmp	r0, #0
   13824:	moveq	r0, r3
   13828:	ldr	r0, [r0]
   1382c:	bx	lr
   13830:	andeq	fp, r2, ip, lsl #3
   13834:	ldr	r3, [pc, #12]	; 13848 <__assert_fail@plt+0x26a0>
   13838:	cmp	r0, #0
   1383c:	moveq	r0, r3
   13840:	str	r1, [r0]
   13844:	bx	lr
   13848:	andeq	fp, r2, ip, lsl #3
   1384c:	ldr	r3, [pc, #52]	; 13888 <__assert_fail@plt+0x26e0>
   13850:	cmp	r0, #0
   13854:	moveq	r0, r3
   13858:	add	r3, r0, #8
   1385c:	push	{lr}		; (str lr, [sp, #-4]!)
   13860:	lsr	lr, r1, #5
   13864:	and	r1, r1, #31
   13868:	ldr	ip, [r3, lr, lsl #2]
   1386c:	lsr	r0, ip, r1
   13870:	eor	r2, r2, r0
   13874:	and	r2, r2, #1
   13878:	and	r0, r0, #1
   1387c:	eor	r1, ip, r2, lsl r1
   13880:	str	r1, [r3, lr, lsl #2]
   13884:	pop	{pc}		; (ldr pc, [sp], #4)
   13888:	andeq	fp, r2, ip, lsl #3
   1388c:	ldr	r3, [pc, #16]	; 138a4 <__assert_fail@plt+0x26fc>
   13890:	cmp	r0, #0
   13894:	movne	r3, r0
   13898:	ldr	r0, [r3, #4]
   1389c:	str	r1, [r3, #4]
   138a0:	bx	lr
   138a4:	andeq	fp, r2, ip, lsl #3
   138a8:	ldr	r3, [pc, #44]	; 138dc <__assert_fail@plt+0x2734>
   138ac:	cmp	r0, #0
   138b0:	moveq	r0, r3
   138b4:	mov	ip, #10
   138b8:	cmp	r2, #0
   138bc:	cmpne	r1, #0
   138c0:	str	ip, [r0]
   138c4:	beq	138d4 <__assert_fail@plt+0x272c>
   138c8:	str	r1, [r0, #40]	; 0x28
   138cc:	str	r2, [r0, #44]	; 0x2c
   138d0:	bx	lr
   138d4:	push	{r4, lr}
   138d8:	bl	11184 <abort@plt>
   138dc:	andeq	fp, r2, ip, lsl #3
   138e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   138e4:	sub	sp, sp, #24
   138e8:	ldr	ip, [pc, #108]	; 1395c <__assert_fail@plt+0x27b4>
   138ec:	ldr	r4, [sp, #56]	; 0x38
   138f0:	mov	r9, r2
   138f4:	cmp	r4, #0
   138f8:	moveq	r4, ip
   138fc:	mov	sl, r3
   13900:	mov	r7, r0
   13904:	mov	r8, r1
   13908:	bl	110a0 <__errno_location@plt>
   1390c:	ldr	r3, [r4, #44]	; 0x2c
   13910:	mov	r1, r8
   13914:	ldr	r6, [r0]
   13918:	str	r3, [sp, #16]
   1391c:	ldr	r2, [r4, #40]	; 0x28
   13920:	add	r3, r4, #8
   13924:	str	r3, [sp, #8]
   13928:	str	r2, [sp, #12]
   1392c:	ldr	r2, [r4, #4]
   13930:	mov	r5, r0
   13934:	str	r2, [sp, #4]
   13938:	ldr	ip, [r4]
   1393c:	mov	r3, sl
   13940:	mov	r2, r9
   13944:	mov	r0, r7
   13948:	str	ip, [sp]
   1394c:	bl	12264 <__assert_fail@plt+0x10bc>
   13950:	str	r6, [r5]
   13954:	add	sp, sp, #24
   13958:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1395c:	andeq	fp, r2, ip, lsl #3
   13960:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13964:	cmp	r2, #0
   13968:	sub	sp, sp, #36	; 0x24
   1396c:	ldr	r4, [pc, #164]	; 13a18 <__assert_fail@plt+0x2870>
   13970:	mov	r8, r1
   13974:	movne	r4, r2
   13978:	mov	r7, r0
   1397c:	bl	110a0 <__errno_location@plt>
   13980:	ldr	r3, [r4, #44]	; 0x2c
   13984:	ldr	r5, [r4, #4]
   13988:	add	r9, r4, #8
   1398c:	orr	r5, r5, #1
   13990:	mov	r1, #0
   13994:	mov	r2, r7
   13998:	ldr	fp, [r0]
   1399c:	str	r3, [sp, #16]
   139a0:	ldr	r3, [r4, #40]	; 0x28
   139a4:	stmib	sp, {r5, r9}
   139a8:	str	r3, [sp, #12]
   139ac:	ldr	r3, [r4]
   139b0:	mov	r6, r0
   139b4:	str	r3, [sp]
   139b8:	mov	r0, r1
   139bc:	mov	r3, r8
   139c0:	bl	12264 <__assert_fail@plt+0x10bc>
   139c4:	add	r1, r0, #1
   139c8:	mov	r0, r1
   139cc:	str	r1, [sp, #28]
   139d0:	bl	1719c <__assert_fail@plt+0x5ff4>
   139d4:	ldr	r3, [r4, #44]	; 0x2c
   139d8:	ldr	r1, [sp, #28]
   139dc:	str	r3, [sp, #16]
   139e0:	ldr	r3, [r4, #40]	; 0x28
   139e4:	str	r5, [sp, #4]
   139e8:	str	r3, [sp, #12]
   139ec:	str	r9, [sp, #8]
   139f0:	ldr	ip, [r4]
   139f4:	mov	r3, r8
   139f8:	mov	r2, r7
   139fc:	str	ip, [sp]
   13a00:	mov	sl, r0
   13a04:	bl	12264 <__assert_fail@plt+0x10bc>
   13a08:	mov	r0, sl
   13a0c:	str	fp, [r6]
   13a10:	add	sp, sp, #36	; 0x24
   13a14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a18:	andeq	fp, r2, ip, lsl #3
   13a1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a20:	cmp	r3, #0
   13a24:	sub	sp, sp, #44	; 0x2c
   13a28:	ldr	r4, [pc, #192]	; 13af0 <__assert_fail@plt+0x2948>
   13a2c:	mov	r6, r2
   13a30:	movne	r4, r3
   13a34:	mov	r9, r1
   13a38:	mov	r8, r0
   13a3c:	bl	110a0 <__errno_location@plt>
   13a40:	ldr	r3, [r4, #44]	; 0x2c
   13a44:	ldr	r5, [r4, #4]
   13a48:	add	sl, r4, #8
   13a4c:	cmp	r6, #0
   13a50:	orreq	r5, r5, #1
   13a54:	mov	r1, #0
   13a58:	ldr	r2, [r0]
   13a5c:	str	r3, [sp, #16]
   13a60:	ldr	r3, [r4, #40]	; 0x28
   13a64:	stmib	sp, {r5, sl}
   13a68:	str	r3, [sp, #12]
   13a6c:	ldr	r3, [r4]
   13a70:	mov	r7, r0
   13a74:	str	r2, [sp, #28]
   13a78:	str	r3, [sp]
   13a7c:	mov	r2, r8
   13a80:	mov	r3, r9
   13a84:	mov	r0, r1
   13a88:	bl	12264 <__assert_fail@plt+0x10bc>
   13a8c:	add	r1, r0, #1
   13a90:	mov	fp, r0
   13a94:	mov	r0, r1
   13a98:	str	r1, [sp, #36]	; 0x24
   13a9c:	bl	1719c <__assert_fail@plt+0x5ff4>
   13aa0:	ldr	r3, [r4, #44]	; 0x2c
   13aa4:	mov	r2, r8
   13aa8:	str	r3, [sp, #16]
   13aac:	ldr	r3, [r4, #40]	; 0x28
   13ab0:	str	r5, [sp, #4]
   13ab4:	str	r3, [sp, #12]
   13ab8:	str	sl, [sp, #8]
   13abc:	ldr	ip, [r4]
   13ac0:	ldr	r1, [sp, #36]	; 0x24
   13ac4:	mov	r3, r9
   13ac8:	str	ip, [sp]
   13acc:	str	r0, [sp, #32]
   13ad0:	bl	12264 <__assert_fail@plt+0x10bc>
   13ad4:	ldr	r2, [sp, #28]
   13ad8:	cmp	r6, #0
   13adc:	str	r2, [r7]
   13ae0:	ldr	r0, [sp, #32]
   13ae4:	strne	fp, [r6]
   13ae8:	add	sp, sp, #44	; 0x2c
   13aec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13af0:	andeq	fp, r2, ip, lsl #3
   13af4:	push	{r4, r5, r6, r7, r8, lr}
   13af8:	ldr	r6, [pc, #116]	; 13b74 <__assert_fail@plt+0x29cc>
   13afc:	ldr	r3, [r6, #4]
   13b00:	ldr	r7, [r6]
   13b04:	cmp	r3, #1
   13b08:	movgt	r5, r7
   13b0c:	movgt	r4, #1
   13b10:	ble	13b30 <__assert_fail@plt+0x2988>
   13b14:	ldr	r0, [r5, #12]
   13b18:	bl	12038 <__assert_fail@plt+0xe90>
   13b1c:	ldr	r3, [r6, #4]
   13b20:	add	r4, r4, #1
   13b24:	cmp	r3, r4
   13b28:	add	r5, r5, #8
   13b2c:	bgt	13b14 <__assert_fail@plt+0x296c>
   13b30:	ldr	r0, [r7, #4]
   13b34:	ldr	r4, [pc, #60]	; 13b78 <__assert_fail@plt+0x29d0>
   13b38:	cmp	r0, r4
   13b3c:	beq	13b50 <__assert_fail@plt+0x29a8>
   13b40:	bl	12038 <__assert_fail@plt+0xe90>
   13b44:	mov	r3, #256	; 0x100
   13b48:	str	r4, [r6, #12]
   13b4c:	str	r3, [r6, #8]
   13b50:	ldr	r4, [pc, #36]	; 13b7c <__assert_fail@plt+0x29d4>
   13b54:	cmp	r7, r4
   13b58:	beq	13b68 <__assert_fail@plt+0x29c0>
   13b5c:	mov	r0, r7
   13b60:	bl	12038 <__assert_fail@plt+0xe90>
   13b64:	str	r4, [r6]
   13b68:	mov	r3, #1
   13b6c:	str	r3, [r6, #4]
   13b70:	pop	{r4, r5, r6, r7, r8, pc}
   13b74:	andeq	fp, r2, r0, lsr #2
   13b78:			; <UNDEFINED> instruction: 0x0002b1bc
   13b7c:	andeq	fp, r2, r8, lsr #2
   13b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b84:	sub	sp, sp, #44	; 0x2c
   13b88:	mov	r5, r0
   13b8c:	mov	sl, r1
   13b90:	bl	110a0 <__errno_location@plt>
   13b94:	ldr	r4, [pc, #400]	; 13d2c <__assert_fail@plt+0x2b84>
   13b98:	cmn	r5, #-2147483647	; 0x80000001
   13b9c:	ldr	r6, [r4]
   13ba0:	mov	r8, r0
   13ba4:	movne	r0, #0
   13ba8:	moveq	r0, #1
   13bac:	ldr	r3, [r8]
   13bb0:	orrs	r0, r0, r5, lsr #31
   13bb4:	str	r3, [sp, #24]
   13bb8:	bne	13d28 <__assert_fail@plt+0x2b80>
   13bbc:	ldr	r2, [r4, #4]
   13bc0:	cmp	r5, r2
   13bc4:	blt	13c24 <__assert_fail@plt+0x2a7c>
   13bc8:	add	r7, r4, #8
   13bcc:	cmp	r6, r7
   13bd0:	str	r2, [sp, #36]	; 0x24
   13bd4:	beq	13cf8 <__assert_fail@plt+0x2b50>
   13bd8:	mov	r3, #8
   13bdc:	sub	r2, r5, r2
   13be0:	mov	r0, r6
   13be4:	str	r3, [sp]
   13be8:	add	r2, r2, #1
   13bec:	mvn	r3, #-2147483648	; 0x80000000
   13bf0:	add	r1, sp, #36	; 0x24
   13bf4:	bl	173b8 <__assert_fail@plt+0x6210>
   13bf8:	mov	r6, r0
   13bfc:	str	r0, [r4]
   13c00:	ldr	r0, [r4, #4]
   13c04:	ldr	r2, [sp, #36]	; 0x24
   13c08:	mov	r1, #0
   13c0c:	sub	r2, r2, r0
   13c10:	add	r0, r6, r0, lsl #3
   13c14:	lsl	r2, r2, #3
   13c18:	bl	110c4 <memset@plt>
   13c1c:	ldr	r3, [sp, #36]	; 0x24
   13c20:	str	r3, [r4, #4]
   13c24:	ldr	r4, [pc, #260]	; 13d30 <__assert_fail@plt+0x2b88>
   13c28:	add	fp, r6, r5, lsl #3
   13c2c:	ldr	r9, [r6, r5, lsl #3]
   13c30:	ldr	r0, [r4, #4]
   13c34:	ldr	r3, [r4]
   13c38:	ldr	r7, [fp, #4]
   13c3c:	ldr	r1, [r4, #44]	; 0x2c
   13c40:	ldr	r2, [r4, #40]	; 0x28
   13c44:	orr	r0, r0, #1
   13c48:	str	r3, [sp]
   13c4c:	add	r3, r4, #8
   13c50:	str	r0, [sp, #28]
   13c54:	str	r0, [sp, #4]
   13c58:	str	r1, [sp, #16]
   13c5c:	str	r2, [sp, #12]
   13c60:	str	r3, [sp, #8]
   13c64:	mov	r0, r7
   13c68:	mov	r1, r9
   13c6c:	mvn	r3, #0
   13c70:	mov	r2, sl
   13c74:	bl	12264 <__assert_fail@plt+0x10bc>
   13c78:	cmp	r9, r0
   13c7c:	bhi	13ce4 <__assert_fail@plt+0x2b3c>
   13c80:	add	r3, r4, #48	; 0x30
   13c84:	add	r9, r0, #1
   13c88:	cmp	r7, r3
   13c8c:	str	r9, [r6, r5, lsl #3]
   13c90:	beq	13c9c <__assert_fail@plt+0x2af4>
   13c94:	mov	r0, r7
   13c98:	bl	12038 <__assert_fail@plt+0xe90>
   13c9c:	mov	r0, r9
   13ca0:	bl	1719c <__assert_fail@plt+0x5ff4>
   13ca4:	ldr	ip, [r4, #44]	; 0x2c
   13ca8:	ldr	r3, [r4]
   13cac:	ldr	lr, [r4, #40]	; 0x28
   13cb0:	ldr	r4, [pc, #124]	; 13d34 <__assert_fail@plt+0x2b8c>
   13cb4:	mov	r2, sl
   13cb8:	mov	r1, r9
   13cbc:	str	r0, [fp, #4]
   13cc0:	str	r4, [sp, #8]
   13cc4:	ldr	r4, [sp, #28]
   13cc8:	str	r3, [sp]
   13ccc:	str	r4, [sp, #4]
   13cd0:	str	ip, [sp, #16]
   13cd4:	str	lr, [sp, #12]
   13cd8:	mvn	r3, #0
   13cdc:	mov	r7, r0
   13ce0:	bl	12264 <__assert_fail@plt+0x10bc>
   13ce4:	ldr	r3, [sp, #24]
   13ce8:	mov	r0, r7
   13cec:	str	r3, [r8]
   13cf0:	add	sp, sp, #44	; 0x2c
   13cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cf8:	mov	r3, #8
   13cfc:	sub	r2, r5, r2
   13d00:	str	r3, [sp]
   13d04:	add	r1, sp, #36	; 0x24
   13d08:	add	r2, r2, #1
   13d0c:	mvn	r3, #-2147483648	; 0x80000000
   13d10:	bl	173b8 <__assert_fail@plt+0x6210>
   13d14:	mov	r6, r0
   13d18:	ldm	r7, {r0, r1}
   13d1c:	str	r6, [r4]
   13d20:	stm	r6, {r0, r1}
   13d24:	b	13c00 <__assert_fail@plt+0x2a58>
   13d28:	bl	11184 <abort@plt>
   13d2c:	andeq	fp, r2, r0, lsr #2
   13d30:	andeq	fp, r2, ip, lsl #3
   13d34:	muleq	r2, r4, r1
   13d38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d3c:	sub	sp, sp, #52	; 0x34
   13d40:	mov	r5, r0
   13d44:	mov	sl, r1
   13d48:	mov	fp, r2
   13d4c:	bl	110a0 <__errno_location@plt>
   13d50:	ldr	r4, [pc, #408]	; 13ef0 <__assert_fail@plt+0x2d48>
   13d54:	cmn	r5, #-2147483647	; 0x80000001
   13d58:	ldr	r6, [r4]
   13d5c:	mov	r8, r0
   13d60:	movne	r0, #0
   13d64:	moveq	r0, #1
   13d68:	ldr	r3, [r8]
   13d6c:	orrs	r0, r0, r5, lsr #31
   13d70:	str	r3, [sp, #28]
   13d74:	bne	13eec <__assert_fail@plt+0x2d44>
   13d78:	ldr	r2, [r4, #4]
   13d7c:	cmp	r5, r2
   13d80:	blt	13de0 <__assert_fail@plt+0x2c38>
   13d84:	add	r7, r4, #8
   13d88:	cmp	r6, r7
   13d8c:	str	r2, [sp, #44]	; 0x2c
   13d90:	beq	13ebc <__assert_fail@plt+0x2d14>
   13d94:	mov	r3, #8
   13d98:	sub	r2, r5, r2
   13d9c:	mov	r0, r6
   13da0:	str	r3, [sp]
   13da4:	add	r2, r2, #1
   13da8:	mvn	r3, #-2147483648	; 0x80000000
   13dac:	add	r1, sp, #44	; 0x2c
   13db0:	bl	173b8 <__assert_fail@plt+0x6210>
   13db4:	mov	r6, r0
   13db8:	str	r0, [r4]
   13dbc:	ldr	r0, [r4, #4]
   13dc0:	ldr	r2, [sp, #44]	; 0x2c
   13dc4:	mov	r1, #0
   13dc8:	sub	r2, r2, r0
   13dcc:	add	r0, r6, r0, lsl #3
   13dd0:	lsl	r2, r2, #3
   13dd4:	bl	110c4 <memset@plt>
   13dd8:	ldr	r3, [sp, #44]	; 0x2c
   13ddc:	str	r3, [r4, #4]
   13de0:	ldr	r4, [pc, #268]	; 13ef4 <__assert_fail@plt+0x2d4c>
   13de4:	add	r3, r6, r5, lsl #3
   13de8:	str	r3, [sp, #32]
   13dec:	ldr	r7, [r3, #4]
   13df0:	ldr	r0, [r4, #4]
   13df4:	ldr	r3, [r4]
   13df8:	ldr	r9, [r6, r5, lsl #3]
   13dfc:	ldr	r1, [r4, #44]	; 0x2c
   13e00:	ldr	r2, [r4, #40]	; 0x28
   13e04:	orr	r0, r0, #1
   13e08:	str	r3, [sp]
   13e0c:	add	r3, r4, #8
   13e10:	str	r0, [sp, #36]	; 0x24
   13e14:	str	r0, [sp, #4]
   13e18:	str	r1, [sp, #16]
   13e1c:	str	r2, [sp, #12]
   13e20:	str	r3, [sp, #8]
   13e24:	mov	r0, r7
   13e28:	mov	r1, r9
   13e2c:	mov	r3, fp
   13e30:	mov	r2, sl
   13e34:	bl	12264 <__assert_fail@plt+0x10bc>
   13e38:	cmp	r9, r0
   13e3c:	bhi	13ea8 <__assert_fail@plt+0x2d00>
   13e40:	add	r3, r4, #48	; 0x30
   13e44:	add	r9, r0, #1
   13e48:	cmp	r7, r3
   13e4c:	str	r9, [r6, r5, lsl #3]
   13e50:	beq	13e5c <__assert_fail@plt+0x2cb4>
   13e54:	mov	r0, r7
   13e58:	bl	12038 <__assert_fail@plt+0xe90>
   13e5c:	mov	r0, r9
   13e60:	bl	1719c <__assert_fail@plt+0x5ff4>
   13e64:	ldr	ip, [sp, #32]
   13e68:	ldr	lr, [r4, #44]	; 0x2c
   13e6c:	ldr	r5, [r4, #40]	; 0x28
   13e70:	mov	r3, fp
   13e74:	mov	r2, sl
   13e78:	mov	r1, r9
   13e7c:	str	r0, [ip, #4]
   13e80:	ldr	ip, [r4]
   13e84:	ldr	r4, [pc, #108]	; 13ef8 <__assert_fail@plt+0x2d50>
   13e88:	str	lr, [sp, #16]
   13e8c:	str	r4, [sp, #8]
   13e90:	ldr	r4, [sp, #36]	; 0x24
   13e94:	str	r5, [sp, #12]
   13e98:	str	r4, [sp, #4]
   13e9c:	str	ip, [sp]
   13ea0:	mov	r7, r0
   13ea4:	bl	12264 <__assert_fail@plt+0x10bc>
   13ea8:	ldr	r3, [sp, #28]
   13eac:	mov	r0, r7
   13eb0:	str	r3, [r8]
   13eb4:	add	sp, sp, #52	; 0x34
   13eb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ebc:	mov	r3, #8
   13ec0:	sub	r2, r5, r2
   13ec4:	str	r3, [sp]
   13ec8:	add	r1, sp, #44	; 0x2c
   13ecc:	add	r2, r2, #1
   13ed0:	mvn	r3, #-2147483648	; 0x80000000
   13ed4:	bl	173b8 <__assert_fail@plt+0x6210>
   13ed8:	mov	r6, r0
   13edc:	ldm	r7, {r0, r1}
   13ee0:	str	r6, [r4]
   13ee4:	stm	r6, {r0, r1}
   13ee8:	b	13dbc <__assert_fail@plt+0x2c14>
   13eec:	bl	11184 <abort@plt>
   13ef0:	andeq	fp, r2, r0, lsr #2
   13ef4:	andeq	fp, r2, ip, lsl #3
   13ef8:	muleq	r2, r4, r1
   13efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f00:	sub	sp, sp, #44	; 0x2c
   13f04:	mov	sl, r0
   13f08:	bl	110a0 <__errno_location@plt>
   13f0c:	ldr	r4, [pc, #352]	; 14074 <__assert_fail@plt+0x2ecc>
   13f10:	ldr	r2, [r4, #4]
   13f14:	ldr	r5, [r4]
   13f18:	cmp	r2, #0
   13f1c:	ldr	r3, [r0]
   13f20:	mov	r8, r0
   13f24:	str	r3, [sp, #28]
   13f28:	bgt	13f84 <__assert_fail@plt+0x2ddc>
   13f2c:	add	r6, r4, #8
   13f30:	cmp	r5, r6
   13f34:	str	r2, [sp, #36]	; 0x24
   13f38:	beq	14044 <__assert_fail@plt+0x2e9c>
   13f3c:	mov	r3, #8
   13f40:	mov	r0, r5
   13f44:	str	r3, [sp]
   13f48:	rsb	r2, r2, #1
   13f4c:	mvn	r3, #-2147483648	; 0x80000000
   13f50:	add	r1, sp, #36	; 0x24
   13f54:	bl	173b8 <__assert_fail@plt+0x6210>
   13f58:	mov	r5, r0
   13f5c:	str	r0, [r4]
   13f60:	ldr	r0, [r4, #4]
   13f64:	ldr	r2, [sp, #36]	; 0x24
   13f68:	mov	r1, #0
   13f6c:	sub	r2, r2, r0
   13f70:	add	r0, r5, r0, lsl #3
   13f74:	lsl	r2, r2, #3
   13f78:	bl	110c4 <memset@plt>
   13f7c:	ldr	r3, [sp, #36]	; 0x24
   13f80:	str	r3, [r4, #4]
   13f84:	ldr	r4, [pc, #236]	; 14078 <__assert_fail@plt+0x2ed0>
   13f88:	ldr	r9, [r5]
   13f8c:	ldr	r6, [r5, #4]
   13f90:	ldr	r7, [r4, #4]
   13f94:	ldr	r1, [r4, #44]	; 0x2c
   13f98:	ldr	r2, [r4, #40]	; 0x28
   13f9c:	ldr	r3, [r4]
   13fa0:	orr	r7, r7, #1
   13fa4:	add	fp, r4, #8
   13fa8:	str	r1, [sp, #16]
   13fac:	str	r2, [sp, #12]
   13fb0:	str	r3, [sp]
   13fb4:	str	r7, [sp, #4]
   13fb8:	str	fp, [sp, #8]
   13fbc:	mov	r1, r9
   13fc0:	mov	r0, r6
   13fc4:	mvn	r3, #0
   13fc8:	mov	r2, sl
   13fcc:	bl	12264 <__assert_fail@plt+0x10bc>
   13fd0:	cmp	r9, r0
   13fd4:	bhi	14030 <__assert_fail@plt+0x2e88>
   13fd8:	add	r3, r4, #48	; 0x30
   13fdc:	add	r9, r0, #1
   13fe0:	cmp	r6, r3
   13fe4:	str	r9, [r5]
   13fe8:	beq	13ff4 <__assert_fail@plt+0x2e4c>
   13fec:	mov	r0, r6
   13ff0:	bl	12038 <__assert_fail@plt+0xe90>
   13ff4:	mov	r0, r9
   13ff8:	bl	1719c <__assert_fail@plt+0x5ff4>
   13ffc:	ldr	ip, [r4, #44]	; 0x2c
   14000:	ldr	r3, [r4]
   14004:	ldr	lr, [r4, #40]	; 0x28
   14008:	mov	r2, sl
   1400c:	mov	r1, r9
   14010:	str	r0, [r5, #4]
   14014:	str	r3, [sp]
   14018:	stmib	sp, {r7, fp}
   1401c:	str	ip, [sp, #16]
   14020:	str	lr, [sp, #12]
   14024:	mvn	r3, #0
   14028:	mov	r6, r0
   1402c:	bl	12264 <__assert_fail@plt+0x10bc>
   14030:	ldr	r3, [sp, #28]
   14034:	mov	r0, r6
   14038:	str	r3, [r8]
   1403c:	add	sp, sp, #44	; 0x2c
   14040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14044:	mov	r3, #8
   14048:	str	r3, [sp]
   1404c:	add	r1, sp, #36	; 0x24
   14050:	rsb	r2, r2, #1
   14054:	mvn	r3, #-2147483648	; 0x80000000
   14058:	mov	r0, #0
   1405c:	bl	173b8 <__assert_fail@plt+0x6210>
   14060:	mov	r5, r0
   14064:	ldm	r6, {r0, r1}
   14068:	str	r5, [r4]
   1406c:	stm	r5, {r0, r1}
   14070:	b	13f60 <__assert_fail@plt+0x2db8>
   14074:	andeq	fp, r2, r0, lsr #2
   14078:	andeq	fp, r2, ip, lsl #3
   1407c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14080:	sub	sp, sp, #44	; 0x2c
   14084:	mov	r9, r0
   14088:	mov	sl, r1
   1408c:	bl	110a0 <__errno_location@plt>
   14090:	ldr	r4, [pc, #364]	; 14204 <__assert_fail@plt+0x305c>
   14094:	ldr	r2, [r4, #4]
   14098:	ldr	r5, [r4]
   1409c:	cmp	r2, #0
   140a0:	ldr	r3, [r0]
   140a4:	mov	r7, r0
   140a8:	str	r3, [sp, #24]
   140ac:	bgt	14108 <__assert_fail@plt+0x2f60>
   140b0:	add	r6, r4, #8
   140b4:	cmp	r5, r6
   140b8:	str	r2, [sp, #36]	; 0x24
   140bc:	beq	141d4 <__assert_fail@plt+0x302c>
   140c0:	mov	r3, #8
   140c4:	mov	r0, r5
   140c8:	str	r3, [sp]
   140cc:	rsb	r2, r2, #1
   140d0:	mvn	r3, #-2147483648	; 0x80000000
   140d4:	add	r1, sp, #36	; 0x24
   140d8:	bl	173b8 <__assert_fail@plt+0x6210>
   140dc:	mov	r5, r0
   140e0:	str	r0, [r4]
   140e4:	ldr	r0, [r4, #4]
   140e8:	ldr	r2, [sp, #36]	; 0x24
   140ec:	mov	r1, #0
   140f0:	sub	r2, r2, r0
   140f4:	add	r0, r5, r0, lsl #3
   140f8:	lsl	r2, r2, #3
   140fc:	bl	110c4 <memset@plt>
   14100:	ldr	r3, [sp, #36]	; 0x24
   14104:	str	r3, [r4, #4]
   14108:	ldr	r4, [pc, #248]	; 14208 <__assert_fail@plt+0x3060>
   1410c:	ldr	r8, [r5]
   14110:	ldr	r6, [r5, #4]
   14114:	ldr	r0, [r4, #4]
   14118:	ldr	r1, [r4, #44]	; 0x2c
   1411c:	ldr	r2, [r4, #40]	; 0x28
   14120:	ldr	r3, [r4]
   14124:	orr	r0, r0, #1
   14128:	add	fp, r4, #8
   1412c:	str	r0, [sp, #28]
   14130:	str	r0, [sp, #4]
   14134:	str	r1, [sp, #16]
   14138:	str	r2, [sp, #12]
   1413c:	str	r3, [sp]
   14140:	str	fp, [sp, #8]
   14144:	mov	r1, r8
   14148:	mov	r0, r6
   1414c:	mov	r3, sl
   14150:	mov	r2, r9
   14154:	bl	12264 <__assert_fail@plt+0x10bc>
   14158:	cmp	r8, r0
   1415c:	bhi	141c0 <__assert_fail@plt+0x3018>
   14160:	add	r3, r4, #48	; 0x30
   14164:	add	r8, r0, #1
   14168:	cmp	r6, r3
   1416c:	str	r8, [r5]
   14170:	beq	1417c <__assert_fail@plt+0x2fd4>
   14174:	mov	r0, r6
   14178:	bl	12038 <__assert_fail@plt+0xe90>
   1417c:	mov	r0, r8
   14180:	bl	1719c <__assert_fail@plt+0x5ff4>
   14184:	ldr	lr, [r4, #44]	; 0x2c
   14188:	ldr	ip, [r4]
   1418c:	mov	r3, sl
   14190:	mov	r2, r9
   14194:	mov	r1, r8
   14198:	str	r0, [r5, #4]
   1419c:	ldr	r5, [r4, #40]	; 0x28
   141a0:	ldr	r4, [sp, #28]
   141a4:	str	fp, [sp, #8]
   141a8:	str	r4, [sp, #4]
   141ac:	str	lr, [sp, #16]
   141b0:	str	r5, [sp, #12]
   141b4:	str	ip, [sp]
   141b8:	mov	r6, r0
   141bc:	bl	12264 <__assert_fail@plt+0x10bc>
   141c0:	ldr	r3, [sp, #24]
   141c4:	mov	r0, r6
   141c8:	str	r3, [r7]
   141cc:	add	sp, sp, #44	; 0x2c
   141d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141d4:	mov	r3, #8
   141d8:	str	r3, [sp]
   141dc:	add	r1, sp, #36	; 0x24
   141e0:	rsb	r2, r2, #1
   141e4:	mvn	r3, #-2147483648	; 0x80000000
   141e8:	mov	r0, #0
   141ec:	bl	173b8 <__assert_fail@plt+0x6210>
   141f0:	mov	r5, r0
   141f4:	ldm	r6, {r0, r1}
   141f8:	str	r5, [r4]
   141fc:	stm	r5, {r0, r1}
   14200:	b	140e4 <__assert_fail@plt+0x2f3c>
   14204:	andeq	fp, r2, r0, lsr #2
   14208:	andeq	fp, r2, ip, lsl #3
   1420c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14210:	sub	sp, sp, #132	; 0x84
   14214:	mov	r5, r1
   14218:	mov	r4, r0
   1421c:	mov	r9, r2
   14220:	add	r0, sp, #80	; 0x50
   14224:	mov	r2, #48	; 0x30
   14228:	mov	r1, #0
   1422c:	bl	110c4 <memset@plt>
   14230:	cmp	r5, #10
   14234:	beq	143ec <__assert_fail@plt+0x3244>
   14238:	add	lr, sp, #80	; 0x50
   1423c:	str	r5, [sp, #80]	; 0x50
   14240:	ldm	lr!, {r0, r1, r2, r3}
   14244:	add	ip, sp, #32
   14248:	ldr	r6, [pc, #416]	; 143f0 <__assert_fail@plt+0x3248>
   1424c:	stmia	ip!, {r0, r1, r2, r3}
   14250:	ldm	lr!, {r0, r1, r2, r3}
   14254:	stmia	ip!, {r0, r1, r2, r3}
   14258:	ldm	lr, {r0, r1, r2, r3}
   1425c:	stm	ip, {r0, r1, r2, r3}
   14260:	bl	110a0 <__errno_location@plt>
   14264:	cmn	r4, #-2147483647	; 0x80000001
   14268:	ldr	r5, [r6]
   1426c:	mov	r7, r0
   14270:	movne	r0, #0
   14274:	moveq	r0, #1
   14278:	ldr	r3, [r7]
   1427c:	orrs	r0, r0, r4, lsr #31
   14280:	str	r3, [sp, #24]
   14284:	bne	143ec <__assert_fail@plt+0x3244>
   14288:	ldr	r2, [r6, #4]
   1428c:	cmp	r4, r2
   14290:	blt	142f0 <__assert_fail@plt+0x3148>
   14294:	add	r8, r6, #8
   14298:	cmp	r5, r8
   1429c:	str	r2, [sp, #80]	; 0x50
   142a0:	beq	143bc <__assert_fail@plt+0x3214>
   142a4:	mov	r3, #8
   142a8:	sub	r2, r4, r2
   142ac:	mov	r0, r5
   142b0:	str	r3, [sp]
   142b4:	add	r2, r2, #1
   142b8:	add	r1, sp, #80	; 0x50
   142bc:	mvn	r3, #-2147483648	; 0x80000000
   142c0:	bl	173b8 <__assert_fail@plt+0x6210>
   142c4:	mov	r5, r0
   142c8:	str	r0, [r6]
   142cc:	ldr	r0, [r6, #4]
   142d0:	ldr	r2, [sp, #80]	; 0x50
   142d4:	mov	r1, #0
   142d8:	sub	r2, r2, r0
   142dc:	add	r0, r5, r0, lsl #3
   142e0:	lsl	r2, r2, #3
   142e4:	bl	110c4 <memset@plt>
   142e8:	ldr	r3, [sp, #80]	; 0x50
   142ec:	str	r3, [r6, #4]
   142f0:	add	fp, r5, r4, lsl #3
   142f4:	ldr	r1, [sp, #36]	; 0x24
   142f8:	ldr	r8, [r5, r4, lsl #3]
   142fc:	ldr	r6, [fp, #4]
   14300:	ldr	r2, [sp, #72]	; 0x48
   14304:	ldr	r3, [sp, #32]
   14308:	ldr	ip, [sp, #76]	; 0x4c
   1430c:	orr	r1, r1, #1
   14310:	add	sl, sp, #40	; 0x28
   14314:	str	r1, [sp, #28]
   14318:	str	r1, [sp, #4]
   1431c:	str	r2, [sp, #12]
   14320:	str	r3, [sp]
   14324:	mov	r0, r6
   14328:	mov	r1, r8
   1432c:	str	ip, [sp, #16]
   14330:	str	sl, [sp, #8]
   14334:	mvn	r3, #0
   14338:	mov	r2, r9
   1433c:	bl	12264 <__assert_fail@plt+0x10bc>
   14340:	cmp	r8, r0
   14344:	bhi	143a8 <__assert_fail@plt+0x3200>
   14348:	ldr	r3, [pc, #164]	; 143f4 <__assert_fail@plt+0x324c>
   1434c:	add	r8, r0, #1
   14350:	cmp	r6, r3
   14354:	str	r8, [r5, r4, lsl #3]
   14358:	beq	14364 <__assert_fail@plt+0x31bc>
   1435c:	mov	r0, r6
   14360:	bl	12038 <__assert_fail@plt+0xe90>
   14364:	mov	r0, r8
   14368:	bl	1719c <__assert_fail@plt+0x5ff4>
   1436c:	ldr	lr, [sp, #76]	; 0x4c
   14370:	ldr	r3, [sp, #32]
   14374:	ldr	ip, [sp, #72]	; 0x48
   14378:	ldr	r4, [sp, #28]
   1437c:	mov	r2, r9
   14380:	mov	r1, r8
   14384:	str	r0, [fp, #4]
   14388:	str	r3, [sp]
   1438c:	str	sl, [sp, #8]
   14390:	str	r4, [sp, #4]
   14394:	str	lr, [sp, #16]
   14398:	str	ip, [sp, #12]
   1439c:	mvn	r3, #0
   143a0:	mov	r6, r0
   143a4:	bl	12264 <__assert_fail@plt+0x10bc>
   143a8:	ldr	r3, [sp, #24]
   143ac:	mov	r0, r6
   143b0:	str	r3, [r7]
   143b4:	add	sp, sp, #132	; 0x84
   143b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143bc:	mov	r3, #8
   143c0:	sub	r2, r4, r2
   143c4:	add	r1, sp, #80	; 0x50
   143c8:	str	r3, [sp]
   143cc:	add	r2, r2, #1
   143d0:	mvn	r3, #-2147483648	; 0x80000000
   143d4:	bl	173b8 <__assert_fail@plt+0x6210>
   143d8:	mov	r5, r0
   143dc:	ldm	r8, {r0, r1}
   143e0:	str	r5, [r6]
   143e4:	stm	r5, {r0, r1}
   143e8:	b	142cc <__assert_fail@plt+0x3124>
   143ec:	bl	11184 <abort@plt>
   143f0:	andeq	fp, r2, r0, lsr #2
   143f4:			; <UNDEFINED> instruction: 0x0002b1bc
   143f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143fc:	sub	sp, sp, #132	; 0x84
   14400:	mov	r5, r1
   14404:	mov	r4, r0
   14408:	mov	r9, r2
   1440c:	add	r0, sp, #80	; 0x50
   14410:	mov	r2, #48	; 0x30
   14414:	mov	r1, #0
   14418:	mov	sl, r3
   1441c:	bl	110c4 <memset@plt>
   14420:	cmp	r5, #10
   14424:	beq	145e0 <__assert_fail@plt+0x3438>
   14428:	add	lr, sp, #80	; 0x50
   1442c:	str	r5, [sp, #80]	; 0x50
   14430:	ldm	lr!, {r0, r1, r2, r3}
   14434:	add	ip, sp, #32
   14438:	ldr	r6, [pc, #420]	; 145e4 <__assert_fail@plt+0x343c>
   1443c:	stmia	ip!, {r0, r1, r2, r3}
   14440:	ldm	lr!, {r0, r1, r2, r3}
   14444:	stmia	ip!, {r0, r1, r2, r3}
   14448:	ldm	lr, {r0, r1, r2, r3}
   1444c:	stm	ip, {r0, r1, r2, r3}
   14450:	bl	110a0 <__errno_location@plt>
   14454:	cmn	r4, #-2147483647	; 0x80000001
   14458:	ldr	r5, [r6]
   1445c:	mov	r7, r0
   14460:	movne	r0, #0
   14464:	moveq	r0, #1
   14468:	ldr	r3, [r7]
   1446c:	orrs	r0, r0, r4, lsr #31
   14470:	str	r3, [sp, #24]
   14474:	bne	145e0 <__assert_fail@plt+0x3438>
   14478:	ldr	r2, [r6, #4]
   1447c:	cmp	r4, r2
   14480:	blt	144e0 <__assert_fail@plt+0x3338>
   14484:	add	r8, r6, #8
   14488:	cmp	r5, r8
   1448c:	str	r2, [sp, #80]	; 0x50
   14490:	beq	145b0 <__assert_fail@plt+0x3408>
   14494:	mov	r3, #8
   14498:	sub	r2, r4, r2
   1449c:	mov	r0, r5
   144a0:	str	r3, [sp]
   144a4:	add	r2, r2, #1
   144a8:	add	r1, sp, #80	; 0x50
   144ac:	mvn	r3, #-2147483648	; 0x80000000
   144b0:	bl	173b8 <__assert_fail@plt+0x6210>
   144b4:	mov	r5, r0
   144b8:	str	r0, [r6]
   144bc:	ldr	r0, [r6, #4]
   144c0:	ldr	r2, [sp, #80]	; 0x50
   144c4:	mov	r1, #0
   144c8:	sub	r2, r2, r0
   144cc:	add	r0, r5, r0, lsl #3
   144d0:	lsl	r2, r2, #3
   144d4:	bl	110c4 <memset@plt>
   144d8:	ldr	r3, [sp, #80]	; 0x50
   144dc:	str	r3, [r6, #4]
   144e0:	add	fp, r5, r4, lsl #3
   144e4:	ldr	r3, [sp, #32]
   144e8:	ldr	r1, [sp, #36]	; 0x24
   144ec:	ldr	r8, [r5, r4, lsl #3]
   144f0:	ldr	r6, [fp, #4]
   144f4:	ldr	r2, [sp, #72]	; 0x48
   144f8:	ldr	ip, [sp, #76]	; 0x4c
   144fc:	orr	r1, r1, #1
   14500:	str	r3, [sp]
   14504:	add	r3, sp, #40	; 0x28
   14508:	str	r1, [sp, #28]
   1450c:	str	r1, [sp, #4]
   14510:	str	r2, [sp, #12]
   14514:	str	r3, [sp, #8]
   14518:	mov	r0, r6
   1451c:	mov	r1, r8
   14520:	str	ip, [sp, #16]
   14524:	mov	r3, sl
   14528:	mov	r2, r9
   1452c:	bl	12264 <__assert_fail@plt+0x10bc>
   14530:	cmp	r8, r0
   14534:	bhi	1459c <__assert_fail@plt+0x33f4>
   14538:	ldr	r3, [pc, #168]	; 145e8 <__assert_fail@plt+0x3440>
   1453c:	add	r8, r0, #1
   14540:	cmp	r6, r3
   14544:	str	r8, [r5, r4, lsl #3]
   14548:	beq	14554 <__assert_fail@plt+0x33ac>
   1454c:	mov	r0, r6
   14550:	bl	12038 <__assert_fail@plt+0xe90>
   14554:	mov	r0, r8
   14558:	bl	1719c <__assert_fail@plt+0x5ff4>
   1455c:	add	lr, sp, #40	; 0x28
   14560:	ldr	ip, [sp, #76]	; 0x4c
   14564:	ldr	r4, [sp, #72]	; 0x48
   14568:	ldr	r5, [sp, #28]
   1456c:	mov	r3, sl
   14570:	mov	r2, r9
   14574:	mov	r1, r8
   14578:	str	r0, [fp, #4]
   1457c:	str	lr, [sp, #8]
   14580:	ldr	lr, [sp, #32]
   14584:	str	r5, [sp, #4]
   14588:	str	ip, [sp, #16]
   1458c:	str	r4, [sp, #12]
   14590:	str	lr, [sp]
   14594:	mov	r6, r0
   14598:	bl	12264 <__assert_fail@plt+0x10bc>
   1459c:	ldr	r3, [sp, #24]
   145a0:	mov	r0, r6
   145a4:	str	r3, [r7]
   145a8:	add	sp, sp, #132	; 0x84
   145ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145b0:	mov	r3, #8
   145b4:	sub	r2, r4, r2
   145b8:	add	r1, sp, #80	; 0x50
   145bc:	str	r3, [sp]
   145c0:	add	r2, r2, #1
   145c4:	mvn	r3, #-2147483648	; 0x80000000
   145c8:	bl	173b8 <__assert_fail@plt+0x6210>
   145cc:	mov	r5, r0
   145d0:	ldm	r8, {r0, r1}
   145d4:	str	r5, [r6]
   145d8:	stm	r5, {r0, r1}
   145dc:	b	144bc <__assert_fail@plt+0x3314>
   145e0:	bl	11184 <abort@plt>
   145e4:	andeq	fp, r2, r0, lsr #2
   145e8:			; <UNDEFINED> instruction: 0x0002b1bc
   145ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145f0:	sub	sp, sp, #124	; 0x7c
   145f4:	mov	r4, r0
   145f8:	mov	r9, r1
   145fc:	add	r0, sp, #72	; 0x48
   14600:	mov	r2, #48	; 0x30
   14604:	mov	r1, #0
   14608:	bl	110c4 <memset@plt>
   1460c:	cmp	r4, #10
   14610:	beq	1479c <__assert_fail@plt+0x35f4>
   14614:	add	lr, sp, #72	; 0x48
   14618:	str	r4, [sp, #72]	; 0x48
   1461c:	ldm	lr!, {r0, r1, r2, r3}
   14620:	add	ip, sp, #24
   14624:	ldr	r5, [pc, #372]	; 147a0 <__assert_fail@plt+0x35f8>
   14628:	stmia	ip!, {r0, r1, r2, r3}
   1462c:	ldm	lr!, {r0, r1, r2, r3}
   14630:	stmia	ip!, {r0, r1, r2, r3}
   14634:	ldm	lr, {r0, r1, r2, r3}
   14638:	stm	ip, {r0, r1, r2, r3}
   1463c:	bl	110a0 <__errno_location@plt>
   14640:	ldr	r2, [r5, #4]
   14644:	ldr	r4, [r5]
   14648:	cmp	r2, #0
   1464c:	mov	r7, r0
   14650:	ldr	fp, [r0]
   14654:	bgt	146b0 <__assert_fail@plt+0x3508>
   14658:	add	r6, r5, #8
   1465c:	cmp	r4, r6
   14660:	str	r2, [sp, #72]	; 0x48
   14664:	beq	1476c <__assert_fail@plt+0x35c4>
   14668:	mov	r3, #8
   1466c:	mov	r0, r4
   14670:	str	r3, [sp]
   14674:	rsb	r2, r2, #1
   14678:	add	r1, sp, #72	; 0x48
   1467c:	mvn	r3, #-2147483648	; 0x80000000
   14680:	bl	173b8 <__assert_fail@plt+0x6210>
   14684:	mov	r4, r0
   14688:	str	r0, [r5]
   1468c:	ldr	r0, [r5, #4]
   14690:	ldr	r2, [sp, #72]	; 0x48
   14694:	mov	r1, #0
   14698:	sub	r2, r2, r0
   1469c:	add	r0, r4, r0, lsl #3
   146a0:	lsl	r2, r2, #3
   146a4:	bl	110c4 <memset@plt>
   146a8:	ldr	r3, [sp, #72]	; 0x48
   146ac:	str	r3, [r5, #4]
   146b0:	ldr	r6, [sp, #28]
   146b4:	ldr	r8, [r4]
   146b8:	ldr	r5, [r4, #4]
   146bc:	ldr	r2, [sp, #64]	; 0x40
   146c0:	ldr	r3, [sp, #24]
   146c4:	ldr	ip, [sp, #68]	; 0x44
   146c8:	orr	r6, r6, #1
   146cc:	add	sl, sp, #32
   146d0:	str	r2, [sp, #12]
   146d4:	str	r3, [sp]
   146d8:	str	r6, [sp, #4]
   146dc:	mov	r1, r8
   146e0:	mov	r0, r5
   146e4:	str	ip, [sp, #16]
   146e8:	str	sl, [sp, #8]
   146ec:	mvn	r3, #0
   146f0:	mov	r2, r9
   146f4:	bl	12264 <__assert_fail@plt+0x10bc>
   146f8:	cmp	r8, r0
   146fc:	bhi	1475c <__assert_fail@plt+0x35b4>
   14700:	ldr	r3, [pc, #156]	; 147a4 <__assert_fail@plt+0x35fc>
   14704:	add	r8, r0, #1
   14708:	cmp	r5, r3
   1470c:	str	r8, [r4]
   14710:	beq	1471c <__assert_fail@plt+0x3574>
   14714:	mov	r0, r5
   14718:	bl	12038 <__assert_fail@plt+0xe90>
   1471c:	mov	r0, r8
   14720:	bl	1719c <__assert_fail@plt+0x5ff4>
   14724:	ldr	lr, [sp, #68]	; 0x44
   14728:	ldr	r3, [sp, #24]
   1472c:	ldr	ip, [sp, #64]	; 0x40
   14730:	mov	r2, r9
   14734:	mov	r1, r8
   14738:	str	r0, [r4, #4]
   1473c:	str	r3, [sp]
   14740:	str	sl, [sp, #8]
   14744:	str	r6, [sp, #4]
   14748:	str	lr, [sp, #16]
   1474c:	str	ip, [sp, #12]
   14750:	mvn	r3, #0
   14754:	mov	r5, r0
   14758:	bl	12264 <__assert_fail@plt+0x10bc>
   1475c:	mov	r0, r5
   14760:	str	fp, [r7]
   14764:	add	sp, sp, #124	; 0x7c
   14768:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1476c:	mov	r3, #8
   14770:	add	r1, sp, #72	; 0x48
   14774:	str	r3, [sp]
   14778:	rsb	r2, r2, #1
   1477c:	mvn	r3, #-2147483648	; 0x80000000
   14780:	mov	r0, #0
   14784:	bl	173b8 <__assert_fail@plt+0x6210>
   14788:	mov	r4, r0
   1478c:	ldm	r6, {r0, r1}
   14790:	str	r4, [r5]
   14794:	stm	r4, {r0, r1}
   14798:	b	1468c <__assert_fail@plt+0x34e4>
   1479c:	bl	11184 <abort@plt>
   147a0:	andeq	fp, r2, r0, lsr #2
   147a4:			; <UNDEFINED> instruction: 0x0002b1bc
   147a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147ac:	sub	sp, sp, #132	; 0x84
   147b0:	mov	r4, r0
   147b4:	mov	r9, r1
   147b8:	mov	sl, r2
   147bc:	add	r0, sp, #80	; 0x50
   147c0:	mov	r2, #48	; 0x30
   147c4:	mov	r1, #0
   147c8:	bl	110c4 <memset@plt>
   147cc:	cmp	r4, #10
   147d0:	beq	14964 <__assert_fail@plt+0x37bc>
   147d4:	add	lr, sp, #80	; 0x50
   147d8:	str	r4, [sp, #80]	; 0x50
   147dc:	ldm	lr!, {r0, r1, r2, r3}
   147e0:	add	ip, sp, #32
   147e4:	ldr	r5, [pc, #380]	; 14968 <__assert_fail@plt+0x37c0>
   147e8:	stmia	ip!, {r0, r1, r2, r3}
   147ec:	ldm	lr!, {r0, r1, r2, r3}
   147f0:	stmia	ip!, {r0, r1, r2, r3}
   147f4:	ldm	lr, {r0, r1, r2, r3}
   147f8:	stm	ip, {r0, r1, r2, r3}
   147fc:	bl	110a0 <__errno_location@plt>
   14800:	ldr	r2, [r5, #4]
   14804:	ldr	r4, [r5]
   14808:	cmp	r2, #0
   1480c:	ldr	r3, [r0]
   14810:	mov	r7, r0
   14814:	str	r3, [sp, #28]
   14818:	bgt	14874 <__assert_fail@plt+0x36cc>
   1481c:	add	r6, r5, #8
   14820:	cmp	r4, r6
   14824:	str	r2, [sp, #80]	; 0x50
   14828:	beq	14934 <__assert_fail@plt+0x378c>
   1482c:	mov	r3, #8
   14830:	mov	r0, r4
   14834:	str	r3, [sp]
   14838:	rsb	r2, r2, #1
   1483c:	add	r1, sp, #80	; 0x50
   14840:	mvn	r3, #-2147483648	; 0x80000000
   14844:	bl	173b8 <__assert_fail@plt+0x6210>
   14848:	mov	r4, r0
   1484c:	str	r0, [r5]
   14850:	ldr	r0, [r5, #4]
   14854:	ldr	r2, [sp, #80]	; 0x50
   14858:	mov	r1, #0
   1485c:	sub	r2, r2, r0
   14860:	add	r0, r4, r0, lsl #3
   14864:	lsl	r2, r2, #3
   14868:	bl	110c4 <memset@plt>
   1486c:	ldr	r3, [sp, #80]	; 0x50
   14870:	str	r3, [r5, #4]
   14874:	ldr	r6, [sp, #36]	; 0x24
   14878:	ldr	r8, [r4]
   1487c:	ldr	r5, [r4, #4]
   14880:	ldr	r2, [sp, #72]	; 0x48
   14884:	ldr	r3, [sp, #32]
   14888:	ldr	ip, [sp, #76]	; 0x4c
   1488c:	orr	r6, r6, #1
   14890:	add	fp, sp, #40	; 0x28
   14894:	str	r2, [sp, #12]
   14898:	str	r3, [sp]
   1489c:	str	r6, [sp, #4]
   148a0:	mov	r1, r8
   148a4:	mov	r0, r5
   148a8:	str	ip, [sp, #16]
   148ac:	str	fp, [sp, #8]
   148b0:	mov	r3, sl
   148b4:	mov	r2, r9
   148b8:	bl	12264 <__assert_fail@plt+0x10bc>
   148bc:	cmp	r8, r0
   148c0:	bhi	14920 <__assert_fail@plt+0x3778>
   148c4:	ldr	r3, [pc, #160]	; 1496c <__assert_fail@plt+0x37c4>
   148c8:	add	r8, r0, #1
   148cc:	cmp	r5, r3
   148d0:	str	r8, [r4]
   148d4:	beq	148e0 <__assert_fail@plt+0x3738>
   148d8:	mov	r0, r5
   148dc:	bl	12038 <__assert_fail@plt+0xe90>
   148e0:	mov	r0, r8
   148e4:	bl	1719c <__assert_fail@plt+0x5ff4>
   148e8:	ldr	ip, [sp, #76]	; 0x4c
   148ec:	ldr	lr, [sp, #32]
   148f0:	mov	r3, sl
   148f4:	mov	r2, r9
   148f8:	mov	r1, r8
   148fc:	str	r0, [r4, #4]
   14900:	ldr	r4, [sp, #72]	; 0x48
   14904:	str	fp, [sp, #8]
   14908:	str	r6, [sp, #4]
   1490c:	str	ip, [sp, #16]
   14910:	str	r4, [sp, #12]
   14914:	str	lr, [sp]
   14918:	mov	r5, r0
   1491c:	bl	12264 <__assert_fail@plt+0x10bc>
   14920:	ldr	r3, [sp, #28]
   14924:	mov	r0, r5
   14928:	str	r3, [r7]
   1492c:	add	sp, sp, #132	; 0x84
   14930:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14934:	mov	r3, #8
   14938:	add	r1, sp, #80	; 0x50
   1493c:	str	r3, [sp]
   14940:	rsb	r2, r2, #1
   14944:	mvn	r3, #-2147483648	; 0x80000000
   14948:	mov	r0, #0
   1494c:	bl	173b8 <__assert_fail@plt+0x6210>
   14950:	mov	r4, r0
   14954:	ldm	r6, {r0, r1}
   14958:	str	r4, [r5]
   1495c:	stm	r4, {r0, r1}
   14960:	b	14850 <__assert_fail@plt+0x36a8>
   14964:	bl	11184 <abort@plt>
   14968:	andeq	fp, r2, r0, lsr #2
   1496c:			; <UNDEFINED> instruction: 0x0002b1bc
   14970:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14974:	mov	r4, r2
   14978:	ldr	lr, [pc, #432]	; 14b30 <__assert_fail@plt+0x3988>
   1497c:	mov	sl, r0
   14980:	mov	fp, r1
   14984:	ldm	lr!, {r0, r1, r2, r3}
   14988:	sub	sp, sp, #92	; 0x5c
   1498c:	add	ip, sp, #40	; 0x28
   14990:	lsr	r7, r4, #5
   14994:	stmia	ip!, {r0, r1, r2, r3}
   14998:	add	r6, sp, #48	; 0x30
   1499c:	ldm	lr!, {r0, r1, r2, r3}
   149a0:	and	r4, r4, #31
   149a4:	ldr	r5, [pc, #392]	; 14b34 <__assert_fail@plt+0x398c>
   149a8:	stmia	ip!, {r0, r1, r2, r3}
   149ac:	ldm	lr, {r0, r1, r2, r3}
   149b0:	stm	ip, {r0, r1, r2, r3}
   149b4:	ldr	r2, [r6, r7, lsl #2]
   149b8:	lsr	r3, r2, r4
   149bc:	eor	r3, r3, #1
   149c0:	and	r3, r3, #1
   149c4:	eor	r4, r2, r3, lsl r4
   149c8:	str	r4, [r6, r7, lsl #2]
   149cc:	bl	110a0 <__errno_location@plt>
   149d0:	ldr	r2, [r5, #4]
   149d4:	ldr	r4, [r5]
   149d8:	cmp	r2, #0
   149dc:	ldr	r3, [r0]
   149e0:	mov	r8, r0
   149e4:	str	r3, [sp, #28]
   149e8:	bgt	14a44 <__assert_fail@plt+0x389c>
   149ec:	add	r7, r5, #8
   149f0:	cmp	r4, r7
   149f4:	str	r2, [sp, #36]	; 0x24
   149f8:	beq	14b00 <__assert_fail@plt+0x3958>
   149fc:	mov	r3, #8
   14a00:	mov	r0, r4
   14a04:	str	r3, [sp]
   14a08:	rsb	r2, r2, #1
   14a0c:	mvn	r3, #-2147483648	; 0x80000000
   14a10:	add	r1, sp, #36	; 0x24
   14a14:	bl	173b8 <__assert_fail@plt+0x6210>
   14a18:	mov	r4, r0
   14a1c:	str	r0, [r5]
   14a20:	ldr	r0, [r5, #4]
   14a24:	ldr	r2, [sp, #36]	; 0x24
   14a28:	mov	r1, #0
   14a2c:	sub	r2, r2, r0
   14a30:	add	r0, r4, r0, lsl #3
   14a34:	lsl	r2, r2, #3
   14a38:	bl	110c4 <memset@plt>
   14a3c:	ldr	r3, [sp, #36]	; 0x24
   14a40:	str	r3, [r5, #4]
   14a44:	ldr	r7, [sp, #44]	; 0x2c
   14a48:	ldr	r9, [r4]
   14a4c:	ldr	r5, [r4, #4]
   14a50:	ldr	r2, [sp, #80]	; 0x50
   14a54:	ldr	r3, [sp, #40]	; 0x28
   14a58:	ldr	ip, [sp, #84]	; 0x54
   14a5c:	orr	r7, r7, #1
   14a60:	str	r2, [sp, #12]
   14a64:	str	r3, [sp]
   14a68:	str	r7, [sp, #4]
   14a6c:	str	r6, [sp, #8]
   14a70:	mov	r1, r9
   14a74:	mov	r0, r5
   14a78:	str	ip, [sp, #16]
   14a7c:	mov	r3, fp
   14a80:	mov	r2, sl
   14a84:	bl	12264 <__assert_fail@plt+0x10bc>
   14a88:	cmp	r9, r0
   14a8c:	bhi	14aec <__assert_fail@plt+0x3944>
   14a90:	ldr	r3, [pc, #160]	; 14b38 <__assert_fail@plt+0x3990>
   14a94:	add	r9, r0, #1
   14a98:	cmp	r5, r3
   14a9c:	str	r9, [r4]
   14aa0:	beq	14aac <__assert_fail@plt+0x3904>
   14aa4:	mov	r0, r5
   14aa8:	bl	12038 <__assert_fail@plt+0xe90>
   14aac:	mov	r0, r9
   14ab0:	bl	1719c <__assert_fail@plt+0x5ff4>
   14ab4:	ldr	ip, [sp, #84]	; 0x54
   14ab8:	ldr	lr, [sp, #40]	; 0x28
   14abc:	mov	r3, fp
   14ac0:	mov	r2, sl
   14ac4:	mov	r1, r9
   14ac8:	str	r0, [r4, #4]
   14acc:	ldr	r4, [sp, #80]	; 0x50
   14ad0:	str	r6, [sp, #8]
   14ad4:	str	r7, [sp, #4]
   14ad8:	str	ip, [sp, #16]
   14adc:	str	r4, [sp, #12]
   14ae0:	str	lr, [sp]
   14ae4:	mov	r5, r0
   14ae8:	bl	12264 <__assert_fail@plt+0x10bc>
   14aec:	ldr	r3, [sp, #28]
   14af0:	mov	r0, r5
   14af4:	str	r3, [r8]
   14af8:	add	sp, sp, #92	; 0x5c
   14afc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b00:	mov	r3, #8
   14b04:	str	r3, [sp]
   14b08:	add	r1, sp, #36	; 0x24
   14b0c:	rsb	r2, r2, #1
   14b10:	mvn	r3, #-2147483648	; 0x80000000
   14b14:	mov	r0, #0
   14b18:	bl	173b8 <__assert_fail@plt+0x6210>
   14b1c:	mov	r4, r0
   14b20:	ldm	r7, {r0, r1}
   14b24:	str	r4, [r5]
   14b28:	stm	r4, {r0, r1}
   14b2c:	b	14a20 <__assert_fail@plt+0x3878>
   14b30:	andeq	fp, r2, ip, lsl #3
   14b34:	andeq	fp, r2, r0, lsr #2
   14b38:			; <UNDEFINED> instruction: 0x0002b1bc
   14b3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b40:	mov	r4, r1
   14b44:	ldr	lr, [pc, #420]	; 14cf0 <__assert_fail@plt+0x3b48>
   14b48:	mov	r6, r0
   14b4c:	sub	sp, sp, #84	; 0x54
   14b50:	ldm	lr!, {r0, r1, r2, r3}
   14b54:	add	ip, sp, #32
   14b58:	lsr	r8, r4, #5
   14b5c:	add	r5, sp, #40	; 0x28
   14b60:	stmia	ip!, {r0, r1, r2, r3}
   14b64:	and	r4, r4, #31
   14b68:	ldm	lr!, {r0, r1, r2, r3}
   14b6c:	ldr	r7, [pc, #384]	; 14cf4 <__assert_fail@plt+0x3b4c>
   14b70:	stmia	ip!, {r0, r1, r2, r3}
   14b74:	ldm	lr, {r0, r1, r2, r3}
   14b78:	stm	ip, {r0, r1, r2, r3}
   14b7c:	ldr	r2, [r5, r8, lsl #2]
   14b80:	lsr	r3, r2, r4
   14b84:	eor	r3, r3, #1
   14b88:	and	r3, r3, #1
   14b8c:	eor	r4, r2, r3, lsl r4
   14b90:	str	r4, [r5, r8, lsl #2]
   14b94:	bl	110a0 <__errno_location@plt>
   14b98:	ldr	r2, [r7, #4]
   14b9c:	ldr	r4, [r7]
   14ba0:	cmp	r2, #0
   14ba4:	mov	r9, r0
   14ba8:	ldr	sl, [r0]
   14bac:	bgt	14c08 <__assert_fail@plt+0x3a60>
   14bb0:	add	r8, r7, #8
   14bb4:	cmp	r4, r8
   14bb8:	str	r2, [sp, #28]
   14bbc:	beq	14cc0 <__assert_fail@plt+0x3b18>
   14bc0:	mov	r3, #8
   14bc4:	mov	r0, r4
   14bc8:	str	r3, [sp]
   14bcc:	rsb	r2, r2, #1
   14bd0:	mvn	r3, #-2147483648	; 0x80000000
   14bd4:	add	r1, sp, #28
   14bd8:	bl	173b8 <__assert_fail@plt+0x6210>
   14bdc:	mov	r4, r0
   14be0:	str	r0, [r7]
   14be4:	ldr	r0, [r7, #4]
   14be8:	ldr	r2, [sp, #28]
   14bec:	mov	r1, #0
   14bf0:	sub	r2, r2, r0
   14bf4:	add	r0, r4, r0, lsl #3
   14bf8:	lsl	r2, r2, #3
   14bfc:	bl	110c4 <memset@plt>
   14c00:	ldr	r3, [sp, #28]
   14c04:	str	r3, [r7, #4]
   14c08:	ldr	r8, [sp, #36]	; 0x24
   14c0c:	ldr	fp, [r4]
   14c10:	ldr	r7, [r4, #4]
   14c14:	ldr	r2, [sp, #72]	; 0x48
   14c18:	ldr	r3, [sp, #32]
   14c1c:	ldr	ip, [sp, #76]	; 0x4c
   14c20:	orr	r8, r8, #1
   14c24:	str	r2, [sp, #12]
   14c28:	str	r3, [sp]
   14c2c:	str	r8, [sp, #4]
   14c30:	str	r5, [sp, #8]
   14c34:	mov	r1, fp
   14c38:	mov	r0, r7
   14c3c:	str	ip, [sp, #16]
   14c40:	mvn	r3, #0
   14c44:	mov	r2, r6
   14c48:	bl	12264 <__assert_fail@plt+0x10bc>
   14c4c:	cmp	fp, r0
   14c50:	bhi	14cb0 <__assert_fail@plt+0x3b08>
   14c54:	ldr	r3, [pc, #156]	; 14cf8 <__assert_fail@plt+0x3b50>
   14c58:	add	fp, r0, #1
   14c5c:	cmp	r7, r3
   14c60:	str	fp, [r4]
   14c64:	beq	14c70 <__assert_fail@plt+0x3ac8>
   14c68:	mov	r0, r7
   14c6c:	bl	12038 <__assert_fail@plt+0xe90>
   14c70:	mov	r0, fp
   14c74:	bl	1719c <__assert_fail@plt+0x5ff4>
   14c78:	ldr	lr, [sp, #76]	; 0x4c
   14c7c:	ldr	r3, [sp, #32]
   14c80:	ldr	ip, [sp, #72]	; 0x48
   14c84:	mov	r2, r6
   14c88:	mov	r1, fp
   14c8c:	str	r0, [r4, #4]
   14c90:	str	r3, [sp]
   14c94:	str	r5, [sp, #8]
   14c98:	str	r8, [sp, #4]
   14c9c:	str	lr, [sp, #16]
   14ca0:	str	ip, [sp, #12]
   14ca4:	mvn	r3, #0
   14ca8:	mov	r7, r0
   14cac:	bl	12264 <__assert_fail@plt+0x10bc>
   14cb0:	mov	r0, r7
   14cb4:	str	sl, [r9]
   14cb8:	add	sp, sp, #84	; 0x54
   14cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cc0:	mov	r3, #8
   14cc4:	str	r3, [sp]
   14cc8:	add	r1, sp, #28
   14ccc:	rsb	r2, r2, #1
   14cd0:	mvn	r3, #-2147483648	; 0x80000000
   14cd4:	mov	r0, #0
   14cd8:	bl	173b8 <__assert_fail@plt+0x6210>
   14cdc:	mov	r4, r0
   14ce0:	ldm	r8, {r0, r1}
   14ce4:	str	r4, [r7]
   14ce8:	stm	r4, {r0, r1}
   14cec:	b	14be4 <__assert_fail@plt+0x3a3c>
   14cf0:	andeq	fp, r2, ip, lsl #3
   14cf4:	andeq	fp, r2, r0, lsr #2
   14cf8:			; <UNDEFINED> instruction: 0x0002b1bc
   14cfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d00:	mov	r6, r0
   14d04:	ldr	lr, [pc, #404]	; 14ea0 <__assert_fail@plt+0x3cf8>
   14d08:	sub	sp, sp, #84	; 0x54
   14d0c:	add	ip, sp, #32
   14d10:	ldm	lr!, {r0, r1, r2, r3}
   14d14:	ldr	r5, [pc, #392]	; 14ea4 <__assert_fail@plt+0x3cfc>
   14d18:	stmia	ip!, {r0, r1, r2, r3}
   14d1c:	ldm	lr!, {r0, r1, r2, r3}
   14d20:	ldr	r4, [sp, #44]	; 0x2c
   14d24:	stmia	ip!, {r0, r1, r2, r3}
   14d28:	ldm	lr, {r0, r1, r2, r3}
   14d2c:	mvn	lr, r4
   14d30:	and	lr, lr, #67108864	; 0x4000000
   14d34:	eor	lr, lr, r4
   14d38:	stm	ip, {r0, r1, r2, r3}
   14d3c:	str	lr, [sp, #44]	; 0x2c
   14d40:	bl	110a0 <__errno_location@plt>
   14d44:	ldr	r2, [r5, #4]
   14d48:	ldr	r4, [r5]
   14d4c:	cmp	r2, #0
   14d50:	mov	r8, r0
   14d54:	ldr	sl, [r0]
   14d58:	bgt	14db4 <__assert_fail@plt+0x3c0c>
   14d5c:	add	r7, r5, #8
   14d60:	cmp	r4, r7
   14d64:	str	r2, [sp, #28]
   14d68:	beq	14e70 <__assert_fail@plt+0x3cc8>
   14d6c:	mov	r3, #8
   14d70:	mov	r0, r4
   14d74:	str	r3, [sp]
   14d78:	rsb	r2, r2, #1
   14d7c:	mvn	r3, #-2147483648	; 0x80000000
   14d80:	add	r1, sp, #28
   14d84:	bl	173b8 <__assert_fail@plt+0x6210>
   14d88:	mov	r4, r0
   14d8c:	str	r0, [r5]
   14d90:	ldr	r0, [r5, #4]
   14d94:	ldr	r2, [sp, #28]
   14d98:	mov	r1, #0
   14d9c:	sub	r2, r2, r0
   14da0:	add	r0, r4, r0, lsl #3
   14da4:	lsl	r2, r2, #3
   14da8:	bl	110c4 <memset@plt>
   14dac:	ldr	r3, [sp, #28]
   14db0:	str	r3, [r5, #4]
   14db4:	ldr	r7, [sp, #36]	; 0x24
   14db8:	ldr	r9, [r4]
   14dbc:	ldr	r5, [r4, #4]
   14dc0:	ldr	r2, [sp, #72]	; 0x48
   14dc4:	ldr	r3, [sp, #32]
   14dc8:	ldr	ip, [sp, #76]	; 0x4c
   14dcc:	orr	r7, r7, #1
   14dd0:	add	fp, sp, #40	; 0x28
   14dd4:	str	r2, [sp, #12]
   14dd8:	str	r3, [sp]
   14ddc:	str	r7, [sp, #4]
   14de0:	mov	r1, r9
   14de4:	mov	r0, r5
   14de8:	str	ip, [sp, #16]
   14dec:	str	fp, [sp, #8]
   14df0:	mvn	r3, #0
   14df4:	mov	r2, r6
   14df8:	bl	12264 <__assert_fail@plt+0x10bc>
   14dfc:	cmp	r9, r0
   14e00:	bhi	14e60 <__assert_fail@plt+0x3cb8>
   14e04:	ldr	r3, [pc, #156]	; 14ea8 <__assert_fail@plt+0x3d00>
   14e08:	add	r9, r0, #1
   14e0c:	cmp	r5, r3
   14e10:	str	r9, [r4]
   14e14:	beq	14e20 <__assert_fail@plt+0x3c78>
   14e18:	mov	r0, r5
   14e1c:	bl	12038 <__assert_fail@plt+0xe90>
   14e20:	mov	r0, r9
   14e24:	bl	1719c <__assert_fail@plt+0x5ff4>
   14e28:	ldr	lr, [sp, #76]	; 0x4c
   14e2c:	ldr	r3, [sp, #32]
   14e30:	ldr	ip, [sp, #72]	; 0x48
   14e34:	mov	r2, r6
   14e38:	mov	r1, r9
   14e3c:	str	r0, [r4, #4]
   14e40:	str	r3, [sp]
   14e44:	str	fp, [sp, #8]
   14e48:	str	r7, [sp, #4]
   14e4c:	str	lr, [sp, #16]
   14e50:	str	ip, [sp, #12]
   14e54:	mvn	r3, #0
   14e58:	mov	r5, r0
   14e5c:	bl	12264 <__assert_fail@plt+0x10bc>
   14e60:	mov	r0, r5
   14e64:	str	sl, [r8]
   14e68:	add	sp, sp, #84	; 0x54
   14e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e70:	mov	r3, #8
   14e74:	str	r3, [sp]
   14e78:	add	r1, sp, #28
   14e7c:	rsb	r2, r2, #1
   14e80:	mvn	r3, #-2147483648	; 0x80000000
   14e84:	mov	r0, #0
   14e88:	bl	173b8 <__assert_fail@plt+0x6210>
   14e8c:	mov	r4, r0
   14e90:	ldm	r7, {r0, r1}
   14e94:	str	r4, [r5]
   14e98:	stm	r4, {r0, r1}
   14e9c:	b	14d90 <__assert_fail@plt+0x3be8>
   14ea0:	andeq	fp, r2, ip, lsl #3
   14ea4:	andeq	fp, r2, r0, lsr #2
   14ea8:			; <UNDEFINED> instruction: 0x0002b1bc
   14eac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14eb0:	mov	r9, r0
   14eb4:	ldr	lr, [pc, #416]	; 1505c <__assert_fail@plt+0x3eb4>
   14eb8:	mov	sl, r1
   14ebc:	sub	sp, sp, #92	; 0x5c
   14ec0:	ldm	lr!, {r0, r1, r2, r3}
   14ec4:	add	ip, sp, #40	; 0x28
   14ec8:	ldr	r5, [pc, #400]	; 15060 <__assert_fail@plt+0x3eb8>
   14ecc:	stmia	ip!, {r0, r1, r2, r3}
   14ed0:	ldm	lr!, {r0, r1, r2, r3}
   14ed4:	ldr	r4, [sp, #52]	; 0x34
   14ed8:	stmia	ip!, {r0, r1, r2, r3}
   14edc:	ldm	lr, {r0, r1, r2, r3}
   14ee0:	mvn	lr, r4
   14ee4:	and	lr, lr, #67108864	; 0x4000000
   14ee8:	eor	lr, lr, r4
   14eec:	stm	ip, {r0, r1, r2, r3}
   14ef0:	str	lr, [sp, #52]	; 0x34
   14ef4:	bl	110a0 <__errno_location@plt>
   14ef8:	ldr	r2, [r5, #4]
   14efc:	ldr	r4, [r5]
   14f00:	cmp	r2, #0
   14f04:	ldr	r3, [r0]
   14f08:	mov	r7, r0
   14f0c:	str	r3, [sp, #28]
   14f10:	bgt	14f6c <__assert_fail@plt+0x3dc4>
   14f14:	add	r6, r5, #8
   14f18:	cmp	r4, r6
   14f1c:	str	r2, [sp, #36]	; 0x24
   14f20:	beq	1502c <__assert_fail@plt+0x3e84>
   14f24:	mov	r3, #8
   14f28:	mov	r0, r4
   14f2c:	str	r3, [sp]
   14f30:	rsb	r2, r2, #1
   14f34:	mvn	r3, #-2147483648	; 0x80000000
   14f38:	add	r1, sp, #36	; 0x24
   14f3c:	bl	173b8 <__assert_fail@plt+0x6210>
   14f40:	mov	r4, r0
   14f44:	str	r0, [r5]
   14f48:	ldr	r0, [r5, #4]
   14f4c:	ldr	r2, [sp, #36]	; 0x24
   14f50:	mov	r1, #0
   14f54:	sub	r2, r2, r0
   14f58:	add	r0, r4, r0, lsl #3
   14f5c:	lsl	r2, r2, #3
   14f60:	bl	110c4 <memset@plt>
   14f64:	ldr	r3, [sp, #36]	; 0x24
   14f68:	str	r3, [r5, #4]
   14f6c:	ldr	r6, [sp, #44]	; 0x2c
   14f70:	ldr	r8, [r4]
   14f74:	ldr	r5, [r4, #4]
   14f78:	ldr	r2, [sp, #80]	; 0x50
   14f7c:	ldr	r3, [sp, #40]	; 0x28
   14f80:	ldr	ip, [sp, #84]	; 0x54
   14f84:	orr	r6, r6, #1
   14f88:	add	fp, sp, #48	; 0x30
   14f8c:	str	r2, [sp, #12]
   14f90:	str	r3, [sp]
   14f94:	str	r6, [sp, #4]
   14f98:	mov	r1, r8
   14f9c:	mov	r0, r5
   14fa0:	str	ip, [sp, #16]
   14fa4:	str	fp, [sp, #8]
   14fa8:	mov	r3, sl
   14fac:	mov	r2, r9
   14fb0:	bl	12264 <__assert_fail@plt+0x10bc>
   14fb4:	cmp	r8, r0
   14fb8:	bhi	15018 <__assert_fail@plt+0x3e70>
   14fbc:	ldr	r3, [pc, #160]	; 15064 <__assert_fail@plt+0x3ebc>
   14fc0:	add	r8, r0, #1
   14fc4:	cmp	r5, r3
   14fc8:	str	r8, [r4]
   14fcc:	beq	14fd8 <__assert_fail@plt+0x3e30>
   14fd0:	mov	r0, r5
   14fd4:	bl	12038 <__assert_fail@plt+0xe90>
   14fd8:	mov	r0, r8
   14fdc:	bl	1719c <__assert_fail@plt+0x5ff4>
   14fe0:	ldr	ip, [sp, #84]	; 0x54
   14fe4:	ldr	lr, [sp, #40]	; 0x28
   14fe8:	mov	r3, sl
   14fec:	mov	r2, r9
   14ff0:	mov	r1, r8
   14ff4:	str	r0, [r4, #4]
   14ff8:	ldr	r4, [sp, #80]	; 0x50
   14ffc:	str	fp, [sp, #8]
   15000:	str	r6, [sp, #4]
   15004:	str	ip, [sp, #16]
   15008:	str	r4, [sp, #12]
   1500c:	str	lr, [sp]
   15010:	mov	r5, r0
   15014:	bl	12264 <__assert_fail@plt+0x10bc>
   15018:	ldr	r3, [sp, #28]
   1501c:	mov	r0, r5
   15020:	str	r3, [r7]
   15024:	add	sp, sp, #92	; 0x5c
   15028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1502c:	mov	r3, #8
   15030:	str	r3, [sp]
   15034:	add	r1, sp, #36	; 0x24
   15038:	rsb	r2, r2, #1
   1503c:	mvn	r3, #-2147483648	; 0x80000000
   15040:	mov	r0, #0
   15044:	bl	173b8 <__assert_fail@plt+0x6210>
   15048:	mov	r4, r0
   1504c:	ldm	r6, {r0, r1}
   15050:	str	r4, [r5]
   15054:	stm	r4, {r0, r1}
   15058:	b	14f48 <__assert_fail@plt+0x3da0>
   1505c:	andeq	fp, r2, ip, lsl #3
   15060:	andeq	fp, r2, r0, lsr #2
   15064:			; <UNDEFINED> instruction: 0x0002b1bc
   15068:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1506c:	sub	sp, sp, #180	; 0xb4
   15070:	mov	r6, r1
   15074:	mov	r4, r0
   15078:	mov	r9, r2
   1507c:	add	r0, sp, #80	; 0x50
   15080:	mov	r2, #48	; 0x30
   15084:	mov	r1, #0
   15088:	bl	110c4 <memset@plt>
   1508c:	cmp	r6, #10
   15090:	beq	15270 <__assert_fail@plt+0x40c8>
   15094:	add	r5, sp, #80	; 0x50
   15098:	str	r6, [sp, #80]	; 0x50
   1509c:	ldm	r5!, {r0, r1, r2, r3}
   150a0:	add	ip, sp, #128	; 0x80
   150a4:	mov	r7, ip
   150a8:	add	lr, sp, #32
   150ac:	stmia	ip!, {r0, r1, r2, r3}
   150b0:	mov	r8, #67108864	; 0x4000000
   150b4:	ldm	r5!, {r0, r1, r2, r3}
   150b8:	ldr	r6, [pc, #436]	; 15274 <__assert_fail@plt+0x40cc>
   150bc:	stmia	ip!, {r0, r1, r2, r3}
   150c0:	ldm	r5, {r0, r1, r2, r3}
   150c4:	stm	ip, {r0, r1, r2, r3}
   150c8:	ldm	r7!, {r0, r1, r2, r3}
   150cc:	stmia	lr!, {r0, r1, r2, r3}
   150d0:	ldm	r7!, {r0, r1, r2, r3}
   150d4:	str	r8, [sp, #44]	; 0x2c
   150d8:	stmia	lr!, {r0, r1, r2, r3}
   150dc:	ldm	ip, {r0, r1, r2, r3}
   150e0:	stm	lr, {r0, r1, r2, r3}
   150e4:	bl	110a0 <__errno_location@plt>
   150e8:	cmn	r4, #-2147483647	; 0x80000001
   150ec:	ldr	r5, [r6]
   150f0:	mov	r7, r0
   150f4:	movne	r0, #0
   150f8:	moveq	r0, #1
   150fc:	ldr	r3, [r7]
   15100:	orrs	r0, r0, r4, lsr #31
   15104:	str	r3, [sp, #24]
   15108:	bne	15270 <__assert_fail@plt+0x40c8>
   1510c:	ldr	r2, [r6, #4]
   15110:	cmp	r4, r2
   15114:	blt	15174 <__assert_fail@plt+0x3fcc>
   15118:	add	r8, r6, #8
   1511c:	cmp	r5, r8
   15120:	str	r2, [sp, #80]	; 0x50
   15124:	beq	15240 <__assert_fail@plt+0x4098>
   15128:	mov	r3, #8
   1512c:	sub	r2, r4, r2
   15130:	mov	r0, r5
   15134:	str	r3, [sp]
   15138:	add	r2, r2, #1
   1513c:	add	r1, sp, #80	; 0x50
   15140:	mvn	r3, #-2147483648	; 0x80000000
   15144:	bl	173b8 <__assert_fail@plt+0x6210>
   15148:	mov	r5, r0
   1514c:	str	r0, [r6]
   15150:	ldr	r0, [r6, #4]
   15154:	ldr	r2, [sp, #80]	; 0x50
   15158:	mov	r1, #0
   1515c:	sub	r2, r2, r0
   15160:	add	r0, r5, r0, lsl #3
   15164:	lsl	r2, r2, #3
   15168:	bl	110c4 <memset@plt>
   1516c:	ldr	r3, [sp, #80]	; 0x50
   15170:	str	r3, [r6, #4]
   15174:	add	fp, r5, r4, lsl #3
   15178:	ldr	r1, [sp, #36]	; 0x24
   1517c:	ldr	r8, [r5, r4, lsl #3]
   15180:	ldr	r6, [fp, #4]
   15184:	ldr	r2, [sp, #72]	; 0x48
   15188:	ldr	r3, [sp, #32]
   1518c:	ldr	ip, [sp, #76]	; 0x4c
   15190:	orr	r1, r1, #1
   15194:	add	sl, sp, #40	; 0x28
   15198:	str	r1, [sp, #28]
   1519c:	str	r1, [sp, #4]
   151a0:	str	r2, [sp, #12]
   151a4:	str	r3, [sp]
   151a8:	mov	r0, r6
   151ac:	mov	r1, r8
   151b0:	str	ip, [sp, #16]
   151b4:	str	sl, [sp, #8]
   151b8:	mvn	r3, #0
   151bc:	mov	r2, r9
   151c0:	bl	12264 <__assert_fail@plt+0x10bc>
   151c4:	cmp	r8, r0
   151c8:	bhi	1522c <__assert_fail@plt+0x4084>
   151cc:	ldr	r3, [pc, #164]	; 15278 <__assert_fail@plt+0x40d0>
   151d0:	add	r8, r0, #1
   151d4:	cmp	r6, r3
   151d8:	str	r8, [r5, r4, lsl #3]
   151dc:	beq	151e8 <__assert_fail@plt+0x4040>
   151e0:	mov	r0, r6
   151e4:	bl	12038 <__assert_fail@plt+0xe90>
   151e8:	mov	r0, r8
   151ec:	bl	1719c <__assert_fail@plt+0x5ff4>
   151f0:	ldr	lr, [sp, #76]	; 0x4c
   151f4:	ldr	r3, [sp, #32]
   151f8:	ldr	ip, [sp, #72]	; 0x48
   151fc:	ldr	r4, [sp, #28]
   15200:	mov	r2, r9
   15204:	mov	r1, r8
   15208:	str	r0, [fp, #4]
   1520c:	str	r3, [sp]
   15210:	str	sl, [sp, #8]
   15214:	str	r4, [sp, #4]
   15218:	str	lr, [sp, #16]
   1521c:	str	ip, [sp, #12]
   15220:	mvn	r3, #0
   15224:	mov	r6, r0
   15228:	bl	12264 <__assert_fail@plt+0x10bc>
   1522c:	ldr	r3, [sp, #24]
   15230:	mov	r0, r6
   15234:	str	r3, [r7]
   15238:	add	sp, sp, #180	; 0xb4
   1523c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15240:	mov	r3, #8
   15244:	sub	r2, r4, r2
   15248:	add	r1, sp, #80	; 0x50
   1524c:	str	r3, [sp]
   15250:	add	r2, r2, #1
   15254:	mvn	r3, #-2147483648	; 0x80000000
   15258:	bl	173b8 <__assert_fail@plt+0x6210>
   1525c:	mov	r5, r0
   15260:	ldm	r8, {r0, r1}
   15264:	str	r5, [r6]
   15268:	stm	r5, {r0, r1}
   1526c:	b	15150 <__assert_fail@plt+0x3fa8>
   15270:	bl	11184 <abort@plt>
   15274:	andeq	fp, r2, r0, lsr #2
   15278:			; <UNDEFINED> instruction: 0x0002b1bc
   1527c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15280:	mov	r7, r1
   15284:	ldr	lr, [pc, #492]	; 15478 <__assert_fail@plt+0x42d0>
   15288:	mov	r8, r2
   1528c:	mov	r4, r0
   15290:	mov	fp, r3
   15294:	ldm	lr!, {r0, r1, r2, r3}
   15298:	sub	sp, sp, #100	; 0x64
   1529c:	add	ip, sp, #48	; 0x30
   152a0:	mov	sl, #10
   152a4:	stmia	ip!, {r0, r1, r2, r3}
   152a8:	cmp	r8, #0
   152ac:	cmpne	r7, #0
   152b0:	ldm	lr!, {r0, r1, r2, r3}
   152b4:	str	sl, [sp, #48]	; 0x30
   152b8:	stmia	ip!, {r0, r1, r2, r3}
   152bc:	ldm	lr, {r0, r1, r2, r3}
   152c0:	stm	ip, {r0, r1, r2, r3}
   152c4:	beq	15474 <__assert_fail@plt+0x42cc>
   152c8:	str	r7, [sp, #88]	; 0x58
   152cc:	str	r8, [sp, #92]	; 0x5c
   152d0:	bl	110a0 <__errno_location@plt>
   152d4:	ldr	r6, [pc, #416]	; 1547c <__assert_fail@plt+0x42d4>
   152d8:	cmn	r4, #-2147483647	; 0x80000001
   152dc:	ldr	r5, [r6]
   152e0:	mov	r9, r0
   152e4:	movne	r0, #0
   152e8:	moveq	r0, #1
   152ec:	ldr	r3, [r9]
   152f0:	orrs	r0, r0, r4, lsr #31
   152f4:	str	r3, [sp, #28]
   152f8:	bne	15474 <__assert_fail@plt+0x42cc>
   152fc:	ldr	r2, [r6, #4]
   15300:	cmp	r4, r2
   15304:	movlt	r3, sl
   15308:	blt	15374 <__assert_fail@plt+0x41cc>
   1530c:	add	r7, r6, #8
   15310:	cmp	r5, r7
   15314:	str	r2, [sp, #44]	; 0x2c
   15318:	beq	15444 <__assert_fail@plt+0x429c>
   1531c:	mov	r3, #8
   15320:	sub	r2, r4, r2
   15324:	mov	r0, r5
   15328:	str	r3, [sp]
   1532c:	add	r2, r2, #1
   15330:	mvn	r3, #-2147483648	; 0x80000000
   15334:	add	r1, sp, #44	; 0x2c
   15338:	bl	173b8 <__assert_fail@plt+0x6210>
   1533c:	mov	r5, r0
   15340:	str	r0, [r6]
   15344:	ldr	r0, [r6, #4]
   15348:	ldr	r2, [sp, #44]	; 0x2c
   1534c:	mov	r1, #0
   15350:	sub	r2, r2, r0
   15354:	add	r0, r5, r0, lsl #3
   15358:	lsl	r2, r2, #3
   1535c:	bl	110c4 <memset@plt>
   15360:	ldr	r3, [sp, #48]	; 0x30
   15364:	ldr	r7, [sp, #88]	; 0x58
   15368:	ldr	r8, [sp, #92]	; 0x5c
   1536c:	ldr	r2, [sp, #44]	; 0x2c
   15370:	str	r2, [r6, #4]
   15374:	add	r2, r5, r4, lsl #3
   15378:	mov	r1, r2
   1537c:	str	r2, [sp, #32]
   15380:	ldr	r2, [sp, #52]	; 0x34
   15384:	ldr	r6, [r1, #4]
   15388:	ldr	sl, [r5, r4, lsl #3]
   1538c:	orr	r2, r2, #1
   15390:	str	r3, [sp]
   15394:	add	r3, sp, #56	; 0x38
   15398:	str	r2, [sp, #36]	; 0x24
   1539c:	str	r2, [sp, #4]
   153a0:	str	r3, [sp, #8]
   153a4:	mov	r0, r6
   153a8:	str	r8, [sp, #16]
   153ac:	str	r7, [sp, #12]
   153b0:	mov	r1, sl
   153b4:	mvn	r3, #0
   153b8:	mov	r2, fp
   153bc:	bl	12264 <__assert_fail@plt+0x10bc>
   153c0:	cmp	sl, r0
   153c4:	bhi	15430 <__assert_fail@plt+0x4288>
   153c8:	ldr	r3, [pc, #176]	; 15480 <__assert_fail@plt+0x42d8>
   153cc:	add	r7, r0, #1
   153d0:	cmp	r6, r3
   153d4:	str	r7, [r5, r4, lsl #3]
   153d8:	beq	153e4 <__assert_fail@plt+0x423c>
   153dc:	mov	r0, r6
   153e0:	bl	12038 <__assert_fail@plt+0xe90>
   153e4:	mov	r0, r7
   153e8:	bl	1719c <__assert_fail@plt+0x5ff4>
   153ec:	ldr	r3, [sp, #32]
   153f0:	ldr	lr, [sp, #92]	; 0x5c
   153f4:	ldr	ip, [sp, #88]	; 0x58
   153f8:	ldr	r4, [sp, #36]	; 0x24
   153fc:	mov	r2, fp
   15400:	mov	r1, r7
   15404:	str	r0, [r3, #4]
   15408:	add	r3, sp, #56	; 0x38
   1540c:	str	r3, [sp, #8]
   15410:	ldr	r3, [sp, #48]	; 0x30
   15414:	str	r4, [sp, #4]
   15418:	str	r3, [sp]
   1541c:	str	lr, [sp, #16]
   15420:	str	ip, [sp, #12]
   15424:	mvn	r3, #0
   15428:	mov	r6, r0
   1542c:	bl	12264 <__assert_fail@plt+0x10bc>
   15430:	ldr	r3, [sp, #28]
   15434:	mov	r0, r6
   15438:	str	r3, [r9]
   1543c:	add	sp, sp, #100	; 0x64
   15440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15444:	mov	r3, #8
   15448:	sub	r2, r4, r2
   1544c:	str	r3, [sp]
   15450:	add	r1, sp, #44	; 0x2c
   15454:	add	r2, r2, #1
   15458:	mvn	r3, #-2147483648	; 0x80000000
   1545c:	bl	173b8 <__assert_fail@plt+0x6210>
   15460:	mov	r5, r0
   15464:	ldm	r7, {r0, r1}
   15468:	str	r5, [r6]
   1546c:	stm	r5, {r0, r1}
   15470:	b	15344 <__assert_fail@plt+0x419c>
   15474:	bl	11184 <abort@plt>
   15478:	andeq	fp, r2, ip, lsl #3
   1547c:	andeq	fp, r2, r0, lsr #2
   15480:			; <UNDEFINED> instruction: 0x0002b1bc
   15484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15488:	mov	r7, r1
   1548c:	ldr	lr, [pc, #492]	; 15680 <__assert_fail@plt+0x44d8>
   15490:	mov	r8, r2
   15494:	mov	r4, r0
   15498:	mov	fp, r3
   1549c:	ldm	lr!, {r0, r1, r2, r3}
   154a0:	sub	sp, sp, #100	; 0x64
   154a4:	add	ip, sp, #48	; 0x30
   154a8:	mov	sl, #10
   154ac:	stmia	ip!, {r0, r1, r2, r3}
   154b0:	cmp	r8, #0
   154b4:	cmpne	r7, #0
   154b8:	ldm	lr!, {r0, r1, r2, r3}
   154bc:	str	sl, [sp, #48]	; 0x30
   154c0:	stmia	ip!, {r0, r1, r2, r3}
   154c4:	ldm	lr, {r0, r1, r2, r3}
   154c8:	stm	ip, {r0, r1, r2, r3}
   154cc:	beq	1567c <__assert_fail@plt+0x44d4>
   154d0:	str	r7, [sp, #88]	; 0x58
   154d4:	str	r8, [sp, #92]	; 0x5c
   154d8:	bl	110a0 <__errno_location@plt>
   154dc:	ldr	r6, [pc, #416]	; 15684 <__assert_fail@plt+0x44dc>
   154e0:	cmn	r4, #-2147483647	; 0x80000001
   154e4:	ldr	r5, [r6]
   154e8:	mov	r9, r0
   154ec:	movne	r0, #0
   154f0:	moveq	r0, #1
   154f4:	ldr	r3, [r9]
   154f8:	orrs	r0, r0, r4, lsr #31
   154fc:	str	r3, [sp, #28]
   15500:	bne	1567c <__assert_fail@plt+0x44d4>
   15504:	ldr	r2, [r6, #4]
   15508:	cmp	r4, r2
   1550c:	movlt	r3, sl
   15510:	blt	1557c <__assert_fail@plt+0x43d4>
   15514:	add	r7, r6, #8
   15518:	cmp	r5, r7
   1551c:	str	r2, [sp, #44]	; 0x2c
   15520:	beq	1564c <__assert_fail@plt+0x44a4>
   15524:	mov	r3, #8
   15528:	sub	r2, r4, r2
   1552c:	mov	r0, r5
   15530:	str	r3, [sp]
   15534:	add	r2, r2, #1
   15538:	mvn	r3, #-2147483648	; 0x80000000
   1553c:	add	r1, sp, #44	; 0x2c
   15540:	bl	173b8 <__assert_fail@plt+0x6210>
   15544:	mov	r5, r0
   15548:	str	r0, [r6]
   1554c:	ldr	r0, [r6, #4]
   15550:	ldr	r2, [sp, #44]	; 0x2c
   15554:	mov	r1, #0
   15558:	sub	r2, r2, r0
   1555c:	add	r0, r5, r0, lsl #3
   15560:	lsl	r2, r2, #3
   15564:	bl	110c4 <memset@plt>
   15568:	ldr	r3, [sp, #48]	; 0x30
   1556c:	ldr	r7, [sp, #88]	; 0x58
   15570:	ldr	r8, [sp, #92]	; 0x5c
   15574:	ldr	r2, [sp, #44]	; 0x2c
   15578:	str	r2, [r6, #4]
   1557c:	add	r2, r5, r4, lsl #3
   15580:	mov	r1, r2
   15584:	str	r2, [sp, #32]
   15588:	ldr	r2, [sp, #52]	; 0x34
   1558c:	ldr	r6, [r1, #4]
   15590:	ldr	sl, [r5, r4, lsl #3]
   15594:	orr	r2, r2, #1
   15598:	str	r3, [sp]
   1559c:	add	r3, sp, #56	; 0x38
   155a0:	str	r2, [sp, #36]	; 0x24
   155a4:	str	r2, [sp, #4]
   155a8:	str	r3, [sp, #8]
   155ac:	mov	r0, r6
   155b0:	str	r8, [sp, #16]
   155b4:	str	r7, [sp, #12]
   155b8:	mov	r1, sl
   155bc:	ldr	r3, [sp, #136]	; 0x88
   155c0:	mov	r2, fp
   155c4:	bl	12264 <__assert_fail@plt+0x10bc>
   155c8:	cmp	sl, r0
   155cc:	bhi	15638 <__assert_fail@plt+0x4490>
   155d0:	ldr	r3, [pc, #176]	; 15688 <__assert_fail@plt+0x44e0>
   155d4:	add	r7, r0, #1
   155d8:	cmp	r6, r3
   155dc:	str	r7, [r5, r4, lsl #3]
   155e0:	beq	155ec <__assert_fail@plt+0x4444>
   155e4:	mov	r0, r6
   155e8:	bl	12038 <__assert_fail@plt+0xe90>
   155ec:	mov	r0, r7
   155f0:	bl	1719c <__assert_fail@plt+0x5ff4>
   155f4:	ldr	r3, [sp, #32]
   155f8:	ldr	lr, [sp, #92]	; 0x5c
   155fc:	ldr	ip, [sp, #88]	; 0x58
   15600:	ldr	r4, [sp, #36]	; 0x24
   15604:	mov	r2, fp
   15608:	mov	r1, r7
   1560c:	str	r0, [r3, #4]
   15610:	add	r3, sp, #56	; 0x38
   15614:	str	r3, [sp, #8]
   15618:	ldr	r3, [sp, #48]	; 0x30
   1561c:	str	r4, [sp, #4]
   15620:	str	r3, [sp]
   15624:	str	lr, [sp, #16]
   15628:	str	ip, [sp, #12]
   1562c:	ldr	r3, [sp, #136]	; 0x88
   15630:	mov	r6, r0
   15634:	bl	12264 <__assert_fail@plt+0x10bc>
   15638:	ldr	r3, [sp, #28]
   1563c:	mov	r0, r6
   15640:	str	r3, [r9]
   15644:	add	sp, sp, #100	; 0x64
   15648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1564c:	mov	r3, #8
   15650:	sub	r2, r4, r2
   15654:	str	r3, [sp]
   15658:	add	r1, sp, #44	; 0x2c
   1565c:	add	r2, r2, #1
   15660:	mvn	r3, #-2147483648	; 0x80000000
   15664:	bl	173b8 <__assert_fail@plt+0x6210>
   15668:	mov	r5, r0
   1566c:	ldm	r7, {r0, r1}
   15670:	str	r5, [r6]
   15674:	stm	r5, {r0, r1}
   15678:	b	1554c <__assert_fail@plt+0x43a4>
   1567c:	bl	11184 <abort@plt>
   15680:	andeq	fp, r2, ip, lsl #3
   15684:	andeq	fp, r2, r0, lsr #2
   15688:			; <UNDEFINED> instruction: 0x0002b1bc
   1568c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15690:	mov	r5, r0
   15694:	ldr	lr, [pc, #452]	; 15860 <__assert_fail@plt+0x46b8>
   15698:	mov	r6, r1
   1569c:	mov	sl, r2
   156a0:	ldm	lr!, {r0, r1, r2, r3}
   156a4:	sub	sp, sp, #92	; 0x5c
   156a8:	add	ip, sp, #40	; 0x28
   156ac:	cmp	r6, #0
   156b0:	cmpne	r5, #0
   156b4:	stmia	ip!, {r0, r1, r2, r3}
   156b8:	mov	r9, #10
   156bc:	ldm	lr!, {r0, r1, r2, r3}
   156c0:	moveq	fp, #1
   156c4:	movne	fp, #0
   156c8:	str	r9, [sp, #40]	; 0x28
   156cc:	stmia	ip!, {r0, r1, r2, r3}
   156d0:	ldm	lr, {r0, r1, r2, r3}
   156d4:	stm	ip, {r0, r1, r2, r3}
   156d8:	beq	1585c <__assert_fail@plt+0x46b4>
   156dc:	str	r5, [sp, #80]	; 0x50
   156e0:	str	r6, [sp, #84]	; 0x54
   156e4:	bl	110a0 <__errno_location@plt>
   156e8:	ldr	r7, [pc, #372]	; 15864 <__assert_fail@plt+0x46bc>
   156ec:	ldr	r2, [r7, #4]
   156f0:	ldr	r4, [r7]
   156f4:	cmp	r2, #0
   156f8:	ldr	r3, [r0]
   156fc:	mov	r8, r0
   15700:	str	r3, [sp, #24]
   15704:	movgt	r3, r9
   15708:	bgt	15770 <__assert_fail@plt+0x45c8>
   1570c:	add	r5, r7, #8
   15710:	cmp	r4, r5
   15714:	str	r2, [sp, #36]	; 0x24
   15718:	beq	1582c <__assert_fail@plt+0x4684>
   1571c:	mov	r3, #8
   15720:	mov	r0, r4
   15724:	str	r3, [sp]
   15728:	rsb	r2, r2, #1
   1572c:	mvn	r3, #-2147483648	; 0x80000000
   15730:	add	r1, sp, #36	; 0x24
   15734:	bl	173b8 <__assert_fail@plt+0x6210>
   15738:	mov	r4, r0
   1573c:	str	r0, [r7]
   15740:	ldr	r0, [r7, #4]
   15744:	ldr	r2, [sp, #36]	; 0x24
   15748:	mov	r1, #0
   1574c:	sub	r2, r2, r0
   15750:	add	r0, r4, r0, lsl #3
   15754:	lsl	r2, r2, #3
   15758:	bl	110c4 <memset@plt>
   1575c:	ldr	r3, [sp, #40]	; 0x28
   15760:	ldr	r5, [sp, #80]	; 0x50
   15764:	ldr	r6, [sp, #84]	; 0x54
   15768:	ldr	r2, [sp, #36]	; 0x24
   1576c:	str	r2, [r7, #4]
   15770:	ldr	r2, [sp, #44]	; 0x2c
   15774:	ldr	r9, [r4]
   15778:	ldr	r7, [r4, #4]
   1577c:	orr	r2, r2, #1
   15780:	add	fp, sp, #48	; 0x30
   15784:	str	r2, [sp, #28]
   15788:	str	r2, [sp, #4]
   1578c:	str	r3, [sp]
   15790:	str	r6, [sp, #16]
   15794:	str	r5, [sp, #12]
   15798:	mov	r1, r9
   1579c:	mov	r0, r7
   157a0:	str	fp, [sp, #8]
   157a4:	mvn	r3, #0
   157a8:	mov	r2, sl
   157ac:	bl	12264 <__assert_fail@plt+0x10bc>
   157b0:	cmp	r9, r0
   157b4:	bhi	15818 <__assert_fail@plt+0x4670>
   157b8:	ldr	r3, [pc, #168]	; 15868 <__assert_fail@plt+0x46c0>
   157bc:	add	r5, r0, #1
   157c0:	cmp	r7, r3
   157c4:	str	r5, [r4]
   157c8:	beq	157d4 <__assert_fail@plt+0x462c>
   157cc:	mov	r0, r7
   157d0:	bl	12038 <__assert_fail@plt+0xe90>
   157d4:	mov	r0, r5
   157d8:	bl	1719c <__assert_fail@plt+0x5ff4>
   157dc:	ldr	lr, [sp, #84]	; 0x54
   157e0:	ldr	r3, [sp, #40]	; 0x28
   157e4:	ldr	ip, [sp, #80]	; 0x50
   157e8:	mov	r2, sl
   157ec:	mov	r1, r5
   157f0:	str	r0, [r4, #4]
   157f4:	ldr	r4, [sp, #28]
   157f8:	str	r3, [sp]
   157fc:	str	fp, [sp, #8]
   15800:	str	r4, [sp, #4]
   15804:	str	lr, [sp, #16]
   15808:	str	ip, [sp, #12]
   1580c:	mvn	r3, #0
   15810:	mov	r7, r0
   15814:	bl	12264 <__assert_fail@plt+0x10bc>
   15818:	ldr	r3, [sp, #24]
   1581c:	mov	r0, r7
   15820:	str	r3, [r8]
   15824:	add	sp, sp, #92	; 0x5c
   15828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1582c:	mov	r3, #8
   15830:	str	r3, [sp]
   15834:	add	r1, sp, #36	; 0x24
   15838:	rsb	r2, r2, #1
   1583c:	mov	r0, fp
   15840:	mvn	r3, #-2147483648	; 0x80000000
   15844:	bl	173b8 <__assert_fail@plt+0x6210>
   15848:	mov	r4, r0
   1584c:	ldm	r5, {r0, r1}
   15850:	str	r4, [r7]
   15854:	stm	r4, {r0, r1}
   15858:	b	15740 <__assert_fail@plt+0x4598>
   1585c:	bl	11184 <abort@plt>
   15860:	andeq	fp, r2, ip, lsl #3
   15864:	andeq	fp, r2, r0, lsr #2
   15868:			; <UNDEFINED> instruction: 0x0002b1bc
   1586c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15870:	mov	r5, r0
   15874:	ldr	lr, [pc, #464]	; 15a4c <__assert_fail@plt+0x48a4>
   15878:	mov	r6, r1
   1587c:	mov	sl, r2
   15880:	mov	fp, r3
   15884:	ldm	lr!, {r0, r1, r2, r3}
   15888:	sub	sp, sp, #92	; 0x5c
   1588c:	add	ip, sp, #40	; 0x28
   15890:	cmp	r6, #0
   15894:	cmpne	r5, #0
   15898:	stmia	ip!, {r0, r1, r2, r3}
   1589c:	moveq	r4, #1
   158a0:	ldm	lr!, {r0, r1, r2, r3}
   158a4:	movne	r4, #0
   158a8:	mov	r9, #10
   158ac:	str	r4, [sp, #28]
   158b0:	stmia	ip!, {r0, r1, r2, r3}
   158b4:	ldm	lr, {r0, r1, r2, r3}
   158b8:	str	r9, [sp, #40]	; 0x28
   158bc:	stm	ip, {r0, r1, r2, r3}
   158c0:	beq	15a48 <__assert_fail@plt+0x48a0>
   158c4:	str	r5, [sp, #80]	; 0x50
   158c8:	str	r6, [sp, #84]	; 0x54
   158cc:	bl	110a0 <__errno_location@plt>
   158d0:	ldr	r7, [pc, #376]	; 15a50 <__assert_fail@plt+0x48a8>
   158d4:	ldr	r2, [r7, #4]
   158d8:	ldr	r4, [r7]
   158dc:	cmp	r2, #0
   158e0:	ldr	r3, [r0]
   158e4:	mov	r8, r0
   158e8:	str	r3, [sp, #24]
   158ec:	movgt	r3, r9
   158f0:	bgt	15958 <__assert_fail@plt+0x47b0>
   158f4:	add	r5, r7, #8
   158f8:	cmp	r4, r5
   158fc:	str	r2, [sp, #36]	; 0x24
   15900:	beq	15a18 <__assert_fail@plt+0x4870>
   15904:	mov	r3, #8
   15908:	mov	r0, r4
   1590c:	str	r3, [sp]
   15910:	rsb	r2, r2, #1
   15914:	mvn	r3, #-2147483648	; 0x80000000
   15918:	add	r1, sp, #36	; 0x24
   1591c:	bl	173b8 <__assert_fail@plt+0x6210>
   15920:	mov	r4, r0
   15924:	str	r0, [r7]
   15928:	ldr	r0, [r7, #4]
   1592c:	ldr	r2, [sp, #36]	; 0x24
   15930:	mov	r1, #0
   15934:	sub	r2, r2, r0
   15938:	add	r0, r4, r0, lsl #3
   1593c:	lsl	r2, r2, #3
   15940:	bl	110c4 <memset@plt>
   15944:	ldr	r3, [sp, #40]	; 0x28
   15948:	ldr	r5, [sp, #80]	; 0x50
   1594c:	ldr	r6, [sp, #84]	; 0x54
   15950:	ldr	r2, [sp, #36]	; 0x24
   15954:	str	r2, [r7, #4]
   15958:	ldr	r2, [sp, #44]	; 0x2c
   1595c:	ldr	r9, [r4]
   15960:	ldr	r7, [r4, #4]
   15964:	orr	r2, r2, #1
   15968:	str	r3, [sp]
   1596c:	add	r3, sp, #48	; 0x30
   15970:	str	r2, [sp, #28]
   15974:	str	r2, [sp, #4]
   15978:	str	r3, [sp, #8]
   1597c:	str	r6, [sp, #16]
   15980:	str	r5, [sp, #12]
   15984:	mov	r1, r9
   15988:	mov	r0, r7
   1598c:	mov	r3, fp
   15990:	mov	r2, sl
   15994:	bl	12264 <__assert_fail@plt+0x10bc>
   15998:	cmp	r9, r0
   1599c:	bhi	15a04 <__assert_fail@plt+0x485c>
   159a0:	ldr	r3, [pc, #172]	; 15a54 <__assert_fail@plt+0x48ac>
   159a4:	add	r5, r0, #1
   159a8:	cmp	r7, r3
   159ac:	str	r5, [r4]
   159b0:	beq	159bc <__assert_fail@plt+0x4814>
   159b4:	mov	r0, r7
   159b8:	bl	12038 <__assert_fail@plt+0xe90>
   159bc:	mov	r0, r5
   159c0:	bl	1719c <__assert_fail@plt+0x5ff4>
   159c4:	add	lr, sp, #48	; 0x30
   159c8:	ldr	ip, [sp, #84]	; 0x54
   159cc:	mov	r1, r5
   159d0:	ldr	r5, [sp, #28]
   159d4:	mov	r3, fp
   159d8:	mov	r2, sl
   159dc:	str	r0, [r4, #4]
   159e0:	ldr	r4, [sp, #80]	; 0x50
   159e4:	str	lr, [sp, #8]
   159e8:	ldr	lr, [sp, #40]	; 0x28
   159ec:	str	r5, [sp, #4]
   159f0:	str	ip, [sp, #16]
   159f4:	str	r4, [sp, #12]
   159f8:	str	lr, [sp]
   159fc:	mov	r7, r0
   15a00:	bl	12264 <__assert_fail@plt+0x10bc>
   15a04:	ldr	r3, [sp, #24]
   15a08:	mov	r0, r7
   15a0c:	str	r3, [r8]
   15a10:	add	sp, sp, #92	; 0x5c
   15a14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a18:	mov	r3, #8
   15a1c:	str	r3, [sp]
   15a20:	add	r1, sp, #36	; 0x24
   15a24:	rsb	r2, r2, #1
   15a28:	ldr	r0, [sp, #28]
   15a2c:	mvn	r3, #-2147483648	; 0x80000000
   15a30:	bl	173b8 <__assert_fail@plt+0x6210>
   15a34:	mov	r4, r0
   15a38:	ldm	r5, {r0, r1}
   15a3c:	str	r4, [r7]
   15a40:	stm	r4, {r0, r1}
   15a44:	b	15928 <__assert_fail@plt+0x4780>
   15a48:	bl	11184 <abort@plt>
   15a4c:	andeq	fp, r2, ip, lsl #3
   15a50:	andeq	fp, r2, r0, lsr #2
   15a54:			; <UNDEFINED> instruction: 0x0002b1bc
   15a58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a5c:	sub	sp, sp, #52	; 0x34
   15a60:	mov	r5, r0
   15a64:	mov	sl, r1
   15a68:	mov	fp, r2
   15a6c:	bl	110a0 <__errno_location@plt>
   15a70:	ldr	r4, [pc, #404]	; 15c0c <__assert_fail@plt+0x4a64>
   15a74:	cmn	r5, #-2147483647	; 0x80000001
   15a78:	ldr	r6, [r4]
   15a7c:	mov	r8, r0
   15a80:	movne	r0, #0
   15a84:	moveq	r0, #1
   15a88:	ldr	r3, [r8]
   15a8c:	orrs	r0, r0, r5, lsr #31
   15a90:	str	r3, [sp, #28]
   15a94:	bne	15c08 <__assert_fail@plt+0x4a60>
   15a98:	ldr	r2, [r4, #4]
   15a9c:	cmp	r5, r2
   15aa0:	blt	15b00 <__assert_fail@plt+0x4958>
   15aa4:	add	r7, r4, #8
   15aa8:	cmp	r6, r7
   15aac:	str	r2, [sp, #44]	; 0x2c
   15ab0:	beq	15bd8 <__assert_fail@plt+0x4a30>
   15ab4:	mov	r3, #8
   15ab8:	sub	r2, r5, r2
   15abc:	mov	r0, r6
   15ac0:	str	r3, [sp]
   15ac4:	add	r2, r2, #1
   15ac8:	mvn	r3, #-2147483648	; 0x80000000
   15acc:	add	r1, sp, #44	; 0x2c
   15ad0:	bl	173b8 <__assert_fail@plt+0x6210>
   15ad4:	mov	r6, r0
   15ad8:	str	r0, [r4]
   15adc:	ldr	r0, [r4, #4]
   15ae0:	ldr	r2, [sp, #44]	; 0x2c
   15ae4:	mov	r1, #0
   15ae8:	sub	r2, r2, r0
   15aec:	add	r0, r6, r0, lsl #3
   15af0:	lsl	r2, r2, #3
   15af4:	bl	110c4 <memset@plt>
   15af8:	ldr	r3, [sp, #44]	; 0x2c
   15afc:	str	r3, [r4, #4]
   15b00:	ldr	r2, [r4, #56]	; 0x38
   15b04:	add	r3, r6, r5, lsl #3
   15b08:	ldr	r1, [r4, #20]
   15b0c:	ldr	r7, [r3, #4]
   15b10:	ldr	r9, [r6, r5, lsl #3]
   15b14:	ldr	ip, [r4, #60]	; 0x3c
   15b18:	str	r3, [sp, #32]
   15b1c:	ldr	r3, [r4, #16]
   15b20:	str	r2, [sp, #12]
   15b24:	ldr	r2, [pc, #228]	; 15c10 <__assert_fail@plt+0x4a68>
   15b28:	orr	r1, r1, #1
   15b2c:	str	r1, [sp, #36]	; 0x24
   15b30:	str	r1, [sp, #4]
   15b34:	str	r2, [sp, #8]
   15b38:	str	r3, [sp]
   15b3c:	mov	r0, r7
   15b40:	mov	r1, r9
   15b44:	str	ip, [sp, #16]
   15b48:	mov	r3, fp
   15b4c:	mov	r2, sl
   15b50:	bl	12264 <__assert_fail@plt+0x10bc>
   15b54:	cmp	r9, r0
   15b58:	bhi	15bc4 <__assert_fail@plt+0x4a1c>
   15b5c:	ldr	r3, [pc, #176]	; 15c14 <__assert_fail@plt+0x4a6c>
   15b60:	add	r9, r0, #1
   15b64:	cmp	r7, r3
   15b68:	str	r9, [r6, r5, lsl #3]
   15b6c:	beq	15b78 <__assert_fail@plt+0x49d0>
   15b70:	mov	r0, r7
   15b74:	bl	12038 <__assert_fail@plt+0xe90>
   15b78:	mov	r0, r9
   15b7c:	bl	1719c <__assert_fail@plt+0x5ff4>
   15b80:	ldr	ip, [sp, #32]
   15b84:	ldr	lr, [r4, #60]	; 0x3c
   15b88:	ldr	r5, [r4, #56]	; 0x38
   15b8c:	mov	r3, fp
   15b90:	mov	r2, sl
   15b94:	mov	r1, r9
   15b98:	str	r0, [ip, #4]
   15b9c:	ldr	ip, [r4, #16]
   15ba0:	ldr	r4, [pc, #104]	; 15c10 <__assert_fail@plt+0x4a68>
   15ba4:	str	lr, [sp, #16]
   15ba8:	str	r4, [sp, #8]
   15bac:	ldr	r4, [sp, #36]	; 0x24
   15bb0:	str	r5, [sp, #12]
   15bb4:	str	r4, [sp, #4]
   15bb8:	str	ip, [sp]
   15bbc:	mov	r7, r0
   15bc0:	bl	12264 <__assert_fail@plt+0x10bc>
   15bc4:	ldr	r3, [sp, #28]
   15bc8:	mov	r0, r7
   15bcc:	str	r3, [r8]
   15bd0:	add	sp, sp, #52	; 0x34
   15bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bd8:	mov	r3, #8
   15bdc:	sub	r2, r5, r2
   15be0:	str	r3, [sp]
   15be4:	add	r1, sp, #44	; 0x2c
   15be8:	add	r2, r2, #1
   15bec:	mvn	r3, #-2147483648	; 0x80000000
   15bf0:	bl	173b8 <__assert_fail@plt+0x6210>
   15bf4:	mov	r6, r0
   15bf8:	ldm	r7, {r0, r1}
   15bfc:	str	r6, [r4]
   15c00:	stm	r6, {r0, r1}
   15c04:	b	15adc <__assert_fail@plt+0x4934>
   15c08:	bl	11184 <abort@plt>
   15c0c:	andeq	fp, r2, r0, lsr #2
   15c10:	andeq	fp, r2, r8, lsr r1
   15c14:			; <UNDEFINED> instruction: 0x0002b1bc
   15c18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c1c:	sub	sp, sp, #44	; 0x2c
   15c20:	mov	r9, r0
   15c24:	mov	sl, r1
   15c28:	bl	110a0 <__errno_location@plt>
   15c2c:	ldr	r4, [pc, #360]	; 15d9c <__assert_fail@plt+0x4bf4>
   15c30:	ldr	r2, [r4, #4]
   15c34:	ldr	r5, [r4]
   15c38:	cmp	r2, #0
   15c3c:	ldr	r3, [r0]
   15c40:	mov	r7, r0
   15c44:	str	r3, [sp, #24]
   15c48:	bgt	15ca4 <__assert_fail@plt+0x4afc>
   15c4c:	add	r6, r4, #8
   15c50:	cmp	r5, r6
   15c54:	str	r2, [sp, #36]	; 0x24
   15c58:	beq	15d6c <__assert_fail@plt+0x4bc4>
   15c5c:	mov	r3, #8
   15c60:	mov	r0, r5
   15c64:	str	r3, [sp]
   15c68:	rsb	r2, r2, #1
   15c6c:	mvn	r3, #-2147483648	; 0x80000000
   15c70:	add	r1, sp, #36	; 0x24
   15c74:	bl	173b8 <__assert_fail@plt+0x6210>
   15c78:	mov	r5, r0
   15c7c:	str	r0, [r4]
   15c80:	ldr	r0, [r4, #4]
   15c84:	ldr	r2, [sp, #36]	; 0x24
   15c88:	mov	r1, #0
   15c8c:	sub	r2, r2, r0
   15c90:	add	r0, r5, r0, lsl #3
   15c94:	lsl	r2, r2, #3
   15c98:	bl	110c4 <memset@plt>
   15c9c:	ldr	r3, [sp, #36]	; 0x24
   15ca0:	str	r3, [r4, #4]
   15ca4:	ldr	r1, [r4, #20]
   15ca8:	ldr	r8, [r5]
   15cac:	ldr	r6, [r5, #4]
   15cb0:	ldr	r2, [r4, #56]	; 0x38
   15cb4:	ldr	r3, [r4, #16]
   15cb8:	ldr	ip, [r4, #60]	; 0x3c
   15cbc:	ldr	fp, [pc, #220]	; 15da0 <__assert_fail@plt+0x4bf8>
   15cc0:	orr	r1, r1, #1
   15cc4:	str	r1, [sp, #28]
   15cc8:	str	r1, [sp, #4]
   15ccc:	str	r2, [sp, #12]
   15cd0:	str	r3, [sp]
   15cd4:	mov	r1, r8
   15cd8:	mov	r0, r6
   15cdc:	str	ip, [sp, #16]
   15ce0:	str	fp, [sp, #8]
   15ce4:	mov	r3, sl
   15ce8:	mov	r2, r9
   15cec:	bl	12264 <__assert_fail@plt+0x10bc>
   15cf0:	cmp	r8, r0
   15cf4:	bhi	15d58 <__assert_fail@plt+0x4bb0>
   15cf8:	ldr	r3, [pc, #164]	; 15da4 <__assert_fail@plt+0x4bfc>
   15cfc:	add	r8, r0, #1
   15d00:	cmp	r6, r3
   15d04:	str	r8, [r5]
   15d08:	beq	15d14 <__assert_fail@plt+0x4b6c>
   15d0c:	mov	r0, r6
   15d10:	bl	12038 <__assert_fail@plt+0xe90>
   15d14:	mov	r0, r8
   15d18:	bl	1719c <__assert_fail@plt+0x5ff4>
   15d1c:	ldr	lr, [r4, #60]	; 0x3c
   15d20:	ldr	ip, [r4, #16]
   15d24:	mov	r3, sl
   15d28:	mov	r2, r9
   15d2c:	mov	r1, r8
   15d30:	str	r0, [r5, #4]
   15d34:	ldr	r5, [r4, #56]	; 0x38
   15d38:	ldr	r4, [sp, #28]
   15d3c:	str	fp, [sp, #8]
   15d40:	str	r4, [sp, #4]
   15d44:	str	lr, [sp, #16]
   15d48:	str	r5, [sp, #12]
   15d4c:	str	ip, [sp]
   15d50:	mov	r6, r0
   15d54:	bl	12264 <__assert_fail@plt+0x10bc>
   15d58:	ldr	r3, [sp, #24]
   15d5c:	mov	r0, r6
   15d60:	str	r3, [r7]
   15d64:	add	sp, sp, #44	; 0x2c
   15d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d6c:	mov	r3, #8
   15d70:	str	r3, [sp]
   15d74:	add	r1, sp, #36	; 0x24
   15d78:	rsb	r2, r2, #1
   15d7c:	mvn	r3, #-2147483648	; 0x80000000
   15d80:	mov	r0, #0
   15d84:	bl	173b8 <__assert_fail@plt+0x6210>
   15d88:	mov	r5, r0
   15d8c:	ldm	r6, {r0, r1}
   15d90:	str	r5, [r4]
   15d94:	stm	r5, {r0, r1}
   15d98:	b	15c80 <__assert_fail@plt+0x4ad8>
   15d9c:	andeq	fp, r2, r0, lsr #2
   15da0:	andeq	fp, r2, r8, lsr r1
   15da4:			; <UNDEFINED> instruction: 0x0002b1bc
   15da8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dac:	sub	sp, sp, #44	; 0x2c
   15db0:	mov	r5, r0
   15db4:	mov	sl, r1
   15db8:	bl	110a0 <__errno_location@plt>
   15dbc:	ldr	r4, [pc, #396]	; 15f50 <__assert_fail@plt+0x4da8>
   15dc0:	cmn	r5, #-2147483647	; 0x80000001
   15dc4:	ldr	r6, [r4]
   15dc8:	mov	r8, r0
   15dcc:	movne	r0, #0
   15dd0:	moveq	r0, #1
   15dd4:	ldr	r3, [r8]
   15dd8:	orrs	r0, r0, r5, lsr #31
   15ddc:	str	r3, [sp, #24]
   15de0:	bne	15f4c <__assert_fail@plt+0x4da4>
   15de4:	ldr	r2, [r4, #4]
   15de8:	cmp	r5, r2
   15dec:	blt	15e4c <__assert_fail@plt+0x4ca4>
   15df0:	add	r7, r4, #8
   15df4:	cmp	r6, r7
   15df8:	str	r2, [sp, #36]	; 0x24
   15dfc:	beq	15f1c <__assert_fail@plt+0x4d74>
   15e00:	mov	r3, #8
   15e04:	sub	r2, r5, r2
   15e08:	mov	r0, r6
   15e0c:	str	r3, [sp]
   15e10:	add	r2, r2, #1
   15e14:	mvn	r3, #-2147483648	; 0x80000000
   15e18:	add	r1, sp, #36	; 0x24
   15e1c:	bl	173b8 <__assert_fail@plt+0x6210>
   15e20:	mov	r6, r0
   15e24:	str	r0, [r4]
   15e28:	ldr	r0, [r4, #4]
   15e2c:	ldr	r2, [sp, #36]	; 0x24
   15e30:	mov	r1, #0
   15e34:	sub	r2, r2, r0
   15e38:	add	r0, r6, r0, lsl #3
   15e3c:	lsl	r2, r2, #3
   15e40:	bl	110c4 <memset@plt>
   15e44:	ldr	r3, [sp, #36]	; 0x24
   15e48:	str	r3, [r4, #4]
   15e4c:	ldr	r2, [r4, #56]	; 0x38
   15e50:	add	fp, r6, r5, lsl #3
   15e54:	ldr	r1, [r4, #20]
   15e58:	ldr	r9, [r6, r5, lsl #3]
   15e5c:	ldr	r7, [fp, #4]
   15e60:	ldr	r3, [r4, #16]
   15e64:	ldr	ip, [r4, #60]	; 0x3c
   15e68:	str	r2, [sp, #12]
   15e6c:	ldr	r2, [pc, #224]	; 15f54 <__assert_fail@plt+0x4dac>
   15e70:	orr	r1, r1, #1
   15e74:	str	r1, [sp, #28]
   15e78:	str	r1, [sp, #4]
   15e7c:	str	r2, [sp, #8]
   15e80:	str	r3, [sp]
   15e84:	mov	r0, r7
   15e88:	mov	r1, r9
   15e8c:	str	ip, [sp, #16]
   15e90:	mvn	r3, #0
   15e94:	mov	r2, sl
   15e98:	bl	12264 <__assert_fail@plt+0x10bc>
   15e9c:	cmp	r9, r0
   15ea0:	bhi	15f08 <__assert_fail@plt+0x4d60>
   15ea4:	ldr	r3, [pc, #172]	; 15f58 <__assert_fail@plt+0x4db0>
   15ea8:	add	r9, r0, #1
   15eac:	cmp	r7, r3
   15eb0:	str	r9, [r6, r5, lsl #3]
   15eb4:	beq	15ec0 <__assert_fail@plt+0x4d18>
   15eb8:	mov	r0, r7
   15ebc:	bl	12038 <__assert_fail@plt+0xe90>
   15ec0:	mov	r0, r9
   15ec4:	bl	1719c <__assert_fail@plt+0x5ff4>
   15ec8:	ldr	ip, [r4, #60]	; 0x3c
   15ecc:	ldr	r3, [r4, #16]
   15ed0:	ldr	lr, [r4, #56]	; 0x38
   15ed4:	ldr	r4, [pc, #120]	; 15f54 <__assert_fail@plt+0x4dac>
   15ed8:	mov	r2, sl
   15edc:	mov	r1, r9
   15ee0:	str	r0, [fp, #4]
   15ee4:	str	r4, [sp, #8]
   15ee8:	ldr	r4, [sp, #28]
   15eec:	str	r3, [sp]
   15ef0:	str	r4, [sp, #4]
   15ef4:	str	ip, [sp, #16]
   15ef8:	str	lr, [sp, #12]
   15efc:	mvn	r3, #0
   15f00:	mov	r7, r0
   15f04:	bl	12264 <__assert_fail@plt+0x10bc>
   15f08:	ldr	r3, [sp, #24]
   15f0c:	mov	r0, r7
   15f10:	str	r3, [r8]
   15f14:	add	sp, sp, #44	; 0x2c
   15f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f1c:	mov	r3, #8
   15f20:	sub	r2, r5, r2
   15f24:	str	r3, [sp]
   15f28:	add	r1, sp, #36	; 0x24
   15f2c:	add	r2, r2, #1
   15f30:	mvn	r3, #-2147483648	; 0x80000000
   15f34:	bl	173b8 <__assert_fail@plt+0x6210>
   15f38:	mov	r6, r0
   15f3c:	ldm	r7, {r0, r1}
   15f40:	str	r6, [r4]
   15f44:	stm	r6, {r0, r1}
   15f48:	b	15e28 <__assert_fail@plt+0x4c80>
   15f4c:	bl	11184 <abort@plt>
   15f50:	andeq	fp, r2, r0, lsr #2
   15f54:	andeq	fp, r2, r8, lsr r1
   15f58:			; <UNDEFINED> instruction: 0x0002b1bc
   15f5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f60:	sub	sp, sp, #44	; 0x2c
   15f64:	mov	sl, r0
   15f68:	bl	110a0 <__errno_location@plt>
   15f6c:	ldr	r4, [pc, #348]	; 160d0 <__assert_fail@plt+0x4f28>
   15f70:	ldr	r2, [r4, #4]
   15f74:	ldr	r5, [r4]
   15f78:	cmp	r2, #0
   15f7c:	ldr	r3, [r0]
   15f80:	mov	r8, r0
   15f84:	str	r3, [sp, #28]
   15f88:	bgt	15fe4 <__assert_fail@plt+0x4e3c>
   15f8c:	add	r6, r4, #8
   15f90:	cmp	r5, r6
   15f94:	str	r2, [sp, #36]	; 0x24
   15f98:	beq	160a0 <__assert_fail@plt+0x4ef8>
   15f9c:	mov	r3, #8
   15fa0:	mov	r0, r5
   15fa4:	str	r3, [sp]
   15fa8:	rsb	r2, r2, #1
   15fac:	mvn	r3, #-2147483648	; 0x80000000
   15fb0:	add	r1, sp, #36	; 0x24
   15fb4:	bl	173b8 <__assert_fail@plt+0x6210>
   15fb8:	mov	r5, r0
   15fbc:	str	r0, [r4]
   15fc0:	ldr	r0, [r4, #4]
   15fc4:	ldr	r2, [sp, #36]	; 0x24
   15fc8:	mov	r1, #0
   15fcc:	sub	r2, r2, r0
   15fd0:	add	r0, r5, r0, lsl #3
   15fd4:	lsl	r2, r2, #3
   15fd8:	bl	110c4 <memset@plt>
   15fdc:	ldr	r3, [sp, #36]	; 0x24
   15fe0:	str	r3, [r4, #4]
   15fe4:	ldr	r7, [r4, #20]
   15fe8:	ldr	r9, [r5]
   15fec:	ldr	r6, [r5, #4]
   15ff0:	ldr	r2, [r4, #56]	; 0x38
   15ff4:	ldr	r3, [r4, #16]
   15ff8:	ldr	ip, [r4, #60]	; 0x3c
   15ffc:	ldr	fp, [pc, #208]	; 160d4 <__assert_fail@plt+0x4f2c>
   16000:	orr	r7, r7, #1
   16004:	str	r2, [sp, #12]
   16008:	str	r3, [sp]
   1600c:	str	r7, [sp, #4]
   16010:	mov	r1, r9
   16014:	mov	r0, r6
   16018:	str	ip, [sp, #16]
   1601c:	str	fp, [sp, #8]
   16020:	mvn	r3, #0
   16024:	mov	r2, sl
   16028:	bl	12264 <__assert_fail@plt+0x10bc>
   1602c:	cmp	r9, r0
   16030:	bhi	1608c <__assert_fail@plt+0x4ee4>
   16034:	ldr	r3, [pc, #156]	; 160d8 <__assert_fail@plt+0x4f30>
   16038:	add	r9, r0, #1
   1603c:	cmp	r6, r3
   16040:	str	r9, [r5]
   16044:	beq	16050 <__assert_fail@plt+0x4ea8>
   16048:	mov	r0, r6
   1604c:	bl	12038 <__assert_fail@plt+0xe90>
   16050:	mov	r0, r9
   16054:	bl	1719c <__assert_fail@plt+0x5ff4>
   16058:	ldr	ip, [r4, #60]	; 0x3c
   1605c:	ldr	r3, [r4, #16]
   16060:	ldr	lr, [r4, #56]	; 0x38
   16064:	mov	r2, sl
   16068:	mov	r1, r9
   1606c:	str	r0, [r5, #4]
   16070:	str	r3, [sp]
   16074:	stmib	sp, {r7, fp}
   16078:	str	ip, [sp, #16]
   1607c:	str	lr, [sp, #12]
   16080:	mvn	r3, #0
   16084:	mov	r6, r0
   16088:	bl	12264 <__assert_fail@plt+0x10bc>
   1608c:	ldr	r3, [sp, #28]
   16090:	mov	r0, r6
   16094:	str	r3, [r8]
   16098:	add	sp, sp, #44	; 0x2c
   1609c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160a0:	mov	r3, #8
   160a4:	str	r3, [sp]
   160a8:	add	r1, sp, #36	; 0x24
   160ac:	rsb	r2, r2, #1
   160b0:	mvn	r3, #-2147483648	; 0x80000000
   160b4:	mov	r0, #0
   160b8:	bl	173b8 <__assert_fail@plt+0x6210>
   160bc:	mov	r5, r0
   160c0:	ldm	r6, {r0, r1}
   160c4:	str	r5, [r4]
   160c8:	stm	r5, {r0, r1}
   160cc:	b	15fc0 <__assert_fail@plt+0x4e18>
   160d0:	andeq	fp, r2, r0, lsr #2
   160d4:	andeq	fp, r2, r8, lsr r1
   160d8:			; <UNDEFINED> instruction: 0x0002b1bc
   160dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160e0:	sub	sp, sp, #52	; 0x34
   160e4:	cmp	r2, #0
   160e8:	mov	r4, r2
   160ec:	str	r2, [sp, #8]
   160f0:	mov	r5, r1
   160f4:	str	r1, [sp, #20]
   160f8:	mov	sl, r3
   160fc:	mov	r8, r0
   16100:	beq	1645c <__assert_fail@plt+0x52b4>
   16104:	mov	r1, #58	; 0x3a
   16108:	bl	11094 <strchr@plt>
   1610c:	ldr	r3, [r5]
   16110:	mov	r2, r4
   16114:	str	r3, [sp, #12]
   16118:	ldr	r3, [r4]
   1611c:	str	r3, [sp, #16]
   16120:	clz	r5, r0
   16124:	mov	r4, r0
   16128:	lsr	r5, r5, #5
   1612c:	cmp	sl, #0
   16130:	movne	r3, #0
   16134:	strne	r3, [sl]
   16138:	ldr	r3, [sp, #88]	; 0x58
   1613c:	cmp	r3, #0
   16140:	movne	r2, r3
   16144:	movne	r3, #0
   16148:	strne	r3, [r2]
   1614c:	cmp	r4, #0
   16150:	beq	16474 <__assert_fail@plt+0x52cc>
   16154:	subs	r7, r4, r8
   16158:	bne	163b0 <__assert_fail@plt+0x5208>
   1615c:	ldrb	r6, [r4, #1]
   16160:	cmp	r6, #0
   16164:	movne	r6, r7
   16168:	beq	16484 <__assert_fail@plt+0x52dc>
   1616c:	cmp	r6, #0
   16170:	add	r9, r4, #1
   16174:	beq	1666c <__assert_fail@plt+0x54c4>
   16178:	ldrb	r3, [r6]
   1617c:	cmp	r3, #43	; 0x2b
   16180:	beq	1621c <__assert_fail@plt+0x5074>
   16184:	mov	r0, r6
   16188:	bl	10ee4 <getpwnam@plt>
   1618c:	cmp	r0, #0
   16190:	beq	1621c <__assert_fail@plt+0x5074>
   16194:	cmp	r4, #0
   16198:	clz	r7, r9
   1619c:	ldr	r3, [r0, #8]
   161a0:	lsr	r7, r7, #5
   161a4:	moveq	r7, #0
   161a8:	cmp	r7, #0
   161ac:	str	r3, [sp, #12]
   161b0:	bne	163e4 <__assert_fail@plt+0x523c>
   161b4:	adds	r4, r9, #0
   161b8:	mov	fp, r7
   161bc:	movne	r4, #1
   161c0:	bl	11124 <endpwent@plt>
   161c4:	cmp	r4, #0
   161c8:	beq	1624c <__assert_fail@plt+0x50a4>
   161cc:	ldrb	r3, [r9]
   161d0:	cmp	r3, #43	; 0x2b
   161d4:	bne	16380 <__assert_fail@plt+0x51d8>
   161d8:	ldr	r2, [pc, #1352]	; 16728 <__assert_fail@plt+0x5580>
   161dc:	add	r3, sp, #24
   161e0:	str	r2, [sp]
   161e4:	mov	r1, #0
   161e8:	mov	r2, #10
   161ec:	mov	r0, r9
   161f0:	bl	1782c <__assert_fail@plt+0x6684>
   161f4:	cmp	r0, #0
   161f8:	bne	16418 <__assert_fail@plt+0x5270>
   161fc:	ldr	r3, [sp, #24]
   16200:	ldr	r2, [sp, #16]
   16204:	cmn	r3, #1
   16208:	movne	r2, r3
   1620c:	ldr	fp, [pc, #1304]	; 1672c <__assert_fail@plt+0x5584>
   16210:	str	r2, [sp, #16]
   16214:	movne	fp, #0
   16218:	b	1639c <__assert_fail@plt+0x51f4>
   1621c:	adds	r4, r4, #0
   16220:	movne	r4, #1
   16224:	cmp	r9, #0
   16228:	movne	r4, #0
   1622c:	cmp	r4, #0
   16230:	beq	166ac <__assert_fail@plt+0x5504>
   16234:	mov	r4, #0
   16238:	bl	11124 <endpwent@plt>
   1623c:	cmp	r4, #0
   16240:	ldr	fp, [pc, #1256]	; 16730 <__assert_fail@plt+0x5588>
   16244:	mov	r7, r4
   16248:	bne	161cc <__assert_fail@plt+0x5024>
   1624c:	cmp	fp, #0
   16250:	beq	16488 <__assert_fail@plt+0x52e0>
   16254:	mov	r0, r6
   16258:	bl	12038 <__assert_fail@plt+0xe90>
   1625c:	mov	r0, r7
   16260:	bl	12038 <__assert_fail@plt+0xe90>
   16264:	ldr	r3, [sp, #8]
   16268:	mov	r1, fp
   1626c:	mov	r2, #5
   16270:	mov	r0, #0
   16274:	cmp	r3, #0
   16278:	moveq	r7, #0
   1627c:	andne	r7, r5, #1
   16280:	bl	10f74 <dcgettext@plt>
   16284:	cmp	r7, #0
   16288:	mov	r4, r0
   1628c:	beq	16374 <__assert_fail@plt+0x51cc>
   16290:	cmp	r4, #0
   16294:	beq	164e8 <__assert_fail@plt+0x5340>
   16298:	mov	r1, #46	; 0x2e
   1629c:	mov	r0, r8
   162a0:	bl	11094 <strchr@plt>
   162a4:	subs	r9, r0, #0
   162a8:	beq	16374 <__assert_fail@plt+0x51cc>
   162ac:	ldr	r3, [sp, #20]
   162b0:	cmp	sl, #0
   162b4:	ldr	r3, [r3]
   162b8:	str	r3, [sp, #12]
   162bc:	ldr	r3, [sp, #8]
   162c0:	ldr	fp, [r3]
   162c4:	movne	r3, #0
   162c8:	strne	r3, [sl]
   162cc:	ldr	r3, [sp, #88]	; 0x58
   162d0:	cmp	r3, #0
   162d4:	movne	r2, r3
   162d8:	movne	r3, #0
   162dc:	strne	r3, [r2]
   162e0:	subs	r5, r9, r8
   162e4:	bne	164f8 <__assert_fail@plt+0x5350>
   162e8:	ldrb	r3, [r9, #1]
   162ec:	cmp	r3, #0
   162f0:	beq	16618 <__assert_fail@plt+0x5470>
   162f4:	add	r8, r9, #1
   162f8:	adds	r9, r9, #1
   162fc:	mov	r6, r5
   16300:	mov	r7, r5
   16304:	movne	r9, #1
   16308:	cmp	r9, #0
   1630c:	beq	16344 <__assert_fail@plt+0x519c>
   16310:	ldrb	r3, [r8]
   16314:	cmp	r3, #43	; 0x2b
   16318:	beq	16420 <__assert_fail@plt+0x5278>
   1631c:	mov	r0, r8
   16320:	bl	1119c <getgrnam@plt>
   16324:	cmp	r0, #0
   16328:	movne	r7, #0
   1632c:	ldrne	fp, [r0, #8]
   16330:	beq	16420 <__assert_fail@plt+0x5278>
   16334:	bl	10ec0 <endgrent@plt>
   16338:	mov	r0, r8
   1633c:	bl	17784 <__assert_fail@plt+0x65dc>
   16340:	mov	r5, r0
   16344:	cmp	r7, #0
   16348:	beq	16620 <__assert_fail@plt+0x5478>
   1634c:	mov	r0, r6
   16350:	bl	12038 <__assert_fail@plt+0xe90>
   16354:	mov	r0, r5
   16358:	bl	12038 <__assert_fail@plt+0xe90>
   1635c:	mov	r1, r7
   16360:	mov	r2, #5
   16364:	mov	r0, #0
   16368:	bl	10f74 <dcgettext@plt>
   1636c:	cmp	r0, #0
   16370:	beq	164e8 <__assert_fail@plt+0x5340>
   16374:	mov	r0, r4
   16378:	add	sp, sp, #52	; 0x34
   1637c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16380:	mov	r0, r9
   16384:	bl	1119c <getgrnam@plt>
   16388:	cmp	r0, #0
   1638c:	beq	161d8 <__assert_fail@plt+0x5030>
   16390:	ldr	r3, [r0, #8]
   16394:	mov	fp, #0
   16398:	str	r3, [sp, #16]
   1639c:	bl	10ec0 <endgrent@plt>
   163a0:	mov	r0, r9
   163a4:	bl	17784 <__assert_fail@plt+0x65dc>
   163a8:	mov	r7, r0
   163ac:	b	1624c <__assert_fail@plt+0x50a4>
   163b0:	add	r1, r7, #1
   163b4:	mov	r0, r8
   163b8:	bl	17714 <__assert_fail@plt+0x656c>
   163bc:	ldrb	r9, [r4, #1]
   163c0:	mov	r3, #0
   163c4:	cmp	r9, r3
   163c8:	mov	r6, r0
   163cc:	strb	r3, [r0, r7]
   163d0:	bne	1616c <__assert_fail@plt+0x4fc4>
   163d4:	ldrb	r3, [r6]
   163d8:	cmp	r3, #43	; 0x2b
   163dc:	bne	16184 <__assert_fail@plt+0x4fdc>
   163e0:	b	1621c <__assert_fail@plt+0x5074>
   163e4:	ldr	r3, [r0, #12]
   163e8:	mov	r0, r3
   163ec:	str	r3, [sp, #16]
   163f0:	bl	11190 <getgrgid@plt>
   163f4:	subs	r1, r0, #0
   163f8:	beq	16678 <__assert_fail@plt+0x54d0>
   163fc:	ldr	r0, [r1]
   16400:	bl	17784 <__assert_fail@plt+0x65dc>
   16404:	mov	r4, #0
   16408:	mov	fp, r4
   1640c:	mov	r7, r0
   16410:	bl	10ec0 <endgrent@plt>
   16414:	b	161c0 <__assert_fail@plt+0x5018>
   16418:	ldr	fp, [pc, #780]	; 1672c <__assert_fail@plt+0x5584>
   1641c:	b	1639c <__assert_fail@plt+0x51f4>
   16420:	ldr	r2, [pc, #768]	; 16728 <__assert_fail@plt+0x5580>
   16424:	add	r3, sp, #24
   16428:	str	r2, [sp]
   1642c:	mov	r1, #0
   16430:	mov	r2, #10
   16434:	mov	r0, r8
   16438:	bl	1782c <__assert_fail@plt+0x6684>
   1643c:	cmp	r0, #0
   16440:	bne	16664 <__assert_fail@plt+0x54bc>
   16444:	ldr	r3, [sp, #24]
   16448:	ldr	r7, [pc, #732]	; 1672c <__assert_fail@plt+0x5584>
   1644c:	cmn	r3, #1
   16450:	movne	fp, r3
   16454:	movne	r7, #0
   16458:	b	16334 <__assert_fail@plt+0x518c>
   1645c:	ldr	r3, [r1]
   16460:	mov	r5, #1
   16464:	str	r3, [sp, #12]
   16468:	mvn	r3, #0
   1646c:	str	r3, [sp, #16]
   16470:	b	1612c <__assert_fail@plt+0x4f84>
   16474:	ldrb	r3, [r8]
   16478:	cmp	r3, #0
   1647c:	moveq	r6, r4
   16480:	bne	16688 <__assert_fail@plt+0x54e0>
   16484:	mov	r7, r6
   16488:	ldr	r3, [sp, #8]
   1648c:	ldr	r2, [sp, #20]
   16490:	cmp	r3, #0
   16494:	ldr	r1, [sp, #12]
   16498:	str	r1, [r2]
   1649c:	ldrne	r2, [sp, #16]
   164a0:	strne	r2, [r3]
   164a4:	ldr	r3, [sp, #88]	; 0x58
   164a8:	cmp	sl, #0
   164ac:	strne	r6, [sl]
   164b0:	movne	r6, #0
   164b4:	cmp	r3, #0
   164b8:	strne	r7, [r3]
   164bc:	movne	r7, #0
   164c0:	mov	r0, r6
   164c4:	bl	12038 <__assert_fail@plt+0xe90>
   164c8:	mov	r0, r7
   164cc:	bl	12038 <__assert_fail@plt+0xe90>
   164d0:	ldr	r3, [sp, #8]
   164d4:	cmp	r3, #0
   164d8:	moveq	r4, #0
   164dc:	andne	r4, r5, #1
   164e0:	cmp	r4, #0
   164e4:	beq	16374 <__assert_fail@plt+0x51cc>
   164e8:	mov	r4, #0
   164ec:	mov	r0, r4
   164f0:	add	sp, sp, #52	; 0x34
   164f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164f8:	mov	r0, r8
   164fc:	add	r1, r5, #1
   16500:	bl	17714 <__assert_fail@plt+0x656c>
   16504:	ldrb	r8, [r9, #1]
   16508:	mov	r3, #0
   1650c:	cmp	r8, r3
   16510:	mov	r6, r0
   16514:	strb	r3, [r0, r5]
   16518:	bne	16574 <__assert_fail@plt+0x53cc>
   1651c:	ldrb	r3, [r0]
   16520:	cmp	r3, #43	; 0x2b
   16524:	beq	1669c <__assert_fail@plt+0x54f4>
   16528:	bl	10ee4 <getpwnam@plt>
   1652c:	cmp	r0, #0
   16530:	beq	16714 <__assert_fail@plt+0x556c>
   16534:	ldr	r3, [r0, #8]
   16538:	mov	r9, r8
   1653c:	str	r3, [sp, #12]
   16540:	ldr	fp, [r0, #12]
   16544:	mov	r0, fp
   16548:	bl	11190 <getgrgid@plt>
   1654c:	subs	r1, r0, #0
   16550:	beq	16704 <__assert_fail@plt+0x555c>
   16554:	ldr	r0, [r1]
   16558:	bl	17784 <__assert_fail@plt+0x65dc>
   1655c:	mov	r8, #0
   16560:	mov	r7, r8
   16564:	mov	r5, r0
   16568:	bl	10ec0 <endgrent@plt>
   1656c:	bl	11124 <endpwent@plt>
   16570:	b	16308 <__assert_fail@plt+0x5160>
   16574:	ldrb	r2, [r0]
   16578:	str	r3, [sp, #16]
   1657c:	add	r8, r9, #1
   16580:	cmp	r2, #43	; 0x2b
   16584:	bne	165e4 <__assert_fail@plt+0x543c>
   16588:	cmp	r8, #0
   1658c:	beq	16714 <__assert_fail@plt+0x556c>
   16590:	ldr	r2, [pc, #400]	; 16728 <__assert_fail@plt+0x5580>
   16594:	add	r3, sp, #24
   16598:	str	r2, [sp]
   1659c:	mov	r1, #0
   165a0:	mov	r2, #10
   165a4:	mov	r0, r6
   165a8:	bl	1782c <__assert_fail@plt+0x6684>
   165ac:	cmp	r0, #0
   165b0:	bne	166f8 <__assert_fail@plt+0x5550>
   165b4:	ldr	r3, [sp, #24]
   165b8:	ldr	r2, [pc, #372]	; 16734 <__assert_fail@plt+0x558c>
   165bc:	cmn	r3, #1
   165c0:	ldr	r1, [sp, #12]
   165c4:	movne	r9, r7
   165c8:	moveq	r9, #0
   165cc:	moveq	r7, r2
   165d0:	movne	r7, #0
   165d4:	movne	r1, r3
   165d8:	str	r1, [sp, #12]
   165dc:	mov	r5, #0
   165e0:	b	1656c <__assert_fail@plt+0x53c4>
   165e4:	bl	10ee4 <getpwnam@plt>
   165e8:	adds	r9, r8, #0
   165ec:	movne	r9, #1
   165f0:	ldr	r3, [sp, #16]
   165f4:	cmp	r0, #0
   165f8:	beq	16588 <__assert_fail@plt+0x53e0>
   165fc:	cmp	r8, #0
   16600:	ldr	r2, [r0, #8]
   16604:	movne	r5, r3
   16608:	str	r2, [sp, #12]
   1660c:	movne	r7, r5
   16610:	bne	1656c <__assert_fail@plt+0x53c4>
   16614:	b	16540 <__assert_fail@plt+0x5398>
   16618:	mov	r5, r3
   1661c:	mov	r6, r3
   16620:	ldr	r3, [sp, #20]
   16624:	ldr	r2, [sp, #12]
   16628:	cmp	sl, #0
   1662c:	str	r2, [r3]
   16630:	ldr	r3, [sp, #8]
   16634:	str	fp, [r3]
   16638:	ldr	r3, [sp, #88]	; 0x58
   1663c:	strne	r6, [sl]
   16640:	movne	r6, #0
   16644:	cmp	r3, #0
   16648:	strne	r5, [r3]
   1664c:	movne	r5, #0
   16650:	mov	r0, r6
   16654:	bl	12038 <__assert_fail@plt+0xe90>
   16658:	mov	r0, r5
   1665c:	bl	12038 <__assert_fail@plt+0xe90>
   16660:	b	164e8 <__assert_fail@plt+0x5340>
   16664:	ldr	r7, [pc, #192]	; 1672c <__assert_fail@plt+0x5584>
   16668:	b	16334 <__assert_fail@plt+0x518c>
   1666c:	cmp	r9, #0
   16670:	bne	161cc <__assert_fail@plt+0x5024>
   16674:	b	16484 <__assert_fail@plt+0x52dc>
   16678:	add	r2, sp, #24
   1667c:	ldr	r0, [sp, #16]
   16680:	bl	18f00 <__assert_fail@plt+0x7d58>
   16684:	b	16400 <__assert_fail@plt+0x5258>
   16688:	mov	r0, r8
   1668c:	bl	17784 <__assert_fail@plt+0x65dc>
   16690:	mov	r9, r4
   16694:	mov	r6, r0
   16698:	b	16178 <__assert_fail@plt+0x4fd0>
   1669c:	mov	r9, r8
   166a0:	ldr	r7, [pc, #136]	; 16730 <__assert_fail@plt+0x5588>
   166a4:	mov	r5, r8
   166a8:	b	1656c <__assert_fail@plt+0x53c4>
   166ac:	ldr	r2, [pc, #116]	; 16728 <__assert_fail@plt+0x5580>
   166b0:	add	r3, sp, #24
   166b4:	str	r2, [sp]
   166b8:	mov	r1, r4
   166bc:	mov	r2, #10
   166c0:	mov	r0, r6
   166c4:	bl	1782c <__assert_fail@plt+0x6684>
   166c8:	subs	fp, r0, #0
   166cc:	bne	166f0 <__assert_fail@plt+0x5548>
   166d0:	ldr	r3, [sp, #24]
   166d4:	cmn	r3, #1
   166d8:	beq	166f0 <__assert_fail@plt+0x5548>
   166dc:	adds	r4, r9, #0
   166e0:	movne	r4, #1
   166e4:	str	r3, [sp, #12]
   166e8:	mov	r7, #0
   166ec:	b	161c0 <__assert_fail@plt+0x5018>
   166f0:	ldr	fp, [pc, #60]	; 16734 <__assert_fail@plt+0x558c>
   166f4:	b	166e8 <__assert_fail@plt+0x5540>
   166f8:	ldr	r7, [pc, #52]	; 16734 <__assert_fail@plt+0x558c>
   166fc:	mov	r9, #0
   16700:	b	165dc <__assert_fail@plt+0x5434>
   16704:	add	r2, sp, #24
   16708:	mov	r0, fp
   1670c:	bl	18f00 <__assert_fail@plt+0x7d58>
   16710:	b	16558 <__assert_fail@plt+0x53b0>
   16714:	mov	r9, #0
   16718:	mov	r8, r9
   1671c:	mov	r5, r9
   16720:	ldr	r7, [pc, #8]	; 16730 <__assert_fail@plt+0x5588>
   16724:	b	1656c <__assert_fail@plt+0x53c4>
   16728:	andeq	r9, r1, r8, lsl #25
   1672c:	strdeq	sl, [r1], -r8
   16730:	andeq	sl, r1, r8, ror #1
   16734:	ldrdeq	sl, [r1], -r8
   16738:	push	{r4, r5, r6, lr}
   1673c:	sub	sp, sp, #32
   16740:	cmp	r1, #0
   16744:	mov	r4, r0
   16748:	ldr	r5, [sp, #48]	; 0x30
   1674c:	ldr	r6, [sp, #52]	; 0x34
   16750:	beq	16a68 <__assert_fail@plt+0x58c0>
   16754:	stm	sp, {r2, r3}
   16758:	mov	r3, r1
   1675c:	ldr	r2, [pc, #808]	; 16a8c <__assert_fail@plt+0x58e4>
   16760:	mov	r1, #1
   16764:	bl	110e8 <__fprintf_chk@plt>
   16768:	mov	r2, #5
   1676c:	ldr	r1, [pc, #796]	; 16a90 <__assert_fail@plt+0x58e8>
   16770:	mov	r0, #0
   16774:	bl	10f74 <dcgettext@plt>
   16778:	ldr	r3, [pc, #788]	; 16a94 <__assert_fail@plt+0x58ec>
   1677c:	ldr	r2, [pc, #788]	; 16a98 <__assert_fail@plt+0x58f0>
   16780:	str	r3, [sp]
   16784:	mov	r1, #1
   16788:	mov	r3, r0
   1678c:	mov	r0, r4
   16790:	bl	110e8 <__fprintf_chk@plt>
   16794:	mov	r1, r4
   16798:	mov	r0, #10
   1679c:	bl	10f68 <fputc_unlocked@plt>
   167a0:	mov	r2, #5
   167a4:	ldr	r1, [pc, #752]	; 16a9c <__assert_fail@plt+0x58f4>
   167a8:	mov	r0, #0
   167ac:	bl	10f74 <dcgettext@plt>
   167b0:	mov	r1, #1
   167b4:	ldr	r3, [pc, #740]	; 16aa0 <__assert_fail@plt+0x58f8>
   167b8:	mov	r2, r0
   167bc:	mov	r0, r4
   167c0:	bl	110e8 <__fprintf_chk@plt>
   167c4:	mov	r1, r4
   167c8:	mov	r0, #10
   167cc:	bl	10f68 <fputc_unlocked@plt>
   167d0:	cmp	r6, #9
   167d4:	ldrls	pc, [pc, r6, lsl #2]
   167d8:	b	16a80 <__assert_fail@plt+0x58d8>
   167dc:	andeq	r6, r1, r0, ror #16
   167e0:	andeq	r6, r1, r8, ror #16
   167e4:	muleq	r1, r4, r8
   167e8:	andeq	r6, r1, r8, asr #17
   167ec:	andeq	r6, r1, r4, lsl #18
   167f0:	andeq	r6, r1, r0, asr #18
   167f4:	andeq	r6, r1, ip, ror r9
   167f8:	andeq	r6, r1, r0, asr #19
   167fc:	andeq	r6, r1, r0, lsl sl
   16800:	andeq	r6, r1, r4, lsl #16
   16804:	ldr	r1, [pc, #664]	; 16aa4 <__assert_fail@plt+0x58fc>
   16808:	mov	r2, #5
   1680c:	mov	r0, #0
   16810:	bl	10f74 <dcgettext@plt>
   16814:	ldr	ip, [r5, #32]
   16818:	ldr	r1, [r5, #28]
   1681c:	ldr	r2, [r5, #24]
   16820:	ldr	r3, [r5]
   16824:	ldr	r6, [r5, #20]
   16828:	str	ip, [sp, #28]
   1682c:	ldr	lr, [r5, #16]
   16830:	str	r1, [sp, #24]
   16834:	ldr	ip, [r5, #12]
   16838:	str	r2, [sp, #20]
   1683c:	ldr	r1, [r5, #8]
   16840:	ldr	r2, [r5, #4]
   16844:	str	r6, [sp, #16]
   16848:	stmib	sp, {r1, ip, lr}
   1684c:	mov	r1, #1
   16850:	str	r2, [sp]
   16854:	mov	r2, r0
   16858:	mov	r0, r4
   1685c:	bl	110e8 <__fprintf_chk@plt>
   16860:	add	sp, sp, #32
   16864:	pop	{r4, r5, r6, pc}
   16868:	mov	r2, #5
   1686c:	ldr	r1, [pc, #564]	; 16aa8 <__assert_fail@plt+0x5900>
   16870:	mov	r0, #0
   16874:	bl	10f74 <dcgettext@plt>
   16878:	ldr	r3, [r5]
   1687c:	mov	r1, #1
   16880:	mov	r2, r0
   16884:	mov	r0, r4
   16888:	add	sp, sp, #32
   1688c:	pop	{r4, r5, r6, lr}
   16890:	b	110e8 <__fprintf_chk@plt>
   16894:	mov	r2, #5
   16898:	ldr	r1, [pc, #524]	; 16aac <__assert_fail@plt+0x5904>
   1689c:	mov	r0, #0
   168a0:	bl	10f74 <dcgettext@plt>
   168a4:	ldr	r2, [r5, #4]
   168a8:	ldr	r3, [r5]
   168ac:	mov	r1, #1
   168b0:	str	r2, [sp, #48]	; 0x30
   168b4:	mov	r2, r0
   168b8:	mov	r0, r4
   168bc:	add	sp, sp, #32
   168c0:	pop	{r4, r5, r6, lr}
   168c4:	b	110e8 <__fprintf_chk@plt>
   168c8:	mov	r2, #5
   168cc:	ldr	r1, [pc, #476]	; 16ab0 <__assert_fail@plt+0x5908>
   168d0:	mov	r0, #0
   168d4:	bl	10f74 <dcgettext@plt>
   168d8:	ldr	r1, [r5, #8]
   168dc:	ldr	r2, [r5, #4]
   168e0:	ldr	r3, [r5]
   168e4:	str	r1, [sp, #52]	; 0x34
   168e8:	str	r2, [sp, #48]	; 0x30
   168ec:	mov	r1, #1
   168f0:	mov	r2, r0
   168f4:	mov	r0, r4
   168f8:	add	sp, sp, #32
   168fc:	pop	{r4, r5, r6, lr}
   16900:	b	110e8 <__fprintf_chk@plt>
   16904:	mov	r2, #5
   16908:	ldr	r1, [pc, #420]	; 16ab4 <__assert_fail@plt+0x590c>
   1690c:	mov	r0, #0
   16910:	bl	10f74 <dcgettext@plt>
   16914:	ldr	r1, [r5, #8]
   16918:	ldr	ip, [r5, #12]
   1691c:	ldr	r2, [r5, #4]
   16920:	ldr	r3, [r5]
   16924:	stmib	sp, {r1, ip}
   16928:	str	r2, [sp]
   1692c:	mov	r1, #1
   16930:	mov	r2, r0
   16934:	mov	r0, r4
   16938:	bl	110e8 <__fprintf_chk@plt>
   1693c:	b	16860 <__assert_fail@plt+0x56b8>
   16940:	mov	r2, #5
   16944:	ldr	r1, [pc, #364]	; 16ab8 <__assert_fail@plt+0x5910>
   16948:	mov	r0, #0
   1694c:	bl	10f74 <dcgettext@plt>
   16950:	add	r1, r5, #8
   16954:	ldr	r2, [r5, #4]
   16958:	ldm	r1, {r1, ip, lr}
   1695c:	ldr	r3, [r5]
   16960:	str	r2, [sp]
   16964:	stmib	sp, {r1, ip, lr}
   16968:	mov	r1, #1
   1696c:	mov	r2, r0
   16970:	mov	r0, r4
   16974:	bl	110e8 <__fprintf_chk@plt>
   16978:	b	16860 <__assert_fail@plt+0x56b8>
   1697c:	mov	r2, #5
   16980:	ldr	r1, [pc, #308]	; 16abc <__assert_fail@plt+0x5914>
   16984:	mov	r0, #0
   16988:	bl	10f74 <dcgettext@plt>
   1698c:	add	r1, r5, #8
   16990:	ldr	r2, [r5, #4]
   16994:	ldm	r1, {r1, ip, lr}
   16998:	ldr	r6, [r5, #20]
   1699c:	ldr	r3, [r5]
   169a0:	stmib	sp, {r1, ip, lr}
   169a4:	mov	r1, #1
   169a8:	str	r2, [sp]
   169ac:	str	r6, [sp, #16]
   169b0:	mov	r2, r0
   169b4:	mov	r0, r4
   169b8:	bl	110e8 <__fprintf_chk@plt>
   169bc:	b	16860 <__assert_fail@plt+0x56b8>
   169c0:	mov	r2, #5
   169c4:	ldr	r1, [pc, #244]	; 16ac0 <__assert_fail@plt+0x5918>
   169c8:	mov	r0, #0
   169cc:	bl	10f74 <dcgettext@plt>
   169d0:	ldr	r2, [r5, #24]
   169d4:	ldr	r3, [r5]
   169d8:	ldr	r6, [r5, #20]
   169dc:	ldr	lr, [r5, #16]
   169e0:	ldr	ip, [r5, #12]
   169e4:	str	r2, [sp, #20]
   169e8:	ldr	r1, [r5, #8]
   169ec:	ldr	r2, [r5, #4]
   169f0:	str	r6, [sp, #16]
   169f4:	stmib	sp, {r1, ip, lr}
   169f8:	mov	r1, #1
   169fc:	str	r2, [sp]
   16a00:	mov	r2, r0
   16a04:	mov	r0, r4
   16a08:	bl	110e8 <__fprintf_chk@plt>
   16a0c:	b	16860 <__assert_fail@plt+0x56b8>
   16a10:	mov	r2, #5
   16a14:	ldr	r1, [pc, #168]	; 16ac4 <__assert_fail@plt+0x591c>
   16a18:	mov	r0, #0
   16a1c:	bl	10f74 <dcgettext@plt>
   16a20:	ldr	r1, [r5, #28]
   16a24:	ldr	r2, [r5, #24]
   16a28:	ldr	r3, [r5]
   16a2c:	ldr	r6, [r5, #20]
   16a30:	ldr	lr, [r5, #16]
   16a34:	str	r1, [sp, #24]
   16a38:	ldr	ip, [r5, #12]
   16a3c:	str	r2, [sp, #20]
   16a40:	ldr	r1, [r5, #8]
   16a44:	ldr	r2, [r5, #4]
   16a48:	str	r6, [sp, #16]
   16a4c:	stmib	sp, {r1, ip, lr}
   16a50:	mov	r1, #1
   16a54:	str	r2, [sp]
   16a58:	mov	r2, r0
   16a5c:	mov	r0, r4
   16a60:	bl	110e8 <__fprintf_chk@plt>
   16a64:	b	16860 <__assert_fail@plt+0x56b8>
   16a68:	str	r3, [sp]
   16a6c:	mov	r1, #1
   16a70:	mov	r3, r2
   16a74:	ldr	r2, [pc, #76]	; 16ac8 <__assert_fail@plt+0x5920>
   16a78:	bl	110e8 <__fprintf_chk@plt>
   16a7c:	b	16768 <__assert_fail@plt+0x55c0>
   16a80:	mov	r2, #5
   16a84:	ldr	r1, [pc, #64]	; 16acc <__assert_fail@plt+0x5924>
   16a88:	b	1680c <__assert_fail@plt+0x5664>
   16a8c:	andeq	sl, r1, r8, lsl #2
   16a90:	andeq	sl, r1, ip, lsl r1
   16a94:	andeq	r0, r0, r6, ror #15
   16a98:	strdeq	sl, [r1], -r4
   16a9c:	andeq	sl, r1, r0, lsr #2
   16aa0:	andeq	sl, r1, ip, asr #3
   16aa4:	strdeq	sl, [r1], -ip
   16aa8:	strdeq	sl, [r1], -r0
   16aac:	andeq	sl, r1, r0, lsl #4
   16ab0:	andeq	sl, r1, r8, lsl r2
   16ab4:	andeq	sl, r1, r4, lsr r2
   16ab8:	andeq	sl, r1, r4, asr r2
   16abc:	andeq	sl, r1, r8, ror r2
   16ac0:	andeq	sl, r1, r0, lsr #5
   16ac4:	andeq	sl, r1, ip, asr #5
   16ac8:	andeq	sl, r1, r4, lsl r1
   16acc:	andeq	sl, r1, r0, lsr r3
   16ad0:	push	{r4, r5, lr}
   16ad4:	sub	sp, sp, #12
   16ad8:	ldr	r5, [sp, #24]
   16adc:	ldr	ip, [r5]
   16ae0:	cmp	ip, #0
   16ae4:	beq	16b00 <__assert_fail@plt+0x5958>
   16ae8:	mov	lr, r5
   16aec:	mov	ip, #0
   16af0:	ldr	r4, [lr, #4]!
   16af4:	add	ip, ip, #1
   16af8:	cmp	r4, #0
   16afc:	bne	16af0 <__assert_fail@plt+0x5948>
   16b00:	stm	sp, {r5, ip}
   16b04:	bl	16738 <__assert_fail@plt+0x5590>
   16b08:	add	sp, sp, #12
   16b0c:	pop	{r4, r5, pc}
   16b10:	push	{r4, r5, lr}
   16b14:	sub	sp, sp, #76	; 0x4c
   16b18:	mov	r5, r0
   16b1c:	ldr	ip, [sp, #88]	; 0x58
   16b20:	ldr	r0, [ip]
   16b24:	cmp	r0, #0
   16b28:	str	r0, [sp, #32]
   16b2c:	beq	16f00 <__assert_fail@plt+0x5d58>
   16b30:	ldr	r0, [ip, #4]
   16b34:	cmp	r0, #0
   16b38:	str	r0, [sp, #36]	; 0x24
   16b3c:	beq	16f08 <__assert_fail@plt+0x5d60>
   16b40:	ldr	r0, [ip, #8]
   16b44:	cmp	r0, #0
   16b48:	str	r0, [sp, #40]	; 0x28
   16b4c:	beq	16f10 <__assert_fail@plt+0x5d68>
   16b50:	ldr	r0, [ip, #12]
   16b54:	cmp	r0, #0
   16b58:	str	r0, [sp, #44]	; 0x2c
   16b5c:	beq	16f18 <__assert_fail@plt+0x5d70>
   16b60:	ldr	r0, [ip, #16]
   16b64:	cmp	r0, #0
   16b68:	str	r0, [sp, #48]	; 0x30
   16b6c:	beq	16f20 <__assert_fail@plt+0x5d78>
   16b70:	ldr	r0, [ip, #20]
   16b74:	cmp	r0, #0
   16b78:	str	r0, [sp, #52]	; 0x34
   16b7c:	beq	16f28 <__assert_fail@plt+0x5d80>
   16b80:	ldr	r0, [ip, #24]
   16b84:	cmp	r0, #0
   16b88:	str	r0, [sp, #56]	; 0x38
   16b8c:	beq	16f30 <__assert_fail@plt+0x5d88>
   16b90:	ldr	r0, [ip, #28]
   16b94:	cmp	r0, #0
   16b98:	str	r0, [sp, #60]	; 0x3c
   16b9c:	beq	16f38 <__assert_fail@plt+0x5d90>
   16ba0:	ldr	r0, [ip, #32]
   16ba4:	cmp	r0, #0
   16ba8:	str	r0, [sp, #64]	; 0x40
   16bac:	beq	16f40 <__assert_fail@plt+0x5d98>
   16bb0:	ldr	r0, [ip, #36]	; 0x24
   16bb4:	cmp	r0, #0
   16bb8:	movne	r4, #10
   16bbc:	moveq	r4, #9
   16bc0:	cmp	r1, #0
   16bc4:	beq	16ed8 <__assert_fail@plt+0x5d30>
   16bc8:	stm	sp, {r2, r3}
   16bcc:	mov	r0, r5
   16bd0:	mov	r3, r1
   16bd4:	ldr	r2, [pc, #876]	; 16f48 <__assert_fail@plt+0x5da0>
   16bd8:	mov	r1, #1
   16bdc:	bl	110e8 <__fprintf_chk@plt>
   16be0:	mov	r2, #5
   16be4:	ldr	r1, [pc, #864]	; 16f4c <__assert_fail@plt+0x5da4>
   16be8:	mov	r0, #0
   16bec:	bl	10f74 <dcgettext@plt>
   16bf0:	ldr	r3, [pc, #856]	; 16f50 <__assert_fail@plt+0x5da8>
   16bf4:	ldr	r2, [pc, #856]	; 16f54 <__assert_fail@plt+0x5dac>
   16bf8:	str	r3, [sp]
   16bfc:	mov	r1, #1
   16c00:	mov	r3, r0
   16c04:	mov	r0, r5
   16c08:	bl	110e8 <__fprintf_chk@plt>
   16c0c:	mov	r1, r5
   16c10:	mov	r0, #10
   16c14:	bl	10f68 <fputc_unlocked@plt>
   16c18:	mov	r2, #5
   16c1c:	ldr	r1, [pc, #820]	; 16f58 <__assert_fail@plt+0x5db0>
   16c20:	mov	r0, #0
   16c24:	bl	10f74 <dcgettext@plt>
   16c28:	mov	r1, #1
   16c2c:	ldr	r3, [pc, #808]	; 16f5c <__assert_fail@plt+0x5db4>
   16c30:	mov	r2, r0
   16c34:	mov	r0, r5
   16c38:	bl	110e8 <__fprintf_chk@plt>
   16c3c:	mov	r1, r5
   16c40:	mov	r0, #10
   16c44:	bl	10f68 <fputc_unlocked@plt>
   16c48:	cmp	r4, #9
   16c4c:	ldrls	pc, [pc, r4, lsl #2]
   16c50:	b	16ef4 <__assert_fail@plt+0x5d4c>
   16c54:	ldrdeq	r6, [r1], -r8
   16c58:	andeq	r6, r1, r0, ror #25
   16c5c:	andeq	r6, r1, ip, lsl #26
   16c60:	andeq	r6, r1, r0, asr #26
   16c64:	andeq	r6, r1, r8, ror sp
   16c68:			; <UNDEFINED> instruction: 0x00016db4
   16c6c:	strdeq	r6, [r1], -r0
   16c70:	andeq	r6, r1, r4, lsr lr
   16c74:	andeq	r6, r1, r0, lsl #29
   16c78:	andeq	r6, r1, ip, ror ip
   16c7c:	ldr	r1, [pc, #732]	; 16f60 <__assert_fail@plt+0x5db8>
   16c80:	mov	r2, #5
   16c84:	mov	r0, #0
   16c88:	bl	10f74 <dcgettext@plt>
   16c8c:	ldr	ip, [sp, #64]	; 0x40
   16c90:	ldr	r1, [sp, #60]	; 0x3c
   16c94:	ldr	r2, [sp, #56]	; 0x38
   16c98:	ldr	lr, [sp, #48]	; 0x30
   16c9c:	str	ip, [sp, #28]
   16ca0:	str	r1, [sp, #24]
   16ca4:	ldr	ip, [sp, #44]	; 0x2c
   16ca8:	ldr	r1, [sp, #40]	; 0x28
   16cac:	ldr	r4, [sp, #52]	; 0x34
   16cb0:	str	r2, [sp, #20]
   16cb4:	ldr	r2, [sp, #36]	; 0x24
   16cb8:	stmib	sp, {r1, ip, lr}
   16cbc:	mov	r1, #1
   16cc0:	str	r2, [sp]
   16cc4:	ldr	r3, [sp, #32]
   16cc8:	str	r4, [sp, #16]
   16ccc:	mov	r2, r0
   16cd0:	mov	r0, r5
   16cd4:	bl	110e8 <__fprintf_chk@plt>
   16cd8:	add	sp, sp, #76	; 0x4c
   16cdc:	pop	{r4, r5, pc}
   16ce0:	mov	r2, #5
   16ce4:	ldr	r1, [pc, #632]	; 16f64 <__assert_fail@plt+0x5dbc>
   16ce8:	mov	r0, #0
   16cec:	bl	10f74 <dcgettext@plt>
   16cf0:	ldr	r3, [sp, #32]
   16cf4:	mov	r1, #1
   16cf8:	mov	r2, r0
   16cfc:	mov	r0, r5
   16d00:	add	sp, sp, #76	; 0x4c
   16d04:	pop	{r4, r5, lr}
   16d08:	b	110e8 <__fprintf_chk@plt>
   16d0c:	mov	r2, #5
   16d10:	ldr	r1, [pc, #592]	; 16f68 <__assert_fail@plt+0x5dc0>
   16d14:	mov	r0, #0
   16d18:	bl	10f74 <dcgettext@plt>
   16d1c:	ldr	r2, [sp, #36]	; 0x24
   16d20:	ldr	r3, [sp, #32]
   16d24:	str	r2, [sp, #88]	; 0x58
   16d28:	mov	r1, #1
   16d2c:	mov	r2, r0
   16d30:	mov	r0, r5
   16d34:	add	sp, sp, #76	; 0x4c
   16d38:	pop	{r4, r5, lr}
   16d3c:	b	110e8 <__fprintf_chk@plt>
   16d40:	mov	r2, #5
   16d44:	ldr	r1, [pc, #544]	; 16f6c <__assert_fail@plt+0x5dc4>
   16d48:	mov	r0, #0
   16d4c:	bl	10f74 <dcgettext@plt>
   16d50:	ldr	r1, [sp, #40]	; 0x28
   16d54:	ldr	r2, [sp, #36]	; 0x24
   16d58:	str	r1, [sp, #4]
   16d5c:	str	r2, [sp]
   16d60:	ldr	r3, [sp, #32]
   16d64:	mov	r1, #1
   16d68:	mov	r2, r0
   16d6c:	mov	r0, r5
   16d70:	bl	110e8 <__fprintf_chk@plt>
   16d74:	b	16cd8 <__assert_fail@plt+0x5b30>
   16d78:	mov	r2, #5
   16d7c:	ldr	r1, [pc, #492]	; 16f70 <__assert_fail@plt+0x5dc8>
   16d80:	mov	r0, #0
   16d84:	bl	10f74 <dcgettext@plt>
   16d88:	ldr	r1, [sp, #40]	; 0x28
   16d8c:	ldr	ip, [sp, #44]	; 0x2c
   16d90:	ldr	r2, [sp, #36]	; 0x24
   16d94:	ldr	r3, [sp, #32]
   16d98:	stmib	sp, {r1, ip}
   16d9c:	str	r2, [sp]
   16da0:	mov	r1, #1
   16da4:	mov	r2, r0
   16da8:	mov	r0, r5
   16dac:	bl	110e8 <__fprintf_chk@plt>
   16db0:	b	16cd8 <__assert_fail@plt+0x5b30>
   16db4:	mov	r2, #5
   16db8:	ldr	r1, [pc, #436]	; 16f74 <__assert_fail@plt+0x5dcc>
   16dbc:	mov	r0, #0
   16dc0:	bl	10f74 <dcgettext@plt>
   16dc4:	add	r1, sp, #40	; 0x28
   16dc8:	ldr	r2, [sp, #36]	; 0x24
   16dcc:	ldm	r1, {r1, ip, lr}
   16dd0:	ldr	r3, [sp, #32]
   16dd4:	str	r2, [sp]
   16dd8:	stmib	sp, {r1, ip, lr}
   16ddc:	mov	r1, #1
   16de0:	mov	r2, r0
   16de4:	mov	r0, r5
   16de8:	bl	110e8 <__fprintf_chk@plt>
   16dec:	b	16cd8 <__assert_fail@plt+0x5b30>
   16df0:	mov	r2, #5
   16df4:	ldr	r1, [pc, #380]	; 16f78 <__assert_fail@plt+0x5dd0>
   16df8:	mov	r0, #0
   16dfc:	bl	10f74 <dcgettext@plt>
   16e00:	add	r1, sp, #40	; 0x28
   16e04:	ldr	r2, [sp, #36]	; 0x24
   16e08:	ldm	r1, {r1, ip, lr}
   16e0c:	ldr	r4, [sp, #52]	; 0x34
   16e10:	str	r2, [sp]
   16e14:	stmib	sp, {r1, ip, lr}
   16e18:	mov	r1, #1
   16e1c:	ldr	r3, [sp, #32]
   16e20:	str	r4, [sp, #16]
   16e24:	mov	r2, r0
   16e28:	mov	r0, r5
   16e2c:	bl	110e8 <__fprintf_chk@plt>
   16e30:	b	16cd8 <__assert_fail@plt+0x5b30>
   16e34:	mov	r2, #5
   16e38:	ldr	r1, [pc, #316]	; 16f7c <__assert_fail@plt+0x5dd4>
   16e3c:	mov	r0, #0
   16e40:	bl	10f74 <dcgettext@plt>
   16e44:	add	r1, sp, #40	; 0x28
   16e48:	ldr	r2, [sp, #56]	; 0x38
   16e4c:	ldm	r1, {r1, ip, lr}
   16e50:	ldr	r4, [sp, #52]	; 0x34
   16e54:	str	r2, [sp, #20]
   16e58:	ldr	r2, [sp, #36]	; 0x24
   16e5c:	stmib	sp, {r1, ip, lr}
   16e60:	mov	r1, #1
   16e64:	str	r2, [sp]
   16e68:	ldr	r3, [sp, #32]
   16e6c:	str	r4, [sp, #16]
   16e70:	mov	r2, r0
   16e74:	mov	r0, r5
   16e78:	bl	110e8 <__fprintf_chk@plt>
   16e7c:	b	16cd8 <__assert_fail@plt+0x5b30>
   16e80:	mov	r2, #5
   16e84:	ldr	r1, [pc, #244]	; 16f80 <__assert_fail@plt+0x5dd8>
   16e88:	mov	r0, #0
   16e8c:	bl	10f74 <dcgettext@plt>
   16e90:	ldr	r1, [sp, #60]	; 0x3c
   16e94:	ldr	r2, [sp, #56]	; 0x38
   16e98:	ldr	lr, [sp, #48]	; 0x30
   16e9c:	ldr	ip, [sp, #44]	; 0x2c
   16ea0:	str	r1, [sp, #24]
   16ea4:	ldr	r1, [sp, #40]	; 0x28
   16ea8:	ldr	r4, [sp, #52]	; 0x34
   16eac:	str	r2, [sp, #20]
   16eb0:	ldr	r2, [sp, #36]	; 0x24
   16eb4:	stmib	sp, {r1, ip, lr}
   16eb8:	mov	r1, #1
   16ebc:	str	r2, [sp]
   16ec0:	ldr	r3, [sp, #32]
   16ec4:	str	r4, [sp, #16]
   16ec8:	mov	r2, r0
   16ecc:	mov	r0, r5
   16ed0:	bl	110e8 <__fprintf_chk@plt>
   16ed4:	b	16cd8 <__assert_fail@plt+0x5b30>
   16ed8:	str	r3, [sp]
   16edc:	mov	r1, #1
   16ee0:	mov	r3, r2
   16ee4:	mov	r0, r5
   16ee8:	ldr	r2, [pc, #148]	; 16f84 <__assert_fail@plt+0x5ddc>
   16eec:	bl	110e8 <__fprintf_chk@plt>
   16ef0:	b	16be0 <__assert_fail@plt+0x5a38>
   16ef4:	mov	r2, #5
   16ef8:	ldr	r1, [pc, #136]	; 16f88 <__assert_fail@plt+0x5de0>
   16efc:	b	16c84 <__assert_fail@plt+0x5adc>
   16f00:	mov	r4, r0
   16f04:	b	16bc0 <__assert_fail@plt+0x5a18>
   16f08:	mov	r4, #1
   16f0c:	b	16bc0 <__assert_fail@plt+0x5a18>
   16f10:	mov	r4, #2
   16f14:	b	16bc0 <__assert_fail@plt+0x5a18>
   16f18:	mov	r4, #3
   16f1c:	b	16bc0 <__assert_fail@plt+0x5a18>
   16f20:	mov	r4, #4
   16f24:	b	16bc0 <__assert_fail@plt+0x5a18>
   16f28:	mov	r4, #5
   16f2c:	b	16bc0 <__assert_fail@plt+0x5a18>
   16f30:	mov	r4, #6
   16f34:	b	16bc0 <__assert_fail@plt+0x5a18>
   16f38:	mov	r4, #7
   16f3c:	b	16bc0 <__assert_fail@plt+0x5a18>
   16f40:	mov	r4, #8
   16f44:	b	16bc0 <__assert_fail@plt+0x5a18>
   16f48:	andeq	sl, r1, r8, lsl #2
   16f4c:	andeq	sl, r1, ip, lsl r1
   16f50:	andeq	r0, r0, r6, ror #15
   16f54:	strdeq	sl, [r1], -r4
   16f58:	andeq	sl, r1, r0, lsr #2
   16f5c:	andeq	sl, r1, ip, asr #3
   16f60:	strdeq	sl, [r1], -ip
   16f64:	strdeq	sl, [r1], -r0
   16f68:	andeq	sl, r1, r0, lsl #4
   16f6c:	andeq	sl, r1, r8, lsl r2
   16f70:	andeq	sl, r1, r4, lsr r2
   16f74:	andeq	sl, r1, r4, asr r2
   16f78:	andeq	sl, r1, r8, ror r2
   16f7c:	andeq	sl, r1, r0, lsr #5
   16f80:	andeq	sl, r1, ip, asr #5
   16f84:	andeq	sl, r1, r4, lsl r1
   16f88:	andeq	sl, r1, r0, lsr r3
   16f8c:	push	{r3}		; (str r3, [sp, #-4]!)
   16f90:	push	{lr}		; (str lr, [sp, #-4]!)
   16f94:	sub	sp, sp, #56	; 0x38
   16f98:	add	r3, sp, #64	; 0x40
   16f9c:	ldr	ip, [sp, #64]	; 0x40
   16fa0:	str	r3, [sp, #12]
   16fa4:	cmp	ip, #0
   16fa8:	str	ip, [sp, #16]
   16fac:	beq	17044 <__assert_fail@plt+0x5e9c>
   16fb0:	ldr	ip, [sp, #68]	; 0x44
   16fb4:	cmp	ip, #0
   16fb8:	str	ip, [sp, #20]
   16fbc:	beq	17064 <__assert_fail@plt+0x5ebc>
   16fc0:	ldr	ip, [sp, #72]	; 0x48
   16fc4:	cmp	ip, #0
   16fc8:	str	ip, [sp, #24]
   16fcc:	beq	1706c <__assert_fail@plt+0x5ec4>
   16fd0:	ldr	ip, [sp, #76]	; 0x4c
   16fd4:	cmp	ip, #0
   16fd8:	str	ip, [sp, #28]
   16fdc:	beq	17074 <__assert_fail@plt+0x5ecc>
   16fe0:	ldr	ip, [sp, #80]	; 0x50
   16fe4:	cmp	ip, #0
   16fe8:	str	ip, [sp, #32]
   16fec:	beq	1707c <__assert_fail@plt+0x5ed4>
   16ff0:	ldr	ip, [sp, #84]	; 0x54
   16ff4:	cmp	ip, #0
   16ff8:	str	ip, [sp, #36]	; 0x24
   16ffc:	beq	17084 <__assert_fail@plt+0x5edc>
   17000:	ldr	ip, [sp, #88]	; 0x58
   17004:	cmp	ip, #0
   17008:	str	ip, [sp, #40]	; 0x28
   1700c:	beq	1708c <__assert_fail@plt+0x5ee4>
   17010:	ldr	ip, [sp, #92]	; 0x5c
   17014:	cmp	ip, #0
   17018:	str	ip, [sp, #44]	; 0x2c
   1701c:	beq	17094 <__assert_fail@plt+0x5eec>
   17020:	ldr	ip, [sp, #96]	; 0x60
   17024:	cmp	ip, #0
   17028:	str	ip, [sp, #48]	; 0x30
   1702c:	beq	1709c <__assert_fail@plt+0x5ef4>
   17030:	ldr	ip, [sp, #100]	; 0x64
   17034:	cmp	ip, #0
   17038:	str	ip, [sp, #52]	; 0x34
   1703c:	movne	ip, #10
   17040:	moveq	ip, #9
   17044:	add	r3, sp, #16
   17048:	stm	sp, {r3, ip}
   1704c:	ldr	r3, [sp, #60]	; 0x3c
   17050:	bl	16738 <__assert_fail@plt+0x5590>
   17054:	add	sp, sp, #56	; 0x38
   17058:	pop	{lr}		; (ldr lr, [sp], #4)
   1705c:	add	sp, sp, #4
   17060:	bx	lr
   17064:	mov	ip, #1
   17068:	b	17044 <__assert_fail@plt+0x5e9c>
   1706c:	mov	ip, #2
   17070:	b	17044 <__assert_fail@plt+0x5e9c>
   17074:	mov	ip, #3
   17078:	b	17044 <__assert_fail@plt+0x5e9c>
   1707c:	mov	ip, #4
   17080:	b	17044 <__assert_fail@plt+0x5e9c>
   17084:	mov	ip, #5
   17088:	b	17044 <__assert_fail@plt+0x5e9c>
   1708c:	mov	ip, #6
   17090:	b	17044 <__assert_fail@plt+0x5e9c>
   17094:	mov	ip, #7
   17098:	b	17044 <__assert_fail@plt+0x5e9c>
   1709c:	mov	ip, #8
   170a0:	b	17044 <__assert_fail@plt+0x5e9c>
   170a4:	ldr	r3, [pc, #116]	; 17120 <__assert_fail@plt+0x5f78>
   170a8:	push	{r4, lr}
   170ac:	mov	r0, #10
   170b0:	ldr	r1, [r3]
   170b4:	bl	10f68 <fputc_unlocked@plt>
   170b8:	mov	r2, #5
   170bc:	ldr	r1, [pc, #96]	; 17124 <__assert_fail@plt+0x5f7c>
   170c0:	mov	r0, #0
   170c4:	bl	10f74 <dcgettext@plt>
   170c8:	ldr	r2, [pc, #88]	; 17128 <__assert_fail@plt+0x5f80>
   170cc:	mov	r1, r0
   170d0:	mov	r0, #1
   170d4:	bl	110d0 <__printf_chk@plt>
   170d8:	mov	r2, #5
   170dc:	ldr	r1, [pc, #72]	; 1712c <__assert_fail@plt+0x5f84>
   170e0:	mov	r0, #0
   170e4:	bl	10f74 <dcgettext@plt>
   170e8:	ldr	r3, [pc, #64]	; 17130 <__assert_fail@plt+0x5f88>
   170ec:	ldr	r2, [pc, #64]	; 17134 <__assert_fail@plt+0x5f8c>
   170f0:	mov	r1, r0
   170f4:	mov	r0, #1
   170f8:	bl	110d0 <__printf_chk@plt>
   170fc:	mov	r2, #5
   17100:	ldr	r1, [pc, #48]	; 17138 <__assert_fail@plt+0x5f90>
   17104:	mov	r0, #0
   17108:	bl	10f74 <dcgettext@plt>
   1710c:	ldr	r2, [pc, #40]	; 1713c <__assert_fail@plt+0x5f94>
   17110:	pop	{r4, lr}
   17114:	mov	r1, r0
   17118:	mov	r0, #1
   1711c:	b	110d0 <__printf_chk@plt>
   17120:	andeq	fp, r2, r4, ror r1
   17124:	andeq	sl, r1, ip, ror #6
   17128:	andeq	sl, r1, r0, lsl #7
   1712c:	muleq	r1, r8, r3
   17130:	andeq	r9, r1, r4, lsr #25
   17134:	andeq	r9, r1, ip, asr #25
   17138:	andeq	sl, r1, ip, lsr #7
   1713c:	ldrdeq	sl, [r1], -r4
   17140:	push	{r4, r5, r6, lr}
   17144:	mov	r6, r0
   17148:	mov	r5, r1
   1714c:	mov	r4, r2
   17150:	bl	19208 <__assert_fail@plt+0x8060>
   17154:	cmp	r0, #0
   17158:	popne	{r4, r5, r6, pc}
   1715c:	cmp	r6, #0
   17160:	beq	17170 <__assert_fail@plt+0x5fc8>
   17164:	cmp	r5, #0
   17168:	cmpne	r4, #0
   1716c:	popeq	{r4, r5, r6, pc}
   17170:	bl	177bc <__assert_fail@plt+0x6614>
   17174:	push	{r4, lr}
   17178:	bl	18c5c <__assert_fail@plt+0x7ab4>
   1717c:	cmp	r0, #0
   17180:	popne	{r4, pc}
   17184:	bl	177bc <__assert_fail@plt+0x6614>
   17188:	push	{r4, lr}
   1718c:	bl	18c5c <__assert_fail@plt+0x7ab4>
   17190:	cmp	r0, #0
   17194:	popne	{r4, pc}
   17198:	bl	177bc <__assert_fail@plt+0x6614>
   1719c:	push	{r4, lr}
   171a0:	bl	18c5c <__assert_fail@plt+0x7ab4>
   171a4:	cmp	r0, #0
   171a8:	popne	{r4, pc}
   171ac:	bl	177bc <__assert_fail@plt+0x6614>
   171b0:	push	{r4, r5, r6, lr}
   171b4:	mov	r5, r0
   171b8:	mov	r4, r1
   171bc:	bl	18c88 <__assert_fail@plt+0x7ae0>
   171c0:	cmp	r0, #0
   171c4:	popne	{r4, r5, r6, pc}
   171c8:	adds	r4, r4, #0
   171cc:	movne	r4, #1
   171d0:	cmp	r5, #0
   171d4:	orreq	r4, r4, #1
   171d8:	cmp	r4, #0
   171dc:	popeq	{r4, r5, r6, pc}
   171e0:	bl	177bc <__assert_fail@plt+0x6614>
   171e4:	push	{r4, lr}
   171e8:	cmp	r1, #0
   171ec:	orreq	r1, r1, #1
   171f0:	bl	18c88 <__assert_fail@plt+0x7ae0>
   171f4:	cmp	r0, #0
   171f8:	popne	{r4, pc}
   171fc:	bl	177bc <__assert_fail@plt+0x6614>
   17200:	push	{r4, r5, r6, lr}
   17204:	mov	r6, r0
   17208:	mov	r5, r1
   1720c:	mov	r4, r2
   17210:	bl	19208 <__assert_fail@plt+0x8060>
   17214:	cmp	r0, #0
   17218:	popne	{r4, r5, r6, pc}
   1721c:	cmp	r6, #0
   17220:	beq	17230 <__assert_fail@plt+0x6088>
   17224:	cmp	r5, #0
   17228:	cmpne	r4, #0
   1722c:	popeq	{r4, r5, r6, pc}
   17230:	bl	177bc <__assert_fail@plt+0x6614>
   17234:	cmp	r2, #0
   17238:	cmpne	r1, #0
   1723c:	moveq	r2, #1
   17240:	moveq	r1, r2
   17244:	push	{r4, lr}
   17248:	bl	19208 <__assert_fail@plt+0x8060>
   1724c:	cmp	r0, #0
   17250:	popne	{r4, pc}
   17254:	bl	177bc <__assert_fail@plt+0x6614>
   17258:	push	{r4, lr}
   1725c:	mov	r2, r1
   17260:	mov	r1, r0
   17264:	mov	r0, #0
   17268:	bl	19208 <__assert_fail@plt+0x8060>
   1726c:	cmp	r0, #0
   17270:	popne	{r4, pc}
   17274:	bl	177bc <__assert_fail@plt+0x6614>
   17278:	cmp	r1, #0
   1727c:	cmpne	r0, #0
   17280:	moveq	r2, #1
   17284:	movne	r2, r1
   17288:	moveq	r1, r2
   1728c:	movne	r1, r0
   17290:	push	{r4, lr}
   17294:	mov	r0, #0
   17298:	bl	19208 <__assert_fail@plt+0x8060>
   1729c:	cmp	r0, #0
   172a0:	popne	{r4, pc}
   172a4:	bl	177bc <__assert_fail@plt+0x6614>
   172a8:	cmp	r0, #0
   172ac:	push	{r4, r5, r6, lr}
   172b0:	mov	r5, r1
   172b4:	ldr	r4, [r1]
   172b8:	beq	172f4 <__assert_fail@plt+0x614c>
   172bc:	lsr	r2, r4, #1
   172c0:	add	r3, r2, #1
   172c4:	mvn	r3, r3
   172c8:	cmp	r4, r3
   172cc:	bhi	17310 <__assert_fail@plt+0x6168>
   172d0:	add	r4, r4, #1
   172d4:	add	r4, r4, r2
   172d8:	mov	r1, r4
   172dc:	mov	r2, #1
   172e0:	bl	19208 <__assert_fail@plt+0x8060>
   172e4:	cmp	r0, #0
   172e8:	beq	17314 <__assert_fail@plt+0x616c>
   172ec:	str	r4, [r5]
   172f0:	pop	{r4, r5, r6, pc}
   172f4:	cmp	r4, #0
   172f8:	moveq	r4, #64	; 0x40
   172fc:	mov	r1, r4
   17300:	mov	r2, #1
   17304:	bl	19208 <__assert_fail@plt+0x8060>
   17308:	cmp	r0, #0
   1730c:	bne	172ec <__assert_fail@plt+0x6144>
   17310:	bl	177bc <__assert_fail@plt+0x6614>
   17314:	cmp	r4, #0
   17318:	bne	17310 <__assert_fail@plt+0x6168>
   1731c:	str	r4, [r5]
   17320:	pop	{r4, r5, r6, pc}
   17324:	cmp	r0, #0
   17328:	push	{r4, r5, r6, lr}
   1732c:	mov	r5, r1
   17330:	ldr	r4, [r1]
   17334:	mov	r6, r2
   17338:	beq	1737c <__assert_fail@plt+0x61d4>
   1733c:	lsr	r1, r4, #1
   17340:	add	r3, r1, #1
   17344:	mvn	r3, r3
   17348:	cmp	r4, r3
   1734c:	bhi	173b4 <__assert_fail@plt+0x620c>
   17350:	add	r4, r4, #1
   17354:	add	r4, r4, r1
   17358:	mov	r1, r4
   1735c:	bl	19208 <__assert_fail@plt+0x8060>
   17360:	cmp	r0, #0
   17364:	bne	17374 <__assert_fail@plt+0x61cc>
   17368:	cmp	r4, #0
   1736c:	cmpne	r6, #0
   17370:	bne	173b4 <__assert_fail@plt+0x620c>
   17374:	str	r4, [r5]
   17378:	pop	{r4, r5, r6, pc}
   1737c:	cmp	r4, #0
   17380:	bne	1739c <__assert_fail@plt+0x61f4>
   17384:	mov	r1, r2
   17388:	mov	r0, #64	; 0x40
   1738c:	bl	19348 <__assert_fail@plt+0x81a0>
   17390:	cmp	r0, #0
   17394:	movne	r4, r0
   17398:	addeq	r4, r0, #1
   1739c:	mov	r2, r6
   173a0:	mov	r1, r4
   173a4:	mov	r0, #0
   173a8:	bl	19208 <__assert_fail@plt+0x8060>
   173ac:	cmp	r0, #0
   173b0:	bne	17374 <__assert_fail@plt+0x61cc>
   173b4:	bl	177bc <__assert_fail@plt+0x6614>
   173b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173bc:	sub	sp, sp, #12
   173c0:	ldr	r6, [r1]
   173c4:	mov	r8, r1
   173c8:	mov	r9, r0
   173cc:	asrs	r4, r6, #1
   173d0:	mov	sl, r2
   173d4:	mov	fp, r3
   173d8:	ldr	r7, [sp, #48]	; 0x30
   173dc:	bmi	17558 <__assert_fail@plt+0x63b0>
   173e0:	mvn	r1, #-2147483648	; 0x80000000
   173e4:	sub	r1, r1, r4
   173e8:	cmp	r6, r1
   173ec:	movle	r1, #0
   173f0:	movgt	r1, #1
   173f4:	mvn	r3, fp
   173f8:	cmp	r1, #0
   173fc:	addeq	r4, r4, r6
   17400:	mvnne	r4, #-2147483648	; 0x80000000
   17404:	lsr	r3, r3, #31
   17408:	cmp	fp, r4
   1740c:	movge	r2, #0
   17410:	andlt	r2, r3, #1
   17414:	cmp	r2, #0
   17418:	beq	17508 <__assert_fail@plt+0x6360>
   1741c:	cmp	r7, #0
   17420:	blt	175f0 <__assert_fail@plt+0x6448>
   17424:	bne	175e8 <__assert_fail@plt+0x6440>
   17428:	mov	r5, #64	; 0x40
   1742c:	mov	r1, r7
   17430:	mov	r0, r5
   17434:	str	r3, [sp, #4]
   17438:	bl	19554 <__assert_fail@plt+0x83ac>
   1743c:	mov	r1, r7
   17440:	mov	r4, r0
   17444:	mov	r0, r5
   17448:	bl	19774 <__assert_fail@plt+0x85cc>
   1744c:	ldr	r3, [sp, #4]
   17450:	sub	r5, r5, r1
   17454:	cmp	r9, #0
   17458:	sub	r2, r4, r6
   1745c:	streq	r9, [r8]
   17460:	cmp	r2, sl
   17464:	bge	174e8 <__assert_fail@plt+0x6340>
   17468:	cmp	sl, #0
   1746c:	blt	17588 <__assert_fail@plt+0x63e0>
   17470:	cmp	r6, #0
   17474:	blt	17494 <__assert_fail@plt+0x62ec>
   17478:	mvn	r2, #-2147483648	; 0x80000000
   1747c:	sub	r2, r2, sl
   17480:	cmp	r6, r2
   17484:	movle	r2, #0
   17488:	movgt	r2, #1
   1748c:	cmp	r2, #0
   17490:	bne	17584 <__assert_fail@plt+0x63dc>
   17494:	add	r6, r6, sl
   17498:	cmp	fp, r6
   1749c:	movge	r3, #0
   174a0:	andlt	r3, r3, #1
   174a4:	cmp	r3, #0
   174a8:	mov	r4, r6
   174ac:	bne	17584 <__assert_fail@plt+0x63dc>
   174b0:	cmp	r7, #0
   174b4:	blt	1759c <__assert_fail@plt+0x63f4>
   174b8:	beq	174e4 <__assert_fail@plt+0x633c>
   174bc:	cmp	r6, #0
   174c0:	blt	17640 <__assert_fail@plt+0x6498>
   174c4:	mov	r1, r7
   174c8:	mvn	r0, #-2147483648	; 0x80000000
   174cc:	bl	19554 <__assert_fail@plt+0x83ac>
   174d0:	cmp	r6, r0
   174d4:	movle	r0, #0
   174d8:	movgt	r0, #1
   174dc:	cmp	r0, #0
   174e0:	bne	17584 <__assert_fail@plt+0x63dc>
   174e4:	mul	r5, r6, r7
   174e8:	mov	r1, r5
   174ec:	mov	r0, r9
   174f0:	bl	18c88 <__assert_fail@plt+0x7ae0>
   174f4:	cmp	r0, #0
   174f8:	beq	1756c <__assert_fail@plt+0x63c4>
   174fc:	str	r4, [r8]
   17500:	add	sp, sp, #12
   17504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17508:	cmp	r7, #0
   1750c:	blt	175c8 <__assert_fail@plt+0x6420>
   17510:	beq	17428 <__assert_fail@plt+0x6280>
   17514:	cmp	r4, #0
   17518:	blt	175f8 <__assert_fail@plt+0x6450>
   1751c:	mov	r1, r7
   17520:	mvn	r0, #-2147483648	; 0x80000000
   17524:	str	r3, [sp, #4]
   17528:	bl	19554 <__assert_fail@plt+0x83ac>
   1752c:	ldr	r3, [sp, #4]
   17530:	cmp	r0, r4
   17534:	movge	r0, #0
   17538:	movlt	r0, #1
   1753c:	cmp	r0, #0
   17540:	mvnne	r5, #-2147483648	; 0x80000000
   17544:	bne	1742c <__assert_fail@plt+0x6284>
   17548:	mul	r5, r7, r4
   1754c:	cmp	r5, #63	; 0x3f
   17550:	bgt	17454 <__assert_fail@plt+0x62ac>
   17554:	b	17428 <__assert_fail@plt+0x6280>
   17558:	rsb	r1, r4, #-2147483648	; 0x80000000
   1755c:	cmp	r6, r1
   17560:	movge	r1, #0
   17564:	movlt	r1, #1
   17568:	b	173f4 <__assert_fail@plt+0x624c>
   1756c:	adds	r5, r5, #0
   17570:	movne	r5, #1
   17574:	cmp	r9, #0
   17578:	orreq	r5, r5, #1
   1757c:	cmp	r5, #0
   17580:	beq	174fc <__assert_fail@plt+0x6354>
   17584:	bl	177bc <__assert_fail@plt+0x6614>
   17588:	rsb	r2, sl, #-2147483648	; 0x80000000
   1758c:	cmp	r6, r2
   17590:	movge	r2, #0
   17594:	movlt	r2, #1
   17598:	b	1748c <__assert_fail@plt+0x62e4>
   1759c:	cmp	r6, #0
   175a0:	blt	17624 <__assert_fail@plt+0x647c>
   175a4:	cmn	r7, #1
   175a8:	beq	174e4 <__assert_fail@plt+0x633c>
   175ac:	mov	r1, r7
   175b0:	mov	r0, #-2147483648	; 0x80000000
   175b4:	bl	19554 <__assert_fail@plt+0x83ac>
   175b8:	cmp	r6, r0
   175bc:	movle	r0, #0
   175c0:	movgt	r0, #1
   175c4:	b	174dc <__assert_fail@plt+0x6334>
   175c8:	cmp	r4, #0
   175cc:	blt	17664 <__assert_fail@plt+0x64bc>
   175d0:	cmn	r7, #1
   175d4:	beq	17548 <__assert_fail@plt+0x63a0>
   175d8:	str	r3, [sp, #4]
   175dc:	mov	r1, r7
   175e0:	mov	r0, #-2147483648	; 0x80000000
   175e4:	b	17528 <__assert_fail@plt+0x6380>
   175e8:	mov	r4, fp
   175ec:	b	1751c <__assert_fail@plt+0x6374>
   175f0:	mov	r4, fp
   175f4:	b	175d0 <__assert_fail@plt+0x6428>
   175f8:	cmn	r4, #1
   175fc:	beq	17548 <__assert_fail@plt+0x63a0>
   17600:	mov	r1, r4
   17604:	mov	r0, #-2147483648	; 0x80000000
   17608:	str	r3, [sp, #4]
   1760c:	bl	19554 <__assert_fail@plt+0x83ac>
   17610:	ldr	r3, [sp, #4]
   17614:	cmp	r7, r0
   17618:	movle	r0, #0
   1761c:	movgt	r0, #1
   17620:	b	1753c <__assert_fail@plt+0x6394>
   17624:	mov	r1, r7
   17628:	mvn	r0, #-2147483648	; 0x80000000
   1762c:	bl	19554 <__assert_fail@plt+0x83ac>
   17630:	cmp	r6, r0
   17634:	movge	r0, #0
   17638:	movlt	r0, #1
   1763c:	b	174dc <__assert_fail@plt+0x6334>
   17640:	cmn	r6, #1
   17644:	beq	174e4 <__assert_fail@plt+0x633c>
   17648:	mov	r1, r6
   1764c:	mov	r0, #-2147483648	; 0x80000000
   17650:	bl	19554 <__assert_fail@plt+0x83ac>
   17654:	cmp	r7, r0
   17658:	movle	r0, #0
   1765c:	movgt	r0, #1
   17660:	b	174dc <__assert_fail@plt+0x6334>
   17664:	mov	r1, r7
   17668:	mvn	r0, #-2147483648	; 0x80000000
   1766c:	str	r3, [sp, #4]
   17670:	bl	19554 <__assert_fail@plt+0x83ac>
   17674:	ldr	r3, [sp, #4]
   17678:	cmp	r0, r4
   1767c:	movle	r0, #0
   17680:	movgt	r0, #1
   17684:	b	1753c <__assert_fail@plt+0x6394>
   17688:	push	{r4, lr}
   1768c:	mov	r1, #1
   17690:	bl	18c14 <__assert_fail@plt+0x7a6c>
   17694:	cmp	r0, #0
   17698:	popne	{r4, pc}
   1769c:	bl	177bc <__assert_fail@plt+0x6614>
   176a0:	push	{r4, lr}
   176a4:	mov	r1, #1
   176a8:	bl	18c14 <__assert_fail@plt+0x7a6c>
   176ac:	cmp	r0, #0
   176b0:	popne	{r4, pc}
   176b4:	bl	177bc <__assert_fail@plt+0x6614>
   176b8:	push	{r4, lr}
   176bc:	bl	18c14 <__assert_fail@plt+0x7a6c>
   176c0:	cmp	r0, #0
   176c4:	popne	{r4, pc}
   176c8:	bl	177bc <__assert_fail@plt+0x6614>
   176cc:	push	{r4, lr}
   176d0:	bl	18c14 <__assert_fail@plt+0x7a6c>
   176d4:	cmp	r0, #0
   176d8:	popne	{r4, pc}
   176dc:	bl	177bc <__assert_fail@plt+0x6614>
   176e0:	push	{r4, r5, r6, lr}
   176e4:	mov	r6, r0
   176e8:	mov	r0, r1
   176ec:	mov	r4, r1
   176f0:	bl	18c5c <__assert_fail@plt+0x7ab4>
   176f4:	subs	r5, r0, #0
   176f8:	beq	17710 <__assert_fail@plt+0x6568>
   176fc:	mov	r2, r4
   17700:	mov	r1, r6
   17704:	bl	10f2c <memcpy@plt>
   17708:	mov	r0, r5
   1770c:	pop	{r4, r5, r6, pc}
   17710:	bl	177bc <__assert_fail@plt+0x6614>
   17714:	push	{r4, r5, r6, lr}
   17718:	mov	r6, r0
   1771c:	mov	r0, r1
   17720:	mov	r4, r1
   17724:	bl	18c5c <__assert_fail@plt+0x7ab4>
   17728:	subs	r5, r0, #0
   1772c:	beq	17744 <__assert_fail@plt+0x659c>
   17730:	mov	r2, r4
   17734:	mov	r1, r6
   17738:	bl	10f2c <memcpy@plt>
   1773c:	mov	r0, r5
   17740:	pop	{r4, r5, r6, pc}
   17744:	bl	177bc <__assert_fail@plt+0x6614>
   17748:	push	{r4, r5, r6, lr}
   1774c:	mov	r6, r0
   17750:	add	r0, r1, #1
   17754:	mov	r4, r1
   17758:	bl	18c5c <__assert_fail@plt+0x7ab4>
   1775c:	subs	r5, r0, #0
   17760:	beq	17780 <__assert_fail@plt+0x65d8>
   17764:	mov	r3, #0
   17768:	mov	r1, r6
   1776c:	strb	r3, [r5, r4]
   17770:	mov	r2, r4
   17774:	bl	10f2c <memcpy@plt>
   17778:	mov	r0, r5
   1777c:	pop	{r4, r5, r6, pc}
   17780:	bl	177bc <__assert_fail@plt+0x6614>
   17784:	push	{r4, r5, r6, lr}
   17788:	mov	r6, r0
   1778c:	bl	11088 <strlen@plt>
   17790:	add	r4, r0, #1
   17794:	mov	r0, r4
   17798:	bl	18c5c <__assert_fail@plt+0x7ab4>
   1779c:	subs	r5, r0, #0
   177a0:	beq	177b8 <__assert_fail@plt+0x6610>
   177a4:	mov	r2, r4
   177a8:	mov	r1, r6
   177ac:	bl	10f2c <memcpy@plt>
   177b0:	mov	r0, r5
   177b4:	pop	{r4, r5, r6, pc}
   177b8:	bl	177bc <__assert_fail@plt+0x6614>
   177bc:	ldr	r3, [pc, #44]	; 177f0 <__assert_fail@plt+0x6648>
   177c0:	push	{r4, lr}
   177c4:	mov	r2, #5
   177c8:	ldr	r1, [pc, #36]	; 177f4 <__assert_fail@plt+0x664c>
   177cc:	mov	r0, #0
   177d0:	ldr	r4, [r3]
   177d4:	bl	10f74 <dcgettext@plt>
   177d8:	ldr	r2, [pc, #24]	; 177f8 <__assert_fail@plt+0x6650>
   177dc:	mov	r1, #0
   177e0:	mov	r3, r0
   177e4:	mov	r0, r4
   177e8:	bl	11004 <error@plt>
   177ec:	bl	11184 <abort@plt>
   177f0:	andeq	fp, r2, ip, lsl r1
   177f4:	andeq	sl, r1, r4, lsr #8
   177f8:			; <UNDEFINED> instruction: 0x00019fbc
   177fc:	push	{r4, lr}
   17800:	bl	18ff0 <__assert_fail@plt+0x7e48>
   17804:	cmn	r0, #1
   17808:	mov	r4, r0
   1780c:	beq	17818 <__assert_fail@plt+0x6670>
   17810:	mov	r0, r4
   17814:	pop	{r4, pc}
   17818:	bl	110a0 <__errno_location@plt>
   1781c:	ldr	r3, [r0]
   17820:	cmp	r3, #12
   17824:	bne	17810 <__assert_fail@plt+0x6668>
   17828:	bl	177bc <__assert_fail@plt+0x6614>
   1782c:	cmp	r2, #36	; 0x24
   17830:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17834:	sub	sp, sp, #8
   17838:	bhi	17e20 <__assert_fail@plt+0x6c78>
   1783c:	cmp	r1, #0
   17840:	mov	r6, r1
   17844:	mov	r9, r2
   17848:	mov	r5, r0
   1784c:	mov	r8, r3
   17850:	addeq	r6, sp, #4
   17854:	bl	110a0 <__errno_location@plt>
   17858:	mov	r3, #0
   1785c:	str	r3, [r0]
   17860:	mov	r7, r0
   17864:	bl	11064 <__ctype_b_loc@plt>
   17868:	ldrb	r1, [r5]
   1786c:	mov	r2, r5
   17870:	ldr	r0, [r0]
   17874:	b	1787c <__assert_fail@plt+0x66d4>
   17878:	ldrb	r1, [r2, #1]!
   1787c:	lsl	r3, r1, #1
   17880:	ldrh	r3, [r0, r3]
   17884:	ands	r4, r3, #8192	; 0x2000
   17888:	bne	17878 <__assert_fail@plt+0x66d0>
   1788c:	cmp	r1, #45	; 0x2d
   17890:	bne	178a4 <__assert_fail@plt+0x66fc>
   17894:	mov	r4, #4
   17898:	mov	r0, r4
   1789c:	add	sp, sp, #8
   178a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   178a4:	mov	r2, r9
   178a8:	mov	r1, r6
   178ac:	mov	r0, r5
   178b0:	bl	1107c <strtoul@plt>
   178b4:	ldr	sl, [r6]
   178b8:	cmp	r5, sl
   178bc:	mov	r9, r0
   178c0:	beq	17908 <__assert_fail@plt+0x6760>
   178c4:	ldr	r4, [r7]
   178c8:	cmp	r4, #0
   178cc:	bne	178f8 <__assert_fail@plt+0x6750>
   178d0:	ldr	r3, [sp, #40]	; 0x28
   178d4:	cmp	r3, #0
   178d8:	beq	178e8 <__assert_fail@plt+0x6740>
   178dc:	ldrb	r5, [sl]
   178e0:	cmp	r5, #0
   178e4:	bne	17938 <__assert_fail@plt+0x6790>
   178e8:	mov	r0, r4
   178ec:	str	r9, [r8]
   178f0:	add	sp, sp, #8
   178f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   178f8:	cmp	r4, #34	; 0x22
   178fc:	bne	17894 <__assert_fail@plt+0x66ec>
   17900:	mov	r4, #1
   17904:	b	178d0 <__assert_fail@plt+0x6728>
   17908:	ldr	r3, [sp, #40]	; 0x28
   1790c:	cmp	r3, #0
   17910:	beq	17894 <__assert_fail@plt+0x66ec>
   17914:	ldrb	r5, [sl]
   17918:	cmp	r5, #0
   1791c:	beq	17894 <__assert_fail@plt+0x66ec>
   17920:	mov	r1, r5
   17924:	mov	r0, r3
   17928:	bl	11094 <strchr@plt>
   1792c:	cmp	r0, #0
   17930:	movne	r9, #1
   17934:	beq	17894 <__assert_fail@plt+0x66ec>
   17938:	mov	r1, r5
   1793c:	ldr	r0, [sp, #40]	; 0x28
   17940:	bl	11094 <strchr@plt>
   17944:	cmp	r0, #0
   17948:	beq	17dd8 <__assert_fail@plt+0x6c30>
   1794c:	sub	r3, r5, #69	; 0x45
   17950:	cmp	r3, #47	; 0x2f
   17954:	ldrls	pc, [pc, r3, lsl #2]
   17958:	b	17a1c <__assert_fail@plt+0x6874>
   1795c:	andeq	r7, r1, r0, lsl fp
   17960:	andeq	r7, r1, ip, lsl sl
   17964:	andeq	r7, r1, r0, lsl fp
   17968:	andeq	r7, r1, ip, lsl sl
   1796c:	andeq	r7, r1, ip, lsl sl
   17970:	andeq	r7, r1, ip, lsl sl
   17974:	andeq	r7, r1, r0, lsl fp
   17978:	andeq	r7, r1, ip, lsl sl
   1797c:	andeq	r7, r1, r0, lsl fp
   17980:	andeq	r7, r1, ip, lsl sl
   17984:	andeq	r7, r1, ip, lsl sl
   17988:	andeq	r7, r1, r0, lsl fp
   1798c:	andeq	r7, r1, ip, lsl sl
   17990:	andeq	r7, r1, ip, lsl sl
   17994:	andeq	r7, r1, ip, lsl sl
   17998:	andeq	r7, r1, r0, lsl fp
   1799c:	andeq	r7, r1, ip, lsl sl
   179a0:	andeq	r7, r1, ip, lsl sl
   179a4:	andeq	r7, r1, ip, lsl sl
   179a8:	andeq	r7, r1, ip, lsl sl
   179ac:	andeq	r7, r1, r0, lsl fp
   179b0:	andeq	r7, r1, r0, lsl fp
   179b4:	andeq	r7, r1, ip, lsl sl
   179b8:	andeq	r7, r1, ip, lsl sl
   179bc:	andeq	r7, r1, ip, lsl sl
   179c0:	andeq	r7, r1, ip, lsl sl
   179c4:	andeq	r7, r1, ip, lsl sl
   179c8:	andeq	r7, r1, ip, lsl sl
   179cc:	andeq	r7, r1, ip, lsl sl
   179d0:	andeq	r7, r1, ip, lsl sl
   179d4:	andeq	r7, r1, ip, lsl sl
   179d8:	andeq	r7, r1, ip, lsl sl
   179dc:	andeq	r7, r1, ip, lsl sl
   179e0:	andeq	r7, r1, ip, lsl sl
   179e4:	andeq	r7, r1, r0, lsl fp
   179e8:	andeq	r7, r1, ip, lsl sl
   179ec:	andeq	r7, r1, ip, lsl sl
   179f0:	andeq	r7, r1, ip, lsl sl
   179f4:	andeq	r7, r1, r0, lsl fp
   179f8:	andeq	r7, r1, ip, lsl sl
   179fc:	andeq	r7, r1, r0, lsl fp
   17a00:	andeq	r7, r1, ip, lsl sl
   17a04:	andeq	r7, r1, ip, lsl sl
   17a08:	andeq	r7, r1, ip, lsl sl
   17a0c:	andeq	r7, r1, ip, lsl sl
   17a10:	andeq	r7, r1, ip, lsl sl
   17a14:	andeq	r7, r1, ip, lsl sl
   17a18:	andeq	r7, r1, r0, lsl fp
   17a1c:	ldr	r0, [pc, #1040]	; 17e34 <__assert_fail@plt+0x6c8c>
   17a20:	mov	r2, #1024	; 0x400
   17a24:	mov	r1, #1
   17a28:	sub	r5, r5, #66	; 0x42
   17a2c:	cmp	r5, #53	; 0x35
   17a30:	ldrls	pc, [pc, r5, lsl #2]
   17a34:	b	17dd8 <__assert_fail@plt+0x6c30>
   17a38:	andeq	r7, r1, r4, asr #27
   17a3c:	ldrdeq	r7, [r1], -r8
   17a40:	ldrdeq	r7, [r1], -r8
   17a44:	andeq	r7, r1, r4, ror #26
   17a48:	ldrdeq	r7, [r1], -r8
   17a4c:	andeq	r7, r1, r8, lsr sp
   17a50:	ldrdeq	r7, [r1], -r8
   17a54:	ldrdeq	r7, [r1], -r8
   17a58:	ldrdeq	r7, [r1], -r8
   17a5c:	andeq	r7, r1, r4, ror #27
   17a60:	ldrdeq	r7, [r1], -r8
   17a64:	andeq	r7, r1, r0, lsr #26
   17a68:	ldrdeq	r7, [r1], -r8
   17a6c:	ldrdeq	r7, [r1], -r8
   17a70:	ldrdeq	r7, [r1], -ip
   17a74:	ldrdeq	r7, [r1], -r8
   17a78:	ldrdeq	r7, [r1], -r8
   17a7c:	ldrdeq	r7, [r1], -r8
   17a80:	andeq	r7, r1, r8, lsl #25
   17a84:	ldrdeq	r7, [r1], -r8
   17a88:	ldrdeq	r7, [r1], -r8
   17a8c:	ldrdeq	r7, [r1], -r8
   17a90:	ldrdeq	r7, [r1], -r8
   17a94:	andeq	r7, r1, r8, lsl ip
   17a98:	muleq	r1, r8, fp
   17a9c:	ldrdeq	r7, [r1], -r8
   17aa0:	ldrdeq	r7, [r1], -r8
   17aa4:	ldrdeq	r7, [r1], -r8
   17aa8:	ldrdeq	r7, [r1], -r8
   17aac:	ldrdeq	r7, [r1], -r8
   17ab0:	ldrdeq	r7, [r1], -r8
   17ab4:	ldrdeq	r7, [r1], -r8
   17ab8:	andeq	r7, r1, r4, lsl #23
   17abc:	andeq	r7, r1, ip, ror fp
   17ac0:	ldrdeq	r7, [r1], -r8
   17ac4:	ldrdeq	r7, [r1], -r8
   17ac8:	ldrdeq	r7, [r1], -r8
   17acc:	andeq	r7, r1, r8, lsr sp
   17ad0:	ldrdeq	r7, [r1], -r8
   17ad4:	ldrdeq	r7, [r1], -r8
   17ad8:	ldrdeq	r7, [r1], -r8
   17adc:	andeq	r7, r1, r4, ror #27
   17ae0:	ldrdeq	r7, [r1], -r8
   17ae4:	andeq	r7, r1, r0, lsr #26
   17ae8:	ldrdeq	r7, [r1], -r8
   17aec:	ldrdeq	r7, [r1], -r8
   17af0:	ldrdeq	r7, [r1], -r8
   17af4:	ldrdeq	r7, [r1], -r8
   17af8:	ldrdeq	r7, [r1], -r8
   17afc:	ldrdeq	r7, [r1], -r8
   17b00:	andeq	r7, r1, r8, lsl #25
   17b04:	ldrdeq	r7, [r1], -r8
   17b08:	ldrdeq	r7, [r1], -r8
   17b0c:	andeq	r7, r1, r0, asr fp
   17b10:	mov	r1, #48	; 0x30
   17b14:	ldr	r0, [sp, #40]	; 0x28
   17b18:	bl	11094 <strchr@plt>
   17b1c:	cmp	r0, #0
   17b20:	beq	17a1c <__assert_fail@plt+0x6874>
   17b24:	ldrb	r3, [sl, #1]
   17b28:	cmp	r3, #68	; 0x44
   17b2c:	beq	17b40 <__assert_fail@plt+0x6998>
   17b30:	cmp	r3, #105	; 0x69
   17b34:	beq	17df8 <__assert_fail@plt+0x6c50>
   17b38:	cmp	r3, #66	; 0x42
   17b3c:	bne	17a1c <__assert_fail@plt+0x6874>
   17b40:	ldr	r0, [pc, #752]	; 17e38 <__assert_fail@plt+0x6c90>
   17b44:	mov	r2, #1000	; 0x3e8
   17b48:	mov	r1, #2
   17b4c:	b	17a28 <__assert_fail@plt+0x6880>
   17b50:	cmp	r9, #0
   17b54:	lslge	r9, r9, #1
   17b58:	movge	r3, #0
   17b5c:	blt	17e14 <__assert_fail@plt+0x6c6c>
   17b60:	add	r2, sl, r1
   17b64:	str	r2, [r6]
   17b68:	ldrb	r2, [sl, r1]
   17b6c:	orr	r4, r4, r3
   17b70:	cmp	r2, #0
   17b74:	orrne	r4, r4, #2
   17b78:	b	178e8 <__assert_fail@plt+0x6740>
   17b7c:	mov	r3, #0
   17b80:	b	17b60 <__assert_fail@plt+0x69b8>
   17b84:	cmp	r9, #8388608	; 0x800000
   17b88:	bcs	17e14 <__assert_fail@plt+0x6c6c>
   17b8c:	lsl	r9, r9, #9
   17b90:	mov	r3, #0
   17b94:	b	17b60 <__assert_fail@plt+0x69b8>
   17b98:	mul	r3, r9, r2
   17b9c:	cmp	r0, r9
   17ba0:	mvncc	r3, #0
   17ba4:	cmp	r3, r0
   17ba8:	mul	ip, r2, r3
   17bac:	mvnhi	ip, #0
   17bb0:	movhi	r3, #1
   17bb4:	mul	lr, r2, ip
   17bb8:	movls	r3, #0
   17bbc:	cmp	r0, r9
   17bc0:	orrcc	r3, r3, #1
   17bc4:	cmp	ip, r0
   17bc8:	mvnhi	lr, #0
   17bcc:	orrhi	r3, r3, #1
   17bd0:	mul	ip, r2, lr
   17bd4:	cmp	lr, r0
   17bd8:	mvnhi	ip, #0
   17bdc:	orrhi	r3, r3, #1
   17be0:	cmp	ip, r0
   17be4:	mul	lr, r2, ip
   17be8:	orrhi	r3, r3, #1
   17bec:	mvnhi	lr, #0
   17bf0:	cmp	r0, lr
   17bf4:	mul	ip, lr, r2
   17bf8:	orrcc	r3, r3, #1
   17bfc:	mvncc	ip, #0
   17c00:	mul	r2, r2, ip
   17c04:	cmp	ip, r0
   17c08:	movls	r9, r2
   17c0c:	mvnhi	r9, #0
   17c10:	orrhi	r3, r3, #1
   17c14:	b	17b60 <__assert_fail@plt+0x69b8>
   17c18:	mul	r3, r9, r2
   17c1c:	cmp	r0, r9
   17c20:	mvncc	r3, #0
   17c24:	cmp	r3, r0
   17c28:	mul	ip, r2, r3
   17c2c:	mvnhi	ip, #0
   17c30:	movhi	r3, #1
   17c34:	mul	lr, r2, ip
   17c38:	movls	r3, #0
   17c3c:	cmp	r0, r9
   17c40:	orrcc	r3, r3, #1
   17c44:	cmp	ip, r0
   17c48:	movls	ip, lr
   17c4c:	mvnhi	ip, #0
   17c50:	orrhi	r3, r3, #1
   17c54:	mul	lr, ip, r2
   17c58:	cmp	r0, ip
   17c5c:	mvncc	lr, #0
   17c60:	orrcc	r3, r3, #1
   17c64:	mul	ip, r2, lr
   17c68:	cmp	lr, r0
   17c6c:	mvnhi	ip, #0
   17c70:	orrhi	r3, r3, #1
   17c74:	cmp	r0, ip
   17c78:	mul	lr, ip, r2
   17c7c:	orrcc	r3, r3, #1
   17c80:	mvncc	lr, #0
   17c84:	b	17bf0 <__assert_fail@plt+0x6a48>
   17c88:	mul	r3, r9, r2
   17c8c:	cmp	r0, r9
   17c90:	mvncc	r3, #0
   17c94:	cmp	r0, r3
   17c98:	mul	ip, r3, r2
   17c9c:	mvncc	ip, #0
   17ca0:	movcc	r3, #1
   17ca4:	mul	lr, r2, ip
   17ca8:	movcs	r3, #0
   17cac:	cmp	r0, r9
   17cb0:	orrcc	r3, r3, #1
   17cb4:	cmp	ip, r0
   17cb8:	movls	ip, lr
   17cbc:	mvnhi	ip, #0
   17cc0:	orrhi	r3, r3, #1
   17cc4:	mul	r2, ip, r2
   17cc8:	cmp	r0, ip
   17ccc:	movcs	r9, r2
   17cd0:	mvncc	r9, #0
   17cd4:	orrcc	r3, r3, #1
   17cd8:	b	17b60 <__assert_fail@plt+0x69b8>
   17cdc:	mul	r3, r9, r2
   17ce0:	cmp	r0, r9
   17ce4:	mvncc	r3, #0
   17ce8:	cmp	r0, r3
   17cec:	mul	ip, r3, r2
   17cf0:	mvncc	ip, #0
   17cf4:	movcc	r3, #1
   17cf8:	mul	lr, ip, r2
   17cfc:	movcs	r3, #0
   17d00:	cmp	r0, r9
   17d04:	orrcc	r3, r3, #1
   17d08:	cmp	r0, ip
   17d0c:	mvncc	lr, #0
   17d10:	orrcc	r3, r3, #1
   17d14:	mul	ip, r2, lr
   17d18:	cmp	lr, r0
   17d1c:	b	17cbc <__assert_fail@plt+0x6b14>
   17d20:	cmp	r0, r9
   17d24:	mul	ip, r9, r2
   17d28:	movcc	r3, #1
   17d2c:	mvncc	ip, #0
   17d30:	movcs	r3, #0
   17d34:	b	17cc4 <__assert_fail@plt+0x6b1c>
   17d38:	mul	r3, r9, r2
   17d3c:	cmp	r0, r9
   17d40:	mvncc	r3, #0
   17d44:	cmp	r3, r0
   17d48:	mul	ip, r2, r3
   17d4c:	movhi	r3, #1
   17d50:	movls	r3, #0
   17d54:	mvnhi	ip, #0
   17d58:	cmp	r0, r9
   17d5c:	orrcc	r3, r3, #1
   17d60:	b	17c00 <__assert_fail@plt+0x6a58>
   17d64:	mul	r3, r9, r2
   17d68:	cmp	r0, r9
   17d6c:	mvncc	r3, #0
   17d70:	cmp	r0, r3
   17d74:	mul	ip, r3, r2
   17d78:	mvncc	ip, #0
   17d7c:	movcc	r3, #1
   17d80:	mul	lr, r2, ip
   17d84:	movcs	r3, #0
   17d88:	cmp	r0, r9
   17d8c:	orrcc	r3, r3, #1
   17d90:	cmp	ip, r0
   17d94:	movls	ip, lr
   17d98:	mvnhi	ip, #0
   17d9c:	orrhi	r3, r3, #1
   17da0:	mul	lr, r2, ip
   17da4:	cmp	ip, r0
   17da8:	mvnhi	lr, #0
   17dac:	orrhi	r3, r3, #1
   17db0:	cmp	lr, r0
   17db4:	mul	ip, r2, lr
   17db8:	orrhi	r3, r3, #1
   17dbc:	mvnhi	ip, #0
   17dc0:	b	17c00 <__assert_fail@plt+0x6a58>
   17dc4:	cmp	r9, #4194304	; 0x400000
   17dc8:	bcs	17e14 <__assert_fail@plt+0x6c6c>
   17dcc:	lsl	r9, r9, #10
   17dd0:	mov	r3, #0
   17dd4:	b	17b60 <__assert_fail@plt+0x69b8>
   17dd8:	str	r9, [r8]
   17ddc:	orr	r4, r4, #2
   17de0:	b	17898 <__assert_fail@plt+0x66f0>
   17de4:	cmp	r0, r9
   17de8:	bcc	17e14 <__assert_fail@plt+0x6c6c>
   17dec:	mul	r9, r9, r2
   17df0:	mov	r3, #0
   17df4:	b	17b60 <__assert_fail@plt+0x69b8>
   17df8:	ldrb	r1, [sl, #2]
   17dfc:	ldr	r0, [pc, #48]	; 17e34 <__assert_fail@plt+0x6c8c>
   17e00:	mov	r2, #1024	; 0x400
   17e04:	cmp	r1, #66	; 0x42
   17e08:	movne	r1, #1
   17e0c:	moveq	r1, #3
   17e10:	b	17a28 <__assert_fail@plt+0x6880>
   17e14:	mvn	r9, #0
   17e18:	mov	r3, #1
   17e1c:	b	17b60 <__assert_fail@plt+0x69b8>
   17e20:	ldr	r3, [pc, #20]	; 17e3c <__assert_fail@plt+0x6c94>
   17e24:	mov	r2, #85	; 0x55
   17e28:	ldr	r1, [pc, #16]	; 17e40 <__assert_fail@plt+0x6c98>
   17e2c:	ldr	r0, [pc, #16]	; 17e44 <__assert_fail@plt+0x6c9c>
   17e30:	bl	111a8 <__assert_fail@plt>
   17e34:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   17e38:	subeq	r8, r1, r7, lsr r9
   17e3c:	andeq	sl, r1, r8, lsr r4
   17e40:	andeq	sl, r1, r4, asr #8
   17e44:	andeq	sl, r1, r4, asr r4
   17e48:	cmp	r2, #36	; 0x24
   17e4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e50:	sub	sp, sp, #52	; 0x34
   17e54:	bhi	18be4 <__assert_fail@plt+0x7a3c>
   17e58:	cmp	r1, #0
   17e5c:	mov	r6, r2
   17e60:	mov	sl, r0
   17e64:	mov	r5, r1
   17e68:	mov	r8, r3
   17e6c:	addeq	r5, sp, #44	; 0x2c
   17e70:	bl	110a0 <__errno_location@plt>
   17e74:	mov	r3, #0
   17e78:	str	r3, [r0]
   17e7c:	mov	fp, r0
   17e80:	bl	11064 <__ctype_b_loc@plt>
   17e84:	ldrb	r3, [sl]
   17e88:	mov	r2, sl
   17e8c:	ldr	r0, [r0]
   17e90:	b	17e98 <__assert_fail@plt+0x6cf0>
   17e94:	ldrb	r3, [r2, #1]!
   17e98:	lsl	r1, r3, #1
   17e9c:	ldrh	r4, [r0, r1]
   17ea0:	ands	r4, r4, #8192	; 0x2000
   17ea4:	bne	17e94 <__assert_fail@plt+0x6cec>
   17ea8:	cmp	r3, #45	; 0x2d
   17eac:	bne	17ec0 <__assert_fail@plt+0x6d18>
   17eb0:	mov	r4, #4
   17eb4:	mov	r0, r4
   17eb8:	add	sp, sp, #52	; 0x34
   17ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ec0:	mov	r2, r6
   17ec4:	mov	r3, r4
   17ec8:	mov	r1, r5
   17ecc:	mov	r0, sl
   17ed0:	bl	10f44 <__strtoull_internal@plt>
   17ed4:	ldr	r9, [r5]
   17ed8:	cmp	sl, r9
   17edc:	mov	r6, r0
   17ee0:	mov	r7, r1
   17ee4:	beq	17f2c <__assert_fail@plt+0x6d84>
   17ee8:	ldr	r4, [fp]
   17eec:	cmp	r4, #0
   17ef0:	bne	17f1c <__assert_fail@plt+0x6d74>
   17ef4:	ldr	r3, [sp, #88]	; 0x58
   17ef8:	cmp	r3, #0
   17efc:	beq	17f0c <__assert_fail@plt+0x6d64>
   17f00:	ldrb	sl, [r9]
   17f04:	cmp	sl, #0
   17f08:	bne	17f60 <__assert_fail@plt+0x6db8>
   17f0c:	mov	r0, r4
   17f10:	strd	r6, [r8]
   17f14:	add	sp, sp, #52	; 0x34
   17f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f1c:	cmp	r4, #34	; 0x22
   17f20:	bne	17eb0 <__assert_fail@plt+0x6d08>
   17f24:	mov	r4, #1
   17f28:	b	17ef4 <__assert_fail@plt+0x6d4c>
   17f2c:	ldr	r3, [sp, #88]	; 0x58
   17f30:	cmp	r3, #0
   17f34:	beq	17eb0 <__assert_fail@plt+0x6d08>
   17f38:	ldrb	sl, [r9]
   17f3c:	cmp	sl, #0
   17f40:	beq	17eb0 <__assert_fail@plt+0x6d08>
   17f44:	mov	r1, sl
   17f48:	mov	r0, r3
   17f4c:	bl	11094 <strchr@plt>
   17f50:	cmp	r0, #0
   17f54:	movne	r6, #1
   17f58:	movne	r7, #0
   17f5c:	beq	17eb0 <__assert_fail@plt+0x6d08>
   17f60:	mov	r1, sl
   17f64:	ldr	r0, [sp, #88]	; 0x58
   17f68:	bl	11094 <strchr@plt>
   17f6c:	cmp	r0, #0
   17f70:	beq	18ad0 <__assert_fail@plt+0x7928>
   17f74:	sub	r3, sl, #69	; 0x45
   17f78:	cmp	r3, #47	; 0x2f
   17f7c:	ldrls	pc, [pc, r3, lsl #2]
   17f80:	b	18074 <__assert_fail@plt+0x6ecc>
   17f84:	andeq	r8, r1, r4, asr #32
   17f88:	andeq	r8, r1, r4, ror r0
   17f8c:	andeq	r8, r1, r4, asr #32
   17f90:	andeq	r8, r1, r4, ror r0
   17f94:	andeq	r8, r1, r4, ror r0
   17f98:	andeq	r8, r1, r4, ror r0
   17f9c:	andeq	r8, r1, r4, asr #32
   17fa0:	andeq	r8, r1, r4, ror r0
   17fa4:	andeq	r8, r1, r4, asr #32
   17fa8:	andeq	r8, r1, r4, ror r0
   17fac:	andeq	r8, r1, r4, ror r0
   17fb0:	andeq	r8, r1, r4, asr #32
   17fb4:	andeq	r8, r1, r4, ror r0
   17fb8:	andeq	r8, r1, r4, ror r0
   17fbc:	andeq	r8, r1, r4, ror r0
   17fc0:	andeq	r8, r1, r4, asr #32
   17fc4:	andeq	r8, r1, r4, ror r0
   17fc8:	andeq	r8, r1, r4, ror r0
   17fcc:	andeq	r8, r1, r4, ror r0
   17fd0:	andeq	r8, r1, r4, ror r0
   17fd4:	andeq	r8, r1, r4, asr #32
   17fd8:	andeq	r8, r1, r4, asr #32
   17fdc:	andeq	r8, r1, r4, ror r0
   17fe0:	andeq	r8, r1, r4, ror r0
   17fe4:	andeq	r8, r1, r4, ror r0
   17fe8:	andeq	r8, r1, r4, ror r0
   17fec:	andeq	r8, r1, r4, ror r0
   17ff0:	andeq	r8, r1, r4, ror r0
   17ff4:	andeq	r8, r1, r4, ror r0
   17ff8:	andeq	r8, r1, r4, ror r0
   17ffc:	andeq	r8, r1, r4, ror r0
   18000:	andeq	r8, r1, r4, ror r0
   18004:	andeq	r8, r1, r4, ror r0
   18008:	andeq	r8, r1, r4, ror r0
   1800c:	andeq	r8, r1, r4, asr #32
   18010:	andeq	r8, r1, r4, ror r0
   18014:	andeq	r8, r1, r4, ror r0
   18018:	andeq	r8, r1, r4, ror r0
   1801c:	andeq	r8, r1, r4, asr #32
   18020:	andeq	r8, r1, r4, ror r0
   18024:	andeq	r8, r1, r4, asr #32
   18028:	andeq	r8, r1, r4, ror r0
   1802c:	andeq	r8, r1, r4, ror r0
   18030:	andeq	r8, r1, r4, ror r0
   18034:	andeq	r8, r1, r4, ror r0
   18038:	andeq	r8, r1, r4, ror r0
   1803c:	andeq	r8, r1, r4, ror r0
   18040:	andeq	r8, r1, r4, asr #32
   18044:	mov	r1, #48	; 0x30
   18048:	ldr	r0, [sp, #88]	; 0x58
   1804c:	bl	11094 <strchr@plt>
   18050:	cmp	r0, #0
   18054:	beq	18b64 <__assert_fail@plt+0x79bc>
   18058:	ldrb	r3, [r9, #1]
   1805c:	cmp	r3, #68	; 0x44
   18060:	beq	18b44 <__assert_fail@plt+0x799c>
   18064:	cmp	r3, #105	; 0x69
   18068:	beq	18b14 <__assert_fail@plt+0x796c>
   1806c:	cmp	r3, #66	; 0x42
   18070:	beq	18b44 <__assert_fail@plt+0x799c>
   18074:	ldr	r3, [pc, #2948]	; 18c00 <__assert_fail@plt+0x7a58>
   18078:	mvn	r2, #0
   1807c:	mov	r1, #1024	; 0x400
   18080:	mov	lr, #0
   18084:	strd	r2, [sp]
   18088:	mov	r3, #1
   1808c:	str	r3, [sp, #12]
   18090:	sub	sl, sl, #66	; 0x42
   18094:	cmp	sl, #53	; 0x35
   18098:	ldrls	pc, [pc, sl, lsl #2]
   1809c:	b	18ad0 <__assert_fail@plt+0x7928>
   180a0:	andeq	r8, r1, r0, lsr #21
   180a4:	ldrdeq	r8, [r1], -r0
   180a8:	ldrdeq	r8, [r1], -r0
   180ac:	andeq	r8, r1, ip, lsl r9
   180b0:	ldrdeq	r8, [r1], -r0
   180b4:	andeq	r8, r1, r8, asr r8
   180b8:	ldrdeq	r8, [r1], -r0
   180bc:	ldrdeq	r8, [r1], -r0
   180c0:	ldrdeq	r8, [r1], -r0
   180c4:	ldrdeq	r8, [r1], -ip
   180c8:	ldrdeq	r8, [r1], -r0
   180cc:	andeq	r8, r1, r8, ror r1
   180d0:	ldrdeq	r8, [r1], -r0
   180d4:	ldrdeq	r8, [r1], -r0
   180d8:	andeq	r8, r1, r4, lsl #4
   180dc:	ldrdeq	r8, [r1], -r0
   180e0:	ldrdeq	r8, [r1], -r0
   180e4:	ldrdeq	r8, [r1], -r0
   180e8:	andeq	r8, r1, r4, lsl #11
   180ec:	ldrdeq	r8, [r1], -r0
   180f0:	ldrdeq	r8, [r1], -r0
   180f4:	ldrdeq	r8, [r1], -r0
   180f8:	ldrdeq	r8, [r1], -r0
   180fc:	andeq	r8, r1, ip, asr r3
   18100:			; <UNDEFINED> instruction: 0x000186b8
   18104:	ldrdeq	r8, [r1], -r0
   18108:	ldrdeq	r8, [r1], -r0
   1810c:	ldrdeq	r8, [r1], -r0
   18110:	ldrdeq	r8, [r1], -r0
   18114:	ldrdeq	r8, [r1], -r0
   18118:	ldrdeq	r8, [r1], -r0
   1811c:	ldrdeq	r8, [r1], -r0
   18120:	andeq	r8, r1, r8, lsl #13
   18124:	andeq	r8, r1, r0, lsl #13
   18128:	ldrdeq	r8, [r1], -r0
   1812c:	ldrdeq	r8, [r1], -r0
   18130:	ldrdeq	r8, [r1], -r0
   18134:	andeq	r8, r1, r8, asr r8
   18138:	ldrdeq	r8, [r1], -r0
   1813c:	ldrdeq	r8, [r1], -r0
   18140:	ldrdeq	r8, [r1], -r0
   18144:	ldrdeq	r8, [r1], -ip
   18148:	ldrdeq	r8, [r1], -r0
   1814c:	andeq	r8, r1, r8, ror r1
   18150:	ldrdeq	r8, [r1], -r0
   18154:	ldrdeq	r8, [r1], -r0
   18158:	ldrdeq	r8, [r1], -r0
   1815c:	ldrdeq	r8, [r1], -r0
   18160:	ldrdeq	r8, [r1], -r0
   18164:	ldrdeq	r8, [r1], -r0
   18168:	andeq	r8, r1, r4, lsl #11
   1816c:	ldrdeq	r8, [r1], -r0
   18170:	ldrdeq	r8, [r1], -r0
   18174:	andeq	r8, r1, r4, ror #12
   18178:	mul	r0, r6, lr
   1817c:	ldrd	sl, [sp]
   18180:	umull	r2, r3, r6, r1
   18184:	mla	r0, r1, r7, r0
   18188:	cmp	r7, fp
   1818c:	cmpeq	r6, sl
   18190:	add	r3, r0, r3
   18194:	mvnhi	r3, #0
   18198:	mvnhi	r2, #0
   1819c:	mul	r6, r1, r3
   181a0:	umull	r0, r1, r1, r2
   181a4:	mla	lr, lr, r2, r6
   181a8:	ldrd	r6, [sp]
   181ac:	movhi	ip, #1
   181b0:	movls	ip, #0
   181b4:	cmp	r7, r3
   181b8:	cmpeq	r6, r2
   181bc:	mvncc	r0, #0
   181c0:	add	r1, lr, r1
   181c4:	mov	sl, r6
   181c8:	movcc	r1, r0
   181cc:	mov	fp, r7
   181d0:	cmp	fp, r3
   181d4:	cmpeq	sl, r2
   181d8:	mov	r6, r0
   181dc:	mov	r7, r1
   181e0:	orrcc	ip, ip, #1
   181e4:	ldr	r2, [sp, #12]
   181e8:	orr	r4, r4, ip
   181ec:	add	r3, r9, r2
   181f0:	str	r3, [r5]
   181f4:	ldrb	r3, [r9, r2]
   181f8:	cmp	r3, #0
   181fc:	orrne	r4, r4, #2
   18200:	b	17f0c <__assert_fail@plt+0x6d64>
   18204:	ldrd	sl, [sp]
   18208:	umull	r2, r3, r6, r1
   1820c:	mul	r0, r6, lr
   18210:	cmp	r7, fp
   18214:	cmpeq	r6, sl
   18218:	mvnhi	r2, #0
   1821c:	mla	r0, r1, r7, r0
   18220:	umull	sl, fp, r2, r1
   18224:	add	r3, r0, r3
   18228:	mul	r0, lr, r2
   1822c:	mvnhi	r3, #0
   18230:	strd	sl, [sp, #16]
   18234:	ldrd	sl, [sp]
   18238:	mla	r0, r1, r3, r0
   1823c:	ldr	ip, [sp, #20]
   18240:	cmp	r3, fp
   18244:	add	r0, r0, ip
   18248:	cmpeq	r2, sl
   1824c:	str	r0, [sp, #20]
   18250:	bls	18268 <__assert_fail@plt+0x70c0>
   18254:	mvn	sl, #0
   18258:	mvn	fp, #0
   1825c:	strd	sl, [sp, #16]
   18260:	ldr	r0, [sp, #20]
   18264:	ldrd	sl, [sp]
   18268:	cmp	r7, fp
   1826c:	cmpeq	r6, sl
   18270:	mul	r0, r1, r0
   18274:	ldrd	r6, [sp, #16]
   18278:	mla	ip, lr, r6, r0
   1827c:	mov	r0, r6
   18280:	movhi	r0, #1
   18284:	movls	r0, #0
   18288:	cmp	r3, fp
   1828c:	cmpeq	r2, sl
   18290:	ldrd	r2, [sp, #16]
   18294:	umull	r6, r7, r1, r6
   18298:	orrhi	r0, r0, #1
   1829c:	cmp	fp, r3
   182a0:	cmpeq	sl, r2
   182a4:	add	r7, ip, r7
   182a8:	bcc	18bb4 <__assert_fail@plt+0x7a0c>
   182ac:	mov	sl, r6
   182b0:	mov	fp, r7
   182b4:	strd	r6, [sp, #24]
   182b8:	mul	r3, r1, fp
   182bc:	umull	r6, r7, r1, sl
   182c0:	mla	ip, lr, sl, r3
   182c4:	ldrd	sl, [sp]
   182c8:	ldrd	r2, [sp, #16]
   182cc:	add	r7, ip, r7
   182d0:	cmp	fp, r3
   182d4:	cmpeq	sl, r2
   182d8:	mov	r3, fp
   182dc:	mov	r2, sl
   182e0:	ldrd	sl, [sp, #24]
   182e4:	orrcc	r0, r0, #1
   182e8:	str	r0, [sp, #16]
   182ec:	cmp	r3, fp
   182f0:	cmpeq	r2, sl
   182f4:	bcs	1884c <__assert_fail@plt+0x76a4>
   182f8:	mvn	r2, #0
   182fc:	mvn	r3, #0
   18300:	mul	ip, lr, r2
   18304:	ldrd	sl, [sp]
   18308:	mla	ip, r1, r3, ip
   1830c:	umull	r6, r7, r2, r1
   18310:	ldrd	r0, [sp, #24]
   18314:	add	r7, ip, r7
   18318:	cmp	fp, r1
   1831c:	ldr	r1, [sp, #16]
   18320:	cmpeq	sl, r0
   18324:	orrcc	r1, r1, #1
   18328:	cmp	r3, fp
   1832c:	cmpeq	r2, sl
   18330:	mvnhi	r0, #0
   18334:	movls	ip, r7
   18338:	movhi	ip, r0
   1833c:	movls	r0, r6
   18340:	cmp	r3, fp
   18344:	cmpeq	r2, sl
   18348:	mov	r7, ip
   1834c:	mov	r6, r0
   18350:	movls	ip, r1
   18354:	orrhi	ip, r1, #1
   18358:	b	181e4 <__assert_fail@plt+0x703c>
   1835c:	ldrd	sl, [sp]
   18360:	umull	r2, r3, r6, r1
   18364:	mul	r0, r6, lr
   18368:	cmp	r7, fp
   1836c:	cmpeq	r6, sl
   18370:	mvnhi	r2, #0
   18374:	mla	r0, r1, r7, r0
   18378:	umull	sl, fp, r2, r1
   1837c:	add	r3, r0, r3
   18380:	mul	r0, lr, r2
   18384:	mvnhi	r3, #0
   18388:	strd	sl, [sp, #16]
   1838c:	ldrd	sl, [sp]
   18390:	mla	r0, r1, r3, r0
   18394:	ldr	ip, [sp, #20]
   18398:	cmp	r3, fp
   1839c:	add	r0, r0, ip
   183a0:	cmpeq	r2, sl
   183a4:	str	r0, [sp, #20]
   183a8:	mvnhi	sl, #0
   183ac:	mvnhi	fp, #0
   183b0:	strdhi	sl, [sp, #16]
   183b4:	ldrdhi	sl, [sp]
   183b8:	ldr	r0, [sp, #16]
   183bc:	cmp	r3, fp
   183c0:	ldr	r3, [sp, #20]
   183c4:	mul	r0, lr, r0
   183c8:	cmpeq	r2, sl
   183cc:	mla	r0, r1, r3, r0
   183d0:	ldr	r3, [sp, #16]
   183d4:	umull	r2, r3, r3, r1
   183d8:	strd	r2, [sp, #24]
   183dc:	movhi	r3, #1
   183e0:	movls	r3, #0
   183e4:	cmp	r7, fp
   183e8:	cmpeq	r6, sl
   183ec:	ldrd	r6, [sp, #16]
   183f0:	ldr	r2, [sp, #28]
   183f4:	movls	ip, r3
   183f8:	orrhi	ip, r3, #1
   183fc:	cmp	r7, fp
   18400:	add	r2, r0, r2
   18404:	cmpeq	r6, sl
   18408:	str	r2, [sp, #28]
   1840c:	mvnhi	r2, #0
   18410:	mvnhi	r3, #0
   18414:	strdhi	r2, [sp, #24]
   18418:	ldrd	r6, [sp, #24]
   1841c:	mul	r2, r1, r7
   18420:	umull	sl, fp, r1, r6
   18424:	mla	r3, lr, r6, r2
   18428:	ldrd	r6, [sp]
   1842c:	str	r3, [sp, #32]
   18430:	ldrd	r2, [sp, #16]
   18434:	cmp	r3, r7
   18438:	cmpeq	r2, r6
   1843c:	ldrd	r2, [sp, #24]
   18440:	orrhi	ip, ip, #1
   18444:	cmp	r3, r7
   18448:	ldr	r3, [sp, #32]
   1844c:	cmpeq	r2, r6
   18450:	add	r2, r3, fp
   18454:	mov	fp, r2
   18458:	bhi	18b9c <__assert_fail@plt+0x79f4>
   1845c:	strd	sl, [sp, #16]
   18460:	mul	r2, r1, fp
   18464:	umull	r6, r7, r1, sl
   18468:	mla	r3, lr, sl, r2
   1846c:	ldrd	sl, [sp]
   18470:	str	r3, [sp, #32]
   18474:	ldrd	r2, [sp, #24]
   18478:	cmp	r3, fp
   1847c:	cmpeq	r2, sl
   18480:	ldrd	r2, [sp, #16]
   18484:	orrhi	ip, ip, #1
   18488:	cmp	fp, r3
   1848c:	ldr	r3, [sp, #32]
   18490:	cmpeq	sl, r2
   18494:	add	r2, r3, r7
   18498:	mov	r7, r2
   1849c:	mvncc	r7, #0
   184a0:	mvncc	r6, #0
   184a4:	mul	r2, r1, r7
   184a8:	mov	sl, r6
   184ac:	strd	r6, [sp, #24]
   184b0:	mla	r0, lr, sl, r2
   184b4:	ldrd	r2, [sp, #16]
   184b8:	ldrd	sl, [sp]
   184bc:	umull	r6, r7, r1, r6
   184c0:	cmp	fp, r3
   184c4:	cmpeq	sl, r2
   184c8:	mov	r3, fp
   184cc:	mov	r2, sl
   184d0:	ldrd	sl, [sp, #24]
   184d4:	orrcc	ip, ip, #1
   184d8:	add	r7, r0, r7
   184dc:	cmp	r3, fp
   184e0:	cmpeq	r2, sl
   184e4:	mvncc	r6, #0
   184e8:	mvncc	r7, #0
   184ec:	umull	sl, fp, r1, r6
   184f0:	mul	r3, r1, r7
   184f4:	strd	sl, [sp, #16]
   184f8:	mla	r0, lr, r6, r3
   184fc:	ldrd	sl, [sp, #24]
   18500:	ldrd	r2, [sp]
   18504:	cmp	r3, fp
   18508:	cmpeq	r2, sl
   1850c:	orrcc	ip, ip, #1
   18510:	cmp	r3, r7
   18514:	ldr	r3, [sp, #20]
   18518:	cmpeq	r2, r6
   1851c:	add	r3, r0, r3
   18520:	str	r3, [sp, #20]
   18524:	mvncc	r2, #0
   18528:	mvncc	r3, #0
   1852c:	ldrdcs	r2, [sp, #16]
   18530:	ldrd	sl, [sp]
   18534:	mul	r0, r1, r3
   18538:	cmp	fp, r7
   1853c:	str	r0, [sp, #16]
   18540:	cmpeq	sl, r6
   18544:	ldr	r6, [sp, #16]
   18548:	umull	r0, r1, r1, r2
   1854c:	mla	lr, lr, r2, r6
   18550:	orrcc	ip, ip, #1
   18554:	cmp	r3, fp
   18558:	cmpeq	r2, sl
   1855c:	add	r1, lr, r1
   18560:	bls	1856c <__assert_fail@plt+0x73c4>
   18564:	mvn	r0, #0
   18568:	mov	r1, r0
   1856c:	cmp	r3, fp
   18570:	cmpeq	r2, sl
   18574:	mov	r6, r0
   18578:	mov	r7, r1
   1857c:	orrhi	ip, ip, #1
   18580:	b	181e4 <__assert_fail@plt+0x703c>
   18584:	ldrd	sl, [sp]
   18588:	umull	r2, r3, r6, r1
   1858c:	mul	r0, r6, lr
   18590:	cmp	r7, fp
   18594:	cmpeq	r6, sl
   18598:	mvnhi	r2, #0
   1859c:	mla	r0, r1, r7, r0
   185a0:	umull	sl, fp, r1, r2
   185a4:	add	r3, r0, r3
   185a8:	mvnhi	r3, #0
   185ac:	strd	sl, [sp, #16]
   185b0:	mul	r0, r1, r3
   185b4:	ldrd	sl, [sp]
   185b8:	mla	r0, lr, r2, r0
   185bc:	ldr	ip, [sp, #20]
   185c0:	cmp	fp, r3
   185c4:	add	r0, r0, ip
   185c8:	cmpeq	sl, r2
   185cc:	str	r0, [sp, #20]
   185d0:	mvncc	sl, #0
   185d4:	mvncc	fp, #0
   185d8:	strdcc	sl, [sp, #16]
   185dc:	ldrdcc	sl, [sp]
   185e0:	ldr	r0, [sp, #16]
   185e4:	cmp	fp, r3
   185e8:	cmpeq	sl, r2
   185ec:	mul	r0, lr, r0
   185f0:	ldr	r2, [sp, #20]
   185f4:	ldr	r3, [sp, #16]
   185f8:	movcc	ip, #1
   185fc:	movcs	ip, #0
   18600:	cmp	r7, fp
   18604:	cmpeq	r6, sl
   18608:	ldrd	r6, [sp, #16]
   1860c:	mla	r0, r1, r2, r0
   18610:	umull	r2, r3, r3, r1
   18614:	orrhi	ip, ip, #1
   18618:	cmp	r7, fp
   1861c:	cmpeq	r6, sl
   18620:	add	r3, r0, r3
   18624:	mvnhi	r3, #0
   18628:	mvnhi	r2, #0
   1862c:	mul	r0, r1, r3
   18630:	cmp	r7, fp
   18634:	str	r0, [sp, #24]
   18638:	cmpeq	r6, sl
   1863c:	ldr	r6, [sp, #24]
   18640:	umull	r0, r1, r1, r2
   18644:	mla	lr, lr, r2, r6
   18648:	orrhi	ip, ip, #1
   1864c:	cmp	fp, r3
   18650:	cmpeq	sl, r2
   18654:	mvncc	r0, #0
   18658:	add	r1, lr, r1
   1865c:	movcc	r1, r0
   18660:	b	181d0 <__assert_fail@plt+0x7028>
   18664:	cmp	r6, #0
   18668:	sbcs	r3, r7, #0
   1866c:	blt	18b04 <__assert_fail@plt+0x795c>
   18670:	adds	r6, r6, r6
   18674:	adc	r7, r7, r7
   18678:	mov	ip, #0
   1867c:	b	181e4 <__assert_fail@plt+0x703c>
   18680:	mov	ip, #0
   18684:	b	181e4 <__assert_fail@plt+0x703c>
   18688:	ldr	r3, [pc, #1396]	; 18c04 <__assert_fail@plt+0x7a5c>
   1868c:	mvn	r2, #0
   18690:	cmp	r7, r3
   18694:	cmpeq	r6, r2
   18698:	bhi	18b04 <__assert_fail@plt+0x795c>
   1869c:	lsl	r3, r7, #9
   186a0:	orr	r3, r3, r6, lsr #23
   186a4:	lsl	r2, r6, #9
   186a8:	mov	r6, r2
   186ac:	mov	r7, r3
   186b0:	mov	ip, #0
   186b4:	b	181e4 <__assert_fail@plt+0x703c>
   186b8:	ldrd	sl, [sp]
   186bc:	umull	r2, r3, r6, r1
   186c0:	mul	r0, r6, lr
   186c4:	cmp	r7, fp
   186c8:	cmpeq	r6, sl
   186cc:	mvnhi	r2, #0
   186d0:	mla	r0, r1, r7, r0
   186d4:	umull	sl, fp, r2, r1
   186d8:	add	r3, r0, r3
   186dc:	mul	r0, lr, r2
   186e0:	mvnhi	r3, #0
   186e4:	strd	sl, [sp, #16]
   186e8:	ldrd	sl, [sp]
   186ec:	mla	r0, r1, r3, r0
   186f0:	ldr	ip, [sp, #20]
   186f4:	cmp	r3, fp
   186f8:	add	r0, r0, ip
   186fc:	cmpeq	r2, sl
   18700:	str	r0, [sp, #20]
   18704:	mvnhi	sl, #0
   18708:	mvnhi	fp, #0
   1870c:	strdhi	sl, [sp, #16]
   18710:	ldrdhi	sl, [sp]
   18714:	ldr	r0, [sp, #16]
   18718:	cmp	r3, fp
   1871c:	ldr	r3, [sp, #20]
   18720:	mul	r0, lr, r0
   18724:	cmpeq	r2, sl
   18728:	mla	r0, r1, r3, r0
   1872c:	ldr	r3, [sp, #16]
   18730:	umull	r2, r3, r3, r1
   18734:	strd	r2, [sp, #24]
   18738:	movhi	r3, #1
   1873c:	movls	r3, #0
   18740:	cmp	r7, fp
   18744:	cmpeq	r6, sl
   18748:	ldrd	r6, [sp, #16]
   1874c:	ldr	r2, [sp, #28]
   18750:	movls	ip, r3
   18754:	orrhi	ip, r3, #1
   18758:	cmp	r7, fp
   1875c:	add	r2, r0, r2
   18760:	cmpeq	r6, sl
   18764:	str	r2, [sp, #28]
   18768:	mvnhi	r2, #0
   1876c:	mvnhi	r3, #0
   18770:	strdhi	r2, [sp, #24]
   18774:	ldrd	r6, [sp, #24]
   18778:	mul	r2, lr, r6
   1877c:	umull	sl, fp, r6, r1
   18780:	mla	r3, r1, r7, r2
   18784:	ldrd	r6, [sp]
   18788:	str	r3, [sp, #32]
   1878c:	ldrd	r2, [sp, #16]
   18790:	cmp	r3, r7
   18794:	cmpeq	r2, r6
   18798:	ldrd	r2, [sp, #24]
   1879c:	orrhi	ip, ip, #1
   187a0:	cmp	r3, r7
   187a4:	ldr	r3, [sp, #32]
   187a8:	cmpeq	r2, r6
   187ac:	add	r2, r3, fp
   187b0:	mov	fp, r2
   187b4:	bhi	18bcc <__assert_fail@plt+0x7a24>
   187b8:	strd	sl, [sp, #16]
   187bc:	mul	r2, lr, sl
   187c0:	umull	r6, r7, sl, r1
   187c4:	mla	r3, r1, fp, r2
   187c8:	ldrd	sl, [sp]
   187cc:	str	r3, [sp, #32]
   187d0:	ldrd	r2, [sp, #24]
   187d4:	cmp	r3, fp
   187d8:	cmpeq	r2, sl
   187dc:	ldrd	r2, [sp, #16]
   187e0:	orrhi	ip, ip, #1
   187e4:	cmp	r3, fp
   187e8:	ldr	r3, [sp, #32]
   187ec:	cmpeq	r2, sl
   187f0:	add	r2, r3, r7
   187f4:	mov	r7, r2
   187f8:	mvnhi	r7, #0
   187fc:	mvnhi	r6, #0
   18800:	mul	r2, r1, r7
   18804:	mov	sl, r6
   18808:	strd	r6, [sp, #24]
   1880c:	mla	r0, lr, sl, r2
   18810:	ldrd	sl, [sp]
   18814:	ldrd	r2, [sp, #16]
   18818:	umull	r6, r7, r1, r6
   1881c:	cmp	r3, fp
   18820:	cmpeq	r2, sl
   18824:	mov	r3, ip
   18828:	orrhi	r3, r3, #1
   1882c:	mov	r2, sl
   18830:	str	r3, [sp, #16]
   18834:	mov	r3, fp
   18838:	ldrd	sl, [sp, #24]
   1883c:	add	r7, r0, r7
   18840:	cmp	r3, fp
   18844:	cmpeq	r2, sl
   18848:	bcc	182f8 <__assert_fail@plt+0x7150>
   1884c:	mov	r2, r6
   18850:	mov	r3, r7
   18854:	b	18300 <__assert_fail@plt+0x7158>
   18858:	ldrd	sl, [sp]
   1885c:	umull	r2, r3, r6, r1
   18860:	mul	r0, r6, lr
   18864:	cmp	r7, fp
   18868:	cmpeq	r6, sl
   1886c:	mvnhi	r2, #0
   18870:	mla	r0, r1, r7, r0
   18874:	umull	sl, fp, r2, r1
   18878:	add	r3, r0, r3
   1887c:	mul	r0, lr, r2
   18880:	mvnhi	r3, #0
   18884:	strd	sl, [sp, #16]
   18888:	ldrd	sl, [sp]
   1888c:	mla	r0, r1, r3, r0
   18890:	ldr	ip, [sp, #20]
   18894:	cmp	r3, fp
   18898:	add	r0, r0, ip
   1889c:	cmpeq	r2, sl
   188a0:	str	r0, [sp, #20]
   188a4:	mvnhi	sl, #0
   188a8:	mvnhi	fp, #0
   188ac:	strdhi	sl, [sp, #16]
   188b0:	ldrdhi	sl, [sp]
   188b4:	ldr	r0, [sp, #16]
   188b8:	cmp	r3, fp
   188bc:	ldr	ip, [sp, #20]
   188c0:	mul	r0, lr, r0
   188c4:	ldr	r3, [sp, #16]
   188c8:	cmpeq	r2, sl
   188cc:	mla	r0, r1, ip, r0
   188d0:	umull	r2, r3, r3, r1
   188d4:	movhi	r1, #1
   188d8:	movls	r1, #0
   188dc:	cmp	r7, fp
   188e0:	cmpeq	r6, sl
   188e4:	ldrd	r6, [sp, #16]
   188e8:	movls	ip, r1
   188ec:	orrhi	ip, r1, #1
   188f0:	cmp	r7, fp
   188f4:	cmpeq	r6, sl
   188f8:	mvnhi	r2, #0
   188fc:	add	r3, r0, r3
   18900:	movhi	r3, r2
   18904:	cmp	r7, fp
   18908:	cmpeq	r6, sl
   1890c:	mov	r7, r3
   18910:	mov	r6, r2
   18914:	orrhi	ip, ip, #1
   18918:	b	181e4 <__assert_fail@plt+0x703c>
   1891c:	ldrd	sl, [sp]
   18920:	umull	r2, r3, r6, r1
   18924:	mul	r0, r6, lr
   18928:	cmp	r7, fp
   1892c:	cmpeq	r6, sl
   18930:	mvnhi	r2, #0
   18934:	mla	r0, r1, r7, r0
   18938:	umull	sl, fp, r1, r2
   1893c:	add	r3, r0, r3
   18940:	mvnhi	r3, #0
   18944:	strd	sl, [sp, #16]
   18948:	mul	r0, r1, r3
   1894c:	ldrd	sl, [sp]
   18950:	mla	r0, lr, r2, r0
   18954:	ldr	ip, [sp, #20]
   18958:	cmp	fp, r3
   1895c:	add	r0, r0, ip
   18960:	cmpeq	sl, r2
   18964:	str	r0, [sp, #20]
   18968:	mvncc	sl, #0
   1896c:	mvncc	fp, #0
   18970:	strdcc	sl, [sp, #16]
   18974:	ldrdcc	sl, [sp]
   18978:	ldr	r0, [sp, #16]
   1897c:	cmp	fp, r3
   18980:	ldr	r3, [sp, #20]
   18984:	mul	r0, lr, r0
   18988:	cmpeq	sl, r2
   1898c:	mla	r0, r1, r3, r0
   18990:	ldr	r3, [sp, #16]
   18994:	umull	r2, r3, r3, r1
   18998:	strd	r2, [sp, #24]
   1899c:	movcc	r3, #1
   189a0:	movcs	r3, #0
   189a4:	cmp	r7, fp
   189a8:	cmpeq	r6, sl
   189ac:	movls	ip, r3
   189b0:	orrhi	ip, r3, #1
   189b4:	ldrd	r2, [sp, #16]
   189b8:	cmp	r3, fp
   189bc:	ldr	r3, [sp, #28]
   189c0:	cmpeq	r2, sl
   189c4:	add	r3, r0, r3
   189c8:	str	r3, [sp, #28]
   189cc:	bhi	18b84 <__assert_fail@plt+0x79dc>
   189d0:	ldrd	r2, [sp, #24]
   189d4:	mov	sl, r2
   189d8:	mov	fp, r3
   189dc:	mul	r2, lr, sl
   189e0:	umull	r6, r7, sl, r1
   189e4:	mla	r0, r1, fp, r2
   189e8:	ldrd	r2, [sp]
   189ec:	add	r7, r0, r7
   189f0:	mov	sl, r2
   189f4:	mov	fp, r3
   189f8:	strd	r2, [sp, #32]
   189fc:	ldrd	r2, [sp, #16]
   18a00:	cmp	r3, fp
   18a04:	cmpeq	r2, sl
   18a08:	ldrd	r2, [sp, #32]
   18a0c:	ldrd	sl, [sp, #24]
   18a10:	orrhi	ip, ip, #1
   18a14:	cmp	fp, r3
   18a18:	cmpeq	sl, r2
   18a1c:	mvnhi	r6, #0
   18a20:	mvnhi	r7, #0
   18a24:	umull	sl, fp, r6, r1
   18a28:	mul	r3, lr, r6
   18a2c:	strd	sl, [sp, #16]
   18a30:	mla	r0, r1, r7, r3
   18a34:	ldrd	sl, [sp, #24]
   18a38:	ldrd	r2, [sp]
   18a3c:	cmp	fp, r3
   18a40:	cmpeq	sl, r2
   18a44:	orrhi	ip, ip, #1
   18a48:	cmp	r7, r3
   18a4c:	ldr	r3, [sp, #20]
   18a50:	cmpeq	r6, r2
   18a54:	add	r3, r0, r3
   18a58:	str	r3, [sp, #20]
   18a5c:	mvnhi	r2, #0
   18a60:	mvnhi	r3, #0
   18a64:	ldrdls	r2, [sp, #16]
   18a68:	ldrd	sl, [sp]
   18a6c:	mul	r0, r1, r3
   18a70:	cmp	r7, fp
   18a74:	str	r0, [sp, #16]
   18a78:	cmpeq	r6, sl
   18a7c:	ldr	r6, [sp, #16]
   18a80:	umull	r0, r1, r1, r2
   18a84:	mla	lr, lr, r2, r6
   18a88:	orrhi	ip, ip, #1
   18a8c:	cmp	r3, fp
   18a90:	cmpeq	r2, sl
   18a94:	add	r1, lr, r1
   18a98:	bls	1856c <__assert_fail@plt+0x73c4>
   18a9c:	b	18564 <__assert_fail@plt+0x73bc>
   18aa0:	ldr	r3, [pc, #344]	; 18c00 <__assert_fail@plt+0x7a58>
   18aa4:	mvn	r2, #0
   18aa8:	cmp	r7, r3
   18aac:	cmpeq	r6, r2
   18ab0:	bhi	18b04 <__assert_fail@plt+0x795c>
   18ab4:	lsl	r3, r7, #10
   18ab8:	orr	r3, r3, r6, lsr #22
   18abc:	lsl	r2, r6, #10
   18ac0:	mov	r6, r2
   18ac4:	mov	r7, r3
   18ac8:	mov	ip, #0
   18acc:	b	181e4 <__assert_fail@plt+0x703c>
   18ad0:	strd	r6, [r8]
   18ad4:	orr	r4, r4, #2
   18ad8:	b	17eb4 <__assert_fail@plt+0x6d0c>
   18adc:	ldrd	r2, [sp]
   18ae0:	cmp	r7, r3
   18ae4:	cmpeq	r6, r2
   18ae8:	bhi	18b04 <__assert_fail@plt+0x795c>
   18aec:	mul	r3, r6, lr
   18af0:	mov	ip, #0
   18af4:	mla	r3, r1, r7, r3
   18af8:	umull	r6, r7, r6, r1
   18afc:	add	r7, r3, r7
   18b00:	b	181e4 <__assert_fail@plt+0x703c>
   18b04:	mvn	r6, #0
   18b08:	mvn	r7, #0
   18b0c:	mov	ip, #1
   18b10:	b	181e4 <__assert_fail@plt+0x703c>
   18b14:	ldrb	r3, [r9, #2]
   18b18:	mvn	r2, #0
   18b1c:	mov	r1, #1024	; 0x400
   18b20:	cmp	r3, #66	; 0x42
   18b24:	ldr	r3, [pc, #212]	; 18c00 <__assert_fail@plt+0x7a58>
   18b28:	mov	lr, #0
   18b2c:	strd	r2, [sp]
   18b30:	moveq	r3, #3
   18b34:	streq	r3, [sp, #12]
   18b38:	movne	r3, #1
   18b3c:	strne	r3, [sp, #12]
   18b40:	b	18090 <__assert_fail@plt+0x6ee8>
   18b44:	add	r3, pc, #172	; 0xac
   18b48:	ldrd	r2, [r3]
   18b4c:	mov	r1, #1000	; 0x3e8
   18b50:	mov	lr, #0
   18b54:	strd	r2, [sp]
   18b58:	mov	r3, #2
   18b5c:	str	r3, [sp, #12]
   18b60:	b	18090 <__assert_fail@plt+0x6ee8>
   18b64:	ldr	r3, [pc, #148]	; 18c00 <__assert_fail@plt+0x7a58>
   18b68:	mvn	r2, #0
   18b6c:	mov	lr, r0
   18b70:	strd	r2, [sp]
   18b74:	mov	r3, #1
   18b78:	mov	r1, #1024	; 0x400
   18b7c:	str	r3, [sp, #12]
   18b80:	b	18090 <__assert_fail@plt+0x6ee8>
   18b84:	mvn	r2, #0
   18b88:	mvn	r3, #0
   18b8c:	mov	sl, r2
   18b90:	strd	r2, [sp, #24]
   18b94:	mov	fp, r3
   18b98:	b	189dc <__assert_fail@plt+0x7834>
   18b9c:	mvn	r2, #0
   18ba0:	mvn	r3, #0
   18ba4:	mov	sl, r2
   18ba8:	strd	r2, [sp, #16]
   18bac:	mov	fp, r3
   18bb0:	b	18460 <__assert_fail@plt+0x72b8>
   18bb4:	mvn	r2, #0
   18bb8:	mvn	r3, #0
   18bbc:	mov	sl, r2
   18bc0:	strd	r2, [sp, #24]
   18bc4:	mov	fp, r3
   18bc8:	b	182b8 <__assert_fail@plt+0x7110>
   18bcc:	mvn	r2, #0
   18bd0:	mvn	r3, #0
   18bd4:	mov	sl, r2
   18bd8:	strd	r2, [sp, #16]
   18bdc:	mov	fp, r3
   18be0:	b	187bc <__assert_fail@plt+0x7614>
   18be4:	ldr	r3, [pc, #28]	; 18c08 <__assert_fail@plt+0x7a60>
   18be8:	mov	r2, #85	; 0x55
   18bec:	ldr	r1, [pc, #24]	; 18c0c <__assert_fail@plt+0x7a64>
   18bf0:	ldr	r0, [pc, #24]	; 18c10 <__assert_fail@plt+0x7a68>
   18bf4:	bl	111a8 <__assert_fail@plt>
   18bf8:	blmi	ff1c2bbc <optarg@@GLIBC_2.4+0xff197a44>
   18bfc:	subeq	r8, r1, r7, lsr r9
   18c00:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   18c04:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   18c08:	andeq	sl, r1, ip, ror r4
   18c0c:	andeq	sl, r1, r4, asr #8
   18c10:	andeq	sl, r1, r4, asr r4
   18c14:	cmp	r1, #0
   18c18:	cmpne	r0, #0
   18c1c:	moveq	r1, #1
   18c20:	moveq	r0, r1
   18c24:	umull	r2, r3, r0, r1
   18c28:	adds	r3, r3, #0
   18c2c:	movne	r3, #1
   18c30:	cmp	r2, #0
   18c34:	blt	18c44 <__assert_fail@plt+0x7a9c>
   18c38:	cmp	r3, #0
   18c3c:	bne	18c44 <__assert_fail@plt+0x7a9c>
   18c40:	b	10eb4 <calloc@plt>
   18c44:	push	{r4, lr}
   18c48:	bl	110a0 <__errno_location@plt>
   18c4c:	mov	r3, #12
   18c50:	str	r3, [r0]
   18c54:	mov	r0, #0
   18c58:	pop	{r4, pc}
   18c5c:	cmp	r0, #0
   18c60:	moveq	r0, #1
   18c64:	cmp	r0, #0
   18c68:	blt	18c70 <__assert_fail@plt+0x7ac8>
   18c6c:	b	11028 <malloc@plt>
   18c70:	push	{r4, lr}
   18c74:	bl	110a0 <__errno_location@plt>
   18c78:	mov	r3, #12
   18c7c:	str	r3, [r0]
   18c80:	mov	r0, #0
   18c84:	pop	{r4, pc}
   18c88:	cmp	r0, #0
   18c8c:	beq	18cb0 <__assert_fail@plt+0x7b08>
   18c90:	cmp	r1, #0
   18c94:	push	{lr}		; (str lr, [sp, #-4]!)
   18c98:	sub	sp, sp, #12
   18c9c:	beq	18cb8 <__assert_fail@plt+0x7b10>
   18ca0:	blt	18cd0 <__assert_fail@plt+0x7b28>
   18ca4:	add	sp, sp, #12
   18ca8:	pop	{lr}		; (ldr lr, [sp], #4)
   18cac:	b	10f80 <realloc@plt>
   18cb0:	mov	r0, r1
   18cb4:	b	18c5c <__assert_fail@plt+0x7ab4>
   18cb8:	str	r1, [sp, #4]
   18cbc:	bl	12038 <__assert_fail@plt+0xe90>
   18cc0:	ldr	r3, [sp, #4]
   18cc4:	mov	r0, r3
   18cc8:	add	sp, sp, #12
   18ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   18cd0:	bl	110a0 <__errno_location@plt>
   18cd4:	mov	r2, #12
   18cd8:	mov	r3, #0
   18cdc:	str	r2, [r0]
   18ce0:	b	18cc4 <__assert_fail@plt+0x7b1c>
   18ce4:	push	{r4, r5, r6, lr}
   18ce8:	mov	r4, r0
   18cec:	bl	10fec <__fpending@plt>
   18cf0:	ldr	r5, [r4]
   18cf4:	and	r5, r5, #32
   18cf8:	mov	r6, r0
   18cfc:	mov	r0, r4
   18d00:	bl	18d60 <__assert_fail@plt+0x7bb8>
   18d04:	cmp	r5, #0
   18d08:	mov	r4, r0
   18d0c:	bne	18d2c <__assert_fail@plt+0x7b84>
   18d10:	cmp	r0, #0
   18d14:	beq	18d24 <__assert_fail@plt+0x7b7c>
   18d18:	cmp	r6, #0
   18d1c:	beq	18d48 <__assert_fail@plt+0x7ba0>
   18d20:	mvn	r4, #0
   18d24:	mov	r0, r4
   18d28:	pop	{r4, r5, r6, pc}
   18d2c:	cmp	r0, #0
   18d30:	bne	18d20 <__assert_fail@plt+0x7b78>
   18d34:	bl	110a0 <__errno_location@plt>
   18d38:	str	r4, [r0]
   18d3c:	mvn	r4, #0
   18d40:	mov	r0, r4
   18d44:	pop	{r4, r5, r6, pc}
   18d48:	bl	110a0 <__errno_location@plt>
   18d4c:	ldr	r4, [r0]
   18d50:	subs	r4, r4, #9
   18d54:	mvnne	r4, #0
   18d58:	mov	r0, r4
   18d5c:	pop	{r4, r5, r6, pc}
   18d60:	push	{r4, r5, lr}
   18d64:	sub	sp, sp, #12
   18d68:	mov	r4, r0
   18d6c:	bl	110dc <fileno@plt>
   18d70:	cmp	r0, #0
   18d74:	mov	r0, r4
   18d78:	blt	18df4 <__assert_fail@plt+0x7c4c>
   18d7c:	bl	11040 <__freading@plt>
   18d80:	cmp	r0, #0
   18d84:	bne	18dc0 <__assert_fail@plt+0x7c18>
   18d88:	mov	r0, r4
   18d8c:	bl	18e00 <__assert_fail@plt+0x7c58>
   18d90:	cmp	r0, #0
   18d94:	beq	18df0 <__assert_fail@plt+0x7c48>
   18d98:	bl	110a0 <__errno_location@plt>
   18d9c:	mov	r5, r0
   18da0:	mov	r0, r4
   18da4:	ldr	r4, [r5]
   18da8:	bl	110f4 <fclose@plt>
   18dac:	cmp	r4, #0
   18db0:	mvnne	r0, #0
   18db4:	strne	r4, [r5]
   18db8:	add	sp, sp, #12
   18dbc:	pop	{r4, r5, pc}
   18dc0:	mov	r0, r4
   18dc4:	bl	110dc <fileno@plt>
   18dc8:	mov	r3, #1
   18dcc:	str	r3, [sp]
   18dd0:	mov	r2, #0
   18dd4:	mov	r3, #0
   18dd8:	bl	10fc8 <lseek64@plt>
   18ddc:	mvn	r3, #0
   18de0:	mvn	r2, #0
   18de4:	cmp	r1, r3
   18de8:	cmpeq	r0, r2
   18dec:	bne	18d88 <__assert_fail@plt+0x7be0>
   18df0:	mov	r0, r4
   18df4:	add	sp, sp, #12
   18df8:	pop	{r4, r5, lr}
   18dfc:	b	110f4 <fclose@plt>
   18e00:	push	{r4, lr}
   18e04:	subs	r4, r0, #0
   18e08:	sub	sp, sp, #8
   18e0c:	beq	18e28 <__assert_fail@plt+0x7c80>
   18e10:	bl	11040 <__freading@plt>
   18e14:	cmp	r0, #0
   18e18:	beq	18e28 <__assert_fail@plt+0x7c80>
   18e1c:	ldr	r3, [r4]
   18e20:	tst	r3, #256	; 0x100
   18e24:	bne	18e38 <__assert_fail@plt+0x7c90>
   18e28:	mov	r0, r4
   18e2c:	add	sp, sp, #8
   18e30:	pop	{r4, lr}
   18e34:	b	10f08 <fflush@plt>
   18e38:	mov	r3, #1
   18e3c:	str	r3, [sp]
   18e40:	mov	r2, #0
   18e44:	mov	r3, #0
   18e48:	mov	r0, r4
   18e4c:	bl	18e60 <__assert_fail@plt+0x7cb8>
   18e50:	mov	r0, r4
   18e54:	add	sp, sp, #8
   18e58:	pop	{r4, lr}
   18e5c:	b	10f08 <fflush@plt>
   18e60:	push	{r4, r5, r6, r7, r8, lr}
   18e64:	sub	sp, sp, #8
   18e68:	ldmib	r0, {ip, lr}
   18e6c:	mov	r4, r0
   18e70:	ldr	r5, [sp, #32]
   18e74:	cmp	lr, ip
   18e78:	beq	18e90 <__assert_fail@plt+0x7ce8>
   18e7c:	str	r5, [sp, #32]
   18e80:	mov	r0, r4
   18e84:	add	sp, sp, #8
   18e88:	pop	{r4, r5, r6, r7, r8, lr}
   18e8c:	b	11100 <fseeko64@plt>
   18e90:	ldr	lr, [r0, #20]
   18e94:	ldr	ip, [r0, #16]
   18e98:	cmp	lr, ip
   18e9c:	bne	18e7c <__assert_fail@plt+0x7cd4>
   18ea0:	ldr	r8, [r0, #36]	; 0x24
   18ea4:	cmp	r8, #0
   18ea8:	bne	18e7c <__assert_fail@plt+0x7cd4>
   18eac:	mov	r6, r2
   18eb0:	mov	r7, r3
   18eb4:	bl	110dc <fileno@plt>
   18eb8:	mov	r2, r6
   18ebc:	mov	r3, r7
   18ec0:	str	r5, [sp]
   18ec4:	bl	10fc8 <lseek64@plt>
   18ec8:	mvn	r3, #0
   18ecc:	mvn	r2, #0
   18ed0:	cmp	r1, r3
   18ed4:	cmpeq	r0, r2
   18ed8:	beq	18ef8 <__assert_fail@plt+0x7d50>
   18edc:	ldr	r3, [r4]
   18ee0:	strd	r0, [r4, #80]	; 0x50
   18ee4:	mov	r0, r8
   18ee8:	bic	r3, r3, #16
   18eec:	str	r3, [r4]
   18ef0:	add	sp, sp, #8
   18ef4:	pop	{r4, r5, r6, r7, r8, pc}
   18ef8:	mvn	r0, #0
   18efc:	b	18ef0 <__assert_fail@plt+0x7d48>
   18f00:	push	{r4, r5, r6, r8, r9, lr}
   18f04:	mov	r4, r0
   18f08:	mov	r5, r1
   18f0c:	add	r6, r2, #20
   18f10:	mov	r8, #10
   18f14:	mov	r9, #0
   18f18:	mov	r3, #0
   18f1c:	strb	r3, [r2, #20]
   18f20:	mov	r0, r4
   18f24:	mov	r1, r5
   18f28:	mov	r2, r8
   18f2c:	mov	r3, r9
   18f30:	bl	19794 <__assert_fail@plt+0x85ec>
   18f34:	mov	r0, r4
   18f38:	mov	r1, r5
   18f3c:	mov	r3, r9
   18f40:	add	r2, r2, #48	; 0x30
   18f44:	strb	r2, [r6, #-1]!
   18f48:	mov	r2, r8
   18f4c:	bl	19794 <__assert_fail@plt+0x85ec>
   18f50:	mov	r4, r0
   18f54:	mov	r5, r1
   18f58:	orrs	r3, r4, r5
   18f5c:	bne	18f20 <__assert_fail@plt+0x7d78>
   18f60:	mov	r0, r6
   18f64:	pop	{r4, r5, r6, r8, r9, pc}
   18f68:	push	{r4, lr}
   18f6c:	mov	r0, #14
   18f70:	bl	1113c <nl_langinfo@plt>
   18f74:	cmp	r0, #0
   18f78:	beq	18f90 <__assert_fail@plt+0x7de8>
   18f7c:	ldrb	r2, [r0]
   18f80:	ldr	r3, [pc, #16]	; 18f98 <__assert_fail@plt+0x7df0>
   18f84:	cmp	r2, #0
   18f88:	moveq	r0, r3
   18f8c:	pop	{r4, pc}
   18f90:	ldr	r0, [pc]	; 18f98 <__assert_fail@plt+0x7df0>
   18f94:	pop	{r4, pc}
   18f98:	andeq	sl, r1, r8, lsl #9
   18f9c:	push	{r4, r5, r6, r7, lr}
   18fa0:	subs	r6, r0, #0
   18fa4:	sub	sp, sp, #12
   18fa8:	addeq	r6, sp, #4
   18fac:	mov	r0, r6
   18fb0:	mov	r5, r2
   18fb4:	mov	r7, r1
   18fb8:	bl	10ff8 <mbrtowc@plt>
   18fbc:	cmp	r5, #0
   18fc0:	cmnne	r0, #3
   18fc4:	mov	r4, r0
   18fc8:	bls	18fe4 <__assert_fail@plt+0x7e3c>
   18fcc:	mov	r0, #0
   18fd0:	bl	19254 <__assert_fail@plt+0x80ac>
   18fd4:	cmp	r0, #0
   18fd8:	moveq	r4, #1
   18fdc:	ldrbeq	r3, [r7]
   18fe0:	streq	r3, [r6]
   18fe4:	mov	r0, r4
   18fe8:	add	sp, sp, #12
   18fec:	pop	{r4, r5, r6, r7, pc}
   18ff0:	push	{r4, r5, r6, r7, r8, r9, lr}
   18ff4:	subs	r7, r0, #0
   18ff8:	sub	sp, sp, #12
   18ffc:	mov	r6, r1
   19000:	mov	r8, r2
   19004:	beq	190cc <__assert_fail@plt+0x7f24>
   19008:	mov	r3, #10
   1900c:	mov	r1, #40	; 0x28
   19010:	mov	r0, #0
   19014:	str	r3, [sp, #4]
   19018:	bl	18c88 <__assert_fail@plt+0x7ae0>
   1901c:	subs	r4, r0, #0
   19020:	bne	19060 <__assert_fail@plt+0x7eb8>
   19024:	b	190a8 <__assert_fail@plt+0x7f00>
   19028:	lsrs	r3, r1, #30
   1902c:	movne	r3, #1
   19030:	moveq	r3, #0
   19034:	lsls	r1, r1, #2
   19038:	mov	r0, r4
   1903c:	bmi	19094 <__assert_fail@plt+0x7eec>
   19040:	cmp	r3, #0
   19044:	bne	19094 <__assert_fail@plt+0x7eec>
   19048:	bl	18c88 <__assert_fail@plt+0x7ae0>
   1904c:	cmp	r0, #0
   19050:	beq	190a0 <__assert_fail@plt+0x7ef8>
   19054:	cmp	r5, #0
   19058:	mov	r4, r0
   1905c:	bge	190b8 <__assert_fail@plt+0x7f10>
   19060:	mov	r1, r6
   19064:	add	r3, sp, #4
   19068:	mov	r2, r4
   1906c:	mov	r0, r7
   19070:	ldr	r9, [sp, #4]
   19074:	bl	110b8 <getgrouplist@plt>
   19078:	ldr	r1, [sp, #4]
   1907c:	subs	r5, r0, #0
   19080:	bge	19028 <__assert_fail@plt+0x7e80>
   19084:	cmp	r9, r1
   19088:	lsleq	r1, r1, #1
   1908c:	streq	r1, [sp, #4]
   19090:	b	19028 <__assert_fail@plt+0x7e80>
   19094:	bl	110a0 <__errno_location@plt>
   19098:	mov	r3, #12
   1909c:	str	r3, [r0]
   190a0:	mov	r0, r4
   190a4:	bl	12038 <__assert_fail@plt+0xe90>
   190a8:	mvn	r3, #0
   190ac:	mov	r0, r3
   190b0:	add	sp, sp, #12
   190b4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   190b8:	ldr	r3, [sp, #4]
   190bc:	str	r0, [r8]
   190c0:	mov	r0, r3
   190c4:	add	sp, sp, #12
   190c8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   190cc:	mov	r1, r7
   190d0:	bl	11154 <getgroups@plt>
   190d4:	cmp	r0, #0
   190d8:	str	r0, [sp, #4]
   190dc:	blt	191a8 <__assert_fail@plt+0x8000>
   190e0:	adds	r5, r6, #1
   190e4:	movne	r5, #1
   190e8:	cmp	r0, #0
   190ec:	movne	r3, r5
   190f0:	orreq	r3, r5, #1
   190f4:	cmp	r3, #0
   190f8:	addne	r0, r0, #1
   190fc:	strne	r0, [sp, #4]
   19100:	lsrs	r3, r0, #30
   19104:	movne	r3, #1
   19108:	moveq	r3, #0
   1910c:	lsls	r1, r0, #2
   19110:	bmi	191f4 <__assert_fail@plt+0x804c>
   19114:	cmp	r3, #0
   19118:	bne	191f4 <__assert_fail@plt+0x804c>
   1911c:	mov	r0, r3
   19120:	bl	18c88 <__assert_fail@plt+0x7ae0>
   19124:	subs	r4, r0, #0
   19128:	beq	190a8 <__assert_fail@plt+0x7f00>
   1912c:	ldr	r0, [sp, #4]
   19130:	cmn	r6, #1
   19134:	sub	r0, r0, r5
   19138:	beq	191e0 <__assert_fail@plt+0x8038>
   1913c:	add	r1, r4, #4
   19140:	bl	11154 <getgroups@plt>
   19144:	subs	r3, r0, #0
   19148:	addge	r3, r3, #1
   1914c:	strge	r6, [r4]
   19150:	blt	190a0 <__assert_fail@plt+0x7ef8>
   19154:	cmp	r3, #1
   19158:	str	r4, [r8]
   1915c:	ble	190ac <__assert_fail@plt+0x7f04>
   19160:	add	ip, r4, r3, lsl #2
   19164:	add	r2, r4, #4
   19168:	cmp	ip, r2
   1916c:	ldr	lr, [r4]
   19170:	bhi	19194 <__assert_fail@plt+0x7fec>
   19174:	b	190ac <__assert_fail@plt+0x7f04>
   19178:	ldr	r0, [r4]
   1917c:	cmp	r1, r0
   19180:	strne	r1, [r4, #4]
   19184:	addne	r4, r4, #4
   19188:	beq	191a0 <__assert_fail@plt+0x7ff8>
   1918c:	cmp	ip, r2
   19190:	bls	190ac <__assert_fail@plt+0x7f04>
   19194:	ldr	r1, [r2], #4
   19198:	cmp	lr, r1
   1919c:	bne	19178 <__assert_fail@plt+0x7fd0>
   191a0:	sub	r3, r3, #1
   191a4:	b	1918c <__assert_fail@plt+0x7fe4>
   191a8:	bl	110a0 <__errno_location@plt>
   191ac:	ldr	r3, [r0]
   191b0:	cmp	r3, #38	; 0x26
   191b4:	bne	190a8 <__assert_fail@plt+0x7f00>
   191b8:	mov	r0, r7
   191bc:	mov	r1, #4
   191c0:	bl	18c88 <__assert_fail@plt+0x7ae0>
   191c4:	cmp	r0, #0
   191c8:	beq	190a8 <__assert_fail@plt+0x7f00>
   191cc:	adds	r3, r6, #1
   191d0:	str	r0, [r8]
   191d4:	movne	r3, #1
   191d8:	str	r6, [r0]
   191dc:	b	190ac <__assert_fail@plt+0x7f04>
   191e0:	mov	r1, r4
   191e4:	bl	11154 <getgroups@plt>
   191e8:	subs	r3, r0, #0
   191ec:	bge	19154 <__assert_fail@plt+0x7fac>
   191f0:	b	190a0 <__assert_fail@plt+0x7ef8>
   191f4:	bl	110a0 <__errno_location@plt>
   191f8:	mov	r2, #12
   191fc:	mvn	r3, #0
   19200:	str	r2, [r0]
   19204:	b	190ac <__assert_fail@plt+0x7f04>
   19208:	push	{r4, r5, r6, lr}
   1920c:	subs	r4, r2, #0
   19210:	mov	r6, r0
   19214:	mov	r5, r1
   19218:	beq	19244 <__assert_fail@plt+0x809c>
   1921c:	mov	r1, r4
   19220:	mvn	r0, #0
   19224:	bl	19348 <__assert_fail@plt+0x81a0>
   19228:	cmp	r0, r5
   1922c:	bcs	19244 <__assert_fail@plt+0x809c>
   19230:	bl	110a0 <__errno_location@plt>
   19234:	mov	r3, #12
   19238:	str	r3, [r0]
   1923c:	mov	r0, #0
   19240:	pop	{r4, r5, r6, pc}
   19244:	mul	r1, r5, r4
   19248:	mov	r0, r6
   1924c:	pop	{r4, r5, r6, lr}
   19250:	b	18c88 <__assert_fail@plt+0x7ae0>
   19254:	push	{lr}		; (str lr, [sp, #-4]!)
   19258:	sub	sp, sp, #268	; 0x10c
   1925c:	add	r1, sp, #4
   19260:	ldr	r2, [pc, #60]	; 192a4 <__assert_fail@plt+0x80fc>
   19264:	bl	192b0 <__assert_fail@plt+0x8108>
   19268:	cmp	r0, #0
   1926c:	movne	r0, #0
   19270:	bne	1929c <__assert_fail@plt+0x80f4>
   19274:	ldr	r1, [pc, #44]	; 192a8 <__assert_fail@plt+0x8100>
   19278:	add	r0, sp, #4
   1927c:	bl	10ef0 <strcmp@plt>
   19280:	cmp	r0, #0
   19284:	beq	1929c <__assert_fail@plt+0x80f4>
   19288:	add	r0, sp, #4
   1928c:	ldr	r1, [pc, #24]	; 192ac <__assert_fail@plt+0x8104>
   19290:	bl	10ef0 <strcmp@plt>
   19294:	adds	r0, r0, #0
   19298:	movne	r0, #1
   1929c:	add	sp, sp, #268	; 0x10c
   192a0:	pop	{pc}		; (ldr pc, [sp], #4)
   192a4:	andeq	r0, r0, r1, lsl #2
   192a8:	muleq	r1, r0, r4
   192ac:	muleq	r1, r4, r4
   192b0:	push	{r4, r5, r6, lr}
   192b4:	mov	r5, r1
   192b8:	mov	r1, #0
   192bc:	mov	r4, r2
   192c0:	bl	11118 <setlocale@plt>
   192c4:	subs	r6, r0, #0
   192c8:	beq	19324 <__assert_fail@plt+0x817c>
   192cc:	bl	11088 <strlen@plt>
   192d0:	cmp	r4, r0
   192d4:	bhi	1930c <__assert_fail@plt+0x8164>
   192d8:	cmp	r4, #0
   192dc:	bne	192e8 <__assert_fail@plt+0x8140>
   192e0:	mov	r0, #34	; 0x22
   192e4:	pop	{r4, r5, r6, pc}
   192e8:	sub	r4, r4, #1
   192ec:	mov	r1, r6
   192f0:	mov	r2, r4
   192f4:	mov	r0, r5
   192f8:	bl	10f2c <memcpy@plt>
   192fc:	mov	r3, #0
   19300:	strb	r3, [r5, r4]
   19304:	mov	r0, #34	; 0x22
   19308:	pop	{r4, r5, r6, pc}
   1930c:	add	r2, r0, #1
   19310:	mov	r1, r6
   19314:	mov	r0, r5
   19318:	bl	10f2c <memcpy@plt>
   1931c:	mov	r0, #0
   19320:	pop	{r4, r5, r6, pc}
   19324:	cmp	r4, #0
   19328:	beq	19338 <__assert_fail@plt+0x8190>
   1932c:	strb	r6, [r5]
   19330:	mov	r0, #22
   19334:	pop	{r4, r5, r6, pc}
   19338:	mov	r0, #22
   1933c:	pop	{r4, r5, r6, pc}
   19340:	mov	r1, #0
   19344:	b	11118 <setlocale@plt>
   19348:	subs	r2, r1, #1
   1934c:	bxeq	lr
   19350:	bcc	19528 <__assert_fail@plt+0x8380>
   19354:	cmp	r0, r1
   19358:	bls	1950c <__assert_fail@plt+0x8364>
   1935c:	tst	r1, r2
   19360:	beq	19518 <__assert_fail@plt+0x8370>
   19364:	clz	r3, r0
   19368:	clz	r2, r1
   1936c:	sub	r3, r2, r3
   19370:	rsbs	r3, r3, #31
   19374:	addne	r3, r3, r3, lsl #1
   19378:	mov	r2, #0
   1937c:	addne	pc, pc, r3, lsl #2
   19380:	nop			; (mov r0, r0)
   19384:	cmp	r0, r1, lsl #31
   19388:	adc	r2, r2, r2
   1938c:	subcs	r0, r0, r1, lsl #31
   19390:	cmp	r0, r1, lsl #30
   19394:	adc	r2, r2, r2
   19398:	subcs	r0, r0, r1, lsl #30
   1939c:	cmp	r0, r1, lsl #29
   193a0:	adc	r2, r2, r2
   193a4:	subcs	r0, r0, r1, lsl #29
   193a8:	cmp	r0, r1, lsl #28
   193ac:	adc	r2, r2, r2
   193b0:	subcs	r0, r0, r1, lsl #28
   193b4:	cmp	r0, r1, lsl #27
   193b8:	adc	r2, r2, r2
   193bc:	subcs	r0, r0, r1, lsl #27
   193c0:	cmp	r0, r1, lsl #26
   193c4:	adc	r2, r2, r2
   193c8:	subcs	r0, r0, r1, lsl #26
   193cc:	cmp	r0, r1, lsl #25
   193d0:	adc	r2, r2, r2
   193d4:	subcs	r0, r0, r1, lsl #25
   193d8:	cmp	r0, r1, lsl #24
   193dc:	adc	r2, r2, r2
   193e0:	subcs	r0, r0, r1, lsl #24
   193e4:	cmp	r0, r1, lsl #23
   193e8:	adc	r2, r2, r2
   193ec:	subcs	r0, r0, r1, lsl #23
   193f0:	cmp	r0, r1, lsl #22
   193f4:	adc	r2, r2, r2
   193f8:	subcs	r0, r0, r1, lsl #22
   193fc:	cmp	r0, r1, lsl #21
   19400:	adc	r2, r2, r2
   19404:	subcs	r0, r0, r1, lsl #21
   19408:	cmp	r0, r1, lsl #20
   1940c:	adc	r2, r2, r2
   19410:	subcs	r0, r0, r1, lsl #20
   19414:	cmp	r0, r1, lsl #19
   19418:	adc	r2, r2, r2
   1941c:	subcs	r0, r0, r1, lsl #19
   19420:	cmp	r0, r1, lsl #18
   19424:	adc	r2, r2, r2
   19428:	subcs	r0, r0, r1, lsl #18
   1942c:	cmp	r0, r1, lsl #17
   19430:	adc	r2, r2, r2
   19434:	subcs	r0, r0, r1, lsl #17
   19438:	cmp	r0, r1, lsl #16
   1943c:	adc	r2, r2, r2
   19440:	subcs	r0, r0, r1, lsl #16
   19444:	cmp	r0, r1, lsl #15
   19448:	adc	r2, r2, r2
   1944c:	subcs	r0, r0, r1, lsl #15
   19450:	cmp	r0, r1, lsl #14
   19454:	adc	r2, r2, r2
   19458:	subcs	r0, r0, r1, lsl #14
   1945c:	cmp	r0, r1, lsl #13
   19460:	adc	r2, r2, r2
   19464:	subcs	r0, r0, r1, lsl #13
   19468:	cmp	r0, r1, lsl #12
   1946c:	adc	r2, r2, r2
   19470:	subcs	r0, r0, r1, lsl #12
   19474:	cmp	r0, r1, lsl #11
   19478:	adc	r2, r2, r2
   1947c:	subcs	r0, r0, r1, lsl #11
   19480:	cmp	r0, r1, lsl #10
   19484:	adc	r2, r2, r2
   19488:	subcs	r0, r0, r1, lsl #10
   1948c:	cmp	r0, r1, lsl #9
   19490:	adc	r2, r2, r2
   19494:	subcs	r0, r0, r1, lsl #9
   19498:	cmp	r0, r1, lsl #8
   1949c:	adc	r2, r2, r2
   194a0:	subcs	r0, r0, r1, lsl #8
   194a4:	cmp	r0, r1, lsl #7
   194a8:	adc	r2, r2, r2
   194ac:	subcs	r0, r0, r1, lsl #7
   194b0:	cmp	r0, r1, lsl #6
   194b4:	adc	r2, r2, r2
   194b8:	subcs	r0, r0, r1, lsl #6
   194bc:	cmp	r0, r1, lsl #5
   194c0:	adc	r2, r2, r2
   194c4:	subcs	r0, r0, r1, lsl #5
   194c8:	cmp	r0, r1, lsl #4
   194cc:	adc	r2, r2, r2
   194d0:	subcs	r0, r0, r1, lsl #4
   194d4:	cmp	r0, r1, lsl #3
   194d8:	adc	r2, r2, r2
   194dc:	subcs	r0, r0, r1, lsl #3
   194e0:	cmp	r0, r1, lsl #2
   194e4:	adc	r2, r2, r2
   194e8:	subcs	r0, r0, r1, lsl #2
   194ec:	cmp	r0, r1, lsl #1
   194f0:	adc	r2, r2, r2
   194f4:	subcs	r0, r0, r1, lsl #1
   194f8:	cmp	r0, r1
   194fc:	adc	r2, r2, r2
   19500:	subcs	r0, r0, r1
   19504:	mov	r0, r2
   19508:	bx	lr
   1950c:	moveq	r0, #1
   19510:	movne	r0, #0
   19514:	bx	lr
   19518:	clz	r2, r1
   1951c:	rsb	r2, r2, #31
   19520:	lsr	r0, r0, r2
   19524:	bx	lr
   19528:	cmp	r0, #0
   1952c:	mvnne	r0, #0
   19530:	b	197d0 <__assert_fail@plt+0x8628>
   19534:	cmp	r1, #0
   19538:	beq	19528 <__assert_fail@plt+0x8380>
   1953c:	push	{r0, r1, lr}
   19540:	bl	19348 <__assert_fail@plt+0x81a0>
   19544:	pop	{r1, r2, lr}
   19548:	mul	r3, r2, r0
   1954c:	sub	r1, r1, r3
   19550:	bx	lr
   19554:	cmp	r1, #0
   19558:	beq	19764 <__assert_fail@plt+0x85bc>
   1955c:	eor	ip, r0, r1
   19560:	rsbmi	r1, r1, #0
   19564:	subs	r2, r1, #1
   19568:	beq	19730 <__assert_fail@plt+0x8588>
   1956c:	movs	r3, r0
   19570:	rsbmi	r3, r0, #0
   19574:	cmp	r3, r1
   19578:	bls	1973c <__assert_fail@plt+0x8594>
   1957c:	tst	r1, r2
   19580:	beq	1974c <__assert_fail@plt+0x85a4>
   19584:	clz	r2, r3
   19588:	clz	r0, r1
   1958c:	sub	r2, r0, r2
   19590:	rsbs	r2, r2, #31
   19594:	addne	r2, r2, r2, lsl #1
   19598:	mov	r0, #0
   1959c:	addne	pc, pc, r2, lsl #2
   195a0:	nop			; (mov r0, r0)
   195a4:	cmp	r3, r1, lsl #31
   195a8:	adc	r0, r0, r0
   195ac:	subcs	r3, r3, r1, lsl #31
   195b0:	cmp	r3, r1, lsl #30
   195b4:	adc	r0, r0, r0
   195b8:	subcs	r3, r3, r1, lsl #30
   195bc:	cmp	r3, r1, lsl #29
   195c0:	adc	r0, r0, r0
   195c4:	subcs	r3, r3, r1, lsl #29
   195c8:	cmp	r3, r1, lsl #28
   195cc:	adc	r0, r0, r0
   195d0:	subcs	r3, r3, r1, lsl #28
   195d4:	cmp	r3, r1, lsl #27
   195d8:	adc	r0, r0, r0
   195dc:	subcs	r3, r3, r1, lsl #27
   195e0:	cmp	r3, r1, lsl #26
   195e4:	adc	r0, r0, r0
   195e8:	subcs	r3, r3, r1, lsl #26
   195ec:	cmp	r3, r1, lsl #25
   195f0:	adc	r0, r0, r0
   195f4:	subcs	r3, r3, r1, lsl #25
   195f8:	cmp	r3, r1, lsl #24
   195fc:	adc	r0, r0, r0
   19600:	subcs	r3, r3, r1, lsl #24
   19604:	cmp	r3, r1, lsl #23
   19608:	adc	r0, r0, r0
   1960c:	subcs	r3, r3, r1, lsl #23
   19610:	cmp	r3, r1, lsl #22
   19614:	adc	r0, r0, r0
   19618:	subcs	r3, r3, r1, lsl #22
   1961c:	cmp	r3, r1, lsl #21
   19620:	adc	r0, r0, r0
   19624:	subcs	r3, r3, r1, lsl #21
   19628:	cmp	r3, r1, lsl #20
   1962c:	adc	r0, r0, r0
   19630:	subcs	r3, r3, r1, lsl #20
   19634:	cmp	r3, r1, lsl #19
   19638:	adc	r0, r0, r0
   1963c:	subcs	r3, r3, r1, lsl #19
   19640:	cmp	r3, r1, lsl #18
   19644:	adc	r0, r0, r0
   19648:	subcs	r3, r3, r1, lsl #18
   1964c:	cmp	r3, r1, lsl #17
   19650:	adc	r0, r0, r0
   19654:	subcs	r3, r3, r1, lsl #17
   19658:	cmp	r3, r1, lsl #16
   1965c:	adc	r0, r0, r0
   19660:	subcs	r3, r3, r1, lsl #16
   19664:	cmp	r3, r1, lsl #15
   19668:	adc	r0, r0, r0
   1966c:	subcs	r3, r3, r1, lsl #15
   19670:	cmp	r3, r1, lsl #14
   19674:	adc	r0, r0, r0
   19678:	subcs	r3, r3, r1, lsl #14
   1967c:	cmp	r3, r1, lsl #13
   19680:	adc	r0, r0, r0
   19684:	subcs	r3, r3, r1, lsl #13
   19688:	cmp	r3, r1, lsl #12
   1968c:	adc	r0, r0, r0
   19690:	subcs	r3, r3, r1, lsl #12
   19694:	cmp	r3, r1, lsl #11
   19698:	adc	r0, r0, r0
   1969c:	subcs	r3, r3, r1, lsl #11
   196a0:	cmp	r3, r1, lsl #10
   196a4:	adc	r0, r0, r0
   196a8:	subcs	r3, r3, r1, lsl #10
   196ac:	cmp	r3, r1, lsl #9
   196b0:	adc	r0, r0, r0
   196b4:	subcs	r3, r3, r1, lsl #9
   196b8:	cmp	r3, r1, lsl #8
   196bc:	adc	r0, r0, r0
   196c0:	subcs	r3, r3, r1, lsl #8
   196c4:	cmp	r3, r1, lsl #7
   196c8:	adc	r0, r0, r0
   196cc:	subcs	r3, r3, r1, lsl #7
   196d0:	cmp	r3, r1, lsl #6
   196d4:	adc	r0, r0, r0
   196d8:	subcs	r3, r3, r1, lsl #6
   196dc:	cmp	r3, r1, lsl #5
   196e0:	adc	r0, r0, r0
   196e4:	subcs	r3, r3, r1, lsl #5
   196e8:	cmp	r3, r1, lsl #4
   196ec:	adc	r0, r0, r0
   196f0:	subcs	r3, r3, r1, lsl #4
   196f4:	cmp	r3, r1, lsl #3
   196f8:	adc	r0, r0, r0
   196fc:	subcs	r3, r3, r1, lsl #3
   19700:	cmp	r3, r1, lsl #2
   19704:	adc	r0, r0, r0
   19708:	subcs	r3, r3, r1, lsl #2
   1970c:	cmp	r3, r1, lsl #1
   19710:	adc	r0, r0, r0
   19714:	subcs	r3, r3, r1, lsl #1
   19718:	cmp	r3, r1
   1971c:	adc	r0, r0, r0
   19720:	subcs	r3, r3, r1
   19724:	cmp	ip, #0
   19728:	rsbmi	r0, r0, #0
   1972c:	bx	lr
   19730:	teq	ip, r0
   19734:	rsbmi	r0, r0, #0
   19738:	bx	lr
   1973c:	movcc	r0, #0
   19740:	asreq	r0, ip, #31
   19744:	orreq	r0, r0, #1
   19748:	bx	lr
   1974c:	clz	r2, r1
   19750:	rsb	r2, r2, #31
   19754:	cmp	ip, #0
   19758:	lsr	r0, r3, r2
   1975c:	rsbmi	r0, r0, #0
   19760:	bx	lr
   19764:	cmp	r0, #0
   19768:	mvngt	r0, #-2147483648	; 0x80000000
   1976c:	movlt	r0, #-2147483648	; 0x80000000
   19770:	b	197d0 <__assert_fail@plt+0x8628>
   19774:	cmp	r1, #0
   19778:	beq	19764 <__assert_fail@plt+0x85bc>
   1977c:	push	{r0, r1, lr}
   19780:	bl	1955c <__assert_fail@plt+0x83b4>
   19784:	pop	{r1, r2, lr}
   19788:	mul	r3, r2, r0
   1978c:	sub	r1, r1, r3
   19790:	bx	lr
   19794:	cmp	r3, #0
   19798:	cmpeq	r2, #0
   1979c:	bne	197b4 <__assert_fail@plt+0x860c>
   197a0:	cmp	r1, #0
   197a4:	cmpeq	r0, #0
   197a8:	mvnne	r1, #0
   197ac:	mvnne	r0, #0
   197b0:	b	197d0 <__assert_fail@plt+0x8628>
   197b4:	sub	sp, sp, #8
   197b8:	push	{sp, lr}
   197bc:	bl	197e0 <__assert_fail@plt+0x8638>
   197c0:	ldr	lr, [sp, #4]
   197c4:	add	sp, sp, #8
   197c8:	pop	{r2, r3}
   197cc:	bx	lr
   197d0:	push	{r1, lr}
   197d4:	mov	r0, #8
   197d8:	bl	10ed8 <raise@plt>
   197dc:	pop	{r1, pc}
   197e0:	cmp	r1, r3
   197e4:	push	{r4, r5, r6, r7, r8, r9, lr}
   197e8:	cmpeq	r0, r2
   197ec:	mov	r4, r0
   197f0:	mov	r5, r1
   197f4:	ldr	r9, [sp, #28]
   197f8:	movcc	r0, #0
   197fc:	movcc	r1, #0
   19800:	bcc	198f8 <__assert_fail@plt+0x8750>
   19804:	cmp	r3, #0
   19808:	clzeq	ip, r2
   1980c:	clzne	ip, r3
   19810:	addeq	ip, ip, #32
   19814:	cmp	r5, #0
   19818:	clzeq	r1, r4
   1981c:	addeq	r1, r1, #32
   19820:	clzne	r1, r5
   19824:	sub	ip, ip, r1
   19828:	sub	lr, ip, #32
   1982c:	lsl	r7, r3, ip
   19830:	rsb	r8, ip, #32
   19834:	orr	r7, r7, r2, lsl lr
   19838:	orr	r7, r7, r2, lsr r8
   1983c:	lsl	r6, r2, ip
   19840:	cmp	r5, r7
   19844:	cmpeq	r4, r6
   19848:	movcc	r0, #0
   1984c:	movcc	r1, #0
   19850:	bcc	1986c <__assert_fail@plt+0x86c4>
   19854:	mov	r3, #1
   19858:	subs	r4, r4, r6
   1985c:	lsl	r1, r3, lr
   19860:	lsl	r0, r3, ip
   19864:	orr	r1, r1, r3, lsr r8
   19868:	sbc	r5, r5, r7
   1986c:	cmp	ip, #0
   19870:	beq	198f8 <__assert_fail@plt+0x8750>
   19874:	lsrs	r3, r7, #1
   19878:	rrx	r2, r6
   1987c:	mov	r6, ip
   19880:	b	198a4 <__assert_fail@plt+0x86fc>
   19884:	subs	r4, r4, r2
   19888:	sbc	r5, r5, r3
   1988c:	adds	r4, r4, r4
   19890:	adc	r5, r5, r5
   19894:	adds	r4, r4, #1
   19898:	adc	r5, r5, #0
   1989c:	subs	r6, r6, #1
   198a0:	beq	198c0 <__assert_fail@plt+0x8718>
   198a4:	cmp	r5, r3
   198a8:	cmpeq	r4, r2
   198ac:	bcs	19884 <__assert_fail@plt+0x86dc>
   198b0:	adds	r4, r4, r4
   198b4:	adc	r5, r5, r5
   198b8:	subs	r6, r6, #1
   198bc:	bne	198a4 <__assert_fail@plt+0x86fc>
   198c0:	lsr	r6, r4, ip
   198c4:	lsr	r7, r5, ip
   198c8:	orr	r6, r6, r5, lsl r8
   198cc:	adds	r2, r0, r4
   198d0:	orr	r6, r6, r5, lsr lr
   198d4:	adc	r3, r1, r5
   198d8:	lsl	r1, r7, ip
   198dc:	orr	r1, r1, r6, lsl lr
   198e0:	lsl	r0, r6, ip
   198e4:	orr	r1, r1, r6, lsr r8
   198e8:	subs	r0, r2, r0
   198ec:	mov	r4, r6
   198f0:	mov	r5, r7
   198f4:	sbc	r1, r3, r1
   198f8:	cmp	r9, #0
   198fc:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   19900:	strd	r4, [r9]
   19904:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19908:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1990c:	mov	r7, r0
   19910:	ldr	r6, [pc, #72]	; 19960 <__assert_fail@plt+0x87b8>
   19914:	ldr	r5, [pc, #72]	; 19964 <__assert_fail@plt+0x87bc>
   19918:	add	r6, pc, r6
   1991c:	add	r5, pc, r5
   19920:	sub	r6, r6, r5
   19924:	mov	r8, r1
   19928:	mov	r9, r2
   1992c:	bl	10e94 <calloc@plt-0x20>
   19930:	asrs	r6, r6, #2
   19934:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19938:	mov	r4, #0
   1993c:	add	r4, r4, #1
   19940:	ldr	r3, [r5], #4
   19944:	mov	r2, r9
   19948:	mov	r1, r8
   1994c:	mov	r0, r7
   19950:	blx	r3
   19954:	cmp	r6, r4
   19958:	bne	1993c <__assert_fail@plt+0x8794>
   1995c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19960:	strdeq	r1, [r1], -r0
   19964:	andeq	r1, r1, r8, ror #11
   19968:	bx	lr
   1996c:	ldr	r3, [pc, #12]	; 19980 <__assert_fail@plt+0x87d8>
   19970:	mov	r1, #0
   19974:	add	r3, pc, r3
   19978:	ldr	r2, [r3]
   1997c:	b	110ac <__cxa_atexit@plt>
   19980:	muleq	r1, r8, r7

Disassembly of section .fini:

00019984 <.fini>:
   19984:	push	{r3, lr}
   19988:	pop	{r3, pc}
