
../repos/coreutils/src/who:     file format elf32-littlearm


Disassembly of section .init:

00010e78 <.init>:
   10e78:	push	{r3, lr}
   10e7c:	bl	111d4 <__assert_fail@plt+0x48>
   10e80:	pop	{r3, pc}

Disassembly of section .plt:

00010e84 <calloc@plt-0x14>:
   10e84:	push	{lr}		; (str lr, [sp, #-4]!)
   10e88:	ldr	lr, [pc, #4]	; 10e94 <calloc@plt-0x4>
   10e8c:	add	lr, pc, lr
   10e90:	ldr	pc, [lr, #8]!
   10e94:	andeq	r7, r1, ip, ror #2

00010e98 <calloc@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #94208	; 0x17000
   10ea0:	ldr	pc, [ip, #364]!	; 0x16c

00010ea4 <fputs_unlocked@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #94208	; 0x17000
   10eac:	ldr	pc, [ip, #356]!	; 0x164

00010eb0 <raise@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #94208	; 0x17000
   10eb8:	ldr	pc, [ip, #348]!	; 0x15c

00010ebc <strcmp@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #94208	; 0x17000
   10ec4:	ldr	pc, [ip, #340]!	; 0x154

00010ec8 <fflush@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #94208	; 0x17000
   10ed0:	ldr	pc, [ip, #332]!	; 0x14c

00010ed4 <utmpxname@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #94208	; 0x17000
   10edc:	ldr	pc, [ip, #324]!	; 0x144

00010ee0 <free@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #94208	; 0x17000
   10ee8:	ldr	pc, [ip, #316]!	; 0x13c

00010eec <gai_strerror@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #94208	; 0x17000
   10ef4:	ldr	pc, [ip, #308]!	; 0x134

00010ef8 <_exit@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #94208	; 0x17000
   10f00:	ldr	pc, [ip, #300]!	; 0x12c

00010f04 <memcpy@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #94208	; 0x17000
   10f0c:	ldr	pc, [ip, #292]!	; 0x124

00010f10 <mbsinit@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #94208	; 0x17000
   10f18:	ldr	pc, [ip, #284]!	; 0x11c

00010f1c <time@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #94208	; 0x17000
   10f24:	ldr	pc, [ip, #276]!	; 0x114

00010f28 <memcmp@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #94208	; 0x17000
   10f30:	ldr	pc, [ip, #268]!	; 0x10c

00010f34 <stpcpy@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #94208	; 0x17000
   10f3c:	ldr	pc, [ip, #260]!	; 0x104

00010f40 <fputc_unlocked@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #94208	; 0x17000
   10f48:	ldr	pc, [ip, #252]!	; 0xfc

00010f4c <dcgettext@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #94208	; 0x17000
   10f54:	ldr	pc, [ip, #244]!	; 0xf4

00010f58 <strdup@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #94208	; 0x17000
   10f60:	ldr	pc, [ip, #236]!	; 0xec

00010f64 <setutxent@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #94208	; 0x17000
   10f6c:	ldr	pc, [ip, #228]!	; 0xe4

00010f70 <realloc@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #94208	; 0x17000
   10f78:	ldr	pc, [ip, #220]!	; 0xdc

00010f7c <textdomain@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #94208	; 0x17000
   10f84:	ldr	pc, [ip, #212]!	; 0xd4

00010f88 <iswprint@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #94208	; 0x17000
   10f90:	ldr	pc, [ip, #204]!	; 0xcc

00010f94 <fwrite@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #94208	; 0x17000
   10f9c:	ldr	pc, [ip, #196]!	; 0xc4

00010fa0 <lseek64@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #94208	; 0x17000
   10fa8:	ldr	pc, [ip, #188]!	; 0xbc

00010fac <__ctype_get_mb_cur_max@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #94208	; 0x17000
   10fb4:	ldr	pc, [ip, #180]!	; 0xb4

00010fb8 <__fpending@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #94208	; 0x17000
   10fc0:	ldr	pc, [ip, #172]!	; 0xac

00010fc4 <mbrtowc@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #94208	; 0x17000
   10fcc:	ldr	pc, [ip, #164]!	; 0xa4

00010fd0 <error@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #94208	; 0x17000
   10fd8:	ldr	pc, [ip, #156]!	; 0x9c

00010fdc <__asprintf_chk@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #94208	; 0x17000
   10fe4:	ldr	pc, [ip, #148]!	; 0x94

00010fe8 <puts@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #94208	; 0x17000
   10ff0:	ldr	pc, [ip, #140]!	; 0x8c

00010ff4 <malloc@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #94208	; 0x17000
   10ffc:	ldr	pc, [ip, #132]!	; 0x84

00011000 <__libc_start_main@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #94208	; 0x17000
   11008:	ldr	pc, [ip, #124]!	; 0x7c

0001100c <strftime@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #94208	; 0x17000
   11014:	ldr	pc, [ip, #116]!	; 0x74

00011018 <__freading@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #94208	; 0x17000
   11020:	ldr	pc, [ip, #108]!	; 0x6c

00011024 <localtime@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #94208	; 0x17000
   1102c:	ldr	pc, [ip, #100]!	; 0x64

00011030 <__gmon_start__@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #94208	; 0x17000
   11038:	ldr	pc, [ip, #92]!	; 0x5c

0001103c <getopt_long@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #94208	; 0x17000
   11044:	ldr	pc, [ip, #84]!	; 0x54

00011048 <kill@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #94208	; 0x17000
   11050:	ldr	pc, [ip, #76]!	; 0x4c

00011054 <__ctype_b_loc@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #94208	; 0x17000
   1105c:	ldr	pc, [ip, #68]!	; 0x44

00011060 <exit@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #94208	; 0x17000
   11068:	ldr	pc, [ip, #60]!	; 0x3c

0001106c <ttyname@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #94208	; 0x17000
   11074:	ldr	pc, [ip, #52]!	; 0x34

00011078 <strlen@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #94208	; 0x17000
   11080:	ldr	pc, [ip, #44]!	; 0x2c

00011084 <strchr@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #94208	; 0x17000
   1108c:	ldr	pc, [ip, #36]!	; 0x24

00011090 <__errno_location@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #94208	; 0x17000
   11098:	ldr	pc, [ip, #28]!

0001109c <__sprintf_chk@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #94208	; 0x17000
   110a4:	ldr	pc, [ip, #20]!

000110a8 <__cxa_atexit@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #94208	; 0x17000
   110b0:	ldr	pc, [ip, #12]!

000110b4 <memset@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #94208	; 0x17000
   110bc:	ldr	pc, [ip, #4]!

000110c0 <strncpy@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #90112	; 0x16000
   110c8:	ldr	pc, [ip, #4092]!	; 0xffc

000110cc <__printf_chk@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #90112	; 0x16000
   110d4:	ldr	pc, [ip, #4084]!	; 0xff4

000110d8 <fileno@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #90112	; 0x16000
   110e0:	ldr	pc, [ip, #4076]!	; 0xfec

000110e4 <__fprintf_chk@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #90112	; 0x16000
   110ec:	ldr	pc, [ip, #4068]!	; 0xfe4

000110f0 <fclose@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #90112	; 0x16000
   110f8:	ldr	pc, [ip, #4060]!	; 0xfdc

000110fc <fseeko64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #90112	; 0x16000
   11104:	ldr	pc, [ip, #4052]!	; 0xfd4

00011108 <endutxent@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #90112	; 0x16000
   11110:	ldr	pc, [ip, #4044]!	; 0xfcc

00011114 <setlocale@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #90112	; 0x16000
   1111c:	ldr	pc, [ip, #4036]!	; 0xfc4

00011120 <strrchr@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #90112	; 0x16000
   11128:	ldr	pc, [ip, #4028]!	; 0xfbc

0001112c <nl_langinfo@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #90112	; 0x16000
   11134:	ldr	pc, [ip, #4020]!	; 0xfb4

00011138 <freeaddrinfo@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #90112	; 0x16000
   11140:	ldr	pc, [ip, #4012]!	; 0xfac

00011144 <getaddrinfo@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #90112	; 0x16000
   1114c:	ldr	pc, [ip, #4004]!	; 0xfa4

00011150 <bindtextdomain@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #90112	; 0x16000
   11158:	ldr	pc, [ip, #3996]!	; 0xf9c

0001115c <__xstat64@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #90112	; 0x16000
   11164:	ldr	pc, [ip, #3988]!	; 0xf94

00011168 <strncmp@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #90112	; 0x16000
   11170:	ldr	pc, [ip, #3980]!	; 0xf8c

00011174 <abort@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #90112	; 0x16000
   1117c:	ldr	pc, [ip, #3972]!	; 0xf84

00011180 <getutxent@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #90112	; 0x16000
   11188:	ldr	pc, [ip, #3964]!	; 0xf7c

0001118c <__assert_fail@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #90112	; 0x16000
   11194:	ldr	pc, [ip, #3956]!	; 0xf74

Disassembly of section .text:

00011198 <.text>:
   11198:	mov	fp, #0
   1119c:	mov	lr, #0
   111a0:	pop	{r1}		; (ldr r1, [sp], #4)
   111a4:	mov	r2, sp
   111a8:	push	{r2}		; (str r2, [sp, #-4]!)
   111ac:	push	{r0}		; (str r0, [sp, #-4]!)
   111b0:	ldr	ip, [pc, #16]	; 111c8 <__assert_fail@plt+0x3c>
   111b4:	push	{ip}		; (str ip, [sp, #-4]!)
   111b8:	ldr	r0, [pc, #12]	; 111cc <__assert_fail@plt+0x40>
   111bc:	ldr	r3, [pc, #12]	; 111d0 <__assert_fail@plt+0x44>
   111c0:	bl	11000 <__libc_start_main@plt>
   111c4:	bl	11174 <abort@plt>
   111c8:	andeq	r6, r1, r4, asr #11
   111cc:	andeq	r2, r1, r0, lsl #14
   111d0:	andeq	r6, r1, r4, ror #10
   111d4:	ldr	r3, [pc, #20]	; 111f0 <__assert_fail@plt+0x64>
   111d8:	ldr	r2, [pc, #20]	; 111f4 <__assert_fail@plt+0x68>
   111dc:	add	r3, pc, r3
   111e0:	ldr	r2, [r3, r2]
   111e4:	cmp	r2, #0
   111e8:	bxeq	lr
   111ec:	b	11030 <__gmon_start__@plt>
   111f0:	andeq	r6, r1, ip, lsl lr
   111f4:	andeq	r0, r0, ip, lsl #2
   111f8:	ldr	r0, [pc, #24]	; 11218 <__assert_fail@plt+0x8c>
   111fc:	ldr	r3, [pc, #24]	; 1121c <__assert_fail@plt+0x90>
   11200:	cmp	r3, r0
   11204:	bxeq	lr
   11208:	ldr	r3, [pc, #16]	; 11220 <__assert_fail@plt+0x94>
   1120c:	cmp	r3, #0
   11210:	bxeq	lr
   11214:	bx	r3
   11218:	andeq	r8, r2, r8, ror #2
   1121c:	andeq	r8, r2, r8, ror #2
   11220:	andeq	r0, r0, r0
   11224:	ldr	r0, [pc, #36]	; 11250 <__assert_fail@plt+0xc4>
   11228:	ldr	r1, [pc, #36]	; 11254 <__assert_fail@plt+0xc8>
   1122c:	sub	r1, r1, r0
   11230:	asr	r1, r1, #2
   11234:	add	r1, r1, r1, lsr #31
   11238:	asrs	r1, r1, #1
   1123c:	bxeq	lr
   11240:	ldr	r3, [pc, #16]	; 11258 <__assert_fail@plt+0xcc>
   11244:	cmp	r3, #0
   11248:	bxeq	lr
   1124c:	bx	r3
   11250:	andeq	r8, r2, r8, ror #2
   11254:	andeq	r8, r2, r8, ror #2
   11258:	andeq	r0, r0, r0
   1125c:	push	{r4, lr}
   11260:	ldr	r4, [pc, #24]	; 11280 <__assert_fail@plt+0xf4>
   11264:	ldrb	r3, [r4]
   11268:	cmp	r3, #0
   1126c:	popne	{r4, pc}
   11270:	bl	111f8 <__assert_fail@plt+0x6c>
   11274:	mov	r3, #1
   11278:	strb	r3, [r4]
   1127c:	pop	{r4, pc}
   11280:	andeq	r8, r2, r0, lsl #3
   11284:	b	11224 <__assert_fail@plt+0x98>
   11288:	strd	r4, [sp, #-20]!	; 0xffffffec
   1128c:	strd	r6, [sp, #8]
   11290:	str	lr, [sp, #16]
   11294:	sub	sp, sp, #76	; 0x4c
   11298:	mov	r6, r0
   1129c:	mov	r4, r1
   112a0:	mov	r7, r3
   112a4:	movw	r3, #33048	; 0x8118
   112a8:	movt	r3, #2
   112ac:	strb	r2, [r3, #1]
   112b0:	movw	r3, #33156	; 0x8184
   112b4:	movt	r3, #2
   112b8:	ldrb	r3, [r3]
   112bc:	cmp	r3, #0
   112c0:	beq	112e8 <__assert_fail@plt+0x15c>
   112c4:	movw	r3, #33156	; 0x8184
   112c8:	movt	r3, #2
   112cc:	ldrb	r3, [r3, #1]
   112d0:	cmp	r3, #0
   112d4:	bne	112e8 <__assert_fail@plt+0x15c>
   112d8:	ldr	r0, [sp, #104]	; 0x68
   112dc:	bl	11078 <strlen@plt>
   112e0:	cmp	r0, #6
   112e4:	bls	1141c <__assert_fail@plt+0x290>
   112e8:	mov	r3, #0
   112ec:	strb	r3, [sp, #60]	; 0x3c
   112f0:	movw	r3, #33156	; 0x8184
   112f4:	movt	r3, #2
   112f8:	ldrb	r3, [r3, #1]
   112fc:	cmp	r3, #0
   11300:	bne	11314 <__assert_fail@plt+0x188>
   11304:	ldr	r0, [sp, #108]	; 0x6c
   11308:	bl	11078 <strlen@plt>
   1130c:	cmp	r0, #11
   11310:	bls	11440 <__assert_fail@plt+0x2b4>
   11314:	mov	r3, #0
   11318:	strb	r3, [sp, #44]	; 0x2c
   1131c:	movw	r3, #33156	; 0x8184
   11320:	movt	r3, #2
   11324:	ldrb	r3, [r3, #2]
   11328:	cmp	r3, #0
   1132c:	moveq	r0, #1
   11330:	beq	11348 <__assert_fail@plt+0x1bc>
   11334:	ldr	r0, [sp, #116]	; 0x74
   11338:	bl	11078 <strlen@plt>
   1133c:	cmp	r0, #11
   11340:	addhi	r0, r0, #2
   11344:	movls	r0, #14
   11348:	bl	15a0c <__assert_fail@plt+0x4880>
   1134c:	mov	r5, r0
   11350:	movw	r3, #33156	; 0x8184
   11354:	movt	r3, #2
   11358:	ldrb	r3, [r3, #2]
   1135c:	cmp	r3, #0
   11360:	moveq	r3, #0
   11364:	strbeq	r3, [r0]
   11368:	bne	11464 <__assert_fail@plt+0x2d8>
   1136c:	movw	r3, #26448	; 0x6750
   11370:	movt	r3, #1
   11374:	cmp	r4, #0
   11378:	moveq	r4, r3
   1137c:	movw	r3, #33156	; 0x8184
   11380:	movt	r3, #2
   11384:	ldrb	r1, [r3, #3]
   11388:	movw	r3, #33048	; 0x8118
   1138c:	movt	r3, #2
   11390:	movw	r2, #28004	; 0x6d64
   11394:	movt	r2, #1
   11398:	cmp	r1, #0
   1139c:	moveq	r3, r2
   113a0:	str	r5, [sp, #36]	; 0x24
   113a4:	ldr	r2, [sp, #112]	; 0x70
   113a8:	str	r2, [sp, #32]
   113ac:	add	r2, sp, #44	; 0x2c
   113b0:	str	r2, [sp, #28]
   113b4:	add	r2, sp, #60	; 0x3c
   113b8:	str	r2, [sp, #24]
   113bc:	ldr	r2, [sp, #100]	; 0x64
   113c0:	str	r2, [sp, #20]
   113c4:	movw	r2, #33156	; 0x8184
   113c8:	movt	r2, #2
   113cc:	ldr	r2, [r2, #4]
   113d0:	str	r2, [sp, #16]
   113d4:	ldr	r2, [sp, #96]	; 0x60
   113d8:	str	r2, [sp, #12]
   113dc:	str	r7, [sp, #8]
   113e0:	str	r3, [sp, #4]
   113e4:	str	r4, [sp]
   113e8:	mov	r3, r6
   113ec:	movw	r2, #26480	; 0x6770
   113f0:	movt	r2, #1
   113f4:	mov	r1, #1
   113f8:	add	r0, sp, #68	; 0x44
   113fc:	bl	10fdc <__asprintf_chk@plt>
   11400:	cmn	r0, #1
   11404:	beq	11484 <__assert_fail@plt+0x2f8>
   11408:	ldr	r4, [sp, #68]	; 0x44
   1140c:	mov	r0, r4
   11410:	bl	11078 <strlen@plt>
   11414:	add	r0, r4, r0
   11418:	b	1148c <__assert_fail@plt+0x300>
   1141c:	ldr	r3, [sp, #104]	; 0x68
   11420:	str	r3, [sp]
   11424:	movw	r3, #26456	; 0x6758
   11428:	movt	r3, #1
   1142c:	mov	r2, #8
   11430:	mov	r1, #1
   11434:	add	r0, sp, #60	; 0x3c
   11438:	bl	1109c <__sprintf_chk@plt>
   1143c:	b	112f0 <__assert_fail@plt+0x164>
   11440:	ldr	r3, [sp, #108]	; 0x6c
   11444:	str	r3, [sp]
   11448:	movw	r3, #26464	; 0x6760
   1144c:	movt	r3, #1
   11450:	mov	r2, #13
   11454:	mov	r1, #1
   11458:	add	r0, sp, #44	; 0x2c
   1145c:	bl	1109c <__sprintf_chk@plt>
   11460:	b	1131c <__assert_fail@plt+0x190>
   11464:	ldr	r3, [sp, #116]	; 0x74
   11468:	str	r3, [sp]
   1146c:	movw	r3, #26472	; 0x6768
   11470:	movt	r3, #1
   11474:	mvn	r2, #0
   11478:	mov	r1, #1
   1147c:	bl	1109c <__sprintf_chk@plt>
   11480:	b	1136c <__assert_fail@plt+0x1e0>
   11484:	bl	15ea0 <__assert_fail@plt+0x4d14>
   11488:	mov	r0, r2
   1148c:	sub	r2, r0, #1
   11490:	ldrb	r3, [r0, #-1]
   11494:	cmp	r3, #32
   11498:	beq	11488 <__assert_fail@plt+0x2fc>
   1149c:	mov	r3, #0
   114a0:	strb	r3, [r0]
   114a4:	ldr	r0, [sp, #68]	; 0x44
   114a8:	bl	10fe8 <puts@plt>
   114ac:	ldr	r0, [sp, #68]	; 0x44
   114b0:	bl	12d14 <__assert_fail@plt+0x1b88>
   114b4:	mov	r0, r5
   114b8:	bl	12d14 <__assert_fail@plt+0x1b88>
   114bc:	add	sp, sp, #76	; 0x4c
   114c0:	ldrd	r4, [sp]
   114c4:	ldrd	r6, [sp, #8]
   114c8:	add	sp, sp, #16
   114cc:	pop	{pc}		; (ldr pc, [sp], #4)
   114d0:	strd	r4, [sp, #-16]!
   114d4:	str	r6, [sp, #8]
   114d8:	str	lr, [sp, #12]
   114dc:	mov	r4, r0
   114e0:	movw	r5, #26516	; 0x6794
   114e4:	movt	r5, #1
   114e8:	mov	r2, #5
   114ec:	mov	r1, r5
   114f0:	mov	r0, #0
   114f4:	bl	10f4c <dcgettext@plt>
   114f8:	bl	11078 <strlen@plt>
   114fc:	add	r0, r0, #5
   11500:	bl	15a0c <__assert_fail@plt+0x4880>
   11504:	mov	r6, r0
   11508:	mov	r2, #5
   1150c:	mov	r1, r5
   11510:	mov	r0, #0
   11514:	bl	10f4c <dcgettext@plt>
   11518:	mov	r1, r0
   1151c:	mov	r0, r6
   11520:	bl	10f34 <stpcpy@plt>
   11524:	ldrb	r2, [r4, #40]	; 0x28
   11528:	cmp	r2, #0
   1152c:	beq	11550 <__assert_fail@plt+0x3c4>
   11530:	add	r1, r4, #44	; 0x2c
   11534:	add	r3, r4, #41	; 0x29
   11538:	strb	r2, [r0], #1
   1153c:	cmp	r1, r3
   11540:	bls	11550 <__assert_fail@plt+0x3c4>
   11544:	ldrb	r2, [r3], #1
   11548:	cmp	r2, #0
   1154c:	bne	11538 <__assert_fail@plt+0x3ac>
   11550:	mov	r3, #0
   11554:	strb	r3, [r0]
   11558:	mov	r0, r6
   1155c:	ldrd	r4, [sp]
   11560:	ldr	r6, [sp, #8]
   11564:	add	sp, sp, #12
   11568:	pop	{pc}		; (ldr pc, [sp], #4)
   1156c:	str	r4, [sp, #-8]!
   11570:	str	lr, [sp, #4]
   11574:	sub	sp, sp, #8
   11578:	ldr	r3, [r0, #340]	; 0x154
   1157c:	str	r3, [sp, #4]
   11580:	add	r0, sp, #4
   11584:	bl	11024 <localtime@plt>
   11588:	subs	r3, r0, #0
   1158c:	beq	115c0 <__assert_fail@plt+0x434>
   11590:	movw	r2, #33156	; 0x8184
   11594:	movt	r2, #2
   11598:	add	r4, r2, #8
   1159c:	ldr	r2, [r2, #44]	; 0x2c
   115a0:	mov	r1, #33	; 0x21
   115a4:	mov	r0, r4
   115a8:	bl	1100c <strftime@plt>
   115ac:	mov	r0, r4
   115b0:	add	sp, sp, #8
   115b4:	ldr	r4, [sp]
   115b8:	add	sp, sp, #4
   115bc:	pop	{pc}		; (ldr pc, [sp], #4)
   115c0:	ldr	r2, [pc, #12]	; 115d4 <__assert_fail@plt+0x448>
   115c4:	ldr	r0, [sp, #4]
   115c8:	asr	r1, r0, #31
   115cc:	bl	12dd0 <__assert_fail@plt+0x1c44>
   115d0:	b	115b0 <__assert_fail@plt+0x424>
   115d4:	andeq	r8, r2, ip, lsl #3
   115d8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   115dc:	strd	r6, [sp, #8]
   115e0:	strd	r8, [sp, #16]
   115e4:	str	lr, [sp, #24]
   115e8:	sub	sp, sp, #452	; 0x1c4
   115ec:	mov	r4, r0
   115f0:	mov	r7, r1
   115f4:	ldr	r3, [r0, #4]
   115f8:	str	r3, [sp]
   115fc:	movw	r3, #26528	; 0x67a0
   11600:	movt	r3, #1
   11604:	mov	r2, #12
   11608:	mov	r1, #1
   1160c:	add	r0, sp, #284	; 0x11c
   11610:	bl	1109c <__sprintf_chk@plt>
   11614:	ldrb	r3, [r4, #8]
   11618:	cmp	r3, #47	; 0x2f
   1161c:	addeq	r1, sp, #296	; 0x128
   11620:	bne	11798 <__assert_fail@plt+0x60c>
   11624:	add	r5, r4, #8
   11628:	add	r0, r4, #40	; 0x28
   1162c:	ldrb	r3, [r4, #8]
   11630:	cmp	r3, #0
   11634:	beq	11654 <__assert_fail@plt+0x4c8>
   11638:	add	r2, r4, #9
   1163c:	strb	r3, [r1], #1
   11640:	cmp	r0, r2
   11644:	bls	11654 <__assert_fail@plt+0x4c8>
   11648:	ldrb	r3, [r2], #1
   1164c:	cmp	r3, #0
   11650:	bne	1163c <__assert_fail@plt+0x4b0>
   11654:	mov	r3, #0
   11658:	strb	r3, [r1]
   1165c:	add	r2, sp, #344	; 0x158
   11660:	add	r1, sp, #296	; 0x128
   11664:	mov	r0, #3
   11668:	bl	1115c <__xstat64@plt>
   1166c:	cmp	r0, #0
   11670:	bne	11904 <__assert_fail@plt+0x778>
   11674:	ldr	r3, [sp, #360]	; 0x168
   11678:	and	r3, r3, #16
   1167c:	cmp	r3, #0
   11680:	movne	r6, #43	; 0x2b
   11684:	moveq	r6, #45	; 0x2d
   11688:	ldr	r8, [sp, #416]	; 0x1a0
   1168c:	cmp	r8, #0
   11690:	bne	117c0 <__assert_fail@plt+0x634>
   11694:	movw	r3, #8224	; 0x2020
   11698:	movt	r3, #63	; 0x3f
   1169c:	str	r3, [sp, #336]	; 0x150
   116a0:	ldrb	r3, [r4, #76]	; 0x4c
   116a4:	cmp	r3, #0
   116a8:	beq	1195c <__assert_fail@plt+0x7d0>
   116ac:	add	r0, r4, #332	; 0x14c
   116b0:	beq	1190c <__assert_fail@plt+0x780>
   116b4:	add	r2, r4, #77	; 0x4d
   116b8:	add	r1, sp, #24
   116bc:	strb	r3, [r1], #1
   116c0:	cmp	r0, r2
   116c4:	bls	116d4 <__assert_fail@plt+0x548>
   116c8:	ldrb	r3, [r2], #1
   116cc:	cmp	r3, #0
   116d0:	bne	116bc <__assert_fail@plt+0x530>
   116d4:	mov	r3, #0
   116d8:	strb	r3, [r1]
   116dc:	mov	r1, #58	; 0x3a
   116e0:	add	r0, sp, #24
   116e4:	bl	11084 <strchr@plt>
   116e8:	subs	r7, r0, #0
   116ec:	beq	11a28 <__assert_fail@plt+0x89c>
   116f0:	mov	r3, #0
   116f4:	strb	r3, [r7], #1
   116f8:	ldrb	r3, [sp, #24]
   116fc:	cmp	r3, #0
   11700:	addeq	r8, sp, #24
   11704:	beq	11720 <__assert_fail@plt+0x594>
   11708:	movw	r3, #33156	; 0x8184
   1170c:	movt	r3, #2
   11710:	ldrb	r3, [r3, #54]	; 0x36
   11714:	cmp	r3, #0
   11718:	addeq	r8, sp, #24
   1171c:	bne	11a98 <__assert_fail@plt+0x90c>
   11720:	cmp	r7, #0
   11724:	beq	11a38 <__assert_fail@plt+0x8ac>
   11728:	mov	r0, r8
   1172c:	bl	11078 <strlen@plt>
   11730:	mov	r9, r0
   11734:	mov	r0, r7
   11738:	bl	11078 <strlen@plt>
   1173c:	add	r0, r9, r0
   11740:	add	r0, r0, #4
   11744:	movw	r3, #33156	; 0x8184
   11748:	movt	r3, #2
   1174c:	ldr	r3, [r3, #56]	; 0x38
   11750:	cmp	r0, r3
   11754:	bhi	11914 <__assert_fail@plt+0x788>
   11758:	movw	r0, #33156	; 0x8184
   1175c:	movt	r0, #2
   11760:	str	r7, [sp, #4]
   11764:	str	r8, [sp]
   11768:	movw	r3, #26612	; 0x67f4
   1176c:	movt	r3, #1
   11770:	mvn	r2, #0
   11774:	mov	r1, #1
   11778:	ldr	r0, [r0, #60]	; 0x3c
   1177c:	bl	1109c <__sprintf_chk@plt>
   11780:	add	r3, sp, #24
   11784:	cmp	r8, r3
   11788:	beq	11984 <__assert_fail@plt+0x7f8>
   1178c:	mov	r0, r8
   11790:	bl	12d14 <__assert_fail@plt+0x1b88>
   11794:	b	11984 <__assert_fail@plt+0x7f8>
   11798:	movw	r3, #26532	; 0x67a4
   1179c:	movt	r3, #1
   117a0:	ldr	r2, [r3]
   117a4:	str	r2, [sp, #296]	; 0x128
   117a8:	ldrh	r3, [r3, #4]
   117ac:	add	r2, sp, #300	; 0x12c
   117b0:	strh	r3, [r2]
   117b4:	add	r1, sp, #300	; 0x12c
   117b8:	add	r1, r1, #1
   117bc:	b	11624 <__assert_fail@plt+0x498>
   117c0:	movw	r3, #33048	; 0x8118
   117c4:	movt	r3, #2
   117c8:	ldr	r3, [r3, #4]
   117cc:	cmp	r3, #-2147483648	; 0x80000000
   117d0:	beq	1184c <__assert_fail@plt+0x6c0>
   117d4:	cmp	r8, r7
   117d8:	ble	11810 <__assert_fail@plt+0x684>
   117dc:	movw	r3, #33048	; 0x8118
   117e0:	movt	r3, #2
   117e4:	ldr	r2, [r3, #4]
   117e8:	movw	r1, #44673	; 0xae81
   117ec:	movt	r1, #65534	; 0xfffe
   117f0:	add	r1, r2, r1
   117f4:	cmp	r8, r1
   117f8:	movlt	r3, #0
   117fc:	movge	r3, #1
   11800:	cmp	r8, r2
   11804:	movgt	r3, #0
   11808:	cmp	r3, #0
   1180c:	bne	11858 <__assert_fail@plt+0x6cc>
   11810:	mov	r2, #5
   11814:	movw	r1, #26596	; 0x67e4
   11818:	movt	r1, #1
   1181c:	mov	r0, #0
   11820:	bl	10f4c <dcgettext@plt>
   11824:	str	r0, [sp, #4]
   11828:	mov	r3, #6
   1182c:	str	r3, [sp]
   11830:	movw	r3, #26604	; 0x67ec
   11834:	movt	r3, #1
   11838:	mov	r2, #7
   1183c:	mov	r1, #1
   11840:	add	r0, sp, #336	; 0x150
   11844:	bl	1109c <__sprintf_chk@plt>
   11848:	b	116a0 <__assert_fail@plt+0x514>
   1184c:	ldr	r0, [pc, #600]	; 11aac <__assert_fail@plt+0x920>
   11850:	bl	10f1c <time@plt>
   11854:	b	117d4 <__assert_fail@plt+0x648>
   11858:	sub	r2, r2, r8
   1185c:	cmp	r2, #59	; 0x3b
   11860:	ble	118f8 <__assert_fail@plt+0x76c>
   11864:	movw	r3, #20863	; 0x517f
   11868:	movt	r3, #1
   1186c:	cmp	r2, r3
   11870:	bgt	118d8 <__assert_fail@plt+0x74c>
   11874:	ldr	r7, [pc, #564]	; 11ab0 <__assert_fail@plt+0x924>
   11878:	movw	r3, #46021	; 0xb3c5
   1187c:	movt	r3, #37282	; 0x91a2
   11880:	smull	r1, r3, r3, r2
   11884:	add	r3, r3, r2
   11888:	asr	r1, r2, #31
   1188c:	rsb	r1, r1, r3, asr #11
   11890:	mov	r3, #3600	; 0xe10
   11894:	mls	r2, r3, r1, r2
   11898:	movw	r3, #34953	; 0x8889
   1189c:	movt	r3, #34952	; 0x8888
   118a0:	smull	r0, r3, r3, r2
   118a4:	add	r3, r3, r2
   118a8:	asr	r2, r2, #31
   118ac:	rsb	r3, r2, r3, asr #5
   118b0:	str	r3, [sp, #4]
   118b4:	str	r1, [sp]
   118b8:	movw	r3, #26584	; 0x67d8
   118bc:	movt	r3, #1
   118c0:	mov	r2, #6
   118c4:	mov	r1, #1
   118c8:	mov	r0, r7
   118cc:	bl	1109c <__sprintf_chk@plt>
   118d0:	mov	r0, r7
   118d4:	b	11824 <__assert_fail@plt+0x698>
   118d8:	movw	r3, #26092	; 0x65ec
   118dc:	movt	r3, #1
   118e0:	mov	r2, #205	; 0xcd
   118e4:	movw	r1, #26540	; 0x67ac
   118e8:	movt	r1, #1
   118ec:	movw	r0, #26552	; 0x67b8
   118f0:	movt	r0, #1
   118f4:	bl	1118c <__assert_fail@plt>
   118f8:	movw	r0, #26520	; 0x6798
   118fc:	movt	r0, #1
   11900:	b	11824 <__assert_fail@plt+0x698>
   11904:	mov	r6, #63	; 0x3f
   11908:	b	11694 <__assert_fail@plt+0x508>
   1190c:	add	r1, sp, #24
   11910:	b	116d4 <__assert_fail@plt+0x548>
   11914:	movw	r9, #33156	; 0x8184
   11918:	movt	r9, #2
   1191c:	str	r0, [r9, #56]	; 0x38
   11920:	ldr	r0, [r9, #60]	; 0x3c
   11924:	bl	12d14 <__assert_fail@plt+0x1b88>
   11928:	ldr	r0, [r9, #56]	; 0x38
   1192c:	bl	15a0c <__assert_fail@plt+0x4880>
   11930:	str	r0, [r9, #60]	; 0x3c
   11934:	b	11758 <__assert_fail@plt+0x5cc>
   11938:	movw	r7, #33156	; 0x8184
   1193c:	movt	r7, #2
   11940:	str	r0, [r7, #56]	; 0x38
   11944:	ldr	r0, [r7, #60]	; 0x3c
   11948:	bl	12d14 <__assert_fail@plt+0x1b88>
   1194c:	ldr	r0, [r7, #56]	; 0x38
   11950:	bl	15a0c <__assert_fail@plt+0x4880>
   11954:	str	r0, [r7, #60]	; 0x3c
   11958:	b	11a58 <__assert_fail@plt+0x8cc>
   1195c:	movw	r3, #33156	; 0x8184
   11960:	movt	r3, #2
   11964:	ldr	r3, [r3, #56]	; 0x38
   11968:	cmp	r3, #0
   1196c:	beq	11a00 <__assert_fail@plt+0x874>
   11970:	movw	r3, #33156	; 0x8184
   11974:	movt	r3, #2
   11978:	ldr	r3, [r3, #60]	; 0x3c
   1197c:	mov	r2, #0
   11980:	strb	r2, [r3]
   11984:	add	r7, r4, #44	; 0x2c
   11988:	mov	r0, r4
   1198c:	bl	1156c <__assert_fail@plt+0x3e0>
   11990:	movw	r3, #33156	; 0x8184
   11994:	movt	r3, #2
   11998:	ldr	r3, [r3, #60]	; 0x3c
   1199c:	movw	r2, #28004	; 0x6d64
   119a0:	movt	r2, #1
   119a4:	cmp	r3, #0
   119a8:	moveq	r3, r2
   119ac:	movw	r2, #28004	; 0x6d64
   119b0:	movt	r2, #1
   119b4:	str	r2, [sp, #20]
   119b8:	str	r3, [sp, #16]
   119bc:	add	r3, sp, #284	; 0x11c
   119c0:	str	r3, [sp, #12]
   119c4:	add	r3, sp, #336	; 0x150
   119c8:	str	r3, [sp, #8]
   119cc:	str	r0, [sp, #4]
   119d0:	str	r5, [sp]
   119d4:	mov	r3, #32
   119d8:	mov	r2, r6
   119dc:	mov	r1, r7
   119e0:	mov	r0, r3
   119e4:	bl	11288 <__assert_fail@plt+0xfc>
   119e8:	add	sp, sp, #452	; 0x1c4
   119ec:	ldrd	r4, [sp]
   119f0:	ldrd	r6, [sp, #8]
   119f4:	ldrd	r8, [sp, #16]
   119f8:	add	sp, sp, #24
   119fc:	pop	{pc}		; (ldr pc, [sp], #4)
   11a00:	movw	r7, #33156	; 0x8184
   11a04:	movt	r7, #2
   11a08:	mov	r3, #1
   11a0c:	str	r3, [r7, #56]	; 0x38
   11a10:	ldr	r0, [r7, #60]	; 0x3c
   11a14:	bl	12d14 <__assert_fail@plt+0x1b88>
   11a18:	ldr	r0, [r7, #56]	; 0x38
   11a1c:	bl	15a0c <__assert_fail@plt+0x4880>
   11a20:	str	r0, [r7, #60]	; 0x3c
   11a24:	b	11970 <__assert_fail@plt+0x7e4>
   11a28:	ldrb	r3, [sp, #24]
   11a2c:	cmp	r3, #0
   11a30:	addeq	r8, sp, #24
   11a34:	bne	11a80 <__assert_fail@plt+0x8f4>
   11a38:	mov	r0, r8
   11a3c:	bl	11078 <strlen@plt>
   11a40:	add	r0, r0, #3
   11a44:	movw	r3, #33156	; 0x8184
   11a48:	movt	r3, #2
   11a4c:	ldr	r3, [r3, #56]	; 0x38
   11a50:	cmp	r0, r3
   11a54:	bhi	11938 <__assert_fail@plt+0x7ac>
   11a58:	movw	r0, #33156	; 0x8184
   11a5c:	movt	r0, #2
   11a60:	str	r8, [sp]
   11a64:	movw	r3, #26620	; 0x67fc
   11a68:	movt	r3, #1
   11a6c:	mvn	r2, #0
   11a70:	mov	r1, #1
   11a74:	ldr	r0, [r0, #60]	; 0x3c
   11a78:	bl	1109c <__sprintf_chk@plt>
   11a7c:	b	11780 <__assert_fail@plt+0x5f4>
   11a80:	movw	r3, #33156	; 0x8184
   11a84:	movt	r3, #2
   11a88:	ldrb	r3, [r3, #54]	; 0x36
   11a8c:	cmp	r3, #0
   11a90:	addeq	r8, sp, #24
   11a94:	beq	11a38 <__assert_fail@plt+0x8ac>
   11a98:	add	r0, sp, #24
   11a9c:	bl	12ba0 <__assert_fail@plt+0x1a14>
   11aa0:	subs	r8, r0, #0
   11aa4:	addeq	r8, sp, #24
   11aa8:	b	11720 <__assert_fail@plt+0x594>
   11aac:	andeq	r8, r2, ip, lsl r1
   11ab0:			; <UNDEFINED> instruction: 0x000281b4
   11ab4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11ab8:	strd	r6, [sp, #8]
   11abc:	strd	r8, [sp, #16]
   11ac0:	strd	sl, [sp, #24]
   11ac4:	str	lr, [sp, #32]
   11ac8:	sub	sp, sp, #76	; 0x4c
   11acc:	mov	r4, r0
   11ad0:	mov	r3, r1
   11ad4:	add	r2, sp, #64	; 0x40
   11ad8:	add	r1, sp, #68	; 0x44
   11adc:	bl	15270 <__assert_fail@plt+0x40e4>
   11ae0:	cmp	r0, #0
   11ae4:	bne	11b34 <__assert_fail@plt+0x9a8>
   11ae8:	movw	r3, #33156	; 0x8184
   11aec:	movt	r3, #2
   11af0:	ldrb	r3, [r3, #64]	; 0x40
   11af4:	cmp	r3, #0
   11af8:	beq	11c08 <__assert_fail@plt+0xa7c>
   11afc:	ldr	r6, [sp, #68]	; 0x44
   11b00:	ldr	r4, [sp, #64]	; 0x40
   11b04:	sub	r5, r6, #1
   11b08:	cmp	r6, #0
   11b0c:	beq	11bc0 <__assert_fail@plt+0xa34>
   11b10:	mov	r6, #0
   11b14:	movw	r7, #28004	; 0x6d64
   11b18:	movt	r7, #1
   11b1c:	movw	r9, #26628	; 0x6804
   11b20:	movt	r9, #1
   11b24:	mov	sl, #1
   11b28:	movw	r8, #26524	; 0x679c
   11b2c:	movt	r8, #1
   11b30:	b	11ba4 <__assert_fail@plt+0xa18>
   11b34:	bl	11090 <__errno_location@plt>
   11b38:	ldr	r5, [r0]
   11b3c:	mov	r2, r4
   11b40:	mov	r1, #3
   11b44:	mov	r0, #0
   11b48:	bl	14ff8 <__assert_fail@plt+0x3e6c>
   11b4c:	mov	r3, r0
   11b50:	movw	r2, #28696	; 0x7018
   11b54:	movt	r2, #1
   11b58:	mov	r1, r5
   11b5c:	mov	r0, #1
   11b60:	bl	10fd0 <error@plt>
   11b64:	mov	r0, r4
   11b68:	bl	151e4 <__assert_fail@plt+0x4058>
   11b6c:	mov	fp, r0
   11b70:	mov	r3, r0
   11b74:	mov	r2, r7
   11b78:	mov	r1, r9
   11b7c:	mov	r0, sl
   11b80:	bl	110cc <__printf_chk@plt>
   11b84:	mov	r0, fp
   11b88:	bl	12d14 <__assert_fail@plt+0x1b88>
   11b8c:	add	r6, r6, #1
   11b90:	mov	r7, r8
   11b94:	add	r4, r4, #384	; 0x180
   11b98:	sub	r5, r5, #1
   11b9c:	cmn	r5, #1
   11ba0:	beq	11bc0 <__assert_fail@plt+0xa34>
   11ba4:	ldrb	r3, [r4, #44]	; 0x2c
   11ba8:	cmp	r3, #0
   11bac:	beq	11b94 <__assert_fail@plt+0xa08>
   11bb0:	ldrsh	r3, [r4]
   11bb4:	cmp	r3, #7
   11bb8:	bne	11b94 <__assert_fail@plt+0xa08>
   11bbc:	b	11b64 <__assert_fail@plt+0x9d8>
   11bc0:	mov	r2, #5
   11bc4:	movw	r1, #26636	; 0x680c
   11bc8:	movt	r1, #1
   11bcc:	mov	r0, #0
   11bd0:	bl	10f4c <dcgettext@plt>
   11bd4:	mov	r2, r6
   11bd8:	mov	r1, r0
   11bdc:	mov	r0, #1
   11be0:	bl	110cc <__printf_chk@plt>
   11be4:	ldr	r0, [sp, #64]	; 0x40
   11be8:	bl	12d14 <__assert_fail@plt+0x1b88>
   11bec:	add	sp, sp, #76	; 0x4c
   11bf0:	ldrd	r4, [sp]
   11bf4:	ldrd	r6, [sp, #8]
   11bf8:	ldrd	r8, [sp, #16]
   11bfc:	ldrd	sl, [sp, #24]
   11c00:	add	sp, sp, #32
   11c04:	pop	{pc}		; (ldr pc, [sp], #4)
   11c08:	ldr	r5, [sp, #68]	; 0x44
   11c0c:	ldr	r4, [sp, #64]	; 0x40
   11c10:	movw	r3, #33156	; 0x8184
   11c14:	movt	r3, #2
   11c18:	ldrb	r3, [r3, #65]	; 0x41
   11c1c:	cmp	r3, #0
   11c20:	bne	11c78 <__assert_fail@plt+0xaec>
   11c24:	movw	r3, #33156	; 0x8184
   11c28:	movt	r3, #2
   11c2c:	ldrb	r3, [r3, #66]	; 0x42
   11c30:	cmp	r3, #0
   11c34:	moveq	r3, #0
   11c38:	streq	r3, [sp, #28]
   11c3c:	bne	11d4c <__assert_fail@plt+0xbc0>
   11c40:	sub	fp, r5, #1
   11c44:	cmp	r5, #0
   11c48:	beq	11be4 <__assert_fail@plt+0xa58>
   11c4c:	add	r4, r4, #8
   11c50:	mov	sl, #-2147483648	; 0x80000000
   11c54:	movw	r5, #33156	; 0x8184
   11c58:	movt	r5, #2
   11c5c:	movw	r9, #26528	; 0x67a0
   11c60:	movt	r9, #1
   11c64:	movw	r3, #26776	; 0x6898
   11c68:	movt	r3, #1
   11c6c:	str	r3, [sp, #36]	; 0x24
   11c70:	str	r9, [sp, #32]
   11c74:	b	11e34 <__assert_fail@plt+0xca8>
   11c78:	mov	r2, #5
   11c7c:	movw	r1, #26652	; 0x681c
   11c80:	movt	r1, #1
   11c84:	mov	r0, #0
   11c88:	bl	10f4c <dcgettext@plt>
   11c8c:	mov	r6, r0
   11c90:	mov	r2, #5
   11c94:	movw	r1, #26660	; 0x6824
   11c98:	movt	r1, #1
   11c9c:	mov	r0, #0
   11ca0:	bl	10f4c <dcgettext@plt>
   11ca4:	mov	r7, r0
   11ca8:	mov	r2, #5
   11cac:	movw	r1, #26668	; 0x682c
   11cb0:	movt	r1, #1
   11cb4:	mov	r0, #0
   11cb8:	bl	10f4c <dcgettext@plt>
   11cbc:	mov	r8, r0
   11cc0:	mov	r2, #5
   11cc4:	movw	r1, #26676	; 0x6834
   11cc8:	movt	r1, #1
   11ccc:	mov	r0, #0
   11cd0:	bl	10f4c <dcgettext@plt>
   11cd4:	mov	r9, r0
   11cd8:	mov	r2, #5
   11cdc:	movw	r1, #26684	; 0x683c
   11ce0:	movt	r1, #1
   11ce4:	mov	r0, #0
   11ce8:	bl	10f4c <dcgettext@plt>
   11cec:	mov	sl, r0
   11cf0:	mov	r2, #5
   11cf4:	movw	r1, #26688	; 0x6840
   11cf8:	movt	r1, #1
   11cfc:	mov	r0, #0
   11d00:	bl	10f4c <dcgettext@plt>
   11d04:	mov	fp, r0
   11d08:	mov	r2, #5
   11d0c:	movw	r1, #26696	; 0x6848
   11d10:	movt	r1, #1
   11d14:	mov	r0, #0
   11d18:	bl	10f4c <dcgettext@plt>
   11d1c:	str	r0, [sp, #20]
   11d20:	str	fp, [sp, #16]
   11d24:	str	sl, [sp, #12]
   11d28:	str	r9, [sp, #8]
   11d2c:	str	r8, [sp, #4]
   11d30:	str	r7, [sp]
   11d34:	mvn	r3, #0
   11d38:	mov	r2, #32
   11d3c:	mov	r1, r6
   11d40:	mov	r0, r3
   11d44:	bl	11288 <__assert_fail@plt+0xfc>
   11d48:	b	11c24 <__assert_fail@plt+0xa98>
   11d4c:	mov	r0, #0
   11d50:	bl	1106c <ttyname@plt>
   11d54:	subs	r6, r0, #0
   11d58:	str	r6, [sp, #28]
   11d5c:	beq	11be4 <__assert_fail@plt+0xa58>
   11d60:	mov	r2, #5
   11d64:	movw	r1, #26532	; 0x67a4
   11d68:	movt	r1, #1
   11d6c:	mov	r0, r6
   11d70:	bl	11168 <strncmp@plt>
   11d74:	cmp	r0, #0
   11d78:	addeq	r3, r6, #5
   11d7c:	streq	r3, [sp, #28]
   11d80:	b	11c40 <__assert_fail@plt+0xab4>
   11d84:	ldrb	r3, [r5, #68]	; 0x44
   11d88:	cmp	r3, #0
   11d8c:	beq	11d9c <__assert_fail@plt+0xc10>
   11d90:	ldrsh	r3, [r4, #-8]
   11d94:	cmp	r3, #1
   11d98:	beq	11e90 <__assert_fail@plt+0xd04>
   11d9c:	ldrb	r3, [r5, #80]	; 0x50
   11da0:	cmp	r3, #0
   11da4:	beq	11db4 <__assert_fail@plt+0xc28>
   11da8:	ldrsh	r3, [r4, #-8]
   11dac:	cmp	r3, #2
   11db0:	beq	11ffc <__assert_fail@plt+0xe70>
   11db4:	ldrb	r3, [r5, #81]	; 0x51
   11db8:	cmp	r3, #0
   11dbc:	beq	11dcc <__assert_fail@plt+0xc40>
   11dc0:	ldrsh	r3, [r4, #-8]
   11dc4:	cmp	r3, #3
   11dc8:	beq	12050 <__assert_fail@plt+0xec4>
   11dcc:	ldrb	r3, [r5, #82]	; 0x52
   11dd0:	cmp	r3, #0
   11dd4:	beq	11de4 <__assert_fail@plt+0xc58>
   11dd8:	ldrsh	r3, [r4, #-8]
   11ddc:	cmp	r3, #5
   11de0:	beq	120a4 <__assert_fail@plt+0xf18>
   11de4:	ldrb	r3, [r5, #83]	; 0x53
   11de8:	cmp	r3, #0
   11dec:	beq	11dfc <__assert_fail@plt+0xc70>
   11df0:	ldrsh	r3, [r4, #-8]
   11df4:	cmp	r3, #6
   11df8:	beq	12114 <__assert_fail@plt+0xf88>
   11dfc:	ldrb	r3, [r5, #84]	; 0x54
   11e00:	cmp	r3, #0
   11e04:	beq	11e18 <__assert_fail@plt+0xc8c>
   11e08:	mov	r6, r4
   11e0c:	ldrsh	r3, [r4, #-8]
   11e10:	cmp	r3, #8
   11e14:	beq	121a0 <__assert_fail@plt+0x1014>
   11e18:	ldrsh	r3, [r4, #-8]
   11e1c:	cmp	r3, #2
   11e20:	ldreq	sl, [r4, #332]	; 0x14c
   11e24:	sub	fp, fp, #1
   11e28:	add	r4, r4, #384	; 0x180
   11e2c:	cmn	fp, #1
   11e30:	beq	11be4 <__assert_fail@plt+0xa58>
   11e34:	sub	r7, r4, #8
   11e38:	ldrb	r3, [r5, #66]	; 0x42
   11e3c:	cmp	r3, #0
   11e40:	beq	11e5c <__assert_fail@plt+0xcd0>
   11e44:	mov	r2, #32
   11e48:	mov	r1, r4
   11e4c:	ldr	r0, [sp, #28]
   11e50:	bl	11168 <strncmp@plt>
   11e54:	cmp	r0, #0
   11e58:	bne	11e18 <__assert_fail@plt+0xc8c>
   11e5c:	ldrb	r3, [r5, #67]	; 0x43
   11e60:	cmp	r3, #0
   11e64:	beq	11d84 <__assert_fail@plt+0xbf8>
   11e68:	ldrb	r3, [r4, #36]	; 0x24
   11e6c:	cmp	r3, #0
   11e70:	beq	11d84 <__assert_fail@plt+0xbf8>
   11e74:	ldrsh	r3, [r4, #-8]
   11e78:	cmp	r3, #7
   11e7c:	bne	11d84 <__assert_fail@plt+0xbf8>
   11e80:	mov	r1, sl
   11e84:	mov	r0, r7
   11e88:	bl	115d8 <__assert_fail@plt+0x44c>
   11e8c:	b	11e18 <__assert_fail@plt+0xc8c>
   11e90:	ldr	r6, [r4, #-4]
   11e94:	add	r3, r6, #255	; 0xff
   11e98:	cmp	r6, #0
   11e9c:	movge	r3, r6
   11ea0:	asr	r9, r3, #8
   11ea4:	uxtb	r8, r9
   11ea8:	rsbs	r3, r6, #0
   11eac:	uxtb	r6, r6
   11eb0:	uxtb	r3, r3
   11eb4:	rsbpl	r6, r3, #0
   11eb8:	ldr	r3, [r5, #72]	; 0x48
   11ebc:	cmp	r3, #0
   11ec0:	beq	11fac <__assert_fail@plt+0xe20>
   11ec4:	ldr	r3, [r5, #72]	; 0x48
   11ec8:	str	r3, [sp, #40]	; 0x28
   11ecc:	mov	r2, #5
   11ed0:	movw	r1, #26704	; 0x6850
   11ed4:	movt	r1, #1
   11ed8:	mov	r0, #0
   11edc:	bl	10f4c <dcgettext@plt>
   11ee0:	uxtb	r6, r6
   11ee4:	str	r6, [sp, #4]
   11ee8:	str	r0, [sp]
   11eec:	movw	r3, #26716	; 0x685c
   11ef0:	movt	r3, #1
   11ef4:	mvn	r2, #0
   11ef8:	mov	r1, #1
   11efc:	ldr	r0, [sp, #40]	; 0x28
   11f00:	bl	1109c <__sprintf_chk@plt>
   11f04:	ldr	r3, [r5, #76]	; 0x4c
   11f08:	cmp	r3, #0
   11f0c:	beq	11fd4 <__assert_fail@plt+0xe48>
   11f10:	ldr	r6, [r5, #76]	; 0x4c
   11f14:	mov	r2, #5
   11f18:	movw	r1, #26724	; 0x6864
   11f1c:	movt	r1, #1
   11f20:	mov	r0, #0
   11f24:	bl	10f4c <dcgettext@plt>
   11f28:	cmp	r8, #78	; 0x4e
   11f2c:	uxtbne	r3, r9
   11f30:	moveq	r3, #83	; 0x53
   11f34:	str	r3, [sp, #4]
   11f38:	str	r0, [sp]
   11f3c:	movw	r3, #26732	; 0x686c
   11f40:	movt	r3, #1
   11f44:	mvn	r2, #0
   11f48:	mov	r1, #1
   11f4c:	mov	r0, r6
   11f50:	bl	1109c <__sprintf_chk@plt>
   11f54:	ldr	r6, [r5, #72]	; 0x48
   11f58:	mov	r0, r7
   11f5c:	bl	1156c <__assert_fail@plt+0x3e0>
   11f60:	uxtb	r3, r9
   11f64:	sub	r3, r3, #32
   11f68:	cmp	r3, #94	; 0x5e
   11f6c:	ldrls	r3, [r5, #76]	; 0x4c
   11f70:	movwhi	r3, #28004	; 0x6d64
   11f74:	movthi	r3, #1
   11f78:	movw	r1, #28004	; 0x6d64
   11f7c:	movt	r1, #1
   11f80:	str	r1, [sp, #20]
   11f84:	str	r3, [sp, #16]
   11f88:	str	r1, [sp, #12]
   11f8c:	str	r1, [sp, #8]
   11f90:	str	r0, [sp, #4]
   11f94:	str	r6, [sp]
   11f98:	mvn	r3, #0
   11f9c:	mov	r2, #32
   11fa0:	mov	r0, r3
   11fa4:	bl	11288 <__assert_fail@plt+0xfc>
   11fa8:	b	11e18 <__assert_fail@plt+0xc8c>
   11fac:	mov	r2, #5
   11fb0:	movw	r1, #26704	; 0x6850
   11fb4:	movt	r1, #1
   11fb8:	mov	r0, #0
   11fbc:	bl	10f4c <dcgettext@plt>
   11fc0:	bl	11078 <strlen@plt>
   11fc4:	add	r0, r0, #3
   11fc8:	bl	15a0c <__assert_fail@plt+0x4880>
   11fcc:	str	r0, [r5, #72]	; 0x48
   11fd0:	b	11ec4 <__assert_fail@plt+0xd38>
   11fd4:	mov	r2, #5
   11fd8:	movw	r1, #26724	; 0x6864
   11fdc:	movt	r1, #1
   11fe0:	mov	r0, #0
   11fe4:	bl	10f4c <dcgettext@plt>
   11fe8:	bl	11078 <strlen@plt>
   11fec:	add	r0, r0, #2
   11ff0:	bl	15a0c <__assert_fail@plt+0x4880>
   11ff4:	str	r0, [r5, #76]	; 0x4c
   11ff8:	b	11f10 <__assert_fail@plt+0xd84>
   11ffc:	mov	r2, #5
   12000:	movw	r1, #26740	; 0x6874
   12004:	movt	r1, #1
   12008:	mov	r0, #0
   1200c:	bl	10f4c <dcgettext@plt>
   12010:	mov	r6, r0
   12014:	mov	r0, r7
   12018:	bl	1156c <__assert_fail@plt+0x3e0>
   1201c:	movw	r1, #28004	; 0x6d64
   12020:	movt	r1, #1
   12024:	str	r1, [sp, #20]
   12028:	str	r1, [sp, #16]
   1202c:	str	r1, [sp, #12]
   12030:	str	r1, [sp, #8]
   12034:	str	r0, [sp, #4]
   12038:	str	r6, [sp]
   1203c:	mvn	r3, #0
   12040:	mov	r2, #32
   12044:	mov	r0, r3
   12048:	bl	11288 <__assert_fail@plt+0xfc>
   1204c:	b	11e18 <__assert_fail@plt+0xc8c>
   12050:	mov	r2, #5
   12054:	movw	r1, #26752	; 0x6880
   12058:	movt	r1, #1
   1205c:	mov	r0, #0
   12060:	bl	10f4c <dcgettext@plt>
   12064:	mov	r6, r0
   12068:	mov	r0, r7
   1206c:	bl	1156c <__assert_fail@plt+0x3e0>
   12070:	movw	r1, #28004	; 0x6d64
   12074:	movt	r1, #1
   12078:	str	r1, [sp, #20]
   1207c:	str	r1, [sp, #16]
   12080:	str	r1, [sp, #12]
   12084:	str	r1, [sp, #8]
   12088:	str	r0, [sp, #4]
   1208c:	str	r6, [sp]
   12090:	mvn	r3, #0
   12094:	mov	r2, #32
   12098:	mov	r0, r3
   1209c:	bl	11288 <__assert_fail@plt+0xfc>
   120a0:	b	11e18 <__assert_fail@plt+0xc8c>
   120a4:	mov	r0, r7
   120a8:	bl	114d0 <__assert_fail@plt+0x344>
   120ac:	mov	r6, r0
   120b0:	add	r8, sp, #52	; 0x34
   120b4:	ldr	r3, [r4, #-4]
   120b8:	str	r3, [sp]
   120bc:	ldr	r3, [sp, #32]
   120c0:	mov	r2, #12
   120c4:	mov	r1, #1
   120c8:	mov	r0, r8
   120cc:	bl	1109c <__sprintf_chk@plt>
   120d0:	mov	r0, r7
   120d4:	bl	1156c <__assert_fail@plt+0x3e0>
   120d8:	movw	r1, #28004	; 0x6d64
   120dc:	movt	r1, #1
   120e0:	str	r1, [sp, #20]
   120e4:	str	r6, [sp, #16]
   120e8:	str	r8, [sp, #12]
   120ec:	str	r1, [sp, #8]
   120f0:	str	r0, [sp, #4]
   120f4:	str	r4, [sp]
   120f8:	mov	r3, #32
   120fc:	mov	r2, r3
   12100:	mvn	r0, #0
   12104:	bl	11288 <__assert_fail@plt+0xfc>
   12108:	mov	r0, r6
   1210c:	bl	12d14 <__assert_fail@plt+0x1b88>
   12110:	b	11e18 <__assert_fail@plt+0xc8c>
   12114:	mov	r0, r7
   12118:	bl	114d0 <__assert_fail@plt+0x344>
   1211c:	mov	r6, r0
   12120:	add	r8, sp, #52	; 0x34
   12124:	ldr	r3, [r4, #-4]
   12128:	str	r3, [sp]
   1212c:	ldr	r3, [sp, #32]
   12130:	mov	r2, #12
   12134:	mov	r1, #1
   12138:	mov	r0, r8
   1213c:	bl	1109c <__sprintf_chk@plt>
   12140:	mov	r2, #5
   12144:	movw	r1, #26768	; 0x6890
   12148:	movt	r1, #1
   1214c:	mov	r0, #0
   12150:	bl	10f4c <dcgettext@plt>
   12154:	mov	r9, r0
   12158:	mov	r0, r7
   1215c:	bl	1156c <__assert_fail@plt+0x3e0>
   12160:	movw	r3, #28004	; 0x6d64
   12164:	movt	r3, #1
   12168:	str	r3, [sp, #20]
   1216c:	str	r6, [sp, #16]
   12170:	str	r8, [sp, #12]
   12174:	str	r3, [sp, #8]
   12178:	str	r0, [sp, #4]
   1217c:	str	r4, [sp]
   12180:	mov	r3, #32
   12184:	mov	r2, r3
   12188:	mov	r1, r9
   1218c:	mvn	r0, #0
   12190:	bl	11288 <__assert_fail@plt+0xfc>
   12194:	mov	r0, r6
   12198:	bl	12d14 <__assert_fail@plt+0x1b88>
   1219c:	b	11e18 <__assert_fail@plt+0xc8c>
   121a0:	mov	r0, r7
   121a4:	bl	114d0 <__assert_fail@plt+0x344>
   121a8:	mov	r9, r0
   121ac:	ldr	r3, [r4, #-4]
   121b0:	str	r3, [sp]
   121b4:	ldr	r3, [sp, #32]
   121b8:	mov	r2, #12
   121bc:	mov	r1, #1
   121c0:	add	r0, sp, #52	; 0x34
   121c4:	bl	1109c <__sprintf_chk@plt>
   121c8:	ldr	r3, [r5, #88]	; 0x58
   121cc:	cmp	r3, #0
   121d0:	beq	1228c <__assert_fail@plt+0x1100>
   121d4:	ldr	r3, [r5, #88]	; 0x58
   121d8:	str	r3, [sp, #40]	; 0x28
   121dc:	mov	r2, #5
   121e0:	ldr	r1, [sp, #36]	; 0x24
   121e4:	mov	r0, #0
   121e8:	bl	10f4c <dcgettext@plt>
   121ec:	str	r0, [sp, #44]	; 0x2c
   121f0:	add	r3, r6, #324	; 0x144
   121f4:	ldrsh	r8, [r3]
   121f8:	mov	r2, #5
   121fc:	movw	r1, #26784	; 0x68a0
   12200:	movt	r1, #1
   12204:	mov	r0, #0
   12208:	bl	10f4c <dcgettext@plt>
   1220c:	movw	r3, #326	; 0x146
   12210:	ldrsh	r3, [r6, r3]
   12214:	str	r3, [sp, #12]
   12218:	str	r0, [sp, #8]
   1221c:	str	r8, [sp, #4]
   12220:	ldr	r2, [sp, #44]	; 0x2c
   12224:	str	r2, [sp]
   12228:	movw	r3, #26792	; 0x68a8
   1222c:	movt	r3, #1
   12230:	mvn	r2, #0
   12234:	mov	r1, #1
   12238:	ldr	r0, [sp, #40]	; 0x28
   1223c:	bl	1109c <__sprintf_chk@plt>
   12240:	mov	r0, r7
   12244:	bl	1156c <__assert_fail@plt+0x3e0>
   12248:	movw	r1, #28004	; 0x6d64
   1224c:	movt	r1, #1
   12250:	ldr	r3, [r5, #88]	; 0x58
   12254:	str	r3, [sp, #20]
   12258:	str	r9, [sp, #16]
   1225c:	add	r3, sp, #52	; 0x34
   12260:	str	r3, [sp, #12]
   12264:	str	r1, [sp, #8]
   12268:	str	r0, [sp, #4]
   1226c:	str	r6, [sp]
   12270:	mov	r3, #32
   12274:	mov	r2, r3
   12278:	mvn	r0, #0
   1227c:	bl	11288 <__assert_fail@plt+0xfc>
   12280:	mov	r0, r9
   12284:	bl	12d14 <__assert_fail@plt+0x1b88>
   12288:	b	11e18 <__assert_fail@plt+0xc8c>
   1228c:	mov	r2, #5
   12290:	ldr	r1, [sp, #36]	; 0x24
   12294:	mov	r0, #0
   12298:	bl	10f4c <dcgettext@plt>
   1229c:	bl	11078 <strlen@plt>
   122a0:	mov	r8, r0
   122a4:	mov	r2, #5
   122a8:	movw	r1, #26784	; 0x68a0
   122ac:	movt	r1, #1
   122b0:	mov	r0, #0
   122b4:	bl	10f4c <dcgettext@plt>
   122b8:	bl	11078 <strlen@plt>
   122bc:	add	r0, r8, r0
   122c0:	add	r0, r0, #14
   122c4:	bl	15a0c <__assert_fail@plt+0x4880>
   122c8:	str	r0, [r5, #88]	; 0x58
   122cc:	b	121d4 <__assert_fail@plt+0x1048>
   122d0:	push	{lr}		; (str lr, [sp, #-4]!)
   122d4:	sub	sp, sp, #60	; 0x3c
   122d8:	subs	r5, r0, #0
   122dc:	beq	12324 <__assert_fail@plt+0x1198>
   122e0:	movw	r3, #33144	; 0x8178
   122e4:	movt	r3, #2
   122e8:	ldr	r4, [r3]
   122ec:	mov	r2, #5
   122f0:	movw	r1, #26808	; 0x68b8
   122f4:	movt	r1, #1
   122f8:	mov	r0, #0
   122fc:	bl	10f4c <dcgettext@plt>
   12300:	movw	r3, #33292	; 0x820c
   12304:	movt	r3, #2
   12308:	ldr	r3, [r3]
   1230c:	mov	r2, r0
   12310:	mov	r1, #1
   12314:	mov	r0, r4
   12318:	bl	110e4 <__fprintf_chk@plt>
   1231c:	mov	r0, r5
   12320:	bl	11060 <exit@plt>
   12324:	mov	r2, #5
   12328:	movw	r1, #26848	; 0x68e0
   1232c:	movt	r1, #1
   12330:	mov	r0, #0
   12334:	bl	10f4c <dcgettext@plt>
   12338:	movw	r3, #33292	; 0x820c
   1233c:	movt	r3, #2
   12340:	ldr	r2, [r3]
   12344:	mov	r1, r0
   12348:	mov	r0, #1
   1234c:	bl	110cc <__printf_chk@plt>
   12350:	mov	r2, #5
   12354:	movw	r1, #26892	; 0x690c
   12358:	movt	r1, #1
   1235c:	mov	r0, #0
   12360:	bl	10f4c <dcgettext@plt>
   12364:	movw	r4, #33148	; 0x817c
   12368:	movt	r4, #2
   1236c:	ldr	r1, [r4]
   12370:	bl	10ea4 <fputs_unlocked@plt>
   12374:	mov	r2, #5
   12378:	movw	r1, #26952	; 0x6948
   1237c:	movt	r1, #1
   12380:	mov	r0, #0
   12384:	bl	10f4c <dcgettext@plt>
   12388:	ldr	r1, [r4]
   1238c:	bl	10ea4 <fputs_unlocked@plt>
   12390:	mov	r2, #5
   12394:	movw	r1, #27148	; 0x6a0c
   12398:	movt	r1, #1
   1239c:	mov	r0, #0
   123a0:	bl	10f4c <dcgettext@plt>
   123a4:	ldr	r1, [r4]
   123a8:	bl	10ea4 <fputs_unlocked@plt>
   123ac:	mov	r2, #5
   123b0:	movw	r1, #27200	; 0x6a40
   123b4:	movt	r1, #1
   123b8:	mov	r0, #0
   123bc:	bl	10f4c <dcgettext@plt>
   123c0:	ldr	r1, [r4]
   123c4:	bl	10ea4 <fputs_unlocked@plt>
   123c8:	mov	r2, #5
   123cc:	movw	r1, #27388	; 0x6afc
   123d0:	movt	r1, #1
   123d4:	mov	r0, #0
   123d8:	bl	10f4c <dcgettext@plt>
   123dc:	ldr	r1, [r4]
   123e0:	bl	10ea4 <fputs_unlocked@plt>
   123e4:	mov	r2, #5
   123e8:	movw	r1, #27612	; 0x6bdc
   123ec:	movt	r1, #1
   123f0:	mov	r0, #0
   123f4:	bl	10f4c <dcgettext@plt>
   123f8:	ldr	r1, [r4]
   123fc:	bl	10ea4 <fputs_unlocked@plt>
   12400:	mov	r2, #5
   12404:	movw	r1, #27776	; 0x6c80
   12408:	movt	r1, #1
   1240c:	mov	r0, #0
   12410:	bl	10f4c <dcgettext@plt>
   12414:	ldr	r1, [r4]
   12418:	bl	10ea4 <fputs_unlocked@plt>
   1241c:	mov	r2, #5
   12420:	movw	r1, #27824	; 0x6cb0
   12424:	movt	r1, #1
   12428:	mov	r0, #0
   1242c:	bl	10f4c <dcgettext@plt>
   12430:	ldr	r1, [r4]
   12434:	bl	10ea4 <fputs_unlocked@plt>
   12438:	mov	r2, #5
   1243c:	movw	r1, #27880	; 0x6ce8
   12440:	movt	r1, #1
   12444:	mov	r0, #0
   12448:	bl	10f4c <dcgettext@plt>
   1244c:	movw	r3, #28008	; 0x6d68
   12450:	movt	r3, #1
   12454:	movw	r2, #28024	; 0x6d78
   12458:	movt	r2, #1
   1245c:	mov	r1, r0
   12460:	mov	r0, #1
   12464:	bl	110cc <__printf_chk@plt>
   12468:	movw	r3, #26092	; 0x65ec
   1246c:	movt	r3, #1
   12470:	add	r0, r3, #12
   12474:	ldr	r1, [r3, #12]
   12478:	ldr	r3, [r3, #16]
   1247c:	str	r1, [sp]
   12480:	str	r3, [sp, #4]
   12484:	ldrd	r2, [r0, #8]
   12488:	strd	r2, [sp, #8]
   1248c:	ldrd	r2, [r0, #16]
   12490:	strd	r2, [sp, #16]
   12494:	ldrd	r2, [r0, #24]
   12498:	strd	r2, [sp, #24]
   1249c:	ldrd	r2, [r0, #32]
   124a0:	strd	r2, [sp, #32]
   124a4:	ldrd	r2, [r0, #40]	; 0x28
   124a8:	strd	r2, [sp, #40]	; 0x28
   124ac:	ldrd	r2, [r0, #48]	; 0x30
   124b0:	strd	r2, [sp, #48]	; 0x30
   124b4:	cmp	r1, #0
   124b8:	moveq	r4, sp
   124bc:	beq	124e8 <__assert_fail@plt+0x135c>
   124c0:	mov	r4, sp
   124c4:	movw	r6, #26804	; 0x68b4
   124c8:	movt	r6, #1
   124cc:	mov	r0, r6
   124d0:	bl	10ebc <strcmp@plt>
   124d4:	cmp	r0, #0
   124d8:	beq	124e8 <__assert_fail@plt+0x135c>
   124dc:	ldr	r1, [r4, #8]!
   124e0:	cmp	r1, #0
   124e4:	bne	124cc <__assert_fail@plt+0x1340>
   124e8:	ldr	r4, [r4, #4]
   124ec:	cmp	r4, #0
   124f0:	beq	1264c <__assert_fail@plt+0x14c0>
   124f4:	mov	r2, #5
   124f8:	movw	r1, #28040	; 0x6d88
   124fc:	movt	r1, #1
   12500:	mov	r0, #0
   12504:	bl	10f4c <dcgettext@plt>
   12508:	movw	r3, #28064	; 0x6da0
   1250c:	movt	r3, #1
   12510:	movw	r2, #28104	; 0x6dc8
   12514:	movt	r2, #1
   12518:	mov	r1, r0
   1251c:	mov	r0, #1
   12520:	bl	110cc <__printf_chk@plt>
   12524:	mov	r1, #0
   12528:	mov	r0, #5
   1252c:	bl	11114 <setlocale@plt>
   12530:	cmp	r0, #0
   12534:	beq	12550 <__assert_fail@plt+0x13c4>
   12538:	mov	r2, #3
   1253c:	movw	r1, #28120	; 0x6dd8
   12540:	movt	r1, #1
   12544:	bl	11168 <strncmp@plt>
   12548:	cmp	r0, #0
   1254c:	bne	125cc <__assert_fail@plt+0x1440>
   12550:	mov	r2, #5
   12554:	movw	r1, #28196	; 0x6e24
   12558:	movt	r1, #1
   1255c:	mov	r0, #0
   12560:	bl	10f4c <dcgettext@plt>
   12564:	movw	r6, #26804	; 0x68b4
   12568:	movt	r6, #1
   1256c:	mov	r3, r6
   12570:	movw	r2, #28064	; 0x6da0
   12574:	movt	r2, #1
   12578:	mov	r1, r0
   1257c:	mov	r0, #1
   12580:	bl	110cc <__printf_chk@plt>
   12584:	mov	r2, #5
   12588:	movw	r1, #28224	; 0x6e40
   1258c:	movt	r1, #1
   12590:	mov	r0, #0
   12594:	bl	10f4c <dcgettext@plt>
   12598:	mov	r1, r0
   1259c:	movw	r2, #28424	; 0x6f08
   125a0:	movt	r2, #1
   125a4:	movw	r3, #28004	; 0x6d64
   125a8:	movt	r3, #1
   125ac:	cmp	r4, r6
   125b0:	moveq	r3, r2
   125b4:	mov	r2, r4
   125b8:	mov	r0, #1
   125bc:	bl	110cc <__printf_chk@plt>
   125c0:	b	1231c <__assert_fail@plt+0x1190>
   125c4:	movw	r4, #26804	; 0x68b4
   125c8:	movt	r4, #1
   125cc:	mov	r2, #5
   125d0:	movw	r1, #28124	; 0x6ddc
   125d4:	movt	r1, #1
   125d8:	mov	r0, #0
   125dc:	bl	10f4c <dcgettext@plt>
   125e0:	movw	r3, #33148	; 0x817c
   125e4:	movt	r3, #2
   125e8:	ldr	r1, [r3]
   125ec:	bl	10ea4 <fputs_unlocked@plt>
   125f0:	b	12550 <__assert_fail@plt+0x13c4>
   125f4:	mov	r2, #5
   125f8:	movw	r1, #28196	; 0x6e24
   125fc:	movt	r1, #1
   12600:	mov	r0, #0
   12604:	bl	10f4c <dcgettext@plt>
   12608:	movw	r4, #26804	; 0x68b4
   1260c:	movt	r4, #1
   12610:	mov	r3, r4
   12614:	movw	r2, #28064	; 0x6da0
   12618:	movt	r2, #1
   1261c:	mov	r1, r0
   12620:	mov	r0, #1
   12624:	bl	110cc <__printf_chk@plt>
   12628:	mov	r2, #5
   1262c:	movw	r1, #28224	; 0x6e40
   12630:	movt	r1, #1
   12634:	mov	r0, #0
   12638:	bl	10f4c <dcgettext@plt>
   1263c:	mov	r1, r0
   12640:	movw	r3, #28424	; 0x6f08
   12644:	movt	r3, #1
   12648:	b	125b4 <__assert_fail@plt+0x1428>
   1264c:	mov	r2, #5
   12650:	movw	r1, #28040	; 0x6d88
   12654:	movt	r1, #1
   12658:	mov	r0, #0
   1265c:	bl	10f4c <dcgettext@plt>
   12660:	movw	r3, #28064	; 0x6da0
   12664:	movt	r3, #1
   12668:	movw	r2, #28104	; 0x6dc8
   1266c:	movt	r2, #1
   12670:	mov	r1, r0
   12674:	mov	r0, #1
   12678:	bl	110cc <__printf_chk@plt>
   1267c:	mov	r1, #0
   12680:	mov	r0, #5
   12684:	bl	11114 <setlocale@plt>
   12688:	cmp	r0, #0
   1268c:	beq	125f4 <__assert_fail@plt+0x1468>
   12690:	mov	r2, #3
   12694:	movw	r1, #28120	; 0x6dd8
   12698:	movt	r1, #1
   1269c:	bl	11168 <strncmp@plt>
   126a0:	cmp	r0, #0
   126a4:	bne	125c4 <__assert_fail@plt+0x1438>
   126a8:	mov	r2, #5
   126ac:	movw	r1, #28196	; 0x6e24
   126b0:	movt	r1, #1
   126b4:	mov	r0, #0
   126b8:	bl	10f4c <dcgettext@plt>
   126bc:	movw	r4, #26804	; 0x68b4
   126c0:	movt	r4, #1
   126c4:	mov	r3, r4
   126c8:	movw	r2, #28064	; 0x6da0
   126cc:	movt	r2, #1
   126d0:	mov	r1, r0
   126d4:	mov	r0, #1
   126d8:	bl	110cc <__printf_chk@plt>
   126dc:	mov	r2, #5
   126e0:	movw	r1, #28224	; 0x6e40
   126e4:	movt	r1, #1
   126e8:	mov	r0, #0
   126ec:	bl	10f4c <dcgettext@plt>
   126f0:	mov	r1, r0
   126f4:	movw	r3, #28424	; 0x6f08
   126f8:	movt	r3, #1
   126fc:	b	125b4 <__assert_fail@plt+0x1428>
   12700:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12704:	strd	r6, [sp, #8]
   12708:	strd	r8, [sp, #16]
   1270c:	str	lr, [sp, #24]
   12710:	sub	sp, sp, #20
   12714:	mov	r6, r0
   12718:	mov	r7, r1
   1271c:	ldr	r0, [r1]
   12720:	bl	12ec8 <__assert_fail@plt+0x1d3c>
   12724:	movw	r1, #28004	; 0x6d64
   12728:	movt	r1, #1
   1272c:	mov	r0, #6
   12730:	bl	11114 <setlocale@plt>
   12734:	movw	r4, #28108	; 0x6dcc
   12738:	movt	r4, #1
   1273c:	movw	r1, #28276	; 0x6e74
   12740:	movt	r1, #1
   12744:	mov	r0, r4
   12748:	bl	11150 <bindtextdomain@plt>
   1274c:	mov	r0, r4
   12750:	bl	10f7c <textdomain@plt>
   12754:	movw	r0, #11268	; 0x2c04
   12758:	movt	r0, #1
   1275c:	bl	165c8 <__assert_fail@plt+0x543c>
   12760:	mov	r9, #1
   12764:	ldr	r8, [pc, #900]	; 12af0 <__assert_fail@plt+0x1964>
   12768:	movw	r5, #28352	; 0x6ec0
   1276c:	movt	r5, #1
   12770:	movw	r4, #33156	; 0x8184
   12774:	movt	r4, #2
   12778:	mov	r3, #0
   1277c:	str	r3, [sp]
   12780:	mov	r3, r8
   12784:	mov	r2, r5
   12788:	mov	r1, r7
   1278c:	mov	r0, r6
   12790:	bl	1103c <getopt_long@plt>
   12794:	cmn	r0, #1
   12798:	beq	1299c <__assert_fail@plt+0x1810>
   1279c:	cmp	r0, #109	; 0x6d
   127a0:	beq	128cc <__assert_fail@plt+0x1740>
   127a4:	ble	127dc <__assert_fail@plt+0x1650>
   127a8:	cmp	r0, #115	; 0x73
   127ac:	beq	128f8 <__assert_fail@plt+0x176c>
   127b0:	ble	12874 <__assert_fail@plt+0x16e8>
   127b4:	cmp	r0, #117	; 0x75
   127b8:	beq	12920 <__assert_fail@plt+0x1794>
   127bc:	blt	12904 <__assert_fail@plt+0x1778>
   127c0:	cmp	r0, #119	; 0x77
   127c4:	beq	12914 <__assert_fail@plt+0x1788>
   127c8:	cmp	r0, #256	; 0x100
   127cc:	bne	12830 <__assert_fail@plt+0x16a4>
   127d0:	mov	r3, #1
   127d4:	strb	r3, [r4, #54]	; 0x36
   127d8:	b	12778 <__assert_fail@plt+0x15ec>
   127dc:	cmp	r0, #84	; 0x54
   127e0:	beq	12914 <__assert_fail@plt+0x1788>
   127e4:	ble	12818 <__assert_fail@plt+0x168c>
   127e8:	cmp	r0, #98	; 0x62
   127ec:	beq	12898 <__assert_fail@plt+0x170c>
   127f0:	ble	12838 <__assert_fail@plt+0x16ac>
   127f4:	cmp	r0, #100	; 0x64
   127f8:	beq	128a8 <__assert_fail@plt+0x171c>
   127fc:	cmp	r0, #108	; 0x6c
   12800:	bne	12830 <__assert_fail@plt+0x16a4>
   12804:	mov	r3, #1
   12808:	strb	r3, [r4, #83]	; 0x53
   1280c:	strb	r3, [r4]
   12810:	mov	r9, #0
   12814:	b	12778 <__assert_fail@plt+0x15ec>
   12818:	cmn	r0, #2
   1281c:	beq	12934 <__assert_fail@plt+0x17a8>
   12820:	cmp	r0, #72	; 0x48
   12824:	beq	128c0 <__assert_fail@plt+0x1734>
   12828:	cmn	r0, #3
   1282c:	beq	1293c <__assert_fail@plt+0x17b0>
   12830:	mov	r0, #1
   12834:	bl	122d0 <__assert_fail@plt+0x1144>
   12838:	cmp	r0, #97	; 0x61
   1283c:	bne	12830 <__assert_fail@plt+0x16a4>
   12840:	mov	r3, #1
   12844:	strb	r3, [r4, #80]	; 0x50
   12848:	strb	r3, [r4, #84]	; 0x54
   1284c:	strb	r3, [r4, #83]	; 0x53
   12850:	strb	r3, [r4, #82]	; 0x52
   12854:	strb	r3, [r4, #68]	; 0x44
   12858:	strb	r3, [r4, #81]	; 0x51
   1285c:	strb	r3, [r4, #67]	; 0x43
   12860:	strb	r3, [r4, #3]
   12864:	strb	r3, [r4]
   12868:	strb	r3, [r4, #2]
   1286c:	mov	r9, #0
   12870:	b	12778 <__assert_fail@plt+0x15ec>
   12874:	cmp	r0, #113	; 0x71
   12878:	beq	128d8 <__assert_fail@plt+0x174c>
   1287c:	bgt	128e4 <__assert_fail@plt+0x1758>
   12880:	cmp	r0, #112	; 0x70
   12884:	bne	12830 <__assert_fail@plt+0x16a4>
   12888:	mov	r3, #1
   1288c:	strb	r3, [r4, #82]	; 0x52
   12890:	mov	r9, #0
   12894:	b	12778 <__assert_fail@plt+0x15ec>
   12898:	mov	r3, #1
   1289c:	strb	r3, [r4, #80]	; 0x50
   128a0:	mov	r9, #0
   128a4:	b	12778 <__assert_fail@plt+0x15ec>
   128a8:	mov	r3, #1
   128ac:	strb	r3, [r4, #84]	; 0x54
   128b0:	strb	r3, [r4]
   128b4:	strb	r3, [r4, #2]
   128b8:	mov	r9, #0
   128bc:	b	12778 <__assert_fail@plt+0x15ec>
   128c0:	mov	r3, #1
   128c4:	strb	r3, [r4, #65]	; 0x41
   128c8:	b	12778 <__assert_fail@plt+0x15ec>
   128cc:	mov	r3, #1
   128d0:	strb	r3, [r4, #66]	; 0x42
   128d4:	b	12778 <__assert_fail@plt+0x15ec>
   128d8:	mov	r3, #1
   128dc:	strb	r3, [r4, #64]	; 0x40
   128e0:	b	12778 <__assert_fail@plt+0x15ec>
   128e4:	mov	r3, #1
   128e8:	strb	r3, [r4, #68]	; 0x44
   128ec:	strb	r3, [r4]
   128f0:	mov	r9, #0
   128f4:	b	12778 <__assert_fail@plt+0x15ec>
   128f8:	mov	r3, #1
   128fc:	strb	r3, [r4, #1]
   12900:	b	12778 <__assert_fail@plt+0x15ec>
   12904:	mov	r3, #1
   12908:	strb	r3, [r4, #81]	; 0x51
   1290c:	mov	r9, #0
   12910:	b	12778 <__assert_fail@plt+0x15ec>
   12914:	mov	r3, #1
   12918:	strb	r3, [r4, #3]
   1291c:	b	12778 <__assert_fail@plt+0x15ec>
   12920:	mov	r3, #1
   12924:	strb	r3, [r4, #67]	; 0x43
   12928:	strb	r3, [r4]
   1292c:	mov	r9, #0
   12930:	b	12778 <__assert_fail@plt+0x15ec>
   12934:	mov	r0, #0
   12938:	bl	122d0 <__assert_fail@plt+0x1144>
   1293c:	movw	r3, #33056	; 0x8120
   12940:	movt	r3, #2
   12944:	movw	r0, #33148	; 0x817c
   12948:	movt	r0, #2
   1294c:	mov	r4, #0
   12950:	str	r4, [sp, #12]
   12954:	movw	r2, #28300	; 0x6e8c
   12958:	movt	r2, #1
   1295c:	str	r2, [sp, #8]
   12960:	movw	r2, #28316	; 0x6e9c
   12964:	movt	r2, #1
   12968:	str	r2, [sp, #4]
   1296c:	movw	r2, #28332	; 0x6eac
   12970:	movt	r2, #1
   12974:	str	r2, [sp]
   12978:	ldr	r3, [r3]
   1297c:	movw	r2, #28104	; 0x6dc8
   12980:	movt	r2, #1
   12984:	movw	r1, #26804	; 0x68b4
   12988:	movt	r1, #1
   1298c:	ldr	r0, [r0]
   12990:	bl	15934 <__assert_fail@plt+0x47a8>
   12994:	mov	r0, r4
   12998:	bl	11060 <exit@plt>
   1299c:	cmp	r9, #0
   129a0:	beq	129b8 <__assert_fail@plt+0x182c>
   129a4:	movw	r3, #33156	; 0x8184
   129a8:	movt	r3, #2
   129ac:	mov	r2, #1
   129b0:	strb	r2, [r3, #67]	; 0x43
   129b4:	strb	r2, [r3, #1]
   129b8:	movw	r3, #33156	; 0x8184
   129bc:	movt	r3, #2
   129c0:	ldrb	r3, [r3, #2]
   129c4:	cmp	r3, #0
   129c8:	beq	129dc <__assert_fail@plt+0x1850>
   129cc:	movw	r3, #33156	; 0x8184
   129d0:	movt	r3, #2
   129d4:	mov	r2, #0
   129d8:	strb	r2, [r3, #1]
   129dc:	mov	r0, #2
   129e0:	bl	12d74 <__assert_fail@plt+0x1be8>
   129e4:	cmp	r0, #0
   129e8:	beq	12a38 <__assert_fail@plt+0x18ac>
   129ec:	movw	r3, #33156	; 0x8184
   129f0:	movt	r3, #2
   129f4:	movw	r2, #28368	; 0x6ed0
   129f8:	movt	r2, #1
   129fc:	str	r2, [r3, #44]	; 0x2c
   12a00:	mov	r2, #16
   12a04:	str	r2, [r3, #4]
   12a08:	movw	r3, #33136	; 0x8170
   12a0c:	movt	r3, #2
   12a10:	ldr	r3, [r3]
   12a14:	sub	r6, r6, r3
   12a18:	add	r6, r6, #1
   12a1c:	cmp	r6, #3
   12a20:	ldrls	pc, [pc, r6, lsl #2]
   12a24:	b	12aa4 <__assert_fail@plt+0x1918>
   12a28:	andeq	r2, r1, r8, ror #20
   12a2c:	andeq	r2, r1, r8, ror #20
   12a30:	muleq	r1, r4, sl
   12a34:	andeq	r2, r1, r8, asr sl
   12a38:	movw	r3, #33156	; 0x8184
   12a3c:	movt	r3, #2
   12a40:	movw	r2, #28384	; 0x6ee0
   12a44:	movt	r2, #1
   12a48:	str	r2, [r3, #44]	; 0x2c
   12a4c:	mov	r2, #12
   12a50:	str	r2, [r3, #4]
   12a54:	b	12a08 <__assert_fail@plt+0x187c>
   12a58:	movw	r3, #33156	; 0x8184
   12a5c:	movt	r3, #2
   12a60:	mov	r2, #1
   12a64:	strb	r2, [r3, #66]	; 0x42
   12a68:	mov	r1, #1
   12a6c:	movw	r0, #28024	; 0x6d78
   12a70:	movt	r0, #1
   12a74:	bl	11ab4 <__assert_fail@plt+0x928>
   12a78:	mov	r0, #0
   12a7c:	add	sp, sp, #20
   12a80:	ldrd	r4, [sp]
   12a84:	ldrd	r6, [sp, #8]
   12a88:	ldrd	r8, [sp, #16]
   12a8c:	add	sp, sp, #24
   12a90:	pop	{pc}		; (ldr pc, [sp], #4)
   12a94:	mov	r1, #0
   12a98:	ldr	r0, [r7, r3, lsl #2]
   12a9c:	bl	11ab4 <__assert_fail@plt+0x928>
   12aa0:	b	12a78 <__assert_fail@plt+0x18ec>
   12aa4:	mov	r2, #5
   12aa8:	movw	r1, #28396	; 0x6eec
   12aac:	movt	r1, #1
   12ab0:	mov	r0, #0
   12ab4:	bl	10f4c <dcgettext@plt>
   12ab8:	mov	r4, r0
   12abc:	movw	r3, #33136	; 0x8170
   12ac0:	movt	r3, #2
   12ac4:	ldr	r3, [r3]
   12ac8:	add	r3, r3, #2
   12acc:	ldr	r0, [r7, r3, lsl #2]
   12ad0:	bl	151c4 <__assert_fail@plt+0x4038>
   12ad4:	mov	r3, r0
   12ad8:	mov	r2, r4
   12adc:	mov	r1, #0
   12ae0:	mov	r0, r1
   12ae4:	bl	10fd0 <error@plt>
   12ae8:	mov	r0, #1
   12aec:	bl	122d0 <__assert_fail@plt+0x1144>
   12af0:	andeq	r6, r1, r0, lsr r6
   12af4:	strd	r4, [sp, #-16]!
   12af8:	str	r6, [sp, #8]
   12afc:	str	lr, [sp, #12]
   12b00:	sub	sp, sp, #8
   12b04:	mov	r5, r0
   12b08:	mov	r4, r1
   12b0c:	mov	r1, #0
   12b10:	str	r1, [sp, #4]
   12b14:	movw	r2, #33248	; 0x81e0
   12b18:	movt	r2, #2
   12b1c:	mov	r3, #2
   12b20:	str	r3, [r2]
   12b24:	add	r3, sp, #4
   12b28:	bl	11144 <getaddrinfo@plt>
   12b2c:	cmp	r0, #0
   12b30:	bne	12b8c <__assert_fail@plt+0x1a00>
   12b34:	ldr	r6, [sp, #4]
   12b38:	ldr	r0, [r6, #24]
   12b3c:	cmp	r0, #0
   12b40:	moveq	r0, r5
   12b44:	bl	10f58 <strdup@plt>
   12b48:	mov	r5, r0
   12b4c:	adds	r3, r4, #0
   12b50:	movne	r3, #1
   12b54:	cmp	r0, #0
   12b58:	moveq	r0, r3
   12b5c:	movne	r0, #0
   12b60:	cmp	r0, #0
   12b64:	mvnne	r3, #9
   12b68:	strne	r3, [r4]
   12b6c:	mov	r0, r6
   12b70:	bl	11138 <freeaddrinfo@plt>
   12b74:	mov	r0, r5
   12b78:	add	sp, sp, #8
   12b7c:	ldrd	r4, [sp]
   12b80:	ldr	r6, [sp, #8]
   12b84:	add	sp, sp, #12
   12b88:	pop	{pc}		; (ldr pc, [sp], #4)
   12b8c:	cmp	r4, #0
   12b90:	strne	r0, [r4]
   12b94:	movne	r5, #0
   12b98:	moveq	r5, r4
   12b9c:	b	12b74 <__assert_fail@plt+0x19e8>
   12ba0:	str	r4, [sp, #-8]!
   12ba4:	str	lr, [sp, #4]
   12ba8:	ldr	r1, [pc, #12]	; 12bbc <__assert_fail@plt+0x1a30>
   12bac:	bl	12af4 <__assert_fail@plt+0x1968>
   12bb0:	ldr	r4, [sp]
   12bb4:	add	sp, sp, #4
   12bb8:	pop	{pc}		; (ldr pc, [sp], #4)
   12bbc:	andeq	r8, r2, r0, lsl #4
   12bc0:	str	r4, [sp, #-8]!
   12bc4:	str	lr, [sp, #4]
   12bc8:	movw	r3, #33248	; 0x81e0
   12bcc:	movt	r3, #2
   12bd0:	ldr	r0, [r3, #32]
   12bd4:	bl	10eec <gai_strerror@plt>
   12bd8:	ldr	r4, [sp]
   12bdc:	add	sp, sp, #4
   12be0:	pop	{pc}		; (ldr pc, [sp], #4)
   12be4:	movw	r3, #33284	; 0x8204
   12be8:	movt	r3, #2
   12bec:	str	r0, [r3]
   12bf0:	bx	lr
   12bf4:	movw	r3, #33284	; 0x8204
   12bf8:	movt	r3, #2
   12bfc:	strb	r0, [r3, #4]
   12c00:	bx	lr
   12c04:	strd	r4, [sp, #-16]!
   12c08:	str	r6, [sp, #8]
   12c0c:	str	lr, [sp, #12]
   12c10:	sub	sp, sp, #8
   12c14:	movw	r3, #33148	; 0x817c
   12c18:	movt	r3, #2
   12c1c:	ldr	r0, [r3]
   12c20:	bl	15ff0 <__assert_fail@plt+0x4e64>
   12c24:	cmp	r0, #0
   12c28:	beq	12c50 <__assert_fail@plt+0x1ac4>
   12c2c:	movw	r3, #33284	; 0x8204
   12c30:	movt	r3, #2
   12c34:	ldrb	r3, [r3, #4]
   12c38:	cmp	r3, #0
   12c3c:	beq	12c7c <__assert_fail@plt+0x1af0>
   12c40:	bl	11090 <__errno_location@plt>
   12c44:	ldr	r3, [r0]
   12c48:	cmp	r3, #32
   12c4c:	bne	12c7c <__assert_fail@plt+0x1af0>
   12c50:	movw	r3, #33144	; 0x8178
   12c54:	movt	r3, #2
   12c58:	ldr	r0, [r3]
   12c5c:	bl	15ff0 <__assert_fail@plt+0x4e64>
   12c60:	cmp	r0, #0
   12c64:	bne	12d04 <__assert_fail@plt+0x1b78>
   12c68:	add	sp, sp, #8
   12c6c:	ldrd	r4, [sp]
   12c70:	ldr	r6, [sp, #8]
   12c74:	add	sp, sp, #12
   12c78:	pop	{pc}		; (ldr pc, [sp], #4)
   12c7c:	mov	r2, #5
   12c80:	movw	r1, #28680	; 0x7008
   12c84:	movt	r1, #1
   12c88:	mov	r0, #0
   12c8c:	bl	10f4c <dcgettext@plt>
   12c90:	mov	r4, r0
   12c94:	movw	r3, #33284	; 0x8204
   12c98:	movt	r3, #2
   12c9c:	ldr	r5, [r3]
   12ca0:	cmp	r5, #0
   12ca4:	beq	12ce4 <__assert_fail@plt+0x1b58>
   12ca8:	bl	11090 <__errno_location@plt>
   12cac:	ldr	r6, [r0]
   12cb0:	mov	r0, r5
   12cb4:	bl	14fc0 <__assert_fail@plt+0x3e34>
   12cb8:	str	r4, [sp]
   12cbc:	mov	r3, r0
   12cc0:	movw	r2, #28692	; 0x7014
   12cc4:	movt	r2, #1
   12cc8:	mov	r1, r6
   12ccc:	mov	r0, #0
   12cd0:	bl	10fd0 <error@plt>
   12cd4:	movw	r3, #33060	; 0x8124
   12cd8:	movt	r3, #2
   12cdc:	ldr	r0, [r3]
   12ce0:	bl	10ef8 <_exit@plt>
   12ce4:	bl	11090 <__errno_location@plt>
   12ce8:	mov	r3, r4
   12cec:	movw	r2, #28696	; 0x7018
   12cf0:	movt	r2, #1
   12cf4:	ldr	r1, [r0]
   12cf8:	mov	r0, #0
   12cfc:	bl	10fd0 <error@plt>
   12d00:	b	12cd4 <__assert_fail@plt+0x1b48>
   12d04:	movw	r3, #33060	; 0x8124
   12d08:	movt	r3, #2
   12d0c:	ldr	r0, [r3]
   12d10:	bl	10ef8 <_exit@plt>
   12d14:	strd	r4, [sp, #-12]!
   12d18:	str	lr, [sp, #8]
   12d1c:	sub	sp, sp, #12
   12d20:	mov	r5, r0
   12d24:	bl	11090 <__errno_location@plt>
   12d28:	mov	r4, r0
   12d2c:	ldr	r3, [r0]
   12d30:	str	r3, [sp]
   12d34:	str	r3, [sp, #4]
   12d38:	mov	r3, #0
   12d3c:	str	r3, [r0]
   12d40:	mov	r0, r5
   12d44:	bl	10ee0 <free@plt>
   12d48:	ldr	r3, [r4]
   12d4c:	clz	r3, r3
   12d50:	lsr	r3, r3, #5
   12d54:	add	r2, sp, #8
   12d58:	add	r3, r2, r3, lsl #2
   12d5c:	ldr	r3, [r3, #-8]
   12d60:	str	r3, [r4]
   12d64:	add	sp, sp, #12
   12d68:	ldrd	r4, [sp]
   12d6c:	add	sp, sp, #8
   12d70:	pop	{pc}		; (ldr pc, [sp], #4)
   12d74:	push	{lr}		; (str lr, [sp, #-4]!)
   12d78:	sub	sp, sp, #268	; 0x10c
   12d7c:	movw	r2, #257	; 0x101
   12d80:	add	r1, sp, #4
   12d84:	bl	15398 <__assert_fail@plt+0x420c>
   12d88:	cmp	r0, #0
   12d8c:	movne	r0, #0
   12d90:	bne	12dc8 <__assert_fail@plt+0x1c3c>
   12d94:	movw	r1, #28700	; 0x701c
   12d98:	movt	r1, #1
   12d9c:	add	r0, sp, #4
   12da0:	bl	10ebc <strcmp@plt>
   12da4:	cmp	r0, #0
   12da8:	beq	12dc4 <__assert_fail@plt+0x1c38>
   12dac:	movw	r1, #28704	; 0x7020
   12db0:	movt	r1, #1
   12db4:	add	r0, sp, #4
   12db8:	bl	10ebc <strcmp@plt>
   12dbc:	adds	r0, r0, #0
   12dc0:	movne	r0, #1
   12dc4:	and	r0, r0, #1
   12dc8:	add	sp, sp, #268	; 0x10c
   12dcc:	pop	{pc}		; (ldr pc, [sp], #4)
   12dd0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12dd4:	strd	r6, [sp, #8]
   12dd8:	strd	r8, [sp, #16]
   12ddc:	str	sl, [sp, #24]
   12de0:	str	lr, [sp, #28]
   12de4:	mov	r4, r0
   12de8:	mov	r5, r1
   12dec:	add	r6, r2, #20
   12df0:	mov	r3, #0
   12df4:	strb	r3, [r2, #20]
   12df8:	cmp	r0, #0
   12dfc:	sbcs	r3, r1, #0
   12e00:	movge	r8, #10
   12e04:	movge	r9, #0
   12e08:	movlt	r8, #10
   12e0c:	movlt	r9, #0
   12e10:	blt	12e74 <__assert_fail@plt+0x1ce8>
   12e14:	mov	r2, r8
   12e18:	mov	r3, r9
   12e1c:	mov	r0, r4
   12e20:	mov	r1, r5
   12e24:	bl	16358 <__assert_fail@plt+0x51cc>
   12e28:	add	r2, r2, #48	; 0x30
   12e2c:	strb	r2, [r6, #-1]!
   12e30:	mov	r2, r8
   12e34:	mov	r3, r9
   12e38:	mov	r0, r4
   12e3c:	mov	r1, r5
   12e40:	bl	16358 <__assert_fail@plt+0x51cc>
   12e44:	mov	r4, r0
   12e48:	mov	r5, r1
   12e4c:	orrs	r3, r4, r5
   12e50:	bne	12e14 <__assert_fail@plt+0x1c88>
   12e54:	mov	r0, r6
   12e58:	ldrd	r4, [sp]
   12e5c:	ldrd	r6, [sp, #8]
   12e60:	ldrd	r8, [sp, #16]
   12e64:	ldr	sl, [sp, #24]
   12e68:	add	sp, sp, #28
   12e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   12e70:	mov	r6, r7
   12e74:	sub	r7, r6, #1
   12e78:	mov	r2, r8
   12e7c:	mov	r3, r9
   12e80:	mov	r0, r4
   12e84:	mov	r1, r5
   12e88:	bl	16358 <__assert_fail@plt+0x51cc>
   12e8c:	rsb	r2, r2, #48	; 0x30
   12e90:	strb	r2, [r6, #-1]
   12e94:	mov	r2, r8
   12e98:	mov	r3, r9
   12e9c:	mov	r0, r4
   12ea0:	mov	r1, r5
   12ea4:	bl	16358 <__assert_fail@plt+0x51cc>
   12ea8:	mov	r4, r0
   12eac:	mov	r5, r1
   12eb0:	orrs	r3, r4, r5
   12eb4:	bne	12e70 <__assert_fail@plt+0x1ce4>
   12eb8:	sub	r6, r6, #2
   12ebc:	mov	r3, #45	; 0x2d
   12ec0:	strb	r3, [r7, #-1]
   12ec4:	b	12e54 <__assert_fail@plt+0x1cc8>
   12ec8:	strd	r4, [sp, #-16]!
   12ecc:	str	r6, [sp, #8]
   12ed0:	str	lr, [sp, #12]
   12ed4:	subs	r4, r0, #0
   12ed8:	beq	12f74 <__assert_fail@plt+0x1de8>
   12edc:	mov	r1, #47	; 0x2f
   12ee0:	mov	r0, r4
   12ee4:	bl	11120 <strrchr@plt>
   12ee8:	subs	r5, r0, #0
   12eec:	beq	12f4c <__assert_fail@plt+0x1dc0>
   12ef0:	add	r6, r5, #1
   12ef4:	sub	r3, r6, r4
   12ef8:	cmp	r3, #6
   12efc:	ble	12f4c <__assert_fail@plt+0x1dc0>
   12f00:	mov	r2, #7
   12f04:	movw	r1, #28768	; 0x7060
   12f08:	movt	r1, #1
   12f0c:	sub	r0, r5, #6
   12f10:	bl	11168 <strncmp@plt>
   12f14:	cmp	r0, #0
   12f18:	bne	12f4c <__assert_fail@plt+0x1dc0>
   12f1c:	mov	r2, #3
   12f20:	movw	r1, #28776	; 0x7068
   12f24:	movt	r1, #1
   12f28:	mov	r0, r6
   12f2c:	bl	11168 <strncmp@plt>
   12f30:	cmp	r0, #0
   12f34:	movne	r4, r6
   12f38:	bne	12f4c <__assert_fail@plt+0x1dc0>
   12f3c:	add	r4, r5, #4
   12f40:	movw	r3, #33128	; 0x8168
   12f44:	movt	r3, #2
   12f48:	str	r4, [r3]
   12f4c:	movw	r3, #33292	; 0x820c
   12f50:	movt	r3, #2
   12f54:	str	r4, [r3]
   12f58:	movw	r3, #33132	; 0x816c
   12f5c:	movt	r3, #2
   12f60:	str	r4, [r3]
   12f64:	ldrd	r4, [sp]
   12f68:	ldr	r6, [sp, #8]
   12f6c:	add	sp, sp, #12
   12f70:	pop	{pc}		; (ldr pc, [sp], #4)
   12f74:	movw	r3, #33144	; 0x8178
   12f78:	movt	r3, #2
   12f7c:	ldr	r3, [r3]
   12f80:	mov	r2, #55	; 0x37
   12f84:	mov	r1, #1
   12f88:	movw	r0, #28712	; 0x7028
   12f8c:	movt	r0, #1
   12f90:	bl	10f94 <fwrite@plt>
   12f94:	bl	11174 <abort@plt>
   12f98:	mov	r2, #0
   12f9c:	mov	r3, #0
   12fa0:	strd	r2, [r0]
   12fa4:	strd	r2, [r0, #8]
   12fa8:	strd	r2, [r0, #16]
   12fac:	strd	r2, [r0, #24]
   12fb0:	strd	r2, [r0, #32]
   12fb4:	strd	r2, [r0, #40]	; 0x28
   12fb8:	cmp	r1, #10
   12fbc:	beq	12fc8 <__assert_fail@plt+0x1e3c>
   12fc0:	str	r1, [r0]
   12fc4:	bx	lr
   12fc8:	str	r4, [sp, #-8]!
   12fcc:	str	lr, [sp, #4]
   12fd0:	bl	11174 <abort@plt>
   12fd4:	strd	r4, [sp, #-16]!
   12fd8:	str	r6, [sp, #8]
   12fdc:	str	lr, [sp, #12]
   12fe0:	mov	r5, r0
   12fe4:	mov	r6, r1
   12fe8:	mov	r2, #5
   12fec:	mov	r1, r0
   12ff0:	mov	r0, #0
   12ff4:	bl	10f4c <dcgettext@plt>
   12ff8:	mov	r4, r0
   12ffc:	cmp	r5, r0
   13000:	beq	13018 <__assert_fail@plt+0x1e8c>
   13004:	mov	r0, r4
   13008:	ldrd	r4, [sp]
   1300c:	ldr	r6, [sp, #8]
   13010:	add	sp, sp, #12
   13014:	pop	{pc}		; (ldr pc, [sp], #4)
   13018:	bl	16268 <__assert_fail@plt+0x50dc>
   1301c:	ldrb	r3, [r0]
   13020:	bic	r3, r3, #32
   13024:	cmp	r3, #85	; 0x55
   13028:	bne	130ac <__assert_fail@plt+0x1f20>
   1302c:	ldrb	r3, [r0, #1]
   13030:	bic	r3, r3, #32
   13034:	cmp	r3, #84	; 0x54
   13038:	bne	13070 <__assert_fail@plt+0x1ee4>
   1303c:	ldrb	r3, [r0, #2]
   13040:	bic	r3, r3, #32
   13044:	cmp	r3, #70	; 0x46
   13048:	bne	13070 <__assert_fail@plt+0x1ee4>
   1304c:	ldrb	r3, [r0, #3]
   13050:	cmp	r3, #45	; 0x2d
   13054:	bne	13070 <__assert_fail@plt+0x1ee4>
   13058:	ldrb	r3, [r0, #4]
   1305c:	cmp	r3, #56	; 0x38
   13060:	bne	13070 <__assert_fail@plt+0x1ee4>
   13064:	ldrb	r3, [r0, #5]
   13068:	cmp	r3, #0
   1306c:	beq	1308c <__assert_fail@plt+0x1f00>
   13070:	movw	r4, #28864	; 0x70c0
   13074:	movt	r4, #1
   13078:	movw	r3, #28884	; 0x70d4
   1307c:	movt	r3, #1
   13080:	cmp	r6, #9
   13084:	movne	r4, r3
   13088:	b	13004 <__assert_fail@plt+0x1e78>
   1308c:	ldrb	r2, [r4]
   13090:	movw	r4, #28880	; 0x70d0
   13094:	movt	r4, #1
   13098:	movw	r3, #28868	; 0x70c4
   1309c:	movt	r3, #1
   130a0:	cmp	r2, #96	; 0x60
   130a4:	movne	r4, r3
   130a8:	b	13004 <__assert_fail@plt+0x1e78>
   130ac:	cmp	r3, #71	; 0x47
   130b0:	bne	13070 <__assert_fail@plt+0x1ee4>
   130b4:	ldrb	r3, [r0, #1]
   130b8:	bic	r3, r3, #32
   130bc:	cmp	r3, #66	; 0x42
   130c0:	bne	13070 <__assert_fail@plt+0x1ee4>
   130c4:	ldrb	r3, [r0, #2]
   130c8:	cmp	r3, #49	; 0x31
   130cc:	bne	13070 <__assert_fail@plt+0x1ee4>
   130d0:	ldrb	r3, [r0, #3]
   130d4:	cmp	r3, #56	; 0x38
   130d8:	bne	13070 <__assert_fail@plt+0x1ee4>
   130dc:	ldrb	r3, [r0, #4]
   130e0:	cmp	r3, #48	; 0x30
   130e4:	bne	13070 <__assert_fail@plt+0x1ee4>
   130e8:	ldrb	r3, [r0, #5]
   130ec:	cmp	r3, #51	; 0x33
   130f0:	bne	13070 <__assert_fail@plt+0x1ee4>
   130f4:	ldrb	r3, [r0, #6]
   130f8:	cmp	r3, #48	; 0x30
   130fc:	bne	13070 <__assert_fail@plt+0x1ee4>
   13100:	ldrb	r3, [r0, #7]
   13104:	cmp	r3, #0
   13108:	bne	13070 <__assert_fail@plt+0x1ee4>
   1310c:	ldrb	r2, [r4]
   13110:	movw	r4, #28876	; 0x70cc
   13114:	movt	r4, #1
   13118:	movw	r3, #28872	; 0x70c8
   1311c:	movt	r3, #1
   13120:	cmp	r2, #96	; 0x60
   13124:	movne	r4, r3
   13128:	b	13004 <__assert_fail@plt+0x1e78>
   1312c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13130:	strd	r6, [sp, #8]
   13134:	strd	r8, [sp, #16]
   13138:	strd	sl, [sp, #24]
   1313c:	str	lr, [sp, #32]
   13140:	sub	sp, sp, #116	; 0x74
   13144:	str	r0, [sp, #64]	; 0x40
   13148:	mov	r8, r1
   1314c:	str	r2, [sp, #48]	; 0x30
   13150:	str	r3, [sp, #24]
   13154:	ldr	r7, [sp, #152]	; 0x98
   13158:	bl	10fac <__ctype_get_mb_cur_max@plt>
   1315c:	str	r0, [sp, #76]	; 0x4c
   13160:	ldr	r3, [sp, #156]	; 0x9c
   13164:	ubfx	r3, r3, #1, #1
   13168:	str	r3, [sp, #32]
   1316c:	mov	r3, #1
   13170:	str	r3, [sp, #40]	; 0x28
   13174:	mov	r3, #0
   13178:	str	r3, [sp, #68]	; 0x44
   1317c:	str	r3, [sp, #36]	; 0x24
   13180:	str	r3, [sp, #28]
   13184:	str	r3, [sp, #52]	; 0x34
   13188:	str	r3, [sp, #60]	; 0x3c
   1318c:	str	r3, [sp, #72]	; 0x48
   13190:	movw	r3, #28888	; 0x70d8
   13194:	movt	r3, #1
   13198:	str	r3, [sp, #80]	; 0x50
   1319c:	mov	r9, r8
   131a0:	mov	sl, r7
   131a4:	cmp	sl, #10
   131a8:	ldrls	pc, [pc, sl, lsl #2]
   131ac:	b	13370 <__assert_fail@plt+0x21e4>
   131b0:	andeq	r3, r1, r0, lsl r2
   131b4:	andeq	r3, r1, r4, ror #3
   131b8:	andeq	r3, r1, r8, asr #6
   131bc:	ldrdeq	r3, [r1], -ip
   131c0:	strdeq	r3, [r1], -ip
   131c4:	andeq	r3, r1, r0, lsr #4
   131c8:	andeq	r4, r1, ip, ror #11
   131cc:	andeq	r3, r1, r4, ror r3
   131d0:	andeq	r3, r1, ip, asr r2
   131d4:	andeq	r3, r1, ip, asr r2
   131d8:	andeq	r3, r1, ip, asr r2
   131dc:	mov	r3, #1
   131e0:	str	r3, [sp, #28]
   131e4:	mov	r3, #1
   131e8:	str	r3, [sp, #32]
   131ec:	str	r3, [sp, #52]	; 0x34
   131f0:	movw	r3, #28884	; 0x70d4
   131f4:	movt	r3, #1
   131f8:	str	r3, [sp, #60]	; 0x3c
   131fc:	mov	fp, #0
   13200:	mov	sl, #2
   13204:	mov	r6, #0
   13208:	ldr	r8, [sp, #64]	; 0x40
   1320c:	b	13a84 <__assert_fail@plt+0x28f8>
   13210:	mov	fp, sl
   13214:	mov	r3, #0
   13218:	str	r3, [sp, #32]
   1321c:	b	13204 <__assert_fail@plt+0x2078>
   13220:	ldr	r3, [sp, #32]
   13224:	cmp	r3, #0
   13228:	bne	13388 <__assert_fail@plt+0x21fc>
   1322c:	cmp	r9, #0
   13230:	beq	133ac <__assert_fail@plt+0x2220>
   13234:	mov	r3, #34	; 0x22
   13238:	ldr	r2, [sp, #64]	; 0x40
   1323c:	strb	r3, [r2]
   13240:	mov	fp, #1
   13244:	str	fp, [sp, #28]
   13248:	str	fp, [sp, #52]	; 0x34
   1324c:	movw	r3, #28864	; 0x70c0
   13250:	movt	r3, #1
   13254:	str	r3, [sp, #60]	; 0x3c
   13258:	b	13204 <__assert_fail@plt+0x2078>
   1325c:	cmp	sl, #10
   13260:	bne	13294 <__assert_fail@plt+0x2108>
   13264:	ldr	r3, [sp, #32]
   13268:	cmp	r3, #0
   1326c:	movne	fp, #0
   13270:	beq	132bc <__assert_fail@plt+0x2130>
   13274:	ldr	r0, [sp, #168]	; 0xa8
   13278:	bl	11078 <strlen@plt>
   1327c:	str	r0, [sp, #52]	; 0x34
   13280:	ldr	r3, [sp, #168]	; 0xa8
   13284:	str	r3, [sp, #60]	; 0x3c
   13288:	mov	r3, #1
   1328c:	str	r3, [sp, #28]
   13290:	b	13204 <__assert_fail@plt+0x2078>
   13294:	mov	r1, sl
   13298:	ldr	r0, [sp, #80]	; 0x50
   1329c:	bl	12fd4 <__assert_fail@plt+0x1e48>
   132a0:	str	r0, [sp, #164]	; 0xa4
   132a4:	mov	r1, sl
   132a8:	movw	r0, #28884	; 0x70d4
   132ac:	movt	r0, #1
   132b0:	bl	12fd4 <__assert_fail@plt+0x1e48>
   132b4:	str	r0, [sp, #168]	; 0xa8
   132b8:	b	13264 <__assert_fail@plt+0x20d8>
   132bc:	ldr	r3, [sp, #164]	; 0xa4
   132c0:	ldrb	r3, [r3]
   132c4:	cmp	r3, #0
   132c8:	beq	132f4 <__assert_fail@plt+0x2168>
   132cc:	ldr	r2, [sp, #164]	; 0xa4
   132d0:	mov	fp, #0
   132d4:	ldr	r1, [sp, #64]	; 0x40
   132d8:	cmp	r9, fp
   132dc:	strbhi	r3, [r1, fp]
   132e0:	add	fp, fp, #1
   132e4:	ldrb	r3, [r2, #1]!
   132e8:	cmp	r3, #0
   132ec:	bne	132d8 <__assert_fail@plt+0x214c>
   132f0:	b	13274 <__assert_fail@plt+0x20e8>
   132f4:	mov	fp, #0
   132f8:	b	13274 <__assert_fail@plt+0x20e8>
   132fc:	ldr	r3, [sp, #32]
   13300:	cmp	r3, #0
   13304:	bne	131e4 <__assert_fail@plt+0x2058>
   13308:	mov	r3, #1
   1330c:	str	r3, [sp, #28]
   13310:	cmp	r9, #0
   13314:	beq	133c8 <__assert_fail@plt+0x223c>
   13318:	mov	r3, #39	; 0x27
   1331c:	ldr	r2, [sp, #64]	; 0x40
   13320:	strb	r3, [r2]
   13324:	mov	r3, #0
   13328:	str	r3, [sp, #32]
   1332c:	mov	fp, #1
   13330:	str	fp, [sp, #52]	; 0x34
   13334:	movw	r3, #28884	; 0x70d4
   13338:	movt	r3, #1
   1333c:	str	r3, [sp, #60]	; 0x3c
   13340:	mov	sl, #2
   13344:	b	13204 <__assert_fail@plt+0x2078>
   13348:	ldr	r3, [sp, #32]
   1334c:	cmp	r3, #0
   13350:	beq	13310 <__assert_fail@plt+0x2184>
   13354:	mov	r3, #1
   13358:	str	r3, [sp, #52]	; 0x34
   1335c:	movw	r3, #28884	; 0x70d4
   13360:	movt	r3, #1
   13364:	str	r3, [sp, #60]	; 0x3c
   13368:	mov	fp, #0
   1336c:	b	13204 <__assert_fail@plt+0x2078>
   13370:	bl	11174 <abort@plt>
   13374:	mov	fp, #0
   13378:	str	fp, [sp, #32]
   1337c:	mov	r3, #1
   13380:	str	r3, [sp, #28]
   13384:	b	13204 <__assert_fail@plt+0x2078>
   13388:	ldr	r3, [sp, #32]
   1338c:	str	r3, [sp, #28]
   13390:	mov	r3, #1
   13394:	str	r3, [sp, #52]	; 0x34
   13398:	movw	r3, #28864	; 0x70c0
   1339c:	movt	r3, #1
   133a0:	str	r3, [sp, #60]	; 0x3c
   133a4:	mov	fp, #0
   133a8:	b	13204 <__assert_fail@plt+0x2078>
   133ac:	mov	fp, #1
   133b0:	str	fp, [sp, #28]
   133b4:	str	fp, [sp, #52]	; 0x34
   133b8:	movw	r3, #28864	; 0x70c0
   133bc:	movt	r3, #1
   133c0:	str	r3, [sp, #60]	; 0x3c
   133c4:	b	13204 <__assert_fail@plt+0x2078>
   133c8:	mov	r3, #0
   133cc:	str	r3, [sp, #32]
   133d0:	mov	fp, #1
   133d4:	str	fp, [sp, #52]	; 0x34
   133d8:	movw	r3, #28884	; 0x70d4
   133dc:	movt	r3, #1
   133e0:	str	r3, [sp, #60]	; 0x3c
   133e4:	mov	sl, #2
   133e8:	b	13204 <__assert_fail@plt+0x2078>
   133ec:	mov	r3, r2
   133f0:	add	r4, r6, r2
   133f4:	ldr	r2, [sp, #24]
   133f8:	cmp	r3, #1
   133fc:	movls	r3, #0
   13400:	movhi	r3, #1
   13404:	cmn	r2, #1
   13408:	movne	r3, #0
   1340c:	cmp	r3, #0
   13410:	beq	13420 <__assert_fail@plt+0x2294>
   13414:	ldr	r0, [sp, #48]	; 0x30
   13418:	bl	11078 <strlen@plt>
   1341c:	str	r0, [sp, #24]
   13420:	ldr	r3, [sp, #24]
   13424:	cmp	r4, r3
   13428:	bhi	14614 <__assert_fail@plt+0x3488>
   1342c:	ldr	r3, [sp, #48]	; 0x30
   13430:	add	r4, r3, r6
   13434:	ldr	r2, [sp, #52]	; 0x34
   13438:	ldr	r1, [sp, #60]	; 0x3c
   1343c:	mov	r0, r4
   13440:	bl	10f28 <memcmp@plt>
   13444:	cmp	r0, #0
   13448:	bne	14614 <__assert_fail@plt+0x3488>
   1344c:	ldr	r3, [sp, #32]
   13450:	cmp	r3, #0
   13454:	bne	13664 <__assert_fail@plt+0x24d8>
   13458:	ldrb	r4, [r4]
   1345c:	cmp	r4, #126	; 0x7e
   13460:	ldrls	pc, [pc, r4, lsl #2]
   13464:	b	13f18 <__assert_fail@plt+0x2d8c>
   13468:	andeq	r3, r1, r8, lsr #13
   1346c:	andeq	r3, r1, r8, lsl pc
   13470:	andeq	r3, r1, r8, lsl pc
   13474:	andeq	r3, r1, r8, lsl pc
   13478:	andeq	r3, r1, r8, lsl pc
   1347c:	andeq	r3, r1, r8, lsl pc
   13480:	andeq	r3, r1, r8, lsl pc
   13484:	andeq	r3, r1, r0, asr #27
   13488:	andeq	r3, r1, r4, asr #18
   1348c:	andeq	r3, r1, r8, ror #25
   13490:	muleq	r1, r4, sp
   13494:	strdeq	r3, [r1], -ip
   13498:	andeq	r3, r1, r8, asr r9
   1349c:	andeq	r3, r1, ip, ror #18
   134a0:	andeq	r3, r1, r8, lsl pc
   134a4:	andeq	r3, r1, r8, lsl pc
   134a8:	andeq	r3, r1, r8, lsl pc
   134ac:	andeq	r3, r1, r8, lsl pc
   134b0:	andeq	r3, r1, r8, lsl pc
   134b4:	andeq	r3, r1, r8, lsl pc
   134b8:	andeq	r3, r1, r8, lsl pc
   134bc:	andeq	r3, r1, r8, lsl pc
   134c0:	andeq	r3, r1, r8, lsl pc
   134c4:	andeq	r3, r1, r8, lsl pc
   134c8:	andeq	r3, r1, r8, lsl pc
   134cc:	andeq	r3, r1, r8, lsl pc
   134d0:	andeq	r3, r1, r8, lsl pc
   134d4:	andeq	r3, r1, r8, lsl pc
   134d8:	andeq	r3, r1, r8, lsl pc
   134dc:	andeq	r3, r1, r8, lsl pc
   134e0:	andeq	r3, r1, r8, lsl pc
   134e4:	andeq	r3, r1, r8, lsl pc
   134e8:	andeq	r3, r1, r4, lsr lr
   134ec:	andeq	r3, r1, r8, asr lr
   134f0:	andeq	r3, r1, r8, asr lr
   134f4:	strdeq	r3, [r1], -r0
   134f8:	andeq	r3, r1, r8, asr lr
   134fc:	andeq	r4, r1, r8, ror r3
   13500:	andeq	r3, r1, r8, asr lr
   13504:	andeq	r3, r1, r8, ror lr
   13508:	andeq	r3, r1, r8, asr lr
   1350c:	andeq	r3, r1, r8, asr lr
   13510:	andeq	r3, r1, r8, asr lr
   13514:	andeq	r4, r1, r8, ror r3
   13518:	andeq	r4, r1, r8, ror r3
   1351c:	andeq	r4, r1, r8, ror r3
   13520:	andeq	r4, r1, r8, ror r3
   13524:	andeq	r4, r1, r8, ror r3
   13528:	andeq	r4, r1, r8, ror r3
   1352c:	andeq	r4, r1, r8, ror r3
   13530:	andeq	r4, r1, r8, ror r3
   13534:	andeq	r4, r1, r8, ror r3
   13538:	andeq	r4, r1, r8, ror r3
   1353c:	andeq	r4, r1, r8, ror r3
   13540:	andeq	r4, r1, r8, ror r3
   13544:	andeq	r4, r1, r8, ror r3
   13548:	andeq	r4, r1, r8, ror r3
   1354c:	andeq	r4, r1, r8, ror r3
   13550:	andeq	r4, r1, r8, ror r3
   13554:	andeq	r3, r1, r8, asr lr
   13558:	andeq	r3, r1, r8, asr lr
   1355c:	andeq	r3, r1, r8, asr lr
   13560:	andeq	r3, r1, r8, asr lr
   13564:	ldrdeq	r3, [r1], -r8
   13568:	andeq	r3, r1, r8, lsl pc
   1356c:	andeq	r4, r1, r8, ror r3
   13570:	andeq	r4, r1, r8, ror r3
   13574:	andeq	r4, r1, r8, ror r3
   13578:	andeq	r4, r1, r8, ror r3
   1357c:	andeq	r4, r1, r8, ror r3
   13580:	andeq	r4, r1, r8, ror r3
   13584:	andeq	r4, r1, r8, ror r3
   13588:	andeq	r4, r1, r8, ror r3
   1358c:	andeq	r4, r1, r8, ror r3
   13590:	andeq	r4, r1, r8, ror r3
   13594:	andeq	r4, r1, r8, ror r3
   13598:	andeq	r4, r1, r8, ror r3
   1359c:	andeq	r4, r1, r8, ror r3
   135a0:	andeq	r4, r1, r8, ror r3
   135a4:	andeq	r4, r1, r8, ror r3
   135a8:	andeq	r4, r1, r8, ror r3
   135ac:	andeq	r4, r1, r8, ror r3
   135b0:	andeq	r4, r1, r8, ror r3
   135b4:	andeq	r4, r1, r8, ror r3
   135b8:	andeq	r4, r1, r8, ror r3
   135bc:	andeq	r4, r1, r8, ror r3
   135c0:	andeq	r4, r1, r8, ror r3
   135c4:	andeq	r4, r1, r8, ror r3
   135c8:	andeq	r4, r1, r8, ror r3
   135cc:	andeq	r4, r1, r8, ror r3
   135d0:	andeq	r4, r1, r8, ror r3
   135d4:	andeq	r3, r1, r8, asr lr
   135d8:	andeq	r3, r1, r0, lsl sp
   135dc:	andeq	r4, r1, r8, ror r3
   135e0:	andeq	r3, r1, r8, asr lr
   135e4:	andeq	r4, r1, r8, ror r3
   135e8:	andeq	r3, r1, r8, asr lr
   135ec:	andeq	r4, r1, r8, ror r3
   135f0:	andeq	r4, r1, r8, ror r3
   135f4:	andeq	r4, r1, r8, ror r3
   135f8:	andeq	r4, r1, r8, ror r3
   135fc:	andeq	r4, r1, r8, ror r3
   13600:	andeq	r4, r1, r8, ror r3
   13604:	andeq	r4, r1, r8, ror r3
   13608:	andeq	r4, r1, r8, ror r3
   1360c:	andeq	r4, r1, r8, ror r3
   13610:	andeq	r4, r1, r8, ror r3
   13614:	andeq	r4, r1, r8, ror r3
   13618:	andeq	r4, r1, r8, ror r3
   1361c:	andeq	r4, r1, r8, ror r3
   13620:	andeq	r4, r1, r8, ror r3
   13624:	andeq	r4, r1, r8, ror r3
   13628:	andeq	r4, r1, r8, ror r3
   1362c:	andeq	r4, r1, r8, ror r3
   13630:	andeq	r4, r1, r8, ror r3
   13634:	andeq	r4, r1, r8, ror r3
   13638:	andeq	r4, r1, r8, ror r3
   1363c:	andeq	r4, r1, r8, ror r3
   13640:	andeq	r4, r1, r8, ror r3
   13644:	andeq	r4, r1, r8, ror r3
   13648:	andeq	r4, r1, r8, ror r3
   1364c:	andeq	r4, r1, r8, ror r3
   13650:	andeq	r4, r1, r8, ror r3
   13654:	ldrdeq	r3, [r1], -r0
   13658:	andeq	r3, r1, r8, asr lr
   1365c:	ldrdeq	r3, [r1], -r0
   13660:	strdeq	r3, [r1], -r0
   13664:	mov	r8, r9
   13668:	mov	r7, sl
   1366c:	b	1456c <__assert_fail@plt+0x33e0>
   13670:	ldr	r3, [sp, #28]
   13674:	cmp	r3, #0
   13678:	bne	13698 <__assert_fail@plt+0x250c>
   1367c:	ldr	r3, [sp, #156]	; 0x9c
   13680:	tst	r3, #1
   13684:	bne	13a80 <__assert_fail@plt+0x28f4>
   13688:	ldr	r3, [sp, #28]
   1368c:	str	r3, [sp, #44]	; 0x2c
   13690:	mov	r5, r3
   13694:	b	139a0 <__assert_fail@plt+0x2814>
   13698:	ldr	r3, [sp, #32]
   1369c:	cmp	r3, #0
   136a0:	bne	1451c <__assert_fail@plt+0x3390>
   136a4:	str	r3, [sp, #44]	; 0x2c
   136a8:	ldr	r3, [sp, #36]	; 0x24
   136ac:	eor	r3, r3, #1
   136b0:	cmp	sl, #2
   136b4:	movne	r3, #0
   136b8:	andeq	r3, r3, #1
   136bc:	cmp	r3, #0
   136c0:	beq	13718 <__assert_fail@plt+0x258c>
   136c4:	cmp	r9, fp
   136c8:	movhi	r2, #39	; 0x27
   136cc:	strbhi	r2, [r8, fp]
   136d0:	add	r2, fp, #1
   136d4:	cmp	r9, r2
   136d8:	movhi	r1, #36	; 0x24
   136dc:	strbhi	r1, [r8, r2]
   136e0:	add	r2, fp, #2
   136e4:	cmp	r9, r2
   136e8:	movhi	r1, #39	; 0x27
   136ec:	strbhi	r1, [r8, r2]
   136f0:	add	r2, fp, #3
   136f4:	cmp	r9, r2
   136f8:	bls	145d8 <__assert_fail@plt+0x344c>
   136fc:	mov	r1, #92	; 0x5c
   13700:	strb	r1, [r8, r2]
   13704:	add	fp, fp, #4
   13708:	str	r3, [sp, #36]	; 0x24
   1370c:	mov	r5, #0
   13710:	mov	r4, #48	; 0x30
   13714:	b	139ec <__assert_fail@plt+0x2860>
   13718:	cmp	r9, fp
   1371c:	bhi	13744 <__assert_fail@plt+0x25b8>
   13720:	add	r1, fp, #1
   13724:	ldr	r2, [sp, #56]	; 0x38
   13728:	cmp	r2, #0
   1372c:	bne	1376c <__assert_fail@plt+0x25e0>
   13730:	mov	r3, r5
   13734:	ldr	r5, [sp, #56]	; 0x38
   13738:	mov	fp, r1
   1373c:	mov	r4, #48	; 0x30
   13740:	b	139a0 <__assert_fail@plt+0x2814>
   13744:	mov	r2, #92	; 0x5c
   13748:	strb	r2, [r8, fp]
   1374c:	add	r1, fp, #1
   13750:	ldr	r2, [sp, #56]	; 0x38
   13754:	cmp	r2, #0
   13758:	moveq	r3, r5
   1375c:	moveq	r5, r2
   13760:	moveq	fp, r1
   13764:	moveq	r4, #48	; 0x30
   13768:	beq	139ec <__assert_fail@plt+0x2860>
   1376c:	add	r2, r6, #1
   13770:	ldr	r0, [sp, #24]
   13774:	cmp	r2, r0
   13778:	bcs	13794 <__assert_fail@plt+0x2608>
   1377c:	ldr	r0, [sp, #48]	; 0x30
   13780:	ldrb	r2, [r0, r2]
   13784:	sub	r2, r2, #48	; 0x30
   13788:	uxtb	r2, r2
   1378c:	cmp	r2, #9
   13790:	bls	137ac <__assert_fail@plt+0x2620>
   13794:	mov	r2, r3
   13798:	mov	r3, r5
   1379c:	mov	r5, r2
   137a0:	mov	fp, r1
   137a4:	mov	r4, #48	; 0x30
   137a8:	b	139c4 <__assert_fail@plt+0x2838>
   137ac:	cmp	r9, r1
   137b0:	movhi	r2, #48	; 0x30
   137b4:	strbhi	r2, [r8, r1]
   137b8:	add	r2, fp, #2
   137bc:	cmp	r9, r2
   137c0:	movhi	r1, #48	; 0x30
   137c4:	strbhi	r1, [r8, r2]
   137c8:	add	r1, fp, #3
   137cc:	b	13794 <__assert_fail@plt+0x2608>
   137d0:	mov	r3, #0
   137d4:	str	r3, [sp, #44]	; 0x2c
   137d8:	cmp	sl, #2
   137dc:	beq	137f8 <__assert_fail@plt+0x266c>
   137e0:	cmp	sl, #5
   137e4:	beq	13810 <__assert_fail@plt+0x2684>
   137e8:	mov	r5, #0
   137ec:	mov	r3, r5
   137f0:	mov	r4, #63	; 0x3f
   137f4:	b	139a0 <__assert_fail@plt+0x2814>
   137f8:	ldr	r3, [sp, #32]
   137fc:	cmp	r3, #0
   13800:	bne	14528 <__assert_fail@plt+0x339c>
   13804:	mov	r5, r3
   13808:	mov	r4, #63	; 0x3f
   1380c:	b	13f08 <__assert_fail@plt+0x2d7c>
   13810:	ldr	r3, [sp, #156]	; 0x9c
   13814:	tst	r3, #4
   13818:	beq	14340 <__assert_fail@plt+0x31b4>
   1381c:	add	r2, r6, #2
   13820:	ldr	r3, [sp, #24]
   13824:	cmp	r2, r3
   13828:	bcs	14350 <__assert_fail@plt+0x31c4>
   1382c:	ldr	r3, [sp, #48]	; 0x30
   13830:	add	r3, r3, r6
   13834:	ldrb	r4, [r3, #1]
   13838:	cmp	r4, #63	; 0x3f
   1383c:	movne	r5, #0
   13840:	movne	r3, r5
   13844:	movne	r4, #63	; 0x3f
   13848:	bne	139a0 <__assert_fail@plt+0x2814>
   1384c:	ldr	r3, [sp, #48]	; 0x30
   13850:	ldrb	r1, [r3, r2]
   13854:	sub	r3, r1, #33	; 0x21
   13858:	cmp	r3, #29
   1385c:	ldrls	pc, [pc, r3, lsl #2]
   13860:	b	14360 <__assert_fail@plt+0x31d4>
   13864:	ldrdeq	r3, [r1], -ip
   13868:	andeq	r4, r1, r0, ror #6
   1386c:	andeq	r4, r1, r0, ror #6
   13870:	andeq	r4, r1, r0, ror #6
   13874:	andeq	r4, r1, r0, ror #6
   13878:	andeq	r4, r1, r0, ror #6
   1387c:	ldrdeq	r3, [r1], -ip
   13880:	ldrdeq	r3, [r1], -ip
   13884:	ldrdeq	r3, [r1], -ip
   13888:	andeq	r4, r1, r0, ror #6
   1388c:	andeq	r4, r1, r0, ror #6
   13890:	andeq	r4, r1, r0, ror #6
   13894:	ldrdeq	r3, [r1], -ip
   13898:	andeq	r4, r1, r0, ror #6
   1389c:	ldrdeq	r3, [r1], -ip
   138a0:	andeq	r4, r1, r0, ror #6
   138a4:	andeq	r4, r1, r0, ror #6
   138a8:	andeq	r4, r1, r0, ror #6
   138ac:	andeq	r4, r1, r0, ror #6
   138b0:	andeq	r4, r1, r0, ror #6
   138b4:	andeq	r4, r1, r0, ror #6
   138b8:	andeq	r4, r1, r0, ror #6
   138bc:	andeq	r4, r1, r0, ror #6
   138c0:	andeq	r4, r1, r0, ror #6
   138c4:	andeq	r4, r1, r0, ror #6
   138c8:	andeq	r4, r1, r0, ror #6
   138cc:	andeq	r4, r1, r0, ror #6
   138d0:	ldrdeq	r3, [r1], -ip
   138d4:	ldrdeq	r3, [r1], -ip
   138d8:	ldrdeq	r3, [r1], -ip
   138dc:	ldr	r3, [sp, #32]
   138e0:	cmp	r3, #0
   138e4:	bne	145cc <__assert_fail@plt+0x3440>
   138e8:	cmp	r9, fp
   138ec:	movhi	r3, #63	; 0x3f
   138f0:	strbhi	r3, [r8, fp]
   138f4:	add	r3, fp, #1
   138f8:	cmp	r9, r3
   138fc:	movhi	r0, #34	; 0x22
   13900:	strbhi	r0, [r8, r3]
   13904:	add	r3, fp, #2
   13908:	cmp	r9, r3
   1390c:	movhi	r0, #34	; 0x22
   13910:	strbhi	r0, [r8, r3]
   13914:	add	r3, fp, #3
   13918:	cmp	r9, r3
   1391c:	movhi	r0, #63	; 0x3f
   13920:	strbhi	r0, [r8, r3]
   13924:	add	fp, fp, #4
   13928:	ldr	r3, [sp, #32]
   1392c:	mov	r5, r3
   13930:	mov	r4, r1
   13934:	mov	r6, r2
   13938:	b	139a0 <__assert_fail@plt+0x2814>
   1393c:	mov	r3, #0
   13940:	str	r3, [sp, #44]	; 0x2c
   13944:	mov	r4, #8
   13948:	mov	r3, #98	; 0x62
   1394c:	b	1398c <__assert_fail@plt+0x2800>
   13950:	mov	r3, #0
   13954:	str	r3, [sp, #44]	; 0x2c
   13958:	mov	r4, #12
   1395c:	mov	r3, #102	; 0x66
   13960:	b	1398c <__assert_fail@plt+0x2800>
   13964:	mov	r3, #0
   13968:	str	r3, [sp, #44]	; 0x2c
   1396c:	mov	r4, #13
   13970:	mov	r3, #114	; 0x72
   13974:	ldr	r2, [sp, #32]
   13978:	cmp	sl, #2
   1397c:	movne	r2, #0
   13980:	andeq	r2, r2, #1
   13984:	cmp	r2, #0
   13988:	bne	13dac <__assert_fail@plt+0x2c20>
   1398c:	ldr	r2, [sp, #28]
   13990:	cmp	r2, #0
   13994:	bne	14394 <__assert_fail@plt+0x3208>
   13998:	mov	r5, r2
   1399c:	mov	r3, r2
   139a0:	ldr	r2, [sp, #28]
   139a4:	eor	r2, r2, #1
   139a8:	cmp	sl, #2
   139ac:	orreq	r2, r2, #1
   139b0:	eor	r2, r2, #1
   139b4:	ldr	r1, [sp, #32]
   139b8:	orr	r2, r1, r2
   139bc:	tst	r2, #255	; 0xff
   139c0:	beq	139ec <__assert_fail@plt+0x2860>
   139c4:	ldr	r2, [sp, #160]	; 0xa0
   139c8:	cmp	r2, #0
   139cc:	beq	139ec <__assert_fail@plt+0x2860>
   139d0:	ubfx	r1, r4, #5, #8
   139d4:	and	r2, r4, #31
   139d8:	ldr	r0, [sp, #160]	; 0xa0
   139dc:	ldr	r1, [r0, r1, lsl #2]
   139e0:	lsr	r2, r1, r2
   139e4:	tst	r2, #1
   139e8:	bne	139f8 <__assert_fail@plt+0x286c>
   139ec:	ldr	r2, [sp, #44]	; 0x2c
   139f0:	cmp	r2, #0
   139f4:	beq	13d4c <__assert_fail@plt+0x2bc0>
   139f8:	ldr	r3, [sp, #32]
   139fc:	cmp	r3, #0
   13a00:	bne	1454c <__assert_fail@plt+0x33c0>
   13a04:	ldr	r3, [sp, #36]	; 0x24
   13a08:	eor	r3, r3, #1
   13a0c:	cmp	sl, #2
   13a10:	movne	r3, #0
   13a14:	andeq	r3, r3, #1
   13a18:	cmp	r3, #0
   13a1c:	beq	13a54 <__assert_fail@plt+0x28c8>
   13a20:	cmp	r9, fp
   13a24:	movhi	r2, #39	; 0x27
   13a28:	strbhi	r2, [r8, fp]
   13a2c:	add	r2, fp, #1
   13a30:	cmp	r9, r2
   13a34:	movhi	r1, #36	; 0x24
   13a38:	strbhi	r1, [r8, r2]
   13a3c:	add	r2, fp, #2
   13a40:	cmp	r9, r2
   13a44:	movhi	r1, #39	; 0x27
   13a48:	strbhi	r1, [r8, r2]
   13a4c:	add	fp, fp, #3
   13a50:	str	r3, [sp, #36]	; 0x24
   13a54:	cmp	r9, fp
   13a58:	movhi	r3, #92	; 0x5c
   13a5c:	strbhi	r3, [r8, fp]
   13a60:	add	fp, fp, #1
   13a64:	cmp	fp, r9
   13a68:	strbcc	r4, [r8, fp]
   13a6c:	add	fp, fp, #1
   13a70:	cmp	r5, #0
   13a74:	ldr	r3, [sp, #40]	; 0x28
   13a78:	moveq	r3, r5
   13a7c:	str	r3, [sp, #40]	; 0x28
   13a80:	add	r6, r6, #1
   13a84:	ldr	r3, [sp, #24]
   13a88:	cmn	r3, #1
   13a8c:	beq	143bc <__assert_fail@plt+0x3230>
   13a90:	ldr	r3, [sp, #24]
   13a94:	subs	r5, r3, r6
   13a98:	movne	r5, #1
   13a9c:	cmp	r5, #0
   13aa0:	beq	143d0 <__assert_fail@plt+0x3244>
   13aa4:	ldr	r3, [sp, #28]
   13aa8:	cmp	sl, #2
   13aac:	moveq	r3, #0
   13ab0:	andne	r3, r3, #1
   13ab4:	str	r3, [sp, #56]	; 0x38
   13ab8:	ldr	r2, [sp, #52]	; 0x34
   13abc:	adds	r7, r2, #0
   13ac0:	movne	r7, #1
   13ac4:	ands	r3, r3, r7
   13ac8:	str	r3, [sp, #44]	; 0x2c
   13acc:	bne	133ec <__assert_fail@plt+0x2260>
   13ad0:	ldr	r3, [sp, #48]	; 0x30
   13ad4:	ldrb	r4, [r3, r6]
   13ad8:	cmp	r4, #126	; 0x7e
   13adc:	ldrls	pc, [pc, r4, lsl #2]
   13ae0:	b	13f18 <__assert_fail@plt+0x2d8c>
   13ae4:	andeq	r3, r1, r0, ror r6
   13ae8:	andeq	r3, r1, r8, lsl pc
   13aec:	andeq	r3, r1, r8, lsl pc
   13af0:	andeq	r3, r1, r8, lsl pc
   13af4:	andeq	r3, r1, r8, lsl pc
   13af8:	andeq	r3, r1, r8, lsl pc
   13afc:	andeq	r3, r1, r8, lsl pc
   13b00:			; <UNDEFINED> instruction: 0x00013db8
   13b04:	andeq	r3, r1, r4, asr #18
   13b08:	andeq	r3, r1, r8, ror #25
   13b0c:	andeq	r3, r1, ip, lsl #27
   13b10:	strdeq	r3, [r1], -ip
   13b14:	andeq	r3, r1, r8, asr r9
   13b18:	andeq	r3, r1, ip, ror #18
   13b1c:	andeq	r3, r1, r8, lsl pc
   13b20:	andeq	r3, r1, r8, lsl pc
   13b24:	andeq	r3, r1, r8, lsl pc
   13b28:	andeq	r3, r1, r8, lsl pc
   13b2c:	andeq	r3, r1, r8, lsl pc
   13b30:	andeq	r3, r1, r8, lsl pc
   13b34:	andeq	r3, r1, r8, lsl pc
   13b38:	andeq	r3, r1, r8, lsl pc
   13b3c:	andeq	r3, r1, r8, lsl pc
   13b40:	andeq	r3, r1, r8, lsl pc
   13b44:	andeq	r3, r1, r8, lsl pc
   13b48:	andeq	r3, r1, r8, lsl pc
   13b4c:	andeq	r3, r1, r8, lsl pc
   13b50:	andeq	r3, r1, r8, lsl pc
   13b54:	andeq	r3, r1, r8, lsl pc
   13b58:	andeq	r3, r1, r8, lsl pc
   13b5c:	andeq	r3, r1, r8, lsl pc
   13b60:	andeq	r3, r1, r8, lsl pc
   13b64:	andeq	r3, r1, r4, lsr lr
   13b68:	andeq	r3, r1, r0, lsr lr
   13b6c:	andeq	r3, r1, r0, lsr lr
   13b70:	strdeq	r3, [r1], -r0
   13b74:	andeq	r3, r1, r0, lsr lr
   13b78:	andeq	r4, r1, r8, lsr r3
   13b7c:	andeq	r3, r1, r0, lsr lr
   13b80:	andeq	r3, r1, r8, ror lr
   13b84:	andeq	r3, r1, r0, lsr lr
   13b88:	andeq	r3, r1, r0, lsr lr
   13b8c:	andeq	r3, r1, r0, lsr lr
   13b90:	andeq	r4, r1, r8, lsr r3
   13b94:	andeq	r4, r1, r8, lsr r3
   13b98:	andeq	r4, r1, r8, lsr r3
   13b9c:	andeq	r4, r1, r8, lsr r3
   13ba0:	andeq	r4, r1, r8, lsr r3
   13ba4:	andeq	r4, r1, r8, lsr r3
   13ba8:	andeq	r4, r1, r8, lsr r3
   13bac:	andeq	r4, r1, r8, lsr r3
   13bb0:	andeq	r4, r1, r8, lsr r3
   13bb4:	andeq	r4, r1, r8, lsr r3
   13bb8:	andeq	r4, r1, r8, lsr r3
   13bbc:	andeq	r4, r1, r8, lsr r3
   13bc0:	andeq	r4, r1, r8, lsr r3
   13bc4:	andeq	r4, r1, r8, lsr r3
   13bc8:	andeq	r4, r1, r8, lsr r3
   13bcc:	andeq	r4, r1, r8, lsr r3
   13bd0:	andeq	r3, r1, r0, lsr lr
   13bd4:	andeq	r3, r1, r0, lsr lr
   13bd8:	andeq	r3, r1, r0, lsr lr
   13bdc:	andeq	r3, r1, r0, lsr lr
   13be0:	ldrdeq	r3, [r1], -r8
   13be4:	andeq	r3, r1, r8, lsl pc
   13be8:	andeq	r4, r1, r8, lsr r3
   13bec:	andeq	r4, r1, r8, lsr r3
   13bf0:	andeq	r4, r1, r8, lsr r3
   13bf4:	andeq	r4, r1, r8, lsr r3
   13bf8:	andeq	r4, r1, r8, lsr r3
   13bfc:	andeq	r4, r1, r8, lsr r3
   13c00:	andeq	r4, r1, r8, lsr r3
   13c04:	andeq	r4, r1, r8, lsr r3
   13c08:	andeq	r4, r1, r8, lsr r3
   13c0c:	andeq	r4, r1, r8, lsr r3
   13c10:	andeq	r4, r1, r8, lsr r3
   13c14:	andeq	r4, r1, r8, lsr r3
   13c18:	andeq	r4, r1, r8, lsr r3
   13c1c:	andeq	r4, r1, r8, lsr r3
   13c20:	andeq	r4, r1, r8, lsr r3
   13c24:	andeq	r4, r1, r8, lsr r3
   13c28:	andeq	r4, r1, r8, lsr r3
   13c2c:	andeq	r4, r1, r8, lsr r3
   13c30:	andeq	r4, r1, r8, lsr r3
   13c34:	andeq	r4, r1, r8, lsr r3
   13c38:	andeq	r4, r1, r8, lsr r3
   13c3c:	andeq	r4, r1, r8, lsr r3
   13c40:	andeq	r4, r1, r8, lsr r3
   13c44:	andeq	r4, r1, r8, lsr r3
   13c48:	andeq	r4, r1, r8, lsr r3
   13c4c:	andeq	r4, r1, r8, lsr r3
   13c50:	andeq	r3, r1, r0, lsr lr
   13c54:	andeq	r3, r1, r0, lsl sp
   13c58:	andeq	r4, r1, r8, lsr r3
   13c5c:	andeq	r3, r1, r0, lsr lr
   13c60:	andeq	r4, r1, r8, lsr r3
   13c64:	andeq	r3, r1, r0, lsr lr
   13c68:	andeq	r4, r1, r8, lsr r3
   13c6c:	andeq	r4, r1, r8, lsr r3
   13c70:	andeq	r4, r1, r8, lsr r3
   13c74:	andeq	r4, r1, r8, lsr r3
   13c78:	andeq	r4, r1, r8, lsr r3
   13c7c:	andeq	r4, r1, r8, lsr r3
   13c80:	andeq	r4, r1, r8, lsr r3
   13c84:	andeq	r4, r1, r8, lsr r3
   13c88:	andeq	r4, r1, r8, lsr r3
   13c8c:	andeq	r4, r1, r8, lsr r3
   13c90:	andeq	r4, r1, r8, lsr r3
   13c94:	andeq	r4, r1, r8, lsr r3
   13c98:	andeq	r4, r1, r8, lsr r3
   13c9c:	andeq	r4, r1, r8, lsr r3
   13ca0:	andeq	r4, r1, r8, lsr r3
   13ca4:	andeq	r4, r1, r8, lsr r3
   13ca8:	andeq	r4, r1, r8, lsr r3
   13cac:	andeq	r4, r1, r8, lsr r3
   13cb0:	andeq	r4, r1, r8, lsr r3
   13cb4:	andeq	r4, r1, r8, lsr r3
   13cb8:	andeq	r4, r1, r8, lsr r3
   13cbc:	andeq	r4, r1, r8, lsr r3
   13cc0:	andeq	r4, r1, r8, lsr r3
   13cc4:	andeq	r4, r1, r8, lsr r3
   13cc8:	andeq	r4, r1, r8, lsr r3
   13ccc:	andeq	r4, r1, r8, lsr r3
   13cd0:	ldrdeq	r3, [r1], -r0
   13cd4:	andeq	r3, r1, r0, lsr lr
   13cd8:	ldrdeq	r3, [r1], -r0
   13cdc:	strdeq	r3, [r1], -r0
   13ce0:	mov	r3, #0
   13ce4:	str	r3, [sp, #44]	; 0x2c
   13ce8:	mov	r4, #9
   13cec:	mov	r3, #116	; 0x74
   13cf0:	b	13974 <__assert_fail@plt+0x27e8>
   13cf4:	mov	r3, #0
   13cf8:	str	r3, [sp, #44]	; 0x2c
   13cfc:	mov	r4, #11
   13d00:	mov	r3, #118	; 0x76
   13d04:	b	1398c <__assert_fail@plt+0x2800>
   13d08:	mov	r3, #0
   13d0c:	str	r3, [sp, #44]	; 0x2c
   13d10:	cmp	sl, #2
   13d14:	beq	13d38 <__assert_fail@plt+0x2bac>
   13d18:	ldr	r3, [sp, #28]
   13d1c:	ldr	r2, [sp, #32]
   13d20:	and	r3, r3, r2
   13d24:	tst	r7, r3
   13d28:	bne	143ac <__assert_fail@plt+0x3220>
   13d2c:	mov	r4, #92	; 0x5c
   13d30:	mov	r3, r4
   13d34:	b	1398c <__assert_fail@plt+0x2800>
   13d38:	ldr	r3, [sp, #32]
   13d3c:	cmp	r3, #0
   13d40:	bne	14534 <__assert_fail@plt+0x33a8>
   13d44:	mov	r5, r3
   13d48:	mov	r4, #92	; 0x5c
   13d4c:	eor	r3, r3, #1
   13d50:	ldr	r2, [sp, #36]	; 0x24
   13d54:	and	r3, r3, r2
   13d58:	tst	r3, #255	; 0xff
   13d5c:	beq	13a64 <__assert_fail@plt+0x28d8>
   13d60:	cmp	r9, fp
   13d64:	movhi	r3, #39	; 0x27
   13d68:	strbhi	r3, [r8, fp]
   13d6c:	add	r3, fp, #1
   13d70:	cmp	r9, r3
   13d74:	movhi	r2, #39	; 0x27
   13d78:	strbhi	r2, [r8, r3]
   13d7c:	add	fp, fp, #2
   13d80:	mov	r3, #0
   13d84:	str	r3, [sp, #36]	; 0x24
   13d88:	b	13a64 <__assert_fail@plt+0x28d8>
   13d8c:	mov	r3, #110	; 0x6e
   13d90:	b	13974 <__assert_fail@plt+0x27e8>
   13d94:	mov	r3, #110	; 0x6e
   13d98:	b	13974 <__assert_fail@plt+0x27e8>
   13d9c:	mov	r3, #0
   13da0:	str	r3, [sp, #44]	; 0x2c
   13da4:	mov	r3, #110	; 0x6e
   13da8:	b	13974 <__assert_fail@plt+0x27e8>
   13dac:	mov	r8, r9
   13db0:	mov	r7, #2
   13db4:	b	14554 <__assert_fail@plt+0x33c8>
   13db8:	mov	r3, #97	; 0x61
   13dbc:	b	1398c <__assert_fail@plt+0x2800>
   13dc0:	mov	r3, #97	; 0x61
   13dc4:	b	1398c <__assert_fail@plt+0x2800>
   13dc8:	mov	r3, #0
   13dcc:	str	r3, [sp, #44]	; 0x2c
   13dd0:	ldr	r3, [sp, #24]
   13dd4:	cmn	r3, #1
   13dd8:	beq	13e04 <__assert_fail@plt+0x2c78>
   13ddc:	ldr	r3, [sp, #24]
   13de0:	subs	r3, r3, #1
   13de4:	movne	r3, #1
   13de8:	cmp	r3, #0
   13dec:	bne	1436c <__assert_fail@plt+0x31e0>
   13df0:	cmp	r6, #0
   13df4:	beq	13e34 <__assert_fail@plt+0x2ca8>
   13df8:	mov	r5, #0
   13dfc:	mov	r3, r5
   13e00:	b	139a0 <__assert_fail@plt+0x2814>
   13e04:	ldr	r3, [sp, #48]	; 0x30
   13e08:	ldrb	r3, [r3, #1]
   13e0c:	adds	r3, r3, #0
   13e10:	movne	r3, #1
   13e14:	b	13de8 <__assert_fail@plt+0x2c5c>
   13e18:	mov	r3, #0
   13e1c:	str	r3, [sp, #44]	; 0x2c
   13e20:	b	13df0 <__assert_fail@plt+0x2c64>
   13e24:	mov	r3, #0
   13e28:	str	r3, [sp, #44]	; 0x2c
   13e2c:	b	13e34 <__assert_fail@plt+0x2ca8>
   13e30:	ldr	r5, [sp, #44]	; 0x2c
   13e34:	ldr	r3, [sp, #32]
   13e38:	cmp	sl, #2
   13e3c:	movne	r3, #0
   13e40:	andeq	r3, r3, #1
   13e44:	cmp	r3, #0
   13e48:	beq	139a0 <__assert_fail@plt+0x2814>
   13e4c:	mov	r8, r9
   13e50:	mov	r7, #2
   13e54:	b	14554 <__assert_fail@plt+0x33c8>
   13e58:	ldr	r5, [sp, #32]
   13e5c:	b	13e34 <__assert_fail@plt+0x2ca8>
   13e60:	mov	r3, #0
   13e64:	str	r3, [sp, #44]	; 0x2c
   13e68:	mov	r5, r3
   13e6c:	b	13e34 <__assert_fail@plt+0x2ca8>
   13e70:	mov	r3, #0
   13e74:	str	r3, [sp, #44]	; 0x2c
   13e78:	cmp	sl, #2
   13e7c:	strne	r5, [sp, #68]	; 0x44
   13e80:	movne	r3, #0
   13e84:	movne	r4, #39	; 0x27
   13e88:	bne	139a0 <__assert_fail@plt+0x2814>
   13e8c:	ldr	r3, [sp, #32]
   13e90:	cmp	r3, #0
   13e94:	bne	14540 <__assert_fail@plt+0x33b4>
   13e98:	ldr	r3, [sp, #72]	; 0x48
   13e9c:	clz	r3, r3
   13ea0:	lsr	r3, r3, #5
   13ea4:	cmp	r9, #0
   13ea8:	moveq	r3, #0
   13eac:	cmp	r3, #0
   13eb0:	movne	r3, #0
   13eb4:	bne	13edc <__assert_fail@plt+0x2d50>
   13eb8:	cmp	r9, fp
   13ebc:	movhi	r3, #39	; 0x27
   13ec0:	strbhi	r3, [r8, fp]
   13ec4:	add	r3, fp, #1
   13ec8:	cmp	r9, r3
   13ecc:	movhi	r2, #92	; 0x5c
   13ed0:	strbhi	r2, [r8, r3]
   13ed4:	mov	r3, r9
   13ed8:	ldr	r9, [sp, #72]	; 0x48
   13edc:	add	r2, fp, #2
   13ee0:	cmp	r2, r3
   13ee4:	movcc	r1, #39	; 0x27
   13ee8:	strbcc	r1, [r8, r2]
   13eec:	add	fp, fp, #3
   13ef0:	str	r5, [sp, #68]	; 0x44
   13ef4:	ldr	r2, [sp, #32]
   13ef8:	str	r2, [sp, #36]	; 0x24
   13efc:	str	r9, [sp, #72]	; 0x48
   13f00:	mov	r9, r3
   13f04:	mov	r4, #39	; 0x27
   13f08:	mov	r3, #0
   13f0c:	b	139ec <__assert_fail@plt+0x2860>
   13f10:	mov	r3, #0
   13f14:	str	r3, [sp, #44]	; 0x2c
   13f18:	ldr	r7, [sp, #76]	; 0x4c
   13f1c:	cmp	r7, #1
   13f20:	bne	13f58 <__assert_fail@plt+0x2dcc>
   13f24:	bl	11054 <__ctype_b_loc@plt>
   13f28:	ldr	r2, [r0]
   13f2c:	lsl	r3, r4, #1
   13f30:	ldrh	r5, [r2, r3]
   13f34:	ubfx	r5, r5, #14, #1
   13f38:	mov	ip, r7
   13f3c:	eor	r3, r5, #1
   13f40:	ldr	r2, [sp, #28]
   13f44:	and	r3, r3, r2
   13f48:	ands	r3, r3, #255	; 0xff
   13f4c:	beq	139a0 <__assert_fail@plt+0x2814>
   13f50:	mov	r5, #0
   13f54:	b	141b4 <__assert_fail@plt+0x3028>
   13f58:	mov	r2, #0
   13f5c:	mov	r3, #0
   13f60:	strd	r2, [sp, #104]	; 0x68
   13f64:	ldr	r3, [sp, #24]
   13f68:	cmn	r3, #1
   13f6c:	beq	13f90 <__assert_fail@plt+0x2e04>
   13f70:	mov	r3, #0
   13f74:	str	r4, [sp, #88]	; 0x58
   13f78:	str	fp, [sp, #92]	; 0x5c
   13f7c:	str	r8, [sp, #56]	; 0x38
   13f80:	mov	r8, r3
   13f84:	str	r9, [sp, #84]	; 0x54
   13f88:	ldr	r9, [sp, #48]	; 0x30
   13f8c:	b	140dc <__assert_fail@plt+0x2f50>
   13f90:	ldr	r0, [sp, #48]	; 0x30
   13f94:	bl	11078 <strlen@plt>
   13f98:	str	r0, [sp, #24]
   13f9c:	b	13f70 <__assert_fail@plt+0x2de4>
   13fa0:	mov	r1, fp
   13fa4:	ldr	r4, [sp, #88]	; 0x58
   13fa8:	mov	r2, r8
   13fac:	mov	ip, r8
   13fb0:	ldr	fp, [sp, #92]	; 0x5c
   13fb4:	ldr	r8, [sp, #56]	; 0x38
   13fb8:	ldr	r9, [sp, #84]	; 0x54
   13fbc:	ldr	r0, [sp, #24]
   13fc0:	cmp	r7, r0
   13fc4:	bcs	1417c <__assert_fail@plt+0x2ff0>
   13fc8:	ldrb	r3, [r1]
   13fcc:	cmp	r3, #0
   13fd0:	beq	14184 <__assert_fail@plt+0x2ff8>
   13fd4:	mov	r3, r1
   13fd8:	add	r2, r2, #1
   13fdc:	add	r1, r6, r2
   13fe0:	cmp	r0, r1
   13fe4:	bls	1418c <__assert_fail@plt+0x3000>
   13fe8:	ldrb	r1, [r3, #1]!
   13fec:	cmp	r1, #0
   13ff0:	bne	13fd8 <__assert_fail@plt+0x2e4c>
   13ff4:	mov	ip, r2
   13ff8:	mov	r5, #0
   13ffc:	b	141ac <__assert_fail@plt+0x3020>
   14000:	ldr	r3, [sp, #56]	; 0x38
   14004:	str	r3, [sp, #64]	; 0x40
   14008:	ldr	r8, [sp, #84]	; 0x54
   1400c:	mov	r7, #2
   14010:	b	14554 <__assert_fail@plt+0x33c8>
   14014:	cmp	r2, r7
   14018:	beq	140b8 <__assert_fail@plt+0x2f2c>
   1401c:	ldrb	r3, [r2], #1
   14020:	sub	r3, r3, #91	; 0x5b
   14024:	cmp	r3, #33	; 0x21
   14028:	ldrls	pc, [pc, r3, lsl #2]
   1402c:	b	14014 <__assert_fail@plt+0x2e88>
   14030:	andeq	r4, r1, r0
   14034:	andeq	r4, r1, r0
   14038:	andeq	r4, r1, r4, lsl r0
   1403c:	andeq	r4, r1, r0
   14040:	andeq	r4, r1, r4, lsl r0
   14044:	andeq	r4, r1, r0
   14048:	andeq	r4, r1, r4, lsl r0
   1404c:	andeq	r4, r1, r4, lsl r0
   14050:	andeq	r4, r1, r4, lsl r0
   14054:	andeq	r4, r1, r4, lsl r0
   14058:	andeq	r4, r1, r4, lsl r0
   1405c:	andeq	r4, r1, r4, lsl r0
   14060:	andeq	r4, r1, r4, lsl r0
   14064:	andeq	r4, r1, r4, lsl r0
   14068:	andeq	r4, r1, r4, lsl r0
   1406c:	andeq	r4, r1, r4, lsl r0
   14070:	andeq	r4, r1, r4, lsl r0
   14074:	andeq	r4, r1, r4, lsl r0
   14078:	andeq	r4, r1, r4, lsl r0
   1407c:	andeq	r4, r1, r4, lsl r0
   14080:	andeq	r4, r1, r4, lsl r0
   14084:	andeq	r4, r1, r4, lsl r0
   14088:	andeq	r4, r1, r4, lsl r0
   1408c:	andeq	r4, r1, r4, lsl r0
   14090:	andeq	r4, r1, r4, lsl r0
   14094:	andeq	r4, r1, r4, lsl r0
   14098:	andeq	r4, r1, r4, lsl r0
   1409c:	andeq	r4, r1, r4, lsl r0
   140a0:	andeq	r4, r1, r4, lsl r0
   140a4:	andeq	r4, r1, r4, lsl r0
   140a8:	andeq	r4, r1, r4, lsl r0
   140ac:	andeq	r4, r1, r4, lsl r0
   140b0:	andeq	r4, r1, r4, lsl r0
   140b4:	andeq	r4, r1, r0
   140b8:	ldr	r0, [sp, #100]	; 0x64
   140bc:	bl	10f88 <iswprint@plt>
   140c0:	cmp	r0, #0
   140c4:	moveq	r5, #0
   140c8:	add	r8, r8, r4
   140cc:	add	r0, sp, #104	; 0x68
   140d0:	bl	10f10 <mbsinit@plt>
   140d4:	cmp	r0, #0
   140d8:	bne	14148 <__assert_fail@plt+0x2fbc>
   140dc:	add	r7, r6, r8
   140e0:	add	fp, r9, r7
   140e4:	add	r3, sp, #104	; 0x68
   140e8:	ldr	r2, [sp, #24]
   140ec:	sub	r2, r2, r7
   140f0:	mov	r1, fp
   140f4:	add	r0, sp, #100	; 0x64
   140f8:	bl	162ac <__assert_fail@plt+0x5120>
   140fc:	subs	r4, r0, #0
   14100:	beq	14198 <__assert_fail@plt+0x300c>
   14104:	cmn	r4, #1
   14108:	beq	14160 <__assert_fail@plt+0x2fd4>
   1410c:	cmn	r4, #2
   14110:	beq	13fa0 <__assert_fail@plt+0x2e14>
   14114:	ldr	r3, [sp, #32]
   14118:	cmp	sl, #2
   1411c:	movne	r3, #0
   14120:	andeq	r3, r3, #1
   14124:	cmp	r3, #0
   14128:	beq	140b8 <__assert_fail@plt+0x2f2c>
   1412c:	cmp	r4, #1
   14130:	bls	140b8 <__assert_fail@plt+0x2f2c>
   14134:	add	r2, r7, #1
   14138:	add	r2, r9, r2
   1413c:	add	r3, r9, r4
   14140:	add	r7, r3, r7
   14144:	b	1401c <__assert_fail@plt+0x2e90>
   14148:	ldr	r4, [sp, #88]	; 0x58
   1414c:	mov	ip, r8
   14150:	ldr	fp, [sp, #92]	; 0x5c
   14154:	ldr	r8, [sp, #56]	; 0x38
   14158:	ldr	r9, [sp, #84]	; 0x54
   1415c:	b	141ac <__assert_fail@plt+0x3020>
   14160:	ldr	r4, [sp, #88]	; 0x58
   14164:	mov	ip, r8
   14168:	ldr	fp, [sp, #92]	; 0x5c
   1416c:	ldr	r8, [sp, #56]	; 0x38
   14170:	ldr	r9, [sp, #84]	; 0x54
   14174:	mov	r5, #0
   14178:	b	141ac <__assert_fail@plt+0x3020>
   1417c:	mov	r5, #0
   14180:	b	141ac <__assert_fail@plt+0x3020>
   14184:	mov	r5, #0
   14188:	b	141ac <__assert_fail@plt+0x3020>
   1418c:	mov	ip, r2
   14190:	mov	r5, #0
   14194:	b	141ac <__assert_fail@plt+0x3020>
   14198:	ldr	r4, [sp, #88]	; 0x58
   1419c:	mov	ip, r8
   141a0:	ldr	fp, [sp, #92]	; 0x5c
   141a4:	ldr	r8, [sp, #56]	; 0x38
   141a8:	ldr	r9, [sp, #84]	; 0x54
   141ac:	cmp	ip, #1
   141b0:	bls	13f3c <__assert_fail@plt+0x2db0>
   141b4:	add	lr, r6, ip
   141b8:	ldr	r3, [sp, #48]	; 0x30
   141bc:	add	r1, r3, r6
   141c0:	mov	r3, #0
   141c4:	eor	r0, r5, #1
   141c8:	ldr	r2, [sp, #28]
   141cc:	and	r0, r0, r2
   141d0:	uxtb	r0, r0
   141d4:	str	r0, [sp, #56]	; 0x38
   141d8:	mov	r7, #92	; 0x5c
   141dc:	ldr	ip, [sp, #36]	; 0x24
   141e0:	str	r5, [sp, #84]	; 0x54
   141e4:	ldr	r2, [sp, #44]	; 0x2c
   141e8:	b	14258 <__assert_fail@plt+0x30cc>
   141ec:	cmp	r2, #0
   141f0:	beq	14200 <__assert_fail@plt+0x3074>
   141f4:	cmp	r9, fp
   141f8:	strbhi	r7, [r8, fp]
   141fc:	add	fp, fp, #1
   14200:	add	r5, r6, #1
   14204:	cmp	r5, lr
   14208:	bcs	14314 <__assert_fail@plt+0x3188>
   1420c:	eor	r2, r3, #1
   14210:	and	r2, r2, ip
   14214:	ands	r2, r2, #255	; 0xff
   14218:	beq	14330 <__assert_fail@plt+0x31a4>
   1421c:	cmp	r9, fp
   14220:	movhi	r2, #39	; 0x27
   14224:	strbhi	r2, [r8, fp]
   14228:	add	r2, fp, #1
   1422c:	cmp	r9, r2
   14230:	movhi	ip, #39	; 0x27
   14234:	strbhi	ip, [r8, r2]
   14238:	add	fp, fp, #2
   1423c:	ldr	ip, [sp, #56]	; 0x38
   14240:	mov	r2, ip
   14244:	mov	r6, r5
   14248:	cmp	r9, fp
   1424c:	strbhi	r4, [r8, fp]
   14250:	add	fp, fp, #1
   14254:	ldrb	r4, [r1, #1]!
   14258:	cmp	r0, #0
   1425c:	beq	141ec <__assert_fail@plt+0x3060>
   14260:	ldr	r3, [sp, #32]
   14264:	cmp	r3, #0
   14268:	bne	144fc <__assert_fail@plt+0x3370>
   1426c:	eor	r3, ip, #1
   14270:	cmp	sl, #2
   14274:	movne	r3, #0
   14278:	andeq	r3, r3, #1
   1427c:	cmp	r3, #0
   14280:	beq	142b8 <__assert_fail@plt+0x312c>
   14284:	cmp	r9, fp
   14288:	movhi	ip, #39	; 0x27
   1428c:	strbhi	ip, [r8, fp]
   14290:	add	ip, fp, #1
   14294:	cmp	r9, ip
   14298:	movhi	r5, #36	; 0x24
   1429c:	strbhi	r5, [r8, ip]
   142a0:	add	ip, fp, #2
   142a4:	cmp	r9, ip
   142a8:	movhi	r5, #39	; 0x27
   142ac:	strbhi	r5, [r8, ip]
   142b0:	add	fp, fp, #3
   142b4:	mov	ip, r3
   142b8:	cmp	r9, fp
   142bc:	strbhi	r7, [r8, fp]
   142c0:	add	r3, fp, #1
   142c4:	cmp	r9, r3
   142c8:	bls	142d8 <__assert_fail@plt+0x314c>
   142cc:	lsr	r5, r4, #6
   142d0:	add	r5, r5, #48	; 0x30
   142d4:	strb	r5, [r8, r3]
   142d8:	add	r3, fp, #2
   142dc:	cmp	r9, r3
   142e0:	bls	142f0 <__assert_fail@plt+0x3164>
   142e4:	ubfx	r5, r4, #3, #3
   142e8:	add	r5, r5, #48	; 0x30
   142ec:	strb	r5, [r8, r3]
   142f0:	add	fp, fp, #3
   142f4:	and	r4, r4, #7
   142f8:	add	r4, r4, #48	; 0x30
   142fc:	add	r5, r6, #1
   14300:	cmp	r5, lr
   14304:	bcs	14320 <__assert_fail@plt+0x3194>
   14308:	ldr	r3, [sp, #56]	; 0x38
   1430c:	mov	r6, r5
   14310:	b	14248 <__assert_fail@plt+0x30bc>
   14314:	str	ip, [sp, #36]	; 0x24
   14318:	ldr	r5, [sp, #84]	; 0x54
   1431c:	b	13d4c <__assert_fail@plt+0x2bc0>
   14320:	str	ip, [sp, #36]	; 0x24
   14324:	ldr	r5, [sp, #84]	; 0x54
   14328:	mov	r3, r0
   1432c:	b	13d4c <__assert_fail@plt+0x2bc0>
   14330:	mov	r6, r5
   14334:	b	14248 <__assert_fail@plt+0x30bc>
   14338:	ldr	r3, [sp, #44]	; 0x2c
   1433c:	b	139a0 <__assert_fail@plt+0x2814>
   14340:	mov	r5, #0
   14344:	mov	r3, r5
   14348:	mov	r4, #63	; 0x3f
   1434c:	b	139a0 <__assert_fail@plt+0x2814>
   14350:	mov	r5, #0
   14354:	mov	r3, r5
   14358:	mov	r4, #63	; 0x3f
   1435c:	b	139a0 <__assert_fail@plt+0x2814>
   14360:	mov	r5, #0
   14364:	mov	r3, r5
   14368:	b	139a0 <__assert_fail@plt+0x2814>
   1436c:	mov	r5, #0
   14370:	mov	r3, r5
   14374:	b	139a0 <__assert_fail@plt+0x2814>
   14378:	ldr	r5, [sp, #44]	; 0x2c
   1437c:	ldr	r3, [sp, #32]
   14380:	b	139a0 <__assert_fail@plt+0x2814>
   14384:	ldr	r5, [sp, #44]	; 0x2c
   14388:	mov	r3, #0
   1438c:	str	r3, [sp, #44]	; 0x2c
   14390:	b	139a0 <__assert_fail@plt+0x2814>
   14394:	mov	r4, r3
   14398:	mov	r5, #0
   1439c:	b	139f8 <__assert_fail@plt+0x286c>
   143a0:	mov	r5, #0
   143a4:	mov	r4, #97	; 0x61
   143a8:	b	139f8 <__assert_fail@plt+0x286c>
   143ac:	mov	r5, #0
   143b0:	mov	r3, r5
   143b4:	mov	r4, #92	; 0x5c
   143b8:	b	13d4c <__assert_fail@plt+0x2bc0>
   143bc:	ldr	r3, [sp, #48]	; 0x30
   143c0:	ldrb	r5, [r3, r6]
   143c4:	adds	r5, r5, #0
   143c8:	movne	r5, #1
   143cc:	b	13a9c <__assert_fail@plt+0x2910>
   143d0:	cmp	sl, #2
   143d4:	movne	r3, #0
   143d8:	moveq	r3, #1
   143dc:	ldr	r1, [sp, #32]
   143e0:	cmp	fp, #0
   143e4:	andeq	r2, r3, r1
   143e8:	movne	r2, #0
   143ec:	cmp	r2, #0
   143f0:	bne	14510 <__assert_fail@plt+0x3384>
   143f4:	eor	r2, r1, #1
   143f8:	uxtb	r2, r2
   143fc:	and	r3, r3, r2
   14400:	ldr	r1, [sp, #68]	; 0x44
   14404:	ands	r3, r1, r3
   14408:	beq	1449c <__assert_fail@plt+0x3310>
   1440c:	ldr	r2, [sp, #40]	; 0x28
   14410:	cmp	r2, #0
   14414:	bne	1444c <__assert_fail@plt+0x32c0>
   14418:	ldr	r2, [sp, #72]	; 0x48
   1441c:	adds	r2, r2, #0
   14420:	movne	r2, #1
   14424:	cmp	r9, #0
   14428:	movne	r2, #0
   1442c:	str	r2, [sp, #68]	; 0x44
   14430:	mov	sl, #2
   14434:	ldr	r1, [sp, #40]	; 0x28
   14438:	str	r1, [sp, #32]
   1443c:	cmp	r2, #0
   14440:	beq	14490 <__assert_fail@plt+0x3304>
   14444:	ldr	r9, [sp, #72]	; 0x48
   14448:	b	131a4 <__assert_fail@plt+0x2018>
   1444c:	ldr	r3, [sp, #168]	; 0xa8
   14450:	str	r3, [sp, #16]
   14454:	ldr	r3, [sp, #164]	; 0xa4
   14458:	str	r3, [sp, #12]
   1445c:	ldr	r3, [sp, #160]	; 0xa0
   14460:	str	r3, [sp, #8]
   14464:	ldr	r3, [sp, #156]	; 0x9c
   14468:	str	r3, [sp, #4]
   1446c:	mov	r3, #5
   14470:	str	r3, [sp]
   14474:	ldr	r3, [sp, #24]
   14478:	ldr	r2, [sp, #48]	; 0x30
   1447c:	ldr	r1, [sp, #72]	; 0x48
   14480:	ldr	r0, [sp, #64]	; 0x40
   14484:	bl	1312c <__assert_fail@plt+0x1fa0>
   14488:	mov	fp, r0
   1448c:	b	145ac <__assert_fail@plt+0x3420>
   14490:	mov	r8, r9
   14494:	mov	r2, r3
   14498:	b	144a0 <__assert_fail@plt+0x3314>
   1449c:	mov	r8, r9
   144a0:	ldr	r3, [sp, #60]	; 0x3c
   144a4:	cmp	r3, #0
   144a8:	moveq	r2, #0
   144ac:	andne	r2, r2, #1
   144b0:	cmp	r2, #0
   144b4:	beq	144e4 <__assert_fail@plt+0x3358>
   144b8:	mov	r2, r3
   144bc:	ldrb	r3, [r3]
   144c0:	cmp	r3, #0
   144c4:	beq	144e4 <__assert_fail@plt+0x3358>
   144c8:	ldr	r1, [sp, #64]	; 0x40
   144cc:	cmp	r8, fp
   144d0:	strbhi	r3, [r1, fp]
   144d4:	add	fp, fp, #1
   144d8:	ldrb	r3, [r2, #1]!
   144dc:	cmp	r3, #0
   144e0:	bne	144cc <__assert_fail@plt+0x3340>
   144e4:	cmp	r8, fp
   144e8:	bls	145ac <__assert_fail@plt+0x3420>
   144ec:	mov	r3, #0
   144f0:	ldr	r2, [sp, #64]	; 0x40
   144f4:	strb	r3, [r2, fp]
   144f8:	b	145ac <__assert_fail@plt+0x3420>
   144fc:	mov	r8, r9
   14500:	mov	r7, sl
   14504:	ldr	r3, [sp, #32]
   14508:	str	r3, [sp, #28]
   1450c:	b	14554 <__assert_fail@plt+0x33c8>
   14510:	mov	r8, r9
   14514:	mov	r7, #2
   14518:	b	14554 <__assert_fail@plt+0x33c8>
   1451c:	mov	r8, r9
   14520:	mov	r7, sl
   14524:	b	14554 <__assert_fail@plt+0x33c8>
   14528:	mov	r8, r9
   1452c:	mov	r7, sl
   14530:	b	14554 <__assert_fail@plt+0x33c8>
   14534:	mov	r8, r9
   14538:	mov	r7, sl
   1453c:	b	14554 <__assert_fail@plt+0x33c8>
   14540:	mov	r8, r9
   14544:	mov	r7, sl
   14548:	b	14554 <__assert_fail@plt+0x33c8>
   1454c:	mov	r8, r9
   14550:	mov	r7, sl
   14554:	ldr	r3, [sp, #28]
   14558:	cmp	r7, #2
   1455c:	movne	r3, #0
   14560:	andeq	r3, r3, #1
   14564:	cmp	r3, #0
   14568:	movne	r7, #4
   1456c:	ldr	r3, [sp, #168]	; 0xa8
   14570:	str	r3, [sp, #16]
   14574:	ldr	r3, [sp, #164]	; 0xa4
   14578:	str	r3, [sp, #12]
   1457c:	mov	r3, #0
   14580:	str	r3, [sp, #8]
   14584:	ldr	r3, [sp, #156]	; 0x9c
   14588:	bic	r3, r3, #2
   1458c:	str	r3, [sp, #4]
   14590:	str	r7, [sp]
   14594:	ldr	r3, [sp, #24]
   14598:	ldr	r2, [sp, #48]	; 0x30
   1459c:	mov	r1, r8
   145a0:	ldr	r0, [sp, #64]	; 0x40
   145a4:	bl	1312c <__assert_fail@plt+0x1fa0>
   145a8:	mov	fp, r0
   145ac:	mov	r0, fp
   145b0:	add	sp, sp, #116	; 0x74
   145b4:	ldrd	r4, [sp]
   145b8:	ldrd	r6, [sp, #8]
   145bc:	ldrd	r8, [sp, #16]
   145c0:	ldrd	sl, [sp, #24]
   145c4:	add	sp, sp, #32
   145c8:	pop	{pc}		; (ldr pc, [sp], #4)
   145cc:	mov	r8, r9
   145d0:	mov	r7, sl
   145d4:	b	1456c <__assert_fail@plt+0x33e0>
   145d8:	add	fp, fp, #4
   145dc:	str	r3, [sp, #36]	; 0x24
   145e0:	mov	r5, #0
   145e4:	mov	r4, #48	; 0x30
   145e8:	b	139a0 <__assert_fail@plt+0x2814>
   145ec:	mov	r3, #1
   145f0:	str	r3, [sp, #32]
   145f4:	str	r3, [sp, #28]
   145f8:	str	r3, [sp, #52]	; 0x34
   145fc:	movw	r3, #28864	; 0x70c0
   14600:	movt	r3, #1
   14604:	str	r3, [sp, #60]	; 0x3c
   14608:	mov	fp, #0
   1460c:	mov	sl, #5
   14610:	b	13204 <__assert_fail@plt+0x2078>
   14614:	ldr	r3, [sp, #48]	; 0x30
   14618:	ldrb	r4, [r3, r6]
   1461c:	cmp	r4, #126	; 0x7e
   14620:	ldrls	pc, [pc, r4, lsl #2]
   14624:	b	13f10 <__assert_fail@plt+0x2d84>
   14628:	muleq	r1, r8, r6
   1462c:	andeq	r3, r1, r0, lsl pc
   14630:	andeq	r3, r1, r0, lsl pc
   14634:	andeq	r3, r1, r0, lsl pc
   14638:	andeq	r3, r1, r0, lsl pc
   1463c:	andeq	r3, r1, r0, lsl pc
   14640:	andeq	r3, r1, r0, lsl pc
   14644:	andeq	r4, r1, r0, lsr #7
   14648:	andeq	r3, r1, ip, lsr r9
   1464c:	andeq	r3, r1, r0, ror #25
   14650:	muleq	r1, ip, sp
   14654:	strdeq	r3, [r1], -r4
   14658:	andeq	r3, r1, r0, asr r9
   1465c:	andeq	r3, r1, r4, ror #18
   14660:	andeq	r3, r1, r0, lsl pc
   14664:	andeq	r3, r1, r0, lsl pc
   14668:	andeq	r3, r1, r0, lsl pc
   1466c:	andeq	r3, r1, r0, lsl pc
   14670:	andeq	r3, r1, r0, lsl pc
   14674:	andeq	r3, r1, r0, lsl pc
   14678:	andeq	r3, r1, r0, lsl pc
   1467c:	andeq	r3, r1, r0, lsl pc
   14680:	andeq	r3, r1, r0, lsl pc
   14684:	andeq	r3, r1, r0, lsl pc
   14688:	andeq	r3, r1, r0, lsl pc
   1468c:	andeq	r3, r1, r0, lsl pc
   14690:	andeq	r3, r1, r0, lsl pc
   14694:	andeq	r3, r1, r0, lsl pc
   14698:	andeq	r3, r1, r0, lsl pc
   1469c:	andeq	r3, r1, r0, lsl pc
   146a0:	andeq	r3, r1, r0, lsl pc
   146a4:	andeq	r3, r1, r0, lsl pc
   146a8:	andeq	r3, r1, r4, lsr #28
   146ac:	andeq	r3, r1, r0, ror #28
   146b0:	andeq	r3, r1, r0, ror #28
   146b4:	andeq	r3, r1, r8, lsl lr
   146b8:	andeq	r3, r1, r0, ror #28
   146bc:	andeq	r4, r1, r4, lsl #7
   146c0:	andeq	r3, r1, r0, ror #28
   146c4:	andeq	r3, r1, r0, ror lr
   146c8:	andeq	r3, r1, r0, ror #28
   146cc:	andeq	r3, r1, r0, ror #28
   146d0:	andeq	r3, r1, r0, ror #28
   146d4:	andeq	r4, r1, r4, lsl #7
   146d8:	andeq	r4, r1, r4, lsl #7
   146dc:	andeq	r4, r1, r4, lsl #7
   146e0:	andeq	r4, r1, r4, lsl #7
   146e4:	andeq	r4, r1, r4, lsl #7
   146e8:	andeq	r4, r1, r4, lsl #7
   146ec:	andeq	r4, r1, r4, lsl #7
   146f0:	andeq	r4, r1, r4, lsl #7
   146f4:	andeq	r4, r1, r4, lsl #7
   146f8:	andeq	r4, r1, r4, lsl #7
   146fc:	andeq	r4, r1, r4, lsl #7
   14700:	andeq	r4, r1, r4, lsl #7
   14704:	andeq	r4, r1, r4, lsl #7
   14708:	andeq	r4, r1, r4, lsl #7
   1470c:	andeq	r4, r1, r4, lsl #7
   14710:	andeq	r4, r1, r4, lsl #7
   14714:	andeq	r3, r1, r0, ror #28
   14718:	andeq	r3, r1, r0, ror #28
   1471c:	andeq	r3, r1, r0, ror #28
   14720:	andeq	r3, r1, r0, ror #28
   14724:	ldrdeq	r3, [r1], -r0
   14728:	andeq	r3, r1, r0, lsl pc
   1472c:	andeq	r4, r1, r4, lsl #7
   14730:	andeq	r4, r1, r4, lsl #7
   14734:	andeq	r4, r1, r4, lsl #7
   14738:	andeq	r4, r1, r4, lsl #7
   1473c:	andeq	r4, r1, r4, lsl #7
   14740:	andeq	r4, r1, r4, lsl #7
   14744:	andeq	r4, r1, r4, lsl #7
   14748:	andeq	r4, r1, r4, lsl #7
   1474c:	andeq	r4, r1, r4, lsl #7
   14750:	andeq	r4, r1, r4, lsl #7
   14754:	andeq	r4, r1, r4, lsl #7
   14758:	andeq	r4, r1, r4, lsl #7
   1475c:	andeq	r4, r1, r4, lsl #7
   14760:	andeq	r4, r1, r4, lsl #7
   14764:	andeq	r4, r1, r4, lsl #7
   14768:	andeq	r4, r1, r4, lsl #7
   1476c:	andeq	r4, r1, r4, lsl #7
   14770:	andeq	r4, r1, r4, lsl #7
   14774:	andeq	r4, r1, r4, lsl #7
   14778:	andeq	r4, r1, r4, lsl #7
   1477c:	andeq	r4, r1, r4, lsl #7
   14780:	andeq	r4, r1, r4, lsl #7
   14784:	andeq	r4, r1, r4, lsl #7
   14788:	andeq	r4, r1, r4, lsl #7
   1478c:	andeq	r4, r1, r4, lsl #7
   14790:	andeq	r4, r1, r4, lsl #7
   14794:	andeq	r3, r1, r0, ror #28
   14798:	andeq	r3, r1, r8, lsl #26
   1479c:	andeq	r4, r1, r4, lsl #7
   147a0:	andeq	r3, r1, r0, ror #28
   147a4:	andeq	r4, r1, r4, lsl #7
   147a8:	andeq	r3, r1, r0, ror #28
   147ac:	andeq	r4, r1, r4, lsl #7
   147b0:	andeq	r4, r1, r4, lsl #7
   147b4:	andeq	r4, r1, r4, lsl #7
   147b8:	andeq	r4, r1, r4, lsl #7
   147bc:	andeq	r4, r1, r4, lsl #7
   147c0:	andeq	r4, r1, r4, lsl #7
   147c4:	andeq	r4, r1, r4, lsl #7
   147c8:	andeq	r4, r1, r4, lsl #7
   147cc:	andeq	r4, r1, r4, lsl #7
   147d0:	andeq	r4, r1, r4, lsl #7
   147d4:	andeq	r4, r1, r4, lsl #7
   147d8:	andeq	r4, r1, r4, lsl #7
   147dc:	andeq	r4, r1, r4, lsl #7
   147e0:	andeq	r4, r1, r4, lsl #7
   147e4:	andeq	r4, r1, r4, lsl #7
   147e8:	andeq	r4, r1, r4, lsl #7
   147ec:	andeq	r4, r1, r4, lsl #7
   147f0:	andeq	r4, r1, r4, lsl #7
   147f4:	andeq	r4, r1, r4, lsl #7
   147f8:	andeq	r4, r1, r4, lsl #7
   147fc:	andeq	r4, r1, r4, lsl #7
   14800:	andeq	r4, r1, r4, lsl #7
   14804:	andeq	r4, r1, r4, lsl #7
   14808:	andeq	r4, r1, r4, lsl #7
   1480c:	andeq	r4, r1, r4, lsl #7
   14810:	andeq	r4, r1, r4, lsl #7
   14814:	andeq	r3, r1, r8, asr #27
   14818:	andeq	r3, r1, r0, ror #28
   1481c:	andeq	r3, r1, r8, asr #27
   14820:	andeq	r3, r1, r8, lsl lr
   14824:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14828:	strd	r6, [sp, #8]
   1482c:	strd	r8, [sp, #16]
   14830:	strd	sl, [sp, #24]
   14834:	str	lr, [sp, #32]
   14838:	sub	sp, sp, #52	; 0x34
   1483c:	mov	r5, r0
   14840:	str	r1, [sp, #24]
   14844:	str	r2, [sp, #28]
   14848:	mov	r4, r3
   1484c:	bl	11090 <__errno_location@plt>
   14850:	str	r0, [sp, #32]
   14854:	ldr	r3, [r0]
   14858:	str	r3, [sp, #36]	; 0x24
   1485c:	movw	r3, #33064	; 0x8128
   14860:	movt	r3, #2
   14864:	ldr	r6, [r3]
   14868:	cmn	r5, #-2147483647	; 0x80000001
   1486c:	movne	r3, #0
   14870:	moveq	r3, #1
   14874:	orrs	r3, r3, r5, lsr #31
   14878:	bne	149dc <__assert_fail@plt+0x3850>
   1487c:	movw	r3, #33064	; 0x8128
   14880:	movt	r3, #2
   14884:	ldr	r2, [r3, #4]
   14888:	cmp	r2, r5
   1488c:	bgt	148fc <__assert_fail@plt+0x3770>
   14890:	str	r2, [sp, #44]	; 0x2c
   14894:	add	r3, r3, #8
   14898:	cmp	r6, r3
   1489c:	beq	149e0 <__assert_fail@plt+0x3854>
   148a0:	sub	r2, r5, r2
   148a4:	mov	r3, #8
   148a8:	str	r3, [sp]
   148ac:	mvn	r3, #-2147483648	; 0x80000000
   148b0:	add	r2, r2, #1
   148b4:	add	r1, sp, #44	; 0x2c
   148b8:	mov	r0, r6
   148bc:	bl	15c58 <__assert_fail@plt+0x4acc>
   148c0:	mov	r6, r0
   148c4:	movw	r3, #33064	; 0x8128
   148c8:	movt	r3, #2
   148cc:	str	r0, [r3]
   148d0:	movw	r7, #33064	; 0x8128
   148d4:	movt	r7, #2
   148d8:	ldr	r0, [r7, #4]
   148dc:	ldr	r2, [sp, #44]	; 0x2c
   148e0:	sub	r2, r2, r0
   148e4:	lsl	r2, r2, #3
   148e8:	mov	r1, #0
   148ec:	add	r0, r6, r0, lsl #3
   148f0:	bl	110b4 <memset@plt>
   148f4:	ldr	r3, [sp, #44]	; 0x2c
   148f8:	str	r3, [r7, #4]
   148fc:	add	fp, r6, r5, lsl #3
   14900:	ldr	r8, [r6, r5, lsl #3]
   14904:	ldr	r7, [fp, #4]
   14908:	ldr	r3, [r4, #4]
   1490c:	orr	r9, r3, #1
   14910:	add	sl, r4, #8
   14914:	ldr	r3, [r4, #44]	; 0x2c
   14918:	str	r3, [sp, #16]
   1491c:	ldr	r3, [r4, #40]	; 0x28
   14920:	str	r3, [sp, #12]
   14924:	str	sl, [sp, #8]
   14928:	str	r9, [sp, #4]
   1492c:	ldr	r3, [r4]
   14930:	str	r3, [sp]
   14934:	ldr	r3, [sp, #28]
   14938:	ldr	r2, [sp, #24]
   1493c:	mov	r1, r8
   14940:	mov	r0, r7
   14944:	bl	1312c <__assert_fail@plt+0x1fa0>
   14948:	cmp	r8, r0
   1494c:	bhi	149b0 <__assert_fail@plt+0x3824>
   14950:	add	r8, r0, #1
   14954:	str	r8, [r6, r5, lsl #3]
   14958:	movw	r3, #33296	; 0x8210
   1495c:	movt	r3, #2
   14960:	cmp	r7, r3
   14964:	beq	14970 <__assert_fail@plt+0x37e4>
   14968:	mov	r0, r7
   1496c:	bl	12d14 <__assert_fail@plt+0x1b88>
   14970:	mov	r0, r8
   14974:	bl	15a54 <__assert_fail@plt+0x48c8>
   14978:	mov	r7, r0
   1497c:	str	r0, [fp, #4]
   14980:	ldr	r3, [r4, #44]	; 0x2c
   14984:	str	r3, [sp, #16]
   14988:	ldr	r3, [r4, #40]	; 0x28
   1498c:	str	r3, [sp, #12]
   14990:	str	sl, [sp, #8]
   14994:	str	r9, [sp, #4]
   14998:	ldr	r3, [r4]
   1499c:	str	r3, [sp]
   149a0:	ldr	r3, [sp, #28]
   149a4:	ldr	r2, [sp, #24]
   149a8:	mov	r1, r8
   149ac:	bl	1312c <__assert_fail@plt+0x1fa0>
   149b0:	ldr	r3, [sp, #32]
   149b4:	ldr	r2, [sp, #36]	; 0x24
   149b8:	str	r2, [r3]
   149bc:	mov	r0, r7
   149c0:	add	sp, sp, #52	; 0x34
   149c4:	ldrd	r4, [sp]
   149c8:	ldrd	r6, [sp, #8]
   149cc:	ldrd	r8, [sp, #16]
   149d0:	ldrd	sl, [sp, #24]
   149d4:	add	sp, sp, #32
   149d8:	pop	{pc}		; (ldr pc, [sp], #4)
   149dc:	bl	11174 <abort@plt>
   149e0:	sub	r2, r5, r2
   149e4:	mov	r3, #8
   149e8:	str	r3, [sp]
   149ec:	mvn	r3, #-2147483648	; 0x80000000
   149f0:	add	r2, r2, #1
   149f4:	add	r1, sp, #44	; 0x2c
   149f8:	mov	r0, #0
   149fc:	bl	15c58 <__assert_fail@plt+0x4acc>
   14a00:	mov	r6, r0
   14a04:	movw	r3, #33064	; 0x8128
   14a08:	movt	r3, #2
   14a0c:	str	r0, [r3]
   14a10:	ldrd	r2, [r3, #8]
   14a14:	strd	r2, [r0]
   14a18:	b	148d0 <__assert_fail@plt+0x3744>
   14a1c:	strd	r4, [sp, #-16]!
   14a20:	str	r6, [sp, #8]
   14a24:	str	lr, [sp, #12]
   14a28:	mov	r4, r0
   14a2c:	bl	11090 <__errno_location@plt>
   14a30:	mov	r5, r0
   14a34:	ldr	r6, [r0]
   14a38:	cmp	r4, #0
   14a3c:	ldr	r3, [pc, #32]	; 14a64 <__assert_fail@plt+0x38d8>
   14a40:	moveq	r4, r3
   14a44:	mov	r1, #48	; 0x30
   14a48:	mov	r0, r4
   14a4c:	bl	15dc8 <__assert_fail@plt+0x4c3c>
   14a50:	str	r6, [r5]
   14a54:	ldrd	r4, [sp]
   14a58:	ldr	r6, [sp, #8]
   14a5c:	add	sp, sp, #12
   14a60:	pop	{pc}		; (ldr pc, [sp], #4)
   14a64:	andeq	r8, r2, r0, lsl r3
   14a68:	subs	r3, r0, #0
   14a6c:	ldr	r2, [pc, #8]	; 14a7c <__assert_fail@plt+0x38f0>
   14a70:	moveq	r3, r2
   14a74:	ldr	r0, [r3]
   14a78:	bx	lr
   14a7c:	andeq	r8, r2, r0, lsl r3
   14a80:	subs	r3, r0, #0
   14a84:	ldr	r2, [pc, #8]	; 14a94 <__assert_fail@plt+0x3908>
   14a88:	moveq	r3, r2
   14a8c:	str	r1, [r3]
   14a90:	bx	lr
   14a94:	andeq	r8, r2, r0, lsl r3
   14a98:	push	{lr}		; (str lr, [sp, #-4]!)
   14a9c:	subs	r3, r0, #0
   14aa0:	ldr	r0, [pc, #44]	; 14ad4 <__assert_fail@plt+0x3948>
   14aa4:	moveq	r3, r0
   14aa8:	add	r3, r3, #8
   14aac:	lsr	lr, r1, #5
   14ab0:	and	r1, r1, #31
   14ab4:	ldr	ip, [r3, lr, lsl #2]
   14ab8:	lsr	r0, ip, r1
   14abc:	eor	r2, r2, r0
   14ac0:	and	r2, r2, #1
   14ac4:	eor	r1, ip, r2, lsl r1
   14ac8:	str	r1, [r3, lr, lsl #2]
   14acc:	and	r0, r0, #1
   14ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ad4:	andeq	r8, r2, r0, lsl r3
   14ad8:	subs	r3, r0, #0
   14adc:	ldr	r2, [pc, #12]	; 14af0 <__assert_fail@plt+0x3964>
   14ae0:	moveq	r3, r2
   14ae4:	ldr	r0, [r3, #4]
   14ae8:	str	r1, [r3, #4]
   14aec:	bx	lr
   14af0:	andeq	r8, r2, r0, lsl r3
   14af4:	subs	r3, r0, #0
   14af8:	ldr	r0, [pc, #44]	; 14b2c <__assert_fail@plt+0x39a0>
   14afc:	moveq	r3, r0
   14b00:	mov	r0, #10
   14b04:	str	r0, [r3]
   14b08:	cmp	r2, #0
   14b0c:	cmpne	r1, #0
   14b10:	beq	14b20 <__assert_fail@plt+0x3994>
   14b14:	str	r1, [r3, #40]	; 0x28
   14b18:	str	r2, [r3, #44]	; 0x2c
   14b1c:	bx	lr
   14b20:	str	r4, [sp, #-8]!
   14b24:	str	lr, [sp, #4]
   14b28:	bl	11174 <abort@plt>
   14b2c:	andeq	r8, r2, r0, lsl r3
   14b30:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14b34:	strd	r6, [sp, #8]
   14b38:	strd	r8, [sp, #16]
   14b3c:	str	sl, [sp, #24]
   14b40:	str	lr, [sp, #28]
   14b44:	sub	sp, sp, #24
   14b48:	mov	r7, r0
   14b4c:	mov	r8, r1
   14b50:	mov	r9, r2
   14b54:	mov	sl, r3
   14b58:	ldr	r4, [sp, #56]	; 0x38
   14b5c:	cmp	r4, #0
   14b60:	ldr	r3, [pc, #104]	; 14bd0 <__assert_fail@plt+0x3a44>
   14b64:	moveq	r4, r3
   14b68:	bl	11090 <__errno_location@plt>
   14b6c:	mov	r5, r0
   14b70:	ldr	r6, [r0]
   14b74:	ldr	r3, [r4, #44]	; 0x2c
   14b78:	str	r3, [sp, #16]
   14b7c:	ldr	r3, [r4, #40]	; 0x28
   14b80:	str	r3, [sp, #12]
   14b84:	add	r3, r4, #8
   14b88:	str	r3, [sp, #8]
   14b8c:	ldr	r3, [r4, #4]
   14b90:	str	r3, [sp, #4]
   14b94:	ldr	r3, [r4]
   14b98:	str	r3, [sp]
   14b9c:	mov	r3, sl
   14ba0:	mov	r2, r9
   14ba4:	mov	r1, r8
   14ba8:	mov	r0, r7
   14bac:	bl	1312c <__assert_fail@plt+0x1fa0>
   14bb0:	str	r6, [r5]
   14bb4:	add	sp, sp, #24
   14bb8:	ldrd	r4, [sp]
   14bbc:	ldrd	r6, [sp, #8]
   14bc0:	ldrd	r8, [sp, #16]
   14bc4:	ldr	sl, [sp, #24]
   14bc8:	add	sp, sp, #28
   14bcc:	pop	{pc}		; (ldr pc, [sp], #4)
   14bd0:	andeq	r8, r2, r0, lsl r3
   14bd4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14bd8:	strd	r6, [sp, #8]
   14bdc:	strd	r8, [sp, #16]
   14be0:	strd	sl, [sp, #24]
   14be4:	str	lr, [sp, #32]
   14be8:	sub	sp, sp, #44	; 0x2c
   14bec:	mov	r8, r0
   14bf0:	mov	sl, r1
   14bf4:	mov	r6, r2
   14bf8:	subs	r4, r3, #0
   14bfc:	ldr	r3, [pc, #200]	; 14ccc <__assert_fail@plt+0x3b40>
   14c00:	moveq	r4, r3
   14c04:	bl	11090 <__errno_location@plt>
   14c08:	mov	r7, r0
   14c0c:	ldr	fp, [r0]
   14c10:	ldr	r5, [r4, #4]
   14c14:	cmp	r6, #0
   14c18:	orreq	r5, r5, #1
   14c1c:	add	r9, r4, #8
   14c20:	ldr	r3, [r4, #44]	; 0x2c
   14c24:	str	r3, [sp, #16]
   14c28:	ldr	r3, [r4, #40]	; 0x28
   14c2c:	str	r3, [sp, #12]
   14c30:	str	r9, [sp, #8]
   14c34:	str	r5, [sp, #4]
   14c38:	ldr	r3, [r4]
   14c3c:	str	r3, [sp]
   14c40:	str	sl, [sp, #36]	; 0x24
   14c44:	mov	r3, sl
   14c48:	str	r8, [sp, #32]
   14c4c:	mov	r2, r8
   14c50:	mov	r1, #0
   14c54:	mov	r0, r1
   14c58:	bl	1312c <__assert_fail@plt+0x1fa0>
   14c5c:	mov	sl, r0
   14c60:	add	r8, r0, #1
   14c64:	mov	r0, r8
   14c68:	bl	15a54 <__assert_fail@plt+0x48c8>
   14c6c:	str	r0, [sp, #28]
   14c70:	ldr	r3, [r4, #44]	; 0x2c
   14c74:	str	r3, [sp, #16]
   14c78:	ldr	r3, [r4, #40]	; 0x28
   14c7c:	str	r3, [sp, #12]
   14c80:	str	r9, [sp, #8]
   14c84:	str	r5, [sp, #4]
   14c88:	ldr	r3, [r4]
   14c8c:	str	r3, [sp]
   14c90:	ldr	r3, [sp, #36]	; 0x24
   14c94:	ldr	r2, [sp, #32]
   14c98:	mov	r1, r8
   14c9c:	bl	1312c <__assert_fail@plt+0x1fa0>
   14ca0:	str	fp, [r7]
   14ca4:	cmp	r6, #0
   14ca8:	strne	sl, [r6]
   14cac:	ldr	r0, [sp, #28]
   14cb0:	add	sp, sp, #44	; 0x2c
   14cb4:	ldrd	r4, [sp]
   14cb8:	ldrd	r6, [sp, #8]
   14cbc:	ldrd	r8, [sp, #16]
   14cc0:	ldrd	sl, [sp, #24]
   14cc4:	add	sp, sp, #32
   14cc8:	pop	{pc}		; (ldr pc, [sp], #4)
   14ccc:	andeq	r8, r2, r0, lsl r3
   14cd0:	str	r4, [sp, #-8]!
   14cd4:	str	lr, [sp, #4]
   14cd8:	mov	r3, r2
   14cdc:	mov	r2, #0
   14ce0:	bl	14bd4 <__assert_fail@plt+0x3a48>
   14ce4:	ldr	r4, [sp]
   14ce8:	add	sp, sp, #4
   14cec:	pop	{pc}		; (ldr pc, [sp], #4)
   14cf0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14cf4:	strd	r6, [sp, #8]
   14cf8:	str	r8, [sp, #16]
   14cfc:	str	lr, [sp, #20]
   14d00:	movw	r3, #33064	; 0x8128
   14d04:	movt	r3, #2
   14d08:	ldr	r7, [r3]
   14d0c:	ldr	r3, [r3, #4]
   14d10:	cmp	r3, #1
   14d14:	ble	14d40 <__assert_fail@plt+0x3bb4>
   14d18:	mov	r4, #1
   14d1c:	add	r6, r7, #4
   14d20:	movw	r5, #33064	; 0x8128
   14d24:	movt	r5, #2
   14d28:	ldr	r0, [r6, r4, lsl #3]
   14d2c:	bl	12d14 <__assert_fail@plt+0x1b88>
   14d30:	add	r4, r4, #1
   14d34:	ldr	r3, [r5, #4]
   14d38:	cmp	r3, r4
   14d3c:	bgt	14d28 <__assert_fail@plt+0x3b9c>
   14d40:	ldr	r0, [r7, #4]
   14d44:	movw	r3, #33296	; 0x8210
   14d48:	movt	r3, #2
   14d4c:	cmp	r0, r3
   14d50:	beq	14d74 <__assert_fail@plt+0x3be8>
   14d54:	bl	12d14 <__assert_fail@plt+0x1b88>
   14d58:	movw	r3, #33064	; 0x8128
   14d5c:	movt	r3, #2
   14d60:	mov	r2, #256	; 0x100
   14d64:	str	r2, [r3, #8]
   14d68:	movw	r2, #33296	; 0x8210
   14d6c:	movt	r2, #2
   14d70:	str	r2, [r3, #12]
   14d74:	ldr	r3, [pc, #64]	; 14dbc <__assert_fail@plt+0x3c30>
   14d78:	cmp	r7, r3
   14d7c:	beq	14d98 <__assert_fail@plt+0x3c0c>
   14d80:	mov	r0, r7
   14d84:	bl	12d14 <__assert_fail@plt+0x1b88>
   14d88:	movw	r3, #33064	; 0x8128
   14d8c:	movt	r3, #2
   14d90:	add	r2, r3, #8
   14d94:	str	r2, [r3]
   14d98:	movw	r3, #33064	; 0x8128
   14d9c:	movt	r3, #2
   14da0:	mov	r2, #1
   14da4:	str	r2, [r3, #4]
   14da8:	ldrd	r4, [sp]
   14dac:	ldrd	r6, [sp, #8]
   14db0:	ldr	r8, [sp, #16]
   14db4:	add	sp, sp, #20
   14db8:	pop	{pc}		; (ldr pc, [sp], #4)
   14dbc:	andeq	r8, r2, r0, lsr r1
   14dc0:	str	r4, [sp, #-8]!
   14dc4:	str	lr, [sp, #4]
   14dc8:	ldr	r3, [pc, #16]	; 14de0 <__assert_fail@plt+0x3c54>
   14dcc:	mvn	r2, #0
   14dd0:	bl	14824 <__assert_fail@plt+0x3698>
   14dd4:	ldr	r4, [sp]
   14dd8:	add	sp, sp, #4
   14ddc:	pop	{pc}		; (ldr pc, [sp], #4)
   14de0:	andeq	r8, r2, r0, lsl r3
   14de4:	str	r4, [sp, #-8]!
   14de8:	str	lr, [sp, #4]
   14dec:	ldr	r3, [pc, #12]	; 14e00 <__assert_fail@plt+0x3c74>
   14df0:	bl	14824 <__assert_fail@plt+0x3698>
   14df4:	ldr	r4, [sp]
   14df8:	add	sp, sp, #4
   14dfc:	pop	{pc}		; (ldr pc, [sp], #4)
   14e00:	andeq	r8, r2, r0, lsl r3
   14e04:	str	r4, [sp, #-8]!
   14e08:	str	lr, [sp, #4]
   14e0c:	mov	r1, r0
   14e10:	mov	r0, #0
   14e14:	bl	14dc0 <__assert_fail@plt+0x3c34>
   14e18:	ldr	r4, [sp]
   14e1c:	add	sp, sp, #4
   14e20:	pop	{pc}		; (ldr pc, [sp], #4)
   14e24:	str	r4, [sp, #-8]!
   14e28:	str	lr, [sp, #4]
   14e2c:	mov	r2, r1
   14e30:	mov	r1, r0
   14e34:	mov	r0, #0
   14e38:	bl	14de4 <__assert_fail@plt+0x3c58>
   14e3c:	ldr	r4, [sp]
   14e40:	add	sp, sp, #4
   14e44:	pop	{pc}		; (ldr pc, [sp], #4)
   14e48:	strd	r4, [sp, #-12]!
   14e4c:	str	lr, [sp, #8]
   14e50:	sub	sp, sp, #52	; 0x34
   14e54:	mov	r4, r0
   14e58:	mov	r5, r2
   14e5c:	mov	r0, sp
   14e60:	bl	12f98 <__assert_fail@plt+0x1e0c>
   14e64:	mov	r3, sp
   14e68:	mvn	r2, #0
   14e6c:	mov	r1, r5
   14e70:	mov	r0, r4
   14e74:	bl	14824 <__assert_fail@plt+0x3698>
   14e78:	add	sp, sp, #52	; 0x34
   14e7c:	ldrd	r4, [sp]
   14e80:	add	sp, sp, #8
   14e84:	pop	{pc}		; (ldr pc, [sp], #4)
   14e88:	strd	r4, [sp, #-16]!
   14e8c:	str	r6, [sp, #8]
   14e90:	str	lr, [sp, #12]
   14e94:	sub	sp, sp, #48	; 0x30
   14e98:	mov	r4, r0
   14e9c:	mov	r5, r2
   14ea0:	mov	r6, r3
   14ea4:	mov	r0, sp
   14ea8:	bl	12f98 <__assert_fail@plt+0x1e0c>
   14eac:	mov	r3, sp
   14eb0:	mov	r2, r6
   14eb4:	mov	r1, r5
   14eb8:	mov	r0, r4
   14ebc:	bl	14824 <__assert_fail@plt+0x3698>
   14ec0:	add	sp, sp, #48	; 0x30
   14ec4:	ldrd	r4, [sp]
   14ec8:	ldr	r6, [sp, #8]
   14ecc:	add	sp, sp, #12
   14ed0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ed4:	str	r4, [sp, #-8]!
   14ed8:	str	lr, [sp, #4]
   14edc:	mov	r2, r1
   14ee0:	mov	r1, r0
   14ee4:	mov	r0, #0
   14ee8:	bl	14e48 <__assert_fail@plt+0x3cbc>
   14eec:	ldr	r4, [sp]
   14ef0:	add	sp, sp, #4
   14ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ef8:	str	r4, [sp, #-8]!
   14efc:	str	lr, [sp, #4]
   14f00:	mov	r3, r2
   14f04:	mov	r2, r1
   14f08:	mov	r1, r0
   14f0c:	mov	r0, #0
   14f10:	bl	14e88 <__assert_fail@plt+0x3cfc>
   14f14:	ldr	r4, [sp]
   14f18:	add	sp, sp, #4
   14f1c:	pop	{pc}		; (ldr pc, [sp], #4)
   14f20:	strd	r4, [sp, #-12]!
   14f24:	str	lr, [sp, #8]
   14f28:	sub	sp, sp, #52	; 0x34
   14f2c:	mov	r4, r0
   14f30:	mov	r5, r1
   14f34:	mov	r1, r2
   14f38:	ldr	r0, [pc, #92]	; 14f9c <__assert_fail@plt+0x3e10>
   14f3c:	ldrd	r2, [r0]
   14f40:	strd	r2, [sp]
   14f44:	ldrd	r2, [r0, #8]
   14f48:	strd	r2, [sp, #8]
   14f4c:	ldrd	r2, [r0, #16]
   14f50:	strd	r2, [sp, #16]
   14f54:	ldrd	r2, [r0, #24]
   14f58:	strd	r2, [sp, #24]
   14f5c:	ldrd	r2, [r0, #32]
   14f60:	strd	r2, [sp, #32]
   14f64:	ldrd	r2, [r0, #40]	; 0x28
   14f68:	strd	r2, [sp, #40]	; 0x28
   14f6c:	mov	r2, #1
   14f70:	mov	r0, sp
   14f74:	bl	14a98 <__assert_fail@plt+0x390c>
   14f78:	mov	r3, sp
   14f7c:	mov	r2, r5
   14f80:	mov	r1, r4
   14f84:	mov	r0, #0
   14f88:	bl	14824 <__assert_fail@plt+0x3698>
   14f8c:	add	sp, sp, #52	; 0x34
   14f90:	ldrd	r4, [sp]
   14f94:	add	sp, sp, #8
   14f98:	pop	{pc}		; (ldr pc, [sp], #4)
   14f9c:	andeq	r8, r2, r0, lsl r3
   14fa0:	str	r4, [sp, #-8]!
   14fa4:	str	lr, [sp, #4]
   14fa8:	mov	r2, r1
   14fac:	mvn	r1, #0
   14fb0:	bl	14f20 <__assert_fail@plt+0x3d94>
   14fb4:	ldr	r4, [sp]
   14fb8:	add	sp, sp, #4
   14fbc:	pop	{pc}		; (ldr pc, [sp], #4)
   14fc0:	str	r4, [sp, #-8]!
   14fc4:	str	lr, [sp, #4]
   14fc8:	mov	r1, #58	; 0x3a
   14fcc:	bl	14fa0 <__assert_fail@plt+0x3e14>
   14fd0:	ldr	r4, [sp]
   14fd4:	add	sp, sp, #4
   14fd8:	pop	{pc}		; (ldr pc, [sp], #4)
   14fdc:	str	r4, [sp, #-8]!
   14fe0:	str	lr, [sp, #4]
   14fe4:	mov	r2, #58	; 0x3a
   14fe8:	bl	14f20 <__assert_fail@plt+0x3d94>
   14fec:	ldr	r4, [sp]
   14ff0:	add	sp, sp, #4
   14ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ff8:	strd	r4, [sp, #-12]!
   14ffc:	str	lr, [sp, #8]
   15000:	sub	sp, sp, #100	; 0x64
   15004:	mov	r4, r0
   15008:	mov	r5, r2
   1500c:	mov	r0, sp
   15010:	bl	12f98 <__assert_fail@plt+0x1e0c>
   15014:	ldrd	r2, [sp]
   15018:	strd	r2, [sp, #48]	; 0x30
   1501c:	ldrd	r2, [sp, #8]
   15020:	strd	r2, [sp, #56]	; 0x38
   15024:	ldrd	r2, [sp, #16]
   15028:	strd	r2, [sp, #64]	; 0x40
   1502c:	ldrd	r2, [sp, #24]
   15030:	strd	r2, [sp, #72]	; 0x48
   15034:	ldrd	r2, [sp, #32]
   15038:	strd	r2, [sp, #80]	; 0x50
   1503c:	ldrd	r2, [sp, #40]	; 0x28
   15040:	strd	r2, [sp, #88]	; 0x58
   15044:	mov	r2, #1
   15048:	mov	r1, #58	; 0x3a
   1504c:	add	r0, sp, #48	; 0x30
   15050:	bl	14a98 <__assert_fail@plt+0x390c>
   15054:	add	r3, sp, #48	; 0x30
   15058:	mvn	r2, #0
   1505c:	mov	r1, r5
   15060:	mov	r0, r4
   15064:	bl	14824 <__assert_fail@plt+0x3698>
   15068:	add	sp, sp, #100	; 0x64
   1506c:	ldrd	r4, [sp]
   15070:	add	sp, sp, #8
   15074:	pop	{pc}		; (ldr pc, [sp], #4)
   15078:	strd	r4, [sp, #-20]!	; 0xffffffec
   1507c:	strd	r6, [sp, #8]
   15080:	str	lr, [sp, #16]
   15084:	sub	sp, sp, #52	; 0x34
   15088:	mov	r4, r0
   1508c:	mov	r5, r3
   15090:	ldr	r3, [pc, #92]	; 150f4 <__assert_fail@plt+0x3f68>
   15094:	ldrd	r6, [r3]
   15098:	strd	r6, [sp]
   1509c:	ldrd	r6, [r3, #8]
   150a0:	strd	r6, [sp, #8]
   150a4:	ldrd	r6, [r3, #16]
   150a8:	strd	r6, [sp, #16]
   150ac:	ldrd	r6, [r3, #24]
   150b0:	strd	r6, [sp, #24]
   150b4:	ldrd	r6, [r3, #32]
   150b8:	strd	r6, [sp, #32]
   150bc:	ldrd	r6, [r3, #40]	; 0x28
   150c0:	strd	r6, [sp, #40]	; 0x28
   150c4:	mov	r0, sp
   150c8:	bl	14af4 <__assert_fail@plt+0x3968>
   150cc:	mov	r3, sp
   150d0:	ldr	r2, [sp, #72]	; 0x48
   150d4:	mov	r1, r5
   150d8:	mov	r0, r4
   150dc:	bl	14824 <__assert_fail@plt+0x3698>
   150e0:	add	sp, sp, #52	; 0x34
   150e4:	ldrd	r4, [sp]
   150e8:	ldrd	r6, [sp, #8]
   150ec:	add	sp, sp, #16
   150f0:	pop	{pc}		; (ldr pc, [sp], #4)
   150f4:	andeq	r8, r2, r0, lsl r3
   150f8:	push	{lr}		; (str lr, [sp, #-4]!)
   150fc:	sub	sp, sp, #12
   15100:	mvn	ip, #0
   15104:	str	ip, [sp]
   15108:	bl	15078 <__assert_fail@plt+0x3eec>
   1510c:	add	sp, sp, #12
   15110:	pop	{pc}		; (ldr pc, [sp], #4)
   15114:	str	r4, [sp, #-8]!
   15118:	str	lr, [sp, #4]
   1511c:	mov	r3, r2
   15120:	mov	r2, r1
   15124:	mov	r1, r0
   15128:	mov	r0, #0
   1512c:	bl	150f8 <__assert_fail@plt+0x3f6c>
   15130:	ldr	r4, [sp]
   15134:	add	sp, sp, #4
   15138:	pop	{pc}		; (ldr pc, [sp], #4)
   1513c:	push	{lr}		; (str lr, [sp, #-4]!)
   15140:	sub	sp, sp, #12
   15144:	str	r3, [sp]
   15148:	mov	r3, r2
   1514c:	mov	r2, r1
   15150:	mov	r1, r0
   15154:	mov	r0, #0
   15158:	bl	15078 <__assert_fail@plt+0x3eec>
   1515c:	add	sp, sp, #12
   15160:	pop	{pc}		; (ldr pc, [sp], #4)
   15164:	str	r4, [sp, #-8]!
   15168:	str	lr, [sp, #4]
   1516c:	ldr	r3, [pc, #12]	; 15180 <__assert_fail@plt+0x3ff4>
   15170:	bl	14824 <__assert_fail@plt+0x3698>
   15174:	ldr	r4, [sp]
   15178:	add	sp, sp, #4
   1517c:	pop	{pc}		; (ldr pc, [sp], #4)
   15180:	andeq	r8, r2, r8, lsr r1
   15184:	str	r4, [sp, #-8]!
   15188:	str	lr, [sp, #4]
   1518c:	mov	r2, r1
   15190:	mov	r1, r0
   15194:	mov	r0, #0
   15198:	bl	15164 <__assert_fail@plt+0x3fd8>
   1519c:	ldr	r4, [sp]
   151a0:	add	sp, sp, #4
   151a4:	pop	{pc}		; (ldr pc, [sp], #4)
   151a8:	str	r4, [sp, #-8]!
   151ac:	str	lr, [sp, #4]
   151b0:	mvn	r2, #0
   151b4:	bl	15164 <__assert_fail@plt+0x3fd8>
   151b8:	ldr	r4, [sp]
   151bc:	add	sp, sp, #4
   151c0:	pop	{pc}		; (ldr pc, [sp], #4)
   151c4:	str	r4, [sp, #-8]!
   151c8:	str	lr, [sp, #4]
   151cc:	mov	r1, r0
   151d0:	mov	r0, #0
   151d4:	bl	151a8 <__assert_fail@plt+0x401c>
   151d8:	ldr	r4, [sp]
   151dc:	add	sp, sp, #4
   151e0:	pop	{pc}		; (ldr pc, [sp], #4)
   151e4:	strd	r4, [sp, #-16]!
   151e8:	str	r6, [sp, #8]
   151ec:	str	lr, [sp, #12]
   151f0:	mov	r5, r0
   151f4:	mov	r0, #33	; 0x21
   151f8:	bl	15a0c <__assert_fail@plt+0x4880>
   151fc:	mov	r4, r0
   15200:	mov	r2, #32
   15204:	add	r1, r5, #44	; 0x2c
   15208:	bl	110c0 <strncpy@plt>
   1520c:	mov	r3, #0
   15210:	strb	r3, [r4, #32]
   15214:	mov	r0, r4
   15218:	bl	11078 <strlen@plt>
   1521c:	add	r0, r4, r0
   15220:	cmp	r4, r0
   15224:	bcs	15234 <__assert_fail@plt+0x40a8>
   15228:	ldrb	r3, [r0, #-1]
   1522c:	cmp	r3, #32
   15230:	beq	15248 <__assert_fail@plt+0x40bc>
   15234:	mov	r0, r4
   15238:	ldrd	r4, [sp]
   1523c:	ldr	r6, [sp, #8]
   15240:	add	sp, sp, #12
   15244:	pop	{pc}		; (ldr pc, [sp], #4)
   15248:	sub	r0, r0, #1
   1524c:	mov	r1, r4
   15250:	mov	r2, #0
   15254:	strb	r2, [r0]
   15258:	cmp	r0, r1
   1525c:	beq	15234 <__assert_fail@plt+0x40a8>
   15260:	ldrb	r3, [r0, #-1]!
   15264:	cmp	r3, #32
   15268:	bne	15234 <__assert_fail@plt+0x40a8>
   1526c:	b	15254 <__assert_fail@plt+0x40c8>
   15270:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15274:	strd	r6, [sp, #8]
   15278:	strd	r8, [sp, #16]
   1527c:	strd	sl, [sp, #24]
   15280:	str	lr, [sp, #32]
   15284:	sub	sp, sp, #28
   15288:	mov	fp, r1
   1528c:	str	r2, [sp, #12]
   15290:	mov	r7, r3
   15294:	mov	r8, #0
   15298:	str	r8, [sp, #20]
   1529c:	bl	10ed4 <utmpxname@plt>
   152a0:	bl	10f64 <setutxent@plt>
   152a4:	mov	r6, r8
   152a8:	and	r5, r7, #2
   152ac:	and	r7, r7, #1
   152b0:	mov	r9, r6
   152b4:	mov	sl, #0
   152b8:	b	152f0 <__assert_fail@plt+0x4164>
   152bc:	cmp	r7, #0
   152c0:	beq	1531c <__assert_fail@plt+0x4190>
   152c4:	ldr	r0, [r4, #4]
   152c8:	cmp	r0, #0
   152cc:	ble	1531c <__assert_fail@plt+0x4190>
   152d0:	mov	r1, sl
   152d4:	bl	11048 <kill@plt>
   152d8:	cmp	r0, #0
   152dc:	bge	1531c <__assert_fail@plt+0x4190>
   152e0:	bl	11090 <__errno_location@plt>
   152e4:	ldr	r3, [r0]
   152e8:	cmp	r3, #3
   152ec:	bne	1531c <__assert_fail@plt+0x4190>
   152f0:	bl	11180 <getutxent@plt>
   152f4:	subs	r4, r0, #0
   152f8:	beq	15368 <__assert_fail@plt+0x41dc>
   152fc:	ldrb	r3, [r4, #44]	; 0x2c
   15300:	cmp	r3, #0
   15304:	beq	15314 <__assert_fail@plt+0x4188>
   15308:	ldrsh	r3, [r4]
   1530c:	cmp	r3, #7
   15310:	beq	152bc <__assert_fail@plt+0x4130>
   15314:	cmp	r5, #0
   15318:	bne	152f0 <__assert_fail@plt+0x4164>
   1531c:	ldr	r3, [sp, #20]
   15320:	cmp	r3, r9
   15324:	beq	15344 <__assert_fail@plt+0x41b8>
   15328:	add	r0, r6, r6, lsl #1
   1532c:	mov	r2, #384	; 0x180
   15330:	mov	r1, r4
   15334:	add	r0, r8, r0, lsl #7
   15338:	bl	10f04 <memcpy@plt>
   1533c:	add	r6, r6, #1
   15340:	b	152b0 <__assert_fail@plt+0x4124>
   15344:	mov	r3, #384	; 0x180
   15348:	str	r3, [sp]
   1534c:	mvn	r3, #0
   15350:	mov	r2, #1
   15354:	add	r1, sp, #20
   15358:	mov	r0, r8
   1535c:	bl	15c58 <__assert_fail@plt+0x4acc>
   15360:	mov	r8, r0
   15364:	b	15328 <__assert_fail@plt+0x419c>
   15368:	bl	11108 <endutxent@plt>
   1536c:	str	r6, [fp]
   15370:	ldr	r3, [sp, #12]
   15374:	str	r8, [r3]
   15378:	mov	r0, #0
   1537c:	add	sp, sp, #28
   15380:	ldrd	r4, [sp]
   15384:	ldrd	r6, [sp, #8]
   15388:	ldrd	r8, [sp, #16]
   1538c:	ldrd	sl, [sp, #24]
   15390:	add	sp, sp, #32
   15394:	pop	{pc}		; (ldr pc, [sp], #4)
   15398:	strd	r4, [sp, #-16]!
   1539c:	str	r6, [sp, #8]
   153a0:	str	lr, [sp, #12]
   153a4:	mov	r6, r1
   153a8:	mov	r4, r2
   153ac:	mov	r1, #0
   153b0:	bl	11114 <setlocale@plt>
   153b4:	subs	r5, r0, #0
   153b8:	beq	153fc <__assert_fail@plt+0x4270>
   153bc:	mov	r0, r5
   153c0:	bl	11078 <strlen@plt>
   153c4:	cmp	r4, r0
   153c8:	bhi	15418 <__assert_fail@plt+0x428c>
   153cc:	cmp	r4, #0
   153d0:	moveq	r0, #34	; 0x22
   153d4:	beq	1542c <__assert_fail@plt+0x42a0>
   153d8:	sub	r4, r4, #1
   153dc:	mov	r2, r4
   153e0:	mov	r1, r5
   153e4:	mov	r0, r6
   153e8:	bl	10f04 <memcpy@plt>
   153ec:	mov	r3, #0
   153f0:	strb	r3, [r6, r4]
   153f4:	mov	r0, #34	; 0x22
   153f8:	b	1542c <__assert_fail@plt+0x42a0>
   153fc:	cmp	r4, #0
   15400:	moveq	r0, #22
   15404:	beq	1542c <__assert_fail@plt+0x42a0>
   15408:	mov	r3, #0
   1540c:	strb	r3, [r6]
   15410:	mov	r0, #22
   15414:	b	1542c <__assert_fail@plt+0x42a0>
   15418:	add	r2, r0, #1
   1541c:	mov	r1, r5
   15420:	mov	r0, r6
   15424:	bl	10f04 <memcpy@plt>
   15428:	mov	r0, #0
   1542c:	ldrd	r4, [sp]
   15430:	ldr	r6, [sp, #8]
   15434:	add	sp, sp, #12
   15438:	pop	{pc}		; (ldr pc, [sp], #4)
   1543c:	str	r4, [sp, #-8]!
   15440:	str	lr, [sp, #4]
   15444:	mov	r1, #0
   15448:	bl	11114 <setlocale@plt>
   1544c:	ldr	r4, [sp]
   15450:	add	sp, sp, #4
   15454:	pop	{pc}		; (ldr pc, [sp], #4)
   15458:	strd	r4, [sp, #-16]!
   1545c:	str	r6, [sp, #8]
   15460:	str	lr, [sp, #12]
   15464:	sub	sp, sp, #32
   15468:	mov	r4, r0
   1546c:	ldr	r5, [sp, #48]	; 0x30
   15470:	ldr	r6, [sp, #52]	; 0x34
   15474:	cmp	r1, #0
   15478:	beq	15544 <__assert_fail@plt+0x43b8>
   1547c:	str	r3, [sp, #4]
   15480:	str	r2, [sp]
   15484:	mov	r3, r1
   15488:	movw	r2, #28992	; 0x7140
   1548c:	movt	r2, #1
   15490:	mov	r1, #1
   15494:	bl	110e4 <__fprintf_chk@plt>
   15498:	mov	r2, #5
   1549c:	movw	r1, #29012	; 0x7154
   154a0:	movt	r1, #1
   154a4:	mov	r0, #0
   154a8:	bl	10f4c <dcgettext@plt>
   154ac:	movw	r3, #2022	; 0x7e6
   154b0:	str	r3, [sp]
   154b4:	mov	r3, r0
   154b8:	movw	r2, #29740	; 0x742c
   154bc:	movt	r2, #1
   154c0:	mov	r1, #1
   154c4:	mov	r0, r4
   154c8:	bl	110e4 <__fprintf_chk@plt>
   154cc:	mov	r1, r4
   154d0:	mov	r0, #10
   154d4:	bl	10f40 <fputc_unlocked@plt>
   154d8:	mov	r2, #5
   154dc:	movw	r1, #29016	; 0x7158
   154e0:	movt	r1, #1
   154e4:	mov	r0, #0
   154e8:	bl	10f4c <dcgettext@plt>
   154ec:	movw	r3, #29188	; 0x7204
   154f0:	movt	r3, #1
   154f4:	mov	r2, r0
   154f8:	mov	r1, #1
   154fc:	mov	r0, r4
   15500:	bl	110e4 <__fprintf_chk@plt>
   15504:	mov	r1, r4
   15508:	mov	r0, #10
   1550c:	bl	10f40 <fputc_unlocked@plt>
   15510:	cmp	r6, #9
   15514:	ldrls	pc, [pc, r6, lsl #2]
   15518:	b	1581c <__assert_fail@plt+0x4690>
   1551c:	andeq	r5, r1, r8, lsl #11
   15520:	andeq	r5, r1, r0, ror #10
   15524:	muleq	r1, ip, r5
   15528:	ldrdeq	r5, [r1], -r0
   1552c:	andeq	r5, r1, ip, lsl #12
   15530:	andeq	r5, r1, r0, asr r6
   15534:	muleq	r1, ip, r6
   15538:	strdeq	r5, [r1], -r0
   1553c:	andeq	r5, r1, ip, asr #14
   15540:			; <UNDEFINED> instruction: 0x000157b0
   15544:	str	r3, [sp]
   15548:	mov	r3, r2
   1554c:	movw	r2, #29004	; 0x714c
   15550:	movt	r2, #1
   15554:	mov	r1, #1
   15558:	bl	110e4 <__fprintf_chk@plt>
   1555c:	b	15498 <__assert_fail@plt+0x430c>
   15560:	mov	r2, #5
   15564:	movw	r1, #29224	; 0x7228
   15568:	movt	r1, #1
   1556c:	mov	r0, #0
   15570:	bl	10f4c <dcgettext@plt>
   15574:	ldr	r3, [r5]
   15578:	mov	r2, r0
   1557c:	mov	r1, #1
   15580:	mov	r0, r4
   15584:	bl	110e4 <__fprintf_chk@plt>
   15588:	add	sp, sp, #32
   1558c:	ldrd	r4, [sp]
   15590:	ldr	r6, [sp, #8]
   15594:	add	sp, sp, #12
   15598:	pop	{pc}		; (ldr pc, [sp], #4)
   1559c:	mov	r2, #5
   155a0:	movw	r1, #29240	; 0x7238
   155a4:	movt	r1, #1
   155a8:	mov	r0, #0
   155ac:	bl	10f4c <dcgettext@plt>
   155b0:	ldr	r3, [r5, #4]
   155b4:	str	r3, [sp]
   155b8:	ldr	r3, [r5]
   155bc:	mov	r2, r0
   155c0:	mov	r1, #1
   155c4:	mov	r0, r4
   155c8:	bl	110e4 <__fprintf_chk@plt>
   155cc:	b	15588 <__assert_fail@plt+0x43fc>
   155d0:	mov	r2, #5
   155d4:	movw	r1, #29264	; 0x7250
   155d8:	movt	r1, #1
   155dc:	mov	r0, #0
   155e0:	bl	10f4c <dcgettext@plt>
   155e4:	ldr	r3, [r5, #8]
   155e8:	str	r3, [sp, #4]
   155ec:	ldr	r3, [r5, #4]
   155f0:	str	r3, [sp]
   155f4:	ldr	r3, [r5]
   155f8:	mov	r2, r0
   155fc:	mov	r1, #1
   15600:	mov	r0, r4
   15604:	bl	110e4 <__fprintf_chk@plt>
   15608:	b	15588 <__assert_fail@plt+0x43fc>
   1560c:	mov	r2, #5
   15610:	movw	r1, #29292	; 0x726c
   15614:	movt	r1, #1
   15618:	mov	r0, #0
   1561c:	bl	10f4c <dcgettext@plt>
   15620:	ldr	r3, [r5, #12]
   15624:	str	r3, [sp, #8]
   15628:	ldr	r3, [r5, #8]
   1562c:	str	r3, [sp, #4]
   15630:	ldr	r3, [r5, #4]
   15634:	str	r3, [sp]
   15638:	ldr	r3, [r5]
   1563c:	mov	r2, r0
   15640:	mov	r1, #1
   15644:	mov	r0, r4
   15648:	bl	110e4 <__fprintf_chk@plt>
   1564c:	b	15588 <__assert_fail@plt+0x43fc>
   15650:	mov	r2, #5
   15654:	movw	r1, #29324	; 0x728c
   15658:	movt	r1, #1
   1565c:	mov	r0, #0
   15660:	bl	10f4c <dcgettext@plt>
   15664:	ldr	r3, [r5, #16]
   15668:	str	r3, [sp, #12]
   1566c:	ldr	r3, [r5, #12]
   15670:	str	r3, [sp, #8]
   15674:	ldr	r3, [r5, #8]
   15678:	str	r3, [sp, #4]
   1567c:	ldr	r3, [r5, #4]
   15680:	str	r3, [sp]
   15684:	ldr	r3, [r5]
   15688:	mov	r2, r0
   1568c:	mov	r1, #1
   15690:	mov	r0, r4
   15694:	bl	110e4 <__fprintf_chk@plt>
   15698:	b	15588 <__assert_fail@plt+0x43fc>
   1569c:	mov	r2, #5
   156a0:	movw	r1, #29360	; 0x72b0
   156a4:	movt	r1, #1
   156a8:	mov	r0, #0
   156ac:	bl	10f4c <dcgettext@plt>
   156b0:	ldr	r3, [r5, #20]
   156b4:	str	r3, [sp, #16]
   156b8:	ldr	r3, [r5, #16]
   156bc:	str	r3, [sp, #12]
   156c0:	ldr	r3, [r5, #12]
   156c4:	str	r3, [sp, #8]
   156c8:	ldr	r3, [r5, #8]
   156cc:	str	r3, [sp, #4]
   156d0:	ldr	r3, [r5, #4]
   156d4:	str	r3, [sp]
   156d8:	ldr	r3, [r5]
   156dc:	mov	r2, r0
   156e0:	mov	r1, #1
   156e4:	mov	r0, r4
   156e8:	bl	110e4 <__fprintf_chk@plt>
   156ec:	b	15588 <__assert_fail@plt+0x43fc>
   156f0:	mov	r2, #5
   156f4:	movw	r1, #29400	; 0x72d8
   156f8:	movt	r1, #1
   156fc:	mov	r0, #0
   15700:	bl	10f4c <dcgettext@plt>
   15704:	ldr	r3, [r5, #24]
   15708:	str	r3, [sp, #20]
   1570c:	ldr	r3, [r5, #20]
   15710:	str	r3, [sp, #16]
   15714:	ldr	r3, [r5, #16]
   15718:	str	r3, [sp, #12]
   1571c:	ldr	r3, [r5, #12]
   15720:	str	r3, [sp, #8]
   15724:	ldr	r3, [r5, #8]
   15728:	str	r3, [sp, #4]
   1572c:	ldr	r3, [r5, #4]
   15730:	str	r3, [sp]
   15734:	ldr	r3, [r5]
   15738:	mov	r2, r0
   1573c:	mov	r1, #1
   15740:	mov	r0, r4
   15744:	bl	110e4 <__fprintf_chk@plt>
   15748:	b	15588 <__assert_fail@plt+0x43fc>
   1574c:	mov	r2, #5
   15750:	movw	r1, #29444	; 0x7304
   15754:	movt	r1, #1
   15758:	mov	r0, #0
   1575c:	bl	10f4c <dcgettext@plt>
   15760:	ldr	r3, [r5, #28]
   15764:	str	r3, [sp, #24]
   15768:	ldr	r3, [r5, #24]
   1576c:	str	r3, [sp, #20]
   15770:	ldr	r3, [r5, #20]
   15774:	str	r3, [sp, #16]
   15778:	ldr	r3, [r5, #16]
   1577c:	str	r3, [sp, #12]
   15780:	ldr	r3, [r5, #12]
   15784:	str	r3, [sp, #8]
   15788:	ldr	r3, [r5, #8]
   1578c:	str	r3, [sp, #4]
   15790:	ldr	r3, [r5, #4]
   15794:	str	r3, [sp]
   15798:	ldr	r3, [r5]
   1579c:	mov	r2, r0
   157a0:	mov	r1, #1
   157a4:	mov	r0, r4
   157a8:	bl	110e4 <__fprintf_chk@plt>
   157ac:	b	15588 <__assert_fail@plt+0x43fc>
   157b0:	mov	r2, #5
   157b4:	movw	r1, #29492	; 0x7334
   157b8:	movt	r1, #1
   157bc:	mov	r0, #0
   157c0:	bl	10f4c <dcgettext@plt>
   157c4:	ldr	r3, [r5, #32]
   157c8:	str	r3, [sp, #28]
   157cc:	ldr	r3, [r5, #28]
   157d0:	str	r3, [sp, #24]
   157d4:	ldr	r3, [r5, #24]
   157d8:	str	r3, [sp, #20]
   157dc:	ldr	r3, [r5, #20]
   157e0:	str	r3, [sp, #16]
   157e4:	ldr	r3, [r5, #16]
   157e8:	str	r3, [sp, #12]
   157ec:	ldr	r3, [r5, #12]
   157f0:	str	r3, [sp, #8]
   157f4:	ldr	r3, [r5, #8]
   157f8:	str	r3, [sp, #4]
   157fc:	ldr	r3, [r5, #4]
   15800:	str	r3, [sp]
   15804:	ldr	r3, [r5]
   15808:	mov	r2, r0
   1580c:	mov	r1, #1
   15810:	mov	r0, r4
   15814:	bl	110e4 <__fprintf_chk@plt>
   15818:	b	15588 <__assert_fail@plt+0x43fc>
   1581c:	mov	r2, #5
   15820:	movw	r1, #29544	; 0x7368
   15824:	movt	r1, #1
   15828:	mov	r0, #0
   1582c:	bl	10f4c <dcgettext@plt>
   15830:	ldr	r3, [r5, #32]
   15834:	str	r3, [sp, #28]
   15838:	ldr	r3, [r5, #28]
   1583c:	str	r3, [sp, #24]
   15840:	ldr	r3, [r5, #24]
   15844:	str	r3, [sp, #20]
   15848:	ldr	r3, [r5, #20]
   1584c:	str	r3, [sp, #16]
   15850:	ldr	r3, [r5, #16]
   15854:	str	r3, [sp, #12]
   15858:	ldr	r3, [r5, #12]
   1585c:	str	r3, [sp, #8]
   15860:	ldr	r3, [r5, #8]
   15864:	str	r3, [sp, #4]
   15868:	ldr	r3, [r5, #4]
   1586c:	str	r3, [sp]
   15870:	ldr	r3, [r5]
   15874:	mov	r2, r0
   15878:	mov	r1, #1
   1587c:	mov	r0, r4
   15880:	bl	110e4 <__fprintf_chk@plt>
   15884:	b	15588 <__assert_fail@plt+0x43fc>
   15888:	strd	r4, [sp, #-12]!
   1588c:	str	lr, [sp, #8]
   15890:	sub	sp, sp, #12
   15894:	ldr	r5, [sp, #24]
   15898:	ldr	ip, [r5]
   1589c:	cmp	ip, #0
   158a0:	beq	158d8 <__assert_fail@plt+0x474c>
   158a4:	mov	lr, r5
   158a8:	mov	ip, #0
   158ac:	add	ip, ip, #1
   158b0:	ldr	r4, [lr, #4]!
   158b4:	cmp	r4, #0
   158b8:	bne	158ac <__assert_fail@plt+0x4720>
   158bc:	str	ip, [sp, #4]
   158c0:	str	r5, [sp]
   158c4:	bl	15458 <__assert_fail@plt+0x42cc>
   158c8:	add	sp, sp, #12
   158cc:	ldrd	r4, [sp]
   158d0:	add	sp, sp, #8
   158d4:	pop	{pc}		; (ldr pc, [sp], #4)
   158d8:	mov	ip, #0
   158dc:	b	158bc <__assert_fail@plt+0x4730>
   158e0:	strd	r4, [sp, #-12]!
   158e4:	str	lr, [sp, #8]
   158e8:	sub	sp, sp, #52	; 0x34
   158ec:	ldr	r5, [sp, #64]	; 0x40
   158f0:	add	r4, sp, #8
   158f4:	mov	ip, #0
   158f8:	ldr	lr, [r5], #4
   158fc:	str	lr, [r4], #4
   15900:	cmp	lr, #0
   15904:	beq	15914 <__assert_fail@plt+0x4788>
   15908:	add	ip, ip, #1
   1590c:	cmp	ip, #10
   15910:	bne	158f8 <__assert_fail@plt+0x476c>
   15914:	str	ip, [sp, #4]
   15918:	add	ip, sp, #8
   1591c:	str	ip, [sp]
   15920:	bl	15458 <__assert_fail@plt+0x42cc>
   15924:	add	sp, sp, #52	; 0x34
   15928:	ldrd	r4, [sp]
   1592c:	add	sp, sp, #8
   15930:	pop	{pc}		; (ldr pc, [sp], #4)
   15934:	push	{r3}		; (str r3, [sp, #-4]!)
   15938:	push	{lr}		; (str lr, [sp, #-4]!)
   1593c:	sub	sp, sp, #16
   15940:	add	r3, sp, #24
   15944:	str	r3, [sp, #12]
   15948:	str	r3, [sp]
   1594c:	ldr	r3, [sp, #20]
   15950:	bl	158e0 <__assert_fail@plt+0x4754>
   15954:	add	sp, sp, #16
   15958:	pop	{lr}		; (ldr lr, [sp], #4)
   1595c:	add	sp, sp, #4
   15960:	bx	lr
   15964:	str	r4, [sp, #-8]!
   15968:	str	lr, [sp, #4]
   1596c:	movw	r3, #33148	; 0x817c
   15970:	movt	r3, #2
   15974:	ldr	r1, [r3]
   15978:	mov	r0, #10
   1597c:	bl	10f40 <fputc_unlocked@plt>
   15980:	mov	r2, #5
   15984:	movw	r1, #29604	; 0x73a4
   15988:	movt	r1, #1
   1598c:	mov	r0, #0
   15990:	bl	10f4c <dcgettext@plt>
   15994:	movw	r2, #29624	; 0x73b8
   15998:	movt	r2, #1
   1599c:	mov	r1, r0
   159a0:	mov	r0, #1
   159a4:	bl	110cc <__printf_chk@plt>
   159a8:	mov	r2, #5
   159ac:	movw	r1, #29648	; 0x73d0
   159b0:	movt	r1, #1
   159b4:	mov	r0, #0
   159b8:	bl	10f4c <dcgettext@plt>
   159bc:	movw	r3, #28064	; 0x6da0
   159c0:	movt	r3, #1
   159c4:	movw	r2, #28104	; 0x6dc8
   159c8:	movt	r2, #1
   159cc:	mov	r1, r0
   159d0:	mov	r0, #1
   159d4:	bl	110cc <__printf_chk@plt>
   159d8:	mov	r2, #5
   159dc:	movw	r1, #29668	; 0x73e4
   159e0:	movt	r1, #1
   159e4:	mov	r0, #0
   159e8:	bl	10f4c <dcgettext@plt>
   159ec:	movw	r2, #29708	; 0x740c
   159f0:	movt	r2, #1
   159f4:	mov	r1, r0
   159f8:	mov	r0, #1
   159fc:	bl	110cc <__printf_chk@plt>
   15a00:	ldr	r4, [sp]
   15a04:	add	sp, sp, #4
   15a08:	pop	{pc}		; (ldr pc, [sp], #4)
   15a0c:	str	r4, [sp, #-8]!
   15a10:	str	lr, [sp, #4]
   15a14:	bl	15f58 <__assert_fail@plt+0x4dcc>
   15a18:	cmp	r0, #0
   15a1c:	beq	15a2c <__assert_fail@plt+0x48a0>
   15a20:	ldr	r4, [sp]
   15a24:	add	sp, sp, #4
   15a28:	pop	{pc}		; (ldr pc, [sp], #4)
   15a2c:	bl	15ea0 <__assert_fail@plt+0x4d14>
   15a30:	str	r4, [sp, #-8]!
   15a34:	str	lr, [sp, #4]
   15a38:	bl	15f58 <__assert_fail@plt+0x4dcc>
   15a3c:	cmp	r0, #0
   15a40:	beq	15a50 <__assert_fail@plt+0x48c4>
   15a44:	ldr	r4, [sp]
   15a48:	add	sp, sp, #4
   15a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a50:	bl	15ea0 <__assert_fail@plt+0x4d14>
   15a54:	str	r4, [sp, #-8]!
   15a58:	str	lr, [sp, #4]
   15a5c:	bl	15a0c <__assert_fail@plt+0x4880>
   15a60:	ldr	r4, [sp]
   15a64:	add	sp, sp, #4
   15a68:	pop	{pc}		; (ldr pc, [sp], #4)
   15a6c:	strd	r4, [sp, #-16]!
   15a70:	str	r6, [sp, #8]
   15a74:	str	lr, [sp, #12]
   15a78:	mov	r5, r0
   15a7c:	mov	r4, r1
   15a80:	bl	15f94 <__assert_fail@plt+0x4e08>
   15a84:	cmp	r0, #0
   15a88:	beq	15a9c <__assert_fail@plt+0x4910>
   15a8c:	ldrd	r4, [sp]
   15a90:	ldr	r6, [sp, #8]
   15a94:	add	sp, sp, #12
   15a98:	pop	{pc}		; (ldr pc, [sp], #4)
   15a9c:	adds	r4, r4, #0
   15aa0:	movne	r4, #1
   15aa4:	cmp	r5, #0
   15aa8:	moveq	r4, #1
   15aac:	cmp	r4, #0
   15ab0:	beq	15a8c <__assert_fail@plt+0x4900>
   15ab4:	bl	15ea0 <__assert_fail@plt+0x4d14>
   15ab8:	str	r4, [sp, #-8]!
   15abc:	str	lr, [sp, #4]
   15ac0:	cmp	r1, #0
   15ac4:	orreq	r1, r1, #1
   15ac8:	bl	15f94 <__assert_fail@plt+0x4e08>
   15acc:	cmp	r0, #0
   15ad0:	beq	15ae0 <__assert_fail@plt+0x4954>
   15ad4:	ldr	r4, [sp]
   15ad8:	add	sp, sp, #4
   15adc:	pop	{pc}		; (ldr pc, [sp], #4)
   15ae0:	bl	15ea0 <__assert_fail@plt+0x4d14>
   15ae4:	strd	r4, [sp, #-16]!
   15ae8:	str	r6, [sp, #8]
   15aec:	str	lr, [sp, #12]
   15af0:	mov	r4, r0
   15af4:	mov	r6, r1
   15af8:	mov	r5, r2
   15afc:	bl	1631c <__assert_fail@plt+0x5190>
   15b00:	cmp	r0, #0
   15b04:	beq	15b18 <__assert_fail@plt+0x498c>
   15b08:	ldrd	r4, [sp]
   15b0c:	ldr	r6, [sp, #8]
   15b10:	add	sp, sp, #12
   15b14:	pop	{pc}		; (ldr pc, [sp], #4)
   15b18:	cmp	r4, #0
   15b1c:	beq	15b2c <__assert_fail@plt+0x49a0>
   15b20:	cmp	r6, #0
   15b24:	cmpne	r5, #0
   15b28:	beq	15b08 <__assert_fail@plt+0x497c>
   15b2c:	bl	15ea0 <__assert_fail@plt+0x4d14>
   15b30:	str	r4, [sp, #-8]!
   15b34:	str	lr, [sp, #4]
   15b38:	bl	15ae4 <__assert_fail@plt+0x4958>
   15b3c:	ldr	r4, [sp]
   15b40:	add	sp, sp, #4
   15b44:	pop	{pc}		; (ldr pc, [sp], #4)
   15b48:	str	r4, [sp, #-8]!
   15b4c:	str	lr, [sp, #4]
   15b50:	mov	ip, r1
   15b54:	mov	r3, r2
   15b58:	cmp	r2, #0
   15b5c:	cmpne	r1, #0
   15b60:	moveq	r3, #1
   15b64:	moveq	ip, r3
   15b68:	mov	r2, r3
   15b6c:	mov	r1, ip
   15b70:	bl	1631c <__assert_fail@plt+0x5190>
   15b74:	cmp	r0, #0
   15b78:	beq	15b88 <__assert_fail@plt+0x49fc>
   15b7c:	ldr	r4, [sp]
   15b80:	add	sp, sp, #4
   15b84:	pop	{pc}		; (ldr pc, [sp], #4)
   15b88:	bl	15ea0 <__assert_fail@plt+0x4d14>
   15b8c:	str	r4, [sp, #-8]!
   15b90:	str	lr, [sp, #4]
   15b94:	mov	r2, r1
   15b98:	mov	r1, r0
   15b9c:	mov	r0, #0
   15ba0:	bl	15ae4 <__assert_fail@plt+0x4958>
   15ba4:	ldr	r4, [sp]
   15ba8:	add	sp, sp, #4
   15bac:	pop	{pc}		; (ldr pc, [sp], #4)
   15bb0:	str	r4, [sp, #-8]!
   15bb4:	str	lr, [sp, #4]
   15bb8:	mov	r2, r1
   15bbc:	mov	r1, r0
   15bc0:	mov	r0, #0
   15bc4:	bl	15b48 <__assert_fail@plt+0x49bc>
   15bc8:	ldr	r4, [sp]
   15bcc:	add	sp, sp, #4
   15bd0:	pop	{pc}		; (ldr pc, [sp], #4)
   15bd4:	strd	r4, [sp, #-16]!
   15bd8:	str	r6, [sp, #8]
   15bdc:	str	lr, [sp, #12]
   15be0:	mov	r5, r1
   15be4:	ldr	r4, [r1]
   15be8:	cmp	r0, #0
   15bec:	beq	15c1c <__assert_fail@plt+0x4a90>
   15bf0:	lsr	r3, r4, #1
   15bf4:	add	r3, r3, #1
   15bf8:	adds	r4, r4, r3
   15bfc:	bcs	15c38 <__assert_fail@plt+0x4aac>
   15c00:	mov	r1, r4
   15c04:	bl	15ae4 <__assert_fail@plt+0x4958>
   15c08:	str	r4, [r5]
   15c0c:	ldrd	r4, [sp]
   15c10:	ldr	r6, [sp, #8]
   15c14:	add	sp, sp, #12
   15c18:	pop	{pc}		; (ldr pc, [sp], #4)
   15c1c:	cmp	r4, #0
   15c20:	bne	15c00 <__assert_fail@plt+0x4a74>
   15c24:	mov	r4, #64	; 0x40
   15c28:	udiv	r4, r4, r2
   15c2c:	cmp	r2, #64	; 0x40
   15c30:	addhi	r4, r4, #1
   15c34:	b	15c00 <__assert_fail@plt+0x4a74>
   15c38:	bl	15ea0 <__assert_fail@plt+0x4d14>
   15c3c:	str	r4, [sp, #-8]!
   15c40:	str	lr, [sp, #4]
   15c44:	mov	r2, #1
   15c48:	bl	15bd4 <__assert_fail@plt+0x4a48>
   15c4c:	ldr	r4, [sp]
   15c50:	add	sp, sp, #4
   15c54:	pop	{pc}		; (ldr pc, [sp], #4)
   15c58:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15c5c:	strd	r6, [sp, #8]
   15c60:	str	r8, [sp, #16]
   15c64:	str	lr, [sp, #20]
   15c68:	mov	r5, r1
   15c6c:	ldr	lr, [sp, #24]
   15c70:	ldr	ip, [r1]
   15c74:	asr	r4, ip, #1
   15c78:	adds	r4, ip, r4
   15c7c:	movvs	r1, #1
   15c80:	movvc	r1, #0
   15c84:	cmp	r1, #0
   15c88:	mvnne	r4, #-2147483648	; 0x80000000
   15c8c:	mvn	r8, r3
   15c90:	lsr	r8, r8, #31
   15c94:	cmp	r3, r4
   15c98:	movge	r1, #0
   15c9c:	andlt	r1, r8, #1
   15ca0:	cmp	r1, #0
   15ca4:	movne	r4, r3
   15ca8:	smull	r6, r7, r4, lr
   15cac:	asr	r1, r6, #31
   15cb0:	cmp	r1, r7
   15cb4:	bne	15ccc <__assert_fail@plt+0x4b40>
   15cb8:	mov	r1, r6
   15cbc:	cmp	r6, #63	; 0x3f
   15cc0:	movle	r1, #64	; 0x40
   15cc4:	ble	15cd0 <__assert_fail@plt+0x4b44>
   15cc8:	b	15cdc <__assert_fail@plt+0x4b50>
   15ccc:	mvn	r1, #-2147483648	; 0x80000000
   15cd0:	sdiv	r4, r1, lr
   15cd4:	mls	r6, lr, r4, r1
   15cd8:	sub	r1, r1, r6
   15cdc:	cmp	r0, #0
   15ce0:	moveq	r6, #0
   15ce4:	streq	r6, [r5]
   15ce8:	sub	r6, r4, ip
   15cec:	cmp	r6, r2
   15cf0:	bge	15d28 <__assert_fail@plt+0x4b9c>
   15cf4:	adds	r2, ip, r2
   15cf8:	mov	r4, r2
   15cfc:	bvs	15d44 <__assert_fail@plt+0x4bb8>
   15d00:	cmp	r2, r3
   15d04:	movle	r3, #0
   15d08:	andgt	r3, r8, #1
   15d0c:	cmp	r3, #0
   15d10:	bne	15d44 <__assert_fail@plt+0x4bb8>
   15d14:	smull	r2, r3, r2, lr
   15d18:	asr	ip, r2, #31
   15d1c:	mov	r1, r2
   15d20:	cmp	ip, r3
   15d24:	bne	15d44 <__assert_fail@plt+0x4bb8>
   15d28:	bl	15a6c <__assert_fail@plt+0x48e0>
   15d2c:	str	r4, [r5]
   15d30:	ldrd	r4, [sp]
   15d34:	ldrd	r6, [sp, #8]
   15d38:	ldr	r8, [sp, #16]
   15d3c:	add	sp, sp, #20
   15d40:	pop	{pc}		; (ldr pc, [sp], #4)
   15d44:	bl	15ea0 <__assert_fail@plt+0x4d14>
   15d48:	str	r4, [sp, #-8]!
   15d4c:	str	lr, [sp, #4]
   15d50:	bl	15ee4 <__assert_fail@plt+0x4d58>
   15d54:	cmp	r0, #0
   15d58:	beq	15d68 <__assert_fail@plt+0x4bdc>
   15d5c:	ldr	r4, [sp]
   15d60:	add	sp, sp, #4
   15d64:	pop	{pc}		; (ldr pc, [sp], #4)
   15d68:	bl	15ea0 <__assert_fail@plt+0x4d14>
   15d6c:	str	r4, [sp, #-8]!
   15d70:	str	lr, [sp, #4]
   15d74:	mov	r1, #1
   15d78:	bl	15d48 <__assert_fail@plt+0x4bbc>
   15d7c:	ldr	r4, [sp]
   15d80:	add	sp, sp, #4
   15d84:	pop	{pc}		; (ldr pc, [sp], #4)
   15d88:	str	r4, [sp, #-8]!
   15d8c:	str	lr, [sp, #4]
   15d90:	bl	15ee4 <__assert_fail@plt+0x4d58>
   15d94:	cmp	r0, #0
   15d98:	beq	15da8 <__assert_fail@plt+0x4c1c>
   15d9c:	ldr	r4, [sp]
   15da0:	add	sp, sp, #4
   15da4:	pop	{pc}		; (ldr pc, [sp], #4)
   15da8:	bl	15ea0 <__assert_fail@plt+0x4d14>
   15dac:	str	r4, [sp, #-8]!
   15db0:	str	lr, [sp, #4]
   15db4:	mov	r1, #1
   15db8:	bl	15d88 <__assert_fail@plt+0x4bfc>
   15dbc:	ldr	r4, [sp]
   15dc0:	add	sp, sp, #4
   15dc4:	pop	{pc}		; (ldr pc, [sp], #4)
   15dc8:	strd	r4, [sp, #-16]!
   15dcc:	str	r6, [sp, #8]
   15dd0:	str	lr, [sp, #12]
   15dd4:	mov	r5, r0
   15dd8:	mov	r4, r1
   15ddc:	mov	r0, r1
   15de0:	bl	15a0c <__assert_fail@plt+0x4880>
   15de4:	mov	r2, r4
   15de8:	mov	r1, r5
   15dec:	bl	10f04 <memcpy@plt>
   15df0:	ldrd	r4, [sp]
   15df4:	ldr	r6, [sp, #8]
   15df8:	add	sp, sp, #12
   15dfc:	pop	{pc}		; (ldr pc, [sp], #4)
   15e00:	strd	r4, [sp, #-16]!
   15e04:	str	r6, [sp, #8]
   15e08:	str	lr, [sp, #12]
   15e0c:	mov	r5, r0
   15e10:	mov	r4, r1
   15e14:	mov	r0, r1
   15e18:	bl	15a30 <__assert_fail@plt+0x48a4>
   15e1c:	mov	r2, r4
   15e20:	mov	r1, r5
   15e24:	bl	10f04 <memcpy@plt>
   15e28:	ldrd	r4, [sp]
   15e2c:	ldr	r6, [sp, #8]
   15e30:	add	sp, sp, #12
   15e34:	pop	{pc}		; (ldr pc, [sp], #4)
   15e38:	strd	r4, [sp, #-16]!
   15e3c:	str	r6, [sp, #8]
   15e40:	str	lr, [sp, #12]
   15e44:	mov	r5, r0
   15e48:	mov	r4, r1
   15e4c:	add	r0, r1, #1
   15e50:	bl	15a30 <__assert_fail@plt+0x48a4>
   15e54:	mov	r2, #0
   15e58:	strb	r2, [r0, r4]
   15e5c:	mov	r2, r4
   15e60:	mov	r1, r5
   15e64:	bl	10f04 <memcpy@plt>
   15e68:	ldrd	r4, [sp]
   15e6c:	ldr	r6, [sp, #8]
   15e70:	add	sp, sp, #12
   15e74:	pop	{pc}		; (ldr pc, [sp], #4)
   15e78:	str	r4, [sp, #-8]!
   15e7c:	str	lr, [sp, #4]
   15e80:	mov	r4, r0
   15e84:	bl	11078 <strlen@plt>
   15e88:	add	r1, r0, #1
   15e8c:	mov	r0, r4
   15e90:	bl	15dc8 <__assert_fail@plt+0x4c3c>
   15e94:	ldr	r4, [sp]
   15e98:	add	sp, sp, #4
   15e9c:	pop	{pc}		; (ldr pc, [sp], #4)
   15ea0:	str	r4, [sp, #-8]!
   15ea4:	str	lr, [sp, #4]
   15ea8:	movw	r3, #33060	; 0x8124
   15eac:	movt	r3, #2
   15eb0:	ldr	r4, [r3]
   15eb4:	mov	r2, #5
   15eb8:	movw	r1, #29788	; 0x745c
   15ebc:	movt	r1, #1
   15ec0:	mov	r0, #0
   15ec4:	bl	10f4c <dcgettext@plt>
   15ec8:	mov	r3, r0
   15ecc:	movw	r2, #28696	; 0x7018
   15ed0:	movt	r2, #1
   15ed4:	mov	r1, #0
   15ed8:	mov	r0, r4
   15edc:	bl	10fd0 <error@plt>
   15ee0:	bl	11174 <abort@plt>
   15ee4:	strd	r4, [sp, #-16]!
   15ee8:	str	r6, [sp, #8]
   15eec:	str	lr, [sp, #12]
   15ef0:	cmp	r1, #0
   15ef4:	cmpne	r0, #0
   15ef8:	beq	15f34 <__assert_fail@plt+0x4da8>
   15efc:	mov	r2, r0
   15f00:	mov	r3, r1
   15f04:	umull	r4, r5, r0, r1
   15f08:	adds	r1, r5, #0
   15f0c:	movne	r1, #1
   15f10:	cmp	r4, #0
   15f14:	movlt	r1, #1
   15f18:	cmp	r1, #0
   15f1c:	beq	15f3c <__assert_fail@plt+0x4db0>
   15f20:	bl	11090 <__errno_location@plt>
   15f24:	mov	r3, #12
   15f28:	str	r3, [r0]
   15f2c:	mov	r0, #0
   15f30:	b	15f48 <__assert_fail@plt+0x4dbc>
   15f34:	mov	r3, #1
   15f38:	mov	r2, r3
   15f3c:	mov	r1, r3
   15f40:	mov	r0, r2
   15f44:	bl	10e98 <calloc@plt>
   15f48:	ldrd	r4, [sp]
   15f4c:	ldr	r6, [sp, #8]
   15f50:	add	sp, sp, #12
   15f54:	pop	{pc}		; (ldr pc, [sp], #4)
   15f58:	str	r4, [sp, #-8]!
   15f5c:	str	lr, [sp, #4]
   15f60:	cmp	r0, #0
   15f64:	beq	15f80 <__assert_fail@plt+0x4df4>
   15f68:	bge	15f84 <__assert_fail@plt+0x4df8>
   15f6c:	bl	11090 <__errno_location@plt>
   15f70:	mov	r3, #12
   15f74:	str	r3, [r0]
   15f78:	mov	r0, #0
   15f7c:	b	15f88 <__assert_fail@plt+0x4dfc>
   15f80:	mov	r0, #1
   15f84:	bl	10ff4 <malloc@plt>
   15f88:	ldr	r4, [sp]
   15f8c:	add	sp, sp, #4
   15f90:	pop	{pc}		; (ldr pc, [sp], #4)
   15f94:	str	r4, [sp, #-8]!
   15f98:	str	lr, [sp, #4]
   15f9c:	cmp	r0, #0
   15fa0:	beq	15fc4 <__assert_fail@plt+0x4e38>
   15fa4:	cmp	r1, #0
   15fa8:	beq	15fd0 <__assert_fail@plt+0x4e44>
   15fac:	cmp	r1, #0
   15fb0:	blt	15fdc <__assert_fail@plt+0x4e50>
   15fb4:	bl	10f70 <realloc@plt>
   15fb8:	ldr	r4, [sp]
   15fbc:	add	sp, sp, #4
   15fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   15fc4:	mov	r0, r1
   15fc8:	bl	15f58 <__assert_fail@plt+0x4dcc>
   15fcc:	b	15fb8 <__assert_fail@plt+0x4e2c>
   15fd0:	bl	12d14 <__assert_fail@plt+0x1b88>
   15fd4:	mov	r0, #0
   15fd8:	b	15fb8 <__assert_fail@plt+0x4e2c>
   15fdc:	bl	11090 <__errno_location@plt>
   15fe0:	mov	r3, #12
   15fe4:	str	r3, [r0]
   15fe8:	mov	r0, #0
   15fec:	b	15fb8 <__assert_fail@plt+0x4e2c>
   15ff0:	strd	r4, [sp, #-16]!
   15ff4:	str	r6, [sp, #8]
   15ff8:	str	lr, [sp, #12]
   15ffc:	mov	r5, r0
   16000:	bl	10fb8 <__fpending@plt>
   16004:	mov	r6, r0
   16008:	ldr	r4, [r5]
   1600c:	and	r4, r4, #32
   16010:	mov	r0, r5
   16014:	bl	1607c <__assert_fail@plt+0x4ef0>
   16018:	cmp	r4, #0
   1601c:	bne	16050 <__assert_fail@plt+0x4ec4>
   16020:	cmp	r0, #0
   16024:	beq	16040 <__assert_fail@plt+0x4eb4>
   16028:	cmp	r6, #0
   1602c:	bne	1606c <__assert_fail@plt+0x4ee0>
   16030:	bl	11090 <__errno_location@plt>
   16034:	ldr	r0, [r0]
   16038:	subs	r0, r0, #9
   1603c:	mvnne	r0, #0
   16040:	ldrd	r4, [sp]
   16044:	ldr	r6, [sp, #8]
   16048:	add	sp, sp, #12
   1604c:	pop	{pc}		; (ldr pc, [sp], #4)
   16050:	cmp	r0, #0
   16054:	bne	16074 <__assert_fail@plt+0x4ee8>
   16058:	bl	11090 <__errno_location@plt>
   1605c:	mov	r3, #0
   16060:	str	r3, [r0]
   16064:	mvn	r0, #0
   16068:	b	16040 <__assert_fail@plt+0x4eb4>
   1606c:	mvn	r0, #0
   16070:	b	16040 <__assert_fail@plt+0x4eb4>
   16074:	mvn	r0, #0
   16078:	b	16040 <__assert_fail@plt+0x4eb4>
   1607c:	strd	r4, [sp, #-16]!
   16080:	str	r6, [sp, #8]
   16084:	str	lr, [sp, #12]
   16088:	sub	sp, sp, #8
   1608c:	mov	r4, r0
   16090:	bl	110d8 <fileno@plt>
   16094:	cmp	r0, #0
   16098:	blt	16110 <__assert_fail@plt+0x4f84>
   1609c:	mov	r0, r4
   160a0:	bl	11018 <__freading@plt>
   160a4:	cmp	r0, #0
   160a8:	beq	160dc <__assert_fail@plt+0x4f50>
   160ac:	mov	r0, r4
   160b0:	bl	110d8 <fileno@plt>
   160b4:	mov	r3, #1
   160b8:	str	r3, [sp]
   160bc:	mov	r2, #0
   160c0:	mov	r3, #0
   160c4:	bl	10fa0 <lseek64@plt>
   160c8:	mvn	r2, #0
   160cc:	mvn	r3, #0
   160d0:	cmp	r1, r3
   160d4:	cmpeq	r0, r2
   160d8:	beq	1611c <__assert_fail@plt+0x4f90>
   160dc:	mov	r0, r4
   160e0:	bl	16138 <__assert_fail@plt+0x4fac>
   160e4:	cmp	r0, #0
   160e8:	beq	1611c <__assert_fail@plt+0x4f90>
   160ec:	bl	11090 <__errno_location@plt>
   160f0:	mov	r5, r0
   160f4:	ldr	r6, [r0]
   160f8:	mov	r0, r4
   160fc:	bl	110f0 <fclose@plt>
   16100:	cmp	r6, #0
   16104:	strne	r6, [r5]
   16108:	mvnne	r0, #0
   1610c:	b	16124 <__assert_fail@plt+0x4f98>
   16110:	mov	r0, r4
   16114:	bl	110f0 <fclose@plt>
   16118:	b	16124 <__assert_fail@plt+0x4f98>
   1611c:	mov	r0, r4
   16120:	bl	110f0 <fclose@plt>
   16124:	add	sp, sp, #8
   16128:	ldrd	r4, [sp]
   1612c:	ldr	r6, [sp, #8]
   16130:	add	sp, sp, #12
   16134:	pop	{pc}		; (ldr pc, [sp], #4)
   16138:	str	r4, [sp, #-8]!
   1613c:	str	lr, [sp, #4]
   16140:	sub	sp, sp, #8
   16144:	subs	r4, r0, #0
   16148:	beq	1615c <__assert_fail@plt+0x4fd0>
   1614c:	mov	r0, r4
   16150:	bl	11018 <__freading@plt>
   16154:	cmp	r0, #0
   16158:	bne	16174 <__assert_fail@plt+0x4fe8>
   1615c:	mov	r0, r4
   16160:	bl	10ec8 <fflush@plt>
   16164:	add	sp, sp, #8
   16168:	ldr	r4, [sp]
   1616c:	add	sp, sp, #4
   16170:	pop	{pc}		; (ldr pc, [sp], #4)
   16174:	ldr	r3, [r4]
   16178:	tst	r3, #256	; 0x100
   1617c:	bne	1618c <__assert_fail@plt+0x5000>
   16180:	mov	r0, r4
   16184:	bl	10ec8 <fflush@plt>
   16188:	b	16164 <__assert_fail@plt+0x4fd8>
   1618c:	mov	r3, #1
   16190:	str	r3, [sp]
   16194:	mov	r2, #0
   16198:	mov	r3, #0
   1619c:	mov	r0, r4
   161a0:	bl	161a8 <__assert_fail@plt+0x501c>
   161a4:	b	16180 <__assert_fail@plt+0x4ff4>
   161a8:	str	r4, [sp, #-16]!
   161ac:	strd	r6, [sp, #4]
   161b0:	str	lr, [sp, #12]
   161b4:	sub	sp, sp, #8
   161b8:	mov	r4, r0
   161bc:	mov	r6, r2
   161c0:	mov	r7, r3
   161c4:	ldr	r2, [r0, #8]
   161c8:	ldr	r3, [r0, #4]
   161cc:	cmp	r2, r3
   161d0:	beq	16200 <__assert_fail@plt+0x5074>
   161d4:	ldr	r3, [sp, #24]
   161d8:	str	r3, [sp]
   161dc:	mov	r2, r6
   161e0:	mov	r3, r7
   161e4:	mov	r0, r4
   161e8:	bl	110fc <fseeko64@plt>
   161ec:	add	sp, sp, #8
   161f0:	ldr	r4, [sp]
   161f4:	ldrd	r6, [sp, #4]
   161f8:	add	sp, sp, #12
   161fc:	pop	{pc}		; (ldr pc, [sp], #4)
   16200:	ldr	r2, [r0, #20]
   16204:	ldr	r3, [r0, #16]
   16208:	cmp	r2, r3
   1620c:	bne	161d4 <__assert_fail@plt+0x5048>
   16210:	ldr	r3, [r0, #36]	; 0x24
   16214:	cmp	r3, #0
   16218:	bne	161d4 <__assert_fail@plt+0x5048>
   1621c:	bl	110d8 <fileno@plt>
   16220:	ldr	r3, [sp, #24]
   16224:	str	r3, [sp]
   16228:	mov	r2, r6
   1622c:	mov	r3, r7
   16230:	bl	10fa0 <lseek64@plt>
   16234:	mvn	r2, #0
   16238:	mvn	r3, #0
   1623c:	cmp	r1, r3
   16240:	cmpeq	r0, r2
   16244:	beq	16260 <__assert_fail@plt+0x50d4>
   16248:	ldr	r3, [r4]
   1624c:	bic	r3, r3, #16
   16250:	str	r3, [r4]
   16254:	strd	r0, [r4, #80]	; 0x50
   16258:	mov	r0, #0
   1625c:	b	161ec <__assert_fail@plt+0x5060>
   16260:	mvn	r0, #0
   16264:	b	161ec <__assert_fail@plt+0x5060>
   16268:	str	r4, [sp, #-8]!
   1626c:	str	lr, [sp, #4]
   16270:	mov	r0, #14
   16274:	bl	1112c <nl_langinfo@plt>
   16278:	cmp	r0, #0
   1627c:	beq	162a0 <__assert_fail@plt+0x5114>
   16280:	ldrb	r2, [r0]
   16284:	movw	r3, #29808	; 0x7470
   16288:	movt	r3, #1
   1628c:	cmp	r2, #0
   16290:	moveq	r0, r3
   16294:	ldr	r4, [sp]
   16298:	add	sp, sp, #4
   1629c:	pop	{pc}		; (ldr pc, [sp], #4)
   162a0:	movw	r0, #29808	; 0x7470
   162a4:	movt	r0, #1
   162a8:	b	16294 <__assert_fail@plt+0x5108>
   162ac:	strd	r4, [sp, #-20]!	; 0xffffffec
   162b0:	strd	r6, [sp, #8]
   162b4:	str	lr, [sp, #16]
   162b8:	sub	sp, sp, #12
   162bc:	mov	r7, r1
   162c0:	mov	r5, r2
   162c4:	subs	r6, r0, #0
   162c8:	addeq	r6, sp, #4
   162cc:	mov	r0, r6
   162d0:	bl	10fc4 <mbrtowc@plt>
   162d4:	mov	r4, r0
   162d8:	cmp	r5, #0
   162dc:	cmnne	r0, #3
   162e0:	bhi	162fc <__assert_fail@plt+0x5170>
   162e4:	mov	r0, r4
   162e8:	add	sp, sp, #12
   162ec:	ldrd	r4, [sp]
   162f0:	ldrd	r6, [sp, #8]
   162f4:	add	sp, sp, #16
   162f8:	pop	{pc}		; (ldr pc, [sp], #4)
   162fc:	mov	r0, #0
   16300:	bl	12d74 <__assert_fail@plt+0x1be8>
   16304:	cmp	r0, #0
   16308:	bne	162e4 <__assert_fail@plt+0x5158>
   1630c:	ldrb	r3, [r7]
   16310:	str	r3, [r6]
   16314:	mov	r4, #1
   16318:	b	162e4 <__assert_fail@plt+0x5158>
   1631c:	str	r4, [sp, #-8]!
   16320:	str	lr, [sp, #4]
   16324:	umull	r2, r3, r1, r2
   16328:	cmp	r3, #0
   1632c:	bne	16344 <__assert_fail@plt+0x51b8>
   16330:	mov	r1, r2
   16334:	bl	15f94 <__assert_fail@plt+0x4e08>
   16338:	ldr	r4, [sp]
   1633c:	add	sp, sp, #4
   16340:	pop	{pc}		; (ldr pc, [sp], #4)
   16344:	bl	11090 <__errno_location@plt>
   16348:	mov	r3, #12
   1634c:	str	r3, [r0]
   16350:	mov	r0, #0
   16354:	b	16338 <__assert_fail@plt+0x51ac>
   16358:	cmp	r3, #0
   1635c:	cmpeq	r2, #0
   16360:	bne	16384 <__assert_fail@plt+0x51f8>
   16364:	cmp	r1, #0
   16368:	movlt	r1, #-2147483648	; 0x80000000
   1636c:	movlt	r0, #0
   16370:	blt	16380 <__assert_fail@plt+0x51f4>
   16374:	cmpeq	r0, #0
   16378:	mvnne	r1, #-2147483648	; 0x80000000
   1637c:	mvnne	r0, #0
   16380:	b	1642c <__assert_fail@plt+0x52a0>
   16384:	sub	sp, sp, #8
   16388:	push	{sp, lr}
   1638c:	cmp	r1, #0
   16390:	blt	163b0 <__assert_fail@plt+0x5224>
   16394:	cmp	r3, #0
   16398:	blt	163e4 <__assert_fail@plt+0x5258>
   1639c:	bl	1643c <__assert_fail@plt+0x52b0>
   163a0:	ldr	lr, [sp, #4]
   163a4:	add	sp, sp, #8
   163a8:	pop	{r2, r3}
   163ac:	bx	lr
   163b0:	rsbs	r0, r0, #0
   163b4:	sbc	r1, r1, r1, lsl #1
   163b8:	cmp	r3, #0
   163bc:	blt	16408 <__assert_fail@plt+0x527c>
   163c0:	bl	1643c <__assert_fail@plt+0x52b0>
   163c4:	ldr	lr, [sp, #4]
   163c8:	add	sp, sp, #8
   163cc:	pop	{r2, r3}
   163d0:	rsbs	r0, r0, #0
   163d4:	sbc	r1, r1, r1, lsl #1
   163d8:	rsbs	r2, r2, #0
   163dc:	sbc	r3, r3, r3, lsl #1
   163e0:	bx	lr
   163e4:	rsbs	r2, r2, #0
   163e8:	sbc	r3, r3, r3, lsl #1
   163ec:	bl	1643c <__assert_fail@plt+0x52b0>
   163f0:	ldr	lr, [sp, #4]
   163f4:	add	sp, sp, #8
   163f8:	pop	{r2, r3}
   163fc:	rsbs	r0, r0, #0
   16400:	sbc	r1, r1, r1, lsl #1
   16404:	bx	lr
   16408:	rsbs	r2, r2, #0
   1640c:	sbc	r3, r3, r3, lsl #1
   16410:	bl	1643c <__assert_fail@plt+0x52b0>
   16414:	ldr	lr, [sp, #4]
   16418:	add	sp, sp, #8
   1641c:	pop	{r2, r3}
   16420:	rsbs	r2, r2, #0
   16424:	sbc	r3, r3, r3, lsl #1
   16428:	bx	lr
   1642c:	push	{r1, lr}
   16430:	mov	r0, #8
   16434:	bl	10eb0 <raise@plt>
   16438:	pop	{r1, pc}
   1643c:	cmp	r1, r3
   16440:	cmpeq	r0, r2
   16444:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16448:	mov	r4, r0
   1644c:	movcc	r0, #0
   16450:	mov	r5, r1
   16454:	ldr	lr, [sp, #36]	; 0x24
   16458:	movcc	r1, r0
   1645c:	bcc	16558 <__assert_fail@plt+0x53cc>
   16460:	cmp	r3, #0
   16464:	clzeq	ip, r2
   16468:	clzne	ip, r3
   1646c:	addeq	ip, ip, #32
   16470:	cmp	r5, #0
   16474:	clzeq	r1, r4
   16478:	addeq	r1, r1, #32
   1647c:	clzne	r1, r5
   16480:	sub	ip, ip, r1
   16484:	sub	sl, ip, #32
   16488:	lsl	r9, r3, ip
   1648c:	rsb	fp, ip, #32
   16490:	orr	r9, r9, r2, lsl sl
   16494:	orr	r9, r9, r2, lsr fp
   16498:	lsl	r8, r2, ip
   1649c:	cmp	r5, r9
   164a0:	cmpeq	r4, r8
   164a4:	movcc	r0, #0
   164a8:	movcc	r1, r0
   164ac:	bcc	164c8 <__assert_fail@plt+0x533c>
   164b0:	mov	r0, #1
   164b4:	subs	r4, r4, r8
   164b8:	lsl	r1, r0, sl
   164bc:	orr	r1, r1, r0, lsr fp
   164c0:	lsl	r0, r0, ip
   164c4:	sbc	r5, r5, r9
   164c8:	cmp	ip, #0
   164cc:	beq	16558 <__assert_fail@plt+0x53cc>
   164d0:	lsr	r6, r8, #1
   164d4:	orr	r6, r6, r9, lsl #31
   164d8:	lsr	r7, r9, #1
   164dc:	mov	r2, ip
   164e0:	b	16504 <__assert_fail@plt+0x5378>
   164e4:	subs	r3, r4, r6
   164e8:	sbc	r8, r5, r7
   164ec:	adds	r3, r3, r3
   164f0:	adc	r8, r8, r8
   164f4:	adds	r4, r3, #1
   164f8:	adc	r5, r8, #0
   164fc:	subs	r2, r2, #1
   16500:	beq	16520 <__assert_fail@plt+0x5394>
   16504:	cmp	r5, r7
   16508:	cmpeq	r4, r6
   1650c:	bcs	164e4 <__assert_fail@plt+0x5358>
   16510:	adds	r4, r4, r4
   16514:	adc	r5, r5, r5
   16518:	subs	r2, r2, #1
   1651c:	bne	16504 <__assert_fail@plt+0x5378>
   16520:	lsr	r3, r4, ip
   16524:	orr	r3, r3, r5, lsl fp
   16528:	lsr	r2, r5, ip
   1652c:	orr	r3, r3, r5, lsr sl
   16530:	adds	r0, r0, r4
   16534:	mov	r4, r3
   16538:	lsl	r3, r2, ip
   1653c:	orr	r3, r3, r4, lsl sl
   16540:	lsl	ip, r4, ip
   16544:	orr	r3, r3, r4, lsr fp
   16548:	adc	r1, r1, r5
   1654c:	subs	r0, r0, ip
   16550:	mov	r5, r2
   16554:	sbc	r1, r1, r3
   16558:	cmp	lr, #0
   1655c:	strdne	r4, [lr]
   16560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16564:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16568:	mov	r7, r0
   1656c:	ldr	r6, [pc, #72]	; 165bc <__assert_fail@plt+0x5430>
   16570:	ldr	r5, [pc, #72]	; 165c0 <__assert_fail@plt+0x5434>
   16574:	add	r6, pc, r6
   16578:	add	r5, pc, r5
   1657c:	sub	r6, r6, r5
   16580:	mov	r8, r1
   16584:	mov	r9, r2
   16588:	bl	10e78 <calloc@plt-0x20>
   1658c:	asrs	r6, r6, #2
   16590:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16594:	mov	r4, #0
   16598:	add	r4, r4, #1
   1659c:	ldr	r3, [r5], #4
   165a0:	mov	r2, r9
   165a4:	mov	r1, r8
   165a8:	mov	r0, r7
   165ac:	blx	r3
   165b0:	cmp	r6, r4
   165b4:	bne	16598 <__assert_fail@plt+0x540c>
   165b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   165bc:	muleq	r1, r8, r9
   165c0:	muleq	r1, r0, r9
   165c4:	bx	lr
   165c8:	ldr	r3, [pc, #12]	; 165dc <__assert_fail@plt+0x5450>
   165cc:	mov	r1, #0
   165d0:	add	r3, pc, r3
   165d4:	ldr	r2, [r3]
   165d8:	b	110a8 <__cxa_atexit@plt>
   165dc:	andeq	r1, r1, ip, lsr fp

Disassembly of section .fini:

000165e0 <.fini>:
   165e0:	push	{r3, lr}
   165e4:	pop	{r3, pc}
