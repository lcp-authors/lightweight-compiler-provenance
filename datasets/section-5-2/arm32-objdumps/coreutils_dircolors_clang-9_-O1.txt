
../repos/coreutils/src/dircolors:     file format elf32-littlearm


Disassembly of section .init:

00010ebc <.init>:
   10ebc:	push	{r3, lr}
   10ec0:	bl	1117c <close@plt+0x48>
   10ec4:	pop	{r3, pc}

Disassembly of section .plt:

00010ec8 <calloc@plt-0x14>:
   10ec8:	push	{lr}		; (str lr, [sp, #-4]!)
   10ecc:	ldr	lr, [pc, #4]	; 10ed8 <calloc@plt-0x4>
   10ed0:	add	lr, pc, lr
   10ed4:	ldr	pc, [lr, #8]!
   10ed8:	andeq	r7, r1, r8, lsr #2

00010edc <calloc@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #296]!	; 0x128

00010ee8 <fputs_unlocked@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #288]!	; 0x120

00010ef4 <strcmp@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #280]!	; 0x118

00010f00 <fflush@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #272]!	; 0x110

00010f0c <free@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #264]!	; 0x108

00010f18 <_exit@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #256]!	; 0x100

00010f24 <memcpy@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #248]!	; 0xf8

00010f30 <mbsinit@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #240]!	; 0xf0

00010f3c <fwrite_unlocked@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #232]!	; 0xe8

00010f48 <dcgettext@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #224]!	; 0xe0

00010f54 <dup2@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #216]!	; 0xd8

00010f60 <realloc@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #208]!	; 0xd0

00010f6c <textdomain@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #94208	; 0x17000
   10f74:	ldr	pc, [ip, #200]!	; 0xc8

00010f78 <iswprint@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #94208	; 0x17000
   10f80:	ldr	pc, [ip, #192]!	; 0xc0

00010f84 <fwrite@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #184]!	; 0xb8

00010f90 <lseek64@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #176]!	; 0xb0

00010f9c <__ctype_get_mb_cur_max@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #168]!	; 0xa8

00010fa8 <__fpending@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #160]!	; 0xa0

00010fb4 <ferror_unlocked@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #152]!	; 0x98

00010fc0 <mbrtowc@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #144]!	; 0x90

00010fcc <error@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #94208	; 0x17000
   10fd4:	ldr	pc, [ip, #136]!	; 0x88

00010fd8 <fnmatch@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #94208	; 0x17000
   10fe0:	ldr	pc, [ip, #128]!	; 0x80

00010fe4 <open64@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #94208	; 0x17000
   10fec:	ldr	pc, [ip, #120]!	; 0x78

00010ff0 <getenv@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #94208	; 0x17000
   10ff8:	ldr	pc, [ip, #112]!	; 0x70

00010ffc <puts@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #94208	; 0x17000
   11004:	ldr	pc, [ip, #104]!	; 0x68

00011008 <malloc@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #94208	; 0x17000
   11010:	ldr	pc, [ip, #96]!	; 0x60

00011014 <__libc_start_main@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #94208	; 0x17000
   1101c:	ldr	pc, [ip, #88]!	; 0x58

00011020 <__freading@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #94208	; 0x17000
   11028:	ldr	pc, [ip, #80]!	; 0x50

0001102c <__gmon_start__@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #94208	; 0x17000
   11034:	ldr	pc, [ip, #72]!	; 0x48

00011038 <freopen64@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #94208	; 0x17000
   11040:	ldr	pc, [ip, #64]!	; 0x40

00011044 <getopt_long@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #94208	; 0x17000
   1104c:	ldr	pc, [ip, #56]!	; 0x38

00011050 <__ctype_b_loc@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #94208	; 0x17000
   11058:	ldr	pc, [ip, #48]!	; 0x30

0001105c <exit@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #94208	; 0x17000
   11064:	ldr	pc, [ip, #40]!	; 0x28

00011068 <bcmp@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #94208	; 0x17000
   11070:	ldr	pc, [ip, #32]!

00011074 <strlen@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #94208	; 0x17000
   1107c:	ldr	pc, [ip, #24]!

00011080 <__errno_location@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #94208	; 0x17000
   11088:	ldr	pc, [ip, #16]!

0001108c <__cxa_atexit@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #94208	; 0x17000
   11094:	ldr	pc, [ip, #8]!

00011098 <memset@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #94208	; 0x17000
   110a0:	ldr	pc, [ip, #0]!

000110a4 <__printf_chk@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #90112	; 0x16000
   110ac:	ldr	pc, [ip, #4088]!	; 0xff8

000110b0 <fileno@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #90112	; 0x16000
   110b8:	ldr	pc, [ip, #4080]!	; 0xff0

000110bc <__fprintf_chk@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #4072]!	; 0xfe8

000110c8 <fclose@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #4064]!	; 0xfe0

000110d4 <fseeko64@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #4056]!	; 0xfd8

000110e0 <setlocale@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #4048]!	; 0xfd0

000110ec <strrchr@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #4040]!	; 0xfc8

000110f8 <nl_langinfo@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #4032]!	; 0xfc0

00011104 <bindtextdomain@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #4024]!	; 0xfb8

00011110 <getline@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #90112	; 0x16000
   11118:	ldr	pc, [ip, #4016]!	; 0xfb0

0001111c <strncmp@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #90112	; 0x16000
   11124:	ldr	pc, [ip, #4008]!	; 0xfa8

00011128 <abort@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #90112	; 0x16000
   11130:	ldr	pc, [ip, #4000]!	; 0xfa0

00011134 <close@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #90112	; 0x16000
   1113c:	ldr	pc, [ip, #3992]!	; 0xf98

Disassembly of section .text:

00011140 <_obstack_begin@@Base-0x1548>:
   11140:	mov	fp, #0
   11144:	mov	lr, #0
   11148:	pop	{r1}		; (ldr r1, [sp], #4)
   1114c:	mov	r2, sp
   11150:	push	{r2}		; (str r2, [sp, #-4]!)
   11154:	push	{r0}		; (str r0, [sp, #-4]!)
   11158:	ldr	ip, [pc, #16]	; 11170 <close@plt+0x3c>
   1115c:	push	{ip}		; (str ip, [sp, #-4]!)
   11160:	ldr	r0, [pc, #12]	; 11174 <close@plt+0x40>
   11164:	ldr	r3, [pc, #12]	; 11178 <close@plt+0x44>
   11168:	bl	11014 <__libc_start_main@plt>
   1116c:	bl	11128 <abort@plt>
   11170:			; <UNDEFINED> instruction: 0x000155b4
   11174:	andeq	r1, r1, r0, asr #9
   11178:	andeq	r5, r1, r4, asr r5
   1117c:	ldr	r3, [pc, #20]	; 11198 <close@plt+0x64>
   11180:	ldr	r2, [pc, #20]	; 1119c <close@plt+0x68>
   11184:	add	r3, pc, r3
   11188:	ldr	r2, [r3, r2]
   1118c:	cmp	r2, #0
   11190:	bxeq	lr
   11194:	b	1102c <__gmon_start__@plt>
   11198:	andeq	r6, r1, r4, ror lr
   1119c:	ldrdeq	r0, [r0], -r8
   111a0:	ldr	r0, [pc, #24]	; 111c0 <close@plt+0x8c>
   111a4:	ldr	r3, [pc, #24]	; 111c4 <close@plt+0x90>
   111a8:	cmp	r3, r0
   111ac:	bxeq	lr
   111b0:	ldr	r3, [pc, #16]	; 111c8 <close@plt+0x94>
   111b4:	cmp	r3, #0
   111b8:	bxeq	lr
   111bc:	bx	r3
   111c0:	andeq	r8, r2, r8, lsr r1
   111c4:	andeq	r8, r2, r8, lsr r1
   111c8:	andeq	r0, r0, r0
   111cc:	ldr	r0, [pc, #36]	; 111f8 <close@plt+0xc4>
   111d0:	ldr	r1, [pc, #36]	; 111fc <close@plt+0xc8>
   111d4:	sub	r1, r1, r0
   111d8:	asr	r1, r1, #2
   111dc:	add	r1, r1, r1, lsr #31
   111e0:	asrs	r1, r1, #1
   111e4:	bxeq	lr
   111e8:	ldr	r3, [pc, #16]	; 11200 <close@plt+0xcc>
   111ec:	cmp	r3, #0
   111f0:	bxeq	lr
   111f4:	bx	r3
   111f8:	andeq	r8, r2, r8, lsr r1
   111fc:	andeq	r8, r2, r8, lsr r1
   11200:	andeq	r0, r0, r0
   11204:	push	{r4, lr}
   11208:	ldr	r4, [pc, #24]	; 11228 <close@plt+0xf4>
   1120c:	ldrb	r3, [r4]
   11210:	cmp	r3, #0
   11214:	popne	{r4, pc}
   11218:	bl	111a0 <close@plt+0x6c>
   1121c:	mov	r3, #1
   11220:	strb	r3, [r4]
   11224:	pop	{r4, pc}
   11228:	andeq	r8, r2, r8, asr r1
   1122c:	b	111cc <close@plt+0x98>
   11230:	push	{fp, lr}
   11234:	mov	fp, sp
   11238:	mov	r4, r0
   1123c:	cmp	r0, #0
   11240:	bne	112f4 <close@plt+0x1c0>
   11244:	movw	r1, #22019	; 0x5603
   11248:	movt	r1, #1
   1124c:	mov	r0, #0
   11250:	mov	r2, #5
   11254:	bl	10f48 <dcgettext@plt>
   11258:	mov	r1, r0
   1125c:	movw	r0, #33168	; 0x8190
   11260:	movt	r0, #2
   11264:	ldr	r2, [r0]
   11268:	mov	r0, #1
   1126c:	bl	110a4 <__printf_chk@plt>
   11270:	movw	r1, #22049	; 0x5621
   11274:	movt	r1, #1
   11278:	mov	r0, #0
   1127c:	mov	r2, #5
   11280:	bl	10f48 <dcgettext@plt>
   11284:	movw	r5, #33108	; 0x8154
   11288:	movt	r5, #2
   1128c:	ldr	r1, [r5]
   11290:	bl	10ee8 <fputs_unlocked@plt>
   11294:	movw	r1, #22323	; 0x5733
   11298:	movt	r1, #1
   1129c:	mov	r0, #0
   112a0:	mov	r2, #5
   112a4:	bl	10f48 <dcgettext@plt>
   112a8:	ldr	r1, [r5]
   112ac:	bl	10ee8 <fputs_unlocked@plt>
   112b0:	movw	r1, #22368	; 0x5760
   112b4:	movt	r1, #1
   112b8:	mov	r0, #0
   112bc:	mov	r2, #5
   112c0:	bl	10f48 <dcgettext@plt>
   112c4:	ldr	r1, [r5]
   112c8:	bl	10ee8 <fputs_unlocked@plt>
   112cc:	movw	r1, #22422	; 0x5796
   112d0:	movt	r1, #1
   112d4:	mov	r0, #0
   112d8:	mov	r2, #5
   112dc:	bl	10f48 <dcgettext@plt>
   112e0:	ldr	r1, [r5]
   112e4:	bl	10ee8 <fputs_unlocked@plt>
   112e8:	bl	11338 <close@plt+0x204>
   112ec:	mov	r0, r4
   112f0:	bl	1105c <exit@plt>
   112f4:	movw	r0, #33096	; 0x8148
   112f8:	movt	r0, #2
   112fc:	ldr	r5, [r0]
   11300:	movw	r1, #21980	; 0x55dc
   11304:	movt	r1, #1
   11308:	mov	r0, #0
   1130c:	mov	r2, #5
   11310:	bl	10f48 <dcgettext@plt>
   11314:	mov	r2, r0
   11318:	movw	r0, #33168	; 0x8190
   1131c:	movt	r0, #2
   11320:	ldr	r3, [r0]
   11324:	mov	r0, r5
   11328:	mov	r1, #1
   1132c:	bl	110bc <__fprintf_chk@plt>
   11330:	mov	r0, r4
   11334:	bl	1105c <exit@plt>
   11338:	push	{r4, r5, r6, sl, fp, lr}
   1133c:	add	fp, sp, #16
   11340:	sub	sp, sp, #56	; 0x38
   11344:	movw	r0, #28240	; 0x6e50
   11348:	movt	r0, #1
   1134c:	add	r1, r0, #32
   11350:	mov	r2, #48	; 0x30
   11354:	vld1.64	{d16-d17}, [r1]
   11358:	mov	r6, sp
   1135c:	add	r1, r6, #32
   11360:	add	r3, r0, #16
   11364:	vld1.64	{d18-d19}, [r0], r2
   11368:	vld1.64	{d20-d21}, [r3]
   1136c:	vldr	d22, [r0]
   11370:	vst1.64	{d16-d17}, [r1]
   11374:	add	r0, r6, #16
   11378:	vst1.64	{d20-d21}, [r0]
   1137c:	mov	r0, r6
   11380:	vst1.64	{d18-d19}, [r0], r2
   11384:	vstr	d22, [r0]
   11388:	ldr	r1, [sp]
   1138c:	cmp	r1, #0
   11390:	movw	r4, #22644	; 0x5874
   11394:	movt	r4, #1
   11398:	beq	113c0 <close@plt+0x28c>
   1139c:	mov	r6, sp
   113a0:	movw	r5, #22644	; 0x5874
   113a4:	movt	r5, #1
   113a8:	mov	r0, r5
   113ac:	bl	10ef4 <strcmp@plt>
   113b0:	cmp	r0, #0
   113b4:	ldrne	r1, [r6, #8]!
   113b8:	cmpne	r1, #0
   113bc:	bne	113a8 <close@plt+0x274>
   113c0:	ldr	r5, [r6, #4]
   113c4:	movw	r1, #23100	; 0x5a3c
   113c8:	movt	r1, #1
   113cc:	mov	r0, #0
   113d0:	mov	r2, #5
   113d4:	bl	10f48 <dcgettext@plt>
   113d8:	mov	r1, r0
   113dc:	movw	r2, #22682	; 0x589a
   113e0:	movt	r2, #1
   113e4:	movw	r3, #23123	; 0x5a53
   113e8:	movt	r3, #1
   113ec:	mov	r0, #1
   113f0:	bl	110a4 <__printf_chk@plt>
   113f4:	cmp	r5, #0
   113f8:	moveq	r5, r4
   113fc:	mov	r0, #5
   11400:	mov	r1, #0
   11404:	bl	110e0 <setlocale@plt>
   11408:	cmp	r0, #0
   1140c:	beq	1144c <close@plt+0x318>
   11410:	movw	r1, #23163	; 0x5a7b
   11414:	movt	r1, #1
   11418:	mov	r2, #3
   1141c:	bl	1111c <strncmp@plt>
   11420:	cmp	r0, #0
   11424:	beq	1144c <close@plt+0x318>
   11428:	movw	r1, #23167	; 0x5a7f
   1142c:	movt	r1, #1
   11430:	mov	r0, #0
   11434:	mov	r2, #5
   11438:	bl	10f48 <dcgettext@plt>
   1143c:	movw	r1, #33108	; 0x8154
   11440:	movt	r1, #2
   11444:	ldr	r1, [r1]
   11448:	bl	10ee8 <fputs_unlocked@plt>
   1144c:	movw	r1, #23238	; 0x5ac6
   11450:	movt	r1, #1
   11454:	mov	r0, #0
   11458:	mov	r2, #5
   1145c:	bl	10f48 <dcgettext@plt>
   11460:	mov	r1, r0
   11464:	movw	r2, #23123	; 0x5a53
   11468:	movt	r2, #1
   1146c:	mov	r0, #1
   11470:	mov	r3, r4
   11474:	bl	110a4 <__printf_chk@plt>
   11478:	movw	r0, #23033	; 0x59f9
   1147c:	movt	r0, #1
   11480:	movw	r6, #23315	; 0x5b13
   11484:	movt	r6, #1
   11488:	cmp	r5, r4
   1148c:	moveq	r6, r0
   11490:	movw	r1, #23265	; 0x5ae1
   11494:	movt	r1, #1
   11498:	mov	r0, #0
   1149c:	mov	r2, #5
   114a0:	bl	10f48 <dcgettext@plt>
   114a4:	mov	r1, r0
   114a8:	mov	r0, #1
   114ac:	mov	r2, r5
   114b0:	mov	r3, r6
   114b4:	sub	sp, fp, #16
   114b8:	pop	{r4, r5, r6, sl, fp, lr}
   114bc:	b	110a4 <__printf_chk@plt>
   114c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114c4:	add	fp, sp, #28
   114c8:	sub	sp, sp, #12
   114cc:	mov	r6, r1
   114d0:	mov	sl, r0
   114d4:	ldr	r0, [r1]
   114d8:	bl	129fc <_obstack_memory_used@@Base+0x78>
   114dc:	movw	r1, #23315	; 0x5b13
   114e0:	movt	r1, #1
   114e4:	mov	r0, #6
   114e8:	bl	110e0 <setlocale@plt>
   114ec:	movw	r4, #22686	; 0x589e
   114f0:	movt	r4, #1
   114f4:	movw	r1, #22654	; 0x587e
   114f8:	movt	r1, #1
   114fc:	mov	r0, r4
   11500:	bl	11104 <bindtextdomain@plt>
   11504:	mov	r0, r4
   11508:	bl	10f6c <textdomain@plt>
   1150c:	movw	r0, #8688	; 0x21f0
   11510:	movt	r0, #1
   11514:	bl	155b8 <_obstack_memory_used@@Base+0x2c34>
   11518:	mov	r4, #2
   1151c:	mov	r7, #0
   11520:	movw	r8, #22678	; 0x5896
   11524:	movt	r8, #1
   11528:	movw	r9, #23800	; 0x5cf8
   1152c:	movt	r9, #1
   11530:	mov	r5, r4
   11534:	mov	r4, #0
   11538:	str	r4, [sp]
   1153c:	mov	r0, sl
   11540:	mov	r1, r6
   11544:	mov	r2, r8
   11548:	mov	r3, r9
   1154c:	bl	11044 <getopt_long@plt>
   11550:	cmp	r0, #97	; 0x61
   11554:	ble	11584 <close@plt+0x450>
   11558:	cmp	r0, #98	; 0x62
   1155c:	beq	11530 <close@plt+0x3fc>
   11560:	cmp	r0, #112	; 0x70
   11564:	bne	11574 <close@plt+0x440>
   11568:	mov	r7, #1
   1156c:	mov	r4, r5
   11570:	b	11530 <close@plt+0x3fc>
   11574:	cmp	r0, #99	; 0x63
   11578:	bne	11834 <close@plt+0x700>
   1157c:	mov	r4, #1
   11580:	b	11530 <close@plt+0x3fc>
   11584:	cmn	r0, #1
   11588:	bne	11734 <close@plt+0x600>
   1158c:	mvn	r0, r7
   11590:	sub	r1, r5, #2
   11594:	clz	r1, r1
   11598:	lsr	r1, r1, #5
   1159c:	orr	r0, r0, r1
   115a0:	tst	r0, #1
   115a4:	beq	11794 <close@plt+0x660>
   115a8:	movw	r0, #33088	; 0x8140
   115ac:	movt	r0, #2
   115b0:	ldr	r0, [r0]
   115b4:	add	r8, r6, r0, lsl #2
   115b8:	sub	r6, sl, r0
   115bc:	mov	r0, #1
   115c0:	bic	r4, r0, r7
   115c4:	cmp	r6, r4
   115c8:	bgt	117c0 <close@plt+0x68c>
   115cc:	tst	r7, #1
   115d0:	beq	1160c <close@plt+0x4d8>
   115d4:	movw	r5, #23928	; 0x5d78
   115d8:	movt	r5, #1
   115dc:	movw	r6, #4310	; 0x10d6
   115e0:	mov	r4, r5
   115e4:	mov	r0, r4
   115e8:	bl	10ffc <puts@plt>
   115ec:	mov	r0, r4
   115f0:	bl	11074 <strlen@plt>
   115f4:	add	r0, r0, r4
   115f8:	add	r4, r0, #1
   115fc:	sub	r0, r4, r5
   11600:	cmp	r0, r6
   11604:	bcc	115e4 <close@plt+0x4b0>
   11608:	b	11728 <close@plt+0x5f4>
   1160c:	cmp	r5, #2
   11610:	bne	11624 <close@plt+0x4f0>
   11614:	bl	11860 <close@plt+0x72c>
   11618:	mov	r5, r0
   1161c:	cmp	r0, #2
   11620:	beq	1183c <close@plt+0x708>
   11624:	movw	r0, #9184	; 0x23e0
   11628:	movt	r0, #1
   1162c:	str	r0, [sp]
   11630:	movw	r4, #33116	; 0x815c
   11634:	movt	r4, #2
   11638:	movw	r3, #20208	; 0x4ef0
   1163c:	movt	r3, #1
   11640:	mov	r0, r4
   11644:	mov	r1, #0
   11648:	mov	r2, #0
   1164c:	bl	12688 <_obstack_begin@@Base>
   11650:	cmp	r6, #0
   11654:	beq	11664 <close@plt+0x530>
   11658:	ldr	r0, [r8]
   1165c:	bl	11d48 <close@plt+0xc14>
   11660:	b	11670 <close@plt+0x53c>
   11664:	mov	r0, #0
   11668:	mov	r1, #0
   1166c:	bl	118d4 <close@plt+0x7a0>
   11670:	mov	r1, r0
   11674:	mov	r0, #1
   11678:	cmp	r1, #0
   1167c:	beq	1172c <close@plt+0x5f8>
   11680:	ldr	r6, [r4, #8]
   11684:	ldr	r0, [r4, #12]
   11688:	subs	r7, r0, r6
   1168c:	bne	1169c <close@plt+0x568>
   11690:	ldrb	r0, [r4, #40]	; 0x28
   11694:	orr	r0, r0, #2
   11698:	strb	r0, [r4, #40]	; 0x28
   1169c:	ldr	r0, [r4, #4]
   116a0:	ldr	r1, [r4, #12]
   116a4:	ldr	r2, [r4, #16]
   116a8:	ldr	r3, [r4, #24]
   116ac:	add	r1, r3, r1
   116b0:	bic	r1, r1, r3
   116b4:	sub	r3, r1, r0
   116b8:	sub	r0, r2, r0
   116bc:	cmp	r3, r0
   116c0:	movhi	r1, r2
   116c4:	str	r1, [r4, #8]
   116c8:	str	r1, [r4, #12]
   116cc:	movw	r1, #22953	; 0x59a9
   116d0:	movt	r1, #1
   116d4:	movw	r0, #22986	; 0x59ca
   116d8:	movt	r0, #1
   116dc:	cmp	r5, #0
   116e0:	moveq	r0, r1
   116e4:	movw	r4, #33108	; 0x8154
   116e8:	movt	r4, #2
   116ec:	ldr	r1, [r4]
   116f0:	bl	10ee8 <fputs_unlocked@plt>
   116f4:	ldr	r3, [r4]
   116f8:	mov	r0, r6
   116fc:	mov	r1, #1
   11700:	mov	r2, r7
   11704:	bl	10f3c <fwrite_unlocked@plt>
   11708:	movw	r1, #22965	; 0x59b5
   1170c:	movt	r1, #1
   11710:	movw	r0, #23313	; 0x5b11
   11714:	movt	r0, #1
   11718:	cmp	r5, #0
   1171c:	moveq	r0, r1
   11720:	ldr	r1, [r4]
   11724:	bl	10ee8 <fputs_unlocked@plt>
   11728:	mov	r0, #0
   1172c:	sub	sp, fp, #28
   11730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11734:	cmn	r0, #3
   11738:	bne	11784 <close@plt+0x650>
   1173c:	movw	r0, #33000	; 0x80e8
   11740:	movt	r0, #2
   11744:	ldr	r3, [r0]
   11748:	movw	r0, #33108	; 0x8154
   1174c:	movt	r0, #2
   11750:	ldr	r0, [r0]
   11754:	mov	r1, #0
   11758:	movw	r2, #22696	; 0x58a8
   1175c:	movt	r2, #1
   11760:	str	r2, [sp]
   11764:	str	r1, [sp, #4]
   11768:	movw	r1, #22644	; 0x5874
   1176c:	movt	r1, #1
   11770:	movw	r2, #22682	; 0x589a
   11774:	movt	r2, #1
   11778:	bl	149c8 <_obstack_memory_used@@Base+0x2044>
   1177c:	mov	r0, #0
   11780:	bl	1105c <exit@plt>
   11784:	cmn	r0, #2
   11788:	bne	11834 <close@plt+0x700>
   1178c:	mov	r0, #0
   11790:	bl	11230 <close@plt+0xfc>
   11794:	movw	r1, #22711	; 0x58b7
   11798:	movt	r1, #1
   1179c:	mov	r0, #0
   117a0:	mov	r2, #5
   117a4:	bl	10f48 <dcgettext@plt>
   117a8:	mov	r2, r0
   117ac:	mov	r0, #0
   117b0:	mov	r1, #0
   117b4:	bl	10fcc <error@plt>
   117b8:	mov	r0, #1
   117bc:	bl	11230 <close@plt+0xfc>
   117c0:	movw	r1, #22814	; 0x591e
   117c4:	movt	r1, #1
   117c8:	mov	r0, #0
   117cc:	mov	r2, #5
   117d0:	bl	10f48 <dcgettext@plt>
   117d4:	mov	r5, r0
   117d8:	ldr	r0, [r8, r4, lsl #2]
   117dc:	bl	141f0 <_obstack_memory_used@@Base+0x186c>
   117e0:	mov	r3, r0
   117e4:	mov	r0, #0
   117e8:	mov	r1, #0
   117ec:	mov	r2, r5
   117f0:	bl	10fcc <error@plt>
   117f4:	tst	r7, #1
   117f8:	beq	11834 <close@plt+0x700>
   117fc:	movw	r0, #33096	; 0x8148
   11800:	movt	r0, #2
   11804:	ldr	r4, [r0]
   11808:	movw	r1, #22831	; 0x592f
   1180c:	movt	r1, #1
   11810:	mov	r0, #0
   11814:	mov	r2, #5
   11818:	bl	10f48 <dcgettext@plt>
   1181c:	mov	r3, r0
   11820:	movw	r2, #28912	; 0x70f0
   11824:	movt	r2, #1
   11828:	mov	r0, r4
   1182c:	mov	r1, #1
   11830:	bl	110bc <__fprintf_chk@plt>
   11834:	mov	r0, #1
   11838:	bl	11230 <close@plt+0xfc>
   1183c:	movw	r1, #22891	; 0x596b
   11840:	movt	r1, #1
   11844:	mov	r0, #0
   11848:	mov	r2, #5
   1184c:	bl	10f48 <dcgettext@plt>
   11850:	mov	r2, r0
   11854:	mov	r0, #1
   11858:	mov	r1, #0
   1185c:	bl	10fcc <error@plt>
   11860:	push	{r4, sl, fp, lr}
   11864:	add	fp, sp, #8
   11868:	movw	r0, #23365	; 0x5b45
   1186c:	movt	r0, #1
   11870:	bl	10ff0 <getenv@plt>
   11874:	mov	r1, r0
   11878:	mov	r0, #2
   1187c:	cmp	r1, #0
   11880:	beq	118c8 <close@plt+0x794>
   11884:	ldrb	r2, [r1]
   11888:	cmp	r2, #0
   1188c:	beq	118c8 <close@plt+0x794>
   11890:	mov	r0, r1
   11894:	bl	120ec <close@plt+0xfb8>
   11898:	mov	r4, r0
   1189c:	movw	r1, #23372	; 0x5b4c
   118a0:	movt	r1, #1
   118a4:	bl	10ef4 <strcmp@plt>
   118a8:	cmp	r0, #0
   118ac:	beq	118cc <close@plt+0x798>
   118b0:	movw	r1, #23371	; 0x5b4b
   118b4:	movt	r1, #1
   118b8:	mov	r0, r4
   118bc:	bl	10ef4 <strcmp@plt>
   118c0:	clz	r0, r0
   118c4:	lsr	r0, r0, #5
   118c8:	pop	{r4, sl, fp, pc}
   118cc:	mov	r0, #1
   118d0:	pop	{r4, sl, fp, pc}
   118d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118d8:	add	fp, sp, #28
   118dc:	sub	sp, sp, #44	; 0x2c
   118e0:	str	r1, [sp, #12]
   118e4:	mov	r7, r0
   118e8:	mov	r0, #0
   118ec:	str	r0, [fp, #-32]	; 0xffffffe0
   118f0:	str	r0, [sp, #36]	; 0x24
   118f4:	movw	r0, #23376	; 0x5b50
   118f8:	movt	r0, #1
   118fc:	bl	10ff0 <getenv@plt>
   11900:	cmp	r0, #0
   11904:	beq	11914 <close@plt+0x7e0>
   11908:	ldrb	r1, [r0]
   1190c:	cmp	r1, #0
   11910:	bne	1191c <close@plt+0x7e8>
   11914:	movw	r0, #23381	; 0x5b55
   11918:	movt	r0, #1
   1191c:	str	r0, [sp, #8]
   11920:	mov	sl, #0
   11924:	movw	r4, #23928	; 0x5d78
   11928:	movt	r4, #1
   1192c:	mov	r0, #1
   11930:	str	r0, [sp, #16]
   11934:	mov	r0, #3
   11938:	str	r0, [sp, #24]
   1193c:	movw	r0, #4310	; 0x10d6
   11940:	add	r0, r4, r0
   11944:	str	r0, [sp, #20]
   11948:	add	r6, sp, #32
   1194c:	cmp	r7, #0
   11950:	bne	119bc <close@plt+0x888>
   11954:	b	119e0 <close@plt+0x8ac>
   11958:	mov	r0, #0
   1195c:	str	r0, [sp, #16]
   11960:	mov	r0, #0
   11964:	movw	r1, #23386	; 0x5b5a
   11968:	movt	r1, #1
   1196c:	mov	r2, #5
   11970:	bl	10f48 <dcgettext@plt>
   11974:	mov	r5, r6
   11978:	mov	r6, r0
   1197c:	mov	r0, #0
   11980:	mov	r1, #3
   11984:	ldr	r2, [sp, #12]
   11988:	bl	140b0 <_obstack_memory_used@@Base+0x172c>
   1198c:	mov	r3, r0
   11990:	str	sl, [sp]
   11994:	mov	r0, #0
   11998:	mov	r1, #0
   1199c:	mov	r2, r6
   119a0:	mov	r6, r5
   119a4:	bl	10fcc <error@plt>
   119a8:	mov	r9, r8
   119ac:	mov	r0, r9
   119b0:	bl	123e0 <close@plt+0x12ac>
   119b4:	cmp	r7, #0
   119b8:	beq	119e0 <close@plt+0x8ac>
   119bc:	sub	r0, fp, #32
   119c0:	add	r1, sp, #36	; 0x24
   119c4:	mov	r2, r7
   119c8:	bl	11110 <getline@plt>
   119cc:	mov	r1, r0
   119d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   119d4:	cmp	r1, #0
   119d8:	bgt	11a04 <close@plt+0x8d0>
   119dc:	b	11d34 <close@plt+0xc00>
   119e0:	ldr	r0, [sp, #20]
   119e4:	cmp	r4, r0
   119e8:	beq	11d38 <close@plt+0xc04>
   119ec:	mov	r0, r4
   119f0:	bl	11074 <strlen@plt>
   119f4:	add	r0, r0, r4
   119f8:	add	r1, r0, #1
   119fc:	mov	r0, r4
   11a00:	mov	r4, r1
   11a04:	add	sl, sl, #1
   11a08:	mov	r1, r6
   11a0c:	add	r2, sp, #28
   11a10:	bl	11de8 <close@plt+0xcb4>
   11a14:	ldr	r8, [sp, #32]
   11a18:	cmp	r8, #0
   11a1c:	beq	119b4 <close@plt+0x880>
   11a20:	ldr	r9, [sp, #28]
   11a24:	cmp	r9, #0
   11a28:	beq	11958 <close@plt+0x824>
   11a2c:	mov	r0, r8
   11a30:	movw	r1, #23376	; 0x5b50
   11a34:	movt	r1, #1
   11a38:	bl	12170 <close@plt+0x103c>
   11a3c:	cmp	r0, #0
   11a40:	beq	11ab4 <close@plt+0x980>
   11a44:	ldr	r0, [sp, #24]
   11a48:	cmp	r0, #2
   11a4c:	movweq	r0, #1
   11a50:	cmp	r0, #0
   11a54:	beq	11ae4 <close@plt+0x9b0>
   11a58:	str	r0, [sp, #24]
   11a5c:	ldrb	r0, [r8]
   11a60:	cmp	r0, #42	; 0x2a
   11a64:	beq	11af8 <close@plt+0x9c4>
   11a68:	cmp	r0, #46	; 0x2e
   11a6c:	bne	11b7c <close@plt+0xa48>
   11a70:	movw	r5, #33116	; 0x815c
   11a74:	movt	r5, #2
   11a78:	ldr	r0, [r5, #12]
   11a7c:	ldr	r1, [r5, #16]
   11a80:	cmp	r1, r0
   11a84:	bne	11a94 <close@plt+0x960>
   11a88:	mov	r0, r5
   11a8c:	mov	r1, #1
   11a90:	bl	12770 <_obstack_newchunk@@Base>
   11a94:	ldr	r0, [r5, #12]
   11a98:	add	r1, r0, #1
   11a9c:	str	r1, [r5, #12]
   11aa0:	mov	r1, #42	; 0x2a
   11aa4:	strb	r1, [r0]
   11aa8:	mov	r0, r8
   11aac:	bl	11ef4 <close@plt+0xdc0>
   11ab0:	b	11b08 <close@plt+0x9d4>
   11ab4:	mov	r0, r9
   11ab8:	ldr	r1, [sp, #8]
   11abc:	mov	r2, #0
   11ac0:	bl	10fd8 <fnmatch@plt>
   11ac4:	cmp	r0, #0
   11ac8:	beq	11aec <close@plt+0x9b8>
   11acc:	ldr	r0, [sp, #24]
   11ad0:	sub	r0, r0, #2
   11ad4:	clz	r0, r0
   11ad8:	lsr	r0, r0, #5
   11adc:	lsl	r0, r0, #1
   11ae0:	b	11af0 <close@plt+0x9bc>
   11ae4:	mov	r0, #0
   11ae8:	b	11af0 <close@plt+0x9bc>
   11aec:	mov	r0, #2
   11af0:	str	r0, [sp, #24]
   11af4:	b	11b70 <close@plt+0xa3c>
   11af8:	mov	r0, r8
   11afc:	bl	11ef4 <close@plt+0xdc0>
   11b00:	movw	r5, #33116	; 0x815c
   11b04:	movt	r5, #2
   11b08:	ldr	r0, [r5, #12]
   11b0c:	ldr	r1, [r5, #16]
   11b10:	cmp	r1, r0
   11b14:	bne	11b24 <close@plt+0x9f0>
   11b18:	mov	r0, r5
   11b1c:	mov	r1, #1
   11b20:	bl	12770 <_obstack_newchunk@@Base>
   11b24:	ldr	r0, [r5, #12]
   11b28:	add	r1, r0, #1
   11b2c:	str	r1, [r5, #12]
   11b30:	mov	r1, #61	; 0x3d
   11b34:	strb	r1, [r0]
   11b38:	mov	r0, r9
   11b3c:	bl	11ef4 <close@plt+0xdc0>
   11b40:	ldr	r0, [r5, #12]
   11b44:	ldr	r1, [r5, #16]
   11b48:	cmp	r1, r0
   11b4c:	bne	11b5c <close@plt+0xa28>
   11b50:	mov	r0, r5
   11b54:	mov	r1, #1
   11b58:	bl	12770 <_obstack_newchunk@@Base>
   11b5c:	ldr	r0, [r5, #12]
   11b60:	add	r1, r0, #1
   11b64:	str	r1, [r5, #12]
   11b68:	mov	r1, #58	; 0x3a
   11b6c:	strb	r1, [r0]
   11b70:	mov	r0, r8
   11b74:	bl	123e0 <close@plt+0x12ac>
   11b78:	b	119ac <close@plt+0x878>
   11b7c:	mov	r0, r8
   11b80:	movw	r1, #23430	; 0x5b86
   11b84:	movt	r1, #1
   11b88:	bl	12170 <close@plt+0x103c>
   11b8c:	cmp	r0, #0
   11b90:	beq	11b70 <close@plt+0xa3c>
   11b94:	mov	r0, r8
   11b98:	movw	r1, #23438	; 0x5b8e
   11b9c:	movt	r1, #1
   11ba0:	bl	12170 <close@plt+0x103c>
   11ba4:	cmp	r0, #0
   11ba8:	beq	11b70 <close@plt+0xa3c>
   11bac:	mov	r0, r8
   11bb0:	movw	r1, #23444	; 0x5b94
   11bb4:	movt	r1, #1
   11bb8:	bl	12170 <close@plt+0x103c>
   11bbc:	cmp	r0, #0
   11bc0:	beq	11b70 <close@plt+0xa3c>
   11bc4:	mov	r6, #0
   11bc8:	movw	r0, #28296	; 0x6e88
   11bcc:	movt	r0, #1
   11bd0:	ldr	r1, [r0, r6, lsl #2]
   11bd4:	mov	r0, r8
   11bd8:	bl	12170 <close@plt+0x103c>
   11bdc:	cmp	r0, #0
   11be0:	beq	11c38 <close@plt+0xb04>
   11be4:	add	r6, r6, #1
   11be8:	cmp	r6, #37	; 0x25
   11bec:	bne	11bc8 <close@plt+0xa94>
   11bf0:	ldr	r0, [sp, #24]
   11bf4:	sub	r0, r0, #1
   11bf8:	cmp	r0, #1
   11bfc:	add	r6, sp, #32
   11c00:	bhi	11b70 <close@plt+0xa3c>
   11c04:	mov	r0, #0
   11c08:	movw	r1, #23453	; 0x5b9d
   11c0c:	movt	r1, #1
   11c10:	mov	r2, #5
   11c14:	bl	10f48 <dcgettext@plt>
   11c18:	mov	r5, r0
   11c1c:	ldr	r2, [sp, #12]
   11c20:	mov	r0, #0
   11c24:	cmp	r2, #0
   11c28:	beq	11cfc <close@plt+0xbc8>
   11c2c:	mov	r1, #3
   11c30:	bl	140b0 <_obstack_memory_used@@Base+0x172c>
   11c34:	b	11d0c <close@plt+0xbd8>
   11c38:	movw	r5, #33116	; 0x815c
   11c3c:	movt	r5, #2
   11c40:	ldr	r0, [r5, #12]
   11c44:	ldr	r1, [r5, #16]
   11c48:	cmp	r1, r0
   11c4c:	bne	11c5c <close@plt+0xb28>
   11c50:	mov	r0, r5
   11c54:	mov	r1, #1
   11c58:	bl	12770 <_obstack_newchunk@@Base>
   11c5c:	movw	r0, #28448	; 0x6f20
   11c60:	movt	r0, #1
   11c64:	ldr	r6, [r0, r6, lsl #2]
   11c68:	ldrb	r0, [r6]
   11c6c:	ldr	r1, [r5, #12]
   11c70:	add	r2, r1, #1
   11c74:	str	r2, [r5, #12]
   11c78:	strb	r0, [r1]
   11c7c:	ldr	r0, [r5, #12]
   11c80:	ldr	r1, [r5, #16]
   11c84:	cmp	r1, r0
   11c88:	bne	11c98 <close@plt+0xb64>
   11c8c:	mov	r0, r5
   11c90:	mov	r1, #1
   11c94:	bl	12770 <_obstack_newchunk@@Base>
   11c98:	ldrb	r0, [r6, #1]
   11c9c:	ldr	r1, [r5, #12]
   11ca0:	add	r2, r1, #1
   11ca4:	str	r2, [r5, #12]
   11ca8:	strb	r0, [r1]
   11cac:	ldr	r0, [r5, #12]
   11cb0:	ldr	r1, [r5, #16]
   11cb4:	cmp	r1, r0
   11cb8:	bne	11cc8 <close@plt+0xb94>
   11cbc:	mov	r0, r5
   11cc0:	mov	r1, #1
   11cc4:	bl	12770 <_obstack_newchunk@@Base>
   11cc8:	ldr	r0, [r5, #12]
   11ccc:	add	r1, r0, #1
   11cd0:	str	r1, [r5, #12]
   11cd4:	mov	r1, #61	; 0x3d
   11cd8:	strb	r1, [r0]
   11cdc:	mov	r0, r9
   11ce0:	bl	11ef4 <close@plt+0xdc0>
   11ce4:	ldr	r0, [r5, #12]
   11ce8:	ldr	r1, [r5, #16]
   11cec:	cmp	r1, r0
   11cf0:	add	r6, sp, #32
   11cf4:	beq	11b50 <close@plt+0xa1c>
   11cf8:	b	11b5c <close@plt+0xa28>
   11cfc:	movw	r1, #23485	; 0x5bbd
   11d00:	movt	r1, #1
   11d04:	mov	r2, #5
   11d08:	bl	10f48 <dcgettext@plt>
   11d0c:	mov	r3, r0
   11d10:	str	sl, [sp]
   11d14:	str	r8, [sp, #4]
   11d18:	mov	r0, #0
   11d1c:	str	r0, [sp, #16]
   11d20:	mov	r0, #0
   11d24:	mov	r1, #0
   11d28:	mov	r2, r5
   11d2c:	bl	10fcc <error@plt>
   11d30:	b	11b70 <close@plt+0xa3c>
   11d34:	bl	123e0 <close@plt+0x12ac>
   11d38:	ldr	r0, [sp, #16]
   11d3c:	and	r0, r0, #1
   11d40:	sub	sp, fp, #28
   11d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d48:	push	{r4, r5, r6, sl, fp, lr}
   11d4c:	add	fp, sp, #16
   11d50:	mov	r4, r0
   11d54:	movw	r1, #28727	; 0x7037
   11d58:	movt	r1, #1
   11d5c:	bl	10ef4 <strcmp@plt>
   11d60:	cmp	r0, #0
   11d64:	movw	r6, #33104	; 0x8150
   11d68:	movt	r6, #2
   11d6c:	beq	11d8c <close@plt+0xc58>
   11d70:	ldr	r2, [r6]
   11d74:	movw	r1, #28625	; 0x6fd1
   11d78:	movt	r1, #1
   11d7c:	mov	r0, r4
   11d80:	bl	12408 <close@plt+0x12d4>
   11d84:	cmp	r0, #0
   11d88:	beq	11dac <close@plt+0xc78>
   11d8c:	ldr	r0, [r6]
   11d90:	mov	r1, r4
   11d94:	bl	118d4 <close@plt+0x7a0>
   11d98:	mov	r5, r0
   11d9c:	ldr	r0, [r6]
   11da0:	bl	122d8 <close@plt+0x11a4>
   11da4:	cmp	r0, #0
   11da8:	beq	11de0 <close@plt+0xcac>
   11dac:	bl	11080 <__errno_location@plt>
   11db0:	ldr	r6, [r0]
   11db4:	mov	r5, #0
   11db8:	mov	r0, #0
   11dbc:	mov	r1, #3
   11dc0:	mov	r2, r4
   11dc4:	bl	140b0 <_obstack_memory_used@@Base+0x172c>
   11dc8:	mov	r3, r0
   11dcc:	movw	r2, #28631	; 0x6fd7
   11dd0:	movt	r2, #1
   11dd4:	mov	r0, #0
   11dd8:	mov	r1, r6
   11ddc:	bl	10fcc <error@plt>
   11de0:	mov	r0, r5
   11de4:	pop	{r4, r5, r6, sl, fp, pc}
   11de8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11dec:	add	fp, sp, #24
   11df0:	mov	r8, r2
   11df4:	mov	r5, r1
   11df8:	mov	r1, #0
   11dfc:	str	r1, [r5]
   11e00:	str	r1, [r2]
   11e04:	sub	r7, r0, #1
   11e08:	bl	11050 <__ctype_b_loc@plt>
   11e0c:	mov	r9, r0
   11e10:	ldr	r6, [r0]
   11e14:	ldrb	r0, [r7, #1]!
   11e18:	bl	120e8 <close@plt+0xfb4>
   11e1c:	add	r1, r6, r0, lsl #1
   11e20:	ldrb	r1, [r1, #1]
   11e24:	tst	r1, #32
   11e28:	bne	11e14 <close@plt+0xce0>
   11e2c:	cmp	r0, #0
   11e30:	cmpne	r0, #35	; 0x23
   11e34:	bne	11e3c <close@plt+0xd08>
   11e38:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11e3c:	mov	r4, r7
   11e40:	ldrb	r0, [r4], #1
   11e44:	bl	120e8 <close@plt+0xfb4>
   11e48:	cmp	r0, #0
   11e4c:	beq	11e60 <close@plt+0xd2c>
   11e50:	add	r0, r6, r0, lsl #1
   11e54:	ldrh	r0, [r0]
   11e58:	ands	r0, r0, #8192	; 0x2000
   11e5c:	beq	11e40 <close@plt+0xd0c>
   11e60:	sub	r0, r4, #1
   11e64:	sub	r1, r0, r7
   11e68:	mov	r0, r7
   11e6c:	bl	14e08 <_obstack_memory_used@@Base+0x2484>
   11e70:	str	r0, [r5]
   11e74:	ldrb	r0, [r4, #-1]
   11e78:	cmp	r0, #0
   11e7c:	beq	11e38 <close@plt+0xd04>
   11e80:	ldr	r6, [r9]
   11e84:	ldrb	r0, [r4], #1
   11e88:	bl	120e8 <close@plt+0xfb4>
   11e8c:	add	r1, r6, r0, lsl #1
   11e90:	ldrb	r1, [r1, #1]
   11e94:	tst	r1, #32
   11e98:	bne	11e84 <close@plt+0xd50>
   11e9c:	cmp	r0, #0
   11ea0:	cmpne	r0, #35	; 0x23
   11ea4:	beq	11e38 <close@plt+0xd04>
   11ea8:	sub	r5, r4, #1
   11eac:	b	11eb4 <close@plt+0xd80>
   11eb0:	add	r4, r4, #1
   11eb4:	ldrb	r0, [r4, #-1]
   11eb8:	cmp	r0, #35	; 0x23
   11ebc:	cmpne	r0, #0
   11ec0:	bne	11eb0 <close@plt+0xd7c>
   11ec4:	ldrb	r0, [r4, #-2]
   11ec8:	bl	120e8 <close@plt+0xfb4>
   11ecc:	add	r0, r6, r0, lsl #1
   11ed0:	ldrb	r0, [r0, #1]
   11ed4:	sub	r4, r4, #1
   11ed8:	tst	r0, #32
   11edc:	bne	11ec4 <close@plt+0xd90>
   11ee0:	sub	r1, r4, r5
   11ee4:	mov	r0, r5
   11ee8:	bl	14e08 <_obstack_memory_used@@Base+0x2484>
   11eec:	str	r0, [r8]
   11ef0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11ef4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11ef8:	add	fp, sp, #24
   11efc:	mov	r4, r0
   11f00:	mov	r0, #1
   11f04:	movw	r5, #33116	; 0x815c
   11f08:	movt	r5, #2
   11f0c:	mov	r8, #39	; 0x27
   11f10:	mov	r7, #92	; 0x5c
   11f14:	b	11f30 <close@plt+0xdfc>
   11f18:	ldrb	r0, [r4], #1
   11f1c:	ldr	r1, [r5, #12]
   11f20:	add	r2, r1, #1
   11f24:	str	r2, [r5, #12]
   11f28:	strb	r0, [r1]
   11f2c:	mov	r0, r6
   11f30:	ldrb	r1, [r4]
   11f34:	sub	r2, r1, #58	; 0x3a
   11f38:	cmp	r2, #36	; 0x24
   11f3c:	bhi	12024 <close@plt+0xef0>
   11f40:	add	r1, pc, #4
   11f44:	mov	r6, #1
   11f48:	ldr	pc, [r1, r2, lsl #2]
   11f4c:	andeq	r1, r1, r0, ror #31
   11f50:	andeq	r2, r1, r4, asr #1
   11f54:	andeq	r2, r1, r4, asr #1
   11f58:	andeq	r1, r1, r0, ror #31
   11f5c:	andeq	r2, r1, r4, asr #1
   11f60:	andeq	r2, r1, r4, asr #1
   11f64:	andeq	r2, r1, r4, asr #1
   11f68:	andeq	r2, r1, r4, asr #1
   11f6c:	andeq	r2, r1, r4, asr #1
   11f70:	andeq	r2, r1, r4, asr #1
   11f74:	andeq	r2, r1, r4, asr #1
   11f78:	andeq	r2, r1, r4, asr #1
   11f7c:	andeq	r2, r1, r4, asr #1
   11f80:	andeq	r2, r1, r4, asr #1
   11f84:	andeq	r2, r1, r4, asr #1
   11f88:	andeq	r2, r1, r4, asr #1
   11f8c:	andeq	r2, r1, r4, asr #1
   11f90:	andeq	r2, r1, r4, asr #1
   11f94:	andeq	r2, r1, r4, asr #1
   11f98:	andeq	r2, r1, r4, asr #1
   11f9c:	andeq	r2, r1, r4, asr #1
   11fa0:	andeq	r2, r1, r4, asr #1
   11fa4:	andeq	r2, r1, r4, asr #1
   11fa8:	andeq	r2, r1, r4, asr #1
   11fac:	andeq	r2, r1, r4, asr #1
   11fb0:	andeq	r2, r1, r4, asr #1
   11fb4:	andeq	r2, r1, r4, asr #1
   11fb8:	andeq	r2, r1, r4, asr #1
   11fbc:	andeq	r2, r1, r4, asr #1
   11fc0:	andeq	r2, r1, r4, asr #1
   11fc4:	andeq	r2, r1, r4, asr #1
   11fc8:	andeq	r2, r1, r4, asr #1
   11fcc:	andeq	r2, r1, r4, asr #1
   11fd0:	andeq	r2, r1, r4, asr #1
   11fd4:	andeq	r2, r1, ip, lsl r0
   11fd8:	andeq	r2, r1, r4, asr #1
   11fdc:	andeq	r2, r1, ip, lsl r0
   11fe0:	tst	r0, #1
   11fe4:	mov	r6, #1
   11fe8:	beq	120c4 <close@plt+0xf90>
   11fec:	ldr	r0, [r5, #12]
   11ff0:	ldr	r1, [r5, #16]
   11ff4:	cmp	r1, r0
   11ff8:	bne	12008 <close@plt+0xed4>
   11ffc:	mov	r0, r5
   12000:	mov	r1, #1
   12004:	bl	12770 <_obstack_newchunk@@Base>
   12008:	ldr	r0, [r5, #12]
   1200c:	add	r1, r0, #1
   12010:	str	r1, [r5, #12]
   12014:	strb	r7, [r0]
   12018:	b	120c0 <close@plt+0xf8c>
   1201c:	eor	r6, r0, #1
   12020:	b	120c4 <close@plt+0xf90>
   12024:	cmp	r1, #39	; 0x27
   12028:	beq	1203c <close@plt+0xf08>
   1202c:	cmp	r1, #0
   12030:	mov	r6, #1
   12034:	bne	120c4 <close@plt+0xf90>
   12038:	b	120e4 <close@plt+0xfb0>
   1203c:	ldr	r0, [r5, #12]
   12040:	ldr	r1, [r5, #16]
   12044:	cmp	r1, r0
   12048:	bne	12058 <close@plt+0xf24>
   1204c:	mov	r0, r5
   12050:	mov	r1, #1
   12054:	bl	12770 <_obstack_newchunk@@Base>
   12058:	ldr	r0, [r5, #12]
   1205c:	add	r1, r0, #1
   12060:	str	r1, [r5, #12]
   12064:	strb	r8, [r0]
   12068:	ldr	r0, [r5, #12]
   1206c:	ldr	r1, [r5, #16]
   12070:	cmp	r1, r0
   12074:	bne	12084 <close@plt+0xf50>
   12078:	mov	r0, r5
   1207c:	mov	r1, #1
   12080:	bl	12770 <_obstack_newchunk@@Base>
   12084:	ldr	r0, [r5, #12]
   12088:	add	r1, r0, #1
   1208c:	str	r1, [r5, #12]
   12090:	strb	r7, [r0]
   12094:	ldr	r0, [r5, #12]
   12098:	ldr	r1, [r5, #16]
   1209c:	cmp	r1, r0
   120a0:	bne	120b0 <close@plt+0xf7c>
   120a4:	mov	r0, r5
   120a8:	mov	r1, #1
   120ac:	bl	12770 <_obstack_newchunk@@Base>
   120b0:	ldr	r0, [r5, #12]
   120b4:	add	r1, r0, #1
   120b8:	str	r1, [r5, #12]
   120bc:	strb	r8, [r0]
   120c0:	mov	r6, #1
   120c4:	ldr	r0, [r5, #12]
   120c8:	ldr	r1, [r5, #16]
   120cc:	cmp	r1, r0
   120d0:	bne	11f18 <close@plt+0xde4>
   120d4:	mov	r0, r5
   120d8:	mov	r1, #1
   120dc:	bl	12770 <_obstack_newchunk@@Base>
   120e0:	b	11f18 <close@plt+0xde4>
   120e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   120e8:	bx	lr
   120ec:	sub	r0, r0, #1
   120f0:	ldrb	r3, [r0, #1]!
   120f4:	cmp	r3, #47	; 0x2f
   120f8:	beq	120f0 <close@plt+0xfbc>
   120fc:	mov	r2, #0
   12100:	mov	r1, r0
   12104:	b	12110 <close@plt+0xfdc>
   12108:	mov	r2, #1
   1210c:	ldrb	r3, [r1, #1]!
   12110:	uxtb	r3, r3
   12114:	cmp	r3, #47	; 0x2f
   12118:	beq	12108 <close@plt+0xfd4>
   1211c:	cmp	r3, #0
   12120:	bxeq	lr
   12124:	tst	r2, #1
   12128:	movne	r0, r1
   1212c:	mov	r2, #0
   12130:	ldrb	r3, [r1, #1]!
   12134:	b	12110 <close@plt+0xfdc>
   12138:	push	{r4, sl, fp, lr}
   1213c:	add	fp, sp, #8
   12140:	mov	r4, r0
   12144:	bl	11074 <strlen@plt>
   12148:	mov	r1, r0
   1214c:	sub	r2, r4, #1
   12150:	mov	r0, r1
   12154:	cmp	r1, #2
   12158:	bcc	1216c <close@plt+0x1038>
   1215c:	ldrb	r3, [r2, r0]
   12160:	sub	r1, r0, #1
   12164:	cmp	r3, #47	; 0x2f
   12168:	beq	12150 <close@plt+0x101c>
   1216c:	pop	{r4, sl, fp, pc}
   12170:	push	{r4, r5, r6, sl, fp, lr}
   12174:	add	fp, sp, #16
   12178:	cmp	r0, r1
   1217c:	beq	121c8 <close@plt+0x1094>
   12180:	mov	r4, r1
   12184:	mov	r5, r0
   12188:	ldrb	r0, [r5]
   1218c:	bl	15278 <_obstack_memory_used@@Base+0x28f4>
   12190:	mov	r6, r0
   12194:	ldrb	r0, [r4]
   12198:	bl	15278 <_obstack_memory_used@@Base+0x28f4>
   1219c:	uxtb	r1, r6
   121a0:	cmp	r1, #0
   121a4:	beq	121bc <close@plt+0x1088>
   121a8:	add	r4, r4, #1
   121ac:	add	r5, r5, #1
   121b0:	uxtb	r2, r0
   121b4:	cmp	r1, r2
   121b8:	beq	12188 <close@plt+0x1054>
   121bc:	uxtb	r0, r0
   121c0:	sub	r0, r1, r0
   121c4:	pop	{r4, r5, r6, sl, fp, pc}
   121c8:	mov	r0, #0
   121cc:	pop	{r4, r5, r6, sl, fp, pc}
   121d0:	movw	r1, #33160	; 0x8188
   121d4:	movt	r1, #2
   121d8:	str	r0, [r1]
   121dc:	bx	lr
   121e0:	movw	r1, #33164	; 0x818c
   121e4:	movt	r1, #2
   121e8:	strb	r0, [r1]
   121ec:	bx	lr
   121f0:	push	{r4, r5, r6, sl, fp, lr}
   121f4:	add	fp, sp, #16
   121f8:	sub	sp, sp, #8
   121fc:	movw	r0, #33108	; 0x8154
   12200:	movt	r0, #2
   12204:	ldr	r0, [r0]
   12208:	bl	15298 <_obstack_memory_used@@Base+0x2914>
   1220c:	cmp	r0, #0
   12210:	beq	12238 <close@plt+0x1104>
   12214:	movw	r0, #33164	; 0x818c
   12218:	movt	r0, #2
   1221c:	ldrb	r0, [r0]
   12220:	cmp	r0, #0
   12224:	beq	12258 <close@plt+0x1124>
   12228:	bl	11080 <__errno_location@plt>
   1222c:	ldr	r0, [r0]
   12230:	cmp	r0, #32
   12234:	bne	12258 <close@plt+0x1124>
   12238:	movw	r0, #33096	; 0x8148
   1223c:	movt	r0, #2
   12240:	ldr	r0, [r0]
   12244:	bl	15298 <_obstack_memory_used@@Base+0x2914>
   12248:	cmp	r0, #0
   1224c:	subeq	sp, fp, #16
   12250:	popeq	{r4, r5, r6, sl, fp, pc}
   12254:	b	122c8 <close@plt+0x1194>
   12258:	movw	r1, #28615	; 0x6fc7
   1225c:	movt	r1, #1
   12260:	mov	r0, #0
   12264:	mov	r2, #5
   12268:	bl	10f48 <dcgettext@plt>
   1226c:	mov	r4, r0
   12270:	movw	r0, #33160	; 0x8188
   12274:	movt	r0, #2
   12278:	ldr	r6, [r0]
   1227c:	bl	11080 <__errno_location@plt>
   12280:	ldr	r5, [r0]
   12284:	cmp	r6, #0
   12288:	bne	122a4 <close@plt+0x1170>
   1228c:	movw	r2, #28631	; 0x6fd7
   12290:	movt	r2, #1
   12294:	mov	r0, #0
   12298:	mov	r1, r5
   1229c:	mov	r3, r4
   122a0:	b	122c4 <close@plt+0x1190>
   122a4:	mov	r0, r6
   122a8:	bl	140a0 <_obstack_memory_used@@Base+0x171c>
   122ac:	mov	r3, r0
   122b0:	str	r4, [sp]
   122b4:	movw	r2, #28627	; 0x6fd3
   122b8:	movt	r2, #1
   122bc:	mov	r0, #0
   122c0:	mov	r1, r5
   122c4:	bl	10fcc <error@plt>
   122c8:	movw	r0, #33004	; 0x80ec
   122cc:	movt	r0, #2
   122d0:	ldr	r0, [r0]
   122d4:	bl	10f18 <_exit@plt>
   122d8:	push	{r4, r5, fp, lr}
   122dc:	add	fp, sp, #8
   122e0:	sub	sp, sp, #8
   122e4:	mov	r4, r0
   122e8:	bl	110b0 <fileno@plt>
   122ec:	cmn	r0, #1
   122f0:	ble	12368 <close@plt+0x1234>
   122f4:	mov	r0, r4
   122f8:	bl	11020 <__freading@plt>
   122fc:	cmp	r0, #0
   12300:	beq	1232c <close@plt+0x11f8>
   12304:	mov	r0, r4
   12308:	bl	110b0 <fileno@plt>
   1230c:	mov	r1, #1
   12310:	str	r1, [sp]
   12314:	mov	r2, #0
   12318:	mov	r3, #0
   1231c:	bl	10f90 <lseek64@plt>
   12320:	and	r0, r0, r1
   12324:	cmn	r0, #1
   12328:	beq	12368 <close@plt+0x1234>
   1232c:	mov	r0, r4
   12330:	bl	12378 <close@plt+0x1244>
   12334:	cmp	r0, #0
   12338:	beq	12368 <close@plt+0x1234>
   1233c:	bl	11080 <__errno_location@plt>
   12340:	ldr	r5, [r0]
   12344:	mov	r0, r4
   12348:	bl	110c8 <fclose@plt>
   1234c:	cmp	r5, #0
   12350:	beq	12360 <close@plt+0x122c>
   12354:	bl	11080 <__errno_location@plt>
   12358:	str	r5, [r0]
   1235c:	mvn	r0, #0
   12360:	sub	sp, fp, #8
   12364:	pop	{r4, r5, fp, pc}
   12368:	mov	r0, r4
   1236c:	sub	sp, fp, #8
   12370:	pop	{r4, r5, fp, lr}
   12374:	b	110c8 <fclose@plt>
   12378:	push	{r4, sl, fp, lr}
   1237c:	add	fp, sp, #8
   12380:	mov	r4, r0
   12384:	cmp	r0, #0
   12388:	beq	123a0 <close@plt+0x126c>
   1238c:	mov	r0, r4
   12390:	bl	11020 <__freading@plt>
   12394:	cmp	r0, #0
   12398:	movne	r0, r4
   1239c:	blne	123ac <close@plt+0x1278>
   123a0:	mov	r0, r4
   123a4:	pop	{r4, sl, fp, lr}
   123a8:	b	10f00 <fflush@plt>
   123ac:	push	{fp, lr}
   123b0:	mov	fp, sp
   123b4:	sub	sp, sp, #8
   123b8:	ldrb	r1, [r0, #1]
   123bc:	tst	r1, #1
   123c0:	beq	123d8 <close@plt+0x12a4>
   123c4:	mov	r1, #1
   123c8:	str	r1, [sp]
   123cc:	mov	r2, #0
   123d0:	mov	r3, #0
   123d4:	bl	125e0 <close@plt+0x14ac>
   123d8:	mov	sp, fp
   123dc:	pop	{fp, pc}
   123e0:	push	{r4, r5, r6, sl, fp, lr}
   123e4:	add	fp, sp, #16
   123e8:	mov	r4, r0
   123ec:	bl	11080 <__errno_location@plt>
   123f0:	mov	r5, r0
   123f4:	ldr	r6, [r0]
   123f8:	mov	r0, r4
   123fc:	bl	10f0c <free@plt>
   12400:	str	r6, [r5]
   12404:	pop	{r4, r5, r6, sl, fp, pc}
   12408:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1240c:	add	fp, sp, #28
   12410:	sub	sp, sp, #4
   12414:	mov	r4, r2
   12418:	mov	r8, r1
   1241c:	mov	r5, r0
   12420:	mov	r0, r2
   12424:	bl	110b0 <fileno@plt>
   12428:	mov	r6, #0
   1242c:	cmp	r0, #0
   12430:	beq	12470 <close@plt+0x133c>
   12434:	cmp	r0, #1
   12438:	beq	1247c <close@plt+0x1348>
   1243c:	cmp	r0, #2
   12440:	beq	12458 <close@plt+0x1324>
   12444:	mov	r0, #2
   12448:	mov	r1, #2
   1244c:	bl	10f54 <dup2@plt>
   12450:	subs	r6, r0, #2
   12454:	movwne	r6, #1
   12458:	mov	r0, #1
   1245c:	mov	r1, #1
   12460:	bl	10f54 <dup2@plt>
   12464:	subs	r7, r0, #1
   12468:	movwne	r7, #1
   1246c:	b	12480 <close@plt+0x134c>
   12470:	mov	r7, #0
   12474:	mov	r9, #0
   12478:	b	12530 <close@plt+0x13fc>
   1247c:	mov	r7, #0
   12480:	mov	sl, #0
   12484:	mov	r0, #0
   12488:	mov	r1, #0
   1248c:	bl	10f54 <dup2@plt>
   12490:	cmp	r0, #0
   12494:	mov	r9, #0
   12498:	beq	124b0 <close@plt+0x137c>
   1249c:	mov	r0, #0
   124a0:	bl	12594 <close@plt+0x1460>
   124a4:	mov	r9, #1
   124a8:	cmp	r0, #0
   124ac:	beq	1250c <close@plt+0x13d8>
   124b0:	cmp	r7, #0
   124b4:	beq	124cc <close@plt+0x1398>
   124b8:	mov	sl, #1
   124bc:	mov	r0, #1
   124c0:	bl	12594 <close@plt+0x1460>
   124c4:	cmp	r0, #0
   124c8:	beq	1250c <close@plt+0x13d8>
   124cc:	cmp	r6, #0
   124d0:	beq	12528 <close@plt+0x13f4>
   124d4:	mov	r0, #2
   124d8:	bl	12594 <close@plt+0x1460>
   124dc:	mov	r6, #1
   124e0:	cmp	r0, #0
   124e4:	bne	1252c <close@plt+0x13f8>
   124e8:	bl	11080 <__errno_location@plt>
   124ec:	mov	r4, r0
   124f0:	ldr	r8, [r0]
   124f4:	mov	r0, #2
   124f8:	bl	11134 <close@plt>
   124fc:	mov	r5, #0
   12500:	cmp	sl, #0
   12504:	bne	12568 <close@plt+0x1434>
   12508:	b	12570 <close@plt+0x143c>
   1250c:	bl	11080 <__errno_location@plt>
   12510:	mov	r4, r0
   12514:	ldr	r8, [r0]
   12518:	mov	r5, #0
   1251c:	cmp	r6, #0
   12520:	bne	12558 <close@plt+0x1424>
   12524:	b	12560 <close@plt+0x142c>
   12528:	mov	r6, #0
   1252c:	mov	r7, sl
   12530:	mov	r0, r5
   12534:	mov	r1, r8
   12538:	mov	r2, r4
   1253c:	bl	11038 <freopen64@plt>
   12540:	mov	r5, r0
   12544:	bl	11080 <__errno_location@plt>
   12548:	mov	r4, r0
   1254c:	ldr	r8, [r0]
   12550:	cmp	r6, #0
   12554:	beq	12560 <close@plt+0x142c>
   12558:	mov	r0, #2
   1255c:	bl	11134 <close@plt>
   12560:	cmp	r7, #0
   12564:	beq	12570 <close@plt+0x143c>
   12568:	mov	r0, #1
   1256c:	bl	11134 <close@plt>
   12570:	cmp	r9, #0
   12574:	beq	12580 <close@plt+0x144c>
   12578:	mov	r0, #0
   1257c:	bl	11134 <close@plt>
   12580:	cmp	r5, #0
   12584:	streq	r8, [r4]
   12588:	mov	r0, r5
   1258c:	sub	sp, fp, #28
   12590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12594:	push	{r4, sl, fp, lr}
   12598:	add	fp, sp, #8
   1259c:	mov	r4, r0
   125a0:	movw	r0, #28634	; 0x6fda
   125a4:	movt	r0, #1
   125a8:	mov	r1, #0
   125ac:	bl	10fe4 <open64@plt>
   125b0:	mov	r1, #1
   125b4:	cmp	r0, r4
   125b8:	beq	125d8 <close@plt+0x14a4>
   125bc:	cmp	r0, #0
   125c0:	bmi	125d4 <close@plt+0x14a0>
   125c4:	bl	11134 <close@plt>
   125c8:	bl	11080 <__errno_location@plt>
   125cc:	mov	r1, #9
   125d0:	str	r1, [r0]
   125d4:	mov	r1, #0
   125d8:	mov	r0, r1
   125dc:	pop	{r4, sl, fp, pc}
   125e0:	push	{r4, r5, r6, r7, fp, lr}
   125e4:	add	fp, sp, #16
   125e8:	sub	sp, sp, #8
   125ec:	mov	r5, r3
   125f0:	mov	r6, r2
   125f4:	mov	r4, r0
   125f8:	ldr	r0, [r0, #4]
   125fc:	ldr	r1, [r4, #8]
   12600:	cmp	r1, r0
   12604:	bne	12620 <close@plt+0x14ec>
   12608:	ldrd	r0, [r4, #16]
   1260c:	cmp	r1, r0
   12610:	bne	12620 <close@plt+0x14ec>
   12614:	ldr	r0, [r4, #36]	; 0x24
   12618:	cmp	r0, #0
   1261c:	beq	12638 <close@plt+0x1504>
   12620:	mov	r0, r4
   12624:	mov	r2, r6
   12628:	mov	r3, r5
   1262c:	sub	sp, fp, #16
   12630:	pop	{r4, r5, r6, r7, fp, lr}
   12634:	b	110d4 <fseeko64@plt>
   12638:	ldr	r7, [fp, #8]
   1263c:	mov	r0, r4
   12640:	bl	110b0 <fileno@plt>
   12644:	str	r7, [sp]
   12648:	mov	r2, r6
   1264c:	mov	r3, r5
   12650:	bl	10f90 <lseek64@plt>
   12654:	and	r2, r0, r1
   12658:	cmn	r2, #1
   1265c:	beq	1267c <close@plt+0x1548>
   12660:	strd	r0, [r4, #80]	; 0x50
   12664:	ldr	r0, [r4]
   12668:	bic	r0, r0, #16
   1266c:	str	r0, [r4]
   12670:	mov	r0, #0
   12674:	sub	sp, fp, #16
   12678:	pop	{r4, r5, r6, r7, fp, pc}
   1267c:	mvn	r0, #0
   12680:	sub	sp, fp, #16
   12684:	pop	{r4, r5, r6, r7, fp, pc}

00012688 <_obstack_begin@@Base>:
   12688:	push	{fp, lr}
   1268c:	mov	fp, sp
   12690:	str	r3, [r0, #28]
   12694:	ldr	r3, [fp, #8]
   12698:	str	r3, [r0, #32]
   1269c:	ldrb	r3, [r0, #40]	; 0x28
   126a0:	and	r3, r3, #254	; 0xfe
   126a4:	strb	r3, [r0, #40]	; 0x28
   126a8:	bl	126b4 <_obstack_begin@@Base+0x2c>
   126ac:	mov	r0, #1
   126b0:	pop	{fp, pc}
   126b4:	push	{r4, r5, r6, sl, fp, lr}
   126b8:	add	fp, sp, #16
   126bc:	mov	r5, r2
   126c0:	mov	r4, r0
   126c4:	cmp	r1, #0
   126c8:	movweq	r1, #4072	; 0xfe8
   126cc:	str	r1, [r0]
   126d0:	cmp	r2, #0
   126d4:	movweq	r5, #8
   126d8:	sub	r6, r5, #1
   126dc:	str	r6, [r0, #24]
   126e0:	bl	12888 <_obstack_newchunk@@Base+0x118>
   126e4:	str	r0, [r4, #4]
   126e8:	cmp	r0, #0
   126ec:	addne	r1, r0, r6
   126f0:	addne	r1, r1, #8
   126f4:	rsbne	r2, r5, #0
   126f8:	andne	r1, r1, r2
   126fc:	strne	r1, [r4, #12]
   12700:	strne	r1, [r4, #8]
   12704:	ldrne	r1, [r4]
   12708:	addne	r1, r0, r1
   1270c:	strne	r1, [r0]
   12710:	strne	r1, [r4, #16]
   12714:	movne	r1, #0
   12718:	strne	r1, [r0, #4]
   1271c:	ldrbne	r0, [r4, #40]	; 0x28
   12720:	andne	r0, r0, #249	; 0xf9
   12724:	strbne	r0, [r4, #40]	; 0x28
   12728:	popne	{r4, r5, r6, sl, fp, pc}
   1272c:	movw	r0, #33008	; 0x80f0
   12730:	movt	r0, #2
   12734:	ldr	r0, [r0]
   12738:	blx	r0

0001273c <_obstack_begin_1@@Base>:
   1273c:	push	{fp, lr}
   12740:	mov	fp, sp
   12744:	str	r3, [r0, #28]
   12748:	ldr	r3, [fp, #12]
   1274c:	str	r3, [r0, #36]	; 0x24
   12750:	ldr	r3, [fp, #8]
   12754:	str	r3, [r0, #32]
   12758:	ldrb	r3, [r0, #40]	; 0x28
   1275c:	orr	r3, r3, #1
   12760:	strb	r3, [r0, #40]	; 0x28
   12764:	bl	126b4 <_obstack_begin@@Base+0x2c>
   12768:	mov	r0, #1
   1276c:	pop	{fp, pc}

00012770 <_obstack_newchunk@@Base>:
   12770:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12774:	add	fp, sp, #28
   12778:	sub	sp, sp, #4
   1277c:	mov	r4, r0
   12780:	ldr	r2, [r0]
   12784:	ldr	r0, [r0, #8]
   12788:	ldr	r3, [r4, #12]
   1278c:	sub	sl, r3, r0
   12790:	add	r1, sl, r1
   12794:	ldr	r0, [r4, #24]
   12798:	mov	r3, #0
   1279c:	adds	r7, r1, r0
   127a0:	adc	r0, r3, #0
   127a4:	mov	r3, #100	; 0x64
   127a8:	add	r3, r3, sl, lsr #3
   127ac:	adds	r6, r3, r7
   127b0:	movcs	r6, r7
   127b4:	cmp	r6, r2
   127b8:	movcc	r6, r2
   127bc:	cmp	r1, sl
   127c0:	bcc	12878 <_obstack_newchunk@@Base+0x108>
   127c4:	cmp	r0, #0
   127c8:	bne	12878 <_obstack_newchunk@@Base+0x108>
   127cc:	ldr	r8, [r4, #4]
   127d0:	mov	r0, r4
   127d4:	mov	r1, r6
   127d8:	bl	12888 <_obstack_newchunk@@Base+0x118>
   127dc:	cmp	r0, #0
   127e0:	beq	12878 <_obstack_newchunk@@Base+0x108>
   127e4:	mov	r7, r0
   127e8:	str	r0, [r4, #4]
   127ec:	str	r8, [r0, #4]
   127f0:	add	r0, r0, r6
   127f4:	str	r0, [r4, #16]
   127f8:	str	r0, [r7]
   127fc:	ldr	r9, [r4, #8]
   12800:	ldr	r5, [r4, #24]
   12804:	add	r0, r7, r5
   12808:	add	r0, r0, #8
   1280c:	bic	r6, r0, r5
   12810:	mov	r0, r6
   12814:	mov	r1, r9
   12818:	mov	r2, sl
   1281c:	bl	10f24 <memcpy@plt>
   12820:	ldrb	r0, [r4, #40]	; 0x28
   12824:	tst	r0, #2
   12828:	bne	12858 <_obstack_newchunk@@Base+0xe8>
   1282c:	mvn	r0, r5
   12830:	add	r1, r8, r5
   12834:	add	r1, r1, #8
   12838:	and	r0, r1, r0
   1283c:	cmp	r9, r0
   12840:	bne	12858 <_obstack_newchunk@@Base+0xe8>
   12844:	ldr	r0, [r8, #4]
   12848:	str	r0, [r7, #4]
   1284c:	mov	r0, r4
   12850:	mov	r1, r8
   12854:	bl	128ac <_obstack_newchunk@@Base+0x13c>
   12858:	add	r0, r6, sl
   1285c:	str	r6, [r4, #8]
   12860:	str	r0, [r4, #12]
   12864:	ldrb	r0, [r4, #40]	; 0x28
   12868:	and	r0, r0, #253	; 0xfd
   1286c:	strb	r0, [r4, #40]	; 0x28
   12870:	sub	sp, fp, #28
   12874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12878:	movw	r0, #33008	; 0x80f0
   1287c:	movt	r0, #2
   12880:	ldr	r0, [r0]
   12884:	blx	r0
   12888:	ldrb	r2, [r0, #40]	; 0x28
   1288c:	tst	r2, #1
   12890:	bne	128a0 <_obstack_newchunk@@Base+0x130>
   12894:	ldr	r2, [r0, #28]
   12898:	mov	r0, r1
   1289c:	bx	r2
   128a0:	ldr	r2, [r0, #28]
   128a4:	ldr	r0, [r0, #36]	; 0x24
   128a8:	bx	r2
   128ac:	ldrb	r2, [r0, #40]	; 0x28
   128b0:	tst	r2, #1
   128b4:	bne	128c4 <_obstack_newchunk@@Base+0x154>
   128b8:	ldr	r2, [r0, #32]
   128bc:	mov	r0, r1
   128c0:	bx	r2
   128c4:	ldr	r2, [r0, #32]
   128c8:	ldr	r0, [r0, #36]	; 0x24
   128cc:	bx	r2

000128d0 <_obstack_allocated_p@@Base>:
   128d0:	ldr	r2, [r0, #4]
   128d4:	mov	r0, #0
   128d8:	b	128e0 <_obstack_allocated_p@@Base+0x10>
   128dc:	ldr	r2, [r2, #4]
   128e0:	cmp	r2, #0
   128e4:	bxeq	lr
   128e8:	cmp	r2, r1
   128ec:	bcs	128dc <_obstack_allocated_p@@Base+0xc>
   128f0:	ldr	r3, [r2]
   128f4:	cmp	r3, r1
   128f8:	bcc	128dc <_obstack_allocated_p@@Base+0xc>
   128fc:	mov	r0, #1
   12900:	bx	lr

00012904 <_obstack_free@@Base>:
   12904:	push	{r4, r5, r6, sl, fp, lr}
   12908:	add	fp, sp, #16
   1290c:	mov	r5, r1
   12910:	ldr	r1, [r0, #4]
   12914:	cmp	r1, #0
   12918:	beq	12978 <_obstack_free@@Base+0x74>
   1291c:	mov	r4, r0
   12920:	cmp	r1, r5
   12924:	bcc	12954 <_obstack_free@@Base+0x50>
   12928:	ldr	r6, [r1, #4]
   1292c:	mov	r0, r4
   12930:	bl	128ac <_obstack_newchunk@@Base+0x13c>
   12934:	ldrb	r0, [r4, #40]	; 0x28
   12938:	orr	r0, r0, #2
   1293c:	strb	r0, [r4, #40]	; 0x28
   12940:	cmp	r6, #0
   12944:	mov	r1, r6
   12948:	beq	12978 <_obstack_free@@Base+0x74>
   1294c:	cmp	r1, r5
   12950:	bcs	12928 <_obstack_free@@Base+0x24>
   12954:	ldr	r0, [r1]
   12958:	cmp	r0, r5
   1295c:	bcc	12928 <_obstack_free@@Base+0x24>
   12960:	str	r5, [r4, #8]
   12964:	str	r5, [r4, #12]
   12968:	ldr	r0, [r1]
   1296c:	str	r1, [r4, #4]
   12970:	str	r0, [r4, #16]
   12974:	pop	{r4, r5, r6, sl, fp, pc}
   12978:	cmp	r5, #0
   1297c:	popeq	{r4, r5, r6, sl, fp, pc}
   12980:	bl	11128 <abort@plt>

00012984 <_obstack_memory_used@@Base>:
   12984:	ldr	r1, [r0, #4]
   12988:	mov	r0, #0
   1298c:	b	129a0 <_obstack_memory_used@@Base+0x1c>
   12990:	sub	r0, r0, r1
   12994:	ldr	r2, [r1]
   12998:	ldr	r1, [r1, #4]
   1299c:	add	r0, r0, r2
   129a0:	cmp	r1, #0
   129a4:	bxeq	lr
   129a8:	b	12990 <_obstack_memory_used@@Base+0xc>
   129ac:	push	{fp, lr}
   129b0:	mov	fp, sp
   129b4:	movw	r0, #33096	; 0x8148
   129b8:	movt	r0, #2
   129bc:	ldr	r4, [r0]
   129c0:	movw	r1, #28644	; 0x6fe4
   129c4:	movt	r1, #1
   129c8:	mov	r0, #0
   129cc:	mov	r2, #5
   129d0:	bl	10f48 <dcgettext@plt>
   129d4:	mov	r3, r0
   129d8:	movw	r2, #28912	; 0x70f0
   129dc:	movt	r2, #1
   129e0:	mov	r0, r4
   129e4:	mov	r1, #1
   129e8:	bl	110bc <__fprintf_chk@plt>
   129ec:	movw	r0, #33004	; 0x80ec
   129f0:	movt	r0, #2
   129f4:	ldr	r0, [r0]
   129f8:	bl	1105c <exit@plt>
   129fc:	push	{r4, r5, fp, lr}
   12a00:	add	fp, sp, #8
   12a04:	cmp	r0, #0
   12a08:	beq	12a9c <_obstack_memory_used@@Base+0x118>
   12a0c:	mov	r4, r0
   12a10:	mov	r1, #47	; 0x2f
   12a14:	bl	110ec <strrchr@plt>
   12a18:	cmp	r0, #0
   12a1c:	mov	r5, r4
   12a20:	addne	r5, r0, #1
   12a24:	sub	r0, r5, r4
   12a28:	cmp	r0, #7
   12a2c:	blt	12a80 <_obstack_memory_used@@Base+0xfc>
   12a30:	sub	r0, r5, #7
   12a34:	movw	r1, #28717	; 0x702d
   12a38:	movt	r1, #1
   12a3c:	mov	r2, #7
   12a40:	bl	1111c <strncmp@plt>
   12a44:	cmp	r0, #0
   12a48:	bne	12a80 <_obstack_memory_used@@Base+0xfc>
   12a4c:	movw	r1, #28725	; 0x7035
   12a50:	movt	r1, #1
   12a54:	mov	r0, r5
   12a58:	mov	r2, #3
   12a5c:	bl	1111c <strncmp@plt>
   12a60:	cmp	r0, #0
   12a64:	beq	12a70 <_obstack_memory_used@@Base+0xec>
   12a68:	mov	r4, r5
   12a6c:	b	12a80 <_obstack_memory_used@@Base+0xfc>
   12a70:	add	r4, r5, #3
   12a74:	movw	r0, #33080	; 0x8138
   12a78:	movt	r0, #2
   12a7c:	str	r4, [r0]
   12a80:	movw	r0, #33084	; 0x813c
   12a84:	movt	r0, #2
   12a88:	str	r4, [r0]
   12a8c:	movw	r0, #33168	; 0x8190
   12a90:	movt	r0, #2
   12a94:	str	r4, [r0]
   12a98:	pop	{r4, r5, fp, pc}
   12a9c:	movw	r0, #33096	; 0x8148
   12aa0:	movt	r0, #2
   12aa4:	ldr	r3, [r0]
   12aa8:	movw	r0, #28661	; 0x6ff5
   12aac:	movt	r0, #1
   12ab0:	mov	r1, #55	; 0x37
   12ab4:	mov	r2, #1
   12ab8:	bl	10f84 <fwrite@plt>
   12abc:	bl	11128 <abort@plt>
   12ac0:	push	{r4, r5, r6, sl, fp, lr}
   12ac4:	add	fp, sp, #16
   12ac8:	mov	r4, r0
   12acc:	movw	r0, #33176	; 0x8198
   12ad0:	movt	r0, #2
   12ad4:	cmp	r4, #0
   12ad8:	moveq	r4, r0
   12adc:	bl	11080 <__errno_location@plt>
   12ae0:	mov	r5, r0
   12ae4:	ldr	r6, [r0]
   12ae8:	mov	r0, r4
   12aec:	mov	r1, #48	; 0x30
   12af0:	bl	14db8 <_obstack_memory_used@@Base+0x2434>
   12af4:	str	r6, [r5]
   12af8:	pop	{r4, r5, r6, sl, fp, pc}
   12afc:	movw	r1, #33176	; 0x8198
   12b00:	movt	r1, #2
   12b04:	cmp	r0, #0
   12b08:	movne	r1, r0
   12b0c:	ldr	r0, [r1]
   12b10:	bx	lr
   12b14:	movw	r2, #33176	; 0x8198
   12b18:	movt	r2, #2
   12b1c:	cmp	r0, #0
   12b20:	movne	r2, r0
   12b24:	str	r1, [r2]
   12b28:	bx	lr
   12b2c:	movw	r3, #33176	; 0x8198
   12b30:	movt	r3, #2
   12b34:	cmp	r0, #0
   12b38:	movne	r3, r0
   12b3c:	ubfx	r0, r1, #5, #3
   12b40:	add	ip, r3, r0, lsl #2
   12b44:	ldr	r3, [ip, #8]
   12b48:	and	r1, r1, #31
   12b4c:	mov	r0, #1
   12b50:	and	r0, r0, r3, lsr r1
   12b54:	and	r2, r2, #1
   12b58:	eor	r2, r0, r2
   12b5c:	eor	r1, r3, r2, lsl r1
   12b60:	str	r1, [ip, #8]
   12b64:	bx	lr
   12b68:	movw	r2, #33176	; 0x8198
   12b6c:	movt	r2, #2
   12b70:	cmp	r0, #0
   12b74:	movne	r2, r0
   12b78:	ldr	r0, [r2, #4]
   12b7c:	str	r1, [r2, #4]
   12b80:	bx	lr
   12b84:	push	{fp, lr}
   12b88:	mov	fp, sp
   12b8c:	movw	r3, #33176	; 0x8198
   12b90:	movt	r3, #2
   12b94:	cmp	r0, #0
   12b98:	movne	r3, r0
   12b9c:	mov	r0, #10
   12ba0:	str	r0, [r3]
   12ba4:	cmp	r1, #0
   12ba8:	cmpne	r2, #0
   12bac:	bne	12bb4 <_obstack_memory_used@@Base+0x230>
   12bb0:	bl	11128 <abort@plt>
   12bb4:	str	r1, [r3, #40]	; 0x28
   12bb8:	str	r2, [r3, #44]	; 0x2c
   12bbc:	pop	{fp, pc}
   12bc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bc4:	add	fp, sp, #28
   12bc8:	sub	sp, sp, #20
   12bcc:	mov	r8, r3
   12bd0:	mov	r9, r2
   12bd4:	mov	sl, r1
   12bd8:	mov	r7, r0
   12bdc:	ldr	r0, [fp, #8]
   12be0:	movw	r5, #33176	; 0x8198
   12be4:	movt	r5, #2
   12be8:	cmp	r0, #0
   12bec:	movne	r5, r0
   12bf0:	bl	11080 <__errno_location@plt>
   12bf4:	mov	r4, r0
   12bf8:	ldm	r5, {r0, r1}
   12bfc:	ldr	r2, [r5, #40]	; 0x28
   12c00:	ldr	r3, [r5, #44]	; 0x2c
   12c04:	ldr	r6, [r4]
   12c08:	add	r5, r5, #8
   12c0c:	stm	sp, {r0, r1, r5}
   12c10:	str	r2, [sp, #12]
   12c14:	str	r3, [sp, #16]
   12c18:	mov	r0, r7
   12c1c:	mov	r1, sl
   12c20:	mov	r2, r9
   12c24:	mov	r3, r8
   12c28:	bl	12c38 <_obstack_memory_used@@Base+0x2b4>
   12c2c:	str	r6, [r4]
   12c30:	sub	sp, fp, #28
   12c34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c3c:	add	fp, sp, #28
   12c40:	sub	sp, sp, #156	; 0x9c
   12c44:	mov	r9, r3
   12c48:	mov	r7, r1
   12c4c:	mov	r6, r0
   12c50:	str	r2, [fp, #-80]	; 0xffffffb0
   12c54:	add	r0, r2, #1
   12c58:	str	r0, [sp, #76]	; 0x4c
   12c5c:	ldr	r0, [fp, #12]
   12c60:	and	r1, r0, #1
   12c64:	str	r1, [sp, #40]	; 0x28
   12c68:	and	r1, r0, #4
   12c6c:	str	r1, [sp, #36]	; 0x24
   12c70:	ubfx	r4, r0, #1, #1
   12c74:	bl	10f9c <__ctype_get_mb_cur_max@plt>
   12c78:	str	r0, [sp, #44]	; 0x2c
   12c7c:	ldr	r0, [fp, #24]
   12c80:	str	r0, [sp, #88]	; 0x58
   12c84:	ldr	r0, [fp, #20]
   12c88:	str	r0, [sp, #80]	; 0x50
   12c8c:	ldr	r1, [fp, #8]
   12c90:	mov	r0, #0
   12c94:	str	r0, [sp, #84]	; 0x54
   12c98:	mov	r0, #0
   12c9c:	str	r0, [fp, #-84]	; 0xffffffac
   12ca0:	mov	r0, #0
   12ca4:	str	r0, [fp, #-72]	; 0xffffffb8
   12ca8:	mov	r0, #0
   12cac:	mov	r2, #0
   12cb0:	str	r2, [fp, #-56]	; 0xffffffc8
   12cb4:	mov	r2, #0
   12cb8:	str	r2, [sp, #64]	; 0x40
   12cbc:	mov	r2, #1
   12cc0:	str	r2, [fp, #-48]	; 0xffffffd0
   12cc4:	cmp	r1, #10
   12cc8:	bhi	13bf4 <_obstack_memory_used@@Base+0x1270>
   12ccc:	mov	sl, r7
   12cd0:	mov	r7, r1
   12cd4:	add	r1, pc, #24
   12cd8:	mov	r8, #0
   12cdc:	mov	r2, #1
   12ce0:	mov	r3, #0
   12ce4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12ce8:	mov	lr, r9
   12cec:	mov	r5, r6
   12cf0:	ldr	pc, [r1, r7, lsl #2]
   12cf4:	andeq	r2, r1, r8, asr #27
   12cf8:	andeq	r2, r1, r8, lsl #28
   12cfc:	ldrdeq	r2, [r1], -r8
   12d00:	andeq	r2, r1, r0, asr #27
   12d04:	strdeq	r2, [r1], -ip
   12d08:	andeq	r2, r1, ip, asr lr
   12d0c:	andeq	r2, r1, r8, ror #27
   12d10:			; <UNDEFINED> instruction: 0x00012eb8
   12d14:	andeq	r2, r1, r0, lsr #26
   12d18:	andeq	r2, r1, r0, lsr #26
   12d1c:	andeq	r2, r1, ip, asr #26
   12d20:	movw	r0, #28801	; 0x7081
   12d24:	movt	r0, #1
   12d28:	mov	r1, r7
   12d2c:	bl	141fc <_obstack_memory_used@@Base+0x1878>
   12d30:	str	r0, [sp, #80]	; 0x50
   12d34:	movw	r0, #23003	; 0x59db
   12d38:	movt	r0, #1
   12d3c:	mov	r1, r7
   12d40:	bl	141fc <_obstack_memory_used@@Base+0x1878>
   12d44:	mov	r5, r6
   12d48:	str	r0, [sp, #88]	; 0x58
   12d4c:	mov	r8, #0
   12d50:	tst	r4, #1
   12d54:	str	r7, [fp, #-64]	; 0xffffffc0
   12d58:	bne	12d90 <_obstack_memory_used@@Base+0x40c>
   12d5c:	ldr	r0, [sp, #80]	; 0x50
   12d60:	ldrb	r0, [r0]
   12d64:	cmp	r0, #0
   12d68:	beq	12d90 <_obstack_memory_used@@Base+0x40c>
   12d6c:	ldr	r1, [sp, #80]	; 0x50
   12d70:	add	r1, r1, #1
   12d74:	mov	r8, #0
   12d78:	cmp	r8, sl
   12d7c:	strbcc	r0, [r5, r8]
   12d80:	ldrb	r0, [r1, r8]
   12d84:	add	r8, r8, #1
   12d88:	cmp	r0, #0
   12d8c:	bne	12d78 <_obstack_memory_used@@Base+0x3f4>
   12d90:	ldr	r7, [sp, #88]	; 0x58
   12d94:	mov	r0, r7
   12d98:	bl	11074 <strlen@plt>
   12d9c:	mov	r5, r6
   12da0:	str	r0, [fp, #-72]	; 0xffffffb8
   12da4:	str	r7, [fp, #-84]	; 0xffffffac
   12da8:	mov	r2, #1
   12dac:	mov	r3, r4
   12db0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12db4:	mov	lr, r9
   12db8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12dbc:	b	12eb8 <_obstack_memory_used@@Base+0x534>
   12dc0:	mov	r0, #1
   12dc4:	b	12e08 <_obstack_memory_used@@Base+0x484>
   12dc8:	mov	r7, #0
   12dcc:	mov	r8, #0
   12dd0:	mov	r2, r0
   12dd4:	b	12eb4 <_obstack_memory_used@@Base+0x530>
   12dd8:	tst	r4, #1
   12ddc:	bne	12e08 <_obstack_memory_used@@Base+0x484>
   12de0:	mov	r2, r0
   12de4:	b	12e30 <_obstack_memory_used@@Base+0x4ac>
   12de8:	mov	r0, #1
   12dec:	str	r0, [fp, #-72]	; 0xffffffb8
   12df0:	mov	r8, #0
   12df4:	mov	r7, #5
   12df8:	b	12e74 <_obstack_memory_used@@Base+0x4f0>
   12dfc:	mov	r2, #1
   12e00:	tst	r4, #1
   12e04:	beq	12e30 <_obstack_memory_used@@Base+0x4ac>
   12e08:	mov	r1, #1
   12e0c:	str	r1, [fp, #-72]	; 0xffffffb8
   12e10:	mov	r8, #0
   12e14:	mov	r7, #2
   12e18:	movw	r1, #23003	; 0x59db
   12e1c:	movt	r1, #1
   12e20:	str	r1, [fp, #-84]	; 0xffffffac
   12e24:	mov	r2, r0
   12e28:	mov	r3, #1
   12e2c:	b	12eb8 <_obstack_memory_used@@Base+0x534>
   12e30:	mov	r8, #1
   12e34:	mov	r7, #2
   12e38:	cmp	sl, #0
   12e3c:	movne	r0, #39	; 0x27
   12e40:	strbne	r0, [r5]
   12e44:	movw	r0, #23003	; 0x59db
   12e48:	movt	r0, #1
   12e4c:	str	r0, [fp, #-84]	; 0xffffffac
   12e50:	mov	r0, #1
   12e54:	str	r0, [fp, #-72]	; 0xffffffb8
   12e58:	b	12eb4 <_obstack_memory_used@@Base+0x530>
   12e5c:	mov	r7, #5
   12e60:	tst	r4, #1
   12e64:	beq	12e8c <_obstack_memory_used@@Base+0x508>
   12e68:	mov	r0, #1
   12e6c:	str	r0, [fp, #-72]	; 0xffffffb8
   12e70:	mov	r8, #0
   12e74:	movw	r0, #28799	; 0x707f
   12e78:	movt	r0, #1
   12e7c:	str	r0, [fp, #-84]	; 0xffffffac
   12e80:	mov	r2, #1
   12e84:	mov	r3, #1
   12e88:	b	12eb8 <_obstack_memory_used@@Base+0x534>
   12e8c:	cmp	sl, #0
   12e90:	movne	r0, #34	; 0x22
   12e94:	strbne	r0, [r5]
   12e98:	mov	r8, #1
   12e9c:	movw	r0, #28799	; 0x707f
   12ea0:	movt	r0, #1
   12ea4:	str	r0, [fp, #-84]	; 0xffffffac
   12ea8:	mov	r0, #1
   12eac:	str	r0, [fp, #-72]	; 0xffffffb8
   12eb0:	mov	r2, #1
   12eb4:	mov	r3, #0
   12eb8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12ebc:	cmp	r0, #0
   12ec0:	movwne	r0, #1
   12ec4:	and	r1, r0, r3
   12ec8:	and	r1, r2, r1
   12ecc:	str	r1, [sp, #56]	; 0x38
   12ed0:	sub	r1, r7, #2
   12ed4:	clz	r1, r1
   12ed8:	lsr	r1, r1, #5
   12edc:	and	r1, r1, r3
   12ee0:	str	r1, [sp, #68]	; 0x44
   12ee4:	str	r7, [fp, #-64]	; 0xffffffc0
   12ee8:	subs	r1, r7, #2
   12eec:	movwne	r1, #1
   12ef0:	eor	r4, r3, #1
   12ef4:	str	r4, [fp, #-88]	; 0xffffffa8
   12ef8:	orr	r4, r1, r4
   12efc:	str	r4, [sp, #72]	; 0x48
   12f00:	and	r1, r1, r2
   12f04:	and	r0, r0, r1
   12f08:	str	r0, [fp, #-60]	; 0xffffffc4
   12f0c:	str	r3, [fp, #-76]	; 0xffffffb4
   12f10:	orr	r0, r1, r3
   12f14:	eor	r0, r0, #1
   12f18:	ldr	r1, [fp, #16]
   12f1c:	clz	r1, r1
   12f20:	lsr	r1, r1, #5
   12f24:	orr	r0, r1, r0
   12f28:	str	r0, [fp, #-68]	; 0xffffffbc
   12f2c:	str	r2, [sp, #92]	; 0x5c
   12f30:	eor	r0, r2, #1
   12f34:	str	r0, [sp, #60]	; 0x3c
   12f38:	mov	r7, #0
   12f3c:	cmn	lr, #1
   12f40:	beq	12f50 <_obstack_memory_used@@Base+0x5cc>
   12f44:	cmp	r7, lr
   12f48:	bne	12f5c <_obstack_memory_used@@Base+0x5d8>
   12f4c:	b	13a68 <_obstack_memory_used@@Base+0x10e4>
   12f50:	ldrb	r0, [ip, r7]
   12f54:	cmp	r0, #0
   12f58:	beq	13a68 <_obstack_memory_used@@Base+0x10e4>
   12f5c:	mov	r9, #0
   12f60:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12f64:	cmp	r0, #0
   12f68:	beq	12f9c <_obstack_memory_used@@Base+0x618>
   12f6c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12f70:	add	r4, r7, r0
   12f74:	cmp	r0, #2
   12f78:	bcc	12f94 <_obstack_memory_used@@Base+0x610>
   12f7c:	cmn	lr, #1
   12f80:	bne	12f94 <_obstack_memory_used@@Base+0x610>
   12f84:	mov	r0, ip
   12f88:	bl	11074 <strlen@plt>
   12f8c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12f90:	mov	lr, r0
   12f94:	cmp	r4, lr
   12f98:	bls	12fa8 <_obstack_memory_used@@Base+0x624>
   12f9c:	mov	r0, #0
   12fa0:	str	r0, [fp, #-52]	; 0xffffffcc
   12fa4:	b	12fec <_obstack_memory_used@@Base+0x668>
   12fa8:	mov	r4, lr
   12fac:	add	r0, ip, r7
   12fb0:	ldr	r1, [fp, #-84]	; 0xffffffac
   12fb4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12fb8:	bl	11068 <bcmp@plt>
   12fbc:	cmp	r0, #0
   12fc0:	mov	r1, r0
   12fc4:	movwne	r1, #1
   12fc8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12fcc:	orr	r1, r1, r2
   12fd0:	tst	r1, #1
   12fd4:	beq	13b3c <_obstack_memory_used@@Base+0x11b8>
   12fd8:	clz	r0, r0
   12fdc:	lsr	r0, r0, #5
   12fe0:	str	r0, [fp, #-52]	; 0xffffffcc
   12fe4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12fe8:	mov	lr, r4
   12fec:	ldrb	r4, [ip, r7]
   12ff0:	cmp	r4, #126	; 0x7e
   12ff4:	bhi	13524 <_obstack_memory_used@@Base+0xba0>
   12ff8:	mov	r6, #1
   12ffc:	mov	r2, #110	; 0x6e
   13000:	mov	r0, #97	; 0x61
   13004:	add	r3, pc, #4
   13008:	mov	r1, #0
   1300c:	ldr	pc, [r3, r4, lsl #2]
   13010:	andeq	r3, r1, r4, lsl #7
   13014:	andeq	r3, r1, r4, lsr #10
   13018:	andeq	r3, r1, r4, lsr #10
   1301c:	andeq	r3, r1, r4, lsr #10
   13020:	andeq	r3, r1, r4, lsr #10
   13024:	andeq	r3, r1, r4, lsr #10
   13028:	andeq	r3, r1, r4, lsr #10
   1302c:	strdeq	r3, [r1], -r8
   13030:	andeq	r3, r1, r4, ror #6
   13034:	andeq	r3, r1, ip, asr r3
   13038:	andeq	r3, r1, r0, ror r3
   1303c:	andeq	r3, r1, ip, lsl #9
   13040:	andeq	r3, r1, r4, asr r3
   13044:	andeq	r3, r1, ip, ror #6
   13048:	andeq	r3, r1, r4, lsr #10
   1304c:	andeq	r3, r1, r4, lsr #10
   13050:	andeq	r3, r1, r4, lsr #10
   13054:	andeq	r3, r1, r4, lsr #10
   13058:	andeq	r3, r1, r4, lsr #10
   1305c:	andeq	r3, r1, r4, lsr #10
   13060:	andeq	r3, r1, r4, lsr #10
   13064:	andeq	r3, r1, r4, lsr #10
   13068:	andeq	r3, r1, r4, lsr #10
   1306c:	andeq	r3, r1, r4, lsr #10
   13070:	andeq	r3, r1, r4, lsr #10
   13074:	andeq	r3, r1, r4, lsr #10
   13078:	andeq	r3, r1, r4, lsr #10
   1307c:	andeq	r3, r1, r4, lsr #10
   13080:	andeq	r3, r1, r4, lsr #10
   13084:	andeq	r3, r1, r4, lsr #10
   13088:	andeq	r3, r1, r4, lsr #10
   1308c:	andeq	r3, r1, r4, lsr #10
   13090:	andeq	r3, r1, r8, lsl #6
   13094:	andeq	r3, r1, ip, lsl #6
   13098:	andeq	r3, r1, ip, lsl #6
   1309c:	strdeq	r3, [r1], -r4
   130a0:	andeq	r3, r1, ip, lsl #6
   130a4:	andeq	r3, r1, ip, lsl #4
   130a8:	andeq	r3, r1, ip, lsl #6
   130ac:	muleq	r1, r4, r4
   130b0:	andeq	r3, r1, ip, lsl #6
   130b4:	andeq	r3, r1, ip, lsl #6
   130b8:	andeq	r3, r1, ip, lsl #6
   130bc:	andeq	r3, r1, ip, lsl #4
   130c0:	andeq	r3, r1, ip, lsl #4
   130c4:	andeq	r3, r1, ip, lsl #4
   130c8:	andeq	r3, r1, ip, lsl #4
   130cc:	andeq	r3, r1, ip, lsl #4
   130d0:	andeq	r3, r1, ip, lsl #4
   130d4:	andeq	r3, r1, ip, lsl #4
   130d8:	andeq	r3, r1, ip, lsl #4
   130dc:	andeq	r3, r1, ip, lsl #4
   130e0:	andeq	r3, r1, ip, lsl #4
   130e4:	andeq	r3, r1, ip, lsl #4
   130e8:	andeq	r3, r1, ip, lsl #4
   130ec:	andeq	r3, r1, ip, lsl #4
   130f0:	andeq	r3, r1, ip, lsl #4
   130f4:	andeq	r3, r1, ip, lsl #4
   130f8:	andeq	r3, r1, ip, lsl #4
   130fc:	andeq	r3, r1, ip, lsl #6
   13100:	andeq	r3, r1, ip, lsl #6
   13104:	andeq	r3, r1, ip, lsl #6
   13108:	andeq	r3, r1, ip, lsl #6
   1310c:	andeq	r3, r1, ip, asr r4
   13110:	andeq	r3, r1, r4, lsr #10
   13114:	andeq	r3, r1, ip, lsl #4
   13118:	andeq	r3, r1, ip, lsl #4
   1311c:	andeq	r3, r1, ip, lsl #4
   13120:	andeq	r3, r1, ip, lsl #4
   13124:	andeq	r3, r1, ip, lsl #4
   13128:	andeq	r3, r1, ip, lsl #4
   1312c:	andeq	r3, r1, ip, lsl #4
   13130:	andeq	r3, r1, ip, lsl #4
   13134:	andeq	r3, r1, ip, lsl #4
   13138:	andeq	r3, r1, ip, lsl #4
   1313c:	andeq	r3, r1, ip, lsl #4
   13140:	andeq	r3, r1, ip, lsl #4
   13144:	andeq	r3, r1, ip, lsl #4
   13148:	andeq	r3, r1, ip, lsl #4
   1314c:	andeq	r3, r1, ip, lsl #4
   13150:	andeq	r3, r1, ip, lsl #4
   13154:	andeq	r3, r1, ip, lsl #4
   13158:	andeq	r3, r1, ip, lsl #4
   1315c:	andeq	r3, r1, ip, lsl #4
   13160:	andeq	r3, r1, ip, lsl #4
   13164:	andeq	r3, r1, ip, lsl #4
   13168:	andeq	r3, r1, ip, lsl #4
   1316c:	andeq	r3, r1, ip, lsl #4
   13170:	andeq	r3, r1, ip, lsl #4
   13174:	andeq	r3, r1, ip, lsl #4
   13178:	andeq	r3, r1, ip, lsl #4
   1317c:	andeq	r3, r1, ip, lsl #6
   13180:	andeq	r3, r1, r4, lsr r3
   13184:	andeq	r3, r1, ip, lsl #4
   13188:	andeq	r3, r1, ip, lsl #6
   1318c:	andeq	r3, r1, ip, lsl #4
   13190:	andeq	r3, r1, ip, lsl #6
   13194:	andeq	r3, r1, ip, lsl #4
   13198:	andeq	r3, r1, ip, lsl #4
   1319c:	andeq	r3, r1, ip, lsl #4
   131a0:	andeq	r3, r1, ip, lsl #4
   131a4:	andeq	r3, r1, ip, lsl #4
   131a8:	andeq	r3, r1, ip, lsl #4
   131ac:	andeq	r3, r1, ip, lsl #4
   131b0:	andeq	r3, r1, ip, lsl #4
   131b4:	andeq	r3, r1, ip, lsl #4
   131b8:	andeq	r3, r1, ip, lsl #4
   131bc:	andeq	r3, r1, ip, lsl #4
   131c0:	andeq	r3, r1, ip, lsl #4
   131c4:	andeq	r3, r1, ip, lsl #4
   131c8:	andeq	r3, r1, ip, lsl #4
   131cc:	andeq	r3, r1, ip, lsl #4
   131d0:	andeq	r3, r1, ip, lsl #4
   131d4:	andeq	r3, r1, ip, lsl #4
   131d8:	andeq	r3, r1, ip, lsl #4
   131dc:	andeq	r3, r1, ip, lsl #4
   131e0:	andeq	r3, r1, ip, lsl #4
   131e4:	andeq	r3, r1, ip, lsl #4
   131e8:	andeq	r3, r1, ip, lsl #4
   131ec:	andeq	r3, r1, ip, lsl #4
   131f0:	andeq	r3, r1, ip, lsl #4
   131f4:	andeq	r3, r1, ip, lsl #4
   131f8:	andeq	r3, r1, ip, lsl #4
   131fc:	andeq	r3, r1, r8, asr #5
   13200:	andeq	r3, r1, ip, lsl #6
   13204:	andeq	r3, r1, r8, asr #5
   13208:	strdeq	r3, [r1], -r4
   1320c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13210:	tst	r0, #1
   13214:	bne	13240 <_obstack_memory_used@@Base+0x8bc>
   13218:	ubfx	r0, r4, #5, #3
   1321c:	ldr	r1, [fp, #16]
   13220:	ldr	r0, [r1, r0, lsl #2]
   13224:	and	r1, r4, #31
   13228:	mov	r2, #1
   1322c:	tst	r0, r2, lsl r1
   13230:	beq	13240 <_obstack_memory_used@@Base+0x8bc>
   13234:	mov	r0, r4
   13238:	mov	r1, r6
   1323c:	b	13254 <_obstack_memory_used@@Base+0x8d0>
   13240:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13244:	cmp	r0, #0
   13248:	mov	r0, r4
   1324c:	mov	r1, r6
   13250:	beq	1358c <_obstack_memory_used@@Base+0xc08>
   13254:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13258:	tst	r2, #1
   1325c:	bne	13b50 <_obstack_memory_used@@Base+0x11cc>
   13260:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13264:	subs	r2, r2, #2
   13268:	movwne	r2, #1
   1326c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13270:	orr	r2, r2, r3
   13274:	tst	r2, #1
   13278:	bne	132b4 <_obstack_memory_used@@Base+0x930>
   1327c:	cmp	r8, sl
   13280:	movcc	r2, #39	; 0x27
   13284:	strbcc	r2, [r5, r8]
   13288:	add	r2, r8, #1
   1328c:	cmp	r2, sl
   13290:	movcc	r3, #36	; 0x24
   13294:	strbcc	r3, [r5, r2]
   13298:	add	r2, r8, #2
   1329c:	cmp	r2, sl
   132a0:	movcc	r3, #39	; 0x27
   132a4:	strbcc	r3, [r5, r2]
   132a8:	add	r8, r8, #3
   132ac:	mov	r2, #1
   132b0:	str	r2, [fp, #-56]	; 0xffffffc8
   132b4:	cmp	r8, sl
   132b8:	movcc	r2, #92	; 0x5c
   132bc:	strbcc	r2, [r5, r8]
   132c0:	add	r8, r8, #1
   132c4:	b	135d0 <_obstack_memory_used@@Base+0xc4c>
   132c8:	cmp	lr, #1
   132cc:	beq	132f4 <_obstack_memory_used@@Base+0x970>
   132d0:	mov	r6, #0
   132d4:	cmn	lr, #1
   132d8:	bne	13300 <_obstack_memory_used@@Base+0x97c>
   132dc:	ldrb	r0, [ip, #1]
   132e0:	cmp	r0, #0
   132e4:	beq	132f4 <_obstack_memory_used@@Base+0x970>
   132e8:	mvn	lr, #0
   132ec:	mov	r9, #0
   132f0:	b	1320c <_obstack_memory_used@@Base+0x888>
   132f4:	mov	r6, #0
   132f8:	cmp	r7, #0
   132fc:	beq	13308 <_obstack_memory_used@@Base+0x984>
   13300:	mov	r9, #0
   13304:	b	1320c <_obstack_memory_used@@Base+0x888>
   13308:	mov	r1, #1
   1330c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13310:	cmp	r0, #2
   13314:	bne	1332c <_obstack_memory_used@@Base+0x9a8>
   13318:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1331c:	tst	r0, #1
   13320:	mov	r6, r1
   13324:	beq	1320c <_obstack_memory_used@@Base+0x888>
   13328:	b	13b50 <_obstack_memory_used@@Base+0x11cc>
   1332c:	mov	r6, r1
   13330:	b	1320c <_obstack_memory_used@@Base+0x888>
   13334:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13338:	cmp	r0, #2
   1333c:	bne	13570 <_obstack_memory_used@@Base+0xbec>
   13340:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13344:	tst	r0, #1
   13348:	bne	13b50 <_obstack_memory_used@@Base+0x11cc>
   1334c:	mov	r9, #0
   13350:	b	13584 <_obstack_memory_used@@Base+0xc00>
   13354:	mov	r0, #102	; 0x66
   13358:	b	135f8 <_obstack_memory_used@@Base+0xc74>
   1335c:	mov	r2, #116	; 0x74
   13360:	b	13370 <_obstack_memory_used@@Base+0x9ec>
   13364:	mov	r0, #98	; 0x62
   13368:	b	135f8 <_obstack_memory_used@@Base+0xc74>
   1336c:	mov	r2, #114	; 0x72
   13370:	ldr	r0, [sp, #72]	; 0x48
   13374:	tst	r0, #1
   13378:	mov	r0, r2
   1337c:	bne	135f8 <_obstack_memory_used@@Base+0xc74>
   13380:	b	13b50 <_obstack_memory_used@@Base+0x11cc>
   13384:	ldr	r0, [sp, #92]	; 0x5c
   13388:	tst	r0, #1
   1338c:	beq	13614 <_obstack_memory_used@@Base+0xc90>
   13390:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13394:	tst	r0, #1
   13398:	bne	13b50 <_obstack_memory_used@@Base+0x11cc>
   1339c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   133a0:	subs	r0, r0, #2
   133a4:	movwne	r0, #1
   133a8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   133ac:	orr	r0, r0, r1
   133b0:	tst	r0, #1
   133b4:	bne	133f0 <_obstack_memory_used@@Base+0xa6c>
   133b8:	cmp	r8, sl
   133bc:	movcc	r0, #39	; 0x27
   133c0:	strbcc	r0, [r5, r8]
   133c4:	add	r0, r8, #1
   133c8:	cmp	r0, sl
   133cc:	movcc	r1, #36	; 0x24
   133d0:	strbcc	r1, [r5, r0]
   133d4:	add	r0, r8, #2
   133d8:	cmp	r0, sl
   133dc:	movcc	r1, #39	; 0x27
   133e0:	strbcc	r1, [r5, r0]
   133e4:	add	r8, r8, #3
   133e8:	mov	r0, #1
   133ec:	str	r0, [fp, #-56]	; 0xffffffc8
   133f0:	cmp	r8, sl
   133f4:	movcc	r0, #92	; 0x5c
   133f8:	strbcc	r0, [r5, r8]
   133fc:	add	r0, r8, #1
   13400:	mov	r6, #0
   13404:	mov	r9, #1
   13408:	mov	r4, #48	; 0x30
   1340c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13410:	cmp	r1, #2
   13414:	beq	137d8 <_obstack_memory_used@@Base+0xe54>
   13418:	add	r1, r7, #1
   1341c:	cmp	r1, lr
   13420:	bcs	137d8 <_obstack_memory_used@@Base+0xe54>
   13424:	ldrb	r1, [ip, r1]
   13428:	sub	r1, r1, #48	; 0x30
   1342c:	uxtb	r1, r1
   13430:	cmp	r1, #9
   13434:	bhi	137d8 <_obstack_memory_used@@Base+0xe54>
   13438:	cmp	r0, sl
   1343c:	movcc	r1, #48	; 0x30
   13440:	strbcc	r1, [r5, r0]
   13444:	add	r0, r8, #2
   13448:	cmp	r0, sl
   1344c:	movcc	r1, #48	; 0x30
   13450:	strbcc	r1, [r5, r0]
   13454:	add	r8, r8, #3
   13458:	b	1320c <_obstack_memory_used@@Base+0x888>
   1345c:	mov	r9, #0
   13460:	mov	r4, #63	; 0x3f
   13464:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13468:	cmp	r0, #5
   1346c:	beq	137e0 <_obstack_memory_used@@Base+0xe5c>
   13470:	cmp	r0, #2
   13474:	bne	13888 <_obstack_memory_used@@Base+0xf04>
   13478:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1347c:	tst	r0, #1
   13480:	mov	r6, #0
   13484:	beq	1320c <_obstack_memory_used@@Base+0x888>
   13488:	b	13b50 <_obstack_memory_used@@Base+0x11cc>
   1348c:	mov	r0, #118	; 0x76
   13490:	b	135f8 <_obstack_memory_used@@Base+0xc74>
   13494:	mov	r4, #39	; 0x27
   13498:	mov	r0, #1
   1349c:	str	r0, [sp, #64]	; 0x40
   134a0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   134a4:	cmp	r0, #2
   134a8:	bne	13630 <_obstack_memory_used@@Base+0xcac>
   134ac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   134b0:	tst	r0, #1
   134b4:	bne	13b50 <_obstack_memory_used@@Base+0x11cc>
   134b8:	ldr	r2, [sp, #84]	; 0x54
   134bc:	cmp	r2, #0
   134c0:	mov	r0, r2
   134c4:	movwne	r0, #1
   134c8:	clz	r1, sl
   134cc:	lsr	r1, r1, #5
   134d0:	orrs	r0, r0, r1
   134d4:	moveq	r2, sl
   134d8:	str	r2, [sp, #84]	; 0x54
   134dc:	moveq	sl, r0
   134e0:	cmp	r8, sl
   134e4:	movcc	r0, #39	; 0x27
   134e8:	strbcc	r0, [r5, r8]
   134ec:	add	r0, r8, #1
   134f0:	cmp	r0, sl
   134f4:	movcc	r1, #92	; 0x5c
   134f8:	strbcc	r1, [r5, r0]
   134fc:	add	r0, r8, #2
   13500:	cmp	r0, sl
   13504:	movcc	r1, #39	; 0x27
   13508:	strbcc	r1, [r5, r0]
   1350c:	add	r8, r8, #3
   13510:	mov	r0, #0
   13514:	str	r0, [fp, #-56]	; 0xffffffc8
   13518:	mov	r9, #0
   1351c:	mov	r6, #1
   13520:	b	1320c <_obstack_memory_used@@Base+0x888>
   13524:	ldr	r0, [sp, #44]	; 0x2c
   13528:	cmp	r0, #1
   1352c:	bne	13638 <_obstack_memory_used@@Base+0xcb4>
   13530:	str	lr, [sp, #32]
   13534:	bl	11050 <__ctype_b_loc@plt>
   13538:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1353c:	ldr	r0, [r0]
   13540:	add	r0, r0, r4, lsl #1
   13544:	ldrb	r0, [r0, #1]
   13548:	ubfx	r6, r0, #6, #1
   1354c:	mov	r2, #1
   13550:	ldr	r0, [sp, #60]	; 0x3c
   13554:	orr	r1, r6, r0
   13558:	cmp	r2, #1
   1355c:	bhi	13890 <_obstack_memory_used@@Base+0xf0c>
   13560:	tst	r1, #1
   13564:	beq	13890 <_obstack_memory_used@@Base+0xf0c>
   13568:	ldr	lr, [sp, #32]
   1356c:	b	1320c <_obstack_memory_used@@Base+0x888>
   13570:	mov	r9, #0
   13574:	mov	r0, #92	; 0x5c
   13578:	ldr	r1, [sp, #56]	; 0x38
   1357c:	cmp	r1, #0
   13580:	beq	135f8 <_obstack_memory_used@@Base+0xc74>
   13584:	mov	r4, #92	; 0x5c
   13588:	mov	r6, #0
   1358c:	cmp	r9, #0
   13590:	bne	135c8 <_obstack_memory_used@@Base+0xc44>
   13594:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13598:	tst	r0, #1
   1359c:	beq	135c8 <_obstack_memory_used@@Base+0xc44>
   135a0:	cmp	r8, sl
   135a4:	movcc	r0, #39	; 0x27
   135a8:	strbcc	r0, [r5, r8]
   135ac:	add	r0, r8, #1
   135b0:	cmp	r0, sl
   135b4:	movcc	r1, #39	; 0x27
   135b8:	strbcc	r1, [r5, r0]
   135bc:	add	r8, r8, #2
   135c0:	mov	r0, #0
   135c4:	str	r0, [fp, #-56]	; 0xffffffc8
   135c8:	mov	r1, r6
   135cc:	mov	r0, r4
   135d0:	cmp	r8, sl
   135d4:	strbcc	r0, [r5, r8]
   135d8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   135dc:	and	r0, r0, r1
   135e0:	str	r0, [fp, #-48]	; 0xffffffd0
   135e4:	add	r8, r8, #1
   135e8:	add	r7, r7, #1
   135ec:	cmn	lr, #1
   135f0:	bne	12f44 <_obstack_memory_used@@Base+0x5c0>
   135f4:	b	12f50 <_obstack_memory_used@@Base+0x5cc>
   135f8:	mov	r9, #0
   135fc:	ldr	r1, [sp, #92]	; 0x5c
   13600:	tst	r1, #1
   13604:	mov	r6, #0
   13608:	mov	r1, #0
   1360c:	beq	1320c <_obstack_memory_used@@Base+0x888>
   13610:	b	13254 <_obstack_memory_used@@Base+0x8d0>
   13614:	mov	r4, #0
   13618:	ldr	r0, [sp, #40]	; 0x28
   1361c:	cmp	r0, #0
   13620:	mov	r9, #0
   13624:	mov	r6, #0
   13628:	beq	1320c <_obstack_memory_used@@Base+0x888>
   1362c:	b	135e8 <_obstack_memory_used@@Base+0xc64>
   13630:	mov	r6, #1
   13634:	b	1320c <_obstack_memory_used@@Base+0x888>
   13638:	mov	r0, #0
   1363c:	str	r0, [fp, #-36]	; 0xffffffdc
   13640:	str	r0, [fp, #-40]	; 0xffffffd8
   13644:	cmn	lr, #1
   13648:	bne	1365c <_obstack_memory_used@@Base+0xcd8>
   1364c:	mov	r0, ip
   13650:	bl	11074 <strlen@plt>
   13654:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13658:	mov	lr, r0
   1365c:	ldr	r0, [sp, #76]	; 0x4c
   13660:	add	r0, r0, r7
   13664:	str	r0, [sp, #24]
   13668:	mov	r6, #1
   1366c:	mov	r2, #0
   13670:	sub	r0, fp, #40	; 0x28
   13674:	mov	r3, r0
   13678:	str	r5, [sp, #28]
   1367c:	str	lr, [sp, #32]
   13680:	b	136c4 <_obstack_memory_used@@Base+0xd40>
   13684:	ldr	r5, [sp, #52]	; 0x34
   13688:	add	r5, r0, r5
   1368c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13690:	bl	10f78 <iswprint@plt>
   13694:	cmp	r0, #0
   13698:	movwne	r0, #1
   1369c:	and	r6, r6, r0
   136a0:	sub	r0, fp, #40	; 0x28
   136a4:	bl	10f30 <mbsinit@plt>
   136a8:	sub	r3, fp, #40	; 0x28
   136ac:	mov	r2, r5
   136b0:	ldr	lr, [sp, #32]
   136b4:	cmp	r0, #0
   136b8:	ldr	r5, [sp, #28]
   136bc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   136c0:	bne	13550 <_obstack_memory_used@@Base+0xbcc>
   136c4:	str	r2, [sp, #52]	; 0x34
   136c8:	add	r0, r2, r7
   136cc:	add	r1, ip, r0
   136d0:	str	r0, [sp, #48]	; 0x30
   136d4:	sub	r2, lr, r0
   136d8:	sub	r0, fp, #44	; 0x2c
   136dc:	bl	153a4 <_obstack_memory_used@@Base+0x2a20>
   136e0:	cmp	r0, #0
   136e4:	beq	13a5c <_obstack_memory_used@@Base+0x10d8>
   136e8:	cmn	r0, #1
   136ec:	beq	13a18 <_obstack_memory_used@@Base+0x1094>
   136f0:	cmn	r0, #2
   136f4:	ldr	lr, [sp, #32]
   136f8:	beq	13a20 <_obstack_memory_used@@Base+0x109c>
   136fc:	cmp	r0, #2
   13700:	mov	r1, #0
   13704:	movwcc	r1, #1
   13708:	ldr	r2, [sp, #68]	; 0x44
   1370c:	eor	r2, r2, #1
   13710:	orrs	r1, r2, r1
   13714:	bne	13684 <_obstack_memory_used@@Base+0xd00>
   13718:	ldr	r1, [sp, #52]	; 0x34
   1371c:	ldr	r2, [sp, #24]
   13720:	add	r1, r2, r1
   13724:	sub	r2, r0, #1
   13728:	b	13738 <_obstack_memory_used@@Base+0xdb4>
   1372c:	add	r1, r1, #1
   13730:	subs	r2, r2, #1
   13734:	beq	13684 <_obstack_memory_used@@Base+0xd00>
   13738:	ldrb	r3, [r1]
   1373c:	sub	r3, r3, #91	; 0x5b
   13740:	cmp	r3, #33	; 0x21
   13744:	bhi	1372c <_obstack_memory_used@@Base+0xda8>
   13748:	add	r5, pc, #0
   1374c:	ldr	pc, [r5, r3, lsl #2]
   13750:	andeq	r3, r1, r8, asr #22
   13754:	andeq	r3, r1, r8, asr #22
   13758:	andeq	r3, r1, ip, lsr #14
   1375c:	andeq	r3, r1, r8, asr #22
   13760:	andeq	r3, r1, ip, lsr #14
   13764:	andeq	r3, r1, r8, asr #22
   13768:	andeq	r3, r1, ip, lsr #14
   1376c:	andeq	r3, r1, ip, lsr #14
   13770:	andeq	r3, r1, ip, lsr #14
   13774:	andeq	r3, r1, ip, lsr #14
   13778:	andeq	r3, r1, ip, lsr #14
   1377c:	andeq	r3, r1, ip, lsr #14
   13780:	andeq	r3, r1, ip, lsr #14
   13784:	andeq	r3, r1, ip, lsr #14
   13788:	andeq	r3, r1, ip, lsr #14
   1378c:	andeq	r3, r1, ip, lsr #14
   13790:	andeq	r3, r1, ip, lsr #14
   13794:	andeq	r3, r1, ip, lsr #14
   13798:	andeq	r3, r1, ip, lsr #14
   1379c:	andeq	r3, r1, ip, lsr #14
   137a0:	andeq	r3, r1, ip, lsr #14
   137a4:	andeq	r3, r1, ip, lsr #14
   137a8:	andeq	r3, r1, ip, lsr #14
   137ac:	andeq	r3, r1, ip, lsr #14
   137b0:	andeq	r3, r1, ip, lsr #14
   137b4:	andeq	r3, r1, ip, lsr #14
   137b8:	andeq	r3, r1, ip, lsr #14
   137bc:	andeq	r3, r1, ip, lsr #14
   137c0:	andeq	r3, r1, ip, lsr #14
   137c4:	andeq	r3, r1, ip, lsr #14
   137c8:	andeq	r3, r1, ip, lsr #14
   137cc:	andeq	r3, r1, ip, lsr #14
   137d0:	andeq	r3, r1, ip, lsr #14
   137d4:	andeq	r3, r1, r8, asr #22
   137d8:	mov	r8, r0
   137dc:	b	1320c <_obstack_memory_used@@Base+0x888>
   137e0:	ldr	r0, [sp, #36]	; 0x24
   137e4:	cmp	r0, #0
   137e8:	beq	13888 <_obstack_memory_used@@Base+0xf04>
   137ec:	add	r0, r7, #2
   137f0:	cmp	r0, lr
   137f4:	bcs	13888 <_obstack_memory_used@@Base+0xf04>
   137f8:	add	r1, r7, ip
   137fc:	ldrb	r1, [r1, #1]
   13800:	cmp	r1, #63	; 0x3f
   13804:	bne	13888 <_obstack_memory_used@@Base+0xf04>
   13808:	ldrb	r1, [ip, r0]
   1380c:	sub	r2, r1, #33	; 0x21
   13810:	cmp	r2, #29
   13814:	bhi	13888 <_obstack_memory_used@@Base+0xf04>
   13818:	mov	r3, #1
   1381c:	movw	r6, #20929	; 0x51c1
   13820:	movt	r6, #14336	; 0x3800
   13824:	tst	r6, r3, lsl r2
   13828:	beq	13888 <_obstack_memory_used@@Base+0xf04>
   1382c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13830:	tst	r2, #1
   13834:	bne	13b50 <_obstack_memory_used@@Base+0x11cc>
   13838:	cmp	r8, sl
   1383c:	movcc	r2, #63	; 0x3f
   13840:	strbcc	r2, [r5, r8]
   13844:	add	r2, r8, #1
   13848:	cmp	r2, sl
   1384c:	movcc	r3, #34	; 0x22
   13850:	strbcc	r3, [r5, r2]
   13854:	add	r2, r8, #2
   13858:	cmp	r2, sl
   1385c:	movcc	r3, #34	; 0x22
   13860:	strbcc	r3, [r5, r2]
   13864:	add	r2, r8, #3
   13868:	cmp	r2, sl
   1386c:	movcc	r3, #63	; 0x3f
   13870:	strbcc	r3, [r5, r2]
   13874:	add	r8, r8, #4
   13878:	mov	r7, r0
   1387c:	mov	r4, r1
   13880:	mov	r6, #0
   13884:	b	1320c <_obstack_memory_used@@Base+0x888>
   13888:	mov	r6, #0
   1388c:	b	1320c <_obstack_memory_used@@Base+0x888>
   13890:	add	r0, r2, r7
   13894:	str	r0, [sp, #52]	; 0x34
   13898:	mov	r2, #0
   1389c:	ldr	lr, [sp, #32]
   138a0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   138a4:	str	r1, [sp, #48]	; 0x30
   138a8:	tst	r1, #1
   138ac:	bne	13988 <_obstack_memory_used@@Base+0x1004>
   138b0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   138b4:	tst	r1, #1
   138b8:	bne	13b50 <_obstack_memory_used@@Base+0x11cc>
   138bc:	mov	r3, r0
   138c0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   138c4:	subs	r1, r0, #2
   138c8:	movwne	r1, #1
   138cc:	orr	r1, r1, r3
   138d0:	tst	r1, #1
   138d4:	bne	1390c <_obstack_memory_used@@Base+0xf88>
   138d8:	cmp	r8, sl
   138dc:	movcc	r0, #39	; 0x27
   138e0:	strbcc	r0, [r5, r8]
   138e4:	add	r2, r8, #1
   138e8:	cmp	r2, sl
   138ec:	movcc	r0, #36	; 0x24
   138f0:	strbcc	r0, [r5, r2]
   138f4:	add	r2, r8, #2
   138f8:	cmp	r2, sl
   138fc:	movcc	r0, #39	; 0x27
   13900:	strbcc	r0, [r5, r2]
   13904:	add	r8, r8, #3
   13908:	mov	r3, #1
   1390c:	cmp	r8, sl
   13910:	movcc	r1, #92	; 0x5c
   13914:	strbcc	r1, [r5, r8]
   13918:	add	r2, r8, #1
   1391c:	cmp	r2, sl
   13920:	bcs	13934 <_obstack_memory_used@@Base+0xfb0>
   13924:	uxtb	r1, r4
   13928:	mov	r0, #48	; 0x30
   1392c:	orr	r1, r0, r1, lsr #6
   13930:	strb	r1, [r5, r2]
   13934:	add	r2, r8, #2
   13938:	cmp	r2, sl
   1393c:	lsrcc	r1, r4, #3
   13940:	movcc	r0, #6
   13944:	bficc	r1, r0, #3, #29
   13948:	strbcc	r1, [r5, r2]
   1394c:	mov	r0, #6
   13950:	bfi	r4, r0, #3, #29
   13954:	add	r8, r8, #3
   13958:	mov	r2, #1
   1395c:	mov	r0, r3
   13960:	b	139ac <_obstack_memory_used@@Base+0x1028>
   13964:	cmp	r8, sl
   13968:	strbcc	r4, [r5, r8]
   1396c:	ldr	r1, [sp, #76]	; 0x4c
   13970:	ldrb	r4, [r1, r7]
   13974:	add	r8, r8, #1
   13978:	mov	r7, r3
   1397c:	ldr	r1, [sp, #48]	; 0x30
   13980:	tst	r1, #1
   13984:	beq	138b0 <_obstack_memory_used@@Base+0xf2c>
   13988:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1398c:	tst	r1, #1
   13990:	beq	139a4 <_obstack_memory_used@@Base+0x1020>
   13994:	cmp	r8, sl
   13998:	movcc	r1, #92	; 0x5c
   1399c:	strbcc	r1, [r5, r8]
   139a0:	add	r8, r8, #1
   139a4:	mov	r1, #0
   139a8:	str	r1, [fp, #-52]	; 0xffffffcc
   139ac:	and	r9, r2, #1
   139b0:	add	r3, r7, #1
   139b4:	ldr	r1, [sp, #52]	; 0x34
   139b8:	cmp	r1, r3
   139bc:	bls	13a00 <_obstack_memory_used@@Base+0x107c>
   139c0:	cmp	r9, #0
   139c4:	movwne	r9, #1
   139c8:	mvn	r1, r0
   139cc:	orr	r1, r1, r9
   139d0:	tst	r1, #1
   139d4:	bne	13964 <_obstack_memory_used@@Base+0xfe0>
   139d8:	cmp	r8, sl
   139dc:	movcc	r1, #39	; 0x27
   139e0:	strbcc	r1, [r5, r8]
   139e4:	add	r1, r8, #1
   139e8:	cmp	r1, sl
   139ec:	movcc	r0, #39	; 0x27
   139f0:	strbcc	r0, [r5, r1]
   139f4:	add	r8, r8, #2
   139f8:	mov	r0, #0
   139fc:	b	13964 <_obstack_memory_used@@Base+0xfe0>
   13a00:	str	r0, [fp, #-56]	; 0xffffffc8
   13a04:	cmp	r9, #0
   13a08:	movwne	r9, #1
   13a0c:	cmp	r9, #0
   13a10:	beq	13594 <_obstack_memory_used@@Base+0xc10>
   13a14:	b	135c8 <_obstack_memory_used@@Base+0xc44>
   13a18:	mov	r6, #0
   13a1c:	b	13a5c <_obstack_memory_used@@Base+0x10d8>
   13a20:	mov	r6, #0
   13a24:	ldr	r0, [sp, #48]	; 0x30
   13a28:	cmp	r0, lr
   13a2c:	bcs	13a5c <_obstack_memory_used@@Base+0x10d8>
   13a30:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13a34:	add	r0, ip, r7
   13a38:	ldr	r2, [sp, #52]	; 0x34
   13a3c:	ldrb	r1, [r0, r2]
   13a40:	cmp	r1, #0
   13a44:	beq	13550 <_obstack_memory_used@@Base+0xbcc>
   13a48:	add	r2, r2, #1
   13a4c:	add	r1, r7, r2
   13a50:	cmp	r1, lr
   13a54:	bcc	13a3c <_obstack_memory_used@@Base+0x10b8>
   13a58:	b	13550 <_obstack_memory_used@@Base+0xbcc>
   13a5c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13a60:	ldr	r2, [sp, #52]	; 0x34
   13a64:	b	13550 <_obstack_memory_used@@Base+0xbcc>
   13a68:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13a6c:	eor	r0, r1, #2
   13a70:	orr	r0, r0, r8
   13a74:	clz	r0, r0
   13a78:	lsr	r0, r0, #5
   13a7c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13a80:	tst	r3, r0
   13a84:	bne	13b50 <_obstack_memory_used@@Base+0x11cc>
   13a88:	mov	r6, r5
   13a8c:	subs	r0, r1, #2
   13a90:	movwne	r0, #1
   13a94:	orr	r0, r3, r0
   13a98:	tst	r0, #1
   13a9c:	ldr	r2, [sp, #92]	; 0x5c
   13aa0:	ldreq	r0, [sp, #64]	; 0x40
   13aa4:	eoreq	r0, r0, #1
   13aa8:	tsteq	r0, #1
   13aac:	bne	13aec <_obstack_memory_used@@Base+0x1168>
   13ab0:	mov	r9, lr
   13ab4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13ab8:	tst	r0, #1
   13abc:	bne	13bb8 <_obstack_memory_used@@Base+0x1234>
   13ac0:	ldr	r0, [sp, #84]	; 0x54
   13ac4:	cmp	r0, #0
   13ac8:	beq	13aec <_obstack_memory_used@@Base+0x1168>
   13acc:	mov	r0, #0
   13ad0:	str	r0, [fp, #-48]	; 0xffffffd0
   13ad4:	mov	r1, #2
   13ad8:	cmp	sl, #0
   13adc:	mov	r0, r2
   13ae0:	mov	r4, r3
   13ae4:	ldr	r7, [sp, #84]	; 0x54
   13ae8:	beq	12cc4 <_obstack_memory_used@@Base+0x340>
   13aec:	ldr	r1, [fp, #-84]	; 0xffffffac
   13af0:	clz	r0, r1
   13af4:	lsr	r0, r0, #5
   13af8:	orr	r0, r0, r3
   13afc:	tst	r0, #1
   13b00:	bne	13b2c <_obstack_memory_used@@Base+0x11a8>
   13b04:	ldrb	r0, [r1]
   13b08:	cmp	r0, #0
   13b0c:	beq	13b2c <_obstack_memory_used@@Base+0x11a8>
   13b10:	add	r1, r1, #1
   13b14:	cmp	r8, sl
   13b18:	strbcc	r0, [r6, r8]
   13b1c:	add	r8, r8, #1
   13b20:	ldrb	r0, [r1], #1
   13b24:	cmp	r0, #0
   13b28:	bne	13b14 <_obstack_memory_used@@Base+0x1190>
   13b2c:	cmp	r8, sl
   13b30:	movcc	r0, #0
   13b34:	strbcc	r0, [r6, r8]
   13b38:	b	13bac <_obstack_memory_used@@Base+0x1228>
   13b3c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13b40:	mov	lr, r4
   13b44:	b	13b50 <_obstack_memory_used@@Base+0x11cc>
   13b48:	ldr	r5, [sp, #28]
   13b4c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13b50:	mov	r0, #0
   13b54:	ldr	r1, [fp, #12]
   13b58:	bic	r1, r1, #2
   13b5c:	mov	r2, #2
   13b60:	ldr	r3, [sp, #92]	; 0x5c
   13b64:	tst	r3, #1
   13b68:	movwne	r2, #4
   13b6c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13b70:	cmp	r3, #2
   13b74:	movne	r2, r3
   13b78:	str	r2, [sp]
   13b7c:	str	r1, [sp, #4]
   13b80:	str	r0, [sp, #8]
   13b84:	ldr	r0, [sp, #80]	; 0x50
   13b88:	str	r0, [sp, #12]
   13b8c:	ldr	r0, [sp, #88]	; 0x58
   13b90:	str	r0, [sp, #16]
   13b94:	mov	r0, r5
   13b98:	mov	r1, sl
   13b9c:	mov	r2, ip
   13ba0:	mov	r3, lr
   13ba4:	bl	12c38 <_obstack_memory_used@@Base+0x2b4>
   13ba8:	mov	r8, r0
   13bac:	mov	r0, r8
   13bb0:	sub	sp, fp, #28
   13bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bb8:	mov	r0, #5
   13bbc:	str	r0, [sp]
   13bc0:	ldr	r0, [fp, #12]
   13bc4:	str	r0, [sp, #4]
   13bc8:	ldr	r0, [fp, #16]
   13bcc:	str	r0, [sp, #8]
   13bd0:	ldr	r0, [sp, #80]	; 0x50
   13bd4:	str	r0, [sp, #12]
   13bd8:	ldr	r0, [sp, #88]	; 0x58
   13bdc:	str	r0, [sp, #16]
   13be0:	mov	r0, r6
   13be4:	ldr	r1, [sp, #84]	; 0x54
   13be8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13bec:	mov	r3, r9
   13bf0:	b	13ba4 <_obstack_memory_used@@Base+0x1220>
   13bf4:	bl	11128 <abort@plt>
   13bf8:	mov	r3, r2
   13bfc:	mov	r2, #0
   13c00:	b	13c04 <_obstack_memory_used@@Base+0x1280>
   13c04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c08:	add	fp, sp, #28
   13c0c:	sub	sp, sp, #36	; 0x24
   13c10:	mov	r4, r2
   13c14:	str	r2, [sp, #24]
   13c18:	mov	r5, r1
   13c1c:	mov	r6, r0
   13c20:	str	r0, [sp, #20]
   13c24:	movw	r8, #33176	; 0x8198
   13c28:	movt	r8, #2
   13c2c:	cmp	r3, #0
   13c30:	movne	r8, r3
   13c34:	bl	11080 <__errno_location@plt>
   13c38:	str	r0, [sp, #28]
   13c3c:	ldm	r8, {r3, r9}
   13c40:	ldr	r1, [r8, #40]	; 0x28
   13c44:	ldr	r2, [r8, #44]	; 0x2c
   13c48:	ldr	r7, [r0]
   13c4c:	str	r7, [sp, #32]
   13c50:	add	sl, r8, #8
   13c54:	cmp	r4, #0
   13c58:	orreq	r9, r9, #1
   13c5c:	stm	sp, {r3, r9, sl}
   13c60:	str	r1, [sp, #12]
   13c64:	str	r2, [sp, #16]
   13c68:	mov	r0, #0
   13c6c:	mov	r1, #0
   13c70:	mov	r2, r6
   13c74:	mov	r3, r5
   13c78:	mov	r7, r5
   13c7c:	bl	12c38 <_obstack_memory_used@@Base+0x2b4>
   13c80:	mov	r5, r0
   13c84:	add	r4, r0, #1
   13c88:	mov	r0, r4
   13c8c:	bl	14b0c <_obstack_memory_used@@Base+0x2188>
   13c90:	mov	r6, r0
   13c94:	ldr	r0, [r8]
   13c98:	ldr	r1, [r8, #40]	; 0x28
   13c9c:	ldr	r2, [r8, #44]	; 0x2c
   13ca0:	stm	sp, {r0, r9, sl}
   13ca4:	str	r1, [sp, #12]
   13ca8:	str	r2, [sp, #16]
   13cac:	mov	r0, r6
   13cb0:	mov	r1, r4
   13cb4:	ldr	r2, [sp, #20]
   13cb8:	mov	r3, r7
   13cbc:	bl	12c38 <_obstack_memory_used@@Base+0x2b4>
   13cc0:	ldr	r0, [sp, #24]
   13cc4:	ldr	r1, [sp, #32]
   13cc8:	ldr	r2, [sp, #28]
   13ccc:	str	r1, [r2]
   13cd0:	cmp	r0, #0
   13cd4:	strne	r5, [r0]
   13cd8:	mov	r0, r6
   13cdc:	sub	sp, fp, #28
   13ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ce4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13ce8:	add	fp, sp, #24
   13cec:	movw	r8, #33016	; 0x80f8
   13cf0:	movt	r8, #2
   13cf4:	ldr	r4, [r8]
   13cf8:	movw	r5, #33020	; 0x80fc
   13cfc:	movt	r5, #2
   13d00:	ldr	r0, [r5]
   13d04:	cmp	r0, #2
   13d08:	blt	13d34 <_obstack_memory_used@@Base+0x13b0>
   13d0c:	add	r7, r4, #12
   13d10:	mov	r6, #0
   13d14:	ldr	r0, [r7, r6, lsl #3]
   13d18:	bl	123e0 <close@plt+0x12ac>
   13d1c:	add	r0, r6, #1
   13d20:	ldr	r1, [r5]
   13d24:	add	r2, r6, #2
   13d28:	cmp	r2, r1
   13d2c:	mov	r6, r0
   13d30:	blt	13d14 <_obstack_memory_used@@Base+0x1390>
   13d34:	ldr	r0, [r4, #4]
   13d38:	movw	r9, #33224	; 0x81c8
   13d3c:	movt	r9, #2
   13d40:	cmp	r0, r9
   13d44:	movw	r7, #33024	; 0x8100
   13d48:	movt	r7, #2
   13d4c:	beq	13d5c <_obstack_memory_used@@Base+0x13d8>
   13d50:	bl	123e0 <close@plt+0x12ac>
   13d54:	mov	r0, #256	; 0x100
   13d58:	stm	r7, {r0, r9}
   13d5c:	cmp	r4, r7
   13d60:	beq	13d70 <_obstack_memory_used@@Base+0x13ec>
   13d64:	mov	r0, r4
   13d68:	bl	123e0 <close@plt+0x12ac>
   13d6c:	str	r7, [r8]
   13d70:	mov	r0, #1
   13d74:	str	r0, [r5]
   13d78:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13d7c:	movw	r3, #33176	; 0x8198
   13d80:	movt	r3, #2
   13d84:	mvn	r2, #0
   13d88:	b	13d8c <_obstack_memory_used@@Base+0x1408>
   13d8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d90:	add	fp, sp, #28
   13d94:	sub	sp, sp, #44	; 0x2c
   13d98:	mov	r7, r3
   13d9c:	str	r2, [sp, #36]	; 0x24
   13da0:	str	r1, [sp, #32]
   13da4:	mov	r5, r0
   13da8:	bl	11080 <__errno_location@plt>
   13dac:	cmp	r5, #0
   13db0:	bmi	13f20 <_obstack_memory_used@@Base+0x159c>
   13db4:	cmn	r5, #-2147483647	; 0x80000001
   13db8:	beq	13f20 <_obstack_memory_used@@Base+0x159c>
   13dbc:	movw	r4, #33016	; 0x80f8
   13dc0:	movt	r4, #2
   13dc4:	ldr	r6, [r4]
   13dc8:	str	r0, [sp, #28]
   13dcc:	ldr	r0, [r0]
   13dd0:	str	r0, [sp, #24]
   13dd4:	movw	r8, #33020	; 0x80fc
   13dd8:	movt	r8, #2
   13ddc:	ldr	r1, [r8]
   13de0:	cmp	r1, r5
   13de4:	ble	13df0 <_obstack_memory_used@@Base+0x146c>
   13de8:	mov	sl, r6
   13dec:	b	13e5c <_obstack_memory_used@@Base+0x14d8>
   13df0:	str	r1, [fp, #-32]	; 0xffffffe0
   13df4:	mov	r0, #8
   13df8:	str	r0, [sp]
   13dfc:	movw	r9, #33024	; 0x8100
   13e00:	movt	r9, #2
   13e04:	subs	r0, r6, r9
   13e08:	movne	r0, r6
   13e0c:	sub	r1, r5, r1
   13e10:	add	r2, r1, #1
   13e14:	sub	r1, fp, #32
   13e18:	mvn	r3, #-2147483648	; 0x80000000
   13e1c:	bl	14be8 <_obstack_memory_used@@Base+0x2264>
   13e20:	mov	sl, r0
   13e24:	str	r0, [r4]
   13e28:	cmp	r6, r9
   13e2c:	bne	13e38 <_obstack_memory_used@@Base+0x14b4>
   13e30:	ldrd	r0, [r9]
   13e34:	stm	sl, {r0, r1}
   13e38:	ldr	r1, [r8]
   13e3c:	add	r0, sl, r1, lsl #3
   13e40:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13e44:	sub	r1, r2, r1
   13e48:	lsl	r2, r1, #3
   13e4c:	mov	r1, #0
   13e50:	bl	11098 <memset@plt>
   13e54:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13e58:	str	r0, [r8]
   13e5c:	mov	r9, sl
   13e60:	ldr	r6, [r9, r5, lsl #3]!
   13e64:	ldr	r4, [r9, #4]!
   13e68:	ldm	r7, {r0, r1}
   13e6c:	ldr	r2, [r7, #40]	; 0x28
   13e70:	ldr	r3, [r7, #44]	; 0x2c
   13e74:	orr	r8, r1, #1
   13e78:	add	r1, r7, #8
   13e7c:	stm	sp, {r0, r8}
   13e80:	str	r1, [sp, #20]
   13e84:	add	r0, sp, #8
   13e88:	stm	r0, {r1, r2, r3}
   13e8c:	mov	r0, r4
   13e90:	mov	r1, r6
   13e94:	ldr	r2, [sp, #32]
   13e98:	ldr	r3, [sp, #36]	; 0x24
   13e9c:	bl	12c38 <_obstack_memory_used@@Base+0x2b4>
   13ea0:	cmp	r6, r0
   13ea4:	bhi	13f08 <_obstack_memory_used@@Base+0x1584>
   13ea8:	add	r6, r0, #1
   13eac:	str	r6, [sl, r5, lsl #3]
   13eb0:	movw	r0, #33224	; 0x81c8
   13eb4:	movt	r0, #2
   13eb8:	cmp	r4, r0
   13ebc:	beq	13ec8 <_obstack_memory_used@@Base+0x1544>
   13ec0:	mov	r0, r4
   13ec4:	bl	123e0 <close@plt+0x12ac>
   13ec8:	mov	r0, r6
   13ecc:	bl	14b0c <_obstack_memory_used@@Base+0x2188>
   13ed0:	mov	r4, r0
   13ed4:	str	r0, [r9]
   13ed8:	ldr	r0, [r7]
   13edc:	ldr	r1, [r7, #40]	; 0x28
   13ee0:	ldr	r2, [r7, #44]	; 0x2c
   13ee4:	stm	sp, {r0, r8}
   13ee8:	ldr	r0, [sp, #20]
   13eec:	add	r3, sp, #8
   13ef0:	stm	r3, {r0, r1, r2}
   13ef4:	mov	r0, r4
   13ef8:	mov	r1, r6
   13efc:	ldr	r2, [sp, #32]
   13f00:	ldr	r3, [sp, #36]	; 0x24
   13f04:	bl	12c38 <_obstack_memory_used@@Base+0x2b4>
   13f08:	ldr	r0, [sp, #28]
   13f0c:	ldr	r1, [sp, #24]
   13f10:	str	r1, [r0]
   13f14:	mov	r0, r4
   13f18:	sub	sp, fp, #28
   13f1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f20:	bl	11128 <abort@plt>
   13f24:	movw	r3, #33176	; 0x8198
   13f28:	movt	r3, #2
   13f2c:	b	13d8c <_obstack_memory_used@@Base+0x1408>
   13f30:	mov	r1, r0
   13f34:	mov	r0, #0
   13f38:	b	13d7c <_obstack_memory_used@@Base+0x13f8>
   13f3c:	mov	r2, r1
   13f40:	mov	r1, r0
   13f44:	mov	r0, #0
   13f48:	b	13f24 <_obstack_memory_used@@Base+0x15a0>
   13f4c:	push	{r4, r5, r6, sl, fp, lr}
   13f50:	add	fp, sp, #16
   13f54:	sub	sp, sp, #48	; 0x30
   13f58:	mov	r4, r2
   13f5c:	mov	r5, r0
   13f60:	mov	r6, sp
   13f64:	mov	r0, r6
   13f68:	bl	13f88 <_obstack_memory_used@@Base+0x1604>
   13f6c:	mov	r0, r5
   13f70:	mov	r1, r4
   13f74:	mvn	r2, #0
   13f78:	mov	r3, r6
   13f7c:	bl	13d8c <_obstack_memory_used@@Base+0x1408>
   13f80:	sub	sp, fp, #16
   13f84:	pop	{r4, r5, r6, sl, fp, pc}
   13f88:	push	{fp, lr}
   13f8c:	mov	fp, sp
   13f90:	vmov.i32	q8, #0	; 0x00000000
   13f94:	mov	r2, #32
   13f98:	mov	r3, r0
   13f9c:	vst1.32	{d16-d17}, [r3], r2
   13fa0:	vst1.32	{d16-d17}, [r3]
   13fa4:	add	r2, r0, #16
   13fa8:	vst1.32	{d16-d17}, [r2]
   13fac:	cmp	r1, #10
   13fb0:	strne	r1, [r0]
   13fb4:	popne	{fp, pc}
   13fb8:	bl	11128 <abort@plt>
   13fbc:	push	{r4, r5, r6, r7, fp, lr}
   13fc0:	add	fp, sp, #16
   13fc4:	sub	sp, sp, #48	; 0x30
   13fc8:	mov	r4, r3
   13fcc:	mov	r5, r2
   13fd0:	mov	r6, r0
   13fd4:	mov	r7, sp
   13fd8:	mov	r0, r7
   13fdc:	bl	13f88 <_obstack_memory_used@@Base+0x1604>
   13fe0:	mov	r0, r6
   13fe4:	mov	r1, r5
   13fe8:	mov	r2, r4
   13fec:	mov	r3, r7
   13ff0:	bl	13d8c <_obstack_memory_used@@Base+0x1408>
   13ff4:	sub	sp, fp, #16
   13ff8:	pop	{r4, r5, r6, r7, fp, pc}
   13ffc:	mov	r2, r1
   14000:	mov	r1, r0
   14004:	mov	r0, #0
   14008:	b	13f4c <_obstack_memory_used@@Base+0x15c8>
   1400c:	mov	r3, r2
   14010:	mov	r2, r1
   14014:	mov	r1, r0
   14018:	mov	r0, #0
   1401c:	b	13fbc <_obstack_memory_used@@Base+0x1638>
   14020:	push	{r4, r5, r6, sl, fp, lr}
   14024:	add	fp, sp, #16
   14028:	sub	sp, sp, #48	; 0x30
   1402c:	mov	r4, r1
   14030:	mov	r5, r0
   14034:	movw	r0, #33176	; 0x8198
   14038:	movt	r0, #2
   1403c:	add	r1, r0, #16
   14040:	mov	r3, #32
   14044:	vld1.64	{d16-d17}, [r0], r3
   14048:	vld1.64	{d18-d19}, [r1]
   1404c:	mov	r6, sp
   14050:	add	r1, r6, #16
   14054:	vld1.64	{d20-d21}, [r0]
   14058:	vst1.64	{d18-d19}, [r1]
   1405c:	mov	r0, r6
   14060:	vst1.64	{d16-d17}, [r0], r3
   14064:	vst1.64	{d20-d21}, [r0]
   14068:	mov	r0, r6
   1406c:	mov	r1, r2
   14070:	mov	r2, #1
   14074:	bl	12b2c <_obstack_memory_used@@Base+0x1a8>
   14078:	mov	r0, #0
   1407c:	mov	r1, r5
   14080:	mov	r2, r4
   14084:	mov	r3, r6
   14088:	bl	13d8c <_obstack_memory_used@@Base+0x1408>
   1408c:	sub	sp, fp, #16
   14090:	pop	{r4, r5, r6, sl, fp, pc}
   14094:	mov	r2, r1
   14098:	mvn	r1, #0
   1409c:	b	14020 <_obstack_memory_used@@Base+0x169c>
   140a0:	mov	r1, #58	; 0x3a
   140a4:	b	14094 <_obstack_memory_used@@Base+0x1710>
   140a8:	mov	r2, #58	; 0x3a
   140ac:	b	14020 <_obstack_memory_used@@Base+0x169c>
   140b0:	push	{r4, r5, r6, sl, fp, lr}
   140b4:	add	fp, sp, #16
   140b8:	sub	sp, sp, #48	; 0x30
   140bc:	mov	r4, r2
   140c0:	mov	r5, r0
   140c4:	mov	r6, sp
   140c8:	mov	r0, r6
   140cc:	bl	13f88 <_obstack_memory_used@@Base+0x1604>
   140d0:	mov	r0, r6
   140d4:	mov	r1, #58	; 0x3a
   140d8:	mov	r2, #1
   140dc:	bl	12b2c <_obstack_memory_used@@Base+0x1a8>
   140e0:	mov	r0, r5
   140e4:	mov	r1, r4
   140e8:	mvn	r2, #0
   140ec:	mov	r3, r6
   140f0:	bl	13d8c <_obstack_memory_used@@Base+0x1408>
   140f4:	sub	sp, fp, #16
   140f8:	pop	{r4, r5, r6, sl, fp, pc}
   140fc:	push	{fp, lr}
   14100:	mov	fp, sp
   14104:	sub	sp, sp, #8
   14108:	mvn	ip, #0
   1410c:	str	ip, [sp]
   14110:	bl	1411c <_obstack_memory_used@@Base+0x1798>
   14114:	mov	sp, fp
   14118:	pop	{fp, pc}
   1411c:	push	{r4, r5, r6, r7, fp, lr}
   14120:	add	fp, sp, #16
   14124:	sub	sp, sp, #48	; 0x30
   14128:	mov	r7, r3
   1412c:	mov	r5, r0
   14130:	movw	r0, #33176	; 0x8198
   14134:	movt	r0, #2
   14138:	add	r3, r0, #16
   1413c:	mov	r4, #32
   14140:	vld1.64	{d16-d17}, [r0], r4
   14144:	vld1.64	{d18-d19}, [r3]
   14148:	mov	r6, sp
   1414c:	add	r3, r6, #16
   14150:	vld1.64	{d20-d21}, [r0]
   14154:	vst1.64	{d18-d19}, [r3]
   14158:	mov	r0, r6
   1415c:	vst1.64	{d16-d17}, [r0], r4
   14160:	vst1.64	{d20-d21}, [r0]
   14164:	mov	r0, r6
   14168:	bl	12b84 <_obstack_memory_used@@Base+0x200>
   1416c:	ldr	r2, [fp, #8]
   14170:	mov	r0, r5
   14174:	mov	r1, r7
   14178:	mov	r3, r6
   1417c:	bl	13d8c <_obstack_memory_used@@Base+0x1408>
   14180:	sub	sp, fp, #16
   14184:	pop	{r4, r5, r6, r7, fp, pc}
   14188:	mov	r3, r2
   1418c:	mov	r2, r1
   14190:	mov	r1, r0
   14194:	mov	r0, #0
   14198:	b	140fc <_obstack_memory_used@@Base+0x1778>
   1419c:	push	{fp, lr}
   141a0:	mov	fp, sp
   141a4:	sub	sp, sp, #8
   141a8:	mov	ip, r2
   141ac:	mov	r2, r1
   141b0:	mov	r1, r0
   141b4:	str	r3, [sp]
   141b8:	mov	r0, #0
   141bc:	mov	r3, ip
   141c0:	bl	1411c <_obstack_memory_used@@Base+0x1798>
   141c4:	mov	sp, fp
   141c8:	pop	{fp, pc}
   141cc:	movw	r3, #33032	; 0x8108
   141d0:	movt	r3, #2
   141d4:	b	13d8c <_obstack_memory_used@@Base+0x1408>
   141d8:	mov	r2, r1
   141dc:	mov	r1, r0
   141e0:	mov	r0, #0
   141e4:	b	141cc <_obstack_memory_used@@Base+0x1848>
   141e8:	mvn	r2, #0
   141ec:	b	141cc <_obstack_memory_used@@Base+0x1848>
   141f0:	mov	r1, r0
   141f4:	mov	r0, #0
   141f8:	b	141e8 <_obstack_memory_used@@Base+0x1864>
   141fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14200:	add	fp, sp, #24
   14204:	sub	sp, sp, #16
   14208:	mov	r4, r1
   1420c:	mov	r5, r0
   14210:	mov	r7, #0
   14214:	mov	r0, #0
   14218:	mov	r1, r5
   1421c:	mov	r2, #5
   14220:	bl	10f48 <dcgettext@plt>
   14224:	cmp	r0, r5
   14228:	beq	14234 <_obstack_memory_used@@Base+0x18b0>
   1422c:	sub	sp, fp, #24
   14230:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14234:	bl	1536c <_obstack_memory_used@@Base+0x29e8>
   14238:	mov	r6, r0
   1423c:	mov	r8, #56	; 0x38
   14240:	mov	r0, #45	; 0x2d
   14244:	stm	sp, {r0, r8}
   14248:	str	r7, [sp, #8]
   1424c:	str	r7, [sp, #12]
   14250:	mov	r0, r6
   14254:	mov	r1, #85	; 0x55
   14258:	mov	r2, #84	; 0x54
   1425c:	mov	r3, #70	; 0x46
   14260:	bl	142f8 <_obstack_memory_used@@Base+0x1974>
   14264:	cmp	r0, #0
   14268:	beq	14284 <_obstack_memory_used@@Base+0x1900>
   1426c:	ldrb	r1, [r5]
   14270:	movw	r2, #28803	; 0x7083
   14274:	movt	r2, #1
   14278:	movw	r0, #28807	; 0x7087
   1427c:	movt	r0, #1
   14280:	b	142c8 <_obstack_memory_used@@Base+0x1944>
   14284:	mov	r0, #48	; 0x30
   14288:	mov	r1, #51	; 0x33
   1428c:	str	r8, [sp]
   14290:	stmib	sp, {r0, r1}
   14294:	str	r0, [sp, #12]
   14298:	mov	r0, r6
   1429c:	mov	r1, #71	; 0x47
   142a0:	mov	r2, #66	; 0x42
   142a4:	mov	r3, #49	; 0x31
   142a8:	bl	142f8 <_obstack_memory_used@@Base+0x1974>
   142ac:	cmp	r0, #0
   142b0:	beq	142d8 <_obstack_memory_used@@Base+0x1954>
   142b4:	ldrb	r1, [r5]
   142b8:	movw	r2, #28811	; 0x708b
   142bc:	movt	r2, #1
   142c0:	movw	r0, #28815	; 0x708f
   142c4:	movt	r0, #1
   142c8:	cmp	r1, #96	; 0x60
   142cc:	moveq	r0, r2
   142d0:	sub	sp, fp, #24
   142d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   142d8:	movw	r1, #28799	; 0x707f
   142dc:	movt	r1, #1
   142e0:	movw	r0, #23003	; 0x59db
   142e4:	movt	r0, #1
   142e8:	cmp	r4, #9
   142ec:	moveq	r0, r1
   142f0:	sub	sp, fp, #24
   142f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   142f8:	push	{r4, r5, r6, r7, fp, lr}
   142fc:	add	fp, sp, #16
   14300:	sub	sp, sp, #16
   14304:	mov	r4, r3
   14308:	mov	r5, r2
   1430c:	mov	r7, r1
   14310:	mov	r6, r0
   14314:	mov	r0, r1
   14318:	bl	15228 <_obstack_memory_used@@Base+0x28a4>
   1431c:	ldrb	r1, [r6]
   14320:	cmp	r0, #0
   14324:	andne	r1, r1, #223	; 0xdf
   14328:	mov	r0, #0
   1432c:	cmp	r1, r7
   14330:	bne	14368 <_obstack_memory_used@@Base+0x19e4>
   14334:	cmp	r7, #0
   14338:	beq	14370 <_obstack_memory_used@@Base+0x19ec>
   1433c:	ldr	r0, [fp, #20]
   14340:	ldr	r1, [fp, #16]
   14344:	ldr	r2, [fp, #12]
   14348:	ldr	r3, [fp, #8]
   1434c:	str	r2, [sp]
   14350:	str	r1, [sp, #4]
   14354:	str	r0, [sp, #8]
   14358:	mov	r0, r6
   1435c:	mov	r1, r5
   14360:	mov	r2, r4
   14364:	bl	1437c <_obstack_memory_used@@Base+0x19f8>
   14368:	sub	sp, fp, #16
   1436c:	pop	{r4, r5, r6, r7, fp, pc}
   14370:	mov	r0, #1
   14374:	sub	sp, fp, #16
   14378:	pop	{r4, r5, r6, r7, fp, pc}
   1437c:	push	{r4, r5, r6, r7, fp, lr}
   14380:	add	fp, sp, #16
   14384:	sub	sp, sp, #8
   14388:	mov	r4, r3
   1438c:	mov	r5, r2
   14390:	mov	r7, r1
   14394:	mov	r6, r0
   14398:	mov	r0, r1
   1439c:	bl	15228 <_obstack_memory_used@@Base+0x28a4>
   143a0:	ldrb	r1, [r6, #1]
   143a4:	cmp	r0, #0
   143a8:	andne	r1, r1, #223	; 0xdf
   143ac:	mov	r0, #0
   143b0:	cmp	r1, r7
   143b4:	bne	143e4 <_obstack_memory_used@@Base+0x1a60>
   143b8:	cmp	r7, #0
   143bc:	beq	143ec <_obstack_memory_used@@Base+0x1a68>
   143c0:	ldr	r0, [fp, #16]
   143c4:	ldr	r1, [fp, #12]
   143c8:	ldr	r3, [fp, #8]
   143cc:	str	r1, [sp]
   143d0:	str	r0, [sp, #4]
   143d4:	mov	r0, r6
   143d8:	mov	r1, r5
   143dc:	mov	r2, r4
   143e0:	bl	143f8 <_obstack_memory_used@@Base+0x1a74>
   143e4:	sub	sp, fp, #16
   143e8:	pop	{r4, r5, r6, r7, fp, pc}
   143ec:	mov	r0, #1
   143f0:	sub	sp, fp, #16
   143f4:	pop	{r4, r5, r6, r7, fp, pc}
   143f8:	push	{r4, r5, r6, r7, fp, lr}
   143fc:	add	fp, sp, #16
   14400:	sub	sp, sp, #8
   14404:	mov	r4, r3
   14408:	mov	r5, r2
   1440c:	mov	r7, r1
   14410:	mov	r6, r0
   14414:	mov	r0, r1
   14418:	bl	15228 <_obstack_memory_used@@Base+0x28a4>
   1441c:	ldrb	r1, [r6, #2]
   14420:	cmp	r0, #0
   14424:	andne	r1, r1, #223	; 0xdf
   14428:	mov	r0, #0
   1442c:	cmp	r1, r7
   14430:	bne	14458 <_obstack_memory_used@@Base+0x1ad4>
   14434:	cmp	r7, #0
   14438:	beq	14460 <_obstack_memory_used@@Base+0x1adc>
   1443c:	ldr	r0, [fp, #12]
   14440:	ldr	r3, [fp, #8]
   14444:	str	r0, [sp]
   14448:	mov	r0, r6
   1444c:	mov	r1, r5
   14450:	mov	r2, r4
   14454:	bl	1446c <_obstack_memory_used@@Base+0x1ae8>
   14458:	sub	sp, fp, #16
   1445c:	pop	{r4, r5, r6, r7, fp, pc}
   14460:	mov	r0, #1
   14464:	sub	sp, fp, #16
   14468:	pop	{r4, r5, r6, r7, fp, pc}
   1446c:	push	{r4, r5, r6, r7, fp, lr}
   14470:	add	fp, sp, #16
   14474:	mov	r4, r3
   14478:	mov	r5, r2
   1447c:	mov	r7, r1
   14480:	mov	r6, r0
   14484:	mov	r0, r1
   14488:	bl	15228 <_obstack_memory_used@@Base+0x28a4>
   1448c:	ldrb	r1, [r6, #3]
   14490:	ldr	r3, [fp, #8]
   14494:	cmp	r0, #0
   14498:	andne	r1, r1, #223	; 0xdf
   1449c:	mov	r0, #0
   144a0:	cmp	r1, r7
   144a4:	bne	144c8 <_obstack_memory_used@@Base+0x1b44>
   144a8:	cmp	r7, #0
   144ac:	beq	144c4 <_obstack_memory_used@@Base+0x1b40>
   144b0:	mov	r0, r6
   144b4:	mov	r1, r5
   144b8:	mov	r2, r4
   144bc:	pop	{r4, r5, r6, r7, fp, lr}
   144c0:	b	144cc <_obstack_memory_used@@Base+0x1b48>
   144c4:	mov	r0, #1
   144c8:	pop	{r4, r5, r6, r7, fp, pc}
   144cc:	push	{r4, r5, r6, r7, fp, lr}
   144d0:	add	fp, sp, #16
   144d4:	mov	r4, r3
   144d8:	mov	r5, r2
   144dc:	mov	r7, r1
   144e0:	mov	r6, r0
   144e4:	mov	r0, r1
   144e8:	bl	15228 <_obstack_memory_used@@Base+0x28a4>
   144ec:	ldrb	r1, [r6, #4]
   144f0:	cmp	r0, #0
   144f4:	andne	r1, r1, #223	; 0xdf
   144f8:	mov	r0, #0
   144fc:	cmp	r1, r7
   14500:	bne	14524 <_obstack_memory_used@@Base+0x1ba0>
   14504:	cmp	r7, #0
   14508:	beq	14520 <_obstack_memory_used@@Base+0x1b9c>
   1450c:	mov	r0, r6
   14510:	mov	r1, r5
   14514:	mov	r2, r4
   14518:	pop	{r4, r5, r6, r7, fp, lr}
   1451c:	b	14528 <_obstack_memory_used@@Base+0x1ba4>
   14520:	mov	r0, #1
   14524:	pop	{r4, r5, r6, r7, fp, pc}
   14528:	push	{r4, r5, r6, sl, fp, lr}
   1452c:	add	fp, sp, #16
   14530:	mov	r4, r2
   14534:	mov	r6, r1
   14538:	mov	r5, r0
   1453c:	mov	r0, r1
   14540:	bl	15228 <_obstack_memory_used@@Base+0x28a4>
   14544:	ldrb	r1, [r5, #5]
   14548:	cmp	r0, #0
   1454c:	andne	r1, r1, #223	; 0xdf
   14550:	mov	r0, #0
   14554:	cmp	r1, r6
   14558:	bne	14578 <_obstack_memory_used@@Base+0x1bf4>
   1455c:	cmp	r6, #0
   14560:	beq	14574 <_obstack_memory_used@@Base+0x1bf0>
   14564:	mov	r0, r5
   14568:	mov	r1, r4
   1456c:	pop	{r4, r5, r6, sl, fp, lr}
   14570:	b	1457c <_obstack_memory_used@@Base+0x1bf8>
   14574:	mov	r0, #1
   14578:	pop	{r4, r5, r6, sl, fp, pc}
   1457c:	push	{r4, r5, fp, lr}
   14580:	add	fp, sp, #8
   14584:	mov	r5, r1
   14588:	mov	r4, r0
   1458c:	mov	r0, r1
   14590:	bl	15228 <_obstack_memory_used@@Base+0x28a4>
   14594:	ldrb	r1, [r4, #6]
   14598:	cmp	r0, #0
   1459c:	andne	r1, r1, #223	; 0xdf
   145a0:	mov	r0, #0
   145a4:	cmp	r1, r5
   145a8:	popne	{r4, r5, fp, pc}
   145ac:	cmp	r5, #0
   145b0:	beq	145c0 <_obstack_memory_used@@Base+0x1c3c>
   145b4:	mov	r0, r4
   145b8:	pop	{r4, r5, fp, lr}
   145bc:	b	145c8 <_obstack_memory_used@@Base+0x1c44>
   145c0:	mov	r0, #1
   145c4:	pop	{r4, r5, fp, pc}
   145c8:	push	{r4, sl, fp, lr}
   145cc:	add	fp, sp, #8
   145d0:	mov	r4, r0
   145d4:	mov	r0, #0
   145d8:	bl	15228 <_obstack_memory_used@@Base+0x28a4>
   145dc:	ldrb	r1, [r4, #7]
   145e0:	cmp	r0, #0
   145e4:	beq	145f8 <_obstack_memory_used@@Base+0x1c74>
   145e8:	tst	r1, #223	; 0xdf
   145ec:	bne	14600 <_obstack_memory_used@@Base+0x1c7c>
   145f0:	mov	r0, #1
   145f4:	pop	{r4, sl, fp, pc}
   145f8:	cmp	r1, #0
   145fc:	beq	145f0 <_obstack_memory_used@@Base+0x1c6c>
   14600:	mov	r0, #0
   14604:	pop	{r4, sl, fp, pc}
   14608:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1460c:	add	fp, sp, #24
   14610:	sub	sp, sp, #32
   14614:	mov	r4, r2
   14618:	mov	r8, r0
   1461c:	ldr	r6, [fp, #12]
   14620:	ldr	r7, [fp, #8]
   14624:	cmp	r1, #0
   14628:	beq	14650 <_obstack_memory_used@@Base+0x1ccc>
   1462c:	mov	r5, r1
   14630:	str	r4, [sp]
   14634:	str	r3, [sp, #4]
   14638:	movw	r2, #28904	; 0x70e8
   1463c:	movt	r2, #1
   14640:	mov	r0, r8
   14644:	mov	r1, #1
   14648:	mov	r3, r5
   1464c:	b	14668 <_obstack_memory_used@@Base+0x1ce4>
   14650:	str	r3, [sp]
   14654:	movw	r2, #28916	; 0x70f4
   14658:	movt	r2, #1
   1465c:	mov	r0, r8
   14660:	mov	r1, #1
   14664:	mov	r3, r4
   14668:	bl	110bc <__fprintf_chk@plt>
   1466c:	movw	r1, #28923	; 0x70fb
   14670:	movt	r1, #1
   14674:	mov	r0, #0
   14678:	mov	r2, #5
   1467c:	bl	10f48 <dcgettext@plt>
   14680:	mov	r3, r0
   14684:	movw	r0, #2022	; 0x7e6
   14688:	str	r0, [sp]
   1468c:	movw	r2, #29641	; 0x73c9
   14690:	movt	r2, #1
   14694:	mov	r0, r8
   14698:	mov	r1, #1
   1469c:	bl	110bc <__fprintf_chk@plt>
   146a0:	movw	r4, #23314	; 0x5b12
   146a4:	movt	r4, #1
   146a8:	mov	r0, r4
   146ac:	mov	r1, r8
   146b0:	bl	10ee8 <fputs_unlocked@plt>
   146b4:	movw	r1, #28927	; 0x70ff
   146b8:	movt	r1, #1
   146bc:	mov	r0, #0
   146c0:	mov	r2, #5
   146c4:	bl	10f48 <dcgettext@plt>
   146c8:	mov	r2, r0
   146cc:	movw	r3, #29098	; 0x71aa
   146d0:	movt	r3, #1
   146d4:	mov	r0, r8
   146d8:	mov	r1, #1
   146dc:	bl	110bc <__fprintf_chk@plt>
   146e0:	mov	r0, r4
   146e4:	mov	r1, r8
   146e8:	bl	10ee8 <fputs_unlocked@plt>
   146ec:	cmp	r6, #9
   146f0:	bhi	1472c <_obstack_memory_used@@Base+0x1da8>
   146f4:	add	r0, pc, #0
   146f8:	ldr	pc, [r0, r6, lsl #2]
   146fc:	andeq	r4, r1, r4, lsr #14
   14700:	andeq	r4, r1, r8, lsr r7
   14704:	andeq	r4, r1, r8, ror #14
   14708:	muleq	r1, r0, r7
   1470c:			; <UNDEFINED> instruction: 0x000147b8
   14710:	andeq	r4, r1, r0, ror #15
   14714:	andeq	r4, r1, r8, lsl #16
   14718:	andeq	r4, r1, r0, asr #16
   1471c:	andeq	r4, r1, r0, ror #17
   14720:	andeq	r4, r1, r8, lsl #17
   14724:	sub	sp, fp, #24
   14728:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1472c:	movw	r1, #29451	; 0x730b
   14730:	movt	r1, #1
   14734:	b	14890 <_obstack_memory_used@@Base+0x1f0c>
   14738:	movw	r1, #29132	; 0x71cc
   1473c:	movt	r1, #1
   14740:	mov	r0, #0
   14744:	mov	r2, #5
   14748:	bl	10f48 <dcgettext@plt>
   1474c:	mov	r2, r0
   14750:	ldr	r3, [r7]
   14754:	mov	r0, r8
   14758:	mov	r1, #1
   1475c:	sub	sp, fp, #24
   14760:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14764:	b	110bc <__fprintf_chk@plt>
   14768:	movw	r1, #29148	; 0x71dc
   1476c:	movt	r1, #1
   14770:	mov	r0, #0
   14774:	mov	r2, #5
   14778:	bl	10f48 <dcgettext@plt>
   1477c:	mov	r2, r0
   14780:	ldr	r3, [r7]
   14784:	ldr	r0, [r7, #4]
   14788:	str	r0, [sp]
   1478c:	b	1487c <_obstack_memory_used@@Base+0x1ef8>
   14790:	movw	r1, #29171	; 0x71f3
   14794:	movt	r1, #1
   14798:	mov	r0, #0
   1479c:	mov	r2, #5
   147a0:	bl	10f48 <dcgettext@plt>
   147a4:	mov	r2, r0
   147a8:	ldr	r3, [r7]
   147ac:	ldmib	r7, {r0, r1}
   147b0:	stm	sp, {r0, r1}
   147b4:	b	1487c <_obstack_memory_used@@Base+0x1ef8>
   147b8:	movw	r1, #29199	; 0x720f
   147bc:	movt	r1, #1
   147c0:	mov	r0, #0
   147c4:	mov	r2, #5
   147c8:	bl	10f48 <dcgettext@plt>
   147cc:	mov	r2, r0
   147d0:	ldr	r3, [r7]
   147d4:	ldmib	r7, {r0, r1, r7}
   147d8:	stm	sp, {r0, r1, r7}
   147dc:	b	1487c <_obstack_memory_used@@Base+0x1ef8>
   147e0:	movw	r1, #29231	; 0x722f
   147e4:	movt	r1, #1
   147e8:	mov	r0, #0
   147ec:	mov	r2, #5
   147f0:	bl	10f48 <dcgettext@plt>
   147f4:	mov	r2, r0
   147f8:	ldr	r3, [r7]
   147fc:	ldmib	r7, {r0, r1, r6, r7}
   14800:	stm	sp, {r0, r1, r6, r7}
   14804:	b	1487c <_obstack_memory_used@@Base+0x1ef8>
   14808:	movw	r1, #29267	; 0x7253
   1480c:	movt	r1, #1
   14810:	mov	r0, #0
   14814:	mov	r2, #5
   14818:	bl	10f48 <dcgettext@plt>
   1481c:	mov	r2, r0
   14820:	ldr	r3, [r7]
   14824:	ldmib	r7, {r0, r1, r6}
   14828:	ldr	r5, [r7, #16]
   1482c:	ldr	r7, [r7, #20]
   14830:	stm	sp, {r0, r1, r6}
   14834:	str	r5, [sp, #12]
   14838:	str	r7, [sp, #16]
   1483c:	b	1487c <_obstack_memory_used@@Base+0x1ef8>
   14840:	movw	r1, #29307	; 0x727b
   14844:	movt	r1, #1
   14848:	mov	r0, #0
   1484c:	mov	r2, #5
   14850:	bl	10f48 <dcgettext@plt>
   14854:	mov	r2, r0
   14858:	ldr	r3, [r7]
   1485c:	ldmib	r7, {r0, r1, r6}
   14860:	ldr	r5, [r7, #16]
   14864:	ldr	r4, [r7, #20]
   14868:	ldr	r7, [r7, #24]
   1486c:	stm	sp, {r0, r1, r6}
   14870:	str	r5, [sp, #12]
   14874:	str	r4, [sp, #16]
   14878:	str	r7, [sp, #20]
   1487c:	mov	r0, r8
   14880:	mov	r1, #1
   14884:	b	14930 <_obstack_memory_used@@Base+0x1fac>
   14888:	movw	r1, #29399	; 0x72d7
   1488c:	movt	r1, #1
   14890:	mov	r0, #0
   14894:	mov	r2, #5
   14898:	bl	10f48 <dcgettext@plt>
   1489c:	mov	ip, r0
   148a0:	ldr	r3, [r7]
   148a4:	ldr	r0, [r7, #4]
   148a8:	ldr	r1, [r7, #8]
   148ac:	ldr	r6, [r7, #12]
   148b0:	ldr	r5, [r7, #16]
   148b4:	ldr	r4, [r7, #20]
   148b8:	ldr	r2, [r7, #24]
   148bc:	ldr	lr, [r7, #28]
   148c0:	ldr	r7, [r7, #32]
   148c4:	stm	sp, {r0, r1, r6}
   148c8:	str	r5, [sp, #12]
   148cc:	str	r4, [sp, #16]
   148d0:	str	r2, [sp, #20]
   148d4:	str	lr, [sp, #24]
   148d8:	str	r7, [sp, #28]
   148dc:	b	14924 <_obstack_memory_used@@Base+0x1fa0>
   148e0:	movw	r1, #29351	; 0x72a7
   148e4:	movt	r1, #1
   148e8:	mov	r0, #0
   148ec:	mov	r2, #5
   148f0:	bl	10f48 <dcgettext@plt>
   148f4:	mov	ip, r0
   148f8:	ldr	r3, [r7]
   148fc:	ldmib	r7, {r0, r1, r6}
   14900:	ldr	r5, [r7, #16]
   14904:	ldr	r4, [r7, #20]
   14908:	ldr	r2, [r7, #24]
   1490c:	ldr	r7, [r7, #28]
   14910:	stm	sp, {r0, r1, r6}
   14914:	str	r5, [sp, #12]
   14918:	str	r4, [sp, #16]
   1491c:	str	r2, [sp, #20]
   14920:	str	r7, [sp, #24]
   14924:	mov	r0, r8
   14928:	mov	r1, #1
   1492c:	mov	r2, ip
   14930:	bl	110bc <__fprintf_chk@plt>
   14934:	sub	sp, fp, #24
   14938:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1493c:	push	{r4, sl, fp, lr}
   14940:	add	fp, sp, #8
   14944:	sub	sp, sp, #8
   14948:	mov	lr, #0
   1494c:	ldr	ip, [fp, #8]
   14950:	ldr	r4, [ip, lr, lsl #2]
   14954:	add	lr, lr, #1
   14958:	cmp	r4, #0
   1495c:	bne	14950 <_obstack_memory_used@@Base+0x1fcc>
   14960:	sub	r4, lr, #1
   14964:	str	ip, [sp]
   14968:	str	r4, [sp, #4]
   1496c:	bl	14608 <_obstack_memory_used@@Base+0x1c84>
   14970:	sub	sp, fp, #8
   14974:	pop	{r4, sl, fp, pc}
   14978:	push	{r4, r5, fp, lr}
   1497c:	add	fp, sp, #8
   14980:	sub	sp, sp, #48	; 0x30
   14984:	mov	ip, #0
   14988:	ldr	r4, [fp, #8]
   1498c:	add	lr, sp, #8
   14990:	ldr	r5, [r4]
   14994:	str	r5, [lr, ip, lsl #2]
   14998:	cmp	r5, #0
   1499c:	beq	149b4 <_obstack_memory_used@@Base+0x2030>
   149a0:	add	ip, ip, #1
   149a4:	add	r4, r4, #4
   149a8:	cmp	ip, #10
   149ac:	bne	14990 <_obstack_memory_used@@Base+0x200c>
   149b0:	mov	ip, #10
   149b4:	str	lr, [sp]
   149b8:	str	ip, [sp, #4]
   149bc:	bl	14608 <_obstack_memory_used@@Base+0x1c84>
   149c0:	sub	sp, fp, #8
   149c4:	pop	{r4, r5, fp, pc}
   149c8:	push	{fp, lr}
   149cc:	mov	fp, sp
   149d0:	sub	sp, sp, #8
   149d4:	add	ip, fp, #8
   149d8:	str	ip, [sp, #4]
   149dc:	str	ip, [sp]
   149e0:	bl	14978 <_obstack_memory_used@@Base+0x1ff4>
   149e4:	mov	sp, fp
   149e8:	pop	{fp, pc}
   149ec:	push	{fp, lr}
   149f0:	mov	fp, sp
   149f4:	movw	r0, #33108	; 0x8154
   149f8:	movt	r0, #2
   149fc:	ldr	r1, [r0]
   14a00:	movw	r0, #23314	; 0x5b12
   14a04:	movt	r0, #1
   14a08:	bl	10ee8 <fputs_unlocked@plt>
   14a0c:	movw	r1, #29511	; 0x7347
   14a10:	movt	r1, #1
   14a14:	mov	r0, #0
   14a18:	mov	r2, #5
   14a1c:	bl	10f48 <dcgettext@plt>
   14a20:	mov	r1, r0
   14a24:	movw	r2, #29531	; 0x735b
   14a28:	movt	r2, #1
   14a2c:	mov	r0, #1
   14a30:	bl	110a4 <__printf_chk@plt>
   14a34:	movw	r1, #29553	; 0x7371
   14a38:	movt	r1, #1
   14a3c:	mov	r0, #0
   14a40:	mov	r2, #5
   14a44:	bl	10f48 <dcgettext@plt>
   14a48:	mov	r1, r0
   14a4c:	movw	r2, #22682	; 0x589a
   14a50:	movt	r2, #1
   14a54:	movw	r3, #23123	; 0x5a53
   14a58:	movt	r3, #1
   14a5c:	mov	r0, #1
   14a60:	bl	110a4 <__printf_chk@plt>
   14a64:	movw	r1, #29573	; 0x7385
   14a68:	movt	r1, #1
   14a6c:	mov	r0, #0
   14a70:	mov	r2, #5
   14a74:	bl	10f48 <dcgettext@plt>
   14a78:	mov	r1, r0
   14a7c:	movw	r2, #29612	; 0x73ac
   14a80:	movt	r2, #1
   14a84:	mov	r0, #1
   14a88:	pop	{fp, lr}
   14a8c:	b	110a4 <__printf_chk@plt>
   14a90:	b	14a94 <_obstack_memory_used@@Base+0x2110>
   14a94:	push	{r4, r5, r6, sl, fp, lr}
   14a98:	add	fp, sp, #16
   14a9c:	mov	r4, r2
   14aa0:	mov	r5, r1
   14aa4:	mov	r6, r0
   14aa8:	bl	15408 <_obstack_memory_used@@Base+0x2a84>
   14aac:	cmp	r0, #0
   14ab0:	popne	{r4, r5, r6, sl, fp, pc}
   14ab4:	cmp	r6, #0
   14ab8:	beq	14acc <_obstack_memory_used@@Base+0x2148>
   14abc:	cmp	r5, #0
   14ac0:	cmpne	r4, #0
   14ac4:	bne	14acc <_obstack_memory_used@@Base+0x2148>
   14ac8:	pop	{r4, r5, r6, sl, fp, pc}
   14acc:	bl	14e58 <_obstack_memory_used@@Base+0x24d4>
   14ad0:	push	{fp, lr}
   14ad4:	mov	fp, sp
   14ad8:	bl	14ef0 <_obstack_memory_used@@Base+0x256c>
   14adc:	pop	{fp, lr}
   14ae0:	b	14ae4 <_obstack_memory_used@@Base+0x2160>
   14ae4:	cmp	r0, #0
   14ae8:	bxne	lr
   14aec:	push	{fp, lr}
   14af0:	mov	fp, sp
   14af4:	bl	14e58 <_obstack_memory_used@@Base+0x24d4>
   14af8:	push	{fp, lr}
   14afc:	mov	fp, sp
   14b00:	bl	15338 <_obstack_memory_used@@Base+0x29b4>
   14b04:	pop	{fp, lr}
   14b08:	b	14ae4 <_obstack_memory_used@@Base+0x2160>
   14b0c:	b	14ad0 <_obstack_memory_used@@Base+0x214c>
   14b10:	push	{r4, r5, fp, lr}
   14b14:	add	fp, sp, #8
   14b18:	mov	r4, r1
   14b1c:	mov	r5, r0
   14b20:	bl	14f20 <_obstack_memory_used@@Base+0x259c>
   14b24:	cmp	r0, #0
   14b28:	popne	{r4, r5, fp, pc}
   14b2c:	cmp	r5, #0
   14b30:	beq	14b40 <_obstack_memory_used@@Base+0x21bc>
   14b34:	cmp	r4, #0
   14b38:	bne	14b40 <_obstack_memory_used@@Base+0x21bc>
   14b3c:	pop	{r4, r5, fp, pc}
   14b40:	bl	14e58 <_obstack_memory_used@@Base+0x24d4>
   14b44:	push	{fp, lr}
   14b48:	mov	fp, sp
   14b4c:	bl	1533c <_obstack_memory_used@@Base+0x29b8>
   14b50:	pop	{fp, lr}
   14b54:	b	14ae4 <_obstack_memory_used@@Base+0x2160>
   14b58:	push	{fp, lr}
   14b5c:	mov	fp, sp
   14b60:	bl	1534c <_obstack_memory_used@@Base+0x29c8>
   14b64:	pop	{fp, lr}
   14b68:	b	14ae4 <_obstack_memory_used@@Base+0x2160>
   14b6c:	mov	r2, r1
   14b70:	mov	r1, r0
   14b74:	mov	r0, #0
   14b78:	b	14a94 <_obstack_memory_used@@Base+0x2110>
   14b7c:	mov	r2, r1
   14b80:	mov	r1, r0
   14b84:	mov	r0, #0
   14b88:	b	14b58 <_obstack_memory_used@@Base+0x21d4>
   14b8c:	mov	r2, #1
   14b90:	b	14b94 <_obstack_memory_used@@Base+0x2210>
   14b94:	push	{r4, r5, fp, lr}
   14b98:	add	fp, sp, #8
   14b9c:	mov	r4, r1
   14ba0:	ldr	r5, [r1]
   14ba4:	cmp	r0, #0
   14ba8:	beq	14bc0 <_obstack_memory_used@@Base+0x223c>
   14bac:	mov	r1, #1
   14bb0:	add	r1, r1, r5, lsr #1
   14bb4:	adds	r5, r5, r1
   14bb8:	bcc	14bd8 <_obstack_memory_used@@Base+0x2254>
   14bbc:	bl	14e58 <_obstack_memory_used@@Base+0x24d4>
   14bc0:	cmp	r5, #0
   14bc4:	bne	14bd8 <_obstack_memory_used@@Base+0x2254>
   14bc8:	mov	r1, #64	; 0x40
   14bcc:	udiv	r5, r1, r2
   14bd0:	cmp	r2, #64	; 0x40
   14bd4:	addhi	r5, r5, #1
   14bd8:	mov	r1, r5
   14bdc:	bl	14a94 <_obstack_memory_used@@Base+0x2110>
   14be0:	str	r5, [r4]
   14be4:	pop	{r4, r5, fp, pc}
   14be8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14bec:	add	fp, sp, #24
   14bf0:	mov	r8, r1
   14bf4:	ldr	r6, [r1]
   14bf8:	add	r1, r6, r6, asr #1
   14bfc:	cmp	r1, r6
   14c00:	mvnvs	r1, #-2147483648	; 0x80000000
   14c04:	cmp	r1, r3
   14c08:	mov	r5, r1
   14c0c:	movgt	r5, r3
   14c10:	cmn	r3, #1
   14c14:	movle	r5, r1
   14c18:	ldr	r4, [fp, #8]
   14c1c:	cmn	r4, #1
   14c20:	ble	14c48 <_obstack_memory_used@@Base+0x22c4>
   14c24:	cmp	r4, #0
   14c28:	beq	14c9c <_obstack_memory_used@@Base+0x2318>
   14c2c:	cmn	r5, #1
   14c30:	ble	14c70 <_obstack_memory_used@@Base+0x22ec>
   14c34:	mvn	r7, #-2147483648	; 0x80000000
   14c38:	udiv	r1, r7, r4
   14c3c:	cmp	r1, r5
   14c40:	bge	14c9c <_obstack_memory_used@@Base+0x2318>
   14c44:	b	14cac <_obstack_memory_used@@Base+0x2328>
   14c48:	cmn	r5, #1
   14c4c:	ble	14c8c <_obstack_memory_used@@Base+0x2308>
   14c50:	cmn	r4, #1
   14c54:	beq	14c9c <_obstack_memory_used@@Base+0x2318>
   14c58:	mov	r1, #-2147483648	; 0x80000000
   14c5c:	sdiv	r1, r1, r4
   14c60:	mvn	r7, #-2147483648	; 0x80000000
   14c64:	cmp	r1, r5
   14c68:	bge	14c9c <_obstack_memory_used@@Base+0x2318>
   14c6c:	b	14cac <_obstack_memory_used@@Base+0x2328>
   14c70:	beq	14c9c <_obstack_memory_used@@Base+0x2318>
   14c74:	mov	r1, #-2147483648	; 0x80000000
   14c78:	sdiv	r1, r1, r5
   14c7c:	mvn	r7, #-2147483648	; 0x80000000
   14c80:	cmp	r1, r4
   14c84:	bge	14c9c <_obstack_memory_used@@Base+0x2318>
   14c88:	b	14cac <_obstack_memory_used@@Base+0x2328>
   14c8c:	mvn	r7, #-2147483648	; 0x80000000
   14c90:	sdiv	r1, r7, r4
   14c94:	cmp	r5, r1
   14c98:	blt	14cac <_obstack_memory_used@@Base+0x2328>
   14c9c:	mul	r1, r5, r4
   14ca0:	mov	r7, #64	; 0x40
   14ca4:	cmp	r1, #63	; 0x3f
   14ca8:	bgt	14cb4 <_obstack_memory_used@@Base+0x2330>
   14cac:	sdiv	r5, r7, r4
   14cb0:	mul	r1, r5, r4
   14cb4:	cmp	r0, #0
   14cb8:	moveq	r7, #0
   14cbc:	streq	r7, [r8]
   14cc0:	sub	r7, r5, r6
   14cc4:	cmp	r7, r2
   14cc8:	bge	14d74 <_obstack_memory_used@@Base+0x23f0>
   14ccc:	add	r5, r6, r2
   14cd0:	mov	r1, #0
   14cd4:	cmp	r5, r3
   14cd8:	mov	r2, #0
   14cdc:	movwgt	r2, #1
   14ce0:	cmn	r3, #1
   14ce4:	movwgt	r1, #1
   14ce8:	cmp	r5, r6
   14cec:	bvs	14d5c <_obstack_memory_used@@Base+0x23d8>
   14cf0:	ands	r1, r1, r2
   14cf4:	bne	14d5c <_obstack_memory_used@@Base+0x23d8>
   14cf8:	cmn	r4, #1
   14cfc:	ble	14d24 <_obstack_memory_used@@Base+0x23a0>
   14d00:	cmp	r4, #0
   14d04:	beq	14d70 <_obstack_memory_used@@Base+0x23ec>
   14d08:	cmn	r5, #1
   14d0c:	ble	14d48 <_obstack_memory_used@@Base+0x23c4>
   14d10:	mvn	r1, #-2147483648	; 0x80000000
   14d14:	udiv	r1, r1, r4
   14d18:	cmp	r1, r5
   14d1c:	bge	14d70 <_obstack_memory_used@@Base+0x23ec>
   14d20:	b	14d5c <_obstack_memory_used@@Base+0x23d8>
   14d24:	cmn	r5, #1
   14d28:	ble	14d60 <_obstack_memory_used@@Base+0x23dc>
   14d2c:	cmn	r4, #1
   14d30:	beq	14d70 <_obstack_memory_used@@Base+0x23ec>
   14d34:	mov	r1, #-2147483648	; 0x80000000
   14d38:	sdiv	r1, r1, r4
   14d3c:	cmp	r1, r5
   14d40:	bge	14d70 <_obstack_memory_used@@Base+0x23ec>
   14d44:	b	14d5c <_obstack_memory_used@@Base+0x23d8>
   14d48:	beq	14d70 <_obstack_memory_used@@Base+0x23ec>
   14d4c:	mov	r1, #-2147483648	; 0x80000000
   14d50:	sdiv	r1, r1, r5
   14d54:	cmp	r1, r4
   14d58:	bge	14d70 <_obstack_memory_used@@Base+0x23ec>
   14d5c:	bl	14e58 <_obstack_memory_used@@Base+0x24d4>
   14d60:	mvn	r1, #-2147483648	; 0x80000000
   14d64:	sdiv	r1, r1, r4
   14d68:	cmp	r5, r1
   14d6c:	blt	14d5c <_obstack_memory_used@@Base+0x23d8>
   14d70:	mul	r1, r5, r4
   14d74:	bl	14b10 <_obstack_memory_used@@Base+0x218c>
   14d78:	str	r5, [r8]
   14d7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14d80:	mov	r1, #1
   14d84:	b	14d88 <_obstack_memory_used@@Base+0x2404>
   14d88:	push	{fp, lr}
   14d8c:	mov	fp, sp
   14d90:	bl	14e9c <_obstack_memory_used@@Base+0x2518>
   14d94:	pop	{fp, lr}
   14d98:	b	14ae4 <_obstack_memory_used@@Base+0x2160>
   14d9c:	mov	r1, #1
   14da0:	b	14da4 <_obstack_memory_used@@Base+0x2420>
   14da4:	push	{fp, lr}
   14da8:	mov	fp, sp
   14dac:	bl	15348 <_obstack_memory_used@@Base+0x29c4>
   14db0:	pop	{fp, lr}
   14db4:	b	14ae4 <_obstack_memory_used@@Base+0x2160>
   14db8:	push	{r4, r5, fp, lr}
   14dbc:	add	fp, sp, #8
   14dc0:	mov	r4, r1
   14dc4:	mov	r5, r0
   14dc8:	mov	r0, r1
   14dcc:	bl	14ad0 <_obstack_memory_used@@Base+0x214c>
   14dd0:	mov	r1, r5
   14dd4:	mov	r2, r4
   14dd8:	pop	{r4, r5, fp, lr}
   14ddc:	b	10f24 <memcpy@plt>
   14de0:	push	{r4, r5, fp, lr}
   14de4:	add	fp, sp, #8
   14de8:	mov	r4, r1
   14dec:	mov	r5, r0
   14df0:	mov	r0, r1
   14df4:	bl	14af8 <_obstack_memory_used@@Base+0x2174>
   14df8:	mov	r1, r5
   14dfc:	mov	r2, r4
   14e00:	pop	{r4, r5, fp, lr}
   14e04:	b	10f24 <memcpy@plt>
   14e08:	push	{r4, r5, fp, lr}
   14e0c:	add	fp, sp, #8
   14e10:	mov	r4, r1
   14e14:	mov	r5, r0
   14e18:	add	r0, r1, #1
   14e1c:	bl	14af8 <_obstack_memory_used@@Base+0x2174>
   14e20:	mov	r1, #0
   14e24:	strb	r1, [r0, r4]
   14e28:	mov	r1, r5
   14e2c:	mov	r2, r4
   14e30:	pop	{r4, r5, fp, lr}
   14e34:	b	10f24 <memcpy@plt>
   14e38:	push	{r4, sl, fp, lr}
   14e3c:	add	fp, sp, #8
   14e40:	mov	r4, r0
   14e44:	bl	11074 <strlen@plt>
   14e48:	add	r1, r0, #1
   14e4c:	mov	r0, r4
   14e50:	pop	{r4, sl, fp, lr}
   14e54:	b	14db8 <_obstack_memory_used@@Base+0x2434>
   14e58:	push	{fp, lr}
   14e5c:	mov	fp, sp
   14e60:	movw	r0, #33004	; 0x80ec
   14e64:	movt	r0, #2
   14e68:	ldr	r4, [r0]
   14e6c:	movw	r1, #28644	; 0x6fe4
   14e70:	movt	r1, #1
   14e74:	mov	r0, #0
   14e78:	mov	r2, #5
   14e7c:	bl	10f48 <dcgettext@plt>
   14e80:	mov	r3, r0
   14e84:	movw	r2, #28631	; 0x6fd7
   14e88:	movt	r2, #1
   14e8c:	mov	r0, r4
   14e90:	mov	r1, #0
   14e94:	bl	10fcc <error@plt>
   14e98:	bl	11128 <abort@plt>
   14e9c:	clz	r2, r1
   14ea0:	lsr	r2, r2, #5
   14ea4:	clz	r3, r0
   14ea8:	lsr	r3, r3, #5
   14eac:	orrs	r2, r3, r2
   14eb0:	movwne	r1, #1
   14eb4:	movwne	r0, #1
   14eb8:	cmp	r1, #0
   14ebc:	beq	14eec <_obstack_memory_used@@Base+0x2568>
   14ec0:	mvn	r2, #-2147483648	; 0x80000000
   14ec4:	udiv	r2, r2, r1
   14ec8:	cmp	r2, r0
   14ecc:	bcs	14eec <_obstack_memory_used@@Base+0x2568>
   14ed0:	push	{fp, lr}
   14ed4:	mov	fp, sp
   14ed8:	bl	11080 <__errno_location@plt>
   14edc:	mov	r1, #12
   14ee0:	str	r1, [r0]
   14ee4:	mov	r0, #0
   14ee8:	pop	{fp, pc}
   14eec:	b	10edc <calloc@plt>
   14ef0:	cmp	r0, #0
   14ef4:	movweq	r0, #1
   14ef8:	cmn	r0, #1
   14efc:	ble	14f04 <_obstack_memory_used@@Base+0x2580>
   14f00:	b	11008 <malloc@plt>
   14f04:	push	{fp, lr}
   14f08:	mov	fp, sp
   14f0c:	bl	11080 <__errno_location@plt>
   14f10:	mov	r1, #12
   14f14:	str	r1, [r0]
   14f18:	mov	r0, #0
   14f1c:	pop	{fp, pc}
   14f20:	push	{fp, lr}
   14f24:	mov	fp, sp
   14f28:	cmp	r0, #0
   14f2c:	beq	14f48 <_obstack_memory_used@@Base+0x25c4>
   14f30:	cmp	r1, #0
   14f34:	beq	14f54 <_obstack_memory_used@@Base+0x25d0>
   14f38:	cmn	r1, #1
   14f3c:	ble	14f60 <_obstack_memory_used@@Base+0x25dc>
   14f40:	pop	{fp, lr}
   14f44:	b	10f60 <realloc@plt>
   14f48:	mov	r0, r1
   14f4c:	pop	{fp, lr}
   14f50:	b	14ef0 <_obstack_memory_used@@Base+0x256c>
   14f54:	bl	123e0 <close@plt+0x12ac>
   14f58:	mov	r0, #0
   14f5c:	pop	{fp, pc}
   14f60:	bl	11080 <__errno_location@plt>
   14f64:	mov	r1, #12
   14f68:	str	r1, [r0]
   14f6c:	mov	r0, #0
   14f70:	pop	{fp, pc}
   14f74:	mov	r1, r0
   14f78:	sub	r2, r0, #65	; 0x41
   14f7c:	mov	r0, #1
   14f80:	cmp	r2, #26
   14f84:	subcs	r2, r1, #97	; 0x61
   14f88:	cmpcs	r2, #26
   14f8c:	bcs	14f94 <_obstack_memory_used@@Base+0x2610>
   14f90:	bx	lr
   14f94:	sub	r1, r1, #48	; 0x30
   14f98:	cmp	r1, #10
   14f9c:	movcs	r0, #0
   14fa0:	bx	lr
   14fa4:	mov	r1, r0
   14fa8:	sub	r2, r0, #65	; 0x41
   14fac:	mov	r0, #1
   14fb0:	cmp	r2, #26
   14fb4:	subcs	r1, r1, #97	; 0x61
   14fb8:	cmpcs	r1, #26
   14fbc:	movcs	r0, #0
   14fc0:	bx	lr
   14fc4:	mov	r1, #0
   14fc8:	cmp	r0, #128	; 0x80
   14fcc:	movwcc	r1, #1
   14fd0:	mov	r0, r1
   14fd4:	bx	lr
   14fd8:	sub	r1, r0, #9
   14fdc:	clz	r1, r1
   14fe0:	lsr	r1, r1, #5
   14fe4:	sub	r0, r0, #32
   14fe8:	clz	r0, r0
   14fec:	lsr	r0, r0, #5
   14ff0:	orr	r0, r0, r1
   14ff4:	bx	lr
   14ff8:	mov	r1, r0
   14ffc:	mov	r0, #1
   15000:	cmp	r1, #32
   15004:	bxcc	lr
   15008:	cmp	r1, #127	; 0x7f
   1500c:	movne	r0, #0
   15010:	bx	lr
   15014:	sub	r1, r0, #48	; 0x30
   15018:	mov	r0, #0
   1501c:	cmp	r1, #10
   15020:	movwcc	r0, #1
   15024:	bx	lr
   15028:	sub	r1, r0, #33	; 0x21
   1502c:	mov	r0, #0
   15030:	cmp	r1, #94	; 0x5e
   15034:	movwcc	r0, #1
   15038:	bx	lr
   1503c:	sub	r1, r0, #97	; 0x61
   15040:	mov	r0, #0
   15044:	cmp	r1, #26
   15048:	movwcc	r0, #1
   1504c:	bx	lr
   15050:	sub	r1, r0, #32
   15054:	mov	r0, #0
   15058:	cmp	r1, #95	; 0x5f
   1505c:	movwcc	r0, #1
   15060:	bx	lr
   15064:	sub	r1, r0, #33	; 0x21
   15068:	cmp	r1, #93	; 0x5d
   1506c:	bhi	151f8 <_obstack_memory_used@@Base+0x2874>
   15070:	mov	r0, #1
   15074:	add	r2, pc, #0
   15078:	ldr	pc, [r2, r1, lsl #2]
   1507c:	strdeq	r5, [r1], -r4
   15080:	strdeq	r5, [r1], -r4
   15084:	strdeq	r5, [r1], -r4
   15088:	strdeq	r5, [r1], -r4
   1508c:	strdeq	r5, [r1], -r4
   15090:	strdeq	r5, [r1], -r4
   15094:	strdeq	r5, [r1], -r4
   15098:	strdeq	r5, [r1], -r4
   1509c:	strdeq	r5, [r1], -r4
   150a0:	strdeq	r5, [r1], -r4
   150a4:	strdeq	r5, [r1], -r4
   150a8:	strdeq	r5, [r1], -r4
   150ac:	strdeq	r5, [r1], -r4
   150b0:	strdeq	r5, [r1], -r4
   150b4:	strdeq	r5, [r1], -r4
   150b8:	strdeq	r5, [r1], -r8
   150bc:	strdeq	r5, [r1], -r8
   150c0:	strdeq	r5, [r1], -r8
   150c4:	strdeq	r5, [r1], -r8
   150c8:	strdeq	r5, [r1], -r8
   150cc:	strdeq	r5, [r1], -r8
   150d0:	strdeq	r5, [r1], -r8
   150d4:	strdeq	r5, [r1], -r8
   150d8:	strdeq	r5, [r1], -r8
   150dc:	strdeq	r5, [r1], -r8
   150e0:	strdeq	r5, [r1], -r4
   150e4:	strdeq	r5, [r1], -r4
   150e8:	strdeq	r5, [r1], -r4
   150ec:	strdeq	r5, [r1], -r4
   150f0:	strdeq	r5, [r1], -r4
   150f4:	strdeq	r5, [r1], -r4
   150f8:	strdeq	r5, [r1], -r4
   150fc:	strdeq	r5, [r1], -r8
   15100:	strdeq	r5, [r1], -r8
   15104:	strdeq	r5, [r1], -r8
   15108:	strdeq	r5, [r1], -r8
   1510c:	strdeq	r5, [r1], -r8
   15110:	strdeq	r5, [r1], -r8
   15114:	strdeq	r5, [r1], -r8
   15118:	strdeq	r5, [r1], -r8
   1511c:	strdeq	r5, [r1], -r8
   15120:	strdeq	r5, [r1], -r8
   15124:	strdeq	r5, [r1], -r8
   15128:	strdeq	r5, [r1], -r8
   1512c:	strdeq	r5, [r1], -r8
   15130:	strdeq	r5, [r1], -r8
   15134:	strdeq	r5, [r1], -r8
   15138:	strdeq	r5, [r1], -r8
   1513c:	strdeq	r5, [r1], -r8
   15140:	strdeq	r5, [r1], -r8
   15144:	strdeq	r5, [r1], -r8
   15148:	strdeq	r5, [r1], -r8
   1514c:	strdeq	r5, [r1], -r8
   15150:	strdeq	r5, [r1], -r8
   15154:	strdeq	r5, [r1], -r8
   15158:	strdeq	r5, [r1], -r8
   1515c:	strdeq	r5, [r1], -r8
   15160:	strdeq	r5, [r1], -r8
   15164:	strdeq	r5, [r1], -r4
   15168:	strdeq	r5, [r1], -r4
   1516c:	strdeq	r5, [r1], -r4
   15170:	strdeq	r5, [r1], -r4
   15174:	strdeq	r5, [r1], -r4
   15178:	strdeq	r5, [r1], -r4
   1517c:	strdeq	r5, [r1], -r8
   15180:	strdeq	r5, [r1], -r8
   15184:	strdeq	r5, [r1], -r8
   15188:	strdeq	r5, [r1], -r8
   1518c:	strdeq	r5, [r1], -r8
   15190:	strdeq	r5, [r1], -r8
   15194:	strdeq	r5, [r1], -r8
   15198:	strdeq	r5, [r1], -r8
   1519c:	strdeq	r5, [r1], -r8
   151a0:	strdeq	r5, [r1], -r8
   151a4:	strdeq	r5, [r1], -r8
   151a8:	strdeq	r5, [r1], -r8
   151ac:	strdeq	r5, [r1], -r8
   151b0:	strdeq	r5, [r1], -r8
   151b4:	strdeq	r5, [r1], -r8
   151b8:	strdeq	r5, [r1], -r8
   151bc:	strdeq	r5, [r1], -r8
   151c0:	strdeq	r5, [r1], -r8
   151c4:	strdeq	r5, [r1], -r8
   151c8:	strdeq	r5, [r1], -r8
   151cc:	strdeq	r5, [r1], -r8
   151d0:	strdeq	r5, [r1], -r8
   151d4:	strdeq	r5, [r1], -r8
   151d8:	strdeq	r5, [r1], -r8
   151dc:	strdeq	r5, [r1], -r8
   151e0:	strdeq	r5, [r1], -r8
   151e4:	strdeq	r5, [r1], -r4
   151e8:	strdeq	r5, [r1], -r4
   151ec:	strdeq	r5, [r1], -r4
   151f0:	strdeq	r5, [r1], -r4
   151f4:	bx	lr
   151f8:	mov	r0, #0
   151fc:	bx	lr
   15200:	sub	r0, r0, #9
   15204:	cmp	r0, #23
   15208:	movhi	r0, #0
   1520c:	bxhi	lr
   15210:	bic	r0, r0, #-16777216	; 0xff000000
   15214:	movw	r1, #31
   15218:	movt	r1, #128	; 0x80
   1521c:	mov	r2, #1
   15220:	and	r0, r2, r1, lsr r0
   15224:	bx	lr
   15228:	sub	r1, r0, #65	; 0x41
   1522c:	mov	r0, #0
   15230:	cmp	r1, #26
   15234:	movwcc	r0, #1
   15238:	bx	lr
   1523c:	mov	r1, r0
   15240:	sub	r2, r0, #48	; 0x30
   15244:	mov	r0, #1
   15248:	cmp	r2, #22
   1524c:	bhi	15264 <_obstack_memory_used@@Base+0x28e0>
   15250:	mov	ip, #1
   15254:	movw	r3, #1023	; 0x3ff
   15258:	movt	r3, #126	; 0x7e
   1525c:	tst	r3, ip, lsl r2
   15260:	bxne	lr
   15264:	sub	r1, r1, #97	; 0x61
   15268:	cmp	r1, #6
   1526c:	movcs	r0, #0
   15270:	bxcs	lr
   15274:	bx	lr
   15278:	sub	r1, r0, #65	; 0x41
   1527c:	cmp	r1, #26
   15280:	addcc	r0, r0, #32
   15284:	bx	lr
   15288:	sub	r1, r0, #97	; 0x61
   1528c:	cmp	r1, #26
   15290:	subcc	r0, r0, #32
   15294:	bx	lr
   15298:	push	{r4, r5, r6, sl, fp, lr}
   1529c:	add	fp, sp, #16
   152a0:	mov	r4, r0
   152a4:	bl	10fa8 <__fpending@plt>
   152a8:	mov	r5, r0
   152ac:	mov	r0, r4
   152b0:	bl	10fb4 <ferror_unlocked@plt>
   152b4:	mov	r6, r0
   152b8:	mov	r0, r4
   152bc:	bl	122d8 <close@plt+0x11a4>
   152c0:	cmp	r6, #0
   152c4:	beq	152e8 <_obstack_memory_used@@Base+0x2964>
   152c8:	mvn	r4, #0
   152cc:	cmp	r0, #0
   152d0:	bne	15314 <_obstack_memory_used@@Base+0x2990>
   152d4:	bl	11080 <__errno_location@plt>
   152d8:	mov	r1, #0
   152dc:	str	r1, [r0]
   152e0:	mov	r0, r4
   152e4:	pop	{r4, r5, r6, sl, fp, pc}
   152e8:	cmp	r0, #0
   152ec:	mov	r4, r0
   152f0:	mvnne	r4, #0
   152f4:	cmp	r5, #0
   152f8:	bne	15314 <_obstack_memory_used@@Base+0x2990>
   152fc:	cmp	r0, #0
   15300:	beq	15314 <_obstack_memory_used@@Base+0x2990>
   15304:	bl	11080 <__errno_location@plt>
   15308:	ldr	r0, [r0]
   1530c:	subs	r4, r0, #9
   15310:	mvnne	r4, #0
   15314:	mov	r0, r4
   15318:	pop	{r4, r5, r6, sl, fp, pc}
   1531c:	push	{fp, lr}
   15320:	mov	fp, sp
   15324:	bl	11080 <__errno_location@plt>
   15328:	mov	r1, #12
   1532c:	str	r1, [r0]
   15330:	mov	r0, #0
   15334:	pop	{fp, pc}
   15338:	b	14ef0 <_obstack_memory_used@@Base+0x256c>
   1533c:	cmp	r1, #0
   15340:	orreq	r1, r1, #1
   15344:	b	14f20 <_obstack_memory_used@@Base+0x259c>
   15348:	b	14e9c <_obstack_memory_used@@Base+0x2518>
   1534c:	clz	r3, r2
   15350:	lsr	ip, r3, #5
   15354:	clz	r3, r1
   15358:	lsr	r3, r3, #5
   1535c:	orrs	r3, r3, ip
   15360:	movwne	r1, #1
   15364:	movwne	r2, #1
   15368:	b	15408 <_obstack_memory_used@@Base+0x2a84>
   1536c:	push	{fp, lr}
   15370:	mov	fp, sp
   15374:	mov	r0, #14
   15378:	bl	110f8 <nl_langinfo@plt>
   1537c:	movw	r1, #23315	; 0x5b13
   15380:	movt	r1, #1
   15384:	cmp	r0, #0
   15388:	movne	r1, r0
   1538c:	ldrb	r2, [r1]
   15390:	movw	r0, #29688	; 0x73f8
   15394:	movt	r0, #1
   15398:	cmp	r2, #0
   1539c:	movne	r0, r1
   153a0:	pop	{fp, pc}
   153a4:	push	{r4, r5, r6, r7, fp, lr}
   153a8:	add	fp, sp, #16
   153ac:	sub	sp, sp, #8
   153b0:	mov	r7, r2
   153b4:	mov	r4, r1
   153b8:	add	r5, sp, #4
   153bc:	cmp	r0, #0
   153c0:	movne	r5, r0
   153c4:	mov	r0, r5
   153c8:	bl	10fc0 <mbrtowc@plt>
   153cc:	mov	r6, r0
   153d0:	cmp	r7, #0
   153d4:	beq	153fc <_obstack_memory_used@@Base+0x2a78>
   153d8:	cmn	r6, #2
   153dc:	bcc	153fc <_obstack_memory_used@@Base+0x2a78>
   153e0:	mov	r0, #0
   153e4:	bl	15444 <_obstack_memory_used@@Base+0x2ac0>
   153e8:	cmp	r0, #0
   153ec:	bne	153fc <_obstack_memory_used@@Base+0x2a78>
   153f0:	ldrb	r0, [r4]
   153f4:	str	r0, [r5]
   153f8:	mov	r6, #1
   153fc:	mov	r0, r6
   15400:	sub	sp, fp, #16
   15404:	pop	{r4, r5, r6, r7, fp, pc}
   15408:	cmp	r2, #0
   1540c:	beq	1543c <_obstack_memory_used@@Base+0x2ab8>
   15410:	mvn	r3, #0
   15414:	udiv	r3, r3, r2
   15418:	cmp	r3, r1
   1541c:	bcs	1543c <_obstack_memory_used@@Base+0x2ab8>
   15420:	push	{fp, lr}
   15424:	mov	fp, sp
   15428:	bl	11080 <__errno_location@plt>
   1542c:	mov	r1, #12
   15430:	str	r1, [r0]
   15434:	mov	r0, #0
   15438:	pop	{fp, pc}
   1543c:	mul	r1, r2, r1
   15440:	b	14f20 <_obstack_memory_used@@Base+0x259c>
   15444:	push	{r4, sl, fp, lr}
   15448:	add	fp, sp, #8
   1544c:	sub	sp, sp, #264	; 0x108
   15450:	add	r1, sp, #7
   15454:	movw	r2, #257	; 0x101
   15458:	bl	154b0 <_obstack_memory_used@@Base+0x2b2c>
   1545c:	mov	r4, #0
   15460:	cmp	r0, #0
   15464:	bne	154a4 <_obstack_memory_used@@Base+0x2b20>
   15468:	add	r0, sp, #7
   1546c:	movw	r1, #23592	; 0x5c28
   15470:	movt	r1, #1
   15474:	mov	r2, #2
   15478:	bl	11068 <bcmp@plt>
   1547c:	cmp	r0, #0
   15480:	beq	154a4 <_obstack_memory_used@@Base+0x2b20>
   15484:	add	r0, sp, #7
   15488:	movw	r1, #29694	; 0x73fe
   1548c:	movt	r1, #1
   15490:	mov	r2, #6
   15494:	bl	11068 <bcmp@plt>
   15498:	mov	r4, r0
   1549c:	cmp	r0, #0
   154a0:	movwne	r4, #1
   154a4:	mov	r0, r4
   154a8:	sub	sp, fp, #8
   154ac:	pop	{r4, sl, fp, pc}
   154b0:	b	154b4 <_obstack_memory_used@@Base+0x2b30>
   154b4:	push	{r4, r5, r6, r7, fp, lr}
   154b8:	add	fp, sp, #16
   154bc:	mov	r6, r2
   154c0:	mov	r4, r1
   154c4:	bl	1554c <_obstack_memory_used@@Base+0x2bc8>
   154c8:	cmp	r0, #0
   154cc:	beq	154fc <_obstack_memory_used@@Base+0x2b78>
   154d0:	mov	r7, r0
   154d4:	bl	11074 <strlen@plt>
   154d8:	cmp	r0, r6
   154dc:	bcs	15518 <_obstack_memory_used@@Base+0x2b94>
   154e0:	add	r2, r0, #1
   154e4:	mov	r0, r4
   154e8:	mov	r1, r7
   154ec:	bl	10f24 <memcpy@plt>
   154f0:	mov	r5, #0
   154f4:	mov	r0, r5
   154f8:	pop	{r4, r5, r6, r7, fp, pc}
   154fc:	mov	r5, #22
   15500:	cmp	r6, #0
   15504:	beq	15540 <_obstack_memory_used@@Base+0x2bbc>
   15508:	mov	r0, #0
   1550c:	strb	r0, [r4]
   15510:	mov	r0, r5
   15514:	pop	{r4, r5, r6, r7, fp, pc}
   15518:	mov	r5, #34	; 0x22
   1551c:	cmp	r6, #0
   15520:	beq	15540 <_obstack_memory_used@@Base+0x2bbc>
   15524:	sub	r6, r6, #1
   15528:	mov	r0, r4
   1552c:	mov	r1, r7
   15530:	mov	r2, r6
   15534:	bl	10f24 <memcpy@plt>
   15538:	mov	r0, #0
   1553c:	strb	r0, [r4, r6]
   15540:	mov	r0, r5
   15544:	pop	{r4, r5, r6, r7, fp, pc}
   15548:	b	1554c <_obstack_memory_used@@Base+0x2bc8>
   1554c:	mov	r1, #0
   15550:	b	110e0 <setlocale@plt>
   15554:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15558:	mov	r7, r0
   1555c:	ldr	r6, [pc, #72]	; 155ac <_obstack_memory_used@@Base+0x2c28>
   15560:	ldr	r5, [pc, #72]	; 155b0 <_obstack_memory_used@@Base+0x2c2c>
   15564:	add	r6, pc, r6
   15568:	add	r5, pc, r5
   1556c:	sub	r6, r6, r5
   15570:	mov	r8, r1
   15574:	mov	r9, r2
   15578:	bl	10ebc <calloc@plt-0x20>
   1557c:	asrs	r6, r6, #2
   15580:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15584:	mov	r4, #0
   15588:	add	r4, r4, #1
   1558c:	ldr	r3, [r5], #4
   15590:	mov	r2, r9
   15594:	mov	r1, r8
   15598:	mov	r0, r7
   1559c:	blx	r3
   155a0:	cmp	r6, r4
   155a4:	bne	15588 <_obstack_memory_used@@Base+0x2c04>
   155a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   155ac:	andeq	r2, r1, r0, lsr #19
   155b0:	muleq	r1, r8, r9
   155b4:	bx	lr
   155b8:	ldr	r3, [pc, #12]	; 155cc <_obstack_memory_used@@Base+0x2c48>
   155bc:	mov	r1, #0
   155c0:	add	r3, pc, r3
   155c4:	ldr	r2, [r3]
   155c8:	b	1108c <__cxa_atexit@plt>
   155cc:	andeq	r2, r1, ip, lsl fp

Disassembly of section .fini:

000155d0 <.fini>:
   155d0:	push	{r3, lr}
   155d4:	pop	{r3, pc}
