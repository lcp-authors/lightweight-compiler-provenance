
../repos/coreutils/src/chgrp:     file format elf32-littlearm


Disassembly of section .init:

00010f94 <.init>:
   10f94:	push	{r3, lr}
   10f98:	bl	11344 <__assert_fail@plt+0x48>
   10f9c:	pop	{r3, pc}

Disassembly of section .plt:

00010fa0 <fstatfs64@plt-0x14>:
   10fa0:	push	{lr}		; (str lr, [sp, #-4]!)
   10fa4:	ldr	lr, [pc, #4]	; 10fb0 <fstatfs64@plt-0x4>
   10fa8:	add	lr, pc, lr
   10fac:	ldr	pc, [lr, #8]!
   10fb0:	andeq	pc, r1, r0, asr r0	; <UNPREDICTABLE>

00010fb4 <fstatfs64@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #126976	; 0x1f000
   10fbc:	ldr	pc, [ip, #80]!	; 0x50

00010fc0 <calloc@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #126976	; 0x1f000
   10fc8:	ldr	pc, [ip, #72]!	; 0x48

00010fcc <endgrent@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #126976	; 0x1f000
   10fd4:	ldr	pc, [ip, #64]!	; 0x40

00010fd8 <fputs_unlocked@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #126976	; 0x1f000
   10fe0:	ldr	pc, [ip, #56]!	; 0x38

00010fe4 <raise@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #126976	; 0x1f000
   10fec:	ldr	pc, [ip, #48]!	; 0x30

00010ff0 <strcmp@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #126976	; 0x1f000
   10ff8:	ldr	pc, [ip, #40]!	; 0x28

00010ffc <getpwuid@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #126976	; 0x1f000
   11004:	ldr	pc, [ip, #32]!

00011008 <printf@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #126976	; 0x1f000
   11010:	ldr	pc, [ip, #24]!

00011014 <fflush@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #126976	; 0x1f000
   1101c:	ldr	pc, [ip, #16]!

00011020 <memmove@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #126976	; 0x1f000
   11028:	ldr	pc, [ip, #8]!

0001102c <free@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #126976	; 0x1f000
   11034:	ldr	pc, [ip, #0]!

00011038 <_exit@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #122880	; 0x1e000
   11040:	ldr	pc, [ip, #4088]!	; 0xff8

00011044 <memcpy@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #122880	; 0x1e000
   1104c:	ldr	pc, [ip, #4080]!	; 0xff0

00011050 <mbsinit@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #122880	; 0x1e000
   11058:	ldr	pc, [ip, #4072]!	; 0xfe8

0001105c <memcmp@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #122880	; 0x1e000
   11064:	ldr	pc, [ip, #4064]!	; 0xfe0

00011068 <stpcpy@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #122880	; 0x1e000
   11070:	ldr	pc, [ip, #4056]!	; 0xfd8

00011074 <fputc_unlocked@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #122880	; 0x1e000
   1107c:	ldr	pc, [ip, #4048]!	; 0xfd0

00011080 <realloc@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #122880	; 0x1e000
   11088:	ldr	pc, [ip, #4040]!	; 0xfc8

0001108c <textdomain@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #122880	; 0x1e000
   11094:	ldr	pc, [ip, #4032]!	; 0xfc0

00011098 <__fxstatat64@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #122880	; 0x1e000
   110a0:	ldr	pc, [ip, #4024]!	; 0xfb8

000110a4 <iswprint@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #122880	; 0x1e000
   110ac:	ldr	pc, [ip, #4016]!	; 0xfb0

000110b0 <__fxstat64@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #122880	; 0x1e000
   110b8:	ldr	pc, [ip, #4008]!	; 0xfa8

000110bc <fwrite@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #122880	; 0x1e000
   110c4:	ldr	pc, [ip, #4000]!	; 0xfa0

000110c8 <lseek64@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #122880	; 0x1e000
   110d0:	ldr	pc, [ip, #3992]!	; 0xf98

000110d4 <__ctype_get_mb_cur_max@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #122880	; 0x1e000
   110dc:	ldr	pc, [ip, #3984]!	; 0xf90

000110e0 <strcpy@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #122880	; 0x1e000
   110e8:	ldr	pc, [ip, #3976]!	; 0xf88

000110ec <__fpending@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #122880	; 0x1e000
   110f4:	ldr	pc, [ip, #3968]!	; 0xf80

000110f8 <ferror_unlocked@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #122880	; 0x1e000
   11100:	ldr	pc, [ip, #3960]!	; 0xf78

00011104 <mbrtowc@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #122880	; 0x1e000
   1110c:	ldr	pc, [ip, #3952]!	; 0xf70

00011110 <error@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #122880	; 0x1e000
   11118:	ldr	pc, [ip, #3944]!	; 0xf68

0001111c <open64@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #122880	; 0x1e000
   11124:	ldr	pc, [ip, #3936]!	; 0xf60

00011128 <malloc@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #122880	; 0x1e000
   11130:	ldr	pc, [ip, #3928]!	; 0xf58

00011134 <__libc_start_main@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #122880	; 0x1e000
   1113c:	ldr	pc, [ip, #3920]!	; 0xf50

00011140 <__freading@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #122880	; 0x1e000
   11148:	ldr	pc, [ip, #3912]!	; 0xf48

0001114c <__gmon_start__@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #122880	; 0x1e000
   11154:	ldr	pc, [ip, #3904]!	; 0xf40

00011158 <getopt_long@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #122880	; 0x1e000
   11160:	ldr	pc, [ip, #3896]!	; 0xf38

00011164 <__ctype_b_loc@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #122880	; 0x1e000
   1116c:	ldr	pc, [ip, #3888]!	; 0xf30

00011170 <exit@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #122880	; 0x1e000
   11178:	ldr	pc, [ip, #3880]!	; 0xf28

0001117c <gettext@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #122880	; 0x1e000
   11184:	ldr	pc, [ip, #3872]!	; 0xf20

00011188 <strlen@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #122880	; 0x1e000
   11190:	ldr	pc, [ip, #3864]!	; 0xf18

00011194 <strchr@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #122880	; 0x1e000
   1119c:	ldr	pc, [ip, #3856]!	; 0xf10

000111a0 <openat64@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #122880	; 0x1e000
   111a8:	ldr	pc, [ip, #3848]!	; 0xf08

000111ac <fchown@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #122880	; 0x1e000
   111b4:	ldr	pc, [ip, #3840]!	; 0xf00

000111b8 <fprintf@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #122880	; 0x1e000
   111c0:	ldr	pc, [ip, #3832]!	; 0xef8

000111c4 <__errno_location@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #122880	; 0x1e000
   111cc:	ldr	pc, [ip, #3824]!	; 0xef0

000111d0 <__cxa_atexit@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #122880	; 0x1e000
   111d8:	ldr	pc, [ip, #3816]!	; 0xee8

000111dc <memset@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #122880	; 0x1e000
   111e4:	ldr	pc, [ip, #3808]!	; 0xee0

000111e8 <fileno@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #122880	; 0x1e000
   111f0:	ldr	pc, [ip, #3800]!	; 0xed8

000111f4 <strtoumax@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #122880	; 0x1e000
   111fc:	ldr	pc, [ip, #3792]!	; 0xed0

00011200 <fclose@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #122880	; 0x1e000
   11208:	ldr	pc, [ip, #3784]!	; 0xec8

0001120c <fseeko64@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #122880	; 0x1e000
   11214:	ldr	pc, [ip, #3776]!	; 0xec0

00011218 <fcntl64@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #122880	; 0x1e000
   11220:	ldr	pc, [ip, #3768]!	; 0xeb8

00011224 <setlocale@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #122880	; 0x1e000
   1122c:	ldr	pc, [ip, #3760]!	; 0xeb0

00011230 <strrchr@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #122880	; 0x1e000
   11238:	ldr	pc, [ip, #3752]!	; 0xea8

0001123c <nl_langinfo@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #122880	; 0x1e000
   11244:	ldr	pc, [ip, #3744]!	; 0xea0

00011248 <readdir64@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #122880	; 0x1e000
   11250:	ldr	pc, [ip, #3736]!	; 0xe98

00011254 <fdopendir@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #122880	; 0x1e000
   1125c:	ldr	pc, [ip, #3728]!	; 0xe90

00011260 <dirfd@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #122880	; 0x1e000
   11268:	ldr	pc, [ip, #3720]!	; 0xe88

0001126c <fchdir@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #122880	; 0x1e000
   11274:	ldr	pc, [ip, #3712]!	; 0xe80

00011278 <qsort@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #122880	; 0x1e000
   11280:	ldr	pc, [ip, #3704]!	; 0xe78

00011284 <fchownat@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #122880	; 0x1e000
   1128c:	ldr	pc, [ip, #3696]!	; 0xe70

00011290 <bindtextdomain@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #122880	; 0x1e000
   11298:	ldr	pc, [ip, #3688]!	; 0xe68

0001129c <__xstat64@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #122880	; 0x1e000
   112a4:	ldr	pc, [ip, #3680]!	; 0xe60

000112a8 <strncmp@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #122880	; 0x1e000
   112b0:	ldr	pc, [ip, #3672]!	; 0xe58

000112b4 <abort@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #122880	; 0x1e000
   112bc:	ldr	pc, [ip, #3664]!	; 0xe50

000112c0 <close@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #122880	; 0x1e000
   112c8:	ldr	pc, [ip, #3656]!	; 0xe48

000112cc <__lxstat64@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #122880	; 0x1e000
   112d4:	ldr	pc, [ip, #3648]!	; 0xe40

000112d8 <closedir@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #122880	; 0x1e000
   112e0:	ldr	pc, [ip, #3640]!	; 0xe38

000112e4 <getgrgid@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #122880	; 0x1e000
   112ec:	ldr	pc, [ip, #3632]!	; 0xe30

000112f0 <getgrnam@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #122880	; 0x1e000
   112f8:	ldr	pc, [ip, #3624]!	; 0xe28

000112fc <__assert_fail@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #122880	; 0x1e000
   11304:	ldr	pc, [ip, #3616]!	; 0xe20

Disassembly of section .text:

00011308 <.text>:
   11308:	mov	fp, #0
   1130c:	mov	lr, #0
   11310:	pop	{r1}		; (ldr r1, [sp], #4)
   11314:	mov	r2, sp
   11318:	push	{r2}		; (str r2, [sp, #-4]!)
   1131c:	push	{r0}		; (str r0, [sp, #-4]!)
   11320:	ldr	ip, [pc, #16]	; 11338 <__assert_fail@plt+0x3c>
   11324:	push	{ip}		; (str ip, [sp, #-4]!)
   11328:	ldr	r0, [pc, #12]	; 1133c <__assert_fail@plt+0x40>
   1132c:	ldr	r3, [pc, #12]	; 11340 <__assert_fail@plt+0x44>
   11330:	bl	11134 <__libc_start_main@plt>
   11334:	bl	112b4 <abort@plt>
   11338:	andeq	lr, r1, r4, lsr #18
   1133c:	ldrdeq	r1, [r1], -r0
   11340:	andeq	lr, r1, r4, asr #17
   11344:	ldr	r3, [pc, #20]	; 11360 <__assert_fail@plt+0x64>
   11348:	ldr	r2, [pc, #20]	; 11364 <__assert_fail@plt+0x68>
   1134c:	add	r3, pc, r3
   11350:	ldr	r2, [r3, r2]
   11354:	cmp	r2, #0
   11358:	bxeq	lr
   1135c:	b	1114c <__gmon_start__@plt>
   11360:	andeq	lr, r1, ip, lsr #25
   11364:	andeq	r0, r0, r8, lsr #2
   11368:	ldr	r3, [pc, #28]	; 1138c <__assert_fail@plt+0x90>
   1136c:	ldr	r0, [pc, #28]	; 11390 <__assert_fail@plt+0x94>
   11370:	sub	r3, r3, r0
   11374:	cmp	r3, #6
   11378:	bxls	lr
   1137c:	ldr	r3, [pc, #16]	; 11394 <__assert_fail@plt+0x98>
   11380:	cmp	r3, #0
   11384:	bxeq	lr
   11388:	bx	r3
   1138c:	andeq	r0, r3, pc, ror r1
   11390:	andeq	r0, r3, ip, ror r1
   11394:	andeq	r0, r0, r0
   11398:	ldr	r1, [pc, #36]	; 113c4 <__assert_fail@plt+0xc8>
   1139c:	ldr	r0, [pc, #36]	; 113c8 <__assert_fail@plt+0xcc>
   113a0:	sub	r1, r1, r0
   113a4:	asr	r1, r1, #2
   113a8:	add	r1, r1, r1, lsr #31
   113ac:	asrs	r1, r1, #1
   113b0:	bxeq	lr
   113b4:	ldr	r3, [pc, #16]	; 113cc <__assert_fail@plt+0xd0>
   113b8:	cmp	r3, #0
   113bc:	bxeq	lr
   113c0:	bx	r3
   113c4:	andeq	r0, r3, ip, ror r1
   113c8:	andeq	r0, r3, ip, ror r1
   113cc:	andeq	r0, r0, r0
   113d0:	push	{r4, lr}
   113d4:	ldr	r4, [pc, #24]	; 113f4 <__assert_fail@plt+0xf8>
   113d8:	ldrb	r3, [r4]
   113dc:	cmp	r3, #0
   113e0:	popne	{r4, pc}
   113e4:	bl	11368 <__assert_fail@plt+0x6c>
   113e8:	mov	r3, #1
   113ec:	strb	r3, [r4]
   113f0:	pop	{r4, pc}
   113f4:	muleq	r3, ip, r1
   113f8:	ldr	r0, [pc, #40]	; 11428 <__assert_fail@plt+0x12c>
   113fc:	ldr	r3, [r0]
   11400:	cmp	r3, #0
   11404:	bne	1140c <__assert_fail@plt+0x110>
   11408:	b	11398 <__assert_fail@plt+0x9c>
   1140c:	ldr	r3, [pc, #24]	; 1142c <__assert_fail@plt+0x130>
   11410:	cmp	r3, #0
   11414:	beq	11408 <__assert_fail@plt+0x10c>
   11418:	push	{r4, lr}
   1141c:	blx	r3
   11420:	pop	{r4, lr}
   11424:	b	11398 <__assert_fail@plt+0x9c>
   11428:	andeq	pc, r2, r4, lsl pc	; <UNPREDICTABLE>
   1142c:	andeq	r0, r0, r0
   11430:	push	{fp, lr}
   11434:	add	fp, sp, #4
   11438:	sub	sp, sp, #80	; 0x50
   1143c:	str	r0, [fp, #-80]	; 0xffffffb0
   11440:	ldr	r3, [pc, #348]	; 115a4 <__assert_fail@plt+0x2a8>
   11444:	sub	ip, fp, #72	; 0x48
   11448:	mov	lr, r3
   1144c:	ldm	lr!, {r0, r1, r2, r3}
   11450:	stmia	ip!, {r0, r1, r2, r3}
   11454:	ldm	lr!, {r0, r1, r2, r3}
   11458:	stmia	ip!, {r0, r1, r2, r3}
   1145c:	ldm	lr!, {r0, r1, r2, r3}
   11460:	stmia	ip!, {r0, r1, r2, r3}
   11464:	ldm	lr, {r0, r1}
   11468:	stm	ip, {r0, r1}
   1146c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11470:	str	r3, [fp, #-8]
   11474:	sub	r3, fp, #72	; 0x48
   11478:	str	r3, [fp, #-12]
   1147c:	b	1148c <__assert_fail@plt+0x190>
   11480:	ldr	r3, [fp, #-12]
   11484:	add	r3, r3, #8
   11488:	str	r3, [fp, #-12]
   1148c:	ldr	r3, [fp, #-12]
   11490:	ldr	r3, [r3]
   11494:	cmp	r3, #0
   11498:	beq	114bc <__assert_fail@plt+0x1c0>
   1149c:	ldr	r3, [fp, #-12]
   114a0:	ldr	r3, [r3]
   114a4:	mov	r1, r3
   114a8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   114ac:	bl	10ff0 <strcmp@plt>
   114b0:	mov	r3, r0
   114b4:	cmp	r3, #0
   114b8:	bne	11480 <__assert_fail@plt+0x184>
   114bc:	ldr	r3, [fp, #-12]
   114c0:	ldr	r3, [r3, #4]
   114c4:	cmp	r3, #0
   114c8:	beq	114d8 <__assert_fail@plt+0x1dc>
   114cc:	ldr	r3, [fp, #-12]
   114d0:	ldr	r3, [r3, #4]
   114d4:	str	r3, [fp, #-8]
   114d8:	ldr	r0, [pc, #200]	; 115a8 <__assert_fail@plt+0x2ac>
   114dc:	bl	1117c <gettext@plt>
   114e0:	mov	r3, r0
   114e4:	ldr	r2, [pc, #192]	; 115ac <__assert_fail@plt+0x2b0>
   114e8:	ldr	r1, [pc, #192]	; 115b0 <__assert_fail@plt+0x2b4>
   114ec:	mov	r0, r3
   114f0:	bl	11008 <printf@plt>
   114f4:	mov	r1, #0
   114f8:	mov	r0, #5
   114fc:	bl	11224 <setlocale@plt>
   11500:	str	r0, [fp, #-16]
   11504:	ldr	r3, [fp, #-16]
   11508:	cmp	r3, #0
   1150c:	beq	1154c <__assert_fail@plt+0x250>
   11510:	mov	r2, #3
   11514:	ldr	r1, [pc, #152]	; 115b4 <__assert_fail@plt+0x2b8>
   11518:	ldr	r0, [fp, #-16]
   1151c:	bl	112a8 <strncmp@plt>
   11520:	mov	r3, r0
   11524:	cmp	r3, #0
   11528:	beq	1154c <__assert_fail@plt+0x250>
   1152c:	ldr	r0, [pc, #132]	; 115b8 <__assert_fail@plt+0x2bc>
   11530:	bl	1117c <gettext@plt>
   11534:	mov	r2, r0
   11538:	ldr	r3, [pc, #124]	; 115bc <__assert_fail@plt+0x2c0>
   1153c:	ldr	r3, [r3]
   11540:	mov	r1, r3
   11544:	mov	r0, r2
   11548:	bl	10fd8 <fputs_unlocked@plt>
   1154c:	ldr	r0, [pc, #108]	; 115c0 <__assert_fail@plt+0x2c4>
   11550:	bl	1117c <gettext@plt>
   11554:	mov	r3, r0
   11558:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1155c:	ldr	r1, [pc, #72]	; 115ac <__assert_fail@plt+0x2b0>
   11560:	mov	r0, r3
   11564:	bl	11008 <printf@plt>
   11568:	ldr	r0, [pc, #84]	; 115c4 <__assert_fail@plt+0x2c8>
   1156c:	bl	1117c <gettext@plt>
   11570:	ldr	r2, [fp, #-8]
   11574:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11578:	cmp	r2, r3
   1157c:	bne	11588 <__assert_fail@plt+0x28c>
   11580:	ldr	r3, [pc, #64]	; 115c8 <__assert_fail@plt+0x2cc>
   11584:	b	1158c <__assert_fail@plt+0x290>
   11588:	ldr	r3, [pc, #60]	; 115cc <__assert_fail@plt+0x2d0>
   1158c:	mov	r2, r3
   11590:	ldr	r1, [fp, #-8]
   11594:	bl	11008 <printf@plt>
   11598:	nop			; (mov r0, r0)
   1159c:	sub	sp, fp, #4
   115a0:	pop	{fp, pc}
   115a4:	andeq	lr, r1, r8, lsl fp
   115a8:	andeq	lr, r1, r4, lsr #19
   115ac:			; <UNDEFINED> instruction: 0x0001e9bc
   115b0:	andeq	lr, r1, r4, ror #19
   115b4:	strdeq	lr, [r1], -r4
   115b8:	strdeq	lr, [r1], -r8
   115bc:	muleq	r3, r4, r1
   115c0:	andeq	lr, r1, r0, asr #20
   115c4:	andeq	lr, r1, ip, asr sl
   115c8:	muleq	r1, r0, sl
   115cc:	muleq	r1, ip, sl
   115d0:	push	{r4, fp, lr}
   115d4:	add	fp, sp, #8
   115d8:	sub	sp, sp, #36	; 0x24
   115dc:	str	r0, [fp, #-32]	; 0xffffffe0
   115e0:	mvn	r3, #0
   115e4:	str	r3, [fp, #-16]
   115e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   115ec:	ldrb	r3, [r3]
   115f0:	cmp	r3, #0
   115f4:	beq	1169c <__assert_fail@plt+0x3a0>
   115f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   115fc:	bl	112f0 <getgrnam@plt>
   11600:	str	r0, [fp, #-20]	; 0xffffffec
   11604:	ldr	r3, [fp, #-20]	; 0xffffffec
   11608:	cmp	r3, #0
   1160c:	beq	11620 <__assert_fail@plt+0x324>
   11610:	ldr	r3, [fp, #-20]	; 0xffffffec
   11614:	ldr	r3, [r3, #8]
   11618:	str	r3, [fp, #-16]
   1161c:	b	11698 <__assert_fail@plt+0x39c>
   11620:	sub	r2, fp, #28
   11624:	ldr	r3, [pc, #128]	; 116ac <__assert_fail@plt+0x3b0>
   11628:	str	r3, [sp]
   1162c:	mov	r3, r2
   11630:	mov	r2, #10
   11634:	mov	r1, #0
   11638:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1163c:	bl	1c3c4 <__assert_fail@plt+0xb0c8>
   11640:	mov	r3, r0
   11644:	cmp	r3, #0
   11648:	bne	11664 <__assert_fail@plt+0x368>
   1164c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11650:	mvn	r0, #0
   11654:	mov	r1, #0
   11658:	cmp	r3, r1
   1165c:	cmpeq	r2, r0
   11660:	bls	1168c <__assert_fail@plt+0x390>
   11664:	ldr	r0, [pc, #68]	; 116b0 <__assert_fail@plt+0x3b4>
   11668:	bl	1117c <gettext@plt>
   1166c:	mov	r4, r0
   11670:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11674:	bl	1ac98 <__assert_fail@plt+0x999c>
   11678:	mov	r3, r0
   1167c:	mov	r2, r4
   11680:	mov	r1, #0
   11684:	mov	r0, #1
   11688:	bl	11110 <error@plt>
   1168c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11690:	mov	r3, r2
   11694:	str	r3, [fp, #-16]
   11698:	bl	10fcc <endgrent@plt>
   1169c:	ldr	r3, [fp, #-16]
   116a0:	mov	r0, r3
   116a4:	sub	sp, fp, #8
   116a8:	pop	{r4, fp, pc}
   116ac:	muleq	r1, ip, sl
   116b0:	andeq	lr, r1, r8, lsr #25
   116b4:	push	{r4, fp, lr}
   116b8:	add	fp, sp, #8
   116bc:	sub	sp, sp, #12
   116c0:	str	r0, [fp, #-16]
   116c4:	ldr	r3, [fp, #-16]
   116c8:	cmp	r3, #0
   116cc:	beq	116fc <__assert_fail@plt+0x400>
   116d0:	ldr	r3, [pc, #436]	; 1188c <__assert_fail@plt+0x590>
   116d4:	ldr	r4, [r3]
   116d8:	ldr	r0, [pc, #432]	; 11890 <__assert_fail@plt+0x594>
   116dc:	bl	1117c <gettext@plt>
   116e0:	mov	r1, r0
   116e4:	ldr	r3, [pc, #424]	; 11894 <__assert_fail@plt+0x598>
   116e8:	ldr	r3, [r3]
   116ec:	mov	r2, r3
   116f0:	mov	r0, r4
   116f4:	bl	111b8 <fprintf@plt>
   116f8:	b	11884 <__assert_fail@plt+0x588>
   116fc:	ldr	r0, [pc, #404]	; 11898 <__assert_fail@plt+0x59c>
   11700:	bl	1117c <gettext@plt>
   11704:	ldr	r3, [pc, #392]	; 11894 <__assert_fail@plt+0x598>
   11708:	ldr	r1, [r3]
   1170c:	ldr	r3, [pc, #384]	; 11894 <__assert_fail@plt+0x598>
   11710:	ldr	r3, [r3]
   11714:	mov	r2, r3
   11718:	bl	11008 <printf@plt>
   1171c:	ldr	r0, [pc, #376]	; 1189c <__assert_fail@plt+0x5a0>
   11720:	bl	1117c <gettext@plt>
   11724:	mov	r2, r0
   11728:	ldr	r3, [pc, #368]	; 118a0 <__assert_fail@plt+0x5a4>
   1172c:	ldr	r3, [r3]
   11730:	mov	r1, r3
   11734:	mov	r0, r2
   11738:	bl	10fd8 <fputs_unlocked@plt>
   1173c:	ldr	r0, [pc, #352]	; 118a4 <__assert_fail@plt+0x5a8>
   11740:	bl	1117c <gettext@plt>
   11744:	mov	r2, r0
   11748:	ldr	r3, [pc, #336]	; 118a0 <__assert_fail@plt+0x5a4>
   1174c:	ldr	r3, [r3]
   11750:	mov	r1, r3
   11754:	mov	r0, r2
   11758:	bl	10fd8 <fputs_unlocked@plt>
   1175c:	ldr	r0, [pc, #324]	; 118a8 <__assert_fail@plt+0x5ac>
   11760:	bl	1117c <gettext@plt>
   11764:	mov	r2, r0
   11768:	ldr	r3, [pc, #304]	; 118a0 <__assert_fail@plt+0x5a4>
   1176c:	ldr	r3, [r3]
   11770:	mov	r1, r3
   11774:	mov	r0, r2
   11778:	bl	10fd8 <fputs_unlocked@plt>
   1177c:	ldr	r0, [pc, #296]	; 118ac <__assert_fail@plt+0x5b0>
   11780:	bl	1117c <gettext@plt>
   11784:	mov	r2, r0
   11788:	ldr	r3, [pc, #272]	; 118a0 <__assert_fail@plt+0x5a4>
   1178c:	ldr	r3, [r3]
   11790:	mov	r1, r3
   11794:	mov	r0, r2
   11798:	bl	10fd8 <fputs_unlocked@plt>
   1179c:	ldr	r0, [pc, #268]	; 118b0 <__assert_fail@plt+0x5b4>
   117a0:	bl	1117c <gettext@plt>
   117a4:	mov	r2, r0
   117a8:	ldr	r3, [pc, #240]	; 118a0 <__assert_fail@plt+0x5a4>
   117ac:	ldr	r3, [r3]
   117b0:	mov	r1, r3
   117b4:	mov	r0, r2
   117b8:	bl	10fd8 <fputs_unlocked@plt>
   117bc:	ldr	r0, [pc, #240]	; 118b4 <__assert_fail@plt+0x5b8>
   117c0:	bl	1117c <gettext@plt>
   117c4:	mov	r2, r0
   117c8:	ldr	r3, [pc, #208]	; 118a0 <__assert_fail@plt+0x5a4>
   117cc:	ldr	r3, [r3]
   117d0:	mov	r1, r3
   117d4:	mov	r0, r2
   117d8:	bl	10fd8 <fputs_unlocked@plt>
   117dc:	ldr	r0, [pc, #212]	; 118b8 <__assert_fail@plt+0x5bc>
   117e0:	bl	1117c <gettext@plt>
   117e4:	mov	r2, r0
   117e8:	ldr	r3, [pc, #176]	; 118a0 <__assert_fail@plt+0x5a4>
   117ec:	ldr	r3, [r3]
   117f0:	mov	r1, r3
   117f4:	mov	r0, r2
   117f8:	bl	10fd8 <fputs_unlocked@plt>
   117fc:	ldr	r0, [pc, #184]	; 118bc <__assert_fail@plt+0x5c0>
   11800:	bl	1117c <gettext@plt>
   11804:	mov	r2, r0
   11808:	ldr	r3, [pc, #144]	; 118a0 <__assert_fail@plt+0x5a4>
   1180c:	ldr	r3, [r3]
   11810:	mov	r1, r3
   11814:	mov	r0, r2
   11818:	bl	10fd8 <fputs_unlocked@plt>
   1181c:	ldr	r0, [pc, #156]	; 118c0 <__assert_fail@plt+0x5c4>
   11820:	bl	1117c <gettext@plt>
   11824:	mov	r2, r0
   11828:	ldr	r3, [pc, #112]	; 118a0 <__assert_fail@plt+0x5a4>
   1182c:	ldr	r3, [r3]
   11830:	mov	r1, r3
   11834:	mov	r0, r2
   11838:	bl	10fd8 <fputs_unlocked@plt>
   1183c:	ldr	r0, [pc, #128]	; 118c4 <__assert_fail@plt+0x5c8>
   11840:	bl	1117c <gettext@plt>
   11844:	mov	r2, r0
   11848:	ldr	r3, [pc, #80]	; 118a0 <__assert_fail@plt+0x5a4>
   1184c:	ldr	r3, [r3]
   11850:	mov	r1, r3
   11854:	mov	r0, r2
   11858:	bl	10fd8 <fputs_unlocked@plt>
   1185c:	ldr	r0, [pc, #100]	; 118c8 <__assert_fail@plt+0x5cc>
   11860:	bl	1117c <gettext@plt>
   11864:	ldr	r3, [pc, #40]	; 11894 <__assert_fail@plt+0x598>
   11868:	ldr	r1, [r3]
   1186c:	ldr	r3, [pc, #32]	; 11894 <__assert_fail@plt+0x598>
   11870:	ldr	r3, [r3]
   11874:	mov	r2, r3
   11878:	bl	11008 <printf@plt>
   1187c:	ldr	r0, [pc, #72]	; 118cc <__assert_fail@plt+0x5d0>
   11880:	bl	11430 <__assert_fail@plt+0x134>
   11884:	ldr	r0, [fp, #-16]
   11888:	bl	11170 <exit@plt>
   1188c:	muleq	r3, r0, r1
   11890:			; <UNDEFINED> instruction: 0x0001ecbc
   11894:	andeq	r0, r3, r0, asr #3
   11898:	andeq	lr, r1, r4, ror #25
   1189c:	andeq	lr, r1, ip, lsr sp
   118a0:	muleq	r3, r4, r1
   118a4:	andeq	lr, r1, r8, lsr #27
   118a8:	andeq	lr, r1, r4, ror lr
   118ac:	andeq	lr, r1, ip, asr pc
   118b0:	ldrdeq	lr, [r1], -r4
   118b4:	andeq	pc, r1, r4, asr r0	; <UNPREDICTABLE>
   118b8:	andeq	pc, r1, r0, asr #1
   118bc:	andeq	pc, r1, r8, lsl #2
   118c0:	ldrdeq	pc, [r1], -ip
   118c4:	andeq	pc, r1, ip, lsl #6
   118c8:	andeq	pc, r1, r4, asr #6
   118cc:	andeq	pc, r1, ip, asr #7
   118d0:	push	{r4, r5, fp, lr}
   118d4:	add	fp, sp, #12
   118d8:	sub	sp, sp, #184	; 0xb8
   118dc:	str	r0, [fp, #-176]	; 0xffffff50
   118e0:	str	r1, [fp, #-180]	; 0xffffff4c
   118e4:	mov	r3, #0
   118e8:	strb	r3, [fp, #-13]
   118ec:	mov	r3, #16
   118f0:	str	r3, [fp, #-24]	; 0xffffffe8
   118f4:	mvn	r3, #0
   118f8:	str	r3, [fp, #-28]	; 0xffffffe4
   118fc:	ldr	r3, [fp, #-180]	; 0xffffff4c
   11900:	ldr	r3, [r3]
   11904:	mov	r0, r3
   11908:	bl	18568 <__assert_fail@plt+0x726c>
   1190c:	ldr	r1, [pc, #1224]	; 11ddc <__assert_fail@plt+0xae0>
   11910:	mov	r0, #6
   11914:	bl	11224 <setlocale@plt>
   11918:	ldr	r1, [pc, #1216]	; 11de0 <__assert_fail@plt+0xae4>
   1191c:	ldr	r0, [pc, #1216]	; 11de4 <__assert_fail@plt+0xae8>
   11920:	bl	11290 <bindtextdomain@plt>
   11924:	ldr	r0, [pc, #1208]	; 11de4 <__assert_fail@plt+0xae8>
   11928:	bl	1108c <textdomain@plt>
   1192c:	ldr	r0, [pc, #1204]	; 11de8 <__assert_fail@plt+0xaec>
   11930:	bl	1e928 <__assert_fail@plt+0xd62c>
   11934:	sub	r3, fp, #64	; 0x40
   11938:	mov	r0, r3
   1193c:	bl	11e38 <__assert_fail@plt+0xb3c>
   11940:	b	11ad4 <__assert_fail@plt+0x7d8>
   11944:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11948:	cmp	r3, #99	; 0x63
   1194c:	beq	11a60 <__assert_fail@plt+0x764>
   11950:	cmp	r3, #99	; 0x63
   11954:	bgt	11998 <__assert_fail@plt+0x69c>
   11958:	cmp	r3, #72	; 0x48
   1195c:	beq	119ec <__assert_fail@plt+0x6f0>
   11960:	cmp	r3, #72	; 0x48
   11964:	bgt	1197c <__assert_fail@plt+0x680>
   11968:	cmn	r3, #3
   1196c:	beq	11a8c <__assert_fail@plt+0x790>
   11970:	cmn	r3, #2
   11974:	beq	11a84 <__assert_fail@plt+0x788>
   11978:	b	11acc <__assert_fail@plt+0x7d0>
   1197c:	cmp	r3, #80	; 0x50
   11980:	beq	11a04 <__assert_fail@plt+0x708>
   11984:	cmp	r3, #82	; 0x52
   11988:	beq	11a54 <__assert_fail@plt+0x758>
   1198c:	cmp	r3, #76	; 0x4c
   11990:	beq	119f8 <__assert_fail@plt+0x6fc>
   11994:	b	11acc <__assert_fail@plt+0x7d0>
   11998:	cmp	r3, #256	; 0x100
   1199c:	beq	11a1c <__assert_fail@plt+0x720>
   119a0:	cmp	r3, #256	; 0x100
   119a4:	bgt	119c4 <__assert_fail@plt+0x6c8>
   119a8:	cmp	r3, #104	; 0x68
   119ac:	beq	11a10 <__assert_fail@plt+0x714>
   119b0:	cmp	r3, #118	; 0x76
   119b4:	beq	11a78 <__assert_fail@plt+0x77c>
   119b8:	cmp	r3, #102	; 0x66
   119bc:	beq	11a6c <__assert_fail@plt+0x770>
   119c0:	b	11acc <__assert_fail@plt+0x7d0>
   119c4:	ldr	r2, [pc, #1056]	; 11dec <__assert_fail@plt+0xaf0>
   119c8:	cmp	r3, r2
   119cc:	beq	11a34 <__assert_fail@plt+0x738>
   119d0:	ldr	r2, [pc, #1044]	; 11dec <__assert_fail@plt+0xaf0>
   119d4:	cmp	r3, r2
   119d8:	blt	11a28 <__assert_fail@plt+0x72c>
   119dc:	ldr	r2, [pc, #1036]	; 11df0 <__assert_fail@plt+0xaf4>
   119e0:	cmp	r3, r2
   119e4:	beq	11a40 <__assert_fail@plt+0x744>
   119e8:	b	11acc <__assert_fail@plt+0x7d0>
   119ec:	mov	r3, #17
   119f0:	str	r3, [fp, #-24]	; 0xffffffe8
   119f4:	b	11ad4 <__assert_fail@plt+0x7d8>
   119f8:	mov	r3, #2
   119fc:	str	r3, [fp, #-24]	; 0xffffffe8
   11a00:	b	11ad4 <__assert_fail@plt+0x7d8>
   11a04:	mov	r3, #16
   11a08:	str	r3, [fp, #-24]	; 0xffffffe8
   11a0c:	b	11ad4 <__assert_fail@plt+0x7d8>
   11a10:	mov	r3, #0
   11a14:	str	r3, [fp, #-28]	; 0xffffffe4
   11a18:	b	11ad4 <__assert_fail@plt+0x7d8>
   11a1c:	mov	r3, #1
   11a20:	str	r3, [fp, #-28]	; 0xffffffe4
   11a24:	b	11ad4 <__assert_fail@plt+0x7d8>
   11a28:	mov	r3, #0
   11a2c:	strb	r3, [fp, #-13]
   11a30:	b	11ad4 <__assert_fail@plt+0x7d8>
   11a34:	mov	r3, #1
   11a38:	strb	r3, [fp, #-13]
   11a3c:	b	11ad4 <__assert_fail@plt+0x7d8>
   11a40:	ldr	r3, [pc, #940]	; 11df4 <__assert_fail@plt+0xaf8>
   11a44:	ldr	r3, [r3]
   11a48:	ldr	r2, [pc, #936]	; 11df8 <__assert_fail@plt+0xafc>
   11a4c:	str	r3, [r2]
   11a50:	b	11ad4 <__assert_fail@plt+0x7d8>
   11a54:	mov	r3, #1
   11a58:	strb	r3, [fp, #-60]	; 0xffffffc4
   11a5c:	b	11ad4 <__assert_fail@plt+0x7d8>
   11a60:	mov	r3, #1
   11a64:	str	r3, [fp, #-64]	; 0xffffffc0
   11a68:	b	11ad4 <__assert_fail@plt+0x7d8>
   11a6c:	mov	r3, #1
   11a70:	strb	r3, [fp, #-51]	; 0xffffffcd
   11a74:	b	11ad4 <__assert_fail@plt+0x7d8>
   11a78:	mov	r3, #0
   11a7c:	str	r3, [fp, #-64]	; 0xffffffc0
   11a80:	b	11ad4 <__assert_fail@plt+0x7d8>
   11a84:	mov	r0, #0
   11a88:	bl	116b4 <__assert_fail@plt+0x3b8>
   11a8c:	ldr	r3, [pc, #872]	; 11dfc <__assert_fail@plt+0xb00>
   11a90:	ldr	r0, [r3]
   11a94:	ldr	r3, [pc, #868]	; 11e00 <__assert_fail@plt+0xb04>
   11a98:	ldr	r2, [r3]
   11a9c:	mov	r3, #0
   11aa0:	str	r3, [sp, #8]
   11aa4:	ldr	r3, [pc, #856]	; 11e04 <__assert_fail@plt+0xb08>
   11aa8:	str	r3, [sp, #4]
   11aac:	ldr	r3, [pc, #852]	; 11e08 <__assert_fail@plt+0xb0c>
   11ab0:	str	r3, [sp]
   11ab4:	mov	r3, r2
   11ab8:	ldr	r2, [pc, #844]	; 11e0c <__assert_fail@plt+0xb10>
   11abc:	ldr	r1, [pc, #844]	; 11e10 <__assert_fail@plt+0xb14>
   11ac0:	bl	1b438 <__assert_fail@plt+0xa13c>
   11ac4:	mov	r0, #0
   11ac8:	bl	11170 <exit@plt>
   11acc:	mov	r0, #1
   11ad0:	bl	116b4 <__assert_fail@plt+0x3b8>
   11ad4:	mov	r3, #0
   11ad8:	str	r3, [sp]
   11adc:	ldr	r3, [pc, #816]	; 11e14 <__assert_fail@plt+0xb18>
   11ae0:	ldr	r2, [pc, #816]	; 11e18 <__assert_fail@plt+0xb1c>
   11ae4:	ldr	r1, [fp, #-180]	; 0xffffff4c
   11ae8:	ldr	r0, [fp, #-176]	; 0xffffff50
   11aec:	bl	11158 <getopt_long@plt>
   11af0:	str	r0, [fp, #-32]	; 0xffffffe0
   11af4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11af8:	cmn	r3, #1
   11afc:	bne	11944 <__assert_fail@plt+0x648>
   11b00:	ldrb	r3, [fp, #-60]	; 0xffffffc4
   11b04:	cmp	r3, #0
   11b08:	beq	11b4c <__assert_fail@plt+0x850>
   11b0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b10:	cmp	r3, #16
   11b14:	bne	11b54 <__assert_fail@plt+0x858>
   11b18:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11b1c:	cmp	r3, #1
   11b20:	bne	11b40 <__assert_fail@plt+0x844>
   11b24:	ldr	r0, [pc, #752]	; 11e1c <__assert_fail@plt+0xb20>
   11b28:	bl	1117c <gettext@plt>
   11b2c:	mov	r3, r0
   11b30:	mov	r2, r3
   11b34:	mov	r1, #0
   11b38:	mov	r0, #1
   11b3c:	bl	11110 <error@plt>
   11b40:	mov	r3, #0
   11b44:	str	r3, [fp, #-28]	; 0xffffffe4
   11b48:	b	11b54 <__assert_fail@plt+0x858>
   11b4c:	mov	r3, #16
   11b50:	str	r3, [fp, #-24]	; 0xffffffe8
   11b54:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11b58:	cmp	r3, #0
   11b5c:	movne	r3, #1
   11b60:	moveq	r3, #0
   11b64:	uxtb	r3, r3
   11b68:	strb	r3, [fp, #-52]	; 0xffffffcc
   11b6c:	ldr	r3, [pc, #684]	; 11e20 <__assert_fail@plt+0xb24>
   11b70:	ldr	r3, [r3]
   11b74:	ldr	r2, [fp, #-176]	; 0xffffff50
   11b78:	sub	r2, r2, r3
   11b7c:	ldr	r3, [pc, #628]	; 11df8 <__assert_fail@plt+0xafc>
   11b80:	ldr	r3, [r3]
   11b84:	cmp	r3, #0
   11b88:	beq	11b94 <__assert_fail@plt+0x898>
   11b8c:	mov	r3, #1
   11b90:	b	11b98 <__assert_fail@plt+0x89c>
   11b94:	mov	r3, #2
   11b98:	cmp	r2, r3
   11b9c:	bge	11c1c <__assert_fail@plt+0x920>
   11ba0:	ldr	r3, [pc, #632]	; 11e20 <__assert_fail@plt+0xb24>
   11ba4:	ldr	r3, [r3]
   11ba8:	ldr	r2, [fp, #-176]	; 0xffffff50
   11bac:	cmp	r2, r3
   11bb0:	bgt	11bd4 <__assert_fail@plt+0x8d8>
   11bb4:	ldr	r0, [pc, #616]	; 11e24 <__assert_fail@plt+0xb28>
   11bb8:	bl	1117c <gettext@plt>
   11bbc:	mov	r3, r0
   11bc0:	mov	r2, r3
   11bc4:	mov	r1, #0
   11bc8:	mov	r0, #0
   11bcc:	bl	11110 <error@plt>
   11bd0:	b	11c14 <__assert_fail@plt+0x918>
   11bd4:	ldr	r0, [pc, #588]	; 11e28 <__assert_fail@plt+0xb2c>
   11bd8:	bl	1117c <gettext@plt>
   11bdc:	mov	r4, r0
   11be0:	ldr	r3, [fp, #-176]	; 0xffffff50
   11be4:	sub	r3, r3, #-1073741823	; 0xc0000001
   11be8:	lsl	r3, r3, #2
   11bec:	ldr	r2, [fp, #-180]	; 0xffffff4c
   11bf0:	add	r3, r2, r3
   11bf4:	ldr	r3, [r3]
   11bf8:	mov	r0, r3
   11bfc:	bl	1ac98 <__assert_fail@plt+0x999c>
   11c00:	mov	r3, r0
   11c04:	mov	r2, r4
   11c08:	mov	r1, #0
   11c0c:	mov	r0, #0
   11c10:	bl	11110 <error@plt>
   11c14:	mov	r0, #1
   11c18:	bl	116b4 <__assert_fail@plt+0x3b8>
   11c1c:	ldr	r3, [pc, #468]	; 11df8 <__assert_fail@plt+0xafc>
   11c20:	ldr	r3, [r3]
   11c24:	cmp	r3, #0
   11c28:	beq	11cb0 <__assert_fail@plt+0x9b4>
   11c2c:	ldr	r3, [pc, #452]	; 11df8 <__assert_fail@plt+0xafc>
   11c30:	ldr	r3, [r3]
   11c34:	sub	r2, fp, #172	; 0xac
   11c38:	mov	r1, r2
   11c3c:	mov	r0, r3
   11c40:	bl	1e940 <__assert_fail@plt+0xd644>
   11c44:	mov	r3, r0
   11c48:	cmp	r3, #0
   11c4c:	beq	11c90 <__assert_fail@plt+0x994>
   11c50:	bl	111c4 <__errno_location@plt>
   11c54:	mov	r3, r0
   11c58:	ldr	r4, [r3]
   11c5c:	ldr	r0, [pc, #456]	; 11e2c <__assert_fail@plt+0xb30>
   11c60:	bl	1117c <gettext@plt>
   11c64:	mov	r5, r0
   11c68:	ldr	r3, [pc, #392]	; 11df8 <__assert_fail@plt+0xafc>
   11c6c:	ldr	r3, [r3]
   11c70:	mov	r1, r3
   11c74:	mov	r0, #4
   11c78:	bl	1a8a0 <__assert_fail@plt+0x95a4>
   11c7c:	mov	r3, r0
   11c80:	mov	r2, r5
   11c84:	mov	r1, r4
   11c88:	mov	r0, #1
   11c8c:	bl	11110 <error@plt>
   11c90:	ldr	r3, [fp, #-144]	; 0xffffff70
   11c94:	str	r3, [fp, #-20]	; 0xffffffec
   11c98:	ldr	r3, [fp, #-144]	; 0xffffff70
   11c9c:	mov	r0, r3
   11ca0:	bl	11ee8 <__assert_fail@plt+0xbec>
   11ca4:	mov	r3, r0
   11ca8:	str	r3, [fp, #-44]	; 0xffffffd4
   11cac:	b	11d0c <__assert_fail@plt+0xa10>
   11cb0:	ldr	r3, [pc, #360]	; 11e20 <__assert_fail@plt+0xb24>
   11cb4:	ldr	r3, [r3]
   11cb8:	add	r2, r3, #1
   11cbc:	ldr	r1, [pc, #348]	; 11e20 <__assert_fail@plt+0xb24>
   11cc0:	str	r2, [r1]
   11cc4:	lsl	r3, r3, #2
   11cc8:	ldr	r2, [fp, #-180]	; 0xffffff4c
   11ccc:	add	r3, r2, r3
   11cd0:	ldr	r3, [r3]
   11cd4:	str	r3, [fp, #-36]	; 0xffffffdc
   11cd8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11cdc:	ldrb	r3, [r3]
   11ce0:	cmp	r3, #0
   11ce4:	beq	11cf8 <__assert_fail@plt+0x9fc>
   11ce8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11cec:	bl	1c064 <__assert_fail@plt+0xad68>
   11cf0:	mov	r3, r0
   11cf4:	b	11cfc <__assert_fail@plt+0xa00>
   11cf8:	mov	r3, #0
   11cfc:	str	r3, [fp, #-44]	; 0xffffffd4
   11d00:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11d04:	bl	115d0 <__assert_fail@plt+0x2d4>
   11d08:	str	r0, [fp, #-20]	; 0xffffffec
   11d0c:	ldrb	r3, [fp, #-60]	; 0xffffffc4
   11d10:	cmp	r3, #0
   11d14:	beq	11d78 <__assert_fail@plt+0xa7c>
   11d18:	ldrb	r3, [fp, #-13]
   11d1c:	cmp	r3, #0
   11d20:	beq	11d78 <__assert_fail@plt+0xa7c>
   11d24:	ldr	r0, [pc, #260]	; 11e30 <__assert_fail@plt+0xb34>
   11d28:	bl	1acc4 <__assert_fail@plt+0x99c8>
   11d2c:	mov	r3, r0
   11d30:	str	r3, [fp, #-56]	; 0xffffffc8
   11d34:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11d38:	cmp	r3, #0
   11d3c:	bne	11d78 <__assert_fail@plt+0xa7c>
   11d40:	bl	111c4 <__errno_location@plt>
   11d44:	mov	r3, r0
   11d48:	ldr	r4, [r3]
   11d4c:	ldr	r0, [pc, #216]	; 11e2c <__assert_fail@plt+0xb30>
   11d50:	bl	1117c <gettext@plt>
   11d54:	mov	r5, r0
   11d58:	ldr	r1, [pc, #212]	; 11e34 <__assert_fail@plt+0xb38>
   11d5c:	mov	r0, #4
   11d60:	bl	1a8a0 <__assert_fail@plt+0x95a4>
   11d64:	mov	r3, r0
   11d68:	mov	r2, r5
   11d6c:	mov	r1, r4
   11d70:	mov	r0, #1
   11d74:	bl	11110 <error@plt>
   11d78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11d7c:	orr	r3, r3, #1024	; 0x400
   11d80:	str	r3, [fp, #-24]	; 0xffffffe8
   11d84:	ldr	r3, [pc, #148]	; 11e20 <__assert_fail@plt+0xb24>
   11d88:	ldr	r3, [r3]
   11d8c:	lsl	r3, r3, #2
   11d90:	ldr	r2, [fp, #-180]	; 0xffffff4c
   11d94:	add	r0, r2, r3
   11d98:	sub	r3, fp, #64	; 0x40
   11d9c:	str	r3, [sp, #8]
   11da0:	mvn	r3, #0
   11da4:	str	r3, [sp, #4]
   11da8:	mvn	r3, #0
   11dac:	str	r3, [sp]
   11db0:	ldr	r3, [fp, #-20]	; 0xffffffec
   11db4:	mvn	r2, #0
   11db8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   11dbc:	bl	12fb4 <__assert_fail@plt+0x1cb8>
   11dc0:	mov	r3, r0
   11dc4:	strb	r3, [fp, #-37]	; 0xffffffdb
   11dc8:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   11dcc:	eor	r3, r3, #1
   11dd0:	uxtb	r3, r3
   11dd4:	mov	r0, r3
   11dd8:	bl	11170 <exit@plt>
   11ddc:	muleq	r1, ip, sl
   11de0:	ldrdeq	pc, [r1], -r4
   11de4:			; <UNDEFINED> instruction: 0x0001eab4
   11de8:	andeq	r3, r1, r0, ror #4
   11dec:	andeq	r0, r0, r2, lsl #2
   11df0:	andeq	r0, r0, r3, lsl #2
   11df4:	muleq	r3, r8, r1
   11df8:	andeq	r0, r3, r0, lsr #3
   11dfc:	muleq	r3, r4, r1
   11e00:	andeq	r0, r3, r4, lsr r1
   11e04:	andeq	pc, r1, ip, ror #7
   11e08:	strdeq	pc, [r1], -ip
   11e0c:	andeq	lr, r1, r4, ror #19
   11e10:	andeq	pc, r1, ip, asr #7
   11e14:	ldrdeq	lr, [r1], -r8
   11e18:	andeq	pc, r1, ip, lsl #8
   11e1c:	andeq	pc, r1, r8, lsl r4	; <UNPREDICTABLE>
   11e20:	andeq	r0, r3, r8, lsl #3
   11e24:	andeq	pc, r1, r4, asr #8
   11e28:	andeq	pc, r1, r4, asr r4	; <UNPREDICTABLE>
   11e2c:	andeq	pc, r1, r0, ror r4	; <UNPREDICTABLE>
   11e30:	andeq	r0, r3, r8, lsr #3
   11e34:	muleq	r1, r0, r4
   11e38:	push	{fp}		; (str fp, [sp, #-4]!)
   11e3c:	add	fp, sp, #0
   11e40:	sub	sp, sp, #12
   11e44:	str	r0, [fp, #-8]
   11e48:	ldr	r3, [fp, #-8]
   11e4c:	mov	r2, #2
   11e50:	str	r2, [r3]
   11e54:	ldr	r3, [fp, #-8]
   11e58:	mov	r2, #0
   11e5c:	str	r2, [r3, #8]
   11e60:	ldr	r3, [fp, #-8]
   11e64:	mov	r2, #1
   11e68:	strb	r2, [r3, #12]
   11e6c:	ldr	r3, [fp, #-8]
   11e70:	mov	r2, #0
   11e74:	strb	r2, [r3, #4]
   11e78:	ldr	r3, [fp, #-8]
   11e7c:	mov	r2, #0
   11e80:	strb	r2, [r3, #13]
   11e84:	ldr	r3, [fp, #-8]
   11e88:	mov	r2, #0
   11e8c:	str	r2, [r3, #16]
   11e90:	ldr	r3, [fp, #-8]
   11e94:	mov	r2, #0
   11e98:	str	r2, [r3, #20]
   11e9c:	nop			; (mov r0, r0)
   11ea0:	add	sp, fp, #0
   11ea4:	pop	{fp}		; (ldr fp, [sp], #4)
   11ea8:	bx	lr
   11eac:	push	{fp, lr}
   11eb0:	add	fp, sp, #4
   11eb4:	sub	sp, sp, #8
   11eb8:	str	r0, [fp, #-8]
   11ebc:	ldr	r3, [fp, #-8]
   11ec0:	ldr	r3, [r3, #16]
   11ec4:	mov	r0, r3
   11ec8:	bl	13394 <__assert_fail@plt+0x2098>
   11ecc:	ldr	r3, [fp, #-8]
   11ed0:	ldr	r3, [r3, #20]
   11ed4:	mov	r0, r3
   11ed8:	bl	13394 <__assert_fail@plt+0x2098>
   11edc:	nop			; (mov r0, r0)
   11ee0:	sub	sp, fp, #4
   11ee4:	pop	{fp, pc}
   11ee8:	push	{fp, lr}
   11eec:	add	fp, sp, #4
   11ef0:	sub	sp, sp, #40	; 0x28
   11ef4:	str	r0, [fp, #-40]	; 0xffffffd8
   11ef8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11efc:	bl	112e4 <getgrgid@plt>
   11f00:	str	r0, [fp, #-8]
   11f04:	ldr	r3, [fp, #-8]
   11f08:	cmp	r3, #0
   11f0c:	beq	11f1c <__assert_fail@plt+0xc20>
   11f10:	ldr	r3, [fp, #-8]
   11f14:	ldr	r3, [r3]
   11f18:	b	11f38 <__assert_fail@plt+0xc3c>
   11f1c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11f20:	mov	r0, r3
   11f24:	mov	r1, #0
   11f28:	sub	r3, fp, #32
   11f2c:	mov	r2, r3
   11f30:	bl	1839c <__assert_fail@plt+0x70a0>
   11f34:	mov	r3, r0
   11f38:	mov	r0, r3
   11f3c:	bl	1c064 <__assert_fail@plt+0xad68>
   11f40:	mov	r3, r0
   11f44:	mov	r0, r3
   11f48:	sub	sp, fp, #4
   11f4c:	pop	{fp, pc}
   11f50:	push	{fp, lr}
   11f54:	add	fp, sp, #4
   11f58:	sub	sp, sp, #40	; 0x28
   11f5c:	str	r0, [fp, #-40]	; 0xffffffd8
   11f60:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11f64:	bl	10ffc <getpwuid@plt>
   11f68:	str	r0, [fp, #-8]
   11f6c:	ldr	r3, [fp, #-8]
   11f70:	cmp	r3, #0
   11f74:	beq	11f84 <__assert_fail@plt+0xc88>
   11f78:	ldr	r3, [fp, #-8]
   11f7c:	ldr	r3, [r3]
   11f80:	b	11fa0 <__assert_fail@plt+0xca4>
   11f84:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11f88:	mov	r0, r3
   11f8c:	mov	r1, #0
   11f90:	sub	r3, fp, #32
   11f94:	mov	r2, r3
   11f98:	bl	1839c <__assert_fail@plt+0x70a0>
   11f9c:	mov	r3, r0
   11fa0:	mov	r0, r3
   11fa4:	bl	1c064 <__assert_fail@plt+0xad68>
   11fa8:	mov	r3, r0
   11fac:	mov	r0, r3
   11fb0:	sub	sp, fp, #4
   11fb4:	pop	{fp, pc}
   11fb8:	push	{r4, fp, lr}
   11fbc:	add	fp, sp, #8
   11fc0:	sub	sp, sp, #20
   11fc4:	str	r0, [fp, #-24]	; 0xffffffe8
   11fc8:	str	r1, [fp, #-28]	; 0xffffffe4
   11fcc:	mov	r3, #0
   11fd0:	str	r3, [fp, #-16]
   11fd4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11fd8:	cmp	r3, #0
   11fdc:	beq	12064 <__assert_fail@plt+0xd68>
   11fe0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11fe4:	cmp	r3, #0
   11fe8:	beq	12050 <__assert_fail@plt+0xd54>
   11fec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11ff0:	bl	11188 <strlen@plt>
   11ff4:	mov	r4, r0
   11ff8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11ffc:	bl	11188 <strlen@plt>
   12000:	mov	r3, r0
   12004:	add	r3, r4, r3
   12008:	add	r3, r3, #2
   1200c:	mov	r0, r3
   12010:	bl	1b584 <__assert_fail@plt+0xa288>
   12014:	mov	r3, r0
   12018:	str	r3, [fp, #-16]
   1201c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12020:	ldr	r0, [fp, #-16]
   12024:	bl	11068 <stpcpy@plt>
   12028:	mov	r2, r0
   1202c:	ldr	r3, [pc, #92]	; 12090 <__assert_fail@plt+0xd94>
   12030:	mov	r1, r2
   12034:	ldrh	r3, [r3]
   12038:	strh	r3, [r1]
   1203c:	add	r3, r2, #1
   12040:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12044:	mov	r0, r3
   12048:	bl	110e0 <strcpy@plt>
   1204c:	b	12080 <__assert_fail@plt+0xd84>
   12050:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12054:	bl	1c064 <__assert_fail@plt+0xad68>
   12058:	mov	r3, r0
   1205c:	str	r3, [fp, #-16]
   12060:	b	12080 <__assert_fail@plt+0xd84>
   12064:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12068:	cmp	r3, #0
   1206c:	beq	12080 <__assert_fail@plt+0xd84>
   12070:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12074:	bl	1c064 <__assert_fail@plt+0xad68>
   12078:	mov	r3, r0
   1207c:	str	r3, [fp, #-16]
   12080:	ldr	r3, [fp, #-16]
   12084:	mov	r0, r3
   12088:	sub	sp, fp, #8
   1208c:	pop	{r4, fp, pc}
   12090:	muleq	r1, r4, r4
   12094:	push	{r4, fp, lr}
   12098:	add	fp, sp, #8
   1209c:	sub	sp, sp, #36	; 0x24
   120a0:	str	r0, [fp, #-32]	; 0xffffffe0
   120a4:	str	r1, [fp, #-36]	; 0xffffffdc
   120a8:	str	r2, [fp, #-40]	; 0xffffffd8
   120ac:	str	r3, [fp, #-44]	; 0xffffffd4
   120b0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   120b4:	cmp	r3, #1
   120b8:	bne	120e8 <__assert_fail@plt+0xdec>
   120bc:	ldr	r0, [pc, #544]	; 122e4 <__assert_fail@plt+0xfe8>
   120c0:	bl	1117c <gettext@plt>
   120c4:	mov	r4, r0
   120c8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   120cc:	mov	r0, #4
   120d0:	bl	1a8a0 <__assert_fail@plt+0x95a4>
   120d4:	mov	r3, r0
   120d8:	mov	r1, r3
   120dc:	mov	r0, r4
   120e0:	bl	11008 <printf@plt>
   120e4:	b	122dc <__assert_fail@plt+0xfe0>
   120e8:	ldr	r1, [fp, #8]
   120ec:	ldr	r0, [fp, #4]
   120f0:	bl	11fb8 <__assert_fail@plt+0xcbc>
   120f4:	str	r0, [fp, #-24]	; 0xffffffe8
   120f8:	ldr	r3, [fp, #4]
   120fc:	cmp	r3, #0
   12100:	beq	1210c <__assert_fail@plt+0xe10>
   12104:	ldr	r2, [fp, #-40]	; 0xffffffd8
   12108:	b	12110 <__assert_fail@plt+0xe14>
   1210c:	mov	r2, #0
   12110:	ldr	r3, [fp, #8]
   12114:	cmp	r3, #0
   12118:	beq	12124 <__assert_fail@plt+0xe28>
   1211c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12120:	b	12128 <__assert_fail@plt+0xe2c>
   12124:	mov	r3, #0
   12128:	mov	r1, r3
   1212c:	mov	r0, r2
   12130:	bl	11fb8 <__assert_fail@plt+0xcbc>
   12134:	str	r0, [fp, #-20]	; 0xffffffec
   12138:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1213c:	cmp	r3, #3
   12140:	beq	121a0 <__assert_fail@plt+0xea4>
   12144:	cmp	r3, #4
   12148:	beq	1225c <__assert_fail@plt+0xf60>
   1214c:	cmp	r3, #2
   12150:	bne	122a8 <__assert_fail@plt+0xfac>
   12154:	ldr	r3, [fp, #4]
   12158:	cmp	r3, #0
   1215c:	beq	12170 <__assert_fail@plt+0xe74>
   12160:	ldr	r0, [pc, #384]	; 122e8 <__assert_fail@plt+0xfec>
   12164:	bl	1117c <gettext@plt>
   12168:	mov	r3, r0
   1216c:	b	12198 <__assert_fail@plt+0xe9c>
   12170:	ldr	r3, [fp, #8]
   12174:	cmp	r3, #0
   12178:	beq	1218c <__assert_fail@plt+0xe90>
   1217c:	ldr	r0, [pc, #360]	; 122ec <__assert_fail@plt+0xff0>
   12180:	bl	1117c <gettext@plt>
   12184:	mov	r3, r0
   12188:	b	12198 <__assert_fail@plt+0xe9c>
   1218c:	ldr	r0, [pc, #348]	; 122f0 <__assert_fail@plt+0xff4>
   12190:	bl	1117c <gettext@plt>
   12194:	mov	r3, r0
   12198:	str	r3, [fp, #-16]
   1219c:	b	122ac <__assert_fail@plt+0xfb0>
   121a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   121a4:	cmp	r3, #0
   121a8:	beq	121f8 <__assert_fail@plt+0xefc>
   121ac:	ldr	r3, [fp, #4]
   121b0:	cmp	r3, #0
   121b4:	beq	121c8 <__assert_fail@plt+0xecc>
   121b8:	ldr	r0, [pc, #308]	; 122f4 <__assert_fail@plt+0xff8>
   121bc:	bl	1117c <gettext@plt>
   121c0:	mov	r3, r0
   121c4:	b	121f0 <__assert_fail@plt+0xef4>
   121c8:	ldr	r3, [fp, #8]
   121cc:	cmp	r3, #0
   121d0:	beq	121e4 <__assert_fail@plt+0xee8>
   121d4:	ldr	r0, [pc, #284]	; 122f8 <__assert_fail@plt+0xffc>
   121d8:	bl	1117c <gettext@plt>
   121dc:	mov	r3, r0
   121e0:	b	121f0 <__assert_fail@plt+0xef4>
   121e4:	ldr	r0, [pc, #272]	; 122fc <__assert_fail@plt+0x1000>
   121e8:	bl	1117c <gettext@plt>
   121ec:	mov	r3, r0
   121f0:	str	r3, [fp, #-16]
   121f4:	b	122ac <__assert_fail@plt+0xfb0>
   121f8:	ldr	r3, [fp, #4]
   121fc:	cmp	r3, #0
   12200:	beq	12214 <__assert_fail@plt+0xf18>
   12204:	ldr	r0, [pc, #244]	; 12300 <__assert_fail@plt+0x1004>
   12208:	bl	1117c <gettext@plt>
   1220c:	mov	r3, r0
   12210:	b	1223c <__assert_fail@plt+0xf40>
   12214:	ldr	r3, [fp, #8]
   12218:	cmp	r3, #0
   1221c:	beq	12230 <__assert_fail@plt+0xf34>
   12220:	ldr	r0, [pc, #220]	; 12304 <__assert_fail@plt+0x1008>
   12224:	bl	1117c <gettext@plt>
   12228:	mov	r3, r0
   1222c:	b	1223c <__assert_fail@plt+0xf40>
   12230:	ldr	r0, [pc, #196]	; 122fc <__assert_fail@plt+0x1000>
   12234:	bl	1117c <gettext@plt>
   12238:	mov	r3, r0
   1223c:	str	r3, [fp, #-16]
   12240:	ldr	r0, [fp, #-20]	; 0xffffffec
   12244:	bl	13394 <__assert_fail@plt+0x2098>
   12248:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1224c:	str	r3, [fp, #-20]	; 0xffffffec
   12250:	mov	r3, #0
   12254:	str	r3, [fp, #-24]	; 0xffffffe8
   12258:	b	122ac <__assert_fail@plt+0xfb0>
   1225c:	ldr	r3, [fp, #4]
   12260:	cmp	r3, #0
   12264:	beq	12278 <__assert_fail@plt+0xf7c>
   12268:	ldr	r0, [pc, #152]	; 12308 <__assert_fail@plt+0x100c>
   1226c:	bl	1117c <gettext@plt>
   12270:	mov	r3, r0
   12274:	b	122a0 <__assert_fail@plt+0xfa4>
   12278:	ldr	r3, [fp, #8]
   1227c:	cmp	r3, #0
   12280:	beq	12294 <__assert_fail@plt+0xf98>
   12284:	ldr	r0, [pc, #128]	; 1230c <__assert_fail@plt+0x1010>
   12288:	bl	1117c <gettext@plt>
   1228c:	mov	r3, r0
   12290:	b	122a0 <__assert_fail@plt+0xfa4>
   12294:	ldr	r0, [pc, #116]	; 12310 <__assert_fail@plt+0x1014>
   12298:	bl	1117c <gettext@plt>
   1229c:	mov	r3, r0
   122a0:	str	r3, [fp, #-16]
   122a4:	b	122ac <__assert_fail@plt+0xfb0>
   122a8:	bl	112b4 <abort@plt>
   122ac:	ldr	r1, [fp, #-32]	; 0xffffffe0
   122b0:	mov	r0, #4
   122b4:	bl	1a8a0 <__assert_fail@plt+0x95a4>
   122b8:	mov	r1, r0
   122bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   122c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   122c4:	ldr	r0, [fp, #-16]
   122c8:	bl	11008 <printf@plt>
   122cc:	ldr	r0, [fp, #-20]	; 0xffffffec
   122d0:	bl	13394 <__assert_fail@plt+0x2098>
   122d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   122d8:	bl	13394 <__assert_fail@plt+0x2098>
   122dc:	sub	sp, fp, #8
   122e0:	pop	{r4, fp, pc}
   122e4:	muleq	r1, r8, r4
   122e8:	ldrdeq	pc, [r1], -r0
   122ec:	strdeq	pc, [r1], -r8
   122f0:	andeq	pc, r1, ip, lsl r5	; <UNPREDICTABLE>
   122f4:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   122f8:	andeq	pc, r1, ip, ror #10
   122fc:	muleq	r1, r8, r5
   12300:			; <UNDEFINED> instruction: 0x0001f5bc
   12304:	andeq	pc, r1, r4, ror #11
   12308:	andeq	pc, r1, r8, lsl #12
   1230c:	andeq	pc, r1, r8, lsr #12
   12310:	andeq	pc, r1, r4, asr #12
   12314:	push	{fp, lr}
   12318:	add	fp, sp, #4
   1231c:	sub	sp, sp, #136	; 0x88
   12320:	str	r0, [fp, #-128]	; 0xffffff80
   12324:	str	r1, [fp, #-132]	; 0xffffff7c
   12328:	str	r2, [fp, #-136]	; 0xffffff78
   1232c:	str	r3, [fp, #-140]	; 0xffffff74
   12330:	mov	r3, #2
   12334:	str	r3, [fp, #-8]
   12338:	mov	r3, #2304	; 0x900
   1233c:	str	r3, [fp, #-12]
   12340:	ldr	r3, [fp, #8]
   12344:	cmn	r3, #1
   12348:	bne	12360 <__assert_fail@plt+0x1064>
   1234c:	ldr	r3, [fp, #12]
   12350:	cmn	r3, #1
   12354:	bne	12360 <__assert_fail@plt+0x1064>
   12358:	mov	r3, #5
   1235c:	b	1254c <__assert_fail@plt+0x1250>
   12360:	ldr	r3, [fp, #-136]	; 0xffffff78
   12364:	ldr	r3, [r3, #16]
   12368:	and	r3, r3, #61440	; 0xf000
   1236c:	cmp	r3, #32768	; 0x8000
   12370:	beq	123a0 <__assert_fail@plt+0x10a4>
   12374:	ldr	r3, [fp, #-136]	; 0xffffff78
   12378:	ldr	r3, [r3, #16]
   1237c:	and	r3, r3, #61440	; 0xf000
   12380:	cmp	r3, #16384	; 0x4000
   12384:	bne	12398 <__assert_fail@plt+0x109c>
   12388:	ldr	r3, [fp, #-12]
   1238c:	orr	r3, r3, #16384	; 0x4000
   12390:	str	r3, [fp, #-12]
   12394:	b	123a0 <__assert_fail@plt+0x10a4>
   12398:	mov	r3, #5
   1239c:	b	1254c <__assert_fail@plt+0x1250>
   123a0:	ldr	r2, [fp, #-12]
   123a4:	ldr	r1, [fp, #-132]	; 0xffffff7c
   123a8:	ldr	r0, [fp, #-128]	; 0xffffff80
   123ac:	bl	111a0 <openat64@plt>
   123b0:	str	r0, [fp, #-16]
   123b4:	ldr	r3, [fp, #-16]
   123b8:	cmp	r3, #0
   123bc:	bge	12434 <__assert_fail@plt+0x1138>
   123c0:	bl	111c4 <__errno_location@plt>
   123c4:	mov	r3, r0
   123c8:	ldr	r3, [r3]
   123cc:	cmp	r3, #13
   123d0:	bne	12410 <__assert_fail@plt+0x1114>
   123d4:	ldr	r3, [fp, #-136]	; 0xffffff78
   123d8:	ldr	r3, [r3, #16]
   123dc:	and	r3, r3, #61440	; 0xf000
   123e0:	cmp	r3, #32768	; 0x8000
   123e4:	bne	12410 <__assert_fail@plt+0x1114>
   123e8:	ldr	r3, [fp, #-12]
   123ec:	orr	r3, r3, #1
   123f0:	mov	r2, r3
   123f4:	ldr	r1, [fp, #-132]	; 0xffffff7c
   123f8:	ldr	r0, [fp, #-128]	; 0xffffff80
   123fc:	bl	111a0 <openat64@plt>
   12400:	str	r0, [fp, #-16]
   12404:	ldr	r3, [fp, #-16]
   12408:	cmp	r3, #0
   1240c:	bge	12434 <__assert_fail@plt+0x1138>
   12410:	bl	111c4 <__errno_location@plt>
   12414:	mov	r3, r0
   12418:	ldr	r3, [r3]
   1241c:	cmp	r3, #13
   12420:	bne	1242c <__assert_fail@plt+0x1130>
   12424:	mov	r3, #5
   12428:	b	1254c <__assert_fail@plt+0x1250>
   1242c:	mov	r3, #6
   12430:	b	1254c <__assert_fail@plt+0x1250>
   12434:	sub	r3, fp, #124	; 0x7c
   12438:	mov	r1, r3
   1243c:	ldr	r0, [fp, #-16]
   12440:	bl	1e950 <__assert_fail@plt+0xd654>
   12444:	mov	r3, r0
   12448:	cmp	r3, #0
   1244c:	beq	1245c <__assert_fail@plt+0x1160>
   12450:	mov	r3, #6
   12454:	str	r3, [fp, #-8]
   12458:	b	12520 <__assert_fail@plt+0x1224>
   1245c:	ldr	r3, [fp, #-136]	; 0xffffff78
   12460:	ldrd	r0, [r3, #96]	; 0x60
   12464:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12468:	cmp	r1, r3
   1246c:	cmpeq	r0, r2
   12470:	bne	1248c <__assert_fail@plt+0x1190>
   12474:	ldr	r3, [fp, #-136]	; 0xffffff78
   12478:	ldrd	r0, [r3]
   1247c:	ldrd	r2, [fp, #-124]	; 0xffffff84
   12480:	cmp	r1, r3
   12484:	cmpeq	r0, r2
   12488:	beq	12498 <__assert_fail@plt+0x119c>
   1248c:	mov	r3, #4
   12490:	str	r3, [fp, #-8]
   12494:	b	12520 <__assert_fail@plt+0x1224>
   12498:	ldr	r3, [fp, #8]
   1249c:	cmn	r3, #1
   124a0:	beq	124b4 <__assert_fail@plt+0x11b8>
   124a4:	ldr	r2, [fp, #-100]	; 0xffffff9c
   124a8:	ldr	r3, [fp, #8]
   124ac:	cmp	r2, r3
   124b0:	bne	12520 <__assert_fail@plt+0x1224>
   124b4:	ldr	r3, [fp, #12]
   124b8:	cmn	r3, #1
   124bc:	beq	124d0 <__assert_fail@plt+0x11d4>
   124c0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   124c4:	ldr	r3, [fp, #12]
   124c8:	cmp	r2, r3
   124cc:	bne	12520 <__assert_fail@plt+0x1224>
   124d0:	ldr	r2, [fp, #4]
   124d4:	ldr	r1, [fp, #-140]	; 0xffffff74
   124d8:	ldr	r0, [fp, #-16]
   124dc:	bl	111ac <fchown@plt>
   124e0:	mov	r3, r0
   124e4:	cmp	r3, #0
   124e8:	bne	12518 <__assert_fail@plt+0x121c>
   124ec:	ldr	r0, [fp, #-16]
   124f0:	bl	112c0 <close@plt>
   124f4:	mov	r3, r0
   124f8:	cmp	r3, #0
   124fc:	bne	12508 <__assert_fail@plt+0x120c>
   12500:	mov	r3, #2
   12504:	b	1250c <__assert_fail@plt+0x1210>
   12508:	mov	r3, #6
   1250c:	str	r3, [fp, #-8]
   12510:	ldr	r3, [fp, #-8]
   12514:	b	1254c <__assert_fail@plt+0x1250>
   12518:	mov	r3, #6
   1251c:	str	r3, [fp, #-8]
   12520:	bl	111c4 <__errno_location@plt>
   12524:	mov	r3, r0
   12528:	ldr	r3, [r3]
   1252c:	str	r3, [fp, #-20]	; 0xffffffec
   12530:	ldr	r0, [fp, #-16]
   12534:	bl	112c0 <close@plt>
   12538:	bl	111c4 <__errno_location@plt>
   1253c:	mov	r2, r0
   12540:	ldr	r3, [fp, #-20]	; 0xffffffec
   12544:	str	r3, [r2]
   12548:	ldr	r3, [fp, #-8]
   1254c:	mov	r0, r3
   12550:	sub	sp, fp, #4
   12554:	pop	{fp, pc}
   12558:	push	{r4, r5, fp, lr}
   1255c:	add	fp, sp, #12
   12560:	sub	sp, sp, #176	; 0xb0
   12564:	str	r0, [fp, #-160]	; 0xffffff60
   12568:	str	r1, [fp, #-164]	; 0xffffff5c
   1256c:	str	r2, [fp, #-168]	; 0xffffff58
   12570:	str	r3, [fp, #-172]	; 0xffffff54
   12574:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12578:	ldr	r3, [r3, #28]
   1257c:	str	r3, [fp, #-24]	; 0xffffffe8
   12580:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12584:	ldr	r3, [r3, #24]
   12588:	str	r3, [fp, #-28]	; 0xffffffe4
   1258c:	mov	r3, #1
   12590:	strb	r3, [fp, #-17]	; 0xffffffef
   12594:	mov	r3, #1
   12598:	strb	r3, [fp, #-19]	; 0xffffffed
   1259c:	ldr	r3, [fp, #-164]	; 0xffffff5c
   125a0:	ldrh	r3, [r3, #56]	; 0x38
   125a4:	sub	r3, r3, #1
   125a8:	cmp	r3, #9
   125ac:	ldrls	pc, [pc, r3, lsl #2]
   125b0:	b	128cc <__assert_fail@plt+0x15d0>
   125b4:	ldrdeq	r2, [r1], -ip
   125b8:	andeq	r2, r1, ip, ror r8
   125bc:	andeq	r2, r1, ip, asr #17
   125c0:	andeq	r2, r1, r4, lsr #16
   125c4:	andeq	r2, r1, ip, asr #17
   125c8:	andeq	r2, r1, r8, lsl r7
   125cc:	ldrdeq	r2, [r1], -r4
   125d0:	andeq	r2, r1, ip, asr #17
   125d4:	andeq	r2, r1, ip, asr #17
   125d8:	andeq	r2, r1, r8, lsr r7
   125dc:	ldr	r3, [fp, #12]
   125e0:	ldrb	r3, [r3, #4]
   125e4:	cmp	r3, #0
   125e8:	beq	128d4 <__assert_fail@plt+0x15d8>
   125ec:	ldr	r3, [fp, #12]
   125f0:	ldr	r3, [r3, #8]
   125f4:	cmp	r3, #0
   125f8:	beq	12710 <__assert_fail@plt+0x1414>
   125fc:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12600:	ldrd	r0, [r3, #160]	; 0xa0
   12604:	ldr	r3, [fp, #12]
   12608:	ldr	r3, [r3, #8]
   1260c:	ldrd	r2, [r3]
   12610:	cmp	r1, r3
   12614:	cmpeq	r0, r2
   12618:	bne	12710 <__assert_fail@plt+0x1414>
   1261c:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12620:	ldrd	r0, [r3, #64]	; 0x40
   12624:	ldr	r3, [fp, #12]
   12628:	ldr	r3, [r3, #8]
   1262c:	ldrd	r2, [r3, #8]
   12630:	cmp	r1, r3
   12634:	cmpeq	r0, r2
   12638:	bne	12710 <__assert_fail@plt+0x1414>
   1263c:	ldr	r1, [pc, #2372]	; 12f88 <__assert_fail@plt+0x1c8c>
   12640:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12644:	bl	10ff0 <strcmp@plt>
   12648:	mov	r3, r0
   1264c:	cmp	r3, #0
   12650:	bne	12684 <__assert_fail@plt+0x1388>
   12654:	ldr	r0, [pc, #2352]	; 12f8c <__assert_fail@plt+0x1c90>
   12658:	bl	1117c <gettext@plt>
   1265c:	mov	r4, r0
   12660:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12664:	mov	r0, #4
   12668:	bl	1a8a0 <__assert_fail@plt+0x95a4>
   1266c:	mov	r3, r0
   12670:	mov	r2, r4
   12674:	mov	r1, #0
   12678:	mov	r0, #0
   1267c:	bl	11110 <error@plt>
   12680:	b	126d0 <__assert_fail@plt+0x13d4>
   12684:	ldr	r0, [pc, #2308]	; 12f90 <__assert_fail@plt+0x1c94>
   12688:	bl	1117c <gettext@plt>
   1268c:	mov	r4, r0
   12690:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12694:	mov	r1, #4
   12698:	mov	r0, #0
   1269c:	bl	1a804 <__assert_fail@plt+0x9508>
   126a0:	mov	r5, r0
   126a4:	ldr	r2, [pc, #2268]	; 12f88 <__assert_fail@plt+0x1c8c>
   126a8:	mov	r1, #4
   126ac:	mov	r0, #1
   126b0:	bl	1a804 <__assert_fail@plt+0x9508>
   126b4:	mov	r3, r0
   126b8:	str	r3, [sp]
   126bc:	mov	r3, r5
   126c0:	mov	r2, r4
   126c4:	mov	r1, #0
   126c8:	mov	r0, #0
   126cc:	bl	11110 <error@plt>
   126d0:	ldr	r0, [pc, #2236]	; 12f94 <__assert_fail@plt+0x1c98>
   126d4:	bl	1117c <gettext@plt>
   126d8:	mov	r3, r0
   126dc:	mov	r2, r3
   126e0:	mov	r1, #0
   126e4:	mov	r0, #0
   126e8:	bl	11110 <error@plt>
   126ec:	mov	r2, #4
   126f0:	ldr	r1, [fp, #-164]	; 0xffffff5c
   126f4:	ldr	r0, [fp, #-160]	; 0xffffff60
   126f8:	bl	14d5c <__assert_fail@plt+0x3a60>
   126fc:	ldr	r0, [fp, #-160]	; 0xffffff60
   12700:	bl	145e8 <__assert_fail@plt+0x32ec>
   12704:	str	r0, [fp, #-32]	; 0xffffffe0
   12708:	mov	r3, #0
   1270c:	b	12f7c <__assert_fail@plt+0x1c80>
   12710:	mov	r3, #1
   12714:	b	12f7c <__assert_fail@plt+0x1c80>
   12718:	ldr	r3, [fp, #12]
   1271c:	ldrb	r3, [r3, #4]
   12720:	eor	r3, r3, #1
   12724:	uxtb	r3, r3
   12728:	cmp	r3, #0
   1272c:	beq	128dc <__assert_fail@plt+0x15e0>
   12730:	mov	r3, #1
   12734:	b	12f7c <__assert_fail@plt+0x1c80>
   12738:	ldr	r3, [fp, #-164]	; 0xffffff5c
   1273c:	ldr	r3, [r3, #48]	; 0x30
   12740:	cmp	r3, #0
   12744:	bne	1277c <__assert_fail@plt+0x1480>
   12748:	ldr	r3, [fp, #-164]	; 0xffffff5c
   1274c:	ldr	r3, [r3, #16]
   12750:	cmp	r3, #0
   12754:	bne	1277c <__assert_fail@plt+0x1480>
   12758:	ldr	r3, [fp, #-164]	; 0xffffff5c
   1275c:	mov	r2, #1
   12760:	str	r2, [r3, #16]
   12764:	mov	r2, #1
   12768:	ldr	r1, [fp, #-164]	; 0xffffff5c
   1276c:	ldr	r0, [fp, #-160]	; 0xffffff60
   12770:	bl	14d5c <__assert_fail@plt+0x3a60>
   12774:	mov	r3, #1
   12778:	b	12f7c <__assert_fail@plt+0x1c80>
   1277c:	ldr	r3, [fp, #12]
   12780:	ldrb	r3, [r3, #13]
   12784:	eor	r3, r3, #1
   12788:	uxtb	r3, r3
   1278c:	cmp	r3, #0
   12790:	beq	127c8 <__assert_fail@plt+0x14cc>
   12794:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12798:	ldr	r4, [r3, #32]
   1279c:	ldr	r0, [pc, #2036]	; 12f98 <__assert_fail@plt+0x1c9c>
   127a0:	bl	1117c <gettext@plt>
   127a4:	mov	r5, r0
   127a8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   127ac:	mov	r0, #4
   127b0:	bl	1a8a0 <__assert_fail@plt+0x95a4>
   127b4:	mov	r3, r0
   127b8:	mov	r2, r5
   127bc:	mov	r1, r4
   127c0:	mov	r0, #0
   127c4:	bl	11110 <error@plt>
   127c8:	mov	r3, #0
   127cc:	strb	r3, [fp, #-17]	; 0xffffffef
   127d0:	b	128e8 <__assert_fail@plt+0x15ec>
   127d4:	ldr	r3, [fp, #12]
   127d8:	ldrb	r3, [r3, #13]
   127dc:	eor	r3, r3, #1
   127e0:	uxtb	r3, r3
   127e4:	cmp	r3, #0
   127e8:	beq	12818 <__assert_fail@plt+0x151c>
   127ec:	ldr	r3, [fp, #-164]	; 0xffffff5c
   127f0:	ldr	r4, [r3, #32]
   127f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   127f8:	mov	r1, #3
   127fc:	mov	r0, #0
   12800:	bl	1aa28 <__assert_fail@plt+0x972c>
   12804:	mov	r3, r0
   12808:	ldr	r2, [pc, #1932]	; 12f9c <__assert_fail@plt+0x1ca0>
   1280c:	mov	r1, r4
   12810:	mov	r0, #0
   12814:	bl	11110 <error@plt>
   12818:	mov	r3, #0
   1281c:	strb	r3, [fp, #-17]	; 0xffffffef
   12820:	b	128e8 <__assert_fail@plt+0x15ec>
   12824:	ldr	r3, [fp, #12]
   12828:	ldrb	r3, [r3, #13]
   1282c:	eor	r3, r3, #1
   12830:	uxtb	r3, r3
   12834:	cmp	r3, #0
   12838:	beq	12870 <__assert_fail@plt+0x1574>
   1283c:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12840:	ldr	r4, [r3, #32]
   12844:	ldr	r0, [pc, #1876]	; 12fa0 <__assert_fail@plt+0x1ca4>
   12848:	bl	1117c <gettext@plt>
   1284c:	mov	r5, r0
   12850:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12854:	mov	r0, #4
   12858:	bl	1a8a0 <__assert_fail@plt+0x95a4>
   1285c:	mov	r3, r0
   12860:	mov	r2, r5
   12864:	mov	r1, r4
   12868:	mov	r0, #0
   1286c:	bl	11110 <error@plt>
   12870:	mov	r3, #0
   12874:	strb	r3, [fp, #-17]	; 0xffffffef
   12878:	b	128e8 <__assert_fail@plt+0x15ec>
   1287c:	ldr	r1, [fp, #-164]	; 0xffffff5c
   12880:	ldr	r0, [fp, #-160]	; 0xffffff60
   12884:	bl	1c164 <__assert_fail@plt+0xae68>
   12888:	mov	r3, r0
   1288c:	cmp	r3, #0
   12890:	beq	128e4 <__assert_fail@plt+0x15e8>
   12894:	ldr	r0, [pc, #1800]	; 12fa4 <__assert_fail@plt+0x1ca8>
   12898:	bl	1117c <gettext@plt>
   1289c:	mov	r4, r0
   128a0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   128a4:	mov	r1, #3
   128a8:	mov	r0, #0
   128ac:	bl	1aa28 <__assert_fail@plt+0x972c>
   128b0:	mov	r3, r0
   128b4:	mov	r2, r4
   128b8:	mov	r1, #0
   128bc:	mov	r0, #0
   128c0:	bl	11110 <error@plt>
   128c4:	mov	r3, #0
   128c8:	b	12f7c <__assert_fail@plt+0x1c80>
   128cc:	nop			; (mov r0, r0)
   128d0:	b	128e8 <__assert_fail@plt+0x15ec>
   128d4:	nop			; (mov r0, r0)
   128d8:	b	128e8 <__assert_fail@plt+0x15ec>
   128dc:	nop			; (mov r0, r0)
   128e0:	b	128e8 <__assert_fail@plt+0x15ec>
   128e4:	nop			; (mov r0, r0)
   128e8:	ldrb	r3, [fp, #-17]	; 0xffffffef
   128ec:	eor	r3, r3, #1
   128f0:	uxtb	r3, r3
   128f4:	cmp	r3, #0
   128f8:	beq	12910 <__assert_fail@plt+0x1614>
   128fc:	mov	r3, #0
   12900:	strb	r3, [fp, #-18]	; 0xffffffee
   12904:	mov	r3, #0
   12908:	str	r3, [fp, #-16]
   1290c:	b	12a94 <__assert_fail@plt+0x1798>
   12910:	ldr	r3, [fp, #4]
   12914:	cmn	r3, #1
   12918:	bne	12978 <__assert_fail@plt+0x167c>
   1291c:	ldr	r3, [fp, #8]
   12920:	cmn	r3, #1
   12924:	bne	12978 <__assert_fail@plt+0x167c>
   12928:	ldr	r3, [fp, #12]
   1292c:	ldr	r3, [r3]
   12930:	cmp	r3, #2
   12934:	bne	12978 <__assert_fail@plt+0x167c>
   12938:	ldr	r3, [fp, #12]
   1293c:	ldr	r3, [r3, #8]
   12940:	cmp	r3, #0
   12944:	bne	12978 <__assert_fail@plt+0x167c>
   12948:	ldr	r3, [fp, #12]
   1294c:	ldrb	r3, [r3, #12]
   12950:	eor	r3, r3, #1
   12954:	uxtb	r3, r3
   12958:	cmp	r3, #0
   1295c:	beq	12978 <__assert_fail@plt+0x167c>
   12960:	mov	r3, #1
   12964:	strb	r3, [fp, #-18]	; 0xffffffee
   12968:	ldr	r3, [fp, #-164]	; 0xffffff5c
   1296c:	add	r3, r3, #64	; 0x40
   12970:	str	r3, [fp, #-16]
   12974:	b	12a94 <__assert_fail@plt+0x1798>
   12978:	ldr	r3, [fp, #-164]	; 0xffffff5c
   1297c:	add	r3, r3, #64	; 0x40
   12980:	str	r3, [fp, #-16]
   12984:	ldr	r3, [fp, #12]
   12988:	ldrb	r3, [r3, #12]
   1298c:	cmp	r3, #0
   12990:	beq	12a2c <__assert_fail@plt+0x1730>
   12994:	ldr	r3, [fp, #-16]
   12998:	ldr	r3, [r3, #16]
   1299c:	and	r3, r3, #61440	; 0xf000
   129a0:	cmp	r3, #40960	; 0xa000
   129a4:	bne	12a2c <__assert_fail@plt+0x1730>
   129a8:	ldr	r3, [fp, #-160]	; 0xffffff60
   129ac:	ldr	r0, [r3, #32]
   129b0:	sub	r2, fp, #156	; 0x9c
   129b4:	mov	r3, #0
   129b8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   129bc:	bl	1e970 <__assert_fail@plt+0xd674>
   129c0:	mov	r3, r0
   129c4:	cmp	r3, #0
   129c8:	beq	12a24 <__assert_fail@plt+0x1728>
   129cc:	ldr	r3, [fp, #12]
   129d0:	ldrb	r3, [r3, #13]
   129d4:	eor	r3, r3, #1
   129d8:	uxtb	r3, r3
   129dc:	cmp	r3, #0
   129e0:	beq	12a1c <__assert_fail@plt+0x1720>
   129e4:	bl	111c4 <__errno_location@plt>
   129e8:	mov	r3, r0
   129ec:	ldr	r4, [r3]
   129f0:	ldr	r0, [pc, #1456]	; 12fa8 <__assert_fail@plt+0x1cac>
   129f4:	bl	1117c <gettext@plt>
   129f8:	mov	r5, r0
   129fc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12a00:	mov	r0, #4
   12a04:	bl	1a8a0 <__assert_fail@plt+0x95a4>
   12a08:	mov	r3, r0
   12a0c:	mov	r2, r5
   12a10:	mov	r1, r4
   12a14:	mov	r0, #0
   12a18:	bl	11110 <error@plt>
   12a1c:	mov	r3, #0
   12a20:	strb	r3, [fp, #-17]	; 0xffffffef
   12a24:	sub	r3, fp, #156	; 0x9c
   12a28:	str	r3, [fp, #-16]
   12a2c:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12a30:	cmp	r3, #0
   12a34:	beq	12a80 <__assert_fail@plt+0x1784>
   12a38:	ldr	r3, [fp, #4]
   12a3c:	cmn	r3, #1
   12a40:	beq	12a58 <__assert_fail@plt+0x175c>
   12a44:	ldr	r3, [fp, #-16]
   12a48:	ldr	r2, [r3, #24]
   12a4c:	ldr	r3, [fp, #4]
   12a50:	cmp	r2, r3
   12a54:	bne	12a80 <__assert_fail@plt+0x1784>
   12a58:	ldr	r3, [fp, #8]
   12a5c:	cmn	r3, #1
   12a60:	beq	12a78 <__assert_fail@plt+0x177c>
   12a64:	ldr	r3, [fp, #-16]
   12a68:	ldr	r2, [r3, #28]
   12a6c:	ldr	r3, [fp, #8]
   12a70:	cmp	r2, r3
   12a74:	bne	12a80 <__assert_fail@plt+0x1784>
   12a78:	mov	r3, #1
   12a7c:	b	12a84 <__assert_fail@plt+0x1788>
   12a80:	mov	r3, #0
   12a84:	strb	r3, [fp, #-18]	; 0xffffffee
   12a88:	ldrb	r3, [fp, #-18]	; 0xffffffee
   12a8c:	and	r3, r3, #1
   12a90:	strb	r3, [fp, #-18]	; 0xffffffee
   12a94:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12a98:	cmp	r3, #0
   12a9c:	beq	12be8 <__assert_fail@plt+0x18ec>
   12aa0:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12aa4:	ldrh	r3, [r3, #56]	; 0x38
   12aa8:	cmp	r3, #1
   12aac:	beq	12ae0 <__assert_fail@plt+0x17e4>
   12ab0:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12ab4:	ldrh	r3, [r3, #56]	; 0x38
   12ab8:	cmp	r3, #2
   12abc:	beq	12ae0 <__assert_fail@plt+0x17e4>
   12ac0:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12ac4:	ldrh	r3, [r3, #56]	; 0x38
   12ac8:	cmp	r3, #6
   12acc:	beq	12ae0 <__assert_fail@plt+0x17e4>
   12ad0:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12ad4:	ldrh	r3, [r3, #56]	; 0x38
   12ad8:	cmp	r3, #4
   12adc:	bne	12be8 <__assert_fail@plt+0x18ec>
   12ae0:	ldr	r3, [fp, #12]
   12ae4:	ldr	r3, [r3, #8]
   12ae8:	cmp	r3, #0
   12aec:	beq	12be8 <__assert_fail@plt+0x18ec>
   12af0:	ldr	r3, [fp, #-16]
   12af4:	ldrd	r0, [r3, #96]	; 0x60
   12af8:	ldr	r3, [fp, #12]
   12afc:	ldr	r3, [r3, #8]
   12b00:	ldrd	r2, [r3]
   12b04:	cmp	r1, r3
   12b08:	cmpeq	r0, r2
   12b0c:	bne	12be8 <__assert_fail@plt+0x18ec>
   12b10:	ldr	r3, [fp, #-16]
   12b14:	ldrd	r0, [r3]
   12b18:	ldr	r3, [fp, #12]
   12b1c:	ldr	r3, [r3, #8]
   12b20:	ldrd	r2, [r3, #8]
   12b24:	cmp	r1, r3
   12b28:	cmpeq	r0, r2
   12b2c:	bne	12be8 <__assert_fail@plt+0x18ec>
   12b30:	ldr	r1, [pc, #1104]	; 12f88 <__assert_fail@plt+0x1c8c>
   12b34:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12b38:	bl	10ff0 <strcmp@plt>
   12b3c:	mov	r3, r0
   12b40:	cmp	r3, #0
   12b44:	bne	12b78 <__assert_fail@plt+0x187c>
   12b48:	ldr	r0, [pc, #1084]	; 12f8c <__assert_fail@plt+0x1c90>
   12b4c:	bl	1117c <gettext@plt>
   12b50:	mov	r4, r0
   12b54:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12b58:	mov	r0, #4
   12b5c:	bl	1a8a0 <__assert_fail@plt+0x95a4>
   12b60:	mov	r3, r0
   12b64:	mov	r2, r4
   12b68:	mov	r1, #0
   12b6c:	mov	r0, #0
   12b70:	bl	11110 <error@plt>
   12b74:	b	12bc4 <__assert_fail@plt+0x18c8>
   12b78:	ldr	r0, [pc, #1040]	; 12f90 <__assert_fail@plt+0x1c94>
   12b7c:	bl	1117c <gettext@plt>
   12b80:	mov	r4, r0
   12b84:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12b88:	mov	r1, #4
   12b8c:	mov	r0, #0
   12b90:	bl	1a804 <__assert_fail@plt+0x9508>
   12b94:	mov	r5, r0
   12b98:	ldr	r2, [pc, #1000]	; 12f88 <__assert_fail@plt+0x1c8c>
   12b9c:	mov	r1, #4
   12ba0:	mov	r0, #1
   12ba4:	bl	1a804 <__assert_fail@plt+0x9508>
   12ba8:	mov	r3, r0
   12bac:	str	r3, [sp]
   12bb0:	mov	r3, r5
   12bb4:	mov	r2, r4
   12bb8:	mov	r1, #0
   12bbc:	mov	r0, #0
   12bc0:	bl	11110 <error@plt>
   12bc4:	ldr	r0, [pc, #968]	; 12f94 <__assert_fail@plt+0x1c98>
   12bc8:	bl	1117c <gettext@plt>
   12bcc:	mov	r3, r0
   12bd0:	mov	r2, r3
   12bd4:	mov	r1, #0
   12bd8:	mov	r0, #0
   12bdc:	bl	11110 <error@plt>
   12be0:	mov	r3, #0
   12be4:	b	12f7c <__assert_fail@plt+0x1c80>
   12be8:	ldrb	r3, [fp, #-18]	; 0xffffffee
   12bec:	cmp	r3, #0
   12bf0:	beq	12db4 <__assert_fail@plt+0x1ab8>
   12bf4:	ldr	r3, [fp, #12]
   12bf8:	ldrb	r3, [r3, #12]
   12bfc:	eor	r3, r3, #1
   12c00:	uxtb	r3, r3
   12c04:	cmp	r3, #0
   12c08:	beq	12c74 <__assert_fail@plt+0x1978>
   12c0c:	ldr	r3, [fp, #-160]	; 0xffffff60
   12c10:	ldr	r0, [r3, #32]
   12c14:	ldr	r3, [fp, #-172]	; 0xffffff54
   12c18:	ldr	r2, [fp, #-168]	; 0xffffff58
   12c1c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12c20:	bl	131b4 <__assert_fail@plt+0x1eb8>
   12c24:	mov	r3, r0
   12c28:	cmp	r3, #0
   12c2c:	moveq	r3, #1
   12c30:	movne	r3, #0
   12c34:	strb	r3, [fp, #-17]	; 0xffffffef
   12c38:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12c3c:	eor	r3, r3, #1
   12c40:	uxtb	r3, r3
   12c44:	cmp	r3, #0
   12c48:	beq	12d28 <__assert_fail@plt+0x1a2c>
   12c4c:	bl	111c4 <__errno_location@plt>
   12c50:	mov	r3, r0
   12c54:	ldr	r3, [r3]
   12c58:	cmp	r3, #95	; 0x5f
   12c5c:	bne	12d28 <__assert_fail@plt+0x1a2c>
   12c60:	mov	r3, #1
   12c64:	strb	r3, [fp, #-17]	; 0xffffffef
   12c68:	mov	r3, #0
   12c6c:	strb	r3, [fp, #-19]	; 0xffffffed
   12c70:	b	12d28 <__assert_fail@plt+0x1a2c>
   12c74:	ldr	r3, [fp, #-160]	; 0xffffff60
   12c78:	ldr	r0, [r3, #32]
   12c7c:	ldr	r3, [fp, #8]
   12c80:	str	r3, [sp, #8]
   12c84:	ldr	r3, [fp, #4]
   12c88:	str	r3, [sp, #4]
   12c8c:	ldr	r3, [fp, #-172]	; 0xffffff54
   12c90:	str	r3, [sp]
   12c94:	ldr	r3, [fp, #-168]	; 0xffffff58
   12c98:	ldr	r2, [fp, #-16]
   12c9c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12ca0:	bl	12314 <__assert_fail@plt+0x1018>
   12ca4:	str	r0, [fp, #-36]	; 0xffffffdc
   12ca8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12cac:	sub	r3, r3, #2
   12cb0:	cmp	r3, #4
   12cb4:	ldrls	pc, [pc, r3, lsl #2]
   12cb8:	b	12d20 <__assert_fail@plt+0x1a24>
   12cbc:	andeq	r2, r1, r4, lsr #26
   12cc0:	andeq	r2, r1, ip, lsl #26
   12cc4:	andeq	r2, r1, ip, lsl #26
   12cc8:	ldrdeq	r2, [r1], -r0
   12ccc:	andeq	r2, r1, r0, lsl #26
   12cd0:	ldr	r3, [fp, #-160]	; 0xffffff60
   12cd4:	ldr	r0, [r3, #32]
   12cd8:	ldr	r3, [fp, #-172]	; 0xffffff54
   12cdc:	ldr	r2, [fp, #-168]	; 0xffffff58
   12ce0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12ce4:	bl	1316c <__assert_fail@plt+0x1e70>
   12ce8:	mov	r3, r0
   12cec:	cmp	r3, #0
   12cf0:	moveq	r3, #1
   12cf4:	movne	r3, #0
   12cf8:	strb	r3, [fp, #-17]	; 0xffffffef
   12cfc:	b	12d28 <__assert_fail@plt+0x1a2c>
   12d00:	mov	r3, #0
   12d04:	strb	r3, [fp, #-17]	; 0xffffffef
   12d08:	b	12d28 <__assert_fail@plt+0x1a2c>
   12d0c:	mov	r3, #0
   12d10:	strb	r3, [fp, #-18]	; 0xffffffee
   12d14:	mov	r3, #0
   12d18:	strb	r3, [fp, #-17]	; 0xffffffef
   12d1c:	b	12d28 <__assert_fail@plt+0x1a2c>
   12d20:	bl	112b4 <abort@plt>
   12d24:	nop			; (mov r0, r0)
   12d28:	ldrb	r3, [fp, #-18]	; 0xffffffee
   12d2c:	cmp	r3, #0
   12d30:	beq	12db4 <__assert_fail@plt+0x1ab8>
   12d34:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12d38:	eor	r3, r3, #1
   12d3c:	uxtb	r3, r3
   12d40:	cmp	r3, #0
   12d44:	beq	12db4 <__assert_fail@plt+0x1ab8>
   12d48:	ldr	r3, [fp, #12]
   12d4c:	ldrb	r3, [r3, #13]
   12d50:	eor	r3, r3, #1
   12d54:	uxtb	r3, r3
   12d58:	cmp	r3, #0
   12d5c:	beq	12db4 <__assert_fail@plt+0x1ab8>
   12d60:	bl	111c4 <__errno_location@plt>
   12d64:	mov	r3, r0
   12d68:	ldr	r4, [r3]
   12d6c:	ldr	r3, [fp, #-168]	; 0xffffff58
   12d70:	cmn	r3, #1
   12d74:	beq	12d88 <__assert_fail@plt+0x1a8c>
   12d78:	ldr	r0, [pc, #556]	; 12fac <__assert_fail@plt+0x1cb0>
   12d7c:	bl	1117c <gettext@plt>
   12d80:	mov	r5, r0
   12d84:	b	12d94 <__assert_fail@plt+0x1a98>
   12d88:	ldr	r0, [pc, #544]	; 12fb0 <__assert_fail@plt+0x1cb4>
   12d8c:	bl	1117c <gettext@plt>
   12d90:	mov	r5, r0
   12d94:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12d98:	mov	r0, #4
   12d9c:	bl	1a8a0 <__assert_fail@plt+0x95a4>
   12da0:	mov	r3, r0
   12da4:	mov	r2, r5
   12da8:	mov	r1, r4
   12dac:	mov	r0, #0
   12db0:	bl	11110 <error@plt>
   12db4:	ldr	r3, [fp, #12]
   12db8:	ldr	r3, [r3]
   12dbc:	cmp	r3, #2
   12dc0:	beq	12f50 <__assert_fail@plt+0x1c54>
   12dc4:	ldrb	r3, [fp, #-18]	; 0xffffffee
   12dc8:	cmp	r3, #0
   12dcc:	beq	12e30 <__assert_fail@plt+0x1b34>
   12dd0:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12dd4:	cmp	r3, #0
   12dd8:	beq	12e30 <__assert_fail@plt+0x1b34>
   12ddc:	ldrb	r3, [fp, #-19]	; 0xffffffed
   12de0:	cmp	r3, #0
   12de4:	beq	12e30 <__assert_fail@plt+0x1b34>
   12de8:	ldr	r3, [fp, #-168]	; 0xffffff58
   12dec:	cmn	r3, #1
   12df0:	beq	12e08 <__assert_fail@plt+0x1b0c>
   12df4:	ldr	r3, [fp, #-16]
   12df8:	ldr	r2, [r3, #24]
   12dfc:	ldr	r3, [fp, #-168]	; 0xffffff58
   12e00:	cmp	r2, r3
   12e04:	bne	12e28 <__assert_fail@plt+0x1b2c>
   12e08:	ldr	r3, [fp, #-172]	; 0xffffff54
   12e0c:	cmn	r3, #1
   12e10:	beq	12e30 <__assert_fail@plt+0x1b34>
   12e14:	ldr	r3, [fp, #-16]
   12e18:	ldr	r2, [r3, #28]
   12e1c:	ldr	r3, [fp, #-172]	; 0xffffff54
   12e20:	cmp	r2, r3
   12e24:	beq	12e30 <__assert_fail@plt+0x1b34>
   12e28:	mov	r3, #1
   12e2c:	b	12e34 <__assert_fail@plt+0x1b38>
   12e30:	mov	r3, #0
   12e34:	strb	r3, [fp, #-37]	; 0xffffffdb
   12e38:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   12e3c:	and	r3, r3, #1
   12e40:	strb	r3, [fp, #-37]	; 0xffffffdb
   12e44:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   12e48:	cmp	r3, #0
   12e4c:	bne	12e60 <__assert_fail@plt+0x1b64>
   12e50:	ldr	r3, [fp, #12]
   12e54:	ldr	r3, [r3]
   12e58:	cmp	r3, #0
   12e5c:	bne	12f50 <__assert_fail@plt+0x1c54>
   12e60:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12e64:	eor	r3, r3, #1
   12e68:	uxtb	r3, r3
   12e6c:	cmp	r3, #0
   12e70:	beq	12e7c <__assert_fail@plt+0x1b80>
   12e74:	mov	r3, #3
   12e78:	b	12eb8 <__assert_fail@plt+0x1bbc>
   12e7c:	ldrb	r3, [fp, #-19]	; 0xffffffed
   12e80:	eor	r3, r3, #1
   12e84:	uxtb	r3, r3
   12e88:	cmp	r3, #0
   12e8c:	beq	12e98 <__assert_fail@plt+0x1b9c>
   12e90:	mov	r3, #1
   12e94:	b	12eb8 <__assert_fail@plt+0x1bbc>
   12e98:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   12e9c:	eor	r3, r3, #1
   12ea0:	uxtb	r3, r3
   12ea4:	cmp	r3, #0
   12ea8:	beq	12eb4 <__assert_fail@plt+0x1bb8>
   12eac:	mov	r3, #4
   12eb0:	b	12eb8 <__assert_fail@plt+0x1bbc>
   12eb4:	mov	r3, #2
   12eb8:	str	r3, [fp, #-44]	; 0xffffffd4
   12ebc:	ldr	r3, [fp, #-16]
   12ec0:	cmp	r3, #0
   12ec4:	beq	12ee0 <__assert_fail@plt+0x1be4>
   12ec8:	ldr	r3, [fp, #-16]
   12ecc:	ldr	r3, [r3, #24]
   12ed0:	mov	r0, r3
   12ed4:	bl	11f50 <__assert_fail@plt+0xc54>
   12ed8:	mov	r3, r0
   12edc:	b	12ee4 <__assert_fail@plt+0x1be8>
   12ee0:	mov	r3, #0
   12ee4:	str	r3, [fp, #-48]	; 0xffffffd0
   12ee8:	ldr	r3, [fp, #-16]
   12eec:	cmp	r3, #0
   12ef0:	beq	12f0c <__assert_fail@plt+0x1c10>
   12ef4:	ldr	r3, [fp, #-16]
   12ef8:	ldr	r3, [r3, #28]
   12efc:	mov	r0, r3
   12f00:	bl	11ee8 <__assert_fail@plt+0xbec>
   12f04:	mov	r3, r0
   12f08:	b	12f10 <__assert_fail@plt+0x1c14>
   12f0c:	mov	r3, #0
   12f10:	str	r3, [fp, #-52]	; 0xffffffcc
   12f14:	ldr	r3, [fp, #12]
   12f18:	ldr	r3, [r3, #16]
   12f1c:	ldr	r2, [fp, #12]
   12f20:	ldr	r2, [r2, #20]
   12f24:	str	r2, [sp, #4]
   12f28:	str	r3, [sp]
   12f2c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12f30:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12f34:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12f38:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12f3c:	bl	12094 <__assert_fail@plt+0xd98>
   12f40:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12f44:	bl	13394 <__assert_fail@plt+0x2098>
   12f48:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12f4c:	bl	13394 <__assert_fail@plt+0x2098>
   12f50:	ldr	r3, [fp, #12]
   12f54:	ldrb	r3, [r3, #4]
   12f58:	eor	r3, r3, #1
   12f5c:	uxtb	r3, r3
   12f60:	cmp	r3, #0
   12f64:	beq	12f78 <__assert_fail@plt+0x1c7c>
   12f68:	mov	r2, #4
   12f6c:	ldr	r1, [fp, #-164]	; 0xffffff5c
   12f70:	ldr	r0, [fp, #-160]	; 0xffffff60
   12f74:	bl	14d5c <__assert_fail@plt+0x3a60>
   12f78:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12f7c:	mov	r0, r3
   12f80:	sub	sp, fp, #12
   12f84:	pop	{r4, r5, fp, pc}
   12f88:	andeq	pc, r1, r0, ror #12
   12f8c:	andeq	pc, r1, r4, ror #12
   12f90:	muleq	r1, r4, r6
   12f94:	ldrdeq	pc, [r1], -r0
   12f98:	andeq	pc, r1, r4, lsl #14
   12f9c:	andeq	pc, r1, r8, lsl r7	; <UNPREDICTABLE>
   12fa0:	andeq	pc, r1, ip, lsl r7	; <UNPREDICTABLE>
   12fa4:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   12fa8:	strdeq	pc, [r1], -r4
   12fac:	andeq	pc, r1, ip, lsl #16
   12fb0:	andeq	pc, r1, r8, lsr #16
   12fb4:	push	{r4, fp, lr}
   12fb8:	add	fp, sp, #8
   12fbc:	sub	sp, sp, #52	; 0x34
   12fc0:	str	r0, [fp, #-32]	; 0xffffffe0
   12fc4:	str	r1, [fp, #-36]	; 0xffffffdc
   12fc8:	str	r2, [fp, #-40]	; 0xffffffd8
   12fcc:	str	r3, [fp, #-44]	; 0xffffffd4
   12fd0:	mov	r3, #1
   12fd4:	strb	r3, [fp, #-13]
   12fd8:	ldr	r3, [fp, #4]
   12fdc:	cmn	r3, #1
   12fe0:	bne	13010 <__assert_fail@plt+0x1d14>
   12fe4:	ldr	r3, [fp, #8]
   12fe8:	cmn	r3, #1
   12fec:	bne	13010 <__assert_fail@plt+0x1d14>
   12ff0:	ldr	r3, [fp, #12]
   12ff4:	ldrb	r3, [r3, #12]
   12ff8:	cmp	r3, #0
   12ffc:	bne	13010 <__assert_fail@plt+0x1d14>
   13000:	ldr	r3, [fp, #12]
   13004:	ldr	r3, [r3]
   13008:	cmp	r3, #2
   1300c:	beq	13018 <__assert_fail@plt+0x1d1c>
   13010:	mov	r3, #0
   13014:	b	1301c <__assert_fail@plt+0x1d20>
   13018:	mov	r3, #8
   1301c:	str	r3, [fp, #-20]	; 0xffffffec
   13020:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13024:	ldr	r3, [fp, #-20]	; 0xffffffec
   13028:	orr	r3, r2, r3
   1302c:	mov	r2, #0
   13030:	mov	r1, r3
   13034:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13038:	bl	1c0dc <__assert_fail@plt+0xade0>
   1303c:	mov	r3, r0
   13040:	str	r3, [fp, #-24]	; 0xffffffe8
   13044:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13048:	bl	145e8 <__assert_fail@plt+0x32ec>
   1304c:	str	r0, [fp, #-28]	; 0xffffffe4
   13050:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13054:	cmp	r3, #0
   13058:	bne	130bc <__assert_fail@plt+0x1dc0>
   1305c:	bl	111c4 <__errno_location@plt>
   13060:	mov	r3, r0
   13064:	ldr	r3, [r3]
   13068:	cmp	r3, #0
   1306c:	beq	1310c <__assert_fail@plt+0x1e10>
   13070:	ldr	r3, [fp, #12]
   13074:	ldrb	r3, [r3, #13]
   13078:	eor	r3, r3, #1
   1307c:	uxtb	r3, r3
   13080:	cmp	r3, #0
   13084:	beq	130b0 <__assert_fail@plt+0x1db4>
   13088:	bl	111c4 <__errno_location@plt>
   1308c:	mov	r3, r0
   13090:	ldr	r4, [r3]
   13094:	ldr	r0, [pc, #200]	; 13164 <__assert_fail@plt+0x1e68>
   13098:	bl	1117c <gettext@plt>
   1309c:	mov	r3, r0
   130a0:	mov	r2, r3
   130a4:	mov	r1, r4
   130a8:	mov	r0, #0
   130ac:	bl	11110 <error@plt>
   130b0:	mov	r3, #0
   130b4:	strb	r3, [fp, #-13]
   130b8:	b	1310c <__assert_fail@plt+0x1e10>
   130bc:	ldr	r3, [fp, #12]
   130c0:	str	r3, [sp, #8]
   130c4:	ldr	r3, [fp, #8]
   130c8:	str	r3, [sp, #4]
   130cc:	ldr	r3, [fp, #4]
   130d0:	str	r3, [sp]
   130d4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   130d8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   130dc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   130e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   130e4:	bl	12558 <__assert_fail@plt+0x125c>
   130e8:	mov	r3, r0
   130ec:	mov	r2, r3
   130f0:	ldrb	r3, [fp, #-13]
   130f4:	and	r3, r3, r2
   130f8:	cmp	r3, #0
   130fc:	movne	r3, #1
   13100:	moveq	r3, #0
   13104:	strb	r3, [fp, #-13]
   13108:	b	13044 <__assert_fail@plt+0x1d48>
   1310c:	nop			; (mov r0, r0)
   13110:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13114:	bl	140bc <__assert_fail@plt+0x2dc0>
   13118:	mov	r3, r0
   1311c:	cmp	r3, #0
   13120:	beq	13154 <__assert_fail@plt+0x1e58>
   13124:	bl	111c4 <__errno_location@plt>
   13128:	mov	r3, r0
   1312c:	ldr	r4, [r3]
   13130:	ldr	r0, [pc, #48]	; 13168 <__assert_fail@plt+0x1e6c>
   13134:	bl	1117c <gettext@plt>
   13138:	mov	r3, r0
   1313c:	mov	r2, r3
   13140:	mov	r1, r4
   13144:	mov	r0, #0
   13148:	bl	11110 <error@plt>
   1314c:	mov	r3, #0
   13150:	strb	r3, [fp, #-13]
   13154:	ldrb	r3, [fp, #-13]
   13158:	mov	r0, r3
   1315c:	sub	sp, fp, #8
   13160:	pop	{r4, fp, pc}
   13164:	andeq	pc, r1, r0, asr #16
   13168:	andeq	pc, r1, r0, asr r8	; <UNPREDICTABLE>
   1316c:	push	{fp, lr}
   13170:	add	fp, sp, #4
   13174:	sub	sp, sp, #24
   13178:	str	r0, [fp, #-8]
   1317c:	str	r1, [fp, #-12]
   13180:	str	r2, [fp, #-16]
   13184:	str	r3, [fp, #-20]	; 0xffffffec
   13188:	mov	r3, #0
   1318c:	str	r3, [sp]
   13190:	ldr	r3, [fp, #-20]	; 0xffffffec
   13194:	ldr	r2, [fp, #-16]
   13198:	ldr	r1, [fp, #-12]
   1319c:	ldr	r0, [fp, #-8]
   131a0:	bl	11284 <fchownat@plt>
   131a4:	mov	r3, r0
   131a8:	mov	r0, r3
   131ac:	sub	sp, fp, #4
   131b0:	pop	{fp, pc}
   131b4:	push	{fp, lr}
   131b8:	add	fp, sp, #4
   131bc:	sub	sp, sp, #24
   131c0:	str	r0, [fp, #-8]
   131c4:	str	r1, [fp, #-12]
   131c8:	str	r2, [fp, #-16]
   131cc:	str	r3, [fp, #-20]	; 0xffffffec
   131d0:	mov	r3, #256	; 0x100
   131d4:	str	r3, [sp]
   131d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   131dc:	ldr	r2, [fp, #-16]
   131e0:	ldr	r1, [fp, #-12]
   131e4:	ldr	r0, [fp, #-8]
   131e8:	bl	11284 <fchownat@plt>
   131ec:	mov	r3, r0
   131f0:	mov	r0, r3
   131f4:	sub	sp, fp, #4
   131f8:	pop	{fp, pc}
   131fc:	push	{fp}		; (str fp, [sp, #-4]!)
   13200:	add	fp, sp, #0
   13204:	sub	sp, sp, #12
   13208:	str	r0, [fp, #-8]
   1320c:	ldr	r2, [pc, #20]	; 13228 <__assert_fail@plt+0x1f2c>
   13210:	ldr	r3, [fp, #-8]
   13214:	str	r3, [r2]
   13218:	nop			; (mov r0, r0)
   1321c:	add	sp, fp, #0
   13220:	pop	{fp}		; (ldr fp, [sp], #4)
   13224:	bx	lr
   13228:			; <UNDEFINED> instruction: 0x000301b8
   1322c:	push	{fp}		; (str fp, [sp, #-4]!)
   13230:	add	fp, sp, #0
   13234:	sub	sp, sp, #12
   13238:	mov	r3, r0
   1323c:	strb	r3, [fp, #-5]
   13240:	ldr	r2, [pc, #20]	; 1325c <__assert_fail@plt+0x1f60>
   13244:	ldrb	r3, [fp, #-5]
   13248:	strb	r3, [r2]
   1324c:	nop			; (mov r0, r0)
   13250:	add	sp, fp, #0
   13254:	pop	{fp}		; (ldr fp, [sp], #4)
   13258:	bx	lr
   1325c:			; <UNDEFINED> instruction: 0x000301bc
   13260:	push	{r4, fp, lr}
   13264:	add	fp, sp, #8
   13268:	sub	sp, sp, #20
   1326c:	ldr	r3, [pc, #256]	; 13374 <__assert_fail@plt+0x2078>
   13270:	ldr	r3, [r3]
   13274:	mov	r0, r3
   13278:	bl	1cfe8 <__assert_fail@plt+0xbcec>
   1327c:	mov	r3, r0
   13280:	cmp	r3, #0
   13284:	beq	1333c <__assert_fail@plt+0x2040>
   13288:	ldr	r3, [pc, #232]	; 13378 <__assert_fail@plt+0x207c>
   1328c:	ldrb	r3, [r3]
   13290:	eor	r3, r3, #1
   13294:	uxtb	r3, r3
   13298:	cmp	r3, #0
   1329c:	bne	132b4 <__assert_fail@plt+0x1fb8>
   132a0:	bl	111c4 <__errno_location@plt>
   132a4:	mov	r3, r0
   132a8:	ldr	r3, [r3]
   132ac:	cmp	r3, #32
   132b0:	beq	1333c <__assert_fail@plt+0x2040>
   132b4:	ldr	r0, [pc, #192]	; 1337c <__assert_fail@plt+0x2080>
   132b8:	bl	1117c <gettext@plt>
   132bc:	str	r0, [fp, #-16]
   132c0:	ldr	r3, [pc, #184]	; 13380 <__assert_fail@plt+0x2084>
   132c4:	ldr	r3, [r3]
   132c8:	cmp	r3, #0
   132cc:	beq	13310 <__assert_fail@plt+0x2014>
   132d0:	bl	111c4 <__errno_location@plt>
   132d4:	mov	r3, r0
   132d8:	ldr	r4, [r3]
   132dc:	ldr	r3, [pc, #156]	; 13380 <__assert_fail@plt+0x2084>
   132e0:	ldr	r3, [r3]
   132e4:	mov	r0, r3
   132e8:	bl	1a9c8 <__assert_fail@plt+0x96cc>
   132ec:	mov	r2, r0
   132f0:	ldr	r3, [fp, #-16]
   132f4:	str	r3, [sp]
   132f8:	mov	r3, r2
   132fc:	ldr	r2, [pc, #128]	; 13384 <__assert_fail@plt+0x2088>
   13300:	mov	r1, r4
   13304:	mov	r0, #0
   13308:	bl	11110 <error@plt>
   1330c:	b	1332c <__assert_fail@plt+0x2030>
   13310:	bl	111c4 <__errno_location@plt>
   13314:	mov	r3, r0
   13318:	ldr	r1, [r3]
   1331c:	ldr	r3, [fp, #-16]
   13320:	ldr	r2, [pc, #96]	; 13388 <__assert_fail@plt+0x208c>
   13324:	mov	r0, #0
   13328:	bl	11110 <error@plt>
   1332c:	ldr	r3, [pc, #88]	; 1338c <__assert_fail@plt+0x2090>
   13330:	ldr	r3, [r3]
   13334:	mov	r0, r3
   13338:	bl	11038 <_exit@plt>
   1333c:	ldr	r3, [pc, #76]	; 13390 <__assert_fail@plt+0x2094>
   13340:	ldr	r3, [r3]
   13344:	mov	r0, r3
   13348:	bl	1cfe8 <__assert_fail@plt+0xbcec>
   1334c:	mov	r3, r0
   13350:	cmp	r3, #0
   13354:	beq	13368 <__assert_fail@plt+0x206c>
   13358:	ldr	r3, [pc, #44]	; 1338c <__assert_fail@plt+0x2090>
   1335c:	ldr	r3, [r3]
   13360:	mov	r0, r3
   13364:	bl	11038 <_exit@plt>
   13368:	nop			; (mov r0, r0)
   1336c:	sub	sp, fp, #8
   13370:	pop	{r4, fp, pc}
   13374:	muleq	r3, r4, r1
   13378:			; <UNDEFINED> instruction: 0x000301bc
   1337c:	andeq	pc, r1, r4, ror r8	; <UNPREDICTABLE>
   13380:			; <UNDEFINED> instruction: 0x000301b8
   13384:	andeq	pc, r1, r0, lsl #17
   13388:	andeq	pc, r1, r8, lsl #17
   1338c:	andeq	r0, r3, r8, lsr r1
   13390:	muleq	r3, r0, r1
   13394:	push	{r4, fp, lr}
   13398:	add	fp, sp, #8
   1339c:	sub	sp, sp, #20
   133a0:	str	r0, [fp, #-24]	; 0xffffffe8
   133a4:	bl	111c4 <__errno_location@plt>
   133a8:	mov	r3, r0
   133ac:	ldr	r3, [r3]
   133b0:	str	r3, [fp, #-20]	; 0xffffffec
   133b4:	bl	111c4 <__errno_location@plt>
   133b8:	mov	r3, r0
   133bc:	ldr	r3, [r3]
   133c0:	str	r3, [fp, #-16]
   133c4:	bl	111c4 <__errno_location@plt>
   133c8:	mov	r2, r0
   133cc:	mov	r3, #0
   133d0:	str	r3, [r2]
   133d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   133d8:	bl	1102c <free@plt>
   133dc:	bl	111c4 <__errno_location@plt>
   133e0:	mov	r4, r0
   133e4:	bl	111c4 <__errno_location@plt>
   133e8:	mov	r3, r0
   133ec:	ldr	r3, [r3]
   133f0:	cmp	r3, #0
   133f4:	moveq	r3, #1
   133f8:	movne	r3, #0
   133fc:	uxtb	r3, r3
   13400:	lsl	r3, r3, #2
   13404:	sub	r2, fp, #12
   13408:	add	r3, r2, r3
   1340c:	ldr	r3, [r3, #-8]
   13410:	str	r3, [r4]
   13414:	nop			; (mov r0, r0)
   13418:	sub	sp, fp, #8
   1341c:	pop	{r4, fp, pc}
   13420:	push	{fp}		; (str fp, [sp, #-4]!)
   13424:	add	fp, sp, #0
   13428:	sub	sp, sp, #20
   1342c:	str	r0, [fp, #-16]
   13430:	str	r1, [fp, #-20]	; 0xffffffec
   13434:	ldr	r3, [fp, #-16]
   13438:	str	r3, [fp, #-8]
   1343c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13440:	str	r3, [fp, #-12]
   13444:	ldr	r3, [fp, #-8]
   13448:	ldrd	r0, [r3, #8]
   1344c:	ldr	r3, [fp, #-12]
   13450:	ldrd	r2, [r3, #8]
   13454:	cmp	r1, r3
   13458:	cmpeq	r0, r2
   1345c:	bne	13484 <__assert_fail@plt+0x2188>
   13460:	ldr	r3, [fp, #-8]
   13464:	ldrd	r0, [r3]
   13468:	ldr	r3, [fp, #-12]
   1346c:	ldrd	r2, [r3]
   13470:	cmp	r1, r3
   13474:	cmpeq	r0, r2
   13478:	bne	13484 <__assert_fail@plt+0x2188>
   1347c:	mov	r3, #1
   13480:	b	13488 <__assert_fail@plt+0x218c>
   13484:	mov	r3, #0
   13488:	and	r3, r3, #1
   1348c:	uxtb	r3, r3
   13490:	mov	r0, r3
   13494:	add	sp, fp, #0
   13498:	pop	{fp}		; (ldr fp, [sp], #4)
   1349c:	bx	lr
   134a0:	push	{fp, lr}
   134a4:	add	fp, sp, #4
   134a8:	sub	sp, sp, #16
   134ac:	str	r0, [fp, #-16]
   134b0:	str	r1, [fp, #-20]	; 0xffffffec
   134b4:	ldr	r3, [fp, #-16]
   134b8:	str	r3, [fp, #-8]
   134bc:	ldr	r3, [fp, #-8]
   134c0:	ldrd	r0, [r3, #8]
   134c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   134c8:	mov	r2, r3
   134cc:	mov	r3, #0
   134d0:	bl	1e750 <__assert_fail@plt+0xd454>
   134d4:	mov	r3, r2
   134d8:	mov	r0, r3
   134dc:	sub	sp, fp, #4
   134e0:	pop	{fp, pc}
   134e4:	push	{fp, lr}
   134e8:	add	fp, sp, #4
   134ec:	sub	sp, sp, #16
   134f0:	str	r0, [fp, #-8]
   134f4:	ldr	r3, [fp, #-8]
   134f8:	ldr	r2, [r3, #48]	; 0x30
   134fc:	ldr	r3, [pc, #156]	; 135a0 <__assert_fail@plt+0x22a4>
   13500:	and	r3, r3, r2
   13504:	cmp	r3, #0
   13508:	beq	13550 <__assert_fail@plt+0x2254>
   1350c:	ldr	r3, [pc, #144]	; 135a4 <__assert_fail@plt+0x22a8>
   13510:	str	r3, [sp]
   13514:	ldr	r3, [pc, #140]	; 135a8 <__assert_fail@plt+0x22ac>
   13518:	ldr	r2, [pc, #140]	; 135ac <__assert_fail@plt+0x22b0>
   1351c:	mov	r1, #0
   13520:	mov	r0, #31
   13524:	bl	171d0 <__assert_fail@plt+0x5ed4>
   13528:	mov	r3, r0
   1352c:	mov	r2, r3
   13530:	ldr	r3, [fp, #-8]
   13534:	str	r2, [r3, #56]	; 0x38
   13538:	ldr	r3, [fp, #-8]
   1353c:	ldr	r3, [r3, #56]	; 0x38
   13540:	cmp	r3, #0
   13544:	bne	13590 <__assert_fail@plt+0x2294>
   13548:	mov	r3, #0
   1354c:	b	13594 <__assert_fail@plt+0x2298>
   13550:	mov	r0, #32
   13554:	bl	1cac8 <__assert_fail@plt+0xb7cc>
   13558:	mov	r3, r0
   1355c:	mov	r2, r3
   13560:	ldr	r3, [fp, #-8]
   13564:	str	r2, [r3, #56]	; 0x38
   13568:	ldr	r3, [fp, #-8]
   1356c:	ldr	r3, [r3, #56]	; 0x38
   13570:	cmp	r3, #0
   13574:	bne	13580 <__assert_fail@plt+0x2284>
   13578:	mov	r3, #0
   1357c:	b	13594 <__assert_fail@plt+0x2298>
   13580:	ldr	r3, [fp, #-8]
   13584:	ldr	r3, [r3, #56]	; 0x38
   13588:	mov	r0, r3
   1358c:	bl	1d10c <__assert_fail@plt+0xbe10>
   13590:	mov	r3, #1
   13594:	mov	r0, r3
   13598:	sub	sp, fp, #4
   1359c:	pop	{fp, pc}
   135a0:	andeq	r0, r0, r2, lsl #2
   135a4:	muleq	r1, r4, r3
   135a8:	andeq	r3, r1, r0, lsr #8
   135ac:	andeq	r3, r1, r0, lsr #9
   135b0:	push	{fp, lr}
   135b4:	add	fp, sp, #4
   135b8:	sub	sp, sp, #24
   135bc:	str	r0, [fp, #-24]	; 0xffffffe8
   135c0:	str	r1, [fp, #-28]	; 0xffffffe4
   135c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   135c8:	ldr	r2, [r3, #48]	; 0x30
   135cc:	ldr	r3, [pc, #280]	; 136ec <__assert_fail@plt+0x23f0>
   135d0:	and	r3, r3, r2
   135d4:	cmp	r3, #0
   135d8:	beq	1369c <__assert_fail@plt+0x23a0>
   135dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   135e0:	add	r3, r3, #64	; 0x40
   135e4:	str	r3, [fp, #-8]
   135e8:	mov	r0, #24
   135ec:	bl	1cac8 <__assert_fail@plt+0xb7cc>
   135f0:	mov	r3, r0
   135f4:	str	r3, [fp, #-12]
   135f8:	ldr	r3, [fp, #-12]
   135fc:	cmp	r3, #0
   13600:	bne	1360c <__assert_fail@plt+0x2310>
   13604:	mov	r3, #0
   13608:	b	136e0 <__assert_fail@plt+0x23e4>
   1360c:	ldr	r3, [fp, #-8]
   13610:	ldrd	r2, [r3]
   13614:	ldr	r1, [fp, #-12]
   13618:	strd	r2, [r1]
   1361c:	ldr	r3, [fp, #-8]
   13620:	ldrd	r2, [r3, #96]	; 0x60
   13624:	ldr	r1, [fp, #-12]
   13628:	strd	r2, [r1, #8]
   1362c:	ldr	r3, [fp, #-12]
   13630:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13634:	str	r2, [r3, #16]
   13638:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1363c:	ldr	r3, [r3, #56]	; 0x38
   13640:	ldr	r1, [fp, #-12]
   13644:	mov	r0, r3
   13648:	bl	17f18 <__assert_fail@plt+0x6c1c>
   1364c:	str	r0, [fp, #-16]
   13650:	ldr	r2, [fp, #-16]
   13654:	ldr	r3, [fp, #-12]
   13658:	cmp	r2, r3
   1365c:	beq	136dc <__assert_fail@plt+0x23e0>
   13660:	ldr	r0, [fp, #-12]
   13664:	bl	13394 <__assert_fail@plt+0x2098>
   13668:	ldr	r3, [fp, #-16]
   1366c:	cmp	r3, #0
   13670:	bne	1367c <__assert_fail@plt+0x2380>
   13674:	mov	r3, #0
   13678:	b	136e0 <__assert_fail@plt+0x23e4>
   1367c:	ldr	r3, [fp, #-16]
   13680:	ldr	r2, [r3, #16]
   13684:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13688:	str	r2, [r3]
   1368c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13690:	mov	r2, #2
   13694:	strh	r2, [r3, #56]	; 0x38
   13698:	b	136dc <__assert_fail@plt+0x23e0>
   1369c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   136a0:	ldr	r2, [r3, #56]	; 0x38
   136a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   136a8:	add	r3, r3, #64	; 0x40
   136ac:	mov	r1, r3
   136b0:	mov	r0, r2
   136b4:	bl	1d14c <__assert_fail@plt+0xbe50>
   136b8:	mov	r3, r0
   136bc:	cmp	r3, #0
   136c0:	beq	136dc <__assert_fail@plt+0x23e0>
   136c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   136c8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   136cc:	str	r2, [r3]
   136d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   136d4:	mov	r2, #2
   136d8:	strh	r2, [r3, #56]	; 0x38
   136dc:	mov	r3, #1
   136e0:	mov	r0, r3
   136e4:	sub	sp, fp, #4
   136e8:	pop	{fp, pc}
   136ec:	andeq	r0, r0, r2, lsl #2
   136f0:	push	{fp, lr}
   136f4:	add	fp, sp, #4
   136f8:	sub	sp, sp, #48	; 0x30
   136fc:	str	r0, [fp, #-48]	; 0xffffffd0
   13700:	str	r1, [fp, #-52]	; 0xffffffcc
   13704:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13708:	add	r3, r3, #64	; 0x40
   1370c:	str	r3, [fp, #-8]
   13710:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13714:	ldr	r2, [r3, #48]	; 0x30
   13718:	ldr	r3, [pc, #268]	; 1382c <__assert_fail@plt+0x2530>
   1371c:	and	r3, r3, r2
   13720:	cmp	r3, #0
   13724:	beq	13778 <__assert_fail@plt+0x247c>
   13728:	ldr	r3, [fp, #-8]
   1372c:	ldrd	r2, [r3]
   13730:	strd	r2, [fp, #-44]	; 0xffffffd4
   13734:	ldr	r3, [fp, #-8]
   13738:	ldrd	r2, [r3, #96]	; 0x60
   1373c:	strd	r2, [fp, #-36]	; 0xffffffdc
   13740:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13744:	ldr	r3, [r3, #56]	; 0x38
   13748:	sub	r2, fp, #44	; 0x2c
   1374c:	mov	r1, r2
   13750:	mov	r0, r3
   13754:	bl	17f7c <__assert_fail@plt+0x6c80>
   13758:	str	r0, [fp, #-12]
   1375c:	ldr	r3, [fp, #-12]
   13760:	cmp	r3, #0
   13764:	bne	1376c <__assert_fail@plt+0x2470>
   13768:	bl	112b4 <abort@plt>
   1376c:	ldr	r0, [fp, #-12]
   13770:	bl	13394 <__assert_fail@plt+0x2098>
   13774:	b	13820 <__assert_fail@plt+0x2524>
   13778:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1377c:	ldr	r3, [r3, #4]
   13780:	str	r3, [fp, #-16]
   13784:	ldr	r3, [fp, #-16]
   13788:	cmp	r3, #0
   1378c:	beq	13820 <__assert_fail@plt+0x2524>
   13790:	ldr	r3, [fp, #-16]
   13794:	ldr	r3, [r3, #48]	; 0x30
   13798:	cmp	r3, #0
   1379c:	blt	13820 <__assert_fail@plt+0x2524>
   137a0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   137a4:	ldr	r3, [r3, #56]	; 0x38
   137a8:	ldrd	r2, [r3, #16]
   137ac:	orrs	r3, r2, r3
   137b0:	bne	137b8 <__assert_fail@plt+0x24bc>
   137b4:	bl	112b4 <abort@plt>
   137b8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   137bc:	ldr	r3, [r3, #56]	; 0x38
   137c0:	ldrd	r0, [r3]
   137c4:	ldr	r3, [fp, #-8]
   137c8:	ldrd	r2, [r3, #96]	; 0x60
   137cc:	cmp	r1, r3
   137d0:	cmpeq	r0, r2
   137d4:	bne	13820 <__assert_fail@plt+0x2524>
   137d8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   137dc:	ldr	r3, [r3, #56]	; 0x38
   137e0:	ldrd	r0, [r3, #8]
   137e4:	ldr	r3, [fp, #-8]
   137e8:	ldrd	r2, [r3]
   137ec:	cmp	r1, r3
   137f0:	cmpeq	r0, r2
   137f4:	bne	13820 <__assert_fail@plt+0x2524>
   137f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   137fc:	ldr	r1, [r3, #56]	; 0x38
   13800:	ldr	r3, [fp, #-16]
   13804:	ldrd	r2, [r3, #64]	; 0x40
   13808:	strd	r2, [r1, #8]
   1380c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13810:	ldr	r1, [r3, #56]	; 0x38
   13814:	ldr	r3, [fp, #-16]
   13818:	ldrd	r2, [r3, #160]	; 0xa0
   1381c:	strd	r2, [r1]
   13820:	nop			; (mov r0, r0)
   13824:	sub	sp, fp, #4
   13828:	pop	{fp, pc}
   1382c:	andeq	r0, r0, r2, lsl #2
   13830:	push	{fp, lr}
   13834:	add	fp, sp, #4
   13838:	sub	sp, sp, #8
   1383c:	str	r0, [fp, #-8]
   13840:	ldr	r3, [fp, #-8]
   13844:	ldr	r2, [r3, #48]	; 0x30
   13848:	ldr	r3, [pc, #72]	; 13898 <__assert_fail@plt+0x259c>
   1384c:	and	r3, r3, r2
   13850:	cmp	r3, #0
   13854:	beq	1387c <__assert_fail@plt+0x2580>
   13858:	ldr	r3, [fp, #-8]
   1385c:	ldr	r3, [r3, #56]	; 0x38
   13860:	cmp	r3, #0
   13864:	beq	1388c <__assert_fail@plt+0x2590>
   13868:	ldr	r3, [fp, #-8]
   1386c:	ldr	r3, [r3, #56]	; 0x38
   13870:	mov	r0, r3
   13874:	bl	174ac <__assert_fail@plt+0x61b0>
   13878:	b	1388c <__assert_fail@plt+0x2590>
   1387c:	ldr	r3, [fp, #-8]
   13880:	ldr	r3, [r3, #56]	; 0x38
   13884:	mov	r0, r3
   13888:	bl	13394 <__assert_fail@plt+0x2098>
   1388c:	nop			; (mov r0, r0)
   13890:	sub	sp, fp, #4
   13894:	pop	{fp, pc}
   13898:	andeq	r0, r0, r2, lsl #2
   1389c:	push	{fp, lr}
   138a0:	add	fp, sp, #4
   138a4:	sub	sp, sp, #16
   138a8:	str	r0, [fp, #-16]
   138ac:	b	138d0 <__assert_fail@plt+0x25d4>
   138b0:	ldr	r0, [fp, #-16]
   138b4:	bl	182f8 <__assert_fail@plt+0x6ffc>
   138b8:	str	r0, [fp, #-8]
   138bc:	ldr	r3, [fp, #-8]
   138c0:	cmp	r3, #0
   138c4:	blt	138d0 <__assert_fail@plt+0x25d4>
   138c8:	ldr	r0, [fp, #-8]
   138cc:	bl	112c0 <close@plt>
   138d0:	ldr	r0, [fp, #-16]
   138d4:	bl	18210 <__assert_fail@plt+0x6f14>
   138d8:	mov	r3, r0
   138dc:	eor	r3, r3, #1
   138e0:	uxtb	r3, r3
   138e4:	cmp	r3, #0
   138e8:	bne	138b0 <__assert_fail@plt+0x25b4>
   138ec:	nop			; (mov r0, r0)
   138f0:	sub	sp, fp, #4
   138f4:	pop	{fp, pc}
   138f8:	push	{fp, lr}
   138fc:	add	fp, sp, #4
   13900:	sub	sp, sp, #8
   13904:	str	r0, [fp, #-8]
   13908:	mov	r3, r1
   1390c:	strb	r3, [fp, #-9]
   13910:	ldr	r3, [fp, #-8]
   13914:	ldrh	r3, [r3, #56]	; 0x38
   13918:	cmp	r3, #11
   1391c:	beq	13924 <__assert_fail@plt+0x2628>
   13920:	bl	112b4 <abort@plt>
   13924:	ldrb	r3, [fp, #-9]
   13928:	cmp	r3, #0
   1392c:	beq	1393c <__assert_fail@plt+0x2640>
   13930:	mov	r2, #2
   13934:	mov	r3, #0
   13938:	b	13944 <__assert_fail@plt+0x2648>
   1393c:	mov	r2, #1
   13940:	mov	r3, #0
   13944:	ldr	r1, [fp, #-8]
   13948:	strd	r2, [r1, #112]	; 0x70
   1394c:	nop			; (mov r0, r0)
   13950:	sub	sp, fp, #4
   13954:	pop	{fp, pc}
   13958:	push	{fp, lr}
   1395c:	add	fp, sp, #4
   13960:	sub	sp, sp, #24
   13964:	str	r0, [fp, #-16]
   13968:	str	r1, [fp, #-20]	; 0xffffffec
   1396c:	mov	r3, r2
   13970:	strb	r3, [fp, #-21]	; 0xffffffeb
   13974:	ldr	r3, [fp, #-16]
   13978:	ldr	r3, [r3, #32]
   1397c:	str	r3, [fp, #-8]
   13980:	ldr	r2, [fp, #-8]
   13984:	ldr	r3, [fp, #-20]	; 0xffffffec
   13988:	cmp	r2, r3
   1398c:	bne	139a0 <__assert_fail@plt+0x26a4>
   13990:	ldr	r3, [fp, #-8]
   13994:	cmn	r3, #100	; 0x64
   13998:	beq	139a0 <__assert_fail@plt+0x26a4>
   1399c:	bl	112b4 <abort@plt>
   139a0:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   139a4:	cmp	r3, #0
   139a8:	beq	139dc <__assert_fail@plt+0x26e0>
   139ac:	ldr	r3, [fp, #-16]
   139b0:	add	r3, r3, #60	; 0x3c
   139b4:	ldr	r1, [fp, #-8]
   139b8:	mov	r0, r3
   139bc:	bl	18238 <__assert_fail@plt+0x6f3c>
   139c0:	str	r0, [fp, #-12]
   139c4:	ldr	r3, [fp, #-12]
   139c8:	cmp	r3, #0
   139cc:	blt	13a04 <__assert_fail@plt+0x2708>
   139d0:	ldr	r0, [fp, #-12]
   139d4:	bl	112c0 <close@plt>
   139d8:	b	13a04 <__assert_fail@plt+0x2708>
   139dc:	ldr	r3, [fp, #-16]
   139e0:	ldr	r3, [r3, #48]	; 0x30
   139e4:	and	r3, r3, #4
   139e8:	cmp	r3, #0
   139ec:	bne	13a04 <__assert_fail@plt+0x2708>
   139f0:	ldr	r3, [fp, #-8]
   139f4:	cmp	r3, #0
   139f8:	blt	13a04 <__assert_fail@plt+0x2708>
   139fc:	ldr	r0, [fp, #-8]
   13a00:	bl	112c0 <close@plt>
   13a04:	ldr	r3, [fp, #-16]
   13a08:	ldr	r2, [fp, #-20]	; 0xffffffec
   13a0c:	str	r2, [r3, #32]
   13a10:	nop			; (mov r0, r0)
   13a14:	sub	sp, fp, #4
   13a18:	pop	{fp, pc}
   13a1c:	push	{fp, lr}
   13a20:	add	fp, sp, #4
   13a24:	sub	sp, sp, #16
   13a28:	str	r0, [fp, #-16]
   13a2c:	ldr	r3, [fp, #-16]
   13a30:	ldr	r3, [r3, #48]	; 0x30
   13a34:	and	r3, r3, #4
   13a38:	cmp	r3, #0
   13a3c:	bne	13acc <__assert_fail@plt+0x27d0>
   13a40:	ldr	r3, [fp, #-16]
   13a44:	ldr	r3, [r3, #48]	; 0x30
   13a48:	and	r3, r3, #512	; 0x200
   13a4c:	cmp	r3, #0
   13a50:	beq	13a8c <__assert_fail@plt+0x2790>
   13a54:	ldr	r3, [fp, #-16]
   13a58:	ldr	r3, [r3, #48]	; 0x30
   13a5c:	and	r3, r3, #512	; 0x200
   13a60:	cmp	r3, #0
   13a64:	bne	13a74 <__assert_fail@plt+0x2778>
   13a68:	ldr	r3, [fp, #-16]
   13a6c:	ldr	r3, [r3, #28]
   13a70:	b	13a78 <__assert_fail@plt+0x277c>
   13a74:	mvn	r3, #99	; 0x63
   13a78:	mov	r2, #1
   13a7c:	mov	r1, r3
   13a80:	ldr	r0, [fp, #-16]
   13a84:	bl	13958 <__assert_fail@plt+0x265c>
   13a88:	b	13acc <__assert_fail@plt+0x27d0>
   13a8c:	ldr	r3, [fp, #-16]
   13a90:	ldr	r3, [r3, #48]	; 0x30
   13a94:	and	r3, r3, #512	; 0x200
   13a98:	cmp	r3, #0
   13a9c:	bne	13aac <__assert_fail@plt+0x27b0>
   13aa0:	ldr	r3, [fp, #-16]
   13aa4:	ldr	r3, [r3, #28]
   13aa8:	b	13ab0 <__assert_fail@plt+0x27b4>
   13aac:	mvn	r3, #99	; 0x63
   13ab0:	mov	r0, r3
   13ab4:	bl	1126c <fchdir@plt>
   13ab8:	mov	r3, r0
   13abc:	cmp	r3, #0
   13ac0:	beq	13acc <__assert_fail@plt+0x27d0>
   13ac4:	mov	r3, #1
   13ac8:	b	13ad0 <__assert_fail@plt+0x27d4>
   13acc:	mov	r3, #0
   13ad0:	str	r3, [fp, #-8]
   13ad4:	ldr	r3, [fp, #-16]
   13ad8:	add	r3, r3, #60	; 0x3c
   13adc:	mov	r0, r3
   13ae0:	bl	1389c <__assert_fail@plt+0x25a0>
   13ae4:	ldr	r3, [fp, #-8]
   13ae8:	mov	r0, r3
   13aec:	sub	sp, fp, #4
   13af0:	pop	{fp, pc}
   13af4:	push	{fp, lr}
   13af8:	add	fp, sp, #4
   13afc:	sub	sp, sp, #16
   13b00:	str	r0, [fp, #-16]
   13b04:	str	r1, [fp, #-20]	; 0xffffffec
   13b08:	ldr	r3, [fp, #-16]
   13b0c:	ldr	r3, [r3, #48]	; 0x30
   13b10:	and	r3, r3, #16
   13b14:	cmp	r3, #0
   13b18:	beq	13b24 <__assert_fail@plt+0x2828>
   13b1c:	ldr	r3, [pc, #96]	; 13b84 <__assert_fail@plt+0x2888>
   13b20:	b	13b28 <__assert_fail@plt+0x282c>
   13b24:	ldr	r3, [pc, #92]	; 13b88 <__assert_fail@plt+0x288c>
   13b28:	str	r3, [fp, #-8]
   13b2c:	ldr	r3, [fp, #-16]
   13b30:	ldr	r3, [r3, #48]	; 0x30
   13b34:	and	r3, r3, #512	; 0x200
   13b38:	cmp	r3, #0
   13b3c:	beq	13b60 <__assert_fail@plt+0x2864>
   13b40:	ldr	r3, [fp, #-16]
   13b44:	ldr	r3, [r3, #32]
   13b48:	ldr	r2, [fp, #-8]
   13b4c:	ldr	r1, [fp, #-20]	; 0xffffffec
   13b50:	mov	r0, r3
   13b54:	bl	18430 <__assert_fail@plt+0x7134>
   13b58:	mov	r3, r0
   13b5c:	b	13b70 <__assert_fail@plt+0x2874>
   13b60:	ldr	r1, [fp, #-8]
   13b64:	ldr	r0, [fp, #-20]	; 0xffffffec
   13b68:	bl	1d6e0 <__assert_fail@plt+0xc3e4>
   13b6c:	mov	r3, r0
   13b70:	str	r3, [fp, #-12]
   13b74:	ldr	r3, [fp, #-12]
   13b78:	mov	r0, r3
   13b7c:	sub	sp, fp, #4
   13b80:	pop	{fp, pc}
   13b84:	andeq	ip, r8, r0, lsl #18
   13b88:	andeq	r4, r8, r0, lsl #18
   13b8c:	push	{r4, r5, r6, r7, r8, fp, lr}
   13b90:	add	fp, sp, #24
   13b94:	sub	sp, sp, #36	; 0x24
   13b98:	str	r0, [fp, #-56]	; 0xffffffc8
   13b9c:	mov	r7, r1
   13ba0:	str	r2, [fp, #-60]	; 0xffffffc4
   13ba4:	mov	r3, #0
   13ba8:	str	r3, [fp, #-32]	; 0xffffffe0
   13bac:	mov	r3, #0
   13bb0:	str	r3, [fp, #-36]	; 0xffffffdc
   13bb4:	bic	r3, r7, #4080	; 0xff0
   13bb8:	bic	r3, r3, #15
   13bbc:	cmp	r3, #0
   13bc0:	beq	13bdc <__assert_fail@plt+0x28e0>
   13bc4:	bl	111c4 <__errno_location@plt>
   13bc8:	mov	r2, r0
   13bcc:	mov	r3, #22
   13bd0:	str	r3, [r2]
   13bd4:	mov	r3, #0
   13bd8:	b	13ff0 <__assert_fail@plt+0x2cf4>
   13bdc:	and	r3, r7, #4
   13be0:	cmp	r3, #0
   13be4:	beq	13c0c <__assert_fail@plt+0x2910>
   13be8:	and	r3, r7, #512	; 0x200
   13bec:	cmp	r3, #0
   13bf0:	beq	13c0c <__assert_fail@plt+0x2910>
   13bf4:	bl	111c4 <__errno_location@plt>
   13bf8:	mov	r2, r0
   13bfc:	mov	r3, #22
   13c00:	str	r3, [r2]
   13c04:	mov	r3, #0
   13c08:	b	13ff0 <__assert_fail@plt+0x2cf4>
   13c0c:	and	r3, r7, #18
   13c10:	cmp	r3, #0
   13c14:	bne	13c30 <__assert_fail@plt+0x2934>
   13c18:	bl	111c4 <__errno_location@plt>
   13c1c:	mov	r2, r0
   13c20:	mov	r3, #22
   13c24:	str	r3, [r2]
   13c28:	mov	r3, #0
   13c2c:	b	13ff0 <__assert_fail@plt+0x2cf4>
   13c30:	mov	r1, #96	; 0x60
   13c34:	mov	r0, #1
   13c38:	bl	1ca04 <__assert_fail@plt+0xb708>
   13c3c:	mov	r3, r0
   13c40:	mov	r4, r3
   13c44:	cmp	r4, #0
   13c48:	bne	13c54 <__assert_fail@plt+0x2958>
   13c4c:	mov	r3, #0
   13c50:	b	13ff0 <__assert_fail@plt+0x2cf4>
   13c54:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13c58:	str	r3, [r4, #44]	; 0x2c
   13c5c:	str	r7, [r4, #48]	; 0x30
   13c60:	ldr	r3, [r4, #48]	; 0x30
   13c64:	and	r3, r3, #2
   13c68:	cmp	r3, #0
   13c6c:	beq	13c88 <__assert_fail@plt+0x298c>
   13c70:	ldr	r3, [r4, #48]	; 0x30
   13c74:	orr	r3, r3, #4
   13c78:	str	r3, [r4, #48]	; 0x30
   13c7c:	ldr	r3, [r4, #48]	; 0x30
   13c80:	bic	r3, r3, #512	; 0x200
   13c84:	str	r3, [r4, #48]	; 0x30
   13c88:	mvn	r3, #99	; 0x63
   13c8c:	str	r3, [r4, #32]
   13c90:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13c94:	bl	16300 <__assert_fail@plt+0x5004>
   13c98:	str	r0, [fp, #-44]	; 0xffffffd4
   13c9c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13ca0:	cmp	r3, #4096	; 0x1000
   13ca4:	movcs	r3, r3
   13ca8:	movcc	r3, #4096	; 0x1000
   13cac:	mov	r1, r3
   13cb0:	mov	r0, r4
   13cb4:	bl	160d8 <__assert_fail@plt+0x4ddc>
   13cb8:	mov	r3, r0
   13cbc:	eor	r3, r3, #1
   13cc0:	uxtb	r3, r3
   13cc4:	cmp	r3, #0
   13cc8:	bne	13fe0 <__assert_fail@plt+0x2ce4>
   13ccc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13cd0:	ldr	r3, [r3]
   13cd4:	cmp	r3, #0
   13cd8:	beq	13d08 <__assert_fail@plt+0x2a0c>
   13cdc:	mov	r2, #0
   13ce0:	ldr	r1, [pc, #788]	; 13ffc <__assert_fail@plt+0x2d00>
   13ce4:	mov	r0, r4
   13ce8:	bl	15fd4 <__assert_fail@plt+0x4cd8>
   13cec:	str	r0, [fp, #-32]	; 0xffffffe0
   13cf0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13cf4:	cmp	r3, #0
   13cf8:	beq	13fcc <__assert_fail@plt+0x2cd0>
   13cfc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13d00:	mvn	r2, #0
   13d04:	str	r2, [r3, #48]	; 0x30
   13d08:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13d0c:	cmp	r3, #0
   13d10:	beq	13d24 <__assert_fail@plt+0x2a28>
   13d14:	ldr	r3, [r4, #48]	; 0x30
   13d18:	and	r3, r3, #1024	; 0x400
   13d1c:	cmp	r3, #0
   13d20:	beq	13d2c <__assert_fail@plt+0x2a30>
   13d24:	mov	r3, #1
   13d28:	b	13d30 <__assert_fail@plt+0x2a34>
   13d2c:	mov	r3, #0
   13d30:	strb	r3, [fp, #-45]	; 0xffffffd3
   13d34:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   13d38:	and	r3, r3, #1
   13d3c:	strb	r3, [fp, #-45]	; 0xffffffd3
   13d40:	mov	r6, #0
   13d44:	mov	r8, #0
   13d48:	b	13ea8 <__assert_fail@plt+0x2bac>
   13d4c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13d50:	ldr	r3, [r3]
   13d54:	mov	r0, r3
   13d58:	bl	11188 <strlen@plt>
   13d5c:	str	r0, [fp, #-40]	; 0xffffffd8
   13d60:	and	r3, r7, #2048	; 0x800
   13d64:	cmp	r3, #0
   13d68:	bne	13dd8 <__assert_fail@plt+0x2adc>
   13d6c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13d70:	ldr	r3, [r3]
   13d74:	str	r3, [fp, #-52]	; 0xffffffcc
   13d78:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13d7c:	cmp	r3, #2
   13d80:	bls	13dd8 <__assert_fail@plt+0x2adc>
   13d84:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13d88:	sub	r3, r3, #1
   13d8c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13d90:	add	r3, r2, r3
   13d94:	ldrb	r3, [r3]
   13d98:	cmp	r3, #47	; 0x2f
   13d9c:	bne	13dd8 <__assert_fail@plt+0x2adc>
   13da0:	b	13db0 <__assert_fail@plt+0x2ab4>
   13da4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13da8:	sub	r3, r3, #1
   13dac:	str	r3, [fp, #-40]	; 0xffffffd8
   13db0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13db4:	cmp	r3, #1
   13db8:	bls	13dd8 <__assert_fail@plt+0x2adc>
   13dbc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13dc0:	sub	r3, r3, #2
   13dc4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13dc8:	add	r3, r2, r3
   13dcc:	ldrb	r3, [r3]
   13dd0:	cmp	r3, #47	; 0x2f
   13dd4:	beq	13da4 <__assert_fail@plt+0x2aa8>
   13dd8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13ddc:	ldr	r3, [r3]
   13de0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13de4:	mov	r1, r3
   13de8:	mov	r0, r4
   13dec:	bl	15fd4 <__assert_fail@plt+0x4cd8>
   13df0:	mov	r5, r0
   13df4:	cmp	r5, #0
   13df8:	beq	13fa4 <__assert_fail@plt+0x2ca8>
   13dfc:	mov	r3, #0
   13e00:	str	r3, [r5, #48]	; 0x30
   13e04:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13e08:	str	r3, [r5, #4]
   13e0c:	add	r3, r5, #168	; 0xa8
   13e10:	str	r3, [r5, #24]
   13e14:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   13e18:	cmp	r3, #0
   13e1c:	beq	13e40 <__assert_fail@plt+0x2b44>
   13e20:	cmp	r6, #0
   13e24:	beq	13e40 <__assert_fail@plt+0x2b44>
   13e28:	mov	r3, #11
   13e2c:	strh	r3, [r5, #56]	; 0x38
   13e30:	mov	r1, #1
   13e34:	mov	r0, r5
   13e38:	bl	138f8 <__assert_fail@plt+0x25fc>
   13e3c:	b	13e58 <__assert_fail@plt+0x2b5c>
   13e40:	mov	r2, #0
   13e44:	mov	r1, r5
   13e48:	mov	r0, r4
   13e4c:	bl	15c5c <__assert_fail@plt+0x4960>
   13e50:	mov	r3, r0
   13e54:	strh	r3, [r5, #56]	; 0x38
   13e58:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13e5c:	cmp	r3, #0
   13e60:	beq	13e70 <__assert_fail@plt+0x2b74>
   13e64:	str	r6, [r5, #8]
   13e68:	mov	r6, r5
   13e6c:	b	13e98 <__assert_fail@plt+0x2b9c>
   13e70:	mov	r3, #0
   13e74:	str	r3, [r5, #8]
   13e78:	cmp	r6, #0
   13e7c:	bne	13e8c <__assert_fail@plt+0x2b90>
   13e80:	mov	r6, r5
   13e84:	str	r6, [fp, #-36]	; 0xffffffdc
   13e88:	b	13e98 <__assert_fail@plt+0x2b9c>
   13e8c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13e90:	str	r5, [r3, #8]
   13e94:	str	r5, [fp, #-36]	; 0xffffffdc
   13e98:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13e9c:	add	r3, r3, #4
   13ea0:	str	r3, [fp, #-56]	; 0xffffffc8
   13ea4:	add	r8, r8, #1
   13ea8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13eac:	ldr	r3, [r3]
   13eb0:	cmp	r3, #0
   13eb4:	bne	13d4c <__assert_fail@plt+0x2a50>
   13eb8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13ebc:	cmp	r3, #0
   13ec0:	beq	13ee0 <__assert_fail@plt+0x2be4>
   13ec4:	cmp	r8, #1
   13ec8:	bls	13ee0 <__assert_fail@plt+0x2be4>
   13ecc:	mov	r2, r8
   13ed0:	mov	r1, r6
   13ed4:	mov	r0, r4
   13ed8:	bl	15e8c <__assert_fail@plt+0x4b90>
   13edc:	mov	r6, r0
   13ee0:	mov	r2, #0
   13ee4:	ldr	r1, [pc, #272]	; 13ffc <__assert_fail@plt+0x2d00>
   13ee8:	mov	r0, r4
   13eec:	bl	15fd4 <__assert_fail@plt+0x4cd8>
   13ef0:	mov	r3, r0
   13ef4:	str	r3, [r4]
   13ef8:	ldr	r3, [r4]
   13efc:	cmp	r3, #0
   13f00:	beq	13fac <__assert_fail@plt+0x2cb0>
   13f04:	ldr	r3, [r4]
   13f08:	str	r6, [r3, #8]
   13f0c:	ldr	r3, [r4]
   13f10:	mov	r2, #9
   13f14:	strh	r2, [r3, #56]	; 0x38
   13f18:	ldr	r3, [r4]
   13f1c:	mov	r2, #1
   13f20:	str	r2, [r3, #48]	; 0x30
   13f24:	mov	r0, r4
   13f28:	bl	134e4 <__assert_fail@plt+0x21e8>
   13f2c:	mov	r3, r0
   13f30:	eor	r3, r3, #1
   13f34:	uxtb	r3, r3
   13f38:	cmp	r3, #0
   13f3c:	bne	13fb4 <__assert_fail@plt+0x2cb8>
   13f40:	ldr	r3, [r4, #48]	; 0x30
   13f44:	and	r3, r3, #4
   13f48:	cmp	r3, #0
   13f4c:	bne	13f8c <__assert_fail@plt+0x2c90>
   13f50:	ldr	r3, [r4, #48]	; 0x30
   13f54:	and	r3, r3, #512	; 0x200
   13f58:	cmp	r3, #0
   13f5c:	bne	13f8c <__assert_fail@plt+0x2c90>
   13f60:	ldr	r1, [pc, #152]	; 14000 <__assert_fail@plt+0x2d04>
   13f64:	mov	r0, r4
   13f68:	bl	13af4 <__assert_fail@plt+0x27f8>
   13f6c:	mov	r3, r0
   13f70:	str	r3, [r4, #28]
   13f74:	ldr	r3, [r4, #28]
   13f78:	cmp	r3, #0
   13f7c:	bge	13f8c <__assert_fail@plt+0x2c90>
   13f80:	ldr	r3, [r4, #48]	; 0x30
   13f84:	orr	r3, r3, #4
   13f88:	str	r3, [r4, #48]	; 0x30
   13f8c:	add	r3, r4, #60	; 0x3c
   13f90:	mvn	r1, #0
   13f94:	mov	r0, r3
   13f98:	bl	18188 <__assert_fail@plt+0x6e8c>
   13f9c:	mov	r3, r4
   13fa0:	b	13ff0 <__assert_fail@plt+0x2cf4>
   13fa4:	nop			; (mov r0, r0)
   13fa8:	b	13fb8 <__assert_fail@plt+0x2cbc>
   13fac:	nop			; (mov r0, r0)
   13fb0:	b	13fb8 <__assert_fail@plt+0x2cbc>
   13fb4:	nop			; (mov r0, r0)
   13fb8:	mov	r0, r6
   13fbc:	bl	16090 <__assert_fail@plt+0x4d94>
   13fc0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13fc4:	bl	13394 <__assert_fail@plt+0x2098>
   13fc8:	b	13fd0 <__assert_fail@plt+0x2cd4>
   13fcc:	nop			; (mov r0, r0)
   13fd0:	ldr	r3, [r4, #24]
   13fd4:	mov	r0, r3
   13fd8:	bl	13394 <__assert_fail@plt+0x2098>
   13fdc:	b	13fe4 <__assert_fail@plt+0x2ce8>
   13fe0:	nop			; (mov r0, r0)
   13fe4:	mov	r0, r4
   13fe8:	bl	13394 <__assert_fail@plt+0x2098>
   13fec:	mov	r3, #0
   13ff0:	mov	r0, r3
   13ff4:	sub	sp, fp, #24
   13ff8:	pop	{r4, r5, r6, r7, r8, fp, pc}
   13ffc:	andeq	pc, r1, ip, lsl #17
   14000:	muleq	r1, r0, r8
   14004:	push	{r4, r5, r6, fp, lr}
   14008:	add	fp, sp, #16
   1400c:	sub	sp, sp, #12
   14010:	str	r0, [fp, #-24]	; 0xffffffe8
   14014:	mov	r4, r1
   14018:	ldr	r3, [r4, #52]	; 0x34
   1401c:	str	r3, [r4, #40]	; 0x28
   14020:	ldr	r6, [r4, #40]	; 0x28
   14024:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14028:	ldr	r3, [r3, #24]
   1402c:	add	r1, r4, #168	; 0xa8
   14030:	add	r2, r6, #1
   14034:	mov	r0, r3
   14038:	bl	11020 <memmove@plt>
   1403c:	add	r3, r4, #168	; 0xa8
   14040:	mov	r1, #47	; 0x2f
   14044:	mov	r0, r3
   14048:	bl	11230 <strrchr@plt>
   1404c:	mov	r5, r0
   14050:	cmp	r5, #0
   14054:	beq	1409c <__assert_fail@plt+0x2da0>
   14058:	add	r3, r4, #168	; 0xa8
   1405c:	cmp	r3, r5
   14060:	bne	14074 <__assert_fail@plt+0x2d78>
   14064:	add	r3, r5, #1
   14068:	ldrb	r3, [r3]
   1406c:	cmp	r3, #0
   14070:	beq	1409c <__assert_fail@plt+0x2da0>
   14074:	add	r5, r5, #1
   14078:	mov	r0, r5
   1407c:	bl	11188 <strlen@plt>
   14080:	mov	r6, r0
   14084:	add	r3, r4, #168	; 0xa8
   14088:	add	r2, r6, #1
   1408c:	mov	r1, r5
   14090:	mov	r0, r3
   14094:	bl	11020 <memmove@plt>
   14098:	str	r6, [r4, #52]	; 0x34
   1409c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   140a0:	ldr	r3, [r3, #24]
   140a4:	str	r3, [r4, #28]
   140a8:	ldr	r3, [r4, #28]
   140ac:	str	r3, [r4, #24]
   140b0:	nop			; (mov r0, r0)
   140b4:	sub	sp, fp, #16
   140b8:	pop	{r4, r5, r6, fp, pc}
   140bc:	push	{r4, r5, fp, lr}
   140c0:	add	fp, sp, #12
   140c4:	sub	sp, sp, #16
   140c8:	str	r0, [fp, #-24]	; 0xffffffe8
   140cc:	mov	r3, #0
   140d0:	str	r3, [fp, #-16]
   140d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   140d8:	ldr	r3, [r3]
   140dc:	cmp	r3, #0
   140e0:	beq	1412c <__assert_fail@plt+0x2e30>
   140e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   140e8:	ldr	r4, [r3]
   140ec:	b	14118 <__assert_fail@plt+0x2e1c>
   140f0:	mov	r5, r4
   140f4:	ldr	r3, [r4, #8]
   140f8:	cmp	r3, #0
   140fc:	beq	14108 <__assert_fail@plt+0x2e0c>
   14100:	ldr	r3, [r4, #8]
   14104:	b	1410c <__assert_fail@plt+0x2e10>
   14108:	ldr	r3, [r4, #4]
   1410c:	mov	r4, r3
   14110:	mov	r0, r5
   14114:	bl	13394 <__assert_fail@plt+0x2098>
   14118:	ldr	r3, [r4, #48]	; 0x30
   1411c:	cmp	r3, #0
   14120:	bge	140f0 <__assert_fail@plt+0x2df4>
   14124:	mov	r0, r4
   14128:	bl	13394 <__assert_fail@plt+0x2098>
   1412c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14130:	ldr	r3, [r3, #4]
   14134:	cmp	r3, #0
   14138:	beq	1414c <__assert_fail@plt+0x2e50>
   1413c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14140:	ldr	r3, [r3, #4]
   14144:	mov	r0, r3
   14148:	bl	16090 <__assert_fail@plt+0x4d94>
   1414c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14150:	ldr	r3, [r3, #8]
   14154:	mov	r0, r3
   14158:	bl	13394 <__assert_fail@plt+0x2098>
   1415c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14160:	ldr	r3, [r3, #24]
   14164:	mov	r0, r3
   14168:	bl	13394 <__assert_fail@plt+0x2098>
   1416c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14170:	ldr	r3, [r3, #48]	; 0x30
   14174:	and	r3, r3, #512	; 0x200
   14178:	cmp	r3, #0
   1417c:	beq	141c0 <__assert_fail@plt+0x2ec4>
   14180:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14184:	ldr	r3, [r3, #32]
   14188:	cmp	r3, #0
   1418c:	blt	14238 <__assert_fail@plt+0x2f3c>
   14190:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14194:	ldr	r3, [r3, #32]
   14198:	mov	r0, r3
   1419c:	bl	112c0 <close@plt>
   141a0:	mov	r3, r0
   141a4:	cmp	r3, #0
   141a8:	beq	14238 <__assert_fail@plt+0x2f3c>
   141ac:	bl	111c4 <__errno_location@plt>
   141b0:	mov	r3, r0
   141b4:	ldr	r3, [r3]
   141b8:	str	r3, [fp, #-16]
   141bc:	b	14238 <__assert_fail@plt+0x2f3c>
   141c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   141c4:	ldr	r3, [r3, #48]	; 0x30
   141c8:	and	r3, r3, #4
   141cc:	cmp	r3, #0
   141d0:	bne	14238 <__assert_fail@plt+0x2f3c>
   141d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   141d8:	ldr	r3, [r3, #28]
   141dc:	mov	r0, r3
   141e0:	bl	1126c <fchdir@plt>
   141e4:	mov	r3, r0
   141e8:	cmp	r3, #0
   141ec:	beq	14200 <__assert_fail@plt+0x2f04>
   141f0:	bl	111c4 <__errno_location@plt>
   141f4:	mov	r3, r0
   141f8:	ldr	r3, [r3]
   141fc:	str	r3, [fp, #-16]
   14200:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14204:	ldr	r3, [r3, #28]
   14208:	mov	r0, r3
   1420c:	bl	112c0 <close@plt>
   14210:	mov	r3, r0
   14214:	cmp	r3, #0
   14218:	beq	14238 <__assert_fail@plt+0x2f3c>
   1421c:	ldr	r3, [fp, #-16]
   14220:	cmp	r3, #0
   14224:	bne	14238 <__assert_fail@plt+0x2f3c>
   14228:	bl	111c4 <__errno_location@plt>
   1422c:	mov	r3, r0
   14230:	ldr	r3, [r3]
   14234:	str	r3, [fp, #-16]
   14238:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1423c:	add	r3, r3, #60	; 0x3c
   14240:	mov	r0, r3
   14244:	bl	1389c <__assert_fail@plt+0x25a0>
   14248:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1424c:	ldr	r3, [r3, #52]	; 0x34
   14250:	cmp	r3, #0
   14254:	beq	14268 <__assert_fail@plt+0x2f6c>
   14258:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1425c:	ldr	r3, [r3, #52]	; 0x34
   14260:	mov	r0, r3
   14264:	bl	174ac <__assert_fail@plt+0x61b0>
   14268:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1426c:	bl	13830 <__assert_fail@plt+0x2534>
   14270:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14274:	bl	13394 <__assert_fail@plt+0x2098>
   14278:	ldr	r3, [fp, #-16]
   1427c:	cmp	r3, #0
   14280:	beq	1429c <__assert_fail@plt+0x2fa0>
   14284:	bl	111c4 <__errno_location@plt>
   14288:	mov	r2, r0
   1428c:	ldr	r3, [fp, #-16]
   14290:	str	r3, [r2]
   14294:	mvn	r3, #0
   14298:	b	142a0 <__assert_fail@plt+0x2fa4>
   1429c:	mov	r3, #0
   142a0:	mov	r0, r3
   142a4:	sub	sp, fp, #12
   142a8:	pop	{r4, r5, fp, pc}
   142ac:	push	{fp, lr}
   142b0:	add	fp, sp, #4
   142b4:	sub	sp, sp, #24
   142b8:	str	r0, [fp, #-24]	; 0xffffffe8
   142bc:	str	r1, [fp, #-28]	; 0xffffffe4
   142c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   142c4:	str	r3, [fp, #-8]
   142c8:	ldr	r3, [fp, #-8]
   142cc:	ldrd	r2, [r3]
   142d0:	strd	r2, [fp, #-20]	; 0xffffffec
   142d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   142d8:	mov	r2, r3
   142dc:	mov	r3, #0
   142e0:	ldrd	r0, [fp, #-20]	; 0xffffffec
   142e4:	bl	1e750 <__assert_fail@plt+0xd454>
   142e8:	mov	r3, r2
   142ec:	mov	r0, r3
   142f0:	sub	sp, fp, #4
   142f4:	pop	{fp, pc}
   142f8:	push	{fp}		; (str fp, [sp, #-4]!)
   142fc:	add	fp, sp, #0
   14300:	sub	sp, sp, #20
   14304:	str	r0, [fp, #-16]
   14308:	str	r1, [fp, #-20]	; 0xffffffec
   1430c:	ldr	r3, [fp, #-16]
   14310:	str	r3, [fp, #-8]
   14314:	ldr	r3, [fp, #-20]	; 0xffffffec
   14318:	str	r3, [fp, #-12]
   1431c:	ldr	r3, [fp, #-8]
   14320:	ldrd	r0, [r3]
   14324:	ldr	r3, [fp, #-12]
   14328:	ldrd	r2, [r3]
   1432c:	cmp	r1, r3
   14330:	cmpeq	r0, r2
   14334:	moveq	r3, #1
   14338:	movne	r3, #0
   1433c:	uxtb	r3, r3
   14340:	mov	r0, r3
   14344:	add	sp, fp, #0
   14348:	pop	{fp}		; (ldr fp, [sp], #4)
   1434c:	bx	lr
   14350:	push	{fp, lr}
   14354:	add	fp, sp, #4
   14358:	sub	sp, sp, #136	; 0x88
   1435c:	str	r0, [fp, #-128]	; 0xffffff80
   14360:	str	r1, [fp, #-132]	; 0xffffff7c
   14364:	ldr	r3, [fp, #-128]	; 0xffffff80
   14368:	ldr	r3, [r3, #44]	; 0x2c
   1436c:	str	r3, [fp, #-12]
   14370:	ldr	r3, [fp, #-12]
   14374:	ldr	r3, [r3, #52]	; 0x34
   14378:	str	r3, [fp, #-8]
   1437c:	ldr	r3, [fp, #-12]
   14380:	ldr	r3, [r3, #48]	; 0x30
   14384:	and	r3, r3, #512	; 0x200
   14388:	cmp	r3, #0
   1438c:	bne	14398 <__assert_fail@plt+0x309c>
   14390:	mov	r3, #0
   14394:	b	144d0 <__assert_fail@plt+0x31d4>
   14398:	ldr	r3, [fp, #-8]
   1439c:	cmp	r3, #0
   143a0:	bne	143dc <__assert_fail@plt+0x30e0>
   143a4:	ldr	r3, [pc, #304]	; 144dc <__assert_fail@plt+0x31e0>
   143a8:	str	r3, [sp]
   143ac:	ldr	r3, [pc, #300]	; 144e0 <__assert_fail@plt+0x31e4>
   143b0:	ldr	r2, [pc, #300]	; 144e4 <__assert_fail@plt+0x31e8>
   143b4:	mov	r1, #0
   143b8:	mov	r0, #13
   143bc:	bl	171d0 <__assert_fail@plt+0x5ed4>
   143c0:	mov	r3, r0
   143c4:	mov	r2, r3
   143c8:	ldr	r3, [fp, #-12]
   143cc:	str	r2, [r3, #52]	; 0x34
   143d0:	ldr	r3, [fp, #-12]
   143d4:	ldr	r3, [r3, #52]	; 0x34
   143d8:	str	r3, [fp, #-8]
   143dc:	ldr	r3, [fp, #-8]
   143e0:	cmp	r3, #0
   143e4:	beq	14420 <__assert_fail@plt+0x3124>
   143e8:	ldr	r3, [fp, #-128]	; 0xffffff80
   143ec:	ldrd	r2, [r3, #64]	; 0x40
   143f0:	strd	r2, [fp, #-124]	; 0xffffff84
   143f4:	sub	r3, fp, #124	; 0x7c
   143f8:	mov	r1, r3
   143fc:	ldr	r0, [fp, #-8]
   14400:	bl	16984 <__assert_fail@plt+0x5688>
   14404:	str	r0, [fp, #-16]
   14408:	ldr	r3, [fp, #-16]
   1440c:	cmp	r3, #0
   14410:	beq	14420 <__assert_fail@plt+0x3124>
   14414:	ldr	r3, [fp, #-16]
   14418:	ldr	r3, [r3, #8]
   1441c:	b	144d0 <__assert_fail@plt+0x31d4>
   14420:	ldr	r3, [fp, #-132]	; 0xffffff7c
   14424:	cmp	r3, #0
   14428:	blt	14448 <__assert_fail@plt+0x314c>
   1442c:	sub	r3, fp, #108	; 0x6c
   14430:	mov	r1, r3
   14434:	ldr	r0, [fp, #-132]	; 0xffffff7c
   14438:	bl	10fb4 <fstatfs64@plt>
   1443c:	mov	r3, r0
   14440:	cmp	r3, #0
   14444:	beq	14450 <__assert_fail@plt+0x3154>
   14448:	mov	r3, #0
   1444c:	b	144d0 <__assert_fail@plt+0x31d4>
   14450:	ldr	r3, [fp, #-8]
   14454:	cmp	r3, #0
   14458:	beq	144cc <__assert_fail@plt+0x31d0>
   1445c:	mov	r0, #16
   14460:	bl	1cac8 <__assert_fail@plt+0xb7cc>
   14464:	mov	r3, r0
   14468:	str	r3, [fp, #-20]	; 0xffffffec
   1446c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14470:	cmp	r3, #0
   14474:	beq	144cc <__assert_fail@plt+0x31d0>
   14478:	ldr	r3, [fp, #-128]	; 0xffffff80
   1447c:	ldrd	r2, [r3, #64]	; 0x40
   14480:	ldr	r1, [fp, #-20]	; 0xffffffec
   14484:	strd	r2, [r1]
   14488:	ldr	r2, [fp, #-108]	; 0xffffff94
   1448c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14490:	str	r2, [r3, #8]
   14494:	ldr	r1, [fp, #-20]	; 0xffffffec
   14498:	ldr	r0, [fp, #-8]
   1449c:	bl	17f18 <__assert_fail@plt+0x6c1c>
   144a0:	str	r0, [fp, #-16]
   144a4:	ldr	r3, [fp, #-16]
   144a8:	cmp	r3, #0
   144ac:	beq	144c4 <__assert_fail@plt+0x31c8>
   144b0:	ldr	r2, [fp, #-16]
   144b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   144b8:	cmp	r2, r3
   144bc:	beq	144cc <__assert_fail@plt+0x31d0>
   144c0:	bl	112b4 <abort@plt>
   144c4:	ldr	r0, [fp, #-20]	; 0xffffffec
   144c8:	bl	13394 <__assert_fail@plt+0x2098>
   144cc:	ldr	r3, [fp, #-108]	; 0xffffff94
   144d0:	mov	r0, r3
   144d4:	sub	sp, fp, #4
   144d8:	pop	{fp, pc}
   144dc:	muleq	r1, r4, r3
   144e0:	strdeq	r4, [r1], -r8
   144e4:	andeq	r4, r1, ip, lsr #5
   144e8:	push	{fp, lr}
   144ec:	add	fp, sp, #4
   144f0:	sub	sp, sp, #8
   144f4:	str	r0, [fp, #-8]
   144f8:	str	r1, [fp, #-12]
   144fc:	ldr	r1, [fp, #-12]
   14500:	ldr	r0, [fp, #-8]
   14504:	bl	14350 <__assert_fail@plt+0x3054>
   14508:	mov	r3, r0
   1450c:	ldr	r2, [pc, #52]	; 14548 <__assert_fail@plt+0x324c>
   14510:	cmp	r3, r2
   14514:	beq	14530 <__assert_fail@plt+0x3234>
   14518:	ldr	r2, [pc, #44]	; 1454c <__assert_fail@plt+0x3250>
   1451c:	cmp	r3, r2
   14520:	beq	14530 <__assert_fail@plt+0x3234>
   14524:	ldr	r2, [pc, #36]	; 14550 <__assert_fail@plt+0x3254>
   14528:	cmp	r3, r2
   1452c:	bne	14538 <__assert_fail@plt+0x323c>
   14530:	mov	r3, #0
   14534:	b	1453c <__assert_fail@plt+0x3240>
   14538:	mov	r3, #1
   1453c:	mov	r0, r3
   14540:	sub	sp, fp, #4
   14544:	pop	{fp, pc}
   14548:	andeq	r6, r0, r9, ror #18
   1454c:			; <UNDEFINED> instruction: 0x01021994
   14550:			; <UNDEFINED> instruction: 0xff534d42
   14554:	push	{fp, lr}
   14558:	add	fp, sp, #4
   1455c:	sub	sp, sp, #8
   14560:	str	r0, [fp, #-8]
   14564:	str	r1, [fp, #-12]
   14568:	ldr	r1, [fp, #-12]
   1456c:	ldr	r0, [fp, #-8]
   14570:	bl	14350 <__assert_fail@plt+0x3054>
   14574:	mov	r3, r0
   14578:	ldr	r2, [pc, #88]	; 145d8 <__assert_fail@plt+0x32dc>
   1457c:	cmp	r3, r2
   14580:	beq	145c0 <__assert_fail@plt+0x32c4>
   14584:	ldr	r2, [pc, #76]	; 145d8 <__assert_fail@plt+0x32dc>
   14588:	cmp	r3, r2
   1458c:	bgt	145a8 <__assert_fail@plt+0x32ac>
   14590:	ldr	r2, [pc, #68]	; 145dc <__assert_fail@plt+0x32e0>
   14594:	cmp	r3, r2
   14598:	beq	145c0 <__assert_fail@plt+0x32c4>
   1459c:	cmp	r3, #0
   145a0:	beq	145c0 <__assert_fail@plt+0x32c4>
   145a4:	b	145c8 <__assert_fail@plt+0x32cc>
   145a8:	ldr	r2, [pc, #48]	; 145e0 <__assert_fail@plt+0x32e4>
   145ac:	cmp	r3, r2
   145b0:	beq	145c0 <__assert_fail@plt+0x32c4>
   145b4:	ldr	r2, [pc, #40]	; 145e4 <__assert_fail@plt+0x32e8>
   145b8:	cmp	r3, r2
   145bc:	bne	145c8 <__assert_fail@plt+0x32cc>
   145c0:	mov	r3, #0
   145c4:	b	145cc <__assert_fail@plt+0x32d0>
   145c8:	mov	r3, #1
   145cc:	mov	r0, r3
   145d0:	sub	sp, fp, #4
   145d4:	pop	{fp, pc}
   145d8:	andeq	r6, r0, r9, ror #18
   145dc:			; <UNDEFINED> instruction: 0xff534d42
   145e0:	andeq	r9, r0, r0, lsr #31
   145e4:	movtpl	r4, #24911	; 0x614f
   145e8:	push	{r4, r5, r6, r7, fp, lr}
   145ec:	add	fp, sp, #20
   145f0:	mov	r5, r0
   145f4:	ldr	r3, [r5]
   145f8:	cmp	r3, #0
   145fc:	beq	14610 <__assert_fail@plt+0x3314>
   14600:	ldr	r3, [r5, #48]	; 0x30
   14604:	and	r3, r3, #8192	; 0x2000
   14608:	cmp	r3, #0
   1460c:	beq	14618 <__assert_fail@plt+0x331c>
   14610:	mov	r3, #0
   14614:	b	14d4c <__assert_fail@plt+0x3a50>
   14618:	ldr	r4, [r5]
   1461c:	ldrh	r6, [r4, #60]	; 0x3c
   14620:	mov	r3, #3
   14624:	strh	r3, [r4, #60]	; 0x3c
   14628:	cmp	r6, #1
   1462c:	bne	14650 <__assert_fail@plt+0x3354>
   14630:	mov	r2, #0
   14634:	mov	r1, r4
   14638:	mov	r0, r5
   1463c:	bl	15c5c <__assert_fail@plt+0x4960>
   14640:	mov	r3, r0
   14644:	strh	r3, [r4, #56]	; 0x38
   14648:	mov	r3, r4
   1464c:	b	14d4c <__assert_fail@plt+0x3a50>
   14650:	cmp	r6, #2
   14654:	bne	146f4 <__assert_fail@plt+0x33f8>
   14658:	ldrh	r3, [r4, #56]	; 0x38
   1465c:	cmp	r3, #12
   14660:	beq	14670 <__assert_fail@plt+0x3374>
   14664:	ldrh	r3, [r4, #56]	; 0x38
   14668:	cmp	r3, #13
   1466c:	bne	146f4 <__assert_fail@plt+0x33f8>
   14670:	mov	r2, #1
   14674:	mov	r1, r4
   14678:	mov	r0, r5
   1467c:	bl	15c5c <__assert_fail@plt+0x4960>
   14680:	mov	r3, r0
   14684:	strh	r3, [r4, #56]	; 0x38
   14688:	ldrh	r3, [r4, #56]	; 0x38
   1468c:	cmp	r3, #1
   14690:	bne	14aa4 <__assert_fail@plt+0x37a8>
   14694:	ldr	r3, [r5, #48]	; 0x30
   14698:	and	r3, r3, #4
   1469c:	cmp	r3, #0
   146a0:	bne	14aa4 <__assert_fail@plt+0x37a8>
   146a4:	ldr	r1, [pc, #1704]	; 14d54 <__assert_fail@plt+0x3a58>
   146a8:	mov	r0, r5
   146ac:	bl	13af4 <__assert_fail@plt+0x27f8>
   146b0:	mov	r3, r0
   146b4:	str	r3, [r4, #36]	; 0x24
   146b8:	ldr	r3, [r4, #36]	; 0x24
   146bc:	cmp	r3, #0
   146c0:	bge	146e0 <__assert_fail@plt+0x33e4>
   146c4:	bl	111c4 <__errno_location@plt>
   146c8:	mov	r3, r0
   146cc:	ldr	r3, [r3]
   146d0:	str	r3, [r4, #32]
   146d4:	mov	r3, #7
   146d8:	strh	r3, [r4, #56]	; 0x38
   146dc:	b	14aa4 <__assert_fail@plt+0x37a8>
   146e0:	ldrh	r3, [r4, #58]	; 0x3a
   146e4:	orr	r3, r3, #2
   146e8:	uxth	r3, r3
   146ec:	strh	r3, [r4, #58]	; 0x3a
   146f0:	b	14aa4 <__assert_fail@plt+0x37a8>
   146f4:	ldrh	r3, [r4, #56]	; 0x38
   146f8:	cmp	r3, #1
   146fc:	bne	148ac <__assert_fail@plt+0x35b0>
   14700:	cmp	r6, #4
   14704:	beq	1472c <__assert_fail@plt+0x3430>
   14708:	ldr	r3, [r5, #48]	; 0x30
   1470c:	and	r3, r3, #64	; 0x40
   14710:	cmp	r3, #0
   14714:	beq	14784 <__assert_fail@plt+0x3488>
   14718:	ldrd	r0, [r4, #64]	; 0x40
   1471c:	ldrd	r2, [r5, #16]
   14720:	cmp	r1, r3
   14724:	cmpeq	r0, r2
   14728:	beq	14784 <__assert_fail@plt+0x3488>
   1472c:	ldrh	r3, [r4, #58]	; 0x3a
   14730:	and	r3, r3, #2
   14734:	cmp	r3, #0
   14738:	beq	14748 <__assert_fail@plt+0x344c>
   1473c:	ldr	r3, [r4, #36]	; 0x24
   14740:	mov	r0, r3
   14744:	bl	112c0 <close@plt>
   14748:	ldr	r3, [r5, #4]
   1474c:	cmp	r3, #0
   14750:	beq	14768 <__assert_fail@plt+0x346c>
   14754:	ldr	r3, [r5, #4]
   14758:	mov	r0, r3
   1475c:	bl	16090 <__assert_fail@plt+0x4d94>
   14760:	mov	r3, #0
   14764:	str	r3, [r5, #4]
   14768:	mov	r3, #6
   1476c:	strh	r3, [r4, #56]	; 0x38
   14770:	mov	r1, r4
   14774:	mov	r0, r5
   14778:	bl	136f0 <__assert_fail@plt+0x23f4>
   1477c:	mov	r3, r4
   14780:	b	14d4c <__assert_fail@plt+0x3a50>
   14784:	ldr	r3, [r5, #4]
   14788:	cmp	r3, #0
   1478c:	beq	147c0 <__assert_fail@plt+0x34c4>
   14790:	ldr	r3, [r5, #48]	; 0x30
   14794:	and	r3, r3, #4096	; 0x1000
   14798:	cmp	r3, #0
   1479c:	beq	147c0 <__assert_fail@plt+0x34c4>
   147a0:	ldr	r3, [r5, #48]	; 0x30
   147a4:	bic	r3, r3, #4096	; 0x1000
   147a8:	str	r3, [r5, #48]	; 0x30
   147ac:	ldr	r3, [r5, #4]
   147b0:	mov	r0, r3
   147b4:	bl	16090 <__assert_fail@plt+0x4d94>
   147b8:	mov	r3, #0
   147bc:	str	r3, [r5, #4]
   147c0:	ldr	r3, [r5, #4]
   147c4:	cmp	r3, #0
   147c8:	beq	14830 <__assert_fail@plt+0x3534>
   147cc:	ldr	r3, [r4, #24]
   147d0:	mvn	r2, #0
   147d4:	mov	r1, r4
   147d8:	mov	r0, r5
   147dc:	bl	16378 <__assert_fail@plt+0x507c>
   147e0:	mov	r3, r0
   147e4:	cmp	r3, #0
   147e8:	beq	1489c <__assert_fail@plt+0x35a0>
   147ec:	bl	111c4 <__errno_location@plt>
   147f0:	mov	r3, r0
   147f4:	ldr	r3, [r3]
   147f8:	str	r3, [r4, #32]
   147fc:	ldrh	r3, [r4, #58]	; 0x3a
   14800:	orr	r3, r3, #1
   14804:	uxth	r3, r3
   14808:	strh	r3, [r4, #58]	; 0x3a
   1480c:	ldr	r4, [r5, #4]
   14810:	b	14824 <__assert_fail@plt+0x3528>
   14814:	ldr	r3, [r4, #4]
   14818:	ldr	r3, [r3, #24]
   1481c:	str	r3, [r4, #24]
   14820:	ldr	r4, [r4, #8]
   14824:	cmp	r4, #0
   14828:	bne	14814 <__assert_fail@plt+0x3518>
   1482c:	b	1489c <__assert_fail@plt+0x35a0>
   14830:	mov	r1, #3
   14834:	mov	r0, r5
   14838:	bl	15124 <__assert_fail@plt+0x3e28>
   1483c:	mov	r3, r0
   14840:	str	r3, [r5, #4]
   14844:	ldr	r3, [r5, #4]
   14848:	cmp	r3, #0
   1484c:	bne	1489c <__assert_fail@plt+0x35a0>
   14850:	ldr	r3, [r5, #48]	; 0x30
   14854:	and	r3, r3, #8192	; 0x2000
   14858:	cmp	r3, #0
   1485c:	beq	14868 <__assert_fail@plt+0x356c>
   14860:	mov	r3, #0
   14864:	b	14d4c <__assert_fail@plt+0x3a50>
   14868:	ldr	r3, [r4, #32]
   1486c:	cmp	r3, #0
   14870:	beq	14888 <__assert_fail@plt+0x358c>
   14874:	ldrh	r3, [r4, #56]	; 0x38
   14878:	cmp	r3, #4
   1487c:	beq	14888 <__assert_fail@plt+0x358c>
   14880:	mov	r3, #7
   14884:	strh	r3, [r4, #56]	; 0x38
   14888:	mov	r1, r4
   1488c:	mov	r0, r5
   14890:	bl	136f0 <__assert_fail@plt+0x23f4>
   14894:	mov	r3, r4
   14898:	b	14d4c <__assert_fail@plt+0x3a50>
   1489c:	ldr	r4, [r5, #4]
   148a0:	mov	r3, #0
   148a4:	str	r3, [r5, #4]
   148a8:	b	14a34 <__assert_fail@plt+0x3738>
   148ac:	mov	r6, r4
   148b0:	ldr	r3, [r4, #8]
   148b4:	cmp	r3, #0
   148b8:	bne	14924 <__assert_fail@plt+0x3628>
   148bc:	ldr	r3, [r4, #4]
   148c0:	ldr	r3, [r3, #12]
   148c4:	cmp	r3, #0
   148c8:	beq	14924 <__assert_fail@plt+0x3628>
   148cc:	ldr	r4, [r6, #4]
   148d0:	str	r4, [r5]
   148d4:	ldr	r2, [r5, #24]
   148d8:	ldr	r3, [r4, #40]	; 0x28
   148dc:	add	r3, r2, r3
   148e0:	mov	r2, #0
   148e4:	strb	r2, [r3]
   148e8:	mov	r1, #3
   148ec:	mov	r0, r5
   148f0:	bl	15124 <__assert_fail@plt+0x3e28>
   148f4:	mov	r4, r0
   148f8:	cmp	r4, #0
   148fc:	bne	14918 <__assert_fail@plt+0x361c>
   14900:	ldr	r3, [r5, #48]	; 0x30
   14904:	and	r3, r3, #8192	; 0x2000
   14908:	cmp	r3, #0
   1490c:	beq	14b58 <__assert_fail@plt+0x385c>
   14910:	mov	r3, #0
   14914:	b	14d4c <__assert_fail@plt+0x3a50>
   14918:	mov	r0, r6
   1491c:	bl	13394 <__assert_fail@plt+0x2098>
   14920:	b	14a34 <__assert_fail@plt+0x3738>
   14924:	ldr	r4, [r4, #8]
   14928:	cmp	r4, #0
   1492c:	beq	14b5c <__assert_fail@plt+0x3860>
   14930:	str	r4, [r5]
   14934:	mov	r0, r6
   14938:	bl	13394 <__assert_fail@plt+0x2098>
   1493c:	ldr	r3, [r4, #48]	; 0x30
   14940:	cmp	r3, #0
   14944:	bne	14990 <__assert_fail@plt+0x3694>
   14948:	mov	r0, r5
   1494c:	bl	13a1c <__assert_fail@plt+0x2720>
   14950:	mov	r3, r0
   14954:	cmp	r3, #0
   14958:	beq	14970 <__assert_fail@plt+0x3674>
   1495c:	ldr	r3, [r5, #48]	; 0x30
   14960:	orr	r3, r3, #8192	; 0x2000
   14964:	str	r3, [r5, #48]	; 0x30
   14968:	mov	r3, #0
   1496c:	b	14d4c <__assert_fail@plt+0x3a50>
   14970:	mov	r0, r5
   14974:	bl	13830 <__assert_fail@plt+0x2534>
   14978:	mov	r1, r4
   1497c:	mov	r0, r5
   14980:	bl	14004 <__assert_fail@plt+0x2d08>
   14984:	mov	r0, r5
   14988:	bl	134e4 <__assert_fail@plt+0x21e8>
   1498c:	b	14aa8 <__assert_fail@plt+0x37ac>
   14990:	ldrh	r3, [r4, #60]	; 0x3c
   14994:	cmp	r3, #4
   14998:	bne	149a0 <__assert_fail@plt+0x36a4>
   1499c:	b	148ac <__assert_fail@plt+0x35b0>
   149a0:	ldrh	r3, [r4, #60]	; 0x3c
   149a4:	cmp	r3, #2
   149a8:	bne	14a34 <__assert_fail@plt+0x3738>
   149ac:	mov	r2, #1
   149b0:	mov	r1, r4
   149b4:	mov	r0, r5
   149b8:	bl	15c5c <__assert_fail@plt+0x4960>
   149bc:	mov	r3, r0
   149c0:	strh	r3, [r4, #56]	; 0x38
   149c4:	ldrh	r3, [r4, #56]	; 0x38
   149c8:	cmp	r3, #1
   149cc:	bne	14a2c <__assert_fail@plt+0x3730>
   149d0:	ldr	r3, [r5, #48]	; 0x30
   149d4:	and	r3, r3, #4
   149d8:	cmp	r3, #0
   149dc:	bne	14a2c <__assert_fail@plt+0x3730>
   149e0:	ldr	r1, [pc, #876]	; 14d54 <__assert_fail@plt+0x3a58>
   149e4:	mov	r0, r5
   149e8:	bl	13af4 <__assert_fail@plt+0x27f8>
   149ec:	mov	r3, r0
   149f0:	str	r3, [r4, #36]	; 0x24
   149f4:	ldr	r3, [r4, #36]	; 0x24
   149f8:	cmp	r3, #0
   149fc:	bge	14a1c <__assert_fail@plt+0x3720>
   14a00:	bl	111c4 <__errno_location@plt>
   14a04:	mov	r3, r0
   14a08:	ldr	r3, [r3]
   14a0c:	str	r3, [r4, #32]
   14a10:	mov	r3, #7
   14a14:	strh	r3, [r4, #56]	; 0x38
   14a18:	b	14a2c <__assert_fail@plt+0x3730>
   14a1c:	ldrh	r3, [r4, #58]	; 0x3a
   14a20:	orr	r3, r3, #2
   14a24:	uxth	r3, r3
   14a28:	strh	r3, [r4, #58]	; 0x3a
   14a2c:	mov	r3, #3
   14a30:	strh	r3, [r4, #60]	; 0x3c
   14a34:	ldr	r2, [r5, #24]
   14a38:	ldr	r3, [r4, #4]
   14a3c:	ldr	r1, [r3, #28]
   14a40:	ldr	r3, [r4, #4]
   14a44:	ldr	r3, [r3, #40]	; 0x28
   14a48:	sub	r3, r3, #1
   14a4c:	add	r3, r1, r3
   14a50:	ldrb	r3, [r3]
   14a54:	cmp	r3, #47	; 0x2f
   14a58:	bne	14a6c <__assert_fail@plt+0x3770>
   14a5c:	ldr	r3, [r4, #4]
   14a60:	ldr	r3, [r3, #40]	; 0x28
   14a64:	sub	r3, r3, #1
   14a68:	b	14a74 <__assert_fail@plt+0x3778>
   14a6c:	ldr	r3, [r4, #4]
   14a70:	ldr	r3, [r3, #40]	; 0x28
   14a74:	add	r6, r2, r3
   14a78:	mov	r3, r6
   14a7c:	add	r6, r3, #1
   14a80:	mov	r2, #47	; 0x2f
   14a84:	strb	r2, [r3]
   14a88:	add	r1, r4, #168	; 0xa8
   14a8c:	ldr	r3, [r4, #52]	; 0x34
   14a90:	add	r3, r3, #1
   14a94:	mov	r2, r3
   14a98:	mov	r0, r6
   14a9c:	bl	11020 <memmove@plt>
   14aa0:	b	14aa8 <__assert_fail@plt+0x37ac>
   14aa4:	nop			; (mov r0, r0)
   14aa8:	str	r4, [r5]
   14aac:	ldrh	r3, [r4, #56]	; 0x38
   14ab0:	cmp	r3, #11
   14ab4:	bne	14af8 <__assert_fail@plt+0x37fc>
   14ab8:	ldrd	r2, [r4, #112]	; 0x70
   14abc:	cmp	r3, #0
   14ac0:	cmpeq	r2, #2
   14ac4:	bne	14ae4 <__assert_fail@plt+0x37e8>
   14ac8:	mov	r2, #0
   14acc:	mov	r1, r4
   14ad0:	mov	r0, r5
   14ad4:	bl	15c5c <__assert_fail@plt+0x4960>
   14ad8:	mov	r3, r0
   14adc:	strh	r3, [r4, #56]	; 0x38
   14ae0:	b	14af8 <__assert_fail@plt+0x37fc>
   14ae4:	ldrd	r2, [r4, #112]	; 0x70
   14ae8:	cmp	r3, #0
   14aec:	cmpeq	r2, #1
   14af0:	beq	14af8 <__assert_fail@plt+0x37fc>
   14af4:	bl	112b4 <abort@plt>
   14af8:	ldrh	r3, [r4, #56]	; 0x38
   14afc:	cmp	r3, #1
   14b00:	bne	14b50 <__assert_fail@plt+0x3854>
   14b04:	ldr	r3, [r4, #48]	; 0x30
   14b08:	cmp	r3, #0
   14b0c:	bne	14b18 <__assert_fail@plt+0x381c>
   14b10:	ldrd	r2, [r4, #64]	; 0x40
   14b14:	strd	r2, [r5, #16]
   14b18:	mov	r1, r4
   14b1c:	mov	r0, r5
   14b20:	bl	135b0 <__assert_fail@plt+0x22b4>
   14b24:	mov	r3, r0
   14b28:	eor	r3, r3, #1
   14b2c:	uxtb	r3, r3
   14b30:	cmp	r3, #0
   14b34:	beq	14b50 <__assert_fail@plt+0x3854>
   14b38:	bl	111c4 <__errno_location@plt>
   14b3c:	mov	r2, r0
   14b40:	mov	r3, #12
   14b44:	str	r3, [r2]
   14b48:	mov	r3, #0
   14b4c:	b	14d4c <__assert_fail@plt+0x3a50>
   14b50:	mov	r3, r4
   14b54:	b	14d4c <__assert_fail@plt+0x3a50>
   14b58:	nop			; (mov r0, r0)
   14b5c:	ldr	r4, [r6, #4]
   14b60:	str	r4, [r5]
   14b64:	mov	r0, r6
   14b68:	bl	13394 <__assert_fail@plt+0x2098>
   14b6c:	ldr	r3, [r4, #48]	; 0x30
   14b70:	cmn	r3, #1
   14b74:	bne	14ba0 <__assert_fail@plt+0x38a4>
   14b78:	mov	r0, r4
   14b7c:	bl	13394 <__assert_fail@plt+0x2098>
   14b80:	bl	111c4 <__errno_location@plt>
   14b84:	mov	r2, r0
   14b88:	mov	r3, #0
   14b8c:	str	r3, [r2]
   14b90:	mov	r3, #0
   14b94:	str	r3, [r5]
   14b98:	mov	r3, #0
   14b9c:	b	14d4c <__assert_fail@plt+0x3a50>
   14ba0:	ldrh	r3, [r4, #56]	; 0x38
   14ba4:	cmp	r3, #11
   14ba8:	bne	14bb0 <__assert_fail@plt+0x38b4>
   14bac:	bl	112b4 <abort@plt>
   14bb0:	ldr	r2, [r5, #24]
   14bb4:	ldr	r3, [r4, #40]	; 0x28
   14bb8:	add	r3, r2, r3
   14bbc:	mov	r2, #0
   14bc0:	strb	r2, [r3]
   14bc4:	ldr	r3, [r4, #48]	; 0x30
   14bc8:	cmp	r3, #0
   14bcc:	bne	14c04 <__assert_fail@plt+0x3908>
   14bd0:	mov	r0, r5
   14bd4:	bl	13a1c <__assert_fail@plt+0x2720>
   14bd8:	mov	r3, r0
   14bdc:	cmp	r3, #0
   14be0:	beq	14cf0 <__assert_fail@plt+0x39f4>
   14be4:	bl	111c4 <__errno_location@plt>
   14be8:	mov	r3, r0
   14bec:	ldr	r3, [r3]
   14bf0:	str	r3, [r4, #32]
   14bf4:	ldr	r3, [r5, #48]	; 0x30
   14bf8:	orr	r3, r3, #8192	; 0x2000
   14bfc:	str	r3, [r5, #48]	; 0x30
   14c00:	b	14cf0 <__assert_fail@plt+0x39f4>
   14c04:	ldrh	r3, [r4, #58]	; 0x3a
   14c08:	and	r3, r3, #2
   14c0c:	cmp	r3, #0
   14c10:	beq	14ca4 <__assert_fail@plt+0x39a8>
   14c14:	ldr	r3, [r5, #48]	; 0x30
   14c18:	and	r3, r3, #4
   14c1c:	cmp	r3, #0
   14c20:	bne	14c94 <__assert_fail@plt+0x3998>
   14c24:	ldr	r3, [r5, #48]	; 0x30
   14c28:	and	r3, r3, #512	; 0x200
   14c2c:	cmp	r3, #0
   14c30:	beq	14c50 <__assert_fail@plt+0x3954>
   14c34:	ldr	r3, [r4, #36]	; 0x24
   14c38:	mov	r2, #1
   14c3c:	mov	r1, r3
   14c40:	mov	r0, r5
   14c44:	bl	13958 <__assert_fail@plt+0x265c>
   14c48:	mov	r3, #0
   14c4c:	b	14c70 <__assert_fail@plt+0x3974>
   14c50:	ldr	r3, [r4, #36]	; 0x24
   14c54:	mov	r0, r3
   14c58:	bl	1126c <fchdir@plt>
   14c5c:	mov	r3, r0
   14c60:	cmp	r3, #0
   14c64:	movne	r3, #1
   14c68:	moveq	r3, #0
   14c6c:	uxtb	r3, r3
   14c70:	cmp	r3, #0
   14c74:	beq	14c94 <__assert_fail@plt+0x3998>
   14c78:	bl	111c4 <__errno_location@plt>
   14c7c:	mov	r3, r0
   14c80:	ldr	r3, [r3]
   14c84:	str	r3, [r4, #32]
   14c88:	ldr	r3, [r5, #48]	; 0x30
   14c8c:	orr	r3, r3, #8192	; 0x2000
   14c90:	str	r3, [r5, #48]	; 0x30
   14c94:	ldr	r3, [r4, #36]	; 0x24
   14c98:	mov	r0, r3
   14c9c:	bl	112c0 <close@plt>
   14ca0:	b	14cf0 <__assert_fail@plt+0x39f4>
   14ca4:	ldrh	r3, [r4, #58]	; 0x3a
   14ca8:	and	r3, r3, #1
   14cac:	cmp	r3, #0
   14cb0:	bne	14cf0 <__assert_fail@plt+0x39f4>
   14cb4:	ldr	r1, [r4, #4]
   14cb8:	ldr	r3, [pc, #152]	; 14d58 <__assert_fail@plt+0x3a5c>
   14cbc:	mvn	r2, #0
   14cc0:	mov	r0, r5
   14cc4:	bl	16378 <__assert_fail@plt+0x507c>
   14cc8:	mov	r3, r0
   14ccc:	cmp	r3, #0
   14cd0:	beq	14cf0 <__assert_fail@plt+0x39f4>
   14cd4:	bl	111c4 <__errno_location@plt>
   14cd8:	mov	r3, r0
   14cdc:	ldr	r3, [r3]
   14ce0:	str	r3, [r4, #32]
   14ce4:	ldr	r3, [r5, #48]	; 0x30
   14ce8:	orr	r3, r3, #8192	; 0x2000
   14cec:	str	r3, [r5, #48]	; 0x30
   14cf0:	ldrh	r3, [r4, #56]	; 0x38
   14cf4:	cmp	r3, #2
   14cf8:	beq	14d30 <__assert_fail@plt+0x3a34>
   14cfc:	ldr	r3, [r4, #32]
   14d00:	cmp	r3, #0
   14d04:	beq	14d10 <__assert_fail@plt+0x3a14>
   14d08:	mov	r3, #7
   14d0c:	b	14d14 <__assert_fail@plt+0x3a18>
   14d10:	mov	r3, #6
   14d14:	strh	r3, [r4, #56]	; 0x38
   14d18:	ldr	r3, [r4, #32]
   14d1c:	cmp	r3, #0
   14d20:	bne	14d30 <__assert_fail@plt+0x3a34>
   14d24:	mov	r1, r4
   14d28:	mov	r0, r5
   14d2c:	bl	136f0 <__assert_fail@plt+0x23f4>
   14d30:	ldr	r3, [r5, #48]	; 0x30
   14d34:	and	r3, r3, #8192	; 0x2000
   14d38:	cmp	r3, #0
   14d3c:	bne	14d48 <__assert_fail@plt+0x3a4c>
   14d40:	mov	r3, r4
   14d44:	b	14d4c <__assert_fail@plt+0x3a50>
   14d48:	mov	r3, #0
   14d4c:	mov	r0, r3
   14d50:	pop	{r4, r5, r6, r7, fp, pc}
   14d54:	muleq	r1, r0, r8
   14d58:	muleq	r1, r4, r8
   14d5c:	push	{fp, lr}
   14d60:	add	fp, sp, #4
   14d64:	sub	sp, sp, #16
   14d68:	str	r0, [fp, #-8]
   14d6c:	str	r1, [fp, #-12]
   14d70:	str	r2, [fp, #-16]
   14d74:	ldr	r3, [fp, #-16]
   14d78:	cmp	r3, #0
   14d7c:	beq	14dc8 <__assert_fail@plt+0x3acc>
   14d80:	ldr	r3, [fp, #-16]
   14d84:	cmp	r3, #1
   14d88:	beq	14dc8 <__assert_fail@plt+0x3acc>
   14d8c:	ldr	r3, [fp, #-16]
   14d90:	cmp	r3, #2
   14d94:	beq	14dc8 <__assert_fail@plt+0x3acc>
   14d98:	ldr	r3, [fp, #-16]
   14d9c:	cmp	r3, #3
   14da0:	beq	14dc8 <__assert_fail@plt+0x3acc>
   14da4:	ldr	r3, [fp, #-16]
   14da8:	cmp	r3, #4
   14dac:	beq	14dc8 <__assert_fail@plt+0x3acc>
   14db0:	bl	111c4 <__errno_location@plt>
   14db4:	mov	r2, r0
   14db8:	mov	r3, #22
   14dbc:	str	r3, [r2]
   14dc0:	mov	r3, #1
   14dc4:	b	14ddc <__assert_fail@plt+0x3ae0>
   14dc8:	ldr	r3, [fp, #-16]
   14dcc:	uxth	r2, r3
   14dd0:	ldr	r3, [fp, #-12]
   14dd4:	strh	r2, [r3, #60]	; 0x3c
   14dd8:	mov	r3, #0
   14ddc:	mov	r0, r3
   14de0:	sub	sp, fp, #4
   14de4:	pop	{fp, pc}
   14de8:	push	{r4, r5, fp, lr}
   14dec:	add	fp, sp, #12
   14df0:	sub	sp, sp, #16
   14df4:	mov	r4, r0
   14df8:	str	r1, [fp, #-24]	; 0xffffffe8
   14dfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e00:	cmp	r3, #0
   14e04:	beq	14e2c <__assert_fail@plt+0x3b30>
   14e08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e0c:	cmp	r3, #4096	; 0x1000
   14e10:	beq	14e2c <__assert_fail@plt+0x3b30>
   14e14:	bl	111c4 <__errno_location@plt>
   14e18:	mov	r2, r0
   14e1c:	mov	r3, #22
   14e20:	str	r3, [r2]
   14e24:	mov	r3, #0
   14e28:	b	14fc0 <__assert_fail@plt+0x3cc4>
   14e2c:	ldr	r5, [r4]
   14e30:	bl	111c4 <__errno_location@plt>
   14e34:	mov	r2, r0
   14e38:	mov	r3, #0
   14e3c:	str	r3, [r2]
   14e40:	ldr	r3, [r4, #48]	; 0x30
   14e44:	and	r3, r3, #8192	; 0x2000
   14e48:	cmp	r3, #0
   14e4c:	beq	14e58 <__assert_fail@plt+0x3b5c>
   14e50:	mov	r3, #0
   14e54:	b	14fc0 <__assert_fail@plt+0x3cc4>
   14e58:	ldrh	r3, [r5, #56]	; 0x38
   14e5c:	cmp	r3, #9
   14e60:	bne	14e6c <__assert_fail@plt+0x3b70>
   14e64:	ldr	r3, [r5, #8]
   14e68:	b	14fc0 <__assert_fail@plt+0x3cc4>
   14e6c:	ldrh	r3, [r5, #56]	; 0x38
   14e70:	cmp	r3, #1
   14e74:	beq	14e80 <__assert_fail@plt+0x3b84>
   14e78:	mov	r3, #0
   14e7c:	b	14fc0 <__assert_fail@plt+0x3cc4>
   14e80:	ldr	r3, [r4, #4]
   14e84:	cmp	r3, #0
   14e88:	beq	14e98 <__assert_fail@plt+0x3b9c>
   14e8c:	ldr	r3, [r4, #4]
   14e90:	mov	r0, r3
   14e94:	bl	16090 <__assert_fail@plt+0x4d94>
   14e98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e9c:	cmp	r3, #4096	; 0x1000
   14ea0:	bne	14ebc <__assert_fail@plt+0x3bc0>
   14ea4:	ldr	r3, [r4, #48]	; 0x30
   14ea8:	orr	r3, r3, #4096	; 0x1000
   14eac:	str	r3, [r4, #48]	; 0x30
   14eb0:	mov	r3, #2
   14eb4:	str	r3, [fp, #-24]	; 0xffffffe8
   14eb8:	b	14ec4 <__assert_fail@plt+0x3bc8>
   14ebc:	mov	r3, #1
   14ec0:	str	r3, [fp, #-24]	; 0xffffffe8
   14ec4:	ldr	r3, [r5, #48]	; 0x30
   14ec8:	cmp	r3, #0
   14ecc:	bne	14ef0 <__assert_fail@plt+0x3bf4>
   14ed0:	ldr	r3, [r5, #24]
   14ed4:	ldrb	r3, [r3]
   14ed8:	cmp	r3, #47	; 0x2f
   14edc:	beq	14ef0 <__assert_fail@plt+0x3bf4>
   14ee0:	ldr	r3, [r4, #48]	; 0x30
   14ee4:	and	r3, r3, #4
   14ee8:	cmp	r3, #0
   14eec:	beq	14f0c <__assert_fail@plt+0x3c10>
   14ef0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14ef4:	mov	r0, r4
   14ef8:	bl	15124 <__assert_fail@plt+0x3e28>
   14efc:	mov	r3, r0
   14f00:	str	r3, [r4, #4]
   14f04:	ldr	r3, [r4, #4]
   14f08:	b	14fc0 <__assert_fail@plt+0x3cc4>
   14f0c:	ldr	r1, [pc, #184]	; 14fcc <__assert_fail@plt+0x3cd0>
   14f10:	mov	r0, r4
   14f14:	bl	13af4 <__assert_fail@plt+0x27f8>
   14f18:	str	r0, [fp, #-16]
   14f1c:	ldr	r3, [fp, #-16]
   14f20:	cmp	r3, #0
   14f24:	bge	14f38 <__assert_fail@plt+0x3c3c>
   14f28:	mov	r3, #0
   14f2c:	str	r3, [r4, #4]
   14f30:	mov	r3, #0
   14f34:	b	14fc0 <__assert_fail@plt+0x3cc4>
   14f38:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14f3c:	mov	r0, r4
   14f40:	bl	15124 <__assert_fail@plt+0x3e28>
   14f44:	mov	r3, r0
   14f48:	str	r3, [r4, #4]
   14f4c:	ldr	r3, [r4, #48]	; 0x30
   14f50:	and	r3, r3, #512	; 0x200
   14f54:	cmp	r3, #0
   14f58:	beq	14f70 <__assert_fail@plt+0x3c74>
   14f5c:	mov	r2, #1
   14f60:	ldr	r1, [fp, #-16]
   14f64:	mov	r0, r4
   14f68:	bl	13958 <__assert_fail@plt+0x265c>
   14f6c:	b	14fbc <__assert_fail@plt+0x3cc0>
   14f70:	ldr	r0, [fp, #-16]
   14f74:	bl	1126c <fchdir@plt>
   14f78:	mov	r3, r0
   14f7c:	cmp	r3, #0
   14f80:	beq	14fb4 <__assert_fail@plt+0x3cb8>
   14f84:	bl	111c4 <__errno_location@plt>
   14f88:	mov	r3, r0
   14f8c:	ldr	r3, [r3]
   14f90:	str	r3, [fp, #-20]	; 0xffffffec
   14f94:	ldr	r0, [fp, #-16]
   14f98:	bl	112c0 <close@plt>
   14f9c:	bl	111c4 <__errno_location@plt>
   14fa0:	mov	r2, r0
   14fa4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fa8:	str	r3, [r2]
   14fac:	mov	r3, #0
   14fb0:	b	14fc0 <__assert_fail@plt+0x3cc4>
   14fb4:	ldr	r0, [fp, #-16]
   14fb8:	bl	112c0 <close@plt>
   14fbc:	ldr	r3, [r4, #4]
   14fc0:	mov	r0, r3
   14fc4:	sub	sp, fp, #12
   14fc8:	pop	{r4, r5, fp, pc}
   14fcc:	muleq	r1, r0, r8
   14fd0:	push	{fp}		; (str fp, [sp, #-4]!)
   14fd4:	add	fp, sp, #0
   14fd8:	sub	sp, sp, #12
   14fdc:	str	r0, [fp, #-8]
   14fe0:	str	r1, [fp, #-12]
   14fe4:	ldr	r3, [fp, #-8]
   14fe8:	ldr	r3, [r3]
   14fec:	ldrd	r0, [r3, #160]	; 0xa0
   14ff0:	ldr	r3, [fp, #-12]
   14ff4:	ldr	r3, [r3]
   14ff8:	ldrd	r2, [r3, #160]	; 0xa0
   14ffc:	cmp	r1, r3
   15000:	cmpeq	r0, r2
   15004:	movhi	r3, #1
   15008:	movls	r3, #0
   1500c:	uxtb	r3, r3
   15010:	mov	ip, r3
   15014:	ldr	r3, [fp, #-8]
   15018:	ldr	r3, [r3]
   1501c:	ldrd	r0, [r3, #160]	; 0xa0
   15020:	ldr	r3, [fp, #-12]
   15024:	ldr	r3, [r3]
   15028:	ldrd	r2, [r3, #160]	; 0xa0
   1502c:	cmp	r1, r3
   15030:	cmpeq	r0, r2
   15034:	movcc	r3, #1
   15038:	movcs	r3, #0
   1503c:	uxtb	r3, r3
   15040:	sub	r3, ip, r3
   15044:	mov	r0, r3
   15048:	add	sp, fp, #0
   1504c:	pop	{fp}		; (ldr fp, [sp], #4)
   15050:	bx	lr
   15054:	push	{fp}		; (str fp, [sp, #-4]!)
   15058:	add	fp, sp, #0
   1505c:	sub	sp, sp, #20
   15060:	str	r0, [fp, #-16]
   15064:	str	r1, [fp, #-20]	; 0xffffffec
   15068:	ldr	r3, [fp, #-20]	; 0xffffffec
   1506c:	sub	r3, r3, #1
   15070:	cmp	r3, #11
   15074:	ldrls	pc, [pc, r3, lsl #2]
   15078:	b	15100 <__assert_fail@plt+0x3e04>
   1507c:	ldrdeq	r5, [r1], -r0
   15080:	strheq	r5, [r1], -r8
   15084:	andeq	r5, r1, r0, lsl #2
   15088:	andeq	r5, r1, r4, asr #1
   1508c:	andeq	r5, r1, r0, lsl #2
   15090:	andeq	r5, r1, ip, lsr #1
   15094:	andeq	r5, r1, r0, lsl #2
   15098:	andeq	r5, r1, r8, ror #1
   1509c:	andeq	r5, r1, r0, lsl #2
   150a0:	ldrdeq	r5, [r1], -ip
   150a4:	andeq	r5, r1, r0, lsl #2
   150a8:	strdeq	r5, [r1], -r4
   150ac:	mov	r3, #24576	; 0x6000
   150b0:	str	r3, [fp, #-8]
   150b4:	b	15108 <__assert_fail@plt+0x3e0c>
   150b8:	mov	r3, #8192	; 0x2000
   150bc:	str	r3, [fp, #-8]
   150c0:	b	15108 <__assert_fail@plt+0x3e0c>
   150c4:	mov	r3, #16384	; 0x4000
   150c8:	str	r3, [fp, #-8]
   150cc:	b	15108 <__assert_fail@plt+0x3e0c>
   150d0:	mov	r3, #4096	; 0x1000
   150d4:	str	r3, [fp, #-8]
   150d8:	b	15108 <__assert_fail@plt+0x3e0c>
   150dc:	mov	r3, #40960	; 0xa000
   150e0:	str	r3, [fp, #-8]
   150e4:	b	15108 <__assert_fail@plt+0x3e0c>
   150e8:	mov	r3, #32768	; 0x8000
   150ec:	str	r3, [fp, #-8]
   150f0:	b	15108 <__assert_fail@plt+0x3e0c>
   150f4:	mov	r3, #49152	; 0xc000
   150f8:	str	r3, [fp, #-8]
   150fc:	b	15108 <__assert_fail@plt+0x3e0c>
   15100:	mov	r3, #0
   15104:	str	r3, [fp, #-8]
   15108:	ldr	r3, [fp, #-16]
   1510c:	ldr	r2, [fp, #-8]
   15110:	str	r2, [r3, #16]
   15114:	nop			; (mov r0, r0)
   15118:	add	sp, fp, #0
   1511c:	pop	{fp}		; (ldr fp, [sp], #4)
   15120:	bx	lr
   15124:	push	{r4, r5, r6, r7, fp, lr}
   15128:	add	fp, sp, #20
   1512c:	sub	sp, sp, #80	; 0x50
   15130:	mov	r4, r0
   15134:	str	r1, [fp, #-96]	; 0xffffffa0
   15138:	ldr	r3, [r4]
   1513c:	str	r3, [fp, #-44]	; 0xffffffd4
   15140:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15144:	ldr	r3, [r3, #12]
   15148:	cmp	r3, #0
   1514c:	movne	r3, #1
   15150:	moveq	r3, #0
   15154:	strb	r3, [fp, #-45]	; 0xffffffd3
   15158:	mov	r3, #0
   1515c:	strb	r3, [fp, #-37]	; 0xffffffdb
   15160:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   15164:	cmp	r3, #0
   15168:	beq	151e4 <__assert_fail@plt+0x3ee8>
   1516c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15170:	ldr	r3, [r3, #12]
   15174:	str	r3, [fp, #-52]	; 0xffffffcc
   15178:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1517c:	bl	11260 <dirfd@plt>
   15180:	mov	r3, r0
   15184:	str	r3, [fp, #-92]	; 0xffffffa4
   15188:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1518c:	cmp	r3, #0
   15190:	bge	15348 <__assert_fail@plt+0x404c>
   15194:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15198:	ldr	r3, [r3, #12]
   1519c:	mov	r0, r3
   151a0:	bl	112d8 <closedir@plt>
   151a4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   151a8:	mov	r2, #0
   151ac:	str	r2, [r3, #12]
   151b0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   151b4:	cmp	r3, #3
   151b8:	bne	151dc <__assert_fail@plt+0x3ee0>
   151bc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   151c0:	mov	r2, #4
   151c4:	strh	r2, [r3, #56]	; 0x38
   151c8:	bl	111c4 <__errno_location@plt>
   151cc:	mov	r3, r0
   151d0:	ldr	r2, [r3]
   151d4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   151d8:	str	r2, [r3, #32]
   151dc:	mov	r3, #0
   151e0:	b	15c3c <__assert_fail@plt+0x4940>
   151e4:	ldr	r3, [r4, #48]	; 0x30
   151e8:	and	r3, r3, #4
   151ec:	cmp	r3, #0
   151f0:	bne	1520c <__assert_fail@plt+0x3f10>
   151f4:	ldr	r3, [r4, #48]	; 0x30
   151f8:	and	r3, r3, #512	; 0x200
   151fc:	cmp	r3, #0
   15200:	beq	1520c <__assert_fail@plt+0x3f10>
   15204:	ldr	r0, [r4, #32]
   15208:	b	15210 <__assert_fail@plt+0x3f14>
   1520c:	mvn	r0, #99	; 0x63
   15210:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15214:	ldr	r1, [r3, #24]
   15218:	ldr	r3, [r4, #48]	; 0x30
   1521c:	and	r3, r3, #16
   15220:	cmp	r3, #0
   15224:	beq	15250 <__assert_fail@plt+0x3f54>
   15228:	ldr	r3, [r4, #48]	; 0x30
   1522c:	and	r3, r3, #1
   15230:	cmp	r3, #0
   15234:	beq	15248 <__assert_fail@plt+0x3f4c>
   15238:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1523c:	ldr	r3, [r3, #48]	; 0x30
   15240:	cmp	r3, #0
   15244:	beq	15250 <__assert_fail@plt+0x3f54>
   15248:	mov	r2, #32768	; 0x8000
   1524c:	b	15254 <__assert_fail@plt+0x3f58>
   15250:	mov	r2, #0
   15254:	sub	r3, fp, #92	; 0x5c
   15258:	bl	184b4 <__assert_fail@plt+0x71b8>
   1525c:	mov	r3, r0
   15260:	mov	r2, r3
   15264:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15268:	str	r2, [r3, #12]
   1526c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15270:	ldr	r3, [r3, #12]
   15274:	cmp	r3, #0
   15278:	bne	152b0 <__assert_fail@plt+0x3fb4>
   1527c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15280:	cmp	r3, #3
   15284:	bne	152a8 <__assert_fail@plt+0x3fac>
   15288:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1528c:	mov	r2, #4
   15290:	strh	r2, [r3, #56]	; 0x38
   15294:	bl	111c4 <__errno_location@plt>
   15298:	mov	r3, r0
   1529c:	ldr	r2, [r3]
   152a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   152a4:	str	r2, [r3, #32]
   152a8:	mov	r3, #0
   152ac:	b	15c3c <__assert_fail@plt+0x4940>
   152b0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   152b4:	ldrh	r3, [r3, #56]	; 0x38
   152b8:	cmp	r3, #11
   152bc:	bne	152e4 <__assert_fail@plt+0x3fe8>
   152c0:	mov	r2, #0
   152c4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   152c8:	mov	r0, r4
   152cc:	bl	15c5c <__assert_fail@plt+0x4960>
   152d0:	mov	r3, r0
   152d4:	mov	r2, r3
   152d8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   152dc:	strh	r2, [r3, #56]	; 0x38
   152e0:	b	15348 <__assert_fail@plt+0x404c>
   152e4:	ldr	r3, [r4, #48]	; 0x30
   152e8:	and	r3, r3, #256	; 0x100
   152ec:	cmp	r3, #0
   152f0:	beq	15348 <__assert_fail@plt+0x404c>
   152f4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   152f8:	mov	r0, r4
   152fc:	bl	136f0 <__assert_fail@plt+0x23f4>
   15300:	mov	r2, #0
   15304:	ldr	r1, [fp, #-44]	; 0xffffffd4
   15308:	mov	r0, r4
   1530c:	bl	15c5c <__assert_fail@plt+0x4960>
   15310:	ldr	r1, [fp, #-44]	; 0xffffffd4
   15314:	mov	r0, r4
   15318:	bl	135b0 <__assert_fail@plt+0x22b4>
   1531c:	mov	r3, r0
   15320:	eor	r3, r3, #1
   15324:	uxtb	r3, r3
   15328:	cmp	r3, #0
   1532c:	beq	15348 <__assert_fail@plt+0x404c>
   15330:	bl	111c4 <__errno_location@plt>
   15334:	mov	r2, r0
   15338:	mov	r3, #12
   1533c:	str	r3, [r2]
   15340:	mov	r3, #0
   15344:	b	15c3c <__assert_fail@plt+0x4940>
   15348:	ldr	r3, [r4, #44]	; 0x2c
   1534c:	cmp	r3, #0
   15350:	beq	1535c <__assert_fail@plt+0x4060>
   15354:	mvn	r3, #0
   15358:	b	15360 <__assert_fail@plt+0x4064>
   1535c:	ldr	r3, [pc, #2276]	; 15c48 <__assert_fail@plt+0x494c>
   15360:	str	r3, [fp, #-56]	; 0xffffffc8
   15364:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   15368:	cmp	r3, #0
   1536c:	beq	1537c <__assert_fail@plt+0x4080>
   15370:	mov	r3, #1
   15374:	strb	r3, [fp, #-25]	; 0xffffffe7
   15378:	b	15518 <__assert_fail@plt+0x421c>
   1537c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15380:	cmp	r3, #2
   15384:	beq	153ec <__assert_fail@plt+0x40f0>
   15388:	ldr	r3, [r4, #48]	; 0x30
   1538c:	and	r3, r3, #8
   15390:	cmp	r3, #0
   15394:	beq	153e4 <__assert_fail@plt+0x40e8>
   15398:	ldr	r3, [r4, #48]	; 0x30
   1539c:	and	r3, r3, #16
   153a0:	cmp	r3, #0
   153a4:	beq	153e4 <__assert_fail@plt+0x40e8>
   153a8:	ldr	r3, [r4, #48]	; 0x30
   153ac:	and	r3, r3, #32
   153b0:	cmp	r3, #0
   153b4:	bne	153e4 <__assert_fail@plt+0x40e8>
   153b8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   153bc:	ldr	r3, [r3, #84]	; 0x54
   153c0:	cmp	r3, #2
   153c4:	bne	153e4 <__assert_fail@plt+0x40e8>
   153c8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   153cc:	mov	r1, r3
   153d0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   153d4:	bl	14554 <__assert_fail@plt+0x3258>
   153d8:	mov	r3, r0
   153dc:	cmp	r3, #0
   153e0:	bne	153ec <__assert_fail@plt+0x40f0>
   153e4:	mov	r3, #1
   153e8:	b	153f0 <__assert_fail@plt+0x40f4>
   153ec:	mov	r3, #0
   153f0:	strb	r3, [fp, #-25]	; 0xffffffe7
   153f4:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   153f8:	and	r3, r3, #1
   153fc:	strb	r3, [fp, #-25]	; 0xffffffe7
   15400:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   15404:	cmp	r3, #0
   15408:	bne	15418 <__assert_fail@plt+0x411c>
   1540c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15410:	cmp	r3, #3
   15414:	bne	15518 <__assert_fail@plt+0x421c>
   15418:	ldr	r3, [r4, #48]	; 0x30
   1541c:	and	r3, r3, #512	; 0x200
   15420:	cmp	r3, #0
   15424:	beq	15444 <__assert_fail@plt+0x4148>
   15428:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1542c:	mov	r2, #3
   15430:	ldr	r1, [pc, #2068]	; 15c4c <__assert_fail@plt+0x4950>
   15434:	mov	r0, r3
   15438:	bl	1d360 <__assert_fail@plt+0xc064>
   1543c:	mov	r3, r0
   15440:	str	r3, [fp, #-92]	; 0xffffffa4
   15444:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15448:	cmp	r3, #0
   1544c:	blt	15470 <__assert_fail@plt+0x4174>
   15450:	ldr	r2, [fp, #-92]	; 0xffffffa4
   15454:	mov	r3, #0
   15458:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1545c:	mov	r0, r4
   15460:	bl	16378 <__assert_fail@plt+0x507c>
   15464:	mov	r3, r0
   15468:	cmp	r3, #0
   1546c:	beq	15510 <__assert_fail@plt+0x4214>
   15470:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   15474:	cmp	r3, #0
   15478:	beq	1549c <__assert_fail@plt+0x41a0>
   1547c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15480:	cmp	r3, #3
   15484:	bne	1549c <__assert_fail@plt+0x41a0>
   15488:	bl	111c4 <__errno_location@plt>
   1548c:	mov	r3, r0
   15490:	ldr	r2, [r3]
   15494:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15498:	str	r2, [r3, #32]
   1549c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   154a0:	ldrh	r3, [r3, #58]	; 0x3a
   154a4:	orr	r3, r3, #1
   154a8:	uxth	r2, r3
   154ac:	ldr	r3, [fp, #-44]	; 0xffffffd4
   154b0:	strh	r2, [r3, #58]	; 0x3a
   154b4:	mov	r3, #0
   154b8:	strb	r3, [fp, #-25]	; 0xffffffe7
   154bc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   154c0:	ldr	r3, [r3, #12]
   154c4:	mov	r0, r3
   154c8:	bl	112d8 <closedir@plt>
   154cc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   154d0:	mov	r2, #0
   154d4:	str	r2, [r3, #12]
   154d8:	ldr	r3, [r4, #48]	; 0x30
   154dc:	and	r3, r3, #512	; 0x200
   154e0:	cmp	r3, #0
   154e4:	beq	15500 <__assert_fail@plt+0x4204>
   154e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   154ec:	cmp	r3, #0
   154f0:	blt	15500 <__assert_fail@plt+0x4204>
   154f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   154f8:	mov	r0, r3
   154fc:	bl	112c0 <close@plt>
   15500:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15504:	mov	r2, #0
   15508:	str	r2, [r3, #12]
   1550c:	b	15518 <__assert_fail@plt+0x421c>
   15510:	mov	r3, #1
   15514:	strb	r3, [fp, #-25]	; 0xffffffe7
   15518:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1551c:	ldr	r2, [r3, #28]
   15520:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15524:	ldr	r3, [r3, #40]	; 0x28
   15528:	sub	r3, r3, #1
   1552c:	add	r3, r2, r3
   15530:	ldrb	r3, [r3]
   15534:	cmp	r3, #47	; 0x2f
   15538:	bne	1554c <__assert_fail@plt+0x4250>
   1553c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15540:	ldr	r3, [r3, #40]	; 0x28
   15544:	sub	r3, r3, #1
   15548:	b	15554 <__assert_fail@plt+0x4258>
   1554c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15550:	ldr	r3, [r3, #40]	; 0x28
   15554:	str	r3, [fp, #-60]	; 0xffffffc4
   15558:	ldr	r3, [r4, #48]	; 0x30
   1555c:	and	r3, r3, #4
   15560:	cmp	r3, #0
   15564:	beq	15590 <__assert_fail@plt+0x4294>
   15568:	ldr	r2, [r4, #24]
   1556c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15570:	add	r3, r2, r3
   15574:	str	r3, [fp, #-36]	; 0xffffffdc
   15578:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1557c:	add	r2, r3, #1
   15580:	str	r2, [fp, #-36]	; 0xffffffdc
   15584:	mov	r2, #47	; 0x2f
   15588:	strb	r2, [r3]
   1558c:	b	15598 <__assert_fail@plt+0x429c>
   15590:	mov	r3, #0
   15594:	str	r3, [fp, #-36]	; 0xffffffdc
   15598:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1559c:	add	r3, r3, #1
   155a0:	str	r3, [fp, #-60]	; 0xffffffc4
   155a4:	ldr	r2, [r4, #36]	; 0x24
   155a8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   155ac:	sub	r3, r2, r3
   155b0:	str	r3, [fp, #-32]	; 0xffffffe0
   155b4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   155b8:	ldr	r3, [r3, #48]	; 0x30
   155bc:	add	r3, r3, #1
   155c0:	str	r3, [fp, #-64]	; 0xffffffc0
   155c4:	mov	r3, #0
   155c8:	strb	r3, [fp, #-26]	; 0xffffffe6
   155cc:	mov	r7, #0
   155d0:	mov	r3, #0
   155d4:	str	r3, [fp, #-24]	; 0xffffffe8
   155d8:	mov	r6, #0
   155dc:	b	15a2c <__assert_fail@plt+0x4730>
   155e0:	bl	111c4 <__errno_location@plt>
   155e4:	mov	r2, r0
   155e8:	mov	r3, #0
   155ec:	str	r3, [r2]
   155f0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   155f4:	ldr	r3, [r3, #12]
   155f8:	mov	r0, r3
   155fc:	bl	11248 <readdir64@plt>
   15600:	str	r0, [fp, #-68]	; 0xffffffbc
   15604:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15608:	cmp	r3, #0
   1560c:	bne	15664 <__assert_fail@plt+0x4368>
   15610:	bl	111c4 <__errno_location@plt>
   15614:	mov	r3, r0
   15618:	ldr	r3, [r3]
   1561c:	cmp	r3, #0
   15620:	beq	15a40 <__assert_fail@plt+0x4744>
   15624:	bl	111c4 <__errno_location@plt>
   15628:	mov	r3, r0
   1562c:	ldr	r2, [r3]
   15630:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15634:	str	r2, [r3, #32]
   15638:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   1563c:	cmp	r3, #0
   15640:	bne	1564c <__assert_fail@plt+0x4350>
   15644:	cmp	r6, #0
   15648:	beq	15654 <__assert_fail@plt+0x4358>
   1564c:	mov	r2, #7
   15650:	b	15658 <__assert_fail@plt+0x435c>
   15654:	mov	r2, #4
   15658:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1565c:	strh	r2, [r3, #56]	; 0x38
   15660:	b	15a40 <__assert_fail@plt+0x4744>
   15664:	ldr	r3, [r4, #48]	; 0x30
   15668:	and	r3, r3, #32
   1566c:	cmp	r3, #0
   15670:	bne	156b8 <__assert_fail@plt+0x43bc>
   15674:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15678:	ldrb	r3, [r3, #19]
   1567c:	cmp	r3, #46	; 0x2e
   15680:	bne	156b8 <__assert_fail@plt+0x43bc>
   15684:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15688:	ldrb	r3, [r3, #20]
   1568c:	cmp	r3, #0
   15690:	beq	15a2c <__assert_fail@plt+0x4730>
   15694:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15698:	ldrb	r3, [r3, #20]
   1569c:	cmp	r3, #46	; 0x2e
   156a0:	bne	156b8 <__assert_fail@plt+0x43bc>
   156a4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   156a8:	ldrb	r3, [r3, #21]
   156ac:	cmp	r3, #0
   156b0:	bne	156b8 <__assert_fail@plt+0x43bc>
   156b4:	b	15a2c <__assert_fail@plt+0x4730>
   156b8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   156bc:	add	r3, r3, #19
   156c0:	mov	r0, r3
   156c4:	bl	11188 <strlen@plt>
   156c8:	str	r0, [fp, #-72]	; 0xffffffb8
   156cc:	ldr	r3, [fp, #-68]	; 0xffffffbc
   156d0:	add	r3, r3, #19
   156d4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   156d8:	mov	r1, r3
   156dc:	mov	r0, r4
   156e0:	bl	15fd4 <__assert_fail@plt+0x4cd8>
   156e4:	mov	r5, r0
   156e8:	cmp	r5, #0
   156ec:	beq	1573c <__assert_fail@plt+0x4440>
   156f0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   156f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   156f8:	cmp	r2, r3
   156fc:	bcc	157f4 <__assert_fail@plt+0x44f8>
   15700:	ldr	r3, [r4, #24]
   15704:	str	r3, [fp, #-76]	; 0xffffffb4
   15708:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1570c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15710:	add	r3, r2, r3
   15714:	add	r3, r3, #1
   15718:	mov	r1, r3
   1571c:	mov	r0, r4
   15720:	bl	160d8 <__assert_fail@plt+0x4ddc>
   15724:	mov	r3, r0
   15728:	eor	r3, r3, #1
   1572c:	uxtb	r3, r3
   15730:	cmp	r3, #0
   15734:	beq	157ac <__assert_fail@plt+0x44b0>
   15738:	b	15740 <__assert_fail@plt+0x4444>
   1573c:	nop			; (mov r0, r0)
   15740:	bl	111c4 <__errno_location@plt>
   15744:	mov	r3, r0
   15748:	ldr	r3, [r3]
   1574c:	str	r3, [fp, #-88]	; 0xffffffa8
   15750:	mov	r0, r5
   15754:	bl	13394 <__assert_fail@plt+0x2098>
   15758:	mov	r0, r7
   1575c:	bl	16090 <__assert_fail@plt+0x4d94>
   15760:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15764:	ldr	r3, [r3, #12]
   15768:	mov	r0, r3
   1576c:	bl	112d8 <closedir@plt>
   15770:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15774:	mov	r2, #0
   15778:	str	r2, [r3, #12]
   1577c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15780:	mov	r2, #7
   15784:	strh	r2, [r3, #56]	; 0x38
   15788:	ldr	r3, [r4, #48]	; 0x30
   1578c:	orr	r3, r3, #8192	; 0x2000
   15790:	str	r3, [r4, #48]	; 0x30
   15794:	bl	111c4 <__errno_location@plt>
   15798:	mov	r2, r0
   1579c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   157a0:	str	r3, [r2]
   157a4:	mov	r3, #0
   157a8:	b	15c3c <__assert_fail@plt+0x4940>
   157ac:	ldr	r2, [r4, #24]
   157b0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   157b4:	cmp	r2, r3
   157b8:	beq	157e4 <__assert_fail@plt+0x44e8>
   157bc:	mov	r3, #1
   157c0:	strb	r3, [fp, #-26]	; 0xffffffe6
   157c4:	ldr	r3, [r4, #48]	; 0x30
   157c8:	and	r3, r3, #4
   157cc:	cmp	r3, #0
   157d0:	beq	157e4 <__assert_fail@plt+0x44e8>
   157d4:	ldr	r2, [r4, #24]
   157d8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   157dc:	add	r3, r2, r3
   157e0:	str	r3, [fp, #-36]	; 0xffffffdc
   157e4:	ldr	r2, [r4, #36]	; 0x24
   157e8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   157ec:	sub	r3, r2, r3
   157f0:	str	r3, [fp, #-32]	; 0xffffffe0
   157f4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   157f8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   157fc:	add	r3, r2, r3
   15800:	str	r3, [fp, #-80]	; 0xffffffb0
   15804:	ldr	r2, [fp, #-80]	; 0xffffffb0
   15808:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1580c:	cmp	r2, r3
   15810:	bcs	15870 <__assert_fail@plt+0x4574>
   15814:	mov	r0, r5
   15818:	bl	13394 <__assert_fail@plt+0x2098>
   1581c:	mov	r0, r7
   15820:	bl	16090 <__assert_fail@plt+0x4d94>
   15824:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15828:	ldr	r3, [r3, #12]
   1582c:	mov	r0, r3
   15830:	bl	112d8 <closedir@plt>
   15834:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15838:	mov	r2, #0
   1583c:	str	r2, [r3, #12]
   15840:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15844:	mov	r2, #7
   15848:	strh	r2, [r3, #56]	; 0x38
   1584c:	ldr	r3, [r4, #48]	; 0x30
   15850:	orr	r3, r3, #8192	; 0x2000
   15854:	str	r3, [r4, #48]	; 0x30
   15858:	bl	111c4 <__errno_location@plt>
   1585c:	mov	r2, r0
   15860:	mov	r3, #36	; 0x24
   15864:	str	r3, [r2]
   15868:	mov	r3, #0
   1586c:	b	15c3c <__assert_fail@plt+0x4940>
   15870:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15874:	str	r3, [r5, #48]	; 0x30
   15878:	ldr	r3, [r4]
   1587c:	str	r3, [r5, #4]
   15880:	ldr	r3, [fp, #-80]	; 0xffffffb0
   15884:	str	r3, [r5, #40]	; 0x28
   15888:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1588c:	ldrd	r2, [r3]
   15890:	strd	r2, [r5, #160]	; 0xa0
   15894:	ldr	r3, [r4, #48]	; 0x30
   15898:	and	r3, r3, #4
   1589c:	cmp	r3, #0
   158a0:	beq	158c8 <__assert_fail@plt+0x45cc>
   158a4:	ldr	r3, [r5, #28]
   158a8:	str	r3, [r5, #24]
   158ac:	add	r1, r5, #168	; 0xa8
   158b0:	ldr	r3, [r5, #52]	; 0x34
   158b4:	add	r3, r3, #1
   158b8:	mov	r2, r3
   158bc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   158c0:	bl	11020 <memmove@plt>
   158c4:	b	158d0 <__assert_fail@plt+0x45d4>
   158c8:	add	r3, r5, #168	; 0xa8
   158cc:	str	r3, [r5, #24]
   158d0:	ldr	r3, [r4, #44]	; 0x2c
   158d4:	cmp	r3, #0
   158d8:	beq	158ec <__assert_fail@plt+0x45f0>
   158dc:	ldr	r3, [r4, #48]	; 0x30
   158e0:	and	r3, r3, #1024	; 0x400
   158e4:	cmp	r3, #0
   158e8:	beq	159ac <__assert_fail@plt+0x46b0>
   158ec:	ldr	r3, [r4, #48]	; 0x30
   158f0:	and	r3, r3, #8
   158f4:	cmp	r3, #0
   158f8:	beq	15944 <__assert_fail@plt+0x4648>
   158fc:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15900:	ldrb	r3, [r3, #18]
   15904:	cmp	r3, #0
   15908:	beq	15944 <__assert_fail@plt+0x4648>
   1590c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15910:	ldrb	r3, [r3, #18]
   15914:	cmp	r3, #4
   15918:	beq	15944 <__assert_fail@plt+0x4648>
   1591c:	ldr	r3, [r4, #48]	; 0x30
   15920:	and	r3, r3, #16
   15924:	cmp	r3, #0
   15928:	bne	1593c <__assert_fail@plt+0x4640>
   1592c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15930:	ldrb	r3, [r3, #18]
   15934:	cmp	r3, #10
   15938:	beq	15944 <__assert_fail@plt+0x4648>
   1593c:	mov	r3, #1
   15940:	b	15948 <__assert_fail@plt+0x464c>
   15944:	mov	r3, #0
   15948:	strb	r3, [fp, #-81]	; 0xffffffaf
   1594c:	ldrb	r3, [fp, #-81]	; 0xffffffaf
   15950:	and	r3, r3, #1
   15954:	strb	r3, [fp, #-81]	; 0xffffffaf
   15958:	mov	r3, #11
   1595c:	strh	r3, [r5, #56]	; 0x38
   15960:	add	r2, r5, #64	; 0x40
   15964:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15968:	ldrb	r3, [r3, #18]
   1596c:	mov	r1, r3
   15970:	mov	r0, r2
   15974:	bl	15054 <__assert_fail@plt+0x3d58>
   15978:	ldrb	r3, [fp, #-81]	; 0xffffffaf
   1597c:	cmp	r3, #0
   15980:	movne	r3, #1
   15984:	moveq	r3, #0
   15988:	uxtb	r3, r3
   1598c:	eor	r3, r3, #1
   15990:	uxtb	r3, r3
   15994:	and	r3, r3, #1
   15998:	uxtb	r3, r3
   1599c:	mov	r1, r3
   159a0:	mov	r0, r5
   159a4:	bl	138f8 <__assert_fail@plt+0x25fc>
   159a8:	b	159c4 <__assert_fail@plt+0x46c8>
   159ac:	mov	r2, #0
   159b0:	mov	r1, r5
   159b4:	mov	r0, r4
   159b8:	bl	15c5c <__assert_fail@plt+0x4960>
   159bc:	mov	r3, r0
   159c0:	strh	r3, [r5, #56]	; 0x38
   159c4:	mov	r3, #0
   159c8:	str	r3, [r5, #8]
   159cc:	cmp	r7, #0
   159d0:	bne	159e0 <__assert_fail@plt+0x46e4>
   159d4:	str	r5, [fp, #-24]	; 0xffffffe8
   159d8:	ldr	r7, [fp, #-24]	; 0xffffffe8
   159dc:	b	159ec <__assert_fail@plt+0x46f0>
   159e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   159e4:	str	r5, [r3, #8]
   159e8:	str	r5, [fp, #-24]	; 0xffffffe8
   159ec:	ldr	r3, [pc, #604]	; 15c50 <__assert_fail@plt+0x4954>
   159f0:	cmp	r6, r3
   159f4:	bne	15a1c <__assert_fail@plt+0x4720>
   159f8:	ldr	r3, [r4, #44]	; 0x2c
   159fc:	cmp	r3, #0
   15a00:	bne	15a1c <__assert_fail@plt+0x4720>
   15a04:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15a08:	mov	r1, r3
   15a0c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15a10:	bl	144e8 <__assert_fail@plt+0x31ec>
   15a14:	mov	r3, r0
   15a18:	strb	r3, [fp, #-37]	; 0xffffffdb
   15a1c:	add	r6, r6, #1
   15a20:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15a24:	cmp	r3, r6
   15a28:	bls	15a74 <__assert_fail@plt+0x4778>
   15a2c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15a30:	ldr	r3, [r3, #12]
   15a34:	cmp	r3, #0
   15a38:	bne	155e0 <__assert_fail@plt+0x42e4>
   15a3c:	b	15a44 <__assert_fail@plt+0x4748>
   15a40:	nop			; (mov r0, r0)
   15a44:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15a48:	ldr	r3, [r3, #12]
   15a4c:	cmp	r3, #0
   15a50:	beq	15a78 <__assert_fail@plt+0x477c>
   15a54:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15a58:	ldr	r3, [r3, #12]
   15a5c:	mov	r0, r3
   15a60:	bl	112d8 <closedir@plt>
   15a64:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15a68:	mov	r2, #0
   15a6c:	str	r2, [r3, #12]
   15a70:	b	15a78 <__assert_fail@plt+0x477c>
   15a74:	nop			; (mov r0, r0)
   15a78:	ldrb	r3, [fp, #-26]	; 0xffffffe6
   15a7c:	cmp	r3, #0
   15a80:	beq	15a90 <__assert_fail@plt+0x4794>
   15a84:	mov	r1, r7
   15a88:	mov	r0, r4
   15a8c:	bl	161c4 <__assert_fail@plt+0x4ec8>
   15a90:	ldr	r3, [r4, #48]	; 0x30
   15a94:	and	r3, r3, #4
   15a98:	cmp	r3, #0
   15a9c:	beq	15ad0 <__assert_fail@plt+0x47d4>
   15aa0:	ldr	r2, [r4, #36]	; 0x24
   15aa4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15aa8:	cmp	r2, r3
   15aac:	beq	15ab8 <__assert_fail@plt+0x47bc>
   15ab0:	cmp	r6, #0
   15ab4:	bne	15ac4 <__assert_fail@plt+0x47c8>
   15ab8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15abc:	sub	r3, r3, #1
   15ac0:	str	r3, [fp, #-36]	; 0xffffffdc
   15ac4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15ac8:	mov	r2, #0
   15acc:	strb	r2, [r3]
   15ad0:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   15ad4:	eor	r3, r3, #1
   15ad8:	uxtb	r3, r3
   15adc:	cmp	r3, #0
   15ae0:	beq	15b90 <__assert_fail@plt+0x4894>
   15ae4:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   15ae8:	cmp	r3, #0
   15aec:	beq	15b90 <__assert_fail@plt+0x4894>
   15af0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15af4:	cmp	r3, #1
   15af8:	beq	15b04 <__assert_fail@plt+0x4808>
   15afc:	cmp	r6, #0
   15b00:	bne	15b90 <__assert_fail@plt+0x4894>
   15b04:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15b08:	ldr	r3, [r3, #48]	; 0x30
   15b0c:	cmp	r3, #0
   15b10:	bne	15b34 <__assert_fail@plt+0x4838>
   15b14:	mov	r0, r4
   15b18:	bl	13a1c <__assert_fail@plt+0x2720>
   15b1c:	mov	r3, r0
   15b20:	cmp	r3, #0
   15b24:	movne	r3, #1
   15b28:	moveq	r3, #0
   15b2c:	uxtb	r3, r3
   15b30:	b	15b60 <__assert_fail@plt+0x4864>
   15b34:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15b38:	ldr	r1, [r3, #4]
   15b3c:	ldr	r3, [pc, #272]	; 15c54 <__assert_fail@plt+0x4958>
   15b40:	mvn	r2, #0
   15b44:	mov	r0, r4
   15b48:	bl	16378 <__assert_fail@plt+0x507c>
   15b4c:	mov	r3, r0
   15b50:	cmp	r3, #0
   15b54:	movne	r3, #1
   15b58:	moveq	r3, #0
   15b5c:	uxtb	r3, r3
   15b60:	cmp	r3, #0
   15b64:	beq	15b90 <__assert_fail@plt+0x4894>
   15b68:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15b6c:	mov	r2, #7
   15b70:	strh	r2, [r3, #56]	; 0x38
   15b74:	ldr	r3, [r4, #48]	; 0x30
   15b78:	orr	r3, r3, #8192	; 0x2000
   15b7c:	str	r3, [r4, #48]	; 0x30
   15b80:	mov	r0, r7
   15b84:	bl	16090 <__assert_fail@plt+0x4d94>
   15b88:	mov	r3, #0
   15b8c:	b	15c3c <__assert_fail@plt+0x4940>
   15b90:	cmp	r6, #0
   15b94:	bne	15be0 <__assert_fail@plt+0x48e4>
   15b98:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15b9c:	cmp	r3, #3
   15ba0:	bne	15bd0 <__assert_fail@plt+0x48d4>
   15ba4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15ba8:	ldrh	r3, [r3, #56]	; 0x38
   15bac:	cmp	r3, #4
   15bb0:	beq	15bd0 <__assert_fail@plt+0x48d4>
   15bb4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15bb8:	ldrh	r3, [r3, #56]	; 0x38
   15bbc:	cmp	r3, #7
   15bc0:	beq	15bd0 <__assert_fail@plt+0x48d4>
   15bc4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15bc8:	mov	r2, #6
   15bcc:	strh	r2, [r3, #56]	; 0x38
   15bd0:	mov	r0, r7
   15bd4:	bl	16090 <__assert_fail@plt+0x4d94>
   15bd8:	mov	r3, #0
   15bdc:	b	15c3c <__assert_fail@plt+0x4940>
   15be0:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   15be4:	cmp	r3, #0
   15be8:	beq	15c10 <__assert_fail@plt+0x4914>
   15bec:	ldr	r3, [pc, #100]	; 15c58 <__assert_fail@plt+0x495c>
   15bf0:	str	r3, [r4, #44]	; 0x2c
   15bf4:	mov	r2, r6
   15bf8:	mov	r1, r7
   15bfc:	mov	r0, r4
   15c00:	bl	15e8c <__assert_fail@plt+0x4b90>
   15c04:	mov	r7, r0
   15c08:	mov	r3, #0
   15c0c:	str	r3, [r4, #44]	; 0x2c
   15c10:	ldr	r3, [r4, #44]	; 0x2c
   15c14:	cmp	r3, #0
   15c18:	beq	15c38 <__assert_fail@plt+0x493c>
   15c1c:	cmp	r6, #1
   15c20:	bls	15c38 <__assert_fail@plt+0x493c>
   15c24:	mov	r2, r6
   15c28:	mov	r1, r7
   15c2c:	mov	r0, r4
   15c30:	bl	15e8c <__assert_fail@plt+0x4b90>
   15c34:	mov	r7, r0
   15c38:	mov	r3, r7
   15c3c:	mov	r0, r3
   15c40:	sub	sp, fp, #20
   15c44:	pop	{r4, r5, r6, r7, fp, pc}
   15c48:	andeq	r8, r1, r0, lsr #13
   15c4c:	andeq	r0, r0, r6, lsl #8
   15c50:	andeq	r2, r0, r0, lsl r7
   15c54:	muleq	r1, r4, r8
   15c58:	ldrdeq	r4, [r1], -r0
   15c5c:	push	{r4, fp, lr}
   15c60:	add	fp, sp, #8
   15c64:	sub	sp, sp, #20
   15c68:	str	r0, [fp, #-24]	; 0xffffffe8
   15c6c:	mov	r4, r1
   15c70:	mov	r3, r2
   15c74:	strb	r3, [fp, #-25]	; 0xffffffe7
   15c78:	add	r3, r4, #64	; 0x40
   15c7c:	str	r3, [fp, #-16]
   15c80:	ldr	r3, [r4, #48]	; 0x30
   15c84:	cmp	r3, #0
   15c88:	bne	15ca8 <__assert_fail@plt+0x49ac>
   15c8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15c90:	ldr	r3, [r3, #48]	; 0x30
   15c94:	and	r3, r3, #1
   15c98:	cmp	r3, #0
   15c9c:	beq	15ca8 <__assert_fail@plt+0x49ac>
   15ca0:	mov	r3, #1
   15ca4:	strb	r3, [fp, #-25]	; 0xffffffe7
   15ca8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15cac:	ldr	r3, [r3, #48]	; 0x30
   15cb0:	and	r3, r3, #2
   15cb4:	cmp	r3, #0
   15cb8:	bne	15cc8 <__assert_fail@plt+0x49cc>
   15cbc:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   15cc0:	cmp	r3, #0
   15cc4:	beq	15d40 <__assert_fail@plt+0x4a44>
   15cc8:	ldr	r3, [r4, #24]
   15ccc:	ldr	r1, [fp, #-16]
   15cd0:	mov	r0, r3
   15cd4:	bl	1e940 <__assert_fail@plt+0xd644>
   15cd8:	mov	r3, r0
   15cdc:	cmp	r3, #0
   15ce0:	beq	15d8c <__assert_fail@plt+0x4a90>
   15ce4:	bl	111c4 <__errno_location@plt>
   15ce8:	mov	r3, r0
   15cec:	ldr	r3, [r3]
   15cf0:	cmp	r3, #2
   15cf4:	bne	15d2c <__assert_fail@plt+0x4a30>
   15cf8:	ldr	r3, [r4, #24]
   15cfc:	ldr	r1, [fp, #-16]
   15d00:	mov	r0, r3
   15d04:	bl	1e960 <__assert_fail@plt+0xd664>
   15d08:	mov	r3, r0
   15d0c:	cmp	r3, #0
   15d10:	bne	15d2c <__assert_fail@plt+0x4a30>
   15d14:	bl	111c4 <__errno_location@plt>
   15d18:	mov	r2, r0
   15d1c:	mov	r3, #0
   15d20:	str	r3, [r2]
   15d24:	mov	r3, #13
   15d28:	b	15e30 <__assert_fail@plt+0x4b34>
   15d2c:	bl	111c4 <__errno_location@plt>
   15d30:	mov	r3, r0
   15d34:	ldr	r3, [r3]
   15d38:	str	r3, [r4, #32]
   15d3c:	b	15d74 <__assert_fail@plt+0x4a78>
   15d40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15d44:	ldr	r0, [r3, #32]
   15d48:	ldr	r1, [r4, #24]
   15d4c:	mov	r3, #256	; 0x100
   15d50:	ldr	r2, [fp, #-16]
   15d54:	bl	1e970 <__assert_fail@plt+0xd674>
   15d58:	mov	r3, r0
   15d5c:	cmp	r3, #0
   15d60:	beq	15d8c <__assert_fail@plt+0x4a90>
   15d64:	bl	111c4 <__errno_location@plt>
   15d68:	mov	r3, r0
   15d6c:	ldr	r3, [r3]
   15d70:	str	r3, [r4, #32]
   15d74:	mov	r2, #104	; 0x68
   15d78:	mov	r1, #0
   15d7c:	ldr	r0, [fp, #-16]
   15d80:	bl	111dc <memset@plt>
   15d84:	mov	r3, #10
   15d88:	b	15e30 <__assert_fail@plt+0x4b34>
   15d8c:	ldr	r3, [fp, #-16]
   15d90:	ldr	r3, [r3, #16]
   15d94:	and	r3, r3, #61440	; 0xf000
   15d98:	cmp	r3, #16384	; 0x4000
   15d9c:	bne	15df4 <__assert_fail@plt+0x4af8>
   15da0:	ldrb	r3, [r4, #168]	; 0xa8
   15da4:	cmp	r3, #46	; 0x2e
   15da8:	bne	15dec <__assert_fail@plt+0x4af0>
   15dac:	ldrb	r3, [r4, #169]	; 0xa9
   15db0:	cmp	r3, #0
   15db4:	beq	15dd0 <__assert_fail@plt+0x4ad4>
   15db8:	ldrb	r3, [r4, #169]	; 0xa9
   15dbc:	cmp	r3, #46	; 0x2e
   15dc0:	bne	15dec <__assert_fail@plt+0x4af0>
   15dc4:	ldrb	r3, [r4, #170]	; 0xaa
   15dc8:	cmp	r3, #0
   15dcc:	bne	15dec <__assert_fail@plt+0x4af0>
   15dd0:	ldr	r3, [r4, #48]	; 0x30
   15dd4:	cmp	r3, #0
   15dd8:	bne	15de4 <__assert_fail@plt+0x4ae8>
   15ddc:	mov	r3, #1
   15de0:	b	15e30 <__assert_fail@plt+0x4b34>
   15de4:	mov	r3, #5
   15de8:	b	15e30 <__assert_fail@plt+0x4b34>
   15dec:	mov	r3, #1
   15df0:	b	15e30 <__assert_fail@plt+0x4b34>
   15df4:	ldr	r3, [fp, #-16]
   15df8:	ldr	r3, [r3, #16]
   15dfc:	and	r3, r3, #61440	; 0xf000
   15e00:	cmp	r3, #40960	; 0xa000
   15e04:	bne	15e10 <__assert_fail@plt+0x4b14>
   15e08:	mov	r3, #12
   15e0c:	b	15e30 <__assert_fail@plt+0x4b34>
   15e10:	ldr	r3, [fp, #-16]
   15e14:	ldr	r3, [r3, #16]
   15e18:	and	r3, r3, #61440	; 0xf000
   15e1c:	cmp	r3, #32768	; 0x8000
   15e20:	bne	15e2c <__assert_fail@plt+0x4b30>
   15e24:	mov	r3, #8
   15e28:	b	15e30 <__assert_fail@plt+0x4b34>
   15e2c:	mov	r3, #3
   15e30:	mov	r0, r3
   15e34:	sub	sp, fp, #8
   15e38:	pop	{r4, fp, pc}
   15e3c:	push	{fp, lr}
   15e40:	add	fp, sp, #4
   15e44:	sub	sp, sp, #16
   15e48:	str	r0, [fp, #-16]
   15e4c:	str	r1, [fp, #-20]	; 0xffffffec
   15e50:	ldr	r3, [fp, #-16]
   15e54:	str	r3, [fp, #-8]
   15e58:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e5c:	str	r3, [fp, #-12]
   15e60:	ldr	r3, [fp, #-8]
   15e64:	ldr	r3, [r3]
   15e68:	ldr	r3, [r3, #44]	; 0x2c
   15e6c:	ldr	r3, [r3, #44]	; 0x2c
   15e70:	ldr	r1, [fp, #-12]
   15e74:	ldr	r0, [fp, #-8]
   15e78:	blx	r3
   15e7c:	mov	r3, r0
   15e80:	mov	r0, r3
   15e84:	sub	sp, fp, #4
   15e88:	pop	{fp, pc}
   15e8c:	push	{r4, r5, r6, fp, lr}
   15e90:	add	fp, sp, #16
   15e94:	sub	sp, sp, #28
   15e98:	str	r0, [fp, #-40]	; 0xffffffd8
   15e9c:	str	r1, [fp, #-44]	; 0xffffffd4
   15ea0:	mov	r5, r2
   15ea4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15ea8:	ldr	r3, [r3, #44]	; 0x2c
   15eac:	str	r3, [fp, #-24]	; 0xffffffe8
   15eb0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15eb4:	ldr	r3, [r3, #40]	; 0x28
   15eb8:	cmp	r3, r5
   15ebc:	bcs	15f48 <__assert_fail@plt+0x4c4c>
   15ec0:	add	r2, r5, #40	; 0x28
   15ec4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15ec8:	str	r2, [r3, #40]	; 0x28
   15ecc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15ed0:	ldr	r3, [r3, #40]	; 0x28
   15ed4:	cmn	r3, #-1073741823	; 0xc0000001
   15ed8:	bhi	15f0c <__assert_fail@plt+0x4c10>
   15edc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15ee0:	ldr	r2, [r3, #8]
   15ee4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15ee8:	ldr	r3, [r3, #40]	; 0x28
   15eec:	lsl	r3, r3, #2
   15ef0:	mov	r1, r3
   15ef4:	mov	r0, r2
   15ef8:	bl	1cb70 <__assert_fail@plt+0xb874>
   15efc:	str	r0, [fp, #-28]	; 0xffffffe4
   15f00:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15f04:	cmp	r3, #0
   15f08:	bne	15f3c <__assert_fail@plt+0x4c40>
   15f0c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15f10:	ldr	r3, [r3, #8]
   15f14:	mov	r0, r3
   15f18:	bl	13394 <__assert_fail@plt+0x2098>
   15f1c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15f20:	mov	r2, #0
   15f24:	str	r2, [r3, #8]
   15f28:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15f2c:	mov	r2, #0
   15f30:	str	r2, [r3, #40]	; 0x28
   15f34:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15f38:	b	15fc8 <__assert_fail@plt+0x4ccc>
   15f3c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15f40:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15f44:	str	r2, [r3, #8]
   15f48:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15f4c:	ldr	r4, [r3, #8]
   15f50:	ldr	r6, [fp, #-44]	; 0xffffffd4
   15f54:	b	15f68 <__assert_fail@plt+0x4c6c>
   15f58:	mov	r3, r4
   15f5c:	add	r4, r3, #4
   15f60:	str	r6, [r3]
   15f64:	ldr	r6, [r6, #8]
   15f68:	cmp	r6, #0
   15f6c:	bne	15f58 <__assert_fail@plt+0x4c5c>
   15f70:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15f74:	ldr	r0, [r3, #8]
   15f78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f7c:	mov	r2, #4
   15f80:	mov	r1, r5
   15f84:	bl	11278 <qsort@plt>
   15f88:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15f8c:	ldr	r4, [r3, #8]
   15f90:	ldr	r3, [r4]
   15f94:	str	r3, [fp, #-44]	; 0xffffffd4
   15f98:	b	15fac <__assert_fail@plt+0x4cb0>
   15f9c:	ldr	r3, [r4]
   15fa0:	ldr	r2, [r4, #4]
   15fa4:	str	r2, [r3, #8]
   15fa8:	add	r4, r4, #4
   15fac:	sub	r5, r5, #1
   15fb0:	cmp	r5, #0
   15fb4:	bne	15f9c <__assert_fail@plt+0x4ca0>
   15fb8:	ldr	r3, [r4]
   15fbc:	mov	r2, #0
   15fc0:	str	r2, [r3, #8]
   15fc4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15fc8:	mov	r0, r3
   15fcc:	sub	sp, fp, #16
   15fd0:	pop	{r4, r5, r6, fp, pc}
   15fd4:	push	{r4, r5, fp, lr}
   15fd8:	add	fp, sp, #12
   15fdc:	sub	sp, sp, #16
   15fe0:	str	r0, [fp, #-24]	; 0xffffffe8
   15fe4:	str	r1, [fp, #-28]	; 0xffffffe4
   15fe8:	mov	r5, r2
   15fec:	add	r3, r5, #176	; 0xb0
   15ff0:	bic	r3, r3, #7
   15ff4:	str	r3, [fp, #-16]
   15ff8:	ldr	r0, [fp, #-16]
   15ffc:	bl	1cac8 <__assert_fail@plt+0xb7cc>
   16000:	mov	r3, r0
   16004:	mov	r4, r3
   16008:	cmp	r4, #0
   1600c:	bne	16018 <__assert_fail@plt+0x4d1c>
   16010:	mov	r3, #0
   16014:	b	16084 <__assert_fail@plt+0x4d88>
   16018:	add	r3, r4, #168	; 0xa8
   1601c:	mov	r2, r5
   16020:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16024:	mov	r0, r3
   16028:	bl	11044 <memcpy@plt>
   1602c:	add	r3, r4, r5
   16030:	mov	r2, #0
   16034:	strb	r2, [r3, #168]	; 0xa8
   16038:	str	r5, [r4, #52]	; 0x34
   1603c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16040:	str	r3, [r4, #44]	; 0x2c
   16044:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16048:	ldr	r3, [r3, #24]
   1604c:	str	r3, [r4, #28]
   16050:	mov	r3, #0
   16054:	str	r3, [r4, #32]
   16058:	mov	r3, #0
   1605c:	str	r3, [r4, #12]
   16060:	mov	r3, #0
   16064:	strh	r3, [r4, #58]	; 0x3a
   16068:	mov	r3, #3
   1606c:	strh	r3, [r4, #60]	; 0x3c
   16070:	mov	r3, #0
   16074:	str	r3, [r4, #16]
   16078:	mov	r3, #0
   1607c:	str	r3, [r4, #20]
   16080:	mov	r3, r4
   16084:	mov	r0, r3
   16088:	sub	sp, fp, #12
   1608c:	pop	{r4, r5, fp, pc}
   16090:	push	{r4, r5, fp, lr}
   16094:	add	fp, sp, #12
   16098:	mov	r5, r0
   1609c:	b	160c4 <__assert_fail@plt+0x4dc8>
   160a0:	ldr	r5, [r5, #8]
   160a4:	ldr	r3, [r4, #12]
   160a8:	cmp	r3, #0
   160ac:	beq	160bc <__assert_fail@plt+0x4dc0>
   160b0:	ldr	r3, [r4, #12]
   160b4:	mov	r0, r3
   160b8:	bl	112d8 <closedir@plt>
   160bc:	mov	r0, r4
   160c0:	bl	13394 <__assert_fail@plt+0x2098>
   160c4:	mov	r4, r5
   160c8:	cmp	r4, #0
   160cc:	bne	160a0 <__assert_fail@plt+0x4da4>
   160d0:	nop			; (mov r0, r0)
   160d4:	pop	{r4, r5, fp, pc}
   160d8:	push	{fp, lr}
   160dc:	add	fp, sp, #4
   160e0:	sub	sp, sp, #16
   160e4:	str	r0, [fp, #-16]
   160e8:	str	r1, [fp, #-20]	; 0xffffffec
   160ec:	ldr	r3, [fp, #-16]
   160f0:	ldr	r2, [r3, #36]	; 0x24
   160f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   160f8:	add	r3, r2, r3
   160fc:	add	r3, r3, #256	; 0x100
   16100:	str	r3, [fp, #-8]
   16104:	ldr	r3, [fp, #-16]
   16108:	ldr	r2, [r3, #36]	; 0x24
   1610c:	ldr	r3, [fp, #-8]
   16110:	cmp	r2, r3
   16114:	bls	1614c <__assert_fail@plt+0x4e50>
   16118:	ldr	r3, [fp, #-16]
   1611c:	ldr	r3, [r3, #24]
   16120:	mov	r0, r3
   16124:	bl	13394 <__assert_fail@plt+0x2098>
   16128:	ldr	r3, [fp, #-16]
   1612c:	mov	r2, #0
   16130:	str	r2, [r3, #24]
   16134:	bl	111c4 <__errno_location@plt>
   16138:	mov	r2, r0
   1613c:	mov	r3, #36	; 0x24
   16140:	str	r3, [r2]
   16144:	mov	r3, #0
   16148:	b	161b8 <__assert_fail@plt+0x4ebc>
   1614c:	ldr	r3, [fp, #-16]
   16150:	ldr	r2, [fp, #-8]
   16154:	str	r2, [r3, #36]	; 0x24
   16158:	ldr	r3, [fp, #-16]
   1615c:	ldr	r2, [r3, #24]
   16160:	ldr	r3, [fp, #-16]
   16164:	ldr	r3, [r3, #36]	; 0x24
   16168:	mov	r1, r3
   1616c:	mov	r0, r2
   16170:	bl	1cb70 <__assert_fail@plt+0xb874>
   16174:	str	r0, [fp, #-12]
   16178:	ldr	r3, [fp, #-12]
   1617c:	cmp	r3, #0
   16180:	bne	161a8 <__assert_fail@plt+0x4eac>
   16184:	ldr	r3, [fp, #-16]
   16188:	ldr	r3, [r3, #24]
   1618c:	mov	r0, r3
   16190:	bl	13394 <__assert_fail@plt+0x2098>
   16194:	ldr	r3, [fp, #-16]
   16198:	mov	r2, #0
   1619c:	str	r2, [r3, #24]
   161a0:	mov	r3, #0
   161a4:	b	161b8 <__assert_fail@plt+0x4ebc>
   161a8:	ldr	r3, [fp, #-16]
   161ac:	ldr	r2, [fp, #-12]
   161b0:	str	r2, [r3, #24]
   161b4:	mov	r3, #1
   161b8:	mov	r0, r3
   161bc:	sub	sp, fp, #4
   161c0:	pop	{fp, pc}
   161c4:	push	{fp}		; (str fp, [sp, #-4]!)
   161c8:	add	fp, sp, #0
   161cc:	sub	sp, sp, #20
   161d0:	str	r0, [fp, #-16]
   161d4:	str	r1, [fp, #-20]	; 0xffffffec
   161d8:	ldr	r3, [fp, #-16]
   161dc:	ldr	r3, [r3, #24]
   161e0:	str	r3, [fp, #-12]
   161e4:	ldr	r3, [fp, #-16]
   161e8:	ldr	r3, [r3, #4]
   161ec:	str	r3, [fp, #-8]
   161f0:	b	16250 <__assert_fail@plt+0x4f54>
   161f4:	ldr	r3, [fp, #-8]
   161f8:	ldr	r2, [r3, #24]
   161fc:	ldr	r3, [fp, #-8]
   16200:	add	r3, r3, #168	; 0xa8
   16204:	cmp	r2, r3
   16208:	beq	16238 <__assert_fail@plt+0x4f3c>
   1620c:	ldr	r3, [fp, #-8]
   16210:	ldr	r3, [r3, #24]
   16214:	mov	r2, r3
   16218:	ldr	r3, [fp, #-8]
   1621c:	ldr	r3, [r3, #28]
   16220:	sub	r3, r2, r3
   16224:	mov	r2, r3
   16228:	ldr	r3, [fp, #-12]
   1622c:	add	r2, r3, r2
   16230:	ldr	r3, [fp, #-8]
   16234:	str	r2, [r3, #24]
   16238:	ldr	r3, [fp, #-8]
   1623c:	ldr	r2, [fp, #-12]
   16240:	str	r2, [r3, #28]
   16244:	ldr	r3, [fp, #-8]
   16248:	ldr	r3, [r3, #8]
   1624c:	str	r3, [fp, #-8]
   16250:	ldr	r3, [fp, #-8]
   16254:	cmp	r3, #0
   16258:	bne	161f4 <__assert_fail@plt+0x4ef8>
   1625c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16260:	str	r3, [fp, #-8]
   16264:	b	162e0 <__assert_fail@plt+0x4fe4>
   16268:	ldr	r3, [fp, #-8]
   1626c:	ldr	r2, [r3, #24]
   16270:	ldr	r3, [fp, #-8]
   16274:	add	r3, r3, #168	; 0xa8
   16278:	cmp	r2, r3
   1627c:	beq	162ac <__assert_fail@plt+0x4fb0>
   16280:	ldr	r3, [fp, #-8]
   16284:	ldr	r3, [r3, #24]
   16288:	mov	r2, r3
   1628c:	ldr	r3, [fp, #-8]
   16290:	ldr	r3, [r3, #28]
   16294:	sub	r3, r2, r3
   16298:	mov	r2, r3
   1629c:	ldr	r3, [fp, #-12]
   162a0:	add	r2, r3, r2
   162a4:	ldr	r3, [fp, #-8]
   162a8:	str	r2, [r3, #24]
   162ac:	ldr	r3, [fp, #-8]
   162b0:	ldr	r2, [fp, #-12]
   162b4:	str	r2, [r3, #28]
   162b8:	ldr	r3, [fp, #-8]
   162bc:	ldr	r3, [r3, #8]
   162c0:	cmp	r3, #0
   162c4:	beq	162d4 <__assert_fail@plt+0x4fd8>
   162c8:	ldr	r3, [fp, #-8]
   162cc:	ldr	r3, [r3, #8]
   162d0:	b	162dc <__assert_fail@plt+0x4fe0>
   162d4:	ldr	r3, [fp, #-8]
   162d8:	ldr	r3, [r3, #4]
   162dc:	str	r3, [fp, #-8]
   162e0:	ldr	r3, [fp, #-8]
   162e4:	ldr	r3, [r3, #48]	; 0x30
   162e8:	cmp	r3, #0
   162ec:	bge	16268 <__assert_fail@plt+0x4f6c>
   162f0:	nop			; (mov r0, r0)
   162f4:	add	sp, fp, #0
   162f8:	pop	{fp}		; (ldr fp, [sp], #4)
   162fc:	bx	lr
   16300:	push	{fp, lr}
   16304:	add	fp, sp, #4
   16308:	sub	sp, sp, #16
   1630c:	str	r0, [fp, #-16]
   16310:	mov	r3, #0
   16314:	str	r3, [fp, #-8]
   16318:	b	16354 <__assert_fail@plt+0x5058>
   1631c:	ldr	r3, [fp, #-16]
   16320:	ldr	r3, [r3]
   16324:	mov	r0, r3
   16328:	bl	11188 <strlen@plt>
   1632c:	str	r0, [fp, #-12]
   16330:	ldr	r2, [fp, #-12]
   16334:	ldr	r3, [fp, #-8]
   16338:	cmp	r2, r3
   1633c:	bls	16348 <__assert_fail@plt+0x504c>
   16340:	ldr	r3, [fp, #-12]
   16344:	str	r3, [fp, #-8]
   16348:	ldr	r3, [fp, #-16]
   1634c:	add	r3, r3, #4
   16350:	str	r3, [fp, #-16]
   16354:	ldr	r3, [fp, #-16]
   16358:	ldr	r3, [r3]
   1635c:	cmp	r3, #0
   16360:	bne	1631c <__assert_fail@plt+0x5020>
   16364:	ldr	r3, [fp, #-8]
   16368:	add	r3, r3, #1
   1636c:	mov	r0, r3
   16370:	sub	sp, fp, #4
   16374:	pop	{fp, pc}
   16378:	push	{fp, lr}
   1637c:	add	fp, sp, #4
   16380:	sub	sp, sp, #144	; 0x90
   16384:	str	r0, [fp, #-136]	; 0xffffff78
   16388:	str	r1, [fp, #-140]	; 0xffffff74
   1638c:	str	r2, [fp, #-144]	; 0xffffff70
   16390:	str	r3, [fp, #-148]	; 0xffffff6c
   16394:	ldr	r3, [fp, #-148]	; 0xffffff6c
   16398:	cmp	r3, #0
   1639c:	beq	163c0 <__assert_fail@plt+0x50c4>
   163a0:	ldr	r1, [pc, #632]	; 16620 <__assert_fail@plt+0x5324>
   163a4:	ldr	r0, [fp, #-148]	; 0xffffff6c
   163a8:	bl	10ff0 <strcmp@plt>
   163ac:	mov	r3, r0
   163b0:	cmp	r3, #0
   163b4:	bne	163c0 <__assert_fail@plt+0x50c4>
   163b8:	mov	r3, #1
   163bc:	b	163c4 <__assert_fail@plt+0x50c8>
   163c0:	mov	r3, #0
   163c4:	strb	r3, [fp, #-13]
   163c8:	ldrb	r3, [fp, #-13]
   163cc:	and	r3, r3, #1
   163d0:	strb	r3, [fp, #-13]
   163d4:	ldr	r3, [fp, #-136]	; 0xffffff78
   163d8:	ldr	r3, [r3, #48]	; 0x30
   163dc:	and	r3, r3, #4
   163e0:	cmp	r3, #0
   163e4:	beq	16418 <__assert_fail@plt+0x511c>
   163e8:	ldr	r3, [fp, #-136]	; 0xffffff78
   163ec:	ldr	r3, [r3, #48]	; 0x30
   163f0:	and	r3, r3, #512	; 0x200
   163f4:	cmp	r3, #0
   163f8:	beq	16410 <__assert_fail@plt+0x5114>
   163fc:	ldr	r3, [fp, #-144]	; 0xffffff70
   16400:	cmp	r3, #0
   16404:	blt	16410 <__assert_fail@plt+0x5114>
   16408:	ldr	r0, [fp, #-144]	; 0xffffff70
   1640c:	bl	112c0 <close@plt>
   16410:	mov	r3, #0
   16414:	b	16614 <__assert_fail@plt+0x5318>
   16418:	ldr	r3, [fp, #-144]	; 0xffffff70
   1641c:	cmp	r3, #0
   16420:	bge	16498 <__assert_fail@plt+0x519c>
   16424:	ldrb	r3, [fp, #-13]
   16428:	cmp	r3, #0
   1642c:	beq	16498 <__assert_fail@plt+0x519c>
   16430:	ldr	r3, [fp, #-136]	; 0xffffff78
   16434:	ldr	r3, [r3, #48]	; 0x30
   16438:	and	r3, r3, #512	; 0x200
   1643c:	cmp	r3, #0
   16440:	beq	16498 <__assert_fail@plt+0x519c>
   16444:	ldr	r3, [fp, #-136]	; 0xffffff78
   16448:	add	r3, r3, #60	; 0x3c
   1644c:	mov	r0, r3
   16450:	bl	18210 <__assert_fail@plt+0x6f14>
   16454:	mov	r3, r0
   16458:	eor	r3, r3, #1
   1645c:	uxtb	r3, r3
   16460:	cmp	r3, #0
   16464:	beq	16498 <__assert_fail@plt+0x519c>
   16468:	ldr	r3, [fp, #-136]	; 0xffffff78
   1646c:	add	r3, r3, #60	; 0x3c
   16470:	mov	r0, r3
   16474:	bl	182f8 <__assert_fail@plt+0x6ffc>
   16478:	str	r0, [fp, #-20]	; 0xffffffec
   1647c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16480:	cmp	r3, #0
   16484:	blt	16498 <__assert_fail@plt+0x519c>
   16488:	ldr	r3, [fp, #-20]	; 0xffffffec
   1648c:	str	r3, [fp, #-144]	; 0xffffff70
   16490:	mov	r3, #0
   16494:	str	r3, [fp, #-148]	; 0xffffff6c
   16498:	ldr	r3, [fp, #-144]	; 0xffffff70
   1649c:	str	r3, [fp, #-12]
   164a0:	ldr	r3, [fp, #-144]	; 0xffffff70
   164a4:	cmp	r3, #0
   164a8:	bge	164d0 <__assert_fail@plt+0x51d4>
   164ac:	ldr	r1, [fp, #-148]	; 0xffffff6c
   164b0:	ldr	r0, [fp, #-136]	; 0xffffff78
   164b4:	bl	13af4 <__assert_fail@plt+0x27f8>
   164b8:	str	r0, [fp, #-12]
   164bc:	ldr	r3, [fp, #-12]
   164c0:	cmp	r3, #0
   164c4:	bge	164d0 <__assert_fail@plt+0x51d4>
   164c8:	mvn	r3, #0
   164cc:	b	16614 <__assert_fail@plt+0x5318>
   164d0:	ldr	r3, [fp, #-136]	; 0xffffff78
   164d4:	ldr	r3, [r3, #48]	; 0x30
   164d8:	and	r3, r3, #2
   164dc:	cmp	r3, #0
   164e0:	bne	16508 <__assert_fail@plt+0x520c>
   164e4:	ldr	r3, [fp, #-148]	; 0xffffff6c
   164e8:	cmp	r3, #0
   164ec:	beq	16580 <__assert_fail@plt+0x5284>
   164f0:	ldr	r1, [pc, #296]	; 16620 <__assert_fail@plt+0x5324>
   164f4:	ldr	r0, [fp, #-148]	; 0xffffff6c
   164f8:	bl	10ff0 <strcmp@plt>
   164fc:	mov	r3, r0
   16500:	cmp	r3, #0
   16504:	bne	16580 <__assert_fail@plt+0x5284>
   16508:	sub	r3, fp, #132	; 0x84
   1650c:	mov	r1, r3
   16510:	ldr	r0, [fp, #-12]
   16514:	bl	1e950 <__assert_fail@plt+0xd654>
   16518:	mov	r3, r0
   1651c:	cmp	r3, #0
   16520:	beq	16530 <__assert_fail@plt+0x5234>
   16524:	mvn	r3, #0
   16528:	str	r3, [fp, #-8]
   1652c:	b	165dc <__assert_fail@plt+0x52e0>
   16530:	ldr	r3, [fp, #-140]	; 0xffffff74
   16534:	ldrd	r0, [r3, #64]	; 0x40
   16538:	ldrd	r2, [fp, #-132]	; 0xffffff7c
   1653c:	cmp	r1, r3
   16540:	cmpeq	r0, r2
   16544:	bne	16560 <__assert_fail@plt+0x5264>
   16548:	ldr	r3, [fp, #-140]	; 0xffffff74
   1654c:	ldrd	r0, [r3, #160]	; 0xa0
   16550:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   16554:	cmp	r1, r3
   16558:	cmpeq	r0, r2
   1655c:	beq	16580 <__assert_fail@plt+0x5284>
   16560:	bl	111c4 <__errno_location@plt>
   16564:	mov	r2, r0
   16568:	mov	r3, #2
   1656c:	str	r3, [r2]
   16570:	mvn	r3, #0
   16574:	str	r3, [fp, #-8]
   16578:	nop			; (mov r0, r0)
   1657c:	b	165dc <__assert_fail@plt+0x52e0>
   16580:	ldr	r3, [fp, #-136]	; 0xffffff78
   16584:	ldr	r3, [r3, #48]	; 0x30
   16588:	and	r3, r3, #512	; 0x200
   1658c:	cmp	r3, #0
   16590:	beq	165d0 <__assert_fail@plt+0x52d4>
   16594:	ldrb	r3, [fp, #-13]
   16598:	cmp	r3, #0
   1659c:	movne	r3, #1
   165a0:	moveq	r3, #0
   165a4:	uxtb	r3, r3
   165a8:	eor	r3, r3, #1
   165ac:	uxtb	r3, r3
   165b0:	and	r3, r3, #1
   165b4:	uxtb	r3, r3
   165b8:	mov	r2, r3
   165bc:	ldr	r1, [fp, #-12]
   165c0:	ldr	r0, [fp, #-136]	; 0xffffff78
   165c4:	bl	13958 <__assert_fail@plt+0x265c>
   165c8:	mov	r3, #0
   165cc:	b	16614 <__assert_fail@plt+0x5318>
   165d0:	ldr	r0, [fp, #-12]
   165d4:	bl	1126c <fchdir@plt>
   165d8:	str	r0, [fp, #-8]
   165dc:	ldr	r3, [fp, #-144]	; 0xffffff70
   165e0:	cmp	r3, #0
   165e4:	bge	16610 <__assert_fail@plt+0x5314>
   165e8:	bl	111c4 <__errno_location@plt>
   165ec:	mov	r3, r0
   165f0:	ldr	r3, [r3]
   165f4:	str	r3, [fp, #-24]	; 0xffffffe8
   165f8:	ldr	r0, [fp, #-12]
   165fc:	bl	112c0 <close@plt>
   16600:	bl	111c4 <__errno_location@plt>
   16604:	mov	r2, r0
   16608:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1660c:	str	r3, [r2]
   16610:	ldr	r3, [fp, #-8]
   16614:	mov	r0, r3
   16618:	sub	sp, fp, #4
   1661c:	pop	{fp, pc}
   16620:	muleq	r1, r4, r8
   16624:	andeq	r0, r0, r0
   16628:	push	{fp}		; (str fp, [sp, #-4]!)
   1662c:	add	fp, sp, #0
   16630:	sub	sp, sp, #12
   16634:	str	r0, [fp, #-8]
   16638:	ldr	r3, [fp, #-8]
   1663c:	ldr	r3, [r3, #8]
   16640:	mov	r0, r3
   16644:	add	sp, fp, #0
   16648:	pop	{fp}		; (ldr fp, [sp], #4)
   1664c:	bx	lr
   16650:	push	{fp}		; (str fp, [sp, #-4]!)
   16654:	add	fp, sp, #0
   16658:	sub	sp, sp, #12
   1665c:	str	r0, [fp, #-8]
   16660:	ldr	r3, [fp, #-8]
   16664:	ldr	r3, [r3, #12]
   16668:	mov	r0, r3
   1666c:	add	sp, fp, #0
   16670:	pop	{fp}		; (ldr fp, [sp], #4)
   16674:	bx	lr
   16678:	push	{fp}		; (str fp, [sp, #-4]!)
   1667c:	add	fp, sp, #0
   16680:	sub	sp, sp, #12
   16684:	str	r0, [fp, #-8]
   16688:	ldr	r3, [fp, #-8]
   1668c:	ldr	r3, [r3, #16]
   16690:	mov	r0, r3
   16694:	add	sp, fp, #0
   16698:	pop	{fp}		; (ldr fp, [sp], #4)
   1669c:	bx	lr
   166a0:	push	{fp}		; (str fp, [sp, #-4]!)
   166a4:	add	fp, sp, #0
   166a8:	sub	sp, sp, #28
   166ac:	str	r0, [fp, #-24]	; 0xffffffe8
   166b0:	mov	r3, #0
   166b4:	str	r3, [fp, #-12]
   166b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   166bc:	ldr	r3, [r3]
   166c0:	str	r3, [fp, #-8]
   166c4:	b	16734 <__assert_fail@plt+0x5438>
   166c8:	ldr	r3, [fp, #-8]
   166cc:	ldr	r3, [r3]
   166d0:	cmp	r3, #0
   166d4:	beq	16728 <__assert_fail@plt+0x542c>
   166d8:	ldr	r3, [fp, #-8]
   166dc:	str	r3, [fp, #-16]
   166e0:	mov	r3, #1
   166e4:	str	r3, [fp, #-20]	; 0xffffffec
   166e8:	b	166f8 <__assert_fail@plt+0x53fc>
   166ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   166f0:	add	r3, r3, #1
   166f4:	str	r3, [fp, #-20]	; 0xffffffec
   166f8:	ldr	r3, [fp, #-16]
   166fc:	ldr	r3, [r3, #4]
   16700:	str	r3, [fp, #-16]
   16704:	ldr	r3, [fp, #-16]
   16708:	cmp	r3, #0
   1670c:	bne	166ec <__assert_fail@plt+0x53f0>
   16710:	ldr	r2, [fp, #-20]	; 0xffffffec
   16714:	ldr	r3, [fp, #-12]
   16718:	cmp	r2, r3
   1671c:	bls	16728 <__assert_fail@plt+0x542c>
   16720:	ldr	r3, [fp, #-20]	; 0xffffffec
   16724:	str	r3, [fp, #-12]
   16728:	ldr	r3, [fp, #-8]
   1672c:	add	r3, r3, #8
   16730:	str	r3, [fp, #-8]
   16734:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16738:	ldr	r2, [r3, #4]
   1673c:	ldr	r3, [fp, #-8]
   16740:	cmp	r2, r3
   16744:	bhi	166c8 <__assert_fail@plt+0x53cc>
   16748:	ldr	r3, [fp, #-12]
   1674c:	mov	r0, r3
   16750:	add	sp, fp, #0
   16754:	pop	{fp}		; (ldr fp, [sp], #4)
   16758:	bx	lr
   1675c:	push	{fp}		; (str fp, [sp, #-4]!)
   16760:	add	fp, sp, #0
   16764:	sub	sp, sp, #28
   16768:	str	r0, [fp, #-24]	; 0xffffffe8
   1676c:	mov	r3, #0
   16770:	str	r3, [fp, #-12]
   16774:	mov	r3, #0
   16778:	str	r3, [fp, #-16]
   1677c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16780:	ldr	r3, [r3]
   16784:	str	r3, [fp, #-8]
   16788:	b	167f0 <__assert_fail@plt+0x54f4>
   1678c:	ldr	r3, [fp, #-8]
   16790:	ldr	r3, [r3]
   16794:	cmp	r3, #0
   16798:	beq	167e4 <__assert_fail@plt+0x54e8>
   1679c:	ldr	r3, [fp, #-8]
   167a0:	str	r3, [fp, #-20]	; 0xffffffec
   167a4:	ldr	r3, [fp, #-12]
   167a8:	add	r3, r3, #1
   167ac:	str	r3, [fp, #-12]
   167b0:	ldr	r3, [fp, #-16]
   167b4:	add	r3, r3, #1
   167b8:	str	r3, [fp, #-16]
   167bc:	b	167cc <__assert_fail@plt+0x54d0>
   167c0:	ldr	r3, [fp, #-16]
   167c4:	add	r3, r3, #1
   167c8:	str	r3, [fp, #-16]
   167cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   167d0:	ldr	r3, [r3, #4]
   167d4:	str	r3, [fp, #-20]	; 0xffffffec
   167d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   167dc:	cmp	r3, #0
   167e0:	bne	167c0 <__assert_fail@plt+0x54c4>
   167e4:	ldr	r3, [fp, #-8]
   167e8:	add	r3, r3, #8
   167ec:	str	r3, [fp, #-8]
   167f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   167f4:	ldr	r2, [r3, #4]
   167f8:	ldr	r3, [fp, #-8]
   167fc:	cmp	r2, r3
   16800:	bhi	1678c <__assert_fail@plt+0x5490>
   16804:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16808:	ldr	r2, [r3, #12]
   1680c:	ldr	r3, [fp, #-12]
   16810:	cmp	r2, r3
   16814:	bne	16834 <__assert_fail@plt+0x5538>
   16818:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1681c:	ldr	r2, [r3, #16]
   16820:	ldr	r3, [fp, #-16]
   16824:	cmp	r2, r3
   16828:	bne	16834 <__assert_fail@plt+0x5538>
   1682c:	mov	r3, #1
   16830:	b	16838 <__assert_fail@plt+0x553c>
   16834:	mov	r3, #0
   16838:	mov	r0, r3
   1683c:	add	sp, fp, #0
   16840:	pop	{fp}		; (ldr fp, [sp], #4)
   16844:	bx	lr
   16848:	push	{fp, lr}
   1684c:	add	fp, sp, #4
   16850:	sub	sp, sp, #32
   16854:	str	r0, [fp, #-24]	; 0xffffffe8
   16858:	str	r1, [fp, #-28]	; 0xffffffe4
   1685c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16860:	bl	16678 <__assert_fail@plt+0x537c>
   16864:	str	r0, [fp, #-8]
   16868:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1686c:	bl	16628 <__assert_fail@plt+0x532c>
   16870:	str	r0, [fp, #-12]
   16874:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16878:	bl	16650 <__assert_fail@plt+0x5354>
   1687c:	str	r0, [fp, #-16]
   16880:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16884:	bl	166a0 <__assert_fail@plt+0x53a4>
   16888:	str	r0, [fp, #-20]	; 0xffffffec
   1688c:	ldr	r2, [fp, #-8]
   16890:	ldr	r1, [pc, #112]	; 16908 <__assert_fail@plt+0x560c>
   16894:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16898:	bl	111b8 <fprintf@plt>
   1689c:	ldr	r2, [fp, #-12]
   168a0:	ldr	r1, [pc, #100]	; 1690c <__assert_fail@plt+0x5610>
   168a4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   168a8:	bl	111b8 <fprintf@plt>
   168ac:	ldr	r3, [fp, #-16]
   168b0:	vmov	s15, r3
   168b4:	vcvt.f64.u32	d7, s15
   168b8:	vldr	d6, [pc, #64]	; 16900 <__assert_fail@plt+0x5604>
   168bc:	vmul.f64	d5, d7, d6
   168c0:	ldr	r3, [fp, #-12]
   168c4:	vmov	s15, r3
   168c8:	vcvt.f64.u32	d6, s15
   168cc:	vdiv.f64	d7, d5, d6
   168d0:	vstr	d7, [sp]
   168d4:	ldr	r2, [fp, #-16]
   168d8:	ldr	r1, [pc, #48]	; 16910 <__assert_fail@plt+0x5614>
   168dc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   168e0:	bl	111b8 <fprintf@plt>
   168e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   168e8:	ldr	r1, [pc, #36]	; 16914 <__assert_fail@plt+0x5618>
   168ec:	ldr	r0, [fp, #-28]	; 0xffffffe4
   168f0:	bl	111b8 <fprintf@plt>
   168f4:	nop			; (mov r0, r0)
   168f8:	sub	sp, fp, #4
   168fc:	pop	{fp, pc}
   16900:	andeq	r0, r0, r0
   16904:	subsmi	r0, r9, r0
   16908:	andeq	pc, r1, ip, lsr #17
   1690c:	andeq	pc, r1, r4, asr #17
   16910:	ldrdeq	pc, [r1], -ip
   16914:	andeq	pc, r1, r0, lsl #18
   16918:	push	{fp, lr}
   1691c:	add	fp, sp, #4
   16920:	sub	sp, sp, #16
   16924:	str	r0, [fp, #-16]
   16928:	str	r1, [fp, #-20]	; 0xffffffec
   1692c:	ldr	r3, [fp, #-16]
   16930:	ldr	r3, [r3, #24]
   16934:	ldr	r2, [fp, #-16]
   16938:	ldr	r2, [r2, #8]
   1693c:	mov	r1, r2
   16940:	ldr	r0, [fp, #-20]	; 0xffffffec
   16944:	blx	r3
   16948:	str	r0, [fp, #-8]
   1694c:	ldr	r3, [fp, #-16]
   16950:	ldr	r2, [r3, #8]
   16954:	ldr	r3, [fp, #-8]
   16958:	cmp	r2, r3
   1695c:	bhi	16964 <__assert_fail@plt+0x5668>
   16960:	bl	112b4 <abort@plt>
   16964:	ldr	r3, [fp, #-16]
   16968:	ldr	r2, [r3]
   1696c:	ldr	r3, [fp, #-8]
   16970:	lsl	r3, r3, #3
   16974:	add	r3, r2, r3
   16978:	mov	r0, r3
   1697c:	sub	sp, fp, #4
   16980:	pop	{fp, pc}
   16984:	push	{fp, lr}
   16988:	add	fp, sp, #4
   1698c:	sub	sp, sp, #16
   16990:	str	r0, [fp, #-16]
   16994:	str	r1, [fp, #-20]	; 0xffffffec
   16998:	ldr	r1, [fp, #-20]	; 0xffffffec
   1699c:	ldr	r0, [fp, #-16]
   169a0:	bl	16918 <__assert_fail@plt+0x561c>
   169a4:	str	r0, [fp, #-12]
   169a8:	ldr	r3, [fp, #-12]
   169ac:	ldr	r3, [r3]
   169b0:	cmp	r3, #0
   169b4:	bne	169c0 <__assert_fail@plt+0x56c4>
   169b8:	mov	r3, #0
   169bc:	b	16a30 <__assert_fail@plt+0x5734>
   169c0:	ldr	r3, [fp, #-12]
   169c4:	str	r3, [fp, #-8]
   169c8:	b	16a20 <__assert_fail@plt+0x5724>
   169cc:	ldr	r3, [fp, #-8]
   169d0:	ldr	r2, [r3]
   169d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   169d8:	cmp	r2, r3
   169dc:	beq	16a08 <__assert_fail@plt+0x570c>
   169e0:	ldr	r3, [fp, #-16]
   169e4:	ldr	r3, [r3, #28]
   169e8:	ldr	r2, [fp, #-8]
   169ec:	ldr	r2, [r2]
   169f0:	mov	r1, r2
   169f4:	ldr	r0, [fp, #-20]	; 0xffffffec
   169f8:	blx	r3
   169fc:	mov	r3, r0
   16a00:	cmp	r3, #0
   16a04:	beq	16a14 <__assert_fail@plt+0x5718>
   16a08:	ldr	r3, [fp, #-8]
   16a0c:	ldr	r3, [r3]
   16a10:	b	16a30 <__assert_fail@plt+0x5734>
   16a14:	ldr	r3, [fp, #-8]
   16a18:	ldr	r3, [r3, #4]
   16a1c:	str	r3, [fp, #-8]
   16a20:	ldr	r3, [fp, #-8]
   16a24:	cmp	r3, #0
   16a28:	bne	169cc <__assert_fail@plt+0x56d0>
   16a2c:	mov	r3, #0
   16a30:	mov	r0, r3
   16a34:	sub	sp, fp, #4
   16a38:	pop	{fp, pc}
   16a3c:	push	{fp, lr}
   16a40:	add	fp, sp, #4
   16a44:	sub	sp, sp, #16
   16a48:	str	r0, [fp, #-16]
   16a4c:	ldr	r3, [fp, #-16]
   16a50:	ldr	r3, [r3, #16]
   16a54:	cmp	r3, #0
   16a58:	bne	16a64 <__assert_fail@plt+0x5768>
   16a5c:	mov	r3, #0
   16a60:	b	16ab4 <__assert_fail@plt+0x57b8>
   16a64:	ldr	r3, [fp, #-16]
   16a68:	ldr	r3, [r3]
   16a6c:	str	r3, [fp, #-8]
   16a70:	ldr	r3, [fp, #-16]
   16a74:	ldr	r2, [r3, #4]
   16a78:	ldr	r3, [fp, #-8]
   16a7c:	cmp	r2, r3
   16a80:	bhi	16a88 <__assert_fail@plt+0x578c>
   16a84:	bl	112b4 <abort@plt>
   16a88:	ldr	r3, [fp, #-8]
   16a8c:	ldr	r3, [r3]
   16a90:	cmp	r3, #0
   16a94:	beq	16aa4 <__assert_fail@plt+0x57a8>
   16a98:	ldr	r3, [fp, #-8]
   16a9c:	ldr	r3, [r3]
   16aa0:	b	16ab4 <__assert_fail@plt+0x57b8>
   16aa4:	ldr	r3, [fp, #-8]
   16aa8:	add	r3, r3, #8
   16aac:	str	r3, [fp, #-8]
   16ab0:	b	16a70 <__assert_fail@plt+0x5774>
   16ab4:	mov	r0, r3
   16ab8:	sub	sp, fp, #4
   16abc:	pop	{fp, pc}
   16ac0:	push	{fp, lr}
   16ac4:	add	fp, sp, #4
   16ac8:	sub	sp, sp, #16
   16acc:	str	r0, [fp, #-16]
   16ad0:	str	r1, [fp, #-20]	; 0xffffffec
   16ad4:	ldr	r1, [fp, #-20]	; 0xffffffec
   16ad8:	ldr	r0, [fp, #-16]
   16adc:	bl	16918 <__assert_fail@plt+0x561c>
   16ae0:	str	r0, [fp, #-8]
   16ae4:	ldr	r3, [fp, #-8]
   16ae8:	str	r3, [fp, #-12]
   16aec:	ldr	r3, [fp, #-12]
   16af0:	ldr	r2, [r3]
   16af4:	ldr	r3, [fp, #-20]	; 0xffffffec
   16af8:	cmp	r2, r3
   16afc:	bne	16b20 <__assert_fail@plt+0x5824>
   16b00:	ldr	r3, [fp, #-12]
   16b04:	ldr	r3, [r3, #4]
   16b08:	cmp	r3, #0
   16b0c:	beq	16b20 <__assert_fail@plt+0x5824>
   16b10:	ldr	r3, [fp, #-12]
   16b14:	ldr	r3, [r3, #4]
   16b18:	ldr	r3, [r3]
   16b1c:	b	16b7c <__assert_fail@plt+0x5880>
   16b20:	ldr	r3, [fp, #-12]
   16b24:	ldr	r3, [r3, #4]
   16b28:	str	r3, [fp, #-12]
   16b2c:	ldr	r3, [fp, #-12]
   16b30:	cmp	r3, #0
   16b34:	bne	16aec <__assert_fail@plt+0x57f0>
   16b38:	b	16b58 <__assert_fail@plt+0x585c>
   16b3c:	ldr	r3, [fp, #-8]
   16b40:	ldr	r3, [r3]
   16b44:	cmp	r3, #0
   16b48:	beq	16b58 <__assert_fail@plt+0x585c>
   16b4c:	ldr	r3, [fp, #-8]
   16b50:	ldr	r3, [r3]
   16b54:	b	16b7c <__assert_fail@plt+0x5880>
   16b58:	ldr	r3, [fp, #-8]
   16b5c:	add	r3, r3, #8
   16b60:	str	r3, [fp, #-8]
   16b64:	ldr	r3, [fp, #-16]
   16b68:	ldr	r3, [r3, #4]
   16b6c:	ldr	r2, [fp, #-8]
   16b70:	cmp	r2, r3
   16b74:	bcc	16b3c <__assert_fail@plt+0x5840>
   16b78:	mov	r3, #0
   16b7c:	mov	r0, r3
   16b80:	sub	sp, fp, #4
   16b84:	pop	{fp, pc}
   16b88:	push	{fp}		; (str fp, [sp, #-4]!)
   16b8c:	add	fp, sp, #0
   16b90:	sub	sp, sp, #36	; 0x24
   16b94:	str	r0, [fp, #-24]	; 0xffffffe8
   16b98:	str	r1, [fp, #-28]	; 0xffffffe4
   16b9c:	str	r2, [fp, #-32]	; 0xffffffe0
   16ba0:	mov	r3, #0
   16ba4:	str	r3, [fp, #-8]
   16ba8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16bac:	ldr	r3, [r3]
   16bb0:	str	r3, [fp, #-12]
   16bb4:	b	16c34 <__assert_fail@plt+0x5938>
   16bb8:	ldr	r3, [fp, #-12]
   16bbc:	ldr	r3, [r3]
   16bc0:	cmp	r3, #0
   16bc4:	beq	16c28 <__assert_fail@plt+0x592c>
   16bc8:	ldr	r3, [fp, #-12]
   16bcc:	str	r3, [fp, #-16]
   16bd0:	b	16c1c <__assert_fail@plt+0x5920>
   16bd4:	ldr	r2, [fp, #-8]
   16bd8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16bdc:	cmp	r2, r3
   16be0:	bcc	16bec <__assert_fail@plt+0x58f0>
   16be4:	ldr	r3, [fp, #-8]
   16be8:	b	16c4c <__assert_fail@plt+0x5950>
   16bec:	ldr	r3, [fp, #-8]
   16bf0:	add	r2, r3, #1
   16bf4:	str	r2, [fp, #-8]
   16bf8:	lsl	r3, r3, #2
   16bfc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16c00:	add	r3, r2, r3
   16c04:	ldr	r2, [fp, #-16]
   16c08:	ldr	r2, [r2]
   16c0c:	str	r2, [r3]
   16c10:	ldr	r3, [fp, #-16]
   16c14:	ldr	r3, [r3, #4]
   16c18:	str	r3, [fp, #-16]
   16c1c:	ldr	r3, [fp, #-16]
   16c20:	cmp	r3, #0
   16c24:	bne	16bd4 <__assert_fail@plt+0x58d8>
   16c28:	ldr	r3, [fp, #-12]
   16c2c:	add	r3, r3, #8
   16c30:	str	r3, [fp, #-12]
   16c34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c38:	ldr	r2, [r3, #4]
   16c3c:	ldr	r3, [fp, #-12]
   16c40:	cmp	r2, r3
   16c44:	bhi	16bb8 <__assert_fail@plt+0x58bc>
   16c48:	ldr	r3, [fp, #-8]
   16c4c:	mov	r0, r3
   16c50:	add	sp, fp, #0
   16c54:	pop	{fp}		; (ldr fp, [sp], #4)
   16c58:	bx	lr
   16c5c:	push	{fp, lr}
   16c60:	add	fp, sp, #4
   16c64:	sub	sp, sp, #32
   16c68:	str	r0, [fp, #-24]	; 0xffffffe8
   16c6c:	str	r1, [fp, #-28]	; 0xffffffe4
   16c70:	str	r2, [fp, #-32]	; 0xffffffe0
   16c74:	mov	r3, #0
   16c78:	str	r3, [fp, #-8]
   16c7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c80:	ldr	r3, [r3]
   16c84:	str	r3, [fp, #-12]
   16c88:	b	16d0c <__assert_fail@plt+0x5a10>
   16c8c:	ldr	r3, [fp, #-12]
   16c90:	ldr	r3, [r3]
   16c94:	cmp	r3, #0
   16c98:	beq	16d00 <__assert_fail@plt+0x5a04>
   16c9c:	ldr	r3, [fp, #-12]
   16ca0:	str	r3, [fp, #-16]
   16ca4:	b	16cf4 <__assert_fail@plt+0x59f8>
   16ca8:	ldr	r3, [fp, #-16]
   16cac:	ldr	r2, [r3]
   16cb0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16cb4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16cb8:	mov	r0, r2
   16cbc:	blx	r3
   16cc0:	mov	r3, r0
   16cc4:	eor	r3, r3, #1
   16cc8:	uxtb	r3, r3
   16ccc:	cmp	r3, #0
   16cd0:	beq	16cdc <__assert_fail@plt+0x59e0>
   16cd4:	ldr	r3, [fp, #-8]
   16cd8:	b	16d24 <__assert_fail@plt+0x5a28>
   16cdc:	ldr	r3, [fp, #-8]
   16ce0:	add	r3, r3, #1
   16ce4:	str	r3, [fp, #-8]
   16ce8:	ldr	r3, [fp, #-16]
   16cec:	ldr	r3, [r3, #4]
   16cf0:	str	r3, [fp, #-16]
   16cf4:	ldr	r3, [fp, #-16]
   16cf8:	cmp	r3, #0
   16cfc:	bne	16ca8 <__assert_fail@plt+0x59ac>
   16d00:	ldr	r3, [fp, #-12]
   16d04:	add	r3, r3, #8
   16d08:	str	r3, [fp, #-12]
   16d0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d10:	ldr	r2, [r3, #4]
   16d14:	ldr	r3, [fp, #-12]
   16d18:	cmp	r2, r3
   16d1c:	bhi	16c8c <__assert_fail@plt+0x5990>
   16d20:	ldr	r3, [fp, #-8]
   16d24:	mov	r0, r3
   16d28:	sub	sp, fp, #4
   16d2c:	pop	{fp, pc}
   16d30:	push	{fp, lr}
   16d34:	add	fp, sp, #4
   16d38:	sub	sp, sp, #16
   16d3c:	str	r0, [fp, #-16]
   16d40:	str	r1, [fp, #-20]	; 0xffffffec
   16d44:	mov	r3, #0
   16d48:	str	r3, [fp, #-8]
   16d4c:	b	16d88 <__assert_fail@plt+0x5a8c>
   16d50:	ldr	r2, [fp, #-8]
   16d54:	mov	r3, r2
   16d58:	lsl	r3, r3, #5
   16d5c:	sub	r2, r3, r2
   16d60:	ldrb	r3, [fp, #-9]
   16d64:	add	r3, r2, r3
   16d68:	ldr	r1, [fp, #-20]	; 0xffffffec
   16d6c:	mov	r0, r3
   16d70:	bl	1e4f0 <__assert_fail@plt+0xd1f4>
   16d74:	mov	r3, r1
   16d78:	str	r3, [fp, #-8]
   16d7c:	ldr	r3, [fp, #-16]
   16d80:	add	r3, r3, #1
   16d84:	str	r3, [fp, #-16]
   16d88:	ldr	r3, [fp, #-16]
   16d8c:	ldrb	r3, [r3]
   16d90:	strb	r3, [fp, #-9]
   16d94:	ldrb	r3, [fp, #-9]
   16d98:	cmp	r3, #0
   16d9c:	bne	16d50 <__assert_fail@plt+0x5a54>
   16da0:	ldr	r3, [fp, #-8]
   16da4:	mov	r0, r3
   16da8:	sub	sp, fp, #4
   16dac:	pop	{fp, pc}
   16db0:	push	{fp, lr}
   16db4:	add	fp, sp, #4
   16db8:	sub	sp, sp, #16
   16dbc:	str	r0, [fp, #-16]
   16dc0:	mov	r3, #3
   16dc4:	str	r3, [fp, #-8]
   16dc8:	ldr	r3, [fp, #-8]
   16dcc:	ldr	r2, [fp, #-8]
   16dd0:	mul	r3, r2, r3
   16dd4:	str	r3, [fp, #-12]
   16dd8:	b	16e08 <__assert_fail@plt+0x5b0c>
   16ddc:	ldr	r3, [fp, #-8]
   16de0:	add	r3, r3, #1
   16de4:	str	r3, [fp, #-8]
   16de8:	ldr	r3, [fp, #-8]
   16dec:	lsl	r3, r3, #2
   16df0:	ldr	r2, [fp, #-12]
   16df4:	add	r3, r2, r3
   16df8:	str	r3, [fp, #-12]
   16dfc:	ldr	r3, [fp, #-8]
   16e00:	add	r3, r3, #1
   16e04:	str	r3, [fp, #-8]
   16e08:	ldr	r2, [fp, #-12]
   16e0c:	ldr	r3, [fp, #-16]
   16e10:	cmp	r2, r3
   16e14:	bcs	16e34 <__assert_fail@plt+0x5b38>
   16e18:	ldr	r3, [fp, #-16]
   16e1c:	ldr	r1, [fp, #-8]
   16e20:	mov	r0, r3
   16e24:	bl	1e4f0 <__assert_fail@plt+0xd1f4>
   16e28:	mov	r3, r1
   16e2c:	cmp	r3, #0
   16e30:	bne	16ddc <__assert_fail@plt+0x5ae0>
   16e34:	ldr	r3, [fp, #-16]
   16e38:	ldr	r1, [fp, #-8]
   16e3c:	mov	r0, r3
   16e40:	bl	1e4f0 <__assert_fail@plt+0xd1f4>
   16e44:	mov	r3, r1
   16e48:	cmp	r3, #0
   16e4c:	movne	r3, #1
   16e50:	moveq	r3, #0
   16e54:	uxtb	r3, r3
   16e58:	mov	r0, r3
   16e5c:	sub	sp, fp, #4
   16e60:	pop	{fp, pc}
   16e64:	push	{fp, lr}
   16e68:	add	fp, sp, #4
   16e6c:	sub	sp, sp, #8
   16e70:	str	r0, [fp, #-8]
   16e74:	ldr	r3, [fp, #-8]
   16e78:	cmp	r3, #9
   16e7c:	bhi	16e88 <__assert_fail@plt+0x5b8c>
   16e80:	mov	r3, #10
   16e84:	str	r3, [fp, #-8]
   16e88:	ldr	r3, [fp, #-8]
   16e8c:	orr	r3, r3, #1
   16e90:	str	r3, [fp, #-8]
   16e94:	b	16ea4 <__assert_fail@plt+0x5ba8>
   16e98:	ldr	r3, [fp, #-8]
   16e9c:	add	r3, r3, #2
   16ea0:	str	r3, [fp, #-8]
   16ea4:	ldr	r3, [fp, #-8]
   16ea8:	cmn	r3, #1
   16eac:	beq	16ecc <__assert_fail@plt+0x5bd0>
   16eb0:	ldr	r0, [fp, #-8]
   16eb4:	bl	16db0 <__assert_fail@plt+0x5ab4>
   16eb8:	mov	r3, r0
   16ebc:	eor	r3, r3, #1
   16ec0:	uxtb	r3, r3
   16ec4:	cmp	r3, #0
   16ec8:	bne	16e98 <__assert_fail@plt+0x5b9c>
   16ecc:	ldr	r3, [fp, #-8]
   16ed0:	mov	r0, r3
   16ed4:	sub	sp, fp, #4
   16ed8:	pop	{fp, pc}
   16edc:	push	{fp, lr}
   16ee0:	add	fp, sp, #4
   16ee4:	sub	sp, sp, #8
   16ee8:	str	r0, [fp, #-8]
   16eec:	ldr	r3, [fp, #-8]
   16ef0:	ldr	r2, [pc, #32]	; 16f18 <__assert_fail@plt+0x5c1c>
   16ef4:	mov	ip, r3
   16ef8:	mov	lr, r2
   16efc:	ldm	lr!, {r0, r1, r2, r3}
   16f00:	stmia	ip!, {r0, r1, r2, r3}
   16f04:	ldr	r3, [lr]
   16f08:	str	r3, [ip]
   16f0c:	nop			; (mov r0, r0)
   16f10:	sub	sp, fp, #4
   16f14:	pop	{fp, pc}
   16f18:	muleq	r1, r8, r8
   16f1c:	push	{fp, lr}
   16f20:	add	fp, sp, #4
   16f24:	sub	sp, sp, #16
   16f28:	str	r0, [fp, #-16]
   16f2c:	str	r1, [fp, #-20]	; 0xffffffec
   16f30:	ldr	r3, [fp, #-16]
   16f34:	mov	r1, #3
   16f38:	mov	r0, r3
   16f3c:	bl	1cdd0 <__assert_fail@plt+0xbad4>
   16f40:	str	r0, [fp, #-8]
   16f44:	ldr	r3, [fp, #-8]
   16f48:	ldr	r1, [fp, #-20]	; 0xffffffec
   16f4c:	mov	r0, r3
   16f50:	bl	1e4f0 <__assert_fail@plt+0xd1f4>
   16f54:	mov	r3, r1
   16f58:	mov	r0, r3
   16f5c:	sub	sp, fp, #4
   16f60:	pop	{fp, pc}
   16f64:	push	{fp}		; (str fp, [sp, #-4]!)
   16f68:	add	fp, sp, #0
   16f6c:	sub	sp, sp, #12
   16f70:	str	r0, [fp, #-8]
   16f74:	str	r1, [fp, #-12]
   16f78:	ldr	r2, [fp, #-8]
   16f7c:	ldr	r3, [fp, #-12]
   16f80:	cmp	r2, r3
   16f84:	moveq	r3, #1
   16f88:	movne	r3, #0
   16f8c:	uxtb	r3, r3
   16f90:	mov	r0, r3
   16f94:	add	sp, fp, #0
   16f98:	pop	{fp}		; (ldr fp, [sp], #4)
   16f9c:	bx	lr
   16fa0:	push	{fp}		; (str fp, [sp, #-4]!)
   16fa4:	add	fp, sp, #0
   16fa8:	sub	sp, sp, #20
   16fac:	str	r0, [fp, #-16]
   16fb0:	ldr	r3, [fp, #-16]
   16fb4:	ldr	r3, [r3, #20]
   16fb8:	str	r3, [fp, #-8]
   16fbc:	ldr	r3, [fp, #-8]
   16fc0:	ldr	r2, [pc, #268]	; 170d4 <__assert_fail@plt+0x5dd8>
   16fc4:	cmp	r3, r2
   16fc8:	bne	16fd4 <__assert_fail@plt+0x5cd8>
   16fcc:	mov	r3, #1
   16fd0:	b	170c0 <__assert_fail@plt+0x5dc4>
   16fd4:	ldr	r3, [pc, #252]	; 170d8 <__assert_fail@plt+0x5ddc>
   16fd8:	str	r3, [fp, #-12]
   16fdc:	ldr	r3, [fp, #-8]
   16fe0:	vldr	s14, [r3, #8]
   16fe4:	vldr	s15, [fp, #-12]
   16fe8:	vcmpe.f32	s14, s15
   16fec:	vmrs	APSR_nzcv, fpscr
   16ff0:	ble	170b0 <__assert_fail@plt+0x5db4>
   16ff4:	ldr	r3, [fp, #-8]
   16ff8:	vldr	s14, [r3, #8]
   16ffc:	vldr	s13, [pc, #204]	; 170d0 <__assert_fail@plt+0x5dd4>
   17000:	vldr	s15, [fp, #-12]
   17004:	vsub.f32	s15, s13, s15
   17008:	vcmpe.f32	s14, s15
   1700c:	vmrs	APSR_nzcv, fpscr
   17010:	bpl	170b0 <__assert_fail@plt+0x5db4>
   17014:	vldr	s15, [fp, #-12]
   17018:	vldr	s14, [pc, #176]	; 170d0 <__assert_fail@plt+0x5dd4>
   1701c:	vadd.f32	s14, s15, s14
   17020:	ldr	r3, [fp, #-8]
   17024:	vldr	s15, [r3, #12]
   17028:	vcmpe.f32	s14, s15
   1702c:	vmrs	APSR_nzcv, fpscr
   17030:	bpl	170b0 <__assert_fail@plt+0x5db4>
   17034:	ldr	r3, [fp, #-8]
   17038:	vldr	s15, [r3]
   1703c:	vcmpe.f32	s15, #0.0
   17040:	vmrs	APSR_nzcv, fpscr
   17044:	blt	170b0 <__assert_fail@plt+0x5db4>
   17048:	ldr	r3, [fp, #-8]
   1704c:	vldr	s14, [r3]
   17050:	vldr	s15, [fp, #-12]
   17054:	vadd.f32	s14, s14, s15
   17058:	ldr	r3, [fp, #-8]
   1705c:	vldr	s15, [r3, #4]
   17060:	vcmpe.f32	s14, s15
   17064:	vmrs	APSR_nzcv, fpscr
   17068:	bpl	170b0 <__assert_fail@plt+0x5db4>
   1706c:	ldr	r3, [fp, #-8]
   17070:	vldr	s15, [r3, #4]
   17074:	vldr	s14, [pc, #84]	; 170d0 <__assert_fail@plt+0x5dd4>
   17078:	vcmpe.f32	s15, s14
   1707c:	vmrs	APSR_nzcv, fpscr
   17080:	bhi	170b0 <__assert_fail@plt+0x5db4>
   17084:	ldr	r3, [fp, #-8]
   17088:	vldr	s14, [r3]
   1708c:	vldr	s15, [fp, #-12]
   17090:	vadd.f32	s14, s14, s15
   17094:	ldr	r3, [fp, #-8]
   17098:	vldr	s15, [r3, #8]
   1709c:	vcmpe.f32	s14, s15
   170a0:	vmrs	APSR_nzcv, fpscr
   170a4:	bpl	170b0 <__assert_fail@plt+0x5db4>
   170a8:	mov	r3, #1
   170ac:	b	170c0 <__assert_fail@plt+0x5dc4>
   170b0:	ldr	r3, [fp, #-16]
   170b4:	ldr	r2, [pc, #24]	; 170d4 <__assert_fail@plt+0x5dd8>
   170b8:	str	r2, [r3, #20]
   170bc:	mov	r3, #0
   170c0:	mov	r0, r3
   170c4:	add	sp, fp, #0
   170c8:	pop	{fp}		; (ldr fp, [sp], #4)
   170cc:	bx	lr
   170d0:	svccc	0x00800000
   170d4:	muleq	r1, r8, r8
   170d8:	stclcc	12, cr12, [ip, #820]	; 0x334
   170dc:	push	{r4, r5, r6, r7, fp, lr}
   170e0:	add	fp, sp, #20
   170e4:	sub	sp, sp, #16
   170e8:	str	r0, [fp, #-32]	; 0xffffffe0
   170ec:	str	r1, [fp, #-36]	; 0xffffffdc
   170f0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   170f4:	ldrb	r3, [r3, #16]
   170f8:	eor	r3, r3, #1
   170fc:	uxtb	r3, r3
   17100:	cmp	r3, #0
   17104:	beq	17150 <__assert_fail@plt+0x5e54>
   17108:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1710c:	vmov	s15, r3
   17110:	vcvt.f32.u32	s13, s15
   17114:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17118:	vldr	s14, [r3, #8]
   1711c:	vdiv.f32	s15, s13, s14
   17120:	vstr	s15, [fp, #-24]	; 0xffffffe8
   17124:	vldr	s15, [fp, #-24]	; 0xffffffe8
   17128:	vldr	s14, [pc, #156]	; 171cc <__assert_fail@plt+0x5ed0>
   1712c:	vcmpe.f32	s15, s14
   17130:	vmrs	APSR_nzcv, fpscr
   17134:	blt	17140 <__assert_fail@plt+0x5e44>
   17138:	mov	r3, #0
   1713c:	b	171c0 <__assert_fail@plt+0x5ec4>
   17140:	vldr	s15, [fp, #-24]	; 0xffffffe8
   17144:	vcvt.u32.f32	s15, s15
   17148:	vmov	r3, s15
   1714c:	str	r3, [fp, #-32]	; 0xffffffe0
   17150:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17154:	bl	16e64 <__assert_fail@plt+0x5b68>
   17158:	str	r0, [fp, #-32]	; 0xffffffe0
   1715c:	mov	r1, #0
   17160:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17164:	mov	r2, r3
   17168:	mov	r3, #0
   1716c:	lsl	r5, r3, #2
   17170:	orr	r5, r5, r2, lsr #30
   17174:	lsl	r4, r2, #2
   17178:	mov	r6, r5
   1717c:	mov	r7, #0
   17180:	cmp	r6, #0
   17184:	beq	1718c <__assert_fail@plt+0x5e90>
   17188:	mov	r1, #1
   1718c:	cmp	r4, #0
   17190:	bge	17198 <__assert_fail@plt+0x5e9c>
   17194:	mov	r1, #1
   17198:	mov	r3, r4
   1719c:	str	r3, [fp, #-28]	; 0xffffffe4
   171a0:	mov	r3, r1
   171a4:	and	r3, r3, #1
   171a8:	uxtb	r3, r3
   171ac:	cmp	r3, #0
   171b0:	beq	171bc <__assert_fail@plt+0x5ec0>
   171b4:	mov	r3, #0
   171b8:	b	171c0 <__assert_fail@plt+0x5ec4>
   171bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   171c0:	mov	r0, r3
   171c4:	sub	sp, fp, #20
   171c8:	pop	{r4, r5, r6, r7, fp, pc}
   171cc:	svcmi	0x00800000
   171d0:	push	{fp, lr}
   171d4:	add	fp, sp, #4
   171d8:	sub	sp, sp, #24
   171dc:	str	r0, [fp, #-16]
   171e0:	str	r1, [fp, #-20]	; 0xffffffec
   171e4:	str	r2, [fp, #-24]	; 0xffffffe8
   171e8:	str	r3, [fp, #-28]	; 0xffffffe4
   171ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171f0:	cmp	r3, #0
   171f4:	bne	17200 <__assert_fail@plt+0x5f04>
   171f8:	ldr	r3, [pc, #364]	; 1736c <__assert_fail@plt+0x6070>
   171fc:	str	r3, [fp, #-24]	; 0xffffffe8
   17200:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17204:	cmp	r3, #0
   17208:	bne	17214 <__assert_fail@plt+0x5f18>
   1720c:	ldr	r3, [pc, #348]	; 17370 <__assert_fail@plt+0x6074>
   17210:	str	r3, [fp, #-28]	; 0xffffffe4
   17214:	mov	r0, #40	; 0x28
   17218:	bl	1cac8 <__assert_fail@plt+0xb7cc>
   1721c:	mov	r3, r0
   17220:	str	r3, [fp, #-8]
   17224:	ldr	r3, [fp, #-8]
   17228:	cmp	r3, #0
   1722c:	bne	17238 <__assert_fail@plt+0x5f3c>
   17230:	mov	r3, #0
   17234:	b	17360 <__assert_fail@plt+0x6064>
   17238:	ldr	r3, [fp, #-20]	; 0xffffffec
   1723c:	cmp	r3, #0
   17240:	bne	1724c <__assert_fail@plt+0x5f50>
   17244:	ldr	r3, [pc, #296]	; 17374 <__assert_fail@plt+0x6078>
   17248:	str	r3, [fp, #-20]	; 0xffffffec
   1724c:	ldr	r3, [fp, #-8]
   17250:	ldr	r2, [fp, #-20]	; 0xffffffec
   17254:	str	r2, [r3, #20]
   17258:	ldr	r0, [fp, #-8]
   1725c:	bl	16fa0 <__assert_fail@plt+0x5ca4>
   17260:	mov	r3, r0
   17264:	eor	r3, r3, #1
   17268:	uxtb	r3, r3
   1726c:	cmp	r3, #0
   17270:	bne	17340 <__assert_fail@plt+0x6044>
   17274:	ldr	r1, [fp, #-20]	; 0xffffffec
   17278:	ldr	r0, [fp, #-16]
   1727c:	bl	170dc <__assert_fail@plt+0x5de0>
   17280:	mov	r2, r0
   17284:	ldr	r3, [fp, #-8]
   17288:	str	r2, [r3, #8]
   1728c:	ldr	r3, [fp, #-8]
   17290:	ldr	r3, [r3, #8]
   17294:	cmp	r3, #0
   17298:	beq	17348 <__assert_fail@plt+0x604c>
   1729c:	ldr	r3, [fp, #-8]
   172a0:	ldr	r3, [r3, #8]
   172a4:	mov	r1, #8
   172a8:	mov	r0, r3
   172ac:	bl	1ca04 <__assert_fail@plt+0xb708>
   172b0:	mov	r3, r0
   172b4:	mov	r2, r3
   172b8:	ldr	r3, [fp, #-8]
   172bc:	str	r2, [r3]
   172c0:	ldr	r3, [fp, #-8]
   172c4:	ldr	r3, [r3]
   172c8:	cmp	r3, #0
   172cc:	beq	17350 <__assert_fail@plt+0x6054>
   172d0:	ldr	r3, [fp, #-8]
   172d4:	ldr	r2, [r3]
   172d8:	ldr	r3, [fp, #-8]
   172dc:	ldr	r3, [r3, #8]
   172e0:	lsl	r3, r3, #3
   172e4:	add	r2, r2, r3
   172e8:	ldr	r3, [fp, #-8]
   172ec:	str	r2, [r3, #4]
   172f0:	ldr	r3, [fp, #-8]
   172f4:	mov	r2, #0
   172f8:	str	r2, [r3, #12]
   172fc:	ldr	r3, [fp, #-8]
   17300:	mov	r2, #0
   17304:	str	r2, [r3, #16]
   17308:	ldr	r3, [fp, #-8]
   1730c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17310:	str	r2, [r3, #24]
   17314:	ldr	r3, [fp, #-8]
   17318:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1731c:	str	r2, [r3, #28]
   17320:	ldr	r3, [fp, #-8]
   17324:	ldr	r2, [fp, #4]
   17328:	str	r2, [r3, #32]
   1732c:	ldr	r3, [fp, #-8]
   17330:	mov	r2, #0
   17334:	str	r2, [r3, #36]	; 0x24
   17338:	ldr	r3, [fp, #-8]
   1733c:	b	17360 <__assert_fail@plt+0x6064>
   17340:	nop			; (mov r0, r0)
   17344:	b	17354 <__assert_fail@plt+0x6058>
   17348:	nop			; (mov r0, r0)
   1734c:	b	17354 <__assert_fail@plt+0x6058>
   17350:	nop			; (mov r0, r0)
   17354:	ldr	r0, [fp, #-8]
   17358:	bl	13394 <__assert_fail@plt+0x2098>
   1735c:	mov	r3, #0
   17360:	mov	r0, r3
   17364:	sub	sp, fp, #4
   17368:	pop	{fp, pc}
   1736c:	andeq	r6, r1, ip, lsl pc
   17370:	andeq	r6, r1, r4, ror #30
   17374:	muleq	r1, r8, r8
   17378:	push	{fp, lr}
   1737c:	add	fp, sp, #4
   17380:	sub	sp, sp, #24
   17384:	str	r0, [fp, #-24]	; 0xffffffe8
   17388:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1738c:	ldr	r3, [r3]
   17390:	str	r3, [fp, #-8]
   17394:	b	17474 <__assert_fail@plt+0x6178>
   17398:	ldr	r3, [fp, #-8]
   1739c:	ldr	r3, [r3]
   173a0:	cmp	r3, #0
   173a4:	beq	17468 <__assert_fail@plt+0x616c>
   173a8:	ldr	r3, [fp, #-8]
   173ac:	ldr	r3, [r3, #4]
   173b0:	str	r3, [fp, #-12]
   173b4:	b	1741c <__assert_fail@plt+0x6120>
   173b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   173bc:	ldr	r3, [r3, #32]
   173c0:	cmp	r3, #0
   173c4:	beq	173e0 <__assert_fail@plt+0x60e4>
   173c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   173cc:	ldr	r3, [r3, #32]
   173d0:	ldr	r2, [fp, #-12]
   173d4:	ldr	r2, [r2]
   173d8:	mov	r0, r2
   173dc:	blx	r3
   173e0:	ldr	r3, [fp, #-12]
   173e4:	mov	r2, #0
   173e8:	str	r2, [r3]
   173ec:	ldr	r3, [fp, #-12]
   173f0:	ldr	r3, [r3, #4]
   173f4:	str	r3, [fp, #-16]
   173f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   173fc:	ldr	r2, [r3, #36]	; 0x24
   17400:	ldr	r3, [fp, #-12]
   17404:	str	r2, [r3, #4]
   17408:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1740c:	ldr	r2, [fp, #-12]
   17410:	str	r2, [r3, #36]	; 0x24
   17414:	ldr	r3, [fp, #-16]
   17418:	str	r3, [fp, #-12]
   1741c:	ldr	r3, [fp, #-12]
   17420:	cmp	r3, #0
   17424:	bne	173b8 <__assert_fail@plt+0x60bc>
   17428:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1742c:	ldr	r3, [r3, #32]
   17430:	cmp	r3, #0
   17434:	beq	17450 <__assert_fail@plt+0x6154>
   17438:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1743c:	ldr	r3, [r3, #32]
   17440:	ldr	r2, [fp, #-8]
   17444:	ldr	r2, [r2]
   17448:	mov	r0, r2
   1744c:	blx	r3
   17450:	ldr	r3, [fp, #-8]
   17454:	mov	r2, #0
   17458:	str	r2, [r3]
   1745c:	ldr	r3, [fp, #-8]
   17460:	mov	r2, #0
   17464:	str	r2, [r3, #4]
   17468:	ldr	r3, [fp, #-8]
   1746c:	add	r3, r3, #8
   17470:	str	r3, [fp, #-8]
   17474:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17478:	ldr	r2, [r3, #4]
   1747c:	ldr	r3, [fp, #-8]
   17480:	cmp	r2, r3
   17484:	bhi	17398 <__assert_fail@plt+0x609c>
   17488:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1748c:	mov	r2, #0
   17490:	str	r2, [r3, #12]
   17494:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17498:	mov	r2, #0
   1749c:	str	r2, [r3, #16]
   174a0:	nop			; (mov r0, r0)
   174a4:	sub	sp, fp, #4
   174a8:	pop	{fp, pc}
   174ac:	push	{fp, lr}
   174b0:	add	fp, sp, #4
   174b4:	sub	sp, sp, #24
   174b8:	str	r0, [fp, #-24]	; 0xffffffe8
   174bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   174c0:	ldr	r3, [r3, #32]
   174c4:	cmp	r3, #0
   174c8:	beq	17558 <__assert_fail@plt+0x625c>
   174cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   174d0:	ldr	r3, [r3, #16]
   174d4:	cmp	r3, #0
   174d8:	beq	17558 <__assert_fail@plt+0x625c>
   174dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   174e0:	ldr	r3, [r3]
   174e4:	str	r3, [fp, #-8]
   174e8:	b	17544 <__assert_fail@plt+0x6248>
   174ec:	ldr	r3, [fp, #-8]
   174f0:	ldr	r3, [r3]
   174f4:	cmp	r3, #0
   174f8:	beq	17538 <__assert_fail@plt+0x623c>
   174fc:	ldr	r3, [fp, #-8]
   17500:	str	r3, [fp, #-12]
   17504:	b	1752c <__assert_fail@plt+0x6230>
   17508:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1750c:	ldr	r3, [r3, #32]
   17510:	ldr	r2, [fp, #-12]
   17514:	ldr	r2, [r2]
   17518:	mov	r0, r2
   1751c:	blx	r3
   17520:	ldr	r3, [fp, #-12]
   17524:	ldr	r3, [r3, #4]
   17528:	str	r3, [fp, #-12]
   1752c:	ldr	r3, [fp, #-12]
   17530:	cmp	r3, #0
   17534:	bne	17508 <__assert_fail@plt+0x620c>
   17538:	ldr	r3, [fp, #-8]
   1753c:	add	r3, r3, #8
   17540:	str	r3, [fp, #-8]
   17544:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17548:	ldr	r2, [r3, #4]
   1754c:	ldr	r3, [fp, #-8]
   17550:	cmp	r2, r3
   17554:	bhi	174ec <__assert_fail@plt+0x61f0>
   17558:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1755c:	ldr	r3, [r3]
   17560:	str	r3, [fp, #-8]
   17564:	b	175ac <__assert_fail@plt+0x62b0>
   17568:	ldr	r3, [fp, #-8]
   1756c:	ldr	r3, [r3, #4]
   17570:	str	r3, [fp, #-12]
   17574:	b	17594 <__assert_fail@plt+0x6298>
   17578:	ldr	r3, [fp, #-12]
   1757c:	ldr	r3, [r3, #4]
   17580:	str	r3, [fp, #-16]
   17584:	ldr	r0, [fp, #-12]
   17588:	bl	13394 <__assert_fail@plt+0x2098>
   1758c:	ldr	r3, [fp, #-16]
   17590:	str	r3, [fp, #-12]
   17594:	ldr	r3, [fp, #-12]
   17598:	cmp	r3, #0
   1759c:	bne	17578 <__assert_fail@plt+0x627c>
   175a0:	ldr	r3, [fp, #-8]
   175a4:	add	r3, r3, #8
   175a8:	str	r3, [fp, #-8]
   175ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175b0:	ldr	r2, [r3, #4]
   175b4:	ldr	r3, [fp, #-8]
   175b8:	cmp	r2, r3
   175bc:	bhi	17568 <__assert_fail@plt+0x626c>
   175c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175c4:	ldr	r3, [r3, #36]	; 0x24
   175c8:	str	r3, [fp, #-12]
   175cc:	b	175ec <__assert_fail@plt+0x62f0>
   175d0:	ldr	r3, [fp, #-12]
   175d4:	ldr	r3, [r3, #4]
   175d8:	str	r3, [fp, #-16]
   175dc:	ldr	r0, [fp, #-12]
   175e0:	bl	13394 <__assert_fail@plt+0x2098>
   175e4:	ldr	r3, [fp, #-16]
   175e8:	str	r3, [fp, #-12]
   175ec:	ldr	r3, [fp, #-12]
   175f0:	cmp	r3, #0
   175f4:	bne	175d0 <__assert_fail@plt+0x62d4>
   175f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175fc:	ldr	r3, [r3]
   17600:	mov	r0, r3
   17604:	bl	13394 <__assert_fail@plt+0x2098>
   17608:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1760c:	bl	13394 <__assert_fail@plt+0x2098>
   17610:	nop			; (mov r0, r0)
   17614:	sub	sp, fp, #4
   17618:	pop	{fp, pc}
   1761c:	push	{fp, lr}
   17620:	add	fp, sp, #4
   17624:	sub	sp, sp, #16
   17628:	str	r0, [fp, #-16]
   1762c:	ldr	r3, [fp, #-16]
   17630:	ldr	r3, [r3, #36]	; 0x24
   17634:	cmp	r3, #0
   17638:	beq	1765c <__assert_fail@plt+0x6360>
   1763c:	ldr	r3, [fp, #-16]
   17640:	ldr	r3, [r3, #36]	; 0x24
   17644:	str	r3, [fp, #-8]
   17648:	ldr	r3, [fp, #-8]
   1764c:	ldr	r2, [r3, #4]
   17650:	ldr	r3, [fp, #-16]
   17654:	str	r2, [r3, #36]	; 0x24
   17658:	b	1766c <__assert_fail@plt+0x6370>
   1765c:	mov	r0, #8
   17660:	bl	1cac8 <__assert_fail@plt+0xb7cc>
   17664:	mov	r3, r0
   17668:	str	r3, [fp, #-8]
   1766c:	ldr	r3, [fp, #-8]
   17670:	mov	r0, r3
   17674:	sub	sp, fp, #4
   17678:	pop	{fp, pc}
   1767c:	push	{fp}		; (str fp, [sp, #-4]!)
   17680:	add	fp, sp, #0
   17684:	sub	sp, sp, #12
   17688:	str	r0, [fp, #-8]
   1768c:	str	r1, [fp, #-12]
   17690:	ldr	r3, [fp, #-12]
   17694:	mov	r2, #0
   17698:	str	r2, [r3]
   1769c:	ldr	r3, [fp, #-8]
   176a0:	ldr	r2, [r3, #36]	; 0x24
   176a4:	ldr	r3, [fp, #-12]
   176a8:	str	r2, [r3, #4]
   176ac:	ldr	r3, [fp, #-8]
   176b0:	ldr	r2, [fp, #-12]
   176b4:	str	r2, [r3, #36]	; 0x24
   176b8:	nop			; (mov r0, r0)
   176bc:	add	sp, fp, #0
   176c0:	pop	{fp}		; (ldr fp, [sp], #4)
   176c4:	bx	lr
   176c8:	push	{fp, lr}
   176cc:	add	fp, sp, #4
   176d0:	sub	sp, sp, #40	; 0x28
   176d4:	str	r0, [fp, #-32]	; 0xffffffe0
   176d8:	str	r1, [fp, #-36]	; 0xffffffdc
   176dc:	str	r2, [fp, #-40]	; 0xffffffd8
   176e0:	strb	r3, [fp, #-41]	; 0xffffffd7
   176e4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   176e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   176ec:	bl	16918 <__assert_fail@plt+0x561c>
   176f0:	str	r0, [fp, #-12]
   176f4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   176f8:	ldr	r2, [fp, #-12]
   176fc:	str	r2, [r3]
   17700:	ldr	r3, [fp, #-12]
   17704:	ldr	r3, [r3]
   17708:	cmp	r3, #0
   1770c:	bne	17718 <__assert_fail@plt+0x641c>
   17710:	mov	r3, #0
   17714:	b	17878 <__assert_fail@plt+0x657c>
   17718:	ldr	r3, [fp, #-12]
   1771c:	ldr	r2, [r3]
   17720:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17724:	cmp	r2, r3
   17728:	beq	17754 <__assert_fail@plt+0x6458>
   1772c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17730:	ldr	r3, [r3, #28]
   17734:	ldr	r2, [fp, #-12]
   17738:	ldr	r2, [r2]
   1773c:	mov	r1, r2
   17740:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17744:	blx	r3
   17748:	mov	r3, r0
   1774c:	cmp	r3, #0
   17750:	beq	177bc <__assert_fail@plt+0x64c0>
   17754:	ldr	r3, [fp, #-12]
   17758:	ldr	r3, [r3]
   1775c:	str	r3, [fp, #-24]	; 0xffffffe8
   17760:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   17764:	cmp	r3, #0
   17768:	beq	177b4 <__assert_fail@plt+0x64b8>
   1776c:	ldr	r3, [fp, #-12]
   17770:	ldr	r3, [r3, #4]
   17774:	cmp	r3, #0
   17778:	beq	177a8 <__assert_fail@plt+0x64ac>
   1777c:	ldr	r3, [fp, #-12]
   17780:	ldr	r3, [r3, #4]
   17784:	str	r3, [fp, #-28]	; 0xffffffe4
   17788:	ldr	r3, [fp, #-12]
   1778c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17790:	ldm	r2, {r0, r1}
   17794:	stm	r3, {r0, r1}
   17798:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1779c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   177a0:	bl	1767c <__assert_fail@plt+0x6380>
   177a4:	b	177b4 <__assert_fail@plt+0x64b8>
   177a8:	ldr	r3, [fp, #-12]
   177ac:	mov	r2, #0
   177b0:	str	r2, [r3]
   177b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   177b8:	b	17878 <__assert_fail@plt+0x657c>
   177bc:	ldr	r3, [fp, #-12]
   177c0:	str	r3, [fp, #-8]
   177c4:	b	17864 <__assert_fail@plt+0x6568>
   177c8:	ldr	r3, [fp, #-8]
   177cc:	ldr	r3, [r3, #4]
   177d0:	ldr	r2, [r3]
   177d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   177d8:	cmp	r2, r3
   177dc:	beq	1780c <__assert_fail@plt+0x6510>
   177e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   177e4:	ldr	r3, [r3, #28]
   177e8:	ldr	r2, [fp, #-8]
   177ec:	ldr	r2, [r2, #4]
   177f0:	ldr	r2, [r2]
   177f4:	mov	r1, r2
   177f8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   177fc:	blx	r3
   17800:	mov	r3, r0
   17804:	cmp	r3, #0
   17808:	beq	17858 <__assert_fail@plt+0x655c>
   1780c:	ldr	r3, [fp, #-8]
   17810:	ldr	r3, [r3, #4]
   17814:	ldr	r3, [r3]
   17818:	str	r3, [fp, #-16]
   1781c:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   17820:	cmp	r3, #0
   17824:	beq	17850 <__assert_fail@plt+0x6554>
   17828:	ldr	r3, [fp, #-8]
   1782c:	ldr	r3, [r3, #4]
   17830:	str	r3, [fp, #-20]	; 0xffffffec
   17834:	ldr	r3, [fp, #-20]	; 0xffffffec
   17838:	ldr	r2, [r3, #4]
   1783c:	ldr	r3, [fp, #-8]
   17840:	str	r2, [r3, #4]
   17844:	ldr	r1, [fp, #-20]	; 0xffffffec
   17848:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1784c:	bl	1767c <__assert_fail@plt+0x6380>
   17850:	ldr	r3, [fp, #-16]
   17854:	b	17878 <__assert_fail@plt+0x657c>
   17858:	ldr	r3, [fp, #-8]
   1785c:	ldr	r3, [r3, #4]
   17860:	str	r3, [fp, #-8]
   17864:	ldr	r3, [fp, #-8]
   17868:	ldr	r3, [r3, #4]
   1786c:	cmp	r3, #0
   17870:	bne	177c8 <__assert_fail@plt+0x64cc>
   17874:	mov	r3, #0
   17878:	mov	r0, r3
   1787c:	sub	sp, fp, #4
   17880:	pop	{fp, pc}
   17884:	push	{fp, lr}
   17888:	add	fp, sp, #4
   1788c:	sub	sp, sp, #40	; 0x28
   17890:	str	r0, [fp, #-32]	; 0xffffffe0
   17894:	str	r1, [fp, #-36]	; 0xffffffdc
   17898:	mov	r3, r2
   1789c:	strb	r3, [fp, #-37]	; 0xffffffdb
   178a0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   178a4:	ldr	r3, [r3]
   178a8:	str	r3, [fp, #-8]
   178ac:	b	17a4c <__assert_fail@plt+0x6750>
   178b0:	ldr	r3, [fp, #-8]
   178b4:	ldr	r3, [r3]
   178b8:	cmp	r3, #0
   178bc:	beq	17a40 <__assert_fail@plt+0x6744>
   178c0:	ldr	r3, [fp, #-8]
   178c4:	ldr	r3, [r3, #4]
   178c8:	str	r3, [fp, #-12]
   178cc:	b	1795c <__assert_fail@plt+0x6660>
   178d0:	ldr	r3, [fp, #-12]
   178d4:	ldr	r3, [r3]
   178d8:	str	r3, [fp, #-16]
   178dc:	ldr	r1, [fp, #-16]
   178e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   178e4:	bl	16918 <__assert_fail@plt+0x561c>
   178e8:	str	r0, [fp, #-20]	; 0xffffffec
   178ec:	ldr	r3, [fp, #-12]
   178f0:	ldr	r3, [r3, #4]
   178f4:	str	r3, [fp, #-24]	; 0xffffffe8
   178f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   178fc:	ldr	r3, [r3]
   17900:	cmp	r3, #0
   17904:	beq	17928 <__assert_fail@plt+0x662c>
   17908:	ldr	r3, [fp, #-20]	; 0xffffffec
   1790c:	ldr	r2, [r3, #4]
   17910:	ldr	r3, [fp, #-12]
   17914:	str	r2, [r3, #4]
   17918:	ldr	r3, [fp, #-20]	; 0xffffffec
   1791c:	ldr	r2, [fp, #-12]
   17920:	str	r2, [r3, #4]
   17924:	b	17954 <__assert_fail@plt+0x6658>
   17928:	ldr	r3, [fp, #-20]	; 0xffffffec
   1792c:	ldr	r2, [fp, #-16]
   17930:	str	r2, [r3]
   17934:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17938:	ldr	r3, [r3, #12]
   1793c:	add	r2, r3, #1
   17940:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17944:	str	r2, [r3, #12]
   17948:	ldr	r1, [fp, #-12]
   1794c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17950:	bl	1767c <__assert_fail@plt+0x6380>
   17954:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17958:	str	r3, [fp, #-12]
   1795c:	ldr	r3, [fp, #-12]
   17960:	cmp	r3, #0
   17964:	bne	178d0 <__assert_fail@plt+0x65d4>
   17968:	ldr	r3, [fp, #-8]
   1796c:	ldr	r3, [r3]
   17970:	str	r3, [fp, #-16]
   17974:	ldr	r3, [fp, #-8]
   17978:	mov	r2, #0
   1797c:	str	r2, [r3, #4]
   17980:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   17984:	cmp	r3, #0
   17988:	bne	17a3c <__assert_fail@plt+0x6740>
   1798c:	ldr	r1, [fp, #-16]
   17990:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17994:	bl	16918 <__assert_fail@plt+0x561c>
   17998:	str	r0, [fp, #-20]	; 0xffffffec
   1799c:	ldr	r3, [fp, #-20]	; 0xffffffec
   179a0:	ldr	r3, [r3]
   179a4:	cmp	r3, #0
   179a8:	beq	179f8 <__assert_fail@plt+0x66fc>
   179ac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   179b0:	bl	1761c <__assert_fail@plt+0x6320>
   179b4:	str	r0, [fp, #-28]	; 0xffffffe4
   179b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   179bc:	cmp	r3, #0
   179c0:	bne	179cc <__assert_fail@plt+0x66d0>
   179c4:	mov	r3, #0
   179c8:	b	17a64 <__assert_fail@plt+0x6768>
   179cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   179d0:	ldr	r2, [fp, #-16]
   179d4:	str	r2, [r3]
   179d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   179dc:	ldr	r2, [r3, #4]
   179e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   179e4:	str	r2, [r3, #4]
   179e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   179ec:	ldr	r2, [fp, #-28]	; 0xffffffe4
   179f0:	str	r2, [r3, #4]
   179f4:	b	17a18 <__assert_fail@plt+0x671c>
   179f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   179fc:	ldr	r2, [fp, #-16]
   17a00:	str	r2, [r3]
   17a04:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a08:	ldr	r3, [r3, #12]
   17a0c:	add	r2, r3, #1
   17a10:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a14:	str	r2, [r3, #12]
   17a18:	ldr	r3, [fp, #-8]
   17a1c:	mov	r2, #0
   17a20:	str	r2, [r3]
   17a24:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17a28:	ldr	r3, [r3, #12]
   17a2c:	sub	r2, r3, #1
   17a30:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17a34:	str	r2, [r3, #12]
   17a38:	b	17a40 <__assert_fail@plt+0x6744>
   17a3c:	nop			; (mov r0, r0)
   17a40:	ldr	r3, [fp, #-8]
   17a44:	add	r3, r3, #8
   17a48:	str	r3, [fp, #-8]
   17a4c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17a50:	ldr	r2, [r3, #4]
   17a54:	ldr	r3, [fp, #-8]
   17a58:	cmp	r2, r3
   17a5c:	bhi	178b0 <__assert_fail@plt+0x65b4>
   17a60:	mov	r3, #1
   17a64:	mov	r0, r3
   17a68:	sub	sp, fp, #4
   17a6c:	pop	{fp, pc}
   17a70:	push	{fp, lr}
   17a74:	add	fp, sp, #4
   17a78:	sub	sp, sp, #56	; 0x38
   17a7c:	str	r0, [fp, #-56]	; 0xffffffc8
   17a80:	str	r1, [fp, #-60]	; 0xffffffc4
   17a84:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17a88:	ldr	r3, [r3, #20]
   17a8c:	mov	r1, r3
   17a90:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17a94:	bl	170dc <__assert_fail@plt+0x5de0>
   17a98:	str	r0, [fp, #-8]
   17a9c:	ldr	r3, [fp, #-8]
   17aa0:	cmp	r3, #0
   17aa4:	bne	17ab0 <__assert_fail@plt+0x67b4>
   17aa8:	mov	r3, #0
   17aac:	b	17c8c <__assert_fail@plt+0x6990>
   17ab0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17ab4:	ldr	r2, [r3, #8]
   17ab8:	ldr	r3, [fp, #-8]
   17abc:	cmp	r2, r3
   17ac0:	bne	17acc <__assert_fail@plt+0x67d0>
   17ac4:	mov	r3, #1
   17ac8:	b	17c8c <__assert_fail@plt+0x6990>
   17acc:	sub	r3, fp, #52	; 0x34
   17ad0:	str	r3, [fp, #-12]
   17ad4:	mov	r1, #8
   17ad8:	ldr	r0, [fp, #-8]
   17adc:	bl	1ca04 <__assert_fail@plt+0xb708>
   17ae0:	mov	r3, r0
   17ae4:	mov	r2, r3
   17ae8:	ldr	r3, [fp, #-12]
   17aec:	str	r2, [r3]
   17af0:	ldr	r3, [fp, #-12]
   17af4:	ldr	r3, [r3]
   17af8:	cmp	r3, #0
   17afc:	bne	17b08 <__assert_fail@plt+0x680c>
   17b00:	mov	r3, #0
   17b04:	b	17c8c <__assert_fail@plt+0x6990>
   17b08:	ldr	r3, [fp, #-12]
   17b0c:	ldr	r2, [fp, #-8]
   17b10:	str	r2, [r3, #8]
   17b14:	ldr	r3, [fp, #-12]
   17b18:	ldr	r2, [r3]
   17b1c:	ldr	r3, [fp, #-8]
   17b20:	lsl	r3, r3, #3
   17b24:	add	r2, r2, r3
   17b28:	ldr	r3, [fp, #-12]
   17b2c:	str	r2, [r3, #4]
   17b30:	ldr	r3, [fp, #-12]
   17b34:	mov	r2, #0
   17b38:	str	r2, [r3, #12]
   17b3c:	ldr	r3, [fp, #-12]
   17b40:	mov	r2, #0
   17b44:	str	r2, [r3, #16]
   17b48:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17b4c:	ldr	r2, [r3, #20]
   17b50:	ldr	r3, [fp, #-12]
   17b54:	str	r2, [r3, #20]
   17b58:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17b5c:	ldr	r2, [r3, #24]
   17b60:	ldr	r3, [fp, #-12]
   17b64:	str	r2, [r3, #24]
   17b68:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17b6c:	ldr	r2, [r3, #28]
   17b70:	ldr	r3, [fp, #-12]
   17b74:	str	r2, [r3, #28]
   17b78:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17b7c:	ldr	r2, [r3, #32]
   17b80:	ldr	r3, [fp, #-12]
   17b84:	str	r2, [r3, #32]
   17b88:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17b8c:	ldr	r2, [r3, #36]	; 0x24
   17b90:	ldr	r3, [fp, #-12]
   17b94:	str	r2, [r3, #36]	; 0x24
   17b98:	mov	r2, #0
   17b9c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17ba0:	ldr	r0, [fp, #-12]
   17ba4:	bl	17884 <__assert_fail@plt+0x6588>
   17ba8:	mov	r3, r0
   17bac:	cmp	r3, #0
   17bb0:	beq	17c1c <__assert_fail@plt+0x6920>
   17bb4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17bb8:	ldr	r3, [r3]
   17bbc:	mov	r0, r3
   17bc0:	bl	13394 <__assert_fail@plt+0x2098>
   17bc4:	ldr	r3, [fp, #-12]
   17bc8:	ldr	r2, [r3]
   17bcc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17bd0:	str	r2, [r3]
   17bd4:	ldr	r3, [fp, #-12]
   17bd8:	ldr	r2, [r3, #4]
   17bdc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17be0:	str	r2, [r3, #4]
   17be4:	ldr	r3, [fp, #-12]
   17be8:	ldr	r2, [r3, #8]
   17bec:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17bf0:	str	r2, [r3, #8]
   17bf4:	ldr	r3, [fp, #-12]
   17bf8:	ldr	r2, [r3, #12]
   17bfc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17c00:	str	r2, [r3, #12]
   17c04:	ldr	r3, [fp, #-12]
   17c08:	ldr	r2, [r3, #36]	; 0x24
   17c0c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17c10:	str	r2, [r3, #36]	; 0x24
   17c14:	mov	r3, #1
   17c18:	b	17c8c <__assert_fail@plt+0x6990>
   17c1c:	ldr	r3, [fp, #-12]
   17c20:	ldr	r2, [r3, #36]	; 0x24
   17c24:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17c28:	str	r2, [r3, #36]	; 0x24
   17c2c:	mov	r2, #1
   17c30:	ldr	r1, [fp, #-12]
   17c34:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17c38:	bl	17884 <__assert_fail@plt+0x6588>
   17c3c:	mov	r3, r0
   17c40:	eor	r3, r3, #1
   17c44:	uxtb	r3, r3
   17c48:	cmp	r3, #0
   17c4c:	bne	17c74 <__assert_fail@plt+0x6978>
   17c50:	mov	r2, #0
   17c54:	ldr	r1, [fp, #-12]
   17c58:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17c5c:	bl	17884 <__assert_fail@plt+0x6588>
   17c60:	mov	r3, r0
   17c64:	eor	r3, r3, #1
   17c68:	uxtb	r3, r3
   17c6c:	cmp	r3, #0
   17c70:	beq	17c78 <__assert_fail@plt+0x697c>
   17c74:	bl	112b4 <abort@plt>
   17c78:	ldr	r3, [fp, #-12]
   17c7c:	ldr	r3, [r3]
   17c80:	mov	r0, r3
   17c84:	bl	13394 <__assert_fail@plt+0x2098>
   17c88:	mov	r3, #0
   17c8c:	mov	r0, r3
   17c90:	sub	sp, fp, #4
   17c94:	pop	{fp, pc}
   17c98:	push	{fp, lr}
   17c9c:	add	fp, sp, #4
   17ca0:	sub	sp, sp, #40	; 0x28
   17ca4:	str	r0, [fp, #-32]	; 0xffffffe0
   17ca8:	str	r1, [fp, #-36]	; 0xffffffdc
   17cac:	str	r2, [fp, #-40]	; 0xffffffd8
   17cb0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17cb4:	cmp	r3, #0
   17cb8:	bne	17cc0 <__assert_fail@plt+0x69c4>
   17cbc:	bl	112b4 <abort@plt>
   17cc0:	sub	r2, fp, #24
   17cc4:	mov	r3, #0
   17cc8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17ccc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17cd0:	bl	176c8 <__assert_fail@plt+0x63cc>
   17cd4:	str	r0, [fp, #-8]
   17cd8:	ldr	r3, [fp, #-8]
   17cdc:	cmp	r3, #0
   17ce0:	beq	17d04 <__assert_fail@plt+0x6a08>
   17ce4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17ce8:	cmp	r3, #0
   17cec:	beq	17cfc <__assert_fail@plt+0x6a00>
   17cf0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17cf4:	ldr	r2, [fp, #-8]
   17cf8:	str	r2, [r3]
   17cfc:	mov	r3, #0
   17d00:	b	17f08 <__assert_fail@plt+0x6c0c>
   17d04:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d08:	ldr	r3, [r3, #12]
   17d0c:	vmov	s15, r3
   17d10:	vcvt.f32.u32	s14, s15
   17d14:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d18:	ldr	r3, [r3, #20]
   17d1c:	vldr	s13, [r3, #8]
   17d20:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d24:	ldr	r3, [r3, #8]
   17d28:	vmov	s15, r3
   17d2c:	vcvt.f32.u32	s15, s15
   17d30:	vmul.f32	s15, s13, s15
   17d34:	vcmpe.f32	s14, s15
   17d38:	vmrs	APSR_nzcv, fpscr
   17d3c:	ble	17e5c <__assert_fail@plt+0x6b60>
   17d40:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17d44:	bl	16fa0 <__assert_fail@plt+0x5ca4>
   17d48:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d4c:	ldr	r3, [r3, #12]
   17d50:	vmov	s15, r3
   17d54:	vcvt.f32.u32	s14, s15
   17d58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d5c:	ldr	r3, [r3, #20]
   17d60:	vldr	s13, [r3, #8]
   17d64:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d68:	ldr	r3, [r3, #8]
   17d6c:	vmov	s15, r3
   17d70:	vcvt.f32.u32	s15, s15
   17d74:	vmul.f32	s15, s13, s15
   17d78:	vcmpe.f32	s14, s15
   17d7c:	vmrs	APSR_nzcv, fpscr
   17d80:	ble	17e5c <__assert_fail@plt+0x6b60>
   17d84:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d88:	ldr	r3, [r3, #20]
   17d8c:	str	r3, [fp, #-12]
   17d90:	ldr	r3, [fp, #-12]
   17d94:	ldrb	r3, [r3, #16]
   17d98:	cmp	r3, #0
   17d9c:	beq	17dc0 <__assert_fail@plt+0x6ac4>
   17da0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17da4:	ldr	r3, [r3, #8]
   17da8:	vmov	s15, r3
   17dac:	vcvt.f32.u32	s14, s15
   17db0:	ldr	r3, [fp, #-12]
   17db4:	vldr	s15, [r3, #12]
   17db8:	vmul.f32	s15, s14, s15
   17dbc:	b	17de8 <__assert_fail@plt+0x6aec>
   17dc0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17dc4:	ldr	r3, [r3, #8]
   17dc8:	vmov	s15, r3
   17dcc:	vcvt.f32.u32	s14, s15
   17dd0:	ldr	r3, [fp, #-12]
   17dd4:	vldr	s15, [r3, #12]
   17dd8:	vmul.f32	s14, s14, s15
   17ddc:	ldr	r3, [fp, #-12]
   17de0:	vldr	s15, [r3, #8]
   17de4:	vmul.f32	s15, s14, s15
   17de8:	vstr	s15, [fp, #-16]
   17dec:	vldr	s15, [fp, #-16]
   17df0:	vldr	s14, [pc, #284]	; 17f14 <__assert_fail@plt+0x6c18>
   17df4:	vcmpe.f32	s15, s14
   17df8:	vmrs	APSR_nzcv, fpscr
   17dfc:	blt	17e08 <__assert_fail@plt+0x6b0c>
   17e00:	mvn	r3, #0
   17e04:	b	17f08 <__assert_fail@plt+0x6c0c>
   17e08:	vldr	s15, [fp, #-16]
   17e0c:	vcvt.u32.f32	s15, s15
   17e10:	vmov	r1, s15
   17e14:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17e18:	bl	17a70 <__assert_fail@plt+0x6774>
   17e1c:	mov	r3, r0
   17e20:	eor	r3, r3, #1
   17e24:	uxtb	r3, r3
   17e28:	cmp	r3, #0
   17e2c:	beq	17e38 <__assert_fail@plt+0x6b3c>
   17e30:	mvn	r3, #0
   17e34:	b	17f08 <__assert_fail@plt+0x6c0c>
   17e38:	sub	r2, fp, #24
   17e3c:	mov	r3, #0
   17e40:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17e44:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17e48:	bl	176c8 <__assert_fail@plt+0x63cc>
   17e4c:	mov	r3, r0
   17e50:	cmp	r3, #0
   17e54:	beq	17e5c <__assert_fail@plt+0x6b60>
   17e58:	bl	112b4 <abort@plt>
   17e5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17e60:	ldr	r3, [r3]
   17e64:	cmp	r3, #0
   17e68:	beq	17ed0 <__assert_fail@plt+0x6bd4>
   17e6c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17e70:	bl	1761c <__assert_fail@plt+0x6320>
   17e74:	str	r0, [fp, #-20]	; 0xffffffec
   17e78:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e7c:	cmp	r3, #0
   17e80:	bne	17e8c <__assert_fail@plt+0x6b90>
   17e84:	mvn	r3, #0
   17e88:	b	17f08 <__assert_fail@plt+0x6c0c>
   17e8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e90:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17e94:	str	r2, [r3]
   17e98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17e9c:	ldr	r2, [r3, #4]
   17ea0:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ea4:	str	r2, [r3, #4]
   17ea8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17eac:	ldr	r2, [fp, #-20]	; 0xffffffec
   17eb0:	str	r2, [r3, #4]
   17eb4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17eb8:	ldr	r3, [r3, #16]
   17ebc:	add	r2, r3, #1
   17ec0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ec4:	str	r2, [r3, #16]
   17ec8:	mov	r3, #1
   17ecc:	b	17f08 <__assert_fail@plt+0x6c0c>
   17ed0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17ed4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17ed8:	str	r2, [r3]
   17edc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ee0:	ldr	r3, [r3, #16]
   17ee4:	add	r2, r3, #1
   17ee8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17eec:	str	r2, [r3, #16]
   17ef0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ef4:	ldr	r3, [r3, #12]
   17ef8:	add	r2, r3, #1
   17efc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17f00:	str	r2, [r3, #12]
   17f04:	mov	r3, #1
   17f08:	mov	r0, r3
   17f0c:	sub	sp, fp, #4
   17f10:	pop	{fp, pc}
   17f14:	svcmi	0x00800000
   17f18:	push	{fp, lr}
   17f1c:	add	fp, sp, #4
   17f20:	sub	sp, sp, #16
   17f24:	str	r0, [fp, #-16]
   17f28:	str	r1, [fp, #-20]	; 0xffffffec
   17f2c:	sub	r3, fp, #12
   17f30:	mov	r2, r3
   17f34:	ldr	r1, [fp, #-20]	; 0xffffffec
   17f38:	ldr	r0, [fp, #-16]
   17f3c:	bl	17c98 <__assert_fail@plt+0x699c>
   17f40:	str	r0, [fp, #-8]
   17f44:	ldr	r3, [fp, #-8]
   17f48:	cmn	r3, #1
   17f4c:	beq	17f6c <__assert_fail@plt+0x6c70>
   17f50:	ldr	r3, [fp, #-8]
   17f54:	cmp	r3, #0
   17f58:	bne	17f64 <__assert_fail@plt+0x6c68>
   17f5c:	ldr	r3, [fp, #-12]
   17f60:	b	17f70 <__assert_fail@plt+0x6c74>
   17f64:	ldr	r3, [fp, #-20]	; 0xffffffec
   17f68:	b	17f70 <__assert_fail@plt+0x6c74>
   17f6c:	mov	r3, #0
   17f70:	mov	r0, r3
   17f74:	sub	sp, fp, #4
   17f78:	pop	{fp, pc}
   17f7c:	push	{fp, lr}
   17f80:	add	fp, sp, #4
   17f84:	sub	sp, sp, #32
   17f88:	str	r0, [fp, #-32]	; 0xffffffe0
   17f8c:	str	r1, [fp, #-36]	; 0xffffffdc
   17f90:	sub	r2, fp, #28
   17f94:	mov	r3, #1
   17f98:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17f9c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17fa0:	bl	176c8 <__assert_fail@plt+0x63cc>
   17fa4:	str	r0, [fp, #-12]
   17fa8:	ldr	r3, [fp, #-12]
   17fac:	cmp	r3, #0
   17fb0:	bne	17fbc <__assert_fail@plt+0x6cc0>
   17fb4:	mov	r3, #0
   17fb8:	b	1814c <__assert_fail@plt+0x6e50>
   17fbc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17fc0:	ldr	r3, [r3, #16]
   17fc4:	sub	r2, r3, #1
   17fc8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17fcc:	str	r2, [r3, #16]
   17fd0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17fd4:	ldr	r3, [r3]
   17fd8:	cmp	r3, #0
   17fdc:	bne	18148 <__assert_fail@plt+0x6e4c>
   17fe0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17fe4:	ldr	r3, [r3, #12]
   17fe8:	sub	r2, r3, #1
   17fec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ff0:	str	r2, [r3, #12]
   17ff4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ff8:	ldr	r3, [r3, #12]
   17ffc:	vmov	s15, r3
   18000:	vcvt.f32.u32	s14, s15
   18004:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18008:	ldr	r3, [r3, #20]
   1800c:	vldr	s13, [r3]
   18010:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18014:	ldr	r3, [r3, #8]
   18018:	vmov	s15, r3
   1801c:	vcvt.f32.u32	s15, s15
   18020:	vmul.f32	s15, s13, s15
   18024:	vcmpe.f32	s14, s15
   18028:	vmrs	APSR_nzcv, fpscr
   1802c:	bpl	18148 <__assert_fail@plt+0x6e4c>
   18030:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18034:	bl	16fa0 <__assert_fail@plt+0x5ca4>
   18038:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1803c:	ldr	r3, [r3, #12]
   18040:	vmov	s15, r3
   18044:	vcvt.f32.u32	s14, s15
   18048:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1804c:	ldr	r3, [r3, #20]
   18050:	vldr	s13, [r3]
   18054:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18058:	ldr	r3, [r3, #8]
   1805c:	vmov	s15, r3
   18060:	vcvt.f32.u32	s15, s15
   18064:	vmul.f32	s15, s13, s15
   18068:	vcmpe.f32	s14, s15
   1806c:	vmrs	APSR_nzcv, fpscr
   18070:	bpl	18148 <__assert_fail@plt+0x6e4c>
   18074:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18078:	ldr	r3, [r3, #20]
   1807c:	str	r3, [fp, #-16]
   18080:	ldr	r3, [fp, #-16]
   18084:	ldrb	r3, [r3, #16]
   18088:	cmp	r3, #0
   1808c:	beq	180b4 <__assert_fail@plt+0x6db8>
   18090:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18094:	ldr	r3, [r3, #8]
   18098:	vmov	s15, r3
   1809c:	vcvt.f32.u32	s14, s15
   180a0:	ldr	r3, [fp, #-16]
   180a4:	vldr	s15, [r3, #4]
   180a8:	vmul.f32	s15, s14, s15
   180ac:	vcvt.u32.f32	s15, s15
   180b0:	b	180e0 <__assert_fail@plt+0x6de4>
   180b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   180b8:	ldr	r3, [r3, #8]
   180bc:	vmov	s15, r3
   180c0:	vcvt.f32.u32	s14, s15
   180c4:	ldr	r3, [fp, #-16]
   180c8:	vldr	s15, [r3, #4]
   180cc:	vmul.f32	s14, s14, s15
   180d0:	ldr	r3, [fp, #-16]
   180d4:	vldr	s15, [r3, #8]
   180d8:	vmul.f32	s15, s14, s15
   180dc:	vcvt.u32.f32	s15, s15
   180e0:	vstr	s15, [fp, #-20]	; 0xffffffec
   180e4:	ldr	r1, [fp, #-20]	; 0xffffffec
   180e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   180ec:	bl	17a70 <__assert_fail@plt+0x6774>
   180f0:	mov	r3, r0
   180f4:	eor	r3, r3, #1
   180f8:	uxtb	r3, r3
   180fc:	cmp	r3, #0
   18100:	beq	18148 <__assert_fail@plt+0x6e4c>
   18104:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18108:	ldr	r3, [r3, #36]	; 0x24
   1810c:	str	r3, [fp, #-8]
   18110:	b	18130 <__assert_fail@plt+0x6e34>
   18114:	ldr	r3, [fp, #-8]
   18118:	ldr	r3, [r3, #4]
   1811c:	str	r3, [fp, #-24]	; 0xffffffe8
   18120:	ldr	r0, [fp, #-8]
   18124:	bl	13394 <__assert_fail@plt+0x2098>
   18128:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1812c:	str	r3, [fp, #-8]
   18130:	ldr	r3, [fp, #-8]
   18134:	cmp	r3, #0
   18138:	bne	18114 <__assert_fail@plt+0x6e18>
   1813c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18140:	mov	r2, #0
   18144:	str	r2, [r3, #36]	; 0x24
   18148:	ldr	r3, [fp, #-12]
   1814c:	mov	r0, r3
   18150:	sub	sp, fp, #4
   18154:	pop	{fp, pc}
   18158:	push	{fp, lr}
   1815c:	add	fp, sp, #4
   18160:	sub	sp, sp, #8
   18164:	str	r0, [fp, #-8]
   18168:	str	r1, [fp, #-12]
   1816c:	ldr	r1, [fp, #-12]
   18170:	ldr	r0, [fp, #-8]
   18174:	bl	17f7c <__assert_fail@plt+0x6c80>
   18178:	mov	r3, r0
   1817c:	mov	r0, r3
   18180:	sub	sp, fp, #4
   18184:	pop	{fp, pc}
   18188:	push	{fp}		; (str fp, [sp, #-4]!)
   1818c:	add	fp, sp, #0
   18190:	sub	sp, sp, #20
   18194:	str	r0, [fp, #-16]
   18198:	str	r1, [fp, #-20]	; 0xffffffec
   1819c:	ldr	r3, [fp, #-16]
   181a0:	mov	r2, #1
   181a4:	strb	r2, [r3, #28]
   181a8:	ldr	r3, [fp, #-16]
   181ac:	mov	r2, #0
   181b0:	str	r2, [r3, #20]
   181b4:	ldr	r3, [fp, #-16]
   181b8:	mov	r2, #0
   181bc:	str	r2, [r3, #24]
   181c0:	mov	r3, #0
   181c4:	str	r3, [fp, #-8]
   181c8:	b	181e8 <__assert_fail@plt+0x6eec>
   181cc:	ldr	r3, [fp, #-16]
   181d0:	ldr	r2, [fp, #-8]
   181d4:	ldr	r1, [fp, #-20]	; 0xffffffec
   181d8:	str	r1, [r3, r2, lsl #2]
   181dc:	ldr	r3, [fp, #-8]
   181e0:	add	r3, r3, #1
   181e4:	str	r3, [fp, #-8]
   181e8:	ldr	r3, [fp, #-8]
   181ec:	cmp	r3, #3
   181f0:	ble	181cc <__assert_fail@plt+0x6ed0>
   181f4:	ldr	r3, [fp, #-16]
   181f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   181fc:	str	r2, [r3, #16]
   18200:	nop			; (mov r0, r0)
   18204:	add	sp, fp, #0
   18208:	pop	{fp}		; (ldr fp, [sp], #4)
   1820c:	bx	lr
   18210:	push	{fp}		; (str fp, [sp, #-4]!)
   18214:	add	fp, sp, #0
   18218:	sub	sp, sp, #12
   1821c:	str	r0, [fp, #-8]
   18220:	ldr	r3, [fp, #-8]
   18224:	ldrb	r3, [r3, #28]
   18228:	mov	r0, r3
   1822c:	add	sp, fp, #0
   18230:	pop	{fp}		; (ldr fp, [sp], #4)
   18234:	bx	lr
   18238:	push	{fp}		; (str fp, [sp, #-4]!)
   1823c:	add	fp, sp, #0
   18240:	sub	sp, sp, #20
   18244:	str	r0, [fp, #-16]
   18248:	str	r1, [fp, #-20]	; 0xffffffec
   1824c:	ldr	r3, [fp, #-16]
   18250:	ldr	r3, [r3, #20]
   18254:	ldr	r2, [fp, #-16]
   18258:	ldrb	r2, [r2, #28]
   1825c:	eor	r2, r2, #1
   18260:	uxtb	r2, r2
   18264:	add	r3, r3, r2
   18268:	and	r3, r3, #3
   1826c:	str	r3, [fp, #-8]
   18270:	ldr	r3, [fp, #-16]
   18274:	ldr	r2, [fp, #-8]
   18278:	ldr	r3, [r3, r2, lsl #2]
   1827c:	str	r3, [fp, #-12]
   18280:	ldr	r3, [fp, #-16]
   18284:	ldr	r2, [fp, #-8]
   18288:	ldr	r1, [fp, #-20]	; 0xffffffec
   1828c:	str	r1, [r3, r2, lsl #2]
   18290:	ldr	r3, [fp, #-16]
   18294:	ldr	r2, [fp, #-8]
   18298:	str	r2, [r3, #20]
   1829c:	ldr	r3, [fp, #-16]
   182a0:	ldr	r2, [r3, #24]
   182a4:	ldr	r3, [fp, #-8]
   182a8:	cmp	r2, r3
   182ac:	bne	182d8 <__assert_fail@plt+0x6fdc>
   182b0:	ldr	r3, [fp, #-16]
   182b4:	ldr	r3, [r3, #24]
   182b8:	ldr	r2, [fp, #-16]
   182bc:	ldrb	r2, [r2, #28]
   182c0:	eor	r2, r2, #1
   182c4:	uxtb	r2, r2
   182c8:	add	r3, r3, r2
   182cc:	and	r2, r3, #3
   182d0:	ldr	r3, [fp, #-16]
   182d4:	str	r2, [r3, #24]
   182d8:	ldr	r3, [fp, #-16]
   182dc:	mov	r2, #0
   182e0:	strb	r2, [r3, #28]
   182e4:	ldr	r3, [fp, #-12]
   182e8:	mov	r0, r3
   182ec:	add	sp, fp, #0
   182f0:	pop	{fp}		; (ldr fp, [sp], #4)
   182f4:	bx	lr
   182f8:	push	{fp, lr}
   182fc:	add	fp, sp, #4
   18300:	sub	sp, sp, #16
   18304:	str	r0, [fp, #-16]
   18308:	ldr	r0, [fp, #-16]
   1830c:	bl	18210 <__assert_fail@plt+0x6f14>
   18310:	mov	r3, r0
   18314:	cmp	r3, #0
   18318:	beq	18320 <__assert_fail@plt+0x7024>
   1831c:	bl	112b4 <abort@plt>
   18320:	ldr	r3, [fp, #-16]
   18324:	ldr	r2, [r3, #20]
   18328:	ldr	r3, [fp, #-16]
   1832c:	ldr	r3, [r3, r2, lsl #2]
   18330:	str	r3, [fp, #-8]
   18334:	ldr	r3, [fp, #-16]
   18338:	ldr	r2, [r3, #20]
   1833c:	ldr	r3, [fp, #-16]
   18340:	ldr	r1, [r3, #16]
   18344:	ldr	r3, [fp, #-16]
   18348:	str	r1, [r3, r2, lsl #2]
   1834c:	ldr	r3, [fp, #-16]
   18350:	ldr	r2, [r3, #20]
   18354:	ldr	r3, [fp, #-16]
   18358:	ldr	r3, [r3, #24]
   1835c:	cmp	r2, r3
   18360:	bne	18374 <__assert_fail@plt+0x7078>
   18364:	ldr	r3, [fp, #-16]
   18368:	mov	r2, #1
   1836c:	strb	r2, [r3, #28]
   18370:	b	1838c <__assert_fail@plt+0x7090>
   18374:	ldr	r3, [fp, #-16]
   18378:	ldr	r3, [r3, #20]
   1837c:	add	r3, r3, #3
   18380:	and	r2, r3, #3
   18384:	ldr	r3, [fp, #-16]
   18388:	str	r2, [r3, #20]
   1838c:	ldr	r3, [fp, #-8]
   18390:	mov	r0, r3
   18394:	sub	sp, fp, #4
   18398:	pop	{fp, pc}
   1839c:	push	{fp, lr}
   183a0:	add	fp, sp, #4
   183a4:	sub	sp, sp, #24
   183a8:	strd	r0, [fp, #-20]	; 0xffffffec
   183ac:	str	r2, [fp, #-24]	; 0xffffffe8
   183b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   183b4:	add	r3, r3, #20
   183b8:	str	r3, [fp, #-8]
   183bc:	ldr	r3, [fp, #-8]
   183c0:	mov	r2, #0
   183c4:	strb	r2, [r3]
   183c8:	ldr	r3, [fp, #-8]
   183cc:	sub	r3, r3, #1
   183d0:	str	r3, [fp, #-8]
   183d4:	ldrd	r0, [fp, #-20]	; 0xffffffec
   183d8:	mov	r2, #10
   183dc:	mov	r3, #0
   183e0:	bl	1e750 <__assert_fail@plt+0xd454>
   183e4:	uxtb	r3, r2
   183e8:	add	r3, r3, #48	; 0x30
   183ec:	uxtb	r2, r3
   183f0:	ldr	r3, [fp, #-8]
   183f4:	strb	r2, [r3]
   183f8:	ldrd	r0, [fp, #-20]	; 0xffffffec
   183fc:	mov	r2, #10
   18400:	mov	r3, #0
   18404:	bl	1e750 <__assert_fail@plt+0xd454>
   18408:	mov	r2, r0
   1840c:	mov	r3, r1
   18410:	strd	r2, [fp, #-20]	; 0xffffffec
   18414:	ldrd	r2, [fp, #-20]	; 0xffffffec
   18418:	orrs	r3, r2, r3
   1841c:	bne	183c8 <__assert_fail@plt+0x70cc>
   18420:	ldr	r3, [fp, #-8]
   18424:	mov	r0, r3
   18428:	sub	sp, fp, #4
   1842c:	pop	{fp, pc}
   18430:	push	{r2, r3}
   18434:	push	{fp, lr}
   18438:	add	fp, sp, #4
   1843c:	sub	sp, sp, #16
   18440:	str	r0, [fp, #-16]
   18444:	str	r1, [fp, #-20]	; 0xffffffec
   18448:	mov	r3, #0
   1844c:	str	r3, [fp, #-8]
   18450:	ldr	r3, [fp, #4]
   18454:	and	r3, r3, #64	; 0x40
   18458:	cmp	r3, #0
   1845c:	beq	1847c <__assert_fail@plt+0x7180>
   18460:	add	r3, fp, #8
   18464:	str	r3, [fp, #-12]
   18468:	ldr	r3, [fp, #-12]
   1846c:	add	r2, r3, #4
   18470:	str	r2, [fp, #-12]
   18474:	ldr	r3, [r3]
   18478:	str	r3, [fp, #-8]
   1847c:	ldr	r3, [fp, #-8]
   18480:	ldr	r2, [fp, #4]
   18484:	ldr	r1, [fp, #-20]	; 0xffffffec
   18488:	ldr	r0, [fp, #-16]
   1848c:	bl	111a0 <openat64@plt>
   18490:	mov	r3, r0
   18494:	mov	r0, r3
   18498:	bl	1ad24 <__assert_fail@plt+0x9a28>
   1849c:	mov	r3, r0
   184a0:	mov	r0, r3
   184a4:	sub	sp, fp, #4
   184a8:	pop	{fp, lr}
   184ac:	add	sp, sp, #8
   184b0:	bx	lr
   184b4:	push	{fp, lr}
   184b8:	add	fp, sp, #4
   184bc:	sub	sp, sp, #32
   184c0:	str	r0, [fp, #-24]	; 0xffffffe8
   184c4:	str	r1, [fp, #-28]	; 0xffffffe4
   184c8:	str	r2, [fp, #-32]	; 0xffffffe0
   184cc:	str	r3, [fp, #-36]	; 0xffffffdc
   184d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   184d4:	orr	r3, r3, #540672	; 0x84000
   184d8:	orr	r3, r3, #2304	; 0x900
   184dc:	str	r3, [fp, #-8]
   184e0:	ldr	r2, [fp, #-8]
   184e4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   184e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   184ec:	bl	18430 <__assert_fail@plt+0x7134>
   184f0:	str	r0, [fp, #-12]
   184f4:	ldr	r3, [fp, #-12]
   184f8:	cmp	r3, #0
   184fc:	bge	18508 <__assert_fail@plt+0x720c>
   18500:	mov	r3, #0
   18504:	b	1855c <__assert_fail@plt+0x7260>
   18508:	ldr	r0, [fp, #-12]
   1850c:	bl	11254 <fdopendir@plt>
   18510:	str	r0, [fp, #-16]
   18514:	ldr	r3, [fp, #-16]
   18518:	cmp	r3, #0
   1851c:	beq	18530 <__assert_fail@plt+0x7234>
   18520:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18524:	ldr	r2, [fp, #-12]
   18528:	str	r2, [r3]
   1852c:	b	18558 <__assert_fail@plt+0x725c>
   18530:	bl	111c4 <__errno_location@plt>
   18534:	mov	r3, r0
   18538:	ldr	r3, [r3]
   1853c:	str	r3, [fp, #-20]	; 0xffffffec
   18540:	ldr	r0, [fp, #-12]
   18544:	bl	112c0 <close@plt>
   18548:	bl	111c4 <__errno_location@plt>
   1854c:	mov	r2, r0
   18550:	ldr	r3, [fp, #-20]	; 0xffffffec
   18554:	str	r3, [r2]
   18558:	ldr	r3, [fp, #-16]
   1855c:	mov	r0, r3
   18560:	sub	sp, fp, #4
   18564:	pop	{fp, pc}
   18568:	push	{fp, lr}
   1856c:	add	fp, sp, #4
   18570:	sub	sp, sp, #16
   18574:	str	r0, [fp, #-16]
   18578:	ldr	r3, [fp, #-16]
   1857c:	cmp	r3, #0
   18580:	bne	185a0 <__assert_fail@plt+0x72a4>
   18584:	ldr	r3, [pc, #220]	; 18668 <__assert_fail@plt+0x736c>
   18588:	ldr	r3, [r3]
   1858c:	mov	r2, #55	; 0x37
   18590:	mov	r1, #1
   18594:	ldr	r0, [pc, #208]	; 1866c <__assert_fail@plt+0x7370>
   18598:	bl	110bc <fwrite@plt>
   1859c:	bl	112b4 <abort@plt>
   185a0:	mov	r1, #47	; 0x2f
   185a4:	ldr	r0, [fp, #-16]
   185a8:	bl	11230 <strrchr@plt>
   185ac:	str	r0, [fp, #-8]
   185b0:	ldr	r3, [fp, #-8]
   185b4:	cmp	r3, #0
   185b8:	beq	185c8 <__assert_fail@plt+0x72cc>
   185bc:	ldr	r3, [fp, #-8]
   185c0:	add	r3, r3, #1
   185c4:	b	185cc <__assert_fail@plt+0x72d0>
   185c8:	ldr	r3, [fp, #-16]
   185cc:	str	r3, [fp, #-12]
   185d0:	ldr	r2, [fp, #-12]
   185d4:	ldr	r3, [fp, #-16]
   185d8:	sub	r3, r2, r3
   185dc:	cmp	r3, #6
   185e0:	ble	18644 <__assert_fail@plt+0x7348>
   185e4:	ldr	r3, [fp, #-12]
   185e8:	sub	r3, r3, #7
   185ec:	mov	r2, #7
   185f0:	ldr	r1, [pc, #120]	; 18670 <__assert_fail@plt+0x7374>
   185f4:	mov	r0, r3
   185f8:	bl	112a8 <strncmp@plt>
   185fc:	mov	r3, r0
   18600:	cmp	r3, #0
   18604:	bne	18644 <__assert_fail@plt+0x7348>
   18608:	ldr	r3, [fp, #-12]
   1860c:	str	r3, [fp, #-16]
   18610:	mov	r2, #3
   18614:	ldr	r1, [pc, #88]	; 18674 <__assert_fail@plt+0x7378>
   18618:	ldr	r0, [fp, #-12]
   1861c:	bl	112a8 <strncmp@plt>
   18620:	mov	r3, r0
   18624:	cmp	r3, #0
   18628:	bne	18644 <__assert_fail@plt+0x7348>
   1862c:	ldr	r3, [fp, #-12]
   18630:	add	r3, r3, #3
   18634:	str	r3, [fp, #-16]
   18638:	ldr	r2, [pc, #56]	; 18678 <__assert_fail@plt+0x737c>
   1863c:	ldr	r3, [fp, #-16]
   18640:	str	r3, [r2]
   18644:	ldr	r2, [pc, #48]	; 1867c <__assert_fail@plt+0x7380>
   18648:	ldr	r3, [fp, #-16]
   1864c:	str	r3, [r2]
   18650:	ldr	r2, [pc, #40]	; 18680 <__assert_fail@plt+0x7384>
   18654:	ldr	r3, [fp, #-16]
   18658:	str	r3, [r2]
   1865c:	nop			; (mov r0, r0)
   18660:	sub	sp, fp, #4
   18664:	pop	{fp, pc}
   18668:	muleq	r3, r0, r1
   1866c:	andeq	pc, r1, r8, lsl r9	; <UNPREDICTABLE>
   18670:	andeq	pc, r1, r0, asr r9	; <UNPREDICTABLE>
   18674:	andeq	pc, r1, r8, asr r9	; <UNPREDICTABLE>
   18678:	andeq	r0, r3, r0, lsl #3
   1867c:	andeq	r0, r3, r0, asr #3
   18680:	andeq	r0, r3, r4, lsl #3
   18684:	push	{fp, lr}
   18688:	add	fp, sp, #4
   1868c:	sub	sp, sp, #16
   18690:	str	r0, [fp, #-16]
   18694:	bl	111c4 <__errno_location@plt>
   18698:	mov	r3, r0
   1869c:	ldr	r3, [r3]
   186a0:	str	r3, [fp, #-8]
   186a4:	ldr	r3, [fp, #-16]
   186a8:	cmp	r3, #0
   186ac:	beq	186b8 <__assert_fail@plt+0x73bc>
   186b0:	ldr	r3, [fp, #-16]
   186b4:	b	186bc <__assert_fail@plt+0x73c0>
   186b8:	ldr	r3, [pc, #48]	; 186f0 <__assert_fail@plt+0x73f4>
   186bc:	mov	r1, #48	; 0x30
   186c0:	mov	r0, r3
   186c4:	bl	1bf7c <__assert_fail@plt+0xac80>
   186c8:	mov	r3, r0
   186cc:	str	r3, [fp, #-12]
   186d0:	bl	111c4 <__errno_location@plt>
   186d4:	mov	r2, r0
   186d8:	ldr	r3, [fp, #-8]
   186dc:	str	r3, [r2]
   186e0:	ldr	r3, [fp, #-12]
   186e4:	mov	r0, r3
   186e8:	sub	sp, fp, #4
   186ec:	pop	{fp, pc}
   186f0:	andeq	r0, r3, r4, asr #3
   186f4:	push	{fp}		; (str fp, [sp, #-4]!)
   186f8:	add	fp, sp, #0
   186fc:	sub	sp, sp, #12
   18700:	str	r0, [fp, #-8]
   18704:	ldr	r3, [fp, #-8]
   18708:	cmp	r3, #0
   1870c:	beq	18718 <__assert_fail@plt+0x741c>
   18710:	ldr	r3, [fp, #-8]
   18714:	b	1871c <__assert_fail@plt+0x7420>
   18718:	ldr	r3, [pc, #16]	; 18730 <__assert_fail@plt+0x7434>
   1871c:	ldr	r3, [r3]
   18720:	mov	r0, r3
   18724:	add	sp, fp, #0
   18728:	pop	{fp}		; (ldr fp, [sp], #4)
   1872c:	bx	lr
   18730:	andeq	r0, r3, r4, asr #3
   18734:	push	{fp}		; (str fp, [sp, #-4]!)
   18738:	add	fp, sp, #0
   1873c:	sub	sp, sp, #12
   18740:	str	r0, [fp, #-8]
   18744:	str	r1, [fp, #-12]
   18748:	ldr	r3, [fp, #-8]
   1874c:	cmp	r3, #0
   18750:	beq	1875c <__assert_fail@plt+0x7460>
   18754:	ldr	r3, [fp, #-8]
   18758:	b	18760 <__assert_fail@plt+0x7464>
   1875c:	ldr	r3, [pc, #20]	; 18778 <__assert_fail@plt+0x747c>
   18760:	ldr	r2, [fp, #-12]
   18764:	str	r2, [r3]
   18768:	nop			; (mov r0, r0)
   1876c:	add	sp, fp, #0
   18770:	pop	{fp}		; (ldr fp, [sp], #4)
   18774:	bx	lr
   18778:	andeq	r0, r3, r4, asr #3
   1877c:	push	{fp}		; (str fp, [sp, #-4]!)
   18780:	add	fp, sp, #0
   18784:	sub	sp, sp, #36	; 0x24
   18788:	str	r0, [fp, #-24]	; 0xffffffe8
   1878c:	mov	r3, r1
   18790:	str	r2, [fp, #-32]	; 0xffffffe0
   18794:	strb	r3, [fp, #-25]	; 0xffffffe7
   18798:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   1879c:	strb	r3, [fp, #-5]
   187a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   187a4:	cmp	r3, #0
   187a8:	beq	187b4 <__assert_fail@plt+0x74b8>
   187ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   187b0:	b	187b8 <__assert_fail@plt+0x74bc>
   187b4:	ldr	r3, [pc, #124]	; 18838 <__assert_fail@plt+0x753c>
   187b8:	add	r2, r3, #8
   187bc:	ldrb	r3, [fp, #-5]
   187c0:	lsr	r3, r3, #5
   187c4:	uxtb	r3, r3
   187c8:	lsl	r3, r3, #2
   187cc:	add	r3, r2, r3
   187d0:	str	r3, [fp, #-12]
   187d4:	ldrb	r3, [fp, #-5]
   187d8:	and	r3, r3, #31
   187dc:	str	r3, [fp, #-16]
   187e0:	ldr	r3, [fp, #-12]
   187e4:	ldr	r2, [r3]
   187e8:	ldr	r3, [fp, #-16]
   187ec:	lsr	r3, r2, r3
   187f0:	and	r3, r3, #1
   187f4:	str	r3, [fp, #-20]	; 0xffffffec
   187f8:	ldr	r3, [fp, #-12]
   187fc:	ldr	r3, [r3]
   18800:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18804:	and	r1, r2, #1
   18808:	ldr	r2, [fp, #-20]	; 0xffffffec
   1880c:	eor	r1, r1, r2
   18810:	ldr	r2, [fp, #-16]
   18814:	lsl	r2, r1, r2
   18818:	eor	r2, r2, r3
   1881c:	ldr	r3, [fp, #-12]
   18820:	str	r2, [r3]
   18824:	ldr	r3, [fp, #-20]	; 0xffffffec
   18828:	mov	r0, r3
   1882c:	add	sp, fp, #0
   18830:	pop	{fp}		; (ldr fp, [sp], #4)
   18834:	bx	lr
   18838:	andeq	r0, r3, r4, asr #3
   1883c:	push	{fp}		; (str fp, [sp, #-4]!)
   18840:	add	fp, sp, #0
   18844:	sub	sp, sp, #20
   18848:	str	r0, [fp, #-16]
   1884c:	str	r1, [fp, #-20]	; 0xffffffec
   18850:	ldr	r3, [fp, #-16]
   18854:	cmp	r3, #0
   18858:	bne	18864 <__assert_fail@plt+0x7568>
   1885c:	ldr	r3, [pc, #44]	; 18890 <__assert_fail@plt+0x7594>
   18860:	str	r3, [fp, #-16]
   18864:	ldr	r3, [fp, #-16]
   18868:	ldr	r3, [r3, #4]
   1886c:	str	r3, [fp, #-8]
   18870:	ldr	r3, [fp, #-16]
   18874:	ldr	r2, [fp, #-20]	; 0xffffffec
   18878:	str	r2, [r3, #4]
   1887c:	ldr	r3, [fp, #-8]
   18880:	mov	r0, r3
   18884:	add	sp, fp, #0
   18888:	pop	{fp}		; (ldr fp, [sp], #4)
   1888c:	bx	lr
   18890:	andeq	r0, r3, r4, asr #3
   18894:	push	{fp, lr}
   18898:	add	fp, sp, #4
   1889c:	sub	sp, sp, #16
   188a0:	str	r0, [fp, #-8]
   188a4:	str	r1, [fp, #-12]
   188a8:	str	r2, [fp, #-16]
   188ac:	ldr	r3, [fp, #-8]
   188b0:	cmp	r3, #0
   188b4:	bne	188c0 <__assert_fail@plt+0x75c4>
   188b8:	ldr	r3, [pc, #76]	; 1890c <__assert_fail@plt+0x7610>
   188bc:	str	r3, [fp, #-8]
   188c0:	ldr	r3, [fp, #-8]
   188c4:	mov	r2, #10
   188c8:	str	r2, [r3]
   188cc:	ldr	r3, [fp, #-12]
   188d0:	cmp	r3, #0
   188d4:	beq	188e4 <__assert_fail@plt+0x75e8>
   188d8:	ldr	r3, [fp, #-16]
   188dc:	cmp	r3, #0
   188e0:	bne	188e8 <__assert_fail@plt+0x75ec>
   188e4:	bl	112b4 <abort@plt>
   188e8:	ldr	r3, [fp, #-8]
   188ec:	ldr	r2, [fp, #-12]
   188f0:	str	r2, [r3, #40]	; 0x28
   188f4:	ldr	r3, [fp, #-8]
   188f8:	ldr	r2, [fp, #-16]
   188fc:	str	r2, [r3, #44]	; 0x2c
   18900:	nop			; (mov r0, r0)
   18904:	sub	sp, fp, #4
   18908:	pop	{fp, pc}
   1890c:	andeq	r0, r3, r4, asr #3
   18910:	push	{fp, lr}
   18914:	add	fp, sp, #4
   18918:	sub	sp, sp, #56	; 0x38
   1891c:	str	r0, [fp, #-56]	; 0xffffffc8
   18920:	str	r1, [fp, #-60]	; 0xffffffc4
   18924:	sub	r3, fp, #52	; 0x34
   18928:	mov	r2, #48	; 0x30
   1892c:	mov	r1, #0
   18930:	mov	r0, r3
   18934:	bl	111dc <memset@plt>
   18938:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1893c:	cmp	r3, #10
   18940:	bne	18948 <__assert_fail@plt+0x764c>
   18944:	bl	112b4 <abort@plt>
   18948:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1894c:	str	r3, [fp, #-52]	; 0xffffffcc
   18950:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18954:	mov	lr, r3
   18958:	sub	ip, fp, #52	; 0x34
   1895c:	ldm	ip!, {r0, r1, r2, r3}
   18960:	stmia	lr!, {r0, r1, r2, r3}
   18964:	ldm	ip!, {r0, r1, r2, r3}
   18968:	stmia	lr!, {r0, r1, r2, r3}
   1896c:	ldm	ip, {r0, r1, r2, r3}
   18970:	stm	lr, {r0, r1, r2, r3}
   18974:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18978:	sub	sp, fp, #4
   1897c:	pop	{fp, pc}
   18980:	push	{fp, lr}
   18984:	add	fp, sp, #4
   18988:	sub	sp, sp, #16
   1898c:	str	r0, [fp, #-16]
   18990:	str	r1, [fp, #-20]	; 0xffffffec
   18994:	ldr	r0, [fp, #-16]
   18998:	bl	1117c <gettext@plt>
   1899c:	str	r0, [fp, #-8]
   189a0:	ldr	r2, [fp, #-8]
   189a4:	ldr	r3, [fp, #-16]
   189a8:	cmp	r2, r3
   189ac:	beq	189b8 <__assert_fail@plt+0x76bc>
   189b0:	ldr	r3, [fp, #-8]
   189b4:	b	18a48 <__assert_fail@plt+0x774c>
   189b8:	bl	1da24 <__assert_fail@plt+0xc728>
   189bc:	str	r0, [fp, #-12]
   189c0:	ldr	r1, [pc, #140]	; 18a54 <__assert_fail@plt+0x7758>
   189c4:	ldr	r0, [fp, #-12]
   189c8:	bl	1cf50 <__assert_fail@plt+0xbc54>
   189cc:	mov	r3, r0
   189d0:	cmp	r3, #0
   189d4:	bne	189f8 <__assert_fail@plt+0x76fc>
   189d8:	ldr	r3, [fp, #-16]
   189dc:	ldrb	r3, [r3]
   189e0:	cmp	r3, #96	; 0x60
   189e4:	bne	189f0 <__assert_fail@plt+0x76f4>
   189e8:	ldr	r3, [pc, #104]	; 18a58 <__assert_fail@plt+0x775c>
   189ec:	b	18a48 <__assert_fail@plt+0x774c>
   189f0:	ldr	r3, [pc, #100]	; 18a5c <__assert_fail@plt+0x7760>
   189f4:	b	18a48 <__assert_fail@plt+0x774c>
   189f8:	ldr	r1, [pc, #96]	; 18a60 <__assert_fail@plt+0x7764>
   189fc:	ldr	r0, [fp, #-12]
   18a00:	bl	1cf50 <__assert_fail@plt+0xbc54>
   18a04:	mov	r3, r0
   18a08:	cmp	r3, #0
   18a0c:	bne	18a30 <__assert_fail@plt+0x7734>
   18a10:	ldr	r3, [fp, #-16]
   18a14:	ldrb	r3, [r3]
   18a18:	cmp	r3, #96	; 0x60
   18a1c:	bne	18a28 <__assert_fail@plt+0x772c>
   18a20:	ldr	r3, [pc, #60]	; 18a64 <__assert_fail@plt+0x7768>
   18a24:	b	18a48 <__assert_fail@plt+0x774c>
   18a28:	ldr	r3, [pc, #56]	; 18a68 <__assert_fail@plt+0x776c>
   18a2c:	b	18a48 <__assert_fail@plt+0x774c>
   18a30:	ldr	r3, [fp, #-20]	; 0xffffffec
   18a34:	cmp	r3, #9
   18a38:	bne	18a44 <__assert_fail@plt+0x7748>
   18a3c:	ldr	r3, [pc, #40]	; 18a6c <__assert_fail@plt+0x7770>
   18a40:	b	18a48 <__assert_fail@plt+0x774c>
   18a44:	ldr	r3, [pc, #36]	; 18a70 <__assert_fail@plt+0x7774>
   18a48:	mov	r0, r3
   18a4c:	sub	sp, fp, #4
   18a50:	pop	{fp, pc}
   18a54:	andeq	pc, r1, r8, lsl sl	; <UNPREDICTABLE>
   18a58:	andeq	pc, r1, r0, lsr #20
   18a5c:	andeq	pc, r1, r4, lsr #20
   18a60:	andeq	pc, r1, r8, lsr #20
   18a64:	andeq	pc, r1, r0, lsr sl	; <UNPREDICTABLE>
   18a68:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   18a6c:	andeq	pc, r1, r8, lsr sl	; <UNPREDICTABLE>
   18a70:	andeq	pc, r1, ip, lsr sl	; <UNPREDICTABLE>
   18a74:	push	{r4, fp, lr}
   18a78:	add	fp, sp, #8
   18a7c:	sub	sp, sp, #116	; 0x74
   18a80:	str	r0, [fp, #-88]	; 0xffffffa8
   18a84:	str	r1, [fp, #-92]	; 0xffffffa4
   18a88:	str	r2, [fp, #-96]	; 0xffffffa0
   18a8c:	str	r3, [fp, #-100]	; 0xffffff9c
   18a90:	mov	r3, #0
   18a94:	str	r3, [fp, #-20]	; 0xffffffec
   18a98:	mov	r3, #0
   18a9c:	str	r3, [fp, #-24]	; 0xffffffe8
   18aa0:	mov	r3, #0
   18aa4:	str	r3, [fp, #-28]	; 0xffffffe4
   18aa8:	mov	r3, #0
   18aac:	str	r3, [fp, #-32]	; 0xffffffe0
   18ab0:	mov	r3, #0
   18ab4:	strb	r3, [fp, #-33]	; 0xffffffdf
   18ab8:	bl	110d4 <__ctype_get_mb_cur_max@plt>
   18abc:	mov	r3, r0
   18ac0:	cmp	r3, #1
   18ac4:	moveq	r3, #1
   18ac8:	movne	r3, #0
   18acc:	strb	r3, [fp, #-57]	; 0xffffffc7
   18ad0:	ldr	r3, [fp, #8]
   18ad4:	and	r3, r3, #2
   18ad8:	cmp	r3, #0
   18adc:	movne	r3, #1
   18ae0:	moveq	r3, #0
   18ae4:	strb	r3, [fp, #-34]	; 0xffffffde
   18ae8:	mov	r3, #0
   18aec:	strb	r3, [fp, #-35]	; 0xffffffdd
   18af0:	mov	r3, #0
   18af4:	strb	r3, [fp, #-36]	; 0xffffffdc
   18af8:	mov	r3, #1
   18afc:	strb	r3, [fp, #-37]	; 0xffffffdb
   18b00:	ldr	r3, [fp, #4]
   18b04:	cmp	r3, #10
   18b08:	ldrls	pc, [pc, r3, lsl #2]
   18b0c:	b	18d14 <__assert_fail@plt+0x7a18>
   18b10:	andeq	r8, r1, r8, lsl #26
   18b14:	andeq	r8, r1, r4, lsl #25
   18b18:	andeq	r8, r1, r8, lsr #25
   18b1c:	andeq	r8, r1, ip, ror ip
   18b20:	andeq	r8, r1, ip, lsl #25
   18b24:	andeq	r8, r1, ip, asr #22
   18b28:	andeq	r8, r1, ip, lsr fp
   18b2c:	andeq	r8, r1, ip, lsr #23
   18b30:	andeq	r8, r1, r0, asr #23
   18b34:	andeq	r8, r1, r0, asr #23
   18b38:	andeq	r8, r1, r0, asr #23
   18b3c:	mov	r3, #5
   18b40:	str	r3, [fp, #4]
   18b44:	mov	r3, #1
   18b48:	strb	r3, [fp, #-34]	; 0xffffffde
   18b4c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18b50:	eor	r3, r3, #1
   18b54:	uxtb	r3, r3
   18b58:	cmp	r3, #0
   18b5c:	beq	18b90 <__assert_fail@plt+0x7894>
   18b60:	ldr	r2, [fp, #-20]	; 0xffffffec
   18b64:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18b68:	cmp	r2, r3
   18b6c:	bcs	18b84 <__assert_fail@plt+0x7888>
   18b70:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18b74:	ldr	r3, [fp, #-20]	; 0xffffffec
   18b78:	add	r3, r2, r3
   18b7c:	mov	r2, #34	; 0x22
   18b80:	strb	r2, [r3]
   18b84:	ldr	r3, [fp, #-20]	; 0xffffffec
   18b88:	add	r3, r3, #1
   18b8c:	str	r3, [fp, #-20]	; 0xffffffec
   18b90:	mov	r3, #1
   18b94:	strb	r3, [fp, #-33]	; 0xffffffdf
   18b98:	ldr	r3, [pc, #3872]	; 19ac0 <__assert_fail@plt+0x87c4>
   18b9c:	str	r3, [fp, #-28]	; 0xffffffe4
   18ba0:	mov	r3, #1
   18ba4:	str	r3, [fp, #-32]	; 0xffffffe0
   18ba8:	b	18d18 <__assert_fail@plt+0x7a1c>
   18bac:	mov	r3, #1
   18bb0:	strb	r3, [fp, #-33]	; 0xffffffdf
   18bb4:	mov	r3, #0
   18bb8:	strb	r3, [fp, #-34]	; 0xffffffde
   18bbc:	b	18d18 <__assert_fail@plt+0x7a1c>
   18bc0:	ldr	r3, [fp, #4]
   18bc4:	cmp	r3, #10
   18bc8:	beq	18bec <__assert_fail@plt+0x78f0>
   18bcc:	ldr	r1, [fp, #4]
   18bd0:	ldr	r0, [pc, #3820]	; 19ac4 <__assert_fail@plt+0x87c8>
   18bd4:	bl	18980 <__assert_fail@plt+0x7684>
   18bd8:	str	r0, [fp, #16]
   18bdc:	ldr	r1, [fp, #4]
   18be0:	ldr	r0, [pc, #3808]	; 19ac8 <__assert_fail@plt+0x87cc>
   18be4:	bl	18980 <__assert_fail@plt+0x7684>
   18be8:	str	r0, [fp, #20]
   18bec:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18bf0:	eor	r3, r3, #1
   18bf4:	uxtb	r3, r3
   18bf8:	cmp	r3, #0
   18bfc:	beq	18c5c <__assert_fail@plt+0x7960>
   18c00:	ldr	r3, [fp, #16]
   18c04:	str	r3, [fp, #-28]	; 0xffffffe4
   18c08:	b	18c4c <__assert_fail@plt+0x7950>
   18c0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   18c10:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18c14:	cmp	r2, r3
   18c18:	bcs	18c34 <__assert_fail@plt+0x7938>
   18c1c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18c20:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c24:	add	r3, r2, r3
   18c28:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18c2c:	ldrb	r2, [r2]
   18c30:	strb	r2, [r3]
   18c34:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c38:	add	r3, r3, #1
   18c3c:	str	r3, [fp, #-20]	; 0xffffffec
   18c40:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18c44:	add	r3, r3, #1
   18c48:	str	r3, [fp, #-28]	; 0xffffffe4
   18c4c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18c50:	ldrb	r3, [r3]
   18c54:	cmp	r3, #0
   18c58:	bne	18c0c <__assert_fail@plt+0x7910>
   18c5c:	mov	r3, #1
   18c60:	strb	r3, [fp, #-33]	; 0xffffffdf
   18c64:	ldr	r3, [fp, #20]
   18c68:	str	r3, [fp, #-28]	; 0xffffffe4
   18c6c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   18c70:	bl	11188 <strlen@plt>
   18c74:	str	r0, [fp, #-32]	; 0xffffffe0
   18c78:	b	18d18 <__assert_fail@plt+0x7a1c>
   18c7c:	mov	r3, #1
   18c80:	strb	r3, [fp, #-33]	; 0xffffffdf
   18c84:	mov	r3, #1
   18c88:	strb	r3, [fp, #-34]	; 0xffffffde
   18c8c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18c90:	eor	r3, r3, #1
   18c94:	uxtb	r3, r3
   18c98:	cmp	r3, #0
   18c9c:	beq	18ca8 <__assert_fail@plt+0x79ac>
   18ca0:	mov	r3, #1
   18ca4:	strb	r3, [fp, #-33]	; 0xffffffdf
   18ca8:	mov	r3, #2
   18cac:	str	r3, [fp, #4]
   18cb0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18cb4:	eor	r3, r3, #1
   18cb8:	uxtb	r3, r3
   18cbc:	cmp	r3, #0
   18cc0:	beq	18cf4 <__assert_fail@plt+0x79f8>
   18cc4:	ldr	r2, [fp, #-20]	; 0xffffffec
   18cc8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18ccc:	cmp	r2, r3
   18cd0:	bcs	18ce8 <__assert_fail@plt+0x79ec>
   18cd4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18cd8:	ldr	r3, [fp, #-20]	; 0xffffffec
   18cdc:	add	r3, r2, r3
   18ce0:	mov	r2, #39	; 0x27
   18ce4:	strb	r2, [r3]
   18ce8:	ldr	r3, [fp, #-20]	; 0xffffffec
   18cec:	add	r3, r3, #1
   18cf0:	str	r3, [fp, #-20]	; 0xffffffec
   18cf4:	ldr	r3, [pc, #3532]	; 19ac8 <__assert_fail@plt+0x87cc>
   18cf8:	str	r3, [fp, #-28]	; 0xffffffe4
   18cfc:	mov	r3, #1
   18d00:	str	r3, [fp, #-32]	; 0xffffffe0
   18d04:	b	18d18 <__assert_fail@plt+0x7a1c>
   18d08:	mov	r3, #0
   18d0c:	strb	r3, [fp, #-34]	; 0xffffffde
   18d10:	b	18d18 <__assert_fail@plt+0x7a1c>
   18d14:	bl	112b4 <abort@plt>
   18d18:	mov	r3, #0
   18d1c:	str	r3, [fp, #-16]
   18d20:	b	19eb0 <__assert_fail@plt+0x8bb4>
   18d24:	mov	r3, #0
   18d28:	strb	r3, [fp, #-40]	; 0xffffffd8
   18d2c:	mov	r3, #0
   18d30:	strb	r3, [fp, #-41]	; 0xffffffd7
   18d34:	mov	r3, #0
   18d38:	strb	r3, [fp, #-42]	; 0xffffffd6
   18d3c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   18d40:	cmp	r3, #0
   18d44:	beq	18de0 <__assert_fail@plt+0x7ae4>
   18d48:	ldr	r3, [fp, #4]
   18d4c:	cmp	r3, #2
   18d50:	beq	18de0 <__assert_fail@plt+0x7ae4>
   18d54:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18d58:	cmp	r3, #0
   18d5c:	beq	18de0 <__assert_fail@plt+0x7ae4>
   18d60:	ldr	r2, [fp, #-16]
   18d64:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18d68:	add	r4, r2, r3
   18d6c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18d70:	cmn	r3, #1
   18d74:	bne	18d98 <__assert_fail@plt+0x7a9c>
   18d78:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18d7c:	cmp	r3, #1
   18d80:	bls	18d98 <__assert_fail@plt+0x7a9c>
   18d84:	ldr	r0, [fp, #-96]	; 0xffffffa0
   18d88:	bl	11188 <strlen@plt>
   18d8c:	str	r0, [fp, #-100]	; 0xffffff9c
   18d90:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18d94:	b	18d9c <__assert_fail@plt+0x7aa0>
   18d98:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18d9c:	cmp	r4, r3
   18da0:	bhi	18de0 <__assert_fail@plt+0x7ae4>
   18da4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   18da8:	ldr	r3, [fp, #-16]
   18dac:	add	r3, r2, r3
   18db0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18db4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   18db8:	mov	r0, r3
   18dbc:	bl	1105c <memcmp@plt>
   18dc0:	mov	r3, r0
   18dc4:	cmp	r3, #0
   18dc8:	bne	18de0 <__assert_fail@plt+0x7ae4>
   18dcc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18dd0:	cmp	r3, #0
   18dd4:	bne	1a06c <__assert_fail@plt+0x8d70>
   18dd8:	mov	r3, #1
   18ddc:	strb	r3, [fp, #-40]	; 0xffffffd8
   18de0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   18de4:	ldr	r3, [fp, #-16]
   18de8:	add	r3, r2, r3
   18dec:	ldrb	r3, [r3]
   18df0:	strb	r3, [fp, #-38]	; 0xffffffda
   18df4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   18df8:	cmp	r3, #126	; 0x7e
   18dfc:	ldrls	pc, [pc, r3, lsl #2]
   18e00:	b	1962c <__assert_fail@plt+0x8330>
   18e04:	andeq	r9, r1, r0
   18e08:	andeq	r9, r1, ip, lsr #12
   18e0c:	andeq	r9, r1, ip, lsr #12
   18e10:	andeq	r9, r1, ip, lsr #12
   18e14:	andeq	r9, r1, ip, lsr #12
   18e18:	andeq	r9, r1, ip, lsr #12
   18e1c:	andeq	r9, r1, ip, lsr #12
   18e20:	strdeq	r9, [r1], -r0
   18e24:	strdeq	r9, [r1], -ip
   18e28:	andeq	r9, r1, ip, lsr #8
   18e2c:	andeq	r9, r1, r4, lsl r4
   18e30:	andeq	r9, r1, r8, lsr r4
   18e34:	andeq	r9, r1, r8, lsl #8
   18e38:	andeq	r9, r1, r0, lsr #8
   18e3c:	andeq	r9, r1, ip, lsr #12
   18e40:	andeq	r9, r1, ip, lsr #12
   18e44:	andeq	r9, r1, ip, lsr #12
   18e48:	andeq	r9, r1, ip, lsr #12
   18e4c:	andeq	r9, r1, ip, lsr #12
   18e50:	andeq	r9, r1, ip, lsr #12
   18e54:	andeq	r9, r1, ip, lsr #12
   18e58:	andeq	r9, r1, ip, lsr #12
   18e5c:	andeq	r9, r1, ip, lsr #12
   18e60:	andeq	r9, r1, ip, lsr #12
   18e64:	andeq	r9, r1, ip, lsr #12
   18e68:	andeq	r9, r1, ip, lsr #12
   18e6c:	andeq	r9, r1, ip, lsr #12
   18e70:	andeq	r9, r1, ip, lsr #12
   18e74:	andeq	r9, r1, ip, lsr #12
   18e78:	andeq	r9, r1, ip, lsr #12
   18e7c:	andeq	r9, r1, ip, lsr #12
   18e80:	andeq	r9, r1, ip, lsr #12
   18e84:	andeq	r9, r1, r0, lsl r5
   18e88:	andeq	r9, r1, r8, lsl r5
   18e8c:	andeq	r9, r1, r8, lsl r5
   18e90:	andeq	r9, r1, r4, lsl #10
   18e94:	andeq	r9, r1, r8, lsl r5
   18e98:	andeq	r9, r1, r0, lsr #12
   18e9c:	andeq	r9, r1, r8, lsl r5
   18ea0:	andeq	r9, r1, r4, lsr r5
   18ea4:	andeq	r9, r1, r8, lsl r5
   18ea8:	andeq	r9, r1, r8, lsl r5
   18eac:	andeq	r9, r1, r8, lsl r5
   18eb0:	andeq	r9, r1, r0, lsr #12
   18eb4:	andeq	r9, r1, r0, lsr #12
   18eb8:	andeq	r9, r1, r0, lsr #12
   18ebc:	andeq	r9, r1, r0, lsr #12
   18ec0:	andeq	r9, r1, r0, lsr #12
   18ec4:	andeq	r9, r1, r0, lsr #12
   18ec8:	andeq	r9, r1, r0, lsr #12
   18ecc:	andeq	r9, r1, r0, lsr #12
   18ed0:	andeq	r9, r1, r0, lsr #12
   18ed4:	andeq	r9, r1, r0, lsr #12
   18ed8:	andeq	r9, r1, r0, lsr #12
   18edc:	andeq	r9, r1, r0, lsr #12
   18ee0:	andeq	r9, r1, r0, lsr #12
   18ee4:	andeq	r9, r1, r0, lsr #12
   18ee8:	andeq	r9, r1, r0, lsr #12
   18eec:	andeq	r9, r1, r0, lsr #12
   18ef0:	andeq	r9, r1, r8, lsl r5
   18ef4:	andeq	r9, r1, r8, lsl r5
   18ef8:	andeq	r9, r1, r8, lsl r5
   18efc:	andeq	r9, r1, r8, lsl r5
   18f00:	andeq	r9, r1, r0, ror #3
   18f04:	andeq	r9, r1, ip, lsr #12
   18f08:	andeq	r9, r1, r0, lsr #12
   18f0c:	andeq	r9, r1, r0, lsr #12
   18f10:	andeq	r9, r1, r0, lsr #12
   18f14:	andeq	r9, r1, r0, lsr #12
   18f18:	andeq	r9, r1, r0, lsr #12
   18f1c:	andeq	r9, r1, r0, lsr #12
   18f20:	andeq	r9, r1, r0, lsr #12
   18f24:	andeq	r9, r1, r0, lsr #12
   18f28:	andeq	r9, r1, r0, lsr #12
   18f2c:	andeq	r9, r1, r0, lsr #12
   18f30:	andeq	r9, r1, r0, lsr #12
   18f34:	andeq	r9, r1, r0, lsr #12
   18f38:	andeq	r9, r1, r0, lsr #12
   18f3c:	andeq	r9, r1, r0, lsr #12
   18f40:	andeq	r9, r1, r0, lsr #12
   18f44:	andeq	r9, r1, r0, lsr #12
   18f48:	andeq	r9, r1, r0, lsr #12
   18f4c:	andeq	r9, r1, r0, lsr #12
   18f50:	andeq	r9, r1, r0, lsr #12
   18f54:	andeq	r9, r1, r0, lsr #12
   18f58:	andeq	r9, r1, r0, lsr #12
   18f5c:	andeq	r9, r1, r0, lsr #12
   18f60:	andeq	r9, r1, r0, lsr #12
   18f64:	andeq	r9, r1, r0, lsr #12
   18f68:	andeq	r9, r1, r0, lsr #12
   18f6c:	andeq	r9, r1, r0, lsr #12
   18f70:	andeq	r9, r1, r8, lsl r5
   18f74:	andeq	r9, r1, r4, asr #8
   18f78:	andeq	r9, r1, r0, lsr #12
   18f7c:	andeq	r9, r1, r8, lsl r5
   18f80:	andeq	r9, r1, r0, lsr #12
   18f84:	andeq	r9, r1, r8, lsl r5
   18f88:	andeq	r9, r1, r0, lsr #12
   18f8c:	andeq	r9, r1, r0, lsr #12
   18f90:	andeq	r9, r1, r0, lsr #12
   18f94:	andeq	r9, r1, r0, lsr #12
   18f98:	andeq	r9, r1, r0, lsr #12
   18f9c:	andeq	r9, r1, r0, lsr #12
   18fa0:	andeq	r9, r1, r0, lsr #12
   18fa4:	andeq	r9, r1, r0, lsr #12
   18fa8:	andeq	r9, r1, r0, lsr #12
   18fac:	andeq	r9, r1, r0, lsr #12
   18fb0:	andeq	r9, r1, r0, lsr #12
   18fb4:	andeq	r9, r1, r0, lsr #12
   18fb8:	andeq	r9, r1, r0, lsr #12
   18fbc:	andeq	r9, r1, r0, lsr #12
   18fc0:	andeq	r9, r1, r0, lsr #12
   18fc4:	andeq	r9, r1, r0, lsr #12
   18fc8:	andeq	r9, r1, r0, lsr #12
   18fcc:	andeq	r9, r1, r0, lsr #12
   18fd0:	andeq	r9, r1, r0, lsr #12
   18fd4:	andeq	r9, r1, r0, lsr #12
   18fd8:	andeq	r9, r1, r0, lsr #12
   18fdc:	andeq	r9, r1, r0, lsr #12
   18fe0:	andeq	r9, r1, r0, lsr #12
   18fe4:	andeq	r9, r1, r0, lsr #12
   18fe8:	andeq	r9, r1, r0, lsr #12
   18fec:	andeq	r9, r1, r0, lsr #12
   18ff0:			; <UNDEFINED> instruction: 0x000194bc
   18ff4:	andeq	r9, r1, r8, lsl r5
   18ff8:			; <UNDEFINED> instruction: 0x000194bc
   18ffc:	andeq	r9, r1, r4, lsl #10
   19000:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   19004:	cmp	r3, #0
   19008:	beq	191cc <__assert_fail@plt+0x7ed0>
   1900c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19010:	cmp	r3, #0
   19014:	bne	1a074 <__assert_fail@plt+0x8d78>
   19018:	mov	r3, #1
   1901c:	strb	r3, [fp, #-41]	; 0xffffffd7
   19020:	ldr	r3, [fp, #4]
   19024:	cmp	r3, #2
   19028:	bne	190d8 <__assert_fail@plt+0x7ddc>
   1902c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   19030:	eor	r3, r3, #1
   19034:	uxtb	r3, r3
   19038:	cmp	r3, #0
   1903c:	beq	190d8 <__assert_fail@plt+0x7ddc>
   19040:	ldr	r2, [fp, #-20]	; 0xffffffec
   19044:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19048:	cmp	r2, r3
   1904c:	bcs	19064 <__assert_fail@plt+0x7d68>
   19050:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19054:	ldr	r3, [fp, #-20]	; 0xffffffec
   19058:	add	r3, r2, r3
   1905c:	mov	r2, #39	; 0x27
   19060:	strb	r2, [r3]
   19064:	ldr	r3, [fp, #-20]	; 0xffffffec
   19068:	add	r3, r3, #1
   1906c:	str	r3, [fp, #-20]	; 0xffffffec
   19070:	ldr	r2, [fp, #-20]	; 0xffffffec
   19074:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19078:	cmp	r2, r3
   1907c:	bcs	19094 <__assert_fail@plt+0x7d98>
   19080:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19084:	ldr	r3, [fp, #-20]	; 0xffffffec
   19088:	add	r3, r2, r3
   1908c:	mov	r2, #36	; 0x24
   19090:	strb	r2, [r3]
   19094:	ldr	r3, [fp, #-20]	; 0xffffffec
   19098:	add	r3, r3, #1
   1909c:	str	r3, [fp, #-20]	; 0xffffffec
   190a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   190a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   190a8:	cmp	r2, r3
   190ac:	bcs	190c4 <__assert_fail@plt+0x7dc8>
   190b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   190b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   190b8:	add	r3, r2, r3
   190bc:	mov	r2, #39	; 0x27
   190c0:	strb	r2, [r3]
   190c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   190c8:	add	r3, r3, #1
   190cc:	str	r3, [fp, #-20]	; 0xffffffec
   190d0:	mov	r3, #1
   190d4:	strb	r3, [fp, #-35]	; 0xffffffdd
   190d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   190dc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   190e0:	cmp	r2, r3
   190e4:	bcs	190fc <__assert_fail@plt+0x7e00>
   190e8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   190ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   190f0:	add	r3, r2, r3
   190f4:	mov	r2, #92	; 0x5c
   190f8:	strb	r2, [r3]
   190fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   19100:	add	r3, r3, #1
   19104:	str	r3, [fp, #-20]	; 0xffffffec
   19108:	ldr	r3, [fp, #4]
   1910c:	cmp	r3, #2
   19110:	beq	191c0 <__assert_fail@plt+0x7ec4>
   19114:	ldr	r3, [fp, #-16]
   19118:	add	r2, r3, #1
   1911c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19120:	cmp	r2, r3
   19124:	bcs	191c0 <__assert_fail@plt+0x7ec4>
   19128:	ldr	r3, [fp, #-16]
   1912c:	add	r3, r3, #1
   19130:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19134:	add	r3, r2, r3
   19138:	ldrb	r3, [r3]
   1913c:	cmp	r3, #47	; 0x2f
   19140:	bls	191c0 <__assert_fail@plt+0x7ec4>
   19144:	ldr	r3, [fp, #-16]
   19148:	add	r3, r3, #1
   1914c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19150:	add	r3, r2, r3
   19154:	ldrb	r3, [r3]
   19158:	cmp	r3, #57	; 0x39
   1915c:	bhi	191c0 <__assert_fail@plt+0x7ec4>
   19160:	ldr	r2, [fp, #-20]	; 0xffffffec
   19164:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19168:	cmp	r2, r3
   1916c:	bcs	19184 <__assert_fail@plt+0x7e88>
   19170:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19174:	ldr	r3, [fp, #-20]	; 0xffffffec
   19178:	add	r3, r2, r3
   1917c:	mov	r2, #48	; 0x30
   19180:	strb	r2, [r3]
   19184:	ldr	r3, [fp, #-20]	; 0xffffffec
   19188:	add	r3, r3, #1
   1918c:	str	r3, [fp, #-20]	; 0xffffffec
   19190:	ldr	r2, [fp, #-20]	; 0xffffffec
   19194:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19198:	cmp	r2, r3
   1919c:	bcs	191b4 <__assert_fail@plt+0x7eb8>
   191a0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   191a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   191a8:	add	r3, r2, r3
   191ac:	mov	r2, #48	; 0x30
   191b0:	strb	r2, [r3]
   191b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   191b8:	add	r3, r3, #1
   191bc:	str	r3, [fp, #-20]	; 0xffffffec
   191c0:	mov	r3, #48	; 0x30
   191c4:	strb	r3, [fp, #-38]	; 0xffffffda
   191c8:	b	19c08 <__assert_fail@plt+0x890c>
   191cc:	ldr	r3, [fp, #8]
   191d0:	and	r3, r3, #1
   191d4:	cmp	r3, #0
   191d8:	beq	19c08 <__assert_fail@plt+0x890c>
   191dc:	b	19ea4 <__assert_fail@plt+0x8ba8>
   191e0:	ldr	r3, [fp, #4]
   191e4:	cmp	r3, #2
   191e8:	beq	191f8 <__assert_fail@plt+0x7efc>
   191ec:	cmp	r3, #5
   191f0:	beq	19208 <__assert_fail@plt+0x7f0c>
   191f4:	b	193ec <__assert_fail@plt+0x80f0>
   191f8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   191fc:	cmp	r3, #0
   19200:	beq	193e0 <__assert_fail@plt+0x80e4>
   19204:	b	1a0b0 <__assert_fail@plt+0x8db4>
   19208:	ldr	r3, [fp, #8]
   1920c:	and	r3, r3, #4
   19210:	cmp	r3, #0
   19214:	beq	193e8 <__assert_fail@plt+0x80ec>
   19218:	ldr	r3, [fp, #-16]
   1921c:	add	r2, r3, #2
   19220:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19224:	cmp	r2, r3
   19228:	bcs	193e8 <__assert_fail@plt+0x80ec>
   1922c:	ldr	r3, [fp, #-16]
   19230:	add	r3, r3, #1
   19234:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19238:	add	r3, r2, r3
   1923c:	ldrb	r3, [r3]
   19240:	cmp	r3, #63	; 0x3f
   19244:	bne	193e8 <__assert_fail@plt+0x80ec>
   19248:	ldr	r3, [fp, #-16]
   1924c:	add	r3, r3, #2
   19250:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19254:	add	r3, r2, r3
   19258:	ldrb	r3, [r3]
   1925c:	sub	r3, r3, #33	; 0x21
   19260:	cmp	r3, #29
   19264:	ldrls	pc, [pc, r3, lsl #2]
   19268:	b	193d8 <__assert_fail@plt+0x80dc>
   1926c:	andeq	r9, r1, r4, ror #5
   19270:	ldrdeq	r9, [r1], -r8
   19274:	ldrdeq	r9, [r1], -r8
   19278:	ldrdeq	r9, [r1], -r8
   1927c:	ldrdeq	r9, [r1], -r8
   19280:	ldrdeq	r9, [r1], -r8
   19284:	andeq	r9, r1, r4, ror #5
   19288:	andeq	r9, r1, r4, ror #5
   1928c:	andeq	r9, r1, r4, ror #5
   19290:	ldrdeq	r9, [r1], -r8
   19294:	ldrdeq	r9, [r1], -r8
   19298:	ldrdeq	r9, [r1], -r8
   1929c:	andeq	r9, r1, r4, ror #5
   192a0:	ldrdeq	r9, [r1], -r8
   192a4:	andeq	r9, r1, r4, ror #5
   192a8:	ldrdeq	r9, [r1], -r8
   192ac:	ldrdeq	r9, [r1], -r8
   192b0:	ldrdeq	r9, [r1], -r8
   192b4:	ldrdeq	r9, [r1], -r8
   192b8:	ldrdeq	r9, [r1], -r8
   192bc:	ldrdeq	r9, [r1], -r8
   192c0:	ldrdeq	r9, [r1], -r8
   192c4:	ldrdeq	r9, [r1], -r8
   192c8:	ldrdeq	r9, [r1], -r8
   192cc:	ldrdeq	r9, [r1], -r8
   192d0:	ldrdeq	r9, [r1], -r8
   192d4:	ldrdeq	r9, [r1], -r8
   192d8:	andeq	r9, r1, r4, ror #5
   192dc:	andeq	r9, r1, r4, ror #5
   192e0:	andeq	r9, r1, r4, ror #5
   192e4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   192e8:	cmp	r3, #0
   192ec:	bne	1a07c <__assert_fail@plt+0x8d80>
   192f0:	ldr	r3, [fp, #-16]
   192f4:	add	r3, r3, #2
   192f8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   192fc:	add	r3, r2, r3
   19300:	ldrb	r3, [r3]
   19304:	strb	r3, [fp, #-38]	; 0xffffffda
   19308:	ldr	r3, [fp, #-16]
   1930c:	add	r3, r3, #2
   19310:	str	r3, [fp, #-16]
   19314:	ldr	r2, [fp, #-20]	; 0xffffffec
   19318:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1931c:	cmp	r2, r3
   19320:	bcs	19338 <__assert_fail@plt+0x803c>
   19324:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19328:	ldr	r3, [fp, #-20]	; 0xffffffec
   1932c:	add	r3, r2, r3
   19330:	mov	r2, #63	; 0x3f
   19334:	strb	r2, [r3]
   19338:	ldr	r3, [fp, #-20]	; 0xffffffec
   1933c:	add	r3, r3, #1
   19340:	str	r3, [fp, #-20]	; 0xffffffec
   19344:	ldr	r2, [fp, #-20]	; 0xffffffec
   19348:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1934c:	cmp	r2, r3
   19350:	bcs	19368 <__assert_fail@plt+0x806c>
   19354:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19358:	ldr	r3, [fp, #-20]	; 0xffffffec
   1935c:	add	r3, r2, r3
   19360:	mov	r2, #34	; 0x22
   19364:	strb	r2, [r3]
   19368:	ldr	r3, [fp, #-20]	; 0xffffffec
   1936c:	add	r3, r3, #1
   19370:	str	r3, [fp, #-20]	; 0xffffffec
   19374:	ldr	r2, [fp, #-20]	; 0xffffffec
   19378:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1937c:	cmp	r2, r3
   19380:	bcs	19398 <__assert_fail@plt+0x809c>
   19384:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19388:	ldr	r3, [fp, #-20]	; 0xffffffec
   1938c:	add	r3, r2, r3
   19390:	mov	r2, #34	; 0x22
   19394:	strb	r2, [r3]
   19398:	ldr	r3, [fp, #-20]	; 0xffffffec
   1939c:	add	r3, r3, #1
   193a0:	str	r3, [fp, #-20]	; 0xffffffec
   193a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   193a8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   193ac:	cmp	r2, r3
   193b0:	bcs	193c8 <__assert_fail@plt+0x80cc>
   193b4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   193b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   193bc:	add	r3, r2, r3
   193c0:	mov	r2, #63	; 0x3f
   193c4:	strb	r2, [r3]
   193c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   193cc:	add	r3, r3, #1
   193d0:	str	r3, [fp, #-20]	; 0xffffffec
   193d4:	b	193dc <__assert_fail@plt+0x80e0>
   193d8:	nop			; (mov r0, r0)
   193dc:	b	193e8 <__assert_fail@plt+0x80ec>
   193e0:	nop			; (mov r0, r0)
   193e4:	b	19c34 <__assert_fail@plt+0x8938>
   193e8:	nop			; (mov r0, r0)
   193ec:	b	19c34 <__assert_fail@plt+0x8938>
   193f0:	mov	r3, #97	; 0x61
   193f4:	strb	r3, [fp, #-39]	; 0xffffffd9
   193f8:	b	194a4 <__assert_fail@plt+0x81a8>
   193fc:	mov	r3, #98	; 0x62
   19400:	strb	r3, [fp, #-39]	; 0xffffffd9
   19404:	b	194a4 <__assert_fail@plt+0x81a8>
   19408:	mov	r3, #102	; 0x66
   1940c:	strb	r3, [fp, #-39]	; 0xffffffd9
   19410:	b	194a4 <__assert_fail@plt+0x81a8>
   19414:	mov	r3, #110	; 0x6e
   19418:	strb	r3, [fp, #-39]	; 0xffffffd9
   1941c:	b	1948c <__assert_fail@plt+0x8190>
   19420:	mov	r3, #114	; 0x72
   19424:	strb	r3, [fp, #-39]	; 0xffffffd9
   19428:	b	1948c <__assert_fail@plt+0x8190>
   1942c:	mov	r3, #116	; 0x74
   19430:	strb	r3, [fp, #-39]	; 0xffffffd9
   19434:	b	1948c <__assert_fail@plt+0x8190>
   19438:	mov	r3, #118	; 0x76
   1943c:	strb	r3, [fp, #-39]	; 0xffffffd9
   19440:	b	194a4 <__assert_fail@plt+0x81a8>
   19444:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19448:	strb	r3, [fp, #-39]	; 0xffffffd9
   1944c:	ldr	r3, [fp, #4]
   19450:	cmp	r3, #2
   19454:	bne	19468 <__assert_fail@plt+0x816c>
   19458:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1945c:	cmp	r3, #0
   19460:	beq	19dbc <__assert_fail@plt+0x8ac0>
   19464:	b	1a0b0 <__assert_fail@plt+0x8db4>
   19468:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1946c:	cmp	r3, #0
   19470:	beq	1948c <__assert_fail@plt+0x8190>
   19474:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19478:	cmp	r3, #0
   1947c:	beq	1948c <__assert_fail@plt+0x8190>
   19480:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19484:	cmp	r3, #0
   19488:	bne	19dc4 <__assert_fail@plt+0x8ac8>
   1948c:	ldr	r3, [fp, #4]
   19490:	cmp	r3, #2
   19494:	bne	194a4 <__assert_fail@plt+0x81a8>
   19498:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1949c:	cmp	r3, #0
   194a0:	bne	1a084 <__assert_fail@plt+0x8d88>
   194a4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   194a8:	cmp	r3, #0
   194ac:	beq	19c10 <__assert_fail@plt+0x8914>
   194b0:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   194b4:	strb	r3, [fp, #-38]	; 0xffffffda
   194b8:	b	19cbc <__assert_fail@plt+0x89c0>
   194bc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   194c0:	cmn	r3, #1
   194c4:	bne	194e8 <__assert_fail@plt+0x81ec>
   194c8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   194cc:	add	r3, r3, #1
   194d0:	ldrb	r3, [r3]
   194d4:	cmp	r3, #0
   194d8:	movne	r3, #1
   194dc:	moveq	r3, #0
   194e0:	uxtb	r3, r3
   194e4:	b	194fc <__assert_fail@plt+0x8200>
   194e8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   194ec:	cmp	r3, #1
   194f0:	movne	r3, #1
   194f4:	moveq	r3, #0
   194f8:	uxtb	r3, r3
   194fc:	cmp	r3, #0
   19500:	bne	19c18 <__assert_fail@plt+0x891c>
   19504:	ldr	r3, [fp, #-16]
   19508:	cmp	r3, #0
   1950c:	bne	19c20 <__assert_fail@plt+0x8924>
   19510:	mov	r3, #1
   19514:	strb	r3, [fp, #-42]	; 0xffffffd6
   19518:	ldr	r3, [fp, #4]
   1951c:	cmp	r3, #2
   19520:	bne	19c28 <__assert_fail@plt+0x892c>
   19524:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19528:	cmp	r3, #0
   1952c:	beq	19c28 <__assert_fail@plt+0x892c>
   19530:	b	1a0b0 <__assert_fail@plt+0x8db4>
   19534:	mov	r3, #1
   19538:	strb	r3, [fp, #-36]	; 0xffffffdc
   1953c:	mov	r3, #1
   19540:	strb	r3, [fp, #-42]	; 0xffffffd6
   19544:	ldr	r3, [fp, #4]
   19548:	cmp	r3, #2
   1954c:	bne	19c30 <__assert_fail@plt+0x8934>
   19550:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19554:	cmp	r3, #0
   19558:	bne	1a08c <__assert_fail@plt+0x8d90>
   1955c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19560:	cmp	r3, #0
   19564:	beq	19584 <__assert_fail@plt+0x8288>
   19568:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1956c:	cmp	r3, #0
   19570:	bne	19584 <__assert_fail@plt+0x8288>
   19574:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19578:	str	r3, [fp, #-24]	; 0xffffffe8
   1957c:	mov	r3, #0
   19580:	str	r3, [fp, #-92]	; 0xffffffa4
   19584:	ldr	r2, [fp, #-20]	; 0xffffffec
   19588:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1958c:	cmp	r2, r3
   19590:	bcs	195a8 <__assert_fail@plt+0x82ac>
   19594:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19598:	ldr	r3, [fp, #-20]	; 0xffffffec
   1959c:	add	r3, r2, r3
   195a0:	mov	r2, #39	; 0x27
   195a4:	strb	r2, [r3]
   195a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   195ac:	add	r3, r3, #1
   195b0:	str	r3, [fp, #-20]	; 0xffffffec
   195b4:	ldr	r2, [fp, #-20]	; 0xffffffec
   195b8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   195bc:	cmp	r2, r3
   195c0:	bcs	195d8 <__assert_fail@plt+0x82dc>
   195c4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   195c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   195cc:	add	r3, r2, r3
   195d0:	mov	r2, #92	; 0x5c
   195d4:	strb	r2, [r3]
   195d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   195dc:	add	r3, r3, #1
   195e0:	str	r3, [fp, #-20]	; 0xffffffec
   195e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   195e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   195ec:	cmp	r2, r3
   195f0:	bcs	19608 <__assert_fail@plt+0x830c>
   195f4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   195f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   195fc:	add	r3, r2, r3
   19600:	mov	r2, #39	; 0x27
   19604:	strb	r2, [r3]
   19608:	ldr	r3, [fp, #-20]	; 0xffffffec
   1960c:	add	r3, r3, #1
   19610:	str	r3, [fp, #-20]	; 0xffffffec
   19614:	mov	r3, #0
   19618:	strb	r3, [fp, #-35]	; 0xffffffdd
   1961c:	b	19c30 <__assert_fail@plt+0x8934>
   19620:	mov	r3, #1
   19624:	strb	r3, [fp, #-42]	; 0xffffffd6
   19628:	b	19c34 <__assert_fail@plt+0x8938>
   1962c:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   19630:	cmp	r3, #0
   19634:	beq	19674 <__assert_fail@plt+0x8378>
   19638:	mov	r3, #1
   1963c:	str	r3, [fp, #-48]	; 0xffffffd0
   19640:	bl	11164 <__ctype_b_loc@plt>
   19644:	mov	r3, r0
   19648:	ldr	r2, [r3]
   1964c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19650:	lsl	r3, r3, #1
   19654:	add	r3, r2, r3
   19658:	ldrh	r3, [r3]
   1965c:	and	r3, r3, #16384	; 0x4000
   19660:	cmp	r3, #0
   19664:	movne	r3, #1
   19668:	moveq	r3, #0
   1966c:	strb	r3, [fp, #-49]	; 0xffffffcf
   19670:	b	198c0 <__assert_fail@plt+0x85c4>
   19674:	sub	r3, fp, #76	; 0x4c
   19678:	mov	r2, #8
   1967c:	mov	r1, #0
   19680:	mov	r0, r3
   19684:	bl	111dc <memset@plt>
   19688:	mov	r3, #0
   1968c:	str	r3, [fp, #-48]	; 0xffffffd0
   19690:	mov	r3, #1
   19694:	strb	r3, [fp, #-49]	; 0xffffffcf
   19698:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1969c:	cmn	r3, #1
   196a0:	bne	196b0 <__assert_fail@plt+0x83b4>
   196a4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   196a8:	bl	11188 <strlen@plt>
   196ac:	str	r0, [fp, #-100]	; 0xffffff9c
   196b0:	ldr	r2, [fp, #-16]
   196b4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   196b8:	add	r3, r2, r3
   196bc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   196c0:	add	r1, r2, r3
   196c4:	ldr	r2, [fp, #-16]
   196c8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   196cc:	add	r3, r2, r3
   196d0:	ldr	r2, [fp, #-100]	; 0xffffff9c
   196d4:	sub	r2, r2, r3
   196d8:	sub	r3, fp, #76	; 0x4c
   196dc:	sub	r0, fp, #80	; 0x50
   196e0:	bl	1da80 <__assert_fail@plt+0xc784>
   196e4:	str	r0, [fp, #-64]	; 0xffffffc0
   196e8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   196ec:	cmp	r3, #0
   196f0:	beq	198b4 <__assert_fail@plt+0x85b8>
   196f4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   196f8:	cmn	r3, #1
   196fc:	bne	1970c <__assert_fail@plt+0x8410>
   19700:	mov	r3, #0
   19704:	strb	r3, [fp, #-49]	; 0xffffffcf
   19708:	b	198c0 <__assert_fail@plt+0x85c4>
   1970c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   19710:	cmn	r3, #2
   19714:	bne	1976c <__assert_fail@plt+0x8470>
   19718:	mov	r3, #0
   1971c:	strb	r3, [fp, #-49]	; 0xffffffcf
   19720:	b	19730 <__assert_fail@plt+0x8434>
   19724:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19728:	add	r3, r3, #1
   1972c:	str	r3, [fp, #-48]	; 0xffffffd0
   19730:	ldr	r2, [fp, #-16]
   19734:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19738:	add	r2, r2, r3
   1973c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19740:	cmp	r2, r3
   19744:	bcs	198bc <__assert_fail@plt+0x85c0>
   19748:	ldr	r2, [fp, #-16]
   1974c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19750:	add	r3, r2, r3
   19754:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19758:	add	r3, r2, r3
   1975c:	ldrb	r3, [r3]
   19760:	cmp	r3, #0
   19764:	bne	19724 <__assert_fail@plt+0x8428>
   19768:	b	198bc <__assert_fail@plt+0x85c0>
   1976c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19770:	cmp	r3, #0
   19774:	beq	19868 <__assert_fail@plt+0x856c>
   19778:	ldr	r3, [fp, #4]
   1977c:	cmp	r3, #2
   19780:	bne	19868 <__assert_fail@plt+0x856c>
   19784:	mov	r3, #1
   19788:	str	r3, [fp, #-56]	; 0xffffffc8
   1978c:	b	19858 <__assert_fail@plt+0x855c>
   19790:	ldr	r2, [fp, #-16]
   19794:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19798:	add	r2, r2, r3
   1979c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   197a0:	add	r3, r2, r3
   197a4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   197a8:	add	r3, r2, r3
   197ac:	ldrb	r3, [r3]
   197b0:	sub	r3, r3, #91	; 0x5b
   197b4:	cmp	r3, #33	; 0x21
   197b8:	ldrls	pc, [pc, r3, lsl #2]
   197bc:	b	19848 <__assert_fail@plt+0x854c>
   197c0:	muleq	r1, r4, r0
   197c4:	muleq	r1, r4, r0
   197c8:	andeq	r9, r1, r8, asr #16
   197cc:	muleq	r1, r4, r0
   197d0:	andeq	r9, r1, r8, asr #16
   197d4:	muleq	r1, r4, r0
   197d8:	andeq	r9, r1, r8, asr #16
   197dc:	andeq	r9, r1, r8, asr #16
   197e0:	andeq	r9, r1, r8, asr #16
   197e4:	andeq	r9, r1, r8, asr #16
   197e8:	andeq	r9, r1, r8, asr #16
   197ec:	andeq	r9, r1, r8, asr #16
   197f0:	andeq	r9, r1, r8, asr #16
   197f4:	andeq	r9, r1, r8, asr #16
   197f8:	andeq	r9, r1, r8, asr #16
   197fc:	andeq	r9, r1, r8, asr #16
   19800:	andeq	r9, r1, r8, asr #16
   19804:	andeq	r9, r1, r8, asr #16
   19808:	andeq	r9, r1, r8, asr #16
   1980c:	andeq	r9, r1, r8, asr #16
   19810:	andeq	r9, r1, r8, asr #16
   19814:	andeq	r9, r1, r8, asr #16
   19818:	andeq	r9, r1, r8, asr #16
   1981c:	andeq	r9, r1, r8, asr #16
   19820:	andeq	r9, r1, r8, asr #16
   19824:	andeq	r9, r1, r8, asr #16
   19828:	andeq	r9, r1, r8, asr #16
   1982c:	andeq	r9, r1, r8, asr #16
   19830:	andeq	r9, r1, r8, asr #16
   19834:	andeq	r9, r1, r8, asr #16
   19838:	andeq	r9, r1, r8, asr #16
   1983c:	andeq	r9, r1, r8, asr #16
   19840:	andeq	r9, r1, r8, asr #16
   19844:	muleq	r1, r4, r0
   19848:	nop			; (mov r0, r0)
   1984c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19850:	add	r3, r3, #1
   19854:	str	r3, [fp, #-56]	; 0xffffffc8
   19858:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1985c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   19860:	cmp	r2, r3
   19864:	bcc	19790 <__assert_fail@plt+0x8494>
   19868:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1986c:	mov	r0, r3
   19870:	bl	110a4 <iswprint@plt>
   19874:	mov	r3, r0
   19878:	cmp	r3, #0
   1987c:	bne	19888 <__assert_fail@plt+0x858c>
   19880:	mov	r3, #0
   19884:	strb	r3, [fp, #-49]	; 0xffffffcf
   19888:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1988c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   19890:	add	r3, r2, r3
   19894:	str	r3, [fp, #-48]	; 0xffffffd0
   19898:	sub	r3, fp, #76	; 0x4c
   1989c:	mov	r0, r3
   198a0:	bl	11050 <mbsinit@plt>
   198a4:	mov	r3, r0
   198a8:	cmp	r3, #0
   198ac:	beq	196b0 <__assert_fail@plt+0x83b4>
   198b0:	b	198c0 <__assert_fail@plt+0x85c4>
   198b4:	nop			; (mov r0, r0)
   198b8:	b	198c0 <__assert_fail@plt+0x85c4>
   198bc:	nop			; (mov r0, r0)
   198c0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   198c4:	strb	r3, [fp, #-42]	; 0xffffffd6
   198c8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   198cc:	cmp	r3, #1
   198d0:	bhi	198f4 <__assert_fail@plt+0x85f8>
   198d4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   198d8:	cmp	r3, #0
   198dc:	beq	19c34 <__assert_fail@plt+0x8938>
   198e0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   198e4:	eor	r3, r3, #1
   198e8:	uxtb	r3, r3
   198ec:	cmp	r3, #0
   198f0:	beq	19c34 <__assert_fail@plt+0x8938>
   198f4:	ldr	r2, [fp, #-16]
   198f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   198fc:	add	r3, r2, r3
   19900:	str	r3, [fp, #-68]	; 0xffffffbc
   19904:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   19908:	cmp	r3, #0
   1990c:	beq	19acc <__assert_fail@plt+0x87d0>
   19910:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   19914:	eor	r3, r3, #1
   19918:	uxtb	r3, r3
   1991c:	cmp	r3, #0
   19920:	beq	19acc <__assert_fail@plt+0x87d0>
   19924:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19928:	cmp	r3, #0
   1992c:	bne	1a09c <__assert_fail@plt+0x8da0>
   19930:	mov	r3, #1
   19934:	strb	r3, [fp, #-41]	; 0xffffffd7
   19938:	ldr	r3, [fp, #4]
   1993c:	cmp	r3, #2
   19940:	bne	199f0 <__assert_fail@plt+0x86f4>
   19944:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   19948:	eor	r3, r3, #1
   1994c:	uxtb	r3, r3
   19950:	cmp	r3, #0
   19954:	beq	199f0 <__assert_fail@plt+0x86f4>
   19958:	ldr	r2, [fp, #-20]	; 0xffffffec
   1995c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19960:	cmp	r2, r3
   19964:	bcs	1997c <__assert_fail@plt+0x8680>
   19968:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1996c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19970:	add	r3, r2, r3
   19974:	mov	r2, #39	; 0x27
   19978:	strb	r2, [r3]
   1997c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19980:	add	r3, r3, #1
   19984:	str	r3, [fp, #-20]	; 0xffffffec
   19988:	ldr	r2, [fp, #-20]	; 0xffffffec
   1998c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19990:	cmp	r2, r3
   19994:	bcs	199ac <__assert_fail@plt+0x86b0>
   19998:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1999c:	ldr	r3, [fp, #-20]	; 0xffffffec
   199a0:	add	r3, r2, r3
   199a4:	mov	r2, #36	; 0x24
   199a8:	strb	r2, [r3]
   199ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   199b0:	add	r3, r3, #1
   199b4:	str	r3, [fp, #-20]	; 0xffffffec
   199b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   199bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   199c0:	cmp	r2, r3
   199c4:	bcs	199dc <__assert_fail@plt+0x86e0>
   199c8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   199cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   199d0:	add	r3, r2, r3
   199d4:	mov	r2, #39	; 0x27
   199d8:	strb	r2, [r3]
   199dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   199e0:	add	r3, r3, #1
   199e4:	str	r3, [fp, #-20]	; 0xffffffec
   199e8:	mov	r3, #1
   199ec:	strb	r3, [fp, #-35]	; 0xffffffdd
   199f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   199f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   199f8:	cmp	r2, r3
   199fc:	bcs	19a14 <__assert_fail@plt+0x8718>
   19a00:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19a04:	ldr	r3, [fp, #-20]	; 0xffffffec
   19a08:	add	r3, r2, r3
   19a0c:	mov	r2, #92	; 0x5c
   19a10:	strb	r2, [r3]
   19a14:	ldr	r3, [fp, #-20]	; 0xffffffec
   19a18:	add	r3, r3, #1
   19a1c:	str	r3, [fp, #-20]	; 0xffffffec
   19a20:	ldr	r2, [fp, #-20]	; 0xffffffec
   19a24:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19a28:	cmp	r2, r3
   19a2c:	bcs	19a54 <__assert_fail@plt+0x8758>
   19a30:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19a34:	ldr	r3, [fp, #-20]	; 0xffffffec
   19a38:	add	r3, r2, r3
   19a3c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   19a40:	lsr	r2, r2, #6
   19a44:	uxtb	r2, r2
   19a48:	add	r2, r2, #48	; 0x30
   19a4c:	uxtb	r2, r2
   19a50:	strb	r2, [r3]
   19a54:	ldr	r3, [fp, #-20]	; 0xffffffec
   19a58:	add	r3, r3, #1
   19a5c:	str	r3, [fp, #-20]	; 0xffffffec
   19a60:	ldr	r2, [fp, #-20]	; 0xffffffec
   19a64:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19a68:	cmp	r2, r3
   19a6c:	bcs	19a9c <__assert_fail@plt+0x87a0>
   19a70:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19a74:	ldr	r3, [fp, #-20]	; 0xffffffec
   19a78:	add	r3, r2, r3
   19a7c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   19a80:	lsr	r2, r2, #3
   19a84:	uxtb	r2, r2
   19a88:	and	r2, r2, #7
   19a8c:	uxtb	r2, r2
   19a90:	add	r2, r2, #48	; 0x30
   19a94:	uxtb	r2, r2
   19a98:	strb	r2, [r3]
   19a9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19aa0:	add	r3, r3, #1
   19aa4:	str	r3, [fp, #-20]	; 0xffffffec
   19aa8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19aac:	and	r3, r3, #7
   19ab0:	uxtb	r3, r3
   19ab4:	add	r3, r3, #48	; 0x30
   19ab8:	strb	r3, [fp, #-38]	; 0xffffffda
   19abc:	b	19b10 <__assert_fail@plt+0x8814>
   19ac0:	andeq	pc, r1, r8, lsr sl	; <UNPREDICTABLE>
   19ac4:	andeq	pc, r1, r0, asr #20
   19ac8:	andeq	pc, r1, ip, lsr sl	; <UNPREDICTABLE>
   19acc:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   19ad0:	cmp	r3, #0
   19ad4:	beq	19b10 <__assert_fail@plt+0x8814>
   19ad8:	ldr	r2, [fp, #-20]	; 0xffffffec
   19adc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19ae0:	cmp	r2, r3
   19ae4:	bcs	19afc <__assert_fail@plt+0x8800>
   19ae8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19aec:	ldr	r3, [fp, #-20]	; 0xffffffec
   19af0:	add	r3, r2, r3
   19af4:	mov	r2, #92	; 0x5c
   19af8:	strb	r2, [r3]
   19afc:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b00:	add	r3, r3, #1
   19b04:	str	r3, [fp, #-20]	; 0xffffffec
   19b08:	mov	r3, #0
   19b0c:	strb	r3, [fp, #-40]	; 0xffffffd8
   19b10:	ldr	r3, [fp, #-16]
   19b14:	add	r2, r3, #1
   19b18:	ldr	r3, [fp, #-68]	; 0xffffffbc
   19b1c:	cmp	r2, r3
   19b20:	bcs	19c00 <__assert_fail@plt+0x8904>
   19b24:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   19b28:	cmp	r3, #0
   19b2c:	beq	19bac <__assert_fail@plt+0x88b0>
   19b30:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   19b34:	eor	r3, r3, #1
   19b38:	uxtb	r3, r3
   19b3c:	cmp	r3, #0
   19b40:	beq	19bac <__assert_fail@plt+0x88b0>
   19b44:	ldr	r2, [fp, #-20]	; 0xffffffec
   19b48:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19b4c:	cmp	r2, r3
   19b50:	bcs	19b68 <__assert_fail@plt+0x886c>
   19b54:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19b58:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b5c:	add	r3, r2, r3
   19b60:	mov	r2, #39	; 0x27
   19b64:	strb	r2, [r3]
   19b68:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b6c:	add	r3, r3, #1
   19b70:	str	r3, [fp, #-20]	; 0xffffffec
   19b74:	ldr	r2, [fp, #-20]	; 0xffffffec
   19b78:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19b7c:	cmp	r2, r3
   19b80:	bcs	19b98 <__assert_fail@plt+0x889c>
   19b84:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19b88:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b8c:	add	r3, r2, r3
   19b90:	mov	r2, #39	; 0x27
   19b94:	strb	r2, [r3]
   19b98:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b9c:	add	r3, r3, #1
   19ba0:	str	r3, [fp, #-20]	; 0xffffffec
   19ba4:	mov	r3, #0
   19ba8:	strb	r3, [fp, #-35]	; 0xffffffdd
   19bac:	ldr	r2, [fp, #-20]	; 0xffffffec
   19bb0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19bb4:	cmp	r2, r3
   19bb8:	bcs	19bd0 <__assert_fail@plt+0x88d4>
   19bbc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19bc0:	ldr	r3, [fp, #-20]	; 0xffffffec
   19bc4:	add	r3, r2, r3
   19bc8:	ldrb	r2, [fp, #-38]	; 0xffffffda
   19bcc:	strb	r2, [r3]
   19bd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   19bd4:	add	r3, r3, #1
   19bd8:	str	r3, [fp, #-20]	; 0xffffffec
   19bdc:	ldr	r3, [fp, #-16]
   19be0:	add	r3, r3, #1
   19be4:	str	r3, [fp, #-16]
   19be8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19bec:	ldr	r3, [fp, #-16]
   19bf0:	add	r3, r2, r3
   19bf4:	ldrb	r3, [r3]
   19bf8:	strb	r3, [fp, #-38]	; 0xffffffda
   19bfc:	b	19904 <__assert_fail@plt+0x8608>
   19c00:	nop			; (mov r0, r0)
   19c04:	b	19dd0 <__assert_fail@plt+0x8ad4>
   19c08:	nop			; (mov r0, r0)
   19c0c:	b	19c34 <__assert_fail@plt+0x8938>
   19c10:	nop			; (mov r0, r0)
   19c14:	b	19c34 <__assert_fail@plt+0x8938>
   19c18:	nop			; (mov r0, r0)
   19c1c:	b	19c34 <__assert_fail@plt+0x8938>
   19c20:	nop			; (mov r0, r0)
   19c24:	b	19c34 <__assert_fail@plt+0x8938>
   19c28:	nop			; (mov r0, r0)
   19c2c:	b	19c34 <__assert_fail@plt+0x8938>
   19c30:	nop			; (mov r0, r0)
   19c34:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   19c38:	eor	r3, r3, #1
   19c3c:	uxtb	r3, r3
   19c40:	cmp	r3, #0
   19c44:	bne	19c54 <__assert_fail@plt+0x8958>
   19c48:	ldr	r3, [fp, #4]
   19c4c:	cmp	r3, #2
   19c50:	bne	19c68 <__assert_fail@plt+0x896c>
   19c54:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19c58:	eor	r3, r3, #1
   19c5c:	uxtb	r3, r3
   19c60:	cmp	r3, #0
   19c64:	bne	19ca8 <__assert_fail@plt+0x89ac>
   19c68:	ldr	r3, [fp, #12]
   19c6c:	cmp	r3, #0
   19c70:	beq	19ca8 <__assert_fail@plt+0x89ac>
   19c74:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19c78:	lsr	r3, r3, #5
   19c7c:	uxtb	r3, r3
   19c80:	lsl	r3, r3, #2
   19c84:	ldr	r2, [fp, #12]
   19c88:	add	r3, r2, r3
   19c8c:	ldr	r2, [r3]
   19c90:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19c94:	and	r3, r3, #31
   19c98:	lsr	r3, r2, r3
   19c9c:	and	r3, r3, #1
   19ca0:	cmp	r3, #0
   19ca4:	bne	19cbc <__assert_fail@plt+0x89c0>
   19ca8:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   19cac:	eor	r3, r3, #1
   19cb0:	uxtb	r3, r3
   19cb4:	cmp	r3, #0
   19cb8:	bne	19dcc <__assert_fail@plt+0x8ad0>
   19cbc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19cc0:	cmp	r3, #0
   19cc4:	bne	1a0a4 <__assert_fail@plt+0x8da8>
   19cc8:	mov	r3, #1
   19ccc:	strb	r3, [fp, #-41]	; 0xffffffd7
   19cd0:	ldr	r3, [fp, #4]
   19cd4:	cmp	r3, #2
   19cd8:	bne	19d88 <__assert_fail@plt+0x8a8c>
   19cdc:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   19ce0:	eor	r3, r3, #1
   19ce4:	uxtb	r3, r3
   19ce8:	cmp	r3, #0
   19cec:	beq	19d88 <__assert_fail@plt+0x8a8c>
   19cf0:	ldr	r2, [fp, #-20]	; 0xffffffec
   19cf4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19cf8:	cmp	r2, r3
   19cfc:	bcs	19d14 <__assert_fail@plt+0x8a18>
   19d00:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19d04:	ldr	r3, [fp, #-20]	; 0xffffffec
   19d08:	add	r3, r2, r3
   19d0c:	mov	r2, #39	; 0x27
   19d10:	strb	r2, [r3]
   19d14:	ldr	r3, [fp, #-20]	; 0xffffffec
   19d18:	add	r3, r3, #1
   19d1c:	str	r3, [fp, #-20]	; 0xffffffec
   19d20:	ldr	r2, [fp, #-20]	; 0xffffffec
   19d24:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19d28:	cmp	r2, r3
   19d2c:	bcs	19d44 <__assert_fail@plt+0x8a48>
   19d30:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19d34:	ldr	r3, [fp, #-20]	; 0xffffffec
   19d38:	add	r3, r2, r3
   19d3c:	mov	r2, #36	; 0x24
   19d40:	strb	r2, [r3]
   19d44:	ldr	r3, [fp, #-20]	; 0xffffffec
   19d48:	add	r3, r3, #1
   19d4c:	str	r3, [fp, #-20]	; 0xffffffec
   19d50:	ldr	r2, [fp, #-20]	; 0xffffffec
   19d54:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19d58:	cmp	r2, r3
   19d5c:	bcs	19d74 <__assert_fail@plt+0x8a78>
   19d60:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19d64:	ldr	r3, [fp, #-20]	; 0xffffffec
   19d68:	add	r3, r2, r3
   19d6c:	mov	r2, #39	; 0x27
   19d70:	strb	r2, [r3]
   19d74:	ldr	r3, [fp, #-20]	; 0xffffffec
   19d78:	add	r3, r3, #1
   19d7c:	str	r3, [fp, #-20]	; 0xffffffec
   19d80:	mov	r3, #1
   19d84:	strb	r3, [fp, #-35]	; 0xffffffdd
   19d88:	ldr	r2, [fp, #-20]	; 0xffffffec
   19d8c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19d90:	cmp	r2, r3
   19d94:	bcs	19dac <__assert_fail@plt+0x8ab0>
   19d98:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19d9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19da0:	add	r3, r2, r3
   19da4:	mov	r2, #92	; 0x5c
   19da8:	strb	r2, [r3]
   19dac:	ldr	r3, [fp, #-20]	; 0xffffffec
   19db0:	add	r3, r3, #1
   19db4:	str	r3, [fp, #-20]	; 0xffffffec
   19db8:	b	19dd0 <__assert_fail@plt+0x8ad4>
   19dbc:	nop			; (mov r0, r0)
   19dc0:	b	19dd0 <__assert_fail@plt+0x8ad4>
   19dc4:	nop			; (mov r0, r0)
   19dc8:	b	19dd0 <__assert_fail@plt+0x8ad4>
   19dcc:	nop			; (mov r0, r0)
   19dd0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   19dd4:	cmp	r3, #0
   19dd8:	beq	19e58 <__assert_fail@plt+0x8b5c>
   19ddc:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   19de0:	eor	r3, r3, #1
   19de4:	uxtb	r3, r3
   19de8:	cmp	r3, #0
   19dec:	beq	19e58 <__assert_fail@plt+0x8b5c>
   19df0:	ldr	r2, [fp, #-20]	; 0xffffffec
   19df4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19df8:	cmp	r2, r3
   19dfc:	bcs	19e14 <__assert_fail@plt+0x8b18>
   19e00:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19e04:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e08:	add	r3, r2, r3
   19e0c:	mov	r2, #39	; 0x27
   19e10:	strb	r2, [r3]
   19e14:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e18:	add	r3, r3, #1
   19e1c:	str	r3, [fp, #-20]	; 0xffffffec
   19e20:	ldr	r2, [fp, #-20]	; 0xffffffec
   19e24:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19e28:	cmp	r2, r3
   19e2c:	bcs	19e44 <__assert_fail@plt+0x8b48>
   19e30:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19e34:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e38:	add	r3, r2, r3
   19e3c:	mov	r2, #39	; 0x27
   19e40:	strb	r2, [r3]
   19e44:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e48:	add	r3, r3, #1
   19e4c:	str	r3, [fp, #-20]	; 0xffffffec
   19e50:	mov	r3, #0
   19e54:	strb	r3, [fp, #-35]	; 0xffffffdd
   19e58:	ldr	r2, [fp, #-20]	; 0xffffffec
   19e5c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19e60:	cmp	r2, r3
   19e64:	bcs	19e7c <__assert_fail@plt+0x8b80>
   19e68:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19e6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e70:	add	r3, r2, r3
   19e74:	ldrb	r2, [fp, #-38]	; 0xffffffda
   19e78:	strb	r2, [r3]
   19e7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e80:	add	r3, r3, #1
   19e84:	str	r3, [fp, #-20]	; 0xffffffec
   19e88:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   19e8c:	eor	r3, r3, #1
   19e90:	uxtb	r3, r3
   19e94:	cmp	r3, #0
   19e98:	beq	19ea4 <__assert_fail@plt+0x8ba8>
   19e9c:	mov	r3, #0
   19ea0:	strb	r3, [fp, #-37]	; 0xffffffdb
   19ea4:	ldr	r3, [fp, #-16]
   19ea8:	add	r3, r3, #1
   19eac:	str	r3, [fp, #-16]
   19eb0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19eb4:	cmn	r3, #1
   19eb8:	bne	19ee0 <__assert_fail@plt+0x8be4>
   19ebc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19ec0:	ldr	r3, [fp, #-16]
   19ec4:	add	r3, r2, r3
   19ec8:	ldrb	r3, [r3]
   19ecc:	cmp	r3, #0
   19ed0:	movne	r3, #1
   19ed4:	moveq	r3, #0
   19ed8:	uxtb	r3, r3
   19edc:	b	19ef8 <__assert_fail@plt+0x8bfc>
   19ee0:	ldr	r2, [fp, #-16]
   19ee4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19ee8:	cmp	r2, r3
   19eec:	movne	r3, #1
   19ef0:	moveq	r3, #0
   19ef4:	uxtb	r3, r3
   19ef8:	cmp	r3, #0
   19efc:	bne	18d24 <__assert_fail@plt+0x7a28>
   19f00:	ldr	r3, [fp, #-20]	; 0xffffffec
   19f04:	cmp	r3, #0
   19f08:	bne	19f24 <__assert_fail@plt+0x8c28>
   19f0c:	ldr	r3, [fp, #4]
   19f10:	cmp	r3, #2
   19f14:	bne	19f24 <__assert_fail@plt+0x8c28>
   19f18:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19f1c:	cmp	r3, #0
   19f20:	bne	1a0ac <__assert_fail@plt+0x8db0>
   19f24:	ldr	r3, [fp, #4]
   19f28:	cmp	r3, #2
   19f2c:	bne	19fcc <__assert_fail@plt+0x8cd0>
   19f30:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19f34:	eor	r3, r3, #1
   19f38:	uxtb	r3, r3
   19f3c:	cmp	r3, #0
   19f40:	beq	19fcc <__assert_fail@plt+0x8cd0>
   19f44:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   19f48:	cmp	r3, #0
   19f4c:	beq	19fcc <__assert_fail@plt+0x8cd0>
   19f50:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   19f54:	cmp	r3, #0
   19f58:	beq	19fa0 <__assert_fail@plt+0x8ca4>
   19f5c:	ldr	r3, [fp, #20]
   19f60:	str	r3, [sp, #16]
   19f64:	ldr	r3, [fp, #16]
   19f68:	str	r3, [sp, #12]
   19f6c:	ldr	r3, [fp, #12]
   19f70:	str	r3, [sp, #8]
   19f74:	ldr	r3, [fp, #8]
   19f78:	str	r3, [sp, #4]
   19f7c:	mov	r3, #5
   19f80:	str	r3, [sp]
   19f84:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19f88:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19f8c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19f90:	ldr	r0, [fp, #-88]	; 0xffffffa8
   19f94:	bl	18a74 <__assert_fail@plt+0x7778>
   19f98:	mov	r3, r0
   19f9c:	b	1a114 <__assert_fail@plt+0x8e18>
   19fa0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19fa4:	cmp	r3, #0
   19fa8:	bne	19fcc <__assert_fail@plt+0x8cd0>
   19fac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19fb0:	cmp	r3, #0
   19fb4:	beq	19fcc <__assert_fail@plt+0x8cd0>
   19fb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19fbc:	str	r3, [fp, #-92]	; 0xffffffa4
   19fc0:	mov	r3, #0
   19fc4:	str	r3, [fp, #-20]	; 0xffffffec
   19fc8:	b	18b00 <__assert_fail@plt+0x7804>
   19fcc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19fd0:	cmp	r3, #0
   19fd4:	beq	1a040 <__assert_fail@plt+0x8d44>
   19fd8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19fdc:	eor	r3, r3, #1
   19fe0:	uxtb	r3, r3
   19fe4:	cmp	r3, #0
   19fe8:	beq	1a040 <__assert_fail@plt+0x8d44>
   19fec:	b	1a030 <__assert_fail@plt+0x8d34>
   19ff0:	ldr	r2, [fp, #-20]	; 0xffffffec
   19ff4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19ff8:	cmp	r2, r3
   19ffc:	bcs	1a018 <__assert_fail@plt+0x8d1c>
   1a000:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a004:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a008:	add	r3, r2, r3
   1a00c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1a010:	ldrb	r2, [r2]
   1a014:	strb	r2, [r3]
   1a018:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a01c:	add	r3, r3, #1
   1a020:	str	r3, [fp, #-20]	; 0xffffffec
   1a024:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a028:	add	r3, r3, #1
   1a02c:	str	r3, [fp, #-28]	; 0xffffffe4
   1a030:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a034:	ldrb	r3, [r3]
   1a038:	cmp	r3, #0
   1a03c:	bne	19ff0 <__assert_fail@plt+0x8cf4>
   1a040:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a044:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a048:	cmp	r2, r3
   1a04c:	bcs	1a064 <__assert_fail@plt+0x8d68>
   1a050:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a054:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a058:	add	r3, r2, r3
   1a05c:	mov	r2, #0
   1a060:	strb	r2, [r3]
   1a064:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a068:	b	1a114 <__assert_fail@plt+0x8e18>
   1a06c:	nop			; (mov r0, r0)
   1a070:	b	1a0b0 <__assert_fail@plt+0x8db4>
   1a074:	nop			; (mov r0, r0)
   1a078:	b	1a0b0 <__assert_fail@plt+0x8db4>
   1a07c:	nop			; (mov r0, r0)
   1a080:	b	1a0b0 <__assert_fail@plt+0x8db4>
   1a084:	nop			; (mov r0, r0)
   1a088:	b	1a0b0 <__assert_fail@plt+0x8db4>
   1a08c:	nop			; (mov r0, r0)
   1a090:	b	1a0b0 <__assert_fail@plt+0x8db4>
   1a094:	nop			; (mov r0, r0)
   1a098:	b	1a0b0 <__assert_fail@plt+0x8db4>
   1a09c:	nop			; (mov r0, r0)
   1a0a0:	b	1a0b0 <__assert_fail@plt+0x8db4>
   1a0a4:	nop			; (mov r0, r0)
   1a0a8:	b	1a0b0 <__assert_fail@plt+0x8db4>
   1a0ac:	nop			; (mov r0, r0)
   1a0b0:	ldr	r3, [fp, #4]
   1a0b4:	cmp	r3, #2
   1a0b8:	bne	1a0d0 <__assert_fail@plt+0x8dd4>
   1a0bc:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1a0c0:	cmp	r3, #0
   1a0c4:	beq	1a0d0 <__assert_fail@plt+0x8dd4>
   1a0c8:	mov	r3, #4
   1a0cc:	str	r3, [fp, #4]
   1a0d0:	ldr	r3, [fp, #8]
   1a0d4:	bic	r3, r3, #2
   1a0d8:	ldr	r2, [fp, #20]
   1a0dc:	str	r2, [sp, #16]
   1a0e0:	ldr	r2, [fp, #16]
   1a0e4:	str	r2, [sp, #12]
   1a0e8:	mov	r2, #0
   1a0ec:	str	r2, [sp, #8]
   1a0f0:	str	r3, [sp, #4]
   1a0f4:	ldr	r3, [fp, #4]
   1a0f8:	str	r3, [sp]
   1a0fc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1a100:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1a104:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1a108:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1a10c:	bl	18a74 <__assert_fail@plt+0x7778>
   1a110:	mov	r3, r0
   1a114:	mov	r0, r3
   1a118:	sub	sp, fp, #8
   1a11c:	pop	{r4, fp, pc}
   1a120:	push	{fp, lr}
   1a124:	add	fp, sp, #4
   1a128:	sub	sp, sp, #56	; 0x38
   1a12c:	str	r0, [fp, #-24]	; 0xffffffe8
   1a130:	str	r1, [fp, #-28]	; 0xffffffe4
   1a134:	str	r2, [fp, #-32]	; 0xffffffe0
   1a138:	str	r3, [fp, #-36]	; 0xffffffdc
   1a13c:	ldr	r3, [fp, #4]
   1a140:	cmp	r3, #0
   1a144:	beq	1a150 <__assert_fail@plt+0x8e54>
   1a148:	ldr	r3, [fp, #4]
   1a14c:	b	1a154 <__assert_fail@plt+0x8e58>
   1a150:	ldr	r3, [pc, #132]	; 1a1dc <__assert_fail@plt+0x8ee0>
   1a154:	str	r3, [fp, #-8]
   1a158:	bl	111c4 <__errno_location@plt>
   1a15c:	mov	r3, r0
   1a160:	ldr	r3, [r3]
   1a164:	str	r3, [fp, #-12]
   1a168:	ldr	r3, [fp, #-8]
   1a16c:	ldr	r3, [r3]
   1a170:	ldr	r2, [fp, #-8]
   1a174:	ldr	r2, [r2, #4]
   1a178:	ldr	r1, [fp, #-8]
   1a17c:	add	r1, r1, #8
   1a180:	ldr	r0, [fp, #-8]
   1a184:	ldr	r0, [r0, #40]	; 0x28
   1a188:	ldr	ip, [fp, #-8]
   1a18c:	ldr	ip, [ip, #44]	; 0x2c
   1a190:	str	ip, [sp, #16]
   1a194:	str	r0, [sp, #12]
   1a198:	str	r1, [sp, #8]
   1a19c:	str	r2, [sp, #4]
   1a1a0:	str	r3, [sp]
   1a1a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a1a8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a1ac:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1a1b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a1b4:	bl	18a74 <__assert_fail@plt+0x7778>
   1a1b8:	str	r0, [fp, #-16]
   1a1bc:	bl	111c4 <__errno_location@plt>
   1a1c0:	mov	r2, r0
   1a1c4:	ldr	r3, [fp, #-12]
   1a1c8:	str	r3, [r2]
   1a1cc:	ldr	r3, [fp, #-16]
   1a1d0:	mov	r0, r3
   1a1d4:	sub	sp, fp, #4
   1a1d8:	pop	{fp, pc}
   1a1dc:	andeq	r0, r3, r4, asr #3
   1a1e0:	push	{fp, lr}
   1a1e4:	add	fp, sp, #4
   1a1e8:	sub	sp, sp, #16
   1a1ec:	str	r0, [fp, #-8]
   1a1f0:	str	r1, [fp, #-12]
   1a1f4:	str	r2, [fp, #-16]
   1a1f8:	ldr	r3, [fp, #-16]
   1a1fc:	mov	r2, #0
   1a200:	ldr	r1, [fp, #-12]
   1a204:	ldr	r0, [fp, #-8]
   1a208:	bl	1a21c <__assert_fail@plt+0x8f20>
   1a20c:	mov	r3, r0
   1a210:	mov	r0, r3
   1a214:	sub	sp, fp, #4
   1a218:	pop	{fp, pc}
   1a21c:	push	{fp, lr}
   1a220:	add	fp, sp, #4
   1a224:	sub	sp, sp, #64	; 0x40
   1a228:	str	r0, [fp, #-32]	; 0xffffffe0
   1a22c:	str	r1, [fp, #-36]	; 0xffffffdc
   1a230:	str	r2, [fp, #-40]	; 0xffffffd8
   1a234:	str	r3, [fp, #-44]	; 0xffffffd4
   1a238:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a23c:	cmp	r3, #0
   1a240:	beq	1a24c <__assert_fail@plt+0x8f50>
   1a244:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a248:	b	1a250 <__assert_fail@plt+0x8f54>
   1a24c:	ldr	r3, [pc, #292]	; 1a378 <__assert_fail@plt+0x907c>
   1a250:	str	r3, [fp, #-8]
   1a254:	bl	111c4 <__errno_location@plt>
   1a258:	mov	r3, r0
   1a25c:	ldr	r3, [r3]
   1a260:	str	r3, [fp, #-12]
   1a264:	ldr	r3, [fp, #-8]
   1a268:	ldr	r3, [r3, #4]
   1a26c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1a270:	cmp	r2, #0
   1a274:	moveq	r2, #1
   1a278:	movne	r2, #0
   1a27c:	uxtb	r2, r2
   1a280:	orr	r3, r3, r2
   1a284:	str	r3, [fp, #-16]
   1a288:	ldr	r3, [fp, #-8]
   1a28c:	ldr	r3, [r3]
   1a290:	ldr	r2, [fp, #-8]
   1a294:	add	r2, r2, #8
   1a298:	ldr	r1, [fp, #-8]
   1a29c:	ldr	r1, [r1, #40]	; 0x28
   1a2a0:	ldr	r0, [fp, #-8]
   1a2a4:	ldr	r0, [r0, #44]	; 0x2c
   1a2a8:	str	r0, [sp, #16]
   1a2ac:	str	r1, [sp, #12]
   1a2b0:	str	r2, [sp, #8]
   1a2b4:	ldr	r2, [fp, #-16]
   1a2b8:	str	r2, [sp, #4]
   1a2bc:	str	r3, [sp]
   1a2c0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a2c4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a2c8:	mov	r1, #0
   1a2cc:	mov	r0, #0
   1a2d0:	bl	18a74 <__assert_fail@plt+0x7778>
   1a2d4:	mov	r3, r0
   1a2d8:	add	r3, r3, #1
   1a2dc:	str	r3, [fp, #-20]	; 0xffffffec
   1a2e0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a2e4:	bl	1b5ec <__assert_fail@plt+0xa2f0>
   1a2e8:	mov	r3, r0
   1a2ec:	str	r3, [fp, #-24]	; 0xffffffe8
   1a2f0:	ldr	r3, [fp, #-8]
   1a2f4:	ldr	r3, [r3]
   1a2f8:	ldr	r2, [fp, #-8]
   1a2fc:	add	r2, r2, #8
   1a300:	ldr	r1, [fp, #-8]
   1a304:	ldr	r1, [r1, #40]	; 0x28
   1a308:	ldr	r0, [fp, #-8]
   1a30c:	ldr	r0, [r0, #44]	; 0x2c
   1a310:	str	r0, [sp, #16]
   1a314:	str	r1, [sp, #12]
   1a318:	str	r2, [sp, #8]
   1a31c:	ldr	r2, [fp, #-16]
   1a320:	str	r2, [sp, #4]
   1a324:	str	r3, [sp]
   1a328:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a32c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a330:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a334:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a338:	bl	18a74 <__assert_fail@plt+0x7778>
   1a33c:	bl	111c4 <__errno_location@plt>
   1a340:	mov	r2, r0
   1a344:	ldr	r3, [fp, #-12]
   1a348:	str	r3, [r2]
   1a34c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1a350:	cmp	r3, #0
   1a354:	beq	1a368 <__assert_fail@plt+0x906c>
   1a358:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a35c:	sub	r2, r3, #1
   1a360:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1a364:	str	r2, [r3]
   1a368:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a36c:	mov	r0, r3
   1a370:	sub	sp, fp, #4
   1a374:	pop	{fp, pc}
   1a378:	andeq	r0, r3, r4, asr #3
   1a37c:	push	{fp, lr}
   1a380:	add	fp, sp, #4
   1a384:	sub	sp, sp, #8
   1a388:	ldr	r3, [pc, #196]	; 1a454 <__assert_fail@plt+0x9158>
   1a38c:	ldr	r3, [r3]
   1a390:	str	r3, [fp, #-12]
   1a394:	mov	r3, #1
   1a398:	str	r3, [fp, #-8]
   1a39c:	b	1a3c8 <__assert_fail@plt+0x90cc>
   1a3a0:	ldr	r3, [fp, #-8]
   1a3a4:	lsl	r3, r3, #3
   1a3a8:	ldr	r2, [fp, #-12]
   1a3ac:	add	r3, r2, r3
   1a3b0:	ldr	r3, [r3, #4]
   1a3b4:	mov	r0, r3
   1a3b8:	bl	13394 <__assert_fail@plt+0x2098>
   1a3bc:	ldr	r3, [fp, #-8]
   1a3c0:	add	r3, r3, #1
   1a3c4:	str	r3, [fp, #-8]
   1a3c8:	ldr	r3, [pc, #136]	; 1a458 <__assert_fail@plt+0x915c>
   1a3cc:	ldr	r3, [r3]
   1a3d0:	ldr	r2, [fp, #-8]
   1a3d4:	cmp	r2, r3
   1a3d8:	blt	1a3a0 <__assert_fail@plt+0x90a4>
   1a3dc:	ldr	r3, [fp, #-12]
   1a3e0:	ldr	r3, [r3, #4]
   1a3e4:	ldr	r2, [pc, #112]	; 1a45c <__assert_fail@plt+0x9160>
   1a3e8:	cmp	r3, r2
   1a3ec:	beq	1a418 <__assert_fail@plt+0x911c>
   1a3f0:	ldr	r3, [fp, #-12]
   1a3f4:	ldr	r3, [r3, #4]
   1a3f8:	mov	r0, r3
   1a3fc:	bl	13394 <__assert_fail@plt+0x2098>
   1a400:	ldr	r3, [pc, #88]	; 1a460 <__assert_fail@plt+0x9164>
   1a404:	mov	r2, #256	; 0x100
   1a408:	str	r2, [r3]
   1a40c:	ldr	r3, [pc, #76]	; 1a460 <__assert_fail@plt+0x9164>
   1a410:	ldr	r2, [pc, #68]	; 1a45c <__assert_fail@plt+0x9160>
   1a414:	str	r2, [r3, #4]
   1a418:	ldr	r3, [fp, #-12]
   1a41c:	ldr	r2, [pc, #60]	; 1a460 <__assert_fail@plt+0x9164>
   1a420:	cmp	r3, r2
   1a424:	beq	1a43c <__assert_fail@plt+0x9140>
   1a428:	ldr	r0, [fp, #-12]
   1a42c:	bl	13394 <__assert_fail@plt+0x2098>
   1a430:	ldr	r3, [pc, #28]	; 1a454 <__assert_fail@plt+0x9158>
   1a434:	ldr	r2, [pc, #36]	; 1a460 <__assert_fail@plt+0x9164>
   1a438:	str	r2, [r3]
   1a43c:	ldr	r3, [pc, #20]	; 1a458 <__assert_fail@plt+0x915c>
   1a440:	mov	r2, #1
   1a444:	str	r2, [r3]
   1a448:	nop			; (mov r0, r0)
   1a44c:	sub	sp, fp, #4
   1a450:	pop	{fp, pc}
   1a454:	andeq	r0, r3, r8, asr #2
   1a458:	andeq	r0, r3, ip, lsr r1
   1a45c:	strdeq	r0, [r3], -r4
   1a460:	andeq	r0, r3, r0, asr #2
   1a464:	push	{r4, fp, lr}
   1a468:	add	fp, sp, #8
   1a46c:	sub	sp, sp, #84	; 0x54
   1a470:	str	r0, [fp, #-56]	; 0xffffffc8
   1a474:	str	r1, [fp, #-60]	; 0xffffffc4
   1a478:	str	r2, [fp, #-64]	; 0xffffffc0
   1a47c:	str	r3, [fp, #-68]	; 0xffffffbc
   1a480:	bl	111c4 <__errno_location@plt>
   1a484:	mov	r3, r0
   1a488:	ldr	r3, [r3]
   1a48c:	str	r3, [fp, #-24]	; 0xffffffe8
   1a490:	ldr	r3, [pc, #640]	; 1a718 <__assert_fail@plt+0x941c>
   1a494:	ldr	r3, [r3]
   1a498:	str	r3, [fp, #-16]
   1a49c:	mvn	r3, #-2147483648	; 0x80000000
   1a4a0:	str	r3, [fp, #-28]	; 0xffffffe4
   1a4a4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a4a8:	cmp	r3, #0
   1a4ac:	blt	1a4c0 <__assert_fail@plt+0x91c4>
   1a4b0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1a4b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a4b8:	cmp	r2, r3
   1a4bc:	blt	1a4c4 <__assert_fail@plt+0x91c8>
   1a4c0:	bl	112b4 <abort@plt>
   1a4c4:	ldr	r3, [pc, #592]	; 1a71c <__assert_fail@plt+0x9420>
   1a4c8:	ldr	r2, [r3]
   1a4cc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a4d0:	cmp	r2, r3
   1a4d4:	bgt	1a5a8 <__assert_fail@plt+0x92ac>
   1a4d8:	ldr	r3, [fp, #-16]
   1a4dc:	ldr	r2, [pc, #572]	; 1a720 <__assert_fail@plt+0x9424>
   1a4e0:	cmp	r3, r2
   1a4e4:	moveq	r3, #1
   1a4e8:	movne	r3, #0
   1a4ec:	strb	r3, [fp, #-29]	; 0xffffffe3
   1a4f0:	ldr	r3, [pc, #548]	; 1a71c <__assert_fail@plt+0x9420>
   1a4f4:	ldr	r3, [r3]
   1a4f8:	str	r3, [fp, #-48]	; 0xffffffd0
   1a4fc:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   1a500:	cmp	r3, #0
   1a504:	beq	1a510 <__assert_fail@plt+0x9214>
   1a508:	mov	r0, #0
   1a50c:	b	1a514 <__assert_fail@plt+0x9218>
   1a510:	ldr	r0, [fp, #-16]
   1a514:	ldr	r3, [pc, #512]	; 1a71c <__assert_fail@plt+0x9420>
   1a518:	ldr	r3, [r3]
   1a51c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1a520:	sub	r3, r2, r3
   1a524:	add	r2, r3, #1
   1a528:	sub	r1, fp, #48	; 0x30
   1a52c:	mov	r3, #8
   1a530:	str	r3, [sp]
   1a534:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a538:	bl	1b90c <__assert_fail@plt+0xa610>
   1a53c:	str	r0, [fp, #-16]
   1a540:	ldr	r2, [pc, #464]	; 1a718 <__assert_fail@plt+0x941c>
   1a544:	ldr	r3, [fp, #-16]
   1a548:	str	r3, [r2]
   1a54c:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   1a550:	cmp	r3, #0
   1a554:	beq	1a568 <__assert_fail@plt+0x926c>
   1a558:	ldr	r3, [fp, #-16]
   1a55c:	ldr	r2, [pc, #444]	; 1a720 <__assert_fail@plt+0x9424>
   1a560:	ldm	r2, {r0, r1}
   1a564:	stm	r3, {r0, r1}
   1a568:	ldr	r3, [pc, #428]	; 1a71c <__assert_fail@plt+0x9420>
   1a56c:	ldr	r3, [r3]
   1a570:	lsl	r3, r3, #3
   1a574:	ldr	r2, [fp, #-16]
   1a578:	add	r0, r2, r3
   1a57c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1a580:	ldr	r3, [pc, #404]	; 1a71c <__assert_fail@plt+0x9420>
   1a584:	ldr	r3, [r3]
   1a588:	sub	r3, r2, r3
   1a58c:	lsl	r3, r3, #3
   1a590:	mov	r2, r3
   1a594:	mov	r1, #0
   1a598:	bl	111dc <memset@plt>
   1a59c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1a5a0:	ldr	r2, [pc, #372]	; 1a71c <__assert_fail@plt+0x9420>
   1a5a4:	str	r3, [r2]
   1a5a8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a5ac:	lsl	r3, r3, #3
   1a5b0:	ldr	r2, [fp, #-16]
   1a5b4:	add	r3, r2, r3
   1a5b8:	ldr	r3, [r3]
   1a5bc:	str	r3, [fp, #-36]	; 0xffffffdc
   1a5c0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a5c4:	lsl	r3, r3, #3
   1a5c8:	ldr	r2, [fp, #-16]
   1a5cc:	add	r3, r2, r3
   1a5d0:	ldr	r3, [r3, #4]
   1a5d4:	str	r3, [fp, #-20]	; 0xffffffec
   1a5d8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1a5dc:	ldr	r3, [r3, #4]
   1a5e0:	orr	r3, r3, #1
   1a5e4:	str	r3, [fp, #-40]	; 0xffffffd8
   1a5e8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1a5ec:	ldr	r3, [r3]
   1a5f0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1a5f4:	add	r2, r2, #8
   1a5f8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1a5fc:	ldr	r1, [r1, #40]	; 0x28
   1a600:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a604:	ldr	r0, [r0, #44]	; 0x2c
   1a608:	str	r0, [sp, #16]
   1a60c:	str	r1, [sp, #12]
   1a610:	str	r2, [sp, #8]
   1a614:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1a618:	str	r2, [sp, #4]
   1a61c:	str	r3, [sp]
   1a620:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1a624:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1a628:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a62c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a630:	bl	18a74 <__assert_fail@plt+0x7778>
   1a634:	str	r0, [fp, #-44]	; 0xffffffd4
   1a638:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1a63c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a640:	cmp	r2, r3
   1a644:	bhi	1a6f8 <__assert_fail@plt+0x93fc>
   1a648:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a64c:	lsl	r3, r3, #3
   1a650:	ldr	r2, [fp, #-16]
   1a654:	add	r3, r2, r3
   1a658:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1a65c:	add	r2, r2, #1
   1a660:	str	r2, [fp, #-36]	; 0xffffffdc
   1a664:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1a668:	str	r2, [r3]
   1a66c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a670:	ldr	r2, [pc, #172]	; 1a724 <__assert_fail@plt+0x9428>
   1a674:	cmp	r3, r2
   1a678:	beq	1a684 <__assert_fail@plt+0x9388>
   1a67c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a680:	bl	13394 <__assert_fail@plt+0x2098>
   1a684:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a688:	lsl	r3, r3, #3
   1a68c:	ldr	r2, [fp, #-16]
   1a690:	add	r4, r2, r3
   1a694:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a698:	bl	1b5ec <__assert_fail@plt+0xa2f0>
   1a69c:	mov	r3, r0
   1a6a0:	str	r3, [fp, #-20]	; 0xffffffec
   1a6a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a6a8:	str	r3, [r4, #4]
   1a6ac:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1a6b0:	ldr	r3, [r3]
   1a6b4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1a6b8:	add	r2, r2, #8
   1a6bc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1a6c0:	ldr	r1, [r1, #40]	; 0x28
   1a6c4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a6c8:	ldr	r0, [r0, #44]	; 0x2c
   1a6cc:	str	r0, [sp, #16]
   1a6d0:	str	r1, [sp, #12]
   1a6d4:	str	r2, [sp, #8]
   1a6d8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1a6dc:	str	r2, [sp, #4]
   1a6e0:	str	r3, [sp]
   1a6e4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1a6e8:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1a6ec:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a6f0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a6f4:	bl	18a74 <__assert_fail@plt+0x7778>
   1a6f8:	bl	111c4 <__errno_location@plt>
   1a6fc:	mov	r2, r0
   1a700:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a704:	str	r3, [r2]
   1a708:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a70c:	mov	r0, r3
   1a710:	sub	sp, fp, #8
   1a714:	pop	{r4, fp, pc}
   1a718:	andeq	r0, r3, r8, asr #2
   1a71c:	andeq	r0, r3, ip, lsr r1
   1a720:	andeq	r0, r3, r0, asr #2
   1a724:	strdeq	r0, [r3], -r4
   1a728:	push	{fp, lr}
   1a72c:	add	fp, sp, #4
   1a730:	sub	sp, sp, #8
   1a734:	str	r0, [fp, #-8]
   1a738:	str	r1, [fp, #-12]
   1a73c:	ldr	r3, [pc, #28]	; 1a760 <__assert_fail@plt+0x9464>
   1a740:	mvn	r2, #0
   1a744:	ldr	r1, [fp, #-12]
   1a748:	ldr	r0, [fp, #-8]
   1a74c:	bl	1a464 <__assert_fail@plt+0x9168>
   1a750:	mov	r3, r0
   1a754:	mov	r0, r3
   1a758:	sub	sp, fp, #4
   1a75c:	pop	{fp, pc}
   1a760:	andeq	r0, r3, r4, asr #3
   1a764:	push	{fp, lr}
   1a768:	add	fp, sp, #4
   1a76c:	sub	sp, sp, #16
   1a770:	str	r0, [fp, #-8]
   1a774:	str	r1, [fp, #-12]
   1a778:	str	r2, [fp, #-16]
   1a77c:	ldr	r3, [pc, #28]	; 1a7a0 <__assert_fail@plt+0x94a4>
   1a780:	ldr	r2, [fp, #-16]
   1a784:	ldr	r1, [fp, #-12]
   1a788:	ldr	r0, [fp, #-8]
   1a78c:	bl	1a464 <__assert_fail@plt+0x9168>
   1a790:	mov	r3, r0
   1a794:	mov	r0, r3
   1a798:	sub	sp, fp, #4
   1a79c:	pop	{fp, pc}
   1a7a0:	andeq	r0, r3, r4, asr #3
   1a7a4:	push	{fp, lr}
   1a7a8:	add	fp, sp, #4
   1a7ac:	sub	sp, sp, #8
   1a7b0:	str	r0, [fp, #-8]
   1a7b4:	ldr	r1, [fp, #-8]
   1a7b8:	mov	r0, #0
   1a7bc:	bl	1a728 <__assert_fail@plt+0x942c>
   1a7c0:	mov	r3, r0
   1a7c4:	mov	r0, r3
   1a7c8:	sub	sp, fp, #4
   1a7cc:	pop	{fp, pc}
   1a7d0:	push	{fp, lr}
   1a7d4:	add	fp, sp, #4
   1a7d8:	sub	sp, sp, #8
   1a7dc:	str	r0, [fp, #-8]
   1a7e0:	str	r1, [fp, #-12]
   1a7e4:	ldr	r2, [fp, #-12]
   1a7e8:	ldr	r1, [fp, #-8]
   1a7ec:	mov	r0, #0
   1a7f0:	bl	1a764 <__assert_fail@plt+0x9468>
   1a7f4:	mov	r3, r0
   1a7f8:	mov	r0, r3
   1a7fc:	sub	sp, fp, #4
   1a800:	pop	{fp, pc}
   1a804:	push	{fp, lr}
   1a808:	add	fp, sp, #4
   1a80c:	sub	sp, sp, #64	; 0x40
   1a810:	str	r0, [fp, #-56]	; 0xffffffc8
   1a814:	str	r1, [fp, #-60]	; 0xffffffc4
   1a818:	str	r2, [fp, #-64]	; 0xffffffc0
   1a81c:	sub	r3, fp, #52	; 0x34
   1a820:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1a824:	mov	r0, r3
   1a828:	bl	18910 <__assert_fail@plt+0x7614>
   1a82c:	sub	r3, fp, #52	; 0x34
   1a830:	mvn	r2, #0
   1a834:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1a838:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1a83c:	bl	1a464 <__assert_fail@plt+0x9168>
   1a840:	mov	r3, r0
   1a844:	mov	r0, r3
   1a848:	sub	sp, fp, #4
   1a84c:	pop	{fp, pc}
   1a850:	push	{fp, lr}
   1a854:	add	fp, sp, #4
   1a858:	sub	sp, sp, #64	; 0x40
   1a85c:	str	r0, [fp, #-56]	; 0xffffffc8
   1a860:	str	r1, [fp, #-60]	; 0xffffffc4
   1a864:	str	r2, [fp, #-64]	; 0xffffffc0
   1a868:	str	r3, [fp, #-68]	; 0xffffffbc
   1a86c:	sub	r3, fp, #52	; 0x34
   1a870:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1a874:	mov	r0, r3
   1a878:	bl	18910 <__assert_fail@plt+0x7614>
   1a87c:	sub	r3, fp, #52	; 0x34
   1a880:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1a884:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1a888:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1a88c:	bl	1a464 <__assert_fail@plt+0x9168>
   1a890:	mov	r3, r0
   1a894:	mov	r0, r3
   1a898:	sub	sp, fp, #4
   1a89c:	pop	{fp, pc}
   1a8a0:	push	{fp, lr}
   1a8a4:	add	fp, sp, #4
   1a8a8:	sub	sp, sp, #8
   1a8ac:	str	r0, [fp, #-8]
   1a8b0:	str	r1, [fp, #-12]
   1a8b4:	ldr	r2, [fp, #-12]
   1a8b8:	ldr	r1, [fp, #-8]
   1a8bc:	mov	r0, #0
   1a8c0:	bl	1a804 <__assert_fail@plt+0x9508>
   1a8c4:	mov	r3, r0
   1a8c8:	mov	r0, r3
   1a8cc:	sub	sp, fp, #4
   1a8d0:	pop	{fp, pc}
   1a8d4:	push	{fp, lr}
   1a8d8:	add	fp, sp, #4
   1a8dc:	sub	sp, sp, #16
   1a8e0:	str	r0, [fp, #-8]
   1a8e4:	str	r1, [fp, #-12]
   1a8e8:	str	r2, [fp, #-16]
   1a8ec:	ldr	r3, [fp, #-16]
   1a8f0:	ldr	r2, [fp, #-12]
   1a8f4:	ldr	r1, [fp, #-8]
   1a8f8:	mov	r0, #0
   1a8fc:	bl	1a850 <__assert_fail@plt+0x9554>
   1a900:	mov	r3, r0
   1a904:	mov	r0, r3
   1a908:	sub	sp, fp, #4
   1a90c:	pop	{fp, pc}
   1a910:	push	{fp, lr}
   1a914:	add	fp, sp, #4
   1a918:	sub	sp, sp, #64	; 0x40
   1a91c:	str	r0, [fp, #-56]	; 0xffffffc8
   1a920:	str	r1, [fp, #-60]	; 0xffffffc4
   1a924:	mov	r3, r2
   1a928:	strb	r3, [fp, #-61]	; 0xffffffc3
   1a92c:	ldr	r3, [pc, #84]	; 1a988 <__assert_fail@plt+0x968c>
   1a930:	sub	ip, fp, #52	; 0x34
   1a934:	mov	lr, r3
   1a938:	ldm	lr!, {r0, r1, r2, r3}
   1a93c:	stmia	ip!, {r0, r1, r2, r3}
   1a940:	ldm	lr!, {r0, r1, r2, r3}
   1a944:	stmia	ip!, {r0, r1, r2, r3}
   1a948:	ldm	lr, {r0, r1, r2, r3}
   1a94c:	stm	ip, {r0, r1, r2, r3}
   1a950:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   1a954:	sub	r3, fp, #52	; 0x34
   1a958:	mov	r2, #1
   1a95c:	mov	r0, r3
   1a960:	bl	1877c <__assert_fail@plt+0x7480>
   1a964:	sub	r3, fp, #52	; 0x34
   1a968:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1a96c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1a970:	mov	r0, #0
   1a974:	bl	1a464 <__assert_fail@plt+0x9168>
   1a978:	mov	r3, r0
   1a97c:	mov	r0, r3
   1a980:	sub	sp, fp, #4
   1a984:	pop	{fp, pc}
   1a988:	andeq	r0, r3, r4, asr #3
   1a98c:	push	{fp, lr}
   1a990:	add	fp, sp, #4
   1a994:	sub	sp, sp, #8
   1a998:	str	r0, [fp, #-8]
   1a99c:	mov	r3, r1
   1a9a0:	strb	r3, [fp, #-9]
   1a9a4:	ldrb	r3, [fp, #-9]
   1a9a8:	mov	r2, r3
   1a9ac:	mvn	r1, #0
   1a9b0:	ldr	r0, [fp, #-8]
   1a9b4:	bl	1a910 <__assert_fail@plt+0x9614>
   1a9b8:	mov	r3, r0
   1a9bc:	mov	r0, r3
   1a9c0:	sub	sp, fp, #4
   1a9c4:	pop	{fp, pc}
   1a9c8:	push	{fp, lr}
   1a9cc:	add	fp, sp, #4
   1a9d0:	sub	sp, sp, #8
   1a9d4:	str	r0, [fp, #-8]
   1a9d8:	mov	r1, #58	; 0x3a
   1a9dc:	ldr	r0, [fp, #-8]
   1a9e0:	bl	1a98c <__assert_fail@plt+0x9690>
   1a9e4:	mov	r3, r0
   1a9e8:	mov	r0, r3
   1a9ec:	sub	sp, fp, #4
   1a9f0:	pop	{fp, pc}
   1a9f4:	push	{fp, lr}
   1a9f8:	add	fp, sp, #4
   1a9fc:	sub	sp, sp, #8
   1aa00:	str	r0, [fp, #-8]
   1aa04:	str	r1, [fp, #-12]
   1aa08:	mov	r2, #58	; 0x3a
   1aa0c:	ldr	r1, [fp, #-12]
   1aa10:	ldr	r0, [fp, #-8]
   1aa14:	bl	1a910 <__assert_fail@plt+0x9614>
   1aa18:	mov	r3, r0
   1aa1c:	mov	r0, r3
   1aa20:	sub	sp, fp, #4
   1aa24:	pop	{fp, pc}
   1aa28:	push	{fp, lr}
   1aa2c:	add	fp, sp, #4
   1aa30:	sub	sp, sp, #112	; 0x70
   1aa34:	str	r0, [fp, #-56]	; 0xffffffc8
   1aa38:	str	r1, [fp, #-60]	; 0xffffffc4
   1aa3c:	str	r2, [fp, #-64]	; 0xffffffc0
   1aa40:	sub	r3, fp, #116	; 0x74
   1aa44:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1aa48:	mov	r0, r3
   1aa4c:	bl	18910 <__assert_fail@plt+0x7614>
   1aa50:	sub	ip, fp, #52	; 0x34
   1aa54:	sub	lr, fp, #116	; 0x74
   1aa58:	ldm	lr!, {r0, r1, r2, r3}
   1aa5c:	stmia	ip!, {r0, r1, r2, r3}
   1aa60:	ldm	lr!, {r0, r1, r2, r3}
   1aa64:	stmia	ip!, {r0, r1, r2, r3}
   1aa68:	ldm	lr, {r0, r1, r2, r3}
   1aa6c:	stm	ip, {r0, r1, r2, r3}
   1aa70:	sub	r3, fp, #52	; 0x34
   1aa74:	mov	r2, #1
   1aa78:	mov	r1, #58	; 0x3a
   1aa7c:	mov	r0, r3
   1aa80:	bl	1877c <__assert_fail@plt+0x7480>
   1aa84:	sub	r3, fp, #52	; 0x34
   1aa88:	mvn	r2, #0
   1aa8c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1aa90:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1aa94:	bl	1a464 <__assert_fail@plt+0x9168>
   1aa98:	mov	r3, r0
   1aa9c:	mov	r0, r3
   1aaa0:	sub	sp, fp, #4
   1aaa4:	pop	{fp, pc}
   1aaa8:	push	{fp, lr}
   1aaac:	add	fp, sp, #4
   1aab0:	sub	sp, sp, #24
   1aab4:	str	r0, [fp, #-8]
   1aab8:	str	r1, [fp, #-12]
   1aabc:	str	r2, [fp, #-16]
   1aac0:	str	r3, [fp, #-20]	; 0xffffffec
   1aac4:	mvn	r3, #0
   1aac8:	str	r3, [sp]
   1aacc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aad0:	ldr	r2, [fp, #-16]
   1aad4:	ldr	r1, [fp, #-12]
   1aad8:	ldr	r0, [fp, #-8]
   1aadc:	bl	1aaf0 <__assert_fail@plt+0x97f4>
   1aae0:	mov	r3, r0
   1aae4:	mov	r0, r3
   1aae8:	sub	sp, fp, #4
   1aaec:	pop	{fp, pc}
   1aaf0:	push	{fp, lr}
   1aaf4:	add	fp, sp, #4
   1aaf8:	sub	sp, sp, #64	; 0x40
   1aafc:	str	r0, [fp, #-56]	; 0xffffffc8
   1ab00:	str	r1, [fp, #-60]	; 0xffffffc4
   1ab04:	str	r2, [fp, #-64]	; 0xffffffc0
   1ab08:	str	r3, [fp, #-68]	; 0xffffffbc
   1ab0c:	ldr	r3, [pc, #84]	; 1ab68 <__assert_fail@plt+0x986c>
   1ab10:	sub	ip, fp, #52	; 0x34
   1ab14:	mov	lr, r3
   1ab18:	ldm	lr!, {r0, r1, r2, r3}
   1ab1c:	stmia	ip!, {r0, r1, r2, r3}
   1ab20:	ldm	lr!, {r0, r1, r2, r3}
   1ab24:	stmia	ip!, {r0, r1, r2, r3}
   1ab28:	ldm	lr, {r0, r1, r2, r3}
   1ab2c:	stm	ip, {r0, r1, r2, r3}
   1ab30:	sub	r3, fp, #52	; 0x34
   1ab34:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1ab38:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1ab3c:	mov	r0, r3
   1ab40:	bl	18894 <__assert_fail@plt+0x7598>
   1ab44:	sub	r3, fp, #52	; 0x34
   1ab48:	ldr	r2, [fp, #4]
   1ab4c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1ab50:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1ab54:	bl	1a464 <__assert_fail@plt+0x9168>
   1ab58:	mov	r3, r0
   1ab5c:	mov	r0, r3
   1ab60:	sub	sp, fp, #4
   1ab64:	pop	{fp, pc}
   1ab68:	andeq	r0, r3, r4, asr #3
   1ab6c:	push	{fp, lr}
   1ab70:	add	fp, sp, #4
   1ab74:	sub	sp, sp, #16
   1ab78:	str	r0, [fp, #-8]
   1ab7c:	str	r1, [fp, #-12]
   1ab80:	str	r2, [fp, #-16]
   1ab84:	ldr	r3, [fp, #-16]
   1ab88:	ldr	r2, [fp, #-12]
   1ab8c:	ldr	r1, [fp, #-8]
   1ab90:	mov	r0, #0
   1ab94:	bl	1aaa8 <__assert_fail@plt+0x97ac>
   1ab98:	mov	r3, r0
   1ab9c:	mov	r0, r3
   1aba0:	sub	sp, fp, #4
   1aba4:	pop	{fp, pc}
   1aba8:	push	{fp, lr}
   1abac:	add	fp, sp, #4
   1abb0:	sub	sp, sp, #24
   1abb4:	str	r0, [fp, #-8]
   1abb8:	str	r1, [fp, #-12]
   1abbc:	str	r2, [fp, #-16]
   1abc0:	str	r3, [fp, #-20]	; 0xffffffec
   1abc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1abc8:	str	r3, [sp]
   1abcc:	ldr	r3, [fp, #-16]
   1abd0:	ldr	r2, [fp, #-12]
   1abd4:	ldr	r1, [fp, #-8]
   1abd8:	mov	r0, #0
   1abdc:	bl	1aaf0 <__assert_fail@plt+0x97f4>
   1abe0:	mov	r3, r0
   1abe4:	mov	r0, r3
   1abe8:	sub	sp, fp, #4
   1abec:	pop	{fp, pc}
   1abf0:	push	{fp, lr}
   1abf4:	add	fp, sp, #4
   1abf8:	sub	sp, sp, #16
   1abfc:	str	r0, [fp, #-8]
   1ac00:	str	r1, [fp, #-12]
   1ac04:	str	r2, [fp, #-16]
   1ac08:	ldr	r3, [pc, #28]	; 1ac2c <__assert_fail@plt+0x9930>
   1ac0c:	ldr	r2, [fp, #-16]
   1ac10:	ldr	r1, [fp, #-12]
   1ac14:	ldr	r0, [fp, #-8]
   1ac18:	bl	1a464 <__assert_fail@plt+0x9168>
   1ac1c:	mov	r3, r0
   1ac20:	mov	r0, r3
   1ac24:	sub	sp, fp, #4
   1ac28:	pop	{fp, pc}
   1ac2c:	andeq	r0, r3, ip, asr #2
   1ac30:	push	{fp, lr}
   1ac34:	add	fp, sp, #4
   1ac38:	sub	sp, sp, #8
   1ac3c:	str	r0, [fp, #-8]
   1ac40:	str	r1, [fp, #-12]
   1ac44:	ldr	r2, [fp, #-12]
   1ac48:	ldr	r1, [fp, #-8]
   1ac4c:	mov	r0, #0
   1ac50:	bl	1abf0 <__assert_fail@plt+0x98f4>
   1ac54:	mov	r3, r0
   1ac58:	mov	r0, r3
   1ac5c:	sub	sp, fp, #4
   1ac60:	pop	{fp, pc}
   1ac64:	push	{fp, lr}
   1ac68:	add	fp, sp, #4
   1ac6c:	sub	sp, sp, #8
   1ac70:	str	r0, [fp, #-8]
   1ac74:	str	r1, [fp, #-12]
   1ac78:	mvn	r2, #0
   1ac7c:	ldr	r1, [fp, #-12]
   1ac80:	ldr	r0, [fp, #-8]
   1ac84:	bl	1abf0 <__assert_fail@plt+0x98f4>
   1ac88:	mov	r3, r0
   1ac8c:	mov	r0, r3
   1ac90:	sub	sp, fp, #4
   1ac94:	pop	{fp, pc}
   1ac98:	push	{fp, lr}
   1ac9c:	add	fp, sp, #4
   1aca0:	sub	sp, sp, #8
   1aca4:	str	r0, [fp, #-8]
   1aca8:	ldr	r1, [fp, #-8]
   1acac:	mov	r0, #0
   1acb0:	bl	1ac64 <__assert_fail@plt+0x9968>
   1acb4:	mov	r3, r0
   1acb8:	mov	r0, r3
   1acbc:	sub	sp, fp, #4
   1acc0:	pop	{fp, pc}
   1acc4:	push	{fp, lr}
   1acc8:	add	fp, sp, #4
   1accc:	sub	sp, sp, #112	; 0x70
   1acd0:	str	r0, [fp, #-112]	; 0xffffff90
   1acd4:	sub	r3, fp, #108	; 0x6c
   1acd8:	mov	r1, r3
   1acdc:	ldr	r0, [pc, #60]	; 1ad20 <__assert_fail@plt+0x9a24>
   1ace0:	bl	1e960 <__assert_fail@plt+0xd664>
   1ace4:	mov	r3, r0
   1ace8:	cmp	r3, #0
   1acec:	beq	1acf8 <__assert_fail@plt+0x99fc>
   1acf0:	mov	r3, #0
   1acf4:	b	1ad14 <__assert_fail@plt+0x9a18>
   1acf8:	ldrd	r2, [fp, #-12]
   1acfc:	ldr	r1, [fp, #-112]	; 0xffffff90
   1ad00:	strd	r2, [r1]
   1ad04:	ldrd	r2, [fp, #-108]	; 0xffffff94
   1ad08:	ldr	r1, [fp, #-112]	; 0xffffff90
   1ad0c:	strd	r2, [r1, #8]
   1ad10:	ldr	r3, [fp, #-112]	; 0xffffff90
   1ad14:	mov	r0, r3
   1ad18:	sub	sp, fp, #4
   1ad1c:	pop	{fp, pc}
   1ad20:	andeq	pc, r1, r4, asr #20
   1ad24:	push	{fp, lr}
   1ad28:	add	fp, sp, #4
   1ad2c:	sub	sp, sp, #16
   1ad30:	str	r0, [fp, #-16]
   1ad34:	ldr	r3, [fp, #-16]
   1ad38:	cmp	r3, #0
   1ad3c:	blt	1ad88 <__assert_fail@plt+0x9a8c>
   1ad40:	ldr	r3, [fp, #-16]
   1ad44:	cmp	r3, #2
   1ad48:	bgt	1ad88 <__assert_fail@plt+0x9a8c>
   1ad4c:	ldr	r0, [fp, #-16]
   1ad50:	bl	1dbdc <__assert_fail@plt+0xc8e0>
   1ad54:	str	r0, [fp, #-8]
   1ad58:	bl	111c4 <__errno_location@plt>
   1ad5c:	mov	r3, r0
   1ad60:	ldr	r3, [r3]
   1ad64:	str	r3, [fp, #-12]
   1ad68:	ldr	r0, [fp, #-16]
   1ad6c:	bl	112c0 <close@plt>
   1ad70:	bl	111c4 <__errno_location@plt>
   1ad74:	mov	r2, r0
   1ad78:	ldr	r3, [fp, #-12]
   1ad7c:	str	r3, [r2]
   1ad80:	ldr	r3, [fp, #-8]
   1ad84:	str	r3, [fp, #-16]
   1ad88:	ldr	r3, [fp, #-16]
   1ad8c:	mov	r0, r3
   1ad90:	sub	sp, fp, #4
   1ad94:	pop	{fp, pc}
   1ad98:	push	{r4, r5, r6, r7, fp, lr}
   1ad9c:	add	fp, sp, #20
   1ada0:	sub	sp, sp, #48	; 0x30
   1ada4:	str	r0, [fp, #-24]	; 0xffffffe8
   1ada8:	str	r1, [fp, #-28]	; 0xffffffe4
   1adac:	str	r2, [fp, #-32]	; 0xffffffe0
   1adb0:	str	r3, [fp, #-36]	; 0xffffffdc
   1adb4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1adb8:	cmp	r3, #0
   1adbc:	beq	1ade0 <__assert_fail@plt+0x9ae4>
   1adc0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1adc4:	str	r3, [sp]
   1adc8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1adcc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1add0:	ldr	r1, [pc, #1260]	; 1b2c4 <__assert_fail@plt+0x9fc8>
   1add4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1add8:	bl	111b8 <fprintf@plt>
   1addc:	b	1adf4 <__assert_fail@plt+0x9af8>
   1ade0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1ade4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1ade8:	ldr	r1, [pc, #1240]	; 1b2c8 <__assert_fail@plt+0x9fcc>
   1adec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1adf0:	bl	111b8 <fprintf@plt>
   1adf4:	ldr	r0, [pc, #1232]	; 1b2cc <__assert_fail@plt+0x9fd0>
   1adf8:	bl	1117c <gettext@plt>
   1adfc:	mov	r2, r0
   1ae00:	ldr	r3, [pc, #1224]	; 1b2d0 <__assert_fail@plt+0x9fd4>
   1ae04:	ldr	r1, [pc, #1224]	; 1b2d4 <__assert_fail@plt+0x9fd8>
   1ae08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ae0c:	bl	111b8 <fprintf@plt>
   1ae10:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ae14:	mov	r0, #10
   1ae18:	bl	11074 <fputc_unlocked@plt>
   1ae1c:	ldr	r0, [pc, #1204]	; 1b2d8 <__assert_fail@plt+0x9fdc>
   1ae20:	bl	1117c <gettext@plt>
   1ae24:	mov	r3, r0
   1ae28:	ldr	r2, [pc, #1196]	; 1b2dc <__assert_fail@plt+0x9fe0>
   1ae2c:	mov	r1, r3
   1ae30:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ae34:	bl	111b8 <fprintf@plt>
   1ae38:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ae3c:	mov	r0, #10
   1ae40:	bl	11074 <fputc_unlocked@plt>
   1ae44:	ldr	r3, [fp, #8]
   1ae48:	cmp	r3, #9
   1ae4c:	ldrls	pc, [pc, r3, lsl #2]
   1ae50:	b	1b20c <__assert_fail@plt+0x9f10>
   1ae54:			; <UNDEFINED> instruction: 0x0001b2b4
   1ae58:	andeq	sl, r1, ip, ror lr
   1ae5c:	andeq	sl, r1, r0, lsr #29
   1ae60:	andeq	sl, r1, ip, asr #29
   1ae64:	andeq	sl, r1, ip, lsl #30
   1ae68:	andeq	sl, r1, r4, ror #30
   1ae6c:	andeq	sl, r1, ip, asr #31
   1ae70:	andeq	fp, r1, r4, asr #32
   1ae74:	andeq	fp, r1, ip, asr #1
   1ae78:	andeq	fp, r1, r4, ror #2
   1ae7c:	ldr	r0, [pc, #1116]	; 1b2e0 <__assert_fail@plt+0x9fe4>
   1ae80:	bl	1117c <gettext@plt>
   1ae84:	mov	r1, r0
   1ae88:	ldr	r3, [fp, #4]
   1ae8c:	ldr	r3, [r3]
   1ae90:	mov	r2, r3
   1ae94:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ae98:	bl	111b8 <fprintf@plt>
   1ae9c:	b	1b2b8 <__assert_fail@plt+0x9fbc>
   1aea0:	ldr	r0, [pc, #1084]	; 1b2e4 <__assert_fail@plt+0x9fe8>
   1aea4:	bl	1117c <gettext@plt>
   1aea8:	mov	r1, r0
   1aeac:	ldr	r3, [fp, #4]
   1aeb0:	ldr	r2, [r3]
   1aeb4:	ldr	r3, [fp, #4]
   1aeb8:	add	r3, r3, #4
   1aebc:	ldr	r3, [r3]
   1aec0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1aec4:	bl	111b8 <fprintf@plt>
   1aec8:	b	1b2b8 <__assert_fail@plt+0x9fbc>
   1aecc:	ldr	r0, [pc, #1044]	; 1b2e8 <__assert_fail@plt+0x9fec>
   1aed0:	bl	1117c <gettext@plt>
   1aed4:	ldr	r3, [fp, #4]
   1aed8:	ldr	r2, [r3]
   1aedc:	ldr	r3, [fp, #4]
   1aee0:	add	r3, r3, #4
   1aee4:	ldr	r1, [r3]
   1aee8:	ldr	r3, [fp, #4]
   1aeec:	add	r3, r3, #8
   1aef0:	ldr	r3, [r3]
   1aef4:	str	r3, [sp]
   1aef8:	mov	r3, r1
   1aefc:	mov	r1, r0
   1af00:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1af04:	bl	111b8 <fprintf@plt>
   1af08:	b	1b2b8 <__assert_fail@plt+0x9fbc>
   1af0c:	ldr	r0, [pc, #984]	; 1b2ec <__assert_fail@plt+0x9ff0>
   1af10:	bl	1117c <gettext@plt>
   1af14:	mov	ip, r0
   1af18:	ldr	r3, [fp, #4]
   1af1c:	ldr	r1, [r3]
   1af20:	ldr	r3, [fp, #4]
   1af24:	add	r3, r3, #4
   1af28:	ldr	r0, [r3]
   1af2c:	ldr	r3, [fp, #4]
   1af30:	add	r3, r3, #8
   1af34:	ldr	r3, [r3]
   1af38:	ldr	r2, [fp, #4]
   1af3c:	add	r2, r2, #12
   1af40:	ldr	r2, [r2]
   1af44:	str	r2, [sp, #4]
   1af48:	str	r3, [sp]
   1af4c:	mov	r3, r0
   1af50:	mov	r2, r1
   1af54:	mov	r1, ip
   1af58:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1af5c:	bl	111b8 <fprintf@plt>
   1af60:	b	1b2b8 <__assert_fail@plt+0x9fbc>
   1af64:	ldr	r0, [pc, #900]	; 1b2f0 <__assert_fail@plt+0x9ff4>
   1af68:	bl	1117c <gettext@plt>
   1af6c:	mov	lr, r0
   1af70:	ldr	r3, [fp, #4]
   1af74:	ldr	r0, [r3]
   1af78:	ldr	r3, [fp, #4]
   1af7c:	add	r3, r3, #4
   1af80:	ldr	ip, [r3]
   1af84:	ldr	r3, [fp, #4]
   1af88:	add	r3, r3, #8
   1af8c:	ldr	r3, [r3]
   1af90:	ldr	r2, [fp, #4]
   1af94:	add	r2, r2, #12
   1af98:	ldr	r2, [r2]
   1af9c:	ldr	r1, [fp, #4]
   1afa0:	add	r1, r1, #16
   1afa4:	ldr	r1, [r1]
   1afa8:	str	r1, [sp, #8]
   1afac:	str	r2, [sp, #4]
   1afb0:	str	r3, [sp]
   1afb4:	mov	r3, ip
   1afb8:	mov	r2, r0
   1afbc:	mov	r1, lr
   1afc0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1afc4:	bl	111b8 <fprintf@plt>
   1afc8:	b	1b2b8 <__assert_fail@plt+0x9fbc>
   1afcc:	ldr	r0, [pc, #800]	; 1b2f4 <__assert_fail@plt+0x9ff8>
   1afd0:	bl	1117c <gettext@plt>
   1afd4:	mov	r4, r0
   1afd8:	ldr	r3, [fp, #4]
   1afdc:	ldr	ip, [r3]
   1afe0:	ldr	r3, [fp, #4]
   1afe4:	add	r3, r3, #4
   1afe8:	ldr	lr, [r3]
   1afec:	ldr	r3, [fp, #4]
   1aff0:	add	r3, r3, #8
   1aff4:	ldr	r3, [r3]
   1aff8:	ldr	r2, [fp, #4]
   1affc:	add	r2, r2, #12
   1b000:	ldr	r2, [r2]
   1b004:	ldr	r1, [fp, #4]
   1b008:	add	r1, r1, #16
   1b00c:	ldr	r1, [r1]
   1b010:	ldr	r0, [fp, #4]
   1b014:	add	r0, r0, #20
   1b018:	ldr	r0, [r0]
   1b01c:	str	r0, [sp, #12]
   1b020:	str	r1, [sp, #8]
   1b024:	str	r2, [sp, #4]
   1b028:	str	r3, [sp]
   1b02c:	mov	r3, lr
   1b030:	mov	r2, ip
   1b034:	mov	r1, r4
   1b038:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b03c:	bl	111b8 <fprintf@plt>
   1b040:	b	1b2b8 <__assert_fail@plt+0x9fbc>
   1b044:	ldr	r0, [pc, #684]	; 1b2f8 <__assert_fail@plt+0x9ffc>
   1b048:	bl	1117c <gettext@plt>
   1b04c:	mov	r5, r0
   1b050:	ldr	r3, [fp, #4]
   1b054:	ldr	lr, [r3]
   1b058:	ldr	r3, [fp, #4]
   1b05c:	add	r3, r3, #4
   1b060:	ldr	r4, [r3]
   1b064:	ldr	r3, [fp, #4]
   1b068:	add	r3, r3, #8
   1b06c:	ldr	r3, [r3]
   1b070:	ldr	r2, [fp, #4]
   1b074:	add	r2, r2, #12
   1b078:	ldr	r2, [r2]
   1b07c:	ldr	r1, [fp, #4]
   1b080:	add	r1, r1, #16
   1b084:	ldr	r1, [r1]
   1b088:	ldr	r0, [fp, #4]
   1b08c:	add	r0, r0, #20
   1b090:	ldr	r0, [r0]
   1b094:	ldr	ip, [fp, #4]
   1b098:	add	ip, ip, #24
   1b09c:	ldr	ip, [ip]
   1b0a0:	str	ip, [sp, #16]
   1b0a4:	str	r0, [sp, #12]
   1b0a8:	str	r1, [sp, #8]
   1b0ac:	str	r2, [sp, #4]
   1b0b0:	str	r3, [sp]
   1b0b4:	mov	r3, r4
   1b0b8:	mov	r2, lr
   1b0bc:	mov	r1, r5
   1b0c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b0c4:	bl	111b8 <fprintf@plt>
   1b0c8:	b	1b2b8 <__assert_fail@plt+0x9fbc>
   1b0cc:	ldr	r0, [pc, #552]	; 1b2fc <__assert_fail@plt+0xa000>
   1b0d0:	bl	1117c <gettext@plt>
   1b0d4:	mov	r6, r0
   1b0d8:	ldr	r3, [fp, #4]
   1b0dc:	ldr	r4, [r3]
   1b0e0:	ldr	r3, [fp, #4]
   1b0e4:	add	r3, r3, #4
   1b0e8:	ldr	r5, [r3]
   1b0ec:	ldr	r3, [fp, #4]
   1b0f0:	add	r3, r3, #8
   1b0f4:	ldr	r3, [r3]
   1b0f8:	ldr	r2, [fp, #4]
   1b0fc:	add	r2, r2, #12
   1b100:	ldr	r2, [r2]
   1b104:	ldr	r1, [fp, #4]
   1b108:	add	r1, r1, #16
   1b10c:	ldr	r1, [r1]
   1b110:	ldr	r0, [fp, #4]
   1b114:	add	r0, r0, #20
   1b118:	ldr	r0, [r0]
   1b11c:	ldr	ip, [fp, #4]
   1b120:	add	ip, ip, #24
   1b124:	ldr	ip, [ip]
   1b128:	ldr	lr, [fp, #4]
   1b12c:	add	lr, lr, #28
   1b130:	ldr	lr, [lr]
   1b134:	str	lr, [sp, #20]
   1b138:	str	ip, [sp, #16]
   1b13c:	str	r0, [sp, #12]
   1b140:	str	r1, [sp, #8]
   1b144:	str	r2, [sp, #4]
   1b148:	str	r3, [sp]
   1b14c:	mov	r3, r5
   1b150:	mov	r2, r4
   1b154:	mov	r1, r6
   1b158:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b15c:	bl	111b8 <fprintf@plt>
   1b160:	b	1b2b8 <__assert_fail@plt+0x9fbc>
   1b164:	ldr	r0, [pc, #404]	; 1b300 <__assert_fail@plt+0xa004>
   1b168:	bl	1117c <gettext@plt>
   1b16c:	mov	r7, r0
   1b170:	ldr	r3, [fp, #4]
   1b174:	ldr	r5, [r3]
   1b178:	ldr	r3, [fp, #4]
   1b17c:	add	r3, r3, #4
   1b180:	ldr	r6, [r3]
   1b184:	ldr	r3, [fp, #4]
   1b188:	add	r3, r3, #8
   1b18c:	ldr	r3, [r3]
   1b190:	ldr	r2, [fp, #4]
   1b194:	add	r2, r2, #12
   1b198:	ldr	r2, [r2]
   1b19c:	ldr	r1, [fp, #4]
   1b1a0:	add	r1, r1, #16
   1b1a4:	ldr	r1, [r1]
   1b1a8:	ldr	r0, [fp, #4]
   1b1ac:	add	r0, r0, #20
   1b1b0:	ldr	r0, [r0]
   1b1b4:	ldr	ip, [fp, #4]
   1b1b8:	add	ip, ip, #24
   1b1bc:	ldr	ip, [ip]
   1b1c0:	ldr	lr, [fp, #4]
   1b1c4:	add	lr, lr, #28
   1b1c8:	ldr	lr, [lr]
   1b1cc:	ldr	r4, [fp, #4]
   1b1d0:	add	r4, r4, #32
   1b1d4:	ldr	r4, [r4]
   1b1d8:	str	r4, [sp, #24]
   1b1dc:	str	lr, [sp, #20]
   1b1e0:	str	ip, [sp, #16]
   1b1e4:	str	r0, [sp, #12]
   1b1e8:	str	r1, [sp, #8]
   1b1ec:	str	r2, [sp, #4]
   1b1f0:	str	r3, [sp]
   1b1f4:	mov	r3, r6
   1b1f8:	mov	r2, r5
   1b1fc:	mov	r1, r7
   1b200:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b204:	bl	111b8 <fprintf@plt>
   1b208:	b	1b2b8 <__assert_fail@plt+0x9fbc>
   1b20c:	ldr	r0, [pc, #240]	; 1b304 <__assert_fail@plt+0xa008>
   1b210:	bl	1117c <gettext@plt>
   1b214:	mov	r7, r0
   1b218:	ldr	r3, [fp, #4]
   1b21c:	ldr	r5, [r3]
   1b220:	ldr	r3, [fp, #4]
   1b224:	add	r3, r3, #4
   1b228:	ldr	r6, [r3]
   1b22c:	ldr	r3, [fp, #4]
   1b230:	add	r3, r3, #8
   1b234:	ldr	r3, [r3]
   1b238:	ldr	r2, [fp, #4]
   1b23c:	add	r2, r2, #12
   1b240:	ldr	r2, [r2]
   1b244:	ldr	r1, [fp, #4]
   1b248:	add	r1, r1, #16
   1b24c:	ldr	r1, [r1]
   1b250:	ldr	r0, [fp, #4]
   1b254:	add	r0, r0, #20
   1b258:	ldr	r0, [r0]
   1b25c:	ldr	ip, [fp, #4]
   1b260:	add	ip, ip, #24
   1b264:	ldr	ip, [ip]
   1b268:	ldr	lr, [fp, #4]
   1b26c:	add	lr, lr, #28
   1b270:	ldr	lr, [lr]
   1b274:	ldr	r4, [fp, #4]
   1b278:	add	r4, r4, #32
   1b27c:	ldr	r4, [r4]
   1b280:	str	r4, [sp, #24]
   1b284:	str	lr, [sp, #20]
   1b288:	str	ip, [sp, #16]
   1b28c:	str	r0, [sp, #12]
   1b290:	str	r1, [sp, #8]
   1b294:	str	r2, [sp, #4]
   1b298:	str	r3, [sp]
   1b29c:	mov	r3, r6
   1b2a0:	mov	r2, r5
   1b2a4:	mov	r1, r7
   1b2a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b2ac:	bl	111b8 <fprintf@plt>
   1b2b0:	b	1b2b8 <__assert_fail@plt+0x9fbc>
   1b2b4:	nop			; (mov r0, r0)
   1b2b8:	nop			; (mov r0, r0)
   1b2bc:	sub	sp, fp, #20
   1b2c0:	pop	{r4, r5, r6, r7, fp, pc}
   1b2c4:	andeq	pc, r1, r8, asr #20
   1b2c8:	andeq	pc, r1, r4, asr sl	; <UNPREDICTABLE>
   1b2cc:	andeq	pc, r1, ip, asr sl	; <UNPREDICTABLE>
   1b2d0:	andeq	r0, r0, r6, ror #15
   1b2d4:	andeq	pc, r1, ip, ror #26
   1b2d8:	andeq	pc, r1, r0, ror #20
   1b2dc:	andeq	pc, r1, ip, lsl #22
   1b2e0:	andeq	pc, r1, r0, lsr fp	; <UNPREDICTABLE>
   1b2e4:	andeq	pc, r1, r0, asr #22
   1b2e8:	andeq	pc, r1, r8, asr fp	; <UNPREDICTABLE>
   1b2ec:	andeq	pc, r1, r4, ror fp	; <UNPREDICTABLE>
   1b2f0:	muleq	r1, r4, fp
   1b2f4:			; <UNDEFINED> instruction: 0x0001fbb8
   1b2f8:	andeq	pc, r1, r0, ror #23
   1b2fc:	andeq	pc, r1, ip, lsl #24
   1b300:	andeq	pc, r1, ip, lsr ip	; <UNPREDICTABLE>
   1b304:	andeq	pc, r1, r0, ror ip	; <UNPREDICTABLE>
   1b308:	push	{fp, lr}
   1b30c:	add	fp, sp, #4
   1b310:	sub	sp, sp, #32
   1b314:	str	r0, [fp, #-16]
   1b318:	str	r1, [fp, #-20]	; 0xffffffec
   1b31c:	str	r2, [fp, #-24]	; 0xffffffe8
   1b320:	str	r3, [fp, #-28]	; 0xffffffe4
   1b324:	mov	r3, #0
   1b328:	str	r3, [fp, #-8]
   1b32c:	b	1b33c <__assert_fail@plt+0xa040>
   1b330:	ldr	r3, [fp, #-8]
   1b334:	add	r3, r3, #1
   1b338:	str	r3, [fp, #-8]
   1b33c:	ldr	r3, [fp, #-8]
   1b340:	lsl	r3, r3, #2
   1b344:	ldr	r2, [fp, #4]
   1b348:	add	r3, r2, r3
   1b34c:	ldr	r3, [r3]
   1b350:	cmp	r3, #0
   1b354:	bne	1b330 <__assert_fail@plt+0xa034>
   1b358:	ldr	r3, [fp, #-8]
   1b35c:	str	r3, [sp, #4]
   1b360:	ldr	r3, [fp, #4]
   1b364:	str	r3, [sp]
   1b368:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b36c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b370:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b374:	ldr	r0, [fp, #-16]
   1b378:	bl	1ad98 <__assert_fail@plt+0x9a9c>
   1b37c:	nop			; (mov r0, r0)
   1b380:	sub	sp, fp, #4
   1b384:	pop	{fp, pc}
   1b388:	push	{fp, lr}
   1b38c:	add	fp, sp, #4
   1b390:	sub	sp, sp, #72	; 0x48
   1b394:	str	r0, [fp, #-56]	; 0xffffffc8
   1b398:	str	r1, [fp, #-60]	; 0xffffffc4
   1b39c:	str	r2, [fp, #-64]	; 0xffffffc0
   1b3a0:	str	r3, [fp, #-68]	; 0xffffffbc
   1b3a4:	mov	r3, #0
   1b3a8:	str	r3, [fp, #-8]
   1b3ac:	b	1b3bc <__assert_fail@plt+0xa0c0>
   1b3b0:	ldr	r3, [fp, #-8]
   1b3b4:	add	r3, r3, #1
   1b3b8:	str	r3, [fp, #-8]
   1b3bc:	ldr	r3, [fp, #-8]
   1b3c0:	cmp	r3, #9
   1b3c4:	bhi	1b408 <__assert_fail@plt+0xa10c>
   1b3c8:	ldr	r3, [fp, #4]
   1b3cc:	add	r2, r3, #4
   1b3d0:	str	r2, [fp, #4]
   1b3d4:	ldr	r2, [r3]
   1b3d8:	ldr	r3, [fp, #-8]
   1b3dc:	lsl	r3, r3, #2
   1b3e0:	sub	r1, fp, #4
   1b3e4:	add	r3, r1, r3
   1b3e8:	str	r2, [r3, #-44]	; 0xffffffd4
   1b3ec:	ldr	r3, [fp, #-8]
   1b3f0:	lsl	r3, r3, #2
   1b3f4:	sub	r2, fp, #4
   1b3f8:	add	r3, r2, r3
   1b3fc:	ldr	r3, [r3, #-44]	; 0xffffffd4
   1b400:	cmp	r3, #0
   1b404:	bne	1b3b0 <__assert_fail@plt+0xa0b4>
   1b408:	ldr	r3, [fp, #-8]
   1b40c:	str	r3, [sp, #4]
   1b410:	sub	r3, fp, #48	; 0x30
   1b414:	str	r3, [sp]
   1b418:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1b41c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1b420:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1b424:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1b428:	bl	1ad98 <__assert_fail@plt+0x9a9c>
   1b42c:	nop			; (mov r0, r0)
   1b430:	sub	sp, fp, #4
   1b434:	pop	{fp, pc}
   1b438:	push	{r3}		; (str r3, [sp, #-4]!)
   1b43c:	push	{fp, lr}
   1b440:	add	fp, sp, #4
   1b444:	sub	sp, sp, #36	; 0x24
   1b448:	str	r0, [fp, #-20]	; 0xffffffec
   1b44c:	str	r1, [fp, #-24]	; 0xffffffe8
   1b450:	str	r2, [fp, #-28]	; 0xffffffe4
   1b454:	add	r3, fp, #8
   1b458:	str	r3, [fp, #-12]
   1b45c:	ldr	r3, [fp, #-12]
   1b460:	str	r3, [sp]
   1b464:	ldr	r3, [fp, #4]
   1b468:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b46c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b470:	ldr	r0, [fp, #-20]	; 0xffffffec
   1b474:	bl	1b388 <__assert_fail@plt+0xa08c>
   1b478:	nop			; (mov r0, r0)
   1b47c:	sub	sp, fp, #4
   1b480:	pop	{fp, lr}
   1b484:	add	sp, sp, #4
   1b488:	bx	lr
   1b48c:	push	{fp, lr}
   1b490:	add	fp, sp, #4
   1b494:	ldr	r3, [pc, #96]	; 1b4fc <__assert_fail@plt+0xa200>
   1b498:	ldr	r3, [r3]
   1b49c:	mov	r1, r3
   1b4a0:	mov	r0, #10
   1b4a4:	bl	11074 <fputc_unlocked@plt>
   1b4a8:	ldr	r0, [pc, #80]	; 1b500 <__assert_fail@plt+0xa204>
   1b4ac:	bl	1117c <gettext@plt>
   1b4b0:	mov	r3, r0
   1b4b4:	ldr	r1, [pc, #72]	; 1b504 <__assert_fail@plt+0xa208>
   1b4b8:	mov	r0, r3
   1b4bc:	bl	11008 <printf@plt>
   1b4c0:	ldr	r0, [pc, #64]	; 1b508 <__assert_fail@plt+0xa20c>
   1b4c4:	bl	1117c <gettext@plt>
   1b4c8:	mov	r3, r0
   1b4cc:	ldr	r2, [pc, #56]	; 1b50c <__assert_fail@plt+0xa210>
   1b4d0:	ldr	r1, [pc, #56]	; 1b510 <__assert_fail@plt+0xa214>
   1b4d4:	mov	r0, r3
   1b4d8:	bl	11008 <printf@plt>
   1b4dc:	ldr	r0, [pc, #48]	; 1b514 <__assert_fail@plt+0xa218>
   1b4e0:	bl	1117c <gettext@plt>
   1b4e4:	mov	r3, r0
   1b4e8:	ldr	r1, [pc, #40]	; 1b518 <__assert_fail@plt+0xa21c>
   1b4ec:	mov	r0, r3
   1b4f0:	bl	11008 <printf@plt>
   1b4f4:	nop			; (mov r0, r0)
   1b4f8:	pop	{fp, pc}
   1b4fc:	muleq	r3, r4, r1
   1b500:	andeq	pc, r1, ip, lsr #25
   1b504:	andeq	pc, r1, r0, asr #25
   1b508:	ldrdeq	pc, [r1], -r8
   1b50c:	andeq	pc, r1, ip, ror #25
   1b510:	andeq	pc, r1, r4, lsl sp	; <UNPREDICTABLE>
   1b514:	andeq	pc, r1, r4, lsr #26
   1b518:	andeq	pc, r1, ip, asr #26
   1b51c:	push	{fp, lr}
   1b520:	add	fp, sp, #4
   1b524:	sub	sp, sp, #16
   1b528:	str	r0, [fp, #-8]
   1b52c:	str	r1, [fp, #-12]
   1b530:	str	r2, [fp, #-16]
   1b534:	ldr	r2, [fp, #-16]
   1b538:	ldr	r1, [fp, #-12]
   1b53c:	ldr	r0, [fp, #-8]
   1b540:	bl	1b6ac <__assert_fail@plt+0xa3b0>
   1b544:	mov	r3, r0
   1b548:	mov	r0, r3
   1b54c:	sub	sp, fp, #4
   1b550:	pop	{fp, pc}
   1b554:	push	{fp, lr}
   1b558:	add	fp, sp, #4
   1b55c:	sub	sp, sp, #8
   1b560:	str	r0, [fp, #-8]
   1b564:	ldr	r3, [fp, #-8]
   1b568:	cmp	r3, #0
   1b56c:	bne	1b574 <__assert_fail@plt+0xa278>
   1b570:	bl	1c0a0 <__assert_fail@plt+0xada4>
   1b574:	ldr	r3, [fp, #-8]
   1b578:	mov	r0, r3
   1b57c:	sub	sp, fp, #4
   1b580:	pop	{fp, pc}
   1b584:	push	{fp, lr}
   1b588:	add	fp, sp, #4
   1b58c:	sub	sp, sp, #8
   1b590:	str	r0, [fp, #-8]
   1b594:	ldr	r0, [fp, #-8]
   1b598:	bl	1cac8 <__assert_fail@plt+0xb7cc>
   1b59c:	mov	r3, r0
   1b5a0:	mov	r0, r3
   1b5a4:	bl	1b554 <__assert_fail@plt+0xa258>
   1b5a8:	mov	r3, r0
   1b5ac:	mov	r0, r3
   1b5b0:	sub	sp, fp, #4
   1b5b4:	pop	{fp, pc}
   1b5b8:	push	{fp, lr}
   1b5bc:	add	fp, sp, #4
   1b5c0:	sub	sp, sp, #8
   1b5c4:	str	r0, [fp, #-8]
   1b5c8:	ldr	r0, [fp, #-8]
   1b5cc:	bl	1d90c <__assert_fail@plt+0xc610>
   1b5d0:	mov	r3, r0
   1b5d4:	mov	r0, r3
   1b5d8:	bl	1b554 <__assert_fail@plt+0xa258>
   1b5dc:	mov	r3, r0
   1b5e0:	mov	r0, r3
   1b5e4:	sub	sp, fp, #4
   1b5e8:	pop	{fp, pc}
   1b5ec:	push	{fp, lr}
   1b5f0:	add	fp, sp, #4
   1b5f4:	sub	sp, sp, #8
   1b5f8:	str	r0, [fp, #-8]
   1b5fc:	ldr	r0, [fp, #-8]
   1b600:	bl	1b584 <__assert_fail@plt+0xa288>
   1b604:	mov	r3, r0
   1b608:	mov	r0, r3
   1b60c:	sub	sp, fp, #4
   1b610:	pop	{fp, pc}
   1b614:	push	{fp, lr}
   1b618:	add	fp, sp, #4
   1b61c:	sub	sp, sp, #16
   1b620:	str	r0, [fp, #-16]
   1b624:	str	r1, [fp, #-20]	; 0xffffffec
   1b628:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b62c:	ldr	r0, [fp, #-16]
   1b630:	bl	1cb70 <__assert_fail@plt+0xb874>
   1b634:	str	r0, [fp, #-8]
   1b638:	ldr	r3, [fp, #-8]
   1b63c:	cmp	r3, #0
   1b640:	bne	1b660 <__assert_fail@plt+0xa364>
   1b644:	ldr	r3, [fp, #-16]
   1b648:	cmp	r3, #0
   1b64c:	beq	1b65c <__assert_fail@plt+0xa360>
   1b650:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b654:	cmp	r3, #0
   1b658:	beq	1b660 <__assert_fail@plt+0xa364>
   1b65c:	bl	1c0a0 <__assert_fail@plt+0xada4>
   1b660:	ldr	r3, [fp, #-8]
   1b664:	mov	r0, r3
   1b668:	sub	sp, fp, #4
   1b66c:	pop	{fp, pc}
   1b670:	push	{fp, lr}
   1b674:	add	fp, sp, #4
   1b678:	sub	sp, sp, #8
   1b67c:	str	r0, [fp, #-8]
   1b680:	str	r1, [fp, #-12]
   1b684:	ldr	r1, [fp, #-12]
   1b688:	ldr	r0, [fp, #-8]
   1b68c:	bl	1d938 <__assert_fail@plt+0xc63c>
   1b690:	mov	r3, r0
   1b694:	mov	r0, r3
   1b698:	bl	1b554 <__assert_fail@plt+0xa258>
   1b69c:	mov	r3, r0
   1b6a0:	mov	r0, r3
   1b6a4:	sub	sp, fp, #4
   1b6a8:	pop	{fp, pc}
   1b6ac:	push	{fp, lr}
   1b6b0:	add	fp, sp, #4
   1b6b4:	sub	sp, sp, #24
   1b6b8:	str	r0, [fp, #-16]
   1b6bc:	str	r1, [fp, #-20]	; 0xffffffec
   1b6c0:	str	r2, [fp, #-24]	; 0xffffffe8
   1b6c4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b6c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b6cc:	ldr	r0, [fp, #-16]
   1b6d0:	bl	1db2c <__assert_fail@plt+0xc830>
   1b6d4:	str	r0, [fp, #-8]
   1b6d8:	ldr	r3, [fp, #-8]
   1b6dc:	cmp	r3, #0
   1b6e0:	bne	1b70c <__assert_fail@plt+0xa410>
   1b6e4:	ldr	r3, [fp, #-16]
   1b6e8:	cmp	r3, #0
   1b6ec:	beq	1b708 <__assert_fail@plt+0xa40c>
   1b6f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b6f4:	cmp	r3, #0
   1b6f8:	beq	1b70c <__assert_fail@plt+0xa410>
   1b6fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b700:	cmp	r3, #0
   1b704:	beq	1b70c <__assert_fail@plt+0xa410>
   1b708:	bl	1c0a0 <__assert_fail@plt+0xada4>
   1b70c:	ldr	r3, [fp, #-8]
   1b710:	mov	r0, r3
   1b714:	sub	sp, fp, #4
   1b718:	pop	{fp, pc}
   1b71c:	push	{fp, lr}
   1b720:	add	fp, sp, #4
   1b724:	sub	sp, sp, #16
   1b728:	str	r0, [fp, #-8]
   1b72c:	str	r1, [fp, #-12]
   1b730:	str	r2, [fp, #-16]
   1b734:	ldr	r2, [fp, #-16]
   1b738:	ldr	r1, [fp, #-12]
   1b73c:	ldr	r0, [fp, #-8]
   1b740:	bl	1d9c0 <__assert_fail@plt+0xc6c4>
   1b744:	mov	r3, r0
   1b748:	mov	r0, r3
   1b74c:	bl	1b554 <__assert_fail@plt+0xa258>
   1b750:	mov	r3, r0
   1b754:	mov	r0, r3
   1b758:	sub	sp, fp, #4
   1b75c:	pop	{fp, pc}
   1b760:	push	{fp, lr}
   1b764:	add	fp, sp, #4
   1b768:	sub	sp, sp, #8
   1b76c:	str	r0, [fp, #-8]
   1b770:	str	r1, [fp, #-12]
   1b774:	ldr	r2, [fp, #-12]
   1b778:	ldr	r1, [fp, #-8]
   1b77c:	mov	r0, #0
   1b780:	bl	1b6ac <__assert_fail@plt+0xa3b0>
   1b784:	mov	r3, r0
   1b788:	mov	r0, r3
   1b78c:	sub	sp, fp, #4
   1b790:	pop	{fp, pc}
   1b794:	push	{fp, lr}
   1b798:	add	fp, sp, #4
   1b79c:	sub	sp, sp, #8
   1b7a0:	str	r0, [fp, #-8]
   1b7a4:	str	r1, [fp, #-12]
   1b7a8:	ldr	r2, [fp, #-12]
   1b7ac:	ldr	r1, [fp, #-8]
   1b7b0:	mov	r0, #0
   1b7b4:	bl	1b71c <__assert_fail@plt+0xa420>
   1b7b8:	mov	r3, r0
   1b7bc:	mov	r0, r3
   1b7c0:	sub	sp, fp, #4
   1b7c4:	pop	{fp, pc}
   1b7c8:	push	{fp, lr}
   1b7cc:	add	fp, sp, #4
   1b7d0:	sub	sp, sp, #8
   1b7d4:	str	r0, [fp, #-8]
   1b7d8:	str	r1, [fp, #-12]
   1b7dc:	mov	r2, #1
   1b7e0:	ldr	r1, [fp, #-12]
   1b7e4:	ldr	r0, [fp, #-8]
   1b7e8:	bl	1b7fc <__assert_fail@plt+0xa500>
   1b7ec:	mov	r3, r0
   1b7f0:	mov	r0, r3
   1b7f4:	sub	sp, fp, #4
   1b7f8:	pop	{fp, pc}
   1b7fc:	push	{fp, lr}
   1b800:	add	fp, sp, #4
   1b804:	sub	sp, sp, #24
   1b808:	str	r0, [fp, #-16]
   1b80c:	str	r1, [fp, #-20]	; 0xffffffec
   1b810:	str	r2, [fp, #-24]	; 0xffffffe8
   1b814:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b818:	ldr	r3, [r3]
   1b81c:	str	r3, [fp, #-8]
   1b820:	ldr	r3, [fp, #-16]
   1b824:	cmp	r3, #0
   1b828:	bne	1b874 <__assert_fail@plt+0xa578>
   1b82c:	ldr	r3, [fp, #-8]
   1b830:	cmp	r3, #0
   1b834:	bne	1b8d8 <__assert_fail@plt+0xa5dc>
   1b838:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b83c:	mov	r0, #64	; 0x40
   1b840:	bl	1e304 <__assert_fail@plt+0xd008>
   1b844:	mov	r3, r0
   1b848:	str	r3, [fp, #-8]
   1b84c:	ldr	r3, [fp, #-8]
   1b850:	cmp	r3, #0
   1b854:	moveq	r3, #1
   1b858:	movne	r3, #0
   1b85c:	uxtb	r3, r3
   1b860:	mov	r2, r3
   1b864:	ldr	r3, [fp, #-8]
   1b868:	add	r3, r2, r3
   1b86c:	str	r3, [fp, #-8]
   1b870:	b	1b8d8 <__assert_fail@plt+0xa5dc>
   1b874:	ldr	r3, [fp, #-8]
   1b878:	lsr	r3, r3, #1
   1b87c:	add	r3, r3, #1
   1b880:	mvn	r2, r3
   1b884:	ldr	r3, [fp, #-8]
   1b888:	cmp	r2, r3
   1b88c:	bcs	1b8b0 <__assert_fail@plt+0xa5b4>
   1b890:	ldr	r3, [fp, #-8]
   1b894:	lsr	r2, r3, #1
   1b898:	ldr	r3, [fp, #-8]
   1b89c:	add	r3, r2, r3
   1b8a0:	add	r3, r3, #1
   1b8a4:	str	r3, [fp, #-8]
   1b8a8:	mov	r3, #1
   1b8ac:	b	1b8cc <__assert_fail@plt+0xa5d0>
   1b8b0:	ldr	r3, [fp, #-8]
   1b8b4:	lsr	r2, r3, #1
   1b8b8:	ldr	r3, [fp, #-8]
   1b8bc:	add	r3, r2, r3
   1b8c0:	add	r3, r3, #1
   1b8c4:	str	r3, [fp, #-8]
   1b8c8:	mov	r3, #0
   1b8cc:	cmp	r3, #0
   1b8d0:	beq	1b8d8 <__assert_fail@plt+0xa5dc>
   1b8d4:	bl	1c0a0 <__assert_fail@plt+0xada4>
   1b8d8:	ldr	r3, [fp, #-8]
   1b8dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b8e0:	mov	r1, r3
   1b8e4:	ldr	r0, [fp, #-16]
   1b8e8:	bl	1b6ac <__assert_fail@plt+0xa3b0>
   1b8ec:	str	r0, [fp, #-16]
   1b8f0:	ldr	r2, [fp, #-8]
   1b8f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b8f8:	str	r2, [r3]
   1b8fc:	ldr	r3, [fp, #-16]
   1b900:	mov	r0, r3
   1b904:	sub	sp, fp, #4
   1b908:	pop	{fp, pc}
   1b90c:	push	{fp, lr}
   1b910:	add	fp, sp, #4
   1b914:	sub	sp, sp, #32
   1b918:	str	r0, [fp, #-24]	; 0xffffffe8
   1b91c:	str	r1, [fp, #-28]	; 0xffffffe4
   1b920:	str	r2, [fp, #-32]	; 0xffffffe0
   1b924:	str	r3, [fp, #-36]	; 0xffffffdc
   1b928:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b92c:	ldr	r3, [r3]
   1b930:	str	r3, [fp, #-8]
   1b934:	ldr	r3, [fp, #-8]
   1b938:	asr	r3, r3, #1
   1b93c:	cmp	r3, #0
   1b940:	bge	1b968 <__assert_fail@plt+0xa66c>
   1b944:	ldr	r3, [fp, #-8]
   1b948:	asr	r3, r3, #1
   1b94c:	rsb	r2, r3, #-2147483648	; 0x80000000
   1b950:	ldr	r3, [fp, #-8]
   1b954:	cmp	r2, r3
   1b958:	movgt	r3, #1
   1b95c:	movle	r3, #0
   1b960:	uxtb	r3, r3
   1b964:	b	1b9bc <__assert_fail@plt+0xa6c0>
   1b968:	ldr	r3, [fp, #-8]
   1b96c:	cmp	r3, #0
   1b970:	bge	1b998 <__assert_fail@plt+0xa69c>
   1b974:	ldr	r3, [fp, #-8]
   1b978:	asr	r2, r3, #1
   1b97c:	ldr	r3, [fp, #-8]
   1b980:	rsb	r3, r3, #-2147483648	; 0x80000000
   1b984:	cmp	r2, r3
   1b988:	movlt	r3, #1
   1b98c:	movge	r3, #0
   1b990:	uxtb	r3, r3
   1b994:	b	1b9bc <__assert_fail@plt+0xa6c0>
   1b998:	ldr	r3, [fp, #-8]
   1b99c:	asr	r2, r3, #1
   1b9a0:	mvn	r3, #-2147483648	; 0x80000000
   1b9a4:	sub	r3, r3, r2
   1b9a8:	ldr	r2, [fp, #-8]
   1b9ac:	cmp	r3, r2
   1b9b0:	movlt	r3, #1
   1b9b4:	movge	r3, #0
   1b9b8:	uxtb	r3, r3
   1b9bc:	cmp	r3, #0
   1b9c0:	beq	1b9e4 <__assert_fail@plt+0xa6e8>
   1b9c4:	ldr	r3, [fp, #-8]
   1b9c8:	asr	r3, r3, #1
   1b9cc:	mov	r2, r3
   1b9d0:	ldr	r3, [fp, #-8]
   1b9d4:	add	r3, r2, r3
   1b9d8:	str	r3, [fp, #-16]
   1b9dc:	mov	r3, #1
   1b9e0:	b	1ba00 <__assert_fail@plt+0xa704>
   1b9e4:	ldr	r3, [fp, #-8]
   1b9e8:	asr	r3, r3, #1
   1b9ec:	mov	r2, r3
   1b9f0:	ldr	r3, [fp, #-8]
   1b9f4:	add	r3, r2, r3
   1b9f8:	str	r3, [fp, #-16]
   1b9fc:	mov	r3, #0
   1ba00:	cmp	r3, #0
   1ba04:	beq	1ba10 <__assert_fail@plt+0xa714>
   1ba08:	mvn	r3, #-2147483648	; 0x80000000
   1ba0c:	str	r3, [fp, #-16]
   1ba10:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1ba14:	cmp	r3, #0
   1ba18:	blt	1ba34 <__assert_fail@plt+0xa738>
   1ba1c:	ldr	r3, [fp, #-16]
   1ba20:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1ba24:	cmp	r2, r3
   1ba28:	bge	1ba34 <__assert_fail@plt+0xa738>
   1ba2c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1ba30:	str	r3, [fp, #-16]
   1ba34:	ldr	r3, [fp, #4]
   1ba38:	cmp	r3, #0
   1ba3c:	bge	1bacc <__assert_fail@plt+0xa7d0>
   1ba40:	ldr	r3, [fp, #-16]
   1ba44:	cmp	r3, #0
   1ba48:	bge	1ba78 <__assert_fail@plt+0xa77c>
   1ba4c:	ldr	r1, [fp, #4]
   1ba50:	mvn	r0, #-2147483648	; 0x80000000
   1ba54:	bl	1e510 <__assert_fail@plt+0xd214>
   1ba58:	mov	r3, r0
   1ba5c:	mov	r2, r3
   1ba60:	ldr	r3, [fp, #-16]
   1ba64:	cmp	r2, r3
   1ba68:	movgt	r3, #1
   1ba6c:	movle	r3, #0
   1ba70:	uxtb	r3, r3
   1ba74:	b	1bb6c <__assert_fail@plt+0xa870>
   1ba78:	ldr	r3, [fp, #4]
   1ba7c:	cmn	r3, #1
   1ba80:	bne	1baa0 <__assert_fail@plt+0xa7a4>
   1ba84:	ldr	r3, [fp, #-16]
   1ba88:	add	r3, r3, #-2147483648	; 0x80000000
   1ba8c:	cmp	r3, #0
   1ba90:	movgt	r3, #1
   1ba94:	movle	r3, #0
   1ba98:	uxtb	r3, r3
   1ba9c:	b	1bb6c <__assert_fail@plt+0xa870>
   1baa0:	ldr	r1, [fp, #4]
   1baa4:	mov	r0, #-2147483648	; 0x80000000
   1baa8:	bl	1e510 <__assert_fail@plt+0xd214>
   1baac:	mov	r3, r0
   1bab0:	mov	r2, r3
   1bab4:	ldr	r3, [fp, #-16]
   1bab8:	cmp	r2, r3
   1babc:	movlt	r3, #1
   1bac0:	movge	r3, #0
   1bac4:	uxtb	r3, r3
   1bac8:	b	1bb6c <__assert_fail@plt+0xa870>
   1bacc:	ldr	r3, [fp, #4]
   1bad0:	cmp	r3, #0
   1bad4:	beq	1bb68 <__assert_fail@plt+0xa86c>
   1bad8:	ldr	r3, [fp, #-16]
   1badc:	cmp	r3, #0
   1bae0:	bge	1bb3c <__assert_fail@plt+0xa840>
   1bae4:	ldr	r3, [fp, #-16]
   1bae8:	cmn	r3, #1
   1baec:	bne	1bb0c <__assert_fail@plt+0xa810>
   1baf0:	ldr	r3, [fp, #4]
   1baf4:	add	r3, r3, #-2147483648	; 0x80000000
   1baf8:	cmp	r3, #0
   1bafc:	movgt	r3, #1
   1bb00:	movle	r3, #0
   1bb04:	uxtb	r3, r3
   1bb08:	b	1bb6c <__assert_fail@plt+0xa870>
   1bb0c:	ldr	r3, [fp, #-16]
   1bb10:	mov	r1, r3
   1bb14:	mov	r0, #-2147483648	; 0x80000000
   1bb18:	bl	1e510 <__assert_fail@plt+0xd214>
   1bb1c:	mov	r3, r0
   1bb20:	mov	r2, r3
   1bb24:	ldr	r3, [fp, #4]
   1bb28:	cmp	r2, r3
   1bb2c:	movlt	r3, #1
   1bb30:	movge	r3, #0
   1bb34:	uxtb	r3, r3
   1bb38:	b	1bb6c <__assert_fail@plt+0xa870>
   1bb3c:	ldr	r1, [fp, #4]
   1bb40:	mvn	r0, #-2147483648	; 0x80000000
   1bb44:	bl	1e510 <__assert_fail@plt+0xd214>
   1bb48:	mov	r3, r0
   1bb4c:	mov	r2, r3
   1bb50:	ldr	r3, [fp, #-16]
   1bb54:	cmp	r2, r3
   1bb58:	movlt	r3, #1
   1bb5c:	movge	r3, #0
   1bb60:	uxtb	r3, r3
   1bb64:	b	1bb6c <__assert_fail@plt+0xa870>
   1bb68:	mov	r3, #0
   1bb6c:	cmp	r3, #0
   1bb70:	beq	1bb90 <__assert_fail@plt+0xa894>
   1bb74:	ldr	r3, [fp, #-16]
   1bb78:	mov	r2, r3
   1bb7c:	ldr	r3, [fp, #4]
   1bb80:	mul	r3, r3, r2
   1bb84:	str	r3, [fp, #-20]	; 0xffffffec
   1bb88:	mov	r3, #1
   1bb8c:	b	1bba8 <__assert_fail@plt+0xa8ac>
   1bb90:	ldr	r3, [fp, #-16]
   1bb94:	mov	r2, r3
   1bb98:	ldr	r3, [fp, #4]
   1bb9c:	mul	r3, r3, r2
   1bba0:	str	r3, [fp, #-20]	; 0xffffffec
   1bba4:	mov	r3, #0
   1bba8:	cmp	r3, #0
   1bbac:	beq	1bbb8 <__assert_fail@plt+0xa8bc>
   1bbb0:	mvn	r3, #-2147483648	; 0x80000000
   1bbb4:	b	1bbd0 <__assert_fail@plt+0xa8d4>
   1bbb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bbbc:	cmp	r3, #63	; 0x3f
   1bbc0:	bgt	1bbcc <__assert_fail@plt+0xa8d0>
   1bbc4:	mov	r3, #64	; 0x40
   1bbc8:	b	1bbd0 <__assert_fail@plt+0xa8d4>
   1bbcc:	mov	r3, #0
   1bbd0:	str	r3, [fp, #-12]
   1bbd4:	ldr	r3, [fp, #-12]
   1bbd8:	cmp	r3, #0
   1bbdc:	beq	1bc18 <__assert_fail@plt+0xa91c>
   1bbe0:	ldr	r1, [fp, #4]
   1bbe4:	ldr	r0, [fp, #-12]
   1bbe8:	bl	1e510 <__assert_fail@plt+0xd214>
   1bbec:	mov	r3, r0
   1bbf0:	str	r3, [fp, #-16]
   1bbf4:	ldr	r3, [fp, #-12]
   1bbf8:	ldr	r1, [fp, #4]
   1bbfc:	mov	r0, r3
   1bc00:	bl	1e730 <__assert_fail@plt+0xd434>
   1bc04:	mov	r3, r1
   1bc08:	mov	r2, r3
   1bc0c:	ldr	r3, [fp, #-12]
   1bc10:	sub	r3, r3, r2
   1bc14:	str	r3, [fp, #-20]	; 0xffffffec
   1bc18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bc1c:	cmp	r3, #0
   1bc20:	bne	1bc30 <__assert_fail@plt+0xa934>
   1bc24:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1bc28:	mov	r2, #0
   1bc2c:	str	r2, [r3]
   1bc30:	ldr	r2, [fp, #-16]
   1bc34:	ldr	r3, [fp, #-8]
   1bc38:	sub	r2, r2, r3
   1bc3c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bc40:	cmp	r2, r3
   1bc44:	bge	1be7c <__assert_fail@plt+0xab80>
   1bc48:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bc4c:	cmp	r3, #0
   1bc50:	bge	1bc74 <__assert_fail@plt+0xa978>
   1bc54:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bc58:	rsb	r2, r3, #-2147483648	; 0x80000000
   1bc5c:	ldr	r3, [fp, #-8]
   1bc60:	cmp	r2, r3
   1bc64:	movgt	r3, #1
   1bc68:	movle	r3, #0
   1bc6c:	uxtb	r3, r3
   1bc70:	b	1bcc0 <__assert_fail@plt+0xa9c4>
   1bc74:	ldr	r3, [fp, #-8]
   1bc78:	cmp	r3, #0
   1bc7c:	bge	1bca0 <__assert_fail@plt+0xa9a4>
   1bc80:	ldr	r3, [fp, #-8]
   1bc84:	rsb	r2, r3, #-2147483648	; 0x80000000
   1bc88:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bc8c:	cmp	r2, r3
   1bc90:	movgt	r3, #1
   1bc94:	movle	r3, #0
   1bc98:	uxtb	r3, r3
   1bc9c:	b	1bcc0 <__assert_fail@plt+0xa9c4>
   1bca0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1bca4:	mvn	r3, #-2147483648	; 0x80000000
   1bca8:	sub	r3, r3, r2
   1bcac:	ldr	r2, [fp, #-8]
   1bcb0:	cmp	r3, r2
   1bcb4:	movlt	r3, #1
   1bcb8:	movge	r3, #0
   1bcbc:	uxtb	r3, r3
   1bcc0:	cmp	r3, #0
   1bcc4:	beq	1bcdc <__assert_fail@plt+0xa9e0>
   1bcc8:	ldr	r2, [fp, #-8]
   1bccc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bcd0:	add	r3, r2, r3
   1bcd4:	str	r3, [fp, #-16]
   1bcd8:	b	1be78 <__assert_fail@plt+0xab7c>
   1bcdc:	ldr	r2, [fp, #-8]
   1bce0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bce4:	add	r3, r2, r3
   1bce8:	str	r3, [fp, #-16]
   1bcec:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1bcf0:	cmp	r3, #0
   1bcf4:	blt	1bd08 <__assert_fail@plt+0xaa0c>
   1bcf8:	ldr	r3, [fp, #-16]
   1bcfc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1bd00:	cmp	r2, r3
   1bd04:	blt	1be78 <__assert_fail@plt+0xab7c>
   1bd08:	ldr	r3, [fp, #4]
   1bd0c:	cmp	r3, #0
   1bd10:	bge	1bda0 <__assert_fail@plt+0xaaa4>
   1bd14:	ldr	r3, [fp, #-16]
   1bd18:	cmp	r3, #0
   1bd1c:	bge	1bd4c <__assert_fail@plt+0xaa50>
   1bd20:	ldr	r1, [fp, #4]
   1bd24:	mvn	r0, #-2147483648	; 0x80000000
   1bd28:	bl	1e510 <__assert_fail@plt+0xd214>
   1bd2c:	mov	r3, r0
   1bd30:	mov	r2, r3
   1bd34:	ldr	r3, [fp, #-16]
   1bd38:	cmp	r2, r3
   1bd3c:	movgt	r3, #1
   1bd40:	movle	r3, #0
   1bd44:	uxtb	r3, r3
   1bd48:	b	1be40 <__assert_fail@plt+0xab44>
   1bd4c:	ldr	r3, [fp, #4]
   1bd50:	cmn	r3, #1
   1bd54:	bne	1bd74 <__assert_fail@plt+0xaa78>
   1bd58:	ldr	r3, [fp, #-16]
   1bd5c:	add	r3, r3, #-2147483648	; 0x80000000
   1bd60:	cmp	r3, #0
   1bd64:	movgt	r3, #1
   1bd68:	movle	r3, #0
   1bd6c:	uxtb	r3, r3
   1bd70:	b	1be40 <__assert_fail@plt+0xab44>
   1bd74:	ldr	r1, [fp, #4]
   1bd78:	mov	r0, #-2147483648	; 0x80000000
   1bd7c:	bl	1e510 <__assert_fail@plt+0xd214>
   1bd80:	mov	r3, r0
   1bd84:	mov	r2, r3
   1bd88:	ldr	r3, [fp, #-16]
   1bd8c:	cmp	r2, r3
   1bd90:	movlt	r3, #1
   1bd94:	movge	r3, #0
   1bd98:	uxtb	r3, r3
   1bd9c:	b	1be40 <__assert_fail@plt+0xab44>
   1bda0:	ldr	r3, [fp, #4]
   1bda4:	cmp	r3, #0
   1bda8:	beq	1be3c <__assert_fail@plt+0xab40>
   1bdac:	ldr	r3, [fp, #-16]
   1bdb0:	cmp	r3, #0
   1bdb4:	bge	1be10 <__assert_fail@plt+0xab14>
   1bdb8:	ldr	r3, [fp, #-16]
   1bdbc:	cmn	r3, #1
   1bdc0:	bne	1bde0 <__assert_fail@plt+0xaae4>
   1bdc4:	ldr	r3, [fp, #4]
   1bdc8:	add	r3, r3, #-2147483648	; 0x80000000
   1bdcc:	cmp	r3, #0
   1bdd0:	movgt	r3, #1
   1bdd4:	movle	r3, #0
   1bdd8:	uxtb	r3, r3
   1bddc:	b	1be40 <__assert_fail@plt+0xab44>
   1bde0:	ldr	r3, [fp, #-16]
   1bde4:	mov	r1, r3
   1bde8:	mov	r0, #-2147483648	; 0x80000000
   1bdec:	bl	1e510 <__assert_fail@plt+0xd214>
   1bdf0:	mov	r3, r0
   1bdf4:	mov	r2, r3
   1bdf8:	ldr	r3, [fp, #4]
   1bdfc:	cmp	r2, r3
   1be00:	movlt	r3, #1
   1be04:	movge	r3, #0
   1be08:	uxtb	r3, r3
   1be0c:	b	1be40 <__assert_fail@plt+0xab44>
   1be10:	ldr	r1, [fp, #4]
   1be14:	mvn	r0, #-2147483648	; 0x80000000
   1be18:	bl	1e510 <__assert_fail@plt+0xd214>
   1be1c:	mov	r3, r0
   1be20:	mov	r2, r3
   1be24:	ldr	r3, [fp, #-16]
   1be28:	cmp	r2, r3
   1be2c:	movlt	r3, #1
   1be30:	movge	r3, #0
   1be34:	uxtb	r3, r3
   1be38:	b	1be40 <__assert_fail@plt+0xab44>
   1be3c:	mov	r3, #0
   1be40:	cmp	r3, #0
   1be44:	beq	1be60 <__assert_fail@plt+0xab64>
   1be48:	ldr	r3, [fp, #-16]
   1be4c:	mov	r2, r3
   1be50:	ldr	r3, [fp, #4]
   1be54:	mul	r3, r3, r2
   1be58:	str	r3, [fp, #-20]	; 0xffffffec
   1be5c:	b	1be78 <__assert_fail@plt+0xab7c>
   1be60:	ldr	r3, [fp, #-16]
   1be64:	mov	r2, r3
   1be68:	ldr	r3, [fp, #4]
   1be6c:	mul	r3, r3, r2
   1be70:	str	r3, [fp, #-20]	; 0xffffffec
   1be74:	b	1be7c <__assert_fail@plt+0xab80>
   1be78:	bl	1c0a0 <__assert_fail@plt+0xada4>
   1be7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1be80:	mov	r1, r3
   1be84:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1be88:	bl	1b614 <__assert_fail@plt+0xa318>
   1be8c:	str	r0, [fp, #-24]	; 0xffffffe8
   1be90:	ldr	r2, [fp, #-16]
   1be94:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1be98:	str	r2, [r3]
   1be9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bea0:	mov	r0, r3
   1bea4:	sub	sp, fp, #4
   1bea8:	pop	{fp, pc}
   1beac:	push	{fp, lr}
   1beb0:	add	fp, sp, #4
   1beb4:	sub	sp, sp, #8
   1beb8:	str	r0, [fp, #-8]
   1bebc:	mov	r1, #1
   1bec0:	ldr	r0, [fp, #-8]
   1bec4:	bl	1bf04 <__assert_fail@plt+0xac08>
   1bec8:	mov	r3, r0
   1becc:	mov	r0, r3
   1bed0:	sub	sp, fp, #4
   1bed4:	pop	{fp, pc}
   1bed8:	push	{fp, lr}
   1bedc:	add	fp, sp, #4
   1bee0:	sub	sp, sp, #8
   1bee4:	str	r0, [fp, #-8]
   1bee8:	mov	r1, #1
   1beec:	ldr	r0, [fp, #-8]
   1bef0:	bl	1bf40 <__assert_fail@plt+0xac44>
   1bef4:	mov	r3, r0
   1bef8:	mov	r0, r3
   1befc:	sub	sp, fp, #4
   1bf00:	pop	{fp, pc}
   1bf04:	push	{fp, lr}
   1bf08:	add	fp, sp, #4
   1bf0c:	sub	sp, sp, #8
   1bf10:	str	r0, [fp, #-8]
   1bf14:	str	r1, [fp, #-12]
   1bf18:	ldr	r1, [fp, #-12]
   1bf1c:	ldr	r0, [fp, #-8]
   1bf20:	bl	1ca04 <__assert_fail@plt+0xb708>
   1bf24:	mov	r3, r0
   1bf28:	mov	r0, r3
   1bf2c:	bl	1b554 <__assert_fail@plt+0xa258>
   1bf30:	mov	r3, r0
   1bf34:	mov	r0, r3
   1bf38:	sub	sp, fp, #4
   1bf3c:	pop	{fp, pc}
   1bf40:	push	{fp, lr}
   1bf44:	add	fp, sp, #4
   1bf48:	sub	sp, sp, #8
   1bf4c:	str	r0, [fp, #-8]
   1bf50:	str	r1, [fp, #-12]
   1bf54:	ldr	r1, [fp, #-12]
   1bf58:	ldr	r0, [fp, #-8]
   1bf5c:	bl	1d988 <__assert_fail@plt+0xc68c>
   1bf60:	mov	r3, r0
   1bf64:	mov	r0, r3
   1bf68:	bl	1b554 <__assert_fail@plt+0xa258>
   1bf6c:	mov	r3, r0
   1bf70:	mov	r0, r3
   1bf74:	sub	sp, fp, #4
   1bf78:	pop	{fp, pc}
   1bf7c:	push	{fp, lr}
   1bf80:	add	fp, sp, #4
   1bf84:	sub	sp, sp, #8
   1bf88:	str	r0, [fp, #-8]
   1bf8c:	str	r1, [fp, #-12]
   1bf90:	ldr	r0, [fp, #-12]
   1bf94:	bl	1b584 <__assert_fail@plt+0xa288>
   1bf98:	mov	r3, r0
   1bf9c:	ldr	r2, [fp, #-12]
   1bfa0:	ldr	r1, [fp, #-8]
   1bfa4:	mov	r0, r3
   1bfa8:	bl	11044 <memcpy@plt>
   1bfac:	mov	r3, r0
   1bfb0:	mov	r0, r3
   1bfb4:	sub	sp, fp, #4
   1bfb8:	pop	{fp, pc}
   1bfbc:	push	{fp, lr}
   1bfc0:	add	fp, sp, #4
   1bfc4:	sub	sp, sp, #8
   1bfc8:	str	r0, [fp, #-8]
   1bfcc:	str	r1, [fp, #-12]
   1bfd0:	ldr	r0, [fp, #-12]
   1bfd4:	bl	1b5b8 <__assert_fail@plt+0xa2bc>
   1bfd8:	mov	r3, r0
   1bfdc:	mov	r0, r3
   1bfe0:	ldr	r3, [fp, #-12]
   1bfe4:	mov	r2, r3
   1bfe8:	ldr	r1, [fp, #-8]
   1bfec:	bl	11044 <memcpy@plt>
   1bff0:	mov	r3, r0
   1bff4:	mov	r0, r3
   1bff8:	sub	sp, fp, #4
   1bffc:	pop	{fp, pc}
   1c000:	push	{fp, lr}
   1c004:	add	fp, sp, #4
   1c008:	sub	sp, sp, #16
   1c00c:	str	r0, [fp, #-16]
   1c010:	str	r1, [fp, #-20]	; 0xffffffec
   1c014:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c018:	add	r3, r3, #1
   1c01c:	mov	r0, r3
   1c020:	bl	1b5b8 <__assert_fail@plt+0xa2bc>
   1c024:	mov	r3, r0
   1c028:	str	r3, [fp, #-8]
   1c02c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c030:	ldr	r2, [fp, #-8]
   1c034:	add	r3, r2, r3
   1c038:	mov	r2, #0
   1c03c:	strb	r2, [r3]
   1c040:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c044:	mov	r2, r3
   1c048:	ldr	r1, [fp, #-16]
   1c04c:	ldr	r0, [fp, #-8]
   1c050:	bl	11044 <memcpy@plt>
   1c054:	mov	r3, r0
   1c058:	mov	r0, r3
   1c05c:	sub	sp, fp, #4
   1c060:	pop	{fp, pc}
   1c064:	push	{fp, lr}
   1c068:	add	fp, sp, #4
   1c06c:	sub	sp, sp, #8
   1c070:	str	r0, [fp, #-8]
   1c074:	ldr	r0, [fp, #-8]
   1c078:	bl	11188 <strlen@plt>
   1c07c:	mov	r3, r0
   1c080:	add	r3, r3, #1
   1c084:	mov	r1, r3
   1c088:	ldr	r0, [fp, #-8]
   1c08c:	bl	1bf7c <__assert_fail@plt+0xac80>
   1c090:	mov	r3, r0
   1c094:	mov	r0, r3
   1c098:	sub	sp, fp, #4
   1c09c:	pop	{fp, pc}
   1c0a0:	push	{r4, r5, fp, lr}
   1c0a4:	add	fp, sp, #12
   1c0a8:	ldr	r3, [pc, #32]	; 1c0d0 <__assert_fail@plt+0xadd4>
   1c0ac:	ldr	r4, [r3]
   1c0b0:	ldr	r0, [pc, #28]	; 1c0d4 <__assert_fail@plt+0xadd8>
   1c0b4:	bl	1117c <gettext@plt>
   1c0b8:	mov	r3, r0
   1c0bc:	ldr	r2, [pc, #20]	; 1c0d8 <__assert_fail@plt+0xaddc>
   1c0c0:	mov	r1, #0
   1c0c4:	mov	r0, r4
   1c0c8:	bl	11110 <error@plt>
   1c0cc:	bl	112b4 <abort@plt>
   1c0d0:	andeq	r0, r3, r8, lsr r1
   1c0d4:	muleq	r1, ip, sp
   1c0d8:			; <UNDEFINED> instruction: 0x0001fdb0
   1c0dc:	push	{fp, lr}
   1c0e0:	add	fp, sp, #4
   1c0e4:	sub	sp, sp, #24
   1c0e8:	str	r0, [fp, #-16]
   1c0ec:	str	r1, [fp, #-20]	; 0xffffffec
   1c0f0:	str	r2, [fp, #-24]	; 0xffffffe8
   1c0f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c0f8:	orr	r3, r3, #512	; 0x200
   1c0fc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c100:	mov	r1, r3
   1c104:	ldr	r0, [fp, #-16]
   1c108:	bl	13b8c <__assert_fail@plt+0x2890>
   1c10c:	str	r0, [fp, #-8]
   1c110:	ldr	r3, [fp, #-8]
   1c114:	cmp	r3, #0
   1c118:	bne	1c148 <__assert_fail@plt+0xae4c>
   1c11c:	bl	111c4 <__errno_location@plt>
   1c120:	mov	r3, r0
   1c124:	ldr	r3, [r3]
   1c128:	cmp	r3, #22
   1c12c:	bne	1c144 <__assert_fail@plt+0xae48>
   1c130:	ldr	r3, [pc, #32]	; 1c158 <__assert_fail@plt+0xae5c>
   1c134:	mov	r2, #41	; 0x29
   1c138:	ldr	r1, [pc, #28]	; 1c15c <__assert_fail@plt+0xae60>
   1c13c:	ldr	r0, [pc, #28]	; 1c160 <__assert_fail@plt+0xae64>
   1c140:	bl	112fc <__assert_fail@plt>
   1c144:	bl	1c0a0 <__assert_fail@plt+0xada4>
   1c148:	ldr	r3, [fp, #-8]
   1c14c:	mov	r0, r3
   1c150:	sub	sp, fp, #4
   1c154:	pop	{fp, pc}
   1c158:	ldrdeq	pc, [r1], -r0
   1c15c:			; <UNDEFINED> instruction: 0x0001fdb4
   1c160:	andeq	pc, r1, r0, asr #27
   1c164:	push	{fp}		; (str fp, [sp, #-4]!)
   1c168:	add	fp, sp, #0
   1c16c:	sub	sp, sp, #12
   1c170:	str	r0, [fp, #-8]
   1c174:	str	r1, [fp, #-12]
   1c178:	ldr	r3, [fp, #-8]
   1c17c:	ldr	r3, [r3, #48]	; 0x30
   1c180:	and	r3, r3, #16
   1c184:	cmp	r3, #0
   1c188:	beq	1c1a0 <__assert_fail@plt+0xaea4>
   1c18c:	ldr	r3, [fp, #-8]
   1c190:	ldr	r3, [r3, #48]	; 0x30
   1c194:	and	r3, r3, #1
   1c198:	cmp	r3, #0
   1c19c:	beq	1c1d8 <__assert_fail@plt+0xaedc>
   1c1a0:	ldr	r3, [fp, #-8]
   1c1a4:	ldr	r3, [r3, #48]	; 0x30
   1c1a8:	and	r3, r3, #16
   1c1ac:	cmp	r3, #0
   1c1b0:	beq	1c1e0 <__assert_fail@plt+0xaee4>
   1c1b4:	ldr	r3, [fp, #-8]
   1c1b8:	ldr	r3, [r3, #48]	; 0x30
   1c1bc:	and	r3, r3, #1
   1c1c0:	cmp	r3, #0
   1c1c4:	beq	1c1e0 <__assert_fail@plt+0xaee4>
   1c1c8:	ldr	r3, [fp, #-12]
   1c1cc:	ldr	r3, [r3, #48]	; 0x30
   1c1d0:	cmp	r3, #0
   1c1d4:	beq	1c1e0 <__assert_fail@plt+0xaee4>
   1c1d8:	mov	r3, #1
   1c1dc:	b	1c1e4 <__assert_fail@plt+0xaee8>
   1c1e0:	mov	r3, #0
   1c1e4:	and	r3, r3, #1
   1c1e8:	uxtb	r3, r3
   1c1ec:	mov	r0, r3
   1c1f0:	add	sp, fp, #0
   1c1f4:	pop	{fp}		; (ldr fp, [sp], #4)
   1c1f8:	bx	lr
   1c1fc:	push	{fp, lr}
   1c200:	add	fp, sp, #4
   1c204:	sub	sp, sp, #16
   1c208:	str	r0, [fp, #-16]
   1c20c:	str	r1, [fp, #-20]	; 0xffffffec
   1c210:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c214:	cmp	r3, #0
   1c218:	bge	1c254 <__assert_fail@plt+0xaf58>
   1c21c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c220:	mov	r0, #0
   1c224:	bl	1e510 <__assert_fail@plt+0xd214>
   1c228:	mov	r3, r0
   1c22c:	mov	r0, r3
   1c230:	asr	r1, r0, #31
   1c234:	ldr	r3, [fp, #-16]
   1c238:	ldrd	r2, [r3]
   1c23c:	cmp	r1, r3
   1c240:	cmpeq	r0, r2
   1c244:	movcc	r3, #1
   1c248:	movcs	r3, #0
   1c24c:	uxtb	r3, r3
   1c250:	b	1c2b0 <__assert_fail@plt+0xafb4>
   1c254:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c258:	cmp	r3, #0
   1c25c:	beq	1c2a4 <__assert_fail@plt+0xafa8>
   1c260:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c264:	mov	r2, r3
   1c268:	asr	r3, r2, #31
   1c26c:	mvn	r0, #0
   1c270:	mvn	r1, #0
   1c274:	bl	1e750 <__assert_fail@plt+0xd454>
   1c278:	mov	r2, r0
   1c27c:	mov	r3, r1
   1c280:	mov	r0, r2
   1c284:	mov	r1, r3
   1c288:	ldr	r3, [fp, #-16]
   1c28c:	ldrd	r2, [r3]
   1c290:	cmp	r1, r3
   1c294:	cmpeq	r0, r2
   1c298:	bcs	1c2a4 <__assert_fail@plt+0xafa8>
   1c29c:	mov	r3, #1
   1c2a0:	b	1c2a8 <__assert_fail@plt+0xafac>
   1c2a4:	mov	r3, #0
   1c2a8:	and	r3, r3, #1
   1c2ac:	uxtb	r3, r3
   1c2b0:	cmp	r3, #0
   1c2b4:	beq	1c2f0 <__assert_fail@plt+0xaff4>
   1c2b8:	ldr	r3, [fp, #-16]
   1c2bc:	ldrd	r0, [r3]
   1c2c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c2c4:	mov	r2, r3
   1c2c8:	asr	r3, r2, #31
   1c2cc:	mul	lr, r2, r1
   1c2d0:	mul	ip, r0, r3
   1c2d4:	add	ip, lr, ip
   1c2d8:	umull	r2, r3, r0, r2
   1c2dc:	add	r1, ip, r3
   1c2e0:	mov	r3, r1
   1c2e4:	strd	r2, [fp, #-12]
   1c2e8:	mov	r3, #1
   1c2ec:	b	1c324 <__assert_fail@plt+0xb028>
   1c2f0:	ldr	r3, [fp, #-16]
   1c2f4:	ldrd	r0, [r3]
   1c2f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c2fc:	mov	r2, r3
   1c300:	asr	r3, r2, #31
   1c304:	mul	lr, r2, r1
   1c308:	mul	ip, r0, r3
   1c30c:	add	ip, lr, ip
   1c310:	umull	r2, r3, r0, r2
   1c314:	add	r1, ip, r3
   1c318:	mov	r3, r1
   1c31c:	strd	r2, [fp, #-12]
   1c320:	mov	r3, #0
   1c324:	cmp	r3, #0
   1c328:	beq	1c344 <__assert_fail@plt+0xb048>
   1c32c:	ldr	r1, [fp, #-16]
   1c330:	mvn	r2, #0
   1c334:	mvn	r3, #0
   1c338:	strd	r2, [r1]
   1c33c:	mov	r3, #1
   1c340:	b	1c354 <__assert_fail@plt+0xb058>
   1c344:	ldrd	r2, [fp, #-12]
   1c348:	ldr	r1, [fp, #-16]
   1c34c:	strd	r2, [r1]
   1c350:	mov	r3, #0
   1c354:	mov	r0, r3
   1c358:	sub	sp, fp, #4
   1c35c:	pop	{fp, pc}
   1c360:	push	{fp, lr}
   1c364:	add	fp, sp, #4
   1c368:	sub	sp, sp, #24
   1c36c:	str	r0, [fp, #-16]
   1c370:	str	r1, [fp, #-20]	; 0xffffffec
   1c374:	str	r2, [fp, #-24]	; 0xffffffe8
   1c378:	mov	r3, #0
   1c37c:	str	r3, [fp, #-8]
   1c380:	b	1c3a0 <__assert_fail@plt+0xb0a4>
   1c384:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c388:	ldr	r0, [fp, #-16]
   1c38c:	bl	1c1fc <__assert_fail@plt+0xaf00>
   1c390:	mov	r2, r0
   1c394:	ldr	r3, [fp, #-8]
   1c398:	orr	r3, r3, r2
   1c39c:	str	r3, [fp, #-8]
   1c3a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c3a4:	sub	r2, r3, #1
   1c3a8:	str	r2, [fp, #-24]	; 0xffffffe8
   1c3ac:	cmp	r3, #0
   1c3b0:	bne	1c384 <__assert_fail@plt+0xb088>
   1c3b4:	ldr	r3, [fp, #-8]
   1c3b8:	mov	r0, r3
   1c3bc:	sub	sp, fp, #4
   1c3c0:	pop	{fp, pc}
   1c3c4:	push	{fp, lr}
   1c3c8:	add	fp, sp, #4
   1c3cc:	sub	sp, sp, #56	; 0x38
   1c3d0:	str	r0, [fp, #-48]	; 0xffffffd0
   1c3d4:	str	r1, [fp, #-52]	; 0xffffffcc
   1c3d8:	str	r2, [fp, #-56]	; 0xffffffc8
   1c3dc:	str	r3, [fp, #-60]	; 0xffffffc4
   1c3e0:	mov	r3, #0
   1c3e4:	str	r3, [fp, #-8]
   1c3e8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1c3ec:	cmp	r3, #0
   1c3f0:	blt	1c400 <__assert_fail@plt+0xb104>
   1c3f4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1c3f8:	cmp	r3, #36	; 0x24
   1c3fc:	ble	1c414 <__assert_fail@plt+0xb118>
   1c400:	ldr	r3, [pc, #1520]	; 1c9f8 <__assert_fail@plt+0xb6fc>
   1c404:	mov	r2, #85	; 0x55
   1c408:	ldr	r1, [pc, #1516]	; 1c9fc <__assert_fail@plt+0xb700>
   1c40c:	ldr	r0, [pc, #1516]	; 1ca00 <__assert_fail@plt+0xb704>
   1c410:	bl	112fc <__assert_fail@plt>
   1c414:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1c418:	cmp	r3, #0
   1c41c:	bne	1c428 <__assert_fail@plt+0xb12c>
   1c420:	sub	r3, fp, #36	; 0x24
   1c424:	b	1c42c <__assert_fail@plt+0xb130>
   1c428:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1c42c:	str	r3, [fp, #-32]	; 0xffffffe0
   1c430:	bl	111c4 <__errno_location@plt>
   1c434:	mov	r2, r0
   1c438:	mov	r3, #0
   1c43c:	str	r3, [r2]
   1c440:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1c444:	str	r3, [fp, #-12]
   1c448:	ldr	r3, [fp, #-12]
   1c44c:	ldrb	r3, [r3]
   1c450:	strb	r3, [fp, #-13]
   1c454:	b	1c470 <__assert_fail@plt+0xb174>
   1c458:	ldr	r3, [fp, #-12]
   1c45c:	add	r3, r3, #1
   1c460:	str	r3, [fp, #-12]
   1c464:	ldr	r3, [fp, #-12]
   1c468:	ldrb	r3, [r3]
   1c46c:	strb	r3, [fp, #-13]
   1c470:	bl	11164 <__ctype_b_loc@plt>
   1c474:	mov	r3, r0
   1c478:	ldr	r2, [r3]
   1c47c:	ldrb	r3, [fp, #-13]
   1c480:	lsl	r3, r3, #1
   1c484:	add	r3, r2, r3
   1c488:	ldrh	r3, [r3]
   1c48c:	and	r3, r3, #8192	; 0x2000
   1c490:	cmp	r3, #0
   1c494:	bne	1c458 <__assert_fail@plt+0xb15c>
   1c498:	ldrb	r3, [fp, #-13]
   1c49c:	cmp	r3, #45	; 0x2d
   1c4a0:	bne	1c4ac <__assert_fail@plt+0xb1b0>
   1c4a4:	mov	r3, #4
   1c4a8:	b	1c9ec <__assert_fail@plt+0xb6f0>
   1c4ac:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1c4b0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1c4b4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1c4b8:	bl	111f4 <strtoumax@plt>
   1c4bc:	mov	r2, r0
   1c4c0:	mov	r3, r1
   1c4c4:	strd	r2, [fp, #-44]	; 0xffffffd4
   1c4c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c4cc:	ldr	r2, [r3]
   1c4d0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1c4d4:	cmp	r2, r3
   1c4d8:	bne	1c538 <__assert_fail@plt+0xb23c>
   1c4dc:	ldr	r3, [fp, #4]
   1c4e0:	cmp	r3, #0
   1c4e4:	beq	1c530 <__assert_fail@plt+0xb234>
   1c4e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c4ec:	ldr	r3, [r3]
   1c4f0:	ldrb	r3, [r3]
   1c4f4:	cmp	r3, #0
   1c4f8:	beq	1c530 <__assert_fail@plt+0xb234>
   1c4fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c500:	ldr	r3, [r3]
   1c504:	ldrb	r3, [r3]
   1c508:	mov	r1, r3
   1c50c:	ldr	r0, [fp, #4]
   1c510:	bl	11194 <strchr@plt>
   1c514:	mov	r3, r0
   1c518:	cmp	r3, #0
   1c51c:	beq	1c530 <__assert_fail@plt+0xb234>
   1c520:	mov	r2, #1
   1c524:	mov	r3, #0
   1c528:	strd	r2, [fp, #-44]	; 0xffffffd4
   1c52c:	b	1c570 <__assert_fail@plt+0xb274>
   1c530:	mov	r3, #4
   1c534:	b	1c9ec <__assert_fail@plt+0xb6f0>
   1c538:	bl	111c4 <__errno_location@plt>
   1c53c:	mov	r3, r0
   1c540:	ldr	r3, [r3]
   1c544:	cmp	r3, #0
   1c548:	beq	1c570 <__assert_fail@plt+0xb274>
   1c54c:	bl	111c4 <__errno_location@plt>
   1c550:	mov	r3, r0
   1c554:	ldr	r3, [r3]
   1c558:	cmp	r3, #34	; 0x22
   1c55c:	beq	1c568 <__assert_fail@plt+0xb26c>
   1c560:	mov	r3, #4
   1c564:	b	1c9ec <__assert_fail@plt+0xb6f0>
   1c568:	mov	r3, #1
   1c56c:	str	r3, [fp, #-8]
   1c570:	ldr	r3, [fp, #4]
   1c574:	cmp	r3, #0
   1c578:	bne	1c590 <__assert_fail@plt+0xb294>
   1c57c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1c580:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1c584:	strd	r2, [r1]
   1c588:	ldr	r3, [fp, #-8]
   1c58c:	b	1c9ec <__assert_fail@plt+0xb6f0>
   1c590:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c594:	ldr	r3, [r3]
   1c598:	ldrb	r3, [r3]
   1c59c:	cmp	r3, #0
   1c5a0:	beq	1c9dc <__assert_fail@plt+0xb6e0>
   1c5a4:	mov	r3, #1024	; 0x400
   1c5a8:	str	r3, [fp, #-20]	; 0xffffffec
   1c5ac:	mov	r3, #1
   1c5b0:	str	r3, [fp, #-24]	; 0xffffffe8
   1c5b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c5b8:	ldr	r3, [r3]
   1c5bc:	ldrb	r3, [r3]
   1c5c0:	mov	r1, r3
   1c5c4:	ldr	r0, [fp, #4]
   1c5c8:	bl	11194 <strchr@plt>
   1c5cc:	mov	r3, r0
   1c5d0:	cmp	r3, #0
   1c5d4:	bne	1c5f0 <__assert_fail@plt+0xb2f4>
   1c5d8:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1c5dc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1c5e0:	strd	r2, [r1]
   1c5e4:	ldr	r3, [fp, #-8]
   1c5e8:	orr	r3, r3, #2
   1c5ec:	b	1c9ec <__assert_fail@plt+0xb6f0>
   1c5f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c5f4:	ldr	r3, [r3]
   1c5f8:	ldrb	r3, [r3]
   1c5fc:	sub	r3, r3, #69	; 0x45
   1c600:	cmp	r3, #47	; 0x2f
   1c604:	ldrls	pc, [pc, r3, lsl #2]
   1c608:	b	1c754 <__assert_fail@plt+0xb458>
   1c60c:	andeq	ip, r1, ip, asr #13
   1c610:	andeq	ip, r1, r4, asr r7
   1c614:	andeq	ip, r1, ip, asr #13
   1c618:	andeq	ip, r1, r4, asr r7
   1c61c:	andeq	ip, r1, r4, asr r7
   1c620:	andeq	ip, r1, r4, asr r7
   1c624:	andeq	ip, r1, ip, asr #13
   1c628:	andeq	ip, r1, r4, asr r7
   1c62c:	andeq	ip, r1, ip, asr #13
   1c630:	andeq	ip, r1, r4, asr r7
   1c634:	andeq	ip, r1, r4, asr r7
   1c638:	andeq	ip, r1, ip, asr #13
   1c63c:	andeq	ip, r1, r4, asr r7
   1c640:	andeq	ip, r1, r4, asr r7
   1c644:	andeq	ip, r1, r4, asr r7
   1c648:	andeq	ip, r1, ip, asr #13
   1c64c:	andeq	ip, r1, r4, asr r7
   1c650:	andeq	ip, r1, r4, asr r7
   1c654:	andeq	ip, r1, r4, asr r7
   1c658:	andeq	ip, r1, r4, asr r7
   1c65c:	andeq	ip, r1, ip, asr #13
   1c660:	andeq	ip, r1, ip, asr #13
   1c664:	andeq	ip, r1, r4, asr r7
   1c668:	andeq	ip, r1, r4, asr r7
   1c66c:	andeq	ip, r1, r4, asr r7
   1c670:	andeq	ip, r1, r4, asr r7
   1c674:	andeq	ip, r1, r4, asr r7
   1c678:	andeq	ip, r1, r4, asr r7
   1c67c:	andeq	ip, r1, r4, asr r7
   1c680:	andeq	ip, r1, r4, asr r7
   1c684:	andeq	ip, r1, r4, asr r7
   1c688:	andeq	ip, r1, r4, asr r7
   1c68c:	andeq	ip, r1, r4, asr r7
   1c690:	andeq	ip, r1, r4, asr r7
   1c694:	andeq	ip, r1, ip, asr #13
   1c698:	andeq	ip, r1, r4, asr r7
   1c69c:	andeq	ip, r1, r4, asr r7
   1c6a0:	andeq	ip, r1, r4, asr r7
   1c6a4:	andeq	ip, r1, ip, asr #13
   1c6a8:	andeq	ip, r1, r4, asr r7
   1c6ac:	andeq	ip, r1, ip, asr #13
   1c6b0:	andeq	ip, r1, r4, asr r7
   1c6b4:	andeq	ip, r1, r4, asr r7
   1c6b8:	andeq	ip, r1, r4, asr r7
   1c6bc:	andeq	ip, r1, r4, asr r7
   1c6c0:	andeq	ip, r1, r4, asr r7
   1c6c4:	andeq	ip, r1, r4, asr r7
   1c6c8:	andeq	ip, r1, ip, asr #13
   1c6cc:	mov	r1, #48	; 0x30
   1c6d0:	ldr	r0, [fp, #4]
   1c6d4:	bl	11194 <strchr@plt>
   1c6d8:	mov	r3, r0
   1c6dc:	cmp	r3, #0
   1c6e0:	beq	1c754 <__assert_fail@plt+0xb458>
   1c6e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c6e8:	ldr	r3, [r3]
   1c6ec:	add	r3, r3, #1
   1c6f0:	ldrb	r3, [r3]
   1c6f4:	cmp	r3, #68	; 0x44
   1c6f8:	beq	1c738 <__assert_fail@plt+0xb43c>
   1c6fc:	cmp	r3, #105	; 0x69
   1c700:	beq	1c710 <__assert_fail@plt+0xb414>
   1c704:	cmp	r3, #66	; 0x42
   1c708:	beq	1c738 <__assert_fail@plt+0xb43c>
   1c70c:	b	1c754 <__assert_fail@plt+0xb458>
   1c710:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c714:	ldr	r3, [r3]
   1c718:	add	r3, r3, #2
   1c71c:	ldrb	r3, [r3]
   1c720:	cmp	r3, #66	; 0x42
   1c724:	bne	1c750 <__assert_fail@plt+0xb454>
   1c728:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c72c:	add	r3, r3, #2
   1c730:	str	r3, [fp, #-24]	; 0xffffffe8
   1c734:	b	1c750 <__assert_fail@plt+0xb454>
   1c738:	mov	r3, #1000	; 0x3e8
   1c73c:	str	r3, [fp, #-20]	; 0xffffffec
   1c740:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c744:	add	r3, r3, #1
   1c748:	str	r3, [fp, #-24]	; 0xffffffe8
   1c74c:	b	1c754 <__assert_fail@plt+0xb458>
   1c750:	nop			; (mov r0, r0)
   1c754:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c758:	ldr	r3, [r3]
   1c75c:	ldrb	r3, [r3]
   1c760:	sub	r3, r3, #66	; 0x42
   1c764:	cmp	r3, #53	; 0x35
   1c768:	ldrls	pc, [pc, r3, lsl #2]
   1c76c:	b	1c97c <__assert_fail@plt+0xb680>
   1c770:	andeq	ip, r1, r0, ror #16
   1c774:	andeq	ip, r1, ip, ror r9
   1c778:	andeq	ip, r1, ip, ror r9
   1c77c:	andeq	ip, r1, r4, lsl #17
   1c780:	andeq	ip, r1, ip, ror r9
   1c784:	andeq	ip, r1, r0, lsr #17
   1c788:	andeq	ip, r1, ip, ror r9
   1c78c:	andeq	ip, r1, ip, ror r9
   1c790:	andeq	ip, r1, ip, ror r9
   1c794:			; <UNDEFINED> instruction: 0x0001c8bc
   1c798:	andeq	ip, r1, ip, ror r9
   1c79c:	ldrdeq	ip, [r1], -r8
   1c7a0:	andeq	ip, r1, ip, ror r9
   1c7a4:	andeq	ip, r1, ip, ror r9
   1c7a8:	strdeq	ip, [r1], -r4
   1c7ac:	andeq	ip, r1, ip, ror r9
   1c7b0:	andeq	ip, r1, ip, ror r9
   1c7b4:	andeq	ip, r1, ip, ror r9
   1c7b8:	andeq	ip, r1, r0, lsl r9
   1c7bc:	andeq	ip, r1, ip, ror r9
   1c7c0:	andeq	ip, r1, ip, ror r9
   1c7c4:	andeq	ip, r1, ip, ror r9
   1c7c8:	andeq	ip, r1, ip, ror r9
   1c7cc:	andeq	ip, r1, r4, asr #18
   1c7d0:	andeq	ip, r1, r0, ror #18
   1c7d4:	andeq	ip, r1, ip, ror r9
   1c7d8:	andeq	ip, r1, ip, ror r9
   1c7dc:	andeq	ip, r1, ip, ror r9
   1c7e0:	andeq	ip, r1, ip, ror r9
   1c7e4:	andeq	ip, r1, ip, ror r9
   1c7e8:	andeq	ip, r1, ip, ror r9
   1c7ec:	andeq	ip, r1, ip, ror r9
   1c7f0:	andeq	ip, r1, r8, asr #16
   1c7f4:	andeq	ip, r1, r8, ror r8
   1c7f8:	andeq	ip, r1, ip, ror r9
   1c7fc:	andeq	ip, r1, ip, ror r9
   1c800:	andeq	ip, r1, ip, ror r9
   1c804:	andeq	ip, r1, r0, lsr #17
   1c808:	andeq	ip, r1, ip, ror r9
   1c80c:	andeq	ip, r1, ip, ror r9
   1c810:	andeq	ip, r1, ip, ror r9
   1c814:			; <UNDEFINED> instruction: 0x0001c8bc
   1c818:	andeq	ip, r1, ip, ror r9
   1c81c:	ldrdeq	ip, [r1], -r8
   1c820:	andeq	ip, r1, ip, ror r9
   1c824:	andeq	ip, r1, ip, ror r9
   1c828:	andeq	ip, r1, ip, ror r9
   1c82c:	andeq	ip, r1, ip, ror r9
   1c830:	andeq	ip, r1, ip, ror r9
   1c834:	andeq	ip, r1, ip, ror r9
   1c838:	andeq	ip, r1, r0, lsl r9
   1c83c:	andeq	ip, r1, ip, ror r9
   1c840:	andeq	ip, r1, ip, ror r9
   1c844:	andeq	ip, r1, ip, lsr #18
   1c848:	sub	r3, fp, #44	; 0x2c
   1c84c:	mov	r1, #512	; 0x200
   1c850:	mov	r0, r3
   1c854:	bl	1c1fc <__assert_fail@plt+0xaf00>
   1c858:	str	r0, [fp, #-28]	; 0xffffffe4
   1c85c:	b	1c994 <__assert_fail@plt+0xb698>
   1c860:	sub	r3, fp, #44	; 0x2c
   1c864:	mov	r1, #1024	; 0x400
   1c868:	mov	r0, r3
   1c86c:	bl	1c1fc <__assert_fail@plt+0xaf00>
   1c870:	str	r0, [fp, #-28]	; 0xffffffe4
   1c874:	b	1c994 <__assert_fail@plt+0xb698>
   1c878:	mov	r3, #0
   1c87c:	str	r3, [fp, #-28]	; 0xffffffe4
   1c880:	b	1c994 <__assert_fail@plt+0xb698>
   1c884:	sub	r3, fp, #44	; 0x2c
   1c888:	mov	r2, #6
   1c88c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c890:	mov	r0, r3
   1c894:	bl	1c360 <__assert_fail@plt+0xb064>
   1c898:	str	r0, [fp, #-28]	; 0xffffffe4
   1c89c:	b	1c994 <__assert_fail@plt+0xb698>
   1c8a0:	sub	r3, fp, #44	; 0x2c
   1c8a4:	mov	r2, #3
   1c8a8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c8ac:	mov	r0, r3
   1c8b0:	bl	1c360 <__assert_fail@plt+0xb064>
   1c8b4:	str	r0, [fp, #-28]	; 0xffffffe4
   1c8b8:	b	1c994 <__assert_fail@plt+0xb698>
   1c8bc:	sub	r3, fp, #44	; 0x2c
   1c8c0:	mov	r2, #1
   1c8c4:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c8c8:	mov	r0, r3
   1c8cc:	bl	1c360 <__assert_fail@plt+0xb064>
   1c8d0:	str	r0, [fp, #-28]	; 0xffffffe4
   1c8d4:	b	1c994 <__assert_fail@plt+0xb698>
   1c8d8:	sub	r3, fp, #44	; 0x2c
   1c8dc:	mov	r2, #2
   1c8e0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c8e4:	mov	r0, r3
   1c8e8:	bl	1c360 <__assert_fail@plt+0xb064>
   1c8ec:	str	r0, [fp, #-28]	; 0xffffffe4
   1c8f0:	b	1c994 <__assert_fail@plt+0xb698>
   1c8f4:	sub	r3, fp, #44	; 0x2c
   1c8f8:	mov	r2, #5
   1c8fc:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c900:	mov	r0, r3
   1c904:	bl	1c360 <__assert_fail@plt+0xb064>
   1c908:	str	r0, [fp, #-28]	; 0xffffffe4
   1c90c:	b	1c994 <__assert_fail@plt+0xb698>
   1c910:	sub	r3, fp, #44	; 0x2c
   1c914:	mov	r2, #4
   1c918:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c91c:	mov	r0, r3
   1c920:	bl	1c360 <__assert_fail@plt+0xb064>
   1c924:	str	r0, [fp, #-28]	; 0xffffffe4
   1c928:	b	1c994 <__assert_fail@plt+0xb698>
   1c92c:	sub	r3, fp, #44	; 0x2c
   1c930:	mov	r1, #2
   1c934:	mov	r0, r3
   1c938:	bl	1c1fc <__assert_fail@plt+0xaf00>
   1c93c:	str	r0, [fp, #-28]	; 0xffffffe4
   1c940:	b	1c994 <__assert_fail@plt+0xb698>
   1c944:	sub	r3, fp, #44	; 0x2c
   1c948:	mov	r2, #8
   1c94c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c950:	mov	r0, r3
   1c954:	bl	1c360 <__assert_fail@plt+0xb064>
   1c958:	str	r0, [fp, #-28]	; 0xffffffe4
   1c95c:	b	1c994 <__assert_fail@plt+0xb698>
   1c960:	sub	r3, fp, #44	; 0x2c
   1c964:	mov	r2, #7
   1c968:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c96c:	mov	r0, r3
   1c970:	bl	1c360 <__assert_fail@plt+0xb064>
   1c974:	str	r0, [fp, #-28]	; 0xffffffe4
   1c978:	b	1c994 <__assert_fail@plt+0xb698>
   1c97c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1c980:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1c984:	strd	r2, [r1]
   1c988:	ldr	r3, [fp, #-8]
   1c98c:	orr	r3, r3, #2
   1c990:	b	1c9ec <__assert_fail@plt+0xb6f0>
   1c994:	ldr	r2, [fp, #-8]
   1c998:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c99c:	orr	r3, r2, r3
   1c9a0:	str	r3, [fp, #-8]
   1c9a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c9a8:	ldr	r2, [r3]
   1c9ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c9b0:	add	r2, r2, r3
   1c9b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c9b8:	str	r2, [r3]
   1c9bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c9c0:	ldr	r3, [r3]
   1c9c4:	ldrb	r3, [r3]
   1c9c8:	cmp	r3, #0
   1c9cc:	beq	1c9dc <__assert_fail@plt+0xb6e0>
   1c9d0:	ldr	r3, [fp, #-8]
   1c9d4:	orr	r3, r3, #2
   1c9d8:	str	r3, [fp, #-8]
   1c9dc:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1c9e0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1c9e4:	strd	r2, [r1]
   1c9e8:	ldr	r3, [fp, #-8]
   1c9ec:	mov	r0, r3
   1c9f0:	sub	sp, fp, #4
   1c9f4:	pop	{fp, pc}
   1c9f8:	andeq	pc, r1, r4, lsl lr	; <UNPREDICTABLE>
   1c9fc:	ldrdeq	pc, [r1], -ip
   1ca00:	andeq	pc, r1, ip, ror #27
   1ca04:	push	{r4, r5, fp, lr}
   1ca08:	add	fp, sp, #12
   1ca0c:	sub	sp, sp, #16
   1ca10:	str	r0, [fp, #-24]	; 0xffffffe8
   1ca14:	str	r1, [fp, #-28]	; 0xffffffe4
   1ca18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ca1c:	cmp	r3, #0
   1ca20:	beq	1ca30 <__assert_fail@plt+0xb734>
   1ca24:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ca28:	cmp	r3, #0
   1ca2c:	bne	1ca40 <__assert_fail@plt+0xb744>
   1ca30:	mov	r3, #1
   1ca34:	str	r3, [fp, #-28]	; 0xffffffe4
   1ca38:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ca3c:	str	r3, [fp, #-24]	; 0xffffffe8
   1ca40:	mov	r1, #0
   1ca44:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ca48:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ca4c:	umull	r2, r3, r2, r3
   1ca50:	mov	r4, r3
   1ca54:	mov	r5, #0
   1ca58:	cmp	r4, #0
   1ca5c:	beq	1ca64 <__assert_fail@plt+0xb768>
   1ca60:	mov	r1, #1
   1ca64:	cmp	r2, #0
   1ca68:	bge	1ca70 <__assert_fail@plt+0xb774>
   1ca6c:	mov	r1, #1
   1ca70:	mov	r3, r2
   1ca74:	str	r3, [fp, #-20]	; 0xffffffec
   1ca78:	mov	r3, r1
   1ca7c:	and	r3, r3, #1
   1ca80:	uxtb	r3, r3
   1ca84:	cmp	r3, #0
   1ca88:	beq	1caa4 <__assert_fail@plt+0xb7a8>
   1ca8c:	bl	111c4 <__errno_location@plt>
   1ca90:	mov	r2, r0
   1ca94:	mov	r3, #12
   1ca98:	str	r3, [r2]
   1ca9c:	mov	r3, #0
   1caa0:	b	1cabc <__assert_fail@plt+0xb7c0>
   1caa4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1caa8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1caac:	bl	10fc0 <calloc@plt>
   1cab0:	mov	r3, r0
   1cab4:	str	r3, [fp, #-16]
   1cab8:	ldr	r3, [fp, #-16]
   1cabc:	mov	r0, r3
   1cac0:	sub	sp, fp, #12
   1cac4:	pop	{r4, r5, fp, pc}
   1cac8:	push	{r4, r5, fp, lr}
   1cacc:	add	fp, sp, #12
   1cad0:	sub	sp, sp, #16
   1cad4:	str	r0, [fp, #-24]	; 0xffffffe8
   1cad8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1cadc:	cmp	r3, #0
   1cae0:	bne	1caec <__assert_fail@plt+0xb7f0>
   1cae4:	mov	r3, #1
   1cae8:	str	r3, [fp, #-24]	; 0xffffffe8
   1caec:	mov	r1, #0
   1caf0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1caf4:	mov	r2, r3
   1caf8:	mov	r3, #0
   1cafc:	mov	r4, r3
   1cb00:	mov	r5, #0
   1cb04:	cmp	r4, #0
   1cb08:	beq	1cb10 <__assert_fail@plt+0xb814>
   1cb0c:	mov	r1, #1
   1cb10:	cmp	r2, #0
   1cb14:	bge	1cb1c <__assert_fail@plt+0xb820>
   1cb18:	mov	r1, #1
   1cb1c:	mov	r3, r2
   1cb20:	str	r3, [fp, #-20]	; 0xffffffec
   1cb24:	mov	r3, r1
   1cb28:	and	r3, r3, #1
   1cb2c:	uxtb	r3, r3
   1cb30:	cmp	r3, #0
   1cb34:	beq	1cb50 <__assert_fail@plt+0xb854>
   1cb38:	bl	111c4 <__errno_location@plt>
   1cb3c:	mov	r2, r0
   1cb40:	mov	r3, #12
   1cb44:	str	r3, [r2]
   1cb48:	mov	r3, #0
   1cb4c:	b	1cb64 <__assert_fail@plt+0xb868>
   1cb50:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1cb54:	bl	11128 <malloc@plt>
   1cb58:	mov	r3, r0
   1cb5c:	str	r3, [fp, #-16]
   1cb60:	ldr	r3, [fp, #-16]
   1cb64:	mov	r0, r3
   1cb68:	sub	sp, fp, #12
   1cb6c:	pop	{r4, r5, fp, pc}
   1cb70:	push	{r4, r5, fp, lr}
   1cb74:	add	fp, sp, #12
   1cb78:	sub	sp, sp, #16
   1cb7c:	str	r0, [fp, #-24]	; 0xffffffe8
   1cb80:	str	r1, [fp, #-28]	; 0xffffffe4
   1cb84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1cb88:	cmp	r3, #0
   1cb8c:	bne	1cba0 <__assert_fail@plt+0xb8a4>
   1cb90:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1cb94:	bl	1cac8 <__assert_fail@plt+0xb7cc>
   1cb98:	mov	r3, r0
   1cb9c:	b	1cc34 <__assert_fail@plt+0xb938>
   1cba0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1cba4:	cmp	r3, #0
   1cba8:	bne	1cbbc <__assert_fail@plt+0xb8c0>
   1cbac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1cbb0:	bl	13394 <__assert_fail@plt+0x2098>
   1cbb4:	mov	r3, #0
   1cbb8:	b	1cc34 <__assert_fail@plt+0xb938>
   1cbbc:	mov	r1, #0
   1cbc0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1cbc4:	mov	r2, r3
   1cbc8:	mov	r3, #0
   1cbcc:	mov	r4, r3
   1cbd0:	mov	r5, #0
   1cbd4:	cmp	r4, #0
   1cbd8:	beq	1cbe0 <__assert_fail@plt+0xb8e4>
   1cbdc:	mov	r1, #1
   1cbe0:	cmp	r2, #0
   1cbe4:	bge	1cbec <__assert_fail@plt+0xb8f0>
   1cbe8:	mov	r1, #1
   1cbec:	mov	r3, r2
   1cbf0:	str	r3, [fp, #-20]	; 0xffffffec
   1cbf4:	mov	r3, r1
   1cbf8:	and	r3, r3, #1
   1cbfc:	uxtb	r3, r3
   1cc00:	cmp	r3, #0
   1cc04:	beq	1cc20 <__assert_fail@plt+0xb924>
   1cc08:	bl	111c4 <__errno_location@plt>
   1cc0c:	mov	r2, r0
   1cc10:	mov	r3, #12
   1cc14:	str	r3, [r2]
   1cc18:	mov	r3, #0
   1cc1c:	b	1cc34 <__assert_fail@plt+0xb938>
   1cc20:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1cc24:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1cc28:	bl	11080 <realloc@plt>
   1cc2c:	str	r0, [fp, #-16]
   1cc30:	ldr	r3, [fp, #-16]
   1cc34:	mov	r0, r3
   1cc38:	sub	sp, fp, #12
   1cc3c:	pop	{r4, r5, fp, pc}
   1cc40:	push	{r4, r5, r6, r7, fp}
   1cc44:	add	fp, sp, #16
   1cc48:	sub	sp, sp, #20
   1cc4c:	strd	r0, [fp, #-28]	; 0xffffffe4
   1cc50:	str	r2, [fp, #-32]	; 0xffffffe0
   1cc54:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1cc58:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1cc5c:	sub	ip, r1, #32
   1cc60:	rsb	r0, r1, #32
   1cc64:	lsl	r7, r3, r1
   1cc68:	orr	r7, r7, r2, lsl ip
   1cc6c:	orr	r7, r7, r2, lsr r0
   1cc70:	lsl	r6, r2, r1
   1cc74:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1cc78:	rsb	r1, r1, #0
   1cc7c:	and	r1, r1, #63	; 0x3f
   1cc80:	rsb	ip, r1, #32
   1cc84:	sub	r0, r1, #32
   1cc88:	lsr	r4, r2, r1
   1cc8c:	orr	r4, r4, r3, lsl ip
   1cc90:	orr	r4, r4, r3, lsr r0
   1cc94:	lsr	r5, r3, r1
   1cc98:	orr	r4, r4, r6
   1cc9c:	orr	r5, r5, r7
   1cca0:	mov	r2, r4
   1cca4:	mov	r3, r5
   1cca8:	mov	r0, r2
   1ccac:	mov	r1, r3
   1ccb0:	sub	sp, fp, #16
   1ccb4:	pop	{r4, r5, r6, r7, fp}
   1ccb8:	bx	lr
   1ccbc:	push	{r4, r5, r6, r7, fp}
   1ccc0:	add	fp, sp, #16
   1ccc4:	sub	sp, sp, #20
   1ccc8:	strd	r0, [fp, #-28]	; 0xffffffe4
   1cccc:	str	r2, [fp, #-32]	; 0xffffffe0
   1ccd0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1ccd4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1ccd8:	rsb	ip, r1, #32
   1ccdc:	sub	r0, r1, #32
   1cce0:	lsr	r6, r2, r1
   1cce4:	orr	r6, r6, r3, lsl ip
   1cce8:	orr	r6, r6, r3, lsr r0
   1ccec:	lsr	r7, r3, r1
   1ccf0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1ccf4:	rsb	r1, r1, #0
   1ccf8:	and	r1, r1, #63	; 0x3f
   1ccfc:	sub	ip, r1, #32
   1cd00:	rsb	r0, r1, #32
   1cd04:	lsl	r5, r3, r1
   1cd08:	orr	r5, r5, r2, lsl ip
   1cd0c:	orr	r5, r5, r2, lsr r0
   1cd10:	lsl	r4, r2, r1
   1cd14:	orr	r4, r4, r6
   1cd18:	orr	r5, r5, r7
   1cd1c:	mov	r2, r4
   1cd20:	mov	r3, r5
   1cd24:	mov	r0, r2
   1cd28:	mov	r1, r3
   1cd2c:	sub	sp, fp, #16
   1cd30:	pop	{r4, r5, r6, r7, fp}
   1cd34:	bx	lr
   1cd38:	push	{fp}		; (str fp, [sp, #-4]!)
   1cd3c:	add	fp, sp, #0
   1cd40:	sub	sp, sp, #12
   1cd44:	str	r0, [fp, #-8]
   1cd48:	str	r1, [fp, #-12]
   1cd4c:	ldr	r2, [fp, #-8]
   1cd50:	ldr	r3, [fp, #-12]
   1cd54:	rsb	r3, r3, #32
   1cd58:	ror	r3, r2, r3
   1cd5c:	mov	r0, r3
   1cd60:	add	sp, fp, #0
   1cd64:	pop	{fp}		; (ldr fp, [sp], #4)
   1cd68:	bx	lr
   1cd6c:	push	{fp}		; (str fp, [sp, #-4]!)
   1cd70:	add	fp, sp, #0
   1cd74:	sub	sp, sp, #12
   1cd78:	str	r0, [fp, #-8]
   1cd7c:	str	r1, [fp, #-12]
   1cd80:	ldr	r2, [fp, #-8]
   1cd84:	ldr	r3, [fp, #-12]
   1cd88:	ror	r3, r2, r3
   1cd8c:	mov	r0, r3
   1cd90:	add	sp, fp, #0
   1cd94:	pop	{fp}		; (ldr fp, [sp], #4)
   1cd98:	bx	lr
   1cd9c:	push	{fp}		; (str fp, [sp, #-4]!)
   1cda0:	add	fp, sp, #0
   1cda4:	sub	sp, sp, #12
   1cda8:	str	r0, [fp, #-8]
   1cdac:	str	r1, [fp, #-12]
   1cdb0:	ldr	r2, [fp, #-8]
   1cdb4:	ldr	r3, [fp, #-12]
   1cdb8:	rsb	r3, r3, #32
   1cdbc:	ror	r3, r2, r3
   1cdc0:	mov	r0, r3
   1cdc4:	add	sp, fp, #0
   1cdc8:	pop	{fp}		; (ldr fp, [sp], #4)
   1cdcc:	bx	lr
   1cdd0:	push	{fp}		; (str fp, [sp, #-4]!)
   1cdd4:	add	fp, sp, #0
   1cdd8:	sub	sp, sp, #12
   1cddc:	str	r0, [fp, #-8]
   1cde0:	str	r1, [fp, #-12]
   1cde4:	ldr	r2, [fp, #-8]
   1cde8:	ldr	r3, [fp, #-12]
   1cdec:	ror	r3, r2, r3
   1cdf0:	mov	r0, r3
   1cdf4:	add	sp, fp, #0
   1cdf8:	pop	{fp}		; (ldr fp, [sp], #4)
   1cdfc:	bx	lr
   1ce00:	push	{fp}		; (str fp, [sp, #-4]!)
   1ce04:	add	fp, sp, #0
   1ce08:	sub	sp, sp, #12
   1ce0c:	mov	r3, r0
   1ce10:	str	r1, [fp, #-12]
   1ce14:	strh	r3, [fp, #-6]
   1ce18:	ldrh	r2, [fp, #-6]
   1ce1c:	ldr	r3, [fp, #-12]
   1ce20:	lsl	r3, r2, r3
   1ce24:	uxth	r2, r3
   1ce28:	ldrh	r1, [fp, #-6]
   1ce2c:	ldr	r3, [fp, #-12]
   1ce30:	rsb	r3, r3, #16
   1ce34:	lsr	r3, r1, r3
   1ce38:	uxth	r3, r3
   1ce3c:	orr	r3, r2, r3
   1ce40:	uxth	r3, r3
   1ce44:	mov	r0, r3
   1ce48:	add	sp, fp, #0
   1ce4c:	pop	{fp}		; (ldr fp, [sp], #4)
   1ce50:	bx	lr
   1ce54:	push	{fp}		; (str fp, [sp, #-4]!)
   1ce58:	add	fp, sp, #0
   1ce5c:	sub	sp, sp, #12
   1ce60:	mov	r3, r0
   1ce64:	str	r1, [fp, #-12]
   1ce68:	strh	r3, [fp, #-6]
   1ce6c:	ldrh	r2, [fp, #-6]
   1ce70:	ldr	r3, [fp, #-12]
   1ce74:	lsr	r3, r2, r3
   1ce78:	uxth	r2, r3
   1ce7c:	ldrh	r1, [fp, #-6]
   1ce80:	ldr	r3, [fp, #-12]
   1ce84:	rsb	r3, r3, #16
   1ce88:	lsl	r3, r1, r3
   1ce8c:	uxth	r3, r3
   1ce90:	orr	r3, r2, r3
   1ce94:	uxth	r3, r3
   1ce98:	mov	r0, r3
   1ce9c:	add	sp, fp, #0
   1cea0:	pop	{fp}		; (ldr fp, [sp], #4)
   1cea4:	bx	lr
   1cea8:	push	{fp}		; (str fp, [sp, #-4]!)
   1ceac:	add	fp, sp, #0
   1ceb0:	sub	sp, sp, #12
   1ceb4:	mov	r3, r0
   1ceb8:	str	r1, [fp, #-12]
   1cebc:	strb	r3, [fp, #-5]
   1cec0:	ldrb	r2, [fp, #-5]
   1cec4:	ldr	r3, [fp, #-12]
   1cec8:	lsl	r3, r2, r3
   1cecc:	uxtb	r2, r3
   1ced0:	ldrb	r1, [fp, #-5]
   1ced4:	ldr	r3, [fp, #-12]
   1ced8:	rsb	r3, r3, #8
   1cedc:	lsr	r3, r1, r3
   1cee0:	uxtb	r3, r3
   1cee4:	orr	r3, r2, r3
   1cee8:	uxtb	r3, r3
   1ceec:	mov	r0, r3
   1cef0:	add	sp, fp, #0
   1cef4:	pop	{fp}		; (ldr fp, [sp], #4)
   1cef8:	bx	lr
   1cefc:	push	{fp}		; (str fp, [sp, #-4]!)
   1cf00:	add	fp, sp, #0
   1cf04:	sub	sp, sp, #12
   1cf08:	mov	r3, r0
   1cf0c:	str	r1, [fp, #-12]
   1cf10:	strb	r3, [fp, #-5]
   1cf14:	ldrb	r2, [fp, #-5]
   1cf18:	ldr	r3, [fp, #-12]
   1cf1c:	lsr	r3, r2, r3
   1cf20:	uxtb	r2, r3
   1cf24:	ldrb	r1, [fp, #-5]
   1cf28:	ldr	r3, [fp, #-12]
   1cf2c:	rsb	r3, r3, #8
   1cf30:	lsl	r3, r1, r3
   1cf34:	uxtb	r3, r3
   1cf38:	orr	r3, r2, r3
   1cf3c:	uxtb	r3, r3
   1cf40:	mov	r0, r3
   1cf44:	add	sp, fp, #0
   1cf48:	pop	{fp}		; (ldr fp, [sp], #4)
   1cf4c:	bx	lr
   1cf50:	push	{r4, r5, fp, lr}
   1cf54:	add	fp, sp, #12
   1cf58:	sub	sp, sp, #16
   1cf5c:	str	r0, [fp, #-24]	; 0xffffffe8
   1cf60:	str	r1, [fp, #-28]	; 0xffffffe4
   1cf64:	ldr	r5, [fp, #-24]	; 0xffffffe8
   1cf68:	ldr	r4, [fp, #-28]	; 0xffffffe4
   1cf6c:	cmp	r5, r4
   1cf70:	bne	1cf7c <__assert_fail@plt+0xbc80>
   1cf74:	mov	r3, #0
   1cf78:	b	1cfdc <__assert_fail@plt+0xbce0>
   1cf7c:	ldrb	r3, [r5]
   1cf80:	mov	r0, r3
   1cf84:	bl	1e080 <__assert_fail@plt+0xcd84>
   1cf88:	mov	r3, r0
   1cf8c:	strb	r3, [fp, #-13]
   1cf90:	ldrb	r3, [r4]
   1cf94:	mov	r0, r3
   1cf98:	bl	1e080 <__assert_fail@plt+0xcd84>
   1cf9c:	mov	r3, r0
   1cfa0:	strb	r3, [fp, #-14]
   1cfa4:	ldrb	r3, [fp, #-13]
   1cfa8:	cmp	r3, #0
   1cfac:	beq	1cfcc <__assert_fail@plt+0xbcd0>
   1cfb0:	add	r5, r5, #1
   1cfb4:	add	r4, r4, #1
   1cfb8:	ldrb	r2, [fp, #-13]
   1cfbc:	ldrb	r3, [fp, #-14]
   1cfc0:	cmp	r2, r3
   1cfc4:	beq	1cf7c <__assert_fail@plt+0xbc80>
   1cfc8:	b	1cfd0 <__assert_fail@plt+0xbcd4>
   1cfcc:	nop			; (mov r0, r0)
   1cfd0:	ldrb	r2, [fp, #-13]
   1cfd4:	ldrb	r3, [fp, #-14]
   1cfd8:	sub	r3, r2, r3
   1cfdc:	mov	r0, r3
   1cfe0:	sub	sp, fp, #12
   1cfe4:	pop	{r4, r5, fp, pc}
   1cfe8:	push	{fp, lr}
   1cfec:	add	fp, sp, #4
   1cff0:	sub	sp, sp, #16
   1cff4:	str	r0, [fp, #-16]
   1cff8:	ldr	r0, [fp, #-16]
   1cffc:	bl	110ec <__fpending@plt>
   1d000:	mov	r3, r0
   1d004:	cmp	r3, #0
   1d008:	movne	r3, #1
   1d00c:	moveq	r3, #0
   1d010:	strb	r3, [fp, #-5]
   1d014:	ldr	r0, [fp, #-16]
   1d018:	bl	110f8 <ferror_unlocked@plt>
   1d01c:	mov	r3, r0
   1d020:	cmp	r3, #0
   1d024:	movne	r3, #1
   1d028:	moveq	r3, #0
   1d02c:	strb	r3, [fp, #-6]
   1d030:	ldr	r0, [fp, #-16]
   1d034:	bl	1d268 <__assert_fail@plt+0xbf6c>
   1d038:	mov	r3, r0
   1d03c:	cmp	r3, #0
   1d040:	movne	r3, #1
   1d044:	moveq	r3, #0
   1d048:	strb	r3, [fp, #-7]
   1d04c:	ldrb	r3, [fp, #-6]
   1d050:	cmp	r3, #0
   1d054:	bne	1d084 <__assert_fail@plt+0xbd88>
   1d058:	ldrb	r3, [fp, #-7]
   1d05c:	cmp	r3, #0
   1d060:	beq	1d0b0 <__assert_fail@plt+0xbdb4>
   1d064:	ldrb	r3, [fp, #-5]
   1d068:	cmp	r3, #0
   1d06c:	bne	1d084 <__assert_fail@plt+0xbd88>
   1d070:	bl	111c4 <__errno_location@plt>
   1d074:	mov	r3, r0
   1d078:	ldr	r3, [r3]
   1d07c:	cmp	r3, #9
   1d080:	beq	1d0b0 <__assert_fail@plt+0xbdb4>
   1d084:	ldrb	r3, [fp, #-7]
   1d088:	eor	r3, r3, #1
   1d08c:	uxtb	r3, r3
   1d090:	cmp	r3, #0
   1d094:	beq	1d0a8 <__assert_fail@plt+0xbdac>
   1d098:	bl	111c4 <__errno_location@plt>
   1d09c:	mov	r2, r0
   1d0a0:	mov	r3, #0
   1d0a4:	str	r3, [r2]
   1d0a8:	mvn	r3, #0
   1d0ac:	b	1d0b4 <__assert_fail@plt+0xbdb8>
   1d0b0:	mov	r3, #0
   1d0b4:	mov	r0, r3
   1d0b8:	sub	sp, fp, #4
   1d0bc:	pop	{fp, pc}
   1d0c0:	push	{fp}		; (str fp, [sp, #-4]!)
   1d0c4:	add	fp, sp, #0
   1d0c8:	sub	sp, sp, #12
   1d0cc:	strd	r0, [fp, #-12]
   1d0d0:	ldrd	r2, [fp, #-12]
   1d0d4:	subs	r0, r2, #1
   1d0d8:	sbc	r1, r3, #0
   1d0dc:	ldrd	r2, [fp, #-12]
   1d0e0:	and	r2, r2, r0
   1d0e4:	and	r3, r3, r1
   1d0e8:	orr	r3, r2, r3
   1d0ec:	cmp	r3, #0
   1d0f0:	moveq	r3, #1
   1d0f4:	movne	r3, #0
   1d0f8:	uxtb	r3, r3
   1d0fc:	mov	r0, r3
   1d100:	add	sp, fp, #0
   1d104:	pop	{fp}		; (ldr fp, [sp], #4)
   1d108:	bx	lr
   1d10c:	push	{fp}		; (str fp, [sp, #-4]!)
   1d110:	add	fp, sp, #0
   1d114:	sub	sp, sp, #12
   1d118:	str	r0, [fp, #-8]
   1d11c:	ldr	r1, [fp, #-8]
   1d120:	mov	r2, #0
   1d124:	mov	r3, #0
   1d128:	strd	r2, [r1, #16]
   1d12c:	ldr	r3, [fp, #-8]
   1d130:	ldr	r2, [pc, #16]	; 1d148 <__assert_fail@plt+0xbe4c>
   1d134:	str	r2, [r3, #24]
   1d138:	nop			; (mov r0, r0)
   1d13c:	add	sp, fp, #0
   1d140:	pop	{fp}		; (ldr fp, [sp], #4)
   1d144:	bx	lr
   1d148:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1d14c:	push	{fp, lr}
   1d150:	add	fp, sp, #4
   1d154:	sub	sp, sp, #8
   1d158:	str	r0, [fp, #-8]
   1d15c:	str	r1, [fp, #-12]
   1d160:	ldr	r3, [fp, #-8]
   1d164:	ldr	r3, [r3, #24]
   1d168:	ldr	r2, [pc, #232]	; 1d258 <__assert_fail@plt+0xbf5c>
   1d16c:	cmp	r3, r2
   1d170:	beq	1d188 <__assert_fail@plt+0xbe8c>
   1d174:	ldr	r3, [pc, #224]	; 1d25c <__assert_fail@plt+0xbf60>
   1d178:	mov	r2, #60	; 0x3c
   1d17c:	ldr	r1, [pc, #220]	; 1d260 <__assert_fail@plt+0xbf64>
   1d180:	ldr	r0, [pc, #220]	; 1d264 <__assert_fail@plt+0xbf68>
   1d184:	bl	112fc <__assert_fail@plt>
   1d188:	ldr	r3, [fp, #-8]
   1d18c:	ldrd	r2, [r3, #16]
   1d190:	orrs	r3, r2, r3
   1d194:	beq	1d1d8 <__assert_fail@plt+0xbedc>
   1d198:	ldr	r3, [fp, #-12]
   1d19c:	ldrd	r0, [r3, #96]	; 0x60
   1d1a0:	ldr	r3, [fp, #-8]
   1d1a4:	ldrd	r2, [r3]
   1d1a8:	cmp	r1, r3
   1d1ac:	cmpeq	r0, r2
   1d1b0:	bne	1d1d8 <__assert_fail@plt+0xbedc>
   1d1b4:	ldr	r3, [fp, #-12]
   1d1b8:	ldrd	r0, [r3]
   1d1bc:	ldr	r3, [fp, #-8]
   1d1c0:	ldrd	r2, [r3, #8]
   1d1c4:	cmp	r1, r3
   1d1c8:	cmpeq	r0, r2
   1d1cc:	bne	1d1d8 <__assert_fail@plt+0xbedc>
   1d1d0:	mov	r3, #1
   1d1d4:	b	1d24c <__assert_fail@plt+0xbf50>
   1d1d8:	ldr	r3, [fp, #-8]
   1d1dc:	ldrd	r2, [r3, #16]
   1d1e0:	adds	r2, r2, #1
   1d1e4:	adc	r3, r3, #0
   1d1e8:	ldr	r1, [fp, #-8]
   1d1ec:	strd	r2, [r1, #16]
   1d1f0:	ldr	r3, [fp, #-8]
   1d1f4:	ldrd	r2, [r3, #16]
   1d1f8:	mov	r0, r2
   1d1fc:	mov	r1, r3
   1d200:	bl	1d0c0 <__assert_fail@plt+0xbdc4>
   1d204:	mov	r3, r0
   1d208:	cmp	r3, #0
   1d20c:	beq	1d248 <__assert_fail@plt+0xbf4c>
   1d210:	ldr	r3, [fp, #-8]
   1d214:	ldrd	r2, [r3, #16]
   1d218:	orrs	r3, r2, r3
   1d21c:	bne	1d228 <__assert_fail@plt+0xbf2c>
   1d220:	mov	r3, #1
   1d224:	b	1d24c <__assert_fail@plt+0xbf50>
   1d228:	ldr	r3, [fp, #-12]
   1d22c:	ldrd	r2, [r3]
   1d230:	ldr	r1, [fp, #-8]
   1d234:	strd	r2, [r1, #8]
   1d238:	ldr	r3, [fp, #-12]
   1d23c:	ldrd	r2, [r3, #96]	; 0x60
   1d240:	ldr	r1, [fp, #-8]
   1d244:	strd	r2, [r1]
   1d248:	mov	r3, #0
   1d24c:	mov	r0, r3
   1d250:	sub	sp, fp, #4
   1d254:	pop	{fp, pc}
   1d258:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1d25c:	andeq	pc, r1, ip, asr #28
   1d260:	andeq	pc, r1, r0, lsr #28
   1d264:	andeq	pc, r1, r4, lsr lr	; <UNPREDICTABLE>
   1d268:	push	{fp, lr}
   1d26c:	add	fp, sp, #4
   1d270:	sub	sp, sp, #32
   1d274:	str	r0, [fp, #-24]	; 0xffffffe8
   1d278:	mov	r3, #0
   1d27c:	str	r3, [fp, #-8]
   1d280:	mov	r3, #0
   1d284:	str	r3, [fp, #-12]
   1d288:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d28c:	bl	111e8 <fileno@plt>
   1d290:	str	r0, [fp, #-16]
   1d294:	ldr	r3, [fp, #-16]
   1d298:	cmp	r3, #0
   1d29c:	bge	1d2b0 <__assert_fail@plt+0xbfb4>
   1d2a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d2a4:	bl	11200 <fclose@plt>
   1d2a8:	mov	r3, r0
   1d2ac:	b	1d354 <__assert_fail@plt+0xc058>
   1d2b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d2b4:	bl	11140 <__freading@plt>
   1d2b8:	mov	r3, r0
   1d2bc:	cmp	r3, #0
   1d2c0:	beq	1d2fc <__assert_fail@plt+0xc000>
   1d2c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d2c8:	bl	111e8 <fileno@plt>
   1d2cc:	mov	r1, r0
   1d2d0:	mov	r3, #1
   1d2d4:	str	r3, [sp]
   1d2d8:	mov	r2, #0
   1d2dc:	mov	r3, #0
   1d2e0:	mov	r0, r1
   1d2e4:	bl	110c8 <lseek64@plt>
   1d2e8:	mvn	r2, #0
   1d2ec:	mvn	r3, #0
   1d2f0:	cmp	r1, r3
   1d2f4:	cmpeq	r0, r2
   1d2f8:	beq	1d320 <__assert_fail@plt+0xc024>
   1d2fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d300:	bl	1d7a4 <__assert_fail@plt+0xc4a8>
   1d304:	mov	r3, r0
   1d308:	cmp	r3, #0
   1d30c:	beq	1d320 <__assert_fail@plt+0xc024>
   1d310:	bl	111c4 <__errno_location@plt>
   1d314:	mov	r3, r0
   1d318:	ldr	r3, [r3]
   1d31c:	str	r3, [fp, #-8]
   1d320:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d324:	bl	11200 <fclose@plt>
   1d328:	str	r0, [fp, #-12]
   1d32c:	ldr	r3, [fp, #-8]
   1d330:	cmp	r3, #0
   1d334:	beq	1d350 <__assert_fail@plt+0xc054>
   1d338:	bl	111c4 <__errno_location@plt>
   1d33c:	mov	r2, r0
   1d340:	ldr	r3, [fp, #-8]
   1d344:	str	r3, [r2]
   1d348:	mvn	r3, #0
   1d34c:	str	r3, [fp, #-12]
   1d350:	ldr	r3, [fp, #-12]
   1d354:	mov	r0, r3
   1d358:	sub	sp, fp, #4
   1d35c:	pop	{fp, pc}
   1d360:	push	{r1, r2, r3}
   1d364:	push	{fp, lr}
   1d368:	add	fp, sp, #4
   1d36c:	sub	sp, sp, #36	; 0x24
   1d370:	str	r0, [fp, #-36]	; 0xffffffdc
   1d374:	mvn	r3, #0
   1d378:	str	r3, [fp, #-12]
   1d37c:	add	r3, fp, #8
   1d380:	str	r3, [fp, #-32]	; 0xffffffe0
   1d384:	ldr	r3, [fp, #4]
   1d388:	cmp	r3, #0
   1d38c:	beq	1d3a0 <__assert_fail@plt+0xc0a4>
   1d390:	ldr	r2, [pc, #432]	; 1d548 <__assert_fail@plt+0xc24c>
   1d394:	cmp	r3, r2
   1d398:	beq	1d3c8 <__assert_fail@plt+0xc0cc>
   1d39c:	b	1d3f0 <__assert_fail@plt+0xc0f4>
   1d3a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d3a4:	add	r2, r3, #4
   1d3a8:	str	r2, [fp, #-32]	; 0xffffffe0
   1d3ac:	ldr	r3, [r3]
   1d3b0:	str	r3, [fp, #-16]
   1d3b4:	ldr	r1, [fp, #-16]
   1d3b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d3bc:	bl	1d560 <__assert_fail@plt+0xc264>
   1d3c0:	str	r0, [fp, #-12]
   1d3c4:	b	1d530 <__assert_fail@plt+0xc234>
   1d3c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d3cc:	add	r2, r3, #4
   1d3d0:	str	r2, [fp, #-32]	; 0xffffffe0
   1d3d4:	ldr	r3, [r3]
   1d3d8:	str	r3, [fp, #-20]	; 0xffffffec
   1d3dc:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d3e0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d3e4:	bl	1d598 <__assert_fail@plt+0xc29c>
   1d3e8:	str	r0, [fp, #-12]
   1d3ec:	b	1d530 <__assert_fail@plt+0xc234>
   1d3f0:	ldr	r3, [fp, #4]
   1d3f4:	cmp	r3, #11
   1d3f8:	beq	1d4c0 <__assert_fail@plt+0xc1c4>
   1d3fc:	cmp	r3, #11
   1d400:	bgt	1d460 <__assert_fail@plt+0xc164>
   1d404:	cmp	r3, #3
   1d408:	beq	1d4c0 <__assert_fail@plt+0xc1c4>
   1d40c:	cmp	r3, #3
   1d410:	bgt	1d430 <__assert_fail@plt+0xc134>
   1d414:	cmp	r3, #1
   1d418:	beq	1d4c0 <__assert_fail@plt+0xc1c4>
   1d41c:	cmp	r3, #1
   1d420:	bgt	1d4d4 <__assert_fail@plt+0xc1d8>
   1d424:	cmp	r3, #0
   1d428:	beq	1d4d4 <__assert_fail@plt+0xc1d8>
   1d42c:	b	1d500 <__assert_fail@plt+0xc204>
   1d430:	cmp	r3, #8
   1d434:	beq	1d4d4 <__assert_fail@plt+0xc1d8>
   1d438:	cmp	r3, #8
   1d43c:	bgt	1d44c <__assert_fail@plt+0xc150>
   1d440:	cmp	r3, #4
   1d444:	beq	1d4d4 <__assert_fail@plt+0xc1d8>
   1d448:	b	1d500 <__assert_fail@plt+0xc204>
   1d44c:	cmp	r3, #9
   1d450:	beq	1d4c0 <__assert_fail@plt+0xc1c4>
   1d454:	cmp	r3, #10
   1d458:	beq	1d4d4 <__assert_fail@plt+0xc1d8>
   1d45c:	b	1d500 <__assert_fail@plt+0xc204>
   1d460:	ldr	r2, [pc, #228]	; 1d54c <__assert_fail@plt+0xc250>
   1d464:	cmp	r3, r2
   1d468:	bgt	1d49c <__assert_fail@plt+0xc1a0>
   1d46c:	ldr	r2, [pc, #212]	; 1d548 <__assert_fail@plt+0xc24c>
   1d470:	cmp	r3, r2
   1d474:	bge	1d4d4 <__assert_fail@plt+0xc1d8>
   1d478:	ldr	r2, [pc, #208]	; 1d550 <__assert_fail@plt+0xc254>
   1d47c:	cmp	r3, r2
   1d480:	beq	1d4c0 <__assert_fail@plt+0xc1c4>
   1d484:	ldr	r2, [pc, #200]	; 1d554 <__assert_fail@plt+0xc258>
   1d488:	cmp	r3, r2
   1d48c:	beq	1d4d4 <__assert_fail@plt+0xc1d8>
   1d490:	cmp	r3, #1024	; 0x400
   1d494:	beq	1d4d4 <__assert_fail@plt+0xc1d8>
   1d498:	b	1d500 <__assert_fail@plt+0xc204>
   1d49c:	ldr	r2, [pc, #180]	; 1d558 <__assert_fail@plt+0xc25c>
   1d4a0:	cmp	r3, r2
   1d4a4:	beq	1d4d4 <__assert_fail@plt+0xc1d8>
   1d4a8:	ldr	r2, [pc, #168]	; 1d558 <__assert_fail@plt+0xc25c>
   1d4ac:	cmp	r3, r2
   1d4b0:	blt	1d4c0 <__assert_fail@plt+0xc1c4>
   1d4b4:	ldr	r2, [pc, #160]	; 1d55c <__assert_fail@plt+0xc260>
   1d4b8:	cmp	r3, r2
   1d4bc:	bne	1d500 <__assert_fail@plt+0xc204>
   1d4c0:	ldr	r1, [fp, #4]
   1d4c4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d4c8:	bl	11218 <fcntl64@plt>
   1d4cc:	str	r0, [fp, #-12]
   1d4d0:	b	1d52c <__assert_fail@plt+0xc230>
   1d4d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d4d8:	add	r2, r3, #4
   1d4dc:	str	r2, [fp, #-32]	; 0xffffffe0
   1d4e0:	ldr	r3, [r3]
   1d4e4:	str	r3, [fp, #-24]	; 0xffffffe8
   1d4e8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d4ec:	ldr	r1, [fp, #4]
   1d4f0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d4f4:	bl	11218 <fcntl64@plt>
   1d4f8:	str	r0, [fp, #-12]
   1d4fc:	b	1d52c <__assert_fail@plt+0xc230>
   1d500:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d504:	add	r2, r3, #4
   1d508:	str	r2, [fp, #-32]	; 0xffffffe0
   1d50c:	ldr	r3, [r3]
   1d510:	str	r3, [fp, #-28]	; 0xffffffe4
   1d514:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1d518:	ldr	r1, [fp, #4]
   1d51c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d520:	bl	11218 <fcntl64@plt>
   1d524:	str	r0, [fp, #-12]
   1d528:	nop			; (mov r0, r0)
   1d52c:	nop			; (mov r0, r0)
   1d530:	ldr	r3, [fp, #-12]
   1d534:	mov	r0, r3
   1d538:	sub	sp, fp, #4
   1d53c:	pop	{fp, lr}
   1d540:	add	sp, sp, #12
   1d544:	bx	lr
   1d548:	andeq	r0, r0, r6, lsl #8
   1d54c:	andeq	r0, r0, r7, lsl #8
   1d550:	andeq	r0, r0, r1, lsl #8
   1d554:	andeq	r0, r0, r2, lsl #8
   1d558:	andeq	r0, r0, r9, lsl #8
   1d55c:	andeq	r0, r0, sl, lsl #8
   1d560:	push	{fp, lr}
   1d564:	add	fp, sp, #4
   1d568:	sub	sp, sp, #16
   1d56c:	str	r0, [fp, #-16]
   1d570:	str	r1, [fp, #-20]	; 0xffffffec
   1d574:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d578:	mov	r1, #0
   1d57c:	ldr	r0, [fp, #-16]
   1d580:	bl	11218 <fcntl64@plt>
   1d584:	str	r0, [fp, #-8]
   1d588:	ldr	r3, [fp, #-8]
   1d58c:	mov	r0, r3
   1d590:	sub	sp, fp, #4
   1d594:	pop	{fp, pc}
   1d598:	push	{fp, lr}
   1d59c:	add	fp, sp, #4
   1d5a0:	sub	sp, sp, #24
   1d5a4:	str	r0, [fp, #-24]	; 0xffffffe8
   1d5a8:	str	r1, [fp, #-28]	; 0xffffffe4
   1d5ac:	ldr	r3, [pc, #292]	; 1d6d8 <__assert_fail@plt+0xc3dc>
   1d5b0:	ldr	r3, [r3]
   1d5b4:	cmp	r3, #0
   1d5b8:	blt	1d62c <__assert_fail@plt+0xc330>
   1d5bc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1d5c0:	ldr	r1, [pc, #276]	; 1d6dc <__assert_fail@plt+0xc3e0>
   1d5c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d5c8:	bl	11218 <fcntl64@plt>
   1d5cc:	str	r0, [fp, #-8]
   1d5d0:	ldr	r3, [fp, #-8]
   1d5d4:	cmp	r3, #0
   1d5d8:	bge	1d5f0 <__assert_fail@plt+0xc2f4>
   1d5dc:	bl	111c4 <__errno_location@plt>
   1d5e0:	mov	r3, r0
   1d5e4:	ldr	r3, [r3]
   1d5e8:	cmp	r3, #22
   1d5ec:	beq	1d600 <__assert_fail@plt+0xc304>
   1d5f0:	ldr	r3, [pc, #224]	; 1d6d8 <__assert_fail@plt+0xc3dc>
   1d5f4:	mov	r2, #1
   1d5f8:	str	r2, [r3]
   1d5fc:	b	1d63c <__assert_fail@plt+0xc340>
   1d600:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1d604:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d608:	bl	1d560 <__assert_fail@plt+0xc264>
   1d60c:	str	r0, [fp, #-8]
   1d610:	ldr	r3, [fp, #-8]
   1d614:	cmp	r3, #0
   1d618:	blt	1d63c <__assert_fail@plt+0xc340>
   1d61c:	ldr	r3, [pc, #180]	; 1d6d8 <__assert_fail@plt+0xc3dc>
   1d620:	mvn	r2, #0
   1d624:	str	r2, [r3]
   1d628:	b	1d63c <__assert_fail@plt+0xc340>
   1d62c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1d630:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d634:	bl	1d560 <__assert_fail@plt+0xc264>
   1d638:	str	r0, [fp, #-8]
   1d63c:	ldr	r3, [fp, #-8]
   1d640:	cmp	r3, #0
   1d644:	blt	1d6c8 <__assert_fail@plt+0xc3cc>
   1d648:	ldr	r3, [pc, #136]	; 1d6d8 <__assert_fail@plt+0xc3dc>
   1d64c:	ldr	r3, [r3]
   1d650:	cmn	r3, #1
   1d654:	bne	1d6c8 <__assert_fail@plt+0xc3cc>
   1d658:	mov	r1, #1
   1d65c:	ldr	r0, [fp, #-8]
   1d660:	bl	11218 <fcntl64@plt>
   1d664:	str	r0, [fp, #-12]
   1d668:	ldr	r3, [fp, #-12]
   1d66c:	cmp	r3, #0
   1d670:	blt	1d698 <__assert_fail@plt+0xc39c>
   1d674:	ldr	r3, [fp, #-12]
   1d678:	orr	r3, r3, #1
   1d67c:	mov	r2, r3
   1d680:	mov	r1, #2
   1d684:	ldr	r0, [fp, #-8]
   1d688:	bl	11218 <fcntl64@plt>
   1d68c:	mov	r3, r0
   1d690:	cmn	r3, #1
   1d694:	bne	1d6c8 <__assert_fail@plt+0xc3cc>
   1d698:	bl	111c4 <__errno_location@plt>
   1d69c:	mov	r3, r0
   1d6a0:	ldr	r3, [r3]
   1d6a4:	str	r3, [fp, #-16]
   1d6a8:	ldr	r0, [fp, #-8]
   1d6ac:	bl	112c0 <close@plt>
   1d6b0:	bl	111c4 <__errno_location@plt>
   1d6b4:	mov	r2, r0
   1d6b8:	ldr	r3, [fp, #-16]
   1d6bc:	str	r3, [r2]
   1d6c0:	mvn	r3, #0
   1d6c4:	str	r3, [fp, #-8]
   1d6c8:	ldr	r3, [fp, #-8]
   1d6cc:	mov	r0, r3
   1d6d0:	sub	sp, fp, #4
   1d6d4:	pop	{fp, pc}
   1d6d8:	strdeq	r0, [r3], -r4
   1d6dc:	andeq	r0, r0, r6, lsl #8
   1d6e0:	push	{r1, r2, r3}
   1d6e4:	push	{fp, lr}
   1d6e8:	add	fp, sp, #4
   1d6ec:	sub	sp, sp, #20
   1d6f0:	str	r0, [fp, #-20]	; 0xffffffec
   1d6f4:	mov	r3, #0
   1d6f8:	str	r3, [fp, #-12]
   1d6fc:	ldr	r3, [fp, #4]
   1d700:	and	r3, r3, #64	; 0x40
   1d704:	cmp	r3, #0
   1d708:	beq	1d728 <__assert_fail@plt+0xc42c>
   1d70c:	add	r3, fp, #8
   1d710:	str	r3, [fp, #-16]
   1d714:	ldr	r3, [fp, #-16]
   1d718:	add	r2, r3, #4
   1d71c:	str	r2, [fp, #-16]
   1d720:	ldr	r3, [r3]
   1d724:	str	r3, [fp, #-12]
   1d728:	ldr	r2, [fp, #-12]
   1d72c:	ldr	r1, [fp, #4]
   1d730:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d734:	bl	1111c <open64@plt>
   1d738:	mov	r3, r0
   1d73c:	mov	r0, r3
   1d740:	bl	1ad24 <__assert_fail@plt+0x9a28>
   1d744:	mov	r3, r0
   1d748:	mov	r0, r3
   1d74c:	sub	sp, fp, #4
   1d750:	pop	{fp, lr}
   1d754:	add	sp, sp, #12
   1d758:	bx	lr
   1d75c:	push	{fp, lr}
   1d760:	add	fp, sp, #4
   1d764:	sub	sp, sp, #16
   1d768:	str	r0, [fp, #-8]
   1d76c:	ldr	r3, [fp, #-8]
   1d770:	ldr	r3, [r3]
   1d774:	and	r3, r3, #256	; 0x100
   1d778:	cmp	r3, #0
   1d77c:	beq	1d798 <__assert_fail@plt+0xc49c>
   1d780:	mov	r3, #1
   1d784:	str	r3, [sp]
   1d788:	mov	r2, #0
   1d78c:	mov	r3, #0
   1d790:	ldr	r0, [fp, #-8]
   1d794:	bl	1d804 <__assert_fail@plt+0xc508>
   1d798:	nop			; (mov r0, r0)
   1d79c:	sub	sp, fp, #4
   1d7a0:	pop	{fp, pc}
   1d7a4:	push	{fp, lr}
   1d7a8:	add	fp, sp, #4
   1d7ac:	sub	sp, sp, #8
   1d7b0:	str	r0, [fp, #-8]
   1d7b4:	ldr	r3, [fp, #-8]
   1d7b8:	cmp	r3, #0
   1d7bc:	beq	1d7d4 <__assert_fail@plt+0xc4d8>
   1d7c0:	ldr	r0, [fp, #-8]
   1d7c4:	bl	11140 <__freading@plt>
   1d7c8:	mov	r3, r0
   1d7cc:	cmp	r3, #0
   1d7d0:	bne	1d7e4 <__assert_fail@plt+0xc4e8>
   1d7d4:	ldr	r0, [fp, #-8]
   1d7d8:	bl	11014 <fflush@plt>
   1d7dc:	mov	r3, r0
   1d7e0:	b	1d7f8 <__assert_fail@plt+0xc4fc>
   1d7e4:	ldr	r0, [fp, #-8]
   1d7e8:	bl	1d75c <__assert_fail@plt+0xc460>
   1d7ec:	ldr	r0, [fp, #-8]
   1d7f0:	bl	11014 <fflush@plt>
   1d7f4:	mov	r3, r0
   1d7f8:	mov	r0, r3
   1d7fc:	sub	sp, fp, #4
   1d800:	pop	{fp, pc}
   1d804:	push	{fp, lr}
   1d808:	add	fp, sp, #4
   1d80c:	sub	sp, sp, #32
   1d810:	str	r0, [fp, #-16]
   1d814:	strd	r2, [fp, #-28]	; 0xffffffe4
   1d818:	ldr	r3, [fp, #-16]
   1d81c:	ldr	r2, [r3, #8]
   1d820:	ldr	r3, [fp, #-16]
   1d824:	ldr	r3, [r3, #4]
   1d828:	cmp	r2, r3
   1d82c:	bne	1d8c4 <__assert_fail@plt+0xc5c8>
   1d830:	ldr	r3, [fp, #-16]
   1d834:	ldr	r2, [r3, #20]
   1d838:	ldr	r3, [fp, #-16]
   1d83c:	ldr	r3, [r3, #16]
   1d840:	cmp	r2, r3
   1d844:	bne	1d8c4 <__assert_fail@plt+0xc5c8>
   1d848:	ldr	r3, [fp, #-16]
   1d84c:	ldr	r3, [r3, #36]	; 0x24
   1d850:	cmp	r3, #0
   1d854:	bne	1d8c4 <__assert_fail@plt+0xc5c8>
   1d858:	ldr	r0, [fp, #-16]
   1d85c:	bl	111e8 <fileno@plt>
   1d860:	mov	r1, r0
   1d864:	ldr	r3, [fp, #4]
   1d868:	str	r3, [sp]
   1d86c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1d870:	mov	r0, r1
   1d874:	bl	110c8 <lseek64@plt>
   1d878:	strd	r0, [fp, #-12]
   1d87c:	ldrd	r2, [fp, #-12]
   1d880:	mvn	r0, #0
   1d884:	mvn	r1, #0
   1d888:	cmp	r3, r1
   1d88c:	cmpeq	r2, r0
   1d890:	bne	1d89c <__assert_fail@plt+0xc5a0>
   1d894:	mvn	r3, #0
   1d898:	b	1d8dc <__assert_fail@plt+0xc5e0>
   1d89c:	ldr	r3, [fp, #-16]
   1d8a0:	ldr	r3, [r3]
   1d8a4:	bic	r2, r3, #16
   1d8a8:	ldr	r3, [fp, #-16]
   1d8ac:	str	r2, [r3]
   1d8b0:	ldr	r1, [fp, #-16]
   1d8b4:	ldrd	r2, [fp, #-12]
   1d8b8:	strd	r2, [r1, #80]	; 0x50
   1d8bc:	mov	r3, #0
   1d8c0:	b	1d8dc <__assert_fail@plt+0xc5e0>
   1d8c4:	ldr	r3, [fp, #4]
   1d8c8:	str	r3, [sp]
   1d8cc:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1d8d0:	ldr	r0, [fp, #-16]
   1d8d4:	bl	1120c <fseeko64@plt>
   1d8d8:	mov	r3, r0
   1d8dc:	mov	r0, r3
   1d8e0:	sub	sp, fp, #4
   1d8e4:	pop	{fp, pc}
   1d8e8:	push	{fp, lr}
   1d8ec:	add	fp, sp, #4
   1d8f0:	bl	111c4 <__errno_location@plt>
   1d8f4:	mov	r2, r0
   1d8f8:	mov	r3, #12
   1d8fc:	str	r3, [r2]
   1d900:	mov	r3, #0
   1d904:	mov	r0, r3
   1d908:	pop	{fp, pc}
   1d90c:	push	{fp, lr}
   1d910:	add	fp, sp, #4
   1d914:	sub	sp, sp, #8
   1d918:	str	r0, [fp, #-8]
   1d91c:	ldr	r3, [fp, #-8]
   1d920:	mov	r0, r3
   1d924:	bl	1cac8 <__assert_fail@plt+0xb7cc>
   1d928:	mov	r3, r0
   1d92c:	mov	r0, r3
   1d930:	sub	sp, fp, #4
   1d934:	pop	{fp, pc}
   1d938:	push	{fp, lr}
   1d93c:	add	fp, sp, #4
   1d940:	sub	sp, sp, #8
   1d944:	str	r0, [fp, #-8]
   1d948:	str	r1, [fp, #-12]
   1d94c:	ldr	r3, [fp, #-12]
   1d950:	cmp	r3, #0
   1d954:	moveq	r3, #1
   1d958:	movne	r3, #0
   1d95c:	uxtb	r3, r3
   1d960:	mov	r2, r3
   1d964:	ldr	r3, [fp, #-12]
   1d968:	orr	r3, r2, r3
   1d96c:	mov	r1, r3
   1d970:	ldr	r0, [fp, #-8]
   1d974:	bl	1cb70 <__assert_fail@plt+0xb874>
   1d978:	mov	r3, r0
   1d97c:	mov	r0, r3
   1d980:	sub	sp, fp, #4
   1d984:	pop	{fp, pc}
   1d988:	push	{fp, lr}
   1d98c:	add	fp, sp, #4
   1d990:	sub	sp, sp, #8
   1d994:	str	r0, [fp, #-8]
   1d998:	str	r1, [fp, #-12]
   1d99c:	ldr	r3, [fp, #-8]
   1d9a0:	ldr	r2, [fp, #-12]
   1d9a4:	mov	r1, r2
   1d9a8:	mov	r0, r3
   1d9ac:	bl	1ca04 <__assert_fail@plt+0xb708>
   1d9b0:	mov	r3, r0
   1d9b4:	mov	r0, r3
   1d9b8:	sub	sp, fp, #4
   1d9bc:	pop	{fp, pc}
   1d9c0:	push	{fp, lr}
   1d9c4:	add	fp, sp, #4
   1d9c8:	sub	sp, sp, #16
   1d9cc:	str	r0, [fp, #-8]
   1d9d0:	str	r1, [fp, #-12]
   1d9d4:	str	r2, [fp, #-16]
   1d9d8:	ldr	r3, [fp, #-12]
   1d9dc:	cmp	r3, #0
   1d9e0:	beq	1d9f0 <__assert_fail@plt+0xc6f4>
   1d9e4:	ldr	r3, [fp, #-16]
   1d9e8:	cmp	r3, #0
   1d9ec:	bne	1da00 <__assert_fail@plt+0xc704>
   1d9f0:	mov	r3, #1
   1d9f4:	str	r3, [fp, #-16]
   1d9f8:	ldr	r3, [fp, #-16]
   1d9fc:	str	r3, [fp, #-12]
   1da00:	ldr	r3, [fp, #-12]
   1da04:	ldr	r2, [fp, #-16]
   1da08:	mov	r1, r3
   1da0c:	ldr	r0, [fp, #-8]
   1da10:	bl	1db2c <__assert_fail@plt+0xc830>
   1da14:	mov	r3, r0
   1da18:	mov	r0, r3
   1da1c:	sub	sp, fp, #4
   1da20:	pop	{fp, pc}
   1da24:	push	{fp, lr}
   1da28:	add	fp, sp, #4
   1da2c:	sub	sp, sp, #8
   1da30:	mov	r0, #14
   1da34:	bl	1123c <nl_langinfo@plt>
   1da38:	str	r0, [fp, #-8]
   1da3c:	ldr	r3, [fp, #-8]
   1da40:	cmp	r3, #0
   1da44:	bne	1da50 <__assert_fail@plt+0xc754>
   1da48:	ldr	r3, [pc, #40]	; 1da78 <__assert_fail@plt+0xc77c>
   1da4c:	str	r3, [fp, #-8]
   1da50:	ldr	r3, [fp, #-8]
   1da54:	ldrb	r3, [r3]
   1da58:	cmp	r3, #0
   1da5c:	bne	1da68 <__assert_fail@plt+0xc76c>
   1da60:	ldr	r3, [pc, #20]	; 1da7c <__assert_fail@plt+0xc780>
   1da64:	str	r3, [fp, #-8]
   1da68:	ldr	r3, [fp, #-8]
   1da6c:	mov	r0, r3
   1da70:	sub	sp, fp, #4
   1da74:	pop	{fp, pc}
   1da78:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1da7c:	andeq	pc, r1, ip, asr lr	; <UNPREDICTABLE>
   1da80:	push	{fp, lr}
   1da84:	add	fp, sp, #4
   1da88:	sub	sp, sp, #32
   1da8c:	str	r0, [fp, #-24]	; 0xffffffe8
   1da90:	str	r1, [fp, #-28]	; 0xffffffe4
   1da94:	str	r2, [fp, #-32]	; 0xffffffe0
   1da98:	str	r3, [fp, #-36]	; 0xffffffdc
   1da9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1daa0:	cmp	r3, #0
   1daa4:	bne	1dab0 <__assert_fail@plt+0xc7b4>
   1daa8:	sub	r3, fp, #16
   1daac:	str	r3, [fp, #-24]	; 0xffffffe8
   1dab0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1dab4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1dab8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1dabc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1dac0:	bl	11104 <mbrtowc@plt>
   1dac4:	str	r0, [fp, #-8]
   1dac8:	ldr	r3, [fp, #-8]
   1dacc:	cmn	r3, #3
   1dad0:	bls	1db1c <__assert_fail@plt+0xc820>
   1dad4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1dad8:	cmp	r3, #0
   1dadc:	beq	1db1c <__assert_fail@plt+0xc820>
   1dae0:	mov	r0, #0
   1dae4:	bl	1e100 <__assert_fail@plt+0xce04>
   1dae8:	mov	r3, r0
   1daec:	eor	r3, r3, #1
   1daf0:	uxtb	r3, r3
   1daf4:	cmp	r3, #0
   1daf8:	beq	1db1c <__assert_fail@plt+0xc820>
   1dafc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1db00:	ldrb	r3, [r3]
   1db04:	strb	r3, [fp, #-9]
   1db08:	ldrb	r2, [fp, #-9]
   1db0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1db10:	str	r2, [r3]
   1db14:	mov	r3, #1
   1db18:	b	1db20 <__assert_fail@plt+0xc824>
   1db1c:	ldr	r3, [fp, #-8]
   1db20:	mov	r0, r3
   1db24:	sub	sp, fp, #4
   1db28:	pop	{fp, pc}
   1db2c:	push	{fp, lr}
   1db30:	add	fp, sp, #4
   1db34:	sub	sp, sp, #24
   1db38:	str	r0, [fp, #-16]
   1db3c:	str	r1, [fp, #-20]	; 0xffffffec
   1db40:	str	r2, [fp, #-24]	; 0xffffffe8
   1db44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1db48:	cmp	r3, #0
   1db4c:	beq	1db88 <__assert_fail@plt+0xc88c>
   1db50:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1db54:	mvn	r0, #0
   1db58:	bl	1e304 <__assert_fail@plt+0xd008>
   1db5c:	mov	r3, r0
   1db60:	mov	r2, r3
   1db64:	ldr	r3, [fp, #-20]	; 0xffffffec
   1db68:	cmp	r2, r3
   1db6c:	bcs	1db88 <__assert_fail@plt+0xc88c>
   1db70:	ldr	r3, [fp, #-20]	; 0xffffffec
   1db74:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1db78:	mul	r3, r2, r3
   1db7c:	str	r3, [fp, #-8]
   1db80:	mov	r3, #1
   1db84:	b	1db9c <__assert_fail@plt+0xc8a0>
   1db88:	ldr	r3, [fp, #-20]	; 0xffffffec
   1db8c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1db90:	mul	r3, r2, r3
   1db94:	str	r3, [fp, #-8]
   1db98:	mov	r3, #0
   1db9c:	cmp	r3, #0
   1dba0:	beq	1dbbc <__assert_fail@plt+0xc8c0>
   1dba4:	bl	111c4 <__errno_location@plt>
   1dba8:	mov	r2, r0
   1dbac:	mov	r3, #12
   1dbb0:	str	r3, [r2]
   1dbb4:	mov	r3, #0
   1dbb8:	b	1dbd0 <__assert_fail@plt+0xc8d4>
   1dbbc:	ldr	r3, [fp, #-8]
   1dbc0:	mov	r1, r3
   1dbc4:	ldr	r0, [fp, #-16]
   1dbc8:	bl	1cb70 <__assert_fail@plt+0xb874>
   1dbcc:	mov	r3, r0
   1dbd0:	mov	r0, r3
   1dbd4:	sub	sp, fp, #4
   1dbd8:	pop	{fp, pc}
   1dbdc:	push	{fp, lr}
   1dbe0:	add	fp, sp, #4
   1dbe4:	sub	sp, sp, #8
   1dbe8:	str	r0, [fp, #-8]
   1dbec:	mov	r2, #3
   1dbf0:	mov	r1, #0
   1dbf4:	ldr	r0, [fp, #-8]
   1dbf8:	bl	1d360 <__assert_fail@plt+0xc064>
   1dbfc:	mov	r3, r0
   1dc00:	mov	r0, r3
   1dc04:	sub	sp, fp, #4
   1dc08:	pop	{fp, pc}
   1dc0c:	push	{fp}		; (str fp, [sp, #-4]!)
   1dc10:	add	fp, sp, #0
   1dc14:	sub	sp, sp, #12
   1dc18:	str	r0, [fp, #-8]
   1dc1c:	ldr	r3, [fp, #-8]
   1dc20:	cmp	r3, #90	; 0x5a
   1dc24:	bgt	1dc40 <__assert_fail@plt+0xc944>
   1dc28:	cmp	r3, #65	; 0x41
   1dc2c:	bge	1dc4c <__assert_fail@plt+0xc950>
   1dc30:	sub	r3, r3, #48	; 0x30
   1dc34:	cmp	r3, #9
   1dc38:	bhi	1dc54 <__assert_fail@plt+0xc958>
   1dc3c:	b	1dc4c <__assert_fail@plt+0xc950>
   1dc40:	sub	r3, r3, #97	; 0x61
   1dc44:	cmp	r3, #25
   1dc48:	bhi	1dc54 <__assert_fail@plt+0xc958>
   1dc4c:	mov	r3, #1
   1dc50:	b	1dc58 <__assert_fail@plt+0xc95c>
   1dc54:	mov	r3, #0
   1dc58:	mov	r0, r3
   1dc5c:	add	sp, fp, #0
   1dc60:	pop	{fp}		; (ldr fp, [sp], #4)
   1dc64:	bx	lr
   1dc68:	push	{fp}		; (str fp, [sp, #-4]!)
   1dc6c:	add	fp, sp, #0
   1dc70:	sub	sp, sp, #12
   1dc74:	str	r0, [fp, #-8]
   1dc78:	ldr	r3, [fp, #-8]
   1dc7c:	cmp	r3, #65	; 0x41
   1dc80:	blt	1dca0 <__assert_fail@plt+0xc9a4>
   1dc84:	cmp	r3, #90	; 0x5a
   1dc88:	ble	1dc98 <__assert_fail@plt+0xc99c>
   1dc8c:	sub	r3, r3, #97	; 0x61
   1dc90:	cmp	r3, #25
   1dc94:	bhi	1dca0 <__assert_fail@plt+0xc9a4>
   1dc98:	mov	r3, #1
   1dc9c:	b	1dca4 <__assert_fail@plt+0xc9a8>
   1dca0:	mov	r3, #0
   1dca4:	mov	r0, r3
   1dca8:	add	sp, fp, #0
   1dcac:	pop	{fp}		; (ldr fp, [sp], #4)
   1dcb0:	bx	lr
   1dcb4:	push	{fp}		; (str fp, [sp, #-4]!)
   1dcb8:	add	fp, sp, #0
   1dcbc:	sub	sp, sp, #12
   1dcc0:	str	r0, [fp, #-8]
   1dcc4:	ldr	r3, [fp, #-8]
   1dcc8:	add	r3, r3, #0
   1dccc:	cmp	r3, #127	; 0x7f
   1dcd0:	bhi	1dcdc <__assert_fail@plt+0xc9e0>
   1dcd4:	mov	r3, #1
   1dcd8:	b	1dce0 <__assert_fail@plt+0xc9e4>
   1dcdc:	mov	r3, #0
   1dce0:	mov	r0, r3
   1dce4:	add	sp, fp, #0
   1dce8:	pop	{fp}		; (ldr fp, [sp], #4)
   1dcec:	bx	lr
   1dcf0:	push	{fp}		; (str fp, [sp, #-4]!)
   1dcf4:	add	fp, sp, #0
   1dcf8:	sub	sp, sp, #12
   1dcfc:	str	r0, [fp, #-8]
   1dd00:	ldr	r3, [fp, #-8]
   1dd04:	cmp	r3, #32
   1dd08:	beq	1dd18 <__assert_fail@plt+0xca1c>
   1dd0c:	ldr	r3, [fp, #-8]
   1dd10:	cmp	r3, #9
   1dd14:	bne	1dd20 <__assert_fail@plt+0xca24>
   1dd18:	mov	r3, #1
   1dd1c:	b	1dd24 <__assert_fail@plt+0xca28>
   1dd20:	mov	r3, #0
   1dd24:	and	r3, r3, #1
   1dd28:	uxtb	r3, r3
   1dd2c:	mov	r0, r3
   1dd30:	add	sp, fp, #0
   1dd34:	pop	{fp}		; (ldr fp, [sp], #4)
   1dd38:	bx	lr
   1dd3c:	push	{fp}		; (str fp, [sp, #-4]!)
   1dd40:	add	fp, sp, #0
   1dd44:	sub	sp, sp, #12
   1dd48:	str	r0, [fp, #-8]
   1dd4c:	ldr	r3, [fp, #-8]
   1dd50:	cmp	r3, #0
   1dd54:	blt	1dd70 <__assert_fail@plt+0xca74>
   1dd58:	cmp	r3, #31
   1dd5c:	ble	1dd68 <__assert_fail@plt+0xca6c>
   1dd60:	cmp	r3, #127	; 0x7f
   1dd64:	bne	1dd70 <__assert_fail@plt+0xca74>
   1dd68:	mov	r3, #1
   1dd6c:	b	1dd74 <__assert_fail@plt+0xca78>
   1dd70:	mov	r3, #0
   1dd74:	mov	r0, r3
   1dd78:	add	sp, fp, #0
   1dd7c:	pop	{fp}		; (ldr fp, [sp], #4)
   1dd80:	bx	lr
   1dd84:	push	{fp}		; (str fp, [sp, #-4]!)
   1dd88:	add	fp, sp, #0
   1dd8c:	sub	sp, sp, #12
   1dd90:	str	r0, [fp, #-8]
   1dd94:	ldr	r3, [fp, #-8]
   1dd98:	sub	r3, r3, #48	; 0x30
   1dd9c:	cmp	r3, #9
   1dda0:	bhi	1ddac <__assert_fail@plt+0xcab0>
   1dda4:	mov	r3, #1
   1dda8:	b	1ddb0 <__assert_fail@plt+0xcab4>
   1ddac:	mov	r3, #0
   1ddb0:	mov	r0, r3
   1ddb4:	add	sp, fp, #0
   1ddb8:	pop	{fp}		; (ldr fp, [sp], #4)
   1ddbc:	bx	lr
   1ddc0:	push	{fp}		; (str fp, [sp, #-4]!)
   1ddc4:	add	fp, sp, #0
   1ddc8:	sub	sp, sp, #12
   1ddcc:	str	r0, [fp, #-8]
   1ddd0:	ldr	r3, [fp, #-8]
   1ddd4:	sub	r3, r3, #33	; 0x21
   1ddd8:	cmp	r3, #93	; 0x5d
   1dddc:	bhi	1dde8 <__assert_fail@plt+0xcaec>
   1dde0:	mov	r3, #1
   1dde4:	b	1ddec <__assert_fail@plt+0xcaf0>
   1dde8:	mov	r3, #0
   1ddec:	mov	r0, r3
   1ddf0:	add	sp, fp, #0
   1ddf4:	pop	{fp}		; (ldr fp, [sp], #4)
   1ddf8:	bx	lr
   1ddfc:	push	{fp}		; (str fp, [sp, #-4]!)
   1de00:	add	fp, sp, #0
   1de04:	sub	sp, sp, #12
   1de08:	str	r0, [fp, #-8]
   1de0c:	ldr	r3, [fp, #-8]
   1de10:	sub	r3, r3, #97	; 0x61
   1de14:	cmp	r3, #25
   1de18:	bhi	1de24 <__assert_fail@plt+0xcb28>
   1de1c:	mov	r3, #1
   1de20:	b	1de28 <__assert_fail@plt+0xcb2c>
   1de24:	mov	r3, #0
   1de28:	mov	r0, r3
   1de2c:	add	sp, fp, #0
   1de30:	pop	{fp}		; (ldr fp, [sp], #4)
   1de34:	bx	lr
   1de38:	push	{fp}		; (str fp, [sp, #-4]!)
   1de3c:	add	fp, sp, #0
   1de40:	sub	sp, sp, #12
   1de44:	str	r0, [fp, #-8]
   1de48:	ldr	r3, [fp, #-8]
   1de4c:	sub	r3, r3, #32
   1de50:	cmp	r3, #94	; 0x5e
   1de54:	bhi	1de60 <__assert_fail@plt+0xcb64>
   1de58:	mov	r3, #1
   1de5c:	b	1de64 <__assert_fail@plt+0xcb68>
   1de60:	mov	r3, #0
   1de64:	mov	r0, r3
   1de68:	add	sp, fp, #0
   1de6c:	pop	{fp}		; (ldr fp, [sp], #4)
   1de70:	bx	lr
   1de74:	push	{fp}		; (str fp, [sp, #-4]!)
   1de78:	add	fp, sp, #0
   1de7c:	sub	sp, sp, #12
   1de80:	str	r0, [fp, #-8]
   1de84:	ldr	r3, [fp, #-8]
   1de88:	cmp	r3, #64	; 0x40
   1de8c:	bgt	1dea8 <__assert_fail@plt+0xcbac>
   1de90:	cmp	r3, #58	; 0x3a
   1de94:	bge	1dec4 <__assert_fail@plt+0xcbc8>
   1de98:	sub	r3, r3, #33	; 0x21
   1de9c:	cmp	r3, #14
   1dea0:	bhi	1decc <__assert_fail@plt+0xcbd0>
   1dea4:	b	1dec4 <__assert_fail@plt+0xcbc8>
   1dea8:	cmp	r3, #91	; 0x5b
   1deac:	blt	1decc <__assert_fail@plt+0xcbd0>
   1deb0:	cmp	r3, #96	; 0x60
   1deb4:	ble	1dec4 <__assert_fail@plt+0xcbc8>
   1deb8:	sub	r3, r3, #123	; 0x7b
   1debc:	cmp	r3, #3
   1dec0:	bhi	1decc <__assert_fail@plt+0xcbd0>
   1dec4:	mov	r3, #1
   1dec8:	b	1ded0 <__assert_fail@plt+0xcbd4>
   1decc:	mov	r3, #0
   1ded0:	mov	r0, r3
   1ded4:	add	sp, fp, #0
   1ded8:	pop	{fp}		; (ldr fp, [sp], #4)
   1dedc:	bx	lr
   1dee0:	push	{fp}		; (str fp, [sp, #-4]!)
   1dee4:	add	fp, sp, #0
   1dee8:	sub	sp, sp, #12
   1deec:	str	r0, [fp, #-8]
   1def0:	ldr	r3, [fp, #-8]
   1def4:	cmp	r3, #9
   1def8:	blt	1df14 <__assert_fail@plt+0xcc18>
   1defc:	cmp	r3, #13
   1df00:	ble	1df0c <__assert_fail@plt+0xcc10>
   1df04:	cmp	r3, #32
   1df08:	bne	1df14 <__assert_fail@plt+0xcc18>
   1df0c:	mov	r3, #1
   1df10:	b	1df18 <__assert_fail@plt+0xcc1c>
   1df14:	mov	r3, #0
   1df18:	mov	r0, r3
   1df1c:	add	sp, fp, #0
   1df20:	pop	{fp}		; (ldr fp, [sp], #4)
   1df24:	bx	lr
   1df28:	push	{fp}		; (str fp, [sp, #-4]!)
   1df2c:	add	fp, sp, #0
   1df30:	sub	sp, sp, #12
   1df34:	str	r0, [fp, #-8]
   1df38:	ldr	r3, [fp, #-8]
   1df3c:	sub	r3, r3, #65	; 0x41
   1df40:	cmp	r3, #25
   1df44:	bhi	1df50 <__assert_fail@plt+0xcc54>
   1df48:	mov	r3, #1
   1df4c:	b	1df54 <__assert_fail@plt+0xcc58>
   1df50:	mov	r3, #0
   1df54:	mov	r0, r3
   1df58:	add	sp, fp, #0
   1df5c:	pop	{fp}		; (ldr fp, [sp], #4)
   1df60:	bx	lr
   1df64:	push	{fp}		; (str fp, [sp, #-4]!)
   1df68:	add	fp, sp, #0
   1df6c:	sub	sp, sp, #12
   1df70:	str	r0, [fp, #-8]
   1df74:	ldr	r3, [fp, #-8]
   1df78:	sub	r3, r3, #48	; 0x30
   1df7c:	cmp	r3, #54	; 0x36
   1df80:	addls	pc, pc, r3, lsl #2
   1df84:	b	1e06c <__assert_fail@plt+0xcd70>
   1df88:	b	1e064 <__assert_fail@plt+0xcd68>
   1df8c:	b	1e064 <__assert_fail@plt+0xcd68>
   1df90:	b	1e064 <__assert_fail@plt+0xcd68>
   1df94:	b	1e064 <__assert_fail@plt+0xcd68>
   1df98:	b	1e064 <__assert_fail@plt+0xcd68>
   1df9c:	b	1e064 <__assert_fail@plt+0xcd68>
   1dfa0:	b	1e064 <__assert_fail@plt+0xcd68>
   1dfa4:	b	1e064 <__assert_fail@plt+0xcd68>
   1dfa8:	b	1e064 <__assert_fail@plt+0xcd68>
   1dfac:	b	1e064 <__assert_fail@plt+0xcd68>
   1dfb0:	b	1e06c <__assert_fail@plt+0xcd70>
   1dfb4:	b	1e06c <__assert_fail@plt+0xcd70>
   1dfb8:	b	1e06c <__assert_fail@plt+0xcd70>
   1dfbc:	b	1e06c <__assert_fail@plt+0xcd70>
   1dfc0:	b	1e06c <__assert_fail@plt+0xcd70>
   1dfc4:	b	1e06c <__assert_fail@plt+0xcd70>
   1dfc8:	b	1e06c <__assert_fail@plt+0xcd70>
   1dfcc:	b	1e064 <__assert_fail@plt+0xcd68>
   1dfd0:	b	1e064 <__assert_fail@plt+0xcd68>
   1dfd4:	b	1e064 <__assert_fail@plt+0xcd68>
   1dfd8:	b	1e064 <__assert_fail@plt+0xcd68>
   1dfdc:	b	1e064 <__assert_fail@plt+0xcd68>
   1dfe0:	b	1e064 <__assert_fail@plt+0xcd68>
   1dfe4:	b	1e06c <__assert_fail@plt+0xcd70>
   1dfe8:	b	1e06c <__assert_fail@plt+0xcd70>
   1dfec:	b	1e06c <__assert_fail@plt+0xcd70>
   1dff0:	b	1e06c <__assert_fail@plt+0xcd70>
   1dff4:	b	1e06c <__assert_fail@plt+0xcd70>
   1dff8:	b	1e06c <__assert_fail@plt+0xcd70>
   1dffc:	b	1e06c <__assert_fail@plt+0xcd70>
   1e000:	b	1e06c <__assert_fail@plt+0xcd70>
   1e004:	b	1e06c <__assert_fail@plt+0xcd70>
   1e008:	b	1e06c <__assert_fail@plt+0xcd70>
   1e00c:	b	1e06c <__assert_fail@plt+0xcd70>
   1e010:	b	1e06c <__assert_fail@plt+0xcd70>
   1e014:	b	1e06c <__assert_fail@plt+0xcd70>
   1e018:	b	1e06c <__assert_fail@plt+0xcd70>
   1e01c:	b	1e06c <__assert_fail@plt+0xcd70>
   1e020:	b	1e06c <__assert_fail@plt+0xcd70>
   1e024:	b	1e06c <__assert_fail@plt+0xcd70>
   1e028:	b	1e06c <__assert_fail@plt+0xcd70>
   1e02c:	b	1e06c <__assert_fail@plt+0xcd70>
   1e030:	b	1e06c <__assert_fail@plt+0xcd70>
   1e034:	b	1e06c <__assert_fail@plt+0xcd70>
   1e038:	b	1e06c <__assert_fail@plt+0xcd70>
   1e03c:	b	1e06c <__assert_fail@plt+0xcd70>
   1e040:	b	1e06c <__assert_fail@plt+0xcd70>
   1e044:	b	1e06c <__assert_fail@plt+0xcd70>
   1e048:	b	1e06c <__assert_fail@plt+0xcd70>
   1e04c:	b	1e064 <__assert_fail@plt+0xcd68>
   1e050:	b	1e064 <__assert_fail@plt+0xcd68>
   1e054:	b	1e064 <__assert_fail@plt+0xcd68>
   1e058:	b	1e064 <__assert_fail@plt+0xcd68>
   1e05c:	b	1e064 <__assert_fail@plt+0xcd68>
   1e060:	b	1e064 <__assert_fail@plt+0xcd68>
   1e064:	mov	r3, #1
   1e068:	b	1e070 <__assert_fail@plt+0xcd74>
   1e06c:	mov	r3, #0
   1e070:	mov	r0, r3
   1e074:	add	sp, fp, #0
   1e078:	pop	{fp}		; (ldr fp, [sp], #4)
   1e07c:	bx	lr
   1e080:	push	{fp}		; (str fp, [sp, #-4]!)
   1e084:	add	fp, sp, #0
   1e088:	sub	sp, sp, #12
   1e08c:	str	r0, [fp, #-8]
   1e090:	ldr	r3, [fp, #-8]
   1e094:	sub	r3, r3, #65	; 0x41
   1e098:	cmp	r3, #25
   1e09c:	bhi	1e0ac <__assert_fail@plt+0xcdb0>
   1e0a0:	ldr	r3, [fp, #-8]
   1e0a4:	add	r3, r3, #32
   1e0a8:	b	1e0b0 <__assert_fail@plt+0xcdb4>
   1e0ac:	ldr	r3, [fp, #-8]
   1e0b0:	mov	r0, r3
   1e0b4:	add	sp, fp, #0
   1e0b8:	pop	{fp}		; (ldr fp, [sp], #4)
   1e0bc:	bx	lr
   1e0c0:	push	{fp}		; (str fp, [sp, #-4]!)
   1e0c4:	add	fp, sp, #0
   1e0c8:	sub	sp, sp, #12
   1e0cc:	str	r0, [fp, #-8]
   1e0d0:	ldr	r3, [fp, #-8]
   1e0d4:	sub	r3, r3, #97	; 0x61
   1e0d8:	cmp	r3, #25
   1e0dc:	bhi	1e0ec <__assert_fail@plt+0xcdf0>
   1e0e0:	ldr	r3, [fp, #-8]
   1e0e4:	sub	r3, r3, #32
   1e0e8:	b	1e0f0 <__assert_fail@plt+0xcdf4>
   1e0ec:	ldr	r3, [fp, #-8]
   1e0f0:	mov	r0, r3
   1e0f4:	add	sp, fp, #0
   1e0f8:	pop	{fp}		; (ldr fp, [sp], #4)
   1e0fc:	bx	lr
   1e100:	push	{fp, lr}
   1e104:	add	fp, sp, #4
   1e108:	sub	sp, sp, #272	; 0x110
   1e10c:	str	r0, [fp, #-272]	; 0xfffffef0
   1e110:	sub	r3, fp, #264	; 0x108
   1e114:	ldr	r2, [pc, #116]	; 1e190 <__assert_fail@plt+0xce94>
   1e118:	mov	r1, r3
   1e11c:	ldr	r0, [fp, #-272]	; 0xfffffef0
   1e120:	bl	1e2a4 <__assert_fail@plt+0xcfa8>
   1e124:	mov	r3, r0
   1e128:	cmp	r3, #0
   1e12c:	beq	1e138 <__assert_fail@plt+0xce3c>
   1e130:	mov	r3, #0
   1e134:	b	1e184 <__assert_fail@plt+0xce88>
   1e138:	sub	r3, fp, #264	; 0x108
   1e13c:	ldr	r1, [pc, #80]	; 1e194 <__assert_fail@plt+0xce98>
   1e140:	mov	r0, r3
   1e144:	bl	10ff0 <strcmp@plt>
   1e148:	mov	r3, r0
   1e14c:	cmp	r3, #0
   1e150:	beq	1e178 <__assert_fail@plt+0xce7c>
   1e154:	sub	r3, fp, #264	; 0x108
   1e158:	ldr	r1, [pc, #56]	; 1e198 <__assert_fail@plt+0xce9c>
   1e15c:	mov	r0, r3
   1e160:	bl	10ff0 <strcmp@plt>
   1e164:	mov	r3, r0
   1e168:	cmp	r3, #0
   1e16c:	beq	1e178 <__assert_fail@plt+0xce7c>
   1e170:	mov	r3, #1
   1e174:	b	1e17c <__assert_fail@plt+0xce80>
   1e178:	mov	r3, #0
   1e17c:	and	r3, r3, #1
   1e180:	uxtb	r3, r3
   1e184:	mov	r0, r3
   1e188:	sub	sp, fp, #4
   1e18c:	pop	{fp, pc}
   1e190:	andeq	r0, r0, r1, lsl #2
   1e194:	andeq	pc, r1, r4, ror #28
   1e198:	andeq	pc, r1, r8, ror #28
   1e19c:	push	{fp, lr}
   1e1a0:	add	fp, sp, #4
   1e1a4:	sub	sp, sp, #16
   1e1a8:	str	r0, [fp, #-16]
   1e1ac:	mov	r1, #0
   1e1b0:	ldr	r0, [fp, #-16]
   1e1b4:	bl	11224 <setlocale@plt>
   1e1b8:	str	r0, [fp, #-8]
   1e1bc:	ldr	r3, [fp, #-8]
   1e1c0:	mov	r0, r3
   1e1c4:	sub	sp, fp, #4
   1e1c8:	pop	{fp, pc}
   1e1cc:	push	{fp, lr}
   1e1d0:	add	fp, sp, #4
   1e1d4:	sub	sp, sp, #24
   1e1d8:	str	r0, [fp, #-16]
   1e1dc:	str	r1, [fp, #-20]	; 0xffffffec
   1e1e0:	str	r2, [fp, #-24]	; 0xffffffe8
   1e1e4:	ldr	r0, [fp, #-16]
   1e1e8:	bl	1e19c <__assert_fail@plt+0xcea0>
   1e1ec:	str	r0, [fp, #-8]
   1e1f0:	ldr	r3, [fp, #-8]
   1e1f4:	cmp	r3, #0
   1e1f8:	bne	1e21c <__assert_fail@plt+0xcf20>
   1e1fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e200:	cmp	r3, #0
   1e204:	beq	1e214 <__assert_fail@plt+0xcf18>
   1e208:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e20c:	mov	r2, #0
   1e210:	strb	r2, [r3]
   1e214:	mov	r3, #22
   1e218:	b	1e298 <__assert_fail@plt+0xcf9c>
   1e21c:	ldr	r0, [fp, #-8]
   1e220:	bl	11188 <strlen@plt>
   1e224:	str	r0, [fp, #-12]
   1e228:	ldr	r2, [fp, #-12]
   1e22c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e230:	cmp	r2, r3
   1e234:	bcs	1e258 <__assert_fail@plt+0xcf5c>
   1e238:	ldr	r3, [fp, #-12]
   1e23c:	add	r3, r3, #1
   1e240:	mov	r2, r3
   1e244:	ldr	r1, [fp, #-8]
   1e248:	ldr	r0, [fp, #-20]	; 0xffffffec
   1e24c:	bl	11044 <memcpy@plt>
   1e250:	mov	r3, #0
   1e254:	b	1e298 <__assert_fail@plt+0xcf9c>
   1e258:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e25c:	cmp	r3, #0
   1e260:	beq	1e294 <__assert_fail@plt+0xcf98>
   1e264:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e268:	sub	r3, r3, #1
   1e26c:	mov	r2, r3
   1e270:	ldr	r1, [fp, #-8]
   1e274:	ldr	r0, [fp, #-20]	; 0xffffffec
   1e278:	bl	11044 <memcpy@plt>
   1e27c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e280:	sub	r3, r3, #1
   1e284:	ldr	r2, [fp, #-20]	; 0xffffffec
   1e288:	add	r3, r2, r3
   1e28c:	mov	r2, #0
   1e290:	strb	r2, [r3]
   1e294:	mov	r3, #34	; 0x22
   1e298:	mov	r0, r3
   1e29c:	sub	sp, fp, #4
   1e2a0:	pop	{fp, pc}
   1e2a4:	push	{fp, lr}
   1e2a8:	add	fp, sp, #4
   1e2ac:	sub	sp, sp, #16
   1e2b0:	str	r0, [fp, #-8]
   1e2b4:	str	r1, [fp, #-12]
   1e2b8:	str	r2, [fp, #-16]
   1e2bc:	ldr	r2, [fp, #-16]
   1e2c0:	ldr	r1, [fp, #-12]
   1e2c4:	ldr	r0, [fp, #-8]
   1e2c8:	bl	1e1cc <__assert_fail@plt+0xced0>
   1e2cc:	mov	r3, r0
   1e2d0:	mov	r0, r3
   1e2d4:	sub	sp, fp, #4
   1e2d8:	pop	{fp, pc}
   1e2dc:	push	{fp, lr}
   1e2e0:	add	fp, sp, #4
   1e2e4:	sub	sp, sp, #8
   1e2e8:	str	r0, [fp, #-8]
   1e2ec:	ldr	r0, [fp, #-8]
   1e2f0:	bl	1e19c <__assert_fail@plt+0xcea0>
   1e2f4:	mov	r3, r0
   1e2f8:	mov	r0, r3
   1e2fc:	sub	sp, fp, #4
   1e300:	pop	{fp, pc}
   1e304:	subs	r2, r1, #1
   1e308:	bxeq	lr
   1e30c:	bcc	1e4e4 <__assert_fail@plt+0xd1e8>
   1e310:	cmp	r0, r1
   1e314:	bls	1e4c8 <__assert_fail@plt+0xd1cc>
   1e318:	tst	r1, r2
   1e31c:	beq	1e4d4 <__assert_fail@plt+0xd1d8>
   1e320:	clz	r3, r0
   1e324:	clz	r2, r1
   1e328:	sub	r3, r2, r3
   1e32c:	rsbs	r3, r3, #31
   1e330:	addne	r3, r3, r3, lsl #1
   1e334:	mov	r2, #0
   1e338:	addne	pc, pc, r3, lsl #2
   1e33c:	nop			; (mov r0, r0)
   1e340:	cmp	r0, r1, lsl #31
   1e344:	adc	r2, r2, r2
   1e348:	subcs	r0, r0, r1, lsl #31
   1e34c:	cmp	r0, r1, lsl #30
   1e350:	adc	r2, r2, r2
   1e354:	subcs	r0, r0, r1, lsl #30
   1e358:	cmp	r0, r1, lsl #29
   1e35c:	adc	r2, r2, r2
   1e360:	subcs	r0, r0, r1, lsl #29
   1e364:	cmp	r0, r1, lsl #28
   1e368:	adc	r2, r2, r2
   1e36c:	subcs	r0, r0, r1, lsl #28
   1e370:	cmp	r0, r1, lsl #27
   1e374:	adc	r2, r2, r2
   1e378:	subcs	r0, r0, r1, lsl #27
   1e37c:	cmp	r0, r1, lsl #26
   1e380:	adc	r2, r2, r2
   1e384:	subcs	r0, r0, r1, lsl #26
   1e388:	cmp	r0, r1, lsl #25
   1e38c:	adc	r2, r2, r2
   1e390:	subcs	r0, r0, r1, lsl #25
   1e394:	cmp	r0, r1, lsl #24
   1e398:	adc	r2, r2, r2
   1e39c:	subcs	r0, r0, r1, lsl #24
   1e3a0:	cmp	r0, r1, lsl #23
   1e3a4:	adc	r2, r2, r2
   1e3a8:	subcs	r0, r0, r1, lsl #23
   1e3ac:	cmp	r0, r1, lsl #22
   1e3b0:	adc	r2, r2, r2
   1e3b4:	subcs	r0, r0, r1, lsl #22
   1e3b8:	cmp	r0, r1, lsl #21
   1e3bc:	adc	r2, r2, r2
   1e3c0:	subcs	r0, r0, r1, lsl #21
   1e3c4:	cmp	r0, r1, lsl #20
   1e3c8:	adc	r2, r2, r2
   1e3cc:	subcs	r0, r0, r1, lsl #20
   1e3d0:	cmp	r0, r1, lsl #19
   1e3d4:	adc	r2, r2, r2
   1e3d8:	subcs	r0, r0, r1, lsl #19
   1e3dc:	cmp	r0, r1, lsl #18
   1e3e0:	adc	r2, r2, r2
   1e3e4:	subcs	r0, r0, r1, lsl #18
   1e3e8:	cmp	r0, r1, lsl #17
   1e3ec:	adc	r2, r2, r2
   1e3f0:	subcs	r0, r0, r1, lsl #17
   1e3f4:	cmp	r0, r1, lsl #16
   1e3f8:	adc	r2, r2, r2
   1e3fc:	subcs	r0, r0, r1, lsl #16
   1e400:	cmp	r0, r1, lsl #15
   1e404:	adc	r2, r2, r2
   1e408:	subcs	r0, r0, r1, lsl #15
   1e40c:	cmp	r0, r1, lsl #14
   1e410:	adc	r2, r2, r2
   1e414:	subcs	r0, r0, r1, lsl #14
   1e418:	cmp	r0, r1, lsl #13
   1e41c:	adc	r2, r2, r2
   1e420:	subcs	r0, r0, r1, lsl #13
   1e424:	cmp	r0, r1, lsl #12
   1e428:	adc	r2, r2, r2
   1e42c:	subcs	r0, r0, r1, lsl #12
   1e430:	cmp	r0, r1, lsl #11
   1e434:	adc	r2, r2, r2
   1e438:	subcs	r0, r0, r1, lsl #11
   1e43c:	cmp	r0, r1, lsl #10
   1e440:	adc	r2, r2, r2
   1e444:	subcs	r0, r0, r1, lsl #10
   1e448:	cmp	r0, r1, lsl #9
   1e44c:	adc	r2, r2, r2
   1e450:	subcs	r0, r0, r1, lsl #9
   1e454:	cmp	r0, r1, lsl #8
   1e458:	adc	r2, r2, r2
   1e45c:	subcs	r0, r0, r1, lsl #8
   1e460:	cmp	r0, r1, lsl #7
   1e464:	adc	r2, r2, r2
   1e468:	subcs	r0, r0, r1, lsl #7
   1e46c:	cmp	r0, r1, lsl #6
   1e470:	adc	r2, r2, r2
   1e474:	subcs	r0, r0, r1, lsl #6
   1e478:	cmp	r0, r1, lsl #5
   1e47c:	adc	r2, r2, r2
   1e480:	subcs	r0, r0, r1, lsl #5
   1e484:	cmp	r0, r1, lsl #4
   1e488:	adc	r2, r2, r2
   1e48c:	subcs	r0, r0, r1, lsl #4
   1e490:	cmp	r0, r1, lsl #3
   1e494:	adc	r2, r2, r2
   1e498:	subcs	r0, r0, r1, lsl #3
   1e49c:	cmp	r0, r1, lsl #2
   1e4a0:	adc	r2, r2, r2
   1e4a4:	subcs	r0, r0, r1, lsl #2
   1e4a8:	cmp	r0, r1, lsl #1
   1e4ac:	adc	r2, r2, r2
   1e4b0:	subcs	r0, r0, r1, lsl #1
   1e4b4:	cmp	r0, r1
   1e4b8:	adc	r2, r2, r2
   1e4bc:	subcs	r0, r0, r1
   1e4c0:	mov	r0, r2
   1e4c4:	bx	lr
   1e4c8:	moveq	r0, #1
   1e4cc:	movne	r0, #0
   1e4d0:	bx	lr
   1e4d4:	clz	r2, r1
   1e4d8:	rsb	r2, r2, #31
   1e4dc:	lsr	r0, r0, r2
   1e4e0:	bx	lr
   1e4e4:	cmp	r0, #0
   1e4e8:	mvnne	r0, #0
   1e4ec:	b	1e78c <__assert_fail@plt+0xd490>
   1e4f0:	cmp	r1, #0
   1e4f4:	beq	1e4e4 <__assert_fail@plt+0xd1e8>
   1e4f8:	push	{r0, r1, lr}
   1e4fc:	bl	1e304 <__assert_fail@plt+0xd008>
   1e500:	pop	{r1, r2, lr}
   1e504:	mul	r3, r2, r0
   1e508:	sub	r1, r1, r3
   1e50c:	bx	lr
   1e510:	cmp	r1, #0
   1e514:	beq	1e720 <__assert_fail@plt+0xd424>
   1e518:	eor	ip, r0, r1
   1e51c:	rsbmi	r1, r1, #0
   1e520:	subs	r2, r1, #1
   1e524:	beq	1e6ec <__assert_fail@plt+0xd3f0>
   1e528:	movs	r3, r0
   1e52c:	rsbmi	r3, r0, #0
   1e530:	cmp	r3, r1
   1e534:	bls	1e6f8 <__assert_fail@plt+0xd3fc>
   1e538:	tst	r1, r2
   1e53c:	beq	1e708 <__assert_fail@plt+0xd40c>
   1e540:	clz	r2, r3
   1e544:	clz	r0, r1
   1e548:	sub	r2, r0, r2
   1e54c:	rsbs	r2, r2, #31
   1e550:	addne	r2, r2, r2, lsl #1
   1e554:	mov	r0, #0
   1e558:	addne	pc, pc, r2, lsl #2
   1e55c:	nop			; (mov r0, r0)
   1e560:	cmp	r3, r1, lsl #31
   1e564:	adc	r0, r0, r0
   1e568:	subcs	r3, r3, r1, lsl #31
   1e56c:	cmp	r3, r1, lsl #30
   1e570:	adc	r0, r0, r0
   1e574:	subcs	r3, r3, r1, lsl #30
   1e578:	cmp	r3, r1, lsl #29
   1e57c:	adc	r0, r0, r0
   1e580:	subcs	r3, r3, r1, lsl #29
   1e584:	cmp	r3, r1, lsl #28
   1e588:	adc	r0, r0, r0
   1e58c:	subcs	r3, r3, r1, lsl #28
   1e590:	cmp	r3, r1, lsl #27
   1e594:	adc	r0, r0, r0
   1e598:	subcs	r3, r3, r1, lsl #27
   1e59c:	cmp	r3, r1, lsl #26
   1e5a0:	adc	r0, r0, r0
   1e5a4:	subcs	r3, r3, r1, lsl #26
   1e5a8:	cmp	r3, r1, lsl #25
   1e5ac:	adc	r0, r0, r0
   1e5b0:	subcs	r3, r3, r1, lsl #25
   1e5b4:	cmp	r3, r1, lsl #24
   1e5b8:	adc	r0, r0, r0
   1e5bc:	subcs	r3, r3, r1, lsl #24
   1e5c0:	cmp	r3, r1, lsl #23
   1e5c4:	adc	r0, r0, r0
   1e5c8:	subcs	r3, r3, r1, lsl #23
   1e5cc:	cmp	r3, r1, lsl #22
   1e5d0:	adc	r0, r0, r0
   1e5d4:	subcs	r3, r3, r1, lsl #22
   1e5d8:	cmp	r3, r1, lsl #21
   1e5dc:	adc	r0, r0, r0
   1e5e0:	subcs	r3, r3, r1, lsl #21
   1e5e4:	cmp	r3, r1, lsl #20
   1e5e8:	adc	r0, r0, r0
   1e5ec:	subcs	r3, r3, r1, lsl #20
   1e5f0:	cmp	r3, r1, lsl #19
   1e5f4:	adc	r0, r0, r0
   1e5f8:	subcs	r3, r3, r1, lsl #19
   1e5fc:	cmp	r3, r1, lsl #18
   1e600:	adc	r0, r0, r0
   1e604:	subcs	r3, r3, r1, lsl #18
   1e608:	cmp	r3, r1, lsl #17
   1e60c:	adc	r0, r0, r0
   1e610:	subcs	r3, r3, r1, lsl #17
   1e614:	cmp	r3, r1, lsl #16
   1e618:	adc	r0, r0, r0
   1e61c:	subcs	r3, r3, r1, lsl #16
   1e620:	cmp	r3, r1, lsl #15
   1e624:	adc	r0, r0, r0
   1e628:	subcs	r3, r3, r1, lsl #15
   1e62c:	cmp	r3, r1, lsl #14
   1e630:	adc	r0, r0, r0
   1e634:	subcs	r3, r3, r1, lsl #14
   1e638:	cmp	r3, r1, lsl #13
   1e63c:	adc	r0, r0, r0
   1e640:	subcs	r3, r3, r1, lsl #13
   1e644:	cmp	r3, r1, lsl #12
   1e648:	adc	r0, r0, r0
   1e64c:	subcs	r3, r3, r1, lsl #12
   1e650:	cmp	r3, r1, lsl #11
   1e654:	adc	r0, r0, r0
   1e658:	subcs	r3, r3, r1, lsl #11
   1e65c:	cmp	r3, r1, lsl #10
   1e660:	adc	r0, r0, r0
   1e664:	subcs	r3, r3, r1, lsl #10
   1e668:	cmp	r3, r1, lsl #9
   1e66c:	adc	r0, r0, r0
   1e670:	subcs	r3, r3, r1, lsl #9
   1e674:	cmp	r3, r1, lsl #8
   1e678:	adc	r0, r0, r0
   1e67c:	subcs	r3, r3, r1, lsl #8
   1e680:	cmp	r3, r1, lsl #7
   1e684:	adc	r0, r0, r0
   1e688:	subcs	r3, r3, r1, lsl #7
   1e68c:	cmp	r3, r1, lsl #6
   1e690:	adc	r0, r0, r0
   1e694:	subcs	r3, r3, r1, lsl #6
   1e698:	cmp	r3, r1, lsl #5
   1e69c:	adc	r0, r0, r0
   1e6a0:	subcs	r3, r3, r1, lsl #5
   1e6a4:	cmp	r3, r1, lsl #4
   1e6a8:	adc	r0, r0, r0
   1e6ac:	subcs	r3, r3, r1, lsl #4
   1e6b0:	cmp	r3, r1, lsl #3
   1e6b4:	adc	r0, r0, r0
   1e6b8:	subcs	r3, r3, r1, lsl #3
   1e6bc:	cmp	r3, r1, lsl #2
   1e6c0:	adc	r0, r0, r0
   1e6c4:	subcs	r3, r3, r1, lsl #2
   1e6c8:	cmp	r3, r1, lsl #1
   1e6cc:	adc	r0, r0, r0
   1e6d0:	subcs	r3, r3, r1, lsl #1
   1e6d4:	cmp	r3, r1
   1e6d8:	adc	r0, r0, r0
   1e6dc:	subcs	r3, r3, r1
   1e6e0:	cmp	ip, #0
   1e6e4:	rsbmi	r0, r0, #0
   1e6e8:	bx	lr
   1e6ec:	teq	ip, r0
   1e6f0:	rsbmi	r0, r0, #0
   1e6f4:	bx	lr
   1e6f8:	movcc	r0, #0
   1e6fc:	asreq	r0, ip, #31
   1e700:	orreq	r0, r0, #1
   1e704:	bx	lr
   1e708:	clz	r2, r1
   1e70c:	rsb	r2, r2, #31
   1e710:	cmp	ip, #0
   1e714:	lsr	r0, r3, r2
   1e718:	rsbmi	r0, r0, #0
   1e71c:	bx	lr
   1e720:	cmp	r0, #0
   1e724:	mvngt	r0, #-2147483648	; 0x80000000
   1e728:	movlt	r0, #-2147483648	; 0x80000000
   1e72c:	b	1e78c <__assert_fail@plt+0xd490>
   1e730:	cmp	r1, #0
   1e734:	beq	1e720 <__assert_fail@plt+0xd424>
   1e738:	push	{r0, r1, lr}
   1e73c:	bl	1e518 <__assert_fail@plt+0xd21c>
   1e740:	pop	{r1, r2, lr}
   1e744:	mul	r3, r2, r0
   1e748:	sub	r1, r1, r3
   1e74c:	bx	lr
   1e750:	cmp	r3, #0
   1e754:	cmpeq	r2, #0
   1e758:	bne	1e770 <__assert_fail@plt+0xd474>
   1e75c:	cmp	r1, #0
   1e760:	cmpeq	r0, #0
   1e764:	mvnne	r1, #0
   1e768:	mvnne	r0, #0
   1e76c:	b	1e78c <__assert_fail@plt+0xd490>
   1e770:	sub	sp, sp, #8
   1e774:	push	{sp, lr}
   1e778:	bl	1e79c <__assert_fail@plt+0xd4a0>
   1e77c:	ldr	lr, [sp, #4]
   1e780:	add	sp, sp, #8
   1e784:	pop	{r2, r3}
   1e788:	bx	lr
   1e78c:	push	{r1, lr}
   1e790:	mov	r0, #8
   1e794:	bl	10fe4 <raise@plt>
   1e798:	pop	{r1, pc}
   1e79c:	cmp	r1, r3
   1e7a0:	push	{r4, r5, r6, r7, r8, r9, lr}
   1e7a4:	cmpeq	r0, r2
   1e7a8:	mov	r4, r0
   1e7ac:	mov	r5, r1
   1e7b0:	ldr	r9, [sp, #28]
   1e7b4:	movcc	r0, #0
   1e7b8:	movcc	r1, #0
   1e7bc:	bcc	1e8b4 <__assert_fail@plt+0xd5b8>
   1e7c0:	cmp	r3, #0
   1e7c4:	clzeq	ip, r2
   1e7c8:	clzne	ip, r3
   1e7cc:	addeq	ip, ip, #32
   1e7d0:	cmp	r5, #0
   1e7d4:	clzeq	r1, r4
   1e7d8:	addeq	r1, r1, #32
   1e7dc:	clzne	r1, r5
   1e7e0:	sub	ip, ip, r1
   1e7e4:	sub	lr, ip, #32
   1e7e8:	lsl	r7, r3, ip
   1e7ec:	rsb	r8, ip, #32
   1e7f0:	orr	r7, r7, r2, lsl lr
   1e7f4:	orr	r7, r7, r2, lsr r8
   1e7f8:	lsl	r6, r2, ip
   1e7fc:	cmp	r5, r7
   1e800:	cmpeq	r4, r6
   1e804:	movcc	r0, #0
   1e808:	movcc	r1, #0
   1e80c:	bcc	1e828 <__assert_fail@plt+0xd52c>
   1e810:	mov	r3, #1
   1e814:	subs	r4, r4, r6
   1e818:	lsl	r1, r3, lr
   1e81c:	lsl	r0, r3, ip
   1e820:	orr	r1, r1, r3, lsr r8
   1e824:	sbc	r5, r5, r7
   1e828:	cmp	ip, #0
   1e82c:	beq	1e8b4 <__assert_fail@plt+0xd5b8>
   1e830:	lsrs	r3, r7, #1
   1e834:	rrx	r2, r6
   1e838:	mov	r6, ip
   1e83c:	b	1e860 <__assert_fail@plt+0xd564>
   1e840:	subs	r4, r4, r2
   1e844:	sbc	r5, r5, r3
   1e848:	adds	r4, r4, r4
   1e84c:	adc	r5, r5, r5
   1e850:	adds	r4, r4, #1
   1e854:	adc	r5, r5, #0
   1e858:	subs	r6, r6, #1
   1e85c:	beq	1e87c <__assert_fail@plt+0xd580>
   1e860:	cmp	r5, r3
   1e864:	cmpeq	r4, r2
   1e868:	bcs	1e840 <__assert_fail@plt+0xd544>
   1e86c:	adds	r4, r4, r4
   1e870:	adc	r5, r5, r5
   1e874:	subs	r6, r6, #1
   1e878:	bne	1e860 <__assert_fail@plt+0xd564>
   1e87c:	lsr	r6, r4, ip
   1e880:	lsr	r7, r5, ip
   1e884:	orr	r6, r6, r5, lsl r8
   1e888:	adds	r2, r0, r4
   1e88c:	orr	r6, r6, r5, lsr lr
   1e890:	adc	r3, r1, r5
   1e894:	lsl	r1, r7, ip
   1e898:	orr	r1, r1, r6, lsl lr
   1e89c:	lsl	r0, r6, ip
   1e8a0:	orr	r1, r1, r6, lsr r8
   1e8a4:	subs	r0, r2, r0
   1e8a8:	mov	r4, r6
   1e8ac:	mov	r5, r7
   1e8b0:	sbc	r1, r3, r1
   1e8b4:	cmp	r9, #0
   1e8b8:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1e8bc:	strd	r4, [r9]
   1e8c0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e8c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e8c8:	mov	r7, r0
   1e8cc:	ldr	r6, [pc, #72]	; 1e91c <__assert_fail@plt+0xd620>
   1e8d0:	ldr	r5, [pc, #72]	; 1e920 <__assert_fail@plt+0xd624>
   1e8d4:	add	r6, pc, r6
   1e8d8:	add	r5, pc, r5
   1e8dc:	sub	r6, r6, r5
   1e8e0:	mov	r8, r1
   1e8e4:	mov	r9, r2
   1e8e8:	bl	10f94 <fstatfs64@plt-0x20>
   1e8ec:	asrs	r6, r6, #2
   1e8f0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e8f4:	mov	r4, #0
   1e8f8:	add	r4, r4, #1
   1e8fc:	ldr	r3, [r5], #4
   1e900:	mov	r2, r9
   1e904:	mov	r1, r8
   1e908:	mov	r0, r7
   1e90c:	blx	r3
   1e910:	cmp	r6, r4
   1e914:	bne	1e8f8 <__assert_fail@plt+0xd5fc>
   1e918:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e91c:	andeq	r1, r1, r4, lsr r6
   1e920:	andeq	r1, r1, ip, lsr #12
   1e924:	bx	lr
   1e928:	ldr	r3, [pc, #12]	; 1e93c <__assert_fail@plt+0xd640>
   1e92c:	mov	r1, #0
   1e930:	add	r3, pc, r3
   1e934:	ldr	r2, [r3]
   1e938:	b	111d0 <__cxa_atexit@plt>
   1e93c:	strdeq	r1, [r1], -r8
   1e940:	mov	r2, r1
   1e944:	mov	r1, r0
   1e948:	mov	r0, #3
   1e94c:	b	1129c <__xstat64@plt>
   1e950:	mov	r2, r1
   1e954:	mov	r1, r0
   1e958:	mov	r0, #3
   1e95c:	b	110b0 <__fxstat64@plt>
   1e960:	mov	r2, r1
   1e964:	mov	r1, r0
   1e968:	mov	r0, #3
   1e96c:	b	112cc <__lxstat64@plt>
   1e970:	push	{lr}		; (str lr, [sp, #-4]!)
   1e974:	sub	sp, sp, #12
   1e978:	str	r3, [sp]
   1e97c:	mov	r3, r2
   1e980:	mov	r2, r1
   1e984:	mov	r1, r0
   1e988:	mov	r0, #3
   1e98c:	bl	11098 <__fxstatat64@plt>
   1e990:	add	sp, sp, #12
   1e994:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

0001e998 <.fini>:
   1e998:	push	{r3, lr}
   1e99c:	pop	{r3, pc}
