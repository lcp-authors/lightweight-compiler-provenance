
../repos/coreutils/src/tsort:     file format elf32-littlearm


Disassembly of section .init:

00010d5c <.init>:
   10d5c:	push	{r3, lr}
   10d60:	bl	11004 <__assert_fail@plt+0x48>
   10d64:	pop	{r3, pc}

Disassembly of section .plt:

00010d68 <calloc@plt-0x14>:
   10d68:	push	{lr}		; (str lr, [sp, #-4]!)
   10d6c:	ldr	lr, [pc, #4]	; 10d78 <calloc@plt-0x4>
   10d70:	add	lr, pc, lr
   10d74:	ldr	pc, [lr, #8]!
   10d78:	andeq	r6, r1, r8, lsl #5

00010d7c <calloc@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #90112	; 0x16000
   10d84:	ldr	pc, [ip, #648]!	; 0x288

00010d88 <fputs_unlocked@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #90112	; 0x16000
   10d90:	ldr	pc, [ip, #640]!	; 0x280

00010d94 <strcmp@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #90112	; 0x16000
   10d9c:	ldr	pc, [ip, #632]!	; 0x278

00010da0 <posix_fadvise64@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #90112	; 0x16000
   10da8:	ldr	pc, [ip, #624]!	; 0x270

00010dac <fflush@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #90112	; 0x16000
   10db4:	ldr	pc, [ip, #616]!	; 0x268

00010db8 <free@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #90112	; 0x16000
   10dc0:	ldr	pc, [ip, #608]!	; 0x260

00010dc4 <_exit@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #90112	; 0x16000
   10dcc:	ldr	pc, [ip, #600]!	; 0x258

00010dd0 <memcpy@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #90112	; 0x16000
   10dd8:	ldr	pc, [ip, #592]!	; 0x250

00010ddc <mbsinit@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #90112	; 0x16000
   10de4:	ldr	pc, [ip, #584]!	; 0x248

00010de8 <memcmp@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #90112	; 0x16000
   10df0:	ldr	pc, [ip, #576]!	; 0x240

00010df4 <dcgettext@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #90112	; 0x16000
   10dfc:	ldr	pc, [ip, #568]!	; 0x238

00010e00 <dup2@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #90112	; 0x16000
   10e08:	ldr	pc, [ip, #560]!	; 0x230

00010e0c <realloc@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #90112	; 0x16000
   10e14:	ldr	pc, [ip, #552]!	; 0x228

00010e18 <textdomain@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #90112	; 0x16000
   10e20:	ldr	pc, [ip, #544]!	; 0x220

00010e24 <iswprint@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #90112	; 0x16000
   10e2c:	ldr	pc, [ip, #536]!	; 0x218

00010e30 <fwrite@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #90112	; 0x16000
   10e38:	ldr	pc, [ip, #528]!	; 0x210

00010e3c <lseek64@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #90112	; 0x16000
   10e44:	ldr	pc, [ip, #520]!	; 0x208

00010e48 <__ctype_get_mb_cur_max@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #90112	; 0x16000
   10e50:	ldr	pc, [ip, #512]!	; 0x200

00010e54 <__fpending@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #90112	; 0x16000
   10e5c:	ldr	pc, [ip, #504]!	; 0x1f8

00010e60 <mbrtowc@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #90112	; 0x16000
   10e68:	ldr	pc, [ip, #496]!	; 0x1f0

00010e6c <error@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #90112	; 0x16000
   10e74:	ldr	pc, [ip, #488]!	; 0x1e8

00010e78 <open64@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #90112	; 0x16000
   10e80:	ldr	pc, [ip, #480]!	; 0x1e0

00010e84 <puts@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #90112	; 0x16000
   10e8c:	ldr	pc, [ip, #472]!	; 0x1d8

00010e90 <malloc@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #90112	; 0x16000
   10e98:	ldr	pc, [ip, #464]!	; 0x1d0

00010e9c <__libc_start_main@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #90112	; 0x16000
   10ea4:	ldr	pc, [ip, #456]!	; 0x1c8

00010ea8 <__freading@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #90112	; 0x16000
   10eb0:	ldr	pc, [ip, #448]!	; 0x1c0

00010eb4 <__gmon_start__@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #90112	; 0x16000
   10ebc:	ldr	pc, [ip, #440]!	; 0x1b8

00010ec0 <freopen64@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #90112	; 0x16000
   10ec8:	ldr	pc, [ip, #432]!	; 0x1b0

00010ecc <getopt_long@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #90112	; 0x16000
   10ed4:	ldr	pc, [ip, #424]!	; 0x1a8

00010ed8 <__ctype_b_loc@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #90112	; 0x16000
   10ee0:	ldr	pc, [ip, #416]!	; 0x1a0

00010ee4 <exit@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #90112	; 0x16000
   10eec:	ldr	pc, [ip, #408]!	; 0x198

00010ef0 <strlen@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #90112	; 0x16000
   10ef8:	ldr	pc, [ip, #400]!	; 0x190

00010efc <__errno_location@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #90112	; 0x16000
   10f04:	ldr	pc, [ip, #392]!	; 0x188

00010f08 <__cxa_atexit@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #90112	; 0x16000
   10f10:	ldr	pc, [ip, #384]!	; 0x180

00010f14 <memset@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #90112	; 0x16000
   10f1c:	ldr	pc, [ip, #376]!	; 0x178

00010f20 <__printf_chk@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #90112	; 0x16000
   10f28:	ldr	pc, [ip, #368]!	; 0x170

00010f2c <fileno@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #90112	; 0x16000
   10f34:	ldr	pc, [ip, #360]!	; 0x168

00010f38 <__fprintf_chk@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #90112	; 0x16000
   10f40:	ldr	pc, [ip, #352]!	; 0x160

00010f44 <fclose@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #90112	; 0x16000
   10f4c:	ldr	pc, [ip, #344]!	; 0x158

00010f50 <fseeko64@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #90112	; 0x16000
   10f58:	ldr	pc, [ip, #336]!	; 0x150

00010f5c <__uflow@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #90112	; 0x16000
   10f64:	ldr	pc, [ip, #328]!	; 0x148

00010f68 <setlocale@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #90112	; 0x16000
   10f70:	ldr	pc, [ip, #320]!	; 0x140

00010f74 <strrchr@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #90112	; 0x16000
   10f7c:	ldr	pc, [ip, #312]!	; 0x138

00010f80 <nl_langinfo@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #90112	; 0x16000
   10f88:	ldr	pc, [ip, #304]!	; 0x130

00010f8c <bindtextdomain@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #90112	; 0x16000
   10f94:	ldr	pc, [ip, #296]!	; 0x128

00010f98 <strncmp@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #90112	; 0x16000
   10fa0:	ldr	pc, [ip, #288]!	; 0x120

00010fa4 <abort@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #90112	; 0x16000
   10fac:	ldr	pc, [ip, #280]!	; 0x118

00010fb0 <close@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #90112	; 0x16000
   10fb8:	ldr	pc, [ip, #272]!	; 0x110

00010fbc <__assert_fail@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #90112	; 0x16000
   10fc4:	ldr	pc, [ip, #264]!	; 0x108

Disassembly of section .text:

00010fc8 <.text>:
   10fc8:	mov	fp, #0
   10fcc:	mov	lr, #0
   10fd0:	pop	{r1}		; (ldr r1, [sp], #4)
   10fd4:	mov	r2, sp
   10fd8:	push	{r2}		; (str r2, [sp, #-4]!)
   10fdc:	push	{r0}		; (str r0, [sp, #-4]!)
   10fe0:	ldr	ip, [pc, #16]	; 10ff8 <__assert_fail@plt+0x3c>
   10fe4:	push	{ip}		; (str ip, [sp, #-4]!)
   10fe8:	ldr	r0, [pc, #12]	; 10ffc <__assert_fail@plt+0x40>
   10fec:	ldr	r3, [pc, #12]	; 11000 <__assert_fail@plt+0x44>
   10ff0:	bl	10e9c <__libc_start_main@plt>
   10ff4:	bl	10fa4 <abort@plt>
   10ff8:	andeq	r5, r1, ip, asr r7
   10ffc:	andeq	r1, r1, r8, lsl r3
   11000:	strdeq	r5, [r1], -ip
   11004:	ldr	r3, [pc, #20]	; 11020 <__assert_fail@plt+0x64>
   11008:	ldr	r2, [pc, #20]	; 11024 <__assert_fail@plt+0x68>
   1100c:	add	r3, pc, r3
   11010:	ldr	r2, [r3, r2]
   11014:	cmp	r2, #0
   11018:	bxeq	lr
   1101c:	b	10eb4 <__gmon_start__@plt>
   11020:	andeq	r5, r1, ip, ror #31
   11024:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11028:	ldr	r0, [pc, #24]	; 11048 <__assert_fail@plt+0x8c>
   1102c:	ldr	r3, [pc, #24]	; 1104c <__assert_fail@plt+0x90>
   11030:	cmp	r3, r0
   11034:	bxeq	lr
   11038:	ldr	r3, [pc, #16]	; 11050 <__assert_fail@plt+0x94>
   1103c:	cmp	r3, #0
   11040:	bxeq	lr
   11044:	bx	r3
   11048:	andeq	r7, r2, r8, lsr #2
   1104c:	andeq	r7, r2, r8, lsr #2
   11050:	andeq	r0, r0, r0
   11054:	ldr	r0, [pc, #36]	; 11080 <__assert_fail@plt+0xc4>
   11058:	ldr	r1, [pc, #36]	; 11084 <__assert_fail@plt+0xc8>
   1105c:	sub	r1, r1, r0
   11060:	asr	r1, r1, #2
   11064:	add	r1, r1, r1, lsr #31
   11068:	asrs	r1, r1, #1
   1106c:	bxeq	lr
   11070:	ldr	r3, [pc, #16]	; 11088 <__assert_fail@plt+0xcc>
   11074:	cmp	r3, #0
   11078:	bxeq	lr
   1107c:	bx	r3
   11080:	andeq	r7, r2, r8, lsr #2
   11084:	andeq	r7, r2, r8, lsr #2
   11088:	andeq	r0, r0, r0
   1108c:	push	{r4, lr}
   11090:	ldr	r4, [pc, #24]	; 110b0 <__assert_fail@plt+0xf4>
   11094:	ldrb	r3, [r4]
   11098:	cmp	r3, #0
   1109c:	popne	{r4, pc}
   110a0:	bl	11028 <__assert_fail@plt+0x6c>
   110a4:	mov	r3, #1
   110a8:	strb	r3, [r4]
   110ac:	pop	{r4, pc}
   110b0:	andeq	r7, r2, ip, asr #2
   110b4:	b	11054 <__assert_fail@plt+0x98>
   110b8:	push	{fp, lr}
   110bc:	mov	fp, sp
   110c0:	sub	sp, sp, #56	; 0x38
   110c4:	mov	r4, r0
   110c8:	cmp	r0, #0
   110cc:	bne	112d4 <__assert_fail@plt+0x318>
   110d0:	movw	r1, #22443	; 0x57ab
   110d4:	mov	r0, #0
   110d8:	mov	r2, #5
   110dc:	movt	r1, #1
   110e0:	bl	10df4 <dcgettext@plt>
   110e4:	mov	r1, r0
   110e8:	movw	r0, #29032	; 0x7168
   110ec:	movt	r0, #2
   110f0:	ldr	r2, [r0]
   110f4:	mov	r0, #1
   110f8:	bl	10f20 <__printf_chk@plt>
   110fc:	movw	r1, #22717	; 0x58bd
   11100:	mov	r0, #0
   11104:	mov	r2, #5
   11108:	movt	r1, #1
   1110c:	bl	10df4 <dcgettext@plt>
   11110:	movw	r7, #28996	; 0x7144
   11114:	movt	r7, #2
   11118:	ldr	r1, [r7]
   1111c:	bl	10d88 <fputs_unlocked@plt>
   11120:	movw	r1, #23086	; 0x5a2e
   11124:	mov	r0, #0
   11128:	mov	r2, #5
   1112c:	movt	r1, #1
   11130:	bl	10df4 <dcgettext@plt>
   11134:	ldr	r1, [r7]
   11138:	bl	10d88 <fputs_unlocked@plt>
   1113c:	movw	r1, #22543	; 0x580f
   11140:	mov	r0, #0
   11144:	mov	r2, #5
   11148:	movt	r1, #1
   1114c:	bl	10df4 <dcgettext@plt>
   11150:	ldr	r1, [r7]
   11154:	bl	10d88 <fputs_unlocked@plt>
   11158:	movw	r1, #22588	; 0x583c
   1115c:	mov	r0, #0
   11160:	mov	r2, #5
   11164:	movt	r1, #1
   11168:	bl	10df4 <dcgettext@plt>
   1116c:	ldr	r1, [r7]
   11170:	bl	10d88 <fputs_unlocked@plt>
   11174:	movw	r0, #23384	; 0x5b58
   11178:	mov	r2, #48	; 0x30
   1117c:	mov	r6, sp
   11180:	movw	r5, #22642	; 0x5872
   11184:	movt	r0, #1
   11188:	movt	r5, #1
   1118c:	add	r1, r0, #32
   11190:	add	r3, r0, #16
   11194:	vld1.64	{d18-d19}, [r0], r2
   11198:	vld1.64	{d16-d17}, [r1]
   1119c:	vld1.64	{d20-d21}, [r3]
   111a0:	add	r1, r6, #32
   111a4:	vldr	d22, [r0]
   111a8:	add	r0, r6, #16
   111ac:	vst1.64	{d16-d17}, [r1]
   111b0:	movw	r1, #22773	; 0x58f5
   111b4:	vst1.64	{d20-d21}, [r0]
   111b8:	mov	r0, r6
   111bc:	vst1.64	{d18-d19}, [r0], r2
   111c0:	movt	r1, #1
   111c4:	vstr	d22, [r0]
   111c8:	mov	r0, r5
   111cc:	bl	10d94 <strcmp@plt>
   111d0:	cmp	r0, #0
   111d4:	ldrne	r1, [r6, #8]!
   111d8:	cmpne	r1, #0
   111dc:	bne	111c8 <__assert_fail@plt+0x20c>
   111e0:	ldr	r6, [r6, #4]
   111e4:	movw	r1, #22868	; 0x5954
   111e8:	mov	r0, #0
   111ec:	mov	r2, #5
   111f0:	movt	r1, #1
   111f4:	bl	10df4 <dcgettext@plt>
   111f8:	movw	r2, #22672	; 0x5890
   111fc:	movw	r3, #22891	; 0x596b
   11200:	mov	r1, r0
   11204:	mov	r0, #1
   11208:	movt	r2, #1
   1120c:	movt	r3, #1
   11210:	bl	10f20 <__printf_chk@plt>
   11214:	cmp	r6, #0
   11218:	mov	r0, #5
   1121c:	mov	r1, #0
   11220:	moveq	r6, r5
   11224:	bl	10f68 <setlocale@plt>
   11228:	cmp	r0, #0
   1122c:	beq	11264 <__assert_fail@plt+0x2a8>
   11230:	movw	r1, #22931	; 0x5993
   11234:	mov	r2, #3
   11238:	movt	r1, #1
   1123c:	bl	10f98 <strncmp@plt>
   11240:	cmp	r0, #0
   11244:	beq	11264 <__assert_fail@plt+0x2a8>
   11248:	movw	r1, #22935	; 0x5997
   1124c:	mov	r0, #0
   11250:	mov	r2, #5
   11254:	movt	r1, #1
   11258:	bl	10df4 <dcgettext@plt>
   1125c:	ldr	r1, [r7]
   11260:	bl	10d88 <fputs_unlocked@plt>
   11264:	movw	r1, #23006	; 0x59de
   11268:	mov	r0, #0
   1126c:	mov	r2, #5
   11270:	movt	r1, #1
   11274:	bl	10df4 <dcgettext@plt>
   11278:	movw	r2, #22891	; 0x596b
   1127c:	mov	r1, r0
   11280:	mov	r0, #1
   11284:	mov	r3, r5
   11288:	movt	r2, #1
   1128c:	bl	10f20 <__printf_chk@plt>
   11290:	movw	r1, #23033	; 0x59f9
   11294:	mov	r0, #0
   11298:	mov	r2, #5
   1129c:	movt	r1, #1
   112a0:	bl	10df4 <dcgettext@plt>
   112a4:	movw	r3, #23087	; 0x5a2f
   112a8:	mov	r1, r0
   112ac:	movw	r0, #22801	; 0x5911
   112b0:	cmp	r6, r5
   112b4:	mov	r2, r6
   112b8:	movt	r0, #1
   112bc:	movt	r3, #1
   112c0:	moveq	r3, r0
   112c4:	mov	r0, #1
   112c8:	bl	10f20 <__printf_chk@plt>
   112cc:	mov	r0, r4
   112d0:	bl	10ee4 <exit@plt>
   112d4:	movw	r0, #28984	; 0x7138
   112d8:	movw	r1, #22404	; 0x5784
   112dc:	mov	r2, #5
   112e0:	movt	r0, #2
   112e4:	movt	r1, #1
   112e8:	ldr	r5, [r0]
   112ec:	mov	r0, #0
   112f0:	bl	10df4 <dcgettext@plt>
   112f4:	mov	r2, r0
   112f8:	movw	r0, #29032	; 0x7168
   112fc:	mov	r1, #1
   11300:	movt	r0, #2
   11304:	ldr	r3, [r0]
   11308:	mov	r0, r5
   1130c:	bl	10f38 <__fprintf_chk@plt>
   11310:	mov	r0, r4
   11314:	bl	10ee4 <exit@plt>
   11318:	push	{fp, lr}
   1131c:	mov	fp, sp
   11320:	sub	sp, sp, #24
   11324:	mov	r5, r0
   11328:	ldr	r0, [r1]
   1132c:	mov	r4, r1
   11330:	bl	124bc <__assert_fail@plt+0x1500>
   11334:	movw	r1, #23087	; 0x5a2f
   11338:	mov	r0, #6
   1133c:	movt	r1, #1
   11340:	bl	10f68 <setlocale@plt>
   11344:	movw	r6, #22676	; 0x5894
   11348:	movw	r1, #22648	; 0x5878
   1134c:	movt	r6, #1
   11350:	movt	r1, #1
   11354:	mov	r0, r6
   11358:	bl	10f8c <bindtextdomain@plt>
   1135c:	mov	r0, r6
   11360:	bl	10e18 <textdomain@plt>
   11364:	movw	r0, #7684	; 0x1e04
   11368:	movt	r0, #1
   1136c:	bl	15760 <__assert_fail@plt+0x47a4>
   11370:	movw	r0, #28896	; 0x70e0
   11374:	movw	r2, #22686	; 0x589e
   11378:	movw	r3, #4280	; 0x10b8
   1137c:	mov	r6, #1
   11380:	mov	r1, #0
   11384:	movt	r0, #2
   11388:	movt	r2, #1
   1138c:	movt	r3, #1
   11390:	ldr	r0, [r0]
   11394:	stm	sp, {r0, r6}
   11398:	str	r3, [sp, #8]
   1139c:	movw	r3, #22672	; 0x5890
   113a0:	str	r2, [sp, #12]
   113a4:	movw	r2, #22642	; 0x5872
   113a8:	str	r1, [sp, #16]
   113ac:	mov	r0, r5
   113b0:	mov	r1, r4
   113b4:	movt	r2, #1
   113b8:	movt	r3, #1
   113bc:	bl	123f4 <__assert_fail@plt+0x1438>
   113c0:	movw	r6, #28976	; 0x7130
   113c4:	movt	r6, #2
   113c8:	ldr	r0, [r6]
   113cc:	sub	r1, r5, r0
   113d0:	cmp	r1, #2
   113d4:	blt	1141c <__assert_fail@plt+0x460>
   113d8:	movw	r1, #22700	; 0x58ac
   113dc:	mov	r0, #0
   113e0:	mov	r2, #5
   113e4:	movt	r1, #1
   113e8:	bl	10df4 <dcgettext@plt>
   113ec:	mov	r5, r0
   113f0:	ldr	r0, [r6]
   113f4:	add	r0, r4, r0, lsl #2
   113f8:	ldr	r0, [r0, #4]
   113fc:	bl	14438 <__assert_fail@plt+0x347c>
   11400:	mov	r3, r0
   11404:	mov	r0, #0
   11408:	mov	r1, #0
   1140c:	mov	r2, r5
   11410:	bl	10e6c <error@plt>
   11414:	mov	r0, #1
   11418:	bl	110b8 <__assert_fail@plt+0xfc>
   1141c:	cmp	r0, r5
   11420:	bne	11430 <__assert_fail@plt+0x474>
   11424:	movw	r0, #23614	; 0x5c3e
   11428:	movt	r0, #1
   1142c:	bl	11438 <__assert_fail@plt+0x47c>
   11430:	ldr	r0, [r4, r0, lsl #2]
   11434:	bl	11438 <__assert_fail@plt+0x47c>
   11438:	push	{fp, lr}
   1143c:	mov	fp, sp
   11440:	sub	sp, sp, #40	; 0x28
   11444:	movw	r1, #23614	; 0x5c3e
   11448:	mov	r9, r0
   1144c:	movt	r1, #1
   11450:	bl	10d94 <strcmp@plt>
   11454:	mov	r4, r0
   11458:	mov	r0, #28
   1145c:	bl	151f0 <__assert_fail@plt+0x4234>
   11460:	mov	sl, r0
   11464:	cmp	r4, #0
   11468:	str	r4, [sp, #20]
   1146c:	beq	11494 <__assert_fail@plt+0x4d8>
   11470:	movw	r0, #28992	; 0x7140
   11474:	movw	r1, #23465	; 0x5ba9
   11478:	movt	r0, #2
   1147c:	movt	r1, #1
   11480:	ldr	r2, [r0]
   11484:	mov	r0, r9
   11488:	bl	12034 <__assert_fail@plt+0x1078>
   1148c:	cmp	r0, #0
   11490:	beq	11b3c <__assert_fail@plt+0xb80>
   11494:	movw	r4, #28992	; 0x7140
   11498:	mov	r1, #2
   1149c:	movt	r4, #2
   114a0:	ldr	r0, [r4]
   114a4:	bl	11ef4 <__assert_fail@plt+0xf38>
   114a8:	sub	r6, fp, #8
   114ac:	mov	r0, r6
   114b0:	bl	14450 <__assert_fail@plt+0x3494>
   114b4:	movw	r5, #23084	; 0x5a2c
   114b8:	movt	r5, #1
   114bc:	b	114e4 <__assert_fail@plt+0x528>
   114c0:	ldr	r0, [r8, #16]
   114c4:	add	r0, r0, #1
   114c8:	str	r0, [r8, #16]
   114cc:	mov	r0, #8
   114d0:	bl	14df8 <__assert_fail@plt+0x3e3c>
   114d4:	str	r8, [r0]
   114d8:	ldr	r1, [r7, #24]
   114dc:	str	r1, [r0, #4]
   114e0:	str	r0, [r7, #24]
   114e4:	mov	r0, #0
   114e8:	b	11734 <__assert_fail@plt+0x778>
   114ec:	mov	r0, #28
   114f0:	str	r9, [sp, #8]
   114f4:	add	r9, r5, #8
   114f8:	bl	151f0 <__assert_fail@plt+0x4234>
   114fc:	mov	r8, r0
   11500:	mov	r0, r7
   11504:	bl	15318 <__assert_fail@plt+0x435c>
   11508:	cmp	r4, #0
   1150c:	str	r0, [r8]
   11510:	addlt	r9, r5, #4
   11514:	cmp	sl, #0
   11518:	str	r8, [r9]
   1151c:	ldrne	r1, [sl]
   11520:	cmpne	r1, #0
   11524:	beq	11afc <__assert_fail@plt+0xb40>
   11528:	mov	r0, r7
   1152c:	bl	10d94 <strcmp@plt>
   11530:	cmp	r0, #0
   11534:	beq	11afc <__assert_fail@plt+0xb40>
   11538:	mov	r4, r0
   1153c:	mov	r0, #1
   11540:	ldr	r9, [sp, #8]
   11544:	mvnlt	r0, #0
   11548:	str	r0, [sp, #16]
   1154c:	mov	r0, #8
   11550:	movwlt	r0, #4
   11554:	ldr	r0, [sl, r0]
   11558:	cmp	r0, r8
   1155c:	str	r0, [sp, #12]
   11560:	beq	115c4 <__assert_fail@plt+0x608>
   11564:	ldr	r5, [sp, #12]
   11568:	cmp	r5, #0
   1156c:	ldrne	r1, [r5]
   11570:	cmpne	r1, #0
   11574:	beq	11b1c <__assert_fail@plt+0xb60>
   11578:	mov	r0, r7
   1157c:	bl	10d94 <strcmp@plt>
   11580:	cmp	r0, #0
   11584:	beq	11b1c <__assert_fail@plt+0xb60>
   11588:	cmn	r0, #1
   1158c:	bgt	115ac <__assert_fail@plt+0x5f0>
   11590:	mov	r0, #255	; 0xff
   11594:	strb	r0, [r5, #12]
   11598:	add	r0, r5, #4
   1159c:	ldr	r5, [r0]
   115a0:	cmp	r5, r8
   115a4:	bne	11568 <__assert_fail@plt+0x5ac>
   115a8:	b	115c4 <__assert_fail@plt+0x608>
   115ac:	mov	r0, #1
   115b0:	strb	r0, [r5, #12]
   115b4:	add	r0, r5, #8
   115b8:	ldr	r5, [r0]
   115bc:	cmp	r5, r8
   115c0:	bne	11568 <__assert_fail@plt+0x5ac>
   115c4:	mov	r0, sl
   115c8:	ldr	r3, [sp, #16]
   115cc:	ldrsb	r2, [r0, #12]!
   115d0:	uxtb	r1, r2
   115d4:	cmp	r1, #0
   115d8:	cmnne	r2, r3
   115dc:	bne	115ec <__assert_fail@plt+0x630>
   115e0:	add	r1, r1, r3
   115e4:	strb	r1, [r0]
   115e8:	b	11804 <__assert_fail@plt+0x848>
   115ec:	ldr	r5, [sp, #12]
   115f0:	ldr	r2, [sp, #16]
   115f4:	add	r3, sl, #8
   115f8:	add	lr, sl, #4
   115fc:	mov	r1, r5
   11600:	ldrsb	r7, [r1, #12]!
   11604:	cmp	r2, r7
   11608:	bne	11650 <__assert_fail@plt+0x694>
   1160c:	cmp	r4, #0
   11610:	add	r1, r5, #4
   11614:	ldr	r7, [fp, #-12]
   11618:	mov	r2, r0
   1161c:	addlt	r1, r5, #8
   11620:	movlt	r3, lr
   11624:	cmp	r4, #0
   11628:	mov	r4, #0
   1162c:	ldr	r1, [r1]
   11630:	str	r1, [r3]
   11634:	mov	r1, #4
   11638:	movwlt	r1, #8
   1163c:	str	sl, [r5, r1]
   11640:	strb	r4, [r5, #12]
   11644:	movw	r5, #23084	; 0x5a2c
   11648:	movt	r5, #1
   1164c:	b	11700 <__assert_fail@plt+0x744>
   11650:	cmn	r4, #1
   11654:	mov	r4, #0
   11658:	bgt	11674 <__assert_fail@plt+0x6b8>
   1165c:	ldr	r3, [r5, #8]
   11660:	ldr	r7, [r3, #4]
   11664:	str	r7, [r5, #8]
   11668:	str	r5, [r3, #4]
   1166c:	add	r7, r3, #8
   11670:	b	11694 <__assert_fail@plt+0x6d8>
   11674:	mov	r7, r5
   11678:	ldr	r5, [r5, #4]
   1167c:	mov	lr, r3
   11680:	ldr	r2, [r5, #8]
   11684:	mov	r3, r5
   11688:	str	r2, [r7, #4]
   1168c:	str	r7, [r5, #8]
   11690:	add	r7, r5, #4
   11694:	ldr	ip, [sp, #16]
   11698:	ldr	r5, [r7]
   1169c:	str	r3, [sp, #12]
   116a0:	rsb	r2, ip, #0
   116a4:	str	r5, [lr]
   116a8:	str	sl, [r7]
   116ac:	strb	r4, [sl, #12]
   116b0:	strb	r4, [r1]
   116b4:	str	r2, [sp, #4]
   116b8:	mov	r2, r3
   116bc:	ldrsb	r7, [r2, #12]!
   116c0:	cmp	ip, r7
   116c4:	bne	116e4 <__assert_fail@plt+0x728>
   116c8:	ldr	ip, [sp, #4]
   116cc:	ldr	r7, [fp, #-12]
   116d0:	movw	r5, #23084	; 0x5a2c
   116d4:	mov	r1, r0
   116d8:	movt	r5, #1
   116dc:	strb	ip, [r1]
   116e0:	b	11700 <__assert_fail@plt+0x744>
   116e4:	ldr	r0, [sp, #4]
   116e8:	ldr	ip, [sp, #16]
   116ec:	movw	r5, #23084	; 0x5a2c
   116f0:	movt	r5, #1
   116f4:	cmp	r7, r0
   116f8:	ldr	r7, [fp, #-12]
   116fc:	strbeq	ip, [r1]
   11700:	strb	r4, [r2]
   11704:	movw	r4, #28992	; 0x7140
   11708:	ldr	r0, [r6, #8]
   1170c:	movt	r4, #2
   11710:	cmp	sl, r0
   11714:	ldr	r0, [sp, #12]
   11718:	ldr	sl, [fp, #-16]
   1171c:	strne	r0, [r6, #4]
   11720:	streq	r0, [r6, #8]
   11724:	sub	r6, fp, #8
   11728:	cmp	r7, #0
   1172c:	mov	r0, r8
   11730:	bne	1182c <__assert_fail@plt+0x870>
   11734:	mov	r7, r0
   11738:	ldr	r0, [r4]
   1173c:	mov	r1, r5
   11740:	mov	r2, #3
   11744:	mov	r3, r6
   11748:	bl	14460 <__assert_fail@plt+0x34a4>
   1174c:	cmn	r0, #1
   11750:	beq	11848 <__assert_fail@plt+0x88c>
   11754:	cmp	r0, #0
   11758:	str	r7, [fp, #-12]
   1175c:	beq	11b6c <__assert_fail@plt+0xbb0>
   11760:	ldr	r5, [sl, #8]
   11764:	ldr	r7, [fp, #-4]
   11768:	cmp	r5, #0
   1176c:	beq	117d8 <__assert_fail@plt+0x81c>
   11770:	cmp	r7, #0
   11774:	str	sl, [fp, #-16]
   11778:	ldrne	r1, [r5]
   1177c:	cmpne	r1, #0
   11780:	beq	11adc <__assert_fail@plt+0xb20>
   11784:	ldr	r6, [fp, #-16]
   11788:	mov	sl, r5
   1178c:	mov	r0, r7
   11790:	bl	10d94 <strcmp@plt>
   11794:	cmp	r0, #0
   11798:	beq	11800 <__assert_fail@plt+0x844>
   1179c:	mov	r4, r0
   117a0:	mov	r0, #8
   117a4:	movwlt	r0, #4
   117a8:	ldr	r0, [r5, r0]
   117ac:	cmp	r0, #0
   117b0:	beq	114ec <__assert_fail@plt+0x530>
   117b4:	ldrb	r1, [r0, #12]
   117b8:	cmp	r1, #0
   117bc:	ldr	r1, [r0]
   117c0:	movne	r6, r5
   117c4:	movne	sl, r0
   117c8:	mov	r5, r0
   117cc:	cmp	r1, #0
   117d0:	bne	1178c <__assert_fail@plt+0x7d0>
   117d4:	b	11adc <__assert_fail@plt+0xb20>
   117d8:	mov	r0, #28
   117dc:	bl	151f0 <__assert_fail@plt+0x4234>
   117e0:	mov	r8, r0
   117e4:	cmp	r7, #0
   117e8:	beq	117f8 <__assert_fail@plt+0x83c>
   117ec:	mov	r0, r7
   117f0:	bl	15318 <__assert_fail@plt+0x435c>
   117f4:	str	r0, [r8]
   117f8:	str	r8, [sl, #8]
   117fc:	b	11814 <__assert_fail@plt+0x858>
   11800:	mov	r8, r5
   11804:	ldr	sl, [fp, #-16]
   11808:	movw	r4, #28992	; 0x7140
   1180c:	sub	r6, fp, #8
   11810:	movt	r4, #2
   11814:	ldr	r7, [fp, #-12]
   11818:	movw	r5, #23084	; 0x5a2c
   1181c:	movt	r5, #1
   11820:	cmp	r7, #0
   11824:	mov	r0, r8
   11828:	beq	11734 <__assert_fail@plt+0x778>
   1182c:	ldr	r1, [r8]
   11830:	ldr	r0, [r7]
   11834:	bl	10d94 <strcmp@plt>
   11838:	cmp	r0, #0
   1183c:	mov	r0, #0
   11840:	beq	11734 <__assert_fail@plt+0x778>
   11844:	b	114c0 <__assert_fail@plt+0x504>
   11848:	cmp	r7, #0
   1184c:	bne	11b8c <__assert_fail@plt+0xbd0>
   11850:	ldr	r5, [sl, #8]
   11854:	cmp	r5, #0
   11858:	beq	1186c <__assert_fail@plt+0x8b0>
   1185c:	movw	r1, #7120	; 0x1bd0
   11860:	mov	r0, r5
   11864:	movt	r1, #1
   11868:	bl	11d50 <__assert_fail@plt+0xd94>
   1186c:	movw	r7, #29008	; 0x7150
   11870:	movt	r7, #2
   11874:	ldr	r0, [r7]
   11878:	cmp	r0, #0
   1187c:	beq	11bc8 <__assert_fail@plt+0xc0c>
   11880:	cmp	r5, #0
   11884:	beq	119a8 <__assert_fail@plt+0x9ec>
   11888:	movw	r4, #7224	; 0x1c38
   1188c:	mov	r8, #1
   11890:	mov	r6, #1
   11894:	movt	r4, #1
   11898:	movw	r1, #7148	; 0x1bec
   1189c:	mov	r0, r5
   118a0:	mov	sl, r9
   118a4:	movt	r1, #1
   118a8:	bl	11d50 <__assert_fail@plt+0xd94>
   118ac:	ldr	r1, [r7, #4]
   118b0:	cmp	r1, #0
   118b4:	bne	11900 <__assert_fail@plt+0x944>
   118b8:	ldr	r0, [r7]
   118bc:	cmp	r0, #0
   118c0:	mov	r9, sl
   118c4:	bne	11940 <__assert_fail@plt+0x984>
   118c8:	b	11a8c <__assert_fail@plt+0xad0>
   118cc:	ldr	r9, [r9, #4]
   118d0:	cmp	r9, #0
   118d4:	beq	11924 <__assert_fail@plt+0x968>
   118d8:	ldr	r2, [r9]
   118dc:	ldr	r3, [r2, #16]
   118e0:	subs	r3, r3, #1
   118e4:	str	r3, [r2, #16]
   118e8:	bne	118cc <__assert_fail@plt+0x910>
   118ec:	ldr	r3, [r7, #8]
   118f0:	str	r2, [r3, #20]
   118f4:	ldr	r2, [r9]
   118f8:	str	r2, [r7, #8]
   118fc:	b	118cc <__assert_fail@plt+0x910>
   11900:	ldr	r0, [r1]
   11904:	ldr	r9, [r1, #24]
   11908:	bl	10e84 <puts@plt>
   1190c:	ldm	r7, {r0, r1}
   11910:	sub	r0, r0, #1
   11914:	strb	r8, [r1, #13]
   11918:	str	r0, [r7]
   1191c:	cmp	r9, #0
   11920:	bne	118d8 <__assert_fail@plt+0x91c>
   11924:	ldr	r1, [r1, #20]
   11928:	cmp	r1, #0
   1192c:	str	r1, [r7, #4]
   11930:	bne	11900 <__assert_fail@plt+0x944>
   11934:	cmp	r0, #0
   11938:	mov	r9, sl
   1193c:	beq	11a8c <__assert_fail@plt+0xad0>
   11940:	movw	r1, #23177	; 0x5a89
   11944:	mov	r0, #0
   11948:	mov	r2, #5
   1194c:	movt	r1, #1
   11950:	bl	10df4 <dcgettext@plt>
   11954:	mov	r6, r0
   11958:	mov	r0, #0
   1195c:	mov	r1, #3
   11960:	mov	r2, r9
   11964:	bl	1418c <__assert_fail@plt+0x31d0>
   11968:	mov	r3, r0
   1196c:	mov	r0, #0
   11970:	mov	r1, #0
   11974:	mov	r2, r6
   11978:	bl	10e6c <error@plt>
   1197c:	mov	r0, r5
   11980:	mov	r1, r4
   11984:	bl	11d50 <__assert_fail@plt+0xd94>
   11988:	ldr	r0, [r7, #12]
   1198c:	cmp	r0, #0
   11990:	bne	1197c <__assert_fail@plt+0x9c0>
   11994:	ldr	r0, [r7]
   11998:	mov	r6, #0
   1199c:	cmp	r0, #0
   119a0:	bne	11898 <__assert_fail@plt+0x8dc>
   119a4:	b	11a8c <__assert_fail@plt+0xad0>
   119a8:	movw	r8, #23177	; 0x5a89
   119ac:	mov	r4, #1
   119b0:	mov	r6, #1
   119b4:	movt	r8, #1
   119b8:	ldr	r1, [r7, #4]
   119bc:	cmp	r1, #0
   119c0:	bne	119fc <__assert_fail@plt+0xa40>
   119c4:	b	11a38 <__assert_fail@plt+0xa7c>
   119c8:	ldr	r5, [r5, #4]
   119cc:	cmp	r5, #0
   119d0:	beq	11a20 <__assert_fail@plt+0xa64>
   119d4:	ldr	r2, [r5]
   119d8:	ldr	r3, [r2, #16]
   119dc:	subs	r3, r3, #1
   119e0:	str	r3, [r2, #16]
   119e4:	bne	119c8 <__assert_fail@plt+0xa0c>
   119e8:	ldr	r3, [r7, #8]
   119ec:	str	r2, [r3, #20]
   119f0:	ldr	r2, [r5]
   119f4:	str	r2, [r7, #8]
   119f8:	b	119c8 <__assert_fail@plt+0xa0c>
   119fc:	ldr	r0, [r1]
   11a00:	ldr	r5, [r1, #24]
   11a04:	bl	10e84 <puts@plt>
   11a08:	ldm	r7, {r0, r1}
   11a0c:	sub	r0, r0, #1
   11a10:	strb	r4, [r1, #13]
   11a14:	str	r0, [r7]
   11a18:	cmp	r5, #0
   11a1c:	bne	119d4 <__assert_fail@plt+0xa18>
   11a20:	ldr	r1, [r1, #20]
   11a24:	cmp	r1, #0
   11a28:	str	r1, [r7, #4]
   11a2c:	bne	119fc <__assert_fail@plt+0xa40>
   11a30:	cmp	r0, #0
   11a34:	beq	11a84 <__assert_fail@plt+0xac8>
   11a38:	mov	r0, #0
   11a3c:	mov	r1, r8
   11a40:	mov	r2, #5
   11a44:	bl	10df4 <dcgettext@plt>
   11a48:	mov	r5, r0
   11a4c:	mov	r0, #0
   11a50:	mov	r1, #3
   11a54:	mov	r2, r9
   11a58:	bl	1418c <__assert_fail@plt+0x31d0>
   11a5c:	mov	r3, r0
   11a60:	mov	r0, #0
   11a64:	mov	r1, #0
   11a68:	mov	r2, r5
   11a6c:	bl	10e6c <error@plt>
   11a70:	ldr	r0, [r7, #12]
   11a74:	cmp	r0, #0
   11a78:	bne	11a74 <__assert_fail@plt+0xab8>
   11a7c:	ldr	r0, [r7]
   11a80:	mov	r6, #0
   11a84:	cmp	r0, #0
   11a88:	bne	119b8 <__assert_fail@plt+0x9fc>
   11a8c:	movw	r0, #28992	; 0x7140
   11a90:	movt	r0, #2
   11a94:	ldr	r0, [r0]
   11a98:	bl	11f30 <__assert_fail@plt+0xf74>
   11a9c:	cmp	r0, #0
   11aa0:	bne	11ab0 <__assert_fail@plt+0xaf4>
   11aa4:	mov	r0, #1
   11aa8:	bic	r0, r0, r6
   11aac:	bl	10ee4 <exit@plt>
   11ab0:	bl	10efc <__errno_location@plt>
   11ab4:	ldr	r4, [r0]
   11ab8:	ldr	r0, [sp, #20]
   11abc:	cmp	r0, #0
   11ac0:	bne	11b44 <__assert_fail@plt+0xb88>
   11ac4:	movw	r1, #23204	; 0x5aa4
   11ac8:	mov	r0, #0
   11acc:	mov	r2, #5
   11ad0:	movt	r1, #1
   11ad4:	bl	10df4 <dcgettext@plt>
   11ad8:	b	11b54 <__assert_fail@plt+0xb98>
   11adc:	movw	r0, #23273	; 0x5ae9
   11ae0:	movw	r1, #23097	; 0x5a39
   11ae4:	movw	r3, #23219	; 0x5ab3
   11ae8:	mov	r2, #140	; 0x8c
   11aec:	movt	r0, #1
   11af0:	movt	r1, #1
   11af4:	movt	r3, #1
   11af8:	bl	10fbc <__assert_fail@plt>
   11afc:	movw	r0, #23292	; 0x5afc
   11b00:	movw	r1, #23097	; 0x5a39
   11b04:	movw	r3, #23219	; 0x5ab3
   11b08:	mov	r2, #163	; 0xa3
   11b0c:	movt	r0, #1
   11b10:	movt	r1, #1
   11b14:	movt	r3, #1
   11b18:	bl	10fbc <__assert_fail@plt>
   11b1c:	movw	r0, #23335	; 0x5b27
   11b20:	movw	r1, #23097	; 0x5a39
   11b24:	movw	r3, #23219	; 0x5ab3
   11b28:	mov	r2, #177	; 0xb1
   11b2c:	movt	r0, #1
   11b30:	movt	r1, #1
   11b34:	movt	r3, #1
   11b38:	bl	10fbc <__assert_fail@plt>
   11b3c:	bl	10efc <__errno_location@plt>
   11b40:	ldr	r4, [r0]
   11b44:	mov	r0, #0
   11b48:	mov	r1, #3
   11b4c:	mov	r2, r9
   11b50:	bl	1418c <__assert_fail@plt+0x31d0>
   11b54:	movw	r2, #23471	; 0x5baf
   11b58:	mov	r3, r0
   11b5c:	mov	r0, #1
   11b60:	mov	r1, r4
   11b64:	movt	r2, #1
   11b68:	bl	10e6c <error@plt>
   11b6c:	movw	r0, #23088	; 0x5a30
   11b70:	movw	r1, #23097	; 0x5a39
   11b74:	movw	r3, #23109	; 0x5a45
   11b78:	movw	r2, #458	; 0x1ca
   11b7c:	movt	r0, #1
   11b80:	movt	r1, #1
   11b84:	movt	r3, #1
   11b88:	bl	10fbc <__assert_fail@plt>
   11b8c:	movw	r1, #23134	; 0x5a5e
   11b90:	mov	r0, #0
   11b94:	mov	r2, #5
   11b98:	movt	r1, #1
   11b9c:	bl	10df4 <dcgettext@plt>
   11ba0:	mov	r4, r0
   11ba4:	mov	r0, #0
   11ba8:	mov	r1, #3
   11bac:	mov	r2, r9
   11bb0:	bl	1418c <__assert_fail@plt+0x31d0>
   11bb4:	mov	r3, r0
   11bb8:	mov	r0, #1
   11bbc:	mov	r1, #0
   11bc0:	mov	r2, r4
   11bc4:	bl	10e6c <error@plt>
   11bc8:	mov	r6, #1
   11bcc:	b	11a8c <__assert_fail@plt+0xad0>
   11bd0:	movw	r0, #29008	; 0x7150
   11bd4:	movt	r0, #2
   11bd8:	ldr	r1, [r0]
   11bdc:	add	r1, r1, #1
   11be0:	str	r1, [r0]
   11be4:	mov	r0, #0
   11be8:	bx	lr
   11bec:	ldr	r1, [r0, #16]
   11bf0:	cmp	r1, #0
   11bf4:	bne	11c04 <__assert_fail@plt+0xc48>
   11bf8:	ldrb	r1, [r0, #13]
   11bfc:	cmp	r1, #0
   11c00:	beq	11c0c <__assert_fail@plt+0xc50>
   11c04:	mov	r0, #0
   11c08:	bx	lr
   11c0c:	movw	r1, #29008	; 0x7150
   11c10:	movt	r1, #2
   11c14:	ldr	r2, [r1, #4]!
   11c18:	ldr	r3, [r1, #4]
   11c1c:	cmp	r2, #0
   11c20:	mov	r2, r1
   11c24:	addne	r2, r3, #20
   11c28:	str	r0, [r2]
   11c2c:	str	r0, [r1, #4]
   11c30:	mov	r0, #0
   11c34:	bx	lr
   11c38:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11c3c:	add	fp, sp, #24
   11c40:	ldr	r1, [r0, #16]
   11c44:	mov	r4, r0
   11c48:	mov	r0, #0
   11c4c:	cmp	r1, #0
   11c50:	beq	11d4c <__assert_fail@plt+0xd90>
   11c54:	movw	r6, #29008	; 0x7150
   11c58:	movt	r6, #2
   11c5c:	ldr	r7, [r6, #12]
   11c60:	cmp	r7, #0
   11c64:	beq	11cfc <__assert_fail@plt+0xd40>
   11c68:	mov	r8, r4
   11c6c:	ldr	r1, [r8, #24]!
   11c70:	cmp	r1, #0
   11c74:	beq	11d4c <__assert_fail@plt+0xd90>
   11c78:	ldr	r2, [r1]
   11c7c:	cmp	r2, r7
   11c80:	beq	11ca4 <__assert_fail@plt+0xce8>
   11c84:	mov	r2, r1
   11c88:	ldr	r1, [r1, #4]
   11c8c:	cmp	r1, #0
   11c90:	beq	11d4c <__assert_fail@plt+0xd90>
   11c94:	ldr	r3, [r1]
   11c98:	cmp	r3, r7
   11c9c:	bne	11c84 <__assert_fail@plt+0xcc8>
   11ca0:	add	r8, r2, #4
   11ca4:	ldr	r1, [r4, #20]
   11ca8:	cmp	r1, #0
   11cac:	beq	11cf8 <__assert_fail@plt+0xd3c>
   11cb0:	movw	r5, #23471	; 0x5baf
   11cb4:	mov	r9, #0
   11cb8:	movt	r5, #1
   11cbc:	ldr	r3, [r7]
   11cc0:	ldr	r7, [r7, #20]
   11cc4:	mov	r0, #0
   11cc8:	mov	r1, #0
   11ccc:	mov	r2, r5
   11cd0:	bl	10e6c <error@plt>
   11cd4:	ldr	r0, [r6, #12]
   11cd8:	cmp	r0, r4
   11cdc:	beq	11d04 <__assert_fail@plt+0xd48>
   11ce0:	cmp	r7, #0
   11ce4:	str	r9, [r0, #20]
   11ce8:	str	r7, [r6, #12]
   11cec:	bne	11cbc <__assert_fail@plt+0xd00>
   11cf0:	mov	r4, r7
   11cf4:	b	11d20 <__assert_fail@plt+0xd64>
   11cf8:	str	r7, [r4, #20]
   11cfc:	str	r4, [r6, #12]
   11d00:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11d04:	ldr	r0, [r8]
   11d08:	ldr	r1, [r0]
   11d0c:	ldr	r2, [r1, #16]
   11d10:	sub	r2, r2, #1
   11d14:	str	r2, [r1, #16]
   11d18:	ldr	r0, [r0, #4]
   11d1c:	str	r0, [r8]
   11d20:	mov	r0, #1
   11d24:	cmp	r4, #0
   11d28:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   11d2c:	mov	r1, #0
   11d30:	ldr	r2, [r4, #20]
   11d34:	str	r1, [r4, #20]
   11d38:	cmp	r2, #0
   11d3c:	mov	r4, r2
   11d40:	bne	11d30 <__assert_fail@plt+0xd74>
   11d44:	mov	r1, #0
   11d48:	str	r1, [r6, #12]
   11d4c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11d50:	push	{r4, r5, r6, sl, fp, lr}
   11d54:	add	fp, sp, #16
   11d58:	mov	r4, r0
   11d5c:	ldr	r0, [r0, #4]
   11d60:	cmp	r0, #0
   11d64:	beq	11d84 <__assert_fail@plt+0xdc8>
   11d68:	mov	r5, r1
   11d6c:	bl	11d50 <__assert_fail@plt+0xd94>
   11d70:	mov	r1, r5
   11d74:	mov	r5, #1
   11d78:	cmp	r0, #0
   11d7c:	beq	11d90 <__assert_fail@plt+0xdd4>
   11d80:	b	11dc4 <__assert_fail@plt+0xe08>
   11d84:	ldr	r0, [r4, #8]
   11d88:	cmp	r0, #0
   11d8c:	beq	11dcc <__assert_fail@plt+0xe10>
   11d90:	mov	r0, r4
   11d94:	mov	r6, r1
   11d98:	blx	r1
   11d9c:	mov	r5, #1
   11da0:	cmp	r0, #0
   11da4:	bne	11dc4 <__assert_fail@plt+0xe08>
   11da8:	ldr	r0, [r4, #8]
   11dac:	cmp	r0, #0
   11db0:	beq	11dd8 <__assert_fail@plt+0xe1c>
   11db4:	mov	r1, r6
   11db8:	bl	11d50 <__assert_fail@plt+0xd94>
   11dbc:	cmp	r0, #0
   11dc0:	moveq	r5, #0
   11dc4:	mov	r0, r5
   11dc8:	pop	{r4, r5, r6, sl, fp, pc}
   11dcc:	mov	r0, r4
   11dd0:	pop	{r4, r5, r6, sl, fp, lr}
   11dd4:	bx	r1
   11dd8:	mov	r5, #0
   11ddc:	mov	r0, r5
   11de0:	pop	{r4, r5, r6, sl, fp, pc}
   11de4:	movw	r1, #29024	; 0x7160
   11de8:	movt	r1, #2
   11dec:	str	r0, [r1, #4]
   11df0:	bx	lr
   11df4:	movw	r1, #29024	; 0x7160
   11df8:	movt	r1, #2
   11dfc:	strb	r0, [r1]
   11e00:	bx	lr
   11e04:	push	{r4, r5, r6, sl, fp, lr}
   11e08:	add	fp, sp, #16
   11e0c:	sub	sp, sp, #8
   11e10:	movw	r0, #28996	; 0x7144
   11e14:	movt	r0, #2
   11e18:	ldr	r0, [r0]
   11e1c:	bl	15474 <__assert_fail@plt+0x44b8>
   11e20:	cmp	r0, #0
   11e24:	beq	11e4c <__assert_fail@plt+0xe90>
   11e28:	movw	r5, #29024	; 0x7160
   11e2c:	movt	r5, #2
   11e30:	ldrb	r0, [r5]
   11e34:	cmp	r0, #0
   11e38:	beq	11e78 <__assert_fail@plt+0xebc>
   11e3c:	bl	10efc <__errno_location@plt>
   11e40:	ldr	r0, [r0]
   11e44:	cmp	r0, #32
   11e48:	bne	11e78 <__assert_fail@plt+0xebc>
   11e4c:	movw	r0, #28984	; 0x7138
   11e50:	movt	r0, #2
   11e54:	ldr	r0, [r0]
   11e58:	bl	15474 <__assert_fail@plt+0x44b8>
   11e5c:	cmp	r0, #0
   11e60:	subeq	sp, fp, #16
   11e64:	popeq	{r4, r5, r6, sl, fp, pc}
   11e68:	movw	r0, #28900	; 0x70e4
   11e6c:	movt	r0, #2
   11e70:	ldr	r0, [r0]
   11e74:	bl	10dc4 <_exit@plt>
   11e78:	movw	r1, #23455	; 0x5b9f
   11e7c:	mov	r0, #0
   11e80:	mov	r2, #5
   11e84:	movt	r1, #1
   11e88:	bl	10df4 <dcgettext@plt>
   11e8c:	ldr	r6, [r5, #4]
   11e90:	mov	r4, r0
   11e94:	bl	10efc <__errno_location@plt>
   11e98:	ldr	r5, [r0]
   11e9c:	cmp	r6, #0
   11ea0:	bne	11ebc <__assert_fail@plt+0xf00>
   11ea4:	movw	r2, #23471	; 0x5baf
   11ea8:	mov	r0, #0
   11eac:	mov	r1, r5
   11eb0:	mov	r3, r4
   11eb4:	movt	r2, #1
   11eb8:	b	11edc <__assert_fail@plt+0xf20>
   11ebc:	mov	r0, r6
   11ec0:	bl	140b0 <__assert_fail@plt+0x30f4>
   11ec4:	movw	r2, #23467	; 0x5bab
   11ec8:	mov	r3, r0
   11ecc:	str	r4, [sp]
   11ed0:	mov	r0, #0
   11ed4:	mov	r1, r5
   11ed8:	movt	r2, #1
   11edc:	bl	10e6c <error@plt>
   11ee0:	movw	r0, #28900	; 0x70e4
   11ee4:	movt	r0, #2
   11ee8:	ldr	r0, [r0]
   11eec:	bl	10dc4 <_exit@plt>
   11ef0:	b	10da0 <posix_fadvise64@plt>
   11ef4:	cmp	r0, #0
   11ef8:	bxeq	lr
   11efc:	push	{r4, sl, fp, lr}
   11f00:	add	fp, sp, #8
   11f04:	sub	sp, sp, #16
   11f08:	mov	r4, r1
   11f0c:	bl	10f2c <fileno@plt>
   11f10:	mov	r1, #0
   11f14:	mov	r2, #0
   11f18:	mov	r3, #0
   11f1c:	str	r1, [sp]
   11f20:	stmib	sp, {r1, r4}
   11f24:	bl	10da0 <posix_fadvise64@plt>
   11f28:	sub	sp, fp, #8
   11f2c:	pop	{r4, sl, fp, pc}
   11f30:	push	{r4, r5, r6, sl, fp, lr}
   11f34:	add	fp, sp, #16
   11f38:	sub	sp, sp, #8
   11f3c:	mov	r4, r0
   11f40:	bl	10f2c <fileno@plt>
   11f44:	cmn	r0, #1
   11f48:	ble	11fbc <__assert_fail@plt+0x1000>
   11f4c:	mov	r0, r4
   11f50:	bl	10ea8 <__freading@plt>
   11f54:	cmp	r0, #0
   11f58:	beq	11f84 <__assert_fail@plt+0xfc8>
   11f5c:	mov	r0, r4
   11f60:	bl	10f2c <fileno@plt>
   11f64:	mov	r1, #1
   11f68:	mov	r2, #0
   11f6c:	mov	r3, #0
   11f70:	str	r1, [sp]
   11f74:	bl	10e3c <lseek64@plt>
   11f78:	and	r0, r0, r1
   11f7c:	cmn	r0, #1
   11f80:	beq	11fbc <__assert_fail@plt+0x1000>
   11f84:	mov	r0, r4
   11f88:	bl	11fcc <__assert_fail@plt+0x1010>
   11f8c:	cmp	r0, #0
   11f90:	beq	11fbc <__assert_fail@plt+0x1000>
   11f94:	bl	10efc <__errno_location@plt>
   11f98:	ldr	r6, [r0]
   11f9c:	mov	r5, r0
   11fa0:	mov	r0, r4
   11fa4:	bl	10f44 <fclose@plt>
   11fa8:	cmp	r6, #0
   11fac:	strne	r6, [r5]
   11fb0:	mvnne	r0, #0
   11fb4:	sub	sp, fp, #16
   11fb8:	pop	{r4, r5, r6, sl, fp, pc}
   11fbc:	mov	r0, r4
   11fc0:	sub	sp, fp, #16
   11fc4:	pop	{r4, r5, r6, sl, fp, lr}
   11fc8:	b	10f44 <fclose@plt>
   11fcc:	push	{r4, sl, fp, lr}
   11fd0:	add	fp, sp, #8
   11fd4:	sub	sp, sp, #8
   11fd8:	mov	r4, r0
   11fdc:	cmp	r0, #0
   11fe0:	beq	11ffc <__assert_fail@plt+0x1040>
   11fe4:	mov	r0, r4
   11fe8:	bl	10ea8 <__freading@plt>
   11fec:	cmp	r0, #0
   11ff0:	ldrbne	r0, [r4, #1]
   11ff4:	tstne	r0, #1
   11ff8:	bne	1200c <__assert_fail@plt+0x1050>
   11ffc:	mov	r0, r4
   12000:	sub	sp, fp, #8
   12004:	pop	{r4, sl, fp, lr}
   12008:	b	10dac <fflush@plt>
   1200c:	mov	r0, #1
   12010:	mov	r2, #0
   12014:	mov	r3, #0
   12018:	str	r0, [sp]
   1201c:	mov	r0, r4
   12020:	bl	122a0 <__assert_fail@plt+0x12e4>
   12024:	mov	r0, r4
   12028:	sub	sp, fp, #8
   1202c:	pop	{r4, sl, fp, lr}
   12030:	b	10dac <fflush@plt>
   12034:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12038:	add	fp, sp, #28
   1203c:	sub	sp, sp, #4
   12040:	mov	r5, r0
   12044:	mov	r0, r2
   12048:	mov	r4, r2
   1204c:	mov	r9, r1
   12050:	bl	10f2c <fileno@plt>
   12054:	mov	r7, #0
   12058:	cmp	r0, #0
   1205c:	beq	1209c <__assert_fail@plt+0x10e0>
   12060:	cmp	r0, #1
   12064:	beq	120a8 <__assert_fail@plt+0x10ec>
   12068:	cmp	r0, #2
   1206c:	beq	12084 <__assert_fail@plt+0x10c8>
   12070:	mov	r0, #2
   12074:	mov	r1, #2
   12078:	bl	10e00 <dup2@plt>
   1207c:	subs	r7, r0, #2
   12080:	movwne	r7, #1
   12084:	mov	r0, #1
   12088:	mov	r1, #1
   1208c:	bl	10e00 <dup2@plt>
   12090:	subs	r6, r0, #1
   12094:	movwne	r6, #1
   12098:	b	120ac <__assert_fail@plt+0x10f0>
   1209c:	mov	r6, #0
   120a0:	mov	r8, #0
   120a4:	b	12174 <__assert_fail@plt+0x11b8>
   120a8:	mov	r6, #0
   120ac:	mov	r0, #0
   120b0:	mov	r1, #0
   120b4:	mov	sl, #0
   120b8:	bl	10e00 <dup2@plt>
   120bc:	cmp	r0, #0
   120c0:	mov	r8, #0
   120c4:	beq	12104 <__assert_fail@plt+0x1148>
   120c8:	movw	r0, #23474	; 0x5bb2
   120cc:	mov	r1, #0
   120d0:	movt	r0, #1
   120d4:	bl	10e78 <open64@plt>
   120d8:	cmp	r0, #0
   120dc:	beq	12100 <__assert_fail@plt+0x1144>
   120e0:	cmn	r0, #1
   120e4:	ble	12224 <__assert_fail@plt+0x1268>
   120e8:	bl	10fb0 <close@plt>
   120ec:	bl	10efc <__errno_location@plt>
   120f0:	mov	r4, r0
   120f4:	mov	r0, #9
   120f8:	str	r0, [r4]
   120fc:	b	1222c <__assert_fail@plt+0x1270>
   12100:	mov	r8, #1
   12104:	cmp	r6, #0
   12108:	beq	12128 <__assert_fail@plt+0x116c>
   1210c:	movw	r0, #23474	; 0x5bb2
   12110:	mov	r1, #0
   12114:	movt	r0, #1
   12118:	bl	10e78 <open64@plt>
   1211c:	mov	sl, #1
   12120:	cmp	r0, #1
   12124:	bne	121f4 <__assert_fail@plt+0x1238>
   12128:	cmp	r7, #0
   1212c:	beq	1216c <__assert_fail@plt+0x11b0>
   12130:	movw	r0, #23474	; 0x5bb2
   12134:	mov	r1, #0
   12138:	movt	r0, #1
   1213c:	bl	10e78 <open64@plt>
   12140:	mov	r7, #1
   12144:	cmp	r0, #2
   12148:	beq	12170 <__assert_fail@plt+0x11b4>
   1214c:	cmn	r0, #1
   12150:	ble	1227c <__assert_fail@plt+0x12c0>
   12154:	bl	10fb0 <close@plt>
   12158:	bl	10efc <__errno_location@plt>
   1215c:	mov	r4, r0
   12160:	mov	r0, #9
   12164:	str	r0, [r4]
   12168:	b	12284 <__assert_fail@plt+0x12c8>
   1216c:	mov	r7, #0
   12170:	mov	r6, sl
   12174:	mov	r0, r5
   12178:	mov	r1, r9
   1217c:	mov	r2, r4
   12180:	bl	10ec0 <freopen64@plt>
   12184:	mov	r5, r0
   12188:	bl	10efc <__errno_location@plt>
   1218c:	ldr	r9, [r0]
   12190:	mov	r4, r0
   12194:	cmp	r7, #0
   12198:	beq	121a4 <__assert_fail@plt+0x11e8>
   1219c:	mov	r0, #2
   121a0:	bl	10fb0 <close@plt>
   121a4:	cmp	r6, #0
   121a8:	beq	121b4 <__assert_fail@plt+0x11f8>
   121ac:	mov	r0, #1
   121b0:	bl	10fb0 <close@plt>
   121b4:	cmp	r8, #0
   121b8:	beq	121d8 <__assert_fail@plt+0x121c>
   121bc:	mov	r0, #0
   121c0:	bl	10fb0 <close@plt>
   121c4:	cmp	r5, #0
   121c8:	beq	121e0 <__assert_fail@plt+0x1224>
   121cc:	mov	r0, r5
   121d0:	sub	sp, fp, #28
   121d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121d8:	cmp	r5, #0
   121dc:	bne	121cc <__assert_fail@plt+0x1210>
   121e0:	mov	r5, #0
   121e4:	str	r9, [r4]
   121e8:	mov	r0, r5
   121ec:	sub	sp, fp, #28
   121f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121f4:	cmn	r0, #1
   121f8:	ble	12244 <__assert_fail@plt+0x1288>
   121fc:	bl	10fb0 <close@plt>
   12200:	bl	10efc <__errno_location@plt>
   12204:	mov	r4, r0
   12208:	mov	r0, #9
   1220c:	str	r0, [r4]
   12210:	ldr	r9, [r4]
   12214:	mov	r5, #0
   12218:	cmp	r7, #0
   1221c:	beq	121ac <__assert_fail@plt+0x11f0>
   12220:	b	1225c <__assert_fail@plt+0x12a0>
   12224:	bl	10efc <__errno_location@plt>
   12228:	mov	r4, r0
   1222c:	ldr	r9, [r4]
   12230:	mov	r8, #1
   12234:	mov	r5, #0
   12238:	cmp	r7, #0
   1223c:	bne	1219c <__assert_fail@plt+0x11e0>
   12240:	b	121a4 <__assert_fail@plt+0x11e8>
   12244:	bl	10efc <__errno_location@plt>
   12248:	mov	r4, r0
   1224c:	ldr	r9, [r4]
   12250:	mov	r5, #0
   12254:	cmp	r7, #0
   12258:	beq	121ac <__assert_fail@plt+0x11f0>
   1225c:	mov	r0, #2
   12260:	bl	10fb0 <close@plt>
   12264:	mov	r0, #1
   12268:	bl	10fb0 <close@plt>
   1226c:	mov	r5, #0
   12270:	cmp	r8, #0
   12274:	beq	121e0 <__assert_fail@plt+0x1224>
   12278:	b	121bc <__assert_fail@plt+0x1200>
   1227c:	bl	10efc <__errno_location@plt>
   12280:	mov	r4, r0
   12284:	ldr	r9, [r4]
   12288:	mov	r0, #2
   1228c:	bl	10fb0 <close@plt>
   12290:	mov	r5, #0
   12294:	cmp	sl, #0
   12298:	bne	121ac <__assert_fail@plt+0x11f0>
   1229c:	b	121b4 <__assert_fail@plt+0x11f8>
   122a0:	push	{r4, r5, r6, r7, fp, lr}
   122a4:	add	fp, sp, #16
   122a8:	sub	sp, sp, #8
   122ac:	mov	r4, r0
   122b0:	ldr	r0, [r0, #4]
   122b4:	mov	r5, r3
   122b8:	mov	r6, r2
   122bc:	ldr	r1, [r4, #8]
   122c0:	cmp	r1, r0
   122c4:	bne	122e0 <__assert_fail@plt+0x1324>
   122c8:	ldrd	r0, [r4, #16]
   122cc:	cmp	r1, r0
   122d0:	bne	122e0 <__assert_fail@plt+0x1324>
   122d4:	ldr	r0, [r4, #36]	; 0x24
   122d8:	cmp	r0, #0
   122dc:	beq	122f8 <__assert_fail@plt+0x133c>
   122e0:	mov	r0, r4
   122e4:	mov	r2, r6
   122e8:	mov	r3, r5
   122ec:	sub	sp, fp, #16
   122f0:	pop	{r4, r5, r6, r7, fp, lr}
   122f4:	b	10f50 <fseeko64@plt>
   122f8:	ldr	r7, [fp, #8]
   122fc:	mov	r0, r4
   12300:	bl	10f2c <fileno@plt>
   12304:	mov	r2, r6
   12308:	mov	r3, r5
   1230c:	str	r7, [sp]
   12310:	bl	10e3c <lseek64@plt>
   12314:	and	r2, r0, r1
   12318:	cmn	r2, #1
   1231c:	mvneq	r0, #0
   12320:	subeq	sp, fp, #16
   12324:	popeq	{r4, r5, r6, r7, fp, pc}
   12328:	strd	r0, [r4, #80]	; 0x50
   1232c:	ldr	r0, [r4]
   12330:	bic	r0, r0, #16
   12334:	str	r0, [r4]
   12338:	mov	r0, #0
   1233c:	sub	sp, fp, #16
   12340:	pop	{r4, r5, r6, r7, fp, pc}
   12344:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12348:	add	fp, sp, #24
   1234c:	sub	sp, sp, #8
   12350:	movw	r6, #29000	; 0x7148
   12354:	mov	r4, #0
   12358:	cmp	r0, #2
   1235c:	movt	r6, #2
   12360:	ldr	r7, [r6]
   12364:	str	r4, [r6]
   12368:	bne	123dc <__assert_fail@plt+0x1420>
   1236c:	mov	r8, r3
   12370:	movw	r3, #23500	; 0x5bcc
   12374:	mov	r5, r2
   12378:	movw	r2, #23484	; 0x5bbc
   1237c:	mov	r0, #2
   12380:	str	r4, [sp]
   12384:	movt	r2, #1
   12388:	movt	r3, #1
   1238c:	bl	10ecc <getopt_long@plt>
   12390:	cmp	r0, #104	; 0x68
   12394:	beq	123d0 <__assert_fail@plt+0x1414>
   12398:	cmp	r0, #118	; 0x76
   1239c:	bne	123dc <__assert_fail@plt+0x1420>
   123a0:	movw	r0, #28996	; 0x7144
   123a4:	ldr	r3, [fp, #8]
   123a8:	add	r1, fp, #16
   123ac:	mov	r2, r8
   123b0:	movt	r0, #2
   123b4:	str	r1, [sp, #4]
   123b8:	str	r1, [sp]
   123bc:	mov	r1, r5
   123c0:	ldr	r0, [r0]
   123c4:	bl	14ab0 <__assert_fail@plt+0x3af4>
   123c8:	mov	r0, #0
   123cc:	bl	10ee4 <exit@plt>
   123d0:	ldr	r1, [fp, #12]
   123d4:	mov	r0, #0
   123d8:	blx	r1
   123dc:	movw	r0, #28976	; 0x7130
   123e0:	str	r7, [r6]
   123e4:	movt	r0, #2
   123e8:	str	r4, [r0]
   123ec:	sub	sp, fp, #24
   123f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   123f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   123f8:	add	fp, sp, #24
   123fc:	sub	sp, sp, #8
   12400:	movw	r6, #29000	; 0x7148
   12404:	mov	r8, r3
   12408:	ldr	r3, [fp, #12]
   1240c:	mov	r5, r2
   12410:	mov	r2, #1
   12414:	movw	r4, #23087	; 0x5a2f
   12418:	movt	r6, #2
   1241c:	movt	r4, #1
   12420:	ldr	r7, [r6]
   12424:	str	r2, [r6]
   12428:	mov	r2, #0
   1242c:	str	r2, [sp]
   12430:	movw	r2, #23484	; 0x5bbc
   12434:	cmp	r3, #0
   12438:	movt	r2, #1
   1243c:	movw	r3, #23500	; 0x5bcc
   12440:	movne	r2, r4
   12444:	movt	r3, #1
   12448:	bl	10ecc <getopt_long@plt>
   1244c:	cmn	r0, #1
   12450:	beq	12480 <__assert_fail@plt+0x14c4>
   12454:	ldr	r1, [fp, #16]
   12458:	cmp	r0, #104	; 0x68
   1245c:	beq	12478 <__assert_fail@plt+0x14bc>
   12460:	cmp	r0, #118	; 0x76
   12464:	beq	1248c <__assert_fail@plt+0x14d0>
   12468:	movw	r0, #28900	; 0x70e4
   1246c:	movt	r0, #2
   12470:	ldr	r0, [r0]
   12474:	b	1247c <__assert_fail@plt+0x14c0>
   12478:	mov	r0, #0
   1247c:	blx	r1
   12480:	str	r7, [r6]
   12484:	sub	sp, fp, #24
   12488:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1248c:	movw	r0, #28996	; 0x7144
   12490:	ldr	r3, [fp, #8]
   12494:	add	r1, fp, #20
   12498:	mov	r2, r8
   1249c:	movt	r0, #2
   124a0:	str	r1, [sp, #4]
   124a4:	str	r1, [sp]
   124a8:	mov	r1, r5
   124ac:	ldr	r0, [r0]
   124b0:	bl	14ab0 <__assert_fail@plt+0x3af4>
   124b4:	mov	r0, #0
   124b8:	bl	10ee4 <exit@plt>
   124bc:	push	{r4, r5, fp, lr}
   124c0:	add	fp, sp, #8
   124c4:	cmp	r0, #0
   124c8:	beq	1255c <__assert_fail@plt+0x15a0>
   124cc:	mov	r1, #47	; 0x2f
   124d0:	mov	r4, r0
   124d4:	bl	10f74 <strrchr@plt>
   124d8:	cmp	r0, #0
   124dc:	mov	r5, r4
   124e0:	addne	r5, r0, #1
   124e4:	sub	r0, r5, r4
   124e8:	cmp	r0, #7
   124ec:	blt	12540 <__assert_fail@plt+0x1584>
   124f0:	movw	r1, #23604	; 0x5c34
   124f4:	sub	r0, r5, #7
   124f8:	mov	r2, #7
   124fc:	movt	r1, #1
   12500:	bl	10f98 <strncmp@plt>
   12504:	cmp	r0, #0
   12508:	bne	12540 <__assert_fail@plt+0x1584>
   1250c:	movw	r1, #23612	; 0x5c3c
   12510:	mov	r0, r5
   12514:	mov	r2, #3
   12518:	movt	r1, #1
   1251c:	bl	10f98 <strncmp@plt>
   12520:	cmp	r0, #0
   12524:	beq	12530 <__assert_fail@plt+0x1574>
   12528:	mov	r4, r5
   1252c:	b	12540 <__assert_fail@plt+0x1584>
   12530:	movw	r0, #28968	; 0x7128
   12534:	add	r4, r5, #3
   12538:	movt	r0, #2
   1253c:	str	r4, [r0]
   12540:	movw	r0, #28972	; 0x712c
   12544:	movt	r0, #2
   12548:	str	r4, [r0]
   1254c:	movw	r0, #29032	; 0x7168
   12550:	movt	r0, #2
   12554:	str	r4, [r0]
   12558:	pop	{r4, r5, fp, pc}
   1255c:	movw	r0, #28984	; 0x7138
   12560:	mov	r1, #55	; 0x37
   12564:	mov	r2, #1
   12568:	movt	r0, #2
   1256c:	ldr	r3, [r0]
   12570:	movw	r0, #23548	; 0x5bfc
   12574:	movt	r0, #1
   12578:	bl	10e30 <fwrite@plt>
   1257c:	bl	10fa4 <abort@plt>
   12580:	push	{r4, r5, r6, sl, fp, lr}
   12584:	add	fp, sp, #16
   12588:	mov	r4, r0
   1258c:	movw	r0, #29040	; 0x7170
   12590:	movt	r0, #2
   12594:	cmp	r4, #0
   12598:	moveq	r4, r0
   1259c:	bl	10efc <__errno_location@plt>
   125a0:	ldr	r6, [r0]
   125a4:	mov	r5, r0
   125a8:	mov	r0, r4
   125ac:	mov	r1, #48	; 0x30
   125b0:	bl	15258 <__assert_fail@plt+0x429c>
   125b4:	str	r6, [r5]
   125b8:	pop	{r4, r5, r6, sl, fp, pc}
   125bc:	movw	r1, #29040	; 0x7170
   125c0:	cmp	r0, #0
   125c4:	movt	r1, #2
   125c8:	movne	r1, r0
   125cc:	ldr	r0, [r1]
   125d0:	bx	lr
   125d4:	movw	r2, #29040	; 0x7170
   125d8:	cmp	r0, #0
   125dc:	movt	r2, #2
   125e0:	movne	r2, r0
   125e4:	str	r1, [r2]
   125e8:	bx	lr
   125ec:	movw	r3, #29040	; 0x7170
   125f0:	cmp	r0, #0
   125f4:	movt	r3, #2
   125f8:	movne	r3, r0
   125fc:	ubfx	r0, r1, #5, #3
   12600:	and	r1, r1, #31
   12604:	add	r0, r3, r0, lsl #2
   12608:	ldr	r3, [r0, #8]
   1260c:	eor	r2, r2, r3, lsr r1
   12610:	and	r2, r2, #1
   12614:	eor	r2, r3, r2, lsl r1
   12618:	str	r2, [r0, #8]
   1261c:	mov	r0, #1
   12620:	and	r0, r0, r3, lsr r1
   12624:	bx	lr
   12628:	movw	r2, #29040	; 0x7170
   1262c:	cmp	r0, #0
   12630:	movt	r2, #2
   12634:	movne	r2, r0
   12638:	ldr	r0, [r2, #4]
   1263c:	str	r1, [r2, #4]
   12640:	bx	lr
   12644:	movw	r3, #29040	; 0x7170
   12648:	cmp	r0, #0
   1264c:	movt	r3, #2
   12650:	movne	r3, r0
   12654:	cmp	r1, #0
   12658:	mov	r0, #10
   1265c:	cmpne	r2, #0
   12660:	str	r0, [r3]
   12664:	bne	12674 <__assert_fail@plt+0x16b8>
   12668:	push	{fp, lr}
   1266c:	mov	fp, sp
   12670:	bl	10fa4 <abort@plt>
   12674:	str	r1, [r3, #40]	; 0x28
   12678:	str	r2, [r3, #44]	; 0x2c
   1267c:	bx	lr
   12680:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12684:	add	fp, sp, #28
   12688:	sub	sp, sp, #20
   1268c:	mov	r7, r0
   12690:	ldr	r0, [fp, #8]
   12694:	movw	r5, #29040	; 0x7170
   12698:	mov	r8, r3
   1269c:	mov	r9, r2
   126a0:	mov	sl, r1
   126a4:	movt	r5, #2
   126a8:	cmp	r0, #0
   126ac:	movne	r5, r0
   126b0:	bl	10efc <__errno_location@plt>
   126b4:	mov	r4, r0
   126b8:	ldm	r5, {r0, r1}
   126bc:	ldr	r2, [r5, #40]	; 0x28
   126c0:	ldr	r3, [r5, #44]	; 0x2c
   126c4:	add	r5, r5, #8
   126c8:	ldr	r6, [r4]
   126cc:	stm	sp, {r0, r1, r5}
   126d0:	str	r2, [sp, #12]
   126d4:	str	r3, [sp, #16]
   126d8:	mov	r0, r7
   126dc:	mov	r1, sl
   126e0:	mov	r2, r9
   126e4:	mov	r3, r8
   126e8:	bl	126f8 <__assert_fail@plt+0x173c>
   126ec:	str	r6, [r4]
   126f0:	sub	sp, fp, #28
   126f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126fc:	add	fp, sp, #28
   12700:	sub	sp, sp, #156	; 0x9c
   12704:	str	r0, [sp, #76]	; 0x4c
   12708:	ldr	r0, [fp, #12]
   1270c:	mov	r6, r1
   12710:	str	r3, [sp, #84]	; 0x54
   12714:	str	r2, [fp, #-84]	; 0xffffffac
   12718:	and	r1, r0, #4
   1271c:	str	r1, [sp, #24]
   12720:	and	r1, r0, #1
   12724:	str	r1, [sp, #28]
   12728:	ubfx	r8, r0, #1, #1
   1272c:	bl	10e48 <__ctype_get_mb_cur_max@plt>
   12730:	str	r0, [sp, #32]
   12734:	ldr	r0, [fp, #24]
   12738:	ldr	r7, [fp, #8]
   1273c:	mov	r1, #0
   12740:	mov	r2, #0
   12744:	mov	r4, #1
   12748:	str	r1, [sp, #52]	; 0x34
   1274c:	str	r0, [sp, #72]	; 0x48
   12750:	ldr	r0, [fp, #20]
   12754:	str	r0, [sp, #68]	; 0x44
   12758:	mov	r0, #0
   1275c:	str	r0, [sp, #48]	; 0x30
   12760:	mov	r0, #0
   12764:	str	r0, [sp, #92]	; 0x5c
   12768:	mov	r0, #0
   1276c:	str	r0, [fp, #-76]	; 0xffffffb4
   12770:	mov	r0, #0
   12774:	cmp	r7, #10
   12778:	bhi	13a60 <__assert_fail@plt+0x2aa4>
   1277c:	add	r1, pc, #28
   12780:	mov	sl, r6
   12784:	ldr	r6, [sp, #76]	; 0x4c
   12788:	ldr	ip, [fp, #-84]	; 0xffffffac
   1278c:	ldr	lr, [sp, #84]	; 0x54
   12790:	mov	r9, #0
   12794:	mov	r3, #1
   12798:	mov	r5, #0
   1279c:	ldr	pc, [r1, r7, lsl #2]
   127a0:	andeq	r2, r1, r0, ror r8
   127a4:	andeq	r2, r1, ip, lsr #17
   127a8:	andeq	r2, r1, r0, lsl #17
   127ac:	andeq	r2, r1, r8, ror #16
   127b0:	andeq	r2, r1, r0, lsr #17
   127b4:	ldrdeq	r2, [r1], -r4
   127b8:	muleq	r1, r0, r8
   127bc:	andeq	r2, r1, r0, ror #21
   127c0:	andeq	r2, r1, ip, asr #15
   127c4:	andeq	r2, r1, ip, asr #15
   127c8:	andeq	r2, r1, r4, ror sl
   127cc:	mov	r9, r4
   127d0:	movw	r4, #23694	; 0x5c8e
   127d4:	mov	r5, r8
   127d8:	mov	r8, r2
   127dc:	mov	r0, #0
   127e0:	mov	r2, #5
   127e4:	movt	r4, #1
   127e8:	mov	r1, r4
   127ec:	bl	10df4 <dcgettext@plt>
   127f0:	cmp	r0, r4
   127f4:	str	r0, [sp, #68]	; 0x44
   127f8:	bne	12988 <__assert_fail@plt+0x19cc>
   127fc:	bl	15520 <__assert_fail@plt+0x4564>
   12800:	ldrb	r1, [r0]
   12804:	and	r1, r1, #223	; 0xdf
   12808:	cmp	r1, #71	; 0x47
   1280c:	beq	12954 <__assert_fail@plt+0x1998>
   12810:	cmp	r1, #85	; 0x55
   12814:	bne	1296c <__assert_fail@plt+0x19b0>
   12818:	ldrb	r1, [r0, #1]
   1281c:	and	r1, r1, #223	; 0xdf
   12820:	cmp	r1, #84	; 0x54
   12824:	bne	1296c <__assert_fail@plt+0x19b0>
   12828:	ldrb	r1, [r0, #2]
   1282c:	and	r1, r1, #223	; 0xdf
   12830:	cmp	r1, #70	; 0x46
   12834:	bne	1296c <__assert_fail@plt+0x19b0>
   12838:	ldrb	r1, [r0, #3]
   1283c:	cmp	r1, #45	; 0x2d
   12840:	ldrbeq	r1, [r0, #4]
   12844:	cmpeq	r1, #56	; 0x38
   12848:	bne	1296c <__assert_fail@plt+0x19b0>
   1284c:	ldrb	r0, [r0, #5]
   12850:	cmp	r0, #0
   12854:	movw	r0, #23698	; 0x5c92
   12858:	movt	r0, #1
   1285c:	str	r0, [sp, #68]	; 0x44
   12860:	bne	1296c <__assert_fail@plt+0x19b0>
   12864:	b	12988 <__assert_fail@plt+0x19cc>
   12868:	mov	r0, #1
   1286c:	b	128ac <__assert_fail@plt+0x18f0>
   12870:	mov	r7, #0
   12874:	mov	r9, #0
   12878:	mov	r3, r0
   1287c:	b	1294c <__assert_fail@plt+0x1990>
   12880:	tst	r8, #1
   12884:	bne	128ac <__assert_fail@plt+0x18f0>
   12888:	mov	r3, r0
   1288c:	b	12904 <__assert_fail@plt+0x1948>
   12890:	mov	r0, #1
   12894:	mov	r9, #0
   12898:	mov	r7, #5
   1289c:	b	128e8 <__assert_fail@plt+0x192c>
   128a0:	mov	r3, #1
   128a4:	tst	r8, #1
   128a8:	beq	12904 <__assert_fail@plt+0x1948>
   128ac:	mov	r1, #1
   128b0:	mov	r9, #0
   128b4:	mov	r7, #2
   128b8:	mov	r3, r0
   128bc:	mov	r5, #1
   128c0:	str	r1, [fp, #-76]	; 0xffffffb4
   128c4:	movw	r1, #23696	; 0x5c90
   128c8:	movt	r1, #1
   128cc:	str	r1, [sp, #92]	; 0x5c
   128d0:	b	12ae0 <__assert_fail@plt+0x1b24>
   128d4:	mov	r7, #5
   128d8:	tst	r8, #1
   128dc:	beq	12924 <__assert_fail@plt+0x1968>
   128e0:	mov	r0, #1
   128e4:	mov	r9, #0
   128e8:	str	r0, [fp, #-76]	; 0xffffffb4
   128ec:	movw	r0, #23692	; 0x5c8c
   128f0:	mov	r3, #1
   128f4:	mov	r5, #1
   128f8:	movt	r0, #1
   128fc:	str	r0, [sp, #92]	; 0x5c
   12900:	b	12ae0 <__assert_fail@plt+0x1b24>
   12904:	cmp	sl, #0
   12908:	mov	r9, #1
   1290c:	mov	r7, #2
   12910:	movne	r0, #39	; 0x27
   12914:	strbne	r0, [r6]
   12918:	movw	r0, #23696	; 0x5c90
   1291c:	movt	r0, #1
   12920:	b	12940 <__assert_fail@plt+0x1984>
   12924:	cmp	sl, #0
   12928:	mov	r9, #1
   1292c:	mov	r3, #1
   12930:	movne	r0, #34	; 0x22
   12934:	strbne	r0, [r6]
   12938:	movw	r0, #23692	; 0x5c8c
   1293c:	movt	r0, #1
   12940:	str	r0, [sp, #92]	; 0x5c
   12944:	mov	r0, #1
   12948:	str	r0, [fp, #-76]	; 0xffffffb4
   1294c:	mov	r5, #0
   12950:	b	12ae0 <__assert_fail@plt+0x1b24>
   12954:	ldrb	r1, [r0, #1]
   12958:	and	r1, r1, #223	; 0xdf
   1295c:	cmp	r1, #66	; 0x42
   12960:	ldrbeq	r1, [r0, #2]
   12964:	cmpeq	r1, #49	; 0x31
   12968:	beq	13888 <__assert_fail@plt+0x28cc>
   1296c:	movw	r0, #23696	; 0x5c90
   12970:	movw	r1, #23692	; 0x5c8c
   12974:	cmp	r7, #9
   12978:	movt	r0, #1
   1297c:	movt	r1, #1
   12980:	moveq	r0, r1
   12984:	str	r0, [sp, #68]	; 0x44
   12988:	movw	r4, #23696	; 0x5c90
   1298c:	mov	r0, #0
   12990:	mov	r2, #5
   12994:	movt	r4, #1
   12998:	mov	r1, r4
   1299c:	bl	10df4 <dcgettext@plt>
   129a0:	cmp	r0, r4
   129a4:	str	r0, [sp, #72]	; 0x48
   129a8:	beq	129b8 <__assert_fail@plt+0x19fc>
   129ac:	mov	r4, r9
   129b0:	mov	r2, r8
   129b4:	b	12a70 <__assert_fail@plt+0x1ab4>
   129b8:	bl	15520 <__assert_fail@plt+0x4564>
   129bc:	ldrb	r1, [r0]
   129c0:	mov	r4, r9
   129c4:	and	r1, r1, #223	; 0xdf
   129c8:	cmp	r1, #71	; 0x47
   129cc:	beq	12a28 <__assert_fail@plt+0x1a6c>
   129d0:	cmp	r1, #85	; 0x55
   129d4:	mov	r2, r8
   129d8:	bne	12a50 <__assert_fail@plt+0x1a94>
   129dc:	ldrb	r1, [r0, #1]
   129e0:	and	r1, r1, #223	; 0xdf
   129e4:	cmp	r1, #84	; 0x54
   129e8:	bne	12a50 <__assert_fail@plt+0x1a94>
   129ec:	ldrb	r1, [r0, #2]
   129f0:	and	r1, r1, #223	; 0xdf
   129f4:	cmp	r1, #70	; 0x46
   129f8:	ldrbeq	r1, [r0, #3]
   129fc:	cmpeq	r1, #45	; 0x2d
   12a00:	bne	12a50 <__assert_fail@plt+0x1a94>
   12a04:	ldrb	r1, [r0, #4]
   12a08:	cmp	r1, #56	; 0x38
   12a0c:	ldrbeq	r0, [r0, #5]
   12a10:	cmpeq	r0, #0
   12a14:	bne	12a50 <__assert_fail@plt+0x1a94>
   12a18:	movw	r0, #23702	; 0x5c96
   12a1c:	movt	r0, #1
   12a20:	str	r0, [sp, #72]	; 0x48
   12a24:	b	12a70 <__assert_fail@plt+0x1ab4>
   12a28:	ldrb	r1, [r0, #1]
   12a2c:	mov	r2, r8
   12a30:	and	r1, r1, #223	; 0xdf
   12a34:	cmp	r1, #66	; 0x42
   12a38:	bne	12a50 <__assert_fail@plt+0x1a94>
   12a3c:	ldrb	r1, [r0, #2]
   12a40:	cmp	r1, #49	; 0x31
   12a44:	ldrbeq	r1, [r0, #3]
   12a48:	cmpeq	r1, #56	; 0x38
   12a4c:	beq	138cc <__assert_fail@plt+0x2910>
   12a50:	movw	r0, #23696	; 0x5c90
   12a54:	cmp	r7, #9
   12a58:	movt	r0, #1
   12a5c:	mov	r1, r0
   12a60:	movw	r0, #23692	; 0x5c8c
   12a64:	movt	r0, #1
   12a68:	moveq	r1, r0
   12a6c:	str	r1, [sp, #72]	; 0x48
   12a70:	mov	r8, r5
   12a74:	mov	r9, #0
   12a78:	tst	r8, #1
   12a7c:	mov	r5, r8
   12a80:	str	r2, [fp, #-48]	; 0xffffffd0
   12a84:	bne	12abc <__assert_fail@plt+0x1b00>
   12a88:	ldr	r0, [sp, #68]	; 0x44
   12a8c:	ldrb	r0, [r0]
   12a90:	cmp	r0, #0
   12a94:	beq	12abc <__assert_fail@plt+0x1b00>
   12a98:	ldr	r1, [sp, #68]	; 0x44
   12a9c:	mov	r9, #0
   12aa0:	add	r1, r1, #1
   12aa4:	cmp	r9, sl
   12aa8:	strbcc	r0, [r6, r9]
   12aac:	ldrb	r0, [r1, r9]
   12ab0:	add	r9, r9, #1
   12ab4:	cmp	r0, #0
   12ab8:	bne	12aa4 <__assert_fail@plt+0x1ae8>
   12abc:	ldr	r8, [sp, #72]	; 0x48
   12ac0:	mov	r0, r8
   12ac4:	bl	10ef0 <strlen@plt>
   12ac8:	ldr	ip, [fp, #-84]	; 0xffffffac
   12acc:	ldr	lr, [sp, #84]	; 0x54
   12ad0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12ad4:	str	r0, [fp, #-76]	; 0xffffffb4
   12ad8:	str	r8, [sp, #92]	; 0x5c
   12adc:	mov	r3, #1
   12ae0:	ldr	r0, [fp, #16]
   12ae4:	str	r7, [fp, #-64]	; 0xffffffc0
   12ae8:	str	r5, [fp, #-72]	; 0xffffffb8
   12aec:	str	r3, [sp, #80]	; 0x50
   12af0:	cmp	r0, #0
   12af4:	movwne	r0, #1
   12af8:	and	r0, r0, r5
   12afc:	str	r0, [fp, #-88]	; 0xffffffa8
   12b00:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12b04:	cmp	r0, #0
   12b08:	movwne	r0, #1
   12b0c:	subs	r7, r7, #2
   12b10:	and	r1, r0, r5
   12b14:	str	r7, [fp, #-80]	; 0xffffffb0
   12b18:	and	r1, r3, r1
   12b1c:	str	r1, [sp, #40]	; 0x28
   12b20:	clz	r1, r7
   12b24:	lsr	r1, r1, #5
   12b28:	and	r1, r1, r5
   12b2c:	eor	r5, r5, #1
   12b30:	str	r1, [sp, #36]	; 0x24
   12b34:	mov	r1, r7
   12b38:	str	r5, [sp, #88]	; 0x58
   12b3c:	mov	r7, #0
   12b40:	movwne	r1, #1
   12b44:	orr	r5, r1, r5
   12b48:	and	r1, r1, r3
   12b4c:	and	r0, r0, r1
   12b50:	str	r5, [sp, #60]	; 0x3c
   12b54:	str	r1, [fp, #-68]	; 0xffffffbc
   12b58:	str	r0, [fp, #-60]	; 0xffffffc4
   12b5c:	eor	r0, r3, #1
   12b60:	str	r0, [sp, #44]	; 0x2c
   12b64:	cmn	lr, #1
   12b68:	beq	12b78 <__assert_fail@plt+0x1bbc>
   12b6c:	cmp	r7, lr
   12b70:	bne	12b84 <__assert_fail@plt+0x1bc8>
   12b74:	b	137fc <__assert_fail@plt+0x2840>
   12b78:	ldrb	r0, [ip, r7]
   12b7c:	cmp	r0, #0
   12b80:	beq	13804 <__assert_fail@plt+0x2848>
   12b84:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12b88:	mov	r8, #0
   12b8c:	str	r4, [fp, #-52]	; 0xffffffcc
   12b90:	str	r2, [fp, #-48]	; 0xffffffd0
   12b94:	cmp	r0, #0
   12b98:	beq	12bcc <__assert_fail@plt+0x1c10>
   12b9c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12ba0:	add	r4, r7, r0
   12ba4:	cmp	r0, #2
   12ba8:	bcc	12bc4 <__assert_fail@plt+0x1c08>
   12bac:	cmn	lr, #1
   12bb0:	bne	12bc4 <__assert_fail@plt+0x1c08>
   12bb4:	mov	r0, ip
   12bb8:	bl	10ef0 <strlen@plt>
   12bbc:	ldr	ip, [fp, #-84]	; 0xffffffac
   12bc0:	mov	lr, r0
   12bc4:	cmp	r4, lr
   12bc8:	bls	12be4 <__assert_fail@plt+0x1c28>
   12bcc:	mov	r0, #0
   12bd0:	str	r0, [fp, #-56]	; 0xffffffc8
   12bd4:	ldrb	r5, [ip, r7]
   12bd8:	cmp	r5, #126	; 0x7e
   12bdc:	bls	12c34 <__assert_fail@plt+0x1c78>
   12be0:	b	1303c <__assert_fail@plt+0x2080>
   12be4:	ldr	r1, [sp, #92]	; 0x5c
   12be8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12bec:	add	r0, ip, r7
   12bf0:	mov	r4, lr
   12bf4:	bl	10de8 <memcmp@plt>
   12bf8:	ldr	r2, [sp, #88]	; 0x58
   12bfc:	cmp	r0, #0
   12c00:	mov	r1, r0
   12c04:	movwne	r1, #1
   12c08:	orr	r1, r1, r2
   12c0c:	tst	r1, #1
   12c10:	beq	13910 <__assert_fail@plt+0x2954>
   12c14:	ldr	ip, [fp, #-84]	; 0xffffffac
   12c18:	clz	r0, r0
   12c1c:	mov	lr, r4
   12c20:	lsr	r0, r0, #5
   12c24:	str	r0, [fp, #-56]	; 0xffffffc8
   12c28:	ldrb	r5, [ip, r7]
   12c2c:	cmp	r5, #126	; 0x7e
   12c30:	bhi	1303c <__assert_fail@plt+0x2080>
   12c34:	add	r3, pc, #16
   12c38:	mov	r4, #1
   12c3c:	mov	r2, #110	; 0x6e
   12c40:	mov	r0, #97	; 0x61
   12c44:	mov	r1, #0
   12c48:	ldr	pc, [r3, r5, lsl #2]
   12c4c:	andeq	r2, r1, ip, lsl pc
   12c50:	andeq	r3, r1, ip, lsr r0
   12c54:	andeq	r3, r1, ip, lsr r0
   12c58:	andeq	r3, r1, ip, lsr r0
   12c5c:	andeq	r3, r1, ip, lsr r0
   12c60:	andeq	r3, r1, ip, lsr r0
   12c64:	andeq	r3, r1, ip, lsr r0
   12c68:	andeq	r3, r1, r8, lsl r1
   12c6c:	strdeq	r2, [r1], -ip
   12c70:	andeq	r2, r1, r4, ror #29
   12c74:	andeq	r2, r1, r8, lsl #30
   12c78:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   12c7c:	ldrdeq	r2, [r1], -ip
   12c80:	andeq	r2, r1, r4, lsl #30
   12c84:	andeq	r3, r1, ip, lsr r0
   12c88:	andeq	r3, r1, ip, lsr r0
   12c8c:	andeq	r3, r1, ip, lsr r0
   12c90:	andeq	r3, r1, ip, lsr r0
   12c94:	andeq	r3, r1, ip, lsr r0
   12c98:	andeq	r3, r1, ip, lsr r0
   12c9c:	andeq	r3, r1, ip, lsr r0
   12ca0:	andeq	r3, r1, ip, lsr r0
   12ca4:	andeq	r3, r1, ip, lsr r0
   12ca8:	andeq	r3, r1, ip, lsr r0
   12cac:	andeq	r3, r1, ip, lsr r0
   12cb0:	andeq	r3, r1, ip, lsr r0
   12cb4:	andeq	r3, r1, ip, lsr r0
   12cb8:	andeq	r3, r1, ip, lsr r0
   12cbc:	andeq	r3, r1, ip, lsr r0
   12cc0:	andeq	r3, r1, ip, lsr r0
   12cc4:	andeq	r3, r1, ip, lsr r0
   12cc8:	andeq	r3, r1, ip, lsr r0
   12ccc:	muleq	r1, r4, r0
   12cd0:	muleq	r1, r8, r0
   12cd4:	muleq	r1, r8, r0
   12cd8:	andeq	r2, r1, r8, ror #28
   12cdc:	muleq	r1, r8, r0
   12ce0:	andeq	r2, r1, r8, asr #28
   12ce4:	muleq	r1, r8, r0
   12ce8:	andeq	r2, r1, r0, lsr #31
   12cec:	muleq	r1, r8, r0
   12cf0:	muleq	r1, r8, r0
   12cf4:	muleq	r1, r8, r0
   12cf8:	andeq	r2, r1, r8, asr #28
   12cfc:	andeq	r2, r1, r8, asr #28
   12d00:	andeq	r2, r1, r8, asr #28
   12d04:	andeq	r2, r1, r8, asr #28
   12d08:	andeq	r2, r1, r8, asr #28
   12d0c:	andeq	r2, r1, r8, asr #28
   12d10:	andeq	r2, r1, r8, asr #28
   12d14:	andeq	r2, r1, r8, asr #28
   12d18:	andeq	r2, r1, r8, asr #28
   12d1c:	andeq	r2, r1, r8, asr #28
   12d20:	andeq	r2, r1, r8, asr #28
   12d24:	andeq	r2, r1, r8, asr #28
   12d28:	andeq	r2, r1, r8, asr #28
   12d2c:	andeq	r2, r1, r8, asr #28
   12d30:	andeq	r2, r1, r8, asr #28
   12d34:	andeq	r2, r1, r8, asr #28
   12d38:	muleq	r1, r8, r0
   12d3c:	muleq	r1, r8, r0
   12d40:	muleq	r1, r8, r0
   12d44:	muleq	r1, r8, r0
   12d48:	andeq	r2, r1, ip, asr pc
   12d4c:	andeq	r3, r1, ip, lsr r0
   12d50:	andeq	r2, r1, r8, asr #28
   12d54:	andeq	r2, r1, r8, asr #28
   12d58:	andeq	r2, r1, r8, asr #28
   12d5c:	andeq	r2, r1, r8, asr #28
   12d60:	andeq	r2, r1, r8, asr #28
   12d64:	andeq	r2, r1, r8, asr #28
   12d68:	andeq	r2, r1, r8, asr #28
   12d6c:	andeq	r2, r1, r8, asr #28
   12d70:	andeq	r2, r1, r8, asr #28
   12d74:	andeq	r2, r1, r8, asr #28
   12d78:	andeq	r2, r1, r8, asr #28
   12d7c:	andeq	r2, r1, r8, asr #28
   12d80:	andeq	r2, r1, r8, asr #28
   12d84:	andeq	r2, r1, r8, asr #28
   12d88:	andeq	r2, r1, r8, asr #28
   12d8c:	andeq	r2, r1, r8, asr #28
   12d90:	andeq	r2, r1, r8, asr #28
   12d94:	andeq	r2, r1, r8, asr #28
   12d98:	andeq	r2, r1, r8, asr #28
   12d9c:	andeq	r2, r1, r8, asr #28
   12da0:	andeq	r2, r1, r8, asr #28
   12da4:	andeq	r2, r1, r8, asr #28
   12da8:	andeq	r2, r1, r8, asr #28
   12dac:	andeq	r2, r1, r8, asr #28
   12db0:	andeq	r2, r1, r8, asr #28
   12db4:	andeq	r2, r1, r8, asr #28
   12db8:	muleq	r1, r8, r0
   12dbc:	andeq	r2, r1, r8, lsr #29
   12dc0:	andeq	r2, r1, r8, asr #28
   12dc4:	muleq	r1, r8, r0
   12dc8:	andeq	r2, r1, r8, asr #28
   12dcc:	muleq	r1, r8, r0
   12dd0:	andeq	r2, r1, r8, asr #28
   12dd4:	andeq	r2, r1, r8, asr #28
   12dd8:	andeq	r2, r1, r8, asr #28
   12ddc:	andeq	r2, r1, r8, asr #28
   12de0:	andeq	r2, r1, r8, asr #28
   12de4:	andeq	r2, r1, r8, asr #28
   12de8:	andeq	r2, r1, r8, asr #28
   12dec:	andeq	r2, r1, r8, asr #28
   12df0:	andeq	r2, r1, r8, asr #28
   12df4:	andeq	r2, r1, r8, asr #28
   12df8:	andeq	r2, r1, r8, asr #28
   12dfc:	andeq	r2, r1, r8, asr #28
   12e00:	andeq	r2, r1, r8, asr #28
   12e04:	andeq	r2, r1, r8, asr #28
   12e08:	andeq	r2, r1, r8, asr #28
   12e0c:	andeq	r2, r1, r8, asr #28
   12e10:	andeq	r2, r1, r8, asr #28
   12e14:	andeq	r2, r1, r8, asr #28
   12e18:	andeq	r2, r1, r8, asr #28
   12e1c:	andeq	r2, r1, r8, asr #28
   12e20:	andeq	r2, r1, r8, asr #28
   12e24:	andeq	r2, r1, r8, asr #28
   12e28:	andeq	r2, r1, r8, asr #28
   12e2c:	andeq	r2, r1, r8, asr #28
   12e30:	andeq	r2, r1, r8, asr #28
   12e34:	andeq	r2, r1, r8, asr #28
   12e38:	andeq	r2, r1, r8, lsl #29
   12e3c:	muleq	r1, r8, r0
   12e40:	andeq	r2, r1, r8, lsl #29
   12e44:	andeq	r2, r1, r8, ror #28
   12e48:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12e4c:	cmp	r0, #0
   12e50:	beq	1312c <__assert_fail@plt+0x2170>
   12e54:	ldr	r0, [fp, #16]
   12e58:	cmp	r0, #0
   12e5c:	mov	r0, r5
   12e60:	bne	1313c <__assert_fail@plt+0x2180>
   12e64:	b	1315c <__assert_fail@plt+0x21a0>
   12e68:	mov	r4, #0
   12e6c:	cmp	r7, #0
   12e70:	beq	13094 <__assert_fail@plt+0x20d8>
   12e74:	mov	r8, #0
   12e78:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12e7c:	cmp	r0, #0
   12e80:	bne	12e54 <__assert_fail@plt+0x1e98>
   12e84:	b	1312c <__assert_fail@plt+0x2170>
   12e88:	mov	r4, #0
   12e8c:	cmn	lr, #1
   12e90:	beq	1306c <__assert_fail@plt+0x20b0>
   12e94:	cmp	r7, #0
   12e98:	bne	12e74 <__assert_fail@plt+0x1eb8>
   12e9c:	cmp	lr, #1
   12ea0:	beq	13094 <__assert_fail@plt+0x20d8>
   12ea4:	b	12e74 <__assert_fail@plt+0x1eb8>
   12ea8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12eac:	cmp	r0, #2
   12eb0:	bne	130c4 <__assert_fail@plt+0x2108>
   12eb4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12eb8:	tst	r0, #1
   12ebc:	bne	13924 <__assert_fail@plt+0x2968>
   12ec0:	mov	r8, #0
   12ec4:	mov	r0, #92	; 0x5c
   12ec8:	mov	r4, #0
   12ecc:	cmp	r8, #0
   12ed0:	beq	130e4 <__assert_fail@plt+0x2128>
   12ed4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12ed8:	b	131d8 <__assert_fail@plt+0x221c>
   12edc:	mov	r0, #102	; 0x66
   12ee0:	b	13118 <__assert_fail@plt+0x215c>
   12ee4:	mov	r2, #116	; 0x74
   12ee8:	ldr	r0, [sp, #60]	; 0x3c
   12eec:	tst	r0, #1
   12ef0:	mov	r0, r2
   12ef4:	bne	13118 <__assert_fail@plt+0x215c>
   12ef8:	b	13924 <__assert_fail@plt+0x2968>
   12efc:	mov	r0, #98	; 0x62
   12f00:	b	13118 <__assert_fail@plt+0x215c>
   12f04:	mov	r2, #114	; 0x72
   12f08:	ldr	r0, [sp, #60]	; 0x3c
   12f0c:	tst	r0, #1
   12f10:	mov	r0, r2
   12f14:	bne	13118 <__assert_fail@plt+0x215c>
   12f18:	b	13924 <__assert_fail@plt+0x2968>
   12f1c:	ldr	r0, [sp, #80]	; 0x50
   12f20:	tst	r0, #1
   12f24:	beq	13200 <__assert_fail@plt+0x2244>
   12f28:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12f2c:	tst	r0, #1
   12f30:	bne	13a4c <__assert_fail@plt+0x2a90>
   12f34:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12f38:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12f3c:	cmp	r0, #2
   12f40:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12f44:	movwne	r0, #1
   12f48:	orr	r0, r0, r2
   12f4c:	tst	r0, #1
   12f50:	beq	134f8 <__assert_fail@plt+0x253c>
   12f54:	mov	r0, r9
   12f58:	b	1352c <__assert_fail@plt+0x2570>
   12f5c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12f60:	mov	r8, #0
   12f64:	mov	r5, #63	; 0x3f
   12f68:	cmp	r0, #5
   12f6c:	beq	133b4 <__assert_fail@plt+0x23f8>
   12f70:	cmp	r0, #2
   12f74:	bne	13464 <__assert_fail@plt+0x24a8>
   12f78:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12f7c:	tst	r0, #1
   12f80:	bne	13924 <__assert_fail@plt+0x2968>
   12f84:	mov	r4, #0
   12f88:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12f8c:	cmp	r0, #0
   12f90:	bne	12e54 <__assert_fail@plt+0x1e98>
   12f94:	b	1312c <__assert_fail@plt+0x2170>
   12f98:	mov	r0, #118	; 0x76
   12f9c:	b	13118 <__assert_fail@plt+0x215c>
   12fa0:	mov	r0, #1
   12fa4:	mov	r5, #39	; 0x27
   12fa8:	str	r0, [sp, #52]	; 0x34
   12fac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12fb0:	cmp	r0, #2
   12fb4:	bne	13028 <__assert_fail@plt+0x206c>
   12fb8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12fbc:	tst	r0, #1
   12fc0:	bne	13924 <__assert_fail@plt+0x2968>
   12fc4:	ldr	r2, [sp, #48]	; 0x30
   12fc8:	clz	r1, sl
   12fcc:	mov	r8, #0
   12fd0:	lsr	r1, r1, #5
   12fd4:	cmp	r2, #0
   12fd8:	mov	r0, r2
   12fdc:	movwne	r0, #1
   12fe0:	orrs	r0, r0, r1
   12fe4:	moveq	r2, sl
   12fe8:	moveq	sl, r0
   12fec:	cmp	r9, sl
   12ff0:	str	r2, [sp, #48]	; 0x30
   12ff4:	movcc	r0, #39	; 0x27
   12ff8:	strbcc	r0, [r6, r9]
   12ffc:	add	r0, r9, #1
   13000:	cmp	r0, sl
   13004:	movcc	r1, #92	; 0x5c
   13008:	strbcc	r1, [r6, r0]
   1300c:	add	r0, r9, #2
   13010:	add	r9, r9, #3
   13014:	cmp	r0, sl
   13018:	movcc	r1, #39	; 0x27
   1301c:	strbcc	r1, [r6, r0]
   13020:	mov	r0, #0
   13024:	str	r0, [fp, #-48]	; 0xffffffd0
   13028:	mov	r4, #1
   1302c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13030:	cmp	r0, #0
   13034:	bne	12e54 <__assert_fail@plt+0x1e98>
   13038:	b	1312c <__assert_fail@plt+0x2170>
   1303c:	ldr	r0, [sp, #32]
   13040:	cmp	r0, #1
   13044:	bne	13230 <__assert_fail@plt+0x2274>
   13048:	str	lr, [sp, #84]	; 0x54
   1304c:	bl	10ed8 <__ctype_b_loc@plt>
   13050:	ldr	r0, [r0]
   13054:	ldr	ip, [fp, #-84]	; 0xffffffac
   13058:	mov	r1, #1
   1305c:	add	r0, r0, r5, lsl #1
   13060:	ldrb	r0, [r0, #1]
   13064:	ubfx	r4, r0, #6, #1
   13068:	b	13628 <__assert_fail@plt+0x266c>
   1306c:	cmp	r7, #0
   13070:	ldrbeq	r0, [ip, #1]
   13074:	cmpeq	r0, #0
   13078:	beq	13094 <__assert_fail@plt+0x20d8>
   1307c:	mvn	lr, #0
   13080:	mov	r8, #0
   13084:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13088:	cmp	r0, #0
   1308c:	bne	12e54 <__assert_fail@plt+0x1e98>
   13090:	b	1312c <__assert_fail@plt+0x2170>
   13094:	mov	r1, #1
   13098:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1309c:	cmp	r0, #2
   130a0:	bne	130b0 <__assert_fail@plt+0x20f4>
   130a4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   130a8:	tst	r0, #1
   130ac:	bne	13924 <__assert_fail@plt+0x2968>
   130b0:	mov	r4, r1
   130b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   130b8:	cmp	r0, #0
   130bc:	bne	12e54 <__assert_fail@plt+0x1e98>
   130c0:	b	1312c <__assert_fail@plt+0x2170>
   130c4:	ldr	r1, [sp, #40]	; 0x28
   130c8:	mov	r8, #0
   130cc:	mov	r0, #92	; 0x5c
   130d0:	cmp	r1, #0
   130d4:	beq	13118 <__assert_fail@plt+0x215c>
   130d8:	mov	r4, #0
   130dc:	cmp	r8, #0
   130e0:	bne	12ed4 <__assert_fail@plt+0x1f18>
   130e4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   130e8:	tst	r2, #1
   130ec:	beq	131d8 <__assert_fail@plt+0x221c>
   130f0:	cmp	r9, sl
   130f4:	movcc	r1, #39	; 0x27
   130f8:	strbcc	r1, [r6, r9]
   130fc:	add	r1, r9, #1
   13100:	add	r9, r9, #2
   13104:	cmp	r1, sl
   13108:	movcc	r2, #39	; 0x27
   1310c:	strbcc	r2, [r6, r1]
   13110:	mov	r2, #0
   13114:	b	131d8 <__assert_fail@plt+0x221c>
   13118:	ldr	r1, [sp, #80]	; 0x50
   1311c:	mov	r4, #0
   13120:	mov	r8, #0
   13124:	tst	r1, #1
   13128:	bne	13168 <__assert_fail@plt+0x21ac>
   1312c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13130:	cmp	r0, #0
   13134:	mov	r0, r5
   13138:	beq	1315c <__assert_fail@plt+0x21a0>
   1313c:	ldr	r1, [fp, #16]
   13140:	ubfx	r0, r5, #5, #3
   13144:	mov	r2, #1
   13148:	ldr	r0, [r1, r0, lsl #2]
   1314c:	and	r1, r5, #31
   13150:	tst	r0, r2, lsl r1
   13154:	mov	r0, r5
   13158:	bne	13168 <__assert_fail@plt+0x21ac>
   1315c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13160:	cmp	r1, #0
   13164:	beq	135c0 <__assert_fail@plt+0x2604>
   13168:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1316c:	tst	r1, #1
   13170:	bne	13904 <__assert_fail@plt+0x2948>
   13174:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13178:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1317c:	cmp	r1, #2
   13180:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13184:	movwne	r1, #1
   13188:	orr	r1, r1, r2
   1318c:	tst	r1, #1
   13190:	bne	131c8 <__assert_fail@plt+0x220c>
   13194:	cmp	r9, sl
   13198:	movcc	r1, #39	; 0x27
   1319c:	strbcc	r1, [r6, r9]
   131a0:	add	r1, r9, #1
   131a4:	cmp	r1, sl
   131a8:	movcc	r2, #36	; 0x24
   131ac:	strbcc	r2, [r6, r1]
   131b0:	add	r1, r9, #2
   131b4:	add	r9, r9, #3
   131b8:	cmp	r1, sl
   131bc:	movcc	r2, #39	; 0x27
   131c0:	strbcc	r2, [r6, r1]
   131c4:	mov	r2, #1
   131c8:	cmp	r9, sl
   131cc:	movcc	r1, #92	; 0x5c
   131d0:	strbcc	r1, [r6, r9]
   131d4:	add	r9, r9, #1
   131d8:	cmp	r9, sl
   131dc:	add	r7, r7, #1
   131e0:	strbcc	r0, [r6, r9]
   131e4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   131e8:	add	r9, r9, #1
   131ec:	and	r0, r0, r4
   131f0:	mov	r4, r0
   131f4:	cmn	lr, #1
   131f8:	bne	12b6c <__assert_fail@plt+0x1bb0>
   131fc:	b	12b78 <__assert_fail@plt+0x1bbc>
   13200:	ldr	r0, [sp, #28]
   13204:	mov	r4, #0
   13208:	mov	r8, #0
   1320c:	mov	r5, #0
   13210:	cmp	r0, #0
   13214:	beq	1312c <__assert_fail@plt+0x2170>
   13218:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1321c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13220:	add	r7, r7, #1
   13224:	cmn	lr, #1
   13228:	bne	12b6c <__assert_fail@plt+0x1bb0>
   1322c:	b	12b78 <__assert_fail@plt+0x1bbc>
   13230:	mov	r0, #0
   13234:	cmn	lr, #1
   13238:	str	r0, [fp, #-36]	; 0xffffffdc
   1323c:	str	r0, [fp, #-40]	; 0xffffffd8
   13240:	bne	13254 <__assert_fail@plt+0x2298>
   13244:	mov	r0, ip
   13248:	bl	10ef0 <strlen@plt>
   1324c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13250:	mov	lr, r0
   13254:	ldr	r0, [sp, #36]	; 0x24
   13258:	str	sl, [sp, #56]	; 0x38
   1325c:	str	lr, [sp, #84]	; 0x54
   13260:	cmp	r0, #0
   13264:	beq	1347c <__assert_fail@plt+0x24c0>
   13268:	add	r0, ip, r7
   1326c:	mov	r4, #1
   13270:	mov	r6, #0
   13274:	sub	sl, fp, #40	; 0x28
   13278:	str	r0, [sp, #20]
   1327c:	str	r6, [sp, #64]	; 0x40
   13280:	add	r6, r6, r7
   13284:	sub	r0, fp, #44	; 0x2c
   13288:	mov	r3, sl
   1328c:	add	r1, ip, r6
   13290:	sub	r2, lr, r6
   13294:	bl	15558 <__assert_fail@plt+0x459c>
   13298:	cmn	r0, #2
   1329c:	beq	135d8 <__assert_fail@plt+0x261c>
   132a0:	ldr	sl, [sp, #56]	; 0x38
   132a4:	cmn	r0, #1
   132a8:	beq	135cc <__assert_fail@plt+0x2610>
   132ac:	cmp	r0, #0
   132b0:	beq	135d0 <__assert_fail@plt+0x2614>
   132b4:	cmp	r0, #2
   132b8:	bcc	13378 <__assert_fail@plt+0x23bc>
   132bc:	ldr	r1, [sp, #64]	; 0x40
   132c0:	ldr	r2, [sp, #20]
   132c4:	add	r1, r2, r1
   132c8:	mov	r2, #1
   132cc:	ldrb	r3, [r1, r2]
   132d0:	sub	r3, r3, #91	; 0x5b
   132d4:	cmp	r3, #33	; 0x21
   132d8:	bhi	1336c <__assert_fail@plt+0x23b0>
   132dc:	add	r6, pc, #0
   132e0:	ldr	pc, [r6, r3, lsl #2]
   132e4:	andeq	r3, r1, r0, lsr r9
   132e8:	andeq	r3, r1, r0, lsr r9
   132ec:	andeq	r3, r1, ip, ror #6
   132f0:	andeq	r3, r1, r0, lsr r9
   132f4:	andeq	r3, r1, ip, ror #6
   132f8:	andeq	r3, r1, r0, lsr r9
   132fc:	andeq	r3, r1, ip, ror #6
   13300:	andeq	r3, r1, ip, ror #6
   13304:	andeq	r3, r1, ip, ror #6
   13308:	andeq	r3, r1, ip, ror #6
   1330c:	andeq	r3, r1, ip, ror #6
   13310:	andeq	r3, r1, ip, ror #6
   13314:	andeq	r3, r1, ip, ror #6
   13318:	andeq	r3, r1, ip, ror #6
   1331c:	andeq	r3, r1, ip, ror #6
   13320:	andeq	r3, r1, ip, ror #6
   13324:	andeq	r3, r1, ip, ror #6
   13328:	andeq	r3, r1, ip, ror #6
   1332c:	andeq	r3, r1, ip, ror #6
   13330:	andeq	r3, r1, ip, ror #6
   13334:	andeq	r3, r1, ip, ror #6
   13338:	andeq	r3, r1, ip, ror #6
   1333c:	andeq	r3, r1, ip, ror #6
   13340:	andeq	r3, r1, ip, ror #6
   13344:	andeq	r3, r1, ip, ror #6
   13348:	andeq	r3, r1, ip, ror #6
   1334c:	andeq	r3, r1, ip, ror #6
   13350:	andeq	r3, r1, ip, ror #6
   13354:	andeq	r3, r1, ip, ror #6
   13358:	andeq	r3, r1, ip, ror #6
   1335c:	andeq	r3, r1, ip, ror #6
   13360:	andeq	r3, r1, ip, ror #6
   13364:	andeq	r3, r1, ip, ror #6
   13368:	andeq	r3, r1, r0, lsr r9
   1336c:	add	r2, r2, #1
   13370:	cmp	r2, r0
   13374:	bcc	132cc <__assert_fail@plt+0x2310>
   13378:	ldr	r6, [sp, #64]	; 0x40
   1337c:	add	r6, r0, r6
   13380:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13384:	bl	10e24 <iswprint@plt>
   13388:	cmp	r0, #0
   1338c:	sub	sl, fp, #40	; 0x28
   13390:	movwne	r0, #1
   13394:	and	r4, r4, r0
   13398:	mov	r0, sl
   1339c:	bl	10ddc <mbsinit@plt>
   133a0:	ldr	ip, [fp, #-84]	; 0xffffffac
   133a4:	ldr	lr, [sp, #84]	; 0x54
   133a8:	cmp	r0, #0
   133ac:	beq	1327c <__assert_fail@plt+0x22c0>
   133b0:	b	1361c <__assert_fail@plt+0x2660>
   133b4:	ldr	r0, [sp, #24]
   133b8:	cmp	r0, #0
   133bc:	beq	13464 <__assert_fail@plt+0x24a8>
   133c0:	add	r0, r7, #2
   133c4:	cmp	r0, lr
   133c8:	bcs	13464 <__assert_fail@plt+0x24a8>
   133cc:	add	r1, ip, r7
   133d0:	ldrb	r1, [r1, #1]
   133d4:	cmp	r1, #63	; 0x3f
   133d8:	bne	13464 <__assert_fail@plt+0x24a8>
   133dc:	ldrb	r5, [ip, r0]
   133e0:	sub	r1, r5, #33	; 0x21
   133e4:	cmp	r1, #29
   133e8:	bhi	13464 <__assert_fail@plt+0x24a8>
   133ec:	movw	r3, #20929	; 0x51c1
   133f0:	mov	r2, #1
   133f4:	movt	r3, #14336	; 0x3800
   133f8:	tst	r3, r2, lsl r1
   133fc:	beq	13464 <__assert_fail@plt+0x24a8>
   13400:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13404:	tst	r1, #1
   13408:	bne	13a54 <__assert_fail@plt+0x2a98>
   1340c:	cmp	r9, sl
   13410:	mov	r7, r0
   13414:	mov	r4, #0
   13418:	movcc	r1, #63	; 0x3f
   1341c:	strbcc	r1, [r6, r9]
   13420:	add	r1, r9, #1
   13424:	cmp	r1, sl
   13428:	movcc	r2, #34	; 0x22
   1342c:	strbcc	r2, [r6, r1]
   13430:	add	r1, r9, #2
   13434:	cmp	r1, sl
   13438:	movcc	r2, #34	; 0x22
   1343c:	strbcc	r2, [r6, r1]
   13440:	add	r1, r9, #3
   13444:	add	r9, r9, #4
   13448:	cmp	r1, sl
   1344c:	movcc	r2, #63	; 0x3f
   13450:	strbcc	r2, [r6, r1]
   13454:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13458:	cmp	r0, #0
   1345c:	bne	12e54 <__assert_fail@plt+0x1e98>
   13460:	b	1312c <__assert_fail@plt+0x2170>
   13464:	mov	r5, #63	; 0x3f
   13468:	mov	r4, #0
   1346c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13470:	cmp	r0, #0
   13474:	bne	12e54 <__assert_fail@plt+0x1e98>
   13478:	b	1312c <__assert_fail@plt+0x2170>
   1347c:	mov	r4, #1
   13480:	mov	r6, #0
   13484:	sub	sl, fp, #40	; 0x28
   13488:	str	r6, [sp, #64]	; 0x40
   1348c:	add	r6, r6, r7
   13490:	sub	r0, fp, #44	; 0x2c
   13494:	mov	r3, sl
   13498:	add	r1, ip, r6
   1349c:	sub	r2, lr, r6
   134a0:	bl	15558 <__assert_fail@plt+0x459c>
   134a4:	cmn	r0, #2
   134a8:	beq	135d8 <__assert_fail@plt+0x261c>
   134ac:	cmn	r0, #1
   134b0:	beq	135cc <__assert_fail@plt+0x2610>
   134b4:	ldr	r6, [sp, #64]	; 0x40
   134b8:	cmp	r0, #0
   134bc:	beq	13618 <__assert_fail@plt+0x265c>
   134c0:	add	r6, r0, r6
   134c4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   134c8:	bl	10e24 <iswprint@plt>
   134cc:	cmp	r0, #0
   134d0:	sub	sl, fp, #40	; 0x28
   134d4:	movwne	r0, #1
   134d8:	and	r4, r4, r0
   134dc:	mov	r0, sl
   134e0:	bl	10ddc <mbsinit@plt>
   134e4:	ldr	ip, [fp, #-84]	; 0xffffffac
   134e8:	ldr	lr, [sp, #84]	; 0x54
   134ec:	cmp	r0, #0
   134f0:	beq	13488 <__assert_fail@plt+0x24cc>
   134f4:	b	1361c <__assert_fail@plt+0x2660>
   134f8:	cmp	r9, sl
   134fc:	mov	r2, #1
   13500:	movcc	r0, #39	; 0x27
   13504:	strbcc	r0, [r6, r9]
   13508:	add	r0, r9, #1
   1350c:	cmp	r0, sl
   13510:	movcc	r1, #36	; 0x24
   13514:	strbcc	r1, [r6, r0]
   13518:	add	r0, r9, #2
   1351c:	cmp	r0, sl
   13520:	movcc	r1, #39	; 0x27
   13524:	strbcc	r1, [r6, r0]
   13528:	add	r0, r9, #3
   1352c:	cmp	r0, sl
   13530:	add	r9, r0, #1
   13534:	str	r2, [fp, #-48]	; 0xffffffd0
   13538:	movcc	r1, #92	; 0x5c
   1353c:	strbcc	r1, [r6, r0]
   13540:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13544:	cmp	r1, #2
   13548:	beq	135a8 <__assert_fail@plt+0x25ec>
   1354c:	add	r1, r7, #1
   13550:	mov	r4, #0
   13554:	mov	r8, #1
   13558:	mov	r5, #48	; 0x30
   1355c:	cmp	r1, lr
   13560:	bcs	12e48 <__assert_fail@plt+0x1e8c>
   13564:	ldrb	r1, [ip, r1]
   13568:	sub	r1, r1, #48	; 0x30
   1356c:	uxtb	r1, r1
   13570:	cmp	r1, #9
   13574:	bhi	12e48 <__assert_fail@plt+0x1e8c>
   13578:	cmp	r9, sl
   1357c:	movcc	r1, #48	; 0x30
   13580:	strbcc	r1, [r6, r9]
   13584:	add	r1, r0, #2
   13588:	add	r9, r0, #3
   1358c:	cmp	r1, sl
   13590:	movcc	r2, #48	; 0x30
   13594:	strbcc	r2, [r6, r1]
   13598:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1359c:	cmp	r0, #0
   135a0:	bne	12e54 <__assert_fail@plt+0x1e98>
   135a4:	b	1312c <__assert_fail@plt+0x2170>
   135a8:	mov	r0, #48	; 0x30
   135ac:	mov	r8, #1
   135b0:	mov	r4, #0
   135b4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   135b8:	cmp	r1, #0
   135bc:	bne	13168 <__assert_fail@plt+0x21ac>
   135c0:	cmp	r8, #0
   135c4:	beq	130e4 <__assert_fail@plt+0x2128>
   135c8:	b	12ed4 <__assert_fail@plt+0x1f18>
   135cc:	mov	r4, #0
   135d0:	ldr	ip, [fp, #-84]	; 0xffffffac
   135d4:	b	13610 <__assert_fail@plt+0x2654>
   135d8:	ldr	r1, [sp, #84]	; 0x54
   135dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   135e0:	mov	r4, #0
   135e4:	cmp	r6, r1
   135e8:	bcs	13610 <__assert_fail@plt+0x2654>
   135ec:	ldrb	r0, [ip, r6]
   135f0:	cmp	r0, #0
   135f4:	beq	13610 <__assert_fail@plt+0x2654>
   135f8:	ldr	r0, [sp, #64]	; 0x40
   135fc:	add	r0, r0, #1
   13600:	add	r6, r0, r7
   13604:	str	r0, [sp, #64]	; 0x40
   13608:	cmp	r6, r1
   1360c:	bcc	135ec <__assert_fail@plt+0x2630>
   13610:	ldr	r6, [sp, #64]	; 0x40
   13614:	b	1361c <__assert_fail@plt+0x2660>
   13618:	ldr	ip, [fp, #-84]	; 0xffffffac
   1361c:	mov	r1, r6
   13620:	ldr	r6, [sp, #76]	; 0x4c
   13624:	ldr	sl, [sp, #56]	; 0x38
   13628:	ldr	r0, [sp, #44]	; 0x2c
   1362c:	cmp	r1, #1
   13630:	orr	r2, r4, r0
   13634:	mov	r0, r1
   13638:	bhi	13658 <__assert_fail@plt+0x269c>
   1363c:	tst	r2, #1
   13640:	beq	13658 <__assert_fail@plt+0x269c>
   13644:	ldr	lr, [sp, #84]	; 0x54
   13648:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1364c:	cmp	r0, #0
   13650:	bne	12e54 <__assert_fail@plt+0x1e98>
   13654:	b	1312c <__assert_fail@plt+0x2170>
   13658:	str	r2, [sp, #64]	; 0x40
   1365c:	add	r0, r0, r7
   13660:	add	r1, r7, #1
   13664:	ldr	lr, [sp, #84]	; 0x54
   13668:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1366c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13670:	mov	r3, #0
   13674:	str	r0, [sp, #56]	; 0x38
   13678:	ldr	r0, [sp, #64]	; 0x40
   1367c:	tst	r0, #1
   13680:	bne	13768 <__assert_fail@plt+0x27ac>
   13684:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13688:	tst	r0, #1
   1368c:	bne	13908 <__assert_fail@plt+0x294c>
   13690:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13694:	cmp	r7, #2
   13698:	movwne	r3, #1
   1369c:	orr	r3, r3, r2
   136a0:	tst	r3, #1
   136a4:	bne	136dc <__assert_fail@plt+0x2720>
   136a8:	cmp	r9, sl
   136ac:	add	r3, r9, #1
   136b0:	movcc	r2, #39	; 0x27
   136b4:	strbcc	r2, [r6, r9]
   136b8:	cmp	r3, sl
   136bc:	movcc	r2, #36	; 0x24
   136c0:	strbcc	r2, [r6, r3]
   136c4:	add	r3, r9, #2
   136c8:	add	r9, r9, #3
   136cc:	cmp	r3, sl
   136d0:	movcc	r2, #39	; 0x27
   136d4:	strbcc	r2, [r6, r3]
   136d8:	mov	r2, #1
   136dc:	cmp	r9, sl
   136e0:	mov	r0, r2
   136e4:	movcc	r3, #92	; 0x5c
   136e8:	strbcc	r3, [r6, r9]
   136ec:	add	r3, r9, #1
   136f0:	cmp	r3, sl
   136f4:	andcc	r7, r5, #192	; 0xc0
   136f8:	movcc	r2, #48	; 0x30
   136fc:	orrcc	r7, r2, r7, lsr #6
   13700:	strbcc	r7, [r6, r3]
   13704:	add	r3, r9, #2
   13708:	add	r9, r9, #3
   1370c:	cmp	r3, sl
   13710:	lsrcc	r7, r5, #3
   13714:	movcc	r2, #6
   13718:	bficc	r7, r2, #3, #29
   1371c:	mov	r2, #6
   13720:	strbcc	r7, [r6, r3]
   13724:	bfi	r5, r2, #3, #29
   13728:	mov	r3, #1
   1372c:	mov	r2, r0
   13730:	ldr	r0, [sp, #56]	; 0x38
   13734:	and	r8, r3, #1
   13738:	cmp	r0, r1
   1373c:	bhi	1379c <__assert_fail@plt+0x27e0>
   13740:	b	137dc <__assert_fail@plt+0x2820>
   13744:	cmp	r9, sl
   13748:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1374c:	strbcc	r5, [r6, r9]
   13750:	add	r9, r9, #1
   13754:	ldrb	r5, [ip, r1]
   13758:	add	r1, r1, #1
   1375c:	ldr	r0, [sp, #64]	; 0x40
   13760:	tst	r0, #1
   13764:	beq	13684 <__assert_fail@plt+0x26c8>
   13768:	ldr	r7, [fp, #-56]	; 0xffffffc8
   1376c:	tst	r7, #1
   13770:	beq	13784 <__assert_fail@plt+0x27c8>
   13774:	cmp	r9, sl
   13778:	movcc	r7, #92	; 0x5c
   1377c:	strbcc	r7, [r6, r9]
   13780:	add	r9, r9, #1
   13784:	mov	r7, #0
   13788:	str	r7, [fp, #-56]	; 0xffffffc8
   1378c:	ldr	r0, [sp, #56]	; 0x38
   13790:	and	r8, r3, #1
   13794:	cmp	r0, r1
   13798:	bls	137dc <__assert_fail@plt+0x2820>
   1379c:	cmp	r8, #0
   137a0:	mvn	r7, r2
   137a4:	movwne	r8, #1
   137a8:	orr	r7, r7, r8
   137ac:	tst	r7, #1
   137b0:	bne	13744 <__assert_fail@plt+0x2788>
   137b4:	cmp	r9, sl
   137b8:	movcc	r7, #39	; 0x27
   137bc:	strbcc	r7, [r6, r9]
   137c0:	add	r7, r9, #1
   137c4:	add	r9, r9, #2
   137c8:	cmp	r7, sl
   137cc:	movcc	r2, #39	; 0x27
   137d0:	strbcc	r2, [r6, r7]
   137d4:	mov	r2, #0
   137d8:	b	13744 <__assert_fail@plt+0x2788>
   137dc:	cmp	r8, #0
   137e0:	sub	r7, r1, #1
   137e4:	mov	r0, r5
   137e8:	str	r2, [fp, #-48]	; 0xffffffd0
   137ec:	movwne	r8, #1
   137f0:	cmp	r8, #0
   137f4:	beq	130e4 <__assert_fail@plt+0x2128>
   137f8:	b	12ed4 <__assert_fail@plt+0x1f18>
   137fc:	mov	lr, r7
   13800:	b	13808 <__assert_fail@plt+0x284c>
   13804:	mvn	lr, #0
   13808:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1380c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13810:	eor	r0, r7, #2
   13814:	orr	r0, r0, r9
   13818:	clz	r0, r0
   1381c:	lsr	r0, r0, #5
   13820:	tst	r1, r0
   13824:	bne	13924 <__assert_fail@plt+0x2968>
   13828:	mov	r0, r1
   1382c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13830:	cmp	r7, #2
   13834:	movwne	r1, #1
   13838:	orr	r0, r0, r1
   1383c:	tst	r0, #1
   13840:	ldreq	r0, [sp, #52]	; 0x34
   13844:	streq	lr, [sp, #84]	; 0x54
   13848:	eoreq	r0, r0, #1
   1384c:	tsteq	r0, #1
   13850:	bne	139e8 <__assert_fail@plt+0x2a2c>
   13854:	tst	r4, #1
   13858:	bne	139a4 <__assert_fail@plt+0x29e8>
   1385c:	ldr	r6, [sp, #48]	; 0x30
   13860:	mov	r8, #0
   13864:	cmp	r6, #0
   13868:	beq	139e0 <__assert_fail@plt+0x2a24>
   1386c:	ldr	r0, [sp, #80]	; 0x50
   13870:	mov	r1, #0
   13874:	cmp	sl, #0
   13878:	mov	r4, #0
   1387c:	str	r1, [fp, #-72]	; 0xffffffb8
   13880:	beq	12774 <__assert_fail@plt+0x17b8>
   13884:	b	139e8 <__assert_fail@plt+0x2a2c>
   13888:	ldrb	r1, [r0, #3]
   1388c:	cmp	r1, #56	; 0x38
   13890:	ldrbeq	r1, [r0, #4]
   13894:	cmpeq	r1, #48	; 0x30
   13898:	bne	1296c <__assert_fail@plt+0x19b0>
   1389c:	ldrb	r1, [r0, #5]
   138a0:	cmp	r1, #51	; 0x33
   138a4:	ldrbeq	r1, [r0, #6]
   138a8:	cmpeq	r1, #48	; 0x30
   138ac:	bne	1296c <__assert_fail@plt+0x19b0>
   138b0:	ldrb	r0, [r0, #7]
   138b4:	cmp	r0, #0
   138b8:	movw	r0, #23706	; 0x5c9a
   138bc:	movt	r0, #1
   138c0:	str	r0, [sp, #68]	; 0x44
   138c4:	bne	1296c <__assert_fail@plt+0x19b0>
   138c8:	b	12988 <__assert_fail@plt+0x19cc>
   138cc:	ldrb	r1, [r0, #4]
   138d0:	cmp	r1, #48	; 0x30
   138d4:	ldrbeq	r1, [r0, #5]
   138d8:	cmpeq	r1, #51	; 0x33
   138dc:	bne	12a50 <__assert_fail@plt+0x1a94>
   138e0:	ldrb	r1, [r0, #6]
   138e4:	cmp	r1, #48	; 0x30
   138e8:	ldrbeq	r0, [r0, #7]
   138ec:	cmpeq	r0, #0
   138f0:	bne	12a50 <__assert_fail@plt+0x1a94>
   138f4:	movw	r0, #23710	; 0x5c9e
   138f8:	movt	r0, #1
   138fc:	str	r0, [sp, #72]	; 0x48
   13900:	b	12a70 <__assert_fail@plt+0x1ab4>
   13904:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13908:	ldr	r2, [sp, #80]	; 0x50
   1390c:	b	13944 <__assert_fail@plt+0x2988>
   13910:	ldr	ip, [fp, #-84]	; 0xffffffac
   13914:	mov	r2, #1
   13918:	mov	lr, r4
   1391c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13920:	b	13944 <__assert_fail@plt+0x2988>
   13924:	ldr	r2, [sp, #80]	; 0x50
   13928:	mov	r7, #2
   1392c:	b	13944 <__assert_fail@plt+0x2988>
   13930:	ldr	r6, [sp, #76]	; 0x4c
   13934:	ldr	ip, [fp, #-84]	; 0xffffffac
   13938:	ldr	lr, [sp, #84]	; 0x54
   1393c:	ldr	r2, [sp, #80]	; 0x50
   13940:	mov	r7, #2
   13944:	mov	r0, #0
   13948:	ldr	r1, [fp, #12]
   1394c:	tst	r2, #1
   13950:	mov	r2, r7
   13954:	mov	r3, lr
   13958:	str	r0, [sp, #8]
   1395c:	ldr	r0, [sp, #68]	; 0x44
   13960:	movwne	r2, #4
   13964:	cmp	r7, #2
   13968:	movne	r2, r7
   1396c:	str	r2, [sp]
   13970:	mov	r2, ip
   13974:	bic	r1, r1, #2
   13978:	str	r0, [sp, #12]
   1397c:	ldr	r0, [sp, #72]	; 0x48
   13980:	str	r1, [sp, #4]
   13984:	mov	r1, sl
   13988:	str	r0, [sp, #16]
   1398c:	mov	r0, r6
   13990:	bl	126f8 <__assert_fail@plt+0x173c>
   13994:	mov	r9, r0
   13998:	mov	r0, r9
   1399c:	sub	sp, fp, #28
   139a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139a4:	mov	r0, #5
   139a8:	ldr	r1, [sp, #48]	; 0x30
   139ac:	ldr	r2, [fp, #-84]	; 0xffffffac
   139b0:	ldr	r3, [sp, #84]	; 0x54
   139b4:	str	r0, [sp]
   139b8:	ldr	r0, [fp, #12]
   139bc:	str	r0, [sp, #4]
   139c0:	ldr	r0, [fp, #16]
   139c4:	str	r0, [sp, #8]
   139c8:	ldr	r0, [sp, #68]	; 0x44
   139cc:	str	r0, [sp, #12]
   139d0:	ldr	r0, [sp, #72]	; 0x48
   139d4:	str	r0, [sp, #16]
   139d8:	ldr	r0, [sp, #76]	; 0x4c
   139dc:	b	13990 <__assert_fail@plt+0x29d4>
   139e0:	mov	r0, #0
   139e4:	str	r0, [fp, #-72]	; 0xffffffb8
   139e8:	ldr	r1, [sp, #92]	; 0x5c
   139ec:	cmp	r1, #0
   139f0:	beq	13a30 <__assert_fail@plt+0x2a74>
   139f4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   139f8:	ldr	r2, [sp, #76]	; 0x4c
   139fc:	tst	r0, #1
   13a00:	bne	13a34 <__assert_fail@plt+0x2a78>
   13a04:	ldrb	r0, [r1]
   13a08:	cmp	r0, #0
   13a0c:	beq	13a34 <__assert_fail@plt+0x2a78>
   13a10:	add	r1, r1, #1
   13a14:	cmp	r9, sl
   13a18:	strbcc	r0, [r2, r9]
   13a1c:	add	r9, r9, #1
   13a20:	ldrb	r0, [r1], #1
   13a24:	cmp	r0, #0
   13a28:	bne	13a14 <__assert_fail@plt+0x2a58>
   13a2c:	b	13a34 <__assert_fail@plt+0x2a78>
   13a30:	ldr	r2, [sp, #76]	; 0x4c
   13a34:	cmp	r9, sl
   13a38:	movcc	r0, #0
   13a3c:	strbcc	r0, [r2, r9]
   13a40:	mov	r0, r9
   13a44:	sub	sp, fp, #28
   13a48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a4c:	mov	r2, #1
   13a50:	b	1391c <__assert_fail@plt+0x2960>
   13a54:	ldr	r2, [sp, #80]	; 0x50
   13a58:	mov	r7, #5
   13a5c:	b	13944 <__assert_fail@plt+0x2988>
   13a60:	bl	10fa4 <abort@plt>
   13a64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a68:	add	fp, sp, #28
   13a6c:	sub	sp, sp, #28
   13a70:	movw	r5, #29040	; 0x7170
   13a74:	cmp	r2, #0
   13a78:	mov	r4, r1
   13a7c:	mov	r7, r0
   13a80:	str	r0, [sp, #20]
   13a84:	movt	r5, #2
   13a88:	movne	r5, r2
   13a8c:	bl	10efc <__errno_location@plt>
   13a90:	mov	sl, r0
   13a94:	ldm	r5, {r0, r1}
   13a98:	ldr	r2, [r5, #40]	; 0x28
   13a9c:	ldr	r3, [r5, #44]	; 0x2c
   13aa0:	add	r9, r5, #8
   13aa4:	ldr	r6, [sl]
   13aa8:	orr	r8, r1, #1
   13aac:	mov	r1, #0
   13ab0:	str	r6, [sp, #24]
   13ab4:	stm	sp, {r0, r8, r9}
   13ab8:	str	r2, [sp, #12]
   13abc:	str	r3, [sp, #16]
   13ac0:	mov	r0, #0
   13ac4:	mov	r2, r7
   13ac8:	mov	r3, r4
   13acc:	mov	r6, r4
   13ad0:	bl	126f8 <__assert_fail@plt+0x173c>
   13ad4:	add	r7, r0, #1
   13ad8:	mov	r0, r7
   13adc:	bl	14e28 <__assert_fail@plt+0x3e6c>
   13ae0:	mov	r4, r0
   13ae4:	ldr	r0, [r5]
   13ae8:	ldr	r2, [r5, #44]	; 0x2c
   13aec:	ldr	r1, [r5, #40]	; 0x28
   13af0:	mov	r3, r6
   13af4:	stm	sp, {r0, r8, r9}
   13af8:	str	r2, [sp, #16]
   13afc:	str	r1, [sp, #12]
   13b00:	mov	r0, r4
   13b04:	mov	r1, r7
   13b08:	ldr	r2, [sp, #20]
   13b0c:	bl	126f8 <__assert_fail@plt+0x173c>
   13b10:	ldr	r0, [sp, #24]
   13b14:	str	r0, [sl]
   13b18:	mov	r0, r4
   13b1c:	sub	sp, fp, #28
   13b20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b28:	add	fp, sp, #28
   13b2c:	sub	sp, sp, #36	; 0x24
   13b30:	movw	r8, #29040	; 0x7170
   13b34:	cmp	r3, #0
   13b38:	mov	r4, r2
   13b3c:	str	r2, [sp, #24]
   13b40:	mov	r5, r1
   13b44:	mov	r6, r0
   13b48:	str	r0, [sp, #20]
   13b4c:	movt	r8, #2
   13b50:	movne	r8, r3
   13b54:	bl	10efc <__errno_location@plt>
   13b58:	str	r0, [sp, #28]
   13b5c:	cmp	r4, #0
   13b60:	add	sl, r8, #8
   13b64:	ldm	r8, {r3, r9}
   13b68:	ldr	r7, [r0]
   13b6c:	ldr	r1, [r8, #40]	; 0x28
   13b70:	ldr	r2, [r8, #44]	; 0x2c
   13b74:	mov	r0, #0
   13b78:	orreq	r9, r9, #1
   13b7c:	str	r7, [sp, #32]
   13b80:	mov	r7, r5
   13b84:	stm	sp, {r3, r9, sl}
   13b88:	str	r1, [sp, #12]
   13b8c:	str	r2, [sp, #16]
   13b90:	mov	r1, #0
   13b94:	mov	r2, r6
   13b98:	mov	r3, r5
   13b9c:	bl	126f8 <__assert_fail@plt+0x173c>
   13ba0:	add	r4, r0, #1
   13ba4:	mov	r5, r0
   13ba8:	mov	r0, r4
   13bac:	bl	14e28 <__assert_fail@plt+0x3e6c>
   13bb0:	mov	r6, r0
   13bb4:	ldr	r0, [r8]
   13bb8:	ldr	r2, [r8, #44]	; 0x2c
   13bbc:	ldr	r1, [r8, #40]	; 0x28
   13bc0:	mov	r3, r7
   13bc4:	stm	sp, {r0, r9, sl}
   13bc8:	str	r2, [sp, #16]
   13bcc:	str	r1, [sp, #12]
   13bd0:	mov	r0, r6
   13bd4:	mov	r1, r4
   13bd8:	ldr	r2, [sp, #20]
   13bdc:	bl	126f8 <__assert_fail@plt+0x173c>
   13be0:	ldr	r0, [sp, #24]
   13be4:	ldr	r1, [sp, #32]
   13be8:	ldr	r2, [sp, #28]
   13bec:	cmp	r0, #0
   13bf0:	str	r1, [r2]
   13bf4:	strne	r5, [r0]
   13bf8:	mov	r0, r6
   13bfc:	sub	sp, fp, #28
   13c00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c04:	push	{r4, r5, r6, r7, fp, lr}
   13c08:	add	fp, sp, #16
   13c0c:	movw	r4, #28952	; 0x7118
   13c10:	movt	r4, #2
   13c14:	ldrd	r6, [r4]
   13c18:	cmp	r7, #2
   13c1c:	blt	13c48 <__assert_fail@plt+0x2c8c>
   13c20:	add	r5, r6, #12
   13c24:	mov	r7, #0
   13c28:	ldr	r0, [r5, r7, lsl #3]
   13c2c:	bl	154f8 <__assert_fail@plt+0x453c>
   13c30:	ldr	r1, [r4, #4]
   13c34:	add	r2, r7, #2
   13c38:	add	r0, r7, #1
   13c3c:	mov	r7, r0
   13c40:	cmp	r2, r1
   13c44:	blt	13c28 <__assert_fail@plt+0x2c6c>
   13c48:	ldr	r0, [r6, #4]
   13c4c:	movw	r5, #29088	; 0x71a0
   13c50:	movt	r5, #2
   13c54:	cmp	r0, r5
   13c58:	beq	13c6c <__assert_fail@plt+0x2cb0>
   13c5c:	bl	154f8 <__assert_fail@plt+0x453c>
   13c60:	mov	r0, #256	; 0x100
   13c64:	str	r0, [r4, #8]
   13c68:	str	r5, [r4, #12]
   13c6c:	add	r5, r4, #8
   13c70:	cmp	r6, r5
   13c74:	beq	13c84 <__assert_fail@plt+0x2cc8>
   13c78:	mov	r0, r6
   13c7c:	bl	154f8 <__assert_fail@plt+0x453c>
   13c80:	str	r5, [r4]
   13c84:	mov	r0, #1
   13c88:	str	r0, [r4, #4]
   13c8c:	pop	{r4, r5, r6, r7, fp, pc}
   13c90:	movw	r3, #29040	; 0x7170
   13c94:	mvn	r2, #0
   13c98:	movt	r3, #2
   13c9c:	b	13ca0 <__assert_fail@plt+0x2ce4>
   13ca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ca4:	add	fp, sp, #28
   13ca8:	sub	sp, sp, #44	; 0x2c
   13cac:	mov	r7, r3
   13cb0:	str	r2, [sp, #36]	; 0x24
   13cb4:	str	r1, [sp, #32]
   13cb8:	mov	r5, r0
   13cbc:	bl	10efc <__errno_location@plt>
   13cc0:	cmp	r5, #0
   13cc4:	blt	13e28 <__assert_fail@plt+0x2e6c>
   13cc8:	cmn	r5, #-2147483647	; 0x80000001
   13ccc:	beq	13e28 <__assert_fail@plt+0x2e6c>
   13cd0:	movw	r8, #28952	; 0x7118
   13cd4:	mov	r4, r0
   13cd8:	movt	r8, #2
   13cdc:	ldr	r6, [r8]
   13ce0:	ldr	r1, [r8, #4]
   13ce4:	ldr	r0, [r0]
   13ce8:	str	r4, [sp, #28]
   13cec:	cmp	r1, r5
   13cf0:	str	r0, [sp, #24]
   13cf4:	ble	13d00 <__assert_fail@plt+0x2d44>
   13cf8:	mov	sl, r6
   13cfc:	b	13d64 <__assert_fail@plt+0x2da8>
   13d00:	mov	r0, #8
   13d04:	add	r9, r8, #8
   13d08:	add	r2, r5, #1
   13d0c:	str	r1, [fp, #-32]	; 0xffffffe0
   13d10:	mvn	r3, #-2147483648	; 0x80000000
   13d14:	str	r0, [sp]
   13d18:	subs	r0, r6, r9
   13d1c:	sub	r2, r2, r1
   13d20:	sub	r1, fp, #32
   13d24:	movne	r0, r6
   13d28:	bl	15028 <__assert_fail@plt+0x406c>
   13d2c:	str	r0, [r8]
   13d30:	cmp	r6, r9
   13d34:	mov	sl, r0
   13d38:	ldrdeq	r0, [r8, #8]
   13d3c:	stmeq	sl, {r0, r1}
   13d40:	ldr	r1, [r8, #4]
   13d44:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13d48:	add	r0, sl, r1, lsl #3
   13d4c:	sub	r1, r2, r1
   13d50:	lsl	r2, r1, #3
   13d54:	mov	r1, #0
   13d58:	bl	10f14 <memset@plt>
   13d5c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13d60:	str	r0, [r8, #4]
   13d64:	mov	r9, sl
   13d68:	ldr	r6, [r9, r5, lsl #3]!
   13d6c:	ldr	r4, [r9, #4]!
   13d70:	ldm	r7, {r0, r1}
   13d74:	ldr	r2, [r7, #40]	; 0x28
   13d78:	ldr	r3, [r7, #44]	; 0x2c
   13d7c:	orr	r8, r1, #1
   13d80:	add	r1, r7, #8
   13d84:	stm	sp, {r0, r8}
   13d88:	add	r0, sp, #8
   13d8c:	str	r1, [sp, #20]
   13d90:	stm	r0, {r1, r2, r3}
   13d94:	mov	r0, r4
   13d98:	mov	r1, r6
   13d9c:	ldr	r2, [sp, #32]
   13da0:	ldr	r3, [sp, #36]	; 0x24
   13da4:	bl	126f8 <__assert_fail@plt+0x173c>
   13da8:	cmp	r6, r0
   13dac:	bhi	13e10 <__assert_fail@plt+0x2e54>
   13db0:	add	r6, r0, #1
   13db4:	movw	r0, #29088	; 0x71a0
   13db8:	movt	r0, #2
   13dbc:	str	r6, [sl, r5, lsl #3]
   13dc0:	cmp	r4, r0
   13dc4:	beq	13dd0 <__assert_fail@plt+0x2e14>
   13dc8:	mov	r0, r4
   13dcc:	bl	154f8 <__assert_fail@plt+0x453c>
   13dd0:	mov	r0, r6
   13dd4:	bl	14e28 <__assert_fail@plt+0x3e6c>
   13dd8:	str	r0, [r9]
   13ddc:	mov	r4, r0
   13de0:	add	r3, sp, #8
   13de4:	ldr	r0, [r7]
   13de8:	ldr	r1, [r7, #40]	; 0x28
   13dec:	ldr	r2, [r7, #44]	; 0x2c
   13df0:	stm	sp, {r0, r8}
   13df4:	ldr	r0, [sp, #20]
   13df8:	stm	r3, {r0, r1, r2}
   13dfc:	mov	r0, r4
   13e00:	mov	r1, r6
   13e04:	ldr	r2, [sp, #32]
   13e08:	ldr	r3, [sp, #36]	; 0x24
   13e0c:	bl	126f8 <__assert_fail@plt+0x173c>
   13e10:	ldr	r1, [sp, #24]
   13e14:	ldr	r0, [sp, #28]
   13e18:	str	r1, [r0]
   13e1c:	mov	r0, r4
   13e20:	sub	sp, fp, #28
   13e24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e28:	bl	10fa4 <abort@plt>
   13e2c:	movw	r3, #29040	; 0x7170
   13e30:	movt	r3, #2
   13e34:	b	13ca0 <__assert_fail@plt+0x2ce4>
   13e38:	movw	r3, #29040	; 0x7170
   13e3c:	mov	r1, r0
   13e40:	mov	r0, #0
   13e44:	mvn	r2, #0
   13e48:	movt	r3, #2
   13e4c:	b	13ca0 <__assert_fail@plt+0x2ce4>
   13e50:	movw	r3, #29040	; 0x7170
   13e54:	mov	r2, r1
   13e58:	mov	r1, r0
   13e5c:	mov	r0, #0
   13e60:	movt	r3, #2
   13e64:	b	13ca0 <__assert_fail@plt+0x2ce4>
   13e68:	push	{fp, lr}
   13e6c:	mov	fp, sp
   13e70:	sub	sp, sp, #48	; 0x30
   13e74:	vmov.i32	q8, #0	; 0x00000000
   13e78:	mov	ip, #32
   13e7c:	mov	r3, sp
   13e80:	mov	lr, r2
   13e84:	cmp	r1, #10
   13e88:	add	r2, r3, #16
   13e8c:	vst1.64	{d16-d17}, [r3], ip
   13e90:	vst1.64	{d16-d17}, [r3]
   13e94:	vst1.64	{d16-d17}, [r2]
   13e98:	beq	13eb8 <__assert_fail@plt+0x2efc>
   13e9c:	str	r1, [sp]
   13ea0:	mov	r3, sp
   13ea4:	mov	r1, lr
   13ea8:	mvn	r2, #0
   13eac:	bl	13ca0 <__assert_fail@plt+0x2ce4>
   13eb0:	mov	sp, fp
   13eb4:	pop	{fp, pc}
   13eb8:	bl	10fa4 <abort@plt>
   13ebc:	push	{r4, sl, fp, lr}
   13ec0:	add	fp, sp, #8
   13ec4:	sub	sp, sp, #48	; 0x30
   13ec8:	mov	ip, r3
   13ecc:	mov	r3, sp
   13ed0:	vmov.i32	q8, #0	; 0x00000000
   13ed4:	mov	lr, #32
   13ed8:	cmp	r1, #10
   13edc:	add	r4, r3, #16
   13ee0:	vst1.64	{d16-d17}, [r3], lr
   13ee4:	vst1.64	{d16-d17}, [r3]
   13ee8:	vst1.64	{d16-d17}, [r4]
   13eec:	beq	13f0c <__assert_fail@plt+0x2f50>
   13ef0:	str	r1, [sp]
   13ef4:	mov	r1, r2
   13ef8:	mov	r3, sp
   13efc:	mov	r2, ip
   13f00:	bl	13ca0 <__assert_fail@plt+0x2ce4>
   13f04:	sub	sp, fp, #8
   13f08:	pop	{r4, sl, fp, pc}
   13f0c:	bl	10fa4 <abort@plt>
   13f10:	push	{fp, lr}
   13f14:	mov	fp, sp
   13f18:	sub	sp, sp, #48	; 0x30
   13f1c:	mov	r3, sp
   13f20:	vmov.i32	q8, #0	; 0x00000000
   13f24:	mov	ip, #32
   13f28:	cmp	r0, #10
   13f2c:	add	r2, r3, #16
   13f30:	vst1.64	{d16-d17}, [r3], ip
   13f34:	vst1.64	{d16-d17}, [r3]
   13f38:	vst1.64	{d16-d17}, [r2]
   13f3c:	beq	13f5c <__assert_fail@plt+0x2fa0>
   13f40:	str	r0, [sp]
   13f44:	mov	r3, sp
   13f48:	mov	r0, #0
   13f4c:	mvn	r2, #0
   13f50:	bl	13ca0 <__assert_fail@plt+0x2ce4>
   13f54:	mov	sp, fp
   13f58:	pop	{fp, pc}
   13f5c:	bl	10fa4 <abort@plt>
   13f60:	push	{fp, lr}
   13f64:	mov	fp, sp
   13f68:	sub	sp, sp, #48	; 0x30
   13f6c:	mov	r3, sp
   13f70:	vmov.i32	q8, #0	; 0x00000000
   13f74:	mov	ip, #32
   13f78:	cmp	r0, #10
   13f7c:	add	lr, r3, #16
   13f80:	vst1.64	{d16-d17}, [r3], ip
   13f84:	vst1.64	{d16-d17}, [r3]
   13f88:	vst1.64	{d16-d17}, [lr]
   13f8c:	beq	13fa8 <__assert_fail@plt+0x2fec>
   13f90:	str	r0, [sp]
   13f94:	mov	r3, sp
   13f98:	mov	r0, #0
   13f9c:	bl	13ca0 <__assert_fail@plt+0x2ce4>
   13fa0:	mov	sp, fp
   13fa4:	pop	{fp, pc}
   13fa8:	bl	10fa4 <abort@plt>
   13fac:	push	{r4, sl, fp, lr}
   13fb0:	add	fp, sp, #8
   13fb4:	sub	sp, sp, #48	; 0x30
   13fb8:	mov	lr, r0
   13fbc:	movw	r0, #29040	; 0x7170
   13fc0:	mov	r3, #32
   13fc4:	mov	ip, r1
   13fc8:	mov	r4, #1
   13fcc:	movt	r0, #2
   13fd0:	add	r1, r0, #16
   13fd4:	vld1.64	{d16-d17}, [r0], r3
   13fd8:	mov	r3, sp
   13fdc:	vld1.64	{d18-d19}, [r1]
   13fe0:	add	r1, r3, #16
   13fe4:	vld1.64	{d20-d21}, [r0]
   13fe8:	add	r0, r3, #32
   13fec:	vst1.64	{d18-d19}, [r1]
   13ff0:	mov	r1, r3
   13ff4:	vst1.64	{d20-d21}, [r0]
   13ff8:	mov	r0, #28
   13ffc:	and	r0, r0, r2, lsr #3
   14000:	and	r2, r2, #31
   14004:	vst1.64	{d16-d17}, [r1], r0
   14008:	ldr	r0, [r1, #8]
   1400c:	bic	r4, r4, r0, lsr r2
   14010:	eor	r0, r0, r4, lsl r2
   14014:	mov	r2, ip
   14018:	str	r0, [r1, #8]
   1401c:	mov	r0, #0
   14020:	mov	r1, lr
   14024:	bl	13ca0 <__assert_fail@plt+0x2ce4>
   14028:	sub	sp, fp, #8
   1402c:	pop	{r4, sl, fp, pc}
   14030:	push	{fp, lr}
   14034:	mov	fp, sp
   14038:	sub	sp, sp, #48	; 0x30
   1403c:	mov	ip, r0
   14040:	movw	r0, #29040	; 0x7170
   14044:	mov	r3, #32
   14048:	movt	r0, #2
   1404c:	add	r2, r0, #16
   14050:	vld1.64	{d16-d17}, [r0], r3
   14054:	mov	r3, sp
   14058:	vld1.64	{d18-d19}, [r2]
   1405c:	add	r2, r3, #16
   14060:	vld1.64	{d20-d21}, [r0]
   14064:	add	r0, r3, #32
   14068:	vst1.64	{d18-d19}, [r2]
   1406c:	mov	r2, r3
   14070:	vst1.64	{d20-d21}, [r0]
   14074:	mov	r0, #28
   14078:	and	r0, r0, r1, lsr #3
   1407c:	and	r1, r1, #31
   14080:	vst1.64	{d16-d17}, [r2], r0
   14084:	mov	r0, #1
   14088:	ldr	lr, [r2, #8]
   1408c:	bic	r0, r0, lr, lsr r1
   14090:	eor	r0, lr, r0, lsl r1
   14094:	mov	r1, ip
   14098:	str	r0, [r2, #8]
   1409c:	mov	r0, #0
   140a0:	mvn	r2, #0
   140a4:	bl	13ca0 <__assert_fail@plt+0x2ce4>
   140a8:	mov	sp, fp
   140ac:	pop	{fp, pc}
   140b0:	push	{fp, lr}
   140b4:	mov	fp, sp
   140b8:	sub	sp, sp, #48	; 0x30
   140bc:	movw	r2, #29040	; 0x7170
   140c0:	mov	r3, #32
   140c4:	mov	r1, r0
   140c8:	movt	r2, #2
   140cc:	add	r0, r2, #16
   140d0:	vld1.64	{d16-d17}, [r2], r3
   140d4:	mov	r3, sp
   140d8:	vld1.64	{d18-d19}, [r0]
   140dc:	add	r0, r3, #16
   140e0:	vld1.64	{d20-d21}, [r2]
   140e4:	mov	r2, r3
   140e8:	vst1.64	{d18-d19}, [r0]
   140ec:	add	r0, r3, #32
   140f0:	vst1.64	{d20-d21}, [r0]
   140f4:	mov	r0, #12
   140f8:	vst1.64	{d16-d17}, [r2], r0
   140fc:	ldr	r0, [r2]
   14100:	orr	r0, r0, #67108864	; 0x4000000
   14104:	str	r0, [r2]
   14108:	mov	r0, #0
   1410c:	mvn	r2, #0
   14110:	bl	13ca0 <__assert_fail@plt+0x2ce4>
   14114:	mov	sp, fp
   14118:	pop	{fp, pc}
   1411c:	push	{fp, lr}
   14120:	mov	fp, sp
   14124:	sub	sp, sp, #48	; 0x30
   14128:	mov	ip, r1
   1412c:	mov	r1, r0
   14130:	movw	r0, #29040	; 0x7170
   14134:	mov	r3, #32
   14138:	movt	r0, #2
   1413c:	add	r2, r0, #16
   14140:	vld1.64	{d16-d17}, [r0], r3
   14144:	mov	r3, sp
   14148:	vld1.64	{d18-d19}, [r2]
   1414c:	add	r2, r3, #16
   14150:	vld1.64	{d20-d21}, [r0]
   14154:	add	r0, r3, #32
   14158:	vst1.64	{d18-d19}, [r2]
   1415c:	mov	r2, r3
   14160:	vst1.64	{d20-d21}, [r0]
   14164:	mov	r0, #12
   14168:	vst1.64	{d16-d17}, [r2], r0
   1416c:	ldr	r0, [r2]
   14170:	orr	r0, r0, #67108864	; 0x4000000
   14174:	str	r0, [r2]
   14178:	mov	r0, #0
   1417c:	mov	r2, ip
   14180:	bl	13ca0 <__assert_fail@plt+0x2ce4>
   14184:	mov	sp, fp
   14188:	pop	{fp, pc}
   1418c:	push	{r4, sl, fp, lr}
   14190:	add	fp, sp, #8
   14194:	sub	sp, sp, #96	; 0x60
   14198:	mov	ip, r2
   1419c:	mov	r2, sp
   141a0:	vmov.i32	q8, #0	; 0x00000000
   141a4:	mov	r4, #28
   141a8:	cmp	r1, #10
   141ac:	mov	r3, r2
   141b0:	add	lr, r2, #16
   141b4:	vst1.64	{d16-d17}, [r3], r4
   141b8:	vst1.64	{d16-d17}, [lr]
   141bc:	vst1.32	{d16-d17}, [r3]
   141c0:	beq	14210 <__assert_fail@plt+0x3254>
   141c4:	vld1.64	{d16-d17}, [r2], r4
   141c8:	vld1.64	{d18-d19}, [lr]
   141cc:	add	r3, sp, #48	; 0x30
   141d0:	add	r4, r3, #4
   141d4:	vld1.32	{d20-d21}, [r2]
   141d8:	add	r2, r3, #20
   141dc:	vst1.32	{d16-d17}, [r4]
   141e0:	vst1.32	{d18-d19}, [r2]
   141e4:	add	r2, r3, #32
   141e8:	vst1.32	{d20-d21}, [r2]
   141ec:	str	r1, [sp, #48]	; 0x30
   141f0:	mvn	r2, #0
   141f4:	ldr	r1, [sp, #60]	; 0x3c
   141f8:	orr	r1, r1, #67108864	; 0x4000000
   141fc:	str	r1, [sp, #60]	; 0x3c
   14200:	mov	r1, ip
   14204:	bl	13ca0 <__assert_fail@plt+0x2ce4>
   14208:	sub	sp, fp, #8
   1420c:	pop	{r4, sl, fp, pc}
   14210:	bl	10fa4 <abort@plt>
   14214:	push	{r4, r5, fp, lr}
   14218:	add	fp, sp, #8
   1421c:	sub	sp, sp, #48	; 0x30
   14220:	mov	ip, r3
   14224:	movw	r3, #29040	; 0x7170
   14228:	mov	lr, #32
   1422c:	cmp	r1, #0
   14230:	mov	r5, sp
   14234:	movt	r3, #2
   14238:	cmpne	r2, #0
   1423c:	add	r4, r3, #16
   14240:	vld1.64	{d16-d17}, [r3], lr
   14244:	vld1.64	{d18-d19}, [r4]
   14248:	add	r4, r5, #16
   1424c:	vld1.64	{d20-d21}, [r3]
   14250:	vst1.64	{d16-d17}, [r5], lr
   14254:	mov	r3, #10
   14258:	vst1.64	{d18-d19}, [r4]
   1425c:	vst1.64	{d20-d21}, [r5]
   14260:	str	r3, [sp]
   14264:	bne	1426c <__assert_fail@plt+0x32b0>
   14268:	bl	10fa4 <abort@plt>
   1426c:	str	r2, [sp, #44]	; 0x2c
   14270:	str	r1, [sp, #40]	; 0x28
   14274:	mov	r3, sp
   14278:	mov	r1, ip
   1427c:	mvn	r2, #0
   14280:	bl	13ca0 <__assert_fail@plt+0x2ce4>
   14284:	sub	sp, fp, #8
   14288:	pop	{r4, r5, fp, pc}
   1428c:	push	{r4, r5, fp, lr}
   14290:	add	fp, sp, #8
   14294:	sub	sp, sp, #48	; 0x30
   14298:	mov	lr, r3
   1429c:	movw	r3, #29040	; 0x7170
   142a0:	mov	ip, #32
   142a4:	cmp	r1, #0
   142a8:	mov	r5, sp
   142ac:	movt	r3, #2
   142b0:	cmpne	r2, #0
   142b4:	add	r4, r3, #16
   142b8:	vld1.64	{d16-d17}, [r3], ip
   142bc:	vld1.64	{d18-d19}, [r4]
   142c0:	add	r4, r5, #16
   142c4:	vld1.64	{d20-d21}, [r3]
   142c8:	vst1.64	{d16-d17}, [r5], ip
   142cc:	mov	r3, #10
   142d0:	vst1.64	{d18-d19}, [r4]
   142d4:	vst1.64	{d20-d21}, [r5]
   142d8:	str	r3, [sp]
   142dc:	bne	142e4 <__assert_fail@plt+0x3328>
   142e0:	bl	10fa4 <abort@plt>
   142e4:	ldr	ip, [fp, #8]
   142e8:	str	r2, [sp, #44]	; 0x2c
   142ec:	str	r1, [sp, #40]	; 0x28
   142f0:	mov	r3, sp
   142f4:	mov	r1, lr
   142f8:	mov	r2, ip
   142fc:	bl	13ca0 <__assert_fail@plt+0x2ce4>
   14300:	sub	sp, fp, #8
   14304:	pop	{r4, r5, fp, pc}
   14308:	push	{r4, sl, fp, lr}
   1430c:	add	fp, sp, #8
   14310:	sub	sp, sp, #48	; 0x30
   14314:	mov	ip, r2
   14318:	movw	r2, #29040	; 0x7170
   1431c:	mov	lr, #32
   14320:	cmp	r0, #0
   14324:	mov	r4, sp
   14328:	movt	r2, #2
   1432c:	cmpne	r1, #0
   14330:	add	r3, r2, #16
   14334:	vld1.64	{d16-d17}, [r2], lr
   14338:	vld1.64	{d18-d19}, [r3]
   1433c:	add	r3, r4, #16
   14340:	vld1.64	{d20-d21}, [r2]
   14344:	vst1.64	{d16-d17}, [r4], lr
   14348:	mov	r2, #10
   1434c:	vst1.64	{d18-d19}, [r3]
   14350:	vst1.64	{d20-d21}, [r4]
   14354:	str	r2, [sp]
   14358:	bne	14360 <__assert_fail@plt+0x33a4>
   1435c:	bl	10fa4 <abort@plt>
   14360:	str	r1, [sp, #44]	; 0x2c
   14364:	str	r0, [sp, #40]	; 0x28
   14368:	mov	r3, sp
   1436c:	mov	r0, #0
   14370:	mov	r1, ip
   14374:	mvn	r2, #0
   14378:	bl	13ca0 <__assert_fail@plt+0x2ce4>
   1437c:	sub	sp, fp, #8
   14380:	pop	{r4, sl, fp, pc}
   14384:	push	{r4, r5, fp, lr}
   14388:	add	fp, sp, #8
   1438c:	sub	sp, sp, #48	; 0x30
   14390:	mov	lr, r2
   14394:	movw	r2, #29040	; 0x7170
   14398:	mov	ip, r3
   1439c:	mov	r3, #32
   143a0:	cmp	r0, #0
   143a4:	mov	r5, sp
   143a8:	movt	r2, #2
   143ac:	cmpne	r1, #0
   143b0:	add	r4, r2, #16
   143b4:	vld1.64	{d16-d17}, [r2], r3
   143b8:	vld1.64	{d18-d19}, [r4]
   143bc:	add	r4, r5, #16
   143c0:	vld1.64	{d20-d21}, [r2]
   143c4:	vst1.64	{d16-d17}, [r5], r3
   143c8:	mov	r2, #10
   143cc:	vst1.64	{d18-d19}, [r4]
   143d0:	vst1.64	{d20-d21}, [r5]
   143d4:	str	r2, [sp]
   143d8:	bne	143e0 <__assert_fail@plt+0x3424>
   143dc:	bl	10fa4 <abort@plt>
   143e0:	str	r1, [sp, #44]	; 0x2c
   143e4:	str	r0, [sp, #40]	; 0x28
   143e8:	mov	r3, sp
   143ec:	mov	r0, #0
   143f0:	mov	r1, lr
   143f4:	mov	r2, ip
   143f8:	bl	13ca0 <__assert_fail@plt+0x2ce4>
   143fc:	sub	sp, fp, #8
   14400:	pop	{r4, r5, fp, pc}
   14404:	movw	r3, #28904	; 0x70e8
   14408:	movt	r3, #2
   1440c:	b	13ca0 <__assert_fail@plt+0x2ce4>
   14410:	movw	r3, #28904	; 0x70e8
   14414:	mov	r2, r1
   14418:	mov	r1, r0
   1441c:	mov	r0, #0
   14420:	movt	r3, #2
   14424:	b	13ca0 <__assert_fail@plt+0x2ce4>
   14428:	movw	r3, #28904	; 0x70e8
   1442c:	mvn	r2, #0
   14430:	movt	r3, #2
   14434:	b	13ca0 <__assert_fail@plt+0x2ce4>
   14438:	movw	r3, #28904	; 0x70e8
   1443c:	mov	r1, r0
   14440:	mov	r0, #0
   14444:	mvn	r2, #0
   14448:	movt	r3, #2
   1444c:	b	13ca0 <__assert_fail@plt+0x2ce4>
   14450:	mov	r1, #0
   14454:	str	r1, [r0]
   14458:	str	r1, [r0, #4]
   1445c:	bx	lr
   14460:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14464:	add	fp, sp, #28
   14468:	sub	sp, sp, #52	; 0x34
   1446c:	add	sl, sp, #16
   14470:	mov	r5, r0
   14474:	vmov.i32	q8, #0	; 0x00000000
   14478:	mov	r8, r3
   1447c:	cmp	r2, #0
   14480:	mov	r0, sl
   14484:	vst1.64	{d16-d17}, [r0]!
   14488:	vst1.64	{d16-d17}, [r0]
   1448c:	beq	144b4 <__assert_fail@plt+0x34f8>
   14490:	mov	r0, #1
   14494:	ldrb	r3, [r1], #1
   14498:	subs	r2, r2, #1
   1449c:	ubfx	r7, r3, #5, #3
   144a0:	and	r3, r3, #31
   144a4:	ldr	r6, [sl, r7, lsl #2]
   144a8:	orr	r3, r6, r0, lsl r3
   144ac:	str	r3, [sl, r7, lsl #2]
   144b0:	bne	14494 <__assert_fail@plt+0x34d8>
   144b4:	ldmib	r5, {r0, r1}
   144b8:	cmp	r0, r1
   144bc:	bcs	14520 <__assert_fail@plt+0x3564>
   144c0:	add	r1, r0, #1
   144c4:	str	r1, [r5, #4]
   144c8:	ldrb	r6, [r0]
   144cc:	mov	r4, #1
   144d0:	lsr	r0, r6, #5
   144d4:	and	r1, r6, #31
   144d8:	ldr	r0, [sl, r0, lsl #2]
   144dc:	tst	r0, r4, lsl r1
   144e0:	beq	14534 <__assert_fail@plt+0x3578>
   144e4:	ldmib	r5, {r0, r1}
   144e8:	cmp	r0, r1
   144ec:	bcs	14508 <__assert_fail@plt+0x354c>
   144f0:	add	r1, r0, #1
   144f4:	str	r1, [r5, #4]
   144f8:	ldrb	r6, [r0]
   144fc:	cmn	r6, #1
   14500:	bgt	144d0 <__assert_fail@plt+0x3514>
   14504:	b	14534 <__assert_fail@plt+0x3578>
   14508:	mov	r0, r5
   1450c:	bl	10f5c <__uflow@plt>
   14510:	mov	r6, r0
   14514:	cmn	r6, #1
   14518:	bgt	144d0 <__assert_fail@plt+0x3514>
   1451c:	b	14534 <__assert_fail@plt+0x3578>
   14520:	mov	r0, r5
   14524:	bl	10f5c <__uflow@plt>
   14528:	mov	r6, r0
   1452c:	cmp	r0, #0
   14530:	bge	144cc <__assert_fail@plt+0x3510>
   14534:	ldm	r8, {r0, r7}
   14538:	cmp	r6, #0
   1453c:	str	r0, [sp, #12]
   14540:	blt	145f8 <__assert_fail@plt+0x363c>
   14544:	str	r8, [sp, #8]
   14548:	mov	r9, #0
   1454c:	mov	r8, #1
   14550:	mov	r4, #0
   14554:	cmp	r4, r0
   14558:	bne	14590 <__assert_fail@plt+0x35d4>
   1455c:	b	14574 <__assert_fail@plt+0x35b8>
   14560:	ldr	r0, [sp, #12]
   14564:	add	r4, r4, #1
   14568:	lsr	r9, r6, #31
   1456c:	cmp	r4, r0
   14570:	bne	14590 <__assert_fail@plt+0x35d4>
   14574:	mov	r0, r7
   14578:	add	r1, sp, #12
   1457c:	mov	r2, #1
   14580:	mvn	r3, #0
   14584:	str	r8, [sp]
   14588:	bl	15028 <__assert_fail@plt+0x406c>
   1458c:	mov	r7, r0
   14590:	tst	r9, #1
   14594:	lsreq	r0, r6, #5
   14598:	andeq	r1, r6, #31
   1459c:	ldreq	r0, [sl, r0, lsl #2]
   145a0:	tsteq	r0, r8, lsl r1
   145a4:	bne	145d8 <__assert_fail@plt+0x361c>
   145a8:	strb	r6, [r7, r4]
   145ac:	ldmib	r5, {r0, r1}
   145b0:	cmp	r0, r1
   145b4:	bcs	145c8 <__assert_fail@plt+0x360c>
   145b8:	add	r1, r0, #1
   145bc:	str	r1, [r5, #4]
   145c0:	ldrb	r6, [r0]
   145c4:	b	14560 <__assert_fail@plt+0x35a4>
   145c8:	mov	r0, r5
   145cc:	bl	10f5c <__uflow@plt>
   145d0:	mov	r6, r0
   145d4:	b	14560 <__assert_fail@plt+0x35a4>
   145d8:	mov	r0, #0
   145dc:	ldr	r1, [sp, #8]
   145e0:	strb	r0, [r7, r4]
   145e4:	ldr	r0, [sp, #12]
   145e8:	stm	r1, {r0, r7}
   145ec:	mov	r0, r4
   145f0:	sub	sp, fp, #28
   145f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145f8:	mvn	r4, #0
   145fc:	mov	r0, r4
   14600:	sub	sp, fp, #28
   14604:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14608:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1460c:	add	fp, sp, #28
   14610:	sub	sp, sp, #28
   14614:	add	r4, r1, #1
   14618:	cmp	r1, #0
   1461c:	mov	r7, r0
   14620:	mov	r1, #4
   14624:	str	r3, [sp, #12]
   14628:	str	r2, [sp, #8]
   1462c:	movweq	r4, #64	; 0x40
   14630:	mov	r0, r4
   14634:	str	r4, [sp, #16]
   14638:	bl	14ec8 <__assert_fail@plt+0x3f0c>
   1463c:	mov	r6, r0
   14640:	mov	r0, r4
   14644:	mov	r1, #4
   14648:	bl	14ec8 <__assert_fail@plt+0x3f0c>
   1464c:	mov	r4, #0
   14650:	mov	r5, r0
   14654:	str	r4, [sp, #20]
   14658:	str	r4, [sp, #24]
   1465c:	b	1468c <__assert_fail@plt+0x36d0>
   14660:	add	r8, sl, #1
   14664:	mov	r1, #1
   14668:	mov	r0, r8
   1466c:	bl	14ec8 <__assert_fail@plt+0x3f0c>
   14670:	str	sl, [r5, r4, lsl #2]
   14674:	mov	r2, r8
   14678:	mov	r9, r0
   1467c:	ldr	r1, [sp, #24]
   14680:	bl	10dd0 <memcpy@plt>
   14684:	str	r9, [r6, r4, lsl #2]
   14688:	add	r4, r4, #1
   1468c:	ldr	r1, [sp, #8]
   14690:	ldr	r2, [sp, #12]
   14694:	mov	r0, r7
   14698:	add	r3, sp, #20
   1469c:	bl	14460 <__assert_fail@plt+0x34a4>
   146a0:	mov	sl, r0
   146a4:	ldr	r0, [sp, #16]
   146a8:	cmp	r4, r0
   146ac:	blt	146e4 <__assert_fail@plt+0x3728>
   146b0:	mov	r0, #4
   146b4:	add	r1, sp, #16
   146b8:	mov	r2, #1
   146bc:	mvn	r3, #0
   146c0:	str	r0, [sp]
   146c4:	mov	r0, r6
   146c8:	bl	15028 <__assert_fail@plt+0x406c>
   146cc:	ldr	r1, [sp, #16]
   146d0:	mov	r6, r0
   146d4:	mov	r0, r5
   146d8:	mov	r2, #4
   146dc:	bl	14dbc <__assert_fail@plt+0x3e00>
   146e0:	mov	r5, r0
   146e4:	cmn	sl, #1
   146e8:	bne	14660 <__assert_fail@plt+0x36a4>
   146ec:	mov	r0, #0
   146f0:	str	r0, [r6, r4, lsl #2]
   146f4:	str	r0, [r5, r4, lsl #2]
   146f8:	ldr	r0, [sp, #24]
   146fc:	bl	154f8 <__assert_fail@plt+0x453c>
   14700:	ldr	r0, [fp, #8]
   14704:	str	r6, [r0]
   14708:	ldr	r0, [fp, #12]
   1470c:	cmp	r0, #0
   14710:	beq	14724 <__assert_fail@plt+0x3768>
   14714:	str	r5, [r0]
   14718:	mov	r0, r4
   1471c:	sub	sp, fp, #28
   14720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14724:	mov	r0, r5
   14728:	bl	154f8 <__assert_fail@plt+0x453c>
   1472c:	mov	r0, r4
   14730:	sub	sp, fp, #28
   14734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14738:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1473c:	add	fp, sp, #24
   14740:	sub	sp, sp, #32
   14744:	ldr	r6, [fp, #12]
   14748:	ldr	r7, [fp, #8]
   1474c:	mov	r4, r2
   14750:	mov	r8, r0
   14754:	cmp	r1, #0
   14758:	beq	14780 <__assert_fail@plt+0x37c4>
   1475c:	movw	r2, #23800	; 0x5cf8
   14760:	mov	r5, r1
   14764:	str	r3, [sp, #4]
   14768:	str	r4, [sp]
   1476c:	mov	r0, r8
   14770:	mov	r1, #1
   14774:	movt	r2, #1
   14778:	mov	r3, r5
   1477c:	b	14798 <__assert_fail@plt+0x37dc>
   14780:	movw	r2, #23812	; 0x5d04
   14784:	str	r3, [sp]
   14788:	mov	r0, r8
   1478c:	mov	r1, #1
   14790:	mov	r3, r4
   14794:	movt	r2, #1
   14798:	bl	10f38 <__fprintf_chk@plt>
   1479c:	movw	r1, #23819	; 0x5d0b
   147a0:	mov	r0, #0
   147a4:	mov	r2, #5
   147a8:	movt	r1, #1
   147ac:	bl	10df4 <dcgettext@plt>
   147b0:	movw	r2, #24537	; 0x5fd9
   147b4:	mov	r3, r0
   147b8:	movw	r0, #2022	; 0x7e6
   147bc:	mov	r1, #1
   147c0:	str	r0, [sp]
   147c4:	movt	r2, #1
   147c8:	mov	r0, r8
   147cc:	bl	10f38 <__fprintf_chk@plt>
   147d0:	movw	r4, #23086	; 0x5a2e
   147d4:	mov	r1, r8
   147d8:	movt	r4, #1
   147dc:	mov	r0, r4
   147e0:	bl	10d88 <fputs_unlocked@plt>
   147e4:	movw	r1, #23823	; 0x5d0f
   147e8:	mov	r0, #0
   147ec:	mov	r2, #5
   147f0:	movt	r1, #1
   147f4:	bl	10df4 <dcgettext@plt>
   147f8:	movw	r3, #23994	; 0x5dba
   147fc:	mov	r2, r0
   14800:	mov	r0, r8
   14804:	mov	r1, #1
   14808:	movt	r3, #1
   1480c:	bl	10f38 <__fprintf_chk@plt>
   14810:	mov	r0, r4
   14814:	mov	r1, r8
   14818:	bl	10d88 <fputs_unlocked@plt>
   1481c:	cmp	r6, #9
   14820:	bhi	1485c <__assert_fail@plt+0x38a0>
   14824:	add	r0, pc, #0
   14828:	ldr	pc, [r0, r6, lsl #2]
   1482c:	andeq	r4, r1, r4, asr r8
   14830:	andeq	r4, r1, r8, ror #16
   14834:	muleq	r1, r8, r8
   14838:	andeq	r4, r1, r0, asr #17
   1483c:	andeq	r4, r1, r8, ror #17
   14840:	andeq	r4, r1, r0, lsl r9
   14844:	andeq	r4, r1, r8, lsr r9
   14848:	andeq	r4, r1, r0, ror r9
   1484c:	andeq	r4, r1, r8, lsl sl
   14850:	andeq	r4, r1, r0, asr #19
   14854:	sub	sp, fp, #24
   14858:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1485c:	movw	r1, #24347	; 0x5f1b
   14860:	movt	r1, #1
   14864:	b	149c8 <__assert_fail@plt+0x3a0c>
   14868:	movw	r1, #24028	; 0x5ddc
   1486c:	mov	r0, #0
   14870:	mov	r2, #5
   14874:	movt	r1, #1
   14878:	bl	10df4 <dcgettext@plt>
   1487c:	ldr	r3, [r7]
   14880:	mov	r2, r0
   14884:	mov	r0, r8
   14888:	mov	r1, #1
   1488c:	sub	sp, fp, #24
   14890:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14894:	b	10f38 <__fprintf_chk@plt>
   14898:	movw	r1, #24044	; 0x5dec
   1489c:	mov	r0, #0
   148a0:	mov	r2, #5
   148a4:	movt	r1, #1
   148a8:	bl	10df4 <dcgettext@plt>
   148ac:	mov	r2, r0
   148b0:	ldr	r3, [r7]
   148b4:	ldr	r0, [r7, #4]
   148b8:	str	r0, [sp]
   148bc:	b	149ac <__assert_fail@plt+0x39f0>
   148c0:	movw	r1, #24067	; 0x5e03
   148c4:	mov	r0, #0
   148c8:	mov	r2, #5
   148cc:	movt	r1, #1
   148d0:	bl	10df4 <dcgettext@plt>
   148d4:	ldr	r3, [r7]
   148d8:	mov	r2, r0
   148dc:	ldmib	r7, {r0, r1}
   148e0:	stm	sp, {r0, r1}
   148e4:	b	149ac <__assert_fail@plt+0x39f0>
   148e8:	movw	r1, #24095	; 0x5e1f
   148ec:	mov	r0, #0
   148f0:	mov	r2, #5
   148f4:	movt	r1, #1
   148f8:	bl	10df4 <dcgettext@plt>
   148fc:	ldr	r3, [r7]
   14900:	mov	r2, r0
   14904:	ldmib	r7, {r0, r1, r7}
   14908:	stm	sp, {r0, r1, r7}
   1490c:	b	149ac <__assert_fail@plt+0x39f0>
   14910:	movw	r1, #24127	; 0x5e3f
   14914:	mov	r0, #0
   14918:	mov	r2, #5
   1491c:	movt	r1, #1
   14920:	bl	10df4 <dcgettext@plt>
   14924:	ldr	r3, [r7]
   14928:	mov	r2, r0
   1492c:	ldmib	r7, {r0, r1, r6, r7}
   14930:	stm	sp, {r0, r1, r6, r7}
   14934:	b	149ac <__assert_fail@plt+0x39f0>
   14938:	movw	r1, #24163	; 0x5e63
   1493c:	mov	r0, #0
   14940:	mov	r2, #5
   14944:	movt	r1, #1
   14948:	bl	10df4 <dcgettext@plt>
   1494c:	ldr	r3, [r7]
   14950:	mov	r2, r0
   14954:	ldmib	r7, {r0, r1, r6}
   14958:	ldr	r5, [r7, #16]
   1495c:	ldr	r7, [r7, #20]
   14960:	stm	sp, {r0, r1, r6}
   14964:	str	r5, [sp, #12]
   14968:	str	r7, [sp, #16]
   1496c:	b	149ac <__assert_fail@plt+0x39f0>
   14970:	movw	r1, #24203	; 0x5e8b
   14974:	mov	r0, #0
   14978:	mov	r2, #5
   1497c:	movt	r1, #1
   14980:	bl	10df4 <dcgettext@plt>
   14984:	ldr	r3, [r7]
   14988:	mov	r2, r0
   1498c:	ldmib	r7, {r0, r1, r6}
   14990:	ldr	r5, [r7, #16]
   14994:	ldr	r4, [r7, #20]
   14998:	ldr	r7, [r7, #24]
   1499c:	stm	sp, {r0, r1, r6}
   149a0:	str	r5, [sp, #12]
   149a4:	str	r4, [sp, #16]
   149a8:	str	r7, [sp, #20]
   149ac:	mov	r0, r8
   149b0:	mov	r1, #1
   149b4:	bl	10f38 <__fprintf_chk@plt>
   149b8:	sub	sp, fp, #24
   149bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   149c0:	movw	r1, #24295	; 0x5ee7
   149c4:	movt	r1, #1
   149c8:	mov	r0, #0
   149cc:	mov	r2, #5
   149d0:	bl	10df4 <dcgettext@plt>
   149d4:	mov	ip, r0
   149d8:	ldr	r3, [r7]
   149dc:	ldr	r0, [r7, #4]
   149e0:	ldr	r1, [r7, #8]
   149e4:	ldr	r6, [r7, #12]
   149e8:	ldr	r5, [r7, #16]
   149ec:	ldr	r4, [r7, #20]
   149f0:	ldr	r2, [r7, #24]
   149f4:	ldr	lr, [r7, #28]
   149f8:	ldr	r7, [r7, #32]
   149fc:	stm	sp, {r0, r1, r6}
   14a00:	str	r5, [sp, #12]
   14a04:	str	r4, [sp, #16]
   14a08:	str	r2, [sp, #20]
   14a0c:	str	lr, [sp, #24]
   14a10:	str	r7, [sp, #28]
   14a14:	b	14a5c <__assert_fail@plt+0x3aa0>
   14a18:	movw	r1, #24247	; 0x5eb7
   14a1c:	mov	r0, #0
   14a20:	mov	r2, #5
   14a24:	movt	r1, #1
   14a28:	bl	10df4 <dcgettext@plt>
   14a2c:	mov	ip, r0
   14a30:	ldr	r3, [r7]
   14a34:	ldmib	r7, {r0, r1, r6}
   14a38:	ldr	r5, [r7, #16]
   14a3c:	ldr	r4, [r7, #20]
   14a40:	ldr	r2, [r7, #24]
   14a44:	ldr	r7, [r7, #28]
   14a48:	stm	sp, {r0, r1, r6}
   14a4c:	str	r5, [sp, #12]
   14a50:	str	r4, [sp, #16]
   14a54:	str	r2, [sp, #20]
   14a58:	str	r7, [sp, #24]
   14a5c:	mov	r0, r8
   14a60:	mov	r1, #1
   14a64:	mov	r2, ip
   14a68:	bl	10f38 <__fprintf_chk@plt>
   14a6c:	sub	sp, fp, #24
   14a70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a74:	push	{r4, sl, fp, lr}
   14a78:	add	fp, sp, #8
   14a7c:	sub	sp, sp, #8
   14a80:	ldr	ip, [fp, #8]
   14a84:	mov	lr, #0
   14a88:	ldr	r4, [ip, lr, lsl #2]
   14a8c:	add	lr, lr, #1
   14a90:	cmp	r4, #0
   14a94:	bne	14a88 <__assert_fail@plt+0x3acc>
   14a98:	sub	r4, lr, #1
   14a9c:	str	ip, [sp]
   14aa0:	str	r4, [sp, #4]
   14aa4:	bl	14738 <__assert_fail@plt+0x377c>
   14aa8:	sub	sp, fp, #8
   14aac:	pop	{r4, sl, fp, pc}
   14ab0:	push	{fp, lr}
   14ab4:	mov	fp, sp
   14ab8:	sub	sp, sp, #48	; 0x30
   14abc:	ldr	ip, [fp, #8]
   14ac0:	ldr	lr, [ip]
   14ac4:	cmp	lr, #0
   14ac8:	str	lr, [sp, #8]
   14acc:	beq	14b68 <__assert_fail@plt+0x3bac>
   14ad0:	ldr	lr, [ip, #4]
   14ad4:	cmp	lr, #0
   14ad8:	str	lr, [sp, #12]
   14adc:	beq	14b70 <__assert_fail@plt+0x3bb4>
   14ae0:	ldr	lr, [ip, #8]
   14ae4:	cmp	lr, #0
   14ae8:	str	lr, [sp, #16]
   14aec:	beq	14b78 <__assert_fail@plt+0x3bbc>
   14af0:	ldr	lr, [ip, #12]
   14af4:	cmp	lr, #0
   14af8:	str	lr, [sp, #20]
   14afc:	beq	14b80 <__assert_fail@plt+0x3bc4>
   14b00:	ldr	lr, [ip, #16]
   14b04:	cmp	lr, #0
   14b08:	str	lr, [sp, #24]
   14b0c:	beq	14b88 <__assert_fail@plt+0x3bcc>
   14b10:	ldr	lr, [ip, #20]
   14b14:	cmp	lr, #0
   14b18:	str	lr, [sp, #28]
   14b1c:	beq	14b90 <__assert_fail@plt+0x3bd4>
   14b20:	ldr	lr, [ip, #24]
   14b24:	cmp	lr, #0
   14b28:	str	lr, [sp, #32]
   14b2c:	beq	14b98 <__assert_fail@plt+0x3bdc>
   14b30:	ldr	lr, [ip, #28]
   14b34:	cmp	lr, #0
   14b38:	str	lr, [sp, #36]	; 0x24
   14b3c:	beq	14ba0 <__assert_fail@plt+0x3be4>
   14b40:	ldr	lr, [ip, #32]
   14b44:	cmp	lr, #0
   14b48:	str	lr, [sp, #40]	; 0x28
   14b4c:	beq	14ba8 <__assert_fail@plt+0x3bec>
   14b50:	ldr	lr, [ip, #36]	; 0x24
   14b54:	mov	ip, #10
   14b58:	cmp	lr, #0
   14b5c:	str	lr, [sp, #44]	; 0x2c
   14b60:	movweq	ip, #9
   14b64:	b	14bac <__assert_fail@plt+0x3bf0>
   14b68:	mov	ip, #0
   14b6c:	b	14bac <__assert_fail@plt+0x3bf0>
   14b70:	mov	ip, #1
   14b74:	b	14bac <__assert_fail@plt+0x3bf0>
   14b78:	mov	ip, #2
   14b7c:	b	14bac <__assert_fail@plt+0x3bf0>
   14b80:	mov	ip, #3
   14b84:	b	14bac <__assert_fail@plt+0x3bf0>
   14b88:	mov	ip, #4
   14b8c:	b	14bac <__assert_fail@plt+0x3bf0>
   14b90:	mov	ip, #5
   14b94:	b	14bac <__assert_fail@plt+0x3bf0>
   14b98:	mov	ip, #6
   14b9c:	b	14bac <__assert_fail@plt+0x3bf0>
   14ba0:	mov	ip, #7
   14ba4:	b	14bac <__assert_fail@plt+0x3bf0>
   14ba8:	mov	ip, #8
   14bac:	add	lr, sp, #8
   14bb0:	str	ip, [sp, #4]
   14bb4:	str	lr, [sp]
   14bb8:	bl	14738 <__assert_fail@plt+0x377c>
   14bbc:	mov	sp, fp
   14bc0:	pop	{fp, pc}
   14bc4:	push	{fp, lr}
   14bc8:	mov	fp, sp
   14bcc:	sub	sp, sp, #56	; 0x38
   14bd0:	add	ip, fp, #8
   14bd4:	str	ip, [sp, #12]
   14bd8:	ldr	lr, [fp, #8]
   14bdc:	cmp	lr, #0
   14be0:	str	lr, [sp, #16]
   14be4:	beq	14c80 <__assert_fail@plt+0x3cc4>
   14be8:	ldr	lr, [ip, #4]
   14bec:	cmp	lr, #0
   14bf0:	str	lr, [sp, #20]
   14bf4:	beq	14c88 <__assert_fail@plt+0x3ccc>
   14bf8:	ldr	lr, [ip, #8]
   14bfc:	cmp	lr, #0
   14c00:	str	lr, [sp, #24]
   14c04:	beq	14c90 <__assert_fail@plt+0x3cd4>
   14c08:	ldr	lr, [ip, #12]
   14c0c:	cmp	lr, #0
   14c10:	str	lr, [sp, #28]
   14c14:	beq	14c98 <__assert_fail@plt+0x3cdc>
   14c18:	ldr	lr, [ip, #16]
   14c1c:	cmp	lr, #0
   14c20:	str	lr, [sp, #32]
   14c24:	beq	14ca0 <__assert_fail@plt+0x3ce4>
   14c28:	ldr	lr, [ip, #20]
   14c2c:	cmp	lr, #0
   14c30:	str	lr, [sp, #36]	; 0x24
   14c34:	beq	14ca8 <__assert_fail@plt+0x3cec>
   14c38:	ldr	lr, [ip, #24]
   14c3c:	cmp	lr, #0
   14c40:	str	lr, [sp, #40]	; 0x28
   14c44:	beq	14cb0 <__assert_fail@plt+0x3cf4>
   14c48:	ldr	lr, [ip, #28]
   14c4c:	cmp	lr, #0
   14c50:	str	lr, [sp, #44]	; 0x2c
   14c54:	beq	14cb8 <__assert_fail@plt+0x3cfc>
   14c58:	ldr	lr, [ip, #32]
   14c5c:	cmp	lr, #0
   14c60:	str	lr, [sp, #48]	; 0x30
   14c64:	beq	14cc0 <__assert_fail@plt+0x3d04>
   14c68:	ldr	lr, [ip, #36]	; 0x24
   14c6c:	mov	ip, #10
   14c70:	cmp	lr, #0
   14c74:	str	lr, [sp, #52]	; 0x34
   14c78:	movweq	ip, #9
   14c7c:	b	14cc4 <__assert_fail@plt+0x3d08>
   14c80:	mov	ip, #0
   14c84:	b	14cc4 <__assert_fail@plt+0x3d08>
   14c88:	mov	ip, #1
   14c8c:	b	14cc4 <__assert_fail@plt+0x3d08>
   14c90:	mov	ip, #2
   14c94:	b	14cc4 <__assert_fail@plt+0x3d08>
   14c98:	mov	ip, #3
   14c9c:	b	14cc4 <__assert_fail@plt+0x3d08>
   14ca0:	mov	ip, #4
   14ca4:	b	14cc4 <__assert_fail@plt+0x3d08>
   14ca8:	mov	ip, #5
   14cac:	b	14cc4 <__assert_fail@plt+0x3d08>
   14cb0:	mov	ip, #6
   14cb4:	b	14cc4 <__assert_fail@plt+0x3d08>
   14cb8:	mov	ip, #7
   14cbc:	b	14cc4 <__assert_fail@plt+0x3d08>
   14cc0:	mov	ip, #8
   14cc4:	add	lr, sp, #16
   14cc8:	str	ip, [sp, #4]
   14ccc:	str	lr, [sp]
   14cd0:	bl	14738 <__assert_fail@plt+0x377c>
   14cd4:	mov	sp, fp
   14cd8:	pop	{fp, pc}
   14cdc:	push	{fp, lr}
   14ce0:	mov	fp, sp
   14ce4:	movw	r0, #28996	; 0x7144
   14ce8:	movt	r0, #2
   14cec:	ldr	r1, [r0]
   14cf0:	movw	r0, #23086	; 0x5a2e
   14cf4:	movt	r0, #1
   14cf8:	bl	10d88 <fputs_unlocked@plt>
   14cfc:	movw	r1, #24407	; 0x5f57
   14d00:	mov	r0, #0
   14d04:	mov	r2, #5
   14d08:	movt	r1, #1
   14d0c:	bl	10df4 <dcgettext@plt>
   14d10:	movw	r2, #24427	; 0x5f6b
   14d14:	mov	r1, r0
   14d18:	mov	r0, #1
   14d1c:	movt	r2, #1
   14d20:	bl	10f20 <__printf_chk@plt>
   14d24:	movw	r1, #24449	; 0x5f81
   14d28:	mov	r0, #0
   14d2c:	mov	r2, #5
   14d30:	movt	r1, #1
   14d34:	bl	10df4 <dcgettext@plt>
   14d38:	movw	r2, #22672	; 0x5890
   14d3c:	movw	r3, #22891	; 0x596b
   14d40:	mov	r1, r0
   14d44:	mov	r0, #1
   14d48:	movt	r2, #1
   14d4c:	movt	r3, #1
   14d50:	bl	10f20 <__printf_chk@plt>
   14d54:	movw	r1, #24469	; 0x5f95
   14d58:	mov	r0, #0
   14d5c:	mov	r2, #5
   14d60:	movt	r1, #1
   14d64:	bl	10df4 <dcgettext@plt>
   14d68:	movw	r2, #24508	; 0x5fbc
   14d6c:	mov	r1, r0
   14d70:	mov	r0, #1
   14d74:	movt	r2, #1
   14d78:	pop	{fp, lr}
   14d7c:	b	10f20 <__printf_chk@plt>
   14d80:	push	{r4, r5, r6, sl, fp, lr}
   14d84:	add	fp, sp, #16
   14d88:	mov	r4, r2
   14d8c:	mov	r5, r1
   14d90:	mov	r6, r0
   14d94:	bl	155b8 <__assert_fail@plt+0x45fc>
   14d98:	cmp	r0, #0
   14d9c:	popne	{r4, r5, r6, sl, fp, pc}
   14da0:	cmp	r6, #0
   14da4:	beq	14db8 <__assert_fail@plt+0x3dfc>
   14da8:	cmp	r5, #0
   14dac:	cmpne	r4, #0
   14db0:	bne	14db8 <__assert_fail@plt+0x3dfc>
   14db4:	pop	{r4, r5, r6, sl, fp, pc}
   14db8:	bl	15358 <__assert_fail@plt+0x439c>
   14dbc:	push	{r4, r5, r6, sl, fp, lr}
   14dc0:	add	fp, sp, #16
   14dc4:	mov	r4, r2
   14dc8:	mov	r5, r1
   14dcc:	mov	r6, r0
   14dd0:	bl	155b8 <__assert_fail@plt+0x45fc>
   14dd4:	cmp	r0, #0
   14dd8:	popne	{r4, r5, r6, sl, fp, pc}
   14ddc:	cmp	r6, #0
   14de0:	beq	14df4 <__assert_fail@plt+0x3e38>
   14de4:	cmp	r5, #0
   14de8:	cmpne	r4, #0
   14dec:	bne	14df4 <__assert_fail@plt+0x3e38>
   14df0:	pop	{r4, r5, r6, sl, fp, pc}
   14df4:	bl	15358 <__assert_fail@plt+0x439c>
   14df8:	push	{fp, lr}
   14dfc:	mov	fp, sp
   14e00:	bl	153f0 <__assert_fail@plt+0x4434>
   14e04:	cmp	r0, #0
   14e08:	popne	{fp, pc}
   14e0c:	bl	15358 <__assert_fail@plt+0x439c>
   14e10:	push	{fp, lr}
   14e14:	mov	fp, sp
   14e18:	bl	153f0 <__assert_fail@plt+0x4434>
   14e1c:	cmp	r0, #0
   14e20:	popne	{fp, pc}
   14e24:	bl	15358 <__assert_fail@plt+0x439c>
   14e28:	push	{fp, lr}
   14e2c:	mov	fp, sp
   14e30:	bl	153f0 <__assert_fail@plt+0x4434>
   14e34:	cmp	r0, #0
   14e38:	popne	{fp, pc}
   14e3c:	bl	15358 <__assert_fail@plt+0x439c>
   14e40:	push	{r4, r5, fp, lr}
   14e44:	add	fp, sp, #8
   14e48:	mov	r4, r1
   14e4c:	mov	r5, r0
   14e50:	bl	15420 <__assert_fail@plt+0x4464>
   14e54:	cmp	r0, #0
   14e58:	popne	{r4, r5, fp, pc}
   14e5c:	cmp	r5, #0
   14e60:	beq	14e70 <__assert_fail@plt+0x3eb4>
   14e64:	cmp	r4, #0
   14e68:	bne	14e70 <__assert_fail@plt+0x3eb4>
   14e6c:	pop	{r4, r5, fp, pc}
   14e70:	bl	15358 <__assert_fail@plt+0x439c>
   14e74:	push	{fp, lr}
   14e78:	mov	fp, sp
   14e7c:	cmp	r1, #0
   14e80:	orreq	r1, r1, #1
   14e84:	bl	15420 <__assert_fail@plt+0x4464>
   14e88:	cmp	r0, #0
   14e8c:	popne	{fp, pc}
   14e90:	bl	15358 <__assert_fail@plt+0x439c>
   14e94:	push	{fp, lr}
   14e98:	mov	fp, sp
   14e9c:	clz	r3, r2
   14ea0:	lsr	ip, r3, #5
   14ea4:	clz	r3, r1
   14ea8:	lsr	r3, r3, #5
   14eac:	orrs	r3, r3, ip
   14eb0:	movwne	r1, #1
   14eb4:	movwne	r2, #1
   14eb8:	bl	155b8 <__assert_fail@plt+0x45fc>
   14ebc:	cmp	r0, #0
   14ec0:	popne	{fp, pc}
   14ec4:	bl	15358 <__assert_fail@plt+0x439c>
   14ec8:	push	{fp, lr}
   14ecc:	mov	fp, sp
   14ed0:	mov	r2, r1
   14ed4:	mov	r1, r0
   14ed8:	mov	r0, #0
   14edc:	bl	155b8 <__assert_fail@plt+0x45fc>
   14ee0:	cmp	r0, #0
   14ee4:	popne	{fp, pc}
   14ee8:	bl	15358 <__assert_fail@plt+0x439c>
   14eec:	push	{fp, lr}
   14ef0:	mov	fp, sp
   14ef4:	mov	r2, r1
   14ef8:	mov	r1, r0
   14efc:	clz	r0, r2
   14f00:	clz	r3, r1
   14f04:	lsr	r0, r0, #5
   14f08:	lsr	r3, r3, #5
   14f0c:	orrs	r0, r3, r0
   14f10:	movwne	r1, #1
   14f14:	movwne	r2, #1
   14f18:	mov	r0, #0
   14f1c:	bl	155b8 <__assert_fail@plt+0x45fc>
   14f20:	cmp	r0, #0
   14f24:	popne	{fp, pc}
   14f28:	bl	15358 <__assert_fail@plt+0x439c>
   14f2c:	push	{r4, r5, r6, sl, fp, lr}
   14f30:	add	fp, sp, #16
   14f34:	ldr	r5, [r1]
   14f38:	mov	r4, r1
   14f3c:	mov	r6, r0
   14f40:	cmp	r0, #0
   14f44:	beq	14f5c <__assert_fail@plt+0x3fa0>
   14f48:	mov	r0, #1
   14f4c:	add	r0, r0, r5, lsr #1
   14f50:	adds	r5, r5, r0
   14f54:	bcc	14f64 <__assert_fail@plt+0x3fa8>
   14f58:	b	14fa0 <__assert_fail@plt+0x3fe4>
   14f5c:	cmp	r5, #0
   14f60:	movweq	r5, #64	; 0x40
   14f64:	mov	r0, r6
   14f68:	mov	r1, r5
   14f6c:	mov	r2, #1
   14f70:	bl	155b8 <__assert_fail@plt+0x45fc>
   14f74:	cmp	r5, #0
   14f78:	mov	r1, r5
   14f7c:	movwne	r1, #1
   14f80:	cmp	r0, #0
   14f84:	bne	14f98 <__assert_fail@plt+0x3fdc>
   14f88:	clz	r2, r6
   14f8c:	lsr	r2, r2, #5
   14f90:	orrs	r1, r2, r1
   14f94:	bne	14fa0 <__assert_fail@plt+0x3fe4>
   14f98:	str	r5, [r4]
   14f9c:	pop	{r4, r5, r6, sl, fp, pc}
   14fa0:	bl	15358 <__assert_fail@plt+0x439c>
   14fa4:	push	{r4, r5, r6, r7, fp, lr}
   14fa8:	add	fp, sp, #16
   14fac:	ldr	r5, [r1]
   14fb0:	mov	r6, r2
   14fb4:	mov	r4, r1
   14fb8:	mov	r7, r0
   14fbc:	cmp	r0, #0
   14fc0:	beq	14fd8 <__assert_fail@plt+0x401c>
   14fc4:	mov	r0, #1
   14fc8:	add	r0, r0, r5, lsr #1
   14fcc:	adds	r5, r5, r0
   14fd0:	bcc	14ff0 <__assert_fail@plt+0x4034>
   14fd4:	b	15024 <__assert_fail@plt+0x4068>
   14fd8:	cmp	r5, #0
   14fdc:	bne	14ff0 <__assert_fail@plt+0x4034>
   14fe0:	mov	r0, #64	; 0x40
   14fe4:	cmp	r6, #64	; 0x40
   14fe8:	udiv	r5, r0, r6
   14fec:	addhi	r5, r5, #1
   14ff0:	mov	r0, r7
   14ff4:	mov	r1, r5
   14ff8:	mov	r2, r6
   14ffc:	bl	155b8 <__assert_fail@plt+0x45fc>
   15000:	cmp	r0, #0
   15004:	bne	1501c <__assert_fail@plt+0x4060>
   15008:	cmp	r7, #0
   1500c:	beq	15024 <__assert_fail@plt+0x4068>
   15010:	cmp	r6, #0
   15014:	cmpne	r5, #0
   15018:	bne	15024 <__assert_fail@plt+0x4068>
   1501c:	str	r5, [r4]
   15020:	pop	{r4, r5, r6, r7, fp, pc}
   15024:	bl	15358 <__assert_fail@plt+0x439c>
   15028:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1502c:	add	fp, sp, #24
   15030:	mov	r8, r1
   15034:	ldr	r1, [r1]
   15038:	mov	r5, r0
   1503c:	add	r0, r1, r1, asr #1
   15040:	cmp	r0, r1
   15044:	mvnvs	r0, #-2147483648	; 0x80000000
   15048:	cmp	r0, r3
   1504c:	mov	r7, r0
   15050:	movgt	r7, r3
   15054:	cmn	r3, #1
   15058:	movle	r7, r0
   1505c:	ldr	r0, [fp, #8]
   15060:	cmn	r0, #1
   15064:	ble	1508c <__assert_fail@plt+0x40d0>
   15068:	cmp	r0, #0
   1506c:	beq	150e0 <__assert_fail@plt+0x4124>
   15070:	cmn	r7, #1
   15074:	ble	150b4 <__assert_fail@plt+0x40f8>
   15078:	mvn	r4, #-2147483648	; 0x80000000
   1507c:	udiv	r6, r4, r0
   15080:	cmp	r6, r7
   15084:	bge	150e0 <__assert_fail@plt+0x4124>
   15088:	b	150f0 <__assert_fail@plt+0x4134>
   1508c:	cmn	r7, #1
   15090:	ble	150d0 <__assert_fail@plt+0x4114>
   15094:	cmn	r0, #1
   15098:	beq	150e0 <__assert_fail@plt+0x4124>
   1509c:	mov	r6, #-2147483648	; 0x80000000
   150a0:	mvn	r4, #-2147483648	; 0x80000000
   150a4:	sdiv	r6, r6, r0
   150a8:	cmp	r6, r7
   150ac:	bge	150e0 <__assert_fail@plt+0x4124>
   150b0:	b	150f0 <__assert_fail@plt+0x4134>
   150b4:	beq	150e0 <__assert_fail@plt+0x4124>
   150b8:	mov	r6, #-2147483648	; 0x80000000
   150bc:	mvn	r4, #-2147483648	; 0x80000000
   150c0:	sdiv	r6, r6, r7
   150c4:	cmp	r6, r0
   150c8:	bge	150e0 <__assert_fail@plt+0x4124>
   150cc:	b	150f0 <__assert_fail@plt+0x4134>
   150d0:	mvn	r4, #-2147483648	; 0x80000000
   150d4:	sdiv	r6, r4, r0
   150d8:	cmp	r7, r6
   150dc:	blt	150f0 <__assert_fail@plt+0x4134>
   150e0:	mul	r6, r7, r0
   150e4:	mov	r4, #64	; 0x40
   150e8:	cmp	r6, #63	; 0x3f
   150ec:	bgt	150f8 <__assert_fail@plt+0x413c>
   150f0:	sdiv	r7, r4, r0
   150f4:	mul	r6, r7, r0
   150f8:	cmp	r5, #0
   150fc:	moveq	r4, #0
   15100:	streq	r4, [r8]
   15104:	sub	r4, r7, r1
   15108:	cmp	r4, r2
   1510c:	bge	151b8 <__assert_fail@plt+0x41fc>
   15110:	add	r7, r1, r2
   15114:	mov	r6, #0
   15118:	mov	r2, #0
   1511c:	cmp	r7, r3
   15120:	movwgt	r6, #1
   15124:	cmn	r3, #1
   15128:	movwgt	r2, #1
   1512c:	cmp	r7, r1
   15130:	bvs	151ec <__assert_fail@plt+0x4230>
   15134:	ands	r1, r2, r6
   15138:	bne	151ec <__assert_fail@plt+0x4230>
   1513c:	cmn	r0, #1
   15140:	ble	15168 <__assert_fail@plt+0x41ac>
   15144:	cmp	r0, #0
   15148:	beq	151b4 <__assert_fail@plt+0x41f8>
   1514c:	cmn	r7, #1
   15150:	ble	1518c <__assert_fail@plt+0x41d0>
   15154:	mvn	r1, #-2147483648	; 0x80000000
   15158:	udiv	r1, r1, r0
   1515c:	cmp	r1, r7
   15160:	bge	151b4 <__assert_fail@plt+0x41f8>
   15164:	b	151ec <__assert_fail@plt+0x4230>
   15168:	cmn	r7, #1
   1516c:	ble	151a4 <__assert_fail@plt+0x41e8>
   15170:	cmn	r0, #1
   15174:	beq	151b4 <__assert_fail@plt+0x41f8>
   15178:	mov	r1, #-2147483648	; 0x80000000
   1517c:	sdiv	r1, r1, r0
   15180:	cmp	r1, r7
   15184:	bge	151b4 <__assert_fail@plt+0x41f8>
   15188:	b	151ec <__assert_fail@plt+0x4230>
   1518c:	beq	151b4 <__assert_fail@plt+0x41f8>
   15190:	mov	r1, #-2147483648	; 0x80000000
   15194:	sdiv	r1, r1, r7
   15198:	cmp	r1, r0
   1519c:	bge	151b4 <__assert_fail@plt+0x41f8>
   151a0:	b	151ec <__assert_fail@plt+0x4230>
   151a4:	mvn	r1, #-2147483648	; 0x80000000
   151a8:	sdiv	r1, r1, r0
   151ac:	cmp	r7, r1
   151b0:	blt	151ec <__assert_fail@plt+0x4230>
   151b4:	mul	r6, r7, r0
   151b8:	mov	r0, r5
   151bc:	mov	r1, r6
   151c0:	bl	15420 <__assert_fail@plt+0x4464>
   151c4:	cmp	r6, #0
   151c8:	movwne	r6, #1
   151cc:	cmp	r0, #0
   151d0:	bne	151e4 <__assert_fail@plt+0x4228>
   151d4:	clz	r1, r5
   151d8:	lsr	r1, r1, #5
   151dc:	orrs	r1, r1, r6
   151e0:	bne	151ec <__assert_fail@plt+0x4230>
   151e4:	str	r7, [r8]
   151e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   151ec:	bl	15358 <__assert_fail@plt+0x439c>
   151f0:	push	{fp, lr}
   151f4:	mov	fp, sp
   151f8:	mov	r1, #1
   151fc:	bl	1539c <__assert_fail@plt+0x43e0>
   15200:	cmp	r0, #0
   15204:	popne	{fp, pc}
   15208:	bl	15358 <__assert_fail@plt+0x439c>
   1520c:	push	{fp, lr}
   15210:	mov	fp, sp
   15214:	bl	1539c <__assert_fail@plt+0x43e0>
   15218:	cmp	r0, #0
   1521c:	popne	{fp, pc}
   15220:	bl	15358 <__assert_fail@plt+0x439c>
   15224:	push	{fp, lr}
   15228:	mov	fp, sp
   1522c:	mov	r1, #1
   15230:	bl	1539c <__assert_fail@plt+0x43e0>
   15234:	cmp	r0, #0
   15238:	popne	{fp, pc}
   1523c:	bl	15358 <__assert_fail@plt+0x439c>
   15240:	push	{fp, lr}
   15244:	mov	fp, sp
   15248:	bl	1539c <__assert_fail@plt+0x43e0>
   1524c:	cmp	r0, #0
   15250:	popne	{fp, pc}
   15254:	bl	15358 <__assert_fail@plt+0x439c>
   15258:	push	{r4, r5, r6, sl, fp, lr}
   1525c:	add	fp, sp, #16
   15260:	mov	r5, r0
   15264:	mov	r0, r1
   15268:	mov	r4, r1
   1526c:	bl	153f0 <__assert_fail@plt+0x4434>
   15270:	cmp	r0, #0
   15274:	beq	15290 <__assert_fail@plt+0x42d4>
   15278:	mov	r1, r5
   1527c:	mov	r2, r4
   15280:	mov	r6, r0
   15284:	bl	10dd0 <memcpy@plt>
   15288:	mov	r0, r6
   1528c:	pop	{r4, r5, r6, sl, fp, pc}
   15290:	bl	15358 <__assert_fail@plt+0x439c>
   15294:	push	{r4, r5, r6, sl, fp, lr}
   15298:	add	fp, sp, #16
   1529c:	mov	r5, r0
   152a0:	mov	r0, r1
   152a4:	mov	r4, r1
   152a8:	bl	153f0 <__assert_fail@plt+0x4434>
   152ac:	cmp	r0, #0
   152b0:	beq	152cc <__assert_fail@plt+0x4310>
   152b4:	mov	r1, r5
   152b8:	mov	r2, r4
   152bc:	mov	r6, r0
   152c0:	bl	10dd0 <memcpy@plt>
   152c4:	mov	r0, r6
   152c8:	pop	{r4, r5, r6, sl, fp, pc}
   152cc:	bl	15358 <__assert_fail@plt+0x439c>
   152d0:	push	{r4, r5, r6, sl, fp, lr}
   152d4:	add	fp, sp, #16
   152d8:	mov	r5, r0
   152dc:	add	r0, r1, #1
   152e0:	mov	r4, r1
   152e4:	bl	153f0 <__assert_fail@plt+0x4434>
   152e8:	cmp	r0, #0
   152ec:	beq	15314 <__assert_fail@plt+0x4358>
   152f0:	mov	r6, r0
   152f4:	mov	r0, #0
   152f8:	mov	r1, r5
   152fc:	mov	r2, r4
   15300:	strb	r0, [r6, r4]
   15304:	mov	r0, r6
   15308:	bl	10dd0 <memcpy@plt>
   1530c:	mov	r0, r6
   15310:	pop	{r4, r5, r6, sl, fp, pc}
   15314:	bl	15358 <__assert_fail@plt+0x439c>
   15318:	push	{r4, r5, r6, sl, fp, lr}
   1531c:	add	fp, sp, #16
   15320:	mov	r4, r0
   15324:	bl	10ef0 <strlen@plt>
   15328:	add	r5, r0, #1
   1532c:	mov	r0, r5
   15330:	bl	153f0 <__assert_fail@plt+0x4434>
   15334:	cmp	r0, #0
   15338:	beq	15354 <__assert_fail@plt+0x4398>
   1533c:	mov	r1, r4
   15340:	mov	r2, r5
   15344:	mov	r6, r0
   15348:	bl	10dd0 <memcpy@plt>
   1534c:	mov	r0, r6
   15350:	pop	{r4, r5, r6, sl, fp, pc}
   15354:	bl	15358 <__assert_fail@plt+0x439c>
   15358:	push	{fp, lr}
   1535c:	mov	fp, sp
   15360:	movw	r0, #28900	; 0x70e4
   15364:	movw	r1, #24584	; 0x6008
   15368:	mov	r2, #5
   1536c:	movt	r0, #2
   15370:	movt	r1, #1
   15374:	ldr	r4, [r0]
   15378:	mov	r0, #0
   1537c:	bl	10df4 <dcgettext@plt>
   15380:	movw	r2, #23471	; 0x5baf
   15384:	mov	r3, r0
   15388:	mov	r0, r4
   1538c:	mov	r1, #0
   15390:	movt	r2, #1
   15394:	bl	10e6c <error@plt>
   15398:	bl	10fa4 <abort@plt>
   1539c:	clz	r2, r1
   153a0:	clz	r3, r0
   153a4:	lsr	r2, r2, #5
   153a8:	lsr	r3, r3, #5
   153ac:	orrs	r2, r3, r2
   153b0:	movwne	r1, #1
   153b4:	movwne	r0, #1
   153b8:	cmp	r1, #0
   153bc:	beq	153ec <__assert_fail@plt+0x4430>
   153c0:	mvn	r2, #-2147483648	; 0x80000000
   153c4:	udiv	r2, r2, r1
   153c8:	cmp	r2, r0
   153cc:	bcs	153ec <__assert_fail@plt+0x4430>
   153d0:	push	{fp, lr}
   153d4:	mov	fp, sp
   153d8:	bl	10efc <__errno_location@plt>
   153dc:	mov	r1, #12
   153e0:	str	r1, [r0]
   153e4:	mov	r0, #0
   153e8:	pop	{fp, pc}
   153ec:	b	10d7c <calloc@plt>
   153f0:	cmp	r0, #0
   153f4:	movweq	r0, #1
   153f8:	cmn	r0, #1
   153fc:	ble	15404 <__assert_fail@plt+0x4448>
   15400:	b	10e90 <malloc@plt>
   15404:	push	{fp, lr}
   15408:	mov	fp, sp
   1540c:	bl	10efc <__errno_location@plt>
   15410:	mov	r1, #12
   15414:	str	r1, [r0]
   15418:	mov	r0, #0
   1541c:	pop	{fp, pc}
   15420:	push	{fp, lr}
   15424:	mov	fp, sp
   15428:	cmp	r0, #0
   1542c:	beq	15448 <__assert_fail@plt+0x448c>
   15430:	cmp	r1, #0
   15434:	beq	15454 <__assert_fail@plt+0x4498>
   15438:	cmn	r1, #1
   1543c:	ble	15460 <__assert_fail@plt+0x44a4>
   15440:	pop	{fp, lr}
   15444:	b	10e0c <realloc@plt>
   15448:	mov	r0, r1
   1544c:	pop	{fp, lr}
   15450:	b	153f0 <__assert_fail@plt+0x4434>
   15454:	bl	154f8 <__assert_fail@plt+0x453c>
   15458:	mov	r0, #0
   1545c:	pop	{fp, pc}
   15460:	bl	10efc <__errno_location@plt>
   15464:	mov	r1, #12
   15468:	str	r1, [r0]
   1546c:	mov	r0, #0
   15470:	pop	{fp, pc}
   15474:	push	{r4, r5, r6, sl, fp, lr}
   15478:	add	fp, sp, #16
   1547c:	mov	r4, r0
   15480:	bl	10e54 <__fpending@plt>
   15484:	ldr	r6, [r4]
   15488:	mov	r5, r0
   1548c:	mov	r0, r4
   15490:	bl	11f30 <__assert_fail@plt+0xf74>
   15494:	tst	r6, #32
   15498:	bne	154d0 <__assert_fail@plt+0x4514>
   1549c:	cmp	r0, #0
   154a0:	mov	r4, r0
   154a4:	mvnne	r4, #0
   154a8:	cmp	r5, #0
   154ac:	bne	154dc <__assert_fail@plt+0x4520>
   154b0:	cmp	r0, #0
   154b4:	beq	154dc <__assert_fail@plt+0x4520>
   154b8:	bl	10efc <__errno_location@plt>
   154bc:	ldr	r0, [r0]
   154c0:	subs	r4, r0, #9
   154c4:	mvnne	r4, #0
   154c8:	mov	r0, r4
   154cc:	pop	{r4, r5, r6, sl, fp, pc}
   154d0:	mvn	r4, #0
   154d4:	cmp	r0, #0
   154d8:	beq	154e4 <__assert_fail@plt+0x4528>
   154dc:	mov	r0, r4
   154e0:	pop	{r4, r5, r6, sl, fp, pc}
   154e4:	bl	10efc <__errno_location@plt>
   154e8:	mov	r1, #0
   154ec:	str	r1, [r0]
   154f0:	mov	r0, r4
   154f4:	pop	{r4, r5, r6, sl, fp, pc}
   154f8:	push	{r4, r5, r6, sl, fp, lr}
   154fc:	add	fp, sp, #16
   15500:	mov	r4, r0
   15504:	bl	10efc <__errno_location@plt>
   15508:	ldr	r6, [r0]
   1550c:	mov	r5, r0
   15510:	mov	r0, r4
   15514:	bl	10db8 <free@plt>
   15518:	str	r6, [r5]
   1551c:	pop	{r4, r5, r6, sl, fp, pc}
   15520:	push	{fp, lr}
   15524:	mov	fp, sp
   15528:	mov	r0, #14
   1552c:	bl	10f80 <nl_langinfo@plt>
   15530:	movw	r1, #23087	; 0x5a2f
   15534:	cmp	r0, #0
   15538:	movt	r1, #1
   1553c:	movne	r1, r0
   15540:	movw	r0, #24601	; 0x6019
   15544:	ldrb	r2, [r1]
   15548:	movt	r0, #1
   1554c:	cmp	r2, #0
   15550:	movne	r0, r1
   15554:	pop	{fp, pc}
   15558:	push	{r4, r5, r6, r7, fp, lr}
   1555c:	add	fp, sp, #16
   15560:	sub	sp, sp, #8
   15564:	add	r5, sp, #4
   15568:	cmp	r0, #0
   1556c:	mov	r7, r2
   15570:	mov	r4, r1
   15574:	movne	r5, r0
   15578:	mov	r0, r5
   1557c:	bl	10e60 <mbrtowc@plt>
   15580:	mov	r6, r0
   15584:	cmp	r7, #0
   15588:	beq	155ac <__assert_fail@plt+0x45f0>
   1558c:	cmn	r6, #2
   15590:	bcc	155ac <__assert_fail@plt+0x45f0>
   15594:	mov	r0, #0
   15598:	bl	155f4 <__assert_fail@plt+0x4638>
   1559c:	cmp	r0, #0
   155a0:	ldrbeq	r0, [r4]
   155a4:	moveq	r6, #1
   155a8:	streq	r0, [r5]
   155ac:	mov	r0, r6
   155b0:	sub	sp, fp, #16
   155b4:	pop	{r4, r5, r6, r7, fp, pc}
   155b8:	cmp	r2, #0
   155bc:	beq	155ec <__assert_fail@plt+0x4630>
   155c0:	mvn	r3, #0
   155c4:	udiv	r3, r3, r2
   155c8:	cmp	r3, r1
   155cc:	bcs	155ec <__assert_fail@plt+0x4630>
   155d0:	push	{fp, lr}
   155d4:	mov	fp, sp
   155d8:	bl	10efc <__errno_location@plt>
   155dc:	mov	r1, #12
   155e0:	str	r1, [r0]
   155e4:	mov	r0, #0
   155e8:	pop	{fp, pc}
   155ec:	mul	r1, r2, r1
   155f0:	b	15420 <__assert_fail@plt+0x4464>
   155f4:	push	{r4, sl, fp, lr}
   155f8:	add	fp, sp, #8
   155fc:	sub	sp, sp, #264	; 0x108
   15600:	add	r1, sp, #7
   15604:	movw	r2, #257	; 0x101
   15608:	bl	15658 <__assert_fail@plt+0x469c>
   1560c:	mov	r4, #0
   15610:	cmp	r0, #0
   15614:	bne	1564c <__assert_fail@plt+0x4690>
   15618:	movw	r1, #24607	; 0x601f
   1561c:	add	r0, sp, #7
   15620:	movt	r1, #1
   15624:	bl	10d94 <strcmp@plt>
   15628:	cmp	r0, #0
   1562c:	beq	1564c <__assert_fail@plt+0x4690>
   15630:	movw	r1, #24609	; 0x6021
   15634:	add	r0, sp, #7
   15638:	movt	r1, #1
   1563c:	bl	10d94 <strcmp@plt>
   15640:	mov	r4, r0
   15644:	cmp	r0, #0
   15648:	movwne	r4, #1
   1564c:	mov	r0, r4
   15650:	sub	sp, fp, #8
   15654:	pop	{r4, sl, fp, pc}
   15658:	push	{r4, r5, r6, r7, fp, lr}
   1565c:	add	fp, sp, #16
   15660:	mov	r4, r1
   15664:	mov	r1, #0
   15668:	mov	r6, r2
   1566c:	bl	10f68 <setlocale@plt>
   15670:	cmp	r0, #0
   15674:	beq	156a4 <__assert_fail@plt+0x46e8>
   15678:	mov	r7, r0
   1567c:	bl	10ef0 <strlen@plt>
   15680:	cmp	r0, r6
   15684:	bcs	156c4 <__assert_fail@plt+0x4708>
   15688:	add	r2, r0, #1
   1568c:	mov	r0, r4
   15690:	mov	r1, r7
   15694:	bl	10dd0 <memcpy@plt>
   15698:	mov	r5, #0
   1569c:	mov	r0, r5
   156a0:	pop	{r4, r5, r6, r7, fp, pc}
   156a4:	cmp	r6, #0
   156a8:	mov	r5, #22
   156ac:	movne	r0, #0
   156b0:	strbne	r0, [r4]
   156b4:	movne	r0, r5
   156b8:	popne	{r4, r5, r6, r7, fp, pc}
   156bc:	mov	r0, r5
   156c0:	pop	{r4, r5, r6, r7, fp, pc}
   156c4:	mov	r5, #34	; 0x22
   156c8:	cmp	r6, #0
   156cc:	beq	156ec <__assert_fail@plt+0x4730>
   156d0:	sub	r6, r6, #1
   156d4:	mov	r0, r4
   156d8:	mov	r1, r7
   156dc:	mov	r2, r6
   156e0:	bl	10dd0 <memcpy@plt>
   156e4:	mov	r0, #0
   156e8:	strb	r0, [r4, r6]
   156ec:	mov	r0, r5
   156f0:	pop	{r4, r5, r6, r7, fp, pc}
   156f4:	mov	r1, #0
   156f8:	b	10f68 <setlocale@plt>
   156fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15700:	mov	r7, r0
   15704:	ldr	r6, [pc, #72]	; 15754 <__assert_fail@plt+0x4798>
   15708:	ldr	r5, [pc, #72]	; 15758 <__assert_fail@plt+0x479c>
   1570c:	add	r6, pc, r6
   15710:	add	r5, pc, r5
   15714:	sub	r6, r6, r5
   15718:	mov	r8, r1
   1571c:	mov	r9, r2
   15720:	bl	10d5c <calloc@plt-0x20>
   15724:	asrs	r6, r6, #2
   15728:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1572c:	mov	r4, #0
   15730:	add	r4, r4, #1
   15734:	ldr	r3, [r5], #4
   15738:	mov	r2, r9
   1573c:	mov	r1, r8
   15740:	mov	r0, r7
   15744:	blx	r3
   15748:	cmp	r6, r4
   1574c:	bne	15730 <__assert_fail@plt+0x4774>
   15750:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15754:	strdeq	r1, [r1], -r8
   15758:	strdeq	r1, [r1], -r0
   1575c:	bx	lr
   15760:	ldr	r3, [pc, #12]	; 15774 <__assert_fail@plt+0x47b8>
   15764:	mov	r1, #0
   15768:	add	r3, pc, r3
   1576c:	ldr	r2, [r3]
   15770:	b	10f08 <__cxa_atexit@plt>
   15774:	andeq	r1, r1, ip, ror #18

Disassembly of section .fini:

00015778 <.fini>:
   15778:	push	{r3, lr}
   1577c:	pop	{r3, pc}
