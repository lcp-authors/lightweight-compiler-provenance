
../repos/coreutils/src/numfmt:     file format elf32-littlearm


Disassembly of section .init:

00011040 <.init>:
   11040:	push	{r3, lr}
   11044:	bl	1136c <__assert_fail@plt+0x48>
   11048:	pop	{r3, pc}

Disassembly of section .plt:

0001104c <calloc@plt-0x14>:
   1104c:	push	{lr}		; (str lr, [sp, #-4]!)
   11050:	ldr	lr, [pc, #4]	; 1105c <calloc@plt-0x4>
   11054:	add	lr, pc, lr
   11058:	ldr	pc, [lr, #8]!
   1105c:	andeq	fp, r1, r4, lsr #31

00011060 <calloc@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #110592	; 0x1b000
   11068:	ldr	pc, [ip, #4004]!	; 0xfa4

0001106c <fputs_unlocked@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #110592	; 0x1b000
   11074:	ldr	pc, [ip, #3996]!	; 0xf9c

00011078 <raise@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #110592	; 0x1b000
   11080:	ldr	pc, [ip, #3988]!	; 0xf94

00011084 <__strncat_chk@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #110592	; 0x1b000
   1108c:	ldr	pc, [ip, #3980]!	; 0xf8c

00011090 <strcmp@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #110592	; 0x1b000
   11098:	ldr	pc, [ip, #3972]!	; 0xf84

0001109c <strtol@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #110592	; 0x1b000
   110a4:	ldr	pc, [ip, #3964]!	; 0xf7c

000110a8 <fflush@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #110592	; 0x1b000
   110b0:	ldr	pc, [ip, #3956]!	; 0xf74

000110b4 <wcwidth@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #110592	; 0x1b000
   110bc:	ldr	pc, [ip, #3948]!	; 0xf6c

000110c0 <memmove@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #110592	; 0x1b000
   110c8:	ldr	pc, [ip, #3940]!	; 0xf64

000110cc <free@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #110592	; 0x1b000
   110d4:	ldr	pc, [ip, #3932]!	; 0xf5c

000110d8 <_exit@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #110592	; 0x1b000
   110e0:	ldr	pc, [ip, #3924]!	; 0xf54

000110e4 <memcpy@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #110592	; 0x1b000
   110ec:	ldr	pc, [ip, #3916]!	; 0xf4c

000110f0 <__strtoull_internal@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #110592	; 0x1b000
   110f8:	ldr	pc, [ip, #3908]!	; 0xf44

000110fc <mbsinit@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #110592	; 0x1b000
   11104:	ldr	pc, [ip, #3900]!	; 0xf3c

00011108 <memcmp@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #110592	; 0x1b000
   11110:	ldr	pc, [ip, #3892]!	; 0xf34

00011114 <dcgettext@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #110592	; 0x1b000
   1111c:	ldr	pc, [ip, #3884]!	; 0xf2c

00011120 <realloc@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #110592	; 0x1b000
   11128:	ldr	pc, [ip, #3876]!	; 0xf24

0001112c <textdomain@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #110592	; 0x1b000
   11134:	ldr	pc, [ip, #3868]!	; 0xf1c

00011138 <iswprint@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #110592	; 0x1b000
   11140:	ldr	pc, [ip, #3860]!	; 0xf14

00011144 <fwrite@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #110592	; 0x1b000
   1114c:	ldr	pc, [ip, #3852]!	; 0xf0c

00011150 <lseek64@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #110592	; 0x1b000
   11158:	ldr	pc, [ip, #3844]!	; 0xf04

0001115c <__ctype_get_mb_cur_max@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #110592	; 0x1b000
   11164:	ldr	pc, [ip, #3836]!	; 0xefc

00011168 <strcpy@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #110592	; 0x1b000
   11170:	ldr	pc, [ip, #3828]!	; 0xef4

00011174 <__fpending@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #110592	; 0x1b000
   1117c:	ldr	pc, [ip, #3820]!	; 0xeec

00011180 <mbrtowc@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #110592	; 0x1b000
   11188:	ldr	pc, [ip, #3812]!	; 0xee4

0001118c <wcstombs@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #110592	; 0x1b000
   11194:	ldr	pc, [ip, #3804]!	; 0xedc

00011198 <error@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #110592	; 0x1b000
   111a0:	ldr	pc, [ip, #3796]!	; 0xed4

000111a4 <malloc@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #110592	; 0x1b000
   111ac:	ldr	pc, [ip, #3788]!	; 0xecc

000111b0 <__libc_start_main@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #110592	; 0x1b000
   111b8:	ldr	pc, [ip, #3780]!	; 0xec4

000111bc <__freading@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #110592	; 0x1b000
   111c4:	ldr	pc, [ip, #3772]!	; 0xebc

000111c8 <__gmon_start__@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #110592	; 0x1b000
   111d0:	ldr	pc, [ip, #3764]!	; 0xeb4

000111d4 <getopt_long@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #110592	; 0x1b000
   111dc:	ldr	pc, [ip, #3756]!	; 0xeac

000111e0 <__ctype_b_loc@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #110592	; 0x1b000
   111e8:	ldr	pc, [ip, #3748]!	; 0xea4

000111ec <exit@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #110592	; 0x1b000
   111f4:	ldr	pc, [ip, #3740]!	; 0xe9c

000111f8 <strlen@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #110592	; 0x1b000
   11200:	ldr	pc, [ip, #3732]!	; 0xe94

00011204 <strchr@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #110592	; 0x1b000
   1120c:	ldr	pc, [ip, #3724]!	; 0xe8c

00011210 <__errno_location@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #110592	; 0x1b000
   11218:	ldr	pc, [ip, #3716]!	; 0xe84

0001121c <__cxa_atexit@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #110592	; 0x1b000
   11224:	ldr	pc, [ip, #3708]!	; 0xe7c

00011228 <memset@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #110592	; 0x1b000
   11230:	ldr	pc, [ip, #3700]!	; 0xe74

00011234 <__printf_chk@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #110592	; 0x1b000
   1123c:	ldr	pc, [ip, #3692]!	; 0xe6c

00011240 <fileno@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #110592	; 0x1b000
   11248:	ldr	pc, [ip, #3684]!	; 0xe64

0001124c <__fprintf_chk@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #110592	; 0x1b000
   11254:	ldr	pc, [ip, #3676]!	; 0xe5c

00011258 <memchr@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #110592	; 0x1b000
   11260:	ldr	pc, [ip, #3668]!	; 0xe54

00011264 <fclose@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #110592	; 0x1b000
   1126c:	ldr	pc, [ip, #3660]!	; 0xe4c

00011270 <fseeko64@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #110592	; 0x1b000
   11278:	ldr	pc, [ip, #3652]!	; 0xe44

0001127c <__overflow@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #110592	; 0x1b000
   11284:	ldr	pc, [ip, #3644]!	; 0xe3c

00011288 <setlocale@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #110592	; 0x1b000
   11290:	ldr	pc, [ip, #3636]!	; 0xe34

00011294 <wcswidth@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #110592	; 0x1b000
   1129c:	ldr	pc, [ip, #3628]!	; 0xe2c

000112a0 <strrchr@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #110592	; 0x1b000
   112a8:	ldr	pc, [ip, #3620]!	; 0xe24

000112ac <nl_langinfo@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #110592	; 0x1b000
   112b4:	ldr	pc, [ip, #3612]!	; 0xe1c

000112b8 <mbstowcs@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #110592	; 0x1b000
   112c0:	ldr	pc, [ip, #3604]!	; 0xe14

000112c4 <qsort@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #110592	; 0x1b000
   112cc:	ldr	pc, [ip, #3596]!	; 0xe0c

000112d0 <bindtextdomain@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #110592	; 0x1b000
   112d8:	ldr	pc, [ip, #3588]!	; 0xe04

000112dc <getdelim@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #110592	; 0x1b000
   112e4:	ldr	pc, [ip, #3580]!	; 0xdfc

000112e8 <strncmp@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #110592	; 0x1b000
   112f0:	ldr	pc, [ip, #3572]!	; 0xdf4

000112f4 <abort@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #110592	; 0x1b000
   112fc:	ldr	pc, [ip, #3564]!	; 0xdec

00011300 <__snprintf_chk@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #110592	; 0x1b000
   11308:	ldr	pc, [ip, #3556]!	; 0xde4

0001130c <strspn@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #110592	; 0x1b000
   11314:	ldr	pc, [ip, #3548]!	; 0xddc

00011318 <__mempcpy_chk@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #110592	; 0x1b000
   11320:	ldr	pc, [ip, #3540]!	; 0xdd4

00011324 <__assert_fail@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #110592	; 0x1b000
   1132c:	ldr	pc, [ip, #3532]!	; 0xdcc

Disassembly of section .text:

00011330 <.text>:
   11330:	mov	fp, #0
   11334:	mov	lr, #0
   11338:	pop	{r1}		; (ldr r1, [sp], #4)
   1133c:	mov	r2, sp
   11340:	push	{r2}		; (str r2, [sp, #-4]!)
   11344:	push	{r0}		; (str r0, [sp, #-4]!)
   11348:	ldr	ip, [pc, #16]	; 11360 <__assert_fail@plt+0x3c>
   1134c:	push	{ip}		; (str ip, [sp, #-4]!)
   11350:	ldr	r0, [pc, #12]	; 11364 <__assert_fail@plt+0x40>
   11354:	ldr	r3, [pc, #12]	; 11368 <__assert_fail@plt+0x44>
   11358:	bl	111b0 <__libc_start_main@plt>
   1135c:	bl	112f4 <abort@plt>
   11360:	andeq	sl, r1, r0
   11364:	andeq	r1, r1, ip, ror #18
   11368:	andeq	r9, r1, r0, lsr #31
   1136c:	ldr	r3, [pc, #20]	; 11388 <__assert_fail@plt+0x64>
   11370:	ldr	r2, [pc, #20]	; 1138c <__assert_fail@plt+0x68>
   11374:	add	r3, pc, r3
   11378:	ldr	r2, [r3, r2]
   1137c:	cmp	r2, #0
   11380:	bxeq	lr
   11384:	b	111c8 <__gmon_start__@plt>
   11388:	andeq	fp, r1, r4, lsl #25
   1138c:	strdeq	r0, [r0], -ip
   11390:	ldr	r0, [pc, #24]	; 113b0 <__assert_fail@plt+0x8c>
   11394:	ldr	r3, [pc, #24]	; 113b4 <__assert_fail@plt+0x90>
   11398:	cmp	r3, r0
   1139c:	bxeq	lr
   113a0:	ldr	r3, [pc, #16]	; 113b8 <__assert_fail@plt+0x94>
   113a4:	cmp	r3, #0
   113a8:	bxeq	lr
   113ac:	bx	r3
   113b0:	andeq	sp, r2, r0, ror r1
   113b4:	andeq	sp, r2, r0, ror r1
   113b8:	andeq	r0, r0, r0
   113bc:	ldr	r0, [pc, #36]	; 113e8 <__assert_fail@plt+0xc4>
   113c0:	ldr	r1, [pc, #36]	; 113ec <__assert_fail@plt+0xc8>
   113c4:	sub	r1, r1, r0
   113c8:	asr	r1, r1, #2
   113cc:	add	r1, r1, r1, lsr #31
   113d0:	asrs	r1, r1, #1
   113d4:	bxeq	lr
   113d8:	ldr	r3, [pc, #16]	; 113f0 <__assert_fail@plt+0xcc>
   113dc:	cmp	r3, #0
   113e0:	bxeq	lr
   113e4:	bx	r3
   113e8:	andeq	sp, r2, r0, ror r1
   113ec:	andeq	sp, r2, r0, ror r1
   113f0:	andeq	r0, r0, r0
   113f4:	push	{r4, lr}
   113f8:	ldr	r4, [pc, #24]	; 11418 <__assert_fail@plt+0xf4>
   113fc:	ldrb	r3, [r4]
   11400:	cmp	r3, #0
   11404:	popne	{r4, pc}
   11408:	bl	11390 <__assert_fail@plt+0x6c>
   1140c:	mov	r3, #1
   11410:	strb	r3, [r4]
   11414:	pop	{r4, pc}
   11418:	muleq	r2, r4, r1
   1141c:	b	113bc <__assert_fail@plt+0x98>
   11420:	push	{fp, lr}
   11424:	mov	fp, sp
   11428:	sub	sp, sp, #88	; 0x58
   1142c:	mov	r4, r0
   11430:	cmp	r0, #0
   11434:	bne	11928 <__assert_fail@plt+0x604>
   11438:	movw	r1, #41051	; 0xa05b
   1143c:	mov	r0, #0
   11440:	mov	r2, #5
   11444:	movt	r1, #1
   11448:	bl	11114 <dcgettext@plt>
   1144c:	movw	r5, #53756	; 0xd1fc
   11450:	mov	r1, r0
   11454:	mov	r0, #1
   11458:	movt	r5, #2
   1145c:	ldr	r2, [r5]
   11460:	bl	11234 <__printf_chk@plt>
   11464:	movw	r1, #41086	; 0xa07e
   11468:	mov	r0, #0
   1146c:	mov	r2, #5
   11470:	movt	r1, #1
   11474:	bl	11114 <dcgettext@plt>
   11478:	movw	r7, #53644	; 0xd18c
   1147c:	movt	r7, #2
   11480:	ldr	r1, [r7]
   11484:	bl	1106c <fputs_unlocked@plt>
   11488:	movw	r1, #45688	; 0xb278
   1148c:	mov	r0, #0
   11490:	mov	r2, #5
   11494:	movt	r1, #1
   11498:	bl	11114 <dcgettext@plt>
   1149c:	ldr	r1, [r7]
   114a0:	bl	1106c <fputs_unlocked@plt>
   114a4:	movw	r1, #41165	; 0xa0cd
   114a8:	mov	r0, #0
   114ac:	mov	r2, #5
   114b0:	movt	r1, #1
   114b4:	bl	11114 <dcgettext@plt>
   114b8:	ldr	r1, [r7]
   114bc:	bl	1106c <fputs_unlocked@plt>
   114c0:	movw	r1, #41224	; 0xa108
   114c4:	mov	r0, #0
   114c8:	mov	r2, #5
   114cc:	movt	r1, #1
   114d0:	bl	11114 <dcgettext@plt>
   114d4:	ldr	r1, [r7]
   114d8:	bl	1106c <fputs_unlocked@plt>
   114dc:	movw	r1, #41296	; 0xa150
   114e0:	mov	r0, #0
   114e4:	mov	r2, #5
   114e8:	movt	r1, #1
   114ec:	bl	11114 <dcgettext@plt>
   114f0:	ldr	r1, [r7]
   114f4:	bl	1106c <fputs_unlocked@plt>
   114f8:	movw	r1, #41417	; 0xa1c9
   114fc:	mov	r0, #0
   11500:	mov	r2, #5
   11504:	movt	r1, #1
   11508:	bl	11114 <dcgettext@plt>
   1150c:	ldr	r1, [r7]
   11510:	bl	1106c <fputs_unlocked@plt>
   11514:	movw	r1, #41535	; 0xa23f
   11518:	mov	r0, #0
   1151c:	mov	r2, #5
   11520:	movt	r1, #1
   11524:	bl	11114 <dcgettext@plt>
   11528:	ldr	r1, [r7]
   1152c:	bl	1106c <fputs_unlocked@plt>
   11530:	movw	r1, #41653	; 0xa2b5
   11534:	mov	r0, #0
   11538:	mov	r2, #5
   1153c:	movt	r1, #1
   11540:	bl	11114 <dcgettext@plt>
   11544:	ldr	r1, [r7]
   11548:	bl	1106c <fputs_unlocked@plt>
   1154c:	movw	r1, #41732	; 0xa304
   11550:	mov	r0, #0
   11554:	mov	r2, #5
   11558:	movt	r1, #1
   1155c:	bl	11114 <dcgettext@plt>
   11560:	ldr	r1, [r7]
   11564:	bl	1106c <fputs_unlocked@plt>
   11568:	movw	r1, #41888	; 0xa3a0
   1156c:	mov	r0, #0
   11570:	mov	r2, #5
   11574:	movt	r1, #1
   11578:	bl	11114 <dcgettext@plt>
   1157c:	ldr	r1, [r7]
   11580:	bl	1106c <fputs_unlocked@plt>
   11584:	movw	r1, #42023	; 0xa427
   11588:	mov	r0, #0
   1158c:	mov	r2, #5
   11590:	movt	r1, #1
   11594:	bl	11114 <dcgettext@plt>
   11598:	ldr	r1, [r7]
   1159c:	bl	1106c <fputs_unlocked@plt>
   115a0:	movw	r1, #42155	; 0xa4ab
   115a4:	mov	r0, #0
   115a8:	mov	r2, #5
   115ac:	movt	r1, #1
   115b0:	bl	11114 <dcgettext@plt>
   115b4:	ldr	r1, [r7]
   115b8:	bl	1106c <fputs_unlocked@plt>
   115bc:	movw	r1, #42479	; 0xa5ef
   115c0:	mov	r0, #0
   115c4:	mov	r2, #5
   115c8:	movt	r1, #1
   115cc:	bl	11114 <dcgettext@plt>
   115d0:	ldr	r1, [r7]
   115d4:	bl	1106c <fputs_unlocked@plt>
   115d8:	movw	r1, #42634	; 0xa68a
   115dc:	mov	r0, #0
   115e0:	mov	r2, #5
   115e4:	movt	r1, #1
   115e8:	bl	11114 <dcgettext@plt>
   115ec:	ldr	r1, [r7]
   115f0:	bl	1106c <fputs_unlocked@plt>
   115f4:	movw	r1, #42757	; 0xa705
   115f8:	mov	r0, #0
   115fc:	mov	r2, #5
   11600:	movt	r1, #1
   11604:	bl	11114 <dcgettext@plt>
   11608:	ldr	r1, [r7]
   1160c:	bl	1106c <fputs_unlocked@plt>
   11610:	movw	r1, #42832	; 0xa750
   11614:	mov	r0, #0
   11618:	mov	r2, #5
   1161c:	movt	r1, #1
   11620:	bl	11114 <dcgettext@plt>
   11624:	ldr	r1, [r7]
   11628:	bl	1106c <fputs_unlocked@plt>
   1162c:	movw	r1, #42904	; 0xa798
   11630:	mov	r0, #0
   11634:	mov	r2, #5
   11638:	movt	r1, #1
   1163c:	bl	11114 <dcgettext@plt>
   11640:	ldr	r1, [r7]
   11644:	bl	1106c <fputs_unlocked@plt>
   11648:	movw	r1, #42967	; 0xa7d7
   1164c:	mov	r0, #0
   11650:	mov	r2, #5
   11654:	movt	r1, #1
   11658:	bl	11114 <dcgettext@plt>
   1165c:	ldr	r1, [r7]
   11660:	bl	1106c <fputs_unlocked@plt>
   11664:	movw	r1, #43012	; 0xa804
   11668:	mov	r0, #0
   1166c:	mov	r2, #5
   11670:	movt	r1, #1
   11674:	bl	11114 <dcgettext@plt>
   11678:	ldr	r1, [r7]
   1167c:	bl	1106c <fputs_unlocked@plt>
   11680:	movw	r1, #43066	; 0xa83a
   11684:	mov	r0, #0
   11688:	mov	r2, #5
   1168c:	movt	r1, #1
   11690:	bl	11114 <dcgettext@plt>
   11694:	ldr	r1, [r7]
   11698:	bl	1106c <fputs_unlocked@plt>
   1169c:	movw	r1, #43082	; 0xa84a
   116a0:	mov	r0, #0
   116a4:	mov	r2, #5
   116a8:	movt	r1, #1
   116ac:	bl	11114 <dcgettext@plt>
   116b0:	ldr	r1, [r7]
   116b4:	bl	1106c <fputs_unlocked@plt>
   116b8:	movw	r1, #43152	; 0xa890
   116bc:	mov	r0, #0
   116c0:	mov	r2, #5
   116c4:	movt	r1, #1
   116c8:	bl	11114 <dcgettext@plt>
   116cc:	ldr	r1, [r7]
   116d0:	bl	1106c <fputs_unlocked@plt>
   116d4:	movw	r1, #43320	; 0xa938
   116d8:	mov	r0, #0
   116dc:	mov	r2, #5
   116e0:	movt	r1, #1
   116e4:	bl	11114 <dcgettext@plt>
   116e8:	ldr	r1, [r7]
   116ec:	bl	1106c <fputs_unlocked@plt>
   116f0:	movw	r1, #43446	; 0xa9b6
   116f4:	mov	r0, #0
   116f8:	mov	r2, #5
   116fc:	movt	r1, #1
   11700:	bl	11114 <dcgettext@plt>
   11704:	ldr	r1, [r7]
   11708:	bl	1106c <fputs_unlocked@plt>
   1170c:	movw	r1, #43572	; 0xaa34
   11710:	mov	r0, #0
   11714:	mov	r2, #5
   11718:	movt	r1, #1
   1171c:	bl	11114 <dcgettext@plt>
   11720:	ldr	r1, [r7]
   11724:	bl	1106c <fputs_unlocked@plt>
   11728:	movw	r1, #43697	; 0xaab1
   1172c:	mov	r0, #0
   11730:	mov	r2, #5
   11734:	movt	r1, #1
   11738:	bl	11114 <dcgettext@plt>
   1173c:	ldr	r1, [r7]
   11740:	bl	1106c <fputs_unlocked@plt>
   11744:	movw	r1, #43972	; 0xabc4
   11748:	mov	r0, #0
   1174c:	mov	r2, #5
   11750:	movt	r1, #1
   11754:	bl	11114 <dcgettext@plt>
   11758:	ldr	r1, [r7]
   1175c:	bl	1106c <fputs_unlocked@plt>
   11760:	movw	r1, #44344	; 0xad38
   11764:	mov	r0, #0
   11768:	mov	r2, #5
   1176c:	movt	r1, #1
   11770:	bl	11114 <dcgettext@plt>
   11774:	ldr	r2, [r5]
   11778:	mov	r1, r0
   1177c:	mov	r0, #1
   11780:	bl	11234 <__printf_chk@plt>
   11784:	movw	r1, #44755	; 0xaed3
   11788:	mov	r0, #0
   1178c:	mov	r2, #5
   11790:	movt	r1, #1
   11794:	bl	11114 <dcgettext@plt>
   11798:	ldr	r2, [r5]
   1179c:	mov	r1, r0
   117a0:	mov	r0, #1
   117a4:	mov	r3, r2
   117a8:	str	r2, [sp]
   117ac:	str	r2, [sp, #4]
   117b0:	str	r2, [sp, #8]
   117b4:	str	r2, [sp, #12]
   117b8:	str	r2, [sp, #16]
   117bc:	str	r2, [sp, #20]
   117c0:	str	r2, [sp, #24]
   117c4:	bl	11234 <__printf_chk@plt>
   117c8:	movw	r0, #48288	; 0xbca0
   117cc:	mov	r2, #48	; 0x30
   117d0:	add	r6, sp, #32
   117d4:	movw	r5, #45202	; 0xb092
   117d8:	movt	r0, #1
   117dc:	movt	r5, #1
   117e0:	add	r1, r0, #32
   117e4:	add	r3, r0, #16
   117e8:	vld1.64	{d18-d19}, [r0], r2
   117ec:	vld1.64	{d16-d17}, [r1]
   117f0:	vld1.64	{d20-d21}, [r3]
   117f4:	add	r1, r6, #32
   117f8:	vldr	d22, [r0]
   117fc:	add	r0, r6, #16
   11800:	vst1.64	{d16-d17}, [r1]
   11804:	movw	r1, #45763	; 0xb2c3
   11808:	vst1.64	{d20-d21}, [r0]
   1180c:	mov	r0, r6
   11810:	vst1.64	{d18-d19}, [r0], r2
   11814:	movt	r1, #1
   11818:	vstr	d22, [r0]
   1181c:	mov	r0, r5
   11820:	bl	11090 <strcmp@plt>
   11824:	cmp	r0, #0
   11828:	ldrne	r1, [r6, #8]!
   1182c:	cmpne	r1, #0
   11830:	bne	1181c <__assert_fail@plt+0x4f8>
   11834:	ldr	r6, [r6, #4]
   11838:	movw	r1, #45858	; 0xb322
   1183c:	mov	r0, #0
   11840:	mov	r2, #5
   11844:	movt	r1, #1
   11848:	bl	11114 <dcgettext@plt>
   1184c:	movw	r2, #45384	; 0xb148
   11850:	movw	r3, #45881	; 0xb339
   11854:	mov	r1, r0
   11858:	mov	r0, #1
   1185c:	movt	r2, #1
   11860:	movt	r3, #1
   11864:	bl	11234 <__printf_chk@plt>
   11868:	cmp	r6, #0
   1186c:	mov	r0, #5
   11870:	mov	r1, #0
   11874:	moveq	r6, r5
   11878:	bl	11288 <setlocale@plt>
   1187c:	cmp	r0, #0
   11880:	beq	118b8 <__assert_fail@plt+0x594>
   11884:	movw	r1, #45921	; 0xb361
   11888:	mov	r2, #3
   1188c:	movt	r1, #1
   11890:	bl	112e8 <strncmp@plt>
   11894:	cmp	r0, #0
   11898:	beq	118b8 <__assert_fail@plt+0x594>
   1189c:	movw	r1, #45925	; 0xb365
   118a0:	mov	r0, #0
   118a4:	mov	r2, #5
   118a8:	movt	r1, #1
   118ac:	bl	11114 <dcgettext@plt>
   118b0:	ldr	r1, [r7]
   118b4:	bl	1106c <fputs_unlocked@plt>
   118b8:	movw	r1, #45996	; 0xb3ac
   118bc:	mov	r0, #0
   118c0:	mov	r2, #5
   118c4:	movt	r1, #1
   118c8:	bl	11114 <dcgettext@plt>
   118cc:	movw	r2, #45881	; 0xb339
   118d0:	mov	r1, r0
   118d4:	mov	r0, #1
   118d8:	mov	r3, r5
   118dc:	movt	r2, #1
   118e0:	bl	11234 <__printf_chk@plt>
   118e4:	movw	r1, #46023	; 0xb3c7
   118e8:	mov	r0, #0
   118ec:	mov	r2, #5
   118f0:	movt	r1, #1
   118f4:	bl	11114 <dcgettext@plt>
   118f8:	movw	r3, #46073	; 0xb3f9
   118fc:	mov	r1, r0
   11900:	movw	r0, #45791	; 0xb2df
   11904:	cmp	r6, r5
   11908:	mov	r2, r6
   1190c:	movt	r0, #1
   11910:	movt	r3, #1
   11914:	moveq	r3, r0
   11918:	mov	r0, #1
   1191c:	bl	11234 <__printf_chk@plt>
   11920:	mov	r0, r4
   11924:	bl	111ec <exit@plt>
   11928:	movw	r0, #53632	; 0xd180
   1192c:	movw	r1, #41012	; 0xa034
   11930:	mov	r2, #5
   11934:	movt	r0, #2
   11938:	movt	r1, #1
   1193c:	ldr	r5, [r0]
   11940:	mov	r0, #0
   11944:	bl	11114 <dcgettext@plt>
   11948:	mov	r2, r0
   1194c:	movw	r0, #53756	; 0xd1fc
   11950:	mov	r1, #1
   11954:	movt	r0, #2
   11958:	ldr	r3, [r0]
   1195c:	mov	r0, r5
   11960:	bl	1124c <__fprintf_chk@plt>
   11964:	mov	r0, r4
   11968:	bl	111ec <exit@plt>
   1196c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11970:	add	fp, sp, #28
   11974:	sub	sp, sp, #44	; 0x2c
   11978:	mov	sl, r0
   1197c:	ldr	r0, [r1]
   11980:	str	r1, [sp, #28]
   11984:	bl	153c8 <__assert_fail@plt+0x40a4>
   11988:	movw	r1, #46073	; 0xb3f9
   1198c:	mov	r0, #6
   11990:	movt	r1, #1
   11994:	bl	11288 <setlocale@plt>
   11998:	movw	r6, #45388	; 0xb14c
   1199c:	movw	r1, #45209	; 0xb099
   119a0:	str	r0, [sp, #24]
   119a4:	movt	r6, #1
   119a8:	movt	r1, #1
   119ac:	mov	r0, r6
   119b0:	bl	112d0 <bindtextdomain@plt>
   119b4:	mov	r0, r6
   119b8:	bl	1112c <textdomain@plt>
   119bc:	mov	r0, #65536	; 0x10000
   119c0:	bl	112ac <nl_langinfo@plt>
   119c4:	movw	r1, #53656	; 0xd198
   119c8:	cmp	r0, #0
   119cc:	movt	r1, #2
   119d0:	str	r0, [r1]
   119d4:	ldrbne	r2, [r0]
   119d8:	cmpne	r2, #0
   119dc:	bne	119ec <__assert_fail@plt+0x6c8>
   119e0:	movw	r0, #45233	; 0xb0b1
   119e4:	movt	r0, #1
   119e8:	str	r0, [r1]
   119ec:	bl	111f8 <strlen@plt>
   119f0:	movw	r1, #53660	; 0xd19c
   119f4:	movt	r1, #2
   119f8:	str	r0, [r1]
   119fc:	movw	r0, #20028	; 0x4e3c
   11a00:	movt	r0, #1
   11a04:	bl	1a004 <__assert_fail@plt+0x8ce0>
   11a08:	movw	r6, #45235	; 0xb0b3
   11a0c:	movw	r5, #47824	; 0xbad0
   11a10:	movw	r4, #53648	; 0xd190
   11a14:	mov	r7, #0
   11a18:	mov	r8, #1
   11a1c:	movt	r6, #1
   11a20:	movt	r5, #1
   11a24:	movt	r4, #2
   11a28:	b	11a44 <__assert_fail@plt+0x720>
   11a2c:	movw	r0, #53688	; 0xd1b8
   11a30:	movt	r0, #2
   11a34:	strb	r8, [r0]
   11a38:	movw	r0, #53689	; 0xd1b9
   11a3c:	movt	r0, #2
   11a40:	strb	r8, [r0]
   11a44:	ldr	r1, [sp, #28]
   11a48:	mov	r0, sl
   11a4c:	mov	r2, r6
   11a50:	mov	r3, r5
   11a54:	str	r7, [sp]
   11a58:	bl	111d4 <getopt_long@plt>
   11a5c:	cmp	r0, #99	; 0x63
   11a60:	ble	11fbc <__assert_fail@plt+0xc98>
   11a64:	sub	r1, r0, #122	; 0x7a
   11a68:	cmp	r1, #147	; 0x93
   11a6c:	bhi	11d58 <__assert_fail@plt+0xa34>
   11a70:	add	r0, pc, #0
   11a74:	ldr	pc, [r0, r1, lsl #2]
   11a78:	andeq	r1, r1, r8, asr #25
   11a7c:	andeq	r2, r1, ip, lsr #17
   11a80:	andeq	r2, r1, ip, lsr #17
   11a84:	andeq	r2, r1, ip, lsr #17
   11a88:	andeq	r2, r1, ip, lsr #17
   11a8c:	andeq	r2, r1, ip, lsr #17
   11a90:	andeq	r2, r1, ip, lsr #17
   11a94:	andeq	r2, r1, ip, lsr #17
   11a98:	andeq	r2, r1, ip, lsr #17
   11a9c:	andeq	r2, r1, ip, lsr #17
   11aa0:	andeq	r2, r1, ip, lsr #17
   11aa4:	andeq	r2, r1, ip, lsr #17
   11aa8:	andeq	r2, r1, ip, lsr #17
   11aac:	andeq	r2, r1, ip, lsr #17
   11ab0:	andeq	r2, r1, ip, lsr #17
   11ab4:	andeq	r2, r1, ip, lsr #17
   11ab8:	andeq	r2, r1, ip, lsr #17
   11abc:	andeq	r2, r1, ip, lsr #17
   11ac0:	andeq	r2, r1, ip, lsr #17
   11ac4:	andeq	r2, r1, ip, lsr #17
   11ac8:	andeq	r2, r1, ip, lsr #17
   11acc:	andeq	r2, r1, ip, lsr #17
   11ad0:	andeq	r2, r1, ip, lsr #17
   11ad4:	andeq	r2, r1, ip, lsr #17
   11ad8:	andeq	r2, r1, ip, lsr #17
   11adc:	andeq	r2, r1, ip, lsr #17
   11ae0:	andeq	r2, r1, ip, lsr #17
   11ae4:	andeq	r2, r1, ip, lsr #17
   11ae8:	andeq	r2, r1, ip, lsr #17
   11aec:	andeq	r2, r1, ip, lsr #17
   11af0:	andeq	r2, r1, ip, lsr #17
   11af4:	andeq	r2, r1, ip, lsr #17
   11af8:	andeq	r2, r1, ip, lsr #17
   11afc:	andeq	r2, r1, ip, lsr #17
   11b00:	andeq	r2, r1, ip, lsr #17
   11b04:	andeq	r2, r1, ip, lsr #17
   11b08:	andeq	r2, r1, ip, lsr #17
   11b0c:	andeq	r2, r1, ip, lsr #17
   11b10:	andeq	r2, r1, ip, lsr #17
   11b14:	andeq	r2, r1, ip, lsr #17
   11b18:	andeq	r2, r1, ip, lsr #17
   11b1c:	andeq	r2, r1, ip, lsr #17
   11b20:	andeq	r2, r1, ip, lsr #17
   11b24:	andeq	r2, r1, ip, lsr #17
   11b28:	andeq	r2, r1, ip, lsr #17
   11b2c:	andeq	r2, r1, ip, lsr #17
   11b30:	andeq	r2, r1, ip, lsr #17
   11b34:	andeq	r2, r1, ip, lsr #17
   11b38:	andeq	r2, r1, ip, lsr #17
   11b3c:	andeq	r2, r1, ip, lsr #17
   11b40:	andeq	r2, r1, ip, lsr #17
   11b44:	andeq	r2, r1, ip, lsr #17
   11b48:	andeq	r2, r1, ip, lsr #17
   11b4c:	andeq	r2, r1, ip, lsr #17
   11b50:	andeq	r2, r1, ip, lsr #17
   11b54:	andeq	r2, r1, ip, lsr #17
   11b58:	andeq	r2, r1, ip, lsr #17
   11b5c:	andeq	r2, r1, ip, lsr #17
   11b60:	andeq	r2, r1, ip, lsr #17
   11b64:	andeq	r2, r1, ip, lsr #17
   11b68:	andeq	r2, r1, ip, lsr #17
   11b6c:	andeq	r2, r1, ip, lsr #17
   11b70:	andeq	r2, r1, ip, lsr #17
   11b74:	andeq	r2, r1, ip, lsr #17
   11b78:	andeq	r2, r1, ip, lsr #17
   11b7c:	andeq	r2, r1, ip, lsr #17
   11b80:	andeq	r2, r1, ip, lsr #17
   11b84:	andeq	r2, r1, ip, lsr #17
   11b88:	andeq	r2, r1, ip, lsr #17
   11b8c:	andeq	r2, r1, ip, lsr #17
   11b90:	andeq	r2, r1, ip, lsr #17
   11b94:	andeq	r2, r1, ip, lsr #17
   11b98:	andeq	r2, r1, ip, lsr #17
   11b9c:	andeq	r2, r1, ip, lsr #17
   11ba0:	andeq	r2, r1, ip, lsr #17
   11ba4:	andeq	r2, r1, ip, lsr #17
   11ba8:	andeq	r2, r1, ip, lsr #17
   11bac:	andeq	r2, r1, ip, lsr #17
   11bb0:	andeq	r2, r1, ip, lsr #17
   11bb4:	andeq	r2, r1, ip, lsr #17
   11bb8:	andeq	r2, r1, ip, lsr #17
   11bbc:	andeq	r2, r1, ip, lsr #17
   11bc0:	andeq	r2, r1, ip, lsr #17
   11bc4:	andeq	r2, r1, ip, lsr #17
   11bc8:	andeq	r2, r1, ip, lsr #17
   11bcc:	andeq	r2, r1, ip, lsr #17
   11bd0:	andeq	r2, r1, ip, lsr #17
   11bd4:	andeq	r2, r1, ip, lsr #17
   11bd8:	andeq	r2, r1, ip, lsr #17
   11bdc:	andeq	r2, r1, ip, lsr #17
   11be0:	andeq	r2, r1, ip, lsr #17
   11be4:	andeq	r2, r1, ip, lsr #17
   11be8:	andeq	r2, r1, ip, lsr #17
   11bec:	andeq	r2, r1, ip, lsr #17
   11bf0:	andeq	r2, r1, ip, lsr #17
   11bf4:	andeq	r2, r1, ip, lsr #17
   11bf8:	andeq	r2, r1, ip, lsr #17
   11bfc:	andeq	r2, r1, ip, lsr #17
   11c00:	andeq	r2, r1, ip, lsr #17
   11c04:	andeq	r2, r1, ip, lsr #17
   11c08:	andeq	r2, r1, ip, lsr #17
   11c0c:	andeq	r2, r1, ip, lsr #17
   11c10:	andeq	r2, r1, ip, lsr #17
   11c14:	andeq	r2, r1, ip, lsr #17
   11c18:	andeq	r2, r1, ip, lsr #17
   11c1c:	andeq	r2, r1, ip, lsr #17
   11c20:	andeq	r2, r1, ip, lsr #17
   11c24:	andeq	r2, r1, ip, lsr #17
   11c28:	andeq	r2, r1, ip, lsr #17
   11c2c:	andeq	r2, r1, ip, lsr #17
   11c30:	andeq	r2, r1, ip, lsr #17
   11c34:	andeq	r2, r1, ip, lsr #17
   11c38:	andeq	r2, r1, ip, lsr #17
   11c3c:	andeq	r2, r1, ip, lsr #17
   11c40:	andeq	r2, r1, ip, lsr #17
   11c44:	andeq	r2, r1, ip, lsr #17
   11c48:	andeq	r2, r1, ip, lsr #17
   11c4c:	andeq	r2, r1, ip, lsr #17
   11c50:	andeq	r2, r1, ip, lsr #17
   11c54:	andeq	r2, r1, ip, lsr #17
   11c58:	andeq	r2, r1, ip, lsr #17
   11c5c:	andeq	r2, r1, ip, lsr #17
   11c60:	andeq	r2, r1, ip, lsr #17
   11c64:	andeq	r2, r1, ip, lsr #17
   11c68:	andeq	r2, r1, ip, lsr #17
   11c6c:	andeq	r2, r1, ip, lsr #17
   11c70:	andeq	r2, r1, ip, lsr #17
   11c74:	andeq	r2, r1, ip, lsr #17
   11c78:	andeq	r2, r1, ip, lsr #17
   11c7c:	andeq	r2, r1, ip, lsr #17
   11c80:	andeq	r2, r1, ip, lsr #17
   11c84:	andeq	r2, r1, ip, lsr #17
   11c88:	andeq	r2, r1, ip, lsr #17
   11c8c:	andeq	r2, r1, ip, lsr #17
   11c90:	andeq	r1, r1, r8, lsl #30
   11c94:	andeq	r1, r1, r0, lsl #28
   11c98:			; <UNDEFINED> instruction: 0x00011eb8
   11c9c:	andeq	r1, r1, r8, lsr #28
   11ca0:	andeq	r1, r1, r8, lsl #27
   11ca4:	andeq	r1, r1, ip, ror #27
   11ca8:	andeq	r1, r1, r8, asr #26
   11cac:	andeq	r1, r1, r0, asr #28
   11cb0:	andeq	r1, r1, r4, lsr #26
   11cb4:	andeq	r1, r1, r8, lsl lr
   11cb8:	andeq	r1, r1, ip, lsr #20
   11cbc:	ldrdeq	r1, [r1], -r8
   11cc0:	ldrdeq	r1, [r1], -r8
   11cc4:	andeq	r1, r1, r8, asr pc
   11cc8:	movw	r0, #53681	; 0xd1b1
   11ccc:	movt	r0, #2
   11cd0:	strb	r8, [r0]
   11cd4:	b	11a44 <__assert_fail@plt+0x720>
   11cd8:	ldr	r0, [r4]
   11cdc:	cmp	r0, #0
   11ce0:	beq	11fa8 <__assert_fail@plt+0xc84>
   11ce4:	movw	r1, #46073	; 0xb3f9
   11ce8:	movw	r3, #53696	; 0xd1c0
   11cec:	mov	r2, #10
   11cf0:	movt	r1, #1
   11cf4:	movt	r3, #2
   11cf8:	str	r1, [sp]
   11cfc:	mov	r1, #0
   11d00:	bl	18888 <__assert_fail@plt+0x7564>
   11d04:	cmp	r0, #0
   11d08:	bne	128c0 <__assert_fail@plt+0x159c>
   11d0c:	movw	r0, #53696	; 0xd1c0
   11d10:	movt	r0, #2
   11d14:	ldrd	r0, [r0]
   11d18:	orrs	r0, r0, r1
   11d1c:	bne	11a44 <__assert_fail@plt+0x720>
   11d20:	b	128c0 <__assert_fail@plt+0x159c>
   11d24:	movw	r0, #54068	; 0xd334
   11d28:	movt	r0, #2
   11d2c:	ldr	r0, [r0]
   11d30:	cmp	r0, #0
   11d34:	bne	128e4 <__assert_fail@plt+0x15c0>
   11d38:	ldr	r0, [r4]
   11d3c:	mov	r1, #1
   11d40:	bl	140d8 <__assert_fail@plt+0x2db4>
   11d44:	b	11a44 <__assert_fail@plt+0x720>
   11d48:	movw	r0, #53672	; 0xd1a8
   11d4c:	movt	r0, #2
   11d50:	strb	r8, [r0]
   11d54:	b	11a44 <__assert_fail@plt+0x720>
   11d58:	cmp	r0, #100	; 0x64
   11d5c:	bne	128ac <__assert_fail@plt+0x1588>
   11d60:	ldr	r1, [r4]
   11d64:	ldrb	r0, [r1]
   11d68:	cmp	r0, #0
   11d6c:	ldrbne	r1, [r1, #1]
   11d70:	cmpne	r1, #0
   11d74:	bne	128f0 <__assert_fail@plt+0x15cc>
   11d78:	movw	r1, #53532	; 0xd11c
   11d7c:	movt	r1, #2
   11d80:	str	r0, [r1]
   11d84:	b	11a44 <__assert_fail@plt+0x720>
   11d88:	movw	r0, #53544	; 0xd128
   11d8c:	ldr	r1, [r4]
   11d90:	movw	r9, #48208	; 0xbc50
   11d94:	mov	r2, #4
   11d98:	movt	r0, #2
   11d9c:	str	r2, [sp]
   11da0:	movw	r2, #48228	; 0xbc64
   11da4:	movt	r9, #1
   11da8:	ldr	r0, [r0]
   11dac:	movt	r2, #1
   11db0:	mov	r3, r9
   11db4:	stmib	sp, {r0, r8}
   11db8:	movw	r0, #45246	; 0xb0be
   11dbc:	movt	r0, #1
   11dc0:	bl	14bb0 <__assert_fail@plt+0x388c>
   11dc4:	ldr	r0, [r9, r0, lsl #2]
   11dc8:	movw	r1, #53528	; 0xd118
   11dcc:	movt	r1, #2
   11dd0:	str	r0, [r1]
   11dd4:	b	11a44 <__assert_fail@plt+0x720>
   11dd8:	ldr	r0, [r4]
   11ddc:	movw	r1, #53704	; 0xd1c8
   11de0:	movt	r1, #2
   11de4:	str	r0, [r1]
   11de8:	b	11a44 <__assert_fail@plt+0x720>
   11dec:	ldr	r0, [r4]
   11df0:	movw	r1, #53684	; 0xd1b4
   11df4:	movt	r1, #2
   11df8:	str	r0, [r1]
   11dfc:	b	11a44 <__assert_fail@plt+0x720>
   11e00:	ldr	r0, [r4]
   11e04:	bl	12964 <__assert_fail@plt+0x1640>
   11e08:	movw	r2, #53512	; 0xd108
   11e0c:	movt	r2, #2
   11e10:	strd	r0, [r2]
   11e14:	b	11a44 <__assert_fail@plt+0x720>
   11e18:	movw	r0, #53688	; 0xd1b8
   11e1c:	movt	r0, #2
   11e20:	strb	r8, [r0]
   11e24:	b	11a44 <__assert_fail@plt+0x720>
   11e28:	ldr	r0, [r4]
   11e2c:	bl	12964 <__assert_fail@plt+0x1640>
   11e30:	movw	r2, #53520	; 0xd110
   11e34:	movt	r2, #2
   11e38:	strd	r0, [r2]
   11e3c:	b	11a44 <__assert_fail@plt+0x720>
   11e40:	ldr	r0, [r4]
   11e44:	movw	r1, #46073	; 0xb3f9
   11e48:	mov	r8, r4
   11e4c:	movw	r4, #53676	; 0xd1ac
   11e50:	mov	r2, #10
   11e54:	movt	r1, #1
   11e58:	movt	r4, #2
   11e5c:	str	r1, [sp]
   11e60:	mov	r1, #0
   11e64:	mov	r3, r4
   11e68:	bl	17d90 <__assert_fail@plt+0x6a6c>
   11e6c:	cmp	r0, #0
   11e70:	bne	128fc <__assert_fail@plt+0x15d8>
   11e74:	ldr	r0, [r4]
   11e78:	orr	r1, r0, #-2147483648	; 0x80000000
   11e7c:	cmp	r1, #-2147483648	; 0x80000000
   11e80:	beq	128fc <__assert_fail@plt+0x15d8>
   11e84:	mov	r4, r8
   11e88:	cmn	r0, #1
   11e8c:	mov	r7, #0
   11e90:	mov	r8, #1
   11e94:	bgt	11a44 <__assert_fail@plt+0x720>
   11e98:	movw	r1, #53680	; 0xd1b0
   11e9c:	rsb	r0, r0, #0
   11ea0:	movt	r1, #2
   11ea4:	strb	r8, [r1]
   11ea8:	movw	r1, #53676	; 0xd1ac
   11eac:	movt	r1, #2
   11eb0:	str	r0, [r1]
   11eb4:	b	11a44 <__assert_fail@plt+0x720>
   11eb8:	movw	r0, #53544	; 0xd128
   11ebc:	ldr	r1, [r4]
   11ec0:	movw	r9, #48172	; 0xbc2c
   11ec4:	mov	r2, #4
   11ec8:	movt	r0, #2
   11ecc:	str	r2, [sp]
   11ed0:	movw	r2, #48188	; 0xbc3c
   11ed4:	movt	r9, #1
   11ed8:	ldr	r0, [r0]
   11edc:	movt	r2, #1
   11ee0:	mov	r3, r9
   11ee4:	stmib	sp, {r0, r8}
   11ee8:	movw	r0, #45540	; 0xb1e4
   11eec:	movt	r0, #1
   11ef0:	bl	14bb0 <__assert_fail@plt+0x388c>
   11ef4:	ldr	r0, [r9, r0, lsl #2]
   11ef8:	movw	r1, #53668	; 0xd1a4
   11efc:	movt	r1, #2
   11f00:	str	r0, [r1]
   11f04:	b	11a44 <__assert_fail@plt+0x720>
   11f08:	movw	r0, #53544	; 0xd128
   11f0c:	ldr	r1, [r4]
   11f10:	movw	r9, #48128	; 0xbc00
   11f14:	mov	r2, #4
   11f18:	movt	r0, #2
   11f1c:	str	r2, [sp]
   11f20:	movw	r2, #48148	; 0xbc14
   11f24:	movt	r9, #1
   11f28:	ldr	r0, [r0]
   11f2c:	movt	r2, #1
   11f30:	mov	r3, r9
   11f34:	stmib	sp, {r0, r8}
   11f38:	movw	r0, #45239	; 0xb0b7
   11f3c:	movt	r0, #1
   11f40:	bl	14bb0 <__assert_fail@plt+0x388c>
   11f44:	ldr	r0, [r9, r0, lsl #2]
   11f48:	movw	r1, #53664	; 0xd1a0
   11f4c:	movt	r1, #2
   11f50:	str	r0, [r1]
   11f54:	b	11a44 <__assert_fail@plt+0x720>
   11f58:	movw	r0, #53544	; 0xd128
   11f5c:	ldr	r1, [r4]
   11f60:	movw	r9, #48252	; 0xbc7c
   11f64:	mov	r2, #4
   11f68:	movt	r0, #2
   11f6c:	str	r2, [sp]
   11f70:	movw	r2, #48268	; 0xbc8c
   11f74:	movt	r9, #1
   11f78:	ldr	r0, [r0]
   11f7c:	movt	r2, #1
   11f80:	mov	r3, r9
   11f84:	stmib	sp, {r0, r8}
   11f88:	movw	r0, #45374	; 0xb13e
   11f8c:	movt	r0, #1
   11f90:	bl	14bb0 <__assert_fail@plt+0x388c>
   11f94:	ldr	r0, [r9, r0, lsl #2]
   11f98:	movw	r1, #53708	; 0xd1cc
   11f9c:	movt	r1, #2
   11fa0:	str	r0, [r1]
   11fa4:	b	11a44 <__assert_fail@plt+0x720>
   11fa8:	movw	r0, #53696	; 0xd1c0
   11fac:	movt	r0, #2
   11fb0:	str	r8, [r0]
   11fb4:	str	r7, [r0, #4]
   11fb8:	b	11a44 <__assert_fail@plt+0x720>
   11fbc:	movw	r4, #53668	; 0xd1a4
   11fc0:	movw	r8, #53708	; 0xd1cc
   11fc4:	cmn	r0, #1
   11fc8:	movt	r4, #2
   11fcc:	movt	r8, #2
   11fd0:	bne	1284c <__assert_fail@plt+0x1528>
   11fd4:	movw	r5, #53704	; 0xd1c8
   11fd8:	movw	r9, #53672	; 0xd1a8
   11fdc:	movw	r6, #53676	; 0xd1ac
   11fe0:	movt	r5, #2
   11fe4:	movt	r9, #2
   11fe8:	movt	r6, #2
   11fec:	ldr	r7, [r5]
   11ff0:	ldrb	r0, [r9]
   11ff4:	cmp	r7, #0
   11ff8:	cmpne	r0, #0
   11ffc:	bne	1291c <__assert_fail@plt+0x15f8>
   12000:	movw	r1, #53688	; 0xd1b8
   12004:	ldr	r2, [sp, #24]
   12008:	movt	r1, #2
   1200c:	ldrb	r1, [r1]
   12010:	cmp	r2, #0
   12014:	bne	12058 <__assert_fail@plt+0xd34>
   12018:	cmp	r1, #0
   1201c:	beq	12058 <__assert_fail@plt+0xd34>
   12020:	movw	r1, #45455	; 0xb18f
   12024:	mov	r0, #0
   12028:	mov	r2, #5
   1202c:	movt	r1, #1
   12030:	bl	11114 <dcgettext@plt>
   12034:	mov	r2, r0
   12038:	mov	r0, #0
   1203c:	mov	r1, #0
   12040:	bl	11198 <error@plt>
   12044:	movw	r1, #53688	; 0xd1b8
   12048:	ldr	r7, [r5]
   1204c:	ldrb	r0, [r9]
   12050:	movt	r1, #2
   12054:	ldrb	r1, [r1]
   12058:	cmp	r7, #0
   1205c:	ldreq	r2, [r6]
   12060:	cmpeq	r2, #0
   12064:	bne	120b4 <__assert_fail@plt+0xd90>
   12068:	cmp	r1, #0
   1206c:	beq	120b4 <__assert_fail@plt+0xd90>
   12070:	movw	r1, #53664	; 0xd1a0
   12074:	ldr	r2, [r4]
   12078:	movt	r1, #2
   1207c:	ldr	r1, [r1]
   12080:	orrs	r1, r2, r1
   12084:	cmpeq	r0, #0
   12088:	bne	120b4 <__assert_fail@plt+0xd90>
   1208c:	movw	r1, #45476	; 0xb1a4
   12090:	mov	r0, #0
   12094:	mov	r2, #5
   12098:	movt	r1, #1
   1209c:	bl	11114 <dcgettext@plt>
   120a0:	mov	r2, r0
   120a4:	mov	r0, #0
   120a8:	mov	r1, #0
   120ac:	bl	11198 <error@plt>
   120b0:	ldr	r7, [r5]
   120b4:	cmp	r7, #0
   120b8:	mov	r5, r8
   120bc:	beq	12430 <__assert_fail@plt+0x110c>
   120c0:	mov	r6, #0
   120c4:	mov	r0, #0
   120c8:	str	r6, [fp, #-32]	; 0xffffffe0
   120cc:	b	120e4 <__assert_fail@plt+0xdc0>
   120d0:	cmp	r1, #37	; 0x25
   120d4:	mov	r1, #1
   120d8:	add	r6, r6, #1
   120dc:	movweq	r1, #2
   120e0:	add	r0, r1, r0
   120e4:	ldrb	r1, [r7, r0]
   120e8:	cmp	r1, #37	; 0x25
   120ec:	bne	12104 <__assert_fail@plt+0xde0>
   120f0:	add	r5, r0, #1
   120f4:	ldrb	r2, [r7, r5]
   120f8:	cmp	r2, #37	; 0x25
   120fc:	beq	120d0 <__assert_fail@plt+0xdac>
   12100:	b	12118 <__assert_fail@plt+0xdf4>
   12104:	cmp	r1, #0
   12108:	bne	120d0 <__assert_fail@plt+0xdac>
   1210c:	movw	r1, #46293	; 0xb4d5
   12110:	movt	r1, #1
   12114:	b	122b0 <__assert_fail@plt+0xf8c>
   12118:	movw	r4, #46323	; 0xb4f3
   1211c:	mov	r0, #0
   12120:	str	sl, [sp, #20]
   12124:	mov	r8, #1
   12128:	str	r0, [sp, #24]
   1212c:	movt	r4, #1
   12130:	b	1213c <__assert_fail@plt+0xe18>
   12134:	add	r5, r5, #1
   12138:	strb	r8, [r9]
   1213c:	add	r0, r7, r5
   12140:	mov	r1, r4
   12144:	bl	1130c <strspn@plt>
   12148:	add	r5, r0, r5
   1214c:	ldrb	r1, [r7, r5]
   12150:	cmp	r1, #39	; 0x27
   12154:	beq	12134 <__assert_fail@plt+0xe10>
   12158:	cmp	r1, #48	; 0x30
   1215c:	beq	1216c <__assert_fail@plt+0xe48>
   12160:	cmp	r0, #0
   12164:	bne	1213c <__assert_fail@plt+0xe18>
   12168:	b	1217c <__assert_fail@plt+0xe58>
   1216c:	mov	r0, #1
   12170:	add	r5, r5, #1
   12174:	str	r0, [sp, #24]
   12178:	b	1213c <__assert_fail@plt+0xe18>
   1217c:	bl	11210 <__errno_location@plt>
   12180:	mov	r4, r0
   12184:	mov	r0, #0
   12188:	add	r8, r7, r5
   1218c:	sub	r1, fp, #32
   12190:	mov	r2, #10
   12194:	str	r0, [r4]
   12198:	mov	r0, r8
   1219c:	bl	1109c <strtol@plt>
   121a0:	cmp	r0, #-2147483648	; 0x80000000
   121a4:	movne	sl, r0
   121a8:	ldrne	r0, [r4]
   121ac:	cmpne	r0, #34	; 0x22
   121b0:	beq	12928 <__assert_fail@plt+0x1604>
   121b4:	ldr	r9, [fp, #-32]	; 0xffffffe0
   121b8:	cmp	sl, #0
   121bc:	cmpne	r9, r8
   121c0:	bne	127a0 <__assert_fail@plt+0x147c>
   121c4:	ldrb	r0, [r9], -r7
   121c8:	cmp	r0, #46	; 0x2e
   121cc:	beq	121e8 <__assert_fail@plt+0xec4>
   121d0:	ldr	sl, [sp, #20]
   121d4:	cmp	r0, #0
   121d8:	bne	1225c <__assert_fail@plt+0xf38>
   121dc:	movw	r1, #46398	; 0xb53e
   121e0:	movt	r1, #1
   121e4:	b	122b0 <__assert_fail@plt+0xf8c>
   121e8:	mov	r0, #0
   121ec:	mov	r5, r4
   121f0:	sub	r1, fp, #32
   121f4:	mov	r2, #10
   121f8:	str	r0, [r4]
   121fc:	add	r0, r7, r9
   12200:	add	r4, r0, #1
   12204:	mov	r0, r4
   12208:	bl	1109c <strtol@plt>
   1220c:	ldr	sl, [sp, #20]
   12210:	movw	r1, #53536	; 0xd120
   12214:	cmp	r0, #0
   12218:	movt	r1, #2
   1221c:	str	r0, [r1]
   12220:	blt	128b4 <__assert_fail@plt+0x1590>
   12224:	ldr	r0, [r5]
   12228:	cmp	r0, #34	; 0x22
   1222c:	beq	128b4 <__assert_fail@plt+0x1590>
   12230:	bl	111e0 <__ctype_b_loc@plt>
   12234:	ldrb	r1, [r4]
   12238:	cmp	r1, #43	; 0x2b
   1223c:	beq	128b4 <__assert_fail@plt+0x1590>
   12240:	ldr	r0, [r0]
   12244:	add	r0, r0, r1, lsl #1
   12248:	ldrh	r0, [r0]
   1224c:	ands	r0, r0, #1
   12250:	bne	128b4 <__assert_fail@plt+0x1590>
   12254:	ldr	r9, [fp, #-32]	; 0xffffffe0
   12258:	ldrb	r0, [r9], -r7
   1225c:	cmp	r0, #102	; 0x66
   12260:	bne	12934 <__assert_fail@plt+0x1610>
   12264:	add	r4, r9, #1
   12268:	mov	r0, r4
   1226c:	b	12280 <__assert_fail@plt+0xf5c>
   12270:	cmp	r1, #37	; 0x25
   12274:	mov	r1, #1
   12278:	movweq	r1, #2
   1227c:	add	r0, r1, r0
   12280:	ldrb	r1, [r7, r0]
   12284:	cmp	r1, #37	; 0x25
   12288:	beq	12298 <__assert_fail@plt+0xf74>
   1228c:	cmp	r1, #0
   12290:	bne	12270 <__assert_fail@plt+0xf4c>
   12294:	b	122dc <__assert_fail@plt+0xfb8>
   12298:	add	r2, r7, r0
   1229c:	ldrb	r2, [r2, #1]
   122a0:	cmp	r2, #37	; 0x25
   122a4:	beq	12270 <__assert_fail@plt+0xf4c>
   122a8:	movw	r1, #46509	; 0xb5ad
   122ac:	movt	r1, #1
   122b0:	mov	r0, #0
   122b4:	mov	r2, #5
   122b8:	bl	11114 <dcgettext@plt>
   122bc:	mov	r4, r0
   122c0:	mov	r0, r7
   122c4:	bl	16ffc <__assert_fail@plt+0x5cd8>
   122c8:	mov	r3, r0
   122cc:	mov	r0, #1
   122d0:	mov	r1, #0
   122d4:	mov	r2, r4
   122d8:	bl	11198 <error@plt>
   122dc:	cmp	r6, #0
   122e0:	beq	122fc <__assert_fail@plt+0xfd8>
   122e4:	mov	r0, r7
   122e8:	mov	r1, r6
   122ec:	bl	17cc4 <__assert_fail@plt+0x69a0>
   122f0:	movw	r1, #53724	; 0xd1dc
   122f4:	movt	r1, #2
   122f8:	str	r0, [r1]
   122fc:	mov	r0, r7
   12300:	ldrb	r1, [r0, r4]!
   12304:	cmp	r1, #0
   12308:	beq	1231c <__assert_fail@plt+0xff8>
   1230c:	bl	17d0c <__assert_fail@plt+0x69e8>
   12310:	movw	r1, #53728	; 0xd1e0
   12314:	movt	r1, #2
   12318:	str	r0, [r1]
   1231c:	movw	r0, #53689	; 0xd1b9
   12320:	movt	r0, #2
   12324:	ldrb	r0, [r0]
   12328:	cmp	r0, #1
   1232c:	bne	12410 <__assert_fail@plt+0x10ec>
   12330:	movw	r0, #53632	; 0xd180
   12334:	mov	r1, r7
   12338:	movt	r0, #2
   1233c:	ldr	r0, [r0]
   12340:	str	r0, [sp, #24]
   12344:	mov	r0, #0
   12348:	bl	16fec <__assert_fail@plt+0x5cc8>
   1234c:	mov	r9, r0
   12350:	movw	r0, #53724	; 0xd1dc
   12354:	movw	r8, #46073	; 0xb3f9
   12358:	movt	r0, #2
   1235c:	movt	r8, #1
   12360:	ldr	r1, [r0]
   12364:	movw	r0, #53672	; 0xd1a8
   12368:	movt	r0, #2
   1236c:	ldrb	r4, [r0]
   12370:	movw	r0, #53676	; 0xd1ac
   12374:	movt	r0, #2
   12378:	ldr	r5, [r0]
   1237c:	movw	r0, #53680	; 0xd1b0
   12380:	cmp	r1, #0
   12384:	movt	r0, #2
   12388:	moveq	r1, r8
   1238c:	ldrb	r6, [r0]
   12390:	mov	r0, #1
   12394:	bl	16fec <__assert_fail@plt+0x5cc8>
   12398:	mov	r7, r0
   1239c:	movw	r0, #53728	; 0xd1e0
   123a0:	movt	r0, #2
   123a4:	ldr	r1, [r0]
   123a8:	mov	r0, #2
   123ac:	cmp	r1, #0
   123b0:	moveq	r1, r8
   123b4:	bl	16fec <__assert_fail@plt+0x5cc8>
   123b8:	movw	r1, #46659	; 0xb643
   123bc:	movw	r2, #46664	; 0xb648
   123c0:	cmp	r6, #0
   123c4:	movw	r3, #46656	; 0xb640
   123c8:	movt	r1, #1
   123cc:	movt	r2, #1
   123d0:	movt	r3, #1
   123d4:	movne	r2, r1
   123d8:	movw	r1, #46652	; 0xb63c
   123dc:	cmp	r4, #0
   123e0:	movt	r1, #1
   123e4:	movne	r3, r1
   123e8:	mov	r1, #1
   123ec:	stm	sp, {r3, r5}
   123f0:	str	r0, [sp, #16]
   123f4:	str	r2, [sp, #8]
   123f8:	movw	r2, #46546	; 0xb5d2
   123fc:	mov	r3, r9
   12400:	str	r7, [sp, #12]
   12404:	ldr	r0, [sp, #24]
   12408:	movt	r2, #1
   1240c:	bl	1124c <__fprintf_chk@plt>
   12410:	movw	r5, #53708	; 0xd1cc
   12414:	movw	r6, #53676	; 0xd1ac
   12418:	movw	r4, #53668	; 0xd1a4
   1241c:	movw	r9, #53672	; 0xd1a8
   12420:	movt	r5, #2
   12424:	movt	r6, #2
   12428:	movt	r4, #2
   1242c:	movt	r9, #2
   12430:	ldrb	r0, [r9]
   12434:	ldr	r7, [sp, #28]
   12438:	cmp	r0, #1
   1243c:	bne	1249c <__assert_fail@plt+0x1178>
   12440:	ldr	r0, [r4]
   12444:	cmp	r0, #0
   12448:	bne	12940 <__assert_fail@plt+0x161c>
   1244c:	movw	r0, #53688	; 0xd1b8
   12450:	movt	r0, #2
   12454:	ldrb	r0, [r0]
   12458:	cmp	r0, #1
   1245c:	bne	1249c <__assert_fail@plt+0x1178>
   12460:	movw	r0, #1
   12464:	movt	r0, #1
   12468:	bl	112ac <nl_langinfo@plt>
   1246c:	ldrb	r0, [r0]
   12470:	cmp	r0, #0
   12474:	bne	1249c <__assert_fail@plt+0x1178>
   12478:	movw	r1, #45545	; 0xb1e9
   1247c:	mov	r0, #0
   12480:	mov	r2, #5
   12484:	movt	r1, #1
   12488:	bl	11114 <dcgettext@plt>
   1248c:	mov	r2, r0
   12490:	mov	r0, #0
   12494:	mov	r1, #0
   12498:	bl	11198 <error@plt>
   1249c:	movw	r2, #53732	; 0xd1e4
   124a0:	ldr	r0, [r6]
   124a4:	movt	r2, #2
   124a8:	ldr	r1, [r2]
   124ac:	cmp	r1, r0
   124b0:	bhi	124d4 <__assert_fail@plt+0x11b0>
   124b4:	movw	r4, #53736	; 0xd1e8
   124b8:	add	r1, r0, #1
   124bc:	movt	r4, #2
   124c0:	str	r1, [r2]
   124c4:	ldr	r0, [r4]
   124c8:	bl	17834 <__assert_fail@plt+0x6510>
   124cc:	str	r0, [r4]
   124d0:	ldr	r0, [r6]
   124d4:	movw	r1, #53532	; 0xd11c
   124d8:	movw	r4, #53624	; 0xd178
   124dc:	movt	r1, #2
   124e0:	movt	r4, #2
   124e4:	ldr	r1, [r1]
   124e8:	eor	r1, r1, #256	; 0x100
   124ec:	orr	r0, r0, r1
   124f0:	movw	r1, #53712	; 0xd1d0
   124f4:	clz	r0, r0
   124f8:	movt	r1, #2
   124fc:	lsr	r0, r0, #5
   12500:	str	r0, [r1]
   12504:	ldr	r0, [r5]
   12508:	cmp	r0, #0
   1250c:	movwne	r0, #53716	; 0xd1d4
   12510:	movne	r1, #1
   12514:	movtne	r0, #2
   12518:	strbne	r1, [r0]
   1251c:	ldr	r1, [r4]
   12520:	cmp	r1, sl
   12524:	bge	125b8 <__assert_fail@plt+0x1294>
   12528:	movw	r0, #53688	; 0xd1b8
   1252c:	movt	r0, #2
   12530:	ldrb	r0, [r0]
   12534:	cmp	r0, #1
   12538:	bne	12578 <__assert_fail@plt+0x1254>
   1253c:	movw	r0, #53696	; 0xd1c0
   12540:	movt	r0, #2
   12544:	ldm	r0, {r0, r3}
   12548:	orrs	r0, r0, r3
   1254c:	beq	12578 <__assert_fail@plt+0x1254>
   12550:	movw	r1, #45583	; 0xb20f
   12554:	mov	r0, #0
   12558:	mov	r2, #5
   1255c:	movt	r1, #1
   12560:	bl	11114 <dcgettext@plt>
   12564:	mov	r2, r0
   12568:	mov	r0, #0
   1256c:	mov	r1, #0
   12570:	bl	11198 <error@plt>
   12574:	ldr	r1, [r4]
   12578:	mov	r6, #1
   1257c:	cmp	r1, sl
   12580:	bge	1277c <__assert_fail@plt+0x1458>
   12584:	mov	r6, #1
   12588:	ldr	r0, [r7, r1, lsl #2]
   1258c:	mov	r1, #1
   12590:	bl	12ab4 <__assert_fail@plt+0x1790>
   12594:	ldr	r1, [r4]
   12598:	and	r6, r0, r6
   1259c:	add	r1, r1, #1
   125a0:	cmp	r1, sl
   125a4:	str	r1, [r4]
   125a8:	blt	12588 <__assert_fail@plt+0x1264>
   125ac:	cmp	r6, #0
   125b0:	beq	12740 <__assert_fail@plt+0x141c>
   125b4:	b	1277c <__assert_fail@plt+0x1458>
   125b8:	movw	r6, #53696	; 0xd1c0
   125bc:	mov	r0, #0
   125c0:	movw	r7, #53681	; 0xd1b1
   125c4:	mov	r9, r5
   125c8:	movt	r6, #2
   125cc:	str	r0, [sp, #36]	; 0x24
   125d0:	str	r0, [sp, #32]
   125d4:	movt	r7, #2
   125d8:	ldrd	r2, [r6]
   125dc:	subs	r4, r2, #1
   125e0:	sbc	r5, r3, #0
   125e4:	orrs	r0, r2, r3
   125e8:	strd	r4, [r6]
   125ec:	beq	12654 <__assert_fail@plt+0x1330>
   125f0:	movw	r8, #53640	; 0xd188
   125f4:	movw	sl, #53644	; 0xd18c
   125f8:	add	r4, sp, #36	; 0x24
   125fc:	add	r5, sp, #32
   12600:	movt	r8, #2
   12604:	movt	sl, #2
   12608:	ldrb	r0, [r7]
   1260c:	ldr	r3, [r8]
   12610:	mov	r2, #10
   12614:	mov	r1, r5
   12618:	cmp	r0, #0
   1261c:	mov	r0, r4
   12620:	movwne	r2, #0
   12624:	bl	112dc <getdelim@plt>
   12628:	cmp	r0, #1
   1262c:	blt	12654 <__assert_fail@plt+0x1330>
   12630:	ldr	r1, [sl]
   12634:	ldr	r0, [sp, #36]	; 0x24
   12638:	bl	1106c <fputs_unlocked@plt>
   1263c:	ldrd	r0, [r6]
   12640:	subs	r2, r0, #1
   12644:	sbc	r3, r1, #0
   12648:	orrs	r0, r0, r1
   1264c:	strd	r2, [r6]
   12650:	bne	12608 <__assert_fail@plt+0x12e4>
   12654:	movw	sl, #53640	; 0xd188
   12658:	ldrb	r0, [r7]
   1265c:	mov	r2, #10
   12660:	add	r1, sp, #32
   12664:	movt	sl, #2
   12668:	ldr	r3, [sl]
   1266c:	cmp	r0, #0
   12670:	add	r0, sp, #36	; 0x24
   12674:	movwne	r2, #0
   12678:	bl	112dc <getdelim@plt>
   1267c:	mov	r6, #1
   12680:	cmp	r0, #1
   12684:	blt	126f8 <__assert_fail@plt+0x13d4>
   12688:	mov	r8, #0
   1268c:	add	r4, sp, #36	; 0x24
   12690:	add	r5, sp, #32
   12694:	sub	r3, r0, #1
   12698:	ldr	r0, [sp, #36]	; 0x24
   1269c:	ldrb	r2, [r7]
   126a0:	ldrb	r1, [r0, r3]
   126a4:	cmp	r2, #0
   126a8:	mov	r2, #10
   126ac:	movwne	r2, #0
   126b0:	cmp	r2, r1
   126b4:	sub	r1, r2, r1
   126b8:	strbeq	r8, [r0, r3]
   126bc:	clz	r1, r1
   126c0:	ldreq	r0, [sp, #36]	; 0x24
   126c4:	lsr	r1, r1, #5
   126c8:	bl	12ab4 <__assert_fail@plt+0x1790>
   126cc:	and	r6, r0, r6
   126d0:	ldrb	r0, [r7]
   126d4:	ldr	r3, [sl]
   126d8:	mov	r2, #10
   126dc:	mov	r1, r5
   126e0:	cmp	r0, #0
   126e4:	mov	r0, r4
   126e8:	movwne	r2, #0
   126ec:	bl	112dc <getdelim@plt>
   126f0:	cmp	r0, #0
   126f4:	bgt	12694 <__assert_fail@plt+0x1370>
   126f8:	ldr	r0, [sl]
   126fc:	ldrb	r0, [r0]
   12700:	tst	r0, #32
   12704:	beq	12734 <__assert_fail@plt+0x1410>
   12708:	bl	11210 <__errno_location@plt>
   1270c:	ldr	r4, [r0]
   12710:	movw	r1, #45624	; 0xb238
   12714:	mov	r0, #0
   12718:	mov	r2, #5
   1271c:	movt	r1, #1
   12720:	bl	11114 <dcgettext@plt>
   12724:	mov	r2, r0
   12728:	mov	r0, #0
   1272c:	mov	r1, r4
   12730:	bl	11198 <error@plt>
   12734:	mov	r5, r9
   12738:	cmp	r6, #0
   1273c:	bne	1277c <__assert_fail@plt+0x1458>
   12740:	movw	r0, #53688	; 0xd1b8
   12744:	movt	r0, #2
   12748:	ldrb	r0, [r0]
   1274c:	cmp	r0, #0
   12750:	beq	1277c <__assert_fail@plt+0x1458>
   12754:	movw	r1, #45644	; 0xb24c
   12758:	mov	r0, #0
   1275c:	mov	r2, #5
   12760:	mov	r6, #0
   12764:	movt	r1, #1
   12768:	bl	11114 <dcgettext@plt>
   1276c:	mov	r2, r0
   12770:	mov	r0, #0
   12774:	mov	r1, #0
   12778:	bl	11198 <error@plt>
   1277c:	ldr	r0, [r5]
   12780:	orr	r0, r0, #1
   12784:	subs	r1, r0, #3
   12788:	mov	r0, #0
   1278c:	movwne	r1, #1
   12790:	cmp	r6, #0
   12794:	lsleq	r0, r1, #1
   12798:	sub	sp, fp, #28
   1279c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127a0:	ldr	r8, [sp, #24]
   127a4:	mov	r0, #0
   127a8:	cmp	sl, #0
   127ac:	movw	r5, #53676	; 0xd1ac
   127b0:	movwgt	r0, #1
   127b4:	movt	r5, #2
   127b8:	tst	r8, r0
   127bc:	bne	127dc <__assert_fail@plt+0x14b8>
   127c0:	movw	r0, #53688	; 0xd1b8
   127c4:	movt	r0, #2
   127c8:	ldrb	r0, [r0]
   127cc:	cmp	r0, #0
   127d0:	ldrne	r0, [r5]
   127d4:	cmpne	r0, #0
   127d8:	bne	12804 <__assert_fail@plt+0x14e0>
   127dc:	cmn	sl, #1
   127e0:	ble	12830 <__assert_fail@plt+0x150c>
   127e4:	tst	r8, #1
   127e8:	beq	127fc <__assert_fail@plt+0x14d8>
   127ec:	movw	r0, #53720	; 0xd1d8
   127f0:	movt	r0, #2
   127f4:	str	sl, [r0]
   127f8:	b	121c4 <__assert_fail@plt+0xea0>
   127fc:	str	sl, [r5]
   12800:	b	121c4 <__assert_fail@plt+0xea0>
   12804:	movw	r1, #46360	; 0xb518
   12808:	mov	r0, #0
   1280c:	mov	r2, #5
   12810:	movt	r1, #1
   12814:	bl	11114 <dcgettext@plt>
   12818:	mov	r2, r0
   1281c:	mov	r0, #0
   12820:	mov	r1, #0
   12824:	bl	11198 <error@plt>
   12828:	cmn	sl, #1
   1282c:	bgt	127e4 <__assert_fail@plt+0x14c0>
   12830:	movw	r1, #53680	; 0xd1b0
   12834:	mov	r0, #1
   12838:	movt	r1, #2
   1283c:	strb	r0, [r1]
   12840:	rsb	r0, sl, #0
   12844:	str	r0, [r5]
   12848:	b	121c4 <__assert_fail@plt+0xea0>
   1284c:	cmn	r0, #3
   12850:	bne	1289c <__assert_fail@plt+0x1578>
   12854:	movw	r0, #53540	; 0xd124
   12858:	movw	r2, #45398	; 0xb156
   1285c:	mov	r1, #0
   12860:	movt	r0, #2
   12864:	movt	r2, #1
   12868:	str	r1, [sp, #4]
   1286c:	movw	r1, #45202	; 0xb092
   12870:	ldr	r3, [r0]
   12874:	movw	r0, #53644	; 0xd18c
   12878:	str	r2, [sp]
   1287c:	movw	r2, #45384	; 0xb148
   12880:	movt	r1, #1
   12884:	movt	r0, #2
   12888:	movt	r2, #1
   1288c:	ldr	r0, [r0]
   12890:	bl	175b8 <__assert_fail@plt+0x6294>
   12894:	mov	r0, #0
   12898:	bl	111ec <exit@plt>
   1289c:	cmn	r0, #2
   128a0:	bne	128ac <__assert_fail@plt+0x1588>
   128a4:	mov	r0, #0
   128a8:	bl	11420 <__assert_fail@plt+0xfc>
   128ac:	mov	r0, #1
   128b0:	bl	11420 <__assert_fail@plt+0xfc>
   128b4:	movw	r1, #46419	; 0xb553
   128b8:	movt	r1, #1
   128bc:	b	122b0 <__assert_fail@plt+0xf8c>
   128c0:	movw	r1, #45350	; 0xb126
   128c4:	mov	r0, #0
   128c8:	mov	r2, #5
   128cc:	movt	r1, #1
   128d0:	bl	11114 <dcgettext@plt>
   128d4:	mov	r1, r4
   128d8:	mov	r4, r0
   128dc:	ldr	r0, [r1]
   128e0:	b	122c4 <__assert_fail@plt+0xfa0>
   128e4:	movw	r1, #45279	; 0xb0df
   128e8:	movt	r1, #1
   128ec:	b	12948 <__assert_fail@plt+0x1624>
   128f0:	movw	r1, #45309	; 0xb0fd
   128f4:	movt	r1, #1
   128f8:	b	12948 <__assert_fail@plt+0x1624>
   128fc:	movw	r1, #45254	; 0xb0c6
   12900:	mov	r0, #0
   12904:	mov	r2, #5
   12908:	movt	r1, #1
   1290c:	bl	11114 <dcgettext@plt>
   12910:	mov	r4, r0
   12914:	ldr	r0, [r8]
   12918:	b	122c4 <__assert_fail@plt+0xfa0>
   1291c:	movw	r1, #45411	; 0xb163
   12920:	movt	r1, #1
   12924:	b	12948 <__assert_fail@plt+0x1624>
   12928:	movw	r1, #46325	; 0xb4f5
   1292c:	movt	r1, #1
   12930:	b	122b0 <__assert_fail@plt+0xf8c>
   12934:	movw	r1, #46450	; 0xb572
   12938:	movt	r1, #1
   1293c:	b	122b0 <__assert_fail@plt+0xf8c>
   12940:	movw	r1, #45507	; 0xb1c3
   12944:	movt	r1, #1
   12948:	mov	r0, #0
   1294c:	mov	r2, #5
   12950:	bl	11114 <dcgettext@plt>
   12954:	mov	r2, r0
   12958:	mov	r0, #1
   1295c:	mov	r1, #0
   12960:	bl	11198 <error@plt>
   12964:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12968:	add	fp, sp, #24
   1296c:	sub	sp, sp, #24
   12970:	mov	r4, r0
   12974:	bl	111f8 <strlen@plt>
   12978:	movw	r8, #46190	; 0xb46e
   1297c:	mov	r5, #0
   12980:	cmp	r0, #0
   12984:	movt	r8, #1
   12988:	str	r5, [sp, #20]
   1298c:	beq	129a8 <__assert_fail@plt+0x1684>
   12990:	mov	r6, r0
   12994:	add	r0, r4, r0
   12998:	ldrb	r0, [r0, #-1]
   1299c:	sub	r0, r0, #48	; 0x30
   129a0:	cmp	r0, #10
   129a4:	bcs	129b0 <__assert_fail@plt+0x168c>
   129a8:	mov	r0, r4
   129ac:	b	12a28 <__assert_fail@plt+0x1704>
   129b0:	add	r0, r6, #2
   129b4:	bl	177ec <__assert_fail@plt+0x64c8>
   129b8:	add	r9, r0, r6
   129bc:	mov	r1, r4
   129c0:	mov	r2, r6
   129c4:	mov	r5, r0
   129c8:	sub	r7, r9, #1
   129cc:	str	r7, [sp, #20]
   129d0:	bl	110e4 <memcpy@plt>
   129d4:	cmp	r6, #2
   129d8:	bcc	129f8 <__assert_fail@plt+0x16d4>
   129dc:	ldrb	r0, [r9, #-1]
   129e0:	cmp	r0, #105	; 0x69
   129e4:	bne	129f8 <__assert_fail@plt+0x16d4>
   129e8:	ldrb	r0, [r7, #-1]
   129ec:	sub	r0, r0, #48	; 0x30
   129f0:	cmp	r0, #10
   129f4:	bcs	12a1c <__assert_fail@plt+0x16f8>
   129f8:	mov	r0, #66	; 0x42
   129fc:	movw	r8, #46199	; 0xb477
   12a00:	strb	r0, [r7, #1]
   12a04:	add	r0, r7, #2
   12a08:	movt	r8, #1
   12a0c:	str	r0, [sp, #20]
   12a10:	mov	r0, #0
   12a14:	strb	r0, [r7, #2]
   12a18:	b	12a24 <__assert_fail@plt+0x1700>
   12a1c:	mov	r0, #0
   12a20:	strb	r0, [r7]
   12a24:	mov	r0, r5
   12a28:	add	r1, sp, #20
   12a2c:	add	r3, sp, #8
   12a30:	mov	r2, #10
   12a34:	str	r8, [sp]
   12a38:	bl	18888 <__assert_fail@plt+0x7564>
   12a3c:	cmp	r0, #0
   12a40:	ldreq	r0, [sp, #20]
   12a44:	ldrbeq	r0, [r0]
   12a48:	cmpeq	r0, #0
   12a4c:	beq	12a8c <__assert_fail@plt+0x1768>
   12a50:	mov	r0, r5
   12a54:	bl	14f24 <__assert_fail@plt+0x3c00>
   12a58:	movw	r1, #46209	; 0xb481
   12a5c:	mov	r0, #0
   12a60:	mov	r2, #5
   12a64:	movt	r1, #1
   12a68:	bl	11114 <dcgettext@plt>
   12a6c:	mov	r5, r0
   12a70:	mov	r0, r4
   12a74:	bl	16ffc <__assert_fail@plt+0x5cd8>
   12a78:	mov	r3, r0
   12a7c:	mov	r0, #1
   12a80:	mov	r1, #0
   12a84:	mov	r2, r5
   12a88:	bl	11198 <error@plt>
   12a8c:	ldr	r0, [sp, #8]
   12a90:	ldr	r1, [sp, #12]
   12a94:	orrs	r0, r0, r1
   12a98:	beq	12a50 <__assert_fail@plt+0x172c>
   12a9c:	mov	r0, r5
   12aa0:	bl	14f24 <__assert_fail@plt+0x3c00>
   12aa4:	ldr	r0, [sp, #8]
   12aa8:	ldr	r1, [sp, #12]
   12aac:	sub	sp, fp, #24
   12ab0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12ab4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ab8:	add	fp, sp, #28
   12abc:	push	{r1}		; (str r1, [sp, #-4]!)
   12ac0:	movw	sl, #53532	; 0xd11c
   12ac4:	mov	r8, r0
   12ac8:	mov	r4, #1
   12acc:	mov	r5, #0
   12ad0:	mov	r6, #0
   12ad4:	movt	sl, #2
   12ad8:	b	12aec <__assert_fail@plt+0x17c8>
   12adc:	add	r3, r2, #1
   12ae0:	add	r8, r7, #1
   12ae4:	str	r3, [r0, #20]
   12ae8:	strb	r1, [r2]
   12aec:	ldr	r0, [sl]
   12af0:	ldrb	r9, [r8]
   12af4:	adds	r5, r5, #1
   12af8:	adc	r6, r6, #0
   12afc:	cmp	r0, #256	; 0x100
   12b00:	bne	12b44 <__assert_fail@plt+0x1820>
   12b04:	cmp	r9, #0
   12b08:	beq	12c10 <__assert_fail@plt+0x18ec>
   12b0c:	bl	111e0 <__ctype_b_loc@plt>
   12b10:	ldr	r0, [r0]
   12b14:	mov	r7, r8
   12b18:	uxtb	r1, r9
   12b1c:	cmp	r1, #10
   12b20:	beq	12b34 <__assert_fail@plt+0x1810>
   12b24:	add	r2, r0, r1, lsl #1
   12b28:	ldrh	r2, [r2]
   12b2c:	ands	r2, r2, #1
   12b30:	beq	12b78 <__assert_fail@plt+0x1854>
   12b34:	ldrb	r9, [r7, #1]!
   12b38:	cmp	r9, #0
   12b3c:	bne	12b18 <__assert_fail@plt+0x17f4>
   12b40:	b	12c10 <__assert_fail@plt+0x18ec>
   12b44:	cmp	r9, #0
   12b48:	beq	12bb0 <__assert_fail@plt+0x188c>
   12b4c:	cmp	r0, r9
   12b50:	mov	r7, r8
   12b54:	beq	12b6c <__assert_fail@plt+0x1848>
   12b58:	mov	r7, r8
   12b5c:	ldrb	r9, [r7, #1]!
   12b60:	cmp	r9, #0
   12b64:	cmpne	r0, r9
   12b68:	bne	12b5c <__assert_fail@plt+0x1838>
   12b6c:	cmp	r9, #0
   12b70:	bne	12bbc <__assert_fail@plt+0x1898>
   12b74:	b	12c10 <__assert_fail@plt+0x18ec>
   12b78:	cmp	r1, #10
   12b7c:	beq	12bbc <__assert_fail@plt+0x1898>
   12b80:	cmp	r2, #0
   12b84:	bne	12bbc <__assert_fail@plt+0x1898>
   12b88:	ldrb	r1, [r7, #1]!
   12b8c:	cmp	r1, #0
   12b90:	beq	12c10 <__assert_fail@plt+0x18ec>
   12b94:	cmp	r1, #10
   12b98:	beq	12bbc <__assert_fail@plt+0x1898>
   12b9c:	add	r1, r0, r1, lsl #1
   12ba0:	ldrh	r1, [r1]
   12ba4:	ands	r1, r1, #1
   12ba8:	beq	12b88 <__assert_fail@plt+0x1864>
   12bac:	b	12bbc <__assert_fail@plt+0x1898>
   12bb0:	mov	r7, r8
   12bb4:	cmp	r9, #0
   12bb8:	beq	12c10 <__assert_fail@plt+0x18ec>
   12bbc:	mov	r0, #0
   12bc0:	mov	r2, r5
   12bc4:	mov	r3, r6
   12bc8:	strb	r0, [r7]
   12bcc:	mov	r0, r8
   12bd0:	bl	12c88 <__assert_fail@plt+0x1964>
   12bd4:	and	r4, r4, r0
   12bd8:	movw	r0, #53644	; 0xd18c
   12bdc:	ldr	r1, [sl]
   12be0:	movt	r0, #2
   12be4:	ldr	r0, [r0]
   12be8:	cmp	r1, #256	; 0x100
   12bec:	movweq	r1, #32
   12bf0:	ldr	r2, [r0, #20]
   12bf4:	ldr	r3, [r0, #24]
   12bf8:	cmp	r2, r3
   12bfc:	bcc	12adc <__assert_fail@plt+0x17b8>
   12c00:	uxtb	r1, r1
   12c04:	bl	1127c <__overflow@plt>
   12c08:	add	r8, r7, #1
   12c0c:	b	12aec <__assert_fail@plt+0x17c8>
   12c10:	mov	r0, r8
   12c14:	mov	r2, r5
   12c18:	mov	r3, r6
   12c1c:	bl	12c88 <__assert_fail@plt+0x1964>
   12c20:	and	r5, r4, r0
   12c24:	ldr	r0, [sp]
   12c28:	cmp	r0, #0
   12c2c:	beq	12c70 <__assert_fail@plt+0x194c>
   12c30:	movw	r0, #53681	; 0xd1b1
   12c34:	mov	r1, #10
   12c38:	movt	r0, #2
   12c3c:	ldrb	r0, [r0]
   12c40:	cmp	r0, #0
   12c44:	movw	r0, #53644	; 0xd18c
   12c48:	movt	r0, #2
   12c4c:	movwne	r1, #0
   12c50:	ldr	r0, [r0]
   12c54:	ldr	r2, [r0, #20]
   12c58:	ldr	r3, [r0, #24]
   12c5c:	cmp	r2, r3
   12c60:	bcs	12c7c <__assert_fail@plt+0x1958>
   12c64:	add	r3, r2, #1
   12c68:	str	r3, [r0, #20]
   12c6c:	strb	r1, [r2]
   12c70:	mov	r0, r5
   12c74:	sub	sp, fp, #28
   12c78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c7c:	bl	1127c <__overflow@plt>
   12c80:	b	12c70 <__assert_fail@plt+0x194c>
   12c84:	nop	{0}
   12c88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c8c:	add	fp, sp, #28
   12c90:	sub	sp, sp, #4
   12c94:	vpush	{d8-d11}
   12c98:	sub	sp, sp, #240	; 0xf0
   12c9c:	mov	r8, r0
   12ca0:	movw	r0, #54064	; 0xd330
   12ca4:	mov	r5, r2
   12ca8:	movt	r0, #2
   12cac:	ldr	r1, [r0]
   12cb0:	cmp	r1, #0
   12cb4:	beq	12d0c <__assert_fail@plt+0x19e8>
   12cb8:	ldrd	r6, [r1]
   12cbc:	and	r0, r6, r7
   12cc0:	cmn	r0, #1
   12cc4:	beq	12d98 <__assert_fail@plt+0x1a74>
   12cc8:	mvn	r0, #0
   12ccc:	add	r1, r1, #16
   12cd0:	subs	r2, r5, r6
   12cd4:	sbcs	r2, r3, r7
   12cd8:	bcc	12cf0 <__assert_fail@plt+0x19cc>
   12cdc:	ldr	r2, [r1, #-8]
   12ce0:	ldr	r7, [r1, #-4]
   12ce4:	subs	r2, r2, r5
   12ce8:	sbcs	r2, r7, r3
   12cec:	bcs	12d18 <__assert_fail@plt+0x19f4>
   12cf0:	ldrd	r6, [r1]
   12cf4:	add	r1, r1, #16
   12cf8:	eor	r2, r7, r0
   12cfc:	eor	r4, r6, r0
   12d00:	orrs	r2, r4, r2
   12d04:	bne	12cd0 <__assert_fail@plt+0x19ac>
   12d08:	b	12d98 <__assert_fail@plt+0x1a74>
   12d0c:	eor	r0, r5, #1
   12d10:	orrs	r0, r0, r3
   12d14:	bne	12d98 <__assert_fail@plt+0x1a74>
   12d18:	movw	r0, #53684	; 0xd1b4
   12d1c:	movt	r0, #2
   12d20:	ldr	r4, [r0]
   12d24:	cmp	r4, #0
   12d28:	beq	12dfc <__assert_fail@plt+0x1ad8>
   12d2c:	mov	r0, r8
   12d30:	bl	111f8 <strlen@plt>
   12d34:	mov	r6, r0
   12d38:	mov	r0, r4
   12d3c:	bl	111f8 <strlen@plt>
   12d40:	cmp	r6, r0
   12d44:	bls	12dfc <__assert_fail@plt+0x1ad8>
   12d48:	add	r1, r8, r6
   12d4c:	sub	r6, r1, r0
   12d50:	mov	r0, r4
   12d54:	mov	r1, r6
   12d58:	bl	11090 <strcmp@plt>
   12d5c:	cmp	r0, #0
   12d60:	beq	12db4 <__assert_fail@plt+0x1a90>
   12d64:	movw	r0, #53689	; 0xd1b9
   12d68:	movt	r0, #2
   12d6c:	ldrb	r0, [r0]
   12d70:	cmp	r0, #1
   12d74:	bne	12dfc <__assert_fail@plt+0x1ad8>
   12d78:	movw	r0, #53632	; 0xd180
   12d7c:	movw	r2, #46690	; 0xb662
   12d80:	mov	r1, #1
   12d84:	movt	r0, #2
   12d88:	movt	r2, #1
   12d8c:	ldr	r0, [r0]
   12d90:	bl	1124c <__fprintf_chk@plt>
   12d94:	b	12dfc <__assert_fail@plt+0x1ad8>
   12d98:	movw	r0, #53644	; 0xd18c
   12d9c:	movt	r0, #2
   12da0:	ldr	r1, [r0]
   12da4:	mov	r0, r8
   12da8:	bl	1106c <fputs_unlocked@plt>
   12dac:	mov	r4, #1
   12db0:	b	139c8 <__assert_fail@plt+0x26a4>
   12db4:	mov	r0, #0
   12db8:	strb	r0, [r6]
   12dbc:	movw	r0, #53689	; 0xd1b9
   12dc0:	movt	r0, #2
   12dc4:	ldrb	r0, [r0]
   12dc8:	cmp	r0, #1
   12dcc:	bne	12dfc <__assert_fail@plt+0x1ad8>
   12dd0:	movw	r0, #53632	; 0xd180
   12dd4:	movt	r0, #2
   12dd8:	ldr	r6, [r0]
   12ddc:	mov	r0, r4
   12de0:	bl	16ffc <__assert_fail@plt+0x5cd8>
   12de4:	movw	r2, #46670	; 0xb64e
   12de8:	mov	r3, r0
   12dec:	mov	r0, r6
   12df0:	mov	r1, #1
   12df4:	movt	r2, #1
   12df8:	bl	1124c <__fprintf_chk@plt>
   12dfc:	ldrb	r6, [r8]
   12e00:	mov	r4, r8
   12e04:	cmp	r6, #0
   12e08:	beq	12e30 <__assert_fail@plt+0x1b0c>
   12e0c:	bl	111e0 <__ctype_b_loc@plt>
   12e10:	ldr	r0, [r0]
   12e14:	mov	r4, r8
   12e18:	uxtb	r1, r6
   12e1c:	ldrb	r1, [r0, r1, lsl #1]
   12e20:	tst	r1, #1
   12e24:	ldrbne	r6, [r4, #1]!
   12e28:	cmpne	r6, #0
   12e2c:	bne	12e18 <__assert_fail@plt+0x1af4>
   12e30:	movw	r0, #53712	; 0xd1d0
   12e34:	movt	r0, #2
   12e38:	ldr	r0, [r0]
   12e3c:	cmp	r0, #0
   12e40:	beq	12ee8 <__assert_fail@plt+0x1bc4>
   12e44:	cmp	r5, #1
   12e48:	bgt	12e68 <__assert_fail@plt+0x1b44>
   12e4c:	cmp	r4, r8
   12e50:	bne	12e68 <__assert_fail@plt+0x1b44>
   12e54:	movw	r0, #53676	; 0xd1ac
   12e58:	mov	r1, #0
   12e5c:	movt	r0, #2
   12e60:	str	r1, [r0]
   12e64:	b	12eac <__assert_fail@plt+0x1b88>
   12e68:	mov	r0, r8
   12e6c:	bl	111f8 <strlen@plt>
   12e70:	movw	r1, #53676	; 0xd1ac
   12e74:	movw	r2, #53732	; 0xd1e4
   12e78:	movt	r1, #2
   12e7c:	movt	r2, #2
   12e80:	str	r0, [r1]
   12e84:	ldr	r1, [r2]
   12e88:	cmp	r1, r0
   12e8c:	bhi	12eac <__assert_fail@plt+0x1b88>
   12e90:	movw	r5, #53736	; 0xd1e8
   12e94:	add	r1, r0, #1
   12e98:	movt	r5, #2
   12e9c:	str	r1, [r2]
   12ea0:	ldr	r0, [r5]
   12ea4:	bl	17834 <__assert_fail@plt+0x6510>
   12ea8:	str	r0, [r5]
   12eac:	movw	r0, #53689	; 0xd1b9
   12eb0:	movt	r0, #2
   12eb4:	ldrb	r0, [r0]
   12eb8:	cmp	r0, #0
   12ebc:	beq	12f6c <__assert_fail@plt+0x1c48>
   12ec0:	movw	r0, #53676	; 0xd1ac
   12ec4:	movw	r2, #46713	; 0xb679
   12ec8:	mov	r1, #1
   12ecc:	movt	r0, #2
   12ed0:	movt	r2, #1
   12ed4:	ldr	r3, [r0]
   12ed8:	movw	r0, #53632	; 0xd180
   12edc:	movt	r0, #2
   12ee0:	ldr	r0, [r0]
   12ee4:	bl	1124c <__fprintf_chk@plt>
   12ee8:	movw	r0, #53664	; 0xd1a0
   12eec:	mov	r9, #1000	; 0x3e8
   12ef0:	movt	r0, #2
   12ef4:	ldr	sl, [r0]
   12ef8:	sub	r0, sl, #3
   12efc:	cmp	r0, #2
   12f00:	movw	r0, #53689	; 0xd1b9
   12f04:	movt	r0, #2
   12f08:	movwcc	r9, #1024	; 0x400
   12f0c:	ldrb	r0, [r0]
   12f10:	cmp	r0, #1
   12f14:	bne	12f88 <__assert_fail@plt+0x1c64>
   12f18:	movw	r0, #53632	; 0xd180
   12f1c:	mov	r1, r4
   12f20:	movt	r0, #2
   12f24:	ldr	r7, [r0]
   12f28:	mov	r0, #0
   12f2c:	bl	16fec <__assert_fail@plt+0x5cc8>
   12f30:	mov	r6, r0
   12f34:	movw	r0, #53656	; 0xd198
   12f38:	movt	r0, #2
   12f3c:	ldr	r1, [r0]
   12f40:	mov	r0, #1
   12f44:	bl	16fec <__assert_fail@plt+0x5cc8>
   12f48:	movw	r2, #46830	; 0xb6ee
   12f4c:	mov	r1, #15
   12f50:	mov	r3, r6
   12f54:	stm	sp, {r0, r1}
   12f58:	movt	r2, #1
   12f5c:	mov	r0, r7
   12f60:	mov	r1, #1
   12f64:	bl	1124c <__fprintf_chk@plt>
   12f68:	b	12f88 <__assert_fail@plt+0x1c64>
   12f6c:	movw	r0, #53664	; 0xd1a0
   12f70:	mov	r9, #1000	; 0x3e8
   12f74:	movt	r0, #2
   12f78:	ldr	sl, [r0]
   12f7c:	sub	r0, sl, #3
   12f80:	cmp	r0, #2
   12f84:	movwcc	r9, #1024	; 0x400
   12f88:	mov	r6, r4
   12f8c:	ldrb	r5, [r6], #1
   12f90:	cmp	r5, #45	; 0x2d
   12f94:	movne	r6, r4
   12f98:	ldrb	r7, [r6]
   12f9c:	sub	r0, r7, #48	; 0x30
   12fa0:	cmp	r0, #9
   12fa4:	bhi	1305c <__assert_fail@plt+0x1d38>
   12fa8:	mov	r1, #0
   12fac:	mov	ip, sl
   12fb0:	vmov.i32	d9, #0	; 0x00000000
   12fb4:	vmov.f64	d16, #36	; 0x41200000  10.0
   12fb8:	vmov.i32	d17, #0	; 0x00000000
   12fbc:	mov	sl, #0
   12fc0:	str	r1, [sp, #40]	; 0x28
   12fc4:	mov	r1, #0
   12fc8:	vcmp.f64	d17, #0.0
   12fcc:	mov	r2, #0
   12fd0:	mov	r3, r0
   12fd4:	vmrs	APSR_nzcv, fpscr
   12fd8:	movwne	r2, #1
   12fdc:	cmp	r0, #0
   12fe0:	movwne	r3, #1
   12fe4:	orr	r2, r3, r2
   12fe8:	add	r1, r1, r2
   12fec:	cmp	r1, #27
   12ff0:	bhi	13548 <__assert_fail@plt+0x2224>
   12ff4:	ldrb	r7, [r6, #1]!
   12ff8:	vmov	s0, r0
   12ffc:	cmp	r1, #15
   13000:	vcvt.f64.s32	d18, s0
   13004:	movwhi	sl, #1
   13008:	vmla.f64	d18, d17, d16
   1300c:	sub	r0, r7, #48	; 0x30
   13010:	cmp	r0, #10
   13014:	vmov.f64	d17, d18
   13018:	bcc	12fc8 <__assert_fail@plt+0x1ca4>
   1301c:	vneg.f64	d16, d18
   13020:	cmp	r5, #45	; 0x2d
   13024:	mov	r0, #0
   13028:	vseleq.f64	d9, d16, d18
   1302c:	cmp	sl, #1
   13030:	str	r0, [sp, #40]	; 0x28
   13034:	bhi	1351c <__assert_fail@plt+0x21f8>
   13038:	movw	r0, #53660	; 0xd19c
   1303c:	str	r8, [sp, #36]	; 0x24
   13040:	str	r5, [sp, #32]
   13044:	movt	r0, #2
   13048:	ldr	r8, [r0]
   1304c:	movw	r0, #53656	; 0xd198
   13050:	movt	r0, #2
   13054:	ldr	r5, [r0]
   13058:	b	130d0 <__assert_fail@plt+0x1dac>
   1305c:	movw	r0, #53660	; 0xd19c
   13060:	str	r8, [sp, #36]	; 0x24
   13064:	str	r5, [sp, #32]
   13068:	movt	r0, #2
   1306c:	ldr	r8, [r0]
   13070:	movw	r0, #53656	; 0xd198
   13074:	movt	r0, #2
   13078:	ldr	r5, [r0]
   1307c:	mov	r0, r6
   13080:	mov	r2, r8
   13084:	mov	r1, r5
   13088:	bl	112e8 <strncmp@plt>
   1308c:	cmp	r0, #0
   13090:	beq	130b4 <__assert_fail@plt+0x1d90>
   13094:	vmov.i32	d9, #0	; 0x00000000
   13098:	mov	r0, #0
   1309c:	str	r0, [sp, #40]	; 0x28
   130a0:	ldr	r8, [sp, #36]	; 0x24
   130a4:	movw	r1, #47119	; 0xb80f
   130a8:	mov	sl, #3
   130ac:	movt	r1, #1
   130b0:	b	13584 <__assert_fail@plt+0x2260>
   130b4:	add	r0, pc, #964	; 0x3c4
   130b8:	ldr	r1, [sp, #32]
   130bc:	mov	ip, sl
   130c0:	mov	sl, #0
   130c4:	cmp	r1, #45	; 0x2d
   130c8:	addeq	r0, r0, #8
   130cc:	vldr	d9, [r0]
   130d0:	mov	r0, r6
   130d4:	mov	r1, r5
   130d8:	mov	r2, r8
   130dc:	str	ip, [sp, #28]
   130e0:	str	r9, [sp, #24]
   130e4:	bl	112e8 <strncmp@plt>
   130e8:	mov	r1, #0
   130ec:	cmp	r0, #0
   130f0:	str	r1, [sp, #40]	; 0x28
   130f4:	beq	13204 <__assert_fail@plt+0x1ee0>
   130f8:	ldr	r8, [sp, #36]	; 0x24
   130fc:	mov	r9, r6
   13100:	movw	r5, #53689	; 0xd1b9
   13104:	movt	r5, #2
   13108:	ldrb	r0, [r5]
   1310c:	cmp	r0, #1
   13110:	bne	13140 <__assert_fail@plt+0x1e1c>
   13114:	movw	r0, #53632	; 0xd180
   13118:	ldr	r1, [sp, #40]	; 0x28
   1311c:	movw	r2, #46924	; 0xb74c
   13120:	vstr	d9, [sp]
   13124:	movt	r0, #2
   13128:	movt	r2, #1
   1312c:	ldr	r0, [r0]
   13130:	str	r1, [sp, #8]
   13134:	mov	r1, #1
   13138:	bl	1124c <__fprintf_chk@plt>
   1313c:	ldrb	r7, [r9]
   13140:	cmp	r7, #0
   13144:	beq	132c8 <__assert_fail@plt+0x1fa4>
   13148:	bl	111e0 <__ctype_b_loc@plt>
   1314c:	ldr	r0, [r0]
   13150:	b	13158 <__assert_fail@plt+0x1e34>
   13154:	ldrb	r7, [r9, #1]!
   13158:	ldrb	r1, [r0, r7, lsl #1]
   1315c:	tst	r1, #1
   13160:	bne	13154 <__assert_fail@plt+0x1e30>
   13164:	movw	r0, #46190	; 0xb46e
   13168:	mov	r1, r7
   1316c:	mov	r2, #9
   13170:	movt	r0, #1
   13174:	bl	11258 <memchr@plt>
   13178:	cmp	r0, #0
   1317c:	beq	13558 <__assert_fail@plt+0x2234>
   13180:	ldr	r0, [sp, #28]
   13184:	cmp	r0, #0
   13188:	beq	13568 <__assert_fail@plt+0x2244>
   1318c:	sub	r0, r7, #69	; 0x45
   13190:	cmp	r0, #21
   13194:	bhi	13370 <__assert_fail@plt+0x204c>
   13198:	add	r1, pc, #4
   1319c:	mov	r7, #1
   131a0:	ldr	pc, [r1, r0, lsl #2]
   131a4:	strdeq	r3, [r1], -ip
   131a8:	andeq	r3, r1, r0, ror r3
   131ac:	andeq	r3, r1, r0, lsl #7
   131b0:	andeq	r3, r1, r0, ror r3
   131b4:	andeq	r3, r1, r0, ror r3
   131b8:	andeq	r3, r1, r0, ror r3
   131bc:	andeq	r3, r1, r4, lsr #7
   131c0:	andeq	r3, r1, r0, ror r3
   131c4:	muleq	r1, r8, r3
   131c8:	andeq	r3, r1, r0, ror r3
   131cc:	andeq	r3, r1, r0, ror r3
   131d0:	andeq	r3, r1, r0, lsr #7
   131d4:	andeq	r3, r1, r0, ror r3
   131d8:	andeq	r3, r1, r0, ror r3
   131dc:	andeq	r3, r1, r0, ror r3
   131e0:	andeq	r3, r1, r8, ror r3
   131e4:	andeq	r3, r1, r0, ror r3
   131e8:	andeq	r3, r1, r0, ror r3
   131ec:	andeq	r3, r1, r0, ror r3
   131f0:	andeq	r3, r1, r0, ror r3
   131f4:	andeq	r3, r1, r8, lsl #7
   131f8:	muleq	r1, r0, r3
   131fc:	mov	r7, #6
   13200:	b	133a4 <__assert_fail@plt+0x2080>
   13204:	ldrb	r0, [r6, r8]!
   13208:	mov	r1, r5
   1320c:	add	lr, r6, #1
   13210:	cmp	r0, #45	; 0x2d
   13214:	mov	r9, r6
   13218:	str	r0, [sp, #20]
   1321c:	moveq	r9, lr
   13220:	ldrb	r7, [r9]
   13224:	sub	r5, r7, #48	; 0x30
   13228:	cmp	r5, #9
   1322c:	bhi	132d0 <__assert_fail@plt+0x1fac>
   13230:	ldr	r8, [sp, #36]	; 0x24
   13234:	ldr	ip, [sp, #32]
   13238:	mov	r0, #0
   1323c:	vmov.i32	d17, #0	; 0x00000000
   13240:	vmov.f64	d16, #36	; 0x41200000  10.0
   13244:	mov	r2, #0
   13248:	str	r0, [sp, #40]	; 0x28
   1324c:	mov	r0, #0
   13250:	vcmp.f64	d17, #0.0
   13254:	mov	r3, #0
   13258:	mov	r1, r5
   1325c:	vmrs	APSR_nzcv, fpscr
   13260:	movwne	r3, #1
   13264:	cmp	r5, #0
   13268:	movwne	r1, #1
   1326c:	orr	r1, r1, r3
   13270:	add	r2, r2, r1
   13274:	cmp	r2, #27
   13278:	bhi	13548 <__assert_fail@plt+0x2224>
   1327c:	ldrb	r7, [r9, #1]!
   13280:	vmov	s0, r5
   13284:	cmp	r2, #15
   13288:	vcvt.f64.s32	d18, s0
   1328c:	movwhi	r0, #1
   13290:	vmla.f64	d18, d17, d16
   13294:	sub	r5, r7, #48	; 0x30
   13298:	cmp	r5, #10
   1329c:	vmov.f64	d17, d18
   132a0:	bcc	13250 <__assert_fail@plt+0x1f2c>
   132a4:	mov	r1, #0
   132a8:	cmp	r0, #1
   132ac:	str	r1, [sp, #40]	; 0x28
   132b0:	bls	13314 <__assert_fail@plt+0x1ff0>
   132b4:	mov	sl, r0
   132b8:	cmp	sl, #6
   132bc:	bls	13524 <__assert_fail@plt+0x2200>
   132c0:	mov	r1, #0
   132c4:	b	13584 <__assert_fail@plt+0x2260>
   132c8:	mov	r7, #0
   132cc:	b	13408 <__assert_fail@plt+0x20e4>
   132d0:	mov	r0, r9
   132d4:	mov	r2, r8
   132d8:	mov	r5, lr
   132dc:	bl	112e8 <strncmp@plt>
   132e0:	mov	r1, #0
   132e4:	cmp	r0, #0
   132e8:	str	r1, [sp, #40]	; 0x28
   132ec:	bne	130a0 <__assert_fail@plt+0x1d7c>
   132f0:	add	r0, pc, #392	; 0x188
   132f4:	ldr	r1, [sp, #20]
   132f8:	ldr	r8, [sp, #36]	; 0x24
   132fc:	ldr	ip, [sp, #32]
   13300:	mov	lr, r5
   13304:	cmp	r1, #45	; 0x2d
   13308:	addeq	r0, r0, #8
   1330c:	vldr	d16, [r0]
   13310:	b	13328 <__assert_fail@plt+0x2004>
   13314:	ldr	r1, [sp, #20]
   13318:	moveq	sl, r0
   1331c:	vneg.f64	d16, d18
   13320:	cmp	r1, #45	; 0x2d
   13324:	vseleq.f64	d16, d16, d18
   13328:	mov	r0, #0
   1332c:	cmp	r1, #45	; 0x2d
   13330:	str	r0, [sp, #40]	; 0x28
   13334:	beq	130a4 <__assert_fail@plt+0x1d80>
   13338:	subs	r0, r9, r6
   1333c:	str	r0, [sp, #40]	; 0x28
   13340:	beq	13368 <__assert_fail@plt+0x2044>
   13344:	cmp	r0, #1
   13348:	beq	13f4c <__assert_fail@plt+0x2c28>
   1334c:	vmov.f64	d18, #36	; 0x41200000  10.0
   13350:	sub	r0, lr, r9
   13354:	vmov.f64	d17, d18
   13358:	adds	r0, r0, #1
   1335c:	vmul.f64	d17, d17, d18
   13360:	bne	13358 <__assert_fail@plt+0x2034>
   13364:	b	13f50 <__assert_fail@plt+0x2c2c>
   13368:	vmov.f64	d17, #112	; 0x3f800000  1.0
   1336c:	b	13f50 <__assert_fail@plt+0x2c2c>
   13370:	mov	r7, #0
   13374:	b	133a4 <__assert_fail@plt+0x2080>
   13378:	mov	r7, #4
   1337c:	b	133a4 <__assert_fail@plt+0x2080>
   13380:	mov	r7, #3
   13384:	b	133a4 <__assert_fail@plt+0x2080>
   13388:	mov	r7, #8
   1338c:	b	133a4 <__assert_fail@plt+0x2080>
   13390:	mov	r7, #7
   13394:	b	133a4 <__assert_fail@plt+0x2080>
   13398:	mov	r7, #2
   1339c:	b	133a4 <__assert_fail@plt+0x2080>
   133a0:	mov	r7, #5
   133a4:	mov	r0, #0
   133a8:	add	r6, r9, #1
   133ac:	str	r0, [sp, #40]	; 0x28
   133b0:	ldr	r0, [sp, #28]
   133b4:	cmp	r0, #1
   133b8:	bne	13404 <__assert_fail@plt+0x20e0>
   133bc:	ldrb	r0, [r6]
   133c0:	cmp	r0, #105	; 0x69
   133c4:	bne	13438 <__assert_fail@plt+0x2114>
   133c8:	ldrb	r0, [r5]
   133cc:	add	r6, r9, #2
   133d0:	cmp	r0, #1
   133d4:	bne	13430 <__assert_fail@plt+0x210c>
   133d8:	movw	r0, #53632	; 0xd180
   133dc:	movw	r2, #46976	; 0xb780
   133e0:	mov	r1, #1024	; 0x400
   133e4:	mov	r3, #1024	; 0x400
   133e8:	movt	r0, #2
   133ec:	str	r1, [sp, #24]
   133f0:	movt	r2, #1
   133f4:	mov	r1, #1
   133f8:	ldr	r0, [r0]
   133fc:	bl	1124c <__fprintf_chk@plt>
   13400:	b	13438 <__assert_fail@plt+0x2114>
   13404:	mov	r9, r6
   13408:	ldr	r0, [sp, #28]
   1340c:	cmp	r0, #4
   13410:	bne	13428 <__assert_fail@plt+0x2104>
   13414:	ldrb	r0, [r9]
   13418:	cmp	r0, #105	; 0x69
   1341c:	bne	13578 <__assert_fail@plt+0x2254>
   13420:	add	r6, r9, #1
   13424:	b	13440 <__assert_fail@plt+0x211c>
   13428:	mov	r6, r9
   1342c:	b	13440 <__assert_fail@plt+0x211c>
   13430:	mov	r0, #1024	; 0x400
   13434:	str	r0, [sp, #24]
   13438:	mov	r0, #0
   1343c:	str	r0, [sp, #40]	; 0x28
   13440:	ldr	r3, [sp, #24]
   13444:	cmp	r7, #0
   13448:	vmov	s0, r3
   1344c:	vcvt.f64.s32	d16, s0
   13450:	beq	13474 <__assert_fail@plt+0x2150>
   13454:	cmp	r7, #1
   13458:	beq	134a0 <__assert_fail@plt+0x217c>
   1345c:	rsb	r0, r7, #1
   13460:	vmov.f64	d8, d16
   13464:	adds	r0, r0, #1
   13468:	vmul.f64	d8, d8, d16
   1346c:	bne	13464 <__assert_fail@plt+0x2140>
   13470:	b	134a4 <__assert_fail@plt+0x2180>
   13474:	vmov.f64	d8, #112	; 0x3f800000  1.0
   13478:	b	134a4 <__assert_fail@plt+0x2180>
   1347c:	nop	{0}
	...
   1348c:	andhi	r0, r0, r0
   13490:			; <UNDEFINED> instruction: 0xffffffff
   13494:	svcvc	0x00efffff
   13498:			; <UNDEFINED> instruction: 0xffffffff
   1349c:			; <UNDEFINED> instruction: 0xffefffff
   134a0:	vmov.f64	d8, d16
   134a4:	ldrb	r0, [r5]
   134a8:	cmp	r0, #0
   134ac:	beq	13510 <__assert_fail@plt+0x21ec>
   134b0:	mov	r9, r5
   134b4:	movw	r5, #53632	; 0xd180
   134b8:	movw	r2, #47025	; 0xb7b1
   134bc:	mov	r1, #1
   134c0:	vstr	d8, [sp, #8]
   134c4:	str	r7, [sp]
   134c8:	movt	r5, #2
   134cc:	movt	r2, #1
   134d0:	ldr	r0, [r5]
   134d4:	bl	1124c <__fprintf_chk@plt>
   134d8:	ldrb	r0, [r9]
   134dc:	vmul.f64	d9, d9, d8
   134e0:	cmp	r0, #1
   134e4:	bne	13514 <__assert_fail@plt+0x21f0>
   134e8:	ldr	r0, [r5]
   134ec:	movw	r2, #47053	; 0xb7cd
   134f0:	mov	r1, #1
   134f4:	vstr	d9, [sp]
   134f8:	vstr	d9, [sp, #8]
   134fc:	movt	r2, #1
   13500:	bl	1124c <__fprintf_chk@plt>
   13504:	cmp	sl, #2
   13508:	bcs	1351c <__assert_fail@plt+0x21f8>
   1350c:	b	138e0 <__assert_fail@plt+0x25bc>
   13510:	vmul.f64	d9, d9, d8
   13514:	cmp	sl, #2
   13518:	bcc	138e0 <__assert_fail@plt+0x25bc>
   1351c:	cmp	sl, #6
   13520:	bhi	132c0 <__assert_fail@plt+0x1f9c>
   13524:	add	r0, pc, #0
   13528:	ldr	pc, [r0, sl, lsl #2]
   1352c:	andeq	r3, r1, r0, ror pc
   13530:	andeq	r3, r1, r0, ror pc
   13534:	andeq	r3, r1, r8, asr #10
   13538:	andeq	r3, r1, r4, lsr #1
   1353c:	andeq	r3, r1, r8, ror #10
   13540:	andeq	r3, r1, r8, asr r5
   13544:	andeq	r3, r1, r8, ror r5
   13548:	movw	r1, #47083	; 0xb7eb
   1354c:	mov	sl, #2
   13550:	movt	r1, #1
   13554:	b	13584 <__assert_fail@plt+0x2260>
   13558:	movw	r1, #47192	; 0xb858
   1355c:	mov	sl, #5
   13560:	movt	r1, #1
   13564:	b	13584 <__assert_fail@plt+0x2260>
   13568:	movw	r1, #47138	; 0xb822
   1356c:	mov	sl, #4
   13570:	movt	r1, #1
   13574:	b	13584 <__assert_fail@plt+0x2260>
   13578:	movw	r1, #47220	; 0xb874
   1357c:	mov	sl, #6
   13580:	movt	r1, #1
   13584:	movw	r0, #53708	; 0xd1cc
   13588:	movt	r0, #2
   1358c:	ldr	r0, [r0]
   13590:	cmp	r0, #3
   13594:	beq	135dc <__assert_fail@plt+0x22b8>
   13598:	movw	r0, #53716	; 0xd1d4
   1359c:	mov	r2, #5
   135a0:	movt	r0, #2
   135a4:	ldrb	r7, [r0]
   135a8:	mov	r0, #0
   135ac:	bl	11114 <dcgettext@plt>
   135b0:	mov	r5, r0
   135b4:	mov	r0, r4
   135b8:	mov	r6, #2
   135bc:	cmp	r7, #0
   135c0:	movwne	r6, #0
   135c4:	bl	16ffc <__assert_fail@plt+0x5cd8>
   135c8:	mov	r3, r0
   135cc:	mov	r0, r6
   135d0:	mov	r1, #0
   135d4:	mov	r2, r5
   135d8:	bl	11198 <error@plt>
   135dc:	movw	r0, #53512	; 0xd108
   135e0:	movt	r0, #2
   135e4:	ldrd	r0, [r0]
   135e8:	eor	r2, r0, #1
   135ec:	orrs	r2, r2, r1
   135f0:	movw	r2, #53520	; 0xd110
   135f4:	movt	r2, #2
   135f8:	ldrd	r4, [r2]
   135fc:	eoreq	r2, r4, #1
   13600:	orrseq	r2, r2, r5
   13604:	beq	13628 <__assert_fail@plt+0x2304>
   13608:	bl	19d48 <__assert_fail@plt+0x8a24>
   1360c:	vmov	d8, r0, r1
   13610:	mov	r0, r4
   13614:	mov	r1, r5
   13618:	bl	19d48 <__assert_fail@plt+0x8a24>
   1361c:	vmov	d16, r0, r1
   13620:	vmul.f64	d17, d9, d8
   13624:	vdiv.f64	d9, d17, d16
   13628:	cmp	sl, #1
   1362c:	bhi	139b0 <__assert_fail@plt+0x268c>
   13630:	vldr	d16, [pc, #-424]	; 13490 <__assert_fail@plt+0x216c>
   13634:	vldr	d17, [pc, #-420]	; 13498 <__assert_fail@plt+0x2174>
   13638:	mov	r1, #0
   1363c:	movw	r9, #53536	; 0xd120
   13640:	mov	r2, #0
   13644:	ldr	r5, [sp, #40]	; 0x28
   13648:	mov	r0, #0
   1364c:	movt	r9, #2
   13650:	vcmpe.f64	d9, d16
   13654:	vmrs	APSR_nzcv, fpscr
   13658:	vcmpe.f64	d9, d17
   1365c:	movwls	r1, #1
   13660:	vmrs	APSR_nzcv, fpscr
   13664:	movwge	r2, #1
   13668:	and	r6, r2, r1
   1366c:	ldr	r1, [r9]
   13670:	cmn	r1, #1
   13674:	movne	r5, r1
   13678:	cmp	r6, #1
   1367c:	bne	136d4 <__assert_fail@plt+0x23b0>
   13680:	vcmpe.f64	d9, #0.0
   13684:	vneg.f64	d17, d9
   13688:	vmov.f64	d18, d9
   1368c:	vmov.f64	d16, #36	; 0x41200000  10.0
   13690:	vmrs	APSR_nzcv, fpscr
   13694:	vmovmi.f64	d18, d17
   13698:	vcmpe.f64	d18, d16
   1369c:	vmrs	APSR_nzcv, fpscr
   136a0:	blt	136d4 <__assert_fail@plt+0x23b0>
   136a4:	mov	r0, #0
   136a8:	vmov.f64	d17, d9
   136ac:	vdiv.f64	d17, d17, d16
   136b0:	add	r0, r0, #1
   136b4:	vcmpe.f64	d17, #0.0
   136b8:	vneg.f64	d18, d17
   136bc:	vmov.f64	d19, d17
   136c0:	vmrs	APSR_nzcv, fpscr
   136c4:	vmovmi.f64	d19, d18
   136c8:	vcmpe.f64	d19, d16
   136cc:	vmrs	APSR_nzcv, fpscr
   136d0:	bge	136ac <__assert_fail@plt+0x2388>
   136d4:	movw	r1, #53668	; 0xd1a4
   136d8:	movt	r1, #2
   136dc:	ldr	r7, [r1]
   136e0:	cmp	r7, #0
   136e4:	bne	13750 <__assert_fail@plt+0x242c>
   136e8:	add	r1, r0, r5
   136ec:	cmp	r1, #16
   136f0:	bcc	13750 <__assert_fail@plt+0x242c>
   136f4:	movw	r0, #53708	; 0xd1cc
   136f8:	movt	r0, #2
   136fc:	ldr	r0, [r0]
   13700:	cmp	r0, #3
   13704:	beq	139b0 <__assert_fail@plt+0x268c>
   13708:	movw	r0, #53716	; 0xd1d4
   1370c:	mov	r4, #2
   13710:	movt	r0, #2
   13714:	ldrb	r0, [r0]
   13718:	cmp	r0, #0
   1371c:	movwne	r4, #0
   13720:	cmp	r5, #0
   13724:	beq	13988 <__assert_fail@plt+0x2664>
   13728:	movw	r1, #47267	; 0xb8a3
   1372c:	mov	r0, #0
   13730:	mov	r2, #5
   13734:	mov	r6, #0
   13738:	movt	r1, #1
   1373c:	bl	11114 <dcgettext@plt>
   13740:	mov	r2, r0
   13744:	str	r5, [sp, #8]
   13748:	str	r6, [sp, #12]
   1374c:	b	139a0 <__assert_fail@plt+0x267c>
   13750:	cmp	r0, #27
   13754:	bcc	137a4 <__assert_fail@plt+0x2480>
   13758:	movw	r0, #53708	; 0xd1cc
   1375c:	movt	r0, #2
   13760:	ldr	r0, [r0]
   13764:	cmp	r0, #3
   13768:	beq	139b0 <__assert_fail@plt+0x268c>
   1376c:	movw	r0, #53716	; 0xd1d4
   13770:	movw	r1, #47400	; 0xb928
   13774:	mov	r2, #5
   13778:	movt	r0, #2
   1377c:	movt	r1, #1
   13780:	ldrb	r4, [r0]
   13784:	mov	r0, #0
   13788:	bl	11114 <dcgettext@plt>
   1378c:	mov	r2, r0
   13790:	mov	r0, #2
   13794:	cmp	r4, #0
   13798:	vstr	d9, [sp]
   1379c:	movwne	r0, #0
   137a0:	b	139a8 <__assert_fail@plt+0x2684>
   137a4:	movw	r0, #53528	; 0xd118
   137a8:	mov	r8, r5
   137ac:	sub	r1, fp, #132	; 0x84
   137b0:	movt	r0, #2
   137b4:	ldr	sl, [r0]
   137b8:	movw	r0, #53672	; 0xd1a8
   137bc:	movt	r0, #2
   137c0:	ldrb	r5, [r0]
   137c4:	mov	r0, #37	; 0x25
   137c8:	strb	r0, [fp, #-132]	; 0xffffff7c
   137cc:	cmp	r5, #1
   137d0:	bne	137e4 <__assert_fail@plt+0x24c0>
   137d4:	mov	r0, #39	; 0x27
   137d8:	add	r4, r1, #2
   137dc:	strb	r0, [fp, #-131]	; 0xffffff7d
   137e0:	b	137e8 <__assert_fail@plt+0x24c4>
   137e4:	add	r4, r1, #1
   137e8:	movw	r0, #53720	; 0xd1d8
   137ec:	movt	r0, #2
   137f0:	ldr	r0, [r0]
   137f4:	cmp	r0, #0
   137f8:	beq	13824 <__assert_fail@plt+0x2500>
   137fc:	movw	r1, #47537	; 0xb9b1
   13800:	str	r0, [sp, #4]
   13804:	mov	r0, r4
   13808:	mov	r2, #1
   1380c:	mvn	r3, #0
   13810:	movt	r1, #1
   13814:	str	r1, [sp]
   13818:	mov	r1, #62	; 0x3e
   1381c:	bl	11300 <__snprintf_chk@plt>
   13820:	add	r4, r4, r0
   13824:	movw	r0, #53689	; 0xd1b9
   13828:	movt	r0, #2
   1382c:	ldrb	r0, [r0]
   13830:	cmp	r0, #1
   13834:	bne	13854 <__assert_fail@plt+0x2530>
   13838:	movw	r0, #53632	; 0xd180
   1383c:	movw	r2, #47542	; 0xb9b6
   13840:	mov	r1, #1
   13844:	movt	r0, #2
   13848:	movt	r2, #1
   1384c:	ldr	r0, [r0]
   13850:	bl	1124c <__fprintf_chk@plt>
   13854:	cmp	r7, #0
   13858:	beq	1393c <__assert_fail@plt+0x2618>
   1385c:	sub	r1, r7, #3
   13860:	mov	r0, #1000	; 0x3e8
   13864:	mov	r5, #0
   13868:	cmp	r1, #2
   1386c:	movwcc	r0, #1024	; 0x400
   13870:	cmp	r6, #0
   13874:	vmov	s0, r0
   13878:	vcvt.f64.s32	d10, s0
   1387c:	beq	139dc <__assert_fail@plt+0x26b8>
   13880:	vcmpe.f64	d9, #0.0
   13884:	vmov	s0, r0
   13888:	vneg.f64	d17, d9
   1388c:	vmov.f64	d18, d9
   13890:	vmov.f64	d8, d9
   13894:	vmrs	APSR_nzcv, fpscr
   13898:	vcvt.f64.u32	d16, s0
   1389c:	vmovmi.f64	d18, d17
   138a0:	vcmpe.f64	d18, d16
   138a4:	vmrs	APSR_nzcv, fpscr
   138a8:	blt	139e0 <__assert_fail@plt+0x26bc>
   138ac:	mov	r5, #0
   138b0:	vmov.f64	d8, d9
   138b4:	vdiv.f64	d8, d8, d16
   138b8:	add	r5, r5, #1
   138bc:	vcmpe.f64	d8, #0.0
   138c0:	vneg.f64	d17, d8
   138c4:	vmov.f64	d18, d8
   138c8:	vmrs	APSR_nzcv, fpscr
   138cc:	vmovmi.f64	d18, d17
   138d0:	vcmpe.f64	d18, d16
   138d4:	vmrs	APSR_nzcv, fpscr
   138d8:	bge	138b4 <__assert_fail@plt+0x2590>
   138dc:	b	139e0 <__assert_fail@plt+0x26bc>
   138e0:	cmp	r6, #0
   138e4:	ldrbne	r0, [r6]
   138e8:	cmpne	r0, #0
   138ec:	bne	13c6c <__assert_fail@plt+0x2948>
   138f0:	cmp	sl, #1
   138f4:	bne	13c58 <__assert_fail@plt+0x2934>
   138f8:	movw	r0, #53688	; 0xd1b8
   138fc:	mov	sl, #1
   13900:	movt	r0, #2
   13904:	ldrb	r0, [r0]
   13908:	cmp	r0, #1
   1390c:	bne	135dc <__assert_fail@plt+0x22b8>
   13910:	movw	r1, #46753	; 0xb6a1
   13914:	mov	r0, #0
   13918:	mov	r2, #5
   1391c:	movt	r1, #1
   13920:	bl	11114 <dcgettext@plt>
   13924:	mov	r5, r0
   13928:	mov	r0, r4
   1392c:	bl	16ffc <__assert_fail@plt+0x5cd8>
   13930:	mov	r3, r0
   13934:	mov	r0, #0
   13938:	b	135d0 <__assert_fail@plt+0x22ac>
   1393c:	cmp	r8, #0
   13940:	beq	13c60 <__assert_fail@plt+0x293c>
   13944:	mov	r0, r8
   13948:	cmp	r8, #1
   1394c:	beq	13ce8 <__assert_fail@plt+0x29c4>
   13950:	vmov.f64	d17, #36	; 0x41200000  10.0
   13954:	rsb	r0, r0, #1
   13958:	vmov.f64	d16, d17
   1395c:	adds	r0, r0, #1
   13960:	vmul.f64	d16, d16, d17
   13964:	bne	1395c <__assert_fail@plt+0x2638>
   13968:	vmov.f64	d17, #36	; 0x41200000  10.0
   1396c:	rsb	r0, r8, #1
   13970:	vmov.f64	d8, d17
   13974:	adds	r0, r0, #1
   13978:	vmul.f64	d8, d8, d17
   1397c:	bne	13974 <__assert_fail@plt+0x2650>
   13980:	vmul.f64	d0, d9, d16
   13984:	b	13cf0 <__assert_fail@plt+0x29cc>
   13988:	movw	r1, #47341	; 0xb8ed
   1398c:	mov	r0, #0
   13990:	mov	r2, #5
   13994:	movt	r1, #1
   13998:	bl	11114 <dcgettext@plt>
   1399c:	mov	r2, r0
   139a0:	mov	r0, r4
   139a4:	vstr	d9, [sp]
   139a8:	mov	r1, #0
   139ac:	bl	11198 <error@plt>
   139b0:	movw	r0, #53644	; 0xd18c
   139b4:	movt	r0, #2
   139b8:	ldr	r1, [r0]
   139bc:	mov	r0, r8
   139c0:	bl	1106c <fputs_unlocked@plt>
   139c4:	mov	r4, #0
   139c8:	mov	r0, r4
   139cc:	sub	sp, fp, #64	; 0x40
   139d0:	vpop	{d8-d11}
   139d4:	add	sp, sp, #4
   139d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139dc:	vmov.f64	d8, d9
   139e0:	movw	r0, #53689	; 0xd1b9
   139e4:	movt	r0, #2
   139e8:	ldrb	r0, [r0]
   139ec:	cmp	r0, #1
   139f0:	bne	13a1c <__assert_fail@plt+0x26f8>
   139f4:	movw	r0, #53632	; 0xd180
   139f8:	movw	r2, #47695	; 0xba4f
   139fc:	mov	r1, #1
   13a00:	str	r5, [sp, #16]
   13a04:	vstr	d8, [sp]
   13a08:	vstr	d10, [sp, #8]
   13a0c:	movt	r0, #2
   13a10:	movt	r2, #1
   13a14:	ldr	r0, [r0]
   13a18:	bl	1124c <__fprintf_chk@plt>
   13a1c:	ldr	r8, [r9]
   13a20:	cmn	r8, #1
   13a24:	beq	13a9c <__assert_fail@plt+0x2778>
   13a28:	add	r0, r5, r5, lsl #1
   13a2c:	mov	r1, r8
   13a30:	cmp	r0, r8
   13a34:	movcc	r1, r0
   13a38:	cmp	r1, #0
   13a3c:	beq	13acc <__assert_fail@plt+0x27a8>
   13a40:	cmp	r1, #1
   13a44:	beq	13ac0 <__assert_fail@plt+0x279c>
   13a48:	mvn	r0, r0
   13a4c:	mvn	r1, r8
   13a50:	vmov.f64	d17, #36	; 0x41200000  10.0
   13a54:	cmp	r1, r0
   13a58:	mov	r2, r0
   13a5c:	vmov.f64	d16, d17
   13a60:	movhi	r2, r1
   13a64:	add	r2, r2, #2
   13a68:	adds	r2, r2, #1
   13a6c:	vmul.f64	d16, d16, d17
   13a70:	bne	13a68 <__assert_fail@plt+0x2744>
   13a74:	cmp	r1, r0
   13a78:	vmov.f64	d17, #36	; 0x41200000  10.0
   13a7c:	movhi	r0, r1
   13a80:	vmov.f64	d11, d17
   13a84:	add	r0, r0, #2
   13a88:	adds	r0, r0, #1
   13a8c:	vmul.f64	d11, d11, d17
   13a90:	bne	13a88 <__assert_fail@plt+0x2764>
   13a94:	vmul.f64	d8, d8, d16
   13a98:	b	13ad0 <__assert_fail@plt+0x27ac>
   13a9c:	vcmpe.f64	d8, #0.0
   13aa0:	vneg.f64	d16, d8
   13aa4:	vmov.f64	d18, d8
   13aa8:	vmov.f64	d17, #36	; 0x41200000  10.0
   13aac:	vmrs	APSR_nzcv, fpscr
   13ab0:	vmovmi.f64	d18, d16
   13ab4:	vcmpe.f64	d18, d17
   13ab8:	vmrs	APSR_nzcv, fpscr
   13abc:	bpl	13acc <__assert_fail@plt+0x27a8>
   13ac0:	vmov.f64	d11, #36	; 0x41200000  10.0
   13ac4:	vmul.f64	d8, d8, d11
   13ac8:	b	13ad0 <__assert_fail@plt+0x27ac>
   13acc:	vmov.f64	d11, #112	; 0x3f800000  1.0
   13ad0:	vmov.f64	d0, d8
   13ad4:	mov	r0, sl
   13ad8:	bl	13fa0 <__assert_fail@plt+0x2c7c>
   13adc:	vdiv.f64	d8, d0, d11
   13ae0:	movw	sl, #53689	; 0xd1b9
   13ae4:	mov	r6, #0
   13ae8:	vcmpe.f64	d8, #0.0
   13aec:	vneg.f64	d16, d8
   13af0:	vmov.f64	d17, d8
   13af4:	movt	sl, #2
   13af8:	vmrs	APSR_nzcv, fpscr
   13afc:	vmovmi.f64	d17, d16
   13b00:	vcmpe.f64	d17, d10
   13b04:	vmrs	APSR_nzcv, fpscr
   13b08:	vdivge.f64	d8, d8, d10
   13b0c:	addge	r5, r5, #1
   13b10:	vcmp.f64	d8, #0.0
   13b14:	vmrs	APSR_nzcv, fpscr
   13b18:	beq	13b4c <__assert_fail@plt+0x2828>
   13b1c:	vcmpe.f64	d8, #0.0
   13b20:	vneg.f64	d16, d8
   13b24:	vmov.f64	d18, d8
   13b28:	vmov.f64	d17, #36	; 0x41200000  10.0
   13b2c:	vmrs	APSR_nzcv, fpscr
   13b30:	vmovmi.f64	d18, d16
   13b34:	vcmpe.f64	d18, d17
   13b38:	vmrs	APSR_nzcv, fpscr
   13b3c:	bpl	13b4c <__assert_fail@plt+0x2828>
   13b40:	cmp	r5, #0
   13b44:	mov	r6, r5
   13b48:	movwne	r6, #1
   13b4c:	ldrb	r0, [sl]
   13b50:	cmp	r0, #1
   13b54:	bne	13b84 <__assert_fail@plt+0x2860>
   13b58:	movw	r0, #53632	; 0xd180
   13b5c:	movw	r2, #47730	; 0xba72
   13b60:	mov	r1, #1
   13b64:	str	r5, [sp, #16]
   13b68:	vstr	d8, [sp]
   13b6c:	vstr	d10, [sp, #8]
   13b70:	movt	r0, #2
   13b74:	movt	r2, #1
   13b78:	ldr	r0, [r0]
   13b7c:	bl	1124c <__fprintf_chk@plt>
   13b80:	ldr	r8, [r9]
   13b84:	mov	r0, #0
   13b88:	cmn	r8, #1
   13b8c:	strb	r0, [r4, #6]
   13b90:	movw	r0, #29477	; 0x7325
   13b94:	movne	r6, r8
   13b98:	cmp	r5, #8
   13b9c:	strh	r0, [r4, #4]
   13ba0:	movw	r0, #10798	; 0x2a2e
   13ba4:	movt	r0, #26188	; 0x664c
   13ba8:	str	r0, [r4]
   13bac:	bhi	13bc0 <__assert_fail@plt+0x289c>
   13bb0:	movw	r0, #48352	; 0xbce0
   13bb4:	movt	r0, #1
   13bb8:	ldr	r0, [r0, r5, lsl #2]
   13bbc:	b	13bc8 <__assert_fail@plt+0x28a4>
   13bc0:	movw	r0, #47815	; 0xbac7
   13bc4:	movt	r0, #1
   13bc8:	sub	r1, fp, #132	; 0x84
   13bcc:	str	r0, [sp, #16]
   13bd0:	vstr	d8, [sp, #8]
   13bd4:	add	r0, sp, #44	; 0x2c
   13bd8:	mov	r2, #1
   13bdc:	mov	r3, #128	; 0x80
   13be0:	stm	sp, {r1, r6}
   13be4:	mov	r1, #127	; 0x7f
   13be8:	bl	11300 <__snprintf_chk@plt>
   13bec:	cmp	r0, #127	; 0x7f
   13bf0:	bcs	13f74 <__assert_fail@plt+0x2c50>
   13bf4:	cmp	r7, #4
   13bf8:	bne	13c1c <__assert_fail@plt+0x28f8>
   13bfc:	cmp	r5, #0
   13c00:	beq	13c1c <__assert_fail@plt+0x28f8>
   13c04:	movw	r1, #46188	; 0xb46c
   13c08:	rsb	r2, r0, #127	; 0x7f
   13c0c:	add	r0, sp, #44	; 0x2c
   13c10:	mov	r3, #128	; 0x80
   13c14:	movt	r1, #1
   13c18:	bl	11084 <__strncat_chk@plt>
   13c1c:	ldrb	r0, [sl]
   13c20:	cmp	r0, #1
   13c24:	bne	13d84 <__assert_fail@plt+0x2a60>
   13c28:	movw	r0, #53632	; 0xd180
   13c2c:	movt	r0, #2
   13c30:	ldr	r4, [r0]
   13c34:	add	r0, sp, #44	; 0x2c
   13c38:	bl	16ffc <__assert_fail@plt+0x5cd8>
   13c3c:	movw	r2, #47778	; 0xbaa2
   13c40:	mov	r3, r0
   13c44:	mov	r0, r4
   13c48:	mov	r1, #1
   13c4c:	movt	r2, #1
   13c50:	bl	1124c <__fprintf_chk@plt>
   13c54:	b	13d84 <__assert_fail@plt+0x2a60>
   13c58:	mov	sl, #0
   13c5c:	b	135dc <__assert_fail@plt+0x22b8>
   13c60:	vmov.f64	d8, #112	; 0x3f800000  1.0
   13c64:	vmov.f64	d0, d9
   13c68:	b	13cf0 <__assert_fail@plt+0x29cc>
   13c6c:	movw	r0, #53708	; 0xd1cc
   13c70:	mov	sl, #5
   13c74:	movt	r0, #2
   13c78:	ldr	r0, [r0]
   13c7c:	cmp	r0, #3
   13c80:	beq	135dc <__assert_fail@plt+0x22b8>
   13c84:	movw	r0, #53716	; 0xd1d4
   13c88:	movw	r1, #46799	; 0xb6cf
   13c8c:	mov	r2, #5
   13c90:	mov	sl, #5
   13c94:	movt	r0, #2
   13c98:	movt	r1, #1
   13c9c:	ldrb	r7, [r0]
   13ca0:	mov	r0, #0
   13ca4:	bl	11114 <dcgettext@plt>
   13ca8:	mov	r5, r0
   13cac:	mov	r0, #0
   13cb0:	mov	r1, r4
   13cb4:	bl	16fec <__assert_fail@plt+0x5cc8>
   13cb8:	mov	r4, r0
   13cbc:	mov	r0, #1
   13cc0:	mov	r1, r6
   13cc4:	bl	16fec <__assert_fail@plt+0x5cc8>
   13cc8:	str	r0, [sp]
   13ccc:	mov	r0, #2
   13cd0:	cmp	r7, #0
   13cd4:	mov	r1, #0
   13cd8:	mov	r2, r5
   13cdc:	mov	r3, r4
   13ce0:	movwne	r0, #0
   13ce4:	b	135d8 <__assert_fail@plt+0x22b4>
   13ce8:	vmov.f64	d8, #36	; 0x41200000  10.0
   13cec:	vmul.f64	d0, d9, d8
   13cf0:	mov	r0, sl
   13cf4:	bl	13fa0 <__assert_fail@plt+0x2c7c>
   13cf8:	movw	sl, #53689	; 0xd1b9
   13cfc:	vdiv.f64	d8, d0, d8
   13d00:	mov	r6, r8
   13d04:	movt	sl, #2
   13d08:	ldrb	r0, [sl]
   13d0c:	cmp	r0, #1
   13d10:	bne	13d48 <__assert_fail@plt+0x2a24>
   13d14:	movw	r0, #53632	; 0xd180
   13d18:	movw	r1, #47560	; 0xb9c8
   13d1c:	movw	r2, #47609	; 0xb9f9
   13d20:	cmp	r5, #0
   13d24:	mov	r3, r6
   13d28:	vstr	d8, [sp]
   13d2c:	movt	r0, #2
   13d30:	movt	r1, #1
   13d34:	movt	r2, #1
   13d38:	ldr	r0, [r0]
   13d3c:	movne	r2, r1
   13d40:	mov	r1, #1
   13d44:	bl	1124c <__fprintf_chk@plt>
   13d48:	mov	r0, #0
   13d4c:	vstr	d8, [sp, #8]
   13d50:	mov	r1, #128	; 0x80
   13d54:	mov	r2, #1
   13d58:	mov	r3, #128	; 0x80
   13d5c:	strb	r0, [r4, #4]
   13d60:	movw	r0, #10798	; 0x2a2e
   13d64:	movt	r0, #26188	; 0x664c
   13d68:	str	r0, [r4]
   13d6c:	sub	r0, fp, #132	; 0x84
   13d70:	stm	sp, {r0, r6}
   13d74:	add	r0, sp, #44	; 0x2c
   13d78:	bl	11300 <__snprintf_chk@plt>
   13d7c:	cmp	r0, #128	; 0x80
   13d80:	bcs	13f74 <__assert_fail@plt+0x2c50>
   13d84:	movw	r0, #53684	; 0xd1b4
   13d88:	movt	r0, #2
   13d8c:	ldr	r4, [r0]
   13d90:	cmp	r4, #0
   13d94:	beq	13db8 <__assert_fail@plt+0x2a94>
   13d98:	add	r5, sp, #44	; 0x2c
   13d9c:	mov	r0, r5
   13da0:	bl	111f8 <strlen@plt>
   13da4:	rsb	r2, r0, #127	; 0x7f
   13da8:	mov	r0, r5
   13dac:	mov	r1, r4
   13db0:	mov	r3, #128	; 0x80
   13db4:	bl	11084 <__strncat_chk@plt>
   13db8:	ldrb	r0, [sl]
   13dbc:	cmp	r0, #1
   13dc0:	bne	13df4 <__assert_fail@plt+0x2ad0>
   13dc4:	movw	r0, #53632	; 0xd180
   13dc8:	movt	r0, #2
   13dcc:	ldr	r4, [r0]
   13dd0:	add	r0, sp, #44	; 0x2c
   13dd4:	bl	16ffc <__assert_fail@plt+0x5cd8>
   13dd8:	movw	r2, #47467	; 0xb96b
   13ddc:	str	r0, [sp, #8]
   13de0:	mov	r0, r4
   13de4:	mov	r1, #1
   13de8:	vstr	d9, [sp]
   13dec:	movt	r2, #1
   13df0:	bl	1124c <__fprintf_chk@plt>
   13df4:	movw	r0, #53676	; 0xd1ac
   13df8:	movt	r0, #2
   13dfc:	ldr	r4, [r0]
   13e00:	cmp	r4, #0
   13e04:	beq	13e94 <__assert_fail@plt+0x2b70>
   13e08:	add	r0, sp, #44	; 0x2c
   13e0c:	bl	111f8 <strlen@plt>
   13e10:	cmp	r0, r4
   13e14:	bcs	13e94 <__assert_fail@plt+0x2b70>
   13e18:	movw	r0, #53732	; 0xd1e4
   13e1c:	movw	r5, #53736	; 0xd1e8
   13e20:	mov	r3, #2
   13e24:	str	r4, [fp, #-132]	; 0xffffff7c
   13e28:	movt	r0, #2
   13e2c:	movt	r5, #2
   13e30:	ldr	r2, [r0]
   13e34:	movw	r0, #53680	; 0xd1b0
   13e38:	ldr	r1, [r5]
   13e3c:	movt	r0, #2
   13e40:	ldrb	r0, [r0]
   13e44:	eor	r0, r0, #1
   13e48:	stm	sp, {r0, r3}
   13e4c:	add	r0, sp, #44	; 0x2c
   13e50:	sub	r3, fp, #132	; 0x84
   13e54:	bl	14f4c <__assert_fail@plt+0x3c28>
   13e58:	ldrb	r0, [sl]
   13e5c:	cmp	r0, #1
   13e60:	bne	13ee8 <__assert_fail@plt+0x2bc4>
   13e64:	movw	r0, #53632	; 0xd180
   13e68:	movt	r0, #2
   13e6c:	ldr	r4, [r0]
   13e70:	ldr	r0, [r5]
   13e74:	bl	16ffc <__assert_fail@plt+0x5cd8>
   13e78:	movw	r2, #47516	; 0xb99c
   13e7c:	mov	r3, r0
   13e80:	mov	r0, r4
   13e84:	mov	r1, #1
   13e88:	movt	r2, #1
   13e8c:	bl	1124c <__fprintf_chk@plt>
   13e90:	b	13ee8 <__assert_fail@plt+0x2bc4>
   13e94:	add	r0, sp, #44	; 0x2c
   13e98:	bl	111f8 <strlen@plt>
   13e9c:	movw	r2, #53732	; 0xd1e4
   13ea0:	add	r3, r0, #1
   13ea4:	movt	r2, #2
   13ea8:	ldr	r1, [r2]
   13eac:	cmp	r1, r3
   13eb0:	bls	13ec4 <__assert_fail@plt+0x2ba0>
   13eb4:	movw	r0, #53736	; 0xd1e8
   13eb8:	movt	r0, #2
   13ebc:	ldr	r0, [r0]
   13ec0:	b	13ee0 <__assert_fail@plt+0x2bbc>
   13ec4:	movw	r4, #53736	; 0xd1e8
   13ec8:	add	r1, r0, #2
   13ecc:	movt	r4, #2
   13ed0:	str	r1, [r2]
   13ed4:	ldr	r0, [r4]
   13ed8:	bl	17834 <__assert_fail@plt+0x6510>
   13edc:	str	r0, [r4]
   13ee0:	add	r1, sp, #44	; 0x2c
   13ee4:	bl	11168 <strcpy@plt>
   13ee8:	movw	r0, #53724	; 0xd1dc
   13eec:	movt	r0, #2
   13ef0:	ldr	r0, [r0]
   13ef4:	cmp	r0, #0
   13ef8:	beq	13f0c <__assert_fail@plt+0x2be8>
   13efc:	movw	r1, #53644	; 0xd18c
   13f00:	movt	r1, #2
   13f04:	ldr	r1, [r1]
   13f08:	bl	1106c <fputs_unlocked@plt>
   13f0c:	movw	r5, #53644	; 0xd18c
   13f10:	movw	r0, #53736	; 0xd1e8
   13f14:	movt	r0, #2
   13f18:	movt	r5, #2
   13f1c:	ldr	r1, [r5]
   13f20:	ldr	r0, [r0]
   13f24:	bl	1106c <fputs_unlocked@plt>
   13f28:	movw	r0, #53728	; 0xd1e0
   13f2c:	mov	r4, #1
   13f30:	movt	r0, #2
   13f34:	ldr	r0, [r0]
   13f38:	cmp	r0, #0
   13f3c:	beq	139c8 <__assert_fail@plt+0x26a4>
   13f40:	ldr	r1, [r5]
   13f44:	bl	1106c <fputs_unlocked@plt>
   13f48:	b	139c8 <__assert_fail@plt+0x26a4>
   13f4c:	vmov.f64	d17, #36	; 0x41200000  10.0
   13f50:	vdiv.f64	d16, d16, d17
   13f54:	cmp	ip, #45	; 0x2d
   13f58:	vneg.f64	d17, d16
   13f5c:	vseleq.f64	d16, d17, d16
   13f60:	cmp	sl, #1
   13f64:	vadd.f64	d9, d9, d16
   13f68:	bls	13100 <__assert_fail@plt+0x1ddc>
   13f6c:	b	1351c <__assert_fail@plt+0x21f8>
   13f70:	bl	112f4 <abort@plt>
   13f74:	movw	r1, #47652	; 0xba24
   13f78:	mov	r0, #0
   13f7c:	mov	r2, #5
   13f80:	movt	r1, #1
   13f84:	bl	11114 <dcgettext@plt>
   13f88:	mov	r2, r0
   13f8c:	mov	r0, #1
   13f90:	mov	r1, #0
   13f94:	vstr	d8, [sp]
   13f98:	bl	11198 <error@plt>
   13f9c:	nop	{0}
   13fa0:	push	{r4, r5, fp, lr}
   13fa4:	add	fp, sp, #8
   13fa8:	vpush	{d8-d9}
   13fac:	vldr	d16, [pc, #276]	; 140c8 <__assert_fail@plt+0x2da4>
   13fb0:	mov	r4, r0
   13fb4:	vmov.f64	d8, d0
   13fb8:	vmul.f64	d16, d0, d16
   13fbc:	vmov	r0, r1, d16
   13fc0:	bl	19e08 <__assert_fail@plt+0x8ae4>
   13fc4:	bl	19d5c <__assert_fail@plt+0x8a38>
   13fc8:	cmp	r4, #4
   13fcc:	bhi	14080 <__assert_fail@plt+0x2d5c>
   13fd0:	vldr	d16, [pc, #248]	; 140d0 <__assert_fail@plt+0x2dac>
   13fd4:	vmov	d17, r0, r1
   13fd8:	add	r0, pc, #8
   13fdc:	vmul.f64	d9, d17, d16
   13fe0:	vsub.f64	d8, d8, d9
   13fe4:	ldr	pc, [r0, r4, lsl #2]
   13fe8:	andeq	r4, r1, r8, asr #32
   13fec:	andeq	r4, r1, r8
   13ff0:	strdeq	r3, [r1], -ip
   13ff4:	andeq	r4, r1, ip, lsl #1
   13ff8:	muleq	r1, r4, r0
   13ffc:	vcmpe.f64	d8, #0.0
   14000:	vmrs	APSR_nzcv, fpscr
   14004:	bpl	14048 <__assert_fail@plt+0x2d24>
   14008:	vneg.f64	d8, d8
   1400c:	vmov	r0, r1, d8
   14010:	bl	19e08 <__assert_fail@plt+0x8ae4>
   14014:	mov	r4, r0
   14018:	mov	r5, r1
   1401c:	bl	19d5c <__assert_fail@plt+0x8a38>
   14020:	vmov	d16, r0, r1
   14024:	adds	r2, r4, #1
   14028:	vcmpe.f64	d16, d8
   1402c:	adc	r1, r5, #0
   14030:	vmrs	APSR_nzcv, fpscr
   14034:	movpl	r2, r4
   14038:	movpl	r1, r5
   1403c:	rsbs	r0, r2, #0
   14040:	rsc	r1, r1, #0
   14044:	b	140b4 <__assert_fail@plt+0x2d90>
   14048:	vmov	r0, r1, d8
   1404c:	bl	19e08 <__assert_fail@plt+0x8ae4>
   14050:	mov	r4, r0
   14054:	mov	r5, r1
   14058:	bl	19d5c <__assert_fail@plt+0x8a38>
   1405c:	mov	r2, r0
   14060:	adds	r0, r4, #1
   14064:	vmov	d16, r2, r1
   14068:	adc	r1, r5, #0
   1406c:	vcmpe.f64	d8, d16
   14070:	vmrs	APSR_nzcv, fpscr
   14074:	movle	r0, r4
   14078:	movle	r1, r5
   1407c:	b	140b4 <__assert_fail@plt+0x2d90>
   14080:	vmov.i32	d0, #0	; 0x00000000
   14084:	vpop	{d8-d9}
   14088:	pop	{r4, r5, fp, pc}
   1408c:	vmov	r0, r1, d8
   14090:	b	140b0 <__assert_fail@plt+0x2d8c>
   14094:	vcmpe.f64	d8, #0.0
   14098:	vmov.f64	d16, #224	; 0xbf000000 -0.5
   1409c:	vmov.f64	d17, #96	; 0x3f000000  0.5
   140a0:	vmrs	APSR_nzcv, fpscr
   140a4:	vmovmi.f64	d17, d16
   140a8:	vadd.f64	d16, d8, d17
   140ac:	vmov	r0, r1, d16
   140b0:	bl	19e08 <__assert_fail@plt+0x8ae4>
   140b4:	bl	19d5c <__assert_fail@plt+0x8a38>
   140b8:	vmov	d16, r0, r1
   140bc:	vadd.f64	d0, d9, d16
   140c0:	vpop	{d8-d9}
   140c4:	pop	{r4, r5, fp, pc}
   140c8:	andeq	r0, r0, r0
   140cc:	stccc	0, cr0, [r0], {-0}
   140d0:	andeq	r0, r0, r0
   140d4:	mvnmi	r0, #0
   140d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140dc:	add	fp, sp, #28
   140e0:	sub	sp, sp, #20
   140e4:	mov	lr, r0
   140e8:	ands	r0, r1, #1
   140ec:	mov	r2, #0
   140f0:	str	r1, [sp]
   140f4:	str	r0, [sp, #4]
   140f8:	beq	14134 <__assert_fail@plt+0x2e10>
   140fc:	movw	r1, #48544	; 0xbda0
   14100:	mov	r0, lr
   14104:	mov	r4, lr
   14108:	movt	r1, #1
   1410c:	bl	11090 <strcmp@plt>
   14110:	cmp	r0, #0
   14114:	clz	r0, r0
   14118:	mov	lr, r4
   1411c:	mov	r2, #0
   14120:	mov	r8, #0
   14124:	lsr	sl, r0, #5
   14128:	addeq	lr, lr, #1
   1412c:	mov	r1, sl
   14130:	b	14140 <__assert_fail@plt+0x2e1c>
   14134:	mov	sl, #0
   14138:	mov	r8, #0
   1413c:	mov	r1, #0
   14140:	movw	ip, #54068	; 0xd334
   14144:	mov	r9, #1
   14148:	mov	r5, r1
   1414c:	mov	r0, #0
   14150:	mov	r6, #0
   14154:	movt	ip, #2
   14158:	b	1417c <__assert_fail@plt+0x2e58>
   1415c:	mov	sl, #0
   14160:	mov	r8, #0
   14164:	mov	r1, #0
   14168:	mov	r2, #0
   1416c:	mov	r5, #0
   14170:	mov	r0, #0
   14174:	mov	r6, r7
   14178:	add	lr, lr, #1
   1417c:	ldrb	r7, [lr]
   14180:	cmp	r7, #44	; 0x2c
   14184:	beq	142f4 <__assert_fail@plt+0x2fd0>
   14188:	cmp	r7, #45	; 0x2d
   1418c:	bne	141d0 <__assert_fail@plt+0x2eac>
   14190:	tst	r5, #1
   14194:	bne	147ec <__assert_fail@plt+0x34c8>
   14198:	orrs	r0, sl, r8
   1419c:	eoreq	r0, r1, #1
   141a0:	tsteq	r0, #1
   141a4:	beq	14760 <__assert_fail@plt+0x343c>
   141a8:	ands	r6, r1, #1
   141ac:	mov	r9, sl
   141b0:	mov	r5, #1
   141b4:	mov	sl, #0
   141b8:	mov	r0, #0
   141bc:	add	lr, lr, #1
   141c0:	movne	r6, r8
   141c4:	moveq	r9, r5
   141c8:	mov	r8, #0
   141cc:	b	1417c <__assert_fail@plt+0x2e58>
   141d0:	str	r5, [sp, #8]
   141d4:	mov	r5, sl
   141d8:	mov	sl, r8
   141dc:	mov	r4, lr
   141e0:	str	r2, [sp, #16]
   141e4:	str	r1, [sp, #12]
   141e8:	mov	r8, r0
   141ec:	bl	111e0 <__ctype_b_loc@plt>
   141f0:	mov	r3, r8
   141f4:	mov	r8, sl
   141f8:	mov	sl, r5
   141fc:	ldr	r5, [sp, #8]
   14200:	ldr	r1, [sp, #12]
   14204:	ldr	r2, [sp, #16]
   14208:	movw	ip, #54068	; 0xd334
   1420c:	mov	lr, r4
   14210:	cmp	r7, #0
   14214:	movt	ip, #2
   14218:	beq	142f4 <__assert_fail@plt+0x2fd0>
   1421c:	ldr	r0, [r0]
   14220:	add	r0, r0, r7, lsl #1
   14224:	ldrh	r0, [r0]
   14228:	ands	r0, r0, #1
   1422c:	bne	142f4 <__assert_fail@plt+0x2fd0>
   14230:	sub	r0, r7, #48	; 0x30
   14234:	cmp	r0, #9
   14238:	bhi	14818 <__assert_fail@plt+0x34f4>
   1423c:	movw	r1, #53740	; 0xd1ec
   14240:	movt	r1, #2
   14244:	ldr	r7, [r1]
   14248:	cmp	r7, #0
   1424c:	mov	r1, r7
   14250:	movwne	r1, #1
   14254:	tst	r3, r1
   14258:	movweq	r1, #53740	; 0xd1ec
   1425c:	moveq	r7, lr
   14260:	movteq	r1, #2
   14264:	streq	lr, [r1]
   14268:	movw	r1, #39321	; 0x9999
   1426c:	movt	r1, #39321	; 0x9999
   14270:	subs	r1, r1, sl
   14274:	movw	r1, #39321	; 0x9999
   14278:	movt	r1, #6553	; 0x1999
   1427c:	sbcs	r1, r1, r8
   14280:	bcc	14774 <__assert_fail@plt+0x3450>
   14284:	mov	r1, #10
   14288:	add	r3, r8, r8, lsl #2
   1428c:	umull	r1, r2, sl, r1
   14290:	add	r2, r2, r3, lsl #1
   14294:	adds	r1, r1, r0
   14298:	adc	r0, r2, r0, asr #31
   1429c:	subs	r2, r1, sl
   142a0:	sbcs	r2, r0, r8
   142a4:	mov	r2, #0
   142a8:	movwcc	r2, #1
   142ac:	cmp	r2, #0
   142b0:	moveq	r8, r0
   142b4:	moveq	sl, r1
   142b8:	cmp	r2, #0
   142bc:	bne	14774 <__assert_fail@plt+0x3450>
   142c0:	mvn	r1, #0
   142c4:	eor	r0, sl, r1
   142c8:	eor	r1, r8, r1
   142cc:	orrs	r0, r0, r1
   142d0:	beq	14774 <__assert_fail@plt+0x3450>
   142d4:	ldr	r2, [sp, #16]
   142d8:	ldr	r1, [sp, #12]
   142dc:	eor	r0, r5, #1
   142e0:	add	lr, lr, #1
   142e4:	orr	r1, r1, r0
   142e8:	orr	r2, r2, r5
   142ec:	mov	r0, #1
   142f0:	b	1417c <__assert_fail@plt+0x2e58>
   142f4:	tst	r5, #1
   142f8:	beq	14384 <__assert_fail@plt+0x3060>
   142fc:	orr	r0, r1, r2
   14300:	mov	r1, r9
   14304:	mov	r9, #1
   14308:	movw	r4, #54064	; 0xd330
   1430c:	ands	r7, r0, #1
   14310:	str	r1, [sp, #16]
   14314:	movt	r4, #2
   14318:	movne	r9, r1
   1431c:	ldr	r1, [sp, #4]
   14320:	movne	r7, r6
   14324:	cmp	r1, #0
   14328:	movw	r1, #53744	; 0xd1f0
   1432c:	movt	r1, #2
   14330:	tsteq	r0, #1
   14334:	beq	1480c <__assert_fail@plt+0x34e8>
   14338:	tst	r2, #1
   1433c:	beq	143d4 <__assert_fail@plt+0x30b0>
   14340:	subs	r0, sl, r9
   14344:	sbcs	r0, r8, r7
   14348:	bcc	1486c <__assert_fail@plt+0x3548>
   1434c:	ldr	r5, [ip]
   14350:	ldr	r0, [r1]
   14354:	cmp	r5, r0
   14358:	bne	14448 <__assert_fail@plt+0x3124>
   1435c:	ldr	r0, [r4]
   14360:	mov	r2, #16
   14364:	mov	r5, lr
   14368:	bl	17998 <__assert_fail@plt+0x6674>
   1436c:	movw	ip, #54068	; 0xd334
   14370:	mov	lr, r5
   14374:	str	r0, [r4]
   14378:	movt	ip, #2
   1437c:	ldr	r5, [ip]
   14380:	b	1444c <__assert_fail@plt+0x3128>
   14384:	movw	r4, #54064	; 0xd330
   14388:	movw	r1, #53744	; 0xd1f0
   1438c:	orrs	r0, sl, r8
   14390:	movt	r4, #2
   14394:	movt	r1, #2
   14398:	beq	14760 <__assert_fail@plt+0x343c>
   1439c:	ldr	r5, [ip]
   143a0:	ldr	r0, [r1]
   143a4:	cmp	r5, r0
   143a8:	bne	1440c <__assert_fail@plt+0x30e8>
   143ac:	ldr	r0, [r4]
   143b0:	mov	r2, #16
   143b4:	mov	r5, lr
   143b8:	bl	17998 <__assert_fail@plt+0x6674>
   143bc:	movw	ip, #54068	; 0xd334
   143c0:	mov	lr, r5
   143c4:	str	r0, [r4]
   143c8:	movt	ip, #2
   143cc:	ldr	r5, [ip]
   143d0:	b	14410 <__assert_fail@plt+0x30ec>
   143d4:	ldr	r5, [ip]
   143d8:	ldr	r0, [r1]
   143dc:	cmp	r5, r0
   143e0:	bne	14428 <__assert_fail@plt+0x3104>
   143e4:	ldr	r0, [r4]
   143e8:	mov	r2, #16
   143ec:	mov	r5, lr
   143f0:	bl	17998 <__assert_fail@plt+0x6674>
   143f4:	movw	ip, #54068	; 0xd334
   143f8:	mov	lr, r5
   143fc:	str	r0, [r4]
   14400:	movt	ip, #2
   14404:	ldr	r5, [ip]
   14408:	b	1442c <__assert_fail@plt+0x3108>
   1440c:	ldr	r0, [r4]
   14410:	vmov.32	d16[0], sl
   14414:	add	r2, r0, r5, lsl #4
   14418:	vmov.32	d16[1], r8
   1441c:	vorr	d17, d16, d16
   14420:	vst1.64	{d16-d17}, [r2]
   14424:	b	14460 <__assert_fail@plt+0x313c>
   14428:	ldr	r0, [r4]
   1442c:	mov	r2, r0
   14430:	mvn	r3, #0
   14434:	str	r9, [r2, r5, lsl #4]!
   14438:	str	r7, [r2, #4]
   1443c:	str	r3, [r2, #8]
   14440:	str	r3, [r2, #12]
   14444:	b	14464 <__assert_fail@plt+0x3140>
   14448:	ldr	r0, [r4]
   1444c:	mov	r2, r0
   14450:	str	r9, [r2, r5, lsl #4]!
   14454:	stmib	r2, {r7, sl}
   14458:	str	r8, [r2, #12]
   1445c:	ldr	r9, [sp, #16]
   14460:	mov	r7, r6
   14464:	add	r1, r5, #1
   14468:	str	r1, [ip]
   1446c:	ldrb	r2, [lr]
   14470:	cmp	r2, #0
   14474:	bne	1415c <__assert_fail@plt+0x2e38>
   14478:	cmp	r1, #0
   1447c:	beq	14898 <__assert_fail@plt+0x3574>
   14480:	movw	r3, #18604	; 0x48ac
   14484:	mov	r2, #16
   14488:	movt	r3, #1
   1448c:	bl	112c4 <qsort@plt>
   14490:	movw	lr, #54068	; 0xd334
   14494:	movt	lr, #2
   14498:	ldr	r8, [lr]
   1449c:	cmp	r8, #0
   144a0:	beq	14550 <__assert_fail@plt+0x322c>
   144a4:	mov	r6, #0
   144a8:	mov	sl, r6
   144ac:	add	r6, r6, #1
   144b0:	cmp	r6, r8
   144b4:	bcs	14544 <__assert_fail@plt+0x3220>
   144b8:	mvn	r0, #-268435455	; 0xf0000001
   144bc:	sub	r9, r0, sl
   144c0:	ldr	r5, [r4]
   144c4:	add	r1, r5, sl, lsl #4
   144c8:	mov	r0, r5
   144cc:	ldr	r7, [r0, r6, lsl #4]!
   144d0:	ldr	r2, [r1, #8]!
   144d4:	ldr	r3, [r1, #4]
   144d8:	ldr	r0, [r0, #4]
   144dc:	subs	r7, r2, r7
   144e0:	sbcs	r0, r3, r0
   144e4:	bcc	14544 <__assert_fail@plt+0x3220>
   144e8:	add	r0, r5, r6, lsl #4
   144ec:	ldrd	r4, [r0, #8]
   144f0:	subs	r7, r2, r4
   144f4:	sbcs	r7, r3, r5
   144f8:	mov	r7, #0
   144fc:	movwcc	r7, #1
   14500:	cmp	r7, #0
   14504:	movne	r2, r4
   14508:	movne	r3, r5
   1450c:	movw	r4, #54064	; 0xd330
   14510:	strd	r2, [r1]
   14514:	add	r2, r9, r8
   14518:	add	r1, r0, #16
   1451c:	movt	r4, #2
   14520:	lsl	r2, r2, #4
   14524:	bl	110c0 <memmove@plt>
   14528:	movw	lr, #54068	; 0xd334
   1452c:	movt	lr, #2
   14530:	ldr	r0, [lr]
   14534:	sub	r8, r0, #1
   14538:	cmp	r6, r8
   1453c:	str	r8, [lr]
   14540:	bcc	144c0 <__assert_fail@plt+0x319c>
   14544:	cmp	r6, r8
   14548:	bcc	144a8 <__assert_fail@plt+0x3184>
   1454c:	b	14554 <__assert_fail@plt+0x3230>
   14550:	mov	r8, #0
   14554:	ldr	r0, [sp]
   14558:	tst	r0, #2
   1455c:	beq	1471c <__assert_fail@plt+0x33f8>
   14560:	ldr	r7, [r4]
   14564:	movw	r1, #53744	; 0xd1f0
   14568:	mov	r0, #0
   1456c:	movt	r1, #2
   14570:	str	r0, [lr]
   14574:	str	r0, [r4]
   14578:	str	r0, [r1]
   1457c:	ldr	r6, [r7]
   14580:	ldr	r5, [r7, #4]
   14584:	subs	r1, r6, #2
   14588:	sbcs	r1, r5, #0
   1458c:	bcc	145e4 <__assert_fail@plt+0x32c0>
   14590:	movw	r1, #53744	; 0xd1f0
   14594:	mov	r0, #0
   14598:	mov	r2, #16
   1459c:	mov	r9, #0
   145a0:	movt	r1, #2
   145a4:	bl	17998 <__assert_fail@plt+0x6674>
   145a8:	movw	lr, #54068	; 0xd334
   145ac:	mov	r2, #1
   145b0:	mov	r3, r0
   145b4:	str	r0, [r4]
   145b8:	movt	lr, #2
   145bc:	ldr	r1, [lr]
   145c0:	str	r2, [r3, r1, lsl #4]!
   145c4:	subs	r2, r6, #1
   145c8:	add	ip, r1, #1
   145cc:	sbc	r6, r5, #0
   145d0:	str	r9, [r3, #4]
   145d4:	str	r2, [r3, #8]
   145d8:	str	r6, [r3, #12]
   145dc:	str	ip, [lr]
   145e0:	b	145e8 <__assert_fail@plt+0x32c4>
   145e4:	mov	ip, #0
   145e8:	cmp	r8, #2
   145ec:	str	r7, [sp, #16]
   145f0:	bcc	14680 <__assert_fail@plt+0x335c>
   145f4:	add	r5, r7, #16
   145f8:	sub	r7, r8, #1
   145fc:	ldr	r6, [r5, #-8]
   14600:	ldr	r4, [r5, #-4]
   14604:	ldm	r5, {r2, r3}
   14608:	adds	r9, r6, #1
   1460c:	adc	r6, r4, #0
   14610:	eor	r1, r9, r2
   14614:	eor	r4, r6, r3
   14618:	orrs	r1, r1, r4
   1461c:	beq	14674 <__assert_fail@plt+0x3350>
   14620:	movw	r1, #53744	; 0xd1f0
   14624:	subs	sl, r2, #1
   14628:	movt	r1, #2
   1462c:	sbc	r4, r3, #0
   14630:	ldr	r2, [r1]
   14634:	cmp	ip, r2
   14638:	bne	1465c <__assert_fail@plt+0x3338>
   1463c:	mov	r2, #16
   14640:	bl	17998 <__assert_fail@plt+0x6674>
   14644:	movw	lr, #54068	; 0xd334
   14648:	movw	r1, #54064	; 0xd330
   1464c:	movt	lr, #2
   14650:	movt	r1, #2
   14654:	ldr	ip, [lr]
   14658:	str	r0, [r1]
   1465c:	mov	r1, r0
   14660:	str	r9, [r1, ip, lsl #4]!
   14664:	add	ip, ip, #1
   14668:	stmib	r1, {r6, sl}
   1466c:	str	r4, [r1, #12]
   14670:	str	ip, [lr]
   14674:	add	r5, r5, #16
   14678:	subs	r7, r7, #1
   1467c:	bne	145fc <__assert_fail@plt+0x32d8>
   14680:	ldr	r4, [sp, #16]
   14684:	mvn	r1, #0
   14688:	add	r2, r4, r8, lsl #4
   1468c:	ldrd	r2, [r2, #-8]
   14690:	eor	r7, r3, r1
   14694:	eor	r6, r2, r1
   14698:	orrs	r7, r6, r7
   1469c:	beq	14700 <__assert_fail@plt+0x33dc>
   146a0:	movw	r1, #53744	; 0xd1f0
   146a4:	adds	r6, r2, #1
   146a8:	movt	r1, #2
   146ac:	adc	r5, r3, #0
   146b0:	ldr	r1, [r1]
   146b4:	cmp	ip, r1
   146b8:	bne	146e4 <__assert_fail@plt+0x33c0>
   146bc:	movw	r1, #53744	; 0xd1f0
   146c0:	mov	r2, #16
   146c4:	movt	r1, #2
   146c8:	bl	17998 <__assert_fail@plt+0x6674>
   146cc:	movw	lr, #54068	; 0xd334
   146d0:	movw	r1, #54064	; 0xd330
   146d4:	movt	lr, #2
   146d8:	movt	r1, #2
   146dc:	ldr	ip, [lr]
   146e0:	str	r0, [r1]
   146e4:	str	r6, [r0, ip, lsl #4]!
   146e8:	mvn	r1, #0
   146ec:	str	r5, [r0, #4]
   146f0:	str	r1, [r0, #8]
   146f4:	str	r1, [r0, #12]
   146f8:	add	r0, ip, #1
   146fc:	str	r0, [lr]
   14700:	mov	r0, r4
   14704:	bl	14f24 <__assert_fail@plt+0x3c00>
   14708:	movw	lr, #54068	; 0xd334
   1470c:	movw	r4, #54064	; 0xd330
   14710:	movt	lr, #2
   14714:	movt	r4, #2
   14718:	ldr	r8, [lr]
   1471c:	ldr	r0, [r4]
   14720:	add	r1, r8, #1
   14724:	mov	r5, r4
   14728:	mov	r4, lr
   1472c:	str	r1, [lr]
   14730:	lsl	r1, r1, #4
   14734:	bl	17834 <__assert_fail@plt+0x6510>
   14738:	ldr	r1, [r4]
   1473c:	str	r0, [r5]
   14740:	add	r0, r0, r1, lsl #4
   14744:	mvn	r1, #0
   14748:	str	r1, [r0, #-16]
   1474c:	str	r1, [r0, #-12]
   14750:	str	r1, [r0, #-8]
   14754:	str	r1, [r0, #-4]
   14758:	sub	sp, fp, #28
   1475c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14760:	movw	r0, #48485	; 0xbd65
   14764:	movw	r1, #48440	; 0xbd38
   14768:	movt	r0, #1
   1476c:	movt	r1, #1
   14770:	b	147fc <__assert_fail@plt+0x34d8>
   14774:	movw	r1, #48571	; 0xbdbb
   14778:	mov	r0, r7
   1477c:	movt	r1, #1
   14780:	bl	1130c <strspn@plt>
   14784:	mov	r1, r0
   14788:	mov	r0, r7
   1478c:	bl	17cc4 <__assert_fail@plt+0x69a0>
   14790:	ldr	r2, [sp]
   14794:	movw	r1, #48582	; 0xbdc6
   14798:	mov	r4, r0
   1479c:	movw	r0, #48620	; 0xbdec
   147a0:	movt	r0, #1
   147a4:	movt	r1, #1
   147a8:	tst	r2, #4
   147ac:	mov	r2, #5
   147b0:	moveq	r1, r0
   147b4:	mov	r0, #0
   147b8:	bl	11114 <dcgettext@plt>
   147bc:	mov	r5, r0
   147c0:	mov	r0, r4
   147c4:	bl	16ffc <__assert_fail@plt+0x5cd8>
   147c8:	mov	r3, r0
   147cc:	mov	r0, #0
   147d0:	mov	r1, #0
   147d4:	mov	r2, r5
   147d8:	bl	11198 <error@plt>
   147dc:	mov	r0, r4
   147e0:	bl	14f24 <__assert_fail@plt+0x3c00>
   147e4:	mov	r0, #1
   147e8:	bl	11420 <__assert_fail@plt+0xfc>
   147ec:	movw	r0, #48420	; 0xbd24
   147f0:	movw	r1, #48388	; 0xbd04
   147f4:	movt	r0, #1
   147f8:	movt	r1, #1
   147fc:	ldr	r2, [sp]
   14800:	tst	r2, #4
   14804:	moveq	r1, r0
   14808:	b	14874 <__assert_fail@plt+0x3550>
   1480c:	movw	r1, #48512	; 0xbd80
   14810:	movt	r1, #1
   14814:	b	14874 <__assert_fail@plt+0x3550>
   14818:	ldr	r2, [sp]
   1481c:	movw	r0, #48684	; 0xbe2c
   14820:	movw	r1, #48649	; 0xbe09
   14824:	mov	r5, lr
   14828:	movt	r0, #1
   1482c:	movt	r1, #1
   14830:	tst	r2, #4
   14834:	mov	r2, #5
   14838:	moveq	r1, r0
   1483c:	mov	r0, #0
   14840:	bl	11114 <dcgettext@plt>
   14844:	mov	r4, r0
   14848:	mov	r0, r5
   1484c:	bl	16ffc <__assert_fail@plt+0x5cd8>
   14850:	mov	r3, r0
   14854:	mov	r0, #0
   14858:	mov	r1, #0
   1485c:	mov	r2, r4
   14860:	bl	11198 <error@plt>
   14864:	mov	r0, #1
   14868:	bl	11420 <__assert_fail@plt+0xfc>
   1486c:	movw	r1, #48546	; 0xbda2
   14870:	movt	r1, #1
   14874:	mov	r0, #0
   14878:	mov	r2, #5
   1487c:	bl	11114 <dcgettext@plt>
   14880:	mov	r2, r0
   14884:	mov	r0, #0
   14888:	mov	r1, #0
   1488c:	bl	11198 <error@plt>
   14890:	mov	r0, #1
   14894:	bl	11420 <__assert_fail@plt+0xfc>
   14898:	movw	r0, #48748	; 0xbe6c
   1489c:	movw	r1, #48707	; 0xbe43
   148a0:	movt	r0, #1
   148a4:	movt	r1, #1
   148a8:	b	147fc <__assert_fail@plt+0x34d8>
   148ac:	ldr	r2, [r0]
   148b0:	ldr	r1, [r1]
   148b4:	mov	r0, #0
   148b8:	cmp	r2, r1
   148bc:	movwgt	r0, #1
   148c0:	mvnlt	r0, #0
   148c4:	bx	lr
   148c8:	mov	r0, #1
   148cc:	b	11420 <__assert_fail@plt+0xfc>
   148d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148d4:	add	fp, sp, #28
   148d8:	sub	sp, sp, #12
   148dc:	mov	r4, r3
   148e0:	mov	r6, r2
   148e4:	mov	r5, r1
   148e8:	mov	sl, r0
   148ec:	bl	111f8 <strlen@plt>
   148f0:	ldr	r8, [r5]
   148f4:	cmp	r8, #0
   148f8:	beq	149b4 <__assert_fail@plt+0x3690>
   148fc:	mov	r7, r0
   14900:	mov	r0, #0
   14904:	add	r9, r5, #4
   14908:	mov	r5, #0
   1490c:	str	r6, [sp, #4]
   14910:	str	r0, [sp]
   14914:	mvn	r0, #0
   14918:	str	r0, [sp, #8]
   1491c:	mov	r0, r8
   14920:	mov	r1, sl
   14924:	mov	r2, r7
   14928:	bl	112e8 <strncmp@plt>
   1492c:	cmp	r0, #0
   14930:	bne	14988 <__assert_fail@plt+0x3664>
   14934:	mov	r0, r8
   14938:	bl	111f8 <strlen@plt>
   1493c:	cmp	r0, r7
   14940:	beq	149b8 <__assert_fail@plt+0x3694>
   14944:	ldr	r0, [sp, #8]
   14948:	cmn	r0, #1
   1494c:	beq	14984 <__assert_fail@plt+0x3660>
   14950:	ldr	r0, [sp, #4]
   14954:	cmp	r0, #0
   14958:	beq	14978 <__assert_fail@plt+0x3654>
   1495c:	ldr	r1, [sp, #8]
   14960:	mov	r2, r4
   14964:	mla	r0, r1, r4, r0
   14968:	mov	r1, r6
   1496c:	bl	11108 <memcmp@plt>
   14970:	cmp	r0, #0
   14974:	beq	14988 <__assert_fail@plt+0x3664>
   14978:	mov	r0, #1
   1497c:	str	r0, [sp]
   14980:	b	14988 <__assert_fail@plt+0x3664>
   14984:	str	r5, [sp, #8]
   14988:	ldr	r8, [r9, r5, lsl #2]
   1498c:	add	r6, r6, r4
   14990:	add	r5, r5, #1
   14994:	cmp	r8, #0
   14998:	bne	1491c <__assert_fail@plt+0x35f8>
   1499c:	ldr	r0, [sp]
   149a0:	tst	r0, #1
   149a4:	ldr	r0, [sp, #8]
   149a8:	mvnne	r0, #1
   149ac:	sub	sp, fp, #28
   149b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149b4:	mvn	r5, #0
   149b8:	mov	r0, r5
   149bc:	sub	sp, fp, #28
   149c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149c4:	push	{r4, r5, r6, r7, fp, lr}
   149c8:	add	fp, sp, #16
   149cc:	mov	r5, r0
   149d0:	ldr	r0, [r1]
   149d4:	mvn	r4, #0
   149d8:	cmp	r0, #0
   149dc:	beq	14a0c <__assert_fail@plt+0x36e8>
   149e0:	add	r7, r1, #4
   149e4:	mov	r6, #0
   149e8:	mov	r1, r5
   149ec:	bl	11090 <strcmp@plt>
   149f0:	cmp	r0, #0
   149f4:	moveq	r0, r6
   149f8:	popeq	{r4, r5, r6, r7, fp, pc}
   149fc:	ldr	r0, [r7, r6, lsl #2]
   14a00:	add	r6, r6, #1
   14a04:	cmp	r0, #0
   14a08:	bne	149e8 <__assert_fail@plt+0x36c4>
   14a0c:	mov	r0, r4
   14a10:	pop	{r4, r5, r6, r7, fp, pc}
   14a14:	push	{r4, r5, r6, sl, fp, lr}
   14a18:	add	fp, sp, #16
   14a1c:	sub	sp, sp, #8
   14a20:	mov	r4, r1
   14a24:	movw	r1, #48813	; 0xbead
   14a28:	mov	r5, r0
   14a2c:	movw	r0, #48786	; 0xbe92
   14a30:	cmn	r2, #1
   14a34:	mov	r2, #5
   14a38:	movt	r0, #1
   14a3c:	movt	r1, #1
   14a40:	moveq	r1, r0
   14a44:	mov	r0, #0
   14a48:	bl	11114 <dcgettext@plt>
   14a4c:	mov	r6, r0
   14a50:	mov	r0, #0
   14a54:	mov	r1, #8
   14a58:	mov	r2, r4
   14a5c:	bl	16a2c <__assert_fail@plt+0x5708>
   14a60:	mov	r4, r0
   14a64:	mov	r0, #1
   14a68:	mov	r1, r5
   14a6c:	bl	16fec <__assert_fail@plt+0x5cc8>
   14a70:	str	r0, [sp]
   14a74:	mov	r0, #0
   14a78:	mov	r1, #0
   14a7c:	mov	r2, r6
   14a80:	mov	r3, r4
   14a84:	bl	11198 <error@plt>
   14a88:	sub	sp, fp, #16
   14a8c:	pop	{r4, r5, r6, sl, fp, pc}
   14a90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a94:	add	fp, sp, #28
   14a98:	sub	sp, sp, #4
   14a9c:	mov	r5, r1
   14aa0:	movw	r1, #48842	; 0xbeca
   14aa4:	mov	sl, r2
   14aa8:	mov	r7, r0
   14aac:	mov	r0, #0
   14ab0:	mov	r2, #5
   14ab4:	mov	r8, #0
   14ab8:	movt	r1, #1
   14abc:	bl	11114 <dcgettext@plt>
   14ac0:	movw	r4, #53632	; 0xd180
   14ac4:	movt	r4, #2
   14ac8:	ldr	r1, [r4]
   14acc:	bl	1106c <fputs_unlocked@plt>
   14ad0:	ldr	r6, [r7]
   14ad4:	cmp	r6, #0
   14ad8:	beq	14b78 <__assert_fail@plt+0x3854>
   14adc:	add	r9, r7, #4
   14ae0:	mov	r7, #0
   14ae4:	str	sl, [sp]
   14ae8:	cmp	r8, #0
   14aec:	beq	14b08 <__assert_fail@plt+0x37e4>
   14af0:	mov	r0, r7
   14af4:	mov	r1, r5
   14af8:	mov	r2, sl
   14afc:	bl	11108 <memcmp@plt>
   14b00:	cmp	r0, #0
   14b04:	beq	14b34 <__assert_fail@plt+0x3810>
   14b08:	ldr	r7, [r4]
   14b0c:	mov	r0, r6
   14b10:	bl	16ffc <__assert_fail@plt+0x5cd8>
   14b14:	movw	r2, #48863	; 0xbedf
   14b18:	mov	r3, r0
   14b1c:	mov	r0, r7
   14b20:	mov	r1, #1
   14b24:	movt	r2, #1
   14b28:	bl	1124c <__fprintf_chk@plt>
   14b2c:	mov	r7, r5
   14b30:	b	14b64 <__assert_fail@plt+0x3840>
   14b34:	mov	sl, r9
   14b38:	ldr	r9, [r4]
   14b3c:	mov	r0, r6
   14b40:	bl	16ffc <__assert_fail@plt+0x5cd8>
   14b44:	mov	r3, r0
   14b48:	mov	r0, r9
   14b4c:	mov	r9, sl
   14b50:	ldr	sl, [sp]
   14b54:	movw	r2, #48871	; 0xbee7
   14b58:	mov	r1, #1
   14b5c:	movt	r2, #1
   14b60:	bl	1124c <__fprintf_chk@plt>
   14b64:	ldr	r6, [r9, -r8, lsl #2]
   14b68:	add	r5, r5, sl
   14b6c:	sub	r8, r8, #1
   14b70:	cmp	r6, #0
   14b74:	bne	14ae8 <__assert_fail@plt+0x37c4>
   14b78:	ldr	r0, [r4]
   14b7c:	ldr	r1, [r0, #20]
   14b80:	ldr	r2, [r0, #24]
   14b84:	cmp	r1, r2
   14b88:	addcc	r2, r1, #1
   14b8c:	strcc	r2, [r0, #20]
   14b90:	movcc	r0, #10
   14b94:	strbcc	r0, [r1]
   14b98:	subcc	sp, fp, #28
   14b9c:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ba0:	mov	r1, #10
   14ba4:	sub	sp, fp, #28
   14ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bac:	b	1127c <__overflow@plt>
   14bb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bb4:	add	fp, sp, #28
   14bb8:	sub	sp, sp, #20
   14bbc:	mov	r9, r0
   14bc0:	ldr	r0, [fp, #16]
   14bc4:	mov	r8, r3
   14bc8:	mov	sl, r2
   14bcc:	mov	r7, r1
   14bd0:	cmp	r0, #0
   14bd4:	beq	14cac <__assert_fail@plt+0x3988>
   14bd8:	mov	r0, r7
   14bdc:	str	r9, [sp, #8]
   14be0:	str	r8, [sp, #16]
   14be4:	bl	111f8 <strlen@plt>
   14be8:	ldr	r9, [sl]
   14bec:	cmp	r9, #0
   14bf0:	beq	14cec <__assert_fail@plt+0x39c8>
   14bf4:	str	sl, [sp, #4]
   14bf8:	add	r8, sl, #4
   14bfc:	ldr	sl, [sp, #16]
   14c00:	mov	r4, r0
   14c04:	mov	r0, #0
   14c08:	mvn	r6, #0
   14c0c:	mov	r5, #0
   14c10:	str	r0, [sp, #12]
   14c14:	mov	r0, r9
   14c18:	mov	r1, r7
   14c1c:	mov	r2, r4
   14c20:	bl	112e8 <strncmp@plt>
   14c24:	cmp	r0, #0
   14c28:	bne	14c78 <__assert_fail@plt+0x3954>
   14c2c:	mov	r0, r9
   14c30:	bl	111f8 <strlen@plt>
   14c34:	cmp	r0, r4
   14c38:	beq	14cf8 <__assert_fail@plt+0x39d4>
   14c3c:	cmn	r6, #1
   14c40:	beq	14c74 <__assert_fail@plt+0x3950>
   14c44:	ldr	r0, [sp, #16]
   14c48:	cmp	r0, #0
   14c4c:	beq	14c68 <__assert_fail@plt+0x3944>
   14c50:	ldr	r2, [fp, #8]
   14c54:	mov	r1, sl
   14c58:	mla	r0, r6, r2, r0
   14c5c:	bl	11108 <memcmp@plt>
   14c60:	cmp	r0, #0
   14c64:	beq	14c78 <__assert_fail@plt+0x3954>
   14c68:	mov	r0, #1
   14c6c:	str	r0, [sp, #12]
   14c70:	b	14c78 <__assert_fail@plt+0x3954>
   14c74:	mov	r6, r5
   14c78:	ldr	r9, [r8, r5, lsl #2]
   14c7c:	ldr	r0, [fp, #8]
   14c80:	add	r5, r5, #1
   14c84:	add	sl, sl, r0
   14c88:	cmp	r9, #0
   14c8c:	bne	14c14 <__assert_fail@plt+0x38f0>
   14c90:	ldr	r0, [sp, #12]
   14c94:	ldr	r8, [sp, #16]
   14c98:	ldr	sl, [sp, #4]
   14c9c:	ldr	r9, [sp, #8]
   14ca0:	tst	r0, #1
   14ca4:	beq	14d08 <__assert_fail@plt+0x39e4>
   14ca8:	b	14d14 <__assert_fail@plt+0x39f0>
   14cac:	ldr	r0, [sl]
   14cb0:	movw	r4, #48786	; 0xbe92
   14cb4:	movt	r4, #1
   14cb8:	cmp	r0, #0
   14cbc:	beq	14d28 <__assert_fail@plt+0x3a04>
   14cc0:	add	r5, sl, #4
   14cc4:	mov	r6, #0
   14cc8:	mov	r1, r7
   14ccc:	bl	11090 <strcmp@plt>
   14cd0:	cmp	r0, #0
   14cd4:	beq	14d08 <__assert_fail@plt+0x39e4>
   14cd8:	ldr	r0, [r5, r6, lsl #2]
   14cdc:	add	r6, r6, #1
   14ce0:	cmp	r0, #0
   14ce4:	bne	14cc8 <__assert_fail@plt+0x39a4>
   14ce8:	b	14d28 <__assert_fail@plt+0x3a04>
   14cec:	ldr	r8, [sp, #16]
   14cf0:	ldr	r9, [sp, #8]
   14cf4:	b	14d20 <__assert_fail@plt+0x39fc>
   14cf8:	ldr	r8, [sp, #16]
   14cfc:	ldr	sl, [sp, #4]
   14d00:	ldr	r9, [sp, #8]
   14d04:	mov	r6, r5
   14d08:	cmn	r6, #1
   14d0c:	bgt	14d90 <__assert_fail@plt+0x3a6c>
   14d10:	beq	14d20 <__assert_fail@plt+0x39fc>
   14d14:	movw	r4, #48813	; 0xbead
   14d18:	movt	r4, #1
   14d1c:	b	14d28 <__assert_fail@plt+0x3a04>
   14d20:	movw	r4, #48786	; 0xbe92
   14d24:	movt	r4, #1
   14d28:	ldr	r6, [fp, #12]
   14d2c:	mov	r0, #0
   14d30:	mov	r1, r4
   14d34:	mov	r2, #5
   14d38:	bl	11114 <dcgettext@plt>
   14d3c:	mov	r4, r0
   14d40:	mov	r0, #0
   14d44:	mov	r1, #8
   14d48:	mov	r2, r7
   14d4c:	bl	16a2c <__assert_fail@plt+0x5708>
   14d50:	mov	r5, r0
   14d54:	mov	r0, #1
   14d58:	mov	r1, r9
   14d5c:	bl	16fec <__assert_fail@plt+0x5cc8>
   14d60:	str	r0, [sp]
   14d64:	mov	r0, #0
   14d68:	mov	r1, #0
   14d6c:	mov	r2, r4
   14d70:	mov	r3, r5
   14d74:	bl	11198 <error@plt>
   14d78:	ldr	r2, [fp, #8]
   14d7c:	mov	r0, sl
   14d80:	mov	r1, r8
   14d84:	bl	14a90 <__assert_fail@plt+0x376c>
   14d88:	blx	r6
   14d8c:	mvn	r6, #0
   14d90:	mov	r0, r6
   14d94:	sub	sp, fp, #28
   14d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d9c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14da0:	add	fp, sp, #24
   14da4:	ldr	r6, [r1]
   14da8:	cmp	r6, #0
   14dac:	beq	14e10 <__assert_fail@plt+0x3aec>
   14db0:	mov	r8, r1
   14db4:	mov	r7, r2
   14db8:	mov	r1, r2
   14dbc:	mov	r2, r3
   14dc0:	mov	r4, r3
   14dc4:	mov	r9, r0
   14dc8:	bl	11108 <memcmp@plt>
   14dcc:	cmp	r0, #0
   14dd0:	beq	14e08 <__assert_fail@plt+0x3ae4>
   14dd4:	add	r7, r7, r4
   14dd8:	add	r5, r8, #4
   14ddc:	ldr	r6, [r5]
   14de0:	cmp	r6, #0
   14de4:	beq	14e10 <__assert_fail@plt+0x3aec>
   14de8:	mov	r0, r9
   14dec:	mov	r1, r7
   14df0:	mov	r2, r4
   14df4:	bl	11108 <memcmp@plt>
   14df8:	add	r7, r7, r4
   14dfc:	add	r5, r5, #4
   14e00:	cmp	r0, #0
   14e04:	bne	14ddc <__assert_fail@plt+0x3ab8>
   14e08:	mov	r0, r6
   14e0c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14e10:	mov	r6, #0
   14e14:	mov	r0, r6
   14e18:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14e1c:	movw	r1, #53748	; 0xd1f4
   14e20:	movt	r1, #2
   14e24:	str	r0, [r1]
   14e28:	bx	lr
   14e2c:	movw	r1, #53752	; 0xd1f8
   14e30:	movt	r1, #2
   14e34:	strb	r0, [r1]
   14e38:	bx	lr
   14e3c:	push	{r4, r5, r6, sl, fp, lr}
   14e40:	add	fp, sp, #16
   14e44:	sub	sp, sp, #8
   14e48:	movw	r0, #53644	; 0xd18c
   14e4c:	movt	r0, #2
   14e50:	ldr	r0, [r0]
   14e54:	bl	19600 <__assert_fail@plt+0x82dc>
   14e58:	cmp	r0, #0
   14e5c:	beq	14e84 <__assert_fail@plt+0x3b60>
   14e60:	movw	r0, #53752	; 0xd1f8
   14e64:	movt	r0, #2
   14e68:	ldrb	r0, [r0]
   14e6c:	cmp	r0, #0
   14e70:	beq	14ea4 <__assert_fail@plt+0x3b80>
   14e74:	bl	11210 <__errno_location@plt>
   14e78:	ldr	r0, [r0]
   14e7c:	cmp	r0, #32
   14e80:	bne	14ea4 <__assert_fail@plt+0x3b80>
   14e84:	movw	r0, #53632	; 0xd180
   14e88:	movt	r0, #2
   14e8c:	ldr	r0, [r0]
   14e90:	bl	19600 <__assert_fail@plt+0x82dc>
   14e94:	cmp	r0, #0
   14e98:	subeq	sp, fp, #16
   14e9c:	popeq	{r4, r5, r6, sl, fp, pc}
   14ea0:	b	14f14 <__assert_fail@plt+0x3bf0>
   14ea4:	movw	r1, #48876	; 0xbeec
   14ea8:	mov	r0, #0
   14eac:	mov	r2, #5
   14eb0:	movt	r1, #1
   14eb4:	bl	11114 <dcgettext@plt>
   14eb8:	mov	r4, r0
   14ebc:	movw	r0, #53748	; 0xd1f4
   14ec0:	movt	r0, #2
   14ec4:	ldr	r6, [r0]
   14ec8:	bl	11210 <__errno_location@plt>
   14ecc:	ldr	r5, [r0]
   14ed0:	cmp	r6, #0
   14ed4:	bne	14ef0 <__assert_fail@plt+0x3bcc>
   14ed8:	movw	r2, #48873	; 0xbee9
   14edc:	mov	r0, #0
   14ee0:	mov	r1, r5
   14ee4:	mov	r3, r4
   14ee8:	movt	r2, #1
   14eec:	b	14f10 <__assert_fail@plt+0x3bec>
   14ef0:	mov	r0, r6
   14ef4:	bl	16c74 <__assert_fail@plt+0x5950>
   14ef8:	movw	r2, #46823	; 0xb6e7
   14efc:	mov	r3, r0
   14f00:	str	r4, [sp]
   14f04:	mov	r0, #0
   14f08:	mov	r1, r5
   14f0c:	movt	r2, #1
   14f10:	bl	11198 <error@plt>
   14f14:	movw	r0, #53548	; 0xd12c
   14f18:	movt	r0, #2
   14f1c:	ldr	r0, [r0]
   14f20:	bl	110d8 <_exit@plt>
   14f24:	push	{r4, r5, r6, sl, fp, lr}
   14f28:	add	fp, sp, #16
   14f2c:	mov	r4, r0
   14f30:	bl	11210 <__errno_location@plt>
   14f34:	ldr	r6, [r0]
   14f38:	mov	r5, r0
   14f3c:	mov	r0, r4
   14f40:	bl	110cc <free@plt>
   14f44:	str	r6, [r5]
   14f48:	pop	{r4, r5, r6, sl, fp, pc}
   14f4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f50:	add	fp, sp, #28
   14f54:	sub	sp, sp, #20
   14f58:	mov	r5, r3
   14f5c:	str	r2, [sp, #12]
   14f60:	str	r1, [sp, #16]
   14f64:	mov	r4, r0
   14f68:	bl	111f8 <strlen@plt>
   14f6c:	ldr	r3, [fp, #12]
   14f70:	mov	r8, r0
   14f74:	mov	sl, #0
   14f78:	tst	r3, #2
   14f7c:	bne	15050 <__assert_fail@plt+0x3d2c>
   14f80:	bl	1115c <__ctype_get_mb_cur_max@plt>
   14f84:	mov	r6, #0
   14f88:	cmp	r0, #2
   14f8c:	bcc	15060 <__assert_fail@plt+0x3d3c>
   14f90:	mov	r0, #0
   14f94:	mov	r1, r4
   14f98:	mov	r2, #0
   14f9c:	bl	112b8 <mbstowcs@plt>
   14fa0:	cmn	r0, #1
   14fa4:	beq	151fc <__assert_fail@plt+0x3ed8>
   14fa8:	add	r9, r0, #1
   14fac:	mov	r7, r0
   14fb0:	lsl	r0, r9, #2
   14fb4:	bl	1957c <__assert_fail@plt+0x8258>
   14fb8:	cmp	r0, #0
   14fbc:	beq	151f8 <__assert_fail@plt+0x3ed4>
   14fc0:	mov	r1, r4
   14fc4:	mov	r2, r9
   14fc8:	mov	r6, r0
   14fcc:	bl	112b8 <mbstowcs@plt>
   14fd0:	cmp	r0, #0
   14fd4:	beq	1521c <__assert_fail@plt+0x3ef8>
   14fd8:	str	r4, [sp, #4]
   14fdc:	mov	r4, #0
   14fe0:	mov	r1, r6
   14fe4:	str	r6, [sp]
   14fe8:	str	r4, [r6, r7, lsl #2]
   14fec:	ldr	r0, [r6]
   14ff0:	cmp	r0, #0
   14ff4:	beq	1522c <__assert_fail@plt+0x3f08>
   14ff8:	add	r6, r1, #4
   14ffc:	movw	r7, #65533	; 0xfffd
   15000:	bl	11138 <iswprint@plt>
   15004:	cmp	r0, #0
   15008:	streq	r7, [r6, #-4]
   1500c:	moveq	r4, #1
   15010:	ldr	r0, [r6], #4
   15014:	cmp	r0, #0
   15018:	bne	15000 <__assert_fail@plt+0x3cdc>
   1501c:	ldr	r6, [sp]
   15020:	mov	r1, r9
   15024:	mov	r0, r6
   15028:	bl	11294 <wcswidth@plt>
   1502c:	mov	r7, r0
   15030:	tst	r4, #1
   15034:	beq	1523c <__assert_fail@plt+0x3f18>
   15038:	mov	r0, #0
   1503c:	mov	r1, r6
   15040:	mov	r2, #0
   15044:	bl	1118c <wcstombs@plt>
   15048:	ldr	r4, [sp, #4]
   1504c:	b	15254 <__assert_fail@plt+0x3f30>
   15050:	mov	r6, #0
   15054:	mov	r2, #0
   15058:	mov	r7, r8
   1505c:	b	1506c <__assert_fail@plt+0x3d48>
   15060:	mov	r2, #0
   15064:	mov	r7, r8
   15068:	ldr	r3, [fp, #12]
   1506c:	ldr	r0, [r5]
   15070:	str	r4, [sp, #4]
   15074:	ldr	r4, [fp, #8]
   15078:	mov	r1, r7
   1507c:	str	r6, [sp, #8]
   15080:	cmp	r7, r0
   15084:	movhi	r1, r0
   15088:	movhi	r8, r0
   1508c:	cmp	r0, r7
   15090:	subhi	sl, r0, r1
   15094:	cmp	r4, #0
   15098:	str	r1, [r5]
   1509c:	beq	150b4 <__assert_fail@plt+0x3d90>
   150a0:	cmp	r4, #1
   150a4:	bne	150bc <__assert_fail@plt+0x3d98>
   150a8:	mov	r9, #0
   150ac:	mov	r4, sl
   150b0:	b	150c8 <__assert_fail@plt+0x3da4>
   150b4:	mov	r9, sl
   150b8:	b	150c8 <__assert_fail@plt+0x3da4>
   150bc:	and	r0, sl, #1
   150c0:	lsr	r9, sl, #1
   150c4:	add	r4, r0, sl, lsr #1
   150c8:	ldr	r5, [sp, #12]
   150cc:	ldr	r1, [sp, #16]
   150d0:	tst	r3, #8
   150d4:	mov	r6, #0
   150d8:	mov	r7, #0
   150dc:	moveq	r6, r9
   150e0:	tst	r3, #4
   150e4:	moveq	r7, r4
   150e8:	cmp	r5, #0
   150ec:	beq	151d0 <__assert_fail@plt+0x3eac>
   150f0:	add	r0, r1, r5
   150f4:	str	r2, [sp]
   150f8:	sub	sl, r0, #1
   150fc:	cmp	sl, r1
   15100:	bls	1514c <__assert_fail@plt+0x3e28>
   15104:	cmp	r7, #0
   15108:	mov	r0, r1
   1510c:	beq	15150 <__assert_fail@plt+0x3e2c>
   15110:	sub	r0, r1, sl
   15114:	rsb	r1, r7, #0
   15118:	cmp	r0, r1
   1511c:	movcc	r0, r1
   15120:	mov	r1, #32
   15124:	rsb	r2, r0, #0
   15128:	ldr	r0, [sp, #16]
   1512c:	bl	11228 <memset@plt>
   15130:	rsb	r0, r4, #0
   15134:	rsb	r1, r5, #1
   15138:	cmp	r1, r0
   1513c:	movcc	r1, r0
   15140:	ldr	r0, [sp, #16]
   15144:	sub	r0, r0, r1
   15148:	b	15150 <__assert_fail@plt+0x3e2c>
   1514c:	mov	r0, r1
   15150:	ldr	r1, [sp, #4]
   15154:	sub	r2, sl, r0
   15158:	mov	r5, #0
   1515c:	mvn	r3, #0
   15160:	cmp	r8, r2
   15164:	strb	r5, [r0]
   15168:	movcc	r2, r8
   1516c:	bl	11318 <__mempcpy_chk@plt>
   15170:	mov	r4, r0
   15174:	cmp	r6, #0
   15178:	beq	151c8 <__assert_fail@plt+0x3ea4>
   1517c:	cmp	r4, sl
   15180:	bcs	151c8 <__assert_fail@plt+0x3ea4>
   15184:	sub	r0, r4, sl
   15188:	rsb	r1, r6, #0
   1518c:	cmp	r0, r1
   15190:	movcc	r0, r1
   15194:	mov	r1, #32
   15198:	rsb	r2, r0, #0
   1519c:	mov	r0, r4
   151a0:	bl	11228 <memset@plt>
   151a4:	ldr	r0, [sp, #16]
   151a8:	ldr	r1, [sp, #12]
   151ac:	rsb	r0, r0, #1
   151b0:	sub	r0, r0, r1
   151b4:	rsb	r1, r9, #0
   151b8:	add	r0, r4, r0
   151bc:	cmp	r1, r0
   151c0:	movhi	r0, r1
   151c4:	sub	r4, r4, r0
   151c8:	ldr	r2, [sp]
   151cc:	strb	r5, [r4]
   151d0:	add	r0, r7, r8
   151d4:	add	r9, r0, r6
   151d8:	ldr	r6, [sp, #8]
   151dc:	mov	r0, r2
   151e0:	bl	14f24 <__assert_fail@plt+0x3c00>
   151e4:	mov	r0, r6
   151e8:	bl	14f24 <__assert_fail@plt+0x3c00>
   151ec:	mov	r0, r9
   151f0:	sub	sp, fp, #28
   151f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151f8:	mov	r6, #0
   151fc:	ldr	r3, [fp, #12]
   15200:	mvn	r9, #0
   15204:	mov	r2, #0
   15208:	mov	r7, r8
   1520c:	mov	r0, #0
   15210:	tst	r3, #1
   15214:	bne	1506c <__assert_fail@plt+0x3d48>
   15218:	b	151e0 <__assert_fail@plt+0x3ebc>
   1521c:	mov	r2, r6
   15220:	mov	r7, r8
   15224:	mov	r6, #0
   15228:	b	15068 <__assert_fail@plt+0x3d44>
   1522c:	mov	r0, r1
   15230:	mov	r1, r9
   15234:	bl	11294 <wcswidth@plt>
   15238:	mov	r7, r0
   1523c:	ldr	r0, [r5]
   15240:	ldr	r4, [sp, #4]
   15244:	mov	r6, #0
   15248:	cmp	r7, r0
   1524c:	mov	r0, r8
   15250:	bls	152c0 <__assert_fail@plt+0x3f9c>
   15254:	add	r6, r0, #1
   15258:	mov	r0, r6
   1525c:	bl	1957c <__assert_fail@plt+0x8258>
   15260:	cmp	r0, #0
   15264:	beq	152c8 <__assert_fail@plt+0x3fa4>
   15268:	ldr	r1, [sp]
   1526c:	str	r0, [sp, #8]
   15270:	str	r6, [sp, #4]
   15274:	ldr	r0, [r1]
   15278:	cmp	r0, #0
   1527c:	beq	152e8 <__assert_fail@plt+0x3fc4>
   15280:	ldr	r4, [r5]
   15284:	mov	r8, #0
   15288:	movw	r9, #65533	; 0xfffd
   1528c:	mov	r6, r1
   15290:	bl	110b4 <wcwidth@plt>
   15294:	cmn	r0, #1
   15298:	moveq	r0, #1
   1529c:	streq	r9, [r6]
   152a0:	add	r7, r0, r8
   152a4:	cmp	r7, r4
   152a8:	bhi	152f4 <__assert_fail@plt+0x3fd0>
   152ac:	ldr	r0, [r6, #4]!
   152b0:	mov	r8, r7
   152b4:	cmp	r0, #0
   152b8:	bne	15290 <__assert_fail@plt+0x3f6c>
   152bc:	b	152f8 <__assert_fail@plt+0x3fd4>
   152c0:	ldr	r2, [sp]
   152c4:	b	15068 <__assert_fail@plt+0x3d44>
   152c8:	ldr	r3, [fp, #12]
   152cc:	ldr	r2, [sp]
   152d0:	mov	r6, #0
   152d4:	mvn	r9, #0
   152d8:	tst	r3, #1
   152dc:	mov	r0, r2
   152e0:	bne	1506c <__assert_fail@plt+0x3d48>
   152e4:	b	151e0 <__assert_fail@plt+0x3ebc>
   152e8:	mov	r6, r1
   152ec:	mov	r7, #0
   152f0:	b	152f8 <__assert_fail@plt+0x3fd4>
   152f4:	mov	r7, r8
   152f8:	mov	r0, #0
   152fc:	ldr	r4, [sp]
   15300:	ldr	r2, [sp, #4]
   15304:	str	r0, [r6]
   15308:	ldr	r6, [sp, #8]
   1530c:	mov	r1, r4
   15310:	mov	r0, r6
   15314:	bl	1118c <wcstombs@plt>
   15318:	mov	r2, r4
   1531c:	mov	r8, r0
   15320:	mov	r4, r6
   15324:	b	15068 <__assert_fail@plt+0x3d44>
   15328:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1532c:	add	fp, sp, #28
   15330:	sub	sp, sp, #12
   15334:	ldr	r8, [r1]
   15338:	mov	sl, r0
   1533c:	mov	r9, r2
   15340:	mov	r6, r1
   15344:	mov	r7, #0
   15348:	str	r3, [sp, #8]
   1534c:	mov	r0, r8
   15350:	mov	r5, r8
   15354:	cmp	r0, r5
   15358:	bcc	153bc <__assert_fail@plt+0x4098>
   1535c:	add	r5, r0, #1
   15360:	mov	r0, r7
   15364:	mov	r1, r5
   15368:	bl	195ac <__assert_fail@plt+0x8288>
   1536c:	cmp	r0, #0
   15370:	beq	153b0 <__assert_fail@plt+0x408c>
   15374:	mov	r4, r0
   15378:	ldr	r0, [sp, #8]
   1537c:	str	r8, [r6]
   15380:	mov	r2, r5
   15384:	mov	r3, r6
   15388:	str	r9, [sp]
   1538c:	mov	r1, r4
   15390:	str	r0, [sp, #4]
   15394:	mov	r0, sl
   15398:	bl	14f4c <__assert_fail@plt+0x3c28>
   1539c:	cmn	r0, #1
   153a0:	mov	r7, r4
   153a4:	bne	15354 <__assert_fail@plt+0x4030>
   153a8:	mov	r0, r4
   153ac:	b	153b4 <__assert_fail@plt+0x4090>
   153b0:	mov	r0, r7
   153b4:	bl	14f24 <__assert_fail@plt+0x3c00>
   153b8:	mov	r7, #0
   153bc:	mov	r0, r7
   153c0:	sub	sp, fp, #28
   153c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153c8:	push	{r4, r5, fp, lr}
   153cc:	add	fp, sp, #8
   153d0:	cmp	r0, #0
   153d4:	beq	15468 <__assert_fail@plt+0x4144>
   153d8:	mov	r1, #47	; 0x2f
   153dc:	mov	r4, r0
   153e0:	bl	112a0 <strrchr@plt>
   153e4:	cmp	r0, #0
   153e8:	mov	r5, r4
   153ec:	addne	r5, r0, #1
   153f0:	sub	r0, r5, r4
   153f4:	cmp	r0, #7
   153f8:	blt	1544c <__assert_fail@plt+0x4128>
   153fc:	movw	r1, #48944	; 0xbf30
   15400:	sub	r0, r5, #7
   15404:	mov	r2, #7
   15408:	movt	r1, #1
   1540c:	bl	112e8 <strncmp@plt>
   15410:	cmp	r0, #0
   15414:	bne	1544c <__assert_fail@plt+0x4128>
   15418:	movw	r1, #48952	; 0xbf38
   1541c:	mov	r0, r5
   15420:	mov	r2, #3
   15424:	movt	r1, #1
   15428:	bl	112e8 <strncmp@plt>
   1542c:	cmp	r0, #0
   15430:	beq	1543c <__assert_fail@plt+0x4118>
   15434:	mov	r4, r5
   15438:	b	1544c <__assert_fail@plt+0x4128>
   1543c:	movw	r0, #53616	; 0xd170
   15440:	add	r4, r5, #3
   15444:	movt	r0, #2
   15448:	str	r4, [r0]
   1544c:	movw	r0, #53620	; 0xd174
   15450:	movt	r0, #2
   15454:	str	r4, [r0]
   15458:	movw	r0, #53756	; 0xd1fc
   1545c:	movt	r0, #2
   15460:	str	r4, [r0]
   15464:	pop	{r4, r5, fp, pc}
   15468:	movw	r0, #53632	; 0xd180
   1546c:	mov	r1, #55	; 0x37
   15470:	mov	r2, #1
   15474:	movt	r0, #2
   15478:	ldr	r3, [r0]
   1547c:	movw	r0, #48888	; 0xbef8
   15480:	movt	r0, #1
   15484:	bl	11144 <fwrite@plt>
   15488:	bl	112f4 <abort@plt>
   1548c:	push	{r4, r5, r6, sl, fp, lr}
   15490:	add	fp, sp, #16
   15494:	mov	r4, r0
   15498:	movw	r0, #53760	; 0xd200
   1549c:	movt	r0, #2
   154a0:	cmp	r4, #0
   154a4:	moveq	r4, r0
   154a8:	bl	11210 <__errno_location@plt>
   154ac:	ldr	r6, [r0]
   154b0:	mov	r5, r0
   154b4:	mov	r0, r4
   154b8:	mov	r1, #48	; 0x30
   154bc:	bl	17c4c <__assert_fail@plt+0x6928>
   154c0:	str	r6, [r5]
   154c4:	pop	{r4, r5, r6, sl, fp, pc}
   154c8:	movw	r1, #53760	; 0xd200
   154cc:	cmp	r0, #0
   154d0:	movt	r1, #2
   154d4:	movne	r1, r0
   154d8:	ldr	r0, [r1]
   154dc:	bx	lr
   154e0:	movw	r2, #53760	; 0xd200
   154e4:	cmp	r0, #0
   154e8:	movt	r2, #2
   154ec:	movne	r2, r0
   154f0:	str	r1, [r2]
   154f4:	bx	lr
   154f8:	movw	r3, #53760	; 0xd200
   154fc:	cmp	r0, #0
   15500:	movt	r3, #2
   15504:	movne	r3, r0
   15508:	ubfx	r0, r1, #5, #3
   1550c:	and	r1, r1, #31
   15510:	add	r0, r3, r0, lsl #2
   15514:	ldr	r3, [r0, #8]
   15518:	eor	r2, r2, r3, lsr r1
   1551c:	and	r2, r2, #1
   15520:	eor	r2, r3, r2, lsl r1
   15524:	str	r2, [r0, #8]
   15528:	mov	r0, #1
   1552c:	and	r0, r0, r3, lsr r1
   15530:	bx	lr
   15534:	movw	r2, #53760	; 0xd200
   15538:	cmp	r0, #0
   1553c:	movt	r2, #2
   15540:	movne	r2, r0
   15544:	ldr	r0, [r2, #4]
   15548:	str	r1, [r2, #4]
   1554c:	bx	lr
   15550:	movw	r3, #53760	; 0xd200
   15554:	cmp	r0, #0
   15558:	movt	r3, #2
   1555c:	movne	r3, r0
   15560:	cmp	r1, #0
   15564:	mov	r0, #10
   15568:	cmpne	r2, #0
   1556c:	str	r0, [r3]
   15570:	bne	15580 <__assert_fail@plt+0x425c>
   15574:	push	{fp, lr}
   15578:	mov	fp, sp
   1557c:	bl	112f4 <abort@plt>
   15580:	str	r1, [r3, #40]	; 0x28
   15584:	str	r2, [r3, #44]	; 0x2c
   15588:	bx	lr
   1558c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15590:	add	fp, sp, #28
   15594:	sub	sp, sp, #20
   15598:	mov	r7, r0
   1559c:	ldr	r0, [fp, #8]
   155a0:	movw	r5, #53760	; 0xd200
   155a4:	mov	r8, r3
   155a8:	mov	r9, r2
   155ac:	mov	sl, r1
   155b0:	movt	r5, #2
   155b4:	cmp	r0, #0
   155b8:	movne	r5, r0
   155bc:	bl	11210 <__errno_location@plt>
   155c0:	mov	r4, r0
   155c4:	ldm	r5, {r0, r1}
   155c8:	ldr	r2, [r5, #40]	; 0x28
   155cc:	ldr	r3, [r5, #44]	; 0x2c
   155d0:	add	r5, r5, #8
   155d4:	ldr	r6, [r4]
   155d8:	stm	sp, {r0, r1, r5}
   155dc:	str	r2, [sp, #12]
   155e0:	str	r3, [sp, #16]
   155e4:	mov	r0, r7
   155e8:	mov	r1, sl
   155ec:	mov	r2, r9
   155f0:	mov	r3, r8
   155f4:	bl	15604 <__assert_fail@plt+0x42e0>
   155f8:	str	r6, [r4]
   155fc:	sub	sp, fp, #28
   15600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15604:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15608:	add	fp, sp, #28
   1560c:	sub	sp, sp, #156	; 0x9c
   15610:	str	r0, [sp, #80]	; 0x50
   15614:	ldr	r0, [fp, #12]
   15618:	mov	r6, r1
   1561c:	mov	r9, r3
   15620:	str	r2, [fp, #-84]	; 0xffffffac
   15624:	and	r1, r0, #4
   15628:	str	r1, [sp, #32]
   1562c:	and	r1, r0, #1
   15630:	str	r1, [sp, #36]	; 0x24
   15634:	ubfx	r4, r0, #1, #1
   15638:	bl	1115c <__ctype_get_mb_cur_max@plt>
   1563c:	str	r0, [sp, #40]	; 0x28
   15640:	ldr	r0, [fp, #24]
   15644:	ldr	r7, [fp, #8]
   15648:	mov	r1, #0
   1564c:	mov	r5, #1
   15650:	str	r1, [fp, #-56]	; 0xffffffc8
   15654:	mov	r1, #0
   15658:	str	r1, [sp, #60]	; 0x3c
   1565c:	str	r0, [sp, #76]	; 0x4c
   15660:	ldr	r0, [fp, #20]
   15664:	str	r0, [sp, #72]	; 0x48
   15668:	mov	r0, #0
   1566c:	str	r0, [sp, #56]	; 0x38
   15670:	mov	r0, #0
   15674:	str	r0, [sp, #92]	; 0x5c
   15678:	mov	r0, #0
   1567c:	str	r0, [fp, #-76]	; 0xffffffb4
   15680:	mov	r0, #0
   15684:	cmp	r7, #10
   15688:	bhi	16608 <__assert_fail@plt+0x52e4>
   1568c:	add	r1, pc, #28
   15690:	mov	sl, r6
   15694:	ldr	r6, [sp, #80]	; 0x50
   15698:	ldr	ip, [fp, #-84]	; 0xffffffac
   1569c:	mov	r8, #0
   156a0:	mov	r2, #1
   156a4:	mov	r3, #0
   156a8:	mov	lr, r9
   156ac:	ldr	pc, [r1, r7, lsl #2]
   156b0:	muleq	r1, r4, r7
   156b4:	andeq	r5, r1, r0, asr #15
   156b8:	andeq	r5, r1, r4, lsl #15
   156bc:	andeq	r5, r1, ip, ror r7
   156c0:			; <UNDEFINED> instruction: 0x000157b4
   156c4:	andeq	r5, r1, r8, lsl #16
   156c8:	andeq	r5, r1, r4, lsr #15
   156cc:	andeq	r5, r1, r4, ror #16
   156d0:	ldrdeq	r5, [r1], -ip
   156d4:	ldrdeq	r5, [r1], -ip
   156d8:	andeq	r5, r1, r4, lsl #14
   156dc:	movw	r0, #49034	; 0xbf8a
   156e0:	mov	r1, r7
   156e4:	movt	r0, #1
   156e8:	bl	17014 <__assert_fail@plt+0x5cf0>
   156ec:	str	r0, [sp, #72]	; 0x48
   156f0:	movw	r0, #49036	; 0xbf8c
   156f4:	mov	r1, r7
   156f8:	movt	r0, #1
   156fc:	bl	17014 <__assert_fail@plt+0x5cf0>
   15700:	str	r0, [sp, #76]	; 0x4c
   15704:	str	r5, [fp, #-48]	; 0xffffffd0
   15708:	mov	r8, #0
   1570c:	mov	r5, r7
   15710:	tst	r4, #1
   15714:	bne	1574c <__assert_fail@plt+0x4428>
   15718:	ldr	r0, [sp, #72]	; 0x48
   1571c:	ldrb	r0, [r0]
   15720:	cmp	r0, #0
   15724:	beq	1574c <__assert_fail@plt+0x4428>
   15728:	ldr	r1, [sp, #72]	; 0x48
   1572c:	mov	r8, #0
   15730:	add	r1, r1, #1
   15734:	cmp	r8, sl
   15738:	strbcc	r0, [r6, r8]
   1573c:	ldrb	r0, [r1, r8]
   15740:	add	r8, r8, #1
   15744:	cmp	r0, #0
   15748:	bne	15734 <__assert_fail@plt+0x4410>
   1574c:	ldr	r7, [sp, #76]	; 0x4c
   15750:	mov	r0, r7
   15754:	bl	111f8 <strlen@plt>
   15758:	str	r7, [sp, #92]	; 0x5c
   1575c:	mov	r7, r5
   15760:	ldr	ip, [fp, #-84]	; 0xffffffac
   15764:	ldr	r5, [fp, #-48]	; 0xffffffd0
   15768:	str	r0, [fp, #-76]	; 0xffffffb4
   1576c:	mov	r2, #1
   15770:	mov	r3, r4
   15774:	mov	lr, r9
   15778:	b	15864 <__assert_fail@plt+0x4540>
   1577c:	mov	r0, #1
   15780:	b	157c0 <__assert_fail@plt+0x449c>
   15784:	tst	r4, #1
   15788:	bne	157c0 <__assert_fail@plt+0x449c>
   1578c:	mov	r2, r0
   15790:	b	157e8 <__assert_fail@plt+0x44c4>
   15794:	mov	r7, #0
   15798:	mov	r8, #0
   1579c:	mov	r2, r0
   157a0:	b	15860 <__assert_fail@plt+0x453c>
   157a4:	mov	r0, #1
   157a8:	mov	r8, #0
   157ac:	mov	r7, #5
   157b0:	b	1581c <__assert_fail@plt+0x44f8>
   157b4:	mov	r2, #1
   157b8:	tst	r4, #1
   157bc:	beq	157e8 <__assert_fail@plt+0x44c4>
   157c0:	mov	r1, #1
   157c4:	mov	r8, #0
   157c8:	mov	r7, #2
   157cc:	mov	r2, r0
   157d0:	mov	r3, #1
   157d4:	str	r1, [fp, #-76]	; 0xffffffb4
   157d8:	movw	r1, #49036	; 0xbf8c
   157dc:	movt	r1, #1
   157e0:	str	r1, [sp, #92]	; 0x5c
   157e4:	b	15864 <__assert_fail@plt+0x4540>
   157e8:	cmp	sl, #0
   157ec:	mov	r8, #1
   157f0:	mov	r7, #2
   157f4:	movne	r0, #39	; 0x27
   157f8:	strbne	r0, [r6]
   157fc:	movw	r0, #49036	; 0xbf8c
   15800:	movt	r0, #1
   15804:	b	15854 <__assert_fail@plt+0x4530>
   15808:	mov	r7, #5
   1580c:	tst	r4, #1
   15810:	beq	15838 <__assert_fail@plt+0x4514>
   15814:	mov	r0, #1
   15818:	mov	r8, #0
   1581c:	str	r0, [fp, #-76]	; 0xffffffb4
   15820:	movw	r0, #49032	; 0xbf88
   15824:	mov	r2, #1
   15828:	mov	r3, #1
   1582c:	movt	r0, #1
   15830:	str	r0, [sp, #92]	; 0x5c
   15834:	b	15864 <__assert_fail@plt+0x4540>
   15838:	cmp	sl, #0
   1583c:	mov	r8, #1
   15840:	mov	r2, #1
   15844:	movne	r0, #34	; 0x22
   15848:	strbne	r0, [r6]
   1584c:	movw	r0, #49032	; 0xbf88
   15850:	movt	r0, #1
   15854:	str	r0, [sp, #92]	; 0x5c
   15858:	mov	r0, #1
   1585c:	str	r0, [fp, #-76]	; 0xffffffb4
   15860:	mov	r3, #0
   15864:	ldr	r0, [fp, #16]
   15868:	str	r3, [fp, #-72]	; 0xffffffb8
   1586c:	str	r7, [fp, #-64]	; 0xffffffc0
   15870:	str	r2, [sp, #84]	; 0x54
   15874:	cmp	r0, #0
   15878:	movwne	r0, #1
   1587c:	and	r0, r0, r3
   15880:	str	r0, [fp, #-88]	; 0xffffffa8
   15884:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15888:	cmp	r0, #0
   1588c:	movwne	r0, #1
   15890:	subs	r4, r7, #2
   15894:	mov	r7, #0
   15898:	and	r1, r0, r3
   1589c:	str	r4, [fp, #-80]	; 0xffffffb0
   158a0:	and	r1, r2, r1
   158a4:	str	r1, [sp, #48]	; 0x30
   158a8:	clz	r1, r4
   158ac:	lsr	r1, r1, #5
   158b0:	and	r1, r1, r3
   158b4:	eor	r3, r3, #1
   158b8:	str	r1, [sp, #64]	; 0x40
   158bc:	mov	r1, r4
   158c0:	str	r3, [sp, #88]	; 0x58
   158c4:	movwne	r1, #1
   158c8:	orr	r3, r1, r3
   158cc:	and	r1, r1, r2
   158d0:	and	r0, r0, r1
   158d4:	str	r3, [sp, #68]	; 0x44
   158d8:	str	r1, [fp, #-68]	; 0xffffffbc
   158dc:	str	r0, [fp, #-60]	; 0xffffffc4
   158e0:	eor	r0, r2, #1
   158e4:	str	r0, [sp, #52]	; 0x34
   158e8:	cmn	lr, #1
   158ec:	beq	158fc <__assert_fail@plt+0x45d8>
   158f0:	cmp	r7, lr
   158f4:	bne	15908 <__assert_fail@plt+0x45e4>
   158f8:	b	16430 <__assert_fail@plt+0x510c>
   158fc:	ldrb	r0, [ip, r7]
   15900:	cmp	r0, #0
   15904:	beq	16438 <__assert_fail@plt+0x5114>
   15908:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1590c:	mov	r9, #0
   15910:	str	r5, [fp, #-48]	; 0xffffffd0
   15914:	cmp	r0, #0
   15918:	beq	1594c <__assert_fail@plt+0x4628>
   1591c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15920:	add	r4, r7, r0
   15924:	cmp	r0, #2
   15928:	bcc	15944 <__assert_fail@plt+0x4620>
   1592c:	cmn	lr, #1
   15930:	bne	15944 <__assert_fail@plt+0x4620>
   15934:	mov	r0, ip
   15938:	bl	111f8 <strlen@plt>
   1593c:	ldr	ip, [fp, #-84]	; 0xffffffac
   15940:	mov	lr, r0
   15944:	cmp	r4, lr
   15948:	bls	15954 <__assert_fail@plt+0x4630>
   1594c:	mov	r0, #0
   15950:	b	15994 <__assert_fail@plt+0x4670>
   15954:	ldr	r1, [sp, #92]	; 0x5c
   15958:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1595c:	add	r0, ip, r7
   15960:	mov	r4, lr
   15964:	bl	11108 <memcmp@plt>
   15968:	ldr	r2, [sp, #88]	; 0x58
   1596c:	cmp	r0, #0
   15970:	mov	r1, r0
   15974:	movwne	r1, #1
   15978:	orr	r1, r1, r2
   1597c:	tst	r1, #1
   15980:	beq	164c8 <__assert_fail@plt+0x51a4>
   15984:	ldr	ip, [fp, #-84]	; 0xffffffac
   15988:	clz	r0, r0
   1598c:	mov	lr, r4
   15990:	lsr	r0, r0, #5
   15994:	str	r0, [fp, #-52]	; 0xffffffcc
   15998:	ldrb	r5, [ip, r7]
   1599c:	cmp	r5, #126	; 0x7e
   159a0:	bhi	15d58 <__assert_fail@plt+0x4a34>
   159a4:	add	r3, pc, #16
   159a8:	mov	r4, #1
   159ac:	mov	r2, #110	; 0x6e
   159b0:	mov	r0, #97	; 0x61
   159b4:	mov	r1, #0
   159b8:	ldr	pc, [r3, r5, lsl #2]
   159bc:	andeq	r5, r1, r4, asr ip
   159c0:	andeq	r5, r1, r8, asr sp
   159c4:	andeq	r5, r1, r8, asr sp
   159c8:	andeq	r5, r1, r8, asr sp
   159cc:	andeq	r5, r1, r8, asr sp
   159d0:	andeq	r5, r1, r8, asr sp
   159d4:	andeq	r5, r1, r8, asr sp
   159d8:	andeq	r5, r1, ip, lsl #28
   159dc:	andeq	r5, r1, r4, lsr ip
   159e0:	andeq	r5, r1, ip, lsr #24
   159e4:	andeq	r5, r1, r0, asr #24
   159e8:	andeq	r5, r1, r0, asr #25
   159ec:	andeq	r5, r1, r4, lsr #24
   159f0:	andeq	r5, r1, ip, lsr ip
   159f4:	andeq	r5, r1, r8, asr sp
   159f8:	andeq	r5, r1, r8, asr sp
   159fc:	andeq	r5, r1, r8, asr sp
   15a00:	andeq	r5, r1, r8, asr sp
   15a04:	andeq	r5, r1, r8, asr sp
   15a08:	andeq	r5, r1, r8, asr sp
   15a0c:	andeq	r5, r1, r8, asr sp
   15a10:	andeq	r5, r1, r8, asr sp
   15a14:	andeq	r5, r1, r8, asr sp
   15a18:	andeq	r5, r1, r8, asr sp
   15a1c:	andeq	r5, r1, r8, asr sp
   15a20:	andeq	r5, r1, r8, asr sp
   15a24:	andeq	r5, r1, r8, asr sp
   15a28:	andeq	r5, r1, r8, asr sp
   15a2c:	andeq	r5, r1, r8, asr sp
   15a30:	andeq	r5, r1, r8, asr sp
   15a34:	andeq	r5, r1, r8, asr sp
   15a38:	andeq	r5, r1, r8, asr sp
   15a3c:	andeq	r5, r1, r4, asr #27
   15a40:	andeq	r5, r1, r8, asr #27
   15a44:	andeq	r5, r1, r8, asr #27
   15a48:	andeq	r5, r1, ip, asr #23
   15a4c:	andeq	r5, r1, r8, asr #27
   15a50:			; <UNDEFINED> instruction: 0x00015bb8
   15a54:	andeq	r5, r1, r8, asr #27
   15a58:	andeq	r5, r1, r8, asr #25
   15a5c:	andeq	r5, r1, r8, asr #27
   15a60:	andeq	r5, r1, r8, asr #27
   15a64:	andeq	r5, r1, r8, asr #27
   15a68:			; <UNDEFINED> instruction: 0x00015bb8
   15a6c:			; <UNDEFINED> instruction: 0x00015bb8
   15a70:			; <UNDEFINED> instruction: 0x00015bb8
   15a74:			; <UNDEFINED> instruction: 0x00015bb8
   15a78:			; <UNDEFINED> instruction: 0x00015bb8
   15a7c:			; <UNDEFINED> instruction: 0x00015bb8
   15a80:			; <UNDEFINED> instruction: 0x00015bb8
   15a84:			; <UNDEFINED> instruction: 0x00015bb8
   15a88:			; <UNDEFINED> instruction: 0x00015bb8
   15a8c:			; <UNDEFINED> instruction: 0x00015bb8
   15a90:			; <UNDEFINED> instruction: 0x00015bb8
   15a94:			; <UNDEFINED> instruction: 0x00015bb8
   15a98:			; <UNDEFINED> instruction: 0x00015bb8
   15a9c:			; <UNDEFINED> instruction: 0x00015bb8
   15aa0:			; <UNDEFINED> instruction: 0x00015bb8
   15aa4:			; <UNDEFINED> instruction: 0x00015bb8
   15aa8:	andeq	r5, r1, r8, asr #27
   15aac:	andeq	r5, r1, r8, asr #27
   15ab0:	andeq	r5, r1, r8, asr #27
   15ab4:	andeq	r5, r1, r8, asr #27
   15ab8:	muleq	r1, r4, ip
   15abc:	andeq	r5, r1, r8, asr sp
   15ac0:			; <UNDEFINED> instruction: 0x00015bb8
   15ac4:			; <UNDEFINED> instruction: 0x00015bb8
   15ac8:			; <UNDEFINED> instruction: 0x00015bb8
   15acc:			; <UNDEFINED> instruction: 0x00015bb8
   15ad0:			; <UNDEFINED> instruction: 0x00015bb8
   15ad4:			; <UNDEFINED> instruction: 0x00015bb8
   15ad8:			; <UNDEFINED> instruction: 0x00015bb8
   15adc:			; <UNDEFINED> instruction: 0x00015bb8
   15ae0:			; <UNDEFINED> instruction: 0x00015bb8
   15ae4:			; <UNDEFINED> instruction: 0x00015bb8
   15ae8:			; <UNDEFINED> instruction: 0x00015bb8
   15aec:			; <UNDEFINED> instruction: 0x00015bb8
   15af0:			; <UNDEFINED> instruction: 0x00015bb8
   15af4:			; <UNDEFINED> instruction: 0x00015bb8
   15af8:			; <UNDEFINED> instruction: 0x00015bb8
   15afc:			; <UNDEFINED> instruction: 0x00015bb8
   15b00:			; <UNDEFINED> instruction: 0x00015bb8
   15b04:			; <UNDEFINED> instruction: 0x00015bb8
   15b08:			; <UNDEFINED> instruction: 0x00015bb8
   15b0c:			; <UNDEFINED> instruction: 0x00015bb8
   15b10:			; <UNDEFINED> instruction: 0x00015bb8
   15b14:			; <UNDEFINED> instruction: 0x00015bb8
   15b18:			; <UNDEFINED> instruction: 0x00015bb8
   15b1c:			; <UNDEFINED> instruction: 0x00015bb8
   15b20:			; <UNDEFINED> instruction: 0x00015bb8
   15b24:			; <UNDEFINED> instruction: 0x00015bb8
   15b28:	andeq	r5, r1, r8, asr #27
   15b2c:	andeq	r5, r1, r0, lsl #24
   15b30:			; <UNDEFINED> instruction: 0x00015bb8
   15b34:	andeq	r5, r1, r8, asr #27
   15b38:			; <UNDEFINED> instruction: 0x00015bb8
   15b3c:	andeq	r5, r1, r8, asr #27
   15b40:			; <UNDEFINED> instruction: 0x00015bb8
   15b44:			; <UNDEFINED> instruction: 0x00015bb8
   15b48:			; <UNDEFINED> instruction: 0x00015bb8
   15b4c:			; <UNDEFINED> instruction: 0x00015bb8
   15b50:			; <UNDEFINED> instruction: 0x00015bb8
   15b54:			; <UNDEFINED> instruction: 0x00015bb8
   15b58:			; <UNDEFINED> instruction: 0x00015bb8
   15b5c:			; <UNDEFINED> instruction: 0x00015bb8
   15b60:			; <UNDEFINED> instruction: 0x00015bb8
   15b64:			; <UNDEFINED> instruction: 0x00015bb8
   15b68:			; <UNDEFINED> instruction: 0x00015bb8
   15b6c:			; <UNDEFINED> instruction: 0x00015bb8
   15b70:			; <UNDEFINED> instruction: 0x00015bb8
   15b74:			; <UNDEFINED> instruction: 0x00015bb8
   15b78:			; <UNDEFINED> instruction: 0x00015bb8
   15b7c:			; <UNDEFINED> instruction: 0x00015bb8
   15b80:			; <UNDEFINED> instruction: 0x00015bb8
   15b84:			; <UNDEFINED> instruction: 0x00015bb8
   15b88:			; <UNDEFINED> instruction: 0x00015bb8
   15b8c:			; <UNDEFINED> instruction: 0x00015bb8
   15b90:			; <UNDEFINED> instruction: 0x00015bb8
   15b94:			; <UNDEFINED> instruction: 0x00015bb8
   15b98:			; <UNDEFINED> instruction: 0x00015bb8
   15b9c:			; <UNDEFINED> instruction: 0x00015bb8
   15ba0:			; <UNDEFINED> instruction: 0x00015bb8
   15ba4:			; <UNDEFINED> instruction: 0x00015bb8
   15ba8:	andeq	r5, r1, r0, ror #23
   15bac:	andeq	r5, r1, r8, asr #27
   15bb0:	andeq	r5, r1, r0, ror #23
   15bb4:	andeq	r5, r1, ip, asr #23
   15bb8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15bbc:	cmp	r0, #0
   15bc0:	beq	15e20 <__assert_fail@plt+0x4afc>
   15bc4:	ldr	r0, [fp, #16]
   15bc8:	b	15e24 <__assert_fail@plt+0x4b00>
   15bcc:	mov	r4, #0
   15bd0:	cmp	r7, #0
   15bd4:	beq	15dc4 <__assert_fail@plt+0x4aa0>
   15bd8:	mov	r9, #0
   15bdc:	b	15bb8 <__assert_fail@plt+0x4894>
   15be0:	mov	r4, #0
   15be4:	cmn	lr, #1
   15be8:	beq	15da8 <__assert_fail@plt+0x4a84>
   15bec:	cmp	r7, #0
   15bf0:	bne	15bd8 <__assert_fail@plt+0x48b4>
   15bf4:	cmp	lr, #1
   15bf8:	beq	15dc4 <__assert_fail@plt+0x4aa0>
   15bfc:	b	15bd8 <__assert_fail@plt+0x48b4>
   15c00:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15c04:	cmp	r0, #2
   15c08:	bne	15de8 <__assert_fail@plt+0x4ac4>
   15c0c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15c10:	tst	r0, #1
   15c14:	bne	164e4 <__assert_fail@plt+0x51c0>
   15c18:	mov	r9, #0
   15c1c:	mov	r0, #92	; 0x5c
   15c20:	b	15dfc <__assert_fail@plt+0x4ad8>
   15c24:	mov	r0, #102	; 0x66
   15c28:	b	15e0c <__assert_fail@plt+0x4ae8>
   15c2c:	mov	r2, #116	; 0x74
   15c30:	b	15c40 <__assert_fail@plt+0x491c>
   15c34:	mov	r0, #98	; 0x62
   15c38:	b	15e0c <__assert_fail@plt+0x4ae8>
   15c3c:	mov	r2, #114	; 0x72
   15c40:	ldr	r0, [sp, #68]	; 0x44
   15c44:	tst	r0, #1
   15c48:	mov	r0, r2
   15c4c:	bne	15e0c <__assert_fail@plt+0x4ae8>
   15c50:	b	164e4 <__assert_fail@plt+0x51c0>
   15c54:	ldr	r0, [sp, #84]	; 0x54
   15c58:	tst	r0, #1
   15c5c:	beq	15efc <__assert_fail@plt+0x4bd8>
   15c60:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15c64:	tst	r0, #1
   15c68:	bne	165f4 <__assert_fail@plt+0x52d0>
   15c6c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15c70:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15c74:	cmp	r0, #2
   15c78:	ldr	r0, [fp, #-80]	; 0xffffffb0
   15c7c:	movwne	r0, #1
   15c80:	orr	r0, r0, r2
   15c84:	tst	r0, #1
   15c88:	beq	162cc <__assert_fail@plt+0x4fa8>
   15c8c:	mov	r0, r8
   15c90:	b	16300 <__assert_fail@plt+0x4fdc>
   15c94:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15c98:	mov	r9, #0
   15c9c:	mov	r5, #63	; 0x3f
   15ca0:	cmp	r0, #5
   15ca4:	beq	160b0 <__assert_fail@plt+0x4d8c>
   15ca8:	cmp	r0, #2
   15cac:	bne	16154 <__assert_fail@plt+0x4e30>
   15cb0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15cb4:	tst	r0, #1
   15cb8:	beq	16158 <__assert_fail@plt+0x4e34>
   15cbc:	b	164e4 <__assert_fail@plt+0x51c0>
   15cc0:	mov	r0, #118	; 0x76
   15cc4:	b	15e0c <__assert_fail@plt+0x4ae8>
   15cc8:	mov	r0, #1
   15ccc:	mov	r5, #39	; 0x27
   15cd0:	str	r0, [sp, #60]	; 0x3c
   15cd4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15cd8:	cmp	r0, #2
   15cdc:	bne	15d50 <__assert_fail@plt+0x4a2c>
   15ce0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15ce4:	tst	r0, #1
   15ce8:	bne	164e4 <__assert_fail@plt+0x51c0>
   15cec:	ldr	r2, [sp, #56]	; 0x38
   15cf0:	clz	r1, sl
   15cf4:	mov	r9, #0
   15cf8:	lsr	r1, r1, #5
   15cfc:	cmp	r2, #0
   15d00:	mov	r0, r2
   15d04:	movwne	r0, #1
   15d08:	orrs	r0, r0, r1
   15d0c:	moveq	r2, sl
   15d10:	moveq	sl, r0
   15d14:	cmp	r8, sl
   15d18:	str	r2, [sp, #56]	; 0x38
   15d1c:	movcc	r0, #39	; 0x27
   15d20:	strbcc	r0, [r6, r8]
   15d24:	add	r0, r8, #1
   15d28:	cmp	r0, sl
   15d2c:	movcc	r1, #92	; 0x5c
   15d30:	strbcc	r1, [r6, r0]
   15d34:	add	r0, r8, #2
   15d38:	add	r8, r8, #3
   15d3c:	cmp	r0, sl
   15d40:	movcc	r1, #39	; 0x27
   15d44:	strbcc	r1, [r6, r0]
   15d48:	mov	r0, #0
   15d4c:	str	r0, [fp, #-56]	; 0xffffffc8
   15d50:	mov	r4, #1
   15d54:	b	15bb8 <__assert_fail@plt+0x4894>
   15d58:	ldr	r0, [sp, #40]	; 0x28
   15d5c:	cmp	r0, #1
   15d60:	bne	15f28 <__assert_fail@plt+0x4c04>
   15d64:	str	lr, [sp, #28]
   15d68:	bl	111e0 <__ctype_b_loc@plt>
   15d6c:	ldr	r0, [r0]
   15d70:	ldr	ip, [fp, #-84]	; 0xffffffac
   15d74:	mov	r1, #1
   15d78:	add	r0, r0, r5, lsl #1
   15d7c:	ldrb	r0, [r0, #1]
   15d80:	ubfx	r4, r0, #6, #1
   15d84:	ldr	r0, [sp, #52]	; 0x34
   15d88:	mov	r2, r1
   15d8c:	cmp	r1, #1
   15d90:	orr	r0, r4, r0
   15d94:	bhi	16160 <__assert_fail@plt+0x4e3c>
   15d98:	tst	r0, #1
   15d9c:	beq	16160 <__assert_fail@plt+0x4e3c>
   15da0:	ldr	lr, [sp, #28]
   15da4:	b	15bb8 <__assert_fail@plt+0x4894>
   15da8:	cmp	r7, #0
   15dac:	ldrbeq	r0, [ip, #1]
   15db0:	cmpeq	r0, #0
   15db4:	beq	15dc4 <__assert_fail@plt+0x4aa0>
   15db8:	mvn	lr, #0
   15dbc:	mov	r9, #0
   15dc0:	b	15bb8 <__assert_fail@plt+0x4894>
   15dc4:	mov	r1, #1
   15dc8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15dcc:	cmp	r0, #2
   15dd0:	bne	15de0 <__assert_fail@plt+0x4abc>
   15dd4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15dd8:	tst	r0, #1
   15ddc:	bne	164e4 <__assert_fail@plt+0x51c0>
   15de0:	mov	r4, r1
   15de4:	b	15bb8 <__assert_fail@plt+0x4894>
   15de8:	ldr	r1, [sp, #48]	; 0x30
   15dec:	mov	r9, #0
   15df0:	mov	r0, #92	; 0x5c
   15df4:	cmp	r1, #0
   15df8:	beq	15e0c <__assert_fail@plt+0x4ae8>
   15dfc:	mov	r4, #0
   15e00:	cmp	r9, #0
   15e04:	beq	16398 <__assert_fail@plt+0x5074>
   15e08:	b	163d4 <__assert_fail@plt+0x50b0>
   15e0c:	ldr	r1, [sp, #84]	; 0x54
   15e10:	mov	r4, #0
   15e14:	mov	r9, #0
   15e18:	tst	r1, #1
   15e1c:	bne	15e5c <__assert_fail@plt+0x4b38>
   15e20:	ldr	r0, [fp, #-88]	; 0xffffffa8
   15e24:	cmp	r0, #0
   15e28:	mov	r0, r5
   15e2c:	beq	15e50 <__assert_fail@plt+0x4b2c>
   15e30:	ldr	r1, [fp, #16]
   15e34:	ubfx	r0, r5, #5, #3
   15e38:	mov	r2, #1
   15e3c:	ldr	r0, [r1, r0, lsl #2]
   15e40:	and	r1, r5, #31
   15e44:	tst	r0, r2, lsl r1
   15e48:	mov	r0, r5
   15e4c:	bne	15e5c <__assert_fail@plt+0x4b38>
   15e50:	ldr	r1, [fp, #-52]	; 0xffffffcc
   15e54:	cmp	r1, #0
   15e58:	beq	16390 <__assert_fail@plt+0x506c>
   15e5c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15e60:	tst	r1, #1
   15e64:	bne	164bc <__assert_fail@plt+0x5198>
   15e68:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15e6c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15e70:	cmp	r1, #2
   15e74:	ldr	r1, [fp, #-80]	; 0xffffffb0
   15e78:	movwne	r1, #1
   15e7c:	orr	r1, r1, r2
   15e80:	tst	r1, #1
   15e84:	beq	15e90 <__assert_fail@plt+0x4b6c>
   15e88:	ldr	r5, [fp, #-48]	; 0xffffffd0
   15e8c:	b	15ecc <__assert_fail@plt+0x4ba8>
   15e90:	cmp	r8, sl
   15e94:	ldr	r5, [fp, #-48]	; 0xffffffd0
   15e98:	movcc	r1, #39	; 0x27
   15e9c:	strbcc	r1, [r6, r8]
   15ea0:	add	r1, r8, #1
   15ea4:	cmp	r1, sl
   15ea8:	movcc	r2, #36	; 0x24
   15eac:	strbcc	r2, [r6, r1]
   15eb0:	add	r1, r8, #2
   15eb4:	add	r8, r8, #3
   15eb8:	cmp	r1, sl
   15ebc:	movcc	r2, #39	; 0x27
   15ec0:	strbcc	r2, [r6, r1]
   15ec4:	mov	r1, #1
   15ec8:	str	r1, [fp, #-56]	; 0xffffffc8
   15ecc:	cmp	r8, sl
   15ed0:	movcc	r1, #92	; 0x5c
   15ed4:	strbcc	r1, [r6, r8]
   15ed8:	add	r8, r8, #1
   15edc:	cmp	r8, sl
   15ee0:	and	r5, r5, r4
   15ee4:	add	r7, r7, #1
   15ee8:	strbcc	r0, [r6, r8]
   15eec:	add	r8, r8, #1
   15ef0:	cmn	lr, #1
   15ef4:	bne	158f0 <__assert_fail@plt+0x45cc>
   15ef8:	b	158fc <__assert_fail@plt+0x45d8>
   15efc:	ldr	r0, [sp, #36]	; 0x24
   15f00:	mov	r4, #0
   15f04:	mov	r9, #0
   15f08:	mov	r5, #0
   15f0c:	cmp	r0, #0
   15f10:	beq	15e20 <__assert_fail@plt+0x4afc>
   15f14:	ldr	r5, [fp, #-48]	; 0xffffffd0
   15f18:	add	r7, r7, #1
   15f1c:	cmn	lr, #1
   15f20:	bne	158f0 <__assert_fail@plt+0x45cc>
   15f24:	b	158fc <__assert_fail@plt+0x45d8>
   15f28:	mov	r0, #0
   15f2c:	cmn	lr, #1
   15f30:	str	r0, [fp, #-36]	; 0xffffffdc
   15f34:	str	r0, [fp, #-40]	; 0xffffffd8
   15f38:	bne	15f4c <__assert_fail@plt+0x4c28>
   15f3c:	mov	r0, ip
   15f40:	bl	111f8 <strlen@plt>
   15f44:	ldr	ip, [fp, #-84]	; 0xffffffac
   15f48:	mov	lr, r0
   15f4c:	add	r0, ip, r7
   15f50:	mov	r4, #1
   15f54:	mov	r6, #0
   15f58:	str	lr, [sp, #28]
   15f5c:	str	r0, [sp, #24]
   15f60:	sub	r0, fp, #40	; 0x28
   15f64:	mov	r3, r0
   15f68:	str	r6, [sp, #44]	; 0x2c
   15f6c:	add	r6, r6, r7
   15f70:	sub	r0, fp, #44	; 0x2c
   15f74:	add	r1, ip, r6
   15f78:	sub	r2, lr, r6
   15f7c:	bl	19858 <__assert_fail@plt+0x8534>
   15f80:	cmp	r0, #0
   15f84:	beq	1641c <__assert_fail@plt+0x50f8>
   15f88:	cmn	r0, #1
   15f8c:	beq	163dc <__assert_fail@plt+0x50b8>
   15f90:	ldr	lr, [sp, #28]
   15f94:	cmn	r0, #2
   15f98:	beq	163e4 <__assert_fail@plt+0x50c0>
   15f9c:	ldr	r2, [sp, #64]	; 0x40
   15fa0:	cmp	r0, #2
   15fa4:	mov	r1, #0
   15fa8:	movwcc	r1, #1
   15fac:	eor	r2, r2, #1
   15fb0:	orrs	r1, r2, r1
   15fb4:	bne	16074 <__assert_fail@plt+0x4d50>
   15fb8:	ldr	r1, [sp, #44]	; 0x2c
   15fbc:	ldr	r2, [sp, #24]
   15fc0:	add	r1, r2, r1
   15fc4:	mov	r2, #1
   15fc8:	ldrb	r3, [r1, r2]
   15fcc:	sub	r3, r3, #91	; 0x5b
   15fd0:	cmp	r3, #33	; 0x21
   15fd4:	bhi	16068 <__assert_fail@plt+0x4d44>
   15fd8:	add	r6, pc, #0
   15fdc:	ldr	pc, [r6, r3, lsl #2]
   15fe0:	ldrdeq	r6, [r1], -ip
   15fe4:	ldrdeq	r6, [r1], -ip
   15fe8:	andeq	r6, r1, r8, rrx
   15fec:	ldrdeq	r6, [r1], -ip
   15ff0:	andeq	r6, r1, r8, rrx
   15ff4:	ldrdeq	r6, [r1], -ip
   15ff8:	andeq	r6, r1, r8, rrx
   15ffc:	andeq	r6, r1, r8, rrx
   16000:	andeq	r6, r1, r8, rrx
   16004:	andeq	r6, r1, r8, rrx
   16008:	andeq	r6, r1, r8, rrx
   1600c:	andeq	r6, r1, r8, rrx
   16010:	andeq	r6, r1, r8, rrx
   16014:	andeq	r6, r1, r8, rrx
   16018:	andeq	r6, r1, r8, rrx
   1601c:	andeq	r6, r1, r8, rrx
   16020:	andeq	r6, r1, r8, rrx
   16024:	andeq	r6, r1, r8, rrx
   16028:	andeq	r6, r1, r8, rrx
   1602c:	andeq	r6, r1, r8, rrx
   16030:	andeq	r6, r1, r8, rrx
   16034:	andeq	r6, r1, r8, rrx
   16038:	andeq	r6, r1, r8, rrx
   1603c:	andeq	r6, r1, r8, rrx
   16040:	andeq	r6, r1, r8, rrx
   16044:	andeq	r6, r1, r8, rrx
   16048:	andeq	r6, r1, r8, rrx
   1604c:	andeq	r6, r1, r8, rrx
   16050:	andeq	r6, r1, r8, rrx
   16054:	andeq	r6, r1, r8, rrx
   16058:	andeq	r6, r1, r8, rrx
   1605c:	andeq	r6, r1, r8, rrx
   16060:	andeq	r6, r1, r8, rrx
   16064:	ldrdeq	r6, [r1], -ip
   16068:	add	r2, r2, #1
   1606c:	cmp	r2, r0
   16070:	bcc	15fc8 <__assert_fail@plt+0x4ca4>
   16074:	ldr	r6, [sp, #44]	; 0x2c
   16078:	add	r6, r0, r6
   1607c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16080:	bl	11138 <iswprint@plt>
   16084:	cmp	r0, #0
   16088:	movwne	r0, #1
   1608c:	and	r4, r4, r0
   16090:	sub	r0, fp, #40	; 0x28
   16094:	bl	110fc <mbsinit@plt>
   16098:	ldr	lr, [sp, #28]
   1609c:	ldr	ip, [fp, #-84]	; 0xffffffac
   160a0:	sub	r3, fp, #40	; 0x28
   160a4:	cmp	r0, #0
   160a8:	beq	15f68 <__assert_fail@plt+0x4c44>
   160ac:	b	16424 <__assert_fail@plt+0x5100>
   160b0:	ldr	r0, [sp, #32]
   160b4:	cmp	r0, #0
   160b8:	beq	16154 <__assert_fail@plt+0x4e30>
   160bc:	add	r0, r7, #2
   160c0:	cmp	r0, lr
   160c4:	bcs	16154 <__assert_fail@plt+0x4e30>
   160c8:	add	r1, ip, r7
   160cc:	ldrb	r1, [r1, #1]
   160d0:	cmp	r1, #63	; 0x3f
   160d4:	bne	16154 <__assert_fail@plt+0x4e30>
   160d8:	ldrb	r5, [ip, r0]
   160dc:	sub	r1, r5, #33	; 0x21
   160e0:	cmp	r1, #29
   160e4:	bhi	16154 <__assert_fail@plt+0x4e30>
   160e8:	movw	r3, #20929	; 0x51c1
   160ec:	mov	r2, #1
   160f0:	movt	r3, #14336	; 0x3800
   160f4:	tst	r3, r2, lsl r1
   160f8:	beq	16154 <__assert_fail@plt+0x4e30>
   160fc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16100:	tst	r1, #1
   16104:	bne	165fc <__assert_fail@plt+0x52d8>
   16108:	cmp	r8, sl
   1610c:	mov	r7, r0
   16110:	mov	r4, #0
   16114:	movcc	r1, #63	; 0x3f
   16118:	strbcc	r1, [r6, r8]
   1611c:	add	r1, r8, #1
   16120:	cmp	r1, sl
   16124:	movcc	r2, #34	; 0x22
   16128:	strbcc	r2, [r6, r1]
   1612c:	add	r1, r8, #2
   16130:	cmp	r1, sl
   16134:	movcc	r2, #34	; 0x22
   16138:	strbcc	r2, [r6, r1]
   1613c:	add	r1, r8, #3
   16140:	add	r8, r8, #4
   16144:	cmp	r1, sl
   16148:	movcc	r2, #63	; 0x3f
   1614c:	strbcc	r2, [r6, r1]
   16150:	b	15bb8 <__assert_fail@plt+0x4894>
   16154:	mov	r5, #63	; 0x3f
   16158:	mov	r4, #0
   1615c:	b	15bb8 <__assert_fail@plt+0x4894>
   16160:	add	r1, r2, r7
   16164:	ldr	lr, [sp, #28]
   16168:	mov	r3, #0
   1616c:	str	r1, [sp, #44]	; 0x2c
   16170:	add	r1, r7, #1
   16174:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16178:	tst	r0, #1
   1617c:	bne	16250 <__assert_fail@plt+0x4f2c>
   16180:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16184:	tst	r2, #1
   16188:	bne	16544 <__assert_fail@plt+0x5220>
   1618c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16190:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16194:	cmp	r7, #2
   16198:	movwne	r3, #1
   1619c:	orr	r3, r3, r2
   161a0:	tst	r3, #1
   161a4:	bne	161e0 <__assert_fail@plt+0x4ebc>
   161a8:	cmp	r8, sl
   161ac:	add	r3, r8, #1
   161b0:	movcc	r2, #39	; 0x27
   161b4:	strbcc	r2, [r6, r8]
   161b8:	cmp	r3, sl
   161bc:	movcc	r2, #36	; 0x24
   161c0:	strbcc	r2, [r6, r3]
   161c4:	add	r3, r8, #2
   161c8:	add	r8, r8, #3
   161cc:	cmp	r3, sl
   161d0:	movcc	r2, #39	; 0x27
   161d4:	strbcc	r2, [r6, r3]
   161d8:	mov	r2, #1
   161dc:	str	r2, [fp, #-56]	; 0xffffffc8
   161e0:	cmp	r8, sl
   161e4:	movcc	r3, #92	; 0x5c
   161e8:	strbcc	r3, [r6, r8]
   161ec:	add	r3, r8, #1
   161f0:	cmp	r3, sl
   161f4:	andcc	r7, r5, #192	; 0xc0
   161f8:	movcc	r2, #48	; 0x30
   161fc:	orrcc	r7, r2, r7, lsr #6
   16200:	strbcc	r7, [r6, r3]
   16204:	add	r3, r8, #2
   16208:	add	r8, r8, #3
   1620c:	cmp	r3, sl
   16210:	lsrcc	r7, r5, #3
   16214:	movcc	r2, #6
   16218:	bficc	r7, r2, #3, #29
   1621c:	mov	r2, #6
   16220:	strbcc	r7, [r6, r3]
   16224:	bfi	r5, r2, #3, #29
   16228:	mov	r3, #1
   1622c:	b	16274 <__assert_fail@plt+0x4f50>
   16230:	cmp	r8, sl
   16234:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16238:	strbcc	r5, [r6, r8]
   1623c:	add	r8, r8, #1
   16240:	ldrb	r5, [ip, r1]
   16244:	add	r1, r1, #1
   16248:	tst	r0, #1
   1624c:	beq	16180 <__assert_fail@plt+0x4e5c>
   16250:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16254:	tst	r2, #1
   16258:	beq	1626c <__assert_fail@plt+0x4f48>
   1625c:	cmp	r8, sl
   16260:	movcc	r7, #92	; 0x5c
   16264:	strbcc	r7, [r6, r8]
   16268:	add	r8, r8, #1
   1626c:	mov	r2, #0
   16270:	str	r2, [fp, #-52]	; 0xffffffcc
   16274:	ldr	r2, [sp, #44]	; 0x2c
   16278:	and	r9, r3, #1
   1627c:	cmp	r2, r1
   16280:	bls	16380 <__assert_fail@plt+0x505c>
   16284:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16288:	cmp	r9, #0
   1628c:	movwne	r9, #1
   16290:	mvn	r7, r2
   16294:	orr	r7, r7, r9
   16298:	tst	r7, #1
   1629c:	bne	16230 <__assert_fail@plt+0x4f0c>
   162a0:	cmp	r8, sl
   162a4:	movcc	r7, #39	; 0x27
   162a8:	strbcc	r7, [r6, r8]
   162ac:	add	r7, r8, #1
   162b0:	add	r8, r8, #2
   162b4:	cmp	r7, sl
   162b8:	movcc	r2, #39	; 0x27
   162bc:	strbcc	r2, [r6, r7]
   162c0:	mov	r2, #0
   162c4:	str	r2, [fp, #-56]	; 0xffffffc8
   162c8:	b	16230 <__assert_fail@plt+0x4f0c>
   162cc:	cmp	r8, sl
   162d0:	mov	r2, #1
   162d4:	movcc	r0, #39	; 0x27
   162d8:	strbcc	r0, [r6, r8]
   162dc:	add	r0, r8, #1
   162e0:	cmp	r0, sl
   162e4:	movcc	r1, #36	; 0x24
   162e8:	strbcc	r1, [r6, r0]
   162ec:	add	r0, r8, #2
   162f0:	cmp	r0, sl
   162f4:	movcc	r1, #39	; 0x27
   162f8:	strbcc	r1, [r6, r0]
   162fc:	add	r0, r8, #3
   16300:	cmp	r0, sl
   16304:	add	r8, r0, #1
   16308:	str	r2, [fp, #-56]	; 0xffffffc8
   1630c:	movcc	r1, #92	; 0x5c
   16310:	strbcc	r1, [r6, r0]
   16314:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16318:	cmp	r1, #2
   1631c:	beq	16370 <__assert_fail@plt+0x504c>
   16320:	add	r1, r7, #1
   16324:	mov	r4, #0
   16328:	mov	r9, #1
   1632c:	mov	r5, #48	; 0x30
   16330:	cmp	r1, lr
   16334:	bcs	15bb8 <__assert_fail@plt+0x4894>
   16338:	ldrb	r1, [ip, r1]
   1633c:	sub	r1, r1, #48	; 0x30
   16340:	uxtb	r1, r1
   16344:	cmp	r1, #9
   16348:	bhi	15bb8 <__assert_fail@plt+0x4894>
   1634c:	cmp	r8, sl
   16350:	movcc	r1, #48	; 0x30
   16354:	strbcc	r1, [r6, r8]
   16358:	add	r1, r0, #2
   1635c:	add	r8, r0, #3
   16360:	cmp	r1, sl
   16364:	movcc	r2, #48	; 0x30
   16368:	strbcc	r2, [r6, r1]
   1636c:	b	15bb8 <__assert_fail@plt+0x4894>
   16370:	mov	r0, #48	; 0x30
   16374:	mov	r9, #1
   16378:	mov	r4, #0
   1637c:	b	15e50 <__assert_fail@plt+0x4b2c>
   16380:	cmp	r9, #0
   16384:	sub	r7, r1, #1
   16388:	mov	r0, r5
   1638c:	movwne	r9, #1
   16390:	cmp	r9, #0
   16394:	bne	163d4 <__assert_fail@plt+0x50b0>
   16398:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1639c:	tst	r1, #1
   163a0:	beq	163d4 <__assert_fail@plt+0x50b0>
   163a4:	cmp	r8, sl
   163a8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   163ac:	movcc	r1, #39	; 0x27
   163b0:	strbcc	r1, [r6, r8]
   163b4:	add	r1, r8, #1
   163b8:	add	r8, r8, #2
   163bc:	cmp	r1, sl
   163c0:	movcc	r2, #39	; 0x27
   163c4:	strbcc	r2, [r6, r1]
   163c8:	mov	r1, #0
   163cc:	str	r1, [fp, #-56]	; 0xffffffc8
   163d0:	b	15edc <__assert_fail@plt+0x4bb8>
   163d4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   163d8:	b	15edc <__assert_fail@plt+0x4bb8>
   163dc:	mov	r4, #0
   163e0:	b	1641c <__assert_fail@plt+0x50f8>
   163e4:	mov	r4, #0
   163e8:	cmp	lr, r6
   163ec:	bls	1641c <__assert_fail@plt+0x50f8>
   163f0:	ldr	ip, [fp, #-84]	; 0xffffffac
   163f4:	ldr	r6, [sp, #44]	; 0x2c
   163f8:	ldr	r0, [sp, #24]
   163fc:	ldrb	r0, [r0, r6]
   16400:	cmp	r0, #0
   16404:	beq	16424 <__assert_fail@plt+0x5100>
   16408:	add	r6, r6, #1
   1640c:	add	r0, r7, r6
   16410:	cmp	r0, lr
   16414:	bcc	163f8 <__assert_fail@plt+0x50d4>
   16418:	b	16424 <__assert_fail@plt+0x5100>
   1641c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16420:	ldr	r6, [sp, #44]	; 0x2c
   16424:	mov	r1, r6
   16428:	ldr	r6, [sp, #80]	; 0x50
   1642c:	b	15d84 <__assert_fail@plt+0x4a60>
   16430:	mov	lr, r7
   16434:	b	1643c <__assert_fail@plt+0x5118>
   16438:	mvn	lr, #0
   1643c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16440:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16444:	eor	r0, r7, #2
   16448:	orr	r0, r0, r8
   1644c:	clz	r0, r0
   16450:	lsr	r0, r0, #5
   16454:	tst	r1, r0
   16458:	bne	164e4 <__assert_fail@plt+0x51c0>
   1645c:	mov	r0, r1
   16460:	ldr	r1, [fp, #-80]	; 0xffffffb0
   16464:	cmp	r7, #2
   16468:	movwne	r1, #1
   1646c:	orr	r0, r0, r1
   16470:	tst	r0, #1
   16474:	ldreq	r0, [sp, #60]	; 0x3c
   16478:	eoreq	r0, r0, #1
   1647c:	tsteq	r0, #1
   16480:	bne	16590 <__assert_fail@plt+0x526c>
   16484:	mov	r9, lr
   16488:	tst	r5, #1
   1648c:	bne	1654c <__assert_fail@plt+0x5228>
   16490:	ldr	r6, [sp, #56]	; 0x38
   16494:	mov	r4, #0
   16498:	cmp	r6, #0
   1649c:	beq	16588 <__assert_fail@plt+0x5264>
   164a0:	ldr	r0, [sp, #84]	; 0x54
   164a4:	mov	r1, #0
   164a8:	cmp	sl, #0
   164ac:	mov	r5, #0
   164b0:	str	r1, [fp, #-72]	; 0xffffffb8
   164b4:	beq	15684 <__assert_fail@plt+0x4360>
   164b8:	b	16590 <__assert_fail@plt+0x526c>
   164bc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   164c0:	ldr	r2, [sp, #84]	; 0x54
   164c4:	b	164ec <__assert_fail@plt+0x51c8>
   164c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   164cc:	mov	r2, #1
   164d0:	mov	lr, r4
   164d4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   164d8:	b	164ec <__assert_fail@plt+0x51c8>
   164dc:	ldr	r6, [sp, #80]	; 0x50
   164e0:	ldr	ip, [fp, #-84]	; 0xffffffac
   164e4:	ldr	r2, [sp, #84]	; 0x54
   164e8:	mov	r7, #2
   164ec:	mov	r0, #0
   164f0:	ldr	r1, [fp, #12]
   164f4:	tst	r2, #1
   164f8:	mov	r2, r7
   164fc:	mov	r3, lr
   16500:	str	r0, [sp, #8]
   16504:	ldr	r0, [sp, #72]	; 0x48
   16508:	movwne	r2, #4
   1650c:	cmp	r7, #2
   16510:	movne	r2, r7
   16514:	str	r2, [sp]
   16518:	mov	r2, ip
   1651c:	bic	r1, r1, #2
   16520:	str	r0, [sp, #12]
   16524:	ldr	r0, [sp, #76]	; 0x4c
   16528:	str	r1, [sp, #4]
   1652c:	mov	r1, sl
   16530:	str	r0, [sp, #16]
   16534:	mov	r0, r6
   16538:	bl	15604 <__assert_fail@plt+0x42e0>
   1653c:	mov	r8, r0
   16540:	b	165e8 <__assert_fail@plt+0x52c4>
   16544:	ldr	r2, [sp, #84]	; 0x54
   16548:	b	164ec <__assert_fail@plt+0x51c8>
   1654c:	mov	r0, #5
   16550:	ldr	r1, [sp, #56]	; 0x38
   16554:	ldr	r2, [fp, #-84]	; 0xffffffac
   16558:	mov	r3, r9
   1655c:	str	r0, [sp]
   16560:	ldr	r0, [fp, #12]
   16564:	str	r0, [sp, #4]
   16568:	ldr	r0, [fp, #16]
   1656c:	str	r0, [sp, #8]
   16570:	ldr	r0, [sp, #72]	; 0x48
   16574:	str	r0, [sp, #12]
   16578:	ldr	r0, [sp, #76]	; 0x4c
   1657c:	str	r0, [sp, #16]
   16580:	ldr	r0, [sp, #80]	; 0x50
   16584:	b	16538 <__assert_fail@plt+0x5214>
   16588:	mov	r0, #0
   1658c:	str	r0, [fp, #-72]	; 0xffffffb8
   16590:	ldr	r1, [sp, #92]	; 0x5c
   16594:	cmp	r1, #0
   16598:	beq	165d8 <__assert_fail@plt+0x52b4>
   1659c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   165a0:	ldr	r2, [sp, #80]	; 0x50
   165a4:	tst	r0, #1
   165a8:	bne	165dc <__assert_fail@plt+0x52b8>
   165ac:	ldrb	r0, [r1]
   165b0:	cmp	r0, #0
   165b4:	beq	165dc <__assert_fail@plt+0x52b8>
   165b8:	add	r1, r1, #1
   165bc:	cmp	r8, sl
   165c0:	strbcc	r0, [r2, r8]
   165c4:	add	r8, r8, #1
   165c8:	ldrb	r0, [r1], #1
   165cc:	cmp	r0, #0
   165d0:	bne	165bc <__assert_fail@plt+0x5298>
   165d4:	b	165dc <__assert_fail@plt+0x52b8>
   165d8:	ldr	r2, [sp, #80]	; 0x50
   165dc:	cmp	r8, sl
   165e0:	movcc	r0, #0
   165e4:	strbcc	r0, [r2, r8]
   165e8:	mov	r0, r8
   165ec:	sub	sp, fp, #28
   165f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165f4:	mov	r2, #1
   165f8:	b	164d4 <__assert_fail@plt+0x51b0>
   165fc:	ldr	r2, [sp, #84]	; 0x54
   16600:	mov	r7, #5
   16604:	b	164ec <__assert_fail@plt+0x51c8>
   16608:	bl	112f4 <abort@plt>
   1660c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16610:	add	fp, sp, #28
   16614:	sub	sp, sp, #28
   16618:	movw	r5, #53760	; 0xd200
   1661c:	cmp	r2, #0
   16620:	mov	r4, r1
   16624:	mov	r7, r0
   16628:	str	r0, [sp, #20]
   1662c:	movt	r5, #2
   16630:	movne	r5, r2
   16634:	bl	11210 <__errno_location@plt>
   16638:	mov	sl, r0
   1663c:	ldm	r5, {r0, r1}
   16640:	ldr	r2, [r5, #40]	; 0x28
   16644:	ldr	r3, [r5, #44]	; 0x2c
   16648:	add	r9, r5, #8
   1664c:	ldr	r6, [sl]
   16650:	orr	r8, r1, #1
   16654:	mov	r1, #0
   16658:	str	r6, [sp, #24]
   1665c:	stm	sp, {r0, r8, r9}
   16660:	str	r2, [sp, #12]
   16664:	str	r3, [sp, #16]
   16668:	mov	r0, #0
   1666c:	mov	r2, r7
   16670:	mov	r3, r4
   16674:	mov	r6, r4
   16678:	bl	15604 <__assert_fail@plt+0x42e0>
   1667c:	add	r7, r0, #1
   16680:	mov	r0, r7
   16684:	bl	1781c <__assert_fail@plt+0x64f8>
   16688:	mov	r4, r0
   1668c:	ldr	r0, [r5]
   16690:	ldr	r2, [r5, #44]	; 0x2c
   16694:	ldr	r1, [r5, #40]	; 0x28
   16698:	mov	r3, r6
   1669c:	stm	sp, {r0, r8, r9}
   166a0:	str	r2, [sp, #16]
   166a4:	str	r1, [sp, #12]
   166a8:	mov	r0, r4
   166ac:	mov	r1, r7
   166b0:	ldr	r2, [sp, #20]
   166b4:	bl	15604 <__assert_fail@plt+0x42e0>
   166b8:	ldr	r0, [sp, #24]
   166bc:	str	r0, [sl]
   166c0:	mov	r0, r4
   166c4:	sub	sp, fp, #28
   166c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166d0:	add	fp, sp, #28
   166d4:	sub	sp, sp, #36	; 0x24
   166d8:	movw	r8, #53760	; 0xd200
   166dc:	cmp	r3, #0
   166e0:	mov	r4, r2
   166e4:	str	r2, [sp, #24]
   166e8:	mov	r5, r1
   166ec:	mov	r6, r0
   166f0:	str	r0, [sp, #20]
   166f4:	movt	r8, #2
   166f8:	movne	r8, r3
   166fc:	bl	11210 <__errno_location@plt>
   16700:	str	r0, [sp, #28]
   16704:	cmp	r4, #0
   16708:	add	sl, r8, #8
   1670c:	ldm	r8, {r3, r9}
   16710:	ldr	r7, [r0]
   16714:	ldr	r1, [r8, #40]	; 0x28
   16718:	ldr	r2, [r8, #44]	; 0x2c
   1671c:	mov	r0, #0
   16720:	orreq	r9, r9, #1
   16724:	str	r7, [sp, #32]
   16728:	mov	r7, r5
   1672c:	stm	sp, {r3, r9, sl}
   16730:	str	r1, [sp, #12]
   16734:	str	r2, [sp, #16]
   16738:	mov	r1, #0
   1673c:	mov	r2, r6
   16740:	mov	r3, r5
   16744:	bl	15604 <__assert_fail@plt+0x42e0>
   16748:	add	r4, r0, #1
   1674c:	mov	r5, r0
   16750:	mov	r0, r4
   16754:	bl	1781c <__assert_fail@plt+0x64f8>
   16758:	mov	r6, r0
   1675c:	ldr	r0, [r8]
   16760:	ldr	r2, [r8, #44]	; 0x2c
   16764:	ldr	r1, [r8, #40]	; 0x28
   16768:	mov	r3, r7
   1676c:	stm	sp, {r0, r9, sl}
   16770:	str	r2, [sp, #16]
   16774:	str	r1, [sp, #12]
   16778:	mov	r0, r6
   1677c:	mov	r1, r4
   16780:	ldr	r2, [sp, #20]
   16784:	bl	15604 <__assert_fail@plt+0x42e0>
   16788:	ldr	r0, [sp, #24]
   1678c:	ldr	r1, [sp, #32]
   16790:	ldr	r2, [sp, #28]
   16794:	cmp	r0, #0
   16798:	str	r1, [r2]
   1679c:	strne	r5, [r0]
   167a0:	mov	r0, r6
   167a4:	sub	sp, fp, #28
   167a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   167b0:	add	fp, sp, #24
   167b4:	movw	r5, #53556	; 0xd134
   167b8:	movw	r8, #53552	; 0xd130
   167bc:	movt	r5, #2
   167c0:	movt	r8, #2
   167c4:	ldr	r0, [r5]
   167c8:	ldr	r4, [r8]
   167cc:	cmp	r0, #2
   167d0:	blt	167fc <__assert_fail@plt+0x54d8>
   167d4:	add	r7, r4, #12
   167d8:	mov	r6, #0
   167dc:	ldr	r0, [r7, r6, lsl #3]
   167e0:	bl	14f24 <__assert_fail@plt+0x3c00>
   167e4:	ldr	r1, [r5]
   167e8:	add	r2, r6, #2
   167ec:	add	r0, r6, #1
   167f0:	mov	r6, r0
   167f4:	cmp	r2, r1
   167f8:	blt	167dc <__assert_fail@plt+0x54b8>
   167fc:	ldr	r0, [r4, #4]
   16800:	movw	r7, #53808	; 0xd230
   16804:	movt	r7, #2
   16808:	cmp	r0, r7
   1680c:	beq	16824 <__assert_fail@plt+0x5500>
   16810:	bl	14f24 <__assert_fail@plt+0x3c00>
   16814:	movw	r0, #53560	; 0xd138
   16818:	mov	r6, #256	; 0x100
   1681c:	movt	r0, #2
   16820:	strd	r6, [r0]
   16824:	movw	r6, #53560	; 0xd138
   16828:	movt	r6, #2
   1682c:	cmp	r4, r6
   16830:	beq	16840 <__assert_fail@plt+0x551c>
   16834:	mov	r0, r4
   16838:	bl	14f24 <__assert_fail@plt+0x3c00>
   1683c:	str	r6, [r8]
   16840:	mov	r0, #1
   16844:	str	r0, [r5]
   16848:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1684c:	movw	r3, #53760	; 0xd200
   16850:	mvn	r2, #0
   16854:	movt	r3, #2
   16858:	b	1685c <__assert_fail@plt+0x5538>
   1685c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16860:	add	fp, sp, #28
   16864:	sub	sp, sp, #44	; 0x2c
   16868:	mov	r7, r3
   1686c:	str	r2, [sp, #36]	; 0x24
   16870:	str	r1, [sp, #32]
   16874:	mov	r5, r0
   16878:	bl	11210 <__errno_location@plt>
   1687c:	cmp	r5, #0
   16880:	blt	169ec <__assert_fail@plt+0x56c8>
   16884:	cmn	r5, #-2147483647	; 0x80000001
   16888:	beq	169ec <__assert_fail@plt+0x56c8>
   1688c:	movw	r8, #53556	; 0xd134
   16890:	movw	r4, #53552	; 0xd130
   16894:	str	r0, [sp, #28]
   16898:	ldr	r0, [r0]
   1689c:	movt	r8, #2
   168a0:	movt	r4, #2
   168a4:	ldr	r1, [r8]
   168a8:	ldr	r6, [r4]
   168ac:	str	r0, [sp, #24]
   168b0:	cmp	r1, r5
   168b4:	ble	168c0 <__assert_fail@plt+0x559c>
   168b8:	mov	sl, r6
   168bc:	b	16928 <__assert_fail@plt+0x5604>
   168c0:	movw	r9, #53560	; 0xd138
   168c4:	mov	r0, #8
   168c8:	add	r2, r5, #1
   168cc:	str	r1, [fp, #-32]	; 0xffffffe0
   168d0:	mvn	r3, #-2147483648	; 0x80000000
   168d4:	movt	r9, #2
   168d8:	str	r0, [sp]
   168dc:	sub	r2, r2, r1
   168e0:	sub	r1, fp, #32
   168e4:	subs	r0, r6, r9
   168e8:	movne	r0, r6
   168ec:	bl	17a1c <__assert_fail@plt+0x66f8>
   168f0:	cmp	r6, r9
   168f4:	mov	sl, r0
   168f8:	str	r0, [r4]
   168fc:	ldrdeq	r0, [r9]
   16900:	stmeq	sl, {r0, r1}
   16904:	ldr	r1, [r8]
   16908:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1690c:	add	r0, sl, r1, lsl #3
   16910:	sub	r1, r2, r1
   16914:	lsl	r2, r1, #3
   16918:	mov	r1, #0
   1691c:	bl	11228 <memset@plt>
   16920:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16924:	str	r0, [r8]
   16928:	mov	r9, sl
   1692c:	ldr	r6, [r9, r5, lsl #3]!
   16930:	ldr	r4, [r9, #4]!
   16934:	ldm	r7, {r0, r1}
   16938:	ldr	r2, [r7, #40]	; 0x28
   1693c:	ldr	r3, [r7, #44]	; 0x2c
   16940:	orr	r8, r1, #1
   16944:	add	r1, r7, #8
   16948:	stm	sp, {r0, r8}
   1694c:	add	r0, sp, #8
   16950:	str	r1, [sp, #20]
   16954:	stm	r0, {r1, r2, r3}
   16958:	mov	r0, r4
   1695c:	mov	r1, r6
   16960:	ldr	r2, [sp, #32]
   16964:	ldr	r3, [sp, #36]	; 0x24
   16968:	bl	15604 <__assert_fail@plt+0x42e0>
   1696c:	cmp	r6, r0
   16970:	bhi	169d4 <__assert_fail@plt+0x56b0>
   16974:	add	r6, r0, #1
   16978:	movw	r0, #53808	; 0xd230
   1697c:	movt	r0, #2
   16980:	str	r6, [sl, r5, lsl #3]
   16984:	cmp	r4, r0
   16988:	beq	16994 <__assert_fail@plt+0x5670>
   1698c:	mov	r0, r4
   16990:	bl	14f24 <__assert_fail@plt+0x3c00>
   16994:	mov	r0, r6
   16998:	bl	1781c <__assert_fail@plt+0x64f8>
   1699c:	str	r0, [r9]
   169a0:	mov	r4, r0
   169a4:	add	r3, sp, #8
   169a8:	ldr	r0, [r7]
   169ac:	ldr	r1, [r7, #40]	; 0x28
   169b0:	ldr	r2, [r7, #44]	; 0x2c
   169b4:	stm	sp, {r0, r8}
   169b8:	ldr	r0, [sp, #20]
   169bc:	stm	r3, {r0, r1, r2}
   169c0:	mov	r0, r4
   169c4:	mov	r1, r6
   169c8:	ldr	r2, [sp, #32]
   169cc:	ldr	r3, [sp, #36]	; 0x24
   169d0:	bl	15604 <__assert_fail@plt+0x42e0>
   169d4:	ldr	r0, [sp, #28]
   169d8:	ldr	r1, [sp, #24]
   169dc:	str	r1, [r0]
   169e0:	mov	r0, r4
   169e4:	sub	sp, fp, #28
   169e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169ec:	bl	112f4 <abort@plt>
   169f0:	movw	r3, #53760	; 0xd200
   169f4:	movt	r3, #2
   169f8:	b	1685c <__assert_fail@plt+0x5538>
   169fc:	movw	r3, #53760	; 0xd200
   16a00:	mov	r1, r0
   16a04:	mov	r0, #0
   16a08:	mvn	r2, #0
   16a0c:	movt	r3, #2
   16a10:	b	1685c <__assert_fail@plt+0x5538>
   16a14:	movw	r3, #53760	; 0xd200
   16a18:	mov	r2, r1
   16a1c:	mov	r1, r0
   16a20:	mov	r0, #0
   16a24:	movt	r3, #2
   16a28:	b	1685c <__assert_fail@plt+0x5538>
   16a2c:	push	{fp, lr}
   16a30:	mov	fp, sp
   16a34:	sub	sp, sp, #48	; 0x30
   16a38:	vmov.i32	q8, #0	; 0x00000000
   16a3c:	mov	ip, #32
   16a40:	mov	r3, sp
   16a44:	mov	lr, r2
   16a48:	cmp	r1, #10
   16a4c:	add	r2, r3, #16
   16a50:	vst1.64	{d16-d17}, [r3], ip
   16a54:	vst1.64	{d16-d17}, [r3]
   16a58:	vst1.64	{d16-d17}, [r2]
   16a5c:	beq	16a7c <__assert_fail@plt+0x5758>
   16a60:	str	r1, [sp]
   16a64:	mov	r3, sp
   16a68:	mov	r1, lr
   16a6c:	mvn	r2, #0
   16a70:	bl	1685c <__assert_fail@plt+0x5538>
   16a74:	mov	sp, fp
   16a78:	pop	{fp, pc}
   16a7c:	bl	112f4 <abort@plt>
   16a80:	push	{r4, sl, fp, lr}
   16a84:	add	fp, sp, #8
   16a88:	sub	sp, sp, #48	; 0x30
   16a8c:	mov	ip, r3
   16a90:	mov	r3, sp
   16a94:	vmov.i32	q8, #0	; 0x00000000
   16a98:	mov	lr, #32
   16a9c:	cmp	r1, #10
   16aa0:	add	r4, r3, #16
   16aa4:	vst1.64	{d16-d17}, [r3], lr
   16aa8:	vst1.64	{d16-d17}, [r3]
   16aac:	vst1.64	{d16-d17}, [r4]
   16ab0:	beq	16ad0 <__assert_fail@plt+0x57ac>
   16ab4:	str	r1, [sp]
   16ab8:	mov	r1, r2
   16abc:	mov	r3, sp
   16ac0:	mov	r2, ip
   16ac4:	bl	1685c <__assert_fail@plt+0x5538>
   16ac8:	sub	sp, fp, #8
   16acc:	pop	{r4, sl, fp, pc}
   16ad0:	bl	112f4 <abort@plt>
   16ad4:	push	{fp, lr}
   16ad8:	mov	fp, sp
   16adc:	sub	sp, sp, #48	; 0x30
   16ae0:	mov	r3, sp
   16ae4:	vmov.i32	q8, #0	; 0x00000000
   16ae8:	mov	ip, #32
   16aec:	cmp	r0, #10
   16af0:	add	r2, r3, #16
   16af4:	vst1.64	{d16-d17}, [r3], ip
   16af8:	vst1.64	{d16-d17}, [r3]
   16afc:	vst1.64	{d16-d17}, [r2]
   16b00:	beq	16b20 <__assert_fail@plt+0x57fc>
   16b04:	str	r0, [sp]
   16b08:	mov	r3, sp
   16b0c:	mov	r0, #0
   16b10:	mvn	r2, #0
   16b14:	bl	1685c <__assert_fail@plt+0x5538>
   16b18:	mov	sp, fp
   16b1c:	pop	{fp, pc}
   16b20:	bl	112f4 <abort@plt>
   16b24:	push	{fp, lr}
   16b28:	mov	fp, sp
   16b2c:	sub	sp, sp, #48	; 0x30
   16b30:	mov	r3, sp
   16b34:	vmov.i32	q8, #0	; 0x00000000
   16b38:	mov	ip, #32
   16b3c:	cmp	r0, #10
   16b40:	add	lr, r3, #16
   16b44:	vst1.64	{d16-d17}, [r3], ip
   16b48:	vst1.64	{d16-d17}, [r3]
   16b4c:	vst1.64	{d16-d17}, [lr]
   16b50:	beq	16b6c <__assert_fail@plt+0x5848>
   16b54:	str	r0, [sp]
   16b58:	mov	r3, sp
   16b5c:	mov	r0, #0
   16b60:	bl	1685c <__assert_fail@plt+0x5538>
   16b64:	mov	sp, fp
   16b68:	pop	{fp, pc}
   16b6c:	bl	112f4 <abort@plt>
   16b70:	push	{r4, sl, fp, lr}
   16b74:	add	fp, sp, #8
   16b78:	sub	sp, sp, #48	; 0x30
   16b7c:	mov	lr, r0
   16b80:	movw	r0, #53760	; 0xd200
   16b84:	mov	r3, #32
   16b88:	mov	ip, r1
   16b8c:	mov	r4, #1
   16b90:	movt	r0, #2
   16b94:	add	r1, r0, #16
   16b98:	vld1.64	{d16-d17}, [r0], r3
   16b9c:	mov	r3, sp
   16ba0:	vld1.64	{d18-d19}, [r1]
   16ba4:	add	r1, r3, #16
   16ba8:	vld1.64	{d20-d21}, [r0]
   16bac:	add	r0, r3, #32
   16bb0:	vst1.64	{d18-d19}, [r1]
   16bb4:	mov	r1, r3
   16bb8:	vst1.64	{d20-d21}, [r0]
   16bbc:	mov	r0, #28
   16bc0:	and	r0, r0, r2, lsr #3
   16bc4:	and	r2, r2, #31
   16bc8:	vst1.64	{d16-d17}, [r1], r0
   16bcc:	ldr	r0, [r1, #8]
   16bd0:	bic	r4, r4, r0, lsr r2
   16bd4:	eor	r0, r0, r4, lsl r2
   16bd8:	mov	r2, ip
   16bdc:	str	r0, [r1, #8]
   16be0:	mov	r0, #0
   16be4:	mov	r1, lr
   16be8:	bl	1685c <__assert_fail@plt+0x5538>
   16bec:	sub	sp, fp, #8
   16bf0:	pop	{r4, sl, fp, pc}
   16bf4:	push	{fp, lr}
   16bf8:	mov	fp, sp
   16bfc:	sub	sp, sp, #48	; 0x30
   16c00:	mov	ip, r0
   16c04:	movw	r0, #53760	; 0xd200
   16c08:	mov	r3, #32
   16c0c:	movt	r0, #2
   16c10:	add	r2, r0, #16
   16c14:	vld1.64	{d16-d17}, [r0], r3
   16c18:	mov	r3, sp
   16c1c:	vld1.64	{d18-d19}, [r2]
   16c20:	add	r2, r3, #16
   16c24:	vld1.64	{d20-d21}, [r0]
   16c28:	add	r0, r3, #32
   16c2c:	vst1.64	{d18-d19}, [r2]
   16c30:	mov	r2, r3
   16c34:	vst1.64	{d20-d21}, [r0]
   16c38:	mov	r0, #28
   16c3c:	and	r0, r0, r1, lsr #3
   16c40:	and	r1, r1, #31
   16c44:	vst1.64	{d16-d17}, [r2], r0
   16c48:	mov	r0, #1
   16c4c:	ldr	lr, [r2, #8]
   16c50:	bic	r0, r0, lr, lsr r1
   16c54:	eor	r0, lr, r0, lsl r1
   16c58:	mov	r1, ip
   16c5c:	str	r0, [r2, #8]
   16c60:	mov	r0, #0
   16c64:	mvn	r2, #0
   16c68:	bl	1685c <__assert_fail@plt+0x5538>
   16c6c:	mov	sp, fp
   16c70:	pop	{fp, pc}
   16c74:	push	{fp, lr}
   16c78:	mov	fp, sp
   16c7c:	sub	sp, sp, #48	; 0x30
   16c80:	movw	r2, #53760	; 0xd200
   16c84:	mov	r3, #32
   16c88:	mov	r1, r0
   16c8c:	movt	r2, #2
   16c90:	add	r0, r2, #16
   16c94:	vld1.64	{d16-d17}, [r2], r3
   16c98:	mov	r3, sp
   16c9c:	vld1.64	{d18-d19}, [r0]
   16ca0:	add	r0, r3, #16
   16ca4:	vld1.64	{d20-d21}, [r2]
   16ca8:	mov	r2, r3
   16cac:	vst1.64	{d18-d19}, [r0]
   16cb0:	add	r0, r3, #32
   16cb4:	vst1.64	{d20-d21}, [r0]
   16cb8:	mov	r0, #12
   16cbc:	vst1.64	{d16-d17}, [r2], r0
   16cc0:	ldr	r0, [r2]
   16cc4:	orr	r0, r0, #67108864	; 0x4000000
   16cc8:	str	r0, [r2]
   16ccc:	mov	r0, #0
   16cd0:	mvn	r2, #0
   16cd4:	bl	1685c <__assert_fail@plt+0x5538>
   16cd8:	mov	sp, fp
   16cdc:	pop	{fp, pc}
   16ce0:	push	{fp, lr}
   16ce4:	mov	fp, sp
   16ce8:	sub	sp, sp, #48	; 0x30
   16cec:	mov	ip, r1
   16cf0:	mov	r1, r0
   16cf4:	movw	r0, #53760	; 0xd200
   16cf8:	mov	r3, #32
   16cfc:	movt	r0, #2
   16d00:	add	r2, r0, #16
   16d04:	vld1.64	{d16-d17}, [r0], r3
   16d08:	mov	r3, sp
   16d0c:	vld1.64	{d18-d19}, [r2]
   16d10:	add	r2, r3, #16
   16d14:	vld1.64	{d20-d21}, [r0]
   16d18:	add	r0, r3, #32
   16d1c:	vst1.64	{d18-d19}, [r2]
   16d20:	mov	r2, r3
   16d24:	vst1.64	{d20-d21}, [r0]
   16d28:	mov	r0, #12
   16d2c:	vst1.64	{d16-d17}, [r2], r0
   16d30:	ldr	r0, [r2]
   16d34:	orr	r0, r0, #67108864	; 0x4000000
   16d38:	str	r0, [r2]
   16d3c:	mov	r0, #0
   16d40:	mov	r2, ip
   16d44:	bl	1685c <__assert_fail@plt+0x5538>
   16d48:	mov	sp, fp
   16d4c:	pop	{fp, pc}
   16d50:	push	{r4, sl, fp, lr}
   16d54:	add	fp, sp, #8
   16d58:	sub	sp, sp, #96	; 0x60
   16d5c:	mov	ip, r2
   16d60:	mov	r2, sp
   16d64:	vmov.i32	q8, #0	; 0x00000000
   16d68:	mov	r4, #28
   16d6c:	cmp	r1, #10
   16d70:	mov	r3, r2
   16d74:	add	lr, r2, #16
   16d78:	vst1.64	{d16-d17}, [r3], r4
   16d7c:	vst1.64	{d16-d17}, [lr]
   16d80:	vst1.32	{d16-d17}, [r3]
   16d84:	beq	16dd4 <__assert_fail@plt+0x5ab0>
   16d88:	vld1.64	{d16-d17}, [r2], r4
   16d8c:	vld1.64	{d18-d19}, [lr]
   16d90:	add	r3, sp, #48	; 0x30
   16d94:	add	r4, r3, #4
   16d98:	vld1.32	{d20-d21}, [r2]
   16d9c:	add	r2, r3, #20
   16da0:	vst1.32	{d16-d17}, [r4]
   16da4:	vst1.32	{d18-d19}, [r2]
   16da8:	add	r2, r3, #32
   16dac:	vst1.32	{d20-d21}, [r2]
   16db0:	str	r1, [sp, #48]	; 0x30
   16db4:	mvn	r2, #0
   16db8:	ldr	r1, [sp, #60]	; 0x3c
   16dbc:	orr	r1, r1, #67108864	; 0x4000000
   16dc0:	str	r1, [sp, #60]	; 0x3c
   16dc4:	mov	r1, ip
   16dc8:	bl	1685c <__assert_fail@plt+0x5538>
   16dcc:	sub	sp, fp, #8
   16dd0:	pop	{r4, sl, fp, pc}
   16dd4:	bl	112f4 <abort@plt>
   16dd8:	push	{r4, r5, fp, lr}
   16ddc:	add	fp, sp, #8
   16de0:	sub	sp, sp, #48	; 0x30
   16de4:	mov	ip, r3
   16de8:	movw	r3, #53760	; 0xd200
   16dec:	mov	lr, #32
   16df0:	cmp	r1, #0
   16df4:	mov	r5, sp
   16df8:	movt	r3, #2
   16dfc:	cmpne	r2, #0
   16e00:	add	r4, r3, #16
   16e04:	vld1.64	{d16-d17}, [r3], lr
   16e08:	vld1.64	{d18-d19}, [r4]
   16e0c:	add	r4, r5, #16
   16e10:	vld1.64	{d20-d21}, [r3]
   16e14:	vst1.64	{d16-d17}, [r5], lr
   16e18:	mov	r3, #10
   16e1c:	vst1.64	{d18-d19}, [r4]
   16e20:	vst1.64	{d20-d21}, [r5]
   16e24:	str	r3, [sp]
   16e28:	bne	16e30 <__assert_fail@plt+0x5b0c>
   16e2c:	bl	112f4 <abort@plt>
   16e30:	str	r2, [sp, #44]	; 0x2c
   16e34:	str	r1, [sp, #40]	; 0x28
   16e38:	mov	r3, sp
   16e3c:	mov	r1, ip
   16e40:	mvn	r2, #0
   16e44:	bl	1685c <__assert_fail@plt+0x5538>
   16e48:	sub	sp, fp, #8
   16e4c:	pop	{r4, r5, fp, pc}
   16e50:	push	{r4, r5, fp, lr}
   16e54:	add	fp, sp, #8
   16e58:	sub	sp, sp, #48	; 0x30
   16e5c:	mov	lr, r3
   16e60:	movw	r3, #53760	; 0xd200
   16e64:	mov	ip, #32
   16e68:	cmp	r1, #0
   16e6c:	mov	r5, sp
   16e70:	movt	r3, #2
   16e74:	cmpne	r2, #0
   16e78:	add	r4, r3, #16
   16e7c:	vld1.64	{d16-d17}, [r3], ip
   16e80:	vld1.64	{d18-d19}, [r4]
   16e84:	add	r4, r5, #16
   16e88:	vld1.64	{d20-d21}, [r3]
   16e8c:	vst1.64	{d16-d17}, [r5], ip
   16e90:	mov	r3, #10
   16e94:	vst1.64	{d18-d19}, [r4]
   16e98:	vst1.64	{d20-d21}, [r5]
   16e9c:	str	r3, [sp]
   16ea0:	bne	16ea8 <__assert_fail@plt+0x5b84>
   16ea4:	bl	112f4 <abort@plt>
   16ea8:	ldr	ip, [fp, #8]
   16eac:	str	r2, [sp, #44]	; 0x2c
   16eb0:	str	r1, [sp, #40]	; 0x28
   16eb4:	mov	r3, sp
   16eb8:	mov	r1, lr
   16ebc:	mov	r2, ip
   16ec0:	bl	1685c <__assert_fail@plt+0x5538>
   16ec4:	sub	sp, fp, #8
   16ec8:	pop	{r4, r5, fp, pc}
   16ecc:	push	{r4, sl, fp, lr}
   16ed0:	add	fp, sp, #8
   16ed4:	sub	sp, sp, #48	; 0x30
   16ed8:	mov	ip, r2
   16edc:	movw	r2, #53760	; 0xd200
   16ee0:	mov	lr, #32
   16ee4:	cmp	r0, #0
   16ee8:	mov	r4, sp
   16eec:	movt	r2, #2
   16ef0:	cmpne	r1, #0
   16ef4:	add	r3, r2, #16
   16ef8:	vld1.64	{d16-d17}, [r2], lr
   16efc:	vld1.64	{d18-d19}, [r3]
   16f00:	add	r3, r4, #16
   16f04:	vld1.64	{d20-d21}, [r2]
   16f08:	vst1.64	{d16-d17}, [r4], lr
   16f0c:	mov	r2, #10
   16f10:	vst1.64	{d18-d19}, [r3]
   16f14:	vst1.64	{d20-d21}, [r4]
   16f18:	str	r2, [sp]
   16f1c:	bne	16f24 <__assert_fail@plt+0x5c00>
   16f20:	bl	112f4 <abort@plt>
   16f24:	str	r1, [sp, #44]	; 0x2c
   16f28:	str	r0, [sp, #40]	; 0x28
   16f2c:	mov	r3, sp
   16f30:	mov	r0, #0
   16f34:	mov	r1, ip
   16f38:	mvn	r2, #0
   16f3c:	bl	1685c <__assert_fail@plt+0x5538>
   16f40:	sub	sp, fp, #8
   16f44:	pop	{r4, sl, fp, pc}
   16f48:	push	{r4, r5, fp, lr}
   16f4c:	add	fp, sp, #8
   16f50:	sub	sp, sp, #48	; 0x30
   16f54:	mov	lr, r2
   16f58:	movw	r2, #53760	; 0xd200
   16f5c:	mov	ip, r3
   16f60:	mov	r3, #32
   16f64:	cmp	r0, #0
   16f68:	mov	r5, sp
   16f6c:	movt	r2, #2
   16f70:	cmpne	r1, #0
   16f74:	add	r4, r2, #16
   16f78:	vld1.64	{d16-d17}, [r2], r3
   16f7c:	vld1.64	{d18-d19}, [r4]
   16f80:	add	r4, r5, #16
   16f84:	vld1.64	{d20-d21}, [r2]
   16f88:	vst1.64	{d16-d17}, [r5], r3
   16f8c:	mov	r2, #10
   16f90:	vst1.64	{d18-d19}, [r4]
   16f94:	vst1.64	{d20-d21}, [r5]
   16f98:	str	r2, [sp]
   16f9c:	bne	16fa4 <__assert_fail@plt+0x5c80>
   16fa0:	bl	112f4 <abort@plt>
   16fa4:	str	r1, [sp, #44]	; 0x2c
   16fa8:	str	r0, [sp, #40]	; 0x28
   16fac:	mov	r3, sp
   16fb0:	mov	r0, #0
   16fb4:	mov	r1, lr
   16fb8:	mov	r2, ip
   16fbc:	bl	1685c <__assert_fail@plt+0x5538>
   16fc0:	sub	sp, fp, #8
   16fc4:	pop	{r4, r5, fp, pc}
   16fc8:	movw	r3, #53568	; 0xd140
   16fcc:	movt	r3, #2
   16fd0:	b	1685c <__assert_fail@plt+0x5538>
   16fd4:	movw	r3, #53568	; 0xd140
   16fd8:	mov	r2, r1
   16fdc:	mov	r1, r0
   16fe0:	mov	r0, #0
   16fe4:	movt	r3, #2
   16fe8:	b	1685c <__assert_fail@plt+0x5538>
   16fec:	movw	r3, #53568	; 0xd140
   16ff0:	mvn	r2, #0
   16ff4:	movt	r3, #2
   16ff8:	b	1685c <__assert_fail@plt+0x5538>
   16ffc:	movw	r3, #53568	; 0xd140
   17000:	mov	r1, r0
   17004:	mov	r0, #0
   17008:	mvn	r2, #0
   1700c:	movt	r3, #2
   17010:	b	1685c <__assert_fail@plt+0x5538>
   17014:	push	{r4, r5, fp, lr}
   17018:	add	fp, sp, #8
   1701c:	mov	r5, r0
   17020:	mov	r4, r1
   17024:	mov	r0, #0
   17028:	mov	r2, #5
   1702c:	mov	r1, r5
   17030:	bl	11114 <dcgettext@plt>
   17034:	cmp	r0, r5
   17038:	popne	{r4, r5, fp, pc}
   1703c:	bl	19820 <__assert_fail@plt+0x84fc>
   17040:	ldrb	r1, [r0]
   17044:	and	r1, r1, #223	; 0xdf
   17048:	cmp	r1, #71	; 0x47
   1704c:	beq	170b4 <__assert_fail@plt+0x5d90>
   17050:	cmp	r1, #85	; 0x55
   17054:	bne	170d8 <__assert_fail@plt+0x5db4>
   17058:	ldrb	r1, [r0, #1]
   1705c:	and	r1, r1, #223	; 0xdf
   17060:	cmp	r1, #84	; 0x54
   17064:	bne	170d8 <__assert_fail@plt+0x5db4>
   17068:	ldrb	r1, [r0, #2]
   1706c:	and	r1, r1, #223	; 0xdf
   17070:	cmp	r1, #70	; 0x46
   17074:	ldrbeq	r1, [r0, #3]
   17078:	cmpeq	r1, #45	; 0x2d
   1707c:	bne	170d8 <__assert_fail@plt+0x5db4>
   17080:	ldrb	r1, [r0, #4]
   17084:	cmp	r1, #56	; 0x38
   17088:	ldrbeq	r0, [r0, #5]
   1708c:	cmpeq	r0, #0
   17090:	bne	170d8 <__assert_fail@plt+0x5db4>
   17094:	ldrb	r1, [r5]
   17098:	movw	r2, #49038	; 0xbf8e
   1709c:	movw	r0, #49042	; 0xbf92
   170a0:	movt	r2, #1
   170a4:	movt	r0, #1
   170a8:	cmp	r1, #96	; 0x60
   170ac:	moveq	r0, r2
   170b0:	pop	{r4, r5, fp, pc}
   170b4:	ldrb	r1, [r0, #1]
   170b8:	and	r1, r1, #223	; 0xdf
   170bc:	cmp	r1, #66	; 0x42
   170c0:	bne	170d8 <__assert_fail@plt+0x5db4>
   170c4:	ldrb	r1, [r0, #2]
   170c8:	cmp	r1, #49	; 0x31
   170cc:	ldrbeq	r1, [r0, #3]
   170d0:	cmpeq	r1, #56	; 0x38
   170d4:	beq	170f4 <__assert_fail@plt+0x5dd0>
   170d8:	movw	r1, #49032	; 0xbf88
   170dc:	movw	r0, #49036	; 0xbf8c
   170e0:	cmp	r4, #9
   170e4:	movt	r1, #1
   170e8:	movt	r0, #1
   170ec:	moveq	r0, r1
   170f0:	pop	{r4, r5, fp, pc}
   170f4:	ldrb	r1, [r0, #4]
   170f8:	cmp	r1, #48	; 0x30
   170fc:	ldrbeq	r1, [r0, #5]
   17100:	cmpeq	r1, #51	; 0x33
   17104:	bne	170d8 <__assert_fail@plt+0x5db4>
   17108:	ldrb	r1, [r0, #6]
   1710c:	cmp	r1, #48	; 0x30
   17110:	ldrbeq	r0, [r0, #7]
   17114:	cmpeq	r0, #0
   17118:	bne	170d8 <__assert_fail@plt+0x5db4>
   1711c:	ldrb	r1, [r5]
   17120:	movw	r2, #49046	; 0xbf96
   17124:	movw	r0, #49050	; 0xbf9a
   17128:	movt	r2, #1
   1712c:	movt	r0, #1
   17130:	b	170a8 <__assert_fail@plt+0x5d84>
   17134:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17138:	add	fp, sp, #24
   1713c:	sub	sp, sp, #32
   17140:	ldr	r6, [fp, #12]
   17144:	ldr	r7, [fp, #8]
   17148:	mov	r4, r2
   1714c:	mov	r8, r0
   17150:	cmp	r1, #0
   17154:	beq	1717c <__assert_fail@plt+0x5e58>
   17158:	movw	r2, #49140	; 0xbff4
   1715c:	mov	r5, r1
   17160:	str	r3, [sp, #4]
   17164:	str	r4, [sp]
   17168:	mov	r0, r8
   1716c:	mov	r1, #1
   17170:	movt	r2, #1
   17174:	mov	r3, r5
   17178:	b	17194 <__assert_fail@plt+0x5e70>
   1717c:	movw	r2, #49152	; 0xc000
   17180:	str	r3, [sp]
   17184:	mov	r0, r8
   17188:	mov	r1, #1
   1718c:	mov	r3, r4
   17190:	movt	r2, #1
   17194:	bl	1124c <__fprintf_chk@plt>
   17198:	movw	r1, #49159	; 0xc007
   1719c:	mov	r0, #0
   171a0:	mov	r2, #5
   171a4:	movt	r1, #1
   171a8:	bl	11114 <dcgettext@plt>
   171ac:	movw	r2, #49877	; 0xc2d5
   171b0:	mov	r3, r0
   171b4:	movw	r0, #2022	; 0x7e6
   171b8:	mov	r1, #1
   171bc:	str	r0, [sp]
   171c0:	movt	r2, #1
   171c4:	mov	r0, r8
   171c8:	bl	1124c <__fprintf_chk@plt>
   171cc:	movw	r4, #46072	; 0xb3f8
   171d0:	mov	r1, r8
   171d4:	movt	r4, #1
   171d8:	mov	r0, r4
   171dc:	bl	1106c <fputs_unlocked@plt>
   171e0:	movw	r1, #49163	; 0xc00b
   171e4:	mov	r0, #0
   171e8:	mov	r2, #5
   171ec:	movt	r1, #1
   171f0:	bl	11114 <dcgettext@plt>
   171f4:	movw	r3, #49334	; 0xc0b6
   171f8:	mov	r2, r0
   171fc:	mov	r0, r8
   17200:	mov	r1, #1
   17204:	movt	r3, #1
   17208:	bl	1124c <__fprintf_chk@plt>
   1720c:	mov	r0, r4
   17210:	mov	r1, r8
   17214:	bl	1106c <fputs_unlocked@plt>
   17218:	cmp	r6, #9
   1721c:	bhi	17258 <__assert_fail@plt+0x5f34>
   17220:	add	r0, pc, #0
   17224:	ldr	pc, [r0, r6, lsl #2]
   17228:	andeq	r7, r1, r0, asr r2
   1722c:	andeq	r7, r1, r4, ror #4
   17230:	muleq	r1, r4, r2
   17234:			; <UNDEFINED> instruction: 0x000172bc
   17238:	andeq	r7, r1, r4, ror #5
   1723c:	andeq	r7, r1, ip, lsl #6
   17240:	andeq	r7, r1, r4, lsr r3
   17244:	andeq	r7, r1, ip, ror #6
   17248:	andeq	r7, r1, ip, lsl #8
   1724c:			; <UNDEFINED> instruction: 0x000173b4
   17250:	sub	sp, fp, #24
   17254:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17258:	movw	r1, #49687	; 0xc217
   1725c:	movt	r1, #1
   17260:	b	173bc <__assert_fail@plt+0x6098>
   17264:	movw	r1, #49368	; 0xc0d8
   17268:	mov	r0, #0
   1726c:	mov	r2, #5
   17270:	movt	r1, #1
   17274:	bl	11114 <dcgettext@plt>
   17278:	ldr	r3, [r7]
   1727c:	mov	r2, r0
   17280:	mov	r0, r8
   17284:	mov	r1, #1
   17288:	sub	sp, fp, #24
   1728c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17290:	b	1124c <__fprintf_chk@plt>
   17294:	movw	r1, #49384	; 0xc0e8
   17298:	mov	r0, #0
   1729c:	mov	r2, #5
   172a0:	movt	r1, #1
   172a4:	bl	11114 <dcgettext@plt>
   172a8:	mov	r2, r0
   172ac:	ldr	r3, [r7]
   172b0:	ldr	r0, [r7, #4]
   172b4:	str	r0, [sp]
   172b8:	b	173a8 <__assert_fail@plt+0x6084>
   172bc:	movw	r1, #49407	; 0xc0ff
   172c0:	mov	r0, #0
   172c4:	mov	r2, #5
   172c8:	movt	r1, #1
   172cc:	bl	11114 <dcgettext@plt>
   172d0:	ldr	r3, [r7]
   172d4:	mov	r2, r0
   172d8:	ldmib	r7, {r0, r1}
   172dc:	stm	sp, {r0, r1}
   172e0:	b	173a8 <__assert_fail@plt+0x6084>
   172e4:	movw	r1, #49435	; 0xc11b
   172e8:	mov	r0, #0
   172ec:	mov	r2, #5
   172f0:	movt	r1, #1
   172f4:	bl	11114 <dcgettext@plt>
   172f8:	ldr	r3, [r7]
   172fc:	mov	r2, r0
   17300:	ldmib	r7, {r0, r1, r7}
   17304:	stm	sp, {r0, r1, r7}
   17308:	b	173a8 <__assert_fail@plt+0x6084>
   1730c:	movw	r1, #49467	; 0xc13b
   17310:	mov	r0, #0
   17314:	mov	r2, #5
   17318:	movt	r1, #1
   1731c:	bl	11114 <dcgettext@plt>
   17320:	ldr	r3, [r7]
   17324:	mov	r2, r0
   17328:	ldmib	r7, {r0, r1, r6, r7}
   1732c:	stm	sp, {r0, r1, r6, r7}
   17330:	b	173a8 <__assert_fail@plt+0x6084>
   17334:	movw	r1, #49503	; 0xc15f
   17338:	mov	r0, #0
   1733c:	mov	r2, #5
   17340:	movt	r1, #1
   17344:	bl	11114 <dcgettext@plt>
   17348:	ldr	r3, [r7]
   1734c:	mov	r2, r0
   17350:	ldmib	r7, {r0, r1, r6}
   17354:	ldr	r5, [r7, #16]
   17358:	ldr	r7, [r7, #20]
   1735c:	stm	sp, {r0, r1, r6}
   17360:	str	r5, [sp, #12]
   17364:	str	r7, [sp, #16]
   17368:	b	173a8 <__assert_fail@plt+0x6084>
   1736c:	movw	r1, #49543	; 0xc187
   17370:	mov	r0, #0
   17374:	mov	r2, #5
   17378:	movt	r1, #1
   1737c:	bl	11114 <dcgettext@plt>
   17380:	ldr	r3, [r7]
   17384:	mov	r2, r0
   17388:	ldmib	r7, {r0, r1, r6}
   1738c:	ldr	r5, [r7, #16]
   17390:	ldr	r4, [r7, #20]
   17394:	ldr	r7, [r7, #24]
   17398:	stm	sp, {r0, r1, r6}
   1739c:	str	r5, [sp, #12]
   173a0:	str	r4, [sp, #16]
   173a4:	str	r7, [sp, #20]
   173a8:	mov	r0, r8
   173ac:	mov	r1, #1
   173b0:	b	1745c <__assert_fail@plt+0x6138>
   173b4:	movw	r1, #49635	; 0xc1e3
   173b8:	movt	r1, #1
   173bc:	mov	r0, #0
   173c0:	mov	r2, #5
   173c4:	bl	11114 <dcgettext@plt>
   173c8:	mov	ip, r0
   173cc:	ldr	r3, [r7]
   173d0:	ldr	r0, [r7, #4]
   173d4:	ldr	r1, [r7, #8]
   173d8:	ldr	r6, [r7, #12]
   173dc:	ldr	r5, [r7, #16]
   173e0:	ldr	r4, [r7, #20]
   173e4:	ldr	r2, [r7, #24]
   173e8:	ldr	lr, [r7, #28]
   173ec:	ldr	r7, [r7, #32]
   173f0:	stm	sp, {r0, r1, r6}
   173f4:	str	r5, [sp, #12]
   173f8:	str	r4, [sp, #16]
   173fc:	str	r2, [sp, #20]
   17400:	str	lr, [sp, #24]
   17404:	str	r7, [sp, #28]
   17408:	b	17450 <__assert_fail@plt+0x612c>
   1740c:	movw	r1, #49587	; 0xc1b3
   17410:	mov	r0, #0
   17414:	mov	r2, #5
   17418:	movt	r1, #1
   1741c:	bl	11114 <dcgettext@plt>
   17420:	mov	ip, r0
   17424:	ldr	r3, [r7]
   17428:	ldmib	r7, {r0, r1, r6}
   1742c:	ldr	r5, [r7, #16]
   17430:	ldr	r4, [r7, #20]
   17434:	ldr	r2, [r7, #24]
   17438:	ldr	r7, [r7, #28]
   1743c:	stm	sp, {r0, r1, r6}
   17440:	str	r5, [sp, #12]
   17444:	str	r4, [sp, #16]
   17448:	str	r2, [sp, #20]
   1744c:	str	r7, [sp, #24]
   17450:	mov	r0, r8
   17454:	mov	r1, #1
   17458:	mov	r2, ip
   1745c:	bl	1124c <__fprintf_chk@plt>
   17460:	sub	sp, fp, #24
   17464:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17468:	push	{r4, sl, fp, lr}
   1746c:	add	fp, sp, #8
   17470:	sub	sp, sp, #8
   17474:	ldr	ip, [fp, #8]
   17478:	mov	lr, #0
   1747c:	ldr	r4, [ip, lr, lsl #2]
   17480:	add	lr, lr, #1
   17484:	cmp	r4, #0
   17488:	bne	1747c <__assert_fail@plt+0x6158>
   1748c:	sub	r4, lr, #1
   17490:	str	ip, [sp]
   17494:	str	r4, [sp, #4]
   17498:	bl	17134 <__assert_fail@plt+0x5e10>
   1749c:	sub	sp, fp, #8
   174a0:	pop	{r4, sl, fp, pc}
   174a4:	push	{fp, lr}
   174a8:	mov	fp, sp
   174ac:	sub	sp, sp, #48	; 0x30
   174b0:	ldr	ip, [fp, #8]
   174b4:	ldr	lr, [ip]
   174b8:	cmp	lr, #0
   174bc:	str	lr, [sp, #8]
   174c0:	beq	1755c <__assert_fail@plt+0x6238>
   174c4:	ldr	lr, [ip, #4]
   174c8:	cmp	lr, #0
   174cc:	str	lr, [sp, #12]
   174d0:	beq	17564 <__assert_fail@plt+0x6240>
   174d4:	ldr	lr, [ip, #8]
   174d8:	cmp	lr, #0
   174dc:	str	lr, [sp, #16]
   174e0:	beq	1756c <__assert_fail@plt+0x6248>
   174e4:	ldr	lr, [ip, #12]
   174e8:	cmp	lr, #0
   174ec:	str	lr, [sp, #20]
   174f0:	beq	17574 <__assert_fail@plt+0x6250>
   174f4:	ldr	lr, [ip, #16]
   174f8:	cmp	lr, #0
   174fc:	str	lr, [sp, #24]
   17500:	beq	1757c <__assert_fail@plt+0x6258>
   17504:	ldr	lr, [ip, #20]
   17508:	cmp	lr, #0
   1750c:	str	lr, [sp, #28]
   17510:	beq	17584 <__assert_fail@plt+0x6260>
   17514:	ldr	lr, [ip, #24]
   17518:	cmp	lr, #0
   1751c:	str	lr, [sp, #32]
   17520:	beq	1758c <__assert_fail@plt+0x6268>
   17524:	ldr	lr, [ip, #28]
   17528:	cmp	lr, #0
   1752c:	str	lr, [sp, #36]	; 0x24
   17530:	beq	17594 <__assert_fail@plt+0x6270>
   17534:	ldr	lr, [ip, #32]
   17538:	cmp	lr, #0
   1753c:	str	lr, [sp, #40]	; 0x28
   17540:	beq	1759c <__assert_fail@plt+0x6278>
   17544:	ldr	lr, [ip, #36]	; 0x24
   17548:	mov	ip, #10
   1754c:	cmp	lr, #0
   17550:	str	lr, [sp, #44]	; 0x2c
   17554:	movweq	ip, #9
   17558:	b	175a0 <__assert_fail@plt+0x627c>
   1755c:	mov	ip, #0
   17560:	b	175a0 <__assert_fail@plt+0x627c>
   17564:	mov	ip, #1
   17568:	b	175a0 <__assert_fail@plt+0x627c>
   1756c:	mov	ip, #2
   17570:	b	175a0 <__assert_fail@plt+0x627c>
   17574:	mov	ip, #3
   17578:	b	175a0 <__assert_fail@plt+0x627c>
   1757c:	mov	ip, #4
   17580:	b	175a0 <__assert_fail@plt+0x627c>
   17584:	mov	ip, #5
   17588:	b	175a0 <__assert_fail@plt+0x627c>
   1758c:	mov	ip, #6
   17590:	b	175a0 <__assert_fail@plt+0x627c>
   17594:	mov	ip, #7
   17598:	b	175a0 <__assert_fail@plt+0x627c>
   1759c:	mov	ip, #8
   175a0:	add	lr, sp, #8
   175a4:	str	ip, [sp, #4]
   175a8:	str	lr, [sp]
   175ac:	bl	17134 <__assert_fail@plt+0x5e10>
   175b0:	mov	sp, fp
   175b4:	pop	{fp, pc}
   175b8:	push	{fp, lr}
   175bc:	mov	fp, sp
   175c0:	sub	sp, sp, #56	; 0x38
   175c4:	add	ip, fp, #8
   175c8:	str	ip, [sp, #12]
   175cc:	ldr	lr, [fp, #8]
   175d0:	cmp	lr, #0
   175d4:	str	lr, [sp, #16]
   175d8:	beq	17674 <__assert_fail@plt+0x6350>
   175dc:	ldr	lr, [ip, #4]
   175e0:	cmp	lr, #0
   175e4:	str	lr, [sp, #20]
   175e8:	beq	1767c <__assert_fail@plt+0x6358>
   175ec:	ldr	lr, [ip, #8]
   175f0:	cmp	lr, #0
   175f4:	str	lr, [sp, #24]
   175f8:	beq	17684 <__assert_fail@plt+0x6360>
   175fc:	ldr	lr, [ip, #12]
   17600:	cmp	lr, #0
   17604:	str	lr, [sp, #28]
   17608:	beq	1768c <__assert_fail@plt+0x6368>
   1760c:	ldr	lr, [ip, #16]
   17610:	cmp	lr, #0
   17614:	str	lr, [sp, #32]
   17618:	beq	17694 <__assert_fail@plt+0x6370>
   1761c:	ldr	lr, [ip, #20]
   17620:	cmp	lr, #0
   17624:	str	lr, [sp, #36]	; 0x24
   17628:	beq	1769c <__assert_fail@plt+0x6378>
   1762c:	ldr	lr, [ip, #24]
   17630:	cmp	lr, #0
   17634:	str	lr, [sp, #40]	; 0x28
   17638:	beq	176a4 <__assert_fail@plt+0x6380>
   1763c:	ldr	lr, [ip, #28]
   17640:	cmp	lr, #0
   17644:	str	lr, [sp, #44]	; 0x2c
   17648:	beq	176ac <__assert_fail@plt+0x6388>
   1764c:	ldr	lr, [ip, #32]
   17650:	cmp	lr, #0
   17654:	str	lr, [sp, #48]	; 0x30
   17658:	beq	176b4 <__assert_fail@plt+0x6390>
   1765c:	ldr	lr, [ip, #36]	; 0x24
   17660:	mov	ip, #10
   17664:	cmp	lr, #0
   17668:	str	lr, [sp, #52]	; 0x34
   1766c:	movweq	ip, #9
   17670:	b	176b8 <__assert_fail@plt+0x6394>
   17674:	mov	ip, #0
   17678:	b	176b8 <__assert_fail@plt+0x6394>
   1767c:	mov	ip, #1
   17680:	b	176b8 <__assert_fail@plt+0x6394>
   17684:	mov	ip, #2
   17688:	b	176b8 <__assert_fail@plt+0x6394>
   1768c:	mov	ip, #3
   17690:	b	176b8 <__assert_fail@plt+0x6394>
   17694:	mov	ip, #4
   17698:	b	176b8 <__assert_fail@plt+0x6394>
   1769c:	mov	ip, #5
   176a0:	b	176b8 <__assert_fail@plt+0x6394>
   176a4:	mov	ip, #6
   176a8:	b	176b8 <__assert_fail@plt+0x6394>
   176ac:	mov	ip, #7
   176b0:	b	176b8 <__assert_fail@plt+0x6394>
   176b4:	mov	ip, #8
   176b8:	add	lr, sp, #16
   176bc:	str	ip, [sp, #4]
   176c0:	str	lr, [sp]
   176c4:	bl	17134 <__assert_fail@plt+0x5e10>
   176c8:	mov	sp, fp
   176cc:	pop	{fp, pc}
   176d0:	push	{fp, lr}
   176d4:	mov	fp, sp
   176d8:	movw	r0, #53644	; 0xd18c
   176dc:	movt	r0, #2
   176e0:	ldr	r1, [r0]
   176e4:	movw	r0, #46072	; 0xb3f8
   176e8:	movt	r0, #1
   176ec:	bl	1106c <fputs_unlocked@plt>
   176f0:	movw	r1, #49747	; 0xc253
   176f4:	mov	r0, #0
   176f8:	mov	r2, #5
   176fc:	movt	r1, #1
   17700:	bl	11114 <dcgettext@plt>
   17704:	movw	r2, #49767	; 0xc267
   17708:	mov	r1, r0
   1770c:	mov	r0, #1
   17710:	movt	r2, #1
   17714:	bl	11234 <__printf_chk@plt>
   17718:	movw	r1, #49789	; 0xc27d
   1771c:	mov	r0, #0
   17720:	mov	r2, #5
   17724:	movt	r1, #1
   17728:	bl	11114 <dcgettext@plt>
   1772c:	movw	r2, #45384	; 0xb148
   17730:	movw	r3, #45881	; 0xb339
   17734:	mov	r1, r0
   17738:	mov	r0, #1
   1773c:	movt	r2, #1
   17740:	movt	r3, #1
   17744:	bl	11234 <__printf_chk@plt>
   17748:	movw	r1, #49809	; 0xc291
   1774c:	mov	r0, #0
   17750:	mov	r2, #5
   17754:	movt	r1, #1
   17758:	bl	11114 <dcgettext@plt>
   1775c:	movw	r2, #49848	; 0xc2b8
   17760:	mov	r1, r0
   17764:	mov	r0, #1
   17768:	movt	r2, #1
   1776c:	pop	{fp, lr}
   17770:	b	11234 <__printf_chk@plt>
   17774:	push	{r4, r5, r6, sl, fp, lr}
   17778:	add	fp, sp, #16
   1777c:	mov	r4, r2
   17780:	mov	r5, r1
   17784:	mov	r6, r0
   17788:	bl	198b8 <__assert_fail@plt+0x8594>
   1778c:	cmp	r0, #0
   17790:	popne	{r4, r5, r6, sl, fp, pc}
   17794:	cmp	r6, #0
   17798:	beq	177ac <__assert_fail@plt+0x6488>
   1779c:	cmp	r5, #0
   177a0:	cmpne	r4, #0
   177a4:	bne	177ac <__assert_fail@plt+0x6488>
   177a8:	pop	{r4, r5, r6, sl, fp, pc}
   177ac:	bl	17d4c <__assert_fail@plt+0x6a28>
   177b0:	push	{r4, r5, r6, sl, fp, lr}
   177b4:	add	fp, sp, #16
   177b8:	mov	r4, r2
   177bc:	mov	r5, r1
   177c0:	mov	r6, r0
   177c4:	bl	198b8 <__assert_fail@plt+0x8594>
   177c8:	cmp	r0, #0
   177cc:	popne	{r4, r5, r6, sl, fp, pc}
   177d0:	cmp	r6, #0
   177d4:	beq	177e8 <__assert_fail@plt+0x64c4>
   177d8:	cmp	r5, #0
   177dc:	cmpne	r4, #0
   177e0:	bne	177e8 <__assert_fail@plt+0x64c4>
   177e4:	pop	{r4, r5, r6, sl, fp, pc}
   177e8:	bl	17d4c <__assert_fail@plt+0x6a28>
   177ec:	push	{fp, lr}
   177f0:	mov	fp, sp
   177f4:	bl	1957c <__assert_fail@plt+0x8258>
   177f8:	cmp	r0, #0
   177fc:	popne	{fp, pc}
   17800:	bl	17d4c <__assert_fail@plt+0x6a28>
   17804:	push	{fp, lr}
   17808:	mov	fp, sp
   1780c:	bl	1957c <__assert_fail@plt+0x8258>
   17810:	cmp	r0, #0
   17814:	popne	{fp, pc}
   17818:	bl	17d4c <__assert_fail@plt+0x6a28>
   1781c:	push	{fp, lr}
   17820:	mov	fp, sp
   17824:	bl	1957c <__assert_fail@plt+0x8258>
   17828:	cmp	r0, #0
   1782c:	popne	{fp, pc}
   17830:	bl	17d4c <__assert_fail@plt+0x6a28>
   17834:	push	{r4, r5, fp, lr}
   17838:	add	fp, sp, #8
   1783c:	mov	r4, r1
   17840:	mov	r5, r0
   17844:	bl	195ac <__assert_fail@plt+0x8288>
   17848:	cmp	r0, #0
   1784c:	popne	{r4, r5, fp, pc}
   17850:	cmp	r5, #0
   17854:	beq	17864 <__assert_fail@plt+0x6540>
   17858:	cmp	r4, #0
   1785c:	bne	17864 <__assert_fail@plt+0x6540>
   17860:	pop	{r4, r5, fp, pc}
   17864:	bl	17d4c <__assert_fail@plt+0x6a28>
   17868:	push	{fp, lr}
   1786c:	mov	fp, sp
   17870:	cmp	r1, #0
   17874:	orreq	r1, r1, #1
   17878:	bl	195ac <__assert_fail@plt+0x8288>
   1787c:	cmp	r0, #0
   17880:	popne	{fp, pc}
   17884:	bl	17d4c <__assert_fail@plt+0x6a28>
   17888:	push	{fp, lr}
   1788c:	mov	fp, sp
   17890:	clz	r3, r2
   17894:	lsr	ip, r3, #5
   17898:	clz	r3, r1
   1789c:	lsr	r3, r3, #5
   178a0:	orrs	r3, r3, ip
   178a4:	movwne	r1, #1
   178a8:	movwne	r2, #1
   178ac:	bl	198b8 <__assert_fail@plt+0x8594>
   178b0:	cmp	r0, #0
   178b4:	popne	{fp, pc}
   178b8:	bl	17d4c <__assert_fail@plt+0x6a28>
   178bc:	push	{fp, lr}
   178c0:	mov	fp, sp
   178c4:	mov	r2, r1
   178c8:	mov	r1, r0
   178cc:	mov	r0, #0
   178d0:	bl	198b8 <__assert_fail@plt+0x8594>
   178d4:	cmp	r0, #0
   178d8:	popne	{fp, pc}
   178dc:	bl	17d4c <__assert_fail@plt+0x6a28>
   178e0:	push	{fp, lr}
   178e4:	mov	fp, sp
   178e8:	mov	r2, r1
   178ec:	mov	r1, r0
   178f0:	clz	r0, r2
   178f4:	clz	r3, r1
   178f8:	lsr	r0, r0, #5
   178fc:	lsr	r3, r3, #5
   17900:	orrs	r0, r3, r0
   17904:	movwne	r1, #1
   17908:	movwne	r2, #1
   1790c:	mov	r0, #0
   17910:	bl	198b8 <__assert_fail@plt+0x8594>
   17914:	cmp	r0, #0
   17918:	popne	{fp, pc}
   1791c:	bl	17d4c <__assert_fail@plt+0x6a28>
   17920:	push	{r4, r5, r6, sl, fp, lr}
   17924:	add	fp, sp, #16
   17928:	ldr	r5, [r1]
   1792c:	mov	r4, r1
   17930:	mov	r6, r0
   17934:	cmp	r0, #0
   17938:	beq	17950 <__assert_fail@plt+0x662c>
   1793c:	mov	r0, #1
   17940:	add	r0, r0, r5, lsr #1
   17944:	adds	r5, r5, r0
   17948:	bcc	17958 <__assert_fail@plt+0x6634>
   1794c:	b	17994 <__assert_fail@plt+0x6670>
   17950:	cmp	r5, #0
   17954:	movweq	r5, #64	; 0x40
   17958:	mov	r0, r6
   1795c:	mov	r1, r5
   17960:	mov	r2, #1
   17964:	bl	198b8 <__assert_fail@plt+0x8594>
   17968:	cmp	r5, #0
   1796c:	mov	r1, r5
   17970:	movwne	r1, #1
   17974:	cmp	r0, #0
   17978:	bne	1798c <__assert_fail@plt+0x6668>
   1797c:	clz	r2, r6
   17980:	lsr	r2, r2, #5
   17984:	orrs	r1, r2, r1
   17988:	bne	17994 <__assert_fail@plt+0x6670>
   1798c:	str	r5, [r4]
   17990:	pop	{r4, r5, r6, sl, fp, pc}
   17994:	bl	17d4c <__assert_fail@plt+0x6a28>
   17998:	push	{r4, r5, r6, r7, fp, lr}
   1799c:	add	fp, sp, #16
   179a0:	ldr	r5, [r1]
   179a4:	mov	r6, r2
   179a8:	mov	r4, r1
   179ac:	mov	r7, r0
   179b0:	cmp	r0, #0
   179b4:	beq	179cc <__assert_fail@plt+0x66a8>
   179b8:	mov	r0, #1
   179bc:	add	r0, r0, r5, lsr #1
   179c0:	adds	r5, r5, r0
   179c4:	bcc	179e4 <__assert_fail@plt+0x66c0>
   179c8:	b	17a18 <__assert_fail@plt+0x66f4>
   179cc:	cmp	r5, #0
   179d0:	bne	179e4 <__assert_fail@plt+0x66c0>
   179d4:	mov	r0, #64	; 0x40
   179d8:	cmp	r6, #64	; 0x40
   179dc:	udiv	r5, r0, r6
   179e0:	addhi	r5, r5, #1
   179e4:	mov	r0, r7
   179e8:	mov	r1, r5
   179ec:	mov	r2, r6
   179f0:	bl	198b8 <__assert_fail@plt+0x8594>
   179f4:	cmp	r0, #0
   179f8:	bne	17a10 <__assert_fail@plt+0x66ec>
   179fc:	cmp	r7, #0
   17a00:	beq	17a18 <__assert_fail@plt+0x66f4>
   17a04:	cmp	r6, #0
   17a08:	cmpne	r5, #0
   17a0c:	bne	17a18 <__assert_fail@plt+0x66f4>
   17a10:	str	r5, [r4]
   17a14:	pop	{r4, r5, r6, r7, fp, pc}
   17a18:	bl	17d4c <__assert_fail@plt+0x6a28>
   17a1c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17a20:	add	fp, sp, #24
   17a24:	mov	r8, r1
   17a28:	ldr	r1, [r1]
   17a2c:	mov	r5, r0
   17a30:	add	r0, r1, r1, asr #1
   17a34:	cmp	r0, r1
   17a38:	mvnvs	r0, #-2147483648	; 0x80000000
   17a3c:	cmp	r0, r3
   17a40:	mov	r7, r0
   17a44:	movgt	r7, r3
   17a48:	cmn	r3, #1
   17a4c:	movle	r7, r0
   17a50:	ldr	r0, [fp, #8]
   17a54:	cmn	r0, #1
   17a58:	ble	17a80 <__assert_fail@plt+0x675c>
   17a5c:	cmp	r0, #0
   17a60:	beq	17ad4 <__assert_fail@plt+0x67b0>
   17a64:	cmn	r7, #1
   17a68:	ble	17aa8 <__assert_fail@plt+0x6784>
   17a6c:	mvn	r4, #-2147483648	; 0x80000000
   17a70:	udiv	r6, r4, r0
   17a74:	cmp	r6, r7
   17a78:	bge	17ad4 <__assert_fail@plt+0x67b0>
   17a7c:	b	17ae4 <__assert_fail@plt+0x67c0>
   17a80:	cmn	r7, #1
   17a84:	ble	17ac4 <__assert_fail@plt+0x67a0>
   17a88:	cmn	r0, #1
   17a8c:	beq	17ad4 <__assert_fail@plt+0x67b0>
   17a90:	mov	r6, #-2147483648	; 0x80000000
   17a94:	mvn	r4, #-2147483648	; 0x80000000
   17a98:	sdiv	r6, r6, r0
   17a9c:	cmp	r6, r7
   17aa0:	bge	17ad4 <__assert_fail@plt+0x67b0>
   17aa4:	b	17ae4 <__assert_fail@plt+0x67c0>
   17aa8:	beq	17ad4 <__assert_fail@plt+0x67b0>
   17aac:	mov	r6, #-2147483648	; 0x80000000
   17ab0:	mvn	r4, #-2147483648	; 0x80000000
   17ab4:	sdiv	r6, r6, r7
   17ab8:	cmp	r6, r0
   17abc:	bge	17ad4 <__assert_fail@plt+0x67b0>
   17ac0:	b	17ae4 <__assert_fail@plt+0x67c0>
   17ac4:	mvn	r4, #-2147483648	; 0x80000000
   17ac8:	sdiv	r6, r4, r0
   17acc:	cmp	r7, r6
   17ad0:	blt	17ae4 <__assert_fail@plt+0x67c0>
   17ad4:	mul	r6, r7, r0
   17ad8:	mov	r4, #64	; 0x40
   17adc:	cmp	r6, #63	; 0x3f
   17ae0:	bgt	17aec <__assert_fail@plt+0x67c8>
   17ae4:	sdiv	r7, r4, r0
   17ae8:	mul	r6, r7, r0
   17aec:	cmp	r5, #0
   17af0:	moveq	r4, #0
   17af4:	streq	r4, [r8]
   17af8:	sub	r4, r7, r1
   17afc:	cmp	r4, r2
   17b00:	bge	17bac <__assert_fail@plt+0x6888>
   17b04:	add	r7, r1, r2
   17b08:	mov	r6, #0
   17b0c:	mov	r2, #0
   17b10:	cmp	r7, r3
   17b14:	movwgt	r6, #1
   17b18:	cmn	r3, #1
   17b1c:	movwgt	r2, #1
   17b20:	cmp	r7, r1
   17b24:	bvs	17be0 <__assert_fail@plt+0x68bc>
   17b28:	ands	r1, r2, r6
   17b2c:	bne	17be0 <__assert_fail@plt+0x68bc>
   17b30:	cmn	r0, #1
   17b34:	ble	17b5c <__assert_fail@plt+0x6838>
   17b38:	cmp	r0, #0
   17b3c:	beq	17ba8 <__assert_fail@plt+0x6884>
   17b40:	cmn	r7, #1
   17b44:	ble	17b80 <__assert_fail@plt+0x685c>
   17b48:	mvn	r1, #-2147483648	; 0x80000000
   17b4c:	udiv	r1, r1, r0
   17b50:	cmp	r1, r7
   17b54:	bge	17ba8 <__assert_fail@plt+0x6884>
   17b58:	b	17be0 <__assert_fail@plt+0x68bc>
   17b5c:	cmn	r7, #1
   17b60:	ble	17b98 <__assert_fail@plt+0x6874>
   17b64:	cmn	r0, #1
   17b68:	beq	17ba8 <__assert_fail@plt+0x6884>
   17b6c:	mov	r1, #-2147483648	; 0x80000000
   17b70:	sdiv	r1, r1, r0
   17b74:	cmp	r1, r7
   17b78:	bge	17ba8 <__assert_fail@plt+0x6884>
   17b7c:	b	17be0 <__assert_fail@plt+0x68bc>
   17b80:	beq	17ba8 <__assert_fail@plt+0x6884>
   17b84:	mov	r1, #-2147483648	; 0x80000000
   17b88:	sdiv	r1, r1, r7
   17b8c:	cmp	r1, r0
   17b90:	bge	17ba8 <__assert_fail@plt+0x6884>
   17b94:	b	17be0 <__assert_fail@plt+0x68bc>
   17b98:	mvn	r1, #-2147483648	; 0x80000000
   17b9c:	sdiv	r1, r1, r0
   17ba0:	cmp	r7, r1
   17ba4:	blt	17be0 <__assert_fail@plt+0x68bc>
   17ba8:	mul	r6, r7, r0
   17bac:	mov	r0, r5
   17bb0:	mov	r1, r6
   17bb4:	bl	195ac <__assert_fail@plt+0x8288>
   17bb8:	cmp	r6, #0
   17bbc:	movwne	r6, #1
   17bc0:	cmp	r0, #0
   17bc4:	bne	17bd8 <__assert_fail@plt+0x68b4>
   17bc8:	clz	r1, r5
   17bcc:	lsr	r1, r1, #5
   17bd0:	orrs	r1, r1, r6
   17bd4:	bne	17be0 <__assert_fail@plt+0x68bc>
   17bd8:	str	r7, [r8]
   17bdc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17be0:	bl	17d4c <__assert_fail@plt+0x6a28>
   17be4:	push	{fp, lr}
   17be8:	mov	fp, sp
   17bec:	mov	r1, #1
   17bf0:	bl	19528 <__assert_fail@plt+0x8204>
   17bf4:	cmp	r0, #0
   17bf8:	popne	{fp, pc}
   17bfc:	bl	17d4c <__assert_fail@plt+0x6a28>
   17c00:	push	{fp, lr}
   17c04:	mov	fp, sp
   17c08:	bl	19528 <__assert_fail@plt+0x8204>
   17c0c:	cmp	r0, #0
   17c10:	popne	{fp, pc}
   17c14:	bl	17d4c <__assert_fail@plt+0x6a28>
   17c18:	push	{fp, lr}
   17c1c:	mov	fp, sp
   17c20:	mov	r1, #1
   17c24:	bl	19528 <__assert_fail@plt+0x8204>
   17c28:	cmp	r0, #0
   17c2c:	popne	{fp, pc}
   17c30:	bl	17d4c <__assert_fail@plt+0x6a28>
   17c34:	push	{fp, lr}
   17c38:	mov	fp, sp
   17c3c:	bl	19528 <__assert_fail@plt+0x8204>
   17c40:	cmp	r0, #0
   17c44:	popne	{fp, pc}
   17c48:	bl	17d4c <__assert_fail@plt+0x6a28>
   17c4c:	push	{r4, r5, r6, sl, fp, lr}
   17c50:	add	fp, sp, #16
   17c54:	mov	r5, r0
   17c58:	mov	r0, r1
   17c5c:	mov	r4, r1
   17c60:	bl	1957c <__assert_fail@plt+0x8258>
   17c64:	cmp	r0, #0
   17c68:	beq	17c84 <__assert_fail@plt+0x6960>
   17c6c:	mov	r1, r5
   17c70:	mov	r2, r4
   17c74:	mov	r6, r0
   17c78:	bl	110e4 <memcpy@plt>
   17c7c:	mov	r0, r6
   17c80:	pop	{r4, r5, r6, sl, fp, pc}
   17c84:	bl	17d4c <__assert_fail@plt+0x6a28>
   17c88:	push	{r4, r5, r6, sl, fp, lr}
   17c8c:	add	fp, sp, #16
   17c90:	mov	r5, r0
   17c94:	mov	r0, r1
   17c98:	mov	r4, r1
   17c9c:	bl	1957c <__assert_fail@plt+0x8258>
   17ca0:	cmp	r0, #0
   17ca4:	beq	17cc0 <__assert_fail@plt+0x699c>
   17ca8:	mov	r1, r5
   17cac:	mov	r2, r4
   17cb0:	mov	r6, r0
   17cb4:	bl	110e4 <memcpy@plt>
   17cb8:	mov	r0, r6
   17cbc:	pop	{r4, r5, r6, sl, fp, pc}
   17cc0:	bl	17d4c <__assert_fail@plt+0x6a28>
   17cc4:	push	{r4, r5, r6, sl, fp, lr}
   17cc8:	add	fp, sp, #16
   17ccc:	mov	r5, r0
   17cd0:	add	r0, r1, #1
   17cd4:	mov	r4, r1
   17cd8:	bl	1957c <__assert_fail@plt+0x8258>
   17cdc:	cmp	r0, #0
   17ce0:	beq	17d08 <__assert_fail@plt+0x69e4>
   17ce4:	mov	r6, r0
   17ce8:	mov	r0, #0
   17cec:	mov	r1, r5
   17cf0:	mov	r2, r4
   17cf4:	strb	r0, [r6, r4]
   17cf8:	mov	r0, r6
   17cfc:	bl	110e4 <memcpy@plt>
   17d00:	mov	r0, r6
   17d04:	pop	{r4, r5, r6, sl, fp, pc}
   17d08:	bl	17d4c <__assert_fail@plt+0x6a28>
   17d0c:	push	{r4, r5, r6, sl, fp, lr}
   17d10:	add	fp, sp, #16
   17d14:	mov	r4, r0
   17d18:	bl	111f8 <strlen@plt>
   17d1c:	add	r5, r0, #1
   17d20:	mov	r0, r5
   17d24:	bl	1957c <__assert_fail@plt+0x8258>
   17d28:	cmp	r0, #0
   17d2c:	beq	17d48 <__assert_fail@plt+0x6a24>
   17d30:	mov	r1, r4
   17d34:	mov	r2, r5
   17d38:	mov	r6, r0
   17d3c:	bl	110e4 <memcpy@plt>
   17d40:	mov	r0, r6
   17d44:	pop	{r4, r5, r6, sl, fp, pc}
   17d48:	bl	17d4c <__assert_fail@plt+0x6a28>
   17d4c:	push	{fp, lr}
   17d50:	mov	fp, sp
   17d54:	movw	r0, #53548	; 0xd12c
   17d58:	movw	r1, #49924	; 0xc304
   17d5c:	mov	r2, #5
   17d60:	movt	r0, #2
   17d64:	movt	r1, #1
   17d68:	ldr	r4, [r0]
   17d6c:	mov	r0, #0
   17d70:	bl	11114 <dcgettext@plt>
   17d74:	movw	r2, #48873	; 0xbee9
   17d78:	mov	r3, r0
   17d7c:	mov	r0, r4
   17d80:	mov	r1, #0
   17d84:	movt	r2, #1
   17d88:	bl	11198 <error@plt>
   17d8c:	bl	112f4 <abort@plt>
   17d90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d94:	add	fp, sp, #28
   17d98:	sub	sp, sp, #12
   17d9c:	cmp	r2, #37	; 0x25
   17da0:	bcs	18868 <__assert_fail@plt+0x7544>
   17da4:	ldr	r8, [fp, #8]
   17da8:	mov	r9, r3
   17dac:	mov	r7, r2
   17db0:	mov	r4, r1
   17db4:	mov	r5, r0
   17db8:	bl	11210 <__errno_location@plt>
   17dbc:	add	sl, sp, #8
   17dc0:	cmp	r4, #0
   17dc4:	mov	r6, r0
   17dc8:	mov	r0, #0
   17dcc:	mov	r2, r7
   17dd0:	movne	sl, r4
   17dd4:	str	r0, [r6]
   17dd8:	mov	r0, r5
   17ddc:	mov	r1, sl
   17de0:	bl	1109c <strtol@plt>
   17de4:	ldr	r4, [sl]
   17de8:	str	r9, [sp, #4]
   17dec:	cmp	r4, r5
   17df0:	beq	17e20 <__assert_fail@plt+0x6afc>
   17df4:	mov	r7, r0
   17df8:	ldr	r0, [r6]
   17dfc:	cmp	r0, #0
   17e00:	beq	17e50 <__assert_fail@plt+0x6b2c>
   17e04:	mov	r9, #4
   17e08:	cmp	r0, #34	; 0x22
   17e0c:	bne	18844 <__assert_fail@plt+0x7520>
   17e10:	mov	r9, #1
   17e14:	cmp	r8, #0
   17e18:	bne	17e5c <__assert_fail@plt+0x6b38>
   17e1c:	b	1883c <__assert_fail@plt+0x7518>
   17e20:	cmp	r8, #0
   17e24:	mov	r9, #4
   17e28:	ldrbne	r1, [r5]
   17e2c:	cmpne	r1, #0
   17e30:	beq	18844 <__assert_fail@plt+0x7520>
   17e34:	mov	r0, r8
   17e38:	bl	11204 <strchr@plt>
   17e3c:	cmp	r0, #0
   17e40:	beq	18844 <__assert_fail@plt+0x7520>
   17e44:	mov	r7, #1
   17e48:	mov	r9, #0
   17e4c:	b	17e5c <__assert_fail@plt+0x6b38>
   17e50:	mov	r9, r0
   17e54:	cmp	r8, #0
   17e58:	beq	1883c <__assert_fail@plt+0x7518>
   17e5c:	ldrb	r5, [r4]
   17e60:	cmp	r5, #0
   17e64:	beq	1883c <__assert_fail@plt+0x7518>
   17e68:	mov	r0, r8
   17e6c:	mov	r1, r5
   17e70:	bl	11204 <strchr@plt>
   17e74:	cmp	r0, #0
   17e78:	beq	180b8 <__assert_fail@plt+0x6d94>
   17e7c:	sub	r0, r5, #69	; 0x45
   17e80:	mov	ip, #1
   17e84:	mov	r6, #1024	; 0x400
   17e88:	cmp	r0, #47	; 0x2f
   17e8c:	bhi	17fa8 <__assert_fail@plt+0x6c84>
   17e90:	add	r1, pc, #0
   17e94:	ldr	pc, [r1, r0, lsl #2]
   17e98:	andeq	r7, r1, r8, asr pc
   17e9c:	andeq	r7, r1, r8, lsr #31
   17ea0:	andeq	r7, r1, r8, asr pc
   17ea4:	andeq	r7, r1, r8, lsr #31
   17ea8:	andeq	r7, r1, r8, lsr #31
   17eac:	andeq	r7, r1, r8, lsr #31
   17eb0:	andeq	r7, r1, r8, asr pc
   17eb4:	andeq	r7, r1, r8, lsr #31
   17eb8:	andeq	r7, r1, r8, asr pc
   17ebc:	andeq	r7, r1, r8, lsr #31
   17ec0:	andeq	r7, r1, r8, lsr #31
   17ec4:	andeq	r7, r1, r8, asr pc
   17ec8:	andeq	r7, r1, r8, lsr #31
   17ecc:	andeq	r7, r1, r8, lsr #31
   17ed0:	andeq	r7, r1, r8, lsr #31
   17ed4:	andeq	r7, r1, r8, asr pc
   17ed8:	andeq	r7, r1, r8, lsr #31
   17edc:	andeq	r7, r1, r8, lsr #31
   17ee0:	andeq	r7, r1, r8, lsr #31
   17ee4:	andeq	r7, r1, r8, lsr #31
   17ee8:	andeq	r7, r1, r8, asr pc
   17eec:	andeq	r7, r1, r8, asr pc
   17ef0:	andeq	r7, r1, r8, lsr #31
   17ef4:	andeq	r7, r1, r8, lsr #31
   17ef8:	andeq	r7, r1, r8, lsr #31
   17efc:	andeq	r7, r1, r8, lsr #31
   17f00:	andeq	r7, r1, r8, lsr #31
   17f04:	andeq	r7, r1, r8, lsr #31
   17f08:	andeq	r7, r1, r8, lsr #31
   17f0c:	andeq	r7, r1, r8, lsr #31
   17f10:	andeq	r7, r1, r8, lsr #31
   17f14:	andeq	r7, r1, r8, lsr #31
   17f18:	andeq	r7, r1, r8, lsr #31
   17f1c:	andeq	r7, r1, r8, lsr #31
   17f20:	andeq	r7, r1, r8, asr pc
   17f24:	andeq	r7, r1, r8, lsr #31
   17f28:	andeq	r7, r1, r8, lsr #31
   17f2c:	andeq	r7, r1, r8, lsr #31
   17f30:	andeq	r7, r1, r8, asr pc
   17f34:	andeq	r7, r1, r8, lsr #31
   17f38:	andeq	r7, r1, r8, asr pc
   17f3c:	andeq	r7, r1, r8, lsr #31
   17f40:	andeq	r7, r1, r8, lsr #31
   17f44:	andeq	r7, r1, r8, lsr #31
   17f48:	andeq	r7, r1, r8, lsr #31
   17f4c:	andeq	r7, r1, r8, lsr #31
   17f50:	andeq	r7, r1, r8, lsr #31
   17f54:	andeq	r7, r1, r8, asr pc
   17f58:	mov	r0, r8
   17f5c:	mov	r1, #48	; 0x30
   17f60:	bl	11204 <strchr@plt>
   17f64:	cmp	r0, #0
   17f68:	beq	17fa4 <__assert_fail@plt+0x6c80>
   17f6c:	ldrb	r0, [r4, #1]
   17f70:	cmp	r0, #66	; 0x42
   17f74:	cmpne	r0, #68	; 0x44
   17f78:	bne	17f88 <__assert_fail@plt+0x6c64>
   17f7c:	mov	ip, #2
   17f80:	mov	r6, #1000	; 0x3e8
   17f84:	b	17fa8 <__assert_fail@plt+0x6c84>
   17f88:	cmp	r0, #105	; 0x69
   17f8c:	bne	17fa4 <__assert_fail@plt+0x6c80>
   17f90:	ldrb	r0, [r4, #2]
   17f94:	mov	ip, #1
   17f98:	cmp	r0, #66	; 0x42
   17f9c:	movweq	ip, #3
   17fa0:	b	17fa8 <__assert_fail@plt+0x6c84>
   17fa4:	mov	ip, #1
   17fa8:	sub	r1, r5, #66	; 0x42
   17fac:	cmp	r1, #53	; 0x35
   17fb0:	bhi	180b8 <__assert_fail@plt+0x6d94>
   17fb4:	add	r2, pc, #4
   17fb8:	mov	r0, #0
   17fbc:	ldr	pc, [r2, r1, lsl #2]
   17fc0:	andeq	r8, r1, r0, asr #2
   17fc4:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   17fc8:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   17fcc:	andeq	r8, r1, r4, asr r1
   17fd0:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   17fd4:	muleq	r1, r8, r0
   17fd8:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   17fdc:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   17fe0:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   17fe4:	andeq	r8, r1, r4, asr #1
   17fe8:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   17fec:	andeq	r8, r1, r0, ror #1
   17ff0:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   17ff4:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   17ff8:	andeq	r8, r1, r4, ror r1
   17ffc:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   18000:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   18004:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   18008:	andeq	r8, r1, r0, lsl #2
   1800c:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   18010:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   18014:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   18018:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   1801c:	muleq	r1, r4, r1
   18020:	andeq	r8, r1, r0, lsr #2
   18024:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   18028:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   1802c:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   18030:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   18034:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   18038:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   1803c:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   18040:			; <UNDEFINED> instruction: 0x000181b4
   18044:	andeq	r8, r1, r4, lsr #16
   18048:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   1804c:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   18050:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   18054:	muleq	r1, r8, r0
   18058:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   1805c:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   18060:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   18064:	andeq	r8, r1, r4, asr #1
   18068:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   1806c:	andeq	r8, r1, r0, ror #1
   18070:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   18074:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   18078:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   1807c:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   18080:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   18084:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   18088:	andeq	r8, r1, r0, lsl #2
   1808c:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   18090:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   18094:	ldrdeq	r8, [r1], -r4
   18098:	cmn	r7, #1
   1809c:	ble	181e8 <__assert_fail@plt+0x6ec4>
   180a0:	mvn	r2, #-2147483648	; 0x80000000
   180a4:	mov	r3, #1
   180a8:	udiv	r0, r2, r6
   180ac:	cmp	r0, r7
   180b0:	bge	18200 <__assert_fail@plt+0x6edc>
   180b4:	b	182c0 <__assert_fail@plt+0x6f9c>
   180b8:	ldr	r0, [sp, #4]
   180bc:	orr	r9, r9, #2
   180c0:	b	18840 <__assert_fail@plt+0x751c>
   180c4:	cmn	r7, #1
   180c8:	ble	18214 <__assert_fail@plt+0x6ef0>
   180cc:	mvn	r1, #-2147483648	; 0x80000000
   180d0:	udiv	r1, r1, r6
   180d4:	cmp	r1, r7
   180d8:	bge	18228 <__assert_fail@plt+0x6f04>
   180dc:	b	18490 <__assert_fail@plt+0x716c>
   180e0:	cmn	r7, #1
   180e4:	ble	18230 <__assert_fail@plt+0x6f0c>
   180e8:	mvn	r1, #-2147483648	; 0x80000000
   180ec:	mov	r0, #1
   180f0:	udiv	r2, r1, r6
   180f4:	cmp	r2, r7
   180f8:	bge	18248 <__assert_fail@plt+0x6f24>
   180fc:	b	182fc <__assert_fail@plt+0x6fd8>
   18100:	cmn	r7, #1
   18104:	ble	1825c <__assert_fail@plt+0x6f38>
   18108:	mvn	r0, #-2147483648	; 0x80000000
   1810c:	mov	r1, #1
   18110:	udiv	r2, r0, r6
   18114:	cmp	r2, r7
   18118:	bge	18274 <__assert_fail@plt+0x6f50>
   1811c:	b	18284 <__assert_fail@plt+0x6f60>
   18120:	cmp	r7, #0
   18124:	blt	18334 <__assert_fail@plt+0x7010>
   18128:	mvn	r0, #-2147483648	; 0x80000000
   1812c:	mov	r3, #1
   18130:	udiv	r1, r0, r6
   18134:	cmp	r1, r7
   18138:	bge	18350 <__assert_fail@plt+0x702c>
   1813c:	b	18360 <__assert_fail@plt+0x703c>
   18140:	cmn	r7, #1
   18144:	ble	18378 <__assert_fail@plt+0x7054>
   18148:	cmp	r7, #2097152	; 0x200000
   1814c:	blt	1838c <__assert_fail@plt+0x7068>
   18150:	b	18490 <__assert_fail@plt+0x716c>
   18154:	cmp	r7, #0
   18158:	blt	18394 <__assert_fail@plt+0x7070>
   1815c:	mvn	r0, #-2147483648	; 0x80000000
   18160:	mov	r3, #1
   18164:	udiv	r1, r0, r6
   18168:	cmp	r1, r7
   1816c:	bge	183b0 <__assert_fail@plt+0x708c>
   18170:	b	183c0 <__assert_fail@plt+0x709c>
   18174:	cmp	r7, #0
   18178:	blt	183d8 <__assert_fail@plt+0x70b4>
   1817c:	mvn	r0, #-2147483648	; 0x80000000
   18180:	mov	r3, #1
   18184:	udiv	r1, r0, r6
   18188:	cmp	r1, r7
   1818c:	bge	183f4 <__assert_fail@plt+0x70d0>
   18190:	b	18404 <__assert_fail@plt+0x70e0>
   18194:	cmp	r7, #0
   18198:	blt	1841c <__assert_fail@plt+0x70f8>
   1819c:	mvn	r0, #-2147483648	; 0x80000000
   181a0:	mov	r3, #1
   181a4:	udiv	r1, r0, r6
   181a8:	cmp	r1, r7
   181ac:	bge	18438 <__assert_fail@plt+0x7114>
   181b0:	b	18448 <__assert_fail@plt+0x7124>
   181b4:	cmn	r7, #1
   181b8:	ble	18460 <__assert_fail@plt+0x713c>
   181bc:	movw	r1, #65535	; 0xffff
   181c0:	movt	r1, #31
   181c4:	add	r1, r1, #2097152	; 0x200000
   181c8:	cmp	r7, r1
   181cc:	ble	18474 <__assert_fail@plt+0x7150>
   181d0:	b	18490 <__assert_fail@plt+0x716c>
   181d4:	cmn	r7, #1
   181d8:	ble	1847c <__assert_fail@plt+0x7158>
   181dc:	cmp	r7, #1073741824	; 0x40000000
   181e0:	bge	18490 <__assert_fail@plt+0x716c>
   181e4:	b	184a8 <__assert_fail@plt+0x7184>
   181e8:	beq	18200 <__assert_fail@plt+0x6edc>
   181ec:	mov	r2, #-2147483648	; 0x80000000
   181f0:	mov	r3, #1
   181f4:	sdiv	r0, r2, r7
   181f8:	cmp	r0, r6
   181fc:	blt	182d8 <__assert_fail@plt+0x6fb4>
   18200:	mul	r2, r7, r6
   18204:	mov	r3, #0
   18208:	cmp	r2, #0
   1820c:	bge	182c0 <__assert_fail@plt+0x6f9c>
   18210:	b	182d8 <__assert_fail@plt+0x6fb4>
   18214:	beq	18228 <__assert_fail@plt+0x6f04>
   18218:	mov	r1, #-2147483648	; 0x80000000
   1821c:	sdiv	r1, r1, r7
   18220:	cmp	r1, r6
   18224:	blt	18490 <__assert_fail@plt+0x716c>
   18228:	mul	r7, r7, r6
   1822c:	b	18824 <__assert_fail@plt+0x7500>
   18230:	beq	18248 <__assert_fail@plt+0x6f24>
   18234:	mov	r1, #-2147483648	; 0x80000000
   18238:	mov	r0, #1
   1823c:	sdiv	r2, r1, r7
   18240:	cmp	r2, r6
   18244:	blt	18314 <__assert_fail@plt+0x6ff0>
   18248:	mul	r1, r7, r6
   1824c:	mov	r0, #0
   18250:	cmp	r1, #0
   18254:	bge	182fc <__assert_fail@plt+0x6fd8>
   18258:	b	18314 <__assert_fail@plt+0x6ff0>
   1825c:	beq	18274 <__assert_fail@plt+0x6f50>
   18260:	mov	r0, #-2147483648	; 0x80000000
   18264:	mov	r1, #1
   18268:	sdiv	r2, r0, r7
   1826c:	cmp	r2, r6
   18270:	blt	1829c <__assert_fail@plt+0x6f78>
   18274:	mul	r0, r7, r6
   18278:	mov	r1, #0
   1827c:	cmp	r0, #0
   18280:	blt	1829c <__assert_fail@plt+0x6f78>
   18284:	mvn	r2, #-2147483648	; 0x80000000
   18288:	mov	r3, #1
   1828c:	udiv	r7, r2, r6
   18290:	cmp	r7, r0
   18294:	blt	182c0 <__assert_fail@plt+0x6f9c>
   18298:	b	182b0 <__assert_fail@plt+0x6f8c>
   1829c:	mov	r2, #-2147483648	; 0x80000000
   182a0:	mov	r3, #1
   182a4:	sdiv	r7, r2, r0
   182a8:	cmp	r7, r6
   182ac:	blt	182d8 <__assert_fail@plt+0x6fb4>
   182b0:	mul	r2, r0, r6
   182b4:	mov	r3, r1
   182b8:	cmp	r2, #0
   182bc:	blt	182d8 <__assert_fail@plt+0x6fb4>
   182c0:	mvn	r1, #-2147483648	; 0x80000000
   182c4:	mov	r0, #1
   182c8:	udiv	r7, r1, r6
   182cc:	cmp	r7, r2
   182d0:	blt	182fc <__assert_fail@plt+0x6fd8>
   182d4:	b	182ec <__assert_fail@plt+0x6fc8>
   182d8:	mov	r1, #-2147483648	; 0x80000000
   182dc:	mov	r0, #1
   182e0:	sdiv	r7, r1, r2
   182e4:	cmp	r7, r6
   182e8:	blt	18314 <__assert_fail@plt+0x6ff0>
   182ec:	mul	r1, r2, r6
   182f0:	mov	r0, r3
   182f4:	cmp	r1, #0
   182f8:	blt	18314 <__assert_fail@plt+0x6ff0>
   182fc:	mvn	r7, #-2147483648	; 0x80000000
   18300:	mov	r2, #1
   18304:	udiv	r3, r7, r6
   18308:	cmp	r3, r1
   1830c:	blt	18820 <__assert_fail@plt+0x74fc>
   18310:	b	18328 <__assert_fail@plt+0x7004>
   18314:	mov	r7, #-2147483648	; 0x80000000
   18318:	mov	r2, #1
   1831c:	sdiv	r3, r7, r1
   18320:	cmp	r3, r6
   18324:	blt	18820 <__assert_fail@plt+0x74fc>
   18328:	mov	r2, #0
   1832c:	mul	r7, r1, r6
   18330:	b	18820 <__assert_fail@plt+0x74fc>
   18334:	cmn	r7, #1
   18338:	beq	18350 <__assert_fail@plt+0x702c>
   1833c:	mov	r0, #-2147483648	; 0x80000000
   18340:	mov	r3, #1
   18344:	sdiv	r1, r0, r7
   18348:	cmp	r1, r6
   1834c:	blt	184b0 <__assert_fail@plt+0x718c>
   18350:	mul	r0, r7, r6
   18354:	mov	r3, #0
   18358:	cmp	r0, #0
   1835c:	blt	184b0 <__assert_fail@plt+0x718c>
   18360:	mvn	r1, #-2147483648	; 0x80000000
   18364:	mov	r2, #1
   18368:	udiv	r7, r1, r6
   1836c:	cmp	r7, r0
   18370:	bge	184c4 <__assert_fail@plt+0x71a0>
   18374:	b	184d4 <__assert_fail@plt+0x71b0>
   18378:	beq	1838c <__assert_fail@plt+0x7068>
   1837c:	mov	r1, #-2147483648	; 0x80000000
   18380:	sdiv	r1, r1, r7
   18384:	cmp	r1, #1024	; 0x400
   18388:	blt	18490 <__assert_fail@plt+0x716c>
   1838c:	lsl	r7, r7, #10
   18390:	b	18824 <__assert_fail@plt+0x7500>
   18394:	cmn	r7, #1
   18398:	beq	183b0 <__assert_fail@plt+0x708c>
   1839c:	mov	r0, #-2147483648	; 0x80000000
   183a0:	mov	r3, #1
   183a4:	sdiv	r1, r0, r7
   183a8:	cmp	r1, r6
   183ac:	blt	18580 <__assert_fail@plt+0x725c>
   183b0:	mul	r0, r7, r6
   183b4:	mov	r3, #0
   183b8:	cmp	r0, #0
   183bc:	blt	18580 <__assert_fail@plt+0x725c>
   183c0:	mvn	r1, #-2147483648	; 0x80000000
   183c4:	mov	r2, #1
   183c8:	udiv	r7, r1, r6
   183cc:	cmp	r7, r0
   183d0:	bge	18594 <__assert_fail@plt+0x7270>
   183d4:	b	185a4 <__assert_fail@plt+0x7280>
   183d8:	cmn	r7, #1
   183dc:	beq	183f4 <__assert_fail@plt+0x70d0>
   183e0:	mov	r0, #-2147483648	; 0x80000000
   183e4:	mov	r3, #1
   183e8:	sdiv	r1, r0, r7
   183ec:	cmp	r1, r6
   183f0:	blt	18650 <__assert_fail@plt+0x732c>
   183f4:	mul	r0, r7, r6
   183f8:	mov	r3, #0
   183fc:	cmp	r0, #0
   18400:	blt	18650 <__assert_fail@plt+0x732c>
   18404:	mvn	r1, #-2147483648	; 0x80000000
   18408:	mov	r2, #1
   1840c:	udiv	r7, r1, r6
   18410:	cmp	r7, r0
   18414:	bge	18664 <__assert_fail@plt+0x7340>
   18418:	b	18674 <__assert_fail@plt+0x7350>
   1841c:	cmn	r7, #1
   18420:	beq	18438 <__assert_fail@plt+0x7114>
   18424:	mov	r0, #-2147483648	; 0x80000000
   18428:	mov	r3, #1
   1842c:	sdiv	r1, r0, r7
   18430:	cmp	r1, r6
   18434:	blt	186b4 <__assert_fail@plt+0x7390>
   18438:	mul	r0, r7, r6
   1843c:	mov	r3, #0
   18440:	cmp	r0, #0
   18444:	blt	186b4 <__assert_fail@plt+0x7390>
   18448:	mvn	r1, #-2147483648	; 0x80000000
   1844c:	mov	r2, #1
   18450:	udiv	r7, r1, r6
   18454:	cmp	r7, r0
   18458:	bge	186c8 <__assert_fail@plt+0x73a4>
   1845c:	b	186d8 <__assert_fail@plt+0x73b4>
   18460:	beq	18474 <__assert_fail@plt+0x7150>
   18464:	mov	r1, #-2147483648	; 0x80000000
   18468:	sdiv	r1, r1, r7
   1846c:	cmp	r1, #512	; 0x200
   18470:	blt	18490 <__assert_fail@plt+0x716c>
   18474:	lsl	r7, r7, #9
   18478:	b	18824 <__assert_fail@plt+0x7500>
   1847c:	beq	184a8 <__assert_fail@plt+0x7184>
   18480:	mov	r1, #-2147483648	; 0x80000000
   18484:	sdiv	r1, r1, r7
   18488:	cmp	r1, #2
   1848c:	bge	184a8 <__assert_fail@plt+0x7184>
   18490:	mvn	r1, #-2147483648	; 0x80000000
   18494:	cmp	r7, #0
   18498:	mov	r0, #1
   1849c:	movlt	r1, #-2147483648	; 0x80000000
   184a0:	mov	r7, r1
   184a4:	b	18824 <__assert_fail@plt+0x7500>
   184a8:	lsl	r7, r7, #1
   184ac:	b	18824 <__assert_fail@plt+0x7500>
   184b0:	mov	r1, #-2147483648	; 0x80000000
   184b4:	mov	r2, #1
   184b8:	sdiv	r7, r1, r0
   184bc:	cmp	r7, r6
   184c0:	blt	184ec <__assert_fail@plt+0x71c8>
   184c4:	mul	r1, r0, r6
   184c8:	mov	r2, r3
   184cc:	cmp	r1, #0
   184d0:	blt	184ec <__assert_fail@plt+0x71c8>
   184d4:	mvn	r3, #-2147483648	; 0x80000000
   184d8:	mov	r0, #1
   184dc:	udiv	r7, r3, r6
   184e0:	cmp	r7, r1
   184e4:	bge	18500 <__assert_fail@plt+0x71dc>
   184e8:	b	18510 <__assert_fail@plt+0x71ec>
   184ec:	mov	r3, #-2147483648	; 0x80000000
   184f0:	mov	r0, #1
   184f4:	sdiv	r7, r3, r1
   184f8:	cmp	r7, r6
   184fc:	blt	18528 <__assert_fail@plt+0x7204>
   18500:	mul	r3, r1, r6
   18504:	mov	r0, r2
   18508:	cmp	r3, #0
   1850c:	blt	18528 <__assert_fail@plt+0x7204>
   18510:	mvn	r1, #-2147483648	; 0x80000000
   18514:	udiv	r2, r1, r6
   18518:	cmp	r2, r3
   1851c:	bge	18540 <__assert_fail@plt+0x721c>
   18520:	mov	r0, #1
   18524:	b	1854c <__assert_fail@plt+0x7228>
   18528:	mov	r1, #-2147483648	; 0x80000000
   1852c:	sdiv	r2, r1, r3
   18530:	cmp	r2, r6
   18534:	bge	18540 <__assert_fail@plt+0x721c>
   18538:	mov	r0, #1
   1853c:	b	18560 <__assert_fail@plt+0x723c>
   18540:	mul	r1, r3, r6
   18544:	cmp	r1, #0
   18548:	blt	18560 <__assert_fail@plt+0x723c>
   1854c:	mvn	r2, #-2147483648	; 0x80000000
   18550:	udiv	r3, r2, r6
   18554:	cmp	r3, r1
   18558:	bge	18570 <__assert_fail@plt+0x724c>
   1855c:	b	185f0 <__assert_fail@plt+0x72cc>
   18560:	mov	r2, #-2147483648	; 0x80000000
   18564:	sdiv	r3, r2, r1
   18568:	cmp	r3, r6
   1856c:	blt	18608 <__assert_fail@plt+0x72e4>
   18570:	mul	r2, r1, r6
   18574:	cmp	r2, #0
   18578:	bge	1861c <__assert_fail@plt+0x72f8>
   1857c:	b	18630 <__assert_fail@plt+0x730c>
   18580:	mov	r1, #-2147483648	; 0x80000000
   18584:	mov	r2, #1
   18588:	sdiv	r7, r1, r0
   1858c:	cmp	r7, r6
   18590:	blt	185bc <__assert_fail@plt+0x7298>
   18594:	mul	r1, r0, r6
   18598:	mov	r2, r3
   1859c:	cmp	r1, #0
   185a0:	blt	185bc <__assert_fail@plt+0x7298>
   185a4:	mvn	r3, #-2147483648	; 0x80000000
   185a8:	mov	r0, #1
   185ac:	udiv	r7, r3, r6
   185b0:	cmp	r7, r1
   185b4:	bge	185d0 <__assert_fail@plt+0x72ac>
   185b8:	b	185e0 <__assert_fail@plt+0x72bc>
   185bc:	mov	r3, #-2147483648	; 0x80000000
   185c0:	mov	r0, #1
   185c4:	sdiv	r7, r3, r1
   185c8:	cmp	r7, r6
   185cc:	blt	185f8 <__assert_fail@plt+0x72d4>
   185d0:	mul	r3, r1, r6
   185d4:	mov	r0, r2
   185d8:	cmp	r3, #0
   185dc:	blt	185f8 <__assert_fail@plt+0x72d4>
   185e0:	mvn	r2, #-2147483648	; 0x80000000
   185e4:	udiv	r1, r2, r6
   185e8:	cmp	r1, r3
   185ec:	bge	18610 <__assert_fail@plt+0x72ec>
   185f0:	mov	r0, #1
   185f4:	b	1861c <__assert_fail@plt+0x72f8>
   185f8:	mov	r2, #-2147483648	; 0x80000000
   185fc:	sdiv	r1, r2, r3
   18600:	cmp	r1, r6
   18604:	bge	18610 <__assert_fail@plt+0x72ec>
   18608:	mov	r0, #1
   1860c:	b	18630 <__assert_fail@plt+0x730c>
   18610:	mul	r2, r3, r6
   18614:	cmp	r2, #0
   18618:	blt	18630 <__assert_fail@plt+0x730c>
   1861c:	mvn	r1, #-2147483648	; 0x80000000
   18620:	udiv	r3, r1, r6
   18624:	cmp	r3, r2
   18628:	bge	18640 <__assert_fail@plt+0x731c>
   1862c:	b	187d8 <__assert_fail@plt+0x74b4>
   18630:	mov	r1, #-2147483648	; 0x80000000
   18634:	sdiv	r3, r1, r2
   18638:	cmp	r3, r6
   1863c:	blt	187f0 <__assert_fail@plt+0x74cc>
   18640:	mul	r1, r2, r6
   18644:	cmp	r1, #0
   18648:	bge	18804 <__assert_fail@plt+0x74e0>
   1864c:	b	18850 <__assert_fail@plt+0x752c>
   18650:	mov	r1, #-2147483648	; 0x80000000
   18654:	mov	r2, #1
   18658:	sdiv	r7, r1, r0
   1865c:	cmp	r7, r6
   18660:	blt	1868c <__assert_fail@plt+0x7368>
   18664:	mul	r1, r0, r6
   18668:	mov	r2, r3
   1866c:	cmp	r1, #0
   18670:	blt	1868c <__assert_fail@plt+0x7368>
   18674:	mvn	r3, #-2147483648	; 0x80000000
   18678:	mov	r0, #1
   1867c:	udiv	r7, r3, r6
   18680:	cmp	r7, r1
   18684:	bge	186a0 <__assert_fail@plt+0x737c>
   18688:	b	187c8 <__assert_fail@plt+0x74a4>
   1868c:	mov	r3, #-2147483648	; 0x80000000
   18690:	mov	r0, #1
   18694:	sdiv	r7, r3, r1
   18698:	cmp	r7, r6
   1869c:	blt	187e0 <__assert_fail@plt+0x74bc>
   186a0:	mul	r3, r1, r6
   186a4:	mov	r0, r2
   186a8:	cmp	r3, #0
   186ac:	bge	187c8 <__assert_fail@plt+0x74a4>
   186b0:	b	187e0 <__assert_fail@plt+0x74bc>
   186b4:	mov	r1, #-2147483648	; 0x80000000
   186b8:	mov	r2, #1
   186bc:	sdiv	r7, r1, r0
   186c0:	cmp	r7, r6
   186c4:	blt	186f0 <__assert_fail@plt+0x73cc>
   186c8:	mul	r1, r0, r6
   186cc:	mov	r2, r3
   186d0:	cmp	r1, #0
   186d4:	blt	186f0 <__assert_fail@plt+0x73cc>
   186d8:	mvn	r3, #-2147483648	; 0x80000000
   186dc:	mov	r0, #1
   186e0:	udiv	r7, r3, r6
   186e4:	cmp	r7, r1
   186e8:	bge	18704 <__assert_fail@plt+0x73e0>
   186ec:	b	18714 <__assert_fail@plt+0x73f0>
   186f0:	mov	r3, #-2147483648	; 0x80000000
   186f4:	mov	r0, #1
   186f8:	sdiv	r7, r3, r1
   186fc:	cmp	r7, r6
   18700:	blt	1872c <__assert_fail@plt+0x7408>
   18704:	mul	r3, r1, r6
   18708:	mov	r0, r2
   1870c:	cmp	r3, #0
   18710:	blt	1872c <__assert_fail@plt+0x7408>
   18714:	mvn	r1, #-2147483648	; 0x80000000
   18718:	udiv	r2, r1, r6
   1871c:	cmp	r2, r3
   18720:	bge	18744 <__assert_fail@plt+0x7420>
   18724:	mov	r0, #1
   18728:	b	18750 <__assert_fail@plt+0x742c>
   1872c:	mov	r1, #-2147483648	; 0x80000000
   18730:	sdiv	r2, r1, r3
   18734:	cmp	r2, r6
   18738:	bge	18744 <__assert_fail@plt+0x7420>
   1873c:	mov	r0, #1
   18740:	b	18768 <__assert_fail@plt+0x7444>
   18744:	mul	r1, r3, r6
   18748:	cmp	r1, #0
   1874c:	blt	18768 <__assert_fail@plt+0x7444>
   18750:	mvn	r2, #-2147483648	; 0x80000000
   18754:	udiv	r3, r2, r6
   18758:	cmp	r3, r1
   1875c:	bge	18780 <__assert_fail@plt+0x745c>
   18760:	mov	r0, #1
   18764:	b	1878c <__assert_fail@plt+0x7468>
   18768:	mov	r2, #-2147483648	; 0x80000000
   1876c:	sdiv	r3, r2, r1
   18770:	cmp	r3, r6
   18774:	bge	18780 <__assert_fail@plt+0x745c>
   18778:	mov	r0, #1
   1877c:	b	187a4 <__assert_fail@plt+0x7480>
   18780:	mul	r2, r1, r6
   18784:	cmp	r2, #0
   18788:	blt	187a4 <__assert_fail@plt+0x7480>
   1878c:	mvn	r3, #-2147483648	; 0x80000000
   18790:	udiv	r1, r3, r6
   18794:	cmp	r1, r2
   18798:	bge	187bc <__assert_fail@plt+0x7498>
   1879c:	mov	r0, #1
   187a0:	b	187c8 <__assert_fail@plt+0x74a4>
   187a4:	mov	r3, #-2147483648	; 0x80000000
   187a8:	sdiv	r1, r3, r2
   187ac:	cmp	r1, r6
   187b0:	bge	187bc <__assert_fail@plt+0x7498>
   187b4:	mov	r0, #1
   187b8:	b	187e0 <__assert_fail@plt+0x74bc>
   187bc:	mul	r3, r2, r6
   187c0:	cmp	r3, #0
   187c4:	blt	187e0 <__assert_fail@plt+0x74bc>
   187c8:	mvn	r1, #-2147483648	; 0x80000000
   187cc:	udiv	r2, r1, r6
   187d0:	cmp	r2, r3
   187d4:	bge	187f8 <__assert_fail@plt+0x74d4>
   187d8:	mov	r0, #1
   187dc:	b	18804 <__assert_fail@plt+0x74e0>
   187e0:	mov	r1, #-2147483648	; 0x80000000
   187e4:	sdiv	r2, r1, r3
   187e8:	cmp	r2, r6
   187ec:	bge	187f8 <__assert_fail@plt+0x74d4>
   187f0:	mov	r0, #1
   187f4:	b	18850 <__assert_fail@plt+0x752c>
   187f8:	mul	r1, r3, r6
   187fc:	cmp	r1, #0
   18800:	blt	18850 <__assert_fail@plt+0x752c>
   18804:	mvn	r7, #-2147483648	; 0x80000000
   18808:	mov	r2, #1
   1880c:	udiv	r3, r7, r6
   18810:	cmp	r3, r1
   18814:	blt	18820 <__assert_fail@plt+0x74fc>
   18818:	mul	r7, r1, r6
   1881c:	mov	r2, #0
   18820:	orr	r0, r2, r0
   18824:	add	r1, r4, ip
   18828:	orr	r9, r0, r9
   1882c:	str	r1, [sl]
   18830:	ldrb	r1, [r4, ip]
   18834:	cmp	r1, #0
   18838:	orrne	r9, r9, #2
   1883c:	ldr	r0, [sp, #4]
   18840:	str	r7, [r0]
   18844:	mov	r0, r9
   18848:	sub	sp, fp, #28
   1884c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18850:	mov	r7, #-2147483648	; 0x80000000
   18854:	mov	r2, #1
   18858:	sdiv	r3, r7, r1
   1885c:	cmp	r3, r6
   18860:	bge	18818 <__assert_fail@plt+0x74f4>
   18864:	b	18820 <__assert_fail@plt+0x74fc>
   18868:	movw	r0, #49941	; 0xc315
   1886c:	movw	r1, #50052	; 0xc384
   18870:	movw	r3, #49979	; 0xc33b
   18874:	mov	r2, #85	; 0x55
   18878:	movt	r0, #1
   1887c:	movt	r1, #1
   18880:	movt	r3, #1
   18884:	bl	11324 <__assert_fail@plt>
   18888:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1888c:	add	fp, sp, #28
   18890:	sub	sp, sp, #44	; 0x2c
   18894:	cmp	r2, #37	; 0x25
   18898:	bcs	19508 <__assert_fail@plt+0x81e4>
   1889c:	ldr	sl, [fp, #8]
   188a0:	mov	r6, r2
   188a4:	mov	r7, r1
   188a8:	mov	r4, r0
   188ac:	str	r3, [sp, #36]	; 0x24
   188b0:	bl	11210 <__errno_location@plt>
   188b4:	mov	r5, r0
   188b8:	mov	r0, #0
   188bc:	str	r0, [r5]
   188c0:	bl	111e0 <__ctype_b_loc@plt>
   188c4:	ldr	r1, [r0]
   188c8:	mov	r2, r4
   188cc:	ldrb	r0, [r2], #1
   188d0:	add	r3, r1, r0, lsl #1
   188d4:	ldrb	r3, [r3, #1]
   188d8:	tst	r3, #32
   188dc:	bne	188cc <__assert_fail@plt+0x75a8>
   188e0:	sub	r9, fp, #32
   188e4:	cmp	r7, #0
   188e8:	mov	r8, #4
   188ec:	movne	r9, r7
   188f0:	cmp	r0, #45	; 0x2d
   188f4:	beq	194fc <__assert_fail@plt+0x81d8>
   188f8:	mov	r0, r4
   188fc:	mov	r1, r9
   18900:	mov	r2, r6
   18904:	mov	r3, #0
   18908:	bl	110f0 <__strtoull_internal@plt>
   1890c:	mov	r7, r1
   18910:	ldr	r1, [r9]
   18914:	cmp	r1, r4
   18918:	beq	18944 <__assert_fail@plt+0x7620>
   1891c:	mov	r6, r0
   18920:	ldr	r0, [r5]
   18924:	cmp	r0, #0
   18928:	beq	18980 <__assert_fail@plt+0x765c>
   1892c:	cmp	r0, #34	; 0x22
   18930:	bne	194fc <__assert_fail@plt+0x81d8>
   18934:	mov	r8, #1
   18938:	cmp	sl, #0
   1893c:	bne	1898c <__assert_fail@plt+0x7668>
   18940:	b	194f4 <__assert_fail@plt+0x81d0>
   18944:	cmp	sl, #0
   18948:	beq	194fc <__assert_fail@plt+0x81d8>
   1894c:	mov	r5, r1
   18950:	ldrb	r1, [r4]
   18954:	cmp	r1, #0
   18958:	beq	194fc <__assert_fail@plt+0x81d8>
   1895c:	mov	r0, sl
   18960:	bl	11204 <strchr@plt>
   18964:	cmp	r0, #0
   18968:	beq	194fc <__assert_fail@plt+0x81d8>
   1896c:	mov	r1, r5
   18970:	mov	r8, #0
   18974:	mov	r6, #1
   18978:	mov	r7, #0
   1897c:	b	1898c <__assert_fail@plt+0x7668>
   18980:	mov	r8, r0
   18984:	cmp	sl, #0
   18988:	beq	194f4 <__assert_fail@plt+0x81d0>
   1898c:	ldrb	r4, [r1]
   18990:	cmp	r4, #0
   18994:	beq	194f4 <__assert_fail@plt+0x81d0>
   18998:	str	r1, [sp, #32]
   1899c:	mov	r0, sl
   189a0:	mov	r1, r4
   189a4:	bl	11204 <strchr@plt>
   189a8:	cmp	r0, #0
   189ac:	beq	18c74 <__assert_fail@plt+0x7950>
   189b0:	sub	r0, r4, #69	; 0x45
   189b4:	mov	r1, #1
   189b8:	mov	r3, #0
   189bc:	mov	r5, #1024	; 0x400
   189c0:	cmp	r0, #47	; 0x2f
   189c4:	str	r1, [sp, #28]
   189c8:	bhi	18acc <__assert_fail@plt+0x77a8>
   189cc:	add	r1, pc, #0
   189d0:	ldr	pc, [r1, r0, lsl #2]
   189d4:	muleq	r1, r4, sl
   189d8:	andeq	r8, r1, ip, asr #21
   189dc:	muleq	r1, r4, sl
   189e0:	andeq	r8, r1, ip, asr #21
   189e4:	andeq	r8, r1, ip, asr #21
   189e8:	andeq	r8, r1, ip, asr #21
   189ec:	muleq	r1, r4, sl
   189f0:	andeq	r8, r1, ip, asr #21
   189f4:	muleq	r1, r4, sl
   189f8:	andeq	r8, r1, ip, asr #21
   189fc:	andeq	r8, r1, ip, asr #21
   18a00:	muleq	r1, r4, sl
   18a04:	andeq	r8, r1, ip, asr #21
   18a08:	andeq	r8, r1, ip, asr #21
   18a0c:	andeq	r8, r1, ip, asr #21
   18a10:	muleq	r1, r4, sl
   18a14:	andeq	r8, r1, ip, asr #21
   18a18:	andeq	r8, r1, ip, asr #21
   18a1c:	andeq	r8, r1, ip, asr #21
   18a20:	andeq	r8, r1, ip, asr #21
   18a24:	muleq	r1, r4, sl
   18a28:	muleq	r1, r4, sl
   18a2c:	andeq	r8, r1, ip, asr #21
   18a30:	andeq	r8, r1, ip, asr #21
   18a34:	andeq	r8, r1, ip, asr #21
   18a38:	andeq	r8, r1, ip, asr #21
   18a3c:	andeq	r8, r1, ip, asr #21
   18a40:	andeq	r8, r1, ip, asr #21
   18a44:	andeq	r8, r1, ip, asr #21
   18a48:	andeq	r8, r1, ip, asr #21
   18a4c:	andeq	r8, r1, ip, asr #21
   18a50:	andeq	r8, r1, ip, asr #21
   18a54:	andeq	r8, r1, ip, asr #21
   18a58:	andeq	r8, r1, ip, asr #21
   18a5c:	muleq	r1, r4, sl
   18a60:	andeq	r8, r1, ip, asr #21
   18a64:	andeq	r8, r1, ip, asr #21
   18a68:	andeq	r8, r1, ip, asr #21
   18a6c:	muleq	r1, r4, sl
   18a70:	andeq	r8, r1, ip, asr #21
   18a74:	muleq	r1, r4, sl
   18a78:	andeq	r8, r1, ip, asr #21
   18a7c:	andeq	r8, r1, ip, asr #21
   18a80:	andeq	r8, r1, ip, asr #21
   18a84:	andeq	r8, r1, ip, asr #21
   18a88:	andeq	r8, r1, ip, asr #21
   18a8c:	andeq	r8, r1, ip, asr #21
   18a90:	muleq	r1, r4, sl
   18a94:	mov	r0, sl
   18a98:	mov	r1, #48	; 0x30
   18a9c:	bl	11204 <strchr@plt>
   18aa0:	cmp	r0, #0
   18aa4:	beq	18ac8 <__assert_fail@plt+0x77a4>
   18aa8:	ldr	r1, [sp, #32]
   18aac:	ldrb	r0, [r1, #1]
   18ab0:	cmp	r0, #66	; 0x42
   18ab4:	cmpne	r0, #68	; 0x44
   18ab8:	bne	18c80 <__assert_fail@plt+0x795c>
   18abc:	mov	r5, #1000	; 0x3e8
   18ac0:	mov	r0, #2
   18ac4:	str	r0, [sp, #28]
   18ac8:	mov	r3, #0
   18acc:	sub	r0, r4, #66	; 0x42
   18ad0:	cmp	r0, #53	; 0x35
   18ad4:	bhi	18c74 <__assert_fail@plt+0x7950>
   18ad8:	add	r1, pc, #0
   18adc:	ldr	pc, [r1, r0, lsl #2]
   18ae0:	strdeq	r8, [r1], -ip
   18ae4:	andeq	r8, r1, r4, ror ip
   18ae8:	andeq	r8, r1, r4, ror ip
   18aec:	andeq	r9, r1, r4, lsr #32
   18af0:	andeq	r8, r1, r4, ror ip
   18af4:			; <UNDEFINED> instruction: 0x00018bb8
   18af8:	andeq	r8, r1, r4, ror ip
   18afc:	andeq	r8, r1, r4, ror ip
   18b00:	andeq	r8, r1, r4, ror ip
   18b04:	andeq	r8, r1, r4, lsr #25
   18b08:	andeq	r8, r1, r4, ror ip
   18b0c:	andeq	r8, r1, ip, ror #25
   18b10:	andeq	r8, r1, r4, ror ip
   18b14:	andeq	r8, r1, r4, ror ip
   18b18:	andeq	r9, r1, ip, ror r1
   18b1c:	andeq	r8, r1, r4, ror ip
   18b20:	andeq	r8, r1, r4, ror ip
   18b24:	andeq	r8, r1, r4, ror ip
   18b28:	andeq	r8, r1, r8, ror sp
   18b2c:	andeq	r8, r1, r4, ror ip
   18b30:	andeq	r8, r1, r4, ror ip
   18b34:	andeq	r8, r1, r4, ror ip
   18b38:	andeq	r8, r1, r4, ror ip
   18b3c:	andeq	r9, r1, r4, lsr #5
   18b40:	andeq	r8, r1, r0, ror #28
   18b44:	andeq	r8, r1, r4, ror ip
   18b48:	andeq	r8, r1, r4, ror ip
   18b4c:	andeq	r8, r1, r4, ror ip
   18b50:	andeq	r8, r1, r4, ror ip
   18b54:	andeq	r8, r1, r4, ror ip
   18b58:	andeq	r8, r1, r4, ror ip
   18b5c:	andeq	r8, r1, r4, ror ip
   18b60:	andeq	r9, r1, ip, ror r4
   18b64:	ldrdeq	r9, [r1], -r4
   18b68:	andeq	r8, r1, r4, ror ip
   18b6c:	andeq	r8, r1, r4, ror ip
   18b70:	andeq	r8, r1, r4, ror ip
   18b74:			; <UNDEFINED> instruction: 0x00018bb8
   18b78:	andeq	r8, r1, r4, ror ip
   18b7c:	andeq	r8, r1, r4, ror ip
   18b80:	andeq	r8, r1, r4, ror ip
   18b84:	andeq	r8, r1, r4, lsr #25
   18b88:	andeq	r8, r1, r4, ror ip
   18b8c:	andeq	r8, r1, ip, ror #25
   18b90:	andeq	r8, r1, r4, ror ip
   18b94:	andeq	r8, r1, r4, ror ip
   18b98:	andeq	r8, r1, r4, ror ip
   18b9c:	andeq	r8, r1, r4, ror ip
   18ba0:	andeq	r8, r1, r4, ror ip
   18ba4:	andeq	r8, r1, r4, ror ip
   18ba8:	andeq	r8, r1, r8, ror sp
   18bac:	andeq	r8, r1, r4, ror ip
   18bb0:	andeq	r8, r1, r4, ror ip
   18bb4:			; <UNDEFINED> instruction: 0x000194b0
   18bb8:	mvn	r0, #0
   18bbc:	mvn	r1, #0
   18bc0:	mov	r2, r5
   18bc4:	mov	sl, r3
   18bc8:	bl	19dbc <__assert_fail@plt+0x8a98>
   18bcc:	subs	r3, r0, r6
   18bd0:	mov	lr, #0
   18bd4:	umull	r4, r2, r6, r5
   18bd8:	str	r1, [sp, #20]
   18bdc:	sbcs	r3, r1, r7
   18be0:	mla	ip, r6, sl, r2
   18be4:	mov	r2, r1
   18be8:	movwcc	lr, #1
   18bec:	mla	r7, r7, r5, ip
   18bf0:	mov	r2, #0
   18bf4:	cmp	lr, #0
   18bf8:	mvnne	r4, #0
   18bfc:	mvnne	r7, #0
   18c00:	subs	r6, r0, r4
   18c04:	sbcs	r6, r1, r7
   18c08:	movwcc	r2, #1
   18c0c:	umull	r3, r6, r4, r5
   18c10:	cmp	r2, #0
   18c14:	str	r6, [sp, #16]
   18c18:	mvnne	r3, #0
   18c1c:	cmp	r2, #0
   18c20:	umull	r6, ip, r3, r5
   18c24:	mla	r1, r3, sl, ip
   18c28:	ldr	ip, [sp, #16]
   18c2c:	str	r1, [sp, #12]
   18c30:	mla	r4, r4, sl, ip
   18c34:	mla	r4, r7, r5, r4
   18c38:	ldr	r7, [sp, #12]
   18c3c:	mvnne	r4, #0
   18c40:	subs	r0, r0, r3
   18c44:	ldr	r0, [sp, #20]
   18c48:	mla	r7, r4, r5, r7
   18c4c:	sbcs	r0, r0, r4
   18c50:	mov	r0, #0
   18c54:	movwcc	r0, #1
   18c58:	cmp	r0, #0
   18c5c:	mov	r1, r0
   18c60:	orr	r0, lr, r2
   18c64:	mvnne	r7, #0
   18c68:	mvnne	r6, #0
   18c6c:	orr	r3, r0, r1
   18c70:	b	194d4 <__assert_fail@plt+0x81b0>
   18c74:	ldr	r0, [sp, #36]	; 0x24
   18c78:	orr	r8, r8, #2
   18c7c:	b	194f8 <__assert_fail@plt+0x81d4>
   18c80:	cmp	r0, #105	; 0x69
   18c84:	mov	r3, #0
   18c88:	bne	18acc <__assert_fail@plt+0x77a8>
   18c8c:	ldrb	r0, [r1, #2]
   18c90:	mov	r1, #1
   18c94:	cmp	r0, #66	; 0x42
   18c98:	movweq	r1, #3
   18c9c:	str	r1, [sp, #28]
   18ca0:	b	18acc <__assert_fail@plt+0x77a8>
   18ca4:	mvn	r0, #0
   18ca8:	mvn	r1, #0
   18cac:	mov	r2, r5
   18cb0:	mov	r4, r3
   18cb4:	bl	19dbc <__assert_fail@plt+0x8a98>
   18cb8:	subs	r0, r0, r6
   18cbc:	mov	r2, #0
   18cc0:	sbcs	r0, r1, r7
   18cc4:	movwcc	r2, #1
   18cc8:	umull	r0, r1, r6, r5
   18ccc:	mla	r1, r6, r4, r1
   18cd0:	cmp	r2, #0
   18cd4:	mov	r3, r2
   18cd8:	mla	r7, r7, r5, r1
   18cdc:	mvnne	r0, #0
   18ce0:	mvnne	r7, #0
   18ce4:	mov	r6, r0
   18ce8:	b	194d4 <__assert_fail@plt+0x81b0>
   18cec:	mvn	r0, #0
   18cf0:	mvn	r1, #0
   18cf4:	mov	r2, r5
   18cf8:	str	r3, [sp, #24]
   18cfc:	bl	19dbc <__assert_fail@plt+0x8a98>
   18d00:	subs	r3, r0, r6
   18d04:	mov	ip, r0
   18d08:	umull	r4, r0, r6, r5
   18d0c:	mov	sl, #0
   18d10:	sbcs	r3, r1, r7
   18d14:	str	r0, [sp, #20]
   18d18:	ldr	r0, [sp, #24]
   18d1c:	mov	r3, #0
   18d20:	movwcc	r3, #1
   18d24:	cmp	r3, #0
   18d28:	mvnne	r4, #0
   18d2c:	cmp	r3, #0
   18d30:	umull	lr, r2, r4, r5
   18d34:	mla	r2, r4, r0, r2
   18d38:	str	r2, [sp, #16]
   18d3c:	ldr	r2, [sp, #20]
   18d40:	mla	r6, r6, r0, r2
   18d44:	ldr	r0, [sp, #16]
   18d48:	mla	r6, r7, r5, r6
   18d4c:	mvnne	r6, #0
   18d50:	mla	r7, r6, r5, r0
   18d54:	subs	r0, ip, r4
   18d58:	sbcs	r0, r1, r6
   18d5c:	movwcc	sl, #1
   18d60:	cmp	sl, #0
   18d64:	orr	r3, r3, sl
   18d68:	mvnne	lr, #0
   18d6c:	mvnne	r7, #0
   18d70:	mov	r6, lr
   18d74:	b	194d4 <__assert_fail@plt+0x81b0>
   18d78:	mvn	r0, #0
   18d7c:	mvn	r1, #0
   18d80:	mov	r2, r5
   18d84:	mov	sl, r3
   18d88:	bl	19dbc <__assert_fail@plt+0x8a98>
   18d8c:	subs	r3, r0, r6
   18d90:	mov	ip, r1
   18d94:	umull	r2, lr, r6, r5
   18d98:	str	r0, [sp, #20]
   18d9c:	sbcs	r3, r1, r7
   18da0:	mov	r1, #0
   18da4:	mla	r6, r6, sl, lr
   18da8:	mov	lr, #0
   18dac:	str	ip, [sp, #16]
   18db0:	movwcc	r1, #1
   18db4:	mla	r7, r7, r5, r6
   18db8:	cmp	r1, #0
   18dbc:	mvnne	r2, #0
   18dc0:	cmp	r1, #0
   18dc4:	umull	r3, r4, r2, r5
   18dc8:	mvnne	r7, #0
   18dcc:	mla	r4, r2, sl, r4
   18dd0:	subs	r2, r0, r2
   18dd4:	sbcs	r2, ip, r7
   18dd8:	mla	r4, r7, r5, r4
   18ddc:	movwcc	lr, #1
   18de0:	mov	r2, #0
   18de4:	cmp	lr, #0
   18de8:	mvnne	r3, #0
   18dec:	mvnne	r4, #0
   18df0:	subs	r7, r0, r3
   18df4:	mov	r0, r5
   18df8:	sbcs	r7, ip, r4
   18dfc:	movwcc	r2, #1
   18e00:	umull	r5, r7, r3, r5
   18e04:	cmp	r2, #0
   18e08:	mla	r3, r3, sl, r7
   18e0c:	mvnne	r5, #0
   18e10:	mla	r3, r4, r0, r3
   18e14:	cmp	r2, #0
   18e18:	umull	r6, ip, r5, r0
   18e1c:	mvnne	r3, #0
   18e20:	mla	ip, r5, sl, ip
   18e24:	mla	r7, r3, r0, ip
   18e28:	ldr	r0, [sp, #20]
   18e2c:	subs	r0, r0, r5
   18e30:	ldr	r0, [sp, #16]
   18e34:	sbcs	r0, r0, r3
   18e38:	mov	r0, #0
   18e3c:	movwcc	r0, #1
   18e40:	cmp	r0, #0
   18e44:	mov	r3, r0
   18e48:	orr	r0, r1, lr
   18e4c:	orr	r0, r0, r2
   18e50:	mvnne	r7, #0
   18e54:	mvnne	r6, #0
   18e58:	orr	r3, r0, r3
   18e5c:	b	194d4 <__assert_fail@plt+0x81b0>
   18e60:	mvn	r0, #0
   18e64:	mvn	r1, #0
   18e68:	mov	r2, r5
   18e6c:	mov	r4, r3
   18e70:	str	r3, [sp, #24]
   18e74:	bl	19dbc <__assert_fail@plt+0x8a98>
   18e78:	umull	r3, r2, r6, r5
   18e7c:	mla	r2, r6, r4, r2
   18e80:	subs	r6, r0, r6
   18e84:	sbcs	r6, r1, r7
   18e88:	mla	ip, r7, r5, r2
   18e8c:	ldr	r2, [sp, #24]
   18e90:	mov	r6, #0
   18e94:	movwcc	r6, #1
   18e98:	cmp	r6, #0
   18e9c:	str	r6, [sp, #20]
   18ea0:	mov	r6, #0
   18ea4:	mvnne	r3, #0
   18ea8:	mvnne	ip, #0
   18eac:	subs	r4, r0, r3
   18eb0:	umull	r7, lr, r3, r5
   18eb4:	sbcs	r4, r1, ip
   18eb8:	mla	r3, r3, r2, lr
   18ebc:	movwcc	r6, #1
   18ec0:	cmp	r6, #0
   18ec4:	str	r6, [sp, #16]
   18ec8:	mvnne	r7, #0
   18ecc:	cmp	r6, #0
   18ed0:	umull	sl, r4, r7, r5
   18ed4:	mla	r4, r7, r2, r4
   18ed8:	mla	r2, ip, r5, r3
   18edc:	mov	ip, #0
   18ee0:	mvnne	r2, #0
   18ee4:	subs	r3, r0, r7
   18ee8:	mla	r6, r2, r5, r4
   18eec:	mov	r4, r0
   18ef0:	sbcs	r2, r1, r2
   18ef4:	mov	r0, #0
   18ef8:	movwcc	r0, #1
   18efc:	mov	r3, r4
   18f00:	cmp	r0, #0
   18f04:	str	r0, [sp, #12]
   18f08:	mov	r0, r1
   18f0c:	str	r3, [sp, #4]
   18f10:	mvnne	sl, #0
   18f14:	mvnne	r6, #0
   18f18:	str	r0, [sp, #8]
   18f1c:	subs	r2, r4, sl
   18f20:	ldr	r4, [sp, #24]
   18f24:	sbcs	r2, r1, r6
   18f28:	movwcc	ip, #1
   18f2c:	umull	r7, r2, sl, r5
   18f30:	cmp	ip, #0
   18f34:	mla	r2, sl, r4, r2
   18f38:	mvnne	r7, #0
   18f3c:	cmp	ip, #0
   18f40:	mov	sl, #0
   18f44:	umull	r1, lr, r7, r5
   18f48:	mla	r2, r6, r5, r2
   18f4c:	mvnne	r2, #0
   18f50:	mla	lr, r7, r4, lr
   18f54:	subs	r6, r3, r7
   18f58:	mla	lr, r2, r5, lr
   18f5c:	sbcs	r2, r0, r2
   18f60:	movwcc	sl, #1
   18f64:	mov	r2, #0
   18f68:	cmp	sl, #0
   18f6c:	mvnne	r1, #0
   18f70:	mvnne	lr, #0
   18f74:	subs	r6, r3, r1
   18f78:	ldr	r3, [sp, #24]
   18f7c:	sbcs	r6, r0, lr
   18f80:	umull	r0, r7, r1, r5
   18f84:	movwcc	r2, #1
   18f88:	cmp	r2, #0
   18f8c:	mvnne	r0, #0
   18f90:	mla	r1, r1, r3, r7
   18f94:	cmp	r2, #0
   18f98:	umull	r6, r4, r0, r5
   18f9c:	mla	r1, lr, r5, r1
   18fa0:	mla	r4, r0, r3, r4
   18fa4:	ldr	r3, [sp, #4]
   18fa8:	mvnne	r1, #0
   18fac:	mla	r7, r1, r5, r4
   18fb0:	ldr	r5, [sp, #16]
   18fb4:	subs	r0, r3, r0
   18fb8:	ldr	r0, [sp, #8]
   18fbc:	sbcs	r0, r0, r1
   18fc0:	mov	r0, #0
   18fc4:	movwcc	r0, #1
   18fc8:	cmp	r0, #0
   18fcc:	mov	r1, r0
   18fd0:	ldr	r0, [sp, #20]
   18fd4:	mvnne	r7, #0
   18fd8:	mvnne	r6, #0
   18fdc:	orr	r0, r0, r5
   18fe0:	ldr	r5, [sp, #12]
   18fe4:	orr	r0, r0, r5
   18fe8:	orr	r0, r0, ip
   18fec:	orr	r0, r0, sl
   18ff0:	orr	r0, r0, r2
   18ff4:	orr	r0, r0, r1
   18ff8:	b	19474 <__assert_fail@plt+0x8150>
   18ffc:	mov	r1, #0
   19000:	lsl	r2, r7, #10
   19004:	lsl	r0, r6, #10
   19008:	lsr	r3, r7, #22
   1900c:	cmp	r1, r7, lsr #22
   19010:	orr	r2, r2, r6, lsr #22
   19014:	mvnne	r0, #0
   19018:	movwne	r3, #1
   1901c:	cmp	r1, r7, lsr #22
   19020:	b	194a0 <__assert_fail@plt+0x817c>
   19024:	mvn	r0, #0
   19028:	mvn	r1, #0
   1902c:	mov	r2, r5
   19030:	mov	sl, r3
   19034:	bl	19dbc <__assert_fail@plt+0x8a98>
   19038:	subs	r2, r0, r6
   1903c:	mov	ip, r0
   19040:	mov	r0, #0
   19044:	sbcs	r2, r1, r7
   19048:	movwcc	r0, #1
   1904c:	umull	r4, r2, r6, r5
   19050:	cmp	r0, #0
   19054:	mla	r2, r6, sl, r2
   19058:	str	r0, [sp, #20]
   1905c:	mvnne	r4, #0
   19060:	cmp	r0, #0
   19064:	mla	r2, r7, r5, r2
   19068:	mov	r0, #0
   1906c:	umull	lr, r3, r4, r5
   19070:	mvnne	r2, #0
   19074:	mla	r3, r4, sl, r3
   19078:	mla	r6, r2, r5, r3
   1907c:	subs	r3, ip, r4
   19080:	sbcs	r2, r1, r2
   19084:	mov	r3, r1
   19088:	movwcc	r0, #1
   1908c:	str	r3, [sp, #8]
   19090:	cmp	r0, #0
   19094:	str	r0, [sp, #16]
   19098:	mov	r0, ip
   1909c:	mvnne	lr, #0
   190a0:	mvnne	r6, #0
   190a4:	str	r0, [sp, #12]
   190a8:	subs	r2, ip, lr
   190ac:	umull	r7, r4, lr, r5
   190b0:	sbcs	r2, r1, r6
   190b4:	mla	r4, lr, sl, r4
   190b8:	mov	r2, #0
   190bc:	mla	r6, r6, r5, r4
   190c0:	mov	r4, #0
   190c4:	movwcc	r2, #1
   190c8:	cmp	r2, #0
   190cc:	mvnne	r7, #0
   190d0:	cmp	r2, #0
   190d4:	umull	r1, ip, r7, r5
   190d8:	mvnne	r6, #0
   190dc:	mla	ip, r7, sl, ip
   190e0:	subs	r7, r0, r7
   190e4:	mla	lr, r6, r5, ip
   190e8:	sbcs	r7, r3, r6
   190ec:	mov	ip, #0
   190f0:	movwcc	ip, #1
   190f4:	cmp	ip, #0
   190f8:	mvnne	r1, #0
   190fc:	mvnne	lr, #0
   19100:	subs	r7, r0, r1
   19104:	sbcs	r7, r3, lr
   19108:	movwcc	r4, #1
   1910c:	umull	r0, r7, r1, r5
   19110:	cmp	r4, #0
   19114:	mla	r1, r1, sl, r7
   19118:	mvnne	r0, #0
   1911c:	mla	r1, lr, r5, r1
   19120:	cmp	r4, #0
   19124:	umull	r6, r3, r0, r5
   19128:	mvnne	r1, #0
   1912c:	mla	r3, r0, sl, r3
   19130:	mla	r7, r1, r5, r3
   19134:	ldr	r3, [sp, #12]
   19138:	subs	r0, r3, r0
   1913c:	ldr	r3, [sp, #16]
   19140:	ldr	r0, [sp, #8]
   19144:	sbcs	r0, r0, r1
   19148:	mov	r0, #0
   1914c:	movwcc	r0, #1
   19150:	cmp	r0, #0
   19154:	mov	r1, r0
   19158:	ldr	r0, [sp, #20]
   1915c:	mvnne	r7, #0
   19160:	mvnne	r6, #0
   19164:	orr	r0, r0, r3
   19168:	orr	r0, r0, r2
   1916c:	orr	r0, r0, ip
   19170:	orr	r0, r0, r4
   19174:	orr	r3, r0, r1
   19178:	b	194d4 <__assert_fail@plt+0x81b0>
   1917c:	mvn	r0, #0
   19180:	mvn	r1, #0
   19184:	mov	r2, r5
   19188:	mov	sl, r3
   1918c:	bl	19dbc <__assert_fail@plt+0x8a98>
   19190:	umull	r3, r2, r6, r5
   19194:	mov	lr, r1
   19198:	mov	r1, r0
   1919c:	mla	r2, r6, sl, r2
   191a0:	subs	r6, r0, r6
   191a4:	mov	r0, #0
   191a8:	sbcs	r6, lr, r7
   191ac:	mla	r2, r7, r5, r2
   191b0:	movwcc	r0, #1
   191b4:	cmp	r0, #0
   191b8:	str	r0, [sp, #20]
   191bc:	mov	r0, r1
   191c0:	mvnne	r3, #0
   191c4:	mvnne	r2, #0
   191c8:	str	r0, [sp, #16]
   191cc:	subs	r4, r1, r3
   191d0:	umull	r7, ip, r3, r5
   191d4:	sbcs	r4, lr, r2
   191d8:	mla	r3, r3, sl, ip
   191dc:	mov	ip, #0
   191e0:	mov	r4, #0
   191e4:	mla	r2, r2, r5, r3
   191e8:	movwcc	r4, #1
   191ec:	cmp	r4, #0
   191f0:	mvnne	r7, #0
   191f4:	cmp	r4, #0
   191f8:	umull	r1, r6, r7, r5
   191fc:	mvnne	r2, #0
   19200:	mla	r6, r7, sl, r6
   19204:	mla	r3, r2, r5, r6
   19208:	subs	r6, r0, r7
   1920c:	sbcs	r2, lr, r2
   19210:	movwcc	ip, #1
   19214:	mov	r2, #0
   19218:	cmp	ip, #0
   1921c:	mvnne	r1, #0
   19220:	mvnne	r3, #0
   19224:	subs	r6, r0, r1
   19228:	sbcs	r6, lr, r3
   1922c:	movwcc	r2, #1
   19230:	umull	r0, r6, r1, r5
   19234:	cmp	r2, #0
   19238:	str	r6, [sp, #12]
   1923c:	mvnne	r0, #0
   19240:	cmp	r2, #0
   19244:	umull	r6, r7, r0, r5
   19248:	mla	r7, r0, sl, r7
   1924c:	str	r7, [sp, #8]
   19250:	ldr	r7, [sp, #12]
   19254:	mla	r1, r1, sl, r7
   19258:	mla	r1, r3, r5, r1
   1925c:	ldr	r3, [sp, #8]
   19260:	mvnne	r1, #0
   19264:	mla	r7, r1, r5, r3
   19268:	ldr	r3, [sp, #16]
   1926c:	subs	r0, r3, r0
   19270:	sbcs	r0, lr, r1
   19274:	mov	r0, #0
   19278:	movwcc	r0, #1
   1927c:	cmp	r0, #0
   19280:	mov	r1, r0
   19284:	ldr	r0, [sp, #20]
   19288:	mvnne	r7, #0
   1928c:	mvnne	r6, #0
   19290:	orr	r0, r0, r4
   19294:	orr	r0, r0, ip
   19298:	orr	r0, r0, r2
   1929c:	orr	r3, r0, r1
   192a0:	b	194d4 <__assert_fail@plt+0x81b0>
   192a4:	mvn	r0, #0
   192a8:	mvn	r1, #0
   192ac:	mov	r2, r5
   192b0:	mov	sl, r3
   192b4:	bl	19dbc <__assert_fail@plt+0x8a98>
   192b8:	mov	lr, r0
   192bc:	subs	r0, r0, r6
   192c0:	mov	r2, #0
   192c4:	mov	ip, r1
   192c8:	str	sl, [sp, #24]
   192cc:	sbcs	r0, r1, r7
   192d0:	umull	r3, r1, r6, r5
   192d4:	str	lr, [sp, #4]
   192d8:	movwcc	r2, #1
   192dc:	mla	r6, r6, sl, r1
   192e0:	mov	r1, #0
   192e4:	cmp	r2, #0
   192e8:	mla	r7, r7, r5, r6
   192ec:	str	r2, [sp, #20]
   192f0:	mvnne	r3, #0
   192f4:	cmp	r2, #0
   192f8:	mov	r2, #0
   192fc:	umull	r0, r4, r3, r5
   19300:	mvnne	r7, #0
   19304:	mla	r4, r3, sl, r4
   19308:	subs	r3, lr, r3
   1930c:	sbcs	r3, ip, r7
   19310:	mla	r4, r7, r5, r4
   19314:	movwcc	r1, #1
   19318:	cmp	r1, #0
   1931c:	str	r1, [sp, #16]
   19320:	mvnne	r0, #0
   19324:	mvnne	r4, #0
   19328:	subs	r3, lr, r0
   1932c:	sbcs	r3, ip, r4
   19330:	movwcc	r2, #1
   19334:	umull	r6, r3, r0, r5
   19338:	cmp	r2, #0
   1933c:	mla	r0, r0, sl, r3
   19340:	str	r2, [sp, #12]
   19344:	mvnne	r6, #0
   19348:	mla	r0, r4, r5, r0
   1934c:	cmp	r2, #0
   19350:	ldr	r4, [sp, #24]
   19354:	umull	r1, r7, r6, r5
   19358:	mvnne	r0, #0
   1935c:	subs	r3, lr, r6
   19360:	mla	r7, r6, sl, r7
   19364:	mov	r3, ip
   19368:	mla	r7, r0, r5, r7
   1936c:	sbcs	r0, ip, r0
   19370:	str	r3, [sp]
   19374:	mov	r0, #0
   19378:	movwcc	r0, #1
   1937c:	cmp	r0, #0
   19380:	str	r0, [sp, #8]
   19384:	mvnne	r1, #0
   19388:	mvnne	r7, #0
   1938c:	subs	r0, lr, r1
   19390:	sbcs	r0, ip, r7
   19394:	mov	ip, #0
   19398:	movwcc	ip, #1
   1939c:	umull	r6, r0, r1, r5
   193a0:	cmp	ip, #0
   193a4:	mla	r1, r1, r4, r0
   193a8:	mov	r0, lr
   193ac:	mvnne	r6, #0
   193b0:	mla	r1, r7, r5, r1
   193b4:	cmp	ip, #0
   193b8:	umull	r2, sl, r6, r5
   193bc:	mvnne	r1, #0
   193c0:	mla	sl, r6, r4, sl
   193c4:	subs	r6, lr, r6
   193c8:	mov	lr, #0
   193cc:	mla	r7, r1, r5, sl
   193d0:	sbcs	r1, r3, r1
   193d4:	movwcc	lr, #1
   193d8:	ldr	r1, [sp, #24]
   193dc:	cmp	lr, #0
   193e0:	mvnne	r2, #0
   193e4:	mvnne	r7, #0
   193e8:	subs	r6, r0, r2
   193ec:	umull	r0, sl, r2, r5
   193f0:	sbcs	r6, r3, r7
   193f4:	mov	r3, #0
   193f8:	mla	r2, r2, r1, sl
   193fc:	movwcc	r3, #1
   19400:	mla	r2, r7, r5, r2
   19404:	cmp	r3, #0
   19408:	mvnne	r0, #0
   1940c:	cmp	r3, #0
   19410:	umull	r6, r4, r0, r5
   19414:	mvnne	r2, #0
   19418:	mla	r4, r0, r1, r4
   1941c:	ldr	r1, [sp, #4]
   19420:	mla	r7, r2, r5, r4
   19424:	ldr	r5, [sp, #16]
   19428:	subs	r0, r1, r0
   1942c:	ldr	r0, [sp]
   19430:	sbcs	r0, r0, r2
   19434:	mov	r0, #0
   19438:	movwcc	r0, #1
   1943c:	cmp	r0, #0
   19440:	mov	r2, r0
   19444:	ldr	r0, [sp, #20]
   19448:	mvnne	r7, #0
   1944c:	mvnne	r6, #0
   19450:	orr	r0, r0, r5
   19454:	ldr	r5, [sp, #12]
   19458:	orr	r0, r0, r5
   1945c:	ldr	r5, [sp, #8]
   19460:	orr	r0, r0, r5
   19464:	orr	r0, r0, ip
   19468:	orr	r0, r0, lr
   1946c:	orr	r0, r0, r3
   19470:	orr	r0, r0, r2
   19474:	and	r3, r0, #1
   19478:	b	194d4 <__assert_fail@plt+0x81b0>
   1947c:	mov	r1, #0
   19480:	lsl	r2, r7, #9
   19484:	lsl	r0, r6, #9
   19488:	lsr	r3, r7, #23
   1948c:	cmp	r1, r7, lsr #23
   19490:	orr	r2, r2, r6, lsr #23
   19494:	mvnne	r0, #0
   19498:	movwne	r3, #1
   1949c:	cmp	r1, r7, lsr #23
   194a0:	mvnne	r2, #0
   194a4:	mov	r6, r0
   194a8:	mov	r7, r2
   194ac:	b	194d4 <__assert_fail@plt+0x81b0>
   194b0:	lsl	r1, r7, #1
   194b4:	lsl	r0, r6, #1
   194b8:	cmp	r7, #0
   194bc:	lsr	r3, r7, #31
   194c0:	orr	r1, r1, r6, lsr #31
   194c4:	mvnlt	r0, #0
   194c8:	mvnlt	r1, #0
   194cc:	mov	r6, r0
   194d0:	mov	r7, r1
   194d4:	ldr	r1, [sp, #32]
   194d8:	ldr	r2, [sp, #28]
   194dc:	orr	r8, r3, r8
   194e0:	add	r0, r1, r2
   194e4:	str	r0, [r9]
   194e8:	ldrb	r0, [r1, r2]
   194ec:	cmp	r0, #0
   194f0:	orrne	r8, r8, #2
   194f4:	ldr	r0, [sp, #36]	; 0x24
   194f8:	strd	r6, [r0]
   194fc:	mov	r0, r8
   19500:	sub	sp, fp, #28
   19504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19508:	movw	r0, #49941	; 0xc315
   1950c:	movw	r1, #50050	; 0xc382
   19510:	movw	r3, #50066	; 0xc392
   19514:	mov	r2, #85	; 0x55
   19518:	movt	r0, #1
   1951c:	movt	r1, #1
   19520:	movt	r3, #1
   19524:	bl	11324 <__assert_fail@plt>
   19528:	clz	r2, r1
   1952c:	clz	r3, r0
   19530:	lsr	r2, r2, #5
   19534:	lsr	r3, r3, #5
   19538:	orrs	r2, r3, r2
   1953c:	movwne	r1, #1
   19540:	movwne	r0, #1
   19544:	cmp	r1, #0
   19548:	beq	19578 <__assert_fail@plt+0x8254>
   1954c:	mvn	r2, #-2147483648	; 0x80000000
   19550:	udiv	r2, r2, r1
   19554:	cmp	r2, r0
   19558:	bcs	19578 <__assert_fail@plt+0x8254>
   1955c:	push	{fp, lr}
   19560:	mov	fp, sp
   19564:	bl	11210 <__errno_location@plt>
   19568:	mov	r1, #12
   1956c:	str	r1, [r0]
   19570:	mov	r0, #0
   19574:	pop	{fp, pc}
   19578:	b	11060 <calloc@plt>
   1957c:	cmp	r0, #0
   19580:	movweq	r0, #1
   19584:	cmn	r0, #1
   19588:	ble	19590 <__assert_fail@plt+0x826c>
   1958c:	b	111a4 <malloc@plt>
   19590:	push	{fp, lr}
   19594:	mov	fp, sp
   19598:	bl	11210 <__errno_location@plt>
   1959c:	mov	r1, #12
   195a0:	str	r1, [r0]
   195a4:	mov	r0, #0
   195a8:	pop	{fp, pc}
   195ac:	push	{fp, lr}
   195b0:	mov	fp, sp
   195b4:	cmp	r0, #0
   195b8:	beq	195d4 <__assert_fail@plt+0x82b0>
   195bc:	cmp	r1, #0
   195c0:	beq	195e0 <__assert_fail@plt+0x82bc>
   195c4:	cmn	r1, #1
   195c8:	ble	195ec <__assert_fail@plt+0x82c8>
   195cc:	pop	{fp, lr}
   195d0:	b	11120 <realloc@plt>
   195d4:	mov	r0, r1
   195d8:	pop	{fp, lr}
   195dc:	b	1957c <__assert_fail@plt+0x8258>
   195e0:	bl	14f24 <__assert_fail@plt+0x3c00>
   195e4:	mov	r0, #0
   195e8:	pop	{fp, pc}
   195ec:	bl	11210 <__errno_location@plt>
   195f0:	mov	r1, #12
   195f4:	str	r1, [r0]
   195f8:	mov	r0, #0
   195fc:	pop	{fp, pc}
   19600:	push	{r4, r5, r6, sl, fp, lr}
   19604:	add	fp, sp, #16
   19608:	mov	r4, r0
   1960c:	bl	11174 <__fpending@plt>
   19610:	ldr	r6, [r4]
   19614:	mov	r5, r0
   19618:	mov	r0, r4
   1961c:	bl	19684 <__assert_fail@plt+0x8360>
   19620:	tst	r6, #32
   19624:	bne	1965c <__assert_fail@plt+0x8338>
   19628:	cmp	r0, #0
   1962c:	mov	r4, r0
   19630:	mvnne	r4, #0
   19634:	cmp	r5, #0
   19638:	bne	19668 <__assert_fail@plt+0x8344>
   1963c:	cmp	r0, #0
   19640:	beq	19668 <__assert_fail@plt+0x8344>
   19644:	bl	11210 <__errno_location@plt>
   19648:	ldr	r0, [r0]
   1964c:	subs	r4, r0, #9
   19650:	mvnne	r4, #0
   19654:	mov	r0, r4
   19658:	pop	{r4, r5, r6, sl, fp, pc}
   1965c:	mvn	r4, #0
   19660:	cmp	r0, #0
   19664:	beq	19670 <__assert_fail@plt+0x834c>
   19668:	mov	r0, r4
   1966c:	pop	{r4, r5, r6, sl, fp, pc}
   19670:	bl	11210 <__errno_location@plt>
   19674:	mov	r1, #0
   19678:	str	r1, [r0]
   1967c:	mov	r0, r4
   19680:	pop	{r4, r5, r6, sl, fp, pc}
   19684:	push	{r4, r5, r6, sl, fp, lr}
   19688:	add	fp, sp, #16
   1968c:	sub	sp, sp, #8
   19690:	mov	r4, r0
   19694:	bl	11240 <fileno@plt>
   19698:	cmn	r0, #1
   1969c:	ble	19710 <__assert_fail@plt+0x83ec>
   196a0:	mov	r0, r4
   196a4:	bl	111bc <__freading@plt>
   196a8:	cmp	r0, #0
   196ac:	beq	196d8 <__assert_fail@plt+0x83b4>
   196b0:	mov	r0, r4
   196b4:	bl	11240 <fileno@plt>
   196b8:	mov	r1, #1
   196bc:	mov	r2, #0
   196c0:	mov	r3, #0
   196c4:	str	r1, [sp]
   196c8:	bl	11150 <lseek64@plt>
   196cc:	and	r0, r0, r1
   196d0:	cmn	r0, #1
   196d4:	beq	19710 <__assert_fail@plt+0x83ec>
   196d8:	mov	r0, r4
   196dc:	bl	19720 <__assert_fail@plt+0x83fc>
   196e0:	cmp	r0, #0
   196e4:	beq	19710 <__assert_fail@plt+0x83ec>
   196e8:	bl	11210 <__errno_location@plt>
   196ec:	ldr	r6, [r0]
   196f0:	mov	r5, r0
   196f4:	mov	r0, r4
   196f8:	bl	11264 <fclose@plt>
   196fc:	cmp	r6, #0
   19700:	strne	r6, [r5]
   19704:	mvnne	r0, #0
   19708:	sub	sp, fp, #16
   1970c:	pop	{r4, r5, r6, sl, fp, pc}
   19710:	mov	r0, r4
   19714:	sub	sp, fp, #16
   19718:	pop	{r4, r5, r6, sl, fp, lr}
   1971c:	b	11264 <fclose@plt>
   19720:	push	{r4, sl, fp, lr}
   19724:	add	fp, sp, #8
   19728:	sub	sp, sp, #8
   1972c:	mov	r4, r0
   19730:	cmp	r0, #0
   19734:	beq	19750 <__assert_fail@plt+0x842c>
   19738:	mov	r0, r4
   1973c:	bl	111bc <__freading@plt>
   19740:	cmp	r0, #0
   19744:	ldrbne	r0, [r4, #1]
   19748:	tstne	r0, #1
   1974c:	bne	19760 <__assert_fail@plt+0x843c>
   19750:	mov	r0, r4
   19754:	sub	sp, fp, #8
   19758:	pop	{r4, sl, fp, lr}
   1975c:	b	110a8 <fflush@plt>
   19760:	mov	r0, #1
   19764:	mov	r2, #0
   19768:	mov	r3, #0
   1976c:	str	r0, [sp]
   19770:	mov	r0, r4
   19774:	bl	1977c <__assert_fail@plt+0x8458>
   19778:	b	19750 <__assert_fail@plt+0x842c>
   1977c:	push	{r4, r5, r6, r7, fp, lr}
   19780:	add	fp, sp, #16
   19784:	sub	sp, sp, #8
   19788:	mov	r4, r0
   1978c:	ldr	r0, [r0, #4]
   19790:	mov	r5, r3
   19794:	mov	r6, r2
   19798:	ldr	r1, [r4, #8]
   1979c:	cmp	r1, r0
   197a0:	bne	197bc <__assert_fail@plt+0x8498>
   197a4:	ldrd	r0, [r4, #16]
   197a8:	cmp	r1, r0
   197ac:	bne	197bc <__assert_fail@plt+0x8498>
   197b0:	ldr	r0, [r4, #36]	; 0x24
   197b4:	cmp	r0, #0
   197b8:	beq	197d4 <__assert_fail@plt+0x84b0>
   197bc:	mov	r0, r4
   197c0:	mov	r2, r6
   197c4:	mov	r3, r5
   197c8:	sub	sp, fp, #16
   197cc:	pop	{r4, r5, r6, r7, fp, lr}
   197d0:	b	11270 <fseeko64@plt>
   197d4:	ldr	r7, [fp, #8]
   197d8:	mov	r0, r4
   197dc:	bl	11240 <fileno@plt>
   197e0:	mov	r2, r6
   197e4:	mov	r3, r5
   197e8:	str	r7, [sp]
   197ec:	bl	11150 <lseek64@plt>
   197f0:	and	r2, r0, r1
   197f4:	cmn	r2, #1
   197f8:	mvneq	r0, #0
   197fc:	subeq	sp, fp, #16
   19800:	popeq	{r4, r5, r6, r7, fp, pc}
   19804:	strd	r0, [r4, #80]	; 0x50
   19808:	ldr	r0, [r4]
   1980c:	bic	r0, r0, #16
   19810:	str	r0, [r4]
   19814:	mov	r0, #0
   19818:	sub	sp, fp, #16
   1981c:	pop	{r4, r5, r6, r7, fp, pc}
   19820:	push	{fp, lr}
   19824:	mov	fp, sp
   19828:	mov	r0, #14
   1982c:	bl	112ac <nl_langinfo@plt>
   19830:	movw	r1, #46073	; 0xb3f9
   19834:	cmp	r0, #0
   19838:	movt	r1, #1
   1983c:	movne	r1, r0
   19840:	movw	r0, #50145	; 0xc3e1
   19844:	ldrb	r2, [r1]
   19848:	movt	r0, #1
   1984c:	cmp	r2, #0
   19850:	movne	r0, r1
   19854:	pop	{fp, pc}
   19858:	push	{r4, r5, r6, r7, fp, lr}
   1985c:	add	fp, sp, #16
   19860:	sub	sp, sp, #8
   19864:	add	r5, sp, #4
   19868:	cmp	r0, #0
   1986c:	mov	r7, r2
   19870:	mov	r4, r1
   19874:	movne	r5, r0
   19878:	mov	r0, r5
   1987c:	bl	11180 <mbrtowc@plt>
   19880:	mov	r6, r0
   19884:	cmp	r7, #0
   19888:	beq	198ac <__assert_fail@plt+0x8588>
   1988c:	cmn	r6, #2
   19890:	bcc	198ac <__assert_fail@plt+0x8588>
   19894:	mov	r0, #0
   19898:	bl	198f4 <__assert_fail@plt+0x85d0>
   1989c:	cmp	r0, #0
   198a0:	ldrbeq	r0, [r4]
   198a4:	moveq	r6, #1
   198a8:	streq	r0, [r5]
   198ac:	mov	r0, r6
   198b0:	sub	sp, fp, #16
   198b4:	pop	{r4, r5, r6, r7, fp, pc}
   198b8:	cmp	r2, #0
   198bc:	beq	198ec <__assert_fail@plt+0x85c8>
   198c0:	mvn	r3, #0
   198c4:	udiv	r3, r3, r2
   198c8:	cmp	r3, r1
   198cc:	bcs	198ec <__assert_fail@plt+0x85c8>
   198d0:	push	{fp, lr}
   198d4:	mov	fp, sp
   198d8:	bl	11210 <__errno_location@plt>
   198dc:	mov	r1, #12
   198e0:	str	r1, [r0]
   198e4:	mov	r0, #0
   198e8:	pop	{fp, pc}
   198ec:	mul	r1, r2, r1
   198f0:	b	195ac <__assert_fail@plt+0x8288>
   198f4:	push	{r4, sl, fp, lr}
   198f8:	add	fp, sp, #8
   198fc:	sub	sp, sp, #264	; 0x108
   19900:	add	r1, sp, #7
   19904:	movw	r2, #257	; 0x101
   19908:	bl	19958 <__assert_fail@plt+0x8634>
   1990c:	mov	r4, #0
   19910:	cmp	r0, #0
   19914:	bne	1994c <__assert_fail@plt+0x8628>
   19918:	movw	r1, #50151	; 0xc3e7
   1991c:	add	r0, sp, #7
   19920:	movt	r1, #1
   19924:	bl	11090 <strcmp@plt>
   19928:	cmp	r0, #0
   1992c:	beq	1994c <__assert_fail@plt+0x8628>
   19930:	movw	r1, #50153	; 0xc3e9
   19934:	add	r0, sp, #7
   19938:	movt	r1, #1
   1993c:	bl	11090 <strcmp@plt>
   19940:	mov	r4, r0
   19944:	cmp	r0, #0
   19948:	movwne	r4, #1
   1994c:	mov	r0, r4
   19950:	sub	sp, fp, #8
   19954:	pop	{r4, sl, fp, pc}
   19958:	push	{r4, r5, r6, r7, fp, lr}
   1995c:	add	fp, sp, #16
   19960:	mov	r4, r1
   19964:	mov	r1, #0
   19968:	mov	r6, r2
   1996c:	bl	11288 <setlocale@plt>
   19970:	cmp	r0, #0
   19974:	beq	199a4 <__assert_fail@plt+0x8680>
   19978:	mov	r7, r0
   1997c:	bl	111f8 <strlen@plt>
   19980:	cmp	r0, r6
   19984:	bcs	199c4 <__assert_fail@plt+0x86a0>
   19988:	add	r2, r0, #1
   1998c:	mov	r0, r4
   19990:	mov	r1, r7
   19994:	bl	110e4 <memcpy@plt>
   19998:	mov	r5, #0
   1999c:	mov	r0, r5
   199a0:	pop	{r4, r5, r6, r7, fp, pc}
   199a4:	cmp	r6, #0
   199a8:	mov	r5, #22
   199ac:	movne	r0, #0
   199b0:	strbne	r0, [r4]
   199b4:	movne	r0, r5
   199b8:	popne	{r4, r5, r6, r7, fp, pc}
   199bc:	mov	r0, r5
   199c0:	pop	{r4, r5, r6, r7, fp, pc}
   199c4:	mov	r5, #34	; 0x22
   199c8:	cmp	r6, #0
   199cc:	beq	199ec <__assert_fail@plt+0x86c8>
   199d0:	sub	r6, r6, #1
   199d4:	mov	r0, r4
   199d8:	mov	r1, r7
   199dc:	mov	r2, r6
   199e0:	bl	110e4 <memcpy@plt>
   199e4:	mov	r0, #0
   199e8:	strb	r0, [r4, r6]
   199ec:	mov	r0, r5
   199f0:	pop	{r4, r5, r6, r7, fp, pc}
   199f4:	mov	r1, #0
   199f8:	b	11288 <setlocale@plt>
   199fc:	eor	r1, r1, #-2147483648	; 0x80000000
   19a00:	b	19a08 <__assert_fail@plt+0x86e4>
   19a04:	eor	r3, r3, #-2147483648	; 0x80000000
   19a08:	push	{r4, r5, lr}
   19a0c:	lsl	r4, r1, #1
   19a10:	lsl	r5, r3, #1
   19a14:	teq	r4, r5
   19a18:	teqeq	r0, r2
   19a1c:	orrsne	ip, r4, r0
   19a20:	orrsne	ip, r5, r2
   19a24:	mvnsne	ip, r4, asr #21
   19a28:	mvnsne	ip, r5, asr #21
   19a2c:	beq	19c18 <__assert_fail@plt+0x88f4>
   19a30:	lsr	r4, r4, #21
   19a34:	rsbs	r5, r4, r5, lsr #21
   19a38:	rsblt	r5, r5, #0
   19a3c:	ble	19a5c <__assert_fail@plt+0x8738>
   19a40:	add	r4, r4, r5
   19a44:	eor	r2, r0, r2
   19a48:	eor	r3, r1, r3
   19a4c:	eor	r0, r2, r0
   19a50:	eor	r1, r3, r1
   19a54:	eor	r2, r0, r2
   19a58:	eor	r3, r1, r3
   19a5c:	cmp	r5, #54	; 0x36
   19a60:	pophi	{r4, r5, pc}
   19a64:	tst	r1, #-2147483648	; 0x80000000
   19a68:	lsl	r1, r1, #12
   19a6c:	mov	ip, #1048576	; 0x100000
   19a70:	orr	r1, ip, r1, lsr #12
   19a74:	beq	19a80 <__assert_fail@plt+0x875c>
   19a78:	rsbs	r0, r0, #0
   19a7c:	rsc	r1, r1, #0
   19a80:	tst	r3, #-2147483648	; 0x80000000
   19a84:	lsl	r3, r3, #12
   19a88:	orr	r3, ip, r3, lsr #12
   19a8c:	beq	19a98 <__assert_fail@plt+0x8774>
   19a90:	rsbs	r2, r2, #0
   19a94:	rsc	r3, r3, #0
   19a98:	teq	r4, r5
   19a9c:	beq	19c00 <__assert_fail@plt+0x88dc>
   19aa0:	sub	r4, r4, #1
   19aa4:	rsbs	lr, r5, #32
   19aa8:	blt	19ac4 <__assert_fail@plt+0x87a0>
   19aac:	lsl	ip, r2, lr
   19ab0:	adds	r0, r0, r2, lsr r5
   19ab4:	adc	r1, r1, #0
   19ab8:	adds	r0, r0, r3, lsl lr
   19abc:	adcs	r1, r1, r3, asr r5
   19ac0:	b	19ae0 <__assert_fail@plt+0x87bc>
   19ac4:	sub	r5, r5, #32
   19ac8:	add	lr, lr, #32
   19acc:	cmp	r2, #1
   19ad0:	lsl	ip, r3, lr
   19ad4:	orrcs	ip, ip, #2
   19ad8:	adds	r0, r0, r3, asr r5
   19adc:	adcs	r1, r1, r3, asr #31
   19ae0:	and	r5, r1, #-2147483648	; 0x80000000
   19ae4:	bpl	19af4 <__assert_fail@plt+0x87d0>
   19ae8:	rsbs	ip, ip, #0
   19aec:	rscs	r0, r0, #0
   19af0:	rsc	r1, r1, #0
   19af4:	cmp	r1, #1048576	; 0x100000
   19af8:	bcc	19b38 <__assert_fail@plt+0x8814>
   19afc:	cmp	r1, #2097152	; 0x200000
   19b00:	bcc	19b20 <__assert_fail@plt+0x87fc>
   19b04:	lsrs	r1, r1, #1
   19b08:	rrxs	r0, r0
   19b0c:	rrx	ip, ip
   19b10:	add	r4, r4, #1
   19b14:	lsl	r2, r4, #21
   19b18:	cmn	r2, #4194304	; 0x400000
   19b1c:	bcs	19c78 <__assert_fail@plt+0x8954>
   19b20:	cmp	ip, #-2147483648	; 0x80000000
   19b24:	lsrseq	ip, r0, #1
   19b28:	adcs	r0, r0, #0
   19b2c:	adc	r1, r1, r4, lsl #20
   19b30:	orr	r1, r1, r5
   19b34:	pop	{r4, r5, pc}
   19b38:	lsls	ip, ip, #1
   19b3c:	adcs	r0, r0, r0
   19b40:	adc	r1, r1, r1
   19b44:	tst	r1, #1048576	; 0x100000
   19b48:	sub	r4, r4, #1
   19b4c:	bne	19b20 <__assert_fail@plt+0x87fc>
   19b50:	teq	r1, #0
   19b54:	moveq	r1, r0
   19b58:	moveq	r0, #0
   19b5c:	clz	r3, r1
   19b60:	addeq	r3, r3, #32
   19b64:	sub	r3, r3, #11
   19b68:	subs	r2, r3, #32
   19b6c:	bge	19b90 <__assert_fail@plt+0x886c>
   19b70:	adds	r2, r2, #12
   19b74:	ble	19b8c <__assert_fail@plt+0x8868>
   19b78:	add	ip, r2, #20
   19b7c:	rsb	r2, r2, #12
   19b80:	lsl	r0, r1, ip
   19b84:	lsr	r1, r1, r2
   19b88:	b	19ba0 <__assert_fail@plt+0x887c>
   19b8c:	add	r2, r2, #20
   19b90:	rsble	ip, r2, #32
   19b94:	lsl	r1, r1, r2
   19b98:	orrle	r1, r1, r0, lsr ip
   19b9c:	lslle	r0, r0, r2
   19ba0:	subs	r4, r4, r3
   19ba4:	addge	r1, r1, r4, lsl #20
   19ba8:	orrge	r1, r1, r5
   19bac:	popge	{r4, r5, pc}
   19bb0:	mvn	r4, r4
   19bb4:	subs	r4, r4, #31
   19bb8:	bge	19bf4 <__assert_fail@plt+0x88d0>
   19bbc:	adds	r4, r4, #12
   19bc0:	bgt	19bdc <__assert_fail@plt+0x88b8>
   19bc4:	add	r4, r4, #20
   19bc8:	rsb	r2, r4, #32
   19bcc:	lsr	r0, r0, r4
   19bd0:	orr	r0, r0, r1, lsl r2
   19bd4:	orr	r1, r5, r1, lsr r4
   19bd8:	pop	{r4, r5, pc}
   19bdc:	rsb	r4, r4, #12
   19be0:	rsb	r2, r4, #32
   19be4:	lsr	r0, r0, r2
   19be8:	orr	r0, r0, r1, lsl r4
   19bec:	mov	r1, r5
   19bf0:	pop	{r4, r5, pc}
   19bf4:	lsr	r0, r1, r4
   19bf8:	mov	r1, r5
   19bfc:	pop	{r4, r5, pc}
   19c00:	teq	r4, #0
   19c04:	eor	r3, r3, #1048576	; 0x100000
   19c08:	eoreq	r1, r1, #1048576	; 0x100000
   19c0c:	addeq	r4, r4, #1
   19c10:	subne	r5, r5, #1
   19c14:	b	19aa0 <__assert_fail@plt+0x877c>
   19c18:	mvns	ip, r4, asr #21
   19c1c:	mvnsne	ip, r5, asr #21
   19c20:	beq	19c88 <__assert_fail@plt+0x8964>
   19c24:	teq	r4, r5
   19c28:	teqeq	r0, r2
   19c2c:	beq	19c40 <__assert_fail@plt+0x891c>
   19c30:	orrs	ip, r4, r0
   19c34:	moveq	r1, r3
   19c38:	moveq	r0, r2
   19c3c:	pop	{r4, r5, pc}
   19c40:	teq	r1, r3
   19c44:	movne	r1, #0
   19c48:	movne	r0, #0
   19c4c:	popne	{r4, r5, pc}
   19c50:	lsrs	ip, r4, #21
   19c54:	bne	19c68 <__assert_fail@plt+0x8944>
   19c58:	lsls	r0, r0, #1
   19c5c:	adcs	r1, r1, r1
   19c60:	orrcs	r1, r1, #-2147483648	; 0x80000000
   19c64:	pop	{r4, r5, pc}
   19c68:	adds	r4, r4, #4194304	; 0x400000
   19c6c:	addcc	r1, r1, #1048576	; 0x100000
   19c70:	popcc	{r4, r5, pc}
   19c74:	and	r5, r1, #-2147483648	; 0x80000000
   19c78:	orr	r1, r5, #2130706432	; 0x7f000000
   19c7c:	orr	r1, r1, #15728640	; 0xf00000
   19c80:	mov	r0, #0
   19c84:	pop	{r4, r5, pc}
   19c88:	mvns	ip, r4, asr #21
   19c8c:	movne	r1, r3
   19c90:	movne	r0, r2
   19c94:	mvnseq	ip, r5, asr #21
   19c98:	movne	r3, r1
   19c9c:	movne	r2, r0
   19ca0:	orrs	r4, r0, r1, lsl #12
   19ca4:	orrseq	r5, r2, r3, lsl #12
   19ca8:	teqeq	r1, r3
   19cac:	orrne	r1, r1, #524288	; 0x80000
   19cb0:	pop	{r4, r5, pc}
   19cb4:	teq	r0, #0
   19cb8:	moveq	r1, #0
   19cbc:	bxeq	lr
   19cc0:	push	{r4, r5, lr}
   19cc4:	mov	r4, #1024	; 0x400
   19cc8:	add	r4, r4, #50	; 0x32
   19ccc:	mov	r5, #0
   19cd0:	mov	r1, #0
   19cd4:	b	19b50 <__assert_fail@plt+0x882c>
   19cd8:	teq	r0, #0
   19cdc:	moveq	r1, #0
   19ce0:	bxeq	lr
   19ce4:	push	{r4, r5, lr}
   19ce8:	mov	r4, #1024	; 0x400
   19cec:	add	r4, r4, #50	; 0x32
   19cf0:	ands	r5, r0, #-2147483648	; 0x80000000
   19cf4:	rsbmi	r0, r0, #0
   19cf8:	mov	r1, #0
   19cfc:	b	19b50 <__assert_fail@plt+0x882c>
   19d00:	lsls	r2, r0, #1
   19d04:	asr	r1, r2, #3
   19d08:	rrx	r1, r1
   19d0c:	lsl	r0, r2, #28
   19d10:	andsne	r3, r2, #-16777216	; 0xff000000
   19d14:	teqne	r3, #-16777216	; 0xff000000
   19d18:	eorne	r1, r1, #939524096	; 0x38000000
   19d1c:	bxne	lr
   19d20:	bics	r2, r2, #-16777216	; 0xff000000
   19d24:	bxeq	lr
   19d28:	teq	r3, #-16777216	; 0xff000000
   19d2c:	orreq	r1, r1, #524288	; 0x80000
   19d30:	bxeq	lr
   19d34:	push	{r4, r5, lr}
   19d38:	mov	r4, #896	; 0x380
   19d3c:	and	r5, r1, #-2147483648	; 0x80000000
   19d40:	bic	r1, r1, #-2147483648	; 0x80000000
   19d44:	b	19b50 <__assert_fail@plt+0x882c>
   19d48:	orrs	r2, r0, r1
   19d4c:	bxeq	lr
   19d50:	push	{r4, r5, lr}
   19d54:	mov	r5, #0
   19d58:	b	19d78 <__assert_fail@plt+0x8a54>
   19d5c:	orrs	r2, r0, r1
   19d60:	bxeq	lr
   19d64:	push	{r4, r5, lr}
   19d68:	ands	r5, r1, #-2147483648	; 0x80000000
   19d6c:	bpl	19d78 <__assert_fail@plt+0x8a54>
   19d70:	rsbs	r0, r0, #0
   19d74:	rsc	r1, r1, #0
   19d78:	mov	r4, #1024	; 0x400
   19d7c:	add	r4, r4, #50	; 0x32
   19d80:	lsrs	ip, r1, #22
   19d84:	beq	19af4 <__assert_fail@plt+0x87d0>
   19d88:	mov	r2, #3
   19d8c:	lsrs	ip, ip, #3
   19d90:	addne	r2, r2, #3
   19d94:	lsrs	ip, ip, #3
   19d98:	addne	r2, r2, #3
   19d9c:	add	r2, r2, ip, lsr #3
   19da0:	rsb	r3, r2, #32
   19da4:	lsl	ip, r0, r3
   19da8:	lsr	r0, r0, r2
   19dac:	orr	r0, r0, r1, lsl r3
   19db0:	lsr	r1, r1, r2
   19db4:	add	r4, r4, r2
   19db8:	b	19af4 <__assert_fail@plt+0x87d0>
   19dbc:	cmp	r3, #0
   19dc0:	cmpeq	r2, #0
   19dc4:	bne	19ddc <__assert_fail@plt+0x8ab8>
   19dc8:	cmp	r1, #0
   19dcc:	cmpeq	r0, #0
   19dd0:	mvnne	r1, #0
   19dd4:	mvnne	r0, #0
   19dd8:	b	19df8 <__assert_fail@plt+0x8ad4>
   19ddc:	sub	sp, sp, #8
   19de0:	push	{sp, lr}
   19de4:	bl	19e78 <__assert_fail@plt+0x8b54>
   19de8:	ldr	lr, [sp, #4]
   19dec:	add	sp, sp, #8
   19df0:	pop	{r2, r3}
   19df4:	bx	lr
   19df8:	push	{r1, lr}
   19dfc:	mov	r0, #8
   19e00:	bl	11078 <raise@plt>
   19e04:	pop	{r1, pc}
   19e08:	vmov	d7, r0, r1
   19e0c:	vcmpe.f64	d7, #0.0
   19e10:	vmrs	APSR_nzcv, fpscr
   19e14:	bmi	19e1c <__assert_fail@plt+0x8af8>
   19e18:	b	19e38 <__assert_fail@plt+0x8b14>
   19e1c:	push	{r4, lr}
   19e20:	eor	r1, r1, #-2147483648	; 0x80000000
   19e24:	bl	19e38 <__assert_fail@plt+0x8b14>
   19e28:	rsbs	r0, r0, #0
   19e2c:	rsc	r1, r1, #0
   19e30:	pop	{r4, pc}
   19e34:	andeq	r0, r0, r0
   19e38:	vmov	d6, r0, r1
   19e3c:	vldr	d7, [pc, #36]	; 19e68 <__assert_fail@plt+0x8b44>
   19e40:	vldr	d5, [pc, #40]	; 19e70 <__assert_fail@plt+0x8b4c>
   19e44:	vmul.f64	d7, d6, d7
   19e48:	vcvt.u32.f64	s14, d7
   19e4c:	vcvt.f64.u32	d4, s14
   19e50:	vmov	r1, s14
   19e54:	vmls.f64	d6, d4, d5
   19e58:	vcvt.u32.f64	s15, d6
   19e5c:	vmov	r0, s15
   19e60:	bx	lr
   19e64:	nop			; (mov r0, r0)
   19e68:	andeq	r0, r0, r0
   19e6c:	ldclcc	0, cr0, [r0]
   19e70:	andeq	r0, r0, r0
   19e74:	mvnsmi	r0, r0
   19e78:	cmp	r1, r3
   19e7c:	cmpeq	r0, r2
   19e80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e84:	mov	r4, r0
   19e88:	movcc	r0, #0
   19e8c:	mov	r5, r1
   19e90:	ldr	lr, [sp, #36]	; 0x24
   19e94:	movcc	r1, r0
   19e98:	bcc	19f94 <__assert_fail@plt+0x8c70>
   19e9c:	cmp	r3, #0
   19ea0:	clzeq	ip, r2
   19ea4:	clzne	ip, r3
   19ea8:	addeq	ip, ip, #32
   19eac:	cmp	r5, #0
   19eb0:	clzeq	r1, r4
   19eb4:	addeq	r1, r1, #32
   19eb8:	clzne	r1, r5
   19ebc:	sub	ip, ip, r1
   19ec0:	sub	sl, ip, #32
   19ec4:	lsl	r9, r3, ip
   19ec8:	rsb	fp, ip, #32
   19ecc:	orr	r9, r9, r2, lsl sl
   19ed0:	orr	r9, r9, r2, lsr fp
   19ed4:	lsl	r8, r2, ip
   19ed8:	cmp	r5, r9
   19edc:	cmpeq	r4, r8
   19ee0:	movcc	r0, #0
   19ee4:	movcc	r1, r0
   19ee8:	bcc	19f04 <__assert_fail@plt+0x8be0>
   19eec:	mov	r0, #1
   19ef0:	subs	r4, r4, r8
   19ef4:	lsl	r1, r0, sl
   19ef8:	orr	r1, r1, r0, lsr fp
   19efc:	lsl	r0, r0, ip
   19f00:	sbc	r5, r5, r9
   19f04:	cmp	ip, #0
   19f08:	beq	19f94 <__assert_fail@plt+0x8c70>
   19f0c:	lsr	r6, r8, #1
   19f10:	orr	r6, r6, r9, lsl #31
   19f14:	lsr	r7, r9, #1
   19f18:	mov	r2, ip
   19f1c:	b	19f40 <__assert_fail@plt+0x8c1c>
   19f20:	subs	r3, r4, r6
   19f24:	sbc	r8, r5, r7
   19f28:	adds	r3, r3, r3
   19f2c:	adc	r8, r8, r8
   19f30:	adds	r4, r3, #1
   19f34:	adc	r5, r8, #0
   19f38:	subs	r2, r2, #1
   19f3c:	beq	19f5c <__assert_fail@plt+0x8c38>
   19f40:	cmp	r5, r7
   19f44:	cmpeq	r4, r6
   19f48:	bcs	19f20 <__assert_fail@plt+0x8bfc>
   19f4c:	adds	r4, r4, r4
   19f50:	adc	r5, r5, r5
   19f54:	subs	r2, r2, #1
   19f58:	bne	19f40 <__assert_fail@plt+0x8c1c>
   19f5c:	lsr	r3, r4, ip
   19f60:	orr	r3, r3, r5, lsl fp
   19f64:	lsr	r2, r5, ip
   19f68:	orr	r3, r3, r5, lsr sl
   19f6c:	adds	r0, r0, r4
   19f70:	mov	r4, r3
   19f74:	lsl	r3, r2, ip
   19f78:	orr	r3, r3, r4, lsl sl
   19f7c:	lsl	ip, r4, ip
   19f80:	orr	r3, r3, r4, lsr fp
   19f84:	adc	r1, r1, r5
   19f88:	subs	r0, r0, ip
   19f8c:	mov	r5, r2
   19f90:	sbc	r1, r1, r3
   19f94:	cmp	lr, #0
   19f98:	strdne	r4, [lr]
   19f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fa0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19fa4:	mov	r7, r0
   19fa8:	ldr	r6, [pc, #72]	; 19ff8 <__assert_fail@plt+0x8cd4>
   19fac:	ldr	r5, [pc, #72]	; 19ffc <__assert_fail@plt+0x8cd8>
   19fb0:	add	r6, pc, r6
   19fb4:	add	r5, pc, r5
   19fb8:	sub	r6, r6, r5
   19fbc:	mov	r8, r1
   19fc0:	mov	r9, r2
   19fc4:	bl	11040 <calloc@plt-0x20>
   19fc8:	asrs	r6, r6, #2
   19fcc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19fd0:	mov	r4, #0
   19fd4:	add	r4, r4, #1
   19fd8:	ldr	r3, [r5], #4
   19fdc:	mov	r2, r9
   19fe0:	mov	r1, r8
   19fe4:	mov	r0, r7
   19fe8:	blx	r3
   19fec:	cmp	r6, r4
   19ff0:	bne	19fd4 <__assert_fail@plt+0x8cb0>
   19ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ff8:	andeq	r2, r1, r4, asr pc
   19ffc:	andeq	r2, r1, ip, asr #30
   1a000:	bx	lr
   1a004:	ldr	r3, [pc, #12]	; 1a018 <__assert_fail@plt+0x8cf4>
   1a008:	mov	r1, #0
   1a00c:	add	r3, pc, r3
   1a010:	ldr	r2, [r3]
   1a014:	b	1121c <__cxa_atexit@plt>
   1a018:	strdeq	r3, [r1], -r0

Disassembly of section .fini:

0001a01c <.fini>:
   1a01c:	push	{r3, lr}
   1a020:	pop	{r3, pc}
