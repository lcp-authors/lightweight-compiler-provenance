
../repos/coreutils/src/fold:     file format elf32-littlearm


Disassembly of section .init:

00010e3c <.init>:
   10e3c:	push	{r3, lr}
   10e40:	bl	11114 <__assert_fail@plt+0x48>
   10e44:	pop	{r3, pc}

Disassembly of section .plt:

00010e48 <calloc@plt-0x14>:
   10e48:	push	{lr}		; (str lr, [sp, #-4]!)
   10e4c:	ldr	lr, [pc, #4]	; 10e58 <calloc@plt-0x4>
   10e50:	add	lr, pc, lr
   10e54:	ldr	pc, [lr, #8]!
   10e58:	andeq	r5, r1, r8, lsr #3

00010e5c <calloc@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #86016	; 0x15000
   10e64:	ldr	pc, [ip, #424]!	; 0x1a8

00010e68 <fputs_unlocked@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #86016	; 0x15000
   10e70:	ldr	pc, [ip, #416]!	; 0x1a0

00010e74 <raise@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #86016	; 0x15000
   10e7c:	ldr	pc, [ip, #408]!	; 0x198

00010e80 <strcmp@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #86016	; 0x15000
   10e88:	ldr	pc, [ip, #400]!	; 0x190

00010e8c <posix_fadvise64@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #86016	; 0x15000
   10e94:	ldr	pc, [ip, #392]!	; 0x188

00010e98 <fflush@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #86016	; 0x15000
   10ea0:	ldr	pc, [ip, #384]!	; 0x180

00010ea4 <memmove@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #86016	; 0x15000
   10eac:	ldr	pc, [ip, #376]!	; 0x178

00010eb0 <free@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #86016	; 0x15000
   10eb8:	ldr	pc, [ip, #368]!	; 0x170

00010ebc <_exit@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #86016	; 0x15000
   10ec4:	ldr	pc, [ip, #360]!	; 0x168

00010ec8 <memcpy@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #86016	; 0x15000
   10ed0:	ldr	pc, [ip, #352]!	; 0x160

00010ed4 <mbsinit@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #86016	; 0x15000
   10edc:	ldr	pc, [ip, #344]!	; 0x158

00010ee0 <fwrite_unlocked@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #86016	; 0x15000
   10ee8:	ldr	pc, [ip, #336]!	; 0x150

00010eec <getc_unlocked@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #86016	; 0x15000
   10ef4:	ldr	pc, [ip, #328]!	; 0x148

00010ef8 <dcgettext@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #86016	; 0x15000
   10f00:	ldr	pc, [ip, #320]!	; 0x140

00010f04 <realloc@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #86016	; 0x15000
   10f0c:	ldr	pc, [ip, #312]!	; 0x138

00010f10 <textdomain@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #86016	; 0x15000
   10f18:	ldr	pc, [ip, #304]!	; 0x130

00010f1c <iswprint@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #86016	; 0x15000
   10f24:	ldr	pc, [ip, #296]!	; 0x128

00010f28 <lseek64@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #86016	; 0x15000
   10f30:	ldr	pc, [ip, #288]!	; 0x120

00010f34 <__ctype_get_mb_cur_max@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #86016	; 0x15000
   10f3c:	ldr	pc, [ip, #280]!	; 0x118

00010f40 <__fpending@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #86016	; 0x15000
   10f48:	ldr	pc, [ip, #272]!	; 0x110

00010f4c <ferror_unlocked@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #86016	; 0x15000
   10f54:	ldr	pc, [ip, #264]!	; 0x108

00010f58 <mbrtowc@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #86016	; 0x15000
   10f60:	ldr	pc, [ip, #256]!	; 0x100

00010f64 <error@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #86016	; 0x15000
   10f6c:	ldr	pc, [ip, #248]!	; 0xf8

00010f70 <malloc@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #86016	; 0x15000
   10f78:	ldr	pc, [ip, #240]!	; 0xf0

00010f7c <__libc_start_main@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #86016	; 0x15000
   10f84:	ldr	pc, [ip, #232]!	; 0xe8

00010f88 <__freading@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #86016	; 0x15000
   10f90:	ldr	pc, [ip, #224]!	; 0xe0

00010f94 <__gmon_start__@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #86016	; 0x15000
   10f9c:	ldr	pc, [ip, #216]!	; 0xd8

00010fa0 <getopt_long@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #86016	; 0x15000
   10fa8:	ldr	pc, [ip, #208]!	; 0xd0

00010fac <__ctype_b_loc@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #86016	; 0x15000
   10fb4:	ldr	pc, [ip, #200]!	; 0xc8

00010fb8 <exit@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #86016	; 0x15000
   10fc0:	ldr	pc, [ip, #192]!	; 0xc0

00010fc4 <bcmp@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #86016	; 0x15000
   10fcc:	ldr	pc, [ip, #184]!	; 0xb8

00010fd0 <strlen@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #86016	; 0x15000
   10fd8:	ldr	pc, [ip, #176]!	; 0xb0

00010fdc <strchr@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #86016	; 0x15000
   10fe4:	ldr	pc, [ip, #168]!	; 0xa8

00010fe8 <__errno_location@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #86016	; 0x15000
   10ff0:	ldr	pc, [ip, #160]!	; 0xa0

00010ff4 <__cxa_atexit@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #86016	; 0x15000
   10ffc:	ldr	pc, [ip, #152]!	; 0x98

00011000 <memset@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #86016	; 0x15000
   11008:	ldr	pc, [ip, #144]!	; 0x90

0001100c <__printf_chk@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #86016	; 0x15000
   11014:	ldr	pc, [ip, #136]!	; 0x88

00011018 <fileno@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #86016	; 0x15000
   11020:	ldr	pc, [ip, #128]!	; 0x80

00011024 <strtoumax@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #86016	; 0x15000
   1102c:	ldr	pc, [ip, #120]!	; 0x78

00011030 <__fprintf_chk@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #86016	; 0x15000
   11038:	ldr	pc, [ip, #112]!	; 0x70

0001103c <fclose@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #86016	; 0x15000
   11044:	ldr	pc, [ip, #104]!	; 0x68

00011048 <fseeko64@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #86016	; 0x15000
   11050:	ldr	pc, [ip, #96]!	; 0x60

00011054 <setlocale@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #86016	; 0x15000
   1105c:	ldr	pc, [ip, #88]!	; 0x58

00011060 <strrchr@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #86016	; 0x15000
   11068:	ldr	pc, [ip, #80]!	; 0x50

0001106c <nl_langinfo@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #86016	; 0x15000
   11074:	ldr	pc, [ip, #72]!	; 0x48

00011078 <clearerr_unlocked@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #86016	; 0x15000
   11080:	ldr	pc, [ip, #64]!	; 0x40

00011084 <fopen64@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #86016	; 0x15000
   1108c:	ldr	pc, [ip, #56]!	; 0x38

00011090 <bindtextdomain@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #86016	; 0x15000
   11098:	ldr	pc, [ip, #48]!	; 0x30

0001109c <fputs@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #86016	; 0x15000
   110a4:	ldr	pc, [ip, #40]!	; 0x28

000110a8 <strncmp@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #86016	; 0x15000
   110b0:	ldr	pc, [ip, #32]!

000110b4 <abort@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #86016	; 0x15000
   110bc:	ldr	pc, [ip, #24]!

000110c0 <putchar_unlocked@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #86016	; 0x15000
   110c8:	ldr	pc, [ip, #16]!

000110cc <__assert_fail@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #86016	; 0x15000
   110d4:	ldr	pc, [ip, #8]!

Disassembly of section .text:

000110d8 <.text>:
   110d8:	mov	fp, #0
   110dc:	mov	lr, #0
   110e0:	pop	{r1}		; (ldr r1, [sp], #4)
   110e4:	mov	r2, sp
   110e8:	push	{r2}		; (str r2, [sp, #-4]!)
   110ec:	push	{r0}		; (str r0, [sp, #-4]!)
   110f0:	ldr	ip, [pc, #16]	; 11108 <__assert_fail@plt+0x3c>
   110f4:	push	{ip}		; (str ip, [sp, #-4]!)
   110f8:	ldr	r0, [pc, #12]	; 1110c <__assert_fail@plt+0x40>
   110fc:	ldr	r3, [pc, #12]	; 11110 <__assert_fail@plt+0x44>
   11100:	bl	10f7c <__libc_start_main@plt>
   11104:	bl	110b4 <abort@plt>
   11108:	ldrdeq	r4, [r1], -ip
   1110c:	andeq	r1, r1, r0, asr #8
   11110:	andeq	r4, r1, ip, ror lr
   11114:	ldr	r3, [pc, #20]	; 11130 <__assert_fail@plt+0x64>
   11118:	ldr	r2, [pc, #20]	; 11134 <__assert_fail@plt+0x68>
   1111c:	add	r3, pc, r3
   11120:	ldr	r2, [r3, r2]
   11124:	cmp	r2, #0
   11128:	bxeq	lr
   1112c:	b	10f94 <__gmon_start__@plt>
   11130:	ldrdeq	r4, [r1], -ip
   11134:	andeq	r0, r0, r0, ror #1
   11138:	ldr	r0, [pc, #24]	; 11158 <__assert_fail@plt+0x8c>
   1113c:	ldr	r3, [pc, #24]	; 1115c <__assert_fail@plt+0x90>
   11140:	cmp	r3, r0
   11144:	bxeq	lr
   11148:	ldr	r3, [pc, #16]	; 11160 <__assert_fail@plt+0x94>
   1114c:	cmp	r3, #0
   11150:	bxeq	lr
   11154:	bx	r3
   11158:	andeq	r6, r2, r8, lsr r1
   1115c:	andeq	r6, r2, r8, lsr r1
   11160:	andeq	r0, r0, r0
   11164:	ldr	r0, [pc, #36]	; 11190 <__assert_fail@plt+0xc4>
   11168:	ldr	r1, [pc, #36]	; 11194 <__assert_fail@plt+0xc8>
   1116c:	sub	r1, r1, r0
   11170:	asr	r1, r1, #2
   11174:	add	r1, r1, r1, lsr #31
   11178:	asrs	r1, r1, #1
   1117c:	bxeq	lr
   11180:	ldr	r3, [pc, #16]	; 11198 <__assert_fail@plt+0xcc>
   11184:	cmp	r3, #0
   11188:	bxeq	lr
   1118c:	bx	r3
   11190:	andeq	r6, r2, r8, lsr r1
   11194:	andeq	r6, r2, r8, lsr r1
   11198:	andeq	r0, r0, r0
   1119c:	push	{r4, lr}
   111a0:	ldr	r4, [pc, #24]	; 111c0 <__assert_fail@plt+0xf4>
   111a4:	ldrb	r3, [r4]
   111a8:	cmp	r3, #0
   111ac:	popne	{r4, pc}
   111b0:	bl	11138 <__assert_fail@plt+0x6c>
   111b4:	mov	r3, #1
   111b8:	strb	r3, [r4]
   111bc:	pop	{r4, pc}
   111c0:	andeq	r6, r2, ip, asr r1
   111c4:	b	11164 <__assert_fail@plt+0x98>
   111c8:	push	{fp, lr}
   111cc:	mov	fp, sp
   111d0:	sub	sp, sp, #56	; 0x38
   111d4:	mov	r8, r0
   111d8:	cmp	r0, #0
   111dc:	bne	11400 <__assert_fail@plt+0x334>
   111e0:	movw	r1, #20267	; 0x4f2b
   111e4:	mov	r0, #0
   111e8:	mov	r2, #5
   111ec:	movt	r1, #1
   111f0:	bl	10ef8 <dcgettext@plt>
   111f4:	mov	r1, r0
   111f8:	movw	r0, #24948	; 0x6174
   111fc:	movt	r0, #2
   11200:	ldr	r2, [r0]
   11204:	mov	r0, #1
   11208:	bl	1100c <__printf_chk@plt>
   1120c:	movw	r1, #20300	; 0x4f4c
   11210:	mov	r0, #0
   11214:	mov	r2, #5
   11218:	movt	r1, #1
   1121c:	bl	10ef8 <dcgettext@plt>
   11220:	movw	r9, #24916	; 0x6154
   11224:	movt	r9, #2
   11228:	ldr	r1, [r9]
   1122c:	bl	10e68 <fputs_unlocked@plt>
   11230:	movw	r1, #20691	; 0x50d3
   11234:	mov	r0, #0
   11238:	mov	r2, #5
   1123c:	movt	r1, #1
   11240:	bl	10ef8 <dcgettext@plt>
   11244:	ldr	r1, [r9]
   11248:	bl	10e68 <fputs_unlocked@plt>
   1124c:	movw	r1, #20747	; 0x510b
   11250:	mov	r0, #0
   11254:	mov	r2, #5
   11258:	movt	r1, #1
   1125c:	bl	10ef8 <dcgettext@plt>
   11260:	ldr	r1, [r9]
   11264:	bl	10e68 <fputs_unlocked@plt>
   11268:	movw	r1, #20360	; 0x4f88
   1126c:	mov	r0, #0
   11270:	mov	r2, #5
   11274:	movt	r1, #1
   11278:	bl	10ef8 <dcgettext@plt>
   1127c:	ldr	r1, [r9]
   11280:	bl	10e68 <fputs_unlocked@plt>
   11284:	movw	r1, #20507	; 0x501b
   11288:	mov	r0, #0
   1128c:	mov	r2, #5
   11290:	movt	r1, #1
   11294:	bl	10ef8 <dcgettext@plt>
   11298:	ldr	r1, [r9]
   1129c:	bl	10e68 <fputs_unlocked@plt>
   112a0:	movw	r1, #20552	; 0x5048
   112a4:	mov	r0, #0
   112a8:	mov	r2, #5
   112ac:	movt	r1, #1
   112b0:	bl	10ef8 <dcgettext@plt>
   112b4:	ldr	r1, [r9]
   112b8:	bl	10e68 <fputs_unlocked@plt>
   112bc:	movw	r0, #21304	; 0x5338
   112c0:	mov	r6, sp
   112c4:	movt	r0, #1
   112c8:	mov	r1, r6
   112cc:	ldm	r0!, {r2, r3, r4, r5}
   112d0:	stmia	r1!, {r2, r3, r4, r5}
   112d4:	ldm	r0!, {r2, r3, r4, r5, r7}
   112d8:	stmia	r1!, {r2, r3, r4, r5, r7}
   112dc:	ldm	r0, {r2, r3, r4, r5, r7}
   112e0:	stm	r1, {r2, r3, r4, r5, r7}
   112e4:	movw	r1, #20822	; 0x5156
   112e8:	movw	r5, #20606	; 0x507e
   112ec:	movt	r1, #1
   112f0:	movt	r5, #1
   112f4:	mov	r0, r5
   112f8:	bl	10e80 <strcmp@plt>
   112fc:	cmp	r0, #0
   11300:	ldrne	r1, [r6, #8]!
   11304:	cmpne	r1, #0
   11308:	bne	112f4 <__assert_fail@plt+0x228>
   1130c:	movw	r1, #20917	; 0x51b5
   11310:	ldr	r6, [r6, #4]
   11314:	mov	r0, #0
   11318:	mov	r2, #5
   1131c:	movt	r1, #1
   11320:	bl	10ef8 <dcgettext@plt>
   11324:	movw	r2, #20661	; 0x50b5
   11328:	movw	r3, #20940	; 0x51cc
   1132c:	mov	r1, r0
   11330:	mov	r0, #1
   11334:	movt	r2, #1
   11338:	movt	r3, #1
   1133c:	bl	1100c <__printf_chk@plt>
   11340:	cmp	r6, #0
   11344:	mov	r0, #5
   11348:	mov	r1, #0
   1134c:	moveq	r6, r5
   11350:	bl	11054 <setlocale@plt>
   11354:	cmp	r0, #0
   11358:	beq	11390 <__assert_fail@plt+0x2c4>
   1135c:	movw	r1, #20980	; 0x51f4
   11360:	mov	r2, #3
   11364:	movt	r1, #1
   11368:	bl	110a8 <strncmp@plt>
   1136c:	cmp	r0, #0
   11370:	beq	11390 <__assert_fail@plt+0x2c4>
   11374:	movw	r1, #20984	; 0x51f8
   11378:	mov	r0, #0
   1137c:	mov	r2, #5
   11380:	movt	r1, #1
   11384:	bl	10ef8 <dcgettext@plt>
   11388:	ldr	r1, [r9]
   1138c:	bl	10e68 <fputs_unlocked@plt>
   11390:	movw	r1, #21055	; 0x523f
   11394:	mov	r0, #0
   11398:	mov	r2, #5
   1139c:	movt	r1, #1
   113a0:	bl	10ef8 <dcgettext@plt>
   113a4:	movw	r2, #20940	; 0x51cc
   113a8:	mov	r1, r0
   113ac:	mov	r0, #1
   113b0:	mov	r3, r5
   113b4:	movt	r2, #1
   113b8:	bl	1100c <__printf_chk@plt>
   113bc:	movw	r1, #21082	; 0x525a
   113c0:	mov	r0, #0
   113c4:	mov	r2, #5
   113c8:	movt	r1, #1
   113cc:	bl	10ef8 <dcgettext@plt>
   113d0:	mov	r1, r0
   113d4:	movw	r0, #20850	; 0x5172
   113d8:	movw	r3, #21132	; 0x528c
   113dc:	cmp	r6, r5
   113e0:	mov	r2, r6
   113e4:	movt	r0, #1
   113e8:	movt	r3, #1
   113ec:	moveq	r3, r0
   113f0:	mov	r0, #1
   113f4:	bl	1100c <__printf_chk@plt>
   113f8:	mov	r0, r8
   113fc:	bl	10fb8 <exit@plt>
   11400:	movw	r0, #24904	; 0x6148
   11404:	movw	r1, #20228	; 0x4f04
   11408:	mov	r2, #5
   1140c:	movt	r0, #2
   11410:	movt	r1, #1
   11414:	ldr	r5, [r0]
   11418:	mov	r0, #0
   1141c:	bl	10ef8 <dcgettext@plt>
   11420:	mov	r2, r0
   11424:	movw	r0, #24948	; 0x6174
   11428:	mov	r1, #1
   1142c:	movt	r0, #2
   11430:	ldr	r3, [r0]
   11434:	mov	r0, r5
   11438:	bl	11030 <__fprintf_chk@plt>
   1143c:	b	113f8 <__assert_fail@plt+0x32c>
   11440:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11444:	add	fp, sp, #28
   11448:	sub	sp, sp, #28
   1144c:	mov	r4, r0
   11450:	ldr	r0, [r1]
   11454:	mov	r5, r1
   11458:	bl	11d90 <__assert_fail@plt+0xcc4>
   1145c:	movw	r1, #21132	; 0x528c
   11460:	mov	r0, #6
   11464:	movt	r1, #1
   11468:	bl	11054 <setlocale@plt>
   1146c:	movw	r6, #20665	; 0x50b9
   11470:	movw	r1, #20611	; 0x5083
   11474:	movt	r6, #1
   11478:	movt	r1, #1
   1147c:	mov	r0, r6
   11480:	bl	11090 <bindtextdomain@plt>
   11484:	mov	r0, r6
   11488:	bl	10f10 <textdomain@plt>
   1148c:	movw	r0, #6860	; 0x1acc
   11490:	movt	r0, #1
   11494:	bl	14ee0 <__assert_fail@plt+0x3e14>
   11498:	movw	r0, #24928	; 0x6160
   1149c:	mov	r8, #0
   114a0:	movw	r2, #21168	; 0x52b0
   114a4:	movw	r3, #21204	; 0x52d4
   114a8:	mov	r1, r5
   114ac:	movt	r0, #2
   114b0:	movt	r2, #1
   114b4:	movt	r3, #1
   114b8:	str	r8, [sp]
   114bc:	strb	r8, [r0]
   114c0:	movw	r0, #24929	; 0x6161
   114c4:	movt	r0, #2
   114c8:	strb	r8, [r0]
   114cc:	movw	r0, #24930	; 0x6162
   114d0:	movt	r0, #2
   114d4:	strb	r8, [r0]
   114d8:	mov	r0, r4
   114dc:	bl	10fa0 <getopt_long@plt>
   114e0:	mov	r7, #80	; 0x50
   114e4:	cmn	r0, #1
   114e8:	beq	115e4 <__assert_fail@plt+0x518>
   114ec:	movw	r9, #24920	; 0x6158
   114f0:	movw	sl, #21168	; 0x52b0
   114f4:	movw	r6, #21204	; 0x52d4
   114f8:	movt	r9, #2
   114fc:	movt	sl, #1
   11500:	movt	r6, #1
   11504:	sub	r1, r0, #48	; 0x30
   11508:	cmp	r1, #10
   1150c:	bcs	1159c <__assert_fail@plt+0x4d0>
   11510:	ldr	r1, [r9]
   11514:	cmp	r1, #0
   11518:	beq	11524 <__assert_fail@plt+0x458>
   1151c:	sub	r7, r1, #1
   11520:	b	11530 <__assert_fail@plt+0x464>
   11524:	add	r7, sp, #26
   11528:	strb	r8, [sp, #27]
   1152c:	strb	r0, [sp, #26]
   11530:	str	r7, [r9]
   11534:	movw	r1, #20635	; 0x509b
   11538:	mov	r0, #0
   1153c:	mov	r2, #5
   11540:	movt	r1, #1
   11544:	bl	10ef8 <dcgettext@plt>
   11548:	mvn	r1, #9
   1154c:	mov	r2, #1
   11550:	mov	r3, #0
   11554:	stm	sp, {r1, r8}
   11558:	movw	r1, #21132	; 0x528c
   1155c:	str	r0, [sp, #12]
   11560:	mov	r0, r7
   11564:	str	r8, [sp, #16]
   11568:	movt	r1, #1
   1156c:	str	r1, [sp, #8]
   11570:	bl	142f0 <__assert_fail@plt+0x3224>
   11574:	mov	r7, r0
   11578:	mov	r0, r4
   1157c:	mov	r1, r5
   11580:	mov	r2, sl
   11584:	mov	r3, r6
   11588:	str	r8, [sp]
   1158c:	bl	10fa0 <getopt_long@plt>
   11590:	cmn	r0, #1
   11594:	bne	11504 <__assert_fail@plt+0x438>
   11598:	b	115e4 <__assert_fail@plt+0x518>
   1159c:	cmp	r0, #114	; 0x72
   115a0:	ble	115bc <__assert_fail@plt+0x4f0>
   115a4:	cmp	r0, #115	; 0x73
   115a8:	beq	115d0 <__assert_fail@plt+0x504>
   115ac:	cmp	r0, #119	; 0x77
   115b0:	bne	116d4 <__assert_fail@plt+0x608>
   115b4:	ldr	r7, [r9]
   115b8:	b	11534 <__assert_fail@plt+0x468>
   115bc:	cmp	r0, #98	; 0x62
   115c0:	bne	11674 <__assert_fail@plt+0x5a8>
   115c4:	movw	r0, #24929	; 0x6161
   115c8:	movt	r0, #2
   115cc:	b	115d8 <__assert_fail@plt+0x50c>
   115d0:	movw	r0, #24930	; 0x6162
   115d4:	movt	r0, #2
   115d8:	mov	r1, #1
   115dc:	strb	r1, [r0]
   115e0:	b	11578 <__assert_fail@plt+0x4ac>
   115e4:	movw	r0, #24896	; 0x6140
   115e8:	movt	r0, #2
   115ec:	ldr	r0, [r0]
   115f0:	cmp	r0, r4
   115f4:	bne	11610 <__assert_fail@plt+0x544>
   115f8:	movw	r0, #21460	; 0x53d4
   115fc:	mov	r1, r7
   11600:	movt	r0, #1
   11604:	bl	116f4 <__assert_fail@plt+0x628>
   11608:	mov	r6, r0
   1160c:	b	1163c <__assert_fail@plt+0x570>
   11610:	mov	r6, #1
   11614:	bge	1163c <__assert_fail@plt+0x570>
   11618:	add	r5, r5, r0, lsl #2
   1161c:	sub	r4, r4, r0
   11620:	mov	r6, #1
   11624:	ldr	r0, [r5], #4
   11628:	mov	r1, r7
   1162c:	bl	116f4 <__assert_fail@plt+0x628>
   11630:	and	r6, r6, r0
   11634:	subs	r4, r4, #1
   11638:	bne	11624 <__assert_fail@plt+0x558>
   1163c:	movw	r0, #24928	; 0x6160
   11640:	movt	r0, #2
   11644:	ldrb	r0, [r0]
   11648:	cmp	r0, #1
   1164c:	bne	11668 <__assert_fail@plt+0x59c>
   11650:	movw	r0, #24912	; 0x6150
   11654:	movt	r0, #2
   11658:	ldr	r0, [r0]
   1165c:	bl	11bf4 <__assert_fail@plt+0xb28>
   11660:	cmn	r0, #1
   11664:	beq	116dc <__assert_fail@plt+0x610>
   11668:	eor	r0, r6, #1
   1166c:	sub	sp, fp, #28
   11670:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11674:	cmn	r0, #3
   11678:	beq	1168c <__assert_fail@plt+0x5c0>
   1167c:	cmn	r0, #2
   11680:	bne	116d4 <__assert_fail@plt+0x608>
   11684:	mov	r0, #0
   11688:	bl	111c8 <__assert_fail@plt+0xfc>
   1168c:	movw	r0, #24816	; 0x60f0
   11690:	movw	r2, #20675	; 0x50c3
   11694:	mov	r1, #0
   11698:	movt	r0, #2
   1169c:	movt	r2, #1
   116a0:	str	r1, [sp, #4]
   116a4:	movw	r1, #20606	; 0x507e
   116a8:	movt	r1, #1
   116ac:	ldr	r3, [r0]
   116b0:	movw	r0, #24916	; 0x6154
   116b4:	str	r2, [sp]
   116b8:	movw	r2, #20661	; 0x50b5
   116bc:	movt	r0, #2
   116c0:	movt	r2, #1
   116c4:	ldr	r0, [r0]
   116c8:	bl	13c80 <__assert_fail@plt+0x2bb4>
   116cc:	mov	r0, #0
   116d0:	bl	10fb8 <exit@plt>
   116d4:	mov	r0, #1
   116d8:	bl	111c8 <__assert_fail@plt+0xfc>
   116dc:	bl	10fe8 <__errno_location@plt>
   116e0:	ldr	r1, [r0]
   116e4:	movw	r2, #21460	; 0x53d4
   116e8:	mov	r0, #1
   116ec:	movt	r2, #1
   116f0:	bl	10f64 <error@plt>
   116f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116f8:	add	fp, sp, #28
   116fc:	sub	sp, sp, #20
   11700:	str	r1, [sp, #16]
   11704:	movw	r1, #21460	; 0x53d4
   11708:	mov	r7, r0
   1170c:	movt	r1, #1
   11710:	bl	10e80 <strcmp@plt>
   11714:	cmp	r0, #0
   11718:	beq	11734 <__assert_fail@plt+0x668>
   1171c:	movw	r1, #21385	; 0x5389
   11720:	mov	r0, r7
   11724:	movt	r1, #1
   11728:	bl	11084 <fopen64@plt>
   1172c:	mov	r6, r0
   11730:	b	11750 <__assert_fail@plt+0x684>
   11734:	movw	r0, #24928	; 0x6160
   11738:	mov	r1, #1
   1173c:	movt	r0, #2
   11740:	strb	r1, [r0]
   11744:	movw	r0, #24912	; 0x6150
   11748:	movt	r0, #2
   1174c:	ldr	r6, [r0]
   11750:	cmp	r6, #0
   11754:	beq	11978 <__assert_fail@plt+0x8ac>
   11758:	mov	r0, r6
   1175c:	mov	r1, #2
   11760:	bl	11bb8 <__assert_fail@plt+0xaec>
   11764:	mov	r0, r6
   11768:	bl	10eec <getc_unlocked@plt>
   1176c:	cmn	r0, #1
   11770:	str	r7, [sp, #4]
   11774:	beq	11984 <__assert_fail@plt+0x8b8>
   11778:	mov	sl, r0
   1177c:	mov	r4, #0
   11780:	mov	r8, #0
   11784:	str	r6, [sp, #8]
   11788:	movw	r0, #24936	; 0x6168
   1178c:	add	r9, r4, #1
   11790:	movt	r0, #2
   11794:	ldr	r0, [r0]
   11798:	cmp	r9, r0
   1179c:	bcc	117c0 <__assert_fail@plt+0x6f4>
   117a0:	movw	r0, #24932	; 0x6164
   117a4:	movw	r1, #24936	; 0x6168
   117a8:	movt	r0, #2
   117ac:	movt	r1, #2
   117b0:	mov	r5, r0
   117b4:	ldr	r0, [r0]
   117b8:	bl	13e8c <__assert_fail@plt+0x2dc0>
   117bc:	str	r0, [r5]
   117c0:	cmp	sl, #10
   117c4:	bne	11800 <__assert_fail@plt+0x734>
   117c8:	movw	r0, #24932	; 0x6164
   117cc:	mov	r1, #10
   117d0:	mov	r2, r9
   117d4:	movt	r0, #2
   117d8:	ldr	r0, [r0]
   117dc:	strb	r1, [r0, r4]
   117e0:	movw	r1, #24916	; 0x6154
   117e4:	movt	r1, #2
   117e8:	ldr	r3, [r1]
   117ec:	mov	r1, #1
   117f0:	bl	10ee0 <fwrite_unlocked@plt>
   117f4:	mov	r8, #0
   117f8:	mov	r4, #0
   117fc:	b	1195c <__assert_fail@plt+0x890>
   11800:	uxtb	r1, sl
   11804:	mov	r0, r8
   11808:	str	r1, [sp, #12]
   1180c:	bl	11a58 <__assert_fail@plt+0x98c>
   11810:	mov	r8, r0
   11814:	ldr	r0, [sp, #16]
   11818:	cmp	r8, r0
   1181c:	bls	1193c <__assert_fail@plt+0x870>
   11820:	movw	r0, #24932	; 0x6164
   11824:	movt	r0, #2
   11828:	ldr	r9, [r0]
   1182c:	movw	r0, #24930	; 0x6162
   11830:	movt	r0, #2
   11834:	ldrb	r0, [r0]
   11838:	cmp	r0, #1
   1183c:	bne	118ec <__assert_fail@plt+0x820>
   11840:	add	r0, r9, r4
   11844:	mov	r7, #0
   11848:	sub	r6, r0, #1
   1184c:	adds	r0, r4, r7
   11850:	beq	118ec <__assert_fail@plt+0x820>
   11854:	mov	r5, r7
   11858:	bl	10fac <__ctype_b_loc@plt>
   1185c:	ldrb	r1, [r6, r7]
   11860:	ldr	r0, [r0]
   11864:	sub	r7, r7, #1
   11868:	ldrb	r0, [r0, r1, lsl #1]
   1186c:	tst	r0, #1
   11870:	beq	1184c <__assert_fail@plt+0x780>
   11874:	add	r0, r4, r7
   11878:	mov	r1, #1
   1187c:	add	r2, r0, #1
   11880:	movw	r0, #24916	; 0x6154
   11884:	movt	r0, #2
   11888:	ldr	r3, [r0]
   1188c:	mov	r0, r9
   11890:	bl	10ee0 <fwrite_unlocked@plt>
   11894:	mov	r0, #10
   11898:	bl	110c0 <putchar_unlocked@plt>
   1189c:	movw	r0, #24932	; 0x6164
   118a0:	movt	r0, #2
   118a4:	ldr	r6, [r0]
   118a8:	add	r0, r6, r4
   118ac:	mvn	r4, r7
   118b0:	add	r0, r0, r7
   118b4:	mov	r2, r4
   118b8:	add	r1, r0, #1
   118bc:	mov	r0, r6
   118c0:	bl	10ea4 <memmove@plt>
   118c4:	cmn	r7, #1
   118c8:	beq	11918 <__assert_fail@plt+0x84c>
   118cc:	mov	r7, #0
   118d0:	mov	r0, #0
   118d4:	ldrb	r1, [r6, -r7]
   118d8:	bl	11a58 <__assert_fail@plt+0x98c>
   118dc:	sub	r7, r7, #1
   118e0:	cmp	r5, r7
   118e4:	bne	118d4 <__assert_fail@plt+0x808>
   118e8:	b	11920 <__assert_fail@plt+0x854>
   118ec:	cmp	r4, #0
   118f0:	beq	11954 <__assert_fail@plt+0x888>
   118f4:	mov	r0, #10
   118f8:	add	r2, r4, #1
   118fc:	mov	r1, #1
   11900:	strb	r0, [r9, r4]
   11904:	movw	r0, #24916	; 0x6154
   11908:	movt	r0, #2
   1190c:	ldr	r3, [r0]
   11910:	mov	r0, r9
   11914:	bl	10ee0 <fwrite_unlocked@plt>
   11918:	mov	r0, #0
   1191c:	mov	r4, #0
   11920:	ldr	r1, [sp, #12]
   11924:	bl	11a58 <__assert_fail@plt+0x98c>
   11928:	mov	r8, r0
   1192c:	ldr	r0, [sp, #16]
   11930:	cmp	r8, r0
   11934:	bhi	11820 <__assert_fail@plt+0x754>
   11938:	add	r9, r4, #1
   1193c:	movw	r0, #24932	; 0x6164
   11940:	movt	r0, #2
   11944:	ldr	r0, [r0]
   11948:	strb	sl, [r0, r4]
   1194c:	mov	r4, r9
   11950:	b	1195c <__assert_fail@plt+0x890>
   11954:	strb	sl, [r9]
   11958:	mov	r4, #1
   1195c:	ldr	r6, [sp, #8]
   11960:	mov	r0, r6
   11964:	bl	10eec <getc_unlocked@plt>
   11968:	mov	sl, r0
   1196c:	cmn	r0, #1
   11970:	bne	11788 <__assert_fail@plt+0x6bc>
   11974:	b	11988 <__assert_fail@plt+0x8bc>
   11978:	bl	10fe8 <__errno_location@plt>
   1197c:	ldr	r5, [r0]
   11980:	b	11a18 <__assert_fail@plt+0x94c>
   11984:	mov	r4, #0
   11988:	bl	10fe8 <__errno_location@plt>
   1198c:	ldr	r5, [r0]
   11990:	mov	r8, r0
   11994:	mov	r0, r6
   11998:	bl	10f4c <ferror_unlocked@plt>
   1199c:	cmp	r0, #0
   119a0:	moveq	r5, r0
   119a4:	cmp	r4, #0
   119a8:	beq	119d0 <__assert_fail@plt+0x904>
   119ac:	movw	r0, #24916	; 0x6154
   119b0:	mov	r1, #1
   119b4:	mov	r2, r4
   119b8:	movt	r0, #2
   119bc:	ldr	r3, [r0]
   119c0:	movw	r0, #24932	; 0x6164
   119c4:	movt	r0, #2
   119c8:	ldr	r0, [r0]
   119cc:	bl	10ee0 <fwrite_unlocked@plt>
   119d0:	ldr	r7, [sp, #4]
   119d4:	movw	r1, #21460	; 0x53d4
   119d8:	movt	r1, #1
   119dc:	mov	r0, r7
   119e0:	bl	10e80 <strcmp@plt>
   119e4:	cmp	r0, #0
   119e8:	beq	11a08 <__assert_fail@plt+0x93c>
   119ec:	mov	r0, r6
   119f0:	bl	11bf4 <__assert_fail@plt+0xb28>
   119f4:	cmp	r5, #0
   119f8:	bne	11a10 <__assert_fail@plt+0x944>
   119fc:	cmp	r0, #0
   11a00:	ldrne	r5, [r8]
   11a04:	b	11a10 <__assert_fail@plt+0x944>
   11a08:	mov	r0, r6
   11a0c:	bl	11078 <clearerr_unlocked@plt>
   11a10:	cmp	r5, #0
   11a14:	beq	11a48 <__assert_fail@plt+0x97c>
   11a18:	mov	r0, #0
   11a1c:	mov	r1, #3
   11a20:	mov	r2, r7
   11a24:	mov	r4, #0
   11a28:	bl	135e8 <__assert_fail@plt+0x251c>
   11a2c:	movw	r2, #21391	; 0x538f
   11a30:	mov	r3, r0
   11a34:	mov	r0, #0
   11a38:	mov	r1, r5
   11a3c:	movt	r2, #1
   11a40:	bl	10f64 <error@plt>
   11a44:	b	11a4c <__assert_fail@plt+0x980>
   11a48:	mov	r4, #1
   11a4c:	mov	r0, r4
   11a50:	sub	sp, fp, #28
   11a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a58:	movw	r2, #24929	; 0x6161
   11a5c:	movt	r2, #2
   11a60:	ldrb	r2, [r2]
   11a64:	cmp	r2, #0
   11a68:	bne	11a94 <__assert_fail@plt+0x9c8>
   11a6c:	cmp	r1, #13
   11a70:	moveq	r0, #0
   11a74:	bxeq	lr
   11a78:	cmp	r1, #9
   11a7c:	beq	11a9c <__assert_fail@plt+0x9d0>
   11a80:	cmp	r1, #8
   11a84:	bne	11a94 <__assert_fail@plt+0x9c8>
   11a88:	cmp	r0, #0
   11a8c:	subne	r0, r0, #1
   11a90:	bx	lr
   11a94:	add	r0, r0, #1
   11a98:	bx	lr
   11a9c:	and	r1, r0, #7
   11aa0:	sub	r0, r0, r1
   11aa4:	add	r0, r0, #8
   11aa8:	bx	lr
   11aac:	movw	r1, #24940	; 0x616c
   11ab0:	movt	r1, #2
   11ab4:	str	r0, [r1]
   11ab8:	bx	lr
   11abc:	movw	r1, #24944	; 0x6170
   11ac0:	movt	r1, #2
   11ac4:	strb	r0, [r1]
   11ac8:	bx	lr
   11acc:	push	{r4, r5, r6, sl, fp, lr}
   11ad0:	add	fp, sp, #16
   11ad4:	sub	sp, sp, #8
   11ad8:	movw	r0, #24916	; 0x6154
   11adc:	movt	r0, #2
   11ae0:	ldr	r0, [r0]
   11ae4:	bl	14a88 <__assert_fail@plt+0x39bc>
   11ae8:	cmp	r0, #0
   11aec:	beq	11b14 <__assert_fail@plt+0xa48>
   11af0:	movw	r0, #24944	; 0x6170
   11af4:	movt	r0, #2
   11af8:	ldrb	r0, [r0]
   11afc:	cmp	r0, #0
   11b00:	beq	11b34 <__assert_fail@plt+0xa68>
   11b04:	bl	10fe8 <__errno_location@plt>
   11b08:	ldr	r0, [r0]
   11b0c:	cmp	r0, #32
   11b10:	bne	11b34 <__assert_fail@plt+0xa68>
   11b14:	movw	r0, #24904	; 0x6148
   11b18:	movt	r0, #2
   11b1c:	ldr	r0, [r0]
   11b20:	bl	14a88 <__assert_fail@plt+0x39bc>
   11b24:	cmp	r0, #0
   11b28:	subeq	sp, fp, #16
   11b2c:	popeq	{r4, r5, r6, sl, fp, pc}
   11b30:	b	11ba4 <__assert_fail@plt+0xad8>
   11b34:	movw	r1, #21375	; 0x537f
   11b38:	mov	r0, #0
   11b3c:	mov	r2, #5
   11b40:	movt	r1, #1
   11b44:	bl	10ef8 <dcgettext@plt>
   11b48:	mov	r4, r0
   11b4c:	movw	r0, #24940	; 0x616c
   11b50:	movt	r0, #2
   11b54:	ldr	r6, [r0]
   11b58:	bl	10fe8 <__errno_location@plt>
   11b5c:	ldr	r5, [r0]
   11b60:	cmp	r6, #0
   11b64:	bne	11b80 <__assert_fail@plt+0xab4>
   11b68:	movw	r2, #21391	; 0x538f
   11b6c:	mov	r0, #0
   11b70:	mov	r1, r5
   11b74:	mov	r3, r4
   11b78:	movt	r2, #1
   11b7c:	b	11ba0 <__assert_fail@plt+0xad4>
   11b80:	mov	r0, r6
   11b84:	bl	1353c <__assert_fail@plt+0x2470>
   11b88:	movw	r2, #21387	; 0x538b
   11b8c:	mov	r3, r0
   11b90:	str	r4, [sp]
   11b94:	mov	r0, #0
   11b98:	mov	r1, r5
   11b9c:	movt	r2, #1
   11ba0:	bl	10f64 <error@plt>
   11ba4:	movw	r0, #24820	; 0x60f4
   11ba8:	movt	r0, #2
   11bac:	ldr	r0, [r0]
   11bb0:	bl	10ebc <_exit@plt>
   11bb4:	b	10e8c <posix_fadvise64@plt>
   11bb8:	cmp	r0, #0
   11bbc:	bxeq	lr
   11bc0:	push	{r4, sl, fp, lr}
   11bc4:	add	fp, sp, #8
   11bc8:	sub	sp, sp, #16
   11bcc:	mov	r4, r1
   11bd0:	bl	11018 <fileno@plt>
   11bd4:	mov	r1, #0
   11bd8:	mov	r2, #0
   11bdc:	mov	r3, #0
   11be0:	str	r1, [sp]
   11be4:	stmib	sp, {r1, r4}
   11be8:	bl	10e8c <posix_fadvise64@plt>
   11bec:	sub	sp, fp, #8
   11bf0:	pop	{r4, sl, fp, pc}
   11bf4:	push	{r4, r5, r6, sl, fp, lr}
   11bf8:	add	fp, sp, #16
   11bfc:	sub	sp, sp, #8
   11c00:	mov	r4, r0
   11c04:	bl	11018 <fileno@plt>
   11c08:	cmn	r0, #1
   11c0c:	ble	11c80 <__assert_fail@plt+0xbb4>
   11c10:	mov	r0, r4
   11c14:	bl	10f88 <__freading@plt>
   11c18:	cmp	r0, #0
   11c1c:	beq	11c48 <__assert_fail@plt+0xb7c>
   11c20:	mov	r0, r4
   11c24:	bl	11018 <fileno@plt>
   11c28:	mov	r1, #1
   11c2c:	mov	r2, #0
   11c30:	mov	r3, #0
   11c34:	str	r1, [sp]
   11c38:	bl	10f28 <lseek64@plt>
   11c3c:	and	r0, r0, r1
   11c40:	cmn	r0, #1
   11c44:	beq	11c80 <__assert_fail@plt+0xbb4>
   11c48:	mov	r0, r4
   11c4c:	bl	11c90 <__assert_fail@plt+0xbc4>
   11c50:	cmp	r0, #0
   11c54:	beq	11c80 <__assert_fail@plt+0xbb4>
   11c58:	bl	10fe8 <__errno_location@plt>
   11c5c:	ldr	r6, [r0]
   11c60:	mov	r5, r0
   11c64:	mov	r0, r4
   11c68:	bl	1103c <fclose@plt>
   11c6c:	cmp	r6, #0
   11c70:	strne	r6, [r5]
   11c74:	mvnne	r0, #0
   11c78:	sub	sp, fp, #16
   11c7c:	pop	{r4, r5, r6, sl, fp, pc}
   11c80:	mov	r0, r4
   11c84:	sub	sp, fp, #16
   11c88:	pop	{r4, r5, r6, sl, fp, lr}
   11c8c:	b	1103c <fclose@plt>
   11c90:	push	{r4, sl, fp, lr}
   11c94:	add	fp, sp, #8
   11c98:	sub	sp, sp, #8
   11c9c:	mov	r4, r0
   11ca0:	cmp	r0, #0
   11ca4:	beq	11cdc <__assert_fail@plt+0xc10>
   11ca8:	mov	r0, r4
   11cac:	bl	10f88 <__freading@plt>
   11cb0:	cmp	r0, #0
   11cb4:	beq	11cdc <__assert_fail@plt+0xc10>
   11cb8:	ldrb	r0, [r4, #1]
   11cbc:	tst	r0, #1
   11cc0:	beq	11cdc <__assert_fail@plt+0xc10>
   11cc4:	mov	r0, #1
   11cc8:	mov	r2, #0
   11ccc:	mov	r3, #0
   11cd0:	str	r0, [sp]
   11cd4:	mov	r0, r4
   11cd8:	bl	11cec <__assert_fail@plt+0xc20>
   11cdc:	mov	r0, r4
   11ce0:	sub	sp, fp, #8
   11ce4:	pop	{r4, sl, fp, lr}
   11ce8:	b	10e98 <fflush@plt>
   11cec:	push	{r4, r5, r6, r7, fp, lr}
   11cf0:	add	fp, sp, #16
   11cf4:	sub	sp, sp, #8
   11cf8:	mov	r4, r0
   11cfc:	ldr	r0, [r0, #4]
   11d00:	mov	r5, r3
   11d04:	mov	r6, r2
   11d08:	ldr	r1, [r4, #8]
   11d0c:	cmp	r1, r0
   11d10:	bne	11d2c <__assert_fail@plt+0xc60>
   11d14:	ldrd	r0, [r4, #16]
   11d18:	cmp	r1, r0
   11d1c:	bne	11d2c <__assert_fail@plt+0xc60>
   11d20:	ldr	r0, [r4, #36]	; 0x24
   11d24:	cmp	r0, #0
   11d28:	beq	11d44 <__assert_fail@plt+0xc78>
   11d2c:	mov	r0, r4
   11d30:	mov	r2, r6
   11d34:	mov	r3, r5
   11d38:	sub	sp, fp, #16
   11d3c:	pop	{r4, r5, r6, r7, fp, lr}
   11d40:	b	11048 <fseeko64@plt>
   11d44:	ldr	r7, [fp, #8]
   11d48:	mov	r0, r4
   11d4c:	bl	11018 <fileno@plt>
   11d50:	mov	r2, r6
   11d54:	mov	r3, r5
   11d58:	str	r7, [sp]
   11d5c:	bl	10f28 <lseek64@plt>
   11d60:	and	r2, r0, r1
   11d64:	cmn	r2, #1
   11d68:	beq	11d84 <__assert_fail@plt+0xcb8>
   11d6c:	strd	r0, [r4, #80]	; 0x50
   11d70:	ldr	r0, [r4]
   11d74:	bic	r0, r0, #16
   11d78:	str	r0, [r4]
   11d7c:	mov	r0, #0
   11d80:	b	11d88 <__assert_fail@plt+0xcbc>
   11d84:	mvn	r0, #0
   11d88:	sub	sp, fp, #16
   11d8c:	pop	{r4, r5, r6, r7, fp, pc}
   11d90:	push	{r4, r5, fp, lr}
   11d94:	add	fp, sp, #8
   11d98:	cmp	r0, #0
   11d9c:	beq	11e30 <__assert_fail@plt+0xd64>
   11da0:	mov	r1, #47	; 0x2f
   11da4:	mov	r4, r0
   11da8:	bl	11060 <strrchr@plt>
   11dac:	cmp	r0, #0
   11db0:	mov	r5, r4
   11db4:	addne	r5, r0, #1
   11db8:	sub	r0, r5, r4
   11dbc:	cmp	r0, #7
   11dc0:	blt	11e14 <__assert_fail@plt+0xd48>
   11dc4:	movw	r1, #21450	; 0x53ca
   11dc8:	sub	r0, r5, #7
   11dcc:	mov	r2, #7
   11dd0:	movt	r1, #1
   11dd4:	bl	110a8 <strncmp@plt>
   11dd8:	cmp	r0, #0
   11ddc:	bne	11e14 <__assert_fail@plt+0xd48>
   11de0:	movw	r1, #21458	; 0x53d2
   11de4:	mov	r0, r5
   11de8:	mov	r2, #3
   11dec:	movt	r1, #1
   11df0:	bl	110a8 <strncmp@plt>
   11df4:	cmp	r0, #0
   11df8:	beq	11e04 <__assert_fail@plt+0xd38>
   11dfc:	mov	r4, r5
   11e00:	b	11e14 <__assert_fail@plt+0xd48>
   11e04:	movw	r0, #24888	; 0x6138
   11e08:	add	r4, r5, #3
   11e0c:	movt	r0, #2
   11e10:	str	r4, [r0]
   11e14:	movw	r0, #24892	; 0x613c
   11e18:	movt	r0, #2
   11e1c:	str	r4, [r0]
   11e20:	movw	r0, #24948	; 0x6174
   11e24:	movt	r0, #2
   11e28:	str	r4, [r0]
   11e2c:	pop	{r4, r5, fp, pc}
   11e30:	movw	r0, #24904	; 0x6148
   11e34:	movt	r0, #2
   11e38:	ldr	r1, [r0]
   11e3c:	movw	r0, #21394	; 0x5392
   11e40:	movt	r0, #1
   11e44:	bl	1109c <fputs@plt>
   11e48:	bl	110b4 <abort@plt>
   11e4c:	push	{r4, r5, r6, sl, fp, lr}
   11e50:	add	fp, sp, #16
   11e54:	mov	r4, r0
   11e58:	movw	r0, #24952	; 0x6178
   11e5c:	movt	r0, #2
   11e60:	cmp	r4, #0
   11e64:	moveq	r4, r0
   11e68:	bl	10fe8 <__errno_location@plt>
   11e6c:	ldr	r6, [r0]
   11e70:	mov	r5, r0
   11e74:	mov	r0, r4
   11e78:	mov	r1, #48	; 0x30
   11e7c:	bl	140d8 <__assert_fail@plt+0x300c>
   11e80:	str	r6, [r5]
   11e84:	pop	{r4, r5, r6, sl, fp, pc}
   11e88:	movw	r1, #24952	; 0x6178
   11e8c:	cmp	r0, #0
   11e90:	movt	r1, #2
   11e94:	movne	r1, r0
   11e98:	ldr	r0, [r1]
   11e9c:	bx	lr
   11ea0:	movw	r2, #24952	; 0x6178
   11ea4:	cmp	r0, #0
   11ea8:	movt	r2, #2
   11eac:	movne	r2, r0
   11eb0:	str	r1, [r2]
   11eb4:	bx	lr
   11eb8:	movw	r3, #24952	; 0x6178
   11ebc:	cmp	r0, #0
   11ec0:	and	r2, r2, #1
   11ec4:	movt	r3, #2
   11ec8:	movne	r3, r0
   11ecc:	ubfx	r0, r1, #5, #3
   11ed0:	and	r1, r1, #31
   11ed4:	add	ip, r3, r0, lsl #2
   11ed8:	mov	r0, #1
   11edc:	ldr	r3, [ip, #8]
   11ee0:	and	r0, r0, r3, lsr r1
   11ee4:	eor	r2, r0, r2
   11ee8:	eor	r1, r3, r2, lsl r1
   11eec:	str	r1, [ip, #8]
   11ef0:	bx	lr
   11ef4:	movw	r2, #24952	; 0x6178
   11ef8:	cmp	r0, #0
   11efc:	movt	r2, #2
   11f00:	movne	r2, r0
   11f04:	ldr	r0, [r2, #4]
   11f08:	str	r1, [r2, #4]
   11f0c:	bx	lr
   11f10:	push	{fp, lr}
   11f14:	mov	fp, sp
   11f18:	movw	r3, #24952	; 0x6178
   11f1c:	cmp	r0, #0
   11f20:	movt	r3, #2
   11f24:	movne	r3, r0
   11f28:	cmp	r1, #0
   11f2c:	mov	r0, #10
   11f30:	cmpne	r2, #0
   11f34:	str	r0, [r3]
   11f38:	bne	11f40 <__assert_fail@plt+0xe74>
   11f3c:	bl	110b4 <abort@plt>
   11f40:	str	r1, [r3, #40]	; 0x28
   11f44:	str	r2, [r3, #44]	; 0x2c
   11f48:	pop	{fp, pc}
   11f4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f50:	add	fp, sp, #28
   11f54:	sub	sp, sp, #20
   11f58:	mov	r7, r0
   11f5c:	ldr	r0, [fp, #8]
   11f60:	movw	r5, #24952	; 0x6178
   11f64:	mov	r8, r3
   11f68:	mov	r9, r2
   11f6c:	mov	sl, r1
   11f70:	movt	r5, #2
   11f74:	cmp	r0, #0
   11f78:	movne	r5, r0
   11f7c:	bl	10fe8 <__errno_location@plt>
   11f80:	ldr	r2, [r5, #40]	; 0x28
   11f84:	ldr	r3, [r5, #44]	; 0x2c
   11f88:	mov	r4, r0
   11f8c:	ldm	r5, {r0, r1}
   11f90:	add	r5, r5, #8
   11f94:	ldr	r6, [r4]
   11f98:	stm	sp, {r0, r1, r5}
   11f9c:	mov	r0, r7
   11fa0:	mov	r1, sl
   11fa4:	str	r2, [sp, #12]
   11fa8:	str	r3, [sp, #16]
   11fac:	mov	r2, r9
   11fb0:	mov	r3, r8
   11fb4:	bl	11fc4 <__assert_fail@plt+0xef8>
   11fb8:	str	r6, [r4]
   11fbc:	sub	sp, fp, #28
   11fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fc8:	add	fp, sp, #28
   11fcc:	sub	sp, sp, #156	; 0x9c
   11fd0:	mov	r5, r0
   11fd4:	add	r0, r2, #1
   11fd8:	mov	r6, r1
   11fdc:	mov	sl, r3
   11fe0:	str	r2, [fp, #-80]	; 0xffffffb0
   11fe4:	str	r0, [sp, #72]	; 0x48
   11fe8:	ldr	r0, [fp, #12]
   11fec:	and	r1, r0, #1
   11ff0:	str	r1, [sp, #32]
   11ff4:	and	r1, r0, #4
   11ff8:	str	r1, [sp, #28]
   11ffc:	ubfx	r9, r0, #1, #1
   12000:	bl	10f34 <__ctype_get_mb_cur_max@plt>
   12004:	str	r0, [sp, #40]	; 0x28
   12008:	ldr	r0, [fp, #24]
   1200c:	ldr	r7, [fp, #8]
   12010:	mov	r1, #0
   12014:	mov	lr, #0
   12018:	str	r5, [fp, #-84]	; 0xffffffac
   1201c:	str	r1, [sp, #60]	; 0x3c
   12020:	mov	r1, #1
   12024:	str	r1, [fp, #-48]	; 0xffffffd0
   12028:	str	r0, [sp, #80]	; 0x50
   1202c:	ldr	r0, [fp, #20]
   12030:	str	r0, [sp, #76]	; 0x4c
   12034:	mov	r0, #0
   12038:	str	r0, [sp, #56]	; 0x38
   1203c:	mov	r0, #0
   12040:	str	r0, [fp, #-88]	; 0xffffffa8
   12044:	mov	r0, #0
   12048:	str	r0, [fp, #-72]	; 0xffffffb8
   1204c:	mov	r0, #0
   12050:	cmp	r7, #10
   12054:	bhi	13030 <__assert_fail@plt+0x1f64>
   12058:	add	r1, pc, #24
   1205c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12060:	mov	ip, r6
   12064:	mov	r8, #0
   12068:	mov	r2, #1
   1206c:	mov	r6, #0
   12070:	mov	r3, sl
   12074:	ldr	pc, [r1, r7, lsl #2]
   12078:	andeq	r2, r1, r4, ror #2
   1207c:			; <UNDEFINED> instruction: 0x000121b8
   12080:	andeq	r2, r1, r8, ror r1
   12084:	andeq	r2, r1, ip, asr r1
   12088:	andeq	r2, r1, ip, lsr #3
   1208c:	andeq	r2, r1, r0, ror #3
   12090:	andeq	r2, r1, r8, lsl #3
   12094:	andeq	r2, r1, r4, ror #4
   12098:	andeq	r2, r1, r4, lsr #1
   1209c:	andeq	r2, r1, r4, lsr #1
   120a0:	andeq	r2, r1, r4, ror #1
   120a4:	movw	r0, #21540	; 0x5424
   120a8:	mov	r1, r7
   120ac:	mov	r6, r5
   120b0:	mov	r4, ip
   120b4:	mov	r5, lr
   120b8:	movt	r0, #1
   120bc:	bl	13794 <__assert_fail@plt+0x26c8>
   120c0:	str	r0, [sp, #76]	; 0x4c
   120c4:	movw	r0, #21542	; 0x5426
   120c8:	mov	r1, r7
   120cc:	movt	r0, #1
   120d0:	bl	13794 <__assert_fail@plt+0x26c8>
   120d4:	mov	lr, r5
   120d8:	mov	r5, r6
   120dc:	mov	ip, r4
   120e0:	str	r0, [sp, #80]	; 0x50
   120e4:	mov	r8, #0
   120e8:	tst	r9, #1
   120ec:	str	lr, [sp, #44]	; 0x2c
   120f0:	bne	12128 <__assert_fail@plt+0x105c>
   120f4:	ldr	r0, [sp, #76]	; 0x4c
   120f8:	ldrb	r0, [r0]
   120fc:	cmp	r0, #0
   12100:	beq	12128 <__assert_fail@plt+0x105c>
   12104:	ldr	r1, [sp, #76]	; 0x4c
   12108:	mov	r8, #0
   1210c:	add	r1, r1, #1
   12110:	cmp	r8, ip
   12114:	strbcc	r0, [r5, r8]
   12118:	ldrb	r0, [r1, r8]
   1211c:	add	r8, r8, #1
   12120:	cmp	r0, #0
   12124:	bne	12110 <__assert_fail@plt+0x1044>
   12128:	ldr	r6, [sp, #80]	; 0x50
   1212c:	mov	r4, ip
   12130:	mov	r0, r6
   12134:	bl	10fd0 <strlen@plt>
   12138:	mov	ip, r4
   1213c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12140:	ldr	lr, [sp, #44]	; 0x2c
   12144:	str	r6, [fp, #-88]	; 0xffffffa8
   12148:	str	r0, [fp, #-72]	; 0xffffffb8
   1214c:	mov	r2, #1
   12150:	mov	r6, r9
   12154:	mov	r3, sl
   12158:	b	12264 <__assert_fail@plt+0x1198>
   1215c:	mov	r0, #1
   12160:	b	121b8 <__assert_fail@plt+0x10ec>
   12164:	mov	r7, #0
   12168:	mov	r8, #0
   1216c:	mov	r2, r0
   12170:	mov	r6, #0
   12174:	b	12264 <__assert_fail@plt+0x1198>
   12178:	tst	r9, #1
   1217c:	bne	121b8 <__assert_fail@plt+0x10ec>
   12180:	mov	r2, r0
   12184:	b	12210 <__assert_fail@plt+0x1144>
   12188:	mov	r0, #1
   1218c:	mov	r8, #0
   12190:	mov	r7, #5
   12194:	mov	r2, #1
   12198:	str	r0, [fp, #-72]	; 0xffffffb8
   1219c:	movw	r0, #21538	; 0x5422
   121a0:	movt	r0, #1
   121a4:	str	r0, [fp, #-88]	; 0xffffffa8
   121a8:	b	121d8 <__assert_fail@plt+0x110c>
   121ac:	mov	r2, #1
   121b0:	tst	r9, #1
   121b4:	beq	12210 <__assert_fail@plt+0x1144>
   121b8:	mov	r1, #1
   121bc:	mov	r8, #0
   121c0:	mov	r7, #2
   121c4:	mov	r2, r0
   121c8:	str	r1, [fp, #-72]	; 0xffffffb8
   121cc:	movw	r1, #21542	; 0x5426
   121d0:	movt	r1, #1
   121d4:	str	r1, [fp, #-88]	; 0xffffffa8
   121d8:	mov	r6, #1
   121dc:	b	12264 <__assert_fail@plt+0x1198>
   121e0:	tst	r9, #1
   121e4:	beq	12234 <__assert_fail@plt+0x1168>
   121e8:	mov	r0, #1
   121ec:	mov	r8, #0
   121f0:	mov	r2, #1
   121f4:	mov	r6, #1
   121f8:	mov	r7, #5
   121fc:	str	r0, [fp, #-72]	; 0xffffffb8
   12200:	movw	r0, #21538	; 0x5422
   12204:	movt	r0, #1
   12208:	str	r0, [fp, #-88]	; 0xffffffa8
   1220c:	b	12264 <__assert_fail@plt+0x1198>
   12210:	cmp	ip, #0
   12214:	mov	r8, #1
   12218:	mov	r6, #0
   1221c:	mov	r7, #2
   12220:	movne	r0, #39	; 0x27
   12224:	strbne	r0, [r5]
   12228:	movw	r0, #21542	; 0x5426
   1222c:	movt	r0, #1
   12230:	b	12258 <__assert_fail@plt+0x118c>
   12234:	cmp	ip, #0
   12238:	mov	r8, #1
   1223c:	mov	r2, #1
   12240:	mov	r7, #5
   12244:	mov	r6, #0
   12248:	movne	r0, #34	; 0x22
   1224c:	strbne	r0, [r5]
   12250:	movw	r0, #21538	; 0x5422
   12254:	movt	r0, #1
   12258:	str	r0, [fp, #-88]	; 0xffffffa8
   1225c:	mov	r0, #1
   12260:	str	r0, [fp, #-72]	; 0xffffffb8
   12264:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12268:	str	r7, [fp, #-68]	; 0xffffffbc
   1226c:	str	r6, [fp, #-76]	; 0xffffffb4
   12270:	str	r2, [sp, #84]	; 0x54
   12274:	cmp	r0, #0
   12278:	movwne	r0, #1
   1227c:	and	r1, r0, r6
   12280:	and	r1, r2, r1
   12284:	str	r1, [sp, #48]	; 0x30
   12288:	sub	r1, r7, #2
   1228c:	clz	r1, r1
   12290:	lsr	r1, r1, #5
   12294:	and	r1, r1, r6
   12298:	str	r1, [sp, #64]	; 0x40
   1229c:	subs	r1, r7, #2
   122a0:	eor	r7, r6, #1
   122a4:	movwne	r1, #1
   122a8:	str	r7, [sp, #92]	; 0x5c
   122ac:	orr	r7, r1, r7
   122b0:	and	r1, r1, r2
   122b4:	and	r0, r0, r1
   122b8:	str	r7, [sp, #68]	; 0x44
   122bc:	mov	r7, #0
   122c0:	str	r0, [fp, #-60]	; 0xffffffc4
   122c4:	orr	r0, r1, r6
   122c8:	ldr	r1, [fp, #16]
   122cc:	eor	r0, r0, #1
   122d0:	clz	r1, r1
   122d4:	lsr	r1, r1, #5
   122d8:	orr	r0, r1, r0
   122dc:	str	r0, [fp, #-64]	; 0xffffffc0
   122e0:	eor	r0, r2, #1
   122e4:	str	r0, [sp, #52]	; 0x34
   122e8:	cmn	r3, #1
   122ec:	beq	122fc <__assert_fail@plt+0x1230>
   122f0:	cmp	r7, r3
   122f4:	bne	12308 <__assert_fail@plt+0x123c>
   122f8:	b	12e64 <__assert_fail@plt+0x1d98>
   122fc:	ldrb	r0, [r4, r7]
   12300:	cmp	r0, #0
   12304:	beq	12e6c <__assert_fail@plt+0x1da0>
   12308:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1230c:	cmp	r0, #0
   12310:	beq	12358 <__assert_fail@plt+0x128c>
   12314:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12318:	add	r5, r7, r0
   1231c:	cmp	r0, #2
   12320:	bcc	1236c <__assert_fail@plt+0x12a0>
   12324:	mov	r0, #0
   12328:	cmn	r3, #1
   1232c:	str	r0, [fp, #-56]	; 0xffffffc8
   12330:	bne	12374 <__assert_fail@plt+0x12a8>
   12334:	mov	r0, r4
   12338:	mov	r4, ip
   1233c:	mov	r6, lr
   12340:	bl	10fd0 <strlen@plt>
   12344:	mov	ip, r4
   12348:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1234c:	mov	lr, r6
   12350:	mov	r3, r0
   12354:	b	12374 <__assert_fail@plt+0x12a8>
   12358:	mov	r0, #0
   1235c:	mov	sl, r3
   12360:	str	r0, [fp, #-56]	; 0xffffffc8
   12364:	mov	r0, #0
   12368:	b	123e0 <__assert_fail@plt+0x1314>
   1236c:	mov	r0, #0
   12370:	str	r0, [fp, #-56]	; 0xffffffc8
   12374:	cmp	r5, r3
   12378:	bls	1238c <__assert_fail@plt+0x12c0>
   1237c:	ldr	r5, [fp, #-84]	; 0xffffffac
   12380:	mov	r0, #0
   12384:	mov	sl, r3
   12388:	b	123e0 <__assert_fail@plt+0x1314>
   1238c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12390:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12394:	add	r0, r4, r7
   12398:	mov	r5, lr
   1239c:	mov	r6, ip
   123a0:	mov	sl, r3
   123a4:	bl	10fc4 <bcmp@plt>
   123a8:	ldr	r2, [sp, #92]	; 0x5c
   123ac:	cmp	r0, #0
   123b0:	ldr	r3, [fp, #-84]	; 0xffffffac
   123b4:	mov	r1, r0
   123b8:	movwne	r1, #1
   123bc:	orr	r1, r1, r2
   123c0:	tst	r1, #1
   123c4:	beq	12ef0 <__assert_fail@plt+0x1e24>
   123c8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   123cc:	clz	r0, r0
   123d0:	mov	lr, r5
   123d4:	mov	ip, r6
   123d8:	mov	r5, r3
   123dc:	lsr	r0, r0, #5
   123e0:	str	r0, [fp, #-52]	; 0xffffffcc
   123e4:	ldrb	r6, [r4, r7]
   123e8:	cmp	r6, #126	; 0x7e
   123ec:	bhi	12914 <__assert_fail@plt+0x1848>
   123f0:	add	r3, pc, #16
   123f4:	mov	r9, #1
   123f8:	mov	r2, #110	; 0x6e
   123fc:	mov	r0, #97	; 0x61
   12400:	mov	r1, #0
   12404:	ldr	pc, [r3, r6, lsl #2]
   12408:	andeq	r2, r1, r8, ror r7
   1240c:	andeq	r2, r1, r4, lsl r9
   12410:	andeq	r2, r1, r4, lsl r9
   12414:	andeq	r2, r1, r4, lsl r9
   12418:	andeq	r2, r1, r4, lsl r9
   1241c:	andeq	r2, r1, r4, lsl r9
   12420:	andeq	r2, r1, r4, lsl r9
   12424:	muleq	r1, r4, r9
   12428:	andeq	r2, r1, r8, asr r7
   1242c:	andeq	r2, r1, r0, asr r7
   12430:	andeq	r2, r1, r4, ror #14
   12434:	andeq	r2, r1, ip, ror r8
   12438:	andeq	r2, r1, r8, asr #14
   1243c:	andeq	r2, r1, r0, ror #14
   12440:	andeq	r2, r1, r4, lsl r9
   12444:	andeq	r2, r1, r4, lsl r9
   12448:	andeq	r2, r1, r4, lsl r9
   1244c:	andeq	r2, r1, r4, lsl r9
   12450:	andeq	r2, r1, r4, lsl r9
   12454:	andeq	r2, r1, r4, lsl r9
   12458:	andeq	r2, r1, r4, lsl r9
   1245c:	andeq	r2, r1, r4, lsl r9
   12460:	andeq	r2, r1, r4, lsl r9
   12464:	andeq	r2, r1, r4, lsl r9
   12468:	andeq	r2, r1, r4, lsl r9
   1246c:	andeq	r2, r1, r4, lsl r9
   12470:	andeq	r2, r1, r4, lsl r9
   12474:	andeq	r2, r1, r4, lsl r9
   12478:	andeq	r2, r1, r4, lsl r9
   1247c:	andeq	r2, r1, r4, lsl r9
   12480:	andeq	r2, r1, r4, lsl r9
   12484:	andeq	r2, r1, r4, lsl r9
   12488:	strdeq	r2, [r1], -r8
   1248c:	strdeq	r2, [r1], -ip
   12490:	strdeq	r2, [r1], -ip
   12494:	andeq	r2, r1, r0, ror #13
   12498:	strdeq	r2, [r1], -ip
   1249c:	andeq	r2, r1, r4, lsl #12
   124a0:	strdeq	r2, [r1], -ip
   124a4:	andeq	r2, r1, r4, lsl #17
   124a8:	strdeq	r2, [r1], -ip
   124ac:	strdeq	r2, [r1], -ip
   124b0:	strdeq	r2, [r1], -ip
   124b4:	andeq	r2, r1, r4, lsl #12
   124b8:	andeq	r2, r1, r4, lsl #12
   124bc:	andeq	r2, r1, r4, lsl #12
   124c0:	andeq	r2, r1, r4, lsl #12
   124c4:	andeq	r2, r1, r4, lsl #12
   124c8:	andeq	r2, r1, r4, lsl #12
   124cc:	andeq	r2, r1, r4, lsl #12
   124d0:	andeq	r2, r1, r4, lsl #12
   124d4:	andeq	r2, r1, r4, lsl #12
   124d8:	andeq	r2, r1, r4, lsl #12
   124dc:	andeq	r2, r1, r4, lsl #12
   124e0:	andeq	r2, r1, r4, lsl #12
   124e4:	andeq	r2, r1, r4, lsl #12
   124e8:	andeq	r2, r1, r4, lsl #12
   124ec:	andeq	r2, r1, r4, lsl #12
   124f0:	andeq	r2, r1, r4, lsl #12
   124f4:	strdeq	r2, [r1], -ip
   124f8:	strdeq	r2, [r1], -ip
   124fc:	strdeq	r2, [r1], -ip
   12500:	strdeq	r2, [r1], -ip
   12504:	andeq	r2, r1, r0, asr r8
   12508:	andeq	r2, r1, r4, lsl r9
   1250c:	andeq	r2, r1, r4, lsl #12
   12510:	andeq	r2, r1, r4, lsl #12
   12514:	andeq	r2, r1, r4, lsl #12
   12518:	andeq	r2, r1, r4, lsl #12
   1251c:	andeq	r2, r1, r4, lsl #12
   12520:	andeq	r2, r1, r4, lsl #12
   12524:	andeq	r2, r1, r4, lsl #12
   12528:	andeq	r2, r1, r4, lsl #12
   1252c:	andeq	r2, r1, r4, lsl #12
   12530:	andeq	r2, r1, r4, lsl #12
   12534:	andeq	r2, r1, r4, lsl #12
   12538:	andeq	r2, r1, r4, lsl #12
   1253c:	andeq	r2, r1, r4, lsl #12
   12540:	andeq	r2, r1, r4, lsl #12
   12544:	andeq	r2, r1, r4, lsl #12
   12548:	andeq	r2, r1, r4, lsl #12
   1254c:	andeq	r2, r1, r4, lsl #12
   12550:	andeq	r2, r1, r4, lsl #12
   12554:	andeq	r2, r1, r4, lsl #12
   12558:	andeq	r2, r1, r4, lsl #12
   1255c:	andeq	r2, r1, r4, lsl #12
   12560:	andeq	r2, r1, r4, lsl #12
   12564:	andeq	r2, r1, r4, lsl #12
   12568:	andeq	r2, r1, r4, lsl #12
   1256c:	andeq	r2, r1, r4, lsl #12
   12570:	andeq	r2, r1, r4, lsl #12
   12574:	strdeq	r2, [r1], -ip
   12578:	andeq	r2, r1, r4, lsr #14
   1257c:	andeq	r2, r1, r4, lsl #12
   12580:	strdeq	r2, [r1], -ip
   12584:	andeq	r2, r1, r4, lsl #12
   12588:	strdeq	r2, [r1], -ip
   1258c:	andeq	r2, r1, r4, lsl #12
   12590:	andeq	r2, r1, r4, lsl #12
   12594:	andeq	r2, r1, r4, lsl #12
   12598:	andeq	r2, r1, r4, lsl #12
   1259c:	andeq	r2, r1, r4, lsl #12
   125a0:	andeq	r2, r1, r4, lsl #12
   125a4:	andeq	r2, r1, r4, lsl #12
   125a8:	andeq	r2, r1, r4, lsl #12
   125ac:	andeq	r2, r1, r4, lsl #12
   125b0:	andeq	r2, r1, r4, lsl #12
   125b4:	andeq	r2, r1, r4, lsl #12
   125b8:	andeq	r2, r1, r4, lsl #12
   125bc:	andeq	r2, r1, r4, lsl #12
   125c0:	andeq	r2, r1, r4, lsl #12
   125c4:	andeq	r2, r1, r4, lsl #12
   125c8:	andeq	r2, r1, r4, lsl #12
   125cc:	andeq	r2, r1, r4, lsl #12
   125d0:	andeq	r2, r1, r4, lsl #12
   125d4:	andeq	r2, r1, r4, lsl #12
   125d8:	andeq	r2, r1, r4, lsl #12
   125dc:	andeq	r2, r1, r4, lsl #12
   125e0:	andeq	r2, r1, r4, lsl #12
   125e4:	andeq	r2, r1, r4, lsl #12
   125e8:	andeq	r2, r1, r4, lsl #12
   125ec:	andeq	r2, r1, r4, lsl #12
   125f0:	andeq	r2, r1, r4, lsl #12
   125f4:			; <UNDEFINED> instruction: 0x000126b8
   125f8:	strdeq	r2, [r1], -ip
   125fc:			; <UNDEFINED> instruction: 0x000126b8
   12600:	andeq	r2, r1, r0, ror #13
   12604:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12608:	tst	r0, #1
   1260c:	bne	12638 <__assert_fail@plt+0x156c>
   12610:	ldr	r1, [fp, #16]
   12614:	ubfx	r0, r6, #5, #3
   12618:	mov	r2, #1
   1261c:	ldr	r0, [r1, r0, lsl #2]
   12620:	and	r1, r6, #31
   12624:	tst	r0, r2, lsl r1
   12628:	beq	12638 <__assert_fail@plt+0x156c>
   1262c:	mov	r0, r6
   12630:	mov	r1, r9
   12634:	b	1264c <__assert_fail@plt+0x1580>
   12638:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1263c:	mov	r1, r9
   12640:	cmp	r0, #0
   12644:	mov	r0, r6
   12648:	beq	12d98 <__assert_fail@plt+0x1ccc>
   1264c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12650:	tst	r2, #1
   12654:	bne	12f34 <__assert_fail@plt+0x1e68>
   12658:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1265c:	subs	r2, r2, #2
   12660:	movwne	r2, #1
   12664:	orr	r2, r2, lr
   12668:	tst	r2, #1
   1266c:	bne	126a4 <__assert_fail@plt+0x15d8>
   12670:	cmp	r8, ip
   12674:	mov	lr, #1
   12678:	movcc	r2, #39	; 0x27
   1267c:	strbcc	r2, [r5, r8]
   12680:	add	r2, r8, #1
   12684:	cmp	r2, ip
   12688:	movcc	r3, #36	; 0x24
   1268c:	strbcc	r3, [r5, r2]
   12690:	add	r2, r8, #2
   12694:	add	r8, r8, #3
   12698:	cmp	r2, ip
   1269c:	movcc	r3, #39	; 0x27
   126a0:	strbcc	r3, [r5, r2]
   126a4:	cmp	r8, ip
   126a8:	movcc	r2, #92	; 0x5c
   126ac:	strbcc	r2, [r5, r8]
   126b0:	add	r8, r8, #1
   126b4:	b	12dd8 <__assert_fail@plt+0x1d0c>
   126b8:	cmp	sl, #1
   126bc:	beq	126e0 <__assert_fail@plt+0x1614>
   126c0:	mov	r9, #0
   126c4:	cmn	sl, #1
   126c8:	bne	126ec <__assert_fail@plt+0x1620>
   126cc:	ldrb	r0, [r4, #1]
   126d0:	cmp	r0, #0
   126d4:	beq	126e0 <__assert_fail@plt+0x1614>
   126d8:	mvn	sl, #0
   126dc:	b	126ec <__assert_fail@plt+0x1620>
   126e0:	mov	r9, #0
   126e4:	cmp	r7, #0
   126e8:	beq	126f8 <__assert_fail@plt+0x162c>
   126ec:	mov	r0, #0
   126f0:	str	r0, [fp, #-56]	; 0xffffffc8
   126f4:	b	12604 <__assert_fail@plt+0x1538>
   126f8:	mov	r1, #1
   126fc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12700:	cmp	r0, #2
   12704:	bne	1271c <__assert_fail@plt+0x1650>
   12708:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1270c:	mov	r9, r1
   12710:	tst	r0, #1
   12714:	beq	12604 <__assert_fail@plt+0x1538>
   12718:	b	12f34 <__assert_fail@plt+0x1e68>
   1271c:	mov	r9, r1
   12720:	b	12604 <__assert_fail@plt+0x1538>
   12724:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12728:	cmp	r0, #2
   1272c:	bne	12970 <__assert_fail@plt+0x18a4>
   12730:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12734:	tst	r0, #1
   12738:	bne	12f34 <__assert_fail@plt+0x1e68>
   1273c:	mov	r0, #0
   12740:	str	r0, [fp, #-56]	; 0xffffffc8
   12744:	b	12988 <__assert_fail@plt+0x18bc>
   12748:	mov	r0, #102	; 0x66
   1274c:	b	12994 <__assert_fail@plt+0x18c8>
   12750:	mov	r2, #116	; 0x74
   12754:	b	12764 <__assert_fail@plt+0x1698>
   12758:	mov	r0, #98	; 0x62
   1275c:	b	12994 <__assert_fail@plt+0x18c8>
   12760:	mov	r2, #114	; 0x72
   12764:	ldr	r0, [sp, #68]	; 0x44
   12768:	tst	r0, #1
   1276c:	mov	r0, r2
   12770:	bne	12994 <__assert_fail@plt+0x18c8>
   12774:	b	12f34 <__assert_fail@plt+0x1e68>
   12778:	ldr	r0, [sp, #84]	; 0x54
   1277c:	tst	r0, #1
   12780:	beq	129b4 <__assert_fail@plt+0x18e8>
   12784:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12788:	tst	r0, #1
   1278c:	bne	13020 <__assert_fail@plt+0x1f54>
   12790:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12794:	mov	r2, sl
   12798:	subs	r0, r0, #2
   1279c:	movwne	r0, #1
   127a0:	orr	r0, r0, lr
   127a4:	tst	r0, #1
   127a8:	bne	127e0 <__assert_fail@plt+0x1714>
   127ac:	cmp	r8, ip
   127b0:	mov	lr, #1
   127b4:	movcc	r0, #39	; 0x27
   127b8:	strbcc	r0, [r5, r8]
   127bc:	add	r0, r8, #1
   127c0:	cmp	r0, ip
   127c4:	movcc	r1, #36	; 0x24
   127c8:	strbcc	r1, [r5, r0]
   127cc:	add	r0, r8, #2
   127d0:	add	r8, r8, #3
   127d4:	cmp	r0, ip
   127d8:	movcc	r1, #39	; 0x27
   127dc:	strbcc	r1, [r5, r0]
   127e0:	mov	r1, #1
   127e4:	cmp	r8, ip
   127e8:	mov	r9, #0
   127ec:	mov	r6, #48	; 0x30
   127f0:	str	r1, [fp, #-56]	; 0xffffffc8
   127f4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   127f8:	movcc	r0, #92	; 0x5c
   127fc:	strbcc	r0, [r5, r8]
   12800:	add	r0, r8, #1
   12804:	cmp	r1, #2
   12808:	beq	12b10 <__assert_fail@plt+0x1a44>
   1280c:	add	r1, r7, #1
   12810:	cmp	r1, r2
   12814:	bcs	12b10 <__assert_fail@plt+0x1a44>
   12818:	ldrb	r1, [r4, r1]
   1281c:	sub	r1, r1, #48	; 0x30
   12820:	uxtb	r1, r1
   12824:	cmp	r1, #9
   12828:	bhi	12b10 <__assert_fail@plt+0x1a44>
   1282c:	cmp	r0, ip
   12830:	movcc	r1, #48	; 0x30
   12834:	strbcc	r1, [r5, r0]
   12838:	add	r0, r8, #2
   1283c:	add	r8, r8, #3
   12840:	cmp	r0, ip
   12844:	movcc	r1, #48	; 0x30
   12848:	strbcc	r1, [r5, r0]
   1284c:	b	12604 <__assert_fail@plt+0x1538>
   12850:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12854:	mov	r6, #63	; 0x3f
   12858:	cmp	r0, #5
   1285c:	beq	12b18 <__assert_fail@plt+0x1a4c>
   12860:	mov	r1, #0
   12864:	cmp	r0, #2
   12868:	str	r1, [fp, #-56]	; 0xffffffc8
   1286c:	bne	12bcc <__assert_fail@plt+0x1b00>
   12870:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12874:	mov	r9, #0
   12878:	b	12710 <__assert_fail@plt+0x1644>
   1287c:	mov	r0, #118	; 0x76
   12880:	b	12994 <__assert_fail@plt+0x18c8>
   12884:	mov	r0, #1
   12888:	mov	r6, #39	; 0x27
   1288c:	str	r0, [sp, #60]	; 0x3c
   12890:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12894:	cmp	r0, #2
   12898:	bne	1290c <__assert_fail@plt+0x1840>
   1289c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   128a0:	tst	r0, #1
   128a4:	bne	12f34 <__assert_fail@plt+0x1e68>
   128a8:	ldr	r2, [sp, #56]	; 0x38
   128ac:	clz	r1, ip
   128b0:	mov	lr, #0
   128b4:	lsr	r1, r1, #5
   128b8:	cmp	r2, #0
   128bc:	mov	r0, r2
   128c0:	movwne	r0, #1
   128c4:	orrs	r0, r0, r1
   128c8:	moveq	r2, ip
   128cc:	moveq	ip, r0
   128d0:	cmp	r8, ip
   128d4:	str	r2, [sp, #56]	; 0x38
   128d8:	movcc	r0, #39	; 0x27
   128dc:	strbcc	r0, [r5, r8]
   128e0:	add	r0, r8, #1
   128e4:	cmp	r0, ip
   128e8:	movcc	r1, #92	; 0x5c
   128ec:	strbcc	r1, [r5, r0]
   128f0:	add	r0, r8, #2
   128f4:	add	r8, r8, #3
   128f8:	cmp	r0, ip
   128fc:	movcc	r1, #39	; 0x27
   12900:	strbcc	r1, [r5, r0]
   12904:	mov	r0, #0
   12908:	str	r0, [fp, #-56]	; 0xffffffc8
   1290c:	mov	r9, #1
   12910:	b	12604 <__assert_fail@plt+0x1538>
   12914:	ldr	r0, [sp, #40]	; 0x28
   12918:	str	lr, [sp, #44]	; 0x2c
   1291c:	str	ip, [sp, #88]	; 0x58
   12920:	cmp	r0, #1
   12924:	bne	129d4 <__assert_fail@plt+0x1908>
   12928:	str	sl, [sp, #36]	; 0x24
   1292c:	bl	10fac <__ctype_b_loc@plt>
   12930:	ldr	r0, [r0]
   12934:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12938:	mov	r1, #1
   1293c:	add	r0, r0, r6, lsl #1
   12940:	ldrb	r0, [r0, #1]
   12944:	ubfx	r9, r0, #6, #1
   12948:	ldr	r0, [sp, #52]	; 0x34
   1294c:	ldr	lr, [sp, #44]	; 0x2c
   12950:	cmp	r1, #1
   12954:	orr	r3, r9, r0
   12958:	bhi	12bd4 <__assert_fail@plt+0x1b08>
   1295c:	tst	r3, #1
   12960:	beq	12bd4 <__assert_fail@plt+0x1b08>
   12964:	ldr	sl, [sp, #36]	; 0x24
   12968:	ldr	ip, [sp, #88]	; 0x58
   1296c:	b	12604 <__assert_fail@plt+0x1538>
   12970:	ldr	r1, [sp, #48]	; 0x30
   12974:	mov	r0, #0
   12978:	str	r0, [fp, #-56]	; 0xffffffc8
   1297c:	mov	r0, #92	; 0x5c
   12980:	cmp	r1, #0
   12984:	beq	12994 <__assert_fail@plt+0x18c8>
   12988:	mov	r6, #92	; 0x5c
   1298c:	mov	r9, #0
   12990:	b	12d98 <__assert_fail@plt+0x1ccc>
   12994:	mov	r1, #0
   12998:	mov	r9, #0
   1299c:	str	r1, [fp, #-56]	; 0xffffffc8
   129a0:	ldr	r1, [sp, #84]	; 0x54
   129a4:	tst	r1, #1
   129a8:	mov	r1, #0
   129ac:	beq	12604 <__assert_fail@plt+0x1538>
   129b0:	b	1264c <__assert_fail@plt+0x1580>
   129b4:	ldr	r0, [sp, #32]
   129b8:	mov	r6, #0
   129bc:	mov	r9, #0
   129c0:	cmp	r0, #0
   129c4:	mov	r0, #0
   129c8:	str	r0, [fp, #-56]	; 0xffffffc8
   129cc:	beq	12604 <__assert_fail@plt+0x1538>
   129d0:	b	12df0 <__assert_fail@plt+0x1d24>
   129d4:	mov	r0, #0
   129d8:	cmn	sl, #1
   129dc:	sub	r3, fp, #40	; 0x28
   129e0:	str	r0, [fp, #-36]	; 0xffffffdc
   129e4:	str	r0, [fp, #-40]	; 0xffffffd8
   129e8:	bne	12a00 <__assert_fail@plt+0x1934>
   129ec:	mov	r0, r4
   129f0:	bl	10fd0 <strlen@plt>
   129f4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   129f8:	sub	r3, fp, #40	; 0x28
   129fc:	mov	sl, r0
   12a00:	ldr	r0, [sp, #72]	; 0x48
   12a04:	mov	r9, #1
   12a08:	mov	r1, #0
   12a0c:	str	sl, [sp, #36]	; 0x24
   12a10:	add	r0, r0, r7
   12a14:	str	r0, [sp, #20]
   12a18:	add	r0, r1, r7
   12a1c:	str	r1, [sp, #24]
   12a20:	add	r1, r4, r0
   12a24:	mov	r4, r0
   12a28:	sub	r2, sl, r0
   12a2c:	sub	r0, fp, #44	; 0x2c
   12a30:	bl	14b68 <__assert_fail@plt+0x3a9c>
   12a34:	cmp	r0, #0
   12a38:	beq	12e44 <__assert_fail@plt+0x1d78>
   12a3c:	cmn	r0, #1
   12a40:	beq	12dfc <__assert_fail@plt+0x1d30>
   12a44:	ldr	r2, [sp, #36]	; 0x24
   12a48:	cmn	r0, #2
   12a4c:	beq	12e04 <__assert_fail@plt+0x1d38>
   12a50:	ldr	r2, [sp, #64]	; 0x40
   12a54:	ldr	ip, [sp, #88]	; 0x58
   12a58:	ldr	r4, [sp, #84]	; 0x54
   12a5c:	ldr	lr, [fp, #-48]	; 0xffffffd0
   12a60:	cmp	r0, #2
   12a64:	mov	r1, #0
   12a68:	movwcc	r1, #1
   12a6c:	eor	r2, r2, #1
   12a70:	orrs	r1, r2, r1
   12a74:	bne	12ac4 <__assert_fail@plt+0x19f8>
   12a78:	ldr	r1, [sp, #24]
   12a7c:	ldr	r2, [sp, #20]
   12a80:	add	r1, r2, r1
   12a84:	sub	r2, r0, #1
   12a88:	ldrb	r3, [r1]
   12a8c:	sub	r5, r3, #94	; 0x5e
   12a90:	cmp	r5, #30
   12a94:	bhi	12aac <__assert_fail@plt+0x19e0>
   12a98:	mov	r4, #1
   12a9c:	mov	sl, #1073741829	; 0x40000005
   12aa0:	tst	sl, r4, lsl r5
   12aa4:	ldr	r4, [sp, #84]	; 0x54
   12aa8:	bne	12f0c <__assert_fail@plt+0x1e40>
   12aac:	sub	r3, r3, #91	; 0x5b
   12ab0:	cmp	r3, #2
   12ab4:	bcc	12f0c <__assert_fail@plt+0x1e40>
   12ab8:	add	r1, r1, #1
   12abc:	subs	r2, r2, #1
   12ac0:	bne	12a88 <__assert_fail@plt+0x19bc>
   12ac4:	ldr	r5, [sp, #24]
   12ac8:	str	lr, [fp, #-48]	; 0xffffffd0
   12acc:	add	r5, r0, r5
   12ad0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12ad4:	bl	10f1c <iswprint@plt>
   12ad8:	cmp	r0, #0
   12adc:	sub	r4, fp, #40	; 0x28
   12ae0:	movwne	r0, #1
   12ae4:	and	r9, r9, r0
   12ae8:	mov	r0, r4
   12aec:	bl	10ed4 <mbsinit@plt>
   12af0:	mov	r1, r5
   12af4:	mov	r3, r4
   12af8:	ldr	sl, [sp, #36]	; 0x24
   12afc:	ldr	r5, [fp, #-84]	; 0xffffffac
   12b00:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12b04:	cmp	r0, #0
   12b08:	beq	12a18 <__assert_fail@plt+0x194c>
   12b0c:	b	12948 <__assert_fail@plt+0x187c>
   12b10:	mov	r8, r0
   12b14:	b	12604 <__assert_fail@plt+0x1538>
   12b18:	mov	r0, #0
   12b1c:	str	r0, [fp, #-56]	; 0xffffffc8
   12b20:	ldr	r0, [sp, #28]
   12b24:	cmp	r0, #0
   12b28:	beq	12bcc <__assert_fail@plt+0x1b00>
   12b2c:	add	r0, r7, #2
   12b30:	mov	r1, sl
   12b34:	cmp	r0, sl
   12b38:	bcs	12bcc <__assert_fail@plt+0x1b00>
   12b3c:	add	r1, r7, r4
   12b40:	ldrb	r1, [r1, #1]
   12b44:	cmp	r1, #63	; 0x3f
   12b48:	bne	12bcc <__assert_fail@plt+0x1b00>
   12b4c:	ldrb	r9, [r4, r0]
   12b50:	sub	r2, r9, #33	; 0x21
   12b54:	cmp	r2, #29
   12b58:	bhi	12bcc <__assert_fail@plt+0x1b00>
   12b5c:	mov	r1, r4
   12b60:	movw	r4, #20929	; 0x51c1
   12b64:	mov	r3, #1
   12b68:	movt	r4, #14336	; 0x3800
   12b6c:	tst	r4, r3, lsl r2
   12b70:	beq	12e58 <__assert_fail@plt+0x1d8c>
   12b74:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12b78:	tst	r2, #1
   12b7c:	bne	13028 <__assert_fail@plt+0x1f5c>
   12b80:	cmp	r8, ip
   12b84:	mov	r4, r1
   12b88:	mov	r7, r0
   12b8c:	mov	r6, r9
   12b90:	movcc	r2, #63	; 0x3f
   12b94:	strbcc	r2, [r5, r8]
   12b98:	add	r2, r8, #1
   12b9c:	cmp	r2, ip
   12ba0:	movcc	r3, #34	; 0x22
   12ba4:	strbcc	r3, [r5, r2]
   12ba8:	add	r2, r8, #2
   12bac:	cmp	r2, ip
   12bb0:	movcc	r3, #34	; 0x22
   12bb4:	strbcc	r3, [r5, r2]
   12bb8:	add	r2, r8, #3
   12bbc:	add	r8, r8, #4
   12bc0:	cmp	r2, ip
   12bc4:	movcc	r3, #63	; 0x3f
   12bc8:	strbcc	r3, [r5, r2]
   12bcc:	mov	r9, #0
   12bd0:	b	12604 <__assert_fail@plt+0x1538>
   12bd4:	ldr	sl, [sp, #36]	; 0x24
   12bd8:	add	r0, r1, r7
   12bdc:	mov	r2, #0
   12be0:	str	r3, [sp, #24]
   12be4:	str	r0, [fp, #-56]	; 0xffffffc8
   12be8:	tst	r3, #1
   12bec:	beq	12c18 <__assert_fail@plt+0x1b4c>
   12bf0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12bf4:	tst	r0, #1
   12bf8:	beq	12ce0 <__assert_fail@plt+0x1c14>
   12bfc:	ldr	r1, [sp, #88]	; 0x58
   12c00:	mov	r0, r3
   12c04:	cmp	r8, r1
   12c08:	movcc	r1, #92	; 0x5c
   12c0c:	strbcc	r1, [r5, r8]
   12c10:	add	r8, r8, #1
   12c14:	b	12ce4 <__assert_fail@plt+0x1c18>
   12c18:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12c1c:	tst	r1, #1
   12c20:	bne	12f30 <__assert_fail@plt+0x1e64>
   12c24:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12c28:	subs	r2, r1, #2
   12c2c:	movwne	r2, #1
   12c30:	orr	r2, r2, lr
   12c34:	tst	r2, #1
   12c38:	bne	12c7c <__assert_fail@plt+0x1bb0>
   12c3c:	ldr	r1, [sp, #88]	; 0x58
   12c40:	add	r2, r8, #1
   12c44:	mov	lr, #1
   12c48:	cmp	r8, r1
   12c4c:	movcc	r1, #39	; 0x27
   12c50:	strbcc	r1, [r5, r8]
   12c54:	ldr	r1, [sp, #88]	; 0x58
   12c58:	cmp	r2, r1
   12c5c:	movcc	r1, #36	; 0x24
   12c60:	strbcc	r1, [r5, r2]
   12c64:	ldr	r1, [sp, #88]	; 0x58
   12c68:	add	r2, r8, #2
   12c6c:	add	r8, r8, #3
   12c70:	cmp	r2, r1
   12c74:	movcc	r1, #39	; 0x27
   12c78:	strbcc	r1, [r5, r2]
   12c7c:	ldr	r1, [sp, #88]	; 0x58
   12c80:	add	r2, r8, #1
   12c84:	mov	r0, r3
   12c88:	cmp	r8, r1
   12c8c:	movcc	r1, #92	; 0x5c
   12c90:	strbcc	r1, [r5, r8]
   12c94:	ldr	r1, [sp, #88]	; 0x58
   12c98:	cmp	r2, r1
   12c9c:	bcs	12cb0 <__assert_fail@plt+0x1be4>
   12ca0:	uxtb	r3, r6
   12ca4:	mov	r1, #48	; 0x30
   12ca8:	orr	r3, r1, r3, lsr #6
   12cac:	strb	r3, [r5, r2]
   12cb0:	ldr	r1, [sp, #88]	; 0x58
   12cb4:	add	r2, r8, #2
   12cb8:	add	r8, r8, #3
   12cbc:	cmp	r2, r1
   12cc0:	lsrcc	r3, r6, #3
   12cc4:	movcc	r1, #6
   12cc8:	bficc	r3, r1, #3, #29
   12ccc:	mov	r1, #6
   12cd0:	bfi	r6, r1, #3, #29
   12cd4:	strbcc	r3, [r5, r2]
   12cd8:	mov	r2, #1
   12cdc:	b	12cec <__assert_fail@plt+0x1c20>
   12ce0:	mov	r0, r3
   12ce4:	mov	r1, #0
   12ce8:	str	r1, [fp, #-52]	; 0xffffffcc
   12cec:	mov	ip, r2
   12cf0:	and	r1, r2, #1
   12cf4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12cf8:	add	r3, r7, #1
   12cfc:	cmp	r2, r3
   12d00:	bls	12d88 <__assert_fail@plt+0x1cbc>
   12d04:	cmp	r1, #0
   12d08:	mvn	r5, lr
   12d0c:	movwne	r1, #1
   12d10:	orr	r5, r5, r1
   12d14:	tst	r5, #1
   12d18:	bne	12d5c <__assert_fail@plt+0x1c90>
   12d1c:	ldr	r1, [sp, #88]	; 0x58
   12d20:	ldr	r5, [fp, #-84]	; 0xffffffac
   12d24:	mov	r2, r4
   12d28:	ldr	r4, [sp, #88]	; 0x58
   12d2c:	ldr	r0, [sp, #24]
   12d30:	mov	lr, #0
   12d34:	cmp	r8, r1
   12d38:	movcc	r1, #39	; 0x27
   12d3c:	strbcc	r1, [r5, r8]
   12d40:	add	r1, r8, #1
   12d44:	add	r8, r8, #2
   12d48:	cmp	r1, r4
   12d4c:	movcc	r4, #39	; 0x27
   12d50:	strbcc	r4, [r5, r1]
   12d54:	mov	r4, r2
   12d58:	b	12d60 <__assert_fail@plt+0x1c94>
   12d5c:	ldr	r5, [fp, #-84]	; 0xffffffac
   12d60:	ldr	r1, [sp, #88]	; 0x58
   12d64:	mov	r2, ip
   12d68:	cmp	r8, r1
   12d6c:	ldr	r1, [sp, #72]	; 0x48
   12d70:	strbcc	r6, [r5, r8]
   12d74:	add	r8, r8, #1
   12d78:	ldrb	r6, [r1, r7]
   12d7c:	mov	r7, r3
   12d80:	mov	r3, r0
   12d84:	b	12be8 <__assert_fail@plt+0x1b1c>
   12d88:	ldr	ip, [sp, #88]	; 0x58
   12d8c:	cmp	r1, #0
   12d90:	movwne	r1, #1
   12d94:	str	r1, [fp, #-56]	; 0xffffffc8
   12d98:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12d9c:	cmp	r0, #0
   12da0:	bne	12dd0 <__assert_fail@plt+0x1d04>
   12da4:	tst	lr, #1
   12da8:	beq	12dd0 <__assert_fail@plt+0x1d04>
   12dac:	cmp	r8, ip
   12db0:	mov	lr, #0
   12db4:	movcc	r0, #39	; 0x27
   12db8:	strbcc	r0, [r5, r8]
   12dbc:	add	r0, r8, #1
   12dc0:	add	r8, r8, #2
   12dc4:	cmp	r0, ip
   12dc8:	movcc	r1, #39	; 0x27
   12dcc:	strbcc	r1, [r5, r0]
   12dd0:	mov	r1, r9
   12dd4:	mov	r0, r6
   12dd8:	cmp	r8, ip
   12ddc:	strbcc	r0, [r5, r8]
   12de0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12de4:	add	r8, r8, #1
   12de8:	and	r0, r0, r1
   12dec:	str	r0, [fp, #-48]	; 0xffffffd0
   12df0:	mov	r3, sl
   12df4:	add	r7, r7, #1
   12df8:	b	122e8 <__assert_fail@plt+0x121c>
   12dfc:	mov	r9, #0
   12e00:	b	12e44 <__assert_fail@plt+0x1d78>
   12e04:	mov	r9, #0
   12e08:	cmp	r2, r4
   12e0c:	bls	12e44 <__assert_fail@plt+0x1d78>
   12e10:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12e14:	ldr	r1, [sp, #24]
   12e18:	add	r0, r4, r7
   12e1c:	mov	r3, r1
   12e20:	ldrb	r1, [r0, r1]
   12e24:	cmp	r1, #0
   12e28:	beq	12e50 <__assert_fail@plt+0x1d84>
   12e2c:	add	r3, r3, #1
   12e30:	add	r1, r7, r3
   12e34:	cmp	r1, r2
   12e38:	mov	r1, r3
   12e3c:	bcc	12e1c <__assert_fail@plt+0x1d50>
   12e40:	b	12948 <__assert_fail@plt+0x187c>
   12e44:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12e48:	ldr	r1, [sp, #24]
   12e4c:	b	12948 <__assert_fail@plt+0x187c>
   12e50:	mov	r1, r3
   12e54:	b	12948 <__assert_fail@plt+0x187c>
   12e58:	mov	r9, #0
   12e5c:	mov	r4, r1
   12e60:	b	12604 <__assert_fail@plt+0x1538>
   12e64:	mov	sl, r7
   12e68:	b	12e70 <__assert_fail@plt+0x1da4>
   12e6c:	mvn	sl, #0
   12e70:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12e74:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12e78:	eor	r0, r1, #2
   12e7c:	orr	r0, r0, r8
   12e80:	clz	r0, r0
   12e84:	lsr	r0, r0, #5
   12e88:	tst	r2, r0
   12e8c:	bne	12f34 <__assert_fail@plt+0x1e68>
   12e90:	subs	r0, r1, #2
   12e94:	movwne	r0, #1
   12e98:	orr	r0, r2, r0
   12e9c:	tst	r0, #1
   12ea0:	ldreq	r0, [sp, #60]	; 0x3c
   12ea4:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   12ea8:	eoreq	r0, r0, #1
   12eac:	tsteq	r0, #1
   12eb0:	bne	12fc8 <__assert_fail@plt+0x1efc>
   12eb4:	tst	r1, #1
   12eb8:	bne	12f94 <__assert_fail@plt+0x1ec8>
   12ebc:	ldr	r6, [sp, #56]	; 0x38
   12ec0:	mov	r9, #0
   12ec4:	cmp	r6, #0
   12ec8:	beq	12fc0 <__assert_fail@plt+0x1ef4>
   12ecc:	ldr	r0, [sp, #84]	; 0x54
   12ed0:	mov	r1, #0
   12ed4:	mov	r7, #2
   12ed8:	cmp	ip, #0
   12edc:	str	r1, [fp, #-48]	; 0xffffffd0
   12ee0:	mov	r1, #0
   12ee4:	str	r1, [fp, #-76]	; 0xffffffb4
   12ee8:	beq	12050 <__assert_fail@plt+0xf84>
   12eec:	b	12fc8 <__assert_fail@plt+0x1efc>
   12ef0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12ef4:	ldr	r1, [fp, #12]
   12ef8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12efc:	mov	r5, r3
   12f00:	mov	ip, r6
   12f04:	mov	r3, sl
   12f08:	b	12f58 <__assert_fail@plt+0x1e8c>
   12f0c:	tst	r4, #1
   12f10:	ldr	r5, [fp, #-84]	; 0xffffffac
   12f14:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12f18:	ldr	r1, [fp, #12]
   12f1c:	ldr	r3, [sp, #36]	; 0x24
   12f20:	mov	r0, #2
   12f24:	movwne	r0, #4
   12f28:	mov	r2, r0
   12f2c:	b	12f58 <__assert_fail@plt+0x1e8c>
   12f30:	ldr	ip, [sp, #88]	; 0x58
   12f34:	ldr	r1, [sp, #84]	; 0x54
   12f38:	mov	r0, #2
   12f3c:	tst	r1, #1
   12f40:	movwne	r0, #4
   12f44:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12f48:	ldr	r1, [fp, #12]
   12f4c:	mov	r3, sl
   12f50:	cmp	r2, #2
   12f54:	moveq	r2, r0
   12f58:	mov	r0, #0
   12f5c:	bic	r1, r1, #2
   12f60:	str	r2, [sp]
   12f64:	mov	r2, r4
   12f68:	str	r0, [sp, #8]
   12f6c:	ldr	r0, [sp, #76]	; 0x4c
   12f70:	str	r1, [sp, #4]
   12f74:	mov	r1, ip
   12f78:	str	r0, [sp, #12]
   12f7c:	ldr	r0, [sp, #80]	; 0x50
   12f80:	str	r0, [sp, #16]
   12f84:	mov	r0, r5
   12f88:	bl	11fc4 <__assert_fail@plt+0xef8>
   12f8c:	mov	r8, r0
   12f90:	b	13014 <__assert_fail@plt+0x1f48>
   12f94:	mov	r0, #5
   12f98:	ldr	r1, [sp, #56]	; 0x38
   12f9c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   12fa0:	mov	r3, sl
   12fa4:	str	r0, [sp]
   12fa8:	ldr	r0, [fp, #12]
   12fac:	str	r0, [sp, #4]
   12fb0:	ldr	r0, [fp, #16]
   12fb4:	str	r0, [sp, #8]
   12fb8:	ldr	r0, [sp, #76]	; 0x4c
   12fbc:	b	12f78 <__assert_fail@plt+0x1eac>
   12fc0:	mov	r0, #0
   12fc4:	str	r0, [fp, #-76]	; 0xffffffb4
   12fc8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12fcc:	cmp	r1, #0
   12fd0:	beq	13008 <__assert_fail@plt+0x1f3c>
   12fd4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12fd8:	tst	r0, #1
   12fdc:	bne	13008 <__assert_fail@plt+0x1f3c>
   12fe0:	ldrb	r0, [r1]
   12fe4:	cmp	r0, #0
   12fe8:	beq	13008 <__assert_fail@plt+0x1f3c>
   12fec:	add	r1, r1, #1
   12ff0:	cmp	r8, ip
   12ff4:	strbcc	r0, [r5, r8]
   12ff8:	add	r8, r8, #1
   12ffc:	ldrb	r0, [r1], #1
   13000:	cmp	r0, #0
   13004:	bne	12ff0 <__assert_fail@plt+0x1f24>
   13008:	cmp	r8, ip
   1300c:	movcc	r0, #0
   13010:	strbcc	r0, [r5, r8]
   13014:	mov	r0, r8
   13018:	sub	sp, fp, #28
   1301c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13020:	mov	r0, #4
   13024:	b	12f44 <__assert_fail@plt+0x1e78>
   13028:	mov	r4, r1
   1302c:	b	12f34 <__assert_fail@plt+0x1e68>
   13030:	bl	110b4 <abort@plt>
   13034:	mov	r3, r2
   13038:	mov	r2, #0
   1303c:	b	13040 <__assert_fail@plt+0x1f74>
   13040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13044:	add	fp, sp, #28
   13048:	sub	sp, sp, #36	; 0x24
   1304c:	movw	r8, #24952	; 0x6178
   13050:	cmp	r3, #0
   13054:	mov	r4, r2
   13058:	str	r2, [sp, #24]
   1305c:	mov	r5, r1
   13060:	mov	r6, r0
   13064:	str	r0, [sp, #20]
   13068:	movt	r8, #2
   1306c:	movne	r8, r3
   13070:	bl	10fe8 <__errno_location@plt>
   13074:	str	r0, [sp, #28]
   13078:	ldr	r1, [r8, #40]	; 0x28
   1307c:	ldr	r2, [r8, #44]	; 0x2c
   13080:	ldr	r7, [r0]
   13084:	cmp	r4, #0
   13088:	add	sl, r8, #8
   1308c:	mov	r0, #0
   13090:	ldm	r8, {r3, r9}
   13094:	orreq	r9, r9, #1
   13098:	stm	sp, {r3, r9, sl}
   1309c:	str	r1, [sp, #12]
   130a0:	str	r2, [sp, #16]
   130a4:	mov	r1, #0
   130a8:	mov	r2, r6
   130ac:	mov	r3, r5
   130b0:	str	r7, [sp, #32]
   130b4:	mov	r7, r5
   130b8:	bl	11fc4 <__assert_fail@plt+0xef8>
   130bc:	add	r4, r0, #1
   130c0:	mov	r5, r0
   130c4:	mov	r0, r4
   130c8:	bl	13db8 <__assert_fail@plt+0x2cec>
   130cc:	mov	r6, r0
   130d0:	ldr	r0, [r8]
   130d4:	ldr	r2, [r8, #44]	; 0x2c
   130d8:	ldr	r1, [r8, #40]	; 0x28
   130dc:	mov	r3, r7
   130e0:	stm	sp, {r0, r9, sl}
   130e4:	str	r2, [sp, #16]
   130e8:	ldr	r2, [sp, #20]
   130ec:	str	r1, [sp, #12]
   130f0:	mov	r0, r6
   130f4:	mov	r1, r4
   130f8:	bl	11fc4 <__assert_fail@plt+0xef8>
   130fc:	ldr	r0, [sp, #24]
   13100:	ldr	r1, [sp, #32]
   13104:	ldr	r2, [sp, #28]
   13108:	cmp	r0, #0
   1310c:	str	r1, [r2]
   13110:	strne	r5, [r0]
   13114:	mov	r0, r6
   13118:	sub	sp, fp, #28
   1311c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13120:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13124:	add	fp, sp, #24
   13128:	movw	r5, #24828	; 0x60fc
   1312c:	movw	r8, #24824	; 0x60f8
   13130:	movt	r5, #2
   13134:	movt	r8, #2
   13138:	ldr	r0, [r5]
   1313c:	ldr	r4, [r8]
   13140:	cmp	r0, #2
   13144:	blt	13170 <__assert_fail@plt+0x20a4>
   13148:	add	r7, r4, #12
   1314c:	mov	r6, #0
   13150:	ldr	r0, [r7, r6, lsl #3]
   13154:	bl	14b08 <__assert_fail@plt+0x3a3c>
   13158:	ldr	r1, [r5]
   1315c:	add	r2, r6, #2
   13160:	add	r0, r6, #1
   13164:	mov	r6, r0
   13168:	cmp	r2, r1
   1316c:	blt	13150 <__assert_fail@plt+0x2084>
   13170:	ldr	r0, [r4, #4]
   13174:	movw	r9, #25000	; 0x61a8
   13178:	movw	r7, #24832	; 0x6100
   1317c:	movt	r9, #2
   13180:	movt	r7, #2
   13184:	cmp	r0, r9
   13188:	beq	13198 <__assert_fail@plt+0x20cc>
   1318c:	bl	14b08 <__assert_fail@plt+0x3a3c>
   13190:	mov	r0, #256	; 0x100
   13194:	stm	r7, {r0, r9}
   13198:	cmp	r4, r7
   1319c:	beq	131ac <__assert_fail@plt+0x20e0>
   131a0:	mov	r0, r4
   131a4:	bl	14b08 <__assert_fail@plt+0x3a3c>
   131a8:	str	r7, [r8]
   131ac:	mov	r0, #1
   131b0:	str	r0, [r5]
   131b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   131b8:	movw	r3, #24952	; 0x6178
   131bc:	mvn	r2, #0
   131c0:	movt	r3, #2
   131c4:	b	131c8 <__assert_fail@plt+0x20fc>
   131c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131cc:	add	fp, sp, #28
   131d0:	sub	sp, sp, #44	; 0x2c
   131d4:	mov	r7, r3
   131d8:	str	r2, [sp, #36]	; 0x24
   131dc:	str	r1, [sp, #32]
   131e0:	mov	r5, r0
   131e4:	bl	10fe8 <__errno_location@plt>
   131e8:	cmp	r5, #0
   131ec:	bmi	1335c <__assert_fail@plt+0x2290>
   131f0:	cmn	r5, #-2147483647	; 0x80000001
   131f4:	beq	1335c <__assert_fail@plt+0x2290>
   131f8:	movw	r8, #24828	; 0x60fc
   131fc:	movw	r4, #24824	; 0x60f8
   13200:	str	r0, [sp, #28]
   13204:	ldr	r0, [r0]
   13208:	movt	r8, #2
   1320c:	movt	r4, #2
   13210:	ldr	r1, [r8]
   13214:	ldr	r6, [r4]
   13218:	str	r0, [sp, #24]
   1321c:	cmp	r1, r5
   13220:	ble	1322c <__assert_fail@plt+0x2160>
   13224:	mov	sl, r6
   13228:	b	13298 <__assert_fail@plt+0x21cc>
   1322c:	movw	r9, #24832	; 0x6100
   13230:	mov	r0, #8
   13234:	str	r1, [fp, #-32]	; 0xffffffe0
   13238:	sub	r1, r5, r1
   1323c:	mvn	r3, #-2147483648	; 0x80000000
   13240:	movt	r9, #2
   13244:	str	r0, [sp]
   13248:	add	r2, r1, #1
   1324c:	sub	r1, fp, #32
   13250:	subs	r0, r6, r9
   13254:	movne	r0, r6
   13258:	bl	13ee8 <__assert_fail@plt+0x2e1c>
   1325c:	mov	sl, r0
   13260:	cmp	r6, r9
   13264:	str	r0, [r4]
   13268:	bne	13274 <__assert_fail@plt+0x21a8>
   1326c:	ldrd	r0, [r9]
   13270:	stm	sl, {r0, r1}
   13274:	ldr	r1, [r8]
   13278:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1327c:	add	r0, sl, r1, lsl #3
   13280:	sub	r1, r2, r1
   13284:	lsl	r2, r1, #3
   13288:	mov	r1, #0
   1328c:	bl	11000 <memset@plt>
   13290:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13294:	str	r0, [r8]
   13298:	mov	r9, sl
   1329c:	ldm	r7, {r0, r1}
   132a0:	orr	r8, r1, #1
   132a4:	add	r1, r7, #8
   132a8:	ldr	r2, [r7, #40]	; 0x28
   132ac:	ldr	r3, [r7, #44]	; 0x2c
   132b0:	ldr	r6, [r9, r5, lsl #3]!
   132b4:	str	r1, [sp, #20]
   132b8:	ldr	r4, [r9, #4]!
   132bc:	stm	sp, {r0, r8}
   132c0:	add	r0, sp, #8
   132c4:	stm	r0, {r1, r2, r3}
   132c8:	ldr	r2, [sp, #32]
   132cc:	ldr	r3, [sp, #36]	; 0x24
   132d0:	mov	r1, r6
   132d4:	mov	r0, r4
   132d8:	bl	11fc4 <__assert_fail@plt+0xef8>
   132dc:	cmp	r6, r0
   132e0:	bhi	13344 <__assert_fail@plt+0x2278>
   132e4:	add	r6, r0, #1
   132e8:	movw	r0, #25000	; 0x61a8
   132ec:	movt	r0, #2
   132f0:	str	r6, [sl, r5, lsl #3]
   132f4:	cmp	r4, r0
   132f8:	beq	13304 <__assert_fail@plt+0x2238>
   132fc:	mov	r0, r4
   13300:	bl	14b08 <__assert_fail@plt+0x3a3c>
   13304:	mov	r0, r6
   13308:	bl	13db8 <__assert_fail@plt+0x2cec>
   1330c:	str	r0, [r9]
   13310:	mov	r4, r0
   13314:	add	r3, sp, #8
   13318:	ldr	r0, [r7]
   1331c:	ldr	r1, [r7, #40]	; 0x28
   13320:	ldr	r2, [r7, #44]	; 0x2c
   13324:	stm	sp, {r0, r8}
   13328:	ldr	r0, [sp, #20]
   1332c:	stm	r3, {r0, r1, r2}
   13330:	ldr	r2, [sp, #32]
   13334:	ldr	r3, [sp, #36]	; 0x24
   13338:	mov	r0, r4
   1333c:	mov	r1, r6
   13340:	bl	11fc4 <__assert_fail@plt+0xef8>
   13344:	ldr	r0, [sp, #28]
   13348:	ldr	r1, [sp, #24]
   1334c:	str	r1, [r0]
   13350:	mov	r0, r4
   13354:	sub	sp, fp, #28
   13358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1335c:	bl	110b4 <abort@plt>
   13360:	movw	r3, #24952	; 0x6178
   13364:	movt	r3, #2
   13368:	b	131c8 <__assert_fail@plt+0x20fc>
   1336c:	movw	r3, #24952	; 0x6178
   13370:	mov	r1, r0
   13374:	mov	r0, #0
   13378:	mvn	r2, #0
   1337c:	movt	r3, #2
   13380:	b	131c8 <__assert_fail@plt+0x20fc>
   13384:	movw	r3, #24952	; 0x6178
   13388:	mov	r2, r1
   1338c:	mov	r1, r0
   13390:	mov	r0, #0
   13394:	movt	r3, #2
   13398:	b	131c8 <__assert_fail@plt+0x20fc>
   1339c:	push	{fp, lr}
   133a0:	mov	fp, sp
   133a4:	sub	sp, sp, #48	; 0x30
   133a8:	vmov.i32	q8, #0	; 0x00000000
   133ac:	mov	ip, #32
   133b0:	mov	r3, sp
   133b4:	mov	lr, r2
   133b8:	cmp	r1, #10
   133bc:	add	r2, r3, #16
   133c0:	vst1.64	{d16-d17}, [r3], ip
   133c4:	vst1.64	{d16-d17}, [r2]
   133c8:	vst1.64	{d16-d17}, [r3]
   133cc:	beq	133ec <__assert_fail@plt+0x2320>
   133d0:	str	r1, [sp]
   133d4:	mov	r3, sp
   133d8:	mov	r1, lr
   133dc:	mvn	r2, #0
   133e0:	bl	131c8 <__assert_fail@plt+0x20fc>
   133e4:	mov	sp, fp
   133e8:	pop	{fp, pc}
   133ec:	bl	110b4 <abort@plt>
   133f0:	push	{r4, sl, fp, lr}
   133f4:	add	fp, sp, #8
   133f8:	sub	sp, sp, #48	; 0x30
   133fc:	vmov.i32	q8, #0	; 0x00000000
   13400:	mov	ip, r3
   13404:	mov	r3, sp
   13408:	mov	lr, #32
   1340c:	cmp	r1, #10
   13410:	add	r4, r3, #16
   13414:	vst1.64	{d16-d17}, [r3], lr
   13418:	vst1.64	{d16-d17}, [r4]
   1341c:	vst1.64	{d16-d17}, [r3]
   13420:	beq	13440 <__assert_fail@plt+0x2374>
   13424:	str	r1, [sp]
   13428:	mov	r1, r2
   1342c:	mov	r3, sp
   13430:	mov	r2, ip
   13434:	bl	131c8 <__assert_fail@plt+0x20fc>
   13438:	sub	sp, fp, #8
   1343c:	pop	{r4, sl, fp, pc}
   13440:	bl	110b4 <abort@plt>
   13444:	mov	r2, r1
   13448:	mov	r1, r0
   1344c:	mov	r0, #0
   13450:	b	1339c <__assert_fail@plt+0x22d0>
   13454:	mov	r3, r2
   13458:	mov	r2, r1
   1345c:	mov	r1, r0
   13460:	mov	r0, #0
   13464:	b	133f0 <__assert_fail@plt+0x2324>
   13468:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1346c:	add	fp, sp, #24
   13470:	sub	sp, sp, #48	; 0x30
   13474:	movw	r8, #24952	; 0x6178
   13478:	mov	lr, r0
   1347c:	mov	r3, sp
   13480:	mov	ip, r1
   13484:	movt	r8, #2
   13488:	mov	r1, r3
   1348c:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   13490:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   13494:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   13498:	stm	r1, {r0, r4, r5, r6, r7, r9}
   1349c:	ubfx	r0, r2, #5, #3
   134a0:	and	r2, r2, #31
   134a4:	mov	r4, #1
   134a8:	add	r0, r3, r0, lsl #2
   134ac:	ldr	r1, [r0, #8]
   134b0:	bic	r4, r4, r1, lsr r2
   134b4:	eor	r1, r1, r4, lsl r2
   134b8:	mov	r2, ip
   134bc:	str	r1, [r0, #8]
   134c0:	mov	r0, #0
   134c4:	mov	r1, lr
   134c8:	bl	131c8 <__assert_fail@plt+0x20fc>
   134cc:	sub	sp, fp, #24
   134d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   134d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   134d8:	add	fp, sp, #24
   134dc:	sub	sp, sp, #48	; 0x30
   134e0:	movw	lr, #24952	; 0x6178
   134e4:	mov	ip, r0
   134e8:	mov	r3, sp
   134ec:	movt	lr, #2
   134f0:	mov	r2, r3
   134f4:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   134f8:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   134fc:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   13500:	stm	r2, {r0, r4, r5, r6, r7, r8}
   13504:	ubfx	r0, r1, #5, #3
   13508:	and	r1, r1, #31
   1350c:	mov	r7, #1
   13510:	add	r0, r3, r0, lsl #2
   13514:	ldr	r2, [r0, #8]
   13518:	bic	r7, r7, r2, lsr r1
   1351c:	eor	r1, r2, r7, lsl r1
   13520:	mvn	r2, #0
   13524:	str	r1, [r0, #8]
   13528:	mov	r0, #0
   1352c:	mov	r1, ip
   13530:	bl	131c8 <__assert_fail@plt+0x20fc>
   13534:	sub	sp, fp, #24
   13538:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1353c:	push	{r4, r5, r6, r7, fp, lr}
   13540:	add	fp, sp, #16
   13544:	sub	sp, sp, #48	; 0x30
   13548:	movw	lr, #24952	; 0x6178
   1354c:	mov	ip, r0
   13550:	mov	r3, sp
   13554:	movt	lr, #2
   13558:	mov	r2, r3
   1355c:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   13560:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13564:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   13568:	stm	r2, {r0, r1, r4, r5, r6, r7}
   1356c:	mov	r1, ip
   13570:	mvn	r2, #0
   13574:	ldr	r0, [sp, #12]
   13578:	orr	r0, r0, #67108864	; 0x4000000
   1357c:	str	r0, [sp, #12]
   13580:	mov	r0, #0
   13584:	bl	131c8 <__assert_fail@plt+0x20fc>
   13588:	sub	sp, fp, #16
   1358c:	pop	{r4, r5, r6, r7, fp, pc}
   13590:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13594:	add	fp, sp, #24
   13598:	sub	sp, sp, #48	; 0x30
   1359c:	movw	r8, #24952	; 0x6178
   135a0:	mov	ip, r1
   135a4:	mov	lr, r0
   135a8:	mov	r3, sp
   135ac:	movt	r8, #2
   135b0:	mov	r2, r3
   135b4:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   135b8:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   135bc:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   135c0:	stm	r2, {r0, r1, r4, r5, r6, r7}
   135c4:	mov	r1, lr
   135c8:	mov	r2, ip
   135cc:	ldr	r0, [sp, #12]
   135d0:	orr	r0, r0, #67108864	; 0x4000000
   135d4:	str	r0, [sp, #12]
   135d8:	mov	r0, #0
   135dc:	bl	131c8 <__assert_fail@plt+0x20fc>
   135e0:	sub	sp, fp, #24
   135e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   135e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   135ec:	add	fp, sp, #24
   135f0:	sub	sp, sp, #96	; 0x60
   135f4:	vmov.i32	q8, #0	; 0x00000000
   135f8:	mov	lr, sp
   135fc:	mov	ip, r2
   13600:	cmp	r1, #10
   13604:	add	r3, lr, #16
   13608:	mov	r2, lr
   1360c:	vst1.64	{d16-d17}, [r3]
   13610:	mov	r3, #28
   13614:	vst1.64	{d16-d17}, [r2], r3
   13618:	vst1.32	{d16-d17}, [r2]
   1361c:	beq	1365c <__assert_fail@plt+0x2590>
   13620:	str	r1, [sp, #48]	; 0x30
   13624:	add	r3, sp, #48	; 0x30
   13628:	ldm	lr!, {r2, r4, r5, r6, r7}
   1362c:	add	r1, r3, #4
   13630:	stmia	r1!, {r2, r4, r5, r6, r7}
   13634:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   13638:	stm	r1, {r2, r4, r5, r6, r7, r8}
   1363c:	mvn	r2, #0
   13640:	ldr	r1, [sp, #60]	; 0x3c
   13644:	orr	r1, r1, #67108864	; 0x4000000
   13648:	str	r1, [sp, #60]	; 0x3c
   1364c:	mov	r1, ip
   13650:	bl	131c8 <__assert_fail@plt+0x20fc>
   13654:	sub	sp, fp, #24
   13658:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1365c:	bl	110b4 <abort@plt>
   13660:	push	{fp, lr}
   13664:	mov	fp, sp
   13668:	sub	sp, sp, #8
   1366c:	mvn	ip, #0
   13670:	str	ip, [sp]
   13674:	bl	13680 <__assert_fail@plt+0x25b4>
   13678:	mov	sp, fp
   1367c:	pop	{fp, pc}
   13680:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13684:	add	fp, sp, #24
   13688:	sub	sp, sp, #48	; 0x30
   1368c:	movw	ip, #24952	; 0x6178
   13690:	mov	lr, r3
   13694:	mov	r3, sp
   13698:	cmp	r1, #0
   1369c:	movt	ip, #2
   136a0:	cmpne	r2, #0
   136a4:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   136a8:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   136ac:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   136b0:	stm	r3, {r4, r5, r6, r7, r8, r9}
   136b4:	mov	r3, #10
   136b8:	str	r3, [sp]
   136bc:	bne	136c4 <__assert_fail@plt+0x25f8>
   136c0:	bl	110b4 <abort@plt>
   136c4:	ldr	ip, [fp, #8]
   136c8:	str	r2, [sp, #44]	; 0x2c
   136cc:	str	r1, [sp, #40]	; 0x28
   136d0:	mov	r3, sp
   136d4:	mov	r1, lr
   136d8:	mov	r2, ip
   136dc:	bl	131c8 <__assert_fail@plt+0x20fc>
   136e0:	sub	sp, fp, #24
   136e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   136e8:	push	{fp, lr}
   136ec:	mov	fp, sp
   136f0:	sub	sp, sp, #8
   136f4:	mov	r3, r2
   136f8:	mov	r2, r1
   136fc:	mov	r1, r0
   13700:	mvn	r0, #0
   13704:	str	r0, [sp]
   13708:	mov	r0, #0
   1370c:	bl	13680 <__assert_fail@plt+0x25b4>
   13710:	mov	sp, fp
   13714:	pop	{fp, pc}
   13718:	push	{fp, lr}
   1371c:	mov	fp, sp
   13720:	sub	sp, sp, #8
   13724:	mov	ip, r2
   13728:	mov	r2, r1
   1372c:	mov	r1, r0
   13730:	str	r3, [sp]
   13734:	mov	r0, #0
   13738:	mov	r3, ip
   1373c:	bl	13680 <__assert_fail@plt+0x25b4>
   13740:	mov	sp, fp
   13744:	pop	{fp, pc}
   13748:	movw	r3, #24840	; 0x6108
   1374c:	movt	r3, #2
   13750:	b	131c8 <__assert_fail@plt+0x20fc>
   13754:	movw	r3, #24840	; 0x6108
   13758:	mov	r2, r1
   1375c:	mov	r1, r0
   13760:	mov	r0, #0
   13764:	movt	r3, #2
   13768:	b	131c8 <__assert_fail@plt+0x20fc>
   1376c:	movw	r3, #24840	; 0x6108
   13770:	mvn	r2, #0
   13774:	movt	r3, #2
   13778:	b	131c8 <__assert_fail@plt+0x20fc>
   1377c:	movw	r3, #24840	; 0x6108
   13780:	mov	r1, r0
   13784:	mov	r0, #0
   13788:	mvn	r2, #0
   1378c:	movt	r3, #2
   13790:	b	131c8 <__assert_fail@plt+0x20fc>
   13794:	push	{r4, r5, fp, lr}
   13798:	add	fp, sp, #8
   1379c:	mov	r5, r0
   137a0:	mov	r4, r1
   137a4:	mov	r0, #0
   137a8:	mov	r2, #5
   137ac:	mov	r1, r5
   137b0:	bl	10ef8 <dcgettext@plt>
   137b4:	cmp	r0, r5
   137b8:	popne	{r4, r5, fp, pc}
   137bc:	bl	14b30 <__assert_fail@plt+0x3a64>
   137c0:	ldrb	r1, [r0]
   137c4:	and	r1, r1, #223	; 0xdf
   137c8:	cmp	r1, #71	; 0x47
   137cc:	beq	13834 <__assert_fail@plt+0x2768>
   137d0:	cmp	r1, #85	; 0x55
   137d4:	bne	1388c <__assert_fail@plt+0x27c0>
   137d8:	ldrb	r1, [r0, #1]
   137dc:	and	r1, r1, #223	; 0xdf
   137e0:	cmp	r1, #84	; 0x54
   137e4:	bne	1388c <__assert_fail@plt+0x27c0>
   137e8:	ldrb	r1, [r0, #2]
   137ec:	and	r1, r1, #223	; 0xdf
   137f0:	cmp	r1, #70	; 0x46
   137f4:	bne	1388c <__assert_fail@plt+0x27c0>
   137f8:	ldrb	r1, [r0, #3]
   137fc:	cmp	r1, #45	; 0x2d
   13800:	bne	1388c <__assert_fail@plt+0x27c0>
   13804:	ldrb	r1, [r0, #4]
   13808:	cmp	r1, #56	; 0x38
   1380c:	bne	1388c <__assert_fail@plt+0x27c0>
   13810:	ldrb	r0, [r0, #5]
   13814:	cmp	r0, #0
   13818:	bne	1388c <__assert_fail@plt+0x27c0>
   1381c:	ldrb	r1, [r5]
   13820:	movw	r2, #21544	; 0x5428
   13824:	movw	r0, #21548	; 0x542c
   13828:	movt	r2, #1
   1382c:	movt	r0, #1
   13830:	b	138bc <__assert_fail@plt+0x27f0>
   13834:	ldrb	r1, [r0, #1]
   13838:	and	r1, r1, #223	; 0xdf
   1383c:	cmp	r1, #66	; 0x42
   13840:	bne	1388c <__assert_fail@plt+0x27c0>
   13844:	ldrb	r1, [r0, #2]
   13848:	cmp	r1, #49	; 0x31
   1384c:	bne	1388c <__assert_fail@plt+0x27c0>
   13850:	ldrb	r1, [r0, #3]
   13854:	cmp	r1, #56	; 0x38
   13858:	bne	1388c <__assert_fail@plt+0x27c0>
   1385c:	ldrb	r1, [r0, #4]
   13860:	cmp	r1, #48	; 0x30
   13864:	bne	1388c <__assert_fail@plt+0x27c0>
   13868:	ldrb	r1, [r0, #5]
   1386c:	cmp	r1, #51	; 0x33
   13870:	bne	1388c <__assert_fail@plt+0x27c0>
   13874:	ldrb	r1, [r0, #6]
   13878:	cmp	r1, #48	; 0x30
   1387c:	bne	1388c <__assert_fail@plt+0x27c0>
   13880:	ldrb	r0, [r0, #7]
   13884:	cmp	r0, #0
   13888:	beq	138a8 <__assert_fail@plt+0x27dc>
   1388c:	movw	r1, #21538	; 0x5422
   13890:	movw	r0, #21542	; 0x5426
   13894:	cmp	r4, #9
   13898:	movt	r1, #1
   1389c:	movt	r0, #1
   138a0:	moveq	r0, r1
   138a4:	pop	{r4, r5, fp, pc}
   138a8:	ldrb	r1, [r5]
   138ac:	movw	r2, #21552	; 0x5430
   138b0:	movw	r0, #21556	; 0x5434
   138b4:	movt	r2, #1
   138b8:	movt	r0, #1
   138bc:	cmp	r1, #96	; 0x60
   138c0:	moveq	r0, r2
   138c4:	pop	{r4, r5, fp, pc}
   138c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   138cc:	add	fp, sp, #24
   138d0:	sub	sp, sp, #32
   138d4:	ldr	r6, [fp, #12]
   138d8:	ldr	r7, [fp, #8]
   138dc:	mov	r4, r2
   138e0:	mov	r8, r0
   138e4:	cmp	r1, #0
   138e8:	beq	13910 <__assert_fail@plt+0x2844>
   138ec:	movw	r2, #21644	; 0x548c
   138f0:	mov	r5, r1
   138f4:	str	r3, [sp, #4]
   138f8:	str	r4, [sp]
   138fc:	mov	r0, r8
   13900:	mov	r1, #1
   13904:	movt	r2, #1
   13908:	mov	r3, r5
   1390c:	b	13928 <__assert_fail@plt+0x285c>
   13910:	movw	r2, #21656	; 0x5498
   13914:	str	r3, [sp]
   13918:	mov	r0, r8
   1391c:	mov	r1, #1
   13920:	mov	r3, r4
   13924:	movt	r2, #1
   13928:	bl	11030 <__fprintf_chk@plt>
   1392c:	movw	r1, #21663	; 0x549f
   13930:	mov	r0, #0
   13934:	mov	r2, #5
   13938:	movt	r1, #1
   1393c:	bl	10ef8 <dcgettext@plt>
   13940:	movw	r2, #22381	; 0x576d
   13944:	mov	r3, r0
   13948:	movw	r0, #2022	; 0x7e6
   1394c:	mov	r1, #1
   13950:	movt	r2, #1
   13954:	str	r0, [sp]
   13958:	mov	r0, r8
   1395c:	bl	11030 <__fprintf_chk@plt>
   13960:	movw	r4, #21131	; 0x528b
   13964:	mov	r1, r8
   13968:	movt	r4, #1
   1396c:	mov	r0, r4
   13970:	bl	10e68 <fputs_unlocked@plt>
   13974:	movw	r1, #21667	; 0x54a3
   13978:	mov	r0, #0
   1397c:	mov	r2, #5
   13980:	movt	r1, #1
   13984:	bl	10ef8 <dcgettext@plt>
   13988:	movw	r3, #21838	; 0x554e
   1398c:	mov	r2, r0
   13990:	mov	r0, r8
   13994:	mov	r1, #1
   13998:	movt	r3, #1
   1399c:	bl	11030 <__fprintf_chk@plt>
   139a0:	mov	r0, r4
   139a4:	mov	r1, r8
   139a8:	bl	10e68 <fputs_unlocked@plt>
   139ac:	cmp	r6, #9
   139b0:	bhi	13a14 <__assert_fail@plt+0x2948>
   139b4:	add	r0, pc, #0
   139b8:	ldr	pc, [r0, r6, lsl #2]
   139bc:	andeq	r3, r1, ip, ror #23
   139c0:	andeq	r3, r1, r4, ror #19
   139c4:	andeq	r3, r1, r0, lsr #20
   139c8:	andeq	r3, r1, r8, asr #20
   139cc:	andeq	r3, r1, r0, ror sl
   139d0:	muleq	r1, r8, sl
   139d4:	andeq	r3, r1, r0, asr #21
   139d8:	strdeq	r3, [r1], -r8
   139dc:	muleq	r1, r8, fp
   139e0:	andeq	r3, r1, r0, asr #22
   139e4:	movw	r1, #21872	; 0x5570
   139e8:	mov	r0, #0
   139ec:	mov	r2, #5
   139f0:	movt	r1, #1
   139f4:	bl	10ef8 <dcgettext@plt>
   139f8:	ldr	r3, [r7]
   139fc:	mov	r2, r0
   13a00:	mov	r0, r8
   13a04:	mov	r1, #1
   13a08:	sub	sp, fp, #24
   13a0c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13a10:	b	11030 <__fprintf_chk@plt>
   13a14:	movw	r1, #22191	; 0x56af
   13a18:	movt	r1, #1
   13a1c:	b	13b48 <__assert_fail@plt+0x2a7c>
   13a20:	movw	r1, #21888	; 0x5580
   13a24:	mov	r0, #0
   13a28:	mov	r2, #5
   13a2c:	movt	r1, #1
   13a30:	bl	10ef8 <dcgettext@plt>
   13a34:	mov	r2, r0
   13a38:	ldr	r3, [r7]
   13a3c:	ldr	r0, [r7, #4]
   13a40:	str	r0, [sp]
   13a44:	b	13b34 <__assert_fail@plt+0x2a68>
   13a48:	movw	r1, #21911	; 0x5597
   13a4c:	mov	r0, #0
   13a50:	mov	r2, #5
   13a54:	movt	r1, #1
   13a58:	bl	10ef8 <dcgettext@plt>
   13a5c:	mov	r2, r0
   13a60:	ldr	r3, [r7]
   13a64:	ldmib	r7, {r0, r1}
   13a68:	stm	sp, {r0, r1}
   13a6c:	b	13b34 <__assert_fail@plt+0x2a68>
   13a70:	movw	r1, #21939	; 0x55b3
   13a74:	mov	r0, #0
   13a78:	mov	r2, #5
   13a7c:	movt	r1, #1
   13a80:	bl	10ef8 <dcgettext@plt>
   13a84:	ldr	r3, [r7]
   13a88:	mov	r2, r0
   13a8c:	ldmib	r7, {r0, r1, r7}
   13a90:	stm	sp, {r0, r1, r7}
   13a94:	b	13b34 <__assert_fail@plt+0x2a68>
   13a98:	movw	r1, #21971	; 0x55d3
   13a9c:	mov	r0, #0
   13aa0:	mov	r2, #5
   13aa4:	movt	r1, #1
   13aa8:	bl	10ef8 <dcgettext@plt>
   13aac:	ldr	r3, [r7]
   13ab0:	mov	r2, r0
   13ab4:	ldmib	r7, {r0, r1, r6, r7}
   13ab8:	stm	sp, {r0, r1, r6, r7}
   13abc:	b	13b34 <__assert_fail@plt+0x2a68>
   13ac0:	movw	r1, #22007	; 0x55f7
   13ac4:	mov	r0, #0
   13ac8:	mov	r2, #5
   13acc:	movt	r1, #1
   13ad0:	bl	10ef8 <dcgettext@plt>
   13ad4:	mov	r2, r0
   13ad8:	ldr	r3, [r7]
   13adc:	ldmib	r7, {r0, r1, r6}
   13ae0:	ldr	r5, [r7, #16]
   13ae4:	ldr	r7, [r7, #20]
   13ae8:	stm	sp, {r0, r1, r6}
   13aec:	str	r5, [sp, #12]
   13af0:	str	r7, [sp, #16]
   13af4:	b	13b34 <__assert_fail@plt+0x2a68>
   13af8:	movw	r1, #22047	; 0x561f
   13afc:	mov	r0, #0
   13b00:	mov	r2, #5
   13b04:	movt	r1, #1
   13b08:	bl	10ef8 <dcgettext@plt>
   13b0c:	mov	r2, r0
   13b10:	ldr	r3, [r7]
   13b14:	ldmib	r7, {r0, r1, r6}
   13b18:	ldr	r5, [r7, #16]
   13b1c:	ldr	r4, [r7, #20]
   13b20:	ldr	r7, [r7, #24]
   13b24:	stm	sp, {r0, r1, r6}
   13b28:	str	r5, [sp, #12]
   13b2c:	str	r4, [sp, #16]
   13b30:	str	r7, [sp, #20]
   13b34:	mov	r0, r8
   13b38:	mov	r1, #1
   13b3c:	b	13be8 <__assert_fail@plt+0x2b1c>
   13b40:	movw	r1, #22139	; 0x567b
   13b44:	movt	r1, #1
   13b48:	mov	r0, #0
   13b4c:	mov	r2, #5
   13b50:	bl	10ef8 <dcgettext@plt>
   13b54:	mov	ip, r0
   13b58:	ldr	r3, [r7]
   13b5c:	ldr	r0, [r7, #4]
   13b60:	ldr	r1, [r7, #8]
   13b64:	ldr	r6, [r7, #12]
   13b68:	ldr	r5, [r7, #16]
   13b6c:	ldr	r4, [r7, #20]
   13b70:	ldr	r2, [r7, #24]
   13b74:	ldr	lr, [r7, #28]
   13b78:	ldr	r7, [r7, #32]
   13b7c:	stm	sp, {r0, r1, r6}
   13b80:	str	r5, [sp, #12]
   13b84:	str	r4, [sp, #16]
   13b88:	str	r2, [sp, #20]
   13b8c:	str	lr, [sp, #24]
   13b90:	str	r7, [sp, #28]
   13b94:	b	13bdc <__assert_fail@plt+0x2b10>
   13b98:	movw	r1, #22091	; 0x564b
   13b9c:	mov	r0, #0
   13ba0:	mov	r2, #5
   13ba4:	movt	r1, #1
   13ba8:	bl	10ef8 <dcgettext@plt>
   13bac:	mov	ip, r0
   13bb0:	ldr	r3, [r7]
   13bb4:	ldmib	r7, {r0, r1, r6}
   13bb8:	ldr	r5, [r7, #16]
   13bbc:	ldr	r4, [r7, #20]
   13bc0:	ldr	r2, [r7, #24]
   13bc4:	ldr	r7, [r7, #28]
   13bc8:	stm	sp, {r0, r1, r6}
   13bcc:	str	r5, [sp, #12]
   13bd0:	str	r4, [sp, #16]
   13bd4:	str	r2, [sp, #20]
   13bd8:	str	r7, [sp, #24]
   13bdc:	mov	r0, r8
   13be0:	mov	r1, #1
   13be4:	mov	r2, ip
   13be8:	bl	11030 <__fprintf_chk@plt>
   13bec:	sub	sp, fp, #24
   13bf0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13bf4:	push	{r4, sl, fp, lr}
   13bf8:	add	fp, sp, #8
   13bfc:	sub	sp, sp, #8
   13c00:	ldr	ip, [fp, #8]
   13c04:	mov	lr, #0
   13c08:	ldr	r4, [ip, lr, lsl #2]
   13c0c:	add	lr, lr, #1
   13c10:	cmp	r4, #0
   13c14:	bne	13c08 <__assert_fail@plt+0x2b3c>
   13c18:	sub	r4, lr, #1
   13c1c:	str	ip, [sp]
   13c20:	str	r4, [sp, #4]
   13c24:	bl	138c8 <__assert_fail@plt+0x27fc>
   13c28:	sub	sp, fp, #8
   13c2c:	pop	{r4, sl, fp, pc}
   13c30:	push	{r4, r5, fp, lr}
   13c34:	add	fp, sp, #8
   13c38:	sub	sp, sp, #48	; 0x30
   13c3c:	ldr	r4, [fp, #8]
   13c40:	mov	ip, #0
   13c44:	add	lr, sp, #8
   13c48:	ldr	r5, [r4]
   13c4c:	cmp	r5, #0
   13c50:	str	r5, [lr, ip, lsl #2]
   13c54:	beq	13c6c <__assert_fail@plt+0x2ba0>
   13c58:	add	ip, ip, #1
   13c5c:	add	r4, r4, #4
   13c60:	cmp	ip, #10
   13c64:	bne	13c48 <__assert_fail@plt+0x2b7c>
   13c68:	mov	ip, #10
   13c6c:	str	lr, [sp]
   13c70:	str	ip, [sp, #4]
   13c74:	bl	138c8 <__assert_fail@plt+0x27fc>
   13c78:	sub	sp, fp, #8
   13c7c:	pop	{r4, r5, fp, pc}
   13c80:	push	{fp, lr}
   13c84:	mov	fp, sp
   13c88:	sub	sp, sp, #8
   13c8c:	add	ip, fp, #8
   13c90:	str	ip, [sp, #4]
   13c94:	str	ip, [sp]
   13c98:	bl	13c30 <__assert_fail@plt+0x2b64>
   13c9c:	mov	sp, fp
   13ca0:	pop	{fp, pc}
   13ca4:	push	{fp, lr}
   13ca8:	mov	fp, sp
   13cac:	movw	r0, #24916	; 0x6154
   13cb0:	movt	r0, #2
   13cb4:	ldr	r1, [r0]
   13cb8:	movw	r0, #21131	; 0x528b
   13cbc:	movt	r0, #1
   13cc0:	bl	10e68 <fputs_unlocked@plt>
   13cc4:	movw	r1, #22251	; 0x56eb
   13cc8:	mov	r0, #0
   13ccc:	mov	r2, #5
   13cd0:	movt	r1, #1
   13cd4:	bl	10ef8 <dcgettext@plt>
   13cd8:	movw	r2, #22271	; 0x56ff
   13cdc:	mov	r1, r0
   13ce0:	mov	r0, #1
   13ce4:	movt	r2, #1
   13ce8:	bl	1100c <__printf_chk@plt>
   13cec:	movw	r1, #22293	; 0x5715
   13cf0:	mov	r0, #0
   13cf4:	mov	r2, #5
   13cf8:	movt	r1, #1
   13cfc:	bl	10ef8 <dcgettext@plt>
   13d00:	movw	r2, #20661	; 0x50b5
   13d04:	movw	r3, #20940	; 0x51cc
   13d08:	mov	r1, r0
   13d0c:	mov	r0, #1
   13d10:	movt	r2, #1
   13d14:	movt	r3, #1
   13d18:	bl	1100c <__printf_chk@plt>
   13d1c:	movw	r1, #22313	; 0x5729
   13d20:	mov	r0, #0
   13d24:	mov	r2, #5
   13d28:	movt	r1, #1
   13d2c:	bl	10ef8 <dcgettext@plt>
   13d30:	movw	r2, #22352	; 0x5750
   13d34:	mov	r1, r0
   13d38:	mov	r0, #1
   13d3c:	movt	r2, #1
   13d40:	pop	{fp, lr}
   13d44:	b	1100c <__printf_chk@plt>
   13d48:	b	13d4c <__assert_fail@plt+0x2c80>
   13d4c:	push	{r4, r5, r6, sl, fp, lr}
   13d50:	add	fp, sp, #16
   13d54:	mov	r4, r2
   13d58:	mov	r5, r1
   13d5c:	mov	r6, r0
   13d60:	bl	14bcc <__assert_fail@plt+0x3b00>
   13d64:	cmp	r0, #0
   13d68:	popne	{r4, r5, r6, sl, fp, pc}
   13d6c:	cmp	r6, #0
   13d70:	beq	13d84 <__assert_fail@plt+0x2cb8>
   13d74:	cmp	r5, #0
   13d78:	cmpne	r4, #0
   13d7c:	bne	13d84 <__assert_fail@plt+0x2cb8>
   13d80:	pop	{r4, r5, r6, sl, fp, pc}
   13d84:	bl	141b4 <__assert_fail@plt+0x30e8>
   13d88:	push	{fp, lr}
   13d8c:	mov	fp, sp
   13d90:	bl	14a08 <__assert_fail@plt+0x393c>
   13d94:	cmp	r0, #0
   13d98:	popne	{fp, pc}
   13d9c:	bl	141b4 <__assert_fail@plt+0x30e8>
   13da0:	push	{fp, lr}
   13da4:	mov	fp, sp
   13da8:	bl	14a08 <__assert_fail@plt+0x393c>
   13dac:	cmp	r0, #0
   13db0:	popne	{fp, pc}
   13db4:	bl	141b4 <__assert_fail@plt+0x30e8>
   13db8:	push	{fp, lr}
   13dbc:	mov	fp, sp
   13dc0:	bl	14a08 <__assert_fail@plt+0x393c>
   13dc4:	cmp	r0, #0
   13dc8:	popne	{fp, pc}
   13dcc:	bl	141b4 <__assert_fail@plt+0x30e8>
   13dd0:	push	{r4, r5, fp, lr}
   13dd4:	add	fp, sp, #8
   13dd8:	mov	r4, r1
   13ddc:	mov	r5, r0
   13de0:	bl	14a38 <__assert_fail@plt+0x396c>
   13de4:	cmp	r0, #0
   13de8:	popne	{r4, r5, fp, pc}
   13dec:	cmp	r5, #0
   13df0:	beq	13e00 <__assert_fail@plt+0x2d34>
   13df4:	cmp	r4, #0
   13df8:	bne	13e00 <__assert_fail@plt+0x2d34>
   13dfc:	pop	{r4, r5, fp, pc}
   13e00:	bl	141b4 <__assert_fail@plt+0x30e8>
   13e04:	push	{fp, lr}
   13e08:	mov	fp, sp
   13e0c:	cmp	r1, #0
   13e10:	orreq	r1, r1, #1
   13e14:	bl	14a38 <__assert_fail@plt+0x396c>
   13e18:	cmp	r0, #0
   13e1c:	popne	{fp, pc}
   13e20:	bl	141b4 <__assert_fail@plt+0x30e8>
   13e24:	push	{fp, lr}
   13e28:	mov	fp, sp
   13e2c:	clz	r3, r2
   13e30:	lsr	ip, r3, #5
   13e34:	clz	r3, r1
   13e38:	lsr	r3, r3, #5
   13e3c:	orrs	r3, r3, ip
   13e40:	movwne	r1, #1
   13e44:	movwne	r2, #1
   13e48:	bl	14bcc <__assert_fail@plt+0x3b00>
   13e4c:	cmp	r0, #0
   13e50:	popne	{fp, pc}
   13e54:	bl	141b4 <__assert_fail@plt+0x30e8>
   13e58:	push	{fp, lr}
   13e5c:	mov	fp, sp
   13e60:	mov	r2, r1
   13e64:	mov	r1, r0
   13e68:	mov	r0, #0
   13e6c:	bl	14bcc <__assert_fail@plt+0x3b00>
   13e70:	cmp	r0, #0
   13e74:	popne	{fp, pc}
   13e78:	bl	141b4 <__assert_fail@plt+0x30e8>
   13e7c:	mov	r2, r1
   13e80:	mov	r1, r0
   13e84:	mov	r0, #0
   13e88:	b	13e24 <__assert_fail@plt+0x2d58>
   13e8c:	mov	r2, #1
   13e90:	b	13e94 <__assert_fail@plt+0x2dc8>
   13e94:	push	{r4, r5, fp, lr}
   13e98:	add	fp, sp, #8
   13e9c:	ldr	r5, [r1]
   13ea0:	mov	r4, r1
   13ea4:	cmp	r0, #0
   13ea8:	beq	13ec0 <__assert_fail@plt+0x2df4>
   13eac:	mov	r1, #1
   13eb0:	add	r1, r1, r5, lsr #1
   13eb4:	adds	r5, r5, r1
   13eb8:	bcc	13ed8 <__assert_fail@plt+0x2e0c>
   13ebc:	bl	141b4 <__assert_fail@plt+0x30e8>
   13ec0:	cmp	r5, #0
   13ec4:	bne	13ed8 <__assert_fail@plt+0x2e0c>
   13ec8:	mov	r1, #64	; 0x40
   13ecc:	cmp	r2, #64	; 0x40
   13ed0:	udiv	r5, r1, r2
   13ed4:	addhi	r5, r5, #1
   13ed8:	mov	r1, r5
   13edc:	bl	13d4c <__assert_fail@plt+0x2c80>
   13ee0:	str	r5, [r4]
   13ee4:	pop	{r4, r5, fp, pc}
   13ee8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13eec:	add	fp, sp, #24
   13ef0:	ldr	r6, [r1]
   13ef4:	mov	r8, r1
   13ef8:	ldr	r4, [fp, #8]
   13efc:	add	r1, r6, r6, asr #1
   13f00:	cmp	r1, r6
   13f04:	mvnvs	r1, #-2147483648	; 0x80000000
   13f08:	cmp	r1, r3
   13f0c:	mov	r5, r1
   13f10:	movgt	r5, r3
   13f14:	cmn	r3, #1
   13f18:	movle	r5, r1
   13f1c:	cmn	r4, #1
   13f20:	ble	13f40 <__assert_fail@plt+0x2e74>
   13f24:	cmp	r4, #0
   13f28:	beq	13f94 <__assert_fail@plt+0x2ec8>
   13f2c:	cmn	r5, #1
   13f30:	ble	13f68 <__assert_fail@plt+0x2e9c>
   13f34:	mvn	r7, #-2147483648	; 0x80000000
   13f38:	udiv	r1, r7, r4
   13f3c:	b	13f5c <__assert_fail@plt+0x2e90>
   13f40:	cmn	r5, #1
   13f44:	ble	13f84 <__assert_fail@plt+0x2eb8>
   13f48:	cmn	r4, #1
   13f4c:	beq	13f94 <__assert_fail@plt+0x2ec8>
   13f50:	mov	r1, #-2147483648	; 0x80000000
   13f54:	mvn	r7, #-2147483648	; 0x80000000
   13f58:	sdiv	r1, r1, r4
   13f5c:	cmp	r1, r5
   13f60:	bge	13f94 <__assert_fail@plt+0x2ec8>
   13f64:	b	13fa4 <__assert_fail@plt+0x2ed8>
   13f68:	beq	13f94 <__assert_fail@plt+0x2ec8>
   13f6c:	mov	r1, #-2147483648	; 0x80000000
   13f70:	mvn	r7, #-2147483648	; 0x80000000
   13f74:	sdiv	r1, r1, r5
   13f78:	cmp	r1, r4
   13f7c:	bge	13f94 <__assert_fail@plt+0x2ec8>
   13f80:	b	13fa4 <__assert_fail@plt+0x2ed8>
   13f84:	mvn	r7, #-2147483648	; 0x80000000
   13f88:	sdiv	r1, r7, r4
   13f8c:	cmp	r5, r1
   13f90:	blt	13fa4 <__assert_fail@plt+0x2ed8>
   13f94:	mul	r1, r5, r4
   13f98:	mov	r7, #64	; 0x40
   13f9c:	cmp	r1, #63	; 0x3f
   13fa0:	bgt	13fac <__assert_fail@plt+0x2ee0>
   13fa4:	sdiv	r5, r7, r4
   13fa8:	mul	r1, r5, r4
   13fac:	cmp	r0, #0
   13fb0:	moveq	r7, #0
   13fb4:	streq	r7, [r8]
   13fb8:	sub	r7, r5, r6
   13fbc:	cmp	r7, r2
   13fc0:	bge	14064 <__assert_fail@plt+0x2f98>
   13fc4:	add	r5, r6, r2
   13fc8:	mov	r2, #0
   13fcc:	mov	r1, #0
   13fd0:	cmp	r5, r3
   13fd4:	movwgt	r2, #1
   13fd8:	cmn	r3, #1
   13fdc:	movwgt	r1, #1
   13fe0:	cmp	r5, r6
   13fe4:	bvs	1404c <__assert_fail@plt+0x2f80>
   13fe8:	ands	r1, r1, r2
   13fec:	bne	1404c <__assert_fail@plt+0x2f80>
   13ff0:	cmn	r4, #1
   13ff4:	ble	14014 <__assert_fail@plt+0x2f48>
   13ff8:	cmp	r4, #0
   13ffc:	beq	14060 <__assert_fail@plt+0x2f94>
   14000:	cmn	r5, #1
   14004:	ble	14038 <__assert_fail@plt+0x2f6c>
   14008:	mvn	r1, #-2147483648	; 0x80000000
   1400c:	udiv	r1, r1, r4
   14010:	b	1402c <__assert_fail@plt+0x2f60>
   14014:	cmn	r5, #1
   14018:	ble	14050 <__assert_fail@plt+0x2f84>
   1401c:	cmn	r4, #1
   14020:	beq	14060 <__assert_fail@plt+0x2f94>
   14024:	mov	r1, #-2147483648	; 0x80000000
   14028:	sdiv	r1, r1, r4
   1402c:	cmp	r1, r5
   14030:	bge	14060 <__assert_fail@plt+0x2f94>
   14034:	b	1404c <__assert_fail@plt+0x2f80>
   14038:	beq	14060 <__assert_fail@plt+0x2f94>
   1403c:	mov	r1, #-2147483648	; 0x80000000
   14040:	sdiv	r1, r1, r5
   14044:	cmp	r1, r4
   14048:	bge	14060 <__assert_fail@plt+0x2f94>
   1404c:	bl	141b4 <__assert_fail@plt+0x30e8>
   14050:	mvn	r1, #-2147483648	; 0x80000000
   14054:	sdiv	r1, r1, r4
   14058:	cmp	r5, r1
   1405c:	blt	1404c <__assert_fail@plt+0x2f80>
   14060:	mul	r1, r5, r4
   14064:	bl	13dd0 <__assert_fail@plt+0x2d04>
   14068:	str	r5, [r8]
   1406c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14070:	push	{fp, lr}
   14074:	mov	fp, sp
   14078:	mov	r1, #1
   1407c:	bl	149b4 <__assert_fail@plt+0x38e8>
   14080:	cmp	r0, #0
   14084:	popne	{fp, pc}
   14088:	bl	141b4 <__assert_fail@plt+0x30e8>
   1408c:	push	{fp, lr}
   14090:	mov	fp, sp
   14094:	bl	149b4 <__assert_fail@plt+0x38e8>
   14098:	cmp	r0, #0
   1409c:	popne	{fp, pc}
   140a0:	bl	141b4 <__assert_fail@plt+0x30e8>
   140a4:	push	{fp, lr}
   140a8:	mov	fp, sp
   140ac:	mov	r1, #1
   140b0:	bl	149b4 <__assert_fail@plt+0x38e8>
   140b4:	cmp	r0, #0
   140b8:	popne	{fp, pc}
   140bc:	bl	141b4 <__assert_fail@plt+0x30e8>
   140c0:	push	{fp, lr}
   140c4:	mov	fp, sp
   140c8:	bl	149b4 <__assert_fail@plt+0x38e8>
   140cc:	cmp	r0, #0
   140d0:	popne	{fp, pc}
   140d4:	bl	141b4 <__assert_fail@plt+0x30e8>
   140d8:	push	{r4, r5, fp, lr}
   140dc:	add	fp, sp, #8
   140e0:	mov	r5, r0
   140e4:	mov	r0, r1
   140e8:	mov	r4, r1
   140ec:	bl	14a08 <__assert_fail@plt+0x393c>
   140f0:	cmp	r0, #0
   140f4:	beq	14108 <__assert_fail@plt+0x303c>
   140f8:	mov	r1, r5
   140fc:	mov	r2, r4
   14100:	pop	{r4, r5, fp, lr}
   14104:	b	10ec8 <memcpy@plt>
   14108:	bl	141b4 <__assert_fail@plt+0x30e8>
   1410c:	push	{r4, r5, fp, lr}
   14110:	add	fp, sp, #8
   14114:	mov	r5, r0
   14118:	mov	r0, r1
   1411c:	mov	r4, r1
   14120:	bl	14a08 <__assert_fail@plt+0x393c>
   14124:	cmp	r0, #0
   14128:	beq	1413c <__assert_fail@plt+0x3070>
   1412c:	mov	r1, r5
   14130:	mov	r2, r4
   14134:	pop	{r4, r5, fp, lr}
   14138:	b	10ec8 <memcpy@plt>
   1413c:	bl	141b4 <__assert_fail@plt+0x30e8>
   14140:	push	{r4, r5, fp, lr}
   14144:	add	fp, sp, #8
   14148:	mov	r5, r0
   1414c:	add	r0, r1, #1
   14150:	mov	r4, r1
   14154:	bl	14a08 <__assert_fail@plt+0x393c>
   14158:	cmp	r0, #0
   1415c:	beq	14178 <__assert_fail@plt+0x30ac>
   14160:	mov	r1, #0
   14164:	mov	r2, r4
   14168:	strb	r1, [r0, r4]
   1416c:	mov	r1, r5
   14170:	pop	{r4, r5, fp, lr}
   14174:	b	10ec8 <memcpy@plt>
   14178:	bl	141b4 <__assert_fail@plt+0x30e8>
   1417c:	push	{r4, r5, fp, lr}
   14180:	add	fp, sp, #8
   14184:	mov	r4, r0
   14188:	bl	10fd0 <strlen@plt>
   1418c:	add	r5, r0, #1
   14190:	mov	r0, r5
   14194:	bl	14a08 <__assert_fail@plt+0x393c>
   14198:	cmp	r0, #0
   1419c:	beq	141b0 <__assert_fail@plt+0x30e4>
   141a0:	mov	r1, r4
   141a4:	mov	r2, r5
   141a8:	pop	{r4, r5, fp, lr}
   141ac:	b	10ec8 <memcpy@plt>
   141b0:	bl	141b4 <__assert_fail@plt+0x30e8>
   141b4:	push	{fp, lr}
   141b8:	mov	fp, sp
   141bc:	movw	r0, #24820	; 0x60f4
   141c0:	movw	r1, #22428	; 0x579c
   141c4:	mov	r2, #5
   141c8:	movt	r0, #2
   141cc:	movt	r1, #1
   141d0:	ldr	r4, [r0]
   141d4:	mov	r0, #0
   141d8:	bl	10ef8 <dcgettext@plt>
   141dc:	movw	r2, #21391	; 0x538f
   141e0:	mov	r3, r0
   141e4:	mov	r0, r4
   141e8:	mov	r1, #0
   141ec:	movt	r2, #1
   141f0:	bl	10f64 <error@plt>
   141f4:	bl	110b4 <abort@plt>
   141f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   141fc:	add	fp, sp, #24
   14200:	sub	sp, sp, #16
   14204:	mov	r8, r0
   14208:	ldr	r0, [fp, #16]
   1420c:	mov	r5, r3
   14210:	mov	r6, r2
   14214:	mov	r2, r1
   14218:	add	r3, sp, #8
   1421c:	mov	r1, #0
   14220:	str	r0, [sp]
   14224:	mov	r0, r8
   14228:	bl	142f8 <__assert_fail@plt+0x322c>
   1422c:	cmp	r0, #0
   14230:	bne	142c4 <__assert_fail@plt+0x31f8>
   14234:	ldr	r4, [sp, #8]
   14238:	ldr	r7, [sp, #12]
   1423c:	subs	r0, r4, r6
   14240:	sbcs	r0, r7, r5
   14244:	bcc	14268 <__assert_fail@plt+0x319c>
   14248:	ldr	r1, [fp, #8]
   1424c:	ldr	r0, [fp, #12]
   14250:	subs	r1, r1, r4
   14254:	sbcs	r0, r0, r7
   14258:	movcs	r0, r4
   1425c:	movcs	r1, r7
   14260:	subcs	sp, fp, #24
   14264:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   14268:	bl	10fe8 <__errno_location@plt>
   1426c:	subs	r1, r4, #1073741824	; 0x40000000
   14270:	sbcs	r1, r7, #0
   14274:	bcc	14280 <__assert_fail@plt+0x31b4>
   14278:	mov	r1, #75	; 0x4b
   1427c:	b	14284 <__assert_fail@plt+0x31b8>
   14280:	mov	r1, #34	; 0x22
   14284:	str	r1, [r0]
   14288:	ldr	r6, [r0]
   1428c:	ldr	r4, [fp, #24]
   14290:	ldr	r5, [fp, #20]
   14294:	mov	r0, r8
   14298:	bl	1377c <__assert_fail@plt+0x26b0>
   1429c:	subs	r1, r6, #22
   142a0:	movw	r2, #21387	; 0x538b
   142a4:	str	r0, [sp]
   142a8:	mov	r3, r5
   142ac:	movne	r1, r6
   142b0:	cmp	r4, #0
   142b4:	movt	r2, #1
   142b8:	movweq	r4, #1
   142bc:	mov	r0, r4
   142c0:	bl	10f64 <error@plt>
   142c4:	cmp	r0, #1
   142c8:	beq	142e0 <__assert_fail@plt+0x3214>
   142cc:	cmp	r0, #3
   142d0:	bne	142e8 <__assert_fail@plt+0x321c>
   142d4:	bl	10fe8 <__errno_location@plt>
   142d8:	mov	r1, #0
   142dc:	b	14284 <__assert_fail@plt+0x31b8>
   142e0:	bl	10fe8 <__errno_location@plt>
   142e4:	b	14278 <__assert_fail@plt+0x31ac>
   142e8:	bl	10fe8 <__errno_location@plt>
   142ec:	b	14288 <__assert_fail@plt+0x31bc>
   142f0:	mov	r1, #10
   142f4:	b	141f8 <__assert_fail@plt+0x312c>
   142f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142fc:	add	fp, sp, #28
   14300:	sub	sp, sp, #20
   14304:	cmp	r2, #37	; 0x25
   14308:	bcs	14994 <__assert_fail@plt+0x38c8>
   1430c:	mov	r8, r3
   14310:	mov	r5, r2
   14314:	mov	r6, r1
   14318:	mov	r4, r0
   1431c:	bl	10fe8 <__errno_location@plt>
   14320:	mov	r7, r0
   14324:	mov	r0, #0
   14328:	str	r0, [r7]
   1432c:	bl	10fac <__ctype_b_loc@plt>
   14330:	ldr	r1, [r0]
   14334:	mov	r2, r4
   14338:	ldrb	r0, [r2], #1
   1433c:	add	r3, r1, r0, lsl #1
   14340:	ldrb	r3, [r3, #1]
   14344:	tst	r3, #32
   14348:	bne	14338 <__assert_fail@plt+0x326c>
   1434c:	cmp	r6, #0
   14350:	add	sl, sp, #16
   14354:	movne	sl, r6
   14358:	mov	r6, #4
   1435c:	cmp	r0, #45	; 0x2d
   14360:	beq	14988 <__assert_fail@plt+0x38bc>
   14364:	mov	r0, r4
   14368:	mov	r1, sl
   1436c:	mov	r2, r5
   14370:	str	r8, [sp, #12]
   14374:	bl	11024 <strtoumax@plt>
   14378:	ldr	r5, [sl]
   1437c:	cmp	r5, r4
   14380:	beq	143a8 <__assert_fail@plt+0x32dc>
   14384:	mov	r8, r0
   14388:	ldr	r0, [r7]
   1438c:	mov	r9, r1
   14390:	cmp	r0, #0
   14394:	beq	143dc <__assert_fail@plt+0x3310>
   14398:	cmp	r0, #34	; 0x22
   1439c:	bne	14988 <__assert_fail@plt+0x38bc>
   143a0:	mov	r6, #1
   143a4:	b	143e0 <__assert_fail@plt+0x3314>
   143a8:	ldr	r0, [fp, #8]
   143ac:	cmp	r0, #0
   143b0:	beq	14988 <__assert_fail@plt+0x38bc>
   143b4:	ldrb	r1, [r4]
   143b8:	cmp	r1, #0
   143bc:	beq	14988 <__assert_fail@plt+0x38bc>
   143c0:	bl	10fdc <strchr@plt>
   143c4:	cmp	r0, #0
   143c8:	beq	14988 <__assert_fail@plt+0x38bc>
   143cc:	mov	r6, #0
   143d0:	mov	r8, #1
   143d4:	mov	r9, #0
   143d8:	b	143ec <__assert_fail@plt+0x3320>
   143dc:	mov	r6, r0
   143e0:	ldr	r0, [fp, #8]
   143e4:	cmp	r0, #0
   143e8:	beq	14980 <__assert_fail@plt+0x38b4>
   143ec:	ldrb	r7, [r5]
   143f0:	cmp	r7, #0
   143f4:	beq	14980 <__assert_fail@plt+0x38b4>
   143f8:	ldr	r0, [fp, #8]
   143fc:	mov	r1, r7
   14400:	bl	10fdc <strchr@plt>
   14404:	cmp	r0, #0
   14408:	beq	14510 <__assert_fail@plt+0x3444>
   1440c:	sub	r0, r7, #69	; 0x45
   14410:	mov	r1, #1
   14414:	mov	r3, #0
   14418:	mov	r4, #1024	; 0x400
   1441c:	cmp	r0, #21
   14420:	str	r1, [sp, #8]
   14424:	bhi	1443c <__assert_fail@plt+0x3370>
   14428:	movw	r2, #35141	; 0x8945
   1442c:	mov	r1, #1
   14430:	movt	r2, #48	; 0x30
   14434:	tst	r2, r1, lsl r0
   14438:	bne	14458 <__assert_fail@plt+0x338c>
   1443c:	sub	r0, r7, #103	; 0x67
   14440:	cmp	r0, #13
   14444:	bhi	1448c <__assert_fail@plt+0x33c0>
   14448:	mov	r1, #1
   1444c:	movw	r2, #8273	; 0x2051
   14450:	tst	r2, r1, lsl r0
   14454:	beq	1448c <__assert_fail@plt+0x33c0>
   14458:	ldr	r0, [fp, #8]
   1445c:	mov	r1, #48	; 0x30
   14460:	bl	10fdc <strchr@plt>
   14464:	cmp	r0, #0
   14468:	beq	14488 <__assert_fail@plt+0x33bc>
   1446c:	ldrb	r0, [r5, #1]
   14470:	cmp	r0, #66	; 0x42
   14474:	cmpne	r0, #68	; 0x44
   14478:	bne	145a0 <__assert_fail@plt+0x34d4>
   1447c:	mov	r4, #1000	; 0x3e8
   14480:	mov	r0, #2
   14484:	str	r0, [sp, #8]
   14488:	mov	r3, #0
   1448c:	cmp	r7, #89	; 0x59
   14490:	stm	sp, {r5, r6}
   14494:	bgt	1451c <__assert_fail@plt+0x3450>
   14498:	sub	r0, r7, #66	; 0x42
   1449c:	cmp	r0, #14
   144a0:	bhi	145c4 <__assert_fail@plt+0x34f8>
   144a4:	add	r1, pc, #0
   144a8:	ldr	pc, [r1, r0, lsl #2]
   144ac:	andeq	r4, r1, r8, ror #9
   144b0:	andeq	r4, r1, r4, ror r8
   144b4:	andeq	r4, r1, r4, ror r8
   144b8:	andeq	r4, r1, r8, lsl #17
   144bc:	andeq	r4, r1, r4, ror r8
   144c0:	andeq	r4, r1, r8, ror r6
   144c4:	andeq	r4, r1, r4, ror r8
   144c8:	andeq	r4, r1, r4, ror r8
   144cc:	andeq	r4, r1, r4, ror r8
   144d0:	andeq	r4, r1, r4, ror #13
   144d4:	andeq	r4, r1, r4, ror r8
   144d8:	andeq	r4, r1, r8, lsr #14
   144dc:	andeq	r4, r1, r4, ror r8
   144e0:	andeq	r4, r1, r4, ror r8
   144e4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144e8:	mov	r1, #0
   144ec:	lsl	r3, r9, #10
   144f0:	lsl	r0, r8, #10
   144f4:	lsr	r2, r9, #22
   144f8:	cmp	r1, r9, lsr #22
   144fc:	orr	r3, r3, r8, lsr #22
   14500:	mvnne	r0, #0
   14504:	movwne	r2, #1
   14508:	cmp	r1, r9, lsr #22
   1450c:	b	14590 <__assert_fail@plt+0x34c4>
   14510:	ldr	r0, [sp, #12]
   14514:	orr	r6, r6, #2
   14518:	b	14984 <__assert_fail@plt+0x38b8>
   1451c:	cmp	r7, #115	; 0x73
   14520:	bgt	14640 <__assert_fail@plt+0x3574>
   14524:	sub	r0, r7, #98	; 0x62
   14528:	cmp	r0, #11
   1452c:	bhi	14800 <__assert_fail@plt+0x3734>
   14530:	add	r1, pc, #4
   14534:	mov	r2, #0
   14538:	ldr	pc, [r1, r0, lsl #2]
   1453c:	andeq	r4, r1, ip, ror #10
   14540:	andeq	r4, r1, ip, asr r9
   14544:	andeq	r4, r1, r4, ror r8
   14548:	andeq	r4, r1, r4, ror r8
   1454c:	andeq	r4, r1, r4, ror r8
   14550:	andeq	r4, r1, r8, ror r6
   14554:	andeq	r4, r1, r4, ror r8
   14558:	andeq	r4, r1, r4, ror r8
   1455c:	andeq	r4, r1, r4, ror r8
   14560:	andeq	r4, r1, r4, ror #13
   14564:	andeq	r4, r1, r4, ror r8
   14568:	andeq	r4, r1, r8, lsr #14
   1456c:	mov	r1, #0
   14570:	lsl	r3, r9, #9
   14574:	lsl	r0, r8, #9
   14578:	lsr	r2, r9, #23
   1457c:	cmp	r1, r9, lsr #23
   14580:	orr	r3, r3, r8, lsr #23
   14584:	mvnne	r0, #0
   14588:	movwne	r2, #1
   1458c:	cmp	r1, r9, lsr #23
   14590:	mvnne	r3, #0
   14594:	mov	r8, r0
   14598:	mov	r9, r3
   1459c:	b	1495c <__assert_fail@plt+0x3890>
   145a0:	cmp	r0, #105	; 0x69
   145a4:	mov	r3, #0
   145a8:	bne	1448c <__assert_fail@plt+0x33c0>
   145ac:	ldrb	r0, [r5, #2]
   145b0:	mov	r1, #1
   145b4:	cmp	r0, #66	; 0x42
   145b8:	movweq	r1, #3
   145bc:	str	r1, [sp, #8]
   145c0:	b	1448c <__assert_fail@plt+0x33c0>
   145c4:	cmp	r7, #84	; 0x54
   145c8:	beq	14794 <__assert_fail@plt+0x36c8>
   145cc:	cmp	r7, #89	; 0x59
   145d0:	bne	14874 <__assert_fail@plt+0x37a8>
   145d4:	mvn	r0, #0
   145d8:	mvn	r1, #0
   145dc:	mov	r2, r4
   145e0:	mov	r5, r3
   145e4:	bl	14d08 <__assert_fail@plt+0x3c3c>
   145e8:	mov	ip, r5
   145ec:	mvn	lr, #0
   145f0:	mov	r2, #0
   145f4:	mvn	r3, #7
   145f8:	mov	r5, r8
   145fc:	mov	r7, r9
   14600:	umull	r8, r6, r5, r4
   14604:	mvn	r9, #0
   14608:	mla	r6, r5, ip, r6
   1460c:	subs	r5, r0, r5
   14610:	sbcs	r5, r1, r7
   14614:	mov	r5, #0
   14618:	movwcc	r5, #1
   1461c:	cmp	r5, #0
   14620:	mlaeq	r9, r7, r4, r6
   14624:	movne	r8, lr
   14628:	orrne	r2, r2, #1
   1462c:	adds	r3, r3, #1
   14630:	mov	r5, r8
   14634:	mov	r7, r9
   14638:	bcc	14600 <__assert_fail@plt+0x3534>
   1463c:	b	1495c <__assert_fail@plt+0x3890>
   14640:	cmp	r7, #116	; 0x74
   14644:	beq	14794 <__assert_fail@plt+0x36c8>
   14648:	cmp	r7, #119	; 0x77
   1464c:	bne	14874 <__assert_fail@plt+0x37a8>
   14650:	lsl	r1, r9, #1
   14654:	cmp	r9, #0
   14658:	lsl	r0, r8, #1
   1465c:	lsr	r2, r9, #31
   14660:	orr	r1, r1, r8, lsr #31
   14664:	mvnmi	r0, #0
   14668:	mvnmi	r1, #0
   1466c:	mov	r8, r0
   14670:	mov	r9, r1
   14674:	b	1495c <__assert_fail@plt+0x3890>
   14678:	mvn	r0, #0
   1467c:	mvn	r1, #0
   14680:	mov	r2, r4
   14684:	mov	r5, r3
   14688:	bl	14d08 <__assert_fail@plt+0x3c3c>
   1468c:	mov	ip, r5
   14690:	mvn	lr, #0
   14694:	mov	r2, #0
   14698:	mvn	r3, #2
   1469c:	mov	r6, r8
   146a0:	mov	r5, r9
   146a4:	umull	r8, r7, r6, r4
   146a8:	mvn	r9, #0
   146ac:	mla	r7, r6, ip, r7
   146b0:	subs	r6, r0, r6
   146b4:	sbcs	r6, r1, r5
   146b8:	mov	r6, #0
   146bc:	movwcc	r6, #1
   146c0:	cmp	r6, #0
   146c4:	mlaeq	r9, r5, r4, r7
   146c8:	movne	r8, lr
   146cc:	orrne	r2, r2, #1
   146d0:	adds	r3, r3, #1
   146d4:	mov	r6, r8
   146d8:	mov	r5, r9
   146dc:	bcc	146a4 <__assert_fail@plt+0x35d8>
   146e0:	b	1495c <__assert_fail@plt+0x3890>
   146e4:	mvn	r0, #0
   146e8:	mvn	r1, #0
   146ec:	mov	r2, r4
   146f0:	mov	r5, r3
   146f4:	bl	14d08 <__assert_fail@plt+0x3c3c>
   146f8:	subs	r0, r0, r8
   146fc:	mov	r2, #0
   14700:	sbcs	r0, r1, r9
   14704:	umull	r0, r1, r8, r4
   14708:	movwcc	r2, #1
   1470c:	cmp	r2, #0
   14710:	mla	r1, r8, r5, r1
   14714:	mvnne	r0, #0
   14718:	mla	r9, r9, r4, r1
   1471c:	mvnne	r9, #0
   14720:	mov	r8, r0
   14724:	b	1495c <__assert_fail@plt+0x3890>
   14728:	mvn	r0, #0
   1472c:	mvn	r1, #0
   14730:	mov	r2, r4
   14734:	mov	r5, r3
   14738:	bl	14d08 <__assert_fail@plt+0x3c3c>
   1473c:	mov	ip, r5
   14740:	mvn	lr, #0
   14744:	mov	r2, #0
   14748:	mvn	r3, #1
   1474c:	mov	r6, r8
   14750:	mov	r5, r9
   14754:	umull	r8, r7, r6, r4
   14758:	mvn	r9, #0
   1475c:	mla	r7, r6, ip, r7
   14760:	subs	r6, r0, r6
   14764:	sbcs	r6, r1, r5
   14768:	mov	r6, #0
   1476c:	movwcc	r6, #1
   14770:	cmp	r6, #0
   14774:	mlaeq	r9, r5, r4, r7
   14778:	movne	r8, lr
   1477c:	orrne	r2, r2, #1
   14780:	adds	r3, r3, #1
   14784:	mov	r6, r8
   14788:	mov	r5, r9
   1478c:	bcc	14754 <__assert_fail@plt+0x3688>
   14790:	b	1495c <__assert_fail@plt+0x3890>
   14794:	mvn	r0, #0
   14798:	mvn	r1, #0
   1479c:	mov	r2, r4
   147a0:	mov	r5, r3
   147a4:	bl	14d08 <__assert_fail@plt+0x3c3c>
   147a8:	mov	ip, r5
   147ac:	mvn	lr, #0
   147b0:	mov	r2, #0
   147b4:	mvn	r3, #3
   147b8:	mov	r6, r8
   147bc:	mov	r5, r9
   147c0:	umull	r8, r7, r6, r4
   147c4:	mvn	r9, #0
   147c8:	mla	r7, r6, ip, r7
   147cc:	subs	r6, r0, r6
   147d0:	sbcs	r6, r1, r5
   147d4:	mov	r6, #0
   147d8:	movwcc	r6, #1
   147dc:	cmp	r6, #0
   147e0:	mlaeq	r9, r5, r4, r7
   147e4:	movne	r8, lr
   147e8:	orrne	r2, r2, #1
   147ec:	adds	r3, r3, #1
   147f0:	mov	r6, r8
   147f4:	mov	r5, r9
   147f8:	bcc	147c0 <__assert_fail@plt+0x36f4>
   147fc:	b	1495c <__assert_fail@plt+0x3890>
   14800:	cmp	r7, #90	; 0x5a
   14804:	bne	14874 <__assert_fail@plt+0x37a8>
   14808:	mvn	r0, #0
   1480c:	mvn	r1, #0
   14810:	mov	r2, r4
   14814:	mov	r5, r3
   14818:	bl	14d08 <__assert_fail@plt+0x3c3c>
   1481c:	mov	ip, r5
   14820:	mvn	lr, #0
   14824:	mov	r2, #0
   14828:	mvn	r3, #6
   1482c:	mov	r5, r8
   14830:	mov	r7, r9
   14834:	umull	r8, r6, r5, r4
   14838:	mvn	r9, #0
   1483c:	mla	r6, r5, ip, r6
   14840:	subs	r5, r0, r5
   14844:	sbcs	r5, r1, r7
   14848:	mov	r5, #0
   1484c:	movwcc	r5, #1
   14850:	cmp	r5, #0
   14854:	mlaeq	r9, r7, r4, r6
   14858:	movne	r8, lr
   1485c:	orrne	r2, r2, #1
   14860:	adds	r3, r3, #1
   14864:	mov	r5, r8
   14868:	mov	r7, r9
   1486c:	bcc	14834 <__assert_fail@plt+0x3768>
   14870:	b	1495c <__assert_fail@plt+0x3890>
   14874:	ldr	r0, [sp, #12]
   14878:	strd	r8, [r0]
   1487c:	ldr	r6, [sp, #4]
   14880:	orr	r6, r6, #2
   14884:	b	14988 <__assert_fail@plt+0x38bc>
   14888:	mvn	r0, #0
   1488c:	mvn	r1, #0
   14890:	mov	r2, r4
   14894:	mov	r5, r3
   14898:	bl	14d08 <__assert_fail@plt+0x3c3c>
   1489c:	mov	ip, r5
   148a0:	mvn	lr, #0
   148a4:	mov	r2, #0
   148a8:	mvn	r3, #5
   148ac:	mov	r5, r8
   148b0:	mov	r7, r9
   148b4:	umull	r8, r6, r5, r4
   148b8:	mvn	r9, #0
   148bc:	mla	r6, r5, ip, r6
   148c0:	subs	r5, r0, r5
   148c4:	sbcs	r5, r1, r7
   148c8:	mov	r5, #0
   148cc:	movwcc	r5, #1
   148d0:	cmp	r5, #0
   148d4:	mlaeq	r9, r7, r4, r6
   148d8:	movne	r8, lr
   148dc:	orrne	r2, r2, #1
   148e0:	adds	r3, r3, #1
   148e4:	mov	r5, r8
   148e8:	mov	r7, r9
   148ec:	bcc	148b4 <__assert_fail@plt+0x37e8>
   148f0:	b	1495c <__assert_fail@plt+0x3890>
   148f4:	mvn	r0, #0
   148f8:	mvn	r1, #0
   148fc:	mov	r2, r4
   14900:	mov	r5, r3
   14904:	bl	14d08 <__assert_fail@plt+0x3c3c>
   14908:	mov	ip, r5
   1490c:	mvn	lr, #0
   14910:	mov	r2, #0
   14914:	mvn	r3, #4
   14918:	mov	r5, r8
   1491c:	mov	r7, r9
   14920:	umull	r8, r6, r5, r4
   14924:	mvn	r9, #0
   14928:	mla	r6, r5, ip, r6
   1492c:	subs	r5, r0, r5
   14930:	sbcs	r5, r1, r7
   14934:	mov	r5, #0
   14938:	movwcc	r5, #1
   1493c:	cmp	r5, #0
   14940:	mlaeq	r9, r7, r4, r6
   14944:	movne	r8, lr
   14948:	orrne	r2, r2, #1
   1494c:	adds	r3, r3, #1
   14950:	mov	r5, r8
   14954:	mov	r7, r9
   14958:	bcc	14920 <__assert_fail@plt+0x3854>
   1495c:	ldr	r1, [sp]
   14960:	ldr	r3, [sp, #8]
   14964:	ldr	r6, [sp, #4]
   14968:	add	r0, r1, r3
   1496c:	orr	r6, r2, r6
   14970:	str	r0, [sl]
   14974:	ldrb	r0, [r1, r3]
   14978:	cmp	r0, #0
   1497c:	orrne	r6, r6, #2
   14980:	ldr	r0, [sp, #12]
   14984:	strd	r8, [r0]
   14988:	mov	r0, r6
   1498c:	sub	sp, fp, #28
   14990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14994:	movw	r0, #22445	; 0x57ad
   14998:	movw	r1, #22483	; 0x57d3
   1499c:	movw	r3, #22499	; 0x57e3
   149a0:	mov	r2, #85	; 0x55
   149a4:	movt	r0, #1
   149a8:	movt	r1, #1
   149ac:	movt	r3, #1
   149b0:	bl	110cc <__assert_fail@plt>
   149b4:	clz	r2, r1
   149b8:	clz	r3, r0
   149bc:	lsr	r2, r2, #5
   149c0:	lsr	r3, r3, #5
   149c4:	orrs	r2, r3, r2
   149c8:	movwne	r1, #1
   149cc:	movwne	r0, #1
   149d0:	cmp	r1, #0
   149d4:	beq	14a04 <__assert_fail@plt+0x3938>
   149d8:	mvn	r2, #-2147483648	; 0x80000000
   149dc:	udiv	r2, r2, r1
   149e0:	cmp	r2, r0
   149e4:	bcs	14a04 <__assert_fail@plt+0x3938>
   149e8:	push	{fp, lr}
   149ec:	mov	fp, sp
   149f0:	bl	10fe8 <__errno_location@plt>
   149f4:	mov	r1, #12
   149f8:	str	r1, [r0]
   149fc:	mov	r0, #0
   14a00:	pop	{fp, pc}
   14a04:	b	10e5c <calloc@plt>
   14a08:	cmp	r0, #0
   14a0c:	movweq	r0, #1
   14a10:	cmn	r0, #1
   14a14:	ble	14a1c <__assert_fail@plt+0x3950>
   14a18:	b	10f70 <malloc@plt>
   14a1c:	push	{fp, lr}
   14a20:	mov	fp, sp
   14a24:	bl	10fe8 <__errno_location@plt>
   14a28:	mov	r1, #12
   14a2c:	str	r1, [r0]
   14a30:	mov	r0, #0
   14a34:	pop	{fp, pc}
   14a38:	push	{fp, lr}
   14a3c:	mov	fp, sp
   14a40:	cmp	r0, #0
   14a44:	beq	14a60 <__assert_fail@plt+0x3994>
   14a48:	cmp	r1, #0
   14a4c:	beq	14a6c <__assert_fail@plt+0x39a0>
   14a50:	cmn	r1, #1
   14a54:	ble	14a74 <__assert_fail@plt+0x39a8>
   14a58:	pop	{fp, lr}
   14a5c:	b	10f04 <realloc@plt>
   14a60:	mov	r0, r1
   14a64:	pop	{fp, lr}
   14a68:	b	14a08 <__assert_fail@plt+0x393c>
   14a6c:	bl	14b08 <__assert_fail@plt+0x3a3c>
   14a70:	b	14a80 <__assert_fail@plt+0x39b4>
   14a74:	bl	10fe8 <__errno_location@plt>
   14a78:	mov	r1, #12
   14a7c:	str	r1, [r0]
   14a80:	mov	r0, #0
   14a84:	pop	{fp, pc}
   14a88:	push	{r4, r5, r6, sl, fp, lr}
   14a8c:	add	fp, sp, #16
   14a90:	mov	r4, r0
   14a94:	bl	10f40 <__fpending@plt>
   14a98:	mov	r5, r0
   14a9c:	mov	r0, r4
   14aa0:	bl	10f4c <ferror_unlocked@plt>
   14aa4:	mov	r6, r0
   14aa8:	mov	r0, r4
   14aac:	bl	11bf4 <__assert_fail@plt+0xb28>
   14ab0:	cmp	r6, #0
   14ab4:	beq	14ad4 <__assert_fail@plt+0x3a08>
   14ab8:	mvn	r4, #0
   14abc:	cmp	r0, #0
   14ac0:	bne	14b00 <__assert_fail@plt+0x3a34>
   14ac4:	bl	10fe8 <__errno_location@plt>
   14ac8:	mov	r1, #0
   14acc:	str	r1, [r0]
   14ad0:	b	14b00 <__assert_fail@plt+0x3a34>
   14ad4:	cmp	r0, #0
   14ad8:	mov	r4, r0
   14adc:	mvnne	r4, #0
   14ae0:	cmp	r5, #0
   14ae4:	bne	14b00 <__assert_fail@plt+0x3a34>
   14ae8:	cmp	r0, #0
   14aec:	beq	14b00 <__assert_fail@plt+0x3a34>
   14af0:	bl	10fe8 <__errno_location@plt>
   14af4:	ldr	r0, [r0]
   14af8:	subs	r4, r0, #9
   14afc:	mvnne	r4, #0
   14b00:	mov	r0, r4
   14b04:	pop	{r4, r5, r6, sl, fp, pc}
   14b08:	push	{r4, r5, r6, sl, fp, lr}
   14b0c:	add	fp, sp, #16
   14b10:	mov	r4, r0
   14b14:	bl	10fe8 <__errno_location@plt>
   14b18:	ldr	r6, [r0]
   14b1c:	mov	r5, r0
   14b20:	mov	r0, r4
   14b24:	bl	10eb0 <free@plt>
   14b28:	str	r6, [r5]
   14b2c:	pop	{r4, r5, r6, sl, fp, pc}
   14b30:	push	{fp, lr}
   14b34:	mov	fp, sp
   14b38:	mov	r0, #14
   14b3c:	bl	1106c <nl_langinfo@plt>
   14b40:	movw	r1, #21132	; 0x528c
   14b44:	cmp	r0, #0
   14b48:	movt	r1, #1
   14b4c:	movne	r1, r0
   14b50:	movw	r0, #22578	; 0x5832
   14b54:	ldrb	r2, [r1]
   14b58:	movt	r0, #1
   14b5c:	cmp	r2, #0
   14b60:	movne	r0, r1
   14b64:	pop	{fp, pc}
   14b68:	push	{r4, r5, r6, r7, fp, lr}
   14b6c:	add	fp, sp, #16
   14b70:	sub	sp, sp, #8
   14b74:	cmp	r0, #0
   14b78:	add	r5, sp, #4
   14b7c:	mov	r7, r2
   14b80:	mov	r4, r1
   14b84:	movne	r5, r0
   14b88:	mov	r0, r5
   14b8c:	bl	10f58 <mbrtowc@plt>
   14b90:	mov	r6, r0
   14b94:	cmp	r7, #0
   14b98:	beq	14bc0 <__assert_fail@plt+0x3af4>
   14b9c:	cmn	r6, #2
   14ba0:	bcc	14bc0 <__assert_fail@plt+0x3af4>
   14ba4:	mov	r0, #0
   14ba8:	bl	14c08 <__assert_fail@plt+0x3b3c>
   14bac:	cmp	r0, #0
   14bb0:	bne	14bc0 <__assert_fail@plt+0x3af4>
   14bb4:	ldrb	r0, [r4]
   14bb8:	mov	r6, #1
   14bbc:	str	r0, [r5]
   14bc0:	mov	r0, r6
   14bc4:	sub	sp, fp, #16
   14bc8:	pop	{r4, r5, r6, r7, fp, pc}
   14bcc:	cmp	r2, #0
   14bd0:	beq	14c00 <__assert_fail@plt+0x3b34>
   14bd4:	mvn	r3, #0
   14bd8:	udiv	r3, r3, r2
   14bdc:	cmp	r3, r1
   14be0:	bcs	14c00 <__assert_fail@plt+0x3b34>
   14be4:	push	{fp, lr}
   14be8:	mov	fp, sp
   14bec:	bl	10fe8 <__errno_location@plt>
   14bf0:	mov	r1, #12
   14bf4:	str	r1, [r0]
   14bf8:	mov	r0, #0
   14bfc:	pop	{fp, pc}
   14c00:	mul	r1, r2, r1
   14c04:	b	14a38 <__assert_fail@plt+0x396c>
   14c08:	push	{r4, sl, fp, lr}
   14c0c:	add	fp, sp, #8
   14c10:	sub	sp, sp, #264	; 0x108
   14c14:	add	r1, sp, #7
   14c18:	movw	r2, #257	; 0x101
   14c1c:	bl	14c74 <__assert_fail@plt+0x3ba8>
   14c20:	mov	r4, #0
   14c24:	cmp	r0, #0
   14c28:	bne	14c68 <__assert_fail@plt+0x3b9c>
   14c2c:	movw	r1, #22584	; 0x5838
   14c30:	add	r0, sp, #7
   14c34:	mov	r2, #2
   14c38:	movt	r1, #1
   14c3c:	bl	10fc4 <bcmp@plt>
   14c40:	cmp	r0, #0
   14c44:	beq	14c68 <__assert_fail@plt+0x3b9c>
   14c48:	movw	r1, #22586	; 0x583a
   14c4c:	add	r0, sp, #7
   14c50:	mov	r2, #6
   14c54:	movt	r1, #1
   14c58:	bl	10fc4 <bcmp@plt>
   14c5c:	cmp	r0, #0
   14c60:	mov	r4, r0
   14c64:	movwne	r4, #1
   14c68:	mov	r0, r4
   14c6c:	sub	sp, fp, #8
   14c70:	pop	{r4, sl, fp, pc}
   14c74:	push	{r4, r5, r6, r7, fp, lr}
   14c78:	add	fp, sp, #16
   14c7c:	mov	r4, r1
   14c80:	mov	r1, #0
   14c84:	mov	r6, r2
   14c88:	bl	11054 <setlocale@plt>
   14c8c:	cmp	r0, #0
   14c90:	beq	14cbc <__assert_fail@plt+0x3bf0>
   14c94:	mov	r7, r0
   14c98:	bl	10fd0 <strlen@plt>
   14c9c:	cmp	r0, r6
   14ca0:	bcs	14cd0 <__assert_fail@plt+0x3c04>
   14ca4:	add	r2, r0, #1
   14ca8:	mov	r0, r4
   14cac:	mov	r1, r7
   14cb0:	bl	10ec8 <memcpy@plt>
   14cb4:	mov	r5, #0
   14cb8:	b	14cf8 <__assert_fail@plt+0x3c2c>
   14cbc:	cmp	r6, #0
   14cc0:	mov	r5, #22
   14cc4:	movne	r0, #0
   14cc8:	strbne	r0, [r4]
   14ccc:	b	14cf8 <__assert_fail@plt+0x3c2c>
   14cd0:	mov	r5, #34	; 0x22
   14cd4:	cmp	r6, #0
   14cd8:	beq	14cf8 <__assert_fail@plt+0x3c2c>
   14cdc:	sub	r6, r6, #1
   14ce0:	mov	r0, r4
   14ce4:	mov	r1, r7
   14ce8:	mov	r2, r6
   14cec:	bl	10ec8 <memcpy@plt>
   14cf0:	mov	r0, #0
   14cf4:	strb	r0, [r4, r6]
   14cf8:	mov	r0, r5
   14cfc:	pop	{r4, r5, r6, r7, fp, pc}
   14d00:	mov	r1, #0
   14d04:	b	11054 <setlocale@plt>
   14d08:	cmp	r3, #0
   14d0c:	cmpeq	r2, #0
   14d10:	bne	14d28 <__assert_fail@plt+0x3c5c>
   14d14:	cmp	r1, #0
   14d18:	cmpeq	r0, #0
   14d1c:	mvnne	r1, #0
   14d20:	mvnne	r0, #0
   14d24:	b	14d44 <__assert_fail@plt+0x3c78>
   14d28:	sub	sp, sp, #8
   14d2c:	push	{sp, lr}
   14d30:	bl	14d54 <__assert_fail@plt+0x3c88>
   14d34:	ldr	lr, [sp, #4]
   14d38:	add	sp, sp, #8
   14d3c:	pop	{r2, r3}
   14d40:	bx	lr
   14d44:	push	{r1, lr}
   14d48:	mov	r0, #8
   14d4c:	bl	10e74 <raise@plt>
   14d50:	pop	{r1, pc}
   14d54:	cmp	r1, r3
   14d58:	cmpeq	r0, r2
   14d5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d60:	mov	r4, r0
   14d64:	movcc	r0, #0
   14d68:	mov	r5, r1
   14d6c:	ldr	lr, [sp, #36]	; 0x24
   14d70:	movcc	r1, r0
   14d74:	bcc	14e70 <__assert_fail@plt+0x3da4>
   14d78:	cmp	r3, #0
   14d7c:	clzeq	ip, r2
   14d80:	clzne	ip, r3
   14d84:	addeq	ip, ip, #32
   14d88:	cmp	r5, #0
   14d8c:	clzeq	r1, r4
   14d90:	addeq	r1, r1, #32
   14d94:	clzne	r1, r5
   14d98:	sub	ip, ip, r1
   14d9c:	sub	sl, ip, #32
   14da0:	lsl	r9, r3, ip
   14da4:	rsb	fp, ip, #32
   14da8:	orr	r9, r9, r2, lsl sl
   14dac:	orr	r9, r9, r2, lsr fp
   14db0:	lsl	r8, r2, ip
   14db4:	cmp	r5, r9
   14db8:	cmpeq	r4, r8
   14dbc:	movcc	r0, #0
   14dc0:	movcc	r1, r0
   14dc4:	bcc	14de0 <__assert_fail@plt+0x3d14>
   14dc8:	mov	r0, #1
   14dcc:	subs	r4, r4, r8
   14dd0:	lsl	r1, r0, sl
   14dd4:	orr	r1, r1, r0, lsr fp
   14dd8:	lsl	r0, r0, ip
   14ddc:	sbc	r5, r5, r9
   14de0:	cmp	ip, #0
   14de4:	beq	14e70 <__assert_fail@plt+0x3da4>
   14de8:	lsr	r6, r8, #1
   14dec:	orr	r6, r6, r9, lsl #31
   14df0:	lsr	r7, r9, #1
   14df4:	mov	r2, ip
   14df8:	b	14e1c <__assert_fail@plt+0x3d50>
   14dfc:	subs	r3, r4, r6
   14e00:	sbc	r8, r5, r7
   14e04:	adds	r3, r3, r3
   14e08:	adc	r8, r8, r8
   14e0c:	adds	r4, r3, #1
   14e10:	adc	r5, r8, #0
   14e14:	subs	r2, r2, #1
   14e18:	beq	14e38 <__assert_fail@plt+0x3d6c>
   14e1c:	cmp	r5, r7
   14e20:	cmpeq	r4, r6
   14e24:	bcs	14dfc <__assert_fail@plt+0x3d30>
   14e28:	adds	r4, r4, r4
   14e2c:	adc	r5, r5, r5
   14e30:	subs	r2, r2, #1
   14e34:	bne	14e1c <__assert_fail@plt+0x3d50>
   14e38:	lsr	r3, r4, ip
   14e3c:	orr	r3, r3, r5, lsl fp
   14e40:	lsr	r2, r5, ip
   14e44:	orr	r3, r3, r5, lsr sl
   14e48:	adds	r0, r0, r4
   14e4c:	mov	r4, r3
   14e50:	lsl	r3, r2, ip
   14e54:	orr	r3, r3, r4, lsl sl
   14e58:	lsl	ip, r4, ip
   14e5c:	orr	r3, r3, r4, lsr fp
   14e60:	adc	r1, r1, r5
   14e64:	subs	r0, r0, ip
   14e68:	mov	r5, r2
   14e6c:	sbc	r1, r1, r3
   14e70:	cmp	lr, #0
   14e74:	strdne	r4, [lr]
   14e78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e7c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14e80:	mov	r7, r0
   14e84:	ldr	r6, [pc, #72]	; 14ed4 <__assert_fail@plt+0x3e08>
   14e88:	ldr	r5, [pc, #72]	; 14ed8 <__assert_fail@plt+0x3e0c>
   14e8c:	add	r6, pc, r6
   14e90:	add	r5, pc, r5
   14e94:	sub	r6, r6, r5
   14e98:	mov	r8, r1
   14e9c:	mov	r9, r2
   14ea0:	bl	10e3c <calloc@plt-0x20>
   14ea4:	asrs	r6, r6, #2
   14ea8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14eac:	mov	r4, #0
   14eb0:	add	r4, r4, #1
   14eb4:	ldr	r3, [r5], #4
   14eb8:	mov	r2, r9
   14ebc:	mov	r1, r8
   14ec0:	mov	r0, r7
   14ec4:	blx	r3
   14ec8:	cmp	r6, r4
   14ecc:	bne	14eb0 <__assert_fail@plt+0x3de4>
   14ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14ed4:	andeq	r1, r1, r8, ror r0
   14ed8:	andeq	r1, r1, r0, ror r0
   14edc:	bx	lr
   14ee0:	ldr	r3, [pc, #12]	; 14ef4 <__assert_fail@plt+0x3e28>
   14ee4:	mov	r1, #0
   14ee8:	add	r3, pc, r3
   14eec:	ldr	r2, [r3]
   14ef0:	b	10ff4 <__cxa_atexit@plt>
   14ef4:	strdeq	r1, [r1], -ip

Disassembly of section .fini:

00014ef8 <.fini>:
   14ef8:	push	{r3, lr}
   14efc:	pop	{r3, pc}
