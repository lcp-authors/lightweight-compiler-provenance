
../repos/coreutils/src/nproc:     file format elf32-littlearm


Disassembly of section .init:

00010c44 <.init>:
   10c44:	push	{r3, lr}
   10c48:	bl	110e8 <__assert_fail@plt+0x22c>
   10c4c:	pop	{r3, pc}

Disassembly of section .plt:

00010c50 <calloc@plt-0x14>:
   10c50:	push	{lr}		; (str lr, [sp, #-4]!)
   10c54:	ldr	lr, [pc, #4]	; 10c60 <calloc@plt-0x4>
   10c58:	add	lr, pc, lr
   10c5c:	ldr	pc, [lr, #8]!
   10c60:	andeq	r8, r1, r0, lsr #7

00010c64 <calloc@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #24, 20	; 0x18000
   10c6c:	ldr	pc, [ip, #928]!	; 0x3a0

00010c70 <fputs_unlocked@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #24, 20	; 0x18000
   10c78:	ldr	pc, [ip, #920]!	; 0x398

00010c7c <raise@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #24, 20	; 0x18000
   10c84:	ldr	pc, [ip, #912]!	; 0x390

00010c88 <strcmp@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #24, 20	; 0x18000
   10c90:	ldr	pc, [ip, #904]!	; 0x388

00010c94 <fflush@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #24, 20	; 0x18000
   10c9c:	ldr	pc, [ip, #896]!	; 0x380

00010ca0 <free@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #24, 20	; 0x18000
   10ca8:	ldr	pc, [ip, #888]!	; 0x378

00010cac <_exit@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #24, 20	; 0x18000
   10cb4:	ldr	pc, [ip, #880]!	; 0x370

00010cb8 <memcpy@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #24, 20	; 0x18000
   10cc0:	ldr	pc, [ip, #872]!	; 0x368

00010cc4 <__strtoull_internal@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #24, 20	; 0x18000
   10ccc:	ldr	pc, [ip, #864]!	; 0x360

00010cd0 <mbsinit@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #24, 20	; 0x18000
   10cd8:	ldr	pc, [ip, #856]!	; 0x358

00010cdc <__sched_cpucount@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #24, 20	; 0x18000
   10ce4:	ldr	pc, [ip, #848]!	; 0x350

00010ce8 <memcmp@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #24, 20	; 0x18000
   10cf0:	ldr	pc, [ip, #840]!	; 0x348

00010cf4 <fputc_unlocked@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #24, 20	; 0x18000
   10cfc:	ldr	pc, [ip, #832]!	; 0x340

00010d00 <dcgettext@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #24, 20	; 0x18000
   10d08:	ldr	pc, [ip, #824]!	; 0x338

00010d0c <sysconf@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #24, 20	; 0x18000
   10d14:	ldr	pc, [ip, #816]!	; 0x330

00010d18 <realloc@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #24, 20	; 0x18000
   10d20:	ldr	pc, [ip, #808]!	; 0x328

00010d24 <textdomain@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #24, 20	; 0x18000
   10d2c:	ldr	pc, [ip, #800]!	; 0x320

00010d30 <iswprint@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #24, 20	; 0x18000
   10d38:	ldr	pc, [ip, #792]!	; 0x318

00010d3c <fwrite@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #24, 20	; 0x18000
   10d44:	ldr	pc, [ip, #784]!	; 0x310

00010d48 <lseek64@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #24, 20	; 0x18000
   10d50:	ldr	pc, [ip, #776]!	; 0x308

00010d54 <__ctype_get_mb_cur_max@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #24, 20	; 0x18000
   10d5c:	ldr	pc, [ip, #768]!	; 0x300

00010d60 <__fpending@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #24, 20	; 0x18000
   10d68:	ldr	pc, [ip, #760]!	; 0x2f8

00010d6c <mbrtowc@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #24, 20	; 0x18000
   10d74:	ldr	pc, [ip, #752]!	; 0x2f0

00010d78 <error@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #24, 20	; 0x18000
   10d80:	ldr	pc, [ip, #744]!	; 0x2e8

00010d84 <getenv@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #24, 20	; 0x18000
   10d8c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d90 <malloc@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #24, 20	; 0x18000
   10d98:	ldr	pc, [ip, #728]!	; 0x2d8

00010d9c <__libc_start_main@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #24, 20	; 0x18000
   10da4:	ldr	pc, [ip, #720]!	; 0x2d0

00010da8 <__freading@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #24, 20	; 0x18000
   10db0:	ldr	pc, [ip, #712]!	; 0x2c8

00010db4 <__gmon_start__@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #24, 20	; 0x18000
   10dbc:	ldr	pc, [ip, #704]!	; 0x2c0

00010dc0 <getopt_long@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #24, 20	; 0x18000
   10dc8:	ldr	pc, [ip, #696]!	; 0x2b8

00010dcc <__ctype_b_loc@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #24, 20	; 0x18000
   10dd4:	ldr	pc, [ip, #688]!	; 0x2b0

00010dd8 <exit@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #24, 20	; 0x18000
   10de0:	ldr	pc, [ip, #680]!	; 0x2a8

00010de4 <strtoul@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #24, 20	; 0x18000
   10dec:	ldr	pc, [ip, #672]!	; 0x2a0

00010df0 <strlen@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #24, 20	; 0x18000
   10df8:	ldr	pc, [ip, #664]!	; 0x298

00010dfc <strchr@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #24, 20	; 0x18000
   10e04:	ldr	pc, [ip, #656]!	; 0x290

00010e08 <__errno_location@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #24, 20	; 0x18000
   10e10:	ldr	pc, [ip, #648]!	; 0x288

00010e14 <__cxa_atexit@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #24, 20	; 0x18000
   10e1c:	ldr	pc, [ip, #640]!	; 0x280

00010e20 <memset@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #24, 20	; 0x18000
   10e28:	ldr	pc, [ip, #632]!	; 0x278

00010e2c <__printf_chk@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #24, 20	; 0x18000
   10e34:	ldr	pc, [ip, #624]!	; 0x270

00010e38 <fileno@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #24, 20	; 0x18000
   10e40:	ldr	pc, [ip, #616]!	; 0x268

00010e44 <__fprintf_chk@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #24, 20	; 0x18000
   10e4c:	ldr	pc, [ip, #608]!	; 0x260

00010e50 <fclose@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #24, 20	; 0x18000
   10e58:	ldr	pc, [ip, #600]!	; 0x258

00010e5c <fseeko64@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #24, 20	; 0x18000
   10e64:	ldr	pc, [ip, #592]!	; 0x250

00010e68 <setlocale@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #24, 20	; 0x18000
   10e70:	ldr	pc, [ip, #584]!	; 0x248

00010e74 <strrchr@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #24, 20	; 0x18000
   10e7c:	ldr	pc, [ip, #576]!	; 0x240

00010e80 <nl_langinfo@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #24, 20	; 0x18000
   10e88:	ldr	pc, [ip, #568]!	; 0x238

00010e8c <sched_getaffinity@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #24, 20	; 0x18000
   10e94:	ldr	pc, [ip, #560]!	; 0x230

00010e98 <bindtextdomain@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #24, 20	; 0x18000
   10ea0:	ldr	pc, [ip, #552]!	; 0x228

00010ea4 <strncmp@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #24, 20	; 0x18000
   10eac:	ldr	pc, [ip, #544]!	; 0x220

00010eb0 <abort@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #24, 20	; 0x18000
   10eb8:	ldr	pc, [ip, #536]!	; 0x218

00010ebc <__assert_fail@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #24, 20	; 0x18000
   10ec4:	ldr	pc, [ip, #528]!	; 0x210

Disassembly of section .text:

00010ec8 <.text>:
   10ec8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ecc:	mov	r6, r0
   10ed0:	sub	sp, sp, #36	; 0x24
   10ed4:	ldr	r0, [r1]
   10ed8:	mov	r5, r1
   10edc:	bl	117ec <__assert_fail@plt+0x930>
   10ee0:	ldr	r1, [pc, #388]	; 1106c <__assert_fail@plt+0x1b0>
   10ee4:	mov	r0, #6
   10ee8:	bl	10e68 <setlocale@plt>
   10eec:	ldr	r9, [pc, #376]	; 1106c <__assert_fail@plt+0x1b0>
   10ef0:	ldr	r1, [pc, #376]	; 11070 <__assert_fail@plt+0x1b4>
   10ef4:	ldr	r0, [pc, #376]	; 11074 <__assert_fail@plt+0x1b8>
   10ef8:	bl	10e98 <bindtextdomain@plt>
   10efc:	ldr	r8, [pc, #372]	; 11078 <__assert_fail@plt+0x1bc>
   10f00:	ldr	r0, [pc, #364]	; 11074 <__assert_fail@plt+0x1b8>
   10f04:	ldr	sl, [pc, #368]	; 1107c <__assert_fail@plt+0x1c0>
   10f08:	bl	10d24 <textdomain@plt>
   10f0c:	mov	r7, r9
   10f10:	ldr	r0, [pc, #360]	; 11080 <__assert_fail@plt+0x1c4>
   10f14:	mov	fp, #0
   10f18:	bl	18310 <__assert_fail@plt+0x7454>
   10f1c:	mov	r3, #2
   10f20:	str	r3, [sp, #28]
   10f24:	mov	r4, #0
   10f28:	str	r4, [sp]
   10f2c:	mov	r3, r8
   10f30:	mov	r2, r7
   10f34:	mov	r1, r5
   10f38:	mov	r0, r6
   10f3c:	bl	10dc0 <getopt_long@plt>
   10f40:	cmn	r0, #1
   10f44:	beq	11030 <__assert_fail@plt+0x174>
   10f48:	cmn	r0, #2
   10f4c:	beq	11028 <__assert_fail@plt+0x16c>
   10f50:	ble	10fb4 <__assert_fail@plt+0xf8>
   10f54:	cmp	r0, #256	; 0x100
   10f58:	beq	10fac <__assert_fail@plt+0xf0>
   10f5c:	cmp	r0, sl
   10f60:	bne	11020 <__assert_fail@plt+0x164>
   10f64:	ldr	r3, [pc, #280]	; 11084 <__assert_fail@plt+0x1c8>
   10f68:	mov	r2, #5
   10f6c:	ldr	r1, [pc, #276]	; 11088 <__assert_fail@plt+0x1cc>
   10f70:	mov	r0, #0
   10f74:	ldr	fp, [r3]
   10f78:	bl	10d00 <dcgettext@plt>
   10f7c:	mvn	r2, #0
   10f80:	mov	r3, #0
   10f84:	str	r4, [sp, #16]
   10f88:	strd	r2, [sp]
   10f8c:	str	r9, [sp, #8]
   10f90:	mov	r2, #0
   10f94:	mov	r3, #0
   10f98:	str	r0, [sp, #12]
   10f9c:	mov	r0, fp
   10fa0:	bl	16a38 <__assert_fail@plt+0x5b7c>
   10fa4:	mov	fp, r0
   10fa8:	b	10f24 <__assert_fail@plt+0x68>
   10fac:	str	r4, [sp, #28]
   10fb0:	b	10f28 <__assert_fail@plt+0x6c>
   10fb4:	cmn	r0, #3
   10fb8:	bne	11020 <__assert_fail@plt+0x164>
   10fbc:	ldr	r1, [pc, #200]	; 1108c <__assert_fail@plt+0x1d0>
   10fc0:	ldr	r3, [pc, #200]	; 11090 <__assert_fail@plt+0x1d4>
   10fc4:	ldr	r2, [pc, #200]	; 11094 <__assert_fail@plt+0x1d8>
   10fc8:	str	r4, [sp, #4]
   10fcc:	ldr	r0, [r1]
   10fd0:	ldr	r3, [r3]
   10fd4:	ldr	r1, [pc, #188]	; 11098 <__assert_fail@plt+0x1dc>
   10fd8:	str	r2, [sp]
   10fdc:	ldr	r2, [pc, #184]	; 1109c <__assert_fail@plt+0x1e0>
   10fe0:	bl	1608c <__assert_fail@plt+0x51d0>
   10fe4:	mov	r0, #0
   10fe8:	bl	10dd8 <exit@plt>
   10fec:	mov	r2, #5
   10ff0:	ldr	r1, [pc, #168]	; 110a0 <__assert_fail@plt+0x1e4>
   10ff4:	mov	r0, #0
   10ff8:	bl	10d00 <dcgettext@plt>
   10ffc:	ldr	r3, [r4]
   11000:	mov	r6, r0
   11004:	ldr	r0, [r5, r3, lsl #2]
   11008:	bl	156b8 <__assert_fail@plt+0x47fc>
   1100c:	mov	r1, #0
   11010:	mov	r2, r6
   11014:	mov	r3, r0
   11018:	mov	r0, r1
   1101c:	bl	10d78 <error@plt>
   11020:	mov	r0, #1
   11024:	bl	111d4 <__assert_fail@plt+0x318>
   11028:	mov	r0, #0
   1102c:	bl	111d4 <__assert_fail@plt+0x318>
   11030:	ldr	r4, [pc, #108]	; 110a4 <__assert_fail@plt+0x1e8>
   11034:	ldr	r3, [r4]
   11038:	cmp	r6, r3
   1103c:	bne	10fec <__assert_fail@plt+0x130>
   11040:	ldr	r0, [sp, #28]
   11044:	bl	116b4 <__assert_fail@plt+0x7f8>
   11048:	ldr	r1, [pc, #88]	; 110a8 <__assert_fail@plt+0x1ec>
   1104c:	cmp	fp, r0
   11050:	subcc	r2, r0, fp
   11054:	movcs	r2, #1
   11058:	mov	r0, #1
   1105c:	bl	10e2c <__printf_chk@plt>
   11060:	mov	r0, #0
   11064:	add	sp, sp, #36	; 0x24
   11068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1106c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   11070:	andeq	r8, r1, r0, asr r6
   11074:	andeq	r8, r1, r8, lsr #11
   11078:	andeq	r8, r1, ip, ror #6
   1107c:	andeq	r0, r0, r1, lsl #2
   11080:	ldrdeq	r1, [r1], -r8
   11084:	andeq	r9, r2, r8, asr #2
   11088:	andeq	r8, r1, ip, ror r6
   1108c:	andeq	r9, r2, r4, asr #2
   11090:	andeq	r9, r2, r4, ror #1
   11094:	andeq	r8, r1, r8, ror #12
   11098:			; <UNDEFINED> instruction: 0x000183bc
   1109c:	andeq	r8, r1, r4, lsr #11
   110a0:	andeq	r8, r1, ip, lsl #13
   110a4:	andeq	r9, r2, r8, lsr r1
   110a8:	andeq	r8, r1, r0, lsr #13
   110ac:	mov	fp, #0
   110b0:	mov	lr, #0
   110b4:	pop	{r1}		; (ldr r1, [sp], #4)
   110b8:	mov	r2, sp
   110bc:	push	{r2}		; (str r2, [sp, #-4]!)
   110c0:	push	{r0}		; (str r0, [sp, #-4]!)
   110c4:	ldr	ip, [pc, #16]	; 110dc <__assert_fail@plt+0x220>
   110c8:	push	{ip}		; (str ip, [sp, #-4]!)
   110cc:	ldr	r0, [pc, #12]	; 110e0 <__assert_fail@plt+0x224>
   110d0:	ldr	r3, [pc, #12]	; 110e4 <__assert_fail@plt+0x228>
   110d4:	bl	10d9c <__libc_start_main@plt>
   110d8:	bl	10eb0 <abort@plt>
   110dc:	andeq	r8, r1, ip, lsl #6
   110e0:	andeq	r0, r1, r8, asr #29
   110e4:	andeq	r8, r1, ip, lsr #5
   110e8:	ldr	r3, [pc, #20]	; 11104 <__assert_fail@plt+0x248>
   110ec:	ldr	r2, [pc, #20]	; 11108 <__assert_fail@plt+0x24c>
   110f0:	add	r3, pc, r3
   110f4:	ldr	r2, [r3, r2]
   110f8:	cmp	r2, #0
   110fc:	bxeq	lr
   11100:	b	10db4 <__gmon_start__@plt>
   11104:	andeq	r7, r1, r8, lsl #30
   11108:	ldrdeq	r0, [r0], -r8
   1110c:	ldr	r3, [pc, #28]	; 11130 <__assert_fail@plt+0x274>
   11110:	ldr	r0, [pc, #28]	; 11134 <__assert_fail@plt+0x278>
   11114:	sub	r3, r3, r0
   11118:	cmp	r3, #6
   1111c:	bxls	lr
   11120:	ldr	r3, [pc, #16]	; 11138 <__assert_fail@plt+0x27c>
   11124:	cmp	r3, #0
   11128:	bxeq	lr
   1112c:	bx	r3
   11130:	andeq	r9, r2, pc, lsr #2
   11134:	andeq	r9, r2, ip, lsr #2
   11138:	andeq	r0, r0, r0
   1113c:	ldr	r1, [pc, #36]	; 11168 <__assert_fail@plt+0x2ac>
   11140:	ldr	r0, [pc, #36]	; 1116c <__assert_fail@plt+0x2b0>
   11144:	sub	r1, r1, r0
   11148:	asr	r1, r1, #2
   1114c:	add	r1, r1, r1, lsr #31
   11150:	asrs	r1, r1, #1
   11154:	bxeq	lr
   11158:	ldr	r3, [pc, #16]	; 11170 <__assert_fail@plt+0x2b4>
   1115c:	cmp	r3, #0
   11160:	bxeq	lr
   11164:	bx	r3
   11168:	andeq	r9, r2, ip, lsr #2
   1116c:	andeq	r9, r2, ip, lsr #2
   11170:	andeq	r0, r0, r0
   11174:	push	{r4, lr}
   11178:	ldr	r4, [pc, #24]	; 11198 <__assert_fail@plt+0x2dc>
   1117c:	ldrb	r3, [r4]
   11180:	cmp	r3, #0
   11184:	popne	{r4, pc}
   11188:	bl	1110c <__assert_fail@plt+0x250>
   1118c:	mov	r3, #1
   11190:	strb	r3, [r4]
   11194:	pop	{r4, pc}
   11198:	andeq	r9, r2, ip, asr #2
   1119c:	ldr	r0, [pc, #40]	; 111cc <__assert_fail@plt+0x310>
   111a0:	ldr	r3, [r0]
   111a4:	cmp	r3, #0
   111a8:	bne	111b0 <__assert_fail@plt+0x2f4>
   111ac:	b	1113c <__assert_fail@plt+0x280>
   111b0:	ldr	r3, [pc, #24]	; 111d0 <__assert_fail@plt+0x314>
   111b4:	cmp	r3, #0
   111b8:	beq	111ac <__assert_fail@plt+0x2f0>
   111bc:	push	{r4, lr}
   111c0:	blx	r3
   111c4:	pop	{r4, lr}
   111c8:	b	1113c <__assert_fail@plt+0x280>
   111cc:	andeq	r8, r2, r4, lsl pc
   111d0:	andeq	r0, r0, r0
   111d4:	subs	r6, r0, #0
   111d8:	push	{r7, lr}
   111dc:	sub	sp, sp, #56	; 0x38
   111e0:	beq	1121c <__assert_fail@plt+0x360>
   111e4:	ldr	r3, [pc, #636]	; 11468 <__assert_fail@plt+0x5ac>
   111e8:	mov	r2, #5
   111ec:	ldr	r1, [pc, #632]	; 1146c <__assert_fail@plt+0x5b0>
   111f0:	mov	r0, #0
   111f4:	ldr	r4, [r3]
   111f8:	bl	10d00 <dcgettext@plt>
   111fc:	ldr	r3, [pc, #620]	; 11470 <__assert_fail@plt+0x5b4>
   11200:	mov	r1, #1
   11204:	ldr	r3, [r3]
   11208:	mov	r2, r0
   1120c:	mov	r0, r4
   11210:	bl	10e44 <__fprintf_chk@plt>
   11214:	mov	r0, r6
   11218:	bl	10dd8 <exit@plt>
   1121c:	mov	r2, #5
   11220:	ldr	r1, [pc, #588]	; 11474 <__assert_fail@plt+0x5b8>
   11224:	bl	10d00 <dcgettext@plt>
   11228:	ldr	r3, [pc, #576]	; 11470 <__assert_fail@plt+0x5b4>
   1122c:	ldr	r7, [pc, #580]	; 11478 <__assert_fail@plt+0x5bc>
   11230:	ldr	r4, [pc, #580]	; 1147c <__assert_fail@plt+0x5c0>
   11234:	ldr	r2, [r3]
   11238:	mov	r1, r0
   1123c:	mov	r0, #1
   11240:	bl	10e2c <__printf_chk@plt>
   11244:	mov	r2, #5
   11248:	ldr	r1, [pc, #560]	; 11480 <__assert_fail@plt+0x5c4>
   1124c:	mov	r0, r6
   11250:	bl	10d00 <dcgettext@plt>
   11254:	ldr	r1, [r7]
   11258:	bl	10c70 <fputs_unlocked@plt>
   1125c:	mov	r2, #5
   11260:	ldr	r1, [pc, #540]	; 11484 <__assert_fail@plt+0x5c8>
   11264:	mov	r0, r6
   11268:	bl	10d00 <dcgettext@plt>
   1126c:	ldr	r1, [r7]
   11270:	bl	10c70 <fputs_unlocked@plt>
   11274:	mov	r2, #5
   11278:	ldr	r1, [pc, #520]	; 11488 <__assert_fail@plt+0x5cc>
   1127c:	mov	r0, r6
   11280:	bl	10d00 <dcgettext@plt>
   11284:	ldr	r1, [r7]
   11288:	bl	10c70 <fputs_unlocked@plt>
   1128c:	mov	r2, #5
   11290:	ldr	r1, [pc, #500]	; 1148c <__assert_fail@plt+0x5d0>
   11294:	mov	r0, r6
   11298:	bl	10d00 <dcgettext@plt>
   1129c:	ldr	r1, [r7]
   112a0:	bl	10c70 <fputs_unlocked@plt>
   112a4:	ldm	r4!, {r0, r1, r2, r3}
   112a8:	mov	lr, sp
   112ac:	stmia	lr!, {r0, r1, r2, r3}
   112b0:	ldm	r4!, {r0, r1, r2, r3}
   112b4:	ldr	ip, [sp]
   112b8:	stmia	lr!, {r0, r1, r2, r3}
   112bc:	cmp	ip, #0
   112c0:	ldm	r4!, {r0, r1, r2, r3}
   112c4:	stmia	lr!, {r0, r1, r2, r3}
   112c8:	ldm	r4, {r0, r1}
   112cc:	moveq	r4, sp
   112d0:	stm	lr, {r0, r1}
   112d4:	beq	11304 <__assert_fail@plt+0x448>
   112d8:	ldr	r5, [pc, #432]	; 11490 <__assert_fail@plt+0x5d4>
   112dc:	mov	r4, sp
   112e0:	b	112f0 <__assert_fail@plt+0x434>
   112e4:	ldr	ip, [r4, #8]!
   112e8:	cmp	ip, #0
   112ec:	beq	11304 <__assert_fail@plt+0x448>
   112f0:	mov	r1, ip
   112f4:	mov	r0, r5
   112f8:	bl	10c88 <strcmp@plt>
   112fc:	cmp	r0, #0
   11300:	bne	112e4 <__assert_fail@plt+0x428>
   11304:	ldr	r4, [r4, #4]
   11308:	mov	r2, #5
   1130c:	cmp	r4, #0
   11310:	ldr	r1, [pc, #380]	; 11494 <__assert_fail@plt+0x5d8>
   11314:	beq	113bc <__assert_fail@plt+0x500>
   11318:	mov	r0, #0
   1131c:	bl	10d00 <dcgettext@plt>
   11320:	ldr	r3, [pc, #368]	; 11498 <__assert_fail@plt+0x5dc>
   11324:	ldr	r2, [pc, #368]	; 1149c <__assert_fail@plt+0x5e0>
   11328:	mov	r1, r0
   1132c:	mov	r0, #1
   11330:	bl	10e2c <__printf_chk@plt>
   11334:	mov	r1, #0
   11338:	mov	r0, #5
   1133c:	bl	10e68 <setlocale@plt>
   11340:	cmp	r0, #0
   11344:	ldreq	r5, [pc, #324]	; 11490 <__assert_fail@plt+0x5d4>
   11348:	beq	11364 <__assert_fail@plt+0x4a8>
   1134c:	mov	r2, #3
   11350:	ldr	r1, [pc, #328]	; 114a0 <__assert_fail@plt+0x5e4>
   11354:	bl	10ea4 <strncmp@plt>
   11358:	ldr	r5, [pc, #304]	; 11490 <__assert_fail@plt+0x5d4>
   1135c:	cmp	r0, #0
   11360:	bne	1144c <__assert_fail@plt+0x590>
   11364:	mov	r2, #5
   11368:	ldr	r1, [pc, #308]	; 114a4 <__assert_fail@plt+0x5e8>
   1136c:	mov	r0, #0
   11370:	bl	10d00 <dcgettext@plt>
   11374:	ldr	r3, [pc, #276]	; 11490 <__assert_fail@plt+0x5d4>
   11378:	ldr	r2, [pc, #280]	; 11498 <__assert_fail@plt+0x5dc>
   1137c:	mov	r1, r0
   11380:	mov	r0, #1
   11384:	bl	10e2c <__printf_chk@plt>
   11388:	mov	r2, #5
   1138c:	ldr	r1, [pc, #276]	; 114a8 <__assert_fail@plt+0x5ec>
   11390:	mov	r0, #0
   11394:	bl	10d00 <dcgettext@plt>
   11398:	ldr	r2, [pc, #268]	; 114ac <__assert_fail@plt+0x5f0>
   1139c:	cmp	r4, r5
   113a0:	ldr	r3, [pc, #264]	; 114b0 <__assert_fail@plt+0x5f4>
   113a4:	movne	r3, r2
   113a8:	mov	r1, r0
   113ac:	mov	r2, r4
   113b0:	mov	r0, #1
   113b4:	bl	10e2c <__printf_chk@plt>
   113b8:	b	11214 <__assert_fail@plt+0x358>
   113bc:	mov	r0, r4
   113c0:	bl	10d00 <dcgettext@plt>
   113c4:	ldr	r3, [pc, #204]	; 11498 <__assert_fail@plt+0x5dc>
   113c8:	ldr	r2, [pc, #204]	; 1149c <__assert_fail@plt+0x5e0>
   113cc:	mov	r1, r0
   113d0:	mov	r0, #1
   113d4:	bl	10e2c <__printf_chk@plt>
   113d8:	mov	r1, r4
   113dc:	mov	r0, #5
   113e0:	bl	10e68 <setlocale@plt>
   113e4:	cmp	r0, #0
   113e8:	beq	11400 <__assert_fail@plt+0x544>
   113ec:	mov	r2, #3
   113f0:	ldr	r1, [pc, #168]	; 114a0 <__assert_fail@plt+0x5e4>
   113f4:	bl	10ea4 <strncmp@plt>
   113f8:	cmp	r0, #0
   113fc:	bne	11444 <__assert_fail@plt+0x588>
   11400:	mov	r2, #5
   11404:	ldr	r1, [pc, #152]	; 114a4 <__assert_fail@plt+0x5e8>
   11408:	mov	r0, #0
   1140c:	bl	10d00 <dcgettext@plt>
   11410:	ldr	r3, [pc, #120]	; 11490 <__assert_fail@plt+0x5d4>
   11414:	ldr	r2, [pc, #124]	; 11498 <__assert_fail@plt+0x5dc>
   11418:	mov	r4, r3
   1141c:	mov	r1, r0
   11420:	mov	r0, #1
   11424:	bl	10e2c <__printf_chk@plt>
   11428:	ldr	r1, [pc, #120]	; 114a8 <__assert_fail@plt+0x5ec>
   1142c:	mov	r2, #5
   11430:	mov	r0, #0
   11434:	bl	10d00 <dcgettext@plt>
   11438:	ldr	r3, [pc, #112]	; 114b0 <__assert_fail@plt+0x5f4>
   1143c:	mov	r1, r0
   11440:	b	113ac <__assert_fail@plt+0x4f0>
   11444:	ldr	r5, [pc, #68]	; 11490 <__assert_fail@plt+0x5d4>
   11448:	mov	r4, r5
   1144c:	mov	r2, #5
   11450:	ldr	r1, [pc, #92]	; 114b4 <__assert_fail@plt+0x5f8>
   11454:	mov	r0, #0
   11458:	bl	10d00 <dcgettext@plt>
   1145c:	ldr	r1, [r7]
   11460:	bl	10c70 <fputs_unlocked@plt>
   11464:	b	11364 <__assert_fail@plt+0x4a8>
   11468:	andeq	r9, r2, r0, asr #2
   1146c:	andeq	r8, r1, r4, asr #7
   11470:	andeq	r9, r2, r8, asr r1
   11474:	andeq	r8, r1, ip, ror #7
   11478:	andeq	r9, r2, r4, asr #2
   1147c:	andeq	r8, r1, r4, lsr r3
   11480:	andeq	r8, r1, r4, lsl #8
   11484:	andeq	r8, r1, r4, lsl #9
   11488:	strdeq	r8, [r1], -ip
   1148c:	andeq	r8, r1, ip, lsr #10
   11490:			; <UNDEFINED> instruction: 0x000183bc
   11494:	andeq	r8, r1, r4, ror #10
   11498:	andeq	r8, r1, ip, ror r5
   1149c:	andeq	r8, r1, r4, lsr #11
   114a0:			; <UNDEFINED> instruction: 0x000185b4
   114a4:	andeq	r8, r1, r0, lsl #12
   114a8:	andeq	r8, r1, ip, lsl r6
   114ac:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   114b0:			; <UNDEFINED> instruction: 0x000186b0
   114b4:			; <UNDEFINED> instruction: 0x000185b8
   114b8:	ldr	r3, [pc, #4]	; 114c4 <__assert_fail@plt+0x608>
   114bc:	str	r0, [r3]
   114c0:	bx	lr
   114c4:	andeq	r9, r2, r0, asr r1
   114c8:	ldr	r3, [pc, #4]	; 114d4 <__assert_fail@plt+0x618>
   114cc:	strb	r0, [r3, #4]
   114d0:	bx	lr
   114d4:	andeq	r9, r2, r0, asr r1
   114d8:	ldr	r3, [pc, #192]	; 115a0 <__assert_fail@plt+0x6e4>
   114dc:	push	{r4, r5, r6, lr}
   114e0:	sub	sp, sp, #8
   114e4:	ldr	r0, [r3]
   114e8:	bl	17a14 <__assert_fail@plt+0x6b58>
   114ec:	cmp	r0, #0
   114f0:	beq	11514 <__assert_fail@plt+0x658>
   114f4:	ldr	r4, [pc, #168]	; 115a4 <__assert_fail@plt+0x6e8>
   114f8:	ldrb	r3, [r4, #4]
   114fc:	cmp	r3, #0
   11500:	beq	11530 <__assert_fail@plt+0x674>
   11504:	bl	10e08 <__errno_location@plt>
   11508:	ldr	r3, [r0]
   1150c:	cmp	r3, #32
   11510:	bne	11530 <__assert_fail@plt+0x674>
   11514:	ldr	r3, [pc, #140]	; 115a8 <__assert_fail@plt+0x6ec>
   11518:	ldr	r0, [r3]
   1151c:	bl	17a14 <__assert_fail@plt+0x6b58>
   11520:	cmp	r0, #0
   11524:	bne	11578 <__assert_fail@plt+0x6bc>
   11528:	add	sp, sp, #8
   1152c:	pop	{r4, r5, r6, pc}
   11530:	mov	r2, #5
   11534:	ldr	r1, [pc, #112]	; 115ac <__assert_fail@plt+0x6f0>
   11538:	mov	r0, #0
   1153c:	bl	10d00 <dcgettext@plt>
   11540:	ldr	r4, [r4]
   11544:	cmp	r4, #0
   11548:	mov	r5, r0
   1154c:	beq	11584 <__assert_fail@plt+0x6c8>
   11550:	bl	10e08 <__errno_location@plt>
   11554:	ldr	r6, [r0]
   11558:	mov	r0, r4
   1155c:	bl	14458 <__assert_fail@plt+0x359c>
   11560:	mov	r1, r6
   11564:	str	r5, [sp]
   11568:	ldr	r2, [pc, #64]	; 115b0 <__assert_fail@plt+0x6f4>
   1156c:	mov	r3, r0
   11570:	mov	r0, #0
   11574:	bl	10d78 <error@plt>
   11578:	ldr	r3, [pc, #52]	; 115b4 <__assert_fail@plt+0x6f8>
   1157c:	ldr	r0, [r3]
   11580:	bl	10cac <_exit@plt>
   11584:	bl	10e08 <__errno_location@plt>
   11588:	mov	r3, r5
   1158c:	ldr	r2, [pc, #36]	; 115b8 <__assert_fail@plt+0x6fc>
   11590:	ldr	r1, [r0]
   11594:	mov	r0, r4
   11598:	bl	10d78 <error@plt>
   1159c:	b	11578 <__assert_fail@plt+0x6bc>
   115a0:	andeq	r9, r2, r4, asr #2
   115a4:	andeq	r9, r2, r0, asr r1
   115a8:	andeq	r9, r2, r0, asr #2
   115ac:	andeq	r8, r1, r0, asr #14
   115b0:	andeq	r8, r1, ip, asr #14
   115b4:	andeq	r9, r2, r8, ror #1
   115b8:	andeq	r8, r1, r0, asr r7
   115bc:	cmp	r0, #0
   115c0:	bxeq	lr
   115c4:	ldrb	r3, [r0]
   115c8:	cmp	r3, #0
   115cc:	beq	1167c <__assert_fail@plt+0x7c0>
   115d0:	sub	r2, r3, #9
   115d4:	cmp	r2, #23
   115d8:	bhi	1160c <__assert_fail@plt+0x750>
   115dc:	mov	ip, #1
   115e0:	ldr	r1, [pc, #200]	; 116b0 <__assert_fail@plt+0x7f4>
   115e4:	ands	r2, r1, ip, lsl r2
   115e8:	beq	1160c <__assert_fail@plt+0x750>
   115ec:	ldrb	r3, [r0, #1]!
   115f0:	cmp	r3, #0
   115f4:	sub	r2, r3, #9
   115f8:	beq	1167c <__assert_fail@plt+0x7c0>
   115fc:	cmp	r2, #23
   11600:	bhi	1160c <__assert_fail@plt+0x750>
   11604:	ands	r2, r1, ip, lsl r2
   11608:	bne	115ec <__assert_fail@plt+0x730>
   1160c:	sub	r3, r3, #48	; 0x30
   11610:	cmp	r3, #9
   11614:	bhi	1167c <__assert_fail@plt+0x7c0>
   11618:	push	{lr}		; (str lr, [sp, #-4]!)
   1161c:	sub	sp, sp, #12
   11620:	add	r1, sp, #8
   11624:	mov	r3, #0
   11628:	str	r3, [r1, #-4]!
   1162c:	mov	r2, #10
   11630:	bl	10de4 <strtoul@plt>
   11634:	ldr	r3, [sp, #4]
   11638:	cmp	r3, #0
   1163c:	beq	11670 <__assert_fail@plt+0x7b4>
   11640:	ldrb	r2, [r3]
   11644:	cmp	r2, #0
   11648:	beq	11674 <__assert_fail@plt+0x7b8>
   1164c:	sub	r1, r2, #9
   11650:	cmp	r1, #23
   11654:	bhi	11668 <__assert_fail@plt+0x7ac>
   11658:	mov	lr, #1
   1165c:	ldr	ip, [pc, #76]	; 116b0 <__assert_fail@plt+0x7f4>
   11660:	ands	r1, ip, lr, lsl r1
   11664:	bne	11684 <__assert_fail@plt+0x7c8>
   11668:	cmp	r2, #44	; 0x2c
   1166c:	beq	11674 <__assert_fail@plt+0x7b8>
   11670:	mov	r0, #0
   11674:	add	sp, sp, #12
   11678:	pop	{pc}		; (ldr pc, [sp], #4)
   1167c:	mov	r0, #0
   11680:	bx	lr
   11684:	add	r3, r3, #1
   11688:	str	r3, [sp, #4]
   1168c:	ldrb	r2, [r3]
   11690:	cmp	r2, #0
   11694:	sub	r1, r2, #9
   11698:	beq	11674 <__assert_fail@plt+0x7b8>
   1169c:	cmp	r1, #23
   116a0:	bhi	11668 <__assert_fail@plt+0x7ac>
   116a4:	ands	r1, ip, lr, lsl r1
   116a8:	bne	11684 <__assert_fail@plt+0x7c8>
   116ac:	b	11668 <__assert_fail@plt+0x7ac>
   116b0:	addeq	r0, r0, pc, lsl r0
   116b4:	cmp	r0, #2
   116b8:	push	{r4, r5, lr}
   116bc:	sub	sp, sp, #132	; 0x84
   116c0:	beq	11700 <__assert_fail@plt+0x844>
   116c4:	cmp	r0, #1
   116c8:	beq	117b8 <__assert_fail@plt+0x8fc>
   116cc:	mov	r0, #83	; 0x53
   116d0:	bl	10d0c <sysconf@plt>
   116d4:	sub	r3, r0, #1
   116d8:	cmp	r3, #1
   116dc:	mov	r4, r0
   116e0:	bls	11798 <__assert_fail@plt+0x8dc>
   116e4:	cmp	r4, #0
   116e8:	ble	11760 <__assert_fail@plt+0x8a4>
   116ec:	mvn	r3, #0
   116f0:	cmp	r0, r3
   116f4:	movcs	r0, r3
   116f8:	add	sp, sp, #132	; 0x84
   116fc:	pop	{r4, r5, pc}
   11700:	ldr	r0, [pc, #220]	; 117e4 <__assert_fail@plt+0x928>
   11704:	bl	10d84 <getenv@plt>
   11708:	bl	115bc <__assert_fail@plt+0x700>
   1170c:	mov	r5, r0
   11710:	ldr	r0, [pc, #208]	; 117e8 <__assert_fail@plt+0x92c>
   11714:	bl	10d84 <getenv@plt>
   11718:	bl	115bc <__assert_fail@plt+0x700>
   1171c:	subs	r4, r0, #0
   11720:	mvneq	r4, #0
   11724:	cmp	r5, #0
   11728:	bne	1176c <__assert_fail@plt+0x8b0>
   1172c:	mov	r2, sp
   11730:	mov	r1, #128	; 0x80
   11734:	mov	r0, #0
   11738:	bl	10e8c <sched_getaffinity@plt>
   1173c:	cmp	r0, #0
   11740:	beq	11780 <__assert_fail@plt+0x8c4>
   11744:	mov	r0, #84	; 0x54
   11748:	bl	10d0c <sysconf@plt>
   1174c:	cmp	r0, #0
   11750:	ble	11760 <__assert_fail@plt+0x8a4>
   11754:	cmp	r0, r4
   11758:	movcs	r0, r4
   1175c:	b	116f8 <__assert_fail@plt+0x83c>
   11760:	mov	r0, #1
   11764:	add	sp, sp, #132	; 0x84
   11768:	pop	{r4, r5, pc}
   1176c:	cmp	r4, r5
   11770:	movcc	r0, r4
   11774:	movcs	r0, r5
   11778:	add	sp, sp, #132	; 0x84
   1177c:	pop	{r4, r5, pc}
   11780:	mov	r1, sp
   11784:	mov	r0, #128	; 0x80
   11788:	bl	10cdc <__sched_cpucount@plt>
   1178c:	cmp	r0, #0
   11790:	beq	11744 <__assert_fail@plt+0x888>
   11794:	b	11754 <__assert_fail@plt+0x898>
   11798:	mov	r2, sp
   1179c:	mov	r1, #128	; 0x80
   117a0:	mov	r0, #0
   117a4:	bl	10e8c <sched_getaffinity@plt>
   117a8:	cmp	r0, #0
   117ac:	beq	117c0 <__assert_fail@plt+0x904>
   117b0:	mov	r0, r4
   117b4:	b	116ec <__assert_fail@plt+0x830>
   117b8:	mvn	r4, #0
   117bc:	b	1172c <__assert_fail@plt+0x870>
   117c0:	mov	r1, sp
   117c4:	mov	r0, #128	; 0x80
   117c8:	bl	10cdc <__sched_cpucount@plt>
   117cc:	cmp	r0, #0
   117d0:	beq	117b0 <__assert_fail@plt+0x8f4>
   117d4:	cmp	r4, r0
   117d8:	movcc	r4, r0
   117dc:	bcc	116e4 <__assert_fail@plt+0x828>
   117e0:	b	117b0 <__assert_fail@plt+0x8f4>
   117e4:	andeq	r8, r1, r4, asr r7
   117e8:	andeq	r8, r1, r4, ror #14
   117ec:	push	{r4, r5, r6, lr}
   117f0:	subs	r4, r0, #0
   117f4:	beq	11868 <__assert_fail@plt+0x9ac>
   117f8:	mov	r1, #47	; 0x2f
   117fc:	bl	10e74 <strrchr@plt>
   11800:	subs	r5, r0, #0
   11804:	beq	11854 <__assert_fail@plt+0x998>
   11808:	add	r6, r5, #1
   1180c:	sub	r3, r6, r4
   11810:	cmp	r3, #6
   11814:	ble	11854 <__assert_fail@plt+0x998>
   11818:	mov	r2, #7
   1181c:	ldr	r1, [pc, #96]	; 11884 <__assert_fail@plt+0x9c8>
   11820:	sub	r0, r5, #6
   11824:	bl	10ea4 <strncmp@plt>
   11828:	cmp	r0, #0
   1182c:	bne	11854 <__assert_fail@plt+0x998>
   11830:	mov	r2, #3
   11834:	ldr	r1, [pc, #76]	; 11888 <__assert_fail@plt+0x9cc>
   11838:	mov	r0, r6
   1183c:	bl	10ea4 <strncmp@plt>
   11840:	cmp	r0, #0
   11844:	movne	r4, r6
   11848:	ldreq	r3, [pc, #60]	; 1188c <__assert_fail@plt+0x9d0>
   1184c:	addeq	r4, r5, #4
   11850:	streq	r4, [r3]
   11854:	ldr	r2, [pc, #52]	; 11890 <__assert_fail@plt+0x9d4>
   11858:	ldr	r3, [pc, #52]	; 11894 <__assert_fail@plt+0x9d8>
   1185c:	str	r4, [r2]
   11860:	str	r4, [r3]
   11864:	pop	{r4, r5, r6, pc}
   11868:	ldr	r3, [pc, #40]	; 11898 <__assert_fail@plt+0x9dc>
   1186c:	mov	r2, #55	; 0x37
   11870:	mov	r1, #1
   11874:	ldr	r3, [r3]
   11878:	ldr	r0, [pc, #28]	; 1189c <__assert_fail@plt+0x9e0>
   1187c:	bl	10d3c <fwrite@plt>
   11880:	bl	10eb0 <abort@plt>
   11884:			; <UNDEFINED> instruction: 0x000187b0
   11888:			; <UNDEFINED> instruction: 0x000187b8
   1188c:	andeq	r9, r2, r0, lsr r1
   11890:	andeq	r9, r2, r8, asr r1
   11894:	andeq	r9, r2, r4, lsr r1
   11898:	andeq	r9, r2, r0, asr #2
   1189c:	andeq	r8, r1, r8, ror r7
   118a0:	push	{r4, r5, r6, lr}
   118a4:	mov	r4, r0
   118a8:	mov	r5, r1
   118ac:	bl	17c88 <__assert_fail@plt+0x6dcc>
   118b0:	ldrb	r3, [r0]
   118b4:	bic	r3, r3, #32
   118b8:	cmp	r3, #85	; 0x55
   118bc:	bne	1191c <__assert_fail@plt+0xa60>
   118c0:	ldrb	r3, [r0, #1]
   118c4:	bic	r3, r3, #32
   118c8:	cmp	r3, #84	; 0x54
   118cc:	bne	11958 <__assert_fail@plt+0xa9c>
   118d0:	ldrb	r3, [r0, #2]
   118d4:	bic	r3, r3, #32
   118d8:	cmp	r3, #70	; 0x46
   118dc:	bne	11958 <__assert_fail@plt+0xa9c>
   118e0:	ldrb	r3, [r0, #3]
   118e4:	cmp	r3, #45	; 0x2d
   118e8:	bne	11958 <__assert_fail@plt+0xa9c>
   118ec:	ldrb	r3, [r0, #4]
   118f0:	cmp	r3, #56	; 0x38
   118f4:	bne	11958 <__assert_fail@plt+0xa9c>
   118f8:	ldrb	r3, [r0, #5]
   118fc:	cmp	r3, #0
   11900:	bne	11958 <__assert_fail@plt+0xa9c>
   11904:	ldrb	r2, [r4]
   11908:	ldr	r3, [pc, #152]	; 119a8 <__assert_fail@plt+0xaec>
   1190c:	ldr	r0, [pc, #152]	; 119ac <__assert_fail@plt+0xaf0>
   11910:	cmp	r2, #96	; 0x60
   11914:	movne	r0, r3
   11918:	pop	{r4, r5, r6, pc}
   1191c:	cmp	r3, #71	; 0x47
   11920:	bne	11958 <__assert_fail@plt+0xa9c>
   11924:	ldrb	r3, [r0, #1]
   11928:	bic	r3, r3, #32
   1192c:	cmp	r3, #66	; 0x42
   11930:	bne	11958 <__assert_fail@plt+0xa9c>
   11934:	ldrb	r3, [r0, #2]
   11938:	cmp	r3, #49	; 0x31
   1193c:	bne	11958 <__assert_fail@plt+0xa9c>
   11940:	ldrb	r3, [r0, #3]
   11944:	cmp	r3, #56	; 0x38
   11948:	bne	11958 <__assert_fail@plt+0xa9c>
   1194c:	ldrb	r3, [r0, #4]
   11950:	cmp	r3, #48	; 0x30
   11954:	beq	1196c <__assert_fail@plt+0xab0>
   11958:	ldr	r3, [pc, #80]	; 119b0 <__assert_fail@plt+0xaf4>
   1195c:	cmp	r5, #9
   11960:	ldr	r0, [pc, #76]	; 119b4 <__assert_fail@plt+0xaf8>
   11964:	movne	r0, r3
   11968:	pop	{r4, r5, r6, pc}
   1196c:	ldrb	r3, [r0, #5]
   11970:	cmp	r3, #51	; 0x33
   11974:	bne	11958 <__assert_fail@plt+0xa9c>
   11978:	ldrb	r3, [r0, #6]
   1197c:	cmp	r3, #48	; 0x30
   11980:	bne	11958 <__assert_fail@plt+0xa9c>
   11984:	ldrb	r3, [r0, #7]
   11988:	cmp	r3, #0
   1198c:	bne	11958 <__assert_fail@plt+0xa9c>
   11990:	ldrb	r2, [r4]
   11994:	ldr	r3, [pc, #28]	; 119b8 <__assert_fail@plt+0xafc>
   11998:	ldr	r0, [pc, #28]	; 119bc <__assert_fail@plt+0xb00>
   1199c:	cmp	r2, #96	; 0x60
   119a0:	movne	r0, r3
   119a4:	pop	{r4, r5, r6, pc}
   119a8:	andeq	r8, r1, r4, lsl r8
   119ac:	andeq	r8, r1, r0, lsl r8
   119b0:	andeq	r8, r1, r4, lsr #16
   119b4:	andeq	r8, r1, r0, lsr #16
   119b8:	andeq	r8, r1, ip, lsl r8
   119bc:	andeq	r8, r1, r8, lsl r8
   119c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119c4:	sub	sp, sp, #140	; 0x8c
   119c8:	mov	r9, r1
   119cc:	str	r3, [sp, #24]
   119d0:	mov	r3, #1
   119d4:	mov	sl, r0
   119d8:	str	r2, [sp, #44]	; 0x2c
   119dc:	str	r3, [sp, #28]
   119e0:	bl	10d54 <__ctype_get_mb_cur_max@plt>
   119e4:	ldr	r3, [sp, #180]	; 0xb4
   119e8:	mov	fp, r9
   119ec:	mov	r9, sl
   119f0:	lsr	r3, r3, #1
   119f4:	and	r3, r3, #1
   119f8:	str	r3, [sp, #40]	; 0x28
   119fc:	ldr	r3, [sp, #180]	; 0xb4
   11a00:	mov	r2, #0
   11a04:	and	r3, r3, #4
   11a08:	str	r3, [sp, #100]	; 0x64
   11a0c:	ldr	r3, [sp, #180]	; 0xb4
   11a10:	str	r2, [sp, #76]	; 0x4c
   11a14:	and	r3, r3, #1
   11a18:	str	r3, [sp, #96]	; 0x60
   11a1c:	str	r2, [sp, #36]	; 0x24
   11a20:	str	r2, [sp, #56]	; 0x38
   11a24:	str	r2, [sp, #68]	; 0x44
   11a28:	str	r2, [sp, #72]	; 0x48
   11a2c:	str	r2, [sp, #84]	; 0x54
   11a30:	str	r0, [sp, #80]	; 0x50
   11a34:	ldr	r3, [sp, #176]	; 0xb0
   11a38:	cmp	r3, #10
   11a3c:	ldrls	pc, [pc, r3, lsl #2]
   11a40:	b	12c18 <__assert_fail@plt+0x1d5c>
   11a44:	andeq	r1, r1, r0, ror sl
   11a48:	muleq	r1, r0, sp
   11a4c:	andeq	r1, r1, r8, ror #29
   11a50:	andeq	r1, r1, r4, asr #27
   11a54:	andeq	r1, r1, ip, lsr pc
   11a58:	andeq	r1, r1, ip, lsl pc
   11a5c:	andeq	r1, r1, r4, ror #27
   11a60:	andeq	r1, r1, r8, lsl #28
   11a64:	andeq	r1, r1, r0, lsr lr
   11a68:	andeq	r1, r1, r0, lsr lr
   11a6c:	andeq	r1, r1, r0, lsr lr
   11a70:	mov	r3, #0
   11a74:	ldr	r1, [sp, #56]	; 0x38
   11a78:	ldr	r2, [sp, #176]	; 0xb0
   11a7c:	ldr	lr, [sp, #176]	; 0xb0
   11a80:	mov	r8, r3
   11a84:	mov	ip, r3
   11a88:	str	r3, [sp, #40]	; 0x28
   11a8c:	mov	r3, r1
   11a90:	cmp	r2, #2
   11a94:	moveq	r3, #0
   11a98:	andne	r3, r3, #1
   11a9c:	mov	r0, r3
   11aa0:	str	r3, [sp, #92]	; 0x5c
   11aa4:	ldr	r3, [sp, #68]	; 0x44
   11aa8:	sub	lr, lr, #2
   11aac:	adds	r2, r3, #0
   11ab0:	movne	r2, #1
   11ab4:	and	r3, r1, ip
   11ab8:	and	r3, r2, r3
   11abc:	clz	lr, lr
   11ac0:	str	r3, [sp, #88]	; 0x58
   11ac4:	lsr	lr, lr, #5
   11ac8:	mov	r3, ip
   11acc:	and	r3, r3, lr
   11ad0:	mov	sl, #0
   11ad4:	and	r0, r2, r0
   11ad8:	str	r3, [sp, #64]	; 0x40
   11adc:	eor	r3, r1, #1
   11ae0:	str	lr, [sp, #52]	; 0x34
   11ae4:	str	r0, [sp, #48]	; 0x30
   11ae8:	str	r3, [sp, #60]	; 0x3c
   11aec:	ldr	r3, [sp, #24]
   11af0:	cmn	r3, #1
   11af4:	beq	12024 <__assert_fail@plt+0x1168>
   11af8:	subs	r7, r3, sl
   11afc:	movne	r7, #1
   11b00:	cmp	r7, #0
   11b04:	beq	1203c <__assert_fail@plt+0x1180>
   11b08:	ldr	r3, [sp, #48]	; 0x30
   11b0c:	cmp	r3, #0
   11b10:	beq	123a8 <__assert_fail@plt+0x14ec>
   11b14:	ldr	r2, [sp, #68]	; 0x44
   11b18:	ldr	r1, [sp, #24]
   11b1c:	cmp	r2, #1
   11b20:	mov	r3, r2
   11b24:	movls	r3, #0
   11b28:	movhi	r3, #1
   11b2c:	cmn	r1, #1
   11b30:	movne	r3, #0
   11b34:	cmp	r3, #0
   11b38:	add	r4, sl, r2
   11b3c:	beq	11b4c <__assert_fail@plt+0xc90>
   11b40:	ldr	r0, [sp, #44]	; 0x2c
   11b44:	bl	10df0 <strlen@plt>
   11b48:	str	r0, [sp, #24]
   11b4c:	ldr	r3, [sp, #24]
   11b50:	cmp	r3, r4
   11b54:	ldr	r3, [sp, #44]	; 0x2c
   11b58:	add	r5, r3, sl
   11b5c:	bcc	123b0 <__assert_fail@plt+0x14f4>
   11b60:	mov	r0, r5
   11b64:	ldr	r2, [sp, #68]	; 0x44
   11b68:	ldr	r1, [sp, #72]	; 0x48
   11b6c:	bl	10ce8 <memcmp@plt>
   11b70:	cmp	r0, #0
   11b74:	bne	123b0 <__assert_fail@plt+0x14f4>
   11b78:	ldr	r3, [sp, #40]	; 0x28
   11b7c:	cmp	r3, #0
   11b80:	bne	12d6c <__assert_fail@plt+0x1eb0>
   11b84:	ldrb	r4, [r5]
   11b88:	cmp	r4, #126	; 0x7e
   11b8c:	ldrls	pc, [pc, r4, lsl #2]
   11b90:	b	12ca8 <__assert_fail@plt+0x1dec>
   11b94:	andeq	r2, r1, r8, ror #4
   11b98:	andeq	r2, r1, r8, lsr #25
   11b9c:	andeq	r2, r1, r8, lsr #25
   11ba0:	andeq	r2, r1, r8, lsr #25
   11ba4:	andeq	r2, r1, r8, lsr #25
   11ba8:	andeq	r2, r1, r8, lsr #25
   11bac:	andeq	r2, r1, r8, lsr #25
   11bb0:	andeq	r2, r1, r4, asr r2
   11bb4:	andeq	r2, r1, r0, asr #4
   11bb8:	andeq	r2, r1, ip, lsl r2
   11bbc:	strdeq	r2, [r1], -ip
   11bc0:	andeq	r2, r1, ip, lsr #4
   11bc4:	andeq	r2, r1, r4, ror #2
   11bc8:	muleq	r1, r8, r3
   11bcc:	andeq	r2, r1, r8, lsr #25
   11bd0:	andeq	r2, r1, r8, lsr #25
   11bd4:	andeq	r2, r1, r8, lsr #25
   11bd8:	andeq	r2, r1, r8, lsr #25
   11bdc:	andeq	r2, r1, r8, lsr #25
   11be0:	andeq	r2, r1, r8, lsr #25
   11be4:	andeq	r2, r1, r8, lsr #25
   11be8:	andeq	r2, r1, r8, lsr #25
   11bec:	andeq	r2, r1, r8, lsr #25
   11bf0:	andeq	r2, r1, r8, lsr #25
   11bf4:	andeq	r2, r1, r8, lsr #25
   11bf8:	andeq	r2, r1, r8, lsr #25
   11bfc:	andeq	r2, r1, r8, lsr #25
   11c00:	andeq	r2, r1, r8, lsr #25
   11c04:	andeq	r2, r1, r8, lsr #25
   11c08:	andeq	r2, r1, r8, lsr #25
   11c0c:	andeq	r2, r1, r8, lsr #25
   11c10:	andeq	r2, r1, r8, lsr #25
   11c14:	andeq	r2, r1, r8, lsl #7
   11c18:	andeq	r2, r1, r8, ror #6
   11c1c:	andeq	r2, r1, r8, ror #6
   11c20:	andeq	r2, r1, r8, asr #6
   11c24:	andeq	r2, r1, r8, ror #6
   11c28:	andeq	r2, r1, r4, asr r1
   11c2c:	andeq	r2, r1, r8, ror #6
   11c30:	andeq	r2, r1, r0, lsr r1
   11c34:	andeq	r2, r1, r8, ror #6
   11c38:	andeq	r2, r1, r8, ror #6
   11c3c:	andeq	r2, r1, r8, ror #6
   11c40:	andeq	r2, r1, r4, asr r1
   11c44:	andeq	r2, r1, r4, asr r1
   11c48:	andeq	r2, r1, r4, asr r1
   11c4c:	andeq	r2, r1, r4, asr r1
   11c50:	andeq	r2, r1, r4, asr r1
   11c54:	andeq	r2, r1, r4, asr r1
   11c58:	andeq	r2, r1, r4, asr r1
   11c5c:	andeq	r2, r1, r4, asr r1
   11c60:	andeq	r2, r1, r4, asr r1
   11c64:	andeq	r2, r1, r4, asr r1
   11c68:	andeq	r2, r1, r4, asr r1
   11c6c:	andeq	r2, r1, r4, asr r1
   11c70:	andeq	r2, r1, r4, asr r1
   11c74:	andeq	r2, r1, r4, asr r1
   11c78:	andeq	r2, r1, r4, asr r1
   11c7c:	andeq	r2, r1, r4, asr r1
   11c80:	andeq	r2, r1, r8, ror #6
   11c84:	andeq	r2, r1, r8, ror #6
   11c88:	andeq	r2, r1, r8, ror #6
   11c8c:	andeq	r2, r1, r8, ror #6
   11c90:	andeq	r2, r1, r0, ror #1
   11c94:	andeq	r2, r1, r8, lsr #25
   11c98:	andeq	r2, r1, r4, asr r1
   11c9c:	andeq	r2, r1, r4, asr r1
   11ca0:	andeq	r2, r1, r4, asr r1
   11ca4:	andeq	r2, r1, r4, asr r1
   11ca8:	andeq	r2, r1, r4, asr r1
   11cac:	andeq	r2, r1, r4, asr r1
   11cb0:	andeq	r2, r1, r4, asr r1
   11cb4:	andeq	r2, r1, r4, asr r1
   11cb8:	andeq	r2, r1, r4, asr r1
   11cbc:	andeq	r2, r1, r4, asr r1
   11cc0:	andeq	r2, r1, r4, asr r1
   11cc4:	andeq	r2, r1, r4, asr r1
   11cc8:	andeq	r2, r1, r4, asr r1
   11ccc:	andeq	r2, r1, r4, asr r1
   11cd0:	andeq	r2, r1, r4, asr r1
   11cd4:	andeq	r2, r1, r4, asr r1
   11cd8:	andeq	r2, r1, r4, asr r1
   11cdc:	andeq	r2, r1, r4, asr r1
   11ce0:	andeq	r2, r1, r4, asr r1
   11ce4:	andeq	r2, r1, r4, asr r1
   11ce8:	andeq	r2, r1, r4, asr r1
   11cec:	andeq	r2, r1, r4, asr r1
   11cf0:	andeq	r2, r1, r4, asr r1
   11cf4:	andeq	r2, r1, r4, asr r1
   11cf8:	andeq	r2, r1, r4, asr r1
   11cfc:	andeq	r2, r1, r4, asr r1
   11d00:	andeq	r2, r1, r8, ror #6
   11d04:	andeq	r2, r1, ip, lsr #1
   11d08:	andeq	r2, r1, r4, asr r1
   11d0c:	andeq	r2, r1, r8, ror #6
   11d10:	andeq	r2, r1, r4, asr r1
   11d14:	andeq	r2, r1, r8, ror #6
   11d18:	andeq	r2, r1, r4, asr r1
   11d1c:	andeq	r2, r1, r4, asr r1
   11d20:	andeq	r2, r1, r4, asr r1
   11d24:	andeq	r2, r1, r4, asr r1
   11d28:	andeq	r2, r1, r4, asr r1
   11d2c:	andeq	r2, r1, r4, asr r1
   11d30:	andeq	r2, r1, r4, asr r1
   11d34:	andeq	r2, r1, r4, asr r1
   11d38:	andeq	r2, r1, r4, asr r1
   11d3c:	andeq	r2, r1, r4, asr r1
   11d40:	andeq	r2, r1, r4, asr r1
   11d44:	andeq	r2, r1, r4, asr r1
   11d48:	andeq	r2, r1, r4, asr r1
   11d4c:	andeq	r2, r1, r4, asr r1
   11d50:	andeq	r2, r1, r4, asr r1
   11d54:	andeq	r2, r1, r4, asr r1
   11d58:	andeq	r2, r1, r4, asr r1
   11d5c:	andeq	r2, r1, r4, asr r1
   11d60:	andeq	r2, r1, r4, asr r1
   11d64:	andeq	r2, r1, r4, asr r1
   11d68:	andeq	r2, r1, r4, asr r1
   11d6c:	andeq	r2, r1, r4, asr r1
   11d70:	andeq	r2, r1, r4, asr r1
   11d74:	andeq	r2, r1, r4, asr r1
   11d78:	andeq	r2, r1, r4, asr r1
   11d7c:	andeq	r2, r1, r4, asr r1
   11d80:	andeq	r1, r1, r4, ror #30
   11d84:	andeq	r2, r1, r8, ror #6
   11d88:	andeq	r1, r1, r4, ror #30
   11d8c:	andeq	r2, r1, r8, asr #6
   11d90:	mov	r3, #1
   11d94:	str	r3, [sp, #40]	; 0x28
   11d98:	str	r3, [sp, #68]	; 0x44
   11d9c:	mov	r8, #0
   11da0:	ldr	r3, [pc, #4056]	; 12d80 <__assert_fail@plt+0x1ec4>
   11da4:	str	r3, [sp, #72]	; 0x48
   11da8:	mov	r3, #2
   11dac:	str	r3, [sp, #176]	; 0xb0
   11db0:	ldr	r1, [sp, #56]	; 0x38
   11db4:	mov	r2, r3
   11db8:	ldr	ip, [sp, #40]	; 0x28
   11dbc:	mov	lr, r3
   11dc0:	b	11a8c <__assert_fail@plt+0xbd0>
   11dc4:	mov	r3, #1
   11dc8:	str	r3, [sp, #56]	; 0x38
   11dcc:	str	r3, [sp, #68]	; 0x44
   11dd0:	str	r3, [sp, #40]	; 0x28
   11dd4:	ldr	r3, [pc, #4004]	; 12d80 <__assert_fail@plt+0x1ec4>
   11dd8:	mov	r8, #0
   11ddc:	str	r3, [sp, #72]	; 0x48
   11de0:	b	11da8 <__assert_fail@plt+0xeec>
   11de4:	mov	r3, #1
   11de8:	str	r3, [sp, #56]	; 0x38
   11dec:	str	r3, [sp, #68]	; 0x44
   11df0:	str	r3, [sp, #40]	; 0x28
   11df4:	ldr	r3, [pc, #3976]	; 12d84 <__assert_fail@plt+0x1ec8>
   11df8:	mov	r8, #0
   11dfc:	str	r3, [sp, #72]	; 0x48
   11e00:	mov	r3, #5
   11e04:	b	11dac <__assert_fail@plt+0xef0>
   11e08:	mov	r3, #0
   11e0c:	str	r3, [sp, #40]	; 0x28
   11e10:	mov	r3, #1
   11e14:	str	r3, [sp, #56]	; 0x38
   11e18:	mov	r8, #0
   11e1c:	mov	r1, r3
   11e20:	ldr	r2, [sp, #176]	; 0xb0
   11e24:	ldr	ip, [sp, #40]	; 0x28
   11e28:	ldr	lr, [sp, #176]	; 0xb0
   11e2c:	b	11a8c <__assert_fail@plt+0xbd0>
   11e30:	ldr	r3, [sp, #176]	; 0xb0
   11e34:	cmp	r3, #10
   11e38:	beq	11e7c <__assert_fail@plt+0xfc0>
   11e3c:	mov	r2, #5
   11e40:	ldr	r1, [pc, #3904]	; 12d88 <__assert_fail@plt+0x1ecc>
   11e44:	mov	r0, #0
   11e48:	bl	10d00 <dcgettext@plt>
   11e4c:	ldr	r2, [pc, #3892]	; 12d88 <__assert_fail@plt+0x1ecc>
   11e50:	cmp	r0, r2
   11e54:	str	r0, [sp, #188]	; 0xbc
   11e58:	beq	12f14 <__assert_fail@plt+0x2058>
   11e5c:	mov	r2, #5
   11e60:	ldr	r1, [pc, #3864]	; 12d80 <__assert_fail@plt+0x1ec4>
   11e64:	mov	r0, #0
   11e68:	bl	10d00 <dcgettext@plt>
   11e6c:	ldr	r2, [pc, #3852]	; 12d80 <__assert_fail@plt+0x1ec4>
   11e70:	cmp	r0, r2
   11e74:	str	r0, [sp, #192]	; 0xc0
   11e78:	beq	12f04 <__assert_fail@plt+0x2048>
   11e7c:	ldr	r8, [sp, #40]	; 0x28
   11e80:	cmp	r8, #0
   11e84:	movne	r8, #0
   11e88:	bne	11eb8 <__assert_fail@plt+0xffc>
   11e8c:	ldr	r3, [sp, #188]	; 0xbc
   11e90:	ldrb	r3, [r3]
   11e94:	cmp	r3, #0
   11e98:	beq	11eb8 <__assert_fail@plt+0xffc>
   11e9c:	ldr	r2, [sp, #188]	; 0xbc
   11ea0:	cmp	fp, r8
   11ea4:	strbhi	r3, [r9, r8]
   11ea8:	ldrb	r3, [r2, #1]!
   11eac:	add	r8, r8, #1
   11eb0:	cmp	r3, #0
   11eb4:	bne	11ea0 <__assert_fail@plt+0xfe4>
   11eb8:	ldr	r0, [sp, #192]	; 0xc0
   11ebc:	bl	10df0 <strlen@plt>
   11ec0:	ldr	r3, [sp, #192]	; 0xc0
   11ec4:	ldr	r2, [sp, #176]	; 0xb0
   11ec8:	str	r3, [sp, #72]	; 0x48
   11ecc:	mov	r3, #1
   11ed0:	str	r3, [sp, #56]	; 0x38
   11ed4:	mov	r1, r3
   11ed8:	ldr	ip, [sp, #40]	; 0x28
   11edc:	ldr	lr, [sp, #176]	; 0xb0
   11ee0:	str	r0, [sp, #68]	; 0x44
   11ee4:	b	11a8c <__assert_fail@plt+0xbd0>
   11ee8:	ldr	r3, [sp, #40]	; 0x28
   11eec:	cmp	r3, #0
   11ef0:	beq	12b98 <__assert_fail@plt+0x1cdc>
   11ef4:	mov	r3, #1
   11ef8:	str	r3, [sp, #68]	; 0x44
   11efc:	ldr	r3, [pc, #3708]	; 12d80 <__assert_fail@plt+0x1ec4>
   11f00:	str	r3, [sp, #72]	; 0x48
   11f04:	mov	r8, #0
   11f08:	ldr	r1, [sp, #56]	; 0x38
   11f0c:	ldr	r2, [sp, #176]	; 0xb0
   11f10:	ldr	ip, [sp, #40]	; 0x28
   11f14:	ldr	lr, [sp, #176]	; 0xb0
   11f18:	b	11a8c <__assert_fail@plt+0xbd0>
   11f1c:	ldr	r3, [sp, #40]	; 0x28
   11f20:	cmp	r3, #0
   11f24:	beq	12c1c <__assert_fail@plt+0x1d60>
   11f28:	str	r3, [sp, #56]	; 0x38
   11f2c:	mov	r3, #1
   11f30:	str	r3, [sp, #68]	; 0x44
   11f34:	ldr	r3, [pc, #3656]	; 12d84 <__assert_fail@plt+0x1ec8>
   11f38:	b	11f00 <__assert_fail@plt+0x1044>
   11f3c:	ldr	r3, [sp, #40]	; 0x28
   11f40:	cmp	r3, #0
   11f44:	mov	r3, #1
   11f48:	streq	r3, [sp, #56]	; 0x38
   11f4c:	beq	12b98 <__assert_fail@plt+0x1cdc>
   11f50:	str	r3, [sp, #68]	; 0x44
   11f54:	ldr	r3, [pc, #3620]	; 12d80 <__assert_fail@plt+0x1ec4>
   11f58:	mov	r8, #0
   11f5c:	str	r3, [sp, #72]	; 0x48
   11f60:	b	11da8 <__assert_fail@plt+0xeec>
   11f64:	ldr	r3, [sp, #24]
   11f68:	ldr	r6, [sp, #48]	; 0x30
   11f6c:	cmn	r3, #1
   11f70:	beq	125cc <__assert_fail@plt+0x1710>
   11f74:	subs	r3, r3, #1
   11f78:	movne	r3, #1
   11f7c:	cmp	r3, #0
   11f80:	beq	1234c <__assert_fail@plt+0x1490>
   11f84:	ldr	r1, [sp, #52]	; 0x34
   11f88:	mov	r7, r3
   11f8c:	mov	r3, #0
   11f90:	str	r3, [sp, #32]
   11f94:	ldr	r3, [sp, #60]	; 0x3c
   11f98:	orr	r2, r1, r3
   11f9c:	ldr	r3, [sp, #40]	; 0x28
   11fa0:	eor	r2, r2, #1
   11fa4:	orr	r2, r3, r2
   11fa8:	tst	r2, #255	; 0xff
   11fac:	bne	128d0 <__assert_fail@plt+0x1a14>
   11fb0:	cmp	r6, #0
   11fb4:	bne	12190 <__assert_fail@plt+0x12d4>
   11fb8:	ldr	r3, [sp, #36]	; 0x24
   11fbc:	add	sl, sl, #1
   11fc0:	and	r3, r3, r7
   11fc4:	uxtb	r6, r3
   11fc8:	cmp	r6, #0
   11fcc:	beq	11ff8 <__assert_fail@plt+0x113c>
   11fd0:	cmp	fp, r8
   11fd4:	movhi	r3, #39	; 0x27
   11fd8:	strbhi	r3, [r9, r8]
   11fdc:	add	r3, r8, #1
   11fe0:	cmp	fp, r3
   11fe4:	movhi	r2, #39	; 0x27
   11fe8:	add	r8, r8, #2
   11fec:	strbhi	r2, [r9, r3]
   11ff0:	mov	r3, #0
   11ff4:	str	r3, [sp, #36]	; 0x24
   11ff8:	ldr	r2, [sp, #32]
   11ffc:	cmp	r8, fp
   12000:	ldr	r3, [sp, #28]
   12004:	strbcc	r4, [r9, r8]
   12008:	cmp	r2, #0
   1200c:	moveq	r3, #0
   12010:	str	r3, [sp, #28]
   12014:	ldr	r3, [sp, #24]
   12018:	add	r8, r8, #1
   1201c:	cmn	r3, #1
   12020:	bne	11af8 <__assert_fail@plt+0xc3c>
   12024:	ldr	r3, [sp, #44]	; 0x2c
   12028:	ldrb	r3, [r3, sl]
   1202c:	adds	r7, r3, #0
   12030:	movne	r7, #1
   12034:	cmp	r7, #0
   12038:	bne	11b08 <__assert_fail@plt+0xc4c>
   1203c:	ldr	r3, [sp, #64]	; 0x40
   12040:	cmp	r8, #0
   12044:	movne	r3, #0
   12048:	andeq	r3, r3, #1
   1204c:	cmp	r3, #0
   12050:	str	r3, [sp, #64]	; 0x40
   12054:	bne	12af8 <__assert_fail@plt+0x1c3c>
   12058:	ldr	r3, [sp, #40]	; 0x28
   1205c:	ldr	r2, [sp, #52]	; 0x34
   12060:	eor	r3, r3, #1
   12064:	ands	r2, r2, r3
   12068:	beq	12f24 <__assert_fail@plt+0x2068>
   1206c:	ldr	r3, [sp, #76]	; 0x4c
   12070:	cmp	r3, #0
   12074:	beq	12ef4 <__assert_fail@plt+0x2038>
   12078:	ldr	r3, [sp, #28]
   1207c:	cmp	r3, #0
   12080:	bne	12eb0 <__assert_fail@plt+0x1ff4>
   12084:	ldr	r2, [sp, #84]	; 0x54
   12088:	clz	r3, fp
   1208c:	cmp	r2, #0
   12090:	lsr	r3, r3, #5
   12094:	moveq	r3, #0
   12098:	cmp	r3, #0
   1209c:	beq	12e50 <__assert_fail@plt+0x1f94>
   120a0:	mov	fp, r2
   120a4:	str	r3, [sp, #76]	; 0x4c
   120a8:	b	11a34 <__assert_fail@plt+0xb78>
   120ac:	ldr	r3, [sp, #176]	; 0xb0
   120b0:	ldr	r6, [sp, #48]	; 0x30
   120b4:	cmp	r3, #2
   120b8:	beq	125f0 <__assert_fail@plt+0x1734>
   120bc:	ldr	r3, [sp, #88]	; 0x58
   120c0:	cmp	r3, #0
   120c4:	beq	12b74 <__assert_fail@plt+0x1cb8>
   120c8:	mov	r3, #0
   120cc:	add	sl, sl, #1
   120d0:	ldr	r6, [sp, #36]	; 0x24
   120d4:	str	r3, [sp, #32]
   120d8:	mov	r4, #92	; 0x5c
   120dc:	b	11fc8 <__assert_fail@plt+0x110c>
   120e0:	ldr	r3, [sp, #176]	; 0xb0
   120e4:	ldr	r6, [sp, #48]	; 0x30
   120e8:	cmp	r3, #2
   120ec:	beq	12620 <__assert_fail@plt+0x1764>
   120f0:	cmp	r3, #5
   120f4:	bne	12b84 <__assert_fail@plt+0x1cc8>
   120f8:	ldr	r3, [sp, #100]	; 0x64
   120fc:	cmp	r3, #0
   12100:	beq	12be8 <__assert_fail@plt+0x1d2c>
   12104:	ldr	r2, [sp, #24]
   12108:	add	r3, sl, #2
   1210c:	cmp	r2, r3
   12110:	bls	12120 <__assert_fail@plt+0x1264>
   12114:	ldrb	r4, [r5, #1]
   12118:	cmp	r4, #63	; 0x3f
   1211c:	beq	12d90 <__assert_fail@plt+0x1ed4>
   12120:	mov	r1, #0
   12124:	str	r1, [sp, #32]
   12128:	mov	r4, #63	; 0x3f
   1212c:	b	11f94 <__assert_fail@plt+0x10d8>
   12130:	ldr	r3, [sp, #176]	; 0xb0
   12134:	ldr	r6, [sp, #48]	; 0x30
   12138:	cmp	r3, #2
   1213c:	beq	1264c <__assert_fail@plt+0x1790>
   12140:	str	r7, [sp, #32]
   12144:	str	r7, [sp, #76]	; 0x4c
   12148:	mov	r1, #0
   1214c:	mov	r4, #39	; 0x27
   12150:	b	11f94 <__assert_fail@plt+0x10d8>
   12154:	ldr	r6, [sp, #48]	; 0x30
   12158:	ldr	r1, [sp, #52]	; 0x34
   1215c:	str	r7, [sp, #32]
   12160:	b	11f94 <__assert_fail@plt+0x10d8>
   12164:	ldr	r6, [sp, #48]	; 0x30
   12168:	ldr	r1, [sp, #52]	; 0x34
   1216c:	mov	r4, #12
   12170:	mov	r3, #102	; 0x66
   12174:	ldr	r2, [sp, #56]	; 0x38
   12178:	cmp	r2, #0
   1217c:	streq	r2, [sp, #32]
   12180:	beq	11f94 <__assert_fail@plt+0x10d8>
   12184:	mov	r4, r3
   12188:	mov	r3, #0
   1218c:	str	r3, [sp, #32]
   12190:	ldr	r3, [sp, #40]	; 0x28
   12194:	cmp	r3, #0
   12198:	bne	12908 <__assert_fail@plt+0x1a4c>
   1219c:	ldr	r3, [sp, #36]	; 0x24
   121a0:	eor	r3, r3, #1
   121a4:	and	r3, r3, r1
   121a8:	ands	r3, r3, #255	; 0xff
   121ac:	beq	121e4 <__assert_fail@plt+0x1328>
   121b0:	cmp	fp, r8
   121b4:	movhi	r2, #39	; 0x27
   121b8:	strbhi	r2, [r9, r8]
   121bc:	add	r2, r8, #1
   121c0:	cmp	fp, r2
   121c4:	movhi	r1, #36	; 0x24
   121c8:	strbhi	r1, [r9, r2]
   121cc:	add	r2, r8, #2
   121d0:	cmp	fp, r2
   121d4:	add	r8, r8, #3
   121d8:	movhi	r1, #39	; 0x27
   121dc:	strbhi	r1, [r9, r2]
   121e0:	str	r3, [sp, #36]	; 0x24
   121e4:	cmp	fp, r8
   121e8:	movhi	r3, #92	; 0x5c
   121ec:	strbhi	r3, [r9, r8]
   121f0:	add	sl, sl, #1
   121f4:	add	r8, r8, #1
   121f8:	b	11ff8 <__assert_fail@plt+0x113c>
   121fc:	ldr	r6, [sp, #48]	; 0x30
   12200:	mov	r4, #10
   12204:	mov	r3, #110	; 0x6e
   12208:	ldr	r2, [sp, #64]	; 0x40
   1220c:	cmp	r2, #0
   12210:	bne	12c90 <__assert_fail@plt+0x1dd4>
   12214:	ldr	r1, [sp, #52]	; 0x34
   12218:	b	12174 <__assert_fail@plt+0x12b8>
   1221c:	ldr	r6, [sp, #48]	; 0x30
   12220:	ldr	r1, [sp, #52]	; 0x34
   12224:	mov	r3, #116	; 0x74
   12228:	b	12174 <__assert_fail@plt+0x12b8>
   1222c:	ldr	r6, [sp, #48]	; 0x30
   12230:	ldr	r1, [sp, #52]	; 0x34
   12234:	mov	r4, #11
   12238:	mov	r3, #118	; 0x76
   1223c:	b	12174 <__assert_fail@plt+0x12b8>
   12240:	ldr	r6, [sp, #48]	; 0x30
   12244:	ldr	r1, [sp, #52]	; 0x34
   12248:	mov	r4, #8
   1224c:	mov	r3, #98	; 0x62
   12250:	b	12174 <__assert_fail@plt+0x12b8>
   12254:	ldr	r6, [sp, #48]	; 0x30
   12258:	ldr	r1, [sp, #52]	; 0x34
   1225c:	mov	r4, #7
   12260:	mov	r3, #97	; 0x61
   12264:	b	12174 <__assert_fail@plt+0x12b8>
   12268:	ldr	r3, [sp, #56]	; 0x38
   1226c:	ldr	r6, [sp, #48]	; 0x30
   12270:	cmp	r3, #0
   12274:	beq	12738 <__assert_fail@plt+0x187c>
   12278:	ldr	r3, [sp, #40]	; 0x28
   1227c:	cmp	r3, #0
   12280:	bne	12d6c <__assert_fail@plt+0x1eb0>
   12284:	ldr	r3, [sp, #36]	; 0x24
   12288:	ldr	r2, [sp, #52]	; 0x34
   1228c:	eor	r3, r3, #1
   12290:	ands	r3, r2, r3
   12294:	moveq	r2, r8
   12298:	beq	122d0 <__assert_fail@plt+0x1414>
   1229c:	cmp	fp, r8
   122a0:	movhi	r2, #39	; 0x27
   122a4:	strbhi	r2, [r9, r8]
   122a8:	add	r2, r8, #1
   122ac:	cmp	fp, r2
   122b0:	movhi	r1, #36	; 0x24
   122b4:	strbhi	r1, [r9, r2]
   122b8:	add	r2, r8, #2
   122bc:	cmp	fp, r2
   122c0:	movhi	r1, #39	; 0x27
   122c4:	strbhi	r1, [r9, r2]
   122c8:	add	r2, r8, #3
   122cc:	str	r3, [sp, #36]	; 0x24
   122d0:	cmp	fp, r2
   122d4:	movhi	r3, #92	; 0x5c
   122d8:	strbhi	r3, [r9, r2]
   122dc:	ldr	r3, [sp, #92]	; 0x5c
   122e0:	add	r8, r2, #1
   122e4:	cmp	r3, #0
   122e8:	beq	12c6c <__assert_fail@plt+0x1db0>
   122ec:	ldr	r1, [sp, #24]
   122f0:	add	r3, sl, #1
   122f4:	cmp	r1, r3
   122f8:	bls	12330 <__assert_fail@plt+0x1474>
   122fc:	ldr	r1, [sp, #44]	; 0x2c
   12300:	ldrb	r3, [r1, r3]
   12304:	sub	r3, r3, #48	; 0x30
   12308:	cmp	r3, #9
   1230c:	bhi	12330 <__assert_fail@plt+0x1474>
   12310:	cmp	fp, r8
   12314:	movhi	r3, #48	; 0x30
   12318:	strbhi	r3, [r9, r8]
   1231c:	add	r3, r2, #2
   12320:	cmp	fp, r3
   12324:	add	r8, r2, #3
   12328:	movhi	r1, #48	; 0x30
   1232c:	strbhi	r1, [r9, r3]
   12330:	ldr	r3, [sp, #40]	; 0x28
   12334:	ldr	r1, [sp, #52]	; 0x34
   12338:	mov	r7, r3
   1233c:	str	r3, [sp, #32]
   12340:	mov	r4, #48	; 0x30
   12344:	b	11f94 <__assert_fail@plt+0x10d8>
   12348:	ldr	r6, [sp, #48]	; 0x30
   1234c:	cmp	sl, #0
   12350:	streq	r7, [sp, #32]
   12354:	beq	12374 <__assert_fail@plt+0x14b8>
   12358:	mov	r3, #0
   1235c:	ldr	r1, [sp, #52]	; 0x34
   12360:	str	r3, [sp, #32]
   12364:	b	11f94 <__assert_fail@plt+0x10d8>
   12368:	ldr	r6, [sp, #48]	; 0x30
   1236c:	mov	r3, #0
   12370:	str	r3, [sp, #32]
   12374:	ldr	r3, [sp, #64]	; 0x40
   12378:	cmp	r3, #0
   1237c:	bne	12af8 <__assert_fail@plt+0x1c3c>
   12380:	ldr	r1, [sp, #52]	; 0x34
   12384:	b	11f94 <__assert_fail@plt+0x10d8>
   12388:	ldr	r3, [sp, #48]	; 0x30
   1238c:	mov	r6, r3
   12390:	str	r3, [sp, #32]
   12394:	b	12374 <__assert_fail@plt+0x14b8>
   12398:	ldr	r6, [sp, #48]	; 0x30
   1239c:	mov	r4, #13
   123a0:	mov	r3, #114	; 0x72
   123a4:	b	12208 <__assert_fail@plt+0x134c>
   123a8:	ldr	r3, [sp, #44]	; 0x2c
   123ac:	add	r5, r3, sl
   123b0:	ldrb	r4, [r5]
   123b4:	cmp	r4, #126	; 0x7e
   123b8:	ldrls	pc, [pc, r4, lsl #2]
   123bc:	b	12758 <__assert_fail@plt+0x189c>
   123c0:	andeq	r2, r1, r8, lsr #14
   123c4:	andeq	r2, r1, r8, asr r7
   123c8:	andeq	r2, r1, r8, asr r7
   123cc:	andeq	r2, r1, r8, asr r7
   123d0:	andeq	r2, r1, r8, asr r7
   123d4:	andeq	r2, r1, r8, asr r7
   123d8:	andeq	r2, r1, r8, asr r7
   123dc:	andeq	r2, r1, r0, lsr #14
   123e0:	andeq	r2, r1, r8, lsl r7
   123e4:	andeq	r2, r1, ip, lsl #14
   123e8:	andeq	r2, r1, r4, lsl #14
   123ec:	strdeq	r2, [r1], -ip
   123f0:	strdeq	r2, [r1], -r4
   123f4:	andeq	r2, r1, ip, ror #13
   123f8:	andeq	r2, r1, r8, asr r7
   123fc:	andeq	r2, r1, r8, asr r7
   12400:	andeq	r2, r1, r8, asr r7
   12404:	andeq	r2, r1, r8, asr r7
   12408:	andeq	r2, r1, r8, asr r7
   1240c:	andeq	r2, r1, r8, asr r7
   12410:	andeq	r2, r1, r8, asr r7
   12414:	andeq	r2, r1, r8, asr r7
   12418:	andeq	r2, r1, r8, asr r7
   1241c:	andeq	r2, r1, r8, asr r7
   12420:	andeq	r2, r1, r8, asr r7
   12424:	andeq	r2, r1, r8, asr r7
   12428:	andeq	r2, r1, r8, asr r7
   1242c:	andeq	r2, r1, r8, asr r7
   12430:	andeq	r2, r1, r8, asr r7
   12434:	andeq	r2, r1, r8, asr r7
   12438:	andeq	r2, r1, r8, asr r7
   1243c:	andeq	r2, r1, r8, asr r7
   12440:	andeq	r2, r1, r0, ror #13
   12444:	ldrdeq	r2, [r1], -r8
   12448:	ldrdeq	r2, [r1], -r8
   1244c:	ldrdeq	r2, [r1], -r0
   12450:	ldrdeq	r2, [r1], -r8
   12454:	andeq	r2, r1, r8, asr #13
   12458:	ldrdeq	r2, [r1], -r8
   1245c:	andeq	r2, r1, ip, lsr r6
   12460:	ldrdeq	r2, [r1], -r8
   12464:	ldrdeq	r2, [r1], -r8
   12468:	ldrdeq	r2, [r1], -r8
   1246c:	andeq	r2, r1, r8, asr #13
   12470:	andeq	r2, r1, r8, asr #13
   12474:	andeq	r2, r1, r8, asr #13
   12478:	andeq	r2, r1, r8, asr #13
   1247c:	andeq	r2, r1, r8, asr #13
   12480:	andeq	r2, r1, r8, asr #13
   12484:	andeq	r2, r1, r8, asr #13
   12488:	andeq	r2, r1, r8, asr #13
   1248c:	andeq	r2, r1, r8, asr #13
   12490:	andeq	r2, r1, r8, asr #13
   12494:	andeq	r2, r1, r8, asr #13
   12498:	andeq	r2, r1, r8, asr #13
   1249c:	andeq	r2, r1, r8, asr #13
   124a0:	andeq	r2, r1, r8, asr #13
   124a4:	andeq	r2, r1, r8, asr #13
   124a8:	andeq	r2, r1, r8, asr #13
   124ac:	ldrdeq	r2, [r1], -r8
   124b0:	ldrdeq	r2, [r1], -r8
   124b4:	ldrdeq	r2, [r1], -r8
   124b8:	ldrdeq	r2, [r1], -r8
   124bc:	andeq	r2, r1, r0, lsl r6
   124c0:	andeq	r2, r1, r8, asr r7
   124c4:	andeq	r2, r1, r8, asr #13
   124c8:	andeq	r2, r1, r8, asr #13
   124cc:	andeq	r2, r1, r8, asr #13
   124d0:	andeq	r2, r1, r8, asr #13
   124d4:	andeq	r2, r1, r8, asr #13
   124d8:	andeq	r2, r1, r8, asr #13
   124dc:	andeq	r2, r1, r8, asr #13
   124e0:	andeq	r2, r1, r8, asr #13
   124e4:	andeq	r2, r1, r8, asr #13
   124e8:	andeq	r2, r1, r8, asr #13
   124ec:	andeq	r2, r1, r8, asr #13
   124f0:	andeq	r2, r1, r8, asr #13
   124f4:	andeq	r2, r1, r8, asr #13
   124f8:	andeq	r2, r1, r8, asr #13
   124fc:	andeq	r2, r1, r8, asr #13
   12500:	andeq	r2, r1, r8, asr #13
   12504:	andeq	r2, r1, r8, asr #13
   12508:	andeq	r2, r1, r8, asr #13
   1250c:	andeq	r2, r1, r8, asr #13
   12510:	andeq	r2, r1, r8, asr #13
   12514:	andeq	r2, r1, r8, asr #13
   12518:	andeq	r2, r1, r8, asr #13
   1251c:	andeq	r2, r1, r8, asr #13
   12520:	andeq	r2, r1, r8, asr #13
   12524:	andeq	r2, r1, r8, asr #13
   12528:	andeq	r2, r1, r8, asr #13
   1252c:	ldrdeq	r2, [r1], -r8
   12530:	andeq	r2, r1, r0, ror #11
   12534:	andeq	r2, r1, r8, asr #13
   12538:	ldrdeq	r2, [r1], -r8
   1253c:	andeq	r2, r1, r8, asr #13
   12540:	ldrdeq	r2, [r1], -r8
   12544:	andeq	r2, r1, r8, asr #13
   12548:	andeq	r2, r1, r8, asr #13
   1254c:	andeq	r2, r1, r8, asr #13
   12550:	andeq	r2, r1, r8, asr #13
   12554:	andeq	r2, r1, r8, asr #13
   12558:	andeq	r2, r1, r8, asr #13
   1255c:	andeq	r2, r1, r8, asr #13
   12560:	andeq	r2, r1, r8, asr #13
   12564:	andeq	r2, r1, r8, asr #13
   12568:	andeq	r2, r1, r8, asr #13
   1256c:	andeq	r2, r1, r8, asr #13
   12570:	andeq	r2, r1, r8, asr #13
   12574:	andeq	r2, r1, r8, asr #13
   12578:	andeq	r2, r1, r8, asr #13
   1257c:	andeq	r2, r1, r8, asr #13
   12580:	andeq	r2, r1, r8, asr #13
   12584:	andeq	r2, r1, r8, asr #13
   12588:	andeq	r2, r1, r8, asr #13
   1258c:	andeq	r2, r1, r8, asr #13
   12590:	andeq	r2, r1, r8, asr #13
   12594:	andeq	r2, r1, r8, asr #13
   12598:	andeq	r2, r1, r8, asr #13
   1259c:	andeq	r2, r1, r8, asr #13
   125a0:	andeq	r2, r1, r8, asr #13
   125a4:	andeq	r2, r1, r8, asr #13
   125a8:	andeq	r2, r1, r8, asr #13
   125ac:			; <UNDEFINED> instruction: 0x000125bc
   125b0:	ldrdeq	r2, [r1], -r8
   125b4:			; <UNDEFINED> instruction: 0x000125bc
   125b8:	ldrdeq	r2, [r1], -r0
   125bc:	ldr	r3, [sp, #24]
   125c0:	mov	r6, #0
   125c4:	cmn	r3, #1
   125c8:	bne	11f74 <__assert_fail@plt+0x10b8>
   125cc:	ldr	r3, [sp, #44]	; 0x2c
   125d0:	ldrb	r3, [r3, #1]
   125d4:	adds	r3, r3, #0
   125d8:	movne	r3, #1
   125dc:	b	11f7c <__assert_fail@plt+0x10c0>
   125e0:	ldr	r3, [sp, #176]	; 0xb0
   125e4:	mov	r6, #0
   125e8:	cmp	r3, #2
   125ec:	bne	120bc <__assert_fail@plt+0x1200>
   125f0:	ldr	r3, [sp, #64]	; 0x40
   125f4:	cmp	r3, #0
   125f8:	bne	12e30 <__assert_fail@plt+0x1f74>
   125fc:	add	sl, sl, #1
   12600:	ldr	r6, [sp, #36]	; 0x24
   12604:	str	r3, [sp, #32]
   12608:	mov	r4, #92	; 0x5c
   1260c:	b	11fc8 <__assert_fail@plt+0x110c>
   12610:	ldr	r3, [sp, #176]	; 0xb0
   12614:	mov	r6, #0
   12618:	cmp	r3, #2
   1261c:	bne	120f0 <__assert_fail@plt+0x1234>
   12620:	ldr	r3, [sp, #40]	; 0x28
   12624:	cmp	r3, #0
   12628:	bne	1290c <__assert_fail@plt+0x1a50>
   1262c:	mov	r1, r7
   12630:	str	r3, [sp, #32]
   12634:	mov	r4, #63	; 0x3f
   12638:	b	11f94 <__assert_fail@plt+0x10d8>
   1263c:	ldr	r3, [sp, #176]	; 0xb0
   12640:	mov	r6, #0
   12644:	cmp	r3, #2
   12648:	bne	12140 <__assert_fail@plt+0x1284>
   1264c:	ldr	r3, [sp, #64]	; 0x40
   12650:	cmp	r3, #0
   12654:	bne	12e30 <__assert_fail@plt+0x1f74>
   12658:	ldr	r2, [sp, #84]	; 0x54
   1265c:	adds	r3, fp, #0
   12660:	movne	r3, #1
   12664:	cmp	r2, #0
   12668:	movne	r3, #0
   1266c:	cmp	r3, #0
   12670:	strne	fp, [sp, #84]	; 0x54
   12674:	movne	fp, #0
   12678:	bne	126a8 <__assert_fail@plt+0x17ec>
   1267c:	cmp	fp, r8
   12680:	movhi	r3, #39	; 0x27
   12684:	strbhi	r3, [r9, r8]
   12688:	add	r3, r8, #1
   1268c:	cmp	fp, r3
   12690:	movhi	r2, #92	; 0x5c
   12694:	strbhi	r2, [r9, r3]
   12698:	add	r3, r8, #2
   1269c:	cmp	fp, r3
   126a0:	movhi	r2, #39	; 0x27
   126a4:	strbhi	r2, [r9, r3]
   126a8:	ldr	r3, [sp, #64]	; 0x40
   126ac:	add	r8, r8, #3
   126b0:	mov	r1, r7
   126b4:	str	r7, [sp, #32]
   126b8:	str	r7, [sp, #76]	; 0x4c
   126bc:	str	r3, [sp, #36]	; 0x24
   126c0:	mov	r4, #39	; 0x27
   126c4:	b	11f94 <__assert_fail@plt+0x10d8>
   126c8:	mov	r6, #0
   126cc:	b	12158 <__assert_fail@plt+0x129c>
   126d0:	mov	r6, #0
   126d4:	b	1234c <__assert_fail@plt+0x1490>
   126d8:	mov	r6, #0
   126dc:	b	1236c <__assert_fail@plt+0x14b0>
   126e0:	str	r7, [sp, #32]
   126e4:	mov	r6, #0
   126e8:	b	12374 <__assert_fail@plt+0x14b8>
   126ec:	mov	r6, #0
   126f0:	b	1239c <__assert_fail@plt+0x14e0>
   126f4:	mov	r6, #0
   126f8:	b	12168 <__assert_fail@plt+0x12ac>
   126fc:	mov	r6, #0
   12700:	b	12230 <__assert_fail@plt+0x1374>
   12704:	mov	r6, #0
   12708:	b	12200 <__assert_fail@plt+0x1344>
   1270c:	mov	r6, #0
   12710:	mov	r3, #116	; 0x74
   12714:	b	12208 <__assert_fail@plt+0x134c>
   12718:	mov	r6, #0
   1271c:	b	12244 <__assert_fail@plt+0x1388>
   12720:	mov	r6, #0
   12724:	b	12258 <__assert_fail@plt+0x139c>
   12728:	ldr	r3, [sp, #56]	; 0x38
   1272c:	mov	r6, #0
   12730:	cmp	r3, #0
   12734:	bne	12278 <__assert_fail@plt+0x13bc>
   12738:	ldr	r3, [sp, #96]	; 0x60
   1273c:	cmp	r3, #0
   12740:	addne	sl, sl, #1
   12744:	bne	11aec <__assert_fail@plt+0xc30>
   12748:	ldr	r1, [sp, #52]	; 0x34
   1274c:	str	r3, [sp, #32]
   12750:	mov	r4, r3
   12754:	b	11f94 <__assert_fail@plt+0x10d8>
   12758:	mov	r6, #0
   1275c:	ldr	r3, [sp, #80]	; 0x50
   12760:	cmp	r3, #1
   12764:	bne	12954 <__assert_fail@plt+0x1a98>
   12768:	bl	10dcc <__ctype_b_loc@plt>
   1276c:	ldr	r2, [sp, #80]	; 0x50
   12770:	sxth	r3, r4
   12774:	mov	r1, r2
   12778:	lsl	r3, r3, #1
   1277c:	ldr	r2, [r0]
   12780:	ldrh	r3, [r2, r3]
   12784:	and	r3, r3, #16384	; 0x4000
   12788:	cmp	r3, #0
   1278c:	movne	r3, #1
   12790:	moveq	r3, #0
   12794:	str	r3, [sp, #32]
   12798:	moveq	r3, #1
   1279c:	movne	r3, #0
   127a0:	ldr	r2, [sp, #56]	; 0x38
   127a4:	and	r3, r3, r2
   127a8:	ands	r3, r3, #255	; 0xff
   127ac:	beq	12380 <__assert_fail@plt+0x14c4>
   127b0:	add	r1, sl, r1
   127b4:	mov	r0, #0
   127b8:	ldr	r7, [sp, #40]	; 0x28
   127bc:	ldr	r2, [sp, #36]	; 0x24
   127c0:	ldr	lr, [sp, #52]	; 0x34
   127c4:	b	12874 <__assert_fail@plt+0x19b8>
   127c8:	cmp	r7, #0
   127cc:	bne	12bc8 <__assert_fail@plt+0x1d0c>
   127d0:	eor	r0, r2, #1
   127d4:	ands	r0, lr, r0
   127d8:	beq	12810 <__assert_fail@plt+0x1954>
   127dc:	cmp	fp, r8
   127e0:	movhi	r2, #39	; 0x27
   127e4:	strbhi	r2, [r9, r8]
   127e8:	add	r2, r8, #1
   127ec:	cmp	fp, r2
   127f0:	movhi	ip, #36	; 0x24
   127f4:	strbhi	ip, [r9, r2]
   127f8:	add	r2, r8, #2
   127fc:	cmp	fp, r2
   12800:	movhi	ip, #39	; 0x27
   12804:	strbhi	ip, [r9, r2]
   12808:	add	r8, r8, #3
   1280c:	mov	r2, r0
   12810:	cmp	fp, r8
   12814:	movhi	r0, #92	; 0x5c
   12818:	strbhi	r0, [r9, r8]
   1281c:	add	r0, r8, #1
   12820:	cmp	fp, r0
   12824:	lsrhi	ip, r4, #6
   12828:	addhi	ip, ip, #48	; 0x30
   1282c:	strbhi	ip, [r9, r0]
   12830:	add	ip, r8, #2
   12834:	cmp	fp, ip
   12838:	lsrhi	r0, r4, #3
   1283c:	andhi	r0, r0, #7
   12840:	addhi	r0, r0, #48	; 0x30
   12844:	add	sl, sl, #1
   12848:	strbhi	r0, [r9, ip]
   1284c:	and	r4, r4, #7
   12850:	cmp	sl, r1
   12854:	add	r4, r4, #48	; 0x30
   12858:	add	r8, r8, #3
   1285c:	bcs	12be0 <__assert_fail@plt+0x1d24>
   12860:	mov	r0, r3
   12864:	cmp	fp, r8
   12868:	strbhi	r4, [r9, r8]
   1286c:	ldrb	r4, [r5, #1]!
   12870:	add	r8, r8, #1
   12874:	cmp	r3, #0
   12878:	bne	127c8 <__assert_fail@plt+0x190c>
   1287c:	cmp	r6, #0
   12880:	bne	12924 <__assert_fail@plt+0x1a68>
   12884:	eor	r6, r0, #1
   12888:	and	r6, r6, r2
   1288c:	add	sl, sl, #1
   12890:	cmp	r1, sl
   12894:	uxtb	r6, r6
   12898:	bls	1294c <__assert_fail@plt+0x1a90>
   1289c:	cmp	r6, #0
   128a0:	beq	12864 <__assert_fail@plt+0x19a8>
   128a4:	cmp	fp, r8
   128a8:	movhi	r2, #39	; 0x27
   128ac:	strbhi	r2, [r9, r8]
   128b0:	add	r2, r8, #1
   128b4:	cmp	fp, r2
   128b8:	movhi	ip, #39	; 0x27
   128bc:	strbhi	ip, [r9, r2]
   128c0:	add	r8, r8, #2
   128c4:	mov	r6, r3
   128c8:	mov	r2, r3
   128cc:	b	12864 <__assert_fail@plt+0x19a8>
   128d0:	ldr	r3, [sp, #184]	; 0xb8
   128d4:	cmp	r3, #0
   128d8:	beq	11fb0 <__assert_fail@plt+0x10f4>
   128dc:	lsr	r2, r4, #5
   128e0:	mov	r0, r3
   128e4:	uxtb	r2, r2
   128e8:	and	r3, r4, #31
   128ec:	ldr	r2, [r0, r2, lsl #2]
   128f0:	lsr	r3, r2, r3
   128f4:	tst	r3, #1
   128f8:	beq	11fb0 <__assert_fail@plt+0x10f4>
   128fc:	ldr	r3, [sp, #40]	; 0x28
   12900:	cmp	r3, #0
   12904:	beq	1219c <__assert_fail@plt+0x12e0>
   12908:	mov	r3, r1
   1290c:	str	r3, [sp, #64]	; 0x40
   12910:	mov	sl, r9
   12914:	ldr	r3, [sp, #56]	; 0x38
   12918:	mov	r9, fp
   1291c:	ldr	r2, [sp, #64]	; 0x40
   12920:	b	12b10 <__assert_fail@plt+0x1c54>
   12924:	cmp	fp, r8
   12928:	eor	r6, r0, #1
   1292c:	movhi	ip, #92	; 0x5c
   12930:	and	r6, r6, r2
   12934:	add	sl, sl, #1
   12938:	strbhi	ip, [r9, r8]
   1293c:	cmp	r1, sl
   12940:	add	r8, r8, #1
   12944:	uxtb	r6, r6
   12948:	bhi	1289c <__assert_fail@plt+0x19e0>
   1294c:	str	r2, [sp, #36]	; 0x24
   12950:	b	11fc8 <__assert_fail@plt+0x110c>
   12954:	ldr	r3, [sp, #24]
   12958:	cmn	r3, #1
   1295c:	mov	r3, #0
   12960:	str	r3, [sp, #128]	; 0x80
   12964:	str	r3, [sp, #132]	; 0x84
   12968:	beq	12c5c <__assert_fail@plt+0x1da0>
   1296c:	mov	r2, r7
   12970:	mov	r3, #0
   12974:	str	r7, [sp, #104]	; 0x68
   12978:	str	r5, [sp, #116]	; 0x74
   1297c:	mov	r7, r3
   12980:	mov	r5, r2
   12984:	str	r4, [sp, #32]
   12988:	str	r6, [sp, #108]	; 0x6c
   1298c:	str	r8, [sp, #112]	; 0x70
   12990:	ldr	r3, [sp, #44]	; 0x2c
   12994:	add	r6, sl, r7
   12998:	add	r4, r3, r6
   1299c:	ldr	r3, [sp, #24]
   129a0:	mov	r1, r4
   129a4:	sub	r2, r3, r6
   129a8:	add	r0, sp, #124	; 0x7c
   129ac:	add	r3, sp, #128	; 0x80
   129b0:	bl	17cbc <__assert_fail@plt+0x6e00>
   129b4:	subs	r8, r0, #0
   129b8:	beq	12d40 <__assert_fail@plt+0x1e84>
   129bc:	cmn	r8, #1
   129c0:	beq	12d18 <__assert_fail@plt+0x1e5c>
   129c4:	cmn	r8, #2
   129c8:	beq	12cb0 <__assert_fail@plt+0x1df4>
   129cc:	ldr	r3, [sp, #64]	; 0x40
   129d0:	cmp	r3, #0
   129d4:	beq	12a94 <__assert_fail@plt+0x1bd8>
   129d8:	cmp	r8, #1
   129dc:	beq	12a94 <__assert_fail@plt+0x1bd8>
   129e0:	sub	r3, r8, #1
   129e4:	add	r6, r3, r6
   129e8:	ldr	r3, [sp, #44]	; 0x2c
   129ec:	add	r6, r3, r6
   129f0:	ldrb	r3, [r4, #1]!
   129f4:	sub	r3, r3, #91	; 0x5b
   129f8:	cmp	r3, #33	; 0x21
   129fc:	ldrls	pc, [pc, r3, lsl #2]
   12a00:	b	12a8c <__assert_fail@plt+0x1bd0>
   12a04:	strdeq	r2, [r1], -r8
   12a08:	strdeq	r2, [r1], -r8
   12a0c:	andeq	r2, r1, ip, lsl #21
   12a10:	strdeq	r2, [r1], -r8
   12a14:	andeq	r2, r1, ip, lsl #21
   12a18:	strdeq	r2, [r1], -r8
   12a1c:	andeq	r2, r1, ip, lsl #21
   12a20:	andeq	r2, r1, ip, lsl #21
   12a24:	andeq	r2, r1, ip, lsl #21
   12a28:	andeq	r2, r1, ip, lsl #21
   12a2c:	andeq	r2, r1, ip, lsl #21
   12a30:	andeq	r2, r1, ip, lsl #21
   12a34:	andeq	r2, r1, ip, lsl #21
   12a38:	andeq	r2, r1, ip, lsl #21
   12a3c:	andeq	r2, r1, ip, lsl #21
   12a40:	andeq	r2, r1, ip, lsl #21
   12a44:	andeq	r2, r1, ip, lsl #21
   12a48:	andeq	r2, r1, ip, lsl #21
   12a4c:	andeq	r2, r1, ip, lsl #21
   12a50:	andeq	r2, r1, ip, lsl #21
   12a54:	andeq	r2, r1, ip, lsl #21
   12a58:	andeq	r2, r1, ip, lsl #21
   12a5c:	andeq	r2, r1, ip, lsl #21
   12a60:	andeq	r2, r1, ip, lsl #21
   12a64:	andeq	r2, r1, ip, lsl #21
   12a68:	andeq	r2, r1, ip, lsl #21
   12a6c:	andeq	r2, r1, ip, lsl #21
   12a70:	andeq	r2, r1, ip, lsl #21
   12a74:	andeq	r2, r1, ip, lsl #21
   12a78:	andeq	r2, r1, ip, lsl #21
   12a7c:	andeq	r2, r1, ip, lsl #21
   12a80:	andeq	r2, r1, ip, lsl #21
   12a84:	andeq	r2, r1, ip, lsl #21
   12a88:	strdeq	r2, [r1], -r8
   12a8c:	cmp	r6, r4
   12a90:	bne	129f0 <__assert_fail@plt+0x1b34>
   12a94:	ldr	r0, [sp, #124]	; 0x7c
   12a98:	bl	10d30 <iswprint@plt>
   12a9c:	add	r7, r7, r8
   12aa0:	cmp	r0, #0
   12aa4:	add	r0, sp, #128	; 0x80
   12aa8:	moveq	r5, #0
   12aac:	bl	10cd0 <mbsinit@plt>
   12ab0:	cmp	r0, #0
   12ab4:	beq	12990 <__assert_fail@plt+0x1ad4>
   12ab8:	ldr	r4, [sp, #32]
   12abc:	str	r5, [sp, #32]
   12ac0:	ldr	r3, [sp, #32]
   12ac4:	mov	r1, r7
   12ac8:	eor	r3, r3, #1
   12acc:	ldr	r7, [sp, #104]	; 0x68
   12ad0:	ldr	r6, [sp, #108]	; 0x6c
   12ad4:	ldr	r8, [sp, #112]	; 0x70
   12ad8:	ldr	r5, [sp, #116]	; 0x74
   12adc:	uxtb	r3, r3
   12ae0:	cmp	r1, #1
   12ae4:	bls	127a0 <__assert_fail@plt+0x18e4>
   12ae8:	ldr	r2, [sp, #56]	; 0x38
   12aec:	and	r3, r3, r2
   12af0:	uxtb	r3, r3
   12af4:	b	127b0 <__assert_fail@plt+0x18f4>
   12af8:	mov	r3, #2
   12afc:	str	r3, [sp, #176]	; 0xb0
   12b00:	ldr	r2, [sp, #64]	; 0x40
   12b04:	ldr	r3, [sp, #56]	; 0x38
   12b08:	mov	sl, r9
   12b0c:	mov	r9, fp
   12b10:	and	r3, r3, r2
   12b14:	tst	r3, #255	; 0xff
   12b18:	ldr	r3, [sp, #176]	; 0xb0
   12b1c:	movne	r3, #4
   12b20:	str	r3, [sp, #176]	; 0xb0
   12b24:	ldr	r3, [sp, #180]	; 0xb4
   12b28:	mov	ip, #0
   12b2c:	bic	r3, r3, #2
   12b30:	str	r3, [sp, #4]
   12b34:	ldr	r3, [sp, #192]	; 0xc0
   12b38:	ldr	r2, [sp, #44]	; 0x2c
   12b3c:	str	r3, [sp, #16]
   12b40:	ldr	r3, [sp, #188]	; 0xbc
   12b44:	mov	r1, r9
   12b48:	str	r3, [sp, #12]
   12b4c:	ldr	r3, [sp, #176]	; 0xb0
   12b50:	mov	r0, sl
   12b54:	str	r3, [sp]
   12b58:	str	ip, [sp, #8]
   12b5c:	ldr	r3, [sp, #24]
   12b60:	bl	119c0 <__assert_fail@plt+0xb04>
   12b64:	mov	fp, r0
   12b68:	mov	r0, fp
   12b6c:	add	sp, sp, #140	; 0x8c
   12b70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b74:	mov	r4, #92	; 0x5c
   12b78:	mov	r1, #0
   12b7c:	mov	r3, r4
   12b80:	b	12174 <__assert_fail@plt+0x12b8>
   12b84:	mov	r3, #0
   12b88:	ldr	r1, [sp, #52]	; 0x34
   12b8c:	str	r3, [sp, #32]
   12b90:	mov	r4, #63	; 0x3f
   12b94:	b	11f94 <__assert_fail@plt+0x10d8>
   12b98:	cmp	fp, #0
   12b9c:	beq	12bf8 <__assert_fail@plt+0x1d3c>
   12ba0:	mov	r3, #39	; 0x27
   12ba4:	strb	r3, [r9]
   12ba8:	mov	r3, #0
   12bac:	str	r3, [sp, #40]	; 0x28
   12bb0:	mov	r3, #1
   12bb4:	str	r3, [sp, #68]	; 0x44
   12bb8:	ldr	r3, [pc, #448]	; 12d80 <__assert_fail@plt+0x1ec4>
   12bbc:	mov	r8, #1
   12bc0:	str	r3, [sp, #72]	; 0x48
   12bc4:	b	11da8 <__assert_fail@plt+0xeec>
   12bc8:	ldr	r3, [sp, #40]	; 0x28
   12bcc:	mov	sl, r9
   12bd0:	str	r3, [sp, #56]	; 0x38
   12bd4:	mov	r9, fp
   12bd8:	ldr	r2, [sp, #64]	; 0x40
   12bdc:	b	12b10 <__assert_fail@plt+0x1c54>
   12be0:	str	r2, [sp, #36]	; 0x24
   12be4:	b	11ff8 <__assert_fail@plt+0x113c>
   12be8:	mov	r1, #0
   12bec:	str	r3, [sp, #32]
   12bf0:	mov	r4, #63	; 0x3f
   12bf4:	b	11f94 <__assert_fail@plt+0x10d8>
   12bf8:	ldr	r3, [pc, #384]	; 12d80 <__assert_fail@plt+0x1ec4>
   12bfc:	str	r3, [sp, #72]	; 0x48
   12c00:	mov	r3, #0
   12c04:	str	r3, [sp, #40]	; 0x28
   12c08:	mov	r3, #1
   12c0c:	str	r3, [sp, #68]	; 0x44
   12c10:	mov	r8, r3
   12c14:	b	11da8 <__assert_fail@plt+0xeec>
   12c18:	bl	10eb0 <abort@plt>
   12c1c:	cmp	fp, #0
   12c20:	beq	12c80 <__assert_fail@plt+0x1dc4>
   12c24:	mov	r2, #1
   12c28:	mov	r3, #34	; 0x22
   12c2c:	strb	r3, [r9]
   12c30:	mov	r8, r2
   12c34:	mov	r3, r2
   12c38:	str	r2, [sp, #68]	; 0x44
   12c3c:	str	r3, [sp, #56]	; 0x38
   12c40:	ldr	r3, [pc, #316]	; 12d84 <__assert_fail@plt+0x1ec8>
   12c44:	ldr	r1, [sp, #56]	; 0x38
   12c48:	str	r3, [sp, #72]	; 0x48
   12c4c:	ldr	r2, [sp, #176]	; 0xb0
   12c50:	ldr	ip, [sp, #40]	; 0x28
   12c54:	ldr	lr, [sp, #176]	; 0xb0
   12c58:	b	11a8c <__assert_fail@plt+0xbd0>
   12c5c:	ldr	r0, [sp, #44]	; 0x2c
   12c60:	bl	10df0 <strlen@plt>
   12c64:	str	r0, [sp, #24]
   12c68:	b	1296c <__assert_fail@plt+0x1ab0>
   12c6c:	mov	r7, #0
   12c70:	ldr	r1, [sp, #52]	; 0x34
   12c74:	str	r3, [sp, #32]
   12c78:	mov	r4, #48	; 0x30
   12c7c:	b	11f94 <__assert_fail@plt+0x10d8>
   12c80:	mov	r3, #1
   12c84:	str	r3, [sp, #68]	; 0x44
   12c88:	mov	r8, r3
   12c8c:	b	12c3c <__assert_fail@plt+0x1d80>
   12c90:	mov	r3, #2
   12c94:	mov	sl, r9
   12c98:	str	r3, [sp, #176]	; 0xb0
   12c9c:	mov	r9, fp
   12ca0:	ldr	r3, [sp, #56]	; 0x38
   12ca4:	b	12b10 <__assert_fail@plt+0x1c54>
   12ca8:	ldr	r6, [sp, #48]	; 0x30
   12cac:	b	1275c <__assert_fail@plt+0x18a0>
   12cb0:	ldr	r0, [sp, #24]
   12cb4:	mov	ip, r6
   12cb8:	cmp	r0, ip
   12cbc:	mov	r1, r7
   12cc0:	mov	r2, r4
   12cc4:	ldr	r7, [sp, #104]	; 0x68
   12cc8:	ldr	r4, [sp, #32]
   12ccc:	ldr	r6, [sp, #108]	; 0x6c
   12cd0:	ldr	r8, [sp, #112]	; 0x70
   12cd4:	ldr	r5, [sp, #116]	; 0x74
   12cd8:	bls	12d08 <__assert_fail@plt+0x1e4c>
   12cdc:	ldrb	r3, [r2]
   12ce0:	cmp	r3, #0
   12ce4:	bne	12cf8 <__assert_fail@plt+0x1e3c>
   12ce8:	b	12e18 <__assert_fail@plt+0x1f5c>
   12cec:	ldrb	r3, [r2, #1]!
   12cf0:	cmp	r3, #0
   12cf4:	beq	12e18 <__assert_fail@plt+0x1f5c>
   12cf8:	add	r1, r1, #1
   12cfc:	add	r3, sl, r1
   12d00:	cmp	r0, r3
   12d04:	bhi	12cec <__assert_fail@plt+0x1e30>
   12d08:	mov	r2, #0
   12d0c:	mov	r3, r7
   12d10:	str	r2, [sp, #32]
   12d14:	b	12ae0 <__assert_fail@plt+0x1c24>
   12d18:	mov	r1, r7
   12d1c:	ldr	r7, [sp, #104]	; 0x68
   12d20:	mov	r2, #0
   12d24:	ldr	r4, [sp, #32]
   12d28:	ldr	r6, [sp, #108]	; 0x6c
   12d2c:	ldr	r8, [sp, #112]	; 0x70
   12d30:	ldr	r5, [sp, #116]	; 0x74
   12d34:	mov	r3, r7
   12d38:	str	r2, [sp, #32]
   12d3c:	b	12ae0 <__assert_fail@plt+0x1c24>
   12d40:	mov	r3, r5
   12d44:	eor	r3, r3, #1
   12d48:	ldr	r4, [sp, #32]
   12d4c:	mov	r1, r7
   12d50:	str	r5, [sp, #32]
   12d54:	ldr	r7, [sp, #104]	; 0x68
   12d58:	ldr	r6, [sp, #108]	; 0x6c
   12d5c:	ldr	r8, [sp, #112]	; 0x70
   12d60:	ldr	r5, [sp, #116]	; 0x74
   12d64:	uxtb	r3, r3
   12d68:	b	12ae0 <__assert_fail@plt+0x1c24>
   12d6c:	mov	sl, r9
   12d70:	str	r3, [sp, #56]	; 0x38
   12d74:	mov	r9, fp
   12d78:	ldr	r2, [sp, #64]	; 0x40
   12d7c:	b	12b10 <__assert_fail@plt+0x1c54>
   12d80:	andeq	r8, r1, r4, lsr #16
   12d84:	andeq	r8, r1, r0, lsr #16
   12d88:	andeq	r8, r1, r8, lsr #16
   12d8c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   12d90:	ldr	r2, [sp, #44]	; 0x2c
   12d94:	ldrb	r1, [r2, r3]
   12d98:	sub	r2, r1, #33	; 0x21
   12d9c:	uxtb	r2, r2
   12da0:	cmp	r2, #29
   12da4:	bhi	12e24 <__assert_fail@plt+0x1f68>
   12da8:	ldr	r0, [pc, #-36]	; 12d8c <__assert_fail@plt+0x1ed0>
   12dac:	mov	ip, #1
   12db0:	ands	r2, r0, ip, lsl r2
   12db4:	beq	12e44 <__assert_fail@plt+0x1f88>
   12db8:	ldr	r2, [sp, #40]	; 0x28
   12dbc:	cmp	r2, #0
   12dc0:	bne	12f38 <__assert_fail@plt+0x207c>
   12dc4:	add	r2, r8, #1
   12dc8:	cmp	fp, r8
   12dcc:	strbhi	r4, [r9, r8]
   12dd0:	cmp	fp, r2
   12dd4:	movhi	r0, #34	; 0x22
   12dd8:	strbhi	r0, [r9, r2]
   12ddc:	add	r2, r8, #2
   12de0:	cmp	fp, r2
   12de4:	movhi	r0, #34	; 0x22
   12de8:	strbhi	r0, [r9, r2]
   12dec:	add	r2, r8, #3
   12df0:	cmp	fp, r2
   12df4:	mov	sl, r3
   12df8:	ldr	r3, [sp, #40]	; 0x28
   12dfc:	movhi	r0, #63	; 0x3f
   12e00:	mov	r4, r1
   12e04:	strbhi	r0, [r9, r2]
   12e08:	add	r8, r8, #4
   12e0c:	mov	r1, r3
   12e10:	str	r3, [sp, #32]
   12e14:	b	11f94 <__assert_fail@plt+0x10d8>
   12e18:	str	r3, [sp, #32]
   12e1c:	mov	r3, r7
   12e20:	b	12ae0 <__assert_fail@plt+0x1c24>
   12e24:	mov	r1, #0
   12e28:	str	r1, [sp, #32]
   12e2c:	b	11f94 <__assert_fail@plt+0x10d8>
   12e30:	mov	sl, r9
   12e34:	ldr	r3, [sp, #56]	; 0x38
   12e38:	mov	r9, fp
   12e3c:	ldr	r2, [sp, #64]	; 0x40
   12e40:	b	12b10 <__assert_fail@plt+0x1c54>
   12e44:	str	r2, [sp, #32]
   12e48:	mov	r1, #0
   12e4c:	b	11f94 <__assert_fail@plt+0x10d8>
   12e50:	ldr	r2, [sp, #76]	; 0x4c
   12e54:	mov	sl, r9
   12e58:	mov	r9, fp
   12e5c:	mov	fp, r8
   12e60:	ldr	r1, [sp, #72]	; 0x48
   12e64:	cmp	r1, #0
   12e68:	moveq	r3, #0
   12e6c:	andne	r3, r2, #1
   12e70:	cmp	r3, #0
   12e74:	beq	12ea0 <__assert_fail@plt+0x1fe4>
   12e78:	ldrb	r3, [r1]
   12e7c:	cmp	r3, #0
   12e80:	beq	12ea0 <__assert_fail@plt+0x1fe4>
   12e84:	mov	r2, r1
   12e88:	cmp	r9, fp
   12e8c:	strbhi	r3, [sl, fp]
   12e90:	ldrb	r3, [r2, #1]!
   12e94:	add	fp, fp, #1
   12e98:	cmp	r3, #0
   12e9c:	bne	12e88 <__assert_fail@plt+0x1fcc>
   12ea0:	cmp	r9, fp
   12ea4:	movhi	r3, #0
   12ea8:	strbhi	r3, [sl, fp]
   12eac:	b	12b68 <__assert_fail@plt+0x1cac>
   12eb0:	ldr	r3, [sp, #192]	; 0xc0
   12eb4:	mov	ip, #5
   12eb8:	str	r3, [sp, #16]
   12ebc:	ldr	r3, [sp, #188]	; 0xbc
   12ec0:	ldr	r2, [sp, #44]	; 0x2c
   12ec4:	str	r3, [sp, #12]
   12ec8:	ldr	r3, [sp, #184]	; 0xb8
   12ecc:	ldr	r1, [sp, #84]	; 0x54
   12ed0:	str	r3, [sp, #8]
   12ed4:	ldr	r3, [sp, #180]	; 0xb4
   12ed8:	mov	r0, r9
   12edc:	str	r3, [sp, #4]
   12ee0:	str	ip, [sp]
   12ee4:	ldr	r3, [sp, #24]
   12ee8:	bl	119c0 <__assert_fail@plt+0xb04>
   12eec:	mov	fp, r0
   12ef0:	b	12b68 <__assert_fail@plt+0x1cac>
   12ef4:	mov	sl, r9
   12ef8:	mov	r9, fp
   12efc:	mov	fp, r8
   12f00:	b	12e60 <__assert_fail@plt+0x1fa4>
   12f04:	ldr	r1, [sp, #176]	; 0xb0
   12f08:	bl	118a0 <__assert_fail@plt+0x9e4>
   12f0c:	str	r0, [sp, #192]	; 0xc0
   12f10:	b	11e7c <__assert_fail@plt+0xfc0>
   12f14:	ldr	r1, [sp, #176]	; 0xb0
   12f18:	bl	118a0 <__assert_fail@plt+0x9e4>
   12f1c:	str	r0, [sp, #188]	; 0xbc
   12f20:	b	11e5c <__assert_fail@plt+0xfa0>
   12f24:	mov	sl, r9
   12f28:	mov	r2, r3
   12f2c:	mov	r9, fp
   12f30:	mov	fp, r8
   12f34:	b	12e60 <__assert_fail@plt+0x1fa4>
   12f38:	mov	sl, r9
   12f3c:	mov	r9, fp
   12f40:	b	12b24 <__assert_fail@plt+0x1c68>
   12f44:	push	{r4, r5, r6, lr}
   12f48:	mov	r5, r0
   12f4c:	bl	10e08 <__errno_location@plt>
   12f50:	cmp	r5, #0
   12f54:	mov	r1, #48	; 0x30
   12f58:	mov	r4, r0
   12f5c:	ldr	r0, [pc, #16]	; 12f74 <__assert_fail@plt+0x20b8>
   12f60:	ldr	r6, [r4]
   12f64:	movne	r0, r5
   12f68:	bl	167e0 <__assert_fail@plt+0x5924>
   12f6c:	str	r6, [r4]
   12f70:	pop	{r4, r5, r6, pc}
   12f74:	andeq	r9, r2, ip, asr r1
   12f78:	ldr	r3, [pc, #12]	; 12f8c <__assert_fail@plt+0x20d0>
   12f7c:	cmp	r0, #0
   12f80:	moveq	r0, r3
   12f84:	ldr	r0, [r0]
   12f88:	bx	lr
   12f8c:	andeq	r9, r2, ip, asr r1
   12f90:	ldr	r3, [pc, #12]	; 12fa4 <__assert_fail@plt+0x20e8>
   12f94:	cmp	r0, #0
   12f98:	moveq	r0, r3
   12f9c:	str	r1, [r0]
   12fa0:	bx	lr
   12fa4:	andeq	r9, r2, ip, asr r1
   12fa8:	ldr	r3, [pc, #52]	; 12fe4 <__assert_fail@plt+0x2128>
   12fac:	cmp	r0, #0
   12fb0:	moveq	r0, r3
   12fb4:	add	r3, r0, #8
   12fb8:	push	{lr}		; (str lr, [sp, #-4]!)
   12fbc:	lsr	lr, r1, #5
   12fc0:	and	r1, r1, #31
   12fc4:	ldr	ip, [r3, lr, lsl #2]
   12fc8:	lsr	r0, ip, r1
   12fcc:	eor	r2, r2, r0
   12fd0:	and	r2, r2, #1
   12fd4:	and	r0, r0, #1
   12fd8:	eor	r1, ip, r2, lsl r1
   12fdc:	str	r1, [r3, lr, lsl #2]
   12fe0:	pop	{pc}		; (ldr pc, [sp], #4)
   12fe4:	andeq	r9, r2, ip, asr r1
   12fe8:	ldr	r3, [pc, #16]	; 13000 <__assert_fail@plt+0x2144>
   12fec:	cmp	r0, #0
   12ff0:	movne	r3, r0
   12ff4:	ldr	r0, [r3, #4]
   12ff8:	str	r1, [r3, #4]
   12ffc:	bx	lr
   13000:	andeq	r9, r2, ip, asr r1
   13004:	ldr	r3, [pc, #44]	; 13038 <__assert_fail@plt+0x217c>
   13008:	cmp	r0, #0
   1300c:	moveq	r0, r3
   13010:	mov	ip, #10
   13014:	cmp	r2, #0
   13018:	cmpne	r1, #0
   1301c:	str	ip, [r0]
   13020:	beq	13030 <__assert_fail@plt+0x2174>
   13024:	str	r1, [r0, #40]	; 0x28
   13028:	str	r2, [r0, #44]	; 0x2c
   1302c:	bx	lr
   13030:	push	{r4, lr}
   13034:	bl	10eb0 <abort@plt>
   13038:	andeq	r9, r2, ip, asr r1
   1303c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13040:	sub	sp, sp, #24
   13044:	ldr	ip, [pc, #108]	; 130b8 <__assert_fail@plt+0x21fc>
   13048:	ldr	r4, [sp, #56]	; 0x38
   1304c:	mov	r9, r2
   13050:	cmp	r4, #0
   13054:	moveq	r4, ip
   13058:	mov	sl, r3
   1305c:	mov	r7, r0
   13060:	mov	r8, r1
   13064:	bl	10e08 <__errno_location@plt>
   13068:	ldr	r3, [r4, #44]	; 0x2c
   1306c:	mov	r1, r8
   13070:	ldr	r6, [r0]
   13074:	str	r3, [sp, #16]
   13078:	ldr	r2, [r4, #40]	; 0x28
   1307c:	add	r3, r4, #8
   13080:	str	r3, [sp, #8]
   13084:	str	r2, [sp, #12]
   13088:	ldr	r2, [r4, #4]
   1308c:	mov	r5, r0
   13090:	str	r2, [sp, #4]
   13094:	ldr	ip, [r4]
   13098:	mov	r3, sl
   1309c:	mov	r2, r9
   130a0:	mov	r0, r7
   130a4:	str	ip, [sp]
   130a8:	bl	119c0 <__assert_fail@plt+0xb04>
   130ac:	str	r6, [r5]
   130b0:	add	sp, sp, #24
   130b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   130b8:	andeq	r9, r2, ip, asr r1
   130bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130c0:	cmp	r2, #0
   130c4:	sub	sp, sp, #36	; 0x24
   130c8:	ldr	r4, [pc, #164]	; 13174 <__assert_fail@plt+0x22b8>
   130cc:	mov	r8, r1
   130d0:	movne	r4, r2
   130d4:	mov	r7, r0
   130d8:	bl	10e08 <__errno_location@plt>
   130dc:	ldr	r3, [r4, #44]	; 0x2c
   130e0:	ldr	r5, [r4, #4]
   130e4:	add	r9, r4, #8
   130e8:	orr	r5, r5, #1
   130ec:	mov	r1, #0
   130f0:	mov	r2, r7
   130f4:	ldr	fp, [r0]
   130f8:	str	r3, [sp, #16]
   130fc:	ldr	r3, [r4, #40]	; 0x28
   13100:	stmib	sp, {r5, r9}
   13104:	str	r3, [sp, #12]
   13108:	ldr	r3, [r4]
   1310c:	mov	r6, r0
   13110:	str	r3, [sp]
   13114:	mov	r0, r1
   13118:	mov	r3, r8
   1311c:	bl	119c0 <__assert_fail@plt+0xb04>
   13120:	add	r1, r0, #1
   13124:	mov	r0, r1
   13128:	str	r1, [sp, #28]
   1312c:	bl	1629c <__assert_fail@plt+0x53e0>
   13130:	ldr	r3, [r4, #44]	; 0x2c
   13134:	ldr	r1, [sp, #28]
   13138:	str	r3, [sp, #16]
   1313c:	ldr	r3, [r4, #40]	; 0x28
   13140:	str	r5, [sp, #4]
   13144:	str	r3, [sp, #12]
   13148:	str	r9, [sp, #8]
   1314c:	ldr	ip, [r4]
   13150:	mov	r3, r8
   13154:	mov	r2, r7
   13158:	str	ip, [sp]
   1315c:	mov	sl, r0
   13160:	bl	119c0 <__assert_fail@plt+0xb04>
   13164:	mov	r0, sl
   13168:	str	fp, [r6]
   1316c:	add	sp, sp, #36	; 0x24
   13170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13174:	andeq	r9, r2, ip, asr r1
   13178:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1317c:	cmp	r3, #0
   13180:	sub	sp, sp, #44	; 0x2c
   13184:	ldr	r4, [pc, #192]	; 1324c <__assert_fail@plt+0x2390>
   13188:	mov	r6, r2
   1318c:	movne	r4, r3
   13190:	mov	r9, r1
   13194:	mov	r8, r0
   13198:	bl	10e08 <__errno_location@plt>
   1319c:	ldr	r3, [r4, #44]	; 0x2c
   131a0:	ldr	r5, [r4, #4]
   131a4:	add	sl, r4, #8
   131a8:	cmp	r6, #0
   131ac:	orreq	r5, r5, #1
   131b0:	mov	r1, #0
   131b4:	ldr	r2, [r0]
   131b8:	str	r3, [sp, #16]
   131bc:	ldr	r3, [r4, #40]	; 0x28
   131c0:	stmib	sp, {r5, sl}
   131c4:	str	r3, [sp, #12]
   131c8:	ldr	r3, [r4]
   131cc:	mov	r7, r0
   131d0:	str	r2, [sp, #28]
   131d4:	str	r3, [sp]
   131d8:	mov	r2, r8
   131dc:	mov	r3, r9
   131e0:	mov	r0, r1
   131e4:	bl	119c0 <__assert_fail@plt+0xb04>
   131e8:	add	r1, r0, #1
   131ec:	mov	fp, r0
   131f0:	mov	r0, r1
   131f4:	str	r1, [sp, #36]	; 0x24
   131f8:	bl	1629c <__assert_fail@plt+0x53e0>
   131fc:	ldr	r3, [r4, #44]	; 0x2c
   13200:	mov	r2, r8
   13204:	str	r3, [sp, #16]
   13208:	ldr	r3, [r4, #40]	; 0x28
   1320c:	str	r5, [sp, #4]
   13210:	str	r3, [sp, #12]
   13214:	str	sl, [sp, #8]
   13218:	ldr	ip, [r4]
   1321c:	ldr	r1, [sp, #36]	; 0x24
   13220:	mov	r3, r9
   13224:	str	ip, [sp]
   13228:	str	r0, [sp, #32]
   1322c:	bl	119c0 <__assert_fail@plt+0xb04>
   13230:	ldr	r2, [sp, #28]
   13234:	cmp	r6, #0
   13238:	str	r2, [r7]
   1323c:	ldr	r0, [sp, #32]
   13240:	strne	fp, [r6]
   13244:	add	sp, sp, #44	; 0x2c
   13248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1324c:	andeq	r9, r2, ip, asr r1
   13250:	push	{r4, r5, r6, r7, r8, lr}
   13254:	ldr	r6, [pc, #116]	; 132d0 <__assert_fail@plt+0x2414>
   13258:	ldr	r3, [r6, #4]
   1325c:	ldr	r7, [r6]
   13260:	cmp	r3, #1
   13264:	movgt	r5, r7
   13268:	movgt	r4, #1
   1326c:	ble	1328c <__assert_fail@plt+0x23d0>
   13270:	ldr	r0, [r5, #12]
   13274:	bl	17b90 <__assert_fail@plt+0x6cd4>
   13278:	ldr	r3, [r6, #4]
   1327c:	add	r4, r4, #1
   13280:	cmp	r3, r4
   13284:	add	r5, r5, #8
   13288:	bgt	13270 <__assert_fail@plt+0x23b4>
   1328c:	ldr	r0, [r7, #4]
   13290:	ldr	r4, [pc, #60]	; 132d4 <__assert_fail@plt+0x2418>
   13294:	cmp	r0, r4
   13298:	beq	132ac <__assert_fail@plt+0x23f0>
   1329c:	bl	17b90 <__assert_fail@plt+0x6cd4>
   132a0:	mov	r3, #256	; 0x100
   132a4:	str	r4, [r6, #12]
   132a8:	str	r3, [r6, #8]
   132ac:	ldr	r4, [pc, #36]	; 132d8 <__assert_fail@plt+0x241c>
   132b0:	cmp	r7, r4
   132b4:	beq	132c4 <__assert_fail@plt+0x2408>
   132b8:	mov	r0, r7
   132bc:	bl	17b90 <__assert_fail@plt+0x6cd4>
   132c0:	str	r4, [r6]
   132c4:	mov	r3, #1
   132c8:	str	r3, [r6, #4]
   132cc:	pop	{r4, r5, r6, r7, r8, pc}
   132d0:	andeq	r9, r2, ip, ror #1
   132d4:	andeq	r9, r2, ip, lsl #3
   132d8:	strdeq	r9, [r2], -r4
   132dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132e0:	sub	sp, sp, #44	; 0x2c
   132e4:	mov	r5, r0
   132e8:	mov	sl, r1
   132ec:	bl	10e08 <__errno_location@plt>
   132f0:	ldr	r4, [pc, #400]	; 13488 <__assert_fail@plt+0x25cc>
   132f4:	cmn	r5, #-2147483647	; 0x80000001
   132f8:	ldr	r6, [r4]
   132fc:	mov	r8, r0
   13300:	movne	r0, #0
   13304:	moveq	r0, #1
   13308:	ldr	r3, [r8]
   1330c:	orrs	r0, r0, r5, lsr #31
   13310:	str	r3, [sp, #24]
   13314:	bne	13484 <__assert_fail@plt+0x25c8>
   13318:	ldr	r2, [r4, #4]
   1331c:	cmp	r5, r2
   13320:	blt	13380 <__assert_fail@plt+0x24c4>
   13324:	add	r7, r4, #8
   13328:	cmp	r6, r7
   1332c:	str	r2, [sp, #36]	; 0x24
   13330:	beq	13454 <__assert_fail@plt+0x2598>
   13334:	mov	r3, #8
   13338:	sub	r2, r5, r2
   1333c:	mov	r0, r6
   13340:	str	r3, [sp]
   13344:	add	r2, r2, #1
   13348:	mvn	r3, #-2147483648	; 0x80000000
   1334c:	add	r1, sp, #36	; 0x24
   13350:	bl	164b8 <__assert_fail@plt+0x55fc>
   13354:	mov	r6, r0
   13358:	str	r0, [r4]
   1335c:	ldr	r0, [r4, #4]
   13360:	ldr	r2, [sp, #36]	; 0x24
   13364:	mov	r1, #0
   13368:	sub	r2, r2, r0
   1336c:	add	r0, r6, r0, lsl #3
   13370:	lsl	r2, r2, #3
   13374:	bl	10e20 <memset@plt>
   13378:	ldr	r3, [sp, #36]	; 0x24
   1337c:	str	r3, [r4, #4]
   13380:	ldr	r4, [pc, #260]	; 1348c <__assert_fail@plt+0x25d0>
   13384:	add	fp, r6, r5, lsl #3
   13388:	ldr	r9, [r6, r5, lsl #3]
   1338c:	ldr	r0, [r4, #4]
   13390:	ldr	r3, [r4]
   13394:	ldr	r7, [fp, #4]
   13398:	ldr	r1, [r4, #44]	; 0x2c
   1339c:	ldr	r2, [r4, #40]	; 0x28
   133a0:	orr	r0, r0, #1
   133a4:	str	r3, [sp]
   133a8:	add	r3, r4, #8
   133ac:	str	r0, [sp, #28]
   133b0:	str	r0, [sp, #4]
   133b4:	str	r1, [sp, #16]
   133b8:	str	r2, [sp, #12]
   133bc:	str	r3, [sp, #8]
   133c0:	mov	r0, r7
   133c4:	mov	r1, r9
   133c8:	mvn	r3, #0
   133cc:	mov	r2, sl
   133d0:	bl	119c0 <__assert_fail@plt+0xb04>
   133d4:	cmp	r9, r0
   133d8:	bhi	13440 <__assert_fail@plt+0x2584>
   133dc:	add	r3, r4, #48	; 0x30
   133e0:	add	r9, r0, #1
   133e4:	cmp	r7, r3
   133e8:	str	r9, [r6, r5, lsl #3]
   133ec:	beq	133f8 <__assert_fail@plt+0x253c>
   133f0:	mov	r0, r7
   133f4:	bl	17b90 <__assert_fail@plt+0x6cd4>
   133f8:	mov	r0, r9
   133fc:	bl	1629c <__assert_fail@plt+0x53e0>
   13400:	ldr	ip, [r4, #44]	; 0x2c
   13404:	ldr	r3, [r4]
   13408:	ldr	lr, [r4, #40]	; 0x28
   1340c:	ldr	r4, [pc, #124]	; 13490 <__assert_fail@plt+0x25d4>
   13410:	mov	r2, sl
   13414:	mov	r1, r9
   13418:	str	r0, [fp, #4]
   1341c:	str	r4, [sp, #8]
   13420:	ldr	r4, [sp, #28]
   13424:	str	r3, [sp]
   13428:	str	r4, [sp, #4]
   1342c:	str	ip, [sp, #16]
   13430:	str	lr, [sp, #12]
   13434:	mvn	r3, #0
   13438:	mov	r7, r0
   1343c:	bl	119c0 <__assert_fail@plt+0xb04>
   13440:	ldr	r3, [sp, #24]
   13444:	mov	r0, r7
   13448:	str	r3, [r8]
   1344c:	add	sp, sp, #44	; 0x2c
   13450:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13454:	mov	r3, #8
   13458:	sub	r2, r5, r2
   1345c:	str	r3, [sp]
   13460:	add	r1, sp, #36	; 0x24
   13464:	add	r2, r2, #1
   13468:	mvn	r3, #-2147483648	; 0x80000000
   1346c:	bl	164b8 <__assert_fail@plt+0x55fc>
   13470:	mov	r6, r0
   13474:	ldm	r7, {r0, r1}
   13478:	str	r6, [r4]
   1347c:	stm	r6, {r0, r1}
   13480:	b	1335c <__assert_fail@plt+0x24a0>
   13484:	bl	10eb0 <abort@plt>
   13488:	andeq	r9, r2, ip, ror #1
   1348c:	andeq	r9, r2, ip, asr r1
   13490:	andeq	r9, r2, r4, ror #2
   13494:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13498:	sub	sp, sp, #52	; 0x34
   1349c:	mov	r5, r0
   134a0:	mov	sl, r1
   134a4:	mov	fp, r2
   134a8:	bl	10e08 <__errno_location@plt>
   134ac:	ldr	r4, [pc, #408]	; 1364c <__assert_fail@plt+0x2790>
   134b0:	cmn	r5, #-2147483647	; 0x80000001
   134b4:	ldr	r6, [r4]
   134b8:	mov	r8, r0
   134bc:	movne	r0, #0
   134c0:	moveq	r0, #1
   134c4:	ldr	r3, [r8]
   134c8:	orrs	r0, r0, r5, lsr #31
   134cc:	str	r3, [sp, #28]
   134d0:	bne	13648 <__assert_fail@plt+0x278c>
   134d4:	ldr	r2, [r4, #4]
   134d8:	cmp	r5, r2
   134dc:	blt	1353c <__assert_fail@plt+0x2680>
   134e0:	add	r7, r4, #8
   134e4:	cmp	r6, r7
   134e8:	str	r2, [sp, #44]	; 0x2c
   134ec:	beq	13618 <__assert_fail@plt+0x275c>
   134f0:	mov	r3, #8
   134f4:	sub	r2, r5, r2
   134f8:	mov	r0, r6
   134fc:	str	r3, [sp]
   13500:	add	r2, r2, #1
   13504:	mvn	r3, #-2147483648	; 0x80000000
   13508:	add	r1, sp, #44	; 0x2c
   1350c:	bl	164b8 <__assert_fail@plt+0x55fc>
   13510:	mov	r6, r0
   13514:	str	r0, [r4]
   13518:	ldr	r0, [r4, #4]
   1351c:	ldr	r2, [sp, #44]	; 0x2c
   13520:	mov	r1, #0
   13524:	sub	r2, r2, r0
   13528:	add	r0, r6, r0, lsl #3
   1352c:	lsl	r2, r2, #3
   13530:	bl	10e20 <memset@plt>
   13534:	ldr	r3, [sp, #44]	; 0x2c
   13538:	str	r3, [r4, #4]
   1353c:	ldr	r4, [pc, #268]	; 13650 <__assert_fail@plt+0x2794>
   13540:	add	r3, r6, r5, lsl #3
   13544:	str	r3, [sp, #32]
   13548:	ldr	r7, [r3, #4]
   1354c:	ldr	r0, [r4, #4]
   13550:	ldr	r3, [r4]
   13554:	ldr	r9, [r6, r5, lsl #3]
   13558:	ldr	r1, [r4, #44]	; 0x2c
   1355c:	ldr	r2, [r4, #40]	; 0x28
   13560:	orr	r0, r0, #1
   13564:	str	r3, [sp]
   13568:	add	r3, r4, #8
   1356c:	str	r0, [sp, #36]	; 0x24
   13570:	str	r0, [sp, #4]
   13574:	str	r1, [sp, #16]
   13578:	str	r2, [sp, #12]
   1357c:	str	r3, [sp, #8]
   13580:	mov	r0, r7
   13584:	mov	r1, r9
   13588:	mov	r3, fp
   1358c:	mov	r2, sl
   13590:	bl	119c0 <__assert_fail@plt+0xb04>
   13594:	cmp	r9, r0
   13598:	bhi	13604 <__assert_fail@plt+0x2748>
   1359c:	add	r3, r4, #48	; 0x30
   135a0:	add	r9, r0, #1
   135a4:	cmp	r7, r3
   135a8:	str	r9, [r6, r5, lsl #3]
   135ac:	beq	135b8 <__assert_fail@plt+0x26fc>
   135b0:	mov	r0, r7
   135b4:	bl	17b90 <__assert_fail@plt+0x6cd4>
   135b8:	mov	r0, r9
   135bc:	bl	1629c <__assert_fail@plt+0x53e0>
   135c0:	ldr	ip, [sp, #32]
   135c4:	ldr	lr, [r4, #44]	; 0x2c
   135c8:	ldr	r5, [r4, #40]	; 0x28
   135cc:	mov	r3, fp
   135d0:	mov	r2, sl
   135d4:	mov	r1, r9
   135d8:	str	r0, [ip, #4]
   135dc:	ldr	ip, [r4]
   135e0:	ldr	r4, [pc, #108]	; 13654 <__assert_fail@plt+0x2798>
   135e4:	str	lr, [sp, #16]
   135e8:	str	r4, [sp, #8]
   135ec:	ldr	r4, [sp, #36]	; 0x24
   135f0:	str	r5, [sp, #12]
   135f4:	str	r4, [sp, #4]
   135f8:	str	ip, [sp]
   135fc:	mov	r7, r0
   13600:	bl	119c0 <__assert_fail@plt+0xb04>
   13604:	ldr	r3, [sp, #28]
   13608:	mov	r0, r7
   1360c:	str	r3, [r8]
   13610:	add	sp, sp, #52	; 0x34
   13614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13618:	mov	r3, #8
   1361c:	sub	r2, r5, r2
   13620:	str	r3, [sp]
   13624:	add	r1, sp, #44	; 0x2c
   13628:	add	r2, r2, #1
   1362c:	mvn	r3, #-2147483648	; 0x80000000
   13630:	bl	164b8 <__assert_fail@plt+0x55fc>
   13634:	mov	r6, r0
   13638:	ldm	r7, {r0, r1}
   1363c:	str	r6, [r4]
   13640:	stm	r6, {r0, r1}
   13644:	b	13518 <__assert_fail@plt+0x265c>
   13648:	bl	10eb0 <abort@plt>
   1364c:	andeq	r9, r2, ip, ror #1
   13650:	andeq	r9, r2, ip, asr r1
   13654:	andeq	r9, r2, r4, ror #2
   13658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1365c:	sub	sp, sp, #44	; 0x2c
   13660:	mov	sl, r0
   13664:	bl	10e08 <__errno_location@plt>
   13668:	ldr	r4, [pc, #352]	; 137d0 <__assert_fail@plt+0x2914>
   1366c:	ldr	r2, [r4, #4]
   13670:	ldr	r5, [r4]
   13674:	cmp	r2, #0
   13678:	ldr	r3, [r0]
   1367c:	mov	r8, r0
   13680:	str	r3, [sp, #28]
   13684:	bgt	136e0 <__assert_fail@plt+0x2824>
   13688:	add	r6, r4, #8
   1368c:	cmp	r5, r6
   13690:	str	r2, [sp, #36]	; 0x24
   13694:	beq	137a0 <__assert_fail@plt+0x28e4>
   13698:	mov	r3, #8
   1369c:	mov	r0, r5
   136a0:	str	r3, [sp]
   136a4:	rsb	r2, r2, #1
   136a8:	mvn	r3, #-2147483648	; 0x80000000
   136ac:	add	r1, sp, #36	; 0x24
   136b0:	bl	164b8 <__assert_fail@plt+0x55fc>
   136b4:	mov	r5, r0
   136b8:	str	r0, [r4]
   136bc:	ldr	r0, [r4, #4]
   136c0:	ldr	r2, [sp, #36]	; 0x24
   136c4:	mov	r1, #0
   136c8:	sub	r2, r2, r0
   136cc:	add	r0, r5, r0, lsl #3
   136d0:	lsl	r2, r2, #3
   136d4:	bl	10e20 <memset@plt>
   136d8:	ldr	r3, [sp, #36]	; 0x24
   136dc:	str	r3, [r4, #4]
   136e0:	ldr	r4, [pc, #236]	; 137d4 <__assert_fail@plt+0x2918>
   136e4:	ldr	r9, [r5]
   136e8:	ldr	r6, [r5, #4]
   136ec:	ldr	r7, [r4, #4]
   136f0:	ldr	r1, [r4, #44]	; 0x2c
   136f4:	ldr	r2, [r4, #40]	; 0x28
   136f8:	ldr	r3, [r4]
   136fc:	orr	r7, r7, #1
   13700:	add	fp, r4, #8
   13704:	str	r1, [sp, #16]
   13708:	str	r2, [sp, #12]
   1370c:	str	r3, [sp]
   13710:	str	r7, [sp, #4]
   13714:	str	fp, [sp, #8]
   13718:	mov	r1, r9
   1371c:	mov	r0, r6
   13720:	mvn	r3, #0
   13724:	mov	r2, sl
   13728:	bl	119c0 <__assert_fail@plt+0xb04>
   1372c:	cmp	r9, r0
   13730:	bhi	1378c <__assert_fail@plt+0x28d0>
   13734:	add	r3, r4, #48	; 0x30
   13738:	add	r9, r0, #1
   1373c:	cmp	r6, r3
   13740:	str	r9, [r5]
   13744:	beq	13750 <__assert_fail@plt+0x2894>
   13748:	mov	r0, r6
   1374c:	bl	17b90 <__assert_fail@plt+0x6cd4>
   13750:	mov	r0, r9
   13754:	bl	1629c <__assert_fail@plt+0x53e0>
   13758:	ldr	ip, [r4, #44]	; 0x2c
   1375c:	ldr	r3, [r4]
   13760:	ldr	lr, [r4, #40]	; 0x28
   13764:	mov	r2, sl
   13768:	mov	r1, r9
   1376c:	str	r0, [r5, #4]
   13770:	str	r3, [sp]
   13774:	stmib	sp, {r7, fp}
   13778:	str	ip, [sp, #16]
   1377c:	str	lr, [sp, #12]
   13780:	mvn	r3, #0
   13784:	mov	r6, r0
   13788:	bl	119c0 <__assert_fail@plt+0xb04>
   1378c:	ldr	r3, [sp, #28]
   13790:	mov	r0, r6
   13794:	str	r3, [r8]
   13798:	add	sp, sp, #44	; 0x2c
   1379c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137a0:	mov	r3, #8
   137a4:	str	r3, [sp]
   137a8:	add	r1, sp, #36	; 0x24
   137ac:	rsb	r2, r2, #1
   137b0:	mvn	r3, #-2147483648	; 0x80000000
   137b4:	mov	r0, #0
   137b8:	bl	164b8 <__assert_fail@plt+0x55fc>
   137bc:	mov	r5, r0
   137c0:	ldm	r6, {r0, r1}
   137c4:	str	r5, [r4]
   137c8:	stm	r5, {r0, r1}
   137cc:	b	136bc <__assert_fail@plt+0x2800>
   137d0:	andeq	r9, r2, ip, ror #1
   137d4:	andeq	r9, r2, ip, asr r1
   137d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137dc:	sub	sp, sp, #44	; 0x2c
   137e0:	mov	r9, r0
   137e4:	mov	sl, r1
   137e8:	bl	10e08 <__errno_location@plt>
   137ec:	ldr	r4, [pc, #364]	; 13960 <__assert_fail@plt+0x2aa4>
   137f0:	ldr	r2, [r4, #4]
   137f4:	ldr	r5, [r4]
   137f8:	cmp	r2, #0
   137fc:	ldr	r3, [r0]
   13800:	mov	r7, r0
   13804:	str	r3, [sp, #24]
   13808:	bgt	13864 <__assert_fail@plt+0x29a8>
   1380c:	add	r6, r4, #8
   13810:	cmp	r5, r6
   13814:	str	r2, [sp, #36]	; 0x24
   13818:	beq	13930 <__assert_fail@plt+0x2a74>
   1381c:	mov	r3, #8
   13820:	mov	r0, r5
   13824:	str	r3, [sp]
   13828:	rsb	r2, r2, #1
   1382c:	mvn	r3, #-2147483648	; 0x80000000
   13830:	add	r1, sp, #36	; 0x24
   13834:	bl	164b8 <__assert_fail@plt+0x55fc>
   13838:	mov	r5, r0
   1383c:	str	r0, [r4]
   13840:	ldr	r0, [r4, #4]
   13844:	ldr	r2, [sp, #36]	; 0x24
   13848:	mov	r1, #0
   1384c:	sub	r2, r2, r0
   13850:	add	r0, r5, r0, lsl #3
   13854:	lsl	r2, r2, #3
   13858:	bl	10e20 <memset@plt>
   1385c:	ldr	r3, [sp, #36]	; 0x24
   13860:	str	r3, [r4, #4]
   13864:	ldr	r4, [pc, #248]	; 13964 <__assert_fail@plt+0x2aa8>
   13868:	ldr	r8, [r5]
   1386c:	ldr	r6, [r5, #4]
   13870:	ldr	r0, [r4, #4]
   13874:	ldr	r1, [r4, #44]	; 0x2c
   13878:	ldr	r2, [r4, #40]	; 0x28
   1387c:	ldr	r3, [r4]
   13880:	orr	r0, r0, #1
   13884:	add	fp, r4, #8
   13888:	str	r0, [sp, #28]
   1388c:	str	r0, [sp, #4]
   13890:	str	r1, [sp, #16]
   13894:	str	r2, [sp, #12]
   13898:	str	r3, [sp]
   1389c:	str	fp, [sp, #8]
   138a0:	mov	r1, r8
   138a4:	mov	r0, r6
   138a8:	mov	r3, sl
   138ac:	mov	r2, r9
   138b0:	bl	119c0 <__assert_fail@plt+0xb04>
   138b4:	cmp	r8, r0
   138b8:	bhi	1391c <__assert_fail@plt+0x2a60>
   138bc:	add	r3, r4, #48	; 0x30
   138c0:	add	r8, r0, #1
   138c4:	cmp	r6, r3
   138c8:	str	r8, [r5]
   138cc:	beq	138d8 <__assert_fail@plt+0x2a1c>
   138d0:	mov	r0, r6
   138d4:	bl	17b90 <__assert_fail@plt+0x6cd4>
   138d8:	mov	r0, r8
   138dc:	bl	1629c <__assert_fail@plt+0x53e0>
   138e0:	ldr	lr, [r4, #44]	; 0x2c
   138e4:	ldr	ip, [r4]
   138e8:	mov	r3, sl
   138ec:	mov	r2, r9
   138f0:	mov	r1, r8
   138f4:	str	r0, [r5, #4]
   138f8:	ldr	r5, [r4, #40]	; 0x28
   138fc:	ldr	r4, [sp, #28]
   13900:	str	fp, [sp, #8]
   13904:	str	r4, [sp, #4]
   13908:	str	lr, [sp, #16]
   1390c:	str	r5, [sp, #12]
   13910:	str	ip, [sp]
   13914:	mov	r6, r0
   13918:	bl	119c0 <__assert_fail@plt+0xb04>
   1391c:	ldr	r3, [sp, #24]
   13920:	mov	r0, r6
   13924:	str	r3, [r7]
   13928:	add	sp, sp, #44	; 0x2c
   1392c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13930:	mov	r3, #8
   13934:	str	r3, [sp]
   13938:	add	r1, sp, #36	; 0x24
   1393c:	rsb	r2, r2, #1
   13940:	mvn	r3, #-2147483648	; 0x80000000
   13944:	mov	r0, #0
   13948:	bl	164b8 <__assert_fail@plt+0x55fc>
   1394c:	mov	r5, r0
   13950:	ldm	r6, {r0, r1}
   13954:	str	r5, [r4]
   13958:	stm	r5, {r0, r1}
   1395c:	b	13840 <__assert_fail@plt+0x2984>
   13960:	andeq	r9, r2, ip, ror #1
   13964:	andeq	r9, r2, ip, asr r1
   13968:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1396c:	sub	sp, sp, #132	; 0x84
   13970:	mov	r5, r1
   13974:	mov	r4, r0
   13978:	mov	r9, r2
   1397c:	add	r0, sp, #80	; 0x50
   13980:	mov	r2, #48	; 0x30
   13984:	mov	r1, #0
   13988:	bl	10e20 <memset@plt>
   1398c:	cmp	r5, #10
   13990:	beq	13b48 <__assert_fail@plt+0x2c8c>
   13994:	add	lr, sp, #80	; 0x50
   13998:	str	r5, [sp, #80]	; 0x50
   1399c:	ldm	lr!, {r0, r1, r2, r3}
   139a0:	add	ip, sp, #32
   139a4:	ldr	r6, [pc, #416]	; 13b4c <__assert_fail@plt+0x2c90>
   139a8:	stmia	ip!, {r0, r1, r2, r3}
   139ac:	ldm	lr!, {r0, r1, r2, r3}
   139b0:	stmia	ip!, {r0, r1, r2, r3}
   139b4:	ldm	lr, {r0, r1, r2, r3}
   139b8:	stm	ip, {r0, r1, r2, r3}
   139bc:	bl	10e08 <__errno_location@plt>
   139c0:	cmn	r4, #-2147483647	; 0x80000001
   139c4:	ldr	r5, [r6]
   139c8:	mov	r7, r0
   139cc:	movne	r0, #0
   139d0:	moveq	r0, #1
   139d4:	ldr	r3, [r7]
   139d8:	orrs	r0, r0, r4, lsr #31
   139dc:	str	r3, [sp, #24]
   139e0:	bne	13b48 <__assert_fail@plt+0x2c8c>
   139e4:	ldr	r2, [r6, #4]
   139e8:	cmp	r4, r2
   139ec:	blt	13a4c <__assert_fail@plt+0x2b90>
   139f0:	add	r8, r6, #8
   139f4:	cmp	r5, r8
   139f8:	str	r2, [sp, #80]	; 0x50
   139fc:	beq	13b18 <__assert_fail@plt+0x2c5c>
   13a00:	mov	r3, #8
   13a04:	sub	r2, r4, r2
   13a08:	mov	r0, r5
   13a0c:	str	r3, [sp]
   13a10:	add	r2, r2, #1
   13a14:	add	r1, sp, #80	; 0x50
   13a18:	mvn	r3, #-2147483648	; 0x80000000
   13a1c:	bl	164b8 <__assert_fail@plt+0x55fc>
   13a20:	mov	r5, r0
   13a24:	str	r0, [r6]
   13a28:	ldr	r0, [r6, #4]
   13a2c:	ldr	r2, [sp, #80]	; 0x50
   13a30:	mov	r1, #0
   13a34:	sub	r2, r2, r0
   13a38:	add	r0, r5, r0, lsl #3
   13a3c:	lsl	r2, r2, #3
   13a40:	bl	10e20 <memset@plt>
   13a44:	ldr	r3, [sp, #80]	; 0x50
   13a48:	str	r3, [r6, #4]
   13a4c:	add	fp, r5, r4, lsl #3
   13a50:	ldr	r1, [sp, #36]	; 0x24
   13a54:	ldr	r8, [r5, r4, lsl #3]
   13a58:	ldr	r6, [fp, #4]
   13a5c:	ldr	r2, [sp, #72]	; 0x48
   13a60:	ldr	r3, [sp, #32]
   13a64:	ldr	ip, [sp, #76]	; 0x4c
   13a68:	orr	r1, r1, #1
   13a6c:	add	sl, sp, #40	; 0x28
   13a70:	str	r1, [sp, #28]
   13a74:	str	r1, [sp, #4]
   13a78:	str	r2, [sp, #12]
   13a7c:	str	r3, [sp]
   13a80:	mov	r0, r6
   13a84:	mov	r1, r8
   13a88:	str	ip, [sp, #16]
   13a8c:	str	sl, [sp, #8]
   13a90:	mvn	r3, #0
   13a94:	mov	r2, r9
   13a98:	bl	119c0 <__assert_fail@plt+0xb04>
   13a9c:	cmp	r8, r0
   13aa0:	bhi	13b04 <__assert_fail@plt+0x2c48>
   13aa4:	ldr	r3, [pc, #164]	; 13b50 <__assert_fail@plt+0x2c94>
   13aa8:	add	r8, r0, #1
   13aac:	cmp	r6, r3
   13ab0:	str	r8, [r5, r4, lsl #3]
   13ab4:	beq	13ac0 <__assert_fail@plt+0x2c04>
   13ab8:	mov	r0, r6
   13abc:	bl	17b90 <__assert_fail@plt+0x6cd4>
   13ac0:	mov	r0, r8
   13ac4:	bl	1629c <__assert_fail@plt+0x53e0>
   13ac8:	ldr	lr, [sp, #76]	; 0x4c
   13acc:	ldr	r3, [sp, #32]
   13ad0:	ldr	ip, [sp, #72]	; 0x48
   13ad4:	ldr	r4, [sp, #28]
   13ad8:	mov	r2, r9
   13adc:	mov	r1, r8
   13ae0:	str	r0, [fp, #4]
   13ae4:	str	r3, [sp]
   13ae8:	str	sl, [sp, #8]
   13aec:	str	r4, [sp, #4]
   13af0:	str	lr, [sp, #16]
   13af4:	str	ip, [sp, #12]
   13af8:	mvn	r3, #0
   13afc:	mov	r6, r0
   13b00:	bl	119c0 <__assert_fail@plt+0xb04>
   13b04:	ldr	r3, [sp, #24]
   13b08:	mov	r0, r6
   13b0c:	str	r3, [r7]
   13b10:	add	sp, sp, #132	; 0x84
   13b14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b18:	mov	r3, #8
   13b1c:	sub	r2, r4, r2
   13b20:	add	r1, sp, #80	; 0x50
   13b24:	str	r3, [sp]
   13b28:	add	r2, r2, #1
   13b2c:	mvn	r3, #-2147483648	; 0x80000000
   13b30:	bl	164b8 <__assert_fail@plt+0x55fc>
   13b34:	mov	r5, r0
   13b38:	ldm	r8, {r0, r1}
   13b3c:	str	r5, [r6]
   13b40:	stm	r5, {r0, r1}
   13b44:	b	13a28 <__assert_fail@plt+0x2b6c>
   13b48:	bl	10eb0 <abort@plt>
   13b4c:	andeq	r9, r2, ip, ror #1
   13b50:	andeq	r9, r2, ip, lsl #3
   13b54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b58:	sub	sp, sp, #132	; 0x84
   13b5c:	mov	r5, r1
   13b60:	mov	r4, r0
   13b64:	mov	r9, r2
   13b68:	add	r0, sp, #80	; 0x50
   13b6c:	mov	r2, #48	; 0x30
   13b70:	mov	r1, #0
   13b74:	mov	sl, r3
   13b78:	bl	10e20 <memset@plt>
   13b7c:	cmp	r5, #10
   13b80:	beq	13d3c <__assert_fail@plt+0x2e80>
   13b84:	add	lr, sp, #80	; 0x50
   13b88:	str	r5, [sp, #80]	; 0x50
   13b8c:	ldm	lr!, {r0, r1, r2, r3}
   13b90:	add	ip, sp, #32
   13b94:	ldr	r6, [pc, #420]	; 13d40 <__assert_fail@plt+0x2e84>
   13b98:	stmia	ip!, {r0, r1, r2, r3}
   13b9c:	ldm	lr!, {r0, r1, r2, r3}
   13ba0:	stmia	ip!, {r0, r1, r2, r3}
   13ba4:	ldm	lr, {r0, r1, r2, r3}
   13ba8:	stm	ip, {r0, r1, r2, r3}
   13bac:	bl	10e08 <__errno_location@plt>
   13bb0:	cmn	r4, #-2147483647	; 0x80000001
   13bb4:	ldr	r5, [r6]
   13bb8:	mov	r7, r0
   13bbc:	movne	r0, #0
   13bc0:	moveq	r0, #1
   13bc4:	ldr	r3, [r7]
   13bc8:	orrs	r0, r0, r4, lsr #31
   13bcc:	str	r3, [sp, #24]
   13bd0:	bne	13d3c <__assert_fail@plt+0x2e80>
   13bd4:	ldr	r2, [r6, #4]
   13bd8:	cmp	r4, r2
   13bdc:	blt	13c3c <__assert_fail@plt+0x2d80>
   13be0:	add	r8, r6, #8
   13be4:	cmp	r5, r8
   13be8:	str	r2, [sp, #80]	; 0x50
   13bec:	beq	13d0c <__assert_fail@plt+0x2e50>
   13bf0:	mov	r3, #8
   13bf4:	sub	r2, r4, r2
   13bf8:	mov	r0, r5
   13bfc:	str	r3, [sp]
   13c00:	add	r2, r2, #1
   13c04:	add	r1, sp, #80	; 0x50
   13c08:	mvn	r3, #-2147483648	; 0x80000000
   13c0c:	bl	164b8 <__assert_fail@plt+0x55fc>
   13c10:	mov	r5, r0
   13c14:	str	r0, [r6]
   13c18:	ldr	r0, [r6, #4]
   13c1c:	ldr	r2, [sp, #80]	; 0x50
   13c20:	mov	r1, #0
   13c24:	sub	r2, r2, r0
   13c28:	add	r0, r5, r0, lsl #3
   13c2c:	lsl	r2, r2, #3
   13c30:	bl	10e20 <memset@plt>
   13c34:	ldr	r3, [sp, #80]	; 0x50
   13c38:	str	r3, [r6, #4]
   13c3c:	add	fp, r5, r4, lsl #3
   13c40:	ldr	r3, [sp, #32]
   13c44:	ldr	r1, [sp, #36]	; 0x24
   13c48:	ldr	r8, [r5, r4, lsl #3]
   13c4c:	ldr	r6, [fp, #4]
   13c50:	ldr	r2, [sp, #72]	; 0x48
   13c54:	ldr	ip, [sp, #76]	; 0x4c
   13c58:	orr	r1, r1, #1
   13c5c:	str	r3, [sp]
   13c60:	add	r3, sp, #40	; 0x28
   13c64:	str	r1, [sp, #28]
   13c68:	str	r1, [sp, #4]
   13c6c:	str	r2, [sp, #12]
   13c70:	str	r3, [sp, #8]
   13c74:	mov	r0, r6
   13c78:	mov	r1, r8
   13c7c:	str	ip, [sp, #16]
   13c80:	mov	r3, sl
   13c84:	mov	r2, r9
   13c88:	bl	119c0 <__assert_fail@plt+0xb04>
   13c8c:	cmp	r8, r0
   13c90:	bhi	13cf8 <__assert_fail@plt+0x2e3c>
   13c94:	ldr	r3, [pc, #168]	; 13d44 <__assert_fail@plt+0x2e88>
   13c98:	add	r8, r0, #1
   13c9c:	cmp	r6, r3
   13ca0:	str	r8, [r5, r4, lsl #3]
   13ca4:	beq	13cb0 <__assert_fail@plt+0x2df4>
   13ca8:	mov	r0, r6
   13cac:	bl	17b90 <__assert_fail@plt+0x6cd4>
   13cb0:	mov	r0, r8
   13cb4:	bl	1629c <__assert_fail@plt+0x53e0>
   13cb8:	add	lr, sp, #40	; 0x28
   13cbc:	ldr	ip, [sp, #76]	; 0x4c
   13cc0:	ldr	r4, [sp, #72]	; 0x48
   13cc4:	ldr	r5, [sp, #28]
   13cc8:	mov	r3, sl
   13ccc:	mov	r2, r9
   13cd0:	mov	r1, r8
   13cd4:	str	r0, [fp, #4]
   13cd8:	str	lr, [sp, #8]
   13cdc:	ldr	lr, [sp, #32]
   13ce0:	str	r5, [sp, #4]
   13ce4:	str	ip, [sp, #16]
   13ce8:	str	r4, [sp, #12]
   13cec:	str	lr, [sp]
   13cf0:	mov	r6, r0
   13cf4:	bl	119c0 <__assert_fail@plt+0xb04>
   13cf8:	ldr	r3, [sp, #24]
   13cfc:	mov	r0, r6
   13d00:	str	r3, [r7]
   13d04:	add	sp, sp, #132	; 0x84
   13d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d0c:	mov	r3, #8
   13d10:	sub	r2, r4, r2
   13d14:	add	r1, sp, #80	; 0x50
   13d18:	str	r3, [sp]
   13d1c:	add	r2, r2, #1
   13d20:	mvn	r3, #-2147483648	; 0x80000000
   13d24:	bl	164b8 <__assert_fail@plt+0x55fc>
   13d28:	mov	r5, r0
   13d2c:	ldm	r8, {r0, r1}
   13d30:	str	r5, [r6]
   13d34:	stm	r5, {r0, r1}
   13d38:	b	13c18 <__assert_fail@plt+0x2d5c>
   13d3c:	bl	10eb0 <abort@plt>
   13d40:	andeq	r9, r2, ip, ror #1
   13d44:	andeq	r9, r2, ip, lsl #3
   13d48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d4c:	sub	sp, sp, #124	; 0x7c
   13d50:	mov	r4, r0
   13d54:	mov	r9, r1
   13d58:	add	r0, sp, #72	; 0x48
   13d5c:	mov	r2, #48	; 0x30
   13d60:	mov	r1, #0
   13d64:	bl	10e20 <memset@plt>
   13d68:	cmp	r4, #10
   13d6c:	beq	13ef8 <__assert_fail@plt+0x303c>
   13d70:	add	lr, sp, #72	; 0x48
   13d74:	str	r4, [sp, #72]	; 0x48
   13d78:	ldm	lr!, {r0, r1, r2, r3}
   13d7c:	add	ip, sp, #24
   13d80:	ldr	r5, [pc, #372]	; 13efc <__assert_fail@plt+0x3040>
   13d84:	stmia	ip!, {r0, r1, r2, r3}
   13d88:	ldm	lr!, {r0, r1, r2, r3}
   13d8c:	stmia	ip!, {r0, r1, r2, r3}
   13d90:	ldm	lr, {r0, r1, r2, r3}
   13d94:	stm	ip, {r0, r1, r2, r3}
   13d98:	bl	10e08 <__errno_location@plt>
   13d9c:	ldr	r2, [r5, #4]
   13da0:	ldr	r4, [r5]
   13da4:	cmp	r2, #0
   13da8:	mov	r7, r0
   13dac:	ldr	fp, [r0]
   13db0:	bgt	13e0c <__assert_fail@plt+0x2f50>
   13db4:	add	r6, r5, #8
   13db8:	cmp	r4, r6
   13dbc:	str	r2, [sp, #72]	; 0x48
   13dc0:	beq	13ec8 <__assert_fail@plt+0x300c>
   13dc4:	mov	r3, #8
   13dc8:	mov	r0, r4
   13dcc:	str	r3, [sp]
   13dd0:	rsb	r2, r2, #1
   13dd4:	add	r1, sp, #72	; 0x48
   13dd8:	mvn	r3, #-2147483648	; 0x80000000
   13ddc:	bl	164b8 <__assert_fail@plt+0x55fc>
   13de0:	mov	r4, r0
   13de4:	str	r0, [r5]
   13de8:	ldr	r0, [r5, #4]
   13dec:	ldr	r2, [sp, #72]	; 0x48
   13df0:	mov	r1, #0
   13df4:	sub	r2, r2, r0
   13df8:	add	r0, r4, r0, lsl #3
   13dfc:	lsl	r2, r2, #3
   13e00:	bl	10e20 <memset@plt>
   13e04:	ldr	r3, [sp, #72]	; 0x48
   13e08:	str	r3, [r5, #4]
   13e0c:	ldr	r6, [sp, #28]
   13e10:	ldr	r8, [r4]
   13e14:	ldr	r5, [r4, #4]
   13e18:	ldr	r2, [sp, #64]	; 0x40
   13e1c:	ldr	r3, [sp, #24]
   13e20:	ldr	ip, [sp, #68]	; 0x44
   13e24:	orr	r6, r6, #1
   13e28:	add	sl, sp, #32
   13e2c:	str	r2, [sp, #12]
   13e30:	str	r3, [sp]
   13e34:	str	r6, [sp, #4]
   13e38:	mov	r1, r8
   13e3c:	mov	r0, r5
   13e40:	str	ip, [sp, #16]
   13e44:	str	sl, [sp, #8]
   13e48:	mvn	r3, #0
   13e4c:	mov	r2, r9
   13e50:	bl	119c0 <__assert_fail@plt+0xb04>
   13e54:	cmp	r8, r0
   13e58:	bhi	13eb8 <__assert_fail@plt+0x2ffc>
   13e5c:	ldr	r3, [pc, #156]	; 13f00 <__assert_fail@plt+0x3044>
   13e60:	add	r8, r0, #1
   13e64:	cmp	r5, r3
   13e68:	str	r8, [r4]
   13e6c:	beq	13e78 <__assert_fail@plt+0x2fbc>
   13e70:	mov	r0, r5
   13e74:	bl	17b90 <__assert_fail@plt+0x6cd4>
   13e78:	mov	r0, r8
   13e7c:	bl	1629c <__assert_fail@plt+0x53e0>
   13e80:	ldr	lr, [sp, #68]	; 0x44
   13e84:	ldr	r3, [sp, #24]
   13e88:	ldr	ip, [sp, #64]	; 0x40
   13e8c:	mov	r2, r9
   13e90:	mov	r1, r8
   13e94:	str	r0, [r4, #4]
   13e98:	str	r3, [sp]
   13e9c:	str	sl, [sp, #8]
   13ea0:	str	r6, [sp, #4]
   13ea4:	str	lr, [sp, #16]
   13ea8:	str	ip, [sp, #12]
   13eac:	mvn	r3, #0
   13eb0:	mov	r5, r0
   13eb4:	bl	119c0 <__assert_fail@plt+0xb04>
   13eb8:	mov	r0, r5
   13ebc:	str	fp, [r7]
   13ec0:	add	sp, sp, #124	; 0x7c
   13ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ec8:	mov	r3, #8
   13ecc:	add	r1, sp, #72	; 0x48
   13ed0:	str	r3, [sp]
   13ed4:	rsb	r2, r2, #1
   13ed8:	mvn	r3, #-2147483648	; 0x80000000
   13edc:	mov	r0, #0
   13ee0:	bl	164b8 <__assert_fail@plt+0x55fc>
   13ee4:	mov	r4, r0
   13ee8:	ldm	r6, {r0, r1}
   13eec:	str	r4, [r5]
   13ef0:	stm	r4, {r0, r1}
   13ef4:	b	13de8 <__assert_fail@plt+0x2f2c>
   13ef8:	bl	10eb0 <abort@plt>
   13efc:	andeq	r9, r2, ip, ror #1
   13f00:	andeq	r9, r2, ip, lsl #3
   13f04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f08:	sub	sp, sp, #132	; 0x84
   13f0c:	mov	r4, r0
   13f10:	mov	r9, r1
   13f14:	mov	sl, r2
   13f18:	add	r0, sp, #80	; 0x50
   13f1c:	mov	r2, #48	; 0x30
   13f20:	mov	r1, #0
   13f24:	bl	10e20 <memset@plt>
   13f28:	cmp	r4, #10
   13f2c:	beq	140c0 <__assert_fail@plt+0x3204>
   13f30:	add	lr, sp, #80	; 0x50
   13f34:	str	r4, [sp, #80]	; 0x50
   13f38:	ldm	lr!, {r0, r1, r2, r3}
   13f3c:	add	ip, sp, #32
   13f40:	ldr	r5, [pc, #380]	; 140c4 <__assert_fail@plt+0x3208>
   13f44:	stmia	ip!, {r0, r1, r2, r3}
   13f48:	ldm	lr!, {r0, r1, r2, r3}
   13f4c:	stmia	ip!, {r0, r1, r2, r3}
   13f50:	ldm	lr, {r0, r1, r2, r3}
   13f54:	stm	ip, {r0, r1, r2, r3}
   13f58:	bl	10e08 <__errno_location@plt>
   13f5c:	ldr	r2, [r5, #4]
   13f60:	ldr	r4, [r5]
   13f64:	cmp	r2, #0
   13f68:	ldr	r3, [r0]
   13f6c:	mov	r7, r0
   13f70:	str	r3, [sp, #28]
   13f74:	bgt	13fd0 <__assert_fail@plt+0x3114>
   13f78:	add	r6, r5, #8
   13f7c:	cmp	r4, r6
   13f80:	str	r2, [sp, #80]	; 0x50
   13f84:	beq	14090 <__assert_fail@plt+0x31d4>
   13f88:	mov	r3, #8
   13f8c:	mov	r0, r4
   13f90:	str	r3, [sp]
   13f94:	rsb	r2, r2, #1
   13f98:	add	r1, sp, #80	; 0x50
   13f9c:	mvn	r3, #-2147483648	; 0x80000000
   13fa0:	bl	164b8 <__assert_fail@plt+0x55fc>
   13fa4:	mov	r4, r0
   13fa8:	str	r0, [r5]
   13fac:	ldr	r0, [r5, #4]
   13fb0:	ldr	r2, [sp, #80]	; 0x50
   13fb4:	mov	r1, #0
   13fb8:	sub	r2, r2, r0
   13fbc:	add	r0, r4, r0, lsl #3
   13fc0:	lsl	r2, r2, #3
   13fc4:	bl	10e20 <memset@plt>
   13fc8:	ldr	r3, [sp, #80]	; 0x50
   13fcc:	str	r3, [r5, #4]
   13fd0:	ldr	r6, [sp, #36]	; 0x24
   13fd4:	ldr	r8, [r4]
   13fd8:	ldr	r5, [r4, #4]
   13fdc:	ldr	r2, [sp, #72]	; 0x48
   13fe0:	ldr	r3, [sp, #32]
   13fe4:	ldr	ip, [sp, #76]	; 0x4c
   13fe8:	orr	r6, r6, #1
   13fec:	add	fp, sp, #40	; 0x28
   13ff0:	str	r2, [sp, #12]
   13ff4:	str	r3, [sp]
   13ff8:	str	r6, [sp, #4]
   13ffc:	mov	r1, r8
   14000:	mov	r0, r5
   14004:	str	ip, [sp, #16]
   14008:	str	fp, [sp, #8]
   1400c:	mov	r3, sl
   14010:	mov	r2, r9
   14014:	bl	119c0 <__assert_fail@plt+0xb04>
   14018:	cmp	r8, r0
   1401c:	bhi	1407c <__assert_fail@plt+0x31c0>
   14020:	ldr	r3, [pc, #160]	; 140c8 <__assert_fail@plt+0x320c>
   14024:	add	r8, r0, #1
   14028:	cmp	r5, r3
   1402c:	str	r8, [r4]
   14030:	beq	1403c <__assert_fail@plt+0x3180>
   14034:	mov	r0, r5
   14038:	bl	17b90 <__assert_fail@plt+0x6cd4>
   1403c:	mov	r0, r8
   14040:	bl	1629c <__assert_fail@plt+0x53e0>
   14044:	ldr	ip, [sp, #76]	; 0x4c
   14048:	ldr	lr, [sp, #32]
   1404c:	mov	r3, sl
   14050:	mov	r2, r9
   14054:	mov	r1, r8
   14058:	str	r0, [r4, #4]
   1405c:	ldr	r4, [sp, #72]	; 0x48
   14060:	str	fp, [sp, #8]
   14064:	str	r6, [sp, #4]
   14068:	str	ip, [sp, #16]
   1406c:	str	r4, [sp, #12]
   14070:	str	lr, [sp]
   14074:	mov	r5, r0
   14078:	bl	119c0 <__assert_fail@plt+0xb04>
   1407c:	ldr	r3, [sp, #28]
   14080:	mov	r0, r5
   14084:	str	r3, [r7]
   14088:	add	sp, sp, #132	; 0x84
   1408c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14090:	mov	r3, #8
   14094:	add	r1, sp, #80	; 0x50
   14098:	str	r3, [sp]
   1409c:	rsb	r2, r2, #1
   140a0:	mvn	r3, #-2147483648	; 0x80000000
   140a4:	mov	r0, #0
   140a8:	bl	164b8 <__assert_fail@plt+0x55fc>
   140ac:	mov	r4, r0
   140b0:	ldm	r6, {r0, r1}
   140b4:	str	r4, [r5]
   140b8:	stm	r4, {r0, r1}
   140bc:	b	13fac <__assert_fail@plt+0x30f0>
   140c0:	bl	10eb0 <abort@plt>
   140c4:	andeq	r9, r2, ip, ror #1
   140c8:	andeq	r9, r2, ip, lsl #3
   140cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140d0:	mov	r4, r2
   140d4:	ldr	lr, [pc, #432]	; 1428c <__assert_fail@plt+0x33d0>
   140d8:	mov	sl, r0
   140dc:	mov	fp, r1
   140e0:	ldm	lr!, {r0, r1, r2, r3}
   140e4:	sub	sp, sp, #92	; 0x5c
   140e8:	add	ip, sp, #40	; 0x28
   140ec:	lsr	r7, r4, #5
   140f0:	stmia	ip!, {r0, r1, r2, r3}
   140f4:	add	r6, sp, #48	; 0x30
   140f8:	ldm	lr!, {r0, r1, r2, r3}
   140fc:	and	r4, r4, #31
   14100:	ldr	r5, [pc, #392]	; 14290 <__assert_fail@plt+0x33d4>
   14104:	stmia	ip!, {r0, r1, r2, r3}
   14108:	ldm	lr, {r0, r1, r2, r3}
   1410c:	stm	ip, {r0, r1, r2, r3}
   14110:	ldr	r2, [r6, r7, lsl #2]
   14114:	lsr	r3, r2, r4
   14118:	eor	r3, r3, #1
   1411c:	and	r3, r3, #1
   14120:	eor	r4, r2, r3, lsl r4
   14124:	str	r4, [r6, r7, lsl #2]
   14128:	bl	10e08 <__errno_location@plt>
   1412c:	ldr	r2, [r5, #4]
   14130:	ldr	r4, [r5]
   14134:	cmp	r2, #0
   14138:	ldr	r3, [r0]
   1413c:	mov	r8, r0
   14140:	str	r3, [sp, #28]
   14144:	bgt	141a0 <__assert_fail@plt+0x32e4>
   14148:	add	r7, r5, #8
   1414c:	cmp	r4, r7
   14150:	str	r2, [sp, #36]	; 0x24
   14154:	beq	1425c <__assert_fail@plt+0x33a0>
   14158:	mov	r3, #8
   1415c:	mov	r0, r4
   14160:	str	r3, [sp]
   14164:	rsb	r2, r2, #1
   14168:	mvn	r3, #-2147483648	; 0x80000000
   1416c:	add	r1, sp, #36	; 0x24
   14170:	bl	164b8 <__assert_fail@plt+0x55fc>
   14174:	mov	r4, r0
   14178:	str	r0, [r5]
   1417c:	ldr	r0, [r5, #4]
   14180:	ldr	r2, [sp, #36]	; 0x24
   14184:	mov	r1, #0
   14188:	sub	r2, r2, r0
   1418c:	add	r0, r4, r0, lsl #3
   14190:	lsl	r2, r2, #3
   14194:	bl	10e20 <memset@plt>
   14198:	ldr	r3, [sp, #36]	; 0x24
   1419c:	str	r3, [r5, #4]
   141a0:	ldr	r7, [sp, #44]	; 0x2c
   141a4:	ldr	r9, [r4]
   141a8:	ldr	r5, [r4, #4]
   141ac:	ldr	r2, [sp, #80]	; 0x50
   141b0:	ldr	r3, [sp, #40]	; 0x28
   141b4:	ldr	ip, [sp, #84]	; 0x54
   141b8:	orr	r7, r7, #1
   141bc:	str	r2, [sp, #12]
   141c0:	str	r3, [sp]
   141c4:	str	r7, [sp, #4]
   141c8:	str	r6, [sp, #8]
   141cc:	mov	r1, r9
   141d0:	mov	r0, r5
   141d4:	str	ip, [sp, #16]
   141d8:	mov	r3, fp
   141dc:	mov	r2, sl
   141e0:	bl	119c0 <__assert_fail@plt+0xb04>
   141e4:	cmp	r9, r0
   141e8:	bhi	14248 <__assert_fail@plt+0x338c>
   141ec:	ldr	r3, [pc, #160]	; 14294 <__assert_fail@plt+0x33d8>
   141f0:	add	r9, r0, #1
   141f4:	cmp	r5, r3
   141f8:	str	r9, [r4]
   141fc:	beq	14208 <__assert_fail@plt+0x334c>
   14200:	mov	r0, r5
   14204:	bl	17b90 <__assert_fail@plt+0x6cd4>
   14208:	mov	r0, r9
   1420c:	bl	1629c <__assert_fail@plt+0x53e0>
   14210:	ldr	ip, [sp, #84]	; 0x54
   14214:	ldr	lr, [sp, #40]	; 0x28
   14218:	mov	r3, fp
   1421c:	mov	r2, sl
   14220:	mov	r1, r9
   14224:	str	r0, [r4, #4]
   14228:	ldr	r4, [sp, #80]	; 0x50
   1422c:	str	r6, [sp, #8]
   14230:	str	r7, [sp, #4]
   14234:	str	ip, [sp, #16]
   14238:	str	r4, [sp, #12]
   1423c:	str	lr, [sp]
   14240:	mov	r5, r0
   14244:	bl	119c0 <__assert_fail@plt+0xb04>
   14248:	ldr	r3, [sp, #28]
   1424c:	mov	r0, r5
   14250:	str	r3, [r8]
   14254:	add	sp, sp, #92	; 0x5c
   14258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1425c:	mov	r3, #8
   14260:	str	r3, [sp]
   14264:	add	r1, sp, #36	; 0x24
   14268:	rsb	r2, r2, #1
   1426c:	mvn	r3, #-2147483648	; 0x80000000
   14270:	mov	r0, #0
   14274:	bl	164b8 <__assert_fail@plt+0x55fc>
   14278:	mov	r4, r0
   1427c:	ldm	r7, {r0, r1}
   14280:	str	r4, [r5]
   14284:	stm	r4, {r0, r1}
   14288:	b	1417c <__assert_fail@plt+0x32c0>
   1428c:	andeq	r9, r2, ip, asr r1
   14290:	andeq	r9, r2, ip, ror #1
   14294:	andeq	r9, r2, ip, lsl #3
   14298:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1429c:	mov	r4, r1
   142a0:	ldr	lr, [pc, #420]	; 1444c <__assert_fail@plt+0x3590>
   142a4:	mov	r6, r0
   142a8:	sub	sp, sp, #84	; 0x54
   142ac:	ldm	lr!, {r0, r1, r2, r3}
   142b0:	add	ip, sp, #32
   142b4:	lsr	r8, r4, #5
   142b8:	add	r5, sp, #40	; 0x28
   142bc:	stmia	ip!, {r0, r1, r2, r3}
   142c0:	and	r4, r4, #31
   142c4:	ldm	lr!, {r0, r1, r2, r3}
   142c8:	ldr	r7, [pc, #384]	; 14450 <__assert_fail@plt+0x3594>
   142cc:	stmia	ip!, {r0, r1, r2, r3}
   142d0:	ldm	lr, {r0, r1, r2, r3}
   142d4:	stm	ip, {r0, r1, r2, r3}
   142d8:	ldr	r2, [r5, r8, lsl #2]
   142dc:	lsr	r3, r2, r4
   142e0:	eor	r3, r3, #1
   142e4:	and	r3, r3, #1
   142e8:	eor	r4, r2, r3, lsl r4
   142ec:	str	r4, [r5, r8, lsl #2]
   142f0:	bl	10e08 <__errno_location@plt>
   142f4:	ldr	r2, [r7, #4]
   142f8:	ldr	r4, [r7]
   142fc:	cmp	r2, #0
   14300:	mov	r9, r0
   14304:	ldr	sl, [r0]
   14308:	bgt	14364 <__assert_fail@plt+0x34a8>
   1430c:	add	r8, r7, #8
   14310:	cmp	r4, r8
   14314:	str	r2, [sp, #28]
   14318:	beq	1441c <__assert_fail@plt+0x3560>
   1431c:	mov	r3, #8
   14320:	mov	r0, r4
   14324:	str	r3, [sp]
   14328:	rsb	r2, r2, #1
   1432c:	mvn	r3, #-2147483648	; 0x80000000
   14330:	add	r1, sp, #28
   14334:	bl	164b8 <__assert_fail@plt+0x55fc>
   14338:	mov	r4, r0
   1433c:	str	r0, [r7]
   14340:	ldr	r0, [r7, #4]
   14344:	ldr	r2, [sp, #28]
   14348:	mov	r1, #0
   1434c:	sub	r2, r2, r0
   14350:	add	r0, r4, r0, lsl #3
   14354:	lsl	r2, r2, #3
   14358:	bl	10e20 <memset@plt>
   1435c:	ldr	r3, [sp, #28]
   14360:	str	r3, [r7, #4]
   14364:	ldr	r8, [sp, #36]	; 0x24
   14368:	ldr	fp, [r4]
   1436c:	ldr	r7, [r4, #4]
   14370:	ldr	r2, [sp, #72]	; 0x48
   14374:	ldr	r3, [sp, #32]
   14378:	ldr	ip, [sp, #76]	; 0x4c
   1437c:	orr	r8, r8, #1
   14380:	str	r2, [sp, #12]
   14384:	str	r3, [sp]
   14388:	str	r8, [sp, #4]
   1438c:	str	r5, [sp, #8]
   14390:	mov	r1, fp
   14394:	mov	r0, r7
   14398:	str	ip, [sp, #16]
   1439c:	mvn	r3, #0
   143a0:	mov	r2, r6
   143a4:	bl	119c0 <__assert_fail@plt+0xb04>
   143a8:	cmp	fp, r0
   143ac:	bhi	1440c <__assert_fail@plt+0x3550>
   143b0:	ldr	r3, [pc, #156]	; 14454 <__assert_fail@plt+0x3598>
   143b4:	add	fp, r0, #1
   143b8:	cmp	r7, r3
   143bc:	str	fp, [r4]
   143c0:	beq	143cc <__assert_fail@plt+0x3510>
   143c4:	mov	r0, r7
   143c8:	bl	17b90 <__assert_fail@plt+0x6cd4>
   143cc:	mov	r0, fp
   143d0:	bl	1629c <__assert_fail@plt+0x53e0>
   143d4:	ldr	lr, [sp, #76]	; 0x4c
   143d8:	ldr	r3, [sp, #32]
   143dc:	ldr	ip, [sp, #72]	; 0x48
   143e0:	mov	r2, r6
   143e4:	mov	r1, fp
   143e8:	str	r0, [r4, #4]
   143ec:	str	r3, [sp]
   143f0:	str	r5, [sp, #8]
   143f4:	str	r8, [sp, #4]
   143f8:	str	lr, [sp, #16]
   143fc:	str	ip, [sp, #12]
   14400:	mvn	r3, #0
   14404:	mov	r7, r0
   14408:	bl	119c0 <__assert_fail@plt+0xb04>
   1440c:	mov	r0, r7
   14410:	str	sl, [r9]
   14414:	add	sp, sp, #84	; 0x54
   14418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1441c:	mov	r3, #8
   14420:	str	r3, [sp]
   14424:	add	r1, sp, #28
   14428:	rsb	r2, r2, #1
   1442c:	mvn	r3, #-2147483648	; 0x80000000
   14430:	mov	r0, #0
   14434:	bl	164b8 <__assert_fail@plt+0x55fc>
   14438:	mov	r4, r0
   1443c:	ldm	r8, {r0, r1}
   14440:	str	r4, [r7]
   14444:	stm	r4, {r0, r1}
   14448:	b	14340 <__assert_fail@plt+0x3484>
   1444c:	andeq	r9, r2, ip, asr r1
   14450:	andeq	r9, r2, ip, ror #1
   14454:	andeq	r9, r2, ip, lsl #3
   14458:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1445c:	mov	r6, r0
   14460:	ldr	lr, [pc, #404]	; 145fc <__assert_fail@plt+0x3740>
   14464:	sub	sp, sp, #84	; 0x54
   14468:	add	ip, sp, #32
   1446c:	ldm	lr!, {r0, r1, r2, r3}
   14470:	ldr	r5, [pc, #392]	; 14600 <__assert_fail@plt+0x3744>
   14474:	stmia	ip!, {r0, r1, r2, r3}
   14478:	ldm	lr!, {r0, r1, r2, r3}
   1447c:	ldr	r4, [sp, #44]	; 0x2c
   14480:	stmia	ip!, {r0, r1, r2, r3}
   14484:	ldm	lr, {r0, r1, r2, r3}
   14488:	mvn	lr, r4
   1448c:	and	lr, lr, #67108864	; 0x4000000
   14490:	eor	lr, lr, r4
   14494:	stm	ip, {r0, r1, r2, r3}
   14498:	str	lr, [sp, #44]	; 0x2c
   1449c:	bl	10e08 <__errno_location@plt>
   144a0:	ldr	r2, [r5, #4]
   144a4:	ldr	r4, [r5]
   144a8:	cmp	r2, #0
   144ac:	mov	r8, r0
   144b0:	ldr	sl, [r0]
   144b4:	bgt	14510 <__assert_fail@plt+0x3654>
   144b8:	add	r7, r5, #8
   144bc:	cmp	r4, r7
   144c0:	str	r2, [sp, #28]
   144c4:	beq	145cc <__assert_fail@plt+0x3710>
   144c8:	mov	r3, #8
   144cc:	mov	r0, r4
   144d0:	str	r3, [sp]
   144d4:	rsb	r2, r2, #1
   144d8:	mvn	r3, #-2147483648	; 0x80000000
   144dc:	add	r1, sp, #28
   144e0:	bl	164b8 <__assert_fail@plt+0x55fc>
   144e4:	mov	r4, r0
   144e8:	str	r0, [r5]
   144ec:	ldr	r0, [r5, #4]
   144f0:	ldr	r2, [sp, #28]
   144f4:	mov	r1, #0
   144f8:	sub	r2, r2, r0
   144fc:	add	r0, r4, r0, lsl #3
   14500:	lsl	r2, r2, #3
   14504:	bl	10e20 <memset@plt>
   14508:	ldr	r3, [sp, #28]
   1450c:	str	r3, [r5, #4]
   14510:	ldr	r7, [sp, #36]	; 0x24
   14514:	ldr	r9, [r4]
   14518:	ldr	r5, [r4, #4]
   1451c:	ldr	r2, [sp, #72]	; 0x48
   14520:	ldr	r3, [sp, #32]
   14524:	ldr	ip, [sp, #76]	; 0x4c
   14528:	orr	r7, r7, #1
   1452c:	add	fp, sp, #40	; 0x28
   14530:	str	r2, [sp, #12]
   14534:	str	r3, [sp]
   14538:	str	r7, [sp, #4]
   1453c:	mov	r1, r9
   14540:	mov	r0, r5
   14544:	str	ip, [sp, #16]
   14548:	str	fp, [sp, #8]
   1454c:	mvn	r3, #0
   14550:	mov	r2, r6
   14554:	bl	119c0 <__assert_fail@plt+0xb04>
   14558:	cmp	r9, r0
   1455c:	bhi	145bc <__assert_fail@plt+0x3700>
   14560:	ldr	r3, [pc, #156]	; 14604 <__assert_fail@plt+0x3748>
   14564:	add	r9, r0, #1
   14568:	cmp	r5, r3
   1456c:	str	r9, [r4]
   14570:	beq	1457c <__assert_fail@plt+0x36c0>
   14574:	mov	r0, r5
   14578:	bl	17b90 <__assert_fail@plt+0x6cd4>
   1457c:	mov	r0, r9
   14580:	bl	1629c <__assert_fail@plt+0x53e0>
   14584:	ldr	lr, [sp, #76]	; 0x4c
   14588:	ldr	r3, [sp, #32]
   1458c:	ldr	ip, [sp, #72]	; 0x48
   14590:	mov	r2, r6
   14594:	mov	r1, r9
   14598:	str	r0, [r4, #4]
   1459c:	str	r3, [sp]
   145a0:	str	fp, [sp, #8]
   145a4:	str	r7, [sp, #4]
   145a8:	str	lr, [sp, #16]
   145ac:	str	ip, [sp, #12]
   145b0:	mvn	r3, #0
   145b4:	mov	r5, r0
   145b8:	bl	119c0 <__assert_fail@plt+0xb04>
   145bc:	mov	r0, r5
   145c0:	str	sl, [r8]
   145c4:	add	sp, sp, #84	; 0x54
   145c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145cc:	mov	r3, #8
   145d0:	str	r3, [sp]
   145d4:	add	r1, sp, #28
   145d8:	rsb	r2, r2, #1
   145dc:	mvn	r3, #-2147483648	; 0x80000000
   145e0:	mov	r0, #0
   145e4:	bl	164b8 <__assert_fail@plt+0x55fc>
   145e8:	mov	r4, r0
   145ec:	ldm	r7, {r0, r1}
   145f0:	str	r4, [r5]
   145f4:	stm	r4, {r0, r1}
   145f8:	b	144ec <__assert_fail@plt+0x3630>
   145fc:	andeq	r9, r2, ip, asr r1
   14600:	andeq	r9, r2, ip, ror #1
   14604:	andeq	r9, r2, ip, lsl #3
   14608:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1460c:	mov	r9, r0
   14610:	ldr	lr, [pc, #416]	; 147b8 <__assert_fail@plt+0x38fc>
   14614:	mov	sl, r1
   14618:	sub	sp, sp, #92	; 0x5c
   1461c:	ldm	lr!, {r0, r1, r2, r3}
   14620:	add	ip, sp, #40	; 0x28
   14624:	ldr	r5, [pc, #400]	; 147bc <__assert_fail@plt+0x3900>
   14628:	stmia	ip!, {r0, r1, r2, r3}
   1462c:	ldm	lr!, {r0, r1, r2, r3}
   14630:	ldr	r4, [sp, #52]	; 0x34
   14634:	stmia	ip!, {r0, r1, r2, r3}
   14638:	ldm	lr, {r0, r1, r2, r3}
   1463c:	mvn	lr, r4
   14640:	and	lr, lr, #67108864	; 0x4000000
   14644:	eor	lr, lr, r4
   14648:	stm	ip, {r0, r1, r2, r3}
   1464c:	str	lr, [sp, #52]	; 0x34
   14650:	bl	10e08 <__errno_location@plt>
   14654:	ldr	r2, [r5, #4]
   14658:	ldr	r4, [r5]
   1465c:	cmp	r2, #0
   14660:	ldr	r3, [r0]
   14664:	mov	r7, r0
   14668:	str	r3, [sp, #28]
   1466c:	bgt	146c8 <__assert_fail@plt+0x380c>
   14670:	add	r6, r5, #8
   14674:	cmp	r4, r6
   14678:	str	r2, [sp, #36]	; 0x24
   1467c:	beq	14788 <__assert_fail@plt+0x38cc>
   14680:	mov	r3, #8
   14684:	mov	r0, r4
   14688:	str	r3, [sp]
   1468c:	rsb	r2, r2, #1
   14690:	mvn	r3, #-2147483648	; 0x80000000
   14694:	add	r1, sp, #36	; 0x24
   14698:	bl	164b8 <__assert_fail@plt+0x55fc>
   1469c:	mov	r4, r0
   146a0:	str	r0, [r5]
   146a4:	ldr	r0, [r5, #4]
   146a8:	ldr	r2, [sp, #36]	; 0x24
   146ac:	mov	r1, #0
   146b0:	sub	r2, r2, r0
   146b4:	add	r0, r4, r0, lsl #3
   146b8:	lsl	r2, r2, #3
   146bc:	bl	10e20 <memset@plt>
   146c0:	ldr	r3, [sp, #36]	; 0x24
   146c4:	str	r3, [r5, #4]
   146c8:	ldr	r6, [sp, #44]	; 0x2c
   146cc:	ldr	r8, [r4]
   146d0:	ldr	r5, [r4, #4]
   146d4:	ldr	r2, [sp, #80]	; 0x50
   146d8:	ldr	r3, [sp, #40]	; 0x28
   146dc:	ldr	ip, [sp, #84]	; 0x54
   146e0:	orr	r6, r6, #1
   146e4:	add	fp, sp, #48	; 0x30
   146e8:	str	r2, [sp, #12]
   146ec:	str	r3, [sp]
   146f0:	str	r6, [sp, #4]
   146f4:	mov	r1, r8
   146f8:	mov	r0, r5
   146fc:	str	ip, [sp, #16]
   14700:	str	fp, [sp, #8]
   14704:	mov	r3, sl
   14708:	mov	r2, r9
   1470c:	bl	119c0 <__assert_fail@plt+0xb04>
   14710:	cmp	r8, r0
   14714:	bhi	14774 <__assert_fail@plt+0x38b8>
   14718:	ldr	r3, [pc, #160]	; 147c0 <__assert_fail@plt+0x3904>
   1471c:	add	r8, r0, #1
   14720:	cmp	r5, r3
   14724:	str	r8, [r4]
   14728:	beq	14734 <__assert_fail@plt+0x3878>
   1472c:	mov	r0, r5
   14730:	bl	17b90 <__assert_fail@plt+0x6cd4>
   14734:	mov	r0, r8
   14738:	bl	1629c <__assert_fail@plt+0x53e0>
   1473c:	ldr	ip, [sp, #84]	; 0x54
   14740:	ldr	lr, [sp, #40]	; 0x28
   14744:	mov	r3, sl
   14748:	mov	r2, r9
   1474c:	mov	r1, r8
   14750:	str	r0, [r4, #4]
   14754:	ldr	r4, [sp, #80]	; 0x50
   14758:	str	fp, [sp, #8]
   1475c:	str	r6, [sp, #4]
   14760:	str	ip, [sp, #16]
   14764:	str	r4, [sp, #12]
   14768:	str	lr, [sp]
   1476c:	mov	r5, r0
   14770:	bl	119c0 <__assert_fail@plt+0xb04>
   14774:	ldr	r3, [sp, #28]
   14778:	mov	r0, r5
   1477c:	str	r3, [r7]
   14780:	add	sp, sp, #92	; 0x5c
   14784:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14788:	mov	r3, #8
   1478c:	str	r3, [sp]
   14790:	add	r1, sp, #36	; 0x24
   14794:	rsb	r2, r2, #1
   14798:	mvn	r3, #-2147483648	; 0x80000000
   1479c:	mov	r0, #0
   147a0:	bl	164b8 <__assert_fail@plt+0x55fc>
   147a4:	mov	r4, r0
   147a8:	ldm	r6, {r0, r1}
   147ac:	str	r4, [r5]
   147b0:	stm	r4, {r0, r1}
   147b4:	b	146a4 <__assert_fail@plt+0x37e8>
   147b8:	andeq	r9, r2, ip, asr r1
   147bc:	andeq	r9, r2, ip, ror #1
   147c0:	andeq	r9, r2, ip, lsl #3
   147c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147c8:	sub	sp, sp, #180	; 0xb4
   147cc:	mov	r6, r1
   147d0:	mov	r4, r0
   147d4:	mov	r9, r2
   147d8:	add	r0, sp, #80	; 0x50
   147dc:	mov	r2, #48	; 0x30
   147e0:	mov	r1, #0
   147e4:	bl	10e20 <memset@plt>
   147e8:	cmp	r6, #10
   147ec:	beq	149cc <__assert_fail@plt+0x3b10>
   147f0:	add	r5, sp, #80	; 0x50
   147f4:	str	r6, [sp, #80]	; 0x50
   147f8:	ldm	r5!, {r0, r1, r2, r3}
   147fc:	add	ip, sp, #128	; 0x80
   14800:	mov	r7, ip
   14804:	add	lr, sp, #32
   14808:	stmia	ip!, {r0, r1, r2, r3}
   1480c:	mov	r8, #67108864	; 0x4000000
   14810:	ldm	r5!, {r0, r1, r2, r3}
   14814:	ldr	r6, [pc, #436]	; 149d0 <__assert_fail@plt+0x3b14>
   14818:	stmia	ip!, {r0, r1, r2, r3}
   1481c:	ldm	r5, {r0, r1, r2, r3}
   14820:	stm	ip, {r0, r1, r2, r3}
   14824:	ldm	r7!, {r0, r1, r2, r3}
   14828:	stmia	lr!, {r0, r1, r2, r3}
   1482c:	ldm	r7!, {r0, r1, r2, r3}
   14830:	str	r8, [sp, #44]	; 0x2c
   14834:	stmia	lr!, {r0, r1, r2, r3}
   14838:	ldm	ip, {r0, r1, r2, r3}
   1483c:	stm	lr, {r0, r1, r2, r3}
   14840:	bl	10e08 <__errno_location@plt>
   14844:	cmn	r4, #-2147483647	; 0x80000001
   14848:	ldr	r5, [r6]
   1484c:	mov	r7, r0
   14850:	movne	r0, #0
   14854:	moveq	r0, #1
   14858:	ldr	r3, [r7]
   1485c:	orrs	r0, r0, r4, lsr #31
   14860:	str	r3, [sp, #24]
   14864:	bne	149cc <__assert_fail@plt+0x3b10>
   14868:	ldr	r2, [r6, #4]
   1486c:	cmp	r4, r2
   14870:	blt	148d0 <__assert_fail@plt+0x3a14>
   14874:	add	r8, r6, #8
   14878:	cmp	r5, r8
   1487c:	str	r2, [sp, #80]	; 0x50
   14880:	beq	1499c <__assert_fail@plt+0x3ae0>
   14884:	mov	r3, #8
   14888:	sub	r2, r4, r2
   1488c:	mov	r0, r5
   14890:	str	r3, [sp]
   14894:	add	r2, r2, #1
   14898:	add	r1, sp, #80	; 0x50
   1489c:	mvn	r3, #-2147483648	; 0x80000000
   148a0:	bl	164b8 <__assert_fail@plt+0x55fc>
   148a4:	mov	r5, r0
   148a8:	str	r0, [r6]
   148ac:	ldr	r0, [r6, #4]
   148b0:	ldr	r2, [sp, #80]	; 0x50
   148b4:	mov	r1, #0
   148b8:	sub	r2, r2, r0
   148bc:	add	r0, r5, r0, lsl #3
   148c0:	lsl	r2, r2, #3
   148c4:	bl	10e20 <memset@plt>
   148c8:	ldr	r3, [sp, #80]	; 0x50
   148cc:	str	r3, [r6, #4]
   148d0:	add	fp, r5, r4, lsl #3
   148d4:	ldr	r1, [sp, #36]	; 0x24
   148d8:	ldr	r8, [r5, r4, lsl #3]
   148dc:	ldr	r6, [fp, #4]
   148e0:	ldr	r2, [sp, #72]	; 0x48
   148e4:	ldr	r3, [sp, #32]
   148e8:	ldr	ip, [sp, #76]	; 0x4c
   148ec:	orr	r1, r1, #1
   148f0:	add	sl, sp, #40	; 0x28
   148f4:	str	r1, [sp, #28]
   148f8:	str	r1, [sp, #4]
   148fc:	str	r2, [sp, #12]
   14900:	str	r3, [sp]
   14904:	mov	r0, r6
   14908:	mov	r1, r8
   1490c:	str	ip, [sp, #16]
   14910:	str	sl, [sp, #8]
   14914:	mvn	r3, #0
   14918:	mov	r2, r9
   1491c:	bl	119c0 <__assert_fail@plt+0xb04>
   14920:	cmp	r8, r0
   14924:	bhi	14988 <__assert_fail@plt+0x3acc>
   14928:	ldr	r3, [pc, #164]	; 149d4 <__assert_fail@plt+0x3b18>
   1492c:	add	r8, r0, #1
   14930:	cmp	r6, r3
   14934:	str	r8, [r5, r4, lsl #3]
   14938:	beq	14944 <__assert_fail@plt+0x3a88>
   1493c:	mov	r0, r6
   14940:	bl	17b90 <__assert_fail@plt+0x6cd4>
   14944:	mov	r0, r8
   14948:	bl	1629c <__assert_fail@plt+0x53e0>
   1494c:	ldr	lr, [sp, #76]	; 0x4c
   14950:	ldr	r3, [sp, #32]
   14954:	ldr	ip, [sp, #72]	; 0x48
   14958:	ldr	r4, [sp, #28]
   1495c:	mov	r2, r9
   14960:	mov	r1, r8
   14964:	str	r0, [fp, #4]
   14968:	str	r3, [sp]
   1496c:	str	sl, [sp, #8]
   14970:	str	r4, [sp, #4]
   14974:	str	lr, [sp, #16]
   14978:	str	ip, [sp, #12]
   1497c:	mvn	r3, #0
   14980:	mov	r6, r0
   14984:	bl	119c0 <__assert_fail@plt+0xb04>
   14988:	ldr	r3, [sp, #24]
   1498c:	mov	r0, r6
   14990:	str	r3, [r7]
   14994:	add	sp, sp, #180	; 0xb4
   14998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1499c:	mov	r3, #8
   149a0:	sub	r2, r4, r2
   149a4:	add	r1, sp, #80	; 0x50
   149a8:	str	r3, [sp]
   149ac:	add	r2, r2, #1
   149b0:	mvn	r3, #-2147483648	; 0x80000000
   149b4:	bl	164b8 <__assert_fail@plt+0x55fc>
   149b8:	mov	r5, r0
   149bc:	ldm	r8, {r0, r1}
   149c0:	str	r5, [r6]
   149c4:	stm	r5, {r0, r1}
   149c8:	b	148ac <__assert_fail@plt+0x39f0>
   149cc:	bl	10eb0 <abort@plt>
   149d0:	andeq	r9, r2, ip, ror #1
   149d4:	andeq	r9, r2, ip, lsl #3
   149d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149dc:	mov	r7, r1
   149e0:	ldr	lr, [pc, #492]	; 14bd4 <__assert_fail@plt+0x3d18>
   149e4:	mov	r8, r2
   149e8:	mov	r4, r0
   149ec:	mov	fp, r3
   149f0:	ldm	lr!, {r0, r1, r2, r3}
   149f4:	sub	sp, sp, #100	; 0x64
   149f8:	add	ip, sp, #48	; 0x30
   149fc:	mov	sl, #10
   14a00:	stmia	ip!, {r0, r1, r2, r3}
   14a04:	cmp	r8, #0
   14a08:	cmpne	r7, #0
   14a0c:	ldm	lr!, {r0, r1, r2, r3}
   14a10:	str	sl, [sp, #48]	; 0x30
   14a14:	stmia	ip!, {r0, r1, r2, r3}
   14a18:	ldm	lr, {r0, r1, r2, r3}
   14a1c:	stm	ip, {r0, r1, r2, r3}
   14a20:	beq	14bd0 <__assert_fail@plt+0x3d14>
   14a24:	str	r7, [sp, #88]	; 0x58
   14a28:	str	r8, [sp, #92]	; 0x5c
   14a2c:	bl	10e08 <__errno_location@plt>
   14a30:	ldr	r6, [pc, #416]	; 14bd8 <__assert_fail@plt+0x3d1c>
   14a34:	cmn	r4, #-2147483647	; 0x80000001
   14a38:	ldr	r5, [r6]
   14a3c:	mov	r9, r0
   14a40:	movne	r0, #0
   14a44:	moveq	r0, #1
   14a48:	ldr	r3, [r9]
   14a4c:	orrs	r0, r0, r4, lsr #31
   14a50:	str	r3, [sp, #28]
   14a54:	bne	14bd0 <__assert_fail@plt+0x3d14>
   14a58:	ldr	r2, [r6, #4]
   14a5c:	cmp	r4, r2
   14a60:	movlt	r3, sl
   14a64:	blt	14ad0 <__assert_fail@plt+0x3c14>
   14a68:	add	r7, r6, #8
   14a6c:	cmp	r5, r7
   14a70:	str	r2, [sp, #44]	; 0x2c
   14a74:	beq	14ba0 <__assert_fail@plt+0x3ce4>
   14a78:	mov	r3, #8
   14a7c:	sub	r2, r4, r2
   14a80:	mov	r0, r5
   14a84:	str	r3, [sp]
   14a88:	add	r2, r2, #1
   14a8c:	mvn	r3, #-2147483648	; 0x80000000
   14a90:	add	r1, sp, #44	; 0x2c
   14a94:	bl	164b8 <__assert_fail@plt+0x55fc>
   14a98:	mov	r5, r0
   14a9c:	str	r0, [r6]
   14aa0:	ldr	r0, [r6, #4]
   14aa4:	ldr	r2, [sp, #44]	; 0x2c
   14aa8:	mov	r1, #0
   14aac:	sub	r2, r2, r0
   14ab0:	add	r0, r5, r0, lsl #3
   14ab4:	lsl	r2, r2, #3
   14ab8:	bl	10e20 <memset@plt>
   14abc:	ldr	r3, [sp, #48]	; 0x30
   14ac0:	ldr	r7, [sp, #88]	; 0x58
   14ac4:	ldr	r8, [sp, #92]	; 0x5c
   14ac8:	ldr	r2, [sp, #44]	; 0x2c
   14acc:	str	r2, [r6, #4]
   14ad0:	add	r2, r5, r4, lsl #3
   14ad4:	mov	r1, r2
   14ad8:	str	r2, [sp, #32]
   14adc:	ldr	r2, [sp, #52]	; 0x34
   14ae0:	ldr	r6, [r1, #4]
   14ae4:	ldr	sl, [r5, r4, lsl #3]
   14ae8:	orr	r2, r2, #1
   14aec:	str	r3, [sp]
   14af0:	add	r3, sp, #56	; 0x38
   14af4:	str	r2, [sp, #36]	; 0x24
   14af8:	str	r2, [sp, #4]
   14afc:	str	r3, [sp, #8]
   14b00:	mov	r0, r6
   14b04:	str	r8, [sp, #16]
   14b08:	str	r7, [sp, #12]
   14b0c:	mov	r1, sl
   14b10:	mvn	r3, #0
   14b14:	mov	r2, fp
   14b18:	bl	119c0 <__assert_fail@plt+0xb04>
   14b1c:	cmp	sl, r0
   14b20:	bhi	14b8c <__assert_fail@plt+0x3cd0>
   14b24:	ldr	r3, [pc, #176]	; 14bdc <__assert_fail@plt+0x3d20>
   14b28:	add	r7, r0, #1
   14b2c:	cmp	r6, r3
   14b30:	str	r7, [r5, r4, lsl #3]
   14b34:	beq	14b40 <__assert_fail@plt+0x3c84>
   14b38:	mov	r0, r6
   14b3c:	bl	17b90 <__assert_fail@plt+0x6cd4>
   14b40:	mov	r0, r7
   14b44:	bl	1629c <__assert_fail@plt+0x53e0>
   14b48:	ldr	r3, [sp, #32]
   14b4c:	ldr	lr, [sp, #92]	; 0x5c
   14b50:	ldr	ip, [sp, #88]	; 0x58
   14b54:	ldr	r4, [sp, #36]	; 0x24
   14b58:	mov	r2, fp
   14b5c:	mov	r1, r7
   14b60:	str	r0, [r3, #4]
   14b64:	add	r3, sp, #56	; 0x38
   14b68:	str	r3, [sp, #8]
   14b6c:	ldr	r3, [sp, #48]	; 0x30
   14b70:	str	r4, [sp, #4]
   14b74:	str	r3, [sp]
   14b78:	str	lr, [sp, #16]
   14b7c:	str	ip, [sp, #12]
   14b80:	mvn	r3, #0
   14b84:	mov	r6, r0
   14b88:	bl	119c0 <__assert_fail@plt+0xb04>
   14b8c:	ldr	r3, [sp, #28]
   14b90:	mov	r0, r6
   14b94:	str	r3, [r9]
   14b98:	add	sp, sp, #100	; 0x64
   14b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ba0:	mov	r3, #8
   14ba4:	sub	r2, r4, r2
   14ba8:	str	r3, [sp]
   14bac:	add	r1, sp, #44	; 0x2c
   14bb0:	add	r2, r2, #1
   14bb4:	mvn	r3, #-2147483648	; 0x80000000
   14bb8:	bl	164b8 <__assert_fail@plt+0x55fc>
   14bbc:	mov	r5, r0
   14bc0:	ldm	r7, {r0, r1}
   14bc4:	str	r5, [r6]
   14bc8:	stm	r5, {r0, r1}
   14bcc:	b	14aa0 <__assert_fail@plt+0x3be4>
   14bd0:	bl	10eb0 <abort@plt>
   14bd4:	andeq	r9, r2, ip, asr r1
   14bd8:	andeq	r9, r2, ip, ror #1
   14bdc:	andeq	r9, r2, ip, lsl #3
   14be0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14be4:	mov	r7, r1
   14be8:	ldr	lr, [pc, #492]	; 14ddc <__assert_fail@plt+0x3f20>
   14bec:	mov	r8, r2
   14bf0:	mov	r4, r0
   14bf4:	mov	fp, r3
   14bf8:	ldm	lr!, {r0, r1, r2, r3}
   14bfc:	sub	sp, sp, #100	; 0x64
   14c00:	add	ip, sp, #48	; 0x30
   14c04:	mov	sl, #10
   14c08:	stmia	ip!, {r0, r1, r2, r3}
   14c0c:	cmp	r8, #0
   14c10:	cmpne	r7, #0
   14c14:	ldm	lr!, {r0, r1, r2, r3}
   14c18:	str	sl, [sp, #48]	; 0x30
   14c1c:	stmia	ip!, {r0, r1, r2, r3}
   14c20:	ldm	lr, {r0, r1, r2, r3}
   14c24:	stm	ip, {r0, r1, r2, r3}
   14c28:	beq	14dd8 <__assert_fail@plt+0x3f1c>
   14c2c:	str	r7, [sp, #88]	; 0x58
   14c30:	str	r8, [sp, #92]	; 0x5c
   14c34:	bl	10e08 <__errno_location@plt>
   14c38:	ldr	r6, [pc, #416]	; 14de0 <__assert_fail@plt+0x3f24>
   14c3c:	cmn	r4, #-2147483647	; 0x80000001
   14c40:	ldr	r5, [r6]
   14c44:	mov	r9, r0
   14c48:	movne	r0, #0
   14c4c:	moveq	r0, #1
   14c50:	ldr	r3, [r9]
   14c54:	orrs	r0, r0, r4, lsr #31
   14c58:	str	r3, [sp, #28]
   14c5c:	bne	14dd8 <__assert_fail@plt+0x3f1c>
   14c60:	ldr	r2, [r6, #4]
   14c64:	cmp	r4, r2
   14c68:	movlt	r3, sl
   14c6c:	blt	14cd8 <__assert_fail@plt+0x3e1c>
   14c70:	add	r7, r6, #8
   14c74:	cmp	r5, r7
   14c78:	str	r2, [sp, #44]	; 0x2c
   14c7c:	beq	14da8 <__assert_fail@plt+0x3eec>
   14c80:	mov	r3, #8
   14c84:	sub	r2, r4, r2
   14c88:	mov	r0, r5
   14c8c:	str	r3, [sp]
   14c90:	add	r2, r2, #1
   14c94:	mvn	r3, #-2147483648	; 0x80000000
   14c98:	add	r1, sp, #44	; 0x2c
   14c9c:	bl	164b8 <__assert_fail@plt+0x55fc>
   14ca0:	mov	r5, r0
   14ca4:	str	r0, [r6]
   14ca8:	ldr	r0, [r6, #4]
   14cac:	ldr	r2, [sp, #44]	; 0x2c
   14cb0:	mov	r1, #0
   14cb4:	sub	r2, r2, r0
   14cb8:	add	r0, r5, r0, lsl #3
   14cbc:	lsl	r2, r2, #3
   14cc0:	bl	10e20 <memset@plt>
   14cc4:	ldr	r3, [sp, #48]	; 0x30
   14cc8:	ldr	r7, [sp, #88]	; 0x58
   14ccc:	ldr	r8, [sp, #92]	; 0x5c
   14cd0:	ldr	r2, [sp, #44]	; 0x2c
   14cd4:	str	r2, [r6, #4]
   14cd8:	add	r2, r5, r4, lsl #3
   14cdc:	mov	r1, r2
   14ce0:	str	r2, [sp, #32]
   14ce4:	ldr	r2, [sp, #52]	; 0x34
   14ce8:	ldr	r6, [r1, #4]
   14cec:	ldr	sl, [r5, r4, lsl #3]
   14cf0:	orr	r2, r2, #1
   14cf4:	str	r3, [sp]
   14cf8:	add	r3, sp, #56	; 0x38
   14cfc:	str	r2, [sp, #36]	; 0x24
   14d00:	str	r2, [sp, #4]
   14d04:	str	r3, [sp, #8]
   14d08:	mov	r0, r6
   14d0c:	str	r8, [sp, #16]
   14d10:	str	r7, [sp, #12]
   14d14:	mov	r1, sl
   14d18:	ldr	r3, [sp, #136]	; 0x88
   14d1c:	mov	r2, fp
   14d20:	bl	119c0 <__assert_fail@plt+0xb04>
   14d24:	cmp	sl, r0
   14d28:	bhi	14d94 <__assert_fail@plt+0x3ed8>
   14d2c:	ldr	r3, [pc, #176]	; 14de4 <__assert_fail@plt+0x3f28>
   14d30:	add	r7, r0, #1
   14d34:	cmp	r6, r3
   14d38:	str	r7, [r5, r4, lsl #3]
   14d3c:	beq	14d48 <__assert_fail@plt+0x3e8c>
   14d40:	mov	r0, r6
   14d44:	bl	17b90 <__assert_fail@plt+0x6cd4>
   14d48:	mov	r0, r7
   14d4c:	bl	1629c <__assert_fail@plt+0x53e0>
   14d50:	ldr	r3, [sp, #32]
   14d54:	ldr	lr, [sp, #92]	; 0x5c
   14d58:	ldr	ip, [sp, #88]	; 0x58
   14d5c:	ldr	r4, [sp, #36]	; 0x24
   14d60:	mov	r2, fp
   14d64:	mov	r1, r7
   14d68:	str	r0, [r3, #4]
   14d6c:	add	r3, sp, #56	; 0x38
   14d70:	str	r3, [sp, #8]
   14d74:	ldr	r3, [sp, #48]	; 0x30
   14d78:	str	r4, [sp, #4]
   14d7c:	str	r3, [sp]
   14d80:	str	lr, [sp, #16]
   14d84:	str	ip, [sp, #12]
   14d88:	ldr	r3, [sp, #136]	; 0x88
   14d8c:	mov	r6, r0
   14d90:	bl	119c0 <__assert_fail@plt+0xb04>
   14d94:	ldr	r3, [sp, #28]
   14d98:	mov	r0, r6
   14d9c:	str	r3, [r9]
   14da0:	add	sp, sp, #100	; 0x64
   14da4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14da8:	mov	r3, #8
   14dac:	sub	r2, r4, r2
   14db0:	str	r3, [sp]
   14db4:	add	r1, sp, #44	; 0x2c
   14db8:	add	r2, r2, #1
   14dbc:	mvn	r3, #-2147483648	; 0x80000000
   14dc0:	bl	164b8 <__assert_fail@plt+0x55fc>
   14dc4:	mov	r5, r0
   14dc8:	ldm	r7, {r0, r1}
   14dcc:	str	r5, [r6]
   14dd0:	stm	r5, {r0, r1}
   14dd4:	b	14ca8 <__assert_fail@plt+0x3dec>
   14dd8:	bl	10eb0 <abort@plt>
   14ddc:	andeq	r9, r2, ip, asr r1
   14de0:	andeq	r9, r2, ip, ror #1
   14de4:	andeq	r9, r2, ip, lsl #3
   14de8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14dec:	mov	r5, r0
   14df0:	ldr	lr, [pc, #452]	; 14fbc <__assert_fail@plt+0x4100>
   14df4:	mov	r6, r1
   14df8:	mov	sl, r2
   14dfc:	ldm	lr!, {r0, r1, r2, r3}
   14e00:	sub	sp, sp, #92	; 0x5c
   14e04:	add	ip, sp, #40	; 0x28
   14e08:	cmp	r6, #0
   14e0c:	cmpne	r5, #0
   14e10:	stmia	ip!, {r0, r1, r2, r3}
   14e14:	mov	r9, #10
   14e18:	ldm	lr!, {r0, r1, r2, r3}
   14e1c:	moveq	fp, #1
   14e20:	movne	fp, #0
   14e24:	str	r9, [sp, #40]	; 0x28
   14e28:	stmia	ip!, {r0, r1, r2, r3}
   14e2c:	ldm	lr, {r0, r1, r2, r3}
   14e30:	stm	ip, {r0, r1, r2, r3}
   14e34:	beq	14fb8 <__assert_fail@plt+0x40fc>
   14e38:	str	r5, [sp, #80]	; 0x50
   14e3c:	str	r6, [sp, #84]	; 0x54
   14e40:	bl	10e08 <__errno_location@plt>
   14e44:	ldr	r7, [pc, #372]	; 14fc0 <__assert_fail@plt+0x4104>
   14e48:	ldr	r2, [r7, #4]
   14e4c:	ldr	r4, [r7]
   14e50:	cmp	r2, #0
   14e54:	ldr	r3, [r0]
   14e58:	mov	r8, r0
   14e5c:	str	r3, [sp, #24]
   14e60:	movgt	r3, r9
   14e64:	bgt	14ecc <__assert_fail@plt+0x4010>
   14e68:	add	r5, r7, #8
   14e6c:	cmp	r4, r5
   14e70:	str	r2, [sp, #36]	; 0x24
   14e74:	beq	14f88 <__assert_fail@plt+0x40cc>
   14e78:	mov	r3, #8
   14e7c:	mov	r0, r4
   14e80:	str	r3, [sp]
   14e84:	rsb	r2, r2, #1
   14e88:	mvn	r3, #-2147483648	; 0x80000000
   14e8c:	add	r1, sp, #36	; 0x24
   14e90:	bl	164b8 <__assert_fail@plt+0x55fc>
   14e94:	mov	r4, r0
   14e98:	str	r0, [r7]
   14e9c:	ldr	r0, [r7, #4]
   14ea0:	ldr	r2, [sp, #36]	; 0x24
   14ea4:	mov	r1, #0
   14ea8:	sub	r2, r2, r0
   14eac:	add	r0, r4, r0, lsl #3
   14eb0:	lsl	r2, r2, #3
   14eb4:	bl	10e20 <memset@plt>
   14eb8:	ldr	r3, [sp, #40]	; 0x28
   14ebc:	ldr	r5, [sp, #80]	; 0x50
   14ec0:	ldr	r6, [sp, #84]	; 0x54
   14ec4:	ldr	r2, [sp, #36]	; 0x24
   14ec8:	str	r2, [r7, #4]
   14ecc:	ldr	r2, [sp, #44]	; 0x2c
   14ed0:	ldr	r9, [r4]
   14ed4:	ldr	r7, [r4, #4]
   14ed8:	orr	r2, r2, #1
   14edc:	add	fp, sp, #48	; 0x30
   14ee0:	str	r2, [sp, #28]
   14ee4:	str	r2, [sp, #4]
   14ee8:	str	r3, [sp]
   14eec:	str	r6, [sp, #16]
   14ef0:	str	r5, [sp, #12]
   14ef4:	mov	r1, r9
   14ef8:	mov	r0, r7
   14efc:	str	fp, [sp, #8]
   14f00:	mvn	r3, #0
   14f04:	mov	r2, sl
   14f08:	bl	119c0 <__assert_fail@plt+0xb04>
   14f0c:	cmp	r9, r0
   14f10:	bhi	14f74 <__assert_fail@plt+0x40b8>
   14f14:	ldr	r3, [pc, #168]	; 14fc4 <__assert_fail@plt+0x4108>
   14f18:	add	r5, r0, #1
   14f1c:	cmp	r7, r3
   14f20:	str	r5, [r4]
   14f24:	beq	14f30 <__assert_fail@plt+0x4074>
   14f28:	mov	r0, r7
   14f2c:	bl	17b90 <__assert_fail@plt+0x6cd4>
   14f30:	mov	r0, r5
   14f34:	bl	1629c <__assert_fail@plt+0x53e0>
   14f38:	ldr	lr, [sp, #84]	; 0x54
   14f3c:	ldr	r3, [sp, #40]	; 0x28
   14f40:	ldr	ip, [sp, #80]	; 0x50
   14f44:	mov	r2, sl
   14f48:	mov	r1, r5
   14f4c:	str	r0, [r4, #4]
   14f50:	ldr	r4, [sp, #28]
   14f54:	str	r3, [sp]
   14f58:	str	fp, [sp, #8]
   14f5c:	str	r4, [sp, #4]
   14f60:	str	lr, [sp, #16]
   14f64:	str	ip, [sp, #12]
   14f68:	mvn	r3, #0
   14f6c:	mov	r7, r0
   14f70:	bl	119c0 <__assert_fail@plt+0xb04>
   14f74:	ldr	r3, [sp, #24]
   14f78:	mov	r0, r7
   14f7c:	str	r3, [r8]
   14f80:	add	sp, sp, #92	; 0x5c
   14f84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f88:	mov	r3, #8
   14f8c:	str	r3, [sp]
   14f90:	add	r1, sp, #36	; 0x24
   14f94:	rsb	r2, r2, #1
   14f98:	mov	r0, fp
   14f9c:	mvn	r3, #-2147483648	; 0x80000000
   14fa0:	bl	164b8 <__assert_fail@plt+0x55fc>
   14fa4:	mov	r4, r0
   14fa8:	ldm	r5, {r0, r1}
   14fac:	str	r4, [r7]
   14fb0:	stm	r4, {r0, r1}
   14fb4:	b	14e9c <__assert_fail@plt+0x3fe0>
   14fb8:	bl	10eb0 <abort@plt>
   14fbc:	andeq	r9, r2, ip, asr r1
   14fc0:	andeq	r9, r2, ip, ror #1
   14fc4:	andeq	r9, r2, ip, lsl #3
   14fc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fcc:	mov	r5, r0
   14fd0:	ldr	lr, [pc, #464]	; 151a8 <__assert_fail@plt+0x42ec>
   14fd4:	mov	r6, r1
   14fd8:	mov	sl, r2
   14fdc:	mov	fp, r3
   14fe0:	ldm	lr!, {r0, r1, r2, r3}
   14fe4:	sub	sp, sp, #92	; 0x5c
   14fe8:	add	ip, sp, #40	; 0x28
   14fec:	cmp	r6, #0
   14ff0:	cmpne	r5, #0
   14ff4:	stmia	ip!, {r0, r1, r2, r3}
   14ff8:	moveq	r4, #1
   14ffc:	ldm	lr!, {r0, r1, r2, r3}
   15000:	movne	r4, #0
   15004:	mov	r9, #10
   15008:	str	r4, [sp, #28]
   1500c:	stmia	ip!, {r0, r1, r2, r3}
   15010:	ldm	lr, {r0, r1, r2, r3}
   15014:	str	r9, [sp, #40]	; 0x28
   15018:	stm	ip, {r0, r1, r2, r3}
   1501c:	beq	151a4 <__assert_fail@plt+0x42e8>
   15020:	str	r5, [sp, #80]	; 0x50
   15024:	str	r6, [sp, #84]	; 0x54
   15028:	bl	10e08 <__errno_location@plt>
   1502c:	ldr	r7, [pc, #376]	; 151ac <__assert_fail@plt+0x42f0>
   15030:	ldr	r2, [r7, #4]
   15034:	ldr	r4, [r7]
   15038:	cmp	r2, #0
   1503c:	ldr	r3, [r0]
   15040:	mov	r8, r0
   15044:	str	r3, [sp, #24]
   15048:	movgt	r3, r9
   1504c:	bgt	150b4 <__assert_fail@plt+0x41f8>
   15050:	add	r5, r7, #8
   15054:	cmp	r4, r5
   15058:	str	r2, [sp, #36]	; 0x24
   1505c:	beq	15174 <__assert_fail@plt+0x42b8>
   15060:	mov	r3, #8
   15064:	mov	r0, r4
   15068:	str	r3, [sp]
   1506c:	rsb	r2, r2, #1
   15070:	mvn	r3, #-2147483648	; 0x80000000
   15074:	add	r1, sp, #36	; 0x24
   15078:	bl	164b8 <__assert_fail@plt+0x55fc>
   1507c:	mov	r4, r0
   15080:	str	r0, [r7]
   15084:	ldr	r0, [r7, #4]
   15088:	ldr	r2, [sp, #36]	; 0x24
   1508c:	mov	r1, #0
   15090:	sub	r2, r2, r0
   15094:	add	r0, r4, r0, lsl #3
   15098:	lsl	r2, r2, #3
   1509c:	bl	10e20 <memset@plt>
   150a0:	ldr	r3, [sp, #40]	; 0x28
   150a4:	ldr	r5, [sp, #80]	; 0x50
   150a8:	ldr	r6, [sp, #84]	; 0x54
   150ac:	ldr	r2, [sp, #36]	; 0x24
   150b0:	str	r2, [r7, #4]
   150b4:	ldr	r2, [sp, #44]	; 0x2c
   150b8:	ldr	r9, [r4]
   150bc:	ldr	r7, [r4, #4]
   150c0:	orr	r2, r2, #1
   150c4:	str	r3, [sp]
   150c8:	add	r3, sp, #48	; 0x30
   150cc:	str	r2, [sp, #28]
   150d0:	str	r2, [sp, #4]
   150d4:	str	r3, [sp, #8]
   150d8:	str	r6, [sp, #16]
   150dc:	str	r5, [sp, #12]
   150e0:	mov	r1, r9
   150e4:	mov	r0, r7
   150e8:	mov	r3, fp
   150ec:	mov	r2, sl
   150f0:	bl	119c0 <__assert_fail@plt+0xb04>
   150f4:	cmp	r9, r0
   150f8:	bhi	15160 <__assert_fail@plt+0x42a4>
   150fc:	ldr	r3, [pc, #172]	; 151b0 <__assert_fail@plt+0x42f4>
   15100:	add	r5, r0, #1
   15104:	cmp	r7, r3
   15108:	str	r5, [r4]
   1510c:	beq	15118 <__assert_fail@plt+0x425c>
   15110:	mov	r0, r7
   15114:	bl	17b90 <__assert_fail@plt+0x6cd4>
   15118:	mov	r0, r5
   1511c:	bl	1629c <__assert_fail@plt+0x53e0>
   15120:	add	lr, sp, #48	; 0x30
   15124:	ldr	ip, [sp, #84]	; 0x54
   15128:	mov	r1, r5
   1512c:	ldr	r5, [sp, #28]
   15130:	mov	r3, fp
   15134:	mov	r2, sl
   15138:	str	r0, [r4, #4]
   1513c:	ldr	r4, [sp, #80]	; 0x50
   15140:	str	lr, [sp, #8]
   15144:	ldr	lr, [sp, #40]	; 0x28
   15148:	str	r5, [sp, #4]
   1514c:	str	ip, [sp, #16]
   15150:	str	r4, [sp, #12]
   15154:	str	lr, [sp]
   15158:	mov	r7, r0
   1515c:	bl	119c0 <__assert_fail@plt+0xb04>
   15160:	ldr	r3, [sp, #24]
   15164:	mov	r0, r7
   15168:	str	r3, [r8]
   1516c:	add	sp, sp, #92	; 0x5c
   15170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15174:	mov	r3, #8
   15178:	str	r3, [sp]
   1517c:	add	r1, sp, #36	; 0x24
   15180:	rsb	r2, r2, #1
   15184:	ldr	r0, [sp, #28]
   15188:	mvn	r3, #-2147483648	; 0x80000000
   1518c:	bl	164b8 <__assert_fail@plt+0x55fc>
   15190:	mov	r4, r0
   15194:	ldm	r5, {r0, r1}
   15198:	str	r4, [r7]
   1519c:	stm	r4, {r0, r1}
   151a0:	b	15084 <__assert_fail@plt+0x41c8>
   151a4:	bl	10eb0 <abort@plt>
   151a8:	andeq	r9, r2, ip, asr r1
   151ac:	andeq	r9, r2, ip, ror #1
   151b0:	andeq	r9, r2, ip, lsl #3
   151b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151b8:	sub	sp, sp, #52	; 0x34
   151bc:	mov	r5, r0
   151c0:	mov	sl, r1
   151c4:	mov	fp, r2
   151c8:	bl	10e08 <__errno_location@plt>
   151cc:	ldr	r4, [pc, #404]	; 15368 <__assert_fail@plt+0x44ac>
   151d0:	cmn	r5, #-2147483647	; 0x80000001
   151d4:	ldr	r6, [r4]
   151d8:	mov	r8, r0
   151dc:	movne	r0, #0
   151e0:	moveq	r0, #1
   151e4:	ldr	r3, [r8]
   151e8:	orrs	r0, r0, r5, lsr #31
   151ec:	str	r3, [sp, #28]
   151f0:	bne	15364 <__assert_fail@plt+0x44a8>
   151f4:	ldr	r2, [r4, #4]
   151f8:	cmp	r5, r2
   151fc:	blt	1525c <__assert_fail@plt+0x43a0>
   15200:	add	r7, r4, #8
   15204:	cmp	r6, r7
   15208:	str	r2, [sp, #44]	; 0x2c
   1520c:	beq	15334 <__assert_fail@plt+0x4478>
   15210:	mov	r3, #8
   15214:	sub	r2, r5, r2
   15218:	mov	r0, r6
   1521c:	str	r3, [sp]
   15220:	add	r2, r2, #1
   15224:	mvn	r3, #-2147483648	; 0x80000000
   15228:	add	r1, sp, #44	; 0x2c
   1522c:	bl	164b8 <__assert_fail@plt+0x55fc>
   15230:	mov	r6, r0
   15234:	str	r0, [r4]
   15238:	ldr	r0, [r4, #4]
   1523c:	ldr	r2, [sp, #44]	; 0x2c
   15240:	mov	r1, #0
   15244:	sub	r2, r2, r0
   15248:	add	r0, r6, r0, lsl #3
   1524c:	lsl	r2, r2, #3
   15250:	bl	10e20 <memset@plt>
   15254:	ldr	r3, [sp, #44]	; 0x2c
   15258:	str	r3, [r4, #4]
   1525c:	ldr	r2, [r4, #56]	; 0x38
   15260:	add	r3, r6, r5, lsl #3
   15264:	ldr	r1, [r4, #20]
   15268:	ldr	r7, [r3, #4]
   1526c:	ldr	r9, [r6, r5, lsl #3]
   15270:	ldr	ip, [r4, #60]	; 0x3c
   15274:	str	r3, [sp, #32]
   15278:	ldr	r3, [r4, #16]
   1527c:	str	r2, [sp, #12]
   15280:	ldr	r2, [pc, #228]	; 1536c <__assert_fail@plt+0x44b0>
   15284:	orr	r1, r1, #1
   15288:	str	r1, [sp, #36]	; 0x24
   1528c:	str	r1, [sp, #4]
   15290:	str	r2, [sp, #8]
   15294:	str	r3, [sp]
   15298:	mov	r0, r7
   1529c:	mov	r1, r9
   152a0:	str	ip, [sp, #16]
   152a4:	mov	r3, fp
   152a8:	mov	r2, sl
   152ac:	bl	119c0 <__assert_fail@plt+0xb04>
   152b0:	cmp	r9, r0
   152b4:	bhi	15320 <__assert_fail@plt+0x4464>
   152b8:	ldr	r3, [pc, #176]	; 15370 <__assert_fail@plt+0x44b4>
   152bc:	add	r9, r0, #1
   152c0:	cmp	r7, r3
   152c4:	str	r9, [r6, r5, lsl #3]
   152c8:	beq	152d4 <__assert_fail@plt+0x4418>
   152cc:	mov	r0, r7
   152d0:	bl	17b90 <__assert_fail@plt+0x6cd4>
   152d4:	mov	r0, r9
   152d8:	bl	1629c <__assert_fail@plt+0x53e0>
   152dc:	ldr	ip, [sp, #32]
   152e0:	ldr	lr, [r4, #60]	; 0x3c
   152e4:	ldr	r5, [r4, #56]	; 0x38
   152e8:	mov	r3, fp
   152ec:	mov	r2, sl
   152f0:	mov	r1, r9
   152f4:	str	r0, [ip, #4]
   152f8:	ldr	ip, [r4, #16]
   152fc:	ldr	r4, [pc, #104]	; 1536c <__assert_fail@plt+0x44b0>
   15300:	str	lr, [sp, #16]
   15304:	str	r4, [sp, #8]
   15308:	ldr	r4, [sp, #36]	; 0x24
   1530c:	str	r5, [sp, #12]
   15310:	str	r4, [sp, #4]
   15314:	str	ip, [sp]
   15318:	mov	r7, r0
   1531c:	bl	119c0 <__assert_fail@plt+0xb04>
   15320:	ldr	r3, [sp, #28]
   15324:	mov	r0, r7
   15328:	str	r3, [r8]
   1532c:	add	sp, sp, #52	; 0x34
   15330:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15334:	mov	r3, #8
   15338:	sub	r2, r5, r2
   1533c:	str	r3, [sp]
   15340:	add	r1, sp, #44	; 0x2c
   15344:	add	r2, r2, #1
   15348:	mvn	r3, #-2147483648	; 0x80000000
   1534c:	bl	164b8 <__assert_fail@plt+0x55fc>
   15350:	mov	r6, r0
   15354:	ldm	r7, {r0, r1}
   15358:	str	r6, [r4]
   1535c:	stm	r6, {r0, r1}
   15360:	b	15238 <__assert_fail@plt+0x437c>
   15364:	bl	10eb0 <abort@plt>
   15368:	andeq	r9, r2, ip, ror #1
   1536c:	andeq	r9, r2, r4, lsl #2
   15370:	andeq	r9, r2, ip, lsl #3
   15374:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15378:	sub	sp, sp, #44	; 0x2c
   1537c:	mov	r9, r0
   15380:	mov	sl, r1
   15384:	bl	10e08 <__errno_location@plt>
   15388:	ldr	r4, [pc, #360]	; 154f8 <__assert_fail@plt+0x463c>
   1538c:	ldr	r2, [r4, #4]
   15390:	ldr	r5, [r4]
   15394:	cmp	r2, #0
   15398:	ldr	r3, [r0]
   1539c:	mov	r7, r0
   153a0:	str	r3, [sp, #24]
   153a4:	bgt	15400 <__assert_fail@plt+0x4544>
   153a8:	add	r6, r4, #8
   153ac:	cmp	r5, r6
   153b0:	str	r2, [sp, #36]	; 0x24
   153b4:	beq	154c8 <__assert_fail@plt+0x460c>
   153b8:	mov	r3, #8
   153bc:	mov	r0, r5
   153c0:	str	r3, [sp]
   153c4:	rsb	r2, r2, #1
   153c8:	mvn	r3, #-2147483648	; 0x80000000
   153cc:	add	r1, sp, #36	; 0x24
   153d0:	bl	164b8 <__assert_fail@plt+0x55fc>
   153d4:	mov	r5, r0
   153d8:	str	r0, [r4]
   153dc:	ldr	r0, [r4, #4]
   153e0:	ldr	r2, [sp, #36]	; 0x24
   153e4:	mov	r1, #0
   153e8:	sub	r2, r2, r0
   153ec:	add	r0, r5, r0, lsl #3
   153f0:	lsl	r2, r2, #3
   153f4:	bl	10e20 <memset@plt>
   153f8:	ldr	r3, [sp, #36]	; 0x24
   153fc:	str	r3, [r4, #4]
   15400:	ldr	r1, [r4, #20]
   15404:	ldr	r8, [r5]
   15408:	ldr	r6, [r5, #4]
   1540c:	ldr	r2, [r4, #56]	; 0x38
   15410:	ldr	r3, [r4, #16]
   15414:	ldr	ip, [r4, #60]	; 0x3c
   15418:	ldr	fp, [pc, #220]	; 154fc <__assert_fail@plt+0x4640>
   1541c:	orr	r1, r1, #1
   15420:	str	r1, [sp, #28]
   15424:	str	r1, [sp, #4]
   15428:	str	r2, [sp, #12]
   1542c:	str	r3, [sp]
   15430:	mov	r1, r8
   15434:	mov	r0, r6
   15438:	str	ip, [sp, #16]
   1543c:	str	fp, [sp, #8]
   15440:	mov	r3, sl
   15444:	mov	r2, r9
   15448:	bl	119c0 <__assert_fail@plt+0xb04>
   1544c:	cmp	r8, r0
   15450:	bhi	154b4 <__assert_fail@plt+0x45f8>
   15454:	ldr	r3, [pc, #164]	; 15500 <__assert_fail@plt+0x4644>
   15458:	add	r8, r0, #1
   1545c:	cmp	r6, r3
   15460:	str	r8, [r5]
   15464:	beq	15470 <__assert_fail@plt+0x45b4>
   15468:	mov	r0, r6
   1546c:	bl	17b90 <__assert_fail@plt+0x6cd4>
   15470:	mov	r0, r8
   15474:	bl	1629c <__assert_fail@plt+0x53e0>
   15478:	ldr	lr, [r4, #60]	; 0x3c
   1547c:	ldr	ip, [r4, #16]
   15480:	mov	r3, sl
   15484:	mov	r2, r9
   15488:	mov	r1, r8
   1548c:	str	r0, [r5, #4]
   15490:	ldr	r5, [r4, #56]	; 0x38
   15494:	ldr	r4, [sp, #28]
   15498:	str	fp, [sp, #8]
   1549c:	str	r4, [sp, #4]
   154a0:	str	lr, [sp, #16]
   154a4:	str	r5, [sp, #12]
   154a8:	str	ip, [sp]
   154ac:	mov	r6, r0
   154b0:	bl	119c0 <__assert_fail@plt+0xb04>
   154b4:	ldr	r3, [sp, #24]
   154b8:	mov	r0, r6
   154bc:	str	r3, [r7]
   154c0:	add	sp, sp, #44	; 0x2c
   154c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154c8:	mov	r3, #8
   154cc:	str	r3, [sp]
   154d0:	add	r1, sp, #36	; 0x24
   154d4:	rsb	r2, r2, #1
   154d8:	mvn	r3, #-2147483648	; 0x80000000
   154dc:	mov	r0, #0
   154e0:	bl	164b8 <__assert_fail@plt+0x55fc>
   154e4:	mov	r5, r0
   154e8:	ldm	r6, {r0, r1}
   154ec:	str	r5, [r4]
   154f0:	stm	r5, {r0, r1}
   154f4:	b	153dc <__assert_fail@plt+0x4520>
   154f8:	andeq	r9, r2, ip, ror #1
   154fc:	andeq	r9, r2, r4, lsl #2
   15500:	andeq	r9, r2, ip, lsl #3
   15504:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15508:	sub	sp, sp, #44	; 0x2c
   1550c:	mov	r5, r0
   15510:	mov	sl, r1
   15514:	bl	10e08 <__errno_location@plt>
   15518:	ldr	r4, [pc, #396]	; 156ac <__assert_fail@plt+0x47f0>
   1551c:	cmn	r5, #-2147483647	; 0x80000001
   15520:	ldr	r6, [r4]
   15524:	mov	r8, r0
   15528:	movne	r0, #0
   1552c:	moveq	r0, #1
   15530:	ldr	r3, [r8]
   15534:	orrs	r0, r0, r5, lsr #31
   15538:	str	r3, [sp, #24]
   1553c:	bne	156a8 <__assert_fail@plt+0x47ec>
   15540:	ldr	r2, [r4, #4]
   15544:	cmp	r5, r2
   15548:	blt	155a8 <__assert_fail@plt+0x46ec>
   1554c:	add	r7, r4, #8
   15550:	cmp	r6, r7
   15554:	str	r2, [sp, #36]	; 0x24
   15558:	beq	15678 <__assert_fail@plt+0x47bc>
   1555c:	mov	r3, #8
   15560:	sub	r2, r5, r2
   15564:	mov	r0, r6
   15568:	str	r3, [sp]
   1556c:	add	r2, r2, #1
   15570:	mvn	r3, #-2147483648	; 0x80000000
   15574:	add	r1, sp, #36	; 0x24
   15578:	bl	164b8 <__assert_fail@plt+0x55fc>
   1557c:	mov	r6, r0
   15580:	str	r0, [r4]
   15584:	ldr	r0, [r4, #4]
   15588:	ldr	r2, [sp, #36]	; 0x24
   1558c:	mov	r1, #0
   15590:	sub	r2, r2, r0
   15594:	add	r0, r6, r0, lsl #3
   15598:	lsl	r2, r2, #3
   1559c:	bl	10e20 <memset@plt>
   155a0:	ldr	r3, [sp, #36]	; 0x24
   155a4:	str	r3, [r4, #4]
   155a8:	ldr	r2, [r4, #56]	; 0x38
   155ac:	add	fp, r6, r5, lsl #3
   155b0:	ldr	r1, [r4, #20]
   155b4:	ldr	r9, [r6, r5, lsl #3]
   155b8:	ldr	r7, [fp, #4]
   155bc:	ldr	r3, [r4, #16]
   155c0:	ldr	ip, [r4, #60]	; 0x3c
   155c4:	str	r2, [sp, #12]
   155c8:	ldr	r2, [pc, #224]	; 156b0 <__assert_fail@plt+0x47f4>
   155cc:	orr	r1, r1, #1
   155d0:	str	r1, [sp, #28]
   155d4:	str	r1, [sp, #4]
   155d8:	str	r2, [sp, #8]
   155dc:	str	r3, [sp]
   155e0:	mov	r0, r7
   155e4:	mov	r1, r9
   155e8:	str	ip, [sp, #16]
   155ec:	mvn	r3, #0
   155f0:	mov	r2, sl
   155f4:	bl	119c0 <__assert_fail@plt+0xb04>
   155f8:	cmp	r9, r0
   155fc:	bhi	15664 <__assert_fail@plt+0x47a8>
   15600:	ldr	r3, [pc, #172]	; 156b4 <__assert_fail@plt+0x47f8>
   15604:	add	r9, r0, #1
   15608:	cmp	r7, r3
   1560c:	str	r9, [r6, r5, lsl #3]
   15610:	beq	1561c <__assert_fail@plt+0x4760>
   15614:	mov	r0, r7
   15618:	bl	17b90 <__assert_fail@plt+0x6cd4>
   1561c:	mov	r0, r9
   15620:	bl	1629c <__assert_fail@plt+0x53e0>
   15624:	ldr	ip, [r4, #60]	; 0x3c
   15628:	ldr	r3, [r4, #16]
   1562c:	ldr	lr, [r4, #56]	; 0x38
   15630:	ldr	r4, [pc, #120]	; 156b0 <__assert_fail@plt+0x47f4>
   15634:	mov	r2, sl
   15638:	mov	r1, r9
   1563c:	str	r0, [fp, #4]
   15640:	str	r4, [sp, #8]
   15644:	ldr	r4, [sp, #28]
   15648:	str	r3, [sp]
   1564c:	str	r4, [sp, #4]
   15650:	str	ip, [sp, #16]
   15654:	str	lr, [sp, #12]
   15658:	mvn	r3, #0
   1565c:	mov	r7, r0
   15660:	bl	119c0 <__assert_fail@plt+0xb04>
   15664:	ldr	r3, [sp, #24]
   15668:	mov	r0, r7
   1566c:	str	r3, [r8]
   15670:	add	sp, sp, #44	; 0x2c
   15674:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15678:	mov	r3, #8
   1567c:	sub	r2, r5, r2
   15680:	str	r3, [sp]
   15684:	add	r1, sp, #36	; 0x24
   15688:	add	r2, r2, #1
   1568c:	mvn	r3, #-2147483648	; 0x80000000
   15690:	bl	164b8 <__assert_fail@plt+0x55fc>
   15694:	mov	r6, r0
   15698:	ldm	r7, {r0, r1}
   1569c:	str	r6, [r4]
   156a0:	stm	r6, {r0, r1}
   156a4:	b	15584 <__assert_fail@plt+0x46c8>
   156a8:	bl	10eb0 <abort@plt>
   156ac:	andeq	r9, r2, ip, ror #1
   156b0:	andeq	r9, r2, r4, lsl #2
   156b4:	andeq	r9, r2, ip, lsl #3
   156b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156bc:	sub	sp, sp, #44	; 0x2c
   156c0:	mov	sl, r0
   156c4:	bl	10e08 <__errno_location@plt>
   156c8:	ldr	r4, [pc, #348]	; 1582c <__assert_fail@plt+0x4970>
   156cc:	ldr	r2, [r4, #4]
   156d0:	ldr	r5, [r4]
   156d4:	cmp	r2, #0
   156d8:	ldr	r3, [r0]
   156dc:	mov	r8, r0
   156e0:	str	r3, [sp, #28]
   156e4:	bgt	15740 <__assert_fail@plt+0x4884>
   156e8:	add	r6, r4, #8
   156ec:	cmp	r5, r6
   156f0:	str	r2, [sp, #36]	; 0x24
   156f4:	beq	157fc <__assert_fail@plt+0x4940>
   156f8:	mov	r3, #8
   156fc:	mov	r0, r5
   15700:	str	r3, [sp]
   15704:	rsb	r2, r2, #1
   15708:	mvn	r3, #-2147483648	; 0x80000000
   1570c:	add	r1, sp, #36	; 0x24
   15710:	bl	164b8 <__assert_fail@plt+0x55fc>
   15714:	mov	r5, r0
   15718:	str	r0, [r4]
   1571c:	ldr	r0, [r4, #4]
   15720:	ldr	r2, [sp, #36]	; 0x24
   15724:	mov	r1, #0
   15728:	sub	r2, r2, r0
   1572c:	add	r0, r5, r0, lsl #3
   15730:	lsl	r2, r2, #3
   15734:	bl	10e20 <memset@plt>
   15738:	ldr	r3, [sp, #36]	; 0x24
   1573c:	str	r3, [r4, #4]
   15740:	ldr	r7, [r4, #20]
   15744:	ldr	r9, [r5]
   15748:	ldr	r6, [r5, #4]
   1574c:	ldr	r2, [r4, #56]	; 0x38
   15750:	ldr	r3, [r4, #16]
   15754:	ldr	ip, [r4, #60]	; 0x3c
   15758:	ldr	fp, [pc, #208]	; 15830 <__assert_fail@plt+0x4974>
   1575c:	orr	r7, r7, #1
   15760:	str	r2, [sp, #12]
   15764:	str	r3, [sp]
   15768:	str	r7, [sp, #4]
   1576c:	mov	r1, r9
   15770:	mov	r0, r6
   15774:	str	ip, [sp, #16]
   15778:	str	fp, [sp, #8]
   1577c:	mvn	r3, #0
   15780:	mov	r2, sl
   15784:	bl	119c0 <__assert_fail@plt+0xb04>
   15788:	cmp	r9, r0
   1578c:	bhi	157e8 <__assert_fail@plt+0x492c>
   15790:	ldr	r3, [pc, #156]	; 15834 <__assert_fail@plt+0x4978>
   15794:	add	r9, r0, #1
   15798:	cmp	r6, r3
   1579c:	str	r9, [r5]
   157a0:	beq	157ac <__assert_fail@plt+0x48f0>
   157a4:	mov	r0, r6
   157a8:	bl	17b90 <__assert_fail@plt+0x6cd4>
   157ac:	mov	r0, r9
   157b0:	bl	1629c <__assert_fail@plt+0x53e0>
   157b4:	ldr	ip, [r4, #60]	; 0x3c
   157b8:	ldr	r3, [r4, #16]
   157bc:	ldr	lr, [r4, #56]	; 0x38
   157c0:	mov	r2, sl
   157c4:	mov	r1, r9
   157c8:	str	r0, [r5, #4]
   157cc:	str	r3, [sp]
   157d0:	stmib	sp, {r7, fp}
   157d4:	str	ip, [sp, #16]
   157d8:	str	lr, [sp, #12]
   157dc:	mvn	r3, #0
   157e0:	mov	r6, r0
   157e4:	bl	119c0 <__assert_fail@plt+0xb04>
   157e8:	ldr	r3, [sp, #28]
   157ec:	mov	r0, r6
   157f0:	str	r3, [r8]
   157f4:	add	sp, sp, #44	; 0x2c
   157f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157fc:	mov	r3, #8
   15800:	str	r3, [sp]
   15804:	add	r1, sp, #36	; 0x24
   15808:	rsb	r2, r2, #1
   1580c:	mvn	r3, #-2147483648	; 0x80000000
   15810:	mov	r0, #0
   15814:	bl	164b8 <__assert_fail@plt+0x55fc>
   15818:	mov	r5, r0
   1581c:	ldm	r6, {r0, r1}
   15820:	str	r5, [r4]
   15824:	stm	r5, {r0, r1}
   15828:	b	1571c <__assert_fail@plt+0x4860>
   1582c:	andeq	r9, r2, ip, ror #1
   15830:	andeq	r9, r2, r4, lsl #2
   15834:	andeq	r9, r2, ip, lsl #3
   15838:	push	{r4, r5, r6, lr}
   1583c:	sub	sp, sp, #32
   15840:	cmp	r1, #0
   15844:	mov	r4, r0
   15848:	ldr	r5, [sp, #48]	; 0x30
   1584c:	ldr	r6, [sp, #52]	; 0x34
   15850:	beq	15b68 <__assert_fail@plt+0x4cac>
   15854:	stm	sp, {r2, r3}
   15858:	mov	r3, r1
   1585c:	ldr	r2, [pc, #808]	; 15b8c <__assert_fail@plt+0x4cd0>
   15860:	mov	r1, #1
   15864:	bl	10e44 <__fprintf_chk@plt>
   15868:	mov	r2, #5
   1586c:	ldr	r1, [pc, #796]	; 15b90 <__assert_fail@plt+0x4cd4>
   15870:	mov	r0, #0
   15874:	bl	10d00 <dcgettext@plt>
   15878:	ldr	r3, [pc, #788]	; 15b94 <__assert_fail@plt+0x4cd8>
   1587c:	ldr	r2, [pc, #788]	; 15b98 <__assert_fail@plt+0x4cdc>
   15880:	str	r3, [sp]
   15884:	mov	r1, #1
   15888:	mov	r3, r0
   1588c:	mov	r0, r4
   15890:	bl	10e44 <__fprintf_chk@plt>
   15894:	mov	r1, r4
   15898:	mov	r0, #10
   1589c:	bl	10cf4 <fputc_unlocked@plt>
   158a0:	mov	r2, #5
   158a4:	ldr	r1, [pc, #752]	; 15b9c <__assert_fail@plt+0x4ce0>
   158a8:	mov	r0, #0
   158ac:	bl	10d00 <dcgettext@plt>
   158b0:	mov	r1, #1
   158b4:	ldr	r3, [pc, #740]	; 15ba0 <__assert_fail@plt+0x4ce4>
   158b8:	mov	r2, r0
   158bc:	mov	r0, r4
   158c0:	bl	10e44 <__fprintf_chk@plt>
   158c4:	mov	r1, r4
   158c8:	mov	r0, #10
   158cc:	bl	10cf4 <fputc_unlocked@plt>
   158d0:	cmp	r6, #9
   158d4:	ldrls	pc, [pc, r6, lsl #2]
   158d8:	b	15b80 <__assert_fail@plt+0x4cc4>
   158dc:	andeq	r5, r1, r0, ror #18
   158e0:	andeq	r5, r1, r8, ror #18
   158e4:	muleq	r1, r4, r9
   158e8:	andeq	r5, r1, r8, asr #19
   158ec:	andeq	r5, r1, r4, lsl #20
   158f0:	andeq	r5, r1, r0, asr #20
   158f4:	andeq	r5, r1, ip, ror sl
   158f8:	andeq	r5, r1, r0, asr #21
   158fc:	andeq	r5, r1, r0, lsl fp
   15900:	andeq	r5, r1, r4, lsl #18
   15904:	ldr	r1, [pc, #664]	; 15ba4 <__assert_fail@plt+0x4ce8>
   15908:	mov	r2, #5
   1590c:	mov	r0, #0
   15910:	bl	10d00 <dcgettext@plt>
   15914:	ldr	ip, [r5, #32]
   15918:	ldr	r1, [r5, #28]
   1591c:	ldr	r2, [r5, #24]
   15920:	ldr	r3, [r5]
   15924:	ldr	r6, [r5, #20]
   15928:	str	ip, [sp, #28]
   1592c:	ldr	lr, [r5, #16]
   15930:	str	r1, [sp, #24]
   15934:	ldr	ip, [r5, #12]
   15938:	str	r2, [sp, #20]
   1593c:	ldr	r1, [r5, #8]
   15940:	ldr	r2, [r5, #4]
   15944:	str	r6, [sp, #16]
   15948:	stmib	sp, {r1, ip, lr}
   1594c:	mov	r1, #1
   15950:	str	r2, [sp]
   15954:	mov	r2, r0
   15958:	mov	r0, r4
   1595c:	bl	10e44 <__fprintf_chk@plt>
   15960:	add	sp, sp, #32
   15964:	pop	{r4, r5, r6, pc}
   15968:	mov	r2, #5
   1596c:	ldr	r1, [pc, #564]	; 15ba8 <__assert_fail@plt+0x4cec>
   15970:	mov	r0, #0
   15974:	bl	10d00 <dcgettext@plt>
   15978:	ldr	r3, [r5]
   1597c:	mov	r1, #1
   15980:	mov	r2, r0
   15984:	mov	r0, r4
   15988:	add	sp, sp, #32
   1598c:	pop	{r4, r5, r6, lr}
   15990:	b	10e44 <__fprintf_chk@plt>
   15994:	mov	r2, #5
   15998:	ldr	r1, [pc, #524]	; 15bac <__assert_fail@plt+0x4cf0>
   1599c:	mov	r0, #0
   159a0:	bl	10d00 <dcgettext@plt>
   159a4:	ldr	r2, [r5, #4]
   159a8:	ldr	r3, [r5]
   159ac:	mov	r1, #1
   159b0:	str	r2, [sp, #48]	; 0x30
   159b4:	mov	r2, r0
   159b8:	mov	r0, r4
   159bc:	add	sp, sp, #32
   159c0:	pop	{r4, r5, r6, lr}
   159c4:	b	10e44 <__fprintf_chk@plt>
   159c8:	mov	r2, #5
   159cc:	ldr	r1, [pc, #476]	; 15bb0 <__assert_fail@plt+0x4cf4>
   159d0:	mov	r0, #0
   159d4:	bl	10d00 <dcgettext@plt>
   159d8:	ldr	r1, [r5, #8]
   159dc:	ldr	r2, [r5, #4]
   159e0:	ldr	r3, [r5]
   159e4:	str	r1, [sp, #52]	; 0x34
   159e8:	str	r2, [sp, #48]	; 0x30
   159ec:	mov	r1, #1
   159f0:	mov	r2, r0
   159f4:	mov	r0, r4
   159f8:	add	sp, sp, #32
   159fc:	pop	{r4, r5, r6, lr}
   15a00:	b	10e44 <__fprintf_chk@plt>
   15a04:	mov	r2, #5
   15a08:	ldr	r1, [pc, #420]	; 15bb4 <__assert_fail@plt+0x4cf8>
   15a0c:	mov	r0, #0
   15a10:	bl	10d00 <dcgettext@plt>
   15a14:	ldr	r1, [r5, #8]
   15a18:	ldr	ip, [r5, #12]
   15a1c:	ldr	r2, [r5, #4]
   15a20:	ldr	r3, [r5]
   15a24:	stmib	sp, {r1, ip}
   15a28:	str	r2, [sp]
   15a2c:	mov	r1, #1
   15a30:	mov	r2, r0
   15a34:	mov	r0, r4
   15a38:	bl	10e44 <__fprintf_chk@plt>
   15a3c:	b	15960 <__assert_fail@plt+0x4aa4>
   15a40:	mov	r2, #5
   15a44:	ldr	r1, [pc, #364]	; 15bb8 <__assert_fail@plt+0x4cfc>
   15a48:	mov	r0, #0
   15a4c:	bl	10d00 <dcgettext@plt>
   15a50:	add	r1, r5, #8
   15a54:	ldr	r2, [r5, #4]
   15a58:	ldm	r1, {r1, ip, lr}
   15a5c:	ldr	r3, [r5]
   15a60:	str	r2, [sp]
   15a64:	stmib	sp, {r1, ip, lr}
   15a68:	mov	r1, #1
   15a6c:	mov	r2, r0
   15a70:	mov	r0, r4
   15a74:	bl	10e44 <__fprintf_chk@plt>
   15a78:	b	15960 <__assert_fail@plt+0x4aa4>
   15a7c:	mov	r2, #5
   15a80:	ldr	r1, [pc, #308]	; 15bbc <__assert_fail@plt+0x4d00>
   15a84:	mov	r0, #0
   15a88:	bl	10d00 <dcgettext@plt>
   15a8c:	add	r1, r5, #8
   15a90:	ldr	r2, [r5, #4]
   15a94:	ldm	r1, {r1, ip, lr}
   15a98:	ldr	r6, [r5, #20]
   15a9c:	ldr	r3, [r5]
   15aa0:	stmib	sp, {r1, ip, lr}
   15aa4:	mov	r1, #1
   15aa8:	str	r2, [sp]
   15aac:	str	r6, [sp, #16]
   15ab0:	mov	r2, r0
   15ab4:	mov	r0, r4
   15ab8:	bl	10e44 <__fprintf_chk@plt>
   15abc:	b	15960 <__assert_fail@plt+0x4aa4>
   15ac0:	mov	r2, #5
   15ac4:	ldr	r1, [pc, #244]	; 15bc0 <__assert_fail@plt+0x4d04>
   15ac8:	mov	r0, #0
   15acc:	bl	10d00 <dcgettext@plt>
   15ad0:	ldr	r2, [r5, #24]
   15ad4:	ldr	r3, [r5]
   15ad8:	ldr	r6, [r5, #20]
   15adc:	ldr	lr, [r5, #16]
   15ae0:	ldr	ip, [r5, #12]
   15ae4:	str	r2, [sp, #20]
   15ae8:	ldr	r1, [r5, #8]
   15aec:	ldr	r2, [r5, #4]
   15af0:	str	r6, [sp, #16]
   15af4:	stmib	sp, {r1, ip, lr}
   15af8:	mov	r1, #1
   15afc:	str	r2, [sp]
   15b00:	mov	r2, r0
   15b04:	mov	r0, r4
   15b08:	bl	10e44 <__fprintf_chk@plt>
   15b0c:	b	15960 <__assert_fail@plt+0x4aa4>
   15b10:	mov	r2, #5
   15b14:	ldr	r1, [pc, #168]	; 15bc4 <__assert_fail@plt+0x4d08>
   15b18:	mov	r0, #0
   15b1c:	bl	10d00 <dcgettext@plt>
   15b20:	ldr	r1, [r5, #28]
   15b24:	ldr	r2, [r5, #24]
   15b28:	ldr	r3, [r5]
   15b2c:	ldr	r6, [r5, #20]
   15b30:	ldr	lr, [r5, #16]
   15b34:	str	r1, [sp, #24]
   15b38:	ldr	ip, [r5, #12]
   15b3c:	str	r2, [sp, #20]
   15b40:	ldr	r1, [r5, #8]
   15b44:	ldr	r2, [r5, #4]
   15b48:	str	r6, [sp, #16]
   15b4c:	stmib	sp, {r1, ip, lr}
   15b50:	mov	r1, #1
   15b54:	str	r2, [sp]
   15b58:	mov	r2, r0
   15b5c:	mov	r0, r4
   15b60:	bl	10e44 <__fprintf_chk@plt>
   15b64:	b	15960 <__assert_fail@plt+0x4aa4>
   15b68:	str	r3, [sp]
   15b6c:	mov	r1, #1
   15b70:	mov	r3, r2
   15b74:	ldr	r2, [pc, #76]	; 15bc8 <__assert_fail@plt+0x4d0c>
   15b78:	bl	10e44 <__fprintf_chk@plt>
   15b7c:	b	15868 <__assert_fail@plt+0x49ac>
   15b80:	mov	r2, #5
   15b84:	ldr	r1, [pc, #64]	; 15bcc <__assert_fail@plt+0x4d10>
   15b88:	b	1590c <__assert_fail@plt+0x4a50>
   15b8c:	muleq	r1, r0, r8
   15b90:	andeq	r8, r1, r4, lsr #17
   15b94:	andeq	r0, r0, r6, ror #15
   15b98:	andeq	r8, r1, ip, ror fp
   15b9c:	andeq	r8, r1, r8, lsr #17
   15ba0:	andeq	r8, r1, r4, asr r9
   15ba4:	andeq	r8, r1, r4, lsl #21
   15ba8:	andeq	r8, r1, r8, ror r9
   15bac:	andeq	r8, r1, r8, lsl #19
   15bb0:	andeq	r8, r1, r0, lsr #19
   15bb4:			; <UNDEFINED> instruction: 0x000189bc
   15bb8:	ldrdeq	r8, [r1], -ip
   15bbc:	andeq	r8, r1, r0, lsl #20
   15bc0:	andeq	r8, r1, r8, lsr #20
   15bc4:	andeq	r8, r1, r4, asr sl
   15bc8:	muleq	r1, ip, r8
   15bcc:			; <UNDEFINED> instruction: 0x00018ab8
   15bd0:	push	{r4, r5, lr}
   15bd4:	sub	sp, sp, #12
   15bd8:	ldr	r5, [sp, #24]
   15bdc:	ldr	ip, [r5]
   15be0:	cmp	ip, #0
   15be4:	beq	15c00 <__assert_fail@plt+0x4d44>
   15be8:	mov	lr, r5
   15bec:	mov	ip, #0
   15bf0:	ldr	r4, [lr, #4]!
   15bf4:	add	ip, ip, #1
   15bf8:	cmp	r4, #0
   15bfc:	bne	15bf0 <__assert_fail@plt+0x4d34>
   15c00:	stm	sp, {r5, ip}
   15c04:	bl	15838 <__assert_fail@plt+0x497c>
   15c08:	add	sp, sp, #12
   15c0c:	pop	{r4, r5, pc}
   15c10:	push	{r4, r5, lr}
   15c14:	sub	sp, sp, #76	; 0x4c
   15c18:	mov	r5, r0
   15c1c:	ldr	ip, [sp, #88]	; 0x58
   15c20:	ldr	r0, [ip]
   15c24:	cmp	r0, #0
   15c28:	str	r0, [sp, #32]
   15c2c:	beq	16000 <__assert_fail@plt+0x5144>
   15c30:	ldr	r0, [ip, #4]
   15c34:	cmp	r0, #0
   15c38:	str	r0, [sp, #36]	; 0x24
   15c3c:	beq	16008 <__assert_fail@plt+0x514c>
   15c40:	ldr	r0, [ip, #8]
   15c44:	cmp	r0, #0
   15c48:	str	r0, [sp, #40]	; 0x28
   15c4c:	beq	16010 <__assert_fail@plt+0x5154>
   15c50:	ldr	r0, [ip, #12]
   15c54:	cmp	r0, #0
   15c58:	str	r0, [sp, #44]	; 0x2c
   15c5c:	beq	16018 <__assert_fail@plt+0x515c>
   15c60:	ldr	r0, [ip, #16]
   15c64:	cmp	r0, #0
   15c68:	str	r0, [sp, #48]	; 0x30
   15c6c:	beq	16020 <__assert_fail@plt+0x5164>
   15c70:	ldr	r0, [ip, #20]
   15c74:	cmp	r0, #0
   15c78:	str	r0, [sp, #52]	; 0x34
   15c7c:	beq	16028 <__assert_fail@plt+0x516c>
   15c80:	ldr	r0, [ip, #24]
   15c84:	cmp	r0, #0
   15c88:	str	r0, [sp, #56]	; 0x38
   15c8c:	beq	16030 <__assert_fail@plt+0x5174>
   15c90:	ldr	r0, [ip, #28]
   15c94:	cmp	r0, #0
   15c98:	str	r0, [sp, #60]	; 0x3c
   15c9c:	beq	16038 <__assert_fail@plt+0x517c>
   15ca0:	ldr	r0, [ip, #32]
   15ca4:	cmp	r0, #0
   15ca8:	str	r0, [sp, #64]	; 0x40
   15cac:	beq	16040 <__assert_fail@plt+0x5184>
   15cb0:	ldr	r0, [ip, #36]	; 0x24
   15cb4:	cmp	r0, #0
   15cb8:	movne	r4, #10
   15cbc:	moveq	r4, #9
   15cc0:	cmp	r1, #0
   15cc4:	beq	15fd8 <__assert_fail@plt+0x511c>
   15cc8:	stm	sp, {r2, r3}
   15ccc:	mov	r0, r5
   15cd0:	mov	r3, r1
   15cd4:	ldr	r2, [pc, #876]	; 16048 <__assert_fail@plt+0x518c>
   15cd8:	mov	r1, #1
   15cdc:	bl	10e44 <__fprintf_chk@plt>
   15ce0:	mov	r2, #5
   15ce4:	ldr	r1, [pc, #864]	; 1604c <__assert_fail@plt+0x5190>
   15ce8:	mov	r0, #0
   15cec:	bl	10d00 <dcgettext@plt>
   15cf0:	ldr	r3, [pc, #856]	; 16050 <__assert_fail@plt+0x5194>
   15cf4:	ldr	r2, [pc, #856]	; 16054 <__assert_fail@plt+0x5198>
   15cf8:	str	r3, [sp]
   15cfc:	mov	r1, #1
   15d00:	mov	r3, r0
   15d04:	mov	r0, r5
   15d08:	bl	10e44 <__fprintf_chk@plt>
   15d0c:	mov	r1, r5
   15d10:	mov	r0, #10
   15d14:	bl	10cf4 <fputc_unlocked@plt>
   15d18:	mov	r2, #5
   15d1c:	ldr	r1, [pc, #820]	; 16058 <__assert_fail@plt+0x519c>
   15d20:	mov	r0, #0
   15d24:	bl	10d00 <dcgettext@plt>
   15d28:	mov	r1, #1
   15d2c:	ldr	r3, [pc, #808]	; 1605c <__assert_fail@plt+0x51a0>
   15d30:	mov	r2, r0
   15d34:	mov	r0, r5
   15d38:	bl	10e44 <__fprintf_chk@plt>
   15d3c:	mov	r1, r5
   15d40:	mov	r0, #10
   15d44:	bl	10cf4 <fputc_unlocked@plt>
   15d48:	cmp	r4, #9
   15d4c:	ldrls	pc, [pc, r4, lsl #2]
   15d50:	b	15ff4 <__assert_fail@plt+0x5138>
   15d54:	ldrdeq	r5, [r1], -r8
   15d58:	andeq	r5, r1, r0, ror #27
   15d5c:	andeq	r5, r1, ip, lsl #28
   15d60:	andeq	r5, r1, r0, asr #28
   15d64:	andeq	r5, r1, r8, ror lr
   15d68:			; <UNDEFINED> instruction: 0x00015eb4
   15d6c:	strdeq	r5, [r1], -r0
   15d70:	andeq	r5, r1, r4, lsr pc
   15d74:	andeq	r5, r1, r0, lsl #31
   15d78:	andeq	r5, r1, ip, ror sp
   15d7c:	ldr	r1, [pc, #732]	; 16060 <__assert_fail@plt+0x51a4>
   15d80:	mov	r2, #5
   15d84:	mov	r0, #0
   15d88:	bl	10d00 <dcgettext@plt>
   15d8c:	ldr	ip, [sp, #64]	; 0x40
   15d90:	ldr	r1, [sp, #60]	; 0x3c
   15d94:	ldr	r2, [sp, #56]	; 0x38
   15d98:	ldr	lr, [sp, #48]	; 0x30
   15d9c:	str	ip, [sp, #28]
   15da0:	str	r1, [sp, #24]
   15da4:	ldr	ip, [sp, #44]	; 0x2c
   15da8:	ldr	r1, [sp, #40]	; 0x28
   15dac:	ldr	r4, [sp, #52]	; 0x34
   15db0:	str	r2, [sp, #20]
   15db4:	ldr	r2, [sp, #36]	; 0x24
   15db8:	stmib	sp, {r1, ip, lr}
   15dbc:	mov	r1, #1
   15dc0:	str	r2, [sp]
   15dc4:	ldr	r3, [sp, #32]
   15dc8:	str	r4, [sp, #16]
   15dcc:	mov	r2, r0
   15dd0:	mov	r0, r5
   15dd4:	bl	10e44 <__fprintf_chk@plt>
   15dd8:	add	sp, sp, #76	; 0x4c
   15ddc:	pop	{r4, r5, pc}
   15de0:	mov	r2, #5
   15de4:	ldr	r1, [pc, #632]	; 16064 <__assert_fail@plt+0x51a8>
   15de8:	mov	r0, #0
   15dec:	bl	10d00 <dcgettext@plt>
   15df0:	ldr	r3, [sp, #32]
   15df4:	mov	r1, #1
   15df8:	mov	r2, r0
   15dfc:	mov	r0, r5
   15e00:	add	sp, sp, #76	; 0x4c
   15e04:	pop	{r4, r5, lr}
   15e08:	b	10e44 <__fprintf_chk@plt>
   15e0c:	mov	r2, #5
   15e10:	ldr	r1, [pc, #592]	; 16068 <__assert_fail@plt+0x51ac>
   15e14:	mov	r0, #0
   15e18:	bl	10d00 <dcgettext@plt>
   15e1c:	ldr	r2, [sp, #36]	; 0x24
   15e20:	ldr	r3, [sp, #32]
   15e24:	str	r2, [sp, #88]	; 0x58
   15e28:	mov	r1, #1
   15e2c:	mov	r2, r0
   15e30:	mov	r0, r5
   15e34:	add	sp, sp, #76	; 0x4c
   15e38:	pop	{r4, r5, lr}
   15e3c:	b	10e44 <__fprintf_chk@plt>
   15e40:	mov	r2, #5
   15e44:	ldr	r1, [pc, #544]	; 1606c <__assert_fail@plt+0x51b0>
   15e48:	mov	r0, #0
   15e4c:	bl	10d00 <dcgettext@plt>
   15e50:	ldr	r1, [sp, #40]	; 0x28
   15e54:	ldr	r2, [sp, #36]	; 0x24
   15e58:	str	r1, [sp, #4]
   15e5c:	str	r2, [sp]
   15e60:	ldr	r3, [sp, #32]
   15e64:	mov	r1, #1
   15e68:	mov	r2, r0
   15e6c:	mov	r0, r5
   15e70:	bl	10e44 <__fprintf_chk@plt>
   15e74:	b	15dd8 <__assert_fail@plt+0x4f1c>
   15e78:	mov	r2, #5
   15e7c:	ldr	r1, [pc, #492]	; 16070 <__assert_fail@plt+0x51b4>
   15e80:	mov	r0, #0
   15e84:	bl	10d00 <dcgettext@plt>
   15e88:	ldr	r1, [sp, #40]	; 0x28
   15e8c:	ldr	ip, [sp, #44]	; 0x2c
   15e90:	ldr	r2, [sp, #36]	; 0x24
   15e94:	ldr	r3, [sp, #32]
   15e98:	stmib	sp, {r1, ip}
   15e9c:	str	r2, [sp]
   15ea0:	mov	r1, #1
   15ea4:	mov	r2, r0
   15ea8:	mov	r0, r5
   15eac:	bl	10e44 <__fprintf_chk@plt>
   15eb0:	b	15dd8 <__assert_fail@plt+0x4f1c>
   15eb4:	mov	r2, #5
   15eb8:	ldr	r1, [pc, #436]	; 16074 <__assert_fail@plt+0x51b8>
   15ebc:	mov	r0, #0
   15ec0:	bl	10d00 <dcgettext@plt>
   15ec4:	add	r1, sp, #40	; 0x28
   15ec8:	ldr	r2, [sp, #36]	; 0x24
   15ecc:	ldm	r1, {r1, ip, lr}
   15ed0:	ldr	r3, [sp, #32]
   15ed4:	str	r2, [sp]
   15ed8:	stmib	sp, {r1, ip, lr}
   15edc:	mov	r1, #1
   15ee0:	mov	r2, r0
   15ee4:	mov	r0, r5
   15ee8:	bl	10e44 <__fprintf_chk@plt>
   15eec:	b	15dd8 <__assert_fail@plt+0x4f1c>
   15ef0:	mov	r2, #5
   15ef4:	ldr	r1, [pc, #380]	; 16078 <__assert_fail@plt+0x51bc>
   15ef8:	mov	r0, #0
   15efc:	bl	10d00 <dcgettext@plt>
   15f00:	add	r1, sp, #40	; 0x28
   15f04:	ldr	r2, [sp, #36]	; 0x24
   15f08:	ldm	r1, {r1, ip, lr}
   15f0c:	ldr	r4, [sp, #52]	; 0x34
   15f10:	str	r2, [sp]
   15f14:	stmib	sp, {r1, ip, lr}
   15f18:	mov	r1, #1
   15f1c:	ldr	r3, [sp, #32]
   15f20:	str	r4, [sp, #16]
   15f24:	mov	r2, r0
   15f28:	mov	r0, r5
   15f2c:	bl	10e44 <__fprintf_chk@plt>
   15f30:	b	15dd8 <__assert_fail@plt+0x4f1c>
   15f34:	mov	r2, #5
   15f38:	ldr	r1, [pc, #316]	; 1607c <__assert_fail@plt+0x51c0>
   15f3c:	mov	r0, #0
   15f40:	bl	10d00 <dcgettext@plt>
   15f44:	add	r1, sp, #40	; 0x28
   15f48:	ldr	r2, [sp, #56]	; 0x38
   15f4c:	ldm	r1, {r1, ip, lr}
   15f50:	ldr	r4, [sp, #52]	; 0x34
   15f54:	str	r2, [sp, #20]
   15f58:	ldr	r2, [sp, #36]	; 0x24
   15f5c:	stmib	sp, {r1, ip, lr}
   15f60:	mov	r1, #1
   15f64:	str	r2, [sp]
   15f68:	ldr	r3, [sp, #32]
   15f6c:	str	r4, [sp, #16]
   15f70:	mov	r2, r0
   15f74:	mov	r0, r5
   15f78:	bl	10e44 <__fprintf_chk@plt>
   15f7c:	b	15dd8 <__assert_fail@plt+0x4f1c>
   15f80:	mov	r2, #5
   15f84:	ldr	r1, [pc, #244]	; 16080 <__assert_fail@plt+0x51c4>
   15f88:	mov	r0, #0
   15f8c:	bl	10d00 <dcgettext@plt>
   15f90:	ldr	r1, [sp, #60]	; 0x3c
   15f94:	ldr	r2, [sp, #56]	; 0x38
   15f98:	ldr	lr, [sp, #48]	; 0x30
   15f9c:	ldr	ip, [sp, #44]	; 0x2c
   15fa0:	str	r1, [sp, #24]
   15fa4:	ldr	r1, [sp, #40]	; 0x28
   15fa8:	ldr	r4, [sp, #52]	; 0x34
   15fac:	str	r2, [sp, #20]
   15fb0:	ldr	r2, [sp, #36]	; 0x24
   15fb4:	stmib	sp, {r1, ip, lr}
   15fb8:	mov	r1, #1
   15fbc:	str	r2, [sp]
   15fc0:	ldr	r3, [sp, #32]
   15fc4:	str	r4, [sp, #16]
   15fc8:	mov	r2, r0
   15fcc:	mov	r0, r5
   15fd0:	bl	10e44 <__fprintf_chk@plt>
   15fd4:	b	15dd8 <__assert_fail@plt+0x4f1c>
   15fd8:	str	r3, [sp]
   15fdc:	mov	r1, #1
   15fe0:	mov	r3, r2
   15fe4:	mov	r0, r5
   15fe8:	ldr	r2, [pc, #148]	; 16084 <__assert_fail@plt+0x51c8>
   15fec:	bl	10e44 <__fprintf_chk@plt>
   15ff0:	b	15ce0 <__assert_fail@plt+0x4e24>
   15ff4:	mov	r2, #5
   15ff8:	ldr	r1, [pc, #136]	; 16088 <__assert_fail@plt+0x51cc>
   15ffc:	b	15d84 <__assert_fail@plt+0x4ec8>
   16000:	mov	r4, r0
   16004:	b	15cc0 <__assert_fail@plt+0x4e04>
   16008:	mov	r4, #1
   1600c:	b	15cc0 <__assert_fail@plt+0x4e04>
   16010:	mov	r4, #2
   16014:	b	15cc0 <__assert_fail@plt+0x4e04>
   16018:	mov	r4, #3
   1601c:	b	15cc0 <__assert_fail@plt+0x4e04>
   16020:	mov	r4, #4
   16024:	b	15cc0 <__assert_fail@plt+0x4e04>
   16028:	mov	r4, #5
   1602c:	b	15cc0 <__assert_fail@plt+0x4e04>
   16030:	mov	r4, #6
   16034:	b	15cc0 <__assert_fail@plt+0x4e04>
   16038:	mov	r4, #7
   1603c:	b	15cc0 <__assert_fail@plt+0x4e04>
   16040:	mov	r4, #8
   16044:	b	15cc0 <__assert_fail@plt+0x4e04>
   16048:	muleq	r1, r0, r8
   1604c:	andeq	r8, r1, r4, lsr #17
   16050:	andeq	r0, r0, r6, ror #15
   16054:	andeq	r8, r1, ip, ror fp
   16058:	andeq	r8, r1, r8, lsr #17
   1605c:	andeq	r8, r1, r4, asr r9
   16060:	andeq	r8, r1, r4, lsl #21
   16064:	andeq	r8, r1, r8, ror r9
   16068:	andeq	r8, r1, r8, lsl #19
   1606c:	andeq	r8, r1, r0, lsr #19
   16070:			; <UNDEFINED> instruction: 0x000189bc
   16074:	ldrdeq	r8, [r1], -ip
   16078:	andeq	r8, r1, r0, lsl #20
   1607c:	andeq	r8, r1, r8, lsr #20
   16080:	andeq	r8, r1, r4, asr sl
   16084:	muleq	r1, ip, r8
   16088:			; <UNDEFINED> instruction: 0x00018ab8
   1608c:	push	{r3}		; (str r3, [sp, #-4]!)
   16090:	push	{lr}		; (str lr, [sp, #-4]!)
   16094:	sub	sp, sp, #56	; 0x38
   16098:	add	r3, sp, #64	; 0x40
   1609c:	ldr	ip, [sp, #64]	; 0x40
   160a0:	str	r3, [sp, #12]
   160a4:	cmp	ip, #0
   160a8:	str	ip, [sp, #16]
   160ac:	beq	16144 <__assert_fail@plt+0x5288>
   160b0:	ldr	ip, [sp, #68]	; 0x44
   160b4:	cmp	ip, #0
   160b8:	str	ip, [sp, #20]
   160bc:	beq	16164 <__assert_fail@plt+0x52a8>
   160c0:	ldr	ip, [sp, #72]	; 0x48
   160c4:	cmp	ip, #0
   160c8:	str	ip, [sp, #24]
   160cc:	beq	1616c <__assert_fail@plt+0x52b0>
   160d0:	ldr	ip, [sp, #76]	; 0x4c
   160d4:	cmp	ip, #0
   160d8:	str	ip, [sp, #28]
   160dc:	beq	16174 <__assert_fail@plt+0x52b8>
   160e0:	ldr	ip, [sp, #80]	; 0x50
   160e4:	cmp	ip, #0
   160e8:	str	ip, [sp, #32]
   160ec:	beq	1617c <__assert_fail@plt+0x52c0>
   160f0:	ldr	ip, [sp, #84]	; 0x54
   160f4:	cmp	ip, #0
   160f8:	str	ip, [sp, #36]	; 0x24
   160fc:	beq	16184 <__assert_fail@plt+0x52c8>
   16100:	ldr	ip, [sp, #88]	; 0x58
   16104:	cmp	ip, #0
   16108:	str	ip, [sp, #40]	; 0x28
   1610c:	beq	1618c <__assert_fail@plt+0x52d0>
   16110:	ldr	ip, [sp, #92]	; 0x5c
   16114:	cmp	ip, #0
   16118:	str	ip, [sp, #44]	; 0x2c
   1611c:	beq	16194 <__assert_fail@plt+0x52d8>
   16120:	ldr	ip, [sp, #96]	; 0x60
   16124:	cmp	ip, #0
   16128:	str	ip, [sp, #48]	; 0x30
   1612c:	beq	1619c <__assert_fail@plt+0x52e0>
   16130:	ldr	ip, [sp, #100]	; 0x64
   16134:	cmp	ip, #0
   16138:	str	ip, [sp, #52]	; 0x34
   1613c:	movne	ip, #10
   16140:	moveq	ip, #9
   16144:	add	r3, sp, #16
   16148:	stm	sp, {r3, ip}
   1614c:	ldr	r3, [sp, #60]	; 0x3c
   16150:	bl	15838 <__assert_fail@plt+0x497c>
   16154:	add	sp, sp, #56	; 0x38
   16158:	pop	{lr}		; (ldr lr, [sp], #4)
   1615c:	add	sp, sp, #4
   16160:	bx	lr
   16164:	mov	ip, #1
   16168:	b	16144 <__assert_fail@plt+0x5288>
   1616c:	mov	ip, #2
   16170:	b	16144 <__assert_fail@plt+0x5288>
   16174:	mov	ip, #3
   16178:	b	16144 <__assert_fail@plt+0x5288>
   1617c:	mov	ip, #4
   16180:	b	16144 <__assert_fail@plt+0x5288>
   16184:	mov	ip, #5
   16188:	b	16144 <__assert_fail@plt+0x5288>
   1618c:	mov	ip, #6
   16190:	b	16144 <__assert_fail@plt+0x5288>
   16194:	mov	ip, #7
   16198:	b	16144 <__assert_fail@plt+0x5288>
   1619c:	mov	ip, #8
   161a0:	b	16144 <__assert_fail@plt+0x5288>
   161a4:	ldr	r3, [pc, #116]	; 16220 <__assert_fail@plt+0x5364>
   161a8:	push	{r4, lr}
   161ac:	mov	r0, #10
   161b0:	ldr	r1, [r3]
   161b4:	bl	10cf4 <fputc_unlocked@plt>
   161b8:	mov	r2, #5
   161bc:	ldr	r1, [pc, #96]	; 16224 <__assert_fail@plt+0x5368>
   161c0:	mov	r0, #0
   161c4:	bl	10d00 <dcgettext@plt>
   161c8:	ldr	r2, [pc, #88]	; 16228 <__assert_fail@plt+0x536c>
   161cc:	mov	r1, r0
   161d0:	mov	r0, #1
   161d4:	bl	10e2c <__printf_chk@plt>
   161d8:	mov	r2, #5
   161dc:	ldr	r1, [pc, #72]	; 1622c <__assert_fail@plt+0x5370>
   161e0:	mov	r0, #0
   161e4:	bl	10d00 <dcgettext@plt>
   161e8:	ldr	r3, [pc, #64]	; 16230 <__assert_fail@plt+0x5374>
   161ec:	ldr	r2, [pc, #64]	; 16234 <__assert_fail@plt+0x5378>
   161f0:	mov	r1, r0
   161f4:	mov	r0, #1
   161f8:	bl	10e2c <__printf_chk@plt>
   161fc:	mov	r2, #5
   16200:	ldr	r1, [pc, #48]	; 16238 <__assert_fail@plt+0x537c>
   16204:	mov	r0, #0
   16208:	bl	10d00 <dcgettext@plt>
   1620c:	ldr	r2, [pc, #40]	; 1623c <__assert_fail@plt+0x5380>
   16210:	pop	{r4, lr}
   16214:	mov	r1, r0
   16218:	mov	r0, #1
   1621c:	b	10e2c <__printf_chk@plt>
   16220:	andeq	r9, r2, r4, asr #2
   16224:	strdeq	r8, [r1], -r4
   16228:	andeq	r8, r1, r8, lsl #22
   1622c:	andeq	r8, r1, r0, lsr #22
   16230:	andeq	r8, r1, ip, ror r5
   16234:	andeq	r8, r1, r4, lsr #11
   16238:	andeq	r8, r1, r4, lsr fp
   1623c:	andeq	r8, r1, ip, asr fp
   16240:	push	{r4, r5, r6, lr}
   16244:	mov	r6, r0
   16248:	mov	r5, r1
   1624c:	mov	r4, r2
   16250:	bl	17d10 <__assert_fail@plt+0x6e54>
   16254:	cmp	r0, #0
   16258:	popne	{r4, r5, r6, pc}
   1625c:	cmp	r6, #0
   16260:	beq	16270 <__assert_fail@plt+0x53b4>
   16264:	cmp	r5, #0
   16268:	cmpne	r4, #0
   1626c:	popeq	{r4, r5, r6, pc}
   16270:	bl	168bc <__assert_fail@plt+0x5a00>
   16274:	push	{r4, lr}
   16278:	bl	1798c <__assert_fail@plt+0x6ad0>
   1627c:	cmp	r0, #0
   16280:	popne	{r4, pc}
   16284:	bl	168bc <__assert_fail@plt+0x5a00>
   16288:	push	{r4, lr}
   1628c:	bl	1798c <__assert_fail@plt+0x6ad0>
   16290:	cmp	r0, #0
   16294:	popne	{r4, pc}
   16298:	bl	168bc <__assert_fail@plt+0x5a00>
   1629c:	push	{r4, lr}
   162a0:	bl	1798c <__assert_fail@plt+0x6ad0>
   162a4:	cmp	r0, #0
   162a8:	popne	{r4, pc}
   162ac:	bl	168bc <__assert_fail@plt+0x5a00>
   162b0:	push	{r4, r5, r6, lr}
   162b4:	mov	r5, r0
   162b8:	mov	r4, r1
   162bc:	bl	179b8 <__assert_fail@plt+0x6afc>
   162c0:	cmp	r0, #0
   162c4:	popne	{r4, r5, r6, pc}
   162c8:	adds	r4, r4, #0
   162cc:	movne	r4, #1
   162d0:	cmp	r5, #0
   162d4:	orreq	r4, r4, #1
   162d8:	cmp	r4, #0
   162dc:	popeq	{r4, r5, r6, pc}
   162e0:	bl	168bc <__assert_fail@plt+0x5a00>
   162e4:	push	{r4, lr}
   162e8:	cmp	r1, #0
   162ec:	orreq	r1, r1, #1
   162f0:	bl	179b8 <__assert_fail@plt+0x6afc>
   162f4:	cmp	r0, #0
   162f8:	popne	{r4, pc}
   162fc:	bl	168bc <__assert_fail@plt+0x5a00>
   16300:	push	{r4, r5, r6, lr}
   16304:	mov	r6, r0
   16308:	mov	r5, r1
   1630c:	mov	r4, r2
   16310:	bl	17d10 <__assert_fail@plt+0x6e54>
   16314:	cmp	r0, #0
   16318:	popne	{r4, r5, r6, pc}
   1631c:	cmp	r6, #0
   16320:	beq	16330 <__assert_fail@plt+0x5474>
   16324:	cmp	r5, #0
   16328:	cmpne	r4, #0
   1632c:	popeq	{r4, r5, r6, pc}
   16330:	bl	168bc <__assert_fail@plt+0x5a00>
   16334:	cmp	r2, #0
   16338:	cmpne	r1, #0
   1633c:	moveq	r2, #1
   16340:	moveq	r1, r2
   16344:	push	{r4, lr}
   16348:	bl	17d10 <__assert_fail@plt+0x6e54>
   1634c:	cmp	r0, #0
   16350:	popne	{r4, pc}
   16354:	bl	168bc <__assert_fail@plt+0x5a00>
   16358:	push	{r4, lr}
   1635c:	mov	r2, r1
   16360:	mov	r1, r0
   16364:	mov	r0, #0
   16368:	bl	17d10 <__assert_fail@plt+0x6e54>
   1636c:	cmp	r0, #0
   16370:	popne	{r4, pc}
   16374:	bl	168bc <__assert_fail@plt+0x5a00>
   16378:	cmp	r1, #0
   1637c:	cmpne	r0, #0
   16380:	moveq	r2, #1
   16384:	movne	r2, r1
   16388:	moveq	r1, r2
   1638c:	movne	r1, r0
   16390:	push	{r4, lr}
   16394:	mov	r0, #0
   16398:	bl	17d10 <__assert_fail@plt+0x6e54>
   1639c:	cmp	r0, #0
   163a0:	popne	{r4, pc}
   163a4:	bl	168bc <__assert_fail@plt+0x5a00>
   163a8:	cmp	r0, #0
   163ac:	push	{r4, r5, r6, lr}
   163b0:	mov	r5, r1
   163b4:	ldr	r4, [r1]
   163b8:	beq	163f4 <__assert_fail@plt+0x5538>
   163bc:	lsr	r2, r4, #1
   163c0:	add	r3, r2, #1
   163c4:	mvn	r3, r3
   163c8:	cmp	r4, r3
   163cc:	bhi	16410 <__assert_fail@plt+0x5554>
   163d0:	add	r4, r4, #1
   163d4:	add	r4, r4, r2
   163d8:	mov	r1, r4
   163dc:	mov	r2, #1
   163e0:	bl	17d10 <__assert_fail@plt+0x6e54>
   163e4:	cmp	r0, #0
   163e8:	beq	16414 <__assert_fail@plt+0x5558>
   163ec:	str	r4, [r5]
   163f0:	pop	{r4, r5, r6, pc}
   163f4:	cmp	r4, #0
   163f8:	moveq	r4, #64	; 0x40
   163fc:	mov	r1, r4
   16400:	mov	r2, #1
   16404:	bl	17d10 <__assert_fail@plt+0x6e54>
   16408:	cmp	r0, #0
   1640c:	bne	163ec <__assert_fail@plt+0x5530>
   16410:	bl	168bc <__assert_fail@plt+0x5a00>
   16414:	cmp	r4, #0
   16418:	bne	16410 <__assert_fail@plt+0x5554>
   1641c:	str	r4, [r5]
   16420:	pop	{r4, r5, r6, pc}
   16424:	cmp	r0, #0
   16428:	push	{r4, r5, r6, lr}
   1642c:	mov	r5, r1
   16430:	ldr	r4, [r1]
   16434:	mov	r6, r2
   16438:	beq	1647c <__assert_fail@plt+0x55c0>
   1643c:	lsr	r1, r4, #1
   16440:	add	r3, r1, #1
   16444:	mvn	r3, r3
   16448:	cmp	r4, r3
   1644c:	bhi	164b4 <__assert_fail@plt+0x55f8>
   16450:	add	r4, r4, #1
   16454:	add	r4, r4, r1
   16458:	mov	r1, r4
   1645c:	bl	17d10 <__assert_fail@plt+0x6e54>
   16460:	cmp	r0, #0
   16464:	bne	16474 <__assert_fail@plt+0x55b8>
   16468:	cmp	r4, #0
   1646c:	cmpne	r6, #0
   16470:	bne	164b4 <__assert_fail@plt+0x55f8>
   16474:	str	r4, [r5]
   16478:	pop	{r4, r5, r6, pc}
   1647c:	cmp	r4, #0
   16480:	bne	1649c <__assert_fail@plt+0x55e0>
   16484:	mov	r1, r2
   16488:	mov	r0, #64	; 0x40
   1648c:	bl	17e50 <__assert_fail@plt+0x6f94>
   16490:	cmp	r0, #0
   16494:	movne	r4, r0
   16498:	addeq	r4, r0, #1
   1649c:	mov	r2, r6
   164a0:	mov	r1, r4
   164a4:	mov	r0, #0
   164a8:	bl	17d10 <__assert_fail@plt+0x6e54>
   164ac:	cmp	r0, #0
   164b0:	bne	16474 <__assert_fail@plt+0x55b8>
   164b4:	bl	168bc <__assert_fail@plt+0x5a00>
   164b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164bc:	sub	sp, sp, #12
   164c0:	ldr	r6, [r1]
   164c4:	mov	r8, r1
   164c8:	mov	r9, r0
   164cc:	asrs	r4, r6, #1
   164d0:	mov	sl, r2
   164d4:	mov	fp, r3
   164d8:	ldr	r7, [sp, #48]	; 0x30
   164dc:	bmi	16658 <__assert_fail@plt+0x579c>
   164e0:	mvn	r1, #-2147483648	; 0x80000000
   164e4:	sub	r1, r1, r4
   164e8:	cmp	r6, r1
   164ec:	movle	r1, #0
   164f0:	movgt	r1, #1
   164f4:	mvn	r3, fp
   164f8:	cmp	r1, #0
   164fc:	addeq	r4, r4, r6
   16500:	mvnne	r4, #-2147483648	; 0x80000000
   16504:	lsr	r3, r3, #31
   16508:	cmp	fp, r4
   1650c:	movge	r2, #0
   16510:	andlt	r2, r3, #1
   16514:	cmp	r2, #0
   16518:	beq	16608 <__assert_fail@plt+0x574c>
   1651c:	cmp	r7, #0
   16520:	blt	166f0 <__assert_fail@plt+0x5834>
   16524:	bne	166e8 <__assert_fail@plt+0x582c>
   16528:	mov	r5, #64	; 0x40
   1652c:	mov	r1, r7
   16530:	mov	r0, r5
   16534:	str	r3, [sp, #4]
   16538:	bl	1805c <__assert_fail@plt+0x71a0>
   1653c:	mov	r1, r7
   16540:	mov	r4, r0
   16544:	mov	r0, r5
   16548:	bl	1827c <__assert_fail@plt+0x73c0>
   1654c:	ldr	r3, [sp, #4]
   16550:	sub	r5, r5, r1
   16554:	cmp	r9, #0
   16558:	sub	r2, r4, r6
   1655c:	streq	r9, [r8]
   16560:	cmp	r2, sl
   16564:	bge	165e8 <__assert_fail@plt+0x572c>
   16568:	cmp	sl, #0
   1656c:	blt	16688 <__assert_fail@plt+0x57cc>
   16570:	cmp	r6, #0
   16574:	blt	16594 <__assert_fail@plt+0x56d8>
   16578:	mvn	r2, #-2147483648	; 0x80000000
   1657c:	sub	r2, r2, sl
   16580:	cmp	r6, r2
   16584:	movle	r2, #0
   16588:	movgt	r2, #1
   1658c:	cmp	r2, #0
   16590:	bne	16684 <__assert_fail@plt+0x57c8>
   16594:	add	r6, r6, sl
   16598:	cmp	fp, r6
   1659c:	movge	r3, #0
   165a0:	andlt	r3, r3, #1
   165a4:	cmp	r3, #0
   165a8:	mov	r4, r6
   165ac:	bne	16684 <__assert_fail@plt+0x57c8>
   165b0:	cmp	r7, #0
   165b4:	blt	1669c <__assert_fail@plt+0x57e0>
   165b8:	beq	165e4 <__assert_fail@plt+0x5728>
   165bc:	cmp	r6, #0
   165c0:	blt	16740 <__assert_fail@plt+0x5884>
   165c4:	mov	r1, r7
   165c8:	mvn	r0, #-2147483648	; 0x80000000
   165cc:	bl	1805c <__assert_fail@plt+0x71a0>
   165d0:	cmp	r6, r0
   165d4:	movle	r0, #0
   165d8:	movgt	r0, #1
   165dc:	cmp	r0, #0
   165e0:	bne	16684 <__assert_fail@plt+0x57c8>
   165e4:	mul	r5, r6, r7
   165e8:	mov	r1, r5
   165ec:	mov	r0, r9
   165f0:	bl	179b8 <__assert_fail@plt+0x6afc>
   165f4:	cmp	r0, #0
   165f8:	beq	1666c <__assert_fail@plt+0x57b0>
   165fc:	str	r4, [r8]
   16600:	add	sp, sp, #12
   16604:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16608:	cmp	r7, #0
   1660c:	blt	166c8 <__assert_fail@plt+0x580c>
   16610:	beq	16528 <__assert_fail@plt+0x566c>
   16614:	cmp	r4, #0
   16618:	blt	166f8 <__assert_fail@plt+0x583c>
   1661c:	mov	r1, r7
   16620:	mvn	r0, #-2147483648	; 0x80000000
   16624:	str	r3, [sp, #4]
   16628:	bl	1805c <__assert_fail@plt+0x71a0>
   1662c:	ldr	r3, [sp, #4]
   16630:	cmp	r0, r4
   16634:	movge	r0, #0
   16638:	movlt	r0, #1
   1663c:	cmp	r0, #0
   16640:	mvnne	r5, #-2147483648	; 0x80000000
   16644:	bne	1652c <__assert_fail@plt+0x5670>
   16648:	mul	r5, r7, r4
   1664c:	cmp	r5, #63	; 0x3f
   16650:	bgt	16554 <__assert_fail@plt+0x5698>
   16654:	b	16528 <__assert_fail@plt+0x566c>
   16658:	rsb	r1, r4, #-2147483648	; 0x80000000
   1665c:	cmp	r6, r1
   16660:	movge	r1, #0
   16664:	movlt	r1, #1
   16668:	b	164f4 <__assert_fail@plt+0x5638>
   1666c:	adds	r5, r5, #0
   16670:	movne	r5, #1
   16674:	cmp	r9, #0
   16678:	orreq	r5, r5, #1
   1667c:	cmp	r5, #0
   16680:	beq	165fc <__assert_fail@plt+0x5740>
   16684:	bl	168bc <__assert_fail@plt+0x5a00>
   16688:	rsb	r2, sl, #-2147483648	; 0x80000000
   1668c:	cmp	r6, r2
   16690:	movge	r2, #0
   16694:	movlt	r2, #1
   16698:	b	1658c <__assert_fail@plt+0x56d0>
   1669c:	cmp	r6, #0
   166a0:	blt	16724 <__assert_fail@plt+0x5868>
   166a4:	cmn	r7, #1
   166a8:	beq	165e4 <__assert_fail@plt+0x5728>
   166ac:	mov	r1, r7
   166b0:	mov	r0, #-2147483648	; 0x80000000
   166b4:	bl	1805c <__assert_fail@plt+0x71a0>
   166b8:	cmp	r6, r0
   166bc:	movle	r0, #0
   166c0:	movgt	r0, #1
   166c4:	b	165dc <__assert_fail@plt+0x5720>
   166c8:	cmp	r4, #0
   166cc:	blt	16764 <__assert_fail@plt+0x58a8>
   166d0:	cmn	r7, #1
   166d4:	beq	16648 <__assert_fail@plt+0x578c>
   166d8:	str	r3, [sp, #4]
   166dc:	mov	r1, r7
   166e0:	mov	r0, #-2147483648	; 0x80000000
   166e4:	b	16628 <__assert_fail@plt+0x576c>
   166e8:	mov	r4, fp
   166ec:	b	1661c <__assert_fail@plt+0x5760>
   166f0:	mov	r4, fp
   166f4:	b	166d0 <__assert_fail@plt+0x5814>
   166f8:	cmn	r4, #1
   166fc:	beq	16648 <__assert_fail@plt+0x578c>
   16700:	mov	r1, r4
   16704:	mov	r0, #-2147483648	; 0x80000000
   16708:	str	r3, [sp, #4]
   1670c:	bl	1805c <__assert_fail@plt+0x71a0>
   16710:	ldr	r3, [sp, #4]
   16714:	cmp	r7, r0
   16718:	movle	r0, #0
   1671c:	movgt	r0, #1
   16720:	b	1663c <__assert_fail@plt+0x5780>
   16724:	mov	r1, r7
   16728:	mvn	r0, #-2147483648	; 0x80000000
   1672c:	bl	1805c <__assert_fail@plt+0x71a0>
   16730:	cmp	r6, r0
   16734:	movge	r0, #0
   16738:	movlt	r0, #1
   1673c:	b	165dc <__assert_fail@plt+0x5720>
   16740:	cmn	r6, #1
   16744:	beq	165e4 <__assert_fail@plt+0x5728>
   16748:	mov	r1, r6
   1674c:	mov	r0, #-2147483648	; 0x80000000
   16750:	bl	1805c <__assert_fail@plt+0x71a0>
   16754:	cmp	r7, r0
   16758:	movle	r0, #0
   1675c:	movgt	r0, #1
   16760:	b	165dc <__assert_fail@plt+0x5720>
   16764:	mov	r1, r7
   16768:	mvn	r0, #-2147483648	; 0x80000000
   1676c:	str	r3, [sp, #4]
   16770:	bl	1805c <__assert_fail@plt+0x71a0>
   16774:	ldr	r3, [sp, #4]
   16778:	cmp	r0, r4
   1677c:	movle	r0, #0
   16780:	movgt	r0, #1
   16784:	b	1663c <__assert_fail@plt+0x5780>
   16788:	push	{r4, lr}
   1678c:	mov	r1, #1
   16790:	bl	17944 <__assert_fail@plt+0x6a88>
   16794:	cmp	r0, #0
   16798:	popne	{r4, pc}
   1679c:	bl	168bc <__assert_fail@plt+0x5a00>
   167a0:	push	{r4, lr}
   167a4:	mov	r1, #1
   167a8:	bl	17944 <__assert_fail@plt+0x6a88>
   167ac:	cmp	r0, #0
   167b0:	popne	{r4, pc}
   167b4:	bl	168bc <__assert_fail@plt+0x5a00>
   167b8:	push	{r4, lr}
   167bc:	bl	17944 <__assert_fail@plt+0x6a88>
   167c0:	cmp	r0, #0
   167c4:	popne	{r4, pc}
   167c8:	bl	168bc <__assert_fail@plt+0x5a00>
   167cc:	push	{r4, lr}
   167d0:	bl	17944 <__assert_fail@plt+0x6a88>
   167d4:	cmp	r0, #0
   167d8:	popne	{r4, pc}
   167dc:	bl	168bc <__assert_fail@plt+0x5a00>
   167e0:	push	{r4, r5, r6, lr}
   167e4:	mov	r6, r0
   167e8:	mov	r0, r1
   167ec:	mov	r4, r1
   167f0:	bl	1798c <__assert_fail@plt+0x6ad0>
   167f4:	subs	r5, r0, #0
   167f8:	beq	16810 <__assert_fail@plt+0x5954>
   167fc:	mov	r2, r4
   16800:	mov	r1, r6
   16804:	bl	10cb8 <memcpy@plt>
   16808:	mov	r0, r5
   1680c:	pop	{r4, r5, r6, pc}
   16810:	bl	168bc <__assert_fail@plt+0x5a00>
   16814:	push	{r4, r5, r6, lr}
   16818:	mov	r6, r0
   1681c:	mov	r0, r1
   16820:	mov	r4, r1
   16824:	bl	1798c <__assert_fail@plt+0x6ad0>
   16828:	subs	r5, r0, #0
   1682c:	beq	16844 <__assert_fail@plt+0x5988>
   16830:	mov	r2, r4
   16834:	mov	r1, r6
   16838:	bl	10cb8 <memcpy@plt>
   1683c:	mov	r0, r5
   16840:	pop	{r4, r5, r6, pc}
   16844:	bl	168bc <__assert_fail@plt+0x5a00>
   16848:	push	{r4, r5, r6, lr}
   1684c:	mov	r6, r0
   16850:	add	r0, r1, #1
   16854:	mov	r4, r1
   16858:	bl	1798c <__assert_fail@plt+0x6ad0>
   1685c:	subs	r5, r0, #0
   16860:	beq	16880 <__assert_fail@plt+0x59c4>
   16864:	mov	r3, #0
   16868:	mov	r1, r6
   1686c:	strb	r3, [r5, r4]
   16870:	mov	r2, r4
   16874:	bl	10cb8 <memcpy@plt>
   16878:	mov	r0, r5
   1687c:	pop	{r4, r5, r6, pc}
   16880:	bl	168bc <__assert_fail@plt+0x5a00>
   16884:	push	{r4, r5, r6, lr}
   16888:	mov	r6, r0
   1688c:	bl	10df0 <strlen@plt>
   16890:	add	r4, r0, #1
   16894:	mov	r0, r4
   16898:	bl	1798c <__assert_fail@plt+0x6ad0>
   1689c:	subs	r5, r0, #0
   168a0:	beq	168b8 <__assert_fail@plt+0x59fc>
   168a4:	mov	r2, r4
   168a8:	mov	r1, r6
   168ac:	bl	10cb8 <memcpy@plt>
   168b0:	mov	r0, r5
   168b4:	pop	{r4, r5, r6, pc}
   168b8:	bl	168bc <__assert_fail@plt+0x5a00>
   168bc:	ldr	r3, [pc, #44]	; 168f0 <__assert_fail@plt+0x5a34>
   168c0:	push	{r4, lr}
   168c4:	mov	r2, #5
   168c8:	ldr	r1, [pc, #36]	; 168f4 <__assert_fail@plt+0x5a38>
   168cc:	mov	r0, #0
   168d0:	ldr	r4, [r3]
   168d4:	bl	10d00 <dcgettext@plt>
   168d8:	ldr	r2, [pc, #24]	; 168f8 <__assert_fail@plt+0x5a3c>
   168dc:	mov	r1, #0
   168e0:	mov	r3, r0
   168e4:	mov	r0, r4
   168e8:	bl	10d78 <error@plt>
   168ec:	bl	10eb0 <abort@plt>
   168f0:	andeq	r9, r2, r8, ror #1
   168f4:	andeq	r8, r1, ip, lsr #23
   168f8:	andeq	r8, r1, r0, asr r7
   168fc:	push	{r4, r5, r6, r7, lr}
   16900:	sub	sp, sp, #20
   16904:	mov	r6, r2
   16908:	ldr	ip, [sp, #48]	; 0x30
   1690c:	mov	r2, r1
   16910:	mov	r7, r3
   16914:	str	ip, [sp]
   16918:	add	r3, sp, #8
   1691c:	mov	r1, #0
   16920:	mov	r5, r0
   16924:	ldr	r4, [sp, #56]	; 0x38
   16928:	bl	16b78 <__assert_fail@plt+0x5cbc>
   1692c:	cmp	r0, #0
   16930:	bne	169b4 <__assert_fail@plt+0x5af8>
   16934:	ldrd	r0, [sp, #8]
   16938:	cmp	r1, r7
   1693c:	cmpeq	r0, r6
   16940:	ldrd	r6, [sp, #40]	; 0x28
   16944:	movcc	r3, #1
   16948:	movcs	r3, #0
   1694c:	cmp	r1, r7
   16950:	cmpeq	r0, r6
   16954:	orrhi	r3, r3, #1
   16958:	cmp	r3, #0
   1695c:	beq	169ac <__assert_fail@plt+0x5af0>
   16960:	mov	r3, #0
   16964:	mvn	r2, #-1073741824	; 0xc0000000
   16968:	cmp	r1, r3
   1696c:	cmpeq	r0, r2
   16970:	bhi	169e0 <__assert_fail@plt+0x5b24>
   16974:	bl	10e08 <__errno_location@plt>
   16978:	mov	r3, #34	; 0x22
   1697c:	mov	r6, r3
   16980:	str	r3, [r0]
   16984:	cmp	r4, #0
   16988:	moveq	r4, #1
   1698c:	mov	r0, r5
   16990:	bl	156b8 <__assert_fail@plt+0x47fc>
   16994:	mov	r1, r6
   16998:	ldr	r3, [sp, #52]	; 0x34
   1699c:	ldr	r2, [pc, #144]	; 16a34 <__assert_fail@plt+0x5b78>
   169a0:	str	r0, [sp]
   169a4:	mov	r0, r4
   169a8:	bl	10d78 <error@plt>
   169ac:	add	sp, sp, #20
   169b0:	pop	{r4, r5, r6, r7, pc}
   169b4:	cmp	r0, #1
   169b8:	beq	169f4 <__assert_fail@plt+0x5b38>
   169bc:	cmp	r0, #3
   169c0:	beq	16a24 <__assert_fail@plt+0x5b68>
   169c4:	cmp	r4, #0
   169c8:	beq	16a14 <__assert_fail@plt+0x5b58>
   169cc:	bl	10e08 <__errno_location@plt>
   169d0:	ldr	r6, [r0]
   169d4:	cmp	r6, #22
   169d8:	moveq	r6, #0
   169dc:	b	1698c <__assert_fail@plt+0x5ad0>
   169e0:	bl	10e08 <__errno_location@plt>
   169e4:	mov	r3, #75	; 0x4b
   169e8:	mov	r6, r3
   169ec:	str	r3, [r0]
   169f0:	b	16984 <__assert_fail@plt+0x5ac8>
   169f4:	bl	10e08 <__errno_location@plt>
   169f8:	mov	r3, #75	; 0x4b
   169fc:	mov	r6, r3
   16a00:	str	r3, [r0]
   16a04:	cmp	r4, #0
   16a08:	moveq	r4, #1
   16a0c:	bne	169d4 <__assert_fail@plt+0x5b18>
   16a10:	b	1698c <__assert_fail@plt+0x5ad0>
   16a14:	bl	10e08 <__errno_location@plt>
   16a18:	mov	r4, #1
   16a1c:	ldr	r6, [r0]
   16a20:	b	169d4 <__assert_fail@plt+0x5b18>
   16a24:	bl	10e08 <__errno_location@plt>
   16a28:	mov	r6, #0
   16a2c:	str	r6, [r0]
   16a30:	b	16a04 <__assert_fail@plt+0x5b48>
   16a34:	andeq	r8, r1, ip, asr #14
   16a38:	push	{r4, r5, r6, r7, lr}
   16a3c:	sub	sp, sp, #20
   16a40:	mov	r6, r2
   16a44:	ldr	r1, [sp, #48]	; 0x30
   16a48:	mov	r7, r3
   16a4c:	str	r1, [sp]
   16a50:	add	r3, sp, #8
   16a54:	mov	r2, #10
   16a58:	mov	r1, #0
   16a5c:	mov	r5, r0
   16a60:	ldr	r4, [sp, #56]	; 0x38
   16a64:	bl	16b78 <__assert_fail@plt+0x5cbc>
   16a68:	cmp	r0, #0
   16a6c:	bne	16af0 <__assert_fail@plt+0x5c34>
   16a70:	ldrd	r0, [sp, #8]
   16a74:	cmp	r7, r1
   16a78:	cmpeq	r6, r0
   16a7c:	ldrd	r6, [sp, #40]	; 0x28
   16a80:	movhi	r3, #1
   16a84:	movls	r3, #0
   16a88:	cmp	r7, r1
   16a8c:	cmpeq	r6, r0
   16a90:	orrcc	r3, r3, #1
   16a94:	cmp	r3, #0
   16a98:	beq	16ae8 <__assert_fail@plt+0x5c2c>
   16a9c:	mov	r3, #0
   16aa0:	mvn	r2, #-1073741824	; 0xc0000000
   16aa4:	cmp	r1, r3
   16aa8:	cmpeq	r0, r2
   16aac:	bhi	16b1c <__assert_fail@plt+0x5c60>
   16ab0:	bl	10e08 <__errno_location@plt>
   16ab4:	mov	r3, #34	; 0x22
   16ab8:	mov	r6, r3
   16abc:	str	r3, [r0]
   16ac0:	cmp	r4, #0
   16ac4:	moveq	r4, #1
   16ac8:	mov	r0, r5
   16acc:	bl	156b8 <__assert_fail@plt+0x47fc>
   16ad0:	mov	r1, r6
   16ad4:	ldr	r3, [sp, #52]	; 0x34
   16ad8:	ldr	r2, [pc, #144]	; 16b70 <__assert_fail@plt+0x5cb4>
   16adc:	str	r0, [sp]
   16ae0:	mov	r0, r4
   16ae4:	bl	10d78 <error@plt>
   16ae8:	add	sp, sp, #20
   16aec:	pop	{r4, r5, r6, r7, pc}
   16af0:	cmp	r0, #1
   16af4:	beq	16b30 <__assert_fail@plt+0x5c74>
   16af8:	cmp	r0, #3
   16afc:	beq	16b60 <__assert_fail@plt+0x5ca4>
   16b00:	cmp	r4, #0
   16b04:	beq	16b50 <__assert_fail@plt+0x5c94>
   16b08:	bl	10e08 <__errno_location@plt>
   16b0c:	ldr	r6, [r0]
   16b10:	cmp	r6, #22
   16b14:	moveq	r6, #0
   16b18:	b	16ac8 <__assert_fail@plt+0x5c0c>
   16b1c:	bl	10e08 <__errno_location@plt>
   16b20:	mov	r3, #75	; 0x4b
   16b24:	mov	r6, r3
   16b28:	str	r3, [r0]
   16b2c:	b	16ac0 <__assert_fail@plt+0x5c04>
   16b30:	bl	10e08 <__errno_location@plt>
   16b34:	mov	r3, #75	; 0x4b
   16b38:	mov	r6, r3
   16b3c:	str	r3, [r0]
   16b40:	cmp	r4, #0
   16b44:	moveq	r4, #1
   16b48:	bne	16b10 <__assert_fail@plt+0x5c54>
   16b4c:	b	16ac8 <__assert_fail@plt+0x5c0c>
   16b50:	bl	10e08 <__errno_location@plt>
   16b54:	mov	r4, #1
   16b58:	ldr	r6, [r0]
   16b5c:	b	16b10 <__assert_fail@plt+0x5c54>
   16b60:	bl	10e08 <__errno_location@plt>
   16b64:	mov	r6, #0
   16b68:	str	r6, [r0]
   16b6c:	b	16b40 <__assert_fail@plt+0x5c84>
   16b70:	andeq	r8, r1, ip, asr #14
   16b74:	andeq	r0, r0, r0
   16b78:	cmp	r2, #36	; 0x24
   16b7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b80:	sub	sp, sp, #52	; 0x34
   16b84:	bhi	17914 <__assert_fail@plt+0x6a58>
   16b88:	cmp	r1, #0
   16b8c:	mov	r6, r2
   16b90:	mov	sl, r0
   16b94:	mov	r5, r1
   16b98:	mov	r8, r3
   16b9c:	addeq	r5, sp, #44	; 0x2c
   16ba0:	bl	10e08 <__errno_location@plt>
   16ba4:	mov	r3, #0
   16ba8:	str	r3, [r0]
   16bac:	mov	fp, r0
   16bb0:	bl	10dcc <__ctype_b_loc@plt>
   16bb4:	ldrb	r3, [sl]
   16bb8:	mov	r2, sl
   16bbc:	ldr	r0, [r0]
   16bc0:	b	16bc8 <__assert_fail@plt+0x5d0c>
   16bc4:	ldrb	r3, [r2, #1]!
   16bc8:	lsl	r1, r3, #1
   16bcc:	ldrh	r4, [r0, r1]
   16bd0:	ands	r4, r4, #8192	; 0x2000
   16bd4:	bne	16bc4 <__assert_fail@plt+0x5d08>
   16bd8:	cmp	r3, #45	; 0x2d
   16bdc:	bne	16bf0 <__assert_fail@plt+0x5d34>
   16be0:	mov	r4, #4
   16be4:	mov	r0, r4
   16be8:	add	sp, sp, #52	; 0x34
   16bec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bf0:	mov	r2, r6
   16bf4:	mov	r3, r4
   16bf8:	mov	r1, r5
   16bfc:	mov	r0, sl
   16c00:	bl	10cc4 <__strtoull_internal@plt>
   16c04:	ldr	r9, [r5]
   16c08:	cmp	sl, r9
   16c0c:	mov	r6, r0
   16c10:	mov	r7, r1
   16c14:	beq	16c5c <__assert_fail@plt+0x5da0>
   16c18:	ldr	r4, [fp]
   16c1c:	cmp	r4, #0
   16c20:	bne	16c4c <__assert_fail@plt+0x5d90>
   16c24:	ldr	r3, [sp, #88]	; 0x58
   16c28:	cmp	r3, #0
   16c2c:	beq	16c3c <__assert_fail@plt+0x5d80>
   16c30:	ldrb	sl, [r9]
   16c34:	cmp	sl, #0
   16c38:	bne	16c90 <__assert_fail@plt+0x5dd4>
   16c3c:	mov	r0, r4
   16c40:	strd	r6, [r8]
   16c44:	add	sp, sp, #52	; 0x34
   16c48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c4c:	cmp	r4, #34	; 0x22
   16c50:	bne	16be0 <__assert_fail@plt+0x5d24>
   16c54:	mov	r4, #1
   16c58:	b	16c24 <__assert_fail@plt+0x5d68>
   16c5c:	ldr	r3, [sp, #88]	; 0x58
   16c60:	cmp	r3, #0
   16c64:	beq	16be0 <__assert_fail@plt+0x5d24>
   16c68:	ldrb	sl, [r9]
   16c6c:	cmp	sl, #0
   16c70:	beq	16be0 <__assert_fail@plt+0x5d24>
   16c74:	mov	r1, sl
   16c78:	mov	r0, r3
   16c7c:	bl	10dfc <strchr@plt>
   16c80:	cmp	r0, #0
   16c84:	movne	r6, #1
   16c88:	movne	r7, #0
   16c8c:	beq	16be0 <__assert_fail@plt+0x5d24>
   16c90:	mov	r1, sl
   16c94:	ldr	r0, [sp, #88]	; 0x58
   16c98:	bl	10dfc <strchr@plt>
   16c9c:	cmp	r0, #0
   16ca0:	beq	17800 <__assert_fail@plt+0x6944>
   16ca4:	sub	r3, sl, #69	; 0x45
   16ca8:	cmp	r3, #47	; 0x2f
   16cac:	ldrls	pc, [pc, r3, lsl #2]
   16cb0:	b	16da4 <__assert_fail@plt+0x5ee8>
   16cb4:	andeq	r6, r1, r4, ror sp
   16cb8:	andeq	r6, r1, r4, lsr #27
   16cbc:	andeq	r6, r1, r4, ror sp
   16cc0:	andeq	r6, r1, r4, lsr #27
   16cc4:	andeq	r6, r1, r4, lsr #27
   16cc8:	andeq	r6, r1, r4, lsr #27
   16ccc:	andeq	r6, r1, r4, ror sp
   16cd0:	andeq	r6, r1, r4, lsr #27
   16cd4:	andeq	r6, r1, r4, ror sp
   16cd8:	andeq	r6, r1, r4, lsr #27
   16cdc:	andeq	r6, r1, r4, lsr #27
   16ce0:	andeq	r6, r1, r4, ror sp
   16ce4:	andeq	r6, r1, r4, lsr #27
   16ce8:	andeq	r6, r1, r4, lsr #27
   16cec:	andeq	r6, r1, r4, lsr #27
   16cf0:	andeq	r6, r1, r4, ror sp
   16cf4:	andeq	r6, r1, r4, lsr #27
   16cf8:	andeq	r6, r1, r4, lsr #27
   16cfc:	andeq	r6, r1, r4, lsr #27
   16d00:	andeq	r6, r1, r4, lsr #27
   16d04:	andeq	r6, r1, r4, ror sp
   16d08:	andeq	r6, r1, r4, ror sp
   16d0c:	andeq	r6, r1, r4, lsr #27
   16d10:	andeq	r6, r1, r4, lsr #27
   16d14:	andeq	r6, r1, r4, lsr #27
   16d18:	andeq	r6, r1, r4, lsr #27
   16d1c:	andeq	r6, r1, r4, lsr #27
   16d20:	andeq	r6, r1, r4, lsr #27
   16d24:	andeq	r6, r1, r4, lsr #27
   16d28:	andeq	r6, r1, r4, lsr #27
   16d2c:	andeq	r6, r1, r4, lsr #27
   16d30:	andeq	r6, r1, r4, lsr #27
   16d34:	andeq	r6, r1, r4, lsr #27
   16d38:	andeq	r6, r1, r4, lsr #27
   16d3c:	andeq	r6, r1, r4, ror sp
   16d40:	andeq	r6, r1, r4, lsr #27
   16d44:	andeq	r6, r1, r4, lsr #27
   16d48:	andeq	r6, r1, r4, lsr #27
   16d4c:	andeq	r6, r1, r4, ror sp
   16d50:	andeq	r6, r1, r4, lsr #27
   16d54:	andeq	r6, r1, r4, ror sp
   16d58:	andeq	r6, r1, r4, lsr #27
   16d5c:	andeq	r6, r1, r4, lsr #27
   16d60:	andeq	r6, r1, r4, lsr #27
   16d64:	andeq	r6, r1, r4, lsr #27
   16d68:	andeq	r6, r1, r4, lsr #27
   16d6c:	andeq	r6, r1, r4, lsr #27
   16d70:	andeq	r6, r1, r4, ror sp
   16d74:	mov	r1, #48	; 0x30
   16d78:	ldr	r0, [sp, #88]	; 0x58
   16d7c:	bl	10dfc <strchr@plt>
   16d80:	cmp	r0, #0
   16d84:	beq	17894 <__assert_fail@plt+0x69d8>
   16d88:	ldrb	r3, [r9, #1]
   16d8c:	cmp	r3, #68	; 0x44
   16d90:	beq	17874 <__assert_fail@plt+0x69b8>
   16d94:	cmp	r3, #105	; 0x69
   16d98:	beq	17844 <__assert_fail@plt+0x6988>
   16d9c:	cmp	r3, #66	; 0x42
   16da0:	beq	17874 <__assert_fail@plt+0x69b8>
   16da4:	ldr	r3, [pc, #2948]	; 17930 <__assert_fail@plt+0x6a74>
   16da8:	mvn	r2, #0
   16dac:	mov	r1, #1024	; 0x400
   16db0:	mov	lr, #0
   16db4:	strd	r2, [sp]
   16db8:	mov	r3, #1
   16dbc:	str	r3, [sp, #12]
   16dc0:	sub	sl, sl, #66	; 0x42
   16dc4:	cmp	sl, #53	; 0x35
   16dc8:	ldrls	pc, [pc, sl, lsl #2]
   16dcc:	b	17800 <__assert_fail@plt+0x6944>
   16dd0:	ldrdeq	r7, [r1], -r0
   16dd4:	andeq	r7, r1, r0, lsl #16
   16dd8:	andeq	r7, r1, r0, lsl #16
   16ddc:	andeq	r7, r1, ip, asr #12
   16de0:	andeq	r7, r1, r0, lsl #16
   16de4:	andeq	r7, r1, r8, lsl #11
   16de8:	andeq	r7, r1, r0, lsl #16
   16dec:	andeq	r7, r1, r0, lsl #16
   16df0:	andeq	r7, r1, r0, lsl #16
   16df4:	andeq	r7, r1, ip, lsl #16
   16df8:	andeq	r7, r1, r0, lsl #16
   16dfc:	andeq	r6, r1, r8, lsr #29
   16e00:	andeq	r7, r1, r0, lsl #16
   16e04:	andeq	r7, r1, r0, lsl #16
   16e08:	andeq	r6, r1, r4, lsr pc
   16e0c:	andeq	r7, r1, r0, lsl #16
   16e10:	andeq	r7, r1, r0, lsl #16
   16e14:	andeq	r7, r1, r0, lsl #16
   16e18:			; <UNDEFINED> instruction: 0x000172b4
   16e1c:	andeq	r7, r1, r0, lsl #16
   16e20:	andeq	r7, r1, r0, lsl #16
   16e24:	andeq	r7, r1, r0, lsl #16
   16e28:	andeq	r7, r1, r0, lsl #16
   16e2c:	andeq	r7, r1, ip, lsl #1
   16e30:	andeq	r7, r1, r8, ror #7
   16e34:	andeq	r7, r1, r0, lsl #16
   16e38:	andeq	r7, r1, r0, lsl #16
   16e3c:	andeq	r7, r1, r0, lsl #16
   16e40:	andeq	r7, r1, r0, lsl #16
   16e44:	andeq	r7, r1, r0, lsl #16
   16e48:	andeq	r7, r1, r0, lsl #16
   16e4c:	andeq	r7, r1, r0, lsl #16
   16e50:			; <UNDEFINED> instruction: 0x000173b8
   16e54:			; <UNDEFINED> instruction: 0x000173b0
   16e58:	andeq	r7, r1, r0, lsl #16
   16e5c:	andeq	r7, r1, r0, lsl #16
   16e60:	andeq	r7, r1, r0, lsl #16
   16e64:	andeq	r7, r1, r8, lsl #11
   16e68:	andeq	r7, r1, r0, lsl #16
   16e6c:	andeq	r7, r1, r0, lsl #16
   16e70:	andeq	r7, r1, r0, lsl #16
   16e74:	andeq	r7, r1, ip, lsl #16
   16e78:	andeq	r7, r1, r0, lsl #16
   16e7c:	andeq	r6, r1, r8, lsr #29
   16e80:	andeq	r7, r1, r0, lsl #16
   16e84:	andeq	r7, r1, r0, lsl #16
   16e88:	andeq	r7, r1, r0, lsl #16
   16e8c:	andeq	r7, r1, r0, lsl #16
   16e90:	andeq	r7, r1, r0, lsl #16
   16e94:	andeq	r7, r1, r0, lsl #16
   16e98:			; <UNDEFINED> instruction: 0x000172b4
   16e9c:	andeq	r7, r1, r0, lsl #16
   16ea0:	andeq	r7, r1, r0, lsl #16
   16ea4:	muleq	r1, r4, r3
   16ea8:	mul	r0, r6, lr
   16eac:	ldrd	sl, [sp]
   16eb0:	umull	r2, r3, r6, r1
   16eb4:	mla	r0, r1, r7, r0
   16eb8:	cmp	r7, fp
   16ebc:	cmpeq	r6, sl
   16ec0:	add	r3, r0, r3
   16ec4:	mvnhi	r3, #0
   16ec8:	mvnhi	r2, #0
   16ecc:	mul	r6, r1, r3
   16ed0:	umull	r0, r1, r1, r2
   16ed4:	mla	lr, lr, r2, r6
   16ed8:	ldrd	r6, [sp]
   16edc:	movhi	ip, #1
   16ee0:	movls	ip, #0
   16ee4:	cmp	r7, r3
   16ee8:	cmpeq	r6, r2
   16eec:	mvncc	r0, #0
   16ef0:	add	r1, lr, r1
   16ef4:	mov	sl, r6
   16ef8:	movcc	r1, r0
   16efc:	mov	fp, r7
   16f00:	cmp	fp, r3
   16f04:	cmpeq	sl, r2
   16f08:	mov	r6, r0
   16f0c:	mov	r7, r1
   16f10:	orrcc	ip, ip, #1
   16f14:	ldr	r2, [sp, #12]
   16f18:	orr	r4, r4, ip
   16f1c:	add	r3, r9, r2
   16f20:	str	r3, [r5]
   16f24:	ldrb	r3, [r9, r2]
   16f28:	cmp	r3, #0
   16f2c:	orrne	r4, r4, #2
   16f30:	b	16c3c <__assert_fail@plt+0x5d80>
   16f34:	ldrd	sl, [sp]
   16f38:	umull	r2, r3, r6, r1
   16f3c:	mul	r0, r6, lr
   16f40:	cmp	r7, fp
   16f44:	cmpeq	r6, sl
   16f48:	mvnhi	r2, #0
   16f4c:	mla	r0, r1, r7, r0
   16f50:	umull	sl, fp, r2, r1
   16f54:	add	r3, r0, r3
   16f58:	mul	r0, lr, r2
   16f5c:	mvnhi	r3, #0
   16f60:	strd	sl, [sp, #16]
   16f64:	ldrd	sl, [sp]
   16f68:	mla	r0, r1, r3, r0
   16f6c:	ldr	ip, [sp, #20]
   16f70:	cmp	r3, fp
   16f74:	add	r0, r0, ip
   16f78:	cmpeq	r2, sl
   16f7c:	str	r0, [sp, #20]
   16f80:	bls	16f98 <__assert_fail@plt+0x60dc>
   16f84:	mvn	sl, #0
   16f88:	mvn	fp, #0
   16f8c:	strd	sl, [sp, #16]
   16f90:	ldr	r0, [sp, #20]
   16f94:	ldrd	sl, [sp]
   16f98:	cmp	r7, fp
   16f9c:	cmpeq	r6, sl
   16fa0:	mul	r0, r1, r0
   16fa4:	ldrd	r6, [sp, #16]
   16fa8:	mla	ip, lr, r6, r0
   16fac:	mov	r0, r6
   16fb0:	movhi	r0, #1
   16fb4:	movls	r0, #0
   16fb8:	cmp	r3, fp
   16fbc:	cmpeq	r2, sl
   16fc0:	ldrd	r2, [sp, #16]
   16fc4:	umull	r6, r7, r1, r6
   16fc8:	orrhi	r0, r0, #1
   16fcc:	cmp	fp, r3
   16fd0:	cmpeq	sl, r2
   16fd4:	add	r7, ip, r7
   16fd8:	bcc	178e4 <__assert_fail@plt+0x6a28>
   16fdc:	mov	sl, r6
   16fe0:	mov	fp, r7
   16fe4:	strd	r6, [sp, #24]
   16fe8:	mul	r3, r1, fp
   16fec:	umull	r6, r7, r1, sl
   16ff0:	mla	ip, lr, sl, r3
   16ff4:	ldrd	sl, [sp]
   16ff8:	ldrd	r2, [sp, #16]
   16ffc:	add	r7, ip, r7
   17000:	cmp	fp, r3
   17004:	cmpeq	sl, r2
   17008:	mov	r3, fp
   1700c:	mov	r2, sl
   17010:	ldrd	sl, [sp, #24]
   17014:	orrcc	r0, r0, #1
   17018:	str	r0, [sp, #16]
   1701c:	cmp	r3, fp
   17020:	cmpeq	r2, sl
   17024:	bcs	1757c <__assert_fail@plt+0x66c0>
   17028:	mvn	r2, #0
   1702c:	mvn	r3, #0
   17030:	mul	ip, lr, r2
   17034:	ldrd	sl, [sp]
   17038:	mla	ip, r1, r3, ip
   1703c:	umull	r6, r7, r2, r1
   17040:	ldrd	r0, [sp, #24]
   17044:	add	r7, ip, r7
   17048:	cmp	fp, r1
   1704c:	ldr	r1, [sp, #16]
   17050:	cmpeq	sl, r0
   17054:	orrcc	r1, r1, #1
   17058:	cmp	r3, fp
   1705c:	cmpeq	r2, sl
   17060:	mvnhi	r0, #0
   17064:	movls	ip, r7
   17068:	movhi	ip, r0
   1706c:	movls	r0, r6
   17070:	cmp	r3, fp
   17074:	cmpeq	r2, sl
   17078:	mov	r7, ip
   1707c:	mov	r6, r0
   17080:	movls	ip, r1
   17084:	orrhi	ip, r1, #1
   17088:	b	16f14 <__assert_fail@plt+0x6058>
   1708c:	ldrd	sl, [sp]
   17090:	umull	r2, r3, r6, r1
   17094:	mul	r0, r6, lr
   17098:	cmp	r7, fp
   1709c:	cmpeq	r6, sl
   170a0:	mvnhi	r2, #0
   170a4:	mla	r0, r1, r7, r0
   170a8:	umull	sl, fp, r2, r1
   170ac:	add	r3, r0, r3
   170b0:	mul	r0, lr, r2
   170b4:	mvnhi	r3, #0
   170b8:	strd	sl, [sp, #16]
   170bc:	ldrd	sl, [sp]
   170c0:	mla	r0, r1, r3, r0
   170c4:	ldr	ip, [sp, #20]
   170c8:	cmp	r3, fp
   170cc:	add	r0, r0, ip
   170d0:	cmpeq	r2, sl
   170d4:	str	r0, [sp, #20]
   170d8:	mvnhi	sl, #0
   170dc:	mvnhi	fp, #0
   170e0:	strdhi	sl, [sp, #16]
   170e4:	ldrdhi	sl, [sp]
   170e8:	ldr	r0, [sp, #16]
   170ec:	cmp	r3, fp
   170f0:	ldr	r3, [sp, #20]
   170f4:	mul	r0, lr, r0
   170f8:	cmpeq	r2, sl
   170fc:	mla	r0, r1, r3, r0
   17100:	ldr	r3, [sp, #16]
   17104:	umull	r2, r3, r3, r1
   17108:	strd	r2, [sp, #24]
   1710c:	movhi	r3, #1
   17110:	movls	r3, #0
   17114:	cmp	r7, fp
   17118:	cmpeq	r6, sl
   1711c:	ldrd	r6, [sp, #16]
   17120:	ldr	r2, [sp, #28]
   17124:	movls	ip, r3
   17128:	orrhi	ip, r3, #1
   1712c:	cmp	r7, fp
   17130:	add	r2, r0, r2
   17134:	cmpeq	r6, sl
   17138:	str	r2, [sp, #28]
   1713c:	mvnhi	r2, #0
   17140:	mvnhi	r3, #0
   17144:	strdhi	r2, [sp, #24]
   17148:	ldrd	r6, [sp, #24]
   1714c:	mul	r2, r1, r7
   17150:	umull	sl, fp, r1, r6
   17154:	mla	r3, lr, r6, r2
   17158:	ldrd	r6, [sp]
   1715c:	str	r3, [sp, #32]
   17160:	ldrd	r2, [sp, #16]
   17164:	cmp	r3, r7
   17168:	cmpeq	r2, r6
   1716c:	ldrd	r2, [sp, #24]
   17170:	orrhi	ip, ip, #1
   17174:	cmp	r3, r7
   17178:	ldr	r3, [sp, #32]
   1717c:	cmpeq	r2, r6
   17180:	add	r2, r3, fp
   17184:	mov	fp, r2
   17188:	bhi	178cc <__assert_fail@plt+0x6a10>
   1718c:	strd	sl, [sp, #16]
   17190:	mul	r2, r1, fp
   17194:	umull	r6, r7, r1, sl
   17198:	mla	r3, lr, sl, r2
   1719c:	ldrd	sl, [sp]
   171a0:	str	r3, [sp, #32]
   171a4:	ldrd	r2, [sp, #24]
   171a8:	cmp	r3, fp
   171ac:	cmpeq	r2, sl
   171b0:	ldrd	r2, [sp, #16]
   171b4:	orrhi	ip, ip, #1
   171b8:	cmp	fp, r3
   171bc:	ldr	r3, [sp, #32]
   171c0:	cmpeq	sl, r2
   171c4:	add	r2, r3, r7
   171c8:	mov	r7, r2
   171cc:	mvncc	r7, #0
   171d0:	mvncc	r6, #0
   171d4:	mul	r2, r1, r7
   171d8:	mov	sl, r6
   171dc:	strd	r6, [sp, #24]
   171e0:	mla	r0, lr, sl, r2
   171e4:	ldrd	r2, [sp, #16]
   171e8:	ldrd	sl, [sp]
   171ec:	umull	r6, r7, r1, r6
   171f0:	cmp	fp, r3
   171f4:	cmpeq	sl, r2
   171f8:	mov	r3, fp
   171fc:	mov	r2, sl
   17200:	ldrd	sl, [sp, #24]
   17204:	orrcc	ip, ip, #1
   17208:	add	r7, r0, r7
   1720c:	cmp	r3, fp
   17210:	cmpeq	r2, sl
   17214:	mvncc	r6, #0
   17218:	mvncc	r7, #0
   1721c:	umull	sl, fp, r1, r6
   17220:	mul	r3, r1, r7
   17224:	strd	sl, [sp, #16]
   17228:	mla	r0, lr, r6, r3
   1722c:	ldrd	sl, [sp, #24]
   17230:	ldrd	r2, [sp]
   17234:	cmp	r3, fp
   17238:	cmpeq	r2, sl
   1723c:	orrcc	ip, ip, #1
   17240:	cmp	r3, r7
   17244:	ldr	r3, [sp, #20]
   17248:	cmpeq	r2, r6
   1724c:	add	r3, r0, r3
   17250:	str	r3, [sp, #20]
   17254:	mvncc	r2, #0
   17258:	mvncc	r3, #0
   1725c:	ldrdcs	r2, [sp, #16]
   17260:	ldrd	sl, [sp]
   17264:	mul	r0, r1, r3
   17268:	cmp	fp, r7
   1726c:	str	r0, [sp, #16]
   17270:	cmpeq	sl, r6
   17274:	ldr	r6, [sp, #16]
   17278:	umull	r0, r1, r1, r2
   1727c:	mla	lr, lr, r2, r6
   17280:	orrcc	ip, ip, #1
   17284:	cmp	r3, fp
   17288:	cmpeq	r2, sl
   1728c:	add	r1, lr, r1
   17290:	bls	1729c <__assert_fail@plt+0x63e0>
   17294:	mvn	r0, #0
   17298:	mov	r1, r0
   1729c:	cmp	r3, fp
   172a0:	cmpeq	r2, sl
   172a4:	mov	r6, r0
   172a8:	mov	r7, r1
   172ac:	orrhi	ip, ip, #1
   172b0:	b	16f14 <__assert_fail@plt+0x6058>
   172b4:	ldrd	sl, [sp]
   172b8:	umull	r2, r3, r6, r1
   172bc:	mul	r0, r6, lr
   172c0:	cmp	r7, fp
   172c4:	cmpeq	r6, sl
   172c8:	mvnhi	r2, #0
   172cc:	mla	r0, r1, r7, r0
   172d0:	umull	sl, fp, r1, r2
   172d4:	add	r3, r0, r3
   172d8:	mvnhi	r3, #0
   172dc:	strd	sl, [sp, #16]
   172e0:	mul	r0, r1, r3
   172e4:	ldrd	sl, [sp]
   172e8:	mla	r0, lr, r2, r0
   172ec:	ldr	ip, [sp, #20]
   172f0:	cmp	fp, r3
   172f4:	add	r0, r0, ip
   172f8:	cmpeq	sl, r2
   172fc:	str	r0, [sp, #20]
   17300:	mvncc	sl, #0
   17304:	mvncc	fp, #0
   17308:	strdcc	sl, [sp, #16]
   1730c:	ldrdcc	sl, [sp]
   17310:	ldr	r0, [sp, #16]
   17314:	cmp	fp, r3
   17318:	cmpeq	sl, r2
   1731c:	mul	r0, lr, r0
   17320:	ldr	r2, [sp, #20]
   17324:	ldr	r3, [sp, #16]
   17328:	movcc	ip, #1
   1732c:	movcs	ip, #0
   17330:	cmp	r7, fp
   17334:	cmpeq	r6, sl
   17338:	ldrd	r6, [sp, #16]
   1733c:	mla	r0, r1, r2, r0
   17340:	umull	r2, r3, r3, r1
   17344:	orrhi	ip, ip, #1
   17348:	cmp	r7, fp
   1734c:	cmpeq	r6, sl
   17350:	add	r3, r0, r3
   17354:	mvnhi	r3, #0
   17358:	mvnhi	r2, #0
   1735c:	mul	r0, r1, r3
   17360:	cmp	r7, fp
   17364:	str	r0, [sp, #24]
   17368:	cmpeq	r6, sl
   1736c:	ldr	r6, [sp, #24]
   17370:	umull	r0, r1, r1, r2
   17374:	mla	lr, lr, r2, r6
   17378:	orrhi	ip, ip, #1
   1737c:	cmp	fp, r3
   17380:	cmpeq	sl, r2
   17384:	mvncc	r0, #0
   17388:	add	r1, lr, r1
   1738c:	movcc	r1, r0
   17390:	b	16f00 <__assert_fail@plt+0x6044>
   17394:	cmp	r6, #0
   17398:	sbcs	r3, r7, #0
   1739c:	blt	17834 <__assert_fail@plt+0x6978>
   173a0:	adds	r6, r6, r6
   173a4:	adc	r7, r7, r7
   173a8:	mov	ip, #0
   173ac:	b	16f14 <__assert_fail@plt+0x6058>
   173b0:	mov	ip, #0
   173b4:	b	16f14 <__assert_fail@plt+0x6058>
   173b8:	ldr	r3, [pc, #1396]	; 17934 <__assert_fail@plt+0x6a78>
   173bc:	mvn	r2, #0
   173c0:	cmp	r7, r3
   173c4:	cmpeq	r6, r2
   173c8:	bhi	17834 <__assert_fail@plt+0x6978>
   173cc:	lsl	r3, r7, #9
   173d0:	orr	r3, r3, r6, lsr #23
   173d4:	lsl	r2, r6, #9
   173d8:	mov	r6, r2
   173dc:	mov	r7, r3
   173e0:	mov	ip, #0
   173e4:	b	16f14 <__assert_fail@plt+0x6058>
   173e8:	ldrd	sl, [sp]
   173ec:	umull	r2, r3, r6, r1
   173f0:	mul	r0, r6, lr
   173f4:	cmp	r7, fp
   173f8:	cmpeq	r6, sl
   173fc:	mvnhi	r2, #0
   17400:	mla	r0, r1, r7, r0
   17404:	umull	sl, fp, r2, r1
   17408:	add	r3, r0, r3
   1740c:	mul	r0, lr, r2
   17410:	mvnhi	r3, #0
   17414:	strd	sl, [sp, #16]
   17418:	ldrd	sl, [sp]
   1741c:	mla	r0, r1, r3, r0
   17420:	ldr	ip, [sp, #20]
   17424:	cmp	r3, fp
   17428:	add	r0, r0, ip
   1742c:	cmpeq	r2, sl
   17430:	str	r0, [sp, #20]
   17434:	mvnhi	sl, #0
   17438:	mvnhi	fp, #0
   1743c:	strdhi	sl, [sp, #16]
   17440:	ldrdhi	sl, [sp]
   17444:	ldr	r0, [sp, #16]
   17448:	cmp	r3, fp
   1744c:	ldr	r3, [sp, #20]
   17450:	mul	r0, lr, r0
   17454:	cmpeq	r2, sl
   17458:	mla	r0, r1, r3, r0
   1745c:	ldr	r3, [sp, #16]
   17460:	umull	r2, r3, r3, r1
   17464:	strd	r2, [sp, #24]
   17468:	movhi	r3, #1
   1746c:	movls	r3, #0
   17470:	cmp	r7, fp
   17474:	cmpeq	r6, sl
   17478:	ldrd	r6, [sp, #16]
   1747c:	ldr	r2, [sp, #28]
   17480:	movls	ip, r3
   17484:	orrhi	ip, r3, #1
   17488:	cmp	r7, fp
   1748c:	add	r2, r0, r2
   17490:	cmpeq	r6, sl
   17494:	str	r2, [sp, #28]
   17498:	mvnhi	r2, #0
   1749c:	mvnhi	r3, #0
   174a0:	strdhi	r2, [sp, #24]
   174a4:	ldrd	r6, [sp, #24]
   174a8:	mul	r2, lr, r6
   174ac:	umull	sl, fp, r6, r1
   174b0:	mla	r3, r1, r7, r2
   174b4:	ldrd	r6, [sp]
   174b8:	str	r3, [sp, #32]
   174bc:	ldrd	r2, [sp, #16]
   174c0:	cmp	r3, r7
   174c4:	cmpeq	r2, r6
   174c8:	ldrd	r2, [sp, #24]
   174cc:	orrhi	ip, ip, #1
   174d0:	cmp	r3, r7
   174d4:	ldr	r3, [sp, #32]
   174d8:	cmpeq	r2, r6
   174dc:	add	r2, r3, fp
   174e0:	mov	fp, r2
   174e4:	bhi	178fc <__assert_fail@plt+0x6a40>
   174e8:	strd	sl, [sp, #16]
   174ec:	mul	r2, lr, sl
   174f0:	umull	r6, r7, sl, r1
   174f4:	mla	r3, r1, fp, r2
   174f8:	ldrd	sl, [sp]
   174fc:	str	r3, [sp, #32]
   17500:	ldrd	r2, [sp, #24]
   17504:	cmp	r3, fp
   17508:	cmpeq	r2, sl
   1750c:	ldrd	r2, [sp, #16]
   17510:	orrhi	ip, ip, #1
   17514:	cmp	r3, fp
   17518:	ldr	r3, [sp, #32]
   1751c:	cmpeq	r2, sl
   17520:	add	r2, r3, r7
   17524:	mov	r7, r2
   17528:	mvnhi	r7, #0
   1752c:	mvnhi	r6, #0
   17530:	mul	r2, r1, r7
   17534:	mov	sl, r6
   17538:	strd	r6, [sp, #24]
   1753c:	mla	r0, lr, sl, r2
   17540:	ldrd	sl, [sp]
   17544:	ldrd	r2, [sp, #16]
   17548:	umull	r6, r7, r1, r6
   1754c:	cmp	r3, fp
   17550:	cmpeq	r2, sl
   17554:	mov	r3, ip
   17558:	orrhi	r3, r3, #1
   1755c:	mov	r2, sl
   17560:	str	r3, [sp, #16]
   17564:	mov	r3, fp
   17568:	ldrd	sl, [sp, #24]
   1756c:	add	r7, r0, r7
   17570:	cmp	r3, fp
   17574:	cmpeq	r2, sl
   17578:	bcc	17028 <__assert_fail@plt+0x616c>
   1757c:	mov	r2, r6
   17580:	mov	r3, r7
   17584:	b	17030 <__assert_fail@plt+0x6174>
   17588:	ldrd	sl, [sp]
   1758c:	umull	r2, r3, r6, r1
   17590:	mul	r0, r6, lr
   17594:	cmp	r7, fp
   17598:	cmpeq	r6, sl
   1759c:	mvnhi	r2, #0
   175a0:	mla	r0, r1, r7, r0
   175a4:	umull	sl, fp, r2, r1
   175a8:	add	r3, r0, r3
   175ac:	mul	r0, lr, r2
   175b0:	mvnhi	r3, #0
   175b4:	strd	sl, [sp, #16]
   175b8:	ldrd	sl, [sp]
   175bc:	mla	r0, r1, r3, r0
   175c0:	ldr	ip, [sp, #20]
   175c4:	cmp	r3, fp
   175c8:	add	r0, r0, ip
   175cc:	cmpeq	r2, sl
   175d0:	str	r0, [sp, #20]
   175d4:	mvnhi	sl, #0
   175d8:	mvnhi	fp, #0
   175dc:	strdhi	sl, [sp, #16]
   175e0:	ldrdhi	sl, [sp]
   175e4:	ldr	r0, [sp, #16]
   175e8:	cmp	r3, fp
   175ec:	ldr	ip, [sp, #20]
   175f0:	mul	r0, lr, r0
   175f4:	ldr	r3, [sp, #16]
   175f8:	cmpeq	r2, sl
   175fc:	mla	r0, r1, ip, r0
   17600:	umull	r2, r3, r3, r1
   17604:	movhi	r1, #1
   17608:	movls	r1, #0
   1760c:	cmp	r7, fp
   17610:	cmpeq	r6, sl
   17614:	ldrd	r6, [sp, #16]
   17618:	movls	ip, r1
   1761c:	orrhi	ip, r1, #1
   17620:	cmp	r7, fp
   17624:	cmpeq	r6, sl
   17628:	mvnhi	r2, #0
   1762c:	add	r3, r0, r3
   17630:	movhi	r3, r2
   17634:	cmp	r7, fp
   17638:	cmpeq	r6, sl
   1763c:	mov	r7, r3
   17640:	mov	r6, r2
   17644:	orrhi	ip, ip, #1
   17648:	b	16f14 <__assert_fail@plt+0x6058>
   1764c:	ldrd	sl, [sp]
   17650:	umull	r2, r3, r6, r1
   17654:	mul	r0, r6, lr
   17658:	cmp	r7, fp
   1765c:	cmpeq	r6, sl
   17660:	mvnhi	r2, #0
   17664:	mla	r0, r1, r7, r0
   17668:	umull	sl, fp, r1, r2
   1766c:	add	r3, r0, r3
   17670:	mvnhi	r3, #0
   17674:	strd	sl, [sp, #16]
   17678:	mul	r0, r1, r3
   1767c:	ldrd	sl, [sp]
   17680:	mla	r0, lr, r2, r0
   17684:	ldr	ip, [sp, #20]
   17688:	cmp	fp, r3
   1768c:	add	r0, r0, ip
   17690:	cmpeq	sl, r2
   17694:	str	r0, [sp, #20]
   17698:	mvncc	sl, #0
   1769c:	mvncc	fp, #0
   176a0:	strdcc	sl, [sp, #16]
   176a4:	ldrdcc	sl, [sp]
   176a8:	ldr	r0, [sp, #16]
   176ac:	cmp	fp, r3
   176b0:	ldr	r3, [sp, #20]
   176b4:	mul	r0, lr, r0
   176b8:	cmpeq	sl, r2
   176bc:	mla	r0, r1, r3, r0
   176c0:	ldr	r3, [sp, #16]
   176c4:	umull	r2, r3, r3, r1
   176c8:	strd	r2, [sp, #24]
   176cc:	movcc	r3, #1
   176d0:	movcs	r3, #0
   176d4:	cmp	r7, fp
   176d8:	cmpeq	r6, sl
   176dc:	movls	ip, r3
   176e0:	orrhi	ip, r3, #1
   176e4:	ldrd	r2, [sp, #16]
   176e8:	cmp	r3, fp
   176ec:	ldr	r3, [sp, #28]
   176f0:	cmpeq	r2, sl
   176f4:	add	r3, r0, r3
   176f8:	str	r3, [sp, #28]
   176fc:	bhi	178b4 <__assert_fail@plt+0x69f8>
   17700:	ldrd	r2, [sp, #24]
   17704:	mov	sl, r2
   17708:	mov	fp, r3
   1770c:	mul	r2, lr, sl
   17710:	umull	r6, r7, sl, r1
   17714:	mla	r0, r1, fp, r2
   17718:	ldrd	r2, [sp]
   1771c:	add	r7, r0, r7
   17720:	mov	sl, r2
   17724:	mov	fp, r3
   17728:	strd	r2, [sp, #32]
   1772c:	ldrd	r2, [sp, #16]
   17730:	cmp	r3, fp
   17734:	cmpeq	r2, sl
   17738:	ldrd	r2, [sp, #32]
   1773c:	ldrd	sl, [sp, #24]
   17740:	orrhi	ip, ip, #1
   17744:	cmp	fp, r3
   17748:	cmpeq	sl, r2
   1774c:	mvnhi	r6, #0
   17750:	mvnhi	r7, #0
   17754:	umull	sl, fp, r6, r1
   17758:	mul	r3, lr, r6
   1775c:	strd	sl, [sp, #16]
   17760:	mla	r0, r1, r7, r3
   17764:	ldrd	sl, [sp, #24]
   17768:	ldrd	r2, [sp]
   1776c:	cmp	fp, r3
   17770:	cmpeq	sl, r2
   17774:	orrhi	ip, ip, #1
   17778:	cmp	r7, r3
   1777c:	ldr	r3, [sp, #20]
   17780:	cmpeq	r6, r2
   17784:	add	r3, r0, r3
   17788:	str	r3, [sp, #20]
   1778c:	mvnhi	r2, #0
   17790:	mvnhi	r3, #0
   17794:	ldrdls	r2, [sp, #16]
   17798:	ldrd	sl, [sp]
   1779c:	mul	r0, r1, r3
   177a0:	cmp	r7, fp
   177a4:	str	r0, [sp, #16]
   177a8:	cmpeq	r6, sl
   177ac:	ldr	r6, [sp, #16]
   177b0:	umull	r0, r1, r1, r2
   177b4:	mla	lr, lr, r2, r6
   177b8:	orrhi	ip, ip, #1
   177bc:	cmp	r3, fp
   177c0:	cmpeq	r2, sl
   177c4:	add	r1, lr, r1
   177c8:	bls	1729c <__assert_fail@plt+0x63e0>
   177cc:	b	17294 <__assert_fail@plt+0x63d8>
   177d0:	ldr	r3, [pc, #344]	; 17930 <__assert_fail@plt+0x6a74>
   177d4:	mvn	r2, #0
   177d8:	cmp	r7, r3
   177dc:	cmpeq	r6, r2
   177e0:	bhi	17834 <__assert_fail@plt+0x6978>
   177e4:	lsl	r3, r7, #10
   177e8:	orr	r3, r3, r6, lsr #22
   177ec:	lsl	r2, r6, #10
   177f0:	mov	r6, r2
   177f4:	mov	r7, r3
   177f8:	mov	ip, #0
   177fc:	b	16f14 <__assert_fail@plt+0x6058>
   17800:	strd	r6, [r8]
   17804:	orr	r4, r4, #2
   17808:	b	16be4 <__assert_fail@plt+0x5d28>
   1780c:	ldrd	r2, [sp]
   17810:	cmp	r7, r3
   17814:	cmpeq	r6, r2
   17818:	bhi	17834 <__assert_fail@plt+0x6978>
   1781c:	mul	r3, r6, lr
   17820:	mov	ip, #0
   17824:	mla	r3, r1, r7, r3
   17828:	umull	r6, r7, r6, r1
   1782c:	add	r7, r3, r7
   17830:	b	16f14 <__assert_fail@plt+0x6058>
   17834:	mvn	r6, #0
   17838:	mvn	r7, #0
   1783c:	mov	ip, #1
   17840:	b	16f14 <__assert_fail@plt+0x6058>
   17844:	ldrb	r3, [r9, #2]
   17848:	mvn	r2, #0
   1784c:	mov	r1, #1024	; 0x400
   17850:	cmp	r3, #66	; 0x42
   17854:	ldr	r3, [pc, #212]	; 17930 <__assert_fail@plt+0x6a74>
   17858:	mov	lr, #0
   1785c:	strd	r2, [sp]
   17860:	moveq	r3, #3
   17864:	streq	r3, [sp, #12]
   17868:	movne	r3, #1
   1786c:	strne	r3, [sp, #12]
   17870:	b	16dc0 <__assert_fail@plt+0x5f04>
   17874:	add	r3, pc, #172	; 0xac
   17878:	ldrd	r2, [r3]
   1787c:	mov	r1, #1000	; 0x3e8
   17880:	mov	lr, #0
   17884:	strd	r2, [sp]
   17888:	mov	r3, #2
   1788c:	str	r3, [sp, #12]
   17890:	b	16dc0 <__assert_fail@plt+0x5f04>
   17894:	ldr	r3, [pc, #148]	; 17930 <__assert_fail@plt+0x6a74>
   17898:	mvn	r2, #0
   1789c:	mov	lr, r0
   178a0:	strd	r2, [sp]
   178a4:	mov	r3, #1
   178a8:	mov	r1, #1024	; 0x400
   178ac:	str	r3, [sp, #12]
   178b0:	b	16dc0 <__assert_fail@plt+0x5f04>
   178b4:	mvn	r2, #0
   178b8:	mvn	r3, #0
   178bc:	mov	sl, r2
   178c0:	strd	r2, [sp, #24]
   178c4:	mov	fp, r3
   178c8:	b	1770c <__assert_fail@plt+0x6850>
   178cc:	mvn	r2, #0
   178d0:	mvn	r3, #0
   178d4:	mov	sl, r2
   178d8:	strd	r2, [sp, #16]
   178dc:	mov	fp, r3
   178e0:	b	17190 <__assert_fail@plt+0x62d4>
   178e4:	mvn	r2, #0
   178e8:	mvn	r3, #0
   178ec:	mov	sl, r2
   178f0:	strd	r2, [sp, #24]
   178f4:	mov	fp, r3
   178f8:	b	16fe8 <__assert_fail@plt+0x612c>
   178fc:	mvn	r2, #0
   17900:	mvn	r3, #0
   17904:	mov	sl, r2
   17908:	strd	r2, [sp, #16]
   1790c:	mov	fp, r3
   17910:	b	174ec <__assert_fail@plt+0x6630>
   17914:	ldr	r3, [pc, #28]	; 17938 <__assert_fail@plt+0x6a7c>
   17918:	mov	r2, #85	; 0x55
   1791c:	ldr	r1, [pc, #24]	; 1793c <__assert_fail@plt+0x6a80>
   17920:	ldr	r0, [pc, #24]	; 17940 <__assert_fail@plt+0x6a84>
   17924:	bl	10ebc <__assert_fail@plt>
   17928:	blmi	ff1c18ec <optarg@@GLIBC_2.4+0xff1987a4>
   1792c:	subeq	r8, r1, r7, lsr r9
   17930:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   17934:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   17938:	andeq	r8, r1, r0, asr #23
   1793c:	andeq	r8, r1, ip, asr #23
   17940:	ldrdeq	r8, [r1], -ip
   17944:	cmp	r1, #0
   17948:	cmpne	r0, #0
   1794c:	moveq	r1, #1
   17950:	moveq	r0, r1
   17954:	umull	r2, r3, r0, r1
   17958:	adds	r3, r3, #0
   1795c:	movne	r3, #1
   17960:	cmp	r2, #0
   17964:	blt	17974 <__assert_fail@plt+0x6ab8>
   17968:	cmp	r3, #0
   1796c:	bne	17974 <__assert_fail@plt+0x6ab8>
   17970:	b	10c64 <calloc@plt>
   17974:	push	{r4, lr}
   17978:	bl	10e08 <__errno_location@plt>
   1797c:	mov	r3, #12
   17980:	str	r3, [r0]
   17984:	mov	r0, #0
   17988:	pop	{r4, pc}
   1798c:	cmp	r0, #0
   17990:	moveq	r0, #1
   17994:	cmp	r0, #0
   17998:	blt	179a0 <__assert_fail@plt+0x6ae4>
   1799c:	b	10d90 <malloc@plt>
   179a0:	push	{r4, lr}
   179a4:	bl	10e08 <__errno_location@plt>
   179a8:	mov	r3, #12
   179ac:	str	r3, [r0]
   179b0:	mov	r0, #0
   179b4:	pop	{r4, pc}
   179b8:	cmp	r0, #0
   179bc:	beq	179e0 <__assert_fail@plt+0x6b24>
   179c0:	cmp	r1, #0
   179c4:	push	{lr}		; (str lr, [sp, #-4]!)
   179c8:	sub	sp, sp, #12
   179cc:	beq	179e8 <__assert_fail@plt+0x6b2c>
   179d0:	blt	17a00 <__assert_fail@plt+0x6b44>
   179d4:	add	sp, sp, #12
   179d8:	pop	{lr}		; (ldr lr, [sp], #4)
   179dc:	b	10d18 <realloc@plt>
   179e0:	mov	r0, r1
   179e4:	b	1798c <__assert_fail@plt+0x6ad0>
   179e8:	str	r1, [sp, #4]
   179ec:	bl	17b90 <__assert_fail@plt+0x6cd4>
   179f0:	ldr	r3, [sp, #4]
   179f4:	mov	r0, r3
   179f8:	add	sp, sp, #12
   179fc:	pop	{pc}		; (ldr pc, [sp], #4)
   17a00:	bl	10e08 <__errno_location@plt>
   17a04:	mov	r2, #12
   17a08:	mov	r3, #0
   17a0c:	str	r2, [r0]
   17a10:	b	179f4 <__assert_fail@plt+0x6b38>
   17a14:	push	{r4, r5, r6, lr}
   17a18:	mov	r4, r0
   17a1c:	bl	10d60 <__fpending@plt>
   17a20:	ldr	r5, [r4]
   17a24:	and	r5, r5, #32
   17a28:	mov	r6, r0
   17a2c:	mov	r0, r4
   17a30:	bl	17a90 <__assert_fail@plt+0x6bd4>
   17a34:	cmp	r5, #0
   17a38:	mov	r4, r0
   17a3c:	bne	17a5c <__assert_fail@plt+0x6ba0>
   17a40:	cmp	r0, #0
   17a44:	beq	17a54 <__assert_fail@plt+0x6b98>
   17a48:	cmp	r6, #0
   17a4c:	beq	17a78 <__assert_fail@plt+0x6bbc>
   17a50:	mvn	r4, #0
   17a54:	mov	r0, r4
   17a58:	pop	{r4, r5, r6, pc}
   17a5c:	cmp	r0, #0
   17a60:	bne	17a50 <__assert_fail@plt+0x6b94>
   17a64:	bl	10e08 <__errno_location@plt>
   17a68:	str	r4, [r0]
   17a6c:	mvn	r4, #0
   17a70:	mov	r0, r4
   17a74:	pop	{r4, r5, r6, pc}
   17a78:	bl	10e08 <__errno_location@plt>
   17a7c:	ldr	r4, [r0]
   17a80:	subs	r4, r4, #9
   17a84:	mvnne	r4, #0
   17a88:	mov	r0, r4
   17a8c:	pop	{r4, r5, r6, pc}
   17a90:	push	{r4, r5, lr}
   17a94:	sub	sp, sp, #12
   17a98:	mov	r4, r0
   17a9c:	bl	10e38 <fileno@plt>
   17aa0:	cmp	r0, #0
   17aa4:	mov	r0, r4
   17aa8:	blt	17b24 <__assert_fail@plt+0x6c68>
   17aac:	bl	10da8 <__freading@plt>
   17ab0:	cmp	r0, #0
   17ab4:	bne	17af0 <__assert_fail@plt+0x6c34>
   17ab8:	mov	r0, r4
   17abc:	bl	17b30 <__assert_fail@plt+0x6c74>
   17ac0:	cmp	r0, #0
   17ac4:	beq	17b20 <__assert_fail@plt+0x6c64>
   17ac8:	bl	10e08 <__errno_location@plt>
   17acc:	mov	r5, r0
   17ad0:	mov	r0, r4
   17ad4:	ldr	r4, [r5]
   17ad8:	bl	10e50 <fclose@plt>
   17adc:	cmp	r4, #0
   17ae0:	mvnne	r0, #0
   17ae4:	strne	r4, [r5]
   17ae8:	add	sp, sp, #12
   17aec:	pop	{r4, r5, pc}
   17af0:	mov	r0, r4
   17af4:	bl	10e38 <fileno@plt>
   17af8:	mov	r3, #1
   17afc:	str	r3, [sp]
   17b00:	mov	r2, #0
   17b04:	mov	r3, #0
   17b08:	bl	10d48 <lseek64@plt>
   17b0c:	mvn	r3, #0
   17b10:	mvn	r2, #0
   17b14:	cmp	r1, r3
   17b18:	cmpeq	r0, r2
   17b1c:	bne	17ab8 <__assert_fail@plt+0x6bfc>
   17b20:	mov	r0, r4
   17b24:	add	sp, sp, #12
   17b28:	pop	{r4, r5, lr}
   17b2c:	b	10e50 <fclose@plt>
   17b30:	push	{r4, lr}
   17b34:	subs	r4, r0, #0
   17b38:	sub	sp, sp, #8
   17b3c:	beq	17b58 <__assert_fail@plt+0x6c9c>
   17b40:	bl	10da8 <__freading@plt>
   17b44:	cmp	r0, #0
   17b48:	beq	17b58 <__assert_fail@plt+0x6c9c>
   17b4c:	ldr	r3, [r4]
   17b50:	tst	r3, #256	; 0x100
   17b54:	bne	17b68 <__assert_fail@plt+0x6cac>
   17b58:	mov	r0, r4
   17b5c:	add	sp, sp, #8
   17b60:	pop	{r4, lr}
   17b64:	b	10c94 <fflush@plt>
   17b68:	mov	r3, #1
   17b6c:	str	r3, [sp]
   17b70:	mov	r2, #0
   17b74:	mov	r3, #0
   17b78:	mov	r0, r4
   17b7c:	bl	17be8 <__assert_fail@plt+0x6d2c>
   17b80:	mov	r0, r4
   17b84:	add	sp, sp, #8
   17b88:	pop	{r4, lr}
   17b8c:	b	10c94 <fflush@plt>
   17b90:	push	{r4, r5, lr}
   17b94:	sub	sp, sp, #12
   17b98:	mov	r5, r0
   17b9c:	bl	10e08 <__errno_location@plt>
   17ba0:	mov	r2, #0
   17ba4:	mov	r4, r0
   17ba8:	ldr	r3, [r0]
   17bac:	str	r2, [r4]
   17bb0:	mov	r0, r5
   17bb4:	str	r3, [sp]
   17bb8:	str	r3, [sp, #4]
   17bbc:	bl	10ca0 <free@plt>
   17bc0:	ldr	r3, [r4]
   17bc4:	add	r2, sp, #8
   17bc8:	cmp	r3, #0
   17bcc:	moveq	r3, #4
   17bd0:	movne	r3, #0
   17bd4:	add	r3, r2, r3
   17bd8:	ldr	r3, [r3, #-8]
   17bdc:	str	r3, [r4]
   17be0:	add	sp, sp, #12
   17be4:	pop	{r4, r5, pc}
   17be8:	push	{r4, r5, r6, r7, r8, lr}
   17bec:	sub	sp, sp, #8
   17bf0:	ldmib	r0, {ip, lr}
   17bf4:	mov	r4, r0
   17bf8:	ldr	r5, [sp, #32]
   17bfc:	cmp	lr, ip
   17c00:	beq	17c18 <__assert_fail@plt+0x6d5c>
   17c04:	str	r5, [sp, #32]
   17c08:	mov	r0, r4
   17c0c:	add	sp, sp, #8
   17c10:	pop	{r4, r5, r6, r7, r8, lr}
   17c14:	b	10e5c <fseeko64@plt>
   17c18:	ldr	lr, [r0, #20]
   17c1c:	ldr	ip, [r0, #16]
   17c20:	cmp	lr, ip
   17c24:	bne	17c04 <__assert_fail@plt+0x6d48>
   17c28:	ldr	r8, [r0, #36]	; 0x24
   17c2c:	cmp	r8, #0
   17c30:	bne	17c04 <__assert_fail@plt+0x6d48>
   17c34:	mov	r6, r2
   17c38:	mov	r7, r3
   17c3c:	bl	10e38 <fileno@plt>
   17c40:	mov	r2, r6
   17c44:	mov	r3, r7
   17c48:	str	r5, [sp]
   17c4c:	bl	10d48 <lseek64@plt>
   17c50:	mvn	r3, #0
   17c54:	mvn	r2, #0
   17c58:	cmp	r1, r3
   17c5c:	cmpeq	r0, r2
   17c60:	beq	17c80 <__assert_fail@plt+0x6dc4>
   17c64:	ldr	r3, [r4]
   17c68:	strd	r0, [r4, #80]	; 0x50
   17c6c:	mov	r0, r8
   17c70:	bic	r3, r3, #16
   17c74:	str	r3, [r4]
   17c78:	add	sp, sp, #8
   17c7c:	pop	{r4, r5, r6, r7, r8, pc}
   17c80:	mvn	r0, #0
   17c84:	b	17c78 <__assert_fail@plt+0x6dbc>
   17c88:	push	{r4, lr}
   17c8c:	mov	r0, #14
   17c90:	bl	10e80 <nl_langinfo@plt>
   17c94:	cmp	r0, #0
   17c98:	beq	17cb0 <__assert_fail@plt+0x6df4>
   17c9c:	ldrb	r2, [r0]
   17ca0:	ldr	r3, [pc, #16]	; 17cb8 <__assert_fail@plt+0x6dfc>
   17ca4:	cmp	r2, #0
   17ca8:	moveq	r0, r3
   17cac:	pop	{r4, pc}
   17cb0:	ldr	r0, [pc]	; 17cb8 <__assert_fail@plt+0x6dfc>
   17cb4:	pop	{r4, pc}
   17cb8:	andeq	r8, r1, r4, lsl #24
   17cbc:	push	{r4, r5, r6, r7, lr}
   17cc0:	subs	r6, r0, #0
   17cc4:	sub	sp, sp, #12
   17cc8:	addeq	r6, sp, #4
   17ccc:	mov	r0, r6
   17cd0:	mov	r5, r2
   17cd4:	mov	r7, r1
   17cd8:	bl	10d6c <mbrtowc@plt>
   17cdc:	cmp	r5, #0
   17ce0:	cmnne	r0, #3
   17ce4:	mov	r4, r0
   17ce8:	bls	17d04 <__assert_fail@plt+0x6e48>
   17cec:	mov	r0, #0
   17cf0:	bl	17d5c <__assert_fail@plt+0x6ea0>
   17cf4:	cmp	r0, #0
   17cf8:	moveq	r4, #1
   17cfc:	ldrbeq	r3, [r7]
   17d00:	streq	r3, [r6]
   17d04:	mov	r0, r4
   17d08:	add	sp, sp, #12
   17d0c:	pop	{r4, r5, r6, r7, pc}
   17d10:	push	{r4, r5, r6, lr}
   17d14:	subs	r4, r2, #0
   17d18:	mov	r6, r0
   17d1c:	mov	r5, r1
   17d20:	beq	17d4c <__assert_fail@plt+0x6e90>
   17d24:	mov	r1, r4
   17d28:	mvn	r0, #0
   17d2c:	bl	17e50 <__assert_fail@plt+0x6f94>
   17d30:	cmp	r0, r5
   17d34:	bcs	17d4c <__assert_fail@plt+0x6e90>
   17d38:	bl	10e08 <__errno_location@plt>
   17d3c:	mov	r3, #12
   17d40:	str	r3, [r0]
   17d44:	mov	r0, #0
   17d48:	pop	{r4, r5, r6, pc}
   17d4c:	mul	r1, r5, r4
   17d50:	mov	r0, r6
   17d54:	pop	{r4, r5, r6, lr}
   17d58:	b	179b8 <__assert_fail@plt+0x6afc>
   17d5c:	push	{lr}		; (str lr, [sp, #-4]!)
   17d60:	sub	sp, sp, #268	; 0x10c
   17d64:	add	r1, sp, #4
   17d68:	ldr	r2, [pc, #60]	; 17dac <__assert_fail@plt+0x6ef0>
   17d6c:	bl	17db8 <__assert_fail@plt+0x6efc>
   17d70:	cmp	r0, #0
   17d74:	movne	r0, #0
   17d78:	bne	17da4 <__assert_fail@plt+0x6ee8>
   17d7c:	ldr	r1, [pc, #44]	; 17db0 <__assert_fail@plt+0x6ef4>
   17d80:	add	r0, sp, #4
   17d84:	bl	10c88 <strcmp@plt>
   17d88:	cmp	r0, #0
   17d8c:	beq	17da4 <__assert_fail@plt+0x6ee8>
   17d90:	add	r0, sp, #4
   17d94:	ldr	r1, [pc, #24]	; 17db4 <__assert_fail@plt+0x6ef8>
   17d98:	bl	10c88 <strcmp@plt>
   17d9c:	adds	r0, r0, #0
   17da0:	movne	r0, #1
   17da4:	add	sp, sp, #268	; 0x10c
   17da8:	pop	{pc}		; (ldr pc, [sp], #4)
   17dac:	andeq	r0, r0, r1, lsl #2
   17db0:	andeq	r8, r1, ip, lsl #24
   17db4:	andeq	r8, r1, r0, lsl ip
   17db8:	push	{r4, r5, r6, lr}
   17dbc:	mov	r5, r1
   17dc0:	mov	r1, #0
   17dc4:	mov	r4, r2
   17dc8:	bl	10e68 <setlocale@plt>
   17dcc:	subs	r6, r0, #0
   17dd0:	beq	17e2c <__assert_fail@plt+0x6f70>
   17dd4:	bl	10df0 <strlen@plt>
   17dd8:	cmp	r4, r0
   17ddc:	bhi	17e14 <__assert_fail@plt+0x6f58>
   17de0:	cmp	r4, #0
   17de4:	bne	17df0 <__assert_fail@plt+0x6f34>
   17de8:	mov	r0, #34	; 0x22
   17dec:	pop	{r4, r5, r6, pc}
   17df0:	sub	r4, r4, #1
   17df4:	mov	r1, r6
   17df8:	mov	r2, r4
   17dfc:	mov	r0, r5
   17e00:	bl	10cb8 <memcpy@plt>
   17e04:	mov	r3, #0
   17e08:	strb	r3, [r5, r4]
   17e0c:	mov	r0, #34	; 0x22
   17e10:	pop	{r4, r5, r6, pc}
   17e14:	add	r2, r0, #1
   17e18:	mov	r1, r6
   17e1c:	mov	r0, r5
   17e20:	bl	10cb8 <memcpy@plt>
   17e24:	mov	r0, #0
   17e28:	pop	{r4, r5, r6, pc}
   17e2c:	cmp	r4, #0
   17e30:	beq	17e40 <__assert_fail@plt+0x6f84>
   17e34:	strb	r6, [r5]
   17e38:	mov	r0, #22
   17e3c:	pop	{r4, r5, r6, pc}
   17e40:	mov	r0, #22
   17e44:	pop	{r4, r5, r6, pc}
   17e48:	mov	r1, #0
   17e4c:	b	10e68 <setlocale@plt>
   17e50:	subs	r2, r1, #1
   17e54:	bxeq	lr
   17e58:	bcc	18030 <__assert_fail@plt+0x7174>
   17e5c:	cmp	r0, r1
   17e60:	bls	18014 <__assert_fail@plt+0x7158>
   17e64:	tst	r1, r2
   17e68:	beq	18020 <__assert_fail@plt+0x7164>
   17e6c:	clz	r3, r0
   17e70:	clz	r2, r1
   17e74:	sub	r3, r2, r3
   17e78:	rsbs	r3, r3, #31
   17e7c:	addne	r3, r3, r3, lsl #1
   17e80:	mov	r2, #0
   17e84:	addne	pc, pc, r3, lsl #2
   17e88:	nop			; (mov r0, r0)
   17e8c:	cmp	r0, r1, lsl #31
   17e90:	adc	r2, r2, r2
   17e94:	subcs	r0, r0, r1, lsl #31
   17e98:	cmp	r0, r1, lsl #30
   17e9c:	adc	r2, r2, r2
   17ea0:	subcs	r0, r0, r1, lsl #30
   17ea4:	cmp	r0, r1, lsl #29
   17ea8:	adc	r2, r2, r2
   17eac:	subcs	r0, r0, r1, lsl #29
   17eb0:	cmp	r0, r1, lsl #28
   17eb4:	adc	r2, r2, r2
   17eb8:	subcs	r0, r0, r1, lsl #28
   17ebc:	cmp	r0, r1, lsl #27
   17ec0:	adc	r2, r2, r2
   17ec4:	subcs	r0, r0, r1, lsl #27
   17ec8:	cmp	r0, r1, lsl #26
   17ecc:	adc	r2, r2, r2
   17ed0:	subcs	r0, r0, r1, lsl #26
   17ed4:	cmp	r0, r1, lsl #25
   17ed8:	adc	r2, r2, r2
   17edc:	subcs	r0, r0, r1, lsl #25
   17ee0:	cmp	r0, r1, lsl #24
   17ee4:	adc	r2, r2, r2
   17ee8:	subcs	r0, r0, r1, lsl #24
   17eec:	cmp	r0, r1, lsl #23
   17ef0:	adc	r2, r2, r2
   17ef4:	subcs	r0, r0, r1, lsl #23
   17ef8:	cmp	r0, r1, lsl #22
   17efc:	adc	r2, r2, r2
   17f00:	subcs	r0, r0, r1, lsl #22
   17f04:	cmp	r0, r1, lsl #21
   17f08:	adc	r2, r2, r2
   17f0c:	subcs	r0, r0, r1, lsl #21
   17f10:	cmp	r0, r1, lsl #20
   17f14:	adc	r2, r2, r2
   17f18:	subcs	r0, r0, r1, lsl #20
   17f1c:	cmp	r0, r1, lsl #19
   17f20:	adc	r2, r2, r2
   17f24:	subcs	r0, r0, r1, lsl #19
   17f28:	cmp	r0, r1, lsl #18
   17f2c:	adc	r2, r2, r2
   17f30:	subcs	r0, r0, r1, lsl #18
   17f34:	cmp	r0, r1, lsl #17
   17f38:	adc	r2, r2, r2
   17f3c:	subcs	r0, r0, r1, lsl #17
   17f40:	cmp	r0, r1, lsl #16
   17f44:	adc	r2, r2, r2
   17f48:	subcs	r0, r0, r1, lsl #16
   17f4c:	cmp	r0, r1, lsl #15
   17f50:	adc	r2, r2, r2
   17f54:	subcs	r0, r0, r1, lsl #15
   17f58:	cmp	r0, r1, lsl #14
   17f5c:	adc	r2, r2, r2
   17f60:	subcs	r0, r0, r1, lsl #14
   17f64:	cmp	r0, r1, lsl #13
   17f68:	adc	r2, r2, r2
   17f6c:	subcs	r0, r0, r1, lsl #13
   17f70:	cmp	r0, r1, lsl #12
   17f74:	adc	r2, r2, r2
   17f78:	subcs	r0, r0, r1, lsl #12
   17f7c:	cmp	r0, r1, lsl #11
   17f80:	adc	r2, r2, r2
   17f84:	subcs	r0, r0, r1, lsl #11
   17f88:	cmp	r0, r1, lsl #10
   17f8c:	adc	r2, r2, r2
   17f90:	subcs	r0, r0, r1, lsl #10
   17f94:	cmp	r0, r1, lsl #9
   17f98:	adc	r2, r2, r2
   17f9c:	subcs	r0, r0, r1, lsl #9
   17fa0:	cmp	r0, r1, lsl #8
   17fa4:	adc	r2, r2, r2
   17fa8:	subcs	r0, r0, r1, lsl #8
   17fac:	cmp	r0, r1, lsl #7
   17fb0:	adc	r2, r2, r2
   17fb4:	subcs	r0, r0, r1, lsl #7
   17fb8:	cmp	r0, r1, lsl #6
   17fbc:	adc	r2, r2, r2
   17fc0:	subcs	r0, r0, r1, lsl #6
   17fc4:	cmp	r0, r1, lsl #5
   17fc8:	adc	r2, r2, r2
   17fcc:	subcs	r0, r0, r1, lsl #5
   17fd0:	cmp	r0, r1, lsl #4
   17fd4:	adc	r2, r2, r2
   17fd8:	subcs	r0, r0, r1, lsl #4
   17fdc:	cmp	r0, r1, lsl #3
   17fe0:	adc	r2, r2, r2
   17fe4:	subcs	r0, r0, r1, lsl #3
   17fe8:	cmp	r0, r1, lsl #2
   17fec:	adc	r2, r2, r2
   17ff0:	subcs	r0, r0, r1, lsl #2
   17ff4:	cmp	r0, r1, lsl #1
   17ff8:	adc	r2, r2, r2
   17ffc:	subcs	r0, r0, r1, lsl #1
   18000:	cmp	r0, r1
   18004:	adc	r2, r2, r2
   18008:	subcs	r0, r0, r1
   1800c:	mov	r0, r2
   18010:	bx	lr
   18014:	moveq	r0, #1
   18018:	movne	r0, #0
   1801c:	bx	lr
   18020:	clz	r2, r1
   18024:	rsb	r2, r2, #31
   18028:	lsr	r0, r0, r2
   1802c:	bx	lr
   18030:	cmp	r0, #0
   18034:	mvnne	r0, #0
   18038:	b	1829c <__assert_fail@plt+0x73e0>
   1803c:	cmp	r1, #0
   18040:	beq	18030 <__assert_fail@plt+0x7174>
   18044:	push	{r0, r1, lr}
   18048:	bl	17e50 <__assert_fail@plt+0x6f94>
   1804c:	pop	{r1, r2, lr}
   18050:	mul	r3, r2, r0
   18054:	sub	r1, r1, r3
   18058:	bx	lr
   1805c:	cmp	r1, #0
   18060:	beq	1826c <__assert_fail@plt+0x73b0>
   18064:	eor	ip, r0, r1
   18068:	rsbmi	r1, r1, #0
   1806c:	subs	r2, r1, #1
   18070:	beq	18238 <__assert_fail@plt+0x737c>
   18074:	movs	r3, r0
   18078:	rsbmi	r3, r0, #0
   1807c:	cmp	r3, r1
   18080:	bls	18244 <__assert_fail@plt+0x7388>
   18084:	tst	r1, r2
   18088:	beq	18254 <__assert_fail@plt+0x7398>
   1808c:	clz	r2, r3
   18090:	clz	r0, r1
   18094:	sub	r2, r0, r2
   18098:	rsbs	r2, r2, #31
   1809c:	addne	r2, r2, r2, lsl #1
   180a0:	mov	r0, #0
   180a4:	addne	pc, pc, r2, lsl #2
   180a8:	nop			; (mov r0, r0)
   180ac:	cmp	r3, r1, lsl #31
   180b0:	adc	r0, r0, r0
   180b4:	subcs	r3, r3, r1, lsl #31
   180b8:	cmp	r3, r1, lsl #30
   180bc:	adc	r0, r0, r0
   180c0:	subcs	r3, r3, r1, lsl #30
   180c4:	cmp	r3, r1, lsl #29
   180c8:	adc	r0, r0, r0
   180cc:	subcs	r3, r3, r1, lsl #29
   180d0:	cmp	r3, r1, lsl #28
   180d4:	adc	r0, r0, r0
   180d8:	subcs	r3, r3, r1, lsl #28
   180dc:	cmp	r3, r1, lsl #27
   180e0:	adc	r0, r0, r0
   180e4:	subcs	r3, r3, r1, lsl #27
   180e8:	cmp	r3, r1, lsl #26
   180ec:	adc	r0, r0, r0
   180f0:	subcs	r3, r3, r1, lsl #26
   180f4:	cmp	r3, r1, lsl #25
   180f8:	adc	r0, r0, r0
   180fc:	subcs	r3, r3, r1, lsl #25
   18100:	cmp	r3, r1, lsl #24
   18104:	adc	r0, r0, r0
   18108:	subcs	r3, r3, r1, lsl #24
   1810c:	cmp	r3, r1, lsl #23
   18110:	adc	r0, r0, r0
   18114:	subcs	r3, r3, r1, lsl #23
   18118:	cmp	r3, r1, lsl #22
   1811c:	adc	r0, r0, r0
   18120:	subcs	r3, r3, r1, lsl #22
   18124:	cmp	r3, r1, lsl #21
   18128:	adc	r0, r0, r0
   1812c:	subcs	r3, r3, r1, lsl #21
   18130:	cmp	r3, r1, lsl #20
   18134:	adc	r0, r0, r0
   18138:	subcs	r3, r3, r1, lsl #20
   1813c:	cmp	r3, r1, lsl #19
   18140:	adc	r0, r0, r0
   18144:	subcs	r3, r3, r1, lsl #19
   18148:	cmp	r3, r1, lsl #18
   1814c:	adc	r0, r0, r0
   18150:	subcs	r3, r3, r1, lsl #18
   18154:	cmp	r3, r1, lsl #17
   18158:	adc	r0, r0, r0
   1815c:	subcs	r3, r3, r1, lsl #17
   18160:	cmp	r3, r1, lsl #16
   18164:	adc	r0, r0, r0
   18168:	subcs	r3, r3, r1, lsl #16
   1816c:	cmp	r3, r1, lsl #15
   18170:	adc	r0, r0, r0
   18174:	subcs	r3, r3, r1, lsl #15
   18178:	cmp	r3, r1, lsl #14
   1817c:	adc	r0, r0, r0
   18180:	subcs	r3, r3, r1, lsl #14
   18184:	cmp	r3, r1, lsl #13
   18188:	adc	r0, r0, r0
   1818c:	subcs	r3, r3, r1, lsl #13
   18190:	cmp	r3, r1, lsl #12
   18194:	adc	r0, r0, r0
   18198:	subcs	r3, r3, r1, lsl #12
   1819c:	cmp	r3, r1, lsl #11
   181a0:	adc	r0, r0, r0
   181a4:	subcs	r3, r3, r1, lsl #11
   181a8:	cmp	r3, r1, lsl #10
   181ac:	adc	r0, r0, r0
   181b0:	subcs	r3, r3, r1, lsl #10
   181b4:	cmp	r3, r1, lsl #9
   181b8:	adc	r0, r0, r0
   181bc:	subcs	r3, r3, r1, lsl #9
   181c0:	cmp	r3, r1, lsl #8
   181c4:	adc	r0, r0, r0
   181c8:	subcs	r3, r3, r1, lsl #8
   181cc:	cmp	r3, r1, lsl #7
   181d0:	adc	r0, r0, r0
   181d4:	subcs	r3, r3, r1, lsl #7
   181d8:	cmp	r3, r1, lsl #6
   181dc:	adc	r0, r0, r0
   181e0:	subcs	r3, r3, r1, lsl #6
   181e4:	cmp	r3, r1, lsl #5
   181e8:	adc	r0, r0, r0
   181ec:	subcs	r3, r3, r1, lsl #5
   181f0:	cmp	r3, r1, lsl #4
   181f4:	adc	r0, r0, r0
   181f8:	subcs	r3, r3, r1, lsl #4
   181fc:	cmp	r3, r1, lsl #3
   18200:	adc	r0, r0, r0
   18204:	subcs	r3, r3, r1, lsl #3
   18208:	cmp	r3, r1, lsl #2
   1820c:	adc	r0, r0, r0
   18210:	subcs	r3, r3, r1, lsl #2
   18214:	cmp	r3, r1, lsl #1
   18218:	adc	r0, r0, r0
   1821c:	subcs	r3, r3, r1, lsl #1
   18220:	cmp	r3, r1
   18224:	adc	r0, r0, r0
   18228:	subcs	r3, r3, r1
   1822c:	cmp	ip, #0
   18230:	rsbmi	r0, r0, #0
   18234:	bx	lr
   18238:	teq	ip, r0
   1823c:	rsbmi	r0, r0, #0
   18240:	bx	lr
   18244:	movcc	r0, #0
   18248:	asreq	r0, ip, #31
   1824c:	orreq	r0, r0, #1
   18250:	bx	lr
   18254:	clz	r2, r1
   18258:	rsb	r2, r2, #31
   1825c:	cmp	ip, #0
   18260:	lsr	r0, r3, r2
   18264:	rsbmi	r0, r0, #0
   18268:	bx	lr
   1826c:	cmp	r0, #0
   18270:	mvngt	r0, #-2147483648	; 0x80000000
   18274:	movlt	r0, #-2147483648	; 0x80000000
   18278:	b	1829c <__assert_fail@plt+0x73e0>
   1827c:	cmp	r1, #0
   18280:	beq	1826c <__assert_fail@plt+0x73b0>
   18284:	push	{r0, r1, lr}
   18288:	bl	18064 <__assert_fail@plt+0x71a8>
   1828c:	pop	{r1, r2, lr}
   18290:	mul	r3, r2, r0
   18294:	sub	r1, r1, r3
   18298:	bx	lr
   1829c:	push	{r1, lr}
   182a0:	mov	r0, #8
   182a4:	bl	10c7c <raise@plt>
   182a8:	pop	{r1, pc}
   182ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   182b0:	mov	r7, r0
   182b4:	ldr	r6, [pc, #72]	; 18304 <__assert_fail@plt+0x7448>
   182b8:	ldr	r5, [pc, #72]	; 18308 <__assert_fail@plt+0x744c>
   182bc:	add	r6, pc, r6
   182c0:	add	r5, pc, r5
   182c4:	sub	r6, r6, r5
   182c8:	mov	r8, r1
   182cc:	mov	r9, r2
   182d0:	bl	10c44 <calloc@plt-0x20>
   182d4:	asrs	r6, r6, #2
   182d8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   182dc:	mov	r4, #0
   182e0:	add	r4, r4, #1
   182e4:	ldr	r3, [r5], #4
   182e8:	mov	r2, r9
   182ec:	mov	r1, r8
   182f0:	mov	r0, r7
   182f4:	blx	r3
   182f8:	cmp	r6, r4
   182fc:	bne	182e0 <__assert_fail@plt+0x7424>
   18300:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18304:	andeq	r0, r1, ip, asr #24
   18308:	andeq	r0, r1, r4, asr #24
   1830c:	bx	lr
   18310:	ldr	r3, [pc, #12]	; 18324 <__assert_fail@plt+0x7468>
   18314:	mov	r1, #0
   18318:	add	r3, pc, r3
   1831c:	ldr	r2, [r3]
   18320:	b	10e14 <__cxa_atexit@plt>
   18324:	andeq	r0, r1, r0, asr #27

Disassembly of section .fini:

00018328 <.fini>:
   18328:	push	{r3, lr}
   1832c:	pop	{r3, pc}
