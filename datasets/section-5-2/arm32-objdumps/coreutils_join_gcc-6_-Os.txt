
../repos/coreutils/src/join:     file format elf32-littlearm


Disassembly of section .init:

00010e6c <.init>:
   10e6c:	push	{r3, lr}
   10e70:	bl	11d38 <__assert_fail@plt+0xbdc>
   10e74:	pop	{r3, pc}

Disassembly of section .plt:

00010e78 <fdopen@plt-0x14>:
   10e78:	push	{lr}		; (str lr, [sp, #-4]!)
   10e7c:	ldr	lr, [pc, #4]	; 10e88 <fdopen@plt-0x4>
   10e80:	add	lr, pc, lr
   10e84:	ldr	pc, [lr, #8]!
   10e88:	andeq	r7, r1, r8, ror r1

00010e8c <fdopen@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #94208	; 0x17000
   10e94:	ldr	pc, [ip, #376]!	; 0x178

00010e98 <calloc@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #94208	; 0x17000
   10ea0:	ldr	pc, [ip, #368]!	; 0x170

00010ea4 <fputs_unlocked@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #94208	; 0x17000
   10eac:	ldr	pc, [ip, #360]!	; 0x168

00010eb0 <raise@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #94208	; 0x17000
   10eb8:	ldr	pc, [ip, #352]!	; 0x160

00010ebc <strcmp@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #94208	; 0x17000
   10ec4:	ldr	pc, [ip, #344]!	; 0x158

00010ec8 <posix_fadvise64@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #94208	; 0x17000
   10ed0:	ldr	pc, [ip, #336]!	; 0x150

00010ed4 <fflush@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #94208	; 0x17000
   10edc:	ldr	pc, [ip, #328]!	; 0x148

00010ee0 <free@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #94208	; 0x17000
   10ee8:	ldr	pc, [ip, #320]!	; 0x140

00010eec <_exit@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #94208	; 0x17000
   10ef4:	ldr	pc, [ip, #312]!	; 0x138

00010ef8 <memcpy@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #94208	; 0x17000
   10f00:	ldr	pc, [ip, #304]!	; 0x130

00010f04 <mbsinit@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #94208	; 0x17000
   10f0c:	ldr	pc, [ip, #296]!	; 0x128

00010f10 <fwrite_unlocked@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #94208	; 0x17000
   10f18:	ldr	pc, [ip, #288]!	; 0x120

00010f1c <memcmp@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #94208	; 0x17000
   10f24:	ldr	pc, [ip, #280]!	; 0x118

00010f28 <fputc_unlocked@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #94208	; 0x17000
   10f30:	ldr	pc, [ip, #272]!	; 0x110

00010f34 <getc_unlocked@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #94208	; 0x17000
   10f3c:	ldr	pc, [ip, #264]!	; 0x108

00010f40 <dcgettext@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #94208	; 0x17000
   10f48:	ldr	pc, [ip, #256]!	; 0x100

00010f4c <realloc@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #94208	; 0x17000
   10f54:	ldr	pc, [ip, #248]!	; 0xf8

00010f58 <textdomain@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #94208	; 0x17000
   10f60:	ldr	pc, [ip, #240]!	; 0xf0

00010f64 <iswprint@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #94208	; 0x17000
   10f6c:	ldr	pc, [ip, #232]!	; 0xe8

00010f70 <lseek64@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #94208	; 0x17000
   10f78:	ldr	pc, [ip, #224]!	; 0xe0

00010f7c <__ctype_get_mb_cur_max@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #94208	; 0x17000
   10f84:	ldr	pc, [ip, #216]!	; 0xd8

00010f88 <__fpending@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #94208	; 0x17000
   10f90:	ldr	pc, [ip, #208]!	; 0xd0

00010f94 <ferror_unlocked@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #94208	; 0x17000
   10f9c:	ldr	pc, [ip, #200]!	; 0xc8

00010fa0 <mbrtowc@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #94208	; 0x17000
   10fa8:	ldr	pc, [ip, #192]!	; 0xc0

00010fac <error@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #94208	; 0x17000
   10fb4:	ldr	pc, [ip, #184]!	; 0xb8

00010fb8 <strcoll@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #94208	; 0x17000
   10fc0:	ldr	pc, [ip, #176]!	; 0xb0

00010fc4 <malloc@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #94208	; 0x17000
   10fcc:	ldr	pc, [ip, #168]!	; 0xa8

00010fd0 <__libc_start_main@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #94208	; 0x17000
   10fd8:	ldr	pc, [ip, #160]!	; 0xa0

00010fdc <__freading@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #94208	; 0x17000
   10fe4:	ldr	pc, [ip, #152]!	; 0x98

00010fe8 <__ctype_toupper_loc@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #94208	; 0x17000
   10ff0:	ldr	pc, [ip, #144]!	; 0x90

00010ff4 <__gmon_start__@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #94208	; 0x17000
   10ffc:	ldr	pc, [ip, #136]!	; 0x88

00011000 <getopt_long@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #94208	; 0x17000
   11008:	ldr	pc, [ip, #128]!	; 0x80

0001100c <__ctype_b_loc@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #94208	; 0x17000
   11014:	ldr	pc, [ip, #120]!	; 0x78

00011018 <exit@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #94208	; 0x17000
   11020:	ldr	pc, [ip, #112]!	; 0x70

00011024 <strtoul@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #94208	; 0x17000
   1102c:	ldr	pc, [ip, #104]!	; 0x68

00011030 <strlen@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #94208	; 0x17000
   11038:	ldr	pc, [ip, #96]!	; 0x60

0001103c <strchr@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #94208	; 0x17000
   11044:	ldr	pc, [ip, #88]!	; 0x58

00011048 <__errno_location@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #94208	; 0x17000
   11050:	ldr	pc, [ip, #80]!	; 0x50

00011054 <__cxa_atexit@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #94208	; 0x17000
   1105c:	ldr	pc, [ip, #72]!	; 0x48

00011060 <memset@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #94208	; 0x17000
   11068:	ldr	pc, [ip, #64]!	; 0x40

0001106c <__printf_chk@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #94208	; 0x17000
   11074:	ldr	pc, [ip, #56]!	; 0x38

00011078 <fileno@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #94208	; 0x17000
   11080:	ldr	pc, [ip, #48]!	; 0x30

00011084 <strtoumax@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #94208	; 0x17000
   1108c:	ldr	pc, [ip, #40]!	; 0x28

00011090 <__fprintf_chk@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #94208	; 0x17000
   11098:	ldr	pc, [ip, #32]!

0001109c <memchr@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #94208	; 0x17000
   110a4:	ldr	pc, [ip, #24]!

000110a8 <fclose@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #94208	; 0x17000
   110b0:	ldr	pc, [ip, #16]!

000110b4 <fseeko64@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #94208	; 0x17000
   110bc:	ldr	pc, [ip, #8]!

000110c0 <fcntl64@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #94208	; 0x17000
   110c8:	ldr	pc, [ip, #0]!

000110cc <setlocale@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #90112	; 0x16000
   110d4:	ldr	pc, [ip, #4088]!	; 0xff8

000110d8 <strrchr@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #90112	; 0x16000
   110e0:	ldr	pc, [ip, #4080]!	; 0xff0

000110e4 <nl_langinfo@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #90112	; 0x16000
   110ec:	ldr	pc, [ip, #4072]!	; 0xfe8

000110f0 <fopen64@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #90112	; 0x16000
   110f8:	ldr	pc, [ip, #4064]!	; 0xfe0

000110fc <strpbrk@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #90112	; 0x16000
   11104:	ldr	pc, [ip, #4056]!	; 0xfd8

00011108 <bindtextdomain@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #90112	; 0x16000
   11110:	ldr	pc, [ip, #4048]!	; 0xfd0

00011114 <fputs@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #90112	; 0x16000
   1111c:	ldr	pc, [ip, #4040]!	; 0xfc8

00011120 <strncmp@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #90112	; 0x16000
   11128:	ldr	pc, [ip, #4032]!	; 0xfc0

0001112c <abort@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #90112	; 0x16000
   11134:	ldr	pc, [ip, #4024]!	; 0xfb8

00011138 <feof_unlocked@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #90112	; 0x16000
   11140:	ldr	pc, [ip, #4016]!	; 0xfb0

00011144 <close@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #90112	; 0x16000
   1114c:	ldr	pc, [ip, #4008]!	; 0xfa8

00011150 <putchar_unlocked@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #90112	; 0x16000
   11158:	ldr	pc, [ip, #4000]!	; 0xfa0

0001115c <__assert_fail@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #90112	; 0x16000
   11164:	ldr	pc, [ip, #3992]!	; 0xf98

Disassembly of section .text:

00011168 <.text>:
   11168:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1116c:	sub	sp, sp, #84	; 0x54
   11170:	mov	r5, #0
   11174:	mov	r8, r0
   11178:	ldr	r0, [r1]
   1117c:	mov	r7, r1
   11180:	str	r5, [sp, #28]
   11184:	str	r5, [sp, #48]	; 0x30
   11188:	str	r5, [sp, #52]	; 0x34
   1118c:	str	r5, [sp, #32]
   11190:	bl	13104 <__assert_fail@plt+0x1fa8>
   11194:	ldr	r1, [pc, #2776]	; 11c74 <__assert_fail@plt+0xb18>
   11198:	mov	r0, #6
   1119c:	bl	110cc <setlocale@plt>
   111a0:	ldr	r1, [pc, #2768]	; 11c78 <__assert_fail@plt+0xb1c>
   111a4:	ldr	r0, [pc, #2768]	; 11c7c <__assert_fail@plt+0xb20>
   111a8:	bl	11108 <bindtextdomain@plt>
   111ac:	ldr	r0, [pc, #2760]	; 11c7c <__assert_fail@plt+0xb20>
   111b0:	bl	10f58 <textdomain@plt>
   111b4:	mov	r0, #3
   111b8:	bl	12f64 <__assert_fail@plt+0x1e08>
   111bc:	ldr	r4, [pc, #2748]	; 11c80 <__assert_fail@plt+0xb24>
   111c0:	strb	r0, [r4, #9]
   111c4:	ldr	r0, [pc, #2744]	; 11c84 <__assert_fail@plt+0xb28>
   111c8:	bl	16634 <__assert_fail@plt+0x54d8>
   111cc:	ldr	r0, [pc, #2740]	; 11c88 <__assert_fail@plt+0xb2c>
   111d0:	bl	16634 <__assert_fail@plt+0x54d8>
   111d4:	strb	r5, [r4, #44]	; 0x2c
   111d8:	strb	r5, [r4, #46]	; 0x2e
   111dc:	strb	r5, [r4, #45]	; 0x2d
   111e0:	str	r5, [r4, #40]	; 0x28
   111e4:	ldr	r5, [pc, #2720]	; 11c8c <__assert_fail@plt+0xb30>
   111e8:	mov	r3, #1
   111ec:	strb	r3, [r4, #108]	; 0x6c
   111f0:	mov	r6, #0
   111f4:	str	r6, [sp]
   111f8:	ldr	r3, [pc, #2704]	; 11c90 <__assert_fail@plt+0xb34>
   111fc:	ldr	r2, [pc, #2704]	; 11c94 <__assert_fail@plt+0xb38>
   11200:	mov	r1, r7
   11204:	mov	r0, r8
   11208:	bl	11000 <getopt_long@plt>
   1120c:	cmn	r0, #1
   11210:	bne	11260 <__assert_fail@plt+0x104>
   11214:	ldr	r5, [pc, #2684]	; 11c98 <__assert_fail@plt+0xb3c>
   11218:	str	r6, [sp, #28]
   1121c:	ldr	r0, [r5]
   11220:	cmp	r8, r0
   11224:	bgt	115b8 <__assert_fail@plt+0x45c>
   11228:	ldr	r5, [sp, #32]
   1122c:	cmp	r5, #2
   11230:	beq	1161c <__assert_fail@plt+0x4c0>
   11234:	cmp	r5, #0
   11238:	mov	r2, #5
   1123c:	bne	115e8 <__assert_fail@plt+0x48c>
   11240:	ldr	r1, [pc, #2644]	; 11c9c <__assert_fail@plt+0xb40>
   11244:	mov	r0, r5
   11248:	bl	10f40 <dcgettext@plt>
   1124c:	mov	r1, r5
   11250:	mov	r2, r0
   11254:	mov	r0, r5
   11258:	bl	10fac <error@plt>
   1125c:	b	11390 <__assert_fail@plt+0x234>
   11260:	cmp	r0, #105	; 0x69
   11264:	str	r6, [sp, #24]
   11268:	beq	11484 <__assert_fail@plt+0x328>
   1126c:	bgt	112f0 <__assert_fail@plt+0x194>
   11270:	cmp	r0, #49	; 0x31
   11274:	beq	11490 <__assert_fail@plt+0x334>
   11278:	bgt	112c4 <__assert_fail@plt+0x168>
   1127c:	cmn	r0, #2
   11280:	beq	115b0 <__assert_fail@plt+0x454>
   11284:	cmp	r0, #1
   11288:	beq	11588 <__assert_fail@plt+0x42c>
   1128c:	cmn	r0, #3
   11290:	bne	11390 <__assert_fail@plt+0x234>
   11294:	ldr	r3, [pc, #2564]	; 11ca0 <__assert_fail@plt+0xb44>
   11298:	ldr	r0, [pc, #2564]	; 11ca4 <__assert_fail@plt+0xb48>
   1129c:	str	r3, [sp]
   112a0:	ldr	r3, [pc, #2560]	; 11ca8 <__assert_fail@plt+0xb4c>
   112a4:	str	r6, [sp, #4]
   112a8:	ldr	r2, [pc, #2556]	; 11cac <__assert_fail@plt+0xb50>
   112ac:	ldr	r0, [r0]
   112b0:	ldr	r3, [r3]
   112b4:	ldr	r1, [pc, #2548]	; 11cb0 <__assert_fail@plt+0xb54>
   112b8:	bl	14c14 <__assert_fail@plt+0x3ab8>
   112bc:	mov	r0, r6
   112c0:	bl	11018 <exit@plt>
   112c4:	cmp	r0, #97	; 0x61
   112c8:	beq	113c0 <__assert_fail@plt+0x264>
   112cc:	cmp	r0, #101	; 0x65
   112d0:	beq	11440 <__assert_fail@plt+0x2e4>
   112d4:	cmp	r0, #50	; 0x32
   112d8:	bne	11390 <__assert_fail@plt+0x234>
   112dc:	ldr	r0, [r5]
   112e0:	bl	12424 <__assert_fail@plt+0x12c8>
   112e4:	mov	r1, r0
   112e8:	ldr	r0, [pc, #2500]	; 11cb4 <__assert_fail@plt+0xb58>
   112ec:	b	114a0 <__assert_fail@plt+0x344>
   112f0:	cmp	r0, #118	; 0x76
   112f4:	beq	113bc <__assert_fail@plt+0x260>
   112f8:	bgt	1137c <__assert_fail@plt+0x220>
   112fc:	cmp	r0, #111	; 0x6f
   11300:	beq	114c8 <__assert_fail@plt+0x36c>
   11304:	cmp	r0, #116	; 0x74
   11308:	beq	114f8 <__assert_fail@plt+0x39c>
   1130c:	cmp	r0, #106	; 0x6a
   11310:	bne	11390 <__assert_fail@plt+0x234>
   11314:	ldr	r0, [r5]
   11318:	ldrb	r3, [r0]
   1131c:	sub	r2, r3, #49	; 0x31
   11320:	cmp	r2, #1
   11324:	bhi	114a8 <__assert_fail@plt+0x34c>
   11328:	ldrb	r2, [r0, #1]
   1132c:	cmp	r2, #0
   11330:	bne	114a8 <__assert_fail@plt+0x34c>
   11334:	ldr	r2, [pc, #2396]	; 11c98 <__assert_fail@plt+0xb3c>
   11338:	ldr	r2, [r2]
   1133c:	sub	r2, r2, #-1073741823	; 0xc0000001
   11340:	ldr	r2, [r7, r2, lsl #2]
   11344:	add	r2, r2, #2
   11348:	cmp	r0, r2
   1134c:	bne	114a8 <__assert_fail@plt+0x34c>
   11350:	sub	r3, r3, #50	; 0x32
   11354:	clz	r3, r3
   11358:	lsr	r3, r3, #5
   1135c:	add	r2, sp, #80	; 0x50
   11360:	add	r1, r2, r3, lsl #2
   11364:	add	r3, r3, #1
   11368:	ldr	r2, [r1, #-32]	; 0xffffffe0
   1136c:	add	r2, r2, #1
   11370:	str	r2, [r1, #-32]	; 0xffffffe0
   11374:	str	r3, [sp, #24]
   11378:	b	11434 <__assert_fail@plt+0x2d8>
   1137c:	cmp	r0, #256	; 0x100
   11380:	beq	11580 <__assert_fail@plt+0x424>
   11384:	bgt	11398 <__assert_fail@plt+0x23c>
   11388:	cmp	r0, #122	; 0x7a
   1138c:	beq	11568 <__assert_fail@plt+0x40c>
   11390:	mov	r0, #1
   11394:	b	115b4 <__assert_fail@plt+0x458>
   11398:	ldr	r3, [pc, #2328]	; 11cb8 <__assert_fail@plt+0xb5c>
   1139c:	cmp	r0, r3
   113a0:	beq	11574 <__assert_fail@plt+0x418>
   113a4:	add	r3, r3, #1
   113a8:	cmp	r0, r3
   113ac:	bne	11390 <__assert_fail@plt+0x234>
   113b0:	mov	r3, #1
   113b4:	strb	r3, [r4, #111]	; 0x6f
   113b8:	b	11434 <__assert_fail@plt+0x2d8>
   113bc:	strb	r6, [r4, #108]	; 0x6c
   113c0:	ldr	r3, [pc, #2220]	; 11c74 <__assert_fail@plt+0xb18>
   113c4:	mov	r2, #10
   113c8:	str	r3, [sp]
   113cc:	mov	r1, #0
   113d0:	add	r3, sp, #68	; 0x44
   113d4:	ldr	r0, [r5]
   113d8:	bl	153b4 <__assert_fail@plt+0x4258>
   113dc:	cmp	r0, #0
   113e0:	bne	113f4 <__assert_fail@plt+0x298>
   113e4:	ldr	r3, [sp, #68]	; 0x44
   113e8:	sub	r2, r3, #1
   113ec:	cmp	r2, #1
   113f0:	bls	11424 <__assert_fail@plt+0x2c8>
   113f4:	ldr	r1, [pc, #2240]	; 11cbc <__assert_fail@plt+0xb60>
   113f8:	mov	r2, #5
   113fc:	mov	r0, #0
   11400:	bl	10f40 <dcgettext@plt>
   11404:	mov	r4, r0
   11408:	ldr	r0, [r5]
   1140c:	bl	14734 <__assert_fail@plt+0x35d8>
   11410:	mov	r2, r4
   11414:	mov	r1, #0
   11418:	mov	r3, r0
   1141c:	mov	r0, #1
   11420:	bl	10fac <error@plt>
   11424:	cmp	r3, #1
   11428:	movne	r3, #1
   1142c:	strbeq	r3, [r4, #109]	; 0x6d
   11430:	strbne	r3, [r4, #110]	; 0x6e
   11434:	ldr	r3, [sp, #24]
   11438:	str	r3, [sp, #28]
   1143c:	b	111f0 <__assert_fail@plt+0x94>
   11440:	ldr	r0, [r4, #56]	; 0x38
   11444:	cmp	r0, #0
   11448:	beq	11478 <__assert_fail@plt+0x31c>
   1144c:	ldr	r1, [r5]
   11450:	bl	10ebc <strcmp@plt>
   11454:	cmp	r0, #0
   11458:	beq	11478 <__assert_fail@plt+0x31c>
   1145c:	ldr	r1, [pc, #2140]	; 11cc0 <__assert_fail@plt+0xb64>
   11460:	mov	r2, #5
   11464:	mov	r0, #0
   11468:	bl	10f40 <dcgettext@plt>
   1146c:	mov	r1, #0
   11470:	mov	r2, r0
   11474:	b	11758 <__assert_fail@plt+0x5fc>
   11478:	ldr	r3, [r5]
   1147c:	str	r3, [r4, #56]	; 0x38
   11480:	b	11434 <__assert_fail@plt+0x2d8>
   11484:	mov	r3, #1
   11488:	strb	r3, [r4, #8]
   1148c:	b	11434 <__assert_fail@plt+0x2d8>
   11490:	ldr	r0, [r5]
   11494:	bl	12424 <__assert_fail@plt+0x12c8>
   11498:	mov	r1, r0
   1149c:	ldr	r0, [pc, #2080]	; 11cc4 <__assert_fail@plt+0xb68>
   114a0:	bl	11e24 <__assert_fail@plt+0xcc8>
   114a4:	b	11434 <__assert_fail@plt+0x2d8>
   114a8:	bl	12424 <__assert_fail@plt+0x12c8>
   114ac:	ldr	r6, [pc, #2068]	; 11cc8 <__assert_fail@plt+0xb6c>
   114b0:	mov	r1, r0
   114b4:	add	r0, r6, #8
   114b8:	bl	11e24 <__assert_fail@plt+0xcc8>
   114bc:	ldr	r1, [r6, #8]
   114c0:	add	r0, r6, #12
   114c4:	b	114a0 <__assert_fail@plt+0x344>
   114c8:	ldr	r6, [r5]
   114cc:	ldr	r1, [pc, #2040]	; 11ccc <__assert_fail@plt+0xb70>
   114d0:	mov	r0, r6
   114d4:	bl	10ebc <strcmp@plt>
   114d8:	cmp	r0, #0
   114dc:	moveq	r3, #1
   114e0:	strbeq	r3, [r4, #60]	; 0x3c
   114e4:	beq	11434 <__assert_fail@plt+0x2d8>
   114e8:	mov	r0, r6
   114ec:	bl	124cc <__assert_fail@plt+0x1370>
   114f0:	mov	r3, #3
   114f4:	b	11374 <__assert_fail@plt+0x218>
   114f8:	ldr	r0, [r5]
   114fc:	ldrb	r3, [r0]
   11500:	cmp	r3, #0
   11504:	beq	11530 <__assert_fail@plt+0x3d4>
   11508:	ldrb	r2, [r0, #1]
   1150c:	cmp	r2, #0
   11510:	beq	11534 <__assert_fail@plt+0x3d8>
   11514:	ldr	r1, [pc, #1972]	; 11cd0 <__assert_fail@plt+0xb74>
   11518:	bl	10ebc <strcmp@plt>
   1151c:	cmp	r0, #0
   11520:	beq	11558 <__assert_fail@plt+0x3fc>
   11524:	mov	r2, #5
   11528:	ldr	r1, [pc, #1956]	; 11cd4 <__assert_fail@plt+0xb78>
   1152c:	b	113fc <__assert_fail@plt+0x2a0>
   11530:	mov	r3, #10
   11534:	ldr	r2, [pc, #1932]	; 11cc8 <__assert_fail@plt+0xb6c>
   11538:	ldr	r1, [r2, #4]
   1153c:	cmp	r1, #0
   11540:	blt	11560 <__assert_fail@plt+0x404>
   11544:	cmp	r1, r3
   11548:	beq	11560 <__assert_fail@plt+0x404>
   1154c:	mov	r2, #5
   11550:	ldr	r1, [pc, #1920]	; 11cd8 <__assert_fail@plt+0xb7c>
   11554:	b	11464 <__assert_fail@plt+0x308>
   11558:	mov	r3, #0
   1155c:	b	11534 <__assert_fail@plt+0x3d8>
   11560:	str	r3, [r2, #4]
   11564:	b	11434 <__assert_fail@plt+0x2d8>
   11568:	ldr	r3, [pc, #1880]	; 11cc8 <__assert_fail@plt+0xb6c>
   1156c:	strb	r6, [r3]
   11570:	b	11434 <__assert_fail@plt+0x2d8>
   11574:	mov	r3, #2
   11578:	str	r3, [r4, #40]	; 0x28
   1157c:	b	11434 <__assert_fail@plt+0x2d8>
   11580:	mov	r3, #1
   11584:	b	11578 <__assert_fail@plt+0x41c>
   11588:	add	r3, sp, #24
   1158c:	str	r3, [sp, #4]
   11590:	add	r3, sp, #28
   11594:	str	r3, [sp]
   11598:	add	r2, sp, #48	; 0x30
   1159c:	add	r3, sp, #32
   115a0:	add	r1, sp, #40	; 0x28
   115a4:	ldr	r0, [r5]
   115a8:	bl	12a88 <__assert_fail@plt+0x192c>
   115ac:	b	11434 <__assert_fail@plt+0x2d8>
   115b0:	mov	r0, r6
   115b4:	bl	127bc <__assert_fail@plt+0x1660>
   115b8:	add	r3, r0, #1
   115bc:	str	r3, [r5]
   115c0:	add	r3, sp, #24
   115c4:	str	r3, [sp, #4]
   115c8:	add	r3, sp, #28
   115cc:	str	r3, [sp]
   115d0:	add	r2, sp, #48	; 0x30
   115d4:	add	r3, sp, #32
   115d8:	add	r1, sp, #40	; 0x28
   115dc:	ldr	r0, [r7, r0, lsl #2]
   115e0:	bl	12a88 <__assert_fail@plt+0x192c>
   115e4:	b	1121c <__assert_fail@plt+0xc0>
   115e8:	ldr	r1, [pc, #1772]	; 11cdc <__assert_fail@plt+0xb80>
   115ec:	mov	r0, #0
   115f0:	bl	10f40 <dcgettext@plt>
   115f4:	sub	r8, r8, #-1073741823	; 0xc0000001
   115f8:	mov	r4, r0
   115fc:	ldr	r0, [r7, r8, lsl #2]
   11600:	bl	14734 <__assert_fail@plt+0x35d8>
   11604:	mov	r1, #0
   11608:	mov	r2, r4
   1160c:	mov	r3, r0
   11610:	mov	r0, r1
   11614:	bl	10fac <error@plt>
   11618:	b	11390 <__assert_fail@plt+0x234>
   1161c:	ldr	r3, [sp, #48]	; 0x30
   11620:	cmp	r3, #0
   11624:	beq	11640 <__assert_fail@plt+0x4e4>
   11628:	mov	r1, #0
   1162c:	ldr	r0, [pc, #1680]	; 11cc4 <__assert_fail@plt+0xb68>
   11630:	bl	11e24 <__assert_fail@plt+0xcc8>
   11634:	mov	r1, #0
   11638:	ldr	r0, [pc, #1652]	; 11cb4 <__assert_fail@plt+0xb58>
   1163c:	bl	11e24 <__assert_fail@plt+0xcc8>
   11640:	ldr	r3, [sp, #52]	; 0x34
   11644:	cmp	r3, #0
   11648:	beq	11664 <__assert_fail@plt+0x508>
   1164c:	mov	r1, #1
   11650:	ldr	r0, [pc, #1644]	; 11cc4 <__assert_fail@plt+0xb68>
   11654:	bl	11e24 <__assert_fail@plt+0xcc8>
   11658:	mov	r1, #1
   1165c:	ldr	r0, [pc, #1616]	; 11cb4 <__assert_fail@plt+0xb58>
   11660:	bl	11e24 <__assert_fail@plt+0xcc8>
   11664:	ldr	r5, [pc, #1628]	; 11cc8 <__assert_fail@plt+0xb6c>
   11668:	ldr	r6, [r4, #48]	; 0x30
   1166c:	ldr	r1, [pc, #1644]	; 11ce0 <__assert_fail@plt+0xb84>
   11670:	ldr	r3, [r5, #8]
   11674:	mov	r0, r6
   11678:	cmn	r3, #1
   1167c:	moveq	r3, #0
   11680:	streq	r3, [r5, #8]
   11684:	ldr	r3, [r5, #12]
   11688:	cmn	r3, #1
   1168c:	moveq	r3, #0
   11690:	streq	r3, [r5, #12]
   11694:	bl	10ebc <strcmp@plt>
   11698:	cmp	r0, #0
   1169c:	ldreq	r3, [pc, #1600]	; 11ce4 <__assert_fail@plt+0xb88>
   116a0:	ldreq	r7, [r3]
   116a4:	beq	116b8 <__assert_fail@plt+0x55c>
   116a8:	ldr	r1, [pc, #1592]	; 11ce8 <__assert_fail@plt+0xb8c>
   116ac:	mov	r0, r6
   116b0:	bl	12de8 <__assert_fail@plt+0x1c8c>
   116b4:	mov	r7, r0
   116b8:	cmp	r7, #0
   116bc:	bne	116e8 <__assert_fail@plt+0x58c>
   116c0:	bl	11048 <__errno_location@plt>
   116c4:	ldr	r2, [r4, #48]	; 0x30
   116c8:	ldr	r5, [r0]
   116cc:	mov	r1, #3
   116d0:	mov	r0, #0
   116d4:	bl	145f4 <__assert_fail@plt+0x3498>
   116d8:	ldr	r2, [pc, #1548]	; 11cec <__assert_fail@plt+0xb90>
   116dc:	mov	r1, r5
   116e0:	mov	r3, r0
   116e4:	b	1141c <__assert_fail@plt+0x2c0>
   116e8:	ldr	r6, [r4, #52]	; 0x34
   116ec:	ldr	r1, [pc, #1516]	; 11ce0 <__assert_fail@plt+0xb84>
   116f0:	mov	r0, r6
   116f4:	bl	10ebc <strcmp@plt>
   116f8:	cmp	r0, #0
   116fc:	ldreq	r3, [pc, #1504]	; 11ce4 <__assert_fail@plt+0xb88>
   11700:	ldreq	r6, [r3]
   11704:	beq	11718 <__assert_fail@plt+0x5bc>
   11708:	mov	r0, r6
   1170c:	ldr	r1, [pc, #1492]	; 11ce8 <__assert_fail@plt+0xb8c>
   11710:	bl	12de8 <__assert_fail@plt+0x1c8c>
   11714:	mov	r6, r0
   11718:	cmp	r6, #0
   1171c:	bne	11730 <__assert_fail@plt+0x5d4>
   11720:	bl	11048 <__errno_location@plt>
   11724:	ldr	r2, [r4, #52]	; 0x34
   11728:	ldr	r5, [r0]
   1172c:	b	116cc <__assert_fail@plt+0x570>
   11730:	cmp	r7, r6
   11734:	bne	11760 <__assert_fail@plt+0x604>
   11738:	bl	11048 <__errno_location@plt>
   1173c:	mov	r2, #5
   11740:	ldr	r1, [pc, #1448]	; 11cf0 <__assert_fail@plt+0xb94>
   11744:	ldr	r4, [r0]
   11748:	mov	r0, #0
   1174c:	bl	10f40 <dcgettext@plt>
   11750:	mov	r1, r4
   11754:	mov	r2, r0
   11758:	mov	r0, #1
   1175c:	bl	10fac <error@plt>
   11760:	mov	r1, #2
   11764:	mov	r0, r7
   11768:	bl	12cc0 <__assert_fail@plt+0x1b64>
   1176c:	mov	r1, #2
   11770:	mov	r0, r6
   11774:	bl	12cc0 <__assert_fail@plt+0x1b64>
   11778:	mov	r8, #0
   1177c:	mov	r2, #1
   11780:	add	r1, sp, #56	; 0x38
   11784:	mov	r0, r7
   11788:	str	r8, [sp, #56]	; 0x38
   1178c:	str	r8, [sp, #60]	; 0x3c
   11790:	str	r8, [sp, #64]	; 0x40
   11794:	bl	123a0 <__assert_fail@plt+0x1244>
   11798:	mov	r2, #2
   1179c:	add	r1, sp, #68	; 0x44
   117a0:	mov	r0, r6
   117a4:	str	r8, [sp, #68]	; 0x44
   117a8:	str	r8, [sp, #72]	; 0x48
   117ac:	str	r8, [sp, #76]	; 0x4c
   117b0:	bl	123a0 <__assert_fail@plt+0x1244>
   117b4:	ldrb	r3, [r4, #60]	; 0x3c
   117b8:	cmp	r3, r8
   117bc:	ldr	r3, [sp, #56]	; 0x38
   117c0:	beq	117f4 <__assert_fail@plt+0x698>
   117c4:	cmp	r3, r8
   117c8:	mov	r2, r3
   117cc:	ldrne	r2, [sp, #64]	; 0x40
   117d0:	ldrne	r2, [r2]
   117d4:	ldrne	r2, [r2, #12]
   117d8:	str	r2, [r4, #100]	; 0x64
   117dc:	ldr	r2, [sp, #68]	; 0x44
   117e0:	cmp	r2, #0
   117e4:	ldrne	r2, [sp, #76]	; 0x4c
   117e8:	ldrne	r2, [r2]
   117ec:	ldrne	r2, [r2, #12]
   117f0:	str	r2, [r4, #104]	; 0x68
   117f4:	ldrb	r2, [r4, #111]	; 0x6f
   117f8:	cmp	r2, #0
   117fc:	beq	11814 <__assert_fail@plt+0x6b8>
   11800:	cmp	r3, #0
   11804:	ldr	r3, [sp, #68]	; 0x44
   11808:	bne	118e8 <__assert_fail@plt+0x78c>
   1180c:	cmp	r3, #0
   11810:	bne	11958 <__assert_fail@plt+0x7fc>
   11814:	mov	r8, #1
   11818:	mov	r9, #0
   1181c:	ldr	r1, [sp, #56]	; 0x38
   11820:	cmp	r1, #0
   11824:	beq	11834 <__assert_fail@plt+0x6d8>
   11828:	ldr	r3, [sp, #68]	; 0x44
   1182c:	cmp	r3, #0
   11830:	bne	11960 <__assert_fail@plt+0x804>
   11834:	ldr	r3, [r4, #40]	; 0x28
   11838:	mov	r5, #0
   1183c:	cmp	r3, #2
   11840:	str	r5, [sp, #36]	; 0x24
   11844:	beq	1185c <__assert_fail@plt+0x700>
   11848:	ldrb	r3, [r4, #45]	; 0x2d
   1184c:	cmp	r3, r5
   11850:	moveq	r5, #1
   11854:	ldrbne	r5, [r4, #46]	; 0x2e
   11858:	eorne	r5, r5, #1
   1185c:	ldrb	r2, [r4, #109]	; 0x6d
   11860:	orr	r3, r2, r5
   11864:	cmp	r1, #0
   11868:	moveq	r3, #0
   1186c:	andne	r3, r3, #1
   11870:	cmp	r3, #0
   11874:	bne	11b68 <__assert_fail@plt+0xa0c>
   11878:	ldrb	r3, [r4, #110]	; 0x6e
   1187c:	orrs	r2, r5, r3
   11880:	bne	11be4 <__assert_fail@plt+0xa88>
   11884:	ldr	r0, [sp, #36]	; 0x24
   11888:	bl	11e78 <__assert_fail@plt+0xd1c>
   1188c:	ldr	r0, [sp, #36]	; 0x24
   11890:	bl	12e7c <__assert_fail@plt+0x1d20>
   11894:	add	r0, sp, #56	; 0x38
   11898:	bl	11ee4 <__assert_fail@plt+0xd88>
   1189c:	add	r0, sp, #68	; 0x44
   118a0:	bl	11ee4 <__assert_fail@plt+0xd88>
   118a4:	mov	r0, r7
   118a8:	bl	12cf0 <__assert_fail@plt+0x1b94>
   118ac:	subs	r7, r0, #0
   118b0:	bne	116c0 <__assert_fail@plt+0x564>
   118b4:	mov	r0, r6
   118b8:	bl	12cf0 <__assert_fail@plt+0x1b94>
   118bc:	cmp	r0, #0
   118c0:	bne	11720 <__assert_fail@plt+0x5c4>
   118c4:	ldrb	r3, [r4, #45]	; 0x2d
   118c8:	cmp	r3, #0
   118cc:	bne	118dc <__assert_fail@plt+0x780>
   118d0:	ldrb	r3, [r4, #46]	; 0x2e
   118d4:	cmp	r3, #0
   118d8:	beq	11c6c <__assert_fail@plt+0xb10>
   118dc:	mov	r2, #5
   118e0:	ldr	r1, [pc, #1036]	; 11cf4 <__assert_fail@plt+0xb98>
   118e4:	b	11464 <__assert_fail@plt+0x308>
   118e8:	ldr	r2, [sp, #64]	; 0x40
   118ec:	ldr	r0, [r2]
   118f0:	cmp	r3, #0
   118f4:	ldrne	r3, [sp, #76]	; 0x4c
   118f8:	ldreq	r1, [pc, #1016]	; 11cf8 <__assert_fail@plt+0xb9c>
   118fc:	ldrne	r1, [r3]
   11900:	bl	126ec <__assert_fail@plt+0x1590>
   11904:	ldr	r2, [sp, #56]	; 0x38
   11908:	mov	r3, #0
   1190c:	cmp	r2, r3
   11910:	str	r3, [r4, #12]
   11914:	str	r3, [r4, #16]
   11918:	beq	11930 <__assert_fail@plt+0x7d4>
   1191c:	mov	r2, #1
   11920:	add	r1, sp, #56	; 0x38
   11924:	mov	r0, r7
   11928:	str	r3, [sp, #56]	; 0x38
   1192c:	bl	123a0 <__assert_fail@plt+0x1244>
   11930:	ldr	r3, [sp, #68]	; 0x44
   11934:	cmp	r3, #0
   11938:	beq	11814 <__assert_fail@plt+0x6b8>
   1193c:	mov	r3, #0
   11940:	mov	r2, #2
   11944:	add	r1, sp, #68	; 0x44
   11948:	mov	r0, r6
   1194c:	str	r3, [sp, #68]	; 0x44
   11950:	bl	123a0 <__assert_fail@plt+0x1244>
   11954:	b	11814 <__assert_fail@plt+0x6b8>
   11958:	ldr	r0, [pc, #920]	; 11cf8 <__assert_fail@plt+0xb9c>
   1195c:	b	118f0 <__assert_fail@plt+0x794>
   11960:	ldr	r1, [sp, #76]	; 0x4c
   11964:	ldr	r0, [sp, #64]	; 0x40
   11968:	ldr	r3, [r5, #12]
   1196c:	ldr	r2, [r5, #8]
   11970:	ldr	r1, [r1]
   11974:	ldr	r0, [r0]
   11978:	bl	11f7c <__assert_fail@plt+0xe20>
   1197c:	cmp	r0, #0
   11980:	bge	119bc <__assert_fail@plt+0x860>
   11984:	ldrb	r3, [r4, #109]	; 0x6d
   11988:	cmp	r3, #0
   1198c:	beq	119a0 <__assert_fail@plt+0x844>
   11990:	ldr	r3, [sp, #64]	; 0x40
   11994:	ldr	r1, [pc, #860]	; 11cf8 <__assert_fail@plt+0xb9c>
   11998:	ldr	r0, [r3]
   1199c:	bl	126ec <__assert_fail@plt+0x1590>
   119a0:	mov	r2, r8
   119a4:	add	r1, sp, #56	; 0x38
   119a8:	mov	r0, r7
   119ac:	str	r9, [sp, #56]	; 0x38
   119b0:	bl	123a0 <__assert_fail@plt+0x1244>
   119b4:	strb	r8, [r4, #44]	; 0x2c
   119b8:	b	1181c <__assert_fail@plt+0x6c0>
   119bc:	beq	119f0 <__assert_fail@plt+0x894>
   119c0:	ldrb	r3, [r4, #110]	; 0x6e
   119c4:	cmp	r3, #0
   119c8:	beq	119dc <__assert_fail@plt+0x880>
   119cc:	ldr	r3, [sp, #76]	; 0x4c
   119d0:	ldr	r0, [pc, #800]	; 11cf8 <__assert_fail@plt+0xb9c>
   119d4:	ldr	r1, [r3]
   119d8:	bl	126ec <__assert_fail@plt+0x1590>
   119dc:	str	r9, [sp, #68]	; 0x44
   119e0:	mov	r2, #2
   119e4:	add	r1, sp, #68	; 0x44
   119e8:	mov	r0, r6
   119ec:	b	119b0 <__assert_fail@plt+0x854>
   119f0:	mov	r2, r8
   119f4:	add	r1, sp, #56	; 0x38
   119f8:	mov	r0, r7
   119fc:	bl	123a0 <__assert_fail@plt+0x1244>
   11a00:	ldr	r3, [sp, #56]	; 0x38
   11a04:	cmp	r0, #0
   11a08:	bne	11aa8 <__assert_fail@plt+0x94c>
   11a0c:	mov	fp, r8
   11a10:	add	r3, r3, #1
   11a14:	str	r3, [sp, #56]	; 0x38
   11a18:	mov	r2, #2
   11a1c:	add	r1, sp, #68	; 0x44
   11a20:	mov	r0, r6
   11a24:	bl	123a0 <__assert_fail@plt+0x1244>
   11a28:	ldr	r3, [sp, #68]	; 0x44
   11a2c:	cmp	r0, #0
   11a30:	bne	11ad8 <__assert_fail@plt+0x97c>
   11a34:	mov	r2, r8
   11a38:	add	r3, r3, #1
   11a3c:	str	r3, [sp, #68]	; 0x44
   11a40:	ldrb	r3, [r4, #108]	; 0x6c
   11a44:	cmp	r3, #0
   11a48:	movne	r3, #0
   11a4c:	bne	11b48 <__assert_fail@plt+0x9ec>
   11a50:	cmp	fp, #0
   11a54:	strne	r9, [sp, #56]	; 0x38
   11a58:	bne	11a7c <__assert_fail@plt+0x920>
   11a5c:	ldr	r1, [sp, #56]	; 0x38
   11a60:	ldr	r3, [sp, #64]	; 0x40
   11a64:	sub	r1, r1, #-1073741823	; 0xc0000001
   11a68:	ldr	r0, [r3]
   11a6c:	ldr	ip, [r3, r1, lsl #2]
   11a70:	str	ip, [r3]
   11a74:	str	r0, [r3, r1, lsl #2]
   11a78:	str	r8, [sp, #56]	; 0x38
   11a7c:	cmp	r2, #0
   11a80:	strne	r9, [sp, #68]	; 0x44
   11a84:	ldreq	r2, [sp, #68]	; 0x44
   11a88:	ldreq	r3, [sp, #76]	; 0x4c
   11a8c:	subeq	r2, r2, #-1073741823	; 0xc0000001
   11a90:	ldreq	r1, [r3]
   11a94:	ldreq	r0, [r3, r2, lsl #2]
   11a98:	streq	r0, [r3]
   11a9c:	streq	r1, [r3, r2, lsl #2]
   11aa0:	streq	r8, [sp, #68]	; 0x44
   11aa4:	b	1181c <__assert_fail@plt+0x6c0>
   11aa8:	ldr	r1, [sp, #76]	; 0x4c
   11aac:	ldr	ip, [sp, #64]	; 0x40
   11ab0:	sub	r0, r3, #-1073741823	; 0xc0000001
   11ab4:	ldr	r2, [r5, #8]
   11ab8:	ldr	r3, [r5, #12]
   11abc:	ldr	r1, [r1]
   11ac0:	ldr	r0, [ip, r0, lsl #2]
   11ac4:	bl	11f7c <__assert_fail@plt+0xe20>
   11ac8:	cmp	r0, #0
   11acc:	beq	119f0 <__assert_fail@plt+0x894>
   11ad0:	mov	fp, r9
   11ad4:	b	11a18 <__assert_fail@plt+0x8bc>
   11ad8:	ldr	r0, [sp, #76]	; 0x4c
   11adc:	sub	r1, r3, #-1073741823	; 0xc0000001
   11ae0:	ldr	r2, [r5, #8]
   11ae4:	ldr	r1, [r0, r1, lsl #2]
   11ae8:	ldr	r0, [sp, #64]	; 0x40
   11aec:	ldr	r3, [r5, #12]
   11af0:	ldr	r0, [r0]
   11af4:	bl	11f7c <__assert_fail@plt+0xe20>
   11af8:	cmp	r0, #0
   11afc:	beq	11a18 <__assert_fail@plt+0x8bc>
   11b00:	mov	r2, r9
   11b04:	b	11a40 <__assert_fail@plt+0x8e4>
   11b08:	str	r3, [sp, #16]
   11b0c:	ldr	r1, [sp, #76]	; 0x4c
   11b10:	ldr	r3, [sp, #12]
   11b14:	ldr	r0, [sp, #64]	; 0x40
   11b18:	ldr	r1, [r1, sl, lsl #2]
   11b1c:	str	r2, [sp, #20]
   11b20:	ldr	r0, [r0, r3]
   11b24:	bl	126ec <__assert_fail@plt+0x1590>
   11b28:	ldr	r2, [sp, #20]
   11b2c:	ldr	r3, [sp, #16]
   11b30:	add	sl, sl, #1
   11b34:	ldr	r1, [sp, #68]	; 0x44
   11b38:	sub	r1, r1, #1
   11b3c:	cmp	sl, r1
   11b40:	bcc	11b08 <__assert_fail@plt+0x9ac>
   11b44:	add	r3, r3, #1
   11b48:	ldr	r1, [sp, #56]	; 0x38
   11b4c:	sub	r1, r1, #1
   11b50:	cmp	r3, r1
   11b54:	bcs	11a50 <__assert_fail@plt+0x8f4>
   11b58:	lsl	r1, r3, #2
   11b5c:	str	r1, [sp, #12]
   11b60:	mov	sl, #0
   11b64:	b	11b34 <__assert_fail@plt+0x9d8>
   11b68:	cmp	r2, #0
   11b6c:	beq	11b80 <__assert_fail@plt+0xa24>
   11b70:	ldr	r3, [sp, #64]	; 0x40
   11b74:	ldr	r1, [pc, #380]	; 11cf8 <__assert_fail@plt+0xb9c>
   11b78:	ldr	r0, [r3]
   11b7c:	bl	126ec <__assert_fail@plt+0x1590>
   11b80:	ldr	r3, [sp, #68]	; 0x44
   11b84:	ldr	r9, [pc, #364]	; 11cf8 <__assert_fail@plt+0xb9c>
   11b88:	cmp	r3, #0
   11b8c:	mov	r8, #1
   11b90:	movne	r3, #1
   11b94:	strbne	r3, [r4, #44]	; 0x2c
   11b98:	mov	r2, r8
   11b9c:	add	r1, sp, #36	; 0x24
   11ba0:	mov	r0, r7
   11ba4:	bl	12090 <__assert_fail@plt+0xf34>
   11ba8:	cmp	r0, #0
   11bac:	beq	11878 <__assert_fail@plt+0x71c>
   11bb0:	ldrb	r3, [r4, #109]	; 0x6d
   11bb4:	cmp	r3, #0
   11bb8:	beq	11bc8 <__assert_fail@plt+0xa6c>
   11bbc:	mov	r1, r9
   11bc0:	ldr	r0, [sp, #36]	; 0x24
   11bc4:	bl	126ec <__assert_fail@plt+0x1590>
   11bc8:	ldrb	r3, [r4, #45]	; 0x2d
   11bcc:	cmp	r3, #0
   11bd0:	beq	11b98 <__assert_fail@plt+0xa3c>
   11bd4:	ldrb	r3, [r4, #109]	; 0x6d
   11bd8:	cmp	r3, #0
   11bdc:	bne	11b98 <__assert_fail@plt+0xa3c>
   11be0:	b	11878 <__assert_fail@plt+0x71c>
   11be4:	ldr	r2, [sp, #68]	; 0x44
   11be8:	cmp	r2, #0
   11bec:	beq	11884 <__assert_fail@plt+0x728>
   11bf0:	cmp	r3, #0
   11bf4:	beq	11c08 <__assert_fail@plt+0xaac>
   11bf8:	ldr	r3, [sp, #76]	; 0x4c
   11bfc:	ldr	r0, [pc, #244]	; 11cf8 <__assert_fail@plt+0xb9c>
   11c00:	ldr	r1, [r3]
   11c04:	bl	126ec <__assert_fail@plt+0x1590>
   11c08:	ldr	r3, [sp, #56]	; 0x38
   11c0c:	ldr	r8, [pc, #228]	; 11cf8 <__assert_fail@plt+0xb9c>
   11c10:	cmp	r3, #0
   11c14:	mov	r5, #2
   11c18:	movne	r3, #1
   11c1c:	strbne	r3, [r4, #44]	; 0x2c
   11c20:	mov	r2, r5
   11c24:	add	r1, sp, #36	; 0x24
   11c28:	mov	r0, r6
   11c2c:	bl	12090 <__assert_fail@plt+0xf34>
   11c30:	cmp	r0, #0
   11c34:	beq	11884 <__assert_fail@plt+0x728>
   11c38:	ldrb	r3, [r4, #110]	; 0x6e
   11c3c:	cmp	r3, #0
   11c40:	beq	11c50 <__assert_fail@plt+0xaf4>
   11c44:	ldr	r1, [sp, #36]	; 0x24
   11c48:	mov	r0, r8
   11c4c:	bl	126ec <__assert_fail@plt+0x1590>
   11c50:	ldrb	r3, [r4, #46]	; 0x2e
   11c54:	cmp	r3, #0
   11c58:	beq	11c20 <__assert_fail@plt+0xac4>
   11c5c:	ldrb	r3, [r4, #110]	; 0x6e
   11c60:	cmp	r3, #0
   11c64:	bne	11c20 <__assert_fail@plt+0xac4>
   11c68:	b	11884 <__assert_fail@plt+0x728>
   11c6c:	add	sp, sp, #84	; 0x54
   11c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c74:	andeq	r6, r1, r2, lsl #15
   11c78:	ldrdeq	r7, [r1], -r4
   11c7c:	andeq	r7, r1, r0, lsr #2
   11c80:	muleq	r2, r0, r1
   11c84:	ldrdeq	r2, [r1], -r0
   11c88:	andeq	r1, r1, r4, lsr #29
   11c8c:	andeq	r8, r2, r8, lsl #3
   11c90:	muleq	r1, ip, r6
   11c94:	andeq	r7, r1, r6, asr r2
   11c98:	andeq	r8, r2, r0, ror r1
   11c9c:	andeq	r7, r1, sl, ror #4
   11ca0:	andeq	r7, r1, r9, asr #4
   11ca4:	andeq	r8, r2, r4, lsl #3
   11ca8:	andeq	r8, r2, r0, lsr #2
   11cac:	andeq	r7, r1, ip, lsl r1
   11cb0:	andeq	r6, r1, r8, ror #15
   11cb4:	andeq	r8, r2, r8, lsl r1
   11cb8:	andeq	r0, r0, r1, lsl #2
   11cbc:	andeq	r6, r1, r6, ror #14
   11cc0:	andeq	r7, r1, ip, ror #3
   11cc4:	andeq	r8, r2, r4, lsl r1
   11cc8:	andeq	r8, r2, ip, lsl #2
   11ccc:	andeq	r7, r1, r8, lsl r2
   11cd0:	andeq	r7, r1, sp, lsl r2
   11cd4:	andeq	r7, r1, r0, lsr #4
   11cd8:	andeq	r7, r1, r7, lsr r2
   11cdc:	andeq	r7, r1, sl, ror r2
   11ce0:	ldrdeq	r7, [r1], -sp
   11ce4:	andeq	r8, r2, r0, lsl #3
   11ce8:	andeq	r7, r1, r2, ror #6
   11cec:	andeq	r6, r1, r2, asr #15
   11cf0:	muleq	r1, r3, r2
   11cf4:			; <UNDEFINED> instruction: 0x000172b7
   11cf8:	ldrdeq	r8, [r2], -ip
   11cfc:	mov	fp, #0
   11d00:	mov	lr, #0
   11d04:	pop	{r1}		; (ldr r1, [sp], #4)
   11d08:	mov	r2, sp
   11d0c:	push	{r2}		; (str r2, [sp, #-4]!)
   11d10:	push	{r0}		; (str r0, [sp, #-4]!)
   11d14:	ldr	ip, [pc, #16]	; 11d2c <__assert_fail@plt+0xbd0>
   11d18:	push	{ip}		; (str ip, [sp, #-4]!)
   11d1c:	ldr	r0, [pc, #12]	; 11d30 <__assert_fail@plt+0xbd4>
   11d20:	ldr	r3, [pc, #12]	; 11d34 <__assert_fail@plt+0xbd8>
   11d24:	bl	10fd0 <__libc_start_main@plt>
   11d28:	bl	1112c <abort@plt>
   11d2c:	andeq	r6, r1, r0, lsr r6
   11d30:	andeq	r1, r1, r8, ror #2
   11d34:	ldrdeq	r6, [r1], -r0
   11d38:	ldr	r3, [pc, #20]	; 11d54 <__assert_fail@plt+0xbf8>
   11d3c:	ldr	r2, [pc, #20]	; 11d58 <__assert_fail@plt+0xbfc>
   11d40:	add	r3, pc, r3
   11d44:	ldr	r2, [r3, r2]
   11d48:	cmp	r2, #0
   11d4c:	bxeq	lr
   11d50:	b	10ff4 <__gmon_start__@plt>
   11d54:			; <UNDEFINED> instruction: 0x000162b8
   11d58:	andeq	r0, r0, r0, lsl #2
   11d5c:	ldr	r3, [pc, #28]	; 11d80 <__assert_fail@plt+0xc24>
   11d60:	ldr	r0, [pc, #28]	; 11d84 <__assert_fail@plt+0xc28>
   11d64:	sub	r3, r3, r0
   11d68:	cmp	r3, #6
   11d6c:	bxls	lr
   11d70:	ldr	r3, [pc, #16]	; 11d88 <__assert_fail@plt+0xc2c>
   11d74:	cmp	r3, #0
   11d78:	bxeq	lr
   11d7c:	bx	r3
   11d80:	andeq	r8, r2, fp, ror #2
   11d84:	andeq	r8, r2, r8, ror #2
   11d88:	andeq	r0, r0, r0
   11d8c:	ldr	r1, [pc, #36]	; 11db8 <__assert_fail@plt+0xc5c>
   11d90:	ldr	r0, [pc, #36]	; 11dbc <__assert_fail@plt+0xc60>
   11d94:	sub	r1, r1, r0
   11d98:	asr	r1, r1, #2
   11d9c:	add	r1, r1, r1, lsr #31
   11da0:	asrs	r1, r1, #1
   11da4:	bxeq	lr
   11da8:	ldr	r3, [pc, #16]	; 11dc0 <__assert_fail@plt+0xc64>
   11dac:	cmp	r3, #0
   11db0:	bxeq	lr
   11db4:	bx	r3
   11db8:	andeq	r8, r2, r8, ror #2
   11dbc:	andeq	r8, r2, r8, ror #2
   11dc0:	andeq	r0, r0, r0
   11dc4:	push	{r4, lr}
   11dc8:	ldr	r4, [pc, #24]	; 11de8 <__assert_fail@plt+0xc8c>
   11dcc:	ldrb	r3, [r4]
   11dd0:	cmp	r3, #0
   11dd4:	popne	{r4, pc}
   11dd8:	bl	11d5c <__assert_fail@plt+0xc00>
   11ddc:	mov	r3, #1
   11de0:	strb	r3, [r4]
   11de4:	pop	{r4, pc}
   11de8:	andeq	r8, r2, ip, lsl #3
   11dec:	ldr	r0, [pc, #40]	; 11e1c <__assert_fail@plt+0xcc0>
   11df0:	ldr	r3, [r0]
   11df4:	cmp	r3, #0
   11df8:	bne	11e00 <__assert_fail@plt+0xca4>
   11dfc:	b	11d8c <__assert_fail@plt+0xc30>
   11e00:	ldr	r3, [pc, #24]	; 11e20 <__assert_fail@plt+0xcc4>
   11e04:	cmp	r3, #0
   11e08:	beq	11dfc <__assert_fail@plt+0xca0>
   11e0c:	push	{r4, lr}
   11e10:	blx	r3
   11e14:	pop	{r4, lr}
   11e18:	b	11d8c <__assert_fail@plt+0xc30>
   11e1c:	andeq	r7, r2, r4, lsl pc
   11e20:	andeq	r0, r0, r0
   11e24:	push	{r0, r1, r2, r4, r5, lr}
   11e28:	ldr	r5, [r0]
   11e2c:	cmp	r5, r1
   11e30:	cmnne	r5, #1
   11e34:	beq	11e68 <__assert_fail@plt+0xd0c>
   11e38:	mov	r4, r1
   11e3c:	mov	r2, #5
   11e40:	ldr	r1, [pc, #44]	; 11e74 <__assert_fail@plt+0xd18>
   11e44:	mov	r0, #0
   11e48:	bl	10f40 <dcgettext@plt>
   11e4c:	add	r1, r4, #1
   11e50:	str	r1, [sp]
   11e54:	add	r3, r5, #1
   11e58:	mov	r1, #0
   11e5c:	mov	r2, r0
   11e60:	mov	r0, #1
   11e64:	bl	10fac <error@plt>
   11e68:	str	r1, [r0]
   11e6c:	add	sp, sp, #12
   11e70:	pop	{r4, r5, pc}
   11e74:	andeq	r6, r1, ip, lsl r7
   11e78:	push	{r4, r5, r6, lr}
   11e7c:	subs	r4, r0, #0
   11e80:	popeq	{r4, r5, r6, pc}
   11e84:	ldr	r0, [r4, #20]
   11e88:	mov	r5, #0
   11e8c:	bl	12e7c <__assert_fail@plt+0x1d20>
   11e90:	str	r5, [r4, #20]
   11e94:	ldr	r0, [r4, #8]
   11e98:	bl	12e7c <__assert_fail@plt+0x1d20>
   11e9c:	str	r5, [r4, #8]
   11ea0:	pop	{r4, r5, r6, pc}
   11ea4:	push	{r4, lr}
   11ea8:	ldr	r4, [pc, #48]	; 11ee0 <__assert_fail@plt+0xd84>
   11eac:	ldr	r0, [r4]
   11eb0:	cmp	r0, #0
   11eb4:	beq	11ec4 <__assert_fail@plt+0xd68>
   11eb8:	bl	11e78 <__assert_fail@plt+0xd1c>
   11ebc:	ldr	r0, [r4]
   11ec0:	bl	12e7c <__assert_fail@plt+0x1d20>
   11ec4:	ldr	r0, [r4, #4]
   11ec8:	cmp	r0, #0
   11ecc:	popeq	{r4, pc}
   11ed0:	bl	11e78 <__assert_fail@plt+0xd1c>
   11ed4:	ldr	r0, [r4, #4]
   11ed8:	pop	{r4, lr}
   11edc:	b	12e7c <__assert_fail@plt+0x1d20>
   11ee0:	muleq	r2, r0, r1
   11ee4:	push	{r4, r5, r6, lr}
   11ee8:	mov	r5, r0
   11eec:	mov	r4, #0
   11ef0:	ldr	r3, [r5, #4]
   11ef4:	cmp	r4, r3
   11ef8:	bcc	11f08 <__assert_fail@plt+0xdac>
   11efc:	ldr	r0, [r5, #8]
   11f00:	pop	{r4, r5, r6, lr}
   11f04:	b	12e7c <__assert_fail@plt+0x1d20>
   11f08:	ldr	r3, [r5, #8]
   11f0c:	ldr	r0, [r3, r4, lsl #2]
   11f10:	bl	11e78 <__assert_fail@plt+0xd1c>
   11f14:	ldr	r3, [r5, #8]
   11f18:	ldr	r0, [r3, r4, lsl #2]
   11f1c:	bl	12e7c <__assert_fail@plt+0x1d20>
   11f20:	add	r4, r4, #1
   11f24:	b	11ef0 <__assert_fail@plt+0xd94>
   11f28:	push	{r4, r5, r6, lr}
   11f2c:	mov	r5, r2
   11f30:	ldr	r3, [r0, #16]
   11f34:	ldr	r2, [r0, #12]
   11f38:	mov	r4, r0
   11f3c:	cmp	r2, r3
   11f40:	mov	r6, r1
   11f44:	bcc	11f5c <__assert_fail@plt+0xe00>
   11f48:	add	r1, r0, #16
   11f4c:	mov	r2, #8
   11f50:	ldr	r0, [r0, #20]
   11f54:	bl	14dd4 <__assert_fail@plt+0x3c78>
   11f58:	str	r0, [r4, #20]
   11f5c:	ldr	r3, [r4, #12]
   11f60:	ldr	r2, [r4, #20]
   11f64:	add	r1, r2, r3, lsl #3
   11f68:	str	r6, [r2, r3, lsl #3]
   11f6c:	add	r3, r3, #1
   11f70:	str	r5, [r1, #4]
   11f74:	str	r3, [r4, #12]
   11f78:	pop	{r4, r5, r6, pc}
   11f7c:	ldr	ip, [r0, #12]
   11f80:	push	{r4, r5, r6, lr}
   11f84:	cmp	ip, r2
   11f88:	movls	r4, #0
   11f8c:	ldrhi	r0, [r0, #20]
   11f90:	movls	r0, r4
   11f94:	addhi	ip, r0, r2, lsl #3
   11f98:	ldrhi	r0, [r0, r2, lsl #3]
   11f9c:	ldr	r2, [r1, #12]
   11fa0:	ldrhi	r4, [ip, #4]
   11fa4:	cmp	r2, r3
   11fa8:	bls	12058 <__assert_fail@plt+0xefc>
   11fac:	ldr	r2, [r1, #20]
   11fb0:	cmp	r4, #0
   11fb4:	add	r1, r2, r3, lsl #3
   11fb8:	ldr	r5, [r1, #4]
   11fbc:	bne	11fcc <__assert_fail@plt+0xe70>
   11fc0:	adds	r0, r5, #0
   11fc4:	mvnne	r0, #0
   11fc8:	pop	{r4, r5, r6, pc}
   11fcc:	cmp	r5, #0
   11fd0:	beq	12048 <__assert_fail@plt+0xeec>
   11fd4:	ldr	r1, [r2, r3, lsl #3]
   11fd8:	ldr	r3, [pc, #132]	; 12064 <__assert_fail@plt+0xf08>
   11fdc:	ldrb	r2, [r3, #8]
   11fe0:	cmp	r2, #0
   11fe4:	beq	12014 <__assert_fail@plt+0xeb8>
   11fe8:	cmp	r4, r5
   11fec:	movcc	r2, r4
   11ff0:	movcs	r2, r5
   11ff4:	bl	130c0 <__assert_fail@plt+0x1f64>
   11ff8:	cmp	r0, #0
   11ffc:	popne	{r4, r5, r6, pc}
   12000:	cmp	r4, r5
   12004:	bcc	12050 <__assert_fail@plt+0xef4>
   12008:	movne	r0, #1
   1200c:	moveq	r0, #0
   12010:	pop	{r4, r5, r6, pc}
   12014:	ldrb	r3, [r3, #9]
   12018:	cmp	r3, #0
   1201c:	beq	12034 <__assert_fail@plt+0xed8>
   12020:	mov	r3, r5
   12024:	mov	r2, r1
   12028:	mov	r1, r4
   1202c:	pop	{r4, r5, r6, lr}
   12030:	b	1527c <__assert_fail@plt+0x4120>
   12034:	cmp	r4, r5
   12038:	movcc	r2, r4
   1203c:	movcs	r2, r5
   12040:	bl	10f1c <memcmp@plt>
   12044:	b	11ff8 <__assert_fail@plt+0xe9c>
   12048:	mov	r0, #1
   1204c:	pop	{r4, r5, r6, pc}
   12050:	mvn	r0, #0
   12054:	pop	{r4, r5, r6, pc}
   12058:	adds	r0, r4, #0
   1205c:	movne	r0, #1
   12060:	pop	{r4, r5, r6, pc}
   12064:	muleq	r2, r0, r1
   12068:	push	{r4, lr}
   1206c:	mov	r4, r0
   12070:	bl	1100c <__ctype_b_loc@plt>
   12074:	lsl	r3, r4, #1
   12078:	ldr	r2, [r0]
   1207c:	ldrh	r0, [r2, r3]
   12080:	and	r0, r0, #1
   12084:	cmp	r4, #10
   12088:	orreq	r0, r0, #1
   1208c:	pop	{r4, pc}
   12090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12094:	sub	r8, r2, #1
   12098:	ldr	r5, [pc, #752]	; 12390 <__assert_fail@plt+0x1234>
   1209c:	lsl	sl, r8, #2
   120a0:	add	r3, r5, sl
   120a4:	ldr	r4, [r1]
   120a8:	ldr	r3, [r3, #12]
   120ac:	sub	sp, sp, #36	; 0x24
   120b0:	cmp	r4, r3
   120b4:	mov	r7, r0
   120b8:	ldreq	r3, [r5, r8, lsl #2]
   120bc:	streq	r4, [r5, r8, lsl #2]
   120c0:	moveq	r4, r3
   120c4:	streq	r3, [r1]
   120c8:	cmp	r4, #0
   120cc:	movne	r3, #0
   120d0:	mov	r6, r1
   120d4:	str	r2, [sp, #20]
   120d8:	strne	r3, [r4, #12]
   120dc:	bne	120f4 <__assert_fail@plt+0xf98>
   120e0:	mov	r1, #24
   120e4:	mov	r0, #1
   120e8:	bl	150a8 <__assert_fail@plt+0x3f4c>
   120ec:	mov	r4, r0
   120f0:	str	r0, [r6]
   120f4:	ldr	r9, [pc, #664]	; 12394 <__assert_fail@plt+0x1238>
   120f8:	mov	r1, r7
   120fc:	mov	r0, r4
   12100:	ldrb	r2, [r9]
   12104:	bl	12fd4 <__assert_fail@plt+0x1e78>
   12108:	subs	r6, r0, #0
   1210c:	bne	1215c <__assert_fail@plt+0x1000>
   12110:	mov	r0, r7
   12114:	bl	10f94 <ferror_unlocked@plt>
   12118:	subs	r5, r0, #0
   1211c:	beq	12148 <__assert_fail@plt+0xfec>
   12120:	bl	11048 <__errno_location@plt>
   12124:	mov	r2, #5
   12128:	ldr	r1, [pc, #616]	; 12398 <__assert_fail@plt+0x123c>
   1212c:	ldr	r4, [r0]
   12130:	mov	r0, r6
   12134:	bl	10f40 <dcgettext@plt>
   12138:	mov	r1, r4
   1213c:	mov	r2, r0
   12140:	mov	r0, #1
   12144:	bl	10fac <error@plt>
   12148:	mov	r0, r4
   1214c:	bl	11e78 <__assert_fail@plt+0xd1c>
   12150:	mov	r0, r5
   12154:	add	sp, sp, #36	; 0x24
   12158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1215c:	lsl	r3, r8, #3
   12160:	add	r1, r5, r3
   12164:	str	r3, [sp, #24]
   12168:	ldrd	r2, [r1, #24]
   1216c:	ldr	r7, [r4, #4]
   12170:	ldr	r6, [r4, #8]
   12174:	adds	r2, r2, #1
   12178:	sub	r7, r7, #1
   1217c:	adc	r3, r3, #0
   12180:	add	r7, r6, r7
   12184:	cmp	r6, r7
   12188:	strd	r2, [r1, #24]
   1218c:	beq	12270 <__assert_fail@plt+0x1114>
   12190:	ldr	r3, [r9, #4]
   12194:	mvn	r2, r3
   12198:	cmp	r3, #10
   1219c:	lsr	r2, r2, #31
   121a0:	moveq	r2, #0
   121a4:	cmp	r2, #0
   121a8:	beq	121f0 <__assert_fail@plt+0x1094>
   121ac:	sub	r2, r7, r6
   121b0:	ldr	r1, [r9, #4]
   121b4:	mov	r0, r6
   121b8:	bl	1109c <memchr@plt>
   121bc:	subs	fp, r0, #0
   121c0:	bne	121d8 <__assert_fail@plt+0x107c>
   121c4:	sub	r2, r7, r6
   121c8:	mov	r1, r6
   121cc:	mov	r0, r4
   121d0:	bl	11f28 <__assert_fail@plt+0xdcc>
   121d4:	b	12270 <__assert_fail@plt+0x1114>
   121d8:	sub	r2, fp, r6
   121dc:	mov	r1, r6
   121e0:	mov	r0, r4
   121e4:	bl	11f28 <__assert_fail@plt+0xdcc>
   121e8:	add	r6, fp, #1
   121ec:	b	121ac <__assert_fail@plt+0x1050>
   121f0:	cmp	r3, #0
   121f4:	movlt	fp, r6
   121f8:	bge	121c4 <__assert_fail@plt+0x1068>
   121fc:	mov	r6, fp
   12200:	add	fp, fp, #1
   12204:	ldrb	r0, [r6]
   12208:	bl	12068 <__assert_fail@plt+0xf0c>
   1220c:	cmp	r0, #0
   12210:	bne	12268 <__assert_fail@plt+0x110c>
   12214:	add	fp, r6, #1
   12218:	cmp	r7, fp
   1221c:	bne	1236c <__assert_fail@plt+0x1210>
   12220:	sub	r2, fp, r6
   12224:	mov	r1, r6
   12228:	mov	r0, r4
   1222c:	bl	11f28 <__assert_fail@plt+0xdcc>
   12230:	cmp	r7, fp
   12234:	beq	12270 <__assert_fail@plt+0x1114>
   12238:	add	r3, fp, #1
   1223c:	cmp	r7, r3
   12240:	mov	r6, r3
   12244:	beq	121c4 <__assert_fail@plt+0x1068>
   12248:	add	r3, r3, #1
   1224c:	ldrb	r0, [r6]
   12250:	str	r3, [sp, #28]
   12254:	bl	12068 <__assert_fail@plt+0xf0c>
   12258:	ldr	r3, [sp, #28]
   1225c:	cmp	r0, #0
   12260:	bne	1223c <__assert_fail@plt+0x10e0>
   12264:	b	12214 <__assert_fail@plt+0x10b8>
   12268:	cmp	r7, fp
   1226c:	bne	121fc <__assert_fail@plt+0x10a0>
   12270:	add	r3, r5, sl
   12274:	ldr	r0, [r3, #12]
   12278:	cmp	r0, #0
   1227c:	beq	1235c <__assert_fail@plt+0x1200>
   12280:	ldr	r3, [r5, #40]	; 0x28
   12284:	cmp	r3, #2
   12288:	beq	1235c <__assert_fail@plt+0x1200>
   1228c:	cmp	r3, #1
   12290:	beq	122a0 <__assert_fail@plt+0x1144>
   12294:	ldrb	r3, [r5, #44]	; 0x2c
   12298:	cmp	r3, #0
   1229c:	beq	1235c <__assert_fail@plt+0x1200>
   122a0:	add	r3, r5, r8
   122a4:	ldrb	r3, [r3, #45]	; 0x2d
   122a8:	cmp	r3, #0
   122ac:	bne	1235c <__assert_fail@plt+0x1200>
   122b0:	ldr	r3, [sp, #20]
   122b4:	mov	r1, r4
   122b8:	cmp	r3, #1
   122bc:	ldreq	r3, [r9, #8]
   122c0:	ldrne	r3, [r9, #12]
   122c4:	mov	r2, r3
   122c8:	bl	11f7c <__assert_fail@plt+0xe20>
   122cc:	cmp	r0, #0
   122d0:	ble	1235c <__assert_fail@plt+0x1200>
   122d4:	ldr	r6, [r4, #4]
   122d8:	cmp	r6, #0
   122dc:	beq	122fc <__assert_fail@plt+0x11a0>
   122e0:	ldr	r2, [r4, #8]
   122e4:	sub	r3, r6, #1
   122e8:	ldrb	r2, [r2, r3]
   122ec:	cmp	r2, #10
   122f0:	moveq	r6, r3
   122f4:	cmp	r6, #0
   122f8:	mvnlt	r6, #-2147483648	; 0x80000000
   122fc:	mov	r2, #5
   12300:	ldr	r1, [pc, #148]	; 1239c <__assert_fail@plt+0x1240>
   12304:	mov	r0, #0
   12308:	ldr	r7, [r5, #40]	; 0x28
   1230c:	bl	10f40 <dcgettext@plt>
   12310:	ldr	r3, [r4, #8]
   12314:	str	r6, [sp, #8]
   12318:	str	r3, [sp, #12]
   1231c:	ldr	r3, [sp, #24]
   12320:	add	r1, r5, sl
   12324:	add	r3, r5, r3
   12328:	sub	r7, r7, #1
   1232c:	ldrd	r2, [r3, #24]
   12330:	clz	r7, r7
   12334:	lsr	r7, r7, #5
   12338:	strd	r2, [sp]
   1233c:	add	r8, r5, r8
   12340:	ldr	r3, [r1, #48]	; 0x30
   12344:	mov	r1, #0
   12348:	mov	r2, r0
   1234c:	mov	r0, r7
   12350:	bl	10fac <error@plt>
   12354:	mov	r3, #1
   12358:	strb	r3, [r8, #45]	; 0x2d
   1235c:	add	r5, r5, sl
   12360:	mov	r0, #1
   12364:	str	r4, [r5, #12]
   12368:	b	12154 <__assert_fail@plt+0xff8>
   1236c:	add	r2, fp, #1
   12370:	ldrb	r0, [fp]
   12374:	str	r2, [sp, #28]
   12378:	bl	12068 <__assert_fail@plt+0xf0c>
   1237c:	cmp	r0, #0
   12380:	bne	12220 <__assert_fail@plt+0x10c4>
   12384:	ldr	r2, [sp, #28]
   12388:	mov	fp, r2
   1238c:	b	12218 <__assert_fail@plt+0x10bc>
   12390:	muleq	r2, r0, r1
   12394:	andeq	r8, r2, ip, lsl #2
   12398:	andeq	r6, r1, lr, lsr r7
   1239c:	andeq	r6, r1, r9, asr #14
   123a0:	push	{r4, r5, r6, lr}
   123a4:	mov	r6, r2
   123a8:	ldm	r1, {r2, r3}
   123ac:	mov	r5, r0
   123b0:	mov	r4, r1
   123b4:	cmp	r2, r3
   123b8:	beq	123e0 <__assert_fail@plt+0x1284>
   123bc:	ldr	r1, [r4]
   123c0:	ldr	r3, [r4, #8]
   123c4:	mov	r2, r6
   123c8:	add	r1, r3, r1, lsl #2
   123cc:	mov	r0, r5
   123d0:	bl	12090 <__assert_fail@plt+0xf34>
   123d4:	cmp	r0, #0
   123d8:	bne	12414 <__assert_fail@plt+0x12b8>
   123dc:	pop	{r4, r5, r6, pc}
   123e0:	mov	r2, #4
   123e4:	add	r1, r1, r2
   123e8:	ldr	r0, [r4, #8]
   123ec:	bl	14dd4 <__assert_fail@plt+0x3c78>
   123f0:	ldr	r3, [r4]
   123f4:	ldr	r2, [r4, #4]
   123f8:	mov	r1, #0
   123fc:	str	r0, [r4, #8]
   12400:	cmp	r3, r2
   12404:	bcs	123bc <__assert_fail@plt+0x1260>
   12408:	str	r1, [r0, r3, lsl #2]
   1240c:	add	r3, r3, #1
   12410:	b	12400 <__assert_fail@plt+0x12a4>
   12414:	ldr	r3, [r4]
   12418:	add	r3, r3, #1
   1241c:	str	r3, [r4]
   12420:	pop	{r4, r5, r6, pc}
   12424:	push	{r4, r5, lr}
   12428:	sub	sp, sp, #20
   1242c:	ldr	r3, [pc, #144]	; 124c4 <__assert_fail@plt+0x1368>
   12430:	mov	r2, #10
   12434:	str	r3, [sp]
   12438:	mov	r1, #0
   1243c:	add	r3, sp, #8
   12440:	mov	r5, r0
   12444:	bl	157a8 <__assert_fail@plt+0x464c>
   12448:	cmp	r0, #1
   1244c:	beq	12470 <__assert_fail@plt+0x1314>
   12450:	cmp	r0, #0
   12454:	bne	12494 <__assert_fail@plt+0x1338>
   12458:	ldrd	r2, [sp, #8]
   1245c:	mov	r1, #0
   12460:	mvn	r0, #0
   12464:	cmp	r3, r1
   12468:	cmpeq	r2, r0
   1246c:	bls	1248c <__assert_fail@plt+0x1330>
   12470:	mvn	r2, #0
   12474:	mov	r3, #0
   12478:	strd	r2, [sp, #8]
   1247c:	ldr	r0, [sp, #8]
   12480:	sub	r0, r0, #1
   12484:	add	sp, sp, #20
   12488:	pop	{r4, r5, pc}
   1248c:	orrs	r3, r2, r3
   12490:	bne	1247c <__assert_fail@plt+0x1320>
   12494:	mov	r2, #5
   12498:	ldr	r1, [pc, #40]	; 124c8 <__assert_fail@plt+0x136c>
   1249c:	mov	r0, #0
   124a0:	bl	10f40 <dcgettext@plt>
   124a4:	mov	r4, r0
   124a8:	mov	r0, r5
   124ac:	bl	14734 <__assert_fail@plt+0x35d8>
   124b0:	mov	r2, r4
   124b4:	mov	r1, #0
   124b8:	mov	r3, r0
   124bc:	mov	r0, #1
   124c0:	bl	10fac <error@plt>
   124c4:	andeq	r6, r1, r2, lsl #15
   124c8:	andeq	r6, r1, r6, ror #14
   124cc:	push	{r4, r5, r6, r7, r8, lr}
   124d0:	mov	r4, r0
   124d4:	ldr	r8, [pc, #252]	; 125d8 <__assert_fail@plt+0x147c>
   124d8:	mov	r7, #0
   124dc:	ldr	r1, [pc, #248]	; 125dc <__assert_fail@plt+0x1480>
   124e0:	mov	r0, r4
   124e4:	bl	110fc <strpbrk@plt>
   124e8:	subs	r6, r0, #0
   124ec:	strbne	r7, [r6]
   124f0:	ldrb	r5, [r4]
   124f4:	addne	r6, r6, #1
   124f8:	cmp	r5, #48	; 0x30
   124fc:	beq	12520 <__assert_fail@plt+0x13c4>
   12500:	bcc	1250c <__assert_fail@plt+0x13b0>
   12504:	cmp	r5, #50	; 0x32
   12508:	bls	1255c <__assert_fail@plt+0x1400>
   1250c:	mov	r2, #5
   12510:	ldr	r1, [pc, #200]	; 125e0 <__assert_fail@plt+0x1484>
   12514:	b	12534 <__assert_fail@plt+0x13d8>
   12518:	mov	r4, r6
   1251c:	b	124dc <__assert_fail@plt+0x1380>
   12520:	ldrb	r3, [r4, #1]
   12524:	cmp	r3, #0
   12528:	beq	125a4 <__assert_fail@plt+0x1448>
   1252c:	ldr	r1, [pc, #176]	; 125e4 <__assert_fail@plt+0x1488>
   12530:	mov	r2, #5
   12534:	mov	r0, #0
   12538:	bl	10f40 <dcgettext@plt>
   1253c:	mov	r5, r0
   12540:	mov	r0, r4
   12544:	bl	14734 <__assert_fail@plt+0x35d8>
   12548:	mov	r2, r5
   1254c:	mov	r1, #0
   12550:	mov	r3, r0
   12554:	mov	r0, #1
   12558:	bl	10fac <error@plt>
   1255c:	ldrb	r3, [r4, #1]
   12560:	cmp	r3, #46	; 0x2e
   12564:	bne	1252c <__assert_fail@plt+0x13d0>
   12568:	add	r0, r4, #2
   1256c:	bl	12424 <__assert_fail@plt+0x12c8>
   12570:	sub	r5, r5, #48	; 0x30
   12574:	mov	r4, r0
   12578:	clz	r3, r4
   1257c:	lsr	r3, r3, #5
   12580:	cmp	r5, #0
   12584:	orrne	r3, r3, #1
   12588:	cmp	r3, #0
   1258c:	bne	125b0 <__assert_fail@plt+0x1454>
   12590:	ldr	r3, [pc, #80]	; 125e8 <__assert_fail@plt+0x148c>
   12594:	mov	r2, #820	; 0x334
   12598:	ldr	r1, [pc, #76]	; 125ec <__assert_fail@plt+0x1490>
   1259c:	ldr	r0, [pc, #76]	; 125f0 <__assert_fail@plt+0x1494>
   125a0:	bl	1115c <__assert_fail@plt>
   125a4:	mov	r4, r7
   125a8:	mov	r5, r7
   125ac:	b	12578 <__assert_fail@plt+0x141c>
   125b0:	mov	r0, #12
   125b4:	bl	14cdc <__assert_fail@plt+0x3b80>
   125b8:	ldr	r3, [r8, #16]
   125bc:	cmp	r6, #0
   125c0:	str	r5, [r0]
   125c4:	stmib	r0, {r4, r7}
   125c8:	str	r0, [r8, #16]
   125cc:	str	r0, [r3, #8]
   125d0:	bne	12518 <__assert_fail@plt+0x13bc>
   125d4:	pop	{r4, r5, r6, r7, r8, pc}
   125d8:	andeq	r8, r2, ip, lsl #2
   125dc:	andeq	r6, r1, pc, ror r7
   125e0:	muleq	r1, pc, r7	; <UNPREDICTABLE>
   125e4:	andeq	r6, r1, r3, lsl #15
   125e8:	andeq	r6, r1, r8, asr r6
   125ec:	andeq	r6, r1, r5, asr #15
   125f0:	ldrdeq	r6, [r1], -r0
   125f4:	ldr	r3, [r1, #12]
   125f8:	cmp	r3, r0
   125fc:	bls	12628 <__assert_fail@plt+0x14cc>
   12600:	ldr	ip, [r1, #20]
   12604:	add	r3, ip, r0, lsl #3
   12608:	ldr	r2, [r3, #4]
   1260c:	cmp	r2, #0
   12610:	beq	12628 <__assert_fail@plt+0x14cc>
   12614:	ldr	r3, [pc, #40]	; 12644 <__assert_fail@plt+0x14e8>
   12618:	mov	r1, #1
   1261c:	ldr	r0, [ip, r0, lsl #3]
   12620:	ldr	r3, [r3]
   12624:	b	10f10 <fwrite_unlocked@plt>
   12628:	ldr	r3, [pc, #24]	; 12648 <__assert_fail@plt+0x14ec>
   1262c:	ldr	r0, [r3, #56]	; 0x38
   12630:	cmp	r0, #0
   12634:	bxeq	lr
   12638:	ldr	r3, [pc, #4]	; 12644 <__assert_fail@plt+0x14e8>
   1263c:	ldr	r1, [r3]
   12640:	b	10ea4 <fputs_unlocked@plt>
   12644:	andeq	r8, r2, r4, lsl #3
   12648:	muleq	r2, r0, r1
   1264c:	ldr	r3, [pc, #144]	; 126e4 <__assert_fail@plt+0x1588>
   12650:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12654:	mov	r8, r0
   12658:	ldrb	r3, [r3, #60]	; 0x3c
   1265c:	mov	r4, r1
   12660:	mov	r7, #0
   12664:	cmp	r3, #0
   12668:	ldr	r3, [pc, #120]	; 126e8 <__assert_fail@plt+0x158c>
   1266c:	ldreq	r6, [r0, #12]
   12670:	movne	r6, r2
   12674:	ldr	r5, [r3, #4]
   12678:	cmp	r5, #0
   1267c:	movlt	r5, #32
   12680:	cmp	r6, r1
   12684:	movcc	r9, r6
   12688:	movcs	r9, r1
   1268c:	uxtb	sl, r5
   12690:	cmp	r7, r9
   12694:	bcc	126ac <__assert_fail@plt+0x1550>
   12698:	add	r4, r4, #1
   1269c:	uxtb	r5, r5
   126a0:	cmp	r4, r6
   126a4:	bcc	126c8 <__assert_fail@plt+0x156c>
   126a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   126ac:	mov	r0, sl
   126b0:	bl	11150 <putchar_unlocked@plt>
   126b4:	mov	r0, r7
   126b8:	mov	r1, r8
   126bc:	bl	125f4 <__assert_fail@plt+0x1498>
   126c0:	add	r7, r7, #1
   126c4:	b	12690 <__assert_fail@plt+0x1534>
   126c8:	mov	r0, r5
   126cc:	bl	11150 <putchar_unlocked@plt>
   126d0:	mov	r0, r4
   126d4:	mov	r1, r8
   126d8:	bl	125f4 <__assert_fail@plt+0x1498>
   126dc:	add	r4, r4, #1
   126e0:	b	126a0 <__assert_fail@plt+0x1544>
   126e4:	muleq	r2, r0, r1
   126e8:	andeq	r8, r2, ip, lsl #2
   126ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   126f0:	mov	r5, r0
   126f4:	ldr	r4, [pc, #184]	; 127b4 <__assert_fail@plt+0x1658>
   126f8:	ldr	r7, [pc, #184]	; 127b8 <__assert_fail@plt+0x165c>
   126fc:	mov	r8, r1
   12700:	ldr	r0, [r4, #4]
   12704:	ldr	r9, [r7, #72]	; 0x48
   12708:	cmp	r0, #0
   1270c:	movlt	r0, #32
   12710:	cmp	r9, #0
   12714:	beq	12770 <__assert_fail@plt+0x1614>
   12718:	add	r7, r7, #76	; 0x4c
   1271c:	uxtb	r6, r0
   12720:	ldr	r1, [r9]
   12724:	cmp	r1, #0
   12728:	bne	1275c <__assert_fail@plt+0x1600>
   1272c:	cmp	r5, r7
   12730:	moveq	r1, r8
   12734:	ldreq	r0, [r4, #12]
   12738:	ldrne	r0, [r4, #8]
   1273c:	movne	r1, r5
   12740:	bl	125f4 <__assert_fail@plt+0x1498>
   12744:	ldr	r9, [r9, #8]
   12748:	cmp	r9, #0
   1274c:	beq	127a8 <__assert_fail@plt+0x164c>
   12750:	mov	r0, r6
   12754:	bl	11150 <putchar_unlocked@plt>
   12758:	b	12720 <__assert_fail@plt+0x15c4>
   1275c:	cmp	r1, #1
   12760:	movne	r1, r8
   12764:	moveq	r1, r5
   12768:	ldr	r0, [r9, #4]
   1276c:	b	12740 <__assert_fail@plt+0x15e4>
   12770:	add	r3, r7, #76	; 0x4c
   12774:	cmp	r5, r3
   12778:	movne	r1, r5
   1277c:	ldreq	r0, [r4, #12]
   12780:	ldrne	r0, [r4, #8]
   12784:	bl	125f4 <__assert_fail@plt+0x1498>
   12788:	ldr	r2, [r7, #100]	; 0x64
   1278c:	ldr	r1, [r4, #8]
   12790:	mov	r0, r5
   12794:	bl	1264c <__assert_fail@plt+0x14f0>
   12798:	ldr	r2, [r7, #104]	; 0x68
   1279c:	ldr	r1, [r4, #12]
   127a0:	mov	r0, r8
   127a4:	bl	1264c <__assert_fail@plt+0x14f0>
   127a8:	ldrb	r0, [r4]
   127ac:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   127b0:	b	11150 <putchar_unlocked@plt>
   127b4:	andeq	r8, r2, ip, lsl #2
   127b8:	muleq	r2, r0, r1
   127bc:	subs	r5, r0, #0
   127c0:	push	{r7, lr}
   127c4:	sub	sp, sp, #56	; 0x38
   127c8:	ldr	r4, [pc, #596]	; 12a24 <__assert_fail@plt+0x18c8>
   127cc:	beq	12804 <__assert_fail@plt+0x16a8>
   127d0:	ldr	r3, [pc, #592]	; 12a28 <__assert_fail@plt+0x18cc>
   127d4:	mov	r2, #5
   127d8:	ldr	r1, [pc, #588]	; 12a2c <__assert_fail@plt+0x18d0>
   127dc:	mov	r0, #0
   127e0:	ldr	r6, [r3]
   127e4:	bl	10f40 <dcgettext@plt>
   127e8:	ldr	r3, [r4]
   127ec:	mov	r1, #1
   127f0:	mov	r2, r0
   127f4:	mov	r0, r6
   127f8:	bl	11090 <__fprintf_chk@plt>
   127fc:	mov	r0, r5
   12800:	bl	11018 <exit@plt>
   12804:	mov	r2, #5
   12808:	ldr	r1, [pc, #544]	; 12a30 <__assert_fail@plt+0x18d4>
   1280c:	bl	10f40 <dcgettext@plt>
   12810:	ldr	r2, [r4]
   12814:	ldr	r4, [pc, #536]	; 12a34 <__assert_fail@plt+0x18d8>
   12818:	ldr	r8, [pc, #536]	; 12a38 <__assert_fail@plt+0x18dc>
   1281c:	mov	r6, r5
   12820:	mov	r1, r0
   12824:	mov	r0, #1
   12828:	bl	1106c <__printf_chk@plt>
   1282c:	mov	r2, #5
   12830:	ldr	r1, [pc, #516]	; 12a3c <__assert_fail@plt+0x18e0>
   12834:	mov	r0, r5
   12838:	bl	10f40 <dcgettext@plt>
   1283c:	ldr	r1, [r4]
   12840:	bl	10ea4 <fputs_unlocked@plt>
   12844:	mov	r2, #5
   12848:	ldr	r1, [pc, #496]	; 12a40 <__assert_fail@plt+0x18e4>
   1284c:	mov	r0, r5
   12850:	bl	10f40 <dcgettext@plt>
   12854:	ldr	r1, [r4]
   12858:	bl	10ea4 <fputs_unlocked@plt>
   1285c:	mov	r2, #5
   12860:	ldr	r1, [pc, #476]	; 12a44 <__assert_fail@plt+0x18e8>
   12864:	mov	r0, r5
   12868:	bl	10f40 <dcgettext@plt>
   1286c:	ldr	r1, [r4]
   12870:	bl	10ea4 <fputs_unlocked@plt>
   12874:	mov	r2, #5
   12878:	ldr	r1, [pc, #456]	; 12a48 <__assert_fail@plt+0x18ec>
   1287c:	mov	r0, r5
   12880:	bl	10f40 <dcgettext@plt>
   12884:	ldr	r1, [r4]
   12888:	bl	10ea4 <fputs_unlocked@plt>
   1288c:	mov	r2, #5
   12890:	ldr	r1, [pc, #436]	; 12a4c <__assert_fail@plt+0x18f0>
   12894:	mov	r0, r5
   12898:	bl	10f40 <dcgettext@plt>
   1289c:	ldr	r1, [r4]
   128a0:	bl	10ea4 <fputs_unlocked@plt>
   128a4:	mov	r2, #5
   128a8:	ldr	r1, [pc, #416]	; 12a50 <__assert_fail@plt+0x18f4>
   128ac:	mov	r0, r5
   128b0:	bl	10f40 <dcgettext@plt>
   128b4:	ldr	r1, [r4]
   128b8:	bl	10ea4 <fputs_unlocked@plt>
   128bc:	mov	r2, #5
   128c0:	ldr	r1, [pc, #396]	; 12a54 <__assert_fail@plt+0x18f8>
   128c4:	mov	r0, r5
   128c8:	bl	10f40 <dcgettext@plt>
   128cc:	ldr	r1, [r4]
   128d0:	bl	10ea4 <fputs_unlocked@plt>
   128d4:	mov	r2, #5
   128d8:	ldr	r1, [pc, #376]	; 12a58 <__assert_fail@plt+0x18fc>
   128dc:	mov	r0, r5
   128e0:	bl	10f40 <dcgettext@plt>
   128e4:	ldr	r1, [r4]
   128e8:	bl	10ea4 <fputs_unlocked@plt>
   128ec:	mov	r2, #5
   128f0:	ldr	r1, [pc, #356]	; 12a5c <__assert_fail@plt+0x1900>
   128f4:	mov	r0, r5
   128f8:	bl	10f40 <dcgettext@plt>
   128fc:	ldr	r1, [r4]
   12900:	bl	10ea4 <fputs_unlocked@plt>
   12904:	ldr	lr, [pc, #340]	; 12a60 <__assert_fail@plt+0x1904>
   12908:	mov	ip, sp
   1290c:	ldm	lr!, {r0, r1, r2, r3}
   12910:	stmia	ip!, {r0, r1, r2, r3}
   12914:	ldm	lr!, {r0, r1, r2, r3}
   12918:	stmia	ip!, {r0, r1, r2, r3}
   1291c:	ldm	lr!, {r0, r1, r2, r3}
   12920:	stmia	ip!, {r0, r1, r2, r3}
   12924:	ldm	lr, {r0, r1}
   12928:	stm	ip, {r0, r1}
   1292c:	ldr	r1, [sp, r6]
   12930:	add	r7, sp, r6
   12934:	cmp	r1, #0
   12938:	bne	129dc <__assert_fail@plt+0x1880>
   1293c:	ldr	r6, [r7, #4]
   12940:	ldr	r7, [pc, #240]	; 12a38 <__assert_fail@plt+0x18dc>
   12944:	cmp	r6, #0
   12948:	mov	r2, #5
   1294c:	ldr	r1, [pc, #272]	; 12a64 <__assert_fail@plt+0x1908>
   12950:	mov	r0, #0
   12954:	moveq	r6, r7
   12958:	bl	10f40 <dcgettext@plt>
   1295c:	ldr	r3, [pc, #260]	; 12a68 <__assert_fail@plt+0x190c>
   12960:	ldr	r2, [pc, #260]	; 12a6c <__assert_fail@plt+0x1910>
   12964:	mov	r1, r0
   12968:	mov	r0, #1
   1296c:	bl	1106c <__printf_chk@plt>
   12970:	mov	r1, #0
   12974:	mov	r0, #5
   12978:	bl	110cc <setlocale@plt>
   1297c:	cmp	r0, #0
   12980:	bne	129f4 <__assert_fail@plt+0x1898>
   12984:	mov	r2, #5
   12988:	ldr	r1, [pc, #224]	; 12a70 <__assert_fail@plt+0x1914>
   1298c:	mov	r0, #0
   12990:	bl	10f40 <dcgettext@plt>
   12994:	ldr	r3, [pc, #156]	; 12a38 <__assert_fail@plt+0x18dc>
   12998:	ldr	r2, [pc, #200]	; 12a68 <__assert_fail@plt+0x190c>
   1299c:	mov	r1, r0
   129a0:	mov	r0, #1
   129a4:	bl	1106c <__printf_chk@plt>
   129a8:	mov	r2, #5
   129ac:	ldr	r1, [pc, #192]	; 12a74 <__assert_fail@plt+0x1918>
   129b0:	mov	r0, #0
   129b4:	bl	10f40 <dcgettext@plt>
   129b8:	ldr	r2, [pc, #184]	; 12a78 <__assert_fail@plt+0x191c>
   129bc:	cmp	r6, r7
   129c0:	ldr	r3, [pc, #180]	; 12a7c <__assert_fail@plt+0x1920>
   129c4:	moveq	r3, r2
   129c8:	mov	r2, r6
   129cc:	mov	r1, r0
   129d0:	mov	r0, #1
   129d4:	bl	1106c <__printf_chk@plt>
   129d8:	b	127fc <__assert_fail@plt+0x16a0>
   129dc:	mov	r0, r8
   129e0:	bl	10ebc <strcmp@plt>
   129e4:	add	r6, r6, #8
   129e8:	cmp	r0, #0
   129ec:	bne	1292c <__assert_fail@plt+0x17d0>
   129f0:	b	1293c <__assert_fail@plt+0x17e0>
   129f4:	mov	r2, #3
   129f8:	ldr	r1, [pc, #128]	; 12a80 <__assert_fail@plt+0x1924>
   129fc:	bl	11120 <strncmp@plt>
   12a00:	cmp	r0, #0
   12a04:	beq	12984 <__assert_fail@plt+0x1828>
   12a08:	mov	r2, #5
   12a0c:	ldr	r1, [pc, #112]	; 12a84 <__assert_fail@plt+0x1928>
   12a10:	mov	r0, #0
   12a14:	bl	10f40 <dcgettext@plt>
   12a18:	ldr	r1, [r4]
   12a1c:	bl	10ea4 <fputs_unlocked@plt>
   12a20:	b	12984 <__assert_fail@plt+0x1828>
   12a24:	andeq	r8, r2, r8, lsl #4
   12a28:	andeq	r8, r2, r8, ror r1
   12a2c:	andeq	r6, r1, sp, ror #15
   12a30:	andeq	r6, r1, r4, lsl r8
   12a34:	andeq	r8, r2, r4, lsl #3
   12a38:	andeq	r6, r1, r8, ror #15
   12a3c:	andeq	r6, r1, r7, lsr r8
   12a40:	andeq	r6, r1, sp, asr #17
   12a44:	andeq	r6, r1, r9, lsl #18
   12a48:	andeq	r6, r1, r8, ror #19
   12a4c:	strdeq	r6, [r1], -r8
   12a50:	andeq	r6, r1, fp, lsl #26
   12a54:	andeq	r6, r1, r8, asr #26
   12a58:	andeq	r6, r1, r5, ror sp
   12a5c:	andeq	r6, r1, fp, lsr #27
   12a60:	andeq	r6, r1, r4, ror #12
   12a64:	ldrdeq	r7, [r1], -sp
   12a68:	strdeq	r7, [r1], -r4
   12a6c:	andeq	r7, r1, ip, lsl r1
   12a70:	andeq	r7, r1, r5, ror r1
   12a74:	muleq	r1, r0, r1
   12a78:	strdeq	r7, [r1], -r0
   12a7c:	andeq	r6, r1, r2, lsl #15
   12a80:	andeq	r7, r1, sl, lsr #2
   12a84:	andeq	r7, r1, lr, lsr #2
   12a88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12a8c:	mov	r7, r3
   12a90:	ldr	r3, [r3]
   12a94:	mov	r8, r0
   12a98:	cmp	r3, #2
   12a9c:	mov	r5, r1
   12aa0:	ldr	r6, [sp, #32]
   12aa4:	ldr	r4, [pc, #244]	; 12ba0 <__assert_fail@plt+0x1a44>
   12aa8:	bne	12b50 <__assert_fail@plt+0x19f4>
   12aac:	ldr	r9, [r1]
   12ab0:	clz	r3, r9
   12ab4:	lsr	r3, r3, #5
   12ab8:	add	r1, r4, r3, lsl #2
   12abc:	ldr	r3, [r5, r3, lsl #2]
   12ac0:	ldr	r0, [r1, #48]	; 0x30
   12ac4:	cmp	r3, #3
   12ac8:	ldrls	pc, [pc, r3, lsl #2]
   12acc:	b	12b38 <__assert_fail@plt+0x19dc>
   12ad0:	andeq	r2, r1, r0, ror #21
   12ad4:	andeq	r2, r1, ip, lsl fp
   12ad8:	andeq	r2, r1, ip, ror fp
   12adc:	muleq	r1, r8, fp
   12ae0:	mov	r2, #5
   12ae4:	ldr	r1, [pc, #184]	; 12ba4 <__assert_fail@plt+0x1a48>
   12ae8:	mov	r0, #0
   12aec:	bl	10f40 <dcgettext@plt>
   12af0:	mov	r1, r8
   12af4:	mov	r4, r0
   12af8:	mov	r0, #4
   12afc:	bl	14550 <__assert_fail@plt+0x33f4>
   12b00:	mov	r1, #0
   12b04:	mov	r2, r4
   12b08:	mov	r3, r0
   12b0c:	mov	r0, r1
   12b10:	bl	10fac <error@plt>
   12b14:	mov	r0, #1
   12b18:	bl	127bc <__assert_fail@plt+0x1660>
   12b1c:	ldr	r3, [r2]
   12b20:	sub	r3, r3, #1
   12b24:	str	r3, [r2]
   12b28:	bl	12424 <__assert_fail@plt+0x12c8>
   12b2c:	mov	r1, r0
   12b30:	ldr	r0, [pc, #112]	; 12ba8 <__assert_fail@plt+0x1a4c>
   12b34:	bl	11e24 <__assert_fail@plt+0xcc8>
   12b38:	cmp	r9, #0
   12b3c:	ldrne	r3, [r5, #4]
   12b40:	strne	r3, [r5]
   12b44:	ldrne	r3, [r4, #52]	; 0x34
   12b48:	strne	r3, [r4, #48]	; 0x30
   12b4c:	mov	r3, #1
   12b50:	ldr	r2, [r6]
   12b54:	add	r4, r4, r3, lsl #2
   12b58:	str	r2, [r5, r3, lsl #2]
   12b5c:	add	r3, r3, #1
   12b60:	str	r8, [r4, #48]	; 0x30
   12b64:	str	r3, [r7]
   12b68:	ldr	r3, [r6]
   12b6c:	cmp	r3, #3
   12b70:	ldreq	r2, [sp, #36]	; 0x24
   12b74:	streq	r3, [r2]
   12b78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12b7c:	ldr	r3, [r2, #4]
   12b80:	sub	r3, r3, #1
   12b84:	str	r3, [r2, #4]
   12b88:	bl	12424 <__assert_fail@plt+0x12c8>
   12b8c:	mov	r1, r0
   12b90:	ldr	r0, [pc, #20]	; 12bac <__assert_fail@plt+0x1a50>
   12b94:	b	12b34 <__assert_fail@plt+0x19d8>
   12b98:	bl	124cc <__assert_fail@plt+0x1370>
   12b9c:	b	12b38 <__assert_fail@plt+0x19dc>
   12ba0:	muleq	r2, r0, r1
   12ba4:	andeq	r7, r1, r3, asr #3
   12ba8:	andeq	r8, r2, r4, lsl r1
   12bac:	andeq	r8, r2, r8, lsl r1
   12bb0:	ldr	r3, [pc, #4]	; 12bbc <__assert_fail@plt+0x1a60>
   12bb4:	str	r0, [r3]
   12bb8:	bx	lr
   12bbc:	andeq	r8, r2, r0, lsl #4
   12bc0:	ldr	r3, [pc, #4]	; 12bcc <__assert_fail@plt+0x1a70>
   12bc4:	strb	r0, [r3, #4]
   12bc8:	bx	lr
   12bcc:	andeq	r8, r2, r0, lsl #4
   12bd0:	ldr	r3, [pc, #192]	; 12c98 <__assert_fail@plt+0x1b3c>
   12bd4:	push	{r0, r1, r4, r5, r6, lr}
   12bd8:	ldr	r0, [r3]
   12bdc:	bl	15bb8 <__assert_fail@plt+0x4a5c>
   12be0:	cmp	r0, #0
   12be4:	beq	12c7c <__assert_fail@plt+0x1b20>
   12be8:	ldr	r3, [pc, #172]	; 12c9c <__assert_fail@plt+0x1b40>
   12bec:	mov	r4, r3
   12bf0:	ldrb	r2, [r3, #4]
   12bf4:	cmp	r2, #0
   12bf8:	beq	12c0c <__assert_fail@plt+0x1ab0>
   12bfc:	bl	11048 <__errno_location@plt>
   12c00:	ldr	r3, [r0]
   12c04:	cmp	r3, #32
   12c08:	beq	12c7c <__assert_fail@plt+0x1b20>
   12c0c:	mov	r2, #5
   12c10:	ldr	r1, [pc, #136]	; 12ca0 <__assert_fail@plt+0x1b44>
   12c14:	mov	r0, #0
   12c18:	bl	10f40 <dcgettext@plt>
   12c1c:	ldr	r4, [r4]
   12c20:	cmp	r4, #0
   12c24:	mov	r5, r0
   12c28:	beq	12c60 <__assert_fail@plt+0x1b04>
   12c2c:	bl	11048 <__errno_location@plt>
   12c30:	ldr	r6, [r0]
   12c34:	mov	r0, r4
   12c38:	bl	145e4 <__assert_fail@plt+0x3488>
   12c3c:	str	r5, [sp]
   12c40:	ldr	r2, [pc, #92]	; 12ca4 <__assert_fail@plt+0x1b48>
   12c44:	mov	r1, r6
   12c48:	mov	r3, r0
   12c4c:	mov	r0, #0
   12c50:	bl	10fac <error@plt>
   12c54:	ldr	r3, [pc, #76]	; 12ca8 <__assert_fail@plt+0x1b4c>
   12c58:	ldr	r0, [r3]
   12c5c:	bl	10eec <_exit@plt>
   12c60:	bl	11048 <__errno_location@plt>
   12c64:	mov	r3, r5
   12c68:	ldr	r2, [pc, #60]	; 12cac <__assert_fail@plt+0x1b50>
   12c6c:	ldr	r1, [r0]
   12c70:	mov	r0, r4
   12c74:	bl	10fac <error@plt>
   12c78:	b	12c54 <__assert_fail@plt+0x1af8>
   12c7c:	ldr	r3, [pc, #44]	; 12cb0 <__assert_fail@plt+0x1b54>
   12c80:	ldr	r0, [r3]
   12c84:	bl	15bb8 <__assert_fail@plt+0x4a5c>
   12c88:	cmp	r0, #0
   12c8c:	bne	12c54 <__assert_fail@plt+0x1af8>
   12c90:	add	sp, sp, #8
   12c94:	pop	{r4, r5, r6, pc}
   12c98:	andeq	r8, r2, r4, lsl #3
   12c9c:	andeq	r8, r2, r0, lsl #4
   12ca0:	andeq	r7, r1, r0, lsl #7
   12ca4:	andeq	r7, r1, ip, lsl #7
   12ca8:	andeq	r8, r2, r4, lsr #2
   12cac:	andeq	r6, r1, r2, asr #15
   12cb0:	andeq	r8, r2, r8, ror r1
   12cb4:	push	{r4, r5}
   12cb8:	pop	{r4, r5}
   12cbc:	b	10ec8 <posix_fadvise64@plt>
   12cc0:	cmp	r0, #0
   12cc4:	bxeq	lr
   12cc8:	push	{r0, r1, r2, r3, r4, lr}
   12ccc:	mov	r4, r1
   12cd0:	bl	11078 <fileno@plt>
   12cd4:	mov	r2, #0
   12cd8:	mov	r3, #0
   12cdc:	str	r4, [sp, #8]
   12ce0:	strd	r2, [sp]
   12ce4:	bl	10ec8 <posix_fadvise64@plt>
   12ce8:	add	sp, sp, #16
   12cec:	pop	{r4, pc}
   12cf0:	push	{r0, r1, r2, r4, r5, lr}
   12cf4:	mov	r4, r0
   12cf8:	bl	11078 <fileno@plt>
   12cfc:	cmp	r0, #0
   12d00:	mov	r0, r4
   12d04:	bge	12d14 <__assert_fail@plt+0x1bb8>
   12d08:	add	sp, sp, #12
   12d0c:	pop	{r4, r5, lr}
   12d10:	b	110a8 <fclose@plt>
   12d14:	bl	10fdc <__freading@plt>
   12d18:	cmp	r0, #0
   12d1c:	bne	12d58 <__assert_fail@plt+0x1bfc>
   12d20:	mov	r0, r4
   12d24:	bl	12d98 <__assert_fail@plt+0x1c3c>
   12d28:	cmp	r0, #0
   12d2c:	bne	12d8c <__assert_fail@plt+0x1c30>
   12d30:	mov	r5, #0
   12d34:	mov	r0, r4
   12d38:	bl	110a8 <fclose@plt>
   12d3c:	cmp	r5, #0
   12d40:	beq	12d50 <__assert_fail@plt+0x1bf4>
   12d44:	bl	11048 <__errno_location@plt>
   12d48:	str	r5, [r0]
   12d4c:	mvn	r0, #0
   12d50:	add	sp, sp, #12
   12d54:	pop	{r4, r5, pc}
   12d58:	mov	r0, r4
   12d5c:	bl	11078 <fileno@plt>
   12d60:	mov	r3, #1
   12d64:	str	r3, [sp]
   12d68:	mov	r2, #0
   12d6c:	mov	r3, #0
   12d70:	bl	10f70 <lseek64@plt>
   12d74:	mvn	r3, #0
   12d78:	mvn	r2, #0
   12d7c:	cmp	r1, r3
   12d80:	cmpeq	r0, r2
   12d84:	bne	12d20 <__assert_fail@plt+0x1bc4>
   12d88:	b	12d30 <__assert_fail@plt+0x1bd4>
   12d8c:	bl	11048 <__errno_location@plt>
   12d90:	ldr	r5, [r0]
   12d94:	b	12d34 <__assert_fail@plt+0x1bd8>
   12d98:	push	{r0, r1, r4, lr}
   12d9c:	subs	r4, r0, #0
   12da0:	bne	12db4 <__assert_fail@plt+0x1c58>
   12da4:	mov	r0, r4
   12da8:	add	sp, sp, #8
   12dac:	pop	{r4, lr}
   12db0:	b	10ed4 <fflush@plt>
   12db4:	bl	10fdc <__freading@plt>
   12db8:	cmp	r0, #0
   12dbc:	beq	12da4 <__assert_fail@plt+0x1c48>
   12dc0:	ldr	r3, [r4]
   12dc4:	tst	r3, #256	; 0x100
   12dc8:	beq	12da4 <__assert_fail@plt+0x1c48>
   12dcc:	mov	r3, #1
   12dd0:	str	r3, [sp]
   12dd4:	mov	r2, #0
   12dd8:	mov	r3, #0
   12ddc:	mov	r0, r4
   12de0:	bl	12ed0 <__assert_fail@plt+0x1d74>
   12de4:	b	12da4 <__assert_fail@plt+0x1c48>
   12de8:	push	{r4, r5, r6, lr}
   12dec:	mov	r6, r1
   12df0:	bl	110f0 <fopen64@plt>
   12df4:	subs	r4, r0, #0
   12df8:	beq	12e30 <__assert_fail@plt+0x1cd4>
   12dfc:	bl	11078 <fileno@plt>
   12e00:	cmp	r0, #2
   12e04:	bhi	12e30 <__assert_fail@plt+0x1cd4>
   12e08:	bl	147c4 <__assert_fail@plt+0x3668>
   12e0c:	subs	r5, r0, #0
   12e10:	bge	12e38 <__assert_fail@plt+0x1cdc>
   12e14:	bl	11048 <__errno_location@plt>
   12e18:	ldr	r6, [r0]
   12e1c:	mov	r5, r0
   12e20:	mov	r0, r4
   12e24:	bl	12cf0 <__assert_fail@plt+0x1b94>
   12e28:	str	r6, [r5]
   12e2c:	mov	r4, #0
   12e30:	mov	r0, r4
   12e34:	pop	{r4, r5, r6, pc}
   12e38:	mov	r0, r4
   12e3c:	bl	12cf0 <__assert_fail@plt+0x1b94>
   12e40:	cmp	r0, #0
   12e44:	beq	12e64 <__assert_fail@plt+0x1d08>
   12e48:	bl	11048 <__errno_location@plt>
   12e4c:	ldr	r6, [r0]
   12e50:	mov	r4, r0
   12e54:	mov	r0, r5
   12e58:	bl	11144 <close@plt>
   12e5c:	str	r6, [r4]
   12e60:	b	12e2c <__assert_fail@plt+0x1cd0>
   12e64:	mov	r1, r6
   12e68:	mov	r0, r5
   12e6c:	bl	10e8c <fdopen@plt>
   12e70:	subs	r4, r0, #0
   12e74:	bne	12e30 <__assert_fail@plt+0x1cd4>
   12e78:	b	12e48 <__assert_fail@plt+0x1cec>
   12e7c:	push	{r0, r1, r2, r4, r5, lr}
   12e80:	mov	r5, r0
   12e84:	bl	11048 <__errno_location@plt>
   12e88:	ldr	r3, [r0]
   12e8c:	mov	r4, r0
   12e90:	str	r3, [sp]
   12e94:	str	r3, [sp, #4]
   12e98:	mov	r3, #0
   12e9c:	str	r3, [r0]
   12ea0:	mov	r0, r5
   12ea4:	bl	10ee0 <free@plt>
   12ea8:	ldr	r3, [r4]
   12eac:	add	r2, sp, #8
   12eb0:	cmp	r3, #0
   12eb4:	moveq	r3, #4
   12eb8:	movne	r3, #0
   12ebc:	add	r3, r2, r3
   12ec0:	ldr	r3, [r3, #-8]
   12ec4:	str	r3, [r4]
   12ec8:	add	sp, sp, #12
   12ecc:	pop	{r4, r5, pc}
   12ed0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   12ed4:	mov	r4, r0
   12ed8:	ldmib	r0, {ip, lr}
   12edc:	ldr	r8, [sp, #32]
   12ee0:	cmp	lr, ip
   12ee4:	bne	12f50 <__assert_fail@plt+0x1df4>
   12ee8:	ldr	lr, [r0, #20]
   12eec:	ldr	ip, [r0, #16]
   12ef0:	cmp	lr, ip
   12ef4:	bne	12f50 <__assert_fail@plt+0x1df4>
   12ef8:	ldr	r5, [r0, #36]	; 0x24
   12efc:	cmp	r5, #0
   12f00:	bne	12f50 <__assert_fail@plt+0x1df4>
   12f04:	mov	r6, r2
   12f08:	mov	r7, r3
   12f0c:	bl	11078 <fileno@plt>
   12f10:	mov	r2, r6
   12f14:	mov	r3, r7
   12f18:	str	r8, [sp]
   12f1c:	bl	10f70 <lseek64@plt>
   12f20:	mvn	r3, #0
   12f24:	mvn	r2, #0
   12f28:	cmp	r1, r3
   12f2c:	cmpeq	r0, r2
   12f30:	mvneq	r0, #0
   12f34:	ldrne	r3, [r4]
   12f38:	strdne	r0, [r4, #80]	; 0x50
   12f3c:	movne	r0, r5
   12f40:	bicne	r3, r3, #16
   12f44:	strne	r3, [r4]
   12f48:	add	sp, sp, #8
   12f4c:	pop	{r4, r5, r6, r7, r8, pc}
   12f50:	str	r8, [sp, #32]
   12f54:	mov	r0, r4
   12f58:	add	sp, sp, #8
   12f5c:	pop	{r4, r5, r6, r7, r8, lr}
   12f60:	b	110b4 <fseeko64@plt>
   12f64:	push	{lr}		; (str lr, [sp, #-4]!)
   12f68:	sub	sp, sp, #268	; 0x10c
   12f6c:	ldr	r2, [pc, #64]	; 12fb4 <__assert_fail@plt+0x1e58>
   12f70:	add	r1, sp, #4
   12f74:	bl	14740 <__assert_fail@plt+0x35e4>
   12f78:	cmp	r0, #0
   12f7c:	movne	r0, #0
   12f80:	bne	12fac <__assert_fail@plt+0x1e50>
   12f84:	ldr	r1, [pc, #44]	; 12fb8 <__assert_fail@plt+0x1e5c>
   12f88:	add	r0, sp, #4
   12f8c:	bl	10ebc <strcmp@plt>
   12f90:	cmp	r0, #0
   12f94:	beq	12fac <__assert_fail@plt+0x1e50>
   12f98:	ldr	r1, [pc, #28]	; 12fbc <__assert_fail@plt+0x1e60>
   12f9c:	add	r0, sp, #4
   12fa0:	bl	10ebc <strcmp@plt>
   12fa4:	adds	r0, r0, #0
   12fa8:	movne	r0, #1
   12fac:	add	sp, sp, #268	; 0x10c
   12fb0:	pop	{pc}		; (ldr pc, [sp], #4)
   12fb4:	andeq	r0, r0, r1, lsl #2
   12fb8:	muleq	r1, r3, r3
   12fbc:	muleq	r1, r5, r3
   12fc0:	mov	r3, #0
   12fc4:	str	r3, [r0]
   12fc8:	str	r3, [r0, #4]
   12fcc:	str	r3, [r0, #8]
   12fd0:	bx	lr
   12fd4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fd8:	mov	r4, r0
   12fdc:	ldr	r5, [r0, #8]
   12fe0:	ldr	r6, [r0]
   12fe4:	mov	r0, r1
   12fe8:	mov	r9, r1
   12fec:	mov	r8, r2
   12ff0:	bl	11138 <feof_unlocked@plt>
   12ff4:	add	r6, r5, r6
   12ff8:	cmp	r0, #0
   12ffc:	moveq	sl, r5
   13000:	mvneq	fp, #0
   13004:	beq	13018 <__assert_fail@plt+0x1ebc>
   13008:	mov	r4, #0
   1300c:	mov	r0, r4
   13010:	add	sp, sp, #12
   13014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13018:	mov	r0, r9
   1301c:	bl	10f34 <getc_unlocked@plt>
   13020:	cmn	r0, #1
   13024:	mov	r7, r0
   13028:	bne	13054 <__assert_fail@plt+0x1ef8>
   1302c:	cmp	r5, sl
   13030:	beq	13008 <__assert_fail@plt+0x1eac>
   13034:	mov	r0, r9
   13038:	bl	10f94 <ferror_unlocked@plt>
   1303c:	cmp	r0, #0
   13040:	bne	13008 <__assert_fail@plt+0x1eac>
   13044:	ldrb	r2, [sl, #-1]
   13048:	cmp	r2, r8
   1304c:	beq	130a4 <__assert_fail@plt+0x1f48>
   13050:	mov	r7, r8
   13054:	cmp	sl, r6
   13058:	movne	r2, sl
   1305c:	bne	13094 <__assert_fail@plt+0x1f38>
   13060:	mov	r3, #1
   13064:	ldr	r6, [r4]
   13068:	mov	r2, #1
   1306c:	str	r3, [sp]
   13070:	mov	r0, r5
   13074:	mov	r3, fp
   13078:	mov	r1, r4
   1307c:	bl	14e4c <__assert_fail@plt+0x3cf0>
   13080:	add	r2, r0, r6
   13084:	ldr	r6, [r4]
   13088:	mov	r5, r0
   1308c:	add	r6, r0, r6
   13090:	str	r0, [r4, #8]
   13094:	cmp	r7, r8
   13098:	add	sl, r2, #1
   1309c:	strb	r7, [r2]
   130a0:	bne	13018 <__assert_fail@plt+0x1ebc>
   130a4:	sub	r5, sl, r5
   130a8:	str	r5, [r4, #4]
   130ac:	b	1300c <__assert_fail@plt+0x1eb0>
   130b0:	mov	r2, #10
   130b4:	b	12fd4 <__assert_fail@plt+0x1e78>
   130b8:	ldr	r0, [r0, #8]
   130bc:	b	12e7c <__assert_fail@plt+0x1d20>
   130c0:	push	{r4, r5, r6, r7, r8, lr}
   130c4:	mov	r4, r0
   130c8:	sub	r5, r1, #1
   130cc:	add	r6, r0, r2
   130d0:	cmp	r4, r6
   130d4:	bne	130e0 <__assert_fail@plt+0x1f84>
   130d8:	mov	r0, #0
   130dc:	pop	{r4, r5, r6, r7, r8, pc}
   130e0:	bl	10fe8 <__ctype_toupper_loc@plt>
   130e4:	ldrb	r7, [r4], #1
   130e8:	ldrb	r2, [r5, #1]!
   130ec:	ldr	r3, [r0]
   130f0:	ldr	r0, [r3, r7, lsl #2]
   130f4:	ldr	r3, [r3, r2, lsl #2]
   130f8:	subs	r0, r0, r3
   130fc:	beq	130d0 <__assert_fail@plt+0x1f74>
   13100:	pop	{r4, r5, r6, r7, r8, pc}
   13104:	push	{r4, r5, r6, lr}
   13108:	subs	r5, r0, #0
   1310c:	bne	13124 <__assert_fail@plt+0x1fc8>
   13110:	ldr	r3, [pc, #124]	; 13194 <__assert_fail@plt+0x2038>
   13114:	ldr	r0, [pc, #124]	; 13198 <__assert_fail@plt+0x203c>
   13118:	ldr	r1, [r3]
   1311c:	bl	11114 <fputs@plt>
   13120:	bl	1112c <abort@plt>
   13124:	mov	r1, #47	; 0x2f
   13128:	bl	110d8 <strrchr@plt>
   1312c:	cmp	r0, #0
   13130:	addne	r4, r0, #1
   13134:	moveq	r4, r5
   13138:	sub	r3, r4, r5
   1313c:	cmp	r3, #6
   13140:	ble	13180 <__assert_fail@plt+0x2024>
   13144:	mov	r2, #7
   13148:	ldr	r1, [pc, #76]	; 1319c <__assert_fail@plt+0x2040>
   1314c:	sub	r0, r4, #7
   13150:	bl	11120 <strncmp@plt>
   13154:	cmp	r0, #0
   13158:	bne	13180 <__assert_fail@plt+0x2024>
   1315c:	mov	r2, #3
   13160:	ldr	r1, [pc, #56]	; 131a0 <__assert_fail@plt+0x2044>
   13164:	mov	r0, r4
   13168:	bl	11120 <strncmp@plt>
   1316c:	cmp	r0, #0
   13170:	movne	r5, r4
   13174:	ldreq	r3, [pc, #40]	; 131a4 <__assert_fail@plt+0x2048>
   13178:	addeq	r5, r4, #3
   1317c:	streq	r5, [r3]
   13180:	ldr	r3, [pc, #32]	; 131a8 <__assert_fail@plt+0x204c>
   13184:	str	r5, [r3]
   13188:	ldr	r3, [pc, #28]	; 131ac <__assert_fail@plt+0x2050>
   1318c:	str	r5, [r3]
   13190:	pop	{r4, r5, r6, pc}
   13194:	andeq	r8, r2, r8, ror r1
   13198:	muleq	r1, fp, r3
   1319c:	ldrdeq	r7, [r1], -r3
   131a0:	ldrdeq	r7, [r1], -fp
   131a4:	andeq	r8, r2, r8, ror #2
   131a8:	andeq	r8, r2, r8, lsl #4
   131ac:	andeq	r8, r2, ip, ror #2
   131b0:	push	{r4, r5, r6, lr}
   131b4:	mov	r2, #48	; 0x30
   131b8:	mov	r5, r1
   131bc:	mov	r1, #0
   131c0:	mov	r4, r0
   131c4:	bl	11060 <memset@plt>
   131c8:	cmp	r5, #10
   131cc:	bne	131d4 <__assert_fail@plt+0x2078>
   131d0:	bl	1112c <abort@plt>
   131d4:	str	r5, [r4]
   131d8:	mov	r0, r4
   131dc:	pop	{r4, r5, r6, pc}
   131e0:	push	{r4, r5, r6, lr}
   131e4:	mov	r4, r0
   131e8:	mov	r5, r1
   131ec:	bl	15dec <__assert_fail@plt+0x4c90>
   131f0:	ldrb	r3, [r0]
   131f4:	bic	r3, r3, #32
   131f8:	cmp	r3, #85	; 0x55
   131fc:	bne	1326c <__assert_fail@plt+0x2110>
   13200:	ldrb	r3, [r0, #1]
   13204:	bic	r3, r3, #32
   13208:	cmp	r3, #84	; 0x54
   1320c:	bne	13244 <__assert_fail@plt+0x20e8>
   13210:	ldrb	r3, [r0, #2]
   13214:	bic	r3, r3, #32
   13218:	cmp	r3, #70	; 0x46
   1321c:	bne	13244 <__assert_fail@plt+0x20e8>
   13220:	ldrb	r3, [r0, #3]
   13224:	cmp	r3, #45	; 0x2d
   13228:	bne	13244 <__assert_fail@plt+0x20e8>
   1322c:	ldrb	r3, [r0, #4]
   13230:	cmp	r3, #56	; 0x38
   13234:	bne	13244 <__assert_fail@plt+0x20e8>
   13238:	ldrb	r3, [r0, #5]
   1323c:	cmp	r3, #0
   13240:	beq	13258 <__assert_fail@plt+0x20fc>
   13244:	ldr	r1, [pc, #144]	; 132dc <__assert_fail@plt+0x2180>
   13248:	ldr	r0, [pc, #144]	; 132e0 <__assert_fail@plt+0x2184>
   1324c:	cmp	r5, #9
   13250:	movne	r0, r1
   13254:	pop	{r4, r5, r6, pc}
   13258:	ldrb	r3, [r4]
   1325c:	ldr	r1, [pc, #128]	; 132e4 <__assert_fail@plt+0x2188>
   13260:	ldr	r0, [pc, #128]	; 132e8 <__assert_fail@plt+0x218c>
   13264:	cmp	r3, #96	; 0x60
   13268:	b	13250 <__assert_fail@plt+0x20f4>
   1326c:	cmp	r3, #71	; 0x47
   13270:	bne	13244 <__assert_fail@plt+0x20e8>
   13274:	ldrb	r3, [r0, #1]
   13278:	bic	r3, r3, #32
   1327c:	cmp	r3, #66	; 0x42
   13280:	bne	13244 <__assert_fail@plt+0x20e8>
   13284:	ldrb	r3, [r0, #2]
   13288:	cmp	r3, #49	; 0x31
   1328c:	bne	13244 <__assert_fail@plt+0x20e8>
   13290:	ldrb	r3, [r0, #3]
   13294:	cmp	r3, #56	; 0x38
   13298:	bne	13244 <__assert_fail@plt+0x20e8>
   1329c:	ldrb	r3, [r0, #4]
   132a0:	cmp	r3, #48	; 0x30
   132a4:	bne	13244 <__assert_fail@plt+0x20e8>
   132a8:	ldrb	r3, [r0, #5]
   132ac:	cmp	r3, #51	; 0x33
   132b0:	bne	13244 <__assert_fail@plt+0x20e8>
   132b4:	ldrb	r3, [r0, #6]
   132b8:	cmp	r3, #48	; 0x30
   132bc:	bne	13244 <__assert_fail@plt+0x20e8>
   132c0:	ldrb	r3, [r0, #7]
   132c4:	cmp	r3, #0
   132c8:	bne	13244 <__assert_fail@plt+0x20e8>
   132cc:	ldrb	r3, [r4]
   132d0:	ldr	r1, [pc, #20]	; 132ec <__assert_fail@plt+0x2190>
   132d4:	ldr	r0, [pc, #20]	; 132f0 <__assert_fail@plt+0x2194>
   132d8:	b	13264 <__assert_fail@plt+0x2108>
   132dc:	andeq	r7, r1, r5, asr #8
   132e0:	andeq	r7, r1, r3, asr #8
   132e4:	andeq	r7, r1, r8, lsr r4
   132e8:	andeq	r7, r1, r4, lsr r4
   132ec:	andeq	r7, r1, r0, asr #8
   132f0:	andeq	r7, r1, ip, lsr r4
   132f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132f8:	sub	sp, sp, #108	; 0x6c
   132fc:	mov	r8, r0
   13300:	str	r3, [sp, #36]	; 0x24
   13304:	mov	r5, r1
   13308:	str	r2, [sp, #44]	; 0x2c
   1330c:	ldr	sl, [sp, #144]	; 0x90
   13310:	bl	10f7c <__ctype_get_mb_cur_max@plt>
   13314:	ldr	r3, [sp, #148]	; 0x94
   13318:	mov	r7, #0
   1331c:	str	r7, [sp, #48]	; 0x30
   13320:	lsr	r6, r3, #1
   13324:	and	r6, r6, #1
   13328:	mov	r3, #1
   1332c:	str	r3, [sp, #72]	; 0x48
   13330:	str	r7, [sp, #24]
   13334:	str	r7, [sp, #32]
   13338:	str	r7, [sp, #40]	; 0x28
   1333c:	str	r7, [sp, #60]	; 0x3c
   13340:	str	r0, [sp, #76]	; 0x4c
   13344:	cmp	sl, #10
   13348:	ldrls	pc, [pc, sl, lsl #2]
   1334c:	b	13588 <__assert_fail@plt+0x242c>
   13350:	andeq	r3, r1, ip, ror r3
   13354:	andeq	r4, r1, r0, lsl r0
   13358:	andeq	r3, r1, r4, asr r5
   1335c:	andeq	r3, r1, r0, lsr #11
   13360:	andeq	r3, r1, r0, lsr r5
   13364:	andeq	r3, r1, r8, lsl #7
   13368:	strdeq	r3, [r1], -r0
   1336c:	andeq	r3, r1, ip, lsl #11
   13370:	andeq	r3, r1, r0, lsl #9
   13374:	andeq	r3, r1, r0, lsl #9
   13378:	andeq	r3, r1, r0, lsl #9
   1337c:	mov	r6, #0
   13380:	mov	r4, #0
   13384:	b	133b4 <__assert_fail@plt+0x2258>
   13388:	cmp	r6, #0
   1338c:	bne	135b0 <__assert_fail@plt+0x2454>
   13390:	cmp	r5, #0
   13394:	movne	r3, #34	; 0x22
   13398:	strbne	r3, [r8]
   1339c:	mov	r3, #1
   133a0:	str	r3, [sp, #24]
   133a4:	str	r3, [sp, #32]
   133a8:	mov	r4, #1
   133ac:	ldr	r3, [pc, #3172]	; 14018 <__assert_fail@plt+0x2ebc>
   133b0:	str	r3, [sp, #40]	; 0x28
   133b4:	mov	r9, r5
   133b8:	mov	r3, #0
   133bc:	str	r7, [sp, #68]	; 0x44
   133c0:	str	r3, [sp, #28]
   133c4:	ldr	r3, [sp, #36]	; 0x24
   133c8:	cmn	r3, #1
   133cc:	bne	13f5c <__assert_fail@plt+0x2e00>
   133d0:	ldr	r3, [sp, #44]	; 0x2c
   133d4:	ldr	r2, [sp, #28]
   133d8:	ldrb	r3, [r3, r2]
   133dc:	adds	r3, r3, #0
   133e0:	movne	r3, #1
   133e4:	str	r3, [sp, #52]	; 0x34
   133e8:	ldr	r3, [sp, #52]	; 0x34
   133ec:	cmp	r3, #0
   133f0:	bne	135d8 <__assert_fail@plt+0x247c>
   133f4:	sub	r2, sl, #2
   133f8:	clz	r2, r2
   133fc:	lsr	r2, r2, #5
   13400:	and	r3, r6, r2
   13404:	cmp	r4, #0
   13408:	movne	r3, #0
   1340c:	andeq	r3, r3, #1
   13410:	cmp	r3, #0
   13414:	bne	137a0 <__assert_fail@plt+0x2644>
   13418:	eor	r3, r6, #1
   1341c:	ands	r2, r2, r3
   13420:	beq	13f94 <__assert_fail@plt+0x2e38>
   13424:	ldr	r3, [sp, #68]	; 0x44
   13428:	cmp	r3, #0
   1342c:	beq	13fcc <__assert_fail@plt+0x2e70>
   13430:	ldr	r3, [sp, #72]	; 0x48
   13434:	cmp	r3, #0
   13438:	beq	13f70 <__assert_fail@plt+0x2e14>
   1343c:	ldr	r3, [sp, #160]	; 0xa0
   13440:	ldr	r2, [sp, #44]	; 0x2c
   13444:	str	r3, [sp, #16]
   13448:	ldr	r3, [sp, #156]	; 0x9c
   1344c:	ldr	r1, [sp, #60]	; 0x3c
   13450:	str	r3, [sp, #12]
   13454:	ldr	r3, [sp, #152]	; 0x98
   13458:	str	r3, [sp, #8]
   1345c:	ldr	r3, [sp, #148]	; 0x94
   13460:	str	r3, [sp, #4]
   13464:	mov	r3, #5
   13468:	str	r3, [sp]
   1346c:	ldr	r3, [sp, #36]	; 0x24
   13470:	mov	r0, r8
   13474:	bl	132f4 <__assert_fail@plt+0x2198>
   13478:	mov	r4, r0
   1347c:	b	13fc0 <__assert_fail@plt+0x2e64>
   13480:	cmp	sl, #10
   13484:	beq	134e0 <__assert_fail@plt+0x2384>
   13488:	ldr	r4, [pc, #2956]	; 1401c <__assert_fail@plt+0x2ec0>
   1348c:	mov	r2, #5
   13490:	mov	r1, r4
   13494:	mov	r0, #0
   13498:	bl	10f40 <dcgettext@plt>
   1349c:	cmp	r0, r4
   134a0:	str	r0, [sp, #156]	; 0x9c
   134a4:	bne	134b4 <__assert_fail@plt+0x2358>
   134a8:	mov	r1, sl
   134ac:	bl	131e0 <__assert_fail@plt+0x2084>
   134b0:	str	r0, [sp, #156]	; 0x9c
   134b4:	ldr	r4, [pc, #2916]	; 14020 <__assert_fail@plt+0x2ec4>
   134b8:	mov	r2, #5
   134bc:	mov	r1, r4
   134c0:	mov	r0, #0
   134c4:	bl	10f40 <dcgettext@plt>
   134c8:	cmp	r0, r4
   134cc:	str	r0, [sp, #160]	; 0xa0
   134d0:	bne	134e0 <__assert_fail@plt+0x2384>
   134d4:	mov	r1, sl
   134d8:	bl	131e0 <__assert_fail@plt+0x2084>
   134dc:	str	r0, [sp, #160]	; 0xa0
   134e0:	cmp	r6, #0
   134e4:	moveq	r4, r6
   134e8:	beq	13500 <__assert_fail@plt+0x23a4>
   134ec:	mov	r4, #0
   134f0:	b	13510 <__assert_fail@plt+0x23b4>
   134f4:	cmp	r5, r4
   134f8:	strbhi	r3, [r8, r4]
   134fc:	add	r4, r4, #1
   13500:	ldr	r3, [sp, #156]	; 0x9c
   13504:	ldrb	r3, [r3, r4]
   13508:	cmp	r3, #0
   1350c:	bne	134f4 <__assert_fail@plt+0x2398>
   13510:	ldr	r0, [sp, #160]	; 0xa0
   13514:	bl	11030 <strlen@plt>
   13518:	ldr	r3, [sp, #160]	; 0xa0
   1351c:	str	r3, [sp, #40]	; 0x28
   13520:	mov	r3, #1
   13524:	str	r3, [sp, #24]
   13528:	str	r0, [sp, #32]
   1352c:	b	133b4 <__assert_fail@plt+0x2258>
   13530:	mov	r3, #1
   13534:	cmp	r6, #0
   13538:	streq	r3, [sp, #24]
   1353c:	beq	1355c <__assert_fail@plt+0x2400>
   13540:	str	r3, [sp, #32]
   13544:	ldr	r3, [pc, #2772]	; 14020 <__assert_fail@plt+0x2ec4>
   13548:	mov	r4, #0
   1354c:	str	r3, [sp, #40]	; 0x28
   13550:	b	13580 <__assert_fail@plt+0x2424>
   13554:	cmp	r6, #0
   13558:	bne	135c8 <__assert_fail@plt+0x246c>
   1355c:	cmp	r5, #0
   13560:	movne	r3, #39	; 0x27
   13564:	strbne	r3, [r8]
   13568:	mov	r3, #1
   1356c:	str	r3, [sp, #32]
   13570:	mov	r6, #0
   13574:	ldr	r3, [pc, #2724]	; 14020 <__assert_fail@plt+0x2ec4>
   13578:	mov	r4, #1
   1357c:	str	r3, [sp, #40]	; 0x28
   13580:	mov	sl, #2
   13584:	b	133b4 <__assert_fail@plt+0x2258>
   13588:	bl	1112c <abort@plt>
   1358c:	mov	r6, #0
   13590:	mov	r3, #1
   13594:	str	r3, [sp, #24]
   13598:	mov	r4, r6
   1359c:	b	133b4 <__assert_fail@plt+0x2258>
   135a0:	mov	r6, #1
   135a4:	str	r6, [sp, #24]
   135a8:	str	r6, [sp, #32]
   135ac:	b	13544 <__assert_fail@plt+0x23e8>
   135b0:	mov	r3, #1
   135b4:	str	r3, [sp, #32]
   135b8:	ldr	r3, [pc, #2648]	; 14018 <__assert_fail@plt+0x2ebc>
   135bc:	str	r6, [sp, #24]
   135c0:	str	r3, [sp, #40]	; 0x28
   135c4:	b	13380 <__assert_fail@plt+0x2224>
   135c8:	mov	r3, #1
   135cc:	str	r3, [sp, #32]
   135d0:	ldr	r3, [pc, #2632]	; 14020 <__assert_fail@plt+0x2ec4>
   135d4:	b	135c0 <__assert_fail@plt+0x2464>
   135d8:	ldr	r3, [sp, #32]
   135dc:	ldr	fp, [sp, #24]
   135e0:	cmp	sl, #2
   135e4:	moveq	fp, #0
   135e8:	andne	fp, fp, #1
   135ec:	adds	r5, r3, #0
   135f0:	movne	r5, #1
   135f4:	ands	r3, r5, fp
   135f8:	str	r3, [sp, #64]	; 0x40
   135fc:	beq	136cc <__assert_fail@plt+0x2570>
   13600:	ldr	r2, [sp, #32]
   13604:	ldr	r3, [sp, #28]
   13608:	add	r7, r3, r2
   1360c:	mov	r3, r2
   13610:	ldr	r2, [sp, #36]	; 0x24
   13614:	cmp	r3, #1
   13618:	movls	r3, #0
   1361c:	movhi	r3, #1
   13620:	cmn	r2, #1
   13624:	movne	r3, #0
   13628:	cmp	r3, #0
   1362c:	beq	1363c <__assert_fail@plt+0x24e0>
   13630:	ldr	r0, [sp, #44]	; 0x2c
   13634:	bl	11030 <strlen@plt>
   13638:	str	r0, [sp, #36]	; 0x24
   1363c:	ldr	r3, [sp, #36]	; 0x24
   13640:	cmp	r3, r7
   13644:	bcc	136c4 <__assert_fail@plt+0x2568>
   13648:	ldr	r3, [sp, #44]	; 0x2c
   1364c:	ldr	r0, [sp, #28]
   13650:	ldr	r2, [sp, #32]
   13654:	ldr	r1, [sp, #40]	; 0x28
   13658:	add	r0, r3, r0
   1365c:	bl	10f1c <memcmp@plt>
   13660:	cmp	r0, #0
   13664:	bne	136c4 <__assert_fail@plt+0x2568>
   13668:	cmp	r6, #0
   1366c:	beq	136cc <__assert_fail@plt+0x2570>
   13670:	str	r6, [sp, #24]
   13674:	ldr	r3, [sp, #24]
   13678:	ldr	r2, [sp, #44]	; 0x2c
   1367c:	cmp	sl, #2
   13680:	movne	r3, #0
   13684:	andeq	r3, r3, #1
   13688:	cmp	r3, #0
   1368c:	ldr	r3, [sp, #160]	; 0xa0
   13690:	movne	sl, #4
   13694:	str	r3, [sp, #16]
   13698:	ldr	r3, [sp, #156]	; 0x9c
   1369c:	str	sl, [sp]
   136a0:	str	r3, [sp, #12]
   136a4:	mov	r3, #0
   136a8:	str	r3, [sp, #8]
   136ac:	ldr	r3, [sp, #148]	; 0x94
   136b0:	mov	r1, r9
   136b4:	bic	r3, r3, #2
   136b8:	str	r3, [sp, #4]
   136bc:	ldr	r3, [sp, #36]	; 0x24
   136c0:	b	13470 <__assert_fail@plt+0x2314>
   136c4:	mov	r3, #0
   136c8:	str	r3, [sp, #64]	; 0x40
   136cc:	ldr	r2, [sp, #28]
   136d0:	ldr	r3, [sp, #44]	; 0x2c
   136d4:	add	r3, r3, r2
   136d8:	str	r3, [sp, #80]	; 0x50
   136dc:	ldr	r3, [sp, #44]	; 0x2c
   136e0:	ldrb	r7, [r3, r2]
   136e4:	cmp	r7, #58	; 0x3a
   136e8:	bhi	13850 <__assert_fail@plt+0x26f4>
   136ec:	cmp	r7, #43	; 0x2b
   136f0:	bcs	138a4 <__assert_fail@plt+0x2748>
   136f4:	cmp	r7, #32
   136f8:	beq	138fc <__assert_fail@plt+0x27a0>
   136fc:	bhi	137a8 <__assert_fail@plt+0x264c>
   13700:	cmp	r7, #9
   13704:	beq	13bb0 <__assert_fail@plt+0x2a54>
   13708:	bhi	1376c <__assert_fail@plt+0x2610>
   1370c:	cmp	r7, #7
   13710:	beq	13c5c <__assert_fail@plt+0x2b00>
   13714:	bhi	13918 <__assert_fail@plt+0x27bc>
   13718:	cmp	r7, #0
   1371c:	beq	13934 <__assert_fail@plt+0x27d8>
   13720:	ldr	r3, [sp, #76]	; 0x4c
   13724:	cmp	r3, #1
   13728:	bne	13ca0 <__assert_fail@plt+0x2b44>
   1372c:	bl	1100c <__ctype_b_loc@plt>
   13730:	sxth	r3, r7
   13734:	lsl	r3, r3, #1
   13738:	ldr	r2, [r0]
   1373c:	ldrh	r5, [r2, r3]
   13740:	ldr	r3, [sp, #76]	; 0x4c
   13744:	str	r3, [sp, #56]	; 0x38
   13748:	lsr	r5, r5, #14
   1374c:	and	r5, r5, #1
   13750:	ldr	r3, [sp, #24]
   13754:	eor	fp, r5, #1
   13758:	and	fp, fp, r3
   1375c:	ands	fp, fp, #255	; 0xff
   13760:	beq	13ae8 <__assert_fail@plt+0x298c>
   13764:	mov	r5, #0
   13768:	b	13d4c <__assert_fail@plt+0x2bf0>
   1376c:	cmp	r7, #11
   13770:	beq	13bb8 <__assert_fail@plt+0x2a5c>
   13774:	bcc	13c54 <__assert_fail@plt+0x2af8>
   13778:	cmp	r7, #12
   1377c:	beq	13c64 <__assert_fail@plt+0x2b08>
   13780:	cmp	r7, #13
   13784:	moveq	r3, #114	; 0x72
   13788:	bne	13720 <__assert_fail@plt+0x25c4>
   1378c:	cmp	sl, #2
   13790:	movne	r2, #0
   13794:	andeq	r2, r6, #1
   13798:	cmp	r2, #0
   1379c:	beq	1391c <__assert_fail@plt+0x27c0>
   137a0:	mov	sl, #2
   137a4:	b	13674 <__assert_fail@plt+0x2518>
   137a8:	cmp	r7, #37	; 0x25
   137ac:	beq	138a4 <__assert_fail@plt+0x2748>
   137b0:	bhi	137c4 <__assert_fail@plt+0x2668>
   137b4:	cmp	r7, #35	; 0x23
   137b8:	beq	138f0 <__assert_fail@plt+0x2794>
   137bc:	mov	r5, #0
   137c0:	b	13900 <__assert_fail@plt+0x27a4>
   137c4:	cmp	r7, #39	; 0x27
   137c8:	bne	137bc <__assert_fail@plt+0x2660>
   137cc:	cmp	sl, #2
   137d0:	ldrne	r5, [sp, #52]	; 0x34
   137d4:	movne	r3, r5
   137d8:	strne	r3, [sp, #68]	; 0x44
   137dc:	bne	138a8 <__assert_fail@plt+0x274c>
   137e0:	cmp	r6, #0
   137e4:	bne	13674 <__assert_fail@plt+0x2518>
   137e8:	ldr	r2, [sp, #60]	; 0x3c
   137ec:	adds	r3, r9, #0
   137f0:	movne	r3, #1
   137f4:	cmp	r2, #0
   137f8:	movne	r3, #0
   137fc:	cmp	r3, #0
   13800:	strne	r9, [sp, #60]	; 0x3c
   13804:	movne	r9, #0
   13808:	bne	13818 <__assert_fail@plt+0x26bc>
   1380c:	cmp	r9, r4
   13810:	movhi	r3, #39	; 0x27
   13814:	strbhi	r3, [r8, r4]
   13818:	add	r3, r4, #1
   1381c:	cmp	r3, r9
   13820:	movcc	r2, #92	; 0x5c
   13824:	strbcc	r2, [r8, r3]
   13828:	add	r3, r4, #2
   1382c:	cmp	r3, r9
   13830:	ldr	r5, [sp, #52]	; 0x34
   13834:	movcc	r2, #39	; 0x27
   13838:	strbcc	r2, [r8, r3]
   1383c:	add	r4, r4, #3
   13840:	mov	fp, r6
   13844:	str	r5, [sp, #68]	; 0x44
   13848:	str	r6, [sp, #48]	; 0x30
   1384c:	b	13ae8 <__assert_fail@plt+0x298c>
   13850:	cmp	r7, #94	; 0x5e
   13854:	beq	137bc <__assert_fail@plt+0x2660>
   13858:	bhi	138b0 <__assert_fail@plt+0x2754>
   1385c:	cmp	r7, #90	; 0x5a
   13860:	bhi	13898 <__assert_fail@plt+0x273c>
   13864:	cmp	r7, #65	; 0x41
   13868:	bcs	138a4 <__assert_fail@plt+0x2748>
   1386c:	cmp	r7, #62	; 0x3e
   13870:	bls	137bc <__assert_fail@plt+0x2660>
   13874:	cmp	r7, #63	; 0x3f
   13878:	bne	13720 <__assert_fail@plt+0x25c4>
   1387c:	cmp	sl, #2
   13880:	beq	13a24 <__assert_fail@plt+0x28c8>
   13884:	cmp	sl, #5
   13888:	beq	13a34 <__assert_fail@plt+0x28d8>
   1388c:	mov	fp, #0
   13890:	mov	r5, fp
   13894:	b	13ae8 <__assert_fail@plt+0x298c>
   13898:	cmp	r7, #92	; 0x5c
   1389c:	beq	13bc0 <__assert_fail@plt+0x2a64>
   138a0:	bls	137bc <__assert_fail@plt+0x2660>
   138a4:	ldr	r5, [sp, #52]	; 0x34
   138a8:	mov	fp, #0
   138ac:	b	13ae8 <__assert_fail@plt+0x298c>
   138b0:	cmp	r7, #122	; 0x7a
   138b4:	bhi	138d4 <__assert_fail@plt+0x2778>
   138b8:	cmp	r7, #97	; 0x61
   138bc:	bcs	138a4 <__assert_fail@plt+0x2748>
   138c0:	cmp	r7, #95	; 0x5f
   138c4:	beq	138a4 <__assert_fail@plt+0x2748>
   138c8:	cmp	r7, #96	; 0x60
   138cc:	bne	13720 <__assert_fail@plt+0x25c4>
   138d0:	b	137bc <__assert_fail@plt+0x2660>
   138d4:	cmp	r7, #124	; 0x7c
   138d8:	beq	137bc <__assert_fail@plt+0x2660>
   138dc:	bcc	13c6c <__assert_fail@plt+0x2b10>
   138e0:	cmp	r7, #125	; 0x7d
   138e4:	beq	13c6c <__assert_fail@plt+0x2b10>
   138e8:	cmp	r7, #126	; 0x7e
   138ec:	bne	13720 <__assert_fail@plt+0x25c4>
   138f0:	ldr	r3, [sp, #28]
   138f4:	cmp	r3, #0
   138f8:	bne	13a2c <__assert_fail@plt+0x28d0>
   138fc:	ldr	r5, [sp, #52]	; 0x34
   13900:	cmp	sl, #2
   13904:	movne	fp, #0
   13908:	andeq	fp, r6, #1
   1390c:	cmp	fp, #0
   13910:	beq	13ae8 <__assert_fail@plt+0x298c>
   13914:	b	137a0 <__assert_fail@plt+0x2644>
   13918:	mov	r3, #98	; 0x62
   1391c:	ldr	r2, [sp, #24]
   13920:	cmp	r2, #0
   13924:	beq	13a2c <__assert_fail@plt+0x28d0>
   13928:	mov	r7, r3
   1392c:	mov	r5, #0
   13930:	b	13b40 <__assert_fail@plt+0x29e4>
   13934:	ldr	r3, [sp, #24]
   13938:	cmp	r3, #0
   1393c:	beq	13a08 <__assert_fail@plt+0x28ac>
   13940:	cmp	r6, #0
   13944:	bne	13670 <__assert_fail@plt+0x2514>
   13948:	ldr	r3, [sp, #48]	; 0x30
   1394c:	eor	r2, r3, #1
   13950:	cmp	sl, #2
   13954:	movne	r2, #0
   13958:	andeq	r2, r2, #1
   1395c:	cmp	r2, #0
   13960:	moveq	r3, r4
   13964:	beq	1399c <__assert_fail@plt+0x2840>
   13968:	cmp	r9, r4
   1396c:	movhi	r3, #39	; 0x27
   13970:	strbhi	r3, [r8, r4]
   13974:	add	r3, r4, #1
   13978:	cmp	r9, r3
   1397c:	movhi	r1, #36	; 0x24
   13980:	strbhi	r1, [r8, r3]
   13984:	add	r3, r4, #2
   13988:	cmp	r9, r3
   1398c:	movhi	r1, #39	; 0x27
   13990:	strbhi	r1, [r8, r3]
   13994:	add	r3, r4, #3
   13998:	str	r2, [sp, #48]	; 0x30
   1399c:	cmp	r9, r3
   139a0:	movhi	r2, #92	; 0x5c
   139a4:	strbhi	r2, [r8, r3]
   139a8:	cmp	fp, #0
   139ac:	add	r4, r3, #1
   139b0:	beq	13f40 <__assert_fail@plt+0x2de4>
   139b4:	ldr	r2, [sp, #28]
   139b8:	ldr	r1, [sp, #36]	; 0x24
   139bc:	add	r2, r2, #1
   139c0:	cmp	r1, r2
   139c4:	bls	13a00 <__assert_fail@plt+0x28a4>
   139c8:	ldr	r1, [sp, #44]	; 0x2c
   139cc:	mov	r7, #48	; 0x30
   139d0:	ldrb	r2, [r1, r2]
   139d4:	sub	r2, r2, #48	; 0x30
   139d8:	cmp	r2, #9
   139dc:	movhi	r5, r6
   139e0:	bhi	13ae8 <__assert_fail@plt+0x298c>
   139e4:	cmp	r9, r4
   139e8:	add	r2, r3, #2
   139ec:	strbhi	r7, [r8, r4]
   139f0:	cmp	r9, r2
   139f4:	add	r4, r3, #3
   139f8:	movhi	r1, #48	; 0x30
   139fc:	strbhi	r1, [r8, r2]
   13a00:	mov	r5, r6
   13a04:	b	13f48 <__assert_fail@plt+0x2dec>
   13a08:	ldr	r3, [sp, #148]	; 0x94
   13a0c:	tst	r3, #1
   13a10:	ldreq	r5, [sp, #24]
   13a14:	beq	13f54 <__assert_fail@plt+0x2df8>
   13a18:	ldr	r3, [sp, #28]
   13a1c:	add	r3, r3, #1
   13a20:	b	133c0 <__assert_fail@plt+0x2264>
   13a24:	cmp	r6, #0
   13a28:	bne	13674 <__assert_fail@plt+0x2518>
   13a2c:	mov	r5, #0
   13a30:	b	138a8 <__assert_fail@plt+0x274c>
   13a34:	ldr	r3, [sp, #148]	; 0x94
   13a38:	tst	r3, #4
   13a3c:	beq	13a2c <__assert_fail@plt+0x28d0>
   13a40:	ldr	r3, [sp, #28]
   13a44:	add	r2, r3, #2
   13a48:	ldr	r3, [sp, #36]	; 0x24
   13a4c:	cmp	r3, r2
   13a50:	bls	13a2c <__assert_fail@plt+0x28d0>
   13a54:	ldr	r3, [sp, #44]	; 0x2c
   13a58:	ldr	r1, [sp, #28]
   13a5c:	add	r3, r3, r1
   13a60:	ldrb	r0, [r3, #1]
   13a64:	cmp	r0, #63	; 0x3f
   13a68:	bne	13a2c <__assert_fail@plt+0x28d0>
   13a6c:	ldr	r3, [sp, #44]	; 0x2c
   13a70:	ldrb	r1, [r3, r2]
   13a74:	sub	r3, r1, #33	; 0x21
   13a78:	uxtb	r3, r3
   13a7c:	cmp	r3, #29
   13a80:	bhi	13f50 <__assert_fail@plt+0x2df4>
   13a84:	mov	ip, #1
   13a88:	ldr	r5, [pc, #1428]	; 14024 <__assert_fail@plt+0x2ec8>
   13a8c:	ands	r5, r5, ip, lsl r3
   13a90:	beq	138a8 <__assert_fail@plt+0x274c>
   13a94:	cmp	r6, #0
   13a98:	bne	13674 <__assert_fail@plt+0x2518>
   13a9c:	add	r3, r4, #1
   13aa0:	cmp	r9, r4
   13aa4:	strbhi	r0, [r8, r4]
   13aa8:	cmp	r9, r3
   13aac:	movhi	r0, #34	; 0x22
   13ab0:	strbhi	r0, [r8, r3]
   13ab4:	add	r3, r4, #2
   13ab8:	cmp	r9, r3
   13abc:	movhi	r0, #34	; 0x22
   13ac0:	strbhi	r0, [r8, r3]
   13ac4:	add	r3, r4, #3
   13ac8:	cmp	r9, r3
   13acc:	add	r4, r4, #4
   13ad0:	mov	r5, r6
   13ad4:	mov	fp, r6
   13ad8:	mov	r7, r1
   13adc:	movhi	r0, #63	; 0x3f
   13ae0:	strbhi	r0, [r8, r3]
   13ae4:	str	r2, [sp, #28]
   13ae8:	ldr	r3, [sp, #24]
   13aec:	eor	r3, r3, #1
   13af0:	cmp	sl, #2
   13af4:	orreq	r3, r3, #1
   13af8:	eor	r3, r3, #1
   13afc:	orr	r3, r6, r3
   13b00:	tst	r3, #255	; 0xff
   13b04:	beq	13b34 <__assert_fail@plt+0x29d8>
   13b08:	ldr	r3, [sp, #152]	; 0x98
   13b0c:	cmp	r3, #0
   13b10:	beq	13b34 <__assert_fail@plt+0x29d8>
   13b14:	lsr	r2, r7, #5
   13b18:	ldr	r1, [sp, #152]	; 0x98
   13b1c:	uxtb	r2, r2
   13b20:	and	r3, r7, #31
   13b24:	ldr	r2, [r1, r2, lsl #2]
   13b28:	lsr	r3, r2, r3
   13b2c:	tst	r3, #1
   13b30:	bne	13b40 <__assert_fail@plt+0x29e4>
   13b34:	ldr	r3, [sp, #64]	; 0x40
   13b38:	cmp	r3, #0
   13b3c:	beq	13bd8 <__assert_fail@plt+0x2a7c>
   13b40:	cmp	r6, #0
   13b44:	bne	13674 <__assert_fail@plt+0x2518>
   13b48:	ldr	r3, [sp, #48]	; 0x30
   13b4c:	eor	r3, r3, #1
   13b50:	cmp	sl, #2
   13b54:	movne	r3, #0
   13b58:	andeq	r3, r3, #1
   13b5c:	cmp	r3, #0
   13b60:	beq	13b98 <__assert_fail@plt+0x2a3c>
   13b64:	cmp	r9, r4
   13b68:	movhi	r2, #39	; 0x27
   13b6c:	strbhi	r2, [r8, r4]
   13b70:	add	r2, r4, #1
   13b74:	cmp	r9, r2
   13b78:	movhi	r1, #36	; 0x24
   13b7c:	strbhi	r1, [r8, r2]
   13b80:	add	r2, r4, #2
   13b84:	cmp	r9, r2
   13b88:	add	r4, r4, #3
   13b8c:	movhi	r1, #39	; 0x27
   13b90:	strbhi	r1, [r8, r2]
   13b94:	str	r3, [sp, #48]	; 0x30
   13b98:	cmp	r9, r4
   13b9c:	movhi	r3, #92	; 0x5c
   13ba0:	strbhi	r3, [r8, r4]
   13ba4:	ldr	fp, [sp, #52]	; 0x34
   13ba8:	add	r4, r4, #1
   13bac:	b	13bd8 <__assert_fail@plt+0x2a7c>
   13bb0:	mov	r3, #116	; 0x74
   13bb4:	b	1378c <__assert_fail@plt+0x2630>
   13bb8:	mov	r3, #118	; 0x76
   13bbc:	b	1391c <__assert_fail@plt+0x27c0>
   13bc0:	cmp	sl, #2
   13bc4:	bne	13c34 <__assert_fail@plt+0x2ad8>
   13bc8:	cmp	r6, #0
   13bcc:	bne	13674 <__assert_fail@plt+0x2518>
   13bd0:	mov	r5, r6
   13bd4:	mov	fp, r6
   13bd8:	ldr	r3, [sp, #48]	; 0x30
   13bdc:	eor	fp, fp, #1
   13be0:	and	fp, fp, r3
   13be4:	tst	fp, #255	; 0xff
   13be8:	beq	13c14 <__assert_fail@plt+0x2ab8>
   13bec:	cmp	r9, r4
   13bf0:	movhi	r3, #39	; 0x27
   13bf4:	strbhi	r3, [r8, r4]
   13bf8:	add	r3, r4, #1
   13bfc:	cmp	r9, r3
   13c00:	movhi	r2, #39	; 0x27
   13c04:	add	r4, r4, #2
   13c08:	strbhi	r2, [r8, r3]
   13c0c:	mov	r3, #0
   13c10:	str	r3, [sp, #48]	; 0x30
   13c14:	cmp	r9, r4
   13c18:	strbhi	r7, [r8, r4]
   13c1c:	ldr	r3, [sp, #72]	; 0x48
   13c20:	cmp	r5, #0
   13c24:	moveq	r3, #0
   13c28:	add	r4, r4, #1
   13c2c:	str	r3, [sp, #72]	; 0x48
   13c30:	b	13a18 <__assert_fail@plt+0x28bc>
   13c34:	ldr	r3, [sp, #24]
   13c38:	and	r3, r3, r6
   13c3c:	tst	r5, r3
   13c40:	moveq	r3, r7
   13c44:	beq	1378c <__assert_fail@plt+0x2630>
   13c48:	mov	fp, #0
   13c4c:	mov	r5, fp
   13c50:	b	13bd8 <__assert_fail@plt+0x2a7c>
   13c54:	mov	r3, #110	; 0x6e
   13c58:	b	1378c <__assert_fail@plt+0x2630>
   13c5c:	mov	r3, #97	; 0x61
   13c60:	b	1391c <__assert_fail@plt+0x27c0>
   13c64:	mov	r3, #102	; 0x66
   13c68:	b	1391c <__assert_fail@plt+0x27c0>
   13c6c:	ldr	r3, [sp, #36]	; 0x24
   13c70:	cmn	r3, #1
   13c74:	bne	13c94 <__assert_fail@plt+0x2b38>
   13c78:	ldr	r3, [sp, #44]	; 0x2c
   13c7c:	ldrb	r3, [r3, #1]
   13c80:	adds	r3, r3, #0
   13c84:	movne	r3, #1
   13c88:	cmp	r3, #0
   13c8c:	bne	13a2c <__assert_fail@plt+0x28d0>
   13c90:	b	138f0 <__assert_fail@plt+0x2794>
   13c94:	ldr	r3, [sp, #36]	; 0x24
   13c98:	subs	r3, r3, #1
   13c9c:	b	13c84 <__assert_fail@plt+0x2b28>
   13ca0:	mov	r3, #0
   13ca4:	str	r3, [sp, #96]	; 0x60
   13ca8:	str	r3, [sp, #100]	; 0x64
   13cac:	ldr	r3, [sp, #36]	; 0x24
   13cb0:	cmn	r3, #1
   13cb4:	bne	13cc4 <__assert_fail@plt+0x2b68>
   13cb8:	ldr	r0, [sp, #44]	; 0x2c
   13cbc:	bl	11030 <strlen@plt>
   13cc0:	str	r0, [sp, #36]	; 0x24
   13cc4:	ldr	r5, [sp, #52]	; 0x34
   13cc8:	mov	r3, #0
   13ccc:	str	r3, [sp, #56]	; 0x38
   13cd0:	ldr	r3, [sp, #28]
   13cd4:	ldr	r2, [sp, #56]	; 0x38
   13cd8:	ldr	r1, [sp, #36]	; 0x24
   13cdc:	add	r2, r3, r2
   13ce0:	ldr	r3, [sp, #44]	; 0x2c
   13ce4:	add	r0, sp, #92	; 0x5c
   13ce8:	add	fp, r3, r2
   13cec:	sub	r2, r1, r2
   13cf0:	add	r3, sp, #96	; 0x60
   13cf4:	mov	r1, fp
   13cf8:	bl	15e20 <__assert_fail@plt+0x4cc4>
   13cfc:	subs	r2, r0, #0
   13d00:	beq	13d40 <__assert_fail@plt+0x2be4>
   13d04:	cmn	r2, #1
   13d08:	beq	13f18 <__assert_fail@plt+0x2dbc>
   13d0c:	cmn	r2, #2
   13d10:	bne	13e88 <__assert_fail@plt+0x2d2c>
   13d14:	ldr	r2, [sp, #56]	; 0x38
   13d18:	ldr	r3, [sp, #28]
   13d1c:	add	r3, r3, r2
   13d20:	ldr	r2, [sp, #36]	; 0x24
   13d24:	cmp	r2, r3
   13d28:	bls	13f18 <__assert_fail@plt+0x2dbc>
   13d2c:	ldr	r3, [sp, #80]	; 0x50
   13d30:	ldr	r2, [sp, #56]	; 0x38
   13d34:	ldrb	r5, [r3, r2]
   13d38:	cmp	r5, #0
   13d3c:	bne	13e78 <__assert_fail@plt+0x2d1c>
   13d40:	ldr	r3, [sp, #56]	; 0x38
   13d44:	cmp	r3, #1
   13d48:	bls	13750 <__assert_fail@plt+0x25f4>
   13d4c:	ldr	r2, [sp, #56]	; 0x38
   13d50:	ldr	r3, [sp, #28]
   13d54:	mov	fp, #0
   13d58:	add	r3, r3, r2
   13d5c:	ldr	r2, [sp, #24]
   13d60:	str	r3, [sp, #52]	; 0x34
   13d64:	eor	r3, r5, #1
   13d68:	and	r3, r3, r2
   13d6c:	mov	ip, #92	; 0x5c
   13d70:	uxtb	r3, r3
   13d74:	mov	r2, #39	; 0x27
   13d78:	cmp	r3, #0
   13d7c:	beq	13f20 <__assert_fail@plt+0x2dc4>
   13d80:	cmp	r6, #0
   13d84:	bne	13670 <__assert_fail@plt+0x2514>
   13d88:	ldr	r1, [sp, #48]	; 0x30
   13d8c:	eor	r1, r1, #1
   13d90:	cmp	sl, #2
   13d94:	movne	r1, #0
   13d98:	andeq	r1, r1, #1
   13d9c:	cmp	r1, #0
   13da0:	beq	13dd0 <__assert_fail@plt+0x2c74>
   13da4:	add	r0, r4, #1
   13da8:	cmp	r9, r4
   13dac:	strbhi	r2, [r8, r4]
   13db0:	cmp	r9, r0
   13db4:	movhi	lr, #36	; 0x24
   13db8:	strbhi	lr, [r8, r0]
   13dbc:	add	r0, r4, #2
   13dc0:	add	r4, r4, #3
   13dc4:	cmp	r9, r0
   13dc8:	strbhi	r2, [r8, r0]
   13dcc:	str	r1, [sp, #48]	; 0x30
   13dd0:	add	r0, r4, #1
   13dd4:	cmp	r9, r4
   13dd8:	strbhi	ip, [r8, r4]
   13ddc:	cmp	r9, r0
   13de0:	lsrhi	r1, r7, #6
   13de4:	addhi	r1, r1, #48	; 0x30
   13de8:	strbhi	r1, [r8, r0]
   13dec:	add	r0, r4, #2
   13df0:	cmp	r9, r0
   13df4:	lsrhi	r1, r7, #3
   13df8:	and	r7, r7, #7
   13dfc:	andhi	r1, r1, #7
   13e00:	add	r4, r4, #3
   13e04:	add	r7, r7, #48	; 0x30
   13e08:	mov	fp, r3
   13e0c:	addhi	r1, r1, #48	; 0x30
   13e10:	strbhi	r1, [r8, r0]
   13e14:	ldr	r1, [sp, #28]
   13e18:	ldr	r0, [sp, #52]	; 0x34
   13e1c:	add	r1, r1, #1
   13e20:	cmp	r0, r1
   13e24:	bls	13bd8 <__assert_fail@plt+0x2a7c>
   13e28:	ldr	lr, [sp, #48]	; 0x30
   13e2c:	eor	r0, fp, #1
   13e30:	and	r0, r0, lr
   13e34:	tst	r0, #255	; 0xff
   13e38:	beq	13e5c <__assert_fail@plt+0x2d00>
   13e3c:	add	r0, r4, #1
   13e40:	cmp	r9, r4
   13e44:	strbhi	r2, [r8, r4]
   13e48:	cmp	r9, r0
   13e4c:	add	r4, r4, #2
   13e50:	strbhi	r2, [r8, r0]
   13e54:	mov	r0, #0
   13e58:	str	r0, [sp, #48]	; 0x30
   13e5c:	ldr	r0, [sp, #44]	; 0x2c
   13e60:	cmp	r9, r4
   13e64:	strbhi	r7, [r8, r4]
   13e68:	str	r1, [sp, #28]
   13e6c:	add	r4, r4, #1
   13e70:	ldrb	r7, [r0, r1]
   13e74:	b	13d78 <__assert_fail@plt+0x2c1c>
   13e78:	ldr	r3, [sp, #56]	; 0x38
   13e7c:	add	r3, r3, #1
   13e80:	str	r3, [sp, #56]	; 0x38
   13e84:	b	13d14 <__assert_fail@plt+0x2bb8>
   13e88:	cmp	sl, #2
   13e8c:	movne	r3, #0
   13e90:	andeq	r3, r6, #1
   13e94:	cmp	r3, #0
   13e98:	movne	r1, #1
   13e9c:	bne	13ef8 <__assert_fail@plt+0x2d9c>
   13ea0:	ldr	r0, [sp, #92]	; 0x5c
   13ea4:	str	r2, [sp, #84]	; 0x54
   13ea8:	bl	10f64 <iswprint@plt>
   13eac:	ldr	r3, [sp, #56]	; 0x38
   13eb0:	ldr	r2, [sp, #84]	; 0x54
   13eb4:	add	r3, r3, r2
   13eb8:	str	r3, [sp, #56]	; 0x38
   13ebc:	cmp	r0, #0
   13ec0:	add	r0, sp, #96	; 0x60
   13ec4:	moveq	r5, #0
   13ec8:	bl	10f04 <mbsinit@plt>
   13ecc:	cmp	r0, #0
   13ed0:	beq	13cd0 <__assert_fail@plt+0x2b74>
   13ed4:	b	13d40 <__assert_fail@plt+0x2be4>
   13ed8:	ldrb	r3, [fp, r1]
   13edc:	cmp	r3, #94	; 0x5e
   13ee0:	beq	137a0 <__assert_fail@plt+0x2644>
   13ee4:	bhi	13f04 <__assert_fail@plt+0x2da8>
   13ee8:	sub	r3, r3, #91	; 0x5b
   13eec:	cmp	r3, #1
   13ef0:	bls	137a0 <__assert_fail@plt+0x2644>
   13ef4:	add	r1, r1, #1
   13ef8:	cmp	r1, r2
   13efc:	bne	13ed8 <__assert_fail@plt+0x2d7c>
   13f00:	b	13ea0 <__assert_fail@plt+0x2d44>
   13f04:	cmp	r3, #96	; 0x60
   13f08:	beq	137a0 <__assert_fail@plt+0x2644>
   13f0c:	cmp	r3, #124	; 0x7c
   13f10:	bne	13ef4 <__assert_fail@plt+0x2d98>
   13f14:	b	137a0 <__assert_fail@plt+0x2644>
   13f18:	mov	r5, #0
   13f1c:	b	13d40 <__assert_fail@plt+0x2be4>
   13f20:	ldr	r1, [sp, #64]	; 0x40
   13f24:	cmp	r1, #0
   13f28:	beq	13e14 <__assert_fail@plt+0x2cb8>
   13f2c:	cmp	r9, r4
   13f30:	strbhi	ip, [r8, r4]
   13f34:	str	r3, [sp, #64]	; 0x40
   13f38:	add	r4, r4, #1
   13f3c:	b	13e14 <__assert_fail@plt+0x2cb8>
   13f40:	mov	r5, fp
   13f44:	ldr	fp, [sp, #24]
   13f48:	mov	r7, #48	; 0x30
   13f4c:	b	13ae8 <__assert_fail@plt+0x298c>
   13f50:	mov	r5, #0
   13f54:	mov	fp, r5
   13f58:	b	13ae8 <__assert_fail@plt+0x298c>
   13f5c:	ldr	r3, [sp, #36]	; 0x24
   13f60:	ldr	r2, [sp, #28]
   13f64:	subs	r3, r3, r2
   13f68:	movne	r3, #1
   13f6c:	b	133e4 <__assert_fail@plt+0x2288>
   13f70:	ldr	r3, [sp, #60]	; 0x3c
   13f74:	clz	r7, r9
   13f78:	cmp	r3, #0
   13f7c:	lsr	r7, r7, #5
   13f80:	moveq	r7, #0
   13f84:	cmp	r7, #0
   13f88:	mov	r5, r3
   13f8c:	bne	13344 <__assert_fail@plt+0x21e8>
   13f90:	ldr	r3, [sp, #68]	; 0x44
   13f94:	ldr	r2, [sp, #40]	; 0x28
   13f98:	cmp	r2, #0
   13f9c:	moveq	r3, #0
   13fa0:	andne	r3, r3, #1
   13fa4:	cmp	r3, #0
   13fa8:	movne	r3, r2
   13fac:	subne	r2, r3, #1
   13fb0:	bne	13fe0 <__assert_fail@plt+0x2e84>
   13fb4:	cmp	r9, r4
   13fb8:	movhi	r3, #0
   13fbc:	strbhi	r3, [r8, r4]
   13fc0:	mov	r0, r4
   13fc4:	add	sp, sp, #108	; 0x6c
   13fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fcc:	mov	r3, r2
   13fd0:	b	13f94 <__assert_fail@plt+0x2e38>
   13fd4:	cmp	r9, r4
   13fd8:	strbhi	r3, [r8, r4]
   13fdc:	add	r4, r4, #1
   13fe0:	ldrb	r3, [r2, #1]!
   13fe4:	cmp	r3, #0
   13fe8:	bne	13fd4 <__assert_fail@plt+0x2e78>
   13fec:	b	13fb4 <__assert_fail@plt+0x2e58>
   13ff0:	ldr	r3, [pc, #32]	; 14018 <__assert_fail@plt+0x2ebc>
   13ff4:	mov	r6, #1
   13ff8:	str	r6, [sp, #24]
   13ffc:	str	r6, [sp, #32]
   14000:	str	r3, [sp, #40]	; 0x28
   14004:	mov	r4, #0
   14008:	mov	sl, #5
   1400c:	b	133b4 <__assert_fail@plt+0x2258>
   14010:	mov	r6, #1
   14014:	b	135a8 <__assert_fail@plt+0x244c>
   14018:	andeq	r7, r1, r3, asr #8
   1401c:	andeq	r7, r1, r7, asr #8
   14020:	andeq	r7, r1, r5, asr #8
   14024:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   14028:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1402c:	sub	sp, sp, #52	; 0x34
   14030:	mov	r6, r0
   14034:	mov	r5, r3
   14038:	mov	r8, r1
   1403c:	mov	r9, r2
   14040:	bl	11048 <__errno_location@plt>
   14044:	ldr	r7, [pc, #380]	; 141c8 <__assert_fail@plt+0x306c>
   14048:	cmn	r6, #-2147483647	; 0x80000001
   1404c:	ldr	r4, [r7]
   14050:	ldr	r3, [r0]
   14054:	str	r0, [sp, #24]
   14058:	str	r3, [sp, #32]
   1405c:	movne	r3, #0
   14060:	moveq	r3, #1
   14064:	orrs	r3, r3, r6, lsr #31
   14068:	beq	14070 <__assert_fail@plt+0x2f14>
   1406c:	bl	1112c <abort@plt>
   14070:	ldr	r2, [r7, #4]
   14074:	cmp	r6, r2
   14078:	blt	140e8 <__assert_fail@plt+0x2f8c>
   1407c:	add	r1, sp, #48	; 0x30
   14080:	add	sl, r7, #8
   14084:	str	r2, [r1, #-4]!
   14088:	cmp	r4, sl
   1408c:	mov	r3, #8
   14090:	sub	r2, r6, r2
   14094:	movne	r0, r4
   14098:	str	r3, [sp]
   1409c:	add	r2, r2, #1
   140a0:	mvn	r3, #-2147483648	; 0x80000000
   140a4:	moveq	r0, #0
   140a8:	bl	14e4c <__assert_fail@plt+0x3cf0>
   140ac:	cmp	r4, sl
   140b0:	ldr	r2, [sp, #44]	; 0x2c
   140b4:	mov	fp, r0
   140b8:	str	r0, [r7]
   140bc:	ldmeq	r4, {r0, r1}
   140c0:	mov	r4, fp
   140c4:	stmeq	fp, {r0, r1}
   140c8:	ldr	r0, [r7, #4]
   140cc:	mov	r1, #0
   140d0:	sub	r2, r2, r0
   140d4:	add	r0, fp, r0, lsl #3
   140d8:	lsl	r2, r2, #3
   140dc:	bl	11060 <memset@plt>
   140e0:	ldr	r3, [sp, #44]	; 0x2c
   140e4:	str	r3, [r7, #4]
   140e8:	ldr	r3, [r5, #4]
   140ec:	add	sl, r4, r6, lsl #3
   140f0:	orr	r3, r3, #1
   140f4:	str	r3, [sp, #28]
   140f8:	add	r3, r5, #8
   140fc:	str	r3, [sp, #36]	; 0x24
   14100:	ldr	r3, [r5, #44]	; 0x2c
   14104:	ldr	fp, [r4, r6, lsl #3]
   14108:	ldr	r7, [sl, #4]
   1410c:	str	r3, [sp, #16]
   14110:	ldr	r3, [r5, #40]	; 0x28
   14114:	mov	r2, r8
   14118:	str	r3, [sp, #12]
   1411c:	add	r3, r5, #8
   14120:	str	r3, [sp, #8]
   14124:	ldr	r3, [sp, #28]
   14128:	mov	r1, fp
   1412c:	str	r3, [sp, #4]
   14130:	ldr	r3, [r5]
   14134:	mov	r0, r7
   14138:	str	r3, [sp]
   1413c:	mov	r3, r9
   14140:	bl	132f4 <__assert_fail@plt+0x2198>
   14144:	cmp	fp, r0
   14148:	bhi	141b0 <__assert_fail@plt+0x3054>
   1414c:	ldr	r3, [pc, #120]	; 141cc <__assert_fail@plt+0x3070>
   14150:	add	fp, r0, #1
   14154:	cmp	r7, r3
   14158:	str	fp, [r4, r6, lsl #3]
   1415c:	beq	14168 <__assert_fail@plt+0x300c>
   14160:	mov	r0, r7
   14164:	bl	12e7c <__assert_fail@plt+0x1d20>
   14168:	mov	r0, fp
   1416c:	bl	14d04 <__assert_fail@plt+0x3ba8>
   14170:	ldr	r3, [r5, #44]	; 0x2c
   14174:	mov	r2, r8
   14178:	mov	r1, fp
   1417c:	str	r0, [sl, #4]
   14180:	str	r3, [sp, #16]
   14184:	ldr	r3, [r5, #40]	; 0x28
   14188:	mov	r7, r0
   1418c:	str	r3, [sp, #12]
   14190:	add	r3, r5, #8
   14194:	str	r3, [sp, #8]
   14198:	ldr	r3, [sp, #28]
   1419c:	str	r3, [sp, #4]
   141a0:	ldr	r3, [r5]
   141a4:	str	r3, [sp]
   141a8:	mov	r3, r9
   141ac:	bl	132f4 <__assert_fail@plt+0x2198>
   141b0:	ldr	r3, [sp, #24]
   141b4:	ldr	r2, [sp, #32]
   141b8:	mov	r0, r7
   141bc:	str	r2, [r3]
   141c0:	add	sp, sp, #52	; 0x34
   141c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141c8:	andeq	r8, r2, r8, lsr #2
   141cc:	andeq	r8, r2, ip, lsl #4
   141d0:	push	{r4, r5, r6, lr}
   141d4:	mov	r5, r0
   141d8:	bl	11048 <__errno_location@plt>
   141dc:	cmp	r5, #0
   141e0:	mov	r1, #48	; 0x30
   141e4:	ldr	r6, [r0]
   141e8:	mov	r4, r0
   141ec:	ldr	r0, [pc, #12]	; 14200 <__assert_fail@plt+0x30a4>
   141f0:	movne	r0, r5
   141f4:	bl	150e0 <__assert_fail@plt+0x3f84>
   141f8:	str	r6, [r4]
   141fc:	pop	{r4, r5, r6, pc}
   14200:	andeq	r8, r2, ip, lsl #6
   14204:	ldr	r3, [pc, #12]	; 14218 <__assert_fail@plt+0x30bc>
   14208:	cmp	r0, #0
   1420c:	moveq	r0, r3
   14210:	ldr	r0, [r0]
   14214:	bx	lr
   14218:	andeq	r8, r2, ip, lsl #6
   1421c:	ldr	r3, [pc, #12]	; 14230 <__assert_fail@plt+0x30d4>
   14220:	cmp	r0, #0
   14224:	moveq	r0, r3
   14228:	str	r1, [r0]
   1422c:	bx	lr
   14230:	andeq	r8, r2, ip, lsl #6
   14234:	ldr	r3, [pc, #52]	; 14270 <__assert_fail@plt+0x3114>
   14238:	cmp	r0, #0
   1423c:	moveq	r0, r3
   14240:	add	r3, r0, #8
   14244:	push	{lr}		; (str lr, [sp, #-4]!)
   14248:	lsr	lr, r1, #5
   1424c:	and	r1, r1, #31
   14250:	ldr	ip, [r3, lr, lsl #2]
   14254:	lsr	r0, ip, r1
   14258:	eor	r2, r2, r0
   1425c:	and	r2, r2, #1
   14260:	and	r0, r0, #1
   14264:	eor	r1, ip, r2, lsl r1
   14268:	str	r1, [r3, lr, lsl #2]
   1426c:	pop	{pc}		; (ldr pc, [sp], #4)
   14270:	andeq	r8, r2, ip, lsl #6
   14274:	ldr	r3, [pc, #16]	; 1428c <__assert_fail@plt+0x3130>
   14278:	cmp	r0, #0
   1427c:	movne	r3, r0
   14280:	ldr	r0, [r3, #4]
   14284:	str	r1, [r3, #4]
   14288:	bx	lr
   1428c:	andeq	r8, r2, ip, lsl #6
   14290:	ldr	r3, [pc, #44]	; 142c4 <__assert_fail@plt+0x3168>
   14294:	cmp	r0, #0
   14298:	moveq	r0, r3
   1429c:	mov	r3, #10
   142a0:	cmp	r2, #0
   142a4:	cmpne	r1, #0
   142a8:	str	r3, [r0]
   142ac:	bne	142b8 <__assert_fail@plt+0x315c>
   142b0:	push	{r4, lr}
   142b4:	bl	1112c <abort@plt>
   142b8:	str	r1, [r0, #40]	; 0x28
   142bc:	str	r2, [r0, #44]	; 0x2c
   142c0:	bx	lr
   142c4:	andeq	r8, r2, ip, lsl #6
   142c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   142cc:	sub	sp, sp, #24
   142d0:	mov	sl, r3
   142d4:	ldr	r4, [sp, #56]	; 0x38
   142d8:	ldr	r3, [pc, #100]	; 14344 <__assert_fail@plt+0x31e8>
   142dc:	cmp	r4, #0
   142e0:	moveq	r4, r3
   142e4:	mov	r7, r0
   142e8:	mov	r8, r1
   142ec:	mov	r9, r2
   142f0:	bl	11048 <__errno_location@plt>
   142f4:	ldr	r3, [r4, #44]	; 0x2c
   142f8:	mov	r2, r9
   142fc:	mov	r1, r8
   14300:	ldr	r6, [r0]
   14304:	str	r3, [sp, #16]
   14308:	ldr	r3, [r4, #40]	; 0x28
   1430c:	mov	r5, r0
   14310:	str	r3, [sp, #12]
   14314:	add	r3, r4, #8
   14318:	str	r3, [sp, #8]
   1431c:	ldr	r3, [r4, #4]
   14320:	mov	r0, r7
   14324:	str	r3, [sp, #4]
   14328:	ldr	r3, [r4]
   1432c:	str	r3, [sp]
   14330:	mov	r3, sl
   14334:	bl	132f4 <__assert_fail@plt+0x2198>
   14338:	str	r6, [r5]
   1433c:	add	sp, sp, #24
   14340:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14344:	andeq	r8, r2, ip, lsl #6
   14348:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1434c:	cmp	r3, #0
   14350:	sub	sp, sp, #44	; 0x2c
   14354:	ldr	r4, [pc, #188]	; 14418 <__assert_fail@plt+0x32bc>
   14358:	mov	r6, r2
   1435c:	movne	r4, r3
   14360:	mov	sl, r1
   14364:	mov	r9, r0
   14368:	bl	11048 <__errno_location@plt>
   1436c:	ldr	r5, [r4, #4]
   14370:	add	fp, r4, #8
   14374:	cmp	r6, #0
   14378:	orreq	r5, r5, #1
   1437c:	mov	r1, #0
   14380:	mov	r2, r9
   14384:	ldr	r3, [r0]
   14388:	mov	r8, r0
   1438c:	str	r3, [sp, #28]
   14390:	ldr	r3, [r4, #44]	; 0x2c
   14394:	mov	r0, r1
   14398:	str	r3, [sp, #16]
   1439c:	ldr	r3, [r4, #40]	; 0x28
   143a0:	stmib	sp, {r5, fp}
   143a4:	str	r3, [sp, #12]
   143a8:	ldr	r3, [r4]
   143ac:	str	r3, [sp]
   143b0:	mov	r3, sl
   143b4:	bl	132f4 <__assert_fail@plt+0x2198>
   143b8:	add	r1, r0, #1
   143bc:	mov	r7, r0
   143c0:	mov	r0, r1
   143c4:	str	r1, [sp, #36]	; 0x24
   143c8:	bl	14d04 <__assert_fail@plt+0x3ba8>
   143cc:	ldr	r3, [r4, #44]	; 0x2c
   143d0:	mov	r2, r9
   143d4:	str	r3, [sp, #16]
   143d8:	ldr	r3, [r4, #40]	; 0x28
   143dc:	stmib	sp, {r5, fp}
   143e0:	str	r3, [sp, #12]
   143e4:	ldr	r3, [r4]
   143e8:	ldr	r1, [sp, #36]	; 0x24
   143ec:	str	r3, [sp]
   143f0:	mov	r3, sl
   143f4:	str	r0, [sp, #32]
   143f8:	bl	132f4 <__assert_fail@plt+0x2198>
   143fc:	ldr	r3, [sp, #28]
   14400:	cmp	r6, #0
   14404:	str	r3, [r8]
   14408:	ldr	r0, [sp, #32]
   1440c:	strne	r7, [r6]
   14410:	add	sp, sp, #44	; 0x2c
   14414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14418:	andeq	r8, r2, ip, lsl #6
   1441c:	mov	r3, r2
   14420:	mov	r2, #0
   14424:	b	14348 <__assert_fail@plt+0x31ec>
   14428:	push	{r4, r5, r6, r7, r8, lr}
   1442c:	mov	r6, #1
   14430:	ldr	r4, [pc, #104]	; 144a0 <__assert_fail@plt+0x3344>
   14434:	ldr	r5, [r4]
   14438:	add	r7, r5, #12
   1443c:	ldr	r3, [r4, #4]
   14440:	add	r7, r7, #8
   14444:	cmp	r6, r3
   14448:	blt	14490 <__assert_fail@plt+0x3334>
   1444c:	ldr	r0, [r5, #4]
   14450:	ldr	r6, [pc, #76]	; 144a4 <__assert_fail@plt+0x3348>
   14454:	cmp	r0, r6
   14458:	beq	1446c <__assert_fail@plt+0x3310>
   1445c:	bl	12e7c <__assert_fail@plt+0x1d20>
   14460:	mov	r3, #256	; 0x100
   14464:	str	r3, [r4, #8]
   14468:	str	r6, [r4, #12]
   1446c:	ldr	r6, [pc, #52]	; 144a8 <__assert_fail@plt+0x334c>
   14470:	cmp	r5, r6
   14474:	beq	14484 <__assert_fail@plt+0x3328>
   14478:	mov	r0, r5
   1447c:	bl	12e7c <__assert_fail@plt+0x1d20>
   14480:	str	r6, [r4]
   14484:	mov	r3, #1
   14488:	str	r3, [r4, #4]
   1448c:	pop	{r4, r5, r6, r7, r8, pc}
   14490:	ldr	r0, [r7, #-8]
   14494:	bl	12e7c <__assert_fail@plt+0x1d20>
   14498:	add	r6, r6, #1
   1449c:	b	1443c <__assert_fail@plt+0x32e0>
   144a0:	andeq	r8, r2, r8, lsr #2
   144a4:	andeq	r8, r2, ip, lsl #4
   144a8:	andeq	r8, r2, r0, lsr r1
   144ac:	ldr	r3, [pc, #4]	; 144b8 <__assert_fail@plt+0x335c>
   144b0:	mvn	r2, #0
   144b4:	b	14028 <__assert_fail@plt+0x2ecc>
   144b8:	andeq	r8, r2, ip, lsl #6
   144bc:	ldr	r3, [pc]	; 144c4 <__assert_fail@plt+0x3368>
   144c0:	b	14028 <__assert_fail@plt+0x2ecc>
   144c4:	andeq	r8, r2, ip, lsl #6
   144c8:	mov	r1, r0
   144cc:	mov	r0, #0
   144d0:	b	144ac <__assert_fail@plt+0x3350>
   144d4:	mov	r2, r1
   144d8:	mov	r1, r0
   144dc:	mov	r0, #0
   144e0:	b	144bc <__assert_fail@plt+0x3360>
   144e4:	push	{r4, r5, lr}
   144e8:	sub	sp, sp, #52	; 0x34
   144ec:	mov	r5, r2
   144f0:	mov	r4, r0
   144f4:	mov	r0, sp
   144f8:	bl	131b0 <__assert_fail@plt+0x2054>
   144fc:	mov	r3, sp
   14500:	mvn	r2, #0
   14504:	mov	r1, r5
   14508:	mov	r0, r4
   1450c:	bl	14028 <__assert_fail@plt+0x2ecc>
   14510:	add	sp, sp, #52	; 0x34
   14514:	pop	{r4, r5, pc}
   14518:	push	{r4, r5, r6, lr}
   1451c:	sub	sp, sp, #48	; 0x30
   14520:	mov	r5, r2
   14524:	mov	r6, r3
   14528:	mov	r4, r0
   1452c:	mov	r0, sp
   14530:	bl	131b0 <__assert_fail@plt+0x2054>
   14534:	mov	r3, sp
   14538:	mov	r2, r6
   1453c:	mov	r1, r5
   14540:	mov	r0, r4
   14544:	bl	14028 <__assert_fail@plt+0x2ecc>
   14548:	add	sp, sp, #48	; 0x30
   1454c:	pop	{r4, r5, r6, pc}
   14550:	mov	r2, r1
   14554:	mov	r1, r0
   14558:	mov	r0, #0
   1455c:	b	144e4 <__assert_fail@plt+0x3388>
   14560:	mov	r3, r2
   14564:	mov	r2, r1
   14568:	mov	r1, r0
   1456c:	mov	r0, #0
   14570:	b	14518 <__assert_fail@plt+0x33bc>
   14574:	push	{r4, r5, r6, lr}
   14578:	mov	r4, r0
   1457c:	ldr	lr, [pc, #80]	; 145d4 <__assert_fail@plt+0x3478>
   14580:	mov	r5, r1
   14584:	mov	r6, r2
   14588:	ldm	lr!, {r0, r1, r2, r3}
   1458c:	sub	sp, sp, #48	; 0x30
   14590:	mov	ip, sp
   14594:	stmia	ip!, {r0, r1, r2, r3}
   14598:	ldm	lr!, {r0, r1, r2, r3}
   1459c:	stmia	ip!, {r0, r1, r2, r3}
   145a0:	ldm	lr, {r0, r1, r2, r3}
   145a4:	stm	ip, {r0, r1, r2, r3}
   145a8:	mov	r1, r6
   145ac:	mov	r2, #1
   145b0:	mov	r0, sp
   145b4:	bl	14234 <__assert_fail@plt+0x30d8>
   145b8:	mov	r3, sp
   145bc:	mov	r2, r5
   145c0:	mov	r1, r4
   145c4:	mov	r0, #0
   145c8:	bl	14028 <__assert_fail@plt+0x2ecc>
   145cc:	add	sp, sp, #48	; 0x30
   145d0:	pop	{r4, r5, r6, pc}
   145d4:	andeq	r8, r2, ip, lsl #6
   145d8:	mov	r2, r1
   145dc:	mvn	r1, #0
   145e0:	b	14574 <__assert_fail@plt+0x3418>
   145e4:	mov	r1, #58	; 0x3a
   145e8:	b	145d8 <__assert_fail@plt+0x347c>
   145ec:	mov	r2, #58	; 0x3a
   145f0:	b	14574 <__assert_fail@plt+0x3418>
   145f4:	push	{r4, r5, lr}
   145f8:	sub	sp, sp, #100	; 0x64
   145fc:	mov	r4, r0
   14600:	mov	r0, sp
   14604:	mov	r5, r2
   14608:	bl	131b0 <__assert_fail@plt+0x2054>
   1460c:	mov	ip, sp
   14610:	add	lr, sp, #48	; 0x30
   14614:	ldm	ip!, {r0, r1, r2, r3}
   14618:	stmia	lr!, {r0, r1, r2, r3}
   1461c:	ldm	ip!, {r0, r1, r2, r3}
   14620:	stmia	lr!, {r0, r1, r2, r3}
   14624:	ldm	ip, {r0, r1, r2, r3}
   14628:	stm	lr, {r0, r1, r2, r3}
   1462c:	mov	r2, #1
   14630:	mov	r1, #58	; 0x3a
   14634:	add	r0, sp, #48	; 0x30
   14638:	bl	14234 <__assert_fail@plt+0x30d8>
   1463c:	add	r3, sp, #48	; 0x30
   14640:	mvn	r2, #0
   14644:	mov	r1, r5
   14648:	mov	r0, r4
   1464c:	bl	14028 <__assert_fail@plt+0x2ecc>
   14650:	add	sp, sp, #100	; 0x64
   14654:	pop	{r4, r5, pc}
   14658:	push	{r4, r5, r6, r7, lr}
   1465c:	mov	r4, r0
   14660:	ldr	lr, [pc, #84]	; 146bc <__assert_fail@plt+0x3560>
   14664:	mov	r6, r1
   14668:	mov	r7, r2
   1466c:	mov	r5, r3
   14670:	ldm	lr!, {r0, r1, r2, r3}
   14674:	sub	sp, sp, #52	; 0x34
   14678:	mov	ip, sp
   1467c:	stmia	ip!, {r0, r1, r2, r3}
   14680:	ldm	lr!, {r0, r1, r2, r3}
   14684:	stmia	ip!, {r0, r1, r2, r3}
   14688:	ldm	lr, {r0, r1, r2, r3}
   1468c:	stm	ip, {r0, r1, r2, r3}
   14690:	mov	r2, r7
   14694:	mov	r1, r6
   14698:	mov	r0, sp
   1469c:	bl	14290 <__assert_fail@plt+0x3134>
   146a0:	mov	r3, sp
   146a4:	ldr	r2, [sp, #72]	; 0x48
   146a8:	mov	r1, r5
   146ac:	mov	r0, r4
   146b0:	bl	14028 <__assert_fail@plt+0x2ecc>
   146b4:	add	sp, sp, #52	; 0x34
   146b8:	pop	{r4, r5, r6, r7, pc}
   146bc:	andeq	r8, r2, ip, lsl #6
   146c0:	mvn	ip, #0
   146c4:	push	{r0, r1, r2, lr}
   146c8:	str	ip, [sp]
   146cc:	bl	14658 <__assert_fail@plt+0x34fc>
   146d0:	add	sp, sp, #12
   146d4:	pop	{pc}		; (ldr pc, [sp], #4)
   146d8:	mov	r3, r2
   146dc:	mov	r2, r1
   146e0:	mov	r1, r0
   146e4:	mov	r0, #0
   146e8:	b	146c0 <__assert_fail@plt+0x3564>
   146ec:	push	{r0, r1, r2, lr}
   146f0:	str	r3, [sp]
   146f4:	mov	r3, r2
   146f8:	mov	r2, r1
   146fc:	mov	r1, r0
   14700:	mov	r0, #0
   14704:	bl	14658 <__assert_fail@plt+0x34fc>
   14708:	add	sp, sp, #12
   1470c:	pop	{pc}		; (ldr pc, [sp], #4)
   14710:	ldr	r3, [pc]	; 14718 <__assert_fail@plt+0x35bc>
   14714:	b	14028 <__assert_fail@plt+0x2ecc>
   14718:	andeq	r8, r2, r8, lsr r1
   1471c:	mov	r2, r1
   14720:	mov	r1, r0
   14724:	mov	r0, #0
   14728:	b	14710 <__assert_fail@plt+0x35b4>
   1472c:	mvn	r2, #0
   14730:	b	14710 <__assert_fail@plt+0x35b4>
   14734:	mov	r1, r0
   14738:	mov	r0, #0
   1473c:	b	1472c <__assert_fail@plt+0x35d0>
   14740:	push	{r4, r5, r6, lr}
   14744:	mov	r5, r1
   14748:	mov	r1, #0
   1474c:	mov	r4, r2
   14750:	bl	110cc <setlocale@plt>
   14754:	subs	r6, r0, #0
   14758:	bne	1476c <__assert_fail@plt+0x3610>
   1475c:	cmp	r4, #0
   14760:	strbne	r6, [r5]
   14764:	mov	r0, #22
   14768:	pop	{r4, r5, r6, pc}
   1476c:	bl	11030 <strlen@plt>
   14770:	cmp	r4, r0
   14774:	bls	14790 <__assert_fail@plt+0x3634>
   14778:	add	r2, r0, #1
   1477c:	mov	r1, r6
   14780:	mov	r0, r5
   14784:	bl	10ef8 <memcpy@plt>
   14788:	mov	r0, #0
   1478c:	pop	{r4, r5, r6, pc}
   14790:	cmp	r4, #0
   14794:	beq	147b4 <__assert_fail@plt+0x3658>
   14798:	sub	r4, r4, #1
   1479c:	mov	r2, r4
   147a0:	mov	r1, r6
   147a4:	mov	r0, r5
   147a8:	bl	10ef8 <memcpy@plt>
   147ac:	mov	r3, #0
   147b0:	strb	r3, [r5, r4]
   147b4:	mov	r0, #34	; 0x22
   147b8:	pop	{r4, r5, r6, pc}
   147bc:	mov	r1, #0
   147c0:	b	110cc <setlocale@plt>
   147c4:	mov	r2, #3
   147c8:	mov	r1, #0
   147cc:	b	15c28 <__assert_fail@plt+0x4acc>
   147d0:	push	{r4, r5, r6, lr}
   147d4:	sub	sp, sp, #32
   147d8:	cmp	r1, #0
   147dc:	mov	r5, r0
   147e0:	ldr	r4, [sp, #48]	; 0x30
   147e4:	ldr	r6, [sp, #52]	; 0x34
   147e8:	beq	1489c <__assert_fail@plt+0x3740>
   147ec:	stm	sp, {r2, r3}
   147f0:	mov	r3, r1
   147f4:	ldr	r2, [pc, #860]	; 14b58 <__assert_fail@plt+0x39fc>
   147f8:	mov	r1, #1
   147fc:	bl	11090 <__fprintf_chk@plt>
   14800:	mov	r2, #5
   14804:	ldr	r1, [pc, #848]	; 14b5c <__assert_fail@plt+0x3a00>
   14808:	mov	r0, #0
   1480c:	bl	10f40 <dcgettext@plt>
   14810:	ldr	r3, [pc, #840]	; 14b60 <__assert_fail@plt+0x3a04>
   14814:	ldr	r2, [pc, #840]	; 14b64 <__assert_fail@plt+0x3a08>
   14818:	str	r3, [sp]
   1481c:	mov	r1, #1
   14820:	mov	r3, r0
   14824:	mov	r0, r5
   14828:	bl	11090 <__fprintf_chk@plt>
   1482c:	mov	r1, r5
   14830:	mov	r0, #10
   14834:	bl	10f28 <fputc_unlocked@plt>
   14838:	mov	r2, #5
   1483c:	ldr	r1, [pc, #804]	; 14b68 <__assert_fail@plt+0x3a0c>
   14840:	mov	r0, #0
   14844:	bl	10f40 <dcgettext@plt>
   14848:	mov	r1, #1
   1484c:	ldr	r3, [pc, #792]	; 14b6c <__assert_fail@plt+0x3a10>
   14850:	mov	r2, r0
   14854:	mov	r0, r5
   14858:	bl	11090 <__fprintf_chk@plt>
   1485c:	mov	r1, r5
   14860:	mov	r0, #10
   14864:	bl	10f28 <fputc_unlocked@plt>
   14868:	cmp	r6, #9
   1486c:	ldrls	pc, [pc, r6, lsl #2]
   14870:	b	14b4c <__assert_fail@plt+0x39f0>
   14874:	andeq	r4, r1, ip, lsl #19
   14878:			; <UNDEFINED> instruction: 0x000148b4
   1487c:	andeq	r4, r1, r0, ror #17
   14880:	andeq	r4, r1, r4, lsl r9
   14884:	andeq	r4, r1, r0, asr r9
   14888:	muleq	r1, r4, r9
   1488c:	ldrdeq	r4, [r1], -ip
   14890:	andeq	r4, r1, ip, lsr #20
   14894:	andeq	r4, r1, r4, lsl #21
   14898:	andeq	r4, r1, r4, ror #21
   1489c:	str	r3, [sp]
   148a0:	mov	r1, #1
   148a4:	mov	r3, r2
   148a8:	ldr	r2, [pc, #704]	; 14b70 <__assert_fail@plt+0x3a14>
   148ac:	bl	11090 <__fprintf_chk@plt>
   148b0:	b	14800 <__assert_fail@plt+0x36a4>
   148b4:	mov	r2, #5
   148b8:	ldr	r1, [pc, #692]	; 14b74 <__assert_fail@plt+0x3a18>
   148bc:	mov	r0, #0
   148c0:	bl	10f40 <dcgettext@plt>
   148c4:	ldr	r3, [r4]
   148c8:	mov	r1, #1
   148cc:	mov	r2, r0
   148d0:	mov	r0, r5
   148d4:	add	sp, sp, #32
   148d8:	pop	{r4, r5, r6, lr}
   148dc:	b	11090 <__fprintf_chk@plt>
   148e0:	mov	r2, #5
   148e4:	ldr	r1, [pc, #652]	; 14b78 <__assert_fail@plt+0x3a1c>
   148e8:	mov	r0, #0
   148ec:	bl	10f40 <dcgettext@plt>
   148f0:	ldr	r3, [r4, #4]
   148f4:	mov	r1, #1
   148f8:	str	r3, [sp, #48]	; 0x30
   148fc:	ldr	r3, [r4]
   14900:	mov	r2, r0
   14904:	mov	r0, r5
   14908:	add	sp, sp, #32
   1490c:	pop	{r4, r5, r6, lr}
   14910:	b	11090 <__fprintf_chk@plt>
   14914:	mov	r2, #5
   14918:	ldr	r1, [pc, #604]	; 14b7c <__assert_fail@plt+0x3a20>
   1491c:	mov	r0, #0
   14920:	bl	10f40 <dcgettext@plt>
   14924:	ldr	r3, [r4, #8]
   14928:	mov	r1, #1
   1492c:	str	r3, [sp, #52]	; 0x34
   14930:	ldr	r3, [r4, #4]
   14934:	str	r3, [sp, #48]	; 0x30
   14938:	ldr	r3, [r4]
   1493c:	mov	r2, r0
   14940:	mov	r0, r5
   14944:	add	sp, sp, #32
   14948:	pop	{r4, r5, r6, lr}
   1494c:	b	11090 <__fprintf_chk@plt>
   14950:	mov	r2, #5
   14954:	ldr	r1, [pc, #548]	; 14b80 <__assert_fail@plt+0x3a24>
   14958:	mov	r0, #0
   1495c:	bl	10f40 <dcgettext@plt>
   14960:	ldr	r3, [r4, #12]
   14964:	mov	r1, #1
   14968:	str	r3, [sp, #8]
   1496c:	ldr	r3, [r4, #8]
   14970:	str	r3, [sp, #4]
   14974:	ldr	r3, [r4, #4]
   14978:	str	r3, [sp]
   1497c:	ldr	r3, [r4]
   14980:	mov	r2, r0
   14984:	mov	r0, r5
   14988:	bl	11090 <__fprintf_chk@plt>
   1498c:	add	sp, sp, #32
   14990:	pop	{r4, r5, r6, pc}
   14994:	mov	r2, #5
   14998:	ldr	r1, [pc, #484]	; 14b84 <__assert_fail@plt+0x3a28>
   1499c:	mov	r0, #0
   149a0:	bl	10f40 <dcgettext@plt>
   149a4:	ldr	r3, [r4, #16]
   149a8:	mov	r1, #1
   149ac:	str	r3, [sp, #12]
   149b0:	ldr	r3, [r4, #12]
   149b4:	str	r3, [sp, #8]
   149b8:	ldr	r3, [r4, #8]
   149bc:	str	r3, [sp, #4]
   149c0:	ldr	r3, [r4, #4]
   149c4:	str	r3, [sp]
   149c8:	ldr	r3, [r4]
   149cc:	mov	r2, r0
   149d0:	mov	r0, r5
   149d4:	bl	11090 <__fprintf_chk@plt>
   149d8:	b	1498c <__assert_fail@plt+0x3830>
   149dc:	mov	r2, #5
   149e0:	ldr	r1, [pc, #416]	; 14b88 <__assert_fail@plt+0x3a2c>
   149e4:	mov	r0, #0
   149e8:	bl	10f40 <dcgettext@plt>
   149ec:	ldr	r3, [r4, #20]
   149f0:	mov	r1, #1
   149f4:	str	r3, [sp, #16]
   149f8:	ldr	r3, [r4, #16]
   149fc:	str	r3, [sp, #12]
   14a00:	ldr	r3, [r4, #12]
   14a04:	str	r3, [sp, #8]
   14a08:	ldr	r3, [r4, #8]
   14a0c:	str	r3, [sp, #4]
   14a10:	ldr	r3, [r4, #4]
   14a14:	str	r3, [sp]
   14a18:	ldr	r3, [r4]
   14a1c:	mov	r2, r0
   14a20:	mov	r0, r5
   14a24:	bl	11090 <__fprintf_chk@plt>
   14a28:	b	1498c <__assert_fail@plt+0x3830>
   14a2c:	mov	r2, #5
   14a30:	ldr	r1, [pc, #340]	; 14b8c <__assert_fail@plt+0x3a30>
   14a34:	mov	r0, #0
   14a38:	bl	10f40 <dcgettext@plt>
   14a3c:	ldr	r3, [r4, #24]
   14a40:	mov	r1, #1
   14a44:	str	r3, [sp, #20]
   14a48:	ldr	r3, [r4, #20]
   14a4c:	str	r3, [sp, #16]
   14a50:	ldr	r3, [r4, #16]
   14a54:	str	r3, [sp, #12]
   14a58:	ldr	r3, [r4, #12]
   14a5c:	str	r3, [sp, #8]
   14a60:	ldr	r3, [r4, #8]
   14a64:	str	r3, [sp, #4]
   14a68:	ldr	r3, [r4, #4]
   14a6c:	str	r3, [sp]
   14a70:	ldr	r3, [r4]
   14a74:	mov	r2, r0
   14a78:	mov	r0, r5
   14a7c:	bl	11090 <__fprintf_chk@plt>
   14a80:	b	1498c <__assert_fail@plt+0x3830>
   14a84:	mov	r2, #5
   14a88:	ldr	r1, [pc, #256]	; 14b90 <__assert_fail@plt+0x3a34>
   14a8c:	mov	r0, #0
   14a90:	bl	10f40 <dcgettext@plt>
   14a94:	ldr	r3, [r4, #28]
   14a98:	mov	r1, #1
   14a9c:	str	r3, [sp, #24]
   14aa0:	ldr	r3, [r4, #24]
   14aa4:	str	r3, [sp, #20]
   14aa8:	ldr	r3, [r4, #20]
   14aac:	str	r3, [sp, #16]
   14ab0:	ldr	r3, [r4, #16]
   14ab4:	str	r3, [sp, #12]
   14ab8:	ldr	r3, [r4, #12]
   14abc:	str	r3, [sp, #8]
   14ac0:	ldr	r3, [r4, #8]
   14ac4:	str	r3, [sp, #4]
   14ac8:	ldr	r3, [r4, #4]
   14acc:	str	r3, [sp]
   14ad0:	ldr	r3, [r4]
   14ad4:	mov	r2, r0
   14ad8:	mov	r0, r5
   14adc:	bl	11090 <__fprintf_chk@plt>
   14ae0:	b	1498c <__assert_fail@plt+0x3830>
   14ae4:	ldr	r1, [pc, #168]	; 14b94 <__assert_fail@plt+0x3a38>
   14ae8:	mov	r2, #5
   14aec:	mov	r0, #0
   14af0:	bl	10f40 <dcgettext@plt>
   14af4:	ldr	r3, [r4, #32]
   14af8:	mov	r1, #1
   14afc:	str	r3, [sp, #28]
   14b00:	ldr	r3, [r4, #28]
   14b04:	str	r3, [sp, #24]
   14b08:	ldr	r3, [r4, #24]
   14b0c:	str	r3, [sp, #20]
   14b10:	ldr	r3, [r4, #20]
   14b14:	str	r3, [sp, #16]
   14b18:	ldr	r3, [r4, #16]
   14b1c:	str	r3, [sp, #12]
   14b20:	ldr	r3, [r4, #12]
   14b24:	str	r3, [sp, #8]
   14b28:	ldr	r3, [r4, #8]
   14b2c:	str	r3, [sp, #4]
   14b30:	ldr	r3, [r4, #4]
   14b34:	str	r3, [sp]
   14b38:	ldr	r3, [r4]
   14b3c:	mov	r2, r0
   14b40:	mov	r0, r5
   14b44:	bl	11090 <__fprintf_chk@plt>
   14b48:	b	1498c <__assert_fail@plt+0x3830>
   14b4c:	mov	r2, #5
   14b50:	ldr	r1, [pc, #64]	; 14b98 <__assert_fail@plt+0x3a3c>
   14b54:	b	14aec <__assert_fail@plt+0x3990>
   14b58:	muleq	r1, r5, r4
   14b5c:	andeq	r7, r1, r8, lsr #9
   14b60:	andeq	r0, r0, r6, ror #15
   14b64:	andeq	r7, r1, r6, ror r7
   14b68:	andeq	r7, r1, ip, lsr #9
   14b6c:	andeq	r7, r1, r7, asr r5
   14b70:	andeq	r7, r1, r1, lsr #9
   14b74:	andeq	r7, r1, r9, ror r5
   14b78:	andeq	r7, r1, r9, lsl #11
   14b7c:	andeq	r7, r1, r0, lsr #11
   14b80:			; <UNDEFINED> instruction: 0x000175bc
   14b84:	ldrdeq	r7, [r1], -ip
   14b88:	andeq	r7, r1, r0, lsl #12
   14b8c:	andeq	r7, r1, r8, lsr #12
   14b90:	andeq	r7, r1, r4, asr r6
   14b94:	andeq	r7, r1, r4, lsl #13
   14b98:			; <UNDEFINED> instruction: 0x000176b8
   14b9c:	push	{r0, r1, r4, lr}
   14ba0:	mov	ip, #0
   14ba4:	ldr	lr, [sp, #16]
   14ba8:	ldr	r4, [lr, ip, lsl #2]
   14bac:	cmp	r4, #0
   14bb0:	bne	14bc8 <__assert_fail@plt+0x3a6c>
   14bb4:	str	ip, [sp, #4]
   14bb8:	str	lr, [sp]
   14bbc:	bl	147d0 <__assert_fail@plt+0x3674>
   14bc0:	add	sp, sp, #8
   14bc4:	pop	{r4, pc}
   14bc8:	add	ip, ip, #1
   14bcc:	b	14ba8 <__assert_fail@plt+0x3a4c>
   14bd0:	push	{r4, r5, lr}
   14bd4:	sub	sp, sp, #52	; 0x34
   14bd8:	mov	ip, #0
   14bdc:	ldr	r5, [sp, #64]	; 0x40
   14be0:	add	lr, sp, #8
   14be4:	ldr	r4, [r5, ip, lsl #2]
   14be8:	cmp	r4, #0
   14bec:	str	r4, [lr, ip, lsl #2]
   14bf0:	beq	14c00 <__assert_fail@plt+0x3aa4>
   14bf4:	add	ip, ip, #1
   14bf8:	cmp	ip, #10
   14bfc:	bne	14be4 <__assert_fail@plt+0x3a88>
   14c00:	str	ip, [sp, #4]
   14c04:	str	lr, [sp]
   14c08:	bl	147d0 <__assert_fail@plt+0x3674>
   14c0c:	add	sp, sp, #52	; 0x34
   14c10:	pop	{r4, r5, pc}
   14c14:	push	{r3}		; (str r3, [sp, #-4]!)
   14c18:	push	{r0, r1, r2, r3, lr}
   14c1c:	add	r3, sp, #24
   14c20:	str	r3, [sp, #12]
   14c24:	str	r3, [sp]
   14c28:	ldr	r3, [sp, #20]
   14c2c:	bl	14bd0 <__assert_fail@plt+0x3a74>
   14c30:	add	sp, sp, #16
   14c34:	pop	{lr}		; (ldr lr, [sp], #4)
   14c38:	add	sp, sp, #4
   14c3c:	bx	lr
   14c40:	ldr	r3, [pc, #116]	; 14cbc <__assert_fail@plt+0x3b60>
   14c44:	push	{r4, lr}
   14c48:	mov	r0, #10
   14c4c:	ldr	r1, [r3]
   14c50:	bl	10f28 <fputc_unlocked@plt>
   14c54:	mov	r2, #5
   14c58:	ldr	r1, [pc, #96]	; 14cc0 <__assert_fail@plt+0x3b64>
   14c5c:	mov	r0, #0
   14c60:	bl	10f40 <dcgettext@plt>
   14c64:	ldr	r2, [pc, #88]	; 14cc4 <__assert_fail@plt+0x3b68>
   14c68:	mov	r1, r0
   14c6c:	mov	r0, #1
   14c70:	bl	1106c <__printf_chk@plt>
   14c74:	mov	r2, #5
   14c78:	ldr	r1, [pc, #72]	; 14cc8 <__assert_fail@plt+0x3b6c>
   14c7c:	mov	r0, #0
   14c80:	bl	10f40 <dcgettext@plt>
   14c84:	ldr	r3, [pc, #64]	; 14ccc <__assert_fail@plt+0x3b70>
   14c88:	ldr	r2, [pc, #64]	; 14cd0 <__assert_fail@plt+0x3b74>
   14c8c:	mov	r1, r0
   14c90:	mov	r0, #1
   14c94:	bl	1106c <__printf_chk@plt>
   14c98:	mov	r2, #5
   14c9c:	ldr	r1, [pc, #48]	; 14cd4 <__assert_fail@plt+0x3b78>
   14ca0:	mov	r0, #0
   14ca4:	bl	10f40 <dcgettext@plt>
   14ca8:	ldr	r2, [pc, #40]	; 14cd8 <__assert_fail@plt+0x3b7c>
   14cac:	pop	{r4, lr}
   14cb0:	mov	r1, r0
   14cb4:	mov	r0, #1
   14cb8:	b	1106c <__printf_chk@plt>
   14cbc:	andeq	r8, r2, r4, lsl #3
   14cc0:	strdeq	r7, [r1], -r4
   14cc4:	andeq	r7, r1, r8, lsl #14
   14cc8:	andeq	r7, r1, lr, lsl r7
   14ccc:	strdeq	r7, [r1], -r4
   14cd0:	andeq	r7, r1, ip, lsl r1
   14cd4:	andeq	r7, r1, r2, lsr r7
   14cd8:	andeq	r7, r1, r9, asr r7
   14cdc:	push	{r4, lr}
   14ce0:	bl	15b1c <__assert_fail@plt+0x49c0>
   14ce4:	cmp	r0, #0
   14ce8:	popne	{r4, pc}
   14cec:	bl	15170 <__assert_fail@plt+0x4014>
   14cf0:	push	{r4, lr}
   14cf4:	bl	15b1c <__assert_fail@plt+0x49c0>
   14cf8:	cmp	r0, #0
   14cfc:	popne	{r4, pc}
   14d00:	bl	15170 <__assert_fail@plt+0x4014>
   14d04:	b	14cdc <__assert_fail@plt+0x3b80>
   14d08:	push	{r4, r5, r6, lr}
   14d0c:	mov	r5, r0
   14d10:	mov	r4, r1
   14d14:	bl	15b5c <__assert_fail@plt+0x4a00>
   14d18:	cmp	r0, #0
   14d1c:	popne	{r4, r5, r6, pc}
   14d20:	adds	r4, r4, #0
   14d24:	movne	r4, #1
   14d28:	cmp	r5, #0
   14d2c:	orreq	r4, r4, #1
   14d30:	cmp	r4, #0
   14d34:	popeq	{r4, r5, r6, pc}
   14d38:	bl	15170 <__assert_fail@plt+0x4014>
   14d3c:	push	{r4, lr}
   14d40:	cmp	r1, #0
   14d44:	orreq	r1, r1, #1
   14d48:	bl	15b5c <__assert_fail@plt+0x4a00>
   14d4c:	cmp	r0, #0
   14d50:	popne	{r4, pc}
   14d54:	bl	15170 <__assert_fail@plt+0x4014>
   14d58:	push	{r4, r5, r6, lr}
   14d5c:	mov	r6, r0
   14d60:	mov	r5, r1
   14d64:	mov	r4, r2
   14d68:	bl	15fc4 <__assert_fail@plt+0x4e68>
   14d6c:	cmp	r0, #0
   14d70:	popne	{r4, r5, r6, pc}
   14d74:	cmp	r6, #0
   14d78:	beq	14d88 <__assert_fail@plt+0x3c2c>
   14d7c:	cmp	r5, #0
   14d80:	cmpne	r4, #0
   14d84:	popeq	{r4, r5, r6, pc}
   14d88:	bl	15170 <__assert_fail@plt+0x4014>
   14d8c:	b	14d58 <__assert_fail@plt+0x3bfc>
   14d90:	cmp	r2, #0
   14d94:	cmpne	r1, #0
   14d98:	moveq	r2, #1
   14d9c:	moveq	r1, r2
   14da0:	push	{r4, lr}
   14da4:	bl	15fc4 <__assert_fail@plt+0x4e68>
   14da8:	cmp	r0, #0
   14dac:	popne	{r4, pc}
   14db0:	bl	15170 <__assert_fail@plt+0x4014>
   14db4:	mov	r2, r1
   14db8:	mov	r1, r0
   14dbc:	mov	r0, #0
   14dc0:	b	14d58 <__assert_fail@plt+0x3bfc>
   14dc4:	mov	r2, r1
   14dc8:	mov	r1, r0
   14dcc:	mov	r0, #0
   14dd0:	b	14d90 <__assert_fail@plt+0x3c34>
   14dd4:	push	{r4, r5, r6, r7, r8, lr}
   14dd8:	subs	r7, r0, #0
   14ddc:	mov	r5, r1
   14de0:	mov	r6, r2
   14de4:	ldr	r4, [r1]
   14de8:	bne	14e24 <__assert_fail@plt+0x3cc8>
   14dec:	cmp	r4, #0
   14df0:	bne	14e0c <__assert_fail@plt+0x3cb0>
   14df4:	mov	r1, r2
   14df8:	mov	r0, #64	; 0x40
   14dfc:	bl	16010 <__assert_fail@plt+0x4eb4>
   14e00:	cmp	r0, #0
   14e04:	movne	r4, r0
   14e08:	addeq	r4, r0, #1
   14e0c:	mov	r2, r6
   14e10:	mov	r1, r4
   14e14:	mov	r0, r7
   14e18:	bl	14d58 <__assert_fail@plt+0x3bfc>
   14e1c:	str	r4, [r5]
   14e20:	pop	{r4, r5, r6, r7, r8, pc}
   14e24:	lsr	r2, r4, #1
   14e28:	add	r3, r2, #1
   14e2c:	mvn	r3, r3
   14e30:	cmp	r4, r3
   14e34:	addls	r4, r4, #1
   14e38:	addls	r4, r4, r2
   14e3c:	bls	14e0c <__assert_fail@plt+0x3cb0>
   14e40:	bl	15170 <__assert_fail@plt+0x4014>
   14e44:	mov	r2, #1
   14e48:	b	14dd4 <__assert_fail@plt+0x3c78>
   14e4c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e50:	mov	sl, r0
   14e54:	ldr	r8, [r1]
   14e58:	mov	fp, r1
   14e5c:	mov	r5, r2
   14e60:	asrs	r4, r8, #1
   14e64:	mov	r9, r3
   14e68:	ldr	r7, [sp, #48]	; 0x30
   14e6c:	bpl	14f08 <__assert_fail@plt+0x3dac>
   14e70:	rsb	r2, r4, #-2147483648	; 0x80000000
   14e74:	cmp	r8, r2
   14e78:	movge	r2, #0
   14e7c:	movlt	r2, #1
   14e80:	mvn	r3, r9
   14e84:	cmp	r2, #0
   14e88:	lsr	r3, r3, #31
   14e8c:	addeq	r4, r4, r8
   14e90:	mvnne	r4, #-2147483648	; 0x80000000
   14e94:	mov	r0, r3
   14e98:	cmp	r9, r4
   14e9c:	movge	r0, #0
   14ea0:	andlt	r0, r0, #1
   14ea4:	cmp	r0, #0
   14ea8:	str	r3, [sp, #4]
   14eac:	bne	1507c <__assert_fail@plt+0x3f20>
   14eb0:	cmp	r7, #0
   14eb4:	bge	14fc8 <__assert_fail@plt+0x3e6c>
   14eb8:	cmp	r4, #0
   14ebc:	bge	14f20 <__assert_fail@plt+0x3dc4>
   14ec0:	mov	r1, r7
   14ec4:	mvn	r0, #-2147483648	; 0x80000000
   14ec8:	bl	1621c <__assert_fail@plt+0x50c0>
   14ecc:	cmp	r0, r4
   14ed0:	movle	r0, #0
   14ed4:	movgt	r0, #1
   14ed8:	cmp	r0, #0
   14edc:	mvnne	r6, #-2147483648	; 0x80000000
   14ee0:	beq	14f30 <__assert_fail@plt+0x3dd4>
   14ee4:	mov	r1, r7
   14ee8:	mov	r0, r6
   14eec:	bl	1621c <__assert_fail@plt+0x50c0>
   14ef0:	mov	r1, r7
   14ef4:	mov	r4, r0
   14ef8:	mov	r0, r6
   14efc:	bl	1643c <__assert_fail@plt+0x52e0>
   14f00:	sub	r1, r6, r1
   14f04:	b	14f40 <__assert_fail@plt+0x3de4>
   14f08:	mvn	r2, #-2147483648	; 0x80000000
   14f0c:	sub	r2, r2, r4
   14f10:	cmp	r8, r2
   14f14:	movle	r2, #0
   14f18:	movgt	r2, #1
   14f1c:	b	14e80 <__assert_fail@plt+0x3d24>
   14f20:	cmn	r7, #1
   14f24:	movne	r1, r7
   14f28:	movne	r0, #-2147483648	; 0x80000000
   14f2c:	bne	15094 <__assert_fail@plt+0x3f38>
   14f30:	mul	r1, r7, r4
   14f34:	cmp	r1, #63	; 0x3f
   14f38:	movle	r6, #64	; 0x40
   14f3c:	ble	14ee4 <__assert_fail@plt+0x3d88>
   14f40:	cmp	sl, #0
   14f44:	sub	r2, r4, r8
   14f48:	streq	sl, [fp]
   14f4c:	cmp	r2, r5
   14f50:	bge	15024 <__assert_fail@plt+0x3ec8>
   14f54:	cmp	r5, #0
   14f58:	bge	14ff0 <__assert_fail@plt+0x3e94>
   14f5c:	rsb	r2, r5, #-2147483648	; 0x80000000
   14f60:	cmp	r8, r2
   14f64:	movge	r2, #0
   14f68:	movlt	r2, #1
   14f6c:	cmp	r2, #0
   14f70:	bne	14fc4 <__assert_fail@plt+0x3e68>
   14f74:	ldr	r0, [sp, #4]
   14f78:	add	r5, r8, r5
   14f7c:	cmp	r9, r5
   14f80:	movge	r0, #0
   14f84:	andlt	r0, r0, #1
   14f88:	cmp	r0, #0
   14f8c:	mov	r4, r5
   14f90:	bne	14fc4 <__assert_fail@plt+0x3e68>
   14f94:	cmp	r7, #0
   14f98:	bge	15038 <__assert_fail@plt+0x3edc>
   14f9c:	cmp	r5, #0
   14fa0:	bge	15010 <__assert_fail@plt+0x3eb4>
   14fa4:	mov	r1, r7
   14fa8:	mvn	r0, #-2147483648	; 0x80000000
   14fac:	bl	1621c <__assert_fail@plt+0x50c0>
   14fb0:	cmp	r5, r0
   14fb4:	movge	r0, #0
   14fb8:	movlt	r0, #1
   14fbc:	cmp	r0, #0
   14fc0:	beq	15020 <__assert_fail@plt+0x3ec4>
   14fc4:	bl	15170 <__assert_fail@plt+0x4014>
   14fc8:	beq	14f30 <__assert_fail@plt+0x3dd4>
   14fcc:	cmp	r4, #0
   14fd0:	bge	1508c <__assert_fail@plt+0x3f30>
   14fd4:	cmn	r4, #1
   14fd8:	beq	14f30 <__assert_fail@plt+0x3dd4>
   14fdc:	mov	r1, r4
   14fe0:	mov	r0, #-2147483648	; 0x80000000
   14fe4:	bl	1621c <__assert_fail@plt+0x50c0>
   14fe8:	cmp	r7, r0
   14fec:	b	14ed0 <__assert_fail@plt+0x3d74>
   14ff0:	cmp	r8, #0
   14ff4:	blt	14f74 <__assert_fail@plt+0x3e18>
   14ff8:	mvn	r2, #-2147483648	; 0x80000000
   14ffc:	sub	r2, r2, r5
   15000:	cmp	r8, r2
   15004:	movle	r2, #0
   15008:	movgt	r2, #1
   1500c:	b	14f6c <__assert_fail@plt+0x3e10>
   15010:	cmn	r7, #1
   15014:	movne	r1, r7
   15018:	movne	r0, #-2147483648	; 0x80000000
   1501c:	bne	15070 <__assert_fail@plt+0x3f14>
   15020:	mul	r1, r5, r7
   15024:	mov	r0, sl
   15028:	bl	14d08 <__assert_fail@plt+0x3bac>
   1502c:	str	r4, [fp]
   15030:	add	sp, sp, #12
   15034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15038:	beq	15020 <__assert_fail@plt+0x3ec4>
   1503c:	cmp	r5, #0
   15040:	movge	r1, r7
   15044:	mvnge	r0, #-2147483648	; 0x80000000
   15048:	bge	15070 <__assert_fail@plt+0x3f14>
   1504c:	cmn	r5, #1
   15050:	beq	15020 <__assert_fail@plt+0x3ec4>
   15054:	mov	r1, r5
   15058:	mov	r0, #-2147483648	; 0x80000000
   1505c:	bl	1621c <__assert_fail@plt+0x50c0>
   15060:	cmp	r7, r0
   15064:	movle	r0, #0
   15068:	movgt	r0, #1
   1506c:	b	14fbc <__assert_fail@plt+0x3e60>
   15070:	bl	1621c <__assert_fail@plt+0x50c0>
   15074:	cmp	r5, r0
   15078:	b	15064 <__assert_fail@plt+0x3f08>
   1507c:	cmp	r7, #0
   15080:	mov	r4, r9
   15084:	blt	14f20 <__assert_fail@plt+0x3dc4>
   15088:	beq	14f30 <__assert_fail@plt+0x3dd4>
   1508c:	mov	r1, r7
   15090:	mvn	r0, #-2147483648	; 0x80000000
   15094:	bl	1621c <__assert_fail@plt+0x50c0>
   15098:	cmp	r0, r4
   1509c:	movge	r0, #0
   150a0:	movlt	r0, #1
   150a4:	b	14ed8 <__assert_fail@plt+0x3d7c>
   150a8:	push	{r4, lr}
   150ac:	bl	15ad4 <__assert_fail@plt+0x4978>
   150b0:	cmp	r0, #0
   150b4:	popne	{r4, pc}
   150b8:	bl	15170 <__assert_fail@plt+0x4014>
   150bc:	mov	r1, #1
   150c0:	b	150a8 <__assert_fail@plt+0x3f4c>
   150c4:	push	{r4, lr}
   150c8:	bl	15ad4 <__assert_fail@plt+0x4978>
   150cc:	cmp	r0, #0
   150d0:	popne	{r4, pc}
   150d4:	bl	15170 <__assert_fail@plt+0x4014>
   150d8:	mov	r1, #1
   150dc:	b	150c4 <__assert_fail@plt+0x3f68>
   150e0:	push	{r4, r5, r6, lr}
   150e4:	mov	r4, r1
   150e8:	mov	r5, r0
   150ec:	mov	r0, r1
   150f0:	bl	14cdc <__assert_fail@plt+0x3b80>
   150f4:	mov	r2, r4
   150f8:	mov	r1, r5
   150fc:	pop	{r4, r5, r6, lr}
   15100:	b	10ef8 <memcpy@plt>
   15104:	push	{r4, r5, r6, lr}
   15108:	mov	r4, r1
   1510c:	mov	r5, r0
   15110:	mov	r0, r1
   15114:	bl	14cf0 <__assert_fail@plt+0x3b94>
   15118:	mov	r2, r4
   1511c:	mov	r1, r5
   15120:	pop	{r4, r5, r6, lr}
   15124:	b	10ef8 <memcpy@plt>
   15128:	push	{r4, r5, r6, lr}
   1512c:	mov	r5, r0
   15130:	add	r0, r1, #1
   15134:	mov	r4, r1
   15138:	bl	14cf0 <__assert_fail@plt+0x3b94>
   1513c:	mov	r2, #0
   15140:	mov	r1, r5
   15144:	strb	r2, [r0, r4]
   15148:	mov	r2, r4
   1514c:	pop	{r4, r5, r6, lr}
   15150:	b	10ef8 <memcpy@plt>
   15154:	push	{r4, lr}
   15158:	mov	r4, r0
   1515c:	bl	11030 <strlen@plt>
   15160:	add	r1, r0, #1
   15164:	mov	r0, r4
   15168:	pop	{r4, lr}
   1516c:	b	150e0 <__assert_fail@plt+0x3f84>
   15170:	ldr	r3, [pc, #44]	; 151a4 <__assert_fail@plt+0x4048>
   15174:	push	{r4, lr}
   15178:	mov	r2, #5
   1517c:	ldr	r1, [pc, #36]	; 151a8 <__assert_fail@plt+0x404c>
   15180:	mov	r0, #0
   15184:	ldr	r4, [r3]
   15188:	bl	10f40 <dcgettext@plt>
   1518c:	ldr	r2, [pc, #24]	; 151ac <__assert_fail@plt+0x4050>
   15190:	mov	r1, #0
   15194:	mov	r3, r0
   15198:	mov	r0, r4
   1519c:	bl	10fac <error@plt>
   151a0:	bl	1112c <abort@plt>
   151a4:	andeq	r8, r2, r4, lsr #2
   151a8:	andeq	r7, r1, r5, lsr #15
   151ac:	andeq	r6, r1, r2, asr #15
   151b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   151b4:	mov	r4, r0
   151b8:	mov	r6, r1
   151bc:	mov	r9, r2
   151c0:	ldr	r1, [pc, #164]	; 1526c <__assert_fail@plt+0x4110>
   151c4:	mov	r2, #5
   151c8:	mov	r0, #0
   151cc:	mov	r7, r3
   151d0:	ldr	r8, [sp, #32]
   151d4:	bl	10f40 <dcgettext@plt>
   151d8:	mov	r1, r4
   151dc:	mov	r2, r0
   151e0:	mov	r0, #0
   151e4:	bl	10fac <error@plt>
   151e8:	mov	r2, #5
   151ec:	ldr	r1, [pc, #124]	; 15270 <__assert_fail@plt+0x4114>
   151f0:	mov	r0, #0
   151f4:	bl	10f40 <dcgettext@plt>
   151f8:	mov	r1, #0
   151fc:	mov	r2, r0
   15200:	mov	r0, r1
   15204:	bl	10fac <error@plt>
   15208:	ldr	r3, [pc, #100]	; 15274 <__assert_fail@plt+0x4118>
   1520c:	mov	r2, #5
   15210:	ldr	r1, [pc, #96]	; 15278 <__assert_fail@plt+0x411c>
   15214:	mov	r0, #0
   15218:	ldr	r4, [r3]
   1521c:	bl	10f40 <dcgettext@plt>
   15220:	mov	r3, r9
   15224:	mov	r2, r6
   15228:	mov	r1, #8
   1522c:	mov	r5, r0
   15230:	mov	r0, #0
   15234:	bl	14518 <__assert_fail@plt+0x33bc>
   15238:	mov	r3, r8
   1523c:	mov	r2, r7
   15240:	mov	r1, #8
   15244:	mov	r6, r0
   15248:	mov	r0, #1
   1524c:	bl	14518 <__assert_fail@plt+0x33bc>
   15250:	mov	r3, r6
   15254:	mov	r2, r5
   15258:	mov	r1, #0
   1525c:	str	r0, [sp, #32]
   15260:	mov	r0, r4
   15264:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   15268:	b	10fac <error@plt>
   1526c:			; <UNDEFINED> instruction: 0x000177b6
   15270:	andeq	r7, r1, pc, asr #15
   15274:	andeq	r8, r2, r4, lsr #2
   15278:	strdeq	r7, [r1], -sl
   1527c:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   15280:	mov	r6, r1
   15284:	mov	r7, r2
   15288:	mov	r8, r3
   1528c:	mov	r5, r0
   15290:	bl	15ef4 <__assert_fail@plt+0x4d98>
   15294:	mov	r4, r0
   15298:	bl	11048 <__errno_location@plt>
   1529c:	ldr	r0, [r0]
   152a0:	cmp	r0, #0
   152a4:	beq	152bc <__assert_fail@plt+0x4160>
   152a8:	str	r8, [sp]
   152ac:	mov	r3, r7
   152b0:	mov	r2, r6
   152b4:	mov	r1, r5
   152b8:	bl	151b0 <__assert_fail@plt+0x4054>
   152bc:	mov	r0, r4
   152c0:	add	sp, sp, #8
   152c4:	pop	{r4, r5, r6, r7, r8, pc}
   152c8:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   152cc:	mov	r7, r1
   152d0:	mov	r8, r2
   152d4:	mov	r4, r3
   152d8:	mov	r6, r0
   152dc:	bl	15f6c <__assert_fail@plt+0x4e10>
   152e0:	mov	r5, r0
   152e4:	bl	11048 <__errno_location@plt>
   152e8:	ldr	r0, [r0]
   152ec:	cmp	r0, #0
   152f0:	beq	1530c <__assert_fail@plt+0x41b0>
   152f4:	sub	r4, r4, #1
   152f8:	str	r4, [sp]
   152fc:	mov	r3, r8
   15300:	sub	r2, r7, #1
   15304:	mov	r1, r6
   15308:	bl	151b0 <__assert_fail@plt+0x4054>
   1530c:	mov	r0, r5
   15310:	add	sp, sp, #8
   15314:	pop	{r4, r5, r6, r7, r8, pc}
   15318:	push	{r4, r5, r6, lr}
   1531c:	subs	r5, r1, #0
   15320:	mov	r4, r0
   15324:	bge	15354 <__assert_fail@plt+0x41f8>
   15328:	ldr	r0, [r0]
   1532c:	adds	r0, r0, #0
   15330:	movne	r0, #1
   15334:	cmp	r0, #0
   15338:	mvnne	r3, #0
   1533c:	ldreq	r3, [r4]
   15340:	strne	r3, [r4]
   15344:	movne	r0, #1
   15348:	muleq	r5, r5, r3
   1534c:	streq	r5, [r4]
   15350:	pop	{r4, r5, r6, pc}
   15354:	moveq	r0, r5
   15358:	beq	15334 <__assert_fail@plt+0x41d8>
   1535c:	mvn	r0, #0
   15360:	bl	16010 <__assert_fail@plt+0x4eb4>
   15364:	ldr	r3, [r4]
   15368:	cmp	r0, r3
   1536c:	movcs	r0, #0
   15370:	movcc	r0, #1
   15374:	b	15334 <__assert_fail@plt+0x41d8>
   15378:	push	{r4, r5, r6, r7, r8, lr}
   1537c:	mov	r6, r0
   15380:	mov	r7, r1
   15384:	mov	r5, r2
   15388:	mov	r4, #0
   1538c:	cmp	r5, #0
   15390:	bne	1539c <__assert_fail@plt+0x4240>
   15394:	mov	r0, r4
   15398:	pop	{r4, r5, r6, r7, r8, pc}
   1539c:	mov	r1, r7
   153a0:	mov	r0, r6
   153a4:	bl	15318 <__assert_fail@plt+0x41bc>
   153a8:	sub	r5, r5, #1
   153ac:	orr	r4, r4, r0
   153b0:	b	1538c <__assert_fail@plt+0x4230>
   153b4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153b8:	cmp	r2, #36	; 0x24
   153bc:	ldr	r9, [sp, #48]	; 0x30
   153c0:	bls	153d8 <__assert_fail@plt+0x427c>
   153c4:	ldr	r3, [pc, #768]	; 156cc <__assert_fail@plt+0x4570>
   153c8:	mov	r2, #85	; 0x55
   153cc:	ldr	r1, [pc, #764]	; 156d0 <__assert_fail@plt+0x4574>
   153d0:	ldr	r0, [pc, #764]	; 156d4 <__assert_fail@plt+0x4578>
   153d4:	bl	1115c <__assert_fail@plt>
   153d8:	cmp	r1, #0
   153dc:	mov	r7, r1
   153e0:	mov	r4, r0
   153e4:	mov	fp, r2
   153e8:	mov	r8, r3
   153ec:	moveq	r7, sp
   153f0:	bl	11048 <__errno_location@plt>
   153f4:	mov	r3, #0
   153f8:	str	r3, [r0]
   153fc:	mov	sl, r0
   15400:	bl	1100c <__ctype_b_loc@plt>
   15404:	ldrb	r6, [r4]
   15408:	mov	r3, r4
   1540c:	ldr	r1, [r0]
   15410:	lsl	r2, r6, #1
   15414:	ldrh	r5, [r1, r2]
   15418:	ands	r5, r5, #8192	; 0x2000
   1541c:	bne	15438 <__assert_fail@plt+0x42dc>
   15420:	cmp	r6, #45	; 0x2d
   15424:	bne	15440 <__assert_fail@plt+0x42e4>
   15428:	mov	r5, #4
   1542c:	mov	r0, r5
   15430:	add	sp, sp, #12
   15434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15438:	ldrb	r6, [r3, #1]!
   1543c:	b	15410 <__assert_fail@plt+0x42b4>
   15440:	mov	r2, fp
   15444:	mov	r1, r7
   15448:	mov	r0, r4
   1544c:	bl	11024 <strtoul@plt>
   15450:	ldr	r6, [r7]
   15454:	cmp	r4, r6
   15458:	str	r0, [sp, #4]
   1545c:	bne	154bc <__assert_fail@plt+0x4360>
   15460:	cmp	r9, #0
   15464:	beq	15428 <__assert_fail@plt+0x42cc>
   15468:	ldrb	r1, [r6]
   1546c:	cmp	r1, #0
   15470:	beq	15428 <__assert_fail@plt+0x42cc>
   15474:	mov	r0, r9
   15478:	bl	1103c <strchr@plt>
   1547c:	cmp	r0, #0
   15480:	movne	r3, #1
   15484:	strne	r3, [sp, #4]
   15488:	beq	15428 <__assert_fail@plt+0x42cc>
   1548c:	ldrb	r4, [r6]
   15490:	cmp	r4, #0
   15494:	beq	155cc <__assert_fail@plt+0x4470>
   15498:	mov	r1, r4
   1549c:	mov	r0, r9
   154a0:	bl	1103c <strchr@plt>
   154a4:	cmp	r0, #0
   154a8:	bne	154e4 <__assert_fail@plt+0x4388>
   154ac:	ldr	r3, [sp, #4]
   154b0:	orr	r5, r5, #2
   154b4:	str	r3, [r8]
   154b8:	b	1542c <__assert_fail@plt+0x42d0>
   154bc:	ldr	r5, [sl]
   154c0:	cmp	r5, #0
   154c4:	beq	154d4 <__assert_fail@plt+0x4378>
   154c8:	cmp	r5, #34	; 0x22
   154cc:	bne	15428 <__assert_fail@plt+0x42cc>
   154d0:	mov	r5, #1
   154d4:	cmp	r9, #0
   154d8:	streq	r0, [r8]
   154dc:	bne	1548c <__assert_fail@plt+0x4330>
   154e0:	b	1542c <__assert_fail@plt+0x42d0>
   154e4:	cmp	r4, #84	; 0x54
   154e8:	beq	1553c <__assert_fail@plt+0x43e0>
   154ec:	bhi	15524 <__assert_fail@plt+0x43c8>
   154f0:	cmp	r4, #75	; 0x4b
   154f4:	beq	1553c <__assert_fail@plt+0x43e0>
   154f8:	bhi	15514 <__assert_fail@plt+0x43b8>
   154fc:	cmp	r4, #69	; 0x45
   15500:	beq	1553c <__assert_fail@plt+0x43e0>
   15504:	cmp	r4, #71	; 0x47
   15508:	beq	1553c <__assert_fail@plt+0x43e0>
   1550c:	mov	r6, #1
   15510:	b	15600 <__assert_fail@plt+0x44a4>
   15514:	cmp	r4, #77	; 0x4d
   15518:	beq	1553c <__assert_fail@plt+0x43e0>
   1551c:	cmp	r4, #80	; 0x50
   15520:	b	15508 <__assert_fail@plt+0x43ac>
   15524:	cmp	r4, #103	; 0x67
   15528:	beq	1553c <__assert_fail@plt+0x43e0>
   1552c:	bhi	155d8 <__assert_fail@plt+0x447c>
   15530:	sub	r3, r4, #89	; 0x59
   15534:	cmp	r3, #1
   15538:	bhi	1550c <__assert_fail@plt+0x43b0>
   1553c:	mov	r1, #48	; 0x30
   15540:	mov	r0, r9
   15544:	bl	1103c <strchr@plt>
   15548:	cmp	r0, #0
   1554c:	beq	1550c <__assert_fail@plt+0x43b0>
   15550:	ldrb	r3, [r6, #1]
   15554:	cmp	r3, #68	; 0x44
   15558:	beq	1556c <__assert_fail@plt+0x4410>
   1555c:	cmp	r3, #105	; 0x69
   15560:	beq	155f0 <__assert_fail@plt+0x4494>
   15564:	cmp	r3, #66	; 0x42
   15568:	bne	1550c <__assert_fail@plt+0x43b0>
   1556c:	mov	r6, #2
   15570:	mov	r1, #1000	; 0x3e8
   15574:	cmp	r4, #89	; 0x59
   15578:	beq	156bc <__assert_fail@plt+0x4560>
   1557c:	bhi	15628 <__assert_fail@plt+0x44cc>
   15580:	cmp	r4, #75	; 0x4b
   15584:	beq	15668 <__assert_fail@plt+0x450c>
   15588:	bhi	15608 <__assert_fail@plt+0x44ac>
   1558c:	cmp	r4, #69	; 0x45
   15590:	beq	15690 <__assert_fail@plt+0x4534>
   15594:	cmp	r4, #71	; 0x47
   15598:	beq	1569c <__assert_fail@plt+0x4540>
   1559c:	cmp	r4, #66	; 0x42
   155a0:	moveq	r1, #1024	; 0x400
   155a4:	bne	154ac <__assert_fail@plt+0x4350>
   155a8:	add	r0, sp, #4
   155ac:	bl	15318 <__assert_fail@plt+0x41bc>
   155b0:	ldr	r3, [r7]
   155b4:	orr	r5, r5, r0
   155b8:	add	r2, r3, r6
   155bc:	str	r2, [r7]
   155c0:	ldrb	r3, [r3, r6]
   155c4:	cmp	r3, #0
   155c8:	orrne	r5, r5, #2
   155cc:	ldr	r3, [sp, #4]
   155d0:	str	r3, [r8]
   155d4:	b	1542c <__assert_fail@plt+0x42d0>
   155d8:	cmp	r4, #109	; 0x6d
   155dc:	beq	1553c <__assert_fail@plt+0x43e0>
   155e0:	cmp	r4, #116	; 0x74
   155e4:	beq	1553c <__assert_fail@plt+0x43e0>
   155e8:	cmp	r4, #107	; 0x6b
   155ec:	b	15508 <__assert_fail@plt+0x43ac>
   155f0:	ldrb	r6, [r6, #2]
   155f4:	cmp	r6, #66	; 0x42
   155f8:	movne	r6, #1
   155fc:	moveq	r6, #3
   15600:	mov	r1, #1024	; 0x400
   15604:	b	15574 <__assert_fail@plt+0x4418>
   15608:	cmp	r4, #80	; 0x50
   1560c:	beq	156a4 <__assert_fail@plt+0x4548>
   15610:	cmp	r4, #84	; 0x54
   15614:	beq	156ac <__assert_fail@plt+0x4550>
   15618:	cmp	r4, #77	; 0x4d
   1561c:	bne	154ac <__assert_fail@plt+0x4350>
   15620:	mov	r2, #2
   15624:	b	15694 <__assert_fail@plt+0x4538>
   15628:	cmp	r4, #103	; 0x67
   1562c:	beq	1569c <__assert_fail@plt+0x4540>
   15630:	bhi	15654 <__assert_fail@plt+0x44f8>
   15634:	cmp	r4, #98	; 0x62
   15638:	beq	15688 <__assert_fail@plt+0x452c>
   1563c:	cmp	r4, #99	; 0x63
   15640:	beq	156c4 <__assert_fail@plt+0x4568>
   15644:	cmp	r4, #90	; 0x5a
   15648:	bne	154ac <__assert_fail@plt+0x4350>
   1564c:	mov	r2, #7
   15650:	b	15694 <__assert_fail@plt+0x4538>
   15654:	cmp	r4, #109	; 0x6d
   15658:	beq	15620 <__assert_fail@plt+0x44c4>
   1565c:	bhi	15670 <__assert_fail@plt+0x4514>
   15660:	cmp	r4, #107	; 0x6b
   15664:	bne	154ac <__assert_fail@plt+0x4350>
   15668:	mov	r2, #1
   1566c:	b	15694 <__assert_fail@plt+0x4538>
   15670:	cmp	r4, #116	; 0x74
   15674:	beq	156ac <__assert_fail@plt+0x4550>
   15678:	cmp	r4, #119	; 0x77
   1567c:	moveq	r1, #2
   15680:	beq	155a8 <__assert_fail@plt+0x444c>
   15684:	b	154ac <__assert_fail@plt+0x4350>
   15688:	mov	r1, #512	; 0x200
   1568c:	b	155a8 <__assert_fail@plt+0x444c>
   15690:	mov	r2, #6
   15694:	add	r0, sp, #4
   15698:	b	156b4 <__assert_fail@plt+0x4558>
   1569c:	mov	r2, #3
   156a0:	b	15694 <__assert_fail@plt+0x4538>
   156a4:	mov	r2, #5
   156a8:	b	15694 <__assert_fail@plt+0x4538>
   156ac:	mov	r2, #4
   156b0:	add	r0, sp, r2
   156b4:	bl	15378 <__assert_fail@plt+0x421c>
   156b8:	b	155b0 <__assert_fail@plt+0x4454>
   156bc:	mov	r2, #8
   156c0:	b	15694 <__assert_fail@plt+0x4538>
   156c4:	mov	r0, #0
   156c8:	b	155b0 <__assert_fail@plt+0x4454>
   156cc:	andeq	r7, r1, pc, lsl r8
   156d0:	andeq	r7, r1, r8, lsr #16
   156d4:	andeq	r7, r1, r6, lsr r8
   156d8:	push	{r4, r5, r6, lr}
   156dc:	subs	r5, r1, #0
   156e0:	mov	r4, r0
   156e4:	bge	15724 <__assert_fail@plt+0x45c8>
   156e8:	ldm	r0, {r0, r3}
   156ec:	orr	r0, r0, r3
   156f0:	adds	r0, r0, #0
   156f4:	movne	r0, #1
   156f8:	cmp	r0, #0
   156fc:	bne	15758 <__assert_fail@plt+0x45fc>
   15700:	ldr	r2, [r4]
   15704:	asr	r3, r5, #31
   15708:	ldr	r1, [r4, #4]
   1570c:	mul	r3, r3, r2
   15710:	mla	r1, r5, r1, r3
   15714:	umull	r2, r3, r2, r5
   15718:	add	r3, r1, r3
   1571c:	strd	r2, [r4]
   15720:	pop	{r4, r5, r6, pc}
   15724:	moveq	r0, r5
   15728:	beq	156f8 <__assert_fail@plt+0x459c>
   1572c:	mov	r2, r5
   15730:	asr	r3, r5, #31
   15734:	mvn	r0, #0
   15738:	mvn	r1, #0
   1573c:	bl	1645c <__assert_fail@plt+0x5300>
   15740:	ldrd	r2, [r4]
   15744:	cmp	r1, r3
   15748:	cmpeq	r0, r2
   1574c:	movcc	r0, #1
   15750:	movcs	r0, #0
   15754:	b	156f8 <__assert_fail@plt+0x459c>
   15758:	mvn	r2, #0
   1575c:	mvn	r3, #0
   15760:	mov	r0, #1
   15764:	strd	r2, [r4]
   15768:	pop	{r4, r5, r6, pc}
   1576c:	push	{r4, r5, r6, r7, r8, lr}
   15770:	mov	r6, r0
   15774:	mov	r7, r1
   15778:	mov	r5, r2
   1577c:	mov	r4, #0
   15780:	cmp	r5, #0
   15784:	bne	15790 <__assert_fail@plt+0x4634>
   15788:	mov	r0, r4
   1578c:	pop	{r4, r5, r6, r7, r8, pc}
   15790:	mov	r1, r7
   15794:	mov	r0, r6
   15798:	bl	156d8 <__assert_fail@plt+0x457c>
   1579c:	sub	r5, r5, #1
   157a0:	orr	r4, r4, r0
   157a4:	b	15780 <__assert_fail@plt+0x4624>
   157a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157ac:	sub	sp, sp, #20
   157b0:	cmp	r2, #36	; 0x24
   157b4:	ldr	r9, [sp, #56]	; 0x38
   157b8:	bls	157d0 <__assert_fail@plt+0x4674>
   157bc:	ldr	r3, [pc, #772]	; 15ac8 <__assert_fail@plt+0x496c>
   157c0:	mov	r2, #85	; 0x55
   157c4:	ldr	r1, [pc, #768]	; 15acc <__assert_fail@plt+0x4970>
   157c8:	ldr	r0, [pc, #768]	; 15ad0 <__assert_fail@plt+0x4974>
   157cc:	bl	1115c <__assert_fail@plt>
   157d0:	cmp	r1, #0
   157d4:	mov	r7, r1
   157d8:	mov	r4, r0
   157dc:	mov	fp, r2
   157e0:	mov	r8, r3
   157e4:	addeq	r7, sp, #4
   157e8:	bl	11048 <__errno_location@plt>
   157ec:	mov	r3, #0
   157f0:	str	r3, [r0]
   157f4:	mov	sl, r0
   157f8:	bl	1100c <__ctype_b_loc@plt>
   157fc:	ldrb	r6, [r4]
   15800:	mov	r3, r4
   15804:	ldr	r1, [r0]
   15808:	lsl	r2, r6, #1
   1580c:	ldrh	r5, [r1, r2]
   15810:	ands	r5, r5, #8192	; 0x2000
   15814:	bne	15830 <__assert_fail@plt+0x46d4>
   15818:	cmp	r6, #45	; 0x2d
   1581c:	bne	15838 <__assert_fail@plt+0x46dc>
   15820:	mov	r5, #4
   15824:	mov	r0, r5
   15828:	add	sp, sp, #20
   1582c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15830:	ldrb	r6, [r3, #1]!
   15834:	b	15808 <__assert_fail@plt+0x46ac>
   15838:	mov	r2, fp
   1583c:	mov	r1, r7
   15840:	mov	r0, r4
   15844:	bl	11084 <strtoumax@plt>
   15848:	ldr	r6, [r7]
   1584c:	cmp	r4, r6
   15850:	strd	r0, [sp, #8]
   15854:	bne	158b8 <__assert_fail@plt+0x475c>
   15858:	cmp	r9, #0
   1585c:	beq	15820 <__assert_fail@plt+0x46c4>
   15860:	ldrb	r1, [r6]
   15864:	cmp	r1, #0
   15868:	beq	15820 <__assert_fail@plt+0x46c4>
   1586c:	mov	r0, r9
   15870:	bl	1103c <strchr@plt>
   15874:	cmp	r0, #0
   15878:	beq	15820 <__assert_fail@plt+0x46c4>
   1587c:	mov	r2, #1
   15880:	mov	r3, #0
   15884:	strd	r2, [sp, #8]
   15888:	ldrb	r4, [r6]
   1588c:	cmp	r4, #0
   15890:	beq	159c8 <__assert_fail@plt+0x486c>
   15894:	mov	r1, r4
   15898:	mov	r0, r9
   1589c:	bl	1103c <strchr@plt>
   158a0:	cmp	r0, #0
   158a4:	bne	158e0 <__assert_fail@plt+0x4784>
   158a8:	ldrd	r2, [sp, #8]
   158ac:	orr	r5, r5, #2
   158b0:	strd	r2, [r8]
   158b4:	b	15824 <__assert_fail@plt+0x46c8>
   158b8:	ldr	r5, [sl]
   158bc:	cmp	r5, #0
   158c0:	beq	158d0 <__assert_fail@plt+0x4774>
   158c4:	cmp	r5, #34	; 0x22
   158c8:	bne	15820 <__assert_fail@plt+0x46c4>
   158cc:	mov	r5, #1
   158d0:	cmp	r9, #0
   158d4:	bne	15888 <__assert_fail@plt+0x472c>
   158d8:	strd	r0, [r8]
   158dc:	b	15824 <__assert_fail@plt+0x46c8>
   158e0:	cmp	r4, #84	; 0x54
   158e4:	beq	15938 <__assert_fail@plt+0x47dc>
   158e8:	bhi	15920 <__assert_fail@plt+0x47c4>
   158ec:	cmp	r4, #75	; 0x4b
   158f0:	beq	15938 <__assert_fail@plt+0x47dc>
   158f4:	bhi	15910 <__assert_fail@plt+0x47b4>
   158f8:	cmp	r4, #69	; 0x45
   158fc:	beq	15938 <__assert_fail@plt+0x47dc>
   15900:	cmp	r4, #71	; 0x47
   15904:	beq	15938 <__assert_fail@plt+0x47dc>
   15908:	mov	r6, #1
   1590c:	b	159fc <__assert_fail@plt+0x48a0>
   15910:	cmp	r4, #77	; 0x4d
   15914:	beq	15938 <__assert_fail@plt+0x47dc>
   15918:	cmp	r4, #80	; 0x50
   1591c:	b	15904 <__assert_fail@plt+0x47a8>
   15920:	cmp	r4, #103	; 0x67
   15924:	beq	15938 <__assert_fail@plt+0x47dc>
   15928:	bhi	159d4 <__assert_fail@plt+0x4878>
   1592c:	sub	r3, r4, #89	; 0x59
   15930:	cmp	r3, #1
   15934:	bhi	15908 <__assert_fail@plt+0x47ac>
   15938:	mov	r1, #48	; 0x30
   1593c:	mov	r0, r9
   15940:	bl	1103c <strchr@plt>
   15944:	cmp	r0, #0
   15948:	beq	15908 <__assert_fail@plt+0x47ac>
   1594c:	ldrb	r3, [r6, #1]
   15950:	cmp	r3, #68	; 0x44
   15954:	beq	15968 <__assert_fail@plt+0x480c>
   15958:	cmp	r3, #105	; 0x69
   1595c:	beq	159ec <__assert_fail@plt+0x4890>
   15960:	cmp	r3, #66	; 0x42
   15964:	bne	15908 <__assert_fail@plt+0x47ac>
   15968:	mov	r6, #2
   1596c:	mov	r1, #1000	; 0x3e8
   15970:	cmp	r4, #89	; 0x59
   15974:	beq	15ab0 <__assert_fail@plt+0x4954>
   15978:	bhi	15a24 <__assert_fail@plt+0x48c8>
   1597c:	cmp	r4, #75	; 0x4b
   15980:	beq	15a64 <__assert_fail@plt+0x4908>
   15984:	bhi	15a04 <__assert_fail@plt+0x48a8>
   15988:	cmp	r4, #69	; 0x45
   1598c:	beq	15a8c <__assert_fail@plt+0x4930>
   15990:	cmp	r4, #71	; 0x47
   15994:	beq	15a98 <__assert_fail@plt+0x493c>
   15998:	cmp	r4, #66	; 0x42
   1599c:	moveq	r1, #1024	; 0x400
   159a0:	bne	158a8 <__assert_fail@plt+0x474c>
   159a4:	add	r0, sp, #8
   159a8:	bl	156d8 <__assert_fail@plt+0x457c>
   159ac:	ldr	r3, [r7]
   159b0:	orr	r5, r5, r0
   159b4:	add	r2, r3, r6
   159b8:	str	r2, [r7]
   159bc:	ldrb	r3, [r3, r6]
   159c0:	cmp	r3, #0
   159c4:	orrne	r5, r5, #2
   159c8:	ldrd	r2, [sp, #8]
   159cc:	strd	r2, [r8]
   159d0:	b	15824 <__assert_fail@plt+0x46c8>
   159d4:	cmp	r4, #109	; 0x6d
   159d8:	beq	15938 <__assert_fail@plt+0x47dc>
   159dc:	cmp	r4, #116	; 0x74
   159e0:	beq	15938 <__assert_fail@plt+0x47dc>
   159e4:	cmp	r4, #107	; 0x6b
   159e8:	b	15904 <__assert_fail@plt+0x47a8>
   159ec:	ldrb	r6, [r6, #2]
   159f0:	cmp	r6, #66	; 0x42
   159f4:	movne	r6, #1
   159f8:	moveq	r6, #3
   159fc:	mov	r1, #1024	; 0x400
   15a00:	b	15970 <__assert_fail@plt+0x4814>
   15a04:	cmp	r4, #80	; 0x50
   15a08:	beq	15aa0 <__assert_fail@plt+0x4944>
   15a0c:	cmp	r4, #84	; 0x54
   15a10:	beq	15aa8 <__assert_fail@plt+0x494c>
   15a14:	cmp	r4, #77	; 0x4d
   15a18:	bne	158a8 <__assert_fail@plt+0x474c>
   15a1c:	mov	r2, #2
   15a20:	b	15a90 <__assert_fail@plt+0x4934>
   15a24:	cmp	r4, #103	; 0x67
   15a28:	beq	15a98 <__assert_fail@plt+0x493c>
   15a2c:	bhi	15a50 <__assert_fail@plt+0x48f4>
   15a30:	cmp	r4, #98	; 0x62
   15a34:	beq	15a84 <__assert_fail@plt+0x4928>
   15a38:	cmp	r4, #99	; 0x63
   15a3c:	beq	15ac0 <__assert_fail@plt+0x4964>
   15a40:	cmp	r4, #90	; 0x5a
   15a44:	bne	158a8 <__assert_fail@plt+0x474c>
   15a48:	mov	r2, #7
   15a4c:	b	15a90 <__assert_fail@plt+0x4934>
   15a50:	cmp	r4, #109	; 0x6d
   15a54:	beq	15a1c <__assert_fail@plt+0x48c0>
   15a58:	bhi	15a6c <__assert_fail@plt+0x4910>
   15a5c:	cmp	r4, #107	; 0x6b
   15a60:	bne	158a8 <__assert_fail@plt+0x474c>
   15a64:	mov	r2, #1
   15a68:	b	15a90 <__assert_fail@plt+0x4934>
   15a6c:	cmp	r4, #116	; 0x74
   15a70:	beq	15aa8 <__assert_fail@plt+0x494c>
   15a74:	cmp	r4, #119	; 0x77
   15a78:	moveq	r1, #2
   15a7c:	beq	159a4 <__assert_fail@plt+0x4848>
   15a80:	b	158a8 <__assert_fail@plt+0x474c>
   15a84:	mov	r1, #512	; 0x200
   15a88:	b	159a4 <__assert_fail@plt+0x4848>
   15a8c:	mov	r2, #6
   15a90:	add	r0, sp, #8
   15a94:	b	15ab8 <__assert_fail@plt+0x495c>
   15a98:	mov	r2, #3
   15a9c:	b	15a90 <__assert_fail@plt+0x4934>
   15aa0:	mov	r2, #5
   15aa4:	b	15a90 <__assert_fail@plt+0x4934>
   15aa8:	mov	r2, #4
   15aac:	b	15a90 <__assert_fail@plt+0x4934>
   15ab0:	mov	r2, #8
   15ab4:	add	r0, sp, r2
   15ab8:	bl	1576c <__assert_fail@plt+0x4610>
   15abc:	b	159ac <__assert_fail@plt+0x4850>
   15ac0:	mov	r0, #0
   15ac4:	b	159ac <__assert_fail@plt+0x4850>
   15ac8:	andeq	r7, r1, ip, asr r8
   15acc:	andeq	r7, r1, r8, lsr #16
   15ad0:	andeq	r7, r1, r6, lsr r8
   15ad4:	cmp	r1, #0
   15ad8:	cmpne	r0, #0
   15adc:	moveq	r1, #1
   15ae0:	moveq	r0, r1
   15ae4:	umull	r2, r3, r0, r1
   15ae8:	adds	r3, r3, #0
   15aec:	movne	r3, #1
   15af0:	cmp	r2, #0
   15af4:	blt	15b04 <__assert_fail@plt+0x49a8>
   15af8:	cmp	r3, #0
   15afc:	bne	15b04 <__assert_fail@plt+0x49a8>
   15b00:	b	10e98 <calloc@plt>
   15b04:	push	{r4, lr}
   15b08:	bl	11048 <__errno_location@plt>
   15b0c:	mov	r3, #12
   15b10:	str	r3, [r0]
   15b14:	mov	r0, #0
   15b18:	pop	{r4, pc}
   15b1c:	cmp	r0, #0
   15b20:	mov	r3, #0
   15b24:	moveq	r0, #1
   15b28:	adds	r3, r3, #0
   15b2c:	movne	r3, #1
   15b30:	cmp	r0, #0
   15b34:	blt	15b44 <__assert_fail@plt+0x49e8>
   15b38:	cmp	r3, #0
   15b3c:	bne	15b44 <__assert_fail@plt+0x49e8>
   15b40:	b	10fc4 <malloc@plt>
   15b44:	push	{r4, lr}
   15b48:	bl	11048 <__errno_location@plt>
   15b4c:	mov	r3, #12
   15b50:	str	r3, [r0]
   15b54:	mov	r0, #0
   15b58:	pop	{r4, pc}
   15b5c:	cmp	r0, #0
   15b60:	push	{r4, lr}
   15b64:	mov	r4, r1
   15b68:	bne	15b78 <__assert_fail@plt+0x4a1c>
   15b6c:	mov	r0, r1
   15b70:	pop	{r4, lr}
   15b74:	b	15b1c <__assert_fail@plt+0x49c0>
   15b78:	cmp	r1, #0
   15b7c:	bne	15b8c <__assert_fail@plt+0x4a30>
   15b80:	bl	12e7c <__assert_fail@plt+0x1d20>
   15b84:	mov	r0, #0
   15b88:	pop	{r4, pc}
   15b8c:	cmp	r1, #0
   15b90:	blt	15ba0 <__assert_fail@plt+0x4a44>
   15b94:	mov	r3, #0
   15b98:	cmp	r3, r3
   15b9c:	beq	15bb0 <__assert_fail@plt+0x4a54>
   15ba0:	bl	11048 <__errno_location@plt>
   15ba4:	mov	r3, #12
   15ba8:	str	r3, [r0]
   15bac:	b	15b84 <__assert_fail@plt+0x4a28>
   15bb0:	pop	{r4, lr}
   15bb4:	b	10f4c <realloc@plt>
   15bb8:	push	{r4, r5, r6, lr}
   15bbc:	mov	r4, r0
   15bc0:	bl	10f88 <__fpending@plt>
   15bc4:	mov	r5, r0
   15bc8:	mov	r0, r4
   15bcc:	bl	10f94 <ferror_unlocked@plt>
   15bd0:	mov	r6, r0
   15bd4:	mov	r0, r4
   15bd8:	bl	12cf0 <__assert_fail@plt+0x1b94>
   15bdc:	cmp	r6, #0
   15be0:	mov	r4, r0
   15be4:	bne	15c10 <__assert_fail@plt+0x4ab4>
   15be8:	cmp	r0, #0
   15bec:	beq	15c08 <__assert_fail@plt+0x4aac>
   15bf0:	cmp	r5, #0
   15bf4:	bne	15c20 <__assert_fail@plt+0x4ac4>
   15bf8:	bl	11048 <__errno_location@plt>
   15bfc:	ldr	r4, [r0]
   15c00:	subs	r4, r4, #9
   15c04:	mvnne	r4, #0
   15c08:	mov	r0, r4
   15c0c:	pop	{r4, r5, r6, pc}
   15c10:	cmp	r0, #0
   15c14:	bne	15c20 <__assert_fail@plt+0x4ac4>
   15c18:	bl	11048 <__errno_location@plt>
   15c1c:	str	r4, [r0]
   15c20:	mvn	r4, #0
   15c24:	b	15c08 <__assert_fail@plt+0x4aac>
   15c28:	push	{r1, r2, r3}
   15c2c:	push	{r0, r1, r4, r5, r6, r7, lr}
   15c30:	add	r2, sp, #32
   15c34:	ldr	r1, [sp, #28]
   15c38:	str	r2, [sp, #4]
   15c3c:	cmp	r1, #0
   15c40:	beq	15c84 <__assert_fail@plt+0x4b28>
   15c44:	ldr	r3, [pc, #396]	; 15dd8 <__assert_fail@plt+0x4c7c>
   15c48:	mov	r6, r0
   15c4c:	cmp	r1, r3
   15c50:	beq	15c90 <__assert_fail@plt+0x4b34>
   15c54:	cmp	r1, #11
   15c58:	beq	15c74 <__assert_fail@plt+0x4b18>
   15c5c:	bgt	15da0 <__assert_fail@plt+0x4c44>
   15c60:	cmp	r1, #3
   15c64:	beq	15c74 <__assert_fail@plt+0x4b18>
   15c68:	bgt	15d7c <__assert_fail@plt+0x4c20>
   15c6c:	cmp	r1, #1
   15c70:	bne	15d88 <__assert_fail@plt+0x4c2c>
   15c74:	mov	r0, r6
   15c78:	bl	110c0 <fcntl64@plt>
   15c7c:	mov	r4, r0
   15c80:	b	15d3c <__assert_fail@plt+0x4be0>
   15c84:	ldr	r2, [sp, #32]
   15c88:	bl	110c0 <fcntl64@plt>
   15c8c:	b	15c7c <__assert_fail@plt+0x4b20>
   15c90:	ldr	r5, [pc, #324]	; 15ddc <__assert_fail@plt+0x4c80>
   15c94:	add	r3, sp, #36	; 0x24
   15c98:	str	r3, [sp, #4]
   15c9c:	ldr	r3, [r5]
   15ca0:	ldr	r7, [r2]
   15ca4:	cmp	r3, #0
   15ca8:	mov	r2, r7
   15cac:	blt	15d50 <__assert_fail@plt+0x4bf4>
   15cb0:	bl	110c0 <fcntl64@plt>
   15cb4:	subs	r4, r0, #0
   15cb8:	bge	15ccc <__assert_fail@plt+0x4b70>
   15cbc:	bl	11048 <__errno_location@plt>
   15cc0:	ldr	r3, [r0]
   15cc4:	cmp	r3, #22
   15cc8:	beq	15d1c <__assert_fail@plt+0x4bc0>
   15ccc:	mov	r3, #1
   15cd0:	str	r3, [r5]
   15cd4:	cmp	r4, #0
   15cd8:	blt	15d3c <__assert_fail@plt+0x4be0>
   15cdc:	ldr	r5, [r5]
   15ce0:	cmn	r5, #1
   15ce4:	bne	15d3c <__assert_fail@plt+0x4be0>
   15ce8:	mov	r1, #1
   15cec:	mov	r0, r4
   15cf0:	bl	110c0 <fcntl64@plt>
   15cf4:	subs	r2, r0, #0
   15cf8:	bge	15d60 <__assert_fail@plt+0x4c04>
   15cfc:	bl	11048 <__errno_location@plt>
   15d00:	ldr	r7, [r0]
   15d04:	mov	r6, r0
   15d08:	mov	r0, r4
   15d0c:	bl	11144 <close@plt>
   15d10:	mov	r4, r5
   15d14:	str	r7, [r6]
   15d18:	b	15d3c <__assert_fail@plt+0x4be0>
   15d1c:	mov	r2, r7
   15d20:	mov	r1, #0
   15d24:	mov	r0, r6
   15d28:	bl	110c0 <fcntl64@plt>
   15d2c:	subs	r4, r0, #0
   15d30:	mvnge	r3, #0
   15d34:	strge	r3, [r5]
   15d38:	bge	15cdc <__assert_fail@plt+0x4b80>
   15d3c:	mov	r0, r4
   15d40:	add	sp, sp, #8
   15d44:	pop	{r4, r5, r6, r7, lr}
   15d48:	add	sp, sp, #12
   15d4c:	bx	lr
   15d50:	mov	r1, #0
   15d54:	bl	110c0 <fcntl64@plt>
   15d58:	mov	r4, r0
   15d5c:	b	15cd4 <__assert_fail@plt+0x4b78>
   15d60:	orr	r2, r2, #1
   15d64:	mov	r1, #2
   15d68:	mov	r0, r4
   15d6c:	bl	110c0 <fcntl64@plt>
   15d70:	cmn	r0, #1
   15d74:	bne	15d3c <__assert_fail@plt+0x4be0>
   15d78:	b	15cfc <__assert_fail@plt+0x4ba0>
   15d7c:	cmp	r1, #8
   15d80:	beq	15d88 <__assert_fail@plt+0x4c2c>
   15d84:	bgt	15d98 <__assert_fail@plt+0x4c3c>
   15d88:	ldr	r3, [sp, #4]
   15d8c:	mov	r0, r6
   15d90:	ldr	r2, [r3]
   15d94:	b	15c88 <__assert_fail@plt+0x4b2c>
   15d98:	cmp	r1, #9
   15d9c:	b	15c70 <__assert_fail@plt+0x4b14>
   15da0:	ldr	r2, [pc, #56]	; 15de0 <__assert_fail@plt+0x4c84>
   15da4:	cmp	r1, r2
   15da8:	bgt	15dc0 <__assert_fail@plt+0x4c64>
   15dac:	cmp	r1, r3
   15db0:	ldrlt	r3, [pc, #44]	; 15de4 <__assert_fail@plt+0x4c88>
   15db4:	bge	15d88 <__assert_fail@plt+0x4c2c>
   15db8:	cmp	r1, r3
   15dbc:	b	15c70 <__assert_fail@plt+0x4b14>
   15dc0:	ldr	r3, [pc, #32]	; 15de8 <__assert_fail@plt+0x4c8c>
   15dc4:	cmp	r1, r3
   15dc8:	beq	15d88 <__assert_fail@plt+0x4c2c>
   15dcc:	blt	15c74 <__assert_fail@plt+0x4b18>
   15dd0:	add	r3, r3, #1
   15dd4:	b	15db8 <__assert_fail@plt+0x4c5c>
   15dd8:	andeq	r0, r0, r6, lsl #8
   15ddc:	andeq	r8, r2, ip, lsr r3
   15de0:	andeq	r0, r0, r7, lsl #8
   15de4:	andeq	r0, r0, r1, lsl #8
   15de8:	andeq	r0, r0, r9, lsl #8
   15dec:	push	{r4, lr}
   15df0:	mov	r0, #14
   15df4:	bl	110e4 <nl_langinfo@plt>
   15df8:	ldr	r3, [pc, #24]	; 15e18 <__assert_fail@plt+0x4cbc>
   15dfc:	cmp	r0, #0
   15e00:	moveq	r0, r3
   15e04:	ldr	r3, [pc, #16]	; 15e1c <__assert_fail@plt+0x4cc0>
   15e08:	ldrb	r2, [r0]
   15e0c:	cmp	r2, #0
   15e10:	moveq	r0, r3
   15e14:	pop	{r4, pc}
   15e18:	andeq	r6, r1, r2, lsl #15
   15e1c:	andeq	r7, r1, r7, ror #16
   15e20:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15e24:	subs	r5, r0, #0
   15e28:	addeq	r5, sp, #4
   15e2c:	mov	r0, r5
   15e30:	mov	r7, r2
   15e34:	mov	r6, r1
   15e38:	bl	10fa0 <mbrtowc@plt>
   15e3c:	cmp	r7, #0
   15e40:	cmnne	r0, #3
   15e44:	mov	r4, r0
   15e48:	bls	15e64 <__assert_fail@plt+0x4d08>
   15e4c:	mov	r0, #0
   15e50:	bl	12f64 <__assert_fail@plt+0x1e08>
   15e54:	cmp	r0, #0
   15e58:	moveq	r4, #1
   15e5c:	ldrbeq	r3, [r6]
   15e60:	streq	r3, [r5]
   15e64:	mov	r0, r4
   15e68:	add	sp, sp, #12
   15e6c:	pop	{r4, r5, r6, r7, pc}
   15e70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15e74:	mov	r6, r0
   15e78:	mov	r8, r1
   15e7c:	mov	r5, r2
   15e80:	mov	r4, r3
   15e84:	bl	11048 <__errno_location@plt>
   15e88:	mov	sl, #0
   15e8c:	mov	r9, r0
   15e90:	str	sl, [r9]
   15e94:	mov	r1, r5
   15e98:	mov	r0, r6
   15e9c:	bl	10fb8 <strcoll@plt>
   15ea0:	cmp	r0, #0
   15ea4:	beq	15ebc <__assert_fail@plt+0x4d60>
   15ea8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15eac:	cmp	r4, #0
   15eb0:	bne	15e90 <__assert_fail@plt+0x4d34>
   15eb4:	mov	r0, #1
   15eb8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ebc:	mov	r0, r6
   15ec0:	bl	11030 <strlen@plt>
   15ec4:	add	r7, r0, #1
   15ec8:	mov	r0, r5
   15ecc:	bl	11030 <strlen@plt>
   15ed0:	subs	r8, r8, r7
   15ed4:	add	r6, r6, r7
   15ed8:	add	r0, r0, #1
   15edc:	add	r5, r5, r0
   15ee0:	sub	r4, r4, r0
   15ee4:	bne	15eac <__assert_fail@plt+0x4d50>
   15ee8:	adds	r0, r4, #0
   15eec:	mvnne	r0, #0
   15ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ef4:	cmp	r1, r3
   15ef8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15efc:	mov	r7, r0
   15f00:	mov	r4, r1
   15f04:	mov	r6, r2
   15f08:	mov	r5, r3
   15f0c:	bne	15f34 <__assert_fail@plt+0x4dd8>
   15f10:	mov	r2, r1
   15f14:	mov	r1, r6
   15f18:	bl	10f1c <memcmp@plt>
   15f1c:	subs	r8, r0, #0
   15f20:	bne	15f34 <__assert_fail@plt+0x4dd8>
   15f24:	bl	11048 <__errno_location@plt>
   15f28:	str	r8, [r0]
   15f2c:	mov	r0, r8
   15f30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f34:	mov	r3, #0
   15f38:	ldrb	sl, [r7, r4]
   15f3c:	ldrb	r9, [r6, r5]
   15f40:	mov	r2, r6
   15f44:	strb	r3, [r7, r4]
   15f48:	add	r1, r4, #1
   15f4c:	strb	r3, [r6, r5]
   15f50:	mov	r0, r7
   15f54:	add	r3, r5, #1
   15f58:	bl	15e70 <__assert_fail@plt+0x4d14>
   15f5c:	strb	sl, [r7, r4]
   15f60:	strb	r9, [r6, r5]
   15f64:	mov	r8, r0
   15f68:	b	15f2c <__assert_fail@plt+0x4dd0>
   15f6c:	cmp	r1, r3
   15f70:	push	{r4, r5, r6, r7, r8, lr}
   15f74:	mov	r8, r0
   15f78:	mov	r4, r1
   15f7c:	mov	r6, r2
   15f80:	mov	r7, r3
   15f84:	bne	15f9c <__assert_fail@plt+0x4e40>
   15f88:	mov	r2, r1
   15f8c:	mov	r1, r6
   15f90:	bl	10f1c <memcmp@plt>
   15f94:	subs	r5, r0, #0
   15f98:	beq	15fb4 <__assert_fail@plt+0x4e58>
   15f9c:	mov	r3, r7
   15fa0:	mov	r2, r6
   15fa4:	mov	r1, r4
   15fa8:	mov	r0, r8
   15fac:	pop	{r4, r5, r6, r7, r8, lr}
   15fb0:	b	15e70 <__assert_fail@plt+0x4d14>
   15fb4:	bl	11048 <__errno_location@plt>
   15fb8:	str	r5, [r0]
   15fbc:	mov	r0, r5
   15fc0:	pop	{r4, r5, r6, r7, r8, pc}
   15fc4:	push	{r4, r5, r6, lr}
   15fc8:	subs	r4, r2, #0
   15fcc:	mov	r6, r0
   15fd0:	mov	r5, r1
   15fd4:	beq	15fec <__assert_fail@plt+0x4e90>
   15fd8:	mov	r1, r4
   15fdc:	mvn	r0, #0
   15fe0:	bl	16010 <__assert_fail@plt+0x4eb4>
   15fe4:	cmp	r0, r5
   15fe8:	bcc	15ffc <__assert_fail@plt+0x4ea0>
   15fec:	mul	r1, r5, r4
   15ff0:	mov	r0, r6
   15ff4:	pop	{r4, r5, r6, lr}
   15ff8:	b	15b5c <__assert_fail@plt+0x4a00>
   15ffc:	bl	11048 <__errno_location@plt>
   16000:	mov	r3, #12
   16004:	str	r3, [r0]
   16008:	mov	r0, #0
   1600c:	pop	{r4, r5, r6, pc}
   16010:	subs	r2, r1, #1
   16014:	bxeq	lr
   16018:	bcc	161f0 <__assert_fail@plt+0x5094>
   1601c:	cmp	r0, r1
   16020:	bls	161d4 <__assert_fail@plt+0x5078>
   16024:	tst	r1, r2
   16028:	beq	161e0 <__assert_fail@plt+0x5084>
   1602c:	clz	r3, r0
   16030:	clz	r2, r1
   16034:	sub	r3, r2, r3
   16038:	rsbs	r3, r3, #31
   1603c:	addne	r3, r3, r3, lsl #1
   16040:	mov	r2, #0
   16044:	addne	pc, pc, r3, lsl #2
   16048:	nop			; (mov r0, r0)
   1604c:	cmp	r0, r1, lsl #31
   16050:	adc	r2, r2, r2
   16054:	subcs	r0, r0, r1, lsl #31
   16058:	cmp	r0, r1, lsl #30
   1605c:	adc	r2, r2, r2
   16060:	subcs	r0, r0, r1, lsl #30
   16064:	cmp	r0, r1, lsl #29
   16068:	adc	r2, r2, r2
   1606c:	subcs	r0, r0, r1, lsl #29
   16070:	cmp	r0, r1, lsl #28
   16074:	adc	r2, r2, r2
   16078:	subcs	r0, r0, r1, lsl #28
   1607c:	cmp	r0, r1, lsl #27
   16080:	adc	r2, r2, r2
   16084:	subcs	r0, r0, r1, lsl #27
   16088:	cmp	r0, r1, lsl #26
   1608c:	adc	r2, r2, r2
   16090:	subcs	r0, r0, r1, lsl #26
   16094:	cmp	r0, r1, lsl #25
   16098:	adc	r2, r2, r2
   1609c:	subcs	r0, r0, r1, lsl #25
   160a0:	cmp	r0, r1, lsl #24
   160a4:	adc	r2, r2, r2
   160a8:	subcs	r0, r0, r1, lsl #24
   160ac:	cmp	r0, r1, lsl #23
   160b0:	adc	r2, r2, r2
   160b4:	subcs	r0, r0, r1, lsl #23
   160b8:	cmp	r0, r1, lsl #22
   160bc:	adc	r2, r2, r2
   160c0:	subcs	r0, r0, r1, lsl #22
   160c4:	cmp	r0, r1, lsl #21
   160c8:	adc	r2, r2, r2
   160cc:	subcs	r0, r0, r1, lsl #21
   160d0:	cmp	r0, r1, lsl #20
   160d4:	adc	r2, r2, r2
   160d8:	subcs	r0, r0, r1, lsl #20
   160dc:	cmp	r0, r1, lsl #19
   160e0:	adc	r2, r2, r2
   160e4:	subcs	r0, r0, r1, lsl #19
   160e8:	cmp	r0, r1, lsl #18
   160ec:	adc	r2, r2, r2
   160f0:	subcs	r0, r0, r1, lsl #18
   160f4:	cmp	r0, r1, lsl #17
   160f8:	adc	r2, r2, r2
   160fc:	subcs	r0, r0, r1, lsl #17
   16100:	cmp	r0, r1, lsl #16
   16104:	adc	r2, r2, r2
   16108:	subcs	r0, r0, r1, lsl #16
   1610c:	cmp	r0, r1, lsl #15
   16110:	adc	r2, r2, r2
   16114:	subcs	r0, r0, r1, lsl #15
   16118:	cmp	r0, r1, lsl #14
   1611c:	adc	r2, r2, r2
   16120:	subcs	r0, r0, r1, lsl #14
   16124:	cmp	r0, r1, lsl #13
   16128:	adc	r2, r2, r2
   1612c:	subcs	r0, r0, r1, lsl #13
   16130:	cmp	r0, r1, lsl #12
   16134:	adc	r2, r2, r2
   16138:	subcs	r0, r0, r1, lsl #12
   1613c:	cmp	r0, r1, lsl #11
   16140:	adc	r2, r2, r2
   16144:	subcs	r0, r0, r1, lsl #11
   16148:	cmp	r0, r1, lsl #10
   1614c:	adc	r2, r2, r2
   16150:	subcs	r0, r0, r1, lsl #10
   16154:	cmp	r0, r1, lsl #9
   16158:	adc	r2, r2, r2
   1615c:	subcs	r0, r0, r1, lsl #9
   16160:	cmp	r0, r1, lsl #8
   16164:	adc	r2, r2, r2
   16168:	subcs	r0, r0, r1, lsl #8
   1616c:	cmp	r0, r1, lsl #7
   16170:	adc	r2, r2, r2
   16174:	subcs	r0, r0, r1, lsl #7
   16178:	cmp	r0, r1, lsl #6
   1617c:	adc	r2, r2, r2
   16180:	subcs	r0, r0, r1, lsl #6
   16184:	cmp	r0, r1, lsl #5
   16188:	adc	r2, r2, r2
   1618c:	subcs	r0, r0, r1, lsl #5
   16190:	cmp	r0, r1, lsl #4
   16194:	adc	r2, r2, r2
   16198:	subcs	r0, r0, r1, lsl #4
   1619c:	cmp	r0, r1, lsl #3
   161a0:	adc	r2, r2, r2
   161a4:	subcs	r0, r0, r1, lsl #3
   161a8:	cmp	r0, r1, lsl #2
   161ac:	adc	r2, r2, r2
   161b0:	subcs	r0, r0, r1, lsl #2
   161b4:	cmp	r0, r1, lsl #1
   161b8:	adc	r2, r2, r2
   161bc:	subcs	r0, r0, r1, lsl #1
   161c0:	cmp	r0, r1
   161c4:	adc	r2, r2, r2
   161c8:	subcs	r0, r0, r1
   161cc:	mov	r0, r2
   161d0:	bx	lr
   161d4:	moveq	r0, #1
   161d8:	movne	r0, #0
   161dc:	bx	lr
   161e0:	clz	r2, r1
   161e4:	rsb	r2, r2, #31
   161e8:	lsr	r0, r0, r2
   161ec:	bx	lr
   161f0:	cmp	r0, #0
   161f4:	mvnne	r0, #0
   161f8:	b	16498 <__assert_fail@plt+0x533c>
   161fc:	cmp	r1, #0
   16200:	beq	161f0 <__assert_fail@plt+0x5094>
   16204:	push	{r0, r1, lr}
   16208:	bl	16010 <__assert_fail@plt+0x4eb4>
   1620c:	pop	{r1, r2, lr}
   16210:	mul	r3, r2, r0
   16214:	sub	r1, r1, r3
   16218:	bx	lr
   1621c:	cmp	r1, #0
   16220:	beq	1642c <__assert_fail@plt+0x52d0>
   16224:	eor	ip, r0, r1
   16228:	rsbmi	r1, r1, #0
   1622c:	subs	r2, r1, #1
   16230:	beq	163f8 <__assert_fail@plt+0x529c>
   16234:	movs	r3, r0
   16238:	rsbmi	r3, r0, #0
   1623c:	cmp	r3, r1
   16240:	bls	16404 <__assert_fail@plt+0x52a8>
   16244:	tst	r1, r2
   16248:	beq	16414 <__assert_fail@plt+0x52b8>
   1624c:	clz	r2, r3
   16250:	clz	r0, r1
   16254:	sub	r2, r0, r2
   16258:	rsbs	r2, r2, #31
   1625c:	addne	r2, r2, r2, lsl #1
   16260:	mov	r0, #0
   16264:	addne	pc, pc, r2, lsl #2
   16268:	nop			; (mov r0, r0)
   1626c:	cmp	r3, r1, lsl #31
   16270:	adc	r0, r0, r0
   16274:	subcs	r3, r3, r1, lsl #31
   16278:	cmp	r3, r1, lsl #30
   1627c:	adc	r0, r0, r0
   16280:	subcs	r3, r3, r1, lsl #30
   16284:	cmp	r3, r1, lsl #29
   16288:	adc	r0, r0, r0
   1628c:	subcs	r3, r3, r1, lsl #29
   16290:	cmp	r3, r1, lsl #28
   16294:	adc	r0, r0, r0
   16298:	subcs	r3, r3, r1, lsl #28
   1629c:	cmp	r3, r1, lsl #27
   162a0:	adc	r0, r0, r0
   162a4:	subcs	r3, r3, r1, lsl #27
   162a8:	cmp	r3, r1, lsl #26
   162ac:	adc	r0, r0, r0
   162b0:	subcs	r3, r3, r1, lsl #26
   162b4:	cmp	r3, r1, lsl #25
   162b8:	adc	r0, r0, r0
   162bc:	subcs	r3, r3, r1, lsl #25
   162c0:	cmp	r3, r1, lsl #24
   162c4:	adc	r0, r0, r0
   162c8:	subcs	r3, r3, r1, lsl #24
   162cc:	cmp	r3, r1, lsl #23
   162d0:	adc	r0, r0, r0
   162d4:	subcs	r3, r3, r1, lsl #23
   162d8:	cmp	r3, r1, lsl #22
   162dc:	adc	r0, r0, r0
   162e0:	subcs	r3, r3, r1, lsl #22
   162e4:	cmp	r3, r1, lsl #21
   162e8:	adc	r0, r0, r0
   162ec:	subcs	r3, r3, r1, lsl #21
   162f0:	cmp	r3, r1, lsl #20
   162f4:	adc	r0, r0, r0
   162f8:	subcs	r3, r3, r1, lsl #20
   162fc:	cmp	r3, r1, lsl #19
   16300:	adc	r0, r0, r0
   16304:	subcs	r3, r3, r1, lsl #19
   16308:	cmp	r3, r1, lsl #18
   1630c:	adc	r0, r0, r0
   16310:	subcs	r3, r3, r1, lsl #18
   16314:	cmp	r3, r1, lsl #17
   16318:	adc	r0, r0, r0
   1631c:	subcs	r3, r3, r1, lsl #17
   16320:	cmp	r3, r1, lsl #16
   16324:	adc	r0, r0, r0
   16328:	subcs	r3, r3, r1, lsl #16
   1632c:	cmp	r3, r1, lsl #15
   16330:	adc	r0, r0, r0
   16334:	subcs	r3, r3, r1, lsl #15
   16338:	cmp	r3, r1, lsl #14
   1633c:	adc	r0, r0, r0
   16340:	subcs	r3, r3, r1, lsl #14
   16344:	cmp	r3, r1, lsl #13
   16348:	adc	r0, r0, r0
   1634c:	subcs	r3, r3, r1, lsl #13
   16350:	cmp	r3, r1, lsl #12
   16354:	adc	r0, r0, r0
   16358:	subcs	r3, r3, r1, lsl #12
   1635c:	cmp	r3, r1, lsl #11
   16360:	adc	r0, r0, r0
   16364:	subcs	r3, r3, r1, lsl #11
   16368:	cmp	r3, r1, lsl #10
   1636c:	adc	r0, r0, r0
   16370:	subcs	r3, r3, r1, lsl #10
   16374:	cmp	r3, r1, lsl #9
   16378:	adc	r0, r0, r0
   1637c:	subcs	r3, r3, r1, lsl #9
   16380:	cmp	r3, r1, lsl #8
   16384:	adc	r0, r0, r0
   16388:	subcs	r3, r3, r1, lsl #8
   1638c:	cmp	r3, r1, lsl #7
   16390:	adc	r0, r0, r0
   16394:	subcs	r3, r3, r1, lsl #7
   16398:	cmp	r3, r1, lsl #6
   1639c:	adc	r0, r0, r0
   163a0:	subcs	r3, r3, r1, lsl #6
   163a4:	cmp	r3, r1, lsl #5
   163a8:	adc	r0, r0, r0
   163ac:	subcs	r3, r3, r1, lsl #5
   163b0:	cmp	r3, r1, lsl #4
   163b4:	adc	r0, r0, r0
   163b8:	subcs	r3, r3, r1, lsl #4
   163bc:	cmp	r3, r1, lsl #3
   163c0:	adc	r0, r0, r0
   163c4:	subcs	r3, r3, r1, lsl #3
   163c8:	cmp	r3, r1, lsl #2
   163cc:	adc	r0, r0, r0
   163d0:	subcs	r3, r3, r1, lsl #2
   163d4:	cmp	r3, r1, lsl #1
   163d8:	adc	r0, r0, r0
   163dc:	subcs	r3, r3, r1, lsl #1
   163e0:	cmp	r3, r1
   163e4:	adc	r0, r0, r0
   163e8:	subcs	r3, r3, r1
   163ec:	cmp	ip, #0
   163f0:	rsbmi	r0, r0, #0
   163f4:	bx	lr
   163f8:	teq	ip, r0
   163fc:	rsbmi	r0, r0, #0
   16400:	bx	lr
   16404:	movcc	r0, #0
   16408:	asreq	r0, ip, #31
   1640c:	orreq	r0, r0, #1
   16410:	bx	lr
   16414:	clz	r2, r1
   16418:	rsb	r2, r2, #31
   1641c:	cmp	ip, #0
   16420:	lsr	r0, r3, r2
   16424:	rsbmi	r0, r0, #0
   16428:	bx	lr
   1642c:	cmp	r0, #0
   16430:	mvngt	r0, #-2147483648	; 0x80000000
   16434:	movlt	r0, #-2147483648	; 0x80000000
   16438:	b	16498 <__assert_fail@plt+0x533c>
   1643c:	cmp	r1, #0
   16440:	beq	1642c <__assert_fail@plt+0x52d0>
   16444:	push	{r0, r1, lr}
   16448:	bl	16224 <__assert_fail@plt+0x50c8>
   1644c:	pop	{r1, r2, lr}
   16450:	mul	r3, r2, r0
   16454:	sub	r1, r1, r3
   16458:	bx	lr
   1645c:	cmp	r3, #0
   16460:	cmpeq	r2, #0
   16464:	bne	1647c <__assert_fail@plt+0x5320>
   16468:	cmp	r1, #0
   1646c:	cmpeq	r0, #0
   16470:	mvnne	r1, #0
   16474:	mvnne	r0, #0
   16478:	b	16498 <__assert_fail@plt+0x533c>
   1647c:	sub	sp, sp, #8
   16480:	push	{sp, lr}
   16484:	bl	164a8 <__assert_fail@plt+0x534c>
   16488:	ldr	lr, [sp, #4]
   1648c:	add	sp, sp, #8
   16490:	pop	{r2, r3}
   16494:	bx	lr
   16498:	push	{r1, lr}
   1649c:	mov	r0, #8
   164a0:	bl	10eb0 <raise@plt>
   164a4:	pop	{r1, pc}
   164a8:	cmp	r1, r3
   164ac:	push	{r4, r5, r6, r7, r8, r9, lr}
   164b0:	cmpeq	r0, r2
   164b4:	mov	r4, r0
   164b8:	mov	r5, r1
   164bc:	ldr	r9, [sp, #28]
   164c0:	movcc	r0, #0
   164c4:	movcc	r1, #0
   164c8:	bcc	165c0 <__assert_fail@plt+0x5464>
   164cc:	cmp	r3, #0
   164d0:	clzeq	ip, r2
   164d4:	clzne	ip, r3
   164d8:	addeq	ip, ip, #32
   164dc:	cmp	r5, #0
   164e0:	clzeq	r1, r4
   164e4:	addeq	r1, r1, #32
   164e8:	clzne	r1, r5
   164ec:	sub	ip, ip, r1
   164f0:	sub	lr, ip, #32
   164f4:	lsl	r7, r3, ip
   164f8:	rsb	r8, ip, #32
   164fc:	orr	r7, r7, r2, lsl lr
   16500:	orr	r7, r7, r2, lsr r8
   16504:	lsl	r6, r2, ip
   16508:	cmp	r5, r7
   1650c:	cmpeq	r4, r6
   16510:	movcc	r0, #0
   16514:	movcc	r1, #0
   16518:	bcc	16534 <__assert_fail@plt+0x53d8>
   1651c:	mov	r3, #1
   16520:	subs	r4, r4, r6
   16524:	lsl	r1, r3, lr
   16528:	lsl	r0, r3, ip
   1652c:	orr	r1, r1, r3, lsr r8
   16530:	sbc	r5, r5, r7
   16534:	cmp	ip, #0
   16538:	beq	165c0 <__assert_fail@plt+0x5464>
   1653c:	lsrs	r3, r7, #1
   16540:	rrx	r2, r6
   16544:	mov	r6, ip
   16548:	b	1656c <__assert_fail@plt+0x5410>
   1654c:	subs	r4, r4, r2
   16550:	sbc	r5, r5, r3
   16554:	adds	r4, r4, r4
   16558:	adc	r5, r5, r5
   1655c:	adds	r4, r4, #1
   16560:	adc	r5, r5, #0
   16564:	subs	r6, r6, #1
   16568:	beq	16588 <__assert_fail@plt+0x542c>
   1656c:	cmp	r5, r3
   16570:	cmpeq	r4, r2
   16574:	bcs	1654c <__assert_fail@plt+0x53f0>
   16578:	adds	r4, r4, r4
   1657c:	adc	r5, r5, r5
   16580:	subs	r6, r6, #1
   16584:	bne	1656c <__assert_fail@plt+0x5410>
   16588:	lsr	r6, r4, ip
   1658c:	lsr	r7, r5, ip
   16590:	orr	r6, r6, r5, lsl r8
   16594:	adds	r2, r0, r4
   16598:	orr	r6, r6, r5, lsr lr
   1659c:	adc	r3, r1, r5
   165a0:	lsl	r1, r7, ip
   165a4:	orr	r1, r1, r6, lsl lr
   165a8:	lsl	r0, r6, ip
   165ac:	orr	r1, r1, r6, lsr r8
   165b0:	subs	r0, r2, r0
   165b4:	mov	r4, r6
   165b8:	mov	r5, r7
   165bc:	sbc	r1, r3, r1
   165c0:	cmp	r9, #0
   165c4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   165c8:	strd	r4, [r9]
   165cc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   165d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   165d4:	mov	r7, r0
   165d8:	ldr	r6, [pc, #72]	; 16628 <__assert_fail@plt+0x54cc>
   165dc:	ldr	r5, [pc, #72]	; 1662c <__assert_fail@plt+0x54d0>
   165e0:	add	r6, pc, r6
   165e4:	add	r5, pc, r5
   165e8:	sub	r6, r6, r5
   165ec:	mov	r8, r1
   165f0:	mov	r9, r2
   165f4:	bl	10e6c <fdopen@plt-0x20>
   165f8:	asrs	r6, r6, #2
   165fc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16600:	mov	r4, #0
   16604:	add	r4, r4, #1
   16608:	ldr	r3, [r5], #4
   1660c:	mov	r2, r9
   16610:	mov	r1, r8
   16614:	mov	r0, r7
   16618:	blx	r3
   1661c:	cmp	r6, r4
   16620:	bne	16604 <__assert_fail@plt+0x54a8>
   16624:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16628:	andeq	r1, r1, r8, lsr #18
   1662c:	andeq	r1, r1, r0, lsr #18
   16630:	bx	lr
   16634:	ldr	r3, [pc, #12]	; 16648 <__assert_fail@plt+0x54ec>
   16638:	mov	r1, #0
   1663c:	add	r3, pc, r3
   16640:	ldr	r2, [r3]
   16644:	b	11054 <__cxa_atexit@plt>
   16648:	andeq	r1, r1, r4, asr #21

Disassembly of section .fini:

0001664c <.fini>:
   1664c:	push	{r3, lr}
   16650:	pop	{r3, pc}
