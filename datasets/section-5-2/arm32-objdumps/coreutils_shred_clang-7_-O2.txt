
../repos/coreutils/src/shred:     file format elf32-littlearm


Disassembly of section .init:

00011334 <.init>:
   11334:	push	{r3, lr}
   11338:	bl	1172c <__assert_fail@plt+0x48>
   1133c:	pop	{r3, pc}

Disassembly of section .plt:

00011340 <fdopen@plt-0x14>:
   11340:	push	{lr}		; (str lr, [sp, #-4]!)
   11344:	ldr	lr, [pc, #4]	; 11350 <fdopen@plt-0x4>
   11348:	add	lr, pc, lr
   1134c:	ldr	pc, [lr, #8]!
   11350:			; <UNDEFINED> instruction: 0x0001acb0

00011354 <fdopen@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #106496	; 0x1a000
   1135c:	ldr	pc, [ip, #3248]!	; 0xcb0

00011360 <calloc@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #106496	; 0x1a000
   11368:	ldr	pc, [ip, #3240]!	; 0xca8

0001136c <fputs_unlocked@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #106496	; 0x1a000
   11374:	ldr	pc, [ip, #3232]!	; 0xca0

00011378 <raise@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #106496	; 0x1a000
   11380:	ldr	pc, [ip, #3224]!	; 0xc98

00011384 <fsync@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #106496	; 0x1a000
   1138c:	ldr	pc, [ip, #3216]!	; 0xc90

00011390 <strcmp@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #106496	; 0x1a000
   11398:	ldr	pc, [ip, #3208]!	; 0xc88

0001139c <fflush@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #106496	; 0x1a000
   113a4:	ldr	pc, [ip, #3200]!	; 0xc80

000113a8 <memmove@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #106496	; 0x1a000
   113b0:	ldr	pc, [ip, #3192]!	; 0xc78

000113b4 <free@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #106496	; 0x1a000
   113bc:	ldr	pc, [ip, #3184]!	; 0xc70

000113c0 <_exit@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #106496	; 0x1a000
   113c8:	ldr	pc, [ip, #3176]!	; 0xc68

000113cc <memcpy@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #106496	; 0x1a000
   113d4:	ldr	pc, [ip, #3168]!	; 0xc60

000113d8 <__strtoull_internal@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #106496	; 0x1a000
   113e0:	ldr	pc, [ip, #3160]!	; 0xc58

000113e4 <mbsinit@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #106496	; 0x1a000
   113ec:	ldr	pc, [ip, #3152]!	; 0xc50

000113f0 <time@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #106496	; 0x1a000
   113f8:	ldr	pc, [ip, #3144]!	; 0xc48

000113fc <ftruncate64@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #106496	; 0x1a000
   11404:	ldr	pc, [ip, #3136]!	; 0xc40

00011408 <memcmp@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #106496	; 0x1a000
   11410:	ldr	pc, [ip, #3128]!	; 0xc38

00011414 <dcgettext@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #106496	; 0x1a000
   1141c:	ldr	pc, [ip, #3120]!	; 0xc30

00011420 <unlink@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #106496	; 0x1a000
   11428:	ldr	pc, [ip, #3112]!	; 0xc28

0001142c <realloc@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #106496	; 0x1a000
   11434:	ldr	pc, [ip, #3104]!	; 0xc20

00011438 <textdomain@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #106496	; 0x1a000
   11440:	ldr	pc, [ip, #3096]!	; 0xc18

00011444 <__fxstatat64@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #106496	; 0x1a000
   1144c:	ldr	pc, [ip, #3088]!	; 0xc10

00011450 <iswprint@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #106496	; 0x1a000
   11458:	ldr	pc, [ip, #3080]!	; 0xc08

0001145c <__fxstat64@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #106496	; 0x1a000
   11464:	ldr	pc, [ip, #3072]!	; 0xc00

00011468 <fwrite@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #106496	; 0x1a000
   11470:	ldr	pc, [ip, #3064]!	; 0xbf8

00011474 <ioctl@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #106496	; 0x1a000
   1147c:	ldr	pc, [ip, #3056]!	; 0xbf0

00011480 <lseek64@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #106496	; 0x1a000
   11488:	ldr	pc, [ip, #3048]!	; 0xbe8

0001148c <__ctype_get_mb_cur_max@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #106496	; 0x1a000
   11494:	ldr	pc, [ip, #3040]!	; 0xbe0

00011498 <__strcpy_chk@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #106496	; 0x1a000
   114a0:	ldr	pc, [ip, #3032]!	; 0xbd8

000114a4 <__fpending@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #106496	; 0x1a000
   114ac:	ldr	pc, [ip, #3024]!	; 0xbd0

000114b0 <mbrtowc@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #106496	; 0x1a000
   114b8:	ldr	pc, [ip, #3016]!	; 0xbc8

000114bc <error@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #106496	; 0x1a000
   114c4:	ldr	pc, [ip, #3008]!	; 0xbc0

000114c8 <open64@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #106496	; 0x1a000
   114d0:	ldr	pc, [ip, #3000]!	; 0xbb8

000114d4 <getenv@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #106496	; 0x1a000
   114dc:	ldr	pc, [ip, #2992]!	; 0xbb0

000114e0 <malloc@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #106496	; 0x1a000
   114e8:	ldr	pc, [ip, #2984]!	; 0xba8

000114ec <__libc_start_main@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #106496	; 0x1a000
   114f4:	ldr	pc, [ip, #2976]!	; 0xba0

000114f8 <__freading@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #106496	; 0x1a000
   11500:	ldr	pc, [ip, #2968]!	; 0xb98

00011504 <__gmon_start__@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #106496	; 0x1a000
   1150c:	ldr	pc, [ip, #2960]!	; 0xb90

00011510 <getopt_long@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #106496	; 0x1a000
   11518:	ldr	pc, [ip, #2952]!	; 0xb88

0001151c <__ctype_b_loc@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #106496	; 0x1a000
   11524:	ldr	pc, [ip, #2944]!	; 0xb80

00011528 <exit@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #106496	; 0x1a000
   11530:	ldr	pc, [ip, #2936]!	; 0xb78

00011534 <strlen@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #106496	; 0x1a000
   1153c:	ldr	pc, [ip, #2928]!	; 0xb70

00011540 <strchr@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #106496	; 0x1a000
   11548:	ldr	pc, [ip, #2920]!	; 0xb68

0001154c <getpagesize@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #106496	; 0x1a000
   11554:	ldr	pc, [ip, #2912]!	; 0xb60

00011558 <__errno_location@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #106496	; 0x1a000
   11560:	ldr	pc, [ip, #2904]!	; 0xb58

00011564 <__sprintf_chk@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #106496	; 0x1a000
   1156c:	ldr	pc, [ip, #2896]!	; 0xb50

00011570 <__cxa_atexit@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #106496	; 0x1a000
   11578:	ldr	pc, [ip, #2888]!	; 0xb48

0001157c <setvbuf@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #106496	; 0x1a000
   11584:	ldr	pc, [ip, #2880]!	; 0xb40

00011588 <memset@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #106496	; 0x1a000
   11590:	ldr	pc, [ip, #2872]!	; 0xb38

00011594 <renameat2@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #106496	; 0x1a000
   1159c:	ldr	pc, [ip, #2864]!	; 0xb30

000115a0 <__printf_chk@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #106496	; 0x1a000
   115a8:	ldr	pc, [ip, #2856]!	; 0xb28

000115ac <write@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #106496	; 0x1a000
   115b4:	ldr	pc, [ip, #2848]!	; 0xb20

000115b8 <fileno@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #106496	; 0x1a000
   115c0:	ldr	pc, [ip, #2840]!	; 0xb18

000115c4 <__fprintf_chk@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #106496	; 0x1a000
   115cc:	ldr	pc, [ip, #2832]!	; 0xb10

000115d0 <memchr@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #106496	; 0x1a000
   115d8:	ldr	pc, [ip, #2824]!	; 0xb08

000115dc <fclose@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #106496	; 0x1a000
   115e4:	ldr	pc, [ip, #2816]!	; 0xb00

000115e8 <fseeko64@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #106496	; 0x1a000
   115f0:	ldr	pc, [ip, #2808]!	; 0xaf8

000115f4 <fcntl64@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #106496	; 0x1a000
   115fc:	ldr	pc, [ip, #2800]!	; 0xaf0

00011600 <__overflow@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #106496	; 0x1a000
   11608:	ldr	pc, [ip, #2792]!	; 0xae8

0001160c <setlocale@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #106496	; 0x1a000
   11614:	ldr	pc, [ip, #2784]!	; 0xae0

00011618 <__explicit_bzero_chk@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #106496	; 0x1a000
   11620:	ldr	pc, [ip, #2776]!	; 0xad8

00011624 <strrchr@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #106496	; 0x1a000
   1162c:	ldr	pc, [ip, #2768]!	; 0xad0

00011630 <nl_langinfo@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #106496	; 0x1a000
   11638:	ldr	pc, [ip, #2760]!	; 0xac8

0001163c <localeconv@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #106496	; 0x1a000
   11644:	ldr	pc, [ip, #2752]!	; 0xac0

00011648 <fopen64@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #106496	; 0x1a000
   11650:	ldr	pc, [ip, #2744]!	; 0xab8

00011654 <renameat@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #106496	; 0x1a000
   1165c:	ldr	pc, [ip, #2736]!	; 0xab0

00011660 <bindtextdomain@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #106496	; 0x1a000
   11668:	ldr	pc, [ip, #2728]!	; 0xaa8

0001166c <fread_unlocked@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #106496	; 0x1a000
   11674:	ldr	pc, [ip, #2720]!	; 0xaa0

00011678 <getrandom@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #106496	; 0x1a000
   11680:	ldr	pc, [ip, #2712]!	; 0xa98

00011684 <aligned_alloc@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #106496	; 0x1a000
   1168c:	ldr	pc, [ip, #2704]!	; 0xa90

00011690 <sync@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #106496	; 0x1a000
   11698:	ldr	pc, [ip, #2696]!	; 0xa88

0001169c <chmod@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #106496	; 0x1a000
   116a4:	ldr	pc, [ip, #2688]!	; 0xa80

000116a8 <isatty@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #106496	; 0x1a000
   116b0:	ldr	pc, [ip, #2680]!	; 0xa78

000116b4 <strncmp@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #106496	; 0x1a000
   116bc:	ldr	pc, [ip, #2672]!	; 0xa70

000116c0 <fdatasync@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #106496	; 0x1a000
   116c8:	ldr	pc, [ip, #2664]!	; 0xa68

000116cc <abort@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #106496	; 0x1a000
   116d4:	ldr	pc, [ip, #2656]!	; 0xa60

000116d8 <close@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #106496	; 0x1a000
   116e0:	ldr	pc, [ip, #2648]!	; 0xa58

000116e4 <__assert_fail@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #106496	; 0x1a000
   116ec:	ldr	pc, [ip, #2640]!	; 0xa50

Disassembly of section .text:

000116f0 <.text>:
   116f0:	mov	fp, #0
   116f4:	mov	lr, #0
   116f8:	pop	{r1}		; (ldr r1, [sp], #4)
   116fc:	mov	r2, sp
   11700:	push	{r2}		; (str r2, [sp, #-4]!)
   11704:	push	{r0}		; (str r0, [sp, #-4]!)
   11708:	ldr	ip, [pc, #16]	; 11720 <__assert_fail@plt+0x3c>
   1170c:	push	{ip}		; (str ip, [sp, #-4]!)
   11710:	ldr	r0, [pc, #12]	; 11724 <__assert_fail@plt+0x40>
   11714:	ldr	r3, [pc, #12]	; 11728 <__assert_fail@plt+0x44>
   11718:	bl	114ec <__libc_start_main@plt>
   1171c:	bl	116cc <abort@plt>
   11720:	andeq	r9, r1, r0, lsl ip
   11724:	ldrdeq	r1, [r1], -r4
   11728:			; <UNDEFINED> instruction: 0x00019bb0
   1172c:	ldr	r3, [pc, #20]	; 11748 <__assert_fail@plt+0x64>
   11730:	ldr	r2, [pc, #20]	; 1174c <__assert_fail@plt+0x68>
   11734:	add	r3, pc, r3
   11738:	ldr	r2, [r3, r2]
   1173c:	cmp	r2, #0
   11740:	bxeq	lr
   11744:	b	11504 <__gmon_start__@plt>
   11748:	andeq	sl, r1, r4, asr #17
   1174c:	andeq	r0, r0, r0, asr #2
   11750:	ldr	r0, [pc, #24]	; 11770 <__assert_fail@plt+0x8c>
   11754:	ldr	r3, [pc, #24]	; 11774 <__assert_fail@plt+0x90>
   11758:	cmp	r3, r0
   1175c:	bxeq	lr
   11760:	ldr	r3, [pc, #16]	; 11778 <__assert_fail@plt+0x94>
   11764:	cmp	r3, #0
   11768:	bxeq	lr
   1176c:	bx	r3
   11770:	andeq	ip, r2, r0, lsr #3
   11774:	andeq	ip, r2, r0, lsr #3
   11778:	andeq	r0, r0, r0
   1177c:	ldr	r0, [pc, #36]	; 117a8 <__assert_fail@plt+0xc4>
   11780:	ldr	r1, [pc, #36]	; 117ac <__assert_fail@plt+0xc8>
   11784:	sub	r1, r1, r0
   11788:	asr	r1, r1, #2
   1178c:	add	r1, r1, r1, lsr #31
   11790:	asrs	r1, r1, #1
   11794:	bxeq	lr
   11798:	ldr	r3, [pc, #16]	; 117b0 <__assert_fail@plt+0xcc>
   1179c:	cmp	r3, #0
   117a0:	bxeq	lr
   117a4:	bx	r3
   117a8:	andeq	ip, r2, r0, lsr #3
   117ac:	andeq	ip, r2, r0, lsr #3
   117b0:	andeq	r0, r0, r0
   117b4:	push	{r4, lr}
   117b8:	ldr	r4, [pc, #24]	; 117d8 <__assert_fail@plt+0xf4>
   117bc:	ldrb	r3, [r4]
   117c0:	cmp	r3, #0
   117c4:	popne	{r4, pc}
   117c8:	bl	11750 <__assert_fail@plt+0x6c>
   117cc:	mov	r3, #1
   117d0:	strb	r3, [r4]
   117d4:	pop	{r4, pc}
   117d8:			; <UNDEFINED> instruction: 0x0002c1bc
   117dc:	b	1177c <__assert_fail@plt+0x98>
   117e0:	push	{fp, lr}
   117e4:	mov	fp, sp
   117e8:	sub	sp, sp, #56	; 0x38
   117ec:	mov	r4, r0
   117f0:	cmp	r0, #0
   117f4:	bne	11a90 <__assert_fail@plt+0x3ac>
   117f8:	movw	r1, #40035	; 0x9c63
   117fc:	mov	r0, #0
   11800:	mov	r2, #5
   11804:	movt	r1, #1
   11808:	bl	11414 <dcgettext@plt>
   1180c:	mov	r1, r0
   11810:	movw	r0, #49616	; 0xc1d0
   11814:	movt	r0, #2
   11818:	ldr	r2, [r0]
   1181c:	mov	r0, #1
   11820:	bl	115a0 <__printf_chk@plt>
   11824:	movw	r1, #40066	; 0x9c82
   11828:	mov	r0, #0
   1182c:	mov	r2, #5
   11830:	movt	r1, #1
   11834:	bl	11414 <dcgettext@plt>
   11838:	movw	r7, #49588	; 0xc1b4
   1183c:	movt	r7, #2
   11840:	ldr	r1, [r7]
   11844:	bl	1136c <fputs_unlocked@plt>
   11848:	movw	r1, #40200	; 0x9d08
   1184c:	mov	r0, #0
   11850:	mov	r2, #5
   11854:	movt	r1, #1
   11858:	bl	11414 <dcgettext@plt>
   1185c:	ldr	r1, [r7]
   11860:	bl	1136c <fputs_unlocked@plt>
   11864:	movw	r1, #41933	; 0xa3cd
   11868:	mov	r0, #0
   1186c:	mov	r2, #5
   11870:	movt	r1, #1
   11874:	bl	11414 <dcgettext@plt>
   11878:	ldr	r1, [r7]
   1187c:	bl	1136c <fputs_unlocked@plt>
   11880:	movw	r1, #40239	; 0x9d2f
   11884:	mov	r0, #0
   11888:	mov	r2, #5
   1188c:	movt	r1, #1
   11890:	bl	11414 <dcgettext@plt>
   11894:	mov	r1, r0
   11898:	mov	r0, #1
   1189c:	mov	r2, #3
   118a0:	bl	115a0 <__printf_chk@plt>
   118a4:	movw	r1, #40501	; 0x9e35
   118a8:	mov	r0, #0
   118ac:	mov	r2, #5
   118b0:	movt	r1, #1
   118b4:	bl	11414 <dcgettext@plt>
   118b8:	ldr	r1, [r7]
   118bc:	bl	1136c <fputs_unlocked@plt>
   118c0:	movw	r1, #40868	; 0x9fa4
   118c4:	mov	r0, #0
   118c8:	mov	r2, #5
   118cc:	movt	r1, #1
   118d0:	bl	11414 <dcgettext@plt>
   118d4:	ldr	r1, [r7]
   118d8:	bl	1136c <fputs_unlocked@plt>
   118dc:	movw	r1, #40913	; 0x9fd1
   118e0:	mov	r0, #0
   118e4:	mov	r2, #5
   118e8:	movt	r1, #1
   118ec:	bl	11414 <dcgettext@plt>
   118f0:	ldr	r1, [r7]
   118f4:	bl	1136c <fputs_unlocked@plt>
   118f8:	movw	r1, #40967	; 0xa007
   118fc:	mov	r0, #0
   11900:	mov	r2, #5
   11904:	movt	r1, #1
   11908:	bl	11414 <dcgettext@plt>
   1190c:	ldr	r1, [r7]
   11910:	bl	1136c <fputs_unlocked@plt>
   11914:	movw	r1, #41448	; 0xa1e8
   11918:	mov	r0, #0
   1191c:	mov	r2, #5
   11920:	movt	r1, #1
   11924:	bl	11414 <dcgettext@plt>
   11928:	ldr	r1, [r7]
   1192c:	bl	1136c <fputs_unlocked@plt>
   11930:	movw	r0, #43144	; 0xa888
   11934:	mov	r2, #48	; 0x30
   11938:	mov	r6, sp
   1193c:	movw	r5, #41736	; 0xa308
   11940:	movt	r0, #1
   11944:	movt	r5, #1
   11948:	add	r1, r0, #32
   1194c:	add	r3, r0, #16
   11950:	vld1.64	{d18-d19}, [r0], r2
   11954:	vld1.64	{d16-d17}, [r1]
   11958:	vld1.64	{d20-d21}, [r3]
   1195c:	add	r1, r6, #32
   11960:	vldr	d22, [r0]
   11964:	add	r0, r6, #16
   11968:	vst1.64	{d16-d17}, [r1]
   1196c:	movw	r1, #42008	; 0xa418
   11970:	vst1.64	{d20-d21}, [r0]
   11974:	mov	r0, r6
   11978:	vst1.64	{d18-d19}, [r0], r2
   1197c:	movt	r1, #1
   11980:	vstr	d22, [r0]
   11984:	mov	r0, r5
   11988:	bl	11390 <strcmp@plt>
   1198c:	cmp	r0, #0
   11990:	ldrne	r1, [r6, #8]!
   11994:	cmpne	r1, #0
   11998:	bne	11984 <__assert_fail@plt+0x2a0>
   1199c:	ldr	r6, [r6, #4]
   119a0:	movw	r1, #42103	; 0xa477
   119a4:	mov	r0, #0
   119a8:	mov	r2, #5
   119ac:	movt	r1, #1
   119b0:	bl	11414 <dcgettext@plt>
   119b4:	movw	r2, #41876	; 0xa394
   119b8:	movw	r3, #42126	; 0xa48e
   119bc:	mov	r1, r0
   119c0:	mov	r0, #1
   119c4:	movt	r2, #1
   119c8:	movt	r3, #1
   119cc:	bl	115a0 <__printf_chk@plt>
   119d0:	cmp	r6, #0
   119d4:	mov	r0, #5
   119d8:	mov	r1, #0
   119dc:	moveq	r6, r5
   119e0:	bl	1160c <setlocale@plt>
   119e4:	cmp	r0, #0
   119e8:	beq	11a20 <__assert_fail@plt+0x33c>
   119ec:	movw	r1, #42166	; 0xa4b6
   119f0:	mov	r2, #3
   119f4:	movt	r1, #1
   119f8:	bl	116b4 <strncmp@plt>
   119fc:	cmp	r0, #0
   11a00:	beq	11a20 <__assert_fail@plt+0x33c>
   11a04:	movw	r1, #42170	; 0xa4ba
   11a08:	mov	r0, #0
   11a0c:	mov	r2, #5
   11a10:	movt	r1, #1
   11a14:	bl	11414 <dcgettext@plt>
   11a18:	ldr	r1, [r7]
   11a1c:	bl	1136c <fputs_unlocked@plt>
   11a20:	movw	r1, #42241	; 0xa501
   11a24:	mov	r0, #0
   11a28:	mov	r2, #5
   11a2c:	movt	r1, #1
   11a30:	bl	11414 <dcgettext@plt>
   11a34:	movw	r2, #42126	; 0xa48e
   11a38:	mov	r1, r0
   11a3c:	mov	r0, #1
   11a40:	mov	r3, r5
   11a44:	movt	r2, #1
   11a48:	bl	115a0 <__printf_chk@plt>
   11a4c:	movw	r1, #42268	; 0xa51c
   11a50:	mov	r0, #0
   11a54:	mov	r2, #5
   11a58:	movt	r1, #1
   11a5c:	bl	11414 <dcgettext@plt>
   11a60:	movw	r3, #41447	; 0xa1e7
   11a64:	mov	r1, r0
   11a68:	movw	r0, #42036	; 0xa434
   11a6c:	cmp	r6, r5
   11a70:	mov	r2, r6
   11a74:	movt	r0, #1
   11a78:	movt	r3, #1
   11a7c:	moveq	r3, r0
   11a80:	mov	r0, #1
   11a84:	bl	115a0 <__printf_chk@plt>
   11a88:	mov	r0, r4
   11a8c:	bl	11528 <exit@plt>
   11a90:	movw	r0, #49584	; 0xc1b0
   11a94:	movw	r1, #39996	; 0x9c3c
   11a98:	mov	r2, #5
   11a9c:	movt	r0, #2
   11aa0:	movt	r1, #1
   11aa4:	ldr	r5, [r0]
   11aa8:	mov	r0, #0
   11aac:	bl	11414 <dcgettext@plt>
   11ab0:	mov	r2, r0
   11ab4:	movw	r0, #49616	; 0xc1d0
   11ab8:	mov	r1, #1
   11abc:	movt	r0, #2
   11ac0:	ldr	r3, [r0]
   11ac4:	mov	r0, r5
   11ac8:	bl	115c4 <__fprintf_chk@plt>
   11acc:	mov	r0, r4
   11ad0:	bl	11528 <exit@plt>
   11ad4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ad8:	add	fp, sp, #28
   11adc:	sub	sp, sp, #124	; 0x7c
   11ae0:	sub	r7, fp, #56	; 0x38
   11ae4:	mov	r5, r1
   11ae8:	mov	r9, r0
   11aec:	vmov.i32	q8, #0	; 0x00000000
   11af0:	mov	r0, #20
   11af4:	mov	r4, #0
   11af8:	mov	r1, r7
   11afc:	str	r4, [fp, #-40]	; 0xffffffd8
   11b00:	vst1.64	{d16-d17}, [r1], r0
   11b04:	str	r4, [r1]
   11b08:	ldr	r0, [r5]
   11b0c:	bl	14b5c <__assert_fail@plt+0x3478>
   11b10:	movw	r1, #41447	; 0xa1e7
   11b14:	mov	r0, #6
   11b18:	movt	r1, #1
   11b1c:	bl	1160c <setlocale@plt>
   11b20:	movw	r6, #41880	; 0xa398
   11b24:	movw	r1, #41742	; 0xa30e
   11b28:	movt	r6, #1
   11b2c:	movt	r1, #1
   11b30:	mov	r0, r6
   11b34:	bl	11660 <bindtextdomain@plt>
   11b38:	mov	r0, r6
   11b3c:	bl	11438 <textdomain@plt>
   11b40:	movw	r0, #15276	; 0x3bac
   11b44:	movt	r0, #1
   11b48:	bl	19c14 <__assert_fail@plt+0x8530>
   11b4c:	mvn	r0, #0
   11b50:	mov	r1, #3
   11b54:	movw	r6, #41766	; 0xa326
   11b58:	mov	sl, #0
   11b5c:	str	r0, [fp, #-44]	; 0xffffffd4
   11b60:	str	r0, [fp, #-48]	; 0xffffffd0
   11b64:	str	r1, [fp, #-52]	; 0xffffffcc
   11b68:	mov	r1, #0
   11b6c:	mov	r0, #3
   11b70:	movt	r6, #1
   11b74:	str	r1, [sp, #32]
   11b78:	mvn	r1, #0
   11b7c:	str	r0, [fp, #-60]	; 0xffffffc4
   11b80:	add	r0, r7, #8
   11b84:	str	r1, [fp, #-72]	; 0xffffffb8
   11b88:	mvn	r1, #0
   11b8c:	str	r0, [sp, #72]	; 0x48
   11b90:	mov	r0, #0
   11b94:	str	r1, [sp, #76]	; 0x4c
   11b98:	mov	r1, #0
   11b9c:	str	r1, [sp, #56]	; 0x38
   11ba0:	mov	r1, #0
   11ba4:	str	r1, [fp, #-64]	; 0xffffffc0
   11ba8:	mov	r1, #0
   11bac:	str	r1, [fp, #-68]	; 0xffffffbc
   11bb0:	b	11bbc <__assert_fail@plt+0x4d8>
   11bb4:	mov	r0, r7
   11bb8:	mov	sl, r8
   11bbc:	movw	r3, #42936	; 0xa7b8
   11bc0:	mov	r7, r0
   11bc4:	mov	r0, r9
   11bc8:	mov	r1, r5
   11bcc:	mov	r2, r6
   11bd0:	mov	r8, sl
   11bd4:	str	r4, [sp]
   11bd8:	movt	r3, #1
   11bdc:	bl	11510 <getopt_long@plt>
   11be0:	cmp	r0, #101	; 0x65
   11be4:	ble	11e10 <__assert_fail@plt+0x72c>
   11be8:	sub	r1, r0, #102	; 0x66
   11bec:	cmp	r1, #20
   11bf0:	bhi	11ccc <__assert_fail@plt+0x5e8>
   11bf4:	add	r2, pc, #8
   11bf8:	mov	r0, #1
   11bfc:	mov	sl, r8
   11c00:	ldr	pc, [r2, r1, lsl #2]
   11c04:			; <UNDEFINED> instruction: 0x00011bbc
   11c08:	andeq	r2, r1, r8, ror #9
   11c0c:	andeq	r2, r1, r8, ror #9
   11c10:	andeq	r2, r1, r8, ror #9
   11c14:	andeq	r2, r1, r8, ror #9
   11c18:	andeq	r2, r1, r8, ror #9
   11c1c:	andeq	r2, r1, r8, ror #9
   11c20:	andeq	r2, r1, r8, ror #9
   11c24:	andeq	r1, r1, r8, asr ip
   11c28:	andeq	r2, r1, r8, ror #9
   11c2c:	andeq	r2, r1, r8, ror #9
   11c30:	andeq	r2, r1, r8, ror #9
   11c34:	andeq	r2, r1, r8, ror #9
   11c38:	andeq	r1, r1, r8, ror sp
   11c3c:	andeq	r2, r1, r8, ror #9
   11c40:	andeq	r1, r1, r8, lsl #26
   11c44:	andeq	r1, r1, r0, asr #25
   11c48:	andeq	r2, r1, r8, ror #9
   11c4c:	andeq	r1, r1, r4, lsl #28
   11c50:	andeq	r2, r1, r8, ror #9
   11c54:	strdeq	r1, [r1], -r8
   11c58:	movw	r0, #49592	; 0xc1b8
   11c5c:	mov	sl, r6
   11c60:	mov	r6, r7
   11c64:	movw	r1, #41776	; 0xa330
   11c68:	mov	r2, #5
   11c6c:	mov	r4, #0
   11c70:	movt	r0, #2
   11c74:	movt	r1, #1
   11c78:	ldr	r7, [r0]
   11c7c:	mov	r0, #0
   11c80:	bl	11414 <dcgettext@plt>
   11c84:	mvn	r1, #-1073741824	; 0xc0000000
   11c88:	mov	r2, #0
   11c8c:	mov	r3, #0
   11c90:	stm	sp, {r1, r4}
   11c94:	movw	r1, #41447	; 0xa1e7
   11c98:	str	r0, [sp, #12]
   11c9c:	mov	r0, r7
   11ca0:	str	r4, [sp, #16]
   11ca4:	movt	r1, #1
   11ca8:	str	r1, [sp, #8]
   11cac:	bl	1832c <__assert_fail@plt+0x6c48>
   11cb0:	str	r0, [fp, #-60]	; 0xffffffc4
   11cb4:	mov	r0, r6
   11cb8:	mov	r6, sl
   11cbc:	b	11dec <__assert_fail@plt+0x708>
   11cc0:	mov	r0, #1
   11cc4:	str	r0, [sp, #56]	; 0x38
   11cc8:	b	11bb4 <__assert_fail@plt+0x4d0>
   11ccc:	cmp	r0, #256	; 0x100
   11cd0:	bne	124e8 <__assert_fail@plt+0xe04>
   11cd4:	movw	r0, #49592	; 0xc1b8
   11cd8:	cmp	r8, #0
   11cdc:	movt	r0, #2
   11ce0:	ldr	sl, [r0]
   11ce4:	mov	r0, r7
   11ce8:	beq	11bbc <__assert_fail@plt+0x4d8>
   11cec:	mov	r0, r8
   11cf0:	mov	r1, sl
   11cf4:	bl	11390 <strcmp@plt>
   11cf8:	cmp	r0, #0
   11cfc:	mov	r0, r7
   11d00:	beq	11bbc <__assert_fail@plt+0x4d8>
   11d04:	b	124f0 <__assert_fail@plt+0xe0c>
   11d08:	movw	r0, #49592	; 0xc1b8
   11d0c:	mov	sl, r8
   11d10:	movt	r0, #2
   11d14:	ldr	r1, [r0]
   11d18:	mov	r0, #3
   11d1c:	str	r0, [sp, #32]
   11d20:	mov	r0, r7
   11d24:	cmp	r1, #0
   11d28:	beq	11bbc <__assert_fail@plt+0x4d8>
   11d2c:	movw	r0, #49492	; 0xc154
   11d30:	movw	sl, #43112	; 0xa868
   11d34:	mov	r2, #4
   11d38:	movt	r0, #2
   11d3c:	str	r2, [sp]
   11d40:	movw	r2, #43124	; 0xa874
   11d44:	movt	sl, #1
   11d48:	ldr	r0, [r0]
   11d4c:	movt	r2, #1
   11d50:	mov	r3, sl
   11d54:	str	r0, [sp, #4]
   11d58:	mov	r0, #1
   11d5c:	str	r0, [sp, #8]
   11d60:	movw	r0, #41835	; 0xa36b
   11d64:	movt	r0, #1
   11d68:	bl	1389c <__assert_fail@plt+0x21b8>
   11d6c:	ldr	r0, [sl, r0, lsl #2]
   11d70:	str	r0, [sp, #32]
   11d74:	b	11bb4 <__assert_fail@plt+0x4d0>
   11d78:	movw	r0, #49592	; 0xc1b8
   11d7c:	mov	r4, r6
   11d80:	mov	r6, r7
   11d84:	movw	r1, #41858	; 0xa382
   11d88:	mov	r2, #5
   11d8c:	mov	sl, #0
   11d90:	movt	r0, #2
   11d94:	movt	r1, #1
   11d98:	ldr	r7, [r0]
   11d9c:	mov	r0, #0
   11da0:	bl	11414 <dcgettext@plt>
   11da4:	mvn	r1, #0
   11da8:	str	r0, [sp, #12]
   11dac:	mov	r0, r7
   11db0:	mov	r2, #0
   11db4:	mov	r3, #0
   11db8:	str	sl, [sp, #16]
   11dbc:	str	r1, [sp]
   11dc0:	mvn	r1, #-2147483648	; 0x80000000
   11dc4:	str	r1, [sp, #4]
   11dc8:	movw	r1, #41844	; 0xa374
   11dcc:	movt	r1, #1
   11dd0:	str	r1, [sp, #8]
   11dd4:	mov	r1, #0
   11dd8:	bl	18238 <__assert_fail@plt+0x6b54>
   11ddc:	str	r0, [fp, #-72]	; 0xffffffb8
   11de0:	mov	r0, r6
   11de4:	str	r1, [sp, #76]	; 0x4c
   11de8:	mov	r6, r4
   11dec:	mov	r4, #0
   11df0:	mov	sl, r8
   11df4:	b	11bbc <__assert_fail@plt+0x4d8>
   11df8:	mov	r0, #1
   11dfc:	str	r0, [fp, #-68]	; 0xffffffbc
   11e00:	b	11bb4 <__assert_fail@plt+0x4d0>
   11e04:	mov	r0, #1
   11e08:	str	r0, [fp, #-64]	; 0xffffffc0
   11e0c:	b	11bb4 <__assert_fail@plt+0x4d0>
   11e10:	cmn	r0, #1
   11e14:	bne	12488 <__assert_fail@plt+0xda4>
   11e18:	ldr	r0, [sp, #56]	; 0x38
   11e1c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   11e20:	ldr	r2, [sp, #76]	; 0x4c
   11e24:	strb	r0, [fp, #-36]	; 0xffffffdc
   11e28:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11e2c:	strb	r0, [fp, #-35]	; 0xffffffdd
   11e30:	ldr	r0, [fp, #-68]	; 0xffffffbc
   11e34:	strb	r0, [fp, #-34]	; 0xffffffde
   11e38:	ldr	r0, [sp, #72]	; 0x48
   11e3c:	stm	r0, {r1, r2}
   11e40:	strb	r7, [fp, #-56]	; 0xffffffc8
   11e44:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11e48:	str	r0, [fp, #-52]	; 0xffffffcc
   11e4c:	ldr	r0, [sp, #32]
   11e50:	str	r0, [fp, #-40]	; 0xffffffd8
   11e54:	movw	r0, #49576	; 0xc1a8
   11e58:	movt	r0, #2
   11e5c:	ldr	r6, [r0]
   11e60:	subs	r0, r9, r6
   11e64:	str	r0, [sp, #76]	; 0x4c
   11e68:	beq	12514 <__assert_fail@plt+0xe30>
   11e6c:	mov	r0, r8
   11e70:	mvn	r1, #0
   11e74:	bl	168f0 <__assert_fail@plt+0x520c>
   11e78:	movw	r1, #49600	; 0xc1c0
   11e7c:	cmp	r0, #0
   11e80:	movt	r1, #2
   11e84:	str	r0, [r1]
   11e88:	beq	12540 <__assert_fail@plt+0xe5c>
   11e8c:	movw	r0, #9600	; 0x2580
   11e90:	movt	r0, #1
   11e94:	bl	19c14 <__assert_fail@plt+0x8530>
   11e98:	ldr	r0, [sp, #76]	; 0x4c
   11e9c:	cmp	r0, #1
   11ea0:	movlt	r0, #0
   11ea4:	sublt	sp, fp, #28
   11ea8:	poplt	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11eac:	ldr	r8, [sp, #32]
   11eb0:	add	r0, r5, r6, lsl #2
   11eb4:	mov	sl, #0
   11eb8:	mov	r5, #1
   11ebc:	str	r7, [sp, #28]
   11ec0:	str	r0, [sp, #72]	; 0x48
   11ec4:	b	121e0 <__assert_fail@plt+0xafc>
   11ec8:	movw	r1, #42420	; 0xa5b4
   11ecc:	mov	r0, #0
   11ed0:	mov	r2, #5
   11ed4:	mov	r6, #0
   11ed8:	movt	r1, #1
   11edc:	bl	11414 <dcgettext@plt>
   11ee0:	mov	r2, r0
   11ee4:	mov	r0, #0
   11ee8:	mov	r1, #0
   11eec:	b	12438 <__assert_fail@plt+0xd54>
   11ef0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11ef4:	movw	r1, #257	; 0x101
   11ef8:	bl	13f68 <__assert_fail@plt+0x2884>
   11efc:	mov	r7, r0
   11f00:	cmn	r0, #1
   11f04:	bgt	12240 <__assert_fail@plt+0xb5c>
   11f08:	b	122f0 <__assert_fail@plt+0xc0c>
   11f0c:	mov	r5, r7
   11f10:	mov	sl, r8
   11f14:	b	1208c <__assert_fail@plt+0x9a8>
   11f18:	str	r7, [fp, #-60]	; 0xffffffc4
   11f1c:	mov	r7, r9
   11f20:	ldr	r9, [fp, #-72]	; 0xffffffb8
   11f24:	mov	r1, #48	; 0x30
   11f28:	mov	r2, r6
   11f2c:	mov	r8, sl
   11f30:	mov	r0, r9
   11f34:	bl	11588 <memset@plt>
   11f38:	ldr	r3, [fp, #-68]	; 0xffffffbc
   11f3c:	mov	r0, #0
   11f40:	mov	r1, r5
   11f44:	mvn	r2, #99	; 0x63
   11f48:	strb	r0, [r9, r6]
   11f4c:	mov	r0, #1
   11f50:	mov	r9, r7
   11f54:	mov	r7, r5
   11f58:	str	r0, [sp]
   11f5c:	mvn	r0, #99	; 0x63
   11f60:	bl	17394 <__assert_fail@plt+0x5cb0>
   11f64:	ldr	r5, [sp, #60]	; 0x3c
   11f68:	cmp	r0, #0
   11f6c:	beq	11ffc <__assert_fail@plt+0x918>
   11f70:	bl	11558 <__errno_location@plt>
   11f74:	mov	sl, r0
   11f78:	ldr	r0, [r0]
   11f7c:	cmp	r0, #17
   11f80:	bne	11f0c <__assert_fail@plt+0x828>
   11f84:	ldr	r7, [fp, #-60]	; 0xffffffc4
   11f88:	mov	r9, r7
   11f8c:	cmp	r9, #0
   11f90:	beq	12094 <__assert_fail@plt+0x9b0>
   11f94:	ldrb	r1, [r4, -r9]
   11f98:	movw	r0, #43420	; 0xa99c
   11f9c:	mov	r2, #65	; 0x41
   11fa0:	movt	r0, #1
   11fa4:	bl	115d0 <memchr@plt>
   11fa8:	cmp	r0, #0
   11fac:	beq	12468 <__assert_fail@plt+0xd84>
   11fb0:	ldrb	r0, [r0, #1]
   11fb4:	cmp	r0, #0
   11fb8:	movweq	r0, #48	; 0x30
   11fbc:	strb	r0, [r4, -r9]
   11fc0:	add	r9, r9, #1
   11fc4:	beq	11f8c <__assert_fail@plt+0x8a8>
   11fc8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   11fcc:	ldr	r3, [fp, #-68]	; 0xffffffbc
   11fd0:	mov	r0, #1
   11fd4:	mvn	r2, #99	; 0x63
   11fd8:	str	r0, [sp]
   11fdc:	mvn	r0, #99	; 0x63
   11fe0:	mov	r1, r7
   11fe4:	bl	17394 <__assert_fail@plt+0x5cb0>
   11fe8:	ldr	r9, [sp, #64]	; 0x40
   11fec:	ldr	r8, [sp, #68]	; 0x44
   11ff0:	cmp	r0, #0
   11ff4:	mov	r0, sl
   11ff8:	bne	11f74 <__assert_fail@plt+0x890>
   11ffc:	ldr	r0, [sp, #52]	; 0x34
   12000:	cmp	r0, #0
   12004:	blt	12024 <__assert_fail@plt+0x940>
   12008:	ldr	r1, [sp, #40]	; 0x28
   1200c:	bl	134f4 <__assert_fail@plt+0x1e10>
   12010:	ldr	r1, [sp, #48]	; 0x30
   12014:	cmp	r0, #0
   12018:	mov	r0, #0
   1201c:	movne	r1, r0
   12020:	str	r1, [sp, #48]	; 0x30
   12024:	ldr	r0, [sp, #56]	; 0x38
   12028:	mov	sl, r8
   1202c:	tst	r0, #255	; 0xff
   12030:	beq	12078 <__assert_fail@plt+0x994>
   12034:	movw	r1, #42839	; 0xa757
   12038:	mov	r0, #0
   1203c:	mov	r2, #5
   12040:	movt	r1, #1
   12044:	bl	11414 <dcgettext@plt>
   12048:	mov	r2, r0
   1204c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12050:	mov	r3, r7
   12054:	mov	r1, #0
   12058:	str	r0, [sp]
   1205c:	ldr	r0, [sp, #44]	; 0x2c
   12060:	tst	r0, #1
   12064:	mov	r0, #0
   12068:	movne	r3, r9
   1206c:	bl	114bc <error@plt>
   12070:	mov	r0, #0
   12074:	str	r0, [sp, #44]	; 0x2c
   12078:	ldr	r0, [sp, #36]	; 0x24
   1207c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12080:	add	r2, r6, #1
   12084:	mov	r5, r7
   12088:	bl	113cc <memcpy@plt>
   1208c:	ldr	r7, [fp, #-60]	; 0xffffffc4
   12090:	b	120a0 <__assert_fail@plt+0x9bc>
   12094:	ldr	r9, [sp, #64]	; 0x40
   12098:	ldr	sl, [sp, #68]	; 0x44
   1209c:	ldr	r5, [fp, #-64]	; 0xffffffc0
   120a0:	add	r7, r7, #1
   120a4:	subs	r6, r6, #1
   120a8:	bne	11f18 <__assert_fail@plt+0x834>
   120ac:	b	120bc <__assert_fail@plt+0x9d8>
   120b0:	mov	r5, r7
   120b4:	mov	r0, #1
   120b8:	str	r0, [sp, #48]	; 0x30
   120bc:	ldr	r0, [sp, #48]	; 0x30
   120c0:	mov	r7, r5
   120c4:	ldr	r5, [sp, #60]	; 0x3c
   120c8:	and	r6, r0, #1
   120cc:	mov	r0, r7
   120d0:	bl	11420 <unlink@plt>
   120d4:	cmp	r0, #0
   120d8:	beq	12118 <__assert_fail@plt+0xa34>
   120dc:	bl	11558 <__errno_location@plt>
   120e0:	ldr	r4, [r0]
   120e4:	movw	r1, #42857	; 0xa769
   120e8:	mov	r0, #0
   120ec:	mov	r2, #5
   120f0:	mov	r6, #0
   120f4:	movt	r1, #1
   120f8:	bl	11414 <dcgettext@plt>
   120fc:	mov	r2, r0
   12100:	mov	r0, #0
   12104:	mov	r1, r4
   12108:	mov	r3, r9
   1210c:	bl	114bc <error@plt>
   12110:	ldr	r7, [sp, #40]	; 0x28
   12114:	b	12150 <__assert_fail@plt+0xa6c>
   12118:	ldr	r0, [sp, #56]	; 0x38
   1211c:	ldr	r7, [sp, #40]	; 0x28
   12120:	tst	r0, #255	; 0xff
   12124:	beq	12150 <__assert_fail@plt+0xa6c>
   12128:	movw	r1, #42878	; 0xa77e
   1212c:	mov	r0, #0
   12130:	mov	r2, #5
   12134:	movt	r1, #1
   12138:	bl	11414 <dcgettext@plt>
   1213c:	mov	r2, r0
   12140:	mov	r0, #0
   12144:	mov	r1, #0
   12148:	mov	r3, r9
   1214c:	bl	114bc <error@plt>
   12150:	ldr	r8, [sp, #52]	; 0x34
   12154:	cmp	r8, #0
   12158:	blt	121c0 <__assert_fail@plt+0xadc>
   1215c:	mov	r0, r8
   12160:	mov	r1, r7
   12164:	bl	134f4 <__assert_fail@plt+0x1e10>
   12168:	mov	r4, r0
   1216c:	mov	r0, r8
   12170:	bl	116d8 <close@plt>
   12174:	cmp	r0, #0
   12178:	beq	121b4 <__assert_fail@plt+0xad0>
   1217c:	bl	11558 <__errno_location@plt>
   12180:	ldr	r4, [r0]
   12184:	movw	r1, #42806	; 0xa736
   12188:	mov	r0, #0
   1218c:	mov	r2, #5
   12190:	mov	r6, #0
   12194:	movt	r1, #1
   12198:	bl	11414 <dcgettext@plt>
   1219c:	mov	r2, r0
   121a0:	mov	r0, #0
   121a4:	mov	r1, r4
   121a8:	mov	r3, r7
   121ac:	bl	114bc <error@plt>
   121b0:	b	121c0 <__assert_fail@plt+0xadc>
   121b4:	clz	r0, r4
   121b8:	lsr	r0, r0, #5
   121bc:	and	r6, r6, r0
   121c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   121c4:	ldr	r8, [sp, #32]
   121c8:	bl	13fb0 <__assert_fail@plt+0x28cc>
   121cc:	ldr	r0, [sp, #24]
   121d0:	bl	13fb0 <__assert_fail@plt+0x28cc>
   121d4:	mov	r0, r7
   121d8:	bl	13fb0 <__assert_fail@plt+0x28cc>
   121dc:	b	12440 <__assert_fail@plt+0xd5c>
   121e0:	ldr	r4, [sp, #72]	; 0x48
   121e4:	mov	r0, #0
   121e8:	mov	r1, #3
   121ec:	ldr	r2, [r4, sl, lsl #2]
   121f0:	bl	164e4 <__assert_fail@plt+0x4e00>
   121f4:	bl	181b4 <__assert_fail@plt+0x6ad0>
   121f8:	ldr	r6, [r4, sl, lsl #2]
   121fc:	movw	r1, #43794	; 0xab12
   12200:	mov	r9, r0
   12204:	movt	r1, #1
   12208:	mov	r0, r6
   1220c:	bl	11390 <strcmp@plt>
   12210:	movw	r1, #49600	; 0xc1c0
   12214:	cmp	r0, #0
   12218:	movt	r1, #2
   1221c:	ldr	r4, [r1]
   12220:	beq	12284 <__assert_fail@plt+0xba0>
   12224:	mov	r0, r6
   12228:	movw	r1, #257	; 0x101
   1222c:	str	r6, [fp, #-64]	; 0xffffffc0
   12230:	bl	13f68 <__assert_fail@plt+0x2884>
   12234:	mov	r7, r0
   12238:	cmn	r0, #1
   1223c:	ble	122bc <__assert_fail@plt+0xbd8>
   12240:	mov	r0, r7
   12244:	mov	r1, r9
   12248:	mov	r2, r4
   1224c:	sub	r3, fp, #56	; 0x38
   12250:	bl	12590 <__assert_fail@plt+0xeac>
   12254:	mov	r6, r0
   12258:	mov	r0, r7
   1225c:	bl	116d8 <close@plt>
   12260:	cmp	r0, #0
   12264:	beq	12308 <__assert_fail@plt+0xc24>
   12268:	bl	11558 <__errno_location@plt>
   1226c:	ldr	r4, [r0]
   12270:	movw	r1, #42806	; 0xa736
   12274:	mov	r6, #0
   12278:	mov	r0, #0
   1227c:	movt	r1, #1
   12280:	b	12424 <__assert_fail@plt+0xd40>
   12284:	mov	r0, #1
   12288:	mov	r1, #3
   1228c:	bl	13d88 <__assert_fail@plt+0x26a4>
   12290:	cmn	r0, #1
   12294:	ble	1240c <__assert_fail@plt+0xd28>
   12298:	tst	r0, #1024	; 0x400
   1229c:	bne	11ec8 <__assert_fail@plt+0x7e4>
   122a0:	mov	r0, #1
   122a4:	mov	r1, r9
   122a8:	mov	r2, r4
   122ac:	sub	r3, fp, #56	; 0x38
   122b0:	bl	12590 <__assert_fail@plt+0xeac>
   122b4:	mov	r6, r0
   122b8:	b	12440 <__assert_fail@plt+0xd5c>
   122bc:	bl	11558 <__errno_location@plt>
   122c0:	mov	r6, r0
   122c4:	ldr	r0, [r0]
   122c8:	cmp	r0, #13
   122cc:	bne	122f0 <__assert_fail@plt+0xc0c>
   122d0:	ldr	r0, [sp, #28]
   122d4:	tst	r0, #255	; 0xff
   122d8:	beq	122f0 <__assert_fail@plt+0xc0c>
   122dc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   122e0:	mov	r1, #128	; 0x80
   122e4:	bl	1169c <chmod@plt>
   122e8:	cmp	r0, #0
   122ec:	beq	11ef0 <__assert_fail@plt+0x80c>
   122f0:	ldr	r4, [r6]
   122f4:	movw	r1, #42775	; 0xa717
   122f8:	mov	r6, #0
   122fc:	mov	r0, #0
   12300:	movt	r1, #1
   12304:	b	12424 <__assert_fail@plt+0xd40>
   12308:	cmp	r8, #0
   1230c:	beq	12440 <__assert_fail@plt+0xd5c>
   12310:	eors	r0, r6, #1
   12314:	bne	12440 <__assert_fail@plt+0xd5c>
   12318:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1231c:	mov	r0, r7
   12320:	bl	181b4 <__assert_fail@plt+0x6ad0>
   12324:	mov	r4, r0
   12328:	bl	13b08 <__assert_fail@plt+0x2424>
   1232c:	str	r0, [fp, #-72]	; 0xffffffb8
   12330:	mov	r0, r4
   12334:	str	r4, [fp, #-68]	; 0xffffffbc
   12338:	bl	13c94 <__assert_fail@plt+0x25b0>
   1233c:	mov	r4, r0
   12340:	mov	r0, #0
   12344:	mov	r1, #3
   12348:	mov	r2, r4
   1234c:	bl	164e4 <__assert_fail@plt+0x4e00>
   12350:	bl	181b4 <__assert_fail@plt+0x6ad0>
   12354:	str	r0, [sp, #40]	; 0x28
   12358:	mvn	r0, #0
   1235c:	cmp	r8, #3
   12360:	bne	12370 <__assert_fail@plt+0xc8c>
   12364:	mov	r0, r4
   12368:	mov	r1, #18688	; 0x4900
   1236c:	bl	13f68 <__assert_fail@plt+0x2884>
   12370:	str	r0, [sp, #52]	; 0x34
   12374:	ldr	r0, [sp, #56]	; 0x38
   12378:	str	r4, [sp, #24]
   1237c:	tst	r0, #255	; 0xff
   12380:	beq	123ac <__assert_fail@plt+0xcc8>
   12384:	movw	r1, #42826	; 0xa74a
   12388:	mov	r0, #0
   1238c:	mov	r2, #5
   12390:	movt	r1, #1
   12394:	bl	11414 <dcgettext@plt>
   12398:	mov	r2, r0
   1239c:	mov	r0, #0
   123a0:	mov	r1, #0
   123a4:	mov	r3, r9
   123a8:	bl	114bc <error@plt>
   123ac:	mov	r6, #1
   123b0:	cmp	r8, #1
   123b4:	beq	120cc <__assert_fail@plt+0x9e8>
   123b8:	ldr	r4, [fp, #-72]	; 0xffffffb8
   123bc:	str	r5, [sp, #60]	; 0x3c
   123c0:	mov	r0, r4
   123c4:	bl	13b54 <__assert_fail@plt+0x2470>
   123c8:	cmp	r0, #0
   123cc:	beq	120b0 <__assert_fail@plt+0x9cc>
   123d0:	mov	r6, r0
   123d4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   123d8:	mov	r5, r7
   123dc:	str	sl, [sp, #68]	; 0x44
   123e0:	str	r9, [sp, #64]	; 0x40
   123e4:	sub	r0, r4, r0
   123e8:	sub	r4, r4, #1
   123ec:	add	r0, r7, r0
   123f0:	rsb	r7, r6, #0
   123f4:	str	r0, [sp, #36]	; 0x24
   123f8:	mov	r0, #1
   123fc:	str	r0, [sp, #44]	; 0x2c
   12400:	mov	r0, #1
   12404:	str	r0, [sp, #48]	; 0x30
   12408:	b	11f18 <__assert_fail@plt+0x834>
   1240c:	bl	11558 <__errno_location@plt>
   12410:	ldr	r4, [r0]
   12414:	movw	r1, #42403	; 0xa5a3
   12418:	mov	r6, #0
   1241c:	mov	r0, #0
   12420:	movt	r1, #1
   12424:	mov	r2, #5
   12428:	bl	11414 <dcgettext@plt>
   1242c:	mov	r2, r0
   12430:	mov	r0, #0
   12434:	mov	r1, r4
   12438:	mov	r3, r9
   1243c:	bl	114bc <error@plt>
   12440:	mov	r0, r9
   12444:	bl	13fb0 <__assert_fail@plt+0x28cc>
   12448:	ldr	r0, [sp, #76]	; 0x4c
   1244c:	add	sl, sl, #1
   12450:	and	r5, r5, r6
   12454:	cmp	sl, r0
   12458:	blt	121e0 <__assert_fail@plt+0xafc>
   1245c:	eor	r0, r5, #1
   12460:	sub	sp, fp, #28
   12464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12468:	movw	r0, #42372	; 0xa584
   1246c:	movw	r1, #42890	; 0xa78a
   12470:	movw	r3, #42902	; 0xa796
   12474:	mov	r2, #1000	; 0x3e8
   12478:	movt	r0, #1
   1247c:	movt	r1, #1
   12480:	movt	r3, #1
   12484:	bl	116e4 <__assert_fail@plt>
   12488:	cmn	r0, #3
   1248c:	bne	124d8 <__assert_fail@plt+0xdf4>
   12490:	movw	r0, #49488	; 0xc150
   12494:	movw	r2, #41890	; 0xa3a2
   12498:	mov	r1, #0
   1249c:	movt	r0, #2
   124a0:	movt	r2, #1
   124a4:	str	r1, [sp, #4]
   124a8:	movw	r1, #41736	; 0xa308
   124ac:	ldr	r3, [r0]
   124b0:	movw	r0, #49588	; 0xc1b4
   124b4:	str	r2, [sp]
   124b8:	movw	r2, #41876	; 0xa394
   124bc:	movt	r1, #1
   124c0:	movt	r0, #2
   124c4:	movt	r2, #1
   124c8:	ldr	r0, [r0]
   124cc:	bl	17a48 <__assert_fail@plt+0x6364>
   124d0:	mov	r0, #0
   124d4:	bl	11528 <exit@plt>
   124d8:	cmn	r0, #2
   124dc:	bne	124e8 <__assert_fail@plt+0xe04>
   124e0:	mov	r0, #0
   124e4:	bl	117e0 <__assert_fail@plt+0xfc>
   124e8:	mov	r0, #1
   124ec:	bl	117e0 <__assert_fail@plt+0xfc>
   124f0:	movw	r1, #41801	; 0xa349
   124f4:	mov	r0, #0
   124f8:	mov	r2, #5
   124fc:	movt	r1, #1
   12500:	bl	11414 <dcgettext@plt>
   12504:	mov	r2, r0
   12508:	mov	r0, #1
   1250c:	mov	r1, #0
   12510:	bl	114bc <error@plt>
   12514:	movw	r1, #41902	; 0xa3ae
   12518:	mov	r0, #0
   1251c:	mov	r2, #5
   12520:	movt	r1, #1
   12524:	bl	11414 <dcgettext@plt>
   12528:	mov	r2, r0
   1252c:	mov	r0, #0
   12530:	mov	r1, #0
   12534:	bl	114bc <error@plt>
   12538:	mov	r0, #1
   1253c:	bl	117e0 <__assert_fail@plt+0xfc>
   12540:	movw	r4, #41923	; 0xa3c3
   12544:	cmp	r8, #0
   12548:	movt	r4, #1
   1254c:	movne	r4, r8
   12550:	bl	11558 <__errno_location@plt>
   12554:	ldr	r5, [r0]
   12558:	mov	r0, #0
   1255c:	mov	r1, #3
   12560:	mov	r2, r4
   12564:	bl	164e4 <__assert_fail@plt+0x4e00>
   12568:	movw	r2, #43587	; 0xaa43
   1256c:	mov	r3, r0
   12570:	mov	r0, #1
   12574:	mov	r1, r5
   12578:	movt	r2, #1
   1257c:	bl	114bc <error@plt>
   12580:	movw	r0, #49600	; 0xc1c0
   12584:	movt	r0, #2
   12588:	ldr	r0, [r0]
   1258c:	b	16b10 <__assert_fail@plt+0x542c>
   12590:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12594:	add	fp, sp, #28
   12598:	sub	sp, sp, #148	; 0x94
   1259c:	sub	sp, sp, #2048	; 0x800
   125a0:	str	r0, [sp, #116]	; 0x74
   125a4:	ldrb	r0, [r3, #20]
   125a8:	mov	r4, r3
   125ac:	mov	r5, r1
   125b0:	str	r2, [sp, #112]	; 0x70
   125b4:	cmp	r0, #0
   125b8:	beq	125cc <__assert_fail@plt+0xee8>
   125bc:	ldrb	r0, [r4, #22]
   125c0:	ldr	r1, [r4, #4]
   125c4:	add	r6, r1, r0
   125c8:	b	125d0 <__assert_fail@plt+0xeec>
   125cc:	mov	r6, #0
   125d0:	ldr	r1, [sp, #116]	; 0x74
   125d4:	add	r2, sp, #120	; 0x78
   125d8:	mov	r0, #3
   125dc:	bl	1145c <__fxstat64@plt>
   125e0:	cmp	r0, #0
   125e4:	beq	12618 <__assert_fail@plt+0xf34>
   125e8:	bl	11558 <__errno_location@plt>
   125ec:	ldr	r4, [r0]
   125f0:	movw	r1, #42465	; 0xa5e1
   125f4:	mov	r0, #0
   125f8:	mov	r2, #5
   125fc:	mov	r8, #0
   12600:	movt	r1, #1
   12604:	bl	11414 <dcgettext@plt>
   12608:	mov	r2, r0
   1260c:	mov	r0, #0
   12610:	mov	r1, r4
   12614:	b	1267c <__assert_fail@plt+0xf98>
   12618:	ldr	r0, [sp, #136]	; 0x88
   1261c:	and	r1, r0, #61440	; 0xf000
   12620:	cmp	r1, #8192	; 0x2000
   12624:	bne	1263c <__assert_fail@plt+0xf58>
   12628:	ldr	r0, [sp, #116]	; 0x74
   1262c:	bl	116a8 <isatty@plt>
   12630:	cmp	r0, #0
   12634:	bne	12658 <__assert_fail@plt+0xf74>
   12638:	ldr	r0, [sp, #136]	; 0x88
   1263c:	and	r0, r0, #61440	; 0xf000
   12640:	cmp	r0, #49152	; 0xc000
   12644:	beq	12658 <__assert_fail@plt+0xf74>
   12648:	cmp	r0, #32768	; 0x8000
   1264c:	beq	12690 <__assert_fail@plt+0xfac>
   12650:	cmp	r0, #4096	; 0x1000
   12654:	bne	1269c <__assert_fail@plt+0xfb8>
   12658:	movw	r1, #42482	; 0xa5f2
   1265c:	mov	r8, #0
   12660:	movt	r1, #1
   12664:	mov	r0, #0
   12668:	mov	r2, #5
   1266c:	bl	11414 <dcgettext@plt>
   12670:	mov	r2, r0
   12674:	mov	r0, #0
   12678:	mov	r1, #0
   1267c:	mov	r3, r5
   12680:	bl	114bc <error@plt>
   12684:	and	r0, r8, #1
   12688:	sub	sp, fp, #28
   1268c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12690:	ldr	r0, [sp, #172]	; 0xac
   12694:	cmn	r0, #1
   12698:	ble	12868 <__assert_fail@plt+0x1184>
   1269c:	ldr	r0, [r4, #4]
   126a0:	mov	r1, #4
   126a4:	bl	17d64 <__assert_fail@plt+0x6680>
   126a8:	str	r0, [sp, #108]	; 0x6c
   126ac:	ldr	r0, [sp, #136]	; 0x88
   126b0:	ldr	ip, [r4, #8]
   126b4:	ldr	lr, [r4, #12]
   126b8:	str	r5, [sp, #76]	; 0x4c
   126bc:	str	r6, [sp, #52]	; 0x34
   126c0:	and	r0, r0, #61440	; 0xf000
   126c4:	and	r1, ip, lr
   126c8:	cmn	r1, #1
   126cc:	bne	12700 <__assert_fail@plt+0x101c>
   126d0:	cmp	r0, #32768	; 0x8000
   126d4:	ldr	r0, [sp, #116]	; 0x74
   126d8:	bne	12790 <__assert_fail@plt+0x10ac>
   126dc:	ldrb	r0, [r4, #21]
   126e0:	ldr	r6, [sp, #168]	; 0xa8
   126e4:	ldr	r9, [sp, #172]	; 0xac
   126e8:	mov	sl, #0
   126ec:	cmp	r0, #0
   126f0:	beq	12878 <__assert_fail@plt+0x1194>
   126f4:	str	r9, [sp, #64]	; 0x40
   126f8:	str	r6, [sp, #68]	; 0x44
   126fc:	b	12788 <__assert_fail@plt+0x10a4>
   12700:	mov	sl, #0
   12704:	cmp	r0, #32768	; 0x8000
   12708:	str	ip, [sp, #68]	; 0x44
   1270c:	str	lr, [sp, #64]	; 0x40
   12710:	bne	12788 <__assert_fail@plt+0x10a4>
   12714:	ldr	r1, [sp, #176]	; 0xb0
   12718:	mov	sl, #0
   1271c:	ldr	r0, [sp, #168]	; 0xa8
   12720:	ldr	r7, [sp, #172]	; 0xac
   12724:	subs	r2, r1, #536870913	; 0x20000001
   12728:	rscs	r2, sl, r1, asr #31
   1272c:	mov	r2, #0
   12730:	movwcc	r2, #1
   12734:	rsbs	r3, r1, #0
   12738:	sbcs	r3, sl, r1, asr #31
   1273c:	mov	r3, #0
   12740:	movwlt	r3, #1
   12744:	ands	r2, r3, r2
   12748:	asrne	r2, r1, #31
   1274c:	moveq	r1, #512	; 0x200
   12750:	subs	r3, r1, ip
   12754:	sbcs	r3, r2, lr
   12758:	mov	r3, #0
   1275c:	movwlt	r3, #1
   12760:	cmp	r3, #0
   12764:	moveq	r1, ip
   12768:	moveq	r2, lr
   1276c:	subs	r1, r0, r1
   12770:	sbcs	r1, r7, r2
   12774:	movwlt	sl, #1
   12778:	cmp	sl, #0
   1277c:	moveq	r7, sl
   12780:	movne	sl, r0
   12784:	b	127d4 <__assert_fail@plt+0x10f0>
   12788:	mov	r7, #0
   1278c:	b	127d4 <__assert_fail@plt+0x10f0>
   12790:	mov	r1, #2
   12794:	mov	r2, #0
   12798:	mov	r3, #0
   1279c:	mov	sl, #0
   127a0:	str	r1, [sp]
   127a4:	bl	11480 <lseek64@plt>
   127a8:	subs	r2, r0, #1
   127ac:	mov	r7, #0
   127b0:	sbcs	r2, r1, #0
   127b4:	mov	r2, #0
   127b8:	movwlt	r2, #1
   127bc:	cmp	r2, #0
   127c0:	mvn	r2, #0
   127c4:	movne	r1, r2
   127c8:	movne	r0, r2
   127cc:	str	r1, [sp, #64]	; 0x40
   127d0:	str	r0, [sp, #68]	; 0x44
   127d4:	ldr	r2, [r4, #4]
   127d8:	str	r4, [sp, #56]	; 0x38
   127dc:	cmp	r2, #0
   127e0:	beq	129f0 <__assert_fail@plt+0x130c>
   127e4:	ldr	r1, [sp, #108]	; 0x6c
   127e8:	movw	r8, #43200	; 0xa8c0
   127ec:	mov	r4, #0
   127f0:	mov	r5, r2
   127f4:	str	r2, [sp, #104]	; 0x68
   127f8:	movt	r8, #1
   127fc:	mov	r6, r8
   12800:	b	1280c <__assert_fail@plt+0x1128>
   12804:	add	r5, r9, r5
   12808:	sub	r4, r4, r9
   1280c:	ldr	r9, [r6], #4
   12810:	cmp	r9, #0
   12814:	mvneq	r9, #1
   12818:	addeq	r6, r8, #4
   1281c:	cmn	r9, #1
   12820:	bgt	12834 <__assert_fail@plt+0x1150>
   12824:	rsb	r0, r9, #0
   12828:	cmp	r5, r0
   1282c:	bhi	12804 <__assert_fail@plt+0x1120>
   12830:	b	1296c <__assert_fail@plt+0x1288>
   12834:	cmp	r5, r9
   12838:	bcc	1295c <__assert_fail@plt+0x1278>
   1283c:	lsl	r2, r9, #2
   12840:	mov	r0, r1
   12844:	str	r1, [sp, #100]	; 0x64
   12848:	mov	r1, r6
   1284c:	bl	113cc <memcpy@plt>
   12850:	ldr	r1, [sp, #100]	; 0x64
   12854:	ldr	r2, [sp, #104]	; 0x68
   12858:	sub	r5, r5, r9
   1285c:	add	r6, r6, r9, lsl #2
   12860:	add	r1, r1, r9, lsl #2
   12864:	b	1280c <__assert_fail@plt+0x1128>
   12868:	movw	r1, #42504	; 0xa608
   1286c:	mov	r8, #0
   12870:	movt	r1, #1
   12874:	b	12664 <__assert_fail@plt+0xf80>
   12878:	ldr	r0, [sp, #176]	; 0xb0
   1287c:	mov	sl, #0
   12880:	subs	r1, r0, #536870913	; 0x20000001
   12884:	mov	r5, r0
   12888:	rscs	r1, sl, r0, asr #31
   1288c:	mov	r1, #0
   12890:	movwcc	r1, #1
   12894:	rsbs	r2, r0, #0
   12898:	sbcs	r2, sl, r0, asr #31
   1289c:	mov	r2, #0
   128a0:	movwlt	r2, #1
   128a4:	ands	r8, r2, r1
   128a8:	mov	r1, r9
   128ac:	asrne	r8, r0, #31
   128b0:	moveq	r5, #512	; 0x200
   128b4:	mov	r0, r6
   128b8:	mov	r2, r5
   128bc:	mov	r3, r8
   128c0:	bl	19928 <__assert_fail@plt+0x8244>
   128c4:	orrs	r0, r6, r9
   128c8:	beq	12938 <__assert_fail@plt+0x1254>
   128cc:	subs	r1, r6, r5
   128d0:	mov	sl, #0
   128d4:	mov	r0, #0
   128d8:	sbcs	r1, r9, r8
   128dc:	movwlt	sl, #1
   128e0:	cmp	sl, #0
   128e4:	mov	r7, sl
   128e8:	movne	r7, r9
   128ec:	movne	sl, r6
   128f0:	orrs	r1, r2, r3
   128f4:	beq	12950 <__assert_fail@plt+0x126c>
   128f8:	subs	ip, r5, r2
   128fc:	mvn	r1, r6
   12900:	sbc	r2, r8, r3
   12904:	mvn	r3, #-2147483648	; 0x80000000
   12908:	subs	r5, ip, r1
   1290c:	sub	r3, r3, r9
   12910:	sbcs	r5, r2, r3
   12914:	movwlt	r0, #1
   12918:	cmp	r0, #0
   1291c:	movne	r1, ip
   12920:	movne	r3, r2
   12924:	adds	r6, r1, r6
   12928:	adc	r9, r3, r9
   1292c:	str	r6, [sp, #68]	; 0x44
   12930:	str	r9, [sp, #64]	; 0x40
   12934:	b	127d4 <__assert_fail@plt+0x10f0>
   12938:	mov	r0, #0
   1293c:	mov	r7, #0
   12940:	str	r0, [sp, #68]	; 0x44
   12944:	mov	r0, #0
   12948:	str	r0, [sp, #64]	; 0x40
   1294c:	b	127d4 <__assert_fail@plt+0x10f0>
   12950:	str	r9, [sp, #64]	; 0x40
   12954:	str	r6, [sp, #68]	; 0x44
   12958:	b	127d4 <__assert_fail@plt+0x10f0>
   1295c:	cmp	r5, #2
   12960:	addcs	r0, r5, r5, lsl #1
   12964:	cmpcs	r0, r9
   12968:	bcs	12a18 <__assert_fail@plt+0x1334>
   1296c:	add	r4, r4, r5
   12970:	sub	r8, r4, #1
   12974:	sub	r5, r2, r4
   12978:	sub	r6, r2, #1
   1297c:	mov	r9, #0
   12980:	mov	r4, r8
   12984:	cmp	r4, r8
   12988:	bls	129c4 <__assert_fail@plt+0x12e0>
   1298c:	sub	r0, r5, r9
   12990:	subs	r2, r0, #1
   12994:	mov	r0, #0
   12998:	sbc	r3, r0, #0
   1299c:	ldr	r0, [sp, #112]	; 0x70
   129a0:	bl	16930 <__assert_fail@plt+0x524c>
   129a4:	ldr	r3, [sp, #108]	; 0x6c
   129a8:	add	r0, r9, r0
   129ac:	ldr	r1, [r3, r0, lsl #2]
   129b0:	ldr	r2, [r3, r9, lsl #2]
   129b4:	str	r1, [r3, r9, lsl #2]
   129b8:	str	r2, [r3, r0, lsl #2]
   129bc:	ldr	r2, [sp, #104]	; 0x68
   129c0:	b	129e0 <__assert_fail@plt+0x12fc>
   129c4:	ldr	r1, [sp, #108]	; 0x6c
   129c8:	add	r4, r6, r4
   129cc:	ldr	r0, [r1, r9, lsl #2]
   129d0:	str	r0, [r1, r5, lsl #2]
   129d4:	mvn	r0, #0
   129d8:	add	r5, r5, #1
   129dc:	str	r0, [r1, r9, lsl #2]
   129e0:	add	r9, r9, #1
   129e4:	sub	r4, r4, r8
   129e8:	cmp	r9, r2
   129ec:	bne	12984 <__assert_fail@plt+0x12a0>
   129f0:	ldr	r0, [sp, #112]	; 0x70
   129f4:	bl	16928 <__assert_fail@plt+0x5244>
   129f8:	ldr	r5, [sp, #116]	; 0x74
   129fc:	ldr	r2, [sp, #56]	; 0x38
   12a00:	ldr	r3, [sp, #52]	; 0x34
   12a04:	ldr	r4, [sp, #68]	; 0x44
   12a08:	ldr	r6, [sp, #64]	; 0x40
   12a0c:	mov	r8, #1
   12a10:	str	r0, [sp, #48]	; 0x30
   12a14:	b	12a70 <__assert_fail@plt+0x138c>
   12a18:	cmp	r9, r5
   12a1c:	beq	12a4c <__assert_fail@plt+0x1368>
   12a20:	asr	r0, r9, #31
   12a24:	subs	r2, r9, #1
   12a28:	mov	r8, r1
   12a2c:	sbc	r3, r0, #0
   12a30:	ldr	r0, [sp, #112]	; 0x70
   12a34:	bl	16930 <__assert_fail@plt+0x524c>
   12a38:	ldr	r2, [sp, #104]	; 0x68
   12a3c:	subs	r0, r0, r5
   12a40:	sbcs	r0, r1, #0
   12a44:	mov	r1, r8
   12a48:	bcs	12a58 <__assert_fail@plt+0x1374>
   12a4c:	ldr	r0, [r6]
   12a50:	sub	r5, r5, #1
   12a54:	str	r0, [r1], #4
   12a58:	sub	r9, r9, #1
   12a5c:	add	r6, r6, #4
   12a60:	cmp	r5, #0
   12a64:	bne	12a18 <__assert_fail@plt+0x1334>
   12a68:	b	12970 <__assert_fail@plt+0x128c>
   12a6c:	mov	r7, #0
   12a70:	orrs	r0, sl, r7
   12a74:	mov	r9, #0
   12a78:	bne	12a9c <__assert_fail@plt+0x13b8>
   12a7c:	orrs	r0, r4, r6
   12a80:	str	r4, [sp, #104]	; 0x68
   12a84:	str	r6, [sp, #100]	; 0x64
   12a88:	mov	r4, #0
   12a8c:	mov	r6, #0
   12a90:	mov	r9, r3
   12a94:	bne	12aa4 <__assert_fail@plt+0x13c0>
   12a98:	b	133c4 <__assert_fail@plt+0x1ce0>
   12a9c:	str	sl, [sp, #104]	; 0x68
   12aa0:	str	r7, [sp, #100]	; 0x64
   12aa4:	ldr	r0, [r2, #4]
   12aa8:	ldrb	r1, [r2, #22]
   12aac:	mov	sl, #0
   12ab0:	mov	r7, #0
   12ab4:	cmn	r0, r1
   12ab8:	beq	12a70 <__assert_fail@plt+0x138c>
   12abc:	mov	r1, #0
   12ac0:	str	r4, [sp, #68]	; 0x44
   12ac4:	str	r6, [sp, #64]	; 0x40
   12ac8:	cmp	r1, r0
   12acc:	str	r8, [sp, #32]
   12ad0:	bcs	12b24 <__assert_fail@plt+0x1440>
   12ad4:	ldr	r0, [sp, #108]	; 0x6c
   12ad8:	ldr	r7, [r0, r1, lsl #2]
   12adc:	add	r1, r1, #1
   12ae0:	str	r1, [sp, #44]	; 0x2c
   12ae4:	bl	1154c <getpagesize@plt>
   12ae8:	cmp	r7, #1
   12aec:	blt	12b3c <__assert_fail@plt+0x1458>
   12af0:	mov	r2, r7
   12af4:	lsr	r1, r7, #4
   12af8:	mov	r8, r7
   12afc:	bfc	r2, #12, #20
   12b00:	orr	r2, r2, r2, lsl #12
   12b04:	eor	r1, r1, r2, lsr #8
   12b08:	eor	r2, r7, r7, lsr #4
   12b0c:	orr	r1, r2, r1
   12b10:	tst	r1, #255	; 0xff
   12b14:	mov	r1, #65536	; 0x10000
   12b18:	movwne	r1, #61440	; 0xf000
   12b1c:	mov	r7, r1
   12b20:	b	12b44 <__assert_fail@plt+0x1460>
   12b24:	add	r1, r1, #1
   12b28:	mov	r7, #65536	; 0x10000
   12b2c:	mov	r8, #0
   12b30:	str	r1, [sp, #44]	; 0x2c
   12b34:	bl	1154c <getpagesize@plt>
   12b38:	b	12b44 <__assert_fail@plt+0x1460>
   12b3c:	mov	r8, r7
   12b40:	mov	r7, #65536	; 0x10000
   12b44:	ldr	r2, [sp, #104]	; 0x68
   12b48:	ldr	r3, [sp, #100]	; 0x64
   12b4c:	subs	r1, r2, r7
   12b50:	sbcs	r1, r3, #0
   12b54:	mov	r1, #0
   12b58:	movwlt	r1, #1
   12b5c:	rsbs	r2, r2, #0
   12b60:	rscs	r2, r3, #0
   12b64:	mov	r2, #0
   12b68:	movwlt	r2, #1
   12b6c:	and	sl, r2, r1
   12b70:	movw	r2, #43691	; 0xaaab
   12b74:	orr	r1, r7, #2
   12b78:	movt	r2, #43690	; 0xaaaa
   12b7c:	umull	r1, r2, r1, r2
   12b80:	lsr	r1, r2, #1
   12b84:	add	r4, r1, r1, lsl #1
   12b88:	mov	r1, r4
   12b8c:	bl	17c04 <__assert_fail@plt+0x6520>
   12b90:	mov	r6, r0
   12b94:	cmp	sl, #0
   12b98:	str	sl, [sp, #88]	; 0x58
   12b9c:	bne	12bcc <__assert_fail@plt+0x14e8>
   12ba0:	mov	r0, r5
   12ba4:	mov	r1, #3
   12ba8:	bl	13d88 <__assert_fail@plt+0x26a4>
   12bac:	cmp	r0, #1
   12bb0:	blt	12bcc <__assert_fail@plt+0x14e8>
   12bb4:	orr	r2, r0, #65536	; 0x10000
   12bb8:	cmp	r2, r0
   12bbc:	beq	12bcc <__assert_fail@plt+0x14e8>
   12bc0:	mov	r0, r5
   12bc4:	mov	r1, #4
   12bc8:	bl	13d88 <__assert_fail@plt+0x26a4>
   12bcc:	ldr	r0, [sp, #136]	; 0x88
   12bd0:	and	r0, r0, #61440	; 0xf000
   12bd4:	cmp	r0, #8192	; 0x2000
   12bd8:	bne	12c0c <__assert_fail@plt+0x1528>
   12bdc:	mov	r0, #1
   12be0:	movw	r1, #27905	; 0x6d01
   12be4:	add	lr, sp, #768	; 0x300
   12be8:	add	r2, sp, #880	; 0x370
   12bec:	str	r0, [sp, #884]	; 0x374
   12bf0:	mov	r0, #6
   12bf4:	movt	r1, #16392	; 0x4008
   12bf8:	strh	r0, [lr, #112]	; 0x70
   12bfc:	mov	r0, r5
   12c00:	bl	11474 <ioctl@plt>
   12c04:	cmp	r0, #0
   12c08:	beq	12c38 <__assert_fail@plt+0x1554>
   12c0c:	mov	r0, #0
   12c10:	mov	r2, #0
   12c14:	mov	r3, #0
   12c18:	str	r0, [sp]
   12c1c:	mov	r0, r5
   12c20:	bl	11480 <lseek64@plt>
   12c24:	subs	r2, r0, #1
   12c28:	sbcs	r2, r1, #0
   12c2c:	bge	134a4 <__assert_fail@plt+0x1dc0>
   12c30:	orrs	r0, r0, r1
   12c34:	bne	134b4 <__assert_fail@plt+0x1dd0>
   12c38:	mov	ip, r8
   12c3c:	cmp	r8, #0
   12c40:	str	r8, [sp, #60]	; 0x3c
   12c44:	str	r7, [sp, #72]	; 0x48
   12c48:	blt	12d1c <__assert_fail@plt+0x1638>
   12c4c:	mov	r0, ip
   12c50:	ldr	r1, [sp, #104]	; 0x68
   12c54:	lsr	r8, ip, #4
   12c58:	strb	ip, [r6, #2]
   12c5c:	bfc	r0, #12, #20
   12c60:	strb	r8, [r6]
   12c64:	orr	r0, r0, r0, lsl #12
   12c68:	lsr	r0, r0, #8
   12c6c:	strb	r0, [r6, #1]
   12c70:	subs	r0, r1, r4
   12c74:	ldr	r0, [sp, #100]	; 0x64
   12c78:	sbcs	r0, r0, #0
   12c7c:	movcc	r4, r1
   12c80:	mov	r1, #3
   12c84:	cmp	r4, #6
   12c88:	bcc	12cb4 <__assert_fail@plt+0x15d0>
   12c8c:	lsr	r7, r4, #1
   12c90:	mov	r5, #3
   12c94:	add	r0, r6, r5
   12c98:	mov	r1, r6
   12c9c:	mov	r2, r5
   12ca0:	bl	113cc <memcpy@plt>
   12ca4:	lsl	r1, r5, #1
   12ca8:	cmp	r7, r5, lsl #1
   12cac:	mov	r5, r1
   12cb0:	bcs	12c94 <__assert_fail@plt+0x15b0>
   12cb4:	cmp	r4, r1
   12cb8:	bls	12ccc <__assert_fail@plt+0x15e8>
   12cbc:	add	r0, r6, r1
   12cc0:	sub	r2, r4, r1
   12cc4:	mov	r1, r6
   12cc8:	bl	113cc <memcpy@plt>
   12ccc:	ldr	r0, [sp, #60]	; 0x3c
   12cd0:	tst	r0, #4096	; 0x1000
   12cd4:	beq	12d44 <__assert_fail@plt+0x1660>
   12cd8:	ldr	r5, [sp, #116]	; 0x74
   12cdc:	cmp	r4, #0
   12ce0:	beq	12d48 <__assert_fail@plt+0x1664>
   12ce4:	mvn	r0, #127	; 0x7f
   12ce8:	cmp	r4, #512	; 0x200
   12cec:	eor	r8, r8, r0
   12cf0:	strb	r8, [r6]
   12cf4:	bls	12d48 <__assert_fail@plt+0x1664>
   12cf8:	mov	r0, #512	; 0x200
   12cfc:	ldrb	r1, [r6, r0]
   12d00:	eor	r1, r1, #128	; 0x80
   12d04:	strb	r1, [r6, r0]
   12d08:	add	r0, r0, #512	; 0x200
   12d0c:	cmp	r0, r4
   12d10:	bcc	12cfc <__assert_fail@plt+0x1618>
   12d14:	ldrb	r8, [r6]
   12d18:	b	12d48 <__assert_fail@plt+0x1664>
   12d1c:	mov	r0, #0
   12d20:	strb	r0, [fp, #-34]	; 0xffffffde
   12d24:	movw	r0, #28015	; 0x6d6f
   12d28:	strh	r0, [fp, #-36]	; 0xffffffdc
   12d2c:	movw	r0, #24946	; 0x6172
   12d30:	movt	r0, #25710	; 0x646e
   12d34:	str	r0, [fp, #-40]	; 0xffffffd8
   12d38:	cmp	r9, #0
   12d3c:	bne	12d80 <__assert_fail@plt+0x169c>
   12d40:	b	12dcc <__assert_fail@plt+0x16e8>
   12d44:	ldr	r5, [sp, #116]	; 0x74
   12d48:	ldrb	r0, [r6, #1]
   12d4c:	ldrb	r1, [r6, #2]
   12d50:	movw	r3, #42724	; 0xa6e4
   12d54:	uxtb	r2, r8
   12d58:	str	r2, [sp]
   12d5c:	mov	r2, #7
   12d60:	movt	r3, #1
   12d64:	stmib	sp, {r0, r1}
   12d68:	sub	r0, fp, #40	; 0x28
   12d6c:	mov	r1, #1
   12d70:	bl	11564 <__sprintf_chk@plt>
   12d74:	ldr	ip, [sp, #60]	; 0x3c
   12d78:	cmp	r9, #0
   12d7c:	beq	12dcc <__assert_fail@plt+0x16e8>
   12d80:	movw	r1, #42570	; 0xa64a
   12d84:	mov	r0, #0
   12d88:	mov	r2, #5
   12d8c:	mov	r4, ip
   12d90:	movt	r1, #1
   12d94:	bl	11414 <dcgettext@plt>
   12d98:	mov	r2, r0
   12d9c:	ldr	r0, [sp, #44]	; 0x2c
   12da0:	mov	r1, #0
   12da4:	stm	sp, {r0, r9}
   12da8:	sub	r0, fp, #40	; 0x28
   12dac:	ldr	r3, [sp, #76]	; 0x4c
   12db0:	str	r0, [sp, #8]
   12db4:	mov	r0, #0
   12db8:	bl	114bc <error@plt>
   12dbc:	mov	r0, #0
   12dc0:	bl	113f0 <time@plt>
   12dc4:	mov	ip, r4
   12dc8:	add	r0, r0, #5
   12dcc:	str	r0, [sp, #36]	; 0x24
   12dd0:	movw	r0, #41447	; 0xa1e7
   12dd4:	str	r6, [sp, #112]	; 0x70
   12dd8:	mov	sl, #0
   12ddc:	mov	r4, #0
   12de0:	mov	r6, #0
   12de4:	movt	r0, #1
   12de8:	str	r0, [sp, #28]
   12dec:	mov	r0, #0
   12df0:	str	r0, [sp, #40]	; 0x28
   12df4:	ldr	r0, [sp, #104]	; 0x68
   12df8:	str	r0, [sp, #92]	; 0x5c
   12dfc:	ldr	r0, [sp, #100]	; 0x64
   12e00:	str	r0, [sp, #96]	; 0x60
   12e04:	b	12e24 <__assert_fail@plt+0x1740>
   12e08:	ldr	r5, [sp, #116]	; 0x74
   12e0c:	ldr	ip, [sp, #60]	; 0x3c
   12e10:	mov	r6, r7
   12e14:	b	12e24 <__assert_fail@plt+0x1740>
   12e18:	ldr	r4, [sp, #84]	; 0x54
   12e1c:	mov	r7, r6
   12e20:	b	12e08 <__assert_fail@plt+0x1724>
   12e24:	ldr	r7, [sp, #92]	; 0x5c
   12e28:	mvn	r1, #0
   12e2c:	ldr	r3, [sp, #72]	; 0x48
   12e30:	mov	r8, r4
   12e34:	subs	r0, r1, r7
   12e38:	mov	r4, r3
   12e3c:	ldr	r0, [sp, #96]	; 0x60
   12e40:	sbcs	r0, r1, r0
   12e44:	bge	12e80 <__assert_fail@plt+0x179c>
   12e48:	ldr	r1, [sp, #96]	; 0x60
   12e4c:	subs	r0, r7, r8
   12e50:	mov	r4, r3
   12e54:	sbc	r1, r1, r6
   12e58:	subs	r2, r0, r3
   12e5c:	sbcs	r1, r1, #0
   12e60:	bge	12e80 <__assert_fail@plt+0x179c>
   12e64:	subs	r1, r7, r8
   12e68:	ldr	r1, [sp, #96]	; 0x60
   12e6c:	sbcs	r1, r1, r6
   12e70:	blt	13340 <__assert_fail@plt+0x1c5c>
   12e74:	cmp	r0, #0
   12e78:	mov	r4, r0
   12e7c:	beq	13340 <__assert_fail@plt+0x1c5c>
   12e80:	cmn	ip, #1
   12e84:	ble	13044 <__assert_fail@plt+0x1960>
   12e88:	cmp	r4, #0
   12e8c:	beq	13064 <__assert_fail@plt+0x1980>
   12e90:	ldr	r0, [sp, #92]	; 0x5c
   12e94:	mvn	r1, #0
   12e98:	mov	r7, #0
   12e9c:	str	r6, [sp, #84]	; 0x54
   12ea0:	subs	r0, r1, r0
   12ea4:	ldr	r0, [sp, #96]	; 0x60
   12ea8:	sbcs	r0, r1, r0
   12eac:	mov	r0, #0
   12eb0:	movwge	r0, #1
   12eb4:	str	r0, [sp, #80]	; 0x50
   12eb8:	ldr	r0, [sp, #112]	; 0x70
   12ebc:	sub	r2, r4, r7
   12ec0:	add	r1, r0, r7
   12ec4:	mov	r0, r5
   12ec8:	bl	115ac <write@plt>
   12ecc:	mov	r6, r0
   12ed0:	cmp	r0, #0
   12ed4:	bgt	13028 <__assert_fail@plt+0x1944>
   12ed8:	ldr	r0, [sp, #92]	; 0x5c
   12edc:	mvn	r1, #0
   12ee0:	subs	r0, r1, r0
   12ee4:	ldr	r0, [sp, #96]	; 0x60
   12ee8:	sbcs	r0, r1, r0
   12eec:	bge	12f08 <__assert_fail@plt+0x1824>
   12ef0:	bl	11558 <__errno_location@plt>
   12ef4:	ldr	r5, [r0]
   12ef8:	mov	r6, r0
   12efc:	cmp	r5, #22
   12f00:	beq	12f2c <__assert_fail@plt+0x1848>
   12f04:	b	12f7c <__assert_fail@plt+0x1898>
   12f08:	cmp	r6, #0
   12f0c:	beq	13070 <__assert_fail@plt+0x198c>
   12f10:	bl	11558 <__errno_location@plt>
   12f14:	ldr	r5, [r0]
   12f18:	mov	r6, r0
   12f1c:	cmp	r5, #28
   12f20:	beq	13070 <__assert_fail@plt+0x198c>
   12f24:	cmp	r5, #22
   12f28:	bne	12f7c <__assert_fail@plt+0x1898>
   12f2c:	ldr	r0, [sp, #88]	; 0x58
   12f30:	eor	r0, r0, #1
   12f34:	tst	r0, #1
   12f38:	beq	12f7c <__assert_fail@plt+0x1898>
   12f3c:	ldr	r5, [sp, #116]	; 0x74
   12f40:	mov	r1, #3
   12f44:	mov	r0, r5
   12f48:	bl	13d88 <__assert_fail@plt+0x26a4>
   12f4c:	mov	r1, #1
   12f50:	mov	r6, #0
   12f54:	cmp	r0, #1
   12f58:	str	r1, [sp, #88]	; 0x58
   12f5c:	blt	13028 <__assert_fail@plt+0x1944>
   12f60:	bic	r2, r0, #65536	; 0x10000
   12f64:	cmp	r2, r0
   12f68:	beq	13028 <__assert_fail@plt+0x1944>
   12f6c:	mov	r0, r5
   12f70:	mov	r1, #4
   12f74:	bl	13d88 <__assert_fail@plt+0x26a4>
   12f78:	b	13028 <__assert_fail@plt+0x1944>
   12f7c:	movw	r1, #42595	; 0xa663
   12f80:	mov	r0, #0
   12f84:	mov	r2, #5
   12f88:	movt	r1, #1
   12f8c:	bl	11414 <dcgettext@plt>
   12f90:	ldr	r1, [sp, #84]	; 0x54
   12f94:	mov	sl, r0
   12f98:	adds	r0, r8, r7
   12f9c:	add	r2, sp, #880	; 0x370
   12fa0:	adc	r1, r1, #0
   12fa4:	bl	14b00 <__assert_fail@plt+0x341c>
   12fa8:	mov	r2, sl
   12fac:	ldr	sl, [sp, #76]	; 0x4c
   12fb0:	str	r0, [sp]
   12fb4:	mov	r0, #0
   12fb8:	mov	r1, r5
   12fbc:	mov	r3, sl
   12fc0:	bl	114bc <error@plt>
   12fc4:	ldr	r1, [sp, #80]	; 0x50
   12fc8:	subs	r0, r5, #5
   12fcc:	movwne	r0, #1
   12fd0:	orrs	r0, r0, r1
   12fd4:	bne	1345c <__assert_fail@plt+0x1d78>
   12fd8:	movw	r0, #511	; 0x1ff
   12fdc:	orr	r0, r7, r0
   12fe0:	cmp	r0, r4
   12fe4:	bcs	1345c <__assert_fail@plt+0x1d78>
   12fe8:	add	r5, r0, #1
   12fec:	ldr	r0, [sp, #84]	; 0x54
   12ff0:	mov	r1, #0
   12ff4:	adds	r2, r8, r5
   12ff8:	str	r1, [sp]
   12ffc:	adc	r3, r0, #0
   13000:	ldr	r0, [sp, #116]	; 0x74
   13004:	bl	11480 <lseek64@plt>
   13008:	mvn	r2, #0
   1300c:	eor	r1, r1, r2
   13010:	eor	r0, r0, r2
   13014:	orrs	r0, r0, r1
   13018:	beq	13430 <__assert_fail@plt+0x1d4c>
   1301c:	sub	r6, r5, r7
   13020:	ldr	r5, [sp, #116]	; 0x74
   13024:	mov	sl, #1
   13028:	add	r7, r6, r7
   1302c:	cmp	r4, r7
   13030:	bhi	12eb8 <__assert_fail@plt+0x17d4>
   13034:	ldr	ip, [sp, #60]	; 0x3c
   13038:	ldr	r6, [sp, #84]	; 0x54
   1303c:	mov	r4, r8
   13040:	b	130d8 <__assert_fail@plt+0x19f4>
   13044:	ldr	r0, [sp, #48]	; 0x30
   13048:	ldr	r1, [sp, #112]	; 0x70
   1304c:	mov	r2, r4
   13050:	mov	r7, ip
   13054:	bl	16cd0 <__assert_fail@plt+0x55ec>
   13058:	mov	ip, r7
   1305c:	cmp	r4, #0
   13060:	bne	12e90 <__assert_fail@plt+0x17ac>
   13064:	mov	r7, #0
   13068:	mov	r4, r8
   1306c:	b	130d8 <__assert_fail@plt+0x19f4>
   13070:	ldr	r6, [sp, #84]	; 0x54
   13074:	mvn	r0, #-2147483648	; 0x80000000
   13078:	mvn	r1, r8
   1307c:	ldr	r5, [sp, #116]	; 0x74
   13080:	ldr	ip, [sp, #60]	; 0x3c
   13084:	mov	r4, r8
   13088:	subs	r1, r1, r7
   1308c:	eor	r0, r6, r0
   13090:	sbcs	r0, r0, #0
   13094:	mov	r0, #0
   13098:	movwcc	r0, #1
   1309c:	adds	r1, r8, r7
   130a0:	adc	r2, r6, #0
   130a4:	cmp	r0, #0
   130a8:	ldr	r0, [sp, #96]	; 0x60
   130ac:	moveq	r0, r2
   130b0:	str	r0, [sp, #96]	; 0x60
   130b4:	ldr	r0, [sp, #92]	; 0x5c
   130b8:	moveq	r0, r1
   130bc:	str	r0, [sp, #92]	; 0x5c
   130c0:	ldr	r0, [sp, #100]	; 0x64
   130c4:	moveq	r0, r2
   130c8:	str	r0, [sp, #100]	; 0x64
   130cc:	ldr	r0, [sp, #104]	; 0x68
   130d0:	moveq	r0, r1
   130d4:	str	r0, [sp, #104]	; 0x68
   130d8:	mvn	r0, #-2147483648	; 0x80000000
   130dc:	mvn	r1, r4
   130e0:	eor	r0, r6, r0
   130e4:	subs	r1, r1, r7
   130e8:	sbcs	r0, r0, #0
   130ec:	bcc	13474 <__assert_fail@plt+0x1d90>
   130f0:	adds	r4, r4, r7
   130f4:	adc	r6, r6, #0
   130f8:	cmp	r9, #0
   130fc:	beq	12e24 <__assert_fail@plt+0x1740>
   13100:	ldr	r0, [sp, #92]	; 0x5c
   13104:	ldr	r1, [sp, #96]	; 0x60
   13108:	eor	r0, r4, r0
   1310c:	eor	r1, r6, r1
   13110:	orrs	r8, r0, r1
   13114:	bne	13128 <__assert_fail@plt+0x1a44>
   13118:	ldr	r0, [sp, #28]
   1311c:	ldrb	r0, [r0]
   13120:	cmp	r0, #0
   13124:	bne	13148 <__assert_fail@plt+0x1a64>
   13128:	mov	r0, #0
   1312c:	mov	r7, ip
   13130:	bl	113f0 <time@plt>
   13134:	ldr	r1, [sp, #36]	; 0x24
   13138:	mov	ip, r7
   1313c:	str	r0, [sp, #40]	; 0x28
   13140:	cmp	r1, r0
   13144:	bgt	12e24 <__assert_fail@plt+0x1740>
   13148:	mov	r0, #1
   1314c:	mov	r1, #0
   13150:	add	r2, sp, #880	; 0x370
   13154:	movw	r3, #434	; 0x1b2
   13158:	str	r4, [sp, #84]	; 0x54
   1315c:	str	r0, [sp]
   13160:	str	r0, [sp, #8]
   13164:	str	r1, [sp, #4]
   13168:	str	r1, [sp, #12]
   1316c:	mov	r0, r4
   13170:	mov	r1, r6
   13174:	bl	13fd8 <__assert_fail@plt+0x28f4>
   13178:	mov	r4, r0
   1317c:	cmp	r8, #0
   13180:	beq	13198 <__assert_fail@plt+0x1ab4>
   13184:	ldr	r0, [sp, #28]
   13188:	mov	r1, r4
   1318c:	bl	11390 <strcmp@plt>
   13190:	cmp	r0, #0
   13194:	beq	12e18 <__assert_fail@plt+0x1734>
   13198:	ldr	r2, [sp, #92]	; 0x5c
   1319c:	ldr	r3, [sp, #96]	; 0x60
   131a0:	mvn	r1, #0
   131a4:	subs	r0, r1, r2
   131a8:	sbcs	r0, r1, r3
   131ac:	bge	131f4 <__assert_fail@plt+0x1b10>
   131b0:	orrs	r0, r2, r3
   131b4:	beq	13228 <__assert_fail@plt+0x1b44>
   131b8:	ldr	r5, [sp, #84]	; 0x54
   131bc:	movw	r0, #36700	; 0x8f5c
   131c0:	movt	r0, #62914	; 0xf5c2
   131c4:	subs	r0, r0, r5
   131c8:	movw	r0, #23592	; 0x5c28
   131cc:	movt	r0, #655	; 0x28f
   131d0:	sbcs	r0, r0, r6
   131d4:	bcc	13234 <__assert_fail@plt+0x1b50>
   131d8:	mov	r2, #100	; 0x64
   131dc:	ldr	r3, [sp, #96]	; 0x60
   131e0:	mov	r7, r6
   131e4:	umull	r0, r1, r5, r2
   131e8:	mla	r1, r6, r2, r1
   131ec:	ldr	r2, [sp, #92]	; 0x5c
   131f0:	b	1325c <__assert_fail@plt+0x1b78>
   131f4:	movw	r1, #42662	; 0xa6a6
   131f8:	mov	r0, #0
   131fc:	mov	r2, #5
   13200:	mov	r7, r6
   13204:	movt	r1, #1
   13208:	bl	11414 <dcgettext@plt>
   1320c:	mov	r2, r0
   13210:	ldr	r0, [sp, #44]	; 0x2c
   13214:	stm	sp, {r0, r9}
   13218:	sub	r0, fp, #40	; 0x28
   1321c:	str	r4, [sp, #12]
   13220:	str	r0, [sp, #8]
   13224:	b	132cc <__assert_fail@plt+0x1be8>
   13228:	mov	r7, r6
   1322c:	mov	r5, #100	; 0x64
   13230:	b	13264 <__assert_fail@plt+0x1b80>
   13234:	ldr	r0, [sp, #92]	; 0x5c
   13238:	ldr	r1, [sp, #96]	; 0x60
   1323c:	mov	r2, #100	; 0x64
   13240:	mov	r3, #0
   13244:	bl	199fc <__assert_fail@plt+0x8318>
   13248:	mov	r2, r0
   1324c:	mov	r3, r1
   13250:	mov	r0, r5
   13254:	mov	r7, r6
   13258:	mov	r1, r6
   1325c:	bl	199fc <__assert_fail@plt+0x8318>
   13260:	mov	r5, r0
   13264:	mov	r0, #1
   13268:	mov	r1, #0
   1326c:	add	r2, sp, #228	; 0xe4
   13270:	mov	r3, #432	; 0x1b0
   13274:	str	r0, [sp]
   13278:	str	r0, [sp, #8]
   1327c:	str	r1, [sp, #4]
   13280:	str	r1, [sp, #12]
   13284:	ldr	r0, [sp, #92]	; 0x5c
   13288:	ldr	r1, [sp, #96]	; 0x60
   1328c:	bl	13fd8 <__assert_fail@plt+0x28f4>
   13290:	movw	r1, #42689	; 0xa6c1
   13294:	mov	r6, r0
   13298:	mov	r0, #0
   1329c:	mov	r2, #5
   132a0:	movt	r1, #1
   132a4:	bl	11414 <dcgettext@plt>
   132a8:	mov	r2, r0
   132ac:	ldr	r0, [sp, #44]	; 0x2c
   132b0:	cmp	r8, #0
   132b4:	add	r1, sp, #8
   132b8:	moveq	r4, r6
   132bc:	stm	sp, {r0, r9}
   132c0:	sub	r0, fp, #40	; 0x28
   132c4:	stm	r1, {r0, r4, r6}
   132c8:	str	r5, [sp, #20]
   132cc:	ldr	r5, [sp, #76]	; 0x4c
   132d0:	mov	r0, #0
   132d4:	mov	r1, #0
   132d8:	mov	r3, r5
   132dc:	bl	114bc <error@plt>
   132e0:	sub	r6, fp, #692	; 0x2b4
   132e4:	mov	r1, r4
   132e8:	mov	r2, #652	; 0x28c
   132ec:	mov	r0, r6
   132f0:	bl	11498 <__strcpy_chk@plt>
   132f4:	ldr	r0, [sp, #116]	; 0x74
   132f8:	mov	r1, r5
   132fc:	bl	134f4 <__assert_fail@plt+0x1e10>
   13300:	ldr	r1, [sp, #40]	; 0x28
   13304:	cmp	r0, #0
   13308:	add	r1, r1, #5
   1330c:	str	r1, [sp, #36]	; 0x24
   13310:	beq	13334 <__assert_fail@plt+0x1c50>
   13314:	bl	11558 <__errno_location@plt>
   13318:	ldr	r0, [r0]
   1331c:	ldr	r4, [sp, #84]	; 0x54
   13320:	mov	sl, #1
   13324:	str	r6, [sp, #28]
   13328:	cmp	r0, #5
   1332c:	beq	12e08 <__assert_fail@plt+0x1724>
   13330:	b	134ec <__assert_fail@plt+0x1e08>
   13334:	ldr	r4, [sp, #84]	; 0x54
   13338:	str	r6, [sp, #28]
   1333c:	b	12e08 <__assert_fail@plt+0x1724>
   13340:	ldr	r1, [sp, #76]	; 0x4c
   13344:	mov	r0, r5
   13348:	bl	134f4 <__assert_fail@plt+0x1e10>
   1334c:	cmp	r0, #0
   13350:	beq	13378 <__assert_fail@plt+0x1c94>
   13354:	bl	11558 <__errno_location@plt>
   13358:	ldr	r0, [r0]
   1335c:	ldr	r6, [sp, #112]	; 0x70
   13360:	cmp	r0, #5
   13364:	bne	134e4 <__assert_fail@plt+0x1e00>
   13368:	mov	r0, r6
   1336c:	bl	13fb0 <__assert_fail@plt+0x28cc>
   13370:	mov	r8, #0
   13374:	b	13390 <__assert_fail@plt+0x1cac>
   13378:	ldr	r0, [sp, #112]	; 0x70
   1337c:	bl	13fb0 <__assert_fail@plt+0x28cc>
   13380:	ldr	r8, [sp, #32]
   13384:	mov	r0, #1
   13388:	bic	r0, r0, sl
   1338c:	and	r8, r8, r0
   13390:	ldr	r2, [sp, #56]	; 0x38
   13394:	ldr	r3, [sp, #44]	; 0x2c
   13398:	ldr	r4, [sp, #68]	; 0x44
   1339c:	ldr	r6, [sp, #64]	; 0x40
   133a0:	mov	sl, #0
   133a4:	ldrb	r1, [r2, #22]
   133a8:	ldr	r0, [r2, #4]
   133ac:	add	r1, r0, r1
   133b0:	cmp	r3, r1
   133b4:	mov	r1, r3
   133b8:	ldr	r3, [sp, #52]	; 0x34
   133bc:	bcc	12ac8 <__assert_fail@plt+0x13e4>
   133c0:	b	12a6c <__assert_fail@plt+0x1388>
   133c4:	ldr	r0, [r2, #16]
   133c8:	cmp	r0, #0
   133cc:	beq	13468 <__assert_fail@plt+0x1d84>
   133d0:	mov	r0, r5
   133d4:	mov	r2, #0
   133d8:	mov	r3, #0
   133dc:	bl	113fc <ftruncate64@plt>
   133e0:	cmp	r0, #0
   133e4:	beq	13468 <__assert_fail@plt+0x1d84>
   133e8:	ldr	r0, [sp, #136]	; 0x88
   133ec:	and	r0, r0, #61440	; 0xf000
   133f0:	cmp	r0, #32768	; 0x8000
   133f4:	bne	13468 <__assert_fail@plt+0x1d84>
   133f8:	bl	11558 <__errno_location@plt>
   133fc:	ldr	r4, [r0]
   13400:	movw	r1, #42531	; 0xa623
   13404:	mov	r0, #0
   13408:	mov	r2, #5
   1340c:	mov	r8, #0
   13410:	movt	r1, #1
   13414:	bl	11414 <dcgettext@plt>
   13418:	ldr	r3, [sp, #76]	; 0x4c
   1341c:	mov	r2, r0
   13420:	mov	r0, #0
   13424:	mov	r1, r4
   13428:	bl	114bc <error@plt>
   1342c:	b	13468 <__assert_fail@plt+0x1d84>
   13430:	ldr	r4, [r6]
   13434:	movw	r1, #42626	; 0xa682
   13438:	mov	r0, #0
   1343c:	mov	r2, #5
   13440:	movt	r1, #1
   13444:	bl	11414 <dcgettext@plt>
   13448:	mov	r2, r0
   1344c:	mov	r0, #0
   13450:	mov	r1, r4
   13454:	mov	r3, sl
   13458:	bl	114bc <error@plt>
   1345c:	ldr	r0, [sp, #112]	; 0x70
   13460:	bl	13fb0 <__assert_fail@plt+0x28cc>
   13464:	mov	r8, #0
   13468:	ldr	r0, [sp, #108]	; 0x6c
   1346c:	bl	13fb0 <__assert_fail@plt+0x28cc>
   13470:	b	12684 <__assert_fail@plt+0xfa0>
   13474:	movw	r1, #42643	; 0xa693
   13478:	mov	r0, #0
   1347c:	mov	r2, #5
   13480:	movt	r1, #1
   13484:	bl	11414 <dcgettext@plt>
   13488:	ldr	r3, [sp, #76]	; 0x4c
   1348c:	mov	r2, r0
   13490:	mov	r0, #0
   13494:	mov	r1, #0
   13498:	bl	114bc <error@plt>
   1349c:	ldr	r6, [sp, #112]	; 0x70
   134a0:	b	134e4 <__assert_fail@plt+0x1e00>
   134a4:	bl	11558 <__errno_location@plt>
   134a8:	mov	r4, #22
   134ac:	str	r4, [r0]
   134b0:	b	134bc <__assert_fail@plt+0x1dd8>
   134b4:	bl	11558 <__errno_location@plt>
   134b8:	ldr	r4, [r0]
   134bc:	movw	r1, #42552	; 0xa638
   134c0:	mov	r0, #0
   134c4:	mov	r2, #5
   134c8:	movt	r1, #1
   134cc:	bl	11414 <dcgettext@plt>
   134d0:	ldr	r3, [sp, #76]	; 0x4c
   134d4:	mov	r2, r0
   134d8:	mov	r0, #0
   134dc:	mov	r1, r4
   134e0:	bl	114bc <error@plt>
   134e4:	mov	r0, r6
   134e8:	b	13460 <__assert_fail@plt+0x1d7c>
   134ec:	ldr	r6, [sp, #112]	; 0x70
   134f0:	b	134e4 <__assert_fail@plt+0x1e00>
   134f4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   134f8:	add	fp, sp, #24
   134fc:	mov	r8, r1
   13500:	mov	r4, r0
   13504:	bl	116c0 <fdatasync@plt>
   13508:	mov	r6, #0
   1350c:	cmp	r0, #0
   13510:	beq	13568 <__assert_fail@plt+0x1e84>
   13514:	bl	11558 <__errno_location@plt>
   13518:	ldr	r7, [r0]
   1351c:	mov	r5, r0
   13520:	cmp	r7, #22
   13524:	bhi	13570 <__assert_fail@plt+0x1e8c>
   13528:	movw	r9, #512	; 0x200
   1352c:	mov	r0, #1
   13530:	movt	r9, #96	; 0x60
   13534:	tst	r9, r0, lsl r7
   13538:	beq	13570 <__assert_fail@plt+0x1e8c>
   1353c:	mov	r0, r4
   13540:	bl	11384 <fsync@plt>
   13544:	cmp	r0, #0
   13548:	beq	13568 <__assert_fail@plt+0x1e84>
   1354c:	ldr	r7, [r5]
   13550:	cmp	r7, #22
   13554:	bhi	1357c <__assert_fail@plt+0x1e98>
   13558:	mov	r0, #1
   1355c:	tst	r9, r0, lsl r7
   13560:	beq	1357c <__assert_fail@plt+0x1e98>
   13564:	bl	11690 <sync@plt>
   13568:	mov	r0, r6
   1356c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13570:	movw	r1, #42737	; 0xa6f1
   13574:	movt	r1, #1
   13578:	b	13584 <__assert_fail@plt+0x1ea0>
   1357c:	movw	r1, #42758	; 0xa706
   13580:	movt	r1, #1
   13584:	mov	r0, #0
   13588:	mov	r2, #5
   1358c:	bl	11414 <dcgettext@plt>
   13590:	mov	r2, r0
   13594:	mov	r0, #0
   13598:	mov	r1, r7
   1359c:	mov	r3, r8
   135a0:	bl	114bc <error@plt>
   135a4:	mvn	r6, #0
   135a8:	str	r7, [r5]
   135ac:	mov	r0, r6
   135b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   135b4:	mov	r0, #1
   135b8:	b	117e0 <__assert_fail@plt+0xfc>
   135bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135c0:	add	fp, sp, #28
   135c4:	sub	sp, sp, #12
   135c8:	mov	r4, r3
   135cc:	mov	r6, r2
   135d0:	mov	r5, r1
   135d4:	mov	sl, r0
   135d8:	bl	11534 <strlen@plt>
   135dc:	ldr	r8, [r5]
   135e0:	cmp	r8, #0
   135e4:	beq	136a0 <__assert_fail@plt+0x1fbc>
   135e8:	mov	r7, r0
   135ec:	mov	r0, #0
   135f0:	add	r9, r5, #4
   135f4:	mov	r5, #0
   135f8:	str	r6, [sp, #4]
   135fc:	str	r0, [sp]
   13600:	mvn	r0, #0
   13604:	str	r0, [sp, #8]
   13608:	mov	r0, r8
   1360c:	mov	r1, sl
   13610:	mov	r2, r7
   13614:	bl	116b4 <strncmp@plt>
   13618:	cmp	r0, #0
   1361c:	bne	13674 <__assert_fail@plt+0x1f90>
   13620:	mov	r0, r8
   13624:	bl	11534 <strlen@plt>
   13628:	cmp	r0, r7
   1362c:	beq	136a4 <__assert_fail@plt+0x1fc0>
   13630:	ldr	r0, [sp, #8]
   13634:	cmn	r0, #1
   13638:	beq	13670 <__assert_fail@plt+0x1f8c>
   1363c:	ldr	r0, [sp, #4]
   13640:	cmp	r0, #0
   13644:	beq	13664 <__assert_fail@plt+0x1f80>
   13648:	ldr	r1, [sp, #8]
   1364c:	mov	r2, r4
   13650:	mla	r0, r1, r4, r0
   13654:	mov	r1, r6
   13658:	bl	11408 <memcmp@plt>
   1365c:	cmp	r0, #0
   13660:	beq	13674 <__assert_fail@plt+0x1f90>
   13664:	mov	r0, #1
   13668:	str	r0, [sp]
   1366c:	b	13674 <__assert_fail@plt+0x1f90>
   13670:	str	r5, [sp, #8]
   13674:	ldr	r8, [r9, r5, lsl #2]
   13678:	add	r6, r6, r4
   1367c:	add	r5, r5, #1
   13680:	cmp	r8, #0
   13684:	bne	13608 <__assert_fail@plt+0x1f24>
   13688:	ldr	r0, [sp]
   1368c:	tst	r0, #1
   13690:	ldr	r0, [sp, #8]
   13694:	mvnne	r0, #1
   13698:	sub	sp, fp, #28
   1369c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136a0:	mvn	r5, #0
   136a4:	mov	r0, r5
   136a8:	sub	sp, fp, #28
   136ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136b0:	push	{r4, r5, r6, r7, fp, lr}
   136b4:	add	fp, sp, #16
   136b8:	mov	r5, r0
   136bc:	ldr	r0, [r1]
   136c0:	mvn	r4, #0
   136c4:	cmp	r0, #0
   136c8:	beq	136f8 <__assert_fail@plt+0x2014>
   136cc:	add	r7, r1, #4
   136d0:	mov	r6, #0
   136d4:	mov	r1, r5
   136d8:	bl	11390 <strcmp@plt>
   136dc:	cmp	r0, #0
   136e0:	moveq	r0, r6
   136e4:	popeq	{r4, r5, r6, r7, fp, pc}
   136e8:	ldr	r0, [r7, r6, lsl #2]
   136ec:	add	r6, r6, #1
   136f0:	cmp	r0, #0
   136f4:	bne	136d4 <__assert_fail@plt+0x1ff0>
   136f8:	mov	r0, r4
   136fc:	pop	{r4, r5, r6, r7, fp, pc}
   13700:	push	{r4, r5, r6, sl, fp, lr}
   13704:	add	fp, sp, #16
   13708:	sub	sp, sp, #8
   1370c:	mov	r4, r1
   13710:	movw	r1, #43527	; 0xaa07
   13714:	mov	r5, r0
   13718:	movw	r0, #43500	; 0xa9ec
   1371c:	cmn	r2, #1
   13720:	mov	r2, #5
   13724:	movt	r0, #1
   13728:	movt	r1, #1
   1372c:	moveq	r1, r0
   13730:	mov	r0, #0
   13734:	bl	11414 <dcgettext@plt>
   13738:	mov	r6, r0
   1373c:	mov	r0, #0
   13740:	mov	r1, #8
   13744:	mov	r2, r4
   13748:	bl	161c0 <__assert_fail@plt+0x4adc>
   1374c:	mov	r4, r0
   13750:	mov	r0, #1
   13754:	mov	r1, r5
   13758:	bl	16780 <__assert_fail@plt+0x509c>
   1375c:	str	r0, [sp]
   13760:	mov	r0, #0
   13764:	mov	r1, #0
   13768:	mov	r2, r6
   1376c:	mov	r3, r4
   13770:	bl	114bc <error@plt>
   13774:	sub	sp, fp, #16
   13778:	pop	{r4, r5, r6, sl, fp, pc}
   1377c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13780:	add	fp, sp, #28
   13784:	sub	sp, sp, #4
   13788:	mov	r5, r1
   1378c:	movw	r1, #43556	; 0xaa24
   13790:	mov	sl, r2
   13794:	mov	r7, r0
   13798:	mov	r0, #0
   1379c:	mov	r2, #5
   137a0:	mov	r8, #0
   137a4:	movt	r1, #1
   137a8:	bl	11414 <dcgettext@plt>
   137ac:	movw	r4, #49584	; 0xc1b0
   137b0:	movt	r4, #2
   137b4:	ldr	r1, [r4]
   137b8:	bl	1136c <fputs_unlocked@plt>
   137bc:	ldr	r6, [r7]
   137c0:	cmp	r6, #0
   137c4:	beq	13864 <__assert_fail@plt+0x2180>
   137c8:	add	r9, r7, #4
   137cc:	mov	r7, #0
   137d0:	str	sl, [sp]
   137d4:	cmp	r8, #0
   137d8:	beq	137f4 <__assert_fail@plt+0x2110>
   137dc:	mov	r0, r7
   137e0:	mov	r1, r5
   137e4:	mov	r2, sl
   137e8:	bl	11408 <memcmp@plt>
   137ec:	cmp	r0, #0
   137f0:	beq	13820 <__assert_fail@plt+0x213c>
   137f4:	ldr	r7, [r4]
   137f8:	mov	r0, r6
   137fc:	bl	16790 <__assert_fail@plt+0x50ac>
   13800:	movw	r2, #43577	; 0xaa39
   13804:	mov	r3, r0
   13808:	mov	r0, r7
   1380c:	mov	r1, #1
   13810:	movt	r2, #1
   13814:	bl	115c4 <__fprintf_chk@plt>
   13818:	mov	r7, r5
   1381c:	b	13850 <__assert_fail@plt+0x216c>
   13820:	mov	sl, r9
   13824:	ldr	r9, [r4]
   13828:	mov	r0, r6
   1382c:	bl	16790 <__assert_fail@plt+0x50ac>
   13830:	mov	r3, r0
   13834:	mov	r0, r9
   13838:	mov	r9, sl
   1383c:	ldr	sl, [sp]
   13840:	movw	r2, #43585	; 0xaa41
   13844:	mov	r1, #1
   13848:	movt	r2, #1
   1384c:	bl	115c4 <__fprintf_chk@plt>
   13850:	ldr	r6, [r9, -r8, lsl #2]
   13854:	add	r5, r5, sl
   13858:	sub	r8, r8, #1
   1385c:	cmp	r6, #0
   13860:	bne	137d4 <__assert_fail@plt+0x20f0>
   13864:	ldr	r0, [r4]
   13868:	ldr	r1, [r0, #20]
   1386c:	ldr	r2, [r0, #24]
   13870:	cmp	r1, r2
   13874:	addcc	r2, r1, #1
   13878:	strcc	r2, [r0, #20]
   1387c:	movcc	r0, #10
   13880:	strbcc	r0, [r1]
   13884:	subcc	sp, fp, #28
   13888:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1388c:	mov	r1, #10
   13890:	sub	sp, fp, #28
   13894:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13898:	b	11600 <__overflow@plt>
   1389c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138a0:	add	fp, sp, #28
   138a4:	sub	sp, sp, #20
   138a8:	mov	r9, r0
   138ac:	ldr	r0, [fp, #16]
   138b0:	mov	r8, r3
   138b4:	mov	sl, r2
   138b8:	mov	r7, r1
   138bc:	cmp	r0, #0
   138c0:	beq	13998 <__assert_fail@plt+0x22b4>
   138c4:	mov	r0, r7
   138c8:	str	r9, [sp, #8]
   138cc:	str	r8, [sp, #16]
   138d0:	bl	11534 <strlen@plt>
   138d4:	ldr	r9, [sl]
   138d8:	cmp	r9, #0
   138dc:	beq	139d8 <__assert_fail@plt+0x22f4>
   138e0:	str	sl, [sp, #4]
   138e4:	add	r8, sl, #4
   138e8:	ldr	sl, [sp, #16]
   138ec:	mov	r4, r0
   138f0:	mov	r0, #0
   138f4:	mvn	r6, #0
   138f8:	mov	r5, #0
   138fc:	str	r0, [sp, #12]
   13900:	mov	r0, r9
   13904:	mov	r1, r7
   13908:	mov	r2, r4
   1390c:	bl	116b4 <strncmp@plt>
   13910:	cmp	r0, #0
   13914:	bne	13964 <__assert_fail@plt+0x2280>
   13918:	mov	r0, r9
   1391c:	bl	11534 <strlen@plt>
   13920:	cmp	r0, r4
   13924:	beq	139e4 <__assert_fail@plt+0x2300>
   13928:	cmn	r6, #1
   1392c:	beq	13960 <__assert_fail@plt+0x227c>
   13930:	ldr	r0, [sp, #16]
   13934:	cmp	r0, #0
   13938:	beq	13954 <__assert_fail@plt+0x2270>
   1393c:	ldr	r2, [fp, #8]
   13940:	mov	r1, sl
   13944:	mla	r0, r6, r2, r0
   13948:	bl	11408 <memcmp@plt>
   1394c:	cmp	r0, #0
   13950:	beq	13964 <__assert_fail@plt+0x2280>
   13954:	mov	r0, #1
   13958:	str	r0, [sp, #12]
   1395c:	b	13964 <__assert_fail@plt+0x2280>
   13960:	mov	r6, r5
   13964:	ldr	r9, [r8, r5, lsl #2]
   13968:	ldr	r0, [fp, #8]
   1396c:	add	r5, r5, #1
   13970:	add	sl, sl, r0
   13974:	cmp	r9, #0
   13978:	bne	13900 <__assert_fail@plt+0x221c>
   1397c:	ldr	r0, [sp, #12]
   13980:	ldr	r8, [sp, #16]
   13984:	ldr	sl, [sp, #4]
   13988:	ldr	r9, [sp, #8]
   1398c:	tst	r0, #1
   13990:	beq	139f4 <__assert_fail@plt+0x2310>
   13994:	b	13a00 <__assert_fail@plt+0x231c>
   13998:	ldr	r0, [sl]
   1399c:	movw	r4, #43500	; 0xa9ec
   139a0:	movt	r4, #1
   139a4:	cmp	r0, #0
   139a8:	beq	13a14 <__assert_fail@plt+0x2330>
   139ac:	add	r5, sl, #4
   139b0:	mov	r6, #0
   139b4:	mov	r1, r7
   139b8:	bl	11390 <strcmp@plt>
   139bc:	cmp	r0, #0
   139c0:	beq	139f4 <__assert_fail@plt+0x2310>
   139c4:	ldr	r0, [r5, r6, lsl #2]
   139c8:	add	r6, r6, #1
   139cc:	cmp	r0, #0
   139d0:	bne	139b4 <__assert_fail@plt+0x22d0>
   139d4:	b	13a14 <__assert_fail@plt+0x2330>
   139d8:	ldr	r8, [sp, #16]
   139dc:	ldr	r9, [sp, #8]
   139e0:	b	13a0c <__assert_fail@plt+0x2328>
   139e4:	ldr	r8, [sp, #16]
   139e8:	ldr	sl, [sp, #4]
   139ec:	ldr	r9, [sp, #8]
   139f0:	mov	r6, r5
   139f4:	cmn	r6, #1
   139f8:	bgt	13a7c <__assert_fail@plt+0x2398>
   139fc:	beq	13a0c <__assert_fail@plt+0x2328>
   13a00:	movw	r4, #43527	; 0xaa07
   13a04:	movt	r4, #1
   13a08:	b	13a14 <__assert_fail@plt+0x2330>
   13a0c:	movw	r4, #43500	; 0xa9ec
   13a10:	movt	r4, #1
   13a14:	ldr	r6, [fp, #12]
   13a18:	mov	r0, #0
   13a1c:	mov	r1, r4
   13a20:	mov	r2, #5
   13a24:	bl	11414 <dcgettext@plt>
   13a28:	mov	r4, r0
   13a2c:	mov	r0, #0
   13a30:	mov	r1, #8
   13a34:	mov	r2, r7
   13a38:	bl	161c0 <__assert_fail@plt+0x4adc>
   13a3c:	mov	r5, r0
   13a40:	mov	r0, #1
   13a44:	mov	r1, r9
   13a48:	bl	16780 <__assert_fail@plt+0x509c>
   13a4c:	str	r0, [sp]
   13a50:	mov	r0, #0
   13a54:	mov	r1, #0
   13a58:	mov	r2, r4
   13a5c:	mov	r3, r5
   13a60:	bl	114bc <error@plt>
   13a64:	ldr	r2, [fp, #8]
   13a68:	mov	r0, sl
   13a6c:	mov	r1, r8
   13a70:	bl	1377c <__assert_fail@plt+0x2098>
   13a74:	blx	r6
   13a78:	mvn	r6, #0
   13a7c:	mov	r0, r6
   13a80:	sub	sp, fp, #28
   13a84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a88:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13a8c:	add	fp, sp, #24
   13a90:	ldr	r6, [r1]
   13a94:	cmp	r6, #0
   13a98:	beq	13afc <__assert_fail@plt+0x2418>
   13a9c:	mov	r8, r1
   13aa0:	mov	r7, r2
   13aa4:	mov	r1, r2
   13aa8:	mov	r2, r3
   13aac:	mov	r4, r3
   13ab0:	mov	r9, r0
   13ab4:	bl	11408 <memcmp@plt>
   13ab8:	cmp	r0, #0
   13abc:	beq	13af4 <__assert_fail@plt+0x2410>
   13ac0:	add	r7, r7, r4
   13ac4:	add	r5, r8, #4
   13ac8:	ldr	r6, [r5]
   13acc:	cmp	r6, #0
   13ad0:	beq	13afc <__assert_fail@plt+0x2418>
   13ad4:	mov	r0, r9
   13ad8:	mov	r1, r7
   13adc:	mov	r2, r4
   13ae0:	bl	11408 <memcmp@plt>
   13ae4:	add	r7, r7, r4
   13ae8:	add	r5, r5, #4
   13aec:	cmp	r0, #0
   13af0:	bne	13ac8 <__assert_fail@plt+0x23e4>
   13af4:	mov	r0, r6
   13af8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13afc:	mov	r6, #0
   13b00:	mov	r0, r6
   13b04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13b08:	sub	r0, r0, #1
   13b0c:	ldrb	r3, [r0, #1]!
   13b10:	cmp	r3, #47	; 0x2f
   13b14:	beq	13b0c <__assert_fail@plt+0x2428>
   13b18:	mov	r2, #0
   13b1c:	mov	r1, r0
   13b20:	b	13b3c <__assert_fail@plt+0x2458>
   13b24:	cmp	r3, #0
   13b28:	bxeq	lr
   13b2c:	tst	r2, #1
   13b30:	mov	r2, #0
   13b34:	movne	r0, r1
   13b38:	ldrb	r3, [r1, #1]!
   13b3c:	uxtb	r3, r3
   13b40:	cmp	r3, #47	; 0x2f
   13b44:	bne	13b24 <__assert_fail@plt+0x2440>
   13b48:	ldrb	r3, [r1, #1]!
   13b4c:	mov	r2, #1
   13b50:	b	13b3c <__assert_fail@plt+0x2458>
   13b54:	push	{r4, sl, fp, lr}
   13b58:	add	fp, sp, #8
   13b5c:	mov	r4, r0
   13b60:	bl	11534 <strlen@plt>
   13b64:	mov	r1, r0
   13b68:	sub	r2, r4, #1
   13b6c:	mov	r0, r1
   13b70:	cmp	r1, #2
   13b74:	popcc	{r4, sl, fp, pc}
   13b78:	ldrb	r3, [r2, r0]
   13b7c:	sub	r1, r0, #1
   13b80:	cmp	r3, #47	; 0x2f
   13b84:	beq	13b6c <__assert_fail@plt+0x2488>
   13b88:	pop	{r4, sl, fp, pc}
   13b8c:	movw	r1, #49604	; 0xc1c4
   13b90:	movt	r1, #2
   13b94:	str	r0, [r1]
   13b98:	bx	lr
   13b9c:	movw	r1, #49608	; 0xc1c8
   13ba0:	movt	r1, #2
   13ba4:	strb	r0, [r1]
   13ba8:	bx	lr
   13bac:	push	{r4, r5, r6, sl, fp, lr}
   13bb0:	add	fp, sp, #16
   13bb4:	sub	sp, sp, #8
   13bb8:	movw	r0, #49588	; 0xc1b4
   13bbc:	movt	r0, #2
   13bc0:	ldr	r0, [r0]
   13bc4:	bl	190ac <__assert_fail@plt+0x79c8>
   13bc8:	cmp	r0, #0
   13bcc:	beq	13bf4 <__assert_fail@plt+0x2510>
   13bd0:	movw	r0, #49608	; 0xc1c8
   13bd4:	movt	r0, #2
   13bd8:	ldrb	r0, [r0]
   13bdc:	cmp	r0, #0
   13be0:	beq	13c14 <__assert_fail@plt+0x2530>
   13be4:	bl	11558 <__errno_location@plt>
   13be8:	ldr	r0, [r0]
   13bec:	cmp	r0, #32
   13bf0:	bne	13c14 <__assert_fail@plt+0x2530>
   13bf4:	movw	r0, #49584	; 0xc1b0
   13bf8:	movt	r0, #2
   13bfc:	ldr	r0, [r0]
   13c00:	bl	190ac <__assert_fail@plt+0x79c8>
   13c04:	cmp	r0, #0
   13c08:	subeq	sp, fp, #16
   13c0c:	popeq	{r4, r5, r6, sl, fp, pc}
   13c10:	b	13c84 <__assert_fail@plt+0x25a0>
   13c14:	movw	r1, #43590	; 0xaa46
   13c18:	mov	r0, #0
   13c1c:	mov	r2, #5
   13c20:	movt	r1, #1
   13c24:	bl	11414 <dcgettext@plt>
   13c28:	mov	r4, r0
   13c2c:	movw	r0, #49604	; 0xc1c4
   13c30:	movt	r0, #2
   13c34:	ldr	r6, [r0]
   13c38:	bl	11558 <__errno_location@plt>
   13c3c:	ldr	r5, [r0]
   13c40:	cmp	r6, #0
   13c44:	bne	13c60 <__assert_fail@plt+0x257c>
   13c48:	movw	r2, #43587	; 0xaa43
   13c4c:	mov	r0, #0
   13c50:	mov	r1, r5
   13c54:	mov	r3, r4
   13c58:	movt	r2, #1
   13c5c:	b	13c80 <__assert_fail@plt+0x259c>
   13c60:	mov	r0, r6
   13c64:	bl	16408 <__assert_fail@plt+0x4d24>
   13c68:	movw	r2, #43602	; 0xaa52
   13c6c:	mov	r3, r0
   13c70:	str	r4, [sp]
   13c74:	mov	r0, #0
   13c78:	mov	r1, r5
   13c7c:	movt	r2, #1
   13c80:	bl	114bc <error@plt>
   13c84:	movw	r0, #49496	; 0xc158
   13c88:	movt	r0, #2
   13c8c:	ldr	r0, [r0]
   13c90:	bl	113c0 <_exit@plt>
   13c94:	push	{fp, lr}
   13c98:	mov	fp, sp
   13c9c:	bl	13cf4 <__assert_fail@plt+0x2610>
   13ca0:	cmp	r0, #0
   13ca4:	popne	{fp, pc}
   13ca8:	bl	181f4 <__assert_fail@plt+0x6b10>
   13cac:	push	{r4, r5, r6, sl, fp, lr}
   13cb0:	add	fp, sp, #16
   13cb4:	mov	r5, r0
   13cb8:	mov	r4, r0
   13cbc:	ldrb	r6, [r5], #-1
   13cc0:	bl	13b08 <__assert_fail@plt+0x2424>
   13cc4:	sub	r2, r0, r4
   13cc8:	sub	r0, r6, #47	; 0x2f
   13ccc:	clz	r0, r0
   13cd0:	lsr	r1, r0, #5
   13cd4:	mov	r0, r2
   13cd8:	cmp	r2, r1
   13cdc:	popls	{r4, r5, r6, sl, fp, pc}
   13ce0:	ldrb	r3, [r5, r0]
   13ce4:	sub	r2, r0, #1
   13ce8:	cmp	r3, #47	; 0x2f
   13cec:	beq	13cd4 <__assert_fail@plt+0x25f0>
   13cf0:	pop	{r4, r5, r6, sl, fp, pc}
   13cf4:	push	{r4, r5, r6, sl, fp, lr}
   13cf8:	add	fp, sp, #16
   13cfc:	mov	r6, r0
   13d00:	mov	r4, r0
   13d04:	ldrb	r5, [r6], #-1
   13d08:	bl	13b08 <__assert_fail@plt+0x2424>
   13d0c:	sub	r1, r0, r4
   13d10:	sub	r0, r5, #47	; 0x2f
   13d14:	clz	r0, r0
   13d18:	lsr	r0, r0, #5
   13d1c:	mov	r5, r1
   13d20:	cmp	r1, r0
   13d24:	bls	13d38 <__assert_fail@plt+0x2654>
   13d28:	ldrb	r2, [r6, r5]
   13d2c:	sub	r1, r5, #1
   13d30:	cmp	r2, #47	; 0x2f
   13d34:	beq	13d1c <__assert_fail@plt+0x2638>
   13d38:	cmp	r5, #0
   13d3c:	mov	r0, r5
   13d40:	addeq	r0, r0, #1
   13d44:	add	r0, r0, #1
   13d48:	bl	19028 <__assert_fail@plt+0x7944>
   13d4c:	mov	r6, r0
   13d50:	cmp	r0, #0
   13d54:	beq	13d80 <__assert_fail@plt+0x269c>
   13d58:	mov	r0, r6
   13d5c:	mov	r1, r4
   13d60:	mov	r2, r5
   13d64:	bl	113cc <memcpy@plt>
   13d68:	cmp	r5, #0
   13d6c:	moveq	r0, #46	; 0x2e
   13d70:	moveq	r5, #1
   13d74:	strbeq	r0, [r6]
   13d78:	mov	r0, #0
   13d7c:	strb	r0, [r6, r5]
   13d80:	mov	r0, r6
   13d84:	pop	{r4, r5, r6, sl, fp, pc}
   13d88:	sub	sp, sp, #8
   13d8c:	push	{r4, r5, r6, r7, fp, lr}
   13d90:	add	fp, sp, #16
   13d94:	sub	sp, sp, #8
   13d98:	mov	r5, r0
   13d9c:	add	r0, fp, #8
   13da0:	cmp	r1, #11
   13da4:	str	r3, [fp, #12]
   13da8:	str	r2, [fp, #8]
   13dac:	str	r0, [sp, #4]
   13db0:	bhi	13dec <__assert_fail@plt+0x2708>
   13db4:	mov	r0, #1
   13db8:	movw	r2, #1300	; 0x514
   13dbc:	tst	r2, r0, lsl r1
   13dc0:	bne	13eac <__assert_fail@plt+0x27c8>
   13dc4:	movw	r2, #2570	; 0xa0a
   13dc8:	tst	r2, r0, lsl r1
   13dcc:	bne	13e14 <__assert_fail@plt+0x2730>
   13dd0:	cmp	r1, #0
   13dd4:	bne	13dec <__assert_fail@plt+0x2708>
   13dd8:	ldr	r0, [sp, #4]
   13ddc:	add	r1, r0, #4
   13de0:	str	r1, [sp, #4]
   13de4:	mov	r1, #0
   13de8:	b	13eb8 <__assert_fail@plt+0x27d4>
   13dec:	sub	r0, r1, #1024	; 0x400
   13df0:	cmp	r0, #10
   13df4:	bhi	13eac <__assert_fail@plt+0x27c8>
   13df8:	mov	r2, #1
   13dfc:	movw	r3, #645	; 0x285
   13e00:	tst	r3, r2, lsl r0
   13e04:	bne	13eac <__assert_fail@plt+0x27c8>
   13e08:	movw	r3, #1282	; 0x502
   13e0c:	tst	r3, r2, lsl r0
   13e10:	beq	13e20 <__assert_fail@plt+0x273c>
   13e14:	mov	r0, r5
   13e18:	bl	115f4 <fcntl64@plt>
   13e1c:	b	13ec4 <__assert_fail@plt+0x27e0>
   13e20:	cmp	r0, #6
   13e24:	bne	13eac <__assert_fail@plt+0x27c8>
   13e28:	ldr	r0, [sp, #4]
   13e2c:	movw	r7, #49612	; 0xc1cc
   13e30:	movt	r7, #2
   13e34:	add	r1, r0, #4
   13e38:	str	r1, [sp, #4]
   13e3c:	ldr	r6, [r0]
   13e40:	ldr	r0, [r7]
   13e44:	cmp	r0, #0
   13e48:	blt	13ee8 <__assert_fail@plt+0x2804>
   13e4c:	mov	r0, r5
   13e50:	movw	r1, #1030	; 0x406
   13e54:	mov	r2, r6
   13e58:	bl	115f4 <fcntl64@plt>
   13e5c:	mov	r4, r0
   13e60:	cmn	r0, #1
   13e64:	bgt	13edc <__assert_fail@plt+0x27f8>
   13e68:	bl	11558 <__errno_location@plt>
   13e6c:	ldr	r0, [r0]
   13e70:	cmp	r0, #22
   13e74:	bne	13edc <__assert_fail@plt+0x27f8>
   13e78:	mov	r0, r5
   13e7c:	mov	r1, #0
   13e80:	mov	r2, r6
   13e84:	bl	115f4 <fcntl64@plt>
   13e88:	mov	r4, r0
   13e8c:	cmp	r0, #0
   13e90:	blt	13ec8 <__assert_fail@plt+0x27e4>
   13e94:	mvn	r0, #0
   13e98:	str	r0, [r7]
   13e9c:	mov	r0, #1
   13ea0:	cmp	r0, #0
   13ea4:	bne	13f14 <__assert_fail@plt+0x2830>
   13ea8:	b	13ec8 <__assert_fail@plt+0x27e4>
   13eac:	ldr	r0, [sp, #4]
   13eb0:	add	r2, r0, #4
   13eb4:	str	r2, [sp, #4]
   13eb8:	ldr	r2, [r0]
   13ebc:	mov	r0, r5
   13ec0:	bl	115f4 <fcntl64@plt>
   13ec4:	mov	r4, r0
   13ec8:	mov	r0, r4
   13ecc:	sub	sp, fp, #16
   13ed0:	pop	{r4, r5, r6, r7, fp, lr}
   13ed4:	add	sp, sp, #8
   13ed8:	bx	lr
   13edc:	mov	r0, #1
   13ee0:	str	r0, [r7]
   13ee4:	b	13ec8 <__assert_fail@plt+0x27e4>
   13ee8:	mov	r0, r5
   13eec:	mov	r1, #0
   13ef0:	mov	r2, r6
   13ef4:	bl	115f4 <fcntl64@plt>
   13ef8:	mov	r4, r0
   13efc:	ldr	r0, [r7]
   13f00:	add	r0, r0, #1
   13f04:	clz	r0, r0
   13f08:	lsr	r0, r0, #5
   13f0c:	cmp	r0, #0
   13f10:	beq	13ec8 <__assert_fail@plt+0x27e4>
   13f14:	cmp	r4, #0
   13f18:	blt	13ec8 <__assert_fail@plt+0x27e4>
   13f1c:	mov	r0, r4
   13f20:	mov	r1, #1
   13f24:	bl	115f4 <fcntl64@plt>
   13f28:	cmp	r0, #0
   13f2c:	blt	13f48 <__assert_fail@plt+0x2864>
   13f30:	orr	r2, r0, #1
   13f34:	mov	r0, r4
   13f38:	mov	r1, #2
   13f3c:	bl	115f4 <fcntl64@plt>
   13f40:	cmn	r0, #1
   13f44:	bne	13ec8 <__assert_fail@plt+0x27e4>
   13f48:	bl	11558 <__errno_location@plt>
   13f4c:	ldr	r6, [r0]
   13f50:	mov	r5, r0
   13f54:	mov	r0, r4
   13f58:	bl	116d8 <close@plt>
   13f5c:	str	r6, [r5]
   13f60:	mvn	r4, #0
   13f64:	b	13ec8 <__assert_fail@plt+0x27e4>
   13f68:	sub	sp, sp, #8
   13f6c:	push	{fp, lr}
   13f70:	mov	fp, sp
   13f74:	sub	sp, sp, #8
   13f78:	str	r2, [fp, #8]
   13f7c:	mov	r2, #0
   13f80:	tst	r1, #64	; 0x40
   13f84:	str	r3, [fp, #12]
   13f88:	addne	r2, fp, #8
   13f8c:	orrne	r2, r2, #4
   13f90:	strne	r2, [sp, #4]
   13f94:	ldrne	r2, [fp, #8]
   13f98:	bl	114c8 <open64@plt>
   13f9c:	bl	17580 <__assert_fail@plt+0x5e9c>
   13fa0:	mov	sp, fp
   13fa4:	pop	{fp, lr}
   13fa8:	add	sp, sp, #8
   13fac:	bx	lr
   13fb0:	push	{r4, r5, r6, sl, fp, lr}
   13fb4:	add	fp, sp, #16
   13fb8:	mov	r4, r0
   13fbc:	bl	11558 <__errno_location@plt>
   13fc0:	ldr	r6, [r0]
   13fc4:	mov	r5, r0
   13fc8:	mov	r0, r4
   13fcc:	bl	113b4 <free@plt>
   13fd0:	str	r6, [r5]
   13fd4:	pop	{r4, r5, r6, sl, fp, pc}
   13fd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fdc:	add	fp, sp, #28
   13fe0:	sub	sp, sp, #4
   13fe4:	vpush	{d8-d9}
   13fe8:	sub	sp, sp, #104	; 0x68
   13fec:	mov	r7, r3
   13ff0:	mov	r6, r2
   13ff4:	mov	r9, r1
   13ff8:	str	r0, [sp, #44]	; 0x2c
   13ffc:	bl	1163c <localeconv@plt>
   14000:	ldr	r5, [r0]
   14004:	mov	r4, r0
   14008:	mov	r0, r5
   1400c:	bl	11534 <strlen@plt>
   14010:	movw	r2, #42593	; 0xa661
   14014:	sub	r1, r0, #1
   14018:	cmp	r1, #16
   1401c:	movt	r2, #1
   14020:	movcc	r2, r5
   14024:	ldr	r5, [r4, #4]
   14028:	ldr	r4, [r4, #8]
   1402c:	movcs	r0, #1
   14030:	str	r0, [sp, #16]
   14034:	str	r2, [sp, #12]
   14038:	mov	r0, r5
   1403c:	bl	11534 <strlen@plt>
   14040:	movw	r3, #41447	; 0xa1e7
   14044:	cmp	r0, #17
   14048:	movw	r0, #647	; 0x287
   1404c:	ldr	r2, [fp, #16]
   14050:	ldr	sl, [fp, #8]
   14054:	ldr	r8, [fp, #12]
   14058:	str	r6, [sp, #28]
   1405c:	str	r7, [sp, #36]	; 0x24
   14060:	str	r4, [sp, #20]
   14064:	movt	r3, #1
   14068:	add	r1, r6, r0
   1406c:	movcc	r3, r5
   14070:	ands	r0, r7, #32
   14074:	ldr	r5, [fp, #20]
   14078:	str	r1, [sp, #32]
   1407c:	str	r0, [sp, #24]
   14080:	mov	r0, #1000	; 0x3e8
   14084:	str	r3, [sp, #52]	; 0x34
   14088:	movwne	r0, #1024	; 0x400
   1408c:	str	r0, [sp, #40]	; 0x28
   14090:	and	r0, r7, #3
   14094:	str	r0, [sp, #48]	; 0x30
   14098:	subs	r0, sl, r2
   1409c:	sbcs	r0, r8, r5
   140a0:	bcs	14194 <__assert_fail@plt+0x2ab0>
   140a4:	orrs	r0, sl, r8
   140a8:	mov	r4, r9
   140ac:	beq	1427c <__assert_fail@plt+0x2b98>
   140b0:	ldr	r5, [fp, #20]
   140b4:	mov	r0, r2
   140b8:	mov	r2, sl
   140bc:	mov	r3, r8
   140c0:	mov	r1, r5
   140c4:	bl	199fc <__assert_fail@plt+0x8318>
   140c8:	ldr	r2, [fp, #16]
   140cc:	mov	r6, r0
   140d0:	mov	r3, r1
   140d4:	umull	r0, r1, r0, sl
   140d8:	mla	r1, r6, r8, r1
   140dc:	mla	r1, r3, sl, r1
   140e0:	subs	r0, r2, r0
   140e4:	sbc	r1, r5, r1
   140e8:	orrs	r0, r0, r1
   140ec:	bne	1427c <__assert_fail@plt+0x2b98>
   140f0:	ldr	r5, [sp, #44]	; 0x2c
   140f4:	mov	r1, r4
   140f8:	mov	r2, r6
   140fc:	mov	r8, r3
   14100:	mov	r0, r5
   14104:	bl	199fc <__assert_fail@plt+0x8318>
   14108:	mov	r7, r0
   1410c:	mov	r9, r1
   14110:	umull	r0, r1, r0, r6
   14114:	mov	r2, #10
   14118:	mov	r3, r8
   1411c:	mla	r1, r7, r8, r1
   14120:	subs	r0, r5, r0
   14124:	mla	r1, r9, r6, r1
   14128:	umull	sl, r0, r0, r2
   1412c:	mov	r2, r6
   14130:	sbc	r1, r4, r1
   14134:	add	r1, r1, r1, lsl #2
   14138:	add	r5, r0, r1, lsl #1
   1413c:	mov	r0, sl
   14140:	mov	r1, r5
   14144:	bl	199fc <__assert_fail@plt+0x8318>
   14148:	mov	r4, r0
   1414c:	umull	r0, r2, r0, r6
   14150:	mla	r2, r4, r8, r2
   14154:	subs	r0, sl, r0
   14158:	mla	r1, r1, r6, r2
   1415c:	mov	r2, #2
   14160:	sbc	r1, r5, r1
   14164:	subs	r3, r6, r0, lsl #1
   14168:	lsl	r1, r1, #1
   1416c:	orr	r1, r1, r0, lsr #31
   14170:	sbcs	r3, r8, r1
   14174:	orr	r5, r1, r0, lsl #1
   14178:	movwcc	r2, #3
   1417c:	cmp	r5, #0
   14180:	movwne	r5, #1
   14184:	rsbs	r0, r6, r0, lsl #1
   14188:	sbcs	r0, r1, r8
   1418c:	movcs	r5, r2
   14190:	b	1420c <__assert_fail@plt+0x2b28>
   14194:	mov	r0, sl
   14198:	mov	r1, r8
   1419c:	mov	r3, r5
   141a0:	bl	199fc <__assert_fail@plt+0x8318>
   141a4:	ldr	r2, [fp, #16]
   141a8:	mov	r6, r0
   141ac:	mov	r3, r1
   141b0:	mov	r4, r9
   141b4:	umull	r0, r1, r0, r2
   141b8:	mla	r1, r6, r5, r1
   141bc:	subs	r0, sl, r0
   141c0:	mla	r1, r3, r2, r1
   141c4:	sbc	r1, r8, r1
   141c8:	orrs	r0, r0, r1
   141cc:	bne	1427c <__assert_fail@plt+0x2b98>
   141d0:	ldr	r5, [sp, #44]	; 0x2c
   141d4:	mov	r2, r6
   141d8:	umull	r7, r0, r6, r5
   141dc:	mla	r0, r6, r4, r0
   141e0:	mla	r9, r3, r5, r0
   141e4:	mov	r0, r7
   141e8:	mov	r1, r9
   141ec:	bl	199fc <__assert_fail@plt+0x8318>
   141f0:	ldr	r2, [fp, #16]
   141f4:	eor	r1, r1, r4
   141f8:	eor	r0, r0, r5
   141fc:	orrs	r0, r0, r1
   14200:	bne	1427c <__assert_fail@plt+0x2b98>
   14204:	mov	r5, #0
   14208:	mov	r4, #0
   1420c:	ldr	r0, [sp, #36]	; 0x24
   14210:	ldr	r2, [sp, #40]	; 0x28
   14214:	mvn	r6, #0
   14218:	ands	r8, r0, #16
   1421c:	beq	14230 <__assert_fail@plt+0x2b4c>
   14220:	subs	r0, r7, r2
   14224:	mov	r6, #0
   14228:	sbcs	r0, r9, #0
   1422c:	bcs	14758 <__assert_fail@plt+0x3074>
   14230:	ldr	r0, [sp, #32]
   14234:	mov	sl, r7
   14238:	str	r0, [sp, #44]	; 0x2c
   1423c:	ldr	r0, [sp, #48]	; 0x30
   14240:	cmp	r0, #0
   14244:	beq	1456c <__assert_fail@plt+0x2e88>
   14248:	cmp	r0, #1
   1424c:	bne	145e0 <__assert_fail@plt+0x2efc>
   14250:	rsbs	r1, r5, #0
   14254:	mov	r0, #0
   14258:	and	r3, sl, #1
   1425c:	ldr	r5, [sp, #44]	; 0x2c
   14260:	sbc	r0, r0, #0
   14264:	eor	r1, r3, r1
   14268:	orrs	r0, r1, r0
   1426c:	addne	r4, r4, #1
   14270:	cmp	r4, #5
   14274:	bgt	1457c <__assert_fail@plt+0x2e98>
   14278:	b	145d0 <__assert_fail@plt+0x2eec>
   1427c:	ldr	r9, [fp, #20]
   14280:	mov	r0, r2
   14284:	mov	r1, r9
   14288:	bl	198b4 <__assert_fail@plt+0x81d0>
   1428c:	vmov	d8, r0, r1
   14290:	ldr	r0, [sp, #44]	; 0x2c
   14294:	mov	r1, r4
   14298:	bl	198b4 <__assert_fail@plt+0x81d0>
   1429c:	mov	r6, r0
   142a0:	mov	r7, r1
   142a4:	mov	r0, sl
   142a8:	mov	r1, r8
   142ac:	bl	198b4 <__assert_fail@plt+0x81d0>
   142b0:	vmov	d17, r6, r7
   142b4:	ldr	r7, [sp, #36]	; 0x24
   142b8:	vmov	d16, r0, r1
   142bc:	vdiv.f64	d16, d16, d8
   142c0:	vmul.f64	d8, d16, d17
   142c4:	tst	r7, #16
   142c8:	bne	1433c <__assert_fail@plt+0x2c58>
   142cc:	ldr	r0, [sp, #48]	; 0x30
   142d0:	ldr	sl, [sp, #28]
   142d4:	cmp	r0, #1
   142d8:	beq	144c4 <__assert_fail@plt+0x2de0>
   142dc:	vldr	d16, [pc, #756]	; 145d8 <__assert_fail@plt+0x2ef4>
   142e0:	ldr	r8, [sp, #32]
   142e4:	vcmpe.f64	d8, d16
   142e8:	vmrs	APSR_nzcv, fpscr
   142ec:	bpl	144c8 <__assert_fail@plt+0x2de4>
   142f0:	mov	r6, r0
   142f4:	vmov	r0, r1, d8
   142f8:	bl	19a48 <__assert_fail@plt+0x8364>
   142fc:	mov	r4, r0
   14300:	mov	r5, r1
   14304:	bl	198b4 <__assert_fail@plt+0x81d0>
   14308:	vmov	d16, r0, r1
   1430c:	clz	r0, r6
   14310:	mov	r2, #0
   14314:	vcmp.f64	d8, d16
   14318:	lsr	r0, r0, #5
   1431c:	vmrs	APSR_nzcv, fpscr
   14320:	movwne	r2, #1
   14324:	and	r0, r0, r2
   14328:	adds	r0, r0, r4
   1432c:	adc	r1, r5, #0
   14330:	bl	198b4 <__assert_fail@plt+0x81d0>
   14334:	vmov	d8, r0, r1
   14338:	b	144c8 <__assert_fail@plt+0x2de4>
   1433c:	ldr	r0, [sp, #40]	; 0x28
   14340:	vmov.f64	d16, #112	; 0x3f800000  1.0
   14344:	mov	r6, #0
   14348:	vmov	s0, r0
   1434c:	vcvt.f64.u32	d17, s0
   14350:	ldr	sl, [sp, #28]
   14354:	add	r6, r6, #1
   14358:	vmul.f64	d16, d16, d17
   1435c:	cmp	r6, #7
   14360:	vmulls.f64	d18, d16, d17
   14364:	vcmpels.f64	d18, d8
   14368:	vmrsls	APSR_nzcv, fpscr
   1436c:	bls	14354 <__assert_fail@plt+0x2c70>
   14370:	ldr	r0, [sp, #48]	; 0x30
   14374:	ldr	r8, [sp, #32]
   14378:	ldr	r5, [sp, #16]
   1437c:	vdiv.f64	d8, d8, d16
   14380:	vmov.f64	d16, d8
   14384:	cmp	r0, #1
   14388:	beq	143ec <__assert_fail@plt+0x2d08>
   1438c:	vldr	d16, [pc, #580]	; 145d8 <__assert_fail@plt+0x2ef4>
   14390:	vcmpe.f64	d8, d16
   14394:	vmov.f64	d16, d8
   14398:	vmrs	APSR_nzcv, fpscr
   1439c:	bpl	143ec <__assert_fail@plt+0x2d08>
   143a0:	vmov	r0, r1, d8
   143a4:	bl	19a48 <__assert_fail@plt+0x8364>
   143a8:	mov	r4, r0
   143ac:	mov	r5, r1
   143b0:	bl	198b4 <__assert_fail@plt+0x81d0>
   143b4:	vmov	d16, r0, r1
   143b8:	ldr	r0, [sp, #48]	; 0x30
   143bc:	mov	r2, #0
   143c0:	vcmp.f64	d8, d16
   143c4:	vmrs	APSR_nzcv, fpscr
   143c8:	movwne	r2, #1
   143cc:	clz	r0, r0
   143d0:	lsr	r0, r0, #5
   143d4:	and	r0, r0, r2
   143d8:	adds	r0, r0, r4
   143dc:	adc	r1, r5, #0
   143e0:	ldr	r5, [sp, #16]
   143e4:	bl	198b4 <__assert_fail@plt+0x81d0>
   143e8:	vmov	d16, r0, r1
   143ec:	movw	r3, #43615	; 0xaa5f
   143f0:	mov	r0, sl
   143f4:	mov	r1, #1
   143f8:	mvn	r2, #0
   143fc:	vstr	d16, [sp]
   14400:	movt	r3, #1
   14404:	bl	11564 <__sprintf_chk@plt>
   14408:	ldr	r1, [sp, #24]
   1440c:	mov	r0, #3
   14410:	cmp	r1, #0
   14414:	movwne	r0, #2
   14418:	add	r4, r0, r5
   1441c:	mov	r0, sl
   14420:	bl	11534 <strlen@plt>
   14424:	cmp	r4, r0
   14428:	bcc	1444c <__assert_fail@plt+0x2d68>
   1442c:	mov	r2, r0
   14430:	add	r5, r5, #1
   14434:	tst	r7, #8
   14438:	beq	144f8 <__assert_fail@plt+0x2e14>
   1443c:	add	r0, sl, r2
   14440:	ldrb	r0, [r0, #-1]
   14444:	cmp	r0, #48	; 0x30
   14448:	bne	144f8 <__assert_fail@plt+0x2e14>
   1444c:	ldr	r0, [sp, #48]	; 0x30
   14450:	vmov.f64	d9, #36	; 0x41200000  10.0
   14454:	vmul.f64	d8, d8, d9
   14458:	cmp	r0, #1
   1445c:	beq	144b8 <__assert_fail@plt+0x2dd4>
   14460:	vldr	d16, [pc, #368]	; 145d8 <__assert_fail@plt+0x2ef4>
   14464:	vcmpe.f64	d8, d16
   14468:	vmrs	APSR_nzcv, fpscr
   1446c:	bpl	144b8 <__assert_fail@plt+0x2dd4>
   14470:	vmov	r0, r1, d8
   14474:	bl	19a48 <__assert_fail@plt+0x8364>
   14478:	mov	r4, r0
   1447c:	mov	r5, r1
   14480:	bl	198b4 <__assert_fail@plt+0x81d0>
   14484:	vmov	d16, r0, r1
   14488:	ldr	r0, [sp, #48]	; 0x30
   1448c:	mov	r2, #0
   14490:	vcmp.f64	d8, d16
   14494:	vmrs	APSR_nzcv, fpscr
   14498:	movwne	r2, #1
   1449c:	clz	r0, r0
   144a0:	lsr	r0, r0, #5
   144a4:	and	r0, r0, r2
   144a8:	adds	r0, r0, r4
   144ac:	adc	r1, r5, #0
   144b0:	bl	198b4 <__assert_fail@plt+0x81d0>
   144b4:	vmov	d8, r0, r1
   144b8:	vdiv.f64	d16, d8, d9
   144bc:	vstr	d16, [sp]
   144c0:	b	144d0 <__assert_fail@plt+0x2dec>
   144c4:	ldr	r8, [sp, #32]
   144c8:	mvn	r6, #0
   144cc:	vstr	d8, [sp]
   144d0:	movw	r3, #43609	; 0xaa59
   144d4:	mov	r0, sl
   144d8:	mov	r1, #1
   144dc:	mvn	r2, #0
   144e0:	movt	r3, #1
   144e4:	bl	11564 <__sprintf_chk@plt>
   144e8:	mov	r0, sl
   144ec:	bl	11534 <strlen@plt>
   144f0:	mov	r2, r0
   144f4:	mov	r5, #0
   144f8:	sub	r4, r8, r2
   144fc:	mov	r1, sl
   14500:	mov	r0, r4
   14504:	bl	113a8 <memmove@plt>
   14508:	sub	r5, r8, r5
   1450c:	tst	r7, #4
   14510:	bne	14638 <__assert_fail@plt+0x2f54>
   14514:	ldr	r3, [sp, #40]	; 0x28
   14518:	ldr	r5, [fp, #16]
   1451c:	tst	r7, #128	; 0x80
   14520:	beq	14874 <__assert_fail@plt+0x3190>
   14524:	cmn	r6, #1
   14528:	bgt	1480c <__assert_fail@plt+0x3128>
   1452c:	subs	r0, r5, #2
   14530:	mov	r6, #0
   14534:	sbcs	r0, r9, #0
   14538:	bcc	1480c <__assert_fail@plt+0x3128>
   1453c:	mov	r0, #0
   14540:	mov	r1, #1
   14544:	mov	r6, #0
   14548:	cmp	r6, #7
   1454c:	beq	14808 <__assert_fail@plt+0x3124>
   14550:	umull	r1, r2, r1, r3
   14554:	add	r6, r6, #1
   14558:	mla	r0, r0, r3, r2
   1455c:	subs	r2, r1, r5
   14560:	sbcs	r2, r0, r9
   14564:	bcc	14548 <__assert_fail@plt+0x2e64>
   14568:	b	1480c <__assert_fail@plt+0x3128>
   1456c:	add	r0, r4, r5
   14570:	ldr	r5, [sp, #44]	; 0x2c
   14574:	cmp	r0, #1
   14578:	blt	145d0 <__assert_fail@plt+0x2eec>
   1457c:	adds	sl, sl, #1
   14580:	adc	r9, r9, #0
   14584:	cmp	r6, #7
   14588:	bgt	145d0 <__assert_fail@plt+0x2eec>
   1458c:	cmp	r8, #0
   14590:	beq	145d0 <__assert_fail@plt+0x2eec>
   14594:	eor	r0, sl, r2
   14598:	orrs	r0, r0, r9
   1459c:	ldreq	r0, [sp, #36]	; 0x24
   145a0:	addeq	r6, r6, #1
   145a4:	moveq	r9, #0
   145a8:	moveq	sl, #1
   145ac:	tsteq	r0, #8
   145b0:	bne	145d0 <__assert_fail@plt+0x2eec>
   145b4:	ldr	r2, [sp, #16]
   145b8:	mov	r0, #48	; 0x30
   145bc:	ldr	r1, [sp, #12]
   145c0:	strb	r0, [r5, #-1]!
   145c4:	sub	r5, r5, r2
   145c8:	mov	r0, r5
   145cc:	bl	113cc <memcpy@plt>
   145d0:	ldr	r8, [sp, #32]
   145d4:	b	145e8 <__assert_fail@plt+0x2f04>
   145d8:	andeq	r0, r0, r0
   145dc:	mvnsmi	r0, #0
   145e0:	ldr	r8, [sp, #32]
   145e4:	ldr	r5, [sp, #44]	; 0x2c
   145e8:	mov	r4, r5
   145ec:	mov	r0, sl
   145f0:	mov	r1, r9
   145f4:	mov	r2, #10
   145f8:	mov	r3, #0
   145fc:	bl	199fc <__assert_fail@plt+0x8318>
   14600:	add	r2, r0, r0, lsl #2
   14604:	sub	r2, sl, r2, lsl #1
   14608:	orr	r2, r2, #48	; 0x30
   1460c:	strb	r2, [r4, #-1]!
   14610:	rsbs	r2, sl, #9
   14614:	mov	sl, r0
   14618:	rscs	r2, r9, #0
   1461c:	mov	r9, r1
   14620:	bcc	145ec <__assert_fail@plt+0x2f08>
   14624:	ldr	r7, [sp, #36]	; 0x24
   14628:	ldr	r9, [fp, #20]
   1462c:	ldr	sl, [sp, #28]
   14630:	tst	r7, #4
   14634:	beq	14514 <__assert_fail@plt+0x2e30>
   14638:	ldr	r0, [sp, #52]	; 0x34
   1463c:	mov	r7, r5
   14640:	str	r6, [sp, #16]
   14644:	sub	r5, r5, r4
   14648:	bl	11534 <strlen@plt>
   1464c:	add	r8, sp, #56	; 0x38
   14650:	str	r0, [sp, #48]	; 0x30
   14654:	mov	r1, r4
   14658:	mov	r2, r5
   1465c:	mov	r0, r8
   14660:	bl	113cc <memcpy@plt>
   14664:	ldr	r0, [sp, #20]
   14668:	ldrb	r6, [r0]
   1466c:	cmp	r6, #255	; 0xff
   14670:	mov	r9, r6
   14674:	moveq	r9, r5
   14678:	cmp	r6, #0
   1467c:	mvneq	r9, #0
   14680:	cmp	r9, r5
   14684:	movhi	r9, r5
   14688:	sub	r4, r7, r9
   1468c:	sub	r7, r5, r9
   14690:	mov	r2, r9
   14694:	add	r1, r8, r7
   14698:	mov	r0, r4
   1469c:	bl	113cc <memcpy@plt>
   146a0:	cmp	r7, #0
   146a4:	beq	14730 <__assert_fail@plt+0x304c>
   146a8:	clz	r0, r6
   146ac:	ldr	r8, [sp, #20]
   146b0:	lsr	sl, r0, #5
   146b4:	ldr	r0, [sp, #48]	; 0x30
   146b8:	rsb	r0, r0, #0
   146bc:	str	r0, [sp, #44]	; 0x2c
   146c0:	ldr	r0, [sp, #44]	; 0x2c
   146c4:	ldr	r1, [sp, #52]	; 0x34
   146c8:	ldr	r2, [sp, #48]	; 0x30
   146cc:	add	r4, r4, r0
   146d0:	mov	r0, r4
   146d4:	bl	113cc <memcpy@plt>
   146d8:	tst	sl, #1
   146dc:	add	r0, sp, #56	; 0x38
   146e0:	addeq	r8, r8, #1
   146e4:	ldrb	r6, [r8]
   146e8:	cmp	r6, #255	; 0xff
   146ec:	mov	r5, r6
   146f0:	moveq	r5, r7
   146f4:	cmp	r6, #0
   146f8:	moveq	r5, r9
   146fc:	cmp	r7, r5
   14700:	movcc	r5, r7
   14704:	sub	r7, r7, r5
   14708:	sub	r4, r4, r5
   1470c:	mov	r2, r5
   14710:	add	r1, r0, r7
   14714:	mov	r0, r4
   14718:	bl	113cc <memcpy@plt>
   1471c:	clz	r0, r6
   14720:	cmp	r7, #0
   14724:	mov	r9, r5
   14728:	lsr	sl, r0, #5
   1472c:	bne	146c0 <__assert_fail@plt+0x2fdc>
   14730:	ldr	r8, [sp, #32]
   14734:	ldr	sl, [sp, #28]
   14738:	ldr	r7, [sp, #36]	; 0x24
   1473c:	ldr	r3, [sp, #40]	; 0x28
   14740:	ldr	r9, [fp, #20]
   14744:	ldr	r5, [fp, #16]
   14748:	ldr	r6, [sp, #16]
   1474c:	tst	r7, #128	; 0x80
   14750:	bne	14524 <__assert_fail@plt+0x2e40>
   14754:	b	14874 <__assert_fail@plt+0x3190>
   14758:	mov	r6, #0
   1475c:	mov	r0, r7
   14760:	mov	r1, r9
   14764:	mov	r3, #0
   14768:	bl	199fc <__assert_fail@plt+0x8318>
   1476c:	ldr	r2, [sp, #40]	; 0x28
   14770:	mov	sl, r0
   14774:	mov	r9, r1
   14778:	mls	r0, r0, r2, r7
   1477c:	add	r0, r0, r0, lsl #2
   14780:	add	r0, r4, r0, lsl #1
   14784:	udiv	r4, r0, r2
   14788:	mls	r0, r4, r2, r0
   1478c:	lsl	r0, r0, #1
   14790:	add	r0, r0, r5, lsr #1
   14794:	cmp	r0, r2
   14798:	bcs	147b0 <__assert_fail@plt+0x30cc>
   1479c:	add	r1, r0, r5
   147a0:	cmn	r0, r5
   147a4:	movwne	r1, #1
   147a8:	mov	r5, r1
   147ac:	b	147c0 <__assert_fail@plt+0x30dc>
   147b0:	add	r0, r0, r5
   147b4:	mov	r5, #2
   147b8:	cmp	r2, r0
   147bc:	movwcc	r5, #3
   147c0:	add	r6, r6, #1
   147c4:	cmp	r6, #7
   147c8:	bhi	147dc <__assert_fail@plt+0x30f8>
   147cc:	subs	r0, sl, r2
   147d0:	mov	r7, sl
   147d4:	sbcs	r0, r9, #0
   147d8:	bcs	1475c <__assert_fail@plt+0x3078>
   147dc:	rsbs	r0, sl, #9
   147e0:	rscs	r0, r9, #0
   147e4:	bcc	14890 <__assert_fail@plt+0x31ac>
   147e8:	ldr	r0, [sp, #48]	; 0x30
   147ec:	cmp	r0, #1
   147f0:	bne	14898 <__assert_fail@plt+0x31b4>
   147f4:	and	r0, r4, #1
   147f8:	add	r0, r5, r0
   147fc:	cmp	r0, #2
   14800:	bhi	148a8 <__assert_fail@plt+0x31c4>
   14804:	b	148dc <__assert_fail@plt+0x31f8>
   14808:	mov	r6, #8
   1480c:	and	r0, r7, #256	; 0x100
   14810:	tst	r7, #64	; 0x40
   14814:	orrsne	r1, r6, r0
   14818:	movne	r1, #32
   1481c:	addne	r8, sl, #648	; 0x288
   14820:	strbne	r1, [sl, #647]	; 0x287
   14824:	cmp	r6, #0
   14828:	beq	14850 <__assert_fail@plt+0x316c>
   1482c:	ldr	r1, [sp, #24]
   14830:	cmp	r1, #0
   14834:	moveq	r1, #107	; 0x6b
   14838:	cmpeq	r6, #1
   1483c:	beq	1484c <__assert_fail@plt+0x3168>
   14840:	movw	r1, #43696	; 0xaab0
   14844:	movt	r1, #1
   14848:	ldrb	r1, [r1, r6]
   1484c:	strb	r1, [r8], #1
   14850:	cmp	r0, #0
   14854:	beq	14874 <__assert_fail@plt+0x3190>
   14858:	ldr	r0, [sp, #24]
   1485c:	cmp	r0, #0
   14860:	cmpne	r6, #0
   14864:	movne	r0, #105	; 0x69
   14868:	strbne	r0, [r8], #1
   1486c:	mov	r0, #66	; 0x42
   14870:	strb	r0, [r8], #1
   14874:	mov	r0, #0
   14878:	strb	r0, [r8]
   1487c:	mov	r0, r4
   14880:	sub	sp, fp, #48	; 0x30
   14884:	vpop	{d8-d9}
   14888:	add	sp, sp, #4
   1488c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14890:	ldr	r0, [sp, #32]
   14894:	b	14238 <__assert_fail@plt+0x2b54>
   14898:	cmp	r0, #0
   1489c:	bne	148dc <__assert_fail@plt+0x31f8>
   148a0:	cmp	r5, #0
   148a4:	beq	148dc <__assert_fail@plt+0x31f8>
   148a8:	adds	r0, sl, #1
   148ac:	add	r4, r4, #1
   148b0:	mov	r5, #0
   148b4:	adc	r1, r9, #0
   148b8:	cmp	r4, #10
   148bc:	bne	148dc <__assert_fail@plt+0x31f8>
   148c0:	rsbs	r3, r0, #9
   148c4:	mov	r4, #0
   148c8:	mov	sl, r0
   148cc:	mov	r9, r1
   148d0:	mov	r5, #0
   148d4:	rscs	r3, r1, #0
   148d8:	bcc	1492c <__assert_fail@plt+0x3248>
   148dc:	ldr	r0, [sp, #36]	; 0x24
   148e0:	tst	r0, #8
   148e4:	beq	148fc <__assert_fail@plt+0x3218>
   148e8:	cmp	r4, #0
   148ec:	bne	148fc <__assert_fail@plt+0x3218>
   148f0:	ldr	r0, [sp, #32]
   148f4:	str	r0, [sp, #44]	; 0x2c
   148f8:	b	14924 <__assert_fail@plt+0x3240>
   148fc:	ldr	r1, [sp, #28]
   14900:	ldr	r2, [sp, #16]
   14904:	add	r0, r4, #48	; 0x30
   14908:	strb	r0, [r1, #646]!	; 0x286
   1490c:	sub	r0, r1, r2
   14910:	ldr	r1, [sp, #12]
   14914:	str	r0, [sp, #44]	; 0x2c
   14918:	bl	113cc <memcpy@plt>
   1491c:	ldr	r2, [sp, #40]	; 0x28
   14920:	mov	r5, #0
   14924:	mov	r4, #0
   14928:	b	1423c <__assert_fail@plt+0x2b58>
   1492c:	ldr	r0, [sp, #32]
   14930:	mov	r5, #0
   14934:	mov	sl, #10
   14938:	mov	r9, #0
   1493c:	b	14238 <__assert_fail@plt+0x2b54>
   14940:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14944:	add	fp, sp, #24
   14948:	sub	sp, sp, #8
   1494c:	mov	r4, r2
   14950:	mov	r8, r1
   14954:	cmp	r0, #0
   14958:	bne	14984 <__assert_fail@plt+0x32a0>
   1495c:	movw	r0, #43621	; 0xaa65
   14960:	movt	r0, #1
   14964:	bl	114d4 <getenv@plt>
   14968:	cmp	r0, #0
   1496c:	bne	14984 <__assert_fail@plt+0x32a0>
   14970:	movw	r0, #43632	; 0xaa70
   14974:	movt	r0, #1
   14978:	bl	114d4 <getenv@plt>
   1497c:	cmp	r0, #0
   14980:	beq	14aa8 <__assert_fail@plt+0x33c4>
   14984:	mov	r6, r0
   14988:	movw	r7, #43720	; 0xaac8
   1498c:	movw	r1, #43708	; 0xaabc
   14990:	mov	r3, #4
   14994:	ldrb	r5, [r6], #1
   14998:	movt	r7, #1
   1499c:	movt	r1, #1
   149a0:	mov	r2, r7
   149a4:	cmp	r5, #39	; 0x27
   149a8:	movne	r6, r0
   149ac:	mov	r0, r6
   149b0:	bl	135bc <__assert_fail@plt+0x1ed8>
   149b4:	sub	r1, r5, #39	; 0x27
   149b8:	cmp	r0, #0
   149bc:	clz	r1, r1
   149c0:	lsr	r1, r1, #5
   149c4:	lsl	r5, r1, #2
   149c8:	blt	149f0 <__assert_fail@plt+0x330c>
   149cc:	ldr	r0, [r7, r0, lsl #2]
   149d0:	mov	r2, #1
   149d4:	mov	r1, #0
   149d8:	str	r2, [r4]
   149dc:	str	r1, [r4, #4]
   149e0:	orr	r1, r0, r5
   149e4:	mov	r0, #0
   149e8:	str	r1, [r8]
   149ec:	b	14a20 <__assert_fail@plt+0x333c>
   149f0:	movw	r0, #43642	; 0xaa7a
   149f4:	add	r1, sp, #4
   149f8:	mov	r2, #0
   149fc:	mov	r3, r4
   14a00:	mov	r7, #0
   14a04:	movt	r0, #1
   14a08:	str	r0, [sp]
   14a0c:	mov	r0, r6
   14a10:	bl	18334 <__assert_fail@plt+0x6c50>
   14a14:	cmp	r0, #0
   14a18:	beq	14a64 <__assert_fail@plt+0x3380>
   14a1c:	str	r7, [r8]
   14a20:	ldrd	r2, [r4]
   14a24:	orrs	r1, r2, r3
   14a28:	beq	14a34 <__assert_fail@plt+0x3350>
   14a2c:	sub	sp, fp, #24
   14a30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a34:	movw	r0, #43678	; 0xaa9e
   14a38:	movt	r0, #1
   14a3c:	bl	114d4 <getenv@plt>
   14a40:	cmp	r0, #0
   14a44:	mov	r2, #512	; 0x200
   14a48:	mov	r0, #4
   14a4c:	mov	r1, #0
   14a50:	movweq	r2, #1024	; 0x400
   14a54:	str	r2, [r4]
   14a58:	str	r1, [r4, #4]
   14a5c:	sub	sp, fp, #24
   14a60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a64:	ldrb	r0, [r6]
   14a68:	sub	r0, r0, #48	; 0x30
   14a6c:	uxtb	r0, r0
   14a70:	cmp	r0, #10
   14a74:	bcc	14aa0 <__assert_fail@plt+0x33bc>
   14a78:	ldr	r0, [sp, #4]
   14a7c:	cmp	r0, r6
   14a80:	beq	14ad0 <__assert_fail@plt+0x33ec>
   14a84:	ldrb	r2, [r6, #1]
   14a88:	add	r1, r6, #1
   14a8c:	mov	r6, r1
   14a90:	sub	r2, r2, #48	; 0x30
   14a94:	uxtb	r2, r2
   14a98:	cmp	r2, #10
   14a9c:	bcs	14a7c <__assert_fail@plt+0x3398>
   14aa0:	mov	r1, r5
   14aa4:	b	149e4 <__assert_fail@plt+0x3300>
   14aa8:	movw	r0, #43678	; 0xaa9e
   14aac:	movt	r0, #1
   14ab0:	bl	114d4 <getenv@plt>
   14ab4:	mov	r2, #512	; 0x200
   14ab8:	cmp	r0, #0
   14abc:	mov	r1, #0
   14ac0:	movweq	r2, #1024	; 0x400
   14ac4:	str	r2, [r4]
   14ac8:	str	r1, [r4, #4]
   14acc:	b	149e4 <__assert_fail@plt+0x3300>
   14ad0:	ldrb	r2, [r0, #-1]
   14ad4:	orr	r1, r5, #384	; 0x180
   14ad8:	cmp	r2, #66	; 0x42
   14adc:	mov	r2, r1
   14ae0:	orrne	r2, r5, #128	; 0x80
   14ae4:	bne	14af8 <__assert_fail@plt+0x3414>
   14ae8:	ldrb	r0, [r0, #-2]
   14aec:	cmp	r0, #105	; 0x69
   14af0:	orreq	r1, r2, #32
   14af4:	b	149e4 <__assert_fail@plt+0x3300>
   14af8:	orr	r1, r2, #32
   14afc:	b	149e4 <__assert_fail@plt+0x3300>
   14b00:	push	{r4, r5, r6, sl, fp, lr}
   14b04:	add	fp, sp, #16
   14b08:	mov	r5, r0
   14b0c:	mov	r0, #0
   14b10:	mov	r4, r1
   14b14:	add	r6, r2, #19
   14b18:	strb	r0, [r2, #20]
   14b1c:	mov	r0, r5
   14b20:	mov	r1, r4
   14b24:	mov	r2, #10
   14b28:	mov	r3, #0
   14b2c:	bl	199fc <__assert_fail@plt+0x8318>
   14b30:	add	r2, r0, r0, lsl #2
   14b34:	sub	r2, r5, r2, lsl #1
   14b38:	orr	r2, r2, #48	; 0x30
   14b3c:	strb	r2, [r6], #-1
   14b40:	rsbs	r2, r5, #9
   14b44:	mov	r5, r0
   14b48:	rscs	r2, r4, #0
   14b4c:	mov	r4, r1
   14b50:	bcc	14b1c <__assert_fail@plt+0x3438>
   14b54:	add	r0, r6, #1
   14b58:	pop	{r4, r5, r6, sl, fp, pc}
   14b5c:	push	{r4, r5, fp, lr}
   14b60:	add	fp, sp, #8
   14b64:	cmp	r0, #0
   14b68:	beq	14bfc <__assert_fail@plt+0x3518>
   14b6c:	mov	r1, #47	; 0x2f
   14b70:	mov	r4, r0
   14b74:	bl	11624 <strrchr@plt>
   14b78:	cmp	r0, #0
   14b7c:	mov	r5, r4
   14b80:	addne	r5, r0, #1
   14b84:	sub	r0, r5, r4
   14b88:	cmp	r0, #7
   14b8c:	blt	14be0 <__assert_fail@plt+0x34fc>
   14b90:	movw	r1, #43784	; 0xab08
   14b94:	sub	r0, r5, #7
   14b98:	mov	r2, #7
   14b9c:	movt	r1, #1
   14ba0:	bl	116b4 <strncmp@plt>
   14ba4:	cmp	r0, #0
   14ba8:	bne	14be0 <__assert_fail@plt+0x34fc>
   14bac:	movw	r1, #43792	; 0xab10
   14bb0:	mov	r0, r5
   14bb4:	mov	r2, #3
   14bb8:	movt	r1, #1
   14bbc:	bl	116b4 <strncmp@plt>
   14bc0:	cmp	r0, #0
   14bc4:	beq	14bd0 <__assert_fail@plt+0x34ec>
   14bc8:	mov	r4, r5
   14bcc:	b	14be0 <__assert_fail@plt+0x34fc>
   14bd0:	movw	r0, #49568	; 0xc1a0
   14bd4:	add	r4, r5, #3
   14bd8:	movt	r0, #2
   14bdc:	str	r4, [r0]
   14be0:	movw	r0, #49572	; 0xc1a4
   14be4:	movt	r0, #2
   14be8:	str	r4, [r0]
   14bec:	movw	r0, #49616	; 0xc1d0
   14bf0:	movt	r0, #2
   14bf4:	str	r4, [r0]
   14bf8:	pop	{r4, r5, fp, pc}
   14bfc:	movw	r0, #49584	; 0xc1b0
   14c00:	mov	r1, #55	; 0x37
   14c04:	mov	r2, #1
   14c08:	movt	r0, #2
   14c0c:	ldr	r3, [r0]
   14c10:	movw	r0, #43728	; 0xaad0
   14c14:	movt	r0, #1
   14c18:	bl	11468 <fwrite@plt>
   14c1c:	bl	116cc <abort@plt>
   14c20:	push	{r4, r5, r6, sl, fp, lr}
   14c24:	add	fp, sp, #16
   14c28:	mov	r4, r0
   14c2c:	movw	r0, #49624	; 0xc1d8
   14c30:	movt	r0, #2
   14c34:	cmp	r4, #0
   14c38:	moveq	r4, r0
   14c3c:	bl	11558 <__errno_location@plt>
   14c40:	ldr	r6, [r0]
   14c44:	mov	r5, r0
   14c48:	mov	r0, r4
   14c4c:	mov	r1, #48	; 0x30
   14c50:	bl	180f4 <__assert_fail@plt+0x6a10>
   14c54:	str	r6, [r5]
   14c58:	pop	{r4, r5, r6, sl, fp, pc}
   14c5c:	movw	r1, #49624	; 0xc1d8
   14c60:	cmp	r0, #0
   14c64:	movt	r1, #2
   14c68:	movne	r1, r0
   14c6c:	ldr	r0, [r1]
   14c70:	bx	lr
   14c74:	movw	r2, #49624	; 0xc1d8
   14c78:	cmp	r0, #0
   14c7c:	movt	r2, #2
   14c80:	movne	r2, r0
   14c84:	str	r1, [r2]
   14c88:	bx	lr
   14c8c:	movw	r3, #49624	; 0xc1d8
   14c90:	cmp	r0, #0
   14c94:	movt	r3, #2
   14c98:	movne	r3, r0
   14c9c:	ubfx	r0, r1, #5, #3
   14ca0:	and	r1, r1, #31
   14ca4:	add	r0, r3, r0, lsl #2
   14ca8:	ldr	r3, [r0, #8]
   14cac:	eor	r2, r2, r3, lsr r1
   14cb0:	and	r2, r2, #1
   14cb4:	eor	r2, r3, r2, lsl r1
   14cb8:	str	r2, [r0, #8]
   14cbc:	mov	r0, #1
   14cc0:	and	r0, r0, r3, lsr r1
   14cc4:	bx	lr
   14cc8:	movw	r2, #49624	; 0xc1d8
   14ccc:	cmp	r0, #0
   14cd0:	movt	r2, #2
   14cd4:	movne	r2, r0
   14cd8:	ldr	r0, [r2, #4]
   14cdc:	str	r1, [r2, #4]
   14ce0:	bx	lr
   14ce4:	movw	r3, #49624	; 0xc1d8
   14ce8:	cmp	r0, #0
   14cec:	movt	r3, #2
   14cf0:	movne	r3, r0
   14cf4:	cmp	r1, #0
   14cf8:	mov	r0, #10
   14cfc:	cmpne	r2, #0
   14d00:	str	r0, [r3]
   14d04:	bne	14d14 <__assert_fail@plt+0x3630>
   14d08:	push	{fp, lr}
   14d0c:	mov	fp, sp
   14d10:	bl	116cc <abort@plt>
   14d14:	str	r1, [r3, #40]	; 0x28
   14d18:	str	r2, [r3, #44]	; 0x2c
   14d1c:	bx	lr
   14d20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d24:	add	fp, sp, #28
   14d28:	sub	sp, sp, #20
   14d2c:	mov	r7, r0
   14d30:	ldr	r0, [fp, #8]
   14d34:	movw	r5, #49624	; 0xc1d8
   14d38:	mov	r8, r3
   14d3c:	mov	r9, r2
   14d40:	mov	sl, r1
   14d44:	movt	r5, #2
   14d48:	cmp	r0, #0
   14d4c:	movne	r5, r0
   14d50:	bl	11558 <__errno_location@plt>
   14d54:	mov	r4, r0
   14d58:	ldm	r5, {r0, r1}
   14d5c:	ldr	r2, [r5, #40]	; 0x28
   14d60:	ldr	r3, [r5, #44]	; 0x2c
   14d64:	add	r5, r5, #8
   14d68:	ldr	r6, [r4]
   14d6c:	stm	sp, {r0, r1, r5}
   14d70:	str	r2, [sp, #12]
   14d74:	str	r3, [sp, #16]
   14d78:	mov	r0, r7
   14d7c:	mov	r1, sl
   14d80:	mov	r2, r9
   14d84:	mov	r3, r8
   14d88:	bl	14d98 <__assert_fail@plt+0x36b4>
   14d8c:	str	r6, [r4]
   14d90:	sub	sp, fp, #28
   14d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d9c:	add	fp, sp, #28
   14da0:	sub	sp, sp, #156	; 0x9c
   14da4:	str	r0, [sp, #80]	; 0x50
   14da8:	ldr	r0, [fp, #12]
   14dac:	mov	r6, r1
   14db0:	mov	r9, r3
   14db4:	str	r2, [fp, #-84]	; 0xffffffac
   14db8:	and	r1, r0, #4
   14dbc:	str	r1, [sp, #32]
   14dc0:	and	r1, r0, #1
   14dc4:	str	r1, [sp, #36]	; 0x24
   14dc8:	ubfx	r4, r0, #1, #1
   14dcc:	bl	1148c <__ctype_get_mb_cur_max@plt>
   14dd0:	str	r0, [sp, #40]	; 0x28
   14dd4:	ldr	r0, [fp, #24]
   14dd8:	ldr	r7, [fp, #8]
   14ddc:	mov	r1, #0
   14de0:	mov	r5, #1
   14de4:	str	r1, [fp, #-56]	; 0xffffffc8
   14de8:	mov	r1, #0
   14dec:	str	r1, [sp, #60]	; 0x3c
   14df0:	str	r0, [sp, #76]	; 0x4c
   14df4:	ldr	r0, [fp, #20]
   14df8:	str	r0, [sp, #72]	; 0x48
   14dfc:	mov	r0, #0
   14e00:	str	r0, [sp, #56]	; 0x38
   14e04:	mov	r0, #0
   14e08:	str	r0, [sp, #92]	; 0x5c
   14e0c:	mov	r0, #0
   14e10:	str	r0, [fp, #-76]	; 0xffffffb4
   14e14:	mov	r0, #0
   14e18:	cmp	r7, #10
   14e1c:	bhi	15d9c <__assert_fail@plt+0x46b8>
   14e20:	add	r1, pc, #28
   14e24:	mov	sl, r6
   14e28:	ldr	r6, [sp, #80]	; 0x50
   14e2c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14e30:	mov	r8, #0
   14e34:	mov	r2, #1
   14e38:	mov	r3, #0
   14e3c:	mov	lr, r9
   14e40:	ldr	pc, [r1, r7, lsl #2]
   14e44:	andeq	r4, r1, r8, lsr #30
   14e48:	andeq	r4, r1, r4, asr pc
   14e4c:	andeq	r4, r1, r8, lsl pc
   14e50:	andeq	r4, r1, r0, lsl pc
   14e54:	andeq	r4, r1, r8, asr #30
   14e58:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   14e5c:	andeq	r4, r1, r8, lsr pc
   14e60:	strdeq	r4, [r1], -r8
   14e64:	andeq	r4, r1, r0, ror lr
   14e68:	andeq	r4, r1, r0, ror lr
   14e6c:	muleq	r1, r8, lr
   14e70:	movw	r0, #43874	; 0xab62
   14e74:	mov	r1, r7
   14e78:	movt	r0, #1
   14e7c:	bl	167a8 <__assert_fail@plt+0x50c4>
   14e80:	str	r0, [sp, #72]	; 0x48
   14e84:	movw	r0, #43876	; 0xab64
   14e88:	mov	r1, r7
   14e8c:	movt	r0, #1
   14e90:	bl	167a8 <__assert_fail@plt+0x50c4>
   14e94:	str	r0, [sp, #76]	; 0x4c
   14e98:	str	r5, [fp, #-48]	; 0xffffffd0
   14e9c:	mov	r8, #0
   14ea0:	mov	r5, r7
   14ea4:	tst	r4, #1
   14ea8:	bne	14ee0 <__assert_fail@plt+0x37fc>
   14eac:	ldr	r0, [sp, #72]	; 0x48
   14eb0:	ldrb	r0, [r0]
   14eb4:	cmp	r0, #0
   14eb8:	beq	14ee0 <__assert_fail@plt+0x37fc>
   14ebc:	ldr	r1, [sp, #72]	; 0x48
   14ec0:	mov	r8, #0
   14ec4:	add	r1, r1, #1
   14ec8:	cmp	r8, sl
   14ecc:	strbcc	r0, [r6, r8]
   14ed0:	ldrb	r0, [r1, r8]
   14ed4:	add	r8, r8, #1
   14ed8:	cmp	r0, #0
   14edc:	bne	14ec8 <__assert_fail@plt+0x37e4>
   14ee0:	ldr	r7, [sp, #76]	; 0x4c
   14ee4:	mov	r0, r7
   14ee8:	bl	11534 <strlen@plt>
   14eec:	str	r7, [sp, #92]	; 0x5c
   14ef0:	mov	r7, r5
   14ef4:	ldr	ip, [fp, #-84]	; 0xffffffac
   14ef8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14efc:	str	r0, [fp, #-76]	; 0xffffffb4
   14f00:	mov	r2, #1
   14f04:	mov	r3, r4
   14f08:	mov	lr, r9
   14f0c:	b	14ff8 <__assert_fail@plt+0x3914>
   14f10:	mov	r0, #1
   14f14:	b	14f54 <__assert_fail@plt+0x3870>
   14f18:	tst	r4, #1
   14f1c:	bne	14f54 <__assert_fail@plt+0x3870>
   14f20:	mov	r2, r0
   14f24:	b	14f7c <__assert_fail@plt+0x3898>
   14f28:	mov	r7, #0
   14f2c:	mov	r8, #0
   14f30:	mov	r2, r0
   14f34:	b	14ff4 <__assert_fail@plt+0x3910>
   14f38:	mov	r0, #1
   14f3c:	mov	r8, #0
   14f40:	mov	r7, #5
   14f44:	b	14fb0 <__assert_fail@plt+0x38cc>
   14f48:	mov	r2, #1
   14f4c:	tst	r4, #1
   14f50:	beq	14f7c <__assert_fail@plt+0x3898>
   14f54:	mov	r1, #1
   14f58:	mov	r8, #0
   14f5c:	mov	r7, #2
   14f60:	mov	r2, r0
   14f64:	mov	r3, #1
   14f68:	str	r1, [fp, #-76]	; 0xffffffb4
   14f6c:	movw	r1, #43876	; 0xab64
   14f70:	movt	r1, #1
   14f74:	str	r1, [sp, #92]	; 0x5c
   14f78:	b	14ff8 <__assert_fail@plt+0x3914>
   14f7c:	cmp	sl, #0
   14f80:	mov	r8, #1
   14f84:	mov	r7, #2
   14f88:	movne	r0, #39	; 0x27
   14f8c:	strbne	r0, [r6]
   14f90:	movw	r0, #43876	; 0xab64
   14f94:	movt	r0, #1
   14f98:	b	14fe8 <__assert_fail@plt+0x3904>
   14f9c:	mov	r7, #5
   14fa0:	tst	r4, #1
   14fa4:	beq	14fcc <__assert_fail@plt+0x38e8>
   14fa8:	mov	r0, #1
   14fac:	mov	r8, #0
   14fb0:	str	r0, [fp, #-76]	; 0xffffffb4
   14fb4:	movw	r0, #43872	; 0xab60
   14fb8:	mov	r2, #1
   14fbc:	mov	r3, #1
   14fc0:	movt	r0, #1
   14fc4:	str	r0, [sp, #92]	; 0x5c
   14fc8:	b	14ff8 <__assert_fail@plt+0x3914>
   14fcc:	cmp	sl, #0
   14fd0:	mov	r8, #1
   14fd4:	mov	r2, #1
   14fd8:	movne	r0, #34	; 0x22
   14fdc:	strbne	r0, [r6]
   14fe0:	movw	r0, #43872	; 0xab60
   14fe4:	movt	r0, #1
   14fe8:	str	r0, [sp, #92]	; 0x5c
   14fec:	mov	r0, #1
   14ff0:	str	r0, [fp, #-76]	; 0xffffffb4
   14ff4:	mov	r3, #0
   14ff8:	ldr	r0, [fp, #16]
   14ffc:	str	r3, [fp, #-72]	; 0xffffffb8
   15000:	str	r7, [fp, #-64]	; 0xffffffc0
   15004:	str	r2, [sp, #84]	; 0x54
   15008:	cmp	r0, #0
   1500c:	movwne	r0, #1
   15010:	and	r0, r0, r3
   15014:	str	r0, [fp, #-88]	; 0xffffffa8
   15018:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1501c:	cmp	r0, #0
   15020:	movwne	r0, #1
   15024:	subs	r4, r7, #2
   15028:	mov	r7, #0
   1502c:	and	r1, r0, r3
   15030:	str	r4, [fp, #-80]	; 0xffffffb0
   15034:	and	r1, r2, r1
   15038:	str	r1, [sp, #48]	; 0x30
   1503c:	clz	r1, r4
   15040:	lsr	r1, r1, #5
   15044:	and	r1, r1, r3
   15048:	eor	r3, r3, #1
   1504c:	str	r1, [sp, #64]	; 0x40
   15050:	mov	r1, r4
   15054:	str	r3, [sp, #88]	; 0x58
   15058:	movwne	r1, #1
   1505c:	orr	r3, r1, r3
   15060:	and	r1, r1, r2
   15064:	and	r0, r0, r1
   15068:	str	r3, [sp, #68]	; 0x44
   1506c:	str	r1, [fp, #-68]	; 0xffffffbc
   15070:	str	r0, [fp, #-60]	; 0xffffffc4
   15074:	eor	r0, r2, #1
   15078:	str	r0, [sp, #52]	; 0x34
   1507c:	cmn	lr, #1
   15080:	beq	15090 <__assert_fail@plt+0x39ac>
   15084:	cmp	r7, lr
   15088:	bne	1509c <__assert_fail@plt+0x39b8>
   1508c:	b	15bc4 <__assert_fail@plt+0x44e0>
   15090:	ldrb	r0, [ip, r7]
   15094:	cmp	r0, #0
   15098:	beq	15bcc <__assert_fail@plt+0x44e8>
   1509c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   150a0:	mov	r9, #0
   150a4:	str	r5, [fp, #-48]	; 0xffffffd0
   150a8:	cmp	r0, #0
   150ac:	beq	150e0 <__assert_fail@plt+0x39fc>
   150b0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   150b4:	add	r4, r7, r0
   150b8:	cmp	r0, #2
   150bc:	bcc	150d8 <__assert_fail@plt+0x39f4>
   150c0:	cmn	lr, #1
   150c4:	bne	150d8 <__assert_fail@plt+0x39f4>
   150c8:	mov	r0, ip
   150cc:	bl	11534 <strlen@plt>
   150d0:	ldr	ip, [fp, #-84]	; 0xffffffac
   150d4:	mov	lr, r0
   150d8:	cmp	r4, lr
   150dc:	bls	150e8 <__assert_fail@plt+0x3a04>
   150e0:	mov	r0, #0
   150e4:	b	15128 <__assert_fail@plt+0x3a44>
   150e8:	ldr	r1, [sp, #92]	; 0x5c
   150ec:	ldr	r2, [fp, #-76]	; 0xffffffb4
   150f0:	add	r0, ip, r7
   150f4:	mov	r4, lr
   150f8:	bl	11408 <memcmp@plt>
   150fc:	ldr	r2, [sp, #88]	; 0x58
   15100:	cmp	r0, #0
   15104:	mov	r1, r0
   15108:	movwne	r1, #1
   1510c:	orr	r1, r1, r2
   15110:	tst	r1, #1
   15114:	beq	15c5c <__assert_fail@plt+0x4578>
   15118:	ldr	ip, [fp, #-84]	; 0xffffffac
   1511c:	clz	r0, r0
   15120:	mov	lr, r4
   15124:	lsr	r0, r0, #5
   15128:	str	r0, [fp, #-52]	; 0xffffffcc
   1512c:	ldrb	r5, [ip, r7]
   15130:	cmp	r5, #126	; 0x7e
   15134:	bhi	154ec <__assert_fail@plt+0x3e08>
   15138:	add	r3, pc, #16
   1513c:	mov	r4, #1
   15140:	mov	r2, #110	; 0x6e
   15144:	mov	r0, #97	; 0x61
   15148:	mov	r1, #0
   1514c:	ldr	pc, [r3, r5, lsl #2]
   15150:	andeq	r5, r1, r8, ror #7
   15154:	andeq	r5, r1, ip, ror #9
   15158:	andeq	r5, r1, ip, ror #9
   1515c:	andeq	r5, r1, ip, ror #9
   15160:	andeq	r5, r1, ip, ror #9
   15164:	andeq	r5, r1, ip, ror #9
   15168:	andeq	r5, r1, ip, ror #9
   1516c:	andeq	r5, r1, r0, lsr #11
   15170:	andeq	r5, r1, r8, asr #7
   15174:	andeq	r5, r1, r0, asr #7
   15178:	ldrdeq	r5, [r1], -r4
   1517c:	andeq	r5, r1, r4, asr r4
   15180:			; <UNDEFINED> instruction: 0x000153b8
   15184:	ldrdeq	r5, [r1], -r0
   15188:	andeq	r5, r1, ip, ror #9
   1518c:	andeq	r5, r1, ip, ror #9
   15190:	andeq	r5, r1, ip, ror #9
   15194:	andeq	r5, r1, ip, ror #9
   15198:	andeq	r5, r1, ip, ror #9
   1519c:	andeq	r5, r1, ip, ror #9
   151a0:	andeq	r5, r1, ip, ror #9
   151a4:	andeq	r5, r1, ip, ror #9
   151a8:	andeq	r5, r1, ip, ror #9
   151ac:	andeq	r5, r1, ip, ror #9
   151b0:	andeq	r5, r1, ip, ror #9
   151b4:	andeq	r5, r1, ip, ror #9
   151b8:	andeq	r5, r1, ip, ror #9
   151bc:	andeq	r5, r1, ip, ror #9
   151c0:	andeq	r5, r1, ip, ror #9
   151c4:	andeq	r5, r1, ip, ror #9
   151c8:	andeq	r5, r1, ip, ror #9
   151cc:	andeq	r5, r1, ip, ror #9
   151d0:	andeq	r5, r1, r8, asr r5
   151d4:	andeq	r5, r1, ip, asr r5
   151d8:	andeq	r5, r1, ip, asr r5
   151dc:	andeq	r5, r1, r0, ror #6
   151e0:	andeq	r5, r1, ip, asr r5
   151e4:	andeq	r5, r1, ip, asr #6
   151e8:	andeq	r5, r1, ip, asr r5
   151ec:	andeq	r5, r1, ip, asr r4
   151f0:	andeq	r5, r1, ip, asr r5
   151f4:	andeq	r5, r1, ip, asr r5
   151f8:	andeq	r5, r1, ip, asr r5
   151fc:	andeq	r5, r1, ip, asr #6
   15200:	andeq	r5, r1, ip, asr #6
   15204:	andeq	r5, r1, ip, asr #6
   15208:	andeq	r5, r1, ip, asr #6
   1520c:	andeq	r5, r1, ip, asr #6
   15210:	andeq	r5, r1, ip, asr #6
   15214:	andeq	r5, r1, ip, asr #6
   15218:	andeq	r5, r1, ip, asr #6
   1521c:	andeq	r5, r1, ip, asr #6
   15220:	andeq	r5, r1, ip, asr #6
   15224:	andeq	r5, r1, ip, asr #6
   15228:	andeq	r5, r1, ip, asr #6
   1522c:	andeq	r5, r1, ip, asr #6
   15230:	andeq	r5, r1, ip, asr #6
   15234:	andeq	r5, r1, ip, asr #6
   15238:	andeq	r5, r1, ip, asr #6
   1523c:	andeq	r5, r1, ip, asr r5
   15240:	andeq	r5, r1, ip, asr r5
   15244:	andeq	r5, r1, ip, asr r5
   15248:	andeq	r5, r1, ip, asr r5
   1524c:	andeq	r5, r1, r8, lsr #8
   15250:	andeq	r5, r1, ip, ror #9
   15254:	andeq	r5, r1, ip, asr #6
   15258:	andeq	r5, r1, ip, asr #6
   1525c:	andeq	r5, r1, ip, asr #6
   15260:	andeq	r5, r1, ip, asr #6
   15264:	andeq	r5, r1, ip, asr #6
   15268:	andeq	r5, r1, ip, asr #6
   1526c:	andeq	r5, r1, ip, asr #6
   15270:	andeq	r5, r1, ip, asr #6
   15274:	andeq	r5, r1, ip, asr #6
   15278:	andeq	r5, r1, ip, asr #6
   1527c:	andeq	r5, r1, ip, asr #6
   15280:	andeq	r5, r1, ip, asr #6
   15284:	andeq	r5, r1, ip, asr #6
   15288:	andeq	r5, r1, ip, asr #6
   1528c:	andeq	r5, r1, ip, asr #6
   15290:	andeq	r5, r1, ip, asr #6
   15294:	andeq	r5, r1, ip, asr #6
   15298:	andeq	r5, r1, ip, asr #6
   1529c:	andeq	r5, r1, ip, asr #6
   152a0:	andeq	r5, r1, ip, asr #6
   152a4:	andeq	r5, r1, ip, asr #6
   152a8:	andeq	r5, r1, ip, asr #6
   152ac:	andeq	r5, r1, ip, asr #6
   152b0:	andeq	r5, r1, ip, asr #6
   152b4:	andeq	r5, r1, ip, asr #6
   152b8:	andeq	r5, r1, ip, asr #6
   152bc:	andeq	r5, r1, ip, asr r5
   152c0:	muleq	r1, r4, r3
   152c4:	andeq	r5, r1, ip, asr #6
   152c8:	andeq	r5, r1, ip, asr r5
   152cc:	andeq	r5, r1, ip, asr #6
   152d0:	andeq	r5, r1, ip, asr r5
   152d4:	andeq	r5, r1, ip, asr #6
   152d8:	andeq	r5, r1, ip, asr #6
   152dc:	andeq	r5, r1, ip, asr #6
   152e0:	andeq	r5, r1, ip, asr #6
   152e4:	andeq	r5, r1, ip, asr #6
   152e8:	andeq	r5, r1, ip, asr #6
   152ec:	andeq	r5, r1, ip, asr #6
   152f0:	andeq	r5, r1, ip, asr #6
   152f4:	andeq	r5, r1, ip, asr #6
   152f8:	andeq	r5, r1, ip, asr #6
   152fc:	andeq	r5, r1, ip, asr #6
   15300:	andeq	r5, r1, ip, asr #6
   15304:	andeq	r5, r1, ip, asr #6
   15308:	andeq	r5, r1, ip, asr #6
   1530c:	andeq	r5, r1, ip, asr #6
   15310:	andeq	r5, r1, ip, asr #6
   15314:	andeq	r5, r1, ip, asr #6
   15318:	andeq	r5, r1, ip, asr #6
   1531c:	andeq	r5, r1, ip, asr #6
   15320:	andeq	r5, r1, ip, asr #6
   15324:	andeq	r5, r1, ip, asr #6
   15328:	andeq	r5, r1, ip, asr #6
   1532c:	andeq	r5, r1, ip, asr #6
   15330:	andeq	r5, r1, ip, asr #6
   15334:	andeq	r5, r1, ip, asr #6
   15338:	andeq	r5, r1, ip, asr #6
   1533c:	andeq	r5, r1, r4, ror r3
   15340:	andeq	r5, r1, ip, asr r5
   15344:	andeq	r5, r1, r4, ror r3
   15348:	andeq	r5, r1, r0, ror #6
   1534c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15350:	cmp	r0, #0
   15354:	beq	155b4 <__assert_fail@plt+0x3ed0>
   15358:	ldr	r0, [fp, #16]
   1535c:	b	155b8 <__assert_fail@plt+0x3ed4>
   15360:	mov	r4, #0
   15364:	cmp	r7, #0
   15368:	beq	15558 <__assert_fail@plt+0x3e74>
   1536c:	mov	r9, #0
   15370:	b	1534c <__assert_fail@plt+0x3c68>
   15374:	mov	r4, #0
   15378:	cmn	lr, #1
   1537c:	beq	1553c <__assert_fail@plt+0x3e58>
   15380:	cmp	r7, #0
   15384:	bne	1536c <__assert_fail@plt+0x3c88>
   15388:	cmp	lr, #1
   1538c:	beq	15558 <__assert_fail@plt+0x3e74>
   15390:	b	1536c <__assert_fail@plt+0x3c88>
   15394:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15398:	cmp	r0, #2
   1539c:	bne	1557c <__assert_fail@plt+0x3e98>
   153a0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   153a4:	tst	r0, #1
   153a8:	bne	15c78 <__assert_fail@plt+0x4594>
   153ac:	mov	r9, #0
   153b0:	mov	r0, #92	; 0x5c
   153b4:	b	15590 <__assert_fail@plt+0x3eac>
   153b8:	mov	r0, #102	; 0x66
   153bc:	b	155a0 <__assert_fail@plt+0x3ebc>
   153c0:	mov	r2, #116	; 0x74
   153c4:	b	153d4 <__assert_fail@plt+0x3cf0>
   153c8:	mov	r0, #98	; 0x62
   153cc:	b	155a0 <__assert_fail@plt+0x3ebc>
   153d0:	mov	r2, #114	; 0x72
   153d4:	ldr	r0, [sp, #68]	; 0x44
   153d8:	tst	r0, #1
   153dc:	mov	r0, r2
   153e0:	bne	155a0 <__assert_fail@plt+0x3ebc>
   153e4:	b	15c78 <__assert_fail@plt+0x4594>
   153e8:	ldr	r0, [sp, #84]	; 0x54
   153ec:	tst	r0, #1
   153f0:	beq	15690 <__assert_fail@plt+0x3fac>
   153f4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   153f8:	tst	r0, #1
   153fc:	bne	15d88 <__assert_fail@plt+0x46a4>
   15400:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15404:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15408:	cmp	r0, #2
   1540c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   15410:	movwne	r0, #1
   15414:	orr	r0, r0, r2
   15418:	tst	r0, #1
   1541c:	beq	15a60 <__assert_fail@plt+0x437c>
   15420:	mov	r0, r8
   15424:	b	15a94 <__assert_fail@plt+0x43b0>
   15428:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1542c:	mov	r9, #0
   15430:	mov	r5, #63	; 0x3f
   15434:	cmp	r0, #5
   15438:	beq	15844 <__assert_fail@plt+0x4160>
   1543c:	cmp	r0, #2
   15440:	bne	158e8 <__assert_fail@plt+0x4204>
   15444:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15448:	tst	r0, #1
   1544c:	beq	158ec <__assert_fail@plt+0x4208>
   15450:	b	15c78 <__assert_fail@plt+0x4594>
   15454:	mov	r0, #118	; 0x76
   15458:	b	155a0 <__assert_fail@plt+0x3ebc>
   1545c:	mov	r0, #1
   15460:	mov	r5, #39	; 0x27
   15464:	str	r0, [sp, #60]	; 0x3c
   15468:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1546c:	cmp	r0, #2
   15470:	bne	154e4 <__assert_fail@plt+0x3e00>
   15474:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15478:	tst	r0, #1
   1547c:	bne	15c78 <__assert_fail@plt+0x4594>
   15480:	ldr	r2, [sp, #56]	; 0x38
   15484:	clz	r1, sl
   15488:	mov	r9, #0
   1548c:	lsr	r1, r1, #5
   15490:	cmp	r2, #0
   15494:	mov	r0, r2
   15498:	movwne	r0, #1
   1549c:	orrs	r0, r0, r1
   154a0:	moveq	r2, sl
   154a4:	moveq	sl, r0
   154a8:	cmp	r8, sl
   154ac:	str	r2, [sp, #56]	; 0x38
   154b0:	movcc	r0, #39	; 0x27
   154b4:	strbcc	r0, [r6, r8]
   154b8:	add	r0, r8, #1
   154bc:	cmp	r0, sl
   154c0:	movcc	r1, #92	; 0x5c
   154c4:	strbcc	r1, [r6, r0]
   154c8:	add	r0, r8, #2
   154cc:	add	r8, r8, #3
   154d0:	cmp	r0, sl
   154d4:	movcc	r1, #39	; 0x27
   154d8:	strbcc	r1, [r6, r0]
   154dc:	mov	r0, #0
   154e0:	str	r0, [fp, #-56]	; 0xffffffc8
   154e4:	mov	r4, #1
   154e8:	b	1534c <__assert_fail@plt+0x3c68>
   154ec:	ldr	r0, [sp, #40]	; 0x28
   154f0:	cmp	r0, #1
   154f4:	bne	156bc <__assert_fail@plt+0x3fd8>
   154f8:	str	lr, [sp, #28]
   154fc:	bl	1151c <__ctype_b_loc@plt>
   15500:	ldr	r0, [r0]
   15504:	ldr	ip, [fp, #-84]	; 0xffffffac
   15508:	mov	r1, #1
   1550c:	add	r0, r0, r5, lsl #1
   15510:	ldrb	r0, [r0, #1]
   15514:	ubfx	r4, r0, #6, #1
   15518:	ldr	r0, [sp, #52]	; 0x34
   1551c:	mov	r2, r1
   15520:	cmp	r1, #1
   15524:	orr	r0, r4, r0
   15528:	bhi	158f4 <__assert_fail@plt+0x4210>
   1552c:	tst	r0, #1
   15530:	beq	158f4 <__assert_fail@plt+0x4210>
   15534:	ldr	lr, [sp, #28]
   15538:	b	1534c <__assert_fail@plt+0x3c68>
   1553c:	cmp	r7, #0
   15540:	ldrbeq	r0, [ip, #1]
   15544:	cmpeq	r0, #0
   15548:	beq	15558 <__assert_fail@plt+0x3e74>
   1554c:	mvn	lr, #0
   15550:	mov	r9, #0
   15554:	b	1534c <__assert_fail@plt+0x3c68>
   15558:	mov	r1, #1
   1555c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15560:	cmp	r0, #2
   15564:	bne	15574 <__assert_fail@plt+0x3e90>
   15568:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1556c:	tst	r0, #1
   15570:	bne	15c78 <__assert_fail@plt+0x4594>
   15574:	mov	r4, r1
   15578:	b	1534c <__assert_fail@plt+0x3c68>
   1557c:	ldr	r1, [sp, #48]	; 0x30
   15580:	mov	r9, #0
   15584:	mov	r0, #92	; 0x5c
   15588:	cmp	r1, #0
   1558c:	beq	155a0 <__assert_fail@plt+0x3ebc>
   15590:	mov	r4, #0
   15594:	cmp	r9, #0
   15598:	beq	15b2c <__assert_fail@plt+0x4448>
   1559c:	b	15b68 <__assert_fail@plt+0x4484>
   155a0:	ldr	r1, [sp, #84]	; 0x54
   155a4:	mov	r4, #0
   155a8:	mov	r9, #0
   155ac:	tst	r1, #1
   155b0:	bne	155f0 <__assert_fail@plt+0x3f0c>
   155b4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   155b8:	cmp	r0, #0
   155bc:	mov	r0, r5
   155c0:	beq	155e4 <__assert_fail@plt+0x3f00>
   155c4:	ldr	r1, [fp, #16]
   155c8:	ubfx	r0, r5, #5, #3
   155cc:	mov	r2, #1
   155d0:	ldr	r0, [r1, r0, lsl #2]
   155d4:	and	r1, r5, #31
   155d8:	tst	r0, r2, lsl r1
   155dc:	mov	r0, r5
   155e0:	bne	155f0 <__assert_fail@plt+0x3f0c>
   155e4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   155e8:	cmp	r1, #0
   155ec:	beq	15b24 <__assert_fail@plt+0x4440>
   155f0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   155f4:	tst	r1, #1
   155f8:	bne	15c50 <__assert_fail@plt+0x456c>
   155fc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15600:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15604:	cmp	r1, #2
   15608:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1560c:	movwne	r1, #1
   15610:	orr	r1, r1, r2
   15614:	tst	r1, #1
   15618:	beq	15624 <__assert_fail@plt+0x3f40>
   1561c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   15620:	b	15660 <__assert_fail@plt+0x3f7c>
   15624:	cmp	r8, sl
   15628:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1562c:	movcc	r1, #39	; 0x27
   15630:	strbcc	r1, [r6, r8]
   15634:	add	r1, r8, #1
   15638:	cmp	r1, sl
   1563c:	movcc	r2, #36	; 0x24
   15640:	strbcc	r2, [r6, r1]
   15644:	add	r1, r8, #2
   15648:	add	r8, r8, #3
   1564c:	cmp	r1, sl
   15650:	movcc	r2, #39	; 0x27
   15654:	strbcc	r2, [r6, r1]
   15658:	mov	r1, #1
   1565c:	str	r1, [fp, #-56]	; 0xffffffc8
   15660:	cmp	r8, sl
   15664:	movcc	r1, #92	; 0x5c
   15668:	strbcc	r1, [r6, r8]
   1566c:	add	r8, r8, #1
   15670:	cmp	r8, sl
   15674:	and	r5, r5, r4
   15678:	add	r7, r7, #1
   1567c:	strbcc	r0, [r6, r8]
   15680:	add	r8, r8, #1
   15684:	cmn	lr, #1
   15688:	bne	15084 <__assert_fail@plt+0x39a0>
   1568c:	b	15090 <__assert_fail@plt+0x39ac>
   15690:	ldr	r0, [sp, #36]	; 0x24
   15694:	mov	r4, #0
   15698:	mov	r9, #0
   1569c:	mov	r5, #0
   156a0:	cmp	r0, #0
   156a4:	beq	155b4 <__assert_fail@plt+0x3ed0>
   156a8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   156ac:	add	r7, r7, #1
   156b0:	cmn	lr, #1
   156b4:	bne	15084 <__assert_fail@plt+0x39a0>
   156b8:	b	15090 <__assert_fail@plt+0x39ac>
   156bc:	mov	r0, #0
   156c0:	cmn	lr, #1
   156c4:	str	r0, [fp, #-36]	; 0xffffffdc
   156c8:	str	r0, [fp, #-40]	; 0xffffffd8
   156cc:	bne	156e0 <__assert_fail@plt+0x3ffc>
   156d0:	mov	r0, ip
   156d4:	bl	11534 <strlen@plt>
   156d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   156dc:	mov	lr, r0
   156e0:	add	r0, ip, r7
   156e4:	mov	r4, #1
   156e8:	mov	r6, #0
   156ec:	str	lr, [sp, #28]
   156f0:	str	r0, [sp, #24]
   156f4:	sub	r0, fp, #40	; 0x28
   156f8:	mov	r3, r0
   156fc:	str	r6, [sp, #44]	; 0x2c
   15700:	add	r6, r6, r7
   15704:	sub	r0, fp, #44	; 0x2c
   15708:	add	r1, ip, r6
   1570c:	sub	r2, lr, r6
   15710:	bl	193b8 <__assert_fail@plt+0x7cd4>
   15714:	cmp	r0, #0
   15718:	beq	15bb0 <__assert_fail@plt+0x44cc>
   1571c:	cmn	r0, #1
   15720:	beq	15b70 <__assert_fail@plt+0x448c>
   15724:	ldr	lr, [sp, #28]
   15728:	cmn	r0, #2
   1572c:	beq	15b78 <__assert_fail@plt+0x4494>
   15730:	ldr	r2, [sp, #64]	; 0x40
   15734:	cmp	r0, #2
   15738:	mov	r1, #0
   1573c:	movwcc	r1, #1
   15740:	eor	r2, r2, #1
   15744:	orrs	r1, r2, r1
   15748:	bne	15808 <__assert_fail@plt+0x4124>
   1574c:	ldr	r1, [sp, #44]	; 0x2c
   15750:	ldr	r2, [sp, #24]
   15754:	add	r1, r2, r1
   15758:	mov	r2, #1
   1575c:	ldrb	r3, [r1, r2]
   15760:	sub	r3, r3, #91	; 0x5b
   15764:	cmp	r3, #33	; 0x21
   15768:	bhi	157fc <__assert_fail@plt+0x4118>
   1576c:	add	r6, pc, #0
   15770:	ldr	pc, [r6, r3, lsl #2]
   15774:	andeq	r5, r1, r0, ror ip
   15778:	andeq	r5, r1, r0, ror ip
   1577c:	strdeq	r5, [r1], -ip
   15780:	andeq	r5, r1, r0, ror ip
   15784:	strdeq	r5, [r1], -ip
   15788:	andeq	r5, r1, r0, ror ip
   1578c:	strdeq	r5, [r1], -ip
   15790:	strdeq	r5, [r1], -ip
   15794:	strdeq	r5, [r1], -ip
   15798:	strdeq	r5, [r1], -ip
   1579c:	strdeq	r5, [r1], -ip
   157a0:	strdeq	r5, [r1], -ip
   157a4:	strdeq	r5, [r1], -ip
   157a8:	strdeq	r5, [r1], -ip
   157ac:	strdeq	r5, [r1], -ip
   157b0:	strdeq	r5, [r1], -ip
   157b4:	strdeq	r5, [r1], -ip
   157b8:	strdeq	r5, [r1], -ip
   157bc:	strdeq	r5, [r1], -ip
   157c0:	strdeq	r5, [r1], -ip
   157c4:	strdeq	r5, [r1], -ip
   157c8:	strdeq	r5, [r1], -ip
   157cc:	strdeq	r5, [r1], -ip
   157d0:	strdeq	r5, [r1], -ip
   157d4:	strdeq	r5, [r1], -ip
   157d8:	strdeq	r5, [r1], -ip
   157dc:	strdeq	r5, [r1], -ip
   157e0:	strdeq	r5, [r1], -ip
   157e4:	strdeq	r5, [r1], -ip
   157e8:	strdeq	r5, [r1], -ip
   157ec:	strdeq	r5, [r1], -ip
   157f0:	strdeq	r5, [r1], -ip
   157f4:	strdeq	r5, [r1], -ip
   157f8:	andeq	r5, r1, r0, ror ip
   157fc:	add	r2, r2, #1
   15800:	cmp	r2, r0
   15804:	bcc	1575c <__assert_fail@plt+0x4078>
   15808:	ldr	r6, [sp, #44]	; 0x2c
   1580c:	add	r6, r0, r6
   15810:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15814:	bl	11450 <iswprint@plt>
   15818:	cmp	r0, #0
   1581c:	movwne	r0, #1
   15820:	and	r4, r4, r0
   15824:	sub	r0, fp, #40	; 0x28
   15828:	bl	113e4 <mbsinit@plt>
   1582c:	ldr	lr, [sp, #28]
   15830:	ldr	ip, [fp, #-84]	; 0xffffffac
   15834:	sub	r3, fp, #40	; 0x28
   15838:	cmp	r0, #0
   1583c:	beq	156fc <__assert_fail@plt+0x4018>
   15840:	b	15bb8 <__assert_fail@plt+0x44d4>
   15844:	ldr	r0, [sp, #32]
   15848:	cmp	r0, #0
   1584c:	beq	158e8 <__assert_fail@plt+0x4204>
   15850:	add	r0, r7, #2
   15854:	cmp	r0, lr
   15858:	bcs	158e8 <__assert_fail@plt+0x4204>
   1585c:	add	r1, ip, r7
   15860:	ldrb	r1, [r1, #1]
   15864:	cmp	r1, #63	; 0x3f
   15868:	bne	158e8 <__assert_fail@plt+0x4204>
   1586c:	ldrb	r5, [ip, r0]
   15870:	sub	r1, r5, #33	; 0x21
   15874:	cmp	r1, #29
   15878:	bhi	158e8 <__assert_fail@plt+0x4204>
   1587c:	movw	r3, #20929	; 0x51c1
   15880:	mov	r2, #1
   15884:	movt	r3, #14336	; 0x3800
   15888:	tst	r3, r2, lsl r1
   1588c:	beq	158e8 <__assert_fail@plt+0x4204>
   15890:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15894:	tst	r1, #1
   15898:	bne	15d90 <__assert_fail@plt+0x46ac>
   1589c:	cmp	r8, sl
   158a0:	mov	r7, r0
   158a4:	mov	r4, #0
   158a8:	movcc	r1, #63	; 0x3f
   158ac:	strbcc	r1, [r6, r8]
   158b0:	add	r1, r8, #1
   158b4:	cmp	r1, sl
   158b8:	movcc	r2, #34	; 0x22
   158bc:	strbcc	r2, [r6, r1]
   158c0:	add	r1, r8, #2
   158c4:	cmp	r1, sl
   158c8:	movcc	r2, #34	; 0x22
   158cc:	strbcc	r2, [r6, r1]
   158d0:	add	r1, r8, #3
   158d4:	add	r8, r8, #4
   158d8:	cmp	r1, sl
   158dc:	movcc	r2, #63	; 0x3f
   158e0:	strbcc	r2, [r6, r1]
   158e4:	b	1534c <__assert_fail@plt+0x3c68>
   158e8:	mov	r5, #63	; 0x3f
   158ec:	mov	r4, #0
   158f0:	b	1534c <__assert_fail@plt+0x3c68>
   158f4:	add	r1, r2, r7
   158f8:	ldr	lr, [sp, #28]
   158fc:	mov	r3, #0
   15900:	str	r1, [sp, #44]	; 0x2c
   15904:	add	r1, r7, #1
   15908:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1590c:	tst	r0, #1
   15910:	bne	159e4 <__assert_fail@plt+0x4300>
   15914:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15918:	tst	r2, #1
   1591c:	bne	15cd8 <__assert_fail@plt+0x45f4>
   15920:	ldr	r3, [fp, #-80]	; 0xffffffb0
   15924:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15928:	cmp	r7, #2
   1592c:	movwne	r3, #1
   15930:	orr	r3, r3, r2
   15934:	tst	r3, #1
   15938:	bne	15974 <__assert_fail@plt+0x4290>
   1593c:	cmp	r8, sl
   15940:	add	r3, r8, #1
   15944:	movcc	r2, #39	; 0x27
   15948:	strbcc	r2, [r6, r8]
   1594c:	cmp	r3, sl
   15950:	movcc	r2, #36	; 0x24
   15954:	strbcc	r2, [r6, r3]
   15958:	add	r3, r8, #2
   1595c:	add	r8, r8, #3
   15960:	cmp	r3, sl
   15964:	movcc	r2, #39	; 0x27
   15968:	strbcc	r2, [r6, r3]
   1596c:	mov	r2, #1
   15970:	str	r2, [fp, #-56]	; 0xffffffc8
   15974:	cmp	r8, sl
   15978:	movcc	r3, #92	; 0x5c
   1597c:	strbcc	r3, [r6, r8]
   15980:	add	r3, r8, #1
   15984:	cmp	r3, sl
   15988:	andcc	r7, r5, #192	; 0xc0
   1598c:	movcc	r2, #48	; 0x30
   15990:	orrcc	r7, r2, r7, lsr #6
   15994:	strbcc	r7, [r6, r3]
   15998:	add	r3, r8, #2
   1599c:	add	r8, r8, #3
   159a0:	cmp	r3, sl
   159a4:	lsrcc	r7, r5, #3
   159a8:	movcc	r2, #6
   159ac:	bficc	r7, r2, #3, #29
   159b0:	mov	r2, #6
   159b4:	strbcc	r7, [r6, r3]
   159b8:	bfi	r5, r2, #3, #29
   159bc:	mov	r3, #1
   159c0:	b	15a08 <__assert_fail@plt+0x4324>
   159c4:	cmp	r8, sl
   159c8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   159cc:	strbcc	r5, [r6, r8]
   159d0:	add	r8, r8, #1
   159d4:	ldrb	r5, [ip, r1]
   159d8:	add	r1, r1, #1
   159dc:	tst	r0, #1
   159e0:	beq	15914 <__assert_fail@plt+0x4230>
   159e4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   159e8:	tst	r2, #1
   159ec:	beq	15a00 <__assert_fail@plt+0x431c>
   159f0:	cmp	r8, sl
   159f4:	movcc	r7, #92	; 0x5c
   159f8:	strbcc	r7, [r6, r8]
   159fc:	add	r8, r8, #1
   15a00:	mov	r2, #0
   15a04:	str	r2, [fp, #-52]	; 0xffffffcc
   15a08:	ldr	r2, [sp, #44]	; 0x2c
   15a0c:	and	r9, r3, #1
   15a10:	cmp	r2, r1
   15a14:	bls	15b14 <__assert_fail@plt+0x4430>
   15a18:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15a1c:	cmp	r9, #0
   15a20:	movwne	r9, #1
   15a24:	mvn	r7, r2
   15a28:	orr	r7, r7, r9
   15a2c:	tst	r7, #1
   15a30:	bne	159c4 <__assert_fail@plt+0x42e0>
   15a34:	cmp	r8, sl
   15a38:	movcc	r7, #39	; 0x27
   15a3c:	strbcc	r7, [r6, r8]
   15a40:	add	r7, r8, #1
   15a44:	add	r8, r8, #2
   15a48:	cmp	r7, sl
   15a4c:	movcc	r2, #39	; 0x27
   15a50:	strbcc	r2, [r6, r7]
   15a54:	mov	r2, #0
   15a58:	str	r2, [fp, #-56]	; 0xffffffc8
   15a5c:	b	159c4 <__assert_fail@plt+0x42e0>
   15a60:	cmp	r8, sl
   15a64:	mov	r2, #1
   15a68:	movcc	r0, #39	; 0x27
   15a6c:	strbcc	r0, [r6, r8]
   15a70:	add	r0, r8, #1
   15a74:	cmp	r0, sl
   15a78:	movcc	r1, #36	; 0x24
   15a7c:	strbcc	r1, [r6, r0]
   15a80:	add	r0, r8, #2
   15a84:	cmp	r0, sl
   15a88:	movcc	r1, #39	; 0x27
   15a8c:	strbcc	r1, [r6, r0]
   15a90:	add	r0, r8, #3
   15a94:	cmp	r0, sl
   15a98:	add	r8, r0, #1
   15a9c:	str	r2, [fp, #-56]	; 0xffffffc8
   15aa0:	movcc	r1, #92	; 0x5c
   15aa4:	strbcc	r1, [r6, r0]
   15aa8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15aac:	cmp	r1, #2
   15ab0:	beq	15b04 <__assert_fail@plt+0x4420>
   15ab4:	add	r1, r7, #1
   15ab8:	mov	r4, #0
   15abc:	mov	r9, #1
   15ac0:	mov	r5, #48	; 0x30
   15ac4:	cmp	r1, lr
   15ac8:	bcs	1534c <__assert_fail@plt+0x3c68>
   15acc:	ldrb	r1, [ip, r1]
   15ad0:	sub	r1, r1, #48	; 0x30
   15ad4:	uxtb	r1, r1
   15ad8:	cmp	r1, #9
   15adc:	bhi	1534c <__assert_fail@plt+0x3c68>
   15ae0:	cmp	r8, sl
   15ae4:	movcc	r1, #48	; 0x30
   15ae8:	strbcc	r1, [r6, r8]
   15aec:	add	r1, r0, #2
   15af0:	add	r8, r0, #3
   15af4:	cmp	r1, sl
   15af8:	movcc	r2, #48	; 0x30
   15afc:	strbcc	r2, [r6, r1]
   15b00:	b	1534c <__assert_fail@plt+0x3c68>
   15b04:	mov	r0, #48	; 0x30
   15b08:	mov	r9, #1
   15b0c:	mov	r4, #0
   15b10:	b	155e4 <__assert_fail@plt+0x3f00>
   15b14:	cmp	r9, #0
   15b18:	sub	r7, r1, #1
   15b1c:	mov	r0, r5
   15b20:	movwne	r9, #1
   15b24:	cmp	r9, #0
   15b28:	bne	15b68 <__assert_fail@plt+0x4484>
   15b2c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15b30:	tst	r1, #1
   15b34:	beq	15b68 <__assert_fail@plt+0x4484>
   15b38:	cmp	r8, sl
   15b3c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   15b40:	movcc	r1, #39	; 0x27
   15b44:	strbcc	r1, [r6, r8]
   15b48:	add	r1, r8, #1
   15b4c:	add	r8, r8, #2
   15b50:	cmp	r1, sl
   15b54:	movcc	r2, #39	; 0x27
   15b58:	strbcc	r2, [r6, r1]
   15b5c:	mov	r1, #0
   15b60:	str	r1, [fp, #-56]	; 0xffffffc8
   15b64:	b	15670 <__assert_fail@plt+0x3f8c>
   15b68:	ldr	r5, [fp, #-48]	; 0xffffffd0
   15b6c:	b	15670 <__assert_fail@plt+0x3f8c>
   15b70:	mov	r4, #0
   15b74:	b	15bb0 <__assert_fail@plt+0x44cc>
   15b78:	mov	r4, #0
   15b7c:	cmp	lr, r6
   15b80:	bls	15bb0 <__assert_fail@plt+0x44cc>
   15b84:	ldr	ip, [fp, #-84]	; 0xffffffac
   15b88:	ldr	r6, [sp, #44]	; 0x2c
   15b8c:	ldr	r0, [sp, #24]
   15b90:	ldrb	r0, [r0, r6]
   15b94:	cmp	r0, #0
   15b98:	beq	15bb8 <__assert_fail@plt+0x44d4>
   15b9c:	add	r6, r6, #1
   15ba0:	add	r0, r7, r6
   15ba4:	cmp	r0, lr
   15ba8:	bcc	15b8c <__assert_fail@plt+0x44a8>
   15bac:	b	15bb8 <__assert_fail@plt+0x44d4>
   15bb0:	ldr	ip, [fp, #-84]	; 0xffffffac
   15bb4:	ldr	r6, [sp, #44]	; 0x2c
   15bb8:	mov	r1, r6
   15bbc:	ldr	r6, [sp, #80]	; 0x50
   15bc0:	b	15518 <__assert_fail@plt+0x3e34>
   15bc4:	mov	lr, r7
   15bc8:	b	15bd0 <__assert_fail@plt+0x44ec>
   15bcc:	mvn	lr, #0
   15bd0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15bd4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15bd8:	eor	r0, r7, #2
   15bdc:	orr	r0, r0, r8
   15be0:	clz	r0, r0
   15be4:	lsr	r0, r0, #5
   15be8:	tst	r1, r0
   15bec:	bne	15c78 <__assert_fail@plt+0x4594>
   15bf0:	mov	r0, r1
   15bf4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   15bf8:	cmp	r7, #2
   15bfc:	movwne	r1, #1
   15c00:	orr	r0, r0, r1
   15c04:	tst	r0, #1
   15c08:	ldreq	r0, [sp, #60]	; 0x3c
   15c0c:	eoreq	r0, r0, #1
   15c10:	tsteq	r0, #1
   15c14:	bne	15d24 <__assert_fail@plt+0x4640>
   15c18:	mov	r9, lr
   15c1c:	tst	r5, #1
   15c20:	bne	15ce0 <__assert_fail@plt+0x45fc>
   15c24:	ldr	r6, [sp, #56]	; 0x38
   15c28:	mov	r4, #0
   15c2c:	cmp	r6, #0
   15c30:	beq	15d1c <__assert_fail@plt+0x4638>
   15c34:	ldr	r0, [sp, #84]	; 0x54
   15c38:	mov	r1, #0
   15c3c:	cmp	sl, #0
   15c40:	mov	r5, #0
   15c44:	str	r1, [fp, #-72]	; 0xffffffb8
   15c48:	beq	14e18 <__assert_fail@plt+0x3734>
   15c4c:	b	15d24 <__assert_fail@plt+0x4640>
   15c50:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15c54:	ldr	r2, [sp, #84]	; 0x54
   15c58:	b	15c80 <__assert_fail@plt+0x459c>
   15c5c:	ldr	ip, [fp, #-84]	; 0xffffffac
   15c60:	mov	r2, #1
   15c64:	mov	lr, r4
   15c68:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15c6c:	b	15c80 <__assert_fail@plt+0x459c>
   15c70:	ldr	r6, [sp, #80]	; 0x50
   15c74:	ldr	ip, [fp, #-84]	; 0xffffffac
   15c78:	ldr	r2, [sp, #84]	; 0x54
   15c7c:	mov	r7, #2
   15c80:	mov	r0, #0
   15c84:	ldr	r1, [fp, #12]
   15c88:	tst	r2, #1
   15c8c:	mov	r2, r7
   15c90:	mov	r3, lr
   15c94:	str	r0, [sp, #8]
   15c98:	ldr	r0, [sp, #72]	; 0x48
   15c9c:	movwne	r2, #4
   15ca0:	cmp	r7, #2
   15ca4:	movne	r2, r7
   15ca8:	str	r2, [sp]
   15cac:	mov	r2, ip
   15cb0:	bic	r1, r1, #2
   15cb4:	str	r0, [sp, #12]
   15cb8:	ldr	r0, [sp, #76]	; 0x4c
   15cbc:	str	r1, [sp, #4]
   15cc0:	mov	r1, sl
   15cc4:	str	r0, [sp, #16]
   15cc8:	mov	r0, r6
   15ccc:	bl	14d98 <__assert_fail@plt+0x36b4>
   15cd0:	mov	r8, r0
   15cd4:	b	15d7c <__assert_fail@plt+0x4698>
   15cd8:	ldr	r2, [sp, #84]	; 0x54
   15cdc:	b	15c80 <__assert_fail@plt+0x459c>
   15ce0:	mov	r0, #5
   15ce4:	ldr	r1, [sp, #56]	; 0x38
   15ce8:	ldr	r2, [fp, #-84]	; 0xffffffac
   15cec:	mov	r3, r9
   15cf0:	str	r0, [sp]
   15cf4:	ldr	r0, [fp, #12]
   15cf8:	str	r0, [sp, #4]
   15cfc:	ldr	r0, [fp, #16]
   15d00:	str	r0, [sp, #8]
   15d04:	ldr	r0, [sp, #72]	; 0x48
   15d08:	str	r0, [sp, #12]
   15d0c:	ldr	r0, [sp, #76]	; 0x4c
   15d10:	str	r0, [sp, #16]
   15d14:	ldr	r0, [sp, #80]	; 0x50
   15d18:	b	15ccc <__assert_fail@plt+0x45e8>
   15d1c:	mov	r0, #0
   15d20:	str	r0, [fp, #-72]	; 0xffffffb8
   15d24:	ldr	r1, [sp, #92]	; 0x5c
   15d28:	cmp	r1, #0
   15d2c:	beq	15d6c <__assert_fail@plt+0x4688>
   15d30:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15d34:	ldr	r2, [sp, #80]	; 0x50
   15d38:	tst	r0, #1
   15d3c:	bne	15d70 <__assert_fail@plt+0x468c>
   15d40:	ldrb	r0, [r1]
   15d44:	cmp	r0, #0
   15d48:	beq	15d70 <__assert_fail@plt+0x468c>
   15d4c:	add	r1, r1, #1
   15d50:	cmp	r8, sl
   15d54:	strbcc	r0, [r2, r8]
   15d58:	add	r8, r8, #1
   15d5c:	ldrb	r0, [r1], #1
   15d60:	cmp	r0, #0
   15d64:	bne	15d50 <__assert_fail@plt+0x466c>
   15d68:	b	15d70 <__assert_fail@plt+0x468c>
   15d6c:	ldr	r2, [sp, #80]	; 0x50
   15d70:	cmp	r8, sl
   15d74:	movcc	r0, #0
   15d78:	strbcc	r0, [r2, r8]
   15d7c:	mov	r0, r8
   15d80:	sub	sp, fp, #28
   15d84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d88:	mov	r2, #1
   15d8c:	b	15c68 <__assert_fail@plt+0x4584>
   15d90:	ldr	r2, [sp, #84]	; 0x54
   15d94:	mov	r7, #5
   15d98:	b	15c80 <__assert_fail@plt+0x459c>
   15d9c:	bl	116cc <abort@plt>
   15da0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15da4:	add	fp, sp, #28
   15da8:	sub	sp, sp, #28
   15dac:	movw	r5, #49624	; 0xc1d8
   15db0:	cmp	r2, #0
   15db4:	mov	r4, r1
   15db8:	mov	r7, r0
   15dbc:	str	r0, [sp, #20]
   15dc0:	movt	r5, #2
   15dc4:	movne	r5, r2
   15dc8:	bl	11558 <__errno_location@plt>
   15dcc:	mov	sl, r0
   15dd0:	ldm	r5, {r0, r1}
   15dd4:	ldr	r2, [r5, #40]	; 0x28
   15dd8:	ldr	r3, [r5, #44]	; 0x2c
   15ddc:	add	r9, r5, #8
   15de0:	ldr	r6, [sl]
   15de4:	orr	r8, r1, #1
   15de8:	mov	r1, #0
   15dec:	str	r6, [sp, #24]
   15df0:	stm	sp, {r0, r8, r9}
   15df4:	str	r2, [sp, #12]
   15df8:	str	r3, [sp, #16]
   15dfc:	mov	r0, #0
   15e00:	mov	r2, r7
   15e04:	mov	r3, r4
   15e08:	mov	r6, r4
   15e0c:	bl	14d98 <__assert_fail@plt+0x36b4>
   15e10:	add	r7, r0, #1
   15e14:	mov	r0, r7
   15e18:	bl	17cc4 <__assert_fail@plt+0x65e0>
   15e1c:	mov	r4, r0
   15e20:	ldr	r0, [r5]
   15e24:	ldr	r2, [r5, #44]	; 0x2c
   15e28:	ldr	r1, [r5, #40]	; 0x28
   15e2c:	mov	r3, r6
   15e30:	stm	sp, {r0, r8, r9}
   15e34:	str	r2, [sp, #16]
   15e38:	str	r1, [sp, #12]
   15e3c:	mov	r0, r4
   15e40:	mov	r1, r7
   15e44:	ldr	r2, [sp, #20]
   15e48:	bl	14d98 <__assert_fail@plt+0x36b4>
   15e4c:	ldr	r0, [sp, #24]
   15e50:	str	r0, [sl]
   15e54:	mov	r0, r4
   15e58:	sub	sp, fp, #28
   15e5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e64:	add	fp, sp, #28
   15e68:	sub	sp, sp, #36	; 0x24
   15e6c:	movw	r8, #49624	; 0xc1d8
   15e70:	cmp	r3, #0
   15e74:	mov	r4, r2
   15e78:	str	r2, [sp, #24]
   15e7c:	mov	r5, r1
   15e80:	mov	r6, r0
   15e84:	str	r0, [sp, #20]
   15e88:	movt	r8, #2
   15e8c:	movne	r8, r3
   15e90:	bl	11558 <__errno_location@plt>
   15e94:	str	r0, [sp, #28]
   15e98:	cmp	r4, #0
   15e9c:	add	sl, r8, #8
   15ea0:	ldm	r8, {r3, r9}
   15ea4:	ldr	r7, [r0]
   15ea8:	ldr	r1, [r8, #40]	; 0x28
   15eac:	ldr	r2, [r8, #44]	; 0x2c
   15eb0:	mov	r0, #0
   15eb4:	orreq	r9, r9, #1
   15eb8:	str	r7, [sp, #32]
   15ebc:	mov	r7, r5
   15ec0:	stm	sp, {r3, r9, sl}
   15ec4:	str	r1, [sp, #12]
   15ec8:	str	r2, [sp, #16]
   15ecc:	mov	r1, #0
   15ed0:	mov	r2, r6
   15ed4:	mov	r3, r5
   15ed8:	bl	14d98 <__assert_fail@plt+0x36b4>
   15edc:	add	r4, r0, #1
   15ee0:	mov	r5, r0
   15ee4:	mov	r0, r4
   15ee8:	bl	17cc4 <__assert_fail@plt+0x65e0>
   15eec:	mov	r6, r0
   15ef0:	ldr	r0, [r8]
   15ef4:	ldr	r2, [r8, #44]	; 0x2c
   15ef8:	ldr	r1, [r8, #40]	; 0x28
   15efc:	mov	r3, r7
   15f00:	stm	sp, {r0, r9, sl}
   15f04:	str	r2, [sp, #16]
   15f08:	str	r1, [sp, #12]
   15f0c:	mov	r0, r6
   15f10:	mov	r1, r4
   15f14:	ldr	r2, [sp, #20]
   15f18:	bl	14d98 <__assert_fail@plt+0x36b4>
   15f1c:	ldr	r0, [sp, #24]
   15f20:	ldr	r1, [sp, #32]
   15f24:	ldr	r2, [sp, #28]
   15f28:	cmp	r0, #0
   15f2c:	str	r1, [r2]
   15f30:	strne	r5, [r0]
   15f34:	mov	r0, r6
   15f38:	sub	sp, fp, #28
   15f3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15f44:	add	fp, sp, #24
   15f48:	movw	r5, #49508	; 0xc164
   15f4c:	movw	r8, #49504	; 0xc160
   15f50:	movt	r5, #2
   15f54:	movt	r8, #2
   15f58:	ldr	r0, [r5]
   15f5c:	ldr	r4, [r8]
   15f60:	cmp	r0, #2
   15f64:	blt	15f90 <__assert_fail@plt+0x48ac>
   15f68:	add	r7, r4, #12
   15f6c:	mov	r6, #0
   15f70:	ldr	r0, [r7, r6, lsl #3]
   15f74:	bl	13fb0 <__assert_fail@plt+0x28cc>
   15f78:	ldr	r1, [r5]
   15f7c:	add	r2, r6, #2
   15f80:	add	r0, r6, #1
   15f84:	mov	r6, r0
   15f88:	cmp	r2, r1
   15f8c:	blt	15f70 <__assert_fail@plt+0x488c>
   15f90:	ldr	r0, [r4, #4]
   15f94:	movw	r7, #49672	; 0xc208
   15f98:	movt	r7, #2
   15f9c:	cmp	r0, r7
   15fa0:	beq	15fb8 <__assert_fail@plt+0x48d4>
   15fa4:	bl	13fb0 <__assert_fail@plt+0x28cc>
   15fa8:	movw	r0, #49512	; 0xc168
   15fac:	mov	r6, #256	; 0x100
   15fb0:	movt	r0, #2
   15fb4:	strd	r6, [r0]
   15fb8:	movw	r6, #49512	; 0xc168
   15fbc:	movt	r6, #2
   15fc0:	cmp	r4, r6
   15fc4:	beq	15fd4 <__assert_fail@plt+0x48f0>
   15fc8:	mov	r0, r4
   15fcc:	bl	13fb0 <__assert_fail@plt+0x28cc>
   15fd0:	str	r6, [r8]
   15fd4:	mov	r0, #1
   15fd8:	str	r0, [r5]
   15fdc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15fe0:	movw	r3, #49624	; 0xc1d8
   15fe4:	mvn	r2, #0
   15fe8:	movt	r3, #2
   15fec:	b	15ff0 <__assert_fail@plt+0x490c>
   15ff0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ff4:	add	fp, sp, #28
   15ff8:	sub	sp, sp, #44	; 0x2c
   15ffc:	mov	r7, r3
   16000:	str	r2, [sp, #36]	; 0x24
   16004:	str	r1, [sp, #32]
   16008:	mov	r5, r0
   1600c:	bl	11558 <__errno_location@plt>
   16010:	cmp	r5, #0
   16014:	blt	16180 <__assert_fail@plt+0x4a9c>
   16018:	cmn	r5, #-2147483647	; 0x80000001
   1601c:	beq	16180 <__assert_fail@plt+0x4a9c>
   16020:	movw	r8, #49508	; 0xc164
   16024:	movw	r4, #49504	; 0xc160
   16028:	str	r0, [sp, #28]
   1602c:	ldr	r0, [r0]
   16030:	movt	r8, #2
   16034:	movt	r4, #2
   16038:	ldr	r1, [r8]
   1603c:	ldr	r6, [r4]
   16040:	str	r0, [sp, #24]
   16044:	cmp	r1, r5
   16048:	ble	16054 <__assert_fail@plt+0x4970>
   1604c:	mov	sl, r6
   16050:	b	160bc <__assert_fail@plt+0x49d8>
   16054:	movw	r9, #49512	; 0xc168
   16058:	mov	r0, #8
   1605c:	add	r2, r5, #1
   16060:	str	r1, [fp, #-32]	; 0xffffffe0
   16064:	mvn	r3, #-2147483648	; 0x80000000
   16068:	movt	r9, #2
   1606c:	str	r0, [sp]
   16070:	sub	r2, r2, r1
   16074:	sub	r1, fp, #32
   16078:	subs	r0, r6, r9
   1607c:	movne	r0, r6
   16080:	bl	17ec4 <__assert_fail@plt+0x67e0>
   16084:	cmp	r6, r9
   16088:	mov	sl, r0
   1608c:	str	r0, [r4]
   16090:	ldrdeq	r0, [r9]
   16094:	stmeq	sl, {r0, r1}
   16098:	ldr	r1, [r8]
   1609c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   160a0:	add	r0, sl, r1, lsl #3
   160a4:	sub	r1, r2, r1
   160a8:	lsl	r2, r1, #3
   160ac:	mov	r1, #0
   160b0:	bl	11588 <memset@plt>
   160b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   160b8:	str	r0, [r8]
   160bc:	mov	r9, sl
   160c0:	ldr	r6, [r9, r5, lsl #3]!
   160c4:	ldr	r4, [r9, #4]!
   160c8:	ldm	r7, {r0, r1}
   160cc:	ldr	r2, [r7, #40]	; 0x28
   160d0:	ldr	r3, [r7, #44]	; 0x2c
   160d4:	orr	r8, r1, #1
   160d8:	add	r1, r7, #8
   160dc:	stm	sp, {r0, r8}
   160e0:	add	r0, sp, #8
   160e4:	str	r1, [sp, #20]
   160e8:	stm	r0, {r1, r2, r3}
   160ec:	mov	r0, r4
   160f0:	mov	r1, r6
   160f4:	ldr	r2, [sp, #32]
   160f8:	ldr	r3, [sp, #36]	; 0x24
   160fc:	bl	14d98 <__assert_fail@plt+0x36b4>
   16100:	cmp	r6, r0
   16104:	bhi	16168 <__assert_fail@plt+0x4a84>
   16108:	add	r6, r0, #1
   1610c:	movw	r0, #49672	; 0xc208
   16110:	movt	r0, #2
   16114:	str	r6, [sl, r5, lsl #3]
   16118:	cmp	r4, r0
   1611c:	beq	16128 <__assert_fail@plt+0x4a44>
   16120:	mov	r0, r4
   16124:	bl	13fb0 <__assert_fail@plt+0x28cc>
   16128:	mov	r0, r6
   1612c:	bl	17cc4 <__assert_fail@plt+0x65e0>
   16130:	str	r0, [r9]
   16134:	mov	r4, r0
   16138:	add	r3, sp, #8
   1613c:	ldr	r0, [r7]
   16140:	ldr	r1, [r7, #40]	; 0x28
   16144:	ldr	r2, [r7, #44]	; 0x2c
   16148:	stm	sp, {r0, r8}
   1614c:	ldr	r0, [sp, #20]
   16150:	stm	r3, {r0, r1, r2}
   16154:	mov	r0, r4
   16158:	mov	r1, r6
   1615c:	ldr	r2, [sp, #32]
   16160:	ldr	r3, [sp, #36]	; 0x24
   16164:	bl	14d98 <__assert_fail@plt+0x36b4>
   16168:	ldr	r0, [sp, #28]
   1616c:	ldr	r1, [sp, #24]
   16170:	str	r1, [r0]
   16174:	mov	r0, r4
   16178:	sub	sp, fp, #28
   1617c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16180:	bl	116cc <abort@plt>
   16184:	movw	r3, #49624	; 0xc1d8
   16188:	movt	r3, #2
   1618c:	b	15ff0 <__assert_fail@plt+0x490c>
   16190:	movw	r3, #49624	; 0xc1d8
   16194:	mov	r1, r0
   16198:	mov	r0, #0
   1619c:	mvn	r2, #0
   161a0:	movt	r3, #2
   161a4:	b	15ff0 <__assert_fail@plt+0x490c>
   161a8:	movw	r3, #49624	; 0xc1d8
   161ac:	mov	r2, r1
   161b0:	mov	r1, r0
   161b4:	mov	r0, #0
   161b8:	movt	r3, #2
   161bc:	b	15ff0 <__assert_fail@plt+0x490c>
   161c0:	push	{fp, lr}
   161c4:	mov	fp, sp
   161c8:	sub	sp, sp, #48	; 0x30
   161cc:	vmov.i32	q8, #0	; 0x00000000
   161d0:	mov	ip, #32
   161d4:	mov	r3, sp
   161d8:	mov	lr, r2
   161dc:	cmp	r1, #10
   161e0:	add	r2, r3, #16
   161e4:	vst1.64	{d16-d17}, [r3], ip
   161e8:	vst1.64	{d16-d17}, [r3]
   161ec:	vst1.64	{d16-d17}, [r2]
   161f0:	beq	16210 <__assert_fail@plt+0x4b2c>
   161f4:	str	r1, [sp]
   161f8:	mov	r3, sp
   161fc:	mov	r1, lr
   16200:	mvn	r2, #0
   16204:	bl	15ff0 <__assert_fail@plt+0x490c>
   16208:	mov	sp, fp
   1620c:	pop	{fp, pc}
   16210:	bl	116cc <abort@plt>
   16214:	push	{r4, sl, fp, lr}
   16218:	add	fp, sp, #8
   1621c:	sub	sp, sp, #48	; 0x30
   16220:	mov	ip, r3
   16224:	mov	r3, sp
   16228:	vmov.i32	q8, #0	; 0x00000000
   1622c:	mov	lr, #32
   16230:	cmp	r1, #10
   16234:	add	r4, r3, #16
   16238:	vst1.64	{d16-d17}, [r3], lr
   1623c:	vst1.64	{d16-d17}, [r3]
   16240:	vst1.64	{d16-d17}, [r4]
   16244:	beq	16264 <__assert_fail@plt+0x4b80>
   16248:	str	r1, [sp]
   1624c:	mov	r1, r2
   16250:	mov	r3, sp
   16254:	mov	r2, ip
   16258:	bl	15ff0 <__assert_fail@plt+0x490c>
   1625c:	sub	sp, fp, #8
   16260:	pop	{r4, sl, fp, pc}
   16264:	bl	116cc <abort@plt>
   16268:	push	{fp, lr}
   1626c:	mov	fp, sp
   16270:	sub	sp, sp, #48	; 0x30
   16274:	mov	r3, sp
   16278:	vmov.i32	q8, #0	; 0x00000000
   1627c:	mov	ip, #32
   16280:	cmp	r0, #10
   16284:	add	r2, r3, #16
   16288:	vst1.64	{d16-d17}, [r3], ip
   1628c:	vst1.64	{d16-d17}, [r3]
   16290:	vst1.64	{d16-d17}, [r2]
   16294:	beq	162b4 <__assert_fail@plt+0x4bd0>
   16298:	str	r0, [sp]
   1629c:	mov	r3, sp
   162a0:	mov	r0, #0
   162a4:	mvn	r2, #0
   162a8:	bl	15ff0 <__assert_fail@plt+0x490c>
   162ac:	mov	sp, fp
   162b0:	pop	{fp, pc}
   162b4:	bl	116cc <abort@plt>
   162b8:	push	{fp, lr}
   162bc:	mov	fp, sp
   162c0:	sub	sp, sp, #48	; 0x30
   162c4:	mov	r3, sp
   162c8:	vmov.i32	q8, #0	; 0x00000000
   162cc:	mov	ip, #32
   162d0:	cmp	r0, #10
   162d4:	add	lr, r3, #16
   162d8:	vst1.64	{d16-d17}, [r3], ip
   162dc:	vst1.64	{d16-d17}, [r3]
   162e0:	vst1.64	{d16-d17}, [lr]
   162e4:	beq	16300 <__assert_fail@plt+0x4c1c>
   162e8:	str	r0, [sp]
   162ec:	mov	r3, sp
   162f0:	mov	r0, #0
   162f4:	bl	15ff0 <__assert_fail@plt+0x490c>
   162f8:	mov	sp, fp
   162fc:	pop	{fp, pc}
   16300:	bl	116cc <abort@plt>
   16304:	push	{r4, sl, fp, lr}
   16308:	add	fp, sp, #8
   1630c:	sub	sp, sp, #48	; 0x30
   16310:	mov	lr, r0
   16314:	movw	r0, #49624	; 0xc1d8
   16318:	mov	r3, #32
   1631c:	mov	ip, r1
   16320:	mov	r4, #1
   16324:	movt	r0, #2
   16328:	add	r1, r0, #16
   1632c:	vld1.64	{d16-d17}, [r0], r3
   16330:	mov	r3, sp
   16334:	vld1.64	{d18-d19}, [r1]
   16338:	add	r1, r3, #16
   1633c:	vld1.64	{d20-d21}, [r0]
   16340:	add	r0, r3, #32
   16344:	vst1.64	{d18-d19}, [r1]
   16348:	mov	r1, r3
   1634c:	vst1.64	{d20-d21}, [r0]
   16350:	mov	r0, #28
   16354:	and	r0, r0, r2, lsr #3
   16358:	and	r2, r2, #31
   1635c:	vst1.64	{d16-d17}, [r1], r0
   16360:	ldr	r0, [r1, #8]
   16364:	bic	r4, r4, r0, lsr r2
   16368:	eor	r0, r0, r4, lsl r2
   1636c:	mov	r2, ip
   16370:	str	r0, [r1, #8]
   16374:	mov	r0, #0
   16378:	mov	r1, lr
   1637c:	bl	15ff0 <__assert_fail@plt+0x490c>
   16380:	sub	sp, fp, #8
   16384:	pop	{r4, sl, fp, pc}
   16388:	push	{fp, lr}
   1638c:	mov	fp, sp
   16390:	sub	sp, sp, #48	; 0x30
   16394:	mov	ip, r0
   16398:	movw	r0, #49624	; 0xc1d8
   1639c:	mov	r3, #32
   163a0:	movt	r0, #2
   163a4:	add	r2, r0, #16
   163a8:	vld1.64	{d16-d17}, [r0], r3
   163ac:	mov	r3, sp
   163b0:	vld1.64	{d18-d19}, [r2]
   163b4:	add	r2, r3, #16
   163b8:	vld1.64	{d20-d21}, [r0]
   163bc:	add	r0, r3, #32
   163c0:	vst1.64	{d18-d19}, [r2]
   163c4:	mov	r2, r3
   163c8:	vst1.64	{d20-d21}, [r0]
   163cc:	mov	r0, #28
   163d0:	and	r0, r0, r1, lsr #3
   163d4:	and	r1, r1, #31
   163d8:	vst1.64	{d16-d17}, [r2], r0
   163dc:	mov	r0, #1
   163e0:	ldr	lr, [r2, #8]
   163e4:	bic	r0, r0, lr, lsr r1
   163e8:	eor	r0, lr, r0, lsl r1
   163ec:	mov	r1, ip
   163f0:	str	r0, [r2, #8]
   163f4:	mov	r0, #0
   163f8:	mvn	r2, #0
   163fc:	bl	15ff0 <__assert_fail@plt+0x490c>
   16400:	mov	sp, fp
   16404:	pop	{fp, pc}
   16408:	push	{fp, lr}
   1640c:	mov	fp, sp
   16410:	sub	sp, sp, #48	; 0x30
   16414:	movw	r2, #49624	; 0xc1d8
   16418:	mov	r3, #32
   1641c:	mov	r1, r0
   16420:	movt	r2, #2
   16424:	add	r0, r2, #16
   16428:	vld1.64	{d16-d17}, [r2], r3
   1642c:	mov	r3, sp
   16430:	vld1.64	{d18-d19}, [r0]
   16434:	add	r0, r3, #16
   16438:	vld1.64	{d20-d21}, [r2]
   1643c:	mov	r2, r3
   16440:	vst1.64	{d18-d19}, [r0]
   16444:	add	r0, r3, #32
   16448:	vst1.64	{d20-d21}, [r0]
   1644c:	mov	r0, #12
   16450:	vst1.64	{d16-d17}, [r2], r0
   16454:	ldr	r0, [r2]
   16458:	orr	r0, r0, #67108864	; 0x4000000
   1645c:	str	r0, [r2]
   16460:	mov	r0, #0
   16464:	mvn	r2, #0
   16468:	bl	15ff0 <__assert_fail@plt+0x490c>
   1646c:	mov	sp, fp
   16470:	pop	{fp, pc}
   16474:	push	{fp, lr}
   16478:	mov	fp, sp
   1647c:	sub	sp, sp, #48	; 0x30
   16480:	mov	ip, r1
   16484:	mov	r1, r0
   16488:	movw	r0, #49624	; 0xc1d8
   1648c:	mov	r3, #32
   16490:	movt	r0, #2
   16494:	add	r2, r0, #16
   16498:	vld1.64	{d16-d17}, [r0], r3
   1649c:	mov	r3, sp
   164a0:	vld1.64	{d18-d19}, [r2]
   164a4:	add	r2, r3, #16
   164a8:	vld1.64	{d20-d21}, [r0]
   164ac:	add	r0, r3, #32
   164b0:	vst1.64	{d18-d19}, [r2]
   164b4:	mov	r2, r3
   164b8:	vst1.64	{d20-d21}, [r0]
   164bc:	mov	r0, #12
   164c0:	vst1.64	{d16-d17}, [r2], r0
   164c4:	ldr	r0, [r2]
   164c8:	orr	r0, r0, #67108864	; 0x4000000
   164cc:	str	r0, [r2]
   164d0:	mov	r0, #0
   164d4:	mov	r2, ip
   164d8:	bl	15ff0 <__assert_fail@plt+0x490c>
   164dc:	mov	sp, fp
   164e0:	pop	{fp, pc}
   164e4:	push	{r4, sl, fp, lr}
   164e8:	add	fp, sp, #8
   164ec:	sub	sp, sp, #96	; 0x60
   164f0:	mov	ip, r2
   164f4:	mov	r2, sp
   164f8:	vmov.i32	q8, #0	; 0x00000000
   164fc:	mov	r4, #28
   16500:	cmp	r1, #10
   16504:	mov	r3, r2
   16508:	add	lr, r2, #16
   1650c:	vst1.64	{d16-d17}, [r3], r4
   16510:	vst1.64	{d16-d17}, [lr]
   16514:	vst1.32	{d16-d17}, [r3]
   16518:	beq	16568 <__assert_fail@plt+0x4e84>
   1651c:	vld1.64	{d16-d17}, [r2], r4
   16520:	vld1.64	{d18-d19}, [lr]
   16524:	add	r3, sp, #48	; 0x30
   16528:	add	r4, r3, #4
   1652c:	vld1.32	{d20-d21}, [r2]
   16530:	add	r2, r3, #20
   16534:	vst1.32	{d16-d17}, [r4]
   16538:	vst1.32	{d18-d19}, [r2]
   1653c:	add	r2, r3, #32
   16540:	vst1.32	{d20-d21}, [r2]
   16544:	str	r1, [sp, #48]	; 0x30
   16548:	mvn	r2, #0
   1654c:	ldr	r1, [sp, #60]	; 0x3c
   16550:	orr	r1, r1, #67108864	; 0x4000000
   16554:	str	r1, [sp, #60]	; 0x3c
   16558:	mov	r1, ip
   1655c:	bl	15ff0 <__assert_fail@plt+0x490c>
   16560:	sub	sp, fp, #8
   16564:	pop	{r4, sl, fp, pc}
   16568:	bl	116cc <abort@plt>
   1656c:	push	{r4, r5, fp, lr}
   16570:	add	fp, sp, #8
   16574:	sub	sp, sp, #48	; 0x30
   16578:	mov	ip, r3
   1657c:	movw	r3, #49624	; 0xc1d8
   16580:	mov	lr, #32
   16584:	cmp	r1, #0
   16588:	mov	r5, sp
   1658c:	movt	r3, #2
   16590:	cmpne	r2, #0
   16594:	add	r4, r3, #16
   16598:	vld1.64	{d16-d17}, [r3], lr
   1659c:	vld1.64	{d18-d19}, [r4]
   165a0:	add	r4, r5, #16
   165a4:	vld1.64	{d20-d21}, [r3]
   165a8:	vst1.64	{d16-d17}, [r5], lr
   165ac:	mov	r3, #10
   165b0:	vst1.64	{d18-d19}, [r4]
   165b4:	vst1.64	{d20-d21}, [r5]
   165b8:	str	r3, [sp]
   165bc:	bne	165c4 <__assert_fail@plt+0x4ee0>
   165c0:	bl	116cc <abort@plt>
   165c4:	str	r2, [sp, #44]	; 0x2c
   165c8:	str	r1, [sp, #40]	; 0x28
   165cc:	mov	r3, sp
   165d0:	mov	r1, ip
   165d4:	mvn	r2, #0
   165d8:	bl	15ff0 <__assert_fail@plt+0x490c>
   165dc:	sub	sp, fp, #8
   165e0:	pop	{r4, r5, fp, pc}
   165e4:	push	{r4, r5, fp, lr}
   165e8:	add	fp, sp, #8
   165ec:	sub	sp, sp, #48	; 0x30
   165f0:	mov	lr, r3
   165f4:	movw	r3, #49624	; 0xc1d8
   165f8:	mov	ip, #32
   165fc:	cmp	r1, #0
   16600:	mov	r5, sp
   16604:	movt	r3, #2
   16608:	cmpne	r2, #0
   1660c:	add	r4, r3, #16
   16610:	vld1.64	{d16-d17}, [r3], ip
   16614:	vld1.64	{d18-d19}, [r4]
   16618:	add	r4, r5, #16
   1661c:	vld1.64	{d20-d21}, [r3]
   16620:	vst1.64	{d16-d17}, [r5], ip
   16624:	mov	r3, #10
   16628:	vst1.64	{d18-d19}, [r4]
   1662c:	vst1.64	{d20-d21}, [r5]
   16630:	str	r3, [sp]
   16634:	bne	1663c <__assert_fail@plt+0x4f58>
   16638:	bl	116cc <abort@plt>
   1663c:	ldr	ip, [fp, #8]
   16640:	str	r2, [sp, #44]	; 0x2c
   16644:	str	r1, [sp, #40]	; 0x28
   16648:	mov	r3, sp
   1664c:	mov	r1, lr
   16650:	mov	r2, ip
   16654:	bl	15ff0 <__assert_fail@plt+0x490c>
   16658:	sub	sp, fp, #8
   1665c:	pop	{r4, r5, fp, pc}
   16660:	push	{r4, sl, fp, lr}
   16664:	add	fp, sp, #8
   16668:	sub	sp, sp, #48	; 0x30
   1666c:	mov	ip, r2
   16670:	movw	r2, #49624	; 0xc1d8
   16674:	mov	lr, #32
   16678:	cmp	r0, #0
   1667c:	mov	r4, sp
   16680:	movt	r2, #2
   16684:	cmpne	r1, #0
   16688:	add	r3, r2, #16
   1668c:	vld1.64	{d16-d17}, [r2], lr
   16690:	vld1.64	{d18-d19}, [r3]
   16694:	add	r3, r4, #16
   16698:	vld1.64	{d20-d21}, [r2]
   1669c:	vst1.64	{d16-d17}, [r4], lr
   166a0:	mov	r2, #10
   166a4:	vst1.64	{d18-d19}, [r3]
   166a8:	vst1.64	{d20-d21}, [r4]
   166ac:	str	r2, [sp]
   166b0:	bne	166b8 <__assert_fail@plt+0x4fd4>
   166b4:	bl	116cc <abort@plt>
   166b8:	str	r1, [sp, #44]	; 0x2c
   166bc:	str	r0, [sp, #40]	; 0x28
   166c0:	mov	r3, sp
   166c4:	mov	r0, #0
   166c8:	mov	r1, ip
   166cc:	mvn	r2, #0
   166d0:	bl	15ff0 <__assert_fail@plt+0x490c>
   166d4:	sub	sp, fp, #8
   166d8:	pop	{r4, sl, fp, pc}
   166dc:	push	{r4, r5, fp, lr}
   166e0:	add	fp, sp, #8
   166e4:	sub	sp, sp, #48	; 0x30
   166e8:	mov	lr, r2
   166ec:	movw	r2, #49624	; 0xc1d8
   166f0:	mov	ip, r3
   166f4:	mov	r3, #32
   166f8:	cmp	r0, #0
   166fc:	mov	r5, sp
   16700:	movt	r2, #2
   16704:	cmpne	r1, #0
   16708:	add	r4, r2, #16
   1670c:	vld1.64	{d16-d17}, [r2], r3
   16710:	vld1.64	{d18-d19}, [r4]
   16714:	add	r4, r5, #16
   16718:	vld1.64	{d20-d21}, [r2]
   1671c:	vst1.64	{d16-d17}, [r5], r3
   16720:	mov	r2, #10
   16724:	vst1.64	{d18-d19}, [r4]
   16728:	vst1.64	{d20-d21}, [r5]
   1672c:	str	r2, [sp]
   16730:	bne	16738 <__assert_fail@plt+0x5054>
   16734:	bl	116cc <abort@plt>
   16738:	str	r1, [sp, #44]	; 0x2c
   1673c:	str	r0, [sp, #40]	; 0x28
   16740:	mov	r3, sp
   16744:	mov	r0, #0
   16748:	mov	r1, lr
   1674c:	mov	r2, ip
   16750:	bl	15ff0 <__assert_fail@plt+0x490c>
   16754:	sub	sp, fp, #8
   16758:	pop	{r4, r5, fp, pc}
   1675c:	movw	r3, #49520	; 0xc170
   16760:	movt	r3, #2
   16764:	b	15ff0 <__assert_fail@plt+0x490c>
   16768:	movw	r3, #49520	; 0xc170
   1676c:	mov	r2, r1
   16770:	mov	r1, r0
   16774:	mov	r0, #0
   16778:	movt	r3, #2
   1677c:	b	15ff0 <__assert_fail@plt+0x490c>
   16780:	movw	r3, #49520	; 0xc170
   16784:	mvn	r2, #0
   16788:	movt	r3, #2
   1678c:	b	15ff0 <__assert_fail@plt+0x490c>
   16790:	movw	r3, #49520	; 0xc170
   16794:	mov	r1, r0
   16798:	mov	r0, #0
   1679c:	mvn	r2, #0
   167a0:	movt	r3, #2
   167a4:	b	15ff0 <__assert_fail@plt+0x490c>
   167a8:	push	{r4, r5, fp, lr}
   167ac:	add	fp, sp, #8
   167b0:	mov	r5, r0
   167b4:	mov	r4, r1
   167b8:	mov	r0, #0
   167bc:	mov	r2, #5
   167c0:	mov	r1, r5
   167c4:	bl	11414 <dcgettext@plt>
   167c8:	cmp	r0, r5
   167cc:	popne	{r4, r5, fp, pc}
   167d0:	bl	19380 <__assert_fail@plt+0x7c9c>
   167d4:	ldrb	r1, [r0]
   167d8:	and	r1, r1, #223	; 0xdf
   167dc:	cmp	r1, #71	; 0x47
   167e0:	beq	16848 <__assert_fail@plt+0x5164>
   167e4:	cmp	r1, #85	; 0x55
   167e8:	bne	1686c <__assert_fail@plt+0x5188>
   167ec:	ldrb	r1, [r0, #1]
   167f0:	and	r1, r1, #223	; 0xdf
   167f4:	cmp	r1, #84	; 0x54
   167f8:	bne	1686c <__assert_fail@plt+0x5188>
   167fc:	ldrb	r1, [r0, #2]
   16800:	and	r1, r1, #223	; 0xdf
   16804:	cmp	r1, #70	; 0x46
   16808:	ldrbeq	r1, [r0, #3]
   1680c:	cmpeq	r1, #45	; 0x2d
   16810:	bne	1686c <__assert_fail@plt+0x5188>
   16814:	ldrb	r1, [r0, #4]
   16818:	cmp	r1, #56	; 0x38
   1681c:	ldrbeq	r0, [r0, #5]
   16820:	cmpeq	r0, #0
   16824:	bne	1686c <__assert_fail@plt+0x5188>
   16828:	ldrb	r1, [r5]
   1682c:	movw	r2, #43878	; 0xab66
   16830:	movw	r0, #43882	; 0xab6a
   16834:	movt	r2, #1
   16838:	movt	r0, #1
   1683c:	cmp	r1, #96	; 0x60
   16840:	moveq	r0, r2
   16844:	pop	{r4, r5, fp, pc}
   16848:	ldrb	r1, [r0, #1]
   1684c:	and	r1, r1, #223	; 0xdf
   16850:	cmp	r1, #66	; 0x42
   16854:	bne	1686c <__assert_fail@plt+0x5188>
   16858:	ldrb	r1, [r0, #2]
   1685c:	cmp	r1, #49	; 0x31
   16860:	ldrbeq	r1, [r0, #3]
   16864:	cmpeq	r1, #56	; 0x38
   16868:	beq	16888 <__assert_fail@plt+0x51a4>
   1686c:	movw	r1, #43872	; 0xab60
   16870:	movw	r0, #43876	; 0xab64
   16874:	cmp	r4, #9
   16878:	movt	r1, #1
   1687c:	movt	r0, #1
   16880:	moveq	r0, r1
   16884:	pop	{r4, r5, fp, pc}
   16888:	ldrb	r1, [r0, #4]
   1688c:	cmp	r1, #48	; 0x30
   16890:	ldrbeq	r1, [r0, #5]
   16894:	cmpeq	r1, #51	; 0x33
   16898:	bne	1686c <__assert_fail@plt+0x5188>
   1689c:	ldrb	r1, [r0, #6]
   168a0:	cmp	r1, #48	; 0x30
   168a4:	ldrbeq	r0, [r0, #7]
   168a8:	cmpeq	r0, #0
   168ac:	bne	1686c <__assert_fail@plt+0x5188>
   168b0:	ldrb	r1, [r5]
   168b4:	movw	r2, #43886	; 0xab6e
   168b8:	movw	r0, #43890	; 0xab72
   168bc:	movt	r2, #1
   168c0:	movt	r0, #1
   168c4:	b	1683c <__assert_fail@plt+0x5158>
   168c8:	push	{r4, sl, fp, lr}
   168cc:	add	fp, sp, #8
   168d0:	mov	r4, r0
   168d4:	mov	r0, #24
   168d8:	bl	17c94 <__assert_fail@plt+0x65b0>
   168dc:	mov	r1, r0
   168e0:	vmov.i32	q8, #0	; 0x00000000
   168e4:	str	r4, [r1], #8
   168e8:	vst1.64	{d16-d17}, [r1]
   168ec:	pop	{r4, sl, fp, pc}
   168f0:	push	{r4, sl, fp, lr}
   168f4:	add	fp, sp, #8
   168f8:	bl	16b58 <__assert_fail@plt+0x5474>
   168fc:	cmp	r0, #0
   16900:	moveq	r0, #0
   16904:	popeq	{r4, sl, fp, pc}
   16908:	mov	r4, r0
   1690c:	mov	r0, #24
   16910:	bl	17c94 <__assert_fail@plt+0x65b0>
   16914:	mov	r1, r0
   16918:	vmov.i32	q8, #0	; 0x00000000
   1691c:	str	r4, [r1], #8
   16920:	vst1.64	{d16-d17}, [r1]
   16924:	pop	{r4, sl, fp, pc}
   16928:	ldr	r0, [r0]
   1692c:	bx	lr
   16930:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16934:	add	fp, sp, #28
   16938:	sub	sp, sp, #60	; 0x3c
   1693c:	ldr	r1, [r0]
   16940:	ldr	r9, [r0, #12]
   16944:	ldr	r7, [r0, #20]
   16948:	mov	r5, r3
   1694c:	mov	r6, r2
   16950:	mov	sl, #255	; 0xff
   16954:	str	r1, [sp, #8]
   16958:	mov	r1, r0
   1695c:	ldr	r8, [r0, #8]!
   16960:	ldr	r4, [r1, #16]!
   16964:	str	r0, [sp, #4]
   16968:	adds	r0, r2, #1
   1696c:	str	r0, [sp, #24]
   16970:	adc	r0, r3, #0
   16974:	str	r1, [sp]
   16978:	str	r0, [sp, #20]
   1697c:	subs	r0, r4, r6
   16980:	sbcs	r0, r7, r5
   16984:	bcs	169e8 <__assert_fail@plt+0x5304>
   16988:	mov	r2, #0
   1698c:	mov	r0, r4
   16990:	mov	r1, r7
   16994:	lsl	r1, r1, #8
   16998:	add	r2, r2, #1
   1699c:	orr	r1, r1, r0, lsr #24
   169a0:	orr	r0, sl, r0, lsl #8
   169a4:	subs	r3, r0, r6
   169a8:	sbcs	r3, r1, r5
   169ac:	bcc	16994 <__assert_fail@plt+0x52b0>
   169b0:	ldr	r0, [sp, #8]
   169b4:	sub	r1, fp, #36	; 0x24
   169b8:	bl	16cd0 <__assert_fail@plt+0x55ec>
   169bc:	sub	r0, fp, #36	; 0x24
   169c0:	lsl	r1, r9, #8
   169c4:	orr	r9, r1, r8, lsr #24
   169c8:	ldrb	r1, [r0], #1
   169cc:	orr	r8, r1, r8, lsl #8
   169d0:	lsl	r1, r7, #8
   169d4:	orr	r7, r1, r4, lsr #24
   169d8:	orr	r4, sl, r4, lsl #8
   169dc:	subs	r1, r4, r6
   169e0:	sbcs	r1, r7, r5
   169e4:	bcc	169c0 <__assert_fail@plt+0x52dc>
   169e8:	eor	r0, r4, r6
   169ec:	eor	r1, r7, r5
   169f0:	orrs	r0, r0, r1
   169f4:	beq	16ad0 <__assert_fail@plt+0x53ec>
   169f8:	str	r4, [fp, #-40]	; 0xffffffd8
   169fc:	ldr	r4, [sp, #24]
   16a00:	str	r7, [sp, #44]	; 0x2c
   16a04:	ldr	r7, [sp, #20]
   16a08:	mov	r0, r8
   16a0c:	mov	r1, r9
   16a10:	mov	r2, r4
   16a14:	mov	r3, r7
   16a18:	bl	199fc <__assert_fail@plt+0x8318>
   16a1c:	umull	r2, r3, r0, r4
   16a20:	str	r0, [sp, #16]
   16a24:	str	r1, [sp, #12]
   16a28:	str	r8, [sp, #40]	; 0x28
   16a2c:	str	r9, [sp, #36]	; 0x24
   16a30:	mla	r0, r0, r7, r3
   16a34:	subs	r8, r8, r2
   16a38:	mov	r3, r7
   16a3c:	mla	r1, r1, r4, r0
   16a40:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16a44:	sbc	r9, r9, r1
   16a48:	subs	r2, r0, r6
   16a4c:	ldr	r0, [sp, #44]	; 0x2c
   16a50:	str	r2, [sp, #32]
   16a54:	sbc	r1, r0, r5
   16a58:	mov	r0, r2
   16a5c:	mov	r2, r4
   16a60:	str	r1, [sp, #28]
   16a64:	bl	199fc <__assert_fail@plt+0x8318>
   16a68:	umull	r2, r3, r0, r4
   16a6c:	mov	ip, r1
   16a70:	mla	r3, r0, r7, r3
   16a74:	mla	r3, r1, r4, r3
   16a78:	ldr	r1, [sp, #32]
   16a7c:	subs	r2, r1, r2
   16a80:	ldr	r1, [sp, #28]
   16a84:	sbc	r3, r1, r3
   16a88:	ldr	r1, [fp, #-40]	; 0xffffffd8
   16a8c:	subs	r4, r2, #1
   16a90:	sbc	r7, r3, #0
   16a94:	subs	r2, r1, r2
   16a98:	ldr	r1, [sp, #44]	; 0x2c
   16a9c:	sbc	r3, r1, r3
   16aa0:	ldr	r1, [sp, #40]	; 0x28
   16aa4:	subs	r2, r2, r1
   16aa8:	ldr	r1, [sp, #36]	; 0x24
   16aac:	sbcs	r2, r3, r1
   16ab0:	bcc	1697c <__assert_fail@plt+0x5298>
   16ab4:	ldr	r2, [sp, #4]
   16ab8:	ldr	r3, [sp, #16]
   16abc:	ldr	r7, [sp, #12]
   16ac0:	stm	r2, {r3, r7}
   16ac4:	ldr	r2, [sp]
   16ac8:	stm	r2, {r0, ip}
   16acc:	b	16adc <__assert_fail@plt+0x53f8>
   16ad0:	ldr	r0, [sp, #4]
   16ad4:	vmov.i32	q8, #0	; 0x00000000
   16ad8:	vst1.64	{d16-d17}, [r0]
   16adc:	mov	r0, r8
   16ae0:	mov	r1, r9
   16ae4:	sub	sp, fp, #28
   16ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16aec:	push	{r4, sl, fp, lr}
   16af0:	add	fp, sp, #8
   16af4:	mov	r1, #24
   16af8:	mvn	r2, #0
   16afc:	mov	r4, r0
   16b00:	bl	11618 <__explicit_bzero_chk@plt>
   16b04:	mov	r0, r4
   16b08:	pop	{r4, sl, fp, lr}
   16b0c:	b	13fb0 <__assert_fail@plt+0x28cc>
   16b10:	push	{r4, r5, r6, r7, fp, lr}
   16b14:	add	fp, sp, #16
   16b18:	mov	r4, r0
   16b1c:	ldr	r0, [r0]
   16b20:	bl	16e28 <__assert_fail@plt+0x5744>
   16b24:	mov	r5, r0
   16b28:	bl	11558 <__errno_location@plt>
   16b2c:	ldr	r7, [r0]
   16b30:	mov	r6, r0
   16b34:	mov	r0, r4
   16b38:	mov	r1, #24
   16b3c:	mvn	r2, #0
   16b40:	bl	11618 <__explicit_bzero_chk@plt>
   16b44:	mov	r0, r4
   16b48:	bl	13fb0 <__assert_fail@plt+0x28cc>
   16b4c:	mov	r0, r5
   16b50:	str	r7, [r6]
   16b54:	pop	{r4, r5, r6, r7, fp, pc}
   16b58:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16b5c:	add	fp, sp, #24
   16b60:	cmp	r1, #0
   16b64:	beq	16ba0 <__assert_fail@plt+0x54bc>
   16b68:	mov	r5, r1
   16b6c:	mov	r6, r0
   16b70:	cmp	r0, #0
   16b74:	beq	16bc8 <__assert_fail@plt+0x54e4>
   16b78:	movw	r1, #43980	; 0xabcc
   16b7c:	mov	r0, r6
   16b80:	movt	r1, #1
   16b84:	bl	19228 <__assert_fail@plt+0x7b44>
   16b88:	mov	r7, r0
   16b8c:	cmp	r0, #0
   16b90:	bne	16bcc <__assert_fail@plt+0x54e8>
   16b94:	mov	r9, #0
   16b98:	mov	r0, r9
   16b9c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16ba0:	movw	r0, #2076	; 0x81c
   16ba4:	bl	17c94 <__assert_fail@plt+0x65b0>
   16ba8:	movw	r1, #28260	; 0x6e64
   16bac:	mov	r9, r0
   16bb0:	mov	r0, #0
   16bb4:	movt	r1, #1
   16bb8:	stm	r9, {r0, r1}
   16bbc:	str	r0, [r9, #8]
   16bc0:	mov	r0, r9
   16bc4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16bc8:	mov	r7, #0
   16bcc:	movw	r0, #2076	; 0x81c
   16bd0:	bl	17c94 <__assert_fail@plt+0x65b0>
   16bd4:	mov	r9, r0
   16bd8:	movw	r0, #28260	; 0x6e64
   16bdc:	cmp	r7, #0
   16be0:	movt	r0, #1
   16be4:	str	r7, [r9]
   16be8:	stmib	r9, {r0, r6}
   16bec:	beq	16c14 <__assert_fail@plt+0x5530>
   16bf0:	cmp	r5, #2048	; 0x800
   16bf4:	add	r1, r9, #12
   16bf8:	mov	r0, r7
   16bfc:	mov	r2, #0
   16c00:	movcs	r5, #2048	; 0x800
   16c04:	mov	r3, r5
   16c08:	bl	1157c <setvbuf@plt>
   16c0c:	mov	r0, r9
   16c10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16c14:	cmp	r5, #1024	; 0x400
   16c18:	mov	r0, #0
   16c1c:	add	r8, r9, #16
   16c20:	movcs	r5, #1024	; 0x400
   16c24:	str	r0, [r9, #12]
   16c28:	cmp	r5, #1
   16c2c:	blt	16c78 <__assert_fail@plt+0x5594>
   16c30:	add	r6, r8, r5
   16c34:	mov	r5, r8
   16c38:	sub	r1, r6, r5
   16c3c:	mov	r0, r5
   16c40:	mov	r2, #0
   16c44:	bl	11678 <getrandom@plt>
   16c48:	cmp	r0, #0
   16c4c:	blt	16c60 <__assert_fail@plt+0x557c>
   16c50:	add	r5, r5, r0
   16c54:	cmp	r5, r6
   16c58:	bcc	16c38 <__assert_fail@plt+0x5554>
   16c5c:	b	16c78 <__assert_fail@plt+0x5594>
   16c60:	bl	11558 <__errno_location@plt>
   16c64:	ldr	r4, [r0]
   16c68:	cmp	r4, #4
   16c6c:	bne	16c88 <__assert_fail@plt+0x55a4>
   16c70:	cmp	r5, r6
   16c74:	bcc	16c38 <__assert_fail@plt+0x5554>
   16c78:	mov	r0, r8
   16c7c:	bl	17104 <__assert_fail@plt+0x5a20>
   16c80:	mov	r0, r9
   16c84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16c88:	ldr	r5, [r9]
   16c8c:	mov	r7, r0
   16c90:	mov	r0, r9
   16c94:	movw	r1, #2076	; 0x81c
   16c98:	movw	r2, #2076	; 0x81c
   16c9c:	bl	11618 <__explicit_bzero_chk@plt>
   16ca0:	mov	r0, r9
   16ca4:	bl	13fb0 <__assert_fail@plt+0x28cc>
   16ca8:	cmp	r5, #0
   16cac:	beq	16cb8 <__assert_fail@plt+0x55d4>
   16cb0:	mov	r0, r5
   16cb4:	bl	19130 <__assert_fail@plt+0x7a4c>
   16cb8:	str	r4, [r7]
   16cbc:	b	16b94 <__assert_fail@plt+0x54b0>
   16cc0:	str	r1, [r0, #4]
   16cc4:	bx	lr
   16cc8:	str	r1, [r0, #8]
   16ccc:	bx	lr
   16cd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cd4:	add	fp, sp, #28
   16cd8:	sub	sp, sp, #4
   16cdc:	ldr	r3, [r0]
   16ce0:	mov	r6, r2
   16ce4:	mov	r5, r1
   16ce8:	mov	sl, r0
   16cec:	cmp	r3, #0
   16cf0:	beq	16d6c <__assert_fail@plt+0x5688>
   16cf4:	mov	r0, r5
   16cf8:	mov	r1, #1
   16cfc:	mov	r2, r6
   16d00:	bl	1166c <fread_unlocked@plt>
   16d04:	mov	r4, r0
   16d08:	sub	r6, r6, r0
   16d0c:	bl	11558 <__errno_location@plt>
   16d10:	cmp	r6, #0
   16d14:	beq	16d64 <__assert_fail@plt+0x5680>
   16d18:	mov	r7, r0
   16d1c:	ldr	r1, [sl]
   16d20:	ldr	r0, [r7]
   16d24:	ldr	r1, [r1]
   16d28:	lsl	r1, r1, #26
   16d2c:	and	r0, r0, r1, asr #31
   16d30:	str	r0, [r7]
   16d34:	ldr	r1, [sl, #4]
   16d38:	ldr	r0, [sl, #8]
   16d3c:	blx	r1
   16d40:	ldr	r3, [sl]
   16d44:	add	r5, r5, r4
   16d48:	mov	r1, #1
   16d4c:	mov	r2, r6
   16d50:	mov	r0, r5
   16d54:	bl	1166c <fread_unlocked@plt>
   16d58:	mov	r4, r0
   16d5c:	subs	r6, r6, r0
   16d60:	bne	16d1c <__assert_fail@plt+0x5638>
   16d64:	sub	sp, fp, #28
   16d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d6c:	ldr	r7, [sl, #12]
   16d70:	movw	r0, #1052	; 0x41c
   16d74:	add	r9, sl, r0
   16d78:	sub	r0, r9, r7
   16d7c:	cmp	r7, r6
   16d80:	add	r1, r0, #1024	; 0x400
   16d84:	bcs	16df0 <__assert_fail@plt+0x570c>
   16d88:	add	r8, sl, #16
   16d8c:	mov	r0, r5
   16d90:	mov	r2, r7
   16d94:	bl	113cc <memcpy@plt>
   16d98:	add	r5, r5, r7
   16d9c:	sub	r6, r6, r7
   16da0:	tst	r5, #3
   16da4:	beq	16dc8 <__assert_fail@plt+0x56e4>
   16da8:	mov	r0, r8
   16dac:	mov	r1, r9
   16db0:	bl	16ed4 <__assert_fail@plt+0x57f0>
   16db4:	mov	r7, #1024	; 0x400
   16db8:	cmp	r6, #1024	; 0x400
   16dbc:	mov	r1, r9
   16dc0:	bhi	16d8c <__assert_fail@plt+0x56a8>
   16dc4:	b	16e08 <__assert_fail@plt+0x5724>
   16dc8:	cmp	r6, #1024	; 0x400
   16dcc:	bcc	16df8 <__assert_fail@plt+0x5714>
   16dd0:	mov	r0, r8
   16dd4:	mov	r1, r5
   16dd8:	bl	16ed4 <__assert_fail@plt+0x57f0>
   16ddc:	subs	r6, r6, #1024	; 0x400
   16de0:	add	r5, r5, #1024	; 0x400
   16de4:	bne	16dc8 <__assert_fail@plt+0x56e4>
   16de8:	mov	r0, #0
   16dec:	b	16e1c <__assert_fail@plt+0x5738>
   16df0:	mov	r9, r1
   16df4:	b	16e08 <__assert_fail@plt+0x5724>
   16df8:	mov	r0, r8
   16dfc:	mov	r1, r9
   16e00:	bl	16ed4 <__assert_fail@plt+0x57f0>
   16e04:	mov	r7, #1024	; 0x400
   16e08:	mov	r0, r5
   16e0c:	mov	r1, r9
   16e10:	mov	r2, r6
   16e14:	bl	113cc <memcpy@plt>
   16e18:	sub	r0, r7, r6
   16e1c:	str	r0, [sl, #12]
   16e20:	sub	sp, fp, #28
   16e24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e28:	push	{r4, r5, fp, lr}
   16e2c:	add	fp, sp, #8
   16e30:	ldr	r4, [r0]
   16e34:	movw	r1, #2076	; 0x81c
   16e38:	mvn	r2, #0
   16e3c:	mov	r5, r0
   16e40:	bl	11618 <__explicit_bzero_chk@plt>
   16e44:	mov	r0, r5
   16e48:	bl	13fb0 <__assert_fail@plt+0x28cc>
   16e4c:	cmp	r4, #0
   16e50:	moveq	r0, #0
   16e54:	popeq	{r4, r5, fp, pc}
   16e58:	mov	r0, r4
   16e5c:	pop	{r4, r5, fp, lr}
   16e60:	b	19130 <__assert_fail@plt+0x7a4c>
   16e64:	push	{fp, lr}
   16e68:	mov	fp, sp
   16e6c:	cmp	r0, #0
   16e70:	beq	16ed0 <__assert_fail@plt+0x57ec>
   16e74:	mov	r4, r0
   16e78:	movw	r0, #49496	; 0xc158
   16e7c:	movt	r0, #2
   16e80:	ldr	r5, [r0]
   16e84:	bl	11558 <__errno_location@plt>
   16e88:	ldr	r6, [r0]
   16e8c:	movw	r0, #43983	; 0xabcf
   16e90:	movw	r1, #43999	; 0xabdf
   16e94:	mov	r2, #5
   16e98:	movt	r0, #1
   16e9c:	movt	r1, #1
   16ea0:	cmp	r6, #0
   16ea4:	moveq	r1, r0
   16ea8:	mov	r0, #0
   16eac:	bl	11414 <dcgettext@plt>
   16eb0:	mov	r7, r0
   16eb4:	mov	r0, r4
   16eb8:	bl	16790 <__assert_fail@plt+0x50ac>
   16ebc:	mov	r3, r0
   16ec0:	mov	r0, r5
   16ec4:	mov	r1, r6
   16ec8:	mov	r2, r7
   16ecc:	bl	114bc <error@plt>
   16ed0:	bl	116cc <abort@plt>
   16ed4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16ed8:	add	fp, sp, #24
   16edc:	add	r6, r0, #1024	; 0x400
   16ee0:	add	lr, r0, #512	; 0x200
   16ee4:	ldm	r6, {r2, r3, r6}
   16ee8:	add	r6, r6, #1
   16eec:	add	r4, r6, r3
   16ef0:	add	r3, r0, #16
   16ef4:	str	r6, [r0, #1032]	; 0x408
   16ef8:	mvn	r6, r0
   16efc:	cmp	lr, r3
   16f00:	movhi	r3, lr
   16f04:	add	r3, r3, r6
   16f08:	lsr	ip, r3, #4
   16f0c:	mov	r3, #0
   16f10:	mov	r5, r0
   16f14:	eor	r2, r2, r2, lsl #13
   16f18:	ldr	r6, [r5, r3]!
   16f1c:	and	r7, r6, #1020	; 0x3fc
   16f20:	ldr	r8, [r0, r7]
   16f24:	ldr	r7, [r5, #512]	; 0x200
   16f28:	add	r2, r2, r7
   16f2c:	add	r4, r2, r4
   16f30:	add	r4, r4, r8
   16f34:	eor	r8, r2, r2, lsr #6
   16f38:	str	r4, [r5]
   16f3c:	ubfx	r4, r4, #10, #8
   16f40:	ldr	r4, [r0, r4, lsl #2]
   16f44:	add	r4, r4, r6
   16f48:	mov	r6, r1
   16f4c:	str	r4, [r6, r3]!
   16f50:	add	r3, r3, #16
   16f54:	ldr	r2, [r5, #516]	; 0x204
   16f58:	ldr	r7, [r5, #4]
   16f5c:	add	r2, r2, r8
   16f60:	add	r8, r2, r4
   16f64:	and	r4, r7, #1020	; 0x3fc
   16f68:	ldr	r4, [r0, r4]
   16f6c:	add	r4, r8, r4
   16f70:	eor	r8, r2, r2, lsl #2
   16f74:	str	r4, [r5, #4]
   16f78:	ubfx	r4, r4, #10, #8
   16f7c:	ldr	r4, [r0, r4, lsl #2]
   16f80:	add	r4, r4, r7
   16f84:	str	r4, [r6, #4]
   16f88:	ldr	r2, [r5, #520]	; 0x208
   16f8c:	ldr	r7, [r5, #8]
   16f90:	add	r2, r2, r8
   16f94:	add	r8, r2, r4
   16f98:	and	r4, r7, #1020	; 0x3fc
   16f9c:	ldr	r4, [r0, r4]
   16fa0:	add	r4, r8, r4
   16fa4:	eor	r8, r2, r2, lsr #16
   16fa8:	str	r4, [r5, #8]
   16fac:	ubfx	r4, r4, #10, #8
   16fb0:	ldr	r4, [r0, r4, lsl #2]
   16fb4:	add	r4, r4, r7
   16fb8:	str	r4, [r6, #8]
   16fbc:	ldr	r2, [r5, #524]	; 0x20c
   16fc0:	ldr	r7, [r5, #12]
   16fc4:	add	r2, r2, r8
   16fc8:	add	r8, r2, r4
   16fcc:	and	r4, r7, #1020	; 0x3fc
   16fd0:	ldr	r4, [r0, r4]
   16fd4:	add	r4, r8, r4
   16fd8:	str	r4, [r5, #12]
   16fdc:	ubfx	r4, r4, #10, #8
   16fe0:	add	r5, r0, r3
   16fe4:	ldr	r4, [r0, r4, lsl #2]
   16fe8:	cmp	r5, lr
   16fec:	add	r4, r4, r7
   16ff0:	str	r4, [r6, #12]
   16ff4:	bcc	16f10 <__assert_fail@plt+0x582c>
   16ff8:	lsl	lr, ip, #4
   16ffc:	add	r9, r1, #16
   17000:	add	ip, r0, #1024	; 0x400
   17004:	mov	r3, r0
   17008:	add	r5, r3, lr
   1700c:	eor	r2, r2, r2, lsl #13
   17010:	add	r3, r3, #16
   17014:	ldr	r7, [r5, #16]
   17018:	ldr	r8, [r5, #-496]	; 0xfffffe10
   1701c:	and	r6, r7, #1020	; 0x3fc
   17020:	add	r2, r2, r8
   17024:	ldr	r6, [r0, r6]
   17028:	add	r4, r2, r4
   1702c:	eor	r8, r2, r2, lsr #6
   17030:	add	r4, r4, r6
   17034:	mov	r6, r9
   17038:	add	r9, r9, #16
   1703c:	str	r4, [r5, #16]
   17040:	ubfx	r4, r4, #10, #8
   17044:	ldr	r4, [r0, r4, lsl #2]
   17048:	add	r4, r4, r7
   1704c:	str	r4, [r6, lr]!
   17050:	ldr	r2, [r5, #20]
   17054:	ldr	r7, [r5, #-492]	; 0xfffffe14
   17058:	and	r1, r2, #1020	; 0x3fc
   1705c:	add	r7, r7, r8
   17060:	ldr	r1, [r0, r1]
   17064:	add	r4, r7, r4
   17068:	add	r1, r4, r1
   1706c:	str	r1, [r5, #20]
   17070:	ubfx	r1, r1, #10, #8
   17074:	ldr	r1, [r0, r1, lsl #2]
   17078:	add	r1, r1, r2
   1707c:	eor	r2, r7, r7, lsl #2
   17080:	str	r1, [r6, #4]
   17084:	ldr	r4, [r5, #-488]	; 0xfffffe18
   17088:	ldr	r7, [r5, #24]
   1708c:	add	r2, r4, r2
   17090:	and	r4, r7, #1020	; 0x3fc
   17094:	ldr	r4, [r0, r4]
   17098:	add	r1, r2, r1
   1709c:	eor	r2, r2, r2, lsr #16
   170a0:	add	r1, r1, r4
   170a4:	str	r1, [r5, #24]
   170a8:	ubfx	r1, r1, #10, #8
   170ac:	ldr	r1, [r0, r1, lsl #2]
   170b0:	add	r1, r1, r7
   170b4:	str	r1, [r6, #8]
   170b8:	ldr	r4, [r5, #-484]	; 0xfffffe1c
   170bc:	ldr	r7, [r5, #28]
   170c0:	add	r2, r4, r2
   170c4:	and	r4, r7, #1020	; 0x3fc
   170c8:	ldr	r4, [r0, r4]
   170cc:	add	r1, r2, r1
   170d0:	add	r1, r1, r4
   170d4:	str	r1, [r5, #28]
   170d8:	ubfx	r1, r1, #10, #8
   170dc:	ldr	r1, [r0, r1, lsl #2]
   170e0:	add	r4, r1, r7
   170e4:	add	r1, r3, lr
   170e8:	add	r1, r1, #16
   170ec:	str	r4, [r6, #12]
   170f0:	cmp	r1, ip
   170f4:	bcc	17008 <__assert_fail@plt+0x5924>
   170f8:	str	r2, [r0, #1024]	; 0x400
   170fc:	str	r4, [r0, #1028]	; 0x404
   17100:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17104:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17108:	add	fp, sp, #28
   1710c:	sub	sp, sp, #28
   17110:	str	r0, [sp, #20]
   17114:	add	r7, r0, #28
   17118:	movw	r0, #19064	; 0x4a78
   1711c:	movw	r6, #57178	; 0xdf5a
   17120:	movw	r5, #89	; 0x59
   17124:	movw	r1, #15947	; 0x3e4b
   17128:	movw	sl, #6872	; 0x1ad8
   1712c:	movw	r8, #15433	; 0x3c49
   17130:	movw	lr, #37145	; 0x9119
   17134:	mov	r9, #0
   17138:	movt	r0, #55594	; 0xd92a
   1713c:	movt	r6, #4967	; 0x1367
   17140:	movt	r5, #38361	; 0x95d9
   17144:	movt	r1, #49942	; 0xc316
   17148:	movt	sl, #3906	; 0xf42
   1714c:	movt	r8, #42266	; 0xa51a
   17150:	movt	lr, #12384	; 0x3060
   17154:	str	r0, [sp, #16]
   17158:	movw	r0, #59931	; 0xea1b
   1715c:	movt	r0, #50415	; 0xc4ef
   17160:	ldr	r3, [r7, #-28]	; 0xffffffe4
   17164:	str	r0, [sp, #24]
   17168:	ldr	r0, [r7]
   1716c:	str	lr, [sp, #4]
   17170:	add	r6, r3, r6
   17174:	ldr	r3, [sp, #20]
   17178:	str	r0, [sp, #12]
   1717c:	add	r3, r3, r9, lsl #2
   17180:	add	r9, r9, #8
   17184:	ldmib	r3, {r2, lr}
   17188:	ldr	r0, [r3, #12]
   1718c:	ldr	ip, [r3, #16]
   17190:	cmp	r9, #256	; 0x100
   17194:	add	r5, r2, r5
   17198:	add	r2, r0, sl
   1719c:	add	r4, lr, r1
   171a0:	eor	r6, r6, r5, lsl #11
   171a4:	add	r5, r4, r5
   171a8:	add	r2, r2, r6
   171ac:	str	r6, [sp, #8]
   171b0:	add	r6, r2, r4
   171b4:	eor	r4, r5, r4, lsr #2
   171b8:	eor	r0, r6, r2, lsl #8
   171bc:	ldr	r6, [r3, #20]
   171c0:	str	r4, [sp]
   171c4:	add	r1, r6, r8
   171c8:	ldr	r6, [sp, #16]
   171cc:	add	r1, r1, r0
   171d0:	add	r5, ip, r6
   171d4:	add	r5, r5, r4
   171d8:	ldr	r4, [sp, #4]
   171dc:	add	r2, r5, r2
   171e0:	add	r6, r1, r5
   171e4:	eor	sl, r2, r5, lsr #16
   171e8:	ldr	r5, [r3, #24]
   171ec:	ldr	r2, [sp, #24]
   171f0:	eor	ip, r6, r1, lsl #10
   171f4:	ldr	r6, [sp, #12]
   171f8:	str	ip, [sp, #16]
   171fc:	add	r5, r5, r2
   17200:	add	r6, r6, r4
   17204:	ldr	r2, [sp]
   17208:	add	r5, r5, sl
   1720c:	add	r6, r6, ip
   17210:	add	r1, r5, r1
   17214:	eor	r8, r1, r5, lsr #4
   17218:	ldr	r1, [sp, #8]
   1721c:	add	r5, r6, r5
   17220:	add	r4, r8, r1
   17224:	add	r1, r4, r6
   17228:	eor	lr, r1, r4, lsr #9
   1722c:	add	r1, lr, r0
   17230:	eor	r0, r5, r6, lsl #8
   17234:	add	r5, r0, r2
   17238:	add	r6, r5, r4
   1723c:	str	r6, [r7, #-28]	; 0xffffffe4
   17240:	str	r5, [r3, #4]
   17244:	str	r1, [r3, #8]
   17248:	str	sl, [r3, #12]
   1724c:	str	ip, [r3, #16]
   17250:	str	r8, [r3, #20]
   17254:	str	r0, [r3, #24]
   17258:	str	lr, [r7]
   1725c:	add	r7, r7, #32
   17260:	bcc	17160 <__assert_fail@plt+0x5a7c>
   17264:	ldr	r3, [sp, #20]
   17268:	ldr	r9, [sp, #16]
   1726c:	mov	r4, #0
   17270:	add	r7, r3, #28
   17274:	str	r0, [sp, #24]
   17278:	ldr	r0, [r7]
   1727c:	ldr	r3, [r7, #-28]	; 0xffffffe4
   17280:	str	r0, [sp, #16]
   17284:	add	r0, r3, r6
   17288:	str	r0, [sp, #12]
   1728c:	ldr	r0, [sp, #20]
   17290:	add	r3, r0, r4, lsl #2
   17294:	add	r4, r4, #8
   17298:	ldmib	r3, {r6, ip}
   1729c:	ldr	r2, [r3, #16]
   172a0:	ldr	r0, [r3, #12]
   172a4:	cmp	r4, #256	; 0x100
   172a8:	str	r2, [sp, #8]
   172ac:	ldr	r2, [sp, #12]
   172b0:	add	r5, r6, r5
   172b4:	add	r0, r0, sl
   172b8:	add	r1, ip, r1
   172bc:	eor	r2, r2, r5, lsl #11
   172c0:	add	r0, r0, r2
   172c4:	str	r2, [sp, #12]
   172c8:	add	r2, r0, r1
   172cc:	eor	ip, r2, r0, lsl #8
   172d0:	ldr	r2, [r3, #20]
   172d4:	add	r2, r2, r8
   172d8:	add	r6, r2, ip
   172dc:	add	r2, r1, r5
   172e0:	eor	r5, r2, r1, lsr #2
   172e4:	ldr	r1, [sp, #8]
   172e8:	add	r1, r1, r9
   172ec:	add	r1, r1, r5
   172f0:	add	r0, r1, r0
   172f4:	add	r2, r6, r1
   172f8:	eor	sl, r0, r1, lsr #16
   172fc:	ldr	r0, [r3, #24]
   17300:	ldr	r1, [sp, #24]
   17304:	eor	r9, r2, r6, lsl #10
   17308:	ldr	r2, [sp, #16]
   1730c:	add	r0, r0, r1
   17310:	add	r2, r2, lr
   17314:	add	r0, r0, sl
   17318:	add	lr, r2, r9
   1731c:	add	r1, r0, r6
   17320:	eor	r8, r1, r0, lsr #4
   17324:	ldr	r1, [sp, #12]
   17328:	add	r0, lr, r0
   1732c:	eor	r0, r0, lr, lsl #8
   17330:	add	r5, r0, r5
   17334:	add	r6, r8, r1
   17338:	add	r1, r6, lr
   1733c:	eor	r1, r1, r6, lsr #9
   17340:	add	r6, r5, r6
   17344:	add	r2, r1, ip
   17348:	mov	lr, r1
   1734c:	str	r6, [r7, #-28]	; 0xffffffe4
   17350:	str	r5, [r3, #4]
   17354:	str	r2, [r3, #8]
   17358:	str	sl, [r3, #12]
   1735c:	str	r9, [r3, #16]
   17360:	str	r8, [r3, #20]
   17364:	str	r0, [r3, #24]
   17368:	str	lr, [r7]
   1736c:	mov	r1, r2
   17370:	add	r7, r7, #32
   17374:	bcc	17274 <__assert_fail@plt+0x5b90>
   17378:	ldr	r0, [sp, #20]
   1737c:	mov	r1, #0
   17380:	str	r1, [r0, #1024]	; 0x400
   17384:	str	r1, [r0, #1028]	; 0x404
   17388:	str	r1, [r0, #1032]	; 0x408
   1738c:	sub	sp, fp, #28
   17390:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17394:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17398:	add	fp, sp, #28
   1739c:	sub	sp, sp, #220	; 0xdc
   173a0:	ldr	r7, [fp, #8]
   173a4:	mov	r4, r3
   173a8:	mov	r9, r2
   173ac:	mov	r6, r1
   173b0:	mov	sl, r0
   173b4:	str	r7, [sp]
   173b8:	bl	11594 <renameat2@plt>
   173bc:	mov	r5, r0
   173c0:	bl	11558 <__errno_location@plt>
   173c4:	cmn	r5, #1
   173c8:	bgt	1748c <__assert_fail@plt+0x5da8>
   173cc:	mov	r8, r0
   173d0:	ldr	r0, [r0]
   173d4:	cmp	r0, #22
   173d8:	cmpne	r0, #95	; 0x5f
   173dc:	bne	17434 <__assert_fail@plt+0x5d50>
   173e0:	cmp	r7, #0
   173e4:	beq	17440 <__assert_fail@plt+0x5d5c>
   173e8:	cmp	r7, #1
   173ec:	bne	17480 <__assert_fail@plt+0x5d9c>
   173f0:	mov	r0, #256	; 0x100
   173f4:	add	r3, sp, #8
   173f8:	mov	r1, r9
   173fc:	mov	r2, r4
   17400:	str	r0, [sp]
   17404:	mov	r0, #3
   17408:	bl	11444 <__fxstatat64@plt>
   1740c:	cmp	r0, #0
   17410:	beq	1742c <__assert_fail@plt+0x5d48>
   17414:	ldr	r0, [r8]
   17418:	cmp	r0, #2
   1741c:	beq	17500 <__assert_fail@plt+0x5e1c>
   17420:	mvn	r5, #0
   17424:	cmp	r0, #75	; 0x4b
   17428:	bne	1748c <__assert_fail@plt+0x5da8>
   1742c:	mov	r0, #17
   17430:	b	17484 <__assert_fail@plt+0x5da0>
   17434:	cmp	r0, #38	; 0x26
   17438:	beq	173e0 <__assert_fail@plt+0x5cfc>
   1743c:	b	1748c <__assert_fail@plt+0x5da8>
   17440:	mov	r7, #0
   17444:	mov	r0, r6
   17448:	bl	11534 <strlen@plt>
   1744c:	mov	r5, r0
   17450:	mov	r0, r4
   17454:	bl	11534 <strlen@plt>
   17458:	cmp	r5, #0
   1745c:	cmpne	r0, #0
   17460:	bne	17498 <__assert_fail@plt+0x5db4>
   17464:	mov	r0, sl
   17468:	mov	r1, r6
   1746c:	mov	r2, r9
   17470:	mov	r3, r4
   17474:	bl	11654 <renameat@plt>
   17478:	mov	r5, r0
   1747c:	b	1748c <__assert_fail@plt+0x5da8>
   17480:	mov	r0, #95	; 0x5f
   17484:	str	r0, [r8]
   17488:	mvn	r5, #0
   1748c:	mov	r0, r5
   17490:	sub	sp, fp, #28
   17494:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17498:	add	r1, r6, r5
   1749c:	ldrb	r1, [r1, #-1]
   174a0:	cmp	r1, #47	; 0x2f
   174a4:	beq	174b8 <__assert_fail@plt+0x5dd4>
   174a8:	add	r0, r4, r0
   174ac:	ldrb	r0, [r0, #-1]
   174b0:	cmp	r0, #47	; 0x2f
   174b4:	bne	17464 <__assert_fail@plt+0x5d80>
   174b8:	mov	r0, #256	; 0x100
   174bc:	add	r3, sp, #112	; 0x70
   174c0:	mov	r1, sl
   174c4:	mov	r2, r6
   174c8:	str	r0, [sp]
   174cc:	mov	r0, #3
   174d0:	bl	11444 <__fxstatat64@plt>
   174d4:	mvn	r5, #0
   174d8:	cmp	r0, #0
   174dc:	bne	1748c <__assert_fail@plt+0x5da8>
   174e0:	cmp	r7, #0
   174e4:	beq	17508 <__assert_fail@plt+0x5e24>
   174e8:	ldr	r0, [sp, #128]	; 0x80
   174ec:	and	r0, r0, #61440	; 0xf000
   174f0:	cmp	r0, #16384	; 0x4000
   174f4:	beq	17464 <__assert_fail@plt+0x5d80>
   174f8:	mov	r0, #2
   174fc:	b	17578 <__assert_fail@plt+0x5e94>
   17500:	mov	r7, #1
   17504:	b	17444 <__assert_fail@plt+0x5d60>
   17508:	mov	r0, #256	; 0x100
   1750c:	add	r3, sp, #8
   17510:	mov	r1, r9
   17514:	mov	r2, r4
   17518:	str	r0, [sp]
   1751c:	mov	r0, #3
   17520:	bl	11444 <__fxstatat64@plt>
   17524:	cmp	r0, #0
   17528:	beq	1754c <__assert_fail@plt+0x5e68>
   1752c:	ldr	r0, [r8]
   17530:	cmp	r0, #2
   17534:	bne	1748c <__assert_fail@plt+0x5da8>
   17538:	ldr	r0, [sp, #128]	; 0x80
   1753c:	and	r0, r0, #61440	; 0xf000
   17540:	cmp	r0, #16384	; 0x4000
   17544:	beq	17464 <__assert_fail@plt+0x5d80>
   17548:	b	1748c <__assert_fail@plt+0x5da8>
   1754c:	ldr	r0, [sp, #24]
   17550:	and	r0, r0, #61440	; 0xf000
   17554:	cmp	r0, #16384	; 0x4000
   17558:	bne	17574 <__assert_fail@plt+0x5e90>
   1755c:	ldr	r0, [sp, #128]	; 0x80
   17560:	and	r0, r0, #61440	; 0xf000
   17564:	cmp	r0, #16384	; 0x4000
   17568:	beq	17464 <__assert_fail@plt+0x5d80>
   1756c:	mov	r0, #21
   17570:	b	17578 <__assert_fail@plt+0x5e94>
   17574:	mov	r0, #20
   17578:	str	r0, [r8]
   1757c:	b	1748c <__assert_fail@plt+0x5da8>
   17580:	push	{r4, r5, r6, r7, fp, lr}
   17584:	add	fp, sp, #16
   17588:	mov	r4, r0
   1758c:	cmp	r0, #2
   17590:	movhi	r0, r4
   17594:	pophi	{r4, r5, r6, r7, fp, pc}
   17598:	mov	r0, r4
   1759c:	bl	19454 <__assert_fail@plt+0x7d70>
   175a0:	mov	r5, r0
   175a4:	bl	11558 <__errno_location@plt>
   175a8:	ldr	r7, [r0]
   175ac:	mov	r6, r0
   175b0:	mov	r0, r4
   175b4:	bl	116d8 <close@plt>
   175b8:	mov	r0, r5
   175bc:	str	r7, [r6]
   175c0:	pop	{r4, r5, r6, r7, fp, pc}
   175c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   175c8:	add	fp, sp, #24
   175cc:	sub	sp, sp, #32
   175d0:	ldr	r6, [fp, #12]
   175d4:	ldr	r7, [fp, #8]
   175d8:	mov	r4, r2
   175dc:	mov	r8, r0
   175e0:	cmp	r1, #0
   175e4:	beq	1760c <__assert_fail@plt+0x5f28>
   175e8:	movw	r2, #44014	; 0xabee
   175ec:	mov	r5, r1
   175f0:	str	r3, [sp, #4]
   175f4:	str	r4, [sp]
   175f8:	mov	r0, r8
   175fc:	mov	r1, #1
   17600:	movt	r2, #1
   17604:	mov	r3, r5
   17608:	b	17624 <__assert_fail@plt+0x5f40>
   1760c:	movw	r2, #44026	; 0xabfa
   17610:	str	r3, [sp]
   17614:	mov	r0, r8
   17618:	mov	r1, #1
   1761c:	mov	r3, r4
   17620:	movt	r2, #1
   17624:	bl	115c4 <__fprintf_chk@plt>
   17628:	movw	r1, #44033	; 0xac01
   1762c:	mov	r0, #0
   17630:	mov	r2, #5
   17634:	movt	r1, #1
   17638:	bl	11414 <dcgettext@plt>
   1763c:	movw	r2, #44751	; 0xaecf
   17640:	mov	r3, r0
   17644:	movw	r0, #2022	; 0x7e6
   17648:	mov	r1, #1
   1764c:	str	r0, [sp]
   17650:	movt	r2, #1
   17654:	mov	r0, r8
   17658:	bl	115c4 <__fprintf_chk@plt>
   1765c:	movw	r4, #41446	; 0xa1e6
   17660:	mov	r1, r8
   17664:	movt	r4, #1
   17668:	mov	r0, r4
   1766c:	bl	1136c <fputs_unlocked@plt>
   17670:	movw	r1, #44037	; 0xac05
   17674:	mov	r0, #0
   17678:	mov	r2, #5
   1767c:	movt	r1, #1
   17680:	bl	11414 <dcgettext@plt>
   17684:	movw	r3, #44208	; 0xacb0
   17688:	mov	r2, r0
   1768c:	mov	r0, r8
   17690:	mov	r1, #1
   17694:	movt	r3, #1
   17698:	bl	115c4 <__fprintf_chk@plt>
   1769c:	mov	r0, r4
   176a0:	mov	r1, r8
   176a4:	bl	1136c <fputs_unlocked@plt>
   176a8:	cmp	r6, #9
   176ac:	bhi	176e8 <__assert_fail@plt+0x6004>
   176b0:	add	r0, pc, #0
   176b4:	ldr	pc, [r0, r6, lsl #2]
   176b8:	andeq	r7, r1, r0, ror #13
   176bc:	strdeq	r7, [r1], -r4
   176c0:	andeq	r7, r1, r4, lsr #14
   176c4:	andeq	r7, r1, ip, asr #14
   176c8:	andeq	r7, r1, r4, ror r7
   176cc:	muleq	r1, ip, r7
   176d0:	andeq	r7, r1, r4, asr #15
   176d4:	strdeq	r7, [r1], -ip
   176d8:	muleq	r1, ip, r8
   176dc:	andeq	r7, r1, r4, asr #16
   176e0:	sub	sp, fp, #24
   176e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   176e8:	movw	r1, #44561	; 0xae11
   176ec:	movt	r1, #1
   176f0:	b	1784c <__assert_fail@plt+0x6168>
   176f4:	movw	r1, #44242	; 0xacd2
   176f8:	mov	r0, #0
   176fc:	mov	r2, #5
   17700:	movt	r1, #1
   17704:	bl	11414 <dcgettext@plt>
   17708:	ldr	r3, [r7]
   1770c:	mov	r2, r0
   17710:	mov	r0, r8
   17714:	mov	r1, #1
   17718:	sub	sp, fp, #24
   1771c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17720:	b	115c4 <__fprintf_chk@plt>
   17724:	movw	r1, #44258	; 0xace2
   17728:	mov	r0, #0
   1772c:	mov	r2, #5
   17730:	movt	r1, #1
   17734:	bl	11414 <dcgettext@plt>
   17738:	mov	r2, r0
   1773c:	ldr	r3, [r7]
   17740:	ldr	r0, [r7, #4]
   17744:	str	r0, [sp]
   17748:	b	17838 <__assert_fail@plt+0x6154>
   1774c:	movw	r1, #44281	; 0xacf9
   17750:	mov	r0, #0
   17754:	mov	r2, #5
   17758:	movt	r1, #1
   1775c:	bl	11414 <dcgettext@plt>
   17760:	ldr	r3, [r7]
   17764:	mov	r2, r0
   17768:	ldmib	r7, {r0, r1}
   1776c:	stm	sp, {r0, r1}
   17770:	b	17838 <__assert_fail@plt+0x6154>
   17774:	movw	r1, #44309	; 0xad15
   17778:	mov	r0, #0
   1777c:	mov	r2, #5
   17780:	movt	r1, #1
   17784:	bl	11414 <dcgettext@plt>
   17788:	ldr	r3, [r7]
   1778c:	mov	r2, r0
   17790:	ldmib	r7, {r0, r1, r7}
   17794:	stm	sp, {r0, r1, r7}
   17798:	b	17838 <__assert_fail@plt+0x6154>
   1779c:	movw	r1, #44341	; 0xad35
   177a0:	mov	r0, #0
   177a4:	mov	r2, #5
   177a8:	movt	r1, #1
   177ac:	bl	11414 <dcgettext@plt>
   177b0:	ldr	r3, [r7]
   177b4:	mov	r2, r0
   177b8:	ldmib	r7, {r0, r1, r6, r7}
   177bc:	stm	sp, {r0, r1, r6, r7}
   177c0:	b	17838 <__assert_fail@plt+0x6154>
   177c4:	movw	r1, #44377	; 0xad59
   177c8:	mov	r0, #0
   177cc:	mov	r2, #5
   177d0:	movt	r1, #1
   177d4:	bl	11414 <dcgettext@plt>
   177d8:	ldr	r3, [r7]
   177dc:	mov	r2, r0
   177e0:	ldmib	r7, {r0, r1, r6}
   177e4:	ldr	r5, [r7, #16]
   177e8:	ldr	r7, [r7, #20]
   177ec:	stm	sp, {r0, r1, r6}
   177f0:	str	r5, [sp, #12]
   177f4:	str	r7, [sp, #16]
   177f8:	b	17838 <__assert_fail@plt+0x6154>
   177fc:	movw	r1, #44417	; 0xad81
   17800:	mov	r0, #0
   17804:	mov	r2, #5
   17808:	movt	r1, #1
   1780c:	bl	11414 <dcgettext@plt>
   17810:	ldr	r3, [r7]
   17814:	mov	r2, r0
   17818:	ldmib	r7, {r0, r1, r6}
   1781c:	ldr	r5, [r7, #16]
   17820:	ldr	r4, [r7, #20]
   17824:	ldr	r7, [r7, #24]
   17828:	stm	sp, {r0, r1, r6}
   1782c:	str	r5, [sp, #12]
   17830:	str	r4, [sp, #16]
   17834:	str	r7, [sp, #20]
   17838:	mov	r0, r8
   1783c:	mov	r1, #1
   17840:	b	178ec <__assert_fail@plt+0x6208>
   17844:	movw	r1, #44509	; 0xaddd
   17848:	movt	r1, #1
   1784c:	mov	r0, #0
   17850:	mov	r2, #5
   17854:	bl	11414 <dcgettext@plt>
   17858:	mov	ip, r0
   1785c:	ldr	r3, [r7]
   17860:	ldr	r0, [r7, #4]
   17864:	ldr	r1, [r7, #8]
   17868:	ldr	r6, [r7, #12]
   1786c:	ldr	r5, [r7, #16]
   17870:	ldr	r4, [r7, #20]
   17874:	ldr	r2, [r7, #24]
   17878:	ldr	lr, [r7, #28]
   1787c:	ldr	r7, [r7, #32]
   17880:	stm	sp, {r0, r1, r6}
   17884:	str	r5, [sp, #12]
   17888:	str	r4, [sp, #16]
   1788c:	str	r2, [sp, #20]
   17890:	str	lr, [sp, #24]
   17894:	str	r7, [sp, #28]
   17898:	b	178e0 <__assert_fail@plt+0x61fc>
   1789c:	movw	r1, #44461	; 0xadad
   178a0:	mov	r0, #0
   178a4:	mov	r2, #5
   178a8:	movt	r1, #1
   178ac:	bl	11414 <dcgettext@plt>
   178b0:	mov	ip, r0
   178b4:	ldr	r3, [r7]
   178b8:	ldmib	r7, {r0, r1, r6}
   178bc:	ldr	r5, [r7, #16]
   178c0:	ldr	r4, [r7, #20]
   178c4:	ldr	r2, [r7, #24]
   178c8:	ldr	r7, [r7, #28]
   178cc:	stm	sp, {r0, r1, r6}
   178d0:	str	r5, [sp, #12]
   178d4:	str	r4, [sp, #16]
   178d8:	str	r2, [sp, #20]
   178dc:	str	r7, [sp, #24]
   178e0:	mov	r0, r8
   178e4:	mov	r1, #1
   178e8:	mov	r2, ip
   178ec:	bl	115c4 <__fprintf_chk@plt>
   178f0:	sub	sp, fp, #24
   178f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   178f8:	push	{r4, sl, fp, lr}
   178fc:	add	fp, sp, #8
   17900:	sub	sp, sp, #8
   17904:	ldr	ip, [fp, #8]
   17908:	mov	lr, #0
   1790c:	ldr	r4, [ip, lr, lsl #2]
   17910:	add	lr, lr, #1
   17914:	cmp	r4, #0
   17918:	bne	1790c <__assert_fail@plt+0x6228>
   1791c:	sub	r4, lr, #1
   17920:	str	ip, [sp]
   17924:	str	r4, [sp, #4]
   17928:	bl	175c4 <__assert_fail@plt+0x5ee0>
   1792c:	sub	sp, fp, #8
   17930:	pop	{r4, sl, fp, pc}
   17934:	push	{fp, lr}
   17938:	mov	fp, sp
   1793c:	sub	sp, sp, #48	; 0x30
   17940:	ldr	ip, [fp, #8]
   17944:	ldr	lr, [ip]
   17948:	cmp	lr, #0
   1794c:	str	lr, [sp, #8]
   17950:	beq	179ec <__assert_fail@plt+0x6308>
   17954:	ldr	lr, [ip, #4]
   17958:	cmp	lr, #0
   1795c:	str	lr, [sp, #12]
   17960:	beq	179f4 <__assert_fail@plt+0x6310>
   17964:	ldr	lr, [ip, #8]
   17968:	cmp	lr, #0
   1796c:	str	lr, [sp, #16]
   17970:	beq	179fc <__assert_fail@plt+0x6318>
   17974:	ldr	lr, [ip, #12]
   17978:	cmp	lr, #0
   1797c:	str	lr, [sp, #20]
   17980:	beq	17a04 <__assert_fail@plt+0x6320>
   17984:	ldr	lr, [ip, #16]
   17988:	cmp	lr, #0
   1798c:	str	lr, [sp, #24]
   17990:	beq	17a0c <__assert_fail@plt+0x6328>
   17994:	ldr	lr, [ip, #20]
   17998:	cmp	lr, #0
   1799c:	str	lr, [sp, #28]
   179a0:	beq	17a14 <__assert_fail@plt+0x6330>
   179a4:	ldr	lr, [ip, #24]
   179a8:	cmp	lr, #0
   179ac:	str	lr, [sp, #32]
   179b0:	beq	17a1c <__assert_fail@plt+0x6338>
   179b4:	ldr	lr, [ip, #28]
   179b8:	cmp	lr, #0
   179bc:	str	lr, [sp, #36]	; 0x24
   179c0:	beq	17a24 <__assert_fail@plt+0x6340>
   179c4:	ldr	lr, [ip, #32]
   179c8:	cmp	lr, #0
   179cc:	str	lr, [sp, #40]	; 0x28
   179d0:	beq	17a2c <__assert_fail@plt+0x6348>
   179d4:	ldr	lr, [ip, #36]	; 0x24
   179d8:	mov	ip, #10
   179dc:	cmp	lr, #0
   179e0:	str	lr, [sp, #44]	; 0x2c
   179e4:	movweq	ip, #9
   179e8:	b	17a30 <__assert_fail@plt+0x634c>
   179ec:	mov	ip, #0
   179f0:	b	17a30 <__assert_fail@plt+0x634c>
   179f4:	mov	ip, #1
   179f8:	b	17a30 <__assert_fail@plt+0x634c>
   179fc:	mov	ip, #2
   17a00:	b	17a30 <__assert_fail@plt+0x634c>
   17a04:	mov	ip, #3
   17a08:	b	17a30 <__assert_fail@plt+0x634c>
   17a0c:	mov	ip, #4
   17a10:	b	17a30 <__assert_fail@plt+0x634c>
   17a14:	mov	ip, #5
   17a18:	b	17a30 <__assert_fail@plt+0x634c>
   17a1c:	mov	ip, #6
   17a20:	b	17a30 <__assert_fail@plt+0x634c>
   17a24:	mov	ip, #7
   17a28:	b	17a30 <__assert_fail@plt+0x634c>
   17a2c:	mov	ip, #8
   17a30:	add	lr, sp, #8
   17a34:	str	ip, [sp, #4]
   17a38:	str	lr, [sp]
   17a3c:	bl	175c4 <__assert_fail@plt+0x5ee0>
   17a40:	mov	sp, fp
   17a44:	pop	{fp, pc}
   17a48:	push	{fp, lr}
   17a4c:	mov	fp, sp
   17a50:	sub	sp, sp, #56	; 0x38
   17a54:	add	ip, fp, #8
   17a58:	str	ip, [sp, #12]
   17a5c:	ldr	lr, [fp, #8]
   17a60:	cmp	lr, #0
   17a64:	str	lr, [sp, #16]
   17a68:	beq	17b04 <__assert_fail@plt+0x6420>
   17a6c:	ldr	lr, [ip, #4]
   17a70:	cmp	lr, #0
   17a74:	str	lr, [sp, #20]
   17a78:	beq	17b0c <__assert_fail@plt+0x6428>
   17a7c:	ldr	lr, [ip, #8]
   17a80:	cmp	lr, #0
   17a84:	str	lr, [sp, #24]
   17a88:	beq	17b14 <__assert_fail@plt+0x6430>
   17a8c:	ldr	lr, [ip, #12]
   17a90:	cmp	lr, #0
   17a94:	str	lr, [sp, #28]
   17a98:	beq	17b1c <__assert_fail@plt+0x6438>
   17a9c:	ldr	lr, [ip, #16]
   17aa0:	cmp	lr, #0
   17aa4:	str	lr, [sp, #32]
   17aa8:	beq	17b24 <__assert_fail@plt+0x6440>
   17aac:	ldr	lr, [ip, #20]
   17ab0:	cmp	lr, #0
   17ab4:	str	lr, [sp, #36]	; 0x24
   17ab8:	beq	17b2c <__assert_fail@plt+0x6448>
   17abc:	ldr	lr, [ip, #24]
   17ac0:	cmp	lr, #0
   17ac4:	str	lr, [sp, #40]	; 0x28
   17ac8:	beq	17b34 <__assert_fail@plt+0x6450>
   17acc:	ldr	lr, [ip, #28]
   17ad0:	cmp	lr, #0
   17ad4:	str	lr, [sp, #44]	; 0x2c
   17ad8:	beq	17b3c <__assert_fail@plt+0x6458>
   17adc:	ldr	lr, [ip, #32]
   17ae0:	cmp	lr, #0
   17ae4:	str	lr, [sp, #48]	; 0x30
   17ae8:	beq	17b44 <__assert_fail@plt+0x6460>
   17aec:	ldr	lr, [ip, #36]	; 0x24
   17af0:	mov	ip, #10
   17af4:	cmp	lr, #0
   17af8:	str	lr, [sp, #52]	; 0x34
   17afc:	movweq	ip, #9
   17b00:	b	17b48 <__assert_fail@plt+0x6464>
   17b04:	mov	ip, #0
   17b08:	b	17b48 <__assert_fail@plt+0x6464>
   17b0c:	mov	ip, #1
   17b10:	b	17b48 <__assert_fail@plt+0x6464>
   17b14:	mov	ip, #2
   17b18:	b	17b48 <__assert_fail@plt+0x6464>
   17b1c:	mov	ip, #3
   17b20:	b	17b48 <__assert_fail@plt+0x6464>
   17b24:	mov	ip, #4
   17b28:	b	17b48 <__assert_fail@plt+0x6464>
   17b2c:	mov	ip, #5
   17b30:	b	17b48 <__assert_fail@plt+0x6464>
   17b34:	mov	ip, #6
   17b38:	b	17b48 <__assert_fail@plt+0x6464>
   17b3c:	mov	ip, #7
   17b40:	b	17b48 <__assert_fail@plt+0x6464>
   17b44:	mov	ip, #8
   17b48:	add	lr, sp, #16
   17b4c:	str	ip, [sp, #4]
   17b50:	str	lr, [sp]
   17b54:	bl	175c4 <__assert_fail@plt+0x5ee0>
   17b58:	mov	sp, fp
   17b5c:	pop	{fp, pc}
   17b60:	push	{fp, lr}
   17b64:	mov	fp, sp
   17b68:	movw	r0, #49588	; 0xc1b4
   17b6c:	movt	r0, #2
   17b70:	ldr	r1, [r0]
   17b74:	movw	r0, #41446	; 0xa1e6
   17b78:	movt	r0, #1
   17b7c:	bl	1136c <fputs_unlocked@plt>
   17b80:	movw	r1, #44621	; 0xae4d
   17b84:	mov	r0, #0
   17b88:	mov	r2, #5
   17b8c:	movt	r1, #1
   17b90:	bl	11414 <dcgettext@plt>
   17b94:	movw	r2, #44641	; 0xae61
   17b98:	mov	r1, r0
   17b9c:	mov	r0, #1
   17ba0:	movt	r2, #1
   17ba4:	bl	115a0 <__printf_chk@plt>
   17ba8:	movw	r1, #44663	; 0xae77
   17bac:	mov	r0, #0
   17bb0:	mov	r2, #5
   17bb4:	movt	r1, #1
   17bb8:	bl	11414 <dcgettext@plt>
   17bbc:	movw	r2, #41876	; 0xa394
   17bc0:	movw	r3, #42126	; 0xa48e
   17bc4:	mov	r1, r0
   17bc8:	mov	r0, #1
   17bcc:	movt	r2, #1
   17bd0:	movt	r3, #1
   17bd4:	bl	115a0 <__printf_chk@plt>
   17bd8:	movw	r1, #44683	; 0xae8b
   17bdc:	mov	r0, #0
   17be0:	mov	r2, #5
   17be4:	movt	r1, #1
   17be8:	bl	11414 <dcgettext@plt>
   17bec:	movw	r2, #44722	; 0xaeb2
   17bf0:	mov	r1, r0
   17bf4:	mov	r0, #1
   17bf8:	movt	r2, #1
   17bfc:	pop	{fp, lr}
   17c00:	b	115a0 <__printf_chk@plt>
   17c04:	push	{fp, lr}
   17c08:	mov	fp, sp
   17c0c:	bl	11684 <aligned_alloc@plt>
   17c10:	cmp	r0, #0
   17c14:	popne	{fp, pc}
   17c18:	bl	181f4 <__assert_fail@plt+0x6b10>
   17c1c:	push	{r4, r5, r6, sl, fp, lr}
   17c20:	add	fp, sp, #16
   17c24:	mov	r4, r2
   17c28:	mov	r5, r1
   17c2c:	mov	r6, r0
   17c30:	bl	19418 <__assert_fail@plt+0x7d34>
   17c34:	cmp	r0, #0
   17c38:	popne	{r4, r5, r6, sl, fp, pc}
   17c3c:	cmp	r6, #0
   17c40:	beq	17c54 <__assert_fail@plt+0x6570>
   17c44:	cmp	r5, #0
   17c48:	cmpne	r4, #0
   17c4c:	bne	17c54 <__assert_fail@plt+0x6570>
   17c50:	pop	{r4, r5, r6, sl, fp, pc}
   17c54:	bl	181f4 <__assert_fail@plt+0x6b10>
   17c58:	push	{r4, r5, r6, sl, fp, lr}
   17c5c:	add	fp, sp, #16
   17c60:	mov	r4, r2
   17c64:	mov	r5, r1
   17c68:	mov	r6, r0
   17c6c:	bl	19418 <__assert_fail@plt+0x7d34>
   17c70:	cmp	r0, #0
   17c74:	popne	{r4, r5, r6, sl, fp, pc}
   17c78:	cmp	r6, #0
   17c7c:	beq	17c90 <__assert_fail@plt+0x65ac>
   17c80:	cmp	r5, #0
   17c84:	cmpne	r4, #0
   17c88:	bne	17c90 <__assert_fail@plt+0x65ac>
   17c8c:	pop	{r4, r5, r6, sl, fp, pc}
   17c90:	bl	181f4 <__assert_fail@plt+0x6b10>
   17c94:	push	{fp, lr}
   17c98:	mov	fp, sp
   17c9c:	bl	19028 <__assert_fail@plt+0x7944>
   17ca0:	cmp	r0, #0
   17ca4:	popne	{fp, pc}
   17ca8:	bl	181f4 <__assert_fail@plt+0x6b10>
   17cac:	push	{fp, lr}
   17cb0:	mov	fp, sp
   17cb4:	bl	19028 <__assert_fail@plt+0x7944>
   17cb8:	cmp	r0, #0
   17cbc:	popne	{fp, pc}
   17cc0:	bl	181f4 <__assert_fail@plt+0x6b10>
   17cc4:	push	{fp, lr}
   17cc8:	mov	fp, sp
   17ccc:	bl	19028 <__assert_fail@plt+0x7944>
   17cd0:	cmp	r0, #0
   17cd4:	popne	{fp, pc}
   17cd8:	bl	181f4 <__assert_fail@plt+0x6b10>
   17cdc:	push	{r4, r5, fp, lr}
   17ce0:	add	fp, sp, #8
   17ce4:	mov	r4, r1
   17ce8:	mov	r5, r0
   17cec:	bl	19058 <__assert_fail@plt+0x7974>
   17cf0:	cmp	r0, #0
   17cf4:	popne	{r4, r5, fp, pc}
   17cf8:	cmp	r5, #0
   17cfc:	beq	17d0c <__assert_fail@plt+0x6628>
   17d00:	cmp	r4, #0
   17d04:	bne	17d0c <__assert_fail@plt+0x6628>
   17d08:	pop	{r4, r5, fp, pc}
   17d0c:	bl	181f4 <__assert_fail@plt+0x6b10>
   17d10:	push	{fp, lr}
   17d14:	mov	fp, sp
   17d18:	cmp	r1, #0
   17d1c:	orreq	r1, r1, #1
   17d20:	bl	19058 <__assert_fail@plt+0x7974>
   17d24:	cmp	r0, #0
   17d28:	popne	{fp, pc}
   17d2c:	bl	181f4 <__assert_fail@plt+0x6b10>
   17d30:	push	{fp, lr}
   17d34:	mov	fp, sp
   17d38:	clz	r3, r2
   17d3c:	lsr	ip, r3, #5
   17d40:	clz	r3, r1
   17d44:	lsr	r3, r3, #5
   17d48:	orrs	r3, r3, ip
   17d4c:	movwne	r1, #1
   17d50:	movwne	r2, #1
   17d54:	bl	19418 <__assert_fail@plt+0x7d34>
   17d58:	cmp	r0, #0
   17d5c:	popne	{fp, pc}
   17d60:	bl	181f4 <__assert_fail@plt+0x6b10>
   17d64:	push	{fp, lr}
   17d68:	mov	fp, sp
   17d6c:	mov	r2, r1
   17d70:	mov	r1, r0
   17d74:	mov	r0, #0
   17d78:	bl	19418 <__assert_fail@plt+0x7d34>
   17d7c:	cmp	r0, #0
   17d80:	popne	{fp, pc}
   17d84:	bl	181f4 <__assert_fail@plt+0x6b10>
   17d88:	push	{fp, lr}
   17d8c:	mov	fp, sp
   17d90:	mov	r2, r1
   17d94:	mov	r1, r0
   17d98:	clz	r0, r2
   17d9c:	clz	r3, r1
   17da0:	lsr	r0, r0, #5
   17da4:	lsr	r3, r3, #5
   17da8:	orrs	r0, r3, r0
   17dac:	movwne	r1, #1
   17db0:	movwne	r2, #1
   17db4:	mov	r0, #0
   17db8:	bl	19418 <__assert_fail@plt+0x7d34>
   17dbc:	cmp	r0, #0
   17dc0:	popne	{fp, pc}
   17dc4:	bl	181f4 <__assert_fail@plt+0x6b10>
   17dc8:	push	{r4, r5, r6, sl, fp, lr}
   17dcc:	add	fp, sp, #16
   17dd0:	ldr	r5, [r1]
   17dd4:	mov	r4, r1
   17dd8:	mov	r6, r0
   17ddc:	cmp	r0, #0
   17de0:	beq	17df8 <__assert_fail@plt+0x6714>
   17de4:	mov	r0, #1
   17de8:	add	r0, r0, r5, lsr #1
   17dec:	adds	r5, r5, r0
   17df0:	bcc	17e00 <__assert_fail@plt+0x671c>
   17df4:	b	17e3c <__assert_fail@plt+0x6758>
   17df8:	cmp	r5, #0
   17dfc:	movweq	r5, #64	; 0x40
   17e00:	mov	r0, r6
   17e04:	mov	r1, r5
   17e08:	mov	r2, #1
   17e0c:	bl	19418 <__assert_fail@plt+0x7d34>
   17e10:	cmp	r5, #0
   17e14:	mov	r1, r5
   17e18:	movwne	r1, #1
   17e1c:	cmp	r0, #0
   17e20:	bne	17e34 <__assert_fail@plt+0x6750>
   17e24:	clz	r2, r6
   17e28:	lsr	r2, r2, #5
   17e2c:	orrs	r1, r2, r1
   17e30:	bne	17e3c <__assert_fail@plt+0x6758>
   17e34:	str	r5, [r4]
   17e38:	pop	{r4, r5, r6, sl, fp, pc}
   17e3c:	bl	181f4 <__assert_fail@plt+0x6b10>
   17e40:	push	{r4, r5, r6, r7, fp, lr}
   17e44:	add	fp, sp, #16
   17e48:	ldr	r5, [r1]
   17e4c:	mov	r6, r2
   17e50:	mov	r4, r1
   17e54:	mov	r7, r0
   17e58:	cmp	r0, #0
   17e5c:	beq	17e74 <__assert_fail@plt+0x6790>
   17e60:	mov	r0, #1
   17e64:	add	r0, r0, r5, lsr #1
   17e68:	adds	r5, r5, r0
   17e6c:	bcc	17e8c <__assert_fail@plt+0x67a8>
   17e70:	b	17ec0 <__assert_fail@plt+0x67dc>
   17e74:	cmp	r5, #0
   17e78:	bne	17e8c <__assert_fail@plt+0x67a8>
   17e7c:	mov	r0, #64	; 0x40
   17e80:	cmp	r6, #64	; 0x40
   17e84:	udiv	r5, r0, r6
   17e88:	addhi	r5, r5, #1
   17e8c:	mov	r0, r7
   17e90:	mov	r1, r5
   17e94:	mov	r2, r6
   17e98:	bl	19418 <__assert_fail@plt+0x7d34>
   17e9c:	cmp	r0, #0
   17ea0:	bne	17eb8 <__assert_fail@plt+0x67d4>
   17ea4:	cmp	r7, #0
   17ea8:	beq	17ec0 <__assert_fail@plt+0x67dc>
   17eac:	cmp	r6, #0
   17eb0:	cmpne	r5, #0
   17eb4:	bne	17ec0 <__assert_fail@plt+0x67dc>
   17eb8:	str	r5, [r4]
   17ebc:	pop	{r4, r5, r6, r7, fp, pc}
   17ec0:	bl	181f4 <__assert_fail@plt+0x6b10>
   17ec4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17ec8:	add	fp, sp, #24
   17ecc:	mov	r8, r1
   17ed0:	ldr	r1, [r1]
   17ed4:	mov	r5, r0
   17ed8:	add	r0, r1, r1, asr #1
   17edc:	cmp	r0, r1
   17ee0:	mvnvs	r0, #-2147483648	; 0x80000000
   17ee4:	cmp	r0, r3
   17ee8:	mov	r7, r0
   17eec:	movgt	r7, r3
   17ef0:	cmn	r3, #1
   17ef4:	movle	r7, r0
   17ef8:	ldr	r0, [fp, #8]
   17efc:	cmn	r0, #1
   17f00:	ble	17f28 <__assert_fail@plt+0x6844>
   17f04:	cmp	r0, #0
   17f08:	beq	17f7c <__assert_fail@plt+0x6898>
   17f0c:	cmn	r7, #1
   17f10:	ble	17f50 <__assert_fail@plt+0x686c>
   17f14:	mvn	r4, #-2147483648	; 0x80000000
   17f18:	udiv	r6, r4, r0
   17f1c:	cmp	r6, r7
   17f20:	bge	17f7c <__assert_fail@plt+0x6898>
   17f24:	b	17f8c <__assert_fail@plt+0x68a8>
   17f28:	cmn	r7, #1
   17f2c:	ble	17f6c <__assert_fail@plt+0x6888>
   17f30:	cmn	r0, #1
   17f34:	beq	17f7c <__assert_fail@plt+0x6898>
   17f38:	mov	r6, #-2147483648	; 0x80000000
   17f3c:	mvn	r4, #-2147483648	; 0x80000000
   17f40:	sdiv	r6, r6, r0
   17f44:	cmp	r6, r7
   17f48:	bge	17f7c <__assert_fail@plt+0x6898>
   17f4c:	b	17f8c <__assert_fail@plt+0x68a8>
   17f50:	beq	17f7c <__assert_fail@plt+0x6898>
   17f54:	mov	r6, #-2147483648	; 0x80000000
   17f58:	mvn	r4, #-2147483648	; 0x80000000
   17f5c:	sdiv	r6, r6, r7
   17f60:	cmp	r6, r0
   17f64:	bge	17f7c <__assert_fail@plt+0x6898>
   17f68:	b	17f8c <__assert_fail@plt+0x68a8>
   17f6c:	mvn	r4, #-2147483648	; 0x80000000
   17f70:	sdiv	r6, r4, r0
   17f74:	cmp	r7, r6
   17f78:	blt	17f8c <__assert_fail@plt+0x68a8>
   17f7c:	mul	r6, r7, r0
   17f80:	mov	r4, #64	; 0x40
   17f84:	cmp	r6, #63	; 0x3f
   17f88:	bgt	17f94 <__assert_fail@plt+0x68b0>
   17f8c:	sdiv	r7, r4, r0
   17f90:	mul	r6, r7, r0
   17f94:	cmp	r5, #0
   17f98:	moveq	r4, #0
   17f9c:	streq	r4, [r8]
   17fa0:	sub	r4, r7, r1
   17fa4:	cmp	r4, r2
   17fa8:	bge	18054 <__assert_fail@plt+0x6970>
   17fac:	add	r7, r1, r2
   17fb0:	mov	r6, #0
   17fb4:	mov	r2, #0
   17fb8:	cmp	r7, r3
   17fbc:	movwgt	r6, #1
   17fc0:	cmn	r3, #1
   17fc4:	movwgt	r2, #1
   17fc8:	cmp	r7, r1
   17fcc:	bvs	18088 <__assert_fail@plt+0x69a4>
   17fd0:	ands	r1, r2, r6
   17fd4:	bne	18088 <__assert_fail@plt+0x69a4>
   17fd8:	cmn	r0, #1
   17fdc:	ble	18004 <__assert_fail@plt+0x6920>
   17fe0:	cmp	r0, #0
   17fe4:	beq	18050 <__assert_fail@plt+0x696c>
   17fe8:	cmn	r7, #1
   17fec:	ble	18028 <__assert_fail@plt+0x6944>
   17ff0:	mvn	r1, #-2147483648	; 0x80000000
   17ff4:	udiv	r1, r1, r0
   17ff8:	cmp	r1, r7
   17ffc:	bge	18050 <__assert_fail@plt+0x696c>
   18000:	b	18088 <__assert_fail@plt+0x69a4>
   18004:	cmn	r7, #1
   18008:	ble	18040 <__assert_fail@plt+0x695c>
   1800c:	cmn	r0, #1
   18010:	beq	18050 <__assert_fail@plt+0x696c>
   18014:	mov	r1, #-2147483648	; 0x80000000
   18018:	sdiv	r1, r1, r0
   1801c:	cmp	r1, r7
   18020:	bge	18050 <__assert_fail@plt+0x696c>
   18024:	b	18088 <__assert_fail@plt+0x69a4>
   18028:	beq	18050 <__assert_fail@plt+0x696c>
   1802c:	mov	r1, #-2147483648	; 0x80000000
   18030:	sdiv	r1, r1, r7
   18034:	cmp	r1, r0
   18038:	bge	18050 <__assert_fail@plt+0x696c>
   1803c:	b	18088 <__assert_fail@plt+0x69a4>
   18040:	mvn	r1, #-2147483648	; 0x80000000
   18044:	sdiv	r1, r1, r0
   18048:	cmp	r7, r1
   1804c:	blt	18088 <__assert_fail@plt+0x69a4>
   18050:	mul	r6, r7, r0
   18054:	mov	r0, r5
   18058:	mov	r1, r6
   1805c:	bl	19058 <__assert_fail@plt+0x7974>
   18060:	cmp	r6, #0
   18064:	movwne	r6, #1
   18068:	cmp	r0, #0
   1806c:	bne	18080 <__assert_fail@plt+0x699c>
   18070:	clz	r1, r5
   18074:	lsr	r1, r1, #5
   18078:	orrs	r1, r1, r6
   1807c:	bne	18088 <__assert_fail@plt+0x69a4>
   18080:	str	r7, [r8]
   18084:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18088:	bl	181f4 <__assert_fail@plt+0x6b10>
   1808c:	push	{fp, lr}
   18090:	mov	fp, sp
   18094:	mov	r1, #1
   18098:	bl	18fd4 <__assert_fail@plt+0x78f0>
   1809c:	cmp	r0, #0
   180a0:	popne	{fp, pc}
   180a4:	bl	181f4 <__assert_fail@plt+0x6b10>
   180a8:	push	{fp, lr}
   180ac:	mov	fp, sp
   180b0:	bl	18fd4 <__assert_fail@plt+0x78f0>
   180b4:	cmp	r0, #0
   180b8:	popne	{fp, pc}
   180bc:	bl	181f4 <__assert_fail@plt+0x6b10>
   180c0:	push	{fp, lr}
   180c4:	mov	fp, sp
   180c8:	mov	r1, #1
   180cc:	bl	18fd4 <__assert_fail@plt+0x78f0>
   180d0:	cmp	r0, #0
   180d4:	popne	{fp, pc}
   180d8:	bl	181f4 <__assert_fail@plt+0x6b10>
   180dc:	push	{fp, lr}
   180e0:	mov	fp, sp
   180e4:	bl	18fd4 <__assert_fail@plt+0x78f0>
   180e8:	cmp	r0, #0
   180ec:	popne	{fp, pc}
   180f0:	bl	181f4 <__assert_fail@plt+0x6b10>
   180f4:	push	{r4, r5, r6, sl, fp, lr}
   180f8:	add	fp, sp, #16
   180fc:	mov	r5, r0
   18100:	mov	r0, r1
   18104:	mov	r4, r1
   18108:	bl	19028 <__assert_fail@plt+0x7944>
   1810c:	cmp	r0, #0
   18110:	beq	1812c <__assert_fail@plt+0x6a48>
   18114:	mov	r1, r5
   18118:	mov	r2, r4
   1811c:	mov	r6, r0
   18120:	bl	113cc <memcpy@plt>
   18124:	mov	r0, r6
   18128:	pop	{r4, r5, r6, sl, fp, pc}
   1812c:	bl	181f4 <__assert_fail@plt+0x6b10>
   18130:	push	{r4, r5, r6, sl, fp, lr}
   18134:	add	fp, sp, #16
   18138:	mov	r5, r0
   1813c:	mov	r0, r1
   18140:	mov	r4, r1
   18144:	bl	19028 <__assert_fail@plt+0x7944>
   18148:	cmp	r0, #0
   1814c:	beq	18168 <__assert_fail@plt+0x6a84>
   18150:	mov	r1, r5
   18154:	mov	r2, r4
   18158:	mov	r6, r0
   1815c:	bl	113cc <memcpy@plt>
   18160:	mov	r0, r6
   18164:	pop	{r4, r5, r6, sl, fp, pc}
   18168:	bl	181f4 <__assert_fail@plt+0x6b10>
   1816c:	push	{r4, r5, r6, sl, fp, lr}
   18170:	add	fp, sp, #16
   18174:	mov	r5, r0
   18178:	add	r0, r1, #1
   1817c:	mov	r4, r1
   18180:	bl	19028 <__assert_fail@plt+0x7944>
   18184:	cmp	r0, #0
   18188:	beq	181b0 <__assert_fail@plt+0x6acc>
   1818c:	mov	r6, r0
   18190:	mov	r0, #0
   18194:	mov	r1, r5
   18198:	mov	r2, r4
   1819c:	strb	r0, [r6, r4]
   181a0:	mov	r0, r6
   181a4:	bl	113cc <memcpy@plt>
   181a8:	mov	r0, r6
   181ac:	pop	{r4, r5, r6, sl, fp, pc}
   181b0:	bl	181f4 <__assert_fail@plt+0x6b10>
   181b4:	push	{r4, r5, r6, sl, fp, lr}
   181b8:	add	fp, sp, #16
   181bc:	mov	r4, r0
   181c0:	bl	11534 <strlen@plt>
   181c4:	add	r5, r0, #1
   181c8:	mov	r0, r5
   181cc:	bl	19028 <__assert_fail@plt+0x7944>
   181d0:	cmp	r0, #0
   181d4:	beq	181f0 <__assert_fail@plt+0x6b0c>
   181d8:	mov	r1, r4
   181dc:	mov	r2, r5
   181e0:	mov	r6, r0
   181e4:	bl	113cc <memcpy@plt>
   181e8:	mov	r0, r6
   181ec:	pop	{r4, r5, r6, sl, fp, pc}
   181f0:	bl	181f4 <__assert_fail@plt+0x6b10>
   181f4:	push	{fp, lr}
   181f8:	mov	fp, sp
   181fc:	movw	r0, #49496	; 0xc158
   18200:	movw	r1, #44798	; 0xaefe
   18204:	mov	r2, #5
   18208:	movt	r0, #2
   1820c:	movt	r1, #1
   18210:	ldr	r4, [r0]
   18214:	mov	r0, #0
   18218:	bl	11414 <dcgettext@plt>
   1821c:	movw	r2, #43587	; 0xaa43
   18220:	mov	r3, r0
   18224:	mov	r0, r4
   18228:	mov	r1, #0
   1822c:	movt	r2, #1
   18230:	bl	114bc <error@plt>
   18234:	bl	116cc <abort@plt>
   18238:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1823c:	add	fp, sp, #24
   18240:	sub	sp, sp, #16
   18244:	mov	r8, r0
   18248:	ldr	r0, [fp, #16]
   1824c:	mov	r5, r3
   18250:	mov	r6, r2
   18254:	mov	r2, r1
   18258:	add	r3, sp, #8
   1825c:	mov	r1, #0
   18260:	str	r0, [sp]
   18264:	mov	r0, r8
   18268:	bl	18334 <__assert_fail@plt+0x6c50>
   1826c:	cmp	r0, #0
   18270:	bne	182fc <__assert_fail@plt+0x6c18>
   18274:	ldr	r4, [sp, #8]
   18278:	ldr	r7, [sp, #12]
   1827c:	subs	r0, r4, r6
   18280:	sbcs	r0, r7, r5
   18284:	bcc	182a8 <__assert_fail@plt+0x6bc4>
   18288:	ldr	r1, [fp, #8]
   1828c:	ldr	r0, [fp, #12]
   18290:	subs	r1, r1, r4
   18294:	sbcs	r0, r0, r7
   18298:	movcs	r0, r4
   1829c:	movcs	r1, r7
   182a0:	subcs	sp, fp, #24
   182a4:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   182a8:	bl	11558 <__errno_location@plt>
   182ac:	subs	r1, r4, #1073741824	; 0x40000000
   182b0:	sbcs	r1, r7, #0
   182b4:	movcc	r1, #34	; 0x22
   182b8:	movcs	r1, #75	; 0x4b
   182bc:	str	r1, [r0]
   182c0:	ldr	r6, [r0]
   182c4:	ldr	r4, [fp, #24]
   182c8:	ldr	r5, [fp, #20]
   182cc:	mov	r0, r8
   182d0:	bl	16790 <__assert_fail@plt+0x50ac>
   182d4:	subs	r1, r6, #22
   182d8:	movw	r2, #43602	; 0xaa52
   182dc:	str	r0, [sp]
   182e0:	mov	r3, r5
   182e4:	movne	r1, r6
   182e8:	cmp	r4, #0
   182ec:	movt	r2, #1
   182f0:	movweq	r4, #1
   182f4:	mov	r0, r4
   182f8:	bl	114bc <error@plt>
   182fc:	cmp	r0, #1
   18300:	beq	18318 <__assert_fail@plt+0x6c34>
   18304:	cmp	r0, #3
   18308:	bne	18324 <__assert_fail@plt+0x6c40>
   1830c:	bl	11558 <__errno_location@plt>
   18310:	mov	r1, #0
   18314:	b	182bc <__assert_fail@plt+0x6bd8>
   18318:	bl	11558 <__errno_location@plt>
   1831c:	mov	r1, #75	; 0x4b
   18320:	b	182bc <__assert_fail@plt+0x6bd8>
   18324:	bl	11558 <__errno_location@plt>
   18328:	b	182c0 <__assert_fail@plt+0x6bdc>
   1832c:	mov	r1, #10
   18330:	b	18238 <__assert_fail@plt+0x6b54>
   18334:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18338:	add	fp, sp, #28
   1833c:	sub	sp, sp, #44	; 0x2c
   18340:	cmp	r2, #37	; 0x25
   18344:	bcs	18fb4 <__assert_fail@plt+0x78d0>
   18348:	ldr	sl, [fp, #8]
   1834c:	mov	r6, r2
   18350:	mov	r7, r1
   18354:	mov	r4, r0
   18358:	str	r3, [sp, #36]	; 0x24
   1835c:	bl	11558 <__errno_location@plt>
   18360:	mov	r5, r0
   18364:	mov	r0, #0
   18368:	str	r0, [r5]
   1836c:	bl	1151c <__ctype_b_loc@plt>
   18370:	ldr	r1, [r0]
   18374:	mov	r2, r4
   18378:	ldrb	r0, [r2], #1
   1837c:	add	r3, r1, r0, lsl #1
   18380:	ldrb	r3, [r3, #1]
   18384:	tst	r3, #32
   18388:	bne	18378 <__assert_fail@plt+0x6c94>
   1838c:	sub	r9, fp, #32
   18390:	cmp	r7, #0
   18394:	mov	r8, #4
   18398:	movne	r9, r7
   1839c:	cmp	r0, #45	; 0x2d
   183a0:	beq	18fa8 <__assert_fail@plt+0x78c4>
   183a4:	mov	r0, r4
   183a8:	mov	r1, r9
   183ac:	mov	r2, r6
   183b0:	mov	r3, #0
   183b4:	bl	113d8 <__strtoull_internal@plt>
   183b8:	mov	r7, r1
   183bc:	ldr	r1, [r9]
   183c0:	cmp	r1, r4
   183c4:	beq	183f0 <__assert_fail@plt+0x6d0c>
   183c8:	mov	r6, r0
   183cc:	ldr	r0, [r5]
   183d0:	cmp	r0, #0
   183d4:	beq	1842c <__assert_fail@plt+0x6d48>
   183d8:	cmp	r0, #34	; 0x22
   183dc:	bne	18fa8 <__assert_fail@plt+0x78c4>
   183e0:	mov	r8, #1
   183e4:	cmp	sl, #0
   183e8:	bne	18438 <__assert_fail@plt+0x6d54>
   183ec:	b	18fa0 <__assert_fail@plt+0x78bc>
   183f0:	cmp	sl, #0
   183f4:	beq	18fa8 <__assert_fail@plt+0x78c4>
   183f8:	mov	r5, r1
   183fc:	ldrb	r1, [r4]
   18400:	cmp	r1, #0
   18404:	beq	18fa8 <__assert_fail@plt+0x78c4>
   18408:	mov	r0, sl
   1840c:	bl	11540 <strchr@plt>
   18410:	cmp	r0, #0
   18414:	beq	18fa8 <__assert_fail@plt+0x78c4>
   18418:	mov	r1, r5
   1841c:	mov	r8, #0
   18420:	mov	r6, #1
   18424:	mov	r7, #0
   18428:	b	18438 <__assert_fail@plt+0x6d54>
   1842c:	mov	r8, r0
   18430:	cmp	sl, #0
   18434:	beq	18fa0 <__assert_fail@plt+0x78bc>
   18438:	ldrb	r4, [r1]
   1843c:	cmp	r4, #0
   18440:	beq	18fa0 <__assert_fail@plt+0x78bc>
   18444:	str	r1, [sp, #32]
   18448:	mov	r0, sl
   1844c:	mov	r1, r4
   18450:	bl	11540 <strchr@plt>
   18454:	cmp	r0, #0
   18458:	beq	18720 <__assert_fail@plt+0x703c>
   1845c:	sub	r0, r4, #69	; 0x45
   18460:	mov	r1, #1
   18464:	mov	r3, #0
   18468:	mov	r5, #1024	; 0x400
   1846c:	cmp	r0, #47	; 0x2f
   18470:	str	r1, [sp, #28]
   18474:	bhi	18578 <__assert_fail@plt+0x6e94>
   18478:	add	r1, pc, #0
   1847c:	ldr	pc, [r1, r0, lsl #2]
   18480:	andeq	r8, r1, r0, asr #10
   18484:	andeq	r8, r1, r8, ror r5
   18488:	andeq	r8, r1, r0, asr #10
   1848c:	andeq	r8, r1, r8, ror r5
   18490:	andeq	r8, r1, r8, ror r5
   18494:	andeq	r8, r1, r8, ror r5
   18498:	andeq	r8, r1, r0, asr #10
   1849c:	andeq	r8, r1, r8, ror r5
   184a0:	andeq	r8, r1, r0, asr #10
   184a4:	andeq	r8, r1, r8, ror r5
   184a8:	andeq	r8, r1, r8, ror r5
   184ac:	andeq	r8, r1, r0, asr #10
   184b0:	andeq	r8, r1, r8, ror r5
   184b4:	andeq	r8, r1, r8, ror r5
   184b8:	andeq	r8, r1, r8, ror r5
   184bc:	andeq	r8, r1, r0, asr #10
   184c0:	andeq	r8, r1, r8, ror r5
   184c4:	andeq	r8, r1, r8, ror r5
   184c8:	andeq	r8, r1, r8, ror r5
   184cc:	andeq	r8, r1, r8, ror r5
   184d0:	andeq	r8, r1, r0, asr #10
   184d4:	andeq	r8, r1, r0, asr #10
   184d8:	andeq	r8, r1, r8, ror r5
   184dc:	andeq	r8, r1, r8, ror r5
   184e0:	andeq	r8, r1, r8, ror r5
   184e4:	andeq	r8, r1, r8, ror r5
   184e8:	andeq	r8, r1, r8, ror r5
   184ec:	andeq	r8, r1, r8, ror r5
   184f0:	andeq	r8, r1, r8, ror r5
   184f4:	andeq	r8, r1, r8, ror r5
   184f8:	andeq	r8, r1, r8, ror r5
   184fc:	andeq	r8, r1, r8, ror r5
   18500:	andeq	r8, r1, r8, ror r5
   18504:	andeq	r8, r1, r8, ror r5
   18508:	andeq	r8, r1, r0, asr #10
   1850c:	andeq	r8, r1, r8, ror r5
   18510:	andeq	r8, r1, r8, ror r5
   18514:	andeq	r8, r1, r8, ror r5
   18518:	andeq	r8, r1, r0, asr #10
   1851c:	andeq	r8, r1, r8, ror r5
   18520:	andeq	r8, r1, r0, asr #10
   18524:	andeq	r8, r1, r8, ror r5
   18528:	andeq	r8, r1, r8, ror r5
   1852c:	andeq	r8, r1, r8, ror r5
   18530:	andeq	r8, r1, r8, ror r5
   18534:	andeq	r8, r1, r8, ror r5
   18538:	andeq	r8, r1, r8, ror r5
   1853c:	andeq	r8, r1, r0, asr #10
   18540:	mov	r0, sl
   18544:	mov	r1, #48	; 0x30
   18548:	bl	11540 <strchr@plt>
   1854c:	cmp	r0, #0
   18550:	beq	18574 <__assert_fail@plt+0x6e90>
   18554:	ldr	r1, [sp, #32]
   18558:	ldrb	r0, [r1, #1]
   1855c:	cmp	r0, #66	; 0x42
   18560:	cmpne	r0, #68	; 0x44
   18564:	bne	1872c <__assert_fail@plt+0x7048>
   18568:	mov	r5, #1000	; 0x3e8
   1856c:	mov	r0, #2
   18570:	str	r0, [sp, #28]
   18574:	mov	r3, #0
   18578:	sub	r0, r4, #66	; 0x42
   1857c:	cmp	r0, #53	; 0x35
   18580:	bhi	18720 <__assert_fail@plt+0x703c>
   18584:	add	r1, pc, #0
   18588:	ldr	pc, [r1, r0, lsl #2]
   1858c:	andeq	r8, r1, r8, lsr #21
   18590:	andeq	r8, r1, r0, lsr #14
   18594:	andeq	r8, r1, r0, lsr #14
   18598:	ldrdeq	r8, [r1], -r0
   1859c:	andeq	r8, r1, r0, lsr #14
   185a0:	andeq	r8, r1, r4, ror #12
   185a4:	andeq	r8, r1, r0, lsr #14
   185a8:	andeq	r8, r1, r0, lsr #14
   185ac:	andeq	r8, r1, r0, lsr #14
   185b0:	andeq	r8, r1, r0, asr r7
   185b4:	andeq	r8, r1, r0, lsr #14
   185b8:	muleq	r1, r8, r7
   185bc:	andeq	r8, r1, r0, lsr #14
   185c0:	andeq	r8, r1, r0, lsr #14
   185c4:	andeq	r8, r1, r8, lsr #24
   185c8:	andeq	r8, r1, r0, lsr #14
   185cc:	andeq	r8, r1, r0, lsr #14
   185d0:	andeq	r8, r1, r0, lsr #14
   185d4:	andeq	r8, r1, r4, lsr #16
   185d8:	andeq	r8, r1, r0, lsr #14
   185dc:	andeq	r8, r1, r0, lsr #14
   185e0:	andeq	r8, r1, r0, lsr #14
   185e4:	andeq	r8, r1, r0, lsr #14
   185e8:	andeq	r8, r1, r0, asr sp
   185ec:	andeq	r8, r1, ip, lsl #18
   185f0:	andeq	r8, r1, r0, lsr #14
   185f4:	andeq	r8, r1, r0, lsr #14
   185f8:	andeq	r8, r1, r0, lsr #14
   185fc:	andeq	r8, r1, r0, lsr #14
   18600:	andeq	r8, r1, r0, lsr #14
   18604:	andeq	r8, r1, r0, lsr #14
   18608:	andeq	r8, r1, r0, lsr #14
   1860c:	andeq	r8, r1, r8, lsr #30
   18610:	andeq	r8, r1, r0, lsl #31
   18614:	andeq	r8, r1, r0, lsr #14
   18618:	andeq	r8, r1, r0, lsr #14
   1861c:	andeq	r8, r1, r0, lsr #14
   18620:	andeq	r8, r1, r4, ror #12
   18624:	andeq	r8, r1, r0, lsr #14
   18628:	andeq	r8, r1, r0, lsr #14
   1862c:	andeq	r8, r1, r0, lsr #14
   18630:	andeq	r8, r1, r0, asr r7
   18634:	andeq	r8, r1, r0, lsr #14
   18638:	muleq	r1, r8, r7
   1863c:	andeq	r8, r1, r0, lsr #14
   18640:	andeq	r8, r1, r0, lsr #14
   18644:	andeq	r8, r1, r0, lsr #14
   18648:	andeq	r8, r1, r0, lsr #14
   1864c:	andeq	r8, r1, r0, lsr #14
   18650:	andeq	r8, r1, r0, lsr #14
   18654:	andeq	r8, r1, r4, lsr #16
   18658:	andeq	r8, r1, r0, lsr #14
   1865c:	andeq	r8, r1, r0, lsr #14
   18660:	andeq	r8, r1, ip, asr pc
   18664:	mvn	r0, #0
   18668:	mvn	r1, #0
   1866c:	mov	r2, r5
   18670:	mov	sl, r3
   18674:	bl	199fc <__assert_fail@plt+0x8318>
   18678:	subs	r3, r0, r6
   1867c:	mov	lr, #0
   18680:	umull	r4, r2, r6, r5
   18684:	str	r1, [sp, #20]
   18688:	sbcs	r3, r1, r7
   1868c:	mla	ip, r6, sl, r2
   18690:	mov	r2, r1
   18694:	movwcc	lr, #1
   18698:	mla	r7, r7, r5, ip
   1869c:	mov	r2, #0
   186a0:	cmp	lr, #0
   186a4:	mvnne	r4, #0
   186a8:	mvnne	r7, #0
   186ac:	subs	r6, r0, r4
   186b0:	sbcs	r6, r1, r7
   186b4:	movwcc	r2, #1
   186b8:	umull	r3, r6, r4, r5
   186bc:	cmp	r2, #0
   186c0:	str	r6, [sp, #16]
   186c4:	mvnne	r3, #0
   186c8:	cmp	r2, #0
   186cc:	umull	r6, ip, r3, r5
   186d0:	mla	r1, r3, sl, ip
   186d4:	ldr	ip, [sp, #16]
   186d8:	str	r1, [sp, #12]
   186dc:	mla	r4, r4, sl, ip
   186e0:	mla	r4, r7, r5, r4
   186e4:	ldr	r7, [sp, #12]
   186e8:	mvnne	r4, #0
   186ec:	subs	r0, r0, r3
   186f0:	ldr	r0, [sp, #20]
   186f4:	mla	r7, r4, r5, r7
   186f8:	sbcs	r0, r0, r4
   186fc:	mov	r0, #0
   18700:	movwcc	r0, #1
   18704:	cmp	r0, #0
   18708:	mov	r1, r0
   1870c:	orr	r0, lr, r2
   18710:	mvnne	r7, #0
   18714:	mvnne	r6, #0
   18718:	orr	r3, r0, r1
   1871c:	b	18f80 <__assert_fail@plt+0x789c>
   18720:	ldr	r0, [sp, #36]	; 0x24
   18724:	orr	r8, r8, #2
   18728:	b	18fa4 <__assert_fail@plt+0x78c0>
   1872c:	cmp	r0, #105	; 0x69
   18730:	mov	r3, #0
   18734:	bne	18578 <__assert_fail@plt+0x6e94>
   18738:	ldrb	r0, [r1, #2]
   1873c:	mov	r1, #1
   18740:	cmp	r0, #66	; 0x42
   18744:	movweq	r1, #3
   18748:	str	r1, [sp, #28]
   1874c:	b	18578 <__assert_fail@plt+0x6e94>
   18750:	mvn	r0, #0
   18754:	mvn	r1, #0
   18758:	mov	r2, r5
   1875c:	mov	r4, r3
   18760:	bl	199fc <__assert_fail@plt+0x8318>
   18764:	subs	r0, r0, r6
   18768:	mov	r2, #0
   1876c:	sbcs	r0, r1, r7
   18770:	movwcc	r2, #1
   18774:	umull	r0, r1, r6, r5
   18778:	mla	r1, r6, r4, r1
   1877c:	cmp	r2, #0
   18780:	mov	r3, r2
   18784:	mla	r7, r7, r5, r1
   18788:	mvnne	r0, #0
   1878c:	mvnne	r7, #0
   18790:	mov	r6, r0
   18794:	b	18f80 <__assert_fail@plt+0x789c>
   18798:	mvn	r0, #0
   1879c:	mvn	r1, #0
   187a0:	mov	r2, r5
   187a4:	str	r3, [sp, #24]
   187a8:	bl	199fc <__assert_fail@plt+0x8318>
   187ac:	subs	r3, r0, r6
   187b0:	mov	ip, r0
   187b4:	umull	r4, r0, r6, r5
   187b8:	mov	sl, #0
   187bc:	sbcs	r3, r1, r7
   187c0:	str	r0, [sp, #20]
   187c4:	ldr	r0, [sp, #24]
   187c8:	mov	r3, #0
   187cc:	movwcc	r3, #1
   187d0:	cmp	r3, #0
   187d4:	mvnne	r4, #0
   187d8:	cmp	r3, #0
   187dc:	umull	lr, r2, r4, r5
   187e0:	mla	r2, r4, r0, r2
   187e4:	str	r2, [sp, #16]
   187e8:	ldr	r2, [sp, #20]
   187ec:	mla	r6, r6, r0, r2
   187f0:	ldr	r0, [sp, #16]
   187f4:	mla	r6, r7, r5, r6
   187f8:	mvnne	r6, #0
   187fc:	mla	r7, r6, r5, r0
   18800:	subs	r0, ip, r4
   18804:	sbcs	r0, r1, r6
   18808:	movwcc	sl, #1
   1880c:	cmp	sl, #0
   18810:	orr	r3, r3, sl
   18814:	mvnne	lr, #0
   18818:	mvnne	r7, #0
   1881c:	mov	r6, lr
   18820:	b	18f80 <__assert_fail@plt+0x789c>
   18824:	mvn	r0, #0
   18828:	mvn	r1, #0
   1882c:	mov	r2, r5
   18830:	mov	sl, r3
   18834:	bl	199fc <__assert_fail@plt+0x8318>
   18838:	subs	r3, r0, r6
   1883c:	mov	ip, r1
   18840:	umull	r2, lr, r6, r5
   18844:	str	r0, [sp, #20]
   18848:	sbcs	r3, r1, r7
   1884c:	mov	r1, #0
   18850:	mla	r6, r6, sl, lr
   18854:	mov	lr, #0
   18858:	str	ip, [sp, #16]
   1885c:	movwcc	r1, #1
   18860:	mla	r7, r7, r5, r6
   18864:	cmp	r1, #0
   18868:	mvnne	r2, #0
   1886c:	cmp	r1, #0
   18870:	umull	r3, r4, r2, r5
   18874:	mvnne	r7, #0
   18878:	mla	r4, r2, sl, r4
   1887c:	subs	r2, r0, r2
   18880:	sbcs	r2, ip, r7
   18884:	mla	r4, r7, r5, r4
   18888:	movwcc	lr, #1
   1888c:	mov	r2, #0
   18890:	cmp	lr, #0
   18894:	mvnne	r3, #0
   18898:	mvnne	r4, #0
   1889c:	subs	r7, r0, r3
   188a0:	mov	r0, r5
   188a4:	sbcs	r7, ip, r4
   188a8:	movwcc	r2, #1
   188ac:	umull	r5, r7, r3, r5
   188b0:	cmp	r2, #0
   188b4:	mla	r3, r3, sl, r7
   188b8:	mvnne	r5, #0
   188bc:	mla	r3, r4, r0, r3
   188c0:	cmp	r2, #0
   188c4:	umull	r6, ip, r5, r0
   188c8:	mvnne	r3, #0
   188cc:	mla	ip, r5, sl, ip
   188d0:	mla	r7, r3, r0, ip
   188d4:	ldr	r0, [sp, #20]
   188d8:	subs	r0, r0, r5
   188dc:	ldr	r0, [sp, #16]
   188e0:	sbcs	r0, r0, r3
   188e4:	mov	r0, #0
   188e8:	movwcc	r0, #1
   188ec:	cmp	r0, #0
   188f0:	mov	r3, r0
   188f4:	orr	r0, r1, lr
   188f8:	orr	r0, r0, r2
   188fc:	mvnne	r7, #0
   18900:	mvnne	r6, #0
   18904:	orr	r3, r0, r3
   18908:	b	18f80 <__assert_fail@plt+0x789c>
   1890c:	mvn	r0, #0
   18910:	mvn	r1, #0
   18914:	mov	r2, r5
   18918:	mov	r4, r3
   1891c:	str	r3, [sp, #24]
   18920:	bl	199fc <__assert_fail@plt+0x8318>
   18924:	umull	r3, r2, r6, r5
   18928:	mla	r2, r6, r4, r2
   1892c:	subs	r6, r0, r6
   18930:	sbcs	r6, r1, r7
   18934:	mla	ip, r7, r5, r2
   18938:	ldr	r2, [sp, #24]
   1893c:	mov	r6, #0
   18940:	movwcc	r6, #1
   18944:	cmp	r6, #0
   18948:	str	r6, [sp, #20]
   1894c:	mov	r6, #0
   18950:	mvnne	r3, #0
   18954:	mvnne	ip, #0
   18958:	subs	r4, r0, r3
   1895c:	umull	r7, lr, r3, r5
   18960:	sbcs	r4, r1, ip
   18964:	mla	r3, r3, r2, lr
   18968:	movwcc	r6, #1
   1896c:	cmp	r6, #0
   18970:	str	r6, [sp, #16]
   18974:	mvnne	r7, #0
   18978:	cmp	r6, #0
   1897c:	umull	sl, r4, r7, r5
   18980:	mla	r4, r7, r2, r4
   18984:	mla	r2, ip, r5, r3
   18988:	mov	ip, #0
   1898c:	mvnne	r2, #0
   18990:	subs	r3, r0, r7
   18994:	mla	r6, r2, r5, r4
   18998:	mov	r4, r0
   1899c:	sbcs	r2, r1, r2
   189a0:	mov	r0, #0
   189a4:	movwcc	r0, #1
   189a8:	mov	r3, r4
   189ac:	cmp	r0, #0
   189b0:	str	r0, [sp, #12]
   189b4:	mov	r0, r1
   189b8:	str	r3, [sp, #4]
   189bc:	mvnne	sl, #0
   189c0:	mvnne	r6, #0
   189c4:	str	r0, [sp, #8]
   189c8:	subs	r2, r4, sl
   189cc:	ldr	r4, [sp, #24]
   189d0:	sbcs	r2, r1, r6
   189d4:	movwcc	ip, #1
   189d8:	umull	r7, r2, sl, r5
   189dc:	cmp	ip, #0
   189e0:	mla	r2, sl, r4, r2
   189e4:	mvnne	r7, #0
   189e8:	cmp	ip, #0
   189ec:	mov	sl, #0
   189f0:	umull	r1, lr, r7, r5
   189f4:	mla	r2, r6, r5, r2
   189f8:	mvnne	r2, #0
   189fc:	mla	lr, r7, r4, lr
   18a00:	subs	r6, r3, r7
   18a04:	mla	lr, r2, r5, lr
   18a08:	sbcs	r2, r0, r2
   18a0c:	movwcc	sl, #1
   18a10:	mov	r2, #0
   18a14:	cmp	sl, #0
   18a18:	mvnne	r1, #0
   18a1c:	mvnne	lr, #0
   18a20:	subs	r6, r3, r1
   18a24:	ldr	r3, [sp, #24]
   18a28:	sbcs	r6, r0, lr
   18a2c:	umull	r0, r7, r1, r5
   18a30:	movwcc	r2, #1
   18a34:	cmp	r2, #0
   18a38:	mvnne	r0, #0
   18a3c:	mla	r1, r1, r3, r7
   18a40:	cmp	r2, #0
   18a44:	umull	r6, r4, r0, r5
   18a48:	mla	r1, lr, r5, r1
   18a4c:	mla	r4, r0, r3, r4
   18a50:	ldr	r3, [sp, #4]
   18a54:	mvnne	r1, #0
   18a58:	mla	r7, r1, r5, r4
   18a5c:	ldr	r5, [sp, #16]
   18a60:	subs	r0, r3, r0
   18a64:	ldr	r0, [sp, #8]
   18a68:	sbcs	r0, r0, r1
   18a6c:	mov	r0, #0
   18a70:	movwcc	r0, #1
   18a74:	cmp	r0, #0
   18a78:	mov	r1, r0
   18a7c:	ldr	r0, [sp, #20]
   18a80:	mvnne	r7, #0
   18a84:	mvnne	r6, #0
   18a88:	orr	r0, r0, r5
   18a8c:	ldr	r5, [sp, #12]
   18a90:	orr	r0, r0, r5
   18a94:	orr	r0, r0, ip
   18a98:	orr	r0, r0, sl
   18a9c:	orr	r0, r0, r2
   18aa0:	orr	r0, r0, r1
   18aa4:	b	18f20 <__assert_fail@plt+0x783c>
   18aa8:	mov	r1, #0
   18aac:	lsl	r2, r7, #10
   18ab0:	lsl	r0, r6, #10
   18ab4:	lsr	r3, r7, #22
   18ab8:	cmp	r1, r7, lsr #22
   18abc:	orr	r2, r2, r6, lsr #22
   18ac0:	mvnne	r0, #0
   18ac4:	movwne	r3, #1
   18ac8:	cmp	r1, r7, lsr #22
   18acc:	b	18f4c <__assert_fail@plt+0x7868>
   18ad0:	mvn	r0, #0
   18ad4:	mvn	r1, #0
   18ad8:	mov	r2, r5
   18adc:	mov	sl, r3
   18ae0:	bl	199fc <__assert_fail@plt+0x8318>
   18ae4:	subs	r2, r0, r6
   18ae8:	mov	ip, r0
   18aec:	mov	r0, #0
   18af0:	sbcs	r2, r1, r7
   18af4:	movwcc	r0, #1
   18af8:	umull	r4, r2, r6, r5
   18afc:	cmp	r0, #0
   18b00:	mla	r2, r6, sl, r2
   18b04:	str	r0, [sp, #20]
   18b08:	mvnne	r4, #0
   18b0c:	cmp	r0, #0
   18b10:	mla	r2, r7, r5, r2
   18b14:	mov	r0, #0
   18b18:	umull	lr, r3, r4, r5
   18b1c:	mvnne	r2, #0
   18b20:	mla	r3, r4, sl, r3
   18b24:	mla	r6, r2, r5, r3
   18b28:	subs	r3, ip, r4
   18b2c:	sbcs	r2, r1, r2
   18b30:	mov	r3, r1
   18b34:	movwcc	r0, #1
   18b38:	str	r3, [sp, #8]
   18b3c:	cmp	r0, #0
   18b40:	str	r0, [sp, #16]
   18b44:	mov	r0, ip
   18b48:	mvnne	lr, #0
   18b4c:	mvnne	r6, #0
   18b50:	str	r0, [sp, #12]
   18b54:	subs	r2, ip, lr
   18b58:	umull	r7, r4, lr, r5
   18b5c:	sbcs	r2, r1, r6
   18b60:	mla	r4, lr, sl, r4
   18b64:	mov	r2, #0
   18b68:	mla	r6, r6, r5, r4
   18b6c:	mov	r4, #0
   18b70:	movwcc	r2, #1
   18b74:	cmp	r2, #0
   18b78:	mvnne	r7, #0
   18b7c:	cmp	r2, #0
   18b80:	umull	r1, ip, r7, r5
   18b84:	mvnne	r6, #0
   18b88:	mla	ip, r7, sl, ip
   18b8c:	subs	r7, r0, r7
   18b90:	mla	lr, r6, r5, ip
   18b94:	sbcs	r7, r3, r6
   18b98:	mov	ip, #0
   18b9c:	movwcc	ip, #1
   18ba0:	cmp	ip, #0
   18ba4:	mvnne	r1, #0
   18ba8:	mvnne	lr, #0
   18bac:	subs	r7, r0, r1
   18bb0:	sbcs	r7, r3, lr
   18bb4:	movwcc	r4, #1
   18bb8:	umull	r0, r7, r1, r5
   18bbc:	cmp	r4, #0
   18bc0:	mla	r1, r1, sl, r7
   18bc4:	mvnne	r0, #0
   18bc8:	mla	r1, lr, r5, r1
   18bcc:	cmp	r4, #0
   18bd0:	umull	r6, r3, r0, r5
   18bd4:	mvnne	r1, #0
   18bd8:	mla	r3, r0, sl, r3
   18bdc:	mla	r7, r1, r5, r3
   18be0:	ldr	r3, [sp, #12]
   18be4:	subs	r0, r3, r0
   18be8:	ldr	r3, [sp, #16]
   18bec:	ldr	r0, [sp, #8]
   18bf0:	sbcs	r0, r0, r1
   18bf4:	mov	r0, #0
   18bf8:	movwcc	r0, #1
   18bfc:	cmp	r0, #0
   18c00:	mov	r1, r0
   18c04:	ldr	r0, [sp, #20]
   18c08:	mvnne	r7, #0
   18c0c:	mvnne	r6, #0
   18c10:	orr	r0, r0, r3
   18c14:	orr	r0, r0, r2
   18c18:	orr	r0, r0, ip
   18c1c:	orr	r0, r0, r4
   18c20:	orr	r3, r0, r1
   18c24:	b	18f80 <__assert_fail@plt+0x789c>
   18c28:	mvn	r0, #0
   18c2c:	mvn	r1, #0
   18c30:	mov	r2, r5
   18c34:	mov	sl, r3
   18c38:	bl	199fc <__assert_fail@plt+0x8318>
   18c3c:	umull	r3, r2, r6, r5
   18c40:	mov	lr, r1
   18c44:	mov	r1, r0
   18c48:	mla	r2, r6, sl, r2
   18c4c:	subs	r6, r0, r6
   18c50:	mov	r0, #0
   18c54:	sbcs	r6, lr, r7
   18c58:	mla	r2, r7, r5, r2
   18c5c:	movwcc	r0, #1
   18c60:	cmp	r0, #0
   18c64:	str	r0, [sp, #20]
   18c68:	mov	r0, r1
   18c6c:	mvnne	r3, #0
   18c70:	mvnne	r2, #0
   18c74:	str	r0, [sp, #16]
   18c78:	subs	r4, r1, r3
   18c7c:	umull	r7, ip, r3, r5
   18c80:	sbcs	r4, lr, r2
   18c84:	mla	r3, r3, sl, ip
   18c88:	mov	ip, #0
   18c8c:	mov	r4, #0
   18c90:	mla	r2, r2, r5, r3
   18c94:	movwcc	r4, #1
   18c98:	cmp	r4, #0
   18c9c:	mvnne	r7, #0
   18ca0:	cmp	r4, #0
   18ca4:	umull	r1, r6, r7, r5
   18ca8:	mvnne	r2, #0
   18cac:	mla	r6, r7, sl, r6
   18cb0:	mla	r3, r2, r5, r6
   18cb4:	subs	r6, r0, r7
   18cb8:	sbcs	r2, lr, r2
   18cbc:	movwcc	ip, #1
   18cc0:	mov	r2, #0
   18cc4:	cmp	ip, #0
   18cc8:	mvnne	r1, #0
   18ccc:	mvnne	r3, #0
   18cd0:	subs	r6, r0, r1
   18cd4:	sbcs	r6, lr, r3
   18cd8:	movwcc	r2, #1
   18cdc:	umull	r0, r6, r1, r5
   18ce0:	cmp	r2, #0
   18ce4:	str	r6, [sp, #12]
   18ce8:	mvnne	r0, #0
   18cec:	cmp	r2, #0
   18cf0:	umull	r6, r7, r0, r5
   18cf4:	mla	r7, r0, sl, r7
   18cf8:	str	r7, [sp, #8]
   18cfc:	ldr	r7, [sp, #12]
   18d00:	mla	r1, r1, sl, r7
   18d04:	mla	r1, r3, r5, r1
   18d08:	ldr	r3, [sp, #8]
   18d0c:	mvnne	r1, #0
   18d10:	mla	r7, r1, r5, r3
   18d14:	ldr	r3, [sp, #16]
   18d18:	subs	r0, r3, r0
   18d1c:	sbcs	r0, lr, r1
   18d20:	mov	r0, #0
   18d24:	movwcc	r0, #1
   18d28:	cmp	r0, #0
   18d2c:	mov	r1, r0
   18d30:	ldr	r0, [sp, #20]
   18d34:	mvnne	r7, #0
   18d38:	mvnne	r6, #0
   18d3c:	orr	r0, r0, r4
   18d40:	orr	r0, r0, ip
   18d44:	orr	r0, r0, r2
   18d48:	orr	r3, r0, r1
   18d4c:	b	18f80 <__assert_fail@plt+0x789c>
   18d50:	mvn	r0, #0
   18d54:	mvn	r1, #0
   18d58:	mov	r2, r5
   18d5c:	mov	sl, r3
   18d60:	bl	199fc <__assert_fail@plt+0x8318>
   18d64:	mov	lr, r0
   18d68:	subs	r0, r0, r6
   18d6c:	mov	r2, #0
   18d70:	mov	ip, r1
   18d74:	str	sl, [sp, #24]
   18d78:	sbcs	r0, r1, r7
   18d7c:	umull	r3, r1, r6, r5
   18d80:	str	lr, [sp, #4]
   18d84:	movwcc	r2, #1
   18d88:	mla	r6, r6, sl, r1
   18d8c:	mov	r1, #0
   18d90:	cmp	r2, #0
   18d94:	mla	r7, r7, r5, r6
   18d98:	str	r2, [sp, #20]
   18d9c:	mvnne	r3, #0
   18da0:	cmp	r2, #0
   18da4:	mov	r2, #0
   18da8:	umull	r0, r4, r3, r5
   18dac:	mvnne	r7, #0
   18db0:	mla	r4, r3, sl, r4
   18db4:	subs	r3, lr, r3
   18db8:	sbcs	r3, ip, r7
   18dbc:	mla	r4, r7, r5, r4
   18dc0:	movwcc	r1, #1
   18dc4:	cmp	r1, #0
   18dc8:	str	r1, [sp, #16]
   18dcc:	mvnne	r0, #0
   18dd0:	mvnne	r4, #0
   18dd4:	subs	r3, lr, r0
   18dd8:	sbcs	r3, ip, r4
   18ddc:	movwcc	r2, #1
   18de0:	umull	r6, r3, r0, r5
   18de4:	cmp	r2, #0
   18de8:	mla	r0, r0, sl, r3
   18dec:	str	r2, [sp, #12]
   18df0:	mvnne	r6, #0
   18df4:	mla	r0, r4, r5, r0
   18df8:	cmp	r2, #0
   18dfc:	ldr	r4, [sp, #24]
   18e00:	umull	r1, r7, r6, r5
   18e04:	mvnne	r0, #0
   18e08:	subs	r3, lr, r6
   18e0c:	mla	r7, r6, sl, r7
   18e10:	mov	r3, ip
   18e14:	mla	r7, r0, r5, r7
   18e18:	sbcs	r0, ip, r0
   18e1c:	str	r3, [sp]
   18e20:	mov	r0, #0
   18e24:	movwcc	r0, #1
   18e28:	cmp	r0, #0
   18e2c:	str	r0, [sp, #8]
   18e30:	mvnne	r1, #0
   18e34:	mvnne	r7, #0
   18e38:	subs	r0, lr, r1
   18e3c:	sbcs	r0, ip, r7
   18e40:	mov	ip, #0
   18e44:	movwcc	ip, #1
   18e48:	umull	r6, r0, r1, r5
   18e4c:	cmp	ip, #0
   18e50:	mla	r1, r1, r4, r0
   18e54:	mov	r0, lr
   18e58:	mvnne	r6, #0
   18e5c:	mla	r1, r7, r5, r1
   18e60:	cmp	ip, #0
   18e64:	umull	r2, sl, r6, r5
   18e68:	mvnne	r1, #0
   18e6c:	mla	sl, r6, r4, sl
   18e70:	subs	r6, lr, r6
   18e74:	mov	lr, #0
   18e78:	mla	r7, r1, r5, sl
   18e7c:	sbcs	r1, r3, r1
   18e80:	movwcc	lr, #1
   18e84:	ldr	r1, [sp, #24]
   18e88:	cmp	lr, #0
   18e8c:	mvnne	r2, #0
   18e90:	mvnne	r7, #0
   18e94:	subs	r6, r0, r2
   18e98:	umull	r0, sl, r2, r5
   18e9c:	sbcs	r6, r3, r7
   18ea0:	mov	r3, #0
   18ea4:	mla	r2, r2, r1, sl
   18ea8:	movwcc	r3, #1
   18eac:	mla	r2, r7, r5, r2
   18eb0:	cmp	r3, #0
   18eb4:	mvnne	r0, #0
   18eb8:	cmp	r3, #0
   18ebc:	umull	r6, r4, r0, r5
   18ec0:	mvnne	r2, #0
   18ec4:	mla	r4, r0, r1, r4
   18ec8:	ldr	r1, [sp, #4]
   18ecc:	mla	r7, r2, r5, r4
   18ed0:	ldr	r5, [sp, #16]
   18ed4:	subs	r0, r1, r0
   18ed8:	ldr	r0, [sp]
   18edc:	sbcs	r0, r0, r2
   18ee0:	mov	r0, #0
   18ee4:	movwcc	r0, #1
   18ee8:	cmp	r0, #0
   18eec:	mov	r2, r0
   18ef0:	ldr	r0, [sp, #20]
   18ef4:	mvnne	r7, #0
   18ef8:	mvnne	r6, #0
   18efc:	orr	r0, r0, r5
   18f00:	ldr	r5, [sp, #12]
   18f04:	orr	r0, r0, r5
   18f08:	ldr	r5, [sp, #8]
   18f0c:	orr	r0, r0, r5
   18f10:	orr	r0, r0, ip
   18f14:	orr	r0, r0, lr
   18f18:	orr	r0, r0, r3
   18f1c:	orr	r0, r0, r2
   18f20:	and	r3, r0, #1
   18f24:	b	18f80 <__assert_fail@plt+0x789c>
   18f28:	mov	r1, #0
   18f2c:	lsl	r2, r7, #9
   18f30:	lsl	r0, r6, #9
   18f34:	lsr	r3, r7, #23
   18f38:	cmp	r1, r7, lsr #23
   18f3c:	orr	r2, r2, r6, lsr #23
   18f40:	mvnne	r0, #0
   18f44:	movwne	r3, #1
   18f48:	cmp	r1, r7, lsr #23
   18f4c:	mvnne	r2, #0
   18f50:	mov	r6, r0
   18f54:	mov	r7, r2
   18f58:	b	18f80 <__assert_fail@plt+0x789c>
   18f5c:	lsl	r1, r7, #1
   18f60:	lsl	r0, r6, #1
   18f64:	cmp	r7, #0
   18f68:	lsr	r3, r7, #31
   18f6c:	orr	r1, r1, r6, lsr #31
   18f70:	mvnlt	r0, #0
   18f74:	mvnlt	r1, #0
   18f78:	mov	r6, r0
   18f7c:	mov	r7, r1
   18f80:	ldr	r1, [sp, #32]
   18f84:	ldr	r2, [sp, #28]
   18f88:	orr	r8, r3, r8
   18f8c:	add	r0, r1, r2
   18f90:	str	r0, [r9]
   18f94:	ldrb	r0, [r1, r2]
   18f98:	cmp	r0, #0
   18f9c:	orrne	r8, r8, #2
   18fa0:	ldr	r0, [sp, #36]	; 0x24
   18fa4:	strd	r6, [r0]
   18fa8:	mov	r0, r8
   18fac:	sub	sp, fp, #28
   18fb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fb4:	movw	r0, #44815	; 0xaf0f
   18fb8:	movw	r1, #44853	; 0xaf35
   18fbc:	movw	r3, #44869	; 0xaf45
   18fc0:	mov	r2, #85	; 0x55
   18fc4:	movt	r0, #1
   18fc8:	movt	r1, #1
   18fcc:	movt	r3, #1
   18fd0:	bl	116e4 <__assert_fail@plt>
   18fd4:	clz	r2, r1
   18fd8:	clz	r3, r0
   18fdc:	lsr	r2, r2, #5
   18fe0:	lsr	r3, r3, #5
   18fe4:	orrs	r2, r3, r2
   18fe8:	movwne	r1, #1
   18fec:	movwne	r0, #1
   18ff0:	cmp	r1, #0
   18ff4:	beq	19024 <__assert_fail@plt+0x7940>
   18ff8:	mvn	r2, #-2147483648	; 0x80000000
   18ffc:	udiv	r2, r2, r1
   19000:	cmp	r2, r0
   19004:	bcs	19024 <__assert_fail@plt+0x7940>
   19008:	push	{fp, lr}
   1900c:	mov	fp, sp
   19010:	bl	11558 <__errno_location@plt>
   19014:	mov	r1, #12
   19018:	str	r1, [r0]
   1901c:	mov	r0, #0
   19020:	pop	{fp, pc}
   19024:	b	11360 <calloc@plt>
   19028:	cmp	r0, #0
   1902c:	movweq	r0, #1
   19030:	cmn	r0, #1
   19034:	ble	1903c <__assert_fail@plt+0x7958>
   19038:	b	114e0 <malloc@plt>
   1903c:	push	{fp, lr}
   19040:	mov	fp, sp
   19044:	bl	11558 <__errno_location@plt>
   19048:	mov	r1, #12
   1904c:	str	r1, [r0]
   19050:	mov	r0, #0
   19054:	pop	{fp, pc}
   19058:	push	{fp, lr}
   1905c:	mov	fp, sp
   19060:	cmp	r0, #0
   19064:	beq	19080 <__assert_fail@plt+0x799c>
   19068:	cmp	r1, #0
   1906c:	beq	1908c <__assert_fail@plt+0x79a8>
   19070:	cmn	r1, #1
   19074:	ble	19098 <__assert_fail@plt+0x79b4>
   19078:	pop	{fp, lr}
   1907c:	b	1142c <realloc@plt>
   19080:	mov	r0, r1
   19084:	pop	{fp, lr}
   19088:	b	19028 <__assert_fail@plt+0x7944>
   1908c:	bl	13fb0 <__assert_fail@plt+0x28cc>
   19090:	mov	r0, #0
   19094:	pop	{fp, pc}
   19098:	bl	11558 <__errno_location@plt>
   1909c:	mov	r1, #12
   190a0:	str	r1, [r0]
   190a4:	mov	r0, #0
   190a8:	pop	{fp, pc}
   190ac:	push	{r4, r5, r6, sl, fp, lr}
   190b0:	add	fp, sp, #16
   190b4:	mov	r4, r0
   190b8:	bl	114a4 <__fpending@plt>
   190bc:	ldr	r6, [r4]
   190c0:	mov	r5, r0
   190c4:	mov	r0, r4
   190c8:	bl	19130 <__assert_fail@plt+0x7a4c>
   190cc:	tst	r6, #32
   190d0:	bne	19108 <__assert_fail@plt+0x7a24>
   190d4:	cmp	r0, #0
   190d8:	mov	r4, r0
   190dc:	mvnne	r4, #0
   190e0:	cmp	r5, #0
   190e4:	bne	19114 <__assert_fail@plt+0x7a30>
   190e8:	cmp	r0, #0
   190ec:	beq	19114 <__assert_fail@plt+0x7a30>
   190f0:	bl	11558 <__errno_location@plt>
   190f4:	ldr	r0, [r0]
   190f8:	subs	r4, r0, #9
   190fc:	mvnne	r4, #0
   19100:	mov	r0, r4
   19104:	pop	{r4, r5, r6, sl, fp, pc}
   19108:	mvn	r4, #0
   1910c:	cmp	r0, #0
   19110:	beq	1911c <__assert_fail@plt+0x7a38>
   19114:	mov	r0, r4
   19118:	pop	{r4, r5, r6, sl, fp, pc}
   1911c:	bl	11558 <__errno_location@plt>
   19120:	mov	r1, #0
   19124:	str	r1, [r0]
   19128:	mov	r0, r4
   1912c:	pop	{r4, r5, r6, sl, fp, pc}
   19130:	push	{r4, r5, r6, sl, fp, lr}
   19134:	add	fp, sp, #16
   19138:	sub	sp, sp, #8
   1913c:	mov	r4, r0
   19140:	bl	115b8 <fileno@plt>
   19144:	cmn	r0, #1
   19148:	ble	191bc <__assert_fail@plt+0x7ad8>
   1914c:	mov	r0, r4
   19150:	bl	114f8 <__freading@plt>
   19154:	cmp	r0, #0
   19158:	beq	19184 <__assert_fail@plt+0x7aa0>
   1915c:	mov	r0, r4
   19160:	bl	115b8 <fileno@plt>
   19164:	mov	r1, #1
   19168:	mov	r2, #0
   1916c:	mov	r3, #0
   19170:	str	r1, [sp]
   19174:	bl	11480 <lseek64@plt>
   19178:	and	r0, r0, r1
   1917c:	cmn	r0, #1
   19180:	beq	191bc <__assert_fail@plt+0x7ad8>
   19184:	mov	r0, r4
   19188:	bl	191cc <__assert_fail@plt+0x7ae8>
   1918c:	cmp	r0, #0
   19190:	beq	191bc <__assert_fail@plt+0x7ad8>
   19194:	bl	11558 <__errno_location@plt>
   19198:	ldr	r6, [r0]
   1919c:	mov	r5, r0
   191a0:	mov	r0, r4
   191a4:	bl	115dc <fclose@plt>
   191a8:	cmp	r6, #0
   191ac:	strne	r6, [r5]
   191b0:	mvnne	r0, #0
   191b4:	sub	sp, fp, #16
   191b8:	pop	{r4, r5, r6, sl, fp, pc}
   191bc:	mov	r0, r4
   191c0:	sub	sp, fp, #16
   191c4:	pop	{r4, r5, r6, sl, fp, lr}
   191c8:	b	115dc <fclose@plt>
   191cc:	push	{r4, sl, fp, lr}
   191d0:	add	fp, sp, #8
   191d4:	sub	sp, sp, #8
   191d8:	mov	r4, r0
   191dc:	cmp	r0, #0
   191e0:	beq	191fc <__assert_fail@plt+0x7b18>
   191e4:	mov	r0, r4
   191e8:	bl	114f8 <__freading@plt>
   191ec:	cmp	r0, #0
   191f0:	ldrbne	r0, [r4, #1]
   191f4:	tstne	r0, #1
   191f8:	bne	1920c <__assert_fail@plt+0x7b28>
   191fc:	mov	r0, r4
   19200:	sub	sp, fp, #8
   19204:	pop	{r4, sl, fp, lr}
   19208:	b	1139c <fflush@plt>
   1920c:	mov	r0, #1
   19210:	mov	r2, #0
   19214:	mov	r3, #0
   19218:	str	r0, [sp]
   1921c:	mov	r0, r4
   19220:	bl	192dc <__assert_fail@plt+0x7bf8>
   19224:	b	191fc <__assert_fail@plt+0x7b18>
   19228:	push	{r4, r5, r6, r7, fp, lr}
   1922c:	add	fp, sp, #16
   19230:	mov	r5, r1
   19234:	bl	11648 <fopen64@plt>
   19238:	mov	r4, #0
   1923c:	cmp	r0, #0
   19240:	beq	19290 <__assert_fail@plt+0x7bac>
   19244:	mov	r6, r0
   19248:	bl	115b8 <fileno@plt>
   1924c:	cmp	r0, #2
   19250:	movhi	r0, r6
   19254:	pophi	{r4, r5, r6, r7, fp, pc}
   19258:	bl	19454 <__assert_fail@plt+0x7d70>
   1925c:	cmn	r0, #1
   19260:	ble	192bc <__assert_fail@plt+0x7bd8>
   19264:	mov	r7, r0
   19268:	mov	r0, r6
   1926c:	bl	19130 <__assert_fail@plt+0x7a4c>
   19270:	cmp	r0, #0
   19274:	bne	19298 <__assert_fail@plt+0x7bb4>
   19278:	mov	r0, r7
   1927c:	mov	r1, r5
   19280:	bl	11354 <fdopen@plt>
   19284:	mov	r4, r0
   19288:	cmp	r0, #0
   1928c:	beq	19298 <__assert_fail@plt+0x7bb4>
   19290:	mov	r0, r4
   19294:	pop	{r4, r5, r6, r7, fp, pc}
   19298:	bl	11558 <__errno_location@plt>
   1929c:	ldr	r5, [r0]
   192a0:	mov	r4, r0
   192a4:	mov	r0, r7
   192a8:	bl	116d8 <close@plt>
   192ac:	str	r5, [r4]
   192b0:	mov	r4, #0
   192b4:	mov	r0, r4
   192b8:	pop	{r4, r5, r6, r7, fp, pc}
   192bc:	bl	11558 <__errno_location@plt>
   192c0:	ldr	r7, [r0]
   192c4:	mov	r5, r0
   192c8:	mov	r0, r6
   192cc:	bl	19130 <__assert_fail@plt+0x7a4c>
   192d0:	mov	r0, r4
   192d4:	str	r7, [r5]
   192d8:	pop	{r4, r5, r6, r7, fp, pc}
   192dc:	push	{r4, r5, r6, r7, fp, lr}
   192e0:	add	fp, sp, #16
   192e4:	sub	sp, sp, #8
   192e8:	mov	r4, r0
   192ec:	ldr	r0, [r0, #4]
   192f0:	mov	r5, r3
   192f4:	mov	r6, r2
   192f8:	ldr	r1, [r4, #8]
   192fc:	cmp	r1, r0
   19300:	bne	1931c <__assert_fail@plt+0x7c38>
   19304:	ldrd	r0, [r4, #16]
   19308:	cmp	r1, r0
   1930c:	bne	1931c <__assert_fail@plt+0x7c38>
   19310:	ldr	r0, [r4, #36]	; 0x24
   19314:	cmp	r0, #0
   19318:	beq	19334 <__assert_fail@plt+0x7c50>
   1931c:	mov	r0, r4
   19320:	mov	r2, r6
   19324:	mov	r3, r5
   19328:	sub	sp, fp, #16
   1932c:	pop	{r4, r5, r6, r7, fp, lr}
   19330:	b	115e8 <fseeko64@plt>
   19334:	ldr	r7, [fp, #8]
   19338:	mov	r0, r4
   1933c:	bl	115b8 <fileno@plt>
   19340:	mov	r2, r6
   19344:	mov	r3, r5
   19348:	str	r7, [sp]
   1934c:	bl	11480 <lseek64@plt>
   19350:	and	r2, r0, r1
   19354:	cmn	r2, #1
   19358:	mvneq	r0, #0
   1935c:	subeq	sp, fp, #16
   19360:	popeq	{r4, r5, r6, r7, fp, pc}
   19364:	strd	r0, [r4, #80]	; 0x50
   19368:	ldr	r0, [r4]
   1936c:	bic	r0, r0, #16
   19370:	str	r0, [r4]
   19374:	mov	r0, #0
   19378:	sub	sp, fp, #16
   1937c:	pop	{r4, r5, r6, r7, fp, pc}
   19380:	push	{fp, lr}
   19384:	mov	fp, sp
   19388:	mov	r0, #14
   1938c:	bl	11630 <nl_langinfo@plt>
   19390:	movw	r1, #41447	; 0xa1e7
   19394:	cmp	r0, #0
   19398:	movt	r1, #1
   1939c:	movne	r1, r0
   193a0:	movw	r0, #44948	; 0xaf94
   193a4:	ldrb	r2, [r1]
   193a8:	movt	r0, #1
   193ac:	cmp	r2, #0
   193b0:	movne	r0, r1
   193b4:	pop	{fp, pc}
   193b8:	push	{r4, r5, r6, r7, fp, lr}
   193bc:	add	fp, sp, #16
   193c0:	sub	sp, sp, #8
   193c4:	add	r5, sp, #4
   193c8:	cmp	r0, #0
   193cc:	mov	r7, r2
   193d0:	mov	r4, r1
   193d4:	movne	r5, r0
   193d8:	mov	r0, r5
   193dc:	bl	114b0 <mbrtowc@plt>
   193e0:	mov	r6, r0
   193e4:	cmp	r7, #0
   193e8:	beq	1940c <__assert_fail@plt+0x7d28>
   193ec:	cmn	r6, #2
   193f0:	bcc	1940c <__assert_fail@plt+0x7d28>
   193f4:	mov	r0, #0
   193f8:	bl	19460 <__assert_fail@plt+0x7d7c>
   193fc:	cmp	r0, #0
   19400:	ldrbeq	r0, [r4]
   19404:	moveq	r6, #1
   19408:	streq	r0, [r5]
   1940c:	mov	r0, r6
   19410:	sub	sp, fp, #16
   19414:	pop	{r4, r5, r6, r7, fp, pc}
   19418:	cmp	r2, #0
   1941c:	beq	1944c <__assert_fail@plt+0x7d68>
   19420:	mvn	r3, #0
   19424:	udiv	r3, r3, r2
   19428:	cmp	r3, r1
   1942c:	bcs	1944c <__assert_fail@plt+0x7d68>
   19430:	push	{fp, lr}
   19434:	mov	fp, sp
   19438:	bl	11558 <__errno_location@plt>
   1943c:	mov	r1, #12
   19440:	str	r1, [r0]
   19444:	mov	r0, #0
   19448:	pop	{fp, pc}
   1944c:	mul	r1, r2, r1
   19450:	b	19058 <__assert_fail@plt+0x7974>
   19454:	mov	r1, #0
   19458:	mov	r2, #3
   1945c:	b	13d88 <__assert_fail@plt+0x26a4>
   19460:	push	{r4, sl, fp, lr}
   19464:	add	fp, sp, #8
   19468:	sub	sp, sp, #264	; 0x108
   1946c:	add	r1, sp, #7
   19470:	movw	r2, #257	; 0x101
   19474:	bl	194c4 <__assert_fail@plt+0x7de0>
   19478:	mov	r4, #0
   1947c:	cmp	r0, #0
   19480:	bne	194b8 <__assert_fail@plt+0x7dd4>
   19484:	movw	r1, #44954	; 0xaf9a
   19488:	add	r0, sp, #7
   1948c:	movt	r1, #1
   19490:	bl	11390 <strcmp@plt>
   19494:	cmp	r0, #0
   19498:	beq	194b8 <__assert_fail@plt+0x7dd4>
   1949c:	movw	r1, #44956	; 0xaf9c
   194a0:	add	r0, sp, #7
   194a4:	movt	r1, #1
   194a8:	bl	11390 <strcmp@plt>
   194ac:	mov	r4, r0
   194b0:	cmp	r0, #0
   194b4:	movwne	r4, #1
   194b8:	mov	r0, r4
   194bc:	sub	sp, fp, #8
   194c0:	pop	{r4, sl, fp, pc}
   194c4:	push	{r4, r5, r6, r7, fp, lr}
   194c8:	add	fp, sp, #16
   194cc:	mov	r4, r1
   194d0:	mov	r1, #0
   194d4:	mov	r6, r2
   194d8:	bl	1160c <setlocale@plt>
   194dc:	cmp	r0, #0
   194e0:	beq	19510 <__assert_fail@plt+0x7e2c>
   194e4:	mov	r7, r0
   194e8:	bl	11534 <strlen@plt>
   194ec:	cmp	r0, r6
   194f0:	bcs	19530 <__assert_fail@plt+0x7e4c>
   194f4:	add	r2, r0, #1
   194f8:	mov	r0, r4
   194fc:	mov	r1, r7
   19500:	bl	113cc <memcpy@plt>
   19504:	mov	r5, #0
   19508:	mov	r0, r5
   1950c:	pop	{r4, r5, r6, r7, fp, pc}
   19510:	cmp	r6, #0
   19514:	mov	r5, #22
   19518:	movne	r0, #0
   1951c:	strbne	r0, [r4]
   19520:	movne	r0, r5
   19524:	popne	{r4, r5, r6, r7, fp, pc}
   19528:	mov	r0, r5
   1952c:	pop	{r4, r5, r6, r7, fp, pc}
   19530:	mov	r5, #34	; 0x22
   19534:	cmp	r6, #0
   19538:	beq	19558 <__assert_fail@plt+0x7e74>
   1953c:	sub	r6, r6, #1
   19540:	mov	r0, r4
   19544:	mov	r1, r7
   19548:	mov	r2, r6
   1954c:	bl	113cc <memcpy@plt>
   19550:	mov	r0, #0
   19554:	strb	r0, [r4, r6]
   19558:	mov	r0, r5
   1955c:	pop	{r4, r5, r6, r7, fp, pc}
   19560:	mov	r1, #0
   19564:	b	1160c <setlocale@plt>
   19568:	eor	r1, r1, #-2147483648	; 0x80000000
   1956c:	b	19574 <__assert_fail@plt+0x7e90>
   19570:	eor	r3, r3, #-2147483648	; 0x80000000
   19574:	push	{r4, r5, lr}
   19578:	lsl	r4, r1, #1
   1957c:	lsl	r5, r3, #1
   19580:	teq	r4, r5
   19584:	teqeq	r0, r2
   19588:	orrsne	ip, r4, r0
   1958c:	orrsne	ip, r5, r2
   19590:	mvnsne	ip, r4, asr #21
   19594:	mvnsne	ip, r5, asr #21
   19598:	beq	19784 <__assert_fail@plt+0x80a0>
   1959c:	lsr	r4, r4, #21
   195a0:	rsbs	r5, r4, r5, lsr #21
   195a4:	rsblt	r5, r5, #0
   195a8:	ble	195c8 <__assert_fail@plt+0x7ee4>
   195ac:	add	r4, r4, r5
   195b0:	eor	r2, r0, r2
   195b4:	eor	r3, r1, r3
   195b8:	eor	r0, r2, r0
   195bc:	eor	r1, r3, r1
   195c0:	eor	r2, r0, r2
   195c4:	eor	r3, r1, r3
   195c8:	cmp	r5, #54	; 0x36
   195cc:	pophi	{r4, r5, pc}
   195d0:	tst	r1, #-2147483648	; 0x80000000
   195d4:	lsl	r1, r1, #12
   195d8:	mov	ip, #1048576	; 0x100000
   195dc:	orr	r1, ip, r1, lsr #12
   195e0:	beq	195ec <__assert_fail@plt+0x7f08>
   195e4:	rsbs	r0, r0, #0
   195e8:	rsc	r1, r1, #0
   195ec:	tst	r3, #-2147483648	; 0x80000000
   195f0:	lsl	r3, r3, #12
   195f4:	orr	r3, ip, r3, lsr #12
   195f8:	beq	19604 <__assert_fail@plt+0x7f20>
   195fc:	rsbs	r2, r2, #0
   19600:	rsc	r3, r3, #0
   19604:	teq	r4, r5
   19608:	beq	1976c <__assert_fail@plt+0x8088>
   1960c:	sub	r4, r4, #1
   19610:	rsbs	lr, r5, #32
   19614:	blt	19630 <__assert_fail@plt+0x7f4c>
   19618:	lsl	ip, r2, lr
   1961c:	adds	r0, r0, r2, lsr r5
   19620:	adc	r1, r1, #0
   19624:	adds	r0, r0, r3, lsl lr
   19628:	adcs	r1, r1, r3, asr r5
   1962c:	b	1964c <__assert_fail@plt+0x7f68>
   19630:	sub	r5, r5, #32
   19634:	add	lr, lr, #32
   19638:	cmp	r2, #1
   1963c:	lsl	ip, r3, lr
   19640:	orrcs	ip, ip, #2
   19644:	adds	r0, r0, r3, asr r5
   19648:	adcs	r1, r1, r3, asr #31
   1964c:	and	r5, r1, #-2147483648	; 0x80000000
   19650:	bpl	19660 <__assert_fail@plt+0x7f7c>
   19654:	rsbs	ip, ip, #0
   19658:	rscs	r0, r0, #0
   1965c:	rsc	r1, r1, #0
   19660:	cmp	r1, #1048576	; 0x100000
   19664:	bcc	196a4 <__assert_fail@plt+0x7fc0>
   19668:	cmp	r1, #2097152	; 0x200000
   1966c:	bcc	1968c <__assert_fail@plt+0x7fa8>
   19670:	lsrs	r1, r1, #1
   19674:	rrxs	r0, r0
   19678:	rrx	ip, ip
   1967c:	add	r4, r4, #1
   19680:	lsl	r2, r4, #21
   19684:	cmn	r2, #4194304	; 0x400000
   19688:	bcs	197e4 <__assert_fail@plt+0x8100>
   1968c:	cmp	ip, #-2147483648	; 0x80000000
   19690:	lsrseq	ip, r0, #1
   19694:	adcs	r0, r0, #0
   19698:	adc	r1, r1, r4, lsl #20
   1969c:	orr	r1, r1, r5
   196a0:	pop	{r4, r5, pc}
   196a4:	lsls	ip, ip, #1
   196a8:	adcs	r0, r0, r0
   196ac:	adc	r1, r1, r1
   196b0:	tst	r1, #1048576	; 0x100000
   196b4:	sub	r4, r4, #1
   196b8:	bne	1968c <__assert_fail@plt+0x7fa8>
   196bc:	teq	r1, #0
   196c0:	moveq	r1, r0
   196c4:	moveq	r0, #0
   196c8:	clz	r3, r1
   196cc:	addeq	r3, r3, #32
   196d0:	sub	r3, r3, #11
   196d4:	subs	r2, r3, #32
   196d8:	bge	196fc <__assert_fail@plt+0x8018>
   196dc:	adds	r2, r2, #12
   196e0:	ble	196f8 <__assert_fail@plt+0x8014>
   196e4:	add	ip, r2, #20
   196e8:	rsb	r2, r2, #12
   196ec:	lsl	r0, r1, ip
   196f0:	lsr	r1, r1, r2
   196f4:	b	1970c <__assert_fail@plt+0x8028>
   196f8:	add	r2, r2, #20
   196fc:	rsble	ip, r2, #32
   19700:	lsl	r1, r1, r2
   19704:	orrle	r1, r1, r0, lsr ip
   19708:	lslle	r0, r0, r2
   1970c:	subs	r4, r4, r3
   19710:	addge	r1, r1, r4, lsl #20
   19714:	orrge	r1, r1, r5
   19718:	popge	{r4, r5, pc}
   1971c:	mvn	r4, r4
   19720:	subs	r4, r4, #31
   19724:	bge	19760 <__assert_fail@plt+0x807c>
   19728:	adds	r4, r4, #12
   1972c:	bgt	19748 <__assert_fail@plt+0x8064>
   19730:	add	r4, r4, #20
   19734:	rsb	r2, r4, #32
   19738:	lsr	r0, r0, r4
   1973c:	orr	r0, r0, r1, lsl r2
   19740:	orr	r1, r5, r1, lsr r4
   19744:	pop	{r4, r5, pc}
   19748:	rsb	r4, r4, #12
   1974c:	rsb	r2, r4, #32
   19750:	lsr	r0, r0, r2
   19754:	orr	r0, r0, r1, lsl r4
   19758:	mov	r1, r5
   1975c:	pop	{r4, r5, pc}
   19760:	lsr	r0, r1, r4
   19764:	mov	r1, r5
   19768:	pop	{r4, r5, pc}
   1976c:	teq	r4, #0
   19770:	eor	r3, r3, #1048576	; 0x100000
   19774:	eoreq	r1, r1, #1048576	; 0x100000
   19778:	addeq	r4, r4, #1
   1977c:	subne	r5, r5, #1
   19780:	b	1960c <__assert_fail@plt+0x7f28>
   19784:	mvns	ip, r4, asr #21
   19788:	mvnsne	ip, r5, asr #21
   1978c:	beq	197f4 <__assert_fail@plt+0x8110>
   19790:	teq	r4, r5
   19794:	teqeq	r0, r2
   19798:	beq	197ac <__assert_fail@plt+0x80c8>
   1979c:	orrs	ip, r4, r0
   197a0:	moveq	r1, r3
   197a4:	moveq	r0, r2
   197a8:	pop	{r4, r5, pc}
   197ac:	teq	r1, r3
   197b0:	movne	r1, #0
   197b4:	movne	r0, #0
   197b8:	popne	{r4, r5, pc}
   197bc:	lsrs	ip, r4, #21
   197c0:	bne	197d4 <__assert_fail@plt+0x80f0>
   197c4:	lsls	r0, r0, #1
   197c8:	adcs	r1, r1, r1
   197cc:	orrcs	r1, r1, #-2147483648	; 0x80000000
   197d0:	pop	{r4, r5, pc}
   197d4:	adds	r4, r4, #4194304	; 0x400000
   197d8:	addcc	r1, r1, #1048576	; 0x100000
   197dc:	popcc	{r4, r5, pc}
   197e0:	and	r5, r1, #-2147483648	; 0x80000000
   197e4:	orr	r1, r5, #2130706432	; 0x7f000000
   197e8:	orr	r1, r1, #15728640	; 0xf00000
   197ec:	mov	r0, #0
   197f0:	pop	{r4, r5, pc}
   197f4:	mvns	ip, r4, asr #21
   197f8:	movne	r1, r3
   197fc:	movne	r0, r2
   19800:	mvnseq	ip, r5, asr #21
   19804:	movne	r3, r1
   19808:	movne	r2, r0
   1980c:	orrs	r4, r0, r1, lsl #12
   19810:	orrseq	r5, r2, r3, lsl #12
   19814:	teqeq	r1, r3
   19818:	orrne	r1, r1, #524288	; 0x80000
   1981c:	pop	{r4, r5, pc}
   19820:	teq	r0, #0
   19824:	moveq	r1, #0
   19828:	bxeq	lr
   1982c:	push	{r4, r5, lr}
   19830:	mov	r4, #1024	; 0x400
   19834:	add	r4, r4, #50	; 0x32
   19838:	mov	r5, #0
   1983c:	mov	r1, #0
   19840:	b	196bc <__assert_fail@plt+0x7fd8>
   19844:	teq	r0, #0
   19848:	moveq	r1, #0
   1984c:	bxeq	lr
   19850:	push	{r4, r5, lr}
   19854:	mov	r4, #1024	; 0x400
   19858:	add	r4, r4, #50	; 0x32
   1985c:	ands	r5, r0, #-2147483648	; 0x80000000
   19860:	rsbmi	r0, r0, #0
   19864:	mov	r1, #0
   19868:	b	196bc <__assert_fail@plt+0x7fd8>
   1986c:	lsls	r2, r0, #1
   19870:	asr	r1, r2, #3
   19874:	rrx	r1, r1
   19878:	lsl	r0, r2, #28
   1987c:	andsne	r3, r2, #-16777216	; 0xff000000
   19880:	teqne	r3, #-16777216	; 0xff000000
   19884:	eorne	r1, r1, #939524096	; 0x38000000
   19888:	bxne	lr
   1988c:	bics	r2, r2, #-16777216	; 0xff000000
   19890:	bxeq	lr
   19894:	teq	r3, #-16777216	; 0xff000000
   19898:	orreq	r1, r1, #524288	; 0x80000
   1989c:	bxeq	lr
   198a0:	push	{r4, r5, lr}
   198a4:	mov	r4, #896	; 0x380
   198a8:	and	r5, r1, #-2147483648	; 0x80000000
   198ac:	bic	r1, r1, #-2147483648	; 0x80000000
   198b0:	b	196bc <__assert_fail@plt+0x7fd8>
   198b4:	orrs	r2, r0, r1
   198b8:	bxeq	lr
   198bc:	push	{r4, r5, lr}
   198c0:	mov	r5, #0
   198c4:	b	198e4 <__assert_fail@plt+0x8200>
   198c8:	orrs	r2, r0, r1
   198cc:	bxeq	lr
   198d0:	push	{r4, r5, lr}
   198d4:	ands	r5, r1, #-2147483648	; 0x80000000
   198d8:	bpl	198e4 <__assert_fail@plt+0x8200>
   198dc:	rsbs	r0, r0, #0
   198e0:	rsc	r1, r1, #0
   198e4:	mov	r4, #1024	; 0x400
   198e8:	add	r4, r4, #50	; 0x32
   198ec:	lsrs	ip, r1, #22
   198f0:	beq	19660 <__assert_fail@plt+0x7f7c>
   198f4:	mov	r2, #3
   198f8:	lsrs	ip, ip, #3
   198fc:	addne	r2, r2, #3
   19900:	lsrs	ip, ip, #3
   19904:	addne	r2, r2, #3
   19908:	add	r2, r2, ip, lsr #3
   1990c:	rsb	r3, r2, #32
   19910:	lsl	ip, r0, r3
   19914:	lsr	r0, r0, r2
   19918:	orr	r0, r0, r1, lsl r3
   1991c:	lsr	r1, r1, r2
   19920:	add	r4, r4, r2
   19924:	b	19660 <__assert_fail@plt+0x7f7c>
   19928:	cmp	r3, #0
   1992c:	cmpeq	r2, #0
   19930:	bne	19954 <__assert_fail@plt+0x8270>
   19934:	cmp	r1, #0
   19938:	movlt	r1, #-2147483648	; 0x80000000
   1993c:	movlt	r0, #0
   19940:	blt	19950 <__assert_fail@plt+0x826c>
   19944:	cmpeq	r0, #0
   19948:	mvnne	r1, #-2147483648	; 0x80000000
   1994c:	mvnne	r0, #0
   19950:	b	19a38 <__assert_fail@plt+0x8354>
   19954:	sub	sp, sp, #8
   19958:	push	{sp, lr}
   1995c:	cmp	r1, #0
   19960:	blt	19980 <__assert_fail@plt+0x829c>
   19964:	cmp	r3, #0
   19968:	blt	199b4 <__assert_fail@plt+0x82d0>
   1996c:	bl	19a88 <__assert_fail@plt+0x83a4>
   19970:	ldr	lr, [sp, #4]
   19974:	add	sp, sp, #8
   19978:	pop	{r2, r3}
   1997c:	bx	lr
   19980:	rsbs	r0, r0, #0
   19984:	sbc	r1, r1, r1, lsl #1
   19988:	cmp	r3, #0
   1998c:	blt	199d8 <__assert_fail@plt+0x82f4>
   19990:	bl	19a88 <__assert_fail@plt+0x83a4>
   19994:	ldr	lr, [sp, #4]
   19998:	add	sp, sp, #8
   1999c:	pop	{r2, r3}
   199a0:	rsbs	r0, r0, #0
   199a4:	sbc	r1, r1, r1, lsl #1
   199a8:	rsbs	r2, r2, #0
   199ac:	sbc	r3, r3, r3, lsl #1
   199b0:	bx	lr
   199b4:	rsbs	r2, r2, #0
   199b8:	sbc	r3, r3, r3, lsl #1
   199bc:	bl	19a88 <__assert_fail@plt+0x83a4>
   199c0:	ldr	lr, [sp, #4]
   199c4:	add	sp, sp, #8
   199c8:	pop	{r2, r3}
   199cc:	rsbs	r0, r0, #0
   199d0:	sbc	r1, r1, r1, lsl #1
   199d4:	bx	lr
   199d8:	rsbs	r2, r2, #0
   199dc:	sbc	r3, r3, r3, lsl #1
   199e0:	bl	19a88 <__assert_fail@plt+0x83a4>
   199e4:	ldr	lr, [sp, #4]
   199e8:	add	sp, sp, #8
   199ec:	pop	{r2, r3}
   199f0:	rsbs	r2, r2, #0
   199f4:	sbc	r3, r3, r3, lsl #1
   199f8:	bx	lr
   199fc:	cmp	r3, #0
   19a00:	cmpeq	r2, #0
   19a04:	bne	19a1c <__assert_fail@plt+0x8338>
   19a08:	cmp	r1, #0
   19a0c:	cmpeq	r0, #0
   19a10:	mvnne	r1, #0
   19a14:	mvnne	r0, #0
   19a18:	b	19a38 <__assert_fail@plt+0x8354>
   19a1c:	sub	sp, sp, #8
   19a20:	push	{sp, lr}
   19a24:	bl	19a88 <__assert_fail@plt+0x83a4>
   19a28:	ldr	lr, [sp, #4]
   19a2c:	add	sp, sp, #8
   19a30:	pop	{r2, r3}
   19a34:	bx	lr
   19a38:	push	{r1, lr}
   19a3c:	mov	r0, #8
   19a40:	bl	11378 <raise@plt>
   19a44:	pop	{r1, pc}
   19a48:	vmov	d6, r0, r1
   19a4c:	vldr	d7, [pc, #36]	; 19a78 <__assert_fail@plt+0x8394>
   19a50:	vldr	d5, [pc, #40]	; 19a80 <__assert_fail@plt+0x839c>
   19a54:	vmul.f64	d7, d6, d7
   19a58:	vcvt.u32.f64	s14, d7
   19a5c:	vcvt.f64.u32	d4, s14
   19a60:	vmov	r1, s14
   19a64:	vmls.f64	d6, d4, d5
   19a68:	vcvt.u32.f64	s15, d6
   19a6c:	vmov	r0, s15
   19a70:	bx	lr
   19a74:	nop			; (mov r0, r0)
   19a78:	andeq	r0, r0, r0
   19a7c:	ldclcc	0, cr0, [r0]
   19a80:	andeq	r0, r0, r0
   19a84:	mvnsmi	r0, r0
   19a88:	cmp	r1, r3
   19a8c:	cmpeq	r0, r2
   19a90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a94:	mov	r4, r0
   19a98:	movcc	r0, #0
   19a9c:	mov	r5, r1
   19aa0:	ldr	lr, [sp, #36]	; 0x24
   19aa4:	movcc	r1, r0
   19aa8:	bcc	19ba4 <__assert_fail@plt+0x84c0>
   19aac:	cmp	r3, #0
   19ab0:	clzeq	ip, r2
   19ab4:	clzne	ip, r3
   19ab8:	addeq	ip, ip, #32
   19abc:	cmp	r5, #0
   19ac0:	clzeq	r1, r4
   19ac4:	addeq	r1, r1, #32
   19ac8:	clzne	r1, r5
   19acc:	sub	ip, ip, r1
   19ad0:	sub	sl, ip, #32
   19ad4:	lsl	r9, r3, ip
   19ad8:	rsb	fp, ip, #32
   19adc:	orr	r9, r9, r2, lsl sl
   19ae0:	orr	r9, r9, r2, lsr fp
   19ae4:	lsl	r8, r2, ip
   19ae8:	cmp	r5, r9
   19aec:	cmpeq	r4, r8
   19af0:	movcc	r0, #0
   19af4:	movcc	r1, r0
   19af8:	bcc	19b14 <__assert_fail@plt+0x8430>
   19afc:	mov	r0, #1
   19b00:	subs	r4, r4, r8
   19b04:	lsl	r1, r0, sl
   19b08:	orr	r1, r1, r0, lsr fp
   19b0c:	lsl	r0, r0, ip
   19b10:	sbc	r5, r5, r9
   19b14:	cmp	ip, #0
   19b18:	beq	19ba4 <__assert_fail@plt+0x84c0>
   19b1c:	lsr	r6, r8, #1
   19b20:	orr	r6, r6, r9, lsl #31
   19b24:	lsr	r7, r9, #1
   19b28:	mov	r2, ip
   19b2c:	b	19b50 <__assert_fail@plt+0x846c>
   19b30:	subs	r3, r4, r6
   19b34:	sbc	r8, r5, r7
   19b38:	adds	r3, r3, r3
   19b3c:	adc	r8, r8, r8
   19b40:	adds	r4, r3, #1
   19b44:	adc	r5, r8, #0
   19b48:	subs	r2, r2, #1
   19b4c:	beq	19b6c <__assert_fail@plt+0x8488>
   19b50:	cmp	r5, r7
   19b54:	cmpeq	r4, r6
   19b58:	bcs	19b30 <__assert_fail@plt+0x844c>
   19b5c:	adds	r4, r4, r4
   19b60:	adc	r5, r5, r5
   19b64:	subs	r2, r2, #1
   19b68:	bne	19b50 <__assert_fail@plt+0x846c>
   19b6c:	lsr	r3, r4, ip
   19b70:	orr	r3, r3, r5, lsl fp
   19b74:	lsr	r2, r5, ip
   19b78:	orr	r3, r3, r5, lsr sl
   19b7c:	adds	r0, r0, r4
   19b80:	mov	r4, r3
   19b84:	lsl	r3, r2, ip
   19b88:	orr	r3, r3, r4, lsl sl
   19b8c:	lsl	ip, r4, ip
   19b90:	orr	r3, r3, r4, lsr fp
   19b94:	adc	r1, r1, r5
   19b98:	subs	r0, r0, ip
   19b9c:	mov	r5, r2
   19ba0:	sbc	r1, r1, r3
   19ba4:	cmp	lr, #0
   19ba8:	strdne	r4, [lr]
   19bac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19bb0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19bb4:	mov	r7, r0
   19bb8:	ldr	r6, [pc, #72]	; 19c08 <__assert_fail@plt+0x8524>
   19bbc:	ldr	r5, [pc, #72]	; 19c0c <__assert_fail@plt+0x8528>
   19bc0:	add	r6, pc, r6
   19bc4:	add	r5, pc, r5
   19bc8:	sub	r6, r6, r5
   19bcc:	mov	r8, r1
   19bd0:	mov	r9, r2
   19bd4:	bl	11334 <fdopen@plt-0x20>
   19bd8:	asrs	r6, r6, #2
   19bdc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19be0:	mov	r4, #0
   19be4:	add	r4, r4, #1
   19be8:	ldr	r3, [r5], #4
   19bec:	mov	r2, r9
   19bf0:	mov	r1, r8
   19bf4:	mov	r0, r7
   19bf8:	blx	r3
   19bfc:	cmp	r6, r4
   19c00:	bne	19be4 <__assert_fail@plt+0x8500>
   19c04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19c08:	andeq	r2, r1, r4, asr #6
   19c0c:	andeq	r2, r1, ip, lsr r3
   19c10:	bx	lr
   19c14:	ldr	r3, [pc, #12]	; 19c28 <__assert_fail@plt+0x8544>
   19c18:	mov	r1, #0
   19c1c:	add	r3, pc, r3
   19c20:	ldr	r2, [r3]
   19c24:	b	11570 <__cxa_atexit@plt>
   19c28:	andeq	r2, r1, r8, lsr #10

Disassembly of section .fini:

00019c2c <.fini>:
   19c2c:	push	{r3, lr}
   19c30:	pop	{r3, pc}
