
../repos/coreutils/src/join:     file format elf32-littlearm


Disassembly of section .init:

00010d78 <.init>:
   10d78:	push	{r3, lr}
   10d7c:	bl	11e2c <__assert_fail@plt+0xde8>
   10d80:	pop	{r3, pc}

Disassembly of section .plt:

00010d84 <fdopen@plt-0x14>:
   10d84:	push	{lr}		; (str lr, [sp, #-4]!)
   10d88:	ldr	lr, [pc, #4]	; 10d94 <fdopen@plt-0x4>
   10d8c:	add	lr, pc, lr
   10d90:	ldr	pc, [lr, #8]!
   10d94:	andeq	r9, r1, ip, ror #4

00010d98 <fdopen@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #102400	; 0x19000
   10da0:	ldr	pc, [ip, #620]!	; 0x26c

00010da4 <calloc@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #102400	; 0x19000
   10dac:	ldr	pc, [ip, #612]!	; 0x264

00010db0 <fputs_unlocked@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #102400	; 0x19000
   10db8:	ldr	pc, [ip, #604]!	; 0x25c

00010dbc <strcmp@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #102400	; 0x19000
   10dc4:	ldr	pc, [ip, #596]!	; 0x254

00010dc8 <posix_fadvise64@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #102400	; 0x19000
   10dd0:	ldr	pc, [ip, #588]!	; 0x24c

00010dd4 <fflush@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #102400	; 0x19000
   10ddc:	ldr	pc, [ip, #580]!	; 0x244

00010de0 <free@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #102400	; 0x19000
   10de8:	ldr	pc, [ip, #572]!	; 0x23c

00010dec <_exit@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #102400	; 0x19000
   10df4:	ldr	pc, [ip, #564]!	; 0x234

00010df8 <memcpy@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #102400	; 0x19000
   10e00:	ldr	pc, [ip, #556]!	; 0x22c

00010e04 <__strtoull_internal@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #102400	; 0x19000
   10e0c:	ldr	pc, [ip, #548]!	; 0x224

00010e10 <mbsinit@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #102400	; 0x19000
   10e18:	ldr	pc, [ip, #540]!	; 0x21c

00010e1c <fwrite_unlocked@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #102400	; 0x19000
   10e24:	ldr	pc, [ip, #532]!	; 0x214

00010e28 <memcmp@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #102400	; 0x19000
   10e30:	ldr	pc, [ip, #524]!	; 0x20c

00010e34 <fputc_unlocked@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #102400	; 0x19000
   10e3c:	ldr	pc, [ip, #516]!	; 0x204

00010e40 <dcgettext@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #102400	; 0x19000
   10e48:	ldr	pc, [ip, #508]!	; 0x1fc

00010e4c <realloc@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #102400	; 0x19000
   10e54:	ldr	pc, [ip, #500]!	; 0x1f4

00010e58 <textdomain@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #102400	; 0x19000
   10e60:	ldr	pc, [ip, #492]!	; 0x1ec

00010e64 <iswprint@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #102400	; 0x19000
   10e6c:	ldr	pc, [ip, #484]!	; 0x1e4

00010e70 <fwrite@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #102400	; 0x19000
   10e78:	ldr	pc, [ip, #476]!	; 0x1dc

00010e7c <lseek64@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #102400	; 0x19000
   10e84:	ldr	pc, [ip, #468]!	; 0x1d4

00010e88 <__ctype_get_mb_cur_max@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #102400	; 0x19000
   10e90:	ldr	pc, [ip, #460]!	; 0x1cc

00010e94 <__fpending@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #102400	; 0x19000
   10e9c:	ldr	pc, [ip, #452]!	; 0x1c4

00010ea0 <mbrtowc@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #102400	; 0x19000
   10ea8:	ldr	pc, [ip, #444]!	; 0x1bc

00010eac <error@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #102400	; 0x19000
   10eb4:	ldr	pc, [ip, #436]!	; 0x1b4

00010eb8 <strcoll@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #102400	; 0x19000
   10ec0:	ldr	pc, [ip, #428]!	; 0x1ac

00010ec4 <malloc@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #102400	; 0x19000
   10ecc:	ldr	pc, [ip, #420]!	; 0x1a4

00010ed0 <__libc_start_main@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #102400	; 0x19000
   10ed8:	ldr	pc, [ip, #412]!	; 0x19c

00010edc <__freading@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #102400	; 0x19000
   10ee4:	ldr	pc, [ip, #404]!	; 0x194

00010ee8 <__ctype_toupper_loc@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #102400	; 0x19000
   10ef0:	ldr	pc, [ip, #396]!	; 0x18c

00010ef4 <__gmon_start__@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #102400	; 0x19000
   10efc:	ldr	pc, [ip, #388]!	; 0x184

00010f00 <getopt_long@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #102400	; 0x19000
   10f08:	ldr	pc, [ip, #380]!	; 0x17c

00010f0c <__ctype_b_loc@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #102400	; 0x19000
   10f14:	ldr	pc, [ip, #372]!	; 0x174

00010f18 <exit@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #102400	; 0x19000
   10f20:	ldr	pc, [ip, #364]!	; 0x16c

00010f24 <strtoul@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #102400	; 0x19000
   10f2c:	ldr	pc, [ip, #356]!	; 0x164

00010f30 <strlen@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #102400	; 0x19000
   10f38:	ldr	pc, [ip, #348]!	; 0x15c

00010f3c <strchr@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #102400	; 0x19000
   10f44:	ldr	pc, [ip, #340]!	; 0x154

00010f48 <__errno_location@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #102400	; 0x19000
   10f50:	ldr	pc, [ip, #332]!	; 0x14c

00010f54 <__cxa_atexit@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #102400	; 0x19000
   10f5c:	ldr	pc, [ip, #324]!	; 0x144

00010f60 <memset@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #102400	; 0x19000
   10f68:	ldr	pc, [ip, #316]!	; 0x13c

00010f6c <__printf_chk@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #102400	; 0x19000
   10f74:	ldr	pc, [ip, #308]!	; 0x134

00010f78 <fileno@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #102400	; 0x19000
   10f80:	ldr	pc, [ip, #300]!	; 0x12c

00010f84 <__fprintf_chk@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #102400	; 0x19000
   10f8c:	ldr	pc, [ip, #292]!	; 0x124

00010f90 <memchr@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #102400	; 0x19000
   10f98:	ldr	pc, [ip, #284]!	; 0x11c

00010f9c <fclose@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #102400	; 0x19000
   10fa4:	ldr	pc, [ip, #276]!	; 0x114

00010fa8 <fseeko64@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #102400	; 0x19000
   10fb0:	ldr	pc, [ip, #268]!	; 0x10c

00010fb4 <fcntl64@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #102400	; 0x19000
   10fbc:	ldr	pc, [ip, #260]!	; 0x104

00010fc0 <__uflow@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #102400	; 0x19000
   10fc8:	ldr	pc, [ip, #252]!	; 0xfc

00010fcc <__overflow@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #102400	; 0x19000
   10fd4:	ldr	pc, [ip, #244]!	; 0xf4

00010fd8 <setlocale@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #102400	; 0x19000
   10fe0:	ldr	pc, [ip, #236]!	; 0xec

00010fe4 <strrchr@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #102400	; 0x19000
   10fec:	ldr	pc, [ip, #228]!	; 0xe4

00010ff0 <nl_langinfo@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #102400	; 0x19000
   10ff8:	ldr	pc, [ip, #220]!	; 0xdc

00010ffc <fopen64@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #102400	; 0x19000
   11004:	ldr	pc, [ip, #212]!	; 0xd4

00011008 <strpbrk@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #102400	; 0x19000
   11010:	ldr	pc, [ip, #204]!	; 0xcc

00011014 <bindtextdomain@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #102400	; 0x19000
   1101c:	ldr	pc, [ip, #196]!	; 0xc4

00011020 <strncmp@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #102400	; 0x19000
   11028:	ldr	pc, [ip, #188]!	; 0xbc

0001102c <abort@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #102400	; 0x19000
   11034:	ldr	pc, [ip, #180]!	; 0xb4

00011038 <close@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #102400	; 0x19000
   11040:	ldr	pc, [ip, #172]!	; 0xac

00011044 <__assert_fail@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #102400	; 0x19000
   1104c:	ldr	pc, [ip, #164]!	; 0xa4

Disassembly of section .text:

00011050 <.text>:
   11050:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11054:	mov	r5, #0
   11058:	movw	r4, #41352	; 0xa188
   1105c:	movt	r4, #2
   11060:	strd	r6, [sp, #8]
   11064:	mov	r7, r0
   11068:	strd	r8, [sp, #16]
   1106c:	mov	r6, r1
   11070:	movw	r9, #41216	; 0xa100
   11074:	movt	r9, #2
   11078:	strd	sl, [sp, #24]
   1107c:	str	lr, [sp, #32]
   11080:	sub	sp, sp, #76	; 0x4c
   11084:	add	sl, r9, #12
   11088:	ldr	r0, [r1]
   1108c:	str	r5, [sp, #20]
   11090:	str	r5, [sp, #24]
   11094:	str	r5, [sp, #40]	; 0x28
   11098:	str	r5, [sp, #44]	; 0x2c
   1109c:	bl	1375c <__assert_fail@plt+0x2718>
   110a0:	movw	r1, #33692	; 0x839c
   110a4:	movt	r1, #1
   110a8:	ldr	r8, [pc, #3376]	; 11de0 <__assert_fail@plt+0xd9c>
   110ac:	mov	r0, #6
   110b0:	bl	10fd8 <setlocale@plt>
   110b4:	movw	r1, #34876	; 0x883c
   110b8:	movt	r1, #1
   110bc:	movw	r0, #34688	; 0x8780
   110c0:	movt	r0, #1
   110c4:	bl	11014 <bindtextdomain@plt>
   110c8:	movw	r0, #34688	; 0x8780
   110cc:	movt	r0, #1
   110d0:	bl	10e58 <textdomain@plt>
   110d4:	mov	r0, #3
   110d8:	bl	13548 <__assert_fail@plt+0x2504>
   110dc:	strb	r0, [r4, #9]
   110e0:	movw	r0, #12568	; 0x3118
   110e4:	movt	r0, #1
   110e8:	bl	17ca4 <__assert_fail@plt+0x6c60>
   110ec:	movw	r0, #8168	; 0x1fe8
   110f0:	movt	r0, #1
   110f4:	bl	17ca4 <__assert_fail@plt+0x6c60>
   110f8:	mov	r3, #1
   110fc:	str	r5, [r4, #88]	; 0x58
   11100:	strb	r5, [r4, #92]	; 0x5c
   11104:	strh	r5, [r4, #96]	; 0x60
   11108:	strb	r3, [r4, #108]	; 0x6c
   1110c:	b	1111c <__assert_fail@plt+0xd8>
   11110:	mov	r3, #2
   11114:	str	r3, [r4, #88]	; 0x58
   11118:	str	r5, [sp, #20]
   1111c:	mov	r5, #0
   11120:	movw	r2, #35016	; 0x88c8
   11124:	movt	r2, #1
   11128:	mov	r3, r8
   1112c:	mov	r1, r6
   11130:	mov	r0, r7
   11134:	str	r5, [sp]
   11138:	bl	10f00 <getopt_long@plt>
   1113c:	cmn	r0, #1
   11140:	beq	11474 <__assert_fail@plt+0x430>
   11144:	cmp	r0, #105	; 0x69
   11148:	str	r5, [sp, #16]
   1114c:	beq	11428 <__assert_fail@plt+0x3e4>
   11150:	ble	111ec <__assert_fail@plt+0x1a8>
   11154:	cmp	r0, #118	; 0x76
   11158:	beq	1134c <__assert_fail@plt+0x308>
   1115c:	ble	111a0 <__assert_fail@plt+0x15c>
   11160:	cmp	r0, #256	; 0x100
   11164:	beq	113a4 <__assert_fail@plt+0x360>
   11168:	ble	11190 <__assert_fail@plt+0x14c>
   1116c:	movw	r3, #257	; 0x101
   11170:	cmp	r0, r3
   11174:	beq	11110 <__assert_fail@plt+0xcc>
   11178:	movw	r3, #258	; 0x102
   1117c:	cmp	r0, r3
   11180:	bne	11244 <__assert_fail@plt+0x200>
   11184:	mov	r3, #1
   11188:	strb	r3, [r4, #111]	; 0x6f
   1118c:	b	11118 <__assert_fail@plt+0xd4>
   11190:	cmp	r0, #122	; 0x7a
   11194:	bne	11244 <__assert_fail@plt+0x200>
   11198:	strb	r5, [r9, #16]
   1119c:	b	11118 <__assert_fail@plt+0xd4>
   111a0:	cmp	r0, #111	; 0x6f
   111a4:	beq	113b0 <__assert_fail@plt+0x36c>
   111a8:	cmp	r0, #116	; 0x74
   111ac:	bne	11290 <__assert_fail@plt+0x24c>
   111b0:	movw	r5, #41344	; 0xa180
   111b4:	movt	r5, #2
   111b8:	ldr	r0, [r5]
   111bc:	ldrb	r3, [r0]
   111c0:	cmp	r3, #0
   111c4:	bne	11434 <__assert_fail@plt+0x3f0>
   111c8:	mov	r3, #10
   111cc:	ldr	r2, [r9, #4]
   111d0:	cmp	r2, #0
   111d4:	blt	111e0 <__assert_fail@plt+0x19c>
   111d8:	cmp	r2, r3
   111dc:	bne	11d68 <__assert_fail@plt+0xd24>
   111e0:	mov	r5, #0
   111e4:	str	r3, [r9, #4]
   111e8:	b	11118 <__assert_fail@plt+0xd4>
   111ec:	cmp	r0, #49	; 0x31
   111f0:	beq	11404 <__assert_fail@plt+0x3c0>
   111f4:	ble	1124c <__assert_fail@plt+0x208>
   111f8:	cmp	r0, #97	; 0x61
   111fc:	beq	11350 <__assert_fail@plt+0x30c>
   11200:	cmp	r0, #101	; 0x65
   11204:	bne	1123c <__assert_fail@plt+0x1f8>
   11208:	ldr	r0, [r4, #12]
   1120c:	movw	r3, #41344	; 0xa180
   11210:	movt	r3, #2
   11214:	ldr	fp, [r3]
   11218:	cmp	r0, #0
   1121c:	beq	11230 <__assert_fail@plt+0x1ec>
   11220:	mov	r1, fp
   11224:	bl	10dbc <strcmp@plt>
   11228:	cmp	r0, #0
   1122c:	bne	11cdc <__assert_fail@plt+0xc98>
   11230:	mov	r5, #0
   11234:	str	fp, [r4, #12]
   11238:	b	11118 <__assert_fail@plt+0xd4>
   1123c:	cmp	r0, #50	; 0x32
   11240:	beq	113e0 <__assert_fail@plt+0x39c>
   11244:	mov	r0, #1
   11248:	bl	12bd8 <__assert_fail@plt+0x1b94>
   1124c:	cmn	r0, #2
   11250:	beq	11c4c <__assert_fail@plt+0xc08>
   11254:	cmp	r0, #1
   11258:	bne	11304 <__assert_fail@plt+0x2c0>
   1125c:	add	r1, sp, #16
   11260:	add	r2, sp, #20
   11264:	movw	r0, #41344	; 0xa180
   11268:	movt	r0, #2
   1126c:	add	r3, sp, #24
   11270:	str	r2, [sp]
   11274:	add	r2, sp, #40	; 0x28
   11278:	str	r1, [sp, #4]
   1127c:	add	r1, sp, #32
   11280:	ldr	r0, [r0]
   11284:	bl	12f98 <__assert_fail@plt+0x1f54>
   11288:	ldr	r5, [sp, #16]
   1128c:	b	11118 <__assert_fail@plt+0xd4>
   11290:	cmp	r0, #106	; 0x6a
   11294:	bne	11244 <__assert_fail@plt+0x200>
   11298:	movw	r3, #41344	; 0xa180
   1129c:	movt	r3, #2
   112a0:	ldr	r0, [r3]
   112a4:	ldrb	r3, [r0]
   112a8:	sub	r2, r3, #49	; 0x31
   112ac:	cmp	r2, #1
   112b0:	bhi	112e0 <__assert_fail@plt+0x29c>
   112b4:	ldrb	r2, [r0, #1]
   112b8:	cmp	r2, #0
   112bc:	bne	112e0 <__assert_fail@plt+0x29c>
   112c0:	movw	r2, #41320	; 0xa168
   112c4:	movt	r2, #2
   112c8:	ldr	r2, [r2]
   112cc:	sub	r2, r2, #-1073741823	; 0xc0000001
   112d0:	ldr	r2, [r6, r2, lsl #2]
   112d4:	add	r2, r2, #2
   112d8:	cmp	r0, r2
   112dc:	beq	11744 <__assert_fail@plt+0x700>
   112e0:	bl	120b0 <__assert_fail@plt+0x106c>
   112e4:	mov	r1, r0
   112e8:	mov	r0, sl
   112ec:	bl	11ee0 <__assert_fail@plt+0xe9c>
   112f0:	ldr	r0, [pc, #2796]	; 11de4 <__assert_fail@plt+0xda0>
   112f4:	ldr	r1, [r9, #12]
   112f8:	bl	11ee0 <__assert_fail@plt+0xe9c>
   112fc:	ldr	r5, [sp, #16]
   11300:	b	11118 <__assert_fail@plt+0xd4>
   11304:	cmn	r0, #3
   11308:	bne	11244 <__assert_fail@plt+0x200>
   1130c:	movw	r2, #35000	; 0x88b8
   11310:	movt	r2, #1
   11314:	movw	r3, #41236	; 0xa114
   11318:	movt	r3, #2
   1131c:	movw	r0, #41340	; 0xa17c
   11320:	movt	r0, #2
   11324:	stm	sp, {r2, r5}
   11328:	movw	r1, #32308	; 0x7e34
   1132c:	movt	r1, #1
   11330:	ldr	r0, [r0]
   11334:	movw	r2, #34684	; 0x877c
   11338:	movt	r2, #1
   1133c:	ldr	r3, [r3]
   11340:	bl	15fb8 <__assert_fail@plt+0x4f74>
   11344:	mov	r0, r5
   11348:	bl	10f18 <exit@plt>
   1134c:	strb	r5, [r4, #108]	; 0x6c
   11350:	movw	r1, #33692	; 0x839c
   11354:	movt	r1, #1
   11358:	movw	r5, #41344	; 0xa180
   1135c:	movt	r5, #2
   11360:	add	r3, sp, #60	; 0x3c
   11364:	mov	r2, #10
   11368:	str	r1, [sp]
   1136c:	mov	r1, #0
   11370:	ldr	r0, [r5]
   11374:	bl	16758 <__assert_fail@plt+0x5714>
   11378:	cmp	r0, #0
   1137c:	bne	11c54 <__assert_fail@plt+0xc10>
   11380:	ldr	r3, [sp, #60]	; 0x3c
   11384:	sub	r2, r3, #1
   11388:	cmp	r2, #1
   1138c:	bhi	11c54 <__assert_fail@plt+0xc10>
   11390:	cmp	r3, #1
   11394:	movne	r3, #1
   11398:	strbeq	r3, [r4, #109]	; 0x6d
   1139c:	strbne	r3, [r4, #110]	; 0x6e
   113a0:	b	112fc <__assert_fail@plt+0x2b8>
   113a4:	mov	r3, #1
   113a8:	str	r3, [r4, #88]	; 0x58
   113ac:	b	11118 <__assert_fail@plt+0xd4>
   113b0:	movw	r3, #41344	; 0xa180
   113b4:	movt	r3, #2
   113b8:	ldr	fp, [r3]
   113bc:	movw	r1, #34944	; 0x8880
   113c0:	movt	r1, #1
   113c4:	mov	r0, fp
   113c8:	bl	10dbc <strcmp@plt>
   113cc:	subs	r5, r0, #0
   113d0:	bne	1145c <__assert_fail@plt+0x418>
   113d4:	mov	r3, #1
   113d8:	strb	r3, [r4, #16]
   113dc:	b	11118 <__assert_fail@plt+0xd4>
   113e0:	movw	r3, #41344	; 0xa180
   113e4:	movt	r3, #2
   113e8:	ldr	r0, [r3]
   113ec:	bl	120b0 <__assert_fail@plt+0x106c>
   113f0:	mov	r1, r0
   113f4:	ldr	r0, [pc, #2536]	; 11de4 <__assert_fail@plt+0xda0>
   113f8:	bl	11ee0 <__assert_fail@plt+0xe9c>
   113fc:	ldr	r5, [sp, #16]
   11400:	b	11118 <__assert_fail@plt+0xd4>
   11404:	movw	r3, #41344	; 0xa180
   11408:	movt	r3, #2
   1140c:	ldr	r0, [r3]
   11410:	bl	120b0 <__assert_fail@plt+0x106c>
   11414:	mov	r1, r0
   11418:	ldr	r0, [pc, #2504]	; 11de8 <__assert_fail@plt+0xda4>
   1141c:	bl	11ee0 <__assert_fail@plt+0xe9c>
   11420:	ldr	r5, [sp, #16]
   11424:	b	11118 <__assert_fail@plt+0xd4>
   11428:	mov	r3, #1
   1142c:	strb	r3, [r4, #8]
   11430:	b	11118 <__assert_fail@plt+0xd4>
   11434:	ldrb	r2, [r0, #1]
   11438:	cmp	r2, #0
   1143c:	beq	111cc <__assert_fail@plt+0x188>
   11440:	movw	r1, #34952	; 0x8888
   11444:	movt	r1, #1
   11448:	bl	10dbc <strcmp@plt>
   1144c:	cmp	r0, #0
   11450:	bne	11d5c <__assert_fail@plt+0xd18>
   11454:	mov	r3, #0
   11458:	b	111cc <__assert_fail@plt+0x188>
   1145c:	mov	r0, fp
   11460:	bl	12158 <__assert_fail@plt+0x1114>
   11464:	mov	r3, #3
   11468:	mov	r5, r3
   1146c:	str	r3, [sp, #16]
   11470:	b	11118 <__assert_fail@plt+0xd4>
   11474:	movw	r8, #41320	; 0xa168
   11478:	movt	r8, #2
   1147c:	str	r5, [sp, #20]
   11480:	ldr	r0, [r8]
   11484:	cmp	r7, r0
   11488:	ble	114c0 <__assert_fail@plt+0x47c>
   1148c:	add	r9, sp, #16
   11490:	add	r5, sp, #20
   11494:	add	ip, r0, #1
   11498:	add	r3, sp, #24
   1149c:	stm	sp, {r5, r9}
   114a0:	add	r2, sp, #40	; 0x28
   114a4:	add	r1, sp, #32
   114a8:	ldr	r0, [r6, r0, lsl #2]
   114ac:	str	ip, [r8]
   114b0:	bl	12f98 <__assert_fail@plt+0x1f54>
   114b4:	ldr	r0, [r8]
   114b8:	cmp	r0, r7
   114bc:	blt	11494 <__assert_fail@plt+0x450>
   114c0:	ldr	r5, [sp, #24]
   114c4:	cmp	r5, #2
   114c8:	bne	11d74 <__assert_fail@plt+0xd30>
   114cc:	ldr	r3, [sp, #40]	; 0x28
   114d0:	cmp	r3, #0
   114d4:	bne	11710 <__assert_fail@plt+0x6cc>
   114d8:	ldr	r3, [sp, #44]	; 0x2c
   114dc:	cmp	r3, #0
   114e0:	bne	116f4 <__assert_fail@plt+0x6b0>
   114e4:	movw	r5, #41216	; 0xa100
   114e8:	movt	r5, #2
   114ec:	ldr	r3, [r5, #12]
   114f0:	cmn	r3, #1
   114f4:	beq	116e8 <__assert_fail@plt+0x6a4>
   114f8:	ldr	r3, [r5, #8]
   114fc:	movw	r1, #35080	; 0x8908
   11500:	movt	r1, #1
   11504:	ldr	r6, [r4, #100]	; 0x64
   11508:	cmn	r3, #1
   1150c:	moveq	r3, #0
   11510:	mov	r0, r6
   11514:	streq	r3, [r5, #8]
   11518:	bl	10dbc <strcmp@plt>
   1151c:	cmp	r0, #0
   11520:	bne	1172c <__assert_fail@plt+0x6e8>
   11524:	movw	r3, #41336	; 0xa178
   11528:	movt	r3, #2
   1152c:	ldr	r8, [r3]
   11530:	cmp	r8, #0
   11534:	beq	11d44 <__assert_fail@plt+0xd00>
   11538:	ldr	r6, [r4, #104]	; 0x68
   1153c:	movw	r1, #35080	; 0x8908
   11540:	movt	r1, #1
   11544:	mov	r0, r6
   11548:	bl	10dbc <strcmp@plt>
   1154c:	cmp	r0, #0
   11550:	bne	11ba4 <__assert_fail@plt+0xb60>
   11554:	movw	r3, #41336	; 0xa178
   11558:	movt	r3, #2
   1155c:	ldr	r7, [r3]
   11560:	cmp	r7, #0
   11564:	beq	11d14 <__assert_fail@plt+0xcd0>
   11568:	cmp	r8, r7
   1156c:	beq	11ce8 <__assert_fail@plt+0xca4>
   11570:	mov	r1, #2
   11574:	mov	r0, r8
   11578:	mov	r6, #0
   1157c:	bl	13208 <__assert_fail@plt+0x21c4>
   11580:	mov	r1, #2
   11584:	mov	r0, r7
   11588:	bl	13208 <__assert_fail@plt+0x21c4>
   1158c:	add	r1, sp, #48	; 0x30
   11590:	mov	r2, #1
   11594:	str	r6, [sp, #48]	; 0x30
   11598:	mov	r0, r8
   1159c:	str	r6, [sp, #52]	; 0x34
   115a0:	str	r6, [sp, #56]	; 0x38
   115a4:	bl	12b28 <__assert_fail@plt+0x1ae4>
   115a8:	add	r1, sp, #60	; 0x3c
   115ac:	mov	r2, #2
   115b0:	str	r6, [sp, #60]	; 0x3c
   115b4:	mov	r0, r7
   115b8:	str	r6, [sp, #64]	; 0x40
   115bc:	str	r6, [sp, #68]	; 0x44
   115c0:	bl	12b28 <__assert_fail@plt+0x1ae4>
   115c4:	ldrb	r3, [r4, #16]
   115c8:	cmp	r3, r6
   115cc:	ldr	r3, [sp, #48]	; 0x30
   115d0:	beq	1160c <__assert_fail@plt+0x5c8>
   115d4:	cmp	r3, #0
   115d8:	mov	r2, r3
   115dc:	beq	115ec <__assert_fail@plt+0x5a8>
   115e0:	ldr	r2, [sp, #56]	; 0x38
   115e4:	ldr	r2, [r2]
   115e8:	ldr	r2, [r2, #12]
   115ec:	str	r2, [r4, #56]	; 0x38
   115f0:	ldr	r2, [sp, #60]	; 0x3c
   115f4:	cmp	r2, #0
   115f8:	beq	11608 <__assert_fail@plt+0x5c4>
   115fc:	ldr	r2, [sp, #68]	; 0x44
   11600:	ldr	r2, [r2]
   11604:	ldr	r2, [r2, #12]
   11608:	str	r2, [r4, #60]	; 0x3c
   1160c:	ldrb	r2, [r4, #111]	; 0x6f
   11610:	cmp	r2, #0
   11614:	beq	11850 <__assert_fail@plt+0x80c>
   11618:	cmp	r3, #0
   1161c:	ldr	r3, [sp, #60]	; 0x3c
   11620:	bne	11bbc <__assert_fail@plt+0xb78>
   11624:	cmp	r3, #0
   11628:	bne	11818 <__assert_fail@plt+0x7d4>
   1162c:	mov	r3, #0
   11630:	ldr	r2, [r4, #88]	; 0x58
   11634:	mov	r1, #0
   11638:	str	r1, [sp, #28]
   1163c:	cmp	r2, #2
   11640:	beq	1165c <__assert_fail@plt+0x618>
   11644:	ldrb	r2, [r4, #96]	; 0x60
   11648:	cmp	r2, r1
   1164c:	beq	11770 <__assert_fail@plt+0x72c>
   11650:	ldrb	r2, [r4, #97]	; 0x61
   11654:	cmp	r2, r1
   11658:	beq	11770 <__assert_fail@plt+0x72c>
   1165c:	ldrb	r2, [r4, #109]	; 0x6d
   11660:	cmp	r2, #0
   11664:	bne	11be8 <__assert_fail@plt+0xba4>
   11668:	ldrb	r3, [r4, #110]	; 0x6e
   1166c:	cmp	r3, #0
   11670:	bne	11b1c <__assert_fail@plt+0xad8>
   11674:	ldr	r0, [sp, #28]
   11678:	bl	13418 <__assert_fail@plt+0x23d4>
   1167c:	add	r1, sp, #56	; 0x38
   11680:	add	r0, sp, #52	; 0x34
   11684:	bl	12040 <__assert_fail@plt+0xffc>
   11688:	add	r1, sp, #68	; 0x44
   1168c:	add	r0, sp, #64	; 0x40
   11690:	bl	12040 <__assert_fail@plt+0xffc>
   11694:	mov	r0, r8
   11698:	bl	13258 <__assert_fail@plt+0x2214>
   1169c:	subs	r5, r0, #0
   116a0:	bne	11d44 <__assert_fail@plt+0xd00>
   116a4:	mov	r0, r7
   116a8:	bl	13258 <__assert_fail@plt+0x2214>
   116ac:	cmp	r0, #0
   116b0:	bne	11c88 <__assert_fail@plt+0xc44>
   116b4:	ldrb	r3, [r4, #96]	; 0x60
   116b8:	cmp	r3, #0
   116bc:	bne	11cb8 <__assert_fail@plt+0xc74>
   116c0:	ldrb	r3, [r4, #97]	; 0x61
   116c4:	cmp	r3, #0
   116c8:	bne	11cb8 <__assert_fail@plt+0xc74>
   116cc:	add	sp, sp, #76	; 0x4c
   116d0:	ldrd	r4, [sp]
   116d4:	ldrd	r6, [sp, #8]
   116d8:	ldrd	r8, [sp, #16]
   116dc:	ldrd	sl, [sp, #24]
   116e0:	add	sp, sp, #32
   116e4:	pop	{pc}		; (ldr pc, [sp], #4)
   116e8:	mov	r3, #0
   116ec:	str	r3, [r5, #12]
   116f0:	b	114f8 <__assert_fail@plt+0x4b4>
   116f4:	mov	r1, #1
   116f8:	ldr	r0, [pc, #1768]	; 11de8 <__assert_fail@plt+0xda4>
   116fc:	bl	11ee0 <__assert_fail@plt+0xe9c>
   11700:	mov	r1, #1
   11704:	ldr	r0, [pc, #1752]	; 11de4 <__assert_fail@plt+0xda0>
   11708:	bl	11ee0 <__assert_fail@plt+0xe9c>
   1170c:	b	114e4 <__assert_fail@plt+0x4a0>
   11710:	mov	r1, #0
   11714:	ldr	r0, [pc, #1740]	; 11de8 <__assert_fail@plt+0xda4>
   11718:	bl	11ee0 <__assert_fail@plt+0xe9c>
   1171c:	mov	r1, #0
   11720:	ldr	r0, [pc, #1724]	; 11de4 <__assert_fail@plt+0xda0>
   11724:	bl	11ee0 <__assert_fail@plt+0xe9c>
   11728:	b	114d8 <__assert_fail@plt+0x494>
   1172c:	mov	r0, r6
   11730:	movw	r1, #35296	; 0x89e0
   11734:	movt	r1, #1
   11738:	bl	1336c <__assert_fail@plt+0x2328>
   1173c:	mov	r8, r0
   11740:	b	11530 <__assert_fail@plt+0x4ec>
   11744:	sub	r3, r3, #50	; 0x32
   11748:	add	r2, sp, #72	; 0x48
   1174c:	clz	r3, r3
   11750:	lsr	r3, r3, #5
   11754:	add	r2, r2, r3, lsl #2
   11758:	add	r5, r3, #1
   1175c:	ldr	r3, [r2, #-32]	; 0xffffffe0
   11760:	str	r5, [sp, #16]
   11764:	add	r3, r3, #1
   11768:	str	r3, [r2, #-32]	; 0xffffffe0
   1176c:	b	11118 <__assert_fail@plt+0xd4>
   11770:	cmp	r3, #0
   11774:	beq	11b18 <__assert_fail@plt+0xad4>
   11778:	ldrb	r9, [r4, #109]	; 0x6d
   1177c:	cmp	r9, #0
   11780:	moveq	r9, #1
   11784:	bne	11bf4 <__assert_fail@plt+0xbb0>
   11788:	ldr	r3, [sp, #60]	; 0x3c
   1178c:	add	r5, sp, #28
   11790:	ldr	r6, [pc, #1620]	; 11dec <__assert_fail@plt+0xda8>
   11794:	cmp	r3, #0
   11798:	movne	r3, #1
   1179c:	strbne	r3, [r4, #92]	; 0x5c
   117a0:	mov	r2, #1
   117a4:	mov	r1, r5
   117a8:	mov	r0, r8
   117ac:	bl	126ec <__assert_fail@plt+0x16a8>
   117b0:	cmp	r0, #0
   117b4:	beq	117d0 <__assert_fail@plt+0x78c>
   117b8:	ldrb	r3, [r4, #109]	; 0x6d
   117bc:	cmp	r3, #0
   117c0:	bne	117f0 <__assert_fail@plt+0x7ac>
   117c4:	ldrb	r3, [r4, #96]	; 0x60
   117c8:	cmp	r3, #0
   117cc:	beq	117a0 <__assert_fail@plt+0x75c>
   117d0:	ldrb	r3, [r4, #110]	; 0x6e
   117d4:	orrs	r2, r3, r9
   117d8:	bne	11c08 <__assert_fail@plt+0xbc4>
   117dc:	ldr	r0, [sp, #28]
   117e0:	cmp	r0, #0
   117e4:	beq	11674 <__assert_fail@plt+0x630>
   117e8:	bl	11fac <__assert_fail@plt+0xf68>
   117ec:	b	11674 <__assert_fail@plt+0x630>
   117f0:	mov	r1, r6
   117f4:	ldr	r0, [sp, #28]
   117f8:	bl	12554 <__assert_fail@plt+0x1510>
   117fc:	ldrb	r3, [r4, #96]	; 0x60
   11800:	cmp	r3, #0
   11804:	beq	117a0 <__assert_fail@plt+0x75c>
   11808:	ldrb	r3, [r4, #109]	; 0x6d
   1180c:	cmp	r3, #0
   11810:	bne	117a0 <__assert_fail@plt+0x75c>
   11814:	b	117d0 <__assert_fail@plt+0x78c>
   11818:	ldr	r0, [pc, #1484]	; 11dec <__assert_fail@plt+0xda8>
   1181c:	ldr	r3, [sp, #68]	; 0x44
   11820:	ldr	r1, [r3]
   11824:	bl	12554 <__assert_fail@plt+0x1510>
   11828:	ldr	r3, [sp, #48]	; 0x30
   1182c:	mov	r0, #0
   11830:	str	r0, [r4, #64]	; 0x40
   11834:	str	r0, [r4, #68]	; 0x44
   11838:	cmp	r3, r0
   1183c:	bne	11c18 <__assert_fail@plt+0xbd4>
   11840:	ldr	r3, [sp, #60]	; 0x3c
   11844:	cmp	r3, #0
   11848:	bne	11c30 <__assert_fail@plt+0xbec>
   1184c:	ldr	r3, [sp, #48]	; 0x30
   11850:	mov	sl, #1
   11854:	cmp	r3, #0
   11858:	beq	1162c <__assert_fail@plt+0x5e8>
   1185c:	ldr	r2, [sp, #60]	; 0x3c
   11860:	cmp	r2, #0
   11864:	beq	11630 <__assert_fail@plt+0x5ec>
   11868:	ldr	r2, [sp, #56]	; 0x38
   1186c:	ldr	r3, [sp, #68]	; 0x44
   11870:	ldr	ip, [r5, #8]
   11874:	ldr	r2, [r2]
   11878:	ldr	r3, [r3]
   1187c:	ldr	lr, [r5, #12]
   11880:	add	r1, r2, #20
   11884:	ldr	r0, [r2, #12]
   11888:	add	r3, r3, #20
   1188c:	ldr	r2, [r3, #-8]
   11890:	str	lr, [sp]
   11894:	str	ip, [sp, #4]
   11898:	bl	1225c <__assert_fail@plt+0x1218>
   1189c:	cmp	r0, #0
   118a0:	blt	11a34 <__assert_fail@plt+0x9f0>
   118a4:	beq	11920 <__assert_fail@plt+0x8dc>
   118a8:	ldrb	r3, [r4, #110]	; 0x6e
   118ac:	cmp	r3, #0
   118b0:	bne	11a64 <__assert_fail@plt+0xa20>
   118b4:	mov	r3, #0
   118b8:	mov	r2, #2
   118bc:	add	r1, sp, #60	; 0x3c
   118c0:	mov	r0, r7
   118c4:	str	r3, [sp, #60]	; 0x3c
   118c8:	bl	12b28 <__assert_fail@plt+0x1ae4>
   118cc:	ldr	r3, [sp, #48]	; 0x30
   118d0:	strb	sl, [r4, #92]	; 0x5c
   118d4:	cmp	r3, #0
   118d8:	bne	1185c <__assert_fail@plt+0x818>
   118dc:	b	1162c <__assert_fail@plt+0x5e8>
   118e0:	ldr	r2, [sp, #56]	; 0x38
   118e4:	sub	r3, r3, #-1073741823	; 0xc0000001
   118e8:	ldr	r1, [sp, #68]	; 0x44
   118ec:	ldr	ip, [r5, #8]
   118f0:	ldr	r2, [r2, r3, lsl #2]
   118f4:	ldr	r3, [r1]
   118f8:	ldr	lr, [r5, #12]
   118fc:	add	r1, r2, #20
   11900:	ldr	r0, [r2, #12]
   11904:	add	r3, r3, #20
   11908:	ldr	r2, [r3, #-8]
   1190c:	str	lr, [sp]
   11910:	str	ip, [sp, #4]
   11914:	bl	1225c <__assert_fail@plt+0x1218>
   11918:	cmp	r0, #0
   1191c:	bne	11a94 <__assert_fail@plt+0xa50>
   11920:	mov	r2, #1
   11924:	add	r1, sp, #48	; 0x30
   11928:	mov	r0, r8
   1192c:	bl	12b28 <__assert_fail@plt+0x1ae4>
   11930:	cmp	r0, #0
   11934:	ldr	r3, [sp, #48]	; 0x30
   11938:	bne	118e0 <__assert_fail@plt+0x89c>
   1193c:	mov	r2, #1
   11940:	add	r3, r3, r2
   11944:	str	r2, [sp, #8]
   11948:	str	r3, [sp, #48]	; 0x30
   1194c:	b	11994 <__assert_fail@plt+0x950>
   11950:	ldr	r1, [sp, #56]	; 0x38
   11954:	ldr	r3, [sp, #60]	; 0x3c
   11958:	ldr	r2, [sp, #68]	; 0x44
   1195c:	ldr	r1, [r1]
   11960:	sub	r3, r3, #-1073741823	; 0xc0000001
   11964:	ldr	ip, [r5, #8]
   11968:	ldr	r3, [r2, r3, lsl #2]
   1196c:	add	r1, r1, #20
   11970:	ldr	lr, [r5, #12]
   11974:	ldr	r0, [r1, #-8]
   11978:	add	r3, r3, #20
   1197c:	ldr	r2, [r3, #-8]
   11980:	str	lr, [sp]
   11984:	str	ip, [sp, #4]
   11988:	bl	1225c <__assert_fail@plt+0x1218>
   1198c:	cmp	r0, #0
   11990:	bne	11a88 <__assert_fail@plt+0xa44>
   11994:	mov	r2, #2
   11998:	add	r1, sp, #60	; 0x3c
   1199c:	mov	r0, r7
   119a0:	bl	12b28 <__assert_fail@plt+0x1ae4>
   119a4:	cmp	r0, #0
   119a8:	bne	11950 <__assert_fail@plt+0x90c>
   119ac:	ldr	r2, [sp, #60]	; 0x3c
   119b0:	mov	r3, #1
   119b4:	str	r3, [sp, #12]
   119b8:	add	r2, r2, r3
   119bc:	str	r2, [sp, #60]	; 0x3c
   119c0:	ldrb	r3, [r4, #108]	; 0x6c
   119c4:	cmp	r3, #0
   119c8:	bne	11ab4 <__assert_fail@plt+0xa70>
   119cc:	ldr	r3, [sp, #8]
   119d0:	cmp	r3, #0
   119d4:	bne	11a78 <__assert_fail@plt+0xa34>
   119d8:	ldr	r3, [sp, #48]	; 0x30
   119dc:	ldr	r2, [sp, #56]	; 0x38
   119e0:	sub	r1, r3, #-1073741823	; 0xc0000001
   119e4:	mov	r3, #1
   119e8:	ldr	r0, [r2]
   119ec:	ldr	ip, [r2, r1, lsl #2]
   119f0:	str	ip, [r2]
   119f4:	str	r0, [r2, r1, lsl #2]
   119f8:	str	sl, [sp, #48]	; 0x30
   119fc:	ldr	r2, [sp, #12]
   11a00:	cmp	r2, #0
   11a04:	movne	r2, #0
   11a08:	strne	r2, [sp, #60]	; 0x3c
   11a0c:	bne	11854 <__assert_fail@plt+0x810>
   11a10:	ldr	r1, [sp, #60]	; 0x3c
   11a14:	ldr	r2, [sp, #68]	; 0x44
   11a18:	sub	r1, r1, #-1073741823	; 0xc0000001
   11a1c:	ldr	r0, [r2]
   11a20:	ldr	ip, [r2, r1, lsl #2]
   11a24:	str	ip, [r2]
   11a28:	str	r0, [r2, r1, lsl #2]
   11a2c:	str	sl, [sp, #60]	; 0x3c
   11a30:	b	11854 <__assert_fail@plt+0x810>
   11a34:	ldrb	r3, [r4, #109]	; 0x6d
   11a38:	cmp	r3, #0
   11a3c:	bne	11aa0 <__assert_fail@plt+0xa5c>
   11a40:	mov	r3, #0
   11a44:	mov	r2, #1
   11a48:	add	r1, sp, #48	; 0x30
   11a4c:	mov	r0, r8
   11a50:	str	r3, [sp, #48]	; 0x30
   11a54:	bl	12b28 <__assert_fail@plt+0x1ae4>
   11a58:	strb	sl, [r4, #92]	; 0x5c
   11a5c:	ldr	r3, [sp, #48]	; 0x30
   11a60:	b	11854 <__assert_fail@plt+0x810>
   11a64:	ldr	r3, [sp, #68]	; 0x44
   11a68:	ldr	r0, [pc, #892]	; 11dec <__assert_fail@plt+0xda8>
   11a6c:	ldr	r1, [r3]
   11a70:	bl	12554 <__assert_fail@plt+0x1510>
   11a74:	b	118b4 <__assert_fail@plt+0x870>
   11a78:	mov	r2, #0
   11a7c:	mov	r3, r2
   11a80:	str	r2, [sp, #48]	; 0x30
   11a84:	b	119fc <__assert_fail@plt+0x9b8>
   11a88:	mov	r3, #0
   11a8c:	str	r3, [sp, #12]
   11a90:	b	119c0 <__assert_fail@plt+0x97c>
   11a94:	mov	r3, #0
   11a98:	str	r3, [sp, #8]
   11a9c:	b	11994 <__assert_fail@plt+0x950>
   11aa0:	ldr	r3, [sp, #56]	; 0x38
   11aa4:	ldr	r1, [pc, #832]	; 11dec <__assert_fail@plt+0xda8>
   11aa8:	ldr	r0, [r3]
   11aac:	bl	12554 <__assert_fail@plt+0x1510>
   11ab0:	b	11a40 <__assert_fail@plt+0x9fc>
   11ab4:	ldr	r3, [sp, #48]	; 0x30
   11ab8:	cmp	r3, #1
   11abc:	movne	r9, #0
   11ac0:	ldrne	r2, [sp, #60]	; 0x3c
   11ac4:	beq	119cc <__assert_fail@plt+0x988>
   11ac8:	cmp	r2, #1
   11acc:	lslne	fp, r9, #2
   11ad0:	movne	r6, #0
   11ad4:	beq	11b04 <__assert_fail@plt+0xac0>
   11ad8:	ldr	r2, [sp, #56]	; 0x38
   11adc:	ldr	r3, [sp, #68]	; 0x44
   11ae0:	ldr	r0, [r2, fp]
   11ae4:	ldr	r1, [r3, r6, lsl #2]
   11ae8:	add	r6, r6, #1
   11aec:	bl	12554 <__assert_fail@plt+0x1510>
   11af0:	ldr	r2, [sp, #60]	; 0x3c
   11af4:	sub	r3, r2, #1
   11af8:	cmp	r6, r3
   11afc:	bcc	11ad8 <__assert_fail@plt+0xa94>
   11b00:	ldr	r3, [sp, #48]	; 0x30
   11b04:	add	r9, r9, #1
   11b08:	sub	r1, r3, #1
   11b0c:	cmp	r9, r1
   11b10:	bcc	11ac8 <__assert_fail@plt+0xa84>
   11b14:	b	119cc <__assert_fail@plt+0x988>
   11b18:	ldrb	r3, [r4, #110]	; 0x6e
   11b1c:	ldr	r2, [sp, #60]	; 0x3c
   11b20:	cmp	r2, #0
   11b24:	beq	11674 <__assert_fail@plt+0x630>
   11b28:	add	r5, sp, #28
   11b2c:	cmp	r3, #0
   11b30:	bne	11bd4 <__assert_fail@plt+0xb90>
   11b34:	ldr	r3, [sp, #48]	; 0x30
   11b38:	ldr	r6, [pc, #684]	; 11dec <__assert_fail@plt+0xda8>
   11b3c:	cmp	r3, #0
   11b40:	movne	r3, #1
   11b44:	strbne	r3, [r4, #92]	; 0x5c
   11b48:	mov	r2, #2
   11b4c:	mov	r1, r5
   11b50:	mov	r0, r7
   11b54:	bl	126ec <__assert_fail@plt+0x16a8>
   11b58:	cmp	r0, #0
   11b5c:	beq	117dc <__assert_fail@plt+0x798>
   11b60:	ldrb	r3, [r4, #110]	; 0x6e
   11b64:	cmp	r3, #0
   11b68:	bne	11b7c <__assert_fail@plt+0xb38>
   11b6c:	ldrb	r3, [r4, #97]	; 0x61
   11b70:	cmp	r3, #0
   11b74:	beq	11b48 <__assert_fail@plt+0xb04>
   11b78:	b	117dc <__assert_fail@plt+0x798>
   11b7c:	mov	r0, r6
   11b80:	ldr	r1, [sp, #28]
   11b84:	bl	12554 <__assert_fail@plt+0x1510>
   11b88:	ldrb	r3, [r4, #97]	; 0x61
   11b8c:	cmp	r3, #0
   11b90:	beq	11b48 <__assert_fail@plt+0xb04>
   11b94:	ldrb	r3, [r4, #110]	; 0x6e
   11b98:	cmp	r3, #0
   11b9c:	bne	11b48 <__assert_fail@plt+0xb04>
   11ba0:	b	117dc <__assert_fail@plt+0x798>
   11ba4:	mov	r0, r6
   11ba8:	movw	r1, #35296	; 0x89e0
   11bac:	movt	r1, #1
   11bb0:	bl	1336c <__assert_fail@plt+0x2328>
   11bb4:	mov	r7, r0
   11bb8:	b	11560 <__assert_fail@plt+0x51c>
   11bbc:	ldr	r2, [sp, #56]	; 0x38
   11bc0:	cmp	r3, #0
   11bc4:	ldreq	r1, [pc, #544]	; 11dec <__assert_fail@plt+0xda8>
   11bc8:	ldr	r0, [r2]
   11bcc:	beq	11824 <__assert_fail@plt+0x7e0>
   11bd0:	b	1181c <__assert_fail@plt+0x7d8>
   11bd4:	ldr	r3, [sp, #68]	; 0x44
   11bd8:	ldr	r0, [pc, #524]	; 11dec <__assert_fail@plt+0xda8>
   11bdc:	ldr	r1, [r3]
   11be0:	bl	12554 <__assert_fail@plt+0x1510>
   11be4:	b	11b34 <__assert_fail@plt+0xaf0>
   11be8:	cmp	r3, #0
   11bec:	beq	11668 <__assert_fail@plt+0x624>
   11bf0:	mov	r9, #0
   11bf4:	ldr	r3, [sp, #56]	; 0x38
   11bf8:	ldr	r1, [pc, #492]	; 11dec <__assert_fail@plt+0xda8>
   11bfc:	ldr	r0, [r3]
   11c00:	bl	12554 <__assert_fail@plt+0x1510>
   11c04:	b	11788 <__assert_fail@plt+0x744>
   11c08:	ldr	r2, [sp, #60]	; 0x3c
   11c0c:	cmp	r2, #0
   11c10:	beq	117dc <__assert_fail@plt+0x798>
   11c14:	b	11b2c <__assert_fail@plt+0xae8>
   11c18:	mov	r2, #1
   11c1c:	add	r1, sp, #48	; 0x30
   11c20:	str	r0, [sp, #48]	; 0x30
   11c24:	mov	r0, r8
   11c28:	bl	12b28 <__assert_fail@plt+0x1ae4>
   11c2c:	b	11840 <__assert_fail@plt+0x7fc>
   11c30:	mov	r3, #0
   11c34:	mov	r2, #2
   11c38:	add	r1, sp, #60	; 0x3c
   11c3c:	mov	r0, r7
   11c40:	str	r3, [sp, #60]	; 0x3c
   11c44:	bl	12b28 <__assert_fail@plt+0x1ae4>
   11c48:	b	1184c <__assert_fail@plt+0x808>
   11c4c:	mov	r0, r5
   11c50:	bl	12bd8 <__assert_fail@plt+0x1b94>
   11c54:	movw	r1, #32164	; 0x7da4
   11c58:	movt	r1, #1
   11c5c:	mov	r2, #5
   11c60:	mov	r0, #0
   11c64:	bl	10e40 <dcgettext@plt>
   11c68:	mov	r4, r0
   11c6c:	ldr	r0, [r5]
   11c70:	bl	15a4c <__assert_fail@plt+0x4a08>
   11c74:	mov	r3, r0
   11c78:	mov	r2, r4
   11c7c:	mov	r1, #0
   11c80:	mov	r0, #1
   11c84:	bl	10eac <error@plt>
   11c88:	bl	10f48 <__errno_location@plt>
   11c8c:	ldr	r6, [r0]
   11c90:	mov	r1, #3
   11c94:	mov	r0, r5
   11c98:	ldr	r2, [r4, #104]	; 0x68
   11c9c:	bl	15874 <__assert_fail@plt+0x4830>
   11ca0:	mov	r3, r0
   11ca4:	movw	r2, #35372	; 0x8a2c
   11ca8:	movt	r2, #1
   11cac:	mov	r1, r6
   11cb0:	mov	r0, #1
   11cb4:	bl	10eac <error@plt>
   11cb8:	movw	r1, #35120	; 0x8930
   11cbc:	movt	r1, #1
   11cc0:	mov	r2, #5
   11cc4:	mov	r0, #0
   11cc8:	bl	10e40 <dcgettext@plt>
   11ccc:	mov	r2, r0
   11cd0:	mov	r1, #0
   11cd4:	mov	r0, #1
   11cd8:	bl	10eac <error@plt>
   11cdc:	movw	r1, #34900	; 0x8854
   11ce0:	movt	r1, #1
   11ce4:	b	11cc0 <__assert_fail@plt+0xc7c>
   11ce8:	bl	10f48 <__errno_location@plt>
   11cec:	ldr	r4, [r0]
   11cf0:	mov	r2, #5
   11cf4:	movw	r1, #35084	; 0x890c
   11cf8:	movt	r1, #1
   11cfc:	mov	r0, #0
   11d00:	bl	10e40 <dcgettext@plt>
   11d04:	mov	r2, r0
   11d08:	mov	r0, #1
   11d0c:	mov	r1, r4
   11d10:	bl	10eac <error@plt>
   11d14:	bl	10f48 <__errno_location@plt>
   11d18:	ldr	r2, [r4, #104]	; 0x68
   11d1c:	mov	r1, #3
   11d20:	ldr	r5, [r0]
   11d24:	mov	r0, r7
   11d28:	bl	15874 <__assert_fail@plt+0x4830>
   11d2c:	mov	r3, r0
   11d30:	movw	r2, #35372	; 0x8a2c
   11d34:	movt	r2, #1
   11d38:	mov	r1, r5
   11d3c:	mov	r0, #1
   11d40:	bl	10eac <error@plt>
   11d44:	bl	10f48 <__errno_location@plt>
   11d48:	mov	r1, #3
   11d4c:	ldr	r5, [r0]
   11d50:	mov	r0, #0
   11d54:	ldr	r2, [r4, #100]	; 0x64
   11d58:	b	11d28 <__assert_fail@plt+0xce4>
   11d5c:	movw	r1, #34956	; 0x888c
   11d60:	movt	r1, #1
   11d64:	b	11c5c <__assert_fail@plt+0xc18>
   11d68:	movw	r1, #34980	; 0x88a4
   11d6c:	movt	r1, #1
   11d70:	b	11cc0 <__assert_fail@plt+0xc7c>
   11d74:	cmp	r5, #0
   11d78:	bne	11da4 <__assert_fail@plt+0xd60>
   11d7c:	mov	r2, #5
   11d80:	mov	r0, r5
   11d84:	movw	r1, #35036	; 0x88dc
   11d88:	movt	r1, #1
   11d8c:	bl	10e40 <dcgettext@plt>
   11d90:	mov	r2, r0
   11d94:	mov	r1, r5
   11d98:	mov	r0, r5
   11d9c:	bl	10eac <error@plt>
   11da0:	b	11244 <__assert_fail@plt+0x200>
   11da4:	mov	r2, #5
   11da8:	movw	r1, #35052	; 0x88ec
   11dac:	movt	r1, #1
   11db0:	mov	r0, #0
   11db4:	bl	10e40 <dcgettext@plt>
   11db8:	sub	r7, r7, #-1073741823	; 0xc0000001
   11dbc:	mov	r4, r0
   11dc0:	ldr	r0, [r6, r7, lsl #2]
   11dc4:	bl	15a4c <__assert_fail@plt+0x4a08>
   11dc8:	mov	r1, #0
   11dcc:	mov	r3, r0
   11dd0:	mov	r2, r4
   11dd4:	mov	r0, r1
   11dd8:	bl	10eac <error@plt>
   11ddc:	b	11244 <__assert_fail@plt+0x200>
   11de0:	andeq	r7, r1, r0, lsl #26
   11de4:	andeq	sl, r2, r8, lsl #2
   11de8:	andeq	sl, r2, ip, lsl #2
   11dec:	andeq	sl, r2, r8, lsr #3
   11df0:	mov	fp, #0
   11df4:	mov	lr, #0
   11df8:	pop	{r1}		; (ldr r1, [sp], #4)
   11dfc:	mov	r2, sp
   11e00:	push	{r2}		; (str r2, [sp, #-4]!)
   11e04:	push	{r0}		; (str r0, [sp, #-4]!)
   11e08:	ldr	ip, [pc, #16]	; 11e20 <__assert_fail@plt+0xddc>
   11e0c:	push	{ip}		; (str ip, [sp, #-4]!)
   11e10:	ldr	r0, [pc, #12]	; 11e24 <__assert_fail@plt+0xde0>
   11e14:	ldr	r3, [pc, #12]	; 11e28 <__assert_fail@plt+0xde4>
   11e18:	bl	10ed0 <__libc_start_main@plt>
   11e1c:	bl	1102c <abort@plt>
   11e20:	andeq	r7, r1, r0, lsr #25
   11e24:	andeq	r1, r1, r0, asr r0
   11e28:	andeq	r7, r1, r0, asr #24
   11e2c:	ldr	r3, [pc, #20]	; 11e48 <__assert_fail@plt+0xe04>
   11e30:	ldr	r2, [pc, #20]	; 11e4c <__assert_fail@plt+0xe08>
   11e34:	add	r3, pc, r3
   11e38:	ldr	r2, [r3, r2]
   11e3c:	cmp	r2, #0
   11e40:	bxeq	lr
   11e44:	b	10ef4 <__gmon_start__@plt>
   11e48:	andeq	r8, r1, r4, asr #3
   11e4c:	strdeq	r0, [r0], -r4
   11e50:	ldr	r0, [pc, #24]	; 11e70 <__assert_fail@plt+0xe2c>
   11e54:	ldr	r3, [pc, #24]	; 11e74 <__assert_fail@plt+0xe30>
   11e58:	cmp	r3, r0
   11e5c:	bxeq	lr
   11e60:	ldr	r3, [pc, #16]	; 11e78 <__assert_fail@plt+0xe34>
   11e64:	cmp	r3, #0
   11e68:	bxeq	lr
   11e6c:	bx	r3
   11e70:	andeq	sl, r2, ip, asr r1
   11e74:	andeq	sl, r2, ip, asr r1
   11e78:	andeq	r0, r0, r0
   11e7c:	ldr	r0, [pc, #36]	; 11ea8 <__assert_fail@plt+0xe64>
   11e80:	ldr	r1, [pc, #36]	; 11eac <__assert_fail@plt+0xe68>
   11e84:	sub	r1, r1, r0
   11e88:	asr	r1, r1, #2
   11e8c:	add	r1, r1, r1, lsr #31
   11e90:	asrs	r1, r1, #1
   11e94:	bxeq	lr
   11e98:	ldr	r3, [pc, #16]	; 11eb0 <__assert_fail@plt+0xe6c>
   11e9c:	cmp	r3, #0
   11ea0:	bxeq	lr
   11ea4:	bx	r3
   11ea8:	andeq	sl, r2, ip, asr r1
   11eac:	andeq	sl, r2, ip, asr r1
   11eb0:	andeq	r0, r0, r0
   11eb4:	push	{r4, lr}
   11eb8:	ldr	r4, [pc, #24]	; 11ed8 <__assert_fail@plt+0xe94>
   11ebc:	ldrb	r3, [r4]
   11ec0:	cmp	r3, #0
   11ec4:	popne	{r4, pc}
   11ec8:	bl	11e50 <__assert_fail@plt+0xe0c>
   11ecc:	mov	r3, #1
   11ed0:	strb	r3, [r4]
   11ed4:	pop	{r4, pc}
   11ed8:	andeq	sl, r2, r4, lsl #3
   11edc:	b	11e7c <__assert_fail@plt+0xe38>
   11ee0:	strd	r4, [sp, #-12]!
   11ee4:	ldr	r5, [r0]
   11ee8:	str	lr, [sp, #8]
   11eec:	sub	sp, sp, #12
   11ef0:	cmp	r5, r1
   11ef4:	cmnne	r5, #1
   11ef8:	bne	11f10 <__assert_fail@plt+0xecc>
   11efc:	str	r1, [r0]
   11f00:	add	sp, sp, #12
   11f04:	ldrd	r4, [sp]
   11f08:	add	sp, sp, #8
   11f0c:	pop	{pc}		; (ldr pc, [sp], #4)
   11f10:	mov	r4, r1
   11f14:	mov	r2, #5
   11f18:	movw	r1, #32128	; 0x7d80
   11f1c:	movt	r1, #1
   11f20:	mov	r0, #0
   11f24:	add	r4, r4, #1
   11f28:	bl	10e40 <dcgettext@plt>
   11f2c:	mov	r2, r0
   11f30:	add	r3, r5, #1
   11f34:	str	r4, [sp]
   11f38:	mov	r1, #0
   11f3c:	mov	r0, #1
   11f40:	bl	10eac <error@plt>
   11f44:	strd	r4, [sp, #-16]!
   11f48:	mov	r5, r2
   11f4c:	mov	r4, r0
   11f50:	ldr	r3, [r0, #12]
   11f54:	ldr	r2, [r0, #16]
   11f58:	ldr	r0, [r0, #20]
   11f5c:	str	r6, [sp, #8]
   11f60:	mov	r6, r1
   11f64:	str	lr, [sp, #12]
   11f68:	cmp	r3, r2
   11f6c:	bcs	11f94 <__assert_fail@plt+0xf50>
   11f70:	add	r2, r0, r3, lsl #3
   11f74:	str	r6, [r0, r3, lsl #3]
   11f78:	add	r3, r3, #1
   11f7c:	ldr	r6, [sp, #8]
   11f80:	str	r5, [r2, #4]
   11f84:	str	r3, [r4, #12]
   11f88:	ldrd	r4, [sp]
   11f8c:	add	sp, sp, #12
   11f90:	pop	{pc}		; (ldr pc, [sp], #4)
   11f94:	mov	r2, #8
   11f98:	add	r1, r4, #16
   11f9c:	bl	16250 <__assert_fail@plt+0x520c>
   11fa0:	str	r0, [r4, #20]
   11fa4:	ldr	r3, [r4, #12]
   11fa8:	b	11f70 <__assert_fail@plt+0xf2c>
   11fac:	strd	r4, [sp, #-16]!
   11fb0:	mov	r4, r0
   11fb4:	mov	r5, #0
   11fb8:	ldr	r0, [r0, #20]
   11fbc:	str	r6, [sp, #8]
   11fc0:	str	lr, [sp, #12]
   11fc4:	bl	13418 <__assert_fail@plt+0x23d4>
   11fc8:	str	r5, [r4, #20]
   11fcc:	ldr	r0, [r4, #8]
   11fd0:	bl	13418 <__assert_fail@plt+0x23d4>
   11fd4:	ldr	r6, [sp, #8]
   11fd8:	str	r5, [r4, #8]
   11fdc:	ldrd	r4, [sp]
   11fe0:	add	sp, sp, #12
   11fe4:	pop	{pc}		; (ldr pc, [sp], #4)
   11fe8:	str	r4, [sp, #-8]!
   11fec:	movw	r4, #41352	; 0xa188
   11ff0:	movt	r4, #2
   11ff4:	ldr	r0, [r4]
   11ff8:	str	lr, [sp, #4]
   11ffc:	cmp	r0, #0
   12000:	beq	12010 <__assert_fail@plt+0xfcc>
   12004:	bl	11fac <__assert_fail@plt+0xf68>
   12008:	ldr	r0, [r4]
   1200c:	bl	13418 <__assert_fail@plt+0x23d4>
   12010:	ldr	r0, [r4, #4]
   12014:	cmp	r0, #0
   12018:	beq	12034 <__assert_fail@plt+0xff0>
   1201c:	bl	11fac <__assert_fail@plt+0xf68>
   12020:	ldr	r0, [r4, #4]
   12024:	ldr	r4, [sp]
   12028:	ldr	lr, [sp, #4]
   1202c:	add	sp, sp, #8
   12030:	b	13418 <__assert_fail@plt+0x23d4>
   12034:	ldr	r4, [sp]
   12038:	add	sp, sp, #4
   1203c:	pop	{pc}		; (ldr pc, [sp], #4)
   12040:	ldr	r3, [r0]
   12044:	strd	r4, [sp, #-16]!
   12048:	mov	r5, r1
   1204c:	str	r6, [sp, #8]
   12050:	str	lr, [sp, #12]
   12054:	cmp	r3, #0
   12058:	movne	r6, r0
   1205c:	movne	r4, #0
   12060:	beq	12098 <__assert_fail@plt+0x1054>
   12064:	ldr	r3, [r5]
   12068:	ldr	r3, [r3, r4, lsl #2]
   1206c:	subs	r0, r3, #0
   12070:	beq	12080 <__assert_fail@plt+0x103c>
   12074:	bl	11fac <__assert_fail@plt+0xf68>
   12078:	ldr	r3, [r5]
   1207c:	ldr	r3, [r3, r4, lsl #2]
   12080:	mov	r0, r3
   12084:	add	r4, r4, #1
   12088:	bl	13418 <__assert_fail@plt+0x23d4>
   1208c:	ldr	r3, [r6]
   12090:	cmp	r4, r3
   12094:	bcc	12064 <__assert_fail@plt+0x1020>
   12098:	ldr	r0, [r5]
   1209c:	ldrd	r4, [sp]
   120a0:	ldr	r6, [sp, #8]
   120a4:	ldr	lr, [sp, #12]
   120a8:	add	sp, sp, #16
   120ac:	b	13418 <__assert_fail@plt+0x23d4>
   120b0:	movw	ip, #33692	; 0x839c
   120b4:	movt	ip, #1
   120b8:	strd	r4, [sp, #-12]!
   120bc:	str	lr, [sp, #8]
   120c0:	sub	sp, sp, #20
   120c4:	mov	r2, #10
   120c8:	mov	r1, #0
   120cc:	add	r3, sp, #8
   120d0:	str	ip, [sp]
   120d4:	mov	r4, r0
   120d8:	bl	16c58 <__assert_fail@plt+0x5c14>
   120dc:	cmp	r0, #1
   120e0:	beq	12104 <__assert_fail@plt+0x10c0>
   120e4:	cmp	r0, #0
   120e8:	bne	12124 <__assert_fail@plt+0x10e0>
   120ec:	ldrd	r0, [sp, #8]
   120f0:	mov	r3, #0
   120f4:	mvn	r2, #0
   120f8:	cmp	r1, r3
   120fc:	cmpeq	r0, r2
   12100:	bls	12118 <__assert_fail@plt+0x10d4>
   12104:	mvn	r0, #1
   12108:	add	sp, sp, #20
   1210c:	ldrd	r4, [sp]
   12110:	add	sp, sp, #8
   12114:	pop	{pc}		; (ldr pc, [sp], #4)
   12118:	orrs	r3, r0, r1
   1211c:	subne	r0, r0, #1
   12120:	bne	12108 <__assert_fail@plt+0x10c4>
   12124:	mov	r2, #5
   12128:	movw	r1, #32164	; 0x7da4
   1212c:	movt	r1, #1
   12130:	mov	r0, #0
   12134:	bl	10e40 <dcgettext@plt>
   12138:	mov	r5, r0
   1213c:	mov	r0, r4
   12140:	bl	15a4c <__assert_fail@plt+0x4a08>
   12144:	mov	r3, r0
   12148:	mov	r2, r5
   1214c:	mov	r1, #0
   12150:	mov	r0, #1
   12154:	bl	10eac <error@plt>
   12158:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1215c:	mov	r5, r0
   12160:	strd	r6, [sp, #8]
   12164:	movw	r7, #32192	; 0x7dc0
   12168:	movt	r7, #1
   1216c:	mov	r6, #0
   12170:	str	r8, [sp, #16]
   12174:	str	lr, [sp, #20]
   12178:	b	121bc <__assert_fail@plt+0x1178>
   1217c:	ldrb	r8, [r5, #1]
   12180:	cmp	r8, #0
   12184:	bne	12250 <__assert_fail@plt+0x120c>
   12188:	mov	r5, r8
   1218c:	mov	r0, #12
   12190:	bl	160c8 <__assert_fail@plt+0x5084>
   12194:	movw	r3, #41216	; 0xa100
   12198:	movt	r3, #2
   1219c:	stm	r0, {r5, r8}
   121a0:	ldr	r2, [r3]
   121a4:	cmp	r4, #0
   121a8:	str	r0, [r3]
   121ac:	str	r6, [r0, #8]
   121b0:	str	r0, [r2, #8]
   121b4:	beq	12208 <__assert_fail@plt+0x11c4>
   121b8:	mov	r5, r4
   121bc:	mov	r1, r7
   121c0:	mov	r0, r5
   121c4:	bl	11008 <strpbrk@plt>
   121c8:	subs	r4, r0, #0
   121cc:	strbne	r6, [r4], #1
   121d0:	ldrb	r3, [r5]
   121d4:	cmp	r3, #48	; 0x30
   121d8:	beq	1217c <__assert_fail@plt+0x1138>
   121dc:	bcc	1221c <__assert_fail@plt+0x11d8>
   121e0:	cmp	r3, #50	; 0x32
   121e4:	bhi	1221c <__assert_fail@plt+0x11d8>
   121e8:	ldrb	r2, [r5, #1]
   121ec:	cmp	r2, #46	; 0x2e
   121f0:	bne	12250 <__assert_fail@plt+0x120c>
   121f4:	add	r0, r5, #2
   121f8:	sub	r5, r3, #48	; 0x30
   121fc:	bl	120b0 <__assert_fail@plt+0x106c>
   12200:	mov	r8, r0
   12204:	b	1218c <__assert_fail@plt+0x1148>
   12208:	ldrd	r4, [sp]
   1220c:	ldrd	r6, [sp, #8]
   12210:	ldr	r8, [sp, #16]
   12214:	add	sp, sp, #20
   12218:	pop	{pc}		; (ldr pc, [sp], #4)
   1221c:	movw	r1, #32224	; 0x7de0
   12220:	movt	r1, #1
   12224:	mov	r2, #5
   12228:	mov	r0, #0
   1222c:	bl	10e40 <dcgettext@plt>
   12230:	mov	r4, r0
   12234:	mov	r0, r5
   12238:	bl	15a4c <__assert_fail@plt+0x4a08>
   1223c:	mov	r3, r0
   12240:	mov	r2, r4
   12244:	mov	r1, #0
   12248:	mov	r0, #1
   1224c:	bl	10eac <error@plt>
   12250:	movw	r1, #32196	; 0x7dc4
   12254:	movt	r1, #1
   12258:	b	12224 <__assert_fail@plt+0x11e0>
   1225c:	strd	r4, [sp, #-16]!
   12260:	ldr	ip, [sp, #16]
   12264:	str	r6, [sp, #8]
   12268:	str	lr, [sp, #12]
   1226c:	ldr	lr, [sp, #20]
   12270:	cmp	ip, r0
   12274:	bcs	122fc <__assert_fail@plt+0x12b8>
   12278:	ldr	r1, [r1]
   1227c:	cmp	lr, r2
   12280:	add	r2, r1, ip, lsl #3
   12284:	ldr	r0, [r1, ip, lsl #3]
   12288:	ldr	r5, [r2, #4]
   1228c:	bcs	12338 <__assert_fail@plt+0x12f4>
   12290:	cmp	r5, #0
   12294:	ldr	r3, [r3]
   12298:	add	r2, r3, lr, lsl #3
   1229c:	ldr	r1, [r3, lr, lsl #3]
   122a0:	ldr	r4, [r2, #4]
   122a4:	beq	1235c <__assert_fail@plt+0x1318>
   122a8:	cmp	r4, #0
   122ac:	beq	123a0 <__assert_fail@plt+0x135c>
   122b0:	movw	r3, #41352	; 0xa188
   122b4:	movt	r3, #2
   122b8:	ldrb	ip, [r3, #8]
   122bc:	cmp	ip, #0
   122c0:	beq	12318 <__assert_fail@plt+0x12d4>
   122c4:	cmp	r5, r4
   122c8:	movcc	r2, r5
   122cc:	movcs	r2, r4
   122d0:	bl	136f0 <__assert_fail@plt+0x26ac>
   122d4:	cmp	r0, #0
   122d8:	bne	12308 <__assert_fail@plt+0x12c4>
   122dc:	cmp	r5, r4
   122e0:	bcc	12398 <__assert_fail@plt+0x1354>
   122e4:	ldrd	r4, [sp]
   122e8:	movne	r0, #1
   122ec:	moveq	r0, #0
   122f0:	ldr	r6, [sp, #8]
   122f4:	add	sp, sp, #12
   122f8:	pop	{pc}		; (ldr pc, [sp], #4)
   122fc:	cmp	lr, r2
   12300:	bcc	12350 <__assert_fail@plt+0x130c>
   12304:	mov	r0, #0
   12308:	ldrd	r4, [sp]
   1230c:	ldr	r6, [sp, #8]
   12310:	add	sp, sp, #12
   12314:	pop	{pc}		; (ldr pc, [sp], #4)
   12318:	ldrb	r3, [r3, #9]
   1231c:	cmp	r3, #0
   12320:	bne	12378 <__assert_fail@plt+0x1334>
   12324:	cmp	r5, r4
   12328:	movcc	r2, r5
   1232c:	movcs	r2, r4
   12330:	bl	10e28 <memcmp@plt>
   12334:	b	122d4 <__assert_fail@plt+0x1290>
   12338:	adds	r0, r5, #0
   1233c:	ldrd	r4, [sp]
   12340:	movne	r0, #1
   12344:	ldr	r6, [sp, #8]
   12348:	add	sp, sp, #12
   1234c:	pop	{pc}		; (ldr pc, [sp], #4)
   12350:	ldr	r3, [r3]
   12354:	add	lr, r3, lr, lsl #3
   12358:	ldr	r4, [lr, #4]
   1235c:	adds	r0, r4, #0
   12360:	movne	r0, #1
   12364:	ldrd	r4, [sp]
   12368:	rsb	r0, r0, #0
   1236c:	ldr	r6, [sp, #8]
   12370:	add	sp, sp, #12
   12374:	pop	{pc}		; (ldr pc, [sp], #4)
   12378:	mov	r3, r4
   1237c:	mov	r2, r1
   12380:	ldr	r6, [sp, #8]
   12384:	mov	r1, r5
   12388:	ldrd	r4, [sp]
   1238c:	ldr	lr, [sp, #12]
   12390:	add	sp, sp, #16
   12394:	b	16674 <__assert_fail@plt+0x5630>
   12398:	mvn	r0, #0
   1239c:	b	12308 <__assert_fail@plt+0x12c4>
   123a0:	mov	r0, #1
   123a4:	b	12308 <__assert_fail@plt+0x12c4>
   123a8:	cmp	r0, r1
   123ac:	bcs	123dc <__assert_fail@plt+0x1398>
   123b0:	ldr	r3, [r2]
   123b4:	add	r2, r3, r0, lsl #3
   123b8:	ldr	r2, [r2, #4]
   123bc:	cmp	r2, #0
   123c0:	beq	123dc <__assert_fail@plt+0x1398>
   123c4:	movw	ip, #41340	; 0xa17c
   123c8:	movt	ip, #2
   123cc:	ldr	r0, [r3, r0, lsl #3]
   123d0:	mov	r1, #1
   123d4:	ldr	r3, [ip]
   123d8:	b	10e1c <fwrite_unlocked@plt>
   123dc:	movw	r3, #41352	; 0xa188
   123e0:	movt	r3, #2
   123e4:	ldr	r0, [r3, #12]
   123e8:	cmp	r0, #0
   123ec:	beq	12400 <__assert_fail@plt+0x13bc>
   123f0:	movw	r3, #41340	; 0xa17c
   123f4:	movt	r3, #2
   123f8:	ldr	r1, [r3]
   123fc:	b	10db0 <fputs_unlocked@plt>
   12400:	bx	lr
   12404:	movw	r3, #41352	; 0xa188
   12408:	movt	r3, #2
   1240c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12410:	ldrb	r3, [r3, #16]
   12414:	strd	r6, [sp, #8]
   12418:	mov	r6, r0
   1241c:	strd	r8, [sp, #16]
   12420:	strd	sl, [sp, #24]
   12424:	str	lr, [sp, #32]
   12428:	sub	sp, sp, #12
   1242c:	cmp	r3, #0
   12430:	movw	r3, #41216	; 0xa100
   12434:	movt	r3, #2
   12438:	str	r1, [sp]
   1243c:	movne	r8, r2
   12440:	ldr	fp, [r3, #4]
   12444:	ldreq	r8, [r0, #12]
   12448:	ldr	r3, [sp]
   1244c:	cmp	fp, #0
   12450:	movlt	r7, #32
   12454:	uxtbge	r7, fp
   12458:	movlt	fp, r7
   1245c:	cmp	r8, r3
   12460:	movcc	r9, r8
   12464:	movcs	r9, r3
   12468:	cmp	r9, #0
   1246c:	beq	124c4 <__assert_fail@plt+0x1480>
   12470:	movw	r5, #41340	; 0xa17c
   12474:	movt	r5, #2
   12478:	uxtb	r3, fp
   1247c:	add	sl, r0, #20
   12480:	mov	r4, #0
   12484:	str	r3, [sp, #4]
   12488:	ldr	r0, [r5]
   1248c:	ldr	r3, [r0, #20]
   12490:	ldr	r2, [r0, #24]
   12494:	add	r1, r3, #1
   12498:	cmp	r3, r2
   1249c:	strcc	r1, [r0, #20]
   124a0:	strbcc	r7, [r3]
   124a4:	bcs	1253c <__assert_fail@plt+0x14f8>
   124a8:	mov	r0, r4
   124ac:	mov	r2, sl
   124b0:	ldr	r1, [r6, #12]
   124b4:	add	r4, r4, #1
   124b8:	bl	123a8 <__assert_fail@plt+0x1364>
   124bc:	cmp	r4, r9
   124c0:	bne	12488 <__assert_fail@plt+0x1444>
   124c4:	ldr	r3, [sp]
   124c8:	add	r4, r3, #1
   124cc:	cmp	r8, r4
   124d0:	movwhi	r5, #41340	; 0xa17c
   124d4:	uxtbhi	fp, fp
   124d8:	movthi	r5, #2
   124dc:	addhi	r9, r6, #20
   124e0:	bls	12520 <__assert_fail@plt+0x14dc>
   124e4:	ldr	r0, [r5]
   124e8:	ldr	r3, [r0, #20]
   124ec:	ldr	r2, [r0, #24]
   124f0:	add	r1, r3, #1
   124f4:	cmp	r3, r2
   124f8:	strcc	r1, [r0, #20]
   124fc:	strbcc	r7, [r3]
   12500:	bcs	12548 <__assert_fail@plt+0x1504>
   12504:	mov	r0, r4
   12508:	mov	r2, r9
   1250c:	ldr	r1, [r6, #12]
   12510:	add	r4, r4, #1
   12514:	bl	123a8 <__assert_fail@plt+0x1364>
   12518:	cmp	r8, r4
   1251c:	bne	124e4 <__assert_fail@plt+0x14a0>
   12520:	add	sp, sp, #12
   12524:	ldrd	r4, [sp]
   12528:	ldrd	r6, [sp, #8]
   1252c:	ldrd	r8, [sp, #16]
   12530:	ldrd	sl, [sp, #24]
   12534:	add	sp, sp, #32
   12538:	pop	{pc}		; (ldr pc, [sp], #4)
   1253c:	ldr	r1, [sp, #4]
   12540:	bl	10fcc <__overflow@plt>
   12544:	b	124a8 <__assert_fail@plt+0x1464>
   12548:	mov	r1, fp
   1254c:	bl	10fcc <__overflow@plt>
   12550:	b	12504 <__assert_fail@plt+0x14c0>
   12554:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12558:	movw	r5, #41352	; 0xa188
   1255c:	movt	r5, #2
   12560:	strd	r6, [sp, #8]
   12564:	movw	r6, #41216	; 0xa100
   12568:	movt	r6, #2
   1256c:	strd	r8, [sp, #16]
   12570:	mov	r4, r0
   12574:	mov	r9, r1
   12578:	strd	sl, [sp, #24]
   1257c:	ldr	sl, [r6, #4]
   12580:	str	lr, [sp, #32]
   12584:	sub	sp, sp, #4
   12588:	ldr	fp, [r5, #28]
   1258c:	cmp	sl, #0
   12590:	movlt	r8, #32
   12594:	uxtbge	r8, sl
   12598:	movlt	sl, r8
   1259c:	cmp	fp, #0
   125a0:	beq	12668 <__assert_fail@plt+0x1624>
   125a4:	movw	r7, #41340	; 0xa17c
   125a8:	movt	r7, #2
   125ac:	add	r5, r5, #32
   125b0:	b	12600 <__assert_fail@plt+0x15bc>
   125b4:	cmp	r4, r5
   125b8:	mov	r3, r4
   125bc:	ldreq	r0, [r6, #8]
   125c0:	moveq	r3, r9
   125c4:	ldrne	r0, [r6, #12]
   125c8:	add	r2, r3, #20
   125cc:	ldr	r1, [r3, #12]
   125d0:	bl	123a8 <__assert_fail@plt+0x1364>
   125d4:	ldr	fp, [fp, #8]
   125d8:	ldr	r0, [r7]
   125dc:	cmp	fp, #0
   125e0:	beq	12620 <__assert_fail@plt+0x15dc>
   125e4:	ldr	r3, [r0, #20]
   125e8:	ldr	r2, [r0, #24]
   125ec:	add	r1, r3, #1
   125f0:	cmp	r3, r2
   125f4:	strcc	r1, [r0, #20]
   125f8:	strbcc	r8, [r3]
   125fc:	bcs	1265c <__assert_fail@plt+0x1618>
   12600:	ldr	r3, [fp]
   12604:	cmp	r3, #0
   12608:	beq	125b4 <__assert_fail@plt+0x1570>
   1260c:	cmp	r3, #1
   12610:	ldr	r0, [fp, #4]
   12614:	moveq	r3, r4
   12618:	movne	r3, r9
   1261c:	b	125c8 <__assert_fail@plt+0x1584>
   12620:	ldr	r3, [r0, #20]
   12624:	ldr	r2, [r0, #24]
   12628:	ldrb	r1, [r6, #16]
   1262c:	cmp	r3, r2
   12630:	bcs	126cc <__assert_fail@plt+0x1688>
   12634:	add	r2, r3, #1
   12638:	str	r2, [r0, #20]
   1263c:	strb	r1, [r3]
   12640:	add	sp, sp, #4
   12644:	ldrd	r4, [sp]
   12648:	ldrd	r6, [sp, #8]
   1264c:	ldrd	r8, [sp, #16]
   12650:	ldrd	sl, [sp, #24]
   12654:	add	sp, sp, #32
   12658:	pop	{pc}		; (ldr pc, [sp], #4)
   1265c:	uxtb	r1, sl
   12660:	bl	10fcc <__overflow@plt>
   12664:	b	12600 <__assert_fail@plt+0x15bc>
   12668:	add	r3, r5, #32
   1266c:	cmp	r0, r3
   12670:	moveq	r3, r1
   12674:	movne	r3, r4
   12678:	ldreq	r0, [r6, #8]
   1267c:	add	r2, r3, #20
   12680:	ldrne	r0, [r6, #12]
   12684:	ldr	r1, [r3, #12]
   12688:	bl	123a8 <__assert_fail@plt+0x1364>
   1268c:	mov	r0, r4
   12690:	ldr	r1, [r6, #12]
   12694:	ldr	r2, [r5, #56]	; 0x38
   12698:	bl	12404 <__assert_fail@plt+0x13c0>
   1269c:	mov	r0, r9
   126a0:	ldr	r1, [r6, #8]
   126a4:	ldr	r2, [r5, #60]	; 0x3c
   126a8:	bl	12404 <__assert_fail@plt+0x13c0>
   126ac:	movw	r3, #41340	; 0xa17c
   126b0:	movt	r3, #2
   126b4:	ldrb	r1, [r6, #16]
   126b8:	ldr	r0, [r3]
   126bc:	ldr	r3, [r0, #20]
   126c0:	ldr	r2, [r0, #24]
   126c4:	cmp	r3, r2
   126c8:	bcc	12634 <__assert_fail@plt+0x15f0>
   126cc:	add	sp, sp, #4
   126d0:	ldrd	r4, [sp]
   126d4:	ldrd	r6, [sp, #8]
   126d8:	ldrd	r8, [sp, #16]
   126dc:	ldrd	sl, [sp, #24]
   126e0:	ldr	lr, [sp, #32]
   126e4:	add	sp, sp, #36	; 0x24
   126e8:	b	10fcc <__overflow@plt>
   126ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   126f0:	mov	r4, r1
   126f4:	ldr	r5, [r1]
   126f8:	strd	r6, [sp, #8]
   126fc:	movw	r6, #41352	; 0xa188
   12700:	movt	r6, #2
   12704:	strd	r8, [sp, #16]
   12708:	sub	r9, r2, #1
   1270c:	mov	r8, r0
   12710:	lsl	r3, r9, #2
   12714:	strd	sl, [sp, #24]
   12718:	mov	fp, r2
   1271c:	str	lr, [sp, #32]
   12720:	sub	sp, sp, #36	; 0x24
   12724:	add	r2, r6, r3
   12728:	ldr	r2, [r2, #64]	; 0x40
   1272c:	str	r3, [sp, #20]
   12730:	cmp	r2, r5
   12734:	beq	12964 <__assert_fail@plt+0x1920>
   12738:	cmp	r5, #0
   1273c:	beq	1297c <__assert_fail@plt+0x1938>
   12740:	mov	r2, #0
   12744:	str	r2, [r5, #12]
   12748:	movw	r7, #41216	; 0xa100
   1274c:	movt	r7, #2
   12750:	ldrb	r2, [r7, #16]
   12754:	mov	r1, r8
   12758:	mov	r0, r5
   1275c:	bl	135b4 <__assert_fail@plt+0x2570>
   12760:	subs	r3, r0, #0
   12764:	beq	12948 <__assert_fail@plt+0x1904>
   12768:	lsl	r3, r9, #3
   1276c:	mov	r2, r3
   12770:	add	r1, r6, r3
   12774:	ldmib	r5, {r3, r4}
   12778:	str	r2, [sp, #24]
   1277c:	ldr	r2, [r1, #72]	; 0x48
   12780:	ldr	r0, [r1, #76]	; 0x4c
   12784:	sub	r3, r3, #1
   12788:	add	r8, r4, r3
   1278c:	adds	r2, r2, #1
   12790:	adc	r0, r0, #0
   12794:	cmp	r4, r8
   12798:	str	r2, [r1, #72]	; 0x48
   1279c:	str	r0, [r1, #76]	; 0x4c
   127a0:	beq	12818 <__assert_fail@plt+0x17d4>
   127a4:	ldr	r1, [r7, #4]
   127a8:	mvn	r2, r1
   127ac:	cmp	r1, #10
   127b0:	lsr	r2, r2, #31
   127b4:	moveq	r2, #0
   127b8:	cmp	r2, #0
   127bc:	beq	12994 <__assert_fail@plt+0x1950>
   127c0:	str	r6, [sp, #28]
   127c4:	ldr	sl, [sp, #20]
   127c8:	b	127e4 <__assert_fail@plt+0x17a0>
   127cc:	mov	r1, r4
   127d0:	sub	r2, ip, r4
   127d4:	mov	r0, r5
   127d8:	add	r4, ip, #1
   127dc:	bl	11f44 <__assert_fail@plt+0xf00>
   127e0:	ldr	r1, [r7, #4]
   127e4:	sub	r6, r8, r4
   127e8:	mov	r0, r4
   127ec:	mov	r2, r6
   127f0:	bl	10f90 <memchr@plt>
   127f4:	subs	ip, r0, #0
   127f8:	bne	127cc <__assert_fail@plt+0x1788>
   127fc:	mov	r3, r6
   12800:	ldr	r6, [sp, #28]
   12804:	str	sl, [sp, #20]
   12808:	mov	r2, r3
   1280c:	mov	r1, r4
   12810:	mov	r0, r5
   12814:	bl	11f44 <__assert_fail@plt+0xf00>
   12818:	ldr	r3, [sp, #20]
   1281c:	add	r3, r6, r3
   12820:	ldr	r0, [r3, #64]	; 0x40
   12824:	cmp	r0, #0
   12828:	beq	1291c <__assert_fail@plt+0x18d8>
   1282c:	ldr	r3, [r6, #88]	; 0x58
   12830:	cmp	r3, #2
   12834:	beq	1291c <__assert_fail@plt+0x18d8>
   12838:	cmp	r3, #1
   1283c:	beq	1284c <__assert_fail@plt+0x1808>
   12840:	ldrb	r3, [r6, #92]	; 0x5c
   12844:	cmp	r3, #0
   12848:	beq	1291c <__assert_fail@plt+0x18d8>
   1284c:	add	r3, r6, r9
   12850:	ldrb	r3, [r3, #96]	; 0x60
   12854:	cmp	r3, #0
   12858:	bne	1291c <__assert_fail@plt+0x18d8>
   1285c:	cmp	fp, #1
   12860:	add	r1, r0, #20
   12864:	ldr	r2, [r5, #12]
   12868:	add	r3, r5, #20
   1286c:	ldreq	ip, [r7, #12]
   12870:	ldrne	ip, [r7, #8]
   12874:	ldr	r0, [r0, #12]
   12878:	str	ip, [sp]
   1287c:	str	ip, [sp, #4]
   12880:	bl	1225c <__assert_fail@plt+0x1218>
   12884:	cmp	r0, #0
   12888:	ble	1291c <__assert_fail@plt+0x18d8>
   1288c:	ldr	r4, [r5, #4]
   12890:	cmp	r4, #0
   12894:	beq	128b4 <__assert_fail@plt+0x1870>
   12898:	ldr	r2, [r5, #8]
   1289c:	sub	r3, r4, #1
   128a0:	ldrb	r2, [r2, r3]
   128a4:	cmp	r2, #10
   128a8:	moveq	r4, r3
   128ac:	cmp	r4, #0
   128b0:	mvnlt	r4, #-2147483648	; 0x80000000
   128b4:	mov	r2, #5
   128b8:	movw	r1, #32276	; 0x7e14
   128bc:	movt	r1, #1
   128c0:	mov	r0, #0
   128c4:	ldr	r7, [r6, #88]	; 0x58
   128c8:	bl	10e40 <dcgettext@plt>
   128cc:	ldr	r3, [sp, #24]
   128d0:	mov	r2, r0
   128d4:	add	r9, r6, r9
   128d8:	ldr	ip, [r5, #8]
   128dc:	str	r4, [sp, #8]
   128e0:	sub	r7, r7, #1
   128e4:	clz	r7, r7
   128e8:	add	r1, r6, r3
   128ec:	ldr	r3, [sp, #20]
   128f0:	lsr	r7, r7, #5
   128f4:	ldrd	sl, [r1, #72]	; 0x48
   128f8:	mov	r0, r7
   128fc:	mov	r1, #0
   12900:	add	r3, r6, r3
   12904:	strd	sl, [sp]
   12908:	ldr	r3, [r3, #100]	; 0x64
   1290c:	str	ip, [sp, #12]
   12910:	bl	10eac <error@plt>
   12914:	mov	r3, #1
   12918:	strb	r3, [r9, #96]	; 0x60
   1291c:	ldr	r3, [sp, #20]
   12920:	mov	r0, #1
   12924:	add	r6, r6, r3
   12928:	str	r5, [r6, #64]	; 0x40
   1292c:	add	sp, sp, #36	; 0x24
   12930:	ldrd	r4, [sp]
   12934:	ldrd	r6, [sp, #8]
   12938:	ldrd	r8, [sp, #16]
   1293c:	ldrd	sl, [sp, #24]
   12940:	add	sp, sp, #32
   12944:	pop	{pc}		; (ldr pc, [sp], #4)
   12948:	ldr	r0, [r8]
   1294c:	ands	r4, r0, #32
   12950:	bne	12af4 <__assert_fail@plt+0x1ab0>
   12954:	mov	r0, r5
   12958:	bl	11fac <__assert_fail@plt+0xf68>
   1295c:	mov	r0, r4
   12960:	b	1292c <__assert_fail@plt+0x18e8>
   12964:	ldr	r2, [r6, r9, lsl #2]
   12968:	str	r5, [r6, r9, lsl #2]
   1296c:	mov	r5, r2
   12970:	str	r2, [r1]
   12974:	cmp	r5, #0
   12978:	bne	12740 <__assert_fail@plt+0x16fc>
   1297c:	mov	r1, #24
   12980:	mov	r0, #1
   12984:	bl	163f0 <__assert_fail@plt+0x53ac>
   12988:	mov	r5, r0
   1298c:	str	r0, [r4]
   12990:	b	12748 <__assert_fail@plt+0x1704>
   12994:	cmp	r1, #0
   12998:	bge	12808 <__assert_fail@plt+0x17c4>
   1299c:	bl	10f0c <__ctype_b_loc@plt>
   129a0:	mov	r3, r0
   129a4:	ldr	r0, [r0]
   129a8:	str	r3, [sp, #28]
   129ac:	ldr	sl, [sp, #20]
   129b0:	b	129c0 <__assert_fail@plt+0x197c>
   129b4:	cmp	r8, r3
   129b8:	mov	r4, r3
   129bc:	beq	12abc <__assert_fail@plt+0x1a78>
   129c0:	mov	r3, r4
   129c4:	ldrb	r1, [r3], #1
   129c8:	lsl	r2, r1, #1
   129cc:	ldrh	r2, [r0, r2]
   129d0:	cmp	r1, #10
   129d4:	orreq	r2, r2, #1
   129d8:	tst	r2, #1
   129dc:	bne	129b4 <__assert_fail@plt+0x1970>
   129e0:	str	r6, [sp, #20]
   129e4:	mov	r6, r8
   129e8:	mov	r8, r3
   129ec:	cmp	r6, r8
   129f0:	beq	12ad4 <__assert_fail@plt+0x1a90>
   129f4:	ldrb	r1, [r4, #1]
   129f8:	lsl	r2, r1, #1
   129fc:	ldrh	r2, [r0, r2]
   12a00:	cmp	r1, #10
   12a04:	orreq	r2, r2, #1
   12a08:	tst	r2, #1
   12a0c:	movne	r2, #1
   12a10:	beq	12a84 <__assert_fail@plt+0x1a40>
   12a14:	mov	r1, r4
   12a18:	mov	r0, r5
   12a1c:	add	r4, r8, #1
   12a20:	bl	11f44 <__assert_fail@plt+0xf00>
   12a24:	cmp	r6, r4
   12a28:	beq	12ac4 <__assert_fail@plt+0x1a80>
   12a2c:	ldr	r3, [sp, #28]
   12a30:	ldrb	r1, [r8, #1]
   12a34:	ldr	r0, [r3]
   12a38:	lsl	r2, r1, #1
   12a3c:	ldrh	r2, [r0, r2]
   12a40:	cmp	r1, #10
   12a44:	orreq	r2, r2, #1
   12a48:	tst	r2, #1
   12a4c:	addne	r8, r8, #2
   12a50:	beq	12a7c <__assert_fail@plt+0x1a38>
   12a54:	cmp	r6, r8
   12a58:	mov	r4, r8
   12a5c:	beq	12ac4 <__assert_fail@plt+0x1a80>
   12a60:	ldrb	r2, [r8], #1
   12a64:	lsl	r3, r2, #1
   12a68:	ldrh	r3, [r0, r3]
   12a6c:	cmp	r2, #10
   12a70:	orreq	r3, r3, #1
   12a74:	tst	r3, #1
   12a78:	bne	12a54 <__assert_fail@plt+0x1a10>
   12a7c:	add	r8, r4, #1
   12a80:	b	129ec <__assert_fail@plt+0x19a8>
   12a84:	add	r2, r4, #2
   12a88:	cmp	r6, r2
   12a8c:	mov	r8, r2
   12a90:	beq	12ae4 <__assert_fail@plt+0x1aa0>
   12a94:	ldrb	r1, [r2]
   12a98:	add	r2, r8, #1
   12a9c:	lsl	r3, r1, #1
   12aa0:	ldrh	r3, [r0, r3]
   12aa4:	cmp	r1, #10
   12aa8:	orreq	r3, r3, #1
   12aac:	tst	r3, #1
   12ab0:	beq	12a88 <__assert_fail@plt+0x1a44>
   12ab4:	sub	r2, r8, r4
   12ab8:	b	12a14 <__assert_fail@plt+0x19d0>
   12abc:	str	sl, [sp, #20]
   12ac0:	b	12818 <__assert_fail@plt+0x17d4>
   12ac4:	mov	r3, #0
   12ac8:	ldr	r6, [sp, #20]
   12acc:	str	sl, [sp, #20]
   12ad0:	b	12808 <__assert_fail@plt+0x17c4>
   12ad4:	mov	r2, #1
   12ad8:	ldr	r6, [sp, #20]
   12adc:	str	sl, [sp, #20]
   12ae0:	b	1280c <__assert_fail@plt+0x17c8>
   12ae4:	sub	r2, r6, r4
   12ae8:	ldr	r6, [sp, #20]
   12aec:	str	sl, [sp, #20]
   12af0:	b	1280c <__assert_fail@plt+0x17c8>
   12af4:	str	r3, [sp, #20]
   12af8:	bl	10f48 <__errno_location@plt>
   12afc:	ldr	r3, [sp, #20]
   12b00:	mov	r2, #5
   12b04:	movw	r1, #32264	; 0x7e08
   12b08:	movt	r1, #1
   12b0c:	ldr	r4, [r0]
   12b10:	mov	r0, r3
   12b14:	bl	10e40 <dcgettext@plt>
   12b18:	mov	r2, r0
   12b1c:	mov	r1, r4
   12b20:	mov	r0, #1
   12b24:	bl	10eac <error@plt>
   12b28:	strd	r4, [sp, #-16]!
   12b2c:	mov	r5, r0
   12b30:	mov	r4, r1
   12b34:	ldr	r3, [r1]
   12b38:	ldr	r0, [r1, #8]
   12b3c:	str	r6, [sp, #8]
   12b40:	mov	r6, r2
   12b44:	ldr	r2, [r1, #4]
   12b48:	str	lr, [sp, #12]
   12b4c:	cmp	r3, r2
   12b50:	lslne	r3, r3, #2
   12b54:	beq	12b8c <__assert_fail@plt+0x1b48>
   12b58:	add	r1, r0, r3
   12b5c:	mov	r2, r6
   12b60:	mov	r0, r5
   12b64:	bl	126ec <__assert_fail@plt+0x16a8>
   12b68:	cmp	r0, #0
   12b6c:	beq	12b7c <__assert_fail@plt+0x1b38>
   12b70:	ldr	r3, [r4]
   12b74:	add	r3, r3, #1
   12b78:	str	r3, [r4]
   12b7c:	ldrd	r4, [sp]
   12b80:	ldr	r6, [sp, #8]
   12b84:	add	sp, sp, #12
   12b88:	pop	{pc}		; (ldr pc, [sp], #4)
   12b8c:	mov	r2, #4
   12b90:	add	r1, r1, r2
   12b94:	bl	16250 <__assert_fail@plt+0x520c>
   12b98:	ldr	r3, [r4]
   12b9c:	str	r0, [r4, #8]
   12ba0:	ldr	r1, [r4, #4]
   12ba4:	cmp	r3, r1
   12ba8:	lsl	r3, r3, #2
   12bac:	movcc	ip, #0
   12bb0:	addcc	r1, r0, r1, lsl #2
   12bb4:	addcc	r2, r0, r3
   12bb8:	bcs	12b58 <__assert_fail@plt+0x1b14>
   12bbc:	str	ip, [r2], #4
   12bc0:	cmp	r2, r1
   12bc4:	beq	12b58 <__assert_fail@plt+0x1b14>
   12bc8:	str	ip, [r2], #4
   12bcc:	cmp	r2, r1
   12bd0:	bne	12bbc <__assert_fail@plt+0x1b78>
   12bd4:	b	12b58 <__assert_fail@plt+0x1b14>
   12bd8:	subs	r6, r0, #0
   12bdc:	str	r7, [sp, #-8]!
   12be0:	str	lr, [sp, #4]
   12be4:	sub	sp, sp, #56	; 0x38
   12be8:	beq	12c30 <__assert_fail@plt+0x1bec>
   12bec:	movw	r3, #41328	; 0xa170
   12bf0:	movt	r3, #2
   12bf4:	ldr	r4, [r3]
   12bf8:	mov	r2, #5
   12bfc:	movw	r1, #32316	; 0x7e3c
   12c00:	movt	r1, #1
   12c04:	mov	r0, #0
   12c08:	bl	10e40 <dcgettext@plt>
   12c0c:	movw	r3, #41472	; 0xa200
   12c10:	movt	r3, #2
   12c14:	mov	r2, r0
   12c18:	mov	r1, #1
   12c1c:	ldr	r3, [r3]
   12c20:	mov	r0, r4
   12c24:	bl	10f84 <__fprintf_chk@plt>
   12c28:	mov	r0, r6
   12c2c:	bl	10f18 <exit@plt>
   12c30:	mov	r2, #5
   12c34:	movw	r1, #32356	; 0x7e64
   12c38:	movt	r1, #1
   12c3c:	movw	r7, #41340	; 0xa17c
   12c40:	movt	r7, #2
   12c44:	bl	10e40 <dcgettext@plt>
   12c48:	movw	r3, #41472	; 0xa200
   12c4c:	movt	r3, #2
   12c50:	mov	r1, r0
   12c54:	mov	r0, #1
   12c58:	ldr	r2, [r3]
   12c5c:	bl	10f6c <__printf_chk@plt>
   12c60:	mov	r2, #5
   12c64:	movw	r1, #32392	; 0x7e88
   12c68:	movt	r1, #1
   12c6c:	mov	r0, r6
   12c70:	bl	10e40 <dcgettext@plt>
   12c74:	ldr	r1, [r7]
   12c78:	bl	10db0 <fputs_unlocked@plt>
   12c7c:	mov	r2, #5
   12c80:	movw	r1, #32544	; 0x7f20
   12c84:	movt	r1, #1
   12c88:	mov	r0, r6
   12c8c:	bl	10e40 <dcgettext@plt>
   12c90:	ldr	r1, [r7]
   12c94:	bl	10db0 <fputs_unlocked@plt>
   12c98:	mov	r2, #5
   12c9c:	movw	r1, #32604	; 0x7f5c
   12ca0:	movt	r1, #1
   12ca4:	mov	r0, r6
   12ca8:	bl	10e40 <dcgettext@plt>
   12cac:	ldr	r1, [r7]
   12cb0:	bl	10db0 <fputs_unlocked@plt>
   12cb4:	mov	r2, #5
   12cb8:	movw	r1, #32828	; 0x803c
   12cbc:	movt	r1, #1
   12cc0:	mov	r0, r6
   12cc4:	bl	10e40 <dcgettext@plt>
   12cc8:	ldr	r1, [r7]
   12ccc:	bl	10db0 <fputs_unlocked@plt>
   12cd0:	mov	r2, #5
   12cd4:	movw	r1, #33100	; 0x814c
   12cd8:	movt	r1, #1
   12cdc:	mov	r0, r6
   12ce0:	bl	10e40 <dcgettext@plt>
   12ce4:	ldr	r1, [r7]
   12ce8:	bl	10db0 <fputs_unlocked@plt>
   12cec:	mov	r2, #5
   12cf0:	movw	r1, #33632	; 0x8360
   12cf4:	movt	r1, #1
   12cf8:	mov	r0, r6
   12cfc:	bl	10e40 <dcgettext@plt>
   12d00:	ldr	r1, [r7]
   12d04:	bl	10db0 <fputs_unlocked@plt>
   12d08:	mov	r2, #5
   12d0c:	movw	r1, #33696	; 0x83a0
   12d10:	movt	r1, #1
   12d14:	mov	r0, r6
   12d18:	bl	10e40 <dcgettext@plt>
   12d1c:	ldr	r1, [r7]
   12d20:	bl	10db0 <fputs_unlocked@plt>
   12d24:	mov	r2, #5
   12d28:	movw	r1, #33744	; 0x83d0
   12d2c:	movt	r1, #1
   12d30:	mov	r0, r6
   12d34:	bl	10e40 <dcgettext@plt>
   12d38:	ldr	r1, [r7]
   12d3c:	bl	10db0 <fputs_unlocked@plt>
   12d40:	mov	r2, #5
   12d44:	movw	r1, #33800	; 0x8408
   12d48:	movt	r1, #1
   12d4c:	mov	r0, r6
   12d50:	bl	10e40 <dcgettext@plt>
   12d54:	ldr	r1, [r7]
   12d58:	bl	10db0 <fputs_unlocked@plt>
   12d5c:	movw	lr, #31944	; 0x7cc8
   12d60:	movt	lr, #1
   12d64:	ldr	ip, [lr]
   12d68:	ldr	r4, [lr, #4]
   12d6c:	ldrd	r8, [lr, #8]
   12d70:	subs	r1, ip, #0
   12d74:	str	ip, [sp]
   12d78:	ldrd	r2, [lr, #16]
   12d7c:	str	r4, [sp, #4]
   12d80:	ldrd	r4, [lr, #24]
   12d84:	strd	r8, [sp, #8]
   12d88:	ldrd	r8, [lr, #32]
   12d8c:	strd	r2, [sp, #16]
   12d90:	ldrd	r2, [lr, #40]	; 0x28
   12d94:	strd	r4, [sp, #24]
   12d98:	ldrd	r4, [lr, #48]	; 0x30
   12d9c:	strd	r8, [sp, #32]
   12da0:	strd	r2, [sp, #40]	; 0x28
   12da4:	strd	r4, [sp, #48]	; 0x30
   12da8:	movwne	r5, #32308	; 0x7e34
   12dac:	mov	r4, sp
   12db0:	movtne	r5, #1
   12db4:	bne	12eac <__assert_fail@plt+0x1e68>
   12db8:	ldr	r4, [r4, #4]
   12dbc:	movw	r1, #34620	; 0x873c
   12dc0:	movt	r1, #1
   12dc4:	mov	r2, #5
   12dc8:	cmp	r4, #0
   12dcc:	beq	12ec0 <__assert_fail@plt+0x1e7c>
   12dd0:	mov	r0, #0
   12dd4:	bl	10e40 <dcgettext@plt>
   12dd8:	mov	r1, r0
   12ddc:	movw	r3, #34644	; 0x8754
   12de0:	movt	r3, #1
   12de4:	movw	r2, #34684	; 0x877c
   12de8:	movt	r2, #1
   12dec:	mov	r0, #1
   12df0:	bl	10f6c <__printf_chk@plt>
   12df4:	mov	r1, #0
   12df8:	mov	r0, #5
   12dfc:	bl	10fd8 <setlocale@plt>
   12e00:	cmp	r0, #0
   12e04:	movweq	r5, #32308	; 0x7e34
   12e08:	movteq	r5, #1
   12e0c:	beq	12e30 <__assert_fail@plt+0x1dec>
   12e10:	movw	r1, #34700	; 0x878c
   12e14:	movt	r1, #1
   12e18:	mov	r2, #3
   12e1c:	movw	r5, #32308	; 0x7e34
   12e20:	movt	r5, #1
   12e24:	bl	11020 <strncmp@plt>
   12e28:	cmp	r0, #0
   12e2c:	bne	12f78 <__assert_fail@plt+0x1f34>
   12e30:	mov	r2, #5
   12e34:	movw	r1, #34776	; 0x87d8
   12e38:	movt	r1, #1
   12e3c:	mov	r0, #0
   12e40:	bl	10e40 <dcgettext@plt>
   12e44:	mov	r1, r0
   12e48:	movw	r3, #32308	; 0x7e34
   12e4c:	movt	r3, #1
   12e50:	movw	r2, #34644	; 0x8754
   12e54:	movt	r2, #1
   12e58:	mov	r0, #1
   12e5c:	bl	10f6c <__printf_chk@plt>
   12e60:	mov	r2, #5
   12e64:	movw	r1, #34804	; 0x87f4
   12e68:	movt	r1, #1
   12e6c:	mov	r0, #0
   12e70:	bl	10e40 <dcgettext@plt>
   12e74:	movw	r2, #35160	; 0x8958
   12e78:	movt	r2, #1
   12e7c:	cmp	r4, r5
   12e80:	movw	r3, #33692	; 0x839c
   12e84:	movt	r3, #1
   12e88:	mov	r1, r0
   12e8c:	moveq	r3, r2
   12e90:	mov	r2, r4
   12e94:	mov	r0, #1
   12e98:	bl	10f6c <__printf_chk@plt>
   12e9c:	b	12c28 <__assert_fail@plt+0x1be4>
   12ea0:	ldr	r1, [r4, #8]!
   12ea4:	cmp	r1, #0
   12ea8:	beq	12db8 <__assert_fail@plt+0x1d74>
   12eac:	mov	r0, r5
   12eb0:	bl	10dbc <strcmp@plt>
   12eb4:	cmp	r0, #0
   12eb8:	bne	12ea0 <__assert_fail@plt+0x1e5c>
   12ebc:	b	12db8 <__assert_fail@plt+0x1d74>
   12ec0:	mov	r0, r4
   12ec4:	bl	10e40 <dcgettext@plt>
   12ec8:	mov	r1, r0
   12ecc:	movw	r3, #34644	; 0x8754
   12ed0:	movt	r3, #1
   12ed4:	movw	r2, #34684	; 0x877c
   12ed8:	movt	r2, #1
   12edc:	mov	r0, #1
   12ee0:	bl	10f6c <__printf_chk@plt>
   12ee4:	mov	r1, r4
   12ee8:	mov	r0, #5
   12eec:	bl	10fd8 <setlocale@plt>
   12ef0:	cmp	r0, #0
   12ef4:	beq	12f10 <__assert_fail@plt+0x1ecc>
   12ef8:	movw	r1, #34700	; 0x878c
   12efc:	movt	r1, #1
   12f00:	mov	r2, #3
   12f04:	bl	11020 <strncmp@plt>
   12f08:	cmp	r0, #0
   12f0c:	bne	12f6c <__assert_fail@plt+0x1f28>
   12f10:	mov	r2, #5
   12f14:	movw	r1, #34776	; 0x87d8
   12f18:	movt	r1, #1
   12f1c:	mov	r0, #0
   12f20:	bl	10e40 <dcgettext@plt>
   12f24:	mov	r1, r0
   12f28:	movw	r3, #32308	; 0x7e34
   12f2c:	movt	r3, #1
   12f30:	movw	r2, #34644	; 0x8754
   12f34:	movt	r2, #1
   12f38:	mov	r0, #1
   12f3c:	bl	10f6c <__printf_chk@plt>
   12f40:	movw	r1, #34804	; 0x87f4
   12f44:	movt	r1, #1
   12f48:	mov	r2, #5
   12f4c:	mov	r0, #0
   12f50:	bl	10e40 <dcgettext@plt>
   12f54:	movw	r4, #32308	; 0x7e34
   12f58:	movt	r4, #1
   12f5c:	movw	r3, #35160	; 0x8958
   12f60:	movt	r3, #1
   12f64:	mov	r1, r0
   12f68:	b	12e90 <__assert_fail@plt+0x1e4c>
   12f6c:	movw	r5, #32308	; 0x7e34
   12f70:	movt	r5, #1
   12f74:	mov	r4, r5
   12f78:	mov	r2, #5
   12f7c:	movw	r1, #34704	; 0x8790
   12f80:	movt	r1, #1
   12f84:	mov	r0, #0
   12f88:	bl	10e40 <dcgettext@plt>
   12f8c:	ldr	r1, [r7]
   12f90:	bl	10db0 <fputs_unlocked@plt>
   12f94:	b	12e30 <__assert_fail@plt+0x1dec>
   12f98:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12f9c:	ldr	r5, [r3]
   12fa0:	strd	r6, [sp, #8]
   12fa4:	mov	r7, r3
   12fa8:	mov	r6, r1
   12fac:	strd	r8, [sp, #16]
   12fb0:	mov	r9, r0
   12fb4:	str	sl, [sp, #24]
   12fb8:	str	lr, [sp, #28]
   12fbc:	cmp	r5, #2
   12fc0:	ldr	r8, [sp, #32]
   12fc4:	beq	13014 <__assert_fail@plt+0x1fd0>
   12fc8:	lsl	r3, r5, #2
   12fcc:	movw	r4, #41352	; 0xa188
   12fd0:	movt	r4, #2
   12fd4:	add	r5, r5, #1
   12fd8:	ldr	r2, [r8]
   12fdc:	add	r4, r4, r3
   12fe0:	ldr	sl, [sp, #24]
   12fe4:	str	r2, [r6, r3]
   12fe8:	str	r9, [r4, #100]	; 0x64
   12fec:	str	r5, [r7]
   12ff0:	ldr	r3, [r8]
   12ff4:	ldrd	r4, [sp]
   12ff8:	ldrd	r6, [sp, #8]
   12ffc:	cmp	r3, #3
   13000:	ldreq	r2, [sp, #36]	; 0x24
   13004:	ldrd	r8, [sp, #16]
   13008:	add	sp, sp, #28
   1300c:	streq	r3, [r2]
   13010:	pop	{pc}		; (ldr pc, [sp], #4)
   13014:	ldr	sl, [r1]
   13018:	movw	r4, #41352	; 0xa188
   1301c:	movt	r4, #2
   13020:	clz	r3, sl
   13024:	lsr	r3, r3, #5
   13028:	ldr	r1, [r1, r3, lsl #2]
   1302c:	add	r3, r4, r3, lsl #2
   13030:	ldr	r0, [r3, #100]	; 0x64
   13034:	cmp	r1, #3
   13038:	ldrls	pc, [pc, r1, lsl #2]
   1303c:	b	13054 <__assert_fail@plt+0x2010>
   13040:	strheq	r3, [r1], -r0
   13044:	muleq	r1, r0, r0
   13048:	andeq	r3, r1, r0, ror r0
   1304c:	andeq	r3, r1, r0, asr r0
   13050:	bl	12158 <__assert_fail@plt+0x1114>
   13054:	cmp	sl, #0
   13058:	mov	r3, #4
   1305c:	ldrne	r2, [r4, #104]	; 0x68
   13060:	ldrne	r1, [r6, #4]
   13064:	strne	r1, [r6]
   13068:	strne	r2, [r4, #100]	; 0x64
   1306c:	b	12fd8 <__assert_fail@plt+0x1f94>
   13070:	ldr	r3, [r2, #4]
   13074:	sub	r3, r3, #1
   13078:	str	r3, [r2, #4]
   1307c:	bl	120b0 <__assert_fail@plt+0x106c>
   13080:	mov	r1, r0
   13084:	ldr	r0, [pc, #100]	; 130f0 <__assert_fail@plt+0x20ac>
   13088:	bl	11ee0 <__assert_fail@plt+0xe9c>
   1308c:	b	13054 <__assert_fail@plt+0x2010>
   13090:	ldr	r3, [r2]
   13094:	sub	r3, r3, #1
   13098:	str	r3, [r2]
   1309c:	bl	120b0 <__assert_fail@plt+0x106c>
   130a0:	mov	r1, r0
   130a4:	ldr	r0, [pc, #72]	; 130f4 <__assert_fail@plt+0x20b0>
   130a8:	bl	11ee0 <__assert_fail@plt+0xe9c>
   130ac:	b	13054 <__assert_fail@plt+0x2010>
   130b0:	mov	r2, #5
   130b4:	movw	r1, #34856	; 0x8828
   130b8:	movt	r1, #1
   130bc:	mov	r0, #0
   130c0:	bl	10e40 <dcgettext@plt>
   130c4:	mov	r4, r0
   130c8:	mov	r1, r9
   130cc:	mov	r0, #4
   130d0:	bl	15798 <__assert_fail@plt+0x4754>
   130d4:	mov	r1, #0
   130d8:	mov	r3, r0
   130dc:	mov	r2, r4
   130e0:	mov	r0, r1
   130e4:	bl	10eac <error@plt>
   130e8:	mov	r0, #1
   130ec:	bl	12bd8 <__assert_fail@plt+0x1b94>
   130f0:	andeq	sl, r2, r8, lsl #2
   130f4:	andeq	sl, r2, ip, lsl #2
   130f8:	movw	r3, #41464	; 0xa1f8
   130fc:	movt	r3, #2
   13100:	str	r0, [r3]
   13104:	bx	lr
   13108:	movw	r3, #41464	; 0xa1f8
   1310c:	movt	r3, #2
   13110:	strb	r0, [r3, #4]
   13114:	bx	lr
   13118:	movw	r3, #41340	; 0xa17c
   1311c:	movt	r3, #2
   13120:	strd	r4, [sp, #-16]!
   13124:	ldr	r0, [r3]
   13128:	str	r6, [sp, #8]
   1312c:	str	lr, [sp, #12]
   13130:	sub	sp, sp, #8
   13134:	bl	17708 <__assert_fail@plt+0x66c4>
   13138:	cmp	r0, #0
   1313c:	beq	13168 <__assert_fail@plt+0x2124>
   13140:	movw	r4, #41464	; 0xa1f8
   13144:	movt	r4, #2
   13148:	ldrb	r6, [r4, #4]
   1314c:	bl	10f48 <__errno_location@plt>
   13150:	mov	r5, r0
   13154:	cmp	r6, #0
   13158:	beq	13194 <__assert_fail@plt+0x2150>
   1315c:	ldr	r3, [r0]
   13160:	cmp	r3, #32
   13164:	bne	13194 <__assert_fail@plt+0x2150>
   13168:	movw	r3, #41328	; 0xa170
   1316c:	movt	r3, #2
   13170:	ldr	r0, [r3]
   13174:	bl	17708 <__assert_fail@plt+0x66c4>
   13178:	cmp	r0, #0
   1317c:	bne	131dc <__assert_fail@plt+0x2198>
   13180:	add	sp, sp, #8
   13184:	ldrd	r4, [sp]
   13188:	ldr	r6, [sp, #8]
   1318c:	add	sp, sp, #12
   13190:	pop	{pc}		; (ldr pc, [sp], #4)
   13194:	movw	r1, #35356	; 0x8a1c
   13198:	movt	r1, #1
   1319c:	mov	r2, #5
   131a0:	mov	r0, #0
   131a4:	bl	10e40 <dcgettext@plt>
   131a8:	mov	r6, r0
   131ac:	ldr	r0, [r4]
   131b0:	cmp	r0, #0
   131b4:	beq	131ec <__assert_fail@plt+0x21a8>
   131b8:	ldr	r4, [r5]
   131bc:	bl	15860 <__assert_fail@plt+0x481c>
   131c0:	mov	r3, r0
   131c4:	movw	r2, #35368	; 0x8a28
   131c8:	movt	r2, #1
   131cc:	mov	r0, #0
   131d0:	str	r6, [sp]
   131d4:	mov	r1, r4
   131d8:	bl	10eac <error@plt>
   131dc:	movw	r3, #41240	; 0xa118
   131e0:	movt	r3, #2
   131e4:	ldr	r0, [r3]
   131e8:	bl	10dec <_exit@plt>
   131ec:	mov	r3, r6
   131f0:	movw	r2, #35372	; 0x8a2c
   131f4:	movt	r2, #1
   131f8:	ldr	r1, [r5]
   131fc:	bl	10eac <error@plt>
   13200:	b	131dc <__assert_fail@plt+0x2198>
   13204:	b	10dc8 <posix_fadvise64@plt>
   13208:	cmp	r0, #0
   1320c:	bxeq	lr
   13210:	str	r4, [sp, #-16]!
   13214:	mov	r4, r1
   13218:	strd	r6, [sp, #4]
   1321c:	mov	r6, #0
   13220:	mov	r7, #0
   13224:	str	lr, [sp, #12]
   13228:	sub	sp, sp, #16
   1322c:	bl	10f78 <fileno@plt>
   13230:	mov	r2, r6
   13234:	mov	r3, r7
   13238:	strd	r6, [sp]
   1323c:	str	r4, [sp, #8]
   13240:	bl	10dc8 <posix_fadvise64@plt>
   13244:	add	sp, sp, #16
   13248:	ldr	r4, [sp]
   1324c:	ldrd	r6, [sp, #4]
   13250:	add	sp, sp, #12
   13254:	pop	{pc}		; (ldr pc, [sp], #4)
   13258:	strd	r4, [sp, #-12]!
   1325c:	mov	r4, r0
   13260:	str	lr, [sp, #8]
   13264:	sub	sp, sp, #12
   13268:	bl	10f78 <fileno@plt>
   1326c:	cmp	r0, #0
   13270:	mov	r0, r4
   13274:	blt	132f8 <__assert_fail@plt+0x22b4>
   13278:	bl	10edc <__freading@plt>
   1327c:	cmp	r0, #0
   13280:	bne	132c4 <__assert_fail@plt+0x2280>
   13284:	mov	r0, r4
   13288:	bl	1330c <__assert_fail@plt+0x22c8>
   1328c:	cmp	r0, #0
   13290:	beq	132f4 <__assert_fail@plt+0x22b0>
   13294:	bl	10f48 <__errno_location@plt>
   13298:	mov	r5, r0
   1329c:	mov	r0, r4
   132a0:	ldr	r4, [r5]
   132a4:	bl	10f9c <fclose@plt>
   132a8:	cmp	r4, #0
   132ac:	mvnne	r0, #0
   132b0:	strne	r4, [r5]
   132b4:	add	sp, sp, #12
   132b8:	ldrd	r4, [sp]
   132bc:	add	sp, sp, #8
   132c0:	pop	{pc}		; (ldr pc, [sp], #4)
   132c4:	mov	r0, r4
   132c8:	bl	10f78 <fileno@plt>
   132cc:	mov	r1, #1
   132d0:	mov	r2, #0
   132d4:	mov	r3, #0
   132d8:	str	r1, [sp]
   132dc:	bl	10e7c <lseek64@plt>
   132e0:	mvn	r3, #0
   132e4:	mvn	r2, #0
   132e8:	cmp	r1, r3
   132ec:	cmpeq	r0, r2
   132f0:	bne	13284 <__assert_fail@plt+0x2240>
   132f4:	mov	r0, r4
   132f8:	add	sp, sp, #12
   132fc:	ldrd	r4, [sp]
   13300:	ldr	lr, [sp, #8]
   13304:	add	sp, sp, #12
   13308:	b	10f9c <fclose@plt>
   1330c:	str	r4, [sp, #-8]!
   13310:	subs	r4, r0, #0
   13314:	str	lr, [sp, #4]
   13318:	sub	sp, sp, #8
   1331c:	beq	13338 <__assert_fail@plt+0x22f4>
   13320:	bl	10edc <__freading@plt>
   13324:	cmp	r0, #0
   13328:	beq	13338 <__assert_fail@plt+0x22f4>
   1332c:	ldr	r3, [r4]
   13330:	tst	r3, #256	; 0x100
   13334:	bne	13350 <__assert_fail@plt+0x230c>
   13338:	mov	r0, r4
   1333c:	add	sp, sp, #8
   13340:	ldr	r4, [sp]
   13344:	ldr	lr, [sp, #4]
   13348:	add	sp, sp, #8
   1334c:	b	10dd4 <fflush@plt>
   13350:	mov	r1, #1
   13354:	mov	r2, #0
   13358:	mov	r3, #0
   1335c:	mov	r0, r4
   13360:	str	r1, [sp]
   13364:	bl	13478 <__assert_fail@plt+0x2434>
   13368:	b	13338 <__assert_fail@plt+0x22f4>
   1336c:	strd	r4, [sp, #-16]!
   13370:	mov	r5, r1
   13374:	str	r6, [sp, #8]
   13378:	str	lr, [sp, #12]
   1337c:	bl	10ffc <fopen64@plt>
   13380:	subs	r4, r0, #0
   13384:	beq	13394 <__assert_fail@plt+0x2350>
   13388:	bl	10f78 <fileno@plt>
   1338c:	cmp	r0, #2
   13390:	bls	133a8 <__assert_fail@plt+0x2364>
   13394:	mov	r0, r4
   13398:	ldrd	r4, [sp]
   1339c:	ldr	r6, [sp, #8]
   133a0:	add	sp, sp, #12
   133a4:	pop	{pc}		; (ldr pc, [sp], #4)
   133a8:	bl	15b28 <__assert_fail@plt+0x4ae4>
   133ac:	subs	r6, r0, #0
   133b0:	blt	133f8 <__assert_fail@plt+0x23b4>
   133b4:	mov	r0, r4
   133b8:	bl	13258 <__assert_fail@plt+0x2214>
   133bc:	cmp	r0, #0
   133c0:	bne	133d8 <__assert_fail@plt+0x2394>
   133c4:	mov	r1, r5
   133c8:	mov	r0, r6
   133cc:	bl	10d98 <fdopen@plt>
   133d0:	subs	r4, r0, #0
   133d4:	bne	13394 <__assert_fail@plt+0x2350>
   133d8:	bl	10f48 <__errno_location@plt>
   133dc:	mov	r5, r0
   133e0:	mov	r0, r6
   133e4:	ldr	r6, [r5]
   133e8:	mov	r4, #0
   133ec:	bl	11038 <close@plt>
   133f0:	str	r6, [r5]
   133f4:	b	13394 <__assert_fail@plt+0x2350>
   133f8:	bl	10f48 <__errno_location@plt>
   133fc:	mov	r5, r0
   13400:	mov	r0, r4
   13404:	ldr	r6, [r5]
   13408:	mov	r4, #0
   1340c:	bl	13258 <__assert_fail@plt+0x2214>
   13410:	str	r6, [r5]
   13414:	b	13394 <__assert_fail@plt+0x2350>
   13418:	strd	r4, [sp, #-12]!
   1341c:	mov	r5, r0
   13420:	str	lr, [sp, #8]
   13424:	sub	sp, sp, #12
   13428:	bl	10f48 <__errno_location@plt>
   1342c:	mov	r4, r0
   13430:	mov	r2, #0
   13434:	ldr	r3, [r4]
   13438:	mov	r0, r5
   1343c:	str	r2, [r4]
   13440:	str	r3, [sp]
   13444:	str	r3, [sp, #4]
   13448:	bl	10de0 <free@plt>
   1344c:	ldr	r3, [r4]
   13450:	add	r2, sp, #8
   13454:	clz	r3, r3
   13458:	lsr	r3, r3, #5
   1345c:	add	r3, r2, r3, lsl #2
   13460:	ldr	r3, [r3, #-8]
   13464:	str	r3, [r4]
   13468:	add	sp, sp, #12
   1346c:	ldrd	r4, [sp]
   13470:	add	sp, sp, #8
   13474:	pop	{pc}		; (ldr pc, [sp], #4)
   13478:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1347c:	mov	r4, r0
   13480:	ldr	ip, [r0, #4]
   13484:	strd	r6, [sp, #8]
   13488:	str	lr, [sp, #20]
   1348c:	ldr	lr, [r0, #8]
   13490:	str	r8, [sp, #16]
   13494:	sub	sp, sp, #8
   13498:	ldr	r5, [sp, #32]
   1349c:	cmp	lr, ip
   134a0:	beq	134c8 <__assert_fail@plt+0x2484>
   134a4:	mov	r0, r4
   134a8:	str	r5, [sp, #32]
   134ac:	add	sp, sp, #8
   134b0:	ldrd	r4, [sp]
   134b4:	ldrd	r6, [sp, #8]
   134b8:	ldr	r8, [sp, #16]
   134bc:	ldr	lr, [sp, #20]
   134c0:	add	sp, sp, #24
   134c4:	b	10fa8 <fseeko64@plt>
   134c8:	ldr	ip, [r0, #16]
   134cc:	ldr	lr, [r0, #20]
   134d0:	cmp	lr, ip
   134d4:	bne	134a4 <__assert_fail@plt+0x2460>
   134d8:	ldr	r8, [r0, #36]	; 0x24
   134dc:	cmp	r8, #0
   134e0:	bne	134a4 <__assert_fail@plt+0x2460>
   134e4:	mov	r6, r2
   134e8:	mov	r7, r3
   134ec:	bl	10f78 <fileno@plt>
   134f0:	mov	r2, r6
   134f4:	mov	r3, r7
   134f8:	str	r5, [sp]
   134fc:	bl	10e7c <lseek64@plt>
   13500:	mvn	r3, #0
   13504:	mvn	r2, #0
   13508:	cmp	r1, r3
   1350c:	cmpeq	r0, r2
   13510:	beq	13540 <__assert_fail@plt+0x24fc>
   13514:	ldr	r3, [r4]
   13518:	strd	r0, [r4, #80]	; 0x50
   1351c:	bic	r3, r3, #16
   13520:	str	r3, [r4]
   13524:	mov	r0, r8
   13528:	add	sp, sp, #8
   1352c:	ldrd	r4, [sp]
   13530:	ldrd	r6, [sp, #8]
   13534:	ldr	r8, [sp, #16]
   13538:	add	sp, sp, #20
   1353c:	pop	{pc}		; (ldr pc, [sp], #4)
   13540:	mvn	r8, #0
   13544:	b	13524 <__assert_fail@plt+0x24e0>
   13548:	push	{lr}		; (str lr, [sp, #-4]!)
   1354c:	sub	sp, sp, #268	; 0x10c
   13550:	movw	r2, #257	; 0x101
   13554:	add	r1, sp, #4
   13558:	bl	15a64 <__assert_fail@plt+0x4a20>
   1355c:	cmp	r0, #0
   13560:	movne	r0, #0
   13564:	bne	13598 <__assert_fail@plt+0x2554>
   13568:	movw	r1, #35376	; 0x8a30
   1356c:	movt	r1, #1
   13570:	add	r0, sp, #4
   13574:	bl	10dbc <strcmp@plt>
   13578:	cmp	r0, #0
   1357c:	beq	13598 <__assert_fail@plt+0x2554>
   13580:	add	r0, sp, #4
   13584:	movw	r1, #35380	; 0x8a34
   13588:	movt	r1, #1
   1358c:	bl	10dbc <strcmp@plt>
   13590:	adds	r0, r0, #0
   13594:	movne	r0, #1
   13598:	add	sp, sp, #268	; 0x10c
   1359c:	pop	{pc}		; (ldr pc, [sp], #4)
   135a0:	mov	r3, #0
   135a4:	str	r3, [r0]
   135a8:	str	r3, [r0, #4]
   135ac:	str	r3, [r0, #8]
   135b0:	bx	lr
   135b4:	ldr	ip, [r1]
   135b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   135bc:	ldr	r3, [r0]
   135c0:	strd	r6, [sp, #8]
   135c4:	strd	sl, [sp, #24]
   135c8:	ldr	fp, [r0, #8]
   135cc:	tst	ip, #16
   135d0:	strd	r8, [sp, #16]
   135d4:	str	lr, [sp, #32]
   135d8:	sub	sp, sp, #12
   135dc:	add	r9, fp, r3
   135e0:	bne	136d0 <__assert_fail@plt+0x268c>
   135e4:	mov	r8, r2
   135e8:	mov	r7, r0
   135ec:	mov	r5, r1
   135f0:	mov	r4, fp
   135f4:	b	1361c <__assert_fail@plt+0x25d8>
   135f8:	add	r1, r3, #1
   135fc:	str	r1, [r5, #4]
   13600:	ldrb	r6, [r3]
   13604:	mov	sl, r6
   13608:	cmp	r4, r9
   1360c:	beq	13670 <__assert_fail@plt+0x262c>
   13610:	cmp	sl, r8
   13614:	strb	r6, [r4], #1
   13618:	beq	136a8 <__assert_fail@plt+0x2664>
   1361c:	ldr	r3, [r5, #4]
   13620:	ldr	r1, [r5, #8]
   13624:	cmp	r3, r1
   13628:	bcc	135f8 <__assert_fail@plt+0x25b4>
   1362c:	mov	r0, r5
   13630:	bl	10fc0 <__uflow@plt>
   13634:	cmn	r0, #1
   13638:	mov	sl, r0
   1363c:	bne	136d8 <__assert_fail@plt+0x2694>
   13640:	cmp	fp, r4
   13644:	beq	136d0 <__assert_fail@plt+0x268c>
   13648:	ldr	r3, [r5]
   1364c:	tst	r3, #32
   13650:	bne	136d0 <__assert_fail@plt+0x268c>
   13654:	ldrb	r3, [r4, #-1]
   13658:	cmp	r3, r8
   1365c:	beq	136a8 <__assert_fail@plt+0x2664>
   13660:	cmp	r4, r9
   13664:	mov	sl, r8
   13668:	bne	136a4 <__assert_fail@plt+0x2660>
   1366c:	mov	r6, r8
   13670:	mov	r2, #1
   13674:	mov	r0, fp
   13678:	mvn	r3, #0
   1367c:	mov	r1, r7
   13680:	str	r2, [sp]
   13684:	ldr	r4, [r7]
   13688:	bl	162c0 <__assert_fail@plt+0x527c>
   1368c:	ldr	r2, [r7]
   13690:	mov	fp, r0
   13694:	str	r0, [r7, #8]
   13698:	add	r4, r0, r4
   1369c:	add	r9, r0, r2
   136a0:	b	13610 <__assert_fail@plt+0x25cc>
   136a4:	strb	r8, [r4], #1
   136a8:	sub	r4, r4, fp
   136ac:	mov	r0, r7
   136b0:	str	r4, [r7, #4]
   136b4:	add	sp, sp, #12
   136b8:	ldrd	r4, [sp]
   136bc:	ldrd	r6, [sp, #8]
   136c0:	ldrd	r8, [sp, #16]
   136c4:	ldrd	sl, [sp, #24]
   136c8:	add	sp, sp, #32
   136cc:	pop	{pc}		; (ldr pc, [sp], #4)
   136d0:	mov	r0, #0
   136d4:	b	136b4 <__assert_fail@plt+0x2670>
   136d8:	uxtb	r6, r0
   136dc:	b	13608 <__assert_fail@plt+0x25c4>
   136e0:	mov	r2, #10
   136e4:	b	135b4 <__assert_fail@plt+0x2570>
   136e8:	ldr	r0, [r0, #8]
   136ec:	b	13418 <__assert_fail@plt+0x23d4>
   136f0:	strd	r4, [sp, #-16]!
   136f4:	str	r6, [sp, #8]
   136f8:	subs	r6, r2, #0
   136fc:	str	lr, [sp, #12]
   13700:	beq	13754 <__assert_fail@plt+0x2710>
   13704:	mov	r4, r0
   13708:	mov	r5, r1
   1370c:	bl	10ee8 <__ctype_toupper_loc@plt>
   13710:	sub	r3, r4, #1
   13714:	sub	r1, r5, #1
   13718:	ldr	ip, [r0]
   1371c:	add	r4, r3, r6
   13720:	b	1372c <__assert_fail@plt+0x26e8>
   13724:	cmp	r4, r3
   13728:	beq	13744 <__assert_fail@plt+0x2700>
   1372c:	ldrb	lr, [r3, #1]!
   13730:	ldrb	r2, [r1, #1]!
   13734:	ldr	r0, [ip, lr, lsl #2]
   13738:	ldr	r2, [ip, r2, lsl #2]
   1373c:	subs	r0, r0, r2
   13740:	beq	13724 <__assert_fail@plt+0x26e0>
   13744:	ldrd	r4, [sp]
   13748:	ldr	r6, [sp, #8]
   1374c:	add	sp, sp, #12
   13750:	pop	{pc}		; (ldr pc, [sp], #4)
   13754:	mov	r0, r6
   13758:	b	13744 <__assert_fail@plt+0x2700>
   1375c:	strd	r4, [sp, #-16]!
   13760:	subs	r4, r0, #0
   13764:	str	r6, [sp, #8]
   13768:	str	lr, [sp, #12]
   1376c:	beq	13804 <__assert_fail@plt+0x27c0>
   13770:	mov	r1, #47	; 0x2f
   13774:	bl	10fe4 <strrchr@plt>
   13778:	subs	r5, r0, #0
   1377c:	beq	137dc <__assert_fail@plt+0x2798>
   13780:	add	r6, r5, #1
   13784:	sub	r3, r6, r4
   13788:	cmp	r3, #6
   1378c:	ble	137dc <__assert_fail@plt+0x2798>
   13790:	movw	r1, #35444	; 0x8a74
   13794:	movt	r1, #1
   13798:	mov	r2, #7
   1379c:	sub	r0, r5, #6
   137a0:	bl	11020 <strncmp@plt>
   137a4:	cmp	r0, #0
   137a8:	bne	137dc <__assert_fail@plt+0x2798>
   137ac:	movw	r1, #35452	; 0x8a7c
   137b0:	movt	r1, #1
   137b4:	mov	r2, #3
   137b8:	mov	r0, r6
   137bc:	bl	11020 <strncmp@plt>
   137c0:	cmp	r0, #0
   137c4:	movne	r4, r6
   137c8:	bne	137dc <__assert_fail@plt+0x2798>
   137cc:	add	r4, r5, #4
   137d0:	movw	r3, #41312	; 0xa160
   137d4:	movt	r3, #2
   137d8:	str	r4, [r3]
   137dc:	movw	r2, #41472	; 0xa200
   137e0:	movt	r2, #2
   137e4:	ldr	r6, [sp, #8]
   137e8:	movw	r3, #41316	; 0xa164
   137ec:	movt	r3, #2
   137f0:	str	r4, [r2]
   137f4:	str	r4, [r3]
   137f8:	ldrd	r4, [sp]
   137fc:	add	sp, sp, #12
   13800:	pop	{pc}		; (ldr pc, [sp], #4)
   13804:	movw	r3, #41328	; 0xa170
   13808:	movt	r3, #2
   1380c:	movw	r0, #35388	; 0x8a3c
   13810:	movt	r0, #1
   13814:	ldr	r3, [r3]
   13818:	mov	r2, #55	; 0x37
   1381c:	mov	r1, #1
   13820:	bl	10e70 <fwrite@plt>
   13824:	bl	1102c <abort@plt>
   13828:	strd	r4, [sp, #-16]!
   1382c:	mov	r4, #0
   13830:	mov	r5, #0
   13834:	cmp	r1, #10
   13838:	str	r6, [sp, #8]
   1383c:	strd	r4, [r0]
   13840:	strd	r4, [r0, #8]
   13844:	str	lr, [sp, #12]
   13848:	strd	r4, [r0, #16]
   1384c:	strd	r4, [r0, #24]
   13850:	strd	r4, [r0, #32]
   13854:	strd	r4, [r0, #40]	; 0x28
   13858:	beq	13870 <__assert_fail@plt+0x282c>
   1385c:	ldrd	r4, [sp]
   13860:	str	r1, [r0]
   13864:	ldr	r6, [sp, #8]
   13868:	add	sp, sp, #12
   1386c:	pop	{pc}		; (ldr pc, [sp], #4)
   13870:	bl	1102c <abort@plt>
   13874:	mov	r2, #5
   13878:	strd	r4, [sp, #-16]!
   1387c:	mov	r5, r0
   13880:	str	r6, [sp, #8]
   13884:	mov	r6, r1
   13888:	mov	r1, r0
   1388c:	mov	r0, #0
   13890:	str	lr, [sp, #12]
   13894:	bl	10e40 <dcgettext@plt>
   13898:	cmp	r5, r0
   1389c:	mov	r4, r0
   138a0:	beq	138b8 <__assert_fail@plt+0x2874>
   138a4:	mov	r0, r4
   138a8:	ldrd	r4, [sp]
   138ac:	ldr	r6, [sp, #8]
   138b0:	add	sp, sp, #12
   138b4:	pop	{pc}		; (ldr pc, [sp], #4)
   138b8:	bl	17978 <__assert_fail@plt+0x6934>
   138bc:	ldrb	r3, [r0]
   138c0:	bic	r3, r3, #32
   138c4:	cmp	r3, #85	; 0x55
   138c8:	bne	13930 <__assert_fail@plt+0x28ec>
   138cc:	ldrb	r3, [r0, #1]
   138d0:	bic	r3, r3, #32
   138d4:	cmp	r3, #84	; 0x54
   138d8:	bne	139b0 <__assert_fail@plt+0x296c>
   138dc:	ldrb	r3, [r0, #2]
   138e0:	bic	r3, r3, #32
   138e4:	cmp	r3, #70	; 0x46
   138e8:	bne	139b0 <__assert_fail@plt+0x296c>
   138ec:	ldrb	r3, [r0, #3]
   138f0:	cmp	r3, #45	; 0x2d
   138f4:	bne	139b0 <__assert_fail@plt+0x296c>
   138f8:	ldrb	r3, [r0, #4]
   138fc:	cmp	r3, #56	; 0x38
   13900:	bne	139b0 <__assert_fail@plt+0x296c>
   13904:	ldrb	r3, [r0, #5]
   13908:	cmp	r3, #0
   1390c:	bne	139b0 <__assert_fail@plt+0x296c>
   13910:	ldrb	r2, [r4]
   13914:	movw	r3, #35544	; 0x8ad8
   13918:	movt	r3, #1
   1391c:	movw	r4, #35556	; 0x8ae4
   13920:	movt	r4, #1
   13924:	cmp	r2, #96	; 0x60
   13928:	movne	r4, r3
   1392c:	b	138a4 <__assert_fail@plt+0x2860>
   13930:	cmp	r3, #71	; 0x47
   13934:	bne	139b0 <__assert_fail@plt+0x296c>
   13938:	ldrb	r3, [r0, #1]
   1393c:	bic	r3, r3, #32
   13940:	cmp	r3, #66	; 0x42
   13944:	bne	139b0 <__assert_fail@plt+0x296c>
   13948:	ldrb	r3, [r0, #2]
   1394c:	cmp	r3, #49	; 0x31
   13950:	bne	139b0 <__assert_fail@plt+0x296c>
   13954:	ldrb	r3, [r0, #3]
   13958:	cmp	r3, #56	; 0x38
   1395c:	bne	139b0 <__assert_fail@plt+0x296c>
   13960:	ldrb	r3, [r0, #4]
   13964:	cmp	r3, #48	; 0x30
   13968:	bne	139b0 <__assert_fail@plt+0x296c>
   1396c:	ldrb	r3, [r0, #5]
   13970:	cmp	r3, #51	; 0x33
   13974:	bne	139b0 <__assert_fail@plt+0x296c>
   13978:	ldrb	r3, [r0, #6]
   1397c:	cmp	r3, #48	; 0x30
   13980:	bne	139b0 <__assert_fail@plt+0x296c>
   13984:	ldrb	r3, [r0, #7]
   13988:	cmp	r3, #0
   1398c:	bne	139b0 <__assert_fail@plt+0x296c>
   13990:	ldrb	r2, [r4]
   13994:	movw	r3, #35548	; 0x8adc
   13998:	movt	r3, #1
   1399c:	movw	r4, #35552	; 0x8ae0
   139a0:	movt	r4, #1
   139a4:	cmp	r2, #96	; 0x60
   139a8:	movne	r4, r3
   139ac:	b	138a4 <__assert_fail@plt+0x2860>
   139b0:	movw	r3, #35560	; 0x8ae8
   139b4:	movt	r3, #1
   139b8:	cmp	r6, #9
   139bc:	movw	r4, #35540	; 0x8ad4
   139c0:	movt	r4, #1
   139c4:	movne	r4, r3
   139c8:	b	138a4 <__assert_fail@plt+0x2860>
   139cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   139d0:	strd	r6, [sp, #8]
   139d4:	strd	r8, [sp, #16]
   139d8:	strd	sl, [sp, #24]
   139dc:	mov	fp, r0
   139e0:	mov	sl, r1
   139e4:	str	lr, [sp, #32]
   139e8:	sub	sp, sp, #116	; 0x74
   139ec:	ldr	r8, [sp, #152]	; 0x98
   139f0:	str	r3, [sp, #28]
   139f4:	ldr	r3, [sp, #156]	; 0x9c
   139f8:	str	r2, [sp, #32]
   139fc:	and	r4, r3, #2
   13a00:	ubfx	r3, r3, #1, #1
   13a04:	str	r3, [sp, #44]	; 0x2c
   13a08:	bl	10e88 <__ctype_get_mb_cur_max@plt>
   13a0c:	str	r0, [sp, #64]	; 0x40
   13a10:	cmp	r8, #10
   13a14:	ldrls	pc, [pc, r8, lsl #2]
   13a18:	b	15188 <__assert_fail@plt+0x4144>
   13a1c:	andeq	r3, r1, r0, lsr #28
   13a20:			; <UNDEFINED> instruction: 0x00013ebc
   13a24:	muleq	r1, r8, r4
   13a28:	ldrdeq	r3, [r1], -ip
   13a2c:	andeq	r3, r1, r4, lsl #27
   13a30:	ldrdeq	r3, [r1], -r0
   13a34:	andeq	r3, r1, r0, asr lr
   13a38:	andeq	r3, r1, ip, lsl #29
   13a3c:	andeq	r3, r1, r8, asr #20
   13a40:	andeq	r3, r1, r8, asr #20
   13a44:	andeq	r3, r1, r8, asr #20
   13a48:	cmp	r8, #10
   13a4c:	beq	13a78 <__assert_fail@plt+0x2a34>
   13a50:	mov	r1, r8
   13a54:	movw	r0, #35564	; 0x8aec
   13a58:	movt	r0, #1
   13a5c:	bl	13874 <__assert_fail@plt+0x2830>
   13a60:	mov	r1, r8
   13a64:	str	r0, [sp, #164]	; 0xa4
   13a68:	movw	r0, #35560	; 0x8ae8
   13a6c:	movt	r0, #1
   13a70:	bl	13874 <__assert_fail@plt+0x2830>
   13a74:	str	r0, [sp, #168]	; 0xa8
   13a78:	cmp	r4, #0
   13a7c:	movne	r4, #0
   13a80:	beq	14e64 <__assert_fail@plt+0x3e20>
   13a84:	mov	r3, #1
   13a88:	mov	r5, #0
   13a8c:	ldr	r0, [sp, #168]	; 0xa8
   13a90:	str	r3, [sp, #36]	; 0x24
   13a94:	str	r3, [sp, #40]	; 0x28
   13a98:	str	r5, [sp, #68]	; 0x44
   13a9c:	bl	10f30 <strlen@plt>
   13aa0:	ldr	r3, [sp, #168]	; 0xa8
   13aa4:	str	r5, [sp, #48]	; 0x30
   13aa8:	str	r0, [sp, #56]	; 0x38
   13aac:	str	r3, [sp, #60]	; 0x3c
   13ab0:	str	r5, [sp, #72]	; 0x48
   13ab4:	str	r8, [sp, #152]	; 0x98
   13ab8:	mov	r8, fp
   13abc:	mov	r9, #0
   13ac0:	ldr	fp, [sp, #152]	; 0x98
   13ac4:	ldr	r3, [sp, #28]
   13ac8:	cmn	r3, #1
   13acc:	beq	1402c <__assert_fail@plt+0x2fe8>
   13ad0:	ldr	r3, [sp, #28]
   13ad4:	subs	r6, r3, r9
   13ad8:	movne	r6, #1
   13adc:	cmp	r6, #0
   13ae0:	beq	14044 <__assert_fail@plt+0x3000>
   13ae4:	ldr	r0, [sp, #32]
   13ae8:	ldr	r7, [sp, #40]	; 0x28
   13aec:	add	r3, r0, r9
   13af0:	cmp	fp, #2
   13af4:	moveq	r7, #0
   13af8:	andne	r7, r7, #1
   13afc:	str	r3, [sp, #52]	; 0x34
   13b00:	cmp	r7, #0
   13b04:	beq	144e0 <__assert_fail@plt+0x349c>
   13b08:	ldr	r2, [sp, #56]	; 0x38
   13b0c:	cmp	r2, #0
   13b10:	beq	1477c <__assert_fail@plt+0x3738>
   13b14:	ldr	r1, [sp, #28]
   13b18:	cmp	r2, #1
   13b1c:	mov	r3, r2
   13b20:	movls	r3, #0
   13b24:	movhi	r3, #1
   13b28:	add	r5, r9, r2
   13b2c:	cmn	r1, #1
   13b30:	movne	r3, #0
   13b34:	cmp	r3, #0
   13b38:	beq	13b44 <__assert_fail@plt+0x2b00>
   13b3c:	bl	10f30 <strlen@plt>
   13b40:	str	r0, [sp, #28]
   13b44:	ldr	r3, [sp, #28]
   13b48:	cmp	r5, r3
   13b4c:	bhi	1477c <__assert_fail@plt+0x3738>
   13b50:	ldr	r0, [sp, #52]	; 0x34
   13b54:	ldr	r2, [sp, #56]	; 0x38
   13b58:	ldr	r1, [sp, #60]	; 0x3c
   13b5c:	bl	10e28 <memcmp@plt>
   13b60:	cmp	r0, #0
   13b64:	bne	1477c <__assert_fail@plt+0x3738>
   13b68:	ldr	r3, [sp, #44]	; 0x2c
   13b6c:	cmp	r3, #0
   13b70:	bne	150ac <__assert_fail@plt+0x4068>
   13b74:	ldr	r3, [sp, #52]	; 0x34
   13b78:	ldrb	r5, [r3]
   13b7c:	cmp	r5, #126	; 0x7e
   13b80:	ldrls	pc, [pc, r5, lsl #2]
   13b84:	b	1443c <__assert_fail@plt+0x33f8>
   13b88:	andeq	r4, r1, r0, asr #6
   13b8c:	andeq	r4, r1, ip, lsr r4
   13b90:	andeq	r4, r1, ip, lsr r4
   13b94:	andeq	r4, r1, ip, lsr r4
   13b98:	andeq	r4, r1, ip, lsr r4
   13b9c:	andeq	r4, r1, ip, lsr r4
   13ba0:	andeq	r4, r1, ip, lsr r4
   13ba4:	andeq	r4, r1, r4, lsl r3
   13ba8:	andeq	r4, r1, ip, lsl #6
   13bac:	andeq	r4, r1, r4, asr r2
   13bb0:	andeq	r4, r1, r0, lsl #6
   13bb4:	andeq	r4, r1, ip, asr #4
   13bb8:	ldrdeq	r4, [r1], -ip
   13bbc:	andeq	r4, r1, r8, lsr #6
   13bc0:	andeq	r4, r1, ip, lsr r4
   13bc4:	andeq	r4, r1, ip, lsr r4
   13bc8:	andeq	r4, r1, ip, lsr r4
   13bcc:	andeq	r4, r1, ip, lsr r4
   13bd0:	andeq	r4, r1, ip, lsr r4
   13bd4:	andeq	r4, r1, ip, lsr r4
   13bd8:	andeq	r4, r1, ip, lsr r4
   13bdc:	andeq	r4, r1, ip, lsr r4
   13be0:	andeq	r4, r1, ip, lsr r4
   13be4:	andeq	r4, r1, ip, lsr r4
   13be8:	andeq	r4, r1, ip, lsr r4
   13bec:	andeq	r4, r1, ip, lsr r4
   13bf0:	andeq	r4, r1, ip, lsr r4
   13bf4:	andeq	r4, r1, ip, lsr r4
   13bf8:	andeq	r4, r1, ip, lsr r4
   13bfc:	andeq	r4, r1, ip, lsr r4
   13c00:	andeq	r4, r1, ip, lsr r4
   13c04:	andeq	r4, r1, ip, lsr r4
   13c08:	andeq	r4, r1, r8, lsl r4
   13c0c:	andeq	r4, r1, r0, lsr #6
   13c10:	andeq	r4, r1, r0, lsr #6
   13c14:	strdeq	r4, [r1], -ip
   13c18:	andeq	r4, r1, r0, lsr #6
   13c1c:	andeq	r4, r1, r0, lsr r4
   13c20:	andeq	r4, r1, r0, lsr #6
   13c24:	andeq	r4, r1, ip, ror r1
   13c28:	andeq	r4, r1, r0, lsr #6
   13c2c:	andeq	r4, r1, r0, lsr #6
   13c30:	andeq	r4, r1, r0, lsr #6
   13c34:	andeq	r4, r1, r0, lsr r4
   13c38:	andeq	r4, r1, r0, lsr r4
   13c3c:	andeq	r4, r1, r0, lsr r4
   13c40:	andeq	r4, r1, r0, lsr r4
   13c44:	andeq	r4, r1, r0, lsr r4
   13c48:	andeq	r4, r1, r0, lsr r4
   13c4c:	andeq	r4, r1, r0, lsr r4
   13c50:	andeq	r4, r1, r0, lsr r4
   13c54:	andeq	r4, r1, r0, lsr r4
   13c58:	andeq	r4, r1, r0, lsr r4
   13c5c:	andeq	r4, r1, r0, lsr r4
   13c60:	andeq	r4, r1, r0, lsr r4
   13c64:	andeq	r4, r1, r0, lsr r4
   13c68:	andeq	r4, r1, r0, lsr r4
   13c6c:	andeq	r4, r1, r0, lsr r4
   13c70:	andeq	r4, r1, r0, lsr r4
   13c74:	andeq	r4, r1, r0, lsr #6
   13c78:	andeq	r4, r1, r0, lsr #6
   13c7c:	andeq	r4, r1, r0, lsr #6
   13c80:	andeq	r4, r1, r0, lsr #6
   13c84:	andeq	r4, r1, r0, asr r1
   13c88:	andeq	r4, r1, ip, lsr r4
   13c8c:	andeq	r4, r1, r0, lsr r4
   13c90:	andeq	r4, r1, r0, lsr r4
   13c94:	andeq	r4, r1, r0, lsr r4
   13c98:	andeq	r4, r1, r0, lsr r4
   13c9c:	andeq	r4, r1, r0, lsr r4
   13ca0:	andeq	r4, r1, r0, lsr r4
   13ca4:	andeq	r4, r1, r0, lsr r4
   13ca8:	andeq	r4, r1, r0, lsr r4
   13cac:	andeq	r4, r1, r0, lsr r4
   13cb0:	andeq	r4, r1, r0, lsr r4
   13cb4:	andeq	r4, r1, r0, lsr r4
   13cb8:	andeq	r4, r1, r0, lsr r4
   13cbc:	andeq	r4, r1, r0, lsr r4
   13cc0:	andeq	r4, r1, r0, lsr r4
   13cc4:	andeq	r4, r1, r0, lsr r4
   13cc8:	andeq	r4, r1, r0, lsr r4
   13ccc:	andeq	r4, r1, r0, lsr r4
   13cd0:	andeq	r4, r1, r0, lsr r4
   13cd4:	andeq	r4, r1, r0, lsr r4
   13cd8:	andeq	r4, r1, r0, lsr r4
   13cdc:	andeq	r4, r1, r0, lsr r4
   13ce0:	andeq	r4, r1, r0, lsr r4
   13ce4:	andeq	r4, r1, r0, lsr r4
   13ce8:	andeq	r4, r1, r0, lsr r4
   13cec:	andeq	r4, r1, r0, lsr r4
   13cf0:	andeq	r4, r1, r0, lsr r4
   13cf4:	andeq	r4, r1, r0, lsr #6
   13cf8:	strdeq	r4, [r1], -r8
   13cfc:	andeq	r4, r1, r0, lsr r4
   13d00:	andeq	r4, r1, r0, lsr #6
   13d04:	andeq	r4, r1, r0, lsr r4
   13d08:	andeq	r4, r1, r0, lsr #6
   13d0c:	andeq	r4, r1, r0, lsr r4
   13d10:	andeq	r4, r1, r0, lsr r4
   13d14:	andeq	r4, r1, r0, lsr r4
   13d18:	andeq	r4, r1, r0, lsr r4
   13d1c:	andeq	r4, r1, r0, lsr r4
   13d20:	andeq	r4, r1, r0, lsr r4
   13d24:	andeq	r4, r1, r0, lsr r4
   13d28:	andeq	r4, r1, r0, lsr r4
   13d2c:	andeq	r4, r1, r0, lsr r4
   13d30:	andeq	r4, r1, r0, lsr r4
   13d34:	andeq	r4, r1, r0, lsr r4
   13d38:	andeq	r4, r1, r0, lsr r4
   13d3c:	andeq	r4, r1, r0, lsr r4
   13d40:	andeq	r4, r1, r0, lsr r4
   13d44:	andeq	r4, r1, r0, lsr r4
   13d48:	andeq	r4, r1, r0, lsr r4
   13d4c:	andeq	r4, r1, r0, lsr r4
   13d50:	andeq	r4, r1, r0, lsr r4
   13d54:	andeq	r4, r1, r0, lsr r4
   13d58:	andeq	r4, r1, r0, lsr r4
   13d5c:	andeq	r4, r1, r0, lsr r4
   13d60:	andeq	r4, r1, r0, lsr r4
   13d64:	andeq	r4, r1, r0, lsr r4
   13d68:	andeq	r4, r1, r0, lsr r4
   13d6c:	andeq	r4, r1, r0, lsr r4
   13d70:	andeq	r4, r1, r0, lsr r4
   13d74:	andeq	r3, r1, ip, lsl pc
   13d78:	andeq	r4, r1, r0, lsr #6
   13d7c:	andeq	r3, r1, ip, lsl pc
   13d80:	strdeq	r4, [r1], -ip
   13d84:	cmp	r4, #0
   13d88:	moveq	r3, #1
   13d8c:	streq	r3, [sp, #40]	; 0x28
   13d90:	beq	144a4 <__assert_fail@plt+0x3460>
   13d94:	mov	r3, #0
   13d98:	mov	r2, #1
   13d9c:	mov	r4, r3
   13da0:	str	r2, [sp, #36]	; 0x24
   13da4:	str	r2, [sp, #44]	; 0x2c
   13da8:	str	r2, [sp, #56]	; 0x38
   13dac:	str	r3, [sp, #68]	; 0x44
   13db0:	movw	r3, #35560	; 0x8ae8
   13db4:	movt	r3, #1
   13db8:	str	r4, [sp, #40]	; 0x28
   13dbc:	mov	r8, #2
   13dc0:	str	r4, [sp, #48]	; 0x30
   13dc4:	str	r3, [sp, #60]	; 0x3c
   13dc8:	str	r4, [sp, #72]	; 0x48
   13dcc:	b	13ab4 <__assert_fail@plt+0x2a70>
   13dd0:	cmp	r4, #0
   13dd4:	bne	15020 <__assert_fail@plt+0x3fdc>
   13dd8:	cmp	sl, #0
   13ddc:	beq	14de0 <__assert_fail@plt+0x3d9c>
   13de0:	mov	r3, #34	; 0x22
   13de4:	mov	r1, r4
   13de8:	mov	r2, #1
   13dec:	strb	r3, [fp]
   13df0:	movw	r3, #35540	; 0x8ad4
   13df4:	movt	r3, #1
   13df8:	mov	r4, r2
   13dfc:	str	r2, [sp, #36]	; 0x24
   13e00:	str	r2, [sp, #40]	; 0x28
   13e04:	str	r1, [sp, #44]	; 0x2c
   13e08:	str	r1, [sp, #48]	; 0x30
   13e0c:	str	r2, [sp, #56]	; 0x38
   13e10:	str	r3, [sp, #60]	; 0x3c
   13e14:	str	r1, [sp, #68]	; 0x44
   13e18:	str	r1, [sp, #72]	; 0x48
   13e1c:	b	13ab4 <__assert_fail@plt+0x2a70>
   13e20:	mov	r3, #0
   13e24:	mov	r4, r8
   13e28:	str	r3, [sp, #40]	; 0x28
   13e2c:	str	r3, [sp, #44]	; 0x2c
   13e30:	str	r3, [sp, #48]	; 0x30
   13e34:	str	r8, [sp, #56]	; 0x38
   13e38:	str	r3, [sp, #60]	; 0x3c
   13e3c:	str	r3, [sp, #68]	; 0x44
   13e40:	mov	r3, #1
   13e44:	str	r3, [sp, #36]	; 0x24
   13e48:	str	r8, [sp, #72]	; 0x48
   13e4c:	b	13ab4 <__assert_fail@plt+0x2a70>
   13e50:	mov	r3, #1
   13e54:	mov	r2, #0
   13e58:	mov	r4, r2
   13e5c:	mov	r8, #5
   13e60:	str	r3, [sp, #36]	; 0x24
   13e64:	str	r3, [sp, #40]	; 0x28
   13e68:	str	r3, [sp, #44]	; 0x2c
   13e6c:	str	r2, [sp, #48]	; 0x30
   13e70:	str	r3, [sp, #56]	; 0x38
   13e74:	movw	r3, #35540	; 0x8ad4
   13e78:	movt	r3, #1
   13e7c:	str	r3, [sp, #60]	; 0x3c
   13e80:	str	r2, [sp, #68]	; 0x44
   13e84:	str	r2, [sp, #72]	; 0x48
   13e88:	b	13ab4 <__assert_fail@plt+0x2a70>
   13e8c:	mov	r3, #0
   13e90:	mov	r2, #1
   13e94:	mov	r4, r3
   13e98:	str	r2, [sp, #36]	; 0x24
   13e9c:	str	r2, [sp, #40]	; 0x28
   13ea0:	str	r3, [sp, #44]	; 0x2c
   13ea4:	str	r3, [sp, #48]	; 0x30
   13ea8:	str	r3, [sp, #56]	; 0x38
   13eac:	str	r3, [sp, #60]	; 0x3c
   13eb0:	str	r3, [sp, #68]	; 0x44
   13eb4:	str	r3, [sp, #72]	; 0x48
   13eb8:	b	13ab4 <__assert_fail@plt+0x2a70>
   13ebc:	mov	r2, #1
   13ec0:	mov	r3, #0
   13ec4:	mov	r4, r3
   13ec8:	str	r2, [sp, #36]	; 0x24
   13ecc:	str	r2, [sp, #44]	; 0x2c
   13ed0:	str	r8, [sp, #56]	; 0x38
   13ed4:	str	r3, [sp, #68]	; 0x44
   13ed8:	b	13db0 <__assert_fail@plt+0x2d6c>
   13edc:	mov	r3, #1
   13ee0:	mov	r2, #0
   13ee4:	mov	r4, r2
   13ee8:	mov	r8, #2
   13eec:	str	r3, [sp, #36]	; 0x24
   13ef0:	str	r3, [sp, #40]	; 0x28
   13ef4:	str	r3, [sp, #44]	; 0x2c
   13ef8:	str	r2, [sp, #48]	; 0x30
   13efc:	str	r3, [sp, #56]	; 0x38
   13f00:	movw	r3, #35560	; 0x8ae8
   13f04:	movt	r3, #1
   13f08:	str	r3, [sp, #60]	; 0x3c
   13f0c:	str	r2, [sp, #68]	; 0x44
   13f10:	str	r2, [sp, #72]	; 0x48
   13f14:	b	13ab4 <__assert_fail@plt+0x2a70>
   13f18:	mov	r7, #0
   13f1c:	ldr	r3, [sp, #28]
   13f20:	cmn	r3, #1
   13f24:	beq	149fc <__assert_fail@plt+0x39b8>
   13f28:	ldr	r3, [sp, #28]
   13f2c:	subs	r2, r3, #1
   13f30:	movne	r2, #1
   13f34:	sub	r3, fp, #2
   13f38:	cmp	r2, #0
   13f3c:	clz	r3, r3
   13f40:	lsr	r3, r3, #5
   13f44:	bne	13f50 <__assert_fail@plt+0x2f0c>
   13f48:	cmp	r9, #0
   13f4c:	beq	1475c <__assert_fail@plt+0x3718>
   13f50:	mov	r6, #0
   13f54:	ldr	r2, [sp, #40]	; 0x28
   13f58:	eor	r2, r2, #1
   13f5c:	orrs	r3, r3, r2
   13f60:	bne	14138 <__assert_fail@plt+0x30f4>
   13f64:	ldr	r2, [sp, #160]	; 0xa0
   13f68:	cmp	r2, #0
   13f6c:	beq	13f8c <__assert_fail@plt+0x2f48>
   13f70:	ldr	r0, [sp, #160]	; 0xa0
   13f74:	ubfx	r1, r5, #5, #8
   13f78:	and	r2, r5, #31
   13f7c:	ldr	r1, [r0, r1, lsl #2]
   13f80:	lsr	r2, r1, r2
   13f84:	tst	r2, #1
   13f88:	bne	13f94 <__assert_fail@plt+0x2f50>
   13f8c:	cmp	r7, #0
   13f90:	beq	14204 <__assert_fail@plt+0x31c0>
   13f94:	ldr	r2, [sp, #44]	; 0x2c
   13f98:	sub	r3, fp, #2
   13f9c:	clz	r3, r3
   13fa0:	lsr	r3, r3, #5
   13fa4:	cmp	r2, #0
   13fa8:	bne	14d50 <__assert_fail@plt+0x3d0c>
   13fac:	ldr	r2, [sp, #48]	; 0x30
   13fb0:	eor	r2, r2, #1
   13fb4:	ands	r3, r3, r2
   13fb8:	beq	13ff0 <__assert_fail@plt+0x2fac>
   13fbc:	cmp	sl, r4
   13fc0:	str	r3, [sp, #48]	; 0x30
   13fc4:	movhi	r2, #39	; 0x27
   13fc8:	strbhi	r2, [r8, r4]
   13fcc:	add	r2, r4, #1
   13fd0:	cmp	sl, r2
   13fd4:	movhi	r1, #36	; 0x24
   13fd8:	strbhi	r1, [r8, r2]
   13fdc:	add	r2, r4, #2
   13fe0:	add	r4, r4, #3
   13fe4:	cmp	sl, r2
   13fe8:	movhi	r1, #39	; 0x27
   13fec:	strbhi	r1, [r8, r2]
   13ff0:	cmp	r4, sl
   13ff4:	add	r9, r9, #1
   13ff8:	movcc	r3, #92	; 0x5c
   13ffc:	strbcc	r3, [r8, r4]
   14000:	add	r4, r4, #1
   14004:	cmp	r4, sl
   14008:	ldr	r3, [sp, #36]	; 0x24
   1400c:	strbcc	r5, [r8, r4]
   14010:	cmp	r6, #0
   14014:	add	r4, r4, #1
   14018:	moveq	r3, #0
   1401c:	str	r3, [sp, #36]	; 0x24
   14020:	ldr	r3, [sp, #28]
   14024:	cmn	r3, #1
   14028:	bne	13ad0 <__assert_fail@plt+0x2a8c>
   1402c:	ldr	r3, [sp, #32]
   14030:	ldrb	r6, [r3, r9]
   14034:	adds	r6, r6, #0
   14038:	movne	r6, #1
   1403c:	cmp	r6, #0
   14040:	bne	13ae4 <__assert_fail@plt+0x2aa0>
   14044:	str	fp, [sp, #152]	; 0x98
   14048:	mov	fp, r8
   1404c:	cmp	r4, #0
   14050:	ldr	r1, [sp, #44]	; 0x2c
   14054:	movne	r3, #0
   14058:	ldr	r8, [sp, #152]	; 0x98
   1405c:	sub	r2, r8, #2
   14060:	clz	r2, r2
   14064:	lsr	r2, r2, #5
   14068:	andeq	r3, r2, r1
   1406c:	cmp	r3, #0
   14070:	bne	1512c <__assert_fail@plt+0x40e8>
   14074:	eor	r3, r1, #1
   14078:	ands	r2, r2, r3
   1407c:	beq	15058 <__assert_fail@plt+0x4014>
   14080:	ldr	r3, [sp, #68]	; 0x44
   14084:	cmp	r3, #0
   14088:	beq	1505c <__assert_fail@plt+0x4018>
   1408c:	ldr	r3, [sp, #36]	; 0x24
   14090:	cmp	r3, #0
   14094:	bne	150e8 <__assert_fail@plt+0x40a4>
   14098:	ldr	r3, [sp, #72]	; 0x48
   1409c:	adds	r3, r3, #0
   140a0:	movne	r3, #1
   140a4:	cmp	sl, #0
   140a8:	movne	r3, #0
   140ac:	cmp	r3, #0
   140b0:	ldreq	r2, [sp, #68]	; 0x44
   140b4:	beq	1505c <__assert_fail@plt+0x4018>
   140b8:	ldr	r2, [sp, #72]	; 0x48
   140bc:	str	r3, [sp, #68]	; 0x44
   140c0:	movw	r3, #35560	; 0x8ae8
   140c4:	movt	r3, #1
   140c8:	mov	r1, #39	; 0x27
   140cc:	mov	r4, #1
   140d0:	ldr	sl, [sp, #72]	; 0x48
   140d4:	mov	r8, #2
   140d8:	str	r3, [sp, #60]	; 0x3c
   140dc:	mov	r3, #0
   140e0:	strb	r1, [fp]
   140e4:	str	r3, [sp, #44]	; 0x2c
   140e8:	str	r4, [sp, #56]	; 0x38
   140ec:	str	r2, [sp, #72]	; 0x48
   140f0:	b	13ab4 <__assert_fail@plt+0x2a70>
   140f4:	mov	r7, #0
   140f8:	cmp	fp, #2
   140fc:	beq	149dc <__assert_fail@plt+0x3998>
   14100:	ldr	r2, [sp, #40]	; 0x28
   14104:	ldr	r3, [sp, #56]	; 0x38
   14108:	ldr	r1, [sp, #44]	; 0x2c
   1410c:	cmp	r3, #0
   14110:	moveq	r3, #0
   14114:	andne	r3, r2, r1
   14118:	cmp	r3, #0
   1411c:	moveq	r5, #92	; 0x5c
   14120:	moveq	r3, r5
   14124:	bne	149e8 <__assert_fail@plt+0x39a4>
   14128:	ldr	r2, [sp, #40]	; 0x28
   1412c:	cmp	r2, #0
   14130:	bne	14e24 <__assert_fail@plt+0x3de0>
   14134:	mov	r6, #0
   14138:	ldr	r3, [sp, #44]	; 0x2c
   1413c:	cmp	r3, #0
   14140:	beq	149d4 <__assert_fail@plt+0x3990>
   14144:	mov	r3, #0
   14148:	b	13f64 <__assert_fail@plt+0x2f20>
   1414c:	mov	r7, #0
   14150:	cmp	fp, #2
   14154:	beq	14a4c <__assert_fail@plt+0x3a08>
   14158:	cmp	fp, #5
   1415c:	beq	14a10 <__assert_fail@plt+0x39cc>
   14160:	sub	r3, fp, #2
   14164:	mov	r6, #0
   14168:	clz	r3, r3
   1416c:	mov	r5, #63	; 0x3f
   14170:	lsr	r3, r3, #5
   14174:	b	13f54 <__assert_fail@plt+0x2f10>
   14178:	mov	r7, #0
   1417c:	cmp	fp, #2
   14180:	movne	r3, #0
   14184:	movne	r5, #39	; 0x27
   14188:	strne	r6, [sp, #68]	; 0x44
   1418c:	bne	13f54 <__assert_fail@plt+0x2f10>
   14190:	ldr	r3, [sp, #44]	; 0x2c
   14194:	cmp	r3, #0
   14198:	bne	14e54 <__assert_fail@plt+0x3e10>
   1419c:	ldr	r3, [sp, #72]	; 0x48
   141a0:	cmp	sl, #0
   141a4:	clz	r3, r3
   141a8:	lsr	r3, r3, #5
   141ac:	moveq	r3, #0
   141b0:	cmp	r3, #0
   141b4:	bne	14d80 <__assert_fail@plt+0x3d3c>
   141b8:	cmp	sl, r4
   141bc:	movhi	r3, #39	; 0x27
   141c0:	strbhi	r3, [r8, r4]
   141c4:	add	r3, r4, #1
   141c8:	cmp	sl, r3
   141cc:	movhi	r2, #92	; 0x5c
   141d0:	strbhi	r2, [r8, r3]
   141d4:	add	r3, r4, #2
   141d8:	cmp	sl, r3
   141dc:	bls	141e8 <__assert_fail@plt+0x31a4>
   141e0:	mov	r2, #39	; 0x27
   141e4:	strb	r2, [r8, r3]
   141e8:	mov	r3, #0
   141ec:	cmp	r7, #0
   141f0:	add	r4, r4, #3
   141f4:	mov	r5, #39	; 0x27
   141f8:	str	r3, [sp, #48]	; 0x30
   141fc:	str	r6, [sp, #68]	; 0x44
   14200:	bne	13f94 <__assert_fail@plt+0x2f50>
   14204:	ldr	r2, [sp, #48]	; 0x30
   14208:	eor	r3, r3, #1
   1420c:	add	r9, r9, #1
   14210:	and	r3, r3, r2
   14214:	uxtb	r3, r3
   14218:	cmp	r3, #0
   1421c:	beq	14004 <__assert_fail@plt+0x2fc0>
   14220:	cmp	sl, r4
   14224:	movhi	r3, #39	; 0x27
   14228:	strbhi	r3, [r8, r4]
   1422c:	add	r3, r4, #1
   14230:	add	r4, r4, #2
   14234:	cmp	sl, r3
   14238:	movhi	r2, #39	; 0x27
   1423c:	strbhi	r2, [r8, r3]
   14240:	mov	r3, #0
   14244:	str	r3, [sp, #48]	; 0x30
   14248:	b	14004 <__assert_fail@plt+0x2fc0>
   1424c:	mov	r3, #118	; 0x76
   14250:	b	14128 <__assert_fail@plt+0x30e4>
   14254:	mov	r3, #116	; 0x74
   14258:	ldr	r2, [sp, #44]	; 0x2c
   1425c:	cmp	fp, #2
   14260:	movne	r2, #0
   14264:	andeq	r2, r2, #1
   14268:	cmp	r2, #0
   1426c:	beq	14128 <__assert_fail@plt+0x30e4>
   14270:	mov	fp, r8
   14274:	mov	r8, #2
   14278:	ldr	r3, [sp, #40]	; 0x28
   1427c:	cmp	r3, #0
   14280:	movne	r8, #4
   14284:	mov	lr, #0
   14288:	mov	r0, fp
   1428c:	ldr	r2, [sp, #32]
   14290:	ldr	r3, [sp, #156]	; 0x9c
   14294:	ldr	r1, [sp, #164]	; 0xa4
   14298:	bic	ip, r3, #2
   1429c:	ldr	r3, [sp, #28]
   142a0:	stm	sp, {r8, ip, lr}
   142a4:	ldr	ip, [sp, #168]	; 0xa8
   142a8:	str	r1, [sp, #12]
   142ac:	mov	r1, sl
   142b0:	str	ip, [sp, #16]
   142b4:	bl	139cc <__assert_fail@plt+0x2988>
   142b8:	mov	r4, r0
   142bc:	mov	r0, r4
   142c0:	add	sp, sp, #116	; 0x74
   142c4:	ldrd	r4, [sp]
   142c8:	ldrd	r6, [sp, #8]
   142cc:	ldrd	r8, [sp, #16]
   142d0:	ldrd	sl, [sp, #24]
   142d4:	add	sp, sp, #32
   142d8:	pop	{pc}		; (ldr pc, [sp], #4)
   142dc:	mov	r5, #102	; 0x66
   142e0:	ldr	r2, [sp, #44]	; 0x2c
   142e4:	sub	r3, fp, #2
   142e8:	clz	r3, r3
   142ec:	lsr	r3, r3, #5
   142f0:	cmp	r2, #0
   142f4:	bne	14d50 <__assert_fail@plt+0x3d0c>
   142f8:	mov	r6, r2
   142fc:	b	13ff0 <__assert_fail@plt+0x2fac>
   14300:	mov	r5, #110	; 0x6e
   14304:	mov	r6, #0
   14308:	b	13f94 <__assert_fail@plt+0x2f50>
   1430c:	mov	r5, #98	; 0x62
   14310:	b	142e0 <__assert_fail@plt+0x329c>
   14314:	mov	r5, #97	; 0x61
   14318:	b	142e0 <__assert_fail@plt+0x329c>
   1431c:	mov	r7, #0
   14320:	mov	r6, #0
   14324:	b	14144 <__assert_fail@plt+0x3100>
   14328:	mov	r5, #114	; 0x72
   1432c:	b	14304 <__assert_fail@plt+0x32c0>
   14330:	ldr	r3, [sp, #44]	; 0x2c
   14334:	cmp	r3, #0
   14338:	bne	150c8 <__assert_fail@plt+0x4084>
   1433c:	mov	r7, r3
   14340:	ldr	r3, [sp, #48]	; 0x30
   14344:	sub	r2, fp, #2
   14348:	clz	r2, r2
   1434c:	lsr	r2, r2, #5
   14350:	eor	r3, r3, #1
   14354:	ands	r3, r2, r3
   14358:	beq	14d6c <__assert_fail@plt+0x3d28>
   1435c:	cmp	sl, r4
   14360:	movhi	r1, #39	; 0x27
   14364:	strbhi	r1, [r8, r4]
   14368:	add	r1, r4, #1
   1436c:	cmp	sl, r1
   14370:	movhi	r0, #36	; 0x24
   14374:	strbhi	r0, [r8, r1]
   14378:	add	r1, r4, #2
   1437c:	cmp	sl, r1
   14380:	movhi	r0, #39	; 0x27
   14384:	strbhi	r0, [r8, r1]
   14388:	add	r1, r4, #3
   1438c:	cmp	sl, r1
   14390:	bls	14dc4 <__assert_fail@plt+0x3d80>
   14394:	mov	r4, r1
   14398:	mov	r1, #92	; 0x5c
   1439c:	mov	r0, r4
   143a0:	str	r3, [sp, #48]	; 0x30
   143a4:	strb	r1, [r8, r4]
   143a8:	cmp	fp, #2
   143ac:	add	r4, r4, #1
   143b0:	beq	14e14 <__assert_fail@plt+0x3dd0>
   143b4:	ldr	r1, [sp, #28]
   143b8:	add	r3, r9, #1
   143bc:	cmp	r3, r1
   143c0:	bcs	143d8 <__assert_fail@plt+0x3394>
   143c4:	ldr	r1, [sp, #32]
   143c8:	ldrb	r3, [r1, r3]
   143cc:	sub	r3, r3, #48	; 0x30
   143d0:	cmp	r3, #9
   143d4:	bls	14e2c <__assert_fail@plt+0x3de8>
   143d8:	mov	r5, #48	; 0x30
   143dc:	ldr	r3, [sp, #40]	; 0x28
   143e0:	eor	r3, r3, #1
   143e4:	orrs	r2, r2, r3
   143e8:	mov	r3, r6
   143ec:	moveq	r6, r2
   143f0:	beq	13f64 <__assert_fail@plt+0x2f20>
   143f4:	mov	r6, #0
   143f8:	b	13f8c <__assert_fail@plt+0x2f48>
   143fc:	cmp	r9, #0
   14400:	mov	r2, r7
   14404:	bne	149a4 <__assert_fail@plt+0x3960>
   14408:	mov	r6, r7
   1440c:	mov	r3, r9
   14410:	mov	r7, r2
   14414:	b	13f54 <__assert_fail@plt+0x2f10>
   14418:	mov	r2, r7
   1441c:	mov	r6, r7
   14420:	mov	r3, #0
   14424:	mov	r7, r2
   14428:	mov	r5, #32
   1442c:	b	13f54 <__assert_fail@plt+0x2f10>
   14430:	mov	r6, r7
   14434:	b	14144 <__assert_fail@plt+0x3100>
   14438:	mov	r7, #0
   1443c:	ldr	r3, [sp, #64]	; 0x40
   14440:	cmp	r3, #1
   14444:	bne	14a64 <__assert_fail@plt+0x3a20>
   14448:	bl	10f0c <__ctype_b_loc@plt>
   1444c:	ldr	r2, [r0]
   14450:	sxth	r3, r5
   14454:	lsl	r3, r3, #1
   14458:	ldr	r1, [sp, #64]	; 0x40
   1445c:	ldrh	r3, [r2, r3]
   14460:	mov	ip, r1
   14464:	and	r3, r3, #16384	; 0x4000
   14468:	cmp	r3, #0
   1446c:	ldr	r3, [sp, #40]	; 0x28
   14470:	movne	r6, #1
   14474:	moveq	r6, #0
   14478:	movne	r2, #0
   1447c:	andeq	r2, r3, #1
   14480:	cmp	r2, #0
   14484:	bne	14dac <__assert_fail@plt+0x3d68>
   14488:	sub	r3, fp, #2
   1448c:	clz	r3, r3
   14490:	lsr	r3, r3, #5
   14494:	b	13f54 <__assert_fail@plt+0x2f10>
   14498:	cmp	r4, #0
   1449c:	bne	1513c <__assert_fail@plt+0x40f8>
   144a0:	str	r4, [sp, #40]	; 0x28
   144a4:	cmp	sl, #0
   144a8:	bne	1516c <__assert_fail@plt+0x4128>
   144ac:	mov	r3, #1
   144b0:	movw	r2, #35560	; 0x8ae8
   144b4:	movt	r2, #1
   144b8:	mov	r4, r3
   144bc:	mov	r8, #2
   144c0:	str	r3, [sp, #36]	; 0x24
   144c4:	str	sl, [sp, #44]	; 0x2c
   144c8:	str	sl, [sp, #48]	; 0x30
   144cc:	str	r3, [sp, #56]	; 0x38
   144d0:	str	r2, [sp, #60]	; 0x3c
   144d4:	str	sl, [sp, #68]	; 0x44
   144d8:	str	sl, [sp, #72]	; 0x48
   144dc:	b	13ab4 <__assert_fail@plt+0x2a70>
   144e0:	ldr	r3, [sp, #32]
   144e4:	ldrb	r5, [r3, r9]
   144e8:	cmp	r5, #126	; 0x7e
   144ec:	ldrls	pc, [pc, r5, lsl #2]
   144f0:	b	1443c <__assert_fail@plt+0x33f8>
   144f4:	andeq	r4, r1, r8, lsl r7
   144f8:	andeq	r4, r1, ip, lsr r4
   144fc:	andeq	r4, r1, ip, lsr r4
   14500:	andeq	r4, r1, ip, lsr r4
   14504:	andeq	r4, r1, ip, lsr r4
   14508:	andeq	r4, r1, ip, lsr r4
   1450c:	andeq	r4, r1, ip, lsr r4
   14510:	andeq	r4, r1, r0, lsl r7
   14514:	andeq	r4, r1, r8, lsl #14
   14518:	andeq	r4, r1, r4, asr r2
   1451c:	andeq	r4, r1, r0, lsl #14
   14520:	andeq	r4, r1, ip, asr #4
   14524:	strdeq	r4, [r1], -r8
   14528:	strdeq	r4, [r1], -r0
   1452c:	andeq	r4, r1, ip, lsr r4
   14530:	andeq	r4, r1, ip, lsr r4
   14534:	andeq	r4, r1, ip, lsr r4
   14538:	andeq	r4, r1, ip, lsr r4
   1453c:	andeq	r4, r1, ip, lsr r4
   14540:	andeq	r4, r1, ip, lsr r4
   14544:	andeq	r4, r1, ip, lsr r4
   14548:	andeq	r4, r1, ip, lsr r4
   1454c:	andeq	r4, r1, ip, lsr r4
   14550:	andeq	r4, r1, ip, lsr r4
   14554:	andeq	r4, r1, ip, lsr r4
   14558:	andeq	r4, r1, ip, lsr r4
   1455c:	andeq	r4, r1, ip, lsr r4
   14560:	andeq	r4, r1, ip, lsr r4
   14564:	andeq	r4, r1, ip, lsr r4
   14568:	andeq	r4, r1, ip, lsr r4
   1456c:	andeq	r4, r1, ip, lsr r4
   14570:	andeq	r4, r1, ip, lsr r4
   14574:	andeq	r4, r1, ip, ror #14
   14578:	andeq	r4, r1, ip, asr #14
   1457c:	andeq	r4, r1, ip, asr #14
   14580:	andeq	r4, r1, ip, lsr r7
   14584:	andeq	r4, r1, ip, asr #14
   14588:	andeq	r4, r1, r8, lsl #9
   1458c:	andeq	r4, r1, ip, asr #14
   14590:	andeq	r4, r1, ip, ror r1
   14594:	andeq	r4, r1, ip, asr #14
   14598:	andeq	r4, r1, ip, asr #14
   1459c:	andeq	r4, r1, ip, asr #14
   145a0:	andeq	r4, r1, r8, lsl #9
   145a4:	andeq	r4, r1, r8, lsl #9
   145a8:	andeq	r4, r1, r8, lsl #9
   145ac:	andeq	r4, r1, r8, lsl #9
   145b0:	andeq	r4, r1, r8, lsl #9
   145b4:	andeq	r4, r1, r8, lsl #9
   145b8:	andeq	r4, r1, r8, lsl #9
   145bc:	andeq	r4, r1, r8, lsl #9
   145c0:	andeq	r4, r1, r8, lsl #9
   145c4:	andeq	r4, r1, r8, lsl #9
   145c8:	andeq	r4, r1, r8, lsl #9
   145cc:	andeq	r4, r1, r8, lsl #9
   145d0:	andeq	r4, r1, r8, lsl #9
   145d4:	andeq	r4, r1, r8, lsl #9
   145d8:	andeq	r4, r1, r8, lsl #9
   145dc:	andeq	r4, r1, r8, lsl #9
   145e0:	andeq	r4, r1, ip, asr #14
   145e4:	andeq	r4, r1, ip, asr #14
   145e8:	andeq	r4, r1, ip, asr #14
   145ec:	andeq	r4, r1, ip, asr #14
   145f0:	andeq	r4, r1, r0, asr r1
   145f4:	andeq	r4, r1, ip, lsr r4
   145f8:	andeq	r4, r1, r8, lsl #9
   145fc:	andeq	r4, r1, r8, lsl #9
   14600:	andeq	r4, r1, r8, lsl #9
   14604:	andeq	r4, r1, r8, lsl #9
   14608:	andeq	r4, r1, r8, lsl #9
   1460c:	andeq	r4, r1, r8, lsl #9
   14610:	andeq	r4, r1, r8, lsl #9
   14614:	andeq	r4, r1, r8, lsl #9
   14618:	andeq	r4, r1, r8, lsl #9
   1461c:	andeq	r4, r1, r8, lsl #9
   14620:	andeq	r4, r1, r8, lsl #9
   14624:	andeq	r4, r1, r8, lsl #9
   14628:	andeq	r4, r1, r8, lsl #9
   1462c:	andeq	r4, r1, r8, lsl #9
   14630:	andeq	r4, r1, r8, lsl #9
   14634:	andeq	r4, r1, r8, lsl #9
   14638:	andeq	r4, r1, r8, lsl #9
   1463c:	andeq	r4, r1, r8, lsl #9
   14640:	andeq	r4, r1, r8, lsl #9
   14644:	andeq	r4, r1, r8, lsl #9
   14648:	andeq	r4, r1, r8, lsl #9
   1464c:	andeq	r4, r1, r8, lsl #9
   14650:	andeq	r4, r1, r8, lsl #9
   14654:	andeq	r4, r1, r8, lsl #9
   14658:	andeq	r4, r1, r8, lsl #9
   1465c:	andeq	r4, r1, r8, lsl #9
   14660:	andeq	r4, r1, ip, asr #14
   14664:	strdeq	r4, [r1], -r8
   14668:	andeq	r4, r1, r8, lsl #9
   1466c:	andeq	r4, r1, ip, asr #14
   14670:	andeq	r4, r1, r8, lsl #9
   14674:	andeq	r4, r1, ip, asr #14
   14678:	andeq	r4, r1, r8, lsl #9
   1467c:	andeq	r4, r1, r8, lsl #9
   14680:	andeq	r4, r1, r8, lsl #9
   14684:	andeq	r4, r1, r8, lsl #9
   14688:	andeq	r4, r1, r8, lsl #9
   1468c:	andeq	r4, r1, r8, lsl #9
   14690:	andeq	r4, r1, r8, lsl #9
   14694:	andeq	r4, r1, r8, lsl #9
   14698:	andeq	r4, r1, r8, lsl #9
   1469c:	andeq	r4, r1, r8, lsl #9
   146a0:	andeq	r4, r1, r8, lsl #9
   146a4:	andeq	r4, r1, r8, lsl #9
   146a8:	andeq	r4, r1, r8, lsl #9
   146ac:	andeq	r4, r1, r8, lsl #9
   146b0:	andeq	r4, r1, r8, lsl #9
   146b4:	andeq	r4, r1, r8, lsl #9
   146b8:	andeq	r4, r1, r8, lsl #9
   146bc:	andeq	r4, r1, r8, lsl #9
   146c0:	andeq	r4, r1, r8, lsl #9
   146c4:	andeq	r4, r1, r8, lsl #9
   146c8:	andeq	r4, r1, r8, lsl #9
   146cc:	andeq	r4, r1, r8, lsl #9
   146d0:	andeq	r4, r1, r8, lsl #9
   146d4:	andeq	r4, r1, r8, lsl #9
   146d8:	andeq	r4, r1, r8, lsl #9
   146dc:	andeq	r4, r1, r8, lsl #9
   146e0:	andeq	r3, r1, ip, lsl pc
   146e4:	andeq	r4, r1, ip, asr #14
   146e8:	andeq	r3, r1, ip, lsl pc
   146ec:	andeq	r4, r1, ip, lsr r7
   146f0:	mov	r3, #114	; 0x72
   146f4:	b	14258 <__assert_fail@plt+0x3214>
   146f8:	mov	r3, #102	; 0x66
   146fc:	b	14128 <__assert_fail@plt+0x30e4>
   14700:	mov	r3, #110	; 0x6e
   14704:	b	14258 <__assert_fail@plt+0x3214>
   14708:	mov	r3, #98	; 0x62
   1470c:	b	14128 <__assert_fail@plt+0x30e4>
   14710:	mov	r3, #97	; 0x61
   14714:	b	14128 <__assert_fail@plt+0x30e4>
   14718:	ldr	r3, [sp, #40]	; 0x28
   1471c:	cmp	r3, #0
   14720:	bne	14330 <__assert_fail@plt+0x32ec>
   14724:	ldr	r3, [sp, #156]	; 0x9c
   14728:	tst	r3, #1
   1472c:	addne	r9, r9, #1
   14730:	bne	13ac4 <__assert_fail@plt+0x2a80>
   14734:	ldr	r7, [sp, #40]	; 0x28
   14738:	b	14134 <__assert_fail@plt+0x30f0>
   1473c:	sub	r3, fp, #2
   14740:	clz	r3, r3
   14744:	lsr	r3, r3, #5
   14748:	b	13f48 <__assert_fail@plt+0x2f04>
   1474c:	sub	r3, fp, #2
   14750:	mov	r6, #0
   14754:	clz	r3, r3
   14758:	lsr	r3, r3, #5
   1475c:	ldr	r2, [sp, #44]	; 0x2c
   14760:	tst	r2, r3
   14764:	beq	13f54 <__assert_fail@plt+0x2f10>
   14768:	b	14270 <__assert_fail@plt+0x322c>
   1476c:	sub	r3, fp, #2
   14770:	clz	r3, r3
   14774:	lsr	r3, r3, #5
   14778:	b	1475c <__assert_fail@plt+0x3718>
   1477c:	ldr	r3, [sp, #52]	; 0x34
   14780:	ldrb	r5, [r3]
   14784:	cmp	r5, #126	; 0x7e
   14788:	ldrls	pc, [pc, r5, lsl #2]
   1478c:	b	14438 <__assert_fail@plt+0x33f4>
   14790:	andeq	r4, r1, r0, lsr r3
   14794:	andeq	r4, r1, r8, lsr r4
   14798:	andeq	r4, r1, r8, lsr r4
   1479c:	andeq	r4, r1, r8, lsr r4
   147a0:	andeq	r4, r1, r8, lsr r4
   147a4:	andeq	r4, r1, r8, lsr r4
   147a8:	andeq	r4, r1, r8, lsr r4
   147ac:	andeq	r4, r1, r4, lsl r3
   147b0:	andeq	r4, r1, ip, lsl #6
   147b4:	andeq	r4, r1, r8, asr #19
   147b8:	andeq	r4, r1, r0, lsl #6
   147bc:			; <UNDEFINED> instruction: 0x000149bc
   147c0:	ldrdeq	r4, [r1], -ip
   147c4:	andeq	r4, r1, r8, lsr #6
   147c8:	andeq	r4, r1, r8, lsr r4
   147cc:	andeq	r4, r1, r8, lsr r4
   147d0:	andeq	r4, r1, r8, lsr r4
   147d4:	andeq	r4, r1, r8, lsr r4
   147d8:	andeq	r4, r1, r8, lsr r4
   147dc:	andeq	r4, r1, r8, lsr r4
   147e0:	andeq	r4, r1, r8, lsr r4
   147e4:	andeq	r4, r1, r8, lsr r4
   147e8:	andeq	r4, r1, r8, lsr r4
   147ec:	andeq	r4, r1, r8, lsr r4
   147f0:	andeq	r4, r1, r8, lsr r4
   147f4:	andeq	r4, r1, r8, lsr r4
   147f8:	andeq	r4, r1, r8, lsr r4
   147fc:	andeq	r4, r1, r8, lsr r4
   14800:	andeq	r4, r1, r8, lsr r4
   14804:	andeq	r4, r1, r8, lsr r4
   14808:	andeq	r4, r1, r8, lsr r4
   1480c:	andeq	r4, r1, r8, lsr r4
   14810:			; <UNDEFINED> instruction: 0x000149b4
   14814:	andeq	r4, r1, ip, lsl r3
   14818:	andeq	r4, r1, ip, lsl r3
   1481c:	muleq	r1, r8, r9
   14820:	andeq	r4, r1, ip, lsl r3
   14824:	andeq	r4, r1, ip, lsl #19
   14828:	andeq	r4, r1, ip, lsl r3
   1482c:	andeq	r4, r1, r8, ror r1
   14830:	andeq	r4, r1, ip, lsl r3
   14834:	andeq	r4, r1, ip, lsl r3
   14838:	andeq	r4, r1, ip, lsl r3
   1483c:	andeq	r4, r1, ip, lsl #19
   14840:	andeq	r4, r1, ip, lsl #19
   14844:	andeq	r4, r1, ip, lsl #19
   14848:	andeq	r4, r1, ip, lsl #19
   1484c:	andeq	r4, r1, ip, lsl #19
   14850:	andeq	r4, r1, ip, lsl #19
   14854:	andeq	r4, r1, ip, lsl #19
   14858:	andeq	r4, r1, ip, lsl #19
   1485c:	andeq	r4, r1, ip, lsl #19
   14860:	andeq	r4, r1, ip, lsl #19
   14864:	andeq	r4, r1, ip, lsl #19
   14868:	andeq	r4, r1, ip, lsl #19
   1486c:	andeq	r4, r1, ip, lsl #19
   14870:	andeq	r4, r1, ip, lsl #19
   14874:	andeq	r4, r1, ip, lsl #19
   14878:	andeq	r4, r1, ip, lsl #19
   1487c:	andeq	r4, r1, ip, lsl r3
   14880:	andeq	r4, r1, ip, lsl r3
   14884:	andeq	r4, r1, ip, lsl r3
   14888:	andeq	r4, r1, ip, lsl r3
   1488c:	andeq	r4, r1, ip, asr #2
   14890:	andeq	r4, r1, r8, lsr r4
   14894:	andeq	r4, r1, ip, lsl #19
   14898:	andeq	r4, r1, ip, lsl #19
   1489c:	andeq	r4, r1, ip, lsl #19
   148a0:	andeq	r4, r1, ip, lsl #19
   148a4:	andeq	r4, r1, ip, lsl #19
   148a8:	andeq	r4, r1, ip, lsl #19
   148ac:	andeq	r4, r1, ip, lsl #19
   148b0:	andeq	r4, r1, ip, lsl #19
   148b4:	andeq	r4, r1, ip, lsl #19
   148b8:	andeq	r4, r1, ip, lsl #19
   148bc:	andeq	r4, r1, ip, lsl #19
   148c0:	andeq	r4, r1, ip, lsl #19
   148c4:	andeq	r4, r1, ip, lsl #19
   148c8:	andeq	r4, r1, ip, lsl #19
   148cc:	andeq	r4, r1, ip, lsl #19
   148d0:	andeq	r4, r1, ip, lsl #19
   148d4:	andeq	r4, r1, ip, lsl #19
   148d8:	andeq	r4, r1, ip, lsl #19
   148dc:	andeq	r4, r1, ip, lsl #19
   148e0:	andeq	r4, r1, ip, lsl #19
   148e4:	andeq	r4, r1, ip, lsl #19
   148e8:	andeq	r4, r1, ip, lsl #19
   148ec:	andeq	r4, r1, ip, lsl #19
   148f0:	andeq	r4, r1, ip, lsl #19
   148f4:	andeq	r4, r1, ip, lsl #19
   148f8:	andeq	r4, r1, ip, lsl #19
   148fc:	andeq	r4, r1, ip, lsl r3
   14900:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14904:	andeq	r4, r1, ip, lsl #19
   14908:	andeq	r4, r1, ip, lsl r3
   1490c:	andeq	r4, r1, ip, lsl #19
   14910:	andeq	r4, r1, ip, lsl r3
   14914:	andeq	r4, r1, ip, lsl #19
   14918:	andeq	r4, r1, ip, lsl #19
   1491c:	andeq	r4, r1, ip, lsl #19
   14920:	andeq	r4, r1, ip, lsl #19
   14924:	andeq	r4, r1, ip, lsl #19
   14928:	andeq	r4, r1, ip, lsl #19
   1492c:	andeq	r4, r1, ip, lsl #19
   14930:	andeq	r4, r1, ip, lsl #19
   14934:	andeq	r4, r1, ip, lsl #19
   14938:	andeq	r4, r1, ip, lsl #19
   1493c:	andeq	r4, r1, ip, lsl #19
   14940:	andeq	r4, r1, ip, lsl #19
   14944:	andeq	r4, r1, ip, lsl #19
   14948:	andeq	r4, r1, ip, lsl #19
   1494c:	andeq	r4, r1, ip, lsl #19
   14950:	andeq	r4, r1, ip, lsl #19
   14954:	andeq	r4, r1, ip, lsl #19
   14958:	andeq	r4, r1, ip, lsl #19
   1495c:	andeq	r4, r1, ip, lsl #19
   14960:	andeq	r4, r1, ip, lsl #19
   14964:	andeq	r4, r1, ip, lsl #19
   14968:	andeq	r4, r1, ip, lsl #19
   1496c:	andeq	r4, r1, ip, lsl #19
   14970:	andeq	r4, r1, ip, lsl #19
   14974:	andeq	r4, r1, ip, lsl #19
   14978:	andeq	r4, r1, ip, lsl #19
   1497c:	andeq	r3, r1, r8, lsl pc
   14980:	andeq	r4, r1, ip, lsl r3
   14984:	andeq	r3, r1, r8, lsl pc
   14988:	muleq	r1, r8, r9
   1498c:	mov	r6, r7
   14990:	mov	r7, #0
   14994:	b	14144 <__assert_fail@plt+0x3100>
   14998:	cmp	r9, #0
   1499c:	mov	r2, #0
   149a0:	beq	14408 <__assert_fail@plt+0x33c4>
   149a4:	mov	r6, #0
   149a8:	mov	r7, r2
   149ac:	mov	r3, r6
   149b0:	b	13f64 <__assert_fail@plt+0x2f20>
   149b4:	mov	r2, #0
   149b8:	b	1441c <__assert_fail@plt+0x33d8>
   149bc:	mov	r7, #0
   149c0:	mov	r3, #118	; 0x76
   149c4:	b	14128 <__assert_fail@plt+0x30e4>
   149c8:	mov	r7, #0
   149cc:	mov	r3, #116	; 0x74
   149d0:	b	14258 <__assert_fail@plt+0x3214>
   149d4:	ldr	r3, [sp, #44]	; 0x2c
   149d8:	b	13f8c <__assert_fail@plt+0x2f48>
   149dc:	ldr	r3, [sp, #44]	; 0x2c
   149e0:	cmp	r3, #0
   149e4:	bne	14e54 <__assert_fail@plt+0x3e10>
   149e8:	add	r9, r9, #1
   149ec:	mov	r6, #0
   149f0:	ldr	r3, [sp, #48]	; 0x30
   149f4:	mov	r5, #92	; 0x5c
   149f8:	b	14218 <__assert_fail@plt+0x31d4>
   149fc:	ldr	r3, [sp, #32]
   14a00:	ldrb	r2, [r3, #1]
   14a04:	adds	r2, r2, #0
   14a08:	movne	r2, #1
   14a0c:	b	13f34 <__assert_fail@plt+0x2ef0>
   14a10:	ldr	r3, [sp, #156]	; 0x9c
   14a14:	ands	r3, r3, #4
   14a18:	beq	14a40 <__assert_fail@plt+0x39fc>
   14a1c:	ldr	r2, [sp, #28]
   14a20:	add	r3, r9, #2
   14a24:	cmp	r3, r2
   14a28:	bcs	14a3c <__assert_fail@plt+0x39f8>
   14a2c:	ldr	r2, [sp, #52]	; 0x34
   14a30:	ldrb	r5, [r2, #1]
   14a34:	cmp	r5, #63	; 0x3f
   14a38:	beq	14eb8 <__assert_fail@plt+0x3e74>
   14a3c:	mov	r3, #0
   14a40:	mov	r5, #63	; 0x3f
   14a44:	mov	r6, r3
   14a48:	b	13f54 <__assert_fail@plt+0x2f10>
   14a4c:	ldr	r3, [sp, #44]	; 0x2c
   14a50:	cmp	r3, #0
   14a54:	bne	14e54 <__assert_fail@plt+0x3e10>
   14a58:	mov	r6, r3
   14a5c:	mov	r5, #63	; 0x3f
   14a60:	b	13f8c <__assert_fail@plt+0x2f48>
   14a64:	ldr	r1, [sp, #28]
   14a68:	mov	r2, #0
   14a6c:	mov	r3, #0
   14a70:	strd	r2, [sp, #104]	; 0x68
   14a74:	cmn	r1, #1
   14a78:	bne	14a88 <__assert_fail@plt+0x3a44>
   14a7c:	ldr	r0, [sp, #32]
   14a80:	bl	10f30 <strlen@plt>
   14a84:	str	r0, [sp, #28]
   14a88:	str	r8, [sp, #76]	; 0x4c
   14a8c:	mov	r3, #0
   14a90:	str	sl, [sp, #80]	; 0x50
   14a94:	ldr	sl, [sp, #32]
   14a98:	str	r5, [sp, #84]	; 0x54
   14a9c:	mov	r5, r3
   14aa0:	ldr	r8, [sp, #44]	; 0x2c
   14aa4:	str	r7, [sp, #88]	; 0x58
   14aa8:	str	r4, [sp, #92]	; 0x5c
   14aac:	ldr	r2, [sp, #28]
   14ab0:	add	r4, r9, r5
   14ab4:	add	r3, sp, #104	; 0x68
   14ab8:	add	r7, sl, r4
   14abc:	add	r0, sp, #100	; 0x64
   14ac0:	mov	r1, r7
   14ac4:	sub	r2, r2, r4
   14ac8:	bl	179c4 <__assert_fail@plt+0x6980>
   14acc:	subs	r1, r0, #0
   14ad0:	beq	14b1c <__assert_fail@plt+0x3ad8>
   14ad4:	cmn	r1, #1
   14ad8:	beq	14e94 <__assert_fail@plt+0x3e50>
   14adc:	cmn	r1, #2
   14ae0:	beq	14fb4 <__assert_fail@plt+0x3f70>
   14ae4:	cmp	fp, #2
   14ae8:	movne	r3, #0
   14aec:	andeq	r3, r8, #1
   14af0:	cmp	r3, #0
   14af4:	bne	14c80 <__assert_fail@plt+0x3c3c>
   14af8:	ldr	r0, [sp, #100]	; 0x64
   14afc:	add	r5, r5, r1
   14b00:	bl	10e64 <iswprint@plt>
   14b04:	cmp	r0, #0
   14b08:	add	r0, sp, #104	; 0x68
   14b0c:	moveq	r6, #0
   14b10:	bl	10e10 <mbsinit@plt>
   14b14:	cmp	r0, #0
   14b18:	beq	14aac <__assert_fail@plt+0x3a68>
   14b1c:	ldr	r3, [sp, #40]	; 0x28
   14b20:	mov	ip, r5
   14b24:	eor	r2, r6, #1
   14b28:	ldr	r8, [sp, #76]	; 0x4c
   14b2c:	ldr	sl, [sp, #80]	; 0x50
   14b30:	and	r2, r2, r3
   14b34:	ldr	r5, [sp, #84]	; 0x54
   14b38:	ldr	r7, [sp, #88]	; 0x58
   14b3c:	ldr	r4, [sp, #92]	; 0x5c
   14b40:	cmp	ip, #1
   14b44:	bls	14480 <__assert_fail@plt+0x343c>
   14b48:	add	r1, ip, r9
   14b4c:	mov	r0, #39	; 0x27
   14b50:	ldr	lr, [sp, #52]	; 0x34
   14b54:	mov	ip, #0
   14b58:	str	r6, [sp, #52]	; 0x34
   14b5c:	ldr	r6, [sp, #48]	; 0x30
   14b60:	b	14c1c <__assert_fail@plt+0x3bd8>
   14b64:	ldr	ip, [sp, #44]	; 0x2c
   14b68:	sub	r3, fp, #2
   14b6c:	clz	r3, r3
   14b70:	lsr	r3, r3, #5
   14b74:	cmp	ip, #0
   14b78:	bne	14d8c <__assert_fail@plt+0x3d48>
   14b7c:	eor	ip, r6, #1
   14b80:	ands	r3, r3, ip
   14b84:	beq	14bb4 <__assert_fail@plt+0x3b70>
   14b88:	cmp	sl, r4
   14b8c:	add	ip, r4, #1
   14b90:	strbhi	r0, [r8, r4]
   14b94:	cmp	sl, ip
   14b98:	movhi	r6, #36	; 0x24
   14b9c:	strbhi	r6, [r8, ip]
   14ba0:	add	ip, r4, #2
   14ba4:	mov	r6, r3
   14ba8:	cmp	sl, ip
   14bac:	add	r4, r4, #3
   14bb0:	strbhi	r0, [r8, ip]
   14bb4:	cmp	sl, r4
   14bb8:	movhi	r3, #92	; 0x5c
   14bbc:	strbhi	r3, [r8, r4]
   14bc0:	add	r3, r4, #1
   14bc4:	cmp	sl, r3
   14bc8:	bls	14bd8 <__assert_fail@plt+0x3b94>
   14bcc:	lsr	ip, r5, #6
   14bd0:	add	ip, ip, #48	; 0x30
   14bd4:	strb	ip, [r8, r3]
   14bd8:	add	r3, r4, #2
   14bdc:	cmp	sl, r3
   14be0:	bls	14bf0 <__assert_fail@plt+0x3bac>
   14be4:	ubfx	ip, r5, #3, #3
   14be8:	add	ip, ip, #48	; 0x30
   14bec:	strb	ip, [r8, r3]
   14bf0:	add	r9, r9, #1
   14bf4:	and	r5, r5, #7
   14bf8:	cmp	r9, r1
   14bfc:	add	r5, r5, #48	; 0x30
   14c00:	add	r4, r4, #3
   14c04:	bcs	14db8 <__assert_fail@plt+0x3d74>
   14c08:	mov	ip, r2
   14c0c:	cmp	sl, r4
   14c10:	strbhi	r5, [r8, r4]
   14c14:	add	r4, r4, #1
   14c18:	ldrb	r5, [lr, #1]!
   14c1c:	cmp	r2, #0
   14c20:	bne	14b64 <__assert_fail@plt+0x3b20>
   14c24:	eor	r3, ip, #1
   14c28:	cmp	r7, #0
   14c2c:	and	r3, r3, r6
   14c30:	uxtb	r3, r3
   14c34:	beq	14c48 <__assert_fail@plt+0x3c04>
   14c38:	cmp	sl, r4
   14c3c:	movhi	r7, #92	; 0x5c
   14c40:	strbhi	r7, [r8, r4]
   14c44:	add	r4, r4, #1
   14c48:	add	r9, r9, #1
   14c4c:	cmp	r9, r1
   14c50:	bcs	14da0 <__assert_fail@plt+0x3d5c>
   14c54:	cmp	r3, #0
   14c58:	beq	14dd8 <__assert_fail@plt+0x3d94>
   14c5c:	cmp	sl, r4
   14c60:	add	r3, r4, #1
   14c64:	mov	r7, #0
   14c68:	strbhi	r0, [r8, r4]
   14c6c:	cmp	sl, r3
   14c70:	add	r4, r4, #2
   14c74:	mov	r6, r7
   14c78:	strbhi	r0, [r8, r3]
   14c7c:	b	14c0c <__assert_fail@plt+0x3bc8>
   14c80:	cmp	r1, #1
   14c84:	beq	14af8 <__assert_fail@plt+0x3ab4>
   14c88:	add	r2, r4, #1
   14c8c:	add	r3, sl, r1
   14c90:	add	r2, sl, r2
   14c94:	add	r4, r3, r4
   14c98:	ldrb	r3, [r2], #1
   14c9c:	sub	r3, r3, #91	; 0x5b
   14ca0:	cmp	r3, #33	; 0x21
   14ca4:	ldrls	pc, [pc, r3, lsl #2]
   14ca8:	b	14d34 <__assert_fail@plt+0x3cf0>
   14cac:	andeq	r4, r1, r0, asr #26
   14cb0:	andeq	r4, r1, r0, asr #26
   14cb4:	andeq	r4, r1, r4, lsr sp
   14cb8:	andeq	r4, r1, r0, asr #26
   14cbc:	andeq	r4, r1, r4, lsr sp
   14cc0:	andeq	r4, r1, r0, asr #26
   14cc4:	andeq	r4, r1, r4, lsr sp
   14cc8:	andeq	r4, r1, r4, lsr sp
   14ccc:	andeq	r4, r1, r4, lsr sp
   14cd0:	andeq	r4, r1, r4, lsr sp
   14cd4:	andeq	r4, r1, r4, lsr sp
   14cd8:	andeq	r4, r1, r4, lsr sp
   14cdc:	andeq	r4, r1, r4, lsr sp
   14ce0:	andeq	r4, r1, r4, lsr sp
   14ce4:	andeq	r4, r1, r4, lsr sp
   14ce8:	andeq	r4, r1, r4, lsr sp
   14cec:	andeq	r4, r1, r4, lsr sp
   14cf0:	andeq	r4, r1, r4, lsr sp
   14cf4:	andeq	r4, r1, r4, lsr sp
   14cf8:	andeq	r4, r1, r4, lsr sp
   14cfc:	andeq	r4, r1, r4, lsr sp
   14d00:	andeq	r4, r1, r4, lsr sp
   14d04:	andeq	r4, r1, r4, lsr sp
   14d08:	andeq	r4, r1, r4, lsr sp
   14d0c:	andeq	r4, r1, r4, lsr sp
   14d10:	andeq	r4, r1, r4, lsr sp
   14d14:	andeq	r4, r1, r4, lsr sp
   14d18:	andeq	r4, r1, r4, lsr sp
   14d1c:	andeq	r4, r1, r4, lsr sp
   14d20:	andeq	r4, r1, r4, lsr sp
   14d24:	andeq	r4, r1, r4, lsr sp
   14d28:	andeq	r4, r1, r4, lsr sp
   14d2c:	andeq	r4, r1, r4, lsr sp
   14d30:	andeq	r4, r1, r0, asr #26
   14d34:	cmp	r4, r2
   14d38:	bne	14c98 <__assert_fail@plt+0x3c54>
   14d3c:	b	14af8 <__assert_fail@plt+0x3ab4>
   14d40:	mov	r8, #2
   14d44:	ldr	fp, [sp, #76]	; 0x4c
   14d48:	ldr	sl, [sp, #80]	; 0x50
   14d4c:	b	14278 <__assert_fail@plt+0x3234>
   14d50:	ldr	r2, [sp, #40]	; 0x28
   14d54:	str	fp, [sp, #152]	; 0x98
   14d58:	mov	fp, r8
   14d5c:	ldr	r8, [sp, #152]	; 0x98
   14d60:	and	r2, r2, r3
   14d64:	str	r2, [sp, #40]	; 0x28
   14d68:	b	14278 <__assert_fail@plt+0x3234>
   14d6c:	cmp	sl, r4
   14d70:	movls	r0, r4
   14d74:	bls	143a8 <__assert_fail@plt+0x3364>
   14d78:	ldr	r3, [sp, #48]	; 0x30
   14d7c:	b	14398 <__assert_fail@plt+0x3354>
   14d80:	str	sl, [sp, #72]	; 0x48
   14d84:	ldr	sl, [sp, #44]	; 0x2c
   14d88:	b	141e8 <__assert_fail@plt+0x31a4>
   14d8c:	str	r3, [sp, #40]	; 0x28
   14d90:	str	fp, [sp, #152]	; 0x98
   14d94:	mov	fp, r8
   14d98:	ldr	r8, [sp, #152]	; 0x98
   14d9c:	b	14278 <__assert_fail@plt+0x3234>
   14da0:	str	r6, [sp, #48]	; 0x30
   14da4:	ldr	r6, [sp, #52]	; 0x34
   14da8:	b	14218 <__assert_fail@plt+0x31d4>
   14dac:	mov	r6, #0
   14db0:	ldr	r2, [sp, #40]	; 0x28
   14db4:	b	14b48 <__assert_fail@plt+0x3b04>
   14db8:	str	r6, [sp, #48]	; 0x30
   14dbc:	ldr	r6, [sp, #52]	; 0x34
   14dc0:	b	14004 <__assert_fail@plt+0x2fc0>
   14dc4:	add	r4, r4, #4
   14dc8:	mov	r6, #0
   14dcc:	str	r3, [sp, #48]	; 0x30
   14dd0:	mov	r5, #48	; 0x30
   14dd4:	b	13f8c <__assert_fail@plt+0x2f48>
   14dd8:	mov	r7, r3
   14ddc:	b	14c0c <__assert_fail@plt+0x3bc8>
   14de0:	mov	r3, #1
   14de4:	movw	r2, #35540	; 0x8ad4
   14de8:	movt	r2, #1
   14dec:	mov	r4, r3
   14df0:	str	r3, [sp, #36]	; 0x24
   14df4:	str	r3, [sp, #40]	; 0x28
   14df8:	str	sl, [sp, #44]	; 0x2c
   14dfc:	str	sl, [sp, #48]	; 0x30
   14e00:	str	r3, [sp, #56]	; 0x38
   14e04:	str	r2, [sp, #60]	; 0x3c
   14e08:	str	sl, [sp, #68]	; 0x44
   14e0c:	str	sl, [sp, #72]	; 0x48
   14e10:	b	13ab4 <__assert_fail@plt+0x2a70>
   14e14:	mov	r3, r6
   14e18:	mov	r5, #48	; 0x30
   14e1c:	mov	r6, #0
   14e20:	b	13f8c <__assert_fail@plt+0x2f48>
   14e24:	mov	r5, r3
   14e28:	b	14304 <__assert_fail@plt+0x32c0>
   14e2c:	cmp	sl, r4
   14e30:	mov	r5, #48	; 0x30
   14e34:	movhi	r3, #48	; 0x30
   14e38:	strbhi	r3, [r8, r4]
   14e3c:	add	r3, r0, #2
   14e40:	add	r4, r0, #3
   14e44:	cmp	sl, r3
   14e48:	movhi	r1, #48	; 0x30
   14e4c:	strbhi	r1, [r8, r3]
   14e50:	b	143dc <__assert_fail@plt+0x3398>
   14e54:	str	fp, [sp, #152]	; 0x98
   14e58:	mov	fp, r8
   14e5c:	ldr	r8, [sp, #152]	; 0x98
   14e60:	b	14278 <__assert_fail@plt+0x3234>
   14e64:	ldr	r3, [sp, #164]	; 0xa4
   14e68:	ldrb	r3, [r3]
   14e6c:	cmp	r3, #0
   14e70:	beq	13a84 <__assert_fail@plt+0x2a40>
   14e74:	ldr	r2, [sp, #164]	; 0xa4
   14e78:	cmp	sl, r4
   14e7c:	strbhi	r3, [fp, r4]
   14e80:	add	r4, r4, #1
   14e84:	ldrb	r3, [r2, #1]!
   14e88:	cmp	r3, #0
   14e8c:	bne	14e78 <__assert_fail@plt+0x3e34>
   14e90:	b	13a84 <__assert_fail@plt+0x2a40>
   14e94:	mov	ip, r5
   14e98:	mov	r6, #0
   14e9c:	ldr	r2, [sp, #40]	; 0x28
   14ea0:	ldr	r8, [sp, #76]	; 0x4c
   14ea4:	ldr	sl, [sp, #80]	; 0x50
   14ea8:	ldr	r5, [sp, #84]	; 0x54
   14eac:	ldr	r7, [sp, #88]	; 0x58
   14eb0:	ldr	r4, [sp, #92]	; 0x5c
   14eb4:	b	14b40 <__assert_fail@plt+0x3afc>
   14eb8:	ldr	r2, [sp, #32]
   14ebc:	ldrb	r1, [r2, r3]
   14ec0:	sub	r2, r1, #33	; 0x21
   14ec4:	cmp	r2, #29
   14ec8:	ldrls	pc, [pc, r2, lsl #2]
   14ecc:	b	14fa8 <__assert_fail@plt+0x3f64>
   14ed0:	andeq	r4, r1, r8, asr #30
   14ed4:	andeq	r4, r1, r8, lsr #31
   14ed8:	andeq	r4, r1, r8, lsr #31
   14edc:	andeq	r4, r1, r8, lsr #31
   14ee0:	andeq	r4, r1, r8, lsr #31
   14ee4:	andeq	r4, r1, r8, lsr #31
   14ee8:	andeq	r4, r1, r8, asr #30
   14eec:	andeq	r4, r1, r8, asr #30
   14ef0:	andeq	r4, r1, r8, asr #30
   14ef4:	andeq	r4, r1, r8, lsr #31
   14ef8:	andeq	r4, r1, r8, lsr #31
   14efc:	andeq	r4, r1, r8, lsr #31
   14f00:	andeq	r4, r1, r8, asr #30
   14f04:	andeq	r4, r1, r8, lsr #31
   14f08:	andeq	r4, r1, r8, asr #30
   14f0c:	andeq	r4, r1, r8, lsr #31
   14f10:	andeq	r4, r1, r8, lsr #31
   14f14:	andeq	r4, r1, r8, lsr #31
   14f18:	andeq	r4, r1, r8, lsr #31
   14f1c:	andeq	r4, r1, r8, lsr #31
   14f20:	andeq	r4, r1, r8, lsr #31
   14f24:	andeq	r4, r1, r8, lsr #31
   14f28:	andeq	r4, r1, r8, lsr #31
   14f2c:	andeq	r4, r1, r8, lsr #31
   14f30:	andeq	r4, r1, r8, lsr #31
   14f34:	andeq	r4, r1, r8, lsr #31
   14f38:	andeq	r4, r1, r8, lsr #31
   14f3c:	andeq	r4, r1, r8, asr #30
   14f40:	andeq	r4, r1, r8, asr #30
   14f44:	andeq	r4, r1, r8, asr #30
   14f48:	ldr	r2, [sp, #44]	; 0x2c
   14f4c:	cmp	r2, #0
   14f50:	bne	150ac <__assert_fail@plt+0x4068>
   14f54:	cmp	sl, r4
   14f58:	mov	r5, r1
   14f5c:	movhi	r2, #63	; 0x3f
   14f60:	mov	r9, r3
   14f64:	strbhi	r2, [r8, r4]
   14f68:	add	r2, r4, #1
   14f6c:	cmp	sl, r2
   14f70:	movhi	r0, #34	; 0x22
   14f74:	strbhi	r0, [r8, r2]
   14f78:	add	r2, r4, #2
   14f7c:	cmp	sl, r2
   14f80:	movhi	r0, #34	; 0x22
   14f84:	strbhi	r0, [r8, r2]
   14f88:	add	r2, r4, #3
   14f8c:	add	r4, r4, #4
   14f90:	cmp	sl, r2
   14f94:	movhi	r0, #63	; 0x3f
   14f98:	strbhi	r0, [r8, r2]
   14f9c:	mov	r2, #0
   14fa0:	mov	r6, r2
   14fa4:	b	143dc <__assert_fail@plt+0x3398>
   14fa8:	mov	r3, #0
   14fac:	mov	r6, r3
   14fb0:	b	13f54 <__assert_fail@plt+0x2f10>
   14fb4:	ldr	r0, [sp, #28]
   14fb8:	mov	r1, r4
   14fbc:	mov	r2, r7
   14fc0:	mov	r3, r5
   14fc4:	mov	ip, r5
   14fc8:	ldr	r8, [sp, #76]	; 0x4c
   14fcc:	ldr	sl, [sp, #80]	; 0x50
   14fd0:	cmp	r1, r0
   14fd4:	ldr	r5, [sp, #84]	; 0x54
   14fd8:	ldr	r7, [sp, #88]	; 0x58
   14fdc:	ldr	r4, [sp, #92]	; 0x5c
   14fe0:	bcs	15014 <__assert_fail@plt+0x3fd0>
   14fe4:	ldrb	r6, [r2]
   14fe8:	cmp	r6, #0
   14fec:	bne	15000 <__assert_fail@plt+0x3fbc>
   14ff0:	b	15134 <__assert_fail@plt+0x40f0>
   14ff4:	ldrb	r6, [r2, #1]!
   14ff8:	cmp	r6, #0
   14ffc:	beq	150bc <__assert_fail@plt+0x4078>
   15000:	add	r3, r3, #1
   15004:	add	r1, r9, r3
   15008:	cmp	r1, r0
   1500c:	bcc	14ff4 <__assert_fail@plt+0x3fb0>
   15010:	mov	ip, r3
   15014:	mov	r6, #0
   15018:	ldr	r2, [sp, #40]	; 0x28
   1501c:	b	14b40 <__assert_fail@plt+0x3afc>
   15020:	mov	r3, #1
   15024:	mov	r2, #0
   15028:	mov	r4, r2
   1502c:	str	r3, [sp, #36]	; 0x24
   15030:	str	r3, [sp, #40]	; 0x28
   15034:	str	r3, [sp, #44]	; 0x2c
   15038:	str	r2, [sp, #48]	; 0x30
   1503c:	str	r3, [sp, #56]	; 0x38
   15040:	movw	r3, #35540	; 0x8ad4
   15044:	movt	r3, #1
   15048:	str	r3, [sp, #60]	; 0x3c
   1504c:	str	r2, [sp, #68]	; 0x44
   15050:	str	r2, [sp, #72]	; 0x48
   15054:	b	13ab4 <__assert_fail@plt+0x2a70>
   15058:	mov	r2, r3
   1505c:	ldr	r3, [sp, #60]	; 0x3c
   15060:	cmp	r3, #0
   15064:	moveq	r2, #0
   15068:	andne	r2, r2, #1
   1506c:	cmp	r2, #0
   15070:	beq	1509c <__assert_fail@plt+0x4058>
   15074:	mov	r2, r3
   15078:	ldrb	r3, [r3]
   1507c:	cmp	r3, #0
   15080:	beq	1509c <__assert_fail@plt+0x4058>
   15084:	cmp	sl, r4
   15088:	strbhi	r3, [fp, r4]
   1508c:	add	r4, r4, #1
   15090:	ldrb	r3, [r2, #1]!
   15094:	cmp	r3, #0
   15098:	bne	15084 <__assert_fail@plt+0x4040>
   1509c:	cmp	sl, r4
   150a0:	movhi	r3, #0
   150a4:	strbhi	r3, [fp, r4]
   150a8:	b	142bc <__assert_fail@plt+0x3278>
   150ac:	str	fp, [sp, #152]	; 0x98
   150b0:	mov	fp, r8
   150b4:	ldr	r8, [sp, #152]	; 0x98
   150b8:	b	14284 <__assert_fail@plt+0x3240>
   150bc:	mov	ip, r3
   150c0:	ldr	r2, [sp, #40]	; 0x28
   150c4:	b	14b40 <__assert_fail@plt+0x3afc>
   150c8:	str	fp, [sp, #152]	; 0x98
   150cc:	mov	fp, r8
   150d0:	ldr	r8, [sp, #152]	; 0x98
   150d4:	sub	r3, r8, #2
   150d8:	clz	r3, r3
   150dc:	lsr	r3, r3, #5
   150e0:	str	r3, [sp, #40]	; 0x28
   150e4:	b	14278 <__assert_fail@plt+0x3234>
   150e8:	mov	ip, #5
   150ec:	ldr	r3, [sp, #28]
   150f0:	str	ip, [sp]
   150f4:	ldr	r2, [sp, #156]	; 0x9c
   150f8:	ldr	ip, [sp, #164]	; 0xa4
   150fc:	ldr	r0, [sp, #160]	; 0xa0
   15100:	str	r2, [sp, #4]
   15104:	ldr	r2, [sp, #32]
   15108:	ldr	r1, [sp, #72]	; 0x48
   1510c:	str	ip, [sp, #12]
   15110:	ldr	ip, [sp, #168]	; 0xa8
   15114:	str	r0, [sp, #8]
   15118:	mov	r0, fp
   1511c:	str	ip, [sp, #16]
   15120:	bl	139cc <__assert_fail@plt+0x2988>
   15124:	mov	r4, r0
   15128:	b	142bc <__assert_fail@plt+0x3278>
   1512c:	mov	r8, #2
   15130:	b	14278 <__assert_fail@plt+0x3234>
   15134:	ldr	r2, [sp, #40]	; 0x28
   15138:	b	14b40 <__assert_fail@plt+0x3afc>
   1513c:	mov	r3, #0
   15140:	mov	r2, #1
   15144:	mov	r4, r3
   15148:	strd	r2, [sp, #36]	; 0x24
   1514c:	strd	r2, [sp, #44]	; 0x2c
   15150:	str	r2, [sp, #56]	; 0x38
   15154:	str	r3, [sp, #68]	; 0x44
   15158:	str	r3, [sp, #72]	; 0x48
   1515c:	movw	r3, #35560	; 0x8ae8
   15160:	movt	r3, #1
   15164:	str	r3, [sp, #60]	; 0x3c
   15168:	b	13ab4 <__assert_fail@plt+0x2a70>
   1516c:	mov	r3, #0
   15170:	mov	r1, #1
   15174:	mov	r2, r3
   15178:	str	r1, [sp, #36]	; 0x24
   1517c:	str	r3, [sp, #48]	; 0x30
   15180:	str	sl, [sp, #72]	; 0x48
   15184:	b	140bc <__assert_fail@plt+0x3078>
   15188:	bl	1102c <abort@plt>
   1518c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15190:	mov	r4, r0
   15194:	mov	r5, r3
   15198:	strd	r6, [sp, #8]
   1519c:	movw	r7, #41244	; 0xa11c
   151a0:	movt	r7, #2
   151a4:	strd	r8, [sp, #16]
   151a8:	strd	sl, [sp, #24]
   151ac:	mov	sl, r1
   151b0:	mov	fp, r2
   151b4:	str	lr, [sp, #32]
   151b8:	sub	sp, sp, #60	; 0x3c
   151bc:	bl	10f48 <__errno_location@plt>
   151c0:	mov	r8, r0
   151c4:	cmn	r4, #-2147483647	; 0x80000001
   151c8:	ldr	r6, [r7]
   151cc:	movne	r0, #0
   151d0:	moveq	r0, #1
   151d4:	ldr	r3, [r8]
   151d8:	orrs	r0, r0, r4, lsr #31
   151dc:	str	r3, [sp, #28]
   151e0:	bne	15370 <__assert_fail@plt+0x432c>
   151e4:	ldr	r3, [r7, #4]
   151e8:	cmp	r3, r4
   151ec:	bgt	1524c <__assert_fail@plt+0x4208>
   151f0:	add	r1, r7, #8
   151f4:	sub	r2, r4, r3
   151f8:	str	r3, [sp, #52]	; 0x34
   151fc:	cmp	r6, r1
   15200:	add	r2, r2, #1
   15204:	beq	15348 <__assert_fail@plt+0x4304>
   15208:	mov	r1, #8
   1520c:	mov	r0, r6
   15210:	mvn	r3, #-2147483648	; 0x80000000
   15214:	str	r1, [sp]
   15218:	add	r1, sp, #52	; 0x34
   1521c:	bl	162c0 <__assert_fail@plt+0x527c>
   15220:	mov	r6, r0
   15224:	str	r0, [r7]
   15228:	ldr	r0, [r7, #4]
   1522c:	mov	r1, #0
   15230:	ldr	r2, [sp, #52]	; 0x34
   15234:	sub	r2, r2, r0
   15238:	add	r0, r6, r0, lsl #3
   1523c:	lsl	r2, r2, #3
   15240:	bl	10f60 <memset@plt>
   15244:	ldr	r3, [sp, #52]	; 0x34
   15248:	str	r3, [r7, #4]
   1524c:	ldr	r1, [r5, #4]
   15250:	add	r0, r6, r4, lsl #3
   15254:	add	ip, r5, #8
   15258:	mov	r3, fp
   1525c:	mov	r2, sl
   15260:	ldr	r7, [r0, #4]
   15264:	str	r0, [sp, #36]	; 0x24
   15268:	str	ip, [sp, #40]	; 0x28
   1526c:	orr	r0, r1, #1
   15270:	ldr	r9, [r6, r4, lsl #3]
   15274:	str	ip, [sp, #8]
   15278:	ldr	lr, [r5, #44]	; 0x2c
   1527c:	str	r0, [sp, #4]
   15280:	ldr	ip, [r5]
   15284:	mov	r1, r9
   15288:	str	ip, [sp, #32]
   1528c:	ldr	ip, [r5, #40]	; 0x28
   15290:	str	ip, [sp, #12]
   15294:	ldr	ip, [sp, #32]
   15298:	str	lr, [sp, #16]
   1529c:	str	r0, [sp, #44]	; 0x2c
   152a0:	mov	r0, r7
   152a4:	str	ip, [sp]
   152a8:	bl	139cc <__assert_fail@plt+0x2988>
   152ac:	cmp	r9, r0
   152b0:	bhi	15320 <__assert_fail@plt+0x42dc>
   152b4:	add	r9, r0, #1
   152b8:	movw	r3, #41476	; 0xa204
   152bc:	movt	r3, #2
   152c0:	cmp	r7, r3
   152c4:	str	r9, [r6, r4, lsl #3]
   152c8:	beq	152d4 <__assert_fail@plt+0x4290>
   152cc:	mov	r0, r7
   152d0:	bl	13418 <__assert_fail@plt+0x23d4>
   152d4:	mov	r0, r9
   152d8:	bl	16110 <__assert_fail@plt+0x50cc>
   152dc:	ldr	ip, [r5]
   152e0:	mov	r3, fp
   152e4:	mov	r2, sl
   152e8:	mov	r1, r9
   152ec:	mov	r7, r0
   152f0:	ldr	lr, [sp, #36]	; 0x24
   152f4:	ldr	r4, [r5, #40]	; 0x28
   152f8:	str	r0, [lr, #4]
   152fc:	ldr	lr, [r5, #44]	; 0x2c
   15300:	str	ip, [sp]
   15304:	ldr	ip, [sp, #44]	; 0x2c
   15308:	str	ip, [sp, #4]
   1530c:	ldr	ip, [sp, #40]	; 0x28
   15310:	str	r4, [sp, #12]
   15314:	str	lr, [sp, #16]
   15318:	str	ip, [sp, #8]
   1531c:	bl	139cc <__assert_fail@plt+0x2988>
   15320:	ldr	r3, [sp, #28]
   15324:	mov	r0, r7
   15328:	str	r3, [r8]
   1532c:	add	sp, sp, #60	; 0x3c
   15330:	ldrd	r4, [sp]
   15334:	ldrd	r6, [sp, #8]
   15338:	ldrd	r8, [sp, #16]
   1533c:	ldrd	sl, [sp, #24]
   15340:	add	sp, sp, #32
   15344:	pop	{pc}		; (ldr pc, [sp], #4)
   15348:	mov	r1, #8
   1534c:	mvn	r3, #-2147483648	; 0x80000000
   15350:	str	r1, [sp]
   15354:	add	r1, sp, #52	; 0x34
   15358:	bl	162c0 <__assert_fail@plt+0x527c>
   1535c:	ldrd	r2, [r7, #8]
   15360:	mov	r6, r0
   15364:	str	r0, [r7]
   15368:	strd	r2, [r0]
   1536c:	b	15228 <__assert_fail@plt+0x41e4>
   15370:	bl	1102c <abort@plt>
   15374:	strd	r4, [sp, #-16]!
   15378:	mov	r5, r0
   1537c:	str	r6, [sp, #8]
   15380:	str	lr, [sp, #12]
   15384:	bl	10f48 <__errno_location@plt>
   15388:	mov	r4, r0
   1538c:	cmp	r5, #0
   15390:	ldr	r0, [pc, #32]	; 153b8 <__assert_fail@plt+0x4374>
   15394:	mov	r1, #48	; 0x30
   15398:	movne	r0, r5
   1539c:	ldr	r6, [r4]
   153a0:	bl	16438 <__assert_fail@plt+0x53f4>
   153a4:	str	r6, [r4]
   153a8:	ldrd	r4, [sp]
   153ac:	ldr	r6, [sp, #8]
   153b0:	add	sp, sp, #12
   153b4:	pop	{pc}		; (ldr pc, [sp], #4)
   153b8:	andeq	sl, r2, r4, lsl #6
   153bc:	ldr	r3, [pc, #12]	; 153d0 <__assert_fail@plt+0x438c>
   153c0:	cmp	r0, #0
   153c4:	moveq	r0, r3
   153c8:	ldr	r0, [r0]
   153cc:	bx	lr
   153d0:	andeq	sl, r2, r4, lsl #6
   153d4:	ldr	r3, [pc, #12]	; 153e8 <__assert_fail@plt+0x43a4>
   153d8:	cmp	r0, #0
   153dc:	moveq	r0, r3
   153e0:	str	r1, [r0]
   153e4:	bx	lr
   153e8:	andeq	sl, r2, r4, lsl #6
   153ec:	ldr	r3, [pc, #52]	; 15428 <__assert_fail@plt+0x43e4>
   153f0:	cmp	r0, #0
   153f4:	push	{lr}		; (str lr, [sp, #-4]!)
   153f8:	lsr	lr, r1, #5
   153fc:	and	r1, r1, #31
   15400:	moveq	r0, r3
   15404:	add	r3, r0, #8
   15408:	ldr	ip, [r3, lr, lsl #2]
   1540c:	lsr	r0, ip, r1
   15410:	eor	r2, r2, r0
   15414:	and	r0, r0, #1
   15418:	and	r2, r2, #1
   1541c:	eor	r1, ip, r2, lsl r1
   15420:	str	r1, [r3, lr, lsl #2]
   15424:	pop	{pc}		; (ldr pc, [sp], #4)
   15428:	andeq	sl, r2, r4, lsl #6
   1542c:	ldr	r3, [pc, #16]	; 15444 <__assert_fail@plt+0x4400>
   15430:	cmp	r0, #0
   15434:	movne	r3, r0
   15438:	ldr	r0, [r3, #4]
   1543c:	str	r1, [r3, #4]
   15440:	bx	lr
   15444:	andeq	sl, r2, r4, lsl #6
   15448:	ldr	r3, [pc, #48]	; 15480 <__assert_fail@plt+0x443c>
   1544c:	cmp	r0, #0
   15450:	mov	ip, #10
   15454:	moveq	r0, r3
   15458:	cmp	r2, #0
   1545c:	cmpne	r1, #0
   15460:	str	ip, [r0]
   15464:	beq	15474 <__assert_fail@plt+0x4430>
   15468:	str	r1, [r0, #40]	; 0x28
   1546c:	str	r2, [r0, #44]	; 0x2c
   15470:	bx	lr
   15474:	str	r4, [sp, #-8]!
   15478:	str	lr, [sp, #4]
   1547c:	bl	1102c <abort@plt>
   15480:	andeq	sl, r2, r4, lsl #6
   15484:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15488:	strd	r6, [sp, #8]
   1548c:	mov	r7, r0
   15490:	mov	r6, r1
   15494:	strd	r8, [sp, #16]
   15498:	mov	r8, r2
   1549c:	mov	r9, r3
   154a0:	str	lr, [sp, #24]
   154a4:	sub	sp, sp, #28
   154a8:	ldr	r4, [sp, #56]	; 0x38
   154ac:	ldr	ip, [pc, #104]	; 1551c <__assert_fail@plt+0x44d8>
   154b0:	cmp	r4, #0
   154b4:	moveq	r4, ip
   154b8:	bl	10f48 <__errno_location@plt>
   154bc:	ldr	ip, [r4, #44]	; 0x2c
   154c0:	mov	r5, r0
   154c4:	mov	r1, r6
   154c8:	add	lr, r4, #8
   154cc:	mov	r3, r9
   154d0:	ldr	r6, [r5]
   154d4:	mov	r2, r8
   154d8:	mov	r0, r7
   154dc:	str	ip, [sp, #16]
   154e0:	ldr	ip, [r4, #40]	; 0x28
   154e4:	str	lr, [sp, #8]
   154e8:	str	ip, [sp, #12]
   154ec:	ldr	ip, [r4, #4]
   154f0:	str	ip, [sp, #4]
   154f4:	ldr	ip, [r4]
   154f8:	str	ip, [sp]
   154fc:	bl	139cc <__assert_fail@plt+0x2988>
   15500:	str	r6, [r5]
   15504:	add	sp, sp, #28
   15508:	ldrd	r4, [sp]
   1550c:	ldrd	r6, [sp, #8]
   15510:	ldrd	r8, [sp, #16]
   15514:	add	sp, sp, #24
   15518:	pop	{pc}		; (ldr pc, [sp], #4)
   1551c:	andeq	sl, r2, r4, lsl #6
   15520:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15524:	cmp	r3, #0
   15528:	ldr	r4, [pc, #220]	; 1560c <__assert_fail@plt+0x45c8>
   1552c:	movne	r4, r3
   15530:	strd	r6, [sp, #8]
   15534:	mov	r6, r2
   15538:	strd	r8, [sp, #16]
   1553c:	mov	r9, r0
   15540:	strd	sl, [sp, #24]
   15544:	mov	sl, r1
   15548:	str	lr, [sp, #32]
   1554c:	sub	sp, sp, #44	; 0x2c
   15550:	bl	10f48 <__errno_location@plt>
   15554:	ldr	r5, [r4, #4]
   15558:	mov	r7, r0
   1555c:	mov	r1, #0
   15560:	add	r8, r4, #8
   15564:	mov	r3, sl
   15568:	ldr	ip, [r4, #44]	; 0x2c
   1556c:	mov	r2, r9
   15570:	mov	r0, r1
   15574:	ldr	lr, [r7]
   15578:	cmp	r6, r1
   1557c:	orreq	r5, r5, #1
   15580:	str	ip, [sp, #16]
   15584:	ldr	ip, [r4, #40]	; 0x28
   15588:	stmib	sp, {r5, r8, ip}
   1558c:	ldr	ip, [r4]
   15590:	str	lr, [sp, #28]
   15594:	str	ip, [sp]
   15598:	bl	139cc <__assert_fail@plt+0x2988>
   1559c:	add	r1, r0, #1
   155a0:	mov	fp, r0
   155a4:	mov	r0, r1
   155a8:	str	r1, [sp, #36]	; 0x24
   155ac:	bl	16110 <__assert_fail@plt+0x50cc>
   155b0:	ldr	ip, [r4, #44]	; 0x2c
   155b4:	mov	r3, sl
   155b8:	mov	r2, r9
   155bc:	ldr	r1, [sp, #36]	; 0x24
   155c0:	str	ip, [sp, #16]
   155c4:	ldr	ip, [r4, #40]	; 0x28
   155c8:	str	r0, [sp, #32]
   155cc:	stmib	sp, {r5, r8, ip}
   155d0:	ldr	ip, [r4]
   155d4:	str	ip, [sp]
   155d8:	bl	139cc <__assert_fail@plt+0x2988>
   155dc:	ldr	lr, [sp, #28]
   155e0:	cmp	r6, #0
   155e4:	ldr	r0, [sp, #32]
   155e8:	str	lr, [r7]
   155ec:	strne	fp, [r6]
   155f0:	add	sp, sp, #44	; 0x2c
   155f4:	ldrd	r4, [sp]
   155f8:	ldrd	r6, [sp, #8]
   155fc:	ldrd	r8, [sp, #16]
   15600:	ldrd	sl, [sp, #24]
   15604:	add	sp, sp, #32
   15608:	pop	{pc}		; (ldr pc, [sp], #4)
   1560c:	andeq	sl, r2, r4, lsl #6
   15610:	mov	r3, r2
   15614:	mov	r2, #0
   15618:	b	15520 <__assert_fail@plt+0x44dc>
   1561c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15620:	movw	r5, #41244	; 0xa11c
   15624:	movt	r5, #2
   15628:	ldr	r3, [r5, #4]
   1562c:	strd	r6, [sp, #8]
   15630:	str	r8, [sp, #16]
   15634:	str	lr, [sp, #20]
   15638:	ldr	r7, [r5]
   1563c:	cmp	r3, #1
   15640:	ble	15664 <__assert_fail@plt+0x4620>
   15644:	mov	r4, #1
   15648:	add	r6, r7, #4
   1564c:	ldr	r0, [r6, r4, lsl #3]
   15650:	add	r4, r4, #1
   15654:	bl	13418 <__assert_fail@plt+0x23d4>
   15658:	ldr	r3, [r5, #4]
   1565c:	cmp	r3, r4
   15660:	bgt	1564c <__assert_fail@plt+0x4608>
   15664:	ldr	r0, [r7, #4]
   15668:	movw	r4, #41476	; 0xa204
   1566c:	movt	r4, #2
   15670:	cmp	r0, r4
   15674:	beq	15688 <__assert_fail@plt+0x4644>
   15678:	bl	13418 <__assert_fail@plt+0x23d4>
   1567c:	mov	r3, #256	; 0x100
   15680:	str	r3, [r5, #8]
   15684:	str	r4, [r5, #12]
   15688:	ldr	r4, [pc, #44]	; 156bc <__assert_fail@plt+0x4678>
   1568c:	cmp	r7, r4
   15690:	beq	156a0 <__assert_fail@plt+0x465c>
   15694:	mov	r0, r7
   15698:	bl	13418 <__assert_fail@plt+0x23d4>
   1569c:	str	r4, [r5]
   156a0:	mov	r3, #1
   156a4:	ldrd	r6, [sp, #8]
   156a8:	str	r3, [r5, #4]
   156ac:	ldrd	r4, [sp]
   156b0:	ldr	r8, [sp, #16]
   156b4:	add	sp, sp, #20
   156b8:	pop	{pc}		; (ldr pc, [sp], #4)
   156bc:	andeq	sl, r2, r4, lsr #2
   156c0:	ldr	r3, [pc, #4]	; 156cc <__assert_fail@plt+0x4688>
   156c4:	mvn	r2, #0
   156c8:	b	1518c <__assert_fail@plt+0x4148>
   156cc:	andeq	sl, r2, r4, lsl #6
   156d0:	ldr	r3, [pc]	; 156d8 <__assert_fail@plt+0x4694>
   156d4:	b	1518c <__assert_fail@plt+0x4148>
   156d8:	andeq	sl, r2, r4, lsl #6
   156dc:	mov	r1, r0
   156e0:	ldr	r3, [pc, #8]	; 156f0 <__assert_fail@plt+0x46ac>
   156e4:	mvn	r2, #0
   156e8:	mov	r0, #0
   156ec:	b	1518c <__assert_fail@plt+0x4148>
   156f0:	andeq	sl, r2, r4, lsl #6
   156f4:	mov	r2, r1
   156f8:	ldr	r3, [pc, #8]	; 15708 <__assert_fail@plt+0x46c4>
   156fc:	mov	r1, r0
   15700:	mov	r0, #0
   15704:	b	1518c <__assert_fail@plt+0x4148>
   15708:	andeq	sl, r2, r4, lsl #6
   1570c:	strd	r4, [sp, #-12]!
   15710:	mov	r5, r2
   15714:	mov	r4, r0
   15718:	str	lr, [sp, #8]
   1571c:	sub	sp, sp, #52	; 0x34
   15720:	mov	r0, sp
   15724:	bl	13828 <__assert_fail@plt+0x27e4>
   15728:	mov	r3, sp
   1572c:	mov	r1, r5
   15730:	mov	r0, r4
   15734:	mvn	r2, #0
   15738:	bl	1518c <__assert_fail@plt+0x4148>
   1573c:	add	sp, sp, #52	; 0x34
   15740:	ldrd	r4, [sp]
   15744:	add	sp, sp, #8
   15748:	pop	{pc}		; (ldr pc, [sp], #4)
   1574c:	strd	r4, [sp, #-16]!
   15750:	mov	r5, r2
   15754:	mov	r4, r0
   15758:	str	r6, [sp, #8]
   1575c:	mov	r6, r3
   15760:	str	lr, [sp, #12]
   15764:	sub	sp, sp, #48	; 0x30
   15768:	mov	r0, sp
   1576c:	bl	13828 <__assert_fail@plt+0x27e4>
   15770:	mov	r3, sp
   15774:	mov	r2, r6
   15778:	mov	r1, r5
   1577c:	mov	r0, r4
   15780:	bl	1518c <__assert_fail@plt+0x4148>
   15784:	add	sp, sp, #48	; 0x30
   15788:	ldrd	r4, [sp]
   1578c:	ldr	r6, [sp, #8]
   15790:	add	sp, sp, #12
   15794:	pop	{pc}		; (ldr pc, [sp], #4)
   15798:	mov	r2, r1
   1579c:	mov	r1, r0
   157a0:	mov	r0, #0
   157a4:	b	1570c <__assert_fail@plt+0x46c8>
   157a8:	mov	r3, r2
   157ac:	mov	r2, r1
   157b0:	mov	r1, r0
   157b4:	mov	r0, #0
   157b8:	b	1574c <__assert_fail@plt+0x4708>
   157bc:	ldr	ip, [pc, #140]	; 15850 <__assert_fail@plt+0x480c>
   157c0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   157c4:	ldrd	r4, [ip]
   157c8:	strd	r6, [sp, #8]
   157cc:	ldrd	r6, [ip, #8]
   157d0:	strd	r8, [sp, #16]
   157d4:	lsr	r9, r2, #5
   157d8:	str	lr, [sp, #24]
   157dc:	sub	sp, sp, #52	; 0x34
   157e0:	and	lr, r2, #31
   157e4:	add	r8, sp, #8
   157e8:	mov	r2, r1
   157ec:	strd	r4, [sp]
   157f0:	mov	r1, r0
   157f4:	mov	r3, sp
   157f8:	strd	r6, [sp, #8]
   157fc:	mov	r0, #0
   15800:	ldrd	r4, [ip, #16]
   15804:	ldrd	r6, [ip, #24]
   15808:	strd	r4, [sp, #16]
   1580c:	ldrd	r4, [ip, #32]
   15810:	strd	r6, [sp, #24]
   15814:	ldrd	r6, [ip, #40]	; 0x28
   15818:	strd	r4, [sp, #32]
   1581c:	strd	r6, [sp, #40]	; 0x28
   15820:	ldr	ip, [r8, r9, lsl #2]
   15824:	mvn	r4, ip, lsr lr
   15828:	and	r4, r4, #1
   1582c:	eor	lr, ip, r4, lsl lr
   15830:	str	lr, [r8, r9, lsl #2]
   15834:	bl	1518c <__assert_fail@plt+0x4148>
   15838:	add	sp, sp, #52	; 0x34
   1583c:	ldrd	r4, [sp]
   15840:	ldrd	r6, [sp, #8]
   15844:	ldrd	r8, [sp, #16]
   15848:	add	sp, sp, #24
   1584c:	pop	{pc}		; (ldr pc, [sp], #4)
   15850:	andeq	sl, r2, r4, lsl #6
   15854:	mov	r2, r1
   15858:	mvn	r1, #0
   1585c:	b	157bc <__assert_fail@plt+0x4778>
   15860:	mov	r2, #58	; 0x3a
   15864:	mvn	r1, #0
   15868:	b	157bc <__assert_fail@plt+0x4778>
   1586c:	mov	r2, #58	; 0x3a
   15870:	b	157bc <__assert_fail@plt+0x4778>
   15874:	strd	r4, [sp, #-20]!	; 0xffffffec
   15878:	strd	r6, [sp, #8]
   1587c:	mov	r6, r0
   15880:	mov	r7, r2
   15884:	str	lr, [sp, #16]
   15888:	sub	sp, sp, #100	; 0x64
   1588c:	mov	r0, sp
   15890:	bl	13828 <__assert_fail@plt+0x27e4>
   15894:	ldrd	r4, [sp, #8]
   15898:	mov	r1, r7
   1589c:	mov	r0, r6
   158a0:	add	r3, sp, #48	; 0x30
   158a4:	mvn	r2, #0
   158a8:	ldrd	r6, [sp]
   158ac:	strd	r4, [sp, #56]	; 0x38
   158b0:	ldrd	r4, [sp, #16]
   158b4:	strd	r6, [sp, #48]	; 0x30
   158b8:	ldrd	r6, [sp, #32]
   158bc:	ldr	lr, [sp, #60]	; 0x3c
   158c0:	strd	r4, [sp, #64]	; 0x40
   158c4:	ldrd	r4, [sp, #24]
   158c8:	mvn	ip, lr
   158cc:	and	ip, ip, #67108864	; 0x4000000
   158d0:	strd	r4, [sp, #72]	; 0x48
   158d4:	eor	ip, ip, lr
   158d8:	ldrd	r4, [sp, #40]	; 0x28
   158dc:	str	ip, [sp, #60]	; 0x3c
   158e0:	strd	r6, [sp, #80]	; 0x50
   158e4:	strd	r4, [sp, #88]	; 0x58
   158e8:	bl	1518c <__assert_fail@plt+0x4148>
   158ec:	add	sp, sp, #100	; 0x64
   158f0:	ldrd	r4, [sp]
   158f4:	ldrd	r6, [sp, #8]
   158f8:	add	sp, sp, #16
   158fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15900:	ldr	ip, [pc, #156]	; 159a4 <__assert_fail@plt+0x4960>
   15904:	cmp	r2, #0
   15908:	cmpne	r1, #0
   1590c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15910:	strd	r6, [sp, #8]
   15914:	mov	r6, r2
   15918:	str	r8, [sp, #16]
   1591c:	mov	r8, r3
   15920:	strd	sl, [sp, #20]
   15924:	ldrd	r4, [ip]
   15928:	str	lr, [sp, #28]
   1592c:	sub	sp, sp, #48	; 0x30
   15930:	mov	lr, #10
   15934:	ldrd	r2, [ip, #8]
   15938:	ldrd	sl, [ip, #16]
   1593c:	strd	r4, [sp]
   15940:	ldrd	r4, [ip, #32]
   15944:	str	lr, [sp]
   15948:	strd	r2, [sp, #8]
   1594c:	strd	sl, [sp, #16]
   15950:	ldrd	r2, [ip, #24]
   15954:	ldrd	sl, [ip, #40]	; 0x28
   15958:	strd	r2, [sp, #24]
   1595c:	strd	r4, [sp, #32]
   15960:	strd	sl, [sp, #40]	; 0x28
   15964:	beq	159a0 <__assert_fail@plt+0x495c>
   15968:	ldr	r2, [sp, #80]	; 0x50
   1596c:	mov	r7, r1
   15970:	mov	r3, sp
   15974:	mov	r1, r8
   15978:	str	r7, [sp, #40]	; 0x28
   1597c:	str	r6, [sp, #44]	; 0x2c
   15980:	bl	1518c <__assert_fail@plt+0x4148>
   15984:	add	sp, sp, #48	; 0x30
   15988:	ldrd	r4, [sp]
   1598c:	ldrd	r6, [sp, #8]
   15990:	ldr	r8, [sp, #16]
   15994:	ldrd	sl, [sp, #20]
   15998:	add	sp, sp, #28
   1599c:	pop	{pc}		; (ldr pc, [sp], #4)
   159a0:	bl	1102c <abort@plt>
   159a4:	andeq	sl, r2, r4, lsl #6
   159a8:	mvn	ip, #0
   159ac:	push	{lr}		; (str lr, [sp, #-4]!)
   159b0:	sub	sp, sp, #12
   159b4:	str	ip, [sp]
   159b8:	bl	15900 <__assert_fail@plt+0x48bc>
   159bc:	add	sp, sp, #12
   159c0:	pop	{pc}		; (ldr pc, [sp], #4)
   159c4:	mvn	ip, #0
   159c8:	push	{lr}		; (str lr, [sp, #-4]!)
   159cc:	sub	sp, sp, #12
   159d0:	mov	r3, r2
   159d4:	mov	r2, r1
   159d8:	mov	r1, r0
   159dc:	mov	r0, #0
   159e0:	str	ip, [sp]
   159e4:	bl	15900 <__assert_fail@plt+0x48bc>
   159e8:	add	sp, sp, #12
   159ec:	pop	{pc}		; (ldr pc, [sp], #4)
   159f0:	push	{lr}		; (str lr, [sp, #-4]!)
   159f4:	sub	sp, sp, #12
   159f8:	str	r3, [sp]
   159fc:	mov	r3, r2
   15a00:	mov	r2, r1
   15a04:	mov	r1, r0
   15a08:	mov	r0, #0
   15a0c:	bl	15900 <__assert_fail@plt+0x48bc>
   15a10:	add	sp, sp, #12
   15a14:	pop	{pc}		; (ldr pc, [sp], #4)
   15a18:	ldr	r3, [pc]	; 15a20 <__assert_fail@plt+0x49dc>
   15a1c:	b	1518c <__assert_fail@plt+0x4148>
   15a20:	andeq	sl, r2, ip, lsr #2
   15a24:	mov	r2, r1
   15a28:	ldr	r3, [pc, #8]	; 15a38 <__assert_fail@plt+0x49f4>
   15a2c:	mov	r1, r0
   15a30:	mov	r0, #0
   15a34:	b	1518c <__assert_fail@plt+0x4148>
   15a38:	andeq	sl, r2, ip, lsr #2
   15a3c:	ldr	r3, [pc, #4]	; 15a48 <__assert_fail@plt+0x4a04>
   15a40:	mvn	r2, #0
   15a44:	b	1518c <__assert_fail@plt+0x4148>
   15a48:	andeq	sl, r2, ip, lsr #2
   15a4c:	mov	r1, r0
   15a50:	ldr	r3, [pc, #8]	; 15a60 <__assert_fail@plt+0x4a1c>
   15a54:	mvn	r2, #0
   15a58:	mov	r0, #0
   15a5c:	b	1518c <__assert_fail@plt+0x4148>
   15a60:	andeq	sl, r2, ip, lsr #2
   15a64:	strd	r4, [sp, #-16]!
   15a68:	mov	r5, r1
   15a6c:	mov	r1, #0
   15a70:	mov	r4, r2
   15a74:	str	r6, [sp, #8]
   15a78:	str	lr, [sp, #12]
   15a7c:	bl	10fd8 <setlocale@plt>
   15a80:	subs	r6, r0, #0
   15a84:	beq	15b04 <__assert_fail@plt+0x4ac0>
   15a88:	bl	10f30 <strlen@plt>
   15a8c:	cmp	r4, r0
   15a90:	bhi	15ab0 <__assert_fail@plt+0x4a6c>
   15a94:	cmp	r4, #0
   15a98:	moveq	r0, #34	; 0x22
   15a9c:	bne	15ad4 <__assert_fail@plt+0x4a90>
   15aa0:	ldrd	r4, [sp]
   15aa4:	ldr	r6, [sp, #8]
   15aa8:	add	sp, sp, #12
   15aac:	pop	{pc}		; (ldr pc, [sp], #4)
   15ab0:	add	r2, r0, #1
   15ab4:	mov	r1, r6
   15ab8:	mov	r0, r5
   15abc:	bl	10df8 <memcpy@plt>
   15ac0:	ldrd	r4, [sp]
   15ac4:	mov	r0, #0
   15ac8:	ldr	r6, [sp, #8]
   15acc:	add	sp, sp, #12
   15ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ad4:	sub	r4, r4, #1
   15ad8:	mov	r1, r6
   15adc:	mov	r2, r4
   15ae0:	mov	r0, r5
   15ae4:	bl	10df8 <memcpy@plt>
   15ae8:	mov	r3, #0
   15aec:	mov	r0, #34	; 0x22
   15af0:	strb	r3, [r5, r4]
   15af4:	ldrd	r4, [sp]
   15af8:	ldr	r6, [sp, #8]
   15afc:	add	sp, sp, #12
   15b00:	pop	{pc}		; (ldr pc, [sp], #4)
   15b04:	cmp	r4, #0
   15b08:	mov	r0, #22
   15b0c:	strbne	r6, [r5]
   15b10:	ldrd	r4, [sp]
   15b14:	ldr	r6, [sp, #8]
   15b18:	add	sp, sp, #12
   15b1c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b20:	mov	r1, #0
   15b24:	b	10fd8 <setlocale@plt>
   15b28:	mov	r2, #3
   15b2c:	mov	r1, #0
   15b30:	b	17790 <__assert_fail@plt+0x674c>
   15b34:	cmp	r1, #0
   15b38:	strd	r4, [sp, #-16]!
   15b3c:	mov	ip, r3
   15b40:	str	r6, [sp, #8]
   15b44:	mov	r4, r0
   15b48:	str	lr, [sp, #12]
   15b4c:	sub	sp, sp, #32
   15b50:	ldr	r5, [sp, #48]	; 0x30
   15b54:	ldr	r6, [sp, #52]	; 0x34
   15b58:	beq	15c9c <__assert_fail@plt+0x4c58>
   15b5c:	mov	r3, r1
   15b60:	mov	r1, #1
   15b64:	stm	sp, {r2, ip}
   15b68:	movw	r2, #35668	; 0x8b54
   15b6c:	movt	r2, #1
   15b70:	bl	10f84 <__fprintf_chk@plt>
   15b74:	mov	r2, #5
   15b78:	movw	r1, #35688	; 0x8b68
   15b7c:	movt	r1, #1
   15b80:	mov	r0, #0
   15b84:	bl	10e40 <dcgettext@plt>
   15b88:	movw	ip, #2022	; 0x7e6
   15b8c:	mov	r3, r0
   15b90:	mov	r1, #1
   15b94:	movw	r2, #36416	; 0x8e40
   15b98:	movt	r2, #1
   15b9c:	mov	r0, r4
   15ba0:	str	ip, [sp]
   15ba4:	bl	10f84 <__fprintf_chk@plt>
   15ba8:	mov	r1, r4
   15bac:	mov	r0, #10
   15bb0:	bl	10e34 <fputc_unlocked@plt>
   15bb4:	mov	r2, #5
   15bb8:	movw	r1, #35692	; 0x8b6c
   15bbc:	movt	r1, #1
   15bc0:	mov	r0, #0
   15bc4:	bl	10e40 <dcgettext@plt>
   15bc8:	mov	r2, r0
   15bcc:	mov	r1, #1
   15bd0:	movw	r3, #35864	; 0x8c18
   15bd4:	movt	r3, #1
   15bd8:	mov	r0, r4
   15bdc:	bl	10f84 <__fprintf_chk@plt>
   15be0:	mov	r1, r4
   15be4:	mov	r0, #10
   15be8:	bl	10e34 <fputc_unlocked@plt>
   15bec:	cmp	r6, #9
   15bf0:	ldrls	pc, [pc, r6, lsl #2]
   15bf4:	b	15f08 <__assert_fail@plt+0x4ec4>
   15bf8:	andeq	r5, r1, r8, lsl #25
   15bfc:			; <UNDEFINED> instruction: 0x00015cb8
   15c00:	strdeq	r5, [r1], -r4
   15c04:	andeq	r5, r1, r4, lsr sp
   15c08:	andeq	r5, r1, ip, ror sp
   15c0c:			; <UNDEFINED> instruction: 0x00015db4
   15c10:	strdeq	r5, [r1], -ip
   15c14:	andeq	r5, r1, r0, asr lr
   15c18:	andeq	r5, r1, r8, lsr #29
   15c1c:	andeq	r5, r1, r0, lsr #24
   15c20:	movw	r1, #36168	; 0x8d48
   15c24:	movt	r1, #1
   15c28:	mov	r2, #5
   15c2c:	mov	r0, #0
   15c30:	bl	10e40 <dcgettext@plt>
   15c34:	ldr	lr, [r5, #4]
   15c38:	mov	r2, r0
   15c3c:	mov	r1, #1
   15c40:	mov	r0, r4
   15c44:	ldr	r3, [r5, #8]
   15c48:	ldr	ip, [r5, #32]
   15c4c:	str	lr, [sp]
   15c50:	ldr	lr, [r5, #12]
   15c54:	str	ip, [sp, #28]
   15c58:	ldr	ip, [r5, #28]
   15c5c:	str	r3, [sp, #4]
   15c60:	ldr	r3, [r5, #16]
   15c64:	str	lr, [sp, #8]
   15c68:	ldr	lr, [r5, #20]
   15c6c:	str	ip, [sp, #24]
   15c70:	ldr	ip, [r5, #24]
   15c74:	str	r3, [sp, #12]
   15c78:	ldr	r3, [r5]
   15c7c:	str	lr, [sp, #16]
   15c80:	str	ip, [sp, #20]
   15c84:	bl	10f84 <__fprintf_chk@plt>
   15c88:	add	sp, sp, #32
   15c8c:	ldrd	r4, [sp]
   15c90:	ldr	r6, [sp, #8]
   15c94:	add	sp, sp, #12
   15c98:	pop	{pc}		; (ldr pc, [sp], #4)
   15c9c:	mov	r3, r2
   15ca0:	mov	r1, #1
   15ca4:	str	ip, [sp]
   15ca8:	movw	r2, #35680	; 0x8b60
   15cac:	movt	r2, #1
   15cb0:	bl	10f84 <__fprintf_chk@plt>
   15cb4:	b	15b74 <__assert_fail@plt+0x4b30>
   15cb8:	mov	r2, #5
   15cbc:	movw	r1, #35900	; 0x8c3c
   15cc0:	movt	r1, #1
   15cc4:	mov	r0, #0
   15cc8:	bl	10e40 <dcgettext@plt>
   15ccc:	ldr	r3, [r5]
   15cd0:	mov	r2, r0
   15cd4:	mov	r1, #1
   15cd8:	mov	r0, r4
   15cdc:	add	sp, sp, #32
   15ce0:	ldrd	r4, [sp]
   15ce4:	ldr	r6, [sp, #8]
   15ce8:	ldr	lr, [sp, #12]
   15cec:	add	sp, sp, #16
   15cf0:	b	10f84 <__fprintf_chk@plt>
   15cf4:	mov	r2, #5
   15cf8:	movw	r1, #35916	; 0x8c4c
   15cfc:	movt	r1, #1
   15d00:	mov	r0, #0
   15d04:	bl	10e40 <dcgettext@plt>
   15d08:	ldm	r5, {r3, ip}
   15d0c:	mov	r2, r0
   15d10:	mov	r1, #1
   15d14:	mov	r0, r4
   15d18:	str	ip, [sp, #48]	; 0x30
   15d1c:	add	sp, sp, #32
   15d20:	ldrd	r4, [sp]
   15d24:	ldr	r6, [sp, #8]
   15d28:	ldr	lr, [sp, #12]
   15d2c:	add	sp, sp, #16
   15d30:	b	10f84 <__fprintf_chk@plt>
   15d34:	mov	r2, #5
   15d38:	movw	r1, #35940	; 0x8c64
   15d3c:	movt	r1, #1
   15d40:	mov	r0, #0
   15d44:	bl	10e40 <dcgettext@plt>
   15d48:	ldm	r5, {r3, lr}
   15d4c:	mov	r2, r0
   15d50:	mov	r1, #1
   15d54:	mov	r0, r4
   15d58:	ldr	ip, [r5, #8]
   15d5c:	str	lr, [sp, #48]	; 0x30
   15d60:	str	ip, [sp, #52]	; 0x34
   15d64:	add	sp, sp, #32
   15d68:	ldrd	r4, [sp]
   15d6c:	ldr	r6, [sp, #8]
   15d70:	ldr	lr, [sp, #12]
   15d74:	add	sp, sp, #16
   15d78:	b	10f84 <__fprintf_chk@plt>
   15d7c:	mov	r2, #5
   15d80:	movw	r1, #35968	; 0x8c80
   15d84:	movt	r1, #1
   15d88:	mov	r0, #0
   15d8c:	bl	10e40 <dcgettext@plt>
   15d90:	ldmib	r5, {r3, ip, lr}
   15d94:	mov	r2, r0
   15d98:	mov	r1, #1
   15d9c:	mov	r0, r4
   15da0:	str	r3, [sp]
   15da4:	ldr	r3, [r5]
   15da8:	stmib	sp, {ip, lr}
   15dac:	bl	10f84 <__fprintf_chk@plt>
   15db0:	b	15c88 <__assert_fail@plt+0x4c44>
   15db4:	mov	r2, #5
   15db8:	movw	r1, #36000	; 0x8ca0
   15dbc:	movt	r1, #1
   15dc0:	mov	r0, #0
   15dc4:	bl	10e40 <dcgettext@plt>
   15dc8:	ldmib	r5, {ip, lr}
   15dcc:	mov	r2, r0
   15dd0:	mov	r1, #1
   15dd4:	mov	r0, r4
   15dd8:	ldr	r3, [r5, #16]
   15ddc:	str	ip, [sp]
   15de0:	ldr	ip, [r5, #12]
   15de4:	str	r3, [sp, #12]
   15de8:	ldr	r3, [r5]
   15dec:	str	lr, [sp, #4]
   15df0:	str	ip, [sp, #8]
   15df4:	bl	10f84 <__fprintf_chk@plt>
   15df8:	b	15c88 <__assert_fail@plt+0x4c44>
   15dfc:	mov	r2, #5
   15e00:	movw	r1, #36036	; 0x8cc4
   15e04:	movt	r1, #1
   15e08:	mov	r0, #0
   15e0c:	bl	10e40 <dcgettext@plt>
   15e10:	ldr	lr, [r5, #4]
   15e14:	mov	r2, r0
   15e18:	mov	r1, #1
   15e1c:	mov	r0, r4
   15e20:	ldr	r3, [r5, #8]
   15e24:	ldr	ip, [r5, #20]
   15e28:	str	lr, [sp]
   15e2c:	ldr	lr, [r5, #12]
   15e30:	str	ip, [sp, #16]
   15e34:	ldr	ip, [r5, #16]
   15e38:	str	r3, [sp, #4]
   15e3c:	ldr	r3, [r5]
   15e40:	str	lr, [sp, #8]
   15e44:	str	ip, [sp, #12]
   15e48:	bl	10f84 <__fprintf_chk@plt>
   15e4c:	b	15c88 <__assert_fail@plt+0x4c44>
   15e50:	mov	r2, #5
   15e54:	movw	r1, #36076	; 0x8cec
   15e58:	movt	r1, #1
   15e5c:	mov	r0, #0
   15e60:	bl	10e40 <dcgettext@plt>
   15e64:	ldmib	r5, {r3, ip}
   15e68:	mov	r2, r0
   15e6c:	mov	r1, #1
   15e70:	mov	r0, r4
   15e74:	ldr	lr, [r5, #24]
   15e78:	str	r3, [sp]
   15e7c:	ldr	r3, [r5, #12]
   15e80:	str	lr, [sp, #20]
   15e84:	ldr	lr, [r5, #20]
   15e88:	str	ip, [sp, #4]
   15e8c:	ldr	ip, [r5, #16]
   15e90:	str	r3, [sp, #8]
   15e94:	ldr	r3, [r5]
   15e98:	str	ip, [sp, #12]
   15e9c:	str	lr, [sp, #16]
   15ea0:	bl	10f84 <__fprintf_chk@plt>
   15ea4:	b	15c88 <__assert_fail@plt+0x4c44>
   15ea8:	mov	r2, #5
   15eac:	movw	r1, #36120	; 0x8d18
   15eb0:	movt	r1, #1
   15eb4:	mov	r0, #0
   15eb8:	bl	10e40 <dcgettext@plt>
   15ebc:	ldmib	r5, {ip, lr}
   15ec0:	mov	r2, r0
   15ec4:	mov	r1, #1
   15ec8:	mov	r0, r4
   15ecc:	ldr	r3, [r5, #28]
   15ed0:	str	ip, [sp]
   15ed4:	ldr	ip, [r5, #12]
   15ed8:	str	r3, [sp, #24]
   15edc:	ldr	r3, [r5, #24]
   15ee0:	str	lr, [sp, #4]
   15ee4:	ldr	lr, [r5, #16]
   15ee8:	str	ip, [sp, #8]
   15eec:	ldr	ip, [r5, #20]
   15ef0:	str	r3, [sp, #20]
   15ef4:	ldr	r3, [r5]
   15ef8:	str	lr, [sp, #12]
   15efc:	str	ip, [sp, #16]
   15f00:	bl	10f84 <__fprintf_chk@plt>
   15f04:	b	15c88 <__assert_fail@plt+0x4c44>
   15f08:	movw	r1, #36220	; 0x8d7c
   15f0c:	movt	r1, #1
   15f10:	b	15c28 <__assert_fail@plt+0x4be4>
   15f14:	strd	r4, [sp, #-12]!
   15f18:	str	lr, [sp, #8]
   15f1c:	sub	sp, sp, #12
   15f20:	ldr	r5, [sp, #24]
   15f24:	ldr	ip, [r5]
   15f28:	cmp	ip, #0
   15f2c:	beq	15f48 <__assert_fail@plt+0x4f04>
   15f30:	mov	lr, r5
   15f34:	mov	ip, #0
   15f38:	ldr	r4, [lr, #4]!
   15f3c:	add	ip, ip, #1
   15f40:	cmp	r4, #0
   15f44:	bne	15f38 <__assert_fail@plt+0x4ef4>
   15f48:	stm	sp, {r5, ip}
   15f4c:	bl	15b34 <__assert_fail@plt+0x4af0>
   15f50:	add	sp, sp, #12
   15f54:	ldrd	r4, [sp]
   15f58:	add	sp, sp, #8
   15f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f60:	strd	r4, [sp, #-16]!
   15f64:	mov	ip, #0
   15f68:	str	r6, [sp, #8]
   15f6c:	str	lr, [sp, #12]
   15f70:	sub	sp, sp, #48	; 0x30
   15f74:	ldr	r5, [sp, #64]	; 0x40
   15f78:	add	r6, sp, #8
   15f7c:	mov	r4, r6
   15f80:	ldr	lr, [r5], #4
   15f84:	cmp	lr, #0
   15f88:	str	lr, [r4], #4
   15f8c:	beq	15f9c <__assert_fail@plt+0x4f58>
   15f90:	add	ip, ip, #1
   15f94:	cmp	ip, #10
   15f98:	bne	15f80 <__assert_fail@plt+0x4f3c>
   15f9c:	stm	sp, {r6, ip}
   15fa0:	bl	15b34 <__assert_fail@plt+0x4af0>
   15fa4:	add	sp, sp, #48	; 0x30
   15fa8:	ldrd	r4, [sp]
   15fac:	ldr	r6, [sp, #8]
   15fb0:	add	sp, sp, #12
   15fb4:	pop	{pc}		; (ldr pc, [sp], #4)
   15fb8:	push	{r3}		; (str r3, [sp, #-4]!)
   15fbc:	mov	ip, #0
   15fc0:	strd	r4, [sp, #-12]!
   15fc4:	str	lr, [sp, #8]
   15fc8:	sub	sp, sp, #56	; 0x38
   15fcc:	add	r3, sp, #72	; 0x48
   15fd0:	add	r5, sp, #16
   15fd4:	mov	r4, r3
   15fd8:	mov	lr, r5
   15fdc:	str	r3, [sp, #12]
   15fe0:	ldr	r3, [r4], #4
   15fe4:	cmp	r3, #0
   15fe8:	str	r3, [lr], #4
   15fec:	beq	15ffc <__assert_fail@plt+0x4fb8>
   15ff0:	add	ip, ip, #1
   15ff4:	cmp	ip, #10
   15ff8:	bne	15fe0 <__assert_fail@plt+0x4f9c>
   15ffc:	ldr	r3, [sp, #68]	; 0x44
   16000:	stm	sp, {r5, ip}
   16004:	bl	15b34 <__assert_fail@plt+0x4af0>
   16008:	add	sp, sp, #56	; 0x38
   1600c:	ldrd	r4, [sp]
   16010:	ldr	lr, [sp, #8]
   16014:	add	sp, sp, #12
   16018:	add	sp, sp, #4
   1601c:	bx	lr
   16020:	movw	r3, #41340	; 0xa17c
   16024:	movt	r3, #2
   16028:	str	r4, [sp, #-8]!
   1602c:	mov	r0, #10
   16030:	ldr	r1, [r3]
   16034:	str	lr, [sp, #4]
   16038:	bl	10e34 <fputc_unlocked@plt>
   1603c:	mov	r2, #5
   16040:	movw	r1, #36280	; 0x8db8
   16044:	movt	r1, #1
   16048:	mov	r0, #0
   1604c:	bl	10e40 <dcgettext@plt>
   16050:	mov	r1, r0
   16054:	movw	r2, #36300	; 0x8dcc
   16058:	movt	r2, #1
   1605c:	mov	r0, #1
   16060:	bl	10f6c <__printf_chk@plt>
   16064:	mov	r2, #5
   16068:	movw	r1, #36324	; 0x8de4
   1606c:	movt	r1, #1
   16070:	mov	r0, #0
   16074:	bl	10e40 <dcgettext@plt>
   16078:	mov	r1, r0
   1607c:	movw	r3, #34644	; 0x8754
   16080:	movt	r3, #1
   16084:	movw	r2, #34684	; 0x877c
   16088:	movt	r2, #1
   1608c:	mov	r0, #1
   16090:	bl	10f6c <__printf_chk@plt>
   16094:	mov	r2, #5
   16098:	movw	r1, #36344	; 0x8df8
   1609c:	movt	r1, #1
   160a0:	mov	r0, #0
   160a4:	bl	10e40 <dcgettext@plt>
   160a8:	mov	r1, r0
   160ac:	movw	r2, #36384	; 0x8e20
   160b0:	movt	r2, #1
   160b4:	mov	r0, #1
   160b8:	ldr	r4, [sp]
   160bc:	ldr	lr, [sp, #4]
   160c0:	add	sp, sp, #8
   160c4:	b	10f6c <__printf_chk@plt>
   160c8:	str	r4, [sp, #-8]!
   160cc:	str	lr, [sp, #4]
   160d0:	bl	17674 <__assert_fail@plt+0x6630>
   160d4:	cmp	r0, #0
   160d8:	beq	160e8 <__assert_fail@plt+0x50a4>
   160dc:	ldr	r4, [sp]
   160e0:	add	sp, sp, #4
   160e4:	pop	{pc}		; (ldr pc, [sp], #4)
   160e8:	bl	16540 <__assert_fail@plt+0x54fc>
   160ec:	str	r4, [sp, #-8]!
   160f0:	str	lr, [sp, #4]
   160f4:	bl	17674 <__assert_fail@plt+0x6630>
   160f8:	cmp	r0, #0
   160fc:	beq	1610c <__assert_fail@plt+0x50c8>
   16100:	ldr	r4, [sp]
   16104:	add	sp, sp, #4
   16108:	pop	{pc}		; (ldr pc, [sp], #4)
   1610c:	bl	16540 <__assert_fail@plt+0x54fc>
   16110:	str	r4, [sp, #-8]!
   16114:	str	lr, [sp, #4]
   16118:	bl	17674 <__assert_fail@plt+0x6630>
   1611c:	cmp	r0, #0
   16120:	beq	16130 <__assert_fail@plt+0x50ec>
   16124:	ldr	r4, [sp]
   16128:	add	sp, sp, #4
   1612c:	pop	{pc}		; (ldr pc, [sp], #4)
   16130:	bl	16540 <__assert_fail@plt+0x54fc>
   16134:	strd	r4, [sp, #-16]!
   16138:	mov	r5, r0
   1613c:	mov	r4, r1
   16140:	str	r6, [sp, #8]
   16144:	str	lr, [sp, #12]
   16148:	bl	176b0 <__assert_fail@plt+0x666c>
   1614c:	cmp	r0, #0
   16150:	beq	16164 <__assert_fail@plt+0x5120>
   16154:	ldrd	r4, [sp]
   16158:	ldr	r6, [sp, #8]
   1615c:	add	sp, sp, #12
   16160:	pop	{pc}		; (ldr pc, [sp], #4)
   16164:	adds	r4, r4, #0
   16168:	movne	r4, #1
   1616c:	cmp	r5, #0
   16170:	moveq	r4, #1
   16174:	cmp	r4, #0
   16178:	beq	16154 <__assert_fail@plt+0x5110>
   1617c:	bl	16540 <__assert_fail@plt+0x54fc>
   16180:	cmp	r1, #0
   16184:	orreq	r1, r1, #1
   16188:	str	r4, [sp, #-8]!
   1618c:	str	lr, [sp, #4]
   16190:	bl	176b0 <__assert_fail@plt+0x666c>
   16194:	cmp	r0, #0
   16198:	beq	161a8 <__assert_fail@plt+0x5164>
   1619c:	ldr	r4, [sp]
   161a0:	add	sp, sp, #4
   161a4:	pop	{pc}		; (ldr pc, [sp], #4)
   161a8:	bl	16540 <__assert_fail@plt+0x54fc>
   161ac:	strd	r4, [sp, #-16]!
   161b0:	mov	r4, r0
   161b4:	mov	r5, r2
   161b8:	str	r6, [sp, #8]
   161bc:	mov	r6, r1
   161c0:	str	lr, [sp, #12]
   161c4:	bl	17c08 <__assert_fail@plt+0x6bc4>
   161c8:	cmp	r0, #0
   161cc:	beq	161e0 <__assert_fail@plt+0x519c>
   161d0:	ldrd	r4, [sp]
   161d4:	ldr	r6, [sp, #8]
   161d8:	add	sp, sp, #12
   161dc:	pop	{pc}		; (ldr pc, [sp], #4)
   161e0:	cmp	r4, #0
   161e4:	beq	161f4 <__assert_fail@plt+0x51b0>
   161e8:	cmp	r6, #0
   161ec:	cmpne	r5, #0
   161f0:	beq	161d0 <__assert_fail@plt+0x518c>
   161f4:	bl	16540 <__assert_fail@plt+0x54fc>
   161f8:	b	161ac <__assert_fail@plt+0x5168>
   161fc:	cmp	r2, #0
   16200:	cmpne	r1, #0
   16204:	str	r4, [sp, #-8]!
   16208:	moveq	r2, #1
   1620c:	str	lr, [sp, #4]
   16210:	moveq	r1, r2
   16214:	bl	17c08 <__assert_fail@plt+0x6bc4>
   16218:	cmp	r0, #0
   1621c:	beq	1622c <__assert_fail@plt+0x51e8>
   16220:	ldr	r4, [sp]
   16224:	add	sp, sp, #4
   16228:	pop	{pc}		; (ldr pc, [sp], #4)
   1622c:	bl	16540 <__assert_fail@plt+0x54fc>
   16230:	mov	r2, r1
   16234:	mov	r1, r0
   16238:	mov	r0, #0
   1623c:	b	161ac <__assert_fail@plt+0x5168>
   16240:	mov	r2, r1
   16244:	mov	r1, r0
   16248:	mov	r0, #0
   1624c:	b	161fc <__assert_fail@plt+0x51b8>
   16250:	cmp	r0, #0
   16254:	strd	r4, [sp, #-16]!
   16258:	mov	r5, r1
   1625c:	ldr	r4, [r1]
   16260:	str	r6, [sp, #8]
   16264:	str	lr, [sp, #12]
   16268:	beq	16298 <__assert_fail@plt+0x5254>
   1626c:	lsr	r3, r4, #1
   16270:	add	r3, r3, #1
   16274:	adds	r4, r4, r3
   16278:	bcs	162b4 <__assert_fail@plt+0x5270>
   1627c:	mov	r1, r4
   16280:	bl	161ac <__assert_fail@plt+0x5168>
   16284:	ldr	r6, [sp, #8]
   16288:	str	r4, [r5]
   1628c:	ldrd	r4, [sp]
   16290:	add	sp, sp, #12
   16294:	pop	{pc}		; (ldr pc, [sp], #4)
   16298:	cmp	r4, #0
   1629c:	bne	1627c <__assert_fail@plt+0x5238>
   162a0:	mov	r4, #64	; 0x40
   162a4:	udiv	r4, r4, r2
   162a8:	cmp	r2, #64	; 0x40
   162ac:	addhi	r4, r4, #1
   162b0:	b	1627c <__assert_fail@plt+0x5238>
   162b4:	bl	16540 <__assert_fail@plt+0x54fc>
   162b8:	mov	r2, #1
   162bc:	b	16250 <__assert_fail@plt+0x520c>
   162c0:	ldr	ip, [r1]
   162c4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   162c8:	mov	r5, r1
   162cc:	strd	r6, [sp, #8]
   162d0:	str	lr, [sp, #28]
   162d4:	strd	r8, [sp, #16]
   162d8:	asr	lr, ip, #1
   162dc:	ldr	r8, [sp, #32]
   162e0:	str	sl, [sp, #24]
   162e4:	adds	r4, ip, lr
   162e8:	mvn	lr, r3
   162ec:	lsr	lr, lr, #31
   162f0:	mvnvs	r4, #-2147483648	; 0x80000000
   162f4:	cmp	r3, r4
   162f8:	movge	r1, #0
   162fc:	andlt	r1, lr, #1
   16300:	cmp	r1, #0
   16304:	movne	r4, r3
   16308:	smull	r6, r7, r4, r8
   1630c:	cmp	r7, r6, asr #31
   16310:	bne	16398 <__assert_fail@plt+0x5354>
   16314:	cmp	r6, #63	; 0x3f
   16318:	mov	r1, r6
   1631c:	ble	16380 <__assert_fail@plt+0x533c>
   16320:	cmp	r0, #0
   16324:	sub	r6, r4, ip
   16328:	streq	r0, [r5]
   1632c:	cmp	r6, r2
   16330:	bge	16360 <__assert_fail@plt+0x531c>
   16334:	adds	r4, ip, r2
   16338:	bvs	16394 <__assert_fail@plt+0x5350>
   1633c:	cmp	r4, r3
   16340:	movle	r3, #0
   16344:	andgt	r3, lr, #1
   16348:	cmp	r3, #0
   1634c:	bne	16394 <__assert_fail@plt+0x5350>
   16350:	smull	r8, r9, r4, r8
   16354:	cmp	r9, r8, asr #31
   16358:	mov	r1, r8
   1635c:	bne	16394 <__assert_fail@plt+0x5350>
   16360:	bl	16134 <__assert_fail@plt+0x50f0>
   16364:	ldrd	r6, [sp, #8]
   16368:	ldrd	r8, [sp, #16]
   1636c:	ldr	sl, [sp, #24]
   16370:	str	r4, [r5]
   16374:	ldrd	r4, [sp]
   16378:	add	sp, sp, #28
   1637c:	pop	{pc}		; (ldr pc, [sp], #4)
   16380:	mov	r6, #64	; 0x40
   16384:	sdiv	r4, r6, r8
   16388:	mls	r1, r8, r4, r6
   1638c:	sub	r1, r6, r1
   16390:	b	16320 <__assert_fail@plt+0x52dc>
   16394:	bl	16540 <__assert_fail@plt+0x54fc>
   16398:	mvn	r6, #-2147483648	; 0x80000000
   1639c:	b	16384 <__assert_fail@plt+0x5340>
   163a0:	mov	r1, #1
   163a4:	str	r4, [sp, #-8]!
   163a8:	str	lr, [sp, #4]
   163ac:	bl	17600 <__assert_fail@plt+0x65bc>
   163b0:	cmp	r0, #0
   163b4:	beq	163c4 <__assert_fail@plt+0x5380>
   163b8:	ldr	r4, [sp]
   163bc:	add	sp, sp, #4
   163c0:	pop	{pc}		; (ldr pc, [sp], #4)
   163c4:	bl	16540 <__assert_fail@plt+0x54fc>
   163c8:	mov	r1, #1
   163cc:	str	r4, [sp, #-8]!
   163d0:	str	lr, [sp, #4]
   163d4:	bl	17600 <__assert_fail@plt+0x65bc>
   163d8:	cmp	r0, #0
   163dc:	beq	163ec <__assert_fail@plt+0x53a8>
   163e0:	ldr	r4, [sp]
   163e4:	add	sp, sp, #4
   163e8:	pop	{pc}		; (ldr pc, [sp], #4)
   163ec:	bl	16540 <__assert_fail@plt+0x54fc>
   163f0:	str	r4, [sp, #-8]!
   163f4:	str	lr, [sp, #4]
   163f8:	bl	17600 <__assert_fail@plt+0x65bc>
   163fc:	cmp	r0, #0
   16400:	beq	16410 <__assert_fail@plt+0x53cc>
   16404:	ldr	r4, [sp]
   16408:	add	sp, sp, #4
   1640c:	pop	{pc}		; (ldr pc, [sp], #4)
   16410:	bl	16540 <__assert_fail@plt+0x54fc>
   16414:	str	r4, [sp, #-8]!
   16418:	str	lr, [sp, #4]
   1641c:	bl	17600 <__assert_fail@plt+0x65bc>
   16420:	cmp	r0, #0
   16424:	beq	16434 <__assert_fail@plt+0x53f0>
   16428:	ldr	r4, [sp]
   1642c:	add	sp, sp, #4
   16430:	pop	{pc}		; (ldr pc, [sp], #4)
   16434:	bl	16540 <__assert_fail@plt+0x54fc>
   16438:	strd	r4, [sp, #-16]!
   1643c:	mov	r4, r1
   16440:	str	r6, [sp, #8]
   16444:	mov	r6, r0
   16448:	mov	r0, r1
   1644c:	str	lr, [sp, #12]
   16450:	bl	17674 <__assert_fail@plt+0x6630>
   16454:	subs	r5, r0, #0
   16458:	beq	1647c <__assert_fail@plt+0x5438>
   1645c:	mov	r2, r4
   16460:	mov	r1, r6
   16464:	bl	10df8 <memcpy@plt>
   16468:	mov	r0, r5
   1646c:	ldrd	r4, [sp]
   16470:	ldr	r6, [sp, #8]
   16474:	add	sp, sp, #12
   16478:	pop	{pc}		; (ldr pc, [sp], #4)
   1647c:	bl	16540 <__assert_fail@plt+0x54fc>
   16480:	strd	r4, [sp, #-16]!
   16484:	mov	r4, r1
   16488:	str	r6, [sp, #8]
   1648c:	mov	r6, r0
   16490:	mov	r0, r1
   16494:	str	lr, [sp, #12]
   16498:	bl	17674 <__assert_fail@plt+0x6630>
   1649c:	subs	r5, r0, #0
   164a0:	beq	164c4 <__assert_fail@plt+0x5480>
   164a4:	mov	r2, r4
   164a8:	mov	r1, r6
   164ac:	bl	10df8 <memcpy@plt>
   164b0:	mov	r0, r5
   164b4:	ldrd	r4, [sp]
   164b8:	ldr	r6, [sp, #8]
   164bc:	add	sp, sp, #12
   164c0:	pop	{pc}		; (ldr pc, [sp], #4)
   164c4:	bl	16540 <__assert_fail@plt+0x54fc>
   164c8:	strd	r4, [sp, #-16]!
   164cc:	mov	r4, r1
   164d0:	str	r6, [sp, #8]
   164d4:	mov	r6, r0
   164d8:	add	r0, r1, #1
   164dc:	str	lr, [sp, #12]
   164e0:	bl	17674 <__assert_fail@plt+0x6630>
   164e4:	subs	r5, r0, #0
   164e8:	beq	16514 <__assert_fail@plt+0x54d0>
   164ec:	mov	r3, #0
   164f0:	mov	r1, r6
   164f4:	mov	r2, r4
   164f8:	strb	r3, [r5, r4]
   164fc:	bl	10df8 <memcpy@plt>
   16500:	mov	r0, r5
   16504:	ldrd	r4, [sp]
   16508:	ldr	r6, [sp, #8]
   1650c:	add	sp, sp, #12
   16510:	pop	{pc}		; (ldr pc, [sp], #4)
   16514:	bl	16540 <__assert_fail@plt+0x54fc>
   16518:	str	r4, [sp, #-8]!
   1651c:	mov	r4, r0
   16520:	str	lr, [sp, #4]
   16524:	bl	10f30 <strlen@plt>
   16528:	add	r1, r0, #1
   1652c:	mov	r0, r4
   16530:	ldr	r4, [sp]
   16534:	ldr	lr, [sp, #4]
   16538:	add	sp, sp, #8
   1653c:	b	16438 <__assert_fail@plt+0x53f4>
   16540:	movw	r3, #41240	; 0xa118
   16544:	movt	r3, #2
   16548:	str	r4, [sp, #-8]!
   1654c:	ldr	r4, [r3]
   16550:	mov	r2, #5
   16554:	movw	r1, #36464	; 0x8e70
   16558:	movt	r1, #1
   1655c:	mov	r0, #0
   16560:	str	lr, [sp, #4]
   16564:	bl	10e40 <dcgettext@plt>
   16568:	mov	r3, r0
   1656c:	movw	r2, #35372	; 0x8a2c
   16570:	movt	r2, #1
   16574:	mov	r1, #0
   16578:	mov	r0, r4
   1657c:	bl	10eac <error@plt>
   16580:	bl	1102c <abort@plt>
   16584:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16588:	mov	r4, r0
   1658c:	mov	r0, #0
   16590:	strd	r6, [sp, #8]
   16594:	mov	r6, r1
   16598:	movw	r1, #36484	; 0x8e84
   1659c:	movt	r1, #1
   165a0:	strd	r8, [sp, #16]
   165a4:	mov	r9, r2
   165a8:	mov	r2, #5
   165ac:	mov	r7, r3
   165b0:	str	sl, [sp, #24]
   165b4:	str	lr, [sp, #28]
   165b8:	ldr	r8, [sp, #32]
   165bc:	bl	10e40 <dcgettext@plt>
   165c0:	mov	r2, r0
   165c4:	mov	r1, r4
   165c8:	mov	r0, #0
   165cc:	bl	10eac <error@plt>
   165d0:	mov	r2, #5
   165d4:	movw	r1, #36512	; 0x8ea0
   165d8:	movt	r1, #1
   165dc:	mov	r0, #0
   165e0:	bl	10e40 <dcgettext@plt>
   165e4:	mov	r1, #0
   165e8:	mov	r2, r0
   165ec:	mov	r0, r1
   165f0:	bl	10eac <error@plt>
   165f4:	mov	r2, #5
   165f8:	movw	r3, #41240	; 0xa118
   165fc:	movt	r3, #2
   16600:	movw	r1, #36556	; 0x8ecc
   16604:	movt	r1, #1
   16608:	mov	r0, #0
   1660c:	ldr	r4, [r3]
   16610:	bl	10e40 <dcgettext@plt>
   16614:	mov	r5, r0
   16618:	mov	r3, r9
   1661c:	mov	r2, r6
   16620:	mov	r1, #8
   16624:	mov	r0, #0
   16628:	bl	1574c <__assert_fail@plt+0x4708>
   1662c:	mov	r6, r0
   16630:	mov	r3, r8
   16634:	mov	r2, r7
   16638:	mov	r1, #8
   1663c:	mov	r0, #1
   16640:	bl	1574c <__assert_fail@plt+0x4708>
   16644:	mov	r3, r6
   16648:	mov	r2, r5
   1664c:	str	r0, [sp, #32]
   16650:	mov	r1, #0
   16654:	mov	r0, r4
   16658:	ldrd	r4, [sp]
   1665c:	ldrd	r6, [sp, #8]
   16660:	ldrd	r8, [sp, #16]
   16664:	ldr	sl, [sp, #24]
   16668:	ldr	lr, [sp, #28]
   1666c:	add	sp, sp, #32
   16670:	b	10eac <error@plt>
   16674:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16678:	mov	r5, r0
   1667c:	strd	r6, [sp, #8]
   16680:	mov	r7, r1
   16684:	mov	r6, r3
   16688:	str	r8, [sp, #16]
   1668c:	mov	r8, r2
   16690:	str	lr, [sp, #20]
   16694:	sub	sp, sp, #8
   16698:	bl	17ae8 <__assert_fail@plt+0x6aa4>
   1669c:	mov	r4, r0
   166a0:	bl	10f48 <__errno_location@plt>
   166a4:	ldr	r0, [r0]
   166a8:	cmp	r0, #0
   166ac:	bne	166cc <__assert_fail@plt+0x5688>
   166b0:	mov	r0, r4
   166b4:	add	sp, sp, #8
   166b8:	ldrd	r4, [sp]
   166bc:	ldrd	r6, [sp, #8]
   166c0:	ldr	r8, [sp, #16]
   166c4:	add	sp, sp, #20
   166c8:	pop	{pc}		; (ldr pc, [sp], #4)
   166cc:	mov	r3, r8
   166d0:	mov	r2, r7
   166d4:	str	r6, [sp]
   166d8:	mov	r1, r5
   166dc:	bl	16584 <__assert_fail@plt+0x5540>
   166e0:	b	166b0 <__assert_fail@plt+0x566c>
   166e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   166e8:	mov	r5, r3
   166ec:	strd	r6, [sp, #8]
   166f0:	mov	r7, r1
   166f4:	mov	r6, r0
   166f8:	str	r8, [sp, #16]
   166fc:	mov	r8, r2
   16700:	str	lr, [sp, #20]
   16704:	sub	sp, sp, #8
   16708:	bl	17b84 <__assert_fail@plt+0x6b40>
   1670c:	mov	r4, r0
   16710:	bl	10f48 <__errno_location@plt>
   16714:	ldr	r0, [r0]
   16718:	cmp	r0, #0
   1671c:	bne	1673c <__assert_fail@plt+0x56f8>
   16720:	mov	r0, r4
   16724:	add	sp, sp, #8
   16728:	ldrd	r4, [sp]
   1672c:	ldrd	r6, [sp, #8]
   16730:	ldr	r8, [sp, #16]
   16734:	add	sp, sp, #20
   16738:	pop	{pc}		; (ldr pc, [sp], #4)
   1673c:	sub	r5, r5, #1
   16740:	mov	r3, r8
   16744:	sub	r2, r7, #1
   16748:	mov	r1, r6
   1674c:	str	r5, [sp]
   16750:	bl	16584 <__assert_fail@plt+0x5540>
   16754:	b	16720 <__assert_fail@plt+0x56dc>
   16758:	cmp	r2, #36	; 0x24
   1675c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16760:	strd	r6, [sp, #8]
   16764:	strd	r8, [sp, #16]
   16768:	strd	sl, [sp, #24]
   1676c:	str	lr, [sp, #32]
   16770:	sub	sp, sp, #12
   16774:	bhi	16c38 <__assert_fail@plt+0x5bf4>
   16778:	cmp	r1, #0
   1677c:	mov	r7, r2
   16780:	mov	r8, r0
   16784:	mov	r5, r1
   16788:	mov	r6, r3
   1678c:	addeq	r5, sp, #4
   16790:	bl	10f48 <__errno_location@plt>
   16794:	mov	r3, #0
   16798:	mov	r9, r0
   1679c:	str	r3, [r0]
   167a0:	bl	10f0c <__ctype_b_loc@plt>
   167a4:	ldrb	r3, [r8]
   167a8:	mov	r2, r8
   167ac:	ldr	r0, [r0]
   167b0:	b	167b8 <__assert_fail@plt+0x5774>
   167b4:	ldrb	r3, [r2, #1]!
   167b8:	lsl	r1, r3, #1
   167bc:	ldrh	r4, [r0, r1]
   167c0:	ands	r4, r4, #8192	; 0x2000
   167c4:	bne	167b4 <__assert_fail@plt+0x5770>
   167c8:	cmp	r3, #45	; 0x2d
   167cc:	beq	16860 <__assert_fail@plt+0x581c>
   167d0:	mov	r2, r7
   167d4:	mov	r1, r5
   167d8:	mov	r0, r8
   167dc:	bl	10f24 <strtoul@plt>
   167e0:	ldr	r7, [r5]
   167e4:	mov	sl, r0
   167e8:	cmp	r7, r8
   167ec:	beq	16848 <__assert_fail@plt+0x5804>
   167f0:	ldr	r4, [r9]
   167f4:	cmp	r4, #0
   167f8:	bne	16838 <__assert_fail@plt+0x57f4>
   167fc:	ldr	r3, [sp, #48]	; 0x30
   16800:	cmp	r3, #0
   16804:	beq	16814 <__assert_fail@plt+0x57d0>
   16808:	ldrb	r8, [r7]
   1680c:	cmp	r8, #0
   16810:	bne	16ad0 <__assert_fail@plt+0x5a8c>
   16814:	str	sl, [r6]
   16818:	mov	r0, r4
   1681c:	add	sp, sp, #12
   16820:	ldrd	r4, [sp]
   16824:	ldrd	r6, [sp, #8]
   16828:	ldrd	r8, [sp, #16]
   1682c:	ldrd	sl, [sp, #24]
   16830:	add	sp, sp, #32
   16834:	pop	{pc}		; (ldr pc, [sp], #4)
   16838:	cmp	r4, #34	; 0x22
   1683c:	bne	16860 <__assert_fail@plt+0x581c>
   16840:	mov	r4, #1
   16844:	b	167fc <__assert_fail@plt+0x57b8>
   16848:	ldr	r3, [sp, #48]	; 0x30
   1684c:	cmp	r3, #0
   16850:	beq	16860 <__assert_fail@plt+0x581c>
   16854:	ldrb	r8, [r8]
   16858:	cmp	r8, #0
   1685c:	bne	16868 <__assert_fail@plt+0x5824>
   16860:	mov	r4, #4
   16864:	b	16818 <__assert_fail@plt+0x57d4>
   16868:	mov	r1, r8
   1686c:	mov	r0, r3
   16870:	bl	10f3c <strchr@plt>
   16874:	cmp	r0, #0
   16878:	movne	sl, #1
   1687c:	beq	16860 <__assert_fail@plt+0x581c>
   16880:	sub	r3, r8, #69	; 0x45
   16884:	cmp	r3, #47	; 0x2f
   16888:	ldrls	pc, [pc, r3, lsl #2]
   1688c:	b	16990 <__assert_fail@plt+0x594c>
   16890:	andeq	r6, r1, r0, asr r9
   16894:	muleq	r1, r0, r9
   16898:	andeq	r6, r1, r0, asr r9
   1689c:	muleq	r1, r0, r9
   168a0:	muleq	r1, r0, r9
   168a4:	muleq	r1, r0, r9
   168a8:	andeq	r6, r1, r0, asr r9
   168ac:	muleq	r1, r0, r9
   168b0:	andeq	r6, r1, r0, asr r9
   168b4:	muleq	r1, r0, r9
   168b8:	muleq	r1, r0, r9
   168bc:	andeq	r6, r1, r0, asr r9
   168c0:	muleq	r1, r0, r9
   168c4:	muleq	r1, r0, r9
   168c8:	muleq	r1, r0, r9
   168cc:	andeq	r6, r1, r0, asr r9
   168d0:	muleq	r1, r0, r9
   168d4:	muleq	r1, r0, r9
   168d8:	muleq	r1, r0, r9
   168dc:	muleq	r1, r0, r9
   168e0:	andeq	r6, r1, r0, asr r9
   168e4:	andeq	r6, r1, r0, asr r9
   168e8:	muleq	r1, r0, r9
   168ec:	muleq	r1, r0, r9
   168f0:	muleq	r1, r0, r9
   168f4:	muleq	r1, r0, r9
   168f8:	muleq	r1, r0, r9
   168fc:	muleq	r1, r0, r9
   16900:	muleq	r1, r0, r9
   16904:	muleq	r1, r0, r9
   16908:	muleq	r1, r0, r9
   1690c:	muleq	r1, r0, r9
   16910:	muleq	r1, r0, r9
   16914:	muleq	r1, r0, r9
   16918:	andeq	r6, r1, r0, asr r9
   1691c:	muleq	r1, r0, r9
   16920:	muleq	r1, r0, r9
   16924:	muleq	r1, r0, r9
   16928:	andeq	r6, r1, r0, asr r9
   1692c:	muleq	r1, r0, r9
   16930:	andeq	r6, r1, r0, asr r9
   16934:	muleq	r1, r0, r9
   16938:	muleq	r1, r0, r9
   1693c:	muleq	r1, r0, r9
   16940:	muleq	r1, r0, r9
   16944:	muleq	r1, r0, r9
   16948:	muleq	r1, r0, r9
   1694c:	andeq	r6, r1, r0, asr r9
   16950:	mov	r1, #48	; 0x30
   16954:	ldr	r0, [sp, #48]	; 0x30
   16958:	bl	10f3c <strchr@plt>
   1695c:	cmp	r0, #0
   16960:	beq	16990 <__assert_fail@plt+0x594c>
   16964:	ldrb	r3, [r7, #1]
   16968:	cmp	r3, #68	; 0x44
   1696c:	beq	16c2c <__assert_fail@plt+0x5be8>
   16970:	cmp	r3, #105	; 0x69
   16974:	beq	16ae8 <__assert_fail@plt+0x5aa4>
   16978:	cmp	r3, #66	; 0x42
   1697c:	moveq	r0, #2
   16980:	movne	r0, #1
   16984:	moveq	r1, #1000	; 0x3e8
   16988:	movne	r1, #1024	; 0x400
   1698c:	b	16998 <__assert_fail@plt+0x5954>
   16990:	mov	r0, #1
   16994:	mov	r1, #1024	; 0x400
   16998:	sub	r8, r8, #66	; 0x42
   1699c:	cmp	r8, #53	; 0x35
   169a0:	ldrls	pc, [pc, r8, lsl #2]
   169a4:	b	16ab4 <__assert_fail@plt+0x5a70>
   169a8:			; <UNDEFINED> instruction: 0x00016bb8
   169ac:			; <UNDEFINED> instruction: 0x00016ab4
   169b0:			; <UNDEFINED> instruction: 0x00016ab4
   169b4:	muleq	r1, r4, fp
   169b8:			; <UNDEFINED> instruction: 0x00016ab4
   169bc:	andeq	r6, r1, r0, lsl #21
   169c0:			; <UNDEFINED> instruction: 0x00016ab4
   169c4:			; <UNDEFINED> instruction: 0x00016ab4
   169c8:			; <UNDEFINED> instruction: 0x00016ab4
   169cc:			; <UNDEFINED> instruction: 0x00016abc
   169d0:			; <UNDEFINED> instruction: 0x00016ab4
   169d4:	ldrdeq	r6, [r1], -r0
   169d8:			; <UNDEFINED> instruction: 0x00016ab4
   169dc:			; <UNDEFINED> instruction: 0x00016ab4
   169e0:	andeq	r6, r1, r0, ror fp
   169e4:			; <UNDEFINED> instruction: 0x00016ab4
   169e8:			; <UNDEFINED> instruction: 0x00016ab4
   169ec:			; <UNDEFINED> instruction: 0x00016ab4
   169f0:	andeq	r6, r1, ip, asr #22
   169f4:			; <UNDEFINED> instruction: 0x00016ab4
   169f8:			; <UNDEFINED> instruction: 0x00016ab4
   169fc:			; <UNDEFINED> instruction: 0x00016ab4
   16a00:			; <UNDEFINED> instruction: 0x00016ab4
   16a04:	andeq	r6, r1, r8, lsr #22
   16a08:	andeq	r6, r1, r0, lsl #22
   16a0c:			; <UNDEFINED> instruction: 0x00016ab4
   16a10:			; <UNDEFINED> instruction: 0x00016ab4
   16a14:			; <UNDEFINED> instruction: 0x00016ab4
   16a18:			; <UNDEFINED> instruction: 0x00016ab4
   16a1c:			; <UNDEFINED> instruction: 0x00016ab4
   16a20:			; <UNDEFINED> instruction: 0x00016ab4
   16a24:			; <UNDEFINED> instruction: 0x00016ab4
   16a28:	andeq	r6, r1, r4, lsl ip
   16a2c:	andeq	r6, r1, r0, lsr #21
   16a30:			; <UNDEFINED> instruction: 0x00016ab4
   16a34:			; <UNDEFINED> instruction: 0x00016ab4
   16a38:			; <UNDEFINED> instruction: 0x00016ab4
   16a3c:	andeq	r6, r1, r0, lsl #21
   16a40:			; <UNDEFINED> instruction: 0x00016ab4
   16a44:			; <UNDEFINED> instruction: 0x00016ab4
   16a48:			; <UNDEFINED> instruction: 0x00016ab4
   16a4c:			; <UNDEFINED> instruction: 0x00016abc
   16a50:			; <UNDEFINED> instruction: 0x00016ab4
   16a54:	ldrdeq	r6, [r1], -r0
   16a58:			; <UNDEFINED> instruction: 0x00016ab4
   16a5c:			; <UNDEFINED> instruction: 0x00016ab4
   16a60:			; <UNDEFINED> instruction: 0x00016ab4
   16a64:			; <UNDEFINED> instruction: 0x00016ab4
   16a68:			; <UNDEFINED> instruction: 0x00016ab4
   16a6c:			; <UNDEFINED> instruction: 0x00016ab4
   16a70:	andeq	r6, r1, ip, asr #22
   16a74:			; <UNDEFINED> instruction: 0x00016ab4
   16a78:			; <UNDEFINED> instruction: 0x00016ab4
   16a7c:	strdeq	r6, [r1], -ip
   16a80:	umull	r2, r3, sl, r1
   16a84:	cmp	r3, #0
   16a88:	bne	16a98 <__assert_fail@plt+0x5a54>
   16a8c:	umull	r2, r3, r2, r1
   16a90:	cmp	r3, #0
   16a94:	beq	16bdc <__assert_fail@plt+0x5b98>
   16a98:	mov	r4, #1
   16a9c:	mvn	sl, #0
   16aa0:	add	r3, r7, r0
   16aa4:	str	r3, [r5]
   16aa8:	ldrb	r3, [r7, r0]
   16aac:	cmp	r3, #0
   16ab0:	beq	16814 <__assert_fail@plt+0x57d0>
   16ab4:	orr	r4, r4, #2
   16ab8:	b	16814 <__assert_fail@plt+0x57d0>
   16abc:	umull	sl, fp, sl, r1
   16ac0:	cmp	fp, #0
   16ac4:	movne	r4, #1
   16ac8:	mvnne	sl, #0
   16acc:	b	16aa0 <__assert_fail@plt+0x5a5c>
   16ad0:	mov	r1, r8
   16ad4:	ldr	r0, [sp, #48]	; 0x30
   16ad8:	bl	10f3c <strchr@plt>
   16adc:	cmp	r0, #0
   16ae0:	bne	16880 <__assert_fail@plt+0x583c>
   16ae4:	b	16ab4 <__assert_fail@plt+0x5a70>
   16ae8:	ldrb	r3, [r7, #2]
   16aec:	mov	r1, #1024	; 0x400
   16af0:	cmp	r3, #66	; 0x42
   16af4:	movne	r0, #1
   16af8:	moveq	r0, #3
   16afc:	b	16998 <__assert_fail@plt+0x5954>
   16b00:	mov	ip, #7
   16b04:	mov	lr, #0
   16b08:	umull	sl, fp, sl, r1
   16b0c:	cmp	fp, #0
   16b10:	movne	lr, #1
   16b14:	mvnne	sl, #0
   16b18:	subs	ip, ip, #1
   16b1c:	bne	16b08 <__assert_fail@plt+0x5ac4>
   16b20:	orr	r4, r4, lr
   16b24:	b	16aa0 <__assert_fail@plt+0x5a5c>
   16b28:	mov	ip, #8
   16b2c:	mov	lr, #0
   16b30:	umull	sl, fp, sl, r1
   16b34:	cmp	fp, #0
   16b38:	movne	lr, #1
   16b3c:	mvnne	sl, #0
   16b40:	subs	ip, ip, #1
   16b44:	bne	16b30 <__assert_fail@plt+0x5aec>
   16b48:	b	16b20 <__assert_fail@plt+0x5adc>
   16b4c:	mov	ip, #4
   16b50:	mov	lr, #0
   16b54:	umull	sl, fp, sl, r1
   16b58:	cmp	fp, #0
   16b5c:	movne	lr, #1
   16b60:	mvnne	sl, #0
   16b64:	subs	ip, ip, #1
   16b68:	bne	16b54 <__assert_fail@plt+0x5b10>
   16b6c:	b	16b20 <__assert_fail@plt+0x5adc>
   16b70:	mov	ip, #5
   16b74:	mov	lr, #0
   16b78:	umull	sl, fp, sl, r1
   16b7c:	cmp	fp, #0
   16b80:	movne	lr, #1
   16b84:	mvnne	sl, #0
   16b88:	subs	ip, ip, #1
   16b8c:	bne	16b78 <__assert_fail@plt+0x5b34>
   16b90:	b	16b20 <__assert_fail@plt+0x5adc>
   16b94:	mov	ip, #6
   16b98:	mov	lr, #0
   16b9c:	umull	sl, fp, sl, r1
   16ba0:	cmp	fp, #0
   16ba4:	movne	lr, #1
   16ba8:	mvnne	sl, #0
   16bac:	subs	ip, ip, #1
   16bb0:	bne	16b9c <__assert_fail@plt+0x5b58>
   16bb4:	b	16b20 <__assert_fail@plt+0x5adc>
   16bb8:	lsr	r3, sl, #22
   16bbc:	cmp	r3, #0
   16bc0:	movne	r4, #1
   16bc4:	mvnne	sl, #0
   16bc8:	lsleq	sl, sl, #10
   16bcc:	b	16aa0 <__assert_fail@plt+0x5a5c>
   16bd0:	umull	r2, r3, sl, r1
   16bd4:	cmp	r3, #0
   16bd8:	bne	16a98 <__assert_fail@plt+0x5a54>
   16bdc:	umull	r8, r9, r2, r1
   16be0:	adds	r3, r9, #0
   16be4:	movne	r3, #1
   16be8:	cmp	r3, #0
   16bec:	movne	r4, r3
   16bf0:	moveq	sl, r8
   16bf4:	mvnne	sl, #0
   16bf8:	b	16aa0 <__assert_fail@plt+0x5a5c>
   16bfc:	lsr	r3, sl, #31
   16c00:	cmp	r3, #0
   16c04:	movne	r4, #1
   16c08:	mvnne	sl, #0
   16c0c:	lsleq	sl, sl, #1
   16c10:	b	16aa0 <__assert_fail@plt+0x5a5c>
   16c14:	lsr	r3, sl, #23
   16c18:	cmp	r3, #0
   16c1c:	movne	r4, #1
   16c20:	mvnne	sl, #0
   16c24:	lsleq	sl, sl, #9
   16c28:	b	16aa0 <__assert_fail@plt+0x5a5c>
   16c2c:	mov	r0, #2
   16c30:	mov	r1, #1000	; 0x3e8
   16c34:	b	16998 <__assert_fail@plt+0x5954>
   16c38:	movw	r3, #36596	; 0x8ef4
   16c3c:	movt	r3, #1
   16c40:	movw	r1, #36608	; 0x8f00
   16c44:	movt	r1, #1
   16c48:	movw	r0, #36624	; 0x8f10
   16c4c:	movt	r0, #1
   16c50:	mov	r2, #85	; 0x55
   16c54:	bl	11044 <__assert_fail@plt>
   16c58:	cmp	r2, #36	; 0x24
   16c5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16c60:	strd	r6, [sp, #8]
   16c64:	strd	r8, [sp, #16]
   16c68:	strd	sl, [sp, #24]
   16c6c:	str	lr, [sp, #32]
   16c70:	sub	sp, sp, #36	; 0x24
   16c74:	bhi	17504 <__assert_fail@plt+0x64c0>
   16c78:	cmp	r1, #0
   16c7c:	mov	r8, r2
   16c80:	mov	r6, r0
   16c84:	mov	r5, r1
   16c88:	mov	sl, r3
   16c8c:	addeq	r5, sp, #28
   16c90:	bl	10f48 <__errno_location@plt>
   16c94:	mov	r3, #0
   16c98:	mov	r7, r0
   16c9c:	str	r3, [r0]
   16ca0:	bl	10f0c <__ctype_b_loc@plt>
   16ca4:	ldrb	r3, [r6]
   16ca8:	mov	r2, r6
   16cac:	ldr	r0, [r0]
   16cb0:	b	16cb8 <__assert_fail@plt+0x5c74>
   16cb4:	ldrb	r3, [r2, #1]!
   16cb8:	lsl	r1, r3, #1
   16cbc:	ldrh	r4, [r0, r1]
   16cc0:	ands	r4, r4, #8192	; 0x2000
   16cc4:	bne	16cb4 <__assert_fail@plt+0x5c70>
   16cc8:	cmp	r3, #45	; 0x2d
   16ccc:	beq	16d6c <__assert_fail@plt+0x5d28>
   16cd0:	mov	r2, r8
   16cd4:	mov	r3, r4
   16cd8:	mov	r1, r5
   16cdc:	mov	r0, r6
   16ce0:	bl	10e04 <__strtoull_internal@plt>
   16ce4:	ldr	fp, [r5]
   16ce8:	mov	r9, r0
   16cec:	mov	r8, r1
   16cf0:	cmp	fp, r6
   16cf4:	beq	16d54 <__assert_fail@plt+0x5d10>
   16cf8:	ldr	r4, [r7]
   16cfc:	cmp	r4, #0
   16d00:	bne	16d44 <__assert_fail@plt+0x5d00>
   16d04:	ldr	r3, [sp, #72]	; 0x48
   16d08:	cmp	r3, #0
   16d0c:	beq	16d1c <__assert_fail@plt+0x5cd8>
   16d10:	ldrb	r6, [fp]
   16d14:	cmp	r6, #0
   16d18:	bne	1705c <__assert_fail@plt+0x6018>
   16d1c:	str	r9, [sl]
   16d20:	str	r8, [sl, #4]
   16d24:	mov	r0, r4
   16d28:	add	sp, sp, #36	; 0x24
   16d2c:	ldrd	r4, [sp]
   16d30:	ldrd	r6, [sp, #8]
   16d34:	ldrd	r8, [sp, #16]
   16d38:	ldrd	sl, [sp, #24]
   16d3c:	add	sp, sp, #32
   16d40:	pop	{pc}		; (ldr pc, [sp], #4)
   16d44:	cmp	r4, #34	; 0x22
   16d48:	bne	16d6c <__assert_fail@plt+0x5d28>
   16d4c:	mov	r4, #1
   16d50:	b	16d04 <__assert_fail@plt+0x5cc0>
   16d54:	ldr	r3, [sp, #72]	; 0x48
   16d58:	cmp	r3, #0
   16d5c:	beq	16d6c <__assert_fail@plt+0x5d28>
   16d60:	ldrb	r6, [r6]
   16d64:	cmp	r6, #0
   16d68:	bne	16d74 <__assert_fail@plt+0x5d30>
   16d6c:	mov	r4, #4
   16d70:	b	16d24 <__assert_fail@plt+0x5ce0>
   16d74:	mov	r1, r6
   16d78:	mov	r0, r3
   16d7c:	bl	10f3c <strchr@plt>
   16d80:	cmp	r0, #0
   16d84:	movne	r9, #1
   16d88:	movne	r8, #0
   16d8c:	beq	16d6c <__assert_fail@plt+0x5d28>
   16d90:	sub	r3, r6, #69	; 0x45
   16d94:	cmp	r3, #47	; 0x2f
   16d98:	ldrls	pc, [pc, r3, lsl #2]
   16d9c:	b	16ea4 <__assert_fail@plt+0x5e60>
   16da0:	andeq	r6, r1, r0, ror #28
   16da4:	andeq	r6, r1, r4, lsr #29
   16da8:	andeq	r6, r1, r0, ror #28
   16dac:	andeq	r6, r1, r4, lsr #29
   16db0:	andeq	r6, r1, r4, lsr #29
   16db4:	andeq	r6, r1, r4, lsr #29
   16db8:	andeq	r6, r1, r0, ror #28
   16dbc:	andeq	r6, r1, r4, lsr #29
   16dc0:	andeq	r6, r1, r0, ror #28
   16dc4:	andeq	r6, r1, r4, lsr #29
   16dc8:	andeq	r6, r1, r4, lsr #29
   16dcc:	andeq	r6, r1, r0, ror #28
   16dd0:	andeq	r6, r1, r4, lsr #29
   16dd4:	andeq	r6, r1, r4, lsr #29
   16dd8:	andeq	r6, r1, r4, lsr #29
   16ddc:	andeq	r6, r1, r0, ror #28
   16de0:	andeq	r6, r1, r4, lsr #29
   16de4:	andeq	r6, r1, r4, lsr #29
   16de8:	andeq	r6, r1, r4, lsr #29
   16dec:	andeq	r6, r1, r4, lsr #29
   16df0:	andeq	r6, r1, r0, ror #28
   16df4:	andeq	r6, r1, r0, ror #28
   16df8:	andeq	r6, r1, r4, lsr #29
   16dfc:	andeq	r6, r1, r4, lsr #29
   16e00:	andeq	r6, r1, r4, lsr #29
   16e04:	andeq	r6, r1, r4, lsr #29
   16e08:	andeq	r6, r1, r4, lsr #29
   16e0c:	andeq	r6, r1, r4, lsr #29
   16e10:	andeq	r6, r1, r4, lsr #29
   16e14:	andeq	r6, r1, r4, lsr #29
   16e18:	andeq	r6, r1, r4, lsr #29
   16e1c:	andeq	r6, r1, r4, lsr #29
   16e20:	andeq	r6, r1, r4, lsr #29
   16e24:	andeq	r6, r1, r4, lsr #29
   16e28:	andeq	r6, r1, r0, ror #28
   16e2c:	andeq	r6, r1, r4, lsr #29
   16e30:	andeq	r6, r1, r4, lsr #29
   16e34:	andeq	r6, r1, r4, lsr #29
   16e38:	andeq	r6, r1, r0, ror #28
   16e3c:	andeq	r6, r1, r4, lsr #29
   16e40:	andeq	r6, r1, r0, ror #28
   16e44:	andeq	r6, r1, r4, lsr #29
   16e48:	andeq	r6, r1, r4, lsr #29
   16e4c:	andeq	r6, r1, r4, lsr #29
   16e50:	andeq	r6, r1, r4, lsr #29
   16e54:	andeq	r6, r1, r4, lsr #29
   16e58:	andeq	r6, r1, r4, lsr #29
   16e5c:	andeq	r6, r1, r0, ror #28
   16e60:	mov	r1, #48	; 0x30
   16e64:	ldr	r0, [sp, #72]	; 0x48
   16e68:	bl	10f3c <strchr@plt>
   16e6c:	cmp	r0, #0
   16e70:	beq	16ea4 <__assert_fail@plt+0x5e60>
   16e74:	ldrb	r3, [fp, #1]
   16e78:	cmp	r3, #68	; 0x44
   16e7c:	beq	173d0 <__assert_fail@plt+0x638c>
   16e80:	cmp	r3, #105	; 0x69
   16e84:	beq	17074 <__assert_fail@plt+0x6030>
   16e88:	cmp	r3, #66	; 0x42
   16e8c:	moveq	r3, #2
   16e90:	movne	r3, #1
   16e94:	moveq	r7, #1000	; 0x3e8
   16e98:	movne	r7, #1024	; 0x400
   16e9c:	str	r3, [sp, #4]
   16ea0:	b	16eb0 <__assert_fail@plt+0x5e6c>
   16ea4:	mov	r3, #1
   16ea8:	mov	r7, #1024	; 0x400
   16eac:	str	r3, [sp, #4]
   16eb0:	sub	r6, r6, #66	; 0x42
   16eb4:	cmp	r6, #53	; 0x35
   16eb8:	ldrls	pc, [pc, r6, lsl #2]
   16ebc:	b	17020 <__assert_fail@plt+0x5fdc>
   16ec0:	andeq	r7, r1, r8, ror r3
   16ec4:	andeq	r7, r1, r0, lsr #32
   16ec8:	andeq	r7, r1, r0, lsr #32
   16ecc:	andeq	r7, r1, r4, lsl #3
   16ed0:	andeq	r7, r1, r0, lsr #32
   16ed4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16ed8:	andeq	r7, r1, r0, lsr #32
   16edc:	andeq	r7, r1, r0, lsr #32
   16ee0:	andeq	r7, r1, r0, lsr #32
   16ee4:	andeq	r7, r1, r8, lsr #32
   16ee8:	andeq	r7, r1, r0, lsr #32
   16eec:	andeq	r7, r1, r4, lsr #6
   16ef0:	andeq	r7, r1, r0, lsr #32
   16ef4:	andeq	r7, r1, r0, lsr #32
   16ef8:	andeq	r7, r1, r4, ror r2
   16efc:	andeq	r7, r1, r0, lsr #32
   16f00:	andeq	r7, r1, r0, lsr #32
   16f04:	andeq	r7, r1, r0, lsr #32
   16f08:	strdeq	r7, [r1], -ip
   16f0c:	andeq	r7, r1, r0, lsr #32
   16f10:	andeq	r7, r1, r0, lsr #32
   16f14:	andeq	r7, r1, r0, lsr #32
   16f18:	andeq	r7, r1, r0, lsr #32
   16f1c:	andeq	r7, r1, ip, lsl #2
   16f20:	muleq	r1, r0, r0
   16f24:	andeq	r7, r1, r0, lsr #32
   16f28:	andeq	r7, r1, r0, lsr #32
   16f2c:	andeq	r7, r1, r0, lsr #32
   16f30:	andeq	r7, r1, r0, lsr #32
   16f34:	andeq	r7, r1, r0, lsr #32
   16f38:	andeq	r7, r1, r0, lsr #32
   16f3c:	andeq	r7, r1, r0, lsr #32
   16f40:	andeq	r7, r1, r4, lsl #6
   16f44:	andeq	r7, r1, r8
   16f48:	andeq	r7, r1, r0, lsr #32
   16f4c:	andeq	r7, r1, r0, lsr #32
   16f50:	andeq	r7, r1, r0, lsr #32
   16f54:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16f58:	andeq	r7, r1, r0, lsr #32
   16f5c:	andeq	r7, r1, r0, lsr #32
   16f60:	andeq	r7, r1, r0, lsr #32
   16f64:	andeq	r7, r1, r8, lsr #32
   16f68:	andeq	r7, r1, r0, lsr #32
   16f6c:	andeq	r7, r1, r4, lsr #6
   16f70:	andeq	r7, r1, r0, lsr #32
   16f74:	andeq	r7, r1, r0, lsr #32
   16f78:	andeq	r7, r1, r0, lsr #32
   16f7c:	andeq	r7, r1, r0, lsr #32
   16f80:	andeq	r7, r1, r0, lsr #32
   16f84:	andeq	r7, r1, r0, lsr #32
   16f88:	strdeq	r7, [r1], -ip
   16f8c:	andeq	r7, r1, r0, lsr #32
   16f90:	andeq	r7, r1, r0, lsr #32
   16f94:	andeq	r7, r1, ip, ror #5
   16f98:	asr	r3, r7, #31
   16f9c:	mov	r2, r7
   16fa0:	cmp	r8, #0
   16fa4:	umull	r0, r1, r9, r7
   16fa8:	mov	ip, #0
   16fac:	strd	r2, [sp, #8]
   16fb0:	bne	17404 <__assert_fail@plt+0x63c0>
   16fb4:	mov	r2, r0
   16fb8:	mov	r3, r1
   16fbc:	cmp	ip, #0
   16fc0:	bne	1704c <__assert_fail@plt+0x6008>
   16fc4:	cmp	r3, #0
   16fc8:	mov	lr, ip
   16fcc:	bne	17468 <__assert_fail@plt+0x6424>
   16fd0:	umull	r2, r3, r2, r7
   16fd4:	mov	ip, r2
   16fd8:	mov	r1, r3
   16fdc:	subs	r0, lr, #0
   16fe0:	bne	1704c <__assert_fail@plt+0x6008>
   16fe4:	cmp	r1, #0
   16fe8:	bne	17448 <__assert_fail@plt+0x6404>
   16fec:	umull	r2, r3, ip, r7
   16ff0:	mov	r6, r2
   16ff4:	mov	r2, r3
   16ff8:	cmp	r0, #0
   16ffc:	mov	r9, r6
   17000:	mov	r8, r2
   17004:	bne	1704c <__assert_fail@plt+0x6008>
   17008:	ldr	r2, [sp, #4]
   1700c:	add	r3, fp, r2
   17010:	str	r3, [r5]
   17014:	ldrb	r3, [fp, r2]
   17018:	cmp	r3, #0
   1701c:	beq	16d1c <__assert_fail@plt+0x5cd8>
   17020:	orr	r4, r4, #2
   17024:	b	16d1c <__assert_fail@plt+0x5cd8>
   17028:	cmp	r8, #0
   1702c:	umull	r2, r3, r9, r7
   17030:	mov	ip, #0
   17034:	asr	r1, r7, #31
   17038:	bne	173a0 <__assert_fail@plt+0x635c>
   1703c:	mov	r9, r2
   17040:	mov	r8, r3
   17044:	cmp	ip, #0
   17048:	beq	17008 <__assert_fail@plt+0x5fc4>
   1704c:	mvn	r9, #0
   17050:	mov	r4, #1
   17054:	mov	r8, r9
   17058:	b	17008 <__assert_fail@plt+0x5fc4>
   1705c:	mov	r1, r6
   17060:	ldr	r0, [sp, #72]	; 0x48
   17064:	bl	10f3c <strchr@plt>
   17068:	cmp	r0, #0
   1706c:	bne	16d90 <__assert_fail@plt+0x5d4c>
   17070:	b	17020 <__assert_fail@plt+0x5fdc>
   17074:	ldrb	r3, [fp, #2]
   17078:	mov	r7, #1024	; 0x400
   1707c:	cmp	r3, #66	; 0x42
   17080:	movne	r3, #1
   17084:	moveq	r3, #3
   17088:	str	r3, [sp, #4]
   1708c:	b	16eb0 <__assert_fail@plt+0x5e6c>
   17090:	asr	r3, r7, #31
   17094:	mov	r2, r7
   17098:	mov	ip, #0
   1709c:	mov	r0, #7
   170a0:	mov	lr, ip
   170a4:	mov	r6, r4
   170a8:	strd	r2, [sp, #8]
   170ac:	str	r5, [sp, #16]
   170b0:	b	170dc <__assert_fail@plt+0x6098>
   170b4:	umull	r2, r3, r9, r7
   170b8:	mov	r9, r2
   170bc:	mov	r8, r3
   170c0:	cmp	r1, #0
   170c4:	beq	170d4 <__assert_fail@plt+0x6090>
   170c8:	mvn	r9, #0
   170cc:	mov	ip, #1
   170d0:	mov	r8, r9
   170d4:	subs	r0, r0, #1
   170d8:	beq	173c4 <__assert_fail@plt+0x6380>
   170dc:	cmp	r8, #0
   170e0:	mov	r1, #0
   170e4:	beq	170b4 <__assert_fail@plt+0x6070>
   170e8:	umull	r4, r5, r9, r7
   170ec:	mov	r3, lr
   170f0:	mov	r2, r5
   170f4:	umlal	r2, r3, r8, r7
   170f8:	cmp	r3, #0
   170fc:	bne	17524 <__assert_fail@plt+0x64e0>
   17100:	mov	r9, r4
   17104:	mov	r8, r2
   17108:	b	170c0 <__assert_fail@plt+0x607c>
   1710c:	asr	r3, r7, #31
   17110:	mov	r2, r7
   17114:	mov	r6, #0
   17118:	mov	lr, #8
   1711c:	mov	r0, r4
   17120:	mov	ip, r5
   17124:	strd	r2, [sp, #8]
   17128:	b	17154 <__assert_fail@plt+0x6110>
   1712c:	umull	r2, r3, r9, r7
   17130:	mov	r9, r2
   17134:	mov	r8, r3
   17138:	cmp	r1, #0
   1713c:	beq	1714c <__assert_fail@plt+0x6108>
   17140:	mvn	r9, #0
   17144:	mov	r6, #1
   17148:	mov	r8, r9
   1714c:	subs	lr, lr, #1
   17150:	beq	17394 <__assert_fail@plt+0x6350>
   17154:	cmp	r8, #0
   17158:	mov	r1, #0
   1715c:	beq	1712c <__assert_fail@plt+0x60e8>
   17160:	umull	r4, r5, r9, r7
   17164:	mov	r3, #0
   17168:	mov	r2, r5
   1716c:	umlal	r2, r3, r8, r7
   17170:	cmp	r3, #0
   17174:	bne	1757c <__assert_fail@plt+0x6538>
   17178:	mov	r9, r4
   1717c:	mov	r8, r2
   17180:	b	17138 <__assert_fail@plt+0x60f4>
   17184:	asr	r3, r7, #31
   17188:	mov	r2, r7
   1718c:	mov	r6, #0
   17190:	mov	lr, #6
   17194:	mov	r0, r4
   17198:	mov	ip, r5
   1719c:	strd	r2, [sp, #8]
   171a0:	b	171cc <__assert_fail@plt+0x6188>
   171a4:	umull	r2, r3, r9, r7
   171a8:	mov	r9, r2
   171ac:	mov	r8, r3
   171b0:	cmp	r1, #0
   171b4:	beq	171c4 <__assert_fail@plt+0x6180>
   171b8:	mvn	r9, #0
   171bc:	mov	r6, #1
   171c0:	mov	r8, r9
   171c4:	subs	lr, lr, #1
   171c8:	beq	17394 <__assert_fail@plt+0x6350>
   171cc:	cmp	r8, #0
   171d0:	mov	r1, #0
   171d4:	beq	171a4 <__assert_fail@plt+0x6160>
   171d8:	umull	r4, r5, r9, r7
   171dc:	mov	r3, #0
   171e0:	mov	r2, r5
   171e4:	umlal	r2, r3, r8, r7
   171e8:	cmp	r3, #0
   171ec:	bne	17544 <__assert_fail@plt+0x6500>
   171f0:	mov	r9, r4
   171f4:	mov	r8, r2
   171f8:	b	171b0 <__assert_fail@plt+0x616c>
   171fc:	asr	r3, r7, #31
   17200:	mov	r2, r7
   17204:	mov	r6, #0
   17208:	mov	lr, #4
   1720c:	mov	r0, r4
   17210:	mov	ip, r5
   17214:	strd	r2, [sp, #8]
   17218:	b	17244 <__assert_fail@plt+0x6200>
   1721c:	umull	r2, r3, r9, r7
   17220:	mov	r9, r2
   17224:	mov	r8, r3
   17228:	cmp	r1, #0
   1722c:	beq	1723c <__assert_fail@plt+0x61f8>
   17230:	mvn	r9, #0
   17234:	mov	r6, #1
   17238:	mov	r8, r9
   1723c:	subs	lr, lr, #1
   17240:	beq	17394 <__assert_fail@plt+0x6350>
   17244:	cmp	r8, #0
   17248:	mov	r1, #0
   1724c:	beq	1721c <__assert_fail@plt+0x61d8>
   17250:	umull	r4, r5, r9, r7
   17254:	mov	r3, #0
   17258:	mov	r2, r5
   1725c:	umlal	r2, r3, r8, r7
   17260:	cmp	r3, #0
   17264:	bne	17560 <__assert_fail@plt+0x651c>
   17268:	mov	r9, r4
   1726c:	mov	r8, r2
   17270:	b	17228 <__assert_fail@plt+0x61e4>
   17274:	asr	r3, r7, #31
   17278:	mov	r2, r7
   1727c:	mov	r6, #0
   17280:	mov	lr, #5
   17284:	mov	r0, r4
   17288:	mov	ip, r5
   1728c:	strd	r2, [sp, #8]
   17290:	b	172bc <__assert_fail@plt+0x6278>
   17294:	umull	r2, r3, r9, r7
   17298:	mov	r9, r2
   1729c:	mov	r8, r3
   172a0:	cmp	r1, #0
   172a4:	beq	172b4 <__assert_fail@plt+0x6270>
   172a8:	mvn	r9, #0
   172ac:	mov	r6, #1
   172b0:	mov	r8, r9
   172b4:	subs	lr, lr, #1
   172b8:	beq	17394 <__assert_fail@plt+0x6350>
   172bc:	cmp	r8, #0
   172c0:	mov	r1, #0
   172c4:	beq	17294 <__assert_fail@plt+0x6250>
   172c8:	umull	r4, r5, r9, r7
   172cc:	mov	r3, #0
   172d0:	mov	r2, r5
   172d4:	umlal	r2, r3, r8, r7
   172d8:	cmp	r3, #0
   172dc:	bne	174cc <__assert_fail@plt+0x6488>
   172e0:	mov	r9, r4
   172e4:	mov	r8, r2
   172e8:	b	172a0 <__assert_fail@plt+0x625c>
   172ec:	lsr	r3, r8, #31
   172f0:	adds	r9, r9, r9
   172f4:	adc	r8, r8, r8
   172f8:	cmp	r3, #0
   172fc:	beq	17008 <__assert_fail@plt+0x5fc4>
   17300:	b	1704c <__assert_fail@plt+0x6008>
   17304:	lsr	r3, r8, #23
   17308:	lsl	r8, r8, #9
   1730c:	cmp	r3, #0
   17310:	lsl	r3, r9, #9
   17314:	orr	r8, r8, r9, lsr #23
   17318:	bne	1704c <__assert_fail@plt+0x6008>
   1731c:	mov	r9, r3
   17320:	b	17008 <__assert_fail@plt+0x5fc4>
   17324:	asr	r3, r7, #31
   17328:	mov	r2, r7
   1732c:	cmp	r8, #0
   17330:	mov	r1, #0
   17334:	strd	r2, [sp, #8]
   17338:	umull	r2, r3, r9, r7
   1733c:	bne	173e0 <__assert_fail@plt+0x639c>
   17340:	mov	r0, r2
   17344:	mov	ip, r3
   17348:	cmp	r1, #0
   1734c:	bne	1704c <__assert_fail@plt+0x6008>
   17350:	cmp	ip, #0
   17354:	bne	17428 <__assert_fail@plt+0x63e4>
   17358:	umull	r2, r3, r0, r7
   1735c:	mov	r6, r2
   17360:	mov	r2, r3
   17364:	cmp	r1, #0
   17368:	mov	r9, r6
   1736c:	mov	r8, r2
   17370:	beq	17008 <__assert_fail@plt+0x5fc4>
   17374:	b	1704c <__assert_fail@plt+0x6008>
   17378:	lsr	r3, r8, #22
   1737c:	lsl	r8, r8, #10
   17380:	cmp	r3, #0
   17384:	lsl	r3, r9, #10
   17388:	orr	r8, r8, r9, lsr #22
   1738c:	beq	1731c <__assert_fail@plt+0x62d8>
   17390:	b	1704c <__assert_fail@plt+0x6008>
   17394:	mov	r5, ip
   17398:	orr	r4, r0, r6
   1739c:	b	17008 <__assert_fail@plt+0x5fc4>
   173a0:	strd	r2, [sp, #8]
   173a4:	mov	r3, ip
   173a8:	ldr	r2, [sp, #12]
   173ac:	umlal	r2, r3, r8, r7
   173b0:	cmp	r3, #0
   173b4:	bne	174e8 <__assert_fail@plt+0x64a4>
   173b8:	mov	r8, r2
   173bc:	ldr	r9, [sp, #8]
   173c0:	b	17044 <__assert_fail@plt+0x6000>
   173c4:	orr	r4, r6, ip
   173c8:	ldr	r5, [sp, #16]
   173cc:	b	17008 <__assert_fail@plt+0x5fc4>
   173d0:	mov	r3, #2
   173d4:	mov	r7, #1000	; 0x3e8
   173d8:	str	r3, [sp, #4]
   173dc:	b	16eb0 <__assert_fail@plt+0x5e6c>
   173e0:	strd	r2, [sp, #16]
   173e4:	mov	r3, r1
   173e8:	ldr	r2, [sp, #20]
   173ec:	umlal	r2, r3, r8, r7
   173f0:	cmp	r3, #0
   173f4:	bne	175b8 <__assert_fail@plt+0x6574>
   173f8:	mov	ip, r2
   173fc:	ldr	r0, [sp, #16]
   17400:	b	17348 <__assert_fail@plt+0x6304>
   17404:	mov	r2, r1
   17408:	mov	r3, ip
   1740c:	umlal	r2, r3, r8, r7
   17410:	cmp	r3, #0
   17414:	strd	r2, [sp, #16]
   17418:	bne	1748c <__assert_fail@plt+0x6448>
   1741c:	mov	r2, r0
   17420:	ldr	r3, [sp, #16]
   17424:	b	16fbc <__assert_fail@plt+0x5f78>
   17428:	umull	r8, r9, r0, r7
   1742c:	mov	r3, r1
   17430:	mov	r2, r9
   17434:	umlal	r2, r3, ip, r7
   17438:	cmp	r3, #0
   1743c:	bne	17598 <__assert_fail@plt+0x6554>
   17440:	mov	r6, r8
   17444:	b	17364 <__assert_fail@plt+0x6320>
   17448:	umull	r8, r9, ip, r7
   1744c:	mov	r3, r0
   17450:	mov	r2, r9
   17454:	umlal	r2, r3, r1, r7
   17458:	cmp	r3, #0
   1745c:	bne	175e0 <__assert_fail@plt+0x659c>
   17460:	mov	r6, r8
   17464:	b	16ff8 <__assert_fail@plt+0x5fb4>
   17468:	umull	r8, r9, r2, r7
   1746c:	mov	r1, ip
   17470:	mov	r0, r9
   17474:	umlal	r0, r1, r3, r7
   17478:	cmp	r1, #0
   1747c:	bne	174ac <__assert_fail@plt+0x6468>
   17480:	mov	ip, r8
   17484:	mov	r1, r0
   17488:	b	16fdc <__assert_fail@plt+0x5f98>
   1748c:	ldr	lr, [sp, #8]
   17490:	mov	r2, r0
   17494:	mov	ip, #1
   17498:	ldr	r3, [sp, #12]
   1749c:	mul	r3, r9, r3
   174a0:	mla	r3, lr, r8, r3
   174a4:	add	r3, r3, r1
   174a8:	b	16fbc <__assert_fail@plt+0x5f78>
   174ac:	ldr	r1, [sp, #12]
   174b0:	mov	lr, #1
   174b4:	mov	ip, r8
   174b8:	mul	r1, r2, r1
   174bc:	ldr	r2, [sp, #8]
   174c0:	mla	r1, r3, r2, r1
   174c4:	add	r1, r1, r9
   174c8:	b	16fdc <__assert_fail@plt+0x5f98>
   174cc:	ldrd	r2, [sp, #8]
   174d0:	mov	r1, #1
   174d4:	mul	r3, r9, r3
   174d8:	mov	r9, r4
   174dc:	mla	r8, r2, r8, r3
   174e0:	add	r8, r8, r5
   174e4:	b	172a0 <__assert_fail@plt+0x625c>
   174e8:	mul	r3, r9, r1
   174ec:	mov	ip, #1
   174f0:	mla	r8, r7, r8, r3
   174f4:	ldrd	r6, [sp, #8]
   174f8:	mov	r9, r6
   174fc:	add	r8, r8, r7
   17500:	b	17044 <__assert_fail@plt+0x6000>
   17504:	movw	r3, #36664	; 0x8f38
   17508:	movt	r3, #1
   1750c:	movw	r1, #36608	; 0x8f00
   17510:	movt	r1, #1
   17514:	movw	r0, #36624	; 0x8f10
   17518:	movt	r0, #1
   1751c:	mov	r2, #85	; 0x55
   17520:	bl	11044 <__assert_fail@plt>
   17524:	ldr	r3, [sp, #12]
   17528:	mov	r1, #1
   1752c:	mul	r2, r9, r3
   17530:	ldr	r3, [sp, #8]
   17534:	mov	r9, r4
   17538:	mla	r8, r3, r8, r2
   1753c:	add	r8, r8, r5
   17540:	b	170c0 <__assert_fail@plt+0x607c>
   17544:	ldrd	r2, [sp, #8]
   17548:	mov	r1, #1
   1754c:	mul	r3, r9, r3
   17550:	mov	r9, r4
   17554:	mla	r8, r2, r8, r3
   17558:	add	r8, r8, r5
   1755c:	b	171b0 <__assert_fail@plt+0x616c>
   17560:	ldrd	r2, [sp, #8]
   17564:	mov	r1, #1
   17568:	mul	r3, r9, r3
   1756c:	mov	r9, r4
   17570:	mla	r8, r2, r8, r3
   17574:	add	r8, r8, r5
   17578:	b	17228 <__assert_fail@plt+0x61e4>
   1757c:	ldrd	r2, [sp, #8]
   17580:	mov	r1, #1
   17584:	mul	r3, r9, r3
   17588:	mov	r9, r4
   1758c:	mla	r8, r2, r8, r3
   17590:	add	r8, r8, r5
   17594:	b	17138 <__assert_fail@plt+0x60f4>
   17598:	ldr	r3, [sp, #12]
   1759c:	mov	r6, r8
   175a0:	mov	r1, #1
   175a4:	mul	r2, r0, r3
   175a8:	ldr	r3, [sp, #8]
   175ac:	mla	r2, ip, r3, r2
   175b0:	add	r2, r2, r9
   175b4:	b	17364 <__assert_fail@plt+0x6320>
   175b8:	ldr	r3, [sp, #12]
   175bc:	mov	r1, #1
   175c0:	ldr	r2, [sp, #16]
   175c4:	mul	ip, r9, r3
   175c8:	ldr	r3, [sp, #8]
   175cc:	mov	r0, r2
   175d0:	mla	ip, r3, r8, ip
   175d4:	ldr	r3, [sp, #20]
   175d8:	add	ip, ip, r3
   175dc:	b	17348 <__assert_fail@plt+0x6304>
   175e0:	ldr	r3, [sp, #12]
   175e4:	mov	r6, r8
   175e8:	mov	r0, #1
   175ec:	mul	r2, ip, r3
   175f0:	ldr	r3, [sp, #8]
   175f4:	mla	r2, r1, r3, r2
   175f8:	add	r2, r2, r9
   175fc:	b	16ff8 <__assert_fail@plt+0x5fb4>
   17600:	cmp	r1, #0
   17604:	cmpne	r0, #0
   17608:	beq	17654 <__assert_fail@plt+0x6610>
   1760c:	strd	r4, [sp, #-16]!
   17610:	umull	r4, r5, r0, r1
   17614:	str	r6, [sp, #8]
   17618:	str	lr, [sp, #12]
   1761c:	adds	r3, r5, #0
   17620:	movne	r3, #1
   17624:	cmp	r4, #0
   17628:	blt	17634 <__assert_fail@plt+0x65f0>
   1762c:	cmp	r3, #0
   17630:	beq	17660 <__assert_fail@plt+0x661c>
   17634:	bl	10f48 <__errno_location@plt>
   17638:	mov	r3, #12
   1763c:	ldrd	r4, [sp]
   17640:	ldr	r6, [sp, #8]
   17644:	add	sp, sp, #12
   17648:	str	r3, [r0]
   1764c:	mov	r0, #0
   17650:	pop	{pc}		; (ldr pc, [sp], #4)
   17654:	mov	r1, #1
   17658:	mov	r0, r1
   1765c:	b	10da4 <calloc@plt>
   17660:	ldrd	r4, [sp]
   17664:	ldr	r6, [sp, #8]
   17668:	ldr	lr, [sp, #12]
   1766c:	add	sp, sp, #16
   17670:	b	10da4 <calloc@plt>
   17674:	cmp	r0, #0
   17678:	beq	17684 <__assert_fail@plt+0x6640>
   1767c:	blt	1768c <__assert_fail@plt+0x6648>
   17680:	b	10ec4 <malloc@plt>
   17684:	mov	r0, #1
   17688:	b	10ec4 <malloc@plt>
   1768c:	str	r4, [sp, #-8]!
   17690:	str	lr, [sp, #4]
   17694:	bl	10f48 <__errno_location@plt>
   17698:	mov	r3, #12
   1769c:	ldr	r4, [sp]
   176a0:	add	sp, sp, #4
   176a4:	str	r3, [r0]
   176a8:	mov	r0, #0
   176ac:	pop	{pc}		; (ldr pc, [sp], #4)
   176b0:	cmp	r0, #0
   176b4:	beq	176dc <__assert_fail@plt+0x6698>
   176b8:	cmp	r1, #0
   176bc:	str	r4, [sp, #-8]!
   176c0:	str	lr, [sp, #4]
   176c4:	beq	176e4 <__assert_fail@plt+0x66a0>
   176c8:	blt	176f8 <__assert_fail@plt+0x66b4>
   176cc:	ldr	r4, [sp]
   176d0:	ldr	lr, [sp, #4]
   176d4:	add	sp, sp, #8
   176d8:	b	10e4c <realloc@plt>
   176dc:	mov	r0, r1
   176e0:	b	17674 <__assert_fail@plt+0x6630>
   176e4:	bl	13418 <__assert_fail@plt+0x23d4>
   176e8:	ldr	r4, [sp]
   176ec:	add	sp, sp, #4
   176f0:	mov	r0, #0
   176f4:	pop	{pc}		; (ldr pc, [sp], #4)
   176f8:	bl	10f48 <__errno_location@plt>
   176fc:	mov	r3, #12
   17700:	str	r3, [r0]
   17704:	b	176e8 <__assert_fail@plt+0x66a4>
   17708:	strd	r4, [sp, #-16]!
   1770c:	mov	r4, r0
   17710:	str	r6, [sp, #8]
   17714:	str	lr, [sp, #12]
   17718:	bl	10e94 <__fpending@plt>
   1771c:	ldr	r5, [r4]
   17720:	mov	r6, r0
   17724:	mov	r0, r4
   17728:	bl	13258 <__assert_fail@plt+0x2214>
   1772c:	mov	r4, r0
   17730:	and	r5, r5, #32
   17734:	cmp	r5, #0
   17738:	bne	17770 <__assert_fail@plt+0x672c>
   1773c:	cmp	r0, #0
   17740:	beq	1775c <__assert_fail@plt+0x6718>
   17744:	cmp	r6, #0
   17748:	bne	17788 <__assert_fail@plt+0x6744>
   1774c:	bl	10f48 <__errno_location@plt>
   17750:	ldr	r4, [r0]
   17754:	subs	r4, r4, #9
   17758:	mvnne	r4, #0
   1775c:	mov	r0, r4
   17760:	ldrd	r4, [sp]
   17764:	ldr	r6, [sp, #8]
   17768:	add	sp, sp, #12
   1776c:	pop	{pc}		; (ldr pc, [sp], #4)
   17770:	cmp	r0, #0
   17774:	bne	17788 <__assert_fail@plt+0x6744>
   17778:	bl	10f48 <__errno_location@plt>
   1777c:	str	r4, [r0]
   17780:	mvn	r4, #0
   17784:	b	1775c <__assert_fail@plt+0x6718>
   17788:	mvn	r4, #0
   1778c:	b	1775c <__assert_fail@plt+0x6718>
   17790:	push	{r1, r2, r3}
   17794:	strd	r4, [sp, #-20]!	; 0xffffffec
   17798:	strd	r6, [sp, #8]
   1779c:	str	lr, [sp, #16]
   177a0:	sub	sp, sp, #8
   177a4:	ldr	r1, [sp, #28]
   177a8:	add	r2, sp, #32
   177ac:	str	r2, [sp, #4]
   177b0:	cmp	r1, #0
   177b4:	beq	17890 <__assert_fail@plt+0x684c>
   177b8:	movw	r3, #1030	; 0x406
   177bc:	mov	r6, r0
   177c0:	cmp	r1, r3
   177c4:	beq	178a0 <__assert_fail@plt+0x685c>
   177c8:	cmp	r1, #11
   177cc:	beq	17848 <__assert_fail@plt+0x6804>
   177d0:	ble	17828 <__assert_fail@plt+0x67e4>
   177d4:	movw	r2, #1031	; 0x407
   177d8:	cmp	r1, r2
   177dc:	bgt	17864 <__assert_fail@plt+0x6820>
   177e0:	cmp	r1, r3
   177e4:	bge	177f4 <__assert_fail@plt+0x67b0>
   177e8:	movw	r3, #1025	; 0x401
   177ec:	cmp	r1, r3
   177f0:	beq	17848 <__assert_fail@plt+0x6804>
   177f4:	ldr	r3, [sp, #4]
   177f8:	mov	r0, r6
   177fc:	ldr	r2, [r3]
   17800:	bl	10fb4 <fcntl64@plt>
   17804:	mov	r4, r0
   17808:	mov	r0, r4
   1780c:	add	sp, sp, #8
   17810:	ldrd	r4, [sp]
   17814:	ldrd	r6, [sp, #8]
   17818:	ldr	lr, [sp, #16]
   1781c:	add	sp, sp, #20
   17820:	add	sp, sp, #12
   17824:	bx	lr
   17828:	cmp	r1, #4
   1782c:	beq	177f4 <__assert_fail@plt+0x67b0>
   17830:	bgt	17858 <__assert_fail@plt+0x6814>
   17834:	cmp	r1, #2
   17838:	beq	177f4 <__assert_fail@plt+0x67b0>
   1783c:	bgt	17848 <__assert_fail@plt+0x6804>
   17840:	cmp	r1, #1
   17844:	bne	177f4 <__assert_fail@plt+0x67b0>
   17848:	mov	r0, r6
   1784c:	bl	10fb4 <fcntl64@plt>
   17850:	mov	r4, r0
   17854:	b	17808 <__assert_fail@plt+0x67c4>
   17858:	cmp	r1, #9
   1785c:	bne	177f4 <__assert_fail@plt+0x67b0>
   17860:	b	17848 <__assert_fail@plt+0x6804>
   17864:	movw	r3, #1033	; 0x409
   17868:	cmp	r1, r3
   1786c:	beq	177f4 <__assert_fail@plt+0x67b0>
   17870:	blt	17848 <__assert_fail@plt+0x6804>
   17874:	movw	r3, #1034	; 0x40a
   17878:	cmp	r1, r3
   1787c:	bne	177f4 <__assert_fail@plt+0x67b0>
   17880:	mov	r0, r6
   17884:	bl	10fb4 <fcntl64@plt>
   17888:	mov	r4, r0
   1788c:	b	17808 <__assert_fail@plt+0x67c4>
   17890:	ldr	r2, [sp, #32]
   17894:	bl	10fb4 <fcntl64@plt>
   17898:	mov	r4, r0
   1789c:	b	17808 <__assert_fail@plt+0x67c4>
   178a0:	movw	r5, #41780	; 0xa334
   178a4:	movt	r5, #2
   178a8:	ldr	r7, [r2]
   178ac:	add	r2, sp, #36	; 0x24
   178b0:	ldr	r3, [r5]
   178b4:	str	r2, [sp, #4]
   178b8:	mov	r2, r7
   178bc:	cmp	r3, #0
   178c0:	blt	178dc <__assert_fail@plt+0x6898>
   178c4:	bl	10fb4 <fcntl64@plt>
   178c8:	subs	r4, r0, #0
   178cc:	blt	17944 <__assert_fail@plt+0x6900>
   178d0:	mov	r3, #1
   178d4:	str	r3, [r5]
   178d8:	b	17808 <__assert_fail@plt+0x67c4>
   178dc:	mov	r1, #0
   178e0:	bl	10fb4 <fcntl64@plt>
   178e4:	subs	r4, r0, #0
   178e8:	blt	17808 <__assert_fail@plt+0x67c4>
   178ec:	ldr	r3, [r5]
   178f0:	cmn	r3, #1
   178f4:	bne	17808 <__assert_fail@plt+0x67c4>
   178f8:	mov	r1, #1
   178fc:	mov	r0, r4
   17900:	bl	10fb4 <fcntl64@plt>
   17904:	subs	r2, r0, #0
   17908:	blt	17924 <__assert_fail@plt+0x68e0>
   1790c:	orr	r2, r2, #1
   17910:	mov	r1, #2
   17914:	mov	r0, r4
   17918:	bl	10fb4 <fcntl64@plt>
   1791c:	cmn	r0, #1
   17920:	bne	17808 <__assert_fail@plt+0x67c4>
   17924:	bl	10f48 <__errno_location@plt>
   17928:	mov	r5, r0
   1792c:	mov	r0, r4
   17930:	ldr	r6, [r5]
   17934:	mvn	r4, #0
   17938:	bl	11038 <close@plt>
   1793c:	str	r6, [r5]
   17940:	b	17808 <__assert_fail@plt+0x67c4>
   17944:	bl	10f48 <__errno_location@plt>
   17948:	ldr	r3, [r0]
   1794c:	cmp	r3, #22
   17950:	bne	178d0 <__assert_fail@plt+0x688c>
   17954:	mov	r2, r7
   17958:	mov	r0, r6
   1795c:	mov	r1, #0
   17960:	bl	10fb4 <fcntl64@plt>
   17964:	subs	r4, r0, #0
   17968:	mvnge	r3, #0
   1796c:	strge	r3, [r5]
   17970:	bge	178f8 <__assert_fail@plt+0x68b4>
   17974:	b	17808 <__assert_fail@plt+0x67c4>
   17978:	mov	r0, #14
   1797c:	str	r4, [sp, #-8]!
   17980:	str	lr, [sp, #4]
   17984:	bl	10ff0 <nl_langinfo@plt>
   17988:	cmp	r0, #0
   1798c:	beq	179b0 <__assert_fail@plt+0x696c>
   17990:	ldrb	r2, [r0]
   17994:	movw	r3, #36676	; 0x8f44
   17998:	movt	r3, #1
   1799c:	ldr	r4, [sp]
   179a0:	add	sp, sp, #4
   179a4:	cmp	r2, #0
   179a8:	moveq	r0, r3
   179ac:	pop	{pc}		; (ldr pc, [sp], #4)
   179b0:	ldr	r4, [sp]
   179b4:	add	sp, sp, #4
   179b8:	movw	r0, #36676	; 0x8f44
   179bc:	movt	r0, #1
   179c0:	pop	{pc}		; (ldr pc, [sp], #4)
   179c4:	strd	r4, [sp, #-20]!	; 0xffffffec
   179c8:	mov	r5, r2
   179cc:	strd	r6, [sp, #8]
   179d0:	subs	r6, r0, #0
   179d4:	mov	r7, r1
   179d8:	str	lr, [sp, #16]
   179dc:	sub	sp, sp, #12
   179e0:	addeq	r6, sp, #4
   179e4:	mov	r0, r6
   179e8:	bl	10ea0 <mbrtowc@plt>
   179ec:	cmp	r5, #0
   179f0:	cmnne	r0, #3
   179f4:	mov	r4, r0
   179f8:	bhi	17a14 <__assert_fail@plt+0x69d0>
   179fc:	mov	r0, r4
   17a00:	add	sp, sp, #12
   17a04:	ldrd	r4, [sp]
   17a08:	ldrd	r6, [sp, #8]
   17a0c:	add	sp, sp, #16
   17a10:	pop	{pc}		; (ldr pc, [sp], #4)
   17a14:	mov	r0, #0
   17a18:	bl	13548 <__assert_fail@plt+0x2504>
   17a1c:	cmp	r0, #0
   17a20:	bne	179fc <__assert_fail@plt+0x69b8>
   17a24:	ldrb	r3, [r7]
   17a28:	mov	r4, #1
   17a2c:	str	r3, [r6]
   17a30:	b	179fc <__assert_fail@plt+0x69b8>
   17a34:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17a38:	mov	r4, r0
   17a3c:	mov	r5, r2
   17a40:	strd	r6, [sp, #8]
   17a44:	mov	r7, r3
   17a48:	strd	r8, [sp, #16]
   17a4c:	mov	r8, r1
   17a50:	str	sl, [sp, #24]
   17a54:	mov	sl, #0
   17a58:	str	lr, [sp, #28]
   17a5c:	bl	10f48 <__errno_location@plt>
   17a60:	mov	r9, r0
   17a64:	b	17a98 <__assert_fail@plt+0x6a54>
   17a68:	bl	10f30 <strlen@plt>
   17a6c:	add	r6, r0, #1
   17a70:	mov	r0, r5
   17a74:	bl	10f30 <strlen@plt>
   17a78:	add	r0, r0, #1
   17a7c:	subs	r8, r8, r6
   17a80:	add	r4, r4, r6
   17a84:	add	r5, r5, r0
   17a88:	sub	r7, r7, r0
   17a8c:	beq	17ad0 <__assert_fail@plt+0x6a8c>
   17a90:	cmp	r7, #0
   17a94:	beq	17ae0 <__assert_fail@plt+0x6a9c>
   17a98:	mov	r1, r5
   17a9c:	mov	r0, r4
   17aa0:	str	sl, [r9]
   17aa4:	bl	10eb8 <strcoll@plt>
   17aa8:	subs	r3, r0, #0
   17aac:	mov	r0, r4
   17ab0:	beq	17a68 <__assert_fail@plt+0x6a24>
   17ab4:	ldrd	r4, [sp]
   17ab8:	mov	r0, r3
   17abc:	ldrd	r6, [sp, #8]
   17ac0:	ldrd	r8, [sp, #16]
   17ac4:	ldr	sl, [sp, #24]
   17ac8:	add	sp, sp, #28
   17acc:	pop	{pc}		; (ldr pc, [sp], #4)
   17ad0:	adds	r7, r7, #0
   17ad4:	movne	r7, #1
   17ad8:	rsb	r3, r7, #0
   17adc:	b	17ab4 <__assert_fail@plt+0x6a70>
   17ae0:	mov	r3, #1
   17ae4:	b	17ab4 <__assert_fail@plt+0x6a70>
   17ae8:	cmp	r1, r3
   17aec:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17af0:	mov	r4, r1
   17af4:	mov	r5, r3
   17af8:	strd	r6, [sp, #8]
   17afc:	mov	r6, r2
   17b00:	mov	r7, r0
   17b04:	strd	r8, [sp, #16]
   17b08:	str	sl, [sp, #24]
   17b0c:	str	lr, [sp, #28]
   17b10:	bne	17b28 <__assert_fail@plt+0x6ae4>
   17b14:	mov	r2, r1
   17b18:	mov	r1, r6
   17b1c:	bl	10e28 <memcmp@plt>
   17b20:	subs	r8, r0, #0
   17b24:	beq	17b78 <__assert_fail@plt+0x6b34>
   17b28:	mov	ip, #0
   17b2c:	ldrb	sl, [r7, r4]
   17b30:	add	r3, r5, #1
   17b34:	mov	r2, r6
   17b38:	add	r1, r4, #1
   17b3c:	ldrb	r9, [r6, r5]
   17b40:	mov	r0, r7
   17b44:	strb	ip, [r7, r4]
   17b48:	strb	ip, [r6, r5]
   17b4c:	bl	17a34 <__assert_fail@plt+0x69f0>
   17b50:	mov	r8, r0
   17b54:	strb	sl, [r7, r4]
   17b58:	strb	r9, [r6, r5]
   17b5c:	mov	r0, r8
   17b60:	ldrd	r4, [sp]
   17b64:	ldrd	r6, [sp, #8]
   17b68:	ldrd	r8, [sp, #16]
   17b6c:	ldr	sl, [sp, #24]
   17b70:	add	sp, sp, #28
   17b74:	pop	{pc}		; (ldr pc, [sp], #4)
   17b78:	bl	10f48 <__errno_location@plt>
   17b7c:	str	r8, [r0]
   17b80:	b	17b5c <__assert_fail@plt+0x6b18>
   17b84:	cmp	r1, r3
   17b88:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17b8c:	mov	r4, r1
   17b90:	mov	r5, r3
   17b94:	strd	r6, [sp, #8]
   17b98:	mov	r6, r2
   17b9c:	mov	r7, r0
   17ba0:	str	r8, [sp, #16]
   17ba4:	str	lr, [sp, #20]
   17ba8:	bne	17be0 <__assert_fail@plt+0x6b9c>
   17bac:	mov	r2, r1
   17bb0:	mov	r1, r6
   17bb4:	bl	10e28 <memcmp@plt>
   17bb8:	subs	r8, r0, #0
   17bbc:	bne	17be0 <__assert_fail@plt+0x6b9c>
   17bc0:	bl	10f48 <__errno_location@plt>
   17bc4:	ldrd	r4, [sp]
   17bc8:	ldrd	r6, [sp, #8]
   17bcc:	str	r8, [r0]
   17bd0:	mov	r0, r8
   17bd4:	ldr	r8, [sp, #16]
   17bd8:	add	sp, sp, #20
   17bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   17be0:	mov	r3, r5
   17be4:	mov	r2, r6
   17be8:	ldr	r8, [sp, #16]
   17bec:	mov	r1, r4
   17bf0:	mov	r0, r7
   17bf4:	ldrd	r4, [sp]
   17bf8:	ldrd	r6, [sp, #8]
   17bfc:	ldr	lr, [sp, #20]
   17c00:	add	sp, sp, #24
   17c04:	b	17a34 <__assert_fail@plt+0x69f0>
   17c08:	umull	r2, r3, r1, r2
   17c0c:	cmp	r3, #0
   17c10:	bne	17c1c <__assert_fail@plt+0x6bd8>
   17c14:	mov	r1, r2
   17c18:	b	176b0 <__assert_fail@plt+0x666c>
   17c1c:	str	r4, [sp, #-8]!
   17c20:	str	lr, [sp, #4]
   17c24:	bl	10f48 <__errno_location@plt>
   17c28:	mov	r3, #12
   17c2c:	ldr	r4, [sp]
   17c30:	add	sp, sp, #4
   17c34:	str	r3, [r0]
   17c38:	mov	r0, #0
   17c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   17c40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17c44:	mov	r7, r0
   17c48:	ldr	r6, [pc, #72]	; 17c98 <__assert_fail@plt+0x6c54>
   17c4c:	ldr	r5, [pc, #72]	; 17c9c <__assert_fail@plt+0x6c58>
   17c50:	add	r6, pc, r6
   17c54:	add	r5, pc, r5
   17c58:	sub	r6, r6, r5
   17c5c:	mov	r8, r1
   17c60:	mov	r9, r2
   17c64:	bl	10d78 <fdopen@plt-0x20>
   17c68:	asrs	r6, r6, #2
   17c6c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17c70:	mov	r4, #0
   17c74:	add	r4, r4, #1
   17c78:	ldr	r3, [r5], #4
   17c7c:	mov	r2, r9
   17c80:	mov	r1, r8
   17c84:	mov	r0, r7
   17c88:	blx	r3
   17c8c:	cmp	r6, r4
   17c90:	bne	17c74 <__assert_fail@plt+0x6c30>
   17c94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17c98:			; <UNDEFINED> instruction: 0x000122bc
   17c9c:			; <UNDEFINED> instruction: 0x000122b4
   17ca0:	bx	lr
   17ca4:	ldr	r3, [pc, #12]	; 17cb8 <__assert_fail@plt+0x6c74>
   17ca8:	mov	r1, #0
   17cac:	add	r3, pc, r3
   17cb0:	ldr	r2, [r3]
   17cb4:	b	10f54 <__cxa_atexit@plt>
   17cb8:	andeq	r2, r1, r8, asr #8

Disassembly of section .fini:

00017cbc <.fini>:
   17cbc:	push	{r3, lr}
   17cc0:	pop	{r3, pc}
