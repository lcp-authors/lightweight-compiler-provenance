
../repos/coreutils/src/nl:     file format elf32-littlearm


Disassembly of section .init:

00011188 <.init>:
   11188:	push	{r3, lr}
   1118c:	bl	114fc <__assert_fail@plt+0x48>
   11190:	pop	{r3, pc}

Disassembly of section .plt:

00011194 <pthread_mutex_unlock@plt-0x14>:
   11194:	push	{lr}		; (str lr, [sp, #-4]!)
   11198:	ldr	lr, [pc, #4]	; 111a4 <pthread_mutex_unlock@plt-0x4>
   1119c:	add	lr, pc, lr
   111a0:	ldr	pc, [lr, #8]!
   111a4:	andeq	fp, r2, ip, asr lr

000111a8 <pthread_mutex_unlock@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #176128	; 0x2b000
   111b0:	ldr	pc, [ip, #3676]!	; 0xe5c

000111b4 <calloc@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #176128	; 0x2b000
   111bc:	ldr	pc, [ip, #3668]!	; 0xe54

000111c0 <fputs_unlocked@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #176128	; 0x2b000
   111c8:	ldr	pc, [ip, #3660]!	; 0xe4c

000111cc <wctype@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #176128	; 0x2b000
   111d4:	ldr	pc, [ip, #3652]!	; 0xe44

000111d8 <raise@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #176128	; 0x2b000
   111e0:	ldr	pc, [ip, #3644]!	; 0xe3c

000111e4 <wcrtomb@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #176128	; 0x2b000
   111ec:	ldr	pc, [ip, #3636]!	; 0xe34

000111f0 <iswctype@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #176128	; 0x2b000
   111f8:	ldr	pc, [ip, #3628]!	; 0xe2c

000111fc <strcmp@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #176128	; 0x2b000
   11204:	ldr	pc, [ip, #3620]!	; 0xe24

00011208 <posix_fadvise64@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #176128	; 0x2b000
   11210:	ldr	pc, [ip, #3612]!	; 0xe1c

00011214 <pthread_mutex_destroy@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #176128	; 0x2b000
   1121c:	ldr	pc, [ip, #3604]!	; 0xe14

00011220 <fflush@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #176128	; 0x2b000
   11228:	ldr	pc, [ip, #3596]!	; 0xe0c

0001122c <memmove@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #176128	; 0x2b000
   11234:	ldr	pc, [ip, #3588]!	; 0xe04

00011238 <free@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #176128	; 0x2b000
   11240:	ldr	pc, [ip, #3580]!	; 0xdfc

00011244 <pthread_mutex_lock@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #176128	; 0x2b000
   1124c:	ldr	pc, [ip, #3572]!	; 0xdf4

00011250 <_exit@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #176128	; 0x2b000
   11258:	ldr	pc, [ip, #3564]!	; 0xdec

0001125c <memcpy@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #176128	; 0x2b000
   11264:	ldr	pc, [ip, #3556]!	; 0xde4

00011268 <pthread_mutex_init@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #176128	; 0x2b000
   11270:	ldr	pc, [ip, #3548]!	; 0xddc

00011274 <towlower@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #176128	; 0x2b000
   1127c:	ldr	pc, [ip, #3540]!	; 0xdd4

00011280 <mbsinit@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #176128	; 0x2b000
   11288:	ldr	pc, [ip, #3532]!	; 0xdcc

0001128c <fwrite_unlocked@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #176128	; 0x2b000
   11294:	ldr	pc, [ip, #3524]!	; 0xdc4

00011298 <memcmp@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #176128	; 0x2b000
   112a0:	ldr	pc, [ip, #3516]!	; 0xdbc

000112a4 <stpcpy@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #176128	; 0x2b000
   112ac:	ldr	pc, [ip, #3508]!	; 0xdb4

000112b0 <dcgettext@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #176128	; 0x2b000
   112b8:	ldr	pc, [ip, #3500]!	; 0xdac

000112bc <realloc@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #176128	; 0x2b000
   112c4:	ldr	pc, [ip, #3492]!	; 0xda4

000112c8 <textdomain@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #176128	; 0x2b000
   112d0:	ldr	pc, [ip, #3484]!	; 0xd9c

000112d4 <iswprint@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #176128	; 0x2b000
   112dc:	ldr	pc, [ip, #3476]!	; 0xd94

000112e0 <fwrite@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #176128	; 0x2b000
   112e8:	ldr	pc, [ip, #3468]!	; 0xd8c

000112ec <lseek64@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #176128	; 0x2b000
   112f4:	ldr	pc, [ip, #3460]!	; 0xd84

000112f8 <__ctype_get_mb_cur_max@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #176128	; 0x2b000
   11300:	ldr	pc, [ip, #3452]!	; 0xd7c

00011304 <__fpending@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #176128	; 0x2b000
   1130c:	ldr	pc, [ip, #3444]!	; 0xd74

00011310 <mbrtowc@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #176128	; 0x2b000
   11318:	ldr	pc, [ip, #3436]!	; 0xd6c

0001131c <error@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #176128	; 0x2b000
   11324:	ldr	pc, [ip, #3428]!	; 0xd64

00011328 <malloc@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #176128	; 0x2b000
   11330:	ldr	pc, [ip, #3420]!	; 0xd5c

00011334 <__libc_start_main@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #176128	; 0x2b000
   1133c:	ldr	pc, [ip, #3412]!	; 0xd54

00011340 <__freading@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #176128	; 0x2b000
   11348:	ldr	pc, [ip, #3404]!	; 0xd4c

0001134c <__ctype_tolower_loc@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #176128	; 0x2b000
   11354:	ldr	pc, [ip, #3396]!	; 0xd44

00011358 <__ctype_toupper_loc@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #176128	; 0x2b000
   11360:	ldr	pc, [ip, #3388]!	; 0xd3c

00011364 <__gmon_start__@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #176128	; 0x2b000
   1136c:	ldr	pc, [ip, #3380]!	; 0xd34

00011370 <getopt_long@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #176128	; 0x2b000
   11378:	ldr	pc, [ip, #3372]!	; 0xd2c

0001137c <__ctype_b_loc@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #176128	; 0x2b000
   11384:	ldr	pc, [ip, #3364]!	; 0xd24

00011388 <exit@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #176128	; 0x2b000
   11390:	ldr	pc, [ip, #3356]!	; 0xd1c

00011394 <strlen@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #176128	; 0x2b000
   1139c:	ldr	pc, [ip, #3348]!	; 0xd14

000113a0 <strchr@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #176128	; 0x2b000
   113a8:	ldr	pc, [ip, #3340]!	; 0xd0c

000113ac <__errno_location@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #176128	; 0x2b000
   113b4:	ldr	pc, [ip, #3332]!	; 0xd04

000113b8 <iswalnum@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #176128	; 0x2b000
   113c0:	ldr	pc, [ip, #3324]!	; 0xcfc

000113c4 <__cxa_atexit@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #176128	; 0x2b000
   113cc:	ldr	pc, [ip, #3316]!	; 0xcf4

000113d0 <memset@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #176128	; 0x2b000
   113d8:	ldr	pc, [ip, #3308]!	; 0xcec

000113dc <btowc@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #176128	; 0x2b000
   113e4:	ldr	pc, [ip, #3300]!	; 0xce4

000113e8 <__printf_chk@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #176128	; 0x2b000
   113f0:	ldr	pc, [ip, #3292]!	; 0xcdc

000113f4 <fileno@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #176128	; 0x2b000
   113fc:	ldr	pc, [ip, #3284]!	; 0xcd4

00011400 <__fprintf_chk@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #176128	; 0x2b000
   11408:	ldr	pc, [ip, #3276]!	; 0xccc

0001140c <fclose@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #176128	; 0x2b000
   11414:	ldr	pc, [ip, #3268]!	; 0xcc4

00011418 <fseeko64@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #176128	; 0x2b000
   11420:	ldr	pc, [ip, #3260]!	; 0xcbc

00011424 <__uflow@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #176128	; 0x2b000
   1142c:	ldr	pc, [ip, #3252]!	; 0xcb4

00011430 <__overflow@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #176128	; 0x2b000
   11438:	ldr	pc, [ip, #3244]!	; 0xcac

0001143c <setlocale@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #176128	; 0x2b000
   11444:	ldr	pc, [ip, #3236]!	; 0xca4

00011448 <strrchr@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #176128	; 0x2b000
   11450:	ldr	pc, [ip, #3228]!	; 0xc9c

00011454 <nl_langinfo@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #176128	; 0x2b000
   1145c:	ldr	pc, [ip, #3220]!	; 0xc94

00011460 <clearerr_unlocked@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #176128	; 0x2b000
   11468:	ldr	pc, [ip, #3212]!	; 0xc8c

0001146c <__strtoll_internal@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #176128	; 0x2b000
   11474:	ldr	pc, [ip, #3204]!	; 0xc84

00011478 <fopen64@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #176128	; 0x2b000
   11480:	ldr	pc, [ip, #3196]!	; 0xc7c

00011484 <bindtextdomain@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #176128	; 0x2b000
   1148c:	ldr	pc, [ip, #3188]!	; 0xc74

00011490 <towupper@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #176128	; 0x2b000
   11498:	ldr	pc, [ip, #3180]!	; 0xc6c

0001149c <strncmp@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #176128	; 0x2b000
   114a4:	ldr	pc, [ip, #3172]!	; 0xc64

000114a8 <abort@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #176128	; 0x2b000
   114b0:	ldr	pc, [ip, #3164]!	; 0xc5c

000114b4 <__assert_fail@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #176128	; 0x2b000
   114bc:	ldr	pc, [ip, #3156]!	; 0xc54

Disassembly of section .text:

000114c0 <.text>:
   114c0:	mov	fp, #0
   114c4:	mov	lr, #0
   114c8:	pop	{r1}		; (ldr r1, [sp], #4)
   114cc:	mov	r2, sp
   114d0:	push	{r2}		; (str r2, [sp, #-4]!)
   114d4:	push	{r0}		; (str r0, [sp, #-4]!)
   114d8:	ldr	ip, [pc, #16]	; 114f0 <__assert_fail@plt+0x3c>
   114dc:	push	{ip}		; (str ip, [sp, #-4]!)
   114e0:	ldr	r0, [pc, #12]	; 114f4 <__assert_fail@plt+0x40>
   114e4:	ldr	r3, [pc, #12]	; 114f8 <__assert_fail@plt+0x44>
   114e8:	bl	11334 <__libc_start_main@plt>
   114ec:	bl	114a8 <abort@plt>
   114f0:	ldrdeq	fp, [r2], -r4
   114f4:	ldrdeq	r1, [r1], -r4
   114f8:	andeq	fp, r2, r4, ror r2
   114fc:	ldr	r3, [pc, #20]	; 11518 <__assert_fail@plt+0x64>
   11500:	ldr	r2, [pc, #20]	; 1151c <__assert_fail@plt+0x68>
   11504:	add	r3, pc, r3
   11508:	ldr	r2, [r3, r2]
   1150c:	cmp	r2, #0
   11510:	bxeq	lr
   11514:	b	11364 <__gmon_start__@plt>
   11518:	strdeq	fp, [r2], -r4
   1151c:	andeq	r0, r0, r4, lsl r1
   11520:	ldr	r0, [pc, #24]	; 11540 <__assert_fail@plt+0x8c>
   11524:	ldr	r3, [pc, #24]	; 11544 <__assert_fail@plt+0x90>
   11528:	cmp	r3, r0
   1152c:	bxeq	lr
   11530:	ldr	r3, [pc, #16]	; 11548 <__assert_fail@plt+0x94>
   11534:	cmp	r3, #0
   11538:	bxeq	lr
   1153c:	bx	r3
   11540:	andeq	sp, r3, r8, lsr #3
   11544:	andeq	sp, r3, r8, lsr #3
   11548:	andeq	r0, r0, r0
   1154c:	ldr	r0, [pc, #36]	; 11578 <__assert_fail@plt+0xc4>
   11550:	ldr	r1, [pc, #36]	; 1157c <__assert_fail@plt+0xc8>
   11554:	sub	r1, r1, r0
   11558:	asr	r1, r1, #2
   1155c:	add	r1, r1, r1, lsr #31
   11560:	asrs	r1, r1, #1
   11564:	bxeq	lr
   11568:	ldr	r3, [pc, #16]	; 11580 <__assert_fail@plt+0xcc>
   1156c:	cmp	r3, #0
   11570:	bxeq	lr
   11574:	bx	r3
   11578:	andeq	sp, r3, r8, lsr #3
   1157c:	andeq	sp, r3, r8, lsr #3
   11580:	andeq	r0, r0, r0
   11584:	push	{r4, lr}
   11588:	ldr	r4, [pc, #24]	; 115a8 <__assert_fail@plt+0xf4>
   1158c:	ldrb	r3, [r4]
   11590:	cmp	r3, #0
   11594:	popne	{r4, pc}
   11598:	bl	11520 <__assert_fail@plt+0x6c>
   1159c:	mov	r3, #1
   115a0:	strb	r3, [r4]
   115a4:	pop	{r4, pc}
   115a8:	andeq	sp, r3, ip, asr #3
   115ac:	b	1154c <__assert_fail@plt+0x98>
   115b0:	push	{fp, lr}
   115b4:	mov	fp, sp
   115b8:	sub	sp, sp, #56	; 0x38
   115bc:	mov	r4, r0
   115c0:	cmp	r0, #0
   115c4:	bne	11890 <__assert_fail@plt+0x3dc>
   115c8:	movw	r1, #45859	; 0xb323
   115cc:	mov	r0, #0
   115d0:	mov	r2, #5
   115d4:	movt	r1, #2
   115d8:	bl	112b0 <dcgettext@plt>
   115dc:	mov	r1, r0
   115e0:	movw	r0, #54652	; 0xd57c
   115e4:	movt	r0, #3
   115e8:	ldr	r2, [r0]
   115ec:	mov	r0, #1
   115f0:	bl	113e8 <__printf_chk@plt>
   115f4:	movw	r1, #45892	; 0xb344
   115f8:	mov	r0, #0
   115fc:	mov	r2, #5
   11600:	movt	r1, #2
   11604:	bl	112b0 <dcgettext@plt>
   11608:	movw	r7, #53700	; 0xd1c4
   1160c:	movt	r7, #3
   11610:	ldr	r1, [r7]
   11614:	bl	111c0 <fputs_unlocked@plt>
   11618:	movw	r1, #47886	; 0xbb0e
   1161c:	mov	r0, #0
   11620:	mov	r2, #5
   11624:	movt	r1, #2
   11628:	bl	112b0 <dcgettext@plt>
   1162c:	ldr	r1, [r7]
   11630:	bl	111c0 <fputs_unlocked@plt>
   11634:	movw	r1, #47942	; 0xbb46
   11638:	mov	r0, #0
   1163c:	mov	r2, #5
   11640:	movt	r1, #2
   11644:	bl	112b0 <dcgettext@plt>
   11648:	ldr	r1, [r7]
   1164c:	bl	111c0 <fputs_unlocked@plt>
   11650:	movw	r1, #45954	; 0xb382
   11654:	mov	r0, #0
   11658:	mov	r2, #5
   1165c:	movt	r1, #2
   11660:	bl	112b0 <dcgettext@plt>
   11664:	ldr	r1, [r7]
   11668:	bl	111c0 <fputs_unlocked@plt>
   1166c:	movw	r1, #46164	; 0xb454
   11670:	mov	r0, #0
   11674:	mov	r2, #5
   11678:	movt	r1, #2
   1167c:	bl	112b0 <dcgettext@plt>
   11680:	ldr	r1, [r7]
   11684:	bl	111c0 <fputs_unlocked@plt>
   11688:	movw	r1, #46607	; 0xb60f
   1168c:	mov	r0, #0
   11690:	mov	r2, #5
   11694:	movt	r1, #2
   11698:	bl	112b0 <dcgettext@plt>
   1169c:	ldr	r1, [r7]
   116a0:	bl	111c0 <fputs_unlocked@plt>
   116a4:	movw	r1, #46750	; 0xb69e
   116a8:	mov	r0, #0
   116ac:	mov	r2, #5
   116b0:	movt	r1, #2
   116b4:	bl	112b0 <dcgettext@plt>
   116b8:	ldr	r1, [r7]
   116bc:	bl	111c0 <fputs_unlocked@plt>
   116c0:	movw	r1, #46795	; 0xb6cb
   116c4:	mov	r0, #0
   116c8:	mov	r2, #5
   116cc:	movt	r1, #2
   116d0:	bl	112b0 <dcgettext@plt>
   116d4:	ldr	r1, [r7]
   116d8:	bl	111c0 <fputs_unlocked@plt>
   116dc:	movw	r1, #46849	; 0xb701
   116e0:	mov	r0, #0
   116e4:	mov	r2, #5
   116e8:	movt	r1, #2
   116ec:	bl	112b0 <dcgettext@plt>
   116f0:	ldr	r1, [r7]
   116f4:	bl	111c0 <fputs_unlocked@plt>
   116f8:	movw	r1, #47172	; 0xb844
   116fc:	mov	r0, #0
   11700:	mov	r2, #5
   11704:	movt	r1, #2
   11708:	bl	112b0 <dcgettext@plt>
   1170c:	ldr	r1, [r7]
   11710:	bl	111c0 <fputs_unlocked@plt>
   11714:	movw	r1, #47374	; 0xb90e
   11718:	mov	r0, #0
   1171c:	mov	r2, #5
   11720:	movt	r1, #2
   11724:	bl	112b0 <dcgettext@plt>
   11728:	ldr	r1, [r7]
   1172c:	bl	111c0 <fputs_unlocked@plt>
   11730:	movw	r0, #48832	; 0xbec0
   11734:	mov	r2, #48	; 0x30
   11738:	mov	r6, sp
   1173c:	movw	r5, #47521	; 0xb9a1
   11740:	movt	r0, #2
   11744:	movt	r5, #2
   11748:	add	r1, r0, #32
   1174c:	add	r3, r0, #16
   11750:	vld1.64	{d18-d19}, [r0], r2
   11754:	vld1.64	{d16-d17}, [r1]
   11758:	vld1.64	{d20-d21}, [r3]
   1175c:	add	r1, r6, #32
   11760:	vldr	d22, [r0]
   11764:	add	r0, r6, #16
   11768:	vst1.64	{d16-d17}, [r1]
   1176c:	movw	r1, #48017	; 0xbb91
   11770:	vst1.64	{d20-d21}, [r0]
   11774:	mov	r0, r6
   11778:	vst1.64	{d18-d19}, [r0], r2
   1177c:	movt	r1, #2
   11780:	vstr	d22, [r0]
   11784:	mov	r0, r5
   11788:	bl	111fc <strcmp@plt>
   1178c:	cmp	r0, #0
   11790:	ldrne	r1, [r6, #8]!
   11794:	cmpne	r1, #0
   11798:	bne	11784 <__assert_fail@plt+0x2d0>
   1179c:	ldr	r6, [r6, #4]
   117a0:	movw	r1, #48112	; 0xbbf0
   117a4:	mov	r0, #0
   117a8:	mov	r2, #5
   117ac:	movt	r1, #2
   117b0:	bl	112b0 <dcgettext@plt>
   117b4:	movw	r2, #47842	; 0xbae2
   117b8:	movw	r3, #48135	; 0xbc07
   117bc:	mov	r1, r0
   117c0:	mov	r0, #1
   117c4:	movt	r2, #2
   117c8:	movt	r3, #2
   117cc:	bl	113e8 <__printf_chk@plt>
   117d0:	cmp	r6, #0
   117d4:	mov	r0, #5
   117d8:	mov	r1, #0
   117dc:	moveq	r6, r5
   117e0:	bl	1143c <setlocale@plt>
   117e4:	cmp	r0, #0
   117e8:	beq	11820 <__assert_fail@plt+0x36c>
   117ec:	movw	r1, #48175	; 0xbc2f
   117f0:	mov	r2, #3
   117f4:	movt	r1, #2
   117f8:	bl	1149c <strncmp@plt>
   117fc:	cmp	r0, #0
   11800:	beq	11820 <__assert_fail@plt+0x36c>
   11804:	movw	r1, #48179	; 0xbc33
   11808:	mov	r0, #0
   1180c:	mov	r2, #5
   11810:	movt	r1, #2
   11814:	bl	112b0 <dcgettext@plt>
   11818:	ldr	r1, [r7]
   1181c:	bl	111c0 <fputs_unlocked@plt>
   11820:	movw	r1, #48250	; 0xbc7a
   11824:	mov	r0, #0
   11828:	mov	r2, #5
   1182c:	movt	r1, #2
   11830:	bl	112b0 <dcgettext@plt>
   11834:	movw	r2, #48135	; 0xbc07
   11838:	mov	r1, r0
   1183c:	mov	r0, #1
   11840:	mov	r3, r5
   11844:	movt	r2, #2
   11848:	bl	113e8 <__printf_chk@plt>
   1184c:	movw	r1, #48277	; 0xbc95
   11850:	mov	r0, #0
   11854:	mov	r2, #5
   11858:	movt	r1, #2
   1185c:	bl	112b0 <dcgettext@plt>
   11860:	movw	r3, #48518	; 0xbd86
   11864:	mov	r1, r0
   11868:	movw	r0, #48045	; 0xbbad
   1186c:	cmp	r6, r5
   11870:	mov	r2, r6
   11874:	movt	r0, #2
   11878:	movt	r3, #2
   1187c:	moveq	r3, r0
   11880:	mov	r0, #1
   11884:	bl	113e8 <__printf_chk@plt>
   11888:	mov	r0, r4
   1188c:	bl	11388 <exit@plt>
   11890:	movw	r0, #53688	; 0xd1b8
   11894:	movw	r1, #45820	; 0xb2fc
   11898:	mov	r2, #5
   1189c:	movt	r0, #3
   118a0:	movt	r1, #2
   118a4:	ldr	r5, [r0]
   118a8:	mov	r0, #0
   118ac:	bl	112b0 <dcgettext@plt>
   118b0:	mov	r2, r0
   118b4:	movw	r0, #54652	; 0xd57c
   118b8:	mov	r1, #1
   118bc:	movt	r0, #3
   118c0:	ldr	r3, [r0]
   118c4:	mov	r0, r5
   118c8:	bl	11400 <__fprintf_chk@plt>
   118cc:	mov	r0, r4
   118d0:	bl	11388 <exit@plt>
   118d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118d8:	add	fp, sp, #28
   118dc:	sub	sp, sp, #36	; 0x24
   118e0:	mov	r9, r0
   118e4:	ldr	r0, [r1]
   118e8:	mov	r5, r1
   118ec:	bl	12d60 <__assert_fail@plt+0x18ac>
   118f0:	movw	r1, #48518	; 0xbd86
   118f4:	mov	r0, #6
   118f8:	movt	r1, #2
   118fc:	bl	1143c <setlocale@plt>
   11900:	movw	r6, #47846	; 0xbae6
   11904:	movw	r1, #47524	; 0xb9a4
   11908:	movt	r6, #2
   1190c:	movt	r1, #2
   11910:	mov	r0, r6
   11914:	bl	11484 <bindtextdomain@plt>
   11918:	mov	r0, r6
   1191c:	bl	112c8 <textdomain@plt>
   11920:	movw	r0, #10284	; 0x282c
   11924:	movt	r0, #1
   11928:	bl	2b2d8 <__assert_fail@plt+0x19e24>
   1192c:	movw	r0, #54480	; 0xd4d0
   11930:	mov	r1, #0
   11934:	movw	r7, #47548	; 0xb9bc
   11938:	mov	r4, #0
   1193c:	mov	sl, #1
   11940:	movt	r0, #3
   11944:	movt	r7, #2
   11948:	strb	r1, [r0]
   1194c:	movw	r0, #53544	; 0xd128
   11950:	movt	r0, #3
   11954:	add	r1, r0, #4
   11958:	add	r0, r0, #8
   1195c:	str	r1, [sp, #32]
   11960:	movw	r1, #54580	; 0xd534
   11964:	str	r0, [sp, #28]
   11968:	movt	r1, #3
   1196c:	add	r0, r1, #32
   11970:	str	r0, [sp, #24]
   11974:	b	119b0 <__assert_fail@plt+0x4fc>
   11978:	mov	r2, #5
   1197c:	bl	112b0 <dcgettext@plt>
   11980:	mov	r7, r0
   11984:	movw	r0, #53704	; 0xd1c8
   11988:	movt	r0, #3
   1198c:	ldr	r0, [r0]
   11990:	bl	14cdc <__assert_fail@plt+0x3828>
   11994:	mov	r3, r0
   11998:	mov	r2, r7
   1199c:	movw	r7, #47548	; 0xb9bc
   119a0:	mov	r0, #0
   119a4:	mov	r1, #0
   119a8:	movt	r7, #2
   119ac:	bl	1131c <error@plt>
   119b0:	movw	r3, #48576	; 0xbdc0
   119b4:	mov	r0, r9
   119b8:	mov	r1, r5
   119bc:	mov	r2, r7
   119c0:	mov	r6, sl
   119c4:	str	r4, [sp]
   119c8:	movt	r3, #2
   119cc:	bl	11370 <getopt_long@plt>
   119d0:	add	r0, r0, #3
   119d4:	mov	sl, #0
   119d8:	cmp	r0, #122	; 0x7a
   119dc:	bhi	119b0 <__assert_fail@plt+0x4fc>
   119e0:	add	r1, pc, #4
   119e4:	mov	sl, #0
   119e8:	ldr	pc, [r1, r0, lsl #2]
   119ec:	andeq	r2, r1, ip, asr #2
   119f0:	andeq	r2, r1, r0, lsr #3
   119f4:	andeq	r1, r1, r4, ror #31
   119f8:			; <UNDEFINED> instruction: 0x000119b0
   119fc:			; <UNDEFINED> instruction: 0x000119b0
   11a00:			; <UNDEFINED> instruction: 0x000119b0
   11a04:			; <UNDEFINED> instruction: 0x000119b0
   11a08:			; <UNDEFINED> instruction: 0x000119b0
   11a0c:			; <UNDEFINED> instruction: 0x000119b0
   11a10:			; <UNDEFINED> instruction: 0x000119b0
   11a14:			; <UNDEFINED> instruction: 0x000119b0
   11a18:			; <UNDEFINED> instruction: 0x000119b0
   11a1c:			; <UNDEFINED> instruction: 0x000119b0
   11a20:			; <UNDEFINED> instruction: 0x000119b0
   11a24:			; <UNDEFINED> instruction: 0x000119b0
   11a28:			; <UNDEFINED> instruction: 0x000119b0
   11a2c:			; <UNDEFINED> instruction: 0x000119b0
   11a30:			; <UNDEFINED> instruction: 0x000119b0
   11a34:			; <UNDEFINED> instruction: 0x000119b0
   11a38:			; <UNDEFINED> instruction: 0x000119b0
   11a3c:			; <UNDEFINED> instruction: 0x000119b0
   11a40:			; <UNDEFINED> instruction: 0x000119b0
   11a44:			; <UNDEFINED> instruction: 0x000119b0
   11a48:			; <UNDEFINED> instruction: 0x000119b0
   11a4c:			; <UNDEFINED> instruction: 0x000119b0
   11a50:			; <UNDEFINED> instruction: 0x000119b0
   11a54:			; <UNDEFINED> instruction: 0x000119b0
   11a58:			; <UNDEFINED> instruction: 0x000119b0
   11a5c:			; <UNDEFINED> instruction: 0x000119b0
   11a60:			; <UNDEFINED> instruction: 0x000119b0
   11a64:			; <UNDEFINED> instruction: 0x000119b0
   11a68:			; <UNDEFINED> instruction: 0x000119b0
   11a6c:			; <UNDEFINED> instruction: 0x000119b0
   11a70:			; <UNDEFINED> instruction: 0x000119b0
   11a74:			; <UNDEFINED> instruction: 0x000119b0
   11a78:			; <UNDEFINED> instruction: 0x000119b0
   11a7c:			; <UNDEFINED> instruction: 0x000119b0
   11a80:			; <UNDEFINED> instruction: 0x000119b0
   11a84:			; <UNDEFINED> instruction: 0x000119b0
   11a88:			; <UNDEFINED> instruction: 0x000119b0
   11a8c:			; <UNDEFINED> instruction: 0x000119b0
   11a90:			; <UNDEFINED> instruction: 0x000119b0
   11a94:			; <UNDEFINED> instruction: 0x000119b0
   11a98:			; <UNDEFINED> instruction: 0x000119b0
   11a9c:			; <UNDEFINED> instruction: 0x000119b0
   11aa0:			; <UNDEFINED> instruction: 0x000119b0
   11aa4:			; <UNDEFINED> instruction: 0x000119b0
   11aa8:			; <UNDEFINED> instruction: 0x000119b0
   11aac:			; <UNDEFINED> instruction: 0x000119b0
   11ab0:			; <UNDEFINED> instruction: 0x000119b0
   11ab4:			; <UNDEFINED> instruction: 0x000119b0
   11ab8:			; <UNDEFINED> instruction: 0x000119b0
   11abc:			; <UNDEFINED> instruction: 0x000119b0
   11ac0:			; <UNDEFINED> instruction: 0x000119b0
   11ac4:			; <UNDEFINED> instruction: 0x000119b0
   11ac8:			; <UNDEFINED> instruction: 0x000119b0
   11acc:			; <UNDEFINED> instruction: 0x000119b0
   11ad0:			; <UNDEFINED> instruction: 0x000119b0
   11ad4:			; <UNDEFINED> instruction: 0x000119b0
   11ad8:			; <UNDEFINED> instruction: 0x000119b0
   11adc:			; <UNDEFINED> instruction: 0x000119b0
   11ae0:			; <UNDEFINED> instruction: 0x000119b0
   11ae4:			; <UNDEFINED> instruction: 0x000119b0
   11ae8:			; <UNDEFINED> instruction: 0x000119b0
   11aec:			; <UNDEFINED> instruction: 0x000119b0
   11af0:			; <UNDEFINED> instruction: 0x000119b0
   11af4:			; <UNDEFINED> instruction: 0x000119b0
   11af8:			; <UNDEFINED> instruction: 0x000119b0
   11afc:			; <UNDEFINED> instruction: 0x000119b0
   11b00:			; <UNDEFINED> instruction: 0x000119b0
   11b04:			; <UNDEFINED> instruction: 0x000119b0
   11b08:			; <UNDEFINED> instruction: 0x000119b0
   11b0c:			; <UNDEFINED> instruction: 0x000119b0
   11b10:			; <UNDEFINED> instruction: 0x000119b0
   11b14:			; <UNDEFINED> instruction: 0x000119b0
   11b18:			; <UNDEFINED> instruction: 0x000119b0
   11b1c:			; <UNDEFINED> instruction: 0x000119b0
   11b20:			; <UNDEFINED> instruction: 0x000119b0
   11b24:			; <UNDEFINED> instruction: 0x000119b0
   11b28:			; <UNDEFINED> instruction: 0x000119b0
   11b2c:			; <UNDEFINED> instruction: 0x000119b0
   11b30:			; <UNDEFINED> instruction: 0x000119b0
   11b34:			; <UNDEFINED> instruction: 0x000119b0
   11b38:			; <UNDEFINED> instruction: 0x000119b0
   11b3c:			; <UNDEFINED> instruction: 0x000119b0
   11b40:			; <UNDEFINED> instruction: 0x000119b0
   11b44:			; <UNDEFINED> instruction: 0x000119b0
   11b48:			; <UNDEFINED> instruction: 0x000119b0
   11b4c:			; <UNDEFINED> instruction: 0x000119b0
   11b50:			; <UNDEFINED> instruction: 0x000119b0
   11b54:			; <UNDEFINED> instruction: 0x000119b0
   11b58:			; <UNDEFINED> instruction: 0x000119b0
   11b5c:			; <UNDEFINED> instruction: 0x000119b0
   11b60:			; <UNDEFINED> instruction: 0x000119b0
   11b64:			; <UNDEFINED> instruction: 0x000119b0
   11b68:			; <UNDEFINED> instruction: 0x000119b0
   11b6c:			; <UNDEFINED> instruction: 0x000119b0
   11b70:			; <UNDEFINED> instruction: 0x000119b0
   11b74:			; <UNDEFINED> instruction: 0x000119b0
   11b78:			; <UNDEFINED> instruction: 0x000119b0
   11b7c:			; <UNDEFINED> instruction: 0x000119b0
   11b80:	ldrdeq	r1, [r1], -r8
   11b84:			; <UNDEFINED> instruction: 0x000119b0
   11b88:	andeq	r1, r1, r0, ror lr
   11b8c:			; <UNDEFINED> instruction: 0x000119b0
   11b90:	ldrdeq	r1, [r1], -ip
   11b94:			; <UNDEFINED> instruction: 0x000119b0
   11b98:	andeq	r1, r1, r8, lsr #27
   11b9c:	andeq	r1, r1, r8, asr #25
   11ba0:			; <UNDEFINED> instruction: 0x000119b0
   11ba4:			; <UNDEFINED> instruction: 0x000119b0
   11ba8:	andeq	r1, r1, r8, lsr sp
   11bac:			; <UNDEFINED> instruction: 0x000119b0
   11bb0:	andeq	r1, r1, r0, lsr ip
   11bb4:			; <UNDEFINED> instruction: 0x000119b0
   11bb8:	andeq	r1, r1, r8, ror #27
   11bbc:			; <UNDEFINED> instruction: 0x000119b0
   11bc0:			; <UNDEFINED> instruction: 0x000119b0
   11bc4:	andeq	r1, r1, r0, lsl ip
   11bc8:			; <UNDEFINED> instruction: 0x000119b0
   11bcc:			; <UNDEFINED> instruction: 0x000119b0
   11bd0:	andeq	r1, r1, r0, lsl #28
   11bd4:	andeq	r1, r1, r0, lsl pc
   11bd8:	ldr	r0, [sp, #32]
   11bdc:	movw	r1, #54580	; 0xd534
   11be0:	movw	r2, #53968	; 0xd2d0
   11be4:	movt	r1, #3
   11be8:	movt	r2, #3
   11bec:	bl	121c8 <__assert_fail@plt+0xd14>
   11bf0:	cmp	r0, #0
   11bf4:	mov	sl, r6
   11bf8:	bne	119b0 <__assert_fail@plt+0x4fc>
   11bfc:	movw	r1, #47605	; 0xb9f5
   11c00:	mov	sl, #0
   11c04:	mov	r0, #0
   11c08:	movt	r1, #2
   11c0c:	b	11978 <__assert_fail@plt+0x4c4>
   11c10:	movw	r0, #53704	; 0xd1c8
   11c14:	movw	r1, #53544	; 0xd128
   11c18:	mov	sl, r6
   11c1c:	movt	r0, #3
   11c20:	movt	r1, #3
   11c24:	ldr	r0, [r0]
   11c28:	str	r0, [r1, #12]
   11c2c:	b	119b0 <__assert_fail@plt+0x4fc>
   11c30:	movw	r0, #53704	; 0xd1c8
   11c34:	movw	r1, #47799	; 0xbab7
   11c38:	movt	r0, #3
   11c3c:	movt	r1, #2
   11c40:	ldr	r7, [r0]
   11c44:	mov	r0, r7
   11c48:	bl	111fc <strcmp@plt>
   11c4c:	cmp	r0, #0
   11c50:	beq	11f98 <__assert_fail@plt+0xae4>
   11c54:	movw	r1, #47802	; 0xbaba
   11c58:	mov	r0, r7
   11c5c:	movt	r1, #2
   11c60:	bl	111fc <strcmp@plt>
   11c64:	cmp	r0, #0
   11c68:	beq	11fac <__assert_fail@plt+0xaf8>
   11c6c:	movw	r1, #47805	; 0xbabd
   11c70:	mov	r0, r7
   11c74:	movt	r1, #2
   11c78:	bl	111fc <strcmp@plt>
   11c7c:	cmp	r0, #0
   11c80:	beq	11fc0 <__assert_fail@plt+0xb0c>
   11c84:	movw	r1, #47808	; 0xbac0
   11c88:	mov	r0, #0
   11c8c:	mov	r2, #5
   11c90:	mov	sl, #0
   11c94:	movt	r1, #2
   11c98:	bl	112b0 <dcgettext@plt>
   11c9c:	mov	r7, r0
   11ca0:	movw	r0, #53704	; 0xd1c8
   11ca4:	movt	r0, #3
   11ca8:	ldr	r0, [r0]
   11cac:	bl	14cdc <__assert_fail@plt+0x3828>
   11cb0:	mov	r3, r0
   11cb4:	mov	r0, #0
   11cb8:	mov	r1, #0
   11cbc:	mov	r2, r7
   11cc0:	bl	1131c <error@plt>
   11cc4:	b	11fd8 <__assert_fail@plt+0xb24>
   11cc8:	movw	r0, #53704	; 0xd1c8
   11ccc:	movw	r1, #47702	; 0xba56
   11cd0:	mov	r2, #5
   11cd4:	movt	r0, #3
   11cd8:	movt	r1, #2
   11cdc:	ldr	r7, [r0]
   11ce0:	mov	r0, #0
   11ce4:	bl	112b0 <dcgettext@plt>
   11ce8:	mvn	r1, #0
   11cec:	str	r0, [sp, #12]
   11cf0:	mov	r0, r7
   11cf4:	movw	r7, #47548	; 0xb9bc
   11cf8:	mov	r2, #0
   11cfc:	mov	r3, #-2147483648	; 0x80000000
   11d00:	str	r4, [sp, #16]
   11d04:	str	r1, [sp]
   11d08:	mvn	r1, #-2147483648	; 0x80000000
   11d0c:	movt	r7, #2
   11d10:	str	r1, [sp, #4]
   11d14:	movw	r1, #48518	; 0xbd86
   11d18:	movt	r1, #2
   11d1c:	str	r1, [sp, #8]
   11d20:	bl	292a4 <__assert_fail@plt+0x17df0>
   11d24:	movw	r2, #53544	; 0xd128
   11d28:	mov	sl, r6
   11d2c:	movt	r2, #3
   11d30:	strd	r0, [r2, #40]	; 0x28
   11d34:	b	119b0 <__assert_fail@plt+0x4fc>
   11d38:	movw	r0, #53704	; 0xd1c8
   11d3c:	movw	r1, #47732	; 0xba74
   11d40:	mov	r2, #5
   11d44:	movt	r0, #3
   11d48:	movt	r1, #2
   11d4c:	ldr	r7, [r0]
   11d50:	mov	r0, #0
   11d54:	bl	112b0 <dcgettext@plt>
   11d58:	mvn	r1, #0
   11d5c:	str	r0, [sp, #12]
   11d60:	mov	r0, r7
   11d64:	movw	r7, #47548	; 0xb9bc
   11d68:	mov	r2, #1
   11d6c:	mov	r3, #0
   11d70:	str	r4, [sp, #16]
   11d74:	str	r1, [sp]
   11d78:	mvn	r1, #-2147483648	; 0x80000000
   11d7c:	movt	r7, #2
   11d80:	str	r1, [sp, #4]
   11d84:	movw	r1, #48518	; 0xbd86
   11d88:	movt	r1, #2
   11d8c:	str	r1, [sp, #8]
   11d90:	bl	292a4 <__assert_fail@plt+0x17df0>
   11d94:	movw	r2, #53544	; 0xd128
   11d98:	mov	sl, r6
   11d9c:	movt	r2, #3
   11da0:	strd	r0, [r2, #48]	; 0x30
   11da4:	b	119b0 <__assert_fail@plt+0x4fc>
   11da8:	movw	r0, #54480	; 0xd4d0
   11dac:	movw	r2, #53712	; 0xd1d0
   11db0:	movt	r0, #3
   11db4:	movt	r2, #3
   11db8:	add	r1, r0, #68	; 0x44
   11dbc:	movw	r0, #53544	; 0xd128
   11dc0:	movt	r0, #3
   11dc4:	bl	121c8 <__assert_fail@plt+0xd14>
   11dc8:	cmp	r0, #0
   11dcc:	mov	sl, r6
   11dd0:	bne	119b0 <__assert_fail@plt+0x4fc>
   11dd4:	movw	r1, #47570	; 0xb9d2
   11dd8:	mov	sl, #0
   11ddc:	mov	r0, #0
   11de0:	movt	r1, #2
   11de4:	b	11978 <__assert_fail@plt+0x4c4>
   11de8:	movw	r0, #54480	; 0xd4d0
   11dec:	mov	r1, #1
   11df0:	mov	sl, r6
   11df4:	movt	r0, #3
   11df8:	strb	r1, [r0, #1]
   11dfc:	b	119b0 <__assert_fail@plt+0x4fc>
   11e00:	movw	r0, #53704	; 0xd1c8
   11e04:	movw	r1, #47673	; 0xba39
   11e08:	mov	r2, #5
   11e0c:	movt	r0, #3
   11e10:	movt	r1, #2
   11e14:	ldr	r7, [r0]
   11e18:	mov	r0, #0
   11e1c:	bl	112b0 <dcgettext@plt>
   11e20:	mvn	r1, #0
   11e24:	str	r0, [sp, #12]
   11e28:	mov	r0, r7
   11e2c:	movw	r7, #47548	; 0xb9bc
   11e30:	mov	r2, #0
   11e34:	mov	r3, #-2147483648	; 0x80000000
   11e38:	str	r4, [sp, #16]
   11e3c:	str	r1, [sp]
   11e40:	mvn	r1, #-2147483648	; 0x80000000
   11e44:	movt	r7, #2
   11e48:	str	r1, [sp, #4]
   11e4c:	movw	r1, #48518	; 0xbd86
   11e50:	movt	r1, #2
   11e54:	str	r1, [sp, #8]
   11e58:	bl	292a4 <__assert_fail@plt+0x17df0>
   11e5c:	movw	r2, #53544	; 0xd128
   11e60:	mov	sl, r6
   11e64:	movt	r2, #3
   11e68:	strd	r0, [r2, #32]
   11e6c:	b	119b0 <__assert_fail@plt+0x4fc>
   11e70:	movw	r0, #53704	; 0xd1c8
   11e74:	movt	r0, #3
   11e78:	ldr	r8, [r0]
   11e7c:	mov	r0, r8
   11e80:	bl	11394 <strlen@plt>
   11e84:	sub	r0, r0, #1
   11e88:	cmp	r0, #1
   11e8c:	bhi	11f84 <__assert_fail@plt+0xad0>
   11e90:	ldrb	r0, [r8]
   11e94:	mov	sl, r6
   11e98:	cmp	r0, #0
   11e9c:	beq	119b0 <__assert_fail@plt+0x4fc>
   11ea0:	movw	r0, #53544	; 0xd128
   11ea4:	movw	r2, #53704	; 0xd1c8
   11ea8:	movt	r0, #3
   11eac:	movt	r2, #3
   11eb0:	ldr	r0, [r0, #24]
   11eb4:	add	r1, r8, #1
   11eb8:	str	r1, [r2]
   11ebc:	ldrb	r1, [r8]
   11ec0:	strb	r1, [r0], #1
   11ec4:	ldr	r8, [r2]
   11ec8:	ldrb	r1, [r8]
   11ecc:	cmp	r1, #0
   11ed0:	bne	11eb4 <__assert_fail@plt+0xa00>
   11ed4:	mov	sl, r6
   11ed8:	b	119b0 <__assert_fail@plt+0x4fc>
   11edc:	ldr	r0, [sp, #28]
   11ee0:	ldr	r1, [sp, #24]
   11ee4:	movw	r2, #54224	; 0xd3d0
   11ee8:	movt	r2, #3
   11eec:	bl	121c8 <__assert_fail@plt+0xd14>
   11ef0:	cmp	r0, #0
   11ef4:	mov	sl, r6
   11ef8:	bne	119b0 <__assert_fail@plt+0x4fc>
   11efc:	movw	r1, #47638	; 0xba16
   11f00:	mov	sl, #0
   11f04:	mov	r0, #0
   11f08:	movt	r1, #2
   11f0c:	b	11978 <__assert_fail@plt+0x4c4>
   11f10:	movw	r0, #53704	; 0xd1c8
   11f14:	movw	r1, #47767	; 0xba97
   11f18:	mov	r2, #5
   11f1c:	movt	r0, #3
   11f20:	movt	r1, #2
   11f24:	ldr	r7, [r0]
   11f28:	mov	r0, #0
   11f2c:	bl	112b0 <dcgettext@plt>
   11f30:	mvn	r1, #-2147483648	; 0x80000000
   11f34:	mov	r2, #0
   11f38:	str	r0, [sp, #12]
   11f3c:	mov	r0, r7
   11f40:	movw	r7, #47548	; 0xb9bc
   11f44:	mov	r3, #0
   11f48:	mov	r4, #0
   11f4c:	str	r1, [sp]
   11f50:	movw	r1, #48518	; 0xbd86
   11f54:	str	r2, [sp, #4]
   11f58:	str	r2, [sp, #16]
   11f5c:	mov	r2, #1
   11f60:	movt	r7, #2
   11f64:	movt	r1, #2
   11f68:	str	r1, [sp, #8]
   11f6c:	bl	292a4 <__assert_fail@plt+0x17df0>
   11f70:	movw	r1, #53544	; 0xd128
   11f74:	mov	sl, r6
   11f78:	movt	r1, #3
   11f7c:	str	r0, [r1, #16]
   11f80:	b	119b0 <__assert_fail@plt+0x4fc>
   11f84:	movw	r0, #53544	; 0xd128
   11f88:	mov	sl, r6
   11f8c:	movt	r0, #3
   11f90:	str	r8, [r0, #24]
   11f94:	b	119b0 <__assert_fail@plt+0x4fc>
   11f98:	movw	r0, #53544	; 0xd128
   11f9c:	movw	r1, #48800	; 0xbea0
   11fa0:	movt	r0, #3
   11fa4:	movt	r1, #2
   11fa8:	b	11fd0 <__assert_fail@plt+0xb1c>
   11fac:	movw	r0, #53544	; 0xd128
   11fb0:	movw	r1, #48809	; 0xbea9
   11fb4:	movt	r0, #3
   11fb8:	movt	r1, #2
   11fbc:	b	11fd0 <__assert_fail@plt+0xb1c>
   11fc0:	movw	r0, #53544	; 0xd128
   11fc4:	movw	r1, #48817	; 0xbeb1
   11fc8:	movt	r0, #3
   11fcc:	movt	r1, #2
   11fd0:	mov	sl, r6
   11fd4:	str	r1, [r0, #20]
   11fd8:	movw	r7, #47548	; 0xb9bc
   11fdc:	movt	r7, #2
   11fe0:	b	119b0 <__assert_fail@plt+0x4fc>
   11fe4:	tst	r6, #1
   11fe8:	beq	121a8 <__assert_fail@plt+0xcf4>
   11fec:	mov	r8, r5
   11ff0:	movw	r5, #53544	; 0xd128
   11ff4:	movt	r5, #3
   11ff8:	ldr	r0, [r5, #24]
   11ffc:	bl	11394 <strlen@plt>
   12000:	movw	r4, #54480	; 0xd4d0
   12004:	mov	r7, r0
   12008:	add	r0, r0, r0, lsl #1
   1200c:	movt	r4, #3
   12010:	str	r0, [r4, #4]
   12014:	add	r0, r0, #1
   12018:	bl	28bf8 <__assert_fail@plt+0x17744>
   1201c:	ldr	r1, [r5, #24]
   12020:	str	r0, [r4, #8]
   12024:	bl	112a4 <stpcpy@plt>
   12028:	ldr	r1, [r5, #24]
   1202c:	bl	112a4 <stpcpy@plt>
   12030:	ldr	r1, [r5, #24]
   12034:	bl	112a4 <stpcpy@plt>
   12038:	ldr	r1, [r4, #8]
   1203c:	lsl	r0, r7, #1
   12040:	add	r3, r4, #12
   12044:	add	r1, r1, r7
   12048:	stm	r3, {r0, r1, r7}
   1204c:	add	r2, r1, r7
   12050:	add	r0, r4, #56	; 0x38
   12054:	str	r2, [r4, #24]
   12058:	bl	12b00 <__assert_fail@plt+0x164c>
   1205c:	ldr	r0, [r5, #12]
   12060:	bl	11394 <strlen@plt>
   12064:	mov	r7, r0
   12068:	ldr	r0, [r5, #16]
   1206c:	add	r0, r7, r0
   12070:	add	r0, r0, #1
   12074:	bl	28bf8 <__assert_fail@plt+0x17744>
   12078:	mov	r6, r0
   1207c:	str	r0, [r4, #28]
   12080:	ldr	r0, [r5, #16]
   12084:	mov	r1, #32
   12088:	add	r7, r0, r7
   1208c:	mov	r0, r6
   12090:	mov	r2, r7
   12094:	bl	113d0 <memset@plt>
   12098:	mov	r0, #0
   1209c:	ldrd	r2, [r5, #32]
   120a0:	strb	r0, [r6, r7]
   120a4:	movw	r7, #53680	; 0xd1b0
   120a8:	movw	r0, #54580	; 0xd534
   120ac:	movt	r7, #3
   120b0:	movt	r0, #3
   120b4:	ldr	r1, [r7]
   120b8:	str	r0, [r4, #36]	; 0x24
   120bc:	ldr	r0, [r5, #4]
   120c0:	str	r3, [r4, #44]	; 0x2c
   120c4:	str	r2, [r4, #40]	; 0x28
   120c8:	cmp	r1, r9
   120cc:	str	r0, [r4, #32]
   120d0:	bne	120e8 <__assert_fail@plt+0xc34>
   120d4:	movw	r0, #48988	; 0xbf5c
   120d8:	movt	r0, #2
   120dc:	bl	122cc <__assert_fail@plt+0xe18>
   120e0:	mov	r6, r0
   120e4:	b	12114 <__assert_fail@plt+0xc60>
   120e8:	mov	r6, #1
   120ec:	bge	12114 <__assert_fail@plt+0xc60>
   120f0:	mov	r6, #1
   120f4:	ldr	r0, [r8, r1, lsl #2]
   120f8:	bl	122cc <__assert_fail@plt+0xe18>
   120fc:	ldr	r1, [r7]
   12100:	and	r6, r6, r0
   12104:	add	r1, r1, #1
   12108:	cmp	r1, r9
   1210c:	str	r1, [r7]
   12110:	blt	120f4 <__assert_fail@plt+0xc40>
   12114:	movw	r0, #54480	; 0xd4d0
   12118:	movt	r0, #3
   1211c:	ldrb	r0, [r0]
   12120:	cmp	r0, #1
   12124:	bne	12140 <__assert_fail@plt+0xc8c>
   12128:	movw	r0, #53696	; 0xd1c0
   1212c:	movt	r0, #3
   12130:	ldr	r0, [r0]
   12134:	bl	12958 <__assert_fail@plt+0x14a4>
   12138:	cmn	r0, #1
   1213c:	beq	121b0 <__assert_fail@plt+0xcfc>
   12140:	eor	r0, r6, #1
   12144:	sub	sp, fp, #28
   12148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1214c:	movw	r0, #53600	; 0xd160
   12150:	movw	r2, #47870	; 0xbafe
   12154:	mov	r1, #0
   12158:	movw	r7, #47856	; 0xbaf0
   1215c:	movt	r0, #3
   12160:	movt	r2, #2
   12164:	str	r1, [sp, #8]
   12168:	movw	r1, #47521	; 0xb9a1
   1216c:	movt	r7, #2
   12170:	ldr	r3, [r0]
   12174:	movw	r0, #53700	; 0xd1c4
   12178:	str	r2, [sp, #4]
   1217c:	movw	r2, #47842	; 0xbae2
   12180:	movt	r1, #2
   12184:	str	r7, [sp]
   12188:	movt	r0, #3
   1218c:	movt	r2, #2
   12190:	ldr	r0, [r0]
   12194:	bl	289c4 <__assert_fail@plt+0x17510>
   12198:	mov	r0, #0
   1219c:	bl	11388 <exit@plt>
   121a0:	mov	r0, #0
   121a4:	bl	115b0 <__assert_fail@plt+0xfc>
   121a8:	mov	r0, #1
   121ac:	bl	115b0 <__assert_fail@plt+0xfc>
   121b0:	bl	113ac <__errno_location@plt>
   121b4:	ldr	r1, [r0]
   121b8:	movw	r2, #48988	; 0xbf5c
   121bc:	mov	r0, #1
   121c0:	movt	r2, #2
   121c4:	bl	1131c <error@plt>
   121c8:	push	{r4, r5, r6, sl, fp, lr}
   121cc:	add	fp, sp, #16
   121d0:	movw	ip, #53704	; 0xd1c8
   121d4:	mov	r6, r1
   121d8:	mov	r1, r0
   121dc:	movt	ip, #3
   121e0:	ldr	r5, [ip]
   121e4:	ldrb	r0, [r5]
   121e8:	sub	r3, r0, #97	; 0x61
   121ec:	mov	r0, #0
   121f0:	cmp	r3, #19
   121f4:	bhi	12258 <__assert_fail@plt+0xda4>
   121f8:	add	r4, pc, #0
   121fc:	ldr	pc, [r4, r3, lsl #2]
   12200:	andeq	r2, r1, r0, asr r2
   12204:	andeq	r2, r1, r8, asr r2
   12208:	andeq	r2, r1, r8, asr r2
   1220c:	andeq	r2, r1, r8, asr r2
   12210:	andeq	r2, r1, r8, asr r2
   12214:	andeq	r2, r1, r8, asr r2
   12218:	andeq	r2, r1, r8, asr r2
   1221c:	andeq	r2, r1, r8, asr r2
   12220:	andeq	r2, r1, r8, asr r2
   12224:	andeq	r2, r1, r8, asr r2
   12228:	andeq	r2, r1, r8, asr r2
   1222c:	andeq	r2, r1, r8, asr r2
   12230:	andeq	r2, r1, r8, asr r2
   12234:	andeq	r2, r1, r0, asr r2
   12238:	andeq	r2, r1, r8, asr r2
   1223c:	andeq	r2, r1, ip, asr r2
   12240:	andeq	r2, r1, r8, asr r2
   12244:	andeq	r2, r1, r8, asr r2
   12248:	andeq	r2, r1, r8, asr r2
   1224c:	andeq	r2, r1, r0, asr r2
   12250:	mov	r0, #1
   12254:	str	r5, [r1]
   12258:	pop	{r4, r5, r6, sl, fp, pc}
   1225c:	add	r0, r5, #1
   12260:	str	r0, [ip]
   12264:	mov	r0, #0
   12268:	str	r5, [r1]
   1226c:	movw	r1, #710	; 0x2c6
   12270:	str	r0, [r6]
   12274:	str	r0, [r6, #4]
   12278:	str	r2, [r6, #16]
   1227c:	str	r0, [r6, #20]
   12280:	movw	r0, #54960	; 0xd6b0
   12284:	ldr	r5, [ip]
   12288:	movt	r0, #3
   1228c:	str	r1, [r0]
   12290:	mov	r0, r5
   12294:	bl	11394 <strlen@plt>
   12298:	mov	r1, r0
   1229c:	mov	r0, r5
   122a0:	mov	r2, r6
   122a4:	bl	14d00 <__assert_fail@plt+0x384c>
   122a8:	mov	r3, r0
   122ac:	mov	r0, #1
   122b0:	cmp	r3, #0
   122b4:	popeq	{r4, r5, r6, sl, fp, pc}
   122b8:	movw	r2, #47602	; 0xb9f2
   122bc:	mov	r0, #1
   122c0:	mov	r1, #0
   122c4:	movt	r2, #2
   122c8:	bl	1131c <error@plt>
   122cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122d0:	add	fp, sp, #28
   122d4:	sub	sp, sp, #20
   122d8:	movw	r1, #48988	; 0xbf5c
   122dc:	mov	r6, r0
   122e0:	movt	r1, #2
   122e4:	bl	111fc <strcmp@plt>
   122e8:	cmp	r0, #0
   122ec:	beq	1234c <__assert_fail@plt+0xe98>
   122f0:	movw	r1, #47700	; 0xba54
   122f4:	mov	r0, r6
   122f8:	movt	r1, #2
   122fc:	bl	11478 <fopen64@plt>
   12300:	mov	r5, r0
   12304:	cmp	r0, #0
   12308:	bne	12368 <__assert_fail@plt+0xeb4>
   1230c:	bl	113ac <__errno_location@plt>
   12310:	ldr	r5, [r0]
   12314:	mov	r0, #0
   12318:	mov	r1, #3
   1231c:	mov	r2, r6
   12320:	mov	r4, #0
   12324:	bl	14a30 <__assert_fail@plt+0x357c>
   12328:	movw	r2, #47602	; 0xb9f2
   1232c:	mov	r3, r0
   12330:	mov	r0, #0
   12334:	mov	r1, r5
   12338:	movt	r2, #2
   1233c:	bl	1131c <error@plt>
   12340:	mov	r0, r4
   12344:	sub	sp, fp, #28
   12348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1234c:	movw	r0, #54480	; 0xd4d0
   12350:	mov	r1, #1
   12354:	movt	r0, #3
   12358:	strb	r1, [r0]
   1235c:	movw	r0, #53696	; 0xd1c0
   12360:	movt	r0, #3
   12364:	ldr	r5, [r0]
   12368:	mov	r0, r5
   1236c:	mov	r1, #2
   12370:	str	r6, [sp, #12]
   12374:	bl	1291c <__assert_fail@plt+0x1468>
   12378:	movw	r6, #54480	; 0xd4d0
   1237c:	mov	r1, r5
   12380:	movt	r6, #3
   12384:	add	r0, r6, #56	; 0x38
   12388:	str	r0, [sp, #16]
   1238c:	bl	12b14 <__assert_fail@plt+0x1660>
   12390:	cmp	r0, #0
   12394:	beq	12710 <__assert_fail@plt+0x125c>
   12398:	movw	r8, #53544	; 0xd128
   1239c:	movt	r8, #3
   123a0:	b	12414 <__assert_fail@plt+0xf60>
   123a4:	ldr	r0, [r8]
   123a8:	add	r1, r6, #68	; 0x44
   123ac:	b	123bc <__assert_fail@plt+0xf08>
   123b0:	ldr	r0, [r8, #4]
   123b4:	movw	r1, #54580	; 0xd534
   123b8:	movt	r1, #3
   123bc:	strd	r0, [r6, #32]
   123c0:	ldrb	r0, [r6, #1]
   123c4:	cmp	r0, #0
   123c8:	moveq	r0, #0
   123cc:	strbeq	r0, [r6, #2]
   123d0:	ldrdeq	r0, [r8, #32]
   123d4:	strdeq	r0, [r6, #40]	; 0x28
   123d8:	movw	r0, #53700	; 0xd1c4
   123dc:	movt	r0, #3
   123e0:	ldr	r0, [r0]
   123e4:	ldr	r1, [r0, #20]
   123e8:	ldr	r2, [r0, #24]
   123ec:	cmp	r1, r2
   123f0:	bcs	12408 <__assert_fail@plt+0xf54>
   123f4:	add	r2, r1, #1
   123f8:	str	r2, [r0, #20]
   123fc:	mov	r0, #10
   12400:	strb	r0, [r1]
   12404:	b	126fc <__assert_fail@plt+0x1248>
   12408:	mov	r1, #10
   1240c:	bl	11430 <__overflow@plt>
   12410:	b	126fc <__assert_fail@plt+0x1248>
   12414:	ldr	sl, [r6, #60]	; 0x3c
   12418:	sub	r7, sl, #1
   1241c:	cmp	r7, #2
   12420:	ldrcs	r9, [r6, #20]
   12424:	cmpcs	r9, #2
   12428:	bcs	1256c <__assert_fail@plt+0x10b8>
   1242c:	ldr	r0, [r6, #32]
   12430:	ldrb	r0, [r0]
   12434:	sub	r0, r0, #97	; 0x61
   12438:	cmp	r0, #19
   1243c:	bhi	126e0 <__assert_fail@plt+0x122c>
   12440:	add	r1, pc, #0
   12444:	ldr	pc, [r1, r0, lsl #2]
   12448:	muleq	r1, r8, r4
   1244c:	andeq	r2, r1, r0, ror #13
   12450:	andeq	r2, r1, r0, ror #13
   12454:	andeq	r2, r1, r0, ror #13
   12458:	andeq	r2, r1, r0, ror #13
   1245c:	andeq	r2, r1, r0, ror #13
   12460:	andeq	r2, r1, r0, ror #13
   12464:	andeq	r2, r1, r0, ror #13
   12468:	andeq	r2, r1, r0, ror #13
   1246c:	andeq	r2, r1, r0, ror #13
   12470:	andeq	r2, r1, r0, ror #13
   12474:	andeq	r2, r1, r0, ror #13
   12478:	andeq	r2, r1, r0, ror #13
   1247c:	andeq	r2, r1, ip, asr #13
   12480:	andeq	r2, r1, r0, ror #13
   12484:	andeq	r2, r1, r0, lsl #12
   12488:	andeq	r2, r1, r0, ror #13
   1248c:	andeq	r2, r1, r0, ror #13
   12490:	andeq	r2, r1, r0, ror #13
   12494:	andeq	r2, r1, r4, lsr r6
   12498:	ldrd	r0, [r8, #48]	; 0x30
   1249c:	subs	r2, r0, #2
   124a0:	sbcs	r2, r1, #0
   124a4:	blt	1263c <__assert_fail@plt+0x1188>
   124a8:	cmp	sl, #1
   124ac:	bgt	124d0 <__assert_fail@plt+0x101c>
   124b0:	ldrd	r2, [r6, #48]	; 0x30
   124b4:	adds	r2, r2, #1
   124b8:	adc	r3, r3, #0
   124bc:	eor	r0, r2, r0
   124c0:	eor	r1, r3, r1
   124c4:	strd	r2, [r6, #48]	; 0x30
   124c8:	orrs	r0, r0, r1
   124cc:	bne	126cc <__assert_fail@plt+0x1218>
   124d0:	ldrb	r0, [r6, #2]
   124d4:	cmp	r0, #1
   124d8:	beq	127bc <__assert_fail@plt+0x1308>
   124dc:	ldr	r0, [r6, #40]	; 0x28
   124e0:	ldr	r3, [r6, #44]	; 0x2c
   124e4:	ldr	r7, [r8, #12]
   124e8:	ldr	r2, [r8, #16]
   124ec:	ldr	r1, [r8, #20]
   124f0:	stm	sp, {r0, r3, r7}
   124f4:	mov	r0, #1
   124f8:	bl	113e8 <__printf_chk@plt>
   124fc:	ldrd	r0, [r8, #40]	; 0x28
   12500:	ldrd	r2, [r6, #40]	; 0x28
   12504:	adds	r0, r2, r0
   12508:	mov	r2, #0
   1250c:	adc	r7, r3, r1
   12510:	str	r0, [r6, #40]	; 0x28
   12514:	cmn	r3, #1
   12518:	mov	r0, #0
   1251c:	movwgt	r0, #1
   12520:	cmn	r7, #1
   12524:	str	r7, [r6, #44]	; 0x2c
   12528:	movwgt	r2, #1
   1252c:	subs	r2, r0, r2
   12530:	movwne	r2, #1
   12534:	cmn	r1, #1
   12538:	mov	r1, #0
   1253c:	movwgt	r1, #1
   12540:	sub	r0, r0, r1
   12544:	clz	r0, r0
   12548:	lsr	r0, r0, #5
   1254c:	and	r0, r0, r2
   12550:	cmp	r0, #1
   12554:	moveq	r0, #1
   12558:	strbeq	r0, [r6, #2]
   1255c:	mov	r0, #0
   12560:	str	r0, [r6, #48]	; 0x30
   12564:	str	r0, [r6, #52]	; 0x34
   12568:	b	126e0 <__assert_fail@plt+0x122c>
   1256c:	ldr	r0, [r8, #24]
   12570:	ldr	r4, [r6, #64]	; 0x40
   12574:	ldrh	r0, [r0]
   12578:	ldrh	r1, [r4]
   1257c:	cmp	r1, r0
   12580:	bne	1242c <__assert_fail@plt+0xf78>
   12584:	ldr	r0, [r6, #4]
   12588:	cmp	r7, r0
   1258c:	bne	125a8 <__assert_fail@plt+0x10f4>
   12590:	ldr	r1, [r6, #8]
   12594:	mov	r0, r4
   12598:	mov	r2, r7
   1259c:	bl	11298 <memcmp@plt>
   125a0:	cmp	r0, #0
   125a4:	beq	123a4 <__assert_fail@plt+0xef0>
   125a8:	ldr	r0, [r6, #12]
   125ac:	cmp	r7, r0
   125b0:	bne	125cc <__assert_fail@plt+0x1118>
   125b4:	ldr	r1, [r6, #16]
   125b8:	mov	r0, r4
   125bc:	mov	r2, r7
   125c0:	bl	11298 <memcmp@plt>
   125c4:	cmp	r0, #0
   125c8:	beq	123b0 <__assert_fail@plt+0xefc>
   125cc:	cmp	r7, r9
   125d0:	bne	1242c <__assert_fail@plt+0xf78>
   125d4:	ldr	r1, [r6, #24]
   125d8:	mov	r0, r4
   125dc:	mov	r2, r7
   125e0:	bl	11298 <memcmp@plt>
   125e4:	cmp	r0, #0
   125e8:	bne	1242c <__assert_fail@plt+0xf78>
   125ec:	movw	r0, #54580	; 0xd534
   125f0:	movt	r0, #3
   125f4:	add	r1, r0, #32
   125f8:	ldr	r0, [r8, #8]
   125fc:	b	123bc <__assert_fail@plt+0xf08>
   12600:	ldr	r0, [r6, #36]	; 0x24
   12604:	ldr	r1, [r6, #64]	; 0x40
   12608:	mov	r2, #0
   1260c:	mov	r3, #0
   12610:	str	r7, [sp]
   12614:	str	r2, [sp, #4]
   12618:	mov	r2, r7
   1261c:	bl	19ebc <__assert_fail@plt+0x8a08>
   12620:	cmn	r0, #1
   12624:	beq	126cc <__assert_fail@plt+0x1218>
   12628:	cmn	r0, #2
   1262c:	bne	1263c <__assert_fail@plt+0x1188>
   12630:	b	127e0 <__assert_fail@plt+0x132c>
   12634:	cmp	sl, #2
   12638:	blt	126cc <__assert_fail@plt+0x1218>
   1263c:	ldrb	r0, [r6, #2]
   12640:	cmp	r0, #1
   12644:	beq	127bc <__assert_fail@plt+0x1308>
   12648:	ldr	r0, [r6, #40]	; 0x28
   1264c:	ldr	r3, [r6, #44]	; 0x2c
   12650:	ldr	r7, [r8, #12]
   12654:	ldr	r2, [r8, #16]
   12658:	ldr	r1, [r8, #20]
   1265c:	stm	sp, {r0, r3, r7}
   12660:	mov	r0, #1
   12664:	bl	113e8 <__printf_chk@plt>
   12668:	ldrd	r0, [r8, #40]	; 0x28
   1266c:	ldrd	r2, [r6, #40]	; 0x28
   12670:	adds	r0, r2, r0
   12674:	mov	r2, #0
   12678:	adc	r7, r3, r1
   1267c:	str	r0, [r6, #40]	; 0x28
   12680:	cmn	r3, #1
   12684:	mov	r0, #0
   12688:	movwgt	r0, #1
   1268c:	cmn	r7, #1
   12690:	str	r7, [r6, #44]	; 0x2c
   12694:	movwgt	r2, #1
   12698:	subs	r2, r0, r2
   1269c:	movwne	r2, #1
   126a0:	cmn	r1, #1
   126a4:	mov	r1, #0
   126a8:	movwgt	r1, #1
   126ac:	sub	r0, r0, r1
   126b0:	clz	r0, r0
   126b4:	lsr	r0, r0, #5
   126b8:	and	r0, r0, r2
   126bc:	cmp	r0, #1
   126c0:	moveq	r0, #1
   126c4:	strbeq	r0, [r6, #2]
   126c8:	b	126e0 <__assert_fail@plt+0x122c>
   126cc:	movw	r0, #53700	; 0xd1c4
   126d0:	movt	r0, #3
   126d4:	ldr	r1, [r0]
   126d8:	ldr	r0, [r6, #28]
   126dc:	bl	111c0 <fputs_unlocked@plt>
   126e0:	movw	r0, #53700	; 0xd1c4
   126e4:	ldr	r2, [r6, #60]	; 0x3c
   126e8:	mov	r1, #1
   126ec:	movt	r0, #3
   126f0:	ldr	r3, [r0]
   126f4:	ldr	r0, [r6, #64]	; 0x40
   126f8:	bl	1128c <fwrite_unlocked@plt>
   126fc:	ldr	r0, [sp, #16]
   12700:	mov	r1, r5
   12704:	bl	12b14 <__assert_fail@plt+0x1660>
   12708:	cmp	r0, #0
   1270c:	bne	12414 <__assert_fail@plt+0xf60>
   12710:	bl	113ac <__errno_location@plt>
   12714:	ldr	r1, [r5]
   12718:	mov	r4, r0
   1271c:	ldr	r0, [r0]
   12720:	ldr	r7, [sp, #12]
   12724:	lsl	r1, r1, #26
   12728:	and	r6, r0, r1, asr #31
   1272c:	movw	r1, #48988	; 0xbf5c
   12730:	mov	r0, r7
   12734:	movt	r1, #2
   12738:	bl	111fc <strcmp@plt>
   1273c:	cmp	r0, #0
   12740:	beq	1279c <__assert_fail@plt+0x12e8>
   12744:	mov	r0, r5
   12748:	bl	12958 <__assert_fail@plt+0x14a4>
   1274c:	cmp	r6, #0
   12750:	bne	1275c <__assert_fail@plt+0x12a8>
   12754:	cmp	r0, #0
   12758:	ldrne	r6, [r4]
   1275c:	cmp	r6, #0
   12760:	beq	127ac <__assert_fail@plt+0x12f8>
   12764:	mov	r0, #0
   12768:	mov	r1, #3
   1276c:	mov	r2, r7
   12770:	mov	r4, #0
   12774:	bl	14a30 <__assert_fail@plt+0x357c>
   12778:	movw	r2, #47602	; 0xb9f2
   1277c:	mov	r3, r0
   12780:	mov	r0, #0
   12784:	mov	r1, r6
   12788:	movt	r2, #2
   1278c:	bl	1131c <error@plt>
   12790:	mov	r0, r4
   12794:	sub	sp, fp, #28
   12798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1279c:	mov	r0, r5
   127a0:	bl	11460 <clearerr_unlocked@plt>
   127a4:	cmp	r6, #0
   127a8:	bne	12764 <__assert_fail@plt+0x12b0>
   127ac:	mov	r4, #1
   127b0:	mov	r0, r4
   127b4:	sub	sp, fp, #28
   127b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127bc:	movw	r1, #48554	; 0xbdaa
   127c0:	mov	r0, #0
   127c4:	mov	r2, #5
   127c8:	movt	r1, #2
   127cc:	bl	112b0 <dcgettext@plt>
   127d0:	mov	r2, r0
   127d4:	mov	r0, #1
   127d8:	mov	r1, #0
   127dc:	bl	1131c <error@plt>
   127e0:	bl	113ac <__errno_location@plt>
   127e4:	ldr	r4, [r0]
   127e8:	movw	r1, #48519	; 0xbd87
   127ec:	mov	r0, #0
   127f0:	mov	r2, #5
   127f4:	movt	r1, #2
   127f8:	bl	112b0 <dcgettext@plt>
   127fc:	mov	r2, r0
   12800:	mov	r0, #1
   12804:	mov	r1, r4
   12808:	bl	1131c <error@plt>
   1280c:	movw	r1, #54644	; 0xd574
   12810:	movt	r1, #3
   12814:	str	r0, [r1, #4]
   12818:	bx	lr
   1281c:	movw	r1, #54644	; 0xd574
   12820:	movt	r1, #3
   12824:	strb	r0, [r1]
   12828:	bx	lr
   1282c:	push	{r4, r5, r6, sl, fp, lr}
   12830:	add	fp, sp, #16
   12834:	sub	sp, sp, #8
   12838:	movw	r0, #53700	; 0xd1c4
   1283c:	movt	r0, #3
   12840:	ldr	r0, [r0]
   12844:	bl	2ace4 <__assert_fail@plt+0x19830>
   12848:	cmp	r0, #0
   1284c:	beq	12874 <__assert_fail@plt+0x13c0>
   12850:	movw	r5, #54644	; 0xd574
   12854:	movt	r5, #3
   12858:	ldrb	r0, [r5]
   1285c:	cmp	r0, #0
   12860:	beq	128a0 <__assert_fail@plt+0x13ec>
   12864:	bl	113ac <__errno_location@plt>
   12868:	ldr	r0, [r0]
   1286c:	cmp	r0, #32
   12870:	bne	128a0 <__assert_fail@plt+0x13ec>
   12874:	movw	r0, #53688	; 0xd1b8
   12878:	movt	r0, #3
   1287c:	ldr	r0, [r0]
   12880:	bl	2ace4 <__assert_fail@plt+0x19830>
   12884:	cmp	r0, #0
   12888:	subeq	sp, fp, #16
   1288c:	popeq	{r4, r5, r6, sl, fp, pc}
   12890:	movw	r0, #53604	; 0xd164
   12894:	movt	r0, #3
   12898:	ldr	r0, [r0]
   1289c:	bl	11250 <_exit@plt>
   128a0:	movw	r1, #48903	; 0xbf07
   128a4:	mov	r0, #0
   128a8:	mov	r2, #5
   128ac:	movt	r1, #2
   128b0:	bl	112b0 <dcgettext@plt>
   128b4:	ldr	r6, [r5, #4]
   128b8:	mov	r4, r0
   128bc:	bl	113ac <__errno_location@plt>
   128c0:	ldr	r5, [r0]
   128c4:	cmp	r6, #0
   128c8:	bne	128e4 <__assert_fail@plt+0x1430>
   128cc:	movw	r2, #47602	; 0xb9f2
   128d0:	mov	r0, #0
   128d4:	mov	r1, r5
   128d8:	mov	r3, r4
   128dc:	movt	r2, #2
   128e0:	b	12904 <__assert_fail@plt+0x1450>
   128e4:	mov	r0, r6
   128e8:	bl	14954 <__assert_fail@plt+0x34a0>
   128ec:	movw	r2, #48915	; 0xbf13
   128f0:	mov	r3, r0
   128f4:	str	r4, [sp]
   128f8:	mov	r0, #0
   128fc:	mov	r1, r5
   12900:	movt	r2, #2
   12904:	bl	1131c <error@plt>
   12908:	movw	r0, #53604	; 0xd164
   1290c:	movt	r0, #3
   12910:	ldr	r0, [r0]
   12914:	bl	11250 <_exit@plt>
   12918:	b	11208 <posix_fadvise64@plt>
   1291c:	cmp	r0, #0
   12920:	bxeq	lr
   12924:	push	{r4, sl, fp, lr}
   12928:	add	fp, sp, #8
   1292c:	sub	sp, sp, #16
   12930:	mov	r4, r1
   12934:	bl	113f4 <fileno@plt>
   12938:	mov	r1, #0
   1293c:	mov	r2, #0
   12940:	mov	r3, #0
   12944:	str	r1, [sp]
   12948:	stmib	sp, {r1, r4}
   1294c:	bl	11208 <posix_fadvise64@plt>
   12950:	sub	sp, fp, #8
   12954:	pop	{r4, sl, fp, pc}
   12958:	push	{r4, r5, r6, sl, fp, lr}
   1295c:	add	fp, sp, #16
   12960:	sub	sp, sp, #8
   12964:	mov	r4, r0
   12968:	bl	113f4 <fileno@plt>
   1296c:	cmn	r0, #1
   12970:	ble	129e4 <__assert_fail@plt+0x1530>
   12974:	mov	r0, r4
   12978:	bl	11340 <__freading@plt>
   1297c:	cmp	r0, #0
   12980:	beq	129ac <__assert_fail@plt+0x14f8>
   12984:	mov	r0, r4
   12988:	bl	113f4 <fileno@plt>
   1298c:	mov	r1, #1
   12990:	mov	r2, #0
   12994:	mov	r3, #0
   12998:	str	r1, [sp]
   1299c:	bl	112ec <lseek64@plt>
   129a0:	and	r0, r0, r1
   129a4:	cmn	r0, #1
   129a8:	beq	129e4 <__assert_fail@plt+0x1530>
   129ac:	mov	r0, r4
   129b0:	bl	129f4 <__assert_fail@plt+0x1540>
   129b4:	cmp	r0, #0
   129b8:	beq	129e4 <__assert_fail@plt+0x1530>
   129bc:	bl	113ac <__errno_location@plt>
   129c0:	ldr	r6, [r0]
   129c4:	mov	r5, r0
   129c8:	mov	r0, r4
   129cc:	bl	1140c <fclose@plt>
   129d0:	cmp	r6, #0
   129d4:	strne	r6, [r5]
   129d8:	mvnne	r0, #0
   129dc:	sub	sp, fp, #16
   129e0:	pop	{r4, r5, r6, sl, fp, pc}
   129e4:	mov	r0, r4
   129e8:	sub	sp, fp, #16
   129ec:	pop	{r4, r5, r6, sl, fp, lr}
   129f0:	b	1140c <fclose@plt>
   129f4:	push	{r4, sl, fp, lr}
   129f8:	add	fp, sp, #8
   129fc:	sub	sp, sp, #8
   12a00:	mov	r4, r0
   12a04:	cmp	r0, #0
   12a08:	beq	12a24 <__assert_fail@plt+0x1570>
   12a0c:	mov	r0, r4
   12a10:	bl	11340 <__freading@plt>
   12a14:	cmp	r0, #0
   12a18:	ldrbne	r0, [r4, #1]
   12a1c:	tstne	r0, #1
   12a20:	bne	12a34 <__assert_fail@plt+0x1580>
   12a24:	mov	r0, r4
   12a28:	sub	sp, fp, #8
   12a2c:	pop	{r4, sl, fp, lr}
   12a30:	b	11220 <fflush@plt>
   12a34:	mov	r0, #1
   12a38:	mov	r2, #0
   12a3c:	mov	r3, #0
   12a40:	str	r0, [sp]
   12a44:	mov	r0, r4
   12a48:	bl	12a5c <__assert_fail@plt+0x15a8>
   12a4c:	mov	r0, r4
   12a50:	sub	sp, fp, #8
   12a54:	pop	{r4, sl, fp, lr}
   12a58:	b	11220 <fflush@plt>
   12a5c:	push	{r4, r5, r6, r7, fp, lr}
   12a60:	add	fp, sp, #16
   12a64:	sub	sp, sp, #8
   12a68:	mov	r4, r0
   12a6c:	ldr	r0, [r0, #4]
   12a70:	mov	r5, r3
   12a74:	mov	r6, r2
   12a78:	ldr	r1, [r4, #8]
   12a7c:	cmp	r1, r0
   12a80:	bne	12a9c <__assert_fail@plt+0x15e8>
   12a84:	ldrd	r0, [r4, #16]
   12a88:	cmp	r1, r0
   12a8c:	bne	12a9c <__assert_fail@plt+0x15e8>
   12a90:	ldr	r0, [r4, #36]	; 0x24
   12a94:	cmp	r0, #0
   12a98:	beq	12ab4 <__assert_fail@plt+0x1600>
   12a9c:	mov	r0, r4
   12aa0:	mov	r2, r6
   12aa4:	mov	r3, r5
   12aa8:	sub	sp, fp, #16
   12aac:	pop	{r4, r5, r6, r7, fp, lr}
   12ab0:	b	11418 <fseeko64@plt>
   12ab4:	ldr	r7, [fp, #8]
   12ab8:	mov	r0, r4
   12abc:	bl	113f4 <fileno@plt>
   12ac0:	mov	r2, r6
   12ac4:	mov	r3, r5
   12ac8:	str	r7, [sp]
   12acc:	bl	112ec <lseek64@plt>
   12ad0:	and	r2, r0, r1
   12ad4:	cmn	r2, #1
   12ad8:	mvneq	r0, #0
   12adc:	subeq	sp, fp, #16
   12ae0:	popeq	{r4, r5, r6, r7, fp, pc}
   12ae4:	strd	r0, [r4, #80]	; 0x50
   12ae8:	ldr	r0, [r4]
   12aec:	bic	r0, r0, #16
   12af0:	str	r0, [r4]
   12af4:	mov	r0, #0
   12af8:	sub	sp, fp, #16
   12afc:	pop	{r4, r5, r6, r7, fp, pc}
   12b00:	mov	r1, #0
   12b04:	str	r1, [r0]
   12b08:	str	r1, [r0, #4]
   12b0c:	str	r1, [r0, #8]
   12b10:	bx	lr
   12b14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b18:	add	fp, sp, #28
   12b1c:	sub	sp, sp, #4
   12b20:	mov	r9, r0
   12b24:	ldrb	r0, [r1]
   12b28:	tst	r0, #16
   12b2c:	bne	12c04 <__assert_fail@plt+0x1750>
   12b30:	ldr	r4, [r9, #8]
   12b34:	ldr	r0, [r9]
   12b38:	mov	r5, r1
   12b3c:	mov	r8, #1
   12b40:	add	sl, r4, r0
   12b44:	mov	r6, r4
   12b48:	ldmib	r5, {r0, r1}
   12b4c:	cmp	r0, r1
   12b50:	bcs	12bb8 <__assert_fail@plt+0x1704>
   12b54:	add	r1, r0, #1
   12b58:	str	r1, [r5, #4]
   12b5c:	ldrb	r7, [r0]
   12b60:	cmp	r6, sl
   12b64:	beq	12b78 <__assert_fail@plt+0x16c4>
   12b68:	strb	r7, [r6], #1
   12b6c:	cmp	r7, #10
   12b70:	bne	12b48 <__assert_fail@plt+0x1694>
   12b74:	b	12bf0 <__assert_fail@plt+0x173c>
   12b78:	ldr	r6, [r9]
   12b7c:	mov	r0, r4
   12b80:	mov	r1, r9
   12b84:	mov	r2, #1
   12b88:	mvn	r3, #0
   12b8c:	str	r8, [sp]
   12b90:	bl	28e28 <__assert_fail@plt+0x17974>
   12b94:	str	r0, [r9, #8]
   12b98:	mov	r4, r0
   12b9c:	add	r6, r0, r6
   12ba0:	ldr	r0, [r9]
   12ba4:	add	sl, r4, r0
   12ba8:	strb	r7, [r6], #1
   12bac:	cmp	r7, #10
   12bb0:	bne	12b48 <__assert_fail@plt+0x1694>
   12bb4:	b	12bf0 <__assert_fail@plt+0x173c>
   12bb8:	mov	r0, r5
   12bbc:	bl	11424 <__uflow@plt>
   12bc0:	mov	r7, r0
   12bc4:	cmn	r0, #1
   12bc8:	bne	12b60 <__assert_fail@plt+0x16ac>
   12bcc:	cmp	r6, r4
   12bd0:	beq	12c14 <__assert_fail@plt+0x1760>
   12bd4:	ldrb	r0, [r5]
   12bd8:	tst	r0, #32
   12bdc:	bne	12c24 <__assert_fail@plt+0x1770>
   12be0:	ldrb	r0, [r6, #-1]
   12be4:	mov	r7, #10
   12be8:	cmp	r0, #10
   12bec:	bne	12b60 <__assert_fail@plt+0x16ac>
   12bf0:	sub	r0, r6, r4
   12bf4:	str	r0, [r9, #4]
   12bf8:	mov	r0, r9
   12bfc:	sub	sp, fp, #28
   12c00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c04:	mov	r9, #0
   12c08:	mov	r0, r9
   12c0c:	sub	sp, fp, #28
   12c10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c14:	mov	r9, #0
   12c18:	mov	r0, r9
   12c1c:	sub	sp, fp, #28
   12c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c24:	mov	r9, #0
   12c28:	mov	r0, r9
   12c2c:	sub	sp, fp, #28
   12c30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c38:	add	fp, sp, #28
   12c3c:	sub	sp, sp, #4
   12c40:	mov	sl, r0
   12c44:	ldrb	r0, [r1]
   12c48:	tst	r0, #16
   12c4c:	bne	12d28 <__assert_fail@plt+0x1874>
   12c50:	ldr	r4, [sl, #8]
   12c54:	ldr	r0, [sl]
   12c58:	mov	r8, r2
   12c5c:	mov	r6, r1
   12c60:	add	r9, r4, r0
   12c64:	mov	r7, r4
   12c68:	ldmib	r6, {r0, r1}
   12c6c:	cmp	r0, r1
   12c70:	bcs	12cdc <__assert_fail@plt+0x1828>
   12c74:	add	r1, r0, #1
   12c78:	str	r1, [r6, #4]
   12c7c:	ldrb	r5, [r0]
   12c80:	cmp	r7, r9
   12c84:	beq	12c98 <__assert_fail@plt+0x17e4>
   12c88:	strb	r5, [r7], #1
   12c8c:	cmp	r5, r8
   12c90:	bne	12c68 <__assert_fail@plt+0x17b4>
   12c94:	b	12d14 <__assert_fail@plt+0x1860>
   12c98:	ldr	r7, [sl]
   12c9c:	mov	r0, #1
   12ca0:	mov	r1, sl
   12ca4:	mov	r2, #1
   12ca8:	mvn	r3, #0
   12cac:	str	r0, [sp]
   12cb0:	mov	r0, r4
   12cb4:	bl	28e28 <__assert_fail@plt+0x17974>
   12cb8:	str	r0, [sl, #8]
   12cbc:	mov	r4, r0
   12cc0:	add	r7, r0, r7
   12cc4:	ldr	r0, [sl]
   12cc8:	add	r9, r4, r0
   12ccc:	strb	r5, [r7], #1
   12cd0:	cmp	r5, r8
   12cd4:	bne	12c68 <__assert_fail@plt+0x17b4>
   12cd8:	b	12d14 <__assert_fail@plt+0x1860>
   12cdc:	mov	r0, r6
   12ce0:	bl	11424 <__uflow@plt>
   12ce4:	mov	r5, r0
   12ce8:	cmn	r0, #1
   12cec:	bne	12c80 <__assert_fail@plt+0x17cc>
   12cf0:	cmp	r7, r4
   12cf4:	beq	12d38 <__assert_fail@plt+0x1884>
   12cf8:	ldrb	r0, [r6]
   12cfc:	tst	r0, #32
   12d00:	bne	12d48 <__assert_fail@plt+0x1894>
   12d04:	ldrb	r0, [r7, #-1]
   12d08:	mov	r5, r8
   12d0c:	cmp	r0, r8
   12d10:	bne	12c80 <__assert_fail@plt+0x17cc>
   12d14:	sub	r0, r7, r4
   12d18:	str	r0, [sl, #4]
   12d1c:	mov	r0, sl
   12d20:	sub	sp, fp, #28
   12d24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d28:	mov	sl, #0
   12d2c:	mov	r0, sl
   12d30:	sub	sp, fp, #28
   12d34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d38:	mov	sl, #0
   12d3c:	mov	r0, sl
   12d40:	sub	sp, fp, #28
   12d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d48:	mov	sl, #0
   12d4c:	mov	r0, sl
   12d50:	sub	sp, fp, #28
   12d54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d58:	ldr	r0, [r0, #8]
   12d5c:	b	2ae28 <__assert_fail@plt+0x19974>
   12d60:	push	{r4, r5, fp, lr}
   12d64:	add	fp, sp, #8
   12d68:	cmp	r0, #0
   12d6c:	beq	12e00 <__assert_fail@plt+0x194c>
   12d70:	mov	r1, #47	; 0x2f
   12d74:	mov	r4, r0
   12d78:	bl	11448 <strrchr@plt>
   12d7c:	cmp	r0, #0
   12d80:	mov	r5, r4
   12d84:	addne	r5, r0, #1
   12d88:	sub	r0, r5, r4
   12d8c:	cmp	r0, #7
   12d90:	blt	12de4 <__assert_fail@plt+0x1930>
   12d94:	movw	r1, #48978	; 0xbf52
   12d98:	sub	r0, r5, #7
   12d9c:	mov	r2, #7
   12da0:	movt	r1, #2
   12da4:	bl	1149c <strncmp@plt>
   12da8:	cmp	r0, #0
   12dac:	bne	12de4 <__assert_fail@plt+0x1930>
   12db0:	movw	r1, #48986	; 0xbf5a
   12db4:	mov	r0, r5
   12db8:	mov	r2, #3
   12dbc:	movt	r1, #2
   12dc0:	bl	1149c <strncmp@plt>
   12dc4:	cmp	r0, #0
   12dc8:	beq	12dd4 <__assert_fail@plt+0x1920>
   12dcc:	mov	r4, r5
   12dd0:	b	12de4 <__assert_fail@plt+0x1930>
   12dd4:	movw	r0, #53672	; 0xd1a8
   12dd8:	add	r4, r5, #3
   12ddc:	movt	r0, #3
   12de0:	str	r4, [r0]
   12de4:	movw	r0, #53676	; 0xd1ac
   12de8:	movt	r0, #3
   12dec:	str	r4, [r0]
   12df0:	movw	r0, #54652	; 0xd57c
   12df4:	movt	r0, #3
   12df8:	str	r4, [r0]
   12dfc:	pop	{r4, r5, fp, pc}
   12e00:	movw	r0, #53688	; 0xd1b8
   12e04:	mov	r1, #55	; 0x37
   12e08:	mov	r2, #1
   12e0c:	movt	r0, #3
   12e10:	ldr	r3, [r0]
   12e14:	movw	r0, #48922	; 0xbf1a
   12e18:	movt	r0, #2
   12e1c:	bl	112e0 <fwrite@plt>
   12e20:	bl	114a8 <abort@plt>
   12e24:	push	{r4, r5, r6, sl, fp, lr}
   12e28:	add	fp, sp, #16
   12e2c:	mov	r4, r0
   12e30:	movw	r0, #54656	; 0xd580
   12e34:	movt	r0, #3
   12e38:	cmp	r4, #0
   12e3c:	moveq	r4, r0
   12e40:	bl	113ac <__errno_location@plt>
   12e44:	ldr	r6, [r0]
   12e48:	mov	r5, r0
   12e4c:	mov	r0, r4
   12e50:	mov	r1, #48	; 0x30
   12e54:	bl	29058 <__assert_fail@plt+0x17ba4>
   12e58:	str	r6, [r5]
   12e5c:	pop	{r4, r5, r6, sl, fp, pc}
   12e60:	movw	r1, #54656	; 0xd580
   12e64:	cmp	r0, #0
   12e68:	movt	r1, #3
   12e6c:	movne	r1, r0
   12e70:	ldr	r0, [r1]
   12e74:	bx	lr
   12e78:	movw	r2, #54656	; 0xd580
   12e7c:	cmp	r0, #0
   12e80:	movt	r2, #3
   12e84:	movne	r2, r0
   12e88:	str	r1, [r2]
   12e8c:	bx	lr
   12e90:	movw	r3, #54656	; 0xd580
   12e94:	cmp	r0, #0
   12e98:	movt	r3, #3
   12e9c:	movne	r3, r0
   12ea0:	ubfx	r0, r1, #5, #3
   12ea4:	and	r1, r1, #31
   12ea8:	add	r0, r3, r0, lsl #2
   12eac:	ldr	r3, [r0, #8]
   12eb0:	eor	r2, r2, r3, lsr r1
   12eb4:	and	r2, r2, #1
   12eb8:	eor	r2, r3, r2, lsl r1
   12ebc:	str	r2, [r0, #8]
   12ec0:	mov	r0, #1
   12ec4:	and	r0, r0, r3, lsr r1
   12ec8:	bx	lr
   12ecc:	movw	r2, #54656	; 0xd580
   12ed0:	cmp	r0, #0
   12ed4:	movt	r2, #3
   12ed8:	movne	r2, r0
   12edc:	ldr	r0, [r2, #4]
   12ee0:	str	r1, [r2, #4]
   12ee4:	bx	lr
   12ee8:	movw	r3, #54656	; 0xd580
   12eec:	cmp	r0, #0
   12ef0:	movt	r3, #3
   12ef4:	movne	r3, r0
   12ef8:	cmp	r1, #0
   12efc:	mov	r0, #10
   12f00:	cmpne	r2, #0
   12f04:	str	r0, [r3]
   12f08:	bne	12f18 <__assert_fail@plt+0x1a64>
   12f0c:	push	{fp, lr}
   12f10:	mov	fp, sp
   12f14:	bl	114a8 <abort@plt>
   12f18:	str	r1, [r3, #40]	; 0x28
   12f1c:	str	r2, [r3, #44]	; 0x2c
   12f20:	bx	lr
   12f24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f28:	add	fp, sp, #28
   12f2c:	sub	sp, sp, #20
   12f30:	mov	r7, r0
   12f34:	ldr	r0, [fp, #8]
   12f38:	movw	r5, #54656	; 0xd580
   12f3c:	mov	r8, r3
   12f40:	mov	r9, r2
   12f44:	mov	sl, r1
   12f48:	movt	r5, #3
   12f4c:	cmp	r0, #0
   12f50:	movne	r5, r0
   12f54:	bl	113ac <__errno_location@plt>
   12f58:	mov	r4, r0
   12f5c:	ldm	r5, {r0, r1}
   12f60:	ldr	r2, [r5, #40]	; 0x28
   12f64:	ldr	r3, [r5, #44]	; 0x2c
   12f68:	add	r5, r5, #8
   12f6c:	ldr	r6, [r4]
   12f70:	stm	sp, {r0, r1, r5}
   12f74:	str	r2, [sp, #12]
   12f78:	str	r3, [sp, #16]
   12f7c:	mov	r0, r7
   12f80:	mov	r1, sl
   12f84:	mov	r2, r9
   12f88:	mov	r3, r8
   12f8c:	bl	12f9c <__assert_fail@plt+0x1ae8>
   12f90:	str	r6, [r4]
   12f94:	sub	sp, fp, #28
   12f98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fa0:	add	fp, sp, #28
   12fa4:	sub	sp, sp, #156	; 0x9c
   12fa8:	str	r0, [sp, #76]	; 0x4c
   12fac:	ldr	r0, [fp, #12]
   12fb0:	mov	r6, r1
   12fb4:	str	r3, [sp, #84]	; 0x54
   12fb8:	str	r2, [fp, #-84]	; 0xffffffac
   12fbc:	and	r1, r0, #4
   12fc0:	str	r1, [sp, #24]
   12fc4:	and	r1, r0, #1
   12fc8:	str	r1, [sp, #28]
   12fcc:	ubfx	r8, r0, #1, #1
   12fd0:	bl	112f8 <__ctype_get_mb_cur_max@plt>
   12fd4:	str	r0, [sp, #32]
   12fd8:	ldr	r0, [fp, #24]
   12fdc:	ldr	r7, [fp, #8]
   12fe0:	mov	r1, #0
   12fe4:	mov	r2, #0
   12fe8:	mov	r4, #1
   12fec:	str	r1, [sp, #52]	; 0x34
   12ff0:	str	r0, [sp, #72]	; 0x48
   12ff4:	ldr	r0, [fp, #20]
   12ff8:	str	r0, [sp, #68]	; 0x44
   12ffc:	mov	r0, #0
   13000:	str	r0, [sp, #48]	; 0x30
   13004:	mov	r0, #0
   13008:	str	r0, [sp, #92]	; 0x5c
   1300c:	mov	r0, #0
   13010:	str	r0, [fp, #-76]	; 0xffffffb4
   13014:	mov	r0, #0
   13018:	cmp	r7, #10
   1301c:	bhi	14304 <__assert_fail@plt+0x2e50>
   13020:	add	r1, pc, #28
   13024:	mov	sl, r6
   13028:	ldr	r6, [sp, #76]	; 0x4c
   1302c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13030:	ldr	lr, [sp, #84]	; 0x54
   13034:	mov	r9, #0
   13038:	mov	r3, #1
   1303c:	mov	r5, #0
   13040:	ldr	pc, [r1, r7, lsl #2]
   13044:	andeq	r3, r1, r4, lsl r1
   13048:	andeq	r3, r1, r0, asr r1
   1304c:	andeq	r3, r1, r4, lsr #2
   13050:	andeq	r3, r1, ip, lsl #2
   13054:	andeq	r3, r1, r4, asr #2
   13058:	andeq	r3, r1, r8, ror r1
   1305c:	andeq	r3, r1, r4, lsr r1
   13060:	andeq	r3, r1, r4, lsl #7
   13064:	andeq	r3, r1, r0, ror r0
   13068:	andeq	r3, r1, r0, ror r0
   1306c:	andeq	r3, r1, r8, lsl r3
   13070:	mov	r9, r4
   13074:	movw	r4, #49068	; 0xbfac
   13078:	mov	r5, r8
   1307c:	mov	r8, r2
   13080:	mov	r0, #0
   13084:	mov	r2, #5
   13088:	movt	r4, #2
   1308c:	mov	r1, r4
   13090:	bl	112b0 <dcgettext@plt>
   13094:	cmp	r0, r4
   13098:	str	r0, [sp, #68]	; 0x44
   1309c:	bne	1322c <__assert_fail@plt+0x1d78>
   130a0:	bl	2ae50 <__assert_fail@plt+0x1999c>
   130a4:	ldrb	r1, [r0]
   130a8:	and	r1, r1, #223	; 0xdf
   130ac:	cmp	r1, #71	; 0x47
   130b0:	beq	131f8 <__assert_fail@plt+0x1d44>
   130b4:	cmp	r1, #85	; 0x55
   130b8:	bne	13210 <__assert_fail@plt+0x1d5c>
   130bc:	ldrb	r1, [r0, #1]
   130c0:	and	r1, r1, #223	; 0xdf
   130c4:	cmp	r1, #84	; 0x54
   130c8:	bne	13210 <__assert_fail@plt+0x1d5c>
   130cc:	ldrb	r1, [r0, #2]
   130d0:	and	r1, r1, #223	; 0xdf
   130d4:	cmp	r1, #70	; 0x46
   130d8:	bne	13210 <__assert_fail@plt+0x1d5c>
   130dc:	ldrb	r1, [r0, #3]
   130e0:	cmp	r1, #45	; 0x2d
   130e4:	ldrbeq	r1, [r0, #4]
   130e8:	cmpeq	r1, #56	; 0x38
   130ec:	bne	13210 <__assert_fail@plt+0x1d5c>
   130f0:	ldrb	r0, [r0, #5]
   130f4:	cmp	r0, #0
   130f8:	movw	r0, #49072	; 0xbfb0
   130fc:	movt	r0, #2
   13100:	str	r0, [sp, #68]	; 0x44
   13104:	bne	13210 <__assert_fail@plt+0x1d5c>
   13108:	b	1322c <__assert_fail@plt+0x1d78>
   1310c:	mov	r0, #1
   13110:	b	13150 <__assert_fail@plt+0x1c9c>
   13114:	mov	r7, #0
   13118:	mov	r9, #0
   1311c:	mov	r3, r0
   13120:	b	131f0 <__assert_fail@plt+0x1d3c>
   13124:	tst	r8, #1
   13128:	bne	13150 <__assert_fail@plt+0x1c9c>
   1312c:	mov	r3, r0
   13130:	b	131a8 <__assert_fail@plt+0x1cf4>
   13134:	mov	r0, #1
   13138:	mov	r9, #0
   1313c:	mov	r7, #5
   13140:	b	1318c <__assert_fail@plt+0x1cd8>
   13144:	mov	r3, #1
   13148:	tst	r8, #1
   1314c:	beq	131a8 <__assert_fail@plt+0x1cf4>
   13150:	mov	r1, #1
   13154:	mov	r9, #0
   13158:	mov	r7, #2
   1315c:	mov	r3, r0
   13160:	mov	r5, #1
   13164:	str	r1, [fp, #-76]	; 0xffffffb4
   13168:	movw	r1, #49070	; 0xbfae
   1316c:	movt	r1, #2
   13170:	str	r1, [sp, #92]	; 0x5c
   13174:	b	13384 <__assert_fail@plt+0x1ed0>
   13178:	mov	r7, #5
   1317c:	tst	r8, #1
   13180:	beq	131c8 <__assert_fail@plt+0x1d14>
   13184:	mov	r0, #1
   13188:	mov	r9, #0
   1318c:	str	r0, [fp, #-76]	; 0xffffffb4
   13190:	movw	r0, #49066	; 0xbfaa
   13194:	mov	r3, #1
   13198:	mov	r5, #1
   1319c:	movt	r0, #2
   131a0:	str	r0, [sp, #92]	; 0x5c
   131a4:	b	13384 <__assert_fail@plt+0x1ed0>
   131a8:	cmp	sl, #0
   131ac:	mov	r9, #1
   131b0:	mov	r7, #2
   131b4:	movne	r0, #39	; 0x27
   131b8:	strbne	r0, [r6]
   131bc:	movw	r0, #49070	; 0xbfae
   131c0:	movt	r0, #2
   131c4:	b	131e4 <__assert_fail@plt+0x1d30>
   131c8:	cmp	sl, #0
   131cc:	mov	r9, #1
   131d0:	mov	r3, #1
   131d4:	movne	r0, #34	; 0x22
   131d8:	strbne	r0, [r6]
   131dc:	movw	r0, #49066	; 0xbfaa
   131e0:	movt	r0, #2
   131e4:	str	r0, [sp, #92]	; 0x5c
   131e8:	mov	r0, #1
   131ec:	str	r0, [fp, #-76]	; 0xffffffb4
   131f0:	mov	r5, #0
   131f4:	b	13384 <__assert_fail@plt+0x1ed0>
   131f8:	ldrb	r1, [r0, #1]
   131fc:	and	r1, r1, #223	; 0xdf
   13200:	cmp	r1, #66	; 0x42
   13204:	ldrbeq	r1, [r0, #2]
   13208:	cmpeq	r1, #49	; 0x31
   1320c:	beq	1412c <__assert_fail@plt+0x2c78>
   13210:	movw	r0, #49070	; 0xbfae
   13214:	movw	r1, #49066	; 0xbfaa
   13218:	cmp	r7, #9
   1321c:	movt	r0, #2
   13220:	movt	r1, #2
   13224:	moveq	r0, r1
   13228:	str	r0, [sp, #68]	; 0x44
   1322c:	movw	r4, #49070	; 0xbfae
   13230:	mov	r0, #0
   13234:	mov	r2, #5
   13238:	movt	r4, #2
   1323c:	mov	r1, r4
   13240:	bl	112b0 <dcgettext@plt>
   13244:	cmp	r0, r4
   13248:	str	r0, [sp, #72]	; 0x48
   1324c:	beq	1325c <__assert_fail@plt+0x1da8>
   13250:	mov	r4, r9
   13254:	mov	r2, r8
   13258:	b	13314 <__assert_fail@plt+0x1e60>
   1325c:	bl	2ae50 <__assert_fail@plt+0x1999c>
   13260:	ldrb	r1, [r0]
   13264:	mov	r4, r9
   13268:	and	r1, r1, #223	; 0xdf
   1326c:	cmp	r1, #71	; 0x47
   13270:	beq	132cc <__assert_fail@plt+0x1e18>
   13274:	cmp	r1, #85	; 0x55
   13278:	mov	r2, r8
   1327c:	bne	132f4 <__assert_fail@plt+0x1e40>
   13280:	ldrb	r1, [r0, #1]
   13284:	and	r1, r1, #223	; 0xdf
   13288:	cmp	r1, #84	; 0x54
   1328c:	bne	132f4 <__assert_fail@plt+0x1e40>
   13290:	ldrb	r1, [r0, #2]
   13294:	and	r1, r1, #223	; 0xdf
   13298:	cmp	r1, #70	; 0x46
   1329c:	ldrbeq	r1, [r0, #3]
   132a0:	cmpeq	r1, #45	; 0x2d
   132a4:	bne	132f4 <__assert_fail@plt+0x1e40>
   132a8:	ldrb	r1, [r0, #4]
   132ac:	cmp	r1, #56	; 0x38
   132b0:	ldrbeq	r0, [r0, #5]
   132b4:	cmpeq	r0, #0
   132b8:	bne	132f4 <__assert_fail@plt+0x1e40>
   132bc:	movw	r0, #49076	; 0xbfb4
   132c0:	movt	r0, #2
   132c4:	str	r0, [sp, #72]	; 0x48
   132c8:	b	13314 <__assert_fail@plt+0x1e60>
   132cc:	ldrb	r1, [r0, #1]
   132d0:	mov	r2, r8
   132d4:	and	r1, r1, #223	; 0xdf
   132d8:	cmp	r1, #66	; 0x42
   132dc:	bne	132f4 <__assert_fail@plt+0x1e40>
   132e0:	ldrb	r1, [r0, #2]
   132e4:	cmp	r1, #49	; 0x31
   132e8:	ldrbeq	r1, [r0, #3]
   132ec:	cmpeq	r1, #56	; 0x38
   132f0:	beq	14170 <__assert_fail@plt+0x2cbc>
   132f4:	movw	r0, #49070	; 0xbfae
   132f8:	cmp	r7, #9
   132fc:	movt	r0, #2
   13300:	mov	r1, r0
   13304:	movw	r0, #49066	; 0xbfaa
   13308:	movt	r0, #2
   1330c:	moveq	r1, r0
   13310:	str	r1, [sp, #72]	; 0x48
   13314:	mov	r8, r5
   13318:	mov	r9, #0
   1331c:	tst	r8, #1
   13320:	mov	r5, r8
   13324:	str	r2, [fp, #-48]	; 0xffffffd0
   13328:	bne	13360 <__assert_fail@plt+0x1eac>
   1332c:	ldr	r0, [sp, #68]	; 0x44
   13330:	ldrb	r0, [r0]
   13334:	cmp	r0, #0
   13338:	beq	13360 <__assert_fail@plt+0x1eac>
   1333c:	ldr	r1, [sp, #68]	; 0x44
   13340:	mov	r9, #0
   13344:	add	r1, r1, #1
   13348:	cmp	r9, sl
   1334c:	strbcc	r0, [r6, r9]
   13350:	ldrb	r0, [r1, r9]
   13354:	add	r9, r9, #1
   13358:	cmp	r0, #0
   1335c:	bne	13348 <__assert_fail@plt+0x1e94>
   13360:	ldr	r8, [sp, #72]	; 0x48
   13364:	mov	r0, r8
   13368:	bl	11394 <strlen@plt>
   1336c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13370:	ldr	lr, [sp, #84]	; 0x54
   13374:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13378:	str	r0, [fp, #-76]	; 0xffffffb4
   1337c:	str	r8, [sp, #92]	; 0x5c
   13380:	mov	r3, #1
   13384:	ldr	r0, [fp, #16]
   13388:	str	r7, [fp, #-64]	; 0xffffffc0
   1338c:	str	r5, [fp, #-72]	; 0xffffffb8
   13390:	str	r3, [sp, #80]	; 0x50
   13394:	cmp	r0, #0
   13398:	movwne	r0, #1
   1339c:	and	r0, r0, r5
   133a0:	str	r0, [fp, #-88]	; 0xffffffa8
   133a4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   133a8:	cmp	r0, #0
   133ac:	movwne	r0, #1
   133b0:	subs	r7, r7, #2
   133b4:	and	r1, r0, r5
   133b8:	str	r7, [fp, #-80]	; 0xffffffb0
   133bc:	and	r1, r3, r1
   133c0:	str	r1, [sp, #40]	; 0x28
   133c4:	clz	r1, r7
   133c8:	lsr	r1, r1, #5
   133cc:	and	r1, r1, r5
   133d0:	eor	r5, r5, #1
   133d4:	str	r1, [sp, #36]	; 0x24
   133d8:	mov	r1, r7
   133dc:	str	r5, [sp, #88]	; 0x58
   133e0:	mov	r7, #0
   133e4:	movwne	r1, #1
   133e8:	orr	r5, r1, r5
   133ec:	and	r1, r1, r3
   133f0:	and	r0, r0, r1
   133f4:	str	r5, [sp, #60]	; 0x3c
   133f8:	str	r1, [fp, #-68]	; 0xffffffbc
   133fc:	str	r0, [fp, #-60]	; 0xffffffc4
   13400:	eor	r0, r3, #1
   13404:	str	r0, [sp, #44]	; 0x2c
   13408:	cmn	lr, #1
   1340c:	beq	1341c <__assert_fail@plt+0x1f68>
   13410:	cmp	r7, lr
   13414:	bne	13428 <__assert_fail@plt+0x1f74>
   13418:	b	140a0 <__assert_fail@plt+0x2bec>
   1341c:	ldrb	r0, [ip, r7]
   13420:	cmp	r0, #0
   13424:	beq	140a8 <__assert_fail@plt+0x2bf4>
   13428:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1342c:	mov	r8, #0
   13430:	str	r4, [fp, #-52]	; 0xffffffcc
   13434:	str	r2, [fp, #-48]	; 0xffffffd0
   13438:	cmp	r0, #0
   1343c:	beq	13470 <__assert_fail@plt+0x1fbc>
   13440:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13444:	add	r4, r7, r0
   13448:	cmp	r0, #2
   1344c:	bcc	13468 <__assert_fail@plt+0x1fb4>
   13450:	cmn	lr, #1
   13454:	bne	13468 <__assert_fail@plt+0x1fb4>
   13458:	mov	r0, ip
   1345c:	bl	11394 <strlen@plt>
   13460:	ldr	ip, [fp, #-84]	; 0xffffffac
   13464:	mov	lr, r0
   13468:	cmp	r4, lr
   1346c:	bls	13488 <__assert_fail@plt+0x1fd4>
   13470:	mov	r0, #0
   13474:	str	r0, [fp, #-56]	; 0xffffffc8
   13478:	ldrb	r5, [ip, r7]
   1347c:	cmp	r5, #126	; 0x7e
   13480:	bls	134d8 <__assert_fail@plt+0x2024>
   13484:	b	138e0 <__assert_fail@plt+0x242c>
   13488:	ldr	r1, [sp, #92]	; 0x5c
   1348c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13490:	add	r0, ip, r7
   13494:	mov	r4, lr
   13498:	bl	11298 <memcmp@plt>
   1349c:	ldr	r2, [sp, #88]	; 0x58
   134a0:	cmp	r0, #0
   134a4:	mov	r1, r0
   134a8:	movwne	r1, #1
   134ac:	orr	r1, r1, r2
   134b0:	tst	r1, #1
   134b4:	beq	141b4 <__assert_fail@plt+0x2d00>
   134b8:	ldr	ip, [fp, #-84]	; 0xffffffac
   134bc:	clz	r0, r0
   134c0:	mov	lr, r4
   134c4:	lsr	r0, r0, #5
   134c8:	str	r0, [fp, #-56]	; 0xffffffc8
   134cc:	ldrb	r5, [ip, r7]
   134d0:	cmp	r5, #126	; 0x7e
   134d4:	bhi	138e0 <__assert_fail@plt+0x242c>
   134d8:	add	r3, pc, #16
   134dc:	mov	r4, #1
   134e0:	mov	r2, #110	; 0x6e
   134e4:	mov	r0, #97	; 0x61
   134e8:	mov	r1, #0
   134ec:	ldr	pc, [r3, r5, lsl #2]
   134f0:	andeq	r3, r1, r0, asr #15
   134f4:	andeq	r3, r1, r0, ror #17
   134f8:	andeq	r3, r1, r0, ror #17
   134fc:	andeq	r3, r1, r0, ror #17
   13500:	andeq	r3, r1, r0, ror #17
   13504:	andeq	r3, r1, r0, ror #17
   13508:	andeq	r3, r1, r0, ror #17
   1350c:			; <UNDEFINED> instruction: 0x000139bc
   13510:	andeq	r3, r1, r0, lsr #15
   13514:	andeq	r3, r1, r8, lsl #15
   13518:	andeq	r3, r1, ip, lsr #15
   1351c:	andeq	r3, r1, ip, lsr r8
   13520:	andeq	r3, r1, r0, lsl #15
   13524:	andeq	r3, r1, r8, lsr #15
   13528:	andeq	r3, r1, r0, ror #17
   1352c:	andeq	r3, r1, r0, ror #17
   13530:	andeq	r3, r1, r0, ror #17
   13534:	andeq	r3, r1, r0, ror #17
   13538:	andeq	r3, r1, r0, ror #17
   1353c:	andeq	r3, r1, r0, ror #17
   13540:	andeq	r3, r1, r0, ror #17
   13544:	andeq	r3, r1, r0, ror #17
   13548:	andeq	r3, r1, r0, ror #17
   1354c:	andeq	r3, r1, r0, ror #17
   13550:	andeq	r3, r1, r0, ror #17
   13554:	andeq	r3, r1, r0, ror #17
   13558:	andeq	r3, r1, r0, ror #17
   1355c:	andeq	r3, r1, r0, ror #17
   13560:	andeq	r3, r1, r0, ror #17
   13564:	andeq	r3, r1, r0, ror #17
   13568:	andeq	r3, r1, r0, ror #17
   1356c:	andeq	r3, r1, r0, ror #17
   13570:	andeq	r3, r1, r8, lsr r9
   13574:	andeq	r3, r1, ip, lsr r9
   13578:	andeq	r3, r1, ip, lsr r9
   1357c:	andeq	r3, r1, ip, lsl #14
   13580:	andeq	r3, r1, ip, lsr r9
   13584:	andeq	r3, r1, ip, ror #13
   13588:	andeq	r3, r1, ip, lsr r9
   1358c:	andeq	r3, r1, r4, asr #16
   13590:	andeq	r3, r1, ip, lsr r9
   13594:	andeq	r3, r1, ip, lsr r9
   13598:	andeq	r3, r1, ip, lsr r9
   1359c:	andeq	r3, r1, ip, ror #13
   135a0:	andeq	r3, r1, ip, ror #13
   135a4:	andeq	r3, r1, ip, ror #13
   135a8:	andeq	r3, r1, ip, ror #13
   135ac:	andeq	r3, r1, ip, ror #13
   135b0:	andeq	r3, r1, ip, ror #13
   135b4:	andeq	r3, r1, ip, ror #13
   135b8:	andeq	r3, r1, ip, ror #13
   135bc:	andeq	r3, r1, ip, ror #13
   135c0:	andeq	r3, r1, ip, ror #13
   135c4:	andeq	r3, r1, ip, ror #13
   135c8:	andeq	r3, r1, ip, ror #13
   135cc:	andeq	r3, r1, ip, ror #13
   135d0:	andeq	r3, r1, ip, ror #13
   135d4:	andeq	r3, r1, ip, ror #13
   135d8:	andeq	r3, r1, ip, ror #13
   135dc:	andeq	r3, r1, ip, lsr r9
   135e0:	andeq	r3, r1, ip, lsr r9
   135e4:	andeq	r3, r1, ip, lsr r9
   135e8:	andeq	r3, r1, ip, lsr r9
   135ec:	andeq	r3, r1, r0, lsl #16
   135f0:	andeq	r3, r1, r0, ror #17
   135f4:	andeq	r3, r1, ip, ror #13
   135f8:	andeq	r3, r1, ip, ror #13
   135fc:	andeq	r3, r1, ip, ror #13
   13600:	andeq	r3, r1, ip, ror #13
   13604:	andeq	r3, r1, ip, ror #13
   13608:	andeq	r3, r1, ip, ror #13
   1360c:	andeq	r3, r1, ip, ror #13
   13610:	andeq	r3, r1, ip, ror #13
   13614:	andeq	r3, r1, ip, ror #13
   13618:	andeq	r3, r1, ip, ror #13
   1361c:	andeq	r3, r1, ip, ror #13
   13620:	andeq	r3, r1, ip, ror #13
   13624:	andeq	r3, r1, ip, ror #13
   13628:	andeq	r3, r1, ip, ror #13
   1362c:	andeq	r3, r1, ip, ror #13
   13630:	andeq	r3, r1, ip, ror #13
   13634:	andeq	r3, r1, ip, ror #13
   13638:	andeq	r3, r1, ip, ror #13
   1363c:	andeq	r3, r1, ip, ror #13
   13640:	andeq	r3, r1, ip, ror #13
   13644:	andeq	r3, r1, ip, ror #13
   13648:	andeq	r3, r1, ip, ror #13
   1364c:	andeq	r3, r1, ip, ror #13
   13650:	andeq	r3, r1, ip, ror #13
   13654:	andeq	r3, r1, ip, ror #13
   13658:	andeq	r3, r1, ip, ror #13
   1365c:	andeq	r3, r1, ip, lsr r9
   13660:	andeq	r3, r1, ip, asr #14
   13664:	andeq	r3, r1, ip, ror #13
   13668:	andeq	r3, r1, ip, lsr r9
   1366c:	andeq	r3, r1, ip, ror #13
   13670:	andeq	r3, r1, ip, lsr r9
   13674:	andeq	r3, r1, ip, ror #13
   13678:	andeq	r3, r1, ip, ror #13
   1367c:	andeq	r3, r1, ip, ror #13
   13680:	andeq	r3, r1, ip, ror #13
   13684:	andeq	r3, r1, ip, ror #13
   13688:	andeq	r3, r1, ip, ror #13
   1368c:	andeq	r3, r1, ip, ror #13
   13690:	andeq	r3, r1, ip, ror #13
   13694:	andeq	r3, r1, ip, ror #13
   13698:	andeq	r3, r1, ip, ror #13
   1369c:	andeq	r3, r1, ip, ror #13
   136a0:	andeq	r3, r1, ip, ror #13
   136a4:	andeq	r3, r1, ip, ror #13
   136a8:	andeq	r3, r1, ip, ror #13
   136ac:	andeq	r3, r1, ip, ror #13
   136b0:	andeq	r3, r1, ip, ror #13
   136b4:	andeq	r3, r1, ip, ror #13
   136b8:	andeq	r3, r1, ip, ror #13
   136bc:	andeq	r3, r1, ip, ror #13
   136c0:	andeq	r3, r1, ip, ror #13
   136c4:	andeq	r3, r1, ip, ror #13
   136c8:	andeq	r3, r1, ip, ror #13
   136cc:	andeq	r3, r1, ip, ror #13
   136d0:	andeq	r3, r1, ip, ror #13
   136d4:	andeq	r3, r1, ip, ror #13
   136d8:	andeq	r3, r1, ip, ror #13
   136dc:	andeq	r3, r1, ip, lsr #14
   136e0:	andeq	r3, r1, ip, lsr r9
   136e4:	andeq	r3, r1, ip, lsr #14
   136e8:	andeq	r3, r1, ip, lsl #14
   136ec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   136f0:	cmp	r0, #0
   136f4:	beq	139d0 <__assert_fail@plt+0x251c>
   136f8:	ldr	r0, [fp, #16]
   136fc:	cmp	r0, #0
   13700:	mov	r0, r5
   13704:	bne	139e0 <__assert_fail@plt+0x252c>
   13708:	b	13a00 <__assert_fail@plt+0x254c>
   1370c:	mov	r4, #0
   13710:	cmp	r7, #0
   13714:	beq	13938 <__assert_fail@plt+0x2484>
   13718:	mov	r8, #0
   1371c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13720:	cmp	r0, #0
   13724:	bne	136f8 <__assert_fail@plt+0x2244>
   13728:	b	139d0 <__assert_fail@plt+0x251c>
   1372c:	mov	r4, #0
   13730:	cmn	lr, #1
   13734:	beq	13910 <__assert_fail@plt+0x245c>
   13738:	cmp	r7, #0
   1373c:	bne	13718 <__assert_fail@plt+0x2264>
   13740:	cmp	lr, #1
   13744:	beq	13938 <__assert_fail@plt+0x2484>
   13748:	b	13718 <__assert_fail@plt+0x2264>
   1374c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13750:	cmp	r0, #2
   13754:	bne	13968 <__assert_fail@plt+0x24b4>
   13758:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1375c:	tst	r0, #1
   13760:	bne	141c8 <__assert_fail@plt+0x2d14>
   13764:	mov	r8, #0
   13768:	mov	r0, #92	; 0x5c
   1376c:	mov	r4, #0
   13770:	cmp	r8, #0
   13774:	beq	13988 <__assert_fail@plt+0x24d4>
   13778:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1377c:	b	13a7c <__assert_fail@plt+0x25c8>
   13780:	mov	r0, #102	; 0x66
   13784:	b	139bc <__assert_fail@plt+0x2508>
   13788:	mov	r2, #116	; 0x74
   1378c:	ldr	r0, [sp, #60]	; 0x3c
   13790:	tst	r0, #1
   13794:	mov	r0, r2
   13798:	bne	139bc <__assert_fail@plt+0x2508>
   1379c:	b	141c8 <__assert_fail@plt+0x2d14>
   137a0:	mov	r0, #98	; 0x62
   137a4:	b	139bc <__assert_fail@plt+0x2508>
   137a8:	mov	r2, #114	; 0x72
   137ac:	ldr	r0, [sp, #60]	; 0x3c
   137b0:	tst	r0, #1
   137b4:	mov	r0, r2
   137b8:	bne	139bc <__assert_fail@plt+0x2508>
   137bc:	b	141c8 <__assert_fail@plt+0x2d14>
   137c0:	ldr	r0, [sp, #80]	; 0x50
   137c4:	tst	r0, #1
   137c8:	beq	13aa4 <__assert_fail@plt+0x25f0>
   137cc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   137d0:	tst	r0, #1
   137d4:	bne	142f0 <__assert_fail@plt+0x2e3c>
   137d8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   137dc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   137e0:	cmp	r0, #2
   137e4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   137e8:	movwne	r0, #1
   137ec:	orr	r0, r0, r2
   137f0:	tst	r0, #1
   137f4:	beq	13d9c <__assert_fail@plt+0x28e8>
   137f8:	mov	r0, r9
   137fc:	b	13dd0 <__assert_fail@plt+0x291c>
   13800:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13804:	mov	r8, #0
   13808:	mov	r5, #63	; 0x3f
   1380c:	cmp	r0, #5
   13810:	beq	13c58 <__assert_fail@plt+0x27a4>
   13814:	cmp	r0, #2
   13818:	bne	13d08 <__assert_fail@plt+0x2854>
   1381c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13820:	tst	r0, #1
   13824:	bne	141c8 <__assert_fail@plt+0x2d14>
   13828:	mov	r4, #0
   1382c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13830:	cmp	r0, #0
   13834:	bne	136f8 <__assert_fail@plt+0x2244>
   13838:	b	139d0 <__assert_fail@plt+0x251c>
   1383c:	mov	r0, #118	; 0x76
   13840:	b	139bc <__assert_fail@plt+0x2508>
   13844:	mov	r0, #1
   13848:	mov	r5, #39	; 0x27
   1384c:	str	r0, [sp, #52]	; 0x34
   13850:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13854:	cmp	r0, #2
   13858:	bne	138cc <__assert_fail@plt+0x2418>
   1385c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13860:	tst	r0, #1
   13864:	bne	141c8 <__assert_fail@plt+0x2d14>
   13868:	ldr	r2, [sp, #48]	; 0x30
   1386c:	clz	r1, sl
   13870:	mov	r8, #0
   13874:	lsr	r1, r1, #5
   13878:	cmp	r2, #0
   1387c:	mov	r0, r2
   13880:	movwne	r0, #1
   13884:	orrs	r0, r0, r1
   13888:	moveq	r2, sl
   1388c:	moveq	sl, r0
   13890:	cmp	r9, sl
   13894:	str	r2, [sp, #48]	; 0x30
   13898:	movcc	r0, #39	; 0x27
   1389c:	strbcc	r0, [r6, r9]
   138a0:	add	r0, r9, #1
   138a4:	cmp	r0, sl
   138a8:	movcc	r1, #92	; 0x5c
   138ac:	strbcc	r1, [r6, r0]
   138b0:	add	r0, r9, #2
   138b4:	add	r9, r9, #3
   138b8:	cmp	r0, sl
   138bc:	movcc	r1, #39	; 0x27
   138c0:	strbcc	r1, [r6, r0]
   138c4:	mov	r0, #0
   138c8:	str	r0, [fp, #-48]	; 0xffffffd0
   138cc:	mov	r4, #1
   138d0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   138d4:	cmp	r0, #0
   138d8:	bne	136f8 <__assert_fail@plt+0x2244>
   138dc:	b	139d0 <__assert_fail@plt+0x251c>
   138e0:	ldr	r0, [sp, #32]
   138e4:	cmp	r0, #1
   138e8:	bne	13ad4 <__assert_fail@plt+0x2620>
   138ec:	str	lr, [sp, #84]	; 0x54
   138f0:	bl	1137c <__ctype_b_loc@plt>
   138f4:	ldr	r0, [r0]
   138f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   138fc:	mov	r1, #1
   13900:	add	r0, r0, r5, lsl #1
   13904:	ldrb	r0, [r0, #1]
   13908:	ubfx	r4, r0, #6, #1
   1390c:	b	13ecc <__assert_fail@plt+0x2a18>
   13910:	cmp	r7, #0
   13914:	ldrbeq	r0, [ip, #1]
   13918:	cmpeq	r0, #0
   1391c:	beq	13938 <__assert_fail@plt+0x2484>
   13920:	mvn	lr, #0
   13924:	mov	r8, #0
   13928:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1392c:	cmp	r0, #0
   13930:	bne	136f8 <__assert_fail@plt+0x2244>
   13934:	b	139d0 <__assert_fail@plt+0x251c>
   13938:	mov	r1, #1
   1393c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13940:	cmp	r0, #2
   13944:	bne	13954 <__assert_fail@plt+0x24a0>
   13948:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1394c:	tst	r0, #1
   13950:	bne	141c8 <__assert_fail@plt+0x2d14>
   13954:	mov	r4, r1
   13958:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1395c:	cmp	r0, #0
   13960:	bne	136f8 <__assert_fail@plt+0x2244>
   13964:	b	139d0 <__assert_fail@plt+0x251c>
   13968:	ldr	r1, [sp, #40]	; 0x28
   1396c:	mov	r8, #0
   13970:	mov	r0, #92	; 0x5c
   13974:	cmp	r1, #0
   13978:	beq	139bc <__assert_fail@plt+0x2508>
   1397c:	mov	r4, #0
   13980:	cmp	r8, #0
   13984:	bne	13778 <__assert_fail@plt+0x22c4>
   13988:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1398c:	tst	r2, #1
   13990:	beq	13a7c <__assert_fail@plt+0x25c8>
   13994:	cmp	r9, sl
   13998:	movcc	r1, #39	; 0x27
   1399c:	strbcc	r1, [r6, r9]
   139a0:	add	r1, r9, #1
   139a4:	add	r9, r9, #2
   139a8:	cmp	r1, sl
   139ac:	movcc	r2, #39	; 0x27
   139b0:	strbcc	r2, [r6, r1]
   139b4:	mov	r2, #0
   139b8:	b	13a7c <__assert_fail@plt+0x25c8>
   139bc:	ldr	r1, [sp, #80]	; 0x50
   139c0:	mov	r4, #0
   139c4:	mov	r8, #0
   139c8:	tst	r1, #1
   139cc:	bne	13a0c <__assert_fail@plt+0x2558>
   139d0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   139d4:	cmp	r0, #0
   139d8:	mov	r0, r5
   139dc:	beq	13a00 <__assert_fail@plt+0x254c>
   139e0:	ldr	r1, [fp, #16]
   139e4:	ubfx	r0, r5, #5, #3
   139e8:	mov	r2, #1
   139ec:	ldr	r0, [r1, r0, lsl #2]
   139f0:	and	r1, r5, #31
   139f4:	tst	r0, r2, lsl r1
   139f8:	mov	r0, r5
   139fc:	bne	13a0c <__assert_fail@plt+0x2558>
   13a00:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13a04:	cmp	r1, #0
   13a08:	beq	13e64 <__assert_fail@plt+0x29b0>
   13a0c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13a10:	tst	r1, #1
   13a14:	bne	141a8 <__assert_fail@plt+0x2cf4>
   13a18:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13a1c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13a20:	cmp	r1, #2
   13a24:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13a28:	movwne	r1, #1
   13a2c:	orr	r1, r1, r2
   13a30:	tst	r1, #1
   13a34:	bne	13a6c <__assert_fail@plt+0x25b8>
   13a38:	cmp	r9, sl
   13a3c:	movcc	r1, #39	; 0x27
   13a40:	strbcc	r1, [r6, r9]
   13a44:	add	r1, r9, #1
   13a48:	cmp	r1, sl
   13a4c:	movcc	r2, #36	; 0x24
   13a50:	strbcc	r2, [r6, r1]
   13a54:	add	r1, r9, #2
   13a58:	add	r9, r9, #3
   13a5c:	cmp	r1, sl
   13a60:	movcc	r2, #39	; 0x27
   13a64:	strbcc	r2, [r6, r1]
   13a68:	mov	r2, #1
   13a6c:	cmp	r9, sl
   13a70:	movcc	r1, #92	; 0x5c
   13a74:	strbcc	r1, [r6, r9]
   13a78:	add	r9, r9, #1
   13a7c:	cmp	r9, sl
   13a80:	add	r7, r7, #1
   13a84:	strbcc	r0, [r6, r9]
   13a88:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13a8c:	add	r9, r9, #1
   13a90:	and	r0, r0, r4
   13a94:	mov	r4, r0
   13a98:	cmn	lr, #1
   13a9c:	bne	13410 <__assert_fail@plt+0x1f5c>
   13aa0:	b	1341c <__assert_fail@plt+0x1f68>
   13aa4:	ldr	r0, [sp, #28]
   13aa8:	mov	r4, #0
   13aac:	mov	r8, #0
   13ab0:	mov	r5, #0
   13ab4:	cmp	r0, #0
   13ab8:	beq	139d0 <__assert_fail@plt+0x251c>
   13abc:	ldr	r4, [fp, #-52]	; 0xffffffcc
   13ac0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13ac4:	add	r7, r7, #1
   13ac8:	cmn	lr, #1
   13acc:	bne	13410 <__assert_fail@plt+0x1f5c>
   13ad0:	b	1341c <__assert_fail@plt+0x1f68>
   13ad4:	mov	r0, #0
   13ad8:	cmn	lr, #1
   13adc:	str	r0, [fp, #-36]	; 0xffffffdc
   13ae0:	str	r0, [fp, #-40]	; 0xffffffd8
   13ae4:	bne	13af8 <__assert_fail@plt+0x2644>
   13ae8:	mov	r0, ip
   13aec:	bl	11394 <strlen@plt>
   13af0:	ldr	ip, [fp, #-84]	; 0xffffffac
   13af4:	mov	lr, r0
   13af8:	ldr	r0, [sp, #36]	; 0x24
   13afc:	str	sl, [sp, #56]	; 0x38
   13b00:	str	lr, [sp, #84]	; 0x54
   13b04:	cmp	r0, #0
   13b08:	beq	13d20 <__assert_fail@plt+0x286c>
   13b0c:	add	r0, ip, r7
   13b10:	mov	r4, #1
   13b14:	mov	r6, #0
   13b18:	sub	sl, fp, #40	; 0x28
   13b1c:	str	r0, [sp, #20]
   13b20:	str	r6, [sp, #64]	; 0x40
   13b24:	add	r6, r6, r7
   13b28:	sub	r0, fp, #44	; 0x2c
   13b2c:	mov	r3, sl
   13b30:	add	r1, ip, r6
   13b34:	sub	r2, lr, r6
   13b38:	bl	2ae88 <__assert_fail@plt+0x199d4>
   13b3c:	cmn	r0, #2
   13b40:	beq	13e7c <__assert_fail@plt+0x29c8>
   13b44:	ldr	sl, [sp, #56]	; 0x38
   13b48:	cmn	r0, #1
   13b4c:	beq	13e70 <__assert_fail@plt+0x29bc>
   13b50:	cmp	r0, #0
   13b54:	beq	13e74 <__assert_fail@plt+0x29c0>
   13b58:	cmp	r0, #2
   13b5c:	bcc	13c1c <__assert_fail@plt+0x2768>
   13b60:	ldr	r1, [sp, #64]	; 0x40
   13b64:	ldr	r2, [sp, #20]
   13b68:	add	r1, r2, r1
   13b6c:	mov	r2, #1
   13b70:	ldrb	r3, [r1, r2]
   13b74:	sub	r3, r3, #91	; 0x5b
   13b78:	cmp	r3, #33	; 0x21
   13b7c:	bhi	13c10 <__assert_fail@plt+0x275c>
   13b80:	add	r6, pc, #0
   13b84:	ldr	pc, [r6, r3, lsl #2]
   13b88:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b8c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b90:	andeq	r3, r1, r0, lsl ip
   13b94:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b98:	andeq	r3, r1, r0, lsl ip
   13b9c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ba0:	andeq	r3, r1, r0, lsl ip
   13ba4:	andeq	r3, r1, r0, lsl ip
   13ba8:	andeq	r3, r1, r0, lsl ip
   13bac:	andeq	r3, r1, r0, lsl ip
   13bb0:	andeq	r3, r1, r0, lsl ip
   13bb4:	andeq	r3, r1, r0, lsl ip
   13bb8:	andeq	r3, r1, r0, lsl ip
   13bbc:	andeq	r3, r1, r0, lsl ip
   13bc0:	andeq	r3, r1, r0, lsl ip
   13bc4:	andeq	r3, r1, r0, lsl ip
   13bc8:	andeq	r3, r1, r0, lsl ip
   13bcc:	andeq	r3, r1, r0, lsl ip
   13bd0:	andeq	r3, r1, r0, lsl ip
   13bd4:	andeq	r3, r1, r0, lsl ip
   13bd8:	andeq	r3, r1, r0, lsl ip
   13bdc:	andeq	r3, r1, r0, lsl ip
   13be0:	andeq	r3, r1, r0, lsl ip
   13be4:	andeq	r3, r1, r0, lsl ip
   13be8:	andeq	r3, r1, r0, lsl ip
   13bec:	andeq	r3, r1, r0, lsl ip
   13bf0:	andeq	r3, r1, r0, lsl ip
   13bf4:	andeq	r3, r1, r0, lsl ip
   13bf8:	andeq	r3, r1, r0, lsl ip
   13bfc:	andeq	r3, r1, r0, lsl ip
   13c00:	andeq	r3, r1, r0, lsl ip
   13c04:	andeq	r3, r1, r0, lsl ip
   13c08:	andeq	r3, r1, r0, lsl ip
   13c0c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13c10:	add	r2, r2, #1
   13c14:	cmp	r2, r0
   13c18:	bcc	13b70 <__assert_fail@plt+0x26bc>
   13c1c:	ldr	r6, [sp, #64]	; 0x40
   13c20:	add	r6, r0, r6
   13c24:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13c28:	bl	112d4 <iswprint@plt>
   13c2c:	cmp	r0, #0
   13c30:	sub	sl, fp, #40	; 0x28
   13c34:	movwne	r0, #1
   13c38:	and	r4, r4, r0
   13c3c:	mov	r0, sl
   13c40:	bl	11280 <mbsinit@plt>
   13c44:	ldr	ip, [fp, #-84]	; 0xffffffac
   13c48:	ldr	lr, [sp, #84]	; 0x54
   13c4c:	cmp	r0, #0
   13c50:	beq	13b20 <__assert_fail@plt+0x266c>
   13c54:	b	13ec0 <__assert_fail@plt+0x2a0c>
   13c58:	ldr	r0, [sp, #24]
   13c5c:	cmp	r0, #0
   13c60:	beq	13d08 <__assert_fail@plt+0x2854>
   13c64:	add	r0, r7, #2
   13c68:	cmp	r0, lr
   13c6c:	bcs	13d08 <__assert_fail@plt+0x2854>
   13c70:	add	r1, ip, r7
   13c74:	ldrb	r1, [r1, #1]
   13c78:	cmp	r1, #63	; 0x3f
   13c7c:	bne	13d08 <__assert_fail@plt+0x2854>
   13c80:	ldrb	r5, [ip, r0]
   13c84:	sub	r1, r5, #33	; 0x21
   13c88:	cmp	r1, #29
   13c8c:	bhi	13d08 <__assert_fail@plt+0x2854>
   13c90:	movw	r3, #20929	; 0x51c1
   13c94:	mov	r2, #1
   13c98:	movt	r3, #14336	; 0x3800
   13c9c:	tst	r3, r2, lsl r1
   13ca0:	beq	13d08 <__assert_fail@plt+0x2854>
   13ca4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13ca8:	tst	r1, #1
   13cac:	bne	142f8 <__assert_fail@plt+0x2e44>
   13cb0:	cmp	r9, sl
   13cb4:	mov	r7, r0
   13cb8:	mov	r4, #0
   13cbc:	movcc	r1, #63	; 0x3f
   13cc0:	strbcc	r1, [r6, r9]
   13cc4:	add	r1, r9, #1
   13cc8:	cmp	r1, sl
   13ccc:	movcc	r2, #34	; 0x22
   13cd0:	strbcc	r2, [r6, r1]
   13cd4:	add	r1, r9, #2
   13cd8:	cmp	r1, sl
   13cdc:	movcc	r2, #34	; 0x22
   13ce0:	strbcc	r2, [r6, r1]
   13ce4:	add	r1, r9, #3
   13ce8:	add	r9, r9, #4
   13cec:	cmp	r1, sl
   13cf0:	movcc	r2, #63	; 0x3f
   13cf4:	strbcc	r2, [r6, r1]
   13cf8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13cfc:	cmp	r0, #0
   13d00:	bne	136f8 <__assert_fail@plt+0x2244>
   13d04:	b	139d0 <__assert_fail@plt+0x251c>
   13d08:	mov	r5, #63	; 0x3f
   13d0c:	mov	r4, #0
   13d10:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13d14:	cmp	r0, #0
   13d18:	bne	136f8 <__assert_fail@plt+0x2244>
   13d1c:	b	139d0 <__assert_fail@plt+0x251c>
   13d20:	mov	r4, #1
   13d24:	mov	r6, #0
   13d28:	sub	sl, fp, #40	; 0x28
   13d2c:	str	r6, [sp, #64]	; 0x40
   13d30:	add	r6, r6, r7
   13d34:	sub	r0, fp, #44	; 0x2c
   13d38:	mov	r3, sl
   13d3c:	add	r1, ip, r6
   13d40:	sub	r2, lr, r6
   13d44:	bl	2ae88 <__assert_fail@plt+0x199d4>
   13d48:	cmn	r0, #2
   13d4c:	beq	13e7c <__assert_fail@plt+0x29c8>
   13d50:	cmn	r0, #1
   13d54:	beq	13e70 <__assert_fail@plt+0x29bc>
   13d58:	ldr	r6, [sp, #64]	; 0x40
   13d5c:	cmp	r0, #0
   13d60:	beq	13ebc <__assert_fail@plt+0x2a08>
   13d64:	add	r6, r0, r6
   13d68:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13d6c:	bl	112d4 <iswprint@plt>
   13d70:	cmp	r0, #0
   13d74:	sub	sl, fp, #40	; 0x28
   13d78:	movwne	r0, #1
   13d7c:	and	r4, r4, r0
   13d80:	mov	r0, sl
   13d84:	bl	11280 <mbsinit@plt>
   13d88:	ldr	ip, [fp, #-84]	; 0xffffffac
   13d8c:	ldr	lr, [sp, #84]	; 0x54
   13d90:	cmp	r0, #0
   13d94:	beq	13d2c <__assert_fail@plt+0x2878>
   13d98:	b	13ec0 <__assert_fail@plt+0x2a0c>
   13d9c:	cmp	r9, sl
   13da0:	mov	r2, #1
   13da4:	movcc	r0, #39	; 0x27
   13da8:	strbcc	r0, [r6, r9]
   13dac:	add	r0, r9, #1
   13db0:	cmp	r0, sl
   13db4:	movcc	r1, #36	; 0x24
   13db8:	strbcc	r1, [r6, r0]
   13dbc:	add	r0, r9, #2
   13dc0:	cmp	r0, sl
   13dc4:	movcc	r1, #39	; 0x27
   13dc8:	strbcc	r1, [r6, r0]
   13dcc:	add	r0, r9, #3
   13dd0:	cmp	r0, sl
   13dd4:	add	r9, r0, #1
   13dd8:	str	r2, [fp, #-48]	; 0xffffffd0
   13ddc:	movcc	r1, #92	; 0x5c
   13de0:	strbcc	r1, [r6, r0]
   13de4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13de8:	cmp	r1, #2
   13dec:	beq	13e4c <__assert_fail@plt+0x2998>
   13df0:	add	r1, r7, #1
   13df4:	mov	r4, #0
   13df8:	mov	r8, #1
   13dfc:	mov	r5, #48	; 0x30
   13e00:	cmp	r1, lr
   13e04:	bcs	136ec <__assert_fail@plt+0x2238>
   13e08:	ldrb	r1, [ip, r1]
   13e0c:	sub	r1, r1, #48	; 0x30
   13e10:	uxtb	r1, r1
   13e14:	cmp	r1, #9
   13e18:	bhi	136ec <__assert_fail@plt+0x2238>
   13e1c:	cmp	r9, sl
   13e20:	movcc	r1, #48	; 0x30
   13e24:	strbcc	r1, [r6, r9]
   13e28:	add	r1, r0, #2
   13e2c:	add	r9, r0, #3
   13e30:	cmp	r1, sl
   13e34:	movcc	r2, #48	; 0x30
   13e38:	strbcc	r2, [r6, r1]
   13e3c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13e40:	cmp	r0, #0
   13e44:	bne	136f8 <__assert_fail@plt+0x2244>
   13e48:	b	139d0 <__assert_fail@plt+0x251c>
   13e4c:	mov	r0, #48	; 0x30
   13e50:	mov	r8, #1
   13e54:	mov	r4, #0
   13e58:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13e5c:	cmp	r1, #0
   13e60:	bne	13a0c <__assert_fail@plt+0x2558>
   13e64:	cmp	r8, #0
   13e68:	beq	13988 <__assert_fail@plt+0x24d4>
   13e6c:	b	13778 <__assert_fail@plt+0x22c4>
   13e70:	mov	r4, #0
   13e74:	ldr	ip, [fp, #-84]	; 0xffffffac
   13e78:	b	13eb4 <__assert_fail@plt+0x2a00>
   13e7c:	ldr	r1, [sp, #84]	; 0x54
   13e80:	ldr	ip, [fp, #-84]	; 0xffffffac
   13e84:	mov	r4, #0
   13e88:	cmp	r6, r1
   13e8c:	bcs	13eb4 <__assert_fail@plt+0x2a00>
   13e90:	ldrb	r0, [ip, r6]
   13e94:	cmp	r0, #0
   13e98:	beq	13eb4 <__assert_fail@plt+0x2a00>
   13e9c:	ldr	r0, [sp, #64]	; 0x40
   13ea0:	add	r0, r0, #1
   13ea4:	add	r6, r0, r7
   13ea8:	str	r0, [sp, #64]	; 0x40
   13eac:	cmp	r6, r1
   13eb0:	bcc	13e90 <__assert_fail@plt+0x29dc>
   13eb4:	ldr	r6, [sp, #64]	; 0x40
   13eb8:	b	13ec0 <__assert_fail@plt+0x2a0c>
   13ebc:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ec0:	mov	r1, r6
   13ec4:	ldr	r6, [sp, #76]	; 0x4c
   13ec8:	ldr	sl, [sp, #56]	; 0x38
   13ecc:	ldr	r0, [sp, #44]	; 0x2c
   13ed0:	cmp	r1, #1
   13ed4:	orr	r2, r4, r0
   13ed8:	mov	r0, r1
   13edc:	bhi	13efc <__assert_fail@plt+0x2a48>
   13ee0:	tst	r2, #1
   13ee4:	beq	13efc <__assert_fail@plt+0x2a48>
   13ee8:	ldr	lr, [sp, #84]	; 0x54
   13eec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13ef0:	cmp	r0, #0
   13ef4:	bne	136f8 <__assert_fail@plt+0x2244>
   13ef8:	b	139d0 <__assert_fail@plt+0x251c>
   13efc:	str	r2, [sp, #64]	; 0x40
   13f00:	add	r0, r0, r7
   13f04:	add	r1, r7, #1
   13f08:	ldr	lr, [sp, #84]	; 0x54
   13f0c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13f10:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13f14:	mov	r3, #0
   13f18:	str	r0, [sp, #56]	; 0x38
   13f1c:	ldr	r0, [sp, #64]	; 0x40
   13f20:	tst	r0, #1
   13f24:	bne	1400c <__assert_fail@plt+0x2b58>
   13f28:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13f2c:	tst	r0, #1
   13f30:	bne	141ac <__assert_fail@plt+0x2cf8>
   13f34:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13f38:	cmp	r7, #2
   13f3c:	movwne	r3, #1
   13f40:	orr	r3, r3, r2
   13f44:	tst	r3, #1
   13f48:	bne	13f80 <__assert_fail@plt+0x2acc>
   13f4c:	cmp	r9, sl
   13f50:	add	r3, r9, #1
   13f54:	movcc	r2, #39	; 0x27
   13f58:	strbcc	r2, [r6, r9]
   13f5c:	cmp	r3, sl
   13f60:	movcc	r2, #36	; 0x24
   13f64:	strbcc	r2, [r6, r3]
   13f68:	add	r3, r9, #2
   13f6c:	add	r9, r9, #3
   13f70:	cmp	r3, sl
   13f74:	movcc	r2, #39	; 0x27
   13f78:	strbcc	r2, [r6, r3]
   13f7c:	mov	r2, #1
   13f80:	cmp	r9, sl
   13f84:	mov	r0, r2
   13f88:	movcc	r3, #92	; 0x5c
   13f8c:	strbcc	r3, [r6, r9]
   13f90:	add	r3, r9, #1
   13f94:	cmp	r3, sl
   13f98:	andcc	r7, r5, #192	; 0xc0
   13f9c:	movcc	r2, #48	; 0x30
   13fa0:	orrcc	r7, r2, r7, lsr #6
   13fa4:	strbcc	r7, [r6, r3]
   13fa8:	add	r3, r9, #2
   13fac:	add	r9, r9, #3
   13fb0:	cmp	r3, sl
   13fb4:	lsrcc	r7, r5, #3
   13fb8:	movcc	r2, #6
   13fbc:	bficc	r7, r2, #3, #29
   13fc0:	mov	r2, #6
   13fc4:	strbcc	r7, [r6, r3]
   13fc8:	bfi	r5, r2, #3, #29
   13fcc:	mov	r3, #1
   13fd0:	mov	r2, r0
   13fd4:	ldr	r0, [sp, #56]	; 0x38
   13fd8:	and	r8, r3, #1
   13fdc:	cmp	r0, r1
   13fe0:	bhi	14040 <__assert_fail@plt+0x2b8c>
   13fe4:	b	14080 <__assert_fail@plt+0x2bcc>
   13fe8:	cmp	r9, sl
   13fec:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13ff0:	strbcc	r5, [r6, r9]
   13ff4:	add	r9, r9, #1
   13ff8:	ldrb	r5, [ip, r1]
   13ffc:	add	r1, r1, #1
   14000:	ldr	r0, [sp, #64]	; 0x40
   14004:	tst	r0, #1
   14008:	beq	13f28 <__assert_fail@plt+0x2a74>
   1400c:	ldr	r7, [fp, #-56]	; 0xffffffc8
   14010:	tst	r7, #1
   14014:	beq	14028 <__assert_fail@plt+0x2b74>
   14018:	cmp	r9, sl
   1401c:	movcc	r7, #92	; 0x5c
   14020:	strbcc	r7, [r6, r9]
   14024:	add	r9, r9, #1
   14028:	mov	r7, #0
   1402c:	str	r7, [fp, #-56]	; 0xffffffc8
   14030:	ldr	r0, [sp, #56]	; 0x38
   14034:	and	r8, r3, #1
   14038:	cmp	r0, r1
   1403c:	bls	14080 <__assert_fail@plt+0x2bcc>
   14040:	cmp	r8, #0
   14044:	mvn	r7, r2
   14048:	movwne	r8, #1
   1404c:	orr	r7, r7, r8
   14050:	tst	r7, #1
   14054:	bne	13fe8 <__assert_fail@plt+0x2b34>
   14058:	cmp	r9, sl
   1405c:	movcc	r7, #39	; 0x27
   14060:	strbcc	r7, [r6, r9]
   14064:	add	r7, r9, #1
   14068:	add	r9, r9, #2
   1406c:	cmp	r7, sl
   14070:	movcc	r2, #39	; 0x27
   14074:	strbcc	r2, [r6, r7]
   14078:	mov	r2, #0
   1407c:	b	13fe8 <__assert_fail@plt+0x2b34>
   14080:	cmp	r8, #0
   14084:	sub	r7, r1, #1
   14088:	mov	r0, r5
   1408c:	str	r2, [fp, #-48]	; 0xffffffd0
   14090:	movwne	r8, #1
   14094:	cmp	r8, #0
   14098:	beq	13988 <__assert_fail@plt+0x24d4>
   1409c:	b	13778 <__assert_fail@plt+0x22c4>
   140a0:	mov	lr, r7
   140a4:	b	140ac <__assert_fail@plt+0x2bf8>
   140a8:	mvn	lr, #0
   140ac:	ldr	r7, [fp, #-64]	; 0xffffffc0
   140b0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   140b4:	eor	r0, r7, #2
   140b8:	orr	r0, r0, r9
   140bc:	clz	r0, r0
   140c0:	lsr	r0, r0, #5
   140c4:	tst	r1, r0
   140c8:	bne	141c8 <__assert_fail@plt+0x2d14>
   140cc:	mov	r0, r1
   140d0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   140d4:	cmp	r7, #2
   140d8:	movwne	r1, #1
   140dc:	orr	r0, r0, r1
   140e0:	tst	r0, #1
   140e4:	ldreq	r0, [sp, #52]	; 0x34
   140e8:	streq	lr, [sp, #84]	; 0x54
   140ec:	eoreq	r0, r0, #1
   140f0:	tsteq	r0, #1
   140f4:	bne	1428c <__assert_fail@plt+0x2dd8>
   140f8:	tst	r4, #1
   140fc:	bne	14248 <__assert_fail@plt+0x2d94>
   14100:	ldr	r6, [sp, #48]	; 0x30
   14104:	mov	r8, #0
   14108:	cmp	r6, #0
   1410c:	beq	14284 <__assert_fail@plt+0x2dd0>
   14110:	ldr	r0, [sp, #80]	; 0x50
   14114:	mov	r1, #0
   14118:	cmp	sl, #0
   1411c:	mov	r4, #0
   14120:	str	r1, [fp, #-72]	; 0xffffffb8
   14124:	beq	13018 <__assert_fail@plt+0x1b64>
   14128:	b	1428c <__assert_fail@plt+0x2dd8>
   1412c:	ldrb	r1, [r0, #3]
   14130:	cmp	r1, #56	; 0x38
   14134:	ldrbeq	r1, [r0, #4]
   14138:	cmpeq	r1, #48	; 0x30
   1413c:	bne	13210 <__assert_fail@plt+0x1d5c>
   14140:	ldrb	r1, [r0, #5]
   14144:	cmp	r1, #51	; 0x33
   14148:	ldrbeq	r1, [r0, #6]
   1414c:	cmpeq	r1, #48	; 0x30
   14150:	bne	13210 <__assert_fail@plt+0x1d5c>
   14154:	ldrb	r0, [r0, #7]
   14158:	cmp	r0, #0
   1415c:	movw	r0, #49080	; 0xbfb8
   14160:	movt	r0, #2
   14164:	str	r0, [sp, #68]	; 0x44
   14168:	bne	13210 <__assert_fail@plt+0x1d5c>
   1416c:	b	1322c <__assert_fail@plt+0x1d78>
   14170:	ldrb	r1, [r0, #4]
   14174:	cmp	r1, #48	; 0x30
   14178:	ldrbeq	r1, [r0, #5]
   1417c:	cmpeq	r1, #51	; 0x33
   14180:	bne	132f4 <__assert_fail@plt+0x1e40>
   14184:	ldrb	r1, [r0, #6]
   14188:	cmp	r1, #48	; 0x30
   1418c:	ldrbeq	r0, [r0, #7]
   14190:	cmpeq	r0, #0
   14194:	bne	132f4 <__assert_fail@plt+0x1e40>
   14198:	movw	r0, #49084	; 0xbfbc
   1419c:	movt	r0, #2
   141a0:	str	r0, [sp, #72]	; 0x48
   141a4:	b	13314 <__assert_fail@plt+0x1e60>
   141a8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   141ac:	ldr	r2, [sp, #80]	; 0x50
   141b0:	b	141e8 <__assert_fail@plt+0x2d34>
   141b4:	ldr	ip, [fp, #-84]	; 0xffffffac
   141b8:	mov	r2, #1
   141bc:	mov	lr, r4
   141c0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   141c4:	b	141e8 <__assert_fail@plt+0x2d34>
   141c8:	ldr	r2, [sp, #80]	; 0x50
   141cc:	mov	r7, #2
   141d0:	b	141e8 <__assert_fail@plt+0x2d34>
   141d4:	ldr	r6, [sp, #76]	; 0x4c
   141d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   141dc:	ldr	lr, [sp, #84]	; 0x54
   141e0:	ldr	r2, [sp, #80]	; 0x50
   141e4:	mov	r7, #2
   141e8:	mov	r0, #0
   141ec:	ldr	r1, [fp, #12]
   141f0:	tst	r2, #1
   141f4:	mov	r2, r7
   141f8:	mov	r3, lr
   141fc:	str	r0, [sp, #8]
   14200:	ldr	r0, [sp, #68]	; 0x44
   14204:	movwne	r2, #4
   14208:	cmp	r7, #2
   1420c:	movne	r2, r7
   14210:	str	r2, [sp]
   14214:	mov	r2, ip
   14218:	bic	r1, r1, #2
   1421c:	str	r0, [sp, #12]
   14220:	ldr	r0, [sp, #72]	; 0x48
   14224:	str	r1, [sp, #4]
   14228:	mov	r1, sl
   1422c:	str	r0, [sp, #16]
   14230:	mov	r0, r6
   14234:	bl	12f9c <__assert_fail@plt+0x1ae8>
   14238:	mov	r9, r0
   1423c:	mov	r0, r9
   14240:	sub	sp, fp, #28
   14244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14248:	mov	r0, #5
   1424c:	ldr	r1, [sp, #48]	; 0x30
   14250:	ldr	r2, [fp, #-84]	; 0xffffffac
   14254:	ldr	r3, [sp, #84]	; 0x54
   14258:	str	r0, [sp]
   1425c:	ldr	r0, [fp, #12]
   14260:	str	r0, [sp, #4]
   14264:	ldr	r0, [fp, #16]
   14268:	str	r0, [sp, #8]
   1426c:	ldr	r0, [sp, #68]	; 0x44
   14270:	str	r0, [sp, #12]
   14274:	ldr	r0, [sp, #72]	; 0x48
   14278:	str	r0, [sp, #16]
   1427c:	ldr	r0, [sp, #76]	; 0x4c
   14280:	b	14234 <__assert_fail@plt+0x2d80>
   14284:	mov	r0, #0
   14288:	str	r0, [fp, #-72]	; 0xffffffb8
   1428c:	ldr	r1, [sp, #92]	; 0x5c
   14290:	cmp	r1, #0
   14294:	beq	142d4 <__assert_fail@plt+0x2e20>
   14298:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1429c:	ldr	r2, [sp, #76]	; 0x4c
   142a0:	tst	r0, #1
   142a4:	bne	142d8 <__assert_fail@plt+0x2e24>
   142a8:	ldrb	r0, [r1]
   142ac:	cmp	r0, #0
   142b0:	beq	142d8 <__assert_fail@plt+0x2e24>
   142b4:	add	r1, r1, #1
   142b8:	cmp	r9, sl
   142bc:	strbcc	r0, [r2, r9]
   142c0:	add	r9, r9, #1
   142c4:	ldrb	r0, [r1], #1
   142c8:	cmp	r0, #0
   142cc:	bne	142b8 <__assert_fail@plt+0x2e04>
   142d0:	b	142d8 <__assert_fail@plt+0x2e24>
   142d4:	ldr	r2, [sp, #76]	; 0x4c
   142d8:	cmp	r9, sl
   142dc:	movcc	r0, #0
   142e0:	strbcc	r0, [r2, r9]
   142e4:	mov	r0, r9
   142e8:	sub	sp, fp, #28
   142ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142f0:	mov	r2, #1
   142f4:	b	141c0 <__assert_fail@plt+0x2d0c>
   142f8:	ldr	r2, [sp, #80]	; 0x50
   142fc:	mov	r7, #5
   14300:	b	141e8 <__assert_fail@plt+0x2d34>
   14304:	bl	114a8 <abort@plt>
   14308:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1430c:	add	fp, sp, #28
   14310:	sub	sp, sp, #28
   14314:	movw	r5, #54656	; 0xd580
   14318:	cmp	r2, #0
   1431c:	mov	r4, r1
   14320:	mov	r7, r0
   14324:	str	r0, [sp, #20]
   14328:	movt	r5, #3
   1432c:	movne	r5, r2
   14330:	bl	113ac <__errno_location@plt>
   14334:	mov	sl, r0
   14338:	ldm	r5, {r0, r1}
   1433c:	ldr	r2, [r5, #40]	; 0x28
   14340:	ldr	r3, [r5, #44]	; 0x2c
   14344:	add	r9, r5, #8
   14348:	ldr	r6, [sl]
   1434c:	orr	r8, r1, #1
   14350:	mov	r1, #0
   14354:	str	r6, [sp, #24]
   14358:	stm	sp, {r0, r8, r9}
   1435c:	str	r2, [sp, #12]
   14360:	str	r3, [sp, #16]
   14364:	mov	r0, #0
   14368:	mov	r2, r7
   1436c:	mov	r3, r4
   14370:	mov	r6, r4
   14374:	bl	12f9c <__assert_fail@plt+0x1ae8>
   14378:	add	r7, r0, #1
   1437c:	mov	r0, r7
   14380:	bl	28c28 <__assert_fail@plt+0x17774>
   14384:	mov	r4, r0
   14388:	ldr	r0, [r5]
   1438c:	ldr	r2, [r5, #44]	; 0x2c
   14390:	ldr	r1, [r5, #40]	; 0x28
   14394:	mov	r3, r6
   14398:	stm	sp, {r0, r8, r9}
   1439c:	str	r2, [sp, #16]
   143a0:	str	r1, [sp, #12]
   143a4:	mov	r0, r4
   143a8:	mov	r1, r7
   143ac:	ldr	r2, [sp, #20]
   143b0:	bl	12f9c <__assert_fail@plt+0x1ae8>
   143b4:	ldr	r0, [sp, #24]
   143b8:	str	r0, [sl]
   143bc:	mov	r0, r4
   143c0:	sub	sp, fp, #28
   143c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143cc:	add	fp, sp, #28
   143d0:	sub	sp, sp, #36	; 0x24
   143d4:	movw	r8, #54656	; 0xd580
   143d8:	cmp	r3, #0
   143dc:	mov	r4, r2
   143e0:	str	r2, [sp, #24]
   143e4:	mov	r5, r1
   143e8:	mov	r6, r0
   143ec:	str	r0, [sp, #20]
   143f0:	movt	r8, #3
   143f4:	movne	r8, r3
   143f8:	bl	113ac <__errno_location@plt>
   143fc:	str	r0, [sp, #28]
   14400:	cmp	r4, #0
   14404:	add	sl, r8, #8
   14408:	ldm	r8, {r3, r9}
   1440c:	ldr	r7, [r0]
   14410:	ldr	r1, [r8, #40]	; 0x28
   14414:	ldr	r2, [r8, #44]	; 0x2c
   14418:	mov	r0, #0
   1441c:	orreq	r9, r9, #1
   14420:	str	r7, [sp, #32]
   14424:	mov	r7, r5
   14428:	stm	sp, {r3, r9, sl}
   1442c:	str	r1, [sp, #12]
   14430:	str	r2, [sp, #16]
   14434:	mov	r1, #0
   14438:	mov	r2, r6
   1443c:	mov	r3, r5
   14440:	bl	12f9c <__assert_fail@plt+0x1ae8>
   14444:	add	r4, r0, #1
   14448:	mov	r5, r0
   1444c:	mov	r0, r4
   14450:	bl	28c28 <__assert_fail@plt+0x17774>
   14454:	mov	r6, r0
   14458:	ldr	r0, [r8]
   1445c:	ldr	r2, [r8, #44]	; 0x2c
   14460:	ldr	r1, [r8, #40]	; 0x28
   14464:	mov	r3, r7
   14468:	stm	sp, {r0, r9, sl}
   1446c:	str	r2, [sp, #16]
   14470:	str	r1, [sp, #12]
   14474:	mov	r0, r6
   14478:	mov	r1, r4
   1447c:	ldr	r2, [sp, #20]
   14480:	bl	12f9c <__assert_fail@plt+0x1ae8>
   14484:	ldr	r0, [sp, #24]
   14488:	ldr	r1, [sp, #32]
   1448c:	ldr	r2, [sp, #28]
   14490:	cmp	r0, #0
   14494:	str	r1, [r2]
   14498:	strne	r5, [r0]
   1449c:	mov	r0, r6
   144a0:	sub	sp, fp, #28
   144a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144a8:	push	{r4, r5, r6, r7, fp, lr}
   144ac:	add	fp, sp, #16
   144b0:	movw	r4, #53656	; 0xd198
   144b4:	movt	r4, #3
   144b8:	ldrd	r6, [r4]
   144bc:	cmp	r7, #2
   144c0:	blt	144ec <__assert_fail@plt+0x3038>
   144c4:	add	r5, r6, #12
   144c8:	mov	r7, #0
   144cc:	ldr	r0, [r5, r7, lsl #3]
   144d0:	bl	2ae28 <__assert_fail@plt+0x19974>
   144d4:	ldr	r1, [r4, #4]
   144d8:	add	r2, r7, #2
   144dc:	add	r0, r7, #1
   144e0:	mov	r7, r0
   144e4:	cmp	r2, r1
   144e8:	blt	144cc <__assert_fail@plt+0x3018>
   144ec:	ldr	r0, [r6, #4]
   144f0:	movw	r5, #54704	; 0xd5b0
   144f4:	movt	r5, #3
   144f8:	cmp	r0, r5
   144fc:	beq	14510 <__assert_fail@plt+0x305c>
   14500:	bl	2ae28 <__assert_fail@plt+0x19974>
   14504:	mov	r0, #256	; 0x100
   14508:	str	r0, [r4, #8]
   1450c:	str	r5, [r4, #12]
   14510:	add	r5, r4, #8
   14514:	cmp	r6, r5
   14518:	beq	14528 <__assert_fail@plt+0x3074>
   1451c:	mov	r0, r6
   14520:	bl	2ae28 <__assert_fail@plt+0x19974>
   14524:	str	r5, [r4]
   14528:	mov	r0, #1
   1452c:	str	r0, [r4, #4]
   14530:	pop	{r4, r5, r6, r7, fp, pc}
   14534:	movw	r3, #54656	; 0xd580
   14538:	mvn	r2, #0
   1453c:	movt	r3, #3
   14540:	b	14544 <__assert_fail@plt+0x3090>
   14544:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14548:	add	fp, sp, #28
   1454c:	sub	sp, sp, #44	; 0x2c
   14550:	mov	r7, r3
   14554:	str	r2, [sp, #36]	; 0x24
   14558:	str	r1, [sp, #32]
   1455c:	mov	r5, r0
   14560:	bl	113ac <__errno_location@plt>
   14564:	cmp	r5, #0
   14568:	blt	146cc <__assert_fail@plt+0x3218>
   1456c:	cmn	r5, #-2147483647	; 0x80000001
   14570:	beq	146cc <__assert_fail@plt+0x3218>
   14574:	movw	r8, #53656	; 0xd198
   14578:	mov	r4, r0
   1457c:	movt	r8, #3
   14580:	ldr	r6, [r8]
   14584:	ldr	r1, [r8, #4]
   14588:	ldr	r0, [r0]
   1458c:	str	r4, [sp, #28]
   14590:	cmp	r1, r5
   14594:	str	r0, [sp, #24]
   14598:	ble	145a4 <__assert_fail@plt+0x30f0>
   1459c:	mov	sl, r6
   145a0:	b	14608 <__assert_fail@plt+0x3154>
   145a4:	mov	r0, #8
   145a8:	add	r9, r8, #8
   145ac:	add	r2, r5, #1
   145b0:	str	r1, [fp, #-32]	; 0xffffffe0
   145b4:	mvn	r3, #-2147483648	; 0x80000000
   145b8:	str	r0, [sp]
   145bc:	subs	r0, r6, r9
   145c0:	sub	r2, r2, r1
   145c4:	sub	r1, fp, #32
   145c8:	movne	r0, r6
   145cc:	bl	28e28 <__assert_fail@plt+0x17974>
   145d0:	str	r0, [r8]
   145d4:	cmp	r6, r9
   145d8:	mov	sl, r0
   145dc:	ldrdeq	r0, [r8, #8]
   145e0:	stmeq	sl, {r0, r1}
   145e4:	ldr	r1, [r8, #4]
   145e8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   145ec:	add	r0, sl, r1, lsl #3
   145f0:	sub	r1, r2, r1
   145f4:	lsl	r2, r1, #3
   145f8:	mov	r1, #0
   145fc:	bl	113d0 <memset@plt>
   14600:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14604:	str	r0, [r8, #4]
   14608:	mov	r9, sl
   1460c:	ldr	r6, [r9, r5, lsl #3]!
   14610:	ldr	r4, [r9, #4]!
   14614:	ldm	r7, {r0, r1}
   14618:	ldr	r2, [r7, #40]	; 0x28
   1461c:	ldr	r3, [r7, #44]	; 0x2c
   14620:	orr	r8, r1, #1
   14624:	add	r1, r7, #8
   14628:	stm	sp, {r0, r8}
   1462c:	add	r0, sp, #8
   14630:	str	r1, [sp, #20]
   14634:	stm	r0, {r1, r2, r3}
   14638:	mov	r0, r4
   1463c:	mov	r1, r6
   14640:	ldr	r2, [sp, #32]
   14644:	ldr	r3, [sp, #36]	; 0x24
   14648:	bl	12f9c <__assert_fail@plt+0x1ae8>
   1464c:	cmp	r6, r0
   14650:	bhi	146b4 <__assert_fail@plt+0x3200>
   14654:	add	r6, r0, #1
   14658:	movw	r0, #54704	; 0xd5b0
   1465c:	movt	r0, #3
   14660:	str	r6, [sl, r5, lsl #3]
   14664:	cmp	r4, r0
   14668:	beq	14674 <__assert_fail@plt+0x31c0>
   1466c:	mov	r0, r4
   14670:	bl	2ae28 <__assert_fail@plt+0x19974>
   14674:	mov	r0, r6
   14678:	bl	28c28 <__assert_fail@plt+0x17774>
   1467c:	str	r0, [r9]
   14680:	mov	r4, r0
   14684:	add	r3, sp, #8
   14688:	ldr	r0, [r7]
   1468c:	ldr	r1, [r7, #40]	; 0x28
   14690:	ldr	r2, [r7, #44]	; 0x2c
   14694:	stm	sp, {r0, r8}
   14698:	ldr	r0, [sp, #20]
   1469c:	stm	r3, {r0, r1, r2}
   146a0:	mov	r0, r4
   146a4:	mov	r1, r6
   146a8:	ldr	r2, [sp, #32]
   146ac:	ldr	r3, [sp, #36]	; 0x24
   146b0:	bl	12f9c <__assert_fail@plt+0x1ae8>
   146b4:	ldr	r1, [sp, #24]
   146b8:	ldr	r0, [sp, #28]
   146bc:	str	r1, [r0]
   146c0:	mov	r0, r4
   146c4:	sub	sp, fp, #28
   146c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146cc:	bl	114a8 <abort@plt>
   146d0:	movw	r3, #54656	; 0xd580
   146d4:	movt	r3, #3
   146d8:	b	14544 <__assert_fail@plt+0x3090>
   146dc:	movw	r3, #54656	; 0xd580
   146e0:	mov	r1, r0
   146e4:	mov	r0, #0
   146e8:	mvn	r2, #0
   146ec:	movt	r3, #3
   146f0:	b	14544 <__assert_fail@plt+0x3090>
   146f4:	movw	r3, #54656	; 0xd580
   146f8:	mov	r2, r1
   146fc:	mov	r1, r0
   14700:	mov	r0, #0
   14704:	movt	r3, #3
   14708:	b	14544 <__assert_fail@plt+0x3090>
   1470c:	push	{fp, lr}
   14710:	mov	fp, sp
   14714:	sub	sp, sp, #48	; 0x30
   14718:	vmov.i32	q8, #0	; 0x00000000
   1471c:	mov	ip, #32
   14720:	mov	r3, sp
   14724:	mov	lr, r2
   14728:	cmp	r1, #10
   1472c:	add	r2, r3, #16
   14730:	vst1.64	{d16-d17}, [r3], ip
   14734:	vst1.64	{d16-d17}, [r3]
   14738:	vst1.64	{d16-d17}, [r2]
   1473c:	beq	1475c <__assert_fail@plt+0x32a8>
   14740:	str	r1, [sp]
   14744:	mov	r3, sp
   14748:	mov	r1, lr
   1474c:	mvn	r2, #0
   14750:	bl	14544 <__assert_fail@plt+0x3090>
   14754:	mov	sp, fp
   14758:	pop	{fp, pc}
   1475c:	bl	114a8 <abort@plt>
   14760:	push	{r4, sl, fp, lr}
   14764:	add	fp, sp, #8
   14768:	sub	sp, sp, #48	; 0x30
   1476c:	mov	ip, r3
   14770:	mov	r3, sp
   14774:	vmov.i32	q8, #0	; 0x00000000
   14778:	mov	lr, #32
   1477c:	cmp	r1, #10
   14780:	add	r4, r3, #16
   14784:	vst1.64	{d16-d17}, [r3], lr
   14788:	vst1.64	{d16-d17}, [r3]
   1478c:	vst1.64	{d16-d17}, [r4]
   14790:	beq	147b0 <__assert_fail@plt+0x32fc>
   14794:	str	r1, [sp]
   14798:	mov	r1, r2
   1479c:	mov	r3, sp
   147a0:	mov	r2, ip
   147a4:	bl	14544 <__assert_fail@plt+0x3090>
   147a8:	sub	sp, fp, #8
   147ac:	pop	{r4, sl, fp, pc}
   147b0:	bl	114a8 <abort@plt>
   147b4:	push	{fp, lr}
   147b8:	mov	fp, sp
   147bc:	sub	sp, sp, #48	; 0x30
   147c0:	mov	r3, sp
   147c4:	vmov.i32	q8, #0	; 0x00000000
   147c8:	mov	ip, #32
   147cc:	cmp	r0, #10
   147d0:	add	r2, r3, #16
   147d4:	vst1.64	{d16-d17}, [r3], ip
   147d8:	vst1.64	{d16-d17}, [r3]
   147dc:	vst1.64	{d16-d17}, [r2]
   147e0:	beq	14800 <__assert_fail@plt+0x334c>
   147e4:	str	r0, [sp]
   147e8:	mov	r3, sp
   147ec:	mov	r0, #0
   147f0:	mvn	r2, #0
   147f4:	bl	14544 <__assert_fail@plt+0x3090>
   147f8:	mov	sp, fp
   147fc:	pop	{fp, pc}
   14800:	bl	114a8 <abort@plt>
   14804:	push	{fp, lr}
   14808:	mov	fp, sp
   1480c:	sub	sp, sp, #48	; 0x30
   14810:	mov	r3, sp
   14814:	vmov.i32	q8, #0	; 0x00000000
   14818:	mov	ip, #32
   1481c:	cmp	r0, #10
   14820:	add	lr, r3, #16
   14824:	vst1.64	{d16-d17}, [r3], ip
   14828:	vst1.64	{d16-d17}, [r3]
   1482c:	vst1.64	{d16-d17}, [lr]
   14830:	beq	1484c <__assert_fail@plt+0x3398>
   14834:	str	r0, [sp]
   14838:	mov	r3, sp
   1483c:	mov	r0, #0
   14840:	bl	14544 <__assert_fail@plt+0x3090>
   14844:	mov	sp, fp
   14848:	pop	{fp, pc}
   1484c:	bl	114a8 <abort@plt>
   14850:	push	{r4, sl, fp, lr}
   14854:	add	fp, sp, #8
   14858:	sub	sp, sp, #48	; 0x30
   1485c:	mov	lr, r0
   14860:	movw	r0, #54656	; 0xd580
   14864:	mov	r3, #32
   14868:	mov	ip, r1
   1486c:	mov	r4, #1
   14870:	movt	r0, #3
   14874:	add	r1, r0, #16
   14878:	vld1.64	{d16-d17}, [r0], r3
   1487c:	mov	r3, sp
   14880:	vld1.64	{d18-d19}, [r1]
   14884:	add	r1, r3, #16
   14888:	vld1.64	{d20-d21}, [r0]
   1488c:	add	r0, r3, #32
   14890:	vst1.64	{d18-d19}, [r1]
   14894:	mov	r1, r3
   14898:	vst1.64	{d20-d21}, [r0]
   1489c:	mov	r0, #28
   148a0:	and	r0, r0, r2, lsr #3
   148a4:	and	r2, r2, #31
   148a8:	vst1.64	{d16-d17}, [r1], r0
   148ac:	ldr	r0, [r1, #8]
   148b0:	bic	r4, r4, r0, lsr r2
   148b4:	eor	r0, r0, r4, lsl r2
   148b8:	mov	r2, ip
   148bc:	str	r0, [r1, #8]
   148c0:	mov	r0, #0
   148c4:	mov	r1, lr
   148c8:	bl	14544 <__assert_fail@plt+0x3090>
   148cc:	sub	sp, fp, #8
   148d0:	pop	{r4, sl, fp, pc}
   148d4:	push	{fp, lr}
   148d8:	mov	fp, sp
   148dc:	sub	sp, sp, #48	; 0x30
   148e0:	mov	ip, r0
   148e4:	movw	r0, #54656	; 0xd580
   148e8:	mov	r3, #32
   148ec:	movt	r0, #3
   148f0:	add	r2, r0, #16
   148f4:	vld1.64	{d16-d17}, [r0], r3
   148f8:	mov	r3, sp
   148fc:	vld1.64	{d18-d19}, [r2]
   14900:	add	r2, r3, #16
   14904:	vld1.64	{d20-d21}, [r0]
   14908:	add	r0, r3, #32
   1490c:	vst1.64	{d18-d19}, [r2]
   14910:	mov	r2, r3
   14914:	vst1.64	{d20-d21}, [r0]
   14918:	mov	r0, #28
   1491c:	and	r0, r0, r1, lsr #3
   14920:	and	r1, r1, #31
   14924:	vst1.64	{d16-d17}, [r2], r0
   14928:	mov	r0, #1
   1492c:	ldr	lr, [r2, #8]
   14930:	bic	r0, r0, lr, lsr r1
   14934:	eor	r0, lr, r0, lsl r1
   14938:	mov	r1, ip
   1493c:	str	r0, [r2, #8]
   14940:	mov	r0, #0
   14944:	mvn	r2, #0
   14948:	bl	14544 <__assert_fail@plt+0x3090>
   1494c:	mov	sp, fp
   14950:	pop	{fp, pc}
   14954:	push	{fp, lr}
   14958:	mov	fp, sp
   1495c:	sub	sp, sp, #48	; 0x30
   14960:	movw	r2, #54656	; 0xd580
   14964:	mov	r3, #32
   14968:	mov	r1, r0
   1496c:	movt	r2, #3
   14970:	add	r0, r2, #16
   14974:	vld1.64	{d16-d17}, [r2], r3
   14978:	mov	r3, sp
   1497c:	vld1.64	{d18-d19}, [r0]
   14980:	add	r0, r3, #16
   14984:	vld1.64	{d20-d21}, [r2]
   14988:	mov	r2, r3
   1498c:	vst1.64	{d18-d19}, [r0]
   14990:	add	r0, r3, #32
   14994:	vst1.64	{d20-d21}, [r0]
   14998:	mov	r0, #12
   1499c:	vst1.64	{d16-d17}, [r2], r0
   149a0:	ldr	r0, [r2]
   149a4:	orr	r0, r0, #67108864	; 0x4000000
   149a8:	str	r0, [r2]
   149ac:	mov	r0, #0
   149b0:	mvn	r2, #0
   149b4:	bl	14544 <__assert_fail@plt+0x3090>
   149b8:	mov	sp, fp
   149bc:	pop	{fp, pc}
   149c0:	push	{fp, lr}
   149c4:	mov	fp, sp
   149c8:	sub	sp, sp, #48	; 0x30
   149cc:	mov	ip, r1
   149d0:	mov	r1, r0
   149d4:	movw	r0, #54656	; 0xd580
   149d8:	mov	r3, #32
   149dc:	movt	r0, #3
   149e0:	add	r2, r0, #16
   149e4:	vld1.64	{d16-d17}, [r0], r3
   149e8:	mov	r3, sp
   149ec:	vld1.64	{d18-d19}, [r2]
   149f0:	add	r2, r3, #16
   149f4:	vld1.64	{d20-d21}, [r0]
   149f8:	add	r0, r3, #32
   149fc:	vst1.64	{d18-d19}, [r2]
   14a00:	mov	r2, r3
   14a04:	vst1.64	{d20-d21}, [r0]
   14a08:	mov	r0, #12
   14a0c:	vst1.64	{d16-d17}, [r2], r0
   14a10:	ldr	r0, [r2]
   14a14:	orr	r0, r0, #67108864	; 0x4000000
   14a18:	str	r0, [r2]
   14a1c:	mov	r0, #0
   14a20:	mov	r2, ip
   14a24:	bl	14544 <__assert_fail@plt+0x3090>
   14a28:	mov	sp, fp
   14a2c:	pop	{fp, pc}
   14a30:	push	{r4, sl, fp, lr}
   14a34:	add	fp, sp, #8
   14a38:	sub	sp, sp, #96	; 0x60
   14a3c:	mov	ip, r2
   14a40:	mov	r2, sp
   14a44:	vmov.i32	q8, #0	; 0x00000000
   14a48:	mov	r4, #28
   14a4c:	cmp	r1, #10
   14a50:	mov	r3, r2
   14a54:	add	lr, r2, #16
   14a58:	vst1.64	{d16-d17}, [r3], r4
   14a5c:	vst1.64	{d16-d17}, [lr]
   14a60:	vst1.32	{d16-d17}, [r3]
   14a64:	beq	14ab4 <__assert_fail@plt+0x3600>
   14a68:	vld1.64	{d16-d17}, [r2], r4
   14a6c:	vld1.64	{d18-d19}, [lr]
   14a70:	add	r3, sp, #48	; 0x30
   14a74:	add	r4, r3, #4
   14a78:	vld1.32	{d20-d21}, [r2]
   14a7c:	add	r2, r3, #20
   14a80:	vst1.32	{d16-d17}, [r4]
   14a84:	vst1.32	{d18-d19}, [r2]
   14a88:	add	r2, r3, #32
   14a8c:	vst1.32	{d20-d21}, [r2]
   14a90:	str	r1, [sp, #48]	; 0x30
   14a94:	mvn	r2, #0
   14a98:	ldr	r1, [sp, #60]	; 0x3c
   14a9c:	orr	r1, r1, #67108864	; 0x4000000
   14aa0:	str	r1, [sp, #60]	; 0x3c
   14aa4:	mov	r1, ip
   14aa8:	bl	14544 <__assert_fail@plt+0x3090>
   14aac:	sub	sp, fp, #8
   14ab0:	pop	{r4, sl, fp, pc}
   14ab4:	bl	114a8 <abort@plt>
   14ab8:	push	{r4, r5, fp, lr}
   14abc:	add	fp, sp, #8
   14ac0:	sub	sp, sp, #48	; 0x30
   14ac4:	mov	ip, r3
   14ac8:	movw	r3, #54656	; 0xd580
   14acc:	mov	lr, #32
   14ad0:	cmp	r1, #0
   14ad4:	mov	r5, sp
   14ad8:	movt	r3, #3
   14adc:	cmpne	r2, #0
   14ae0:	add	r4, r3, #16
   14ae4:	vld1.64	{d16-d17}, [r3], lr
   14ae8:	vld1.64	{d18-d19}, [r4]
   14aec:	add	r4, r5, #16
   14af0:	vld1.64	{d20-d21}, [r3]
   14af4:	vst1.64	{d16-d17}, [r5], lr
   14af8:	mov	r3, #10
   14afc:	vst1.64	{d18-d19}, [r4]
   14b00:	vst1.64	{d20-d21}, [r5]
   14b04:	str	r3, [sp]
   14b08:	bne	14b10 <__assert_fail@plt+0x365c>
   14b0c:	bl	114a8 <abort@plt>
   14b10:	str	r2, [sp, #44]	; 0x2c
   14b14:	str	r1, [sp, #40]	; 0x28
   14b18:	mov	r3, sp
   14b1c:	mov	r1, ip
   14b20:	mvn	r2, #0
   14b24:	bl	14544 <__assert_fail@plt+0x3090>
   14b28:	sub	sp, fp, #8
   14b2c:	pop	{r4, r5, fp, pc}
   14b30:	push	{r4, r5, fp, lr}
   14b34:	add	fp, sp, #8
   14b38:	sub	sp, sp, #48	; 0x30
   14b3c:	mov	lr, r3
   14b40:	movw	r3, #54656	; 0xd580
   14b44:	mov	ip, #32
   14b48:	cmp	r1, #0
   14b4c:	mov	r5, sp
   14b50:	movt	r3, #3
   14b54:	cmpne	r2, #0
   14b58:	add	r4, r3, #16
   14b5c:	vld1.64	{d16-d17}, [r3], ip
   14b60:	vld1.64	{d18-d19}, [r4]
   14b64:	add	r4, r5, #16
   14b68:	vld1.64	{d20-d21}, [r3]
   14b6c:	vst1.64	{d16-d17}, [r5], ip
   14b70:	mov	r3, #10
   14b74:	vst1.64	{d18-d19}, [r4]
   14b78:	vst1.64	{d20-d21}, [r5]
   14b7c:	str	r3, [sp]
   14b80:	bne	14b88 <__assert_fail@plt+0x36d4>
   14b84:	bl	114a8 <abort@plt>
   14b88:	ldr	ip, [fp, #8]
   14b8c:	str	r2, [sp, #44]	; 0x2c
   14b90:	str	r1, [sp, #40]	; 0x28
   14b94:	mov	r3, sp
   14b98:	mov	r1, lr
   14b9c:	mov	r2, ip
   14ba0:	bl	14544 <__assert_fail@plt+0x3090>
   14ba4:	sub	sp, fp, #8
   14ba8:	pop	{r4, r5, fp, pc}
   14bac:	push	{r4, sl, fp, lr}
   14bb0:	add	fp, sp, #8
   14bb4:	sub	sp, sp, #48	; 0x30
   14bb8:	mov	ip, r2
   14bbc:	movw	r2, #54656	; 0xd580
   14bc0:	mov	lr, #32
   14bc4:	cmp	r0, #0
   14bc8:	mov	r4, sp
   14bcc:	movt	r2, #3
   14bd0:	cmpne	r1, #0
   14bd4:	add	r3, r2, #16
   14bd8:	vld1.64	{d16-d17}, [r2], lr
   14bdc:	vld1.64	{d18-d19}, [r3]
   14be0:	add	r3, r4, #16
   14be4:	vld1.64	{d20-d21}, [r2]
   14be8:	vst1.64	{d16-d17}, [r4], lr
   14bec:	mov	r2, #10
   14bf0:	vst1.64	{d18-d19}, [r3]
   14bf4:	vst1.64	{d20-d21}, [r4]
   14bf8:	str	r2, [sp]
   14bfc:	bne	14c04 <__assert_fail@plt+0x3750>
   14c00:	bl	114a8 <abort@plt>
   14c04:	str	r1, [sp, #44]	; 0x2c
   14c08:	str	r0, [sp, #40]	; 0x28
   14c0c:	mov	r3, sp
   14c10:	mov	r0, #0
   14c14:	mov	r1, ip
   14c18:	mvn	r2, #0
   14c1c:	bl	14544 <__assert_fail@plt+0x3090>
   14c20:	sub	sp, fp, #8
   14c24:	pop	{r4, sl, fp, pc}
   14c28:	push	{r4, r5, fp, lr}
   14c2c:	add	fp, sp, #8
   14c30:	sub	sp, sp, #48	; 0x30
   14c34:	mov	lr, r2
   14c38:	movw	r2, #54656	; 0xd580
   14c3c:	mov	ip, r3
   14c40:	mov	r3, #32
   14c44:	cmp	r0, #0
   14c48:	mov	r5, sp
   14c4c:	movt	r2, #3
   14c50:	cmpne	r1, #0
   14c54:	add	r4, r2, #16
   14c58:	vld1.64	{d16-d17}, [r2], r3
   14c5c:	vld1.64	{d18-d19}, [r4]
   14c60:	add	r4, r5, #16
   14c64:	vld1.64	{d20-d21}, [r2]
   14c68:	vst1.64	{d16-d17}, [r5], r3
   14c6c:	mov	r2, #10
   14c70:	vst1.64	{d18-d19}, [r4]
   14c74:	vst1.64	{d20-d21}, [r5]
   14c78:	str	r2, [sp]
   14c7c:	bne	14c84 <__assert_fail@plt+0x37d0>
   14c80:	bl	114a8 <abort@plt>
   14c84:	str	r1, [sp, #44]	; 0x2c
   14c88:	str	r0, [sp, #40]	; 0x28
   14c8c:	mov	r3, sp
   14c90:	mov	r0, #0
   14c94:	mov	r1, lr
   14c98:	mov	r2, ip
   14c9c:	bl	14544 <__assert_fail@plt+0x3090>
   14ca0:	sub	sp, fp, #8
   14ca4:	pop	{r4, r5, fp, pc}
   14ca8:	movw	r3, #53608	; 0xd168
   14cac:	movt	r3, #3
   14cb0:	b	14544 <__assert_fail@plt+0x3090>
   14cb4:	movw	r3, #53608	; 0xd168
   14cb8:	mov	r2, r1
   14cbc:	mov	r1, r0
   14cc0:	mov	r0, #0
   14cc4:	movt	r3, #3
   14cc8:	b	14544 <__assert_fail@plt+0x3090>
   14ccc:	movw	r3, #53608	; 0xd168
   14cd0:	mvn	r2, #0
   14cd4:	movt	r3, #3
   14cd8:	b	14544 <__assert_fail@plt+0x3090>
   14cdc:	movw	r3, #53608	; 0xd168
   14ce0:	mov	r1, r0
   14ce4:	mov	r0, #0
   14ce8:	mvn	r2, #0
   14cec:	movt	r3, #3
   14cf0:	b	14544 <__assert_fail@plt+0x3090>
	...
   14d00:	push	{fp, lr}
   14d04:	mov	fp, sp
   14d08:	mov	lr, r0
   14d0c:	movw	r0, #54960	; 0xd6b0
   14d10:	mov	ip, r1
   14d14:	ldrb	r1, [r2, #28]
   14d18:	movt	r0, #3
   14d1c:	ldr	r3, [r0]
   14d20:	mov	r0, #16
   14d24:	and	r1, r1, #111	; 0x6f
   14d28:	and	r0, r0, r3, lsr #21
   14d2c:	orr	r0, r1, r0
   14d30:	mov	r1, lr
   14d34:	orr	r0, r0, #128	; 0x80
   14d38:	strb	r0, [r2, #28]
   14d3c:	mov	r0, r2
   14d40:	mov	r2, ip
   14d44:	bl	14d80 <__assert_fail@plt+0x38cc>
   14d48:	cmp	r0, #0
   14d4c:	moveq	r0, #0
   14d50:	popeq	{fp, pc}
   14d54:	movw	r1, #49560	; 0xc198
   14d58:	mov	r2, #5
   14d5c:	movt	r1, #2
   14d60:	ldr	r0, [r1, r0, lsl #2]
   14d64:	movw	r1, #49176	; 0xc018
   14d68:	movt	r1, #2
   14d6c:	add	r1, r1, r0
   14d70:	mov	r0, #0
   14d74:	pop	{fp, lr}
   14d78:	b	112b0 <dcgettext@plt>
   14d7c:	nop	{0}
   14d80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d84:	add	fp, sp, #28
   14d88:	sub	sp, sp, #140	; 0x8c
   14d8c:	mov	r9, r0
   14d90:	mov	r0, #0
   14d94:	mov	sl, r3
   14d98:	mov	r7, r2
   14d9c:	mov	r8, r1
   14da0:	str	r0, [fp, #-52]	; 0xffffffcc
   14da4:	str	r0, [r9, #8]
   14da8:	str	r3, [r9, #12]
   14dac:	str	r0, [r9, #24]
   14db0:	ldrb	r0, [r9, #28]
   14db4:	and	r0, r0, #144	; 0x90
   14db8:	strb	r0, [r9, #28]
   14dbc:	ldr	r0, [r9, #4]
   14dc0:	ldr	r6, [r9]
   14dc4:	cmp	r0, #159	; 0x9f
   14dc8:	bls	15758 <__assert_fail@plt+0x42a4>
   14dcc:	mov	r0, #160	; 0xa0
   14dd0:	mov	r1, #0
   14dd4:	mov	r2, #160	; 0xa0
   14dd8:	str	r0, [r9, #8]
   14ddc:	mov	r0, r6
   14de0:	bl	113d0 <memset@plt>
   14de4:	mov	r0, #31
   14de8:	str	r0, [r6, #64]	; 0x40
   14dec:	movw	r0, #43689	; 0xaaa9
   14df0:	movt	r0, #2730	; 0xaaa
   14df4:	cmp	r7, r0
   14df8:	bhi	15118 <__assert_fail@plt+0x3c64>
   14dfc:	add	r0, r7, #1
   14e00:	str	r0, [r6, #4]
   14e04:	str	r0, [sp, #28]
   14e08:	lsl	r0, r0, #3
   14e0c:	bl	2ac60 <__assert_fail@plt+0x197ac>
   14e10:	str	r0, [r6]
   14e14:	mov	r0, #1
   14e18:	mov	r4, r0
   14e1c:	lsl	r0, r0, #1
   14e20:	cmp	r4, r7
   14e24:	bls	14e18 <__assert_fail@plt+0x3964>
   14e28:	mov	r0, #12
   14e2c:	mov	r1, r4
   14e30:	bl	2ac0c <__assert_fail@plt+0x19758>
   14e34:	str	r0, [r6, #32]
   14e38:	sub	r0, r4, #1
   14e3c:	str	r0, [r6, #68]	; 0x44
   14e40:	bl	112f8 <__ctype_get_mb_cur_max@plt>
   14e44:	str	r0, [r6, #92]	; 0x5c
   14e48:	mov	r0, #14
   14e4c:	bl	11454 <nl_langinfo@plt>
   14e50:	ldrb	r1, [r0]
   14e54:	orr	r1, r1, #32
   14e58:	cmp	r1, #117	; 0x75
   14e5c:	bne	14ea8 <__assert_fail@plt+0x39f4>
   14e60:	ldrb	r1, [r0, #1]
   14e64:	orr	r1, r1, #32
   14e68:	cmp	r1, #116	; 0x74
   14e6c:	bne	14ea8 <__assert_fail@plt+0x39f4>
   14e70:	ldrb	r1, [r0, #2]
   14e74:	orr	r1, r1, #32
   14e78:	cmp	r1, #102	; 0x66
   14e7c:	bne	14ea8 <__assert_fail@plt+0x39f4>
   14e80:	ldrb	r1, [r0, #3]!
   14e84:	cmp	r1, #45	; 0x2d
   14e88:	movw	r1, #49676	; 0xc20c
   14e8c:	addeq	r0, r0, #1
   14e90:	movt	r1, #2
   14e94:	bl	111fc <strcmp@plt>
   14e98:	cmp	r0, #0
   14e9c:	ldrbeq	r0, [r6, #88]	; 0x58
   14ea0:	orreq	r0, r0, #4
   14ea4:	strbeq	r0, [r6, #88]	; 0x58
   14ea8:	ldrb	r0, [r6, #88]	; 0x58
   14eac:	and	r1, r0, #247	; 0xf7
   14eb0:	strb	r1, [r6, #88]	; 0x58
   14eb4:	ldr	r1, [r6, #92]	; 0x5c
   14eb8:	cmp	r1, #2
   14ebc:	blt	15104 <__assert_fail@plt+0x3c50>
   14ec0:	tst	r0, #4
   14ec4:	bne	150f8 <__assert_fail@plt+0x3c44>
   14ec8:	mov	r0, #32
   14ecc:	mov	r1, #1
   14ed0:	mov	r5, #1
   14ed4:	bl	2ac0c <__assert_fail@plt+0x19758>
   14ed8:	cmp	r0, #0
   14edc:	str	r0, [r6, #60]	; 0x3c
   14ee0:	beq	15118 <__assert_fail@plt+0x3c64>
   14ee4:	mov	r4, #0
   14ee8:	mov	r0, r4
   14eec:	bl	113dc <btowc@plt>
   14ef0:	cmn	r0, #1
   14ef4:	ldrne	r1, [r6, #60]	; 0x3c
   14ef8:	ldrne	r2, [r1]
   14efc:	orrne	r2, r2, r5, lsl r4
   14f00:	strne	r2, [r1]
   14f04:	cmp	r4, r0
   14f08:	add	r4, r4, #1
   14f0c:	ldrbne	r0, [r6, #88]	; 0x58
   14f10:	orrne	r0, r0, #8
   14f14:	strbne	r0, [r6, #88]	; 0x58
   14f18:	cmp	r4, #32
   14f1c:	bne	14ee8 <__assert_fail@plt+0x3a34>
   14f20:	mov	r4, #32
   14f24:	mov	r5, #1
   14f28:	mov	r0, r4
   14f2c:	bl	113dc <btowc@plt>
   14f30:	cmn	r0, #1
   14f34:	ldrne	r2, [r6, #60]	; 0x3c
   14f38:	subne	r1, r4, #32
   14f3c:	ldrne	r3, [r2, #4]
   14f40:	orrne	r1, r3, r5, lsl r1
   14f44:	strne	r1, [r2, #4]
   14f48:	cmp	r0, r4
   14f4c:	sub	r1, r4, #31
   14f50:	ldrbne	r0, [r6, #88]	; 0x58
   14f54:	orrne	r0, r0, #8
   14f58:	strbne	r0, [r6, #88]	; 0x58
   14f5c:	add	r0, r4, #1
   14f60:	cmp	r1, #32
   14f64:	mov	r4, r0
   14f68:	bne	14f28 <__assert_fail@plt+0x3a74>
   14f6c:	mov	r4, #64	; 0x40
   14f70:	mov	r5, #1
   14f74:	mov	r0, r4
   14f78:	bl	113dc <btowc@plt>
   14f7c:	cmn	r0, #1
   14f80:	ldrne	r2, [r6, #60]	; 0x3c
   14f84:	subne	r1, r4, #64	; 0x40
   14f88:	ldrne	r3, [r2, #8]
   14f8c:	orrne	r1, r3, r5, lsl r1
   14f90:	strne	r1, [r2, #8]
   14f94:	cmp	r0, r4
   14f98:	sub	r1, r4, #63	; 0x3f
   14f9c:	ldrbne	r0, [r6, #88]	; 0x58
   14fa0:	orrne	r0, r0, #8
   14fa4:	strbne	r0, [r6, #88]	; 0x58
   14fa8:	add	r0, r4, #1
   14fac:	cmp	r1, #32
   14fb0:	mov	r4, r0
   14fb4:	bne	14f74 <__assert_fail@plt+0x3ac0>
   14fb8:	mov	r4, #96	; 0x60
   14fbc:	mov	r5, #1
   14fc0:	mov	r0, r4
   14fc4:	bl	113dc <btowc@plt>
   14fc8:	cmn	r0, #1
   14fcc:	ldrne	r2, [r6, #60]	; 0x3c
   14fd0:	subne	r1, r4, #96	; 0x60
   14fd4:	ldrne	r3, [r2, #12]
   14fd8:	orrne	r1, r3, r5, lsl r1
   14fdc:	strne	r1, [r2, #12]
   14fe0:	cmp	r0, r4
   14fe4:	sub	r1, r4, #95	; 0x5f
   14fe8:	ldrbne	r0, [r6, #88]	; 0x58
   14fec:	orrne	r0, r0, #8
   14ff0:	strbne	r0, [r6, #88]	; 0x58
   14ff4:	add	r0, r4, #1
   14ff8:	cmp	r1, #32
   14ffc:	mov	r4, r0
   15000:	bne	14fc0 <__assert_fail@plt+0x3b0c>
   15004:	mov	r4, #128	; 0x80
   15008:	mov	r5, #1
   1500c:	mov	r0, r4
   15010:	bl	113dc <btowc@plt>
   15014:	cmn	r0, #1
   15018:	ldrne	r1, [r6, #60]	; 0x3c
   1501c:	subne	r0, r4, #128	; 0x80
   15020:	ldrne	r2, [r1, #16]
   15024:	orrne	r0, r2, r5, lsl r0
   15028:	strne	r0, [r1, #16]
   1502c:	sub	r1, r4, #127	; 0x7f
   15030:	add	r0, r4, #1
   15034:	cmp	r1, #32
   15038:	mov	r4, r0
   1503c:	bne	1500c <__assert_fail@plt+0x3b58>
   15040:	mov	r4, #160	; 0xa0
   15044:	mov	r5, #1
   15048:	mov	r0, r4
   1504c:	bl	113dc <btowc@plt>
   15050:	cmn	r0, #1
   15054:	ldrne	r1, [r6, #60]	; 0x3c
   15058:	subne	r0, r4, #160	; 0xa0
   1505c:	ldrne	r2, [r1, #20]
   15060:	orrne	r0, r2, r5, lsl r0
   15064:	strne	r0, [r1, #20]
   15068:	sub	r1, r4, #159	; 0x9f
   1506c:	add	r0, r4, #1
   15070:	cmp	r1, #32
   15074:	mov	r4, r0
   15078:	bne	15048 <__assert_fail@plt+0x3b94>
   1507c:	mov	r4, #192	; 0xc0
   15080:	mov	r5, #1
   15084:	mov	r0, r4
   15088:	bl	113dc <btowc@plt>
   1508c:	cmn	r0, #1
   15090:	ldrne	r1, [r6, #60]	; 0x3c
   15094:	subne	r0, r4, #192	; 0xc0
   15098:	ldrne	r2, [r1, #24]
   1509c:	orrne	r0, r2, r5, lsl r0
   150a0:	strne	r0, [r1, #24]
   150a4:	sub	r1, r4, #191	; 0xbf
   150a8:	add	r0, r4, #1
   150ac:	cmp	r1, #32
   150b0:	mov	r4, r0
   150b4:	bne	15084 <__assert_fail@plt+0x3bd0>
   150b8:	mov	r4, #224	; 0xe0
   150bc:	mov	r5, #1
   150c0:	mov	r0, r4
   150c4:	bl	113dc <btowc@plt>
   150c8:	cmn	r0, #1
   150cc:	ldrne	r1, [r6, #60]	; 0x3c
   150d0:	subne	r0, r4, #224	; 0xe0
   150d4:	ldrne	r2, [r1, #28]
   150d8:	orrne	r0, r2, r5, lsl r0
   150dc:	strne	r0, [r1, #28]
   150e0:	sub	r1, r4, #223	; 0xdf
   150e4:	add	r0, r4, #1
   150e8:	cmp	r1, #32
   150ec:	mov	r4, r0
   150f0:	bne	150c0 <__assert_fail@plt+0x3c0c>
   150f4:	b	15104 <__assert_fail@plt+0x3c50>
   150f8:	movw	r0, #49628	; 0xc1dc
   150fc:	movt	r0, #2
   15100:	str	r0, [r6, #60]	; 0x3c
   15104:	ldr	r0, [r6]
   15108:	cmp	r0, #0
   1510c:	ldrne	r0, [r6, #32]
   15110:	cmpne	r0, #0
   15114:	bne	15140 <__assert_fail@plt+0x3c8c>
   15118:	mov	r4, #12
   1511c:	mov	r0, r6
   15120:	str	r4, [fp, #-52]	; 0xffffffcc
   15124:	bl	16fcc <__assert_fail@plt+0x5b18>
   15128:	mov	r0, #0
   1512c:	str	r0, [r9]
   15130:	str	r0, [r9, #4]
   15134:	mov	r0, r4
   15138:	sub	sp, fp, #28
   1513c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15140:	movw	r0, #0
   15144:	movw	r1, #0
   15148:	mov	r4, #0
   1514c:	movt	r0, #0
   15150:	movt	r1, #0
   15154:	str	r4, [fp, #-52]	; 0xffffffcc
   15158:	orrs	r0, r1, r0
   1515c:	str	r0, [sp, #8]
   15160:	beq	15178 <__assert_fail@plt+0x3cc4>
   15164:	add	r0, r6, #136	; 0x88
   15168:	mov	r1, #0
   1516c:	bl	11268 <pthread_mutex_init@plt>
   15170:	cmp	r0, #0
   15174:	bne	15118 <__assert_fail@plt+0x3c64>
   15178:	add	r1, sp, #32
   1517c:	vmov.i32	q8, #0	; 0x00000000
   15180:	str	r9, [sp, #16]
   15184:	ldr	r9, [r9, #20]
   15188:	mov	r5, r8
   1518c:	add	r0, r1, #64	; 0x40
   15190:	vst1.32	{d16-d17}, [r0]
   15194:	add	r0, r1, #52	; 0x34
   15198:	vst1.32	{d16-d17}, [r0]
   1519c:	add	r0, r1, #36	; 0x24
   151a0:	vst1.32	{d16-d17}, [r0]
   151a4:	add	r0, r1, #20
   151a8:	vst1.32	{d16-d17}, [r0]
   151ac:	add	r0, r1, #4
   151b0:	add	r1, r1, #44	; 0x2c
   151b4:	vst1.32	{d16-d17}, [r0]
   151b8:	str	r8, [sp, #32]
   151bc:	ubfx	r0, sl, #22, #1
   151c0:	str	sl, [sp, #24]
   151c4:	vdup.32	q8, r7
   151c8:	str	r6, [sp, #20]
   151cc:	strb	r0, [sp, #104]	; 0x68
   151d0:	and	r0, sl, #4194304	; 0x400000
   151d4:	str	r9, [sp, #96]	; 0x60
   151d8:	orrs	sl, r0, r9
   151dc:	str	r0, [sp, #12]
   151e0:	movwne	sl, #1
   151e4:	cmp	r7, #1
   151e8:	strb	sl, [sp, #107]	; 0x6b
   151ec:	ldr	r0, [r6, #92]	; 0x5c
   151f0:	str	r0, [sp, #112]	; 0x70
   151f4:	ldrb	r2, [r6, #88]	; 0x58
   151f8:	vst1.32	{d16-d17}, [r1]
   151fc:	ubfx	r1, r2, #3, #1
   15200:	strb	r1, [sp, #106]	; 0x6a
   15204:	ubfx	r1, r2, #2, #1
   15208:	strb	r1, [sp, #105]	; 0x69
   1520c:	blt	15280 <__assert_fail@plt+0x3dcc>
   15210:	ldr	r6, [sp, #28]
   15214:	cmp	r0, #2
   15218:	blt	15240 <__assert_fail@plt+0x3d8c>
   1521c:	mov	r8, #12
   15220:	cmn	r6, #-1073741823	; 0xc0000001
   15224:	bhi	1574c <__assert_fail@plt+0x4298>
   15228:	lsl	r1, r6, #2
   1522c:	mov	r0, #0
   15230:	bl	2ac90 <__assert_fail@plt+0x197dc>
   15234:	cmp	r0, #0
   15238:	beq	1574c <__assert_fail@plt+0x4298>
   1523c:	str	r0, [sp, #40]	; 0x28
   15240:	cmp	sl, #0
   15244:	mov	r4, #0
   15248:	mov	sl, #0
   1524c:	beq	15270 <__assert_fail@plt+0x3dbc>
   15250:	mov	r0, #0
   15254:	mov	r1, r6
   15258:	bl	2ac90 <__assert_fail@plt+0x197dc>
   1525c:	cmp	r0, #0
   15260:	beq	15748 <__assert_fail@plt+0x4294>
   15264:	mov	r4, r0
   15268:	mov	sl, #1
   1526c:	str	r0, [sp, #36]	; 0x24
   15270:	ldr	r0, [sp, #20]
   15274:	str	r6, [sp, #68]	; 0x44
   15278:	ldr	r0, [r0, #92]	; 0x5c
   1527c:	b	15284 <__assert_fail@plt+0x3dd0>
   15280:	mov	r6, #0
   15284:	ldr	r1, [sp, #12]
   15288:	cmp	sl, #0
   1528c:	moveq	r4, r5
   15290:	str	r4, [sp, #36]	; 0x24
   15294:	cmp	r1, #0
   15298:	beq	1537c <__assert_fail@plt+0x3ec8>
   1529c:	cmp	r0, #2
   152a0:	blt	15394 <__assert_fail@plt+0x3ee0>
   152a4:	add	r0, sp, #32
   152a8:	bl	1a170 <__assert_fail@plt+0x8cbc>
   152ac:	ldr	r9, [sp, #20]
   152b0:	cmp	r0, #0
   152b4:	bne	15374 <__assert_fail@plt+0x3ec0>
   152b8:	add	sl, sp, #32
   152bc:	ldr	r0, [sp, #64]	; 0x40
   152c0:	cmp	r0, r7
   152c4:	bge	15490 <__assert_fail@plt+0x3fdc>
   152c8:	ldr	r0, [r9, #92]	; 0x5c
   152cc:	ldr	r2, [sp, #60]	; 0x3c
   152d0:	ldr	r1, [sp, #68]	; 0x44
   152d4:	add	r0, r0, r2
   152d8:	cmp	r1, r0
   152dc:	bgt	15490 <__assert_fail@plt+0x3fdc>
   152e0:	ldr	r0, [sp, #112]	; 0x70
   152e4:	lsl	r6, r1, #1
   152e8:	cmp	r0, #2
   152ec:	blt	1533c <__assert_fail@plt+0x3e88>
   152f0:	mov	r8, #12
   152f4:	cmn	r6, #-1073741823	; 0xc0000001
   152f8:	bhi	1574c <__assert_fail@plt+0x4298>
   152fc:	ldr	r0, [sp, #40]	; 0x28
   15300:	lsl	r4, r1, #3
   15304:	mov	r1, r4
   15308:	bl	2ac90 <__assert_fail@plt+0x197dc>
   1530c:	cmp	r0, #0
   15310:	beq	1574c <__assert_fail@plt+0x4298>
   15314:	str	r0, [sp, #40]	; 0x28
   15318:	ldr	r0, [sp, #44]	; 0x2c
   1531c:	cmp	r0, #0
   15320:	beq	1533c <__assert_fail@plt+0x3e88>
   15324:	mov	r1, r4
   15328:	bl	2ac90 <__assert_fail@plt+0x197dc>
   1532c:	cmp	r0, #0
   15330:	beq	1574c <__assert_fail@plt+0x4298>
   15334:	ldr	r9, [sp, #20]
   15338:	str	r0, [sp, #44]	; 0x2c
   1533c:	ldrb	r0, [sp, #107]	; 0x6b
   15340:	cmp	r0, #0
   15344:	beq	15360 <__assert_fail@plt+0x3eac>
   15348:	ldr	r0, [sp, #36]	; 0x24
   1534c:	mov	r1, r6
   15350:	bl	2ac90 <__assert_fail@plt+0x197dc>
   15354:	cmp	r0, #0
   15358:	beq	15748 <__assert_fail@plt+0x4294>
   1535c:	str	r0, [sp, #36]	; 0x24
   15360:	mov	r0, sl
   15364:	str	r6, [sp, #68]	; 0x44
   15368:	bl	1a170 <__assert_fail@plt+0x8cbc>
   1536c:	cmp	r0, #0
   15370:	beq	152bc <__assert_fail@plt+0x3e08>
   15374:	mov	r8, r0
   15378:	b	1574c <__assert_fail@plt+0x4298>
   1537c:	cmp	r0, #2
   15380:	blt	15400 <__assert_fail@plt+0x3f4c>
   15384:	add	r0, sp, #32
   15388:	bl	1a830 <__assert_fail@plt+0x937c>
   1538c:	ldr	r9, [sp, #20]
   15390:	b	15490 <__assert_fail@plt+0x3fdc>
   15394:	cmp	r6, r7
   15398:	movgt	r6, r7
   1539c:	cmp	r6, #1
   153a0:	blt	1546c <__assert_fail@plt+0x3fb8>
   153a4:	mov	r0, #0
   153a8:	mov	r4, #0
   153ac:	b	153bc <__assert_fail@plt+0x3f08>
   153b0:	ldr	r5, [sp, #32]
   153b4:	ldr	r0, [sp, #56]	; 0x38
   153b8:	ldr	r9, [sp, #96]	; 0x60
   153bc:	add	r0, r5, r0
   153c0:	cmp	r9, #0
   153c4:	ldrb	r5, [r0, r4]
   153c8:	ldrbne	r5, [r9, r5]
   153cc:	add	r0, r5, #128	; 0x80
   153d0:	lsr	r0, r0, #7
   153d4:	cmp	r0, #2
   153d8:	bhi	153e8 <__assert_fail@plt+0x3f34>
   153dc:	bl	11358 <__ctype_toupper_loc@plt>
   153e0:	ldr	r0, [r0]
   153e4:	ldr	r5, [r0, r5, lsl #2]
   153e8:	ldr	r0, [sp, #36]	; 0x24
   153ec:	strb	r5, [r0, r4]
   153f0:	add	r4, r4, #1
   153f4:	cmp	r4, r6
   153f8:	blt	153b0 <__assert_fail@plt+0x3efc>
   153fc:	b	15470 <__assert_fail@plt+0x3fbc>
   15400:	cmp	r9, #0
   15404:	beq	15470 <__assert_fail@plt+0x3fbc>
   15408:	cmp	r6, r7
   1540c:	movgt	r6, r7
   15410:	cmp	r6, #1
   15414:	blt	15480 <__assert_fail@plt+0x3fcc>
   15418:	ldrb	r0, [r5]
   1541c:	cmp	r6, #1
   15420:	ldrb	r0, [r9, r0]
   15424:	ldr	r9, [sp, #20]
   15428:	strb	r0, [r4]
   1542c:	mov	r0, #1
   15430:	beq	15488 <__assert_fail@plt+0x3fd4>
   15434:	mov	r0, #1
   15438:	ldr	r1, [sp, #32]
   1543c:	ldr	r3, [sp, #56]	; 0x38
   15440:	ldr	r7, [sp, #96]	; 0x60
   15444:	ldr	r2, [sp, #36]	; 0x24
   15448:	add	r1, r1, r3
   1544c:	ldrb	r1, [r1, r0]
   15450:	ldrb	r1, [r7, r1]
   15454:	strb	r1, [r2, r0]
   15458:	add	r0, r0, #1
   1545c:	cmp	r0, r6
   15460:	blt	15438 <__assert_fail@plt+0x3f84>
   15464:	mov	r0, r6
   15468:	b	15488 <__assert_fail@plt+0x3fd4>
   1546c:	mov	r6, #0
   15470:	ldr	r9, [sp, #20]
   15474:	str	r6, [sp, #64]	; 0x40
   15478:	str	r6, [sp, #60]	; 0x3c
   1547c:	b	15490 <__assert_fail@plt+0x3fdc>
   15480:	ldr	r9, [sp, #20]
   15484:	mov	r0, #0
   15488:	str	r0, [sp, #64]	; 0x40
   1548c:	str	r0, [sp, #60]	; 0x3c
   15490:	ldr	sl, [sp, #16]
   15494:	mov	r5, #0
   15498:	ldr	r4, [sp, #24]
   1549c:	sub	r8, fp, #48	; 0x30
   154a0:	add	r6, sp, #32
   154a4:	str	r5, [fp, #-52]	; 0xffffffcc
   154a8:	mov	r0, r8
   154ac:	mov	r1, r6
   154b0:	str	r5, [sl, #24]
   154b4:	orr	r2, r4, #8388608	; 0x800000
   154b8:	ldr	r7, [sl]
   154bc:	str	r4, [r7, #128]	; 0x80
   154c0:	bl	1ada8 <__assert_fail@plt+0x98f4>
   154c4:	ldr	r1, [sp, #72]	; 0x48
   154c8:	mov	r2, r8
   154cc:	mov	r3, r4
   154d0:	str	r5, [sp]
   154d4:	add	r0, r1, r0
   154d8:	mov	r1, sl
   154dc:	str	r0, [sp, #72]	; 0x48
   154e0:	sub	r0, fp, #52	; 0x34
   154e4:	str	r0, [sp, #4]
   154e8:	mov	r0, r6
   154ec:	bl	1aa20 <__assert_fail@plt+0x956c>
   154f0:	mov	r4, r0
   154f4:	cmp	r0, #0
   154f8:	bne	15508 <__assert_fail@plt+0x4054>
   154fc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15500:	cmp	r0, #0
   15504:	bne	157e4 <__assert_fail@plt+0x4330>
   15508:	ldr	r1, [r7, #64]	; 0x40
   1550c:	cmp	r1, #31
   15510:	beq	1577c <__assert_fail@plt+0x42c8>
   15514:	ldr	r0, [r7, #56]	; 0x38
   15518:	add	r2, r1, #1
   1551c:	add	r0, r0, r1, lsl #5
   15520:	mov	r1, #0
   15524:	vmov.i32	q8, #0	; 0x00000000
   15528:	str	r2, [r7, #64]	; 0x40
   1552c:	add	r6, r0, #4
   15530:	mov	r2, #2
   15534:	str	r1, [r0, #20]
   15538:	str	r1, [r0, #24]
   1553c:	str	r2, [r0, #28]
   15540:	mov	r0, #28
   15544:	mov	r1, r6
   15548:	vst1.32	{d16-d17}, [r1], r0
   1554c:	mvn	r0, #0
   15550:	str	r0, [r1]
   15554:	cmp	r4, #0
   15558:	mov	r0, r6
   1555c:	beq	155b0 <__assert_fail@plt+0x40fc>
   15560:	ldr	r1, [r7, #64]	; 0x40
   15564:	cmp	r1, #31
   15568:	beq	157b4 <__assert_fail@plt+0x4300>
   1556c:	ldr	r0, [r7, #56]	; 0x38
   15570:	add	r2, r1, #1
   15574:	add	r0, r0, r1, lsl #5
   15578:	mov	r1, #0
   1557c:	mvn	r3, #0
   15580:	cmp	r6, #0
   15584:	str	r2, [r7, #64]	; 0x40
   15588:	str	r1, [r0, #4]!
   1558c:	mov	r2, #16
   15590:	add	ip, r0, #20
   15594:	stmib	r0, {r4, r6}
   15598:	str	r1, [r0, #12]
   1559c:	str	r1, [r0, #16]
   155a0:	stm	ip, {r1, r2, r3}
   155a4:	str	r0, [r4]
   155a8:	beq	157dc <__assert_fail@plt+0x4328>
   155ac:	str	r0, [r6]
   155b0:	cmp	r6, #0
   155b4:	cmpne	r0, #0
   155b8:	beq	157dc <__assert_fail@plt+0x4328>
   155bc:	str	r0, [r9, #52]	; 0x34
   155c0:	ldr	r8, [sl]
   155c4:	ldr	r0, [r8, #4]
   155c8:	lsl	r0, r0, #2
   155cc:	bl	2ac60 <__assert_fail@plt+0x197ac>
   155d0:	str	r0, [r8, #12]
   155d4:	ldr	r0, [r8, #4]
   155d8:	lsl	r0, r0, #2
   155dc:	bl	2ac60 <__assert_fail@plt+0x197ac>
   155e0:	str	r0, [r8, #16]
   155e4:	ldr	r0, [r8, #4]
   155e8:	add	r0, r0, r0, lsl #1
   155ec:	lsl	r0, r0, #2
   155f0:	bl	2ac60 <__assert_fail@plt+0x197ac>
   155f4:	str	r0, [r8, #20]
   155f8:	ldr	r0, [r8, #4]
   155fc:	add	r0, r0, r0, lsl #1
   15600:	lsl	r0, r0, #2
   15604:	bl	2ac60 <__assert_fail@plt+0x197ac>
   15608:	str	r0, [r8, #24]
   1560c:	ldr	r1, [r8, #12]
   15610:	cmp	r1, #0
   15614:	ldrne	r1, [r8, #16]
   15618:	cmpne	r1, #0
   1561c:	beq	15630 <__assert_fail@plt+0x417c>
   15620:	cmp	r0, #0
   15624:	ldrne	r0, [r8, #20]
   15628:	cmpne	r0, #0
   1562c:	bne	156dc <__assert_fail@plt+0x4228>
   15630:	mov	r0, #12
   15634:	str	r0, [fp, #-52]	; 0xffffffcc
   15638:	ldr	r9, [sp, #20]
   1563c:	ldr	r4, [sl]
   15640:	ldr	r0, [r4, #56]	; 0x38
   15644:	cmp	r0, #0
   15648:	beq	15660 <__assert_fail@plt+0x41ac>
   1564c:	ldr	r5, [r0]
   15650:	bl	2ae28 <__assert_fail@plt+0x19974>
   15654:	cmp	r5, #0
   15658:	mov	r0, r5
   1565c:	bne	1564c <__assert_fail@plt+0x4198>
   15660:	mov	r0, #31
   15664:	mov	r5, #0
   15668:	str	r0, [r4, #64]	; 0x40
   1566c:	str	r5, [r4, #52]	; 0x34
   15670:	str	r5, [r4, #56]	; 0x38
   15674:	ldr	r0, [r4, #16]
   15678:	bl	2ae28 <__assert_fail@plt+0x19974>
   1567c:	str	r5, [r4, #16]
   15680:	ldr	r0, [sp, #40]	; 0x28
   15684:	bl	2ae28 <__assert_fail@plt+0x19974>
   15688:	ldr	r0, [sp, #44]	; 0x2c
   1568c:	bl	2ae28 <__assert_fail@plt+0x19974>
   15690:	ldrb	r0, [sp, #107]	; 0x6b
   15694:	cmp	r0, #0
   15698:	beq	156a4 <__assert_fail@plt+0x41f0>
   1569c:	ldr	r0, [sp, #36]	; 0x24
   156a0:	bl	2ae28 <__assert_fail@plt+0x19974>
   156a4:	ldr	r0, [sp, #8]
   156a8:	cmp	r0, #0
   156ac:	beq	156b8 <__assert_fail@plt+0x4204>
   156b0:	add	r0, r9, #136	; 0x88
   156b4:	bl	11214 <pthread_mutex_destroy@plt>
   156b8:	mov	r0, r9
   156bc:	bl	16fcc <__assert_fail@plt+0x5b18>
   156c0:	mov	r0, #0
   156c4:	str	r0, [sl]
   156c8:	str	r0, [sl, #4]
   156cc:	ldr	r4, [fp, #-52]	; 0xffffffcc
   156d0:	mov	r0, r4
   156d4:	sub	sp, fp, #28
   156d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156dc:	ldr	r0, [sl, #24]
   156e0:	lsl	r0, r0, #2
   156e4:	bl	2ac60 <__assert_fail@plt+0x197ac>
   156e8:	cmp	r0, #0
   156ec:	str	r0, [r8, #132]	; 0x84
   156f0:	str	r8, [sp, #28]
   156f4:	beq	15740 <__assert_fail@plt+0x428c>
   156f8:	ldr	r1, [sl, #24]
   156fc:	cmp	r1, #0
   15700:	beq	15824 <__assert_fail@plt+0x4370>
   15704:	mov	r2, #0
   15708:	cmp	r1, #4
   1570c:	bcc	15814 <__assert_fail@plt+0x4360>
   15710:	add	r3, pc, #984	; 0x3d8
   15714:	bic	r2, r1, #3
   15718:	vmov.i32	q8, #4	; 0x00000004
   1571c:	mov	r7, r0
   15720:	vld1.64	{d18-d19}, [r3 :128]
   15724:	mov	r3, r2
   15728:	vadd.i32	q10, q9, q8
   1572c:	vst1.32	{d18-d19}, [r7]!
   15730:	subs	r3, r3, #4
   15734:	vorr	q9, q10, q10
   15738:	bne	15728 <__assert_fail@plt+0x4274>
   1573c:	b	1581c <__assert_fail@plt+0x4368>
   15740:	add	r8, r8, #52	; 0x34
   15744:	b	15a04 <__assert_fail@plt+0x4550>
   15748:	mov	r8, #12
   1574c:	ldr	sl, [sp, #16]
   15750:	str	r8, [fp, #-52]	; 0xffffffcc
   15754:	b	15638 <__assert_fail@plt+0x4184>
   15758:	mov	r0, r6
   1575c:	mov	r1, #160	; 0xa0
   15760:	mov	r4, #160	; 0xa0
   15764:	bl	2ac90 <__assert_fail@plt+0x197dc>
   15768:	cmp	r0, #0
   1576c:	beq	157a4 <__assert_fail@plt+0x42f0>
   15770:	mov	r6, r0
   15774:	stm	r9, {r0, r4}
   15778:	b	14dcc <__assert_fail@plt+0x3918>
   1577c:	mov	r0, #996	; 0x3e4
   15780:	bl	2ac60 <__assert_fail@plt+0x197ac>
   15784:	cmp	r0, #0
   15788:	beq	15800 <__assert_fail@plt+0x434c>
   1578c:	ldr	r1, [r7, #56]	; 0x38
   15790:	str	r1, [r0]
   15794:	mov	r1, #0
   15798:	str	r1, [r7, #64]	; 0x40
   1579c:	str	r0, [r7, #56]	; 0x38
   157a0:	b	15518 <__assert_fail@plt+0x4064>
   157a4:	mov	r4, #12
   157a8:	mov	r0, r4
   157ac:	sub	sp, fp, #28
   157b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157b4:	mov	r0, #996	; 0x3e4
   157b8:	bl	2ac60 <__assert_fail@plt+0x197ac>
   157bc:	cmp	r0, #0
   157c0:	beq	157dc <__assert_fail@plt+0x4328>
   157c4:	ldr	r1, [r7, #56]	; 0x38
   157c8:	str	r1, [r0]
   157cc:	mov	r1, #0
   157d0:	str	r1, [r7, #64]	; 0x40
   157d4:	str	r0, [r7, #56]	; 0x38
   157d8:	b	15570 <__assert_fail@plt+0x40bc>
   157dc:	mov	r0, #12
   157e0:	str	r0, [fp, #-52]	; 0xffffffcc
   157e4:	mov	r0, #0
   157e8:	str	r0, [r9, #52]	; 0x34
   157ec:	ldr	r4, [sl]
   157f0:	ldr	r0, [r4, #56]	; 0x38
   157f4:	cmp	r0, #0
   157f8:	bne	1564c <__assert_fail@plt+0x4198>
   157fc:	b	15660 <__assert_fail@plt+0x41ac>
   15800:	mov	r6, #0
   15804:	cmp	r4, #0
   15808:	mov	r0, r6
   1580c:	bne	15560 <__assert_fail@plt+0x40ac>
   15810:	b	155b0 <__assert_fail@plt+0x40fc>
   15814:	str	r2, [r0, r2, lsl #2]
   15818:	add	r2, r2, #1
   1581c:	cmp	r1, r2
   15820:	bne	15814 <__assert_fail@plt+0x4360>
   15824:	ldr	r2, [r8, #52]!	; 0x34
   15828:	ldrb	r1, [r2, #24]
   1582c:	cmp	r1, #17
   15830:	beq	15860 <__assert_fail@plt+0x43ac>
   15834:	cmp	r1, #4
   15838:	bne	158b4 <__assert_fail@plt+0x4400>
   1583c:	ldr	r1, [r2, #20]
   15840:	ldr	r7, [sp, #28]
   15844:	mov	r3, #1
   15848:	ldr	r0, [r0, r1, lsl #2]
   1584c:	str	r0, [r2, #20]
   15850:	ldr	r1, [r7, #80]	; 0x50
   15854:	orr	r0, r1, r3, lsl r0
   15858:	str	r0, [r7, #80]	; 0x50
   1585c:	b	158b4 <__assert_fail@plt+0x4400>
   15860:	ldr	r1, [r2, #4]
   15864:	cmp	r1, #0
   15868:	beq	158b4 <__assert_fail@plt+0x4400>
   1586c:	ldrb	r3, [r1, #24]
   15870:	cmp	r3, #17
   15874:	bne	158b4 <__assert_fail@plt+0x4400>
   15878:	ldr	r3, [r1, #4]
   1587c:	ldr	r1, [r1, #20]
   15880:	cmp	r3, #0
   15884:	str	r3, [r2, #4]
   15888:	strne	r2, [r3]
   1588c:	cmp	r1, #31
   15890:	ldr	r3, [r2, #20]
   15894:	ldr	r3, [r0, r3, lsl #2]
   15898:	str	r3, [r0, r1, lsl #2]
   1589c:	bgt	158b4 <__assert_fail@plt+0x4400>
   158a0:	ldr	r7, [sp, #28]
   158a4:	mov	r3, #1
   158a8:	ldr	r0, [r7, #80]	; 0x50
   158ac:	bic	r0, r0, r3, lsl r1
   158b0:	b	15858 <__assert_fail@plt+0x43a4>
   158b4:	mov	r0, #1
   158b8:	b	158dc <__assert_fail@plt+0x4428>
   158bc:	ldr	r2, [r7, #20]
   158c0:	ldr	r3, [sp, #28]
   158c4:	ldr	r1, [r1, r2, lsl #2]
   158c8:	str	r1, [r7, #20]
   158cc:	ldr	r2, [r3, #80]	; 0x50
   158d0:	orr	r1, r2, r0, lsl r1
   158d4:	mov	r2, r7
   158d8:	str	r1, [r3, #80]	; 0x50
   158dc:	ldr	r7, [r2, #4]
   158e0:	cmp	r7, #0
   158e4:	bne	15914 <__assert_fail@plt+0x4460>
   158e8:	mov	r3, #0
   158ec:	ldr	r7, [r2, #8]
   158f0:	mov	r1, r2
   158f4:	cmp	r7, r3
   158f8:	cmpne	r7, #0
   158fc:	bne	15914 <__assert_fail@plt+0x4460>
   15900:	ldr	r2, [r1]
   15904:	mov	r3, r1
   15908:	cmp	r2, #0
   1590c:	bne	158ec <__assert_fail@plt+0x4438>
   15910:	b	159b0 <__assert_fail@plt+0x44fc>
   15914:	ldrb	r1, [r7, #24]
   15918:	cmp	r1, #17
   1591c:	beq	15944 <__assert_fail@plt+0x4490>
   15920:	cmp	r1, #4
   15924:	mov	r2, r7
   15928:	bne	158dc <__assert_fail@plt+0x4428>
   1592c:	ldr	r1, [sp, #28]
   15930:	mov	r2, r7
   15934:	ldr	r1, [r1, #132]	; 0x84
   15938:	cmp	r1, #0
   1593c:	beq	158dc <__assert_fail@plt+0x4428>
   15940:	b	158bc <__assert_fail@plt+0x4408>
   15944:	ldr	r3, [r7, #4]
   15948:	mov	r2, r7
   1594c:	cmp	r3, #0
   15950:	beq	158dc <__assert_fail@plt+0x4428>
   15954:	ldrb	r1, [r3, #24]
   15958:	mov	r2, r7
   1595c:	cmp	r1, #17
   15960:	bne	158dc <__assert_fail@plt+0x4428>
   15964:	ldr	r1, [r3, #4]
   15968:	ldr	r2, [sp, #28]
   1596c:	ldr	r3, [r3, #20]
   15970:	cmp	r1, #0
   15974:	str	r1, [r7, #4]
   15978:	strne	r7, [r1]
   1597c:	cmp	r3, #31
   15980:	ldr	r1, [r7, #20]
   15984:	ldr	r2, [r2, #132]	; 0x84
   15988:	ldr	r1, [r2, r1, lsl #2]
   1598c:	str	r1, [r2, r3, lsl #2]
   15990:	mov	r2, r7
   15994:	bgt	158dc <__assert_fail@plt+0x4428>
   15998:	ldr	r2, [sp, #28]
   1599c:	ldr	r1, [r2, #80]	; 0x50
   159a0:	bic	r1, r1, r0, lsl r3
   159a4:	str	r1, [r2, #80]	; 0x50
   159a8:	mov	r2, r7
   159ac:	b	158dc <__assert_fail@plt+0x4428>
   159b0:	ldr	r1, [sl, #24]
   159b4:	cmp	r1, #0
   159b8:	beq	159ec <__assert_fail@plt+0x4538>
   159bc:	ldr	r0, [sp, #28]
   159c0:	mov	r2, #0
   159c4:	ldr	r0, [r0, #132]	; 0x84
   159c8:	ldr	r3, [r0, r2, lsl #2]
   159cc:	cmp	r2, r3
   159d0:	bne	159e0 <__assert_fail@plt+0x452c>
   159d4:	add	r2, r2, #1
   159d8:	cmp	r2, r1
   159dc:	bcc	159c8 <__assert_fail@plt+0x4514>
   159e0:	cmp	r2, r1
   159e4:	beq	159f4 <__assert_fail@plt+0x4540>
   159e8:	b	15a04 <__assert_fail@plt+0x4550>
   159ec:	ldr	r0, [sp, #28]
   159f0:	ldr	r0, [r0, #132]	; 0x84
   159f4:	bl	2ae28 <__assert_fail@plt+0x19974>
   159f8:	ldr	r1, [sp, #28]
   159fc:	mov	r0, #0
   15a00:	str	r0, [r1, #132]	; 0x84
   15a04:	ldr	r0, [r8]
   15a08:	mov	r7, #0
   15a0c:	sub	r9, fp, #48	; 0x30
   15a10:	mov	r4, r0
   15a14:	ldr	r0, [r0, #4]
   15a18:	cmp	r0, #0
   15a1c:	bne	15a10 <__assert_fail@plt+0x455c>
   15a20:	ldr	r0, [r4, #8]
   15a24:	cmp	r0, #0
   15a28:	bne	15a10 <__assert_fail@plt+0x455c>
   15a2c:	mov	r3, #0
   15a30:	cmp	r3, #0
   15a34:	str	r7, [fp, #-48]	; 0xffffffd0
   15a38:	beq	15a88 <__assert_fail@plt+0x45d4>
   15a3c:	ldrb	r0, [r3, #24]
   15a40:	cmp	r0, #17
   15a44:	bne	15a88 <__assert_fail@plt+0x45d4>
   15a48:	ldrb	r2, [sl, #28]
   15a4c:	ldr	r1, [sl]
   15a50:	mov	r0, r9
   15a54:	bl	1f328 <__assert_fail@plt+0xde74>
   15a58:	cmp	r0, #0
   15a5c:	str	r0, [r4, #4]
   15a60:	strne	r4, [r0]
   15a64:	ldr	r3, [r4, #8]
   15a68:	cmp	r3, #0
   15a6c:	bne	15a94 <__assert_fail@plt+0x45e0>
   15a70:	b	15abc <__assert_fail@plt+0x4608>
   15a74:	ldr	r3, [r1, #4]
   15a78:	mov	r4, r1
   15a7c:	cmp	r3, #0
   15a80:	str	r7, [fp, #-48]	; 0xffffffd0
   15a84:	bne	15a3c <__assert_fail@plt+0x4588>
   15a88:	ldr	r3, [r4, #8]
   15a8c:	cmp	r3, #0
   15a90:	beq	15abc <__assert_fail@plt+0x4608>
   15a94:	ldrb	r0, [r3, #24]
   15a98:	cmp	r0, #17
   15a9c:	bne	15abc <__assert_fail@plt+0x4608>
   15aa0:	ldrb	r2, [sl, #28]
   15aa4:	ldr	r1, [sl]
   15aa8:	mov	r0, r9
   15aac:	bl	1f328 <__assert_fail@plt+0xde74>
   15ab0:	cmp	r0, #0
   15ab4:	str	r0, [r4, #8]
   15ab8:	strne	r4, [r0]
   15abc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   15ac0:	cmp	r0, #0
   15ac4:	bne	15634 <__assert_fail@plt+0x4180>
   15ac8:	ldr	r1, [r4]
   15acc:	cmp	r1, #0
   15ad0:	beq	15b00 <__assert_fail@plt+0x464c>
   15ad4:	ldr	r0, [r1, #8]
   15ad8:	cmp	r0, r4
   15adc:	cmpne	r0, #0
   15ae0:	beq	15a74 <__assert_fail@plt+0x45c0>
   15ae4:	b	15a10 <__assert_fail@plt+0x455c>
   15ae8:	nop	{0}
   15aec:	nop	{0}
   15af0:	andeq	r0, r0, r0
   15af4:	andeq	r0, r0, r1
   15af8:	andeq	r0, r0, r2
   15afc:	andeq	r0, r0, r3
   15b00:	ldr	r0, [sp, #28]
   15b04:	ldr	r0, [r0, #52]	; 0x34
   15b08:	mov	r4, r0
   15b0c:	ldr	r0, [r0, #4]
   15b10:	cmp	r0, #0
   15b14:	bne	15b08 <__assert_fail@plt+0x4654>
   15b18:	ldr	r0, [r4, #8]
   15b1c:	cmp	r0, #0
   15b20:	bne	15b08 <__assert_fail@plt+0x4654>
   15b24:	ldr	r2, [r4, #24]
   15b28:	uxtb	r0, r2
   15b2c:	cmp	r0, #16
   15b30:	bne	15b74 <__assert_fail@plt+0x46c0>
   15b34:	ldr	r0, [r4, #4]
   15b38:	ldr	r1, [r0, #12]
   15b3c:	str	r1, [r4, #12]
   15b40:	ldr	r0, [r0, #28]
   15b44:	str	r0, [r4, #28]
   15b48:	ldr	r1, [r4]
   15b4c:	cmp	r1, #0
   15b50:	beq	15bc4 <__assert_fail@plt+0x4710>
   15b54:	ldr	r0, [r1, #8]
   15b58:	cmp	r0, r4
   15b5c:	mov	r4, r1
   15b60:	beq	15b24 <__assert_fail@plt+0x4670>
   15b64:	cmp	r0, #0
   15b68:	mov	r4, r1
   15b6c:	beq	15b24 <__assert_fail@plt+0x4670>
   15b70:	b	15b08 <__assert_fail@plt+0x4654>
   15b74:	str	r4, [r4, #12]
   15b78:	ldr	r0, [sp, #28]
   15b7c:	ldr	r1, [r4, #20]
   15b80:	bl	1f610 <__assert_fail@plt+0xe15c>
   15b84:	cmn	r0, #1
   15b88:	str	r0, [r4, #28]
   15b8c:	beq	15630 <__assert_fail@plt+0x417c>
   15b90:	ldrb	r1, [r4, #24]
   15b94:	cmp	r1, #12
   15b98:	bne	15bb8 <__assert_fail@plt+0x4704>
   15b9c:	ldr	r1, [sp, #28]
   15ba0:	ldr	r2, [r4, #20]
   15ba4:	ldr	r1, [r1]
   15ba8:	add	r0, r1, r0, lsl #3
   15bac:	ldr	r1, [r0, #4]
   15bb0:	bfi	r1, r2, #8, #10
   15bb4:	str	r1, [r0, #4]
   15bb8:	ldr	r1, [r4]
   15bbc:	cmp	r1, #0
   15bc0:	bne	15b54 <__assert_fail@plt+0x46a0>
   15bc4:	ldr	r4, [r8]
   15bc8:	ldrb	r0, [r4, #24]
   15bcc:	cmp	r0, #16
   15bd0:	beq	15bec <__assert_fail@plt+0x4738>
   15bd4:	ldr	r8, [sp, #28]
   15bd8:	cmp	r0, #11
   15bdc:	bne	15c08 <__assert_fail@plt+0x4754>
   15be0:	ldr	r0, [r4, #4]
   15be4:	str	r4, [r0, #16]
   15be8:	b	15c28 <__assert_fail@plt+0x4774>
   15bec:	ldmib	r4, {r0, r1}
   15bf0:	ldr	r8, [sp, #28]
   15bf4:	ldr	r2, [r1, #12]
   15bf8:	str	r2, [r0, #16]
   15bfc:	ldr	r2, [r4, #16]
   15c00:	str	r2, [r1, #16]
   15c04:	b	15c28 <__assert_fail@plt+0x4774>
   15c08:	ldr	r0, [r4, #4]
   15c0c:	cmp	r0, #0
   15c10:	ldrne	r1, [r4, #16]
   15c14:	strne	r1, [r0, #16]
   15c18:	ldr	r1, [r4, #8]
   15c1c:	cmp	r1, #0
   15c20:	ldrne	r2, [r4, #16]
   15c24:	strne	r2, [r1, #16]
   15c28:	mov	r1, r4
   15c2c:	b	15c4c <__assert_fail@plt+0x4798>
   15c30:	ldr	r3, [r1, #16]
   15c34:	str	r3, [r2, #16]
   15c38:	b	15c4c <__assert_fail@plt+0x4798>
   15c3c:	ldmib	r1, {r0, r2}
   15c40:	ldr	r3, [r2, #12]
   15c44:	str	r3, [r0, #16]
   15c48:	b	15c30 <__assert_fail@plt+0x477c>
   15c4c:	cmp	r0, #0
   15c50:	bne	15c80 <__assert_fail@plt+0x47cc>
   15c54:	mov	r3, #0
   15c58:	ldr	r0, [r1, #8]
   15c5c:	mov	r2, r1
   15c60:	cmp	r0, r3
   15c64:	cmpne	r0, #0
   15c68:	bne	15c80 <__assert_fail@plt+0x47cc>
   15c6c:	ldr	r1, [r2]
   15c70:	mov	r3, r2
   15c74:	cmp	r1, #0
   15c78:	bne	15c58 <__assert_fail@plt+0x47a4>
   15c7c:	b	15cc4 <__assert_fail@plt+0x4810>
   15c80:	mov	r1, r0
   15c84:	ldrb	r0, [r0, #24]
   15c88:	cmp	r0, #16
   15c8c:	beq	15c3c <__assert_fail@plt+0x4788>
   15c90:	cmp	r0, #11
   15c94:	bne	15ca4 <__assert_fail@plt+0x47f0>
   15c98:	ldr	r0, [r1, #4]
   15c9c:	str	r1, [r0, #16]
   15ca0:	b	15c4c <__assert_fail@plt+0x4798>
   15ca4:	ldr	r0, [r1, #4]
   15ca8:	cmp	r0, #0
   15cac:	ldrne	r2, [r1, #16]
   15cb0:	strne	r2, [r0, #16]
   15cb4:	ldr	r2, [r1, #8]
   15cb8:	cmp	r2, #0
   15cbc:	beq	15c4c <__assert_fail@plt+0x4798>
   15cc0:	b	15c30 <__assert_fail@plt+0x477c>
   15cc4:	mov	r0, r8
   15cc8:	mov	r1, r4
   15ccc:	bl	1f190 <__assert_fail@plt+0xdcdc>
   15cd0:	cmp	r0, #0
   15cd4:	bne	15634 <__assert_fail@plt+0x4180>
   15cd8:	ldr	r7, [r4, #4]
   15cdc:	cmp	r7, #0
   15ce0:	bne	15d10 <__assert_fail@plt+0x485c>
   15ce4:	mov	r1, #0
   15ce8:	ldr	r7, [r4, #8]
   15cec:	mov	r0, r4
   15cf0:	cmp	r7, r1
   15cf4:	cmpne	r7, #0
   15cf8:	bne	15d10 <__assert_fail@plt+0x485c>
   15cfc:	ldr	r4, [r0]
   15d00:	mov	r1, r0
   15d04:	cmp	r4, #0
   15d08:	bne	15ce8 <__assert_fail@plt+0x4834>
   15d0c:	b	15d2c <__assert_fail@plt+0x4878>
   15d10:	mov	r0, r8
   15d14:	mov	r1, r7
   15d18:	bl	1f190 <__assert_fail@plt+0xdcdc>
   15d1c:	cmp	r0, #0
   15d20:	mov	r4, r7
   15d24:	beq	15cd8 <__assert_fail@plt+0x4824>
   15d28:	b	15634 <__assert_fail@plt+0x4180>
   15d2c:	ldr	r0, [r8, #8]
   15d30:	cmp	r0, #0
   15d34:	beq	15de4 <__assert_fail@plt+0x4930>
   15d38:	mov	r5, #0
   15d3c:	sub	r4, fp, #48	; 0x30
   15d40:	mov	r7, #0
   15d44:	ldr	r0, [r8, #24]
   15d48:	add	r6, r7, r7, lsl #1
   15d4c:	add	r0, r0, r6, lsl #2
   15d50:	ldr	r0, [r0, #4]
   15d54:	cmp	r0, #0
   15d58:	beq	15d64 <__assert_fail@plt+0x48b0>
   15d5c:	mov	r1, r5
   15d60:	b	15da4 <__assert_fail@plt+0x48f0>
   15d64:	mov	r0, r4
   15d68:	mov	r1, r8
   15d6c:	mov	r2, r7
   15d70:	mov	r3, #1
   15d74:	bl	1f7e8 <__assert_fail@plt+0xe334>
   15d78:	cmp	r0, #0
   15d7c:	bne	15634 <__assert_fail@plt+0x4180>
   15d80:	ldr	r0, [r8, #24]
   15d84:	mov	r1, r5
   15d88:	add	r0, r0, r6, lsl #2
   15d8c:	ldr	r0, [r0, #4]
   15d90:	cmp	r0, #0
   15d94:	bne	15da4 <__assert_fail@plt+0x48f0>
   15d98:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15d9c:	bl	2ae28 <__assert_fail@plt+0x19974>
   15da0:	mov	r1, #1
   15da4:	ldr	r2, [r8, #8]
   15da8:	add	r0, r7, #1
   15dac:	subs	r3, r0, r2
   15db0:	mov	r7, r3
   15db4:	movwne	r3, #1
   15db8:	movne	r7, r0
   15dbc:	tst	r1, #1
   15dc0:	and	r5, r1, r3
   15dc4:	cmpeq	r0, r2
   15dc8:	bne	15d44 <__assert_fail@plt+0x4890>
   15dcc:	add	r0, r0, r0, lsl #1
   15dd0:	lsl	r0, r0, #2
   15dd4:	ldrb	r1, [sl, #28]
   15dd8:	tst	r1, #16
   15ddc:	beq	15df4 <__assert_fail@plt+0x4940>
   15de0:	b	15e0c <__assert_fail@plt+0x4958>
   15de4:	mov	r0, #0
   15de8:	ldrb	r1, [sl, #28]
   15dec:	tst	r1, #16
   15df0:	bne	15e0c <__assert_fail@plt+0x4958>
   15df4:	ldr	r1, [sp, #16]
   15df8:	ldr	r1, [r1, #24]
   15dfc:	cmp	r1, #0
   15e00:	ldrbne	r1, [r8, #88]	; 0x58
   15e04:	tstne	r1, #1
   15e08:	bne	15e18 <__assert_fail@plt+0x4964>
   15e0c:	ldr	r1, [r8, #76]	; 0x4c
   15e10:	cmp	r1, #0
   15e14:	beq	15f44 <__assert_fail@plt+0x4a90>
   15e18:	bl	2ac60 <__assert_fail@plt+0x197ac>
   15e1c:	cmp	r0, #0
   15e20:	str	r0, [r8, #28]
   15e24:	beq	1640c <__assert_fail@plt+0x4f58>
   15e28:	ldr	r1, [r8, #8]
   15e2c:	cmp	r1, #0
   15e30:	beq	15f44 <__assert_fail@plt+0x4a90>
   15e34:	mov	r1, #0
   15e38:	str	r1, [r0]
   15e3c:	str	r1, [r0, #4]
   15e40:	str	r1, [r0, #8]
   15e44:	ldr	r0, [r8, #8]
   15e48:	cmp	r0, #2
   15e4c:	bcc	15e7c <__assert_fail@plt+0x49c8>
   15e50:	mov	r2, #1
   15e54:	mov	r3, #12
   15e58:	ldr	r0, [r8, #28]
   15e5c:	add	r2, r2, #1
   15e60:	str	r1, [r0, r3]!
   15e64:	add	r3, r3, #12
   15e68:	str	r1, [r0, #4]
   15e6c:	str	r1, [r0, #8]
   15e70:	ldr	r0, [r8, #8]
   15e74:	cmp	r2, r0
   15e78:	bcc	15e58 <__assert_fail@plt+0x49a4>
   15e7c:	cmp	r0, #0
   15e80:	beq	15f44 <__assert_fail@plt+0x4a90>
   15e84:	ldr	ip, [r8, #24]
   15e88:	mov	sl, #0
   15e8c:	add	r9, sl, sl, lsl #1
   15e90:	add	r2, ip, r9, lsl #2
   15e94:	ldr	r3, [r2, #4]
   15e98:	cmp	r3, #1
   15e9c:	blt	15f38 <__assert_fail@plt+0x4a84>
   15ea0:	ldr	r1, [r2, #8]
   15ea4:	mov	r6, #0
   15ea8:	str	r1, [sp, #24]
   15eac:	ldr	r0, [r1, r6, lsl #2]
   15eb0:	ldr	r5, [r8, #28]
   15eb4:	add	r0, r0, r0, lsl #1
   15eb8:	mov	r3, r5
   15ebc:	ldr	r7, [r3, r0, lsl #2]!
   15ec0:	mov	r4, r3
   15ec4:	ldr	r2, [r4, #4]!
   15ec8:	cmp	r7, r2
   15ecc:	bne	15f0c <__assert_fail@plt+0x4a58>
   15ed0:	mov	r1, #2
   15ed4:	add	r8, r5, r0, lsl #2
   15ed8:	add	r1, r1, r7, lsl #1
   15edc:	str	r1, [r3]
   15ee0:	lsl	r1, r1, #2
   15ee4:	ldr	r0, [r8, #8]!
   15ee8:	bl	2ac90 <__assert_fail@plt+0x197dc>
   15eec:	cmp	r0, #0
   15ef0:	beq	1640c <__assert_fail@plt+0x4f58>
   15ef4:	str	r0, [r8]
   15ef8:	ldr	r8, [sp, #28]
   15efc:	ldr	r1, [sp, #24]
   15f00:	ldr	r2, [r4]
   15f04:	ldr	ip, [r8, #24]
   15f08:	b	15f14 <__assert_fail@plt+0x4a60>
   15f0c:	add	r0, r5, r0, lsl #2
   15f10:	ldr	r0, [r0, #8]
   15f14:	add	r3, r2, #1
   15f18:	add	r6, r6, #1
   15f1c:	str	r3, [r4]
   15f20:	str	sl, [r0, r2, lsl #2]
   15f24:	add	r0, ip, r9, lsl #2
   15f28:	ldr	r0, [r0, #4]
   15f2c:	cmp	r6, r0
   15f30:	blt	15eac <__assert_fail@plt+0x49f8>
   15f34:	ldr	r0, [r8, #8]
   15f38:	add	sl, sl, #1
   15f3c:	cmp	sl, r0
   15f40:	bcc	15e8c <__assert_fail@plt+0x49d8>
   15f44:	mov	r0, #0
   15f48:	ldr	r1, [sp, #16]
   15f4c:	str	r0, [fp, #-52]	; 0xffffffcc
   15f50:	ldr	r0, [sp, #12]
   15f54:	cmp	r0, #0
   15f58:	bne	16128 <__assert_fail@plt+0x4c74>
   15f5c:	ldr	r0, [sp, #20]
   15f60:	ldrb	r2, [r0, #88]	; 0x58
   15f64:	ands	r0, r2, #4
   15f68:	beq	16128 <__assert_fail@plt+0x4c74>
   15f6c:	ldr	r0, [r1, #20]
   15f70:	cmp	r0, #0
   15f74:	bne	16128 <__assert_fail@plt+0x4c74>
   15f78:	ldr	r0, [sp, #20]
   15f7c:	mov	r9, #0
   15f80:	ldr	r7, [r0, #8]
   15f84:	cmp	r7, #0
   15f88:	beq	160f8 <__assert_fail@plt+0x4c44>
   15f8c:	ldr	r3, [r0]
   15f90:	mov	r8, #0
   15f94:	mov	ip, #1
   15f98:	mov	lr, #139	; 0x8b
   15f9c:	mov	r6, #0
   15fa0:	mov	r4, #0
   15fa4:	add	r5, r3, r4, lsl #3
   15fa8:	ldrb	r1, [r5, #4]
   15fac:	sub	r1, r1, #1
   15fb0:	cmp	r1, #11
   15fb4:	bhi	16474 <__assert_fail@plt+0x4fc0>
   15fb8:	add	r0, pc, #0
   15fbc:	ldr	pc, [r0, r1, lsl #2]
   15fc0:	andeq	r6, r1, r4, asr r0
   15fc4:	strdeq	r5, [r1], -r0
   15fc8:	andeq	r6, r1, r0
   15fcc:	strdeq	r5, [r1], -r0
   15fd0:	andeq	r6, r1, r8, ror r0
   15fd4:	andeq	r6, r1, r8, lsr #2
   15fd8:	andeq	r6, r1, r4, ror r4
   15fdc:	strdeq	r5, [r1], -r0
   15fe0:	strdeq	r5, [r1], -r0
   15fe4:	strdeq	r5, [r1], -r0
   15fe8:	strdeq	r5, [r1], -r0
   15fec:	andeq	r6, r1, r4, lsr r0
   15ff0:	add	r4, r4, #1
   15ff4:	cmp	r4, r7
   15ff8:	bcc	15fa4 <__assert_fail@plt+0x4af0>
   15ffc:	b	16088 <__assert_fail@plt+0x4bd4>
   16000:	ldr	r5, [r3, r4, lsl #3]
   16004:	ldr	r0, [r5, #16]
   16008:	cmp	r0, #0
   1600c:	bne	16128 <__assert_fail@plt+0x4c74>
   16010:	ldr	r0, [r5, #20]
   16014:	cmp	r0, #0
   16018:	ldreq	r0, [r5, #24]
   1601c:	cmpeq	r0, #0
   16020:	bne	16128 <__assert_fail@plt+0x4c74>
   16024:	ldr	r0, [r5, #28]
   16028:	cmp	r0, #0
   1602c:	beq	15ff0 <__assert_fail@plt+0x4b3c>
   16030:	b	16128 <__assert_fail@plt+0x4c74>
   16034:	ldr	r0, [r3, r4, lsl #3]
   16038:	sub	r0, r0, #16
   1603c:	ror	r1, r0, #4
   16040:	cmp	r1, #7
   16044:	bhi	16128 <__assert_fail@plt+0x4c74>
   16048:	tst	lr, ip, lsl r1
   1604c:	bne	15ff0 <__assert_fail@plt+0x4b3c>
   16050:	b	16128 <__assert_fail@plt+0x4c74>
   16054:	ldrsb	r0, [r5]
   16058:	cmp	r0, #0
   1605c:	mov	r0, #0
   16060:	movwlt	r0, #1
   16064:	orr	r6, r6, r0
   16068:	add	r4, r4, #1
   1606c:	cmp	r4, r7
   16070:	bcc	15fa4 <__assert_fail@plt+0x4af0>
   16074:	b	16088 <__assert_fail@plt+0x4bd4>
   16078:	mov	r8, #1
   1607c:	add	r4, r4, #1
   16080:	cmp	r4, r7
   16084:	bcc	15fa4 <__assert_fail@plt+0x4af0>
   16088:	orr	r0, r6, r8
   1608c:	tst	r0, #1
   16090:	beq	160fc <__assert_fail@plt+0x4c48>
   16094:	mov	r2, #0
   16098:	mov	r7, #7
   1609c:	b	160a4 <__assert_fail@plt+0x4bf0>
   160a0:	ldr	r3, [r1]
   160a4:	add	r3, r3, r2, lsl #3
   160a8:	ldr	r6, [r3, #4]
   160ac:	uxtb	r1, r6
   160b0:	cmp	r1, #5
   160b4:	beq	160d4 <__assert_fail@plt+0x4c20>
   160b8:	cmp	r1, #1
   160bc:	bne	160dc <__assert_fail@plt+0x4c28>
   160c0:	ldrsb	r0, [r3]
   160c4:	cmn	r0, #1
   160c8:	bicle	r0, r6, #2097152	; 0x200000
   160cc:	strle	r0, [r3, #4]
   160d0:	b	160dc <__assert_fail@plt+0x4c28>
   160d4:	bfi	r6, r7, #0, #8
   160d8:	str	r6, [r3, #4]
   160dc:	ldr	r1, [sp, #20]
   160e0:	add	r2, r2, #1
   160e4:	ldr	r0, [r1, #8]
   160e8:	cmp	r2, r0
   160ec:	bcc	160a0 <__assert_fail@plt+0x4bec>
   160f0:	ldrb	r2, [r1, #88]	; 0x58
   160f4:	b	160fc <__assert_fail@plt+0x4c48>
   160f8:	mov	r8, #0
   160fc:	ldr	r3, [sp, #20]
   16100:	mov	r0, #1
   16104:	and	r1, r2, #249	; 0xf9
   16108:	str	r0, [r3, #92]	; 0x5c
   1610c:	ldr	r0, [r3, #76]	; 0x4c
   16110:	cmp	r0, #0
   16114:	movwgt	r9, #1
   16118:	orr	r0, r8, r9
   1611c:	and	r0, r0, #1
   16120:	orr	r0, r1, r0, lsl #1
   16124:	strb	r0, [r3, #88]	; 0x58
   16128:	ldr	r7, [sp, #20]
   1612c:	ldr	r1, [r7, #52]	; 0x34
   16130:	ldr	r0, [r7, #24]
   16134:	ldr	r1, [r1, #12]
   16138:	ldr	r1, [r1, #28]
   1613c:	str	r1, [r7, #72]	; 0x48
   16140:	add	r1, r1, r1, lsl #1
   16144:	add	r5, r0, r1, lsl #2
   16148:	mov	r4, r5
   1614c:	ldr	sl, [r4, #4]!
   16150:	str	sl, [fp, #-44]	; 0xffffffd4
   16154:	ldr	r0, [r4]
   16158:	cmp	r0, #1
   1615c:	blt	162b0 <__assert_fail@plt+0x4dfc>
   16160:	lsl	r0, sl, #2
   16164:	str	sl, [fp, #-48]	; 0xffffffd0
   16168:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1616c:	cmp	r0, #0
   16170:	str	r0, [fp, #-40]	; 0xffffffd8
   16174:	beq	16458 <__assert_fail@plt+0x4fa4>
   16178:	mov	r6, r0
   1617c:	ldr	r0, [r4]
   16180:	ldr	r1, [r5, #8]
   16184:	lsl	r2, r0, #2
   16188:	mov	r0, r6
   1618c:	bl	1125c <memcpy@plt>
   16190:	mov	r0, #0
   16194:	cmp	sl, #1
   16198:	str	r0, [fp, #-32]	; 0xffffffe0
   1619c:	ldrge	r0, [sp, #20]
   161a0:	ldrge	r0, [r0, #76]	; 0x4c
   161a4:	cmpge	r0, #1
   161a8:	blt	162c4 <__assert_fail@plt+0x4e10>
   161ac:	mov	r0, #0
   161b0:	sub	r8, fp, #48	; 0x30
   161b4:	mov	r9, #1
   161b8:	b	161c0 <__assert_fail@plt+0x4d0c>
   161bc:	ldr	r6, [fp, #-40]	; 0xffffffd8
   161c0:	ldr	r2, [sp, #20]
   161c4:	ldr	r1, [r6, r0, lsl #2]
   161c8:	ldr	r2, [r2]
   161cc:	add	r3, r2, r1, lsl #3
   161d0:	ldrb	r3, [r3, #4]
   161d4:	cmp	r3, #4
   161d8:	bne	162a0 <__assert_fail@plt+0x4dec>
   161dc:	mov	r3, #0
   161e0:	cmp	sl, #1
   161e4:	blt	16218 <__assert_fail@plt+0x4d64>
   161e8:	ldr	r5, [r6, r3, lsl #2]
   161ec:	add	r4, r2, r5, lsl #3
   161f0:	ldrb	r4, [r4, #4]
   161f4:	cmp	r4, #9
   161f8:	bne	1620c <__assert_fail@plt+0x4d58>
   161fc:	ldr	r4, [r2, r1, lsl #3]
   16200:	ldr	r5, [r2, r5, lsl #3]
   16204:	cmp	r5, r4
   16208:	beq	16218 <__assert_fail@plt+0x4d64>
   1620c:	add	r3, r3, #1
   16210:	cmp	r3, sl
   16214:	blt	161e8 <__assert_fail@plt+0x4d34>
   16218:	cmp	r3, sl
   1621c:	beq	162a0 <__assert_fail@plt+0x4dec>
   16220:	ldr	r2, [sp, #20]
   16224:	add	r1, r1, r1, lsl #1
   16228:	cmp	sl, #1
   1622c:	ldr	r2, [r2, #20]
   16230:	add	r1, r2, r1, lsl #2
   16234:	ldr	r1, [r1, #8]
   16238:	ldr	r1, [r1]
   1623c:	blt	16278 <__assert_fail@plt+0x4dc4>
   16240:	mov	r2, #0
   16244:	subs	r3, sl, #1
   16248:	beq	1626c <__assert_fail@plt+0x4db8>
   1624c:	add	r5, r2, r3
   16250:	lsr	r4, r5, #1
   16254:	ldr	r7, [r6, r4, lsl #2]
   16258:	cmp	r7, r1
   1625c:	movge	r3, r4
   16260:	addlt	r2, r9, r5, lsr #1
   16264:	cmp	r2, r3
   16268:	bcc	1624c <__assert_fail@plt+0x4d98>
   1626c:	ldr	r2, [r6, r2, lsl #2]
   16270:	cmp	r2, r1
   16274:	beq	162a0 <__assert_fail@plt+0x4dec>
   16278:	ldr	r0, [sp, #20]
   1627c:	add	r1, r1, r1, lsl #1
   16280:	ldr	r0, [r0, #24]
   16284:	add	r1, r0, r1, lsl #2
   16288:	mov	r0, r8
   1628c:	bl	1fecc <__assert_fail@plt+0xea18>
   16290:	cmp	r0, #0
   16294:	bne	16414 <__assert_fail@plt+0x4f60>
   16298:	ldr	sl, [fp, #-44]	; 0xffffffd4
   1629c:	mov	r0, #0
   162a0:	add	r0, r0, #1
   162a4:	cmp	r0, sl
   162a8:	blt	161bc <__assert_fail@plt+0x4d08>
   162ac:	b	162c4 <__assert_fail@plt+0x4e10>
   162b0:	mov	r0, #0
   162b4:	str	r0, [fp, #-44]	; 0xffffffd4
   162b8:	str	r0, [fp, #-48]	; 0xffffffd0
   162bc:	str	r0, [fp, #-40]	; 0xffffffd8
   162c0:	str	r0, [fp, #-32]	; 0xffffffe0
   162c4:	ldr	r7, [sp, #20]
   162c8:	sub	r0, fp, #32
   162cc:	sub	r2, fp, #48	; 0x30
   162d0:	mov	r3, #0
   162d4:	mov	r1, r7
   162d8:	bl	201bc <__assert_fail@plt+0xed08>
   162dc:	ldr	r8, [sp, #16]
   162e0:	cmp	r0, #0
   162e4:	str	r0, [r7, #36]	; 0x24
   162e8:	beq	16368 <__assert_fail@plt+0x4eb4>
   162ec:	ldrsb	r1, [r0, #52]	; 0x34
   162f0:	cmn	r1, #1
   162f4:	ble	16308 <__assert_fail@plt+0x4e54>
   162f8:	str	r0, [r7, #40]	; 0x28
   162fc:	str	r0, [r7, #44]	; 0x2c
   16300:	str	r0, [r7, #48]	; 0x30
   16304:	b	1637c <__assert_fail@plt+0x4ec8>
   16308:	sub	r4, fp, #32
   1630c:	sub	r6, fp, #48	; 0x30
   16310:	mov	r1, r7
   16314:	mov	r3, #1
   16318:	mov	r0, r4
   1631c:	mov	r2, r6
   16320:	bl	201bc <__assert_fail@plt+0xed08>
   16324:	str	r0, [r7, #40]	; 0x28
   16328:	mov	r0, r4
   1632c:	mov	r1, r7
   16330:	mov	r2, r6
   16334:	mov	r3, #2
   16338:	bl	201bc <__assert_fail@plt+0xed08>
   1633c:	str	r0, [r7, #44]	; 0x2c
   16340:	mov	r0, r4
   16344:	mov	r1, r7
   16348:	mov	r2, r6
   1634c:	mov	r3, #6
   16350:	bl	201bc <__assert_fail@plt+0xed08>
   16354:	str	r0, [r7, #48]	; 0x30
   16358:	ldr	r1, [r7, #40]	; 0x28
   1635c:	cmp	r1, #0
   16360:	cmpne	r0, #0
   16364:	bne	16370 <__assert_fail@plt+0x4ebc>
   16368:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1636c:	b	16388 <__assert_fail@plt+0x4ed4>
   16370:	ldr	r0, [r7, #44]	; 0x2c
   16374:	cmp	r0, #0
   16378:	beq	16368 <__assert_fail@plt+0x4eb4>
   1637c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16380:	bl	2ae28 <__assert_fail@plt+0x19974>
   16384:	mov	r0, #0
   16388:	str	r0, [fp, #-52]	; 0xffffffcc
   1638c:	ldr	r5, [r8]
   16390:	ldr	r0, [r5, #56]	; 0x38
   16394:	cmp	r0, #0
   16398:	beq	163b0 <__assert_fail@plt+0x4efc>
   1639c:	ldr	r4, [r0]
   163a0:	bl	2ae28 <__assert_fail@plt+0x19974>
   163a4:	cmp	r4, #0
   163a8:	mov	r0, r4
   163ac:	bne	1639c <__assert_fail@plt+0x4ee8>
   163b0:	mov	r0, #31
   163b4:	mov	r4, #0
   163b8:	str	r0, [r5, #64]	; 0x40
   163bc:	str	r4, [r5, #52]	; 0x34
   163c0:	str	r4, [r5, #56]	; 0x38
   163c4:	ldr	r0, [r5, #16]
   163c8:	bl	2ae28 <__assert_fail@plt+0x19974>
   163cc:	str	r4, [r5, #16]
   163d0:	ldr	r0, [sp, #40]	; 0x28
   163d4:	bl	2ae28 <__assert_fail@plt+0x19974>
   163d8:	ldr	r0, [sp, #44]	; 0x2c
   163dc:	bl	2ae28 <__assert_fail@plt+0x19974>
   163e0:	ldrb	r0, [sp, #107]	; 0x6b
   163e4:	cmp	r0, #0
   163e8:	beq	163f4 <__assert_fail@plt+0x4f40>
   163ec:	ldr	r0, [sp, #36]	; 0x24
   163f0:	bl	2ae28 <__assert_fail@plt+0x19974>
   163f4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   163f8:	cmp	r0, #0
   163fc:	bne	16420 <__assert_fail@plt+0x4f6c>
   16400:	mov	r0, r4
   16404:	sub	sp, fp, #28
   16408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1640c:	ldr	sl, [sp, #16]
   16410:	b	15630 <__assert_fail@plt+0x417c>
   16414:	ldr	r8, [sp, #16]
   16418:	ldr	r7, [sp, #20]
   1641c:	b	16388 <__assert_fail@plt+0x4ed4>
   16420:	ldr	r0, [sp, #8]
   16424:	cmp	r0, #0
   16428:	beq	16434 <__assert_fail@plt+0x4f80>
   1642c:	add	r0, r7, #136	; 0x88
   16430:	bl	11214 <pthread_mutex_destroy@plt>
   16434:	mov	r0, r7
   16438:	bl	16fcc <__assert_fail@plt+0x5b18>
   1643c:	mov	r0, #0
   16440:	str	r0, [r8]
   16444:	str	r0, [r8, #4]
   16448:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1644c:	mov	r0, r4
   16450:	sub	sp, fp, #28
   16454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16458:	ldr	r8, [sp, #16]
   1645c:	mov	r0, #0
   16460:	str	r0, [fp, #-48]	; 0xffffffd0
   16464:	str	r0, [fp, #-44]	; 0xffffffd4
   16468:	mov	r0, #12
   1646c:	str	r0, [fp, #-32]	; 0xffffffe0
   16470:	b	16388 <__assert_fail@plt+0x4ed4>
   16474:	bl	114a8 <abort@plt>
   16478:	movw	r2, #54960	; 0xd6b0
   1647c:	movt	r2, #3
   16480:	ldr	r1, [r2]
   16484:	str	r0, [r2]
   16488:	mov	r0, r1
   1648c:	bx	lr
   16490:	push	{r4, r5, r6, sl, fp, lr}
   16494:	add	fp, sp, #16
   16498:	ldr	r5, [r0, #16]
   1649c:	ldr	r6, [r0]
   164a0:	mov	r4, r0
   164a4:	mov	r1, #0
   164a8:	mov	r2, #256	; 0x100
   164ac:	mov	r0, r5
   164b0:	bl	113d0 <memset@plt>
   164b4:	ldr	r1, [r6, #36]	; 0x24
   164b8:	mov	r0, r4
   164bc:	mov	r2, r5
   164c0:	bl	1652c <__assert_fail@plt+0x5078>
   164c4:	ldr	r0, [r6, #36]	; 0x24
   164c8:	ldr	r1, [r6, #40]	; 0x28
   164cc:	cmp	r0, r1
   164d0:	beq	164e4 <__assert_fail@plt+0x5030>
   164d4:	mov	r0, r4
   164d8:	mov	r2, r5
   164dc:	bl	1652c <__assert_fail@plt+0x5078>
   164e0:	ldr	r0, [r6, #36]	; 0x24
   164e4:	ldr	r1, [r6, #44]	; 0x2c
   164e8:	cmp	r0, r1
   164ec:	beq	16500 <__assert_fail@plt+0x504c>
   164f0:	mov	r0, r4
   164f4:	mov	r2, r5
   164f8:	bl	1652c <__assert_fail@plt+0x5078>
   164fc:	ldr	r0, [r6, #36]	; 0x24
   16500:	ldr	r1, [r6, #48]	; 0x30
   16504:	cmp	r0, r1
   16508:	beq	16518 <__assert_fail@plt+0x5064>
   1650c:	mov	r0, r4
   16510:	mov	r2, r5
   16514:	bl	1652c <__assert_fail@plt+0x5078>
   16518:	ldrb	r0, [r4, #28]
   1651c:	orr	r0, r0, #8
   16520:	strb	r0, [r4, #28]
   16524:	mov	r0, #0
   16528:	pop	{r4, r5, r6, sl, fp, pc}
   1652c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16530:	add	fp, sp, #28
   16534:	sub	sp, sp, #332	; 0x14c
   16538:	ldr	r8, [r0]
   1653c:	mov	r9, r0
   16540:	mov	r5, r2
   16544:	mov	r2, #0
   16548:	str	r2, [sp, #20]
   1654c:	ldr	r0, [r8, #92]	; 0x5c
   16550:	cmp	r0, #1
   16554:	ldrbeq	r0, [r9, #14]
   16558:	ubfxeq	r0, r0, #6, #1
   1655c:	streq	r0, [sp, #20]
   16560:	ldr	r0, [r1, #8]
   16564:	cmp	r0, #1
   16568:	blt	16d24 <__assert_fail@plt+0x5870>
   1656c:	add	r0, r5, #224	; 0xe0
   16570:	mov	sl, #1
   16574:	mov	r2, #0
   16578:	str	r9, [sp, #16]
   1657c:	str	r1, [sp, #24]
   16580:	str	r0, [sp, #52]	; 0x34
   16584:	add	r0, r5, #192	; 0xc0
   16588:	str	r0, [sp, #48]	; 0x30
   1658c:	add	r0, r5, #160	; 0xa0
   16590:	str	r0, [sp, #44]	; 0x2c
   16594:	add	r0, r5, #128	; 0x80
   16598:	str	r0, [sp, #40]	; 0x28
   1659c:	add	r0, r5, #96	; 0x60
   165a0:	str	r0, [sp, #36]	; 0x24
   165a4:	add	r0, r5, #64	; 0x40
   165a8:	str	r0, [sp, #32]
   165ac:	add	r0, r5, #32
   165b0:	str	r0, [sp, #12]
   165b4:	add	r0, r5, #31
   165b8:	str	r0, [sp, #8]
   165bc:	add	r0, sp, #56	; 0x38
   165c0:	add	r0, r0, #1
   165c4:	str	r0, [sp, #4]
   165c8:	ldr	r0, [r1, #12]
   165cc:	str	r2, [sp, #28]
   165d0:	ldr	r4, [r0, r2, lsl #2]
   165d4:	ldr	r2, [r8]
   165d8:	add	r0, r2, r4, lsl #3
   165dc:	ldrb	r6, [r0, #4]
   165e0:	sub	r0, r6, #1
   165e4:	cmp	r0, #6
   165e8:	bhi	16d0c <__assert_fail@plt+0x5858>
   165ec:	add	r1, pc, #0
   165f0:	ldr	pc, [r1, r0, lsl #2]
   165f4:	andeq	r6, r1, r0, lsl r6
   165f8:	andeq	r6, r1, ip, lsr #26
   165fc:	andeq	r6, r1, r0, lsl r7
   16600:	andeq	r6, r1, ip, lsl #26
   16604:	andeq	r6, r1, ip, lsr #26
   16608:	andeq	r6, r1, r0, asr #19
   1660c:	andeq	r6, r1, ip, lsr #26
   16610:	ldr	r0, [sp, #20]
   16614:	ldrb	r6, [r2, r4, lsl #3]
   16618:	cmp	r0, #0
   1661c:	strb	sl, [r5, r6]
   16620:	beq	16634 <__assert_fail@plt+0x5180>
   16624:	bl	1134c <__ctype_tolower_loc@plt>
   16628:	ldr	r0, [r0]
   1662c:	ldr	r0, [r0, r6, lsl #2]
   16630:	strb	sl, [r5, r0]
   16634:	ldrb	r0, [r9, #14]
   16638:	tst	r0, #64	; 0x40
   1663c:	beq	16d0c <__assert_fail@plt+0x5858>
   16640:	ldr	r0, [r8, #92]	; 0x5c
   16644:	cmp	r0, #2
   16648:	blt	16d0c <__assert_fail@plt+0x5858>
   1664c:	ldr	r0, [r8]
   16650:	add	r1, r4, #1
   16654:	movw	r7, #1
   16658:	add	r6, sp, #56	; 0x38
   1665c:	movt	r7, #32
   16660:	ldrb	r0, [r0, r4, lsl #3]
   16664:	strb	r0, [sp, #56]	; 0x38
   16668:	ldr	r0, [r8, #8]
   1666c:	cmp	r1, r0
   16670:	ldr	r0, [sp, #4]
   16674:	bcs	166b8 <__assert_fail@plt+0x5204>
   16678:	ldr	r0, [sp, #4]
   1667c:	ldr	r1, [r8]
   16680:	add	r3, r7, #254	; 0xfe
   16684:	add	r1, r1, r4, lsl #3
   16688:	ldr	r2, [r1, #12]
   1668c:	and	r2, r2, r3
   16690:	cmp	r2, r7
   16694:	bne	166b8 <__assert_fail@plt+0x5204>
   16698:	ldrb	r1, [r1, #8]
   1669c:	add	r3, r4, #2
   166a0:	strb	r1, [r0], #1
   166a4:	add	r1, r4, #1
   166a8:	ldr	r2, [r8, #8]
   166ac:	mov	r4, r1
   166b0:	cmp	r3, r2
   166b4:	bcc	1667c <__assert_fail@plt+0x51c8>
   166b8:	mov	r1, #0
   166bc:	sub	r4, r0, r6
   166c0:	sub	r7, fp, #48	; 0x30
   166c4:	sub	r0, fp, #36	; 0x24
   166c8:	str	r1, [fp, #-44]	; 0xffffffd4
   166cc:	str	r1, [fp, #-48]	; 0xffffffd0
   166d0:	mov	r1, r6
   166d4:	mov	r2, r4
   166d8:	mov	r3, r7
   166dc:	bl	2ae88 <__assert_fail@plt+0x199d4>
   166e0:	cmp	r0, r4
   166e4:	bne	16d0c <__assert_fail@plt+0x5858>
   166e8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   166ec:	bl	11274 <towlower@plt>
   166f0:	mov	r1, r0
   166f4:	mov	r0, r6
   166f8:	mov	r2, r7
   166fc:	bl	111e4 <wcrtomb@plt>
   16700:	cmn	r0, #1
   16704:	ldrbne	r0, [sp, #56]	; 0x38
   16708:	strbne	sl, [r5, r0]
   1670c:	b	16d0c <__assert_fail@plt+0x5858>
   16710:	ldr	r0, [sp, #20]
   16714:	cmp	r0, #0
   16718:	beq	16b6c <__assert_fail@plt+0x56b8>
   1671c:	ldr	r0, [r2, r4, lsl #3]
   16720:	mov	r6, #0
   16724:	ldr	r7, [r0]
   16728:	tst	r7, sl, lsl r6
   1672c:	beq	1675c <__assert_fail@plt+0x52a8>
   16730:	add	r1, r6, #128	; 0x80
   16734:	mov	r0, r5
   16738:	lsr	r1, r1, #7
   1673c:	strb	sl, [r0, r6]!
   16740:	cmp	r1, #2
   16744:	bhi	16758 <__assert_fail@plt+0x52a4>
   16748:	bl	1134c <__ctype_tolower_loc@plt>
   1674c:	ldr	r0, [r0]
   16750:	ldr	r0, [r0, r6, lsl #2]
   16754:	add	r0, r5, r0
   16758:	strb	sl, [r0]
   1675c:	add	r6, r6, #1
   16760:	cmp	r6, #32
   16764:	bne	16728 <__assert_fail@plt+0x5274>
   16768:	ldr	r0, [r8]
   1676c:	ldr	r6, [sp, #12]
   16770:	mov	r9, #0
   16774:	ldr	r0, [r0, r4, lsl #3]
   16778:	ldr	r7, [r0, #4]
   1677c:	tst	r7, sl, lsl r9
   16780:	beq	167b4 <__assert_fail@plt+0x5300>
   16784:	add	r1, r9, #160	; 0xa0
   16788:	mov	r0, r6
   1678c:	lsr	r1, r1, #7
   16790:	strb	sl, [r0, r9]!
   16794:	cmp	r1, #2
   16798:	bhi	167b0 <__assert_fail@plt+0x52fc>
   1679c:	bl	1134c <__ctype_tolower_loc@plt>
   167a0:	ldr	r0, [r0]
   167a4:	add	r0, r0, r9, lsl #2
   167a8:	ldr	r0, [r0, #128]	; 0x80
   167ac:	add	r0, r5, r0
   167b0:	strb	sl, [r0]
   167b4:	add	r9, r9, #1
   167b8:	cmp	r9, #32
   167bc:	bne	1677c <__assert_fail@plt+0x52c8>
   167c0:	ldr	r0, [r8]
   167c4:	ldr	r9, [sp, #16]
   167c8:	mov	r6, #0
   167cc:	ldr	r0, [r0, r4, lsl #3]
   167d0:	ldr	r7, [r0, #8]
   167d4:	tst	r7, sl, lsl r6
   167d8:	beq	1680c <__assert_fail@plt+0x5358>
   167dc:	ldr	r0, [sp, #32]
   167e0:	add	r1, r6, #192	; 0xc0
   167e4:	lsr	r1, r1, #7
   167e8:	cmp	r1, #2
   167ec:	strb	sl, [r0, r6]!
   167f0:	bhi	16808 <__assert_fail@plt+0x5354>
   167f4:	bl	1134c <__ctype_tolower_loc@plt>
   167f8:	ldr	r0, [r0]
   167fc:	add	r0, r0, r6, lsl #2
   16800:	ldr	r0, [r0, #256]	; 0x100
   16804:	add	r0, r5, r0
   16808:	strb	sl, [r0]
   1680c:	add	r6, r6, #1
   16810:	cmp	r6, #32
   16814:	bne	167d4 <__assert_fail@plt+0x5320>
   16818:	ldr	r0, [r8]
   1681c:	mov	r6, #0
   16820:	ldr	r0, [r0, r4, lsl #3]
   16824:	ldr	r7, [r0, #12]
   16828:	tst	r7, sl, lsl r6
   1682c:	beq	16860 <__assert_fail@plt+0x53ac>
   16830:	ldr	r0, [sp, #36]	; 0x24
   16834:	add	r1, r6, #224	; 0xe0
   16838:	lsr	r1, r1, #7
   1683c:	cmp	r1, #2
   16840:	strb	sl, [r0, r6]!
   16844:	bhi	1685c <__assert_fail@plt+0x53a8>
   16848:	bl	1134c <__ctype_tolower_loc@plt>
   1684c:	ldr	r0, [r0]
   16850:	add	r0, r0, r6, lsl #2
   16854:	ldr	r0, [r0, #384]	; 0x180
   16858:	add	r0, r5, r0
   1685c:	strb	sl, [r0]
   16860:	add	r6, r6, #1
   16864:	cmp	r6, #32
   16868:	bne	16828 <__assert_fail@plt+0x5374>
   1686c:	ldr	r0, [r8]
   16870:	mov	r6, #0
   16874:	ldr	r0, [r0, r4, lsl #3]
   16878:	ldr	r7, [r0, #16]
   1687c:	tst	r7, sl, lsl r6
   16880:	beq	168b4 <__assert_fail@plt+0x5400>
   16884:	ldr	r0, [sp, #40]	; 0x28
   16888:	add	r1, r6, #256	; 0x100
   1688c:	lsr	r1, r1, #7
   16890:	cmp	r1, #2
   16894:	strb	sl, [r0, r6]!
   16898:	bhi	168b0 <__assert_fail@plt+0x53fc>
   1689c:	bl	1134c <__ctype_tolower_loc@plt>
   168a0:	ldr	r0, [r0]
   168a4:	add	r0, r0, r6, lsl #2
   168a8:	ldr	r0, [r0, #512]	; 0x200
   168ac:	add	r0, r5, r0
   168b0:	strb	sl, [r0]
   168b4:	add	r6, r6, #1
   168b8:	cmp	r6, #32
   168bc:	bne	1687c <__assert_fail@plt+0x53c8>
   168c0:	ldr	r0, [r8]
   168c4:	mov	r6, #0
   168c8:	ldr	r0, [r0, r4, lsl #3]
   168cc:	ldr	r7, [r0, #20]
   168d0:	tst	r7, sl, lsl r6
   168d4:	beq	16908 <__assert_fail@plt+0x5454>
   168d8:	ldr	r0, [sp, #44]	; 0x2c
   168dc:	add	r1, r6, #288	; 0x120
   168e0:	lsr	r1, r1, #7
   168e4:	cmp	r1, #2
   168e8:	strb	sl, [r0, r6]!
   168ec:	bhi	16904 <__assert_fail@plt+0x5450>
   168f0:	bl	1134c <__ctype_tolower_loc@plt>
   168f4:	ldr	r0, [r0]
   168f8:	add	r0, r0, r6, lsl #2
   168fc:	ldr	r0, [r0, #640]	; 0x280
   16900:	add	r0, r5, r0
   16904:	strb	sl, [r0]
   16908:	add	r6, r6, #1
   1690c:	cmp	r6, #32
   16910:	bne	168d0 <__assert_fail@plt+0x541c>
   16914:	ldr	r0, [r8]
   16918:	mov	r6, #0
   1691c:	ldr	r0, [r0, r4, lsl #3]
   16920:	ldr	r7, [r0, #24]
   16924:	tst	r7, sl, lsl r6
   16928:	beq	1695c <__assert_fail@plt+0x54a8>
   1692c:	ldr	r0, [sp, #48]	; 0x30
   16930:	add	r1, r6, #320	; 0x140
   16934:	lsr	r1, r1, #7
   16938:	cmp	r1, #2
   1693c:	strb	sl, [r0, r6]!
   16940:	bhi	16958 <__assert_fail@plt+0x54a4>
   16944:	bl	1134c <__ctype_tolower_loc@plt>
   16948:	ldr	r0, [r0]
   1694c:	add	r0, r0, r6, lsl #2
   16950:	ldr	r0, [r0, #768]	; 0x300
   16954:	add	r0, r5, r0
   16958:	strb	sl, [r0]
   1695c:	add	r6, r6, #1
   16960:	cmp	r6, #32
   16964:	bne	16924 <__assert_fail@plt+0x5470>
   16968:	ldr	r0, [r8]
   1696c:	mov	r6, #0
   16970:	ldr	r0, [r0, r4, lsl #3]
   16974:	ldr	r4, [r0, #28]
   16978:	tst	r4, sl, lsl r6
   1697c:	beq	169b0 <__assert_fail@plt+0x54fc>
   16980:	ldr	r0, [sp, #52]	; 0x34
   16984:	add	r1, r6, #352	; 0x160
   16988:	lsr	r1, r1, #7
   1698c:	cmp	r1, #2
   16990:	strb	sl, [r0, r6]!
   16994:	bhi	169ac <__assert_fail@plt+0x54f8>
   16998:	bl	1134c <__ctype_tolower_loc@plt>
   1699c:	ldr	r0, [r0]
   169a0:	add	r0, r0, r6, lsl #2
   169a4:	ldr	r0, [r0, #896]	; 0x380
   169a8:	add	r0, r5, r0
   169ac:	strb	sl, [r0]
   169b0:	add	r6, r6, #1
   169b4:	cmp	r6, #32
   169b8:	bne	16978 <__assert_fail@plt+0x54c4>
   169bc:	b	16d0c <__assert_fail@plt+0x5858>
   169c0:	ldr	r0, [r8, #92]	; 0x5c
   169c4:	ldr	r4, [r2, r4, lsl #3]
   169c8:	cmp	r0, #2
   169cc:	blt	16a3c <__assert_fail@plt+0x5588>
   169d0:	ldr	r0, [r4, #36]	; 0x24
   169d4:	cmp	r0, #0
   169d8:	bne	169f0 <__assert_fail@plt+0x553c>
   169dc:	ldrb	r0, [r4, #16]
   169e0:	tst	r0, #1
   169e4:	ldreq	r0, [r4, #32]
   169e8:	cmpeq	r0, #0
   169ec:	beq	16a3c <__assert_fail@plt+0x5588>
   169f0:	mov	r6, #0
   169f4:	add	r4, sp, #56	; 0x38
   169f8:	sub	r7, fp, #48	; 0x30
   169fc:	strb	r6, [fp, #-48]	; 0xffffffd0
   16a00:	mov	r0, #0
   16a04:	mov	r1, r7
   16a08:	mov	r2, #1
   16a0c:	mov	r3, r4
   16a10:	str	r6, [sp, #60]	; 0x3c
   16a14:	str	r6, [sp, #56]	; 0x38
   16a18:	bl	2ae88 <__assert_fail@plt+0x199d4>
   16a1c:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   16a20:	cmn	r0, #2
   16a24:	add	r0, r1, #1
   16a28:	strbeq	sl, [r5, r1]
   16a2c:	tst	r0, #255	; 0xff
   16a30:	strb	r0, [fp, #-48]	; 0xffffffd0
   16a34:	bne	16a00 <__assert_fail@plt+0x554c>
   16a38:	b	16d0c <__assert_fail@plt+0x5858>
   16a3c:	ldr	r0, [r4, #20]
   16a40:	cmp	r0, #1
   16a44:	blt	16d0c <__assert_fail@plt+0x5858>
   16a48:	ldr	r0, [sp, #20]
   16a4c:	mov	r7, #0
   16a50:	cmp	r0, #0
   16a54:	beq	16aec <__assert_fail@plt+0x5638>
   16a58:	mov	r0, #0
   16a5c:	sub	r2, fp, #48	; 0x30
   16a60:	str	r0, [fp, #-44]	; 0xffffffd4
   16a64:	str	r0, [fp, #-48]	; 0xffffffd0
   16a68:	ldr	r0, [r4]
   16a6c:	ldr	r1, [r0, r7, lsl #2]
   16a70:	add	r0, sp, #56	; 0x38
   16a74:	bl	111e4 <wcrtomb@plt>
   16a78:	cmn	r0, #1
   16a7c:	beq	16a98 <__assert_fail@plt+0x55e4>
   16a80:	ldrb	r6, [sp, #56]	; 0x38
   16a84:	strb	sl, [r5, r6]
   16a88:	bl	1134c <__ctype_tolower_loc@plt>
   16a8c:	ldr	r0, [r0]
   16a90:	ldr	r0, [r0, r6, lsl #2]
   16a94:	strb	sl, [r5, r0]
   16a98:	ldrb	r0, [r9, #14]
   16a9c:	tst	r0, #64	; 0x40
   16aa0:	beq	16ad8 <__assert_fail@plt+0x5624>
   16aa4:	ldr	r0, [r8, #92]	; 0x5c
   16aa8:	cmp	r0, #2
   16aac:	blt	16ad8 <__assert_fail@plt+0x5624>
   16ab0:	ldr	r0, [r4]
   16ab4:	ldr	r0, [r0, r7, lsl #2]
   16ab8:	bl	11274 <towlower@plt>
   16abc:	mov	r1, r0
   16ac0:	add	r0, sp, #56	; 0x38
   16ac4:	sub	r2, fp, #48	; 0x30
   16ac8:	bl	111e4 <wcrtomb@plt>
   16acc:	cmn	r0, #1
   16ad0:	ldrbne	r0, [sp, #56]	; 0x38
   16ad4:	strbne	sl, [r5, r0]
   16ad8:	ldr	r0, [r4, #20]
   16adc:	add	r7, r7, #1
   16ae0:	cmp	r7, r0
   16ae4:	blt	16a58 <__assert_fail@plt+0x55a4>
   16ae8:	b	16d0c <__assert_fail@plt+0x5858>
   16aec:	mov	r0, #0
   16af0:	sub	r2, fp, #48	; 0x30
   16af4:	str	r0, [fp, #-44]	; 0xffffffd4
   16af8:	str	r0, [fp, #-48]	; 0xffffffd0
   16afc:	ldr	r0, [r4]
   16b00:	ldr	r1, [r0, r7, lsl #2]
   16b04:	add	r0, sp, #56	; 0x38
   16b08:	bl	111e4 <wcrtomb@plt>
   16b0c:	cmn	r0, #1
   16b10:	ldrbne	r0, [sp, #56]	; 0x38
   16b14:	strbne	sl, [r5, r0]
   16b18:	ldrb	r0, [r9, #14]
   16b1c:	tst	r0, #64	; 0x40
   16b20:	beq	16b58 <__assert_fail@plt+0x56a4>
   16b24:	ldr	r0, [r8, #92]	; 0x5c
   16b28:	cmp	r0, #2
   16b2c:	blt	16b58 <__assert_fail@plt+0x56a4>
   16b30:	ldr	r0, [r4]
   16b34:	ldr	r0, [r0, r7, lsl #2]
   16b38:	bl	11274 <towlower@plt>
   16b3c:	mov	r1, r0
   16b40:	add	r0, sp, #56	; 0x38
   16b44:	sub	r2, fp, #48	; 0x30
   16b48:	bl	111e4 <wcrtomb@plt>
   16b4c:	cmn	r0, #1
   16b50:	ldrbne	r0, [sp, #56]	; 0x38
   16b54:	strbne	sl, [r5, r0]
   16b58:	ldr	r0, [r4, #20]
   16b5c:	add	r7, r7, #1
   16b60:	cmp	r7, r0
   16b64:	blt	16aec <__assert_fail@plt+0x5638>
   16b68:	b	16d0c <__assert_fail@plt+0x5858>
   16b6c:	ldr	r1, [sp, #8]
   16b70:	mov	r0, #0
   16b74:	b	16b84 <__assert_fail@plt+0x56d0>
   16b78:	ldr	r2, [r8]
   16b7c:	add	r0, r0, #4
   16b80:	add	r1, r1, #32
   16b84:	ldr	r2, [r2, r4, lsl #3]
   16b88:	ldr	r2, [r2, r0]
   16b8c:	tst	r2, #1
   16b90:	strbne	sl, [r1, #-31]	; 0xffffffe1
   16b94:	tst	r2, #2
   16b98:	addne	r3, r5, r0, lsl #3
   16b9c:	strbne	sl, [r3, #1]
   16ba0:	tst	r2, #4
   16ba4:	addne	r3, r5, r0, lsl #3
   16ba8:	strbne	sl, [r3, #2]
   16bac:	tst	r2, #8
   16bb0:	addne	r3, r5, r0, lsl #3
   16bb4:	strbne	sl, [r3, #3]
   16bb8:	tst	r2, #16
   16bbc:	addne	r3, r5, r0, lsl #3
   16bc0:	strbne	sl, [r3, #4]
   16bc4:	tst	r2, #32
   16bc8:	addne	r3, r5, r0, lsl #3
   16bcc:	strbne	sl, [r3, #5]
   16bd0:	tst	r2, #64	; 0x40
   16bd4:	addne	r3, r5, r0, lsl #3
   16bd8:	strbne	sl, [r3, #6]
   16bdc:	tst	r2, #128	; 0x80
   16be0:	addne	r3, r5, r0, lsl #3
   16be4:	strbne	sl, [r3, #7]
   16be8:	tst	r2, #256	; 0x100
   16bec:	addne	r3, r5, r0, lsl #3
   16bf0:	strbne	sl, [r3, #8]
   16bf4:	tst	r2, #512	; 0x200
   16bf8:	addne	r3, r5, r0, lsl #3
   16bfc:	strbne	sl, [r3, #9]
   16c00:	tst	r2, #1024	; 0x400
   16c04:	addne	r3, r5, r0, lsl #3
   16c08:	strbne	sl, [r3, #10]
   16c0c:	tst	r2, #2048	; 0x800
   16c10:	addne	r3, r5, r0, lsl #3
   16c14:	strbne	sl, [r3, #11]
   16c18:	tst	r2, #4096	; 0x1000
   16c1c:	addne	r3, r5, r0, lsl #3
   16c20:	strbne	sl, [r3, #12]
   16c24:	tst	r2, #8192	; 0x2000
   16c28:	addne	r3, r5, r0, lsl #3
   16c2c:	strbne	sl, [r3, #13]
   16c30:	tst	r2, #16384	; 0x4000
   16c34:	addne	r3, r5, r0, lsl #3
   16c38:	strbne	sl, [r3, #14]
   16c3c:	tst	r2, #32768	; 0x8000
   16c40:	addne	r3, r5, r0, lsl #3
   16c44:	strbne	sl, [r3, #15]
   16c48:	tst	r2, #65536	; 0x10000
   16c4c:	addne	r3, r5, r0, lsl #3
   16c50:	strbne	sl, [r3, #16]
   16c54:	tst	r2, #131072	; 0x20000
   16c58:	addne	r3, r5, r0, lsl #3
   16c5c:	strbne	sl, [r3, #17]
   16c60:	tst	r2, #262144	; 0x40000
   16c64:	addne	r3, r5, r0, lsl #3
   16c68:	strbne	sl, [r3, #18]
   16c6c:	tst	r2, #524288	; 0x80000
   16c70:	addne	r3, r5, r0, lsl #3
   16c74:	strbne	sl, [r3, #19]
   16c78:	tst	r2, #1048576	; 0x100000
   16c7c:	addne	r3, r5, r0, lsl #3
   16c80:	strbne	sl, [r3, #20]
   16c84:	tst	r2, #2097152	; 0x200000
   16c88:	addne	r3, r5, r0, lsl #3
   16c8c:	strbne	sl, [r3, #21]
   16c90:	tst	r2, #4194304	; 0x400000
   16c94:	addne	r3, r5, r0, lsl #3
   16c98:	strbne	sl, [r3, #22]
   16c9c:	tst	r2, #8388608	; 0x800000
   16ca0:	addne	r3, r5, r0, lsl #3
   16ca4:	strbne	sl, [r3, #23]
   16ca8:	tst	r2, #16777216	; 0x1000000
   16cac:	addne	r3, r5, r0, lsl #3
   16cb0:	strbne	sl, [r3, #24]
   16cb4:	tst	r2, #33554432	; 0x2000000
   16cb8:	addne	r3, r5, r0, lsl #3
   16cbc:	strbne	sl, [r3, #25]
   16cc0:	tst	r2, #67108864	; 0x4000000
   16cc4:	addne	r3, r5, r0, lsl #3
   16cc8:	strbne	sl, [r3, #26]
   16ccc:	tst	r2, #134217728	; 0x8000000
   16cd0:	addne	r3, r5, r0, lsl #3
   16cd4:	strbne	sl, [r3, #27]
   16cd8:	tst	r2, #268435456	; 0x10000000
   16cdc:	addne	r3, r5, r0, lsl #3
   16ce0:	strbne	sl, [r3, #28]
   16ce4:	tst	r2, #536870912	; 0x20000000
   16ce8:	addne	r3, r5, r0, lsl #3
   16cec:	strbne	sl, [r3, #29]
   16cf0:	tst	r2, #1073741824	; 0x40000000
   16cf4:	addne	r3, r5, r0, lsl #3
   16cf8:	strbne	sl, [r3, #30]
   16cfc:	cmn	r2, #1
   16d00:	strble	sl, [r1]
   16d04:	cmp	r0, #28
   16d08:	bne	16b78 <__assert_fail@plt+0x56c4>
   16d0c:	ldr	r1, [sp, #24]
   16d10:	ldr	r2, [sp, #28]
   16d14:	ldr	r0, [r1, #8]
   16d18:	add	r2, r2, #1
   16d1c:	cmp	r2, r0
   16d20:	blt	165c8 <__assert_fail@plt+0x5114>
   16d24:	sub	sp, fp, #28
   16d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d2c:	mov	r0, r5
   16d30:	mov	r1, #1
   16d34:	mov	r2, #256	; 0x100
   16d38:	bl	113d0 <memset@plt>
   16d3c:	cmp	r6, #2
   16d40:	ldrbeq	r0, [r9, #28]
   16d44:	orreq	r0, r0, #1
   16d48:	strbeq	r0, [r9, #28]
   16d4c:	sub	sp, fp, #28
   16d50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d54:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16d58:	add	fp, sp, #24
   16d5c:	mov	r4, r0
   16d60:	mov	r0, #0
   16d64:	mov	r6, r2
   16d68:	mov	r5, r1
   16d6c:	str	r0, [r4]
   16d70:	str	r0, [r4, #4]
   16d74:	str	r0, [r4, #8]
   16d78:	mov	r0, #256	; 0x100
   16d7c:	bl	2ac60 <__assert_fail@plt+0x197ac>
   16d80:	cmp	r0, #0
   16d84:	str	r0, [r4, #16]
   16d88:	beq	16ec0 <__assert_fail@plt+0x5a0c>
   16d8c:	movw	r0, #45820	; 0xb2fc
   16d90:	tst	r6, #1
   16d94:	and	r1, r6, #2
   16d98:	mov	r8, r4
   16d9c:	movt	r0, #3
   16da0:	movweq	r0, #710	; 0x2c6
   16da4:	movteq	r0, #257	; 0x101
   16da8:	tst	r6, #4
   16dac:	orr	r7, r0, r1, lsl #21
   16db0:	bne	16dc4 <__assert_fail@plt+0x5910>
   16db4:	ldrb	r0, [r8, #28]!
   16db8:	and	r0, r0, #127	; 0x7f
   16dbc:	strb	r0, [r8]
   16dc0:	b	16de4 <__assert_fail@plt+0x5930>
   16dc4:	ldrb	r0, [r8, #28]!
   16dc8:	mvn	r1, #127	; 0x7f
   16dcc:	orr	r0, r0, r1
   16dd0:	movw	r1, #45758	; 0xb2be
   16dd4:	movt	r1, #323	; 0x143
   16dd8:	strb	r0, [r8]
   16ddc:	and	r1, r7, r1
   16de0:	orr	r7, r1, #256	; 0x100
   16de4:	and	r1, r6, #8
   16de8:	and	r0, r0, #239	; 0xef
   16dec:	mov	r9, #0
   16df0:	orr	r0, r0, r1, lsl #1
   16df4:	str	r9, [r4, #20]
   16df8:	strb	r0, [r4, #28]
   16dfc:	mov	r0, r5
   16e00:	bl	11394 <strlen@plt>
   16e04:	mov	r2, r0
   16e08:	mov	r0, r4
   16e0c:	mov	r1, r5
   16e10:	mov	r3, r7
   16e14:	bl	14d80 <__assert_fail@plt+0x38cc>
   16e18:	mov	r5, r0
   16e1c:	cmp	r0, #16
   16e20:	movweq	r5, #8
   16e24:	cmp	r5, #0
   16e28:	bne	16ecc <__assert_fail@plt+0x5a18>
   16e2c:	ldr	r5, [r4, #16]
   16e30:	ldr	r6, [r4]
   16e34:	mov	r1, #0
   16e38:	mov	r2, #256	; 0x100
   16e3c:	mov	r0, r5
   16e40:	bl	113d0 <memset@plt>
   16e44:	ldr	r1, [r6, #36]	; 0x24
   16e48:	mov	r0, r4
   16e4c:	mov	r2, r5
   16e50:	bl	1652c <__assert_fail@plt+0x5078>
   16e54:	ldr	r0, [r6, #36]	; 0x24
   16e58:	ldr	r1, [r6, #40]	; 0x28
   16e5c:	cmp	r0, r1
   16e60:	beq	16e74 <__assert_fail@plt+0x59c0>
   16e64:	mov	r0, r4
   16e68:	mov	r2, r5
   16e6c:	bl	1652c <__assert_fail@plt+0x5078>
   16e70:	ldr	r0, [r6, #36]	; 0x24
   16e74:	ldr	r1, [r6, #44]	; 0x2c
   16e78:	cmp	r0, r1
   16e7c:	beq	16e90 <__assert_fail@plt+0x59dc>
   16e80:	mov	r0, r4
   16e84:	mov	r2, r5
   16e88:	bl	1652c <__assert_fail@plt+0x5078>
   16e8c:	ldr	r0, [r6, #36]	; 0x24
   16e90:	ldr	r1, [r6, #48]	; 0x30
   16e94:	cmp	r0, r1
   16e98:	beq	16ea8 <__assert_fail@plt+0x59f4>
   16e9c:	mov	r0, r4
   16ea0:	mov	r2, r5
   16ea4:	bl	1652c <__assert_fail@plt+0x5078>
   16ea8:	ldrb	r0, [r8]
   16eac:	mov	r5, #0
   16eb0:	orr	r0, r0, #8
   16eb4:	strb	r0, [r8]
   16eb8:	mov	r0, r5
   16ebc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16ec0:	mov	r5, #12
   16ec4:	mov	r0, r5
   16ec8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16ecc:	ldr	r0, [r4, #16]
   16ed0:	bl	2ae28 <__assert_fail@plt+0x19974>
   16ed4:	mov	r0, r5
   16ed8:	str	r9, [r4, #16]
   16edc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16ee0:	push	{r4, r5, r6, r7, fp, lr}
   16ee4:	add	fp, sp, #16
   16ee8:	cmp	r0, #17
   16eec:	bcs	16f60 <__assert_fail@plt+0x5aac>
   16ef0:	movw	r1, #49560	; 0xc198
   16ef4:	mov	r4, r2
   16ef8:	mov	r2, #5
   16efc:	mov	r5, r3
   16f00:	movt	r1, #2
   16f04:	ldr	r0, [r1, r0, lsl #2]
   16f08:	movw	r1, #49176	; 0xc018
   16f0c:	movt	r1, #2
   16f10:	add	r1, r1, r0
   16f14:	mov	r0, #0
   16f18:	bl	112b0 <dcgettext@plt>
   16f1c:	mov	r6, r0
   16f20:	bl	11394 <strlen@plt>
   16f24:	add	r7, r0, #1
   16f28:	cmp	r5, #0
   16f2c:	beq	16f48 <__assert_fail@plt+0x5a94>
   16f30:	cmp	r7, r5
   16f34:	mov	r2, r7
   16f38:	bhi	16f50 <__assert_fail@plt+0x5a9c>
   16f3c:	mov	r0, r4
   16f40:	mov	r1, r6
   16f44:	bl	1125c <memcpy@plt>
   16f48:	mov	r0, r7
   16f4c:	pop	{r4, r5, r6, r7, fp, pc}
   16f50:	sub	r2, r5, #1
   16f54:	mov	r0, #0
   16f58:	strb	r0, [r4, r2]
   16f5c:	b	16f3c <__assert_fail@plt+0x5a88>
   16f60:	bl	114a8 <abort@plt>
   16f64:	push	{r4, r5, fp, lr}
   16f68:	add	fp, sp, #8
   16f6c:	ldr	r5, [r0]
   16f70:	mov	r4, r0
   16f74:	cmp	r5, #0
   16f78:	beq	16fa4 <__assert_fail@plt+0x5af0>
   16f7c:	movw	r0, #0
   16f80:	movw	r1, #0
   16f84:	movt	r0, #0
   16f88:	movt	r1, #0
   16f8c:	orrs	r0, r1, r0
   16f90:	beq	16f9c <__assert_fail@plt+0x5ae8>
   16f94:	add	r0, r5, #136	; 0x88
   16f98:	bl	11214 <pthread_mutex_destroy@plt>
   16f9c:	mov	r0, r5
   16fa0:	bl	16fcc <__assert_fail@plt+0x5b18>
   16fa4:	mov	r5, #0
   16fa8:	str	r5, [r4]
   16fac:	str	r5, [r4, #4]
   16fb0:	ldr	r0, [r4, #16]
   16fb4:	bl	2ae28 <__assert_fail@plt+0x19974>
   16fb8:	str	r5, [r4, #16]
   16fbc:	ldr	r0, [r4, #20]
   16fc0:	bl	2ae28 <__assert_fail@plt+0x19974>
   16fc4:	str	r5, [r4, #20]
   16fc8:	pop	{r4, r5, fp, pc}
   16fcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fd0:	add	fp, sp, #28
   16fd4:	sub	sp, sp, #4
   16fd8:	mov	sl, r0
   16fdc:	ldr	r0, [r0]
   16fe0:	cmp	r0, #0
   16fe4:	ldrne	r1, [sl, #8]
   16fe8:	cmpne	r1, #0
   16fec:	beq	17064 <__assert_fail@plt+0x5bb0>
   16ff0:	movw	r7, #255	; 0xff
   16ff4:	mov	r6, #0
   16ff8:	movt	r7, #4
   16ffc:	b	17004 <__assert_fail@plt+0x5b50>
   17000:	ldr	r0, [sl]
   17004:	add	r1, r0, r6, lsl #3
   17008:	ldr	r1, [r1, #4]
   1700c:	and	r1, r1, r7
   17010:	cmp	r1, #3
   17014:	beq	1704c <__assert_fail@plt+0x5b98>
   17018:	cmp	r1, #6
   1701c:	bne	17054 <__assert_fail@plt+0x5ba0>
   17020:	ldr	r5, [r0, r6, lsl #3]
   17024:	ldr	r0, [r5]
   17028:	bl	2ae28 <__assert_fail@plt+0x19974>
   1702c:	ldr	r0, [r5, #4]
   17030:	bl	2ae28 <__assert_fail@plt+0x19974>
   17034:	ldr	r0, [r5, #8]
   17038:	bl	2ae28 <__assert_fail@plt+0x19974>
   1703c:	ldr	r0, [r5, #12]
   17040:	bl	2ae28 <__assert_fail@plt+0x19974>
   17044:	mov	r0, r5
   17048:	b	17050 <__assert_fail@plt+0x5b9c>
   1704c:	ldr	r0, [r0, r6, lsl #3]
   17050:	bl	2ae28 <__assert_fail@plt+0x19974>
   17054:	ldr	r0, [sl, #8]
   17058:	add	r6, r6, #1
   1705c:	cmp	r6, r0
   17060:	bcc	17000 <__assert_fail@plt+0x5b4c>
   17064:	ldr	r0, [sl, #12]
   17068:	bl	2ae28 <__assert_fail@plt+0x19974>
   1706c:	ldr	r0, [sl, #8]
   17070:	cmp	r0, #0
   17074:	beq	170e0 <__assert_fail@plt+0x5c2c>
   17078:	add	r7, sl, #20
   1707c:	add	r8, sl, #28
   17080:	add	r9, sl, #24
   17084:	mov	r5, #0
   17088:	mov	r6, #8
   1708c:	ldr	r0, [r9]
   17090:	cmp	r0, #0
   17094:	beq	170a0 <__assert_fail@plt+0x5bec>
   17098:	ldr	r0, [r0, r6]
   1709c:	bl	2ae28 <__assert_fail@plt+0x19974>
   170a0:	ldr	r0, [r8]
   170a4:	cmp	r0, #0
   170a8:	beq	170b4 <__assert_fail@plt+0x5c00>
   170ac:	ldr	r0, [r0, r6]
   170b0:	bl	2ae28 <__assert_fail@plt+0x19974>
   170b4:	ldr	r0, [r7]
   170b8:	cmp	r0, #0
   170bc:	beq	170c8 <__assert_fail@plt+0x5c14>
   170c0:	ldr	r0, [r0, r6]
   170c4:	bl	2ae28 <__assert_fail@plt+0x19974>
   170c8:	ldr	r0, [sl, #8]
   170cc:	add	r5, r5, #1
   170d0:	add	r6, r6, #12
   170d4:	cmp	r5, r0
   170d8:	bcc	1708c <__assert_fail@plt+0x5bd8>
   170dc:	b	170ec <__assert_fail@plt+0x5c38>
   170e0:	add	r8, sl, #28
   170e4:	add	r9, sl, #24
   170e8:	add	r7, sl, #20
   170ec:	ldr	r0, [r7]
   170f0:	bl	2ae28 <__assert_fail@plt+0x19974>
   170f4:	ldr	r0, [r9]
   170f8:	bl	2ae28 <__assert_fail@plt+0x19974>
   170fc:	ldr	r0, [r8]
   17100:	bl	2ae28 <__assert_fail@plt+0x19974>
   17104:	ldr	r0, [sl]
   17108:	bl	2ae28 <__assert_fail@plt+0x19974>
   1710c:	ldr	r5, [sl, #32]
   17110:	cmp	r5, #0
   17114:	beq	17174 <__assert_fail@plt+0x5cc0>
   17118:	mov	r6, #0
   1711c:	b	17128 <__assert_fail@plt+0x5c74>
   17120:	ldr	r5, [sl, #32]
   17124:	add	r6, r6, #1
   17128:	add	r0, r6, r6, lsl #1
   1712c:	ldr	r0, [r5, r0, lsl #2]!
   17130:	add	r7, r5, #8
   17134:	cmp	r0, #1
   17138:	blt	1715c <__assert_fail@plt+0x5ca8>
   1713c:	mov	r4, #0
   17140:	ldr	r0, [r7]
   17144:	ldr	r0, [r0, r4, lsl #2]
   17148:	bl	1a110 <__assert_fail@plt+0x8c5c>
   1714c:	ldr	r0, [r5]
   17150:	add	r4, r4, #1
   17154:	cmp	r4, r0
   17158:	blt	17140 <__assert_fail@plt+0x5c8c>
   1715c:	ldr	r0, [r7]
   17160:	bl	2ae28 <__assert_fail@plt+0x19974>
   17164:	ldr	r0, [sl, #68]	; 0x44
   17168:	cmp	r6, r0
   1716c:	bcc	17120 <__assert_fail@plt+0x5c6c>
   17170:	ldr	r5, [sl, #32]
   17174:	mov	r0, r5
   17178:	bl	2ae28 <__assert_fail@plt+0x19974>
   1717c:	ldr	r0, [sl, #60]	; 0x3c
   17180:	movw	r1, #49628	; 0xc1dc
   17184:	movt	r1, #2
   17188:	cmp	r0, r1
   1718c:	beq	17194 <__assert_fail@plt+0x5ce0>
   17190:	bl	2ae28 <__assert_fail@plt+0x19974>
   17194:	ldr	r0, [sl, #132]	; 0x84
   17198:	bl	2ae28 <__assert_fail@plt+0x19974>
   1719c:	mov	r0, sl
   171a0:	sub	sp, fp, #28
   171a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171a8:	b	2ae28 <__assert_fail@plt+0x19974>
   171ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171b0:	add	fp, sp, #28
   171b4:	sub	sp, sp, #28
   171b8:	ldr	sl, [fp, #8]
   171bc:	mov	r7, #2
   171c0:	cmp	sl, #7
   171c4:	bhi	17298 <__assert_fail@plt+0x5de4>
   171c8:	mov	r5, r0
   171cc:	ldr	r0, [r0]
   171d0:	mov	r6, r3
   171d4:	mov	r9, r2
   171d8:	mov	r4, r1
   171dc:	tst	sl, #4
   171e0:	str	r0, [sp, #24]
   171e4:	bne	171fc <__assert_fail@plt+0x5d48>
   171e8:	mov	r0, r4
   171ec:	bl	11394 <strlen@plt>
   171f0:	mov	r7, r0
   171f4:	mov	r8, #0
   171f8:	b	17204 <__assert_fail@plt+0x5d50>
   171fc:	ldr	r8, [r6]
   17200:	ldr	r7, [r6, #4]
   17204:	movw	r0, #0
   17208:	movw	r1, #0
   1720c:	movt	r0, #0
   17210:	movt	r1, #0
   17214:	orrs	r0, r1, r0
   17218:	str	r0, [sp, #20]
   1721c:	beq	1722c <__assert_fail@plt+0x5d78>
   17220:	ldr	r0, [sp, #24]
   17224:	add	r0, r0, #136	; 0x88
   17228:	bl	11244 <pthread_mutex_lock@plt>
   1722c:	ldrb	r0, [r5, #28]
   17230:	tst	r0, #16
   17234:	bne	17248 <__assert_fail@plt+0x5d94>
   17238:	str	r7, [sp]
   1723c:	stmib	sp, {r7, r9}
   17240:	str	r6, [sp, #12]
   17244:	b	1725c <__assert_fail@plt+0x5da8>
   17248:	mov	r0, #0
   1724c:	str	r7, [sp]
   17250:	str	r7, [sp, #4]
   17254:	str	r0, [sp, #8]
   17258:	str	r0, [sp, #12]
   1725c:	mov	r0, r5
   17260:	mov	r1, r4
   17264:	mov	r2, r7
   17268:	mov	r3, r8
   1726c:	str	sl, [sp, #16]
   17270:	bl	172a4 <__assert_fail@plt+0x5df0>
   17274:	mov	r7, r0
   17278:	ldr	r0, [sp, #20]
   1727c:	cmp	r0, #0
   17280:	beq	17290 <__assert_fail@plt+0x5ddc>
   17284:	ldr	r0, [sp, #24]
   17288:	add	r0, r0, #136	; 0x88
   1728c:	bl	111a8 <pthread_mutex_unlock@plt>
   17290:	cmp	r7, #0
   17294:	movwne	r7, #1
   17298:	mov	r0, r7
   1729c:	sub	sp, fp, #28
   172a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172a8:	add	fp, sp, #28
   172ac:	sub	sp, sp, #412	; 0x19c
   172b0:	ldr	r8, [r0]
   172b4:	str	r2, [sp, #76]	; 0x4c
   172b8:	str	r1, [sp, #100]	; 0x64
   172bc:	mov	r7, r0
   172c0:	add	r0, sp, #104	; 0x68
   172c4:	mov	r1, #0
   172c8:	mov	r2, #136	; 0x88
   172cc:	mov	r6, r3
   172d0:	mov	r4, #0
   172d4:	bl	113d0 <memset@plt>
   172d8:	str	r8, [sp, #188]	; 0xbc
   172dc:	ldr	sl, [fp, #16]
   172e0:	ldr	ip, [fp, #8]
   172e4:	mov	r5, #0
   172e8:	ldr	r1, [r7, #16]
   172ec:	cmp	r1, #0
   172f0:	beq	1730c <__assert_fail@plt+0x5e58>
   172f4:	ldrb	r2, [r7, #28]
   172f8:	and	r2, r2, #9
   172fc:	cmp	r2, #8
   17300:	movne	r1, #0
   17304:	subs	r5, r6, ip
   17308:	movne	r5, r1
   1730c:	ldr	r2, [r7, #24]
   17310:	ldr	r1, [r7, #8]
   17314:	mov	r9, #1
   17318:	mvn	r3, r2
   1731c:	cmp	r2, sl
   17320:	addcc	r4, r3, sl
   17324:	cmp	r1, #0
   17328:	beq	198c0 <__assert_fail@plt+0x840c>
   1732c:	ldr	r1, [r8, #36]	; 0x24
   17330:	cmp	r1, #0
   17334:	ldrne	r2, [r8, #40]	; 0x28
   17338:	cmpne	r2, #0
   1733c:	beq	198c0 <__assert_fail@plt+0x840c>
   17340:	ldr	r3, [r8, #44]	; 0x2c
   17344:	cmp	r3, #0
   17348:	movne	r0, r7
   1734c:	ldrne	r7, [r8, #48]	; 0x30
   17350:	cmpne	r7, #0
   17354:	beq	198c0 <__assert_fail@plt+0x840c>
   17358:	ldr	r1, [r1, #8]
   1735c:	ldr	lr, [r0, #20]
   17360:	mov	r7, r0
   17364:	cmp	r1, #0
   17368:	bne	17378 <__assert_fail@plt+0x5ec4>
   1736c:	ldr	r1, [r2, #8]
   17370:	cmp	r1, #0
   17374:	beq	18a64 <__assert_fail@plt+0x75b0>
   17378:	mov	r1, ip
   1737c:	subs	r0, sl, r4
   17380:	str	r1, [sp, #80]	; 0x50
   17384:	str	r4, [sp, #28]
   17388:	str	r0, [sp, #68]	; 0x44
   1738c:	mov	r0, #1
   17390:	str	r0, [sp, #52]	; 0x34
   17394:	bne	173a8 <__assert_fail@plt+0x5ef4>
   17398:	ldr	r0, [r8, #76]	; 0x4c
   1739c:	cmp	r0, #0
   173a0:	movwne	r0, #1
   173a4:	str	r0, [sp, #52]	; 0x34
   173a8:	ldr	r0, [r7, #12]
   173ac:	ldr	r2, [r8, #92]	; 0x5c
   173b0:	ldr	r3, [sp, #100]	; 0x64
   173b4:	ldr	r1, [r8, #8]
   173b8:	str	lr, [sp, #168]	; 0xa8
   173bc:	str	r3, [sp, #104]	; 0x68
   173c0:	str	r2, [sp, #184]	; 0xb8
   173c4:	ubfx	r3, r0, #22, #1
   173c8:	and	r0, r0, #4194304	; 0x400000
   173cc:	ldr	r4, [sp, #76]	; 0x4c
   173d0:	str	r8, [sp, #96]	; 0x60
   173d4:	orrs	sl, lr, r0
   173d8:	strb	r3, [sp, #176]	; 0xb0
   173dc:	add	r3, sp, #104	; 0x68
   173e0:	movwne	sl, #1
   173e4:	add	r3, r3, #44	; 0x2c
   173e8:	strb	sl, [sp, #179]	; 0xb3
   173ec:	ldrb	r0, [r8, #88]	; 0x58
   173f0:	vdup.32	q8, r4
   173f4:	add	r8, r1, #1
   173f8:	vst1.32	{d16-d17}, [r3]
   173fc:	cmp	r2, r8
   17400:	movgt	r8, r2
   17404:	ubfx	r3, r0, #3, #1
   17408:	strb	r3, [sp, #178]	; 0xb2
   1740c:	ubfx	r0, r0, #2, #1
   17410:	str	r7, [sp, #64]	; 0x40
   17414:	str	r5, [sp, #92]	; 0x5c
   17418:	str	lr, [sp, #88]	; 0x58
   1741c:	strb	r0, [sp, #177]	; 0xb1
   17420:	add	r0, r4, #1
   17424:	cmp	r0, r8
   17428:	movlt	r8, r0
   1742c:	cmp	r2, #2
   17430:	blt	17464 <__assert_fail@plt+0x5fb0>
   17434:	mov	r9, #12
   17438:	cmn	r8, #-1073741823	; 0xc0000001
   1743c:	bhi	1986c <__assert_fail@plt+0x83b8>
   17440:	lsl	r1, r8, #2
   17444:	mov	r0, #0
   17448:	bl	2ac90 <__assert_fail@plt+0x197dc>
   1744c:	ldr	lr, [sp, #88]	; 0x58
   17450:	ldr	r5, [sp, #92]	; 0x5c
   17454:	cmp	r0, #0
   17458:	beq	1986c <__assert_fail@plt+0x83b8>
   1745c:	ldr	r7, [sp, #64]	; 0x40
   17460:	str	r0, [sp, #112]	; 0x70
   17464:	ldr	r4, [sp, #96]	; 0x60
   17468:	mov	r9, r7
   1746c:	mov	r7, #1
   17470:	cmp	sl, #0
   17474:	beq	1749c <__assert_fail@plt+0x5fe8>
   17478:	mov	r0, #0
   1747c:	mov	r1, r8
   17480:	mov	r7, #0
   17484:	bl	2ac90 <__assert_fail@plt+0x197dc>
   17488:	cmp	r0, #0
   1748c:	beq	19664 <__assert_fail@plt+0x81b0>
   17490:	ldr	r5, [sp, #92]	; 0x5c
   17494:	ldr	lr, [sp, #88]	; 0x58
   17498:	str	r0, [sp, #108]	; 0x6c
   1749c:	add	r1, r4, #96	; 0x60
   174a0:	str	r8, [sp, #140]	; 0x8c
   174a4:	ldr	r0, [fp, #12]
   174a8:	cmp	r7, #0
   174ac:	str	r1, [sp, #172]	; 0xac
   174b0:	ldrb	r1, [r4, #88]	; 0x58
   174b4:	ubfx	r1, r1, #4, #1
   174b8:	strb	r1, [sp, #182]	; 0xb6
   174bc:	mov	r1, #0
   174c0:	beq	174dc <__assert_fail@plt+0x6028>
   174c4:	ldr	r1, [sp, #100]	; 0x64
   174c8:	str	r1, [sp, #108]	; 0x6c
   174cc:	ldr	r1, [r4, #92]	; 0x5c
   174d0:	cmp	r1, #1
   174d4:	ldr	r1, [sp, #76]	; 0x4c
   174d8:	movwgt	r1, #0
   174dc:	str	r1, [sp, #136]	; 0x88
   174e0:	str	r1, [sp, #132]	; 0x84
   174e4:	str	r0, [sp, #160]	; 0xa0
   174e8:	str	r0, [sp, #156]	; 0x9c
   174ec:	ldrb	r0, [r9, #28]
   174f0:	lsr	r0, r0, #7
   174f4:	strb	r0, [sp, #181]	; 0xb5
   174f8:	mvn	r0, #0
   174fc:	ldr	r4, [r4, #76]	; 0x4c
   17500:	str	r0, [sp, #196]	; 0xc4
   17504:	ldr	r0, [fp, #24]
   17508:	lsl	sl, r4, #1
   1750c:	cmp	r4, #1
   17510:	str	r0, [sp, #192]	; 0xc0
   17514:	blt	17564 <__assert_fail@plt+0x60b0>
   17518:	movw	r0, #43690	; 0xaaaa
   1751c:	mov	r9, #12
   17520:	movt	r0, #2730	; 0xaaa
   17524:	cmp	sl, r0
   17528:	bhi	1986c <__assert_fail@plt+0x83b8>
   1752c:	add	r0, r4, r4, lsl #1
   17530:	lsl	r0, r0, #4
   17534:	bl	2ac60 <__assert_fail@plt+0x197ac>
   17538:	mov	r7, r0
   1753c:	str	r0, [sp, #220]	; 0xdc
   17540:	lsl	r0, r4, #3
   17544:	bl	2ac60 <__assert_fail@plt+0x197ac>
   17548:	cmp	r0, #0
   1754c:	str	r0, [sp, #236]	; 0xec
   17550:	beq	1986c <__assert_fail@plt+0x83b8>
   17554:	ldr	r5, [sp, #92]	; 0x5c
   17558:	ldr	lr, [sp, #88]	; 0x58
   1755c:	cmp	r7, #0
   17560:	beq	1986c <__assert_fail@plt+0x83b8>
   17564:	mov	r0, #1
   17568:	str	r0, [sp, #224]	; 0xe0
   1756c:	ldr	r0, [sp, #68]	; 0x44
   17570:	str	sl, [sp, #216]	; 0xd8
   17574:	str	sl, [sp, #232]	; 0xe8
   17578:	cmp	r0, #1
   1757c:	bhi	17590 <__assert_fail@plt+0x60dc>
   17580:	ldr	r0, [sp, #96]	; 0x60
   17584:	ldrb	r0, [r0, #88]	; 0x58
   17588:	tst	r0, #2
   1758c:	beq	175bc <__assert_fail@plt+0x6108>
   17590:	mov	r9, #12
   17594:	cmn	r8, #-1073741822	; 0xc0000002
   17598:	bhi	1986c <__assert_fail@plt+0x83b8>
   1759c:	mov	r0, #4
   175a0:	add	r0, r0, r8, lsl #2
   175a4:	bl	2ac60 <__assert_fail@plt+0x197ac>
   175a8:	ldr	lr, [sp, #88]	; 0x58
   175ac:	ldr	r5, [sp, #92]	; 0x5c
   175b0:	cmp	r0, #0
   175b4:	str	r0, [sp, #204]	; 0xcc
   175b8:	beq	1986c <__assert_fail@plt+0x83b8>
   175bc:	ldr	r1, [fp, #24]
   175c0:	ldr	r2, [sp, #80]	; 0x50
   175c4:	str	r6, [fp, #-200]	; 0xffffff38
   175c8:	mov	r8, #1
   175cc:	mov	r4, r6
   175d0:	mov	r0, #4
   175d4:	tst	r1, #1
   175d8:	mov	r1, #4
   175dc:	mov	r7, r2
   175e0:	movweq	r1, #6
   175e4:	cmp	r2, r6
   175e8:	str	r1, [sp, #164]	; 0xa4
   175ec:	ldr	r1, [sp, #96]	; 0x60
   175f0:	mvnlt	r8, #0
   175f4:	movlt	r7, r6
   175f8:	movlt	r4, r2
   175fc:	cmp	r5, #0
   17600:	ldr	r1, [r1, #92]	; 0x5c
   17604:	str	r1, [sp, #60]	; 0x3c
   17608:	beq	1764c <__assert_fail@plt+0x6198>
   1760c:	cmp	r1, #1
   17610:	beq	17630 <__assert_fail@plt+0x617c>
   17614:	ldr	r0, [sp, #64]	; 0x40
   17618:	ldr	r0, [r0, #12]
   1761c:	and	r0, r0, #4194304	; 0x400000
   17620:	orr	r0, lr, r0
   17624:	clz	r0, r0
   17628:	lsr	r0, r0, #5
   1762c:	lsl	r0, r0, #2
   17630:	cmp	lr, #0
   17634:	mov	r1, lr
   17638:	movwne	r1, #1
   1763c:	cmp	r2, r6
   17640:	orrge	r1, r1, #2
   17644:	orr	r0, r1, r0
   17648:	b	17650 <__assert_fail@plt+0x619c>
   1764c:	mov	r0, #8
   17650:	add	r1, sp, #104	; 0x68
   17654:	cmp	r2, r6
   17658:	sub	r0, r0, #4
   1765c:	str	r7, [sp, #48]	; 0x30
   17660:	str	r4, [sp, #44]	; 0x2c
   17664:	str	r8, [sp, #84]	; 0x54
   17668:	add	r1, r1, #32
   1766c:	str	r0, [sp, #80]	; 0x50
   17670:	str	r1, [sp, #24]
   17674:	sub	r1, fp, #200	; 0xc8
   17678:	movwlt	r1, #0
   1767c:	cmp	r1, #0
   17680:	str	r1, [sp, #36]	; 0x24
   17684:	movwne	r1, #1
   17688:	str	r1, [sp, #40]	; 0x28
   1768c:	sub	r1, fp, #192	; 0xc0
   17690:	add	r1, r1, #16
   17694:	str	r1, [sp, #32]
   17698:	b	17b48 <__assert_fail@plt+0x6694>
   1769c:	mov	r1, #0
   176a0:	sub	r0, fp, #188	; 0xbc
   176a4:	str	r6, [fp, #-192]	; 0xffffff40
   176a8:	stm	r0, {r1, r5, r8}
   176ac:	ldr	r0, [sp, #32]
   176b0:	str	r1, [r0]
   176b4:	str	r1, [r0, #4]
   176b8:	str	r1, [r0, #8]
   176bc:	add	r0, sp, #104	; 0x68
   176c0:	sub	r1, fp, #192	; 0xc0
   176c4:	bl	265e0 <__assert_fail@plt+0x1512c>
   176c8:	mov	r9, r0
   176cc:	mov	r0, #0
   176d0:	bl	2ae28 <__assert_fail@plt+0x19974>
   176d4:	cmp	r9, #0
   176d8:	bne	179d8 <__assert_fail@plt+0x6524>
   176dc:	ldr	r0, [r6]
   176e0:	mov	r7, #0
   176e4:	cmp	r0, #0
   176e8:	beq	177c8 <__assert_fail@plt+0x6314>
   176ec:	b	188a8 <__assert_fail@plt+0x73f4>
   176f0:	ldr	r1, [r7]
   176f4:	cmp	r1, #0
   176f8:	bne	187e8 <__assert_fail@plt+0x7334>
   176fc:	cmp	r3, #1
   17700:	blt	177c8 <__assert_fail@plt+0x6314>
   17704:	ldr	r0, [sp, #204]	; 0xcc
   17708:	lsl	r4, r3, #2
   1770c:	add	sl, r3, #1
   17710:	sub	r0, r0, #4
   17714:	ldr	r1, [r0, r4]
   17718:	cmp	r1, #0
   1771c:	ldrbne	r2, [r1, #52]	; 0x34
   17720:	tstne	r2, #16
   17724:	bne	1773c <__assert_fail@plt+0x6288>
   17728:	sub	sl, sl, #1
   1772c:	sub	r4, r4, #4
   17730:	cmp	sl, #2
   17734:	bge	17714 <__assert_fail@plt+0x6260>
   17738:	b	177c8 <__assert_fail@plt+0x6314>
   1773c:	sub	r5, sl, #2
   17740:	add	r9, sp, #104	; 0x68
   17744:	mov	r0, r9
   17748:	mov	r2, r5
   1774c:	bl	2172c <__assert_fail@plt+0x10278>
   17750:	mov	r8, r0
   17754:	mov	r0, r7
   17758:	mov	r1, #0
   1775c:	mov	r2, r4
   17760:	bl	113d0 <memset@plt>
   17764:	ldr	r0, [sp, #32]
   17768:	mov	r1, #0
   1776c:	str	r6, [fp, #-192]	; 0xffffff40
   17770:	str	r7, [fp, #-188]	; 0xffffff44
   17774:	str	r8, [fp, #-184]	; 0xffffff48
   17778:	str	r5, [fp, #-180]	; 0xffffff4c
   1777c:	str	r8, [sp, #56]	; 0x38
   17780:	mov	r4, r5
   17784:	str	r1, [r0]
   17788:	str	r1, [r0, #4]
   1778c:	str	r1, [r0, #8]
   17790:	mov	r0, r9
   17794:	sub	r1, fp, #192	; 0xc0
   17798:	bl	265e0 <__assert_fail@plt+0x1512c>
   1779c:	mov	r9, r0
   177a0:	mov	r0, #0
   177a4:	bl	2ae28 <__assert_fail@plt+0x19974>
   177a8:	cmp	r9, #0
   177ac:	bne	179d0 <__assert_fail@plt+0x651c>
   177b0:	ldr	r0, [r6]
   177b4:	mov	r3, r4
   177b8:	cmp	r0, #0
   177bc:	beq	176f0 <__assert_fail@plt+0x623c>
   177c0:	sub	r3, sl, #2
   177c4:	b	187e8 <__assert_fail@plt+0x7334>
   177c8:	mov	r0, r6
   177cc:	bl	2ae28 <__assert_fail@plt+0x19974>
   177d0:	mov	r0, r7
   177d4:	bl	2ae28 <__assert_fail@plt+0x19974>
   177d8:	ldr	r8, [sp, #84]	; 0x54
   177dc:	add	r0, sp, #104	; 0x68
   177e0:	bl	218d0 <__assert_fail@plt+0x1041c>
   177e4:	ldr	r0, [fp, #-200]	; 0xffffff38
   177e8:	ldr	r4, [sp, #44]	; 0x2c
   177ec:	ldr	r7, [sp, #48]	; 0x30
   177f0:	mov	r9, #1
   177f4:	add	r6, r0, r8
   177f8:	cmp	r6, r4
   177fc:	str	r6, [fp, #-200]	; 0xffffff38
   17800:	blt	1986c <__assert_fail@plt+0x83b8>
   17804:	ldr	r5, [sp, #92]	; 0x5c
   17808:	ldr	lr, [sp, #88]	; 0x58
   1780c:	cmp	r7, r6
   17810:	bge	17b48 <__assert_fail@plt+0x6694>
   17814:	b	1986c <__assert_fail@plt+0x83b8>
   17818:	ldrb	r0, [sp, #182]	; 0xb6
   1781c:	cmp	r0, #0
   17820:	bne	17a10 <__assert_fail@plt+0x655c>
   17824:	cmp	r7, #10
   17828:	bne	17970 <__assert_fail@plt+0x64bc>
   1782c:	ldrb	r3, [sp, #181]	; 0xb5
   17830:	cmp	r3, #0
   17834:	movwne	r3, #2
   17838:	tst	r3, #1
   1783c:	bne	1796c <__assert_fail@plt+0x64b8>
   17840:	cmp	r3, #0
   17844:	beq	17970 <__assert_fail@plt+0x64bc>
   17848:	ands	r1, r3, #2
   1784c:	and	r0, r3, #4
   17850:	cmpne	r0, #0
   17854:	bne	178a0 <__assert_fail@plt+0x63ec>
   17858:	cmp	r1, #0
   1785c:	bne	178b0 <__assert_fail@plt+0x63fc>
   17860:	ldr	r6, [r4, #36]	; 0x24
   17864:	cmp	r0, #0
   17868:	beq	17970 <__assert_fail@plt+0x64bc>
   1786c:	ldr	r2, [r6, #40]	; 0x28
   17870:	sub	r0, fp, #196	; 0xc4
   17874:	mov	r1, r4
   17878:	mov	r6, lr
   1787c:	bl	201bc <__assert_fail@plt+0xed08>
   17880:	mov	lr, r6
   17884:	mov	r6, r0
   17888:	cmp	r6, #0
   1788c:	bne	17d14 <__assert_fail@plt+0x6860>
   17890:	b	19664 <__assert_fail@plt+0x81b0>
   17894:	ldr	r8, [sp, #84]	; 0x54
   17898:	ldr	r1, [sp, #72]	; 0x48
   1789c:	b	18598 <__assert_fail@plt+0x70e4>
   178a0:	ldr	r6, [r4, #48]	; 0x30
   178a4:	cmp	r6, #0
   178a8:	bne	17d14 <__assert_fail@plt+0x6860>
   178ac:	b	19664 <__assert_fail@plt+0x81b0>
   178b0:	ldr	r6, [r4, #44]	; 0x2c
   178b4:	cmp	r6, #0
   178b8:	bne	17d14 <__assert_fail@plt+0x6860>
   178bc:	b	19664 <__assert_fail@plt+0x81b0>
   178c0:	mov	ip, r4
   178c4:	cmn	ip, #1
   178c8:	beq	177dc <__assert_fail@plt+0x6328>
   178cc:	b	185b0 <__assert_fail@plt+0x70fc>
   178d0:	mov	r9, r0
   178d4:	mov	r0, r7
   178d8:	bl	2ae28 <__assert_fail@plt+0x19974>
   178dc:	cmp	r9, #0
   178e0:	beq	188a8 <__assert_fail@plt+0x73f4>
   178e4:	b	179e0 <__assert_fail@plt+0x652c>
   178e8:	ldr	r8, [sp, #84]	; 0x54
   178ec:	cmn	r7, #1
   178f0:	ble	1797c <__assert_fail@plt+0x64c8>
   178f4:	mov	r0, #1
   178f8:	mov	ip, lr
   178fc:	str	r0, [sp, #56]	; 0x38
   17900:	ldr	r0, [sp, #52]	; 0x34
   17904:	cmp	r0, #0
   17908:	beq	179c0 <__assert_fail@plt+0x650c>
   1790c:	b	17d58 <__assert_fail@plt+0x68a4>
   17910:	ldr	r0, [r6, #8]
   17914:	cmp	r0, #1
   17918:	blt	17af4 <__assert_fail@plt+0x6640>
   1791c:	ldr	r4, [sp, #188]	; 0xbc
   17920:	mov	r7, #0
   17924:	b	17a58 <__assert_fail@plt+0x65a4>
   17928:	ldr	r1, [sp, #76]	; 0x4c
   1792c:	mov	r0, #0
   17930:	mov	r6, r7
   17934:	cmp	r7, r1
   17938:	ldr	r1, [sp, #100]	; 0x64
   1793c:	ldrblt	r0, [r1, r7]
   17940:	cmp	lr, #0
   17944:	ldrbne	r0, [lr, r0]
   17948:	ldrb	r0, [r5, r0]
   1794c:	cmp	r0, #0
   17950:	bne	17cb0 <__assert_fail@plt+0x67fc>
   17954:	b	19954 <__assert_fail@plt+0x84a0>
   17958:	ldr	r0, [sp, #192]	; 0xc0
   1795c:	and	r0, r0, #2
   17960:	eor	r3, r0, #10
   17964:	tst	r3, #1
   17968:	beq	17840 <__assert_fail@plt+0x638c>
   1796c:	ldr	r6, [r4, #40]	; 0x28
   17970:	cmp	r6, #0
   17974:	bne	17d14 <__assert_fail@plt+0x6860>
   17978:	b	19664 <__assert_fail@plt+0x81b0>
   1797c:	add	r0, sp, #104	; 0x68
   17980:	mov	r1, r6
   17984:	mov	r2, lr
   17988:	mov	r4, lr
   1798c:	bl	2172c <__assert_fail@plt+0x10278>
   17990:	clz	r1, r0
   17994:	cmp	r0, #0
   17998:	mov	ip, r4
   1799c:	mov	lr, r4
   179a0:	lsr	r2, r1, #5
   179a4:	ldr	r1, [sp, #52]	; 0x34
   179a8:	movwne	r0, #1
   179ac:	mvneq	ip, #0
   179b0:	str	r0, [sp, #56]	; 0x38
   179b4:	orr	r1, r1, r2
   179b8:	cmp	r1, #0
   179bc:	bne	17d58 <__assert_fail@plt+0x68a4>
   179c0:	mov	ip, lr
   179c4:	cmn	ip, #1
   179c8:	beq	177dc <__assert_fail@plt+0x6328>
   179cc:	b	185b0 <__assert_fail@plt+0x70fc>
   179d0:	str	r7, [sp, #20]
   179d4:	b	179e0 <__assert_fail@plt+0x652c>
   179d8:	mov	r0, #0
   179dc:	str	r0, [sp, #20]
   179e0:	mov	r0, r6
   179e4:	bl	2ae28 <__assert_fail@plt+0x19974>
   179e8:	ldr	r0, [sp, #20]
   179ec:	bl	2ae28 <__assert_fail@plt+0x19974>
   179f0:	ldr	r7, [sp, #68]	; 0x44
   179f4:	ldr	r6, [sp, #64]	; 0x40
   179f8:	ldr	r8, [sp, #84]	; 0x54
   179fc:	cmp	r9, #0
   17a00:	beq	188d8 <__assert_fail@plt+0x7424>
   17a04:	cmp	r9, #1
   17a08:	beq	177dc <__assert_fail@plt+0x6328>
   17a0c:	b	1986c <__assert_fail@plt+0x83b8>
   17a10:	mov	r0, r7
   17a14:	mov	r9, lr
   17a18:	bl	113b8 <iswalnum@plt>
   17a1c:	mov	lr, r9
   17a20:	cmp	r7, #95	; 0x5f
   17a24:	beq	1796c <__assert_fail@plt+0x64b8>
   17a28:	cmp	r0, #0
   17a2c:	beq	17824 <__assert_fail@plt+0x6370>
   17a30:	b	1796c <__assert_fail@plt+0x64b8>
   17a34:	ldr	r0, [sp, #236]	; 0xec
   17a38:	lsl	r1, r9, #3
   17a3c:	bl	2ac90 <__assert_fail@plt+0x197dc>
   17a40:	cmp	r0, #0
   17a44:	beq	17b40 <__assert_fail@plt+0x668c>
   17a48:	str	r0, [sp, #236]	; 0xec
   17a4c:	lsl	r0, r9, #1
   17a50:	str	r0, [sp, #232]	; 0xe8
   17a54:	b	17aa4 <__assert_fail@plt+0x65f0>
   17a58:	ldr	r1, [r6, #12]
   17a5c:	ldr	r5, [r1, r7, lsl #2]
   17a60:	ldr	r1, [r4]
   17a64:	add	r2, r1, r5, lsl #3
   17a68:	ldrb	r2, [r2, #4]
   17a6c:	cmp	r2, #8
   17a70:	bne	17ae8 <__assert_fail@plt+0x6634>
   17a74:	ldr	r1, [r1, r5, lsl #3]
   17a78:	cmp	r1, #31
   17a7c:	bgt	17ae8 <__assert_fail@plt+0x6634>
   17a80:	ldr	r2, [r4, #80]	; 0x50
   17a84:	mov	r3, #1
   17a88:	tst	r2, r3, lsl r1
   17a8c:	beq	17ae8 <__assert_fail@plt+0x6634>
   17a90:	ldr	r9, [sp, #228]	; 0xe4
   17a94:	ldr	r0, [sp, #232]	; 0xe8
   17a98:	mov	r8, lr
   17a9c:	cmp	r9, r0
   17aa0:	beq	17a34 <__assert_fail@plt+0x6580>
   17aa4:	mov	r0, #1
   17aa8:	mov	r1, #24
   17aac:	bl	2ac0c <__assert_fail@plt+0x19758>
   17ab0:	ldr	r1, [sp, #228]	; 0xe4
   17ab4:	ldr	r2, [sp, #236]	; 0xec
   17ab8:	str	r0, [r2, r1, lsl #2]
   17abc:	ldr	r0, [sp, #236]	; 0xec
   17ac0:	ldr	r0, [r0, r1, lsl #2]
   17ac4:	cmp	r0, #0
   17ac8:	beq	17b40 <__assert_fail@plt+0x668c>
   17acc:	add	r1, r1, #1
   17ad0:	str	r5, [r0, #4]
   17ad4:	mov	lr, r8
   17ad8:	str	r1, [sp, #228]	; 0xe4
   17adc:	mov	r1, #0
   17ae0:	str	r1, [r0]
   17ae4:	ldr	r0, [r6, #8]
   17ae8:	add	r7, r7, #1
   17aec:	cmp	r7, r0
   17af0:	blt	17a58 <__assert_fail@plt+0x65a4>
   17af4:	mov	sl, #0
   17af8:	str	sl, [fp, #-196]	; 0xffffff3c
   17afc:	ldrb	r0, [r6, #52]	; 0x34
   17b00:	tst	r0, #64	; 0x40
   17b04:	beq	17d38 <__assert_fail@plt+0x6884>
   17b08:	add	r1, r6, #4
   17b0c:	add	r0, sp, #104	; 0x68
   17b10:	mov	r4, lr
   17b14:	bl	21b60 <__assert_fail@plt+0x106ac>
   17b18:	mov	sl, #0
   17b1c:	mov	lr, r4
   17b20:	cmp	r0, #0
   17b24:	str	r0, [fp, #-196]	; 0xffffff3c
   17b28:	beq	17d38 <__assert_fail@plt+0x6884>
   17b2c:	ldr	r8, [sp, #84]	; 0x54
   17b30:	mov	ip, r0
   17b34:	cmn	ip, #1
   17b38:	beq	177dc <__assert_fail@plt+0x6328>
   17b3c:	b	185b0 <__assert_fail@plt+0x70fc>
   17b40:	mov	ip, #12
   17b44:	b	185b8 <__assert_fail@plt+0x7104>
   17b48:	ldr	r1, [sp, #80]	; 0x50
   17b4c:	cmp	r1, #4
   17b50:	bhi	17bc0 <__assert_fail@plt+0x670c>
   17b54:	add	r0, pc, #0
   17b58:	ldr	pc, [r0, r1, lsl #2]
   17b5c:	andeq	r7, r1, r0, ror fp
   17b60:	andeq	r7, r1, r0, ror fp
   17b64:	andeq	r7, r1, r8, asr #24
   17b68:	andeq	r7, r1, r8, ror ip
   17b6c:			; <UNDEFINED> instruction: 0x00017cb0
   17b70:	mov	r9, #1
   17b74:	cmp	r6, r4
   17b78:	blt	1986c <__assert_fail@plt+0x83b8>
   17b7c:	cmp	lr, #0
   17b80:	beq	186f8 <__assert_fail@plt+0x7244>
   17b84:	ldr	r1, [sp, #76]	; 0x4c
   17b88:	mov	r0, #0
   17b8c:	cmp	r6, r1
   17b90:	ldrlt	r0, [sp, #100]	; 0x64
   17b94:	ldrblt	r0, [r0, r6]
   17b98:	ldrb	r0, [lr, r0]
   17b9c:	ldrb	r0, [r5, r0]
   17ba0:	cmp	r0, #0
   17ba4:	bne	17cb0 <__assert_fail@plt+0x67fc>
   17ba8:	sub	r0, r6, #1
   17bac:	cmp	r6, r4
   17bb0:	mov	r6, r0
   17bb4:	str	r0, [fp, #-200]	; 0xffffff38
   17bb8:	bgt	17b88 <__assert_fail@plt+0x66d4>
   17bbc:	b	1986c <__assert_fail@plt+0x83b8>
   17bc0:	ldr	r0, [sp, #128]	; 0x80
   17bc4:	ldr	r2, [sp, #136]	; 0x88
   17bc8:	sub	r1, r6, r0
   17bcc:	cmp	r1, r2
   17bd0:	bcs	17c14 <__assert_fail@plt+0x6760>
   17bd4:	ldr	r3, [sp, #132]	; 0x84
   17bd8:	mov	r2, #0
   17bdc:	cmp	r1, r3
   17be0:	ldrcc	r2, [sp, #108]	; 0x6c
   17be4:	ldrbcc	r2, [r2, r1]
   17be8:	ldrb	r1, [r5, r2]
   17bec:	cmp	r1, #0
   17bf0:	bne	17cb0 <__assert_fail@plt+0x67fc>
   17bf4:	add	r6, r6, r8
   17bf8:	mov	r9, #1
   17bfc:	cmp	r6, r4
   17c00:	str	r6, [fp, #-200]	; 0xffffff38
   17c04:	blt	1986c <__assert_fail@plt+0x83b8>
   17c08:	cmp	r6, r7
   17c0c:	ble	17bc4 <__assert_fail@plt+0x6710>
   17c10:	b	1986c <__assert_fail@plt+0x83b8>
   17c14:	ldr	r2, [fp, #24]
   17c18:	add	r0, sp, #104	; 0x68
   17c1c:	mov	r1, r6
   17c20:	bl	20cbc <__assert_fail@plt+0xf808>
   17c24:	cmp	r0, #0
   17c28:	bne	19674 <__assert_fail@plt+0x81c0>
   17c2c:	ldr	r0, [sp, #128]	; 0x80
   17c30:	ldr	r6, [fp, #-200]	; 0xffffff38
   17c34:	ldr	r5, [sp, #92]	; 0x5c
   17c38:	ldr	r7, [sp, #48]	; 0x30
   17c3c:	ldr	r4, [sp, #44]	; 0x2c
   17c40:	sub	r1, r6, r0
   17c44:	b	17bd4 <__assert_fail@plt+0x6720>
   17c48:	ldr	r1, [sp, #100]	; 0x64
   17c4c:	cmp	r6, r7
   17c50:	bge	17ca8 <__assert_fail@plt+0x67f4>
   17c54:	ldrb	r0, [r1, r6]
   17c58:	ldrb	r0, [r5, r0]
   17c5c:	cmp	r0, #0
   17c60:	bne	17ca8 <__assert_fail@plt+0x67f4>
   17c64:	add	r6, r6, #1
   17c68:	cmp	r6, r7
   17c6c:	str	r6, [fp, #-200]	; 0xffffff38
   17c70:	blt	17c54 <__assert_fail@plt+0x67a0>
   17c74:	b	17ca8 <__assert_fail@plt+0x67f4>
   17c78:	cmp	r6, r7
   17c7c:	bge	17ca8 <__assert_fail@plt+0x67f4>
   17c80:	ldr	r1, [sp, #100]	; 0x64
   17c84:	ldrb	r0, [r1, r6]
   17c88:	ldrb	r0, [lr, r0]
   17c8c:	ldrb	r0, [r5, r0]
   17c90:	cmp	r0, #0
   17c94:	bne	17ca8 <__assert_fail@plt+0x67f4>
   17c98:	add	r6, r6, #1
   17c9c:	cmp	r6, r7
   17ca0:	str	r6, [fp, #-200]	; 0xffffff38
   17ca4:	blt	17c84 <__assert_fail@plt+0x67d0>
   17ca8:	cmp	r6, r7
   17cac:	beq	17928 <__assert_fail@plt+0x6474>
   17cb0:	ldr	r2, [fp, #24]
   17cb4:	add	r0, sp, #104	; 0x68
   17cb8:	mov	r1, r6
   17cbc:	bl	20cbc <__assert_fail@plt+0xf808>
   17cc0:	cmp	r0, #0
   17cc4:	bne	19674 <__assert_fail@plt+0x81c0>
   17cc8:	ldr	r0, [sp, #60]	; 0x3c
   17ccc:	cmp	r0, #1
   17cd0:	ldrne	r0, [sp, #132]	; 0x84
   17cd4:	cmpne	r0, #0
   17cd8:	bne	1861c <__assert_fail@plt+0x7168>
   17cdc:	mov	r0, #0
   17ce0:	str	r0, [sp, #212]	; 0xd4
   17ce4:	str	r0, [sp, #224]	; 0xe0
   17ce8:	str	r0, [sp, #208]	; 0xd0
   17cec:	str	r0, [fp, #-196]	; 0xffffff3c
   17cf0:	ldr	r4, [sp, #188]	; 0xbc
   17cf4:	ldr	lr, [sp, #144]	; 0x90
   17cf8:	ldr	r6, [r4, #36]	; 0x24
   17cfc:	ldrsb	r0, [r6, #52]	; 0x34
   17d00:	cmn	r0, #1
   17d04:	ble	18630 <__assert_fail@plt+0x717c>
   17d08:	ldr	r5, [sp, #40]	; 0x28
   17d0c:	cmp	r6, #0
   17d10:	beq	19664 <__assert_fail@plt+0x81b0>
   17d14:	ldr	r0, [sp, #204]	; 0xcc
   17d18:	mov	sl, r5
   17d1c:	cmp	r0, #0
   17d20:	beq	17d38 <__assert_fail@plt+0x6884>
   17d24:	str	r6, [r0, lr, lsl #2]
   17d28:	mov	sl, r5
   17d2c:	ldr	r0, [r4, #76]	; 0x4c
   17d30:	cmp	r0, #0
   17d34:	bne	17910 <__assert_fail@plt+0x645c>
   17d38:	ldrb	r0, [r6, #52]	; 0x34
   17d3c:	sxtb	r7, r0
   17d40:	tst	r0, #16
   17d44:	bne	178e8 <__assert_fail@plt+0x6434>
   17d48:	ldr	r8, [sp, #84]	; 0x54
   17d4c:	mov	r0, #0
   17d50:	mvn	ip, #0
   17d54:	str	r0, [sp, #56]	; 0x38
   17d58:	ldr	r4, [sp, #144]	; 0x90
   17d5c:	ldr	r0, [sp, #160]	; 0xa0
   17d60:	cmp	r0, r4
   17d64:	ble	18584 <__assert_fail@plt+0x70d0>
   17d68:	ldr	r1, [sp, #36]	; 0x24
   17d6c:	b	1845c <__assert_fail@plt+0x6fa8>
   17d70:	ldr	r0, [fp, #-196]	; 0xffffff3c
   17d74:	cmp	r0, #0
   17d78:	bne	19664 <__assert_fail@plt+0x81b0>
   17d7c:	ldr	r0, [sp, #56]	; 0x38
   17d80:	ldr	r1, [sp, #52]	; 0x34
   17d84:	clz	r0, r0
   17d88:	lsr	r0, r0, #5
   17d8c:	orr	r0, r1, r0
   17d90:	cmp	r0, #1
   17d94:	bne	17894 <__assert_fail@plt+0x63e0>
   17d98:	ldr	r0, [sp, #204]	; 0xcc
   17d9c:	cmp	r0, #0
   17da0:	beq	17894 <__assert_fail@plt+0x63e0>
   17da4:	mov	r5, lr
   17da8:	b	17e14 <__assert_fail@plt+0x6960>
   17dac:	ldr	r4, [sp, #144]	; 0x90
   17db0:	ldr	r8, [sp, #84]	; 0x54
   17db4:	cmn	r7, #1
   17db8:	bgt	17de0 <__assert_fail@plt+0x692c>
   17dbc:	add	r0, sp, #104	; 0x68
   17dc0:	mov	r1, r6
   17dc4:	mov	r2, r4
   17dc8:	mov	r9, ip
   17dcc:	mov	r5, lr
   17dd0:	bl	2172c <__assert_fail@plt+0x10278>
   17dd4:	mov	lr, r5
   17dd8:	cmp	r0, #0
   17ddc:	beq	17e7c <__assert_fail@plt+0x69c8>
   17de0:	ldr	r0, [sp, #52]	; 0x34
   17de4:	cmp	r0, #0
   17de8:	beq	178c0 <__assert_fail@plt+0x640c>
   17dec:	mov	r0, #1
   17df0:	mov	r1, #0
   17df4:	mov	ip, r4
   17df8:	str	r0, [sp, #56]	; 0x38
   17dfc:	ldr	r0, [sp, #160]	; 0xa0
   17e00:	cmp	r0, r4
   17e04:	bgt	1845c <__assert_fail@plt+0x6fa8>
   17e08:	b	18598 <__assert_fail@plt+0x70e4>
   17e0c:	ldr	r0, [sp, #204]	; 0xcc
   17e10:	mov	ip, r4
   17e14:	ldr	r2, [sp, #144]	; 0x90
   17e18:	ldr	r1, [sp, #208]	; 0xd0
   17e1c:	add	r2, r2, #1
   17e20:	sub	r3, r2, #1
   17e24:	cmp	r3, r1
   17e28:	bge	1858c <__assert_fail@plt+0x70d8>
   17e2c:	str	r2, [sp, #144]	; 0x90
   17e30:	ldr	r3, [r0, r2, lsl #2]
   17e34:	add	r2, r2, #1
   17e38:	cmp	r3, #0
   17e3c:	beq	17e20 <__assert_fail@plt+0x696c>
   17e40:	sub	r0, fp, #196	; 0xc4
   17e44:	add	r1, sp, #104	; 0x68
   17e48:	mov	r2, #0
   17e4c:	mov	r4, ip
   17e50:	bl	227a8 <__assert_fail@plt+0x112f4>
   17e54:	cmp	r0, #0
   17e58:	mov	r6, r0
   17e5c:	ldreq	r0, [fp, #-196]	; 0xffffff3c
   17e60:	cmpeq	r0, #0
   17e64:	beq	17e0c <__assert_fail@plt+0x6958>
   17e68:	cmp	r6, #0
   17e6c:	mov	ip, r4
   17e70:	mov	lr, r5
   17e74:	bne	18544 <__assert_fail@plt+0x7090>
   17e78:	b	17894 <__assert_fail@plt+0x63e0>
   17e7c:	ldr	r1, [sp, #72]	; 0x48
   17e80:	mov	ip, r9
   17e84:	ldr	r0, [sp, #160]	; 0xa0
   17e88:	cmp	r0, r4
   17e8c:	bgt	1845c <__assert_fail@plt+0x6fa8>
   17e90:	b	18598 <__assert_fail@plt+0x70e4>
   17e94:	add	r1, r4, #2
   17e98:	add	r0, sp, #104	; 0x68
   17e9c:	mov	r4, ip
   17ea0:	mov	r5, lr
   17ea4:	bl	22598 <__assert_fail@plt+0x110e4>
   17ea8:	cmp	r0, #0
   17eac:	str	r0, [fp, #-196]	; 0xffffff3c
   17eb0:	bne	19664 <__assert_fail@plt+0x81b0>
   17eb4:	ldrb	r7, [r8, #52]	; 0x34
   17eb8:	mov	lr, r5
   17ebc:	mov	ip, r4
   17ec0:	tst	r7, #32
   17ec4:	beq	1849c <__assert_fail@plt+0x6fe8>
   17ec8:	ldr	r0, [r8, #8]
   17ecc:	cmp	r0, #1
   17ed0:	blt	18304 <__assert_fail@plt+0x6e50>
   17ed4:	ldr	r0, [sp, #188]	; 0xbc
   17ed8:	mov	r6, #0
   17edc:	str	r0, [sp, #20]
   17ee0:	stmib	sp, {sl, lr}
   17ee4:	str	r8, [sp, #12]
   17ee8:	b	182c8 <__assert_fail@plt+0x6e14>
   17eec:	movw	r0, #65280	; 0xff00
   17ef0:	movt	r0, #3
   17ef4:	tst	r7, r0
   17ef8:	beq	1801c <__assert_fail@plt+0x6b68>
   17efc:	ldr	r0, [sp, #144]	; 0x90
   17f00:	cmn	r0, #1
   17f04:	ble	17f48 <__assert_fail@plt+0x6a94>
   17f08:	ldr	r1, [sp, #152]	; 0x98
   17f0c:	mov	r8, sl
   17f10:	cmp	r1, r0
   17f14:	beq	18230 <__assert_fail@plt+0x6d7c>
   17f18:	ldr	r1, [sp, #184]	; 0xb8
   17f1c:	cmp	r1, #2
   17f20:	blt	17f60 <__assert_fail@plt+0x6aac>
   17f24:	ldr	r1, [sp, #112]	; 0x70
   17f28:	mov	sl, r8
   17f2c:	ldr	r4, [r1, r0, lsl #2]
   17f30:	cmn	r4, #1
   17f34:	bne	17f9c <__assert_fail@plt+0x6ae8>
   17f38:	sub	r2, r0, #1
   17f3c:	cmp	r0, #0
   17f40:	mov	r0, r2
   17f44:	bgt	17f2c <__assert_fail@plt+0x6a78>
   17f48:	ldr	r1, [sp, #164]	; 0xa4
   17f4c:	and	r0, r1, #1
   17f50:	tst	r7, #1024	; 0x400
   17f54:	eor	r2, r0, #1
   17f58:	bne	17fd0 <__assert_fail@plt+0x6b1c>
   17f5c:	b	17fd8 <__assert_fail@plt+0x6b24>
   17f60:	ldr	r1, [sp, #108]	; 0x6c
   17f64:	ldr	r2, [sp, #172]	; 0xac
   17f68:	mov	sl, r8
   17f6c:	ldrb	r0, [r1, r0]
   17f70:	ubfx	r1, r0, #5, #3
   17f74:	and	r5, r0, #31
   17f78:	ldr	r3, [r2, r1, lsl #2]
   17f7c:	mov	r1, #1
   17f80:	mov	r2, #0
   17f84:	tst	r3, r1, lsl r5
   17f88:	bne	17fd8 <__assert_fail@plt+0x6b24>
   17f8c:	mov	r1, #0
   17f90:	cmp	r0, #10
   17f94:	beq	17fb4 <__assert_fail@plt+0x6b00>
   17f98:	b	17fc0 <__assert_fail@plt+0x6b0c>
   17f9c:	ldrb	r0, [sp, #182]	; 0xb6
   17fa0:	cmp	r0, #0
   17fa4:	bne	18264 <__assert_fail@plt+0x6db0>
   17fa8:	mov	r1, #0
   17fac:	cmp	r4, #10
   17fb0:	bne	17fc0 <__assert_fail@plt+0x6b0c>
   17fb4:	ldrb	r1, [sp, #181]	; 0xb5
   17fb8:	cmp	r1, #0
   17fbc:	movwne	r1, #2
   17fc0:	and	r0, r1, #1
   17fc4:	tst	r7, #1024	; 0x400
   17fc8:	eor	r2, r0, #1
   17fcc:	beq	17fd8 <__assert_fail@plt+0x6b24>
   17fd0:	cmp	r0, #0
   17fd4:	beq	182f0 <__assert_fail@plt+0x6e3c>
   17fd8:	ldr	r0, [sp, #20]
   17fdc:	ldr	r4, [sp, #16]
   17fe0:	cmp	r2, #0
   17fe4:	ldr	r0, [r0]
   17fe8:	add	r0, r0, r4, lsl #3
   17fec:	ldr	r0, [r0, #4]
   17ff0:	bne	17ffc <__assert_fail@plt+0x6b48>
   17ff4:	ands	r2, r0, #2048	; 0x800
   17ff8:	bne	182f0 <__assert_fail@plt+0x6e3c>
   17ffc:	tst	r1, #2
   18000:	bne	1800c <__assert_fail@plt+0x6b58>
   18004:	ands	r2, r0, #8192	; 0x2000
   18008:	bne	182f0 <__assert_fail@plt+0x6e3c>
   1800c:	tst	r1, #8
   18010:	bne	1801c <__assert_fail@plt+0x6b68>
   18014:	ands	r0, r0, #32768	; 0x8000
   18018:	bne	182f0 <__assert_fail@plt+0x6e3c>
   1801c:	ldr	r3, [sp, #144]	; 0x90
   18020:	ldr	r0, [sp, #20]
   18024:	ldr	r1, [sp, #16]
   18028:	add	r2, sp, #104	; 0x68
   1802c:	mov	r5, ip
   18030:	bl	24310 <__assert_fail@plt+0x12e5c>
   18034:	ldmib	sp, {sl, lr}
   18038:	mov	ip, r5
   1803c:	cmp	r0, #0
   18040:	beq	182f0 <__assert_fail@plt+0x6e3c>
   18044:	ldr	r1, [sp, #224]	; 0xe0
   18048:	cmp	r1, r0
   1804c:	movlt	r1, r0
   18050:	str	r1, [sp, #224]	; 0xe0
   18054:	ldr	r3, [sp, #144]	; 0x90
   18058:	ldr	r2, [sp, #140]	; 0x8c
   1805c:	ldr	r1, [sp, #152]	; 0x98
   18060:	ldr	r4, [sp, #208]	; 0xd0
   18064:	add	r3, r3, r0
   18068:	cmp	r2, r3
   1806c:	mov	r8, r3
   18070:	cmple	r2, r1
   18074:	blt	18088 <__assert_fail@plt+0x6bd4>
   18078:	ldr	r0, [sp, #132]	; 0x84
   1807c:	cmp	r0, r3
   18080:	cmple	r0, r1
   18084:	bge	180a0 <__assert_fail@plt+0x6bec>
   18088:	add	r1, r3, #1
   1808c:	add	r0, sp, #104	; 0x68
   18090:	bl	22598 <__assert_fail@plt+0x110e4>
   18094:	mov	r3, r8
   18098:	cmp	r0, #0
   1809c:	bne	183e4 <__assert_fail@plt+0x6f30>
   180a0:	cmp	r3, r4
   180a4:	ble	180cc <__assert_fail@plt+0x6c18>
   180a8:	sub	r0, r3, r4
   180ac:	mov	r1, #0
   180b0:	lsl	r2, r0, #2
   180b4:	ldr	r0, [sp, #204]	; 0xcc
   180b8:	add	r0, r0, r4, lsl #2
   180bc:	add	r0, r0, #4
   180c0:	bl	113d0 <memset@plt>
   180c4:	mov	r3, r8
   180c8:	str	r8, [sp, #208]	; 0xd0
   180cc:	mov	r0, #0
   180d0:	ldr	r1, [sp, #20]
   180d4:	ldr	r2, [sp, #16]
   180d8:	str	r0, [fp, #-48]	; 0xffffffd0
   180dc:	ldr	r0, [sp, #204]	; 0xcc
   180e0:	ldr	r7, [r0, r3, lsl #2]
   180e4:	ldr	r0, [r1, #12]
   180e8:	ldr	r1, [r1, #24]
   180ec:	ldr	r0, [r0, r2, lsl #2]
   180f0:	cmp	r7, #0
   180f4:	add	r0, r0, r0, lsl #1
   180f8:	add	r2, r1, r0, lsl #2
   180fc:	beq	18120 <__assert_fail@plt+0x6c6c>
   18100:	ldr	r1, [r7, #40]	; 0x28
   18104:	sub	r0, fp, #192	; 0xc0
   18108:	bl	229fc <__assert_fail@plt+0x11548>
   1810c:	mov	r3, r8
   18110:	cmp	r0, #0
   18114:	str	r0, [fp, #-48]	; 0xffffffd0
   18118:	beq	18130 <__assert_fail@plt+0x6c7c>
   1811c:	b	183e8 <__assert_fail@plt+0x6f34>
   18120:	vldr	d16, [r2]
   18124:	ldr	r0, [r2, #8]
   18128:	str	r0, [fp, #-184]	; 0xffffff48
   1812c:	vstr	d16, [fp, #-192]	; 0xffffff40
   18130:	cmp	r3, #0
   18134:	ble	18178 <__assert_fail@plt+0x6cc4>
   18138:	ldr	r1, [sp, #152]	; 0x98
   1813c:	sub	r0, r3, #1
   18140:	cmp	r1, r0
   18144:	beq	18254 <__assert_fail@plt+0x6da0>
   18148:	ldr	r1, [sp, #184]	; 0xb8
   1814c:	cmp	r1, #2
   18150:	blt	18180 <__assert_fail@plt+0x6ccc>
   18154:	ldr	r0, [sp, #112]	; 0x70
   18158:	mov	r1, r3
   1815c:	sub	r0, r0, #4
   18160:	ldr	r4, [r0, r1, lsl #2]
   18164:	cmn	r4, #1
   18168:	bne	181b4 <__assert_fail@plt+0x6d00>
   1816c:	sub	r1, r1, #1
   18170:	cmp	r1, #0
   18174:	bgt	18160 <__assert_fail@plt+0x6cac>
   18178:	ldr	r3, [sp, #164]	; 0xa4
   1817c:	b	181d8 <__assert_fail@plt+0x6d24>
   18180:	ldr	r1, [sp, #108]	; 0x6c
   18184:	ldr	r2, [sp, #172]	; 0xac
   18188:	mov	r3, #1
   1818c:	ldrb	r0, [r1, r0]
   18190:	ubfx	r1, r0, #5, #3
   18194:	ldr	r1, [r2, r1, lsl #2]
   18198:	and	r2, r0, #31
   1819c:	tst	r1, r3, lsl r2
   181a0:	bne	181d8 <__assert_fail@plt+0x6d24>
   181a4:	mov	r3, #0
   181a8:	cmp	r0, #10
   181ac:	beq	181cc <__assert_fail@plt+0x6d18>
   181b0:	b	181d8 <__assert_fail@plt+0x6d24>
   181b4:	ldrb	r0, [sp, #182]	; 0xb6
   181b8:	cmp	r0, #0
   181bc:	bne	18298 <__assert_fail@plt+0x6de4>
   181c0:	mov	r3, #0
   181c4:	cmp	r4, #10
   181c8:	bne	181d8 <__assert_fail@plt+0x6d24>
   181cc:	ldrb	r3, [sp, #181]	; 0xb5
   181d0:	cmp	r3, #0
   181d4:	movwne	r3, #2
   181d8:	ldr	r1, [sp, #20]
   181dc:	sub	r0, fp, #48	; 0x30
   181e0:	sub	r2, fp, #192	; 0xc0
   181e4:	bl	201bc <__assert_fail@plt+0xed08>
   181e8:	ldr	r1, [sp, #204]	; 0xcc
   181ec:	mov	r2, r8
   181f0:	cmp	r7, #0
   181f4:	str	r0, [r1, r8, lsl #2]
   181f8:	beq	18208 <__assert_fail@plt+0x6d54>
   181fc:	ldr	r0, [fp, #-184]	; 0xffffff48
   18200:	bl	2ae28 <__assert_fail@plt+0x19974>
   18204:	mov	r2, r8
   18208:	ldr	r0, [sp, #204]	; 0xcc
   1820c:	mov	ip, r5
   18210:	ldr	r0, [r0, r2, lsl #2]
   18214:	ldmib	sp, {sl, lr}
   18218:	cmp	r0, #0
   1821c:	bne	182f0 <__assert_fail@plt+0x6e3c>
   18220:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18224:	cmp	r0, #0
   18228:	beq	182f0 <__assert_fail@plt+0x6e3c>
   1822c:	b	183f0 <__assert_fail@plt+0x6f3c>
   18230:	ldr	r0, [sp, #192]	; 0xc0
   18234:	mov	sl, r8
   18238:	and	r0, r0, #2
   1823c:	eor	r1, r0, #10
   18240:	and	r0, r1, #1
   18244:	tst	r7, #1024	; 0x400
   18248:	eor	r2, r0, #1
   1824c:	bne	17fd0 <__assert_fail@plt+0x6b1c>
   18250:	b	17fd8 <__assert_fail@plt+0x6b24>
   18254:	ldr	r0, [sp, #192]	; 0xc0
   18258:	and	r0, r0, #2
   1825c:	eor	r3, r0, #10
   18260:	b	181d8 <__assert_fail@plt+0x6d24>
   18264:	mov	r0, r4
   18268:	mov	r5, ip
   1826c:	bl	113b8 <iswalnum@plt>
   18270:	mov	r1, #1
   18274:	mov	r2, #0
   18278:	cmp	r4, #95	; 0x5f
   1827c:	beq	182b8 <__assert_fail@plt+0x6e04>
   18280:	ldr	lr, [sp, #8]
   18284:	cmp	r0, #0
   18288:	mov	ip, r5
   1828c:	mov	sl, r8
   18290:	beq	17fa8 <__assert_fail@plt+0x6af4>
   18294:	b	17fd8 <__assert_fail@plt+0x6b24>
   18298:	mov	r0, r4
   1829c:	bl	113b8 <iswalnum@plt>
   182a0:	mov	r3, #1
   182a4:	cmp	r4, #95	; 0x5f
   182a8:	beq	181d8 <__assert_fail@plt+0x6d24>
   182ac:	cmp	r0, #0
   182b0:	beq	181c0 <__assert_fail@plt+0x6d0c>
   182b4:	b	181d8 <__assert_fail@plt+0x6d24>
   182b8:	ldr	lr, [sp, #8]
   182bc:	mov	ip, r5
   182c0:	mov	sl, r8
   182c4:	b	17fd8 <__assert_fail@plt+0x6b24>
   182c8:	ldr	r0, [r8, #12]
   182cc:	ldr	r2, [r0, r6, lsl #2]
   182d0:	ldr	r0, [sp, #20]
   182d4:	ldr	r0, [r0]
   182d8:	mov	r1, r2
   182dc:	str	r2, [sp, #16]
   182e0:	add	r0, r0, r2, lsl #3
   182e4:	ldr	r7, [r0, #4]
   182e8:	tst	r7, #1048576	; 0x100000
   182ec:	bne	17eec <__assert_fail@plt+0x6a38>
   182f0:	ldr	r8, [sp, #12]
   182f4:	add	r6, r6, #1
   182f8:	ldr	r0, [r8, #8]
   182fc:	cmp	r6, r0
   18300:	blt	182c8 <__assert_fail@plt+0x6e14>
   18304:	mov	r0, #0
   18308:	str	r0, [fp, #-196]	; 0xffffff3c
   1830c:	b	1849c <__assert_fail@plt+0x6fe8>
   18310:	ldr	r0, [sp, #144]	; 0x90
   18314:	mov	r5, r8
   18318:	cmp	r0, #0
   1831c:	ble	18364 <__assert_fail@plt+0x6eb0>
   18320:	ldr	r2, [sp, #152]	; 0x98
   18324:	sub	r1, r0, #1
   18328:	mov	r8, sl
   1832c:	cmp	r2, r1
   18330:	beq	1840c <__assert_fail@plt+0x6f58>
   18334:	ldr	r2, [sp, #184]	; 0xb8
   18338:	cmp	r2, #2
   1833c:	blt	1836c <__assert_fail@plt+0x6eb8>
   18340:	ldr	r1, [sp, #112]	; 0x70
   18344:	mov	sl, r8
   18348:	sub	r1, r1, #4
   1834c:	ldr	r4, [r1, r0, lsl #2]
   18350:	cmn	r4, #1
   18354:	bne	183a4 <__assert_fail@plt+0x6ef0>
   18358:	sub	r0, r0, #1
   1835c:	cmp	r0, #0
   18360:	bgt	1834c <__assert_fail@plt+0x6e98>
   18364:	ldr	r1, [sp, #164]	; 0xa4
   18368:	b	183c8 <__assert_fail@plt+0x6f14>
   1836c:	ldr	r0, [sp, #108]	; 0x6c
   18370:	ldr	r2, [sp, #172]	; 0xac
   18374:	mov	sl, r8
   18378:	ldrb	r0, [r0, r1]
   1837c:	ubfx	r1, r0, #5, #3
   18380:	and	r3, r0, #31
   18384:	ldr	r2, [r2, r1, lsl #2]
   18388:	mov	r1, #1
   1838c:	tst	r2, r1, lsl r3
   18390:	bne	183c8 <__assert_fail@plt+0x6f14>
   18394:	mov	r1, #0
   18398:	cmp	r0, #10
   1839c:	beq	183bc <__assert_fail@plt+0x6f08>
   183a0:	b	183c8 <__assert_fail@plt+0x6f14>
   183a4:	ldrb	r0, [sp, #182]	; 0xb6
   183a8:	cmp	r0, #0
   183ac:	bne	18418 <__assert_fail@plt+0x6f64>
   183b0:	mov	r1, #0
   183b4:	cmp	r4, #10
   183b8:	bne	183c8 <__assert_fail@plt+0x6f14>
   183bc:	ldrb	r1, [sp, #181]	; 0xb5
   183c0:	cmp	r1, #0
   183c4:	movwne	r1, #2
   183c8:	bfi	r6, r1, #8, #1
   183cc:	mov	r8, r5
   183d0:	ldr	r6, [r7, r6, lsl #2]
   183d4:	ldr	r0, [sp, #204]	; 0xcc
   183d8:	cmp	r0, #0
   183dc:	bne	18518 <__assert_fail@plt+0x7064>
   183e0:	b	1853c <__assert_fail@plt+0x7088>
   183e4:	str	r0, [fp, #-48]	; 0xffffffd0
   183e8:	ldmib	sp, {sl, lr}
   183ec:	mov	ip, r5
   183f0:	ldr	r8, [sp, #12]
   183f4:	str	r0, [fp, #-196]	; 0xffffff3c
   183f8:	mov	r6, #0
   183fc:	ldr	r0, [sp, #204]	; 0xcc
   18400:	cmp	r0, #0
   18404:	bne	18518 <__assert_fail@plt+0x7064>
   18408:	b	1853c <__assert_fail@plt+0x7088>
   1840c:	mov	r1, #10
   18410:	mov	sl, r8
   18414:	b	183c8 <__assert_fail@plt+0x6f14>
   18418:	mov	r0, r4
   1841c:	str	lr, [sp, #8]
   18420:	str	ip, [sp, #20]
   18424:	bl	113b8 <iswalnum@plt>
   18428:	mov	r1, #1
   1842c:	cmp	r4, #95	; 0x5f
   18430:	beq	1844c <__assert_fail@plt+0x6f98>
   18434:	ldr	ip, [sp, #20]
   18438:	ldr	lr, [sp, #8]
   1843c:	cmp	r0, #0
   18440:	mov	sl, r8
   18444:	beq	183b0 <__assert_fail@plt+0x6efc>
   18448:	b	183c8 <__assert_fail@plt+0x6f14>
   1844c:	ldr	ip, [sp, #20]
   18450:	ldr	lr, [sp, #8]
   18454:	mov	sl, r8
   18458:	b	183c8 <__assert_fail@plt+0x6f14>
   1845c:	str	r1, [sp, #72]	; 0x48
   18460:	ldr	r1, [sp, #140]	; 0x8c
   18464:	ldr	r0, [sp, #152]	; 0x98
   18468:	add	r9, r4, #1
   1846c:	mov	r8, r6
   18470:	cmp	r9, r1
   18474:	blt	18480 <__assert_fail@plt+0x6fcc>
   18478:	cmp	r1, r0
   1847c:	blt	17e94 <__assert_fail@plt+0x69e0>
   18480:	ldr	r1, [sp, #132]	; 0x84
   18484:	cmp	r9, r1
   18488:	blt	18494 <__assert_fail@plt+0x6fe0>
   1848c:	cmp	r1, r0
   18490:	blt	17e94 <__assert_fail@plt+0x69e0>
   18494:	tst	r7, #32
   18498:	bne	17ec8 <__assert_fail@plt+0x6a14>
   1849c:	ldr	r1, [sp, #144]	; 0x90
   184a0:	ldr	r0, [sp, #108]	; 0x6c
   184a4:	add	r2, r1, #1
   184a8:	str	r2, [sp, #144]	; 0x90
   184ac:	ldrb	r6, [r0, r1]
   184b0:	ldr	r0, [r8, #44]	; 0x2c
   184b4:	cmp	r0, #0
   184b8:	bne	18508 <__assert_fail@plt+0x7054>
   184bc:	ldr	r7, [r8, #48]	; 0x30
   184c0:	cmp	r7, #0
   184c4:	bne	18310 <__assert_fail@plt+0x6e5c>
   184c8:	ldr	r0, [sp, #188]	; 0xbc
   184cc:	mov	r1, r8
   184d0:	mov	r4, ip
   184d4:	mov	r5, lr
   184d8:	bl	24858 <__assert_fail@plt+0x133a4>
   184dc:	mov	lr, r5
   184e0:	mov	ip, r4
   184e4:	cmp	r0, #0
   184e8:	bne	184b0 <__assert_fail@plt+0x6ffc>
   184ec:	mov	r0, #12
   184f0:	mov	r6, #0
   184f4:	str	r0, [fp, #-196]	; 0xffffff3c
   184f8:	ldr	r0, [sp, #204]	; 0xcc
   184fc:	cmp	r0, #0
   18500:	bne	18518 <__assert_fail@plt+0x7064>
   18504:	b	1853c <__assert_fail@plt+0x7088>
   18508:	ldr	r6, [r0, r6, lsl #2]
   1850c:	ldr	r0, [sp, #204]	; 0xcc
   18510:	cmp	r0, #0
   18514:	beq	1853c <__assert_fail@plt+0x7088>
   18518:	sub	r0, fp, #196	; 0xc4
   1851c:	add	r1, sp, #104	; 0x68
   18520:	mov	r2, r6
   18524:	mov	r4, ip
   18528:	mov	r5, lr
   1852c:	bl	227a8 <__assert_fail@plt+0x112f4>
   18530:	mov	lr, r5
   18534:	mov	ip, r4
   18538:	mov	r6, r0
   1853c:	cmp	r6, #0
   18540:	beq	17d70 <__assert_fail@plt+0x68bc>
   18544:	sub	r0, r8, r6
   18548:	clz	r0, r0
   1854c:	lsr	r0, r0, #5
   18550:	ands	sl, sl, r0
   18554:	ldrb	r0, [r6, #52]	; 0x34
   18558:	movne	lr, r9
   1855c:	sxtb	r7, r0
   18560:	tst	r0, #16
   18564:	bne	17dac <__assert_fail@plt+0x68f8>
   18568:	ldr	r4, [sp, #144]	; 0x90
   1856c:	ldr	r8, [sp, #84]	; 0x54
   18570:	ldr	r1, [sp, #72]	; 0x48
   18574:	ldr	r0, [sp, #160]	; 0xa0
   18578:	cmp	r0, r4
   1857c:	bgt	1845c <__assert_fail@plt+0x6fa8>
   18580:	b	18598 <__assert_fail@plt+0x70e4>
   18584:	ldr	r1, [sp, #36]	; 0x24
   18588:	b	18598 <__assert_fail@plt+0x70e4>
   1858c:	ldr	r8, [sp, #84]	; 0x54
   18590:	ldr	r1, [sp, #72]	; 0x48
   18594:	mov	lr, r5
   18598:	cmp	r1, #0
   1859c:	ldrne	r0, [r1]
   185a0:	addne	r0, r0, lr
   185a4:	strne	r0, [r1]
   185a8:	cmn	ip, #1
   185ac:	beq	177dc <__assert_fail@plt+0x6328>
   185b0:	cmn	ip, #2
   185b4:	beq	19664 <__assert_fail@plt+0x81b0>
   185b8:	ldr	r7, [sp, #68]	; 0x44
   185bc:	ldr	r6, [sp, #64]	; 0x40
   185c0:	mov	r8, ip
   185c4:	str	ip, [sp, #196]	; 0xc4
   185c8:	cmp	r7, #2
   185cc:	bcc	1868c <__assert_fail@plt+0x71d8>
   185d0:	ldrb	r0, [r6, #28]
   185d4:	ands	r0, r0, #16
   185d8:	bne	1868c <__assert_fail@plt+0x71d8>
   185dc:	ldr	r0, [sp, #204]	; 0xcc
   185e0:	mov	r2, ip
   185e4:	ldr	r1, [r0, ip, lsl #2]
   185e8:	add	r0, sp, #104	; 0x68
   185ec:	bl	2172c <__assert_fail@plt+0x10278>
   185f0:	ldr	sl, [sp, #96]	; 0x60
   185f4:	str	r0, [sp, #200]	; 0xc8
   185f8:	mov	r5, r0
   185fc:	ldrb	r0, [sl, #88]	; 0x58
   18600:	tst	r0, #1
   18604:	bne	18730 <__assert_fail@plt+0x727c>
   18608:	ldr	r0, [sl, #76]	; 0x4c
   1860c:	mov	r1, r8
   18610:	cmp	r0, #0
   18614:	bne	186bc <__assert_fail@plt+0x7208>
   18618:	b	188d8 <__assert_fail@plt+0x7424>
   1861c:	ldr	r0, [sp, #112]	; 0x70
   18620:	ldr	r0, [r0]
   18624:	cmn	r0, #1
   18628:	bne	17cdc <__assert_fail@plt+0x6828>
   1862c:	b	177e4 <__assert_fail@plt+0x6330>
   18630:	ldr	r5, [sp, #40]	; 0x28
   18634:	cmp	lr, #0
   18638:	ble	1867c <__assert_fail@plt+0x71c8>
   1863c:	ldr	r1, [sp, #152]	; 0x98
   18640:	sub	r0, lr, #1
   18644:	cmp	r1, r0
   18648:	beq	17958 <__assert_fail@plt+0x64a4>
   1864c:	ldr	r1, [sp, #184]	; 0xb8
   18650:	cmp	r1, #2
   18654:	blt	186c8 <__assert_fail@plt+0x7214>
   18658:	ldr	r0, [sp, #112]	; 0x70
   1865c:	mov	r1, lr
   18660:	sub	r0, r0, #4
   18664:	ldr	r7, [r0, r1, lsl #2]
   18668:	cmn	r7, #1
   1866c:	bne	17818 <__assert_fail@plt+0x6364>
   18670:	sub	r1, r1, #1
   18674:	cmp	r1, #0
   18678:	bgt	18664 <__assert_fail@plt+0x71b0>
   1867c:	ldr	r3, [sp, #164]	; 0xa4
   18680:	tst	r3, #1
   18684:	beq	17840 <__assert_fail@plt+0x638c>
   18688:	b	1796c <__assert_fail@plt+0x64b8>
   1868c:	ldr	sl, [sp, #96]	; 0x60
   18690:	ldr	r0, [sl, #76]	; 0x4c
   18694:	cmp	r0, #0
   18698:	beq	188d8 <__assert_fail@plt+0x7424>
   1869c:	ldr	r0, [sp, #204]	; 0xcc
   186a0:	mov	r2, ip
   186a4:	ldr	r1, [r0, ip, lsl #2]
   186a8:	add	r0, sp, #104	; 0x68
   186ac:	bl	2172c <__assert_fail@plt+0x10278>
   186b0:	mov	r1, r8
   186b4:	mov	r5, r0
   186b8:	str	r0, [sp, #200]	; 0xc8
   186bc:	cmn	r1, #-1073741823	; 0xc0000001
   186c0:	bcc	1873c <__assert_fail@plt+0x7288>
   186c4:	b	19664 <__assert_fail@plt+0x81b0>
   186c8:	ldr	r1, [sp, #108]	; 0x6c
   186cc:	ldr	r2, [sp, #172]	; 0xac
   186d0:	mov	r3, #1
   186d4:	ldrb	r0, [r1, r0]
   186d8:	ubfx	r1, r0, #5, #3
   186dc:	ldr	r1, [r2, r1, lsl #2]
   186e0:	and	r2, r0, #31
   186e4:	tst	r1, r3, lsl r2
   186e8:	bne	1796c <__assert_fail@plt+0x64b8>
   186ec:	cmp	r0, #10
   186f0:	beq	1782c <__assert_fail@plt+0x6378>
   186f4:	b	17970 <__assert_fail@plt+0x64bc>
   186f8:	ldr	r1, [sp, #76]	; 0x4c
   186fc:	mov	r0, #0
   18700:	cmp	r6, r1
   18704:	ldrlt	r0, [sp, #100]	; 0x64
   18708:	ldrblt	r0, [r0, r6]
   1870c:	ldrb	r0, [r5, r0]
   18710:	cmp	r0, #0
   18714:	bne	17cb0 <__assert_fail@plt+0x67fc>
   18718:	sub	r0, r6, #1
   1871c:	cmp	r6, r4
   18720:	mov	r6, r0
   18724:	str	r0, [fp, #-200]	; 0xffffff38
   18728:	bgt	186fc <__assert_fail@plt+0x7248>
   1872c:	b	1986c <__assert_fail@plt+0x83b8>
   18730:	mov	r1, r8
   18734:	cmn	r1, #-1073741823	; 0xc0000001
   18738:	bcs	19664 <__assert_fail@plt+0x81b0>
   1873c:	ldr	r0, [sp, #188]	; 0xbc
   18740:	str	r0, [sp, #72]	; 0x48
   18744:	mov	r0, #4
   18748:	add	r4, r0, r1, lsl #2
   1874c:	mov	r0, r4
   18750:	bl	2ac60 <__assert_fail@plt+0x197ac>
   18754:	mov	r6, r0
   18758:	cmp	r0, #0
   1875c:	beq	198cc <__assert_fail@plt+0x8418>
   18760:	ldr	r0, [sp, #72]	; 0x48
   18764:	str	r5, [sp, #56]	; 0x38
   18768:	ldr	r0, [r0, #76]	; 0x4c
   1876c:	cmp	r0, #0
   18770:	beq	1769c <__assert_fail@plt+0x61e8>
   18774:	mov	r0, r4
   18778:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1877c:	cmp	r0, #0
   18780:	beq	198cc <__assert_fail@plt+0x8418>
   18784:	mov	r1, #0
   18788:	mov	r2, r4
   1878c:	mov	r7, r0
   18790:	bl	113d0 <memset@plt>
   18794:	ldr	r0, [sp, #32]
   18798:	mov	r1, #0
   1879c:	str	r6, [fp, #-192]	; 0xffffff40
   187a0:	str	r7, [fp, #-188]	; 0xffffff44
   187a4:	str	r5, [fp, #-184]	; 0xffffff48
   187a8:	str	r8, [fp, #-180]	; 0xffffff4c
   187ac:	str	r1, [r0]
   187b0:	str	r1, [r0, #4]
   187b4:	str	r1, [r0, #8]
   187b8:	add	r0, sp, #104	; 0x68
   187bc:	sub	r1, fp, #192	; 0xc0
   187c0:	bl	265e0 <__assert_fail@plt+0x1512c>
   187c4:	mov	r9, r0
   187c8:	mov	r0, #0
   187cc:	bl	2ae28 <__assert_fail@plt+0x19974>
   187d0:	cmp	r9, #0
   187d4:	bne	179d0 <__assert_fail@plt+0x651c>
   187d8:	ldr	r0, [r6]
   187dc:	mov	r3, r8
   187e0:	cmp	r0, #0
   187e4:	beq	176f0 <__assert_fail@plt+0x623c>
   187e8:	mov	r1, #0
   187ec:	cmp	r3, #0
   187f0:	mov	r9, #0
   187f4:	mov	r8, r3
   187f8:	str	r1, [sp, #20]
   187fc:	blt	18898 <__assert_fail@plt+0x73e4>
   18800:	mov	r5, #0
   18804:	ldr	r2, [r7, r5, lsl #2]
   18808:	cmp	r0, #0
   1880c:	bne	18838 <__assert_fail@plt+0x7384>
   18810:	str	r2, [r6, r5, lsl #2]
   18814:	cmp	r5, r3
   18818:	bge	18894 <__assert_fail@plt+0x73e0>
   1881c:	add	r0, r6, r5, lsl #2
   18820:	add	r1, r5, #1
   18824:	ldr	r0, [r0, #4]
   18828:	mov	r5, r1
   1882c:	ldr	r2, [r7, r5, lsl #2]
   18830:	cmp	r0, #0
   18834:	beq	18810 <__assert_fail@plt+0x735c>
   18838:	cmp	r2, #0
   1883c:	beq	1888c <__assert_fail@plt+0x73d8>
   18840:	sub	sl, fp, #48	; 0x30
   18844:	add	r1, r0, #4
   18848:	add	r2, r2, #4
   1884c:	mov	r0, sl
   18850:	bl	229fc <__assert_fail@plt+0x11548>
   18854:	cmp	r0, #0
   18858:	str	r0, [fp, #-196]	; 0xffffff3c
   1885c:	bne	178d0 <__assert_fail@plt+0x641c>
   18860:	ldr	r1, [sp, #72]	; 0x48
   18864:	sub	r0, fp, #196	; 0xc4
   18868:	mov	r2, sl
   1886c:	bl	24070 <__assert_fail@plt+0x12bbc>
   18870:	str	r0, [r6, r5, lsl #2]
   18874:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18878:	bl	2ae28 <__assert_fail@plt+0x19974>
   1887c:	ldr	r9, [fp, #-196]	; 0xffffff3c
   18880:	mov	r3, r8
   18884:	cmp	r9, #0
   18888:	bne	18898 <__assert_fail@plt+0x73e4>
   1888c:	cmp	r5, r3
   18890:	blt	1881c <__assert_fail@plt+0x7368>
   18894:	mov	r9, #0
   18898:	mov	r0, r7
   1889c:	bl	2ae28 <__assert_fail@plt+0x19974>
   188a0:	cmp	r9, #0
   188a4:	bne	179e0 <__assert_fail@plt+0x652c>
   188a8:	ldr	r0, [sp, #204]	; 0xcc
   188ac:	bl	2ae28 <__assert_fail@plt+0x19974>
   188b0:	ldr	r0, [sp, #56]	; 0x38
   188b4:	str	r0, [sp, #200]	; 0xc8
   188b8:	mov	r0, #0
   188bc:	str	r6, [sp, #204]	; 0xcc
   188c0:	str	r8, [sp, #196]	; 0xc4
   188c4:	bl	2ae28 <__assert_fail@plt+0x19974>
   188c8:	mov	r0, #0
   188cc:	bl	2ae28 <__assert_fail@plt+0x19974>
   188d0:	ldr	r7, [sp, #68]	; 0x44
   188d4:	ldr	r6, [sp, #64]	; 0x40
   188d8:	cmp	r7, #0
   188dc:	beq	19868 <__assert_fail@plt+0x83b4>
   188e0:	ldr	r1, [fp, #16]
   188e4:	ldr	r5, [fp, #20]
   188e8:	cmp	r7, #1
   188ec:	beq	1890c <__assert_fail@plt+0x7458>
   188f0:	ldr	r0, [sp, #28]
   188f4:	mvn	r0, r0
   188f8:	add	r0, r0, r1
   188fc:	mov	r1, #255	; 0xff
   18900:	lsl	r2, r0, #3
   18904:	add	r0, r5, #8
   18908:	bl	113d0 <memset@plt>
   1890c:	ldr	r1, [sp, #196]	; 0xc4
   18910:	mov	r0, #0
   18914:	cmp	r7, #2
   18918:	sub	r4, fp, #48	; 0x30
   1891c:	stm	r5, {r0, r1}
   18920:	bcc	197a0 <__assert_fail@plt+0x82ec>
   18924:	ldrb	r0, [r6, #28]
   18928:	ands	r0, r0, #16
   1892c:	bne	197a0 <__assert_fail@plt+0x82ec>
   18930:	ldr	r0, [sp, #96]	; 0x60
   18934:	ldrb	r1, [r0, #88]	; 0x58
   18938:	mov	r0, #0
   1893c:	tst	r1, #1
   18940:	mov	r1, #0
   18944:	beq	1895c <__assert_fail@plt+0x74a8>
   18948:	ldr	r1, [sp, #96]	; 0x60
   1894c:	ldr	r2, [r1, #76]	; 0x4c
   18950:	mov	r1, #0
   18954:	cmp	r2, #0
   18958:	movwgt	r1, #1
   1895c:	movw	r2, #49664	; 0xc200
   18960:	ldr	r6, [r6]
   18964:	cmp	r1, #0
   18968:	mov	r8, #0
   1896c:	movt	r2, #2
   18970:	vldr	d16, [r2]
   18974:	ldr	r2, [r2, #8]
   18978:	str	r2, [fp, #-40]	; 0xffffffd8
   1897c:	mov	r2, #16
   18980:	vstr	d16, [fp, #-48]	; 0xffffffd0
   18984:	str	r2, [fp, #-188]	; 0xffffff44
   18988:	sub	r2, fp, #192	; 0xc0
   1898c:	str	r0, [fp, #-192]	; 0xffffff40
   18990:	add	r9, r2, #12
   18994:	str	r9, [fp, #-184]	; 0xffffff48
   18998:	beq	189b8 <__assert_fail@plt+0x7504>
   1899c:	mov	r0, #48	; 0x30
   189a0:	bl	2ac60 <__assert_fail@plt+0x197ac>
   189a4:	cmp	r0, #0
   189a8:	str	r0, [fp, #-40]	; 0xffffffd8
   189ac:	beq	19664 <__assert_fail@plt+0x81b0>
   189b0:	ldr	r0, [fp, #-192]	; 0xffffff40
   189b4:	mov	r8, r4
   189b8:	ldr	r4, [r6, #72]	; 0x48
   189bc:	cmp	r0, r7
   189c0:	bcs	18a98 <__assert_fail@plt+0x75e4>
   189c4:	sub	r0, fp, #192	; 0xc0
   189c8:	mov	r1, r7
   189cc:	mov	r2, r9
   189d0:	mov	r3, #8
   189d4:	bl	2ad68 <__assert_fail@plt+0x198b4>
   189d8:	cmp	r0, #0
   189dc:	bne	18a9c <__assert_fail@plt+0x75e8>
   189e0:	ldr	r0, [fp, #-184]	; 0xffffff48
   189e4:	mov	r4, r9
   189e8:	cmp	r0, r9
   189ec:	beq	189f4 <__assert_fail@plt+0x7540>
   189f0:	bl	2ae28 <__assert_fail@plt+0x19974>
   189f4:	mov	r0, #16
   189f8:	mov	r9, #12
   189fc:	cmp	r8, #0
   18a00:	str	r0, [fp, #-188]	; 0xffffff44
   18a04:	mov	r0, #0
   18a08:	str	r0, [fp, #-192]	; 0xffffff40
   18a0c:	str	r4, [fp, #-184]	; 0xffffff48
   18a10:	beq	1986c <__assert_fail@plt+0x83b8>
   18a14:	ldr	r1, [r8]
   18a18:	ldr	r0, [r8, #8]
   18a1c:	cmp	r1, #1
   18a20:	blt	19704 <__assert_fail@plt+0x8250>
   18a24:	mov	r5, #0
   18a28:	mov	r6, #0
   18a2c:	add	r0, r0, r5
   18a30:	ldr	r0, [r0, #20]
   18a34:	bl	2ae28 <__assert_fail@plt+0x19974>
   18a38:	ldr	r0, [r8, #8]
   18a3c:	add	r0, r0, r5
   18a40:	ldr	r0, [r0, #8]
   18a44:	bl	2ae28 <__assert_fail@plt+0x19974>
   18a48:	ldr	r1, [r8]
   18a4c:	ldr	r0, [r8, #8]
   18a50:	add	r6, r6, #1
   18a54:	add	r5, r5, #24
   18a58:	cmp	r6, r1
   18a5c:	blt	18a2c <__assert_fail@plt+0x7578>
   18a60:	b	19704 <__assert_fail@plt+0x8250>
   18a64:	ldr	r1, [r3, #8]
   18a68:	cmp	r1, #0
   18a6c:	beq	18a7c <__assert_fail@plt+0x75c8>
   18a70:	ldrsb	r1, [r7, #28]
   18a74:	cmp	r1, #0
   18a78:	blt	17378 <__assert_fail@plt+0x5ec4>
   18a7c:	mov	r1, #0
   18a80:	cmp	r6, #0
   18a84:	beq	1965c <__assert_fail@plt+0x81a8>
   18a88:	cmp	ip, #0
   18a8c:	mov	r6, #0
   18a90:	bne	198c0 <__assert_fail@plt+0x840c>
   18a94:	b	1737c <__assert_fail@plt+0x5ec8>
   18a98:	str	r7, [fp, #-192]	; 0xffffff40
   18a9c:	ldr	r0, [fp, #-184]	; 0xffffff48
   18aa0:	lsl	r2, r7, #3
   18aa4:	mov	r1, r5
   18aa8:	str	r2, [sp, #76]	; 0x4c
   18aac:	str	r0, [sp, #80]	; 0x50
   18ab0:	bl	1125c <memcpy@plt>
   18ab4:	ldr	r3, [r5]
   18ab8:	ldr	r0, [r5, #4]
   18abc:	mov	sl, #0
   18ac0:	cmp	r3, r0
   18ac4:	ble	18b50 <__assert_fail@plt+0x769c>
   18ac8:	mov	r0, sl
   18acc:	bl	2ae28 <__assert_fail@plt+0x19974>
   18ad0:	ldr	r0, [fp, #-184]	; 0xffffff48
   18ad4:	cmp	r0, r9
   18ad8:	beq	18ae0 <__assert_fail@plt+0x762c>
   18adc:	bl	2ae28 <__assert_fail@plt+0x19974>
   18ae0:	mov	r0, #16
   18ae4:	cmp	r8, #0
   18ae8:	str	r0, [fp, #-188]	; 0xffffff44
   18aec:	mov	r0, #0
   18af0:	str	r0, [fp, #-192]	; 0xffffff40
   18af4:	str	r9, [fp, #-184]	; 0xffffff48
   18af8:	beq	197a0 <__assert_fail@plt+0x82ec>
   18afc:	ldr	r1, [r8]
   18b00:	ldr	r0, [r8, #8]
   18b04:	mov	r6, r5
   18b08:	cmp	r1, #1
   18b0c:	blt	19798 <__assert_fail@plt+0x82e4>
   18b10:	mov	r4, #0
   18b14:	mov	r5, #0
   18b18:	add	r0, r0, r4
   18b1c:	ldr	r0, [r0, #20]
   18b20:	bl	2ae28 <__assert_fail@plt+0x19974>
   18b24:	ldr	r0, [r8, #8]
   18b28:	add	r0, r0, r4
   18b2c:	ldr	r0, [r0, #8]
   18b30:	bl	2ae28 <__assert_fail@plt+0x19974>
   18b34:	ldr	r1, [r8]
   18b38:	ldr	r0, [r8, #8]
   18b3c:	add	r5, r5, #1
   18b40:	add	r4, r4, #24
   18b44:	cmp	r5, r1
   18b48:	blt	18b18 <__assert_fail@plt+0x7664>
   18b4c:	b	19798 <__assert_fail@plt+0x82e4>
   18b50:	lsl	r0, r7, #4
   18b54:	mov	lr, #1
   18b58:	mov	sl, #0
   18b5c:	str	r6, [sp, #64]	; 0x40
   18b60:	str	r0, [sp, #56]	; 0x38
   18b64:	mov	r0, #0
   18b68:	str	r0, [sp, #72]	; 0x48
   18b6c:	mov	r0, #0
   18b70:	str	r0, [sp, #92]	; 0x5c
   18b74:	ldr	r0, [r6]
   18b78:	add	r1, r0, r4, lsl #3
   18b7c:	ldr	r1, [r1, #4]
   18b80:	uxtb	r2, r1
   18b84:	cmp	r2, #9
   18b88:	beq	18bb8 <__assert_fail@plt+0x7704>
   18b8c:	cmp	r2, #8
   18b90:	bne	18c28 <__assert_fail@plt+0x7774>
   18b94:	ldr	r0, [r0, r4, lsl #3]
   18b98:	add	r0, r0, #1
   18b9c:	cmp	r0, r7
   18ba0:	bge	18c28 <__assert_fail@plt+0x7774>
   18ba4:	mov	r1, r5
   18ba8:	str	r3, [r1, r0, lsl #3]!
   18bac:	mvn	r0, #0
   18bb0:	str	r0, [r1, #4]
   18bb4:	b	18c28 <__assert_fail@plt+0x7774>
   18bb8:	ldr	r0, [r0, r4, lsl #3]
   18bbc:	add	r0, r0, #1
   18bc0:	cmp	r0, r7
   18bc4:	bge	18c28 <__assert_fail@plt+0x7774>
   18bc8:	ldr	r2, [r5, r0, lsl #3]
   18bcc:	cmp	r2, r3
   18bd0:	bge	18be8 <__assert_fail@plt+0x7734>
   18bd4:	add	r0, r5, r0, lsl #3
   18bd8:	mov	r1, r5
   18bdc:	str	r3, [r0, #4]
   18be0:	ldr	r0, [sp, #80]	; 0x50
   18be4:	b	18c08 <__assert_fail@plt+0x7754>
   18be8:	tst	r1, #524288	; 0x80000
   18bec:	beq	18c20 <__assert_fail@plt+0x776c>
   18bf0:	ldr	r1, [sp, #80]	; 0x50
   18bf4:	ldr	r1, [r1, r0, lsl #3]
   18bf8:	cmn	r1, #1
   18bfc:	beq	18c20 <__assert_fail@plt+0x776c>
   18c00:	ldr	r1, [sp, #80]	; 0x50
   18c04:	mov	r0, r5
   18c08:	ldr	r2, [sp, #76]	; 0x4c
   18c0c:	mov	r6, r3
   18c10:	bl	1125c <memcpy@plt>
   18c14:	mov	r3, r6
   18c18:	mov	lr, #1
   18c1c:	b	18c28 <__assert_fail@plt+0x7774>
   18c20:	add	r0, r5, r0, lsl #3
   18c24:	str	r3, [r0, #4]
   18c28:	ldr	r0, [r5, #4]
   18c2c:	cmp	r3, r0
   18c30:	ldreq	r0, [sp, #200]	; 0xc8
   18c34:	cmpeq	r4, r0
   18c38:	beq	18c98 <__assert_fail@plt+0x77e4>
   18c3c:	cmp	r8, #0
   18c40:	beq	18d70 <__assert_fail@plt+0x78bc>
   18c44:	ldr	r0, [sp, #92]	; 0x5c
   18c48:	cmp	r0, #1
   18c4c:	blt	18d70 <__assert_fail@plt+0x78bc>
   18c50:	mov	r6, r3
   18c54:	subs	r1, r0, #1
   18c58:	beq	18c84 <__assert_fail@plt+0x77d0>
   18c5c:	mov	r0, #0
   18c60:	add	r2, r0, r1
   18c64:	lsr	r3, r2, #1
   18c68:	ldr	r7, [sl, r3, lsl #2]
   18c6c:	cmp	r7, r4
   18c70:	movge	r1, r3
   18c74:	addlt	r0, lr, r2, lsr #1
   18c78:	cmp	r0, r1
   18c7c:	bcc	18c60 <__assert_fail@plt+0x77ac>
   18c80:	b	18c88 <__assert_fail@plt+0x77d4>
   18c84:	mov	r0, #0
   18c88:	ldr	r0, [sl, r0, lsl #2]
   18c8c:	ldr	r7, [sp, #68]	; 0x44
   18c90:	cmp	r0, r4
   18c94:	bne	18d6c <__assert_fail@plt+0x78b8>
   18c98:	cmp	r8, #0
   18c9c:	beq	19714 <__assert_fail@plt+0x8260>
   18ca0:	mov	r0, #0
   18ca4:	ldr	r1, [r5, r0, lsl #3]
   18ca8:	cmp	r1, #0
   18cac:	blt	18cc0 <__assert_fail@plt+0x780c>
   18cb0:	add	r1, r5, r0, lsl #3
   18cb4:	ldr	r1, [r1, #4]
   18cb8:	cmn	r1, #1
   18cbc:	beq	18cd0 <__assert_fail@plt+0x781c>
   18cc0:	add	r0, r0, #1
   18cc4:	cmp	r0, r7
   18cc8:	bcc	18ca4 <__assert_fail@plt+0x77f0>
   18ccc:	b	19714 <__assert_fail@plt+0x8260>
   18cd0:	ldr	r0, [r8]
   18cd4:	cmp	r0, #0
   18cd8:	beq	19714 <__assert_fail@plt+0x8260>
   18cdc:	sub	r1, r0, #1
   18ce0:	mov	r0, r5
   18ce4:	str	r9, [sp, #60]	; 0x3c
   18ce8:	ldr	r6, [sp, #76]	; 0x4c
   18cec:	str	r1, [r8]
   18cf0:	add	r5, r1, r1, lsl #1
   18cf4:	ldr	r4, [r8, #8]
   18cf8:	mov	r2, r6
   18cfc:	ldr	r9, [r4, r5, lsl #3]!
   18d00:	ldr	r1, [r4, #8]
   18d04:	bl	1125c <memcpy@plt>
   18d08:	ldr	r0, [r4, #8]
   18d0c:	mov	r2, r6
   18d10:	add	r1, r0, r7, lsl #3
   18d14:	ldr	r0, [sp, #80]	; 0x50
   18d18:	bl	1125c <memcpy@plt>
   18d1c:	mov	r0, sl
   18d20:	bl	2ae28 <__assert_fail@plt+0x19974>
   18d24:	ldr	r0, [r8, #8]
   18d28:	add	r0, r0, r5, lsl #3
   18d2c:	ldr	r0, [r0, #8]
   18d30:	bl	2ae28 <__assert_fail@plt+0x19974>
   18d34:	ldr	r0, [r8, #8]
   18d38:	add	r0, r0, r5, lsl #3
   18d3c:	ldr	r4, [r0, #4]
   18d40:	ldr	sl, [r0, #20]
   18d44:	cmn	r4, #1
   18d48:	ble	1970c <__assert_fail@plt+0x8258>
   18d4c:	ldr	r1, [r0, #12]
   18d50:	ldr	r0, [r0, #16]
   18d54:	mov	r3, r9
   18d58:	ldr	r9, [sp, #60]	; 0x3c
   18d5c:	mov	lr, #1
   18d60:	str	r1, [sp, #72]	; 0x48
   18d64:	str	r0, [sp, #92]	; 0x5c
   18d68:	b	18d70 <__assert_fail@plt+0x78bc>
   18d6c:	mov	r3, r6
   18d70:	ldr	r5, [sp, #188]	; 0xbc
   18d74:	str	r3, [sp, #84]	; 0x54
   18d78:	ldr	r0, [r5]
   18d7c:	add	r1, r0, r4, lsl #3
   18d80:	ldr	r1, [r1, #4]
   18d84:	tst	r1, #8
   18d88:	bne	18e48 <__assert_fail@plt+0x7994>
   18d8c:	tst	r1, #1048576	; 0x100000
   18d90:	str	sl, [sp, #88]	; 0x58
   18d94:	bne	18ecc <__assert_fail@plt+0x7a18>
   18d98:	uxtb	r1, r1
   18d9c:	cmp	r1, #4
   18da0:	bne	18ef0 <__assert_fail@plt+0x7a3c>
   18da4:	ldr	r0, [r0, r4, lsl #3]
   18da8:	mov	r6, #0
   18dac:	add	r0, r0, #1
   18db0:	cmp	r0, r7
   18db4:	ldrlt	r1, [fp, #20]
   18db8:	ldrlt	r2, [r1, r0, lsl #3]!
   18dbc:	ldrlt	r1, [r1, #4]
   18dc0:	sublt	r6, r1, r2
   18dc4:	cmp	r8, #0
   18dc8:	beq	191a0 <__assert_fail@plt+0x7cec>
   18dcc:	cmp	r0, r7
   18dd0:	bge	18ff4 <__assert_fail@plt+0x7b40>
   18dd4:	ldr	r2, [fp, #20]
   18dd8:	ldr	r1, [r2, r0, lsl #3]
   18ddc:	cmn	r1, #1
   18de0:	beq	18ff4 <__assert_fail@plt+0x7b40>
   18de4:	add	r0, r2, r0, lsl #3
   18de8:	ldr	r0, [r0, #4]
   18dec:	cmn	r0, #1
   18df0:	beq	18ff4 <__assert_fail@plt+0x7b40>
   18df4:	cmp	r6, #0
   18df8:	beq	191d0 <__assert_fail@plt+0x7d1c>
   18dfc:	ldr	r0, [sp, #132]	; 0x84
   18e00:	sub	r0, r0, r3
   18e04:	cmp	r0, r6
   18e08:	blt	18ff4 <__assert_fail@plt+0x7b40>
   18e0c:	ldr	r2, [sp, #108]	; 0x6c
   18e10:	str	r9, [sp, #60]	; 0x3c
   18e14:	mov	r9, r3
   18e18:	add	r0, r2, r1
   18e1c:	add	r1, r2, r3
   18e20:	mov	r2, r6
   18e24:	bl	11298 <memcmp@plt>
   18e28:	cmp	r0, #0
   18e2c:	beq	19460 <__assert_fail@plt+0x7fac>
   18e30:	ldr	sl, [sp, #60]	; 0x3c
   18e34:	ldr	r0, [r8]
   18e38:	mov	r5, #0
   18e3c:	cmp	r0, #0
   18e40:	bne	19008 <__assert_fail@plt+0x7b54>
   18e44:	b	1966c <__assert_fail@plt+0x81b8>
   18e48:	ldr	r0, [sp, #204]	; 0xcc
   18e4c:	ldr	r5, [r5, #20]
   18e50:	ldr	r6, [r0, r3, lsl #2]
   18e54:	ldr	r3, [sp, #92]	; 0x5c
   18e58:	cmp	r3, #1
   18e5c:	blt	18ea8 <__assert_fail@plt+0x79f4>
   18e60:	mov	r0, #0
   18e64:	subs	r1, r3, #1
   18e68:	beq	18e8c <__assert_fail@plt+0x79d8>
   18e6c:	add	r2, r0, r1
   18e70:	lsr	r3, r2, #1
   18e74:	ldr	r7, [sl, r3, lsl #2]
   18e78:	cmp	r7, r4
   18e7c:	movge	r1, r3
   18e80:	addlt	r0, lr, r2, lsr #1
   18e84:	cmp	r0, r1
   18e88:	bcc	18e6c <__assert_fail@plt+0x79b8>
   18e8c:	ldr	r0, [sl, r0, lsl #2]
   18e90:	ldr	r7, [sp, #68]	; 0x44
   18e94:	ldr	r3, [sp, #92]	; 0x5c
   18e98:	cmp	r0, r4
   18e9c:	bne	18ea8 <__assert_fail@plt+0x79f4>
   18ea0:	str	sl, [sp, #88]	; 0x58
   18ea4:	b	18fd0 <__assert_fail@plt+0x7b1c>
   18ea8:	ldr	r0, [sp, #72]	; 0x48
   18eac:	cmp	r0, #0
   18eb0:	beq	18fac <__assert_fail@plt+0x7af8>
   18eb4:	cmp	r3, #0
   18eb8:	str	sl, [sp, #88]	; 0x58
   18ebc:	bne	19488 <__assert_fail@plt+0x7fd4>
   18ec0:	str	r4, [sl]
   18ec4:	mov	r3, #1
   18ec8:	b	18fd0 <__assert_fail@plt+0x7b1c>
   18ecc:	mov	r0, r5
   18ed0:	mov	r1, r4
   18ed4:	add	r2, sp, #104	; 0x68
   18ed8:	bl	24310 <__assert_fail@plt+0x12e5c>
   18edc:	mov	lr, #1
   18ee0:	mov	r1, r0
   18ee4:	ldr	r3, [sp, #84]	; 0x54
   18ee8:	cmp	r1, #0
   18eec:	bne	18f18 <__assert_fail@plt+0x7a64>
   18ef0:	ldr	r0, [r5]
   18ef4:	mov	r2, r3
   18ef8:	add	r1, r0, r4, lsl #3
   18efc:	add	r0, sp, #104	; 0x68
   18f00:	bl	24628 <__assert_fail@plt+0x13174>
   18f04:	ldr	r3, [sp, #84]	; 0x54
   18f08:	mov	lr, #1
   18f0c:	mov	r1, #1
   18f10:	cmp	r0, #0
   18f14:	beq	18fec <__assert_fail@plt+0x7b38>
   18f18:	ldr	r0, [r5, #12]
   18f1c:	add	r3, r1, r3
   18f20:	cmp	r8, #0
   18f24:	ldr	r6, [r0, r4, lsl #2]
   18f28:	beq	191b4 <__assert_fail@plt+0x7d00>
   18f2c:	ldr	r0, [sp, #196]	; 0xc4
   18f30:	cmp	r3, r0
   18f34:	bgt	18ff4 <__assert_fail@plt+0x7b40>
   18f38:	ldr	r0, [sp, #204]	; 0xcc
   18f3c:	ldr	r0, [r0, r3, lsl #2]
   18f40:	cmp	r0, #0
   18f44:	beq	18ff4 <__assert_fail@plt+0x7b40>
   18f48:	ldr	r1, [r0, #8]
   18f4c:	cmp	r1, #1
   18f50:	blt	18ff4 <__assert_fail@plt+0x7b40>
   18f54:	ldr	r0, [r0, #12]
   18f58:	mov	r2, #0
   18f5c:	mov	r4, r3
   18f60:	subs	r1, r1, #1
   18f64:	str	r2, [sp, #92]	; 0x5c
   18f68:	mov	r2, #0
   18f6c:	beq	18f94 <__assert_fail@plt+0x7ae0>
   18f70:	mov	r2, #0
   18f74:	add	r3, r2, r1
   18f78:	lsr	r7, r3, #1
   18f7c:	ldr	r5, [r0, r7, lsl #2]
   18f80:	cmp	r5, r6
   18f84:	movge	r1, r7
   18f88:	addlt	r2, lr, r3, lsr #1
   18f8c:	cmp	r2, r1
   18f90:	bcc	18f74 <__assert_fail@plt+0x7ac0>
   18f94:	ldr	r0, [r0, r2, lsl #2]
   18f98:	ldr	r7, [sp, #68]	; 0x44
   18f9c:	mov	r3, r4
   18fa0:	cmp	r0, r6
   18fa4:	bne	18fec <__assert_fail@plt+0x7b38>
   18fa8:	b	19438 <__assert_fail@plt+0x7f84>
   18fac:	mov	r0, #4
   18fb0:	bl	2ac60 <__assert_fail@plt+0x197ac>
   18fb4:	cmp	r0, #0
   18fb8:	beq	1995c <__assert_fail@plt+0x84a8>
   18fbc:	str	r0, [sp, #88]	; 0x58
   18fc0:	str	r4, [r0]
   18fc4:	mov	r0, #1
   18fc8:	mov	r3, #1
   18fcc:	str	r0, [sp, #72]	; 0x48
   18fd0:	add	r0, r4, r4, lsl #1
   18fd4:	add	r1, r5, r0, lsl #2
   18fd8:	ldr	sl, [r1, #4]
   18fdc:	cmp	sl, #1
   18fe0:	ldrge	r2, [r6, #8]
   18fe4:	subsge	r2, r2, #1
   18fe8:	bge	190b4 <__assert_fail@plt+0x7c00>
   18fec:	cmp	r8, #0
   18ff0:	beq	1967c <__assert_fail@plt+0x81c8>
   18ff4:	mov	sl, r9
   18ff8:	ldr	r0, [r8]
   18ffc:	mov	r5, #0
   19000:	cmp	r0, #0
   19004:	beq	1966c <__assert_fail@plt+0x81b8>
   19008:	sub	r0, r0, #1
   1900c:	ldr	r9, [sp, #76]	; 0x4c
   19010:	str	r0, [r8]
   19014:	add	r6, r0, r0, lsl #1
   19018:	ldr	r4, [r8, #8]
   1901c:	mov	r2, r9
   19020:	ldr	r0, [r4, r6, lsl #3]!
   19024:	str	r0, [sp, #84]	; 0x54
   19028:	ldr	r1, [r4, #8]
   1902c:	ldr	r0, [fp, #20]
   19030:	bl	1125c <memcpy@plt>
   19034:	ldr	r0, [r4, #8]
   19038:	mov	r2, r9
   1903c:	add	r1, r0, r7, lsl #3
   19040:	ldr	r0, [sp, #80]	; 0x50
   19044:	bl	1125c <memcpy@plt>
   19048:	ldr	r0, [sp, #88]	; 0x58
   1904c:	bl	2ae28 <__assert_fail@plt+0x19974>
   19050:	ldr	r0, [r8, #8]
   19054:	add	r0, r0, r6, lsl #3
   19058:	ldr	r0, [r0, #8]
   1905c:	bl	2ae28 <__assert_fail@plt+0x19974>
   19060:	ldr	r0, [r8, #8]
   19064:	add	r0, r0, r6, lsl #3
   19068:	ldr	r4, [r0, #4]
   1906c:	ldr	r1, [r0, #20]
   19070:	cmn	r4, #1
   19074:	str	r1, [sp, #88]	; 0x58
   19078:	ble	1966c <__assert_fail@plt+0x81b8>
   1907c:	ldr	r1, [r0, #12]
   19080:	ldr	r0, [r0, #16]
   19084:	mov	r9, sl
   19088:	ldr	r5, [fp, #20]
   1908c:	ldr	sl, [sp, #88]	; 0x58
   19090:	ldr	r3, [sp, #84]	; 0x54
   19094:	mov	lr, #1
   19098:	str	r1, [sp, #72]	; 0x48
   1909c:	str	r0, [sp, #92]	; 0x5c
   190a0:	ldr	r0, [r5, #4]
   190a4:	ldr	r6, [sp, #64]	; 0x40
   190a8:	cmp	r3, r0
   190ac:	ble	18b74 <__assert_fail@plt+0x76c0>
   190b0:	b	18ac8 <__assert_fail@plt+0x7614>
   190b4:	str	r3, [sp, #92]	; 0x5c
   190b8:	ldr	r0, [r1, #8]
   190bc:	ldr	r3, [r6, #12]
   190c0:	cmp	r2, #0
   190c4:	str	r0, [sp, #100]	; 0x64
   190c8:	beq	19158 <__assert_fail@plt+0x7ca4>
   190cc:	mov	r7, #0
   190d0:	mvn	r5, #0
   190d4:	str	r9, [sp, #60]	; 0x3c
   190d8:	ldr	r0, [sp, #100]	; 0x64
   190dc:	mov	lr, r2
   190e0:	mov	r6, #0
   190e4:	mov	r9, #1
   190e8:	ldr	r4, [r0, r7, lsl #2]
   190ec:	add	r1, r6, r2
   190f0:	lsr	r0, r1, #1
   190f4:	ldr	ip, [r3, r0, lsl #2]
   190f8:	cmp	ip, r4
   190fc:	movge	r2, r0
   19100:	addlt	r6, r9, r1, lsr #1
   19104:	cmp	r6, r2
   19108:	bcc	190ec <__assert_fail@plt+0x7c38>
   1910c:	ldr	r0, [r3, r6, lsl #2]
   19110:	cmp	r0, r4
   19114:	bne	19128 <__assert_fail@plt+0x7c74>
   19118:	cmn	r5, #1
   1911c:	mov	r6, r5
   19120:	mov	r5, r4
   19124:	bne	19200 <__assert_fail@plt+0x7d4c>
   19128:	add	r7, r7, #1
   1912c:	mov	r2, lr
   19130:	cmp	r7, sl
   19134:	blt	190d8 <__assert_fail@plt+0x7c24>
   19138:	ldr	r7, [sp, #68]	; 0x44
   1913c:	ldr	r9, [sp, #60]	; 0x3c
   19140:	ldr	r3, [sp, #84]	; 0x54
   19144:	mov	r6, r5
   19148:	mov	lr, #1
   1914c:	cmn	r6, #1
   19150:	bgt	19440 <__assert_fail@plt+0x7f8c>
   19154:	b	191c4 <__assert_fail@plt+0x7d10>
   19158:	ldr	r4, [r3]
   1915c:	mov	r2, #0
   19160:	mvn	r6, #0
   19164:	ldr	r0, [sp, #100]	; 0x64
   19168:	ldr	r3, [r0, r2, lsl #2]
   1916c:	cmp	r4, r3
   19170:	bne	19184 <__assert_fail@plt+0x7cd0>
   19174:	cmn	r6, #1
   19178:	mov	r3, r4
   1917c:	beq	19188 <__assert_fail@plt+0x7cd4>
   19180:	b	191fc <__assert_fail@plt+0x7d48>
   19184:	mov	r3, r6
   19188:	add	r2, r2, #1
   1918c:	mov	r6, r3
   19190:	cmp	r2, sl
   19194:	blt	19164 <__assert_fail@plt+0x7cb0>
   19198:	mov	r6, r3
   1919c:	b	19430 <__assert_fail@plt+0x7f7c>
   191a0:	cmp	r6, #0
   191a4:	beq	191d0 <__assert_fail@plt+0x7d1c>
   191a8:	ldr	r0, [r5, #12]
   191ac:	add	r3, r6, r3
   191b0:	ldr	r6, [r0, r4, lsl #2]
   191b4:	mov	r0, #0
   191b8:	str	r0, [sp, #92]	; 0x5c
   191bc:	cmn	r6, #1
   191c0:	bgt	19440 <__assert_fail@plt+0x7f8c>
   191c4:	cmn	r6, #2
   191c8:	bne	18fec <__assert_fail@plt+0x7b38>
   191cc:	b	19964 <__assert_fail@plt+0x84b0>
   191d0:	ldr	r0, [sp, #72]	; 0x48
   191d4:	str	r6, [sp, #100]	; 0x64
   191d8:	cmp	r0, #0
   191dc:	beq	1936c <__assert_fail@plt+0x7eb8>
   191e0:	ldr	r1, [sp, #92]	; 0x5c
   191e4:	cmp	r1, #0
   191e8:	bne	19574 <__assert_fail@plt+0x80c0>
   191ec:	mov	r0, #1
   191f0:	str	r4, [sl]
   191f4:	str	r0, [sp, #92]	; 0x5c
   191f8:	b	1939c <__assert_fail@plt+0x7ee8>
   191fc:	str	r9, [sp, #60]	; 0x3c
   19200:	ldr	r0, [sp, #92]	; 0x5c
   19204:	ldr	r5, [sp, #88]	; 0x58
   19208:	ldr	r9, [sp, #60]	; 0x3c
   1920c:	mov	lr, #1
   19210:	cmp	r0, #1
   19214:	blt	19274 <__assert_fail@plt+0x7dc0>
   19218:	ldr	r0, [sp, #92]	; 0x5c
   1921c:	subs	r1, r0, #1
   19220:	beq	1924c <__assert_fail@plt+0x7d98>
   19224:	mov	r0, #0
   19228:	add	r2, r0, r1
   1922c:	lsr	r3, r2, #1
   19230:	ldr	r7, [r5, r3, lsl #2]
   19234:	cmp	r7, r6
   19238:	movge	r1, r3
   1923c:	addlt	r0, lr, r2, lsr #1
   19240:	cmp	r0, r1
   19244:	bcc	19228 <__assert_fail@plt+0x7d74>
   19248:	b	19250 <__assert_fail@plt+0x7d9c>
   1924c:	mov	r0, #0
   19250:	ldr	r0, [r5, r0, lsl #2]
   19254:	cmp	r0, r6
   19258:	bne	19274 <__assert_fail@plt+0x7dc0>
   1925c:	ldr	r7, [sp, #68]	; 0x44
   19260:	ldr	r3, [sp, #84]	; 0x54
   19264:	mov	r6, r4
   19268:	cmn	r6, #1
   1926c:	bgt	19440 <__assert_fail@plt+0x7f8c>
   19270:	b	191c4 <__assert_fail@plt+0x7d10>
   19274:	ldr	r7, [sp, #68]	; 0x44
   19278:	ldr	r3, [sp, #84]	; 0x54
   1927c:	cmp	r8, #0
   19280:	beq	19438 <__assert_fail@plt+0x7f84>
   19284:	ldr	r5, [r8]
   19288:	ldr	r0, [r8, #4]
   1928c:	add	r1, r5, #1
   19290:	cmp	r1, r0
   19294:	str	r1, [r8]
   19298:	bne	192cc <__assert_fail@plt+0x7e18>
   1929c:	ldr	r0, [r8, #8]
   192a0:	add	r1, r1, r1, lsl #1
   192a4:	lsl	r1, r1, #4
   192a8:	bl	2ac90 <__assert_fail@plt+0x197dc>
   192ac:	cmp	r0, #0
   192b0:	beq	19964 <__assert_fail@plt+0x84b0>
   192b4:	str	r0, [r8, #8]
   192b8:	ldr	r3, [sp, #84]	; 0x54
   192bc:	ldr	r1, [r8, #4]
   192c0:	lsl	r1, r1, #1
   192c4:	str	r1, [r8, #4]
   192c8:	b	192d0 <__assert_fail@plt+0x7e1c>
   192cc:	ldr	r0, [r8, #8]
   192d0:	add	r5, r5, r5, lsl #1
   192d4:	str	r3, [r0, r5, lsl #3]!
   192d8:	str	r4, [r0, #4]
   192dc:	ldr	r0, [sp, #56]	; 0x38
   192e0:	bl	2ac60 <__assert_fail@plt+0x197ac>
   192e4:	ldr	r1, [r8, #8]
   192e8:	cmp	r0, #0
   192ec:	add	r4, r1, r5, lsl #3
   192f0:	str	r0, [r4, #8]!
   192f4:	beq	19964 <__assert_fail@plt+0x84b0>
   192f8:	ldr	sl, [sp, #76]	; 0x4c
   192fc:	ldr	r1, [fp, #20]
   19300:	mov	r2, sl
   19304:	bl	1125c <memcpy@plt>
   19308:	ldr	r0, [r4]
   1930c:	ldr	r1, [sp, #80]	; 0x50
   19310:	mov	r2, sl
   19314:	add	r0, r0, r7, lsl #3
   19318:	bl	1125c <memcpy@plt>
   1931c:	ldr	r0, [r8, #8]
   19320:	add	r5, r0, r5, lsl #3
   19324:	ldr	r0, [sp, #92]	; 0x5c
   19328:	mov	r7, r5
   1932c:	str	r0, [r7, #16]!
   19330:	cmp	r0, #1
   19334:	sub	sl, r7, #4
   19338:	blt	1941c <__assert_fail@plt+0x7f68>
   1933c:	lsl	r4, r0, #2
   19340:	str	r0, [sl]
   19344:	mov	r0, r4
   19348:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1934c:	cmp	r0, #0
   19350:	str	r0, [r5, #20]
   19354:	beq	199ec <__assert_fail@plt+0x8538>
   19358:	ldr	r1, [sp, #88]	; 0x58
   1935c:	mov	r2, r4
   19360:	bl	1125c <memcpy@plt>
   19364:	ldr	r7, [sp, #68]	; 0x44
   19368:	b	19430 <__assert_fail@plt+0x7f7c>
   1936c:	mov	r0, #4
   19370:	bl	2ac60 <__assert_fail@plt+0x197ac>
   19374:	cmp	r0, #0
   19378:	beq	1995c <__assert_fail@plt+0x84a8>
   1937c:	mov	sl, r0
   19380:	str	r4, [r0]
   19384:	mov	r0, #1
   19388:	str	r0, [sp, #92]	; 0x5c
   1938c:	mov	r0, #1
   19390:	str	r0, [sp, #72]	; 0x48
   19394:	ldr	r3, [sp, #84]	; 0x54
   19398:	mov	lr, #1
   1939c:	ldr	r0, [sp, #204]	; 0xcc
   193a0:	str	sl, [sp, #88]	; 0x58
   193a4:	ldr	r0, [r0, r3, lsl #2]
   193a8:	ldr	r1, [r0, #8]
   193ac:	cmp	r1, #1
   193b0:	blt	18ef0 <__assert_fail@plt+0x7a3c>
   193b4:	ldr	r2, [r5, #20]
   193b8:	add	r3, r4, r4, lsl #1
   193bc:	ldr	ip, [r0, #12]
   193c0:	add	r2, r2, r3, lsl #2
   193c4:	ldr	r2, [r2, #8]
   193c8:	ldr	r6, [r2]
   193cc:	subs	r2, r1, #1
   193d0:	mov	r1, #0
   193d4:	beq	193f8 <__assert_fail@plt+0x7f44>
   193d8:	add	r3, r1, r2
   193dc:	lsr	r7, r3, #1
   193e0:	ldr	r0, [ip, r7, lsl #2]
   193e4:	cmp	r0, r6
   193e8:	movge	r2, r7
   193ec:	addlt	r1, lr, r3, lsr #1
   193f0:	cmp	r1, r2
   193f4:	bcc	193d8 <__assert_fail@plt+0x7f24>
   193f8:	ldr	r0, [ip, r1, lsl #2]
   193fc:	ldr	r7, [sp, #68]	; 0x44
   19400:	ldr	r1, [sp, #100]	; 0x64
   19404:	cmp	r0, r6
   19408:	bne	18ee4 <__assert_fail@plt+0x7a30>
   1940c:	ldr	r3, [sp, #84]	; 0x54
   19410:	cmn	r6, #1
   19414:	bgt	19440 <__assert_fail@plt+0x7f8c>
   19418:	b	191c4 <__assert_fail@plt+0x7d10>
   1941c:	ldr	r7, [sp, #68]	; 0x44
   19420:	mov	r0, #0
   19424:	str	r0, [sl]
   19428:	str	r0, [sl, #4]
   1942c:	str	r0, [sl, #8]
   19430:	ldr	r3, [sp, #84]	; 0x54
   19434:	mov	lr, #1
   19438:	cmn	r6, #1
   1943c:	ble	191c4 <__assert_fail@plt+0x7d10>
   19440:	ldr	r5, [fp, #20]
   19444:	ldr	sl, [sp, #88]	; 0x58
   19448:	mov	r4, r6
   1944c:	ldr	r0, [r5, #4]
   19450:	ldr	r6, [sp, #64]	; 0x40
   19454:	cmp	r3, r0
   19458:	ble	18b74 <__assert_fail@plt+0x76c0>
   1945c:	b	18ac8 <__assert_fail@plt+0x7614>
   19460:	ldr	r0, [r5, #12]
   19464:	add	r9, r6, r9
   19468:	mov	lr, #1
   1946c:	mov	r3, r9
   19470:	ldr	r9, [sp, #60]	; 0x3c
   19474:	ldr	r6, [r0, r4, lsl #2]
   19478:	ldr	r0, [sp, #196]	; 0xc4
   1947c:	cmp	r3, r0
   19480:	ble	18f38 <__assert_fail@plt+0x7a84>
   19484:	b	18ff4 <__assert_fail@plt+0x7b40>
   19488:	ldr	r0, [sp, #72]	; 0x48
   1948c:	str	r6, [sp, #100]	; 0x64
   19490:	mov	r6, r9
   19494:	cmp	r0, r3
   19498:	bne	194c8 <__assert_fail@plt+0x8014>
   1949c:	ldr	r0, [sp, #92]	; 0x5c
   194a0:	lsl	r1, r0, #3
   194a4:	ldr	r0, [sp, #88]	; 0x58
   194a8:	bl	2ac90 <__assert_fail@plt+0x197dc>
   194ac:	cmp	r0, #0
   194b0:	mov	r9, r6
   194b4:	beq	19964 <__assert_fail@plt+0x84b0>
   194b8:	ldr	r1, [sp, #92]	; 0x5c
   194bc:	str	r0, [sp, #88]	; 0x58
   194c0:	lsl	r1, r1, #1
   194c4:	str	r1, [sp, #72]	; 0x48
   194c8:	ldr	r0, [sp, #88]	; 0x58
   194cc:	ldr	r0, [r0]
   194d0:	cmp	r0, r4
   194d4:	ble	19518 <__assert_fail@plt+0x8064>
   194d8:	ldr	r2, [sp, #92]	; 0x5c
   194dc:	cmp	r2, #1
   194e0:	blt	19554 <__assert_fail@plt+0x80a0>
   194e4:	ldr	r0, [sp, #88]	; 0x58
   194e8:	ldr	r2, [sp, #92]	; 0x5c
   194ec:	add	r1, r0, r2, lsl #2
   194f0:	add	r0, r2, #1
   194f4:	mov	r2, r1
   194f8:	ldr	r3, [r2, #-4]!
   194fc:	sub	r0, r0, #1
   19500:	cmp	r0, #1
   19504:	str	r3, [r1]
   19508:	mov	r1, r2
   1950c:	bgt	194f8 <__assert_fail@plt+0x8044>
   19510:	sub	r2, r0, #1
   19514:	b	19554 <__assert_fail@plt+0x80a0>
   19518:	ldr	r0, [sp, #88]	; 0x58
   1951c:	ldr	r2, [sp, #92]	; 0x5c
   19520:	add	r0, r0, r2, lsl #2
   19524:	ldr	r1, [r0, #-4]
   19528:	cmp	r1, r4
   1952c:	ble	19554 <__assert_fail@plt+0x80a0>
   19530:	ldr	r2, [sp, #92]	; 0x5c
   19534:	sub	r2, r2, #2
   19538:	str	r1, [r0]
   1953c:	sub	r2, r2, #1
   19540:	ldr	r1, [r0, #-8]
   19544:	sub	r0, r0, #4
   19548:	cmp	r1, r4
   1954c:	bgt	19538 <__assert_fail@plt+0x8084>
   19550:	add	r2, r2, #2
   19554:	ldr	r3, [sp, #92]	; 0x5c
   19558:	ldr	r0, [sp, #88]	; 0x58
   1955c:	mov	r9, r6
   19560:	ldr	r7, [sp, #68]	; 0x44
   19564:	ldr	r6, [sp, #100]	; 0x64
   19568:	add	r3, r3, #1
   1956c:	str	r4, [r0, r2, lsl #2]
   19570:	b	18fd0 <__assert_fail@plt+0x7b1c>
   19574:	ldr	r0, [sp, #72]	; 0x48
   19578:	mov	r6, r9
   1957c:	cmp	r0, r1
   19580:	bne	195b0 <__assert_fail@plt+0x80fc>
   19584:	ldr	r0, [sp, #92]	; 0x5c
   19588:	lsl	r1, r0, #3
   1958c:	ldr	r0, [sp, #88]	; 0x58
   19590:	bl	2ac90 <__assert_fail@plt+0x197dc>
   19594:	cmp	r0, #0
   19598:	mov	r9, r6
   1959c:	beq	19964 <__assert_fail@plt+0x84b0>
   195a0:	ldr	r1, [sp, #92]	; 0x5c
   195a4:	str	r0, [sp, #88]	; 0x58
   195a8:	lsl	r1, r1, #1
   195ac:	str	r1, [sp, #72]	; 0x48
   195b0:	ldr	r0, [sp, #88]	; 0x58
   195b4:	ldr	r0, [r0]
   195b8:	cmp	r0, r4
   195bc:	ble	19600 <__assert_fail@plt+0x814c>
   195c0:	ldr	r2, [sp, #92]	; 0x5c
   195c4:	cmp	r2, #1
   195c8:	blt	1963c <__assert_fail@plt+0x8188>
   195cc:	ldr	r0, [sp, #88]	; 0x58
   195d0:	ldr	r2, [sp, #92]	; 0x5c
   195d4:	add	r1, r0, r2, lsl #2
   195d8:	add	r0, r2, #1
   195dc:	mov	r2, r1
   195e0:	ldr	r3, [r2, #-4]!
   195e4:	sub	r0, r0, #1
   195e8:	cmp	r0, #1
   195ec:	str	r3, [r1]
   195f0:	mov	r1, r2
   195f4:	bgt	195e0 <__assert_fail@plt+0x812c>
   195f8:	sub	r2, r0, #1
   195fc:	b	1963c <__assert_fail@plt+0x8188>
   19600:	ldr	r0, [sp, #88]	; 0x58
   19604:	ldr	r2, [sp, #92]	; 0x5c
   19608:	add	r0, r0, r2, lsl #2
   1960c:	ldr	r1, [r0, #-4]
   19610:	cmp	r1, r4
   19614:	ble	1963c <__assert_fail@plt+0x8188>
   19618:	ldr	r2, [sp, #92]	; 0x5c
   1961c:	sub	r2, r2, #2
   19620:	str	r1, [r0]
   19624:	sub	r2, r2, #1
   19628:	ldr	r1, [r0, #-8]
   1962c:	sub	r0, r0, #4
   19630:	cmp	r1, r4
   19634:	bgt	19620 <__assert_fail@plt+0x816c>
   19638:	add	r2, r2, #2
   1963c:	ldr	r1, [sp, #92]	; 0x5c
   19640:	ldr	sl, [sp, #88]	; 0x58
   19644:	ldr	r7, [sp, #68]	; 0x44
   19648:	mov	r9, r6
   1964c:	add	r1, r1, #1
   19650:	str	r4, [sl, r2, lsl #2]
   19654:	str	r1, [sp, #92]	; 0x5c
   19658:	b	19394 <__assert_fail@plt+0x7ee0>
   1965c:	mov	r6, #0
   19660:	b	1737c <__assert_fail@plt+0x5ec8>
   19664:	mov	r9, #12
   19668:	b	1986c <__assert_fail@plt+0x83b8>
   1966c:	mov	r9, sl
   19670:	b	19680 <__assert_fail@plt+0x81cc>
   19674:	mov	r9, r0
   19678:	b	1986c <__assert_fail@plt+0x83b8>
   1967c:	mov	r5, #1
   19680:	ldr	r0, [sp, #88]	; 0x58
   19684:	bl	2ae28 <__assert_fail@plt+0x19974>
   19688:	ldr	r0, [fp, #-184]	; 0xffffff48
   1968c:	cmp	r0, r9
   19690:	beq	19698 <__assert_fail@plt+0x81e4>
   19694:	bl	2ae28 <__assert_fail@plt+0x19974>
   19698:	mov	r0, #16
   1969c:	cmp	r5, #0
   196a0:	str	r0, [fp, #-188]	; 0xffffff44
   196a4:	mov	r0, #0
   196a8:	str	r0, [fp, #-192]	; 0xffffff40
   196ac:	str	r9, [fp, #-184]	; 0xffffff48
   196b0:	mov	r9, #1
   196b4:	bne	1986c <__assert_fail@plt+0x83b8>
   196b8:	ldr	r1, [r8]
   196bc:	ldr	r0, [r8, #8]
   196c0:	cmp	r1, #1
   196c4:	blt	19704 <__assert_fail@plt+0x8250>
   196c8:	mov	r5, #0
   196cc:	mov	r6, #0
   196d0:	add	r0, r0, r5
   196d4:	ldr	r0, [r0, #20]
   196d8:	bl	2ae28 <__assert_fail@plt+0x19974>
   196dc:	ldr	r0, [r8, #8]
   196e0:	add	r0, r0, r5
   196e4:	ldr	r0, [r0, #8]
   196e8:	bl	2ae28 <__assert_fail@plt+0x19974>
   196ec:	ldr	r1, [r8]
   196f0:	ldr	r0, [r8, #8]
   196f4:	add	r6, r6, #1
   196f8:	add	r5, r5, #24
   196fc:	cmp	r6, r1
   19700:	blt	196d0 <__assert_fail@plt+0x821c>
   19704:	bl	2ae28 <__assert_fail@plt+0x19974>
   19708:	b	1986c <__assert_fail@plt+0x83b8>
   1970c:	ldr	r5, [fp, #20]
   19710:	ldr	r9, [sp, #60]	; 0x3c
   19714:	mov	r0, sl
   19718:	bl	2ae28 <__assert_fail@plt+0x19974>
   1971c:	ldr	r0, [fp, #-184]	; 0xffffff48
   19720:	cmp	r0, r9
   19724:	beq	1972c <__assert_fail@plt+0x8278>
   19728:	bl	2ae28 <__assert_fail@plt+0x19974>
   1972c:	mov	r0, #16
   19730:	cmp	r8, #0
   19734:	str	r0, [fp, #-188]	; 0xffffff44
   19738:	mov	r0, #0
   1973c:	str	r0, [fp, #-192]	; 0xffffff40
   19740:	str	r9, [fp, #-184]	; 0xffffff48
   19744:	beq	197a0 <__assert_fail@plt+0x82ec>
   19748:	ldr	r1, [r8]
   1974c:	ldr	r0, [r8, #8]
   19750:	mov	r6, r5
   19754:	cmp	r1, #1
   19758:	blt	19798 <__assert_fail@plt+0x82e4>
   1975c:	mov	r4, #0
   19760:	mov	r5, #0
   19764:	add	r0, r0, r4
   19768:	ldr	r0, [r0, #20]
   1976c:	bl	2ae28 <__assert_fail@plt+0x19974>
   19770:	ldr	r0, [r8, #8]
   19774:	add	r0, r0, r4
   19778:	ldr	r0, [r0, #8]
   1977c:	bl	2ae28 <__assert_fail@plt+0x19974>
   19780:	ldr	r1, [r8]
   19784:	ldr	r0, [r8, #8]
   19788:	add	r5, r5, #1
   1978c:	add	r4, r4, #24
   19790:	cmp	r5, r1
   19794:	blt	19764 <__assert_fail@plt+0x82b0>
   19798:	bl	2ae28 <__assert_fail@plt+0x19974>
   1979c:	mov	r5, r6
   197a0:	ldrb	r0, [sp, #180]	; 0xb4
   197a4:	cmp	r0, #0
   197a8:	bne	198e4 <__assert_fail@plt+0x8430>
   197ac:	ldr	r1, [fp, #-200]	; 0xffffff38
   197b0:	ldr	r4, [sp, #28]
   197b4:	add	r0, r5, #4
   197b8:	mov	r2, r7
   197bc:	ldr	r3, [r0, #-4]
   197c0:	cmn	r3, #1
   197c4:	addne	r3, r3, r1
   197c8:	strne	r3, [r0, #-4]
   197cc:	ldrne	r3, [r0]
   197d0:	addne	r3, r3, r1
   197d4:	strne	r3, [r0]
   197d8:	add	r0, r0, #8
   197dc:	subs	r2, r2, #1
   197e0:	bne	197bc <__assert_fail@plt+0x8308>
   197e4:	cmp	r4, #1
   197e8:	blt	197fc <__assert_fail@plt+0x8348>
   197ec:	add	r0, r5, r7, lsl #3
   197f0:	lsl	r2, r4, #3
   197f4:	mov	r1, #255	; 0xff
   197f8:	bl	113d0 <memset@plt>
   197fc:	ldr	r0, [sp, #96]	; 0x60
   19800:	mov	r9, #0
   19804:	ldr	r0, [r0, #132]	; 0x84
   19808:	cmp	r0, #0
   1980c:	beq	1986c <__assert_fail@plt+0x83b8>
   19810:	cmp	r7, #2
   19814:	bcc	1986c <__assert_fail@plt+0x83b8>
   19818:	ldr	r1, [fp, #16]
   1981c:	ldr	r2, [sp, #28]
   19820:	mov	r6, r5
   19824:	sub	r1, r1, #1
   19828:	sub	r1, r1, r2
   1982c:	mov	r2, #0
   19830:	ldr	r3, [r0, r2, lsl #2]
   19834:	cmp	r2, r3
   19838:	beq	1985c <__assert_fail@plt+0x83a8>
   1983c:	add	r3, r6, r3, lsl #3
   19840:	add	r7, r6, r2, lsl #3
   19844:	ldr	r3, [r3, #8]
   19848:	str	r3, [r7, #8]
   1984c:	ldr	r3, [r0, r2, lsl #2]
   19850:	add	r3, r6, r3, lsl #3
   19854:	ldr	r3, [r3, #12]
   19858:	str	r3, [r7, #12]
   1985c:	add	r2, r2, #1
   19860:	cmp	r1, r2
   19864:	bne	19830 <__assert_fail@plt+0x837c>
   19868:	mov	r9, #0
   1986c:	ldr	r0, [sp, #204]	; 0xcc
   19870:	bl	2ae28 <__assert_fail@plt+0x19974>
   19874:	ldr	r0, [sp, #96]	; 0x60
   19878:	ldr	r0, [r0, #76]	; 0x4c
   1987c:	cmp	r0, #0
   19880:	beq	1989c <__assert_fail@plt+0x83e8>
   19884:	add	r0, sp, #104	; 0x68
   19888:	bl	218d0 <__assert_fail@plt+0x1041c>
   1988c:	ldr	r0, [sp, #236]	; 0xec
   19890:	bl	2ae28 <__assert_fail@plt+0x19974>
   19894:	ldr	r0, [sp, #220]	; 0xdc
   19898:	bl	2ae28 <__assert_fail@plt+0x19974>
   1989c:	ldr	r0, [sp, #112]	; 0x70
   198a0:	bl	2ae28 <__assert_fail@plt+0x19974>
   198a4:	ldr	r0, [sp, #116]	; 0x74
   198a8:	bl	2ae28 <__assert_fail@plt+0x19974>
   198ac:	ldrb	r0, [sp, #179]	; 0xb3
   198b0:	cmp	r0, #0
   198b4:	beq	198c0 <__assert_fail@plt+0x840c>
   198b8:	ldr	r0, [sp, #108]	; 0x6c
   198bc:	bl	2ae28 <__assert_fail@plt+0x19974>
   198c0:	mov	r0, r9
   198c4:	sub	sp, fp, #28
   198c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198cc:	mov	r0, r6
   198d0:	bl	2ae28 <__assert_fail@plt+0x19974>
   198d4:	mov	r0, #0
   198d8:	bl	2ae28 <__assert_fail@plt+0x19974>
   198dc:	mov	r9, #12
   198e0:	b	1986c <__assert_fail@plt+0x83b8>
   198e4:	ldr	ip, [sp, #24]
   198e8:	ldr	r4, [sp, #28]
   198ec:	add	r0, r5, #4
   198f0:	mov	r1, r7
   198f4:	ldr	r2, [r0, #-4]
   198f8:	cmn	r2, #1
   198fc:	beq	19944 <__assert_fail@plt+0x8490>
   19900:	ldr	r7, [sp, #132]	; 0x84
   19904:	ldr	r3, [sp, #116]	; 0x74
   19908:	mov	r6, ip
   1990c:	cmp	r2, r7
   19910:	addne	r6, r3, r2, lsl #2
   19914:	ldr	r2, [r6]
   19918:	str	r2, [r0, #-4]
   1991c:	ldr	r6, [r0]
   19920:	cmp	r6, r7
   19924:	mov	r7, ip
   19928:	addne	r7, r3, r6, lsl #2
   1992c:	ldr	r3, [r7]
   19930:	ldr	r7, [fp, #-200]	; 0xffffff38
   19934:	add	r2, r2, r7
   19938:	add	r3, r3, r7
   1993c:	ldr	r7, [sp, #68]	; 0x44
   19940:	stmda	r0, {r2, r3}
   19944:	add	r0, r0, #8
   19948:	subs	r1, r1, #1
   1994c:	bne	198f4 <__assert_fail@plt+0x8440>
   19950:	b	197e4 <__assert_fail@plt+0x8330>
   19954:	mov	r9, #1
   19958:	b	1986c <__assert_fail@plt+0x83b8>
   1995c:	mov	r0, #0
   19960:	str	r0, [sp, #88]	; 0x58
   19964:	ldr	r0, [sp, #88]	; 0x58
   19968:	bl	2ae28 <__assert_fail@plt+0x19974>
   1996c:	ldr	r0, [fp, #-184]	; 0xffffff48
   19970:	cmp	r0, r9
   19974:	beq	1997c <__assert_fail@plt+0x84c8>
   19978:	bl	2ae28 <__assert_fail@plt+0x19974>
   1997c:	mov	r0, #16
   19980:	cmp	r8, #0
   19984:	str	r0, [fp, #-188]	; 0xffffff44
   19988:	mov	r0, #0
   1998c:	str	r0, [fp, #-192]	; 0xffffff40
   19990:	str	r9, [fp, #-184]	; 0xffffff48
   19994:	mov	r9, #12
   19998:	beq	1986c <__assert_fail@plt+0x83b8>
   1999c:	ldr	r1, [r8]
   199a0:	ldr	r0, [r8, #8]
   199a4:	cmp	r1, #1
   199a8:	blt	19704 <__assert_fail@plt+0x8250>
   199ac:	mov	r5, #0
   199b0:	mov	r6, #0
   199b4:	add	r0, r0, r5
   199b8:	ldr	r0, [r0, #20]
   199bc:	bl	2ae28 <__assert_fail@plt+0x19974>
   199c0:	ldr	r0, [r8, #8]
   199c4:	add	r0, r0, r5
   199c8:	ldr	r0, [r0, #8]
   199cc:	bl	2ae28 <__assert_fail@plt+0x19974>
   199d0:	ldr	r1, [r8]
   199d4:	ldr	r0, [r8, #8]
   199d8:	add	r6, r6, #1
   199dc:	add	r5, r5, #24
   199e0:	cmp	r6, r1
   199e4:	blt	199b4 <__assert_fail@plt+0x8500>
   199e8:	b	19704 <__assert_fail@plt+0x8250>
   199ec:	mov	r0, #0
   199f0:	str	r0, [r7]
   199f4:	str	r0, [sl]
   199f8:	b	19964 <__assert_fail@plt+0x84b0>
   199fc:	push	{fp, lr}
   19a00:	mov	fp, sp
   19a04:	sub	sp, sp, #16
   19a08:	mov	ip, #1
   19a0c:	str	r2, [sp, #4]
   19a10:	str	ip, [sp, #12]
   19a14:	mov	ip, #0
   19a18:	str	ip, [sp]
   19a1c:	ldr	ip, [fp, #8]
   19a20:	str	ip, [sp, #8]
   19a24:	bl	19a30 <__assert_fail@plt+0x857c>
   19a28:	mov	sp, fp
   19a2c:	pop	{fp, pc}
   19a30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a34:	add	fp, sp, #28
   19a38:	sub	sp, sp, #44	; 0x2c
   19a3c:	mvn	r4, #0
   19a40:	cmp	r3, #0
   19a44:	blt	19d94 <__assert_fail@plt+0x88e0>
   19a48:	mov	r6, r3
   19a4c:	mov	r8, r2
   19a50:	cmp	r3, r2
   19a54:	bgt	19d94 <__assert_fail@plt+0x88e0>
   19a58:	mov	r5, r0
   19a5c:	ldr	r0, [fp, #8]
   19a60:	mov	r7, r8
   19a64:	str	r1, [sp, #24]
   19a68:	movw	r1, #0
   19a6c:	ldr	sl, [r5]
   19a70:	movt	r1, #0
   19a74:	add	r0, r0, r6
   19a78:	cmp	r0, r8
   19a7c:	bicle	r7, r0, r0, asr #31
   19a80:	movw	r0, #0
   19a84:	movt	r0, #0
   19a88:	orrs	r4, r1, r0
   19a8c:	beq	19a98 <__assert_fail@plt+0x85e4>
   19a90:	add	r0, sl, #136	; 0x88
   19a94:	bl	11244 <pthread_mutex_lock@plt>
   19a98:	ldrb	r0, [r5, #28]
   19a9c:	ldr	r9, [fp, #16]
   19aa0:	cmp	r7, r6
   19aa4:	ubfx	r1, r0, #5, #2
   19aa8:	str	r4, [sp, #28]
   19aac:	str	r6, [sp, #36]	; 0x24
   19ab0:	str	r1, [sp, #20]
   19ab4:	ble	19b50 <__assert_fail@plt+0x869c>
   19ab8:	tst	r0, #8
   19abc:	bne	19b50 <__assert_fail@plt+0x869c>
   19ac0:	ldr	r6, [r5, #16]
   19ac4:	cmp	r6, #0
   19ac8:	beq	19b50 <__assert_fail@plt+0x869c>
   19acc:	ldr	r4, [r5]
   19ad0:	mov	r0, r6
   19ad4:	mov	r1, #0
   19ad8:	mov	r2, #256	; 0x100
   19adc:	bl	113d0 <memset@plt>
   19ae0:	ldr	r1, [r4, #36]	; 0x24
   19ae4:	mov	r0, r5
   19ae8:	mov	r2, r6
   19aec:	bl	1652c <__assert_fail@plt+0x5078>
   19af0:	ldr	r0, [r4, #36]	; 0x24
   19af4:	ldr	r1, [r4, #40]	; 0x28
   19af8:	cmp	r0, r1
   19afc:	beq	19b10 <__assert_fail@plt+0x865c>
   19b00:	mov	r0, r5
   19b04:	mov	r2, r6
   19b08:	bl	1652c <__assert_fail@plt+0x5078>
   19b0c:	ldr	r0, [r4, #36]	; 0x24
   19b10:	ldr	r1, [r4, #44]	; 0x2c
   19b14:	cmp	r0, r1
   19b18:	beq	19b2c <__assert_fail@plt+0x8678>
   19b1c:	mov	r0, r5
   19b20:	mov	r2, r6
   19b24:	bl	1652c <__assert_fail@plt+0x5078>
   19b28:	ldr	r0, [r4, #36]	; 0x24
   19b2c:	ldr	r1, [r4, #48]	; 0x30
   19b30:	cmp	r0, r1
   19b34:	beq	19b44 <__assert_fail@plt+0x8690>
   19b38:	mov	r0, r5
   19b3c:	mov	r2, r6
   19b40:	bl	1652c <__assert_fail@plt+0x5078>
   19b44:	ldrb	r0, [r5, #28]
   19b48:	orr	r0, r0, #8
   19b4c:	strb	r0, [r5, #28]
   19b50:	str	sl, [sp, #32]
   19b54:	mov	sl, #1
   19b58:	mov	r4, #0
   19b5c:	cmp	r9, #0
   19b60:	str	r5, [fp, #-32]	; 0xffffffe0
   19b64:	beq	19ba4 <__assert_fail@plt+0x86f0>
   19b68:	ldr	r6, [sp, #36]	; 0x24
   19b6c:	ands	r1, r0, #16
   19b70:	bne	19be0 <__assert_fail@plt+0x872c>
   19b74:	and	r0, r0, #6
   19b78:	cmp	r0, #4
   19b7c:	bne	19bd0 <__assert_fail@plt+0x871c>
   19b80:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19b84:	ldr	sl, [r9]
   19b88:	ldr	r0, [r0, #24]
   19b8c:	cmp	sl, r0
   19b90:	bhi	19bd8 <__assert_fail@plt+0x8724>
   19b94:	cmp	sl, #1
   19b98:	movwlt	r9, #0
   19b9c:	movwlt	sl, #1
   19ba0:	b	19bdc <__assert_fail@plt+0x8728>
   19ba4:	ldr	r6, [sp, #36]	; 0x24
   19ba8:	lsl	r0, sl, #3
   19bac:	bl	2ac60 <__assert_fail@plt+0x197ac>
   19bb0:	cmp	r0, #0
   19bb4:	bne	19bf0 <__assert_fail@plt+0x873c>
   19bb8:	ldr	r5, [sp, #32]
   19bbc:	mvn	r4, #1
   19bc0:	ldr	r0, [sp, #28]
   19bc4:	cmp	r0, #0
   19bc8:	bne	19d8c <__assert_fail@plt+0x88d8>
   19bcc:	b	19d94 <__assert_fail@plt+0x88e0>
   19bd0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19bd4:	ldr	r0, [r0, #24]
   19bd8:	add	sl, r0, #1
   19bdc:	mov	r4, r9
   19be0:	lsl	r0, sl, #3
   19be4:	bl	2ac60 <__assert_fail@plt+0x197ac>
   19be8:	cmp	r0, #0
   19bec:	beq	19bb8 <__assert_fail@plt+0x8704>
   19bf0:	mov	r9, r0
   19bf4:	ldr	r0, [fp, #12]
   19bf8:	str	r7, [sp]
   19bfc:	mov	r2, r8
   19c00:	mov	r3, r6
   19c04:	stmib	sp, {r0, sl}
   19c08:	str	r9, [sp, #12]
   19c0c:	ldr	r0, [sp, #20]
   19c10:	ldr	r1, [sp, #24]
   19c14:	str	r0, [sp, #16]
   19c18:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19c1c:	bl	172a4 <__assert_fail@plt+0x5df0>
   19c20:	cmp	r0, #0
   19c24:	beq	19c38 <__assert_fail@plt+0x8784>
   19c28:	mvn	r4, #1
   19c2c:	cmp	r0, #1
   19c30:	mvneq	r4, #0
   19c34:	b	19d74 <__assert_fail@plt+0x88c0>
   19c38:	cmp	r4, #0
   19c3c:	beq	19d58 <__assert_fail@plt+0x88a4>
   19c40:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19c44:	add	r6, sl, #1
   19c48:	ldrb	r0, [r0, #28]
   19c4c:	ubfx	r0, r0, #1, #2
   19c50:	cmp	r0, #1
   19c54:	beq	19cbc <__assert_fail@plt+0x8808>
   19c58:	mov	r8, #2
   19c5c:	cmp	r0, #0
   19c60:	bne	19ccc <__assert_fail@plt+0x8818>
   19c64:	lsl	r7, r6, #2
   19c68:	mov	r0, r7
   19c6c:	bl	2ac60 <__assert_fail@plt+0x197ac>
   19c70:	mov	r8, #0
   19c74:	cmp	r0, #0
   19c78:	str	r0, [r4, #4]
   19c7c:	beq	19eac <__assert_fail@plt+0x89f8>
   19c80:	mov	r0, r7
   19c84:	bl	2ac60 <__assert_fail@plt+0x197ac>
   19c88:	cmp	r0, #0
   19c8c:	str	r0, [r4, #8]
   19c90:	beq	19ea4 <__assert_fail@plt+0x89f0>
   19c94:	str	r6, [r4]
   19c98:	mov	r8, #1
   19c9c:	cmp	sl, #1
   19ca0:	bge	19cd4 <__assert_fail@plt+0x8820>
   19ca4:	mov	sl, #0
   19ca8:	ldr	r0, [r4]
   19cac:	ldr	r6, [sp, #36]	; 0x24
   19cb0:	cmp	sl, r0
   19cb4:	bcs	19d3c <__assert_fail@plt+0x8888>
   19cb8:	b	19d1c <__assert_fail@plt+0x8868>
   19cbc:	ldr	r0, [r4]
   19cc0:	mov	r8, #1
   19cc4:	cmp	r6, r0
   19cc8:	bhi	19e54 <__assert_fail@plt+0x89a0>
   19ccc:	cmp	sl, #1
   19cd0:	blt	19ca4 <__assert_fail@plt+0x87f0>
   19cd4:	ldmib	r4, {r6, r7}
   19cd8:	mov	r2, #0
   19cdc:	cmp	sl, #3
   19ce0:	bhi	19da0 <__assert_fail@plt+0x88ec>
   19ce4:	add	r0, r9, r2, lsl #3
   19ce8:	add	r0, r0, #4
   19cec:	ldr	r1, [r0, #-4]
   19cf0:	str	r1, [r6, r2, lsl #2]
   19cf4:	ldr	r1, [r0]
   19cf8:	add	r0, r0, #8
   19cfc:	str	r1, [r7, r2, lsl #2]
   19d00:	add	r2, r2, #1
   19d04:	cmp	sl, r2
   19d08:	bne	19cec <__assert_fail@plt+0x8838>
   19d0c:	ldr	r0, [r4]
   19d10:	ldr	r6, [sp, #36]	; 0x24
   19d14:	cmp	sl, r0
   19d18:	bcs	19d3c <__assert_fail@plt+0x8888>
   19d1c:	ldmib	r4, {r0, r1}
   19d20:	mvn	r2, #0
   19d24:	str	r2, [r1, sl, lsl #2]
   19d28:	str	r2, [r0, sl, lsl #2]
   19d2c:	add	sl, sl, #1
   19d30:	ldr	r3, [r4]
   19d34:	cmp	sl, r3
   19d38:	bcc	19d24 <__assert_fail@plt+0x8870>
   19d3c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   19d40:	cmp	r8, #0
   19d44:	ldrb	r0, [r1, #28]
   19d48:	and	r0, r0, #249	; 0xf9
   19d4c:	orr	r0, r0, r8, lsl #1
   19d50:	strb	r0, [r1, #28]
   19d54:	beq	19d70 <__assert_fail@plt+0x88bc>
   19d58:	ldr	r0, [fp, #20]
   19d5c:	cmp	r0, #0
   19d60:	ldreq	r4, [r9]
   19d64:	ldrne	r0, [r9, #4]
   19d68:	subne	r4, r0, r6
   19d6c:	b	19d74 <__assert_fail@plt+0x88c0>
   19d70:	mvn	r4, #1
   19d74:	ldr	r5, [sp, #32]
   19d78:	mov	r0, r9
   19d7c:	bl	2ae28 <__assert_fail@plt+0x19974>
   19d80:	ldr	r0, [sp, #28]
   19d84:	cmp	r0, #0
   19d88:	beq	19d94 <__assert_fail@plt+0x88e0>
   19d8c:	add	r0, r5, #136	; 0x88
   19d90:	bl	111a8 <pthread_mutex_unlock@plt>
   19d94:	mov	r0, r4
   19d98:	sub	sp, fp, #28
   19d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19da0:	add	ip, r7, sl, lsl #2
   19da4:	mov	lr, #0
   19da8:	add	r5, r9, sl, lsl #3
   19dac:	str	r8, [sp, #24]
   19db0:	mov	r8, #0
   19db4:	add	r3, r6, sl, lsl #2
   19db8:	mov	r1, #0
   19dbc:	mov	r0, #0
   19dc0:	mov	r2, #0
   19dc4:	cmp	r9, ip
   19dc8:	movwcc	lr, #1
   19dcc:	cmp	r5, r7
   19dd0:	movwhi	r8, #1
   19dd4:	cmp	r9, r3
   19dd8:	movwcc	r1, #1
   19ddc:	cmp	r5, r6
   19de0:	mov	r5, #0
   19de4:	movwhi	r5, #1
   19de8:	cmp	r7, r3
   19dec:	mov	r3, #0
   19df0:	movwcc	r3, #1
   19df4:	cmp	r6, ip
   19df8:	movwcc	r0, #1
   19dfc:	tst	r0, r3
   19e00:	bne	19e4c <__assert_fail@plt+0x8998>
   19e04:	ands	r0, r5, r1
   19e08:	bne	19e4c <__assert_fail@plt+0x8998>
   19e0c:	ands	r0, r8, lr
   19e10:	ldr	r8, [sp, #24]
   19e14:	bne	19ce4 <__assert_fail@plt+0x8830>
   19e18:	bic	r2, sl, #3
   19e1c:	mov	r1, r7
   19e20:	mov	r0, r6
   19e24:	mov	r5, r9
   19e28:	mov	r3, r2
   19e2c:	vld2.32	{d16-d19}, [r5]!
   19e30:	subs	r3, r3, #4
   19e34:	vst1.32	{d16-d17}, [r0]!
   19e38:	vst1.32	{d18-d19}, [r1]!
   19e3c:	bne	19e2c <__assert_fail@plt+0x8978>
   19e40:	cmp	sl, r2
   19e44:	bne	19ce4 <__assert_fail@plt+0x8830>
   19e48:	b	19d0c <__assert_fail@plt+0x8858>
   19e4c:	ldr	r8, [sp, #24]
   19e50:	b	19ce4 <__assert_fail@plt+0x8830>
   19e54:	ldr	r0, [r4, #4]
   19e58:	lsl	r7, r6, #2
   19e5c:	mov	r1, r7
   19e60:	bl	2ac90 <__assert_fail@plt+0x197dc>
   19e64:	mov	r8, #0
   19e68:	cmp	r0, #0
   19e6c:	beq	19eac <__assert_fail@plt+0x89f8>
   19e70:	mov	r5, r0
   19e74:	ldr	r0, [r4, #8]
   19e78:	mov	r1, r7
   19e7c:	bl	2ac90 <__assert_fail@plt+0x197dc>
   19e80:	cmp	r0, #0
   19e84:	beq	19eb4 <__assert_fail@plt+0x8a00>
   19e88:	str	r6, [r4]
   19e8c:	str	r5, [r4, #4]
   19e90:	str	r0, [r4, #8]
   19e94:	mov	r8, #1
   19e98:	cmp	sl, #1
   19e9c:	bge	19cd4 <__assert_fail@plt+0x8820>
   19ea0:	b	19ca4 <__assert_fail@plt+0x87f0>
   19ea4:	ldr	r0, [r4, #4]
   19ea8:	bl	2ae28 <__assert_fail@plt+0x19974>
   19eac:	ldr	r6, [sp, #36]	; 0x24
   19eb0:	b	19d3c <__assert_fail@plt+0x8888>
   19eb4:	mov	r0, r5
   19eb8:	b	19ea8 <__assert_fail@plt+0x89f4>
   19ebc:	push	{fp, lr}
   19ec0:	mov	fp, sp
   19ec4:	sub	sp, sp, #16
   19ec8:	mov	ip, #0
   19ecc:	str	r2, [sp, #4]
   19ed0:	str	ip, [sp, #12]
   19ed4:	ldr	ip, [fp, #12]
   19ed8:	str	ip, [sp, #8]
   19edc:	ldr	ip, [fp, #8]
   19ee0:	str	ip, [sp]
   19ee4:	bl	19a30 <__assert_fail@plt+0x857c>
   19ee8:	mov	sp, fp
   19eec:	pop	{fp, pc}
   19ef0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ef4:	add	fp, sp, #28
   19ef8:	sub	sp, sp, #20
   19efc:	ldr	r4, [fp, #8]
   19f00:	mov	r8, r1
   19f04:	mov	r1, r0
   19f08:	mov	r6, r2
   19f0c:	orr	r0, r4, r2
   19f10:	ldr	r2, [fp, #20]
   19f14:	orr	r0, r0, r2
   19f18:	cmp	r0, #0
   19f1c:	blt	19fdc <__assert_fail@plt+0x8b28>
   19f20:	adds	sl, r6, r4
   19f24:	bvs	19fdc <__assert_fail@plt+0x8b28>
   19f28:	mov	r5, #0
   19f2c:	cmp	r4, #1
   19f30:	blt	19f88 <__assert_fail@plt+0x8ad4>
   19f34:	mov	r9, r3
   19f38:	cmp	r6, #1
   19f3c:	blt	19f90 <__assert_fail@plt+0x8adc>
   19f40:	mov	r0, sl
   19f44:	mov	r5, r1
   19f48:	bl	2ac60 <__assert_fail@plt+0x197ac>
   19f4c:	cmp	r0, #0
   19f50:	beq	19fdc <__assert_fail@plt+0x8b28>
   19f54:	mov	r1, r8
   19f58:	mov	r2, r6
   19f5c:	mov	r7, r0
   19f60:	bl	1125c <memcpy@plt>
   19f64:	add	r0, r7, r6
   19f68:	mov	r1, r9
   19f6c:	mov	r2, r4
   19f70:	bl	1125c <memcpy@plt>
   19f74:	ldr	r2, [fp, #20]
   19f78:	mov	r1, r5
   19f7c:	mov	r4, r7
   19f80:	mov	r5, #0
   19f84:	b	19f98 <__assert_fail@plt+0x8ae4>
   19f88:	mov	r7, r8
   19f8c:	b	19f94 <__assert_fail@plt+0x8ae0>
   19f90:	mov	r7, r9
   19f94:	mov	r4, #0
   19f98:	ldr	r0, [fp, #16]
   19f9c:	ldr	r3, [fp, #12]
   19fa0:	mov	r6, #1
   19fa4:	str	r2, [sp, #4]
   19fa8:	mov	r2, sl
   19fac:	str	r5, [sp]
   19fb0:	str	r6, [sp, #12]
   19fb4:	str	r0, [sp, #8]
   19fb8:	mov	r0, r1
   19fbc:	mov	r1, r7
   19fc0:	bl	19a30 <__assert_fail@plt+0x857c>
   19fc4:	mov	r5, r0
   19fc8:	mov	r0, r4
   19fcc:	bl	2ae28 <__assert_fail@plt+0x19974>
   19fd0:	mov	r0, r5
   19fd4:	sub	sp, fp, #28
   19fd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fdc:	mvn	r0, #1
   19fe0:	sub	sp, fp, #28
   19fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fe8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fec:	add	fp, sp, #28
   19ff0:	sub	sp, sp, #20
   19ff4:	ldr	r4, [fp, #8]
   19ff8:	mov	r8, r1
   19ffc:	mov	r1, r0
   1a000:	mov	r6, r2
   1a004:	orr	r0, r4, r2
   1a008:	ldr	r2, [fp, #24]
   1a00c:	orr	r0, r0, r2
   1a010:	cmp	r0, #0
   1a014:	blt	1a0d4 <__assert_fail@plt+0x8c20>
   1a018:	adds	sl, r6, r4
   1a01c:	bvs	1a0d4 <__assert_fail@plt+0x8c20>
   1a020:	mov	r5, #0
   1a024:	cmp	r4, #1
   1a028:	blt	1a080 <__assert_fail@plt+0x8bcc>
   1a02c:	mov	r9, r3
   1a030:	cmp	r6, #1
   1a034:	blt	1a088 <__assert_fail@plt+0x8bd4>
   1a038:	mov	r0, sl
   1a03c:	mov	r5, r1
   1a040:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1a044:	cmp	r0, #0
   1a048:	beq	1a0d4 <__assert_fail@plt+0x8c20>
   1a04c:	mov	r1, r8
   1a050:	mov	r2, r6
   1a054:	mov	r7, r0
   1a058:	bl	1125c <memcpy@plt>
   1a05c:	add	r0, r7, r6
   1a060:	mov	r1, r9
   1a064:	mov	r2, r4
   1a068:	bl	1125c <memcpy@plt>
   1a06c:	ldr	r2, [fp, #24]
   1a070:	mov	r1, r5
   1a074:	mov	r4, r7
   1a078:	mov	r5, #0
   1a07c:	b	1a090 <__assert_fail@plt+0x8bdc>
   1a080:	mov	r7, r8
   1a084:	b	1a08c <__assert_fail@plt+0x8bd8>
   1a088:	mov	r7, r9
   1a08c:	mov	r4, #0
   1a090:	ldr	r0, [fp, #20]
   1a094:	ldr	r6, [fp, #16]
   1a098:	ldr	r3, [fp, #12]
   1a09c:	str	r2, [sp, #4]
   1a0a0:	mov	r2, sl
   1a0a4:	str	r5, [sp, #12]
   1a0a8:	str	r0, [sp, #8]
   1a0ac:	mov	r0, r1
   1a0b0:	mov	r1, r7
   1a0b4:	str	r6, [sp]
   1a0b8:	bl	19a30 <__assert_fail@plt+0x857c>
   1a0bc:	mov	r5, r0
   1a0c0:	mov	r0, r4
   1a0c4:	bl	2ae28 <__assert_fail@plt+0x19974>
   1a0c8:	mov	r0, r5
   1a0cc:	sub	sp, fp, #28
   1a0d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0d4:	mvn	r0, #1
   1a0d8:	sub	sp, fp, #28
   1a0dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0e0:	ldrb	ip, [r0, #28]
   1a0e4:	cmp	r2, #0
   1a0e8:	bic	ip, ip, #6
   1a0ec:	orrne	ip, ip, #2
   1a0f0:	strb	ip, [r0, #28]
   1a0f4:	ldr	r0, [sp]
   1a0f8:	moveq	r0, r2
   1a0fc:	cmp	r2, #0
   1a100:	moveq	r3, r2
   1a104:	stm	r1, {r2, r3}
   1a108:	str	r0, [r1, #8]
   1a10c:	bx	lr
   1a110:	push	{r4, sl, fp, lr}
   1a114:	add	fp, sp, #8
   1a118:	mov	r4, r0
   1a11c:	ldr	r0, [r0, #24]
   1a120:	bl	2ae28 <__assert_fail@plt+0x19974>
   1a124:	ldr	r0, [r4, #36]	; 0x24
   1a128:	bl	2ae28 <__assert_fail@plt+0x19974>
   1a12c:	ldr	r0, [r4, #40]	; 0x28
   1a130:	add	r1, r4, #4
   1a134:	cmp	r0, r1
   1a138:	beq	1a14c <__assert_fail@plt+0x8c98>
   1a13c:	ldr	r0, [r0, #8]
   1a140:	bl	2ae28 <__assert_fail@plt+0x19974>
   1a144:	ldr	r0, [r4, #40]	; 0x28
   1a148:	bl	2ae28 <__assert_fail@plt+0x19974>
   1a14c:	ldr	r0, [r4, #12]
   1a150:	bl	2ae28 <__assert_fail@plt+0x19974>
   1a154:	ldr	r0, [r4, #48]	; 0x30
   1a158:	bl	2ae28 <__assert_fail@plt+0x19974>
   1a15c:	ldr	r0, [r4, #44]	; 0x2c
   1a160:	bl	2ae28 <__assert_fail@plt+0x19974>
   1a164:	mov	r0, r4
   1a168:	pop	{r4, sl, fp, lr}
   1a16c:	b	2ae28 <__assert_fail@plt+0x19974>
   1a170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a174:	add	fp, sp, #28
   1a178:	sub	sp, sp, #92	; 0x5c
   1a17c:	mov	r9, r0
   1a180:	ldrb	r0, [r0, #74]	; 0x4a
   1a184:	ldr	r2, [r9, #36]	; 0x24
   1a188:	ldr	r1, [r9, #48]	; 0x30
   1a18c:	ldr	r4, [r9, #28]
   1a190:	cmp	r2, r1
   1a194:	movgt	r2, r1
   1a198:	cmp	r0, #0
   1a19c:	str	r2, [sp]
   1a1a0:	bne	1a1c0 <__assert_fail@plt+0x8d0c>
   1a1a4:	mov	r7, r9
   1a1a8:	ldr	r0, [r7, #64]!	; 0x40
   1a1ac:	cmp	r0, #0
   1a1b0:	bne	1a1c0 <__assert_fail@plt+0x8d0c>
   1a1b4:	ldrb	r0, [r9, #76]	; 0x4c
   1a1b8:	cmp	r0, #0
   1a1bc:	beq	1a1c8 <__assert_fail@plt+0x8d14>
   1a1c0:	ldr	r6, [r9, #32]
   1a1c4:	b	1a3a4 <__assert_fail@plt+0x8ef0>
   1a1c8:	ldr	r0, [sp]
   1a1cc:	cmp	r0, r4
   1a1d0:	ble	1a1e0 <__assert_fail@plt+0x8d2c>
   1a1d4:	add	r8, r9, #16
   1a1d8:	mov	sl, r4
   1a1dc:	b	1a238 <__assert_fail@plt+0x8d84>
   1a1e0:	mov	sl, r4
   1a1e4:	str	r4, [sp, #4]
   1a1e8:	b	1a4b4 <__assert_fail@plt+0x9000>
   1a1ec:	add	r0, r4, #1
   1a1f0:	cmp	r0, #2
   1a1f4:	bcc	1a208 <__assert_fail@plt+0x8d54>
   1a1f8:	ldr	r0, [r9, #36]	; 0x24
   1a1fc:	ldr	r1, [r9, #48]	; 0x30
   1a200:	cmp	r0, r1
   1a204:	blt	1a390 <__assert_fail@plt+0x8edc>
   1a208:	ldr	r0, [r9, #4]
   1a20c:	ldr	r1, [sp, #4]
   1a210:	cmn	r4, #1
   1a214:	strb	sl, [r0, r1]
   1a218:	ldr	r0, [r9, #8]
   1a21c:	str	sl, [r0, r1, lsl #2]
   1a220:	add	sl, r1, #1
   1a224:	bne	1a370 <__assert_fail@plt+0x8ebc>
   1a228:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1a22c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a230:	stm	r8, {r0, r1}
   1a234:	b	1a370 <__assert_fail@plt+0x8ebc>
   1a238:	ldr	r5, [r9, #24]
   1a23c:	ldr	r4, [r9]
   1a240:	str	sl, [sp, #4]
   1a244:	add	r0, r5, sl
   1a248:	ldrb	sl, [r4, r0]
   1a24c:	tst	sl, #128	; 0x80
   1a250:	bne	1a298 <__assert_fail@plt+0x8de4>
   1a254:	mov	r0, r8
   1a258:	bl	11280 <mbsinit@plt>
   1a25c:	cmp	r0, #0
   1a260:	beq	1a298 <__assert_fail@plt+0x8de4>
   1a264:	mov	r0, sl
   1a268:	bl	11490 <towupper@plt>
   1a26c:	cmp	r0, #128	; 0x80
   1a270:	bcs	1a290 <__assert_fail@plt+0x8ddc>
   1a274:	ldr	r2, [sp, #4]
   1a278:	ldr	r1, [r9, #4]
   1a27c:	strb	r0, [r1, r2]
   1a280:	add	sl, r2, #1
   1a284:	ldr	r1, [r9, #8]
   1a288:	str	r0, [r1, r2, lsl #2]
   1a28c:	b	1a370 <__assert_fail@plt+0x8ebc>
   1a290:	ldr	r4, [r9]
   1a294:	ldr	r5, [r9, #24]
   1a298:	ldm	r8, {r0, r1}
   1a29c:	mov	r3, r8
   1a2a0:	str	r1, [fp, #-36]	; 0xffffffdc
   1a2a4:	str	r0, [fp, #-40]	; 0xffffffd8
   1a2a8:	ldm	sp, {r0, r1}
   1a2ac:	sub	r2, r0, r1
   1a2b0:	add	r0, r4, r5
   1a2b4:	add	r1, r0, r1
   1a2b8:	add	r0, sp, #12
   1a2bc:	bl	2ae88 <__assert_fail@plt+0x199d4>
   1a2c0:	mov	r4, r0
   1a2c4:	sub	r0, r0, #1
   1a2c8:	cmn	r0, #4
   1a2cc:	bhi	1a1ec <__assert_fail@plt+0x8d38>
   1a2d0:	ldr	r0, [sp, #12]
   1a2d4:	bl	11490 <towupper@plt>
   1a2d8:	mov	r5, r0
   1a2dc:	ldr	r0, [sp, #12]
   1a2e0:	cmp	r5, r0
   1a2e4:	bne	1a308 <__assert_fail@plt+0x8e54>
   1a2e8:	ldr	r1, [r9]
   1a2ec:	ldr	r2, [r9, #24]
   1a2f0:	ldr	r0, [r9, #4]
   1a2f4:	ldr	r6, [sp, #4]
   1a2f8:	add	r1, r1, r2
   1a2fc:	add	r0, r0, r6
   1a300:	add	r1, r1, r6
   1a304:	b	1a334 <__assert_fail@plt+0x8e80>
   1a308:	add	sl, sp, #16
   1a30c:	mov	r1, r5
   1a310:	sub	r2, fp, #40	; 0x28
   1a314:	mov	r0, sl
   1a318:	bl	111e4 <wcrtomb@plt>
   1a31c:	cmp	r4, r0
   1a320:	bne	1a384 <__assert_fail@plt+0x8ed0>
   1a324:	ldr	r0, [r9, #4]
   1a328:	ldr	r6, [sp, #4]
   1a32c:	mov	r1, sl
   1a330:	add	r0, r0, r6
   1a334:	mov	r2, r4
   1a338:	bl	1125c <memcpy@plt>
   1a33c:	ldr	r0, [r9, #8]
   1a340:	add	sl, r6, #1
   1a344:	str	r5, [r0, r6, lsl #2]
   1a348:	add	r5, r4, r6
   1a34c:	cmp	sl, r5
   1a350:	bge	1a370 <__assert_fail@plt+0x8ebc>
   1a354:	add	r0, r0, r6, lsl #2
   1a358:	mvn	r1, #3
   1a35c:	add	r2, r1, r4, lsl #2
   1a360:	add	r0, r0, #4
   1a364:	mov	r1, #255	; 0xff
   1a368:	bl	113d0 <memset@plt>
   1a36c:	mov	sl, r5
   1a370:	ldr	r0, [sp]
   1a374:	str	sl, [sp, #4]
   1a378:	cmp	r0, sl
   1a37c:	bgt	1a238 <__assert_fail@plt+0x8d84>
   1a380:	b	1a4b4 <__assert_fail@plt+0x9000>
   1a384:	ldr	r6, [sp, #4]
   1a388:	mov	sl, r6
   1a38c:	b	1a3bc <__assert_fail@plt+0x8f08>
   1a390:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1a394:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a398:	stm	r8, {r0, r1}
   1a39c:	ldr	sl, [sp, #4]
   1a3a0:	b	1a4b4 <__assert_fail@plt+0x9000>
   1a3a4:	ldr	r0, [sp]
   1a3a8:	cmp	r4, r0
   1a3ac:	bge	1a4ac <__assert_fail@plt+0x8ff8>
   1a3b0:	add	r7, r9, #64	; 0x40
   1a3b4:	add	r8, r9, #16
   1a3b8:	mov	sl, r4
   1a3bc:	ldm	r8, {r0, r1}
   1a3c0:	str	r6, [sp, #4]
   1a3c4:	str	r0, [fp, #-40]	; 0xffffffd8
   1a3c8:	ldr	r0, [sp]
   1a3cc:	str	r1, [fp, #-36]	; 0xffffffdc
   1a3d0:	sub	r2, r0, sl
   1a3d4:	ldr	r0, [r7]
   1a3d8:	cmp	r0, #0
   1a3dc:	bne	1a4cc <__assert_fail@plt+0x9018>
   1a3e0:	ldr	r0, [r9]
   1a3e4:	ldr	r1, [r9, #24]
   1a3e8:	add	r0, r0, r1
   1a3ec:	add	r4, r0, r6
   1a3f0:	add	r0, sp, #8
   1a3f4:	mov	r1, r4
   1a3f8:	mov	r3, r8
   1a3fc:	bl	2ae88 <__assert_fail@plt+0x199d4>
   1a400:	sub	r6, r0, #1
   1a404:	mov	r5, r0
   1a408:	cmn	r6, #4
   1a40c:	bhi	1a51c <__assert_fail@plt+0x9068>
   1a410:	ldr	r0, [sp, #8]
   1a414:	bl	11490 <towupper@plt>
   1a418:	mov	r7, r0
   1a41c:	ldr	r0, [sp, #8]
   1a420:	cmp	r7, r0
   1a424:	bne	1a434 <__assert_fail@plt+0x8f80>
   1a428:	ldr	r0, [r9, #4]
   1a42c:	mov	r1, r4
   1a430:	b	1a454 <__assert_fail@plt+0x8fa0>
   1a434:	add	r0, sp, #16
   1a438:	sub	r2, fp, #40	; 0x28
   1a43c:	mov	r1, r7
   1a440:	bl	111e4 <wcrtomb@plt>
   1a444:	cmp	r0, r5
   1a448:	bne	1a598 <__assert_fail@plt+0x90e4>
   1a44c:	ldr	r0, [r9, #4]
   1a450:	add	r1, sp, #16
   1a454:	add	r0, r0, sl
   1a458:	mov	r2, r5
   1a45c:	bl	1125c <memcpy@plt>
   1a460:	ldrb	r0, [r9, #76]	; 0x4c
   1a464:	ldr	r6, [sp, #4]
   1a468:	cmp	r0, #0
   1a46c:	bne	1a62c <__assert_fail@plt+0x9178>
   1a470:	ldr	r0, [r9, #8]
   1a474:	add	r4, r5, sl
   1a478:	add	r1, sl, #1
   1a47c:	add	r6, r5, r6
   1a480:	cmp	r1, r4
   1a484:	str	r7, [r0, sl, lsl #2]
   1a488:	bge	1a4a4 <__assert_fail@plt+0x8ff0>
   1a48c:	add	r0, r0, r1, lsl #2
   1a490:	mvn	r1, #3
   1a494:	add	r2, r1, r5, lsl #2
   1a498:	mov	r1, #255	; 0xff
   1a49c:	bl	113d0 <memset@plt>
   1a4a0:	b	1a3a4 <__assert_fail@plt+0x8ef0>
   1a4a4:	mov	r4, r1
   1a4a8:	b	1a3a4 <__assert_fail@plt+0x8ef0>
   1a4ac:	str	r6, [sp, #4]
   1a4b0:	mov	sl, r4
   1a4b4:	ldr	r0, [sp, #4]
   1a4b8:	str	sl, [r9, #28]
   1a4bc:	str	r0, [r9, #32]
   1a4c0:	mov	r0, #0
   1a4c4:	sub	sp, fp, #28
   1a4c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a4cc:	cmp	r2, #1
   1a4d0:	add	r4, sp, #16
   1a4d4:	ldrge	r1, [r9, #80]	; 0x50
   1a4d8:	cmpge	r1, #1
   1a4dc:	blt	1a3f0 <__assert_fail@plt+0x8f3c>
   1a4e0:	ldr	r7, [r9, #24]
   1a4e4:	ldr	r3, [r9]
   1a4e8:	add	r4, sp, #16
   1a4ec:	add	r7, r6, r7
   1a4f0:	add	r3, r3, r7
   1a4f4:	mov	r7, #0
   1a4f8:	ldrb	r5, [r3, r7]
   1a4fc:	ldrb	r5, [r0, r5]
   1a500:	strb	r5, [r4, r7]
   1a504:	add	r7, r7, #1
   1a508:	cmp	r7, r2
   1a50c:	bge	1a3f0 <__assert_fail@plt+0x8f3c>
   1a510:	cmp	r7, r1
   1a514:	blt	1a4f8 <__assert_fail@plt+0x9044>
   1a518:	b	1a3f0 <__assert_fail@plt+0x8f3c>
   1a51c:	add	r0, r5, #1
   1a520:	cmp	r0, #2
   1a524:	bcc	1a538 <__assert_fail@plt+0x9084>
   1a528:	ldr	r0, [r9, #36]	; 0x24
   1a52c:	ldr	r1, [r9, #48]	; 0x30
   1a530:	cmp	r0, r1
   1a534:	blt	1a698 <__assert_fail@plt+0x91e4>
   1a538:	ldr	r2, [r9, #24]
   1a53c:	ldr	r6, [sp, #4]
   1a540:	ldr	r0, [r9]
   1a544:	ldr	r1, [r9, #64]	; 0x40
   1a548:	add	r4, sl, #1
   1a54c:	add	r2, r2, r6
   1a550:	cmp	r1, #0
   1a554:	ldrb	r0, [r0, r2]
   1a558:	ldrbne	r0, [r1, r0]
   1a55c:	ldr	r1, [r9, #4]
   1a560:	strb	r0, [r1, sl]
   1a564:	ldrb	r1, [r9, #76]	; 0x4c
   1a568:	cmp	r1, #0
   1a56c:	ldrne	r1, [r9, #12]
   1a570:	strne	r6, [r1, sl, lsl #2]
   1a574:	add	r6, r6, #1
   1a578:	cmn	r5, #1
   1a57c:	ldr	r1, [r9, #8]
   1a580:	str	r0, [r1, sl, lsl #2]
   1a584:	bne	1a3a4 <__assert_fail@plt+0x8ef0>
   1a588:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1a58c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a590:	stm	r8, {r0, r1}
   1a594:	b	1a3a4 <__assert_fail@plt+0x8ef0>
   1a598:	mov	r3, r0
   1a59c:	cmn	r0, #1
   1a5a0:	beq	1a428 <__assert_fail@plt+0x8f74>
   1a5a4:	ldr	r1, [r9, #36]	; 0x24
   1a5a8:	add	r4, r3, sl
   1a5ac:	cmp	r4, r1
   1a5b0:	bhi	1a698 <__assert_fail@plt+0x91e4>
   1a5b4:	ldr	r0, [r9, #12]
   1a5b8:	cmp	r0, #0
   1a5bc:	bne	1a5dc <__assert_fail@plt+0x9128>
   1a5c0:	lsl	r0, r1, #2
   1a5c4:	mov	r8, r3
   1a5c8:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1a5cc:	mov	r3, r8
   1a5d0:	cmp	r0, #0
   1a5d4:	str	r0, [r9, #12]
   1a5d8:	beq	1a6a8 <__assert_fail@plt+0x91f4>
   1a5dc:	ldrb	r1, [r9, #76]	; 0x4c
   1a5e0:	cmp	r1, #0
   1a5e4:	bne	1a6cc <__assert_fail@plt+0x9218>
   1a5e8:	cmp	sl, #0
   1a5ec:	beq	1a6c4 <__assert_fail@plt+0x9210>
   1a5f0:	mov	r1, #0
   1a5f4:	cmp	sl, #4
   1a5f8:	bcc	1a6b4 <__assert_fail@plt+0x9200>
   1a5fc:	add	r2, pc, #524	; 0x20c
   1a600:	bic	r1, sl, #3
   1a604:	vmov.i32	q8, #4	; 0x00000004
   1a608:	vld1.64	{d18-d19}, [r2 :128]
   1a60c:	mov	ip, r1
   1a610:	mov	r2, r0
   1a614:	vadd.i32	q10, q9, q8
   1a618:	vst1.32	{d18-d19}, [r2]!
   1a61c:	subs	ip, ip, #4
   1a620:	vorr	q9, q10, q10
   1a624:	bne	1a614 <__assert_fail@plt+0x9160>
   1a628:	b	1a6bc <__assert_fail@plt+0x9208>
   1a62c:	ldr	r0, [r9, #12]
   1a630:	mov	r1, #0
   1a634:	cmp	r5, #4
   1a638:	bcc	1a674 <__assert_fail@plt+0x91c0>
   1a63c:	add	r3, pc, #460	; 0x1cc
   1a640:	bic	r1, r5, #3
   1a644:	add	r2, r0, sl, lsl #2
   1a648:	vdup.32	q8, r6
   1a64c:	vmov.i32	q10, #4	; 0x00000004
   1a650:	vld1.64	{d18-d19}, [r3 :128]
   1a654:	mov	r3, r1
   1a658:	vadd.i32	q11, q9, q8
   1a65c:	vadd.i32	q9, q9, q10
   1a660:	subs	r3, r3, #4
   1a664:	vst1.32	{d22-d23}, [r2]!
   1a668:	bne	1a658 <__assert_fail@plt+0x91a4>
   1a66c:	cmp	r5, r1
   1a670:	beq	1a470 <__assert_fail@plt+0x8fbc>
   1a674:	add	r2, r6, r1
   1a678:	sub	r3, r5, r1
   1a67c:	add	r1, sl, r1
   1a680:	add	r0, r0, r1, lsl #2
   1a684:	str	r2, [r0], #4
   1a688:	add	r2, r2, #1
   1a68c:	subs	r3, r3, #1
   1a690:	bne	1a684 <__assert_fail@plt+0x91d0>
   1a694:	b	1a470 <__assert_fail@plt+0x8fbc>
   1a698:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1a69c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a6a0:	stm	r8, {r0, r1}
   1a6a4:	b	1a4b4 <__assert_fail@plt+0x9000>
   1a6a8:	mov	r0, #12
   1a6ac:	sub	sp, fp, #28
   1a6b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6b4:	str	r1, [r0, r1, lsl #2]
   1a6b8:	add	r1, r1, #1
   1a6bc:	cmp	sl, r1
   1a6c0:	bne	1a6b4 <__assert_fail@plt+0x9200>
   1a6c4:	mov	r0, #1
   1a6c8:	strb	r0, [r9, #76]	; 0x4c
   1a6cc:	ldr	r0, [r9, #4]
   1a6d0:	add	r1, sp, #16
   1a6d4:	mov	r2, r3
   1a6d8:	mov	r8, r3
   1a6dc:	add	r0, r0, sl
   1a6e0:	bl	1125c <memcpy@plt>
   1a6e4:	ldr	lr, [r9, #8]
   1a6e8:	ldr	ip, [sp, #4]
   1a6ec:	cmp	r8, #2
   1a6f0:	str	r7, [lr, sl, lsl #2]
   1a6f4:	ldr	r2, [r9, #12]
   1a6f8:	str	ip, [r2, sl, lsl #2]
   1a6fc:	bcc	1a7d0 <__assert_fail@plt+0x931c>
   1a700:	sub	r0, r8, #1
   1a704:	mov	r1, #1
   1a708:	cmp	r0, #4
   1a70c:	bcs	1a718 <__assert_fail@plt+0x9264>
   1a710:	ldr	ip, [sp, #4]
   1a714:	b	1a7a0 <__assert_fail@plt+0x92ec>
   1a718:	str	r0, [sp]
   1a71c:	add	r3, r8, sl
   1a720:	add	r0, sl, #1
   1a724:	add	r7, lr, r0, lsl #2
   1a728:	add	ip, lr, r3, lsl #2
   1a72c:	add	r0, r2, r0, lsl #2
   1a730:	cmp	r0, ip
   1a734:	ldr	ip, [sp, #4]
   1a738:	addcc	r3, r2, r3, lsl #2
   1a73c:	cmpcc	r7, r3
   1a740:	bcc	1a7a0 <__assert_fail@plt+0x92ec>
   1a744:	add	r1, pc, #212	; 0xd4
   1a748:	vdup.32	q8, ip
   1a74c:	vdup.32	q9, r6
   1a750:	vdup.32	q10, r5
   1a754:	vmov.i32	q12, #4	; 0x00000004
   1a758:	vmov.i8	q13, #255	; 0xff
   1a75c:	vld1.64	{d22-d23}, [r1 :128]
   1a760:	ldr	r1, [sp]
   1a764:	bic	ip, r1, #3
   1a768:	orr	r1, ip, #1
   1a76c:	mov	r3, ip
   1a770:	vcgt.u32	q14, q10, q11
   1a774:	subs	r3, r3, #4
   1a778:	vbsl	q14, q11, q9
   1a77c:	vadd.i32	q11, q11, q12
   1a780:	vadd.i32	q14, q14, q8
   1a784:	vst1.32	{d28-d29}, [r0]!
   1a788:	vst1.32	{d26-d27}, [r7]!
   1a78c:	bne	1a770 <__assert_fail@plt+0x92bc>
   1a790:	ldr	r0, [sp]
   1a794:	cmp	r0, ip
   1a798:	ldr	ip, [sp, #4]
   1a79c:	beq	1a7d0 <__assert_fail@plt+0x931c>
   1a7a0:	add	r2, r2, sl, lsl #2
   1a7a4:	add	r0, lr, sl, lsl #2
   1a7a8:	mvn	r3, #0
   1a7ac:	cmp	r1, r5
   1a7b0:	mov	r7, r6
   1a7b4:	movcc	r7, r1
   1a7b8:	add	r7, r7, ip
   1a7bc:	str	r7, [r2, r1, lsl #2]
   1a7c0:	str	r3, [r0, r1, lsl #2]
   1a7c4:	add	r1, r1, #1
   1a7c8:	cmp	r8, r1
   1a7cc:	bne	1a7ac <__assert_fail@plt+0x92f8>
   1a7d0:	ldr	r0, [r9, #48]	; 0x30
   1a7d4:	ldr	r2, [r9, #52]	; 0x34
   1a7d8:	sub	r1, r8, r5
   1a7dc:	mov	r6, ip
   1a7e0:	add	r6, r5, r6
   1a7e4:	add	r0, r0, r1
   1a7e8:	cmp	r2, ip
   1a7ec:	str	r0, [r9, #48]	; 0x30
   1a7f0:	ldrgt	r2, [r9, #56]	; 0x38
   1a7f4:	addgt	r1, r2, r1
   1a7f8:	strgt	r1, [r9, #56]	; 0x38
   1a7fc:	ldr	r1, [r9, #36]	; 0x24
   1a800:	cmp	r1, r0
   1a804:	movgt	r1, r0
   1a808:	str	r1, [sp]
   1a80c:	b	1a3a4 <__assert_fail@plt+0x8ef0>
   1a810:	andeq	r0, r0, r0
   1a814:	andeq	r0, r0, r1
   1a818:	andeq	r0, r0, r2
   1a81c:	andeq	r0, r0, r3
   1a820:	andeq	r0, r0, r1
   1a824:	andeq	r0, r0, r2
   1a828:	andeq	r0, r0, r3
   1a82c:	andeq	r0, r0, r4
   1a830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a834:	add	fp, sp, #28
   1a838:	sub	sp, sp, #68	; 0x44
   1a83c:	mov	r4, r0
   1a840:	ldr	r6, [r0, #28]
   1a844:	ldr	r7, [r0, #36]	; 0x24
   1a848:	ldr	r0, [r0, #48]	; 0x30
   1a84c:	cmp	r7, r0
   1a850:	movgt	r7, r0
   1a854:	cmp	r7, r6
   1a858:	ble	1a9f4 <__assert_fail@plt+0x9540>
   1a85c:	add	r8, r4, #16
   1a860:	mov	r5, sp
   1a864:	ldm	r8, {r9, sl}
   1a868:	ldr	r0, [r4, #64]	; 0x40
   1a86c:	sub	r2, r7, r6
   1a870:	cmp	r0, #0
   1a874:	bne	1a944 <__assert_fail@plt+0x9490>
   1a878:	ldr	r0, [r4]
   1a87c:	ldr	r1, [r4, #24]
   1a880:	add	r0, r0, r1
   1a884:	add	r1, r0, r6
   1a888:	mov	r0, r5
   1a88c:	mov	r3, r8
   1a890:	bl	2ae88 <__assert_fail@plt+0x199d4>
   1a894:	add	r1, r0, #1
   1a898:	cmp	r1, #2
   1a89c:	bcc	1a8b8 <__assert_fail@plt+0x9404>
   1a8a0:	cmn	r0, #2
   1a8a4:	bne	1a8f4 <__assert_fail@plt+0x9440>
   1a8a8:	ldr	r0, [r4, #36]	; 0x24
   1a8ac:	ldr	r1, [r4, #48]	; 0x30
   1a8b0:	cmp	r0, r1
   1a8b4:	blt	1aa08 <__assert_fail@plt+0x9554>
   1a8b8:	ldr	r1, [r4, #24]
   1a8bc:	ldr	r0, [r4]
   1a8c0:	mov	r2, sl
   1a8c4:	mov	sl, r5
   1a8c8:	add	r1, r1, r6
   1a8cc:	ldrb	r1, [r0, r1]
   1a8d0:	str	r1, [sp]
   1a8d4:	ldr	r0, [r4, #64]	; 0x40
   1a8d8:	cmp	r0, #0
   1a8dc:	ldrbne	r1, [r0, r1]
   1a8e0:	mov	r0, #1
   1a8e4:	strne	r1, [sp]
   1a8e8:	str	r9, [r8]
   1a8ec:	str	r2, [r8, #4]
   1a8f0:	b	1a8fc <__assert_fail@plt+0x9448>
   1a8f4:	ldr	r1, [sp]
   1a8f8:	mov	sl, r5
   1a8fc:	ldr	r3, [r4, #8]
   1a900:	add	r5, r0, r6
   1a904:	str	r1, [r3, r6, lsl #2]
   1a908:	add	r1, r6, #1
   1a90c:	cmp	r1, r5
   1a910:	bge	1a930 <__assert_fail@plt+0x947c>
   1a914:	mvn	r1, #3
   1a918:	add	r2, r1, r0, lsl #2
   1a91c:	add	r0, r3, r6, lsl #2
   1a920:	mov	r1, #255	; 0xff
   1a924:	add	r0, r0, #4
   1a928:	bl	113d0 <memset@plt>
   1a92c:	mov	r1, r5
   1a930:	cmp	r7, r1
   1a934:	mov	r6, r1
   1a938:	mov	r5, sl
   1a93c:	bgt	1a864 <__assert_fail@plt+0x93b0>
   1a940:	b	1a9f8 <__assert_fail@plt+0x9544>
   1a944:	cmp	r2, #1
   1a948:	add	r1, sp, #4
   1a94c:	blt	1a888 <__assert_fail@plt+0x93d4>
   1a950:	ldr	r1, [r4, #80]	; 0x50
   1a954:	cmp	r1, #1
   1a958:	add	r1, sp, #4
   1a95c:	blt	1a888 <__assert_fail@plt+0x93d4>
   1a960:	ldm	r4, {r1, r3}
   1a964:	mov	lr, r5
   1a968:	ldr	r5, [r4, #24]
   1a96c:	cmp	r2, #2
   1a970:	add	r5, r6, r5
   1a974:	ldrb	r1, [r1, r5]
   1a978:	mov	r5, lr
   1a97c:	ldrb	r0, [r0, r1]
   1a980:	add	r1, sp, #4
   1a984:	strb	r0, [r3, r6]
   1a988:	strb	r0, [sp, #4]
   1a98c:	blt	1a888 <__assert_fail@plt+0x93d4>
   1a990:	ldr	r0, [r4, #80]	; 0x50
   1a994:	add	r1, sp, #4
   1a998:	cmp	r0, #2
   1a99c:	blt	1a888 <__assert_fail@plt+0x93d4>
   1a9a0:	mov	r0, #1
   1a9a4:	ldm	r4, {r1, ip}
   1a9a8:	ldr	r5, [r4, #24]
   1a9ac:	ldr	r3, [r4, #64]	; 0x40
   1a9b0:	add	r1, r1, r5
   1a9b4:	add	r1, r1, r6
   1a9b8:	ldrb	r1, [r1, r0]
   1a9bc:	ldrb	r1, [r3, r1]
   1a9c0:	add	r3, ip, r6
   1a9c4:	strb	r1, [r3, r0]
   1a9c8:	add	r3, sp, #4
   1a9cc:	strb	r1, [r3, r0]
   1a9d0:	add	r0, r0, #1
   1a9d4:	cmp	r0, r2
   1a9d8:	bge	1a9e8 <__assert_fail@plt+0x9534>
   1a9dc:	ldr	r1, [r4, #80]	; 0x50
   1a9e0:	cmp	r0, r1
   1a9e4:	blt	1a9a4 <__assert_fail@plt+0x94f0>
   1a9e8:	add	r1, sp, #4
   1a9ec:	mov	r5, lr
   1a9f0:	b	1a888 <__assert_fail@plt+0x93d4>
   1a9f4:	mov	r1, r6
   1a9f8:	str	r1, [r4, #28]
   1a9fc:	str	r1, [r4, #32]
   1aa00:	sub	sp, fp, #28
   1aa04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa08:	stm	r8, {r9, sl}
   1aa0c:	mov	r1, r6
   1aa10:	str	r1, [r4, #28]
   1aa14:	str	r1, [r4, #32]
   1aa18:	sub	sp, fp, #28
   1aa1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa24:	add	fp, sp, #28
   1aa28:	sub	sp, sp, #28
   1aa2c:	ldr	r8, [r1]
   1aa30:	mov	r7, r0
   1aa34:	ldr	r6, [fp, #12]
   1aa38:	mov	r5, r2
   1aa3c:	str	r1, [sp, #20]
   1aa40:	str	r3, [sp, #24]
   1aa44:	ldr	r0, [r8, #84]	; 0x54
   1aa48:	str	r6, [sp, #4]
   1aa4c:	str	r0, [sp, #16]
   1aa50:	ldr	r0, [fp, #8]
   1aa54:	str	r0, [sp]
   1aa58:	mov	r0, r7
   1aa5c:	bl	1b5f8 <__assert_fail@plt+0xa144>
   1aa60:	mov	r4, r0
   1aa64:	cmp	r0, #0
   1aa68:	bne	1aa78 <__assert_fail@plt+0x95c4>
   1aa6c:	ldr	r0, [r6]
   1aa70:	cmp	r0, #0
   1aa74:	bne	1ad9c <__assert_fail@plt+0x98e8>
   1aa78:	ldrb	r0, [r5, #4]
   1aa7c:	cmp	r0, #10
   1aa80:	movne	r0, r4
   1aa84:	subne	sp, fp, #28
   1aa88:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa8c:	ldr	r0, [sp, #24]
   1aa90:	mov	r9, #0
   1aa94:	orr	sl, r0, #8388608	; 0x800000
   1aa98:	ldr	r0, [fp, #8]
   1aa9c:	str	sl, [sp, #12]
   1aaa0:	cmp	r0, #0
   1aaa4:	bne	1ab48 <__assert_fail@plt+0x9694>
   1aaa8:	b	1ac00 <__assert_fail@plt+0x974c>
   1aaac:	cmp	r0, #9
   1aab0:	mov	r6, #0
   1aab4:	beq	1ab78 <__assert_fail@plt+0x96c4>
   1aab8:	ldr	r0, [sp, #16]
   1aabc:	ldr	sl, [r8, #84]	; 0x54
   1aac0:	ldr	r1, [sp, #20]
   1aac4:	ldr	r3, [sp, #24]
   1aac8:	mov	r2, r5
   1aacc:	str	r0, [r8, #84]	; 0x54
   1aad0:	ldr	r0, [fp, #8]
   1aad4:	str	r0, [sp]
   1aad8:	ldr	r0, [fp, #12]
   1aadc:	str	r0, [sp, #4]
   1aae0:	mov	r0, r7
   1aae4:	bl	1b5f8 <__assert_fail@plt+0xa144>
   1aae8:	mov	r6, r0
   1aaec:	cmp	r0, #0
   1aaf0:	bne	1ab04 <__assert_fail@plt+0x9650>
   1aaf4:	ldr	r0, [fp, #12]
   1aaf8:	ldr	r0, [r0]
   1aafc:	cmp	r0, #0
   1ab00:	bne	1acec <__assert_fail@plt+0x9838>
   1ab04:	ldr	r0, [r8, #84]	; 0x54
   1ab08:	orr	r0, r0, sl
   1ab0c:	ldr	sl, [sp, #12]
   1ab10:	str	r0, [r8, #84]	; 0x54
   1ab14:	ldr	r1, [r8, #64]	; 0x40
   1ab18:	cmp	r1, #31
   1ab1c:	bne	1ab84 <__assert_fail@plt+0x96d0>
   1ab20:	mov	r0, #996	; 0x3e4
   1ab24:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1ab28:	cmp	r0, #0
   1ab2c:	beq	1ad90 <__assert_fail@plt+0x98dc>
   1ab30:	ldr	r1, [r8, #56]	; 0x38
   1ab34:	str	r1, [r0]
   1ab38:	mov	r1, #0
   1ab3c:	str	r1, [r8, #64]	; 0x40
   1ab40:	str	r0, [r8, #56]	; 0x38
   1ab44:	b	1ab88 <__assert_fail@plt+0x96d4>
   1ab48:	mov	r0, r5
   1ab4c:	mov	r1, r7
   1ab50:	mov	r2, sl
   1ab54:	bl	1ada8 <__assert_fail@plt+0x98f4>
   1ab58:	ldr	r1, [r7, #40]	; 0x28
   1ab5c:	mov	r6, #0
   1ab60:	add	r0, r1, r0
   1ab64:	str	r0, [r7, #40]	; 0x28
   1ab68:	ldrb	r0, [r5, #4]
   1ab6c:	orr	r1, r0, #8
   1ab70:	cmp	r1, #10
   1ab74:	bne	1aaac <__assert_fail@plt+0x95f8>
   1ab78:	ldr	r1, [r8, #64]	; 0x40
   1ab7c:	cmp	r1, #31
   1ab80:	beq	1ab20 <__assert_fail@plt+0x966c>
   1ab84:	ldr	r0, [r8, #56]	; 0x38
   1ab88:	add	r2, r1, #1
   1ab8c:	add	r0, r0, r1, lsl #5
   1ab90:	mov	r1, #10
   1ab94:	cmp	r4, #0
   1ab98:	str	r2, [r8, #64]	; 0x40
   1ab9c:	str	r9, [r0, #4]!
   1aba0:	stmib	r0, {r4, r6, r9}
   1aba4:	str	r9, [r0, #16]
   1aba8:	str	r9, [r0, #20]
   1abac:	str	r1, [r0, #24]
   1abb0:	mvn	r1, #0
   1abb4:	str	r1, [r0, #28]
   1abb8:	strne	r0, [r4]
   1abbc:	cmp	r6, #0
   1abc0:	mov	r4, r0
   1abc4:	strne	r0, [r6]
   1abc8:	ldrb	r1, [r5, #4]
   1abcc:	cmp	r1, #10
   1abd0:	beq	1ab48 <__assert_fail@plt+0x9694>
   1abd4:	b	1ace4 <__assert_fail@plt+0x9830>
   1abd8:	mov	r0, #996	; 0x3e4
   1abdc:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1abe0:	cmp	r0, #0
   1abe4:	beq	1ad90 <__assert_fail@plt+0x98dc>
   1abe8:	ldr	r1, [r8, #56]	; 0x38
   1abec:	str	r1, [r0]
   1abf0:	mov	r1, #0
   1abf4:	str	r1, [r8, #64]	; 0x40
   1abf8:	str	r0, [r8, #56]	; 0x38
   1abfc:	b	1ac98 <__assert_fail@plt+0x97e4>
   1ac00:	mov	r0, r5
   1ac04:	mov	r1, r7
   1ac08:	mov	r2, sl
   1ac0c:	bl	1ada8 <__assert_fail@plt+0x98f4>
   1ac10:	ldr	r1, [r7, #40]	; 0x28
   1ac14:	mov	r6, #0
   1ac18:	add	r0, r1, r0
   1ac1c:	str	r0, [r7, #40]	; 0x28
   1ac20:	ldrb	r0, [r5, #4]
   1ac24:	orr	r0, r0, #8
   1ac28:	cmp	r0, #10
   1ac2c:	beq	1ac88 <__assert_fail@plt+0x97d4>
   1ac30:	ldr	r0, [sp, #16]
   1ac34:	ldr	sl, [r8, #84]	; 0x54
   1ac38:	ldr	r1, [sp, #20]
   1ac3c:	ldr	r3, [sp, #24]
   1ac40:	mov	r2, r5
   1ac44:	str	r0, [r8, #84]	; 0x54
   1ac48:	ldr	r0, [fp, #12]
   1ac4c:	str	r9, [sp]
   1ac50:	str	r0, [sp, #4]
   1ac54:	mov	r0, r7
   1ac58:	bl	1b5f8 <__assert_fail@plt+0xa144>
   1ac5c:	mov	r6, r0
   1ac60:	cmp	r0, #0
   1ac64:	bne	1ac78 <__assert_fail@plt+0x97c4>
   1ac68:	ldr	r0, [fp, #12]
   1ac6c:	ldr	r0, [r0]
   1ac70:	cmp	r0, #0
   1ac74:	bne	1acec <__assert_fail@plt+0x9838>
   1ac78:	ldr	r0, [r8, #84]	; 0x54
   1ac7c:	orr	r0, r0, sl
   1ac80:	ldr	sl, [sp, #12]
   1ac84:	str	r0, [r8, #84]	; 0x54
   1ac88:	ldr	r1, [r8, #64]	; 0x40
   1ac8c:	cmp	r1, #31
   1ac90:	beq	1abd8 <__assert_fail@plt+0x9724>
   1ac94:	ldr	r0, [r8, #56]	; 0x38
   1ac98:	add	r2, r1, #1
   1ac9c:	add	r0, r0, r1, lsl #5
   1aca0:	mov	r1, #10
   1aca4:	cmp	r4, #0
   1aca8:	str	r2, [r8, #64]	; 0x40
   1acac:	str	r9, [r0, #4]!
   1acb0:	stmib	r0, {r4, r6, r9}
   1acb4:	str	r9, [r0, #16]
   1acb8:	str	r9, [r0, #20]
   1acbc:	str	r1, [r0, #24]
   1acc0:	mvn	r1, #0
   1acc4:	str	r1, [r0, #28]
   1acc8:	strne	r0, [r4]
   1accc:	cmp	r6, #0
   1acd0:	mov	r4, r0
   1acd4:	strne	r0, [r6]
   1acd8:	ldrb	r1, [r5, #4]
   1acdc:	cmp	r1, #10
   1ace0:	beq	1ac00 <__assert_fail@plt+0x974c>
   1ace4:	sub	sp, fp, #28
   1ace8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1acec:	cmp	r4, #0
   1acf0:	beq	1ad9c <__assert_fail@plt+0x98e8>
   1acf4:	movw	r5, #255	; 0xff
   1acf8:	movt	r5, #4
   1acfc:	mov	r6, r4
   1ad00:	ldr	r4, [r4, #4]
   1ad04:	cmp	r4, #0
   1ad08:	bne	1acfc <__assert_fail@plt+0x9848>
   1ad0c:	ldr	r4, [r6, #8]
   1ad10:	cmp	r4, #0
   1ad14:	bne	1acfc <__assert_fail@plt+0x9848>
   1ad18:	ldr	r0, [r6, #24]
   1ad1c:	and	r0, r0, r5
   1ad20:	cmp	r0, #3
   1ad24:	beq	1ad5c <__assert_fail@plt+0x98a8>
   1ad28:	cmp	r0, #6
   1ad2c:	bne	1ad64 <__assert_fail@plt+0x98b0>
   1ad30:	ldr	r4, [r6, #20]
   1ad34:	ldr	r0, [r4]
   1ad38:	bl	2ae28 <__assert_fail@plt+0x19974>
   1ad3c:	ldr	r0, [r4, #4]
   1ad40:	bl	2ae28 <__assert_fail@plt+0x19974>
   1ad44:	ldr	r0, [r4, #8]
   1ad48:	bl	2ae28 <__assert_fail@plt+0x19974>
   1ad4c:	ldr	r0, [r4, #12]
   1ad50:	bl	2ae28 <__assert_fail@plt+0x19974>
   1ad54:	mov	r0, r4
   1ad58:	b	1ad60 <__assert_fail@plt+0x98ac>
   1ad5c:	ldr	r0, [r6, #20]
   1ad60:	bl	2ae28 <__assert_fail@plt+0x19974>
   1ad64:	ldr	r0, [r6]
   1ad68:	cmp	r0, #0
   1ad6c:	beq	1ad9c <__assert_fail@plt+0x98e8>
   1ad70:	ldr	r4, [r0, #8]
   1ad74:	cmp	r4, r6
   1ad78:	mov	r6, r0
   1ad7c:	beq	1ad18 <__assert_fail@plt+0x9864>
   1ad80:	cmp	r4, #0
   1ad84:	mov	r6, r0
   1ad88:	beq	1ad18 <__assert_fail@plt+0x9864>
   1ad8c:	b	1acfc <__assert_fail@plt+0x9848>
   1ad90:	ldr	r1, [fp, #12]
   1ad94:	mov	r0, #12
   1ad98:	str	r0, [r1]
   1ad9c:	mov	r0, #0
   1ada0:	sub	sp, fp, #28
   1ada4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ada8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1adac:	add	fp, sp, #24
   1adb0:	sub	sp, sp, #8
   1adb4:	mov	r9, r0
   1adb8:	mov	r7, r1
   1adbc:	ldr	r0, [r1, #40]	; 0x28
   1adc0:	ldr	r1, [r1, #56]	; 0x38
   1adc4:	cmp	r1, r0
   1adc8:	ble	1aeb0 <__assert_fail@plt+0x99fc>
   1adcc:	ldr	r1, [r7, #4]
   1add0:	mov	r5, r9
   1add4:	mov	r8, r2
   1add8:	ldrb	r6, [r1, r0]
   1addc:	strb	r6, [r5], #4
   1ade0:	ldr	r0, [r5]
   1ade4:	bic	r1, r0, #6291456	; 0x600000
   1ade8:	str	r1, [r5]
   1adec:	ldr	r3, [r7, #80]	; 0x50
   1adf0:	cmp	r3, #2
   1adf4:	blt	1ae18 <__assert_fail@plt+0x9964>
   1adf8:	ldr	r2, [r7, #28]
   1adfc:	ldr	r1, [r7, #40]	; 0x28
   1ae00:	cmp	r1, r2
   1ae04:	beq	1ae18 <__assert_fail@plt+0x9964>
   1ae08:	ldr	r2, [r7, #8]
   1ae0c:	ldr	r1, [r2, r1, lsl #2]
   1ae10:	cmn	r1, #1
   1ae14:	beq	1b2f4 <__assert_fail@plt+0x9e40>
   1ae18:	movw	r1, #65280	; 0xff00
   1ae1c:	cmp	r6, #92	; 0x5c
   1ae20:	movt	r1, #65439	; 0xff9f
   1ae24:	bne	1aec8 <__assert_fail@plt+0x9a14>
   1ae28:	ldr	r6, [r7, #40]	; 0x28
   1ae2c:	ldr	r4, [r7, #48]	; 0x30
   1ae30:	add	r2, r6, #1
   1ae34:	cmp	r2, r4
   1ae38:	bge	1af1c <__assert_fail@plt+0x9a68>
   1ae3c:	ldrb	r4, [r7, #75]	; 0x4b
   1ae40:	cmp	r4, #0
   1ae44:	bne	1b588 <__assert_fail@plt+0xa0d4>
   1ae48:	ldr	r3, [r7, #4]
   1ae4c:	ldrb	r6, [r3, r2]
   1ae50:	and	r0, r0, r1
   1ae54:	strb	r6, [r9]
   1ae58:	orr	r4, r0, #1
   1ae5c:	str	r4, [r9, #4]
   1ae60:	ldr	r0, [r7, #80]	; 0x50
   1ae64:	cmp	r0, #2
   1ae68:	blt	1b140 <__assert_fail@plt+0x9c8c>
   1ae6c:	ldr	r0, [r7, #8]
   1ae70:	ldr	r1, [r7, #40]	; 0x28
   1ae74:	add	r0, r0, r1, lsl #2
   1ae78:	ldr	r4, [r0, #4]
   1ae7c:	mov	r0, r4
   1ae80:	bl	113b8 <iswalnum@plt>
   1ae84:	sub	r1, r4, #95	; 0x5f
   1ae88:	cmp	r0, #0
   1ae8c:	clz	r1, r1
   1ae90:	movwne	r0, #1
   1ae94:	lsr	r1, r1, #5
   1ae98:	orr	r0, r1, r0
   1ae9c:	ldr	r1, [r5]
   1aea0:	bic	r1, r1, #4194304	; 0x400000
   1aea4:	orr	r0, r1, r0, lsl #22
   1aea8:	uxtb	r1, r6
   1aeac:	b	1b164 <__assert_fail@plt+0x9cb0>
   1aeb0:	mov	r0, #2
   1aeb4:	mov	r4, #0
   1aeb8:	strb	r0, [r9, #4]
   1aebc:	mov	r0, r4
   1aec0:	sub	sp, fp, #24
   1aec4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1aec8:	and	r0, r0, r1
   1aecc:	orr	r4, r0, #1
   1aed0:	str	r4, [r5]
   1aed4:	ldr	r0, [r7, #80]	; 0x50
   1aed8:	cmp	r0, #2
   1aedc:	blt	1af28 <__assert_fail@plt+0x9a74>
   1aee0:	ldr	r0, [r7, #8]
   1aee4:	ldr	r1, [r7, #40]	; 0x28
   1aee8:	ldr	r4, [r0, r1, lsl #2]
   1aeec:	mov	r0, r4
   1aef0:	bl	113b8 <iswalnum@plt>
   1aef4:	sub	r1, r4, #95	; 0x5f
   1aef8:	cmp	r0, #0
   1aefc:	clz	r1, r1
   1af00:	movwne	r0, #1
   1af04:	lsr	r1, r1, #5
   1af08:	orr	r0, r1, r0
   1af0c:	ldr	r1, [r5]
   1af10:	bic	r1, r1, #4194304	; 0x400000
   1af14:	orr	r0, r1, r0, lsl #22
   1af18:	b	1af48 <__assert_fail@plt+0x9a94>
   1af1c:	and	r0, r0, r1
   1af20:	orr	r0, r0, #36	; 0x24
   1af24:	b	1b308 <__assert_fail@plt+0x9e54>
   1af28:	bl	1137c <__ctype_b_loc@plt>
   1af2c:	ldr	r0, [r0]
   1af30:	cmp	r6, #95	; 0x5f
   1af34:	add	r0, r0, r6, lsl #1
   1af38:	ldrh	r0, [r0]
   1af3c:	ubfx	r0, r0, #3, #1
   1af40:	movweq	r0, #1
   1af44:	orr	r0, r4, r0, lsl #22
   1af48:	sub	r1, r6, #10
   1af4c:	mov	r4, #1
   1af50:	str	r0, [r5]
   1af54:	cmp	r1, #115	; 0x73
   1af58:	bhi	1b57c <__assert_fail@plt+0xa0c8>
   1af5c:	add	r2, pc, #0
   1af60:	ldr	pc, [r2, r1, lsl #2]
   1af64:	andeq	fp, r1, r4, lsr r1
   1af68:	andeq	fp, r1, ip, ror r5
   1af6c:	andeq	fp, r1, ip, ror r5
   1af70:	andeq	fp, r1, ip, ror r5
   1af74:	andeq	fp, r1, ip, ror r5
   1af78:	andeq	fp, r1, ip, ror r5
   1af7c:	andeq	fp, r1, ip, ror r5
   1af80:	andeq	fp, r1, ip, ror r5
   1af84:	andeq	fp, r1, ip, ror r5
   1af88:	andeq	fp, r1, ip, ror r5
   1af8c:	andeq	fp, r1, ip, ror r5
   1af90:	andeq	fp, r1, ip, ror r5
   1af94:	andeq	fp, r1, ip, ror r5
   1af98:	andeq	fp, r1, ip, ror r5
   1af9c:	andeq	fp, r1, ip, ror r5
   1afa0:	andeq	fp, r1, ip, ror r5
   1afa4:	andeq	fp, r1, ip, ror r5
   1afa8:	andeq	fp, r1, ip, ror r5
   1afac:	andeq	fp, r1, ip, ror r5
   1afb0:	andeq	fp, r1, ip, ror r5
   1afb4:	andeq	fp, r1, ip, ror r5
   1afb8:	andeq	fp, r1, ip, ror r5
   1afbc:	andeq	fp, r1, ip, ror r5
   1afc0:	andeq	fp, r1, ip, ror r5
   1afc4:	andeq	fp, r1, ip, ror r5
   1afc8:	andeq	fp, r1, ip, ror r5
   1afcc:	andeq	fp, r1, ip, lsl r3
   1afd0:	andeq	fp, r1, ip, ror r5
   1afd4:	andeq	fp, r1, ip, ror r5
   1afd8:	andeq	fp, r1, ip, ror r5
   1afdc:	andeq	fp, r1, r4, ror r3
   1afe0:	andeq	fp, r1, r0, lsl #7
   1afe4:	andeq	fp, r1, ip, lsl #7
   1afe8:	muleq	r1, r4, r3
   1afec:	andeq	fp, r1, ip, ror r5
   1aff0:	andeq	fp, r1, ip, ror r5
   1aff4:	andeq	fp, r1, r4, lsr #7
   1aff8:	andeq	fp, r1, ip, ror r5
   1affc:	andeq	fp, r1, ip, ror r5
   1b000:	andeq	fp, r1, ip, ror r5
   1b004:	andeq	fp, r1, ip, ror r5
   1b008:	andeq	fp, r1, ip, ror r5
   1b00c:	andeq	fp, r1, ip, ror r5
   1b010:	andeq	fp, r1, ip, ror r5
   1b014:	andeq	fp, r1, ip, ror r5
   1b018:	andeq	fp, r1, ip, ror r5
   1b01c:	andeq	fp, r1, ip, ror r5
   1b020:	andeq	fp, r1, ip, ror r5
   1b024:	andeq	fp, r1, ip, ror r5
   1b028:	andeq	fp, r1, ip, ror r5
   1b02c:	andeq	fp, r1, ip, ror r5
   1b030:	andeq	fp, r1, ip, ror r5
   1b034:	andeq	fp, r1, ip, ror r5
   1b038:	andeq	fp, r1, ip, lsr #7
   1b03c:	andeq	fp, r1, ip, ror r5
   1b040:	andeq	fp, r1, ip, ror r5
   1b044:	andeq	fp, r1, ip, ror r5
   1b048:	andeq	fp, r1, ip, ror r5
   1b04c:	andeq	fp, r1, ip, ror r5
   1b050:	andeq	fp, r1, ip, ror r5
   1b054:	andeq	fp, r1, ip, ror r5
   1b058:	andeq	fp, r1, ip, ror r5
   1b05c:	andeq	fp, r1, ip, ror r5
   1b060:	andeq	fp, r1, ip, ror r5
   1b064:	andeq	fp, r1, ip, ror r5
   1b068:	andeq	fp, r1, ip, ror r5
   1b06c:	andeq	fp, r1, ip, ror r5
   1b070:	andeq	fp, r1, ip, ror r5
   1b074:	andeq	fp, r1, ip, ror r5
   1b078:	andeq	fp, r1, ip, ror r5
   1b07c:	andeq	fp, r1, ip, ror r5
   1b080:	andeq	fp, r1, ip, ror r5
   1b084:	andeq	fp, r1, ip, ror r5
   1b088:	andeq	fp, r1, ip, ror r5
   1b08c:	andeq	fp, r1, ip, ror r5
   1b090:	andeq	fp, r1, ip, ror r5
   1b094:	andeq	fp, r1, ip, ror r5
   1b098:	andeq	fp, r1, ip, ror r5
   1b09c:	andeq	fp, r1, ip, ror r5
   1b0a0:	andeq	fp, r1, ip, ror r5
   1b0a4:	andeq	fp, r1, ip, ror r5
   1b0a8:			; <UNDEFINED> instruction: 0x0001b3bc
   1b0ac:	andeq	fp, r1, ip, ror r5
   1b0b0:	andeq	fp, r1, ip, ror r5
   1b0b4:	andeq	fp, r1, r4, asr #7
   1b0b8:	andeq	fp, r1, ip, ror r5
   1b0bc:	andeq	fp, r1, ip, ror r5
   1b0c0:	andeq	fp, r1, ip, ror r5
   1b0c4:	andeq	fp, r1, ip, ror r5
   1b0c8:	andeq	fp, r1, ip, ror r5
   1b0cc:	andeq	fp, r1, ip, ror r5
   1b0d0:	andeq	fp, r1, ip, ror r5
   1b0d4:	andeq	fp, r1, ip, ror r5
   1b0d8:	andeq	fp, r1, ip, ror r5
   1b0dc:	andeq	fp, r1, ip, ror r5
   1b0e0:	andeq	fp, r1, ip, ror r5
   1b0e4:	andeq	fp, r1, ip, ror r5
   1b0e8:	andeq	fp, r1, ip, ror r5
   1b0ec:	andeq	fp, r1, ip, ror r5
   1b0f0:	andeq	fp, r1, ip, ror r5
   1b0f4:	andeq	fp, r1, ip, ror r5
   1b0f8:	andeq	fp, r1, ip, ror r5
   1b0fc:	andeq	fp, r1, ip, ror r5
   1b100:	andeq	fp, r1, ip, ror r5
   1b104:	andeq	fp, r1, ip, ror r5
   1b108:	andeq	fp, r1, ip, ror r5
   1b10c:	andeq	fp, r1, ip, ror r5
   1b110:	andeq	fp, r1, ip, ror r5
   1b114:	andeq	fp, r1, ip, ror r5
   1b118:	andeq	fp, r1, ip, ror r5
   1b11c:	andeq	fp, r1, ip, ror r5
   1b120:	andeq	fp, r1, ip, ror r5
   1b124:	andeq	fp, r1, ip, ror r5
   1b128:	strdeq	fp, [r1], -r4
   1b12c:	andeq	fp, r1, r4, lsl #8
   1b130:	andeq	fp, r1, r8, lsl r4
   1b134:	tst	r8, #2048	; 0x800
   1b138:	bne	1b410 <__assert_fail@plt+0x9f5c>
   1b13c:	b	1b57c <__assert_fail@plt+0xa0c8>
   1b140:	bl	1137c <__ctype_b_loc@plt>
   1b144:	ldr	r0, [r0]
   1b148:	uxtb	r1, r6
   1b14c:	cmp	r1, #95	; 0x5f
   1b150:	add	r0, r0, r1, lsl #1
   1b154:	ldrh	r0, [r0]
   1b158:	ubfx	r0, r0, #3, #1
   1b15c:	movweq	r0, #1
   1b160:	orr	r0, r4, r0, lsl #22
   1b164:	mvn	r2, #38	; 0x26
   1b168:	mov	r4, #2
   1b16c:	str	r0, [r5]
   1b170:	uxtab	r2, r2, r6
   1b174:	cmp	r2, #86	; 0x56
   1b178:	bhi	1b57c <__assert_fail@plt+0xa0c8>
   1b17c:	add	r3, pc, #0
   1b180:	ldr	pc, [r3, r2, lsl #2]
   1b184:	andeq	fp, r1, r4, asr r4
   1b188:	andeq	fp, r1, r4, ror #8
   1b18c:	andeq	fp, r1, r4, ror r4
   1b190:	andeq	fp, r1, ip, ror r5
   1b194:	andeq	fp, r1, r4, lsl #9
   1b198:	andeq	fp, r1, ip, ror r5
   1b19c:	andeq	fp, r1, ip, ror r5
   1b1a0:	andeq	fp, r1, ip, ror r5
   1b1a4:	andeq	fp, r1, ip, ror r5
   1b1a8:	andeq	fp, r1, ip, ror r5
   1b1ac:	andeq	fp, r1, r0, ror #5
   1b1b0:	andeq	fp, r1, r0, ror #5
   1b1b4:	andeq	fp, r1, r0, ror #5
   1b1b8:	andeq	fp, r1, r0, ror #5
   1b1bc:	andeq	fp, r1, r0, ror #5
   1b1c0:	andeq	fp, r1, r0, ror #5
   1b1c4:	andeq	fp, r1, r0, ror #5
   1b1c8:	andeq	fp, r1, r0, ror #5
   1b1cc:	andeq	fp, r1, r0, ror #5
   1b1d0:	andeq	fp, r1, ip, ror r5
   1b1d4:	andeq	fp, r1, ip, ror r5
   1b1d8:	muleq	r1, ip, r4
   1b1dc:	andeq	fp, r1, ip, ror r5
   1b1e0:	andeq	fp, r1, ip, lsr #9
   1b1e4:			; <UNDEFINED> instruction: 0x0001b4bc
   1b1e8:	andeq	fp, r1, ip, ror r5
   1b1ec:	andeq	fp, r1, ip, ror r5
   1b1f0:	ldrdeq	fp, [r1], -r4
   1b1f4:	andeq	fp, r1, ip, ror r5
   1b1f8:	andeq	fp, r1, ip, ror r5
   1b1fc:	andeq	fp, r1, ip, ror r5
   1b200:	andeq	fp, r1, ip, ror r5
   1b204:	andeq	fp, r1, ip, ror r5
   1b208:	andeq	fp, r1, ip, ror r5
   1b20c:	andeq	fp, r1, ip, ror r5
   1b210:	andeq	fp, r1, ip, ror r5
   1b214:	andeq	fp, r1, ip, ror r5
   1b218:	andeq	fp, r1, ip, ror r5
   1b21c:	andeq	fp, r1, ip, ror r5
   1b220:	andeq	fp, r1, ip, ror r5
   1b224:	andeq	fp, r1, ip, ror r5
   1b228:	andeq	fp, r1, ip, ror r5
   1b22c:	andeq	fp, r1, ip, ror r5
   1b230:	andeq	fp, r1, ip, ror r5
   1b234:	andeq	fp, r1, r4, ror #9
   1b238:	andeq	fp, r1, ip, ror r5
   1b23c:	andeq	fp, r1, ip, ror r5
   1b240:	andeq	fp, r1, ip, ror r5
   1b244:	strdeq	fp, [r1], -r4
   1b248:	andeq	fp, r1, ip, ror r5
   1b24c:	andeq	fp, r1, ip, ror r5
   1b250:	andeq	fp, r1, ip, ror r5
   1b254:	andeq	fp, r1, ip, ror r5
   1b258:	andeq	fp, r1, ip, ror r5
   1b25c:	andeq	fp, r1, ip, ror r5
   1b260:	andeq	fp, r1, ip, ror r5
   1b264:	andeq	fp, r1, ip, ror r5
   1b268:	andeq	fp, r1, r4, lsl #10
   1b26c:	andeq	fp, r1, ip, ror r5
   1b270:	andeq	fp, r1, r4, lsl r5
   1b274:	andeq	fp, r1, ip, ror r5
   1b278:	andeq	fp, r1, ip, ror r5
   1b27c:	andeq	fp, r1, ip, ror r5
   1b280:	andeq	fp, r1, ip, ror r5
   1b284:	andeq	fp, r1, ip, ror r5
   1b288:	andeq	fp, r1, ip, ror r5
   1b28c:	andeq	fp, r1, ip, ror r5
   1b290:	andeq	fp, r1, ip, ror r5
   1b294:	andeq	fp, r1, ip, ror r5
   1b298:	andeq	fp, r1, ip, ror r5
   1b29c:	andeq	fp, r1, ip, ror r5
   1b2a0:	andeq	fp, r1, ip, ror r5
   1b2a4:	andeq	fp, r1, ip, ror r5
   1b2a8:	andeq	fp, r1, ip, ror r5
   1b2ac:	andeq	fp, r1, ip, ror r5
   1b2b0:	andeq	fp, r1, ip, ror r5
   1b2b4:	andeq	fp, r1, r4, lsr #10
   1b2b8:	andeq	fp, r1, ip, ror r5
   1b2bc:	andeq	fp, r1, ip, ror r5
   1b2c0:	andeq	fp, r1, ip, ror r5
   1b2c4:	andeq	fp, r1, r4, lsr r5
   1b2c8:	andeq	fp, r1, ip, ror r5
   1b2cc:	andeq	fp, r1, ip, ror r5
   1b2d0:	andeq	fp, r1, ip, ror r5
   1b2d4:	andeq	fp, r1, r4, asr #10
   1b2d8:	andeq	fp, r1, r8, asr r5
   1b2dc:	andeq	fp, r1, r4, ror #10
   1b2e0:	tst	r8, #16384	; 0x4000
   1b2e4:	bne	1b57c <__assert_fail@plt+0xa0c8>
   1b2e8:	sub	r1, r1, #49	; 0x31
   1b2ec:	mov	r2, #4
   1b2f0:	b	1b3dc <__assert_fail@plt+0x9f28>
   1b2f4:	movw	r1, #65280	; 0xff00
   1b2f8:	movt	r1, #65439	; 0xff9f
   1b2fc:	and	r0, r0, r1
   1b300:	orr	r0, r0, #1
   1b304:	orr	r0, r0, #2097152	; 0x200000
   1b308:	str	r0, [r5]
   1b30c:	mov	r4, #1
   1b310:	mov	r0, r4
   1b314:	sub	sp, fp, #24
   1b318:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b31c:	tst	r8, #8
   1b320:	bne	1b36c <__assert_fail@plt+0x9eb8>
   1b324:	ldr	r1, [r7, #40]	; 0x28
   1b328:	ldr	r2, [r7, #48]	; 0x30
   1b32c:	add	r1, r1, #1
   1b330:	cmp	r1, r2
   1b334:	beq	1b36c <__assert_fail@plt+0x9eb8>
   1b338:	str	r1, [r7, #40]	; 0x28
   1b33c:	mov	r0, sp
   1b340:	mov	r1, r7
   1b344:	mov	r2, r8
   1b348:	bl	1ada8 <__assert_fail@plt+0x98f4>
   1b34c:	ldr	r0, [r7, #40]	; 0x28
   1b350:	sub	r0, r0, #1
   1b354:	str	r0, [r7, #40]	; 0x28
   1b358:	ldrb	r0, [sp, #4]
   1b35c:	sub	r0, r0, #9
   1b360:	cmp	r0, #1
   1b364:	bhi	1b57c <__assert_fail@plt+0xa0c8>
   1b368:	ldr	r0, [r5]
   1b36c:	mov	r1, #32
   1b370:	b	1b3d8 <__assert_fail@plt+0x9f24>
   1b374:	tst	r8, #8192	; 0x2000
   1b378:	bne	1b46c <__assert_fail@plt+0x9fb8>
   1b37c:	b	1b57c <__assert_fail@plt+0xa0c8>
   1b380:	tst	r8, #8192	; 0x2000
   1b384:	bne	1b47c <__assert_fail@plt+0x9fc8>
   1b388:	b	1b57c <__assert_fail@plt+0xa0c8>
   1b38c:	mov	r1, #11
   1b390:	b	1b574 <__assert_fail@plt+0xa0c0>
   1b394:	movw	r1, #1026	; 0x402
   1b398:	tst	r8, r1
   1b39c:	bne	1b57c <__assert_fail@plt+0xa0c8>
   1b3a0:	b	1b494 <__assert_fail@plt+0x9fe0>
   1b3a4:	mov	r1, #5
   1b3a8:	b	1b574 <__assert_fail@plt+0xa0c0>
   1b3ac:	movw	r1, #1026	; 0x402
   1b3b0:	tst	r8, r1
   1b3b4:	bne	1b57c <__assert_fail@plt+0xa0c8>
   1b3b8:	b	1b4cc <__assert_fail@plt+0xa018>
   1b3bc:	mov	r1, #20
   1b3c0:	b	1b574 <__assert_fail@plt+0xa0c0>
   1b3c4:	movw	r1, #8
   1b3c8:	movt	r1, #128	; 0x80
   1b3cc:	tst	r8, r1
   1b3d0:	beq	1b428 <__assert_fail@plt+0x9f74>
   1b3d4:	mov	r1, #16
   1b3d8:	mov	r2, #12
   1b3dc:	bfi	r0, r2, #0, #8
   1b3e0:	str	r1, [r9]
   1b3e4:	str	r0, [r9, #4]
   1b3e8:	mov	r0, r4
   1b3ec:	sub	sp, fp, #24
   1b3f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b3f4:	and	r1, r8, #4608	; 0x1200
   1b3f8:	cmp	r1, #4608	; 0x1200
   1b3fc:	beq	1b550 <__assert_fail@plt+0xa09c>
   1b400:	b	1b57c <__assert_fail@plt+0xa0c8>
   1b404:	and	r1, r8, #33792	; 0x8400
   1b408:	cmp	r1, #32768	; 0x8000
   1b40c:	bne	1b57c <__assert_fail@plt+0xa0c8>
   1b410:	mov	r1, #10
   1b414:	b	1b574 <__assert_fail@plt+0xa0c0>
   1b418:	and	r1, r8, #4608	; 0x1200
   1b41c:	cmp	r1, #4608	; 0x1200
   1b420:	beq	1b570 <__assert_fail@plt+0xa0bc>
   1b424:	b	1b57c <__assert_fail@plt+0xa0c8>
   1b428:	ldr	r1, [r7, #40]	; 0x28
   1b42c:	cmp	r1, #0
   1b430:	beq	1b3d4 <__assert_fail@plt+0x9f20>
   1b434:	tst	r8, #2048	; 0x800
   1b438:	beq	1b57c <__assert_fail@plt+0xa0c8>
   1b43c:	ldr	r2, [r7, #4]
   1b440:	add	r1, r2, r1
   1b444:	ldrb	r1, [r1, #-1]
   1b448:	cmp	r1, #10
   1b44c:	beq	1b3d4 <__assert_fail@plt+0x9f20>
   1b450:	b	1b57c <__assert_fail@plt+0xa0c8>
   1b454:	tst	r8, #524288	; 0x80000
   1b458:	bne	1b57c <__assert_fail@plt+0xa0c8>
   1b45c:	mov	r1, #128	; 0x80
   1b460:	b	1b3d8 <__assert_fail@plt+0x9f24>
   1b464:	tst	r8, #8192	; 0x2000
   1b468:	bne	1b57c <__assert_fail@plt+0xa0c8>
   1b46c:	mov	r1, #8
   1b470:	b	1b574 <__assert_fail@plt+0xa0c0>
   1b474:	tst	r8, #8192	; 0x2000
   1b478:	bne	1b57c <__assert_fail@plt+0xa0c8>
   1b47c:	mov	r1, #9
   1b480:	b	1b574 <__assert_fail@plt+0xa0c0>
   1b484:	movw	r1, #1026	; 0x402
   1b488:	and	r1, r8, r1
   1b48c:	cmp	r1, #2
   1b490:	bne	1b57c <__assert_fail@plt+0xa0c8>
   1b494:	mov	r1, #18
   1b498:	b	1b574 <__assert_fail@plt+0xa0c0>
   1b49c:	tst	r8, #524288	; 0x80000
   1b4a0:	bne	1b57c <__assert_fail@plt+0xa0c8>
   1b4a4:	mov	r1, #6
   1b4a8:	b	1b3d8 <__assert_fail@plt+0x9f24>
   1b4ac:	tst	r8, #524288	; 0x80000
   1b4b0:	bne	1b57c <__assert_fail@plt+0xa0c8>
   1b4b4:	mov	r1, #9
   1b4b8:	b	1b3d8 <__assert_fail@plt+0x9f24>
   1b4bc:	movw	r1, #1026	; 0x402
   1b4c0:	and	r1, r8, r1
   1b4c4:	cmp	r1, #2
   1b4c8:	bne	1b57c <__assert_fail@plt+0xa0c8>
   1b4cc:	mov	r1, #19
   1b4d0:	b	1b574 <__assert_fail@plt+0xa0c0>
   1b4d4:	tst	r8, #524288	; 0x80000
   1b4d8:	bne	1b57c <__assert_fail@plt+0xa0c8>
   1b4dc:	mov	r1, #512	; 0x200
   1b4e0:	b	1b3d8 <__assert_fail@plt+0x9f24>
   1b4e4:	tst	r8, #524288	; 0x80000
   1b4e8:	bne	1b57c <__assert_fail@plt+0xa0c8>
   1b4ec:	mov	r1, #35	; 0x23
   1b4f0:	b	1b574 <__assert_fail@plt+0xa0c0>
   1b4f4:	tst	r8, #524288	; 0x80000
   1b4f8:	bne	1b57c <__assert_fail@plt+0xa0c8>
   1b4fc:	mov	r1, #33	; 0x21
   1b500:	b	1b574 <__assert_fail@plt+0xa0c0>
   1b504:	tst	r8, #524288	; 0x80000
   1b508:	bne	1b57c <__assert_fail@plt+0xa0c8>
   1b50c:	mov	r1, #64	; 0x40
   1b510:	b	1b3d8 <__assert_fail@plt+0x9f24>
   1b514:	tst	r8, #524288	; 0x80000
   1b518:	bne	1b57c <__assert_fail@plt+0xa0c8>
   1b51c:	mov	r1, #256	; 0x100
   1b520:	b	1b3d8 <__assert_fail@plt+0x9f24>
   1b524:	tst	r8, #524288	; 0x80000
   1b528:	bne	1b57c <__assert_fail@plt+0xa0c8>
   1b52c:	mov	r1, #34	; 0x22
   1b530:	b	1b574 <__assert_fail@plt+0xa0c0>
   1b534:	tst	r8, #524288	; 0x80000
   1b538:	bne	1b57c <__assert_fail@plt+0xa0c8>
   1b53c:	mov	r1, #32
   1b540:	b	1b574 <__assert_fail@plt+0xa0c0>
   1b544:	and	r1, r8, #4608	; 0x1200
   1b548:	cmp	r1, #512	; 0x200
   1b54c:	bne	1b57c <__assert_fail@plt+0xa0c8>
   1b550:	mov	r1, #23
   1b554:	b	1b574 <__assert_fail@plt+0xa0c0>
   1b558:	tst	r8, #33792	; 0x8400
   1b55c:	bne	1b57c <__assert_fail@plt+0xa0c8>
   1b560:	b	1b410 <__assert_fail@plt+0x9f5c>
   1b564:	and	r1, r8, #4608	; 0x1200
   1b568:	cmp	r1, #512	; 0x200
   1b56c:	bne	1b57c <__assert_fail@plt+0xa0c8>
   1b570:	mov	r1, #24
   1b574:	bfi	r0, r1, #0, #8
   1b578:	str	r0, [r5]
   1b57c:	mov	r0, r4
   1b580:	sub	sp, fp, #24
   1b584:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b588:	cmp	r3, #2
   1b58c:	blt	1b5bc <__assert_fail@plt+0xa108>
   1b590:	ldr	r3, [r7, #8]
   1b594:	ldr	r4, [r3, r2, lsl #2]
   1b598:	cmn	r4, #1
   1b59c:	beq	1ae48 <__assert_fail@plt+0x9994>
   1b5a0:	ldr	r4, [r7, #28]
   1b5a4:	add	r6, r6, #2
   1b5a8:	cmp	r4, r6
   1b5ac:	beq	1b5bc <__assert_fail@plt+0xa108>
   1b5b0:	ldr	r3, [r3, r6, lsl #2]
   1b5b4:	cmn	r3, #1
   1b5b8:	beq	1ae48 <__assert_fail@plt+0x9994>
   1b5bc:	ldrb	r3, [r7, #76]	; 0x4c
   1b5c0:	mov	r6, r2
   1b5c4:	ldr	r4, [r7, #24]
   1b5c8:	ldr	ip, [r7]
   1b5cc:	cmp	r3, #0
   1b5d0:	ldrne	r6, [r7, #12]
   1b5d4:	ldrne	r6, [r6, r2, lsl #2]
   1b5d8:	cmp	r3, #0
   1b5dc:	add	r6, r4, r6
   1b5e0:	add	r6, ip, r6
   1b5e4:	ldrsb	r6, [r6]
   1b5e8:	beq	1ae50 <__assert_fail@plt+0x999c>
   1b5ec:	cmn	r6, #1
   1b5f0:	ble	1ae48 <__assert_fail@plt+0x9994>
   1b5f4:	b	1ae50 <__assert_fail@plt+0x999c>
   1b5f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b5fc:	add	fp, sp, #28
   1b600:	sub	sp, sp, #12
   1b604:	mov	r4, r1
   1b608:	ldr	r8, [r1]
   1b60c:	ldr	r1, [fp, #8]
   1b610:	ldr	r5, [fp, #12]
   1b614:	mov	r7, r2
   1b618:	str	r0, [sp, #8]
   1b61c:	mov	sl, r3
   1b620:	mov	r9, r1
   1b624:	str	r1, [sp]
   1b628:	mov	r1, r4
   1b62c:	str	r5, [sp, #4]
   1b630:	bl	1ba60 <__assert_fail@plt+0xa5ac>
   1b634:	mov	r3, r5
   1b638:	mov	r5, r0
   1b63c:	mov	r0, #0
   1b640:	cmp	r5, #0
   1b644:	bne	1b654 <__assert_fail@plt+0xa1a0>
   1b648:	ldr	r1, [r3]
   1b64c:	cmp	r1, #0
   1b650:	bne	1b854 <__assert_fail@plt+0xa3a0>
   1b654:	cmp	r9, #0
   1b658:	bne	1b76c <__assert_fail@plt+0xa2b8>
   1b65c:	mov	r9, #0
   1b660:	ldrb	r0, [r7, #4]
   1b664:	orr	r0, r0, #8
   1b668:	cmp	r0, #10
   1b66c:	bne	1b68c <__assert_fail@plt+0xa1d8>
   1b670:	b	1b850 <__assert_fail@plt+0xa39c>
   1b674:	cmp	r5, #0
   1b678:	moveq	r5, r6
   1b67c:	ldrb	r0, [r7, #4]
   1b680:	orr	r0, r0, #8
   1b684:	cmp	r0, #10
   1b688:	beq	1b850 <__assert_fail@plt+0xa39c>
   1b68c:	ldr	r0, [sp, #8]
   1b690:	str	r3, [sp, #4]
   1b694:	mov	r1, r4
   1b698:	mov	r2, r7
   1b69c:	mov	r3, sl
   1b6a0:	str	r9, [sp]
   1b6a4:	bl	1ba60 <__assert_fail@plt+0xa5ac>
   1b6a8:	ldr	r3, [fp, #12]
   1b6ac:	cmp	r5, #0
   1b6b0:	mov	r2, r5
   1b6b4:	mov	r6, r0
   1b6b8:	movwne	r2, #1
   1b6bc:	cmp	r0, #0
   1b6c0:	bne	1b6d0 <__assert_fail@plt+0xa21c>
   1b6c4:	ldr	r1, [r3]
   1b6c8:	cmp	r1, #0
   1b6cc:	bne	1b85c <__assert_fail@plt+0xa3a8>
   1b6d0:	cmp	r5, #0
   1b6d4:	cmpne	r6, #0
   1b6d8:	beq	1b674 <__assert_fail@plt+0xa1c0>
   1b6dc:	ldr	r1, [r8, #64]	; 0x40
   1b6e0:	cmp	r1, #31
   1b6e4:	beq	1b738 <__assert_fail@plt+0xa284>
   1b6e8:	ldr	r0, [r8, #56]	; 0x38
   1b6ec:	add	r2, r1, #1
   1b6f0:	add	r0, r0, r1, lsl #5
   1b6f4:	mov	r1, #16
   1b6f8:	str	r2, [r8, #64]	; 0x40
   1b6fc:	str	r9, [r0, #4]!
   1b700:	stmib	r0, {r5, r6, r9}
   1b704:	str	r9, [r0, #16]
   1b708:	str	r9, [r0, #20]
   1b70c:	str	r1, [r0, #24]
   1b710:	mvn	r1, #0
   1b714:	str	r1, [r0, #28]
   1b718:	str	r0, [r5]
   1b71c:	str	r0, [r6]
   1b720:	mov	r5, r0
   1b724:	ldrb	r0, [r7, #4]
   1b728:	orr	r0, r0, #8
   1b72c:	cmp	r0, #10
   1b730:	bne	1b68c <__assert_fail@plt+0xa1d8>
   1b734:	b	1b850 <__assert_fail@plt+0xa39c>
   1b738:	mov	r0, #996	; 0x3e4
   1b73c:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1b740:	cmp	r0, #0
   1b744:	beq	1b908 <__assert_fail@plt+0xa454>
   1b748:	ldr	r1, [r8, #56]	; 0x38
   1b74c:	ldr	r3, [fp, #12]
   1b750:	str	r1, [r0]
   1b754:	mov	r1, #0
   1b758:	str	r1, [r8, #64]	; 0x40
   1b75c:	str	r0, [r8, #56]	; 0x38
   1b760:	b	1b6ec <__assert_fail@plt+0xa238>
   1b764:	cmp	r5, #0
   1b768:	moveq	r5, r6
   1b76c:	ldrb	r0, [r7, #4]
   1b770:	orr	r1, r0, #8
   1b774:	cmp	r1, #10
   1b778:	cmpne	r0, #9
   1b77c:	beq	1b850 <__assert_fail@plt+0xa39c>
   1b780:	ldr	r0, [sp, #8]
   1b784:	str	r3, [sp, #4]
   1b788:	mov	r1, r4
   1b78c:	mov	r2, r7
   1b790:	mov	r3, sl
   1b794:	str	r9, [sp]
   1b798:	bl	1ba60 <__assert_fail@plt+0xa5ac>
   1b79c:	ldr	r3, [fp, #12]
   1b7a0:	cmp	r5, #0
   1b7a4:	mov	r2, r5
   1b7a8:	mov	r6, r0
   1b7ac:	movwne	r2, #1
   1b7b0:	cmp	r0, #0
   1b7b4:	bne	1b7c4 <__assert_fail@plt+0xa310>
   1b7b8:	ldr	r1, [r3]
   1b7bc:	cmp	r1, #0
   1b7c0:	bne	1b85c <__assert_fail@plt+0xa3a8>
   1b7c4:	cmp	r5, #0
   1b7c8:	cmpne	r6, #0
   1b7cc:	beq	1b764 <__assert_fail@plt+0xa2b0>
   1b7d0:	ldr	r1, [r8, #64]	; 0x40
   1b7d4:	cmp	r1, #31
   1b7d8:	beq	1b824 <__assert_fail@plt+0xa370>
   1b7dc:	ldr	r0, [r8, #56]	; 0x38
   1b7e0:	add	r2, r1, #1
   1b7e4:	add	r0, r0, r1, lsl #5
   1b7e8:	mov	r1, #0
   1b7ec:	str	r2, [r8, #64]	; 0x40
   1b7f0:	str	r1, [r0, #4]!
   1b7f4:	stmib	r0, {r5, r6}
   1b7f8:	str	r1, [r0, #12]
   1b7fc:	str	r1, [r0, #16]
   1b800:	str	r1, [r0, #20]
   1b804:	mov	r1, #16
   1b808:	str	r1, [r0, #24]
   1b80c:	mvn	r1, #0
   1b810:	str	r1, [r0, #28]
   1b814:	str	r0, [r5]
   1b818:	str	r0, [r6]
   1b81c:	mov	r5, r0
   1b820:	b	1b76c <__assert_fail@plt+0xa2b8>
   1b824:	mov	r0, #996	; 0x3e4
   1b828:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1b82c:	cmp	r0, #0
   1b830:	beq	1b908 <__assert_fail@plt+0xa454>
   1b834:	ldr	r1, [r8, #56]	; 0x38
   1b838:	ldr	r3, [fp, #12]
   1b83c:	str	r1, [r0]
   1b840:	mov	r1, #0
   1b844:	str	r1, [r8, #64]	; 0x40
   1b848:	str	r0, [r8, #56]	; 0x38
   1b84c:	b	1b7e0 <__assert_fail@plt+0xa32c>
   1b850:	mov	r0, r5
   1b854:	sub	sp, fp, #28
   1b858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b85c:	mov	r0, #0
   1b860:	cmp	r2, #0
   1b864:	beq	1b854 <__assert_fail@plt+0xa3a0>
   1b868:	movw	r6, #255	; 0xff
   1b86c:	movt	r6, #4
   1b870:	mov	r7, r5
   1b874:	ldr	r5, [r5, #4]
   1b878:	cmp	r5, #0
   1b87c:	bne	1b870 <__assert_fail@plt+0xa3bc>
   1b880:	ldr	r5, [r7, #8]
   1b884:	cmp	r5, #0
   1b888:	bne	1b870 <__assert_fail@plt+0xa3bc>
   1b88c:	ldr	r1, [r7, #24]
   1b890:	and	r1, r1, r6
   1b894:	cmp	r1, #3
   1b898:	beq	1b8d0 <__assert_fail@plt+0xa41c>
   1b89c:	cmp	r1, #6
   1b8a0:	bne	1b8dc <__assert_fail@plt+0xa428>
   1b8a4:	ldr	r4, [r7, #20]
   1b8a8:	ldr	r0, [r4]
   1b8ac:	bl	2ae28 <__assert_fail@plt+0x19974>
   1b8b0:	ldr	r0, [r4, #4]
   1b8b4:	bl	2ae28 <__assert_fail@plt+0x19974>
   1b8b8:	ldr	r0, [r4, #8]
   1b8bc:	bl	2ae28 <__assert_fail@plt+0x19974>
   1b8c0:	ldr	r0, [r4, #12]
   1b8c4:	bl	2ae28 <__assert_fail@plt+0x19974>
   1b8c8:	mov	r0, r4
   1b8cc:	b	1b8d4 <__assert_fail@plt+0xa420>
   1b8d0:	ldr	r0, [r7, #20]
   1b8d4:	bl	2ae28 <__assert_fail@plt+0x19974>
   1b8d8:	mov	r0, #0
   1b8dc:	ldr	r1, [r7]
   1b8e0:	cmp	r1, #0
   1b8e4:	beq	1b854 <__assert_fail@plt+0xa3a0>
   1b8e8:	ldr	r5, [r1, #8]
   1b8ec:	cmp	r5, r7
   1b8f0:	mov	r7, r1
   1b8f4:	beq	1b88c <__assert_fail@plt+0xa3d8>
   1b8f8:	cmp	r5, #0
   1b8fc:	mov	r7, r1
   1b900:	beq	1b88c <__assert_fail@plt+0xa3d8>
   1b904:	b	1b870 <__assert_fail@plt+0xa3bc>
   1b908:	ldr	r1, [fp, #12]
   1b90c:	movw	r8, #255	; 0xff
   1b910:	movt	r8, #4
   1b914:	mov	r7, r6
   1b918:	ldr	r6, [r6, #4]
   1b91c:	cmp	r6, #0
   1b920:	bne	1b914 <__assert_fail@plt+0xa460>
   1b924:	ldr	r6, [r7, #8]
   1b928:	cmp	r6, #0
   1b92c:	bne	1b914 <__assert_fail@plt+0xa460>
   1b930:	ldr	r0, [r7, #24]
   1b934:	and	r0, r0, r8
   1b938:	cmp	r0, #3
   1b93c:	beq	1b974 <__assert_fail@plt+0xa4c0>
   1b940:	cmp	r0, #6
   1b944:	bne	1b980 <__assert_fail@plt+0xa4cc>
   1b948:	ldr	r4, [r7, #20]
   1b94c:	ldr	r0, [r4]
   1b950:	bl	2ae28 <__assert_fail@plt+0x19974>
   1b954:	ldr	r0, [r4, #4]
   1b958:	bl	2ae28 <__assert_fail@plt+0x19974>
   1b95c:	ldr	r0, [r4, #8]
   1b960:	bl	2ae28 <__assert_fail@plt+0x19974>
   1b964:	ldr	r0, [r4, #12]
   1b968:	bl	2ae28 <__assert_fail@plt+0x19974>
   1b96c:	mov	r0, r4
   1b970:	b	1b978 <__assert_fail@plt+0xa4c4>
   1b974:	ldr	r0, [r7, #20]
   1b978:	bl	2ae28 <__assert_fail@plt+0x19974>
   1b97c:	ldr	r1, [fp, #12]
   1b980:	ldr	r0, [r7]
   1b984:	cmp	r0, #0
   1b988:	beq	1b9ac <__assert_fail@plt+0xa4f8>
   1b98c:	ldr	r6, [r0, #8]
   1b990:	cmp	r6, r7
   1b994:	mov	r7, r0
   1b998:	beq	1b930 <__assert_fail@plt+0xa47c>
   1b99c:	cmp	r6, #0
   1b9a0:	mov	r7, r0
   1b9a4:	beq	1b930 <__assert_fail@plt+0xa47c>
   1b9a8:	b	1b914 <__assert_fail@plt+0xa460>
   1b9ac:	mov	r6, r5
   1b9b0:	ldr	r5, [r5, #4]
   1b9b4:	cmp	r5, #0
   1b9b8:	bne	1b9ac <__assert_fail@plt+0xa4f8>
   1b9bc:	ldr	r5, [r6, #8]
   1b9c0:	cmp	r5, #0
   1b9c4:	bne	1b9ac <__assert_fail@plt+0xa4f8>
   1b9c8:	ldr	r0, [r6, #24]
   1b9cc:	and	r0, r0, r8
   1b9d0:	cmp	r0, #3
   1b9d4:	beq	1ba0c <__assert_fail@plt+0xa558>
   1b9d8:	cmp	r0, #6
   1b9dc:	bne	1ba18 <__assert_fail@plt+0xa564>
   1b9e0:	ldr	r4, [r6, #20]
   1b9e4:	ldr	r0, [r4]
   1b9e8:	bl	2ae28 <__assert_fail@plt+0x19974>
   1b9ec:	ldr	r0, [r4, #4]
   1b9f0:	bl	2ae28 <__assert_fail@plt+0x19974>
   1b9f4:	ldr	r0, [r4, #8]
   1b9f8:	bl	2ae28 <__assert_fail@plt+0x19974>
   1b9fc:	ldr	r0, [r4, #12]
   1ba00:	bl	2ae28 <__assert_fail@plt+0x19974>
   1ba04:	mov	r0, r4
   1ba08:	b	1ba10 <__assert_fail@plt+0xa55c>
   1ba0c:	ldr	r0, [r6, #20]
   1ba10:	bl	2ae28 <__assert_fail@plt+0x19974>
   1ba14:	ldr	r1, [fp, #12]
   1ba18:	ldr	r0, [r6]
   1ba1c:	cmp	r0, #0
   1ba20:	beq	1ba44 <__assert_fail@plt+0xa590>
   1ba24:	ldr	r5, [r0, #8]
   1ba28:	cmp	r5, r6
   1ba2c:	mov	r6, r0
   1ba30:	beq	1b9c8 <__assert_fail@plt+0xa514>
   1ba34:	cmp	r5, #0
   1ba38:	mov	r6, r0
   1ba3c:	beq	1b9c8 <__assert_fail@plt+0xa514>
   1ba40:	b	1b9ac <__assert_fail@plt+0xa4f8>
   1ba44:	mov	r0, #12
   1ba48:	str	r0, [r1]
   1ba4c:	mov	r0, #0
   1ba50:	sub	sp, fp, #28
   1ba54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba58:	nop	{0}
   1ba5c:	nop	{0}
   1ba60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba64:	add	fp, sp, #28
   1ba68:	sub	sp, sp, #148	; 0x94
   1ba6c:	str	r0, [sp, #24]
   1ba70:	ldr	r0, [r2, #4]
   1ba74:	mov	r7, r1
   1ba78:	mov	lr, r2
   1ba7c:	mvn	r1, #0
   1ba80:	mov	r6, r3
   1ba84:	mov	sl, #0
   1ba88:	ldr	r2, [fp, #12]
   1ba8c:	ldr	r8, [r7]
   1ba90:	uxtab	r1, r1, r0
   1ba94:	cmp	r1, #35	; 0x23
   1ba98:	str	r2, [sp, #16]
   1ba9c:	str	lr, [sp, #44]	; 0x2c
   1baa0:	bhi	1bbcc <__assert_fail@plt+0xa718>
   1baa4:	add	r2, pc, #0
   1baa8:	ldr	pc, [r2, r1, lsl #2]
   1baac:	muleq	r1, r0, lr
   1bab0:	andeq	sp, r1, r4, ror r9
   1bab4:	andeq	fp, r1, ip, asr #23
   1bab8:	andeq	fp, r1, r0, asr ip
   1babc:	ldrdeq	fp, [r1], -r0
   1bac0:	andeq	fp, r1, ip, asr #23
   1bac4:	andeq	fp, r1, ip, asr #23
   1bac8:	andeq	fp, r1, r8, lsr sp
   1bacc:	ldrdeq	fp, [r1], -ip
   1bad0:	andeq	sp, r1, r4, ror r9
   1bad4:	andeq	fp, r1, ip, asr #23
   1bad8:	andeq	fp, r1, r8, asr #27
   1badc:	andeq	fp, r1, ip, asr #23
   1bae0:	andeq	fp, r1, ip, asr #23
   1bae4:	andeq	fp, r1, ip, asr #23
   1bae8:	andeq	fp, r1, ip, asr #23
   1baec:	andeq	fp, r1, ip, asr #23
   1baf0:	andeq	fp, r1, ip, asr #23
   1baf4:	andeq	fp, r1, ip, asr #23
   1baf8:	andeq	ip, r1, r8, rrx
   1bafc:	andeq	fp, r1, ip, asr #23
   1bb00:	andeq	fp, r1, ip, asr #23
   1bb04:	andeq	fp, r1, r4, asr #23
   1bb08:	andeq	fp, r1, ip, ror #23
   1bb0c:	andeq	fp, r1, ip, asr #23
   1bb10:	andeq	fp, r1, ip, asr #23
   1bb14:	andeq	fp, r1, ip, asr #23
   1bb18:	andeq	fp, r1, ip, asr #23
   1bb1c:	andeq	fp, r1, ip, asr #23
   1bb20:	andeq	fp, r1, ip, asr #23
   1bb24:	andeq	fp, r1, ip, asr #23
   1bb28:	andeq	fp, r1, ip, lsr fp
   1bb2c:	andeq	fp, r1, ip, lsr fp
   1bb30:	andeq	fp, r1, r0, ror #22
   1bb34:	andeq	fp, r1, r0, ror #22
   1bb38:	andeq	ip, r1, r0, rrx
   1bb3c:	ldr	r1, [sp, #24]
   1bb40:	mvn	r2, #32
   1bb44:	movw	r3, #48177	; 0xbc31
   1bb48:	uxtab	r0, r2, r0
   1bb4c:	movw	r2, #49678	; 0xc20e
   1bb50:	movt	r3, #2
   1bb54:	clz	r0, r0
   1bb58:	movt	r2, #2
   1bb5c:	b	1bb80 <__assert_fail@plt+0xa6cc>
   1bb60:	ldr	r1, [sp, #24]
   1bb64:	mvn	r2, #34	; 0x22
   1bb68:	movw	r3, #48518	; 0xbd86
   1bb6c:	uxtab	r0, r2, r0
   1bb70:	movw	r2, #49684	; 0xc214
   1bb74:	movt	r3, #2
   1bb78:	clz	r0, r0
   1bb7c:	movt	r2, #2
   1bb80:	lsr	r0, r0, #5
   1bb84:	ldr	r1, [r1, #64]	; 0x40
   1bb88:	str	r0, [sp]
   1bb8c:	ldr	r4, [sp, #16]
   1bb90:	str	r4, [sp, #4]
   1bb94:	mov	r0, r8
   1bb98:	bl	1dff4 <__assert_fail@plt+0xcb40>
   1bb9c:	mov	r7, r0
   1bba0:	cmp	r0, #0
   1bba4:	bne	1bbbc <__assert_fail@plt+0xa708>
   1bba8:	ldr	r0, [r4]
   1bbac:	cmp	r0, #0
   1bbb0:	ldr	lr, [sp, #44]	; 0x2c
   1bbb4:	beq	1cb80 <__assert_fail@plt+0xb6cc>
   1bbb8:	b	1d974 <__assert_fail@plt+0xc4c0>
   1bbbc:	ldr	lr, [sp, #44]	; 0x2c
   1bbc0:	b	1cb80 <__assert_fail@plt+0xb6cc>
   1bbc4:	tst	r6, #16777216	; 0x1000000
   1bbc8:	bne	1bc48 <__assert_fail@plt+0xa794>
   1bbcc:	tst	r6, #32
   1bbd0:	bne	1bc48 <__assert_fail@plt+0xa794>
   1bbd4:	tst	r6, #16
   1bbd8:	bne	1c0e4 <__assert_fail@plt+0xac30>
   1bbdc:	tst	r6, #131072	; 0x20000
   1bbe0:	uxtbeq	r1, r0
   1bbe4:	cmpeq	r1, #9
   1bbe8:	beq	1c12c <__assert_fail@plt+0xac78>
   1bbec:	mov	r1, #1
   1bbf0:	bfi	r0, r1, #0, #8
   1bbf4:	str	r0, [lr, #4]
   1bbf8:	ldr	r1, [r8, #64]	; 0x40
   1bbfc:	cmp	r1, #31
   1bc00:	beq	1daec <__assert_fail@plt+0xc638>
   1bc04:	ldr	r0, [r8, #56]	; 0x38
   1bc08:	add	r2, r1, #1
   1bc0c:	add	r7, r0, r1, lsl #5
   1bc10:	mov	r0, #0
   1bc14:	str	r2, [r8, #64]	; 0x40
   1bc18:	str	r0, [r7, #4]!
   1bc1c:	str	r0, [r7, #4]
   1bc20:	str	r0, [r7, #8]
   1bc24:	ldm	lr, {r1, r2}
   1bc28:	str	r0, [r7, #12]
   1bc2c:	str	r0, [r7, #16]
   1bc30:	mvn	r0, #0
   1bc34:	str	r0, [r7, #28]
   1bc38:	bic	r0, r2, #786432	; 0xc0000
   1bc3c:	str	r1, [r7, #20]
   1bc40:	str	r0, [r7, #24]
   1bc44:	b	1cb80 <__assert_fail@plt+0xb6cc>
   1bc48:	mov	r0, #13
   1bc4c:	b	1ca74 <__assert_fail@plt+0xb5c0>
   1bc50:	ldr	r0, [lr]
   1bc54:	ldr	r2, [r8, #84]	; 0x54
   1bc58:	mov	r1, #1
   1bc5c:	tst	r2, r1, lsl r0
   1bc60:	beq	1db30 <__assert_fail@plt+0xc67c>
   1bc64:	lsl	r0, r1, r0
   1bc68:	ldr	r1, [r8, #64]	; 0x40
   1bc6c:	ldr	r2, [r8, #80]	; 0x50
   1bc70:	orr	r0, r2, r0
   1bc74:	cmp	r1, #31
   1bc78:	str	r0, [r8, #80]	; 0x50
   1bc7c:	beq	1dba8 <__assert_fail@plt+0xc6f4>
   1bc80:	ldr	r0, [r8, #56]	; 0x38
   1bc84:	add	r2, r1, #1
   1bc88:	add	r7, r0, r1, lsl #5
   1bc8c:	mov	r0, #0
   1bc90:	str	r2, [r8, #64]	; 0x40
   1bc94:	str	r0, [r7, #4]!
   1bc98:	str	r0, [r7, #4]
   1bc9c:	str	r0, [r7, #8]
   1bca0:	ldm	lr, {r1, r2}
   1bca4:	str	r0, [r7, #12]
   1bca8:	str	r0, [r7, #16]
   1bcac:	mvn	r0, #0
   1bcb0:	str	r0, [r7, #28]
   1bcb4:	bic	r0, r2, #786432	; 0xc0000
   1bcb8:	str	r1, [r7, #20]
   1bcbc:	str	r0, [r7, #24]
   1bcc0:	ldr	r0, [r8, #76]	; 0x4c
   1bcc4:	add	r0, r0, #1
   1bcc8:	str	r0, [r8, #76]	; 0x4c
   1bccc:	b	1bd28 <__assert_fail@plt+0xa874>
   1bcd0:	ldr	r1, [r8, #64]	; 0x40
   1bcd4:	cmp	r1, #31
   1bcd8:	beq	1db38 <__assert_fail@plt+0xc684>
   1bcdc:	ldr	r0, [r8, #56]	; 0x38
   1bce0:	add	r2, r1, #1
   1bce4:	add	r7, r0, r1, lsl #5
   1bce8:	mov	r0, #0
   1bcec:	str	r2, [r8, #64]	; 0x40
   1bcf0:	str	r0, [r7, #4]!
   1bcf4:	str	r0, [r7, #4]
   1bcf8:	str	r0, [r7, #8]
   1bcfc:	ldm	lr, {r1, r2}
   1bd00:	str	r0, [r7, #12]
   1bd04:	str	r0, [r7, #16]
   1bd08:	mvn	r0, #0
   1bd0c:	str	r0, [r7, #28]
   1bd10:	bic	r0, r2, #786432	; 0xc0000
   1bd14:	str	r1, [r7, #20]
   1bd18:	str	r0, [r7, #24]
   1bd1c:	ldr	r0, [r8, #92]	; 0x5c
   1bd20:	cmp	r0, #2
   1bd24:	blt	1cb80 <__assert_fail@plt+0xb6cc>
   1bd28:	ldrb	r0, [r8, #88]	; 0x58
   1bd2c:	orr	r0, r0, #2
   1bd30:	strb	r0, [r8, #88]	; 0x58
   1bd34:	b	1cb80 <__assert_fail@plt+0xb6cc>
   1bd38:	ldr	r4, [r7, #24]
   1bd3c:	mov	sl, r6
   1bd40:	orr	r2, r6, #8388608	; 0x800000
   1bd44:	ldr	r6, [sp, #24]
   1bd48:	ldr	r5, [fp, #8]
   1bd4c:	add	r0, r4, #1
   1bd50:	mov	r1, r6
   1bd54:	str	r0, [r7, #24]
   1bd58:	mov	r0, lr
   1bd5c:	bl	1ada8 <__assert_fail@plt+0x98f4>
   1bd60:	ldr	r1, [r6, #40]	; 0x28
   1bd64:	ldr	lr, [sp, #44]	; 0x2c
   1bd68:	mov	r9, #0
   1bd6c:	add	r0, r1, r0
   1bd70:	str	r0, [r6, #40]	; 0x28
   1bd74:	ldrb	r0, [lr, #4]
   1bd78:	cmp	r0, #9
   1bd7c:	beq	1cb14 <__assert_fail@plt+0xb660>
   1bd80:	add	r0, r5, #1
   1bd84:	mov	r1, r7
   1bd88:	mov	r2, lr
   1bd8c:	mov	r3, sl
   1bd90:	mov	r6, lr
   1bd94:	str	r0, [sp]
   1bd98:	ldr	r5, [sp, #16]
   1bd9c:	str	r5, [sp, #4]
   1bda0:	ldr	r0, [sp, #24]
   1bda4:	bl	1aa20 <__assert_fail@plt+0x956c>
   1bda8:	mov	r9, r0
   1bdac:	ldr	r0, [r5]
   1bdb0:	cmp	r0, #0
   1bdb4:	beq	1cb04 <__assert_fail@plt+0xb650>
   1bdb8:	mov	sl, #0
   1bdbc:	mov	r0, sl
   1bdc0:	sub	sp, fp, #28
   1bdc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bdc8:	ldr	r0, [lr]
   1bdcc:	ldr	r7, [sp, #24]
   1bdd0:	movw	r1, #783	; 0x30f
   1bdd4:	tst	r0, r1
   1bdd8:	beq	1be20 <__assert_fail@plt+0xa96c>
   1bddc:	ldrb	r0, [r8, #88]	; 0x58
   1bde0:	tst	r0, #16
   1bde4:	bne	1be1c <__assert_fail@plt+0xa968>
   1bde8:	orr	r1, r0, #16
   1bdec:	tst	r0, #8
   1bdf0:	strb	r1, [r8, #88]	; 0x58
   1bdf4:	bne	1ddec <__assert_fail@plt+0xc938>
   1bdf8:	add	r1, pc, #832	; 0x340
   1bdfc:	tst	r0, #4
   1be00:	vld1.64	{d16-d17}, [r1 :128]
   1be04:	add	r1, r8, #96	; 0x60
   1be08:	vst1.32	{d16-d17}, [r1]
   1be0c:	beq	1ddf8 <__assert_fail@plt+0xc944>
   1be10:	vmov.i32	q8, #0	; 0x00000000
   1be14:	add	r0, r8, #112	; 0x70
   1be18:	vst1.32	{d16-d17}, [r0]
   1be1c:	ldr	r0, [lr]
   1be20:	cmp	r0, #512	; 0x200
   1be24:	beq	1c968 <__assert_fail@plt+0xb4b4>
   1be28:	cmp	r0, #256	; 0x100
   1be2c:	bne	1ca88 <__assert_fail@plt+0xb5d4>
   1be30:	mov	r0, #6
   1be34:	mov	r4, r8
   1be38:	str	r0, [lr]
   1be3c:	ldr	r1, [r4, #64]!	; 0x40
   1be40:	cmp	r1, #31
   1be44:	beq	1dd38 <__assert_fail@plt+0xc884>
   1be48:	ldr	r0, [r8, #56]	; 0x38
   1be4c:	add	r2, r1, #1
   1be50:	add	r5, r0, r1, lsl #5
   1be54:	mov	r0, #0
   1be58:	str	r2, [r4]
   1be5c:	str	r0, [r5, #4]!
   1be60:	str	r0, [r5, #4]
   1be64:	str	r0, [r5, #8]
   1be68:	ldm	lr, {r1, r2}
   1be6c:	str	r0, [r5, #12]
   1be70:	str	r0, [r5, #16]
   1be74:	mvn	r0, #0
   1be78:	str	r0, [r5, #28]
   1be7c:	bic	r0, r2, #786432	; 0xc0000
   1be80:	str	r1, [r5, #20]
   1be84:	str	r0, [r5, #24]
   1be88:	mov	r0, #9
   1be8c:	b	1c9c4 <__assert_fail@plt+0xb510>
   1be90:	ldr	r1, [r8, #64]	; 0x40
   1be94:	cmp	r1, #31
   1be98:	beq	1db64 <__assert_fail@plt+0xc6b0>
   1be9c:	ldr	r0, [r8, #56]	; 0x38
   1bea0:	ldr	r3, [sp, #24]
   1bea4:	add	r2, r1, #1
   1bea8:	add	r4, r0, r1, lsl #5
   1beac:	mov	r0, #0
   1beb0:	str	r2, [r8, #64]	; 0x40
   1beb4:	str	r0, [r4, #4]!
   1beb8:	str	r0, [r4, #4]
   1bebc:	str	r0, [r4, #8]
   1bec0:	ldm	lr, {r1, r2}
   1bec4:	str	r0, [r4, #12]
   1bec8:	str	r0, [r4, #16]
   1becc:	mvn	r0, #0
   1bed0:	str	r0, [r4, #28]
   1bed4:	bic	r0, r2, #786432	; 0xc0000
   1bed8:	str	r1, [r4, #20]
   1bedc:	str	r0, [r4, #24]
   1bee0:	ldr	r0, [r8, #92]	; 0x5c
   1bee4:	cmp	r0, #2
   1bee8:	blt	1c124 <__assert_fail@plt+0xac70>
   1beec:	ldr	r0, [r3, #40]	; 0x28
   1bef0:	ldr	r1, [r3, #56]	; 0x38
   1bef4:	cmp	r1, r0
   1bef8:	ble	1c124 <__assert_fail@plt+0xac70>
   1befc:	mov	r5, #0
   1bf00:	mvn	sl, #0
   1bf04:	mov	r9, r6
   1bf08:	ldr	r6, [sp, #24]
   1bf0c:	ldr	r1, [r6, #28]
   1bf10:	cmp	r0, r1
   1bf14:	beq	1d980 <__assert_fail@plt+0xc4cc>
   1bf18:	ldr	r1, [r6, #8]
   1bf1c:	ldr	r0, [r1, r0, lsl #2]
   1bf20:	cmn	r0, #1
   1bf24:	bne	1d980 <__assert_fail@plt+0xc4cc>
   1bf28:	mov	r0, lr
   1bf2c:	mov	r1, r6
   1bf30:	mov	r2, r9
   1bf34:	bl	1ada8 <__assert_fail@plt+0x98f4>
   1bf38:	ldr	r1, [r6, #40]	; 0x28
   1bf3c:	add	r0, r1, r0
   1bf40:	str	r0, [r6, #40]	; 0x28
   1bf44:	ldr	r1, [r8, #64]	; 0x40
   1bf48:	cmp	r1, #31
   1bf4c:	beq	1bff8 <__assert_fail@plt+0xab44>
   1bf50:	ldr	r0, [r8, #56]	; 0x38
   1bf54:	ldr	lr, [sp, #44]	; 0x2c
   1bf58:	add	r2, r1, #1
   1bf5c:	add	r6, r0, r1, lsl #5
   1bf60:	str	r2, [r8, #64]	; 0x40
   1bf64:	str	r5, [r6, #4]!
   1bf68:	str	r5, [r6, #4]
   1bf6c:	str	r5, [r6, #8]
   1bf70:	ldm	lr, {r0, r1}
   1bf74:	str	r5, [r6, #12]
   1bf78:	str	r5, [r6, #16]
   1bf7c:	str	sl, [r6, #28]
   1bf80:	str	r0, [r6, #20]
   1bf84:	bic	r0, r1, #786432	; 0xc0000
   1bf88:	str	r0, [r6, #24]
   1bf8c:	ldr	r1, [r8, #64]	; 0x40
   1bf90:	cmp	r1, #31
   1bf94:	beq	1c034 <__assert_fail@plt+0xab80>
   1bf98:	ldr	r0, [r8, #56]	; 0x38
   1bf9c:	add	r2, r1, #1
   1bfa0:	add	r7, r0, r1, lsl #5
   1bfa4:	mov	r0, #16
   1bfa8:	cmp	r6, #0
   1bfac:	str	r2, [r8, #64]	; 0x40
   1bfb0:	str	r5, [r7, #4]!
   1bfb4:	stmib	r7, {r4, r6}
   1bfb8:	str	r5, [r7, #12]
   1bfbc:	str	r5, [r7, #16]
   1bfc0:	str	r5, [r7, #20]
   1bfc4:	str	r0, [r7, #24]
   1bfc8:	str	sl, [r7, #28]
   1bfcc:	str	r7, [r4]
   1bfd0:	beq	1ddd0 <__assert_fail@plt+0xc91c>
   1bfd4:	ldr	r1, [sp, #24]
   1bfd8:	str	r7, [r6]
   1bfdc:	mov	r4, r7
   1bfe0:	mov	r6, r9
   1bfe4:	ldr	r0, [r1, #40]	; 0x28
   1bfe8:	ldr	r1, [r1, #56]	; 0x38
   1bfec:	cmp	r1, r0
   1bff0:	bgt	1bf04 <__assert_fail@plt+0xaa50>
   1bff4:	b	1cb80 <__assert_fail@plt+0xb6cc>
   1bff8:	mov	r0, #996	; 0x3e4
   1bffc:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1c000:	cmp	r0, #0
   1c004:	beq	1c020 <__assert_fail@plt+0xab6c>
   1c008:	ldr	r1, [r8, #56]	; 0x38
   1c00c:	str	r1, [r0]
   1c010:	mov	r1, #0
   1c014:	str	r1, [r8, #64]	; 0x40
   1c018:	str	r0, [r8, #56]	; 0x38
   1c01c:	b	1bf54 <__assert_fail@plt+0xaaa0>
   1c020:	ldr	lr, [sp, #44]	; 0x2c
   1c024:	mov	r6, #0
   1c028:	ldr	r1, [r8, #64]	; 0x40
   1c02c:	cmp	r1, #31
   1c030:	bne	1bf98 <__assert_fail@plt+0xaae4>
   1c034:	mov	r0, #996	; 0x3e4
   1c038:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1c03c:	ldr	lr, [sp, #44]	; 0x2c
   1c040:	cmp	r0, #0
   1c044:	beq	1ddd0 <__assert_fail@plt+0xc91c>
   1c048:	ldr	r1, [r8, #56]	; 0x38
   1c04c:	str	r1, [r0]
   1c050:	mov	r1, #0
   1c054:	str	r1, [r8, #64]	; 0x40
   1c058:	str	r0, [r8, #56]	; 0x38
   1c05c:	b	1bf9c <__assert_fail@plt+0xaae8>
   1c060:	mov	r0, #5
   1c064:	b	1ca74 <__assert_fail@plt+0xb5c0>
   1c068:	mov	sl, #0
   1c06c:	mov	r0, #32
   1c070:	mov	r1, #1
   1c074:	str	sl, [fp, #-32]	; 0xffffffe0
   1c078:	bl	2ac0c <__assert_fail@plt+0x19758>
   1c07c:	mov	r4, r0
   1c080:	mov	r0, #40	; 0x28
   1c084:	mov	r1, #1
   1c088:	bl	2ac0c <__assert_fail@plt+0x19758>
   1c08c:	mov	r5, r0
   1c090:	cmp	r4, #0
   1c094:	cmpne	r5, #0
   1c098:	beq	1db94 <__assert_fail@plt+0xc6e0>
   1c09c:	str	r5, [sp, #48]	; 0x30
   1c0a0:	mov	r2, r6
   1c0a4:	ldr	r5, [sp, #44]	; 0x2c
   1c0a8:	ldr	r7, [sp, #24]
   1c0ac:	mov	r0, r5
   1c0b0:	mov	r1, r7
   1c0b4:	bl	1e3fc <__assert_fail@plt+0xcf48>
   1c0b8:	mov	r3, r0
   1c0bc:	ldr	r0, [r5, #4]
   1c0c0:	mov	r2, r5
   1c0c4:	uxtb	r1, r0
   1c0c8:	cmp	r1, #25
   1c0cc:	beq	1c150 <__assert_fail@plt+0xac9c>
   1c0d0:	ldr	sl, [sp, #48]	; 0x30
   1c0d4:	cmp	r1, #2
   1c0d8:	beq	1db28 <__assert_fail@plt+0xc674>
   1c0dc:	mov	r1, #0
   1c0e0:	b	1c1a8 <__assert_fail@plt+0xacf4>
   1c0e4:	ldr	r4, [sp, #24]
   1c0e8:	mov	r0, lr
   1c0ec:	mov	r2, r6
   1c0f0:	mov	r5, lr
   1c0f4:	mov	r1, r4
   1c0f8:	bl	1ada8 <__assert_fail@plt+0x98f4>
   1c0fc:	ldr	r1, [r4, #40]	; 0x28
   1c100:	mov	r2, r5
   1c104:	mov	r3, r6
   1c108:	add	r0, r1, r0
   1c10c:	mov	r1, r7
   1c110:	str	r0, [r4, #40]	; 0x28
   1c114:	mov	r0, r4
   1c118:	sub	sp, fp, #28
   1c11c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c120:	b	1ba60 <__assert_fail@plt+0xa5ac>
   1c124:	mov	r7, r4
   1c128:	b	1cb80 <__assert_fail@plt+0xb6cc>
   1c12c:	mov	r0, #16
   1c130:	b	1ca74 <__assert_fail@plt+0xb5c0>
   1c134:	nop	{0}
   1c138:	nop	{0}
   1c13c:	nop	{0}
   1c140:	andeq	r0, r0, r0
   1c144:	mvnseq	r0, #0
   1c148:			; <UNDEFINED> instruction: 0x87fffffe
   1c14c:			; <UNDEFINED> instruction: 0x07fffffe
   1c150:	ldr	sl, [sp, #48]	; 0x30
   1c154:	tst	r6, #256	; 0x100
   1c158:	mov	r1, r7
   1c15c:	ldrb	r0, [sl, #16]
   1c160:	orr	r0, r0, #1
   1c164:	strb	r0, [sl, #16]
   1c168:	ldrne	r0, [r4]
   1c16c:	orrne	r0, r0, #1024	; 0x400
   1c170:	strne	r0, [r4]
   1c174:	ldr	r0, [r7, #40]	; 0x28
   1c178:	add	r0, r0, r3
   1c17c:	str	r0, [r7, #40]	; 0x28
   1c180:	mov	r0, r2
   1c184:	mov	r2, r6
   1c188:	bl	1e3fc <__assert_fail@plt+0xcf48>
   1c18c:	ldr	r2, [sp, #44]	; 0x2c
   1c190:	mov	r3, r0
   1c194:	ldr	r0, [r2, #4]
   1c198:	uxtb	r1, r0
   1c19c:	cmp	r1, #2
   1c1a0:	beq	1db28 <__assert_fail@plt+0xc674>
   1c1a4:	mov	r1, #1
   1c1a8:	str	r1, [sp, #36]	; 0x24
   1c1ac:	uxtb	r1, r0
   1c1b0:	str	r4, [sp, #52]	; 0x34
   1c1b4:	str	r6, [sp, #40]	; 0x28
   1c1b8:	cmp	r1, #21
   1c1bc:	ldr	r5, [sp, #40]	; 0x28
   1c1c0:	moveq	r1, #1
   1c1c4:	bfieq	r0, r1, #0, #8
   1c1c8:	mov	r1, r7
   1c1cc:	streq	r0, [r2, #4]
   1c1d0:	mov	r0, #3
   1c1d4:	str	r0, [fp, #-40]	; 0xffffffd8
   1c1d8:	sub	r0, fp, #80	; 0x50
   1c1dc:	str	r0, [fp, #-36]	; 0xffffffdc
   1c1e0:	mov	r0, #1
   1c1e4:	str	r5, [sp]
   1c1e8:	str	r0, [sp, #4]
   1c1ec:	sub	r0, fp, #40	; 0x28
   1c1f0:	bl	1e5a4 <__assert_fail@plt+0xd0f0>
   1c1f4:	cmp	r0, #0
   1c1f8:	bne	1db18 <__assert_fail@plt+0xc664>
   1c1fc:	and	r0, r5, #65536	; 0x10000
   1c200:	str	r0, [sp, #32]
   1c204:	mov	r0, #0
   1c208:	str	r0, [sp, #28]
   1c20c:	mov	r0, #0
   1c210:	str	r0, [sp, #20]
   1c214:	ldr	r6, [sp, #24]
   1c218:	ldr	r7, [sp, #44]	; 0x2c
   1c21c:	mov	r0, r7
   1c220:	mov	r1, r6
   1c224:	mov	r2, r5
   1c228:	bl	1e3fc <__assert_fail@plt+0xcf48>
   1c22c:	ldr	r5, [fp, #-40]	; 0xffffffd8
   1c230:	ldr	r4, [sp, #52]	; 0x34
   1c234:	mov	r9, r0
   1c238:	cmp	r5, #2
   1c23c:	beq	1c440 <__assert_fail@plt+0xaf8c>
   1c240:	cmp	r5, #4
   1c244:	bne	1c284 <__assert_fail@plt+0xadd0>
   1c248:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1c24c:	ldr	r0, [r6, #64]	; 0x40
   1c250:	mov	r2, sl
   1c254:	sub	r3, fp, #32
   1c258:	str	r1, [sp]
   1c25c:	ldr	r1, [sp, #40]	; 0x28
   1c260:	str	r1, [sp, #4]
   1c264:	mov	r1, r4
   1c268:	bl	1e8a8 <__assert_fail@plt+0xd3f4>
   1c26c:	ldr	r1, [sp, #16]
   1c270:	ldr	lr, [sp, #44]	; 0x2c
   1c274:	cmp	r0, #0
   1c278:	str	r0, [r1]
   1c27c:	beq	1c480 <__assert_fail@plt+0xafcc>
   1c280:	b	1dbe8 <__assert_fail@plt+0xc734>
   1c284:	ldr	lr, [sp, #44]	; 0x2c
   1c288:	mov	r7, r9
   1c28c:	mov	r9, #7
   1c290:	ldrb	r0, [lr, #4]
   1c294:	cmp	r0, #22
   1c298:	beq	1c2a8 <__assert_fail@plt+0xadf4>
   1c29c:	cmp	r0, #2
   1c2a0:	bne	1c3f8 <__assert_fail@plt+0xaf44>
   1c2a4:	b	1dbd8 <__assert_fail@plt+0xc724>
   1c2a8:	ldr	r4, [sp, #24]
   1c2ac:	ldr	r2, [sp, #40]	; 0x28
   1c2b0:	mov	r6, r7
   1c2b4:	ldr	r0, [r4, #40]	; 0x28
   1c2b8:	mov	r1, r4
   1c2bc:	add	r0, r0, r7
   1c2c0:	str	r0, [r4, #40]	; 0x28
   1c2c4:	add	r0, sp, #56	; 0x38
   1c2c8:	bl	1e3fc <__assert_fail@plt+0xcf48>
   1c2cc:	mov	r3, r0
   1c2d0:	ldrb	r0, [sp, #60]	; 0x3c
   1c2d4:	cmp	r0, #21
   1c2d8:	beq	1c3e0 <__assert_fail@plt+0xaf2c>
   1c2dc:	cmp	r0, #2
   1c2e0:	beq	1dbd8 <__assert_fail@plt+0xc724>
   1c2e4:	ldr	r7, [sp, #40]	; 0x28
   1c2e8:	mov	r0, #3
   1c2ec:	add	r2, sp, #56	; 0x38
   1c2f0:	str	r0, [fp, #-48]	; 0xffffffd0
   1c2f4:	add	r0, sp, #64	; 0x40
   1c2f8:	str	r0, [fp, #-44]	; 0xffffffd4
   1c2fc:	mov	r0, #1
   1c300:	str	r0, [sp, #4]
   1c304:	sub	r0, fp, #48	; 0x30
   1c308:	str	r7, [sp]
   1c30c:	ldr	r4, [sp, #24]
   1c310:	mov	r1, r4
   1c314:	bl	1e5a4 <__assert_fail@plt+0xd0f0>
   1c318:	cmp	r0, #0
   1c31c:	bne	1db18 <__assert_fail@plt+0xc664>
   1c320:	ldr	r0, [sp, #44]	; 0x2c
   1c324:	mov	r1, r4
   1c328:	mov	r2, r7
   1c32c:	bl	1e3fc <__assert_fail@plt+0xcf48>
   1c330:	ldr	r4, [fp, #-48]	; 0xffffffd0
   1c334:	mov	r9, #11
   1c338:	str	r0, [sp, #12]
   1c33c:	cmp	r4, #2
   1c340:	cmpne	r4, #4
   1c344:	beq	1dbd8 <__assert_fail@plt+0xc724>
   1c348:	cmp	r5, #3
   1c34c:	bne	1c360 <__assert_fail@plt+0xaeac>
   1c350:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1c354:	bl	11394 <strlen@plt>
   1c358:	cmp	r0, #1
   1c35c:	bhi	1dbd4 <__assert_fail@plt+0xc720>
   1c360:	cmp	r4, #3
   1c364:	bne	1c378 <__assert_fail@plt+0xaec4>
   1c368:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1c36c:	bl	11394 <strlen@plt>
   1c370:	cmp	r0, #1
   1c374:	bhi	1dbd4 <__assert_fail@plt+0xc720>
   1c378:	ldr	lr, [sp, #44]	; 0x2c
   1c37c:	cmp	r5, #3
   1c380:	beq	1c54c <__assert_fail@plt+0xb098>
   1c384:	mov	r7, #0
   1c388:	cmp	r5, #0
   1c38c:	ldrbeq	r7, [fp, #-36]	; 0xffffffdc
   1c390:	cmp	r4, #3
   1c394:	beq	1c55c <__assert_fail@plt+0xb0a8>
   1c398:	mov	sl, #0
   1c39c:	cmp	r4, #0
   1c3a0:	ldrbeq	sl, [fp, #-44]	; 0xffffffd4
   1c3a4:	cmp	r5, #3
   1c3a8:	cmpne	r5, #0
   1c3ac:	bne	1c570 <__assert_fail@plt+0xb0bc>
   1c3b0:	ldr	r0, [r8, #92]	; 0x5c
   1c3b4:	cmp	r0, #2
   1c3b8:	blt	1c574 <__assert_fail@plt+0xb0c0>
   1c3bc:	mov	r0, r7
   1c3c0:	bl	113dc <btowc@plt>
   1c3c4:	ldr	lr, [sp, #44]	; 0x2c
   1c3c8:	mov	r7, r0
   1c3cc:	cmp	r4, #3
   1c3d0:	cmpne	r4, #0
   1c3d4:	beq	1c580 <__assert_fail@plt+0xb0cc>
   1c3d8:	ldr	sl, [fp, #-44]	; 0xffffffd4
   1c3dc:	b	1c5b0 <__assert_fail@plt+0xb0fc>
   1c3e0:	ldr	r0, [r4, #40]	; 0x28
   1c3e4:	ldr	lr, [sp, #44]	; 0x2c
   1c3e8:	sub	r0, r0, r6
   1c3ec:	str	r0, [r4, #40]	; 0x28
   1c3f0:	mov	r0, #1
   1c3f4:	strb	r0, [lr, #4]
   1c3f8:	cmp	r5, #1
   1c3fc:	beq	1c4d8 <__assert_fail@plt+0xb024>
   1c400:	ldr	r6, [sp, #24]
   1c404:	ldr	r4, [sp, #52]	; 0x34
   1c408:	ldr	sl, [sp, #48]	; 0x30
   1c40c:	cmp	r5, #2
   1c410:	mov	r9, r7
   1c414:	beq	1c440 <__assert_fail@plt+0xaf8c>
   1c418:	cmp	r5, #3
   1c41c:	bne	1c51c <__assert_fail@plt+0xb068>
   1c420:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1c424:	mov	r0, r7
   1c428:	bl	11394 <strlen@plt>
   1c42c:	cmp	r0, #1
   1c430:	mov	r3, #1
   1c434:	bne	1dbd4 <__assert_fail@plt+0xc720>
   1c438:	ldrb	r0, [r7]
   1c43c:	b	1c45c <__assert_fail@plt+0xafa8>
   1c440:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1c444:	mov	r0, r7
   1c448:	bl	11394 <strlen@plt>
   1c44c:	cmp	r0, #1
   1c450:	bne	1dbd4 <__assert_fail@plt+0xc720>
   1c454:	ldrb	r0, [r7]
   1c458:	mov	r3, #1
   1c45c:	ubfx	r1, r0, #5, #3
   1c460:	and	r0, r0, #31
   1c464:	ldr	r2, [r4, r1, lsl #2]
   1c468:	orr	r0, r2, r3, lsl r0
   1c46c:	str	r0, [r4, r1, lsl #2]
   1c470:	mov	r1, #0
   1c474:	ldr	r0, [sp, #16]
   1c478:	ldr	lr, [sp, #44]	; 0x2c
   1c47c:	str	r1, [r0]
   1c480:	ldrb	r0, [lr, #4]
   1c484:	cmp	r0, #21
   1c488:	beq	1c70c <__assert_fail@plt+0xb258>
   1c48c:	cmp	r0, #2
   1c490:	beq	1db20 <__assert_fail@plt+0xc66c>
   1c494:	mov	r0, #3
   1c498:	ldr	r5, [sp, #40]	; 0x28
   1c49c:	mov	r1, r6
   1c4a0:	mov	r2, lr
   1c4a4:	mov	r3, r9
   1c4a8:	mov	r7, lr
   1c4ac:	str	r0, [fp, #-40]	; 0xffffffd8
   1c4b0:	sub	r0, fp, #80	; 0x50
   1c4b4:	str	r0, [fp, #-36]	; 0xffffffdc
   1c4b8:	mov	r0, #0
   1c4bc:	str	r0, [sp, #4]
   1c4c0:	sub	r0, fp, #40	; 0x28
   1c4c4:	str	r5, [sp]
   1c4c8:	bl	1e5a4 <__assert_fail@plt+0xd0f0>
   1c4cc:	cmp	r0, #0
   1c4d0:	beq	1c21c <__assert_fail@plt+0xad68>
   1c4d4:	b	1db18 <__assert_fail@plt+0xc664>
   1c4d8:	ldr	sl, [sp, #48]	; 0x30
   1c4dc:	ldr	r0, [sp, #28]
   1c4e0:	ldr	r4, [sp, #52]	; 0x34
   1c4e4:	ldr	r1, [sl, #20]
   1c4e8:	cmp	r0, r1
   1c4ec:	beq	1c678 <__assert_fail@plt+0xb1c4>
   1c4f0:	ldr	r0, [sl]
   1c4f4:	ldr	r6, [sp, #24]
   1c4f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c4fc:	add	r2, r1, #1
   1c500:	mov	r9, r7
   1c504:	str	r2, [sl, #20]
   1c508:	str	r3, [r0, r1, lsl #2]
   1c50c:	ldrb	r0, [lr, #4]
   1c510:	cmp	r0, #21
   1c514:	bne	1c48c <__assert_fail@plt+0xafd8>
   1c518:	b	1c70c <__assert_fail@plt+0xb258>
   1c51c:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   1c520:	mov	r3, #1
   1c524:	ubfx	r1, r0, #5, #3
   1c528:	ldr	lr, [sp, #44]	; 0x2c
   1c52c:	and	r0, r0, #31
   1c530:	ldr	r2, [r4, r1, lsl #2]
   1c534:	orr	r0, r2, r3, lsl r0
   1c538:	str	r0, [r4, r1, lsl #2]
   1c53c:	ldrb	r0, [lr, #4]
   1c540:	cmp	r0, #21
   1c544:	bne	1c48c <__assert_fail@plt+0xafd8>
   1c548:	b	1c70c <__assert_fail@plt+0xb258>
   1c54c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1c550:	ldrb	r7, [r0]
   1c554:	cmp	r4, #3
   1c558:	bne	1c398 <__assert_fail@plt+0xaee4>
   1c55c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1c560:	ldrb	sl, [r0]
   1c564:	cmp	r5, #3
   1c568:	cmpne	r5, #0
   1c56c:	beq	1c3b0 <__assert_fail@plt+0xaefc>
   1c570:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1c574:	cmp	r4, #3
   1c578:	cmpne	r4, #0
   1c57c:	bne	1c3d8 <__assert_fail@plt+0xaf24>
   1c580:	ldr	r0, [r8, #92]	; 0x5c
   1c584:	cmp	r0, #2
   1c588:	blt	1c5b0 <__assert_fail@plt+0xb0fc>
   1c58c:	mov	r0, sl
   1c590:	bl	113dc <btowc@plt>
   1c594:	ldr	lr, [sp, #44]	; 0x2c
   1c598:	mov	sl, r0
   1c59c:	cmn	r7, #1
   1c5a0:	mov	r9, #3
   1c5a4:	cmnne	sl, #1
   1c5a8:	beq	1dbd8 <__assert_fail@plt+0xc724>
   1c5ac:	b	1c5c0 <__assert_fail@plt+0xb10c>
   1c5b0:	cmn	r7, #1
   1c5b4:	mov	r9, #3
   1c5b8:	cmnne	sl, #1
   1c5bc:	beq	1dbd8 <__assert_fail@plt+0xc724>
   1c5c0:	ldr	r0, [sp, #32]
   1c5c4:	cmp	r0, #0
   1c5c8:	beq	1c5d8 <__assert_fail@plt+0xb124>
   1c5cc:	cmp	r7, sl
   1c5d0:	mov	r9, #11
   1c5d4:	bhi	1dbd8 <__assert_fail@plt+0xc724>
   1c5d8:	ldr	r0, [r8, #92]	; 0x5c
   1c5dc:	cmp	r0, #2
   1c5e0:	blt	1c61c <__assert_fail@plt+0xb168>
   1c5e4:	ldr	r4, [sp, #48]	; 0x30
   1c5e8:	ldr	r1, [sp, #20]
   1c5ec:	mov	r5, #1
   1c5f0:	ldr	r0, [r4, #32]
   1c5f4:	cmp	r1, r0
   1c5f8:	beq	1c6b8 <__assert_fail@plt+0xb204>
   1c5fc:	ldmib	r4, {r6, r9}
   1c600:	str	r7, [r6, r0, lsl #2]
   1c604:	ldr	r0, [r4, #32]
   1c608:	add	r1, r0, #1
   1c60c:	str	r1, [r4, #32]
   1c610:	ldr	r4, [sp, #52]	; 0x34
   1c614:	str	sl, [r9, r0, lsl #2]
   1c618:	b	1c624 <__assert_fail@plt+0xb170>
   1c61c:	ldr	r4, [sp, #52]	; 0x34
   1c620:	mov	r5, #1
   1c624:	ldr	r6, [sp, #24]
   1c628:	ldr	r9, [sp, #12]
   1c62c:	mov	r0, #0
   1c630:	cmp	r7, r0
   1c634:	cmpls	r0, sl
   1c638:	ubfxls	r1, r0, #5, #3
   1c63c:	andls	r3, r0, #31
   1c640:	add	r0, r0, #1
   1c644:	ldrls	r2, [r4, r1, lsl #2]
   1c648:	orrls	r2, r2, r5, lsl r3
   1c64c:	strls	r2, [r4, r1, lsl #2]
   1c650:	cmp	r0, #256	; 0x100
   1c654:	bne	1c630 <__assert_fail@plt+0xb17c>
   1c658:	ldr	r0, [sp, #16]
   1c65c:	ldr	sl, [sp, #48]	; 0x30
   1c660:	mov	r1, #0
   1c664:	str	r1, [r0]
   1c668:	ldrb	r0, [lr, #4]
   1c66c:	cmp	r0, #21
   1c670:	bne	1c48c <__assert_fail@plt+0xafd8>
   1c674:	b	1c70c <__assert_fail@plt+0xb258>
   1c678:	ldr	r1, [sp, #28]
   1c67c:	mov	r0, #1
   1c680:	orr	r1, r0, r1, lsl #1
   1c684:	ldr	r0, [sl]
   1c688:	str	r1, [sp, #28]
   1c68c:	lsl	r1, r1, #2
   1c690:	bl	2ac90 <__assert_fail@plt+0x197dc>
   1c694:	cmp	r0, #0
   1c698:	beq	1dfc0 <__assert_fail@plt+0xcb0c>
   1c69c:	ldr	sl, [sp, #48]	; 0x30
   1c6a0:	ldr	r6, [sp, #24]
   1c6a4:	ldr	lr, [sp, #44]	; 0x2c
   1c6a8:	ldr	r4, [sp, #52]	; 0x34
   1c6ac:	str	r0, [sl]
   1c6b0:	ldr	r1, [sl, #20]
   1c6b4:	b	1c4f8 <__assert_fail@plt+0xb044>
   1c6b8:	ldr	r0, [sp, #20]
   1c6bc:	orr	r0, r5, r0, lsl #1
   1c6c0:	lsl	r9, r0, #2
   1c6c4:	str	r0, [sp, #20]
   1c6c8:	ldr	r0, [r4, #4]
   1c6cc:	mov	r1, r9
   1c6d0:	bl	2ac90 <__assert_fail@plt+0x197dc>
   1c6d4:	mov	r6, r0
   1c6d8:	ldr	r0, [r4, #8]
   1c6dc:	mov	r1, r9
   1c6e0:	bl	2ac90 <__assert_fail@plt+0x197dc>
   1c6e4:	mov	r9, r0
   1c6e8:	cmp	r6, #0
   1c6ec:	cmpne	r9, #0
   1c6f0:	beq	1dfdc <__assert_fail@plt+0xcb28>
   1c6f4:	ldr	r4, [sp, #48]	; 0x30
   1c6f8:	mov	r5, #1
   1c6fc:	stmib	r4, {r6, r9}
   1c700:	ldr	r0, [r4, #32]
   1c704:	ldr	lr, [sp, #44]	; 0x2c
   1c708:	b	1c600 <__assert_fail@plt+0xb14c>
   1c70c:	ldr	r0, [r6, #40]	; 0x28
   1c710:	add	r0, r0, r9
   1c714:	str	r0, [r6, #40]	; 0x28
   1c718:	ldr	r0, [sp, #36]	; 0x24
   1c71c:	cmp	r0, #0
   1c720:	beq	1c760 <__assert_fail@plt+0xb2ac>
   1c724:	vld1.32	{d16-d17}, [r4]
   1c728:	mov	r0, r4
   1c72c:	vmvn	q8, q8
   1c730:	vst1.32	{d16-d17}, [r0]!
   1c734:	vld1.32	{d16-d17}, [r0]
   1c738:	vmvn	q8, q8
   1c73c:	vst1.32	{d16-d17}, [r0]
   1c740:	ldr	r0, [r8, #92]	; 0x5c
   1c744:	cmp	r0, #2
   1c748:	bge	1c76c <__assert_fail@plt+0xb2b8>
   1c74c:	ldr	r1, [sl, #20]
   1c750:	ldr	r6, [sp, #40]	; 0x28
   1c754:	cmp	r1, #0
   1c758:	bne	1c818 <__assert_fail@plt+0xb364>
   1c75c:	b	1c7f4 <__assert_fail@plt+0xb340>
   1c760:	ldr	r0, [r8, #92]	; 0x5c
   1c764:	cmp	r0, #2
   1c768:	blt	1c74c <__assert_fail@plt+0xb298>
   1c76c:	ldm	r4, {r1, r2, r3, r7}
   1c770:	ldr	r6, [r8, #60]	; 0x3c
   1c774:	ldr	r5, [r6]
   1c778:	and	r1, r1, r5
   1c77c:	str	r1, [r4]
   1c780:	ldr	r1, [r6, #4]
   1c784:	and	r1, r2, r1
   1c788:	str	r1, [r4, #4]
   1c78c:	ldr	r1, [r6, #8]
   1c790:	and	r1, r3, r1
   1c794:	str	r1, [r4, #8]
   1c798:	ldr	r1, [r6, #12]
   1c79c:	and	r1, r7, r1
   1c7a0:	str	r1, [r4, #12]
   1c7a4:	ldr	r1, [r4, #16]
   1c7a8:	ldr	r2, [r6, #16]
   1c7ac:	and	r1, r1, r2
   1c7b0:	str	r1, [r4, #16]
   1c7b4:	ldr	r1, [r6, #20]
   1c7b8:	ldr	r2, [r4, #20]
   1c7bc:	and	r1, r2, r1
   1c7c0:	str	r1, [r4, #20]
   1c7c4:	ldr	r1, [r6, #24]
   1c7c8:	ldr	r2, [r4, #24]
   1c7cc:	and	r1, r2, r1
   1c7d0:	str	r1, [r4, #24]
   1c7d4:	ldr	r1, [r6, #28]
   1c7d8:	ldr	r2, [r4, #28]
   1c7dc:	and	r1, r2, r1
   1c7e0:	str	r1, [r4, #28]
   1c7e4:	ldr	r1, [sl, #20]
   1c7e8:	ldr	r6, [sp, #40]	; 0x28
   1c7ec:	cmp	r1, #0
   1c7f0:	bne	1c818 <__assert_fail@plt+0xb364>
   1c7f4:	ldr	r1, [sl, #24]
   1c7f8:	cmp	r1, #0
   1c7fc:	bne	1c818 <__assert_fail@plt+0xb364>
   1c800:	ldr	r1, [sl, #28]
   1c804:	cmp	r1, #0
   1c808:	bne	1c818 <__assert_fail@plt+0xb364>
   1c80c:	ldr	r1, [sl, #32]
   1c810:	cmp	r1, #0
   1c814:	beq	1da50 <__assert_fail@plt+0xc59c>
   1c818:	ldrb	r0, [r8, #88]	; 0x58
   1c81c:	orr	r0, r0, #2
   1c820:	strb	r0, [r8, #88]	; 0x58
   1c824:	ldr	r1, [r8, #64]	; 0x40
   1c828:	cmp	r1, #31
   1c82c:	beq	1dc3c <__assert_fail@plt+0xc788>
   1c830:	ldr	r0, [r8, #56]	; 0x38
   1c834:	add	r2, r1, #1
   1c838:	add	r0, r0, r1, lsl #5
   1c83c:	mov	r1, #6
   1c840:	vmov.i32	q8, #0	; 0x00000000
   1c844:	str	r2, [r8, #64]	; 0x40
   1c848:	mov	r2, #0
   1c84c:	add	r9, r0, #4
   1c850:	str	r2, [r0, #20]
   1c854:	str	sl, [r0, #24]
   1c858:	str	r1, [r0, #28]
   1c85c:	mov	r0, #28
   1c860:	mov	r1, r9
   1c864:	vst1.32	{d16-d17}, [r1], r0
   1c868:	mvn	r0, #0
   1c86c:	str	r0, [r1]
   1c870:	ldr	r0, [r4]
   1c874:	cmp	r0, #0
   1c878:	bne	1c8d0 <__assert_fail@plt+0xb41c>
   1c87c:	ldr	r0, [r4, #4]
   1c880:	cmp	r0, #0
   1c884:	bne	1c8d0 <__assert_fail@plt+0xb41c>
   1c888:	ldr	r0, [r4, #8]
   1c88c:	cmp	r0, #0
   1c890:	bne	1c8d0 <__assert_fail@plt+0xb41c>
   1c894:	ldr	r0, [r4, #12]
   1c898:	cmp	r0, #0
   1c89c:	bne	1c8d0 <__assert_fail@plt+0xb41c>
   1c8a0:	ldr	r0, [r4, #16]
   1c8a4:	cmp	r0, #0
   1c8a8:	bne	1c8d0 <__assert_fail@plt+0xb41c>
   1c8ac:	ldr	r0, [r4, #20]
   1c8b0:	cmp	r0, #0
   1c8b4:	bne	1c8d0 <__assert_fail@plt+0xb41c>
   1c8b8:	ldr	r0, [r4, #24]
   1c8bc:	cmp	r0, #0
   1c8c0:	bne	1c8d0 <__assert_fail@plt+0xb41c>
   1c8c4:	ldr	r0, [r4, #28]
   1c8c8:	cmp	r0, #0
   1c8cc:	beq	1dcf0 <__assert_fail@plt+0xc83c>
   1c8d0:	ldr	r1, [r8, #64]	; 0x40
   1c8d4:	cmp	r1, #31
   1c8d8:	beq	1dc68 <__assert_fail@plt+0xc7b4>
   1c8dc:	ldr	r0, [r8, #56]	; 0x38
   1c8e0:	add	r2, r1, #1
   1c8e4:	add	r0, r0, r1, lsl #5
   1c8e8:	mov	r1, #3
   1c8ec:	vmov.i32	q8, #0	; 0x00000000
   1c8f0:	str	r2, [r8, #64]	; 0x40
   1c8f4:	mov	r2, #0
   1c8f8:	add	r5, r0, #4
   1c8fc:	str	r2, [r0, #20]
   1c900:	str	r4, [r0, #24]
   1c904:	str	r1, [r0, #28]
   1c908:	mov	r0, #28
   1c90c:	mov	r1, r5
   1c910:	vst1.32	{d16-d17}, [r1], r0
   1c914:	mvn	r0, #0
   1c918:	str	r0, [r1]
   1c91c:	ldr	r1, [r8, #64]	; 0x40
   1c920:	cmp	r1, #31
   1c924:	beq	1dc94 <__assert_fail@plt+0xc7e0>
   1c928:	ldr	r0, [r8, #56]	; 0x38
   1c92c:	add	r2, r1, #1
   1c930:	add	r7, r0, r1, lsl #5
   1c934:	mov	r0, #0
   1c938:	mov	r1, #10
   1c93c:	str	r2, [r8, #64]	; 0x40
   1c940:	str	r0, [r7, #4]!
   1c944:	mvn	r2, #0
   1c948:	add	r3, r7, #20
   1c94c:	stmib	r7, {r5, r9}
   1c950:	str	r0, [r7, #12]
   1c954:	str	r0, [r7, #16]
   1c958:	stm	r3, {r0, r1, r2}
   1c95c:	str	r7, [r5]
   1c960:	str	r7, [r9]
   1c964:	b	1cb80 <__assert_fail@plt+0xb6cc>
   1c968:	mov	r0, #5
   1c96c:	mov	r4, r8
   1c970:	str	r0, [lr]
   1c974:	ldr	r1, [r4, #64]!	; 0x40
   1c978:	cmp	r1, #31
   1c97c:	beq	1dd6c <__assert_fail@plt+0xc8b8>
   1c980:	ldr	r0, [r8, #56]	; 0x38
   1c984:	add	r2, r1, #1
   1c988:	add	r5, r0, r1, lsl #5
   1c98c:	mov	r0, #0
   1c990:	str	r2, [r4]
   1c994:	str	r0, [r5, #4]!
   1c998:	str	r0, [r5, #4]
   1c99c:	str	r0, [r5, #8]
   1c9a0:	ldm	lr, {r1, r2}
   1c9a4:	str	r0, [r5, #12]
   1c9a8:	str	r0, [r5, #16]
   1c9ac:	mvn	r0, #0
   1c9b0:	str	r0, [r5, #28]
   1c9b4:	bic	r0, r2, #786432	; 0xc0000
   1c9b8:	str	r1, [r5, #20]
   1c9bc:	str	r0, [r5, #24]
   1c9c0:	mov	r0, #10
   1c9c4:	str	r0, [lr]
   1c9c8:	mov	r9, r6
   1c9cc:	ldr	r1, [r4]
   1c9d0:	cmp	r1, #31
   1c9d4:	beq	1dd04 <__assert_fail@plt+0xc850>
   1c9d8:	ldr	r0, [r8, #56]	; 0x38
   1c9dc:	add	r2, r1, #1
   1c9e0:	add	r6, r0, r1, lsl #5
   1c9e4:	mov	r0, #0
   1c9e8:	str	r2, [r4]
   1c9ec:	str	r0, [r6, #4]!
   1c9f0:	str	r0, [r6, #4]
   1c9f4:	str	r0, [r6, #8]
   1c9f8:	ldm	lr, {r1, r2}
   1c9fc:	str	r0, [r6, #12]
   1ca00:	str	r0, [r6, #16]
   1ca04:	mvn	r0, #0
   1ca08:	str	r0, [r6, #28]
   1ca0c:	bic	r0, r2, #786432	; 0xc0000
   1ca10:	str	r1, [r6, #20]
   1ca14:	str	r0, [r6, #24]
   1ca18:	ldr	r1, [r4]
   1ca1c:	cmp	r1, #31
   1ca20:	beq	1de9c <__assert_fail@plt+0xc9e8>
   1ca24:	ldr	r0, [r8, #56]	; 0x38
   1ca28:	add	r2, r1, #1
   1ca2c:	cmp	r5, #0
   1ca30:	str	r2, [r4]
   1ca34:	add	r4, r0, r1, lsl #5
   1ca38:	mov	r0, #0
   1ca3c:	mov	r1, #10
   1ca40:	mvn	r2, #0
   1ca44:	str	r0, [r4, #4]!
   1ca48:	add	r3, r4, #20
   1ca4c:	stmib	r4, {r5, r6}
   1ca50:	str	r0, [r4, #12]
   1ca54:	str	r0, [r4, #16]
   1ca58:	stm	r3, {r0, r1, r2}
   1ca5c:	strne	r4, [r5]
   1ca60:	cmp	r6, #0
   1ca64:	strne	r4, [r6]
   1ca68:	cmpne	r5, #0
   1ca6c:	bne	1cad8 <__assert_fail@plt+0xb624>
   1ca70:	mov	r0, #12
   1ca74:	ldr	r1, [sp, #16]
   1ca78:	str	r0, [r1]
   1ca7c:	mov	r0, sl
   1ca80:	sub	sp, fp, #28
   1ca84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca88:	ldr	r1, [r8, #64]	; 0x40
   1ca8c:	mov	r9, r6
   1ca90:	cmp	r1, #31
   1ca94:	beq	1dda0 <__assert_fail@plt+0xc8ec>
   1ca98:	ldr	r0, [r8, #56]	; 0x38
   1ca9c:	add	r2, r1, #1
   1caa0:	add	r4, r0, r1, lsl #5
   1caa4:	mov	r0, #0
   1caa8:	str	r2, [r8, #64]	; 0x40
   1caac:	str	r0, [r4, #4]!
   1cab0:	str	r0, [r4, #4]
   1cab4:	str	r0, [r4, #8]
   1cab8:	ldm	lr, {r1, r2}
   1cabc:	str	r0, [r4, #12]
   1cac0:	str	r0, [r4, #16]
   1cac4:	mvn	r0, #0
   1cac8:	str	r0, [r4, #28]
   1cacc:	bic	r0, r2, #786432	; 0xc0000
   1cad0:	str	r1, [r4, #20]
   1cad4:	str	r0, [r4, #24]
   1cad8:	mov	r0, lr
   1cadc:	mov	r1, r7
   1cae0:	mov	r2, r9
   1cae4:	bl	1ada8 <__assert_fail@plt+0x98f4>
   1cae8:	ldr	r1, [r7, #40]	; 0x28
   1caec:	mov	sl, r4
   1caf0:	add	r0, r1, r0
   1caf4:	str	r0, [r7, #40]	; 0x28
   1caf8:	mov	r0, sl
   1cafc:	sub	sp, fp, #28
   1cb00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb04:	ldrb	r0, [r6, #4]
   1cb08:	cmp	r0, #9
   1cb0c:	bne	1dec8 <__assert_fail@plt+0xca14>
   1cb10:	mov	lr, r6
   1cb14:	cmp	r4, #8
   1cb18:	ldrls	r0, [r8, #84]	; 0x54
   1cb1c:	movls	r1, #1
   1cb20:	orrls	r0, r0, r1, lsl r4
   1cb24:	strls	r0, [r8, #84]	; 0x54
   1cb28:	ldr	r1, [r8, #64]	; 0x40
   1cb2c:	cmp	r1, #31
   1cb30:	beq	1dcc0 <__assert_fail@plt+0xc80c>
   1cb34:	ldr	r0, [r8, #56]	; 0x38
   1cb38:	mov	r6, sl
   1cb3c:	add	r0, r0, r1, lsl #5
   1cb40:	add	r2, r1, #1
   1cb44:	mov	r1, #0
   1cb48:	mvn	r3, #0
   1cb4c:	cmp	r9, #0
   1cb50:	mov	r7, r0
   1cb54:	str	r2, [r8, #64]	; 0x40
   1cb58:	mov	r2, #17
   1cb5c:	str	r1, [r7, #4]!
   1cb60:	add	ip, r7, #20
   1cb64:	str	r9, [r7, #4]
   1cb68:	str	r1, [r7, #8]
   1cb6c:	str	r1, [r7, #12]
   1cb70:	str	r1, [r7, #16]
   1cb74:	stm	ip, {r1, r2, r3}
   1cb78:	strne	r7, [r9]
   1cb7c:	str	r4, [r0, #24]
   1cb80:	mov	r4, r6
   1cb84:	ldr	r6, [sp, #24]
   1cb88:	mov	r0, lr
   1cb8c:	mov	r2, r4
   1cb90:	mov	r1, r6
   1cb94:	bl	1ada8 <__assert_fail@plt+0x98f4>
   1cb98:	ldr	r1, [r6, #40]	; 0x28
   1cb9c:	ldr	ip, [sp, #44]	; 0x2c
   1cba0:	add	r0, r1, r0
   1cba4:	str	r0, [r6, #40]	; 0x28
   1cba8:	add	r0, r8, #56	; 0x38
   1cbac:	add	r8, r8, #64	; 0x40
   1cbb0:	str	r0, [sp, #20]
   1cbb4:	and	r0, r4, #2097152	; 0x200000
   1cbb8:	str	r0, [sp, #12]
   1cbbc:	str	r4, [sp, #40]	; 0x28
   1cbc0:	and	r0, r4, #16777216	; 0x1000000
   1cbc4:	mov	r4, #0
   1cbc8:	str	r0, [sp, #28]
   1cbcc:	b	1d8ac <__assert_fail@plt+0xc3f8>
   1cbd0:	movw	r2, #2048	; 0x800
   1cbd4:	mov	r1, #1
   1cbd8:	movt	r2, #140	; 0x8c
   1cbdc:	tst	r2, r1, lsl r0
   1cbe0:	beq	1d974 <__assert_fail@plt+0xc4c0>
   1cbe4:	cmp	r0, #23
   1cbe8:	str	sl, [sp, #36]	; 0x24
   1cbec:	bne	1cc00 <__assert_fail@plt+0xb74c>
   1cbf0:	ldm	ip, {r5, sl}
   1cbf4:	ldr	r7, [r6, #40]	; 0x28
   1cbf8:	mvn	r2, #0
   1cbfc:	b	1cc34 <__assert_fail@plt+0xb780>
   1cc00:	cmp	r0, #19
   1cc04:	sub	r0, r0, #18
   1cc08:	mvn	r5, #0
   1cc0c:	clz	r0, r0
   1cc10:	movweq	r5, #1
   1cc14:	lsr	r9, r0, #5
   1cc18:	b	1ce48 <__assert_fail@plt+0xb994>
   1cc1c:	add	r0, r9, r9, lsl #2
   1cc20:	add	r0, r1, r0, lsl #1
   1cc24:	movw	r1, #32816	; 0x8030
   1cc28:	sub	r2, r0, #48	; 0x30
   1cc2c:	cmp	r0, r1
   1cc30:	movwgt	r2, #32768	; 0x8000
   1cc34:	mov	r9, r2
   1cc38:	ldr	r2, [sp, #40]	; 0x28
   1cc3c:	mov	r0, ip
   1cc40:	mov	r1, r6
   1cc44:	bl	1ada8 <__assert_fail@plt+0x98f4>
   1cc48:	ldr	r1, [r6, #40]	; 0x28
   1cc4c:	ldr	ip, [sp, #44]	; 0x2c
   1cc50:	add	r0, r1, r0
   1cc54:	str	r0, [r6, #40]	; 0x28
   1cc58:	ldrb	r0, [ip, #4]
   1cc5c:	ldrb	r1, [ip]
   1cc60:	cmp	r0, #24
   1cc64:	beq	1ccac <__assert_fail@plt+0xb7f8>
   1cc68:	cmp	r0, #2
   1cc6c:	beq	1cd1c <__assert_fail@plt+0xb868>
   1cc70:	cmp	r1, #44	; 0x2c
   1cc74:	beq	1ccac <__assert_fail@plt+0xb7f8>
   1cc78:	mvn	r2, #1
   1cc7c:	cmp	r1, #48	; 0x30
   1cc80:	bcc	1cc34 <__assert_fail@plt+0xb780>
   1cc84:	cmp	r0, #1
   1cc88:	bne	1cc34 <__assert_fail@plt+0xb780>
   1cc8c:	cmn	r9, #2
   1cc90:	beq	1cc34 <__assert_fail@plt+0xb780>
   1cc94:	cmp	r1, #57	; 0x39
   1cc98:	bhi	1cc34 <__assert_fail@plt+0xb780>
   1cc9c:	cmn	r9, #1
   1cca0:	bne	1cc1c <__assert_fail@plt+0xb768>
   1cca4:	sub	r2, r1, #48	; 0x30
   1cca8:	b	1cc34 <__assert_fail@plt+0xb780>
   1ccac:	cmn	r9, #1
   1ccb0:	bne	1ccfc <__assert_fail@plt+0xb848>
   1ccb4:	cmp	r1, #44	; 0x2c
   1ccb8:	moveq	r9, #0
   1ccbc:	cmpeq	r0, #1
   1ccc0:	beq	1cd54 <__assert_fail@plt+0xb8a0>
   1ccc4:	ldr	r0, [sp, #16]
   1ccc8:	mov	r1, #10
   1cccc:	str	r1, [r0]
   1ccd0:	ldr	sl, [sp, #36]	; 0x24
   1ccd4:	mov	r7, #0
   1ccd8:	clz	r0, r7
   1ccdc:	cmp	r7, #0
   1cce0:	lsr	r0, r0, #5
   1cce4:	bne	1d8a0 <__assert_fail@plt+0xc3ec>
   1cce8:	ldr	r1, [sp, #16]
   1ccec:	ldr	r1, [r1]
   1ccf0:	cmp	r1, #0
   1ccf4:	beq	1d8a0 <__assert_fail@plt+0xc3ec>
   1ccf8:	b	1d98c <__assert_fail@plt+0xc4d8>
   1ccfc:	cmn	r9, #2
   1cd00:	mov	r2, r9
   1cd04:	beq	1cd1c <__assert_fail@plt+0xb868>
   1cd08:	cmp	r0, #24
   1cd0c:	beq	1cd60 <__assert_fail@plt+0xb8ac>
   1cd10:	cmp	r0, #1
   1cd14:	cmpeq	r1, #44	; 0x2c
   1cd18:	beq	1cd54 <__assert_fail@plt+0xb8a0>
   1cd1c:	ldr	r1, [sp, #12]
   1cd20:	cmp	r1, #0
   1cd24:	beq	1d3fc <__assert_fail@plt+0xbf48>
   1cd28:	mov	r0, #1
   1cd2c:	str	r7, [r6, #40]	; 0x28
   1cd30:	bfi	sl, r0, #0, #8
   1cd34:	stm	ip, {r5, sl}
   1cd38:	ldr	sl, [sp, #36]	; 0x24
   1cd3c:	mov	r7, sl
   1cd40:	clz	r0, r7
   1cd44:	cmp	r7, #0
   1cd48:	lsr	r0, r0, #5
   1cd4c:	beq	1cce8 <__assert_fail@plt+0xb834>
   1cd50:	b	1d8a0 <__assert_fail@plt+0xc3ec>
   1cd54:	mvn	r2, #0
   1cd58:	str	sl, [sp, #52]	; 0x34
   1cd5c:	b	1cd8c <__assert_fail@plt+0xb8d8>
   1cd60:	ldr	sl, [sp, #36]	; 0x24
   1cd64:	mov	r5, r9
   1cd68:	cmp	r0, #24
   1cd6c:	beq	1ce34 <__assert_fail@plt+0xb980>
   1cd70:	b	1d444 <__assert_fail@plt+0xbf90>
   1cd74:	add	r0, sl, sl, lsl #2
   1cd78:	add	r0, r1, r0, lsl #1
   1cd7c:	movw	r1, #32816	; 0x8030
   1cd80:	sub	r2, r0, #48	; 0x30
   1cd84:	cmp	r0, r1
   1cd88:	movwgt	r2, #32768	; 0x8000
   1cd8c:	mov	sl, r2
   1cd90:	ldr	r2, [sp, #40]	; 0x28
   1cd94:	mov	r0, ip
   1cd98:	mov	r1, r6
   1cd9c:	bl	1ada8 <__assert_fail@plt+0x98f4>
   1cda0:	ldr	r1, [r6, #40]	; 0x28
   1cda4:	ldr	ip, [sp, #44]	; 0x2c
   1cda8:	add	r0, r1, r0
   1cdac:	str	r0, [r6, #40]	; 0x28
   1cdb0:	ldrb	r0, [ip, #4]
   1cdb4:	cmp	r0, #24
   1cdb8:	beq	1ce04 <__assert_fail@plt+0xb950>
   1cdbc:	cmp	r0, #2
   1cdc0:	beq	1d3ec <__assert_fail@plt+0xbf38>
   1cdc4:	ldrb	r1, [ip]
   1cdc8:	cmp	r1, #44	; 0x2c
   1cdcc:	beq	1ce04 <__assert_fail@plt+0xb950>
   1cdd0:	mvn	r2, #1
   1cdd4:	cmp	r1, #48	; 0x30
   1cdd8:	bcc	1cd8c <__assert_fail@plt+0xb8d8>
   1cddc:	cmp	r0, #1
   1cde0:	bne	1cd8c <__assert_fail@plt+0xb8d8>
   1cde4:	cmn	sl, #2
   1cde8:	beq	1cd8c <__assert_fail@plt+0xb8d8>
   1cdec:	cmp	r1, #57	; 0x39
   1cdf0:	bhi	1cd8c <__assert_fail@plt+0xb8d8>
   1cdf4:	cmn	sl, #1
   1cdf8:	bne	1cd74 <__assert_fail@plt+0xb8c0>
   1cdfc:	sub	r2, r1, #48	; 0x30
   1ce00:	b	1cd8c <__assert_fail@plt+0xb8d8>
   1ce04:	cmn	sl, #2
   1ce08:	beq	1d3ec <__assert_fail@plt+0xbf38>
   1ce0c:	cmn	sl, #1
   1ce10:	mov	r5, sl
   1ce14:	beq	1ce28 <__assert_fail@plt+0xb974>
   1ce18:	ldr	sl, [sp, #36]	; 0x24
   1ce1c:	cmp	r9, r5
   1ce20:	ble	1ce2c <__assert_fail@plt+0xb978>
   1ce24:	b	1d444 <__assert_fail@plt+0xbf90>
   1ce28:	ldr	sl, [sp, #36]	; 0x24
   1ce2c:	cmp	r0, #24
   1ce30:	bne	1d444 <__assert_fail@plt+0xbf90>
   1ce34:	cmn	r5, #1
   1ce38:	mov	r0, r5
   1ce3c:	moveq	r0, r9
   1ce40:	cmp	r0, #32768	; 0x8000
   1ce44:	bge	1d450 <__assert_fail@plt+0xbf9c>
   1ce48:	ldr	r2, [sp, #40]	; 0x28
   1ce4c:	mov	r0, ip
   1ce50:	mov	r1, r6
   1ce54:	bl	1ada8 <__assert_fail@plt+0x98f4>
   1ce58:	ldr	r1, [r6, #40]	; 0x28
   1ce5c:	mov	r7, #0
   1ce60:	cmp	sl, #0
   1ce64:	add	r0, r1, r0
   1ce68:	str	r0, [r6, #40]	; 0x28
   1ce6c:	beq	1d2d8 <__assert_fail@plt+0xbe24>
   1ce70:	ldr	lr, [sp, #20]
   1ce74:	orrs	r0, r5, r9
   1ce78:	beq	1d2f0 <__assert_fail@plt+0xbe3c>
   1ce7c:	mov	r0, #0
   1ce80:	cmp	r9, #1
   1ce84:	mov	r7, sl
   1ce88:	str	r0, [sp, #32]
   1ce8c:	ldr	ip, [sp, #44]	; 0x2c
   1ce90:	str	r5, [sp, #48]	; 0x30
   1ce94:	bge	1d398 <__assert_fail@plt+0xbee4>
   1ce98:	ldrb	r0, [r7, #24]
   1ce9c:	cmp	r0, #17
   1cea0:	bne	1cf10 <__assert_fail@plt+0xba5c>
   1cea4:	ldr	r0, [r7, #20]
   1cea8:	mov	r2, r7
   1ceac:	mov	r1, r2
   1ceb0:	ldr	r2, [r2, #4]
   1ceb4:	cmp	r2, #0
   1ceb8:	bne	1ceac <__assert_fail@plt+0xb9f8>
   1cebc:	ldr	r2, [r1, #8]
   1cec0:	cmp	r2, #0
   1cec4:	bne	1ceac <__assert_fail@plt+0xb9f8>
   1cec8:	ldr	r2, [r1, #24]
   1cecc:	uxtb	r3, r2
   1ced0:	cmp	r3, #17
   1ced4:	ldreq	r3, [r1, #20]
   1ced8:	cmpeq	r3, r0
   1cedc:	orreq	r2, r2, #524288	; 0x80000
   1cee0:	streq	r2, [r1, #24]
   1cee4:	ldr	r3, [r1]
   1cee8:	cmp	r3, #0
   1ceec:	beq	1cf10 <__assert_fail@plt+0xba5c>
   1cef0:	ldr	r2, [r3, #8]
   1cef4:	cmp	r2, r1
   1cef8:	mov	r1, r3
   1cefc:	beq	1cec8 <__assert_fail@plt+0xba14>
   1cf00:	cmp	r2, #0
   1cf04:	mov	r1, r3
   1cf08:	beq	1cec8 <__assert_fail@plt+0xba14>
   1cf0c:	b	1ceac <__assert_fail@plt+0xb9f8>
   1cf10:	ldr	r1, [r8]
   1cf14:	cmn	r5, #1
   1cf18:	mov	r6, #10
   1cf1c:	movweq	r6, #11
   1cf20:	cmp	r1, #31
   1cf24:	beq	1d3b8 <__assert_fail@plt+0xbf04>
   1cf28:	ldr	r0, [lr]
   1cf2c:	add	r2, r1, #1
   1cf30:	add	sl, r0, r1, lsl #5
   1cf34:	mvn	r0, #0
   1cf38:	str	r2, [r8]
   1cf3c:	str	r4, [sl, #4]!
   1cf40:	str	r7, [sl, #4]
   1cf44:	str	r4, [sl, #8]
   1cf48:	str	r4, [sl, #12]
   1cf4c:	str	r4, [sl, #16]
   1cf50:	str	r4, [sl, #20]
   1cf54:	str	r6, [sl, #24]
   1cf58:	str	r0, [sl, #28]
   1cf5c:	add	r0, r9, #2
   1cf60:	str	sl, [r7]
   1cf64:	cmp	r0, r5
   1cf68:	bgt	1d244 <__assert_fail@plt+0xbd90>
   1cf6c:	mov	r6, sl
   1cf70:	ldr	r1, [r8]
   1cf74:	str	r0, [sp, #52]	; 0x34
   1cf78:	cmp	r1, #31
   1cf7c:	beq	1d188 <__assert_fail@plt+0xbcd4>
   1cf80:	ldr	r0, [lr]
   1cf84:	add	r3, r1, #1
   1cf88:	add	r9, r0, r1, lsl #5
   1cf8c:	add	r2, r7, #20
   1cf90:	sub	r5, fp, #80	; 0x50
   1cf94:	str	r3, [r8]
   1cf98:	str	r4, [r9, #4]!
   1cf9c:	str	r4, [r9, #4]
   1cfa0:	str	r4, [r9, #8]
   1cfa4:	ldm	r2, {r0, r1}
   1cfa8:	mvn	r2, #0
   1cfac:	str	r4, [r9, #12]
   1cfb0:	str	r4, [r9, #16]
   1cfb4:	str	r2, [r9, #28]
   1cfb8:	str	r0, [r9, #20]
   1cfbc:	bic	r0, r1, #786432	; 0xc0000
   1cfc0:	str	r0, [r9, #24]
   1cfc4:	mov	r0, r9
   1cfc8:	str	r9, [fp, #-80]	; 0xffffffb0
   1cfcc:	b	1d010 <__assert_fail@plt+0xbb5c>
   1cfd0:	add	r3, r1, #1
   1cfd4:	add	r0, r0, r1, lsl #5
   1cfd8:	add	r2, r7, #20
   1cfdc:	str	r3, [r8]
   1cfe0:	str	r4, [r0, #4]!
   1cfe4:	mvn	r3, #0
   1cfe8:	str	r4, [r0, #4]
   1cfec:	str	r4, [r0, #8]
   1cff0:	ldm	r2, {r1, r2}
   1cff4:	str	r4, [r0, #12]
   1cff8:	str	r4, [r0, #16]
   1cffc:	str	r3, [r0, #28]
   1d000:	str	r1, [r0, #20]
   1d004:	bic	r1, r2, #786432	; 0xc0000
   1d008:	str	r1, [r0, #24]
   1d00c:	str	r0, [r5]
   1d010:	str	sl, [r0]
   1d014:	ldr	r0, [r5]
   1d018:	ldr	r1, [r0, #24]
   1d01c:	orr	r1, r1, #262144	; 0x40000
   1d020:	str	r1, [r0, #24]
   1d024:	ldr	r0, [r7, #4]
   1d028:	ldr	sl, [r5]
   1d02c:	cmp	r0, #0
   1d030:	beq	1d050 <__assert_fail@plt+0xbb9c>
   1d034:	add	r5, sl, #4
   1d038:	mov	r7, r0
   1d03c:	ldr	r1, [r8]
   1d040:	cmp	r1, #31
   1d044:	beq	1d090 <__assert_fail@plt+0xbbdc>
   1d048:	ldr	r0, [lr]
   1d04c:	b	1cfd0 <__assert_fail@plt+0xbb1c>
   1d050:	mov	r1, #0
   1d054:	mov	r0, r7
   1d058:	ldr	r7, [r7, #8]
   1d05c:	cmp	r7, r1
   1d060:	cmpne	r7, #0
   1d064:	bne	1d080 <__assert_fail@plt+0xbbcc>
   1d068:	ldr	r7, [r0]
   1d06c:	ldr	sl, [sl]
   1d070:	mov	r1, r0
   1d074:	cmp	r7, #0
   1d078:	bne	1d054 <__assert_fail@plt+0xbba0>
   1d07c:	b	1d0c0 <__assert_fail@plt+0xbc0c>
   1d080:	add	r5, sl, #8
   1d084:	ldr	r1, [r8]
   1d088:	cmp	r1, #31
   1d08c:	bne	1d048 <__assert_fail@plt+0xbb94>
   1d090:	mov	r0, #996	; 0x3e4
   1d094:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1d098:	cmp	r0, #0
   1d09c:	beq	1d1f4 <__assert_fail@plt+0xbd40>
   1d0a0:	ldr	lr, [sp, #20]
   1d0a4:	ldr	ip, [sp, #44]	; 0x2c
   1d0a8:	ldr	r1, [lr]
   1d0ac:	str	r1, [r0]
   1d0b0:	mov	r1, #0
   1d0b4:	str	r0, [lr]
   1d0b8:	str	r1, [r8]
   1d0bc:	b	1cfd0 <__assert_fail@plt+0xbb1c>
   1d0c0:	mov	r7, r9
   1d0c4:	ldr	r1, [r8]
   1d0c8:	cmp	r1, #31
   1d0cc:	beq	1d210 <__assert_fail@plt+0xbd5c>
   1d0d0:	ldr	r0, [lr]
   1d0d4:	add	r2, r1, #1
   1d0d8:	add	r5, r0, r1, lsl #5
   1d0dc:	mov	r0, #16
   1d0e0:	cmp	r7, #0
   1d0e4:	str	r2, [r8]
   1d0e8:	str	r4, [r5, #4]!
   1d0ec:	stmib	r5, {r6, r7}
   1d0f0:	str	r4, [r5, #12]
   1d0f4:	str	r4, [r5, #16]
   1d0f8:	str	r4, [r5, #20]
   1d0fc:	str	r0, [r5, #24]
   1d100:	mvn	r0, #0
   1d104:	str	r0, [r5, #28]
   1d108:	str	r5, [r6]
   1d10c:	beq	1d878 <__assert_fail@plt+0xc3c4>
   1d110:	str	r5, [r7]
   1d114:	ldr	r1, [r8]
   1d118:	cmp	r1, #31
   1d11c:	beq	1d1b8 <__assert_fail@plt+0xbd04>
   1d120:	ldr	r0, [lr]
   1d124:	add	r2, r1, #1
   1d128:	add	r6, r0, r1, lsl #5
   1d12c:	mov	r0, #10
   1d130:	ldr	r1, [sp, #52]	; 0x34
   1d134:	str	r2, [r8]
   1d138:	str	r4, [r6, #4]!
   1d13c:	str	r5, [r6, #4]
   1d140:	str	r4, [r6, #8]
   1d144:	str	r4, [r6, #12]
   1d148:	str	r4, [r6, #16]
   1d14c:	str	r4, [r6, #20]
   1d150:	str	r0, [r6, #24]
   1d154:	mvn	r0, #0
   1d158:	str	r0, [r6, #28]
   1d15c:	ldr	r0, [sp, #48]	; 0x30
   1d160:	str	r6, [r5]
   1d164:	cmp	r1, r0
   1d168:	bge	1d240 <__assert_fail@plt+0xbd8c>
   1d16c:	ldr	sl, [r7]
   1d170:	mov	r0, r1
   1d174:	add	r0, r1, #1
   1d178:	ldr	r1, [r8]
   1d17c:	str	r0, [sp, #52]	; 0x34
   1d180:	cmp	r1, #31
   1d184:	bne	1cf80 <__assert_fail@plt+0xbacc>
   1d188:	mov	r0, #996	; 0x3e4
   1d18c:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1d190:	cmp	r0, #0
   1d194:	beq	1d1e8 <__assert_fail@plt+0xbd34>
   1d198:	ldr	lr, [sp, #20]
   1d19c:	ldr	ip, [sp, #44]	; 0x2c
   1d1a0:	ldr	r1, [lr]
   1d1a4:	str	r1, [r0]
   1d1a8:	mov	r1, #0
   1d1ac:	str	r0, [lr]
   1d1b0:	str	r1, [r8]
   1d1b4:	b	1cf84 <__assert_fail@plt+0xbad0>
   1d1b8:	mov	r0, #996	; 0x3e4
   1d1bc:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1d1c0:	ldr	lr, [sp, #20]
   1d1c4:	ldr	ip, [sp, #44]	; 0x2c
   1d1c8:	cmp	r0, #0
   1d1cc:	beq	1d878 <__assert_fail@plt+0xc3c4>
   1d1d0:	ldr	r1, [lr]
   1d1d4:	str	r1, [r0]
   1d1d8:	mov	r1, #0
   1d1dc:	str	r0, [lr]
   1d1e0:	str	r1, [r8]
   1d1e4:	b	1d124 <__assert_fail@plt+0xbc70>
   1d1e8:	mov	r7, #0
   1d1ec:	str	r7, [fp, #-80]	; 0xffffffb0
   1d1f0:	b	1d1fc <__assert_fail@plt+0xbd48>
   1d1f4:	mov	r7, #0
   1d1f8:	str	r7, [r5]
   1d1fc:	ldr	ip, [sp, #44]	; 0x2c
   1d200:	ldr	lr, [sp, #20]
   1d204:	ldr	r1, [r8]
   1d208:	cmp	r1, #31
   1d20c:	bne	1d0d0 <__assert_fail@plt+0xbc1c>
   1d210:	mov	r0, #996	; 0x3e4
   1d214:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1d218:	ldr	lr, [sp, #20]
   1d21c:	ldr	ip, [sp, #44]	; 0x2c
   1d220:	cmp	r0, #0
   1d224:	beq	1d878 <__assert_fail@plt+0xc3c4>
   1d228:	ldr	r1, [lr]
   1d22c:	str	r1, [r0]
   1d230:	mov	r1, #0
   1d234:	str	r0, [lr]
   1d238:	str	r1, [r8]
   1d23c:	b	1d0d4 <__assert_fail@plt+0xbc20>
   1d240:	mov	sl, r6
   1d244:	ldr	r5, [sp, #32]
   1d248:	ldr	r6, [sp, #24]
   1d24c:	cmp	r5, #0
   1d250:	beq	1d2c0 <__assert_fail@plt+0xbe0c>
   1d254:	ldr	r1, [r8]
   1d258:	cmp	r1, #31
   1d25c:	beq	1d414 <__assert_fail@plt+0xbf60>
   1d260:	ldr	r0, [lr]
   1d264:	add	r2, r1, #1
   1d268:	add	r7, r0, r1, lsl #5
   1d26c:	mov	r0, #0
   1d270:	mov	r1, #16
   1d274:	str	r2, [r8]
   1d278:	str	r0, [r7, #4]!
   1d27c:	stmib	r7, {r5, sl}
   1d280:	str	r0, [r7, #12]
   1d284:	str	r0, [r7, #16]
   1d288:	str	r0, [r7, #20]
   1d28c:	str	r1, [r7, #24]
   1d290:	mvn	r1, #0
   1d294:	str	r1, [r7, #28]
   1d298:	str	r7, [r5]
   1d29c:	str	r7, [sl]
   1d2a0:	ldr	r1, [sp, #28]
   1d2a4:	cmp	r1, #0
   1d2a8:	beq	1d8ac <__assert_fail@plt+0xc3f8>
   1d2ac:	ldrb	r1, [ip, #4]
   1d2b0:	cmp	r1, #23
   1d2b4:	cmpne	r1, #11
   1d2b8:	bne	1d8ac <__assert_fail@plt+0xc3f8>
   1d2bc:	b	1d8c0 <__assert_fail@plt+0xc40c>
   1d2c0:	mov	r0, #0
   1d2c4:	mov	r7, sl
   1d2c8:	ldr	r1, [sp, #28]
   1d2cc:	cmp	r1, #0
   1d2d0:	beq	1d8ac <__assert_fail@plt+0xc3f8>
   1d2d4:	b	1d2ac <__assert_fail@plt+0xbdf8>
   1d2d8:	ldr	ip, [sp, #44]	; 0x2c
   1d2dc:	clz	r0, r7
   1d2e0:	cmp	r7, #0
   1d2e4:	lsr	r0, r0, #5
   1d2e8:	beq	1cce8 <__assert_fail@plt+0xb834>
   1d2ec:	b	1d8a0 <__assert_fail@plt+0xc3ec>
   1d2f0:	ldr	ip, [sp, #44]	; 0x2c
   1d2f4:	mov	r0, sl
   1d2f8:	mov	r5, r0
   1d2fc:	ldr	r0, [r0, #4]
   1d300:	cmp	r0, #0
   1d304:	bne	1d2f8 <__assert_fail@plt+0xbe44>
   1d308:	ldr	r0, [r5, #8]
   1d30c:	cmp	r0, #0
   1d310:	bne	1d2f8 <__assert_fail@plt+0xbe44>
   1d314:	ldr	r0, [r5, #24]
   1d318:	movw	r1, #255	; 0xff
   1d31c:	movt	r1, #4
   1d320:	and	r0, r0, r1
   1d324:	cmp	r0, #3
   1d328:	beq	1d360 <__assert_fail@plt+0xbeac>
   1d32c:	cmp	r0, #6
   1d330:	bne	1d36c <__assert_fail@plt+0xbeb8>
   1d334:	ldr	r9, [r5, #20]
   1d338:	ldr	r0, [r9]
   1d33c:	bl	2ae28 <__assert_fail@plt+0x19974>
   1d340:	ldr	r0, [r9, #4]
   1d344:	bl	2ae28 <__assert_fail@plt+0x19974>
   1d348:	ldr	r0, [r9, #8]
   1d34c:	bl	2ae28 <__assert_fail@plt+0x19974>
   1d350:	ldr	r0, [r9, #12]
   1d354:	bl	2ae28 <__assert_fail@plt+0x19974>
   1d358:	mov	r0, r9
   1d35c:	b	1d364 <__assert_fail@plt+0xbeb0>
   1d360:	ldr	r0, [r5, #20]
   1d364:	bl	2ae28 <__assert_fail@plt+0x19974>
   1d368:	ldr	ip, [sp, #44]	; 0x2c
   1d36c:	ldr	r1, [r5]
   1d370:	cmp	r1, #0
   1d374:	beq	1d890 <__assert_fail@plt+0xc3dc>
   1d378:	ldr	r0, [r1, #8]
   1d37c:	cmp	r0, r5
   1d380:	mov	r5, r1
   1d384:	beq	1d314 <__assert_fail@plt+0xbe60>
   1d388:	cmp	r0, #0
   1d38c:	mov	r5, r1
   1d390:	beq	1d314 <__assert_fail@plt+0xbe60>
   1d394:	b	1d2f8 <__assert_fail@plt+0xbe44>
   1d398:	mov	r5, sl
   1d39c:	str	r9, [sp, #8]
   1d3a0:	beq	1d6b0 <__assert_fail@plt+0xc1fc>
   1d3a4:	ldr	r9, [sp, #36]	; 0x24
   1d3a8:	mov	r0, #2
   1d3ac:	ldr	r5, [r9]
   1d3b0:	mov	sl, r9
   1d3b4:	b	1d4f0 <__assert_fail@plt+0xc03c>
   1d3b8:	mov	r0, #996	; 0x3e4
   1d3bc:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1d3c0:	ldr	lr, [sp, #20]
   1d3c4:	ldr	ip, [sp, #44]	; 0x2c
   1d3c8:	cmp	r0, #0
   1d3cc:	beq	1d878 <__assert_fail@plt+0xc3c4>
   1d3d0:	ldr	r1, [lr]
   1d3d4:	ldr	r5, [sp, #48]	; 0x30
   1d3d8:	str	r1, [r0]
   1d3dc:	mov	r1, #0
   1d3e0:	str	r0, [lr]
   1d3e4:	str	r1, [r8]
   1d3e8:	b	1cf2c <__assert_fail@plt+0xba78>
   1d3ec:	ldr	sl, [sp, #52]	; 0x34
   1d3f0:	ldr	r1, [sp, #12]
   1d3f4:	cmp	r1, #0
   1d3f8:	bne	1cd28 <__assert_fail@plt+0xb874>
   1d3fc:	ldr	r1, [sp, #16]
   1d400:	cmp	r0, #2
   1d404:	mov	r0, #10
   1d408:	movweq	r0, #9
   1d40c:	str	r0, [r1]
   1d410:	b	1ccd0 <__assert_fail@plt+0xb81c>
   1d414:	mov	r0, #996	; 0x3e4
   1d418:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1d41c:	cmp	r0, #0
   1d420:	beq	1d460 <__assert_fail@plt+0xbfac>
   1d424:	ldr	r2, [sp, #20]
   1d428:	ldr	ip, [sp, #44]	; 0x2c
   1d42c:	ldr	r1, [r2]
   1d430:	str	r1, [r0]
   1d434:	mov	r1, #0
   1d438:	str	r0, [r2]
   1d43c:	str	r1, [r8]
   1d440:	b	1d264 <__assert_fail@plt+0xbdb0>
   1d444:	ldr	r0, [sp, #16]
   1d448:	mov	r1, #10
   1d44c:	b	1d458 <__assert_fail@plt+0xbfa4>
   1d450:	ldr	r0, [sp, #16]
   1d454:	mov	r1, #15
   1d458:	str	r1, [r0]
   1d45c:	b	1ccd4 <__assert_fail@plt+0xb820>
   1d460:	ldr	ip, [sp, #44]	; 0x2c
   1d464:	b	1ccd0 <__assert_fail@plt+0xb81c>
   1d468:	mov	r0, #996	; 0x3e4
   1d46c:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1d470:	cmp	r0, #0
   1d474:	beq	1d498 <__assert_fail@plt+0xbfe4>
   1d478:	ldr	lr, [sp, #20]
   1d47c:	ldr	ip, [sp, #44]	; 0x2c
   1d480:	ldr	r1, [lr]
   1d484:	str	r1, [r0]
   1d488:	mov	r1, #0
   1d48c:	str	r0, [lr]
   1d490:	str	r1, [r8]
   1d494:	b	1d504 <__assert_fail@plt+0xc050>
   1d498:	mov	sl, #0
   1d49c:	str	sl, [fp, #-80]	; 0xffffffb0
   1d4a0:	b	1d4ac <__assert_fail@plt+0xbff8>
   1d4a4:	mov	sl, #0
   1d4a8:	str	sl, [r6]
   1d4ac:	ldr	ip, [sp, #44]	; 0x2c
   1d4b0:	ldr	lr, [sp, #20]
   1d4b4:	ldr	r1, [r8]
   1d4b8:	cmp	r1, #31
   1d4bc:	bne	1d650 <__assert_fail@plt+0xc19c>
   1d4c0:	mov	r0, #996	; 0x3e4
   1d4c4:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1d4c8:	ldr	lr, [sp, #20]
   1d4cc:	ldr	ip, [sp, #44]	; 0x2c
   1d4d0:	cmp	r0, #0
   1d4d4:	beq	1d878 <__assert_fail@plt+0xc3c4>
   1d4d8:	ldr	r1, [lr]
   1d4dc:	str	r1, [r0]
   1d4e0:	mov	r1, #0
   1d4e4:	str	r0, [lr]
   1d4e8:	str	r1, [r8]
   1d4ec:	b	1d654 <__assert_fail@plt+0xc1a0>
   1d4f0:	ldr	r1, [r8]
   1d4f4:	str	r0, [sp, #52]	; 0x34
   1d4f8:	cmp	r1, #31
   1d4fc:	beq	1d468 <__assert_fail@plt+0xbfb4>
   1d500:	ldr	r0, [lr]
   1d504:	add	r3, r1, #1
   1d508:	add	r7, r0, r1, lsl #5
   1d50c:	add	r2, sl, #20
   1d510:	sub	r6, fp, #80	; 0x50
   1d514:	str	r3, [r8]
   1d518:	str	r4, [r7, #4]!
   1d51c:	str	r4, [r7, #4]
   1d520:	str	r4, [r7, #8]
   1d524:	ldm	r2, {r0, r1}
   1d528:	mvn	r2, #0
   1d52c:	str	r4, [r7, #12]
   1d530:	str	r4, [r7, #16]
   1d534:	str	r2, [r7, #28]
   1d538:	str	r0, [r7, #20]
   1d53c:	bic	r0, r1, #786432	; 0xc0000
   1d540:	str	r0, [r7, #24]
   1d544:	mov	r0, r7
   1d548:	str	r7, [fp, #-80]	; 0xffffffb0
   1d54c:	b	1d590 <__assert_fail@plt+0xc0dc>
   1d550:	add	r3, r1, #1
   1d554:	add	r0, r0, r1, lsl #5
   1d558:	add	r2, sl, #20
   1d55c:	str	r3, [r8]
   1d560:	str	r4, [r0, #4]!
   1d564:	mvn	r3, #0
   1d568:	str	r4, [r0, #4]
   1d56c:	str	r4, [r0, #8]
   1d570:	ldm	r2, {r1, r2}
   1d574:	str	r4, [r0, #12]
   1d578:	str	r4, [r0, #16]
   1d57c:	str	r3, [r0, #28]
   1d580:	str	r1, [r0, #20]
   1d584:	bic	r1, r2, #786432	; 0xc0000
   1d588:	str	r1, [r0, #24]
   1d58c:	str	r0, [r6]
   1d590:	str	r5, [r0]
   1d594:	ldr	r0, [r6]
   1d598:	ldr	r1, [r0, #24]
   1d59c:	orr	r1, r1, #262144	; 0x40000
   1d5a0:	str	r1, [r0, #24]
   1d5a4:	ldr	r0, [sl, #4]
   1d5a8:	ldr	r5, [r6]
   1d5ac:	cmp	r0, #0
   1d5b0:	beq	1d5d0 <__assert_fail@plt+0xc11c>
   1d5b4:	add	r6, r5, #4
   1d5b8:	mov	sl, r0
   1d5bc:	ldr	r1, [r8]
   1d5c0:	cmp	r1, #31
   1d5c4:	beq	1d610 <__assert_fail@plt+0xc15c>
   1d5c8:	ldr	r0, [lr]
   1d5cc:	b	1d550 <__assert_fail@plt+0xc09c>
   1d5d0:	mov	r1, #0
   1d5d4:	mov	r0, sl
   1d5d8:	ldr	sl, [sl, #8]
   1d5dc:	cmp	sl, r1
   1d5e0:	cmpne	sl, #0
   1d5e4:	bne	1d600 <__assert_fail@plt+0xc14c>
   1d5e8:	ldr	sl, [r0]
   1d5ec:	ldr	r5, [r5]
   1d5f0:	mov	r1, r0
   1d5f4:	cmp	sl, #0
   1d5f8:	bne	1d5d4 <__assert_fail@plt+0xc120>
   1d5fc:	b	1d640 <__assert_fail@plt+0xc18c>
   1d600:	add	r6, r5, #8
   1d604:	ldr	r1, [r8]
   1d608:	cmp	r1, #31
   1d60c:	bne	1d5c8 <__assert_fail@plt+0xc114>
   1d610:	mov	r0, #996	; 0x3e4
   1d614:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1d618:	cmp	r0, #0
   1d61c:	beq	1d4a4 <__assert_fail@plt+0xbff0>
   1d620:	ldr	lr, [sp, #20]
   1d624:	ldr	ip, [sp, #44]	; 0x2c
   1d628:	ldr	r1, [lr]
   1d62c:	str	r1, [r0]
   1d630:	mov	r1, #0
   1d634:	str	r0, [lr]
   1d638:	str	r1, [r8]
   1d63c:	b	1d550 <__assert_fail@plt+0xc09c>
   1d640:	mov	sl, r7
   1d644:	ldr	r1, [r8]
   1d648:	cmp	r1, #31
   1d64c:	beq	1d4c0 <__assert_fail@plt+0xc00c>
   1d650:	ldr	r0, [lr]
   1d654:	add	r2, r1, #1
   1d658:	add	r1, r0, r1, lsl #5
   1d65c:	mov	r0, #16
   1d660:	cmp	sl, #0
   1d664:	str	r2, [r8]
   1d668:	str	r4, [r1, #4]!
   1d66c:	stmib	r1, {r9, sl}
   1d670:	str	r4, [r1, #12]
   1d674:	str	r4, [r1, #16]
   1d678:	str	r4, [r1, #20]
   1d67c:	str	r0, [r1, #24]
   1d680:	mvn	r0, #0
   1d684:	str	r0, [r1, #28]
   1d688:	str	r1, [r9]
   1d68c:	beq	1d878 <__assert_fail@plt+0xc3c4>
   1d690:	mov	r5, r1
   1d694:	str	r1, [sl]
   1d698:	ldr	r2, [sp, #52]	; 0x34
   1d69c:	ldr	r1, [sp, #8]
   1d6a0:	mov	r9, r5
   1d6a4:	add	r0, r2, #1
   1d6a8:	cmp	r2, r1
   1d6ac:	blt	1d4f0 <__assert_fail@plt+0xc03c>
   1d6b0:	ldr	r1, [sp, #48]	; 0x30
   1d6b4:	ldr	r2, [sp, #8]
   1d6b8:	mov	r0, #0
   1d6bc:	cmp	r2, r1
   1d6c0:	bne	1d6dc <__assert_fail@plt+0xc228>
   1d6c4:	ldr	r6, [sp, #24]
   1d6c8:	mov	r7, r5
   1d6cc:	ldr	r1, [sp, #28]
   1d6d0:	cmp	r1, #0
   1d6d4:	beq	1d8ac <__assert_fail@plt+0xc3f8>
   1d6d8:	b	1d2ac <__assert_fail@plt+0xbdf8>
   1d6dc:	mov	r9, sl
   1d6e0:	ldr	r1, [r8]
   1d6e4:	str	r5, [sp, #32]
   1d6e8:	ldr	r6, [r9], #20
   1d6ec:	cmp	r1, #31
   1d6f0:	beq	1d838 <__assert_fail@plt+0xc384>
   1d6f4:	ldr	r0, [lr]
   1d6f8:	add	r2, r1, #1
   1d6fc:	add	r7, r0, r1, lsl #5
   1d700:	str	r2, [r8]
   1d704:	str	r4, [r7, #4]!
   1d708:	mvn	r2, #0
   1d70c:	str	r4, [r7, #4]
   1d710:	str	r4, [r7, #8]
   1d714:	ldm	r9, {r0, r1}
   1d718:	str	r4, [r7, #12]
   1d71c:	str	r4, [r7, #16]
   1d720:	str	r2, [r7, #28]
   1d724:	sub	r9, fp, #80	; 0x50
   1d728:	str	r0, [r7, #20]
   1d72c:	bic	r0, r1, #786432	; 0xc0000
   1d730:	str	r0, [r7, #24]
   1d734:	mov	r0, r7
   1d738:	str	r7, [fp, #-80]	; 0xffffffb0
   1d73c:	b	1d780 <__assert_fail@plt+0xc2cc>
   1d740:	add	r3, r1, #1
   1d744:	add	r0, r0, r1, lsl #5
   1d748:	add	r2, sl, #20
   1d74c:	str	r3, [r8]
   1d750:	str	r4, [r0, #4]!
   1d754:	mvn	r3, #0
   1d758:	str	r4, [r0, #4]
   1d75c:	str	r4, [r0, #8]
   1d760:	ldm	r2, {r1, r2}
   1d764:	str	r4, [r0, #12]
   1d768:	str	r4, [r0, #16]
   1d76c:	str	r3, [r0, #28]
   1d770:	str	r1, [r0, #20]
   1d774:	bic	r1, r2, #786432	; 0xc0000
   1d778:	str	r1, [r0, #24]
   1d77c:	str	r0, [r9]
   1d780:	str	r6, [r0]
   1d784:	ldr	r0, [r9]
   1d788:	ldr	r1, [r0, #24]
   1d78c:	orr	r1, r1, #262144	; 0x40000
   1d790:	str	r1, [r0, #24]
   1d794:	ldr	r0, [sl, #4]
   1d798:	ldr	r6, [r9]
   1d79c:	cmp	r0, #0
   1d7a0:	beq	1d7c0 <__assert_fail@plt+0xc30c>
   1d7a4:	add	r9, r6, #4
   1d7a8:	mov	sl, r0
   1d7ac:	ldr	r1, [r8]
   1d7b0:	cmp	r1, #31
   1d7b4:	beq	1d808 <__assert_fail@plt+0xc354>
   1d7b8:	ldr	r0, [lr]
   1d7bc:	b	1d740 <__assert_fail@plt+0xc28c>
   1d7c0:	ldr	r5, [sp, #48]	; 0x30
   1d7c4:	ldr	r9, [sp, #8]
   1d7c8:	mov	r1, #0
   1d7cc:	mov	r0, sl
   1d7d0:	ldr	sl, [sl, #8]
   1d7d4:	cmp	sl, r1
   1d7d8:	cmpne	sl, #0
   1d7dc:	bne	1d7f8 <__assert_fail@plt+0xc344>
   1d7e0:	ldr	sl, [r0]
   1d7e4:	ldr	r6, [r6]
   1d7e8:	mov	r1, r0
   1d7ec:	cmp	sl, #0
   1d7f0:	bne	1d7cc <__assert_fail@plt+0xc318>
   1d7f4:	b	1ce98 <__assert_fail@plt+0xb9e4>
   1d7f8:	add	r9, r6, #8
   1d7fc:	ldr	r1, [r8]
   1d800:	cmp	r1, #31
   1d804:	bne	1d7b8 <__assert_fail@plt+0xc304>
   1d808:	mov	r0, #996	; 0x3e4
   1d80c:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1d810:	cmp	r0, #0
   1d814:	beq	1d870 <__assert_fail@plt+0xc3bc>
   1d818:	ldr	lr, [sp, #20]
   1d81c:	ldr	ip, [sp, #44]	; 0x2c
   1d820:	ldr	r1, [lr]
   1d824:	str	r1, [r0]
   1d828:	mov	r1, #0
   1d82c:	str	r0, [lr]
   1d830:	str	r1, [r8]
   1d834:	b	1d740 <__assert_fail@plt+0xc28c>
   1d838:	mov	r0, #996	; 0x3e4
   1d83c:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1d840:	cmp	r0, #0
   1d844:	beq	1d868 <__assert_fail@plt+0xc3b4>
   1d848:	ldr	lr, [sp, #20]
   1d84c:	ldr	ip, [sp, #44]	; 0x2c
   1d850:	ldr	r1, [lr]
   1d854:	str	r1, [r0]
   1d858:	mov	r1, #0
   1d85c:	str	r0, [lr]
   1d860:	str	r1, [r8]
   1d864:	b	1d6f8 <__assert_fail@plt+0xc244>
   1d868:	str	r4, [fp, #-80]	; 0xffffffb0
   1d86c:	b	1d874 <__assert_fail@plt+0xc3c0>
   1d870:	str	r4, [r9]
   1d874:	ldr	ip, [sp, #44]	; 0x2c
   1d878:	ldr	r0, [sp, #16]
   1d87c:	ldr	r6, [sp, #24]
   1d880:	ldr	sl, [sp, #36]	; 0x24
   1d884:	mov	r1, #12
   1d888:	mov	r7, #0
   1d88c:	str	r1, [r0]
   1d890:	clz	r0, r7
   1d894:	cmp	r7, #0
   1d898:	lsr	r0, r0, #5
   1d89c:	beq	1cce8 <__assert_fail@plt+0xb834>
   1d8a0:	ldr	r1, [sp, #28]
   1d8a4:	cmp	r1, #0
   1d8a8:	bne	1d2ac <__assert_fail@plt+0xbdf8>
   1d8ac:	ldrb	r0, [ip, #4]
   1d8b0:	mov	sl, r7
   1d8b4:	cmp	r0, #23
   1d8b8:	bls	1cbd0 <__assert_fail@plt+0xb71c>
   1d8bc:	b	1d974 <__assert_fail@plt+0xc4c0>
   1d8c0:	ldr	r8, [sp, #16]
   1d8c4:	movw	r6, #255	; 0xff
   1d8c8:	cmp	r0, #0
   1d8cc:	movt	r6, #4
   1d8d0:	bne	1d968 <__assert_fail@plt+0xc4b4>
   1d8d4:	mov	r5, r7
   1d8d8:	ldr	r7, [r7, #4]
   1d8dc:	cmp	r7, #0
   1d8e0:	bne	1d8d4 <__assert_fail@plt+0xc420>
   1d8e4:	ldr	r7, [r5, #8]
   1d8e8:	cmp	r7, #0
   1d8ec:	bne	1d8d4 <__assert_fail@plt+0xc420>
   1d8f0:	ldr	r0, [r5, #24]
   1d8f4:	and	r0, r0, r6
   1d8f8:	cmp	r0, #3
   1d8fc:	beq	1d934 <__assert_fail@plt+0xc480>
   1d900:	cmp	r0, #6
   1d904:	bne	1d93c <__assert_fail@plt+0xc488>
   1d908:	ldr	r4, [r5, #20]
   1d90c:	ldr	r0, [r4]
   1d910:	bl	2ae28 <__assert_fail@plt+0x19974>
   1d914:	ldr	r0, [r4, #4]
   1d918:	bl	2ae28 <__assert_fail@plt+0x19974>
   1d91c:	ldr	r0, [r4, #8]
   1d920:	bl	2ae28 <__assert_fail@plt+0x19974>
   1d924:	ldr	r0, [r4, #12]
   1d928:	bl	2ae28 <__assert_fail@plt+0x19974>
   1d92c:	mov	r0, r4
   1d930:	b	1d938 <__assert_fail@plt+0xc484>
   1d934:	ldr	r0, [r5, #20]
   1d938:	bl	2ae28 <__assert_fail@plt+0x19974>
   1d93c:	ldr	r0, [r5]
   1d940:	cmp	r0, #0
   1d944:	beq	1d968 <__assert_fail@plt+0xc4b4>
   1d948:	ldr	r7, [r0, #8]
   1d94c:	cmp	r7, r5
   1d950:	mov	r5, r0
   1d954:	beq	1d8f0 <__assert_fail@plt+0xc43c>
   1d958:	cmp	r7, #0
   1d95c:	mov	r5, r0
   1d960:	beq	1d8f0 <__assert_fail@plt+0xc43c>
   1d964:	b	1d8d4 <__assert_fail@plt+0xc420>
   1d968:	mov	r0, #13
   1d96c:	mov	sl, #0
   1d970:	str	r0, [r8]
   1d974:	mov	r0, sl
   1d978:	sub	sp, fp, #28
   1d97c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d980:	mov	r7, r4
   1d984:	mov	r6, r9
   1d988:	b	1cb80 <__assert_fail@plt+0xb6cc>
   1d98c:	cmp	sl, #0
   1d990:	beq	1da40 <__assert_fail@plt+0xc58c>
   1d994:	movw	r6, #255	; 0xff
   1d998:	movt	r6, #4
   1d99c:	mov	r5, sl
   1d9a0:	ldr	sl, [sl, #4]
   1d9a4:	cmp	sl, #0
   1d9a8:	bne	1d99c <__assert_fail@plt+0xc4e8>
   1d9ac:	ldr	sl, [r5, #8]
   1d9b0:	cmp	sl, #0
   1d9b4:	bne	1d99c <__assert_fail@plt+0xc4e8>
   1d9b8:	ldr	r0, [r5, #24]
   1d9bc:	and	r0, r0, r6
   1d9c0:	cmp	r0, #3
   1d9c4:	beq	1d9fc <__assert_fail@plt+0xc548>
   1d9c8:	cmp	r0, #6
   1d9cc:	bne	1da04 <__assert_fail@plt+0xc550>
   1d9d0:	ldr	r4, [r5, #20]
   1d9d4:	ldr	r0, [r4]
   1d9d8:	bl	2ae28 <__assert_fail@plt+0x19974>
   1d9dc:	ldr	r0, [r4, #4]
   1d9e0:	bl	2ae28 <__assert_fail@plt+0x19974>
   1d9e4:	ldr	r0, [r4, #8]
   1d9e8:	bl	2ae28 <__assert_fail@plt+0x19974>
   1d9ec:	ldr	r0, [r4, #12]
   1d9f0:	bl	2ae28 <__assert_fail@plt+0x19974>
   1d9f4:	mov	r0, r4
   1d9f8:	b	1da00 <__assert_fail@plt+0xc54c>
   1d9fc:	ldr	r0, [r5, #20]
   1da00:	bl	2ae28 <__assert_fail@plt+0x19974>
   1da04:	ldr	r0, [r5]
   1da08:	cmp	r0, #0
   1da0c:	beq	1da30 <__assert_fail@plt+0xc57c>
   1da10:	ldr	sl, [r0, #8]
   1da14:	cmp	sl, r5
   1da18:	mov	r5, r0
   1da1c:	beq	1d9b8 <__assert_fail@plt+0xc504>
   1da20:	cmp	sl, #0
   1da24:	mov	r5, r0
   1da28:	beq	1d9b8 <__assert_fail@plt+0xc504>
   1da2c:	b	1d99c <__assert_fail@plt+0xc4e8>
   1da30:	mov	sl, #0
   1da34:	mov	r0, sl
   1da38:	sub	sp, fp, #28
   1da3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da40:	mov	sl, #0
   1da44:	mov	r0, sl
   1da48:	sub	sp, fp, #28
   1da4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da50:	cmp	r0, #2
   1da54:	blt	1da70 <__assert_fail@plt+0xc5bc>
   1da58:	ldr	r0, [sl, #36]	; 0x24
   1da5c:	cmp	r0, #0
   1da60:	bne	1c818 <__assert_fail@plt+0xb364>
   1da64:	ldrb	r0, [sl, #16]
   1da68:	tst	r0, #1
   1da6c:	bne	1c818 <__assert_fail@plt+0xb364>
   1da70:	ldr	r0, [sl]
   1da74:	bl	2ae28 <__assert_fail@plt+0x19974>
   1da78:	ldr	r0, [sl, #4]
   1da7c:	bl	2ae28 <__assert_fail@plt+0x19974>
   1da80:	ldr	r0, [sl, #8]
   1da84:	bl	2ae28 <__assert_fail@plt+0x19974>
   1da88:	ldr	r0, [sl, #12]
   1da8c:	bl	2ae28 <__assert_fail@plt+0x19974>
   1da90:	mov	r0, sl
   1da94:	bl	2ae28 <__assert_fail@plt+0x19974>
   1da98:	ldr	r1, [r8, #64]	; 0x40
   1da9c:	cmp	r1, #31
   1daa0:	beq	1df98 <__assert_fail@plt+0xcae4>
   1daa4:	ldr	r0, [r8, #56]	; 0x38
   1daa8:	add	r2, r1, #1
   1daac:	add	r0, r0, r1, lsl #5
   1dab0:	ldr	lr, [sp, #44]	; 0x2c
   1dab4:	mov	r1, #3
   1dab8:	vmov.i32	q8, #0	; 0x00000000
   1dabc:	str	r2, [r8, #64]	; 0x40
   1dac0:	mov	r2, #0
   1dac4:	add	r7, r0, #4
   1dac8:	str	r2, [r0, #20]
   1dacc:	str	r4, [r0, #24]
   1dad0:	str	r1, [r0, #28]
   1dad4:	mov	r0, #28
   1dad8:	mov	r1, r7
   1dadc:	vst1.32	{d16-d17}, [r1], r0
   1dae0:	mvn	r0, #0
   1dae4:	str	r0, [r1]
   1dae8:	b	1cb80 <__assert_fail@plt+0xb6cc>
   1daec:	mov	r0, #996	; 0x3e4
   1daf0:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1daf4:	cmp	r0, #0
   1daf8:	beq	1ddd0 <__assert_fail@plt+0xc91c>
   1dafc:	ldr	r1, [r8, #56]	; 0x38
   1db00:	ldr	lr, [sp, #44]	; 0x2c
   1db04:	str	r1, [r0]
   1db08:	mov	r1, #0
   1db0c:	str	r1, [r8, #64]	; 0x40
   1db10:	str	r0, [r8, #56]	; 0x38
   1db14:	b	1bc08 <__assert_fail@plt+0xa754>
   1db18:	mov	r9, r0
   1db1c:	b	1dbd8 <__assert_fail@plt+0xc724>
   1db20:	mov	r9, #7
   1db24:	b	1dbd8 <__assert_fail@plt+0xc724>
   1db28:	mov	r0, #2
   1db2c:	b	1dfd0 <__assert_fail@plt+0xcb1c>
   1db30:	mov	r0, #6
   1db34:	b	1ca74 <__assert_fail@plt+0xb5c0>
   1db38:	mov	r0, #996	; 0x3e4
   1db3c:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1db40:	cmp	r0, #0
   1db44:	beq	1ddd0 <__assert_fail@plt+0xc91c>
   1db48:	ldr	r1, [r8, #56]	; 0x38
   1db4c:	ldr	lr, [sp, #44]	; 0x2c
   1db50:	str	r1, [r0]
   1db54:	mov	r1, #0
   1db58:	str	r1, [r8, #64]	; 0x40
   1db5c:	str	r0, [r8, #56]	; 0x38
   1db60:	b	1bce0 <__assert_fail@plt+0xa82c>
   1db64:	mov	r0, #996	; 0x3e4
   1db68:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1db6c:	cmp	r0, #0
   1db70:	beq	1ddd0 <__assert_fail@plt+0xc91c>
   1db74:	ldr	r1, [r8, #56]	; 0x38
   1db78:	ldr	r3, [sp, #24]
   1db7c:	ldr	lr, [sp, #44]	; 0x2c
   1db80:	str	r1, [r0]
   1db84:	mov	r1, #0
   1db88:	str	r1, [r8, #64]	; 0x40
   1db8c:	str	r0, [r8, #56]	; 0x38
   1db90:	b	1bea4 <__assert_fail@plt+0xa9f0>
   1db94:	mov	r0, r4
   1db98:	bl	2ae28 <__assert_fail@plt+0x19974>
   1db9c:	mov	r0, r5
   1dba0:	bl	2ae28 <__assert_fail@plt+0x19974>
   1dba4:	b	1ca70 <__assert_fail@plt+0xb5bc>
   1dba8:	mov	r0, #996	; 0x3e4
   1dbac:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1dbb0:	cmp	r0, #0
   1dbb4:	beq	1ddd0 <__assert_fail@plt+0xc91c>
   1dbb8:	ldr	r1, [r8, #56]	; 0x38
   1dbbc:	ldr	lr, [sp, #44]	; 0x2c
   1dbc0:	str	r1, [r0]
   1dbc4:	mov	r1, #0
   1dbc8:	str	r1, [r8, #64]	; 0x40
   1dbcc:	str	r0, [r8, #56]	; 0x38
   1dbd0:	b	1bc84 <__assert_fail@plt+0xa7d0>
   1dbd4:	mov	r9, #3
   1dbd8:	ldr	r0, [sp, #16]
   1dbdc:	ldr	r4, [sp, #52]	; 0x34
   1dbe0:	ldr	sl, [sp, #48]	; 0x30
   1dbe4:	str	r9, [r0]
   1dbe8:	ldr	r6, [sp, #40]	; 0x28
   1dbec:	mov	r0, r4
   1dbf0:	bl	2ae28 <__assert_fail@plt+0x19974>
   1dbf4:	ldr	r0, [sl]
   1dbf8:	bl	2ae28 <__assert_fail@plt+0x19974>
   1dbfc:	ldr	r0, [sl, #4]
   1dc00:	bl	2ae28 <__assert_fail@plt+0x19974>
   1dc04:	ldr	r0, [sl, #8]
   1dc08:	bl	2ae28 <__assert_fail@plt+0x19974>
   1dc0c:	ldr	r0, [sl, #12]
   1dc10:	bl	2ae28 <__assert_fail@plt+0x19974>
   1dc14:	mov	r0, sl
   1dc18:	bl	2ae28 <__assert_fail@plt+0x19974>
   1dc1c:	ldr	r0, [sp, #16]
   1dc20:	mov	r7, #0
   1dc24:	mov	sl, #0
   1dc28:	ldr	r0, [r0]
   1dc2c:	cmp	r0, #0
   1dc30:	ldr	lr, [sp, #44]	; 0x2c
   1dc34:	beq	1cb80 <__assert_fail@plt+0xb6cc>
   1dc38:	b	1d974 <__assert_fail@plt+0xc4c0>
   1dc3c:	mov	r0, #996	; 0x3e4
   1dc40:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1dc44:	cmp	r0, #0
   1dc48:	beq	1dfcc <__assert_fail@plt+0xcb18>
   1dc4c:	ldr	r1, [r8, #56]	; 0x38
   1dc50:	ldr	lr, [sp, #44]	; 0x2c
   1dc54:	str	r1, [r0]
   1dc58:	mov	r1, #0
   1dc5c:	str	r1, [r8, #64]	; 0x40
   1dc60:	str	r0, [r8, #56]	; 0x38
   1dc64:	b	1c834 <__assert_fail@plt+0xb380>
   1dc68:	mov	r0, #996	; 0x3e4
   1dc6c:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1dc70:	cmp	r0, #0
   1dc74:	beq	1dfcc <__assert_fail@plt+0xcb18>
   1dc78:	ldr	r1, [r8, #56]	; 0x38
   1dc7c:	ldr	lr, [sp, #44]	; 0x2c
   1dc80:	str	r1, [r0]
   1dc84:	mov	r1, #0
   1dc88:	str	r1, [r8, #64]	; 0x40
   1dc8c:	str	r0, [r8, #56]	; 0x38
   1dc90:	b	1c8e0 <__assert_fail@plt+0xb42c>
   1dc94:	mov	r0, #996	; 0x3e4
   1dc98:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1dc9c:	cmp	r0, #0
   1dca0:	beq	1dfcc <__assert_fail@plt+0xcb18>
   1dca4:	ldr	r1, [r8, #56]	; 0x38
   1dca8:	ldr	lr, [sp, #44]	; 0x2c
   1dcac:	str	r1, [r0]
   1dcb0:	mov	r1, #0
   1dcb4:	str	r1, [r8, #64]	; 0x40
   1dcb8:	str	r0, [r8, #56]	; 0x38
   1dcbc:	b	1c92c <__assert_fail@plt+0xb478>
   1dcc0:	mov	r0, #996	; 0x3e4
   1dcc4:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1dcc8:	cmp	r0, #0
   1dccc:	beq	1ddd0 <__assert_fail@plt+0xc91c>
   1dcd0:	ldr	r1, [r8, #56]	; 0x38
   1dcd4:	ldr	lr, [sp, #44]	; 0x2c
   1dcd8:	mov	r6, sl
   1dcdc:	str	r1, [r0]
   1dce0:	mov	r1, #0
   1dce4:	str	r1, [r8, #64]	; 0x40
   1dce8:	str	r0, [r8, #56]	; 0x38
   1dcec:	b	1cb3c <__assert_fail@plt+0xb688>
   1dcf0:	mov	r0, r4
   1dcf4:	bl	2ae28 <__assert_fail@plt+0x19974>
   1dcf8:	ldr	lr, [sp, #44]	; 0x2c
   1dcfc:	mov	r7, r9
   1dd00:	b	1cb80 <__assert_fail@plt+0xb6cc>
   1dd04:	mov	r0, #996	; 0x3e4
   1dd08:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1dd0c:	cmp	r0, #0
   1dd10:	beq	1de80 <__assert_fail@plt+0xc9cc>
   1dd14:	ldr	r1, [r8, #56]	; 0x38
   1dd18:	ldr	r7, [sp, #24]
   1dd1c:	ldr	lr, [sp, #44]	; 0x2c
   1dd20:	mov	sl, #0
   1dd24:	str	r1, [r0]
   1dd28:	mov	r1, #0
   1dd2c:	str	r1, [r8, #64]	; 0x40
   1dd30:	str	r0, [r8, #56]	; 0x38
   1dd34:	b	1c9dc <__assert_fail@plt+0xb528>
   1dd38:	mov	r0, #996	; 0x3e4
   1dd3c:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1dd40:	cmp	r0, #0
   1dd44:	beq	1df74 <__assert_fail@plt+0xcac0>
   1dd48:	ldr	r1, [r8, #56]	; 0x38
   1dd4c:	ldr	r7, [sp, #24]
   1dd50:	ldr	lr, [sp, #44]	; 0x2c
   1dd54:	mov	sl, #0
   1dd58:	str	r1, [r0]
   1dd5c:	mov	r1, #0
   1dd60:	str	r1, [r8, #64]	; 0x40
   1dd64:	str	r0, [r8, #56]	; 0x38
   1dd68:	b	1be4c <__assert_fail@plt+0xa998>
   1dd6c:	mov	r0, #996	; 0x3e4
   1dd70:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1dd74:	cmp	r0, #0
   1dd78:	beq	1df80 <__assert_fail@plt+0xcacc>
   1dd7c:	ldr	r1, [r8, #56]	; 0x38
   1dd80:	ldr	r7, [sp, #24]
   1dd84:	ldr	lr, [sp, #44]	; 0x2c
   1dd88:	mov	sl, #0
   1dd8c:	str	r1, [r0]
   1dd90:	mov	r1, #0
   1dd94:	str	r1, [r8, #64]	; 0x40
   1dd98:	str	r0, [r8, #56]	; 0x38
   1dd9c:	b	1c984 <__assert_fail@plt+0xb4d0>
   1dda0:	mov	r0, #996	; 0x3e4
   1dda4:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1dda8:	cmp	r0, #0
   1ddac:	beq	1ddd0 <__assert_fail@plt+0xc91c>
   1ddb0:	ldr	r1, [r8, #56]	; 0x38
   1ddb4:	ldr	r7, [sp, #24]
   1ddb8:	ldr	lr, [sp, #44]	; 0x2c
   1ddbc:	str	r1, [r0]
   1ddc0:	mov	r1, #0
   1ddc4:	str	r1, [r8, #64]	; 0x40
   1ddc8:	str	r0, [r8, #56]	; 0x38
   1ddcc:	b	1ca9c <__assert_fail@plt+0xb5e8>
   1ddd0:	mov	r0, #12
   1ddd4:	ldr	r1, [sp, #16]
   1ddd8:	mov	sl, #0
   1dddc:	str	r0, [r1]
   1dde0:	mov	r0, sl
   1dde4:	sub	sp, fp, #28
   1dde8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ddec:	mov	r4, #0
   1ddf0:	mov	r9, #0
   1ddf4:	b	1de00 <__assert_fail@plt+0xc94c>
   1ddf8:	mov	r9, #4
   1ddfc:	mov	r4, #128	; 0x80
   1de00:	bl	1137c <__ctype_b_loc@plt>
   1de04:	ldr	r0, [r0]
   1de08:	ldr	r7, [sp, #24]
   1de0c:	ldr	lr, [sp, #44]	; 0x2c
   1de10:	mov	r1, #1
   1de14:	mov	sl, #0
   1de18:	add	r5, r0, r4, lsl #1
   1de1c:	add	r0, r8, r9, lsl #2
   1de20:	mov	ip, r6
   1de24:	mov	r3, #0
   1de28:	add	r2, r0, #96	; 0x60
   1de2c:	mov	r0, r5
   1de30:	add	r6, r4, r3
   1de34:	cmp	r6, #95	; 0x5f
   1de38:	beq	1de48 <__assert_fail@plt+0xc994>
   1de3c:	ldrh	r6, [r0]
   1de40:	ands	r6, r6, #8
   1de44:	beq	1de54 <__assert_fail@plt+0xc9a0>
   1de48:	ldr	r6, [r2]
   1de4c:	orr	r6, r6, r1, lsl r3
   1de50:	str	r6, [r2]
   1de54:	add	r3, r3, #1
   1de58:	add	r0, r0, #2
   1de5c:	cmp	r3, #32
   1de60:	bne	1de30 <__assert_fail@plt+0xc97c>
   1de64:	add	r9, r9, #1
   1de68:	add	r5, r5, #64	; 0x40
   1de6c:	add	r4, r4, #32
   1de70:	mov	r6, ip
   1de74:	cmp	r9, #8
   1de78:	bne	1de1c <__assert_fail@plt+0xc968>
   1de7c:	b	1be1c <__assert_fail@plt+0xa968>
   1de80:	ldr	r7, [sp, #24]
   1de84:	ldr	lr, [sp, #44]	; 0x2c
   1de88:	mov	r6, #0
   1de8c:	mov	sl, #0
   1de90:	ldr	r1, [r4]
   1de94:	cmp	r1, #31
   1de98:	bne	1ca24 <__assert_fail@plt+0xb570>
   1de9c:	mov	r0, #996	; 0x3e4
   1dea0:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1dea4:	ldr	lr, [sp, #44]	; 0x2c
   1dea8:	cmp	r0, #0
   1deac:	beq	1ca70 <__assert_fail@plt+0xb5bc>
   1deb0:	ldr	r1, [r8, #56]	; 0x38
   1deb4:	str	r1, [r0]
   1deb8:	mov	r1, #0
   1debc:	str	r1, [r8, #64]	; 0x40
   1dec0:	str	r0, [r8, #56]	; 0x38
   1dec4:	b	1ca28 <__assert_fail@plt+0xb574>
   1dec8:	cmp	r9, #0
   1decc:	beq	1df6c <__assert_fail@plt+0xcab8>
   1ded0:	movw	r5, #255	; 0xff
   1ded4:	movt	r5, #4
   1ded8:	mov	r6, r9
   1dedc:	ldr	r9, [r9, #4]
   1dee0:	cmp	r9, #0
   1dee4:	bne	1ded8 <__assert_fail@plt+0xca24>
   1dee8:	ldr	r9, [r6, #8]
   1deec:	cmp	r9, #0
   1def0:	bne	1ded8 <__assert_fail@plt+0xca24>
   1def4:	ldr	r0, [r6, #24]
   1def8:	and	r0, r0, r5
   1defc:	cmp	r0, #3
   1df00:	beq	1df38 <__assert_fail@plt+0xca84>
   1df04:	cmp	r0, #6
   1df08:	bne	1df40 <__assert_fail@plt+0xca8c>
   1df0c:	ldr	r4, [r6, #20]
   1df10:	ldr	r0, [r4]
   1df14:	bl	2ae28 <__assert_fail@plt+0x19974>
   1df18:	ldr	r0, [r4, #4]
   1df1c:	bl	2ae28 <__assert_fail@plt+0x19974>
   1df20:	ldr	r0, [r4, #8]
   1df24:	bl	2ae28 <__assert_fail@plt+0x19974>
   1df28:	ldr	r0, [r4, #12]
   1df2c:	bl	2ae28 <__assert_fail@plt+0x19974>
   1df30:	mov	r0, r4
   1df34:	b	1df3c <__assert_fail@plt+0xca88>
   1df38:	ldr	r0, [r6, #20]
   1df3c:	bl	2ae28 <__assert_fail@plt+0x19974>
   1df40:	ldr	r0, [r6]
   1df44:	cmp	r0, #0
   1df48:	beq	1df6c <__assert_fail@plt+0xcab8>
   1df4c:	ldr	r9, [r0, #8]
   1df50:	cmp	r9, r6
   1df54:	mov	r6, r0
   1df58:	beq	1def4 <__assert_fail@plt+0xca40>
   1df5c:	cmp	r9, #0
   1df60:	mov	r6, r0
   1df64:	beq	1def4 <__assert_fail@plt+0xca40>
   1df68:	b	1ded8 <__assert_fail@plt+0xca24>
   1df6c:	mov	r0, #8
   1df70:	b	1ddd4 <__assert_fail@plt+0xc920>
   1df74:	mov	r5, #0
   1df78:	mov	r0, #9
   1df7c:	b	1df88 <__assert_fail@plt+0xcad4>
   1df80:	mov	r5, #0
   1df84:	mov	r0, #10
   1df88:	ldr	r7, [sp, #24]
   1df8c:	ldr	lr, [sp, #44]	; 0x2c
   1df90:	mov	sl, #0
   1df94:	b	1c9c4 <__assert_fail@plt+0xb510>
   1df98:	mov	r0, #996	; 0x3e4
   1df9c:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1dfa0:	cmp	r0, #0
   1dfa4:	beq	1dfcc <__assert_fail@plt+0xcb18>
   1dfa8:	ldr	r1, [r8, #56]	; 0x38
   1dfac:	str	r1, [r0]
   1dfb0:	mov	r1, #0
   1dfb4:	str	r1, [r8, #64]	; 0x40
   1dfb8:	str	r0, [r8, #56]	; 0x38
   1dfbc:	b	1daa8 <__assert_fail@plt+0xc5f4>
   1dfc0:	ldr	r6, [sp, #40]	; 0x28
   1dfc4:	ldr	r4, [sp, #52]	; 0x34
   1dfc8:	ldr	sl, [sp, #48]	; 0x30
   1dfcc:	mov	r0, #12
   1dfd0:	ldr	r1, [sp, #16]
   1dfd4:	str	r0, [r1]
   1dfd8:	b	1dbec <__assert_fail@plt+0xc738>
   1dfdc:	mov	r0, r6
   1dfe0:	bl	2ae28 <__assert_fail@plt+0x19974>
   1dfe4:	mov	r0, r9
   1dfe8:	bl	2ae28 <__assert_fail@plt+0x19974>
   1dfec:	mov	r9, #12
   1dff0:	b	1dbd8 <__assert_fail@plt+0xc724>
   1dff4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dff8:	add	fp, sp, #28
   1dffc:	sub	sp, sp, #12
   1e000:	mov	r9, r1
   1e004:	mov	r6, r0
   1e008:	mov	r4, #0
   1e00c:	mov	r0, #32
   1e010:	mov	r1, #1
   1e014:	mov	sl, r3
   1e018:	mov	r5, r2
   1e01c:	str	r4, [sp, #8]
   1e020:	bl	2ac0c <__assert_fail@plt+0x19758>
   1e024:	ldr	r1, [fp, #12]
   1e028:	cmp	r0, #0
   1e02c:	beq	1e2e4 <__assert_fail@plt+0xce30>
   1e030:	mov	r7, r0
   1e034:	mov	r0, #40	; 0x28
   1e038:	mov	r1, #1
   1e03c:	bl	2ac0c <__assert_fail@plt+0x19758>
   1e040:	cmp	r0, #0
   1e044:	beq	1e2f8 <__assert_fail@plt+0xce44>
   1e048:	mov	r8, r0
   1e04c:	ldrb	r0, [r0, #16]
   1e050:	ldr	r1, [fp, #8]
   1e054:	mov	r4, #0
   1e058:	add	r3, sp, #8
   1e05c:	str	r5, [sp]
   1e060:	mov	r2, r8
   1e064:	str	r4, [sp, #4]
   1e068:	and	r0, r0, #254	; 0xfe
   1e06c:	orr	r0, r0, r1
   1e070:	mov	r1, r7
   1e074:	strb	r0, [r8, #16]
   1e078:	mov	r0, r9
   1e07c:	bl	1e8a8 <__assert_fail@plt+0xd3f4>
   1e080:	cmp	r0, #0
   1e084:	bne	1e31c <__assert_fail@plt+0xce68>
   1e088:	ldrb	r0, [sl]
   1e08c:	cmp	r0, #0
   1e090:	beq	1e0bc <__assert_fail@plt+0xcc08>
   1e094:	add	r1, sl, #1
   1e098:	mov	r2, #1
   1e09c:	ubfx	r3, r0, #5, #3
   1e0a0:	and	r0, r0, #31
   1e0a4:	ldr	r5, [r7, r3, lsl #2]
   1e0a8:	orr	r0, r5, r2, lsl r0
   1e0ac:	str	r0, [r7, r3, lsl #2]
   1e0b0:	ldrb	r0, [r1], #1
   1e0b4:	cmp	r0, #0
   1e0b8:	bne	1e09c <__assert_fail@plt+0xcbe8>
   1e0bc:	ldr	r0, [fp, #8]
   1e0c0:	cmp	r0, #0
   1e0c4:	bne	1e1d8 <__assert_fail@plt+0xcd24>
   1e0c8:	ldr	r0, [r6, #92]	; 0x5c
   1e0cc:	cmp	r0, #2
   1e0d0:	bge	1e200 <__assert_fail@plt+0xcd4c>
   1e0d4:	ldr	r1, [r6, #64]	; 0x40
   1e0d8:	cmp	r1, #31
   1e0dc:	beq	1e284 <__assert_fail@plt+0xcdd0>
   1e0e0:	ldr	r0, [r6, #56]	; 0x38
   1e0e4:	add	r2, r1, #1
   1e0e8:	add	r0, r0, r1, lsl #5
   1e0ec:	mov	r1, #3
   1e0f0:	vmov.i32	q8, #0	; 0x00000000
   1e0f4:	str	r2, [r6, #64]	; 0x40
   1e0f8:	mov	r2, #0
   1e0fc:	add	r5, r0, #4
   1e100:	str	r2, [r0, #20]
   1e104:	str	r7, [r0, #24]
   1e108:	str	r1, [r0, #28]
   1e10c:	mov	r0, #28
   1e110:	mov	r1, r5
   1e114:	vst1.32	{d16-d17}, [r1], r0
   1e118:	mvn	r0, #0
   1e11c:	str	r0, [r1]
   1e120:	ldr	r0, [r6, #92]	; 0x5c
   1e124:	cmp	r0, #2
   1e128:	blt	1e2ac <__assert_fail@plt+0xcdf8>
   1e12c:	ldrb	r0, [r6, #88]	; 0x58
   1e130:	orr	r0, r0, #2
   1e134:	strb	r0, [r6, #88]	; 0x58
   1e138:	ldr	r1, [r6, #64]	; 0x40
   1e13c:	cmp	r1, #31
   1e140:	beq	1e364 <__assert_fail@plt+0xceb0>
   1e144:	ldr	r0, [r6, #56]	; 0x38
   1e148:	add	r0, r0, r1, lsl #5
   1e14c:	add	r2, r1, #1
   1e150:	mov	r1, #6
   1e154:	mov	r4, #0
   1e158:	vmov.i32	q8, #0	; 0x00000000
   1e15c:	add	r7, r0, #4
   1e160:	str	r2, [r6, #64]	; 0x40
   1e164:	str	r4, [r0, #20]
   1e168:	str	r8, [r0, #24]
   1e16c:	str	r1, [r0, #28]
   1e170:	mov	r0, #28
   1e174:	mov	r1, r7
   1e178:	vst1.32	{d16-d17}, [r1], r0
   1e17c:	mvn	r0, #0
   1e180:	str	r0, [r1]
   1e184:	ldr	r1, [r6, #64]	; 0x40
   1e188:	cmp	r1, #31
   1e18c:	beq	1e3d4 <__assert_fail@plt+0xcf20>
   1e190:	ldr	r0, [r6, #56]	; 0x38
   1e194:	add	r2, r1, #1
   1e198:	add	r4, r0, r1, lsl #5
   1e19c:	mov	r0, #0
   1e1a0:	mov	r1, #10
   1e1a4:	str	r2, [r6, #64]	; 0x40
   1e1a8:	str	r0, [r4, #4]!
   1e1ac:	mvn	r2, #0
   1e1b0:	add	r3, r4, #20
   1e1b4:	stmib	r4, {r5, r7}
   1e1b8:	str	r0, [r4, #12]
   1e1bc:	str	r0, [r4, #16]
   1e1c0:	stm	r3, {r0, r1, r2}
   1e1c4:	str	r4, [r5]
   1e1c8:	str	r4, [r7]
   1e1cc:	mov	r0, r4
   1e1d0:	sub	sp, fp, #28
   1e1d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e1d8:	vld1.32	{d16-d17}, [r7]
   1e1dc:	mov	r0, r7
   1e1e0:	vmvn	q8, q8
   1e1e4:	vst1.32	{d16-d17}, [r0]!
   1e1e8:	vld1.32	{d16-d17}, [r0]
   1e1ec:	vmvn	q8, q8
   1e1f0:	vst1.32	{d16-d17}, [r0]
   1e1f4:	ldr	r0, [r6, #92]	; 0x5c
   1e1f8:	cmp	r0, #2
   1e1fc:	blt	1e0d4 <__assert_fail@plt+0xcc20>
   1e200:	ldm	r7, {r0, r1, r2, ip}
   1e204:	ldr	r5, [r6, #60]	; 0x3c
   1e208:	ldr	r3, [r5]
   1e20c:	and	r0, r0, r3
   1e210:	str	r0, [r7]
   1e214:	ldr	r0, [r5, #4]
   1e218:	and	r0, r1, r0
   1e21c:	str	r0, [r7, #4]
   1e220:	ldr	r0, [r5, #8]
   1e224:	and	r0, r2, r0
   1e228:	str	r0, [r7, #8]
   1e22c:	ldr	r0, [r5, #12]
   1e230:	and	r0, ip, r0
   1e234:	str	r0, [r7, #12]
   1e238:	ldr	r0, [r7, #16]
   1e23c:	ldr	r1, [r5, #16]
   1e240:	and	r0, r0, r1
   1e244:	str	r0, [r7, #16]
   1e248:	ldr	r0, [r5, #20]
   1e24c:	ldr	r1, [r7, #20]
   1e250:	and	r0, r1, r0
   1e254:	str	r0, [r7, #20]
   1e258:	ldr	r0, [r5, #24]
   1e25c:	ldr	r1, [r7, #24]
   1e260:	and	r0, r1, r0
   1e264:	str	r0, [r7, #24]
   1e268:	ldr	r0, [r5, #28]
   1e26c:	ldr	r1, [r7, #28]
   1e270:	and	r0, r1, r0
   1e274:	str	r0, [r7, #28]
   1e278:	ldr	r1, [r6, #64]	; 0x40
   1e27c:	cmp	r1, #31
   1e280:	bne	1e0e0 <__assert_fail@plt+0xcc2c>
   1e284:	mov	r0, #996	; 0x3e4
   1e288:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1e28c:	cmp	r0, #0
   1e290:	beq	1e38c <__assert_fail@plt+0xced8>
   1e294:	ldr	r1, [r6, #56]	; 0x38
   1e298:	str	r1, [r0]
   1e29c:	mov	r1, #0
   1e2a0:	str	r1, [r6, #64]	; 0x40
   1e2a4:	str	r0, [r6, #56]	; 0x38
   1e2a8:	b	1e0e4 <__assert_fail@plt+0xcc30>
   1e2ac:	ldr	r0, [r8]
   1e2b0:	bl	2ae28 <__assert_fail@plt+0x19974>
   1e2b4:	ldr	r0, [r8, #4]
   1e2b8:	bl	2ae28 <__assert_fail@plt+0x19974>
   1e2bc:	ldr	r0, [r8, #8]
   1e2c0:	bl	2ae28 <__assert_fail@plt+0x19974>
   1e2c4:	ldr	r0, [r8, #12]
   1e2c8:	bl	2ae28 <__assert_fail@plt+0x19974>
   1e2cc:	mov	r0, r8
   1e2d0:	bl	2ae28 <__assert_fail@plt+0x19974>
   1e2d4:	mov	r4, r5
   1e2d8:	mov	r0, r4
   1e2dc:	sub	sp, fp, #28
   1e2e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e2e4:	mov	r0, #12
   1e2e8:	str	r0, [r1]
   1e2ec:	mov	r0, r4
   1e2f0:	sub	sp, fp, #28
   1e2f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e2f8:	mov	r0, r7
   1e2fc:	bl	2ae28 <__assert_fail@plt+0x19974>
   1e300:	ldr	r1, [fp, #12]
   1e304:	mov	r0, #12
   1e308:	mov	r4, #0
   1e30c:	str	r0, [r1]
   1e310:	mov	r0, r4
   1e314:	sub	sp, fp, #28
   1e318:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e31c:	mov	r5, r0
   1e320:	mov	r0, r7
   1e324:	bl	2ae28 <__assert_fail@plt+0x19974>
   1e328:	ldr	r0, [r8]
   1e32c:	bl	2ae28 <__assert_fail@plt+0x19974>
   1e330:	ldr	r0, [r8, #4]
   1e334:	bl	2ae28 <__assert_fail@plt+0x19974>
   1e338:	ldr	r0, [r8, #8]
   1e33c:	bl	2ae28 <__assert_fail@plt+0x19974>
   1e340:	ldr	r0, [r8, #12]
   1e344:	bl	2ae28 <__assert_fail@plt+0x19974>
   1e348:	mov	r0, r8
   1e34c:	bl	2ae28 <__assert_fail@plt+0x19974>
   1e350:	ldr	r0, [fp, #12]
   1e354:	str	r5, [r0]
   1e358:	mov	r0, r4
   1e35c:	sub	sp, fp, #28
   1e360:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e364:	mov	r0, #996	; 0x3e4
   1e368:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1e36c:	cmp	r0, #0
   1e370:	beq	1e38c <__assert_fail@plt+0xced8>
   1e374:	ldr	r1, [r6, #56]	; 0x38
   1e378:	str	r1, [r0]
   1e37c:	mov	r1, #0
   1e380:	str	r1, [r6, #64]	; 0x40
   1e384:	str	r0, [r6, #56]	; 0x38
   1e388:	b	1e148 <__assert_fail@plt+0xcc94>
   1e38c:	mov	r0, r7
   1e390:	bl	2ae28 <__assert_fail@plt+0x19974>
   1e394:	ldr	r0, [r8]
   1e398:	bl	2ae28 <__assert_fail@plt+0x19974>
   1e39c:	ldr	r0, [r8, #4]
   1e3a0:	bl	2ae28 <__assert_fail@plt+0x19974>
   1e3a4:	ldr	r0, [r8, #8]
   1e3a8:	bl	2ae28 <__assert_fail@plt+0x19974>
   1e3ac:	ldr	r0, [r8, #12]
   1e3b0:	bl	2ae28 <__assert_fail@plt+0x19974>
   1e3b4:	mov	r0, r8
   1e3b8:	bl	2ae28 <__assert_fail@plt+0x19974>
   1e3bc:	ldr	r1, [fp, #12]
   1e3c0:	mov	r0, #12
   1e3c4:	str	r0, [r1]
   1e3c8:	mov	r0, r4
   1e3cc:	sub	sp, fp, #28
   1e3d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3d4:	mov	r0, #996	; 0x3e4
   1e3d8:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1e3dc:	cmp	r0, #0
   1e3e0:	beq	1e2d8 <__assert_fail@plt+0xce24>
   1e3e4:	ldr	r1, [r6, #56]	; 0x38
   1e3e8:	str	r1, [r0]
   1e3ec:	mov	r1, #0
   1e3f0:	str	r1, [r6, #64]	; 0x40
   1e3f4:	str	r0, [r6, #56]	; 0x38
   1e3f8:	b	1e194 <__assert_fail@plt+0xcce0>
   1e3fc:	push	{fp, lr}
   1e400:	mov	fp, sp
   1e404:	ldr	ip, [r1, #40]	; 0x28
   1e408:	ldr	r3, [r1, #56]	; 0x38
   1e40c:	cmp	r3, ip
   1e410:	ble	1e490 <__assert_fail@plt+0xcfdc>
   1e414:	ldr	r3, [r1, #4]
   1e418:	ldrb	lr, [r3, ip]
   1e41c:	strb	lr, [r0]
   1e420:	ldr	r3, [r1, #80]	; 0x50
   1e424:	cmp	r3, #2
   1e428:	blt	1e44c <__assert_fail@plt+0xcf98>
   1e42c:	ldr	r3, [r1, #28]
   1e430:	ldr	ip, [r1, #40]	; 0x28
   1e434:	cmp	ip, r3
   1e438:	beq	1e44c <__assert_fail@plt+0xcf98>
   1e43c:	ldr	r3, [r1, #8]
   1e440:	ldr	r3, [r3, ip, lsl #2]
   1e444:	cmn	r3, #1
   1e448:	beq	1e564 <__assert_fail@plt+0xd0b0>
   1e44c:	tst	r2, #1
   1e450:	beq	1e4a4 <__assert_fail@plt+0xcff0>
   1e454:	cmp	lr, #92	; 0x5c
   1e458:	bne	1e4a4 <__assert_fail@plt+0xcff0>
   1e45c:	ldr	r2, [r1, #40]	; 0x28
   1e460:	ldr	r3, [r1, #48]	; 0x30
   1e464:	add	r2, r2, #1
   1e468:	cmp	r2, r3
   1e46c:	bge	1e564 <__assert_fail@plt+0xd0b0>
   1e470:	str	r2, [r1, #40]	; 0x28
   1e474:	ldr	r1, [r1, #4]
   1e478:	ldrb	r2, [r1, r2]
   1e47c:	mov	r1, #1
   1e480:	strb	r1, [r0, #4]
   1e484:	strb	r2, [r0]
   1e488:	mov	r0, r1
   1e48c:	pop	{fp, pc}
   1e490:	mov	r1, #2
   1e494:	strb	r1, [r0, #4]
   1e498:	mov	r1, #0
   1e49c:	mov	r0, r1
   1e4a0:	pop	{fp, pc}
   1e4a4:	cmp	lr, #92	; 0x5c
   1e4a8:	bgt	1e508 <__assert_fail@plt+0xd054>
   1e4ac:	cmp	lr, #45	; 0x2d
   1e4b0:	beq	1e52c <__assert_fail@plt+0xd078>
   1e4b4:	cmp	lr, #91	; 0x5b
   1e4b8:	bne	1e564 <__assert_fail@plt+0xd0b0>
   1e4bc:	ldr	r3, [r1, #40]	; 0x28
   1e4c0:	ldr	ip, [r1, #48]	; 0x30
   1e4c4:	add	r3, r3, #1
   1e4c8:	cmp	r3, ip
   1e4cc:	bge	1e554 <__assert_fail@plt+0xd0a0>
   1e4d0:	ldr	r1, [r1, #4]
   1e4d4:	ldrb	r1, [r1, r3]
   1e4d8:	cmp	r1, #61	; 0x3d
   1e4dc:	strb	r1, [r0]
   1e4e0:	beq	1e574 <__assert_fail@plt+0xd0c0>
   1e4e4:	cmp	r1, #58	; 0x3a
   1e4e8:	beq	1e588 <__assert_fail@plt+0xd0d4>
   1e4ec:	cmp	r1, #46	; 0x2e
   1e4f0:	bne	1e55c <__assert_fail@plt+0xd0a8>
   1e4f4:	mov	r1, #26
   1e4f8:	strb	r1, [r0, #4]
   1e4fc:	mov	r1, #2
   1e500:	mov	r0, r1
   1e504:	pop	{fp, pc}
   1e508:	cmp	lr, #93	; 0x5d
   1e50c:	beq	1e540 <__assert_fail@plt+0xd08c>
   1e510:	cmp	lr, #94	; 0x5e
   1e514:	bne	1e564 <__assert_fail@plt+0xd0b0>
   1e518:	mov	r1, #25
   1e51c:	strb	r1, [r0, #4]
   1e520:	mov	r1, #1
   1e524:	mov	r0, r1
   1e528:	pop	{fp, pc}
   1e52c:	mov	r1, #22
   1e530:	strb	r1, [r0, #4]
   1e534:	mov	r1, #1
   1e538:	mov	r0, r1
   1e53c:	pop	{fp, pc}
   1e540:	mov	r1, #21
   1e544:	strb	r1, [r0, #4]
   1e548:	mov	r1, #1
   1e54c:	mov	r0, r1
   1e550:	pop	{fp, pc}
   1e554:	mov	r1, #0
   1e558:	strb	r1, [r0]
   1e55c:	mov	r1, #91	; 0x5b
   1e560:	strb	r1, [r0]
   1e564:	mov	r1, #1
   1e568:	strb	r1, [r0, #4]
   1e56c:	mov	r0, r1
   1e570:	pop	{fp, pc}
   1e574:	mov	r1, #28
   1e578:	strb	r1, [r0, #4]
   1e57c:	mov	r1, #2
   1e580:	mov	r0, r1
   1e584:	pop	{fp, pc}
   1e588:	tst	r2, #4
   1e58c:	beq	1e55c <__assert_fail@plt+0xd0a8>
   1e590:	mov	r1, #30
   1e594:	strb	r1, [r0, #4]
   1e598:	mov	r1, #2
   1e59c:	mov	r0, r1
   1e5a0:	pop	{fp, pc}
   1e5a4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e5a8:	add	fp, sp, #24
   1e5ac:	sub	sp, sp, #8
   1e5b0:	mov	r5, r2
   1e5b4:	ldr	r2, [r1, #80]	; 0x50
   1e5b8:	mov	r9, r0
   1e5bc:	ldr	r0, [r1, #40]	; 0x28
   1e5c0:	cmp	r2, #1
   1e5c4:	beq	1e634 <__assert_fail@plt+0xd180>
   1e5c8:	ldr	r4, [r1, #28]
   1e5cc:	add	r2, r0, #1
   1e5d0:	cmp	r2, r4
   1e5d4:	bge	1e634 <__assert_fail@plt+0xd180>
   1e5d8:	ldr	ip, [r1, #8]
   1e5dc:	mov	r2, #1
   1e5e0:	add	r6, ip, r0, lsl #2
   1e5e4:	ldr	r7, [r6, r2, lsl #2]
   1e5e8:	cmn	r7, #1
   1e5ec:	bne	1e604 <__assert_fail@plt+0xd150>
   1e5f0:	add	r2, r2, #1
   1e5f4:	add	r7, r0, r2
   1e5f8:	cmp	r7, r4
   1e5fc:	blt	1e5e4 <__assert_fail@plt+0xd130>
   1e600:	b	1e60c <__assert_fail@plt+0xd158>
   1e604:	cmp	r2, #2
   1e608:	bcc	1e634 <__assert_fail@plt+0xd180>
   1e60c:	mov	r3, #1
   1e610:	str	r3, [r9]
   1e614:	ldr	r0, [ip, r0, lsl #2]
   1e618:	str	r0, [r9, #4]
   1e61c:	ldr	r0, [r1, #40]	; 0x28
   1e620:	add	r0, r0, r2
   1e624:	str	r0, [r1, #40]	; 0x28
   1e628:	mov	r0, #0
   1e62c:	sub	sp, fp, #24
   1e630:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e634:	add	r2, r0, r3
   1e638:	str	r2, [r1, #40]	; 0x28
   1e63c:	ldrb	r6, [r5, #4]
   1e640:	sub	r0, r6, #22
   1e644:	cmp	r0, #8
   1e648:	bhi	1e890 <__assert_fail@plt+0xd3dc>
   1e64c:	add	r3, pc, #0
   1e650:	ldr	pc, [r3, r0, lsl #2]
   1e654:	andeq	lr, r1, r8, ror #16
   1e658:	muleq	r1, r0, r8
   1e65c:	muleq	r1, r0, r8
   1e660:	muleq	r1, r0, r8
   1e664:	andeq	lr, r1, r8, ror r6
   1e668:	muleq	r1, r0, r8
   1e66c:	andeq	lr, r1, r8, ror r6
   1e670:	muleq	r1, r0, r8
   1e674:	andeq	lr, r1, r8, ror r6
   1e678:	ldr	r3, [r1, #56]	; 0x38
   1e67c:	mov	r0, #7
   1e680:	cmp	r3, r2
   1e684:	ble	1e8a0 <__assert_fail@plt+0xd3ec>
   1e688:	ldrb	r3, [r5]
   1e68c:	mov	r2, #0
   1e690:	uxtb	r7, r6
   1e694:	cmp	r7, #30
   1e698:	bne	1e6c0 <__assert_fail@plt+0xd20c>
   1e69c:	b	1e6b4 <__assert_fail@plt+0xd200>
   1e6a0:	ldrb	r6, [r5, #4]
   1e6a4:	add	r2, r2, #1
   1e6a8:	uxtb	r7, r6
   1e6ac:	cmp	r7, #30
   1e6b0:	bne	1e6c0 <__assert_fail@plt+0xd20c>
   1e6b4:	ldrb	r7, [r1, #75]	; 0x4b
   1e6b8:	cmp	r7, #0
   1e6bc:	bne	1e710 <__assert_fail@plt+0xd25c>
   1e6c0:	ldr	r4, [r1, #40]	; 0x28
   1e6c4:	ldr	r7, [r1, #4]
   1e6c8:	add	r6, r4, #1
   1e6cc:	str	r6, [r1, #40]	; 0x28
   1e6d0:	ldrb	r4, [r7, r4]
   1e6d4:	ldr	r7, [r1, #56]	; 0x38
   1e6d8:	cmp	r7, r6
   1e6dc:	ble	1e8a0 <__assert_fail@plt+0xd3ec>
   1e6e0:	uxtb	r7, r4
   1e6e4:	cmp	r7, r3
   1e6e8:	bne	1e6fc <__assert_fail@plt+0xd248>
   1e6ec:	ldr	r7, [r1, #4]
   1e6f0:	ldrb	r7, [r7, r6]
   1e6f4:	cmp	r7, #93	; 0x5d
   1e6f8:	beq	1e808 <__assert_fail@plt+0xd354>
   1e6fc:	ldr	r7, [r9, #4]
   1e700:	cmp	r2, #30
   1e704:	strb	r4, [r7, r2]
   1e708:	bls	1e6a0 <__assert_fail@plt+0xd1ec>
   1e70c:	b	1e8a0 <__assert_fail@plt+0xd3ec>
   1e710:	ldrb	r7, [r1, #76]	; 0x4c
   1e714:	cmp	r7, #0
   1e718:	beq	1e7bc <__assert_fail@plt+0xd308>
   1e71c:	ldr	lr, [r1, #28]
   1e720:	ldr	ip, [r1, #40]	; 0x28
   1e724:	cmp	ip, lr
   1e728:	beq	1e73c <__assert_fail@plt+0xd288>
   1e72c:	ldr	r4, [r1, #8]
   1e730:	ldr	r4, [r4, ip, lsl #2]
   1e734:	cmn	r4, #1
   1e738:	beq	1e7e8 <__assert_fail@plt+0xd334>
   1e73c:	ldr	r6, [r1, #12]
   1e740:	ldr	r7, [r1, #24]
   1e744:	ldr	r4, [r1]
   1e748:	ldr	r6, [r6, ip, lsl #2]
   1e74c:	add	r6, r7, r6
   1e750:	add	r4, r4, r6
   1e754:	ldrsb	r4, [r4]
   1e758:	cmn	r4, #1
   1e75c:	ble	1e7e8 <__assert_fail@plt+0xd334>
   1e760:	ldr	r7, [r1, #80]	; 0x50
   1e764:	mov	r6, #1
   1e768:	cmp	r7, #1
   1e76c:	beq	1e7a4 <__assert_fail@plt+0xd2f0>
   1e770:	add	r7, ip, #1
   1e774:	cmp	r7, lr
   1e778:	bge	1e7a4 <__assert_fail@plt+0xd2f0>
   1e77c:	ldr	r6, [r1, #8]
   1e780:	add	r8, r6, ip, lsl #2
   1e784:	mov	r6, #1
   1e788:	ldr	r7, [r8, r6, lsl #2]
   1e78c:	cmn	r7, #1
   1e790:	bne	1e7a4 <__assert_fail@plt+0xd2f0>
   1e794:	add	r6, r6, #1
   1e798:	add	r7, ip, r6
   1e79c:	cmp	r7, lr
   1e7a0:	blt	1e788 <__assert_fail@plt+0xd2d4>
   1e7a4:	add	r6, r6, ip
   1e7a8:	str	r6, [r1, #40]	; 0x28
   1e7ac:	ldr	r7, [r1, #56]	; 0x38
   1e7b0:	cmp	r7, r6
   1e7b4:	bgt	1e6e0 <__assert_fail@plt+0xd22c>
   1e7b8:	b	1e8a0 <__assert_fail@plt+0xd3ec>
   1e7bc:	ldr	r7, [r1, #40]	; 0x28
   1e7c0:	ldr	r4, [r1, #24]
   1e7c4:	ldr	ip, [r1]
   1e7c8:	add	r6, r7, #1
   1e7cc:	add	r7, r7, r4
   1e7d0:	str	r6, [r1, #40]	; 0x28
   1e7d4:	ldrb	r4, [ip, r7]
   1e7d8:	ldr	r7, [r1, #56]	; 0x38
   1e7dc:	cmp	r7, r6
   1e7e0:	bgt	1e6e0 <__assert_fail@plt+0xd22c>
   1e7e4:	b	1e8a0 <__assert_fail@plt+0xd3ec>
   1e7e8:	add	r6, ip, #1
   1e7ec:	str	r6, [r1, #40]	; 0x28
   1e7f0:	ldr	r7, [r1, #4]
   1e7f4:	ldrb	r4, [r7, ip]
   1e7f8:	ldr	r7, [r1, #56]	; 0x38
   1e7fc:	cmp	r7, r6
   1e800:	bgt	1e6e0 <__assert_fail@plt+0xd22c>
   1e804:	b	1e8a0 <__assert_fail@plt+0xd3ec>
   1e808:	add	r0, r6, #1
   1e80c:	str	r0, [r1, #40]	; 0x28
   1e810:	mov	r0, #0
   1e814:	ldr	r1, [r9, #4]
   1e818:	strb	r0, [r1, r2]
   1e81c:	ldrb	r1, [r5, #4]
   1e820:	cmp	r1, #30
   1e824:	beq	1e848 <__assert_fail@plt+0xd394>
   1e828:	cmp	r1, #28
   1e82c:	beq	1e858 <__assert_fail@plt+0xd3a4>
   1e830:	cmp	r1, #26
   1e834:	bne	1e8a0 <__assert_fail@plt+0xd3ec>
   1e838:	mov	r1, #3
   1e83c:	str	r1, [r9]
   1e840:	sub	sp, fp, #24
   1e844:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e848:	mov	r1, #4
   1e84c:	str	r1, [r9]
   1e850:	sub	sp, fp, #24
   1e854:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e858:	mov	r1, #2
   1e85c:	str	r1, [r9]
   1e860:	sub	sp, fp, #24
   1e864:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e868:	ldr	r0, [fp, #12]
   1e86c:	cmp	r0, #0
   1e870:	bne	1e890 <__assert_fail@plt+0xd3dc>
   1e874:	ldr	r2, [fp, #8]
   1e878:	mov	r0, sp
   1e87c:	bl	1e3fc <__assert_fail@plt+0xcf48>
   1e880:	ldrb	r1, [sp, #4]
   1e884:	mov	r0, #11
   1e888:	cmp	r1, #21
   1e88c:	bne	1e8a0 <__assert_fail@plt+0xd3ec>
   1e890:	mov	r0, #0
   1e894:	str	r0, [r9]
   1e898:	ldrb	r1, [r5]
   1e89c:	strb	r1, [r9, #4]
   1e8a0:	sub	sp, fp, #24
   1e8a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e8a8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e8ac:	add	fp, sp, #24
   1e8b0:	mov	r8, r0
   1e8b4:	ldrb	r0, [fp, #14]
   1e8b8:	ldr	r6, [fp, #8]
   1e8bc:	mov	r5, r3
   1e8c0:	mov	r7, r2
   1e8c4:	mov	r4, r1
   1e8c8:	tst	r0, #64	; 0x40
   1e8cc:	beq	1e908 <__assert_fail@plt+0xd454>
   1e8d0:	movw	r1, #49690	; 0xc21a
   1e8d4:	mov	r0, r6
   1e8d8:	movt	r1, #2
   1e8dc:	bl	111fc <strcmp@plt>
   1e8e0:	cmp	r0, #0
   1e8e4:	beq	1e900 <__assert_fail@plt+0xd44c>
   1e8e8:	movw	r1, #49696	; 0xc220
   1e8ec:	mov	r0, r6
   1e8f0:	movt	r1, #2
   1e8f4:	bl	111fc <strcmp@plt>
   1e8f8:	cmp	r0, #0
   1e8fc:	bne	1e908 <__assert_fail@plt+0xd454>
   1e900:	movw	r6, #49702	; 0xc226
   1e904:	movt	r6, #2
   1e908:	ldr	r0, [r5]
   1e90c:	ldr	r1, [r7, #36]	; 0x24
   1e910:	cmp	r0, r1
   1e914:	beq	1ee64 <__assert_fail@plt+0xd9b0>
   1e918:	mov	r0, r6
   1e91c:	bl	111cc <wctype@plt>
   1e920:	ldr	r2, [r7, #36]	; 0x24
   1e924:	ldr	r1, [r7, #12]
   1e928:	add	r3, r2, #1
   1e92c:	str	r3, [r7, #36]	; 0x24
   1e930:	str	r0, [r1, r2, lsl #2]
   1e934:	movw	r1, #49678	; 0xc20e
   1e938:	mov	r0, r6
   1e93c:	movt	r1, #2
   1e940:	bl	111fc <strcmp@plt>
   1e944:	cmp	r0, #0
   1e948:	beq	1eaac <__assert_fail@plt+0xd5f8>
   1e94c:	movw	r1, #49708	; 0xc22c
   1e950:	mov	r0, r6
   1e954:	movt	r1, #2
   1e958:	bl	111fc <strcmp@plt>
   1e95c:	cmp	r0, #0
   1e960:	beq	1eb08 <__assert_fail@plt+0xd654>
   1e964:	movw	r1, #49696	; 0xc220
   1e968:	mov	r0, r6
   1e96c:	movt	r1, #2
   1e970:	bl	111fc <strcmp@plt>
   1e974:	cmp	r0, #0
   1e978:	beq	1eb64 <__assert_fail@plt+0xd6b0>
   1e97c:	movw	r1, #49684	; 0xc214
   1e980:	mov	r0, r6
   1e984:	movt	r1, #2
   1e988:	bl	111fc <strcmp@plt>
   1e98c:	cmp	r0, #0
   1e990:	beq	1ebc0 <__assert_fail@plt+0xd70c>
   1e994:	movw	r1, #49702	; 0xc226
   1e998:	mov	r0, r6
   1e99c:	movt	r1, #2
   1e9a0:	bl	111fc <strcmp@plt>
   1e9a4:	cmp	r0, #0
   1e9a8:	beq	1ec1c <__assert_fail@plt+0xd768>
   1e9ac:	movw	r1, #49739	; 0xc24b
   1e9b0:	mov	r0, r6
   1e9b4:	movt	r1, #2
   1e9b8:	bl	111fc <strcmp@plt>
   1e9bc:	cmp	r0, #0
   1e9c0:	beq	1ec78 <__assert_fail@plt+0xd7c4>
   1e9c4:	movw	r1, #49714	; 0xc232
   1e9c8:	mov	r0, r6
   1e9cc:	movt	r1, #2
   1e9d0:	bl	111fc <strcmp@plt>
   1e9d4:	cmp	r0, #0
   1e9d8:	beq	1ecd4 <__assert_fail@plt+0xd820>
   1e9dc:	movw	r1, #49690	; 0xc21a
   1e9e0:	mov	r0, r6
   1e9e4:	movt	r1, #2
   1e9e8:	bl	111fc <strcmp@plt>
   1e9ec:	cmp	r0, #0
   1e9f0:	beq	1ed24 <__assert_fail@plt+0xd870>
   1e9f4:	movw	r1, #49720	; 0xc238
   1e9f8:	mov	r0, r6
   1e9fc:	movt	r1, #2
   1ea00:	bl	111fc <strcmp@plt>
   1ea04:	cmp	r0, #0
   1ea08:	beq	1ed74 <__assert_fail@plt+0xd8c0>
   1ea0c:	movw	r1, #49726	; 0xc23e
   1ea10:	mov	r0, r6
   1ea14:	movt	r1, #2
   1ea18:	bl	111fc <strcmp@plt>
   1ea1c:	cmp	r0, #0
   1ea20:	beq	1edc4 <__assert_fail@plt+0xd910>
   1ea24:	movw	r1, #49732	; 0xc244
   1ea28:	mov	r0, r6
   1ea2c:	movt	r1, #2
   1ea30:	bl	111fc <strcmp@plt>
   1ea34:	cmp	r0, #0
   1ea38:	beq	1ee14 <__assert_fail@plt+0xd960>
   1ea3c:	movw	r1, #49738	; 0xc24a
   1ea40:	mov	r0, r6
   1ea44:	movt	r1, #2
   1ea48:	bl	111fc <strcmp@plt>
   1ea4c:	mov	r1, r0
   1ea50:	mov	r0, #4
   1ea54:	cmp	r1, #0
   1ea58:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ea5c:	bl	1137c <__ctype_b_loc@plt>
   1ea60:	ldr	r1, [r0]
   1ea64:	mov	r2, #0
   1ea68:	mov	r3, #1
   1ea6c:	cmp	r8, #0
   1ea70:	bne	1efcc <__assert_fail@plt+0xdb18>
   1ea74:	ldrb	r0, [r1, #1]
   1ea78:	tst	r0, #16
   1ea7c:	beq	1ea94 <__assert_fail@plt+0xd5e0>
   1ea80:	ubfx	r0, r2, #5, #3
   1ea84:	and	r6, r2, #31
   1ea88:	ldr	r7, [r4, r0, lsl #2]
   1ea8c:	orr	r7, r7, r3, lsl r6
   1ea90:	str	r7, [r4, r0, lsl #2]
   1ea94:	add	r2, r2, #1
   1ea98:	add	r1, r1, #2
   1ea9c:	mov	r0, #0
   1eaa0:	cmp	r2, #256	; 0x100
   1eaa4:	bne	1ea74 <__assert_fail@plt+0xd5c0>
   1eaa8:	b	1ee60 <__assert_fail@plt+0xd9ac>
   1eaac:	bl	1137c <__ctype_b_loc@plt>
   1eab0:	ldr	r1, [r0]
   1eab4:	cmp	r8, #0
   1eab8:	bne	1ef08 <__assert_fail@plt+0xda54>
   1eabc:	mov	r0, #0
   1eac0:	mov	r2, #1
   1eac4:	ldrb	r3, [r1]
   1eac8:	tst	r3, #8
   1eacc:	bne	1eaf0 <__assert_fail@plt+0xd63c>
   1ead0:	add	r0, r0, #1
   1ead4:	add	r1, r1, #2
   1ead8:	cmp	r0, #256	; 0x100
   1eadc:	moveq	r0, #0
   1eae0:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1eae4:	ldrb	r3, [r1]
   1eae8:	tst	r3, #8
   1eaec:	beq	1ead0 <__assert_fail@plt+0xd61c>
   1eaf0:	ubfx	r3, r0, #5, #3
   1eaf4:	and	r6, r0, #31
   1eaf8:	ldr	r7, [r4, r3, lsl #2]
   1eafc:	orr	r7, r7, r2, lsl r6
   1eb00:	str	r7, [r4, r3, lsl #2]
   1eb04:	b	1ead0 <__assert_fail@plt+0xd61c>
   1eb08:	bl	1137c <__ctype_b_loc@plt>
   1eb0c:	ldr	r1, [r0]
   1eb10:	cmp	r8, #0
   1eb14:	bne	1ef88 <__assert_fail@plt+0xdad4>
   1eb18:	mov	r0, #0
   1eb1c:	mov	r2, #1
   1eb20:	ldrb	r3, [r1]
   1eb24:	tst	r3, #2
   1eb28:	bne	1eb4c <__assert_fail@plt+0xd698>
   1eb2c:	add	r0, r0, #1
   1eb30:	add	r1, r1, #2
   1eb34:	cmp	r0, #256	; 0x100
   1eb38:	moveq	r0, #0
   1eb3c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1eb40:	ldrb	r3, [r1]
   1eb44:	tst	r3, #2
   1eb48:	beq	1eb2c <__assert_fail@plt+0xd678>
   1eb4c:	ubfx	r3, r0, #5, #3
   1eb50:	and	r6, r0, #31
   1eb54:	ldr	r7, [r4, r3, lsl #2]
   1eb58:	orr	r7, r7, r2, lsl r6
   1eb5c:	str	r7, [r4, r3, lsl #2]
   1eb60:	b	1eb2c <__assert_fail@plt+0xd678>
   1eb64:	bl	1137c <__ctype_b_loc@plt>
   1eb68:	ldr	r1, [r0]
   1eb6c:	cmp	r8, #0
   1eb70:	bne	1f044 <__assert_fail@plt+0xdb90>
   1eb74:	mov	r0, #0
   1eb78:	mov	r2, #1
   1eb7c:	ldrb	r3, [r1, #1]
   1eb80:	tst	r3, #2
   1eb84:	bne	1eba8 <__assert_fail@plt+0xd6f4>
   1eb88:	add	r0, r0, #1
   1eb8c:	add	r1, r1, #2
   1eb90:	cmp	r0, #256	; 0x100
   1eb94:	moveq	r0, #0
   1eb98:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1eb9c:	ldrb	r3, [r1, #1]
   1eba0:	tst	r3, #2
   1eba4:	beq	1eb88 <__assert_fail@plt+0xd6d4>
   1eba8:	ubfx	r3, r0, #5, #3
   1ebac:	and	r6, r0, #31
   1ebb0:	ldr	r7, [r4, r3, lsl #2]
   1ebb4:	orr	r7, r7, r2, lsl r6
   1ebb8:	str	r7, [r4, r3, lsl #2]
   1ebbc:	b	1eb88 <__assert_fail@plt+0xd6d4>
   1ebc0:	bl	1137c <__ctype_b_loc@plt>
   1ebc4:	ldr	r1, [r0]
   1ebc8:	cmp	r8, #0
   1ebcc:	bne	1f0c4 <__assert_fail@plt+0xdc10>
   1ebd0:	mov	r0, #0
   1ebd4:	mov	r2, #1
   1ebd8:	ldrb	r3, [r1, #1]
   1ebdc:	tst	r3, #32
   1ebe0:	bne	1ec04 <__assert_fail@plt+0xd750>
   1ebe4:	add	r0, r0, #1
   1ebe8:	add	r1, r1, #2
   1ebec:	cmp	r0, #256	; 0x100
   1ebf0:	moveq	r0, #0
   1ebf4:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ebf8:	ldrb	r3, [r1, #1]
   1ebfc:	tst	r3, #32
   1ec00:	beq	1ebe4 <__assert_fail@plt+0xd730>
   1ec04:	ubfx	r3, r0, #5, #3
   1ec08:	and	r6, r0, #31
   1ec0c:	ldr	r7, [r4, r3, lsl #2]
   1ec10:	orr	r7, r7, r2, lsl r6
   1ec14:	str	r7, [r4, r3, lsl #2]
   1ec18:	b	1ebe4 <__assert_fail@plt+0xd730>
   1ec1c:	bl	1137c <__ctype_b_loc@plt>
   1ec20:	ldr	r1, [r0]
   1ec24:	cmp	r8, #0
   1ec28:	bne	1f108 <__assert_fail@plt+0xdc54>
   1ec2c:	mov	r0, #0
   1ec30:	mov	r2, #1
   1ec34:	ldrb	r3, [r1, #1]
   1ec38:	tst	r3, #4
   1ec3c:	bne	1ec60 <__assert_fail@plt+0xd7ac>
   1ec40:	add	r0, r0, #1
   1ec44:	add	r1, r1, #2
   1ec48:	cmp	r0, #256	; 0x100
   1ec4c:	moveq	r0, #0
   1ec50:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ec54:	ldrb	r3, [r1, #1]
   1ec58:	tst	r3, #4
   1ec5c:	beq	1ec40 <__assert_fail@plt+0xd78c>
   1ec60:	ubfx	r3, r0, #5, #3
   1ec64:	and	r6, r0, #31
   1ec68:	ldr	r7, [r4, r3, lsl #2]
   1ec6c:	orr	r7, r7, r2, lsl r6
   1ec70:	str	r7, [r4, r3, lsl #2]
   1ec74:	b	1ec40 <__assert_fail@plt+0xd78c>
   1ec78:	bl	1137c <__ctype_b_loc@plt>
   1ec7c:	ldr	r1, [r0]
   1ec80:	cmp	r8, #0
   1ec84:	bne	1f14c <__assert_fail@plt+0xdc98>
   1ec88:	mov	r0, #0
   1ec8c:	mov	r2, #1
   1ec90:	ldrb	r3, [r1, #1]
   1ec94:	tst	r3, #8
   1ec98:	bne	1ecbc <__assert_fail@plt+0xd808>
   1ec9c:	add	r0, r0, #1
   1eca0:	add	r1, r1, #2
   1eca4:	cmp	r0, #256	; 0x100
   1eca8:	moveq	r0, #0
   1ecac:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ecb0:	ldrb	r3, [r1, #1]
   1ecb4:	tst	r3, #8
   1ecb8:	beq	1ec9c <__assert_fail@plt+0xd7e8>
   1ecbc:	ubfx	r3, r0, #5, #3
   1ecc0:	and	r6, r0, #31
   1ecc4:	ldr	r7, [r4, r3, lsl #2]
   1ecc8:	orr	r7, r7, r2, lsl r6
   1eccc:	str	r7, [r4, r3, lsl #2]
   1ecd0:	b	1ec9c <__assert_fail@plt+0xd7e8>
   1ecd4:	bl	1137c <__ctype_b_loc@plt>
   1ecd8:	ldr	r1, [r0]
   1ecdc:	mov	r2, #0
   1ece0:	mov	r3, #1
   1ece4:	cmp	r8, #0
   1ece8:	bne	1ee90 <__assert_fail@plt+0xd9dc>
   1ecec:	ldrb	r0, [r1, #1]
   1ecf0:	tst	r0, #64	; 0x40
   1ecf4:	beq	1ed0c <__assert_fail@plt+0xd858>
   1ecf8:	ubfx	r0, r2, #5, #3
   1ecfc:	and	r6, r2, #31
   1ed00:	ldr	r7, [r4, r0, lsl #2]
   1ed04:	orr	r7, r7, r3, lsl r6
   1ed08:	str	r7, [r4, r0, lsl #2]
   1ed0c:	add	r2, r2, #1
   1ed10:	add	r1, r1, #2
   1ed14:	mov	r0, #0
   1ed18:	cmp	r2, #256	; 0x100
   1ed1c:	bne	1ecec <__assert_fail@plt+0xd838>
   1ed20:	b	1ee60 <__assert_fail@plt+0xd9ac>
   1ed24:	bl	1137c <__ctype_b_loc@plt>
   1ed28:	ldr	r1, [r0]
   1ed2c:	mov	r2, #0
   1ed30:	mov	r3, #1
   1ed34:	cmp	r8, #0
   1ed38:	bne	1eecc <__assert_fail@plt+0xda18>
   1ed3c:	ldrb	r0, [r1, #1]
   1ed40:	tst	r0, #1
   1ed44:	beq	1ed5c <__assert_fail@plt+0xd8a8>
   1ed48:	ubfx	r0, r2, #5, #3
   1ed4c:	and	r6, r2, #31
   1ed50:	ldr	r7, [r4, r0, lsl #2]
   1ed54:	orr	r7, r7, r3, lsl r6
   1ed58:	str	r7, [r4, r0, lsl #2]
   1ed5c:	add	r2, r2, #1
   1ed60:	add	r1, r1, #2
   1ed64:	mov	r0, #0
   1ed68:	cmp	r2, #256	; 0x100
   1ed6c:	bne	1ed3c <__assert_fail@plt+0xd888>
   1ed70:	b	1ee60 <__assert_fail@plt+0xd9ac>
   1ed74:	bl	1137c <__ctype_b_loc@plt>
   1ed78:	ldr	r1, [r0]
   1ed7c:	mov	r2, #0
   1ed80:	mov	r3, #1
   1ed84:	cmp	r8, #0
   1ed88:	bne	1ef4c <__assert_fail@plt+0xda98>
   1ed8c:	ldrb	r0, [r1]
   1ed90:	tst	r0, #1
   1ed94:	beq	1edac <__assert_fail@plt+0xd8f8>
   1ed98:	ubfx	r0, r2, #5, #3
   1ed9c:	and	r6, r2, #31
   1eda0:	ldr	r7, [r4, r0, lsl #2]
   1eda4:	orr	r7, r7, r3, lsl r6
   1eda8:	str	r7, [r4, r0, lsl #2]
   1edac:	add	r2, r2, #1
   1edb0:	add	r1, r1, #2
   1edb4:	mov	r0, #0
   1edb8:	cmp	r2, #256	; 0x100
   1edbc:	bne	1ed8c <__assert_fail@plt+0xd8d8>
   1edc0:	b	1ee60 <__assert_fail@plt+0xd9ac>
   1edc4:	bl	1137c <__ctype_b_loc@plt>
   1edc8:	ldr	r1, [r0]
   1edcc:	mov	r2, #0
   1edd0:	mov	r3, #1
   1edd4:	cmp	r8, #0
   1edd8:	bne	1f008 <__assert_fail@plt+0xdb54>
   1eddc:	ldrsh	r0, [r1]
   1ede0:	cmn	r0, #1
   1ede4:	bgt	1edfc <__assert_fail@plt+0xd948>
   1ede8:	ubfx	r0, r2, #5, #3
   1edec:	and	r6, r2, #31
   1edf0:	ldr	r7, [r4, r0, lsl #2]
   1edf4:	orr	r7, r7, r3, lsl r6
   1edf8:	str	r7, [r4, r0, lsl #2]
   1edfc:	add	r2, r2, #1
   1ee00:	add	r1, r1, #2
   1ee04:	mov	r0, #0
   1ee08:	cmp	r2, #256	; 0x100
   1ee0c:	bne	1eddc <__assert_fail@plt+0xd928>
   1ee10:	b	1ee60 <__assert_fail@plt+0xd9ac>
   1ee14:	bl	1137c <__ctype_b_loc@plt>
   1ee18:	ldr	r1, [r0]
   1ee1c:	mov	r2, #0
   1ee20:	mov	r3, #1
   1ee24:	cmp	r8, #0
   1ee28:	bne	1f088 <__assert_fail@plt+0xdbd4>
   1ee2c:	ldrb	r0, [r1]
   1ee30:	tst	r0, #4
   1ee34:	beq	1ee4c <__assert_fail@plt+0xd998>
   1ee38:	ubfx	r0, r2, #5, #3
   1ee3c:	and	r6, r2, #31
   1ee40:	ldr	r7, [r4, r0, lsl #2]
   1ee44:	orr	r7, r7, r3, lsl r6
   1ee48:	str	r7, [r4, r0, lsl #2]
   1ee4c:	add	r2, r2, #1
   1ee50:	add	r1, r1, #2
   1ee54:	mov	r0, #0
   1ee58:	cmp	r2, #256	; 0x100
   1ee5c:	bne	1ee2c <__assert_fail@plt+0xd978>
   1ee60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ee64:	mov	r1, #1
   1ee68:	orr	r9, r1, r0, lsl #1
   1ee6c:	ldr	r0, [r7, #12]
   1ee70:	lsl	r1, r9, #2
   1ee74:	bl	2ac90 <__assert_fail@plt+0x197dc>
   1ee78:	cmp	r0, #0
   1ee7c:	moveq	r0, #12
   1ee80:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ee84:	str	r0, [r7, #12]
   1ee88:	str	r9, [r5]
   1ee8c:	b	1e918 <__assert_fail@plt+0xd464>
   1ee90:	ldrb	r0, [r1, #1]
   1ee94:	tst	r0, #64	; 0x40
   1ee98:	beq	1eeb4 <__assert_fail@plt+0xda00>
   1ee9c:	ldrb	r0, [r8, r2]
   1eea0:	ubfx	r7, r0, #5, #3
   1eea4:	and	r0, r0, #31
   1eea8:	ldr	r6, [r4, r7, lsl #2]
   1eeac:	orr	r0, r6, r3, lsl r0
   1eeb0:	str	r0, [r4, r7, lsl #2]
   1eeb4:	add	r2, r2, #1
   1eeb8:	add	r1, r1, #2
   1eebc:	mov	r0, #0
   1eec0:	cmp	r2, #256	; 0x100
   1eec4:	bne	1ee90 <__assert_fail@plt+0xd9dc>
   1eec8:	b	1ee60 <__assert_fail@plt+0xd9ac>
   1eecc:	ldrb	r0, [r1, #1]
   1eed0:	tst	r0, #1
   1eed4:	beq	1eef0 <__assert_fail@plt+0xda3c>
   1eed8:	ldrb	r0, [r8, r2]
   1eedc:	ubfx	r7, r0, #5, #3
   1eee0:	and	r0, r0, #31
   1eee4:	ldr	r6, [r4, r7, lsl #2]
   1eee8:	orr	r0, r6, r3, lsl r0
   1eeec:	str	r0, [r4, r7, lsl #2]
   1eef0:	add	r2, r2, #1
   1eef4:	add	r1, r1, #2
   1eef8:	mov	r0, #0
   1eefc:	cmp	r2, #256	; 0x100
   1ef00:	bne	1eecc <__assert_fail@plt+0xda18>
   1ef04:	b	1ee60 <__assert_fail@plt+0xd9ac>
   1ef08:	mov	r2, #0
   1ef0c:	mov	r3, #1
   1ef10:	ldrb	r0, [r1]
   1ef14:	tst	r0, #8
   1ef18:	beq	1ef34 <__assert_fail@plt+0xda80>
   1ef1c:	ldrb	r0, [r8, r2]
   1ef20:	ubfx	r7, r0, #5, #3
   1ef24:	and	r0, r0, #31
   1ef28:	ldr	r6, [r4, r7, lsl #2]
   1ef2c:	orr	r0, r6, r3, lsl r0
   1ef30:	str	r0, [r4, r7, lsl #2]
   1ef34:	add	r2, r2, #1
   1ef38:	add	r1, r1, #2
   1ef3c:	mov	r0, #0
   1ef40:	cmp	r2, #256	; 0x100
   1ef44:	bne	1ef10 <__assert_fail@plt+0xda5c>
   1ef48:	b	1ee60 <__assert_fail@plt+0xd9ac>
   1ef4c:	ldrb	r0, [r1]
   1ef50:	tst	r0, #1
   1ef54:	beq	1ef70 <__assert_fail@plt+0xdabc>
   1ef58:	ldrb	r0, [r8, r2]
   1ef5c:	ubfx	r7, r0, #5, #3
   1ef60:	and	r0, r0, #31
   1ef64:	ldr	r6, [r4, r7, lsl #2]
   1ef68:	orr	r0, r6, r3, lsl r0
   1ef6c:	str	r0, [r4, r7, lsl #2]
   1ef70:	add	r2, r2, #1
   1ef74:	add	r1, r1, #2
   1ef78:	mov	r0, #0
   1ef7c:	cmp	r2, #256	; 0x100
   1ef80:	bne	1ef4c <__assert_fail@plt+0xda98>
   1ef84:	b	1ee60 <__assert_fail@plt+0xd9ac>
   1ef88:	mov	r2, #0
   1ef8c:	mov	r3, #1
   1ef90:	ldrb	r0, [r1]
   1ef94:	tst	r0, #2
   1ef98:	beq	1efb4 <__assert_fail@plt+0xdb00>
   1ef9c:	ldrb	r0, [r8, r2]
   1efa0:	ubfx	r7, r0, #5, #3
   1efa4:	and	r0, r0, #31
   1efa8:	ldr	r6, [r4, r7, lsl #2]
   1efac:	orr	r0, r6, r3, lsl r0
   1efb0:	str	r0, [r4, r7, lsl #2]
   1efb4:	add	r2, r2, #1
   1efb8:	add	r1, r1, #2
   1efbc:	mov	r0, #0
   1efc0:	cmp	r2, #256	; 0x100
   1efc4:	bne	1ef90 <__assert_fail@plt+0xdadc>
   1efc8:	b	1ee60 <__assert_fail@plt+0xd9ac>
   1efcc:	ldrb	r0, [r1, #1]
   1efd0:	tst	r0, #16
   1efd4:	beq	1eff0 <__assert_fail@plt+0xdb3c>
   1efd8:	ldrb	r0, [r8, r2]
   1efdc:	ubfx	r7, r0, #5, #3
   1efe0:	and	r0, r0, #31
   1efe4:	ldr	r6, [r4, r7, lsl #2]
   1efe8:	orr	r0, r6, r3, lsl r0
   1efec:	str	r0, [r4, r7, lsl #2]
   1eff0:	add	r2, r2, #1
   1eff4:	add	r1, r1, #2
   1eff8:	mov	r0, #0
   1effc:	cmp	r2, #256	; 0x100
   1f000:	bne	1efcc <__assert_fail@plt+0xdb18>
   1f004:	b	1ee60 <__assert_fail@plt+0xd9ac>
   1f008:	ldrsh	r0, [r1]
   1f00c:	cmn	r0, #1
   1f010:	bgt	1f02c <__assert_fail@plt+0xdb78>
   1f014:	ldrb	r0, [r8, r2]
   1f018:	ubfx	r7, r0, #5, #3
   1f01c:	and	r0, r0, #31
   1f020:	ldr	r6, [r4, r7, lsl #2]
   1f024:	orr	r0, r6, r3, lsl r0
   1f028:	str	r0, [r4, r7, lsl #2]
   1f02c:	add	r2, r2, #1
   1f030:	add	r1, r1, #2
   1f034:	mov	r0, #0
   1f038:	cmp	r2, #256	; 0x100
   1f03c:	bne	1f008 <__assert_fail@plt+0xdb54>
   1f040:	b	1ee60 <__assert_fail@plt+0xd9ac>
   1f044:	mov	r2, #0
   1f048:	mov	r3, #1
   1f04c:	ldrb	r0, [r1, #1]
   1f050:	tst	r0, #2
   1f054:	beq	1f070 <__assert_fail@plt+0xdbbc>
   1f058:	ldrb	r0, [r8, r2]
   1f05c:	ubfx	r7, r0, #5, #3
   1f060:	and	r0, r0, #31
   1f064:	ldr	r6, [r4, r7, lsl #2]
   1f068:	orr	r0, r6, r3, lsl r0
   1f06c:	str	r0, [r4, r7, lsl #2]
   1f070:	add	r2, r2, #1
   1f074:	add	r1, r1, #2
   1f078:	mov	r0, #0
   1f07c:	cmp	r2, #256	; 0x100
   1f080:	bne	1f04c <__assert_fail@plt+0xdb98>
   1f084:	b	1ee60 <__assert_fail@plt+0xd9ac>
   1f088:	ldrb	r0, [r1]
   1f08c:	tst	r0, #4
   1f090:	beq	1f0ac <__assert_fail@plt+0xdbf8>
   1f094:	ldrb	r0, [r8, r2]
   1f098:	ubfx	r7, r0, #5, #3
   1f09c:	and	r0, r0, #31
   1f0a0:	ldr	r6, [r4, r7, lsl #2]
   1f0a4:	orr	r0, r6, r3, lsl r0
   1f0a8:	str	r0, [r4, r7, lsl #2]
   1f0ac:	add	r2, r2, #1
   1f0b0:	add	r1, r1, #2
   1f0b4:	mov	r0, #0
   1f0b8:	cmp	r2, #256	; 0x100
   1f0bc:	bne	1f088 <__assert_fail@plt+0xdbd4>
   1f0c0:	b	1ee60 <__assert_fail@plt+0xd9ac>
   1f0c4:	mov	r2, #0
   1f0c8:	mov	r3, #1
   1f0cc:	ldrb	r0, [r1, #1]
   1f0d0:	tst	r0, #32
   1f0d4:	beq	1f0f0 <__assert_fail@plt+0xdc3c>
   1f0d8:	ldrb	r0, [r8, r2]
   1f0dc:	ubfx	r7, r0, #5, #3
   1f0e0:	and	r0, r0, #31
   1f0e4:	ldr	r6, [r4, r7, lsl #2]
   1f0e8:	orr	r0, r6, r3, lsl r0
   1f0ec:	str	r0, [r4, r7, lsl #2]
   1f0f0:	add	r2, r2, #1
   1f0f4:	add	r1, r1, #2
   1f0f8:	mov	r0, #0
   1f0fc:	cmp	r2, #256	; 0x100
   1f100:	bne	1f0cc <__assert_fail@plt+0xdc18>
   1f104:	b	1ee60 <__assert_fail@plt+0xd9ac>
   1f108:	mov	r2, #0
   1f10c:	mov	r3, #1
   1f110:	ldrb	r0, [r1, #1]
   1f114:	tst	r0, #4
   1f118:	beq	1f134 <__assert_fail@plt+0xdc80>
   1f11c:	ldrb	r0, [r8, r2]
   1f120:	ubfx	r7, r0, #5, #3
   1f124:	and	r0, r0, #31
   1f128:	ldr	r6, [r4, r7, lsl #2]
   1f12c:	orr	r0, r6, r3, lsl r0
   1f130:	str	r0, [r4, r7, lsl #2]
   1f134:	add	r2, r2, #1
   1f138:	add	r1, r1, #2
   1f13c:	mov	r0, #0
   1f140:	cmp	r2, #256	; 0x100
   1f144:	bne	1f110 <__assert_fail@plt+0xdc5c>
   1f148:	b	1ee60 <__assert_fail@plt+0xd9ac>
   1f14c:	mov	r2, #0
   1f150:	mov	r3, #1
   1f154:	ldrb	r0, [r1, #1]
   1f158:	tst	r0, #8
   1f15c:	beq	1f178 <__assert_fail@plt+0xdcc4>
   1f160:	ldrb	r0, [r8, r2]
   1f164:	ubfx	r7, r0, #5, #3
   1f168:	and	r0, r0, #31
   1f16c:	ldr	r6, [r4, r7, lsl #2]
   1f170:	orr	r0, r6, r3, lsl r0
   1f174:	str	r0, [r4, r7, lsl #2]
   1f178:	add	r2, r2, #1
   1f17c:	add	r1, r1, #2
   1f180:	mov	r0, #0
   1f184:	cmp	r2, #256	; 0x100
   1f188:	bne	1f154 <__assert_fail@plt+0xdca0>
   1f18c:	b	1ee60 <__assert_fail@plt+0xd9ac>
   1f190:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1f194:	add	fp, sp, #24
   1f198:	ldrb	r3, [r1, #24]
   1f19c:	ldr	r2, [r1, #28]
   1f1a0:	mov	r4, #0
   1f1a4:	sub	r3, r3, #2
   1f1a8:	cmp	r3, #14
   1f1ac:	bhi	1f2d0 <__assert_fail@plt+0xde1c>
   1f1b0:	add	r7, pc, #0
   1f1b4:	ldr	pc, [r7, r3, lsl #2]
   1f1b8:	andeq	pc, r1, r4, lsl #6
   1f1bc:	ldrdeq	pc, [r1], -r0
   1f1c0:	andeq	pc, r1, r8, ror #5
   1f1c4:	ldrdeq	pc, [r1], -r0
   1f1c8:	ldrdeq	pc, [r1], -r0
   1f1cc:	ldrdeq	pc, [r1], -r0
   1f1d0:	strdeq	pc, [r1], -r4
   1f1d4:	strdeq	pc, [r1], -r4
   1f1d8:	andeq	pc, r1, r8, asr #4
   1f1dc:	andeq	pc, r1, r8, asr #4
   1f1e0:	strdeq	pc, [r1], -r4
   1f1e4:	ldrdeq	pc, [r1], -r0
   1f1e8:	ldrdeq	pc, [r1], -r0
   1f1ec:	ldrdeq	pc, [r1], -r0
   1f1f0:	andeq	pc, r1, r4, lsl #6
   1f1f4:	ldr	r1, [r1, #16]
   1f1f8:	ldr	r5, [r1, #28]
   1f1fc:	ldr	r6, [r0, #20]
   1f200:	add	r0, r2, r2, lsl #1
   1f204:	mov	r1, #1
   1f208:	str	r1, [r6, r0, lsl #2]!
   1f20c:	mov	r0, #4
   1f210:	mov	r7, r6
   1f214:	str	r1, [r7, #4]!
   1f218:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1f21c:	cmp	r0, #0
   1f220:	str	r0, [r6, #8]
   1f224:	strne	r5, [r0]
   1f228:	movne	r0, r4
   1f22c:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f230:	mov	r0, #0
   1f234:	str	r0, [r7]
   1f238:	str	r0, [r6]
   1f23c:	mov	r4, #12
   1f240:	mov	r0, r4
   1f244:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f248:	ldrb	r3, [r0, #88]	; 0x58
   1f24c:	add	r6, r1, #16
   1f250:	add	r5, r2, r2, lsl #1
   1f254:	orr	r3, r3, #1
   1f258:	strb	r3, [r0, #88]	; 0x58
   1f25c:	mov	r3, r6
   1f260:	ldr	r7, [r1, #4]
   1f264:	ldr	r1, [r1, #8]
   1f268:	cmp	r1, #0
   1f26c:	addne	r3, r1, #12
   1f270:	cmp	r7, #0
   1f274:	ldr	r1, [r3]
   1f278:	addne	r6, r7, #12
   1f27c:	ldr	r8, [r1, #28]
   1f280:	ldr	r1, [r6]
   1f284:	ldr	r6, [r0, #20]
   1f288:	mov	r0, #2
   1f28c:	ldr	r9, [r1, #28]
   1f290:	mov	r7, r6
   1f294:	str	r0, [r7, r5, lsl #2]!
   1f298:	mov	r0, #8
   1f29c:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1f2a0:	cmp	r0, #0
   1f2a4:	str	r0, [r7, #8]
   1f2a8:	beq	1f23c <__assert_fail@plt+0xdd88>
   1f2ac:	add	r1, r6, r5, lsl #2
   1f2b0:	cmp	r9, r8
   1f2b4:	add	r1, r1, #4
   1f2b8:	bne	1f30c <__assert_fail@plt+0xde58>
   1f2bc:	mov	r2, #1
   1f2c0:	str	r2, [r1]
   1f2c4:	str	r9, [r0]
   1f2c8:	mov	r0, r4
   1f2cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f2d0:	ldr	r1, [r1, #16]
   1f2d4:	ldr	r0, [r0, #12]
   1f2d8:	ldr	r1, [r1, #28]
   1f2dc:	str	r1, [r0, r2, lsl #2]
   1f2e0:	mov	r0, r4
   1f2e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f2e8:	ldr	r7, [r1, #16]
   1f2ec:	ldr	r3, [r0, #12]
   1f2f0:	ldr	r5, [r7, #28]
   1f2f4:	str	r5, [r3, r2, lsl #2]
   1f2f8:	ldrb	r1, [r1, #24]
   1f2fc:	cmp	r1, #4
   1f300:	beq	1f1fc <__assert_fail@plt+0xdd48>
   1f304:	mov	r0, r4
   1f308:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f30c:	mov	r2, #2
   1f310:	str	r2, [r1]
   1f314:	stmge	r0, {r8, r9}
   1f318:	strlt	r9, [r0]
   1f31c:	strlt	r8, [r0, #4]
   1f320:	mov	r0, r4
   1f324:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f328:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f32c:	add	fp, sp, #28
   1f330:	sub	sp, sp, #4
   1f334:	ldr	r6, [r3, #4]
   1f338:	tst	r2, #16
   1f33c:	mov	r9, r3
   1f340:	mov	r7, r1
   1f344:	mov	r8, r0
   1f348:	cmpne	r6, #0
   1f34c:	bne	1f504 <__assert_fail@plt+0xe050>
   1f350:	ldr	r1, [r7, #64]	; 0x40
   1f354:	cmp	r1, #31
   1f358:	beq	1f52c <__assert_fail@plt+0xe078>
   1f35c:	ldr	r0, [r7, #56]	; 0x38
   1f360:	add	r2, r1, #1
   1f364:	add	r0, r0, r1, lsl #5
   1f368:	mov	r1, #0
   1f36c:	vmov.i32	q8, #0	; 0x00000000
   1f370:	str	r2, [r7, #64]	; 0x40
   1f374:	add	sl, r0, #4
   1f378:	mov	r2, #8
   1f37c:	str	r1, [r0, #20]
   1f380:	str	r1, [r0, #24]
   1f384:	str	r2, [r0, #28]
   1f388:	mov	r0, #28
   1f38c:	mov	r1, sl
   1f390:	vst1.32	{d16-d17}, [r1], r0
   1f394:	mvn	r0, #0
   1f398:	str	r0, [r1]
   1f39c:	ldr	r1, [r7, #64]	; 0x40
   1f3a0:	cmp	r1, #31
   1f3a4:	beq	1f58c <__assert_fail@plt+0xe0d8>
   1f3a8:	ldr	r0, [r7, #56]	; 0x38
   1f3ac:	add	r2, r1, #1
   1f3b0:	add	r0, r0, r1, lsl #5
   1f3b4:	mov	r1, #0
   1f3b8:	vmov.i32	q8, #0	; 0x00000000
   1f3bc:	str	r2, [r7, #64]	; 0x40
   1f3c0:	add	r5, r0, #4
   1f3c4:	mov	r2, #9
   1f3c8:	str	r1, [r0, #20]
   1f3cc:	str	r1, [r0, #24]
   1f3d0:	str	r2, [r0, #28]
   1f3d4:	mov	r0, #28
   1f3d8:	mov	r1, r5
   1f3dc:	vst1.32	{d16-d17}, [r1], r0
   1f3e0:	mvn	r0, #0
   1f3e4:	str	r0, [r1]
   1f3e8:	cmp	r6, #0
   1f3ec:	mov	r4, r5
   1f3f0:	beq	1f444 <__assert_fail@plt+0xdf90>
   1f3f4:	ldr	r1, [r7, #64]	; 0x40
   1f3f8:	cmp	r1, #31
   1f3fc:	beq	1f554 <__assert_fail@plt+0xe0a0>
   1f400:	ldr	r0, [r7, #56]	; 0x38
   1f404:	add	r2, r1, #1
   1f408:	add	r4, r0, r1, lsl #5
   1f40c:	mov	r0, #0
   1f410:	mov	r1, #16
   1f414:	cmp	r5, #0
   1f418:	str	r2, [r7, #64]	; 0x40
   1f41c:	str	r0, [r4, #4]!
   1f420:	mvn	r2, #0
   1f424:	add	r3, r4, #20
   1f428:	str	r6, [r4, #4]
   1f42c:	str	r5, [r4, #8]
   1f430:	str	r0, [r4, #12]
   1f434:	str	r0, [r4, #16]
   1f438:	stm	r3, {r0, r1, r2}
   1f43c:	str	r4, [r6]
   1f440:	strne	r4, [r5]
   1f444:	ldr	r1, [r7, #64]	; 0x40
   1f448:	cmp	r1, #31
   1f44c:	beq	1f5d8 <__assert_fail@plt+0xe124>
   1f450:	ldr	r0, [r7, #56]	; 0x38
   1f454:	add	r2, r1, #1
   1f458:	add	r6, r0, r1, lsl #5
   1f45c:	mov	r0, #0
   1f460:	mov	r1, #16
   1f464:	cmp	sl, #0
   1f468:	str	r2, [r7, #64]	; 0x40
   1f46c:	str	r0, [r6, #4]!
   1f470:	mvn	r2, #0
   1f474:	add	r3, r6, #20
   1f478:	str	sl, [r6, #4]
   1f47c:	str	r4, [r6, #8]
   1f480:	str	r0, [r6, #12]
   1f484:	str	r0, [r6, #16]
   1f488:	stm	r3, {r0, r1, r2}
   1f48c:	strne	r6, [sl]
   1f490:	cmp	r4, #0
   1f494:	strne	r6, [r4]
   1f498:	cmp	r5, #0
   1f49c:	beq	1f4ac <__assert_fail@plt+0xdff8>
   1f4a0:	cmp	sl, #0
   1f4a4:	cmpne	r4, #0
   1f4a8:	bne	1f4c4 <__assert_fail@plt+0xe010>
   1f4ac:	mov	r0, #12
   1f4b0:	mov	r6, #0
   1f4b4:	str	r0, [r8]
   1f4b8:	mov	r0, r6
   1f4bc:	sub	sp, fp, #28
   1f4c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f4c4:	cmp	r6, #0
   1f4c8:	beq	1f4ac <__assert_fail@plt+0xdff8>
   1f4cc:	ldr	r0, [r9, #20]
   1f4d0:	str	r0, [r5, #20]
   1f4d4:	str	r0, [sl, #20]
   1f4d8:	ldr	r1, [r9, #24]
   1f4dc:	ldr	r0, [r5, #24]
   1f4e0:	lsr	r1, r1, #19
   1f4e4:	bfi	r0, r1, #19, #1
   1f4e8:	str	r0, [r5, #24]
   1f4ec:	ldr	r0, [sl, #24]
   1f4f0:	bfi	r0, r1, #19, #1
   1f4f4:	str	r0, [sl, #24]
   1f4f8:	mov	r0, r6
   1f4fc:	sub	sp, fp, #28
   1f500:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f504:	ldr	r0, [r9, #20]
   1f508:	cmp	r0, #31
   1f50c:	bgt	1f520 <__assert_fail@plt+0xe06c>
   1f510:	ldr	r1, [r7, #80]	; 0x50
   1f514:	mov	r2, #1
   1f518:	tst	r1, r2, lsl r0
   1f51c:	bne	1f350 <__assert_fail@plt+0xde9c>
   1f520:	mov	r0, r6
   1f524:	sub	sp, fp, #28
   1f528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f52c:	mov	r0, #996	; 0x3e4
   1f530:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1f534:	cmp	r0, #0
   1f538:	beq	1f57c <__assert_fail@plt+0xe0c8>
   1f53c:	ldr	r1, [r7, #56]	; 0x38
   1f540:	str	r1, [r0]
   1f544:	mov	r1, #0
   1f548:	str	r1, [r7, #64]	; 0x40
   1f54c:	str	r0, [r7, #56]	; 0x38
   1f550:	b	1f360 <__assert_fail@plt+0xdeac>
   1f554:	mov	r0, #996	; 0x3e4
   1f558:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1f55c:	cmp	r0, #0
   1f560:	beq	1f5c8 <__assert_fail@plt+0xe114>
   1f564:	ldr	r1, [r7, #56]	; 0x38
   1f568:	str	r1, [r0]
   1f56c:	mov	r1, #0
   1f570:	str	r1, [r7, #64]	; 0x40
   1f574:	str	r0, [r7, #56]	; 0x38
   1f578:	b	1f404 <__assert_fail@plt+0xdf50>
   1f57c:	mov	sl, #0
   1f580:	ldr	r1, [r7, #64]	; 0x40
   1f584:	cmp	r1, #31
   1f588:	bne	1f3a8 <__assert_fail@plt+0xdef4>
   1f58c:	mov	r0, #996	; 0x3e4
   1f590:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1f594:	cmp	r0, #0
   1f598:	beq	1f5b4 <__assert_fail@plt+0xe100>
   1f59c:	ldr	r1, [r7, #56]	; 0x38
   1f5a0:	str	r1, [r0]
   1f5a4:	mov	r1, #0
   1f5a8:	str	r1, [r7, #64]	; 0x40
   1f5ac:	str	r0, [r7, #56]	; 0x38
   1f5b0:	b	1f3ac <__assert_fail@plt+0xdef8>
   1f5b4:	mov	r5, #0
   1f5b8:	cmp	r6, #0
   1f5bc:	mov	r4, r5
   1f5c0:	bne	1f3f4 <__assert_fail@plt+0xdf40>
   1f5c4:	b	1f444 <__assert_fail@plt+0xdf90>
   1f5c8:	mov	r4, #0
   1f5cc:	ldr	r1, [r7, #64]	; 0x40
   1f5d0:	cmp	r1, #31
   1f5d4:	bne	1f450 <__assert_fail@plt+0xdf9c>
   1f5d8:	mov	r0, #996	; 0x3e4
   1f5dc:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1f5e0:	cmp	r0, #0
   1f5e4:	beq	1f600 <__assert_fail@plt+0xe14c>
   1f5e8:	ldr	r1, [r7, #56]	; 0x38
   1f5ec:	str	r1, [r0]
   1f5f0:	mov	r1, #0
   1f5f4:	str	r1, [r7, #64]	; 0x40
   1f5f8:	str	r0, [r7, #56]	; 0x38
   1f5fc:	b	1f454 <__assert_fail@plt+0xdfa0>
   1f600:	mov	r6, #0
   1f604:	cmp	r5, #0
   1f608:	bne	1f4a0 <__assert_fail@plt+0xdfec>
   1f60c:	b	1f4ac <__assert_fail@plt+0xdff8>
   1f610:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f614:	add	fp, sp, #28
   1f618:	sub	sp, sp, #12
   1f61c:	mov	r4, r0
   1f620:	ldr	r7, [r0, #4]
   1f624:	ldr	r0, [r0, #8]
   1f628:	mov	r5, r2
   1f62c:	mov	r9, r1
   1f630:	cmp	r0, r7
   1f634:	bcs	1f700 <__assert_fail@plt+0xe24c>
   1f638:	ldr	r1, [r4]
   1f63c:	str	r9, [r1, r0, lsl #3]!
   1f640:	str	r5, [r1, #4]
   1f644:	ldr	r0, [r4]
   1f648:	ldr	r1, [r4, #8]
   1f64c:	add	r0, r0, r1, lsl #3
   1f650:	ldr	r1, [r0, #4]
   1f654:	bfc	r1, #8, #10
   1f658:	str	r1, [r0, #4]
   1f65c:	uxtb	r1, r5
   1f660:	cmp	r1, #5
   1f664:	bne	1f678 <__assert_fail@plt+0xe1c4>
   1f668:	ldr	r2, [r4, #92]	; 0x5c
   1f66c:	mov	r0, #1048576	; 0x100000
   1f670:	cmp	r2, #1
   1f674:	bgt	1f688 <__assert_fail@plt+0xe1d4>
   1f678:	sub	r0, r1, #6
   1f67c:	clz	r0, r0
   1f680:	lsr	r0, r0, #5
   1f684:	lsl	r0, r0, #20
   1f688:	ldr	r1, [r4]
   1f68c:	ldr	r2, [r4, #8]
   1f690:	add	r1, r1, r2, lsl #3
   1f694:	ldr	r2, [r1, #4]
   1f698:	bic	r2, r2, #1048576	; 0x100000
   1f69c:	orr	r0, r2, r0
   1f6a0:	mvn	r2, #0
   1f6a4:	str	r0, [r1, #4]
   1f6a8:	ldr	r0, [r4, #8]
   1f6ac:	ldr	r1, [r4, #12]
   1f6b0:	str	r2, [r1, r0, lsl #2]
   1f6b4:	mov	r2, #0
   1f6b8:	ldr	r0, [r4, #8]
   1f6bc:	ldr	r1, [r4, #20]
   1f6c0:	add	r0, r0, r0, lsl #1
   1f6c4:	str	r2, [r1, r0, lsl #2]!
   1f6c8:	str	r2, [r1, #4]
   1f6cc:	str	r2, [r1, #8]
   1f6d0:	ldr	r0, [r4, #8]
   1f6d4:	ldr	r1, [r4, #24]
   1f6d8:	add	r0, r0, r0, lsl #1
   1f6dc:	str	r2, [r1, r0, lsl #2]!
   1f6e0:	str	r2, [r1, #4]
   1f6e4:	str	r2, [r1, #8]
   1f6e8:	ldr	r6, [r4, #8]
   1f6ec:	add	r0, r6, #1
   1f6f0:	str	r0, [r4, #8]
   1f6f4:	mov	r0, r6
   1f6f8:	sub	sp, fp, #28
   1f6fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f700:	movw	r0, #21845	; 0x5555
   1f704:	lsl	r1, r7, #1
   1f708:	mvn	r6, #0
   1f70c:	movt	r0, #5461	; 0x1555
   1f710:	cmp	r1, r0
   1f714:	bhi	1f6f4 <__assert_fail@plt+0xe240>
   1f718:	ldr	r0, [r4]
   1f71c:	str	r1, [sp, #8]
   1f720:	lsl	r1, r7, #4
   1f724:	bl	2ac90 <__assert_fail@plt+0x197dc>
   1f728:	cmp	r0, #0
   1f72c:	beq	1f6f4 <__assert_fail@plt+0xe240>
   1f730:	str	r0, [r4]
   1f734:	lsl	r8, r7, #3
   1f738:	ldr	r0, [r4, #12]
   1f73c:	mov	r1, r8
   1f740:	bl	2ac90 <__assert_fail@plt+0x197dc>
   1f744:	str	r0, [sp, #4]
   1f748:	ldr	r0, [r4, #16]
   1f74c:	mov	r1, r8
   1f750:	bl	2ac90 <__assert_fail@plt+0x197dc>
   1f754:	mov	r2, r0
   1f758:	ldr	r0, [r4, #20]
   1f75c:	add	r1, r7, r7, lsl #1
   1f760:	lsl	r8, r1, #3
   1f764:	mov	r7, r2
   1f768:	mov	r1, r8
   1f76c:	bl	2ac90 <__assert_fail@plt+0x197dc>
   1f770:	mov	sl, r0
   1f774:	ldr	r0, [r4, #24]
   1f778:	mov	r1, r8
   1f77c:	bl	2ac90 <__assert_fail@plt+0x197dc>
   1f780:	mov	r8, r0
   1f784:	ldr	r0, [sp, #4]
   1f788:	cmp	r0, #0
   1f78c:	beq	1f79c <__assert_fail@plt+0xe2e8>
   1f790:	cmp	r7, #0
   1f794:	cmpne	sl, #0
   1f798:	bne	1f7c4 <__assert_fail@plt+0xe310>
   1f79c:	bl	2ae28 <__assert_fail@plt+0x19974>
   1f7a0:	mov	r0, r7
   1f7a4:	bl	2ae28 <__assert_fail@plt+0x19974>
   1f7a8:	mov	r0, sl
   1f7ac:	bl	2ae28 <__assert_fail@plt+0x19974>
   1f7b0:	mov	r0, r8
   1f7b4:	bl	2ae28 <__assert_fail@plt+0x19974>
   1f7b8:	mov	r0, r6
   1f7bc:	sub	sp, fp, #28
   1f7c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f7c4:	cmp	r8, #0
   1f7c8:	beq	1f79c <__assert_fail@plt+0xe2e8>
   1f7cc:	add	r1, r4, #12
   1f7d0:	stm	r1, {r0, r7, sl}
   1f7d4:	str	r8, [r4, #24]
   1f7d8:	ldr	r0, [sp, #8]
   1f7dc:	str	r0, [r4, #4]
   1f7e0:	ldr	r0, [r4, #8]
   1f7e4:	b	1f638 <__assert_fail@plt+0xe184>
   1f7e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f7ec:	add	fp, sp, #28
   1f7f0:	sub	sp, sp, #44	; 0x2c
   1f7f4:	mov	r8, r0
   1f7f8:	ldr	r0, [r1, #20]
   1f7fc:	add	r4, r2, r2, lsl #1
   1f800:	mov	r5, r1
   1f804:	mov	r1, #0
   1f808:	mov	r9, r3
   1f80c:	mov	r6, r2
   1f810:	add	r0, r0, r4, lsl #2
   1f814:	ldr	r0, [r0, #4]
   1f818:	str	r1, [sp, #36]	; 0x24
   1f81c:	add	r0, r0, #1
   1f820:	str	r0, [sp, #32]
   1f824:	lsl	r0, r0, #2
   1f828:	bl	2ac60 <__assert_fail@plt+0x197ac>
   1f82c:	cmp	r0, #0
   1f830:	str	r0, [sp, #40]	; 0x28
   1f834:	beq	1f9fc <__assert_fail@plt+0xe548>
   1f838:	mov	r1, #1
   1f83c:	str	r6, [r0]
   1f840:	str	r1, [sp, #36]	; 0x24
   1f844:	mvn	r1, #0
   1f848:	ldr	r0, [r5, #24]
   1f84c:	add	r0, r0, r4, lsl #2
   1f850:	str	r1, [r0, #4]
   1f854:	ldr	r2, [r5]
   1f858:	add	r0, r2, r6, lsl #3
   1f85c:	ldr	r0, [r0, #4]
   1f860:	ubfx	r1, r0, #8, #10
   1f864:	cmp	r1, #0
   1f868:	beq	1f8c4 <__assert_fail@plt+0xe410>
   1f86c:	ldr	r3, [r5, #20]
   1f870:	add	r3, r3, r4, lsl #2
   1f874:	ldr	r7, [r3, #4]
   1f878:	cmp	r7, #0
   1f87c:	beq	1f8c4 <__assert_fail@plt+0xe410>
   1f880:	ldr	r3, [r3, #8]
   1f884:	ldr	r3, [r3]
   1f888:	add	r2, r2, r3, lsl #3
   1f88c:	ldrb	r2, [r2, #6]
   1f890:	tst	r2, #4
   1f894:	bne	1f8c4 <__assert_fail@plt+0xe410>
   1f898:	str	r1, [sp]
   1f89c:	mov	r0, r5
   1f8a0:	mov	r1, r6
   1f8a4:	mov	r2, r6
   1f8a8:	mov	r3, r6
   1f8ac:	bl	1fa08 <__assert_fail@plt+0xe554>
   1f8b0:	cmp	r0, #0
   1f8b4:	bne	1f9f4 <__assert_fail@plt+0xe540>
   1f8b8:	ldr	r0, [r5]
   1f8bc:	add	r0, r0, r6, lsl #3
   1f8c0:	ldr	r0, [r0, #4]
   1f8c4:	tst	r0, #8
   1f8c8:	beq	1f9c8 <__assert_fail@plt+0xe514>
   1f8cc:	ldr	r0, [r5, #20]
   1f8d0:	add	r1, r0, r4, lsl #2
   1f8d4:	ldr	r1, [r1, #4]
   1f8d8:	cmp	r1, #1
   1f8dc:	blt	1f9c8 <__assert_fail@plt+0xe514>
   1f8e0:	str	r8, [sp, #12]
   1f8e4:	mov	r8, #0
   1f8e8:	add	r7, sp, #16
   1f8ec:	add	sl, sp, #32
   1f8f0:	mov	r6, #0
   1f8f4:	str	r9, [sp, #8]
   1f8f8:	add	r0, r0, r4, lsl #2
   1f8fc:	ldr	r0, [r0, #8]
   1f900:	ldr	r2, [r0, r6, lsl #2]
   1f904:	ldr	r0, [r5, #24]
   1f908:	add	r9, r2, r2, lsl #1
   1f90c:	add	r0, r0, r9, lsl #2
   1f910:	ldr	r1, [r0, #4]
   1f914:	cmn	r1, #1
   1f918:	beq	1f980 <__assert_fail@plt+0xe4cc>
   1f91c:	cmp	r1, #0
   1f920:	bne	1f940 <__assert_fail@plt+0xe48c>
   1f924:	mov	r0, r7
   1f928:	mov	r1, r5
   1f92c:	mov	r3, #0
   1f930:	bl	1f7e8 <__assert_fail@plt+0xe334>
   1f934:	cmp	r0, #0
   1f938:	beq	1f950 <__assert_fail@plt+0xe49c>
   1f93c:	b	1f9f4 <__assert_fail@plt+0xe540>
   1f940:	vldr	d16, [r0]
   1f944:	ldr	r0, [r0, #8]
   1f948:	str	r0, [sp, #24]
   1f94c:	vstr	d16, [sp, #16]
   1f950:	mov	r0, sl
   1f954:	mov	r1, r7
   1f958:	bl	1fecc <__assert_fail@plt+0xea18>
   1f95c:	cmp	r0, #0
   1f960:	bne	1f9f4 <__assert_fail@plt+0xe540>
   1f964:	ldr	r0, [r5, #24]
   1f968:	add	r0, r0, r9, lsl #2
   1f96c:	ldr	r0, [r0, #4]
   1f970:	cmp	r0, #0
   1f974:	bne	1f984 <__assert_fail@plt+0xe4d0>
   1f978:	ldr	r0, [sp, #24]
   1f97c:	bl	2ae28 <__assert_fail@plt+0x19974>
   1f980:	mov	r8, #1
   1f984:	ldr	r0, [r5, #20]
   1f988:	add	r6, r6, #1
   1f98c:	add	r1, r0, r4, lsl #2
   1f990:	ldr	r1, [r1, #4]
   1f994:	cmp	r6, r1
   1f998:	blt	1f8f8 <__assert_fail@plt+0xe444>
   1f99c:	tst	r8, #1
   1f9a0:	ldr	r8, [sp, #12]
   1f9a4:	ldr	r0, [sp, #8]
   1f9a8:	beq	1f9c8 <__assert_fail@plt+0xe514>
   1f9ac:	cmp	r0, #0
   1f9b0:	bne	1f9c8 <__assert_fail@plt+0xe514>
   1f9b4:	ldr	r0, [r5, #24]
   1f9b8:	mov	r1, #0
   1f9bc:	add	r0, r0, r4, lsl #2
   1f9c0:	str	r1, [r0, #4]
   1f9c4:	b	1f9e0 <__assert_fail@plt+0xe52c>
   1f9c8:	ldr	r0, [r5, #24]
   1f9cc:	vldr	d16, [sp, #32]
   1f9d0:	ldr	r1, [sp, #40]	; 0x28
   1f9d4:	add	r0, r0, r4, lsl #2
   1f9d8:	str	r1, [r0, #8]
   1f9dc:	vstr	d16, [r0]
   1f9e0:	ldr	r0, [sp, #40]	; 0x28
   1f9e4:	vldr	d16, [sp, #32]
   1f9e8:	str	r0, [r8, #8]
   1f9ec:	mov	r0, #0
   1f9f0:	vstr	d16, [r8]
   1f9f4:	sub	sp, fp, #28
   1f9f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f9fc:	mov	r0, #12
   1fa00:	sub	sp, fp, #28
   1fa04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fa08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa0c:	add	fp, sp, #28
   1fa10:	sub	sp, sp, #20
   1fa14:	mov	r9, r0
   1fa18:	ldr	r0, [fp, #8]
   1fa1c:	mov	sl, r2
   1fa20:	mov	r8, r1
   1fa24:	str	r3, [sp, #8]
   1fa28:	str	r0, [sp, #16]
   1fa2c:	ldr	r2, [r9]
   1fa30:	add	r3, r2, r8, lsl #3
   1fa34:	ldrb	r0, [r3, #4]!
   1fa38:	cmp	r0, #4
   1fa3c:	bne	1fb2c <__assert_fail@plt+0xe678>
   1fa40:	ldr	r0, [r9, #12]
   1fa44:	ldr	r1, [r9, #20]
   1fa48:	add	r6, sl, sl, lsl #1
   1fa4c:	ldr	r4, [r0, r8, lsl #2]
   1fa50:	add	r0, r1, r6, lsl #2
   1fa54:	mov	r1, #0
   1fa58:	str	r1, [r0, #4]
   1fa5c:	mov	r0, r9
   1fa60:	ldr	r1, [r2, r4, lsl #3]!
   1fa64:	ldr	r2, [r2, #4]
   1fa68:	bl	1f610 <__assert_fail@plt+0xe15c>
   1fa6c:	mov	r7, r0
   1fa70:	mov	r0, #12
   1fa74:	cmn	r7, #1
   1fa78:	str	r0, [sp, #12]
   1fa7c:	beq	1fea0 <__assert_fail@plt+0xe9ec>
   1fa80:	ldr	r1, [r9]
   1fa84:	movw	r0, #65280	; 0xff00
   1fa88:	movw	r3, #255	; 0xff
   1fa8c:	movt	r0, #3
   1fa90:	movt	r3, #65532	; 0xfffc
   1fa94:	mov	ip, r0
   1fa98:	ldr	r0, [sp, #16]
   1fa9c:	add	r1, r1, r7, lsl #3
   1faa0:	ldr	r2, [r1, #4]
   1faa4:	and	r0, ip, r0, lsl #8
   1faa8:	and	r2, r2, r3
   1faac:	orr	r0, r2, r0
   1fab0:	str	r0, [r1, #4]
   1fab4:	ldr	r0, [r9]
   1fab8:	add	r1, r0, r4, lsl #3
   1fabc:	add	r0, r0, r7, lsl #3
   1fac0:	ldr	r1, [r1, #4]
   1fac4:	ldr	r2, [r0, #4]
   1fac8:	and	r1, r1, ip
   1facc:	orr	r1, r1, r2
   1fad0:	str	r1, [r0, #4]
   1fad4:	ldr	r0, [r9]
   1fad8:	add	r0, r0, r7, lsl #3
   1fadc:	ldr	r1, [r0, #4]
   1fae0:	orr	r1, r1, #262144	; 0x40000
   1fae4:	str	r1, [r0, #4]
   1fae8:	ldr	r0, [r9, #16]
   1faec:	str	r4, [r0, r7, lsl #2]
   1faf0:	ldr	r0, [r9, #12]
   1faf4:	ldr	r1, [r0, r8, lsl #2]
   1faf8:	str	r1, [r0, sl, lsl #2]
   1fafc:	mov	r1, r7
   1fb00:	ldr	r0, [r9, #20]
   1fb04:	add	r0, r0, r6, lsl #2
   1fb08:	bl	20074 <__assert_fail@plt+0xebc0>
   1fb0c:	mov	r1, #0
   1fb10:	cmp	r0, #0
   1fb14:	mov	r8, r4
   1fb18:	mov	sl, r7
   1fb1c:	beq	1fea0 <__assert_fail@plt+0xe9ec>
   1fb20:	cmp	r1, #0
   1fb24:	beq	1fa2c <__assert_fail@plt+0xe578>
   1fb28:	b	1fe90 <__assert_fail@plt+0xe9dc>
   1fb2c:	ldr	r0, [r9, #20]
   1fb30:	add	ip, r8, r8, lsl #1
   1fb34:	add	r7, r0, ip, lsl #2
   1fb38:	ldr	r1, [r7, #4]
   1fb3c:	cmp	r1, #0
   1fb40:	beq	1feac <__assert_fail@plt+0xe9f8>
   1fb44:	ldr	r7, [r7, #8]
   1fb48:	add	r6, sl, sl, lsl #1
   1fb4c:	cmp	r1, #1
   1fb50:	add	r0, r0, r6, lsl #2
   1fb54:	ldr	r5, [r7]
   1fb58:	mov	r7, #0
   1fb5c:	str	r7, [r0, #4]
   1fb60:	bne	1fb9c <__assert_fail@plt+0xe6e8>
   1fb64:	ldr	r1, [sp, #8]
   1fb68:	cmp	r8, r1
   1fb6c:	bne	1fd9c <__assert_fail@plt+0xe8e8>
   1fb70:	cmp	sl, r8
   1fb74:	beq	1fd9c <__assert_fail@plt+0xe8e8>
   1fb78:	mov	r1, r5
   1fb7c:	bl	20074 <__assert_fail@plt+0xebc0>
   1fb80:	ldr	r8, [sp, #8]
   1fb84:	cmp	r0, #0
   1fb88:	mov	r1, #1
   1fb8c:	movwne	r1, #2
   1fb90:	cmp	r1, #0
   1fb94:	beq	1fa2c <__assert_fail@plt+0xe578>
   1fb98:	b	1fe90 <__assert_fail@plt+0xe9dc>
   1fb9c:	ldr	r1, [r9, #8]
   1fba0:	ldr	r8, [sp, #16]
   1fba4:	str	r6, [sp, #4]
   1fba8:	sub	r3, r1, #1
   1fbac:	cmp	r3, #1
   1fbb0:	blt	1fc00 <__assert_fail@plt+0xe74c>
   1fbb4:	add	r3, r2, r3, lsl #3
   1fbb8:	ldr	r6, [r3, #4]
   1fbbc:	ands	r3, r6, #262144	; 0x40000
   1fbc0:	beq	1fc00 <__assert_fail@plt+0xe74c>
   1fbc4:	ldr	r4, [r9, #16]
   1fbc8:	sub	r3, r2, #12
   1fbcc:	sub	r4, r4, #4
   1fbd0:	ldr	r7, [r4, r1, lsl #2]
   1fbd4:	cmp	r7, r5
   1fbd8:	ubfxeq	r7, r6, #8, #10
   1fbdc:	cmpeq	r7, r8
   1fbe0:	beq	1fe64 <__assert_fail@plt+0xe9b0>
   1fbe4:	sub	r7, r1, #2
   1fbe8:	cmp	r7, #1
   1fbec:	blt	1fc00 <__assert_fail@plt+0xe74c>
   1fbf0:	ldr	r6, [r3, r1, lsl #3]
   1fbf4:	sub	r1, r1, #1
   1fbf8:	ands	r7, r6, #262144	; 0x40000
   1fbfc:	bne	1fbd0 <__assert_fail@plt+0xe71c>
   1fc00:	ldr	r1, [r2, r5, lsl #3]!
   1fc04:	mov	r0, r9
   1fc08:	mov	sl, ip
   1fc0c:	ldr	r2, [r2, #4]
   1fc10:	bl	1f610 <__assert_fail@plt+0xe15c>
   1fc14:	mov	r4, r0
   1fc18:	mov	r0, #12
   1fc1c:	cmn	r4, #1
   1fc20:	str	r0, [sp, #12]
   1fc24:	beq	1fea0 <__assert_fail@plt+0xe9ec>
   1fc28:	ldr	r1, [r9]
   1fc2c:	movw	r0, #65280	; 0xff00
   1fc30:	movw	r7, #255	; 0xff
   1fc34:	ldr	r6, [sp, #4]
   1fc38:	movt	r0, #3
   1fc3c:	movt	r7, #65532	; 0xfffc
   1fc40:	mov	r3, r0
   1fc44:	and	r0, r0, r8, lsl #8
   1fc48:	add	r1, r1, r4, lsl #3
   1fc4c:	ldr	r2, [r1, #4]
   1fc50:	and	r2, r2, r7
   1fc54:	orr	r0, r2, r0
   1fc58:	str	r0, [r1, #4]
   1fc5c:	ldr	r0, [r9]
   1fc60:	add	r1, r0, r5, lsl #3
   1fc64:	add	r0, r0, r4, lsl #3
   1fc68:	ldr	r1, [r1, #4]
   1fc6c:	ldr	r2, [r0, #4]
   1fc70:	and	r1, r1, r3
   1fc74:	orr	r1, r1, r2
   1fc78:	str	r1, [r0, #4]
   1fc7c:	ldr	r0, [r9]
   1fc80:	add	r0, r0, r4, lsl #3
   1fc84:	ldr	r1, [r0, #4]
   1fc88:	orr	r1, r1, #262144	; 0x40000
   1fc8c:	str	r1, [r0, #4]
   1fc90:	mov	r1, r4
   1fc94:	ldr	r0, [r9, #16]
   1fc98:	str	r5, [r0, r4, lsl #2]
   1fc9c:	ldr	r0, [r9, #20]
   1fca0:	add	r0, r0, r6, lsl #2
   1fca4:	bl	20074 <__assert_fail@plt+0xebc0>
   1fca8:	cmp	r0, #0
   1fcac:	beq	1fea0 <__assert_fail@plt+0xe9ec>
   1fcb0:	ldr	r0, [sp, #16]
   1fcb4:	ldr	r3, [sp, #8]
   1fcb8:	mov	r1, r5
   1fcbc:	mov	r2, r4
   1fcc0:	str	r0, [sp]
   1fcc4:	mov	r0, r9
   1fcc8:	bl	1fa08 <__assert_fail@plt+0xe554>
   1fccc:	cmp	r0, #0
   1fcd0:	bne	1febc <__assert_fail@plt+0xea08>
   1fcd4:	ldr	r1, [r9, #20]
   1fcd8:	ldr	r0, [r9]
   1fcdc:	add	r1, r1, sl, lsl #2
   1fce0:	ldr	r1, [r1, #8]
   1fce4:	ldr	r8, [r1, #4]
   1fce8:	ldr	r1, [r0, r8, lsl #3]!
   1fcec:	ldr	r2, [r0, #4]
   1fcf0:	mov	r0, r9
   1fcf4:	bl	1f610 <__assert_fail@plt+0xe15c>
   1fcf8:	mov	sl, r0
   1fcfc:	mov	r0, #12
   1fd00:	cmn	sl, #1
   1fd04:	str	r0, [sp, #12]
   1fd08:	beq	1fea0 <__assert_fail@plt+0xe9ec>
   1fd0c:	ldr	r1, [r9]
   1fd10:	movw	r0, #65280	; 0xff00
   1fd14:	movw	r7, #255	; 0xff
   1fd18:	movt	r0, #3
   1fd1c:	movt	r7, #65532	; 0xfffc
   1fd20:	mov	r3, r0
   1fd24:	ldr	r0, [sp, #16]
   1fd28:	add	r1, r1, sl, lsl #3
   1fd2c:	ldr	r2, [r1, #4]
   1fd30:	and	r0, r3, r0, lsl #8
   1fd34:	and	r2, r2, r7
   1fd38:	orr	r0, r2, r0
   1fd3c:	str	r0, [r1, #4]
   1fd40:	ldr	r0, [r9]
   1fd44:	add	r1, r0, r8, lsl #3
   1fd48:	add	r0, r0, sl, lsl #3
   1fd4c:	ldr	r1, [r1, #4]
   1fd50:	ldr	r2, [r0, #4]
   1fd54:	and	r1, r1, r3
   1fd58:	orr	r1, r1, r2
   1fd5c:	str	r1, [r0, #4]
   1fd60:	ldr	r0, [r9]
   1fd64:	add	r0, r0, sl, lsl #3
   1fd68:	ldr	r1, [r0, #4]
   1fd6c:	orr	r1, r1, #262144	; 0x40000
   1fd70:	str	r1, [r0, #4]
   1fd74:	mov	r1, sl
   1fd78:	ldr	r0, [r9, #16]
   1fd7c:	str	r8, [r0, sl, lsl #2]
   1fd80:	ldr	r0, [r9, #20]
   1fd84:	add	r0, r0, r6, lsl #2
   1fd88:	bl	20074 <__assert_fail@plt+0xebc0>
   1fd8c:	mov	r1, #0
   1fd90:	cmp	r0, #0
   1fd94:	bne	1fb20 <__assert_fail@plt+0xe66c>
   1fd98:	b	1fea0 <__assert_fail@plt+0xe9ec>
   1fd9c:	ldr	r1, [r2, r5, lsl #3]!
   1fda0:	ldr	r4, [r3]
   1fda4:	mov	r0, r9
   1fda8:	ldr	r2, [r2, #4]
   1fdac:	bl	1f610 <__assert_fail@plt+0xe15c>
   1fdb0:	mov	sl, r0
   1fdb4:	ubfx	r0, r4, #8, #10
   1fdb8:	mov	r1, #12
   1fdbc:	cmn	sl, #1
   1fdc0:	str	r1, [sp, #12]
   1fdc4:	beq	1fea0 <__assert_fail@plt+0xe9ec>
   1fdc8:	ldr	r1, [sp, #16]
   1fdcc:	movw	r7, #255	; 0xff
   1fdd0:	movt	r7, #65532	; 0xfffc
   1fdd4:	orr	r1, r0, r1
   1fdd8:	movw	r0, #65280	; 0xff00
   1fddc:	movt	r0, #3
   1fde0:	str	r1, [sp, #16]
   1fde4:	mov	r3, r0
   1fde8:	and	r0, r0, r1, lsl #8
   1fdec:	ldr	r1, [r9]
   1fdf0:	add	r1, r1, sl, lsl #3
   1fdf4:	ldr	r2, [r1, #4]
   1fdf8:	and	r2, r2, r7
   1fdfc:	orr	r0, r2, r0
   1fe00:	str	r0, [r1, #4]
   1fe04:	ldr	r0, [r9]
   1fe08:	add	r1, r0, r5, lsl #3
   1fe0c:	add	r0, r0, sl, lsl #3
   1fe10:	ldr	r1, [r1, #4]
   1fe14:	ldr	r2, [r0, #4]
   1fe18:	and	r1, r1, r3
   1fe1c:	orr	r1, r1, r2
   1fe20:	str	r1, [r0, #4]
   1fe24:	ldr	r0, [r9]
   1fe28:	add	r0, r0, sl, lsl #3
   1fe2c:	ldr	r1, [r0, #4]
   1fe30:	orr	r1, r1, #262144	; 0x40000
   1fe34:	str	r1, [r0, #4]
   1fe38:	mov	r1, sl
   1fe3c:	ldr	r0, [r9, #16]
   1fe40:	str	r5, [r0, sl, lsl #2]
   1fe44:	ldr	r0, [r9, #20]
   1fe48:	add	r0, r0, r6, lsl #2
   1fe4c:	bl	20074 <__assert_fail@plt+0xebc0>
   1fe50:	mov	r1, #0
   1fe54:	cmp	r0, #0
   1fe58:	mov	r8, r5
   1fe5c:	bne	1fb20 <__assert_fail@plt+0xe66c>
   1fe60:	b	1fea0 <__assert_fail@plt+0xe9ec>
   1fe64:	sub	r1, r1, #1
   1fe68:	mov	sl, ip
   1fe6c:	bl	20074 <__assert_fail@plt+0xebc0>
   1fe70:	ldr	r6, [sp, #4]
   1fe74:	cmp	r0, #0
   1fe78:	bne	1fcd4 <__assert_fail@plt+0xe820>
   1fe7c:	mov	r0, #12
   1fe80:	str	r0, [sp, #12]
   1fe84:	ldr	r0, [sp, #12]
   1fe88:	sub	sp, fp, #28
   1fe8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe90:	mov	r0, #12
   1fe94:	cmp	r1, #2
   1fe98:	str	r0, [sp, #12]
   1fe9c:	beq	1feb8 <__assert_fail@plt+0xea04>
   1fea0:	ldr	r0, [sp, #12]
   1fea4:	sub	sp, fp, #28
   1fea8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1feac:	ldr	r0, [r9, #12]
   1feb0:	ldr	r1, [r0, r8, lsl #2]
   1feb4:	str	r1, [r0, sl, lsl #2]
   1feb8:	mov	r0, #0
   1febc:	str	r0, [sp, #12]
   1fec0:	ldr	r0, [sp, #12]
   1fec4:	sub	sp, fp, #28
   1fec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fecc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1fed0:	add	fp, sp, #24
   1fed4:	mov	r8, #0
   1fed8:	cmp	r1, #0
   1fedc:	beq	2004c <__assert_fail@plt+0xeb98>
   1fee0:	mov	r5, r0
   1fee4:	ldr	r0, [r1, #4]
   1fee8:	mov	r9, r1
   1feec:	cmp	r0, #0
   1fef0:	beq	2004c <__assert_fail@plt+0xeb98>
   1fef4:	ldr	r1, [r5, #4]
   1fef8:	ldr	r2, [r5]
   1fefc:	add	r3, r1, r0, lsl #1
   1ff00:	cmp	r2, r3
   1ff04:	bge	1ff34 <__assert_fail@plt+0xea80>
   1ff08:	add	r7, r2, r0
   1ff0c:	ldr	r0, [r5, #8]
   1ff10:	lsl	r1, r7, #3
   1ff14:	bl	2ac90 <__assert_fail@plt+0x197dc>
   1ff18:	cmp	r0, #0
   1ff1c:	beq	20068 <__assert_fail@plt+0xebb4>
   1ff20:	str	r0, [r5, #8]
   1ff24:	lsl	r0, r7, #1
   1ff28:	str	r0, [r5]
   1ff2c:	ldr	r1, [r5, #4]
   1ff30:	ldr	r0, [r9, #4]
   1ff34:	cmp	r1, #0
   1ff38:	beq	20054 <__assert_fail@plt+0xeba0>
   1ff3c:	add	r7, r1, r0, lsl #1
   1ff40:	sub	r1, r1, #1
   1ff44:	sub	r0, r0, #1
   1ff48:	orr	r2, r0, r1
   1ff4c:	cmp	r2, #0
   1ff50:	blt	1ffb4 <__assert_fail@plt+0xeb00>
   1ff54:	ldr	r2, [r9, #8]
   1ff58:	ldr	r3, [r5, #8]
   1ff5c:	ldr	r4, [r2, r0, lsl #2]
   1ff60:	ldr	r6, [r3, r1, lsl #2]
   1ff64:	cmp	r6, r4
   1ff68:	bne	1ff84 <__assert_fail@plt+0xead0>
   1ff6c:	sub	r1, r1, #1
   1ff70:	sub	r0, r0, #1
   1ff74:	orr	r6, r0, r1
   1ff78:	cmn	r6, #1
   1ff7c:	bgt	1ff5c <__assert_fail@plt+0xeaa8>
   1ff80:	b	1ffb4 <__assert_fail@plt+0xeb00>
   1ff84:	bge	1ffa4 <__assert_fail@plt+0xeaf0>
   1ff88:	sub	r7, r7, #1
   1ff8c:	sub	r0, r0, #1
   1ff90:	str	r4, [r3, r7, lsl #2]
   1ff94:	orr	r6, r0, r1
   1ff98:	cmn	r6, #1
   1ff9c:	bgt	1ff5c <__assert_fail@plt+0xeaa8>
   1ffa0:	b	1ffb4 <__assert_fail@plt+0xeb00>
   1ffa4:	sub	r1, r1, #1
   1ffa8:	orr	r6, r0, r1
   1ffac:	cmn	r6, #1
   1ffb0:	bgt	1ff5c <__assert_fail@plt+0xeaa8>
   1ffb4:	cmp	r0, #0
   1ffb8:	blt	1ffd8 <__assert_fail@plt+0xeb24>
   1ffbc:	add	r2, r0, #1
   1ffc0:	ldr	r0, [r5, #8]
   1ffc4:	ldr	r1, [r9, #8]
   1ffc8:	sub	r7, r7, r2
   1ffcc:	lsl	r2, r2, #2
   1ffd0:	add	r0, r0, r7, lsl #2
   1ffd4:	bl	1125c <memcpy@plt>
   1ffd8:	ldr	r0, [r5, #4]
   1ffdc:	ldr	r2, [r9, #4]
   1ffe0:	sub	r1, r0, #1
   1ffe4:	add	r3, r1, r2, lsl #1
   1ffe8:	sub	r2, r3, r7
   1ffec:	adds	r2, r2, #1
   1fff0:	beq	2004c <__assert_fail@plt+0xeb98>
   1fff4:	add	r0, r2, r0
   1fff8:	str	r0, [r5, #4]
   1fffc:	ldr	r0, [r5, #8]
   20000:	ldr	r6, [r0, r1, lsl #2]
   20004:	ldr	r5, [r0, r3, lsl #2]
   20008:	cmp	r5, r6
   2000c:	ble	20028 <__assert_fail@plt+0xeb74>
   20010:	add	r6, r2, r1
   20014:	subs	r2, r2, #1
   20018:	sub	r3, r3, #1
   2001c:	str	r5, [r0, r6, lsl #2]
   20020:	bne	20000 <__assert_fail@plt+0xeb4c>
   20024:	b	2004c <__assert_fail@plt+0xeb98>
   20028:	add	r5, r2, r1
   2002c:	cmp	r1, #0
   20030:	str	r6, [r0, r5, lsl #2]
   20034:	sub	r6, r1, #1
   20038:	mov	r1, r6
   2003c:	bgt	20000 <__assert_fail@plt+0xeb4c>
   20040:	add	r1, r0, r7, lsl #2
   20044:	lsl	r2, r2, #2
   20048:	bl	1125c <memcpy@plt>
   2004c:	mov	r0, r8
   20050:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20054:	str	r0, [r5, #4]
   20058:	ldr	r0, [r5, #8]
   2005c:	ldr	r2, [r9, #4]
   20060:	ldr	r1, [r9, #8]
   20064:	b	20044 <__assert_fail@plt+0xeb90>
   20068:	mov	r8, #12
   2006c:	mov	r0, r8
   20070:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20074:	push	{r4, r5, r6, sl, fp, lr}
   20078:	add	fp, sp, #16
   2007c:	ldr	r2, [r0]
   20080:	mov	r5, r1
   20084:	mov	r4, r0
   20088:	cmp	r2, #0
   2008c:	beq	200bc <__assert_fail@plt+0xec08>
   20090:	ldr	r1, [r4, #4]
   20094:	cmp	r1, #0
   20098:	bne	200f8 <__assert_fail@plt+0xec44>
   2009c:	ldr	r0, [r4, #8]
   200a0:	str	r5, [r0]
   200a4:	ldr	r0, [r4, #4]
   200a8:	mov	r6, #1
   200ac:	add	r0, r0, #1
   200b0:	str	r0, [r4, #4]
   200b4:	mov	r0, r6
   200b8:	pop	{r4, r5, r6, sl, fp, pc}
   200bc:	mov	r6, #1
   200c0:	mov	r0, #4
   200c4:	str	r6, [r4]
   200c8:	str	r6, [r4, #4]
   200cc:	bl	2ac60 <__assert_fail@plt+0x197ac>
   200d0:	cmp	r0, #0
   200d4:	str	r0, [r4, #8]
   200d8:	strne	r5, [r0]
   200dc:	movne	r0, r6
   200e0:	popne	{r4, r5, r6, sl, fp, pc}
   200e4:	mov	r6, #0
   200e8:	mov	r0, r6
   200ec:	str	r6, [r4]
   200f0:	str	r6, [r4, #4]
   200f4:	pop	{r4, r5, r6, sl, fp, pc}
   200f8:	cmp	r2, r1
   200fc:	bne	20134 <__assert_fail@plt+0xec80>
   20100:	lsl	r0, r2, #1
   20104:	lsl	r1, r2, #3
   20108:	str	r0, [r4]
   2010c:	ldr	r0, [r4, #8]
   20110:	bl	2ac90 <__assert_fail@plt+0x197dc>
   20114:	cmp	r0, #0
   20118:	beq	201b0 <__assert_fail@plt+0xecfc>
   2011c:	str	r0, [r4, #8]
   20120:	ldr	r1, [r4, #4]
   20124:	ldr	r2, [r0]
   20128:	cmp	r2, r5
   2012c:	bgt	20144 <__assert_fail@plt+0xec90>
   20130:	b	20178 <__assert_fail@plt+0xecc4>
   20134:	ldr	r0, [r4, #8]
   20138:	ldr	r2, [r0]
   2013c:	cmp	r2, r5
   20140:	ble	20178 <__assert_fail@plt+0xecc4>
   20144:	cmp	r1, #1
   20148:	blt	201a8 <__assert_fail@plt+0xecf4>
   2014c:	add	r2, r0, r1, lsl #2
   20150:	add	r1, r1, #1
   20154:	mov	r3, r2
   20158:	ldr	r6, [r3, #-4]!
   2015c:	sub	r1, r1, #1
   20160:	cmp	r1, #1
   20164:	str	r6, [r2]
   20168:	mov	r2, r3
   2016c:	bgt	20158 <__assert_fail@plt+0xeca4>
   20170:	sub	r1, r1, #1
   20174:	b	201a8 <__assert_fail@plt+0xecf4>
   20178:	add	r2, r0, r1, lsl #2
   2017c:	ldr	r3, [r2, #-4]
   20180:	cmp	r3, r5
   20184:	ble	201a8 <__assert_fail@plt+0xecf4>
   20188:	sub	r1, r1, #2
   2018c:	str	r3, [r2]
   20190:	sub	r1, r1, #1
   20194:	ldr	r3, [r2, #-8]
   20198:	sub	r2, r2, #4
   2019c:	cmp	r3, r5
   201a0:	bgt	2018c <__assert_fail@plt+0xecd8>
   201a4:	add	r1, r1, #2
   201a8:	str	r5, [r0, r1, lsl #2]
   201ac:	b	200a4 <__assert_fail@plt+0xebf0>
   201b0:	mov	r6, #0
   201b4:	mov	r0, r6
   201b8:	pop	{r4, r5, r6, sl, fp, pc}
   201bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   201c0:	add	fp, sp, #28
   201c4:	sub	sp, sp, #28
   201c8:	ldr	lr, [r2, #4]
   201cc:	mov	sl, r0
   201d0:	cmp	lr, #0
   201d4:	beq	20378 <__assert_fail@plt+0xeec4>
   201d8:	mov	r9, r3
   201dc:	add	r7, lr, r3
   201e0:	cmp	lr, #1
   201e4:	str	r2, [sp, #20]
   201e8:	blt	20258 <__assert_fail@plt+0xeda4>
   201ec:	ldr	r6, [r2, #8]
   201f0:	mov	r2, #0
   201f4:	cmp	lr, #4
   201f8:	bcc	20240 <__assert_fail@plt+0xed8c>
   201fc:	mov	r0, #0
   20200:	bic	r2, lr, #3
   20204:	vdup.32	q8, r0
   20208:	mov	r3, r2
   2020c:	mov	r0, r6
   20210:	vmov.32	d16[0], r7
   20214:	vld1.32	{d18-d19}, [r0]!
   20218:	subs	r3, r3, #4
   2021c:	vadd.i32	q8, q9, q8
   20220:	bne	20214 <__assert_fail@plt+0xed60>
   20224:	vext.8	q9, q8, q8, #8
   20228:	cmp	lr, r2
   2022c:	vadd.i32	q8, q8, q9
   20230:	vdup.32	q9, d16[1]
   20234:	vadd.i32	q8, q8, q9
   20238:	vmov.32	r7, d16[0]
   2023c:	beq	20258 <__assert_fail@plt+0xeda4>
   20240:	add	r0, r6, r2, lsl #2
   20244:	sub	r2, lr, r2
   20248:	ldr	r3, [r0], #4
   2024c:	subs	r2, r2, #1
   20250:	add	r7, r3, r7
   20254:	bne	20248 <__assert_fail@plt+0xed94>
   20258:	ldr	r2, [r1, #32]
   2025c:	str	r1, [sp, #12]
   20260:	ldr	r1, [r1, #68]	; 0x44
   20264:	and	r1, r1, r7
   20268:	add	r3, r1, r1, lsl #1
   2026c:	ldr	r1, [r2, r3, lsl #2]
   20270:	cmp	r1, #1
   20274:	blt	20308 <__assert_fail@plt+0xee54>
   20278:	ldr	r0, [sp, #20]
   2027c:	cmp	r0, #0
   20280:	beq	20308 <__assert_fail@plt+0xee54>
   20284:	add	r2, r2, r3, lsl #2
   20288:	sub	ip, lr, #1
   2028c:	mov	r6, #0
   20290:	ldr	r2, [r2, #8]
   20294:	ldr	r8, [r2, r6, lsl #2]
   20298:	ldr	r3, [r8]
   2029c:	cmp	r3, r7
   202a0:	bne	202fc <__assert_fail@plt+0xee48>
   202a4:	ldrb	r3, [r8, #52]	; 0x34
   202a8:	and	r3, r3, #15
   202ac:	cmp	r3, r9
   202b0:	bne	202fc <__assert_fail@plt+0xee48>
   202b4:	ldr	r4, [r8, #40]	; 0x28
   202b8:	cmp	r4, #0
   202bc:	beq	202fc <__assert_fail@plt+0xee48>
   202c0:	ldr	r3, [r4, #4]
   202c4:	cmp	r3, lr
   202c8:	bne	202fc <__assert_fail@plt+0xee48>
   202cc:	mov	r3, ip
   202d0:	add	r5, r3, #1
   202d4:	cmp	r5, #1
   202d8:	blt	20b18 <__assert_fail@plt+0xf664>
   202dc:	ldr	r0, [sp, #20]
   202e0:	ldr	r5, [r0, #8]
   202e4:	ldr	r0, [r4, #8]
   202e8:	ldr	r5, [r5, r3, lsl #2]
   202ec:	ldr	r0, [r0, r3, lsl #2]
   202f0:	sub	r3, r3, #1
   202f4:	cmp	r0, r5
   202f8:	beq	202d0 <__assert_fail@plt+0xee1c>
   202fc:	add	r6, r6, #1
   20300:	cmp	r6, r1
   20304:	blt	20294 <__assert_fail@plt+0xede0>
   20308:	mov	r0, #56	; 0x38
   2030c:	mov	r1, #1
   20310:	bl	2ac0c <__assert_fail@plt+0x19758>
   20314:	cmp	r0, #0
   20318:	beq	20b50 <__assert_fail@plt+0xf69c>
   2031c:	ldr	ip, [sp, #20]
   20320:	str	sl, [sp]
   20324:	add	lr, r0, #4
   20328:	mov	r8, r0
   2032c:	str	lr, [sp, #8]
   20330:	ldr	sl, [ip, #4]
   20334:	cmp	sl, #1
   20338:	str	sl, [r0, #8]
   2033c:	blt	2038c <__assert_fail@plt+0xeed8>
   20340:	lsl	r0, sl, #2
   20344:	str	sl, [r8, #4]
   20348:	bl	2ac60 <__assert_fail@plt+0x197ac>
   2034c:	cmp	r0, #0
   20350:	str	r0, [r8, #12]
   20354:	beq	20b68 <__assert_fail@plt+0xf6b4>
   20358:	ldr	r4, [sp, #20]
   2035c:	ldr	sl, [r4, #4]
   20360:	ldr	r1, [r4, #8]
   20364:	lsl	r2, sl, #2
   20368:	bl	1125c <memcpy@plt>
   2036c:	ldr	lr, [sp, #8]
   20370:	mov	ip, r4
   20374:	b	2039c <__assert_fail@plt+0xeee8>
   20378:	mov	r8, #0
   2037c:	str	r8, [sl]
   20380:	mov	r0, r8
   20384:	sub	sp, fp, #28
   20388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2038c:	mov	r0, #0
   20390:	str	r0, [lr]
   20394:	str	r0, [lr, #4]
   20398:	str	r0, [lr, #8]
   2039c:	mov	r2, r8
   203a0:	and	r1, r9, #15
   203a4:	cmp	sl, #1
   203a8:	ldrb	r0, [r2, #52]!	; 0x34
   203ac:	and	r0, r0, #240	; 0xf0
   203b0:	str	lr, [r2, #-12]
   203b4:	str	r2, [sp, #24]
   203b8:	orr	r0, r0, r1
   203bc:	strb	r0, [r2]
   203c0:	ldr	r0, [sp, #12]
   203c4:	blt	20b04 <__assert_fail@plt+0xf650>
   203c8:	and	r1, r9, #4
   203cc:	tst	r9, #1
   203d0:	str	r1, [sp, #4]
   203d4:	and	r1, r9, #2
   203d8:	bne	205a8 <__assert_fail@plt+0xf0f4>
   203dc:	cmp	r1, #0
   203e0:	bne	20774 <__assert_fail@plt+0xf2c0>
   203e4:	movw	r1, #65280	; 0xff00
   203e8:	mov	r6, #0
   203ec:	mov	r9, #0
   203f0:	movt	r1, #3
   203f4:	add	r1, r1, #255	; 0xff
   203f8:	str	r1, [sp, #16]
   203fc:	b	204f4 <__assert_fail@plt+0xf040>
   20400:	mov	r0, #12
   20404:	bl	2ac60 <__assert_fail@plt+0x197ac>
   20408:	cmp	r0, #0
   2040c:	beq	20b24 <__assert_fail@plt+0xf670>
   20410:	ldr	ip, [sp, #20]
   20414:	str	r0, [r8, #40]	; 0x28
   20418:	mov	r5, r0
   2041c:	ldr	sl, [ip, #4]
   20420:	cmp	sl, #0
   20424:	str	sl, [r0, #4]
   20428:	ble	20460 <__assert_fail@plt+0xefac>
   2042c:	lsl	r0, sl, #2
   20430:	str	sl, [r5]
   20434:	bl	2ac60 <__assert_fail@plt+0x197ac>
   20438:	cmp	r0, #0
   2043c:	str	r0, [r5, #8]
   20440:	beq	20b34 <__assert_fail@plt+0xf680>
   20444:	ldr	r5, [sp, #20]
   20448:	ldr	sl, [r5, #4]
   2044c:	ldr	r1, [r5, #8]
   20450:	lsl	r2, sl, #2
   20454:	bl	1125c <memcpy@plt>
   20458:	mov	ip, r5
   2045c:	b	20470 <__assert_fail@plt+0xefbc>
   20460:	mov	r0, #0
   20464:	str	r0, [r5]
   20468:	str	r0, [r5, #4]
   2046c:	str	r0, [r5, #8]
   20470:	ldr	r1, [sp, #24]
   20474:	ldr	lr, [sp, #8]
   20478:	mov	r9, #0
   2047c:	ldrb	r0, [r1]
   20480:	orr	r0, r0, #128	; 0x80
   20484:	strb	r0, [r1]
   20488:	ldr	r0, [sp, #12]
   2048c:	tst	r4, #4352	; 0x1100
   20490:	beq	20584 <__assert_fail@plt+0xf0d0>
   20494:	sub	r1, r6, r9
   20498:	cmp	r1, #0
   2049c:	ldrge	r2, [r8, #8]
   204a0:	cmpge	r2, r1
   204a4:	bgt	204bc <__assert_fail@plt+0xf008>
   204a8:	add	r9, r9, #1
   204ac:	add	r6, r6, #1
   204b0:	cmp	r6, sl
   204b4:	blt	204f4 <__assert_fail@plt+0xf040>
   204b8:	b	20b04 <__assert_fail@plt+0xf650>
   204bc:	sub	r2, r2, #1
   204c0:	cmp	r2, r1
   204c4:	str	r2, [r8, #8]
   204c8:	ble	204a8 <__assert_fail@plt+0xeff4>
   204cc:	ldr	r2, [r8, #12]
   204d0:	add	r3, r2, r1, lsl #2
   204d4:	ldr	r3, [r3, #4]
   204d8:	str	r3, [r2, r1, lsl #2]
   204dc:	add	r1, r1, #1
   204e0:	ldr	r3, [r8, #8]
   204e4:	cmp	r1, r3
   204e8:	blt	204d0 <__assert_fail@plt+0xf01c>
   204ec:	ldr	sl, [ip, #4]
   204f0:	b	204a8 <__assert_fail@plt+0xeff4>
   204f4:	ldr	r1, [ip, #8]
   204f8:	ldr	r2, [r0]
   204fc:	ldr	r1, [r1, r6, lsl #2]
   20500:	add	r1, r2, r1, lsl #3
   20504:	ldr	r4, [r1, #4]
   20508:	ldr	r1, [sp, #16]
   2050c:	and	r1, r4, r1
   20510:	cmp	r1, #1
   20514:	beq	20598 <__assert_fail@plt+0xf0e4>
   20518:	ldr	r5, [sp, #24]
   2051c:	mov	r2, #32
   20520:	movw	r1, #65280	; 0xff00
   20524:	and	r2, r2, r4, lsr #15
   20528:	movt	r1, #3
   2052c:	and	r1, r4, r1
   20530:	ldrb	r3, [r5]
   20534:	orr	r2, r3, r2
   20538:	uxtb	r3, r4
   2053c:	cmp	r3, #4
   20540:	strb	r2, [r5]
   20544:	beq	20558 <__assert_fail@plt+0xf0a4>
   20548:	cmp	r3, #2
   2054c:	bne	20568 <__assert_fail@plt+0xf0b4>
   20550:	mov	r3, #16
   20554:	b	2055c <__assert_fail@plt+0xf0a8>
   20558:	mov	r3, #64	; 0x40
   2055c:	orr	r2, r2, r3
   20560:	ldr	r3, [sp, #24]
   20564:	strb	r2, [r3]
   20568:	cmp	r1, #0
   2056c:	beq	20598 <__assert_fail@plt+0xf0e4>
   20570:	ldr	r1, [r8, #40]	; 0x28
   20574:	cmp	r1, lr
   20578:	beq	20400 <__assert_fail@plt+0xef4c>
   2057c:	tst	r4, #4352	; 0x1100
   20580:	bne	20494 <__assert_fail@plt+0xefe0>
   20584:	ldr	r1, [sp, #4]
   20588:	cmp	r1, #0
   2058c:	bne	20598 <__assert_fail@plt+0xf0e4>
   20590:	ands	r1, r4, #16384	; 0x4000
   20594:	bne	20494 <__assert_fail@plt+0xefe0>
   20598:	add	r6, r6, #1
   2059c:	cmp	r6, sl
   205a0:	blt	204f4 <__assert_fail@plt+0xf040>
   205a4:	b	20b04 <__assert_fail@plt+0xf650>
   205a8:	cmp	r1, #0
   205ac:	bne	20938 <__assert_fail@plt+0xf484>
   205b0:	movw	r1, #65280	; 0xff00
   205b4:	mov	r6, #0
   205b8:	mov	r9, #0
   205bc:	movt	r1, #3
   205c0:	add	r1, r1, #255	; 0xff
   205c4:	str	r1, [sp, #16]
   205c8:	b	206c0 <__assert_fail@plt+0xf20c>
   205cc:	mov	r0, #12
   205d0:	bl	2ac60 <__assert_fail@plt+0x197ac>
   205d4:	cmp	r0, #0
   205d8:	beq	20b24 <__assert_fail@plt+0xf670>
   205dc:	ldr	ip, [sp, #20]
   205e0:	str	r0, [r8, #40]	; 0x28
   205e4:	mov	r5, r0
   205e8:	ldr	sl, [ip, #4]
   205ec:	cmp	sl, #0
   205f0:	str	sl, [r0, #4]
   205f4:	ble	2062c <__assert_fail@plt+0xf178>
   205f8:	lsl	r0, sl, #2
   205fc:	str	sl, [r5]
   20600:	bl	2ac60 <__assert_fail@plt+0x197ac>
   20604:	cmp	r0, #0
   20608:	str	r0, [r5, #8]
   2060c:	beq	20b34 <__assert_fail@plt+0xf680>
   20610:	ldr	r5, [sp, #20]
   20614:	ldr	sl, [r5, #4]
   20618:	ldr	r1, [r5, #8]
   2061c:	lsl	r2, sl, #2
   20620:	bl	1125c <memcpy@plt>
   20624:	mov	ip, r5
   20628:	b	2063c <__assert_fail@plt+0xf188>
   2062c:	mov	r0, #0
   20630:	str	r0, [r5]
   20634:	str	r0, [r5, #4]
   20638:	str	r0, [r5, #8]
   2063c:	ldr	r1, [sp, #24]
   20640:	ldr	lr, [sp, #8]
   20644:	mov	r9, #0
   20648:	ldrb	r0, [r1]
   2064c:	orr	r0, r0, #128	; 0x80
   20650:	strb	r0, [r1]
   20654:	ldr	r0, [sp, #12]
   20658:	tst	r4, #4608	; 0x1200
   2065c:	beq	20750 <__assert_fail@plt+0xf29c>
   20660:	sub	r1, r6, r9
   20664:	cmp	r1, #0
   20668:	ldrge	r2, [r8, #8]
   2066c:	cmpge	r2, r1
   20670:	bgt	20688 <__assert_fail@plt+0xf1d4>
   20674:	add	r9, r9, #1
   20678:	add	r6, r6, #1
   2067c:	cmp	r6, sl
   20680:	blt	206c0 <__assert_fail@plt+0xf20c>
   20684:	b	20b04 <__assert_fail@plt+0xf650>
   20688:	sub	r2, r2, #1
   2068c:	cmp	r2, r1
   20690:	str	r2, [r8, #8]
   20694:	ble	20674 <__assert_fail@plt+0xf1c0>
   20698:	ldr	r2, [r8, #12]
   2069c:	add	r3, r2, r1, lsl #2
   206a0:	ldr	r3, [r3, #4]
   206a4:	str	r3, [r2, r1, lsl #2]
   206a8:	add	r1, r1, #1
   206ac:	ldr	r3, [r8, #8]
   206b0:	cmp	r1, r3
   206b4:	blt	2069c <__assert_fail@plt+0xf1e8>
   206b8:	ldr	sl, [ip, #4]
   206bc:	b	20674 <__assert_fail@plt+0xf1c0>
   206c0:	ldr	r1, [ip, #8]
   206c4:	ldr	r2, [r0]
   206c8:	ldr	r1, [r1, r6, lsl #2]
   206cc:	add	r1, r2, r1, lsl #3
   206d0:	ldr	r4, [r1, #4]
   206d4:	ldr	r1, [sp, #16]
   206d8:	and	r1, r4, r1
   206dc:	cmp	r1, #1
   206e0:	beq	20764 <__assert_fail@plt+0xf2b0>
   206e4:	ldr	r5, [sp, #24]
   206e8:	mov	r2, #32
   206ec:	movw	r1, #65280	; 0xff00
   206f0:	and	r2, r2, r4, lsr #15
   206f4:	movt	r1, #3
   206f8:	and	r1, r4, r1
   206fc:	ldrb	r3, [r5]
   20700:	orr	r2, r3, r2
   20704:	uxtb	r3, r4
   20708:	cmp	r3, #4
   2070c:	strb	r2, [r5]
   20710:	beq	20724 <__assert_fail@plt+0xf270>
   20714:	cmp	r3, #2
   20718:	bne	20734 <__assert_fail@plt+0xf280>
   2071c:	mov	r3, #16
   20720:	b	20728 <__assert_fail@plt+0xf274>
   20724:	mov	r3, #64	; 0x40
   20728:	orr	r2, r2, r3
   2072c:	ldr	r3, [sp, #24]
   20730:	strb	r2, [r3]
   20734:	cmp	r1, #0
   20738:	beq	20764 <__assert_fail@plt+0xf2b0>
   2073c:	ldr	r1, [r8, #40]	; 0x28
   20740:	cmp	r1, lr
   20744:	beq	205cc <__assert_fail@plt+0xf118>
   20748:	tst	r4, #4608	; 0x1200
   2074c:	bne	20660 <__assert_fail@plt+0xf1ac>
   20750:	ldr	r1, [sp, #4]
   20754:	cmp	r1, #0
   20758:	bne	20764 <__assert_fail@plt+0xf2b0>
   2075c:	ands	r1, r4, #16384	; 0x4000
   20760:	bne	20660 <__assert_fail@plt+0xf1ac>
   20764:	add	r6, r6, #1
   20768:	cmp	r6, sl
   2076c:	blt	206c0 <__assert_fail@plt+0xf20c>
   20770:	b	20b04 <__assert_fail@plt+0xf650>
   20774:	movw	r1, #65280	; 0xff00
   20778:	mov	r6, #0
   2077c:	mov	r9, #0
   20780:	movt	r1, #3
   20784:	add	r1, r1, #255	; 0xff
   20788:	str	r1, [sp, #16]
   2078c:	b	20884 <__assert_fail@plt+0xf3d0>
   20790:	mov	r0, #12
   20794:	bl	2ac60 <__assert_fail@plt+0x197ac>
   20798:	cmp	r0, #0
   2079c:	beq	20b24 <__assert_fail@plt+0xf670>
   207a0:	ldr	ip, [sp, #20]
   207a4:	str	r0, [r8, #40]	; 0x28
   207a8:	mov	r5, r0
   207ac:	ldr	sl, [ip, #4]
   207b0:	cmp	sl, #0
   207b4:	str	sl, [r0, #4]
   207b8:	ble	207f0 <__assert_fail@plt+0xf33c>
   207bc:	lsl	r0, sl, #2
   207c0:	str	sl, [r5]
   207c4:	bl	2ac60 <__assert_fail@plt+0x197ac>
   207c8:	cmp	r0, #0
   207cc:	str	r0, [r5, #8]
   207d0:	beq	20b34 <__assert_fail@plt+0xf680>
   207d4:	ldr	r5, [sp, #20]
   207d8:	ldr	sl, [r5, #4]
   207dc:	ldr	r1, [r5, #8]
   207e0:	lsl	r2, sl, #2
   207e4:	bl	1125c <memcpy@plt>
   207e8:	mov	ip, r5
   207ec:	b	20800 <__assert_fail@plt+0xf34c>
   207f0:	mov	r0, #0
   207f4:	str	r0, [r5]
   207f8:	str	r0, [r5, #4]
   207fc:	str	r0, [r5, #8]
   20800:	ldr	r1, [sp, #24]
   20804:	ldr	lr, [sp, #8]
   20808:	mov	r9, #0
   2080c:	ldrb	r0, [r1]
   20810:	orr	r0, r0, #128	; 0x80
   20814:	strb	r0, [r1]
   20818:	ldr	r0, [sp, #12]
   2081c:	tst	r4, #256	; 0x100
   20820:	beq	20914 <__assert_fail@plt+0xf460>
   20824:	sub	r1, r6, r9
   20828:	cmp	r1, #0
   2082c:	ldrge	r2, [r8, #8]
   20830:	cmpge	r2, r1
   20834:	bgt	2084c <__assert_fail@plt+0xf398>
   20838:	add	r9, r9, #1
   2083c:	add	r6, r6, #1
   20840:	cmp	r6, sl
   20844:	blt	20884 <__assert_fail@plt+0xf3d0>
   20848:	b	20b04 <__assert_fail@plt+0xf650>
   2084c:	sub	r2, r2, #1
   20850:	cmp	r2, r1
   20854:	str	r2, [r8, #8]
   20858:	ble	20838 <__assert_fail@plt+0xf384>
   2085c:	ldr	r2, [r8, #12]
   20860:	add	r3, r2, r1, lsl #2
   20864:	ldr	r3, [r3, #4]
   20868:	str	r3, [r2, r1, lsl #2]
   2086c:	add	r1, r1, #1
   20870:	ldr	r3, [r8, #8]
   20874:	cmp	r1, r3
   20878:	blt	20860 <__assert_fail@plt+0xf3ac>
   2087c:	ldr	sl, [ip, #4]
   20880:	b	20838 <__assert_fail@plt+0xf384>
   20884:	ldr	r1, [ip, #8]
   20888:	ldr	r2, [r0]
   2088c:	ldr	r1, [r1, r6, lsl #2]
   20890:	add	r1, r2, r1, lsl #3
   20894:	ldr	r4, [r1, #4]
   20898:	ldr	r1, [sp, #16]
   2089c:	and	r1, r4, r1
   208a0:	cmp	r1, #1
   208a4:	beq	20928 <__assert_fail@plt+0xf474>
   208a8:	ldr	r5, [sp, #24]
   208ac:	mov	r2, #32
   208b0:	movw	r1, #65280	; 0xff00
   208b4:	and	r2, r2, r4, lsr #15
   208b8:	movt	r1, #3
   208bc:	and	r1, r4, r1
   208c0:	ldrb	r3, [r5]
   208c4:	orr	r2, r3, r2
   208c8:	uxtb	r3, r4
   208cc:	cmp	r3, #4
   208d0:	strb	r2, [r5]
   208d4:	beq	208e8 <__assert_fail@plt+0xf434>
   208d8:	cmp	r3, #2
   208dc:	bne	208f8 <__assert_fail@plt+0xf444>
   208e0:	mov	r3, #16
   208e4:	b	208ec <__assert_fail@plt+0xf438>
   208e8:	mov	r3, #64	; 0x40
   208ec:	orr	r2, r2, r3
   208f0:	ldr	r3, [sp, #24]
   208f4:	strb	r2, [r3]
   208f8:	cmp	r1, #0
   208fc:	beq	20928 <__assert_fail@plt+0xf474>
   20900:	ldr	r1, [r8, #40]	; 0x28
   20904:	cmp	r1, lr
   20908:	beq	20790 <__assert_fail@plt+0xf2dc>
   2090c:	tst	r4, #256	; 0x100
   20910:	bne	20824 <__assert_fail@plt+0xf370>
   20914:	ldr	r1, [sp, #4]
   20918:	cmp	r1, #0
   2091c:	bne	20928 <__assert_fail@plt+0xf474>
   20920:	ands	r1, r4, #16384	; 0x4000
   20924:	bne	20824 <__assert_fail@plt+0xf370>
   20928:	add	r6, r6, #1
   2092c:	cmp	r6, sl
   20930:	blt	20884 <__assert_fail@plt+0xf3d0>
   20934:	b	20b04 <__assert_fail@plt+0xf650>
   20938:	movw	r1, #65280	; 0xff00
   2093c:	mov	r9, #0
   20940:	mov	r5, #0
   20944:	movt	r1, #3
   20948:	add	r1, r1, #255	; 0xff
   2094c:	str	r1, [sp, #16]
   20950:	ldr	r1, [ip, #8]
   20954:	ldr	r2, [r0]
   20958:	ldr	r1, [r1, r9, lsl #2]
   2095c:	add	r1, r2, r1, lsl #3
   20960:	ldr	r6, [r1, #4]
   20964:	ldr	r1, [sp, #16]
   20968:	and	r1, r6, r1
   2096c:	cmp	r1, #1
   20970:	beq	209f4 <__assert_fail@plt+0xf540>
   20974:	ldr	r4, [sp, #24]
   20978:	mov	r2, #32
   2097c:	movw	r1, #65280	; 0xff00
   20980:	and	r2, r2, r6, lsr #15
   20984:	movt	r1, #3
   20988:	and	r1, r6, r1
   2098c:	ldrb	r3, [r4]
   20990:	orr	r2, r3, r2
   20994:	uxtb	r3, r6
   20998:	cmp	r3, #2
   2099c:	strb	r2, [r4]
   209a0:	beq	209b4 <__assert_fail@plt+0xf500>
   209a4:	cmp	r3, #4
   209a8:	bne	209c4 <__assert_fail@plt+0xf510>
   209ac:	mov	r3, #64	; 0x40
   209b0:	b	209b8 <__assert_fail@plt+0xf504>
   209b4:	mov	r3, #16
   209b8:	orr	r2, r2, r3
   209bc:	ldr	r3, [sp, #24]
   209c0:	strb	r2, [r3]
   209c4:	cmp	r1, #0
   209c8:	beq	209f4 <__assert_fail@plt+0xf540>
   209cc:	ldr	r1, [r8, #40]	; 0x28
   209d0:	cmp	r1, lr
   209d4:	beq	20a04 <__assert_fail@plt+0xf550>
   209d8:	tst	r6, #512	; 0x200
   209dc:	bne	20a98 <__assert_fail@plt+0xf5e4>
   209e0:	ldr	r1, [sp, #4]
   209e4:	cmp	r1, #0
   209e8:	bne	209f4 <__assert_fail@plt+0xf540>
   209ec:	ands	r1, r6, #16384	; 0x4000
   209f0:	bne	20a98 <__assert_fail@plt+0xf5e4>
   209f4:	add	r9, r9, #1
   209f8:	cmp	r9, sl
   209fc:	blt	20950 <__assert_fail@plt+0xf49c>
   20a00:	b	20b04 <__assert_fail@plt+0xf650>
   20a04:	mov	r0, #12
   20a08:	bl	2ac60 <__assert_fail@plt+0x197ac>
   20a0c:	cmp	r0, #0
   20a10:	beq	20b24 <__assert_fail@plt+0xf670>
   20a14:	ldr	ip, [sp, #20]
   20a18:	str	r0, [r8, #40]	; 0x28
   20a1c:	mov	r5, r0
   20a20:	ldr	sl, [ip, #4]
   20a24:	cmp	sl, #1
   20a28:	str	sl, [r0, #4]
   20a2c:	blt	20a64 <__assert_fail@plt+0xf5b0>
   20a30:	lsl	r0, sl, #2
   20a34:	str	sl, [r5]
   20a38:	bl	2ac60 <__assert_fail@plt+0x197ac>
   20a3c:	cmp	r0, #0
   20a40:	str	r0, [r5, #8]
   20a44:	beq	20b34 <__assert_fail@plt+0xf680>
   20a48:	ldr	r4, [sp, #20]
   20a4c:	ldr	sl, [r4, #4]
   20a50:	ldr	r1, [r4, #8]
   20a54:	lsl	r2, sl, #2
   20a58:	bl	1125c <memcpy@plt>
   20a5c:	mov	ip, r4
   20a60:	b	20a74 <__assert_fail@plt+0xf5c0>
   20a64:	mov	r0, #0
   20a68:	str	r0, [r5]
   20a6c:	str	r0, [r5, #4]
   20a70:	str	r0, [r5, #8]
   20a74:	ldr	r1, [sp, #24]
   20a78:	ldr	lr, [sp, #8]
   20a7c:	mov	r5, #0
   20a80:	ldrb	r0, [r1]
   20a84:	orr	r0, r0, #128	; 0x80
   20a88:	strb	r0, [r1]
   20a8c:	ldr	r0, [sp, #12]
   20a90:	tst	r6, #512	; 0x200
   20a94:	beq	209e0 <__assert_fail@plt+0xf52c>
   20a98:	sub	r1, r9, r5
   20a9c:	cmp	r1, #0
   20aa0:	ldrge	r2, [r8, #8]
   20aa4:	cmpge	r2, r1
   20aa8:	bgt	20ac0 <__assert_fail@plt+0xf60c>
   20aac:	add	r5, r5, #1
   20ab0:	add	r9, r9, #1
   20ab4:	cmp	r9, sl
   20ab8:	blt	20950 <__assert_fail@plt+0xf49c>
   20abc:	b	20b04 <__assert_fail@plt+0xf650>
   20ac0:	sub	r2, r2, #1
   20ac4:	cmp	r2, r1
   20ac8:	str	r2, [r8, #8]
   20acc:	ble	20aac <__assert_fail@plt+0xf5f8>
   20ad0:	ldr	r2, [r8, #12]
   20ad4:	add	r3, r2, r1, lsl #2
   20ad8:	ldr	r3, [r3, #4]
   20adc:	str	r3, [r2, r1, lsl #2]
   20ae0:	add	r1, r1, #1
   20ae4:	ldr	r3, [r8, #8]
   20ae8:	cmp	r1, r3
   20aec:	blt	20ad4 <__assert_fail@plt+0xf620>
   20af0:	ldr	sl, [ip, #4]
   20af4:	add	r5, r5, #1
   20af8:	add	r9, r9, #1
   20afc:	cmp	r9, sl
   20b00:	blt	20950 <__assert_fail@plt+0xf49c>
   20b04:	mov	r1, r8
   20b08:	mov	r2, r7
   20b0c:	bl	20b80 <__assert_fail@plt+0xf6cc>
   20b10:	cmp	r0, #0
   20b14:	bne	20b24 <__assert_fail@plt+0xf670>
   20b18:	mov	r0, r8
   20b1c:	sub	sp, fp, #28
   20b20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b24:	mov	r0, r8
   20b28:	bl	1a110 <__assert_fail@plt+0x8c5c>
   20b2c:	ldr	sl, [sp]
   20b30:	b	20b50 <__assert_fail@plt+0xf69c>
   20b34:	ldr	sl, [sp]
   20b38:	add	r0, r5, #4
   20b3c:	mov	r1, #0
   20b40:	str	r1, [r0]
   20b44:	mov	r0, r8
   20b48:	str	r1, [r5]
   20b4c:	bl	1a110 <__assert_fail@plt+0x8c5c>
   20b50:	mov	r0, #12
   20b54:	mov	r8, #0
   20b58:	str	r0, [sl]
   20b5c:	mov	r0, r8
   20b60:	sub	sp, fp, #28
   20b64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b68:	mov	r0, #0
   20b6c:	str	r0, [r8, #4]
   20b70:	str	r0, [r8, #8]
   20b74:	mov	r0, r8
   20b78:	bl	2ae28 <__assert_fail@plt+0x19974>
   20b7c:	b	20b2c <__assert_fail@plt+0xf678>
   20b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b84:	add	fp, sp, #28
   20b88:	sub	sp, sp, #4
   20b8c:	str	r2, [r1]
   20b90:	mov	r4, r1
   20b94:	mov	r7, r0
   20b98:	mov	r0, #0
   20b9c:	mov	r9, r2
   20ba0:	ldr	r1, [r1, #8]
   20ba4:	str	r1, [r4, #16]
   20ba8:	str	r0, [r4, #20]
   20bac:	lsl	r0, r1, #2
   20bb0:	bl	2ac60 <__assert_fail@plt+0x197ac>
   20bb4:	mov	r8, #12
   20bb8:	cmp	r0, #0
   20bbc:	str	r0, [r4, #24]
   20bc0:	beq	20c80 <__assert_fail@plt+0xf7cc>
   20bc4:	ldr	r1, [r4, #8]
   20bc8:	cmp	r1, #1
   20bcc:	blt	20c40 <__assert_fail@plt+0xf78c>
   20bd0:	mov	r5, #0
   20bd4:	mov	sl, #2
   20bd8:	ldr	r2, [r4, #12]
   20bdc:	ldr	r6, [r2, r5, lsl #2]
   20be0:	ldr	r2, [r7]
   20be4:	add	r2, r2, r6, lsl #3
   20be8:	ldrb	r2, [r2, #4]
   20bec:	tst	r2, #8
   20bf0:	bne	20c34 <__assert_fail@plt+0xf780>
   20bf4:	ldr	r2, [r4, #16]
   20bf8:	ldr	r1, [r4, #20]
   20bfc:	cmp	r2, r1
   20c00:	bne	20c24 <__assert_fail@plt+0xf770>
   20c04:	add	r1, sl, r2, lsl #1
   20c08:	str	r1, [r4, #16]
   20c0c:	lsl	r1, r1, #2
   20c10:	bl	2ac90 <__assert_fail@plt+0x197dc>
   20c14:	cmp	r0, #0
   20c18:	beq	20c80 <__assert_fail@plt+0xf7cc>
   20c1c:	str	r0, [r4, #24]
   20c20:	ldr	r1, [r4, #20]
   20c24:	add	r2, r1, #1
   20c28:	str	r2, [r4, #20]
   20c2c:	str	r6, [r0, r1, lsl #2]
   20c30:	ldr	r1, [r4, #8]
   20c34:	add	r5, r5, #1
   20c38:	cmp	r5, r1
   20c3c:	blt	20bd8 <__assert_fail@plt+0xf724>
   20c40:	ldr	r1, [r7, #68]	; 0x44
   20c44:	ldr	r0, [r7, #32]
   20c48:	and	r1, r1, r9
   20c4c:	mov	r5, r0
   20c50:	add	r2, r1, r1, lsl #1
   20c54:	ldr	r1, [r5, r2, lsl #2]!
   20c58:	mov	r6, r5
   20c5c:	ldr	r3, [r6, #4]!
   20c60:	cmp	r3, r1
   20c64:	ble	20c8c <__assert_fail@plt+0xf7d8>
   20c68:	add	r0, r0, r2, lsl #2
   20c6c:	ldr	r0, [r0, #8]
   20c70:	add	r2, r1, #1
   20c74:	mov	r8, #0
   20c78:	str	r2, [r5]
   20c7c:	str	r4, [r0, r1, lsl #2]
   20c80:	mov	r0, r8
   20c84:	sub	sp, fp, #28
   20c88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c8c:	add	r7, r0, r2, lsl #2
   20c90:	mov	r2, #2
   20c94:	ldr	r0, [r7, #8]!
   20c98:	add	r9, r2, r1, lsl #1
   20c9c:	lsl	r1, r9, #2
   20ca0:	bl	2ac90 <__assert_fail@plt+0x197dc>
   20ca4:	cmp	r0, #0
   20ca8:	beq	20c80 <__assert_fail@plt+0xf7cc>
   20cac:	str	r0, [r7]
   20cb0:	str	r9, [r6]
   20cb4:	ldr	r1, [r5]
   20cb8:	b	20c70 <__assert_fail@plt+0xf7bc>
   20cbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20cc0:	add	fp, sp, #28
   20cc4:	sub	sp, sp, #36	; 0x24
   20cc8:	mov	r4, r0
   20ccc:	ldr	r0, [r0, #24]
   20cd0:	mov	r6, r2
   20cd4:	mov	r9, r1
   20cd8:	cmp	r0, r1
   20cdc:	ble	20ef8 <__assert_fail@plt+0xfa44>
   20ce0:	ldr	r0, [r4, #80]	; 0x50
   20ce4:	mov	r1, #4
   20ce8:	mov	r5, r9
   20cec:	cmp	r0, #2
   20cf0:	movge	r0, #0
   20cf4:	strge	r0, [r4, #16]
   20cf8:	strge	r0, [r4, #20]
   20cfc:	mov	r0, #0
   20d00:	tst	r6, #1
   20d04:	str	r0, [r4, #24]
   20d08:	str	r0, [r4, #28]
   20d0c:	str	r0, [r4, #32]
   20d10:	strb	r0, [r4, #76]	; 0x4c
   20d14:	movweq	r1, #6
   20d18:	ldr	r2, [r4, #44]	; 0x2c
   20d1c:	ldr	r3, [r4, #52]	; 0x34
   20d20:	str	r2, [r4, #48]	; 0x30
   20d24:	str	r3, [r4, #56]	; 0x38
   20d28:	str	r1, [r4, #60]	; 0x3c
   20d2c:	ldrb	r1, [r4, #75]	; 0x4b
   20d30:	cmp	r1, #0
   20d34:	ldreq	r1, [r4]
   20d38:	streq	r1, [r4, #4]
   20d3c:	cmp	r5, #0
   20d40:	beq	20e74 <__assert_fail@plt+0xf9c0>
   20d44:	ldr	r1, [r4, #32]
   20d48:	cmp	r5, r1
   20d4c:	bge	20f08 <__assert_fail@plt+0xfa54>
   20d50:	ldrb	r0, [r4, #76]	; 0x4c
   20d54:	cmp	r0, #0
   20d58:	bne	210b8 <__assert_fail@plt+0xfc04>
   20d5c:	cmp	r5, #0
   20d60:	ble	20da4 <__assert_fail@plt+0xf8f0>
   20d64:	ldr	r1, [r4, #48]	; 0x30
   20d68:	sub	r0, r5, #1
   20d6c:	cmp	r1, r0
   20d70:	beq	21180 <__assert_fail@plt+0xfccc>
   20d74:	ldr	r1, [r4, #80]	; 0x50
   20d78:	cmp	r1, #2
   20d7c:	blt	20dbc <__assert_fail@plt+0xf908>
   20d80:	ldr	r0, [r4, #8]
   20d84:	mov	r1, r5
   20d88:	sub	r0, r0, #4
   20d8c:	ldr	r6, [r0, r1, lsl #2]
   20d90:	cmn	r6, #1
   20d94:	bne	20df0 <__assert_fail@plt+0xf93c>
   20d98:	sub	r1, r1, #1
   20d9c:	cmp	r1, #0
   20da0:	bgt	20d8c <__assert_fail@plt+0xf8d8>
   20da4:	ldr	r1, [r4, #60]	; 0x3c
   20da8:	str	r1, [r4, #60]	; 0x3c
   20dac:	ldr	r0, [r4, #80]	; 0x50
   20db0:	cmp	r0, #2
   20db4:	bge	20e24 <__assert_fail@plt+0xf970>
   20db8:	b	20e3c <__assert_fail@plt+0xf988>
   20dbc:	ldr	r1, [r4, #4]
   20dc0:	ldr	r2, [r4, #68]	; 0x44
   20dc4:	ldrb	r0, [r1, r0]
   20dc8:	ubfx	r1, r0, #5, #3
   20dcc:	and	r3, r0, #31
   20dd0:	ldr	r2, [r2, r1, lsl #2]
   20dd4:	mov	r1, #1
   20dd8:	tst	r2, r1, lsl r3
   20ddc:	bne	20e14 <__assert_fail@plt+0xf960>
   20de0:	mov	r1, #0
   20de4:	cmp	r0, #10
   20de8:	beq	20e08 <__assert_fail@plt+0xf954>
   20dec:	b	20e14 <__assert_fail@plt+0xf960>
   20df0:	ldrb	r0, [r4, #78]	; 0x4e
   20df4:	cmp	r0, #0
   20df8:	bne	2137c <__assert_fail@plt+0xfec8>
   20dfc:	mov	r1, #0
   20e00:	cmp	r6, #10
   20e04:	bne	20e14 <__assert_fail@plt+0xf960>
   20e08:	ldrb	r1, [r4, #77]	; 0x4d
   20e0c:	cmp	r1, #0
   20e10:	movwne	r1, #2
   20e14:	str	r1, [r4, #60]	; 0x3c
   20e18:	ldr	r0, [r4, #80]	; 0x50
   20e1c:	cmp	r0, #2
   20e20:	blt	20e3c <__assert_fail@plt+0xf988>
   20e24:	ldr	r2, [r4, #28]
   20e28:	ldr	r0, [r4, #8]
   20e2c:	sub	r2, r2, r5
   20e30:	add	r1, r0, r5, lsl #2
   20e34:	lsl	r2, r2, #2
   20e38:	bl	1122c <memmove@plt>
   20e3c:	ldrb	r0, [r4, #75]	; 0x4b
   20e40:	cmp	r0, #0
   20e44:	bne	21168 <__assert_fail@plt+0xfcb4>
   20e48:	ldr	r0, [r4, #28]
   20e4c:	ldr	r1, [r4, #32]
   20e50:	sub	r0, r0, r5
   20e54:	sub	r1, r1, r5
   20e58:	str	r0, [r4, #28]
   20e5c:	str	r1, [r4, #32]
   20e60:	ldrb	r0, [r4, #75]	; 0x4b
   20e64:	cmp	r0, #0
   20e68:	ldreq	r0, [r4, #4]
   20e6c:	addeq	r0, r0, r5
   20e70:	streq	r0, [r4, #4]
   20e74:	str	r9, [r4, #24]
   20e78:	ldr	r0, [r4, #48]	; 0x30
   20e7c:	ldr	r3, [r4, #80]	; 0x50
   20e80:	ldr	r2, [r4, #56]	; 0x38
   20e84:	sub	r1, r0, r5
   20e88:	cmp	r3, #2
   20e8c:	sub	r0, r2, r5
   20e90:	str	r1, [r4, #48]	; 0x30
   20e94:	str	r0, [r4, #56]	; 0x38
   20e98:	blt	20ec0 <__assert_fail@plt+0xfa0c>
   20e9c:	ldrb	r0, [r4, #72]	; 0x48
   20ea0:	cmp	r0, #0
   20ea4:	beq	20ee0 <__assert_fail@plt+0xfa2c>
   20ea8:	mov	r0, r4
   20eac:	bl	1a170 <__assert_fail@plt+0x8cbc>
   20eb0:	cmp	r0, #0
   20eb4:	beq	20ee8 <__assert_fail@plt+0xfa34>
   20eb8:	sub	sp, fp, #28
   20ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ec0:	ldrb	r0, [r4, #75]	; 0x4b
   20ec4:	cmp	r0, #0
   20ec8:	bne	2119c <__assert_fail@plt+0xfce8>
   20ecc:	str	r1, [r4, #28]
   20ed0:	mov	r0, #0
   20ed4:	str	r0, [r4, #40]	; 0x28
   20ed8:	sub	sp, fp, #28
   20edc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ee0:	mov	r0, r4
   20ee4:	bl	1a830 <__assert_fail@plt+0x937c>
   20ee8:	mov	r0, #0
   20eec:	str	r0, [r4, #40]	; 0x28
   20ef0:	sub	sp, fp, #28
   20ef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ef8:	sub	r5, r9, r0
   20efc:	cmp	r5, #0
   20f00:	bne	20d44 <__assert_fail@plt+0xf890>
   20f04:	b	20e74 <__assert_fail@plt+0xf9c0>
   20f08:	ldrb	r2, [r4, #76]	; 0x4c
   20f0c:	ldr	lr, [r4, #28]
   20f10:	cmp	r2, #0
   20f14:	bne	214f0 <__assert_fail@plt+0x1003c>
   20f18:	mov	r2, #0
   20f1c:	str	r2, [r4, #28]
   20f20:	ldr	r3, [r4, #80]	; 0x50
   20f24:	cmp	r3, #2
   20f28:	blt	2122c <__assert_fail@plt+0xfd78>
   20f2c:	ldrb	r2, [r4, #73]	; 0x49
   20f30:	cmp	r2, #0
   20f34:	beq	20ff0 <__assert_fail@plt+0xfb3c>
   20f38:	ldr	r7, [r4]
   20f3c:	sub	r3, r5, r3
   20f40:	add	ip, r7, r0
   20f44:	add	r3, ip, r3
   20f48:	add	r8, ip, r5
   20f4c:	cmp	r3, r7
   20f50:	movcc	r3, r7
   20f54:	mov	r7, r8
   20f58:	sub	r7, r7, #1
   20f5c:	cmp	r7, r3
   20f60:	bcc	20ff0 <__assert_fail@plt+0xfb3c>
   20f64:	ldrb	r2, [r7]
   20f68:	and	r2, r2, #192	; 0xc0
   20f6c:	cmp	r2, #128	; 0x80
   20f70:	beq	20f58 <__assert_fail@plt+0xfaa4>
   20f74:	ldr	r0, [r4, #48]	; 0x30
   20f78:	mov	sl, lr
   20f7c:	mov	r1, r7
   20f80:	add	r3, ip, r0
   20f84:	ldr	r0, [r4, #64]	; 0x40
   20f88:	sub	r2, r3, r7
   20f8c:	cmp	r0, #0
   20f90:	bne	216bc <__assert_fail@plt+0x10208>
   20f94:	mov	r0, #0
   20f98:	add	r3, sp, #24
   20f9c:	str	r0, [sp, #28]
   20fa0:	str	r0, [sp, #24]
   20fa4:	add	r0, sp, #20
   20fa8:	bl	2ae88 <__assert_fail@plt+0x199d4>
   20fac:	sub	r1, r8, r7
   20fb0:	mvn	r7, #0
   20fb4:	cmp	r0, r1
   20fb8:	bcc	20fdc <__assert_fail@plt+0xfb28>
   20fbc:	cmn	r0, #3
   20fc0:	bhi	20fdc <__assert_fail@plt+0xfb28>
   20fc4:	mov	r2, #0
   20fc8:	sub	r0, r0, r1
   20fcc:	str	r2, [r4, #16]
   20fd0:	str	r2, [r4, #20]
   20fd4:	str	r0, [r4, #28]
   20fd8:	ldr	r7, [sp, #20]
   20fdc:	cmn	r7, #1
   20fe0:	bne	2109c <__assert_fail@plt+0xfbe8>
   20fe4:	ldr	r0, [r4, #24]
   20fe8:	ldr	r1, [r4, #32]
   20fec:	mov	lr, sl
   20ff0:	add	r8, r1, r0
   20ff4:	cmp	r8, r9
   20ff8:	bge	2139c <__assert_fail@plt+0xfee8>
   20ffc:	add	sl, r4, #16
   21000:	str	lr, [sp]
   21004:	ldr	r0, [r4]
   21008:	ldr	r2, [r4, #44]	; 0x2c
   2100c:	mov	r3, sl
   21010:	add	r1, r0, r8
   21014:	ldr	r0, [sl]
   21018:	sub	r7, r2, r8
   2101c:	mov	r2, r7
   21020:	str	r0, [sp, #8]
   21024:	ldr	r0, [sl, #4]
   21028:	str	r0, [sp, #4]
   2102c:	add	r0, sp, #24
   21030:	bl	2ae88 <__assert_fail@plt+0x199d4>
   21034:	sub	r1, r0, #1
   21038:	cmn	r1, #3
   2103c:	bcs	21054 <__assert_fail@plt+0xfba0>
   21040:	ldr	r7, [sp, #24]
   21044:	add	r8, r0, r8
   21048:	cmp	r8, r9
   2104c:	blt	21004 <__assert_fail@plt+0xfb50>
   21050:	b	21088 <__assert_fail@plt+0xfbd4>
   21054:	cmp	r7, #0
   21058:	mov	r1, #0
   2105c:	ldr	r3, [sp, #4]
   21060:	ldr	r2, [sp, #8]
   21064:	cmpne	r0, #0
   21068:	ldrne	r0, [r4]
   2106c:	ldrbne	r1, [r0, r8]
   21070:	stm	sl, {r2, r3}
   21074:	mov	r0, #1
   21078:	mov	r7, r1
   2107c:	add	r8, r0, r8
   21080:	cmp	r8, r9
   21084:	blt	21004 <__assert_fail@plt+0xfb50>
   21088:	ldr	lr, [sp]
   2108c:	sub	r0, r8, r9
   21090:	cmn	r7, #1
   21094:	str	r0, [r4, #28]
   21098:	beq	213a4 <__assert_fail@plt+0xfef0>
   2109c:	ldrb	r0, [r4, #78]	; 0x4e
   210a0:	cmp	r0, #0
   210a4:	bne	2168c <__assert_fail@plt+0x101d8>
   210a8:	mov	r1, #0
   210ac:	cmp	r7, #10
   210b0:	beq	214c8 <__assert_fail@plt+0x10014>
   210b4:	b	214d4 <__assert_fail@plt+0x10020>
   210b8:	ldr	ip, [r4, #12]
   210bc:	ldr	r0, [r4, #28]
   210c0:	mov	r1, #0
   210c4:	add	r2, r1, r0
   210c8:	add	r2, r2, r2, lsr #31
   210cc:	asr	r7, r2, #1
   210d0:	ldr	r3, [ip, r7, lsl #2]
   210d4:	mov	r2, r7
   210d8:	cmp	r3, r5
   210dc:	bgt	210ec <__assert_fail@plt+0xfc38>
   210e0:	bge	210f8 <__assert_fail@plt+0xfc44>
   210e4:	add	r1, r7, #1
   210e8:	mov	r2, r0
   210ec:	cmp	r1, r2
   210f0:	mov	r0, r2
   210f4:	blt	210c4 <__assert_fail@plt+0xfc10>
   210f8:	mov	r8, #0
   210fc:	cmp	r3, r5
   21100:	movwlt	r8, #1
   21104:	add	sl, r7, r8
   21108:	cmp	sl, #0
   2110c:	ble	21150 <__assert_fail@plt+0xfc9c>
   21110:	ldr	r1, [r4, #48]	; 0x30
   21114:	sub	r0, sl, #1
   21118:	cmp	r1, r0
   2111c:	beq	21518 <__assert_fail@plt+0x10064>
   21120:	ldr	r1, [r4, #80]	; 0x50
   21124:	cmp	r1, #2
   21128:	blt	21288 <__assert_fail@plt+0xfdd4>
   2112c:	ldr	r0, [r4, #8]
   21130:	mov	r1, sl
   21134:	sub	r0, r0, #4
   21138:	ldr	r6, [r0, r1, lsl #2]
   2113c:	cmn	r6, #1
   21140:	bne	212bc <__assert_fail@plt+0xfe08>
   21144:	sub	r1, r1, #1
   21148:	cmp	r1, #0
   2114c:	bgt	21138 <__assert_fail@plt+0xfc84>
   21150:	ldr	r1, [r4, #60]	; 0x3c
   21154:	str	r1, [r4, #60]	; 0x3c
   21158:	cmp	sl, r5
   2115c:	ldr	r2, [r4, #28]
   21160:	beq	212f0 <__assert_fail@plt+0xfe3c>
   21164:	b	21530 <__assert_fail@plt+0x1007c>
   21168:	ldr	r2, [r4, #28]
   2116c:	ldr	r0, [r4, #4]
   21170:	add	r1, r0, r5
   21174:	sub	r2, r2, r5
   21178:	bl	1122c <memmove@plt>
   2117c:	b	20e48 <__assert_fail@plt+0xf994>
   21180:	and	r0, r6, #2
   21184:	eor	r1, r0, #10
   21188:	str	r1, [r4, #60]	; 0x3c
   2118c:	ldr	r0, [r4, #80]	; 0x50
   21190:	cmp	r0, #2
   21194:	bge	20e24 <__assert_fail@plt+0xf970>
   21198:	b	20e3c <__assert_fail@plt+0xf988>
   2119c:	ldrb	r0, [r4, #72]	; 0x48
   211a0:	cmp	r0, #0
   211a4:	beq	213f0 <__assert_fail@plt+0xff3c>
   211a8:	ldr	r6, [r4, #36]	; 0x24
   211ac:	ldr	r5, [r4, #28]
   211b0:	cmp	r6, r1
   211b4:	movgt	r6, r1
   211b8:	cmp	r5, r6
   211bc:	blt	211c8 <__assert_fail@plt+0xfd14>
   211c0:	b	21214 <__assert_fail@plt+0xfd60>
   211c4:	ldr	r9, [r4, #24]
   211c8:	ldr	r1, [r4]
   211cc:	ldr	r0, [r4, #64]	; 0x40
   211d0:	add	r1, r1, r9
   211d4:	cmp	r0, #0
   211d8:	ldrb	r7, [r1, r5]
   211dc:	ldrbne	r7, [r0, r7]
   211e0:	add	r0, r7, #128	; 0x80
   211e4:	lsr	r0, r0, #7
   211e8:	cmp	r0, #2
   211ec:	bhi	211fc <__assert_fail@plt+0xfd48>
   211f0:	bl	11358 <__ctype_toupper_loc@plt>
   211f4:	ldr	r0, [r0]
   211f8:	ldr	r7, [r0, r7, lsl #2]
   211fc:	ldr	r0, [r4, #4]
   21200:	strb	r7, [r0, r5]
   21204:	add	r5, r5, #1
   21208:	cmp	r5, r6
   2120c:	blt	211c4 <__assert_fail@plt+0xfd10>
   21210:	mov	r5, r6
   21214:	str	r5, [r4, #28]
   21218:	str	r5, [r4, #32]
   2121c:	mov	r0, #0
   21220:	str	r0, [r4, #40]	; 0x28
   21224:	sub	sp, fp, #28
   21228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2122c:	ldr	r3, [r4]
   21230:	add	r0, r5, r0
   21234:	ldr	r1, [r4, #64]	; 0x40
   21238:	add	r0, r3, r0
   2123c:	cmp	r1, #0
   21240:	ldrb	r0, [r0, #-1]
   21244:	str	r2, [r4, #32]
   21248:	ldrbne	r0, [r1, r0]
   2124c:	ldr	r1, [r4, #68]	; 0x44
   21250:	ubfx	r2, r0, #5, #3
   21254:	and	r3, r0, #31
   21258:	ldr	r2, [r1, r2, lsl #2]
   2125c:	mov	r1, #1
   21260:	tst	r2, r1, lsl r3
   21264:	bne	21280 <__assert_fail@plt+0xfdcc>
   21268:	mov	r1, #0
   2126c:	cmp	r0, #10
   21270:	bne	21280 <__assert_fail@plt+0xfdcc>
   21274:	ldrb	r1, [r4, #77]	; 0x4d
   21278:	cmp	r1, #0
   2127c:	movwne	r1, #2
   21280:	str	r1, [r4, #60]	; 0x3c
   21284:	b	20e60 <__assert_fail@plt+0xf9ac>
   21288:	ldr	r1, [r4, #4]
   2128c:	ldr	r2, [r4, #68]	; 0x44
   21290:	ldrb	r0, [r1, r0]
   21294:	ubfx	r1, r0, #5, #3
   21298:	and	r3, r0, #31
   2129c:	ldr	r2, [r2, r1, lsl #2]
   212a0:	mov	r1, #1
   212a4:	tst	r2, r1, lsl r3
   212a8:	bne	212e0 <__assert_fail@plt+0xfe2c>
   212ac:	mov	r1, #0
   212b0:	cmp	r0, #10
   212b4:	beq	212d4 <__assert_fail@plt+0xfe20>
   212b8:	b	212e0 <__assert_fail@plt+0xfe2c>
   212bc:	ldrb	r0, [r4, #78]	; 0x4e
   212c0:	cmp	r0, #0
   212c4:	bne	2166c <__assert_fail@plt+0x101b8>
   212c8:	mov	r1, #0
   212cc:	cmp	r6, #10
   212d0:	bne	212e0 <__assert_fail@plt+0xfe2c>
   212d4:	ldrb	r1, [r4, #77]	; 0x4d
   212d8:	cmp	r1, #0
   212dc:	movwne	r1, #2
   212e0:	str	r1, [r4, #60]	; 0x3c
   212e4:	cmp	sl, r5
   212e8:	ldr	r2, [r4, #28]
   212ec:	bne	21530 <__assert_fail@plt+0x1007c>
   212f0:	cmp	r2, r5
   212f4:	ble	21530 <__assert_fail@plt+0x1007c>
   212f8:	ldr	r0, [r4, #12]
   212fc:	ldr	r0, [r0, r5, lsl #2]
   21300:	cmp	r0, r5
   21304:	bne	21530 <__assert_fail@plt+0x1007c>
   21308:	ldr	r0, [r4, #8]
   2130c:	sub	r2, r2, r5
   21310:	lsl	r2, r2, #2
   21314:	add	r1, r0, r5, lsl #2
   21318:	bl	1122c <memmove@plt>
   2131c:	ldr	r2, [r4, #28]
   21320:	ldr	r0, [r4, #4]
   21324:	add	r1, r0, r5
   21328:	sub	r2, r2, r5
   2132c:	bl	1122c <memmove@plt>
   21330:	ldr	r0, [r4, #28]
   21334:	ldr	r1, [r4, #32]
   21338:	sub	r0, r0, r5
   2133c:	sub	r1, r1, r5
   21340:	cmp	r0, #1
   21344:	str	r0, [r4, #28]
   21348:	str	r1, [r4, #32]
   2134c:	blt	20e60 <__assert_fail@plt+0xf9ac>
   21350:	ldr	r0, [r4, #12]
   21354:	mov	r2, #0
   21358:	add	r1, r0, r5, lsl #2
   2135c:	ldr	r3, [r1, r2, lsl #2]
   21360:	sub	r3, r3, r5
   21364:	str	r3, [r0, r2, lsl #2]
   21368:	add	r2, r2, #1
   2136c:	ldr	r3, [r4, #28]
   21370:	cmp	r2, r3
   21374:	blt	2135c <__assert_fail@plt+0xfea8>
   21378:	b	20e60 <__assert_fail@plt+0xf9ac>
   2137c:	mov	r0, r6
   21380:	bl	113b8 <iswalnum@plt>
   21384:	mov	r1, #1
   21388:	cmp	r6, #95	; 0x5f
   2138c:	beq	20e14 <__assert_fail@plt+0xf960>
   21390:	cmp	r0, #0
   21394:	beq	20dfc <__assert_fail@plt+0xf948>
   21398:	b	20e14 <__assert_fail@plt+0xf960>
   2139c:	sub	r0, r8, r9
   213a0:	str	r0, [r4, #28]
   213a4:	cmp	lr, #0
   213a8:	ble	213e8 <__assert_fail@plt+0xff34>
   213ac:	ldr	r1, [r4, #48]	; 0x30
   213b0:	sub	r0, lr, #1
   213b4:	cmp	r1, r0
   213b8:	beq	21660 <__assert_fail@plt+0x101ac>
   213bc:	ldr	r1, [r4, #80]	; 0x50
   213c0:	cmp	r1, #2
   213c4:	blt	2147c <__assert_fail@plt+0xffc8>
   213c8:	ldr	r0, [r4, #8]
   213cc:	sub	r0, r0, #4
   213d0:	ldr	r6, [r0, lr, lsl #2]
   213d4:	cmn	r6, #1
   213d8:	bne	214b0 <__assert_fail@plt+0xfffc>
   213dc:	sub	lr, lr, #1
   213e0:	cmp	lr, #0
   213e4:	bgt	213d0 <__assert_fail@plt+0xff1c>
   213e8:	ldr	r1, [r4, #60]	; 0x3c
   213ec:	b	214d4 <__assert_fail@plt+0x10020>
   213f0:	ldr	r3, [r4, #64]	; 0x40
   213f4:	cmp	r3, #0
   213f8:	beq	20ee8 <__assert_fail@plt+0xfa34>
   213fc:	ldr	r0, [r4, #36]	; 0x24
   21400:	ldr	r2, [r4, #28]
   21404:	cmp	r0, r1
   21408:	movgt	r0, r1
   2140c:	cmp	r2, r0
   21410:	bge	21464 <__assert_fail@plt+0xffb0>
   21414:	ldr	r7, [r4]
   21418:	add	r1, r2, r9
   2141c:	ldr	r6, [r4, #4]
   21420:	ldrb	r1, [r7, r1]
   21424:	ldrb	r1, [r3, r1]
   21428:	strb	r1, [r6, r2]
   2142c:	add	r1, r2, #1
   21430:	cmp	r1, r0
   21434:	bge	21460 <__assert_fail@plt+0xffac>
   21438:	ldm	r4, {r2, r3}
   2143c:	ldr	r7, [r4, #24]
   21440:	ldr	r6, [r4, #64]	; 0x40
   21444:	add	r2, r2, r7
   21448:	ldrb	r2, [r2, r1]
   2144c:	ldrb	r2, [r6, r2]
   21450:	strb	r2, [r3, r1]
   21454:	add	r1, r1, #1
   21458:	cmp	r1, r0
   2145c:	blt	21438 <__assert_fail@plt+0xff84>
   21460:	mov	r2, r0
   21464:	str	r2, [r4, #28]
   21468:	str	r2, [r4, #32]
   2146c:	mov	r0, #0
   21470:	str	r0, [r4, #40]	; 0x28
   21474:	sub	sp, fp, #28
   21478:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2147c:	ldr	r1, [r4, #4]
   21480:	ldr	r2, [r4, #68]	; 0x44
   21484:	ldrb	r0, [r1, r0]
   21488:	ubfx	r1, r0, #5, #3
   2148c:	and	r3, r0, #31
   21490:	ldr	r2, [r2, r1, lsl #2]
   21494:	mov	r1, #1
   21498:	tst	r2, r1, lsl r3
   2149c:	bne	214d4 <__assert_fail@plt+0x10020>
   214a0:	mov	r1, #0
   214a4:	cmp	r0, #10
   214a8:	beq	214c8 <__assert_fail@plt+0x10014>
   214ac:	b	214d4 <__assert_fail@plt+0x10020>
   214b0:	ldrb	r0, [r4, #78]	; 0x4e
   214b4:	cmp	r0, #0
   214b8:	bne	21704 <__assert_fail@plt+0x10250>
   214bc:	mov	r1, #0
   214c0:	cmp	r6, #10
   214c4:	bne	214d4 <__assert_fail@plt+0x10020>
   214c8:	ldrb	r1, [r4, #77]	; 0x4d
   214cc:	cmp	r1, #0
   214d0:	movwne	r1, #2
   214d4:	str	r1, [r4, #60]	; 0x3c
   214d8:	mov	r0, #0
   214dc:	ldr	r2, [r4, #28]
   214e0:	cmp	r2, #0
   214e4:	bne	21618 <__assert_fail@plt+0x10164>
   214e8:	str	r0, [r4, #32]
   214ec:	b	20e60 <__assert_fail@plt+0xf9ac>
   214f0:	mov	r2, #0
   214f4:	strb	r2, [r4, #76]	; 0x4c
   214f8:	sub	r2, r5, r9
   214fc:	ldr	r3, [r4, #44]	; 0x2c
   21500:	ldr	r7, [r4, #52]	; 0x34
   21504:	add	r3, r2, r3
   21508:	add	r2, r2, r7
   2150c:	str	r3, [r4, #48]	; 0x30
   21510:	str	r2, [r4, #56]	; 0x38
   21514:	b	20f18 <__assert_fail@plt+0xfa64>
   21518:	and	r0, r6, #2
   2151c:	eor	r1, r0, #10
   21520:	str	r1, [r4, #60]	; 0x3c
   21524:	cmp	sl, r5
   21528:	ldr	r2, [r4, #28]
   2152c:	beq	212f0 <__assert_fail@plt+0xfe3c>
   21530:	mov	r0, #0
   21534:	strb	r0, [r4, #76]	; 0x4c
   21538:	sub	r0, r5, r9
   2153c:	ldr	r1, [r4, #44]	; 0x2c
   21540:	ldr	r3, [r4, #52]	; 0x34
   21544:	add	r1, r0, r1
   21548:	add	r0, r0, r3
   2154c:	str	r1, [r4, #48]	; 0x30
   21550:	str	r0, [r4, #56]	; 0x38
   21554:	add	r0, r7, r8
   21558:	sub	r1, r0, #1
   2155c:	add	r0, r1, #1
   21560:	cmp	r0, #1
   21564:	blt	2157c <__assert_fail@plt+0x100c8>
   21568:	ldr	r3, [r4, #12]
   2156c:	ldr	r3, [r3, r1, lsl #2]
   21570:	sub	r1, r1, #1
   21574:	cmp	r3, r5
   21578:	beq	2155c <__assert_fail@plt+0x100a8>
   2157c:	cmp	r0, r2
   21580:	bge	215a0 <__assert_fail@plt+0x100ec>
   21584:	ldr	r1, [r4, #8]
   21588:	ldr	r3, [r1, r0, lsl #2]
   2158c:	cmn	r3, #1
   21590:	bne	215a0 <__assert_fail@plt+0x100ec>
   21594:	add	r0, r0, #1
   21598:	cmp	r0, r2
   2159c:	blt	21588 <__assert_fail@plt+0x100d4>
   215a0:	cmp	r0, r2
   215a4:	bne	215b8 <__assert_fail@plt+0x10104>
   215a8:	mov	r0, #0
   215ac:	str	r0, [r4, #28]
   215b0:	str	r0, [r4, #32]
   215b4:	b	20e60 <__assert_fail@plt+0xf9ac>
   215b8:	ldr	r1, [r4, #12]
   215bc:	ldr	r0, [r1, r0, lsl #2]
   215c0:	subs	r2, r0, r5
   215c4:	str	r2, [r4, #28]
   215c8:	beq	2160c <__assert_fail@plt+0x10158>
   215cc:	cmp	r2, #1
   215d0:	blt	215f4 <__assert_fail@plt+0x10140>
   215d4:	ldr	r0, [r4, #8]
   215d8:	mov	r1, #0
   215dc:	mvn	r3, #0
   215e0:	str	r3, [r0, r1, lsl #2]
   215e4:	add	r1, r1, #1
   215e8:	ldr	r2, [r4, #28]
   215ec:	cmp	r1, r2
   215f0:	blt	215e0 <__assert_fail@plt+0x1012c>
   215f4:	ldr	r0, [r4, #4]
   215f8:	mov	r1, #255	; 0xff
   215fc:	bl	113d0 <memset@plt>
   21600:	ldr	r0, [r4, #28]
   21604:	str	r0, [r4, #32]
   21608:	b	20e60 <__assert_fail@plt+0xf9ac>
   2160c:	mov	r0, #0
   21610:	str	r0, [r4, #32]
   21614:	b	20e60 <__assert_fail@plt+0xf9ac>
   21618:	cmp	r2, #1
   2161c:	blt	21640 <__assert_fail@plt+0x1018c>
   21620:	ldr	r0, [r4, #8]
   21624:	mov	r1, #0
   21628:	mvn	r3, #0
   2162c:	str	r3, [r0, r1, lsl #2]
   21630:	add	r1, r1, #1
   21634:	ldr	r2, [r4, #28]
   21638:	cmp	r1, r2
   2163c:	blt	2162c <__assert_fail@plt+0x10178>
   21640:	ldrb	r0, [r4, #75]	; 0x4b
   21644:	cmp	r0, #0
   21648:	beq	216b0 <__assert_fail@plt+0x101fc>
   2164c:	ldr	r0, [r4, #4]
   21650:	mov	r1, #255	; 0xff
   21654:	bl	113d0 <memset@plt>
   21658:	ldr	r0, [r4, #28]
   2165c:	b	214e8 <__assert_fail@plt+0x10034>
   21660:	and	r0, r6, #2
   21664:	eor	r1, r0, #10
   21668:	b	214d4 <__assert_fail@plt+0x10020>
   2166c:	mov	r0, r6
   21670:	bl	113b8 <iswalnum@plt>
   21674:	mov	r1, #1
   21678:	cmp	r6, #95	; 0x5f
   2167c:	beq	212e0 <__assert_fail@plt+0xfe2c>
   21680:	cmp	r0, #0
   21684:	beq	212c8 <__assert_fail@plt+0xfe14>
   21688:	b	212e0 <__assert_fail@plt+0xfe2c>
   2168c:	mov	r0, r7
   21690:	bl	113b8 <iswalnum@plt>
   21694:	mov	r1, #1
   21698:	cmp	r7, #95	; 0x5f
   2169c:	beq	214d4 <__assert_fail@plt+0x10020>
   216a0:	cmp	r0, #0
   216a4:	mov	r2, r7
   216a8:	beq	210a8 <__assert_fail@plt+0xfbf4>
   216ac:	b	214d4 <__assert_fail@plt+0x10020>
   216b0:	mov	r0, r2
   216b4:	str	r2, [r4, #32]
   216b8:	b	20e60 <__assert_fail@plt+0xf9ac>
   216bc:	cmp	r2, #1
   216c0:	blt	21724 <__assert_fail@plt+0x10270>
   216c4:	sub	r1, r7, #1
   216c8:	sub	r1, r1, r3
   216cc:	mvn	r3, #1
   216d0:	cmn	r1, #7
   216d4:	mvnle	r1, #6
   216d8:	sub	ip, r3, r1
   216dc:	add	r1, sp, #14
   216e0:	ldrb	r3, [r7, ip]
   216e4:	sub	lr, ip, #1
   216e8:	ldrb	r3, [r0, r3]
   216ec:	strb	r3, [r1, ip]
   216f0:	add	r3, ip, #1
   216f4:	mov	ip, lr
   216f8:	cmp	r3, #1
   216fc:	bgt	216e0 <__assert_fail@plt+0x1022c>
   21700:	b	20f94 <__assert_fail@plt+0xfae0>
   21704:	mov	r0, r6
   21708:	bl	113b8 <iswalnum@plt>
   2170c:	mov	r1, #1
   21710:	cmp	r6, #95	; 0x5f
   21714:	beq	214d4 <__assert_fail@plt+0x10020>
   21718:	cmp	r0, #0
   2171c:	beq	214bc <__assert_fail@plt+0x10008>
   21720:	b	214d4 <__assert_fail@plt+0x10020>
   21724:	add	r1, sp, #14
   21728:	b	20f94 <__assert_fail@plt+0xfae0>
   2172c:	push	{r4, r5, r6, sl, fp, lr}
   21730:	add	fp, sp, #16
   21734:	mov	r3, r2
   21738:	ldr	r2, [r0, #88]	; 0x58
   2173c:	mov	r5, r1
   21740:	mov	r4, r0
   21744:	mov	r1, r3
   21748:	bl	21978 <__assert_fail@plt+0x104c4>
   2174c:	ldr	r1, [r5, #8]
   21750:	cmp	r1, #1
   21754:	blt	218c8 <__assert_fail@plt+0x10414>
   21758:	ldr	r3, [r5, #12]
   2175c:	ldr	r5, [r4, #84]	; 0x54
   21760:	movw	lr, #65280	; 0xff00
   21764:	and	ip, r0, #8
   21768:	and	r2, r0, #2
   2176c:	tst	r0, #1
   21770:	movt	lr, #3
   21774:	ldr	r5, [r5]
   21778:	bne	217d0 <__assert_fail@plt+0x1031c>
   2177c:	cmp	r2, #0
   21780:	bne	21834 <__assert_fail@plt+0x10380>
   21784:	mov	r2, #0
   21788:	ldr	r0, [r3, r2, lsl #2]
   2178c:	add	r4, r5, r0, lsl #3
   21790:	ldr	r4, [r4, #4]
   21794:	uxtb	r6, r4
   21798:	cmp	r6, #2
   2179c:	bne	217c0 <__assert_fail@plt+0x1030c>
   217a0:	tst	r4, lr
   217a4:	beq	218cc <__assert_fail@plt+0x10418>
   217a8:	tst	r4, #9216	; 0x2400
   217ac:	bne	217c0 <__assert_fail@plt+0x1030c>
   217b0:	cmp	ip, #0
   217b4:	bne	218cc <__assert_fail@plt+0x10418>
   217b8:	ands	r4, r4, #32768	; 0x8000
   217bc:	beq	218cc <__assert_fail@plt+0x10418>
   217c0:	add	r2, r2, #1
   217c4:	cmp	r2, r1
   217c8:	blt	21788 <__assert_fail@plt+0x102d4>
   217cc:	b	218c8 <__assert_fail@plt+0x10414>
   217d0:	cmp	r2, #0
   217d4:	bne	21880 <__assert_fail@plt+0x103cc>
   217d8:	mov	r2, #0
   217dc:	ldr	r0, [r3, r2, lsl #2]
   217e0:	add	r4, r5, r0, lsl #3
   217e4:	ldr	r4, [r4, #4]
   217e8:	uxtb	r6, r4
   217ec:	cmp	r6, #2
   217f0:	bne	21804 <__assert_fail@plt+0x10350>
   217f4:	tst	r4, lr
   217f8:	beq	218cc <__assert_fail@plt+0x10418>
   217fc:	tst	r4, #10240	; 0x2800
   21800:	beq	21814 <__assert_fail@plt+0x10360>
   21804:	add	r2, r2, #1
   21808:	cmp	r2, r1
   2180c:	blt	217dc <__assert_fail@plt+0x10328>
   21810:	b	218c8 <__assert_fail@plt+0x10414>
   21814:	cmp	ip, #0
   21818:	bne	218cc <__assert_fail@plt+0x10418>
   2181c:	ands	r4, r4, #32768	; 0x8000
   21820:	popeq	{r4, r5, r6, sl, fp, pc}
   21824:	add	r2, r2, #1
   21828:	cmp	r2, r1
   2182c:	blt	217dc <__assert_fail@plt+0x10328>
   21830:	b	218c8 <__assert_fail@plt+0x10414>
   21834:	mov	r2, #0
   21838:	ldr	r0, [r3, r2, lsl #2]
   2183c:	add	r4, r5, r0, lsl #3
   21840:	ldr	r4, [r4, #4]
   21844:	uxtb	r6, r4
   21848:	cmp	r6, #2
   2184c:	bne	21870 <__assert_fail@plt+0x103bc>
   21850:	tst	r4, lr
   21854:	beq	218cc <__assert_fail@plt+0x10418>
   21858:	tst	r4, #1024	; 0x400
   2185c:	bne	21870 <__assert_fail@plt+0x103bc>
   21860:	cmp	ip, #0
   21864:	bne	218cc <__assert_fail@plt+0x10418>
   21868:	ands	r4, r4, #32768	; 0x8000
   2186c:	beq	218cc <__assert_fail@plt+0x10418>
   21870:	add	r2, r2, #1
   21874:	cmp	r2, r1
   21878:	blt	21838 <__assert_fail@plt+0x10384>
   2187c:	b	218c8 <__assert_fail@plt+0x10414>
   21880:	mov	r2, #0
   21884:	ldr	r0, [r3, r2, lsl #2]
   21888:	add	r4, r5, r0, lsl #3
   2188c:	ldr	r4, [r4, #4]
   21890:	uxtb	r6, r4
   21894:	cmp	r6, #2
   21898:	bne	218bc <__assert_fail@plt+0x10408>
   2189c:	tst	r4, lr
   218a0:	beq	218cc <__assert_fail@plt+0x10418>
   218a4:	tst	r4, #2048	; 0x800
   218a8:	bne	218bc <__assert_fail@plt+0x10408>
   218ac:	cmp	ip, #0
   218b0:	bne	218cc <__assert_fail@plt+0x10418>
   218b4:	ands	r4, r4, #32768	; 0x8000
   218b8:	beq	218cc <__assert_fail@plt+0x10418>
   218bc:	add	r2, r2, #1
   218c0:	cmp	r2, r1
   218c4:	blt	21884 <__assert_fail@plt+0x103d0>
   218c8:	mov	r0, #0
   218cc:	pop	{r4, r5, r6, sl, fp, pc}
   218d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   218d4:	add	fp, sp, #24
   218d8:	mov	r8, r0
   218dc:	ldr	r0, [r0, #124]	; 0x7c
   218e0:	cmp	r0, #1
   218e4:	blt	21968 <__assert_fail@plt+0x104b4>
   218e8:	mov	r7, #0
   218ec:	ldr	r0, [r8, #132]	; 0x84
   218f0:	ldr	r5, [r0, r7, lsl #2]
   218f4:	ldr	r0, [r5, #16]
   218f8:	cmp	r0, #1
   218fc:	blt	2192c <__assert_fail@plt+0x10478>
   21900:	mov	r4, #0
   21904:	ldr	r0, [r5, #20]
   21908:	ldr	r6, [r0, r4, lsl #2]
   2190c:	ldr	r0, [r6, #16]
   21910:	bl	2ae28 <__assert_fail@plt+0x19974>
   21914:	mov	r0, r6
   21918:	bl	2ae28 <__assert_fail@plt+0x19974>
   2191c:	ldr	r0, [r5, #16]
   21920:	add	r4, r4, #1
   21924:	cmp	r4, r0
   21928:	blt	21904 <__assert_fail@plt+0x10450>
   2192c:	ldr	r0, [r5, #20]
   21930:	bl	2ae28 <__assert_fail@plt+0x19974>
   21934:	ldr	r0, [r5, #8]
   21938:	cmp	r0, #0
   2193c:	beq	21950 <__assert_fail@plt+0x1049c>
   21940:	ldr	r0, [r0, #8]
   21944:	bl	2ae28 <__assert_fail@plt+0x19974>
   21948:	ldr	r0, [r5, #8]
   2194c:	bl	2ae28 <__assert_fail@plt+0x19974>
   21950:	mov	r0, r5
   21954:	bl	2ae28 <__assert_fail@plt+0x19974>
   21958:	ldr	r0, [r8, #124]	; 0x7c
   2195c:	add	r7, r7, #1
   21960:	cmp	r7, r0
   21964:	blt	218ec <__assert_fail@plt+0x10438>
   21968:	mov	r0, #0
   2196c:	str	r0, [r8, #108]	; 0x6c
   21970:	str	r0, [r8, #124]	; 0x7c
   21974:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21978:	push	{r4, r5, fp, lr}
   2197c:	add	fp, sp, #8
   21980:	mov	r4, r0
   21984:	cmn	r1, #1
   21988:	ldrle	r0, [r4, #60]	; 0x3c
   2198c:	pople	{r4, r5, fp, pc}
   21990:	ldr	r0, [r4, #48]	; 0x30
   21994:	cmp	r0, r1
   21998:	beq	21a34 <__assert_fail@plt+0x10580>
   2199c:	ldr	r0, [r4, #80]	; 0x50
   219a0:	cmp	r0, #2
   219a4:	blt	219f4 <__assert_fail@plt+0x10540>
   219a8:	ldr	r0, [r4, #8]
   219ac:	ldr	r5, [r0, r1, lsl #2]
   219b0:	cmn	r5, #1
   219b4:	bne	219d8 <__assert_fail@plt+0x10524>
   219b8:	cmp	r1, #0
   219bc:	sub	r2, r1, #1
   219c0:	ldrle	r0, [r4, #60]	; 0x3c
   219c4:	mov	r1, r2
   219c8:	pople	{r4, r5, fp, pc}
   219cc:	ldr	r5, [r0, r1, lsl #2]
   219d0:	cmn	r5, #1
   219d4:	beq	219b8 <__assert_fail@plt+0x10504>
   219d8:	ldrb	r0, [r4, #78]	; 0x4e
   219dc:	cmp	r0, #0
   219e0:	bne	21a40 <__assert_fail@plt+0x1058c>
   219e4:	mov	r0, #0
   219e8:	cmp	r5, #10
   219ec:	beq	21a24 <__assert_fail@plt+0x10570>
   219f0:	b	21a30 <__assert_fail@plt+0x1057c>
   219f4:	ldr	r0, [r4, #4]
   219f8:	ldr	r2, [r4, #68]	; 0x44
   219fc:	ldrb	r1, [r0, r1]
   21a00:	ubfx	r0, r1, #5, #3
   21a04:	and	r3, r1, #31
   21a08:	ldr	r2, [r2, r0, lsl #2]
   21a0c:	mov	r0, #1
   21a10:	tst	r2, r0, lsl r3
   21a14:	bne	21a30 <__assert_fail@plt+0x1057c>
   21a18:	mov	r0, #0
   21a1c:	cmp	r1, #10
   21a20:	popne	{r4, r5, fp, pc}
   21a24:	ldrb	r0, [r4, #77]	; 0x4d
   21a28:	cmp	r0, #0
   21a2c:	movwne	r0, #2
   21a30:	pop	{r4, r5, fp, pc}
   21a34:	and	r0, r2, #2
   21a38:	eor	r0, r0, #10
   21a3c:	pop	{r4, r5, fp, pc}
   21a40:	mov	r0, r5
   21a44:	bl	113b8 <iswalnum@plt>
   21a48:	mov	r1, r0
   21a4c:	mov	r0, #1
   21a50:	cmp	r5, #95	; 0x5f
   21a54:	beq	21a30 <__assert_fail@plt+0x1057c>
   21a58:	cmp	r1, #0
   21a5c:	beq	219e4 <__assert_fail@plt+0x10530>
   21a60:	b	21a30 <__assert_fail@plt+0x1057c>
   21a64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a68:	add	fp, sp, #28
   21a6c:	sub	sp, sp, #4
   21a70:	mov	sl, r0
   21a74:	ldr	r0, [r1, #4]
   21a78:	cmp	r0, #1
   21a7c:	blt	21b48 <__assert_fail@plt+0x10694>
   21a80:	ldr	r7, [sl, #84]	; 0x54
   21a84:	mov	r8, r2
   21a88:	mov	r5, r1
   21a8c:	mov	r4, #0
   21a90:	b	21ab8 <__assert_fail@plt+0x10604>
   21a94:	ldr	r0, [sl, #132]	; 0x84
   21a98:	lsl	r1, r9, #3
   21a9c:	bl	2ac90 <__assert_fail@plt+0x197dc>
   21aa0:	cmp	r0, #0
   21aa4:	beq	21b54 <__assert_fail@plt+0x106a0>
   21aa8:	lsl	r1, r9, #1
   21aac:	str	r1, [sl, #128]	; 0x80
   21ab0:	str	r0, [sl, #132]	; 0x84
   21ab4:	b	21b00 <__assert_fail@plt+0x1064c>
   21ab8:	ldr	r1, [r5, #8]
   21abc:	ldr	r6, [r1, r4, lsl #2]
   21ac0:	ldr	r1, [r7]
   21ac4:	add	r2, r1, r6, lsl #3
   21ac8:	ldrb	r2, [r2, #4]
   21acc:	cmp	r2, #8
   21ad0:	bne	21b3c <__assert_fail@plt+0x10688>
   21ad4:	ldr	r1, [r1, r6, lsl #3]
   21ad8:	cmp	r1, #31
   21adc:	bgt	21b3c <__assert_fail@plt+0x10688>
   21ae0:	ldr	r2, [r7, #80]	; 0x50
   21ae4:	mov	r3, #1
   21ae8:	tst	r2, r3, lsl r1
   21aec:	beq	21b3c <__assert_fail@plt+0x10688>
   21af0:	ldr	r9, [sl, #124]	; 0x7c
   21af4:	ldr	r0, [sl, #128]	; 0x80
   21af8:	cmp	r9, r0
   21afc:	beq	21a94 <__assert_fail@plt+0x105e0>
   21b00:	mov	r0, #1
   21b04:	mov	r1, #24
   21b08:	bl	2ac0c <__assert_fail@plt+0x19758>
   21b0c:	ldr	r1, [sl, #124]	; 0x7c
   21b10:	ldr	r2, [sl, #132]	; 0x84
   21b14:	str	r0, [r2, r1, lsl #2]
   21b18:	ldr	r0, [sl, #132]	; 0x84
   21b1c:	ldr	r0, [r0, r1, lsl #2]
   21b20:	cmp	r0, #0
   21b24:	beq	21b54 <__assert_fail@plt+0x106a0>
   21b28:	add	r1, r1, #1
   21b2c:	str	r6, [r0, #4]
   21b30:	str	r1, [sl, #124]	; 0x7c
   21b34:	str	r8, [r0]
   21b38:	ldr	r0, [r5, #4]
   21b3c:	add	r4, r4, #1
   21b40:	cmp	r4, r0
   21b44:	blt	21ab8 <__assert_fail@plt+0x10604>
   21b48:	mov	r0, #0
   21b4c:	sub	sp, fp, #28
   21b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b54:	mov	r0, #12
   21b58:	sub	sp, fp, #28
   21b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b64:	add	fp, sp, #28
   21b68:	sub	sp, sp, #76	; 0x4c
   21b6c:	mov	r9, r0
   21b70:	ldr	r0, [r1, #4]
   21b74:	cmp	r0, #1
   21b78:	blt	2253c <__assert_fail@plt+0x11088>
   21b7c:	ldr	r2, [r9, #84]	; 0x54
   21b80:	ldr	r5, [r9, #40]	; 0x28
   21b84:	mov	r3, #0
   21b88:	str	r9, [sp, #40]	; 0x28
   21b8c:	str	r1, [sp, #16]
   21b90:	str	r5, [sp, #52]	; 0x34
   21b94:	str	r2, [sp, #20]
   21b98:	b	21be0 <__assert_fail@plt+0x1072c>
   21b9c:	ldr	r0, [r9, #88]	; 0x58
   21ba0:	and	r0, r0, #2
   21ba4:	eor	r1, r0, #10
   21ba8:	and	r0, r1, #1
   21bac:	tst	r6, #1024	; 0x400
   21bb0:	eor	r2, r0, #1
   21bb4:	bne	21c74 <__assert_fail@plt+0x107c0>
   21bb8:	b	21cec <__assert_fail@plt+0x10838>
   21bbc:	mov	r0, r4
   21bc0:	bl	113b8 <iswalnum@plt>
   21bc4:	mov	r1, #1
   21bc8:	mov	r2, #0
   21bcc:	cmp	r4, #95	; 0x5f
   21bd0:	beq	21cec <__assert_fail@plt+0x10838>
   21bd4:	cmp	r0, #0
   21bd8:	beq	21cc4 <__assert_fail@plt+0x10810>
   21bdc:	b	21cec <__assert_fail@plt+0x10838>
   21be0:	ldr	r0, [r1, #8]
   21be4:	str	r3, [sp, #24]
   21be8:	ldr	r3, [r0, r3, lsl #2]
   21bec:	ldr	r0, [r2]
   21bf0:	add	r7, r0, r3, lsl #3
   21bf4:	mov	r1, r3
   21bf8:	str	r3, [sp, #48]	; 0x30
   21bfc:	ldr	r6, [r7, #4]!
   21c00:	uxtb	r0, r6
   21c04:	cmp	r0, #4
   21c08:	bne	22520 <__assert_fail@plt+0x1106c>
   21c0c:	movw	r0, #65280	; 0xff00
   21c10:	movt	r0, #3
   21c14:	tst	r6, r0
   21c18:	beq	21d20 <__assert_fail@plt+0x1086c>
   21c1c:	cmn	r5, #1
   21c20:	ble	21c60 <__assert_fail@plt+0x107ac>
   21c24:	ldr	r0, [r9, #48]	; 0x30
   21c28:	cmp	r0, r5
   21c2c:	beq	21b9c <__assert_fail@plt+0x106e8>
   21c30:	ldr	r0, [r9, #80]	; 0x50
   21c34:	cmp	r0, #2
   21c38:	blt	21c80 <__assert_fail@plt+0x107cc>
   21c3c:	ldr	r0, [r9, #8]
   21c40:	mov	r1, r5
   21c44:	ldr	r4, [r0, r1, lsl #2]
   21c48:	cmn	r4, #1
   21c4c:	bne	21cb8 <__assert_fail@plt+0x10804>
   21c50:	sub	r2, r1, #1
   21c54:	cmp	r1, #0
   21c58:	mov	r1, r2
   21c5c:	bgt	21c44 <__assert_fail@plt+0x10790>
   21c60:	ldr	r1, [r9, #60]	; 0x3c
   21c64:	and	r0, r1, #1
   21c68:	tst	r6, #1024	; 0x400
   21c6c:	eor	r2, r0, #1
   21c70:	beq	21cec <__assert_fail@plt+0x10838>
   21c74:	cmp	r0, #0
   21c78:	beq	22520 <__assert_fail@plt+0x1106c>
   21c7c:	b	21cec <__assert_fail@plt+0x10838>
   21c80:	ldr	r0, [r9, #4]
   21c84:	ldr	r1, [r9, #68]	; 0x44
   21c88:	ldrb	r0, [r0, r5]
   21c8c:	ubfx	r2, r0, #5, #3
   21c90:	and	r4, r0, #31
   21c94:	ldr	r3, [r1, r2, lsl #2]
   21c98:	mov	r1, #1
   21c9c:	mov	r2, #0
   21ca0:	tst	r3, r1, lsl r4
   21ca4:	bne	21cec <__assert_fail@plt+0x10838>
   21ca8:	mov	r1, #0
   21cac:	cmp	r0, #10
   21cb0:	beq	21cd0 <__assert_fail@plt+0x1081c>
   21cb4:	b	21cdc <__assert_fail@plt+0x10828>
   21cb8:	ldrb	r0, [r9, #78]	; 0x4e
   21cbc:	cmp	r0, #0
   21cc0:	bne	21bbc <__assert_fail@plt+0x10708>
   21cc4:	mov	r1, #0
   21cc8:	cmp	r4, #10
   21ccc:	bne	21cdc <__assert_fail@plt+0x10828>
   21cd0:	ldrb	r1, [r9, #77]	; 0x4d
   21cd4:	cmp	r1, #0
   21cd8:	movwne	r1, #2
   21cdc:	and	r0, r1, #1
   21ce0:	tst	r6, #1024	; 0x400
   21ce4:	eor	r2, r0, #1
   21ce8:	bne	21c74 <__assert_fail@plt+0x107c0>
   21cec:	ldr	r0, [r7]
   21cf0:	cmp	r2, #0
   21cf4:	bne	21d00 <__assert_fail@plt+0x1084c>
   21cf8:	ands	r2, r0, #2048	; 0x800
   21cfc:	bne	22520 <__assert_fail@plt+0x1106c>
   21d00:	tst	r1, #2
   21d04:	bne	21d10 <__assert_fail@plt+0x1085c>
   21d08:	ands	r2, r0, #8192	; 0x2000
   21d0c:	bne	22520 <__assert_fail@plt+0x1106c>
   21d10:	tst	r1, #8
   21d14:	bne	21d20 <__assert_fail@plt+0x1086c>
   21d18:	ands	r0, r0, #32768	; 0x8000
   21d1c:	bne	22520 <__assert_fail@plt+0x1106c>
   21d20:	ldr	r2, [r9, #108]	; 0x6c
   21d24:	ldr	r0, [r9, #84]	; 0x54
   21d28:	ldr	ip, [r9, #4]
   21d2c:	cmp	r2, #1
   21d30:	str	r0, [sp, #28]
   21d34:	str	r2, [sp, #12]
   21d38:	blt	21dc8 <__assert_fail@plt+0x10914>
   21d3c:	ldr	r1, [r9, #116]	; 0x74
   21d40:	mov	r0, #0
   21d44:	mov	r4, #1
   21d48:	add	r3, r2, r0
   21d4c:	add	r3, r3, r3, lsr #31
   21d50:	asr	r7, r3, #1
   21d54:	add	r6, r7, r7, lsl #1
   21d58:	add	r6, r1, r6, lsl #3
   21d5c:	ldr	r6, [r6, #4]
   21d60:	cmp	r6, r5
   21d64:	addlt	r0, r4, r3, asr #1
   21d68:	movge	r2, r7
   21d6c:	cmp	r0, r2
   21d70:	blt	21d48 <__assert_fail@plt+0x10894>
   21d74:	ldr	r1, [sp, #12]
   21d78:	ldr	r7, [sp, #28]
   21d7c:	cmp	r0, r1
   21d80:	bge	21ddc <__assert_fail@plt+0x10928>
   21d84:	cmn	r0, #1
   21d88:	beq	21ddc <__assert_fail@plt+0x10928>
   21d8c:	ldr	r1, [r9, #116]	; 0x74
   21d90:	add	r0, r0, r0, lsl #1
   21d94:	add	r0, r1, r0, lsl #3
   21d98:	ldr	r1, [r0, #4]
   21d9c:	cmp	r1, r5
   21da0:	bne	21ddc <__assert_fail@plt+0x10928>
   21da4:	ldr	r1, [r0]
   21da8:	ldr	r2, [sp, #48]	; 0x30
   21dac:	cmp	r1, r2
   21db0:	beq	22248 <__assert_fail@plt+0x10d94>
   21db4:	ldrb	r1, [r0, #20]
   21db8:	add	r0, r0, #24
   21dbc:	cmp	r1, #0
   21dc0:	bne	21da4 <__assert_fail@plt+0x108f0>
   21dc4:	b	21ddc <__assert_fail@plt+0x10928>
   21dc8:	mov	r0, #0
   21dcc:	ldr	r1, [sp, #12]
   21dd0:	ldr	r7, [sp, #28]
   21dd4:	cmp	r0, r1
   21dd8:	blt	21d84 <__assert_fail@plt+0x108d0>
   21ddc:	ldr	r0, [r9, #124]	; 0x7c
   21de0:	cmp	r0, #1
   21de4:	blt	22248 <__assert_fail@plt+0x10d94>
   21de8:	ldr	r0, [r7]
   21dec:	ldr	r1, [sp, #48]	; 0x30
   21df0:	mov	r2, #0
   21df4:	ldr	r1, [r0, r1, lsl #3]
   21df8:	str	r1, [sp, #36]	; 0x24
   21dfc:	b	21e04 <__assert_fail@plt+0x10950>
   21e00:	ldr	r0, [r7]
   21e04:	ldr	r1, [r9, #132]	; 0x84
   21e08:	str	r2, [sp, #32]
   21e0c:	ldr	lr, [r1, r2, lsl #2]
   21e10:	ldr	r1, [lr, #4]
   21e14:	ldr	r0, [r0, r1, lsl #3]
   21e18:	ldr	r1, [sp, #36]	; 0x24
   21e1c:	cmp	r0, r1
   21e20:	bne	221e4 <__assert_fail@plt+0x10d30>
   21e24:	ldr	r0, [lr, #16]
   21e28:	ldr	r2, [lr]
   21e2c:	mov	r8, #0
   21e30:	str	lr, [sp, #44]	; 0x2c
   21e34:	cmp	r0, #1
   21e38:	blt	21e48 <__assert_fail@plt+0x10994>
   21e3c:	ldr	r6, [sp, #52]	; 0x34
   21e40:	mov	r7, r2
   21e44:	b	22138 <__assert_fail@plt+0x10c84>
   21e48:	ldr	r6, [sp, #52]	; 0x34
   21e4c:	ldr	r7, [sp, #28]
   21e50:	cmp	r8, r0
   21e54:	blt	221e0 <__assert_fail@plt+0x10d2c>
   21e58:	ldr	r5, [sp, #52]	; 0x34
   21e5c:	cmp	r8, #0
   21e60:	addne	r2, r2, #1
   21e64:	cmp	r2, r5
   21e68:	bgt	221e4 <__assert_fail@plt+0x10d30>
   21e6c:	b	22008 <__assert_fail@plt+0x10b54>
   21e70:	ldr	r0, [sp, #40]	; 0x28
   21e74:	cmn	r4, #1
   21e78:	beq	220a0 <__assert_fail@plt+0x10bec>
   21e7c:	ldr	r1, [lr, #8]
   21e80:	str	r6, [fp, #-48]	; 0xffffffd0
   21e84:	mov	r6, ip
   21e88:	cmp	r1, #0
   21e8c:	beq	21ea8 <__assert_fail@plt+0x109f4>
   21e90:	ldr	r3, [lr]
   21e94:	ldr	r2, [lr, #4]
   21e98:	mov	r7, #9
   21e9c:	stm	sp, {r4, sl}
   21ea0:	str	r7, [sp, #8]
   21ea4:	b	21eec <__assert_fail@plt+0x10a38>
   21ea8:	ldr	r0, [lr]
   21eac:	add	r1, sl, #1
   21eb0:	mov	r9, #12
   21eb4:	sub	r1, r1, r0
   21eb8:	mov	r0, #12
   21ebc:	bl	2ac0c <__assert_fail@plt+0x19758>
   21ec0:	ldr	r2, [sp, #44]	; 0x2c
   21ec4:	cmp	r0, #0
   21ec8:	str	r0, [r2, #8]
   21ecc:	beq	22540 <__assert_fail@plt+0x1108c>
   21ed0:	mov	r1, r0
   21ed4:	ldr	r3, [r2]
   21ed8:	ldr	r2, [r2, #4]
   21edc:	stm	sp, {r4, sl}
   21ee0:	mov	r0, #9
   21ee4:	str	r0, [sp, #8]
   21ee8:	ldr	r0, [sp, #40]	; 0x28
   21eec:	bl	22e5c <__assert_fail@plt+0x119a8>
   21ef0:	mov	ip, r6
   21ef4:	ldr	lr, [sp, #44]	; 0x2c
   21ef8:	ldr	r6, [fp, #-48]	; 0xffffffd0
   21efc:	ldr	r5, [sp, #52]	; 0x34
   21f00:	mov	r9, r0
   21f04:	cmp	r0, #1
   21f08:	mov	r7, r8
   21f0c:	beq	220a8 <__assert_fail@plt+0x10bf4>
   21f10:	cmp	r9, #0
   21f14:	bne	22540 <__assert_fail@plt+0x1108c>
   21f18:	ldr	r1, [lr, #12]
   21f1c:	ldr	r0, [lr, #16]
   21f20:	ldr	r5, [sp, #52]	; 0x34
   21f24:	cmp	r0, r1
   21f28:	beq	21fdc <__assert_fail@plt+0x10b28>
   21f2c:	mov	r0, #1
   21f30:	mov	r1, #20
   21f34:	bl	2ac0c <__assert_fail@plt+0x19758>
   21f38:	ldr	r6, [sp, #40]	; 0x28
   21f3c:	cmp	r0, #0
   21f40:	beq	22558 <__assert_fail@plt+0x110a4>
   21f44:	ldr	r1, [sp, #44]	; 0x2c
   21f48:	mov	r2, r0
   21f4c:	ldr	r0, [r1, #16]
   21f50:	ldr	r3, [r1, #20]
   21f54:	str	r2, [r3, r0, lsl #2]
   21f58:	stm	r2, {r4, sl}
   21f5c:	add	r0, r0, #1
   21f60:	ldr	r3, [sp, #48]	; 0x30
   21f64:	str	r0, [r1, #16]
   21f68:	mov	r0, r6
   21f6c:	str	r5, [sp]
   21f70:	bl	22c88 <__assert_fail@plt+0x117d4>
   21f74:	cmp	r0, #1
   21f78:	bhi	22550 <__assert_fail@plt+0x1109c>
   21f7c:	ldr	ip, [r6, #4]
   21f80:	ldr	r7, [sp, #28]
   21f84:	ldr	lr, [sp, #44]	; 0x2c
   21f88:	ldr	r6, [fp, #-48]	; 0xffffffd0
   21f8c:	ldr	r9, [sp, #40]	; 0x28
   21f90:	add	r2, sl, #1
   21f94:	cmp	sl, r5
   21f98:	blt	22008 <__assert_fail@plt+0x10b54>
   21f9c:	b	221e4 <__assert_fail@plt+0x10d30>
   21fa0:	ldr	r0, [r9, #48]	; 0x30
   21fa4:	cmp	r6, r0
   21fa8:	bge	221e4 <__assert_fail@plt+0x10d30>
   21fac:	add	r4, r6, #1
   21fb0:	mov	r0, r9
   21fb4:	mov	r8, r6
   21fb8:	mov	r1, r4
   21fbc:	bl	22598 <__assert_fail@plt+0x110e4>
   21fc0:	cmp	r0, #0
   21fc4:	bne	22550 <__assert_fail@plt+0x1109c>
   21fc8:	ldr	ip, [r9, #4]
   21fcc:	ldr	lr, [sp, #44]	; 0x2c
   21fd0:	mov	r6, r8
   21fd4:	mov	r1, r9
   21fd8:	b	22028 <__assert_fail@plt+0x10b74>
   21fdc:	mov	r1, #1
   21fe0:	mov	r7, lr
   21fe4:	orr	r6, r1, r0, lsl #1
   21fe8:	ldr	r0, [lr, #20]
   21fec:	lsl	r1, r6, #2
   21ff0:	bl	2ac90 <__assert_fail@plt+0x197dc>
   21ff4:	cmp	r0, #0
   21ff8:	beq	22558 <__assert_fail@plt+0x110a4>
   21ffc:	str	r6, [r7, #12]
   22000:	str	r0, [r7, #20]
   22004:	b	21f2c <__assert_fail@plt+0x10a78>
   22008:	ldr	r0, [lr]
   2200c:	mov	sl, r2
   22010:	cmp	r2, r0
   22014:	ble	22040 <__assert_fail@plt+0x10b8c>
   22018:	ldr	r0, [r9, #28]
   2201c:	cmp	r6, r0
   22020:	bge	21fa0 <__assert_fail@plt+0x10aec>
   22024:	add	r4, r6, #1
   22028:	add	r1, ip, sl
   2202c:	ldrb	r0, [ip, r6]
   22030:	ldrb	r1, [r1, #-1]
   22034:	cmp	r0, r1
   22038:	beq	22044 <__assert_fail@plt+0x10b90>
   2203c:	b	221e4 <__assert_fail@plt+0x10d30>
   22040:	mov	r4, r6
   22044:	ldr	r0, [r9, #100]	; 0x64
   22048:	mov	r6, r4
   2204c:	ldr	r2, [r0, sl, lsl #2]
   22050:	cmp	r2, #0
   22054:	beq	220a8 <__assert_fail@plt+0x10bf4>
   22058:	ldr	r0, [r2, #8]
   2205c:	cmp	r0, #1
   22060:	blt	220a8 <__assert_fail@plt+0x10bf4>
   22064:	ldr	r1, [r7]
   22068:	ldr	r2, [r2, #12]
   2206c:	ldr	r5, [sp, #36]	; 0x24
   22070:	mov	r8, r7
   22074:	mov	r3, #0
   22078:	ldr	r4, [r2, r3, lsl #2]
   2207c:	add	r7, r1, r4, lsl #3
   22080:	ldrb	r7, [r7, #4]
   22084:	cmp	r7, #9
   22088:	ldreq	r7, [r1, r4, lsl #3]
   2208c:	cmpeq	r7, r5
   22090:	beq	21e70 <__assert_fail@plt+0x109bc>
   22094:	add	r3, r3, #1
   22098:	cmp	r3, r0
   2209c:	blt	22078 <__assert_fail@plt+0x10bc4>
   220a0:	ldr	r5, [sp, #52]	; 0x34
   220a4:	mov	r7, r8
   220a8:	ldr	r9, [sp, #40]	; 0x28
   220ac:	add	r2, sl, #1
   220b0:	cmp	sl, r5
   220b4:	blt	22008 <__assert_fail@plt+0x10b54>
   220b8:	b	221e4 <__assert_fail@plt+0x10d30>
   220bc:	ldr	r2, [r9, #48]	; 0x30
   220c0:	cmp	r5, r2
   220c4:	bgt	22218 <__assert_fail@plt+0x10d64>
   220c8:	ldr	r0, [r9, #36]	; 0x24
   220cc:	ldr	r3, [r9, #104]	; 0x68
   220d0:	cmp	r0, r5
   220d4:	cmple	r0, r2
   220d8:	blt	220e8 <__assert_fail@plt+0x10c34>
   220dc:	cmp	r1, r5
   220e0:	cmple	r1, r2
   220e4:	bge	22104 <__assert_fail@plt+0x10c50>
   220e8:	ldr	r0, [sp, #40]	; 0x28
   220ec:	add	r1, r5, #1
   220f0:	mov	r9, r3
   220f4:	bl	22598 <__assert_fail@plt+0x110e4>
   220f8:	mov	r3, r9
   220fc:	cmp	r0, #0
   22100:	bne	22550 <__assert_fail@plt+0x1109c>
   22104:	ldr	r9, [sp, #40]	; 0x28
   22108:	cmp	r5, r3
   2210c:	ble	22130 <__assert_fail@plt+0x10c7c>
   22110:	sub	r0, r5, r3
   22114:	mov	r1, #0
   22118:	lsl	r2, r0, #2
   2211c:	ldr	r0, [r9, #100]	; 0x64
   22120:	add	r0, r0, r3, lsl #2
   22124:	add	r0, r0, #4
   22128:	bl	113d0 <memset@plt>
   2212c:	str	r5, [r9, #104]	; 0x68
   22130:	ldr	ip, [r9, #4]
   22134:	b	22164 <__assert_fail@plt+0x10cb0>
   22138:	ldr	r1, [lr, #20]
   2213c:	ldr	sl, [r1, r8, lsl #2]
   22140:	ldr	r1, [sl, #4]
   22144:	sub	r4, r1, r7
   22148:	str	r1, [fp, #-48]	; 0xffffffd0
   2214c:	cmp	r4, #1
   22150:	blt	22184 <__assert_fail@plt+0x10cd0>
   22154:	ldr	r1, [r9, #28]
   22158:	add	r5, r4, r6
   2215c:	cmp	r5, r1
   22160:	bgt	220bc <__assert_fail@plt+0x10c08>
   22164:	add	r0, ip, r6
   22168:	add	r1, ip, r7
   2216c:	mov	r2, r4
   22170:	mov	r5, ip
   22174:	bl	11298 <memcmp@plt>
   22178:	ldr	lr, [sp, #44]	; 0x2c
   2217c:	cmp	r0, #0
   22180:	bne	221fc <__assert_fail@plt+0x10d48>
   22184:	ldr	r0, [sp, #52]	; 0x34
   22188:	ldr	r3, [sp, #48]	; 0x30
   2218c:	mov	r1, lr
   22190:	mov	r2, sl
   22194:	mov	r5, lr
   22198:	str	r0, [sp]
   2219c:	mov	r0, r9
   221a0:	bl	22c88 <__assert_fail@plt+0x117d4>
   221a4:	cmp	r0, #1
   221a8:	bhi	22550 <__assert_fail@plt+0x1109c>
   221ac:	ldr	r2, [fp, #-48]	; 0xffffffd0
   221b0:	ldr	r0, [r5, #16]
   221b4:	ldr	ip, [r9, #4]
   221b8:	add	r8, r8, #1
   221bc:	add	r6, r4, r6
   221c0:	mov	lr, r5
   221c4:	mov	r1, r9
   221c8:	cmp	r8, r0
   221cc:	mov	r7, r2
   221d0:	blt	22138 <__assert_fail@plt+0x10c84>
   221d4:	ldr	r7, [sp, #28]
   221d8:	cmp	r8, r0
   221dc:	bge	21e58 <__assert_fail@plt+0x109a4>
   221e0:	ldr	r5, [sp, #52]	; 0x34
   221e4:	ldr	r2, [sp, #32]
   221e8:	ldr	r0, [r9, #124]	; 0x7c
   221ec:	add	r2, r2, #1
   221f0:	cmp	r2, r0
   221f4:	blt	21e00 <__assert_fail@plt+0x1094c>
   221f8:	b	2222c <__assert_fail@plt+0x10d78>
   221fc:	ldr	r0, [lr, #16]
   22200:	mov	ip, r5
   22204:	mov	r2, r7
   22208:	ldr	r7, [sp, #28]
   2220c:	cmp	r8, r0
   22210:	blt	221e0 <__assert_fail@plt+0x10d2c>
   22214:	b	21e58 <__assert_fail@plt+0x109a4>
   22218:	mov	r2, r7
   2221c:	ldr	r7, [sp, #28]
   22220:	cmp	r8, r0
   22224:	blt	221e0 <__assert_fail@plt+0x10d2c>
   22228:	b	21e58 <__assert_fail@plt+0x109a4>
   2222c:	mov	r1, #0
   22230:	ldr	r0, [r9, #108]	; 0x6c
   22234:	str	r1, [fp, #-32]	; 0xffffffe0
   22238:	ldr	r1, [sp, #12]
   2223c:	cmp	r1, r0
   22240:	bge	22520 <__assert_fail@plt+0x1106c>
   22244:	b	22290 <__assert_fail@plt+0x10ddc>
   22248:	mov	r0, #0
   2224c:	str	r0, [fp, #-32]	; 0xffffffe0
   22250:	b	22520 <__assert_fail@plt+0x1106c>
   22254:	ldr	r0, [r3, #88]	; 0x58
   22258:	and	r0, r0, #2
   2225c:	eor	sl, r0, #10
   22260:	b	223c4 <__assert_fail@plt+0x10f10>
   22264:	mov	r0, r4
   22268:	bl	113b8 <iswalnum@plt>
   2226c:	mov	sl, #1
   22270:	cmp	r4, #95	; 0x5f
   22274:	beq	22288 <__assert_fail@plt+0x10dd4>
   22278:	ldr	r3, [sp, #40]	; 0x28
   2227c:	cmp	r0, #0
   22280:	beq	223ac <__assert_fail@plt+0x10ef8>
   22284:	b	223c4 <__assert_fail@plt+0x10f10>
   22288:	ldr	r3, [sp, #40]	; 0x28
   2228c:	b	223c4 <__assert_fail@plt+0x10f10>
   22290:	ldr	r0, [r9, #116]	; 0x74
   22294:	mov	r5, r1
   22298:	add	r1, r1, r1, lsl #1
   2229c:	ldr	r3, [sp, #48]	; 0x30
   222a0:	ldr	r2, [r0, r1, lsl #3]
   222a4:	cmp	r2, r3
   222a8:	bne	22504 <__assert_fail@plt+0x11050>
   222ac:	add	r0, r0, r1, lsl #3
   222b0:	ldr	r2, [sp, #52]	; 0x34
   222b4:	ldr	r1, [r0, #4]
   222b8:	cmp	r1, r2
   222bc:	bne	22504 <__assert_fail@plt+0x11050>
   222c0:	ldr	r2, [r0, #8]
   222c4:	ldr	r6, [r0, #12]
   222c8:	ldr	r0, [sp, #20]
   222cc:	ldr	r8, [r0, #24]
   222d0:	cmp	r6, r2
   222d4:	bne	222f0 <__assert_fail@plt+0x10e3c>
   222d8:	ldr	r1, [sp, #48]	; 0x30
   222dc:	ldr	r0, [r0, #20]
   222e0:	add	r1, r1, r1, lsl #1
   222e4:	add	r0, r0, r1, lsl #2
   222e8:	ldr	r0, [r0, #8]
   222ec:	b	222fc <__assert_fail@plt+0x10e48>
   222f0:	ldr	r0, [r0, #12]
   222f4:	ldr	r1, [sp, #48]	; 0x30
   222f8:	add	r0, r0, r1, lsl #2
   222fc:	ldr	r9, [r0]
   22300:	ldr	r0, [sp, #52]	; 0x34
   22304:	str	r2, [fp, #-48]	; 0xffffffd0
   22308:	add	r0, r6, r0
   2230c:	sub	r7, r0, r2
   22310:	cmp	r7, #0
   22314:	ble	2235c <__assert_fail@plt+0x10ea8>
   22318:	ldr	r3, [sp, #40]	; 0x28
   2231c:	sub	r0, r7, #1
   22320:	ldr	r1, [r3, #48]	; 0x30
   22324:	cmp	r1, r0
   22328:	beq	22254 <__assert_fail@plt+0x10da0>
   2232c:	ldr	r1, [r3, #80]	; 0x50
   22330:	cmp	r1, #2
   22334:	blt	22368 <__assert_fail@plt+0x10eb4>
   22338:	ldr	r0, [r3, #8]
   2233c:	mov	r1, r7
   22340:	sub	r0, r0, #4
   22344:	ldr	r4, [r0, r1, lsl #2]
   22348:	cmn	r4, #1
   2234c:	bne	2239c <__assert_fail@plt+0x10ee8>
   22350:	sub	r1, r1, #1
   22354:	cmp	r1, #0
   22358:	bgt	22344 <__assert_fail@plt+0x10e90>
   2235c:	ldr	r3, [sp, #40]	; 0x28
   22360:	ldr	sl, [r3, #60]	; 0x3c
   22364:	b	223c4 <__assert_fail@plt+0x10f10>
   22368:	ldr	r1, [r3, #4]
   2236c:	ldr	r2, [r3, #68]	; 0x44
   22370:	mov	sl, #1
   22374:	ldrb	r0, [r1, r0]
   22378:	ubfx	r1, r0, #5, #3
   2237c:	ldr	r1, [r2, r1, lsl #2]
   22380:	and	r2, r0, #31
   22384:	tst	r1, sl, lsl r2
   22388:	bne	223c4 <__assert_fail@plt+0x10f10>
   2238c:	mov	sl, #0
   22390:	cmp	r0, #10
   22394:	beq	223b8 <__assert_fail@plt+0x10f04>
   22398:	b	223c4 <__assert_fail@plt+0x10f10>
   2239c:	ldr	r3, [sp, #40]	; 0x28
   223a0:	ldrb	r0, [r3, #78]	; 0x4e
   223a4:	cmp	r0, #0
   223a8:	bne	22264 <__assert_fail@plt+0x10db0>
   223ac:	mov	sl, #0
   223b0:	cmp	r4, #10
   223b4:	bne	223c4 <__assert_fail@plt+0x10f10>
   223b8:	ldrb	sl, [r3, #77]	; 0x4d
   223bc:	cmp	sl, #0
   223c0:	movwne	sl, #2
   223c4:	ldr	r0, [r3, #100]	; 0x64
   223c8:	ldr	r2, [sp, #52]	; 0x34
   223cc:	add	r1, r9, r9, lsl #1
   223d0:	mov	r4, r3
   223d4:	add	r8, r8, r1, lsl #2
   223d8:	ldr	r2, [r0, r2, lsl #2]
   223dc:	ldr	r0, [r0, r7, lsl #2]
   223e0:	cmp	r2, #0
   223e4:	ldrne	r2, [r2, #8]
   223e8:	moveq	r2, #0
   223ec:	cmp	r0, #0
   223f0:	str	r2, [sp, #44]	; 0x2c
   223f4:	beq	22460 <__assert_fail@plt+0x10fac>
   223f8:	ldr	r1, [r0, #40]	; 0x28
   223fc:	sub	r4, fp, #44	; 0x2c
   22400:	mov	r2, r8
   22404:	mov	r0, r4
   22408:	bl	229fc <__assert_fail@plt+0x11548>
   2240c:	cmp	r0, #0
   22410:	str	r0, [fp, #-32]	; 0xffffffe0
   22414:	bne	22560 <__assert_fail@plt+0x110ac>
   22418:	ldr	r1, [sp, #20]
   2241c:	sub	r0, fp, #32
   22420:	mov	r2, r4
   22424:	mov	r3, sl
   22428:	bl	201bc <__assert_fail@plt+0xed08>
   2242c:	ldr	r4, [sp, #40]	; 0x28
   22430:	ldr	r1, [r4, #100]	; 0x64
   22434:	str	r0, [r1, r7, lsl #2]
   22438:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2243c:	bl	2ae28 <__assert_fail@plt+0x19974>
   22440:	ldr	r0, [r4, #100]	; 0x64
   22444:	ldr	r1, [r0, r7, lsl #2]
   22448:	cmp	r1, #0
   2244c:	bne	224a8 <__assert_fail@plt+0x10ff4>
   22450:	ldr	r9, [fp, #-32]	; 0xffffffe0
   22454:	cmp	r9, #0
   22458:	beq	224a8 <__assert_fail@plt+0x10ff4>
   2245c:	b	22544 <__assert_fail@plt+0x11090>
   22460:	ldr	r1, [sp, #20]
   22464:	sub	r0, fp, #32
   22468:	mov	r2, r8
   2246c:	mov	r3, sl
   22470:	bl	201bc <__assert_fail@plt+0xed08>
   22474:	ldr	r1, [r4, #100]	; 0x64
   22478:	str	r0, [r1, r7, lsl #2]
   2247c:	ldr	r0, [r4, #100]	; 0x64
   22480:	ldr	r1, [r0, r7, lsl #2]
   22484:	cmp	r1, #0
   22488:	bne	224a8 <__assert_fail@plt+0x10ff4>
   2248c:	ldr	r9, [fp, #-32]	; 0xffffffe0
   22490:	ldr	r1, [fp, #-48]	; 0xffffffd0
   22494:	cmp	r9, #0
   22498:	bne	22544 <__assert_fail@plt+0x11090>
   2249c:	cmp	r6, r1
   224a0:	bne	22504 <__assert_fail@plt+0x11050>
   224a4:	b	224b4 <__assert_fail@plt+0x11000>
   224a8:	ldr	r1, [fp, #-48]	; 0xffffffd0
   224ac:	cmp	r6, r1
   224b0:	bne	22504 <__assert_fail@plt+0x11050>
   224b4:	ldr	r1, [sp, #52]	; 0x34
   224b8:	ldr	r0, [r0, r1, lsl #2]
   224bc:	ldr	r1, [sp, #44]	; 0x2c
   224c0:	ldr	r0, [r0, #8]
   224c4:	cmp	r0, r1
   224c8:	ble	22504 <__assert_fail@plt+0x11050>
   224cc:	ldr	r4, [sp, #40]	; 0x28
   224d0:	ldr	r2, [sp, #52]	; 0x34
   224d4:	mov	r1, r8
   224d8:	mov	r0, r4
   224dc:	bl	21a64 <__assert_fail@plt+0x105b0>
   224e0:	cmp	r0, #0
   224e4:	str	r0, [fp, #-32]	; 0xffffffe0
   224e8:	bne	22578 <__assert_fail@plt+0x110c4>
   224ec:	mov	r0, r4
   224f0:	mov	r1, r8
   224f4:	bl	21b60 <__assert_fail@plt+0x106ac>
   224f8:	cmp	r0, #0
   224fc:	str	r0, [fp, #-32]	; 0xffffffe0
   22500:	bne	22588 <__assert_fail@plt+0x110d4>
   22504:	ldr	r9, [sp, #40]	; 0x28
   22508:	mov	r1, r5
   2250c:	add	r1, r5, #1
   22510:	ldr	r5, [sp, #52]	; 0x34
   22514:	ldr	r0, [r9, #108]	; 0x6c
   22518:	cmp	r1, r0
   2251c:	blt	22290 <__assert_fail@plt+0x10ddc>
   22520:	ldr	r1, [sp, #16]
   22524:	ldr	r3, [sp, #24]
   22528:	ldr	r2, [sp, #20]
   2252c:	ldr	r0, [r1, #4]
   22530:	add	r3, r3, #1
   22534:	cmp	r3, r0
   22538:	blt	21be0 <__assert_fail@plt+0x1072c>
   2253c:	mov	r9, #0
   22540:	str	r9, [fp, #-32]	; 0xffffffe0
   22544:	mov	r0, r9
   22548:	sub	sp, fp, #28
   2254c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22550:	mov	r9, r0
   22554:	b	22540 <__assert_fail@plt+0x1108c>
   22558:	mov	r9, #12
   2255c:	b	22540 <__assert_fail@plt+0x1108c>
   22560:	mov	r9, r0
   22564:	ldr	r0, [fp, #-36]	; 0xffffffdc
   22568:	bl	2ae28 <__assert_fail@plt+0x19974>
   2256c:	mov	r0, r9
   22570:	sub	sp, fp, #28
   22574:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22578:	mov	r9, r0
   2257c:	mov	r0, r9
   22580:	sub	sp, fp, #28
   22584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22588:	mov	r9, r0
   2258c:	mov	r0, r9
   22590:	sub	sp, fp, #28
   22594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22598:	push	{r4, r5, r6, r7, fp, lr}
   2259c:	add	fp, sp, #16
   225a0:	mov	r4, r0
   225a4:	ldr	r0, [r0, #36]	; 0x24
   225a8:	mov	r5, #12
   225ac:	cmn	r0, #-536870910	; 0xe0000002
   225b0:	bhi	227a0 <__assert_fail@plt+0x112ec>
   225b4:	ldr	r6, [r4, #48]	; 0x30
   225b8:	ldr	r2, [r4, #80]	; 0x50
   225bc:	cmp	r6, r0, lsl #1
   225c0:	lslge	r6, r0, #1
   225c4:	cmp	r6, r1
   225c8:	movle	r6, r1
   225cc:	cmp	r2, #2
   225d0:	blt	22618 <__assert_fail@plt+0x11164>
   225d4:	cmn	r6, #-1073741823	; 0xc0000001
   225d8:	bhi	227a0 <__assert_fail@plt+0x112ec>
   225dc:	ldr	r0, [r4, #8]
   225e0:	lsl	r7, r6, #2
   225e4:	mov	r1, r7
   225e8:	bl	2ac90 <__assert_fail@plt+0x197dc>
   225ec:	cmp	r0, #0
   225f0:	beq	227a0 <__assert_fail@plt+0x112ec>
   225f4:	str	r0, [r4, #8]
   225f8:	ldr	r0, [r4, #12]
   225fc:	cmp	r0, #0
   22600:	beq	22618 <__assert_fail@plt+0x11164>
   22604:	mov	r1, r7
   22608:	bl	2ac90 <__assert_fail@plt+0x197dc>
   2260c:	cmp	r0, #0
   22610:	beq	227a0 <__assert_fail@plt+0x112ec>
   22614:	str	r0, [r4, #12]
   22618:	ldrb	r0, [r4, #75]	; 0x4b
   2261c:	cmp	r0, #0
   22620:	beq	2263c <__assert_fail@plt+0x11188>
   22624:	ldr	r0, [r4, #4]
   22628:	mov	r1, r6
   2262c:	bl	2ac90 <__assert_fail@plt+0x197dc>
   22630:	cmp	r0, #0
   22634:	beq	227a0 <__assert_fail@plt+0x112ec>
   22638:	str	r0, [r4, #4]
   2263c:	str	r6, [r4, #36]	; 0x24
   22640:	ldr	r0, [r4, #100]	; 0x64
   22644:	cmp	r0, #0
   22648:	beq	22664 <__assert_fail@plt+0x111b0>
   2264c:	mov	r1, #4
   22650:	add	r1, r1, r6, lsl #2
   22654:	bl	2ac90 <__assert_fail@plt+0x197dc>
   22658:	cmp	r0, #0
   2265c:	beq	227a0 <__assert_fail@plt+0x112ec>
   22660:	str	r0, [r4, #100]	; 0x64
   22664:	ldrb	r1, [r4, #72]	; 0x48
   22668:	ldr	r0, [r4, #80]	; 0x50
   2266c:	cmp	r1, #0
   22670:	beq	22690 <__assert_fail@plt+0x111dc>
   22674:	cmp	r0, #2
   22678:	blt	226a4 <__assert_fail@plt+0x111f0>
   2267c:	mov	r0, r4
   22680:	bl	1a170 <__assert_fail@plt+0x8cbc>
   22684:	cmp	r0, #0
   22688:	popne	{r4, r5, r6, r7, fp, pc}
   2268c:	b	2279c <__assert_fail@plt+0x112e8>
   22690:	cmp	r0, #2
   22694:	blt	2271c <__assert_fail@plt+0x11268>
   22698:	mov	r0, r4
   2269c:	bl	1a830 <__assert_fail@plt+0x937c>
   226a0:	b	2279c <__assert_fail@plt+0x112e8>
   226a4:	ldr	r6, [r4, #36]	; 0x24
   226a8:	ldr	r0, [r4, #48]	; 0x30
   226ac:	ldr	r5, [r4, #28]
   226b0:	cmp	r6, r0
   226b4:	movgt	r6, r0
   226b8:	cmp	r5, r6
   226bc:	bge	22710 <__assert_fail@plt+0x1125c>
   226c0:	ldr	r1, [r4]
   226c4:	ldr	r2, [r4, #24]
   226c8:	ldr	r0, [r4, #64]	; 0x40
   226cc:	add	r1, r1, r2
   226d0:	cmp	r0, #0
   226d4:	ldrb	r7, [r1, r5]
   226d8:	ldrbne	r7, [r0, r7]
   226dc:	add	r0, r7, #128	; 0x80
   226e0:	lsr	r0, r0, #7
   226e4:	cmp	r0, #2
   226e8:	bhi	226f8 <__assert_fail@plt+0x11244>
   226ec:	bl	11358 <__ctype_toupper_loc@plt>
   226f0:	ldr	r0, [r0]
   226f4:	ldr	r7, [r0, r7, lsl #2]
   226f8:	ldr	r0, [r4, #4]
   226fc:	strb	r7, [r0, r5]
   22700:	add	r5, r5, #1
   22704:	cmp	r5, r6
   22708:	blt	226c0 <__assert_fail@plt+0x1120c>
   2270c:	mov	r5, r6
   22710:	str	r5, [r4, #28]
   22714:	str	r5, [r4, #32]
   22718:	b	2279c <__assert_fail@plt+0x112e8>
   2271c:	ldr	r2, [r4, #64]	; 0x40
   22720:	cmp	r2, #0
   22724:	beq	2279c <__assert_fail@plt+0x112e8>
   22728:	ldr	r0, [r4, #36]	; 0x24
   2272c:	ldr	r3, [r4, #48]	; 0x30
   22730:	ldr	r1, [r4, #28]
   22734:	cmp	r0, r3
   22738:	movgt	r0, r3
   2273c:	cmp	r1, r0
   22740:	bge	22794 <__assert_fail@plt+0x112e0>
   22744:	ldm	r4, {r3, r7}
   22748:	ldr	r6, [r4, #24]
   2274c:	add	r6, r6, r1
   22750:	ldrb	r3, [r3, r6]
   22754:	ldrb	r2, [r2, r3]
   22758:	strb	r2, [r7, r1]
   2275c:	add	r1, r1, #1
   22760:	cmp	r1, r0
   22764:	bge	22790 <__assert_fail@plt+0x112dc>
   22768:	ldm	r4, {r2, r3}
   2276c:	ldr	r7, [r4, #24]
   22770:	ldr	r6, [r4, #64]	; 0x40
   22774:	add	r2, r2, r7
   22778:	ldrb	r2, [r2, r1]
   2277c:	ldrb	r2, [r6, r2]
   22780:	strb	r2, [r3, r1]
   22784:	add	r1, r1, #1
   22788:	cmp	r1, r0
   2278c:	blt	22768 <__assert_fail@plt+0x112b4>
   22790:	mov	r1, r0
   22794:	str	r1, [r4, #28]
   22798:	str	r1, [r4, #32]
   2279c:	mov	r5, #0
   227a0:	mov	r0, r5
   227a4:	pop	{r4, r5, r6, r7, fp, pc}
   227a8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   227ac:	add	fp, sp, #24
   227b0:	sub	sp, sp, #16
   227b4:	mov	r9, r0
   227b8:	mov	r4, r1
   227bc:	ldr	r5, [r1, #40]	; 0x28
   227c0:	ldr	r7, [r1, #84]	; 0x54
   227c4:	ldr	r0, [r1, #100]	; 0x64
   227c8:	ldr	r1, [r1, #104]	; 0x68
   227cc:	mov	r6, r2
   227d0:	cmp	r5, r1
   227d4:	ble	227f4 <__assert_fail@plt+0x11340>
   227d8:	str	r6, [r0, r5, lsl #2]
   227dc:	str	r5, [r4, #104]	; 0x68
   227e0:	cmp	r6, #0
   227e4:	ldrne	r0, [r7, #76]	; 0x4c
   227e8:	cmpne	r0, #0
   227ec:	beq	22948 <__assert_fail@plt+0x11494>
   227f0:	b	22954 <__assert_fail@plt+0x114a0>
   227f4:	ldr	r1, [r0, r5, lsl #2]
   227f8:	cmp	r1, #0
   227fc:	beq	22878 <__assert_fail@plt+0x113c4>
   22800:	ldr	r2, [r1, #40]	; 0x28
   22804:	cmp	r6, #0
   22808:	beq	228c4 <__assert_fail@plt+0x11410>
   2280c:	ldr	r8, [r6, #40]	; 0x28
   22810:	mov	r0, sp
   22814:	mov	r1, r8
   22818:	bl	229fc <__assert_fail@plt+0x11548>
   2281c:	cmp	r0, #0
   22820:	str	r0, [r9]
   22824:	bne	229cc <__assert_fail@plt+0x11518>
   22828:	ldr	r0, [r4, #40]	; 0x28
   2282c:	cmp	r0, #0
   22830:	ble	22870 <__assert_fail@plt+0x113bc>
   22834:	ldr	r2, [r4, #48]	; 0x30
   22838:	sub	r1, r0, #1
   2283c:	cmp	r2, r1
   22840:	beq	229bc <__assert_fail@plt+0x11508>
   22844:	ldr	r2, [r4, #80]	; 0x50
   22848:	cmp	r2, #2
   2284c:	blt	22890 <__assert_fail@plt+0x113dc>
   22850:	ldr	r1, [r4, #8]
   22854:	sub	r1, r1, #4
   22858:	ldr	r6, [r1, r0, lsl #2]
   2285c:	cmn	r6, #1
   22860:	bne	228e8 <__assert_fail@plt+0x11434>
   22864:	sub	r0, r0, #1
   22868:	cmp	r0, #0
   2286c:	bgt	22858 <__assert_fail@plt+0x113a4>
   22870:	ldr	r3, [r4, #60]	; 0x3c
   22874:	b	2290c <__assert_fail@plt+0x11458>
   22878:	str	r6, [r0, r5, lsl #2]
   2287c:	cmp	r6, #0
   22880:	ldrne	r0, [r7, #76]	; 0x4c
   22884:	cmpne	r0, #0
   22888:	beq	22948 <__assert_fail@plt+0x11494>
   2288c:	b	22954 <__assert_fail@plt+0x114a0>
   22890:	ldr	r0, [r4, #4]
   22894:	ldr	r2, [r4, #68]	; 0x44
   22898:	mov	r3, #1
   2289c:	ldrb	r0, [r0, r1]
   228a0:	ubfx	r1, r0, #5, #3
   228a4:	ldr	r1, [r2, r1, lsl #2]
   228a8:	and	r2, r0, #31
   228ac:	tst	r1, r3, lsl r2
   228b0:	bne	2290c <__assert_fail@plt+0x11458>
   228b4:	mov	r3, #0
   228b8:	cmp	r0, #10
   228bc:	beq	22900 <__assert_fail@plt+0x1144c>
   228c0:	b	2290c <__assert_fail@plt+0x11458>
   228c4:	ldr	r0, [r2, #8]
   228c8:	vldr	d16, [r2]
   228cc:	mov	r8, #0
   228d0:	str	r0, [sp, #8]
   228d4:	mov	r0, r5
   228d8:	vstr	d16, [sp]
   228dc:	cmp	r0, #0
   228e0:	bgt	22834 <__assert_fail@plt+0x11380>
   228e4:	b	22870 <__assert_fail@plt+0x113bc>
   228e8:	ldrb	r0, [r4, #78]	; 0x4e
   228ec:	cmp	r0, #0
   228f0:	bne	229dc <__assert_fail@plt+0x11528>
   228f4:	mov	r3, #0
   228f8:	cmp	r6, #10
   228fc:	bne	2290c <__assert_fail@plt+0x11458>
   22900:	ldrb	r3, [r4, #77]	; 0x4d
   22904:	cmp	r3, #0
   22908:	movwne	r3, #2
   2290c:	mov	r2, sp
   22910:	mov	r0, r9
   22914:	mov	r1, r7
   22918:	bl	201bc <__assert_fail@plt+0xed08>
   2291c:	mov	r6, r0
   22920:	ldr	r0, [r4, #100]	; 0x64
   22924:	cmp	r8, #0
   22928:	str	r6, [r0, r5, lsl #2]
   2292c:	beq	22938 <__assert_fail@plt+0x11484>
   22930:	ldr	r0, [sp, #8]
   22934:	bl	2ae28 <__assert_fail@plt+0x19974>
   22938:	cmp	r6, #0
   2293c:	ldrne	r0, [r7, #76]	; 0x4c
   22940:	cmpne	r0, #0
   22944:	bne	22954 <__assert_fail@plt+0x114a0>
   22948:	mov	r0, r6
   2294c:	sub	sp, fp, #24
   22950:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22954:	add	r7, r6, #4
   22958:	mov	r0, r4
   2295c:	mov	r2, r5
   22960:	mov	r1, r7
   22964:	bl	21a64 <__assert_fail@plt+0x105b0>
   22968:	cmp	r0, #0
   2296c:	str	r0, [r9]
   22970:	bne	229ac <__assert_fail@plt+0x114f8>
   22974:	ldrb	r0, [r6, #52]	; 0x34
   22978:	tst	r0, #64	; 0x40
   2297c:	beq	22948 <__assert_fail@plt+0x11494>
   22980:	mov	r0, r4
   22984:	mov	r1, r7
   22988:	bl	21b60 <__assert_fail@plt+0x106ac>
   2298c:	str	r0, [r9]
   22990:	cmp	r0, #0
   22994:	mov	r6, #0
   22998:	ldreq	r0, [r4, #100]	; 0x64
   2299c:	ldreq	r6, [r0, r5, lsl #2]
   229a0:	mov	r0, r6
   229a4:	sub	sp, fp, #24
   229a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   229ac:	mov	r6, #0
   229b0:	mov	r0, r6
   229b4:	sub	sp, fp, #24
   229b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   229bc:	ldr	r0, [r4, #88]	; 0x58
   229c0:	and	r0, r0, #2
   229c4:	eor	r3, r0, #10
   229c8:	b	2290c <__assert_fail@plt+0x11458>
   229cc:	mov	r6, #0
   229d0:	mov	r0, r6
   229d4:	sub	sp, fp, #24
   229d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   229dc:	mov	r0, r6
   229e0:	bl	113b8 <iswalnum@plt>
   229e4:	mov	r3, #1
   229e8:	cmp	r6, #95	; 0x5f
   229ec:	beq	2290c <__assert_fail@plt+0x11458>
   229f0:	cmp	r0, #0
   229f4:	beq	228f4 <__assert_fail@plt+0x11440>
   229f8:	b	2290c <__assert_fail@plt+0x11458>
   229fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a00:	add	fp, sp, #28
   22a04:	sub	sp, sp, #20
   22a08:	mov	sl, r2
   22a0c:	cmp	r1, #0
   22a10:	str	r0, [sp, #16]
   22a14:	beq	22a7c <__assert_fail@plt+0x115c8>
   22a18:	ldr	r0, [r1, #4]
   22a1c:	mov	r8, r1
   22a20:	cmp	sl, #0
   22a24:	beq	22a38 <__assert_fail@plt+0x11584>
   22a28:	cmp	r0, #1
   22a2c:	ldrge	r1, [sl, #4]
   22a30:	cmpge	r1, #1
   22a34:	bge	22af8 <__assert_fail@plt+0x11644>
   22a38:	cmp	r0, #1
   22a3c:	blt	22a7c <__assert_fail@plt+0x115c8>
   22a40:	ldr	r1, [sp, #16]
   22a44:	str	r0, [r1, #4]
   22a48:	ldr	r1, [r8, #4]
   22a4c:	cmp	r1, #1
   22a50:	blt	22adc <__assert_fail@plt+0x11628>
   22a54:	ldr	r4, [sp, #16]
   22a58:	str	r0, [r4]
   22a5c:	lsl	r0, r0, #2
   22a60:	bl	2ac60 <__assert_fail@plt+0x197ac>
   22a64:	cmp	r0, #0
   22a68:	str	r0, [r4, #8]
   22a6c:	beq	22c6c <__assert_fail@plt+0x117b8>
   22a70:	ldr	r2, [r8, #4]
   22a74:	ldr	r1, [r8, #8]
   22a78:	b	22ac8 <__assert_fail@plt+0x11614>
   22a7c:	cmp	sl, #0
   22a80:	beq	22adc <__assert_fail@plt+0x11628>
   22a84:	ldr	r0, [sl, #4]
   22a88:	cmp	r0, #1
   22a8c:	blt	22adc <__assert_fail@plt+0x11628>
   22a90:	ldr	r1, [sp, #16]
   22a94:	str	r0, [r1, #4]
   22a98:	ldr	r1, [sl, #4]
   22a9c:	cmp	r1, #1
   22aa0:	blt	22adc <__assert_fail@plt+0x11628>
   22aa4:	ldr	r4, [sp, #16]
   22aa8:	str	r0, [r4]
   22aac:	lsl	r0, r0, #2
   22ab0:	bl	2ac60 <__assert_fail@plt+0x197ac>
   22ab4:	cmp	r0, #0
   22ab8:	str	r0, [r4, #8]
   22abc:	beq	22c6c <__assert_fail@plt+0x117b8>
   22ac0:	ldr	r2, [sl, #4]
   22ac4:	ldr	r1, [sl, #8]
   22ac8:	lsl	r2, r2, #2
   22acc:	bl	1125c <memcpy@plt>
   22ad0:	mov	r0, #0
   22ad4:	sub	sp, fp, #28
   22ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22adc:	ldr	r1, [sp, #16]
   22ae0:	mov	r0, #0
   22ae4:	str	r0, [r1]
   22ae8:	str	r0, [r1, #4]
   22aec:	str	r0, [r1, #8]
   22af0:	sub	sp, fp, #28
   22af4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22af8:	ldr	r4, [sp, #16]
   22afc:	add	r0, r1, r0
   22b00:	str	r0, [r4]
   22b04:	lsl	r0, r0, #2
   22b08:	bl	2ac60 <__assert_fail@plt+0x197ac>
   22b0c:	cmp	r0, #0
   22b10:	str	r0, [r4, #8]
   22b14:	beq	22c7c <__assert_fail@plt+0x117c8>
   22b18:	ldr	r9, [sl, #4]
   22b1c:	ldr	lr, [r8, #4]
   22b20:	mov	r1, #0
   22b24:	mov	r7, #0
   22b28:	cmp	r9, #0
   22b2c:	movwgt	r1, #1
   22b30:	cmp	lr, #1
   22b34:	blt	22c00 <__assert_fail@plt+0x1174c>
   22b38:	mov	r2, #0
   22b3c:	mov	ip, #0
   22b40:	str	r2, [sp, #8]
   22b44:	mov	r2, #0
   22b48:	str	r2, [sp, #12]
   22b4c:	mov	r2, #0
   22b50:	ldr	r4, [sp, #12]
   22b54:	mov	r7, ip
   22b58:	tst	r1, #1
   22b5c:	beq	22c30 <__assert_fail@plt+0x1177c>
   22b60:	ldr	r1, [sl, #8]
   22b64:	ldr	r5, [r1, r7, lsl #2]
   22b68:	ldr	r1, [r8, #8]
   22b6c:	ldr	r3, [r1, r2, lsl #2]
   22b70:	cmp	r3, r5
   22b74:	ble	22b9c <__assert_fail@plt+0x116e8>
   22b78:	add	r7, r7, #1
   22b7c:	mov	r1, #0
   22b80:	str	r5, [r0, r4, lsl #2]
   22b84:	add	r4, r4, #1
   22b88:	cmp	r9, r7
   22b8c:	movwgt	r1, #1
   22b90:	cmp	lr, r2
   22b94:	bgt	22b58 <__assert_fail@plt+0x116a4>
   22b98:	b	22c04 <__assert_fail@plt+0x11750>
   22b9c:	str	r3, [r0, r4, lsl #2]
   22ba0:	ldr	r6, [sp, #8]
   22ba4:	add	r1, r7, #1
   22ba8:	mov	ip, r7
   22bac:	add	r2, r2, #1
   22bb0:	ldr	r9, [sl, #4]
   22bb4:	ldr	lr, [r8, #4]
   22bb8:	moveq	ip, r1
   22bbc:	str	r1, [sp, #4]
   22bc0:	mov	r1, #0
   22bc4:	sub	r6, r6, #1
   22bc8:	cmp	r9, ip
   22bcc:	str	r6, [sp, #8]
   22bd0:	add	r6, r4, #1
   22bd4:	movwgt	r1, #1
   22bd8:	cmp	lr, r2
   22bdc:	str	r6, [sp, #12]
   22be0:	bgt	22b50 <__assert_fail@plt+0x1169c>
   22be4:	ldr	r2, [sp, #4]
   22be8:	cmp	r3, r5
   22bec:	add	r4, r4, #1
   22bf0:	moveq	r7, r2
   22bf4:	cmp	r1, #0
   22bf8:	bne	22c0c <__assert_fail@plt+0x11758>
   22bfc:	b	22c58 <__assert_fail@plt+0x117a4>
   22c00:	mov	r4, #0
   22c04:	cmp	r1, #0
   22c08:	beq	22c58 <__assert_fail@plt+0x117a4>
   22c0c:	ldr	r1, [sl, #8]
   22c10:	sub	r2, r9, r7
   22c14:	add	r0, r0, r4, lsl #2
   22c18:	lsl	r2, r2, #2
   22c1c:	add	r1, r1, r7, lsl #2
   22c20:	bl	1125c <memcpy@plt>
   22c24:	sub	r0, r4, r7
   22c28:	add	r4, r0, r9
   22c2c:	b	22c58 <__assert_fail@plt+0x117a4>
   22c30:	ldr	r1, [r8, #8]
   22c34:	add	r0, r0, r4, lsl #2
   22c38:	add	r1, r1, r2, lsl #2
   22c3c:	sub	r2, lr, r2
   22c40:	lsl	r2, r2, #2
   22c44:	bl	1125c <memcpy@plt>
   22c48:	ldr	r0, [r8, #4]
   22c4c:	ldr	r1, [sp, #8]
   22c50:	add	r0, r0, r1
   22c54:	add	r4, r0, r4
   22c58:	ldr	r0, [sp, #16]
   22c5c:	str	r4, [r0, #4]
   22c60:	mov	r0, #0
   22c64:	sub	sp, fp, #28
   22c68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22c6c:	ldr	r1, [sp, #16]
   22c70:	mov	r0, #0
   22c74:	str	r0, [r1]
   22c78:	str	r0, [r1, #4]
   22c7c:	mov	r0, #12
   22c80:	sub	sp, fp, #28
   22c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22c88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22c8c:	add	fp, sp, #28
   22c90:	sub	sp, sp, #12
   22c94:	mov	r6, r2
   22c98:	mov	r7, r3
   22c9c:	ldr	r2, [r2]
   22ca0:	ldr	r9, [fp, #8]
   22ca4:	mov	r4, r0
   22ca8:	mov	r0, #8
   22cac:	mov	r8, r1
   22cb0:	ldr	r3, [r6, #4]
   22cb4:	str	r0, [sp, #8]
   22cb8:	add	r1, r6, #8
   22cbc:	mov	r0, r4
   22cc0:	stm	sp, {r7, r9}
   22cc4:	bl	22e5c <__assert_fail@plt+0x119a8>
   22cc8:	mov	r5, r0
   22ccc:	cmp	r0, #0
   22cd0:	beq	22ce0 <__assert_fail@plt+0x1182c>
   22cd4:	mov	r0, r5
   22cd8:	sub	sp, fp, #28
   22cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22ce0:	ldr	r0, [r4, #108]	; 0x6c
   22ce4:	ldr	r1, [r4, #112]	; 0x70
   22ce8:	ldr	sl, [r6, #4]
   22cec:	ldr	r5, [r8]
   22cf0:	cmp	r0, r1
   22cf4:	blt	22d44 <__assert_fail@plt+0x11890>
   22cf8:	ldr	r0, [r4, #116]	; 0x74
   22cfc:	add	r1, r1, r1, lsl #1
   22d00:	lsl	r1, r1, #4
   22d04:	bl	2ac90 <__assert_fail@plt+0x197dc>
   22d08:	cmp	r0, #0
   22d0c:	beq	22e44 <__assert_fail@plt+0x11990>
   22d10:	str	r0, [r4, #116]	; 0x74
   22d14:	ldr	r1, [r4, #108]	; 0x6c
   22d18:	ldr	r2, [r4, #112]	; 0x70
   22d1c:	add	r1, r1, r1, lsl #1
   22d20:	add	r0, r0, r1, lsl #3
   22d24:	add	r1, r2, r2, lsl #1
   22d28:	lsl	r2, r1, #3
   22d2c:	mov	r1, #0
   22d30:	bl	113d0 <memset@plt>
   22d34:	ldr	r1, [r4, #112]	; 0x70
   22d38:	ldr	r0, [r4, #108]	; 0x6c
   22d3c:	lsl	r1, r1, #1
   22d40:	str	r1, [r4, #112]	; 0x70
   22d44:	ldr	r1, [r4, #116]	; 0x74
   22d48:	cmp	r0, #1
   22d4c:	blt	22d6c <__assert_fail@plt+0x118b8>
   22d50:	sub	r2, r0, #1
   22d54:	add	r2, r2, r2, lsl #1
   22d58:	add	r2, r1, r2, lsl #3
   22d5c:	ldr	r3, [r2, #4]
   22d60:	cmp	r3, r9
   22d64:	moveq	r3, #1
   22d68:	strbeq	r3, [r2, #20]
   22d6c:	add	r2, r0, r0, lsl #1
   22d70:	cmp	sl, r5
   22d74:	mov	r3, #0
   22d78:	add	r0, r0, #1
   22d7c:	str	r7, [r1, r2, lsl #3]!
   22d80:	mov	r2, #0
   22d84:	mvneq	r3, #0
   22d88:	str	r9, [r1, #4]
   22d8c:	str	r5, [r1, #8]
   22d90:	str	sl, [r1, #12]
   22d94:	str	r3, [r1, #16]
   22d98:	str	r0, [r4, #108]	; 0x6c
   22d9c:	strb	r2, [r1, #20]
   22da0:	sub	r0, sl, r5
   22da4:	ldr	r1, [r4, #120]	; 0x78
   22da8:	cmp	r1, r0
   22dac:	strlt	r0, [r4, #120]	; 0x78
   22db0:	ldr	r0, [r6, #4]
   22db4:	ldr	r1, [r8]
   22db8:	ldr	r7, [r4, #104]	; 0x68
   22dbc:	add	r0, r0, r9
   22dc0:	sub	r6, r0, r1
   22dc4:	ldr	r0, [r4, #36]	; 0x24
   22dc8:	cmp	r0, r6
   22dcc:	ldrle	r1, [r4, #48]	; 0x30
   22dd0:	cmple	r0, r1
   22dd4:	blt	22e28 <__assert_fail@plt+0x11974>
   22dd8:	ldr	r0, [r4, #28]
   22ddc:	cmp	r0, r6
   22de0:	ldrle	r1, [r4, #48]	; 0x30
   22de4:	cmple	r0, r1
   22de8:	blt	22e28 <__assert_fail@plt+0x11974>
   22dec:	mov	r5, #0
   22df0:	cmp	r6, r7
   22df4:	ble	22cd4 <__assert_fail@plt+0x11820>
   22df8:	sub	r0, r6, r7
   22dfc:	mov	r1, #0
   22e00:	mov	r5, #0
   22e04:	lsl	r2, r0, #2
   22e08:	ldr	r0, [r4, #100]	; 0x64
   22e0c:	add	r0, r0, r7, lsl #2
   22e10:	add	r0, r0, #4
   22e14:	bl	113d0 <memset@plt>
   22e18:	str	r6, [r4, #104]	; 0x68
   22e1c:	mov	r0, r5
   22e20:	sub	sp, fp, #28
   22e24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22e28:	add	r1, r6, #1
   22e2c:	mov	r0, r4
   22e30:	bl	22598 <__assert_fail@plt+0x110e4>
   22e34:	mov	r5, r0
   22e38:	cmp	r0, #0
   22e3c:	bne	22cd4 <__assert_fail@plt+0x11820>
   22e40:	b	22dec <__assert_fail@plt+0x11938>
   22e44:	ldr	r0, [r4, #116]	; 0x74
   22e48:	bl	2ae28 <__assert_fail@plt+0x19974>
   22e4c:	mov	r5, #12
   22e50:	mov	r0, r5
   22e54:	sub	sp, fp, #28
   22e58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22e5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22e60:	add	fp, sp, #28
   22e64:	sub	sp, sp, #84	; 0x54
   22e68:	ldr	sl, [r0, #84]	; 0x54
   22e6c:	mov	r8, r2
   22e70:	mov	r2, #0
   22e74:	mov	r9, r3
   22e78:	ldr	r3, [fp, #12]
   22e7c:	str	r0, [sp, #40]	; 0x28
   22e80:	str	r2, [fp, #-52]	; 0xffffffcc
   22e84:	ldr	r5, [r1, #4]
   22e88:	ldr	r2, [sl]
   22e8c:	str	sl, [sp, #20]
   22e90:	ldr	r2, [r2, r8, lsl #3]
   22e94:	str	r2, [sp, #24]
   22e98:	ldr	r2, [r0, #120]	; 0x78
   22e9c:	add	r2, r2, r3
   22ea0:	cmp	r5, r2
   22ea4:	ble	237a8 <__assert_fail@plt+0x122f4>
   22ea8:	add	r4, r1, #8
   22eac:	ldr	r2, [r0, #40]	; 0x28
   22eb0:	ldr	r5, [r1]
   22eb4:	ldr	r3, [r0, #88]	; 0x58
   22eb8:	str	r1, [sp, #16]
   22ebc:	str	r2, [sp, #12]
   22ec0:	ldr	r2, [r0, #100]	; 0x64
   22ec4:	cmp	r5, #0
   22ec8:	moveq	r5, r9
   22ecc:	cmp	r5, #0
   22ed0:	str	r2, [sp, #8]
   22ed4:	ldr	r2, [r4]
   22ed8:	str	r2, [r0, #100]	; 0x64
   22edc:	str	r5, [r0, #40]	; 0x28
   22ee0:	ble	22f24 <__assert_fail@plt+0x11a70>
   22ee4:	ldr	r2, [r0, #48]	; 0x30
   22ee8:	sub	r7, r5, #1
   22eec:	cmp	r2, r7
   22ef0:	beq	23818 <__assert_fail@plt+0x12364>
   22ef4:	ldr	r2, [r0, #80]	; 0x50
   22ef8:	cmp	r2, #2
   22efc:	blt	22f68 <__assert_fail@plt+0x11ab4>
   22f00:	ldr	r2, [r0, #8]
   22f04:	mov	r3, r5
   22f08:	sub	r2, r2, #4
   22f0c:	ldr	r6, [r2, r3, lsl #2]
   22f10:	cmn	r6, #1
   22f14:	bne	22f9c <__assert_fail@plt+0x11ae8>
   22f18:	sub	r3, r3, #1
   22f1c:	cmp	r3, #0
   22f20:	bgt	22f0c <__assert_fail@plt+0x11a58>
   22f24:	ldr	r7, [r0, #60]	; 0x3c
   22f28:	cmp	r5, r9
   22f2c:	beq	22fcc <__assert_fail@plt+0x11b18>
   22f30:	ldr	r0, [sp, #40]	; 0x28
   22f34:	ldr	r0, [r0, #100]	; 0x64
   22f38:	ldr	r4, [r0, r5, lsl #2]
   22f3c:	cmp	r4, #0
   22f40:	beq	23088 <__assert_fail@plt+0x11bd4>
   22f44:	ldrb	r0, [r4, #52]	; 0x34
   22f48:	ldr	r8, [fp, #16]
   22f4c:	tst	r0, #64	; 0x40
   22f50:	bne	230a0 <__assert_fail@plt+0x11bec>
   22f54:	mov	r0, #0
   22f58:	str	r0, [sp, #52]	; 0x34
   22f5c:	str	r0, [sp, #48]	; 0x30
   22f60:	str	r0, [sp, #56]	; 0x38
   22f64:	b	230ec <__assert_fail@plt+0x11c38>
   22f68:	ldr	r3, [r0, #4]
   22f6c:	ldr	r2, [r0, #68]	; 0x44
   22f70:	ldrb	r0, [r3, r7]
   22f74:	mov	r7, #1
   22f78:	ubfx	r1, r0, #5, #3
   22f7c:	ldr	r1, [r2, r1, lsl #2]
   22f80:	and	r2, r0, #31
   22f84:	tst	r1, r7, lsl r2
   22f88:	bne	22fc4 <__assert_fail@plt+0x11b10>
   22f8c:	mov	r7, #0
   22f90:	cmp	r0, #10
   22f94:	beq	22fb4 <__assert_fail@plt+0x11b00>
   22f98:	b	22fc4 <__assert_fail@plt+0x11b10>
   22f9c:	ldrb	r0, [r0, #78]	; 0x4e
   22fa0:	cmp	r0, #0
   22fa4:	bne	23864 <__assert_fail@plt+0x123b0>
   22fa8:	mov	r7, #0
   22fac:	cmp	r6, #10
   22fb0:	bne	22fc4 <__assert_fail@plt+0x11b10>
   22fb4:	ldr	r0, [sp, #40]	; 0x28
   22fb8:	ldrb	r7, [r0, #77]	; 0x4d
   22fbc:	cmp	r7, #0
   22fc0:	movwne	r7, #2
   22fc4:	cmp	r5, r9
   22fc8:	bne	22f30 <__assert_fail@plt+0x11a7c>
   22fcc:	mov	r0, #1
   22fd0:	str	r0, [sp, #52]	; 0x34
   22fd4:	str	r0, [sp, #48]	; 0x30
   22fd8:	mov	r0, #4
   22fdc:	bl	2ac60 <__assert_fail@plt+0x197ac>
   22fe0:	cmp	r0, #0
   22fe4:	str	r0, [sp, #56]	; 0x38
   22fe8:	beq	23844 <__assert_fail@plt+0x12390>
   22fec:	str	r8, [r0]
   22ff0:	ldr	r8, [fp, #16]
   22ff4:	ldr	r2, [sp, #24]
   22ff8:	mov	r0, #0
   22ffc:	add	r1, sp, #48	; 0x30
   23000:	str	r0, [fp, #-52]	; 0xffffffcc
   23004:	mov	r0, sl
   23008:	mov	r3, r8
   2300c:	bl	23884 <__assert_fail@plt+0x123d0>
   23010:	cmp	r0, #0
   23014:	str	r0, [fp, #-52]	; 0xffffffcc
   23018:	bne	2382c <__assert_fail@plt+0x12378>
   2301c:	ldr	r0, [sp, #52]	; 0x34
   23020:	cmp	r0, #0
   23024:	beq	2304c <__assert_fail@plt+0x11b98>
   23028:	ldr	r0, [sp, #40]	; 0x28
   2302c:	ldr	r3, [sp, #24]
   23030:	add	r1, sp, #48	; 0x30
   23034:	mov	r2, r5
   23038:	str	r8, [sp]
   2303c:	bl	239d0 <__assert_fail@plt+0x1251c>
   23040:	cmp	r0, #0
   23044:	str	r0, [fp, #-52]	; 0xffffffcc
   23048:	bne	2382c <__assert_fail@plt+0x12378>
   2304c:	ldr	r1, [sp, #20]
   23050:	sub	r0, fp, #52	; 0x34
   23054:	add	r2, sp, #48	; 0x30
   23058:	mov	r3, r7
   2305c:	bl	201bc <__assert_fail@plt+0xed08>
   23060:	mov	r4, r0
   23064:	cmp	r0, #0
   23068:	bne	23078 <__assert_fail@plt+0x11bc4>
   2306c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   23070:	cmp	r0, #0
   23074:	bne	23790 <__assert_fail@plt+0x122dc>
   23078:	ldr	r0, [sp, #40]	; 0x28
   2307c:	ldr	r0, [r0, #100]	; 0x64
   23080:	str	r4, [r0, r5, lsl #2]
   23084:	b	230ec <__assert_fail@plt+0x11c38>
   23088:	ldr	r8, [fp, #16]
   2308c:	mov	r4, #0
   23090:	str	r4, [sp, #52]	; 0x34
   23094:	str	r4, [sp, #48]	; 0x30
   23098:	str	r4, [sp, #56]	; 0x38
   2309c:	b	230ec <__assert_fail@plt+0x11c38>
   230a0:	ldr	r0, [r4, #8]
   230a4:	cmp	r0, #1
   230a8:	str	r0, [sp, #52]	; 0x34
   230ac:	blt	2373c <__assert_fail@plt+0x12288>
   230b0:	str	r0, [sp, #48]	; 0x30
   230b4:	lsl	r0, r0, #2
   230b8:	bl	2ac60 <__assert_fail@plt+0x197ac>
   230bc:	cmp	r0, #0
   230c0:	str	r0, [sp, #56]	; 0x38
   230c4:	beq	23844 <__assert_fail@plt+0x12390>
   230c8:	ldr	r2, [r4, #8]
   230cc:	ldr	r1, [r4, #12]
   230d0:	lsl	r2, r2, #2
   230d4:	bl	1125c <memcpy@plt>
   230d8:	ldrb	r0, [r4, #52]	; 0x34
   230dc:	mov	r1, #0
   230e0:	str	r1, [fp, #-52]	; 0xffffffcc
   230e4:	tst	r0, #64	; 0x40
   230e8:	bne	23028 <__assert_fail@plt+0x11b74>
   230ec:	str	r4, [sp, #36]	; 0x24
   230f0:	ldr	r4, [fp, #12]
   230f4:	mov	r9, r4
   230f8:	cmp	r5, r4
   230fc:	bge	23684 <__assert_fail@plt+0x121d0>
   23100:	ldr	r7, [sp, #40]	; 0x28
   23104:	ldr	r4, [sp, #20]
   23108:	ldr	sl, [sp, #24]
   2310c:	mov	r0, #0
   23110:	str	r0, [sp, #32]
   23114:	ldr	r0, [r7, #120]	; 0x78
   23118:	ldr	r1, [sp, #32]
   2311c:	cmp	r1, r0
   23120:	bgt	23688 <__assert_fail@plt+0x121d4>
   23124:	mov	r0, #0
   23128:	add	r1, r5, #1
   2312c:	str	r0, [sp, #52]	; 0x34
   23130:	str	r1, [sp, #28]
   23134:	ldr	r0, [r7, #100]	; 0x64
   23138:	ldr	r0, [r0, r1, lsl #2]
   2313c:	cmp	r0, #0
   23140:	beq	2315c <__assert_fail@plt+0x11ca8>
   23144:	add	r1, r0, #4
   23148:	add	r0, sp, #48	; 0x30
   2314c:	bl	1fecc <__assert_fail@plt+0xea18>
   23150:	cmp	r0, #0
   23154:	str	r0, [fp, #-52]	; 0xffffffcc
   23158:	bne	23790 <__assert_fail@plt+0x122dc>
   2315c:	ldr	r1, [sp, #36]	; 0x24
   23160:	cmp	r1, #0
   23164:	beq	234f8 <__assert_fail@plt+0x12044>
   23168:	mov	r0, #0
   2316c:	ldr	r8, [r7, #84]	; 0x54
   23170:	str	r0, [fp, #-32]	; 0xffffffe0
   23174:	str	r0, [fp, #-44]	; 0xffffffd4
   23178:	str	r0, [fp, #-48]	; 0xffffffd0
   2317c:	str	r0, [fp, #-40]	; 0xffffffd8
   23180:	ldr	r1, [r1, #20]
   23184:	cmp	r1, #1
   23188:	blt	234e8 <__assert_fail@plt+0x12034>
   2318c:	str	r5, [sp, #44]	; 0x2c
   23190:	ldr	r5, [sp, #36]	; 0x24
   23194:	mov	r4, #0
   23198:	b	23354 <__assert_fail@plt+0x11ea0>
   2319c:	mov	r0, #1
   231a0:	str	r0, [sp, #52]	; 0x34
   231a4:	str	r0, [sp, #48]	; 0x30
   231a8:	mov	r0, #4
   231ac:	bl	2ac60 <__assert_fail@plt+0x197ac>
   231b0:	cmp	r0, #0
   231b4:	str	r0, [sp, #56]	; 0x38
   231b8:	beq	23754 <__assert_fail@plt+0x122a0>
   231bc:	str	r6, [r0]
   231c0:	ldr	r0, [r5, #20]
   231c4:	add	r4, r4, #1
   231c8:	cmp	r4, r0
   231cc:	blt	23354 <__assert_fail@plt+0x11ea0>
   231d0:	b	234d0 <__assert_fail@plt+0x1201c>
   231d4:	cmp	r2, r1
   231d8:	bne	23244 <__assert_fail@plt+0x11d90>
   231dc:	lsl	r0, r2, #1
   231e0:	lsl	r1, r2, #3
   231e4:	str	r0, [sp, #48]	; 0x30
   231e8:	ldr	r0, [sp, #56]	; 0x38
   231ec:	bl	2ac90 <__assert_fail@plt+0x197dc>
   231f0:	cmp	r0, #0
   231f4:	beq	23760 <__assert_fail@plt+0x122ac>
   231f8:	str	r0, [sp, #56]	; 0x38
   231fc:	ldr	r1, [sp, #52]	; 0x34
   23200:	ldr	r2, [r0]
   23204:	cmp	r2, r6
   23208:	ble	23254 <__assert_fail@plt+0x11da0>
   2320c:	cmp	r1, #1
   23210:	blt	23284 <__assert_fail@plt+0x11dd0>
   23214:	add	r2, r0, r1, lsl #2
   23218:	add	r1, r1, #1
   2321c:	mov	r3, r2
   23220:	ldr	r7, [r3, #-4]!
   23224:	sub	r1, r1, #1
   23228:	cmp	r1, #1
   2322c:	str	r7, [r2]
   23230:	mov	r2, r3
   23234:	bgt	23220 <__assert_fail@plt+0x11d6c>
   23238:	ldr	r7, [sp, #40]	; 0x28
   2323c:	sub	r1, r1, #1
   23240:	b	23284 <__assert_fail@plt+0x11dd0>
   23244:	ldr	r0, [sp, #56]	; 0x38
   23248:	ldr	r2, [r0]
   2324c:	cmp	r2, r6
   23250:	bgt	2320c <__assert_fail@plt+0x11d58>
   23254:	add	r2, r0, r1, lsl #2
   23258:	ldr	r3, [r2, #-4]
   2325c:	cmp	r3, r6
   23260:	ble	23284 <__assert_fail@plt+0x11dd0>
   23264:	sub	r1, r1, #2
   23268:	str	r3, [r2]
   2326c:	sub	r1, r1, #1
   23270:	ldr	r3, [r2, #-8]
   23274:	sub	r2, r2, #4
   23278:	cmp	r3, r6
   2327c:	bgt	23268 <__assert_fail@plt+0x11db4>
   23280:	add	r1, r1, #2
   23284:	str	r6, [r0, r1, lsl #2]
   23288:	b	234b4 <__assert_fail@plt+0x12000>
   2328c:	cmp	r2, r1
   23290:	bne	232fc <__assert_fail@plt+0x11e48>
   23294:	lsl	r0, r2, #1
   23298:	lsl	r1, r2, #3
   2329c:	str	r0, [fp, #-48]	; 0xffffffd0
   232a0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   232a4:	bl	2ac90 <__assert_fail@plt+0x197dc>
   232a8:	cmp	r0, #0
   232ac:	beq	23760 <__assert_fail@plt+0x122ac>
   232b0:	str	r0, [fp, #-40]	; 0xffffffd8
   232b4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   232b8:	ldr	r2, [r0]
   232bc:	cmp	r2, r5
   232c0:	bgt	2330c <__assert_fail@plt+0x11e58>
   232c4:	add	r2, r0, r1, lsl #2
   232c8:	ldr	r7, [sp, #40]	; 0x28
   232cc:	ldr	r3, [r2, #-4]
   232d0:	cmp	r3, r5
   232d4:	ble	23340 <__assert_fail@plt+0x11e8c>
   232d8:	sub	r1, r1, #2
   232dc:	str	r3, [r2]
   232e0:	sub	r1, r1, #1
   232e4:	ldr	r3, [r2, #-8]
   232e8:	sub	r2, r2, #4
   232ec:	cmp	r3, r5
   232f0:	bgt	232dc <__assert_fail@plt+0x11e28>
   232f4:	add	r1, r1, #2
   232f8:	b	23340 <__assert_fail@plt+0x11e8c>
   232fc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   23300:	ldr	r2, [r0]
   23304:	cmp	r2, r5
   23308:	ble	232c4 <__assert_fail@plt+0x11e10>
   2330c:	cmp	r1, #1
   23310:	blt	2333c <__assert_fail@plt+0x11e88>
   23314:	add	r2, r0, r1, lsl #2
   23318:	add	r1, r1, #1
   2331c:	mov	r3, r2
   23320:	ldr	r7, [r3, #-4]!
   23324:	sub	r1, r1, #1
   23328:	cmp	r1, #1
   2332c:	str	r7, [r2]
   23330:	mov	r2, r3
   23334:	bgt	23320 <__assert_fail@plt+0x11e6c>
   23338:	sub	r1, r1, #1
   2333c:	ldr	r7, [sp, #40]	; 0x28
   23340:	str	r5, [r0, r1, lsl #2]
   23344:	ldr	r0, [fp, #-44]	; 0xffffffd4
   23348:	add	r0, r0, #1
   2334c:	str	r0, [fp, #-44]	; 0xffffffd4
   23350:	b	2342c <__assert_fail@plt+0x11f78>
   23354:	ldr	r0, [r5, #24]
   23358:	ldr	sl, [r0, r4, lsl #2]
   2335c:	ldr	r0, [r8]
   23360:	add	r1, r0, sl, lsl #3
   23364:	ldrb	r1, [r1, #6]
   23368:	tst	r1, #16
   2336c:	beq	23474 <__assert_fail@plt+0x11fc0>
   23370:	ldr	r5, [sp, #44]	; 0x2c
   23374:	mov	r0, r8
   23378:	mov	r1, sl
   2337c:	mov	r2, r7
   23380:	mov	r3, r5
   23384:	bl	24310 <__assert_fail@plt+0x12e5c>
   23388:	mov	r9, r0
   2338c:	cmp	r0, #2
   23390:	blt	23460 <__assert_fail@plt+0x11fac>
   23394:	ldr	r0, [sp, #40]	; 0x28
   23398:	ldr	r1, [r8, #12]
   2339c:	add	r6, r9, r5
   233a0:	ldr	r0, [r0, #100]	; 0x64
   233a4:	ldr	r5, [r1, sl, lsl #2]
   233a8:	mov	r1, #0
   233ac:	ldr	r0, [r0, r6, lsl #2]
   233b0:	str	r1, [fp, #-44]	; 0xffffffd4
   233b4:	cmp	r0, #0
   233b8:	beq	233d4 <__assert_fail@plt+0x11f20>
   233bc:	add	r1, r0, #4
   233c0:	sub	r0, fp, #48	; 0x30
   233c4:	bl	1fecc <__assert_fail@plt+0xea18>
   233c8:	cmp	r0, #0
   233cc:	str	r0, [fp, #-32]	; 0xffffffe0
   233d0:	bne	23768 <__assert_fail@plt+0x122b4>
   233d4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   233d8:	cmp	r2, #0
   233dc:	beq	23404 <__assert_fail@plt+0x11f50>
   233e0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   233e4:	cmp	r1, #0
   233e8:	bne	2328c <__assert_fail@plt+0x11dd8>
   233ec:	ldr	r0, [fp, #-40]	; 0xffffffd8
   233f0:	str	r5, [r0]
   233f4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   233f8:	add	r0, r0, #1
   233fc:	str	r0, [fp, #-44]	; 0xffffffd4
   23400:	b	23428 <__assert_fail@plt+0x11f74>
   23404:	mov	r0, #1
   23408:	str	r0, [fp, #-44]	; 0xffffffd4
   2340c:	str	r0, [fp, #-48]	; 0xffffffd0
   23410:	mov	r0, #4
   23414:	bl	2ac60 <__assert_fail@plt+0x197ac>
   23418:	cmp	r0, #0
   2341c:	str	r0, [fp, #-40]	; 0xffffffd8
   23420:	beq	23778 <__assert_fail@plt+0x122c4>
   23424:	str	r5, [r0]
   23428:	ldr	r7, [sp, #40]	; 0x28
   2342c:	sub	r0, fp, #32
   23430:	mov	r1, r8
   23434:	sub	r2, fp, #48	; 0x30
   23438:	bl	24070 <__assert_fail@plt+0x12bbc>
   2343c:	ldr	r1, [r7, #100]	; 0x64
   23440:	str	r0, [r1, r6, lsl #2]
   23444:	ldr	r0, [r7, #100]	; 0x64
   23448:	ldr	r0, [r0, r6, lsl #2]
   2344c:	cmp	r0, #0
   23450:	bne	23460 <__assert_fail@plt+0x11fac>
   23454:	ldr	r7, [fp, #-32]	; 0xffffffe0
   23458:	cmp	r7, #0
   2345c:	bne	2376c <__assert_fail@plt+0x122b8>
   23460:	ldr	r7, [sp, #40]	; 0x28
   23464:	ldr	r5, [sp, #36]	; 0x24
   23468:	cmp	r9, #0
   2346c:	bne	2348c <__assert_fail@plt+0x11fd8>
   23470:	ldr	r0, [r8]
   23474:	ldr	r2, [sp, #44]	; 0x2c
   23478:	add	r1, r0, sl, lsl #3
   2347c:	mov	r0, r7
   23480:	bl	24628 <__assert_fail@plt+0x13174>
   23484:	cmp	r0, #0
   23488:	beq	234c0 <__assert_fail@plt+0x1200c>
   2348c:	ldr	r0, [r8, #12]
   23490:	ldr	r2, [sp, #48]	; 0x30
   23494:	ldr	r6, [r0, sl, lsl #2]
   23498:	cmp	r2, #0
   2349c:	beq	2319c <__assert_fail@plt+0x11ce8>
   234a0:	ldr	r1, [sp, #52]	; 0x34
   234a4:	cmp	r1, #0
   234a8:	bne	231d4 <__assert_fail@plt+0x11d20>
   234ac:	ldr	r0, [sp, #56]	; 0x38
   234b0:	str	r6, [r0]
   234b4:	ldr	r0, [sp, #52]	; 0x34
   234b8:	add	r0, r0, #1
   234bc:	str	r0, [sp, #52]	; 0x34
   234c0:	ldr	r0, [r5, #20]
   234c4:	add	r4, r4, #1
   234c8:	cmp	r4, r0
   234cc:	blt	23354 <__assert_fail@plt+0x11ea0>
   234d0:	ldr	r4, [fp, #12]
   234d4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   234d8:	ldr	sl, [sp, #24]
   234dc:	ldr	r5, [sp, #44]	; 0x2c
   234e0:	mov	r9, r4
   234e4:	ldr	r4, [sp, #20]
   234e8:	bl	2ae28 <__assert_fail@plt+0x19974>
   234ec:	ldr	r8, [fp, #16]
   234f0:	mov	r0, #0
   234f4:	str	r0, [fp, #-52]	; 0xffffffcc
   234f8:	ldr	r0, [sp, #52]	; 0x34
   234fc:	cmp	r0, #0
   23500:	beq	2354c <__assert_fail@plt+0x12098>
   23504:	add	r6, sp, #48	; 0x30
   23508:	mov	r0, r4
   2350c:	mov	r2, sl
   23510:	mov	r3, r8
   23514:	mov	r1, r6
   23518:	bl	23884 <__assert_fail@plt+0x123d0>
   2351c:	cmp	r0, #0
   23520:	str	r0, [fp, #-52]	; 0xffffffcc
   23524:	bne	23790 <__assert_fail@plt+0x122dc>
   23528:	ldr	r2, [sp, #28]
   2352c:	mov	r0, r7
   23530:	mov	r1, r6
   23534:	mov	r3, sl
   23538:	str	r8, [sp]
   2353c:	bl	239d0 <__assert_fail@plt+0x1251c>
   23540:	cmp	r0, #0
   23544:	str	r0, [fp, #-52]	; 0xffffffcc
   23548:	bne	23790 <__assert_fail@plt+0x122dc>
   2354c:	cmn	r5, #1
   23550:	ble	2358c <__assert_fail@plt+0x120d8>
   23554:	ldr	r0, [r7, #48]	; 0x30
   23558:	cmp	r0, r5
   2355c:	beq	23650 <__assert_fail@plt+0x1219c>
   23560:	ldr	r0, [r7, #80]	; 0x50
   23564:	cmp	r0, #2
   23568:	blt	23598 <__assert_fail@plt+0x120e4>
   2356c:	ldr	r0, [r7, #8]
   23570:	ldr	r6, [r0, r5, lsl #2]
   23574:	cmn	r6, #1
   23578:	bne	235d0 <__assert_fail@plt+0x1211c>
   2357c:	sub	r1, r5, #1
   23580:	cmp	r5, #0
   23584:	mov	r5, r1
   23588:	bgt	23570 <__assert_fail@plt+0x120bc>
   2358c:	ldr	r3, [r7, #60]	; 0x3c
   23590:	add	r5, sp, #48	; 0x30
   23594:	b	235f8 <__assert_fail@plt+0x12144>
   23598:	ldr	r0, [r7, #4]
   2359c:	ldr	r1, [r7, #68]	; 0x44
   235a0:	mov	r3, #1
   235a4:	ldrb	r0, [r0, r5]
   235a8:	add	r5, sp, #48	; 0x30
   235ac:	ubfx	r2, r0, #5, #3
   235b0:	ldr	r1, [r1, r2, lsl #2]
   235b4:	and	r2, r0, #31
   235b8:	tst	r1, r3, lsl r2
   235bc:	bne	235f8 <__assert_fail@plt+0x12144>
   235c0:	mov	r3, #0
   235c4:	cmp	r0, #10
   235c8:	beq	235ec <__assert_fail@plt+0x12138>
   235cc:	b	235f8 <__assert_fail@plt+0x12144>
   235d0:	ldrb	r0, [r7, #78]	; 0x4e
   235d4:	add	r5, sp, #48	; 0x30
   235d8:	cmp	r0, #0
   235dc:	bne	23664 <__assert_fail@plt+0x121b0>
   235e0:	mov	r3, #0
   235e4:	cmp	r6, #10
   235e8:	bne	235f8 <__assert_fail@plt+0x12144>
   235ec:	ldrb	r3, [r7, #77]	; 0x4d
   235f0:	cmp	r3, #0
   235f4:	movwne	r3, #2
   235f8:	sub	r0, fp, #52	; 0x34
   235fc:	mov	r1, r4
   23600:	mov	r2, r5
   23604:	bl	201bc <__assert_fail@plt+0xed08>
   23608:	cmp	r0, #0
   2360c:	str	r0, [sp, #36]	; 0x24
   23610:	bne	23620 <__assert_fail@plt+0x1216c>
   23614:	ldr	r0, [fp, #-52]	; 0xffffffcc
   23618:	cmp	r0, #0
   2361c:	bne	23790 <__assert_fail@plt+0x122dc>
   23620:	ldr	r1, [sp, #28]
   23624:	ldr	r2, [sp, #36]	; 0x24
   23628:	ldr	r0, [r7, #100]	; 0x64
   2362c:	str	r2, [r0, r1, lsl #2]
   23630:	cmp	r2, #0
   23634:	ldr	r2, [sp, #32]
   23638:	mov	r0, #0
   2363c:	mov	r5, r1
   23640:	addeq	r0, r2, #1
   23644:	cmp	r1, r9
   23648:	blt	23110 <__assert_fail@plt+0x11c5c>
   2364c:	b	2368c <__assert_fail@plt+0x121d8>
   23650:	ldr	r0, [r7, #88]	; 0x58
   23654:	add	r5, sp, #48	; 0x30
   23658:	and	r0, r0, #2
   2365c:	eor	r3, r0, #10
   23660:	b	235f8 <__assert_fail@plt+0x12144>
   23664:	mov	r0, r6
   23668:	bl	113b8 <iswalnum@plt>
   2366c:	mov	r3, #1
   23670:	cmp	r6, #95	; 0x5f
   23674:	beq	235f8 <__assert_fail@plt+0x12144>
   23678:	cmp	r0, #0
   2367c:	beq	235e0 <__assert_fail@plt+0x1212c>
   23680:	b	235f8 <__assert_fail@plt+0x12144>
   23684:	ldr	r7, [sp, #40]	; 0x28
   23688:	mov	r1, r5
   2368c:	ldr	r0, [sp, #56]	; 0x38
   23690:	mov	r4, r1
   23694:	bl	2ae28 <__assert_fail@plt+0x19974>
   23698:	ldr	r0, [r7, #100]	; 0x64
   2369c:	mov	sl, #1
   236a0:	ldr	r1, [r0, r9, lsl #2]
   236a4:	ldr	r0, [sp, #16]
   236a8:	str	r4, [r0]
   236ac:	ldr	r0, [sp, #12]
   236b0:	cmp	r1, #0
   236b4:	addne	r1, r1, #4
   236b8:	str	r0, [r7, #40]	; 0x28
   236bc:	ldr	r0, [sp, #8]
   236c0:	str	r0, [r7, #100]	; 0x64
   236c4:	beq	23720 <__assert_fail@plt+0x1226c>
   236c8:	ldr	r2, [r1, #4]
   236cc:	cmp	r2, #1
   236d0:	blt	2372c <__assert_fail@plt+0x12278>
   236d4:	ldr	r0, [fp, #8]
   236d8:	ldr	r1, [r1, #8]
   236dc:	subs	r2, r2, #1
   236e0:	mov	sl, #0
   236e4:	mov	r3, #0
   236e8:	beq	23714 <__assert_fail@plt+0x12260>
   236ec:	mov	r3, #0
   236f0:	mov	r7, #1
   236f4:	add	r5, r3, r2
   236f8:	lsr	r4, r5, #1
   236fc:	ldr	r6, [r1, r4, lsl #2]
   23700:	cmp	r6, r0
   23704:	movge	r2, r4
   23708:	addlt	r3, r7, r5, lsr #1
   2370c:	cmp	r3, r2
   23710:	bcc	236f4 <__assert_fail@plt+0x12240>
   23714:	ldr	r1, [r1, r3, lsl #2]
   23718:	cmp	r1, r0
   2371c:	movne	sl, #1
   23720:	mov	r0, sl
   23724:	sub	sp, fp, #28
   23728:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2372c:	mov	sl, #1
   23730:	mov	r0, sl
   23734:	sub	sp, fp, #28
   23738:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2373c:	mov	r0, #0
   23740:	str	r0, [sp, #52]	; 0x34
   23744:	str	r0, [sp, #48]	; 0x30
   23748:	str	r0, [sp, #56]	; 0x38
   2374c:	str	r0, [fp, #-52]	; 0xffffffcc
   23750:	b	2304c <__assert_fail@plt+0x11b98>
   23754:	mov	r0, #0
   23758:	str	r0, [sp, #48]	; 0x30
   2375c:	str	r0, [sp, #52]	; 0x34
   23760:	ldr	r0, [fp, #-40]	; 0xffffffd8
   23764:	b	23784 <__assert_fail@plt+0x122d0>
   23768:	mov	r7, r0
   2376c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   23770:	bl	2ae28 <__assert_fail@plt+0x19974>
   23774:	b	2378c <__assert_fail@plt+0x122d8>
   23778:	mov	r0, #0
   2377c:	str	r0, [fp, #-48]	; 0xffffffd0
   23780:	str	r0, [fp, #-44]	; 0xffffffd4
   23784:	bl	2ae28 <__assert_fail@plt+0x19974>
   23788:	mov	r7, #12
   2378c:	str	r7, [fp, #-52]	; 0xffffffcc
   23790:	ldr	r0, [sp, #56]	; 0x38
   23794:	bl	2ae28 <__assert_fail@plt+0x19974>
   23798:	ldr	sl, [fp, #-52]	; 0xffffffcc
   2379c:	mov	r0, sl
   237a0:	sub	sp, fp, #28
   237a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   237a8:	mov	r6, r1
   237ac:	mvn	r1, #-2147483648	; 0x80000000
   237b0:	mov	sl, #12
   237b4:	sub	r1, r1, r5
   237b8:	cmp	r1, r2
   237bc:	ble	23720 <__assert_fail@plt+0x1226c>
   237c0:	add	r0, r2, #1
   237c4:	add	r7, r0, r5
   237c8:	str	r0, [sp, #44]	; 0x2c
   237cc:	cmn	r7, #-1073741823	; 0xc0000001
   237d0:	bhi	23720 <__assert_fail@plt+0x1226c>
   237d4:	mov	r4, r6
   237d8:	lsl	r1, r7, #2
   237dc:	ldr	r0, [r4, #8]!
   237e0:	bl	2ac90 <__assert_fail@plt+0x197dc>
   237e4:	cmp	r0, #0
   237e8:	beq	23720 <__assert_fail@plt+0x1226c>
   237ec:	ldr	r1, [sp, #44]	; 0x2c
   237f0:	str	r7, [r6, #4]
   237f4:	str	r0, [r6, #8]
   237f8:	add	r0, r0, r5, lsl #2
   237fc:	lsl	r2, r1, #2
   23800:	mov	r1, #0
   23804:	bl	113d0 <memset@plt>
   23808:	ldr	r0, [sp, #40]	; 0x28
   2380c:	ldr	sl, [sp, #20]
   23810:	mov	r1, r6
   23814:	b	22eac <__assert_fail@plt+0x119f8>
   23818:	and	r0, r3, #2
   2381c:	eor	r7, r0, #10
   23820:	cmp	r5, r9
   23824:	beq	22fcc <__assert_fail@plt+0x11b18>
   23828:	b	22f30 <__assert_fail@plt+0x11a7c>
   2382c:	mov	sl, r0
   23830:	ldr	r0, [sp, #56]	; 0x38
   23834:	bl	2ae28 <__assert_fail@plt+0x19974>
   23838:	mov	r0, sl
   2383c:	sub	sp, fp, #28
   23840:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23844:	mov	r0, #0
   23848:	mov	sl, #12
   2384c:	str	r0, [sp, #48]	; 0x30
   23850:	str	r0, [sp, #52]	; 0x34
   23854:	str	sl, [fp, #-52]	; 0xffffffcc
   23858:	mov	r0, sl
   2385c:	sub	sp, fp, #28
   23860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23864:	mov	r0, r6
   23868:	bl	113b8 <iswalnum@plt>
   2386c:	mov	r7, #1
   23870:	cmp	r6, #95	; 0x5f
   23874:	beq	22fc4 <__assert_fail@plt+0x11b10>
   23878:	cmp	r0, #0
   2387c:	beq	22fa8 <__assert_fail@plt+0x11af4>
   23880:	b	22fc4 <__assert_fail@plt+0x11b10>
   23884:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23888:	add	fp, sp, #28
   2388c:	sub	sp, sp, #28
   23890:	str	r0, [sp, #12]
   23894:	ldr	r0, [r1, #4]
   23898:	mov	r4, r1
   2389c:	mov	r1, #0
   238a0:	mov	sl, r3
   238a4:	mov	r8, r2
   238a8:	str	r1, [sp, #20]
   238ac:	str	r0, [sp, #16]
   238b0:	lsl	r0, r0, #2
   238b4:	bl	2ac60 <__assert_fail@plt+0x197ac>
   238b8:	cmp	r0, #0
   238bc:	str	r0, [sp, #24]
   238c0:	beq	239c0 <__assert_fail@plt+0x1250c>
   238c4:	ldr	r0, [r4, #4]
   238c8:	cmp	r0, #1
   238cc:	blt	23998 <__assert_fail@plt+0x124e4>
   238d0:	mov	r9, #0
   238d4:	str	r4, [sp, #8]
   238d8:	ldr	r0, [r4, #8]
   238dc:	ldr	r1, [sp, #12]
   238e0:	ldr	r2, [r0, r9, lsl #2]
   238e4:	ldr	r1, [r1, #24]
   238e8:	add	r0, r2, r2, lsl #1
   238ec:	add	r1, r1, r0, lsl #2
   238f0:	ldr	r0, [r1, #4]
   238f4:	cmp	r0, #1
   238f8:	blt	23934 <__assert_fail@plt+0x12480>
   238fc:	ldr	r7, [sp, #12]
   23900:	ldr	r3, [r1, #8]
   23904:	mov	r6, #0
   23908:	ldr	r7, [r7]
   2390c:	ldr	r4, [r3, r6, lsl #2]
   23910:	add	r5, r7, r4, lsl #3
   23914:	ldrb	r5, [r5, #4]
   23918:	cmp	r5, sl
   2391c:	ldreq	r5, [r7, r4, lsl #3]
   23920:	cmpeq	r5, r8
   23924:	beq	2395c <__assert_fail@plt+0x124a8>
   23928:	add	r6, r6, #1
   2392c:	cmp	r6, r0
   23930:	blt	2390c <__assert_fail@plt+0x12458>
   23934:	add	r0, sp, #16
   23938:	bl	1fecc <__assert_fail@plt+0xea18>
   2393c:	cmp	r0, #0
   23940:	bne	23980 <__assert_fail@plt+0x124cc>
   23944:	ldr	r4, [sp, #8]
   23948:	add	r9, r9, #1
   2394c:	ldr	r0, [r4, #4]
   23950:	cmp	r9, r0
   23954:	blt	238d8 <__assert_fail@plt+0x12424>
   23958:	b	23998 <__assert_fail@plt+0x124e4>
   2395c:	cmn	r4, #1
   23960:	beq	23934 <__assert_fail@plt+0x12480>
   23964:	ldr	r0, [sp, #12]
   23968:	add	r1, sp, #16
   2396c:	mov	r3, r8
   23970:	str	sl, [sp]
   23974:	bl	23f2c <__assert_fail@plt+0x12a78>
   23978:	cmp	r0, #0
   2397c:	beq	23944 <__assert_fail@plt+0x12490>
   23980:	mov	r7, r0
   23984:	ldr	r0, [sp, #24]
   23988:	bl	2ae28 <__assert_fail@plt+0x19974>
   2398c:	mov	r0, r7
   23990:	sub	sp, fp, #28
   23994:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23998:	ldr	r0, [r4, #8]
   2399c:	bl	2ae28 <__assert_fail@plt+0x19974>
   239a0:	vldr	d16, [sp, #16]
   239a4:	ldr	r0, [sp, #24]
   239a8:	mov	r7, #0
   239ac:	str	r0, [r4, #8]
   239b0:	vstr	d16, [r4]
   239b4:	mov	r0, r7
   239b8:	sub	sp, fp, #28
   239bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   239c0:	mov	r7, #12
   239c4:	mov	r0, r7
   239c8:	sub	sp, fp, #28
   239cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   239d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   239d4:	add	fp, sp, #28
   239d8:	sub	sp, sp, #52	; 0x34
   239dc:	ldr	ip, [r0, #108]	; 0x6c
   239e0:	mov	lr, r1
   239e4:	ldr	r1, [r0, #84]	; 0x54
   239e8:	str	r0, [sp, #24]
   239ec:	mov	sl, r2
   239f0:	mov	r8, #0
   239f4:	mov	r0, #0
   239f8:	cmp	ip, #1
   239fc:	str	r1, [sp, #28]
   23a00:	blt	23a44 <__assert_fail@plt+0x12590>
   23a04:	ldr	r0, [sp, #24]
   23a08:	mov	r7, #1
   23a0c:	mov	r1, ip
   23a10:	ldr	r2, [r0, #116]	; 0x74
   23a14:	mov	r0, #0
   23a18:	add	r6, r1, r0
   23a1c:	add	r6, r6, r6, lsr #31
   23a20:	asr	r4, r6, #1
   23a24:	add	r5, r4, r4, lsl #1
   23a28:	add	r5, r2, r5, lsl #3
   23a2c:	ldr	r5, [r5, #4]
   23a30:	cmp	r5, sl
   23a34:	addlt	r0, r7, r6, asr #1
   23a38:	movge	r1, r4
   23a3c:	cmp	r0, r1
   23a40:	blt	23a18 <__assert_fail@plt+0x12564>
   23a44:	cmp	r0, ip
   23a48:	bge	23f10 <__assert_fail@plt+0x12a5c>
   23a4c:	cmn	r0, #1
   23a50:	beq	23f10 <__assert_fail@plt+0x12a5c>
   23a54:	ldr	r1, [sp, #24]
   23a58:	add	r0, r0, r0, lsl #1
   23a5c:	str	r0, [sp, #8]
   23a60:	ldr	r1, [r1, #116]	; 0x74
   23a64:	add	r0, r1, r0, lsl #3
   23a68:	ldr	r0, [r0, #4]
   23a6c:	cmp	r0, sl
   23a70:	bne	23f10 <__assert_fail@plt+0x12a5c>
   23a74:	str	r3, [sp, #12]
   23a78:	mov	r9, #1
   23a7c:	str	lr, [sp, #16]
   23a80:	b	23a8c <__assert_fail@plt+0x125d8>
   23a84:	ldr	r0, [sp, #24]
   23a88:	ldr	r1, [r0, #116]	; 0x74
   23a8c:	ldr	r0, [sp, #8]
   23a90:	add	r0, r1, r0, lsl #3
   23a94:	mov	r8, r0
   23a98:	ldr	r0, [lr, #4]
   23a9c:	cmp	r0, #1
   23aa0:	blt	23da8 <__assert_fail@plt+0x128f4>
   23aa4:	subs	r6, r0, #1
   23aa8:	ldr	r2, [r8]
   23aac:	ldr	r0, [lr, #8]
   23ab0:	mov	r3, #0
   23ab4:	beq	23adc <__assert_fail@plt+0x12628>
   23ab8:	mov	r1, r6
   23abc:	add	r7, r3, r1
   23ac0:	lsr	r5, r7, #1
   23ac4:	ldr	r4, [r0, r5, lsl #2]
   23ac8:	cmp	r4, r2
   23acc:	movge	r1, r5
   23ad0:	addlt	r3, r9, r7, lsr #1
   23ad4:	cmp	r3, r1
   23ad8:	bcc	23abc <__assert_fail@plt+0x12608>
   23adc:	ldr	r1, [r0, r3, lsl #2]
   23ae0:	cmp	r1, r2
   23ae4:	bne	23da8 <__assert_fail@plt+0x128f4>
   23ae8:	ldr	r3, [r8, #12]
   23aec:	ldr	r1, [r8, #8]
   23af0:	add	r3, r3, sl
   23af4:	sub	r7, r3, r1
   23af8:	cmp	r7, sl
   23afc:	bne	23bf4 <__assert_fail@plt+0x12740>
   23b00:	ldr	r1, [sp, #28]
   23b04:	add	r2, r2, r2, lsl #1
   23b08:	cmp	r6, #0
   23b0c:	ldr	r1, [r1, #20]
   23b10:	add	r1, r1, r2, lsl #2
   23b14:	mov	r2, #0
   23b18:	ldr	r1, [r1, #8]
   23b1c:	ldr	r4, [r1]
   23b20:	beq	23b44 <__assert_fail@plt+0x12690>
   23b24:	add	r1, r2, r6
   23b28:	lsr	r3, r1, #1
   23b2c:	ldr	r7, [r0, r3, lsl #2]
   23b30:	cmp	r7, r4
   23b34:	movge	r6, r3
   23b38:	addlt	r2, r9, r1, lsr #1
   23b3c:	cmp	r2, r6
   23b40:	bcc	23b24 <__assert_fail@plt+0x12670>
   23b44:	ldr	r1, [r0, r2, lsl #2]
   23b48:	mov	r0, #4
   23b4c:	cmp	r1, r4
   23b50:	beq	23d9c <__assert_fail@plt+0x128e8>
   23b54:	mov	r0, #4
   23b58:	str	r9, [sp, #36]	; 0x24
   23b5c:	str	r9, [sp, #32]
   23b60:	bl	2ac60 <__assert_fail@plt+0x197ac>
   23b64:	cmp	r0, #0
   23b68:	str	r0, [sp, #40]	; 0x28
   23b6c:	beq	23dbc <__assert_fail@plt+0x12908>
   23b70:	mov	r6, #0
   23b74:	str	r4, [r0]
   23b78:	ldr	r0, [sp, #28]
   23b7c:	ldr	r2, [sp, #12]
   23b80:	ldr	r3, [fp, #8]
   23b84:	add	r4, sp, #32
   23b88:	str	r6, [fp, #-32]	; 0xffffffe0
   23b8c:	mov	r1, r4
   23b90:	bl	23884 <__assert_fail@plt+0x123d0>
   23b94:	ldr	r5, [sp, #16]
   23b98:	mov	r7, r0
   23b9c:	mov	r1, r4
   23ba0:	mov	r0, r5
   23ba4:	bl	1fecc <__assert_fail@plt+0xea18>
   23ba8:	mov	r4, r0
   23bac:	ldr	r0, [sp, #40]	; 0x28
   23bb0:	bl	2ae28 <__assert_fail@plt+0x19974>
   23bb4:	orr	r0, r7, r6
   23bb8:	mov	lr, r5
   23bbc:	orrs	r0, r0, r4
   23bc0:	mov	r0, #2
   23bc4:	beq	23d9c <__assert_fail@plt+0x128e8>
   23bc8:	cmp	r7, #0
   23bcc:	mov	r0, #1
   23bd0:	movne	r4, r7
   23bd4:	cmp	r6, #0
   23bd8:	movne	r4, r6
   23bdc:	str	r4, [fp, #-32]	; 0xffffffe0
   23be0:	str	r4, [sp, #20]
   23be4:	cmp	r0, #0
   23be8:	cmpne	r0, #4
   23bec:	beq	23da8 <__assert_fail@plt+0x128f4>
   23bf0:	b	23f04 <__assert_fail@plt+0x12a50>
   23bf4:	ldr	r0, [sp, #24]
   23bf8:	ldr	r0, [r0, #100]	; 0x64
   23bfc:	ldr	r5, [r0, r7, lsl #2]
   23c00:	ldr	r0, [sp, #28]
   23c04:	ldr	r0, [r0, #12]
   23c08:	cmp	r5, #0
   23c0c:	ldr	r4, [r0, r2, lsl #2]
   23c10:	beq	23cd8 <__assert_fail@plt+0x12824>
   23c14:	ldr	ip, [r5, #8]
   23c18:	cmp	ip, #0
   23c1c:	ble	23d04 <__assert_fail@plt+0x12850>
   23c20:	ldr	r0, [r5, #12]
   23c24:	subs	r3, ip, #1
   23c28:	mov	r2, #0
   23c2c:	str	r7, [sp, #4]
   23c30:	beq	23c54 <__assert_fail@plt+0x127a0>
   23c34:	add	r6, r2, r3
   23c38:	lsr	r7, r6, #1
   23c3c:	ldr	r1, [r0, r7, lsl #2]
   23c40:	cmp	r1, r4
   23c44:	movge	r3, r7
   23c48:	addlt	r2, r9, r6, lsr #1
   23c4c:	cmp	r2, r3
   23c50:	bcc	23c34 <__assert_fail@plt+0x12780>
   23c54:	ldr	r1, [r0, r2, lsl #2]
   23c58:	mov	r0, #4
   23c5c:	cmp	r1, r4
   23c60:	beq	23d9c <__assert_fail@plt+0x128e8>
   23c64:	ldr	r7, [sp, #4]
   23c68:	cmp	ip, #1
   23c6c:	str	ip, [sp, #36]	; 0x24
   23c70:	blt	23d08 <__assert_fail@plt+0x12854>
   23c74:	lsl	r0, ip, #2
   23c78:	str	ip, [sp, #32]
   23c7c:	bl	2ac60 <__assert_fail@plt+0x197ac>
   23c80:	cmp	r0, #0
   23c84:	str	r0, [sp, #40]	; 0x28
   23c88:	beq	23e24 <__assert_fail@plt+0x12970>
   23c8c:	ldr	r2, [r5, #8]
   23c90:	ldr	r1, [r5, #12]
   23c94:	mov	r5, r0
   23c98:	lsl	r2, r2, #2
   23c9c:	bl	1125c <memcpy@plt>
   23ca0:	ldr	r1, [sp, #32]
   23ca4:	mov	r6, #0
   23ca8:	str	r6, [fp, #-32]	; 0xffffffe0
   23cac:	cmp	r1, #0
   23cb0:	beq	23d1c <__assert_fail@plt+0x12868>
   23cb4:	ldr	r0, [sp, #36]	; 0x24
   23cb8:	cmp	r0, #0
   23cbc:	bne	23e38 <__assert_fail@plt+0x12984>
   23cc0:	str	r4, [r5]
   23cc4:	str	r9, [sp, #36]	; 0x24
   23cc8:	mov	r6, #0
   23ccc:	cmp	r6, #0
   23cd0:	beq	23d44 <__assert_fail@plt+0x12890>
   23cd4:	b	23dfc <__assert_fail@plt+0x12948>
   23cd8:	mov	r0, #4
   23cdc:	str	r9, [sp, #36]	; 0x24
   23ce0:	str	r9, [sp, #32]
   23ce4:	bl	2ac60 <__assert_fail@plt+0x197ac>
   23ce8:	cmp	r0, #0
   23cec:	str	r0, [sp, #40]	; 0x28
   23cf0:	beq	23dd0 <__assert_fail@plt+0x1291c>
   23cf4:	str	r4, [r0]
   23cf8:	mov	r0, #0
   23cfc:	str	r0, [fp, #-32]	; 0xffffffe0
   23d00:	b	23d44 <__assert_fail@plt+0x12890>
   23d04:	str	ip, [sp, #36]	; 0x24
   23d08:	mov	r6, #0
   23d0c:	str	r6, [sp, #36]	; 0x24
   23d10:	str	r6, [sp, #32]
   23d14:	str	r6, [sp, #40]	; 0x28
   23d18:	str	r6, [fp, #-32]	; 0xffffffe0
   23d1c:	mov	r0, #4
   23d20:	str	r9, [sp, #36]	; 0x24
   23d24:	str	r9, [sp, #32]
   23d28:	bl	2ac60 <__assert_fail@plt+0x197ac>
   23d2c:	cmp	r0, #0
   23d30:	str	r0, [sp, #40]	; 0x28
   23d34:	beq	23df0 <__assert_fail@plt+0x1293c>
   23d38:	str	r4, [r0]
   23d3c:	cmp	r6, #0
   23d40:	bne	23dfc <__assert_fail@plt+0x12948>
   23d44:	ldr	r1, [sp, #28]
   23d48:	sub	r0, fp, #32
   23d4c:	add	r2, sp, #32
   23d50:	bl	24070 <__assert_fail@plt+0x12bbc>
   23d54:	ldr	r4, [sp, #24]
   23d58:	ldr	r1, [r4, #100]	; 0x64
   23d5c:	str	r0, [r1, r7, lsl #2]
   23d60:	ldr	r0, [sp, #40]	; 0x28
   23d64:	bl	2ae28 <__assert_fail@plt+0x19974>
   23d68:	ldr	r0, [r4, #100]	; 0x64
   23d6c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   23d70:	ldr	r0, [r0, r7, lsl #2]
   23d74:	cmp	r1, #0
   23d78:	mov	r2, r1
   23d7c:	movwne	r2, #1
   23d80:	clz	r0, r0
   23d84:	lsr	r0, r0, #5
   23d88:	ands	r0, r0, r2
   23d8c:	ldr	r2, [sp, #20]
   23d90:	movne	r2, r1
   23d94:	str	r2, [sp, #20]
   23d98:	ldr	lr, [sp, #16]
   23d9c:	cmp	r0, #0
   23da0:	cmpne	r0, #4
   23da4:	bne	23f04 <__assert_fail@plt+0x12a50>
   23da8:	ldrb	r1, [r8, #20]
   23dac:	add	r0, r8, #24
   23db0:	cmp	r1, #0
   23db4:	bne	23a94 <__assert_fail@plt+0x125e0>
   23db8:	b	23f1c <__assert_fail@plt+0x12a68>
   23dbc:	mov	r0, #0
   23dc0:	mov	r6, #12
   23dc4:	str	r0, [sp, #32]
   23dc8:	str	r0, [sp, #36]	; 0x24
   23dcc:	b	23b78 <__assert_fail@plt+0x126c4>
   23dd0:	mov	r0, #0
   23dd4:	mov	r1, #12
   23dd8:	str	r0, [sp, #32]
   23ddc:	str	r0, [sp, #36]	; 0x24
   23de0:	mov	r0, #12
   23de4:	str	r1, [fp, #-32]	; 0xffffffe0
   23de8:	str	r0, [sp, #20]
   23dec:	b	23e1c <__assert_fail@plt+0x12968>
   23df0:	mov	r0, #0
   23df4:	str	r0, [sp, #32]
   23df8:	str	r0, [sp, #36]	; 0x24
   23dfc:	clz	r0, r6
   23e00:	lsr	r4, r0, #5
   23e04:	ldr	r0, [sp, #40]	; 0x28
   23e08:	bl	2ae28 <__assert_fail@plt+0x19974>
   23e0c:	cmp	r4, #0
   23e10:	movwne	r6, #12
   23e14:	str	r6, [sp, #20]
   23e18:	str	r6, [fp, #-32]	; 0xffffffe0
   23e1c:	mov	r0, #1
   23e20:	b	23d98 <__assert_fail@plt+0x128e4>
   23e24:	mov	r0, #0
   23e28:	mov	r6, #12
   23e2c:	str	r0, [sp, #32]
   23e30:	str	r0, [sp, #36]	; 0x24
   23e34:	b	23d18 <__assert_fail@plt+0x12864>
   23e38:	cmp	r1, r0
   23e3c:	bne	23e68 <__assert_fail@plt+0x129b4>
   23e40:	lsl	r0, r1, #1
   23e44:	lsl	r1, r1, #3
   23e48:	str	r0, [sp, #32]
   23e4c:	mov	r0, r5
   23e50:	bl	2ac90 <__assert_fail@plt+0x197dc>
   23e54:	cmp	r0, #0
   23e58:	beq	23efc <__assert_fail@plt+0x12a48>
   23e5c:	str	r0, [sp, #40]	; 0x28
   23e60:	mov	r5, r0
   23e64:	ldr	r0, [sp, #36]	; 0x24
   23e68:	ldr	r1, [r5]
   23e6c:	cmp	r1, r4
   23e70:	ble	23ea8 <__assert_fail@plt+0x129f4>
   23e74:	cmp	r0, #1
   23e78:	blt	23ed8 <__assert_fail@plt+0x12a24>
   23e7c:	add	r1, r5, r0, lsl #2
   23e80:	add	r0, r0, #1
   23e84:	mov	r2, r1
   23e88:	ldr	r3, [r2, #-4]!
   23e8c:	sub	r0, r0, #1
   23e90:	cmp	r0, #1
   23e94:	str	r3, [r1]
   23e98:	mov	r1, r2
   23e9c:	bgt	23e88 <__assert_fail@plt+0x129d4>
   23ea0:	sub	r0, r0, #1
   23ea4:	b	23ed8 <__assert_fail@plt+0x12a24>
   23ea8:	add	r1, r5, r0, lsl #2
   23eac:	ldr	r2, [r1, #-4]
   23eb0:	cmp	r2, r4
   23eb4:	ble	23ed8 <__assert_fail@plt+0x12a24>
   23eb8:	sub	r0, r0, #2
   23ebc:	str	r2, [r1]
   23ec0:	sub	r0, r0, #1
   23ec4:	ldr	r2, [r1, #-8]
   23ec8:	sub	r1, r1, #4
   23ecc:	cmp	r2, r4
   23ed0:	bgt	23ebc <__assert_fail@plt+0x12a08>
   23ed4:	add	r0, r0, #2
   23ed8:	str	r4, [r5, r0, lsl #2]
   23edc:	ldr	r7, [sp, #4]
   23ee0:	mov	r6, #0
   23ee4:	ldr	r0, [sp, #36]	; 0x24
   23ee8:	add	r0, r0, #1
   23eec:	str	r0, [sp, #36]	; 0x24
   23ef0:	cmp	r6, #0
   23ef4:	beq	23d44 <__assert_fail@plt+0x12890>
   23ef8:	b	23dfc <__assert_fail@plt+0x12948>
   23efc:	mov	r6, #0
   23f00:	b	23dfc <__assert_fail@plt+0x12948>
   23f04:	cmp	r0, #2
   23f08:	beq	23a84 <__assert_fail@plt+0x125d0>
   23f0c:	ldr	r8, [sp, #20]
   23f10:	mov	r0, r8
   23f14:	sub	sp, fp, #28
   23f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23f1c:	mov	r8, #0
   23f20:	mov	r0, r8
   23f24:	sub	sp, fp, #28
   23f28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23f2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f30:	add	fp, sp, #28
   23f34:	sub	sp, sp, #4
   23f38:	ldr	r4, [fp, #8]
   23f3c:	mov	r9, r3
   23f40:	mov	r7, r2
   23f44:	mov	r8, r1
   23f48:	mov	sl, r0
   23f4c:	mov	r5, #1
   23f50:	ldr	r0, [r8, #4]
   23f54:	cmp	r0, #1
   23f58:	bge	23f78 <__assert_fail@plt+0x12ac4>
   23f5c:	b	23fbc <__assert_fail@plt+0x12b08>
   23f60:	add	r0, r0, r7, lsl #2
   23f64:	ldr	r0, [r0, #8]
   23f68:	ldr	r7, [r0]
   23f6c:	ldr	r0, [r8, #4]
   23f70:	cmp	r0, #1
   23f74:	blt	23fbc <__assert_fail@plt+0x12b08>
   23f78:	subs	r2, r0, #1
   23f7c:	ldr	r0, [r8, #8]
   23f80:	mov	ip, r4
   23f84:	mov	r1, #0
   23f88:	beq	23fac <__assert_fail@plt+0x12af8>
   23f8c:	add	r3, r1, r2
   23f90:	lsr	r6, r3, #1
   23f94:	ldr	r4, [r0, r6, lsl #2]
   23f98:	cmp	r4, r7
   23f9c:	movge	r2, r6
   23fa0:	addlt	r1, r5, r3, lsr #1
   23fa4:	cmp	r1, r2
   23fa8:	bcc	23f8c <__assert_fail@plt+0x12ad8>
   23fac:	ldr	r0, [r0, r1, lsl #2]
   23fb0:	mov	r4, ip
   23fb4:	cmp	r0, r7
   23fb8:	beq	24058 <__assert_fail@plt+0x12ba4>
   23fbc:	ldr	r0, [sl]
   23fc0:	add	r1, r0, r7, lsl #3
   23fc4:	ldrb	r1, [r1, #4]
   23fc8:	cmp	r1, r4
   23fcc:	ldreq	r0, [r0, r7, lsl #3]
   23fd0:	cmpeq	r0, r9
   23fd4:	beq	2403c <__assert_fail@plt+0x12b88>
   23fd8:	mov	r0, r8
   23fdc:	mov	r1, r7
   23fe0:	bl	20074 <__assert_fail@plt+0xebc0>
   23fe4:	cmp	r0, #0
   23fe8:	beq	24064 <__assert_fail@plt+0x12bb0>
   23fec:	ldr	r0, [sl, #20]
   23ff0:	add	r7, r7, r7, lsl #1
   23ff4:	add	r1, r0, r7, lsl #2
   23ff8:	ldr	r2, [r1, #4]
   23ffc:	cmp	r2, #2
   24000:	beq	24010 <__assert_fail@plt+0x12b5c>
   24004:	cmp	r2, #0
   24008:	bne	23f60 <__assert_fail@plt+0x12aac>
   2400c:	b	24058 <__assert_fail@plt+0x12ba4>
   24010:	ldr	r0, [r1, #8]
   24014:	mov	r1, r8
   24018:	mov	r3, r9
   2401c:	ldr	r2, [r0, #4]
   24020:	mov	r0, sl
   24024:	str	r4, [sp]
   24028:	bl	23f2c <__assert_fail@plt+0x12a78>
   2402c:	cmp	r0, #0
   24030:	bne	2405c <__assert_fail@plt+0x12ba8>
   24034:	ldr	r0, [sl, #20]
   24038:	b	23f60 <__assert_fail@plt+0x12aac>
   2403c:	cmp	r4, #9
   24040:	bne	24058 <__assert_fail@plt+0x12ba4>
   24044:	mov	r0, r8
   24048:	mov	r1, r7
   2404c:	bl	20074 <__assert_fail@plt+0xebc0>
   24050:	cmp	r0, #0
   24054:	beq	24064 <__assert_fail@plt+0x12bb0>
   24058:	mov	r0, #0
   2405c:	sub	sp, fp, #28
   24060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24064:	mov	r0, #12
   24068:	sub	sp, fp, #28
   2406c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24070:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24074:	add	fp, sp, #28
   24078:	sub	sp, sp, #4
   2407c:	ldr	sl, [r2, #4]
   24080:	cmp	sl, #0
   24084:	beq	242c0 <__assert_fail@plt+0x12e0c>
   24088:	mov	r7, r2
   2408c:	mov	r9, r1
   24090:	cmp	sl, #1
   24094:	mov	r6, sl
   24098:	blt	2410c <__assert_fail@plt+0x12c58>
   2409c:	ldr	r5, [r7, #8]
   240a0:	mov	r2, #0
   240a4:	cmp	sl, #4
   240a8:	mov	r6, sl
   240ac:	bcc	240f4 <__assert_fail@plt+0x12c40>
   240b0:	mov	r1, #0
   240b4:	bic	r2, sl, #3
   240b8:	vdup.32	q8, r1
   240bc:	mov	r3, r2
   240c0:	mov	r1, r5
   240c4:	vmov.32	d16[0], sl
   240c8:	vld1.32	{d18-d19}, [r1]!
   240cc:	subs	r3, r3, #4
   240d0:	vadd.i32	q8, q9, q8
   240d4:	bne	240c8 <__assert_fail@plt+0x12c14>
   240d8:	vext.8	q9, q8, q8, #8
   240dc:	cmp	sl, r2
   240e0:	vadd.i32	q8, q8, q9
   240e4:	vdup.32	q9, d16[1]
   240e8:	vadd.i32	q8, q8, q9
   240ec:	vmov.32	r6, d16[0]
   240f0:	beq	2410c <__assert_fail@plt+0x12c58>
   240f4:	add	r1, r5, r2, lsl #2
   240f8:	sub	r2, sl, r2
   240fc:	ldr	r3, [r1], #4
   24100:	subs	r2, r2, #1
   24104:	add	r6, r3, r6
   24108:	bne	240fc <__assert_fail@plt+0x12c48>
   2410c:	ldr	r1, [r9, #68]	; 0x44
   24110:	ldr	r2, [r9, #32]
   24114:	str	r0, [sp]
   24118:	and	r1, r1, r6
   2411c:	add	r3, r1, r1, lsl #1
   24120:	ldr	r1, [r2, r3, lsl #2]
   24124:	cmp	r1, #1
   24128:	blt	2419c <__assert_fail@plt+0x12ce8>
   2412c:	cmp	r7, #0
   24130:	beq	2419c <__assert_fail@plt+0x12ce8>
   24134:	add	r2, r2, r3, lsl #2
   24138:	sub	ip, sl, #1
   2413c:	mov	r5, #0
   24140:	ldr	lr, [r2, #8]
   24144:	b	24178 <__assert_fail@plt+0x12cc4>
   24148:	mov	r3, ip
   2414c:	add	r2, r3, #1
   24150:	cmp	r2, #1
   24154:	blt	242b4 <__assert_fail@plt+0x12e00>
   24158:	ldr	r2, [r7, #8]
   2415c:	ldr	r0, [r4, #12]
   24160:	ldr	r2, [r2, r3, lsl #2]
   24164:	ldr	r0, [r0, r3, lsl #2]
   24168:	sub	r3, r3, #1
   2416c:	cmp	r0, r2
   24170:	beq	2414c <__assert_fail@plt+0x12c98>
   24174:	b	24190 <__assert_fail@plt+0x12cdc>
   24178:	ldr	r4, [lr, r5, lsl #2]
   2417c:	ldr	r3, [r4]
   24180:	cmp	r6, r3
   24184:	ldreq	r3, [r4, #8]
   24188:	cmpeq	r3, sl
   2418c:	beq	24148 <__assert_fail@plt+0x12c94>
   24190:	add	r5, r5, #1
   24194:	cmp	r5, r1
   24198:	blt	24178 <__assert_fail@plt+0x12cc4>
   2419c:	mov	r0, #56	; 0x38
   241a0:	mov	r1, #1
   241a4:	bl	2ac0c <__assert_fail@plt+0x19758>
   241a8:	cmp	r0, #0
   241ac:	beq	242f4 <__assert_fail@plt+0x12e40>
   241b0:	mov	r4, r0
   241b4:	ldr	r0, [r7, #4]
   241b8:	add	sl, r4, #4
   241bc:	cmp	r0, #1
   241c0:	str	r0, [r4, #8]
   241c4:	blt	24288 <__assert_fail@plt+0x12dd4>
   241c8:	str	r0, [r4, #4]
   241cc:	lsl	r0, r0, #2
   241d0:	bl	2ac60 <__assert_fail@plt+0x197ac>
   241d4:	cmp	r0, #0
   241d8:	str	r0, [r4, #12]
   241dc:	beq	242e0 <__assert_fail@plt+0x12e2c>
   241e0:	ldmib	r7, {r5, r7}
   241e4:	lsl	r2, r5, #2
   241e8:	mov	r1, r7
   241ec:	bl	1125c <memcpy@plt>
   241f0:	cmp	r5, #1
   241f4:	str	sl, [r4, #40]	; 0x28
   241f8:	blt	2429c <__assert_fail@plt+0x12de8>
   241fc:	ldr	sl, [r9]
   24200:	movw	ip, #65280	; 0xff00
   24204:	mov	lr, #32
   24208:	movt	ip, #3
   2420c:	add	r2, ip, #255	; 0xff
   24210:	ldr	r0, [r7]
   24214:	add	r1, sl, r0, lsl #3
   24218:	ldr	r0, [r1, #4]!
   2421c:	and	r3, r0, r2
   24220:	cmp	r3, #1
   24224:	beq	24278 <__assert_fail@plt+0x12dc4>
   24228:	ldrb	r8, [r4, #52]	; 0x34
   2422c:	and	r3, lr, r0, lsr #15
   24230:	uxtb	r0, r0
   24234:	cmp	r0, #12
   24238:	orr	r3, r8, r3
   2423c:	strb	r3, [r4, #52]	; 0x34
   24240:	beq	24270 <__assert_fail@plt+0x12dbc>
   24244:	cmp	r0, #4
   24248:	beq	2425c <__assert_fail@plt+0x12da8>
   2424c:	cmp	r0, #2
   24250:	bne	24264 <__assert_fail@plt+0x12db0>
   24254:	orr	r0, r3, #16
   24258:	b	24274 <__assert_fail@plt+0x12dc0>
   2425c:	orr	r0, r3, #64	; 0x40
   24260:	b	24274 <__assert_fail@plt+0x12dc0>
   24264:	ldr	r0, [r1]
   24268:	tst	r0, ip
   2426c:	beq	24278 <__assert_fail@plt+0x12dc4>
   24270:	orr	r0, r3, #128	; 0x80
   24274:	strb	r0, [r4, #52]	; 0x34
   24278:	add	r7, r7, #4
   2427c:	subs	r5, r5, #1
   24280:	bne	24210 <__assert_fail@plt+0x12d5c>
   24284:	b	2429c <__assert_fail@plt+0x12de8>
   24288:	mov	r0, #0
   2428c:	str	r0, [sl]
   24290:	str	r0, [sl, #4]
   24294:	str	r0, [sl, #8]
   24298:	str	sl, [r4, #40]	; 0x28
   2429c:	mov	r0, r9
   242a0:	mov	r1, r4
   242a4:	mov	r2, r6
   242a8:	bl	20b80 <__assert_fail@plt+0xf6cc>
   242ac:	cmp	r0, #0
   242b0:	bne	242d4 <__assert_fail@plt+0x12e20>
   242b4:	mov	r0, r4
   242b8:	sub	sp, fp, #28
   242bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   242c0:	mov	r4, #0
   242c4:	str	r4, [r0]
   242c8:	mov	r0, r4
   242cc:	sub	sp, fp, #28
   242d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   242d4:	mov	r0, r4
   242d8:	bl	1a110 <__assert_fail@plt+0x8c5c>
   242dc:	b	242f4 <__assert_fail@plt+0x12e40>
   242e0:	mov	r0, #0
   242e4:	str	r0, [r4, #4]
   242e8:	str	r0, [r4, #8]
   242ec:	mov	r0, r4
   242f0:	bl	2ae28 <__assert_fail@plt+0x19974>
   242f4:	ldr	r1, [sp]
   242f8:	mov	r0, #12
   242fc:	mov	r4, #0
   24300:	str	r0, [r1]
   24304:	mov	r0, r4
   24308:	sub	sp, fp, #28
   2430c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24310:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   24314:	add	fp, sp, #24
   24318:	ldr	lr, [r0]
   2431c:	add	r7, lr, r1, lsl #3
   24320:	ldrb	r9, [r7, #4]
   24324:	cmp	r9, #7
   24328:	beq	2450c <__assert_fail@plt+0x13058>
   2432c:	ldr	ip, [r2, #80]	; 0x50
   24330:	mov	r6, #1
   24334:	cmp	ip, #1
   24338:	beq	24374 <__assert_fail@plt+0x12ec0>
   2433c:	ldr	r5, [r2, #28]
   24340:	add	r7, r3, #1
   24344:	cmp	r7, r5
   24348:	bge	24374 <__assert_fail@plt+0x12ec0>
   2434c:	ldr	r6, [r2, #8]
   24350:	add	r7, r6, r3, lsl #2
   24354:	mov	r6, #1
   24358:	ldr	r4, [r7, r6, lsl #2]
   2435c:	cmn	r4, #1
   24360:	bne	24374 <__assert_fail@plt+0x12ec0>
   24364:	add	r6, r6, #1
   24368:	add	r4, r3, r6
   2436c:	cmp	r4, r5
   24370:	blt	24358 <__assert_fail@plt+0x12ea4>
   24374:	mov	r8, #0
   24378:	cmp	r9, #5
   2437c:	bne	243c4 <__assert_fail@plt+0x12f10>
   24380:	cmp	r6, #2
   24384:	blt	244f0 <__assert_fail@plt+0x1303c>
   24388:	ldr	r0, [r0, #128]	; 0x80
   2438c:	tst	r0, #64	; 0x40
   24390:	bne	243a4 <__assert_fail@plt+0x12ef0>
   24394:	ldr	r1, [r2, #4]
   24398:	ldrb	r1, [r1, r3]
   2439c:	cmp	r1, #10
   243a0:	beq	244f0 <__assert_fail@plt+0x1303c>
   243a4:	tst	r0, #128	; 0x80
   243a8:	beq	244ec <__assert_fail@plt+0x13038>
   243ac:	ldr	r0, [r2, #4]
   243b0:	ldrb	r0, [r0, r3]
   243b4:	cmp	r0, #0
   243b8:	movne	r8, r6
   243bc:	mov	r0, r8
   243c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   243c4:	cmp	r9, #6
   243c8:	bne	244f0 <__assert_fail@plt+0x1303c>
   243cc:	cmp	r6, #2
   243d0:	blt	244f0 <__assert_fail@plt+0x1303c>
   243d4:	ldr	r7, [lr, r1, lsl #3]
   243d8:	ldr	r0, [r7, #32]
   243dc:	cmp	r0, #0
   243e0:	bne	243fc <__assert_fail@plt+0x12f48>
   243e4:	ldr	r1, [r7, #36]	; 0x24
   243e8:	cmp	r1, #0
   243ec:	bne	243fc <__assert_fail@plt+0x12f48>
   243f0:	ldr	r1, [r7, #20]
   243f4:	cmp	r1, #0
   243f8:	beq	244f8 <__assert_fail@plt+0x13044>
   243fc:	cmp	ip, #1
   24400:	bne	2441c <__assert_fail@plt+0x12f68>
   24404:	ldr	r1, [r2, #4]
   24408:	ldrb	r5, [r1, r3]
   2440c:	ldr	r1, [r7, #20]
   24410:	cmp	r1, #1
   24414:	bge	24430 <__assert_fail@plt+0x12f7c>
   24418:	b	24450 <__assert_fail@plt+0x12f9c>
   2441c:	ldr	r1, [r2, #8]
   24420:	ldr	r5, [r1, r3, lsl #2]
   24424:	ldr	r1, [r7, #20]
   24428:	cmp	r1, #1
   2442c:	blt	24450 <__assert_fail@plt+0x12f9c>
   24430:	ldr	r2, [r7]
   24434:	mov	r3, #0
   24438:	ldr	r4, [r2, r3, lsl #2]
   2443c:	cmp	r5, r4
   24440:	beq	244cc <__assert_fail@plt+0x13018>
   24444:	add	r3, r3, #1
   24448:	cmp	r3, r1
   2444c:	blt	24438 <__assert_fail@plt+0x12f84>
   24450:	ldr	r1, [r7, #36]	; 0x24
   24454:	cmp	r1, #1
   24458:	blt	2448c <__assert_fail@plt+0x12fd8>
   2445c:	mov	r4, #0
   24460:	ldr	r0, [r7, #12]
   24464:	ldr	r1, [r0, r4, lsl #2]
   24468:	mov	r0, r5
   2446c:	bl	111f0 <iswctype@plt>
   24470:	cmp	r0, #0
   24474:	bne	244cc <__assert_fail@plt+0x13018>
   24478:	ldr	r0, [r7, #36]	; 0x24
   2447c:	add	r4, r4, #1
   24480:	cmp	r4, r0
   24484:	blt	24460 <__assert_fail@plt+0x12fac>
   24488:	ldr	r0, [r7, #32]
   2448c:	cmp	r0, #1
   24490:	blt	244c4 <__assert_fail@plt+0x13010>
   24494:	ldr	r1, [r7, #4]
   24498:	mov	r2, #0
   2449c:	ldr	r3, [r1, r2, lsl #2]
   244a0:	cmp	r3, r5
   244a4:	bhi	244b8 <__assert_fail@plt+0x13004>
   244a8:	ldr	r3, [r7, #8]
   244ac:	ldr	r3, [r3, r2, lsl #2]
   244b0:	cmp	r5, r3
   244b4:	bls	244cc <__assert_fail@plt+0x13018>
   244b8:	add	r2, r2, #1
   244bc:	cmp	r2, r0
   244c0:	blt	2449c <__assert_fail@plt+0x12fe8>
   244c4:	mov	r0, #0
   244c8:	b	244d0 <__assert_fail@plt+0x1301c>
   244cc:	mov	r0, r6
   244d0:	ldrb	r1, [r7, #16]
   244d4:	tst	r1, #1
   244d8:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   244dc:	cmp	r0, #0
   244e0:	bgt	244f0 <__assert_fail@plt+0x1303c>
   244e4:	cmp	r6, #1
   244e8:	movle	r6, #1
   244ec:	mov	r8, r6
   244f0:	mov	r0, r8
   244f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   244f8:	mov	r5, #0
   244fc:	ldr	r1, [r7, #20]
   24500:	cmp	r1, #1
   24504:	bge	24430 <__assert_fail@plt+0x12f7c>
   24508:	b	24450 <__assert_fail@plt+0x12f9c>
   2450c:	ldr	r0, [r2, #4]
   24510:	mov	r8, #0
   24514:	ldrb	r6, [r0, r3]
   24518:	cmp	r6, #194	; 0xc2
   2451c:	bcc	244f0 <__assert_fail@plt+0x1303c>
   24520:	ldr	r1, [r2, #48]	; 0x30
   24524:	add	r2, r3, #2
   24528:	cmp	r2, r1
   2452c:	bgt	244f0 <__assert_fail@plt+0x1303c>
   24530:	add	r0, r0, r3
   24534:	cmp	r6, #223	; 0xdf
   24538:	ldrb	r7, [r0, #1]
   2453c:	bhi	24560 <__assert_fail@plt+0x130ac>
   24540:	mov	r8, #2
   24544:	cmp	r7, #191	; 0xbf
   24548:	sxtb	r0, r7
   2454c:	movwhi	r8, #0
   24550:	cmn	r0, #1
   24554:	movwgt	r8, #0
   24558:	mov	r0, r8
   2455c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24560:	cmp	r6, #239	; 0xef
   24564:	bhi	24580 <__assert_fail@plt+0x130cc>
   24568:	mov	r2, #3
   2456c:	cmp	r6, #224	; 0xe0
   24570:	bne	245dc <__assert_fail@plt+0x13128>
   24574:	cmp	r7, #160	; 0xa0
   24578:	bcc	244f0 <__assert_fail@plt+0x1303c>
   2457c:	b	245dc <__assert_fail@plt+0x13128>
   24580:	cmp	r6, #247	; 0xf7
   24584:	bhi	245a0 <__assert_fail@plt+0x130ec>
   24588:	mov	r2, #4
   2458c:	cmp	r6, #240	; 0xf0
   24590:	bne	245dc <__assert_fail@plt+0x13128>
   24594:	cmp	r7, #144	; 0x90
   24598:	bcc	244f0 <__assert_fail@plt+0x1303c>
   2459c:	b	245dc <__assert_fail@plt+0x13128>
   245a0:	cmp	r6, #251	; 0xfb
   245a4:	bhi	245c0 <__assert_fail@plt+0x1310c>
   245a8:	mov	r2, #5
   245ac:	cmp	r6, #248	; 0xf8
   245b0:	bne	245dc <__assert_fail@plt+0x13128>
   245b4:	cmp	r7, #136	; 0x88
   245b8:	bcc	244f0 <__assert_fail@plt+0x1303c>
   245bc:	b	245dc <__assert_fail@plt+0x13128>
   245c0:	cmp	r6, #253	; 0xfd
   245c4:	bhi	244f0 <__assert_fail@plt+0x1303c>
   245c8:	mov	r2, #6
   245cc:	cmp	r6, #252	; 0xfc
   245d0:	bne	245dc <__assert_fail@plt+0x13128>
   245d4:	cmp	r7, #132	; 0x84
   245d8:	bcc	244f0 <__assert_fail@plt+0x1303c>
   245dc:	add	r3, r2, r3
   245e0:	cmp	r3, r1
   245e4:	bgt	244f0 <__assert_fail@plt+0x1303c>
   245e8:	mov	r1, #1
   245ec:	ldrb	r3, [r0, r1]
   245f0:	sxtb	r7, r3
   245f4:	cmn	r7, #1
   245f8:	bgt	244f0 <__assert_fail@plt+0x1303c>
   245fc:	cmp	r3, #191	; 0xbf
   24600:	bhi	244f0 <__assert_fail@plt+0x1303c>
   24604:	add	r1, r1, #1
   24608:	cmp	r1, r2
   2460c:	movcs	r0, r2
   24610:	popcs	{r4, r5, r6, r7, r8, r9, fp, pc}
   24614:	ldrb	r3, [r0, r1]
   24618:	sxtb	r7, r3
   2461c:	cmn	r7, #1
   24620:	ble	245fc <__assert_fail@plt+0x13148>
   24624:	b	244f0 <__assert_fail@plt+0x1303c>
   24628:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2462c:	add	fp, sp, #24
   24630:	ldr	r4, [r1, #4]
   24634:	mov	r6, r0
   24638:	mvn	r0, #0
   2463c:	mov	r8, #0
   24640:	uxtab	r3, r0, r4
   24644:	cmp	r3, #6
   24648:	bhi	247f4 <__assert_fail@plt+0x13340>
   2464c:	ldr	r0, [r6, #4]
   24650:	mov	r9, r1
   24654:	ldrb	r1, [r0, r2]
   24658:	add	r7, pc, #4
   2465c:	sxtb	r0, r1
   24660:	ldr	pc, [r7, r3, lsl #2]
   24664:	andeq	r4, r2, r0, lsl #13
   24668:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   2466c:	muleq	r2, r4, r6
   24670:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24674:			; <UNDEFINED> instruction: 0x000246bc
   24678:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   2467c:			; <UNDEFINED> instruction: 0x000246b4
   24680:	ldrb	r3, [r9]
   24684:	uxtb	r7, r0
   24688:	cmp	r3, r7
   2468c:	beq	246dc <__assert_fail@plt+0x13228>
   24690:	b	247f4 <__assert_fail@plt+0x13340>
   24694:	ldr	r3, [r9]
   24698:	ubfx	r7, r1, #5, #3
   2469c:	mov	r5, #1
   246a0:	ldr	r3, [r3, r7, lsl #2]
   246a4:	and	r7, r1, #31
   246a8:	tst	r3, r5, lsl r7
   246ac:	bne	246dc <__assert_fail@plt+0x13228>
   246b0:	b	247f4 <__assert_fail@plt+0x13340>
   246b4:	cmp	r0, #0
   246b8:	blt	247f4 <__assert_fail@plt+0x13340>
   246bc:	cmp	r1, #0
   246c0:	beq	24788 <__assert_fail@plt+0x132d4>
   246c4:	cmp	r1, #10
   246c8:	bne	246dc <__assert_fail@plt+0x13228>
   246cc:	ldr	r3, [r6, #84]	; 0x54
   246d0:	ldrb	r3, [r3, #128]	; 0x80
   246d4:	tst	r3, #64	; 0x40
   246d8:	beq	247f4 <__assert_fail@plt+0x13340>
   246dc:	movw	r3, #65280	; 0xff00
   246e0:	movt	r3, #3
   246e4:	tst	r4, r3
   246e8:	beq	2474c <__assert_fail@plt+0x13298>
   246ec:	cmn	r2, #1
   246f0:	ble	2472c <__assert_fail@plt+0x13278>
   246f4:	ldr	r3, [r6, #48]	; 0x30
   246f8:	cmp	r3, r2
   246fc:	beq	24814 <__assert_fail@plt+0x13360>
   24700:	ldr	r3, [r6, #80]	; 0x50
   24704:	cmp	r3, #2
   24708:	blt	24758 <__assert_fail@plt+0x132a4>
   2470c:	ldr	r0, [r6, #8]
   24710:	ldr	r7, [r0, r2, lsl #2]
   24714:	cmn	r7, #1
   24718:	bne	2479c <__assert_fail@plt+0x132e8>
   2471c:	sub	r1, r2, #1
   24720:	cmp	r2, #0
   24724:	mov	r2, r1
   24728:	bgt	24710 <__assert_fail@plt+0x1325c>
   2472c:	ldr	r1, [r6, #60]	; 0x3c
   24730:	and	r0, r1, #1
   24734:	tst	r4, #1024	; 0x400
   24738:	eor	r2, r0, #1
   2473c:	beq	247d0 <__assert_fail@plt+0x1331c>
   24740:	cmp	r0, #0
   24744:	beq	247f4 <__assert_fail@plt+0x13340>
   24748:	b	247d0 <__assert_fail@plt+0x1331c>
   2474c:	mov	r8, #1
   24750:	mov	r0, r8
   24754:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24758:	ldr	r2, [r6, #68]	; 0x44
   2475c:	ubfx	r3, r1, #5, #3
   24760:	and	r7, r1, #31
   24764:	mov	r1, #1
   24768:	ldr	r3, [r2, r3, lsl #2]
   2476c:	mov	r2, #0
   24770:	tst	r3, r1, lsl r7
   24774:	bne	247d0 <__assert_fail@plt+0x1331c>
   24778:	mov	r1, #0
   2477c:	cmp	r0, #10
   24780:	beq	247b4 <__assert_fail@plt+0x13300>
   24784:	b	247c0 <__assert_fail@plt+0x1330c>
   24788:	ldr	r3, [r6, #84]	; 0x54
   2478c:	ldrb	r3, [r3, #128]	; 0x80
   24790:	tst	r3, #128	; 0x80
   24794:	bne	247f4 <__assert_fail@plt+0x13340>
   24798:	b	246dc <__assert_fail@plt+0x13228>
   2479c:	ldrb	r0, [r6, #78]	; 0x4e
   247a0:	cmp	r0, #0
   247a4:	bne	24834 <__assert_fail@plt+0x13380>
   247a8:	mov	r1, #0
   247ac:	cmp	r7, #10
   247b0:	bne	247c0 <__assert_fail@plt+0x1330c>
   247b4:	ldrb	r1, [r6, #77]	; 0x4d
   247b8:	cmp	r1, #0
   247bc:	movwne	r1, #2
   247c0:	and	r0, r1, #1
   247c4:	tst	r4, #1024	; 0x400
   247c8:	eor	r2, r0, #1
   247cc:	bne	24740 <__assert_fail@plt+0x1328c>
   247d0:	ldr	r0, [r9, #4]
   247d4:	cmp	r2, #0
   247d8:	bne	247e4 <__assert_fail@plt+0x13330>
   247dc:	ands	r2, r0, #2048	; 0x800
   247e0:	bne	247f4 <__assert_fail@plt+0x13340>
   247e4:	tst	r1, #2
   247e8:	bne	247fc <__assert_fail@plt+0x13348>
   247ec:	ands	r2, r0, #8192	; 0x2000
   247f0:	beq	247fc <__assert_fail@plt+0x13348>
   247f4:	mov	r0, r8
   247f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   247fc:	and	r0, r0, #32768	; 0x8000
   24800:	mov	r2, #1
   24804:	and	r1, r1, #8
   24808:	eor	r0, r2, r0, lsr #15
   2480c:	orr	r0, r0, r1, lsr #3
   24810:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24814:	ldr	r0, [r6, #88]	; 0x58
   24818:	and	r0, r0, #2
   2481c:	eor	r1, r0, #10
   24820:	and	r0, r1, #1
   24824:	tst	r4, #1024	; 0x400
   24828:	eor	r2, r0, #1
   2482c:	bne	24740 <__assert_fail@plt+0x1328c>
   24830:	b	247d0 <__assert_fail@plt+0x1331c>
   24834:	mov	r0, r7
   24838:	bl	113b8 <iswalnum@plt>
   2483c:	mov	r1, #1
   24840:	mov	r2, #0
   24844:	cmp	r7, #95	; 0x5f
   24848:	beq	247d0 <__assert_fail@plt+0x1331c>
   2484c:	cmp	r0, #0
   24850:	beq	247a8 <__assert_fail@plt+0x132f4>
   24854:	b	247d0 <__assert_fail@plt+0x1331c>
   24858:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2485c:	add	fp, sp, #28
   24860:	sub	sp, sp, #4
   24864:	vpush	{d8-d9}
   24868:	sub	sp, sp, #216	; 0xd8
   2486c:	sub	sp, sp, #14336	; 0x3800
   24870:	sub	lr, fp, #1024	; 0x400
   24874:	mov	r5, #0
   24878:	mov	sl, r0
   2487c:	vmov.i32	q4, #0	; 0x00000000
   24880:	str	r1, [sp, #88]	; 0x58
   24884:	sub	r2, lr, #56	; 0x38
   24888:	str	r5, [r1, #44]	; 0x2c
   2488c:	str	r5, [r1, #48]	; 0x30
   24890:	mov	r0, r2
   24894:	vst1.64	{d8-d9}, [r0]!
   24898:	vst1.64	{d8-d9}, [r0]
   2489c:	ldr	r0, [r1, #8]
   248a0:	cmp	r0, #1
   248a4:	blt	26080 <__assert_fail@plt+0x14bcc>
   248a8:	add	r0, sp, #160	; 0xa0
   248ac:	mov	r5, #0
   248b0:	str	sl, [sp, #16]
   248b4:	add	r0, r0, #28
   248b8:	str	r0, [sp, #12]
   248bc:	add	r0, sl, #112	; 0x70
   248c0:	str	r0, [sp, #4]
   248c4:	add	r0, sl, #96	; 0x60
   248c8:	str	r0, [sp]
   248cc:	add	r0, r2, #16
   248d0:	str	r0, [sp, #8]
   248d4:	mov	r0, #0
   248d8:	str	r0, [sp, #112]	; 0x70
   248dc:	ldr	r0, [sp, #88]	; 0x58
   248e0:	ldr	r1, [sp, #112]	; 0x70
   248e4:	ldr	r3, [sl]
   248e8:	ldr	r0, [r0, #12]
   248ec:	ldr	r2, [r0, r1, lsl #2]
   248f0:	add	r0, r3, r2, lsl #3
   248f4:	ldr	r1, [r0, #4]
   248f8:	uxtb	ip, r1
   248fc:	cmp	ip, #1
   24900:	bne	24a08 <__assert_fail@plt+0x13554>
   24904:	mov	r8, r2
   24908:	ldrb	r2, [r3, r2, lsl #3]
   2490c:	sub	lr, fp, #1024	; 0x400
   24910:	mov	r0, r3
   24914:	mov	r4, r5
   24918:	mov	r5, #1
   2491c:	sub	r7, lr, #56	; 0x38
   24920:	mov	r6, r7
   24924:	ubfx	r3, r2, #5, #3
   24928:	ldr	sl, [sp, #16]
   2492c:	and	r2, r2, #31
   24930:	ldr	r7, [r7, r3, lsl #2]
   24934:	orr	r2, r7, r5, lsl r2
   24938:	mov	r5, r4
   2493c:	str	r2, [r6, r3, lsl #2]
   24940:	movw	r2, #65280	; 0xff00
   24944:	movt	r2, #3
   24948:	ands	r2, r1, r2
   2494c:	mov	r2, r0
   24950:	beq	24d60 <__assert_fail@plt+0x138ac>
   24954:	tst	r1, #8192	; 0x2000
   24958:	beq	24988 <__assert_fail@plt+0x134d4>
   2495c:	mov	r0, r2
   24960:	ldr	r2, [fp, #-1080]	; 0xfffffbc8
   24964:	sub	lr, fp, #1024	; 0x400
   24968:	sub	r3, lr, #56	; 0x38
   2496c:	vst1.64	{d8-d9}, [r3]!
   24970:	vst1.64	{d8-d9}, [r3]
   24974:	tst	r2, #1024	; 0x400
   24978:	beq	25634 <__assert_fail@plt+0x14180>
   2497c:	mov	r2, #1024	; 0x400
   24980:	str	r2, [fp, #-1080]	; 0xfffffbc8
   24984:	mov	r2, r0
   24988:	tst	r1, #32768	; 0x8000
   2498c:	bne	24b04 <__assert_fail@plt+0x13650>
   24990:	tst	r1, #1024	; 0x400
   24994:	bne	24aec <__assert_fail@plt+0x13638>
   24998:	tst	r1, #2048	; 0x800
   2499c:	beq	24d60 <__assert_fail@plt+0x138ac>
   249a0:	tst	r1, #4194304	; 0x400000
   249a4:	beq	249b0 <__assert_fail@plt+0x134fc>
   249a8:	cmp	ip, #1
   249ac:	beq	24b04 <__assert_fail@plt+0x13650>
   249b0:	ldr	r1, [sl, #92]	; 0x5c
   249b4:	mov	r0, r2
   249b8:	cmp	r1, #1
   249bc:	ble	24ce8 <__assert_fail@plt+0x13834>
   249c0:	ldr	r1, [sl, #60]	; 0x3c
   249c4:	ldr	r2, [sp]
   249c8:	sub	lr, fp, #1024	; 0x400
   249cc:	vld1.32	{d16-d17}, [r2]
   249d0:	vld1.32	{d18-d19}, [r1]!
   249d4:	sub	r2, lr, #56	; 0x38
   249d8:	vld1.64	{d20-d21}, [r2]
   249dc:	vand	q8, q9, q8
   249e0:	vbic	q9, q10, q8
   249e4:	vst1.64	{d18-d19}, [r2]
   249e8:	ldr	r2, [sp, #4]
   249ec:	vld1.32	{d20-d21}, [r1]
   249f0:	ldr	r1, [sp, #8]
   249f4:	vld1.32	{d16-d17}, [r2]
   249f8:	vld1.32	{d22-d23}, [r1]
   249fc:	vand	q8, q10, q8
   24a00:	vbic	q8, q11, q8
   24a04:	b	24d18 <__assert_fail@plt+0x13864>
   24a08:	mov	r0, r3
   24a0c:	mov	r8, r2
   24a10:	cmp	ip, #7
   24a14:	beq	24a5c <__assert_fail@plt+0x135a8>
   24a18:	cmp	ip, #5
   24a1c:	beq	24aa8 <__assert_fail@plt+0x135f4>
   24a20:	cmp	ip, #3
   24a24:	bne	25634 <__assert_fail@plt+0x14180>
   24a28:	ldr	r2, [r0, r8, lsl #3]
   24a2c:	sub	lr, fp, #1024	; 0x400
   24a30:	sub	r3, lr, #56	; 0x38
   24a34:	vld1.64	{d16-d17}, [r3]
   24a38:	vld1.32	{d18-d19}, [r2]!
   24a3c:	vorr	q8, q8, q9
   24a40:	vst1.64	{d16-d17}, [r3]
   24a44:	vld1.32	{d16-d17}, [r2]
   24a48:	ldr	r2, [sp, #8]
   24a4c:	vld1.32	{d18-d19}, [r2]
   24a50:	vorr	q8, q9, q8
   24a54:	vst1.32	{d16-d17}, [r2]
   24a58:	b	24940 <__assert_fail@plt+0x1348c>
   24a5c:	mvn	r2, #0
   24a60:	str	r2, [fp, #-1068]	; 0xfffffbd4
   24a64:	str	r2, [fp, #-1072]	; 0xfffffbd0
   24a68:	str	r2, [fp, #-1076]	; 0xfffffbcc
   24a6c:	str	r2, [fp, #-1080]	; 0xfffffbc8
   24a70:	ldr	r3, [sl, #128]	; 0x80
   24a74:	and	r2, r3, #128	; 0x80
   24a78:	ands	r3, r3, #64	; 0x40
   24a7c:	beq	24a88 <__assert_fail@plt+0x135d4>
   24a80:	cmp	r2, #0
   24a84:	beq	24940 <__assert_fail@plt+0x1348c>
   24a88:	cmp	r3, #0
   24a8c:	mvn	r3, #1
   24a90:	movweq	r3, #64510	; 0xfbfe
   24a94:	movteq	r3, #65535	; 0xffff
   24a98:	cmp	r2, #0
   24a9c:	mvneq	r3, #1024	; 0x400
   24aa0:	str	r3, [fp, #-1080]	; 0xfffffbc8
   24aa4:	b	24940 <__assert_fail@plt+0x1348c>
   24aa8:	ldr	r2, [sl, #92]	; 0x5c
   24aac:	cmp	r2, #2
   24ab0:	blt	24b10 <__assert_fail@plt+0x1365c>
   24ab4:	ldr	r2, [sl, #60]	; 0x3c
   24ab8:	sub	lr, fp, #1024	; 0x400
   24abc:	sub	r3, lr, #56	; 0x38
   24ac0:	vld1.64	{d16-d17}, [r3]
   24ac4:	vld1.32	{d18-d19}, [r2]!
   24ac8:	vorr	q8, q8, q9
   24acc:	vst1.64	{d16-d17}, [r3]
   24ad0:	vld1.32	{d18-d19}, [r2]
   24ad4:	ldr	r2, [sp, #8]
   24ad8:	vld1.32	{d20-d21}, [r2]
   24adc:	vorr	q9, q10, q9
   24ae0:	vst1.32	{d18-d19}, [r2]
   24ae4:	vmov.32	r2, d16[0]
   24ae8:	b	24b34 <__assert_fail@plt+0x13680>
   24aec:	mov	r0, r2
   24af0:	movw	r2, #255	; 0xff
   24af4:	movt	r2, #64	; 0x40
   24af8:	and	r2, r1, r2
   24afc:	cmp	r2, #1
   24b00:	bne	24b60 <__assert_fail@plt+0x136ac>
   24b04:	sub	lr, fp, #1024	; 0x400
   24b08:	sub	r0, lr, #56	; 0x38
   24b0c:	b	2562c <__assert_fail@plt+0x14178>
   24b10:	mvn	r2, #0
   24b14:	str	r2, [fp, #-1052]	; 0xfffffbe4
   24b18:	str	r2, [fp, #-1056]	; 0xfffffbe0
   24b1c:	str	r2, [fp, #-1060]	; 0xfffffbdc
   24b20:	str	r2, [fp, #-1064]	; 0xfffffbd8
   24b24:	str	r2, [fp, #-1068]	; 0xfffffbd4
   24b28:	str	r2, [fp, #-1072]	; 0xfffffbd0
   24b2c:	str	r2, [fp, #-1076]	; 0xfffffbcc
   24b30:	str	r2, [fp, #-1080]	; 0xfffffbc8
   24b34:	ldr	r3, [sl, #128]	; 0x80
   24b38:	ands	r7, r3, #64	; 0x40
   24b3c:	and	r3, r3, #128	; 0x80
   24b40:	biceq	r2, r2, #1024	; 0x400
   24b44:	beq	24b50 <__assert_fail@plt+0x1369c>
   24b48:	cmp	r3, #0
   24b4c:	beq	24940 <__assert_fail@plt+0x1348c>
   24b50:	cmp	r3, #0
   24b54:	bicne	r2, r2, #1
   24b58:	str	r2, [fp, #-1080]	; 0xfffffbc8
   24b5c:	b	24940 <__assert_fail@plt+0x1348c>
   24b60:	ldr	r2, [sl, #92]	; 0x5c
   24b64:	cmp	r2, #1
   24b68:	ble	24c00 <__assert_fail@plt+0x1374c>
   24b6c:	ldr	r2, [sl, #60]	; 0x3c
   24b70:	ldr	r3, [sp]
   24b74:	sub	lr, fp, #1024	; 0x400
   24b78:	vld1.32	{d16-d17}, [r3]
   24b7c:	vld1.32	{d18-d19}, [r2]!
   24b80:	sub	r3, lr, #56	; 0x38
   24b84:	vld1.64	{d20-d21}, [r3]
   24b88:	vorn	q8, q8, q9
   24b8c:	vand	q8, q10, q8
   24b90:	vst1.64	{d16-d17}, [r3]
   24b94:	vmov.32	r3, d16[1]
   24b98:	vld1.32	{d18-d19}, [r2]
   24b9c:	ldr	r2, [sp, #4]
   24ba0:	vld1.32	{d20-d21}, [r2]
   24ba4:	ldr	r2, [sp, #8]
   24ba8:	vld1.32	{d22-d23}, [r2]
   24bac:	vorn	q9, q10, q9
   24bb0:	vand	q9, q11, q9
   24bb4:	vst1.32	{d18-d19}, [r2]
   24bb8:	vmov.32	r2, d16[0]
   24bbc:	orr	r2, r3, r2
   24bc0:	vmov.32	r3, d17[0]
   24bc4:	orr	r2, r2, r3
   24bc8:	vmov.32	r3, d17[1]
   24bcc:	orr	r2, r2, r3
   24bd0:	vmov.32	r3, d18[0]
   24bd4:	orr	r2, r2, r3
   24bd8:	vmov.32	r3, d18[1]
   24bdc:	orr	r2, r2, r3
   24be0:	vmov.32	r3, d19[0]
   24be4:	orr	r2, r2, r3
   24be8:	vmov.32	r3, d19[1]
   24bec:	orr	r2, r2, r3
   24bf0:	cmp	r2, #0
   24bf4:	mov	r2, r0
   24bf8:	bne	24998 <__assert_fail@plt+0x134e4>
   24bfc:	b	25634 <__assert_fail@plt+0x14180>
   24c00:	ldr	r2, [sl, #112]	; 0x70
   24c04:	str	r0, [sp, #24]
   24c08:	str	r8, [sp, #28]
   24c0c:	str	r5, [sp, #156]	; 0x9c
   24c10:	ldr	r3, [sl, #96]	; 0x60
   24c14:	ldr	r4, [fp, #-1080]	; 0xfffffbc8
   24c18:	ldr	r0, [sl, #100]	; 0x64
   24c1c:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   24c20:	ldr	r8, [sl, #104]	; 0x68
   24c24:	ldr	r9, [sl, #108]	; 0x6c
   24c28:	ldr	r6, [fp, #-1072]	; 0xfffffbd0
   24c2c:	str	r2, [sp, #140]	; 0x8c
   24c30:	ldr	r2, [sl, #116]	; 0x74
   24c34:	and	lr, r5, r0
   24c38:	and	r7, r4, r3
   24c3c:	ldr	r0, [sp, #140]	; 0x8c
   24c40:	str	r2, [sp, #144]	; 0x90
   24c44:	ldr	r2, [sl, #120]	; 0x78
   24c48:	str	r2, [sp, #148]	; 0x94
   24c4c:	ldr	r2, [sl, #124]	; 0x7c
   24c50:	and	sl, r6, r8
   24c54:	ldr	r8, [sp, #28]
   24c58:	str	r2, [sp, #152]	; 0x98
   24c5c:	ldr	r2, [fp, #-1068]	; 0xfffffbd4
   24c60:	str	r7, [fp, #-1080]	; 0xfffffbc8
   24c64:	str	lr, [fp, #-1076]	; 0xfffffbcc
   24c68:	str	sl, [fp, #-1072]	; 0xfffffbd0
   24c6c:	orr	r7, lr, r7
   24c70:	orr	r7, r7, sl
   24c74:	ldr	sl, [sp, #16]
   24c78:	and	r2, r2, r9
   24c7c:	str	r2, [fp, #-1068]	; 0xfffffbd4
   24c80:	orr	r2, r7, r2
   24c84:	ldr	r6, [fp, #-1064]	; 0xfffffbd8
   24c88:	and	r9, r6, r0
   24c8c:	ldr	r0, [sp, #144]	; 0x90
   24c90:	str	r9, [fp, #-1064]	; 0xfffffbd8
   24c94:	orr	r2, r2, r9
   24c98:	ldr	r4, [fp, #-1060]	; 0xfffffbdc
   24c9c:	and	r4, r4, r0
   24ca0:	ldr	r0, [sp, #148]	; 0x94
   24ca4:	str	r4, [fp, #-1060]	; 0xfffffbdc
   24ca8:	orr	r2, r2, r4
   24cac:	ldr	r3, [fp, #-1056]	; 0xfffffbe0
   24cb0:	and	r3, r3, r0
   24cb4:	ldr	r0, [sp, #152]	; 0x98
   24cb8:	str	r3, [fp, #-1056]	; 0xfffffbe0
   24cbc:	orr	r2, r2, r3
   24cc0:	ldr	r5, [fp, #-1052]	; 0xfffffbe4
   24cc4:	and	r6, r5, r0
   24cc8:	ldr	r0, [sp, #24]
   24ccc:	ldr	r5, [sp, #156]	; 0x9c
   24cd0:	str	r6, [fp, #-1052]	; 0xfffffbe4
   24cd4:	orr	r2, r2, r6
   24cd8:	cmp	r2, #0
   24cdc:	mov	r2, r0
   24ce0:	bne	24998 <__assert_fail@plt+0x134e4>
   24ce4:	b	25634 <__assert_fail@plt+0x14180>
   24ce8:	ldr	r1, [sp]
   24cec:	sub	lr, fp, #1024	; 0x400
   24cf0:	vld1.32	{d16-d17}, [r1]
   24cf4:	sub	r1, lr, #56	; 0x38
   24cf8:	vld1.64	{d18-d19}, [r1]
   24cfc:	vbic	q9, q9, q8
   24d00:	vst1.64	{d18-d19}, [r1]
   24d04:	ldr	r1, [sp, #4]
   24d08:	vld1.32	{d16-d17}, [r1]
   24d0c:	ldr	r1, [sp, #8]
   24d10:	vld1.32	{d20-d21}, [r1]
   24d14:	vbic	q8, q10, q8
   24d18:	vst1.32	{d16-d17}, [r1]
   24d1c:	vmov.32	r1, d18[0]
   24d20:	vmov.32	r2, d18[1]
   24d24:	orr	r1, r2, r1
   24d28:	vmov.32	r2, d19[0]
   24d2c:	orr	r1, r1, r2
   24d30:	vmov.32	r2, d19[1]
   24d34:	orr	r1, r1, r2
   24d38:	vmov.32	r2, d16[0]
   24d3c:	orr	r1, r1, r2
   24d40:	vmov.32	r2, d16[1]
   24d44:	orr	r1, r1, r2
   24d48:	vmov.32	r2, d17[0]
   24d4c:	orr	r1, r1, r2
   24d50:	vmov.32	r2, d17[1]
   24d54:	orrs	r1, r1, r2
   24d58:	mov	r2, r0
   24d5c:	beq	25634 <__assert_fail@plt+0x14180>
   24d60:	cmp	r5, #1
   24d64:	blt	25170 <__assert_fail@plt+0x13cbc>
   24d68:	ldr	r6, [sp, #12]
   24d6c:	cmp	ip, #1
   24d70:	bne	25180 <__assert_fail@plt+0x13ccc>
   24d74:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   24d78:	ldr	r7, [fp, #-1080]	; 0xfffffbc8
   24d7c:	ldr	sl, [fp, #-1076]	; 0xfffffbcc
   24d80:	ldr	r9, [fp, #-1072]	; 0xfffffbd0
   24d84:	ldr	lr, [fp, #-1068]	; 0xfffffbd4
   24d88:	str	r5, [sp, #156]	; 0x9c
   24d8c:	mov	r4, #0
   24d90:	str	r6, [sp, #148]	; 0x94
   24d94:	add	r5, sp, #160	; 0xa0
   24d98:	mov	ip, r8
   24d9c:	str	r8, [sp, #28]
   24da0:	str	r2, [sp, #24]
   24da4:	str	r0, [sp, #140]	; 0x8c
   24da8:	sub	r0, fp, #6144	; 0x1800
   24dac:	sub	r6, r0, #104	; 0x68
   24db0:	ldrb	r0, [r2, ip, lsl #3]
   24db4:	mov	r8, r2
   24db8:	mov	r2, #1
   24dbc:	ubfx	r1, r0, #5, #3
   24dc0:	and	r0, r0, #31
   24dc4:	add	r1, r5, r1, lsl #2
   24dc8:	ldr	r1, [r1, r4, lsl #5]
   24dcc:	tst	r1, r2, lsl r0
   24dd0:	beq	25044 <__assert_fail@plt+0x13b90>
   24dd4:	add	r0, r5, r4, lsl #5
   24dd8:	str	r6, [sp, #116]	; 0x74
   24ddc:	str	r4, [sp, #152]	; 0x98
   24de0:	add	ip, r0, #8
   24de4:	ldr	r6, [r0, #4]
   24de8:	ldm	ip, {r1, r3, ip}
   24dec:	ldr	r5, [sp, #148]	; 0x94
   24df0:	str	lr, [sp, #136]	; 0x88
   24df4:	str	sl, [sp, #132]	; 0x84
   24df8:	ldr	r8, [fp, #-1052]	; 0xfffffbe4
   24dfc:	str	r6, [sp, #124]	; 0x7c
   24e00:	and	r6, r6, sl
   24e04:	ldr	sl, [fp, #-1056]	; 0xfffffbe0
   24e08:	ldr	r2, [r5, #-28]	; 0xffffffe4
   24e0c:	and	r4, r1, r9
   24e10:	str	r6, [sp, #84]	; 0x54
   24e14:	str	r1, [sp, #104]	; 0x68
   24e18:	ldr	r1, [r5]
   24e1c:	str	ip, [sp, #144]	; 0x90
   24e20:	str	r3, [sp, #108]	; 0x6c
   24e24:	str	r8, [sp, #100]	; 0x64
   24e28:	str	r4, [sp, #96]	; 0x60
   24e2c:	str	r2, [sp, #120]	; 0x78
   24e30:	and	r2, r2, r7
   24e34:	str	r1, [sp, #128]	; 0x80
   24e38:	and	r1, r1, r8
   24e3c:	str	r2, [sp, #92]	; 0x5c
   24e40:	orr	r2, r6, r2
   24e44:	and	r6, r3, lr
   24e48:	ldr	lr, [fp, #-1060]	; 0xfffffbdc
   24e4c:	orr	r2, r2, r4
   24e50:	str	r6, [sp, #80]	; 0x50
   24e54:	orr	r2, r2, r6
   24e58:	ldr	r6, [sp, #140]	; 0x8c
   24e5c:	and	r4, ip, r6
   24e60:	str	r4, [sp, #76]	; 0x4c
   24e64:	orr	r4, r2, r4
   24e68:	ldr	r2, [r0, #20]
   24e6c:	and	r6, r2, lr
   24e70:	str	r6, [sp, #72]	; 0x48
   24e74:	orr	r6, r4, r6
   24e78:	ldr	r4, [r0, #24]
   24e7c:	and	ip, r4, sl
   24e80:	orr	r6, r6, ip
   24e84:	str	ip, [sp, #68]	; 0x44
   24e88:	orrs	r6, r6, r1
   24e8c:	beq	25050 <__assert_fail@plt+0x13b9c>
   24e90:	str	r1, [sp, #20]
   24e94:	ldr	r1, [sp, #120]	; 0x78
   24e98:	mov	r8, r2
   24e9c:	str	r2, [sp, #44]	; 0x2c
   24ea0:	ldr	r2, [sp, #132]	; 0x84
   24ea4:	ldr	ip, [sp, #104]	; 0x68
   24ea8:	ldr	r3, [sp, #140]	; 0x8c
   24eac:	bic	r6, r7, r1
   24eb0:	ldr	r1, [sp, #124]	; 0x7c
   24eb4:	str	r6, [sp, #64]	; 0x40
   24eb8:	bic	r6, r2, r1
   24ebc:	ldr	r2, [sp, #108]	; 0x6c
   24ec0:	ldr	r1, [sp, #136]	; 0x88
   24ec4:	str	r6, [sp, #48]	; 0x30
   24ec8:	bic	r6, r9, ip
   24ecc:	str	r6, [sp, #60]	; 0x3c
   24ed0:	bic	r6, r1, r2
   24ed4:	ldr	r1, [sp, #144]	; 0x90
   24ed8:	str	r6, [sp, #56]	; 0x38
   24edc:	bic	r6, r3, r1
   24ee0:	ldr	r1, [sp, #128]	; 0x80
   24ee4:	ldr	r3, [sp, #120]	; 0x78
   24ee8:	str	r6, [sp, #52]	; 0x34
   24eec:	bic	r6, lr, r8
   24ef0:	ldr	r8, [sp, #100]	; 0x64
   24ef4:	str	r6, [sp, #40]	; 0x28
   24ef8:	str	r6, [fp, #-1060]	; 0xfffffbdc
   24efc:	bic	r6, sl, r4
   24f00:	str	r6, [sp, #36]	; 0x24
   24f04:	str	r6, [fp, #-1056]	; 0xfffffbe0
   24f08:	bic	r7, r3, r7
   24f0c:	ldr	r3, [sp, #124]	; 0x7c
   24f10:	bic	r6, r8, r1
   24f14:	bic	r1, ip, r9
   24f18:	str	r6, [sp, #32]
   24f1c:	str	r6, [fp, #-1052]	; 0xfffffbe4
   24f20:	ldr	r6, [sp, #132]	; 0x84
   24f24:	bic	r3, r3, r6
   24f28:	orr	r6, r3, r7
   24f2c:	str	r3, [sp, #132]	; 0x84
   24f30:	mov	r3, r7
   24f34:	ldr	r7, [sp, #136]	; 0x88
   24f38:	orr	r6, r6, r1
   24f3c:	bic	r2, r2, r7
   24f40:	ldr	r7, [sp, #140]	; 0x8c
   24f44:	str	r2, [sp, #136]	; 0x88
   24f48:	orr	r6, r6, r2
   24f4c:	ldr	r2, [sp, #144]	; 0x90
   24f50:	bic	ip, r2, r7
   24f54:	ldr	r2, [sp, #44]	; 0x2c
   24f58:	orr	r6, r6, ip
   24f5c:	bic	lr, r2, lr
   24f60:	bic	r2, r4, sl
   24f64:	ldr	r4, [sp, #128]	; 0x80
   24f68:	orr	r6, r6, lr
   24f6c:	orr	r6, r6, r2
   24f70:	bic	r7, r4, r8
   24f74:	orrs	r6, r6, r7
   24f78:	beq	25070 <__assert_fail@plt+0x13bbc>
   24f7c:	ldr	r4, [sp, #156]	; 0x9c
   24f80:	add	r6, sp, #160	; 0xa0
   24f84:	str	r3, [r6, r4, lsl #5]
   24f88:	ldr	r3, [sp, #132]	; 0x84
   24f8c:	add	r6, r6, r4, lsl #5
   24f90:	str	r3, [r6, #4]
   24f94:	str	r1, [r6, #8]
   24f98:	ldr	r1, [sp, #136]	; 0x88
   24f9c:	add	r3, r6, #12
   24fa0:	stm	r3, {r1, ip, lr}
   24fa4:	str	r2, [r6, #24]
   24fa8:	str	r7, [r6, #28]
   24fac:	sub	lr, fp, #6144	; 0x1800
   24fb0:	str	r4, [sp, #156]	; 0x9c
   24fb4:	ldr	r1, [sp, #92]	; 0x5c
   24fb8:	ldr	r6, [sp, #116]	; 0x74
   24fbc:	str	r1, [r5, #-28]	; 0xffffffe4
   24fc0:	ldr	r1, [sp, #84]	; 0x54
   24fc4:	str	r1, [r0, #4]
   24fc8:	ldr	r1, [sp, #96]	; 0x60
   24fcc:	str	r1, [r0, #8]
   24fd0:	ldr	r1, [sp, #80]	; 0x50
   24fd4:	str	r1, [r0, #12]
   24fd8:	ldr	r1, [sp, #76]	; 0x4c
   24fdc:	str	r1, [r0, #16]
   24fe0:	ldr	r1, [sp, #72]	; 0x48
   24fe4:	str	r1, [r0, #20]
   24fe8:	ldr	r1, [sp, #68]	; 0x44
   24fec:	str	r1, [r0, #24]
   24ff0:	ldr	r0, [sp, #20]
   24ff4:	sub	r1, lr, #104	; 0x68
   24ff8:	str	r0, [r5]
   24ffc:	add	r0, r4, r4, lsl #1
   25000:	add	r5, r1, r0, lsl #2
   25004:	ldr	r0, [r6, #4]
   25008:	mov	r4, r5
   2500c:	str	r0, [r4, #4]!
   25010:	ldr	r8, [r6, #4]
   25014:	cmp	r8, #0
   25018:	ble	2507c <__assert_fail@plt+0x13bc8>
   2501c:	str	r0, [r5]
   25020:	lsl	r0, r0, #2
   25024:	bl	2ac60 <__assert_fail@plt+0x197ac>
   25028:	cmp	r0, #0
   2502c:	str	r0, [r5, #8]
   25030:	beq	26014 <__assert_fail@plt+0x14b60>
   25034:	ldr	r1, [r6, #8]
   25038:	lsl	r2, r8, #2
   2503c:	bl	1125c <memcpy@plt>
   25040:	b	2508c <__assert_fail@plt+0x13bd8>
   25044:	str	r9, [sp, #144]	; 0x90
   25048:	mov	r2, r8
   2504c:	b	2511c <__assert_fail@plt+0x13c68>
   25050:	ldr	r4, [sp, #152]	; 0x98
   25054:	ldr	ip, [sp, #28]
   25058:	ldr	r2, [sp, #24]
   2505c:	ldr	r6, [sp, #116]	; 0x74
   25060:	ldr	lr, [sp, #136]	; 0x88
   25064:	ldr	sl, [sp, #132]	; 0x84
   25068:	str	r9, [sp, #144]	; 0x90
   2506c:	b	25120 <__assert_fail@plt+0x13c6c>
   25070:	ldr	r4, [sp, #152]	; 0x98
   25074:	ldr	r6, [sp, #116]	; 0x74
   25078:	b	2509c <__assert_fail@plt+0x13be8>
   2507c:	mov	r0, #0
   25080:	str	r0, [r5]
   25084:	str	r0, [r5, #4]
   25088:	str	r0, [r5, #8]
   2508c:	ldr	r0, [sp, #156]	; 0x9c
   25090:	ldr	r4, [sp, #152]	; 0x98
   25094:	add	r0, r0, #1
   25098:	str	r0, [sp, #156]	; 0x9c
   2509c:	ldr	r0, [sp, #88]	; 0x58
   250a0:	ldr	r1, [sp, #112]	; 0x70
   250a4:	ldr	r0, [r0, #12]
   250a8:	ldr	r1, [r0, r1, lsl #2]
   250ac:	mov	r0, r6
   250b0:	bl	20074 <__assert_fail@plt+0xebc0>
   250b4:	cmp	r0, #0
   250b8:	beq	25b04 <__assert_fail@plt+0x14650>
   250bc:	ldr	r2, [sp, #64]	; 0x40
   250c0:	ldr	sl, [sp, #48]	; 0x30
   250c4:	ldr	r9, [sp, #60]	; 0x3c
   250c8:	ldr	lr, [sp, #56]	; 0x38
   250cc:	ldr	r1, [sp, #52]	; 0x34
   250d0:	ldr	r5, [sp, #40]	; 0x28
   250d4:	orr	r0, sl, r2
   250d8:	orr	r0, r0, r9
   250dc:	orr	r0, r0, lr
   250e0:	orr	r0, r0, r1
   250e4:	orr	r0, r0, r5
   250e8:	ldr	r5, [sp, #36]	; 0x24
   250ec:	orr	r0, r0, r5
   250f0:	ldr	r5, [sp, #32]
   250f4:	orrs	r0, r0, r5
   250f8:	mov	r0, #0
   250fc:	movweq	r0, #17
   25100:	cmp	r0, #0
   25104:	bne	2565c <__assert_fail@plt+0x141a8>
   25108:	mov	r7, r2
   2510c:	ldr	ip, [sp, #28]
   25110:	ldr	r2, [sp, #24]
   25114:	str	r1, [sp, #140]	; 0x8c
   25118:	str	r9, [sp, #144]	; 0x90
   2511c:	ldr	r5, [sp, #148]	; 0x94
   25120:	ldr	r3, [sp, #156]	; 0x9c
   25124:	ldr	r9, [sp, #144]	; 0x90
   25128:	add	r5, r5, #32
   2512c:	add	r4, r4, #1
   25130:	add	r6, r6, #12
   25134:	str	r5, [sp, #148]	; 0x94
   25138:	add	r5, sp, #160	; 0xa0
   2513c:	cmp	r4, r3
   25140:	blt	24db0 <__assert_fail@plt+0x138fc>
   25144:	ldr	r5, [sp, #156]	; 0x9c
   25148:	ldr	r0, [sp, #140]	; 0x8c
   2514c:	str	sl, [fp, #-1076]	; 0xfffffbcc
   25150:	str	r7, [fp, #-1080]	; 0xfffffbc8
   25154:	str	r9, [fp, #-1072]	; 0xfffffbd0
   25158:	str	lr, [fp, #-1068]	; 0xfffffbd4
   2515c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   25160:	ldr	sl, [sp, #16]
   25164:	cmp	r4, r5
   25168:	beq	255b0 <__assert_fail@plt+0x140fc>
   2516c:	b	25634 <__assert_fail@plt+0x14180>
   25170:	mov	r4, #0
   25174:	cmp	r4, r5
   25178:	beq	255b0 <__assert_fail@plt+0x140fc>
   2517c:	b	25634 <__assert_fail@plt+0x14180>
   25180:	ldr	r0, [fp, #-1052]	; 0xfffffbe4
   25184:	ldr	r9, [fp, #-1080]	; 0xfffffbc8
   25188:	ldr	ip, [fp, #-1072]	; 0xfffffbd0
   2518c:	ldr	sl, [fp, #-1076]	; 0xfffffbcc
   25190:	ldr	r2, [fp, #-1068]	; 0xfffffbd4
   25194:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   25198:	sub	lr, fp, #6144	; 0x1800
   2519c:	mov	r4, #0
   251a0:	str	r0, [sp, #144]	; 0x90
   251a4:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   251a8:	mov	r3, ip
   251ac:	mov	r7, r9
   251b0:	str	r2, [sp, #80]	; 0x50
   251b4:	str	sl, [sp, #76]	; 0x4c
   251b8:	str	r0, [sp, #140]	; 0x8c
   251bc:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   251c0:	str	r0, [sp, #84]	; 0x54
   251c4:	sub	r0, lr, #104	; 0x68
   251c8:	str	r0, [sp, #148]	; 0x94
   251cc:	mov	r0, r6
   251d0:	add	r1, sp, #160	; 0xa0
   251d4:	str	r9, [sp, #136]	; 0x88
   251d8:	str	r7, [sp, #120]	; 0x78
   251dc:	str	r3, [sp, #92]	; 0x5c
   251e0:	str	r8, [sp, #96]	; 0x60
   251e4:	str	ip, [sp, #124]	; 0x7c
   251e8:	str	sl, [sp, #128]	; 0x80
   251ec:	str	r2, [sp, #132]	; 0x84
   251f0:	str	r5, [sp, #156]	; 0x9c
   251f4:	str	r4, [sp, #152]	; 0x98
   251f8:	add	r9, r1, r4, lsl #5
   251fc:	ldmib	r9, {sl, ip}
   25200:	ldr	lr, [r0, #-28]	; 0xffffffe4
   25204:	ldr	r5, [r0]
   25208:	str	r0, [sp, #116]	; 0x74
   2520c:	ldr	r4, [r9, #12]
   25210:	ldr	r6, [r9, #16]
   25214:	and	r0, lr, r7
   25218:	ldr	r7, [sp, #76]	; 0x4c
   2521c:	and	r1, ip, r3
   25220:	str	r4, [sp, #108]	; 0x6c
   25224:	str	r6, [sp, #104]	; 0x68
   25228:	str	r5, [sp, #100]	; 0x64
   2522c:	str	r0, [sp, #68]	; 0x44
   25230:	str	r1, [sp, #72]	; 0x48
   25234:	and	r2, sl, r7
   25238:	orr	r0, r2, r0
   2523c:	str	r2, [sp, #64]	; 0x40
   25240:	orr	r0, r0, r1
   25244:	ldr	r1, [sp, #80]	; 0x50
   25248:	and	r2, r4, r1
   2524c:	ldr	r4, [sp, #140]	; 0x8c
   25250:	str	r2, [sp, #60]	; 0x3c
   25254:	orr	r0, r0, r2
   25258:	and	r2, r6, r8
   2525c:	ldr	r8, [sp, #84]	; 0x54
   25260:	str	r2, [sp, #56]	; 0x38
   25264:	orr	r0, r0, r2
   25268:	ldr	r2, [r9, #20]
   2526c:	and	r3, r2, r8
   25270:	str	r3, [sp, #52]	; 0x34
   25274:	orr	r0, r0, r3
   25278:	ldr	r3, [r9, #24]
   2527c:	and	r6, r3, r4
   25280:	str	r6, [sp, #48]	; 0x30
   25284:	orr	r0, r0, r6
   25288:	ldr	r6, [sp, #144]	; 0x90
   2528c:	and	r6, r5, r6
   25290:	orrs	r0, r0, r6
   25294:	beq	25448 <__assert_fail@plt+0x13f94>
   25298:	ldr	r0, [sp, #120]	; 0x78
   2529c:	ldr	r5, [sp, #92]	; 0x5c
   252a0:	str	sl, [sp, #24]
   252a4:	str	r6, [sp, #20]
   252a8:	ldr	r6, [sp, #144]	; 0x90
   252ac:	str	ip, [sp, #28]
   252b0:	str	r4, [sp, #140]	; 0x8c
   252b4:	bic	r0, r0, lr
   252b8:	str	r0, [sp, #136]	; 0x88
   252bc:	bic	r0, r7, sl
   252c0:	ldr	sl, [sp, #96]	; 0x60
   252c4:	str	r0, [sp, #128]	; 0x80
   252c8:	bic	r0, r5, ip
   252cc:	str	r0, [sp, #124]	; 0x7c
   252d0:	ldr	r0, [sp, #108]	; 0x6c
   252d4:	bic	r0, r1, r0
   252d8:	str	r0, [sp, #132]	; 0x84
   252dc:	ldr	r0, [sp, #104]	; 0x68
   252e0:	bic	r0, sl, r0
   252e4:	str	r0, [sp, #44]	; 0x2c
   252e8:	bic	r0, r8, r2
   252ec:	bic	r2, r2, r8
   252f0:	str	r0, [sp, #40]	; 0x28
   252f4:	bic	r0, r4, r3
   252f8:	str	r0, [sp, #36]	; 0x24
   252fc:	ldr	r0, [sp, #100]	; 0x64
   25300:	bic	r0, r6, r0
   25304:	str	r0, [sp, #32]
   25308:	ldr	r0, [sp, #28]
   2530c:	bic	r0, r0, r5
   25310:	ldr	r5, [sp, #120]	; 0x78
   25314:	str	r0, [sp, #120]	; 0x78
   25318:	bic	ip, lr, r5
   2531c:	ldr	r5, [sp, #24]
   25320:	bic	r7, r5, r7
   25324:	mov	r5, r6
   25328:	str	r7, [sp, #92]	; 0x5c
   2532c:	orr	r7, r7, ip
   25330:	orr	r4, r7, r0
   25334:	ldr	r0, [sp, #108]	; 0x6c
   25338:	bic	lr, r0, r1
   2533c:	ldr	r0, [sp, #104]	; 0x68
   25340:	orr	r4, r4, lr
   25344:	bic	r6, r0, sl
   25348:	ldr	r0, [sp, #140]	; 0x8c
   2534c:	orr	r4, r4, r6
   25350:	orr	r4, r4, r2
   25354:	bic	r3, r3, r0
   25358:	ldr	r0, [sp, #100]	; 0x64
   2535c:	orr	r4, r4, r3
   25360:	bic	r1, r0, r5
   25364:	orrs	r4, r4, r1
   25368:	beq	25474 <__assert_fail@plt+0x13fc0>
   2536c:	ldr	r7, [sp, #156]	; 0x9c
   25370:	ldr	r5, [sp, #92]	; 0x5c
   25374:	add	r4, sp, #160	; 0xa0
   25378:	add	r0, r4, r7, lsl #5
   2537c:	str	ip, [r4, r7, lsl #5]
   25380:	mov	r8, r7
   25384:	str	r5, [r0, #4]
   25388:	ldr	r5, [sp, #120]	; 0x78
   2538c:	str	r5, [r0, #8]
   25390:	str	lr, [r0, #12]
   25394:	str	r6, [r0, #16]
   25398:	str	r2, [r0, #20]
   2539c:	str	r3, [r0, #24]
   253a0:	str	r1, [r0, #28]
   253a4:	ldr	r0, [sp, #116]	; 0x74
   253a8:	ldr	r1, [sp, #68]	; 0x44
   253ac:	sub	lr, fp, #6144	; 0x1800
   253b0:	str	r1, [r0, #-28]	; 0xffffffe4
   253b4:	ldr	r1, [sp, #64]	; 0x40
   253b8:	str	r1, [r9, #4]
   253bc:	ldr	r1, [sp, #72]	; 0x48
   253c0:	str	r1, [r9, #8]
   253c4:	ldr	r1, [sp, #60]	; 0x3c
   253c8:	str	r1, [r9, #12]
   253cc:	ldr	r1, [sp, #56]	; 0x38
   253d0:	str	r1, [r9, #16]
   253d4:	ldr	r1, [sp, #52]	; 0x34
   253d8:	str	r1, [r9, #20]
   253dc:	ldr	r1, [sp, #48]	; 0x30
   253e0:	str	r1, [r9, #24]
   253e4:	ldr	r1, [sp, #20]
   253e8:	str	r1, [r0]
   253ec:	add	r0, r7, r7, lsl #1
   253f0:	sub	r1, lr, #104	; 0x68
   253f4:	add	r6, r1, r0, lsl #2
   253f8:	ldr	r1, [sp, #148]	; 0x94
   253fc:	mov	r4, r6
   25400:	ldr	r0, [r1, #4]
   25404:	str	r0, [r4, #4]!
   25408:	ldr	r5, [r1, #4]
   2540c:	cmp	r5, #1
   25410:	blt	25484 <__assert_fail@plt+0x13fd0>
   25414:	str	r0, [r6]
   25418:	lsl	r0, r0, #2
   2541c:	bl	2ac60 <__assert_fail@plt+0x197ac>
   25420:	ldr	r7, [sp, #40]	; 0x28
   25424:	cmp	r0, #0
   25428:	str	r0, [r6, #8]
   2542c:	beq	25b3c <__assert_fail@plt+0x14688>
   25430:	ldr	r1, [sp, #148]	; 0x94
   25434:	lsl	r2, r5, #2
   25438:	ldr	r1, [r1, #8]
   2543c:	bl	1125c <memcpy@plt>
   25440:	mov	r5, r8
   25444:	b	2549c <__assert_fail@plt+0x13fe8>
   25448:	ldr	r6, [sp, #120]	; 0x78
   2544c:	ldr	r1, [sp, #92]	; 0x5c
   25450:	ldr	r0, [sp, #144]	; 0x90
   25454:	ldr	r5, [sp, #156]	; 0x9c
   25458:	ldr	r4, [sp, #152]	; 0x98
   2545c:	ldr	r9, [sp, #136]	; 0x88
   25460:	ldr	r2, [sp, #132]	; 0x84
   25464:	ldr	sl, [sp, #128]	; 0x80
   25468:	ldr	ip, [sp, #124]	; 0x7c
   2546c:	ldr	r8, [sp, #96]	; 0x60
   25470:	b	2552c <__assert_fail@plt+0x14078>
   25474:	ldr	r5, [sp, #156]	; 0x9c
   25478:	ldr	r4, [sp, #152]	; 0x98
   2547c:	ldr	r7, [sp, #40]	; 0x28
   25480:	b	254a4 <__assert_fail@plt+0x13ff0>
   25484:	ldr	r7, [sp, #40]	; 0x28
   25488:	mov	r0, #0
   2548c:	mov	r5, r8
   25490:	str	r0, [r6]
   25494:	str	r0, [r6, #4]
   25498:	str	r0, [r6, #8]
   2549c:	ldr	r4, [sp, #152]	; 0x98
   254a0:	add	r5, r5, #1
   254a4:	ldr	r0, [sp, #88]	; 0x58
   254a8:	ldr	r1, [sp, #112]	; 0x70
   254ac:	ldr	r0, [r0, #12]
   254b0:	ldr	r1, [r0, r1, lsl #2]
   254b4:	ldr	r0, [sp, #148]	; 0x94
   254b8:	bl	20074 <__assert_fail@plt+0xebc0>
   254bc:	cmp	r0, #0
   254c0:	beq	25a80 <__assert_fail@plt+0x145cc>
   254c4:	ldr	r9, [sp, #136]	; 0x88
   254c8:	ldr	sl, [sp, #128]	; 0x80
   254cc:	ldr	ip, [sp, #124]	; 0x7c
   254d0:	ldr	r2, [sp, #132]	; 0x84
   254d4:	ldr	r6, [sp, #44]	; 0x2c
   254d8:	ldr	r1, [sp, #36]	; 0x24
   254dc:	ldr	lr, [sp, #32]
   254e0:	orr	r0, sl, r9
   254e4:	orr	r0, r0, ip
   254e8:	orr	r0, r0, r2
   254ec:	orr	r0, r0, r6
   254f0:	orr	r0, r0, r7
   254f4:	orr	r0, r0, r1
   254f8:	orrs	r0, r0, lr
   254fc:	mov	r0, #0
   25500:	movweq	r0, #17
   25504:	cmp	r0, #0
   25508:	bne	2555c <__assert_fail@plt+0x140a8>
   2550c:	str	r1, [sp, #140]	; 0x8c
   25510:	mov	r8, r6
   25514:	mov	r0, lr
   25518:	mov	r1, ip
   2551c:	mov	r6, r9
   25520:	str	r7, [sp, #84]	; 0x54
   25524:	str	r2, [sp, #80]	; 0x50
   25528:	str	sl, [sp, #76]	; 0x4c
   2552c:	ldr	r7, [sp, #148]	; 0x94
   25530:	str	r0, [sp, #144]	; 0x90
   25534:	ldr	r0, [sp, #116]	; 0x74
   25538:	add	r4, r4, #1
   2553c:	mov	r3, r1
   25540:	cmp	r4, r5
   25544:	add	r7, r7, #12
   25548:	add	r0, r0, #32
   2554c:	str	r7, [sp, #148]	; 0x94
   25550:	mov	r7, r6
   25554:	blt	251d0 <__assert_fail@plt+0x13d1c>
   25558:	b	25578 <__assert_fail@plt+0x140c4>
   2555c:	cmp	r0, #17
   25560:	bne	25670 <__assert_fail@plt+0x141bc>
   25564:	mov	r8, r6
   25568:	mov	r0, r7
   2556c:	str	lr, [sp, #144]	; 0x90
   25570:	str	r1, [sp, #140]	; 0x8c
   25574:	str	r7, [sp, #84]	; 0x54
   25578:	ldr	r0, [sp, #84]	; 0x54
   2557c:	str	ip, [fp, #-1072]	; 0xfffffbd0
   25580:	str	sl, [fp, #-1076]	; 0xfffffbcc
   25584:	str	r2, [fp, #-1068]	; 0xfffffbd4
   25588:	str	r8, [fp, #-1064]	; 0xfffffbd8
   2558c:	str	r0, [fp, #-1060]	; 0xfffffbdc
   25590:	ldr	r0, [sp, #140]	; 0x8c
   25594:	str	r0, [fp, #-1056]	; 0xfffffbe0
   25598:	ldr	r0, [sp, #144]	; 0x90
   2559c:	str	r0, [fp, #-1052]	; 0xfffffbe4
   255a0:	str	r9, [fp, #-1080]	; 0xfffffbc8
   255a4:	ldr	sl, [sp, #16]
   255a8:	cmp	r4, r5
   255ac:	bne	25634 <__assert_fail@plt+0x14180>
   255b0:	sub	lr, fp, #1024	; 0x400
   255b4:	ldr	r1, [sp, #112]	; 0x70
   255b8:	sub	r7, lr, #56	; 0x38
   255bc:	sub	lr, fp, #6144	; 0x1800
   255c0:	mov	r0, r7
   255c4:	mov	r9, r7
   255c8:	sub	r2, lr, #104	; 0x68
   255cc:	vld1.32	{d16-d17}, [r0]!
   255d0:	vld1.64	{d18-d19}, [r0]
   255d4:	add	r0, sp, #160	; 0xa0
   255d8:	add	r0, r0, r4, lsl #5
   255dc:	vst1.32	{d16-d17}, [r0]!
   255e0:	vst1.32	{d18-d19}, [r0]
   255e4:	ldr	r0, [sp, #88]	; 0x58
   255e8:	ldr	r0, [r0, #12]
   255ec:	ldr	r7, [r0, r1, lsl #2]
   255f0:	add	r0, r4, r4, lsl #1
   255f4:	mov	r1, #1
   255f8:	add	r5, r2, r0, lsl #2
   255fc:	str	r1, [r2, r0, lsl #2]
   25600:	mov	r0, #4
   25604:	mov	r6, r5
   25608:	str	r1, [r6, #4]!
   2560c:	bl	2ac60 <__assert_fail@plt+0x197ac>
   25610:	cmp	r0, #0
   25614:	str	r0, [r5, #8]
   25618:	beq	260c8 <__assert_fail@plt+0x14c14>
   2561c:	ldr	sl, [sp, #16]
   25620:	str	r7, [r0]
   25624:	mov	r0, r9
   25628:	add	r5, r4, #1
   2562c:	vst1.64	{d8-d9}, [r0]!
   25630:	vst1.64	{d8-d9}, [r0]
   25634:	ldr	r0, [sp, #88]	; 0x58
   25638:	ldr	r1, [sp, #112]	; 0x70
   2563c:	ldr	r0, [r0, #8]
   25640:	mov	r2, r1
   25644:	add	r2, r1, #1
   25648:	mov	r1, r2
   2564c:	str	r2, [sp, #112]	; 0x70
   25650:	cmp	r2, r0
   25654:	blt	248dc <__assert_fail@plt+0x13428>
   25658:	b	256c8 <__assert_fail@plt+0x14214>
   2565c:	cmp	r0, #17
   25660:	bne	256a0 <__assert_fail@plt+0x141ec>
   25664:	mov	r7, r2
   25668:	str	r1, [sp, #140]	; 0x8c
   2566c:	b	25144 <__assert_fail@plt+0x13c90>
   25670:	str	ip, [fp, #-1072]	; 0xfffffbd0
   25674:	str	sl, [fp, #-1076]	; 0xfffffbcc
   25678:	str	r2, [fp, #-1068]	; 0xfffffbd4
   2567c:	str	r6, [fp, #-1064]	; 0xfffffbd8
   25680:	str	r7, [fp, #-1060]	; 0xfffffbdc
   25684:	str	r1, [fp, #-1056]	; 0xfffffbe0
   25688:	str	lr, [fp, #-1052]	; 0xfffffbe4
   2568c:	str	r9, [fp, #-1080]	; 0xfffffbc8
   25690:	ldr	sl, [sp, #16]
   25694:	cmp	r0, #0
   25698:	beq	25634 <__assert_fail@plt+0x14180>
   2569c:	b	256c4 <__assert_fail@plt+0x14210>
   256a0:	ldr	r5, [sp, #156]	; 0x9c
   256a4:	str	sl, [fp, #-1076]	; 0xfffffbcc
   256a8:	str	r2, [fp, #-1080]	; 0xfffffbc8
   256ac:	str	r9, [fp, #-1072]	; 0xfffffbd0
   256b0:	str	lr, [fp, #-1068]	; 0xfffffbd4
   256b4:	str	r1, [fp, #-1064]	; 0xfffffbd8
   256b8:	ldr	sl, [sp, #16]
   256bc:	cmp	r0, #0
   256c0:	beq	25634 <__assert_fail@plt+0x14180>
   256c4:	b	256d0 <__assert_fail@plt+0x1421c>
   256c8:	cmp	r5, #0
   256cc:	ble	26080 <__assert_fail@plt+0x14bcc>
   256d0:	mov	r0, #0
   256d4:	str	r0, [fp, #-3136]	; 0xfffff3c0
   256d8:	add	r0, r5, #1
   256dc:	str	r0, [fp, #-3140]	; 0xfffff3bc
   256e0:	lsl	r0, r0, #2
   256e4:	bl	2ac60 <__assert_fail@plt+0x197ac>
   256e8:	cmp	r0, #0
   256ec:	str	r0, [fp, #-3132]	; 0xfffff3c4
   256f0:	mov	r0, #0
   256f4:	movweq	r0, #12
   256f8:	str	r0, [fp, #-56]	; 0xffffffc8
   256fc:	beq	260e4 <__assert_fail@plt+0x14c30>
   25700:	sub	lr, fp, #3072	; 0xc00
   25704:	vmov.i32	q8, #0	; 0x00000000
   25708:	mov	r1, #0
   2570c:	mov	r9, #0
   25710:	mov	r6, #0
   25714:	mov	r2, #0
   25718:	mov	r7, #0
   2571c:	mov	r3, #0
   25720:	mov	r8, #0
   25724:	add	r4, sp, #160	; 0xa0
   25728:	str	r5, [sp, #156]	; 0x9c
   2572c:	sub	r0, lr, #104	; 0x68
   25730:	vst1.64	{d16-d17}, [r0]!
   25734:	vst1.64	{d16-d17}, [r0]
   25738:	mov	r0, #0
   2573c:	str	r0, [sp, #152]	; 0x98
   25740:	mov	r0, #0
   25744:	str	r0, [sp, #144]	; 0x90
   25748:	mov	r0, #0
   2574c:	str	r0, [sp, #148]	; 0x94
   25750:	mov	r0, #0
   25754:	str	r0, [sp, #124]	; 0x7c
   25758:	mov	r0, #0
   2575c:	sub	lr, fp, #6144	; 0x1800
   25760:	str	r2, [sp, #140]	; 0x8c
   25764:	str	r7, [sp, #136]	; 0x88
   25768:	str	r3, [sp, #132]	; 0x84
   2576c:	str	r0, [fp, #-3136]	; 0xfffff3c0
   25770:	add	r0, r8, r8, lsl #1
   25774:	sub	r2, lr, #104	; 0x68
   25778:	add	r2, r2, r0, lsl #2
   2577c:	mov	r7, r2
   25780:	ldr	r0, [r7, #4]!
   25784:	cmp	r0, #1
   25788:	blt	257ec <__assert_fail@plt+0x14338>
   2578c:	str	r9, [sp, #128]	; 0x80
   25790:	add	r9, r2, #8
   25794:	mov	r5, #0
   25798:	ldr	r2, [r9]
   2579c:	ldr	r3, [sl, #12]
   257a0:	ldr	r2, [r2, r5, lsl #2]
   257a4:	ldr	r2, [r3, r2, lsl #2]
   257a8:	cmn	r2, #1
   257ac:	beq	257d8 <__assert_fail@plt+0x14324>
   257b0:	ldr	r0, [sl, #24]
   257b4:	add	r1, r2, r2, lsl #1
   257b8:	sub	lr, fp, #3072	; 0xc00
   257bc:	add	r1, r0, r1, lsl #2
   257c0:	sub	r0, lr, #68	; 0x44
   257c4:	bl	1fecc <__assert_fail@plt+0xea18>
   257c8:	cmp	r0, #0
   257cc:	bne	259e8 <__assert_fail@plt+0x14534>
   257d0:	ldr	r0, [r7]
   257d4:	mov	r1, #0
   257d8:	add	r5, r5, #1
   257dc:	cmp	r5, r0
   257e0:	blt	25798 <__assert_fail@plt+0x142e4>
   257e4:	ldr	r9, [sp, #128]	; 0x80
   257e8:	str	r1, [fp, #-56]	; 0xffffffc8
   257ec:	sub	lr, fp, #3072	; 0xc00
   257f0:	sub	r0, fp, #56	; 0x38
   257f4:	mov	r1, sl
   257f8:	mov	r3, #0
   257fc:	sub	r2, lr, #68	; 0x44
   25800:	bl	201bc <__assert_fail@plt+0xed08>
   25804:	ldr	r1, [fp, #-56]	; 0xffffffc8
   25808:	mov	r7, r0
   2580c:	sub	lr, fp, #1024	; 0x400
   25810:	sub	r0, lr, #56	; 0x38
   25814:	cmp	r7, #0
   25818:	str	r7, [r0, r8, lsl #2]
   2581c:	bne	25828 <__assert_fail@plt+0x14374>
   25820:	cmp	r1, #0
   25824:	bne	25ac8 <__assert_fail@plt+0x14614>
   25828:	ldrsb	r0, [r7, #52]	; 0x34
   2582c:	cmn	r0, #1
   25830:	ble	25850 <__assert_fail@plt+0x1439c>
   25834:	sub	lr, fp, #3072	; 0xc00
   25838:	sub	r0, lr, #56	; 0x38
   2583c:	sub	lr, fp, #2048	; 0x800
   25840:	str	r7, [r0, r8, lsl #2]
   25844:	sub	r0, lr, #56	; 0x38
   25848:	str	r7, [r0, r8, lsl #2]
   2584c:	b	258e4 <__assert_fail@plt+0x14430>
   25850:	sub	lr, fp, #3072	; 0xc00
   25854:	sub	r0, fp, #56	; 0x38
   25858:	mov	r1, sl
   2585c:	mov	r3, #1
   25860:	sub	r2, lr, #68	; 0x44
   25864:	bl	201bc <__assert_fail@plt+0xed08>
   25868:	sub	lr, fp, #2048	; 0x800
   2586c:	cmp	r0, #0
   25870:	sub	r1, lr, #56	; 0x38
   25874:	str	r0, [r1, r8, lsl #2]
   25878:	bne	25888 <__assert_fail@plt+0x143d4>
   2587c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   25880:	cmp	r1, #0
   25884:	bne	25ac8 <__assert_fail@plt+0x14614>
   25888:	cmp	r7, r0
   2588c:	beq	258ac <__assert_fail@plt+0x143f8>
   25890:	ldr	r0, [sl, #92]	; 0x5c
   25894:	ldr	r1, [sp, #124]	; 0x7c
   25898:	cmp	r0, #1
   2589c:	mov	r0, #0
   258a0:	movwgt	r0, #1
   258a4:	orr	r1, r1, r0
   258a8:	str	r1, [sp, #124]	; 0x7c
   258ac:	sub	lr, fp, #3072	; 0xc00
   258b0:	sub	r0, fp, #56	; 0x38
   258b4:	mov	r1, sl
   258b8:	mov	r3, #2
   258bc:	sub	r2, lr, #68	; 0x44
   258c0:	bl	201bc <__assert_fail@plt+0xed08>
   258c4:	sub	lr, fp, #3072	; 0xc00
   258c8:	cmp	r0, #0
   258cc:	sub	r1, lr, #56	; 0x38
   258d0:	str	r0, [r1, r8, lsl #2]
   258d4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   258d8:	bne	258e4 <__assert_fail@plt+0x14430>
   258dc:	cmp	r1, #0
   258e0:	bne	25ac8 <__assert_fail@plt+0x14614>
   258e4:	ldr	r0, [r4, r8, lsl #5]
   258e8:	ldr	r2, [sp, #148]	; 0x94
   258ec:	ldr	sl, [sp, #16]
   258f0:	orr	r2, r2, r0
   258f4:	add	r0, r4, r8, lsl #5
   258f8:	add	r8, r8, #1
   258fc:	str	r2, [sp, #148]	; 0x94
   25900:	ldr	r2, [r0, #24]
   25904:	ldr	ip, [r0, #4]
   25908:	ldr	r3, [r0, #8]
   2590c:	ldr	r7, [r0, #12]
   25910:	ldr	r5, [r0, #16]
   25914:	ldr	r4, [r0, #20]
   25918:	ldr	r0, [r0, #28]
   2591c:	orr	r9, r9, r0
   25920:	ldr	r0, [sp, #152]	; 0x98
   25924:	orr	r6, r6, r2
   25928:	ldr	r2, [sp, #140]	; 0x8c
   2592c:	orr	r0, r0, r5
   25930:	orr	r2, r2, r4
   25934:	add	r4, sp, #160	; 0xa0
   25938:	str	r0, [sp, #152]	; 0x98
   2593c:	ldr	r0, [sp, #136]	; 0x88
   25940:	orr	r0, r0, r7
   25944:	mov	r7, r0
   25948:	ldr	r0, [sp, #132]	; 0x84
   2594c:	orr	r0, r0, r3
   25950:	mov	r3, r0
   25954:	ldr	r0, [sp, #144]	; 0x90
   25958:	orr	r0, r0, ip
   2595c:	str	r0, [sp, #144]	; 0x90
   25960:	ldr	r0, [sp, #156]	; 0x9c
   25964:	cmp	r8, r0
   25968:	blt	25758 <__assert_fail@plt+0x142a4>
   2596c:	ldr	r0, [sp, #144]	; 0x90
   25970:	ldr	r8, [sp, #124]	; 0x7c
   25974:	str	r0, [fp, #-3172]	; 0xfffff39c
   25978:	ldr	r0, [sp, #148]	; 0x94
   2597c:	tst	r8, #1
   25980:	str	r0, [fp, #-3176]	; 0xfffff398
   25984:	ldr	r0, [sp, #152]	; 0x98
   25988:	str	r3, [fp, #-3168]	; 0xfffff3a0
   2598c:	str	r7, [fp, #-3164]	; 0xfffff3a4
   25990:	str	r0, [fp, #-3160]	; 0xfffff3a8
   25994:	mov	r0, #4
   25998:	str	r2, [fp, #-3156]	; 0xfffff3ac
   2599c:	str	r6, [fp, #-3152]	; 0xfffff3b0
   259a0:	str	r9, [fp, #-3148]	; 0xfffff3b4
   259a4:	bne	260f0 <__assert_fail@plt+0x14c3c>
   259a8:	mov	r1, #256	; 0x100
   259ac:	bl	2ac0c <__assert_fail@plt+0x19758>
   259b0:	ldr	r1, [sp, #88]	; 0x58
   259b4:	ldr	r5, [sp, #156]	; 0x9c
   259b8:	cmp	r0, #0
   259bc:	str	r0, [r1, #44]	; 0x2c
   259c0:	beq	25a2c <__assert_fail@plt+0x14578>
   259c4:	ldr	ip, [fp, #-3176]	; 0xfffff398
   259c8:	mov	r9, r5
   259cc:	cmp	ip, #0
   259d0:	beq	25be4 <__assert_fail@plt+0x14730>
   259d4:	mov	r2, #0
   259d8:	mov	r3, #1
   259dc:	mov	r1, ip
   259e0:	mov	r7, #0
   259e4:	b	25bc4 <__assert_fail@plt+0x14710>
   259e8:	ldr	r1, [sp, #144]	; 0x90
   259ec:	str	r0, [fp, #-56]	; 0xffffffc8
   259f0:	str	r1, [fp, #-3172]	; 0xfffff39c
   259f4:	ldr	r1, [sp, #148]	; 0x94
   259f8:	str	r1, [fp, #-3176]	; 0xfffff398
   259fc:	ldr	r1, [sp, #132]	; 0x84
   25a00:	str	r1, [fp, #-3168]	; 0xfffff3a0
   25a04:	ldr	r1, [sp, #136]	; 0x88
   25a08:	str	r1, [fp, #-3164]	; 0xfffff3a4
   25a0c:	ldr	r1, [sp, #152]	; 0x98
   25a10:	str	r1, [fp, #-3160]	; 0xfffff3a8
   25a14:	ldr	r1, [sp, #140]	; 0x8c
   25a18:	str	r1, [fp, #-3156]	; 0xfffff3ac
   25a1c:	ldr	r1, [sp, #128]	; 0x80
   25a20:	str	r6, [fp, #-3152]	; 0xfffff3b0
   25a24:	str	r1, [fp, #-3148]	; 0xfffff3b4
   25a28:	ldr	r5, [sp, #156]	; 0x9c
   25a2c:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   25a30:	bl	2ae28 <__assert_fail@plt+0x19974>
   25a34:	cmp	r5, #1
   25a38:	blt	25a6c <__assert_fail@plt+0x145b8>
   25a3c:	sub	lr, fp, #6144	; 0x1800
   25a40:	sub	r0, lr, #104	; 0x68
   25a44:	add	r4, r0, #8
   25a48:	ldr	r0, [r4], #12
   25a4c:	bl	2ae28 <__assert_fail@plt+0x19974>
   25a50:	subs	r5, r5, #1
   25a54:	bne	25a48 <__assert_fail@plt+0x14594>
   25a58:	mov	r0, #0
   25a5c:	sub	sp, fp, #48	; 0x30
   25a60:	vpop	{d8-d9}
   25a64:	add	sp, sp, #4
   25a68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a6c:	mov	r0, #0
   25a70:	sub	sp, fp, #48	; 0x30
   25a74:	vpop	{d8-d9}
   25a78:	add	sp, sp, #4
   25a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a80:	ldr	r0, [sp, #124]	; 0x7c
   25a84:	str	r0, [fp, #-1072]	; 0xfffffbd0
   25a88:	ldr	r0, [sp, #128]	; 0x80
   25a8c:	str	r0, [fp, #-1076]	; 0xfffffbcc
   25a90:	ldr	r0, [sp, #132]	; 0x84
   25a94:	str	r0, [fp, #-1068]	; 0xfffffbd4
   25a98:	ldr	r0, [sp, #44]	; 0x2c
   25a9c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   25aa0:	ldr	r0, [sp, #36]	; 0x24
   25aa4:	str	r7, [fp, #-1060]	; 0xfffffbdc
   25aa8:	str	r0, [fp, #-1056]	; 0xfffffbe0
   25aac:	ldr	r0, [sp, #32]
   25ab0:	str	r0, [fp, #-1052]	; 0xfffffbe4
   25ab4:	ldr	r0, [sp, #136]	; 0x88
   25ab8:	str	r0, [fp, #-1080]	; 0xfffffbc8
   25abc:	cmp	r5, #1
   25ac0:	bge	26060 <__assert_fail@plt+0x14bac>
   25ac4:	b	2607c <__assert_fail@plt+0x14bc8>
   25ac8:	ldr	r0, [sp, #144]	; 0x90
   25acc:	str	r0, [fp, #-3172]	; 0xfffff39c
   25ad0:	ldr	r0, [sp, #148]	; 0x94
   25ad4:	str	r0, [fp, #-3176]	; 0xfffff398
   25ad8:	ldr	r0, [sp, #132]	; 0x84
   25adc:	str	r0, [fp, #-3168]	; 0xfffff3a0
   25ae0:	ldr	r0, [sp, #136]	; 0x88
   25ae4:	str	r0, [fp, #-3164]	; 0xfffff3a4
   25ae8:	ldr	r0, [sp, #152]	; 0x98
   25aec:	str	r0, [fp, #-3160]	; 0xfffff3a8
   25af0:	ldr	r0, [sp, #140]	; 0x8c
   25af4:	str	r0, [fp, #-3156]	; 0xfffff3ac
   25af8:	str	r6, [fp, #-3152]	; 0xfffff3b0
   25afc:	str	r9, [fp, #-3148]	; 0xfffff3b4
   25b00:	b	25a28 <__assert_fail@plt+0x14574>
   25b04:	ldr	r0, [sp, #48]	; 0x30
   25b08:	ldr	r5, [sp, #156]	; 0x9c
   25b0c:	str	r0, [fp, #-1076]	; 0xfffffbcc
   25b10:	ldr	r0, [sp, #64]	; 0x40
   25b14:	str	r0, [fp, #-1080]	; 0xfffffbc8
   25b18:	ldr	r0, [sp, #60]	; 0x3c
   25b1c:	str	r0, [fp, #-1072]	; 0xfffffbd0
   25b20:	ldr	r0, [sp, #56]	; 0x38
   25b24:	str	r0, [fp, #-1068]	; 0xfffffbd4
   25b28:	ldr	r0, [sp, #52]	; 0x34
   25b2c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   25b30:	cmp	r5, #1
   25b34:	bge	26060 <__assert_fail@plt+0x14bac>
   25b38:	b	2607c <__assert_fail@plt+0x14bc8>
   25b3c:	ldr	r0, [sp, #124]	; 0x7c
   25b40:	mov	r5, r8
   25b44:	str	r0, [fp, #-1072]	; 0xfffffbd0
   25b48:	ldr	r0, [sp, #128]	; 0x80
   25b4c:	str	r0, [fp, #-1076]	; 0xfffffbcc
   25b50:	ldr	r0, [sp, #132]	; 0x84
   25b54:	str	r0, [fp, #-1068]	; 0xfffffbd4
   25b58:	ldr	r0, [sp, #44]	; 0x2c
   25b5c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   25b60:	ldr	r0, [sp, #36]	; 0x24
   25b64:	str	r7, [fp, #-1060]	; 0xfffffbdc
   25b68:	str	r0, [fp, #-1056]	; 0xfffffbe0
   25b6c:	ldr	r0, [sp, #32]
   25b70:	str	r0, [fp, #-1052]	; 0xfffffbe4
   25b74:	ldr	r0, [sp, #136]	; 0x88
   25b78:	str	r0, [fp, #-1080]	; 0xfffffbc8
   25b7c:	b	26040 <__assert_fail@plt+0x14b8c>
   25b80:	mov	lr, #0
   25b84:	ldr	r5, [r4, lr, lsl #3]
   25b88:	add	lr, lr, #4
   25b8c:	tst	r5, r3
   25b90:	beq	25b84 <__assert_fail@plt+0x146d0>
   25b94:	ldr	r5, [sp]
   25b98:	sub	r6, fp, #1024	; 0x400
   25b9c:	sub	r6, r6, #56	; 0x38
   25ba0:	ldr	r5, [r5]
   25ba4:	tst	r5, r3
   25ba8:	sub	r5, fp, #2048	; 0x800
   25bac:	sub	r5, r5, #56	; 0x38
   25bb0:	moveq	r5, r6
   25bb4:	add	r6, r5, lr
   25bb8:	ldr	r6, [r6, #-4]
   25bbc:	str	r6, [r0, r7, lsl #2]
   25bc0:	b	25bcc <__assert_fail@plt+0x14718>
   25bc4:	tst	r1, #1
   25bc8:	bne	25b80 <__assert_fail@plt+0x146cc>
   25bcc:	lsr	r6, r1, #1
   25bd0:	cmp	r2, r1, lsr #1
   25bd4:	add	r7, r7, #1
   25bd8:	lsl	r3, r3, #1
   25bdc:	mov	r1, r6
   25be0:	bne	25bc4 <__assert_fail@plt+0x14710>
   25be4:	ldr	r2, [fp, #-3172]	; 0xfffff39c
   25be8:	cmp	r2, #0
   25bec:	beq	25c6c <__assert_fail@plt+0x147b8>
   25bf0:	add	lr, r4, #4
   25bf4:	mov	r7, #32
   25bf8:	mov	r6, #1
   25bfc:	mov	r5, #0
   25c00:	b	25c4c <__assert_fail@plt+0x14798>
   25c04:	mov	r1, #0
   25c08:	ldr	r4, [lr, r1, lsl #3]
   25c0c:	add	r1, r1, #4
   25c10:	tst	r4, r6
   25c14:	beq	25c08 <__assert_fail@plt+0x14754>
   25c18:	ldr	r3, [sp, #16]
   25c1c:	ldr	r4, [r3, #100]	; 0x64
   25c20:	sub	r3, fp, #2048	; 0x800
   25c24:	tst	r4, r6
   25c28:	sub	r4, r3, #56	; 0x38
   25c2c:	sub	r3, fp, #1024	; 0x400
   25c30:	sub	r3, r3, #56	; 0x38
   25c34:	moveq	r4, r3
   25c38:	add	r1, r4, r1
   25c3c:	add	r4, sp, #160	; 0xa0
   25c40:	ldr	r1, [r1, #-4]
   25c44:	str	r1, [r0, r7, lsl #2]
   25c48:	b	25c54 <__assert_fail@plt+0x147a0>
   25c4c:	tst	r2, #1
   25c50:	bne	25c04 <__assert_fail@plt+0x14750>
   25c54:	lsr	r1, r2, #1
   25c58:	cmp	r5, r2, lsr #1
   25c5c:	add	r7, r7, #1
   25c60:	lsl	r6, r6, #1
   25c64:	mov	r2, r1
   25c68:	bne	25c4c <__assert_fail@plt+0x14798>
   25c6c:	ldr	r2, [fp, #-3168]	; 0xfffff3a0
   25c70:	cmp	r2, #0
   25c74:	beq	25cf4 <__assert_fail@plt+0x14840>
   25c78:	add	lr, r4, #8
   25c7c:	mov	r7, #64	; 0x40
   25c80:	mov	r6, #1
   25c84:	mov	r5, #0
   25c88:	b	25cd4 <__assert_fail@plt+0x14820>
   25c8c:	mov	r1, #0
   25c90:	ldr	r4, [lr, r1, lsl #3]
   25c94:	add	r1, r1, #4
   25c98:	tst	r4, r6
   25c9c:	beq	25c90 <__assert_fail@plt+0x147dc>
   25ca0:	ldr	r3, [sp, #16]
   25ca4:	ldr	r4, [r3, #104]	; 0x68
   25ca8:	sub	r3, fp, #2048	; 0x800
   25cac:	tst	r4, r6
   25cb0:	sub	r4, r3, #56	; 0x38
   25cb4:	sub	r3, fp, #1024	; 0x400
   25cb8:	sub	r3, r3, #56	; 0x38
   25cbc:	moveq	r4, r3
   25cc0:	add	r1, r4, r1
   25cc4:	add	r4, sp, #160	; 0xa0
   25cc8:	ldr	r1, [r1, #-4]
   25ccc:	str	r1, [r0, r7, lsl #2]
   25cd0:	b	25cdc <__assert_fail@plt+0x14828>
   25cd4:	tst	r2, #1
   25cd8:	bne	25c8c <__assert_fail@plt+0x147d8>
   25cdc:	lsr	r1, r2, #1
   25ce0:	cmp	r5, r2, lsr #1
   25ce4:	add	r7, r7, #1
   25ce8:	lsl	r6, r6, #1
   25cec:	mov	r2, r1
   25cf0:	bne	25cd4 <__assert_fail@plt+0x14820>
   25cf4:	ldr	r2, [fp, #-3164]	; 0xfffff3a4
   25cf8:	cmp	r2, #0
   25cfc:	beq	25d7c <__assert_fail@plt+0x148c8>
   25d00:	add	lr, r4, #12
   25d04:	mov	r7, #96	; 0x60
   25d08:	mov	r6, #1
   25d0c:	mov	r5, #0
   25d10:	b	25d5c <__assert_fail@plt+0x148a8>
   25d14:	mov	r1, #0
   25d18:	ldr	r4, [lr, r1, lsl #3]
   25d1c:	add	r1, r1, #4
   25d20:	tst	r4, r6
   25d24:	beq	25d18 <__assert_fail@plt+0x14864>
   25d28:	ldr	r3, [sp, #16]
   25d2c:	ldr	r4, [r3, #108]	; 0x6c
   25d30:	sub	r3, fp, #2048	; 0x800
   25d34:	tst	r4, r6
   25d38:	sub	r4, r3, #56	; 0x38
   25d3c:	sub	r3, fp, #1024	; 0x400
   25d40:	sub	r3, r3, #56	; 0x38
   25d44:	moveq	r4, r3
   25d48:	add	r1, r4, r1
   25d4c:	add	r4, sp, #160	; 0xa0
   25d50:	ldr	r1, [r1, #-4]
   25d54:	str	r1, [r0, r7, lsl #2]
   25d58:	b	25d64 <__assert_fail@plt+0x148b0>
   25d5c:	tst	r2, #1
   25d60:	bne	25d14 <__assert_fail@plt+0x14860>
   25d64:	lsr	r1, r2, #1
   25d68:	cmp	r5, r2, lsr #1
   25d6c:	add	r7, r7, #1
   25d70:	lsl	r6, r6, #1
   25d74:	mov	r2, r1
   25d78:	bne	25d5c <__assert_fail@plt+0x148a8>
   25d7c:	ldr	r2, [fp, #-3160]	; 0xfffff3a8
   25d80:	cmp	r2, #0
   25d84:	beq	25e04 <__assert_fail@plt+0x14950>
   25d88:	add	lr, r4, #16
   25d8c:	mov	r7, #128	; 0x80
   25d90:	mov	r6, #1
   25d94:	mov	r5, #0
   25d98:	b	25de4 <__assert_fail@plt+0x14930>
   25d9c:	mov	r1, #0
   25da0:	ldr	r4, [lr, r1, lsl #3]
   25da4:	add	r1, r1, #4
   25da8:	tst	r4, r6
   25dac:	beq	25da0 <__assert_fail@plt+0x148ec>
   25db0:	ldr	r3, [sp, #4]
   25db4:	ldr	r4, [r3]
   25db8:	sub	r3, fp, #2048	; 0x800
   25dbc:	tst	r4, r6
   25dc0:	sub	r4, r3, #56	; 0x38
   25dc4:	sub	r3, fp, #1024	; 0x400
   25dc8:	sub	r3, r3, #56	; 0x38
   25dcc:	moveq	r4, r3
   25dd0:	add	r1, r4, r1
   25dd4:	add	r4, sp, #160	; 0xa0
   25dd8:	ldr	r1, [r1, #-4]
   25ddc:	str	r1, [r0, r7, lsl #2]
   25de0:	b	25dec <__assert_fail@plt+0x14938>
   25de4:	tst	r2, #1
   25de8:	bne	25d9c <__assert_fail@plt+0x148e8>
   25dec:	lsr	r1, r2, #1
   25df0:	cmp	r5, r2, lsr #1
   25df4:	add	r7, r7, #1
   25df8:	lsl	r6, r6, #1
   25dfc:	mov	r2, r1
   25e00:	bne	25de4 <__assert_fail@plt+0x14930>
   25e04:	ldr	r2, [fp, #-3156]	; 0xfffff3ac
   25e08:	cmp	r2, #0
   25e0c:	beq	25e8c <__assert_fail@plt+0x149d8>
   25e10:	add	lr, r4, #20
   25e14:	mov	r7, #160	; 0xa0
   25e18:	mov	r6, #1
   25e1c:	mov	r5, #0
   25e20:	b	25e6c <__assert_fail@plt+0x149b8>
   25e24:	mov	r1, #0
   25e28:	ldr	r4, [lr, r1, lsl #3]
   25e2c:	add	r1, r1, #4
   25e30:	tst	r4, r6
   25e34:	beq	25e28 <__assert_fail@plt+0x14974>
   25e38:	ldr	r3, [sp, #16]
   25e3c:	ldr	r4, [r3, #116]	; 0x74
   25e40:	sub	r3, fp, #2048	; 0x800
   25e44:	tst	r4, r6
   25e48:	sub	r4, r3, #56	; 0x38
   25e4c:	sub	r3, fp, #1024	; 0x400
   25e50:	sub	r3, r3, #56	; 0x38
   25e54:	moveq	r4, r3
   25e58:	add	r1, r4, r1
   25e5c:	add	r4, sp, #160	; 0xa0
   25e60:	ldr	r1, [r1, #-4]
   25e64:	str	r1, [r0, r7, lsl #2]
   25e68:	b	25e74 <__assert_fail@plt+0x149c0>
   25e6c:	tst	r2, #1
   25e70:	bne	25e24 <__assert_fail@plt+0x14970>
   25e74:	lsr	r1, r2, #1
   25e78:	cmp	r5, r2, lsr #1
   25e7c:	add	r7, r7, #1
   25e80:	lsl	r6, r6, #1
   25e84:	mov	r2, r1
   25e88:	bne	25e6c <__assert_fail@plt+0x149b8>
   25e8c:	ldr	r2, [fp, #-3152]	; 0xfffff3b0
   25e90:	cmp	r2, #0
   25e94:	beq	25f14 <__assert_fail@plt+0x14a60>
   25e98:	add	lr, r4, #24
   25e9c:	mov	r7, #192	; 0xc0
   25ea0:	mov	r6, #1
   25ea4:	mov	r5, #0
   25ea8:	b	25ef4 <__assert_fail@plt+0x14a40>
   25eac:	mov	r1, #0
   25eb0:	ldr	r4, [lr, r1, lsl #3]
   25eb4:	add	r1, r1, #4
   25eb8:	tst	r4, r6
   25ebc:	beq	25eb0 <__assert_fail@plt+0x149fc>
   25ec0:	ldr	r3, [sp, #16]
   25ec4:	ldr	r4, [r3, #120]	; 0x78
   25ec8:	sub	r3, fp, #2048	; 0x800
   25ecc:	tst	r4, r6
   25ed0:	sub	r4, r3, #56	; 0x38
   25ed4:	sub	r3, fp, #1024	; 0x400
   25ed8:	sub	r3, r3, #56	; 0x38
   25edc:	moveq	r4, r3
   25ee0:	add	r1, r4, r1
   25ee4:	add	r4, sp, #160	; 0xa0
   25ee8:	ldr	r1, [r1, #-4]
   25eec:	str	r1, [r0, r7, lsl #2]
   25ef0:	b	25efc <__assert_fail@plt+0x14a48>
   25ef4:	tst	r2, #1
   25ef8:	bne	25eac <__assert_fail@plt+0x149f8>
   25efc:	lsr	r1, r2, #1
   25f00:	cmp	r5, r2, lsr #1
   25f04:	add	r7, r7, #1
   25f08:	lsl	r6, r6, #1
   25f0c:	mov	r2, r1
   25f10:	bne	25ef4 <__assert_fail@plt+0x14a40>
   25f14:	ldr	r2, [fp, #-3148]	; 0xfffff3b4
   25f18:	cmp	r2, #0
   25f1c:	beq	25f98 <__assert_fail@plt+0x14ae4>
   25f20:	mov	r3, #224	; 0xe0
   25f24:	mov	r7, #1
   25f28:	mov	r6, #0
   25f2c:	b	25f78 <__assert_fail@plt+0x14ac4>
   25f30:	ldr	r1, [sp, #12]
   25f34:	mov	lr, #0
   25f38:	ldr	r5, [r1, lr, lsl #3]
   25f3c:	add	lr, lr, #4
   25f40:	tst	r5, r7
   25f44:	beq	25f38 <__assert_fail@plt+0x14a84>
   25f48:	ldr	r1, [sp, #16]
   25f4c:	ldr	r5, [r1, #124]	; 0x7c
   25f50:	sub	r1, fp, #2048	; 0x800
   25f54:	tst	r5, r7
   25f58:	sub	r5, r1, #56	; 0x38
   25f5c:	sub	r1, fp, #1024	; 0x400
   25f60:	sub	r1, r1, #56	; 0x38
   25f64:	moveq	r5, r1
   25f68:	add	r1, r5, lr
   25f6c:	ldr	r1, [r1, #-4]
   25f70:	str	r1, [r0, r3, lsl #2]
   25f74:	b	25f80 <__assert_fail@plt+0x14acc>
   25f78:	tst	r2, #1
   25f7c:	bne	25f30 <__assert_fail@plt+0x14a7c>
   25f80:	lsr	r1, r2, #1
   25f84:	cmp	r6, r2, lsr #1
   25f88:	add	r3, r3, #1
   25f8c:	lsl	r7, r7, #1
   25f90:	mov	r2, r1
   25f94:	bne	25f78 <__assert_fail@plt+0x14ac4>
   25f98:	tst	ip, #1024	; 0x400
   25f9c:	beq	25fdc <__assert_fail@plt+0x14b28>
   25fa0:	mov	r1, #0
   25fa4:	add	r2, r4, r1, lsl #5
   25fa8:	ldrb	r2, [r2, #1]
   25fac:	tst	r2, #4
   25fb0:	bne	25fc4 <__assert_fail@plt+0x14b10>
   25fb4:	add	r1, r1, #1
   25fb8:	cmp	r1, r9
   25fbc:	blt	25fa4 <__assert_fail@plt+0x14af0>
   25fc0:	b	25fdc <__assert_fail@plt+0x14b28>
   25fc4:	sub	lr, fp, #3072	; 0xc00
   25fc8:	tst	r8, #1
   25fcc:	sub	r2, lr, #56	; 0x38
   25fd0:	ldr	r1, [r2, r1, lsl #2]
   25fd4:	str	r1, [r0, #40]	; 0x28
   25fd8:	strne	r1, [r0, #1064]	; 0x428
   25fdc:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   25fe0:	bl	2ae28 <__assert_fail@plt+0x19974>
   25fe4:	sub	lr, fp, #6144	; 0x1800
   25fe8:	sub	r0, lr, #104	; 0x68
   25fec:	add	r4, r0, #8
   25ff0:	ldr	r0, [r4], #12
   25ff4:	bl	2ae28 <__assert_fail@plt+0x19974>
   25ff8:	subs	r9, r9, #1
   25ffc:	bne	25ff0 <__assert_fail@plt+0x14b3c>
   26000:	mov	r0, #1
   26004:	sub	sp, fp, #48	; 0x30
   26008:	vpop	{d8-d9}
   2600c:	add	sp, sp, #4
   26010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26014:	ldr	r0, [sp, #48]	; 0x30
   26018:	ldr	r5, [sp, #156]	; 0x9c
   2601c:	str	r0, [fp, #-1076]	; 0xfffffbcc
   26020:	ldr	r0, [sp, #64]	; 0x40
   26024:	str	r0, [fp, #-1080]	; 0xfffffbc8
   26028:	ldr	r0, [sp, #60]	; 0x3c
   2602c:	str	r0, [fp, #-1072]	; 0xfffffbd0
   26030:	ldr	r0, [sp, #56]	; 0x38
   26034:	str	r0, [fp, #-1068]	; 0xfffffbd4
   26038:	ldr	r0, [sp, #52]	; 0x34
   2603c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   26040:	sub	lr, fp, #6144	; 0x1800
   26044:	mov	r0, #0
   26048:	add	r1, r5, r5, lsl #1
   2604c:	sub	r2, lr, #104	; 0x68
   26050:	str	r0, [r4]
   26054:	str	r0, [r2, r1, lsl #2]
   26058:	cmp	r5, #1
   2605c:	blt	2607c <__assert_fail@plt+0x14bc8>
   26060:	sub	lr, fp, #6144	; 0x1800
   26064:	sub	r0, lr, #104	; 0x68
   26068:	add	r4, r0, #8
   2606c:	ldr	r0, [r4], #12
   26070:	bl	2ae28 <__assert_fail@plt+0x19974>
   26074:	subs	r5, r5, #1
   26078:	bne	2606c <__assert_fail@plt+0x14bb8>
   2607c:	mvn	r5, #0
   26080:	mov	r0, #0
   26084:	cmp	r5, #0
   26088:	beq	2609c <__assert_fail@plt+0x14be8>
   2608c:	sub	sp, fp, #48	; 0x30
   26090:	vpop	{d8-d9}
   26094:	add	sp, sp, #4
   26098:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2609c:	mov	r0, #4
   260a0:	mov	r1, #256	; 0x100
   260a4:	bl	2ac0c <__assert_fail@plt+0x19758>
   260a8:	ldr	r1, [sp, #88]	; 0x58
   260ac:	cmp	r0, #0
   260b0:	str	r0, [r1, #44]	; 0x2c
   260b4:	movwne	r0, #1
   260b8:	sub	sp, fp, #48	; 0x30
   260bc:	vpop	{d8-d9}
   260c0:	add	sp, sp, #4
   260c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   260c8:	mov	r0, #0
   260cc:	str	r0, [r6]
   260d0:	str	r0, [r5]
   260d4:	mov	r5, r4
   260d8:	cmp	r5, #1
   260dc:	bge	26060 <__assert_fail@plt+0x14bac>
   260e0:	b	2607c <__assert_fail@plt+0x14bc8>
   260e4:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   260e8:	bl	2ae28 <__assert_fail@plt+0x19974>
   260ec:	b	25a3c <__assert_fail@plt+0x14588>
   260f0:	mov	r1, #512	; 0x200
   260f4:	bl	2ac0c <__assert_fail@plt+0x19758>
   260f8:	ldr	r1, [sp, #88]	; 0x58
   260fc:	ldr	r5, [sp, #156]	; 0x9c
   26100:	cmp	r0, #0
   26104:	str	r0, [r1, #48]	; 0x30
   26108:	beq	25a2c <__assert_fail@plt+0x14578>
   2610c:	ldr	ip, [fp, #-3176]	; 0xfffff398
   26110:	mov	r9, r5
   26114:	cmp	ip, #0
   26118:	beq	261a4 <__assert_fail@plt+0x14cf0>
   2611c:	sub	lr, fp, #1024	; 0x400
   26120:	mov	r7, #0
   26124:	mov	r6, #1
   26128:	mov	r5, #0
   2612c:	sub	r1, lr, #56	; 0x38
   26130:	sub	lr, fp, #2048	; 0x800
   26134:	sub	r4, r1, #4
   26138:	sub	r1, lr, #56	; 0x38
   2613c:	sub	lr, r1, #4
   26140:	mov	r1, ip
   26144:	b	26184 <__assert_fail@plt+0x14cd0>
   26148:	add	r3, sp, #160	; 0xa0
   2614c:	mov	r9, r4
   26150:	mov	r8, lr
   26154:	ldr	r2, [r3], #32
   26158:	add	r9, r9, #4
   2615c:	add	r8, r8, #4
   26160:	tst	r2, r6
   26164:	beq	26154 <__assert_fail@plt+0x14ca0>
   26168:	ldr	r2, [r9]
   2616c:	mov	r3, r0
   26170:	str	r2, [r3, r5, lsl #2]!
   26174:	ldr	r2, [r8]
   26178:	ldr	r9, [sp, #156]	; 0x9c
   2617c:	str	r2, [r3, #1024]	; 0x400
   26180:	b	2618c <__assert_fail@plt+0x14cd8>
   26184:	tst	r1, #1
   26188:	bne	26148 <__assert_fail@plt+0x14c94>
   2618c:	lsr	r2, r1, #1
   26190:	cmp	r7, r1, lsr #1
   26194:	add	r5, r5, #1
   26198:	lsl	r6, r6, #1
   2619c:	mov	r1, r2
   261a0:	bne	26184 <__assert_fail@plt+0x14cd0>
   261a4:	ldr	r2, [fp, #-3172]	; 0xfffff39c
   261a8:	cmp	r2, #0
   261ac:	beq	2623c <__assert_fail@plt+0x14d88>
   261b0:	add	r1, sp, #160	; 0xa0
   261b4:	sub	lr, fp, #2048	; 0x800
   261b8:	mov	r5, #32
   261bc:	mov	r3, #0
   261c0:	add	r4, r1, #4
   261c4:	sub	r1, lr, #56	; 0x38
   261c8:	sub	lr, r1, #4
   261cc:	sub	r1, fp, #1024	; 0x400
   261d0:	sub	r1, r1, #56	; 0x38
   261d4:	sub	r8, r1, #4
   261d8:	mov	r1, #1
   261dc:	b	2621c <__assert_fail@plt+0x14d68>
   261e0:	mov	r7, r4
   261e4:	mov	r9, lr
   261e8:	mov	sl, r8
   261ec:	ldr	r6, [r7], #32
   261f0:	add	r9, r9, #4
   261f4:	add	sl, sl, #4
   261f8:	tst	r6, r1
   261fc:	beq	261ec <__assert_fail@plt+0x14d38>
   26200:	ldr	r6, [sl]
   26204:	mov	r7, r0
   26208:	str	r6, [r7, r5, lsl #2]!
   2620c:	ldr	r6, [r9]
   26210:	ldr	r9, [sp, #156]	; 0x9c
   26214:	str	r6, [r7, #1024]	; 0x400
   26218:	b	26224 <__assert_fail@plt+0x14d70>
   2621c:	tst	r2, #1
   26220:	bne	261e0 <__assert_fail@plt+0x14d2c>
   26224:	lsr	r6, r2, #1
   26228:	cmp	r3, r2, lsr #1
   2622c:	add	r5, r5, #1
   26230:	lsl	r1, r1, #1
   26234:	mov	r2, r6
   26238:	bne	2621c <__assert_fail@plt+0x14d68>
   2623c:	ldr	r2, [fp, #-3168]	; 0xfffff3a0
   26240:	cmp	r2, #0
   26244:	beq	262d4 <__assert_fail@plt+0x14e20>
   26248:	add	r1, sp, #160	; 0xa0
   2624c:	sub	lr, fp, #2048	; 0x800
   26250:	mov	r5, #64	; 0x40
   26254:	mov	r3, #0
   26258:	add	r4, r1, #8
   2625c:	sub	r1, lr, #56	; 0x38
   26260:	sub	lr, r1, #4
   26264:	sub	r1, fp, #1024	; 0x400
   26268:	sub	r1, r1, #56	; 0x38
   2626c:	sub	r8, r1, #4
   26270:	mov	r1, #1
   26274:	b	262b4 <__assert_fail@plt+0x14e00>
   26278:	mov	r7, r4
   2627c:	mov	r9, lr
   26280:	mov	sl, r8
   26284:	ldr	r6, [r7], #32
   26288:	add	r9, r9, #4
   2628c:	add	sl, sl, #4
   26290:	tst	r6, r1
   26294:	beq	26284 <__assert_fail@plt+0x14dd0>
   26298:	ldr	r6, [sl]
   2629c:	mov	r7, r0
   262a0:	str	r6, [r7, r5, lsl #2]!
   262a4:	ldr	r6, [r9]
   262a8:	ldr	r9, [sp, #156]	; 0x9c
   262ac:	str	r6, [r7, #1024]	; 0x400
   262b0:	b	262bc <__assert_fail@plt+0x14e08>
   262b4:	tst	r2, #1
   262b8:	bne	26278 <__assert_fail@plt+0x14dc4>
   262bc:	lsr	r6, r2, #1
   262c0:	cmp	r3, r2, lsr #1
   262c4:	add	r5, r5, #1
   262c8:	lsl	r1, r1, #1
   262cc:	mov	r2, r6
   262d0:	bne	262b4 <__assert_fail@plt+0x14e00>
   262d4:	ldr	r2, [fp, #-3164]	; 0xfffff3a4
   262d8:	cmp	r2, #0
   262dc:	beq	2636c <__assert_fail@plt+0x14eb8>
   262e0:	add	r1, sp, #160	; 0xa0
   262e4:	sub	lr, fp, #2048	; 0x800
   262e8:	mov	r5, #96	; 0x60
   262ec:	mov	r3, #0
   262f0:	add	r4, r1, #12
   262f4:	sub	r1, lr, #56	; 0x38
   262f8:	sub	lr, r1, #4
   262fc:	sub	r1, fp, #1024	; 0x400
   26300:	sub	r1, r1, #56	; 0x38
   26304:	sub	r8, r1, #4
   26308:	mov	r1, #1
   2630c:	b	2634c <__assert_fail@plt+0x14e98>
   26310:	mov	r7, r4
   26314:	mov	r9, lr
   26318:	mov	sl, r8
   2631c:	ldr	r6, [r7], #32
   26320:	add	r9, r9, #4
   26324:	add	sl, sl, #4
   26328:	tst	r6, r1
   2632c:	beq	2631c <__assert_fail@plt+0x14e68>
   26330:	ldr	r6, [sl]
   26334:	mov	r7, r0
   26338:	str	r6, [r7, r5, lsl #2]!
   2633c:	ldr	r6, [r9]
   26340:	ldr	r9, [sp, #156]	; 0x9c
   26344:	str	r6, [r7, #1024]	; 0x400
   26348:	b	26354 <__assert_fail@plt+0x14ea0>
   2634c:	tst	r2, #1
   26350:	bne	26310 <__assert_fail@plt+0x14e5c>
   26354:	lsr	r6, r2, #1
   26358:	cmp	r3, r2, lsr #1
   2635c:	add	r5, r5, #1
   26360:	lsl	r1, r1, #1
   26364:	mov	r2, r6
   26368:	bne	2634c <__assert_fail@plt+0x14e98>
   2636c:	ldr	r2, [fp, #-3160]	; 0xfffff3a8
   26370:	cmp	r2, #0
   26374:	beq	26404 <__assert_fail@plt+0x14f50>
   26378:	add	r1, sp, #160	; 0xa0
   2637c:	sub	lr, fp, #2048	; 0x800
   26380:	mov	r5, #128	; 0x80
   26384:	mov	r3, #0
   26388:	add	r4, r1, #16
   2638c:	sub	r1, lr, #56	; 0x38
   26390:	sub	lr, r1, #4
   26394:	sub	r1, fp, #1024	; 0x400
   26398:	sub	r1, r1, #56	; 0x38
   2639c:	sub	r8, r1, #4
   263a0:	mov	r1, #1
   263a4:	b	263e4 <__assert_fail@plt+0x14f30>
   263a8:	mov	r7, r4
   263ac:	mov	r9, lr
   263b0:	mov	sl, r8
   263b4:	ldr	r6, [r7], #32
   263b8:	add	r9, r9, #4
   263bc:	add	sl, sl, #4
   263c0:	tst	r6, r1
   263c4:	beq	263b4 <__assert_fail@plt+0x14f00>
   263c8:	ldr	r6, [sl]
   263cc:	mov	r7, r0
   263d0:	str	r6, [r7, r5, lsl #2]!
   263d4:	ldr	r6, [r9]
   263d8:	ldr	r9, [sp, #156]	; 0x9c
   263dc:	str	r6, [r7, #1024]	; 0x400
   263e0:	b	263ec <__assert_fail@plt+0x14f38>
   263e4:	tst	r2, #1
   263e8:	bne	263a8 <__assert_fail@plt+0x14ef4>
   263ec:	lsr	r6, r2, #1
   263f0:	cmp	r3, r2, lsr #1
   263f4:	add	r5, r5, #1
   263f8:	lsl	r1, r1, #1
   263fc:	mov	r2, r6
   26400:	bne	263e4 <__assert_fail@plt+0x14f30>
   26404:	ldr	r2, [fp, #-3156]	; 0xfffff3ac
   26408:	cmp	r2, #0
   2640c:	beq	2649c <__assert_fail@plt+0x14fe8>
   26410:	add	r1, sp, #160	; 0xa0
   26414:	sub	lr, fp, #2048	; 0x800
   26418:	mov	r5, #160	; 0xa0
   2641c:	mov	r3, #0
   26420:	add	r4, r1, #20
   26424:	sub	r1, lr, #56	; 0x38
   26428:	sub	lr, r1, #4
   2642c:	sub	r1, fp, #1024	; 0x400
   26430:	sub	r1, r1, #56	; 0x38
   26434:	sub	r8, r1, #4
   26438:	mov	r1, #1
   2643c:	b	2647c <__assert_fail@plt+0x14fc8>
   26440:	mov	r7, r4
   26444:	mov	r9, lr
   26448:	mov	sl, r8
   2644c:	ldr	r6, [r7], #32
   26450:	add	r9, r9, #4
   26454:	add	sl, sl, #4
   26458:	tst	r6, r1
   2645c:	beq	2644c <__assert_fail@plt+0x14f98>
   26460:	ldr	r6, [sl]
   26464:	mov	r7, r0
   26468:	str	r6, [r7, r5, lsl #2]!
   2646c:	ldr	r6, [r9]
   26470:	ldr	r9, [sp, #156]	; 0x9c
   26474:	str	r6, [r7, #1024]	; 0x400
   26478:	b	26484 <__assert_fail@plt+0x14fd0>
   2647c:	tst	r2, #1
   26480:	bne	26440 <__assert_fail@plt+0x14f8c>
   26484:	lsr	r6, r2, #1
   26488:	cmp	r3, r2, lsr #1
   2648c:	add	r5, r5, #1
   26490:	lsl	r1, r1, #1
   26494:	mov	r2, r6
   26498:	bne	2647c <__assert_fail@plt+0x14fc8>
   2649c:	ldr	r2, [fp, #-3152]	; 0xfffff3b0
   264a0:	cmp	r2, #0
   264a4:	beq	26534 <__assert_fail@plt+0x15080>
   264a8:	add	r1, sp, #160	; 0xa0
   264ac:	sub	lr, fp, #2048	; 0x800
   264b0:	mov	r5, #192	; 0xc0
   264b4:	mov	r3, #0
   264b8:	add	r4, r1, #24
   264bc:	sub	r1, lr, #56	; 0x38
   264c0:	sub	lr, r1, #4
   264c4:	sub	r1, fp, #1024	; 0x400
   264c8:	sub	r1, r1, #56	; 0x38
   264cc:	sub	r8, r1, #4
   264d0:	mov	r1, #1
   264d4:	b	26514 <__assert_fail@plt+0x15060>
   264d8:	mov	r7, r4
   264dc:	mov	r9, lr
   264e0:	mov	sl, r8
   264e4:	ldr	r6, [r7], #32
   264e8:	add	r9, r9, #4
   264ec:	add	sl, sl, #4
   264f0:	tst	r6, r1
   264f4:	beq	264e4 <__assert_fail@plt+0x15030>
   264f8:	ldr	r6, [sl]
   264fc:	mov	r7, r0
   26500:	str	r6, [r7, r5, lsl #2]!
   26504:	ldr	r6, [r9]
   26508:	ldr	r9, [sp, #156]	; 0x9c
   2650c:	str	r6, [r7, #1024]	; 0x400
   26510:	b	2651c <__assert_fail@plt+0x15068>
   26514:	tst	r2, #1
   26518:	bne	264d8 <__assert_fail@plt+0x15024>
   2651c:	lsr	r6, r2, #1
   26520:	cmp	r3, r2, lsr #1
   26524:	add	r5, r5, #1
   26528:	lsl	r1, r1, #1
   2652c:	mov	r2, r6
   26530:	bne	26514 <__assert_fail@plt+0x15060>
   26534:	ldr	r2, [fp, #-3148]	; 0xfffff3b4
   26538:	cmp	r2, #0
   2653c:	beq	265cc <__assert_fail@plt+0x15118>
   26540:	add	r1, sp, #160	; 0xa0
   26544:	sub	lr, fp, #2048	; 0x800
   26548:	mov	r5, #224	; 0xe0
   2654c:	mov	r3, #0
   26550:	add	r4, r1, #28
   26554:	sub	r1, lr, #56	; 0x38
   26558:	sub	lr, r1, #4
   2655c:	sub	r1, fp, #1024	; 0x400
   26560:	sub	r1, r1, #56	; 0x38
   26564:	sub	r8, r1, #4
   26568:	mov	r1, #1
   2656c:	b	265ac <__assert_fail@plt+0x150f8>
   26570:	mov	r7, r4
   26574:	mov	r9, lr
   26578:	mov	sl, r8
   2657c:	ldr	r6, [r7], #32
   26580:	add	r9, r9, #4
   26584:	add	sl, sl, #4
   26588:	tst	r6, r1
   2658c:	beq	2657c <__assert_fail@plt+0x150c8>
   26590:	ldr	r6, [sl]
   26594:	mov	r7, r0
   26598:	str	r6, [r7, r5, lsl #2]!
   2659c:	ldr	r6, [r9]
   265a0:	ldr	r9, [sp, #156]	; 0x9c
   265a4:	str	r6, [r7, #1024]	; 0x400
   265a8:	b	265b4 <__assert_fail@plt+0x15100>
   265ac:	tst	r2, #1
   265b0:	bne	26570 <__assert_fail@plt+0x150bc>
   265b4:	lsr	r6, r2, #1
   265b8:	cmp	r3, r2, lsr #1
   265bc:	add	r5, r5, #1
   265c0:	lsl	r1, r1, #1
   265c4:	mov	r2, r6
   265c8:	bne	265ac <__assert_fail@plt+0x150f8>
   265cc:	ldr	r8, [sp, #124]	; 0x7c
   265d0:	add	r4, sp, #160	; 0xa0
   265d4:	tst	ip, #1024	; 0x400
   265d8:	bne	25fa0 <__assert_fail@plt+0x14aec>
   265dc:	b	25fdc <__assert_fail@plt+0x14b28>
   265e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   265e4:	add	fp, sp, #28
   265e8:	sub	sp, sp, #68	; 0x44
   265ec:	ldr	r4, [r1, #8]
   265f0:	ldr	r6, [r1, #12]
   265f4:	mov	r8, r0
   265f8:	mov	r0, #1
   265fc:	mov	r5, r1
   26600:	str	r0, [fp, #-36]	; 0xffffffdc
   26604:	str	r0, [fp, #-40]	; 0xffffffd8
   26608:	mov	r0, #4
   2660c:	bl	2ac60 <__assert_fail@plt+0x197ac>
   26610:	cmp	r0, #0
   26614:	str	r0, [fp, #-32]	; 0xffffffe0
   26618:	beq	26cac <__assert_fail@plt+0x157f8>
   2661c:	str	r4, [r0]
   26620:	sub	r3, fp, #40	; 0x28
   26624:	mov	r0, r8
   26628:	mov	r1, r5
   2662c:	mov	r2, r6
   26630:	str	r5, [sp, #28]
   26634:	bl	26cd0 <__assert_fail@plt+0x1581c>
   26638:	cmp	r0, #0
   2663c:	bne	26c64 <__assert_fail@plt+0x157b0>
   26640:	mov	r4, r6
   26644:	mov	r9, #1
   26648:	mov	r1, #0
   2664c:	str	r8, [sp, #48]	; 0x30
   26650:	cmp	r4, #1
   26654:	blt	26c6c <__assert_fail@plt+0x157b8>
   26658:	ldr	lr, [sp, #28]
   2665c:	ldr	r0, [lr]
   26660:	ldr	r2, [r0, r4, lsl #2]
   26664:	cmp	r2, #0
   26668:	mov	r2, #0
   2666c:	addeq	r2, r1, #1
   26670:	ldr	r1, [r8, #120]	; 0x78
   26674:	cmp	r2, r1
   26678:	bgt	26c74 <__assert_fail@plt+0x157c0>
   2667c:	mov	r0, #0
   26680:	str	r4, [sp, #36]	; 0x24
   26684:	sub	r4, r4, #1
   26688:	str	r2, [sp, #4]
   2668c:	str	r0, [fp, #-36]	; 0xffffffdc
   26690:	ldr	r0, [r8, #100]	; 0x64
   26694:	ldr	r1, [r0, r4, lsl #2]
   26698:	cmp	r1, #0
   2669c:	beq	26c44 <__assert_fail@plt+0x15790>
   266a0:	ldr	r0, [r1, #20]
   266a4:	cmp	r0, #1
   266a8:	blt	26c44 <__assert_fail@plt+0x15790>
   266ac:	ldr	r0, [r8, #84]	; 0x54
   266b0:	mov	r2, #0
   266b4:	str	r4, [sp, #32]
   266b8:	str	r1, [sp, #16]
   266bc:	str	r0, [sp, #24]
   266c0:	b	26780 <__assert_fail@plt+0x152cc>
   266c4:	cmp	r2, r1
   266c8:	bne	26704 <__assert_fail@plt+0x15250>
   266cc:	lsl	r0, r2, #1
   266d0:	lsl	r1, r2, #3
   266d4:	str	r0, [fp, #-40]	; 0xffffffd8
   266d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   266dc:	bl	2ac90 <__assert_fail@plt+0x197dc>
   266e0:	cmp	r0, #0
   266e4:	beq	26cc8 <__assert_fail@plt+0x15814>
   266e8:	str	r0, [fp, #-32]	; 0xffffffe0
   266ec:	ldr	lr, [sp, #28]
   266f0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   266f4:	ldr	r2, [r0]
   266f8:	cmp	r2, r5
   266fc:	bgt	26714 <__assert_fail@plt+0x15260>
   26700:	b	26748 <__assert_fail@plt+0x15294>
   26704:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26708:	ldr	r2, [r0]
   2670c:	cmp	r2, r5
   26710:	ble	26748 <__assert_fail@plt+0x15294>
   26714:	cmp	r1, #1
   26718:	blt	26778 <__assert_fail@plt+0x152c4>
   2671c:	add	r2, r0, r1, lsl #2
   26720:	add	r1, r1, #1
   26724:	mov	r3, r2
   26728:	ldr	r7, [r3, #-4]!
   2672c:	sub	r1, r1, #1
   26730:	cmp	r1, #1
   26734:	str	r7, [r2]
   26738:	mov	r2, r3
   2673c:	bgt	26728 <__assert_fail@plt+0x15274>
   26740:	sub	r1, r1, #1
   26744:	b	26778 <__assert_fail@plt+0x152c4>
   26748:	add	r2, r0, r1, lsl #2
   2674c:	ldr	r3, [r2, #-4]
   26750:	cmp	r3, r5
   26754:	ble	26778 <__assert_fail@plt+0x152c4>
   26758:	sub	r1, r1, #2
   2675c:	str	r3, [r2]
   26760:	sub	r1, r1, #1
   26764:	ldr	r3, [r2, #-8]
   26768:	sub	r2, r2, #4
   2676c:	cmp	r3, r5
   26770:	bgt	2675c <__assert_fail@plt+0x152a8>
   26774:	add	r1, r1, #2
   26778:	str	r5, [r0, r1, lsl #2]
   2677c:	b	26bf4 <__assert_fail@plt+0x15740>
   26780:	ldr	r0, [r1, #24]
   26784:	str	r2, [sp, #20]
   26788:	ldr	r2, [r0, r2, lsl #2]
   2678c:	ldr	r0, [sp, #24]
   26790:	ldr	r0, [r0]
   26794:	mov	r1, r2
   26798:	str	r2, [fp, #-44]	; 0xffffffd4
   2679c:	add	r0, r0, r2, lsl #3
   267a0:	ldrb	r0, [r0, #6]
   267a4:	tst	r0, #16
   267a8:	bne	26848 <__assert_fail@plt+0x15394>
   267ac:	ldr	r0, [sp, #24]
   267b0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   267b4:	mov	r2, r4
   267b8:	ldr	r0, [r0]
   267bc:	add	r1, r0, r1, lsl #3
   267c0:	mov	r0, r8
   267c4:	bl	24628 <__assert_fail@plt+0x13174>
   267c8:	ldr	lr, [sp, #28]
   267cc:	cmp	r0, #0
   267d0:	beq	26c2c <__assert_fail@plt+0x15778>
   267d4:	ldr	r0, [lr]
   267d8:	ldr	r1, [sp, #36]	; 0x24
   267dc:	ldr	r0, [r0, r1, lsl #2]
   267e0:	cmp	r0, #0
   267e4:	beq	26c2c <__assert_fail@plt+0x15778>
   267e8:	ldr	r2, [r0, #8]
   267ec:	cmp	r2, #1
   267f0:	blt	26c2c <__assert_fail@plt+0x15778>
   267f4:	ldr	r1, [sp, #24]
   267f8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   267fc:	ldr	r0, [r0, #12]
   26800:	ldr	r1, [r1, #12]
   26804:	ldr	r1, [r1, r3, lsl #2]
   26808:	subs	r3, r2, #1
   2680c:	mov	r2, #0
   26810:	beq	26834 <__assert_fail@plt+0x15380>
   26814:	add	r7, r2, r3
   26818:	lsr	r6, r7, #1
   2681c:	ldr	r5, [r0, r6, lsl #2]
   26820:	cmp	r5, r1
   26824:	movge	r3, r6
   26828:	addlt	r2, r9, r7, lsr #1
   2682c:	cmp	r2, r3
   26830:	bcc	26814 <__assert_fail@plt+0x15360>
   26834:	ldr	r2, [r0, r2, lsl #2]
   26838:	mov	r0, #1
   2683c:	cmp	r2, r1
   26840:	beq	268a4 <__assert_fail@plt+0x153f0>
   26844:	b	26c2c <__assert_fail@plt+0x15778>
   26848:	ldr	r7, [r8, #84]	; 0x54
   2684c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   26850:	mov	r5, r4
   26854:	ldr	r4, [lr, #12]
   26858:	mov	r2, r8
   2685c:	mov	r3, r5
   26860:	mov	r0, r7
   26864:	bl	24310 <__assert_fail@plt+0x12e5c>
   26868:	cmp	r0, #1
   2686c:	blt	26894 <__assert_fail@plt+0x153e0>
   26870:	add	r1, r0, r5
   26874:	cmp	r1, r4
   26878:	ble	2694c <__assert_fail@plt+0x15498>
   2687c:	ldr	lr, [sp, #28]
   26880:	ldr	r4, [sp, #32]
   26884:	ldr	ip, [lr, #20]
   26888:	cmp	ip, #0
   2688c:	bne	268b0 <__assert_fail@plt+0x153fc>
   26890:	b	26bd0 <__assert_fail@plt+0x1571c>
   26894:	ldr	lr, [sp, #28]
   26898:	cmp	r0, #0
   2689c:	mov	r4, r5
   268a0:	beq	267ac <__assert_fail@plt+0x152f8>
   268a4:	ldr	ip, [lr, #20]
   268a8:	cmp	ip, #0
   268ac:	beq	26bd0 <__assert_fail@plt+0x1571c>
   268b0:	add	r0, r0, r4
   268b4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   268b8:	str	r0, [sp, #40]	; 0x28
   268bc:	ldr	r0, [sp, #24]
   268c0:	ldr	r0, [r0, #12]
   268c4:	ldr	r0, [r0, r1, lsl #2]
   268c8:	str	r0, [sp, #8]
   268cc:	ldr	r0, [r8, #108]	; 0x6c
   268d0:	cmp	r0, #1
   268d4:	blt	269c8 <__assert_fail@plt+0x15514>
   268d8:	ldr	r2, [r8, #116]	; 0x74
   268dc:	ldr	r1, [sp, #40]	; 0x28
   268e0:	mov	sl, #0
   268e4:	mov	r3, r0
   268e8:	add	r7, r3, sl
   268ec:	add	r7, r7, r7, lsr #31
   268f0:	asr	r6, r7, #1
   268f4:	add	r5, r6, r6, lsl #1
   268f8:	add	r5, r2, r5, lsl #3
   268fc:	ldr	r5, [r5, #4]
   26900:	cmp	r5, r1
   26904:	addlt	sl, r9, r7, asr #1
   26908:	movge	r3, r6
   2690c:	cmp	sl, r3
   26910:	blt	268e8 <__assert_fail@plt+0x15434>
   26914:	cmp	sl, r0
   26918:	bge	269d8 <__assert_fail@plt+0x15524>
   2691c:	ldr	r2, [r8, #116]	; 0x74
   26920:	add	r3, sl, sl, lsl #1
   26924:	add	r2, r2, r3, lsl #3
   26928:	ldr	r2, [r2, #4]
   2692c:	cmp	r2, r1
   26930:	mvnne	sl, #0
   26934:	cmp	r0, #1
   26938:	bge	269e4 <__assert_fail@plt+0x15530>
   2693c:	mov	r5, #0
   26940:	cmp	r5, r0
   26944:	blt	26a24 <__assert_fail@plt+0x15570>
   26948:	b	26a48 <__assert_fail@plt+0x15594>
   2694c:	ldr	lr, [sp, #28]
   26950:	ldr	r4, [sp, #32]
   26954:	ldr	r2, [lr]
   26958:	ldr	r2, [r2, r1, lsl #2]
   2695c:	cmp	r2, #0
   26960:	beq	267ac <__assert_fail@plt+0x152f8>
   26964:	ldr	r3, [r2, #8]
   26968:	cmp	r3, #1
   2696c:	blt	267ac <__assert_fail@plt+0x152f8>
   26970:	ldr	r1, [r7, #12]
   26974:	ldr	r7, [fp, #-44]	; 0xffffffd4
   26978:	ldr	r2, [r2, #12]
   2697c:	ldr	r1, [r1, r7, lsl #2]
   26980:	subs	r7, r3, #1
   26984:	mov	r3, #0
   26988:	beq	269ac <__assert_fail@plt+0x154f8>
   2698c:	add	r6, r3, r7
   26990:	lsr	r5, r6, #1
   26994:	ldr	r4, [r2, r5, lsl #2]
   26998:	cmp	r4, r1
   2699c:	movge	r7, r5
   269a0:	addlt	r3, r9, r6, lsr #1
   269a4:	cmp	r3, r7
   269a8:	bcc	2698c <__assert_fail@plt+0x154d8>
   269ac:	ldr	r4, [sp, #32]
   269b0:	cmp	r0, #0
   269b4:	beq	267ac <__assert_fail@plt+0x152f8>
   269b8:	ldr	r2, [r2, r3, lsl #2]
   269bc:	cmp	r2, r1
   269c0:	beq	268a4 <__assert_fail@plt+0x153f0>
   269c4:	b	267ac <__assert_fail@plt+0x152f8>
   269c8:	ldr	r1, [sp, #40]	; 0x28
   269cc:	mov	sl, #0
   269d0:	cmp	sl, r0
   269d4:	blt	2691c <__assert_fail@plt+0x15468>
   269d8:	mvn	sl, #0
   269dc:	cmp	r0, #1
   269e0:	blt	2693c <__assert_fail@plt+0x15488>
   269e4:	ldr	r2, [r8, #116]	; 0x74
   269e8:	mov	r5, #0
   269ec:	mov	r3, r0
   269f0:	add	r7, r3, r5
   269f4:	add	r7, r7, r7, lsr #31
   269f8:	asr	r6, r7, #1
   269fc:	add	r1, r6, r6, lsl #1
   26a00:	add	r1, r2, r1, lsl #3
   26a04:	ldr	r1, [r1, #4]
   26a08:	cmp	r1, r4
   26a0c:	addlt	r5, r9, r7, asr #1
   26a10:	movge	r3, r6
   26a14:	cmp	r5, r3
   26a18:	blt	269f0 <__assert_fail@plt+0x1553c>
   26a1c:	cmp	r5, r0
   26a20:	bge	26a48 <__assert_fail@plt+0x15594>
   26a24:	ldr	r0, [r8, #116]	; 0x74
   26a28:	add	r1, r5, r5, lsl #1
   26a2c:	add	r0, r0, r1, lsl #3
   26a30:	ldr	r0, [r0, #4]
   26a34:	cmp	r0, r4
   26a38:	mvnne	r5, #0
   26a3c:	cmp	ip, #1
   26a40:	bge	26a54 <__assert_fail@plt+0x155a0>
   26a44:	b	26bd0 <__assert_fail@plt+0x1571c>
   26a48:	mvn	r5, #0
   26a4c:	cmp	ip, #1
   26a50:	blt	26bd0 <__assert_fail@plt+0x1571c>
   26a54:	ldr	ip, [r8, #84]	; 0x54
   26a58:	mov	r6, #0
   26a5c:	str	ip, [sp, #12]
   26a60:	ldr	r0, [lr, #24]
   26a64:	ldr	r3, [r8, #116]	; 0x74
   26a68:	ldr	r4, [ip]
   26a6c:	mvn	r8, #0
   26a70:	ldr	r2, [r0, r6, lsl #2]
   26a74:	mov	r0, r3
   26a78:	add	r1, r2, r2, lsl #1
   26a7c:	ldr	r7, [r0, r1, lsl #3]!
   26a80:	ldr	r4, [r4, r7, lsl #3]
   26a84:	ldr	r0, [r0, #8]
   26a88:	ldr	r7, [sp, #40]	; 0x28
   26a8c:	cmp	r0, r7
   26a90:	str	r4, [sp, #44]	; 0x2c
   26a94:	ble	26ab0 <__assert_fail@plt+0x155fc>
   26a98:	mvn	r9, #0
   26a9c:	ldr	r1, [sp, #36]	; 0x24
   26aa0:	ldr	r4, [sp, #32]
   26aa4:	cmp	r0, r1
   26aa8:	blt	26b34 <__assert_fail@plt+0x15680>
   26aac:	b	26bb0 <__assert_fail@plt+0x156fc>
   26ab0:	add	r1, r3, r1, lsl #3
   26ab4:	mov	r9, #1
   26ab8:	ldr	r1, [r1, #12]
   26abc:	cmp	r1, r7
   26ac0:	blt	26b24 <__assert_fail@plt+0x15670>
   26ac4:	sub	r1, r1, r7
   26ac8:	cmp	r0, r7
   26acc:	mov	r7, #1
   26ad0:	clz	r1, r1
   26ad4:	lsr	r4, r1, #5
   26ad8:	lsl	r1, r4, #1
   26adc:	orreq	r1, r7, r4, lsl #1
   26ae0:	cmp	r1, #0
   26ae4:	beq	26b94 <__assert_fail@plt+0x156e0>
   26ae8:	ldr	r4, [sp, #48]	; 0x30
   26aec:	ldr	r2, [sp, #44]	; 0x2c
   26af0:	ldr	r3, [sp, #8]
   26af4:	str	sl, [sp]
   26af8:	mov	r0, r4
   26afc:	bl	28210 <__assert_fail@plt+0x16d5c>
   26b00:	ldr	lr, [sp, #28]
   26b04:	mov	r9, r0
   26b08:	ldr	r3, [r4, #116]	; 0x74
   26b0c:	ldr	ip, [sp, #12]
   26b10:	ldr	r0, [lr, #24]
   26b14:	ldr	r2, [r0, r6, lsl #2]
   26b18:	add	r0, r2, r2, lsl #1
   26b1c:	add	r0, r3, r0, lsl #3
   26b20:	ldr	r0, [r0, #8]
   26b24:	ldr	r1, [sp, #36]	; 0x24
   26b28:	ldr	r4, [sp, #32]
   26b2c:	cmp	r0, r1
   26b30:	bge	26bb0 <__assert_fail@plt+0x156fc>
   26b34:	add	r1, r2, r2, lsl #1
   26b38:	mov	r8, #1
   26b3c:	add	r1, r3, r1, lsl #3
   26b40:	ldr	r1, [r1, #12]
   26b44:	cmp	r1, r4
   26b48:	blt	26bb0 <__assert_fail@plt+0x156fc>
   26b4c:	sub	r1, r1, r4
   26b50:	cmp	r0, r4
   26b54:	mov	r0, #1
   26b58:	clz	r1, r1
   26b5c:	lsr	r2, r1, #5
   26b60:	lsl	r1, r2, #1
   26b64:	orreq	r1, r0, r2, lsl #1
   26b68:	cmp	r1, #0
   26b6c:	beq	26bac <__assert_fail@plt+0x156f8>
   26b70:	ldr	r0, [sp, #48]	; 0x30
   26b74:	ldr	r2, [sp, #44]	; 0x2c
   26b78:	ldr	r3, [fp, #-44]	; 0xffffffd4
   26b7c:	str	r5, [sp]
   26b80:	bl	28210 <__assert_fail@plt+0x16d5c>
   26b84:	ldr	ip, [sp, #12]
   26b88:	ldr	lr, [sp, #28]
   26b8c:	mov	r8, r0
   26b90:	b	26bb0 <__assert_fail@plt+0x156fc>
   26b94:	mov	r9, #0
   26b98:	ldr	r1, [sp, #36]	; 0x24
   26b9c:	ldr	r4, [sp, #32]
   26ba0:	cmp	r0, r1
   26ba4:	blt	26b34 <__assert_fail@plt+0x15680>
   26ba8:	b	26bb0 <__assert_fail@plt+0x156fc>
   26bac:	mov	r8, #0
   26bb0:	cmp	r8, r9
   26bb4:	ldr	r8, [sp, #48]	; 0x30
   26bb8:	mov	r9, #1
   26bbc:	bne	26c2c <__assert_fail@plt+0x15778>
   26bc0:	ldr	r0, [lr, #20]
   26bc4:	add	r6, r6, #1
   26bc8:	cmp	r6, r0
   26bcc:	blt	26a60 <__assert_fail@plt+0x155ac>
   26bd0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   26bd4:	cmp	r2, #0
   26bd8:	beq	26c04 <__assert_fail@plt+0x15750>
   26bdc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   26be0:	ldr	r5, [fp, #-44]	; 0xffffffd4
   26be4:	cmp	r1, #0
   26be8:	bne	266c4 <__assert_fail@plt+0x15210>
   26bec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26bf0:	str	r5, [r0]
   26bf4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   26bf8:	add	r0, r0, #1
   26bfc:	str	r0, [fp, #-36]	; 0xffffffdc
   26c00:	b	26c2c <__assert_fail@plt+0x15778>
   26c04:	mov	r0, #4
   26c08:	str	r9, [fp, #-36]	; 0xffffffdc
   26c0c:	str	r9, [fp, #-40]	; 0xffffffd8
   26c10:	bl	2ac60 <__assert_fail@plt+0x197ac>
   26c14:	ldr	r1, [fp, #-44]	; 0xffffffd4
   26c18:	cmp	r0, #0
   26c1c:	str	r0, [fp, #-32]	; 0xffffffe0
   26c20:	beq	26c98 <__assert_fail@plt+0x157e4>
   26c24:	ldr	lr, [sp, #28]
   26c28:	str	r1, [r0]
   26c2c:	ldr	r1, [sp, #16]
   26c30:	ldr	r2, [sp, #20]
   26c34:	ldr	r0, [r1, #20]
   26c38:	add	r2, r2, #1
   26c3c:	cmp	r2, r0
   26c40:	blt	26780 <__assert_fail@plt+0x152cc>
   26c44:	mov	r0, r8
   26c48:	mov	r1, lr
   26c4c:	mov	r2, r4
   26c50:	sub	r3, fp, #40	; 0x28
   26c54:	bl	26cd0 <__assert_fail@plt+0x1581c>
   26c58:	ldr	r1, [sp, #4]
   26c5c:	cmp	r0, #0
   26c60:	beq	26650 <__assert_fail@plt+0x1519c>
   26c64:	mov	r7, r0
   26c68:	b	26c84 <__assert_fail@plt+0x157d0>
   26c6c:	mov	r7, #0
   26c70:	b	26c84 <__assert_fail@plt+0x157d0>
   26c74:	lsl	r2, r4, #2
   26c78:	mov	r1, #0
   26c7c:	mov	r7, #0
   26c80:	bl	113d0 <memset@plt>
   26c84:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26c88:	bl	2ae28 <__assert_fail@plt+0x19974>
   26c8c:	mov	r0, r7
   26c90:	sub	sp, fp, #28
   26c94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26c98:	mov	r0, #0
   26c9c:	mov	r7, #12
   26ca0:	str	r0, [fp, #-40]	; 0xffffffd8
   26ca4:	str	r0, [fp, #-36]	; 0xffffffdc
   26ca8:	b	26c84 <__assert_fail@plt+0x157d0>
   26cac:	mov	r0, #0
   26cb0:	mov	r7, #12
   26cb4:	str	r0, [fp, #-40]	; 0xffffffd8
   26cb8:	str	r0, [fp, #-36]	; 0xffffffdc
   26cbc:	mov	r0, r7
   26cc0:	sub	sp, fp, #28
   26cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26cc8:	mov	r7, #12
   26ccc:	b	26c84 <__assert_fail@plt+0x157d0>
   26cd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26cd4:	add	fp, sp, #28
   26cd8:	sub	sp, sp, #140	; 0x8c
   26cdc:	mov	r9, r3
   26ce0:	mov	r3, #0
   26ce4:	ldr	r6, [r0, #84]	; 0x54
   26ce8:	mov	r4, r1
   26cec:	str	r2, [fp, #-80]	; 0xffffffb0
   26cf0:	str	r0, [sp, #64]	; 0x40
   26cf4:	str	r3, [fp, #-76]	; 0xffffffb4
   26cf8:	str	r4, [sp, #80]	; 0x50
   26cfc:	ldr	r1, [r0, #100]	; 0x64
   26d00:	ldr	r7, [r1, r2, lsl #2]
   26d04:	cmp	r7, #0
   26d08:	mov	r1, r7
   26d0c:	addne	r1, r1, #4
   26d10:	str	r1, [sp, #68]	; 0x44
   26d14:	ldr	r1, [r9, #4]
   26d18:	cmp	r1, #0
   26d1c:	beq	27134 <__assert_fail@plt+0x15c80>
   26d20:	cmp	r7, #0
   26d24:	beq	270fc <__assert_fail@plt+0x15c48>
   26d28:	mov	r0, #0
   26d2c:	mov	r1, r6
   26d30:	mov	r2, r9
   26d34:	str	r9, [sp, #60]	; 0x3c
   26d38:	str	r0, [fp, #-72]	; 0xffffffb8
   26d3c:	sub	r0, fp, #72	; 0x48
   26d40:	bl	24070 <__assert_fail@plt+0x12bbc>
   26d44:	ldr	r9, [fp, #-72]	; 0xffffffb8
   26d48:	cmp	r9, #0
   26d4c:	bne	27b4c <__assert_fail@plt+0x16698>
   26d50:	mov	r4, r0
   26d54:	mov	r5, r0
   26d58:	str	r6, [sp, #76]	; 0x4c
   26d5c:	ldr	r0, [r4, #28]!
   26d60:	cmp	r0, #0
   26d64:	bne	26df8 <__assert_fail@plt+0x15944>
   26d68:	ldr	r8, [sp, #60]	; 0x3c
   26d6c:	mov	r6, #0
   26d70:	ldr	r0, [r8, #4]
   26d74:	str	r0, [r5, #28]
   26d78:	lsl	r0, r0, #2
   26d7c:	str	r6, [r5, #32]
   26d80:	bl	2ac60 <__assert_fail@plt+0x197ac>
   26d84:	cmp	r0, #0
   26d88:	mov	r9, #12
   26d8c:	str	r0, [r5, #36]	; 0x24
   26d90:	movweq	r6, #12
   26d94:	str	r6, [fp, #-72]	; 0xffffffb8
   26d98:	beq	27b4c <__assert_fail@plt+0x16698>
   26d9c:	ldr	r0, [r8, #4]
   26da0:	ldr	r6, [sp, #76]	; 0x4c
   26da4:	cmp	r0, #1
   26da8:	blt	26df8 <__assert_fail@plt+0x15944>
   26dac:	ldr	r6, [sp, #60]	; 0x3c
   26db0:	mov	r5, #0
   26db4:	ldr	r0, [r6, #8]
   26db8:	ldr	r1, [sp, #76]	; 0x4c
   26dbc:	ldr	r0, [r0, r5, lsl #2]
   26dc0:	ldr	r1, [r1, #28]
   26dc4:	add	r0, r0, r0, lsl #1
   26dc8:	add	r1, r1, r0, lsl #2
   26dcc:	mov	r0, r4
   26dd0:	bl	1fecc <__assert_fail@plt+0xea18>
   26dd4:	cmp	r0, #0
   26dd8:	bne	27b48 <__assert_fail@plt+0x16694>
   26ddc:	ldr	r0, [r6, #4]
   26de0:	add	r5, r5, #1
   26de4:	cmp	r5, r0
   26de8:	blt	26db4 <__assert_fail@plt+0x15900>
   26dec:	ldr	r6, [sp, #76]	; 0x4c
   26df0:	mov	r0, #0
   26df4:	str	r0, [fp, #-72]	; 0xffffffb8
   26df8:	ldr	r5, [sp, #68]	; 0x44
   26dfc:	ldr	r0, [sp, #60]	; 0x3c
   26e00:	mov	r2, r4
   26e04:	mov	r1, r5
   26e08:	bl	27bb4 <__assert_fail@plt+0x16700>
   26e0c:	cmp	r0, #0
   26e10:	str	r0, [fp, #-76]	; 0xffffffb4
   26e14:	bne	27b70 <__assert_fail@plt+0x166bc>
   26e18:	ldr	r4, [sp, #80]	; 0x50
   26e1c:	ldr	r9, [sp, #60]	; 0x3c
   26e20:	ldr	r0, [r4, #20]
   26e24:	cmp	r0, #0
   26e28:	beq	270fc <__assert_fail@plt+0x15c48>
   26e2c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   26e30:	cmp	r0, #1
   26e34:	str	r7, [sp, #56]	; 0x38
   26e38:	blt	270f0 <__assert_fail@plt+0x15c3c>
   26e3c:	ldr	r0, [sp, #64]	; 0x40
   26e40:	mov	r1, #0
   26e44:	ldr	r0, [r0, #116]	; 0x74
   26e48:	str	r0, [sp, #72]	; 0x48
   26e4c:	ldr	r0, [r4, #24]
   26e50:	str	r1, [sp, #84]	; 0x54
   26e54:	ldr	r0, [r0, r1, lsl #2]
   26e58:	ldr	r1, [sp, #72]	; 0x48
   26e5c:	add	r0, r0, r0, lsl #1
   26e60:	add	r1, r1, r0, lsl #3
   26e64:	ldr	r2, [r1, #8]
   26e68:	cmp	r2, lr
   26e6c:	bge	270dc <__assert_fail@plt+0x15c28>
   26e70:	ldr	r1, [r1, #4]
   26e74:	cmp	r1, lr
   26e78:	blt	270dc <__assert_fail@plt+0x15c28>
   26e7c:	ldr	r1, [sp, #72]	; 0x48
   26e80:	ldr	r2, [r6]
   26e84:	ldr	r0, [r1, r0, lsl #3]!
   26e88:	ldr	r1, [r1, #12]
   26e8c:	ldr	sl, [r2, r0, lsl #3]
   26e90:	ldr	r0, [r9, #4]
   26e94:	cmp	r1, lr
   26e98:	bne	27060 <__assert_fail@plt+0x15bac>
   26e9c:	cmp	r0, #1
   26ea0:	blt	270dc <__assert_fail@plt+0x15c28>
   26ea4:	ldr	r3, [r9, #8]
   26ea8:	mvn	r8, #0
   26eac:	mvn	r1, #0
   26eb0:	ldr	r7, [r3]
   26eb4:	add	r6, r2, r7, lsl #3
   26eb8:	ldrb	r6, [r6, #4]
   26ebc:	cmp	r6, #9
   26ec0:	beq	26ee8 <__assert_fail@plt+0x15a34>
   26ec4:	cmp	r6, #8
   26ec8:	bne	26ed8 <__assert_fail@plt+0x15a24>
   26ecc:	ldr	r6, [r2, r7, lsl #3]
   26ed0:	cmp	sl, r6
   26ed4:	moveq	r1, r7
   26ed8:	add	r3, r3, #4
   26edc:	subs	r0, r0, #1
   26ee0:	bne	26eb0 <__assert_fail@plt+0x159fc>
   26ee4:	b	26f00 <__assert_fail@plt+0x15a4c>
   26ee8:	ldr	r6, [r2, r7, lsl #3]
   26eec:	cmp	sl, r6
   26ef0:	moveq	r8, r7
   26ef4:	add	r3, r3, #4
   26ef8:	subs	r0, r0, #1
   26efc:	bne	26eb0 <__assert_fail@plt+0x159fc>
   26f00:	ldr	r6, [sp, #76]	; 0x4c
   26f04:	cmp	r1, #0
   26f08:	blt	26f28 <__assert_fail@plt+0x15a74>
   26f0c:	ldr	r2, [sp, #60]	; 0x3c
   26f10:	mov	r0, r6
   26f14:	mov	r3, r5
   26f18:	bl	27dd0 <__assert_fail@plt+0x1691c>
   26f1c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   26f20:	cmp	r0, #0
   26f24:	bne	27b20 <__assert_fail@plt+0x1666c>
   26f28:	ldr	r9, [sp, #60]	; 0x3c
   26f2c:	cmp	r8, #0
   26f30:	ldrge	ip, [r9, #4]
   26f34:	cmpge	ip, #1
   26f38:	blt	270dc <__assert_fail@plt+0x15c28>
   26f3c:	mov	sl, #0
   26f40:	ldr	r1, [r9, #8]
   26f44:	ldr	r3, [r6, #28]
   26f48:	ldr	r1, [r1, sl, lsl #2]
   26f4c:	add	r2, r1, r1, lsl #1
   26f50:	add	r3, r3, r2, lsl #2
   26f54:	ldr	r7, [r3, #4]
   26f58:	cmp	r7, #1
   26f5c:	blt	26fc0 <__assert_fail@plt+0x15b0c>
   26f60:	ldr	r3, [r3, #8]
   26f64:	mov	lr, ip
   26f68:	subs	r6, r7, #1
   26f6c:	beq	26f9c <__assert_fail@plt+0x15ae8>
   26f70:	mov	r7, #0
   26f74:	mov	ip, #1
   26f78:	add	r0, r7, r6
   26f7c:	lsr	r4, r0, #1
   26f80:	ldr	r5, [r3, r4, lsl #2]
   26f84:	cmp	r5, r8
   26f88:	movge	r6, r4
   26f8c:	addlt	r7, ip, r0, lsr #1
   26f90:	cmp	r7, r6
   26f94:	bcc	26f78 <__assert_fail@plt+0x15ac4>
   26f98:	b	26fa0 <__assert_fail@plt+0x15aec>
   26f9c:	mov	r7, #0
   26fa0:	ldr	r0, [r3, r7, lsl #2]
   26fa4:	mov	ip, lr
   26fa8:	ldr	r4, [sp, #80]	; 0x50
   26fac:	ldr	r5, [sp, #68]	; 0x44
   26fb0:	ldr	r6, [sp, #76]	; 0x4c
   26fb4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   26fb8:	cmp	r0, r8
   26fbc:	beq	27050 <__assert_fail@plt+0x15b9c>
   26fc0:	ldr	r0, [r6, #24]
   26fc4:	add	r2, r0, r2, lsl #2
   26fc8:	ldr	r3, [r2, #4]
   26fcc:	cmp	r3, #1
   26fd0:	blt	27028 <__assert_fail@plt+0x15b74>
   26fd4:	ldr	r2, [r2, #8]
   26fd8:	subs	r7, r3, #1
   26fdc:	beq	2700c <__assert_fail@plt+0x15b58>
   26fe0:	mov	r3, #0
   26fe4:	mov	r4, #1
   26fe8:	add	r0, r3, r7
   26fec:	lsr	r6, r0, #1
   26ff0:	ldr	r5, [r2, r6, lsl #2]
   26ff4:	cmp	r5, r8
   26ff8:	movge	r7, r6
   26ffc:	addlt	r3, r4, r0, lsr #1
   27000:	cmp	r3, r7
   27004:	bcc	26fe8 <__assert_fail@plt+0x15b34>
   27008:	b	27010 <__assert_fail@plt+0x15b5c>
   2700c:	mov	r3, #0
   27010:	ldr	r0, [r2, r3, lsl #2]
   27014:	ldr	r4, [sp, #80]	; 0x50
   27018:	ldr	r5, [sp, #68]	; 0x44
   2701c:	ldr	r6, [sp, #76]	; 0x4c
   27020:	cmp	r0, r8
   27024:	beq	27050 <__assert_fail@plt+0x15b9c>
   27028:	mov	r0, r6
   2702c:	mov	r2, r9
   27030:	mov	r3, r5
   27034:	bl	27dd0 <__assert_fail@plt+0x1691c>
   27038:	cmp	r0, #0
   2703c:	bne	27b20 <__assert_fail@plt+0x1666c>
   27040:	ldr	ip, [r9, #4]
   27044:	ldr	lr, [fp, #-80]	; 0xffffffb0
   27048:	sub	sl, sl, #1
   2704c:	mov	r1, r9
   27050:	add	sl, sl, #1
   27054:	cmp	sl, ip
   27058:	blt	26f40 <__assert_fail@plt+0x15a8c>
   2705c:	b	270dc <__assert_fail@plt+0x15c28>
   27060:	cmp	r0, #1
   27064:	blt	270dc <__assert_fail@plt+0x15c28>
   27068:	mov	r7, #0
   2706c:	b	27074 <__assert_fail@plt+0x15bc0>
   27070:	ldr	r2, [r6]
   27074:	ldr	r1, [r9, #8]
   27078:	ldr	r1, [r1, r7, lsl #2]
   2707c:	add	r3, r2, r1, lsl #3
   27080:	ldr	r3, [r3, #4]
   27084:	and	r3, r3, #254	; 0xfe
   27088:	orr	r3, r3, #1
   2708c:	cmp	r3, #9
   27090:	ldreq	r2, [r2, r1, lsl #3]
   27094:	cmpeq	sl, r2
   27098:	beq	270ac <__assert_fail@plt+0x15bf8>
   2709c:	add	r7, r7, #1
   270a0:	cmp	r7, r0
   270a4:	blt	27070 <__assert_fail@plt+0x15bbc>
   270a8:	b	270dc <__assert_fail@plt+0x15c28>
   270ac:	mov	r0, r6
   270b0:	mov	r2, r9
   270b4:	mov	r3, r5
   270b8:	bl	27dd0 <__assert_fail@plt+0x1691c>
   270bc:	cmp	r0, #0
   270c0:	bne	27b20 <__assert_fail@plt+0x1666c>
   270c4:	ldr	r0, [r9, #4]
   270c8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   270cc:	mov	r1, r9
   270d0:	add	r7, r7, #1
   270d4:	cmp	r7, r0
   270d8:	blt	27070 <__assert_fail@plt+0x15bbc>
   270dc:	ldr	r1, [sp, #84]	; 0x54
   270e0:	ldr	r0, [r4, #20]
   270e4:	add	r1, r1, #1
   270e8:	cmp	r1, r0
   270ec:	blt	26e4c <__assert_fail@plt+0x15998>
   270f0:	ldr	r7, [sp, #56]	; 0x38
   270f4:	mov	r0, #0
   270f8:	str	r0, [fp, #-76]	; 0xffffffb4
   270fc:	sub	r0, fp, #76	; 0x4c
   27100:	mov	r1, r6
   27104:	mov	r2, r9
   27108:	bl	24070 <__assert_fail@plt+0x12bbc>
   2710c:	ldr	r1, [r4]
   27110:	ldr	r4, [fp, #-80]	; 0xffffffb0
   27114:	str	r0, [r1, r4, lsl #2]
   27118:	ldr	r0, [sp, #64]	; 0x40
   2711c:	ldr	r9, [fp, #-76]	; 0xffffffb4
   27120:	cmp	r9, #0
   27124:	bne	27af0 <__assert_fail@plt+0x1663c>
   27128:	cmp	r7, #0
   2712c:	bne	27148 <__assert_fail@plt+0x15c94>
   27130:	b	27b10 <__assert_fail@plt+0x1665c>
   27134:	ldr	r1, [r4]
   27138:	mov	r4, r2
   2713c:	str	r3, [r1, r2, lsl #2]
   27140:	cmp	r7, #0
   27144:	beq	27b10 <__assert_fail@plt+0x1665c>
   27148:	ldr	r1, [r0, #100]	; 0x64
   2714c:	ldr	r1, [r1, r4, lsl #2]
   27150:	ldrb	r1, [r1, #52]	; 0x34
   27154:	tst	r1, #64	; 0x40
   27158:	beq	27b10 <__assert_fail@plt+0x1665c>
   2715c:	ldr	lr, [r0, #108]	; 0x6c
   27160:	ldr	r8, [r0, #84]	; 0x54
   27164:	cmp	lr, #1
   27168:	blt	27afc <__assert_fail@plt+0x16648>
   2716c:	ldr	r1, [r0, #116]	; 0x74
   27170:	mov	ip, #0
   27174:	mov	r2, #1
   27178:	mov	r3, lr
   2717c:	add	r7, r3, ip
   27180:	add	r7, r7, r7, lsr #31
   27184:	asr	r6, r7, #1
   27188:	add	r5, r6, r6, lsl #1
   2718c:	add	r5, r1, r5, lsl #3
   27190:	ldr	r5, [r5, #4]
   27194:	cmp	r5, r4
   27198:	addlt	ip, r2, r7, asr #1
   2719c:	movge	r3, r6
   271a0:	cmp	ip, r3
   271a4:	blt	2717c <__assert_fail@plt+0x15cc8>
   271a8:	cmp	ip, lr
   271ac:	bge	27b08 <__assert_fail@plt+0x16654>
   271b0:	cmn	ip, #1
   271b4:	beq	27b08 <__assert_fail@plt+0x16654>
   271b8:	ldr	r2, [r0, #116]	; 0x74
   271bc:	add	r1, ip, ip, lsl #1
   271c0:	str	r1, [sp, #20]
   271c4:	add	r1, r2, r1, lsl #3
   271c8:	ldr	r1, [r1, #4]
   271cc:	cmp	r1, r4
   271d0:	bne	27b08 <__assert_fail@plt+0x16654>
   271d4:	ldr	r1, [sp, #68]	; 0x44
   271d8:	mov	r2, #0
   271dc:	str	r2, [fp, #-72]	; 0xffffffb8
   271e0:	ldr	r3, [r1, #4]
   271e4:	cmp	r3, #0
   271e8:	ble	27b34 <__assert_fail@plt+0x16680>
   271ec:	sub	r0, fp, #72	; 0x48
   271f0:	ldr	r5, [sp, #80]	; 0x50
   271f4:	mov	r9, #1
   271f8:	mov	lr, #0
   271fc:	mov	r7, r8
   27200:	str	r8, [sp, #60]	; 0x3c
   27204:	str	ip, [sp, #24]
   27208:	add	r0, r0, #16
   2720c:	str	r0, [sp, #8]
   27210:	mov	r0, #0
   27214:	str	r0, [sp, #32]
   27218:	ldr	r0, [r1, #8]
   2721c:	ldr	r1, [r5, #8]
   27220:	str	sl, [sp, #48]	; 0x30
   27224:	ldr	r8, [r0, lr, lsl #2]
   27228:	ldr	r0, [r7]
   2722c:	add	r0, r0, r8, lsl #3
   27230:	cmp	r8, r1
   27234:	ldrb	r0, [r0, #4]
   27238:	bne	27254 <__assert_fail@plt+0x15da0>
   2723c:	cmp	r0, #4
   27240:	bne	27ab0 <__assert_fail@plt+0x165fc>
   27244:	ldr	r0, [r5, #12]
   27248:	cmp	r0, r4
   2724c:	bne	2725c <__assert_fail@plt+0x15da8>
   27250:	b	27ab0 <__assert_fail@plt+0x165fc>
   27254:	cmp	r0, #4
   27258:	bne	27ab0 <__assert_fail@plt+0x165fc>
   2725c:	ldr	r0, [sp, #64]	; 0x40
   27260:	ldr	r1, [sp, #20]
   27264:	mov	r4, ip
   27268:	str	lr, [sp, #36]	; 0x24
   2726c:	str	r8, [sp, #56]	; 0x38
   27270:	ldr	r0, [r0, #116]	; 0x74
   27274:	add	sl, r0, r1, lsl #3
   27278:	b	27924 <__assert_fail@plt+0x16470>
   2727c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   27280:	mov	r9, #0
   27284:	cmp	r9, r0
   27288:	blt	27a20 <__assert_fail@plt+0x1656c>
   2728c:	mvn	r9, #0
   27290:	cmp	r0, #1
   27294:	blt	27a40 <__assert_fail@plt+0x1658c>
   27298:	ldr	r1, [r7, #116]	; 0x74
   2729c:	ldr	r4, [sp, #84]	; 0x54
   272a0:	mov	r8, #0
   272a4:	mov	r2, r0
   272a8:	mov	lr, #1
   272ac:	add	r3, r2, r8
   272b0:	add	r3, r3, r3, lsr #31
   272b4:	asr	r6, r3, #1
   272b8:	add	r5, r6, r6, lsl #1
   272bc:	add	r5, r1, r5, lsl #3
   272c0:	ldr	r5, [r5, #4]
   272c4:	cmp	r5, r4
   272c8:	addlt	r8, lr, r3, asr #1
   272cc:	movge	r2, r6
   272d0:	cmp	r8, r2
   272d4:	blt	272ac <__assert_fail@plt+0x15df8>
   272d8:	ldr	lr, [sp, #64]	; 0x40
   272dc:	cmp	r8, r0
   272e0:	bge	27a54 <__assert_fail@plt+0x165a0>
   272e4:	ldr	r0, [lr, #116]	; 0x74
   272e8:	add	r1, r8, r8, lsl #1
   272ec:	add	r0, r0, r1, lsl #3
   272f0:	ldr	r0, [r0, #4]
   272f4:	cmp	r0, r4
   272f8:	mvnne	r8, #0
   272fc:	ldr	r5, [sp, #80]	; 0x50
   27300:	ldr	r4, [r5, #20]
   27304:	cmp	r4, #1
   27308:	blt	27480 <__assert_fail@plt+0x15fcc>
   2730c:	ldr	ip, [lr, #84]	; 0x54
   27310:	mov	r6, #0
   27314:	str	ip, [sp, #52]	; 0x34
   27318:	ldr	r0, [r5, #24]
   2731c:	ldr	r3, [lr, #116]	; 0x74
   27320:	ldr	r4, [ip]
   27324:	ldr	r7, [fp, #-80]	; 0xffffffb0
   27328:	ldr	r2, [r0, r6, lsl #2]
   2732c:	mov	r0, r3
   27330:	add	r1, r2, r2, lsl #1
   27334:	ldr	r5, [r0, r1, lsl #3]!
   27338:	ldr	r0, [r0, #8]
   2733c:	ldr	r4, [r4, r5, lsl #3]
   27340:	mvn	r5, #0
   27344:	cmp	r0, r7
   27348:	str	r4, [sp, #76]	; 0x4c
   2734c:	ble	27364 <__assert_fail@plt+0x15eb0>
   27350:	mvn	r4, #0
   27354:	ldr	r7, [sp, #84]	; 0x54
   27358:	cmp	r0, r7
   2735c:	ble	273e4 <__assert_fail@plt+0x15f30>
   27360:	b	27464 <__assert_fail@plt+0x15fb0>
   27364:	add	r1, r3, r1, lsl #3
   27368:	mov	r4, #1
   2736c:	ldr	r1, [r1, #12]
   27370:	cmp	r1, r7
   27374:	blt	273d8 <__assert_fail@plt+0x15f24>
   27378:	sub	r1, r1, r7
   2737c:	cmp	r0, r7
   27380:	mov	r7, #1
   27384:	clz	r1, r1
   27388:	lsr	r4, r1, #5
   2738c:	lsl	r1, r4, #1
   27390:	orreq	r1, r7, r4, lsl #1
   27394:	cmp	r1, #0
   27398:	beq	2744c <__assert_fail@plt+0x15f98>
   2739c:	ldr	r2, [sp, #76]	; 0x4c
   273a0:	ldr	r3, [sp, #56]	; 0x38
   273a4:	mov	r0, lr
   273a8:	str	r9, [sp]
   273ac:	bl	28210 <__assert_fail@plt+0x16d5c>
   273b0:	mov	r4, r0
   273b4:	ldr	r0, [sp, #80]	; 0x50
   273b8:	ldr	lr, [sp, #64]	; 0x40
   273bc:	ldr	ip, [sp, #52]	; 0x34
   273c0:	ldr	r0, [r0, #24]
   273c4:	ldr	r3, [lr, #116]	; 0x74
   273c8:	ldr	r2, [r0, r6, lsl #2]
   273cc:	add	r0, r2, r2, lsl #1
   273d0:	add	r0, r3, r0, lsl #3
   273d4:	ldr	r0, [r0, #8]
   273d8:	ldr	r7, [sp, #84]	; 0x54
   273dc:	cmp	r0, r7
   273e0:	bgt	27464 <__assert_fail@plt+0x15fb0>
   273e4:	add	r1, r2, r2, lsl #1
   273e8:	mov	r5, #1
   273ec:	add	r1, r3, r1, lsl #3
   273f0:	ldr	r1, [r1, #12]
   273f4:	cmp	r1, r7
   273f8:	blt	27464 <__assert_fail@plt+0x15fb0>
   273fc:	sub	r1, r1, r7
   27400:	cmp	r0, r7
   27404:	mov	r0, #1
   27408:	clz	r1, r1
   2740c:	lsr	r2, r1, #5
   27410:	lsl	r1, r2, #1
   27414:	orreq	r1, r0, r2, lsl #1
   27418:	cmp	r1, #0
   2741c:	beq	27460 <__assert_fail@plt+0x15fac>
   27420:	ldr	r2, [sp, #76]	; 0x4c
   27424:	ldr	r3, [sp, #44]	; 0x2c
   27428:	mov	r0, lr
   2742c:	str	r8, [sp]
   27430:	bl	28210 <__assert_fail@plt+0x16d5c>
   27434:	ldr	ip, [sp, #52]	; 0x34
   27438:	ldr	lr, [sp, #64]	; 0x40
   2743c:	mov	r5, r0
   27440:	cmp	r5, r4
   27444:	beq	2746c <__assert_fail@plt+0x15fb8>
   27448:	b	274dc <__assert_fail@plt+0x16028>
   2744c:	mov	r4, #0
   27450:	ldr	r7, [sp, #84]	; 0x54
   27454:	cmp	r0, r7
   27458:	ble	273e4 <__assert_fail@plt+0x15f30>
   2745c:	b	27464 <__assert_fail@plt+0x15fb0>
   27460:	mov	r5, #0
   27464:	cmp	r5, r4
   27468:	bne	274dc <__assert_fail@plt+0x16028>
   2746c:	ldr	r5, [sp, #80]	; 0x50
   27470:	add	r6, r6, #1
   27474:	ldr	r4, [r5, #20]
   27478:	cmp	r6, r4
   2747c:	blt	27318 <__assert_fail@plt+0x15e64>
   27480:	ldr	r0, [sp, #32]
   27484:	cmp	r0, #0
   27488:	beq	27500 <__assert_fail@plt+0x1604c>
   2748c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   27490:	mov	r2, #1
   27494:	str	r0, [fp, #-60]	; 0xffffffc4
   27498:	ldr	r0, [sp, #56]	; 0x38
   2749c:	str	r0, [fp, #-64]	; 0xffffffc0
   274a0:	ldr	r0, [sp, #16]
   274a4:	cmp	r0, #0
   274a8:	beq	2761c <__assert_fail@plt+0x16168>
   274ac:	ldr	r4, [sp, #40]	; 0x28
   274b0:	cmp	r4, #0
   274b4:	bne	2790c <__assert_fail@plt+0x16458>
   274b8:	ldr	sl, [sp, #48]	; 0x30
   274bc:	ldr	r0, [sp, #72]	; 0x48
   274c0:	mov	r1, #1
   274c4:	str	r0, [sl]
   274c8:	mov	r0, #1
   274cc:	str	r1, [fp, #-52]	; 0xffffffcc
   274d0:	str	sl, [sp, #28]
   274d4:	str	r0, [sp, #40]	; 0x28
   274d8:	b	276b8 <__assert_fail@plt+0x16204>
   274dc:	ldr	r5, [sp, #80]	; 0x50
   274e0:	ldr	r7, [sp, #60]	; 0x3c
   274e4:	ldr	ip, [sp, #24]
   274e8:	ldr	lr, [sp, #36]	; 0x24
   274ec:	ldr	r8, [sp, #56]	; 0x38
   274f0:	ldr	r4, [sp, #72]	; 0x48
   274f4:	mov	r0, sl
   274f8:	mov	r9, #1
   274fc:	b	27a9c <__assert_fail@plt+0x165e8>
   27500:	mov	r0, r5
   27504:	mov	r1, #12
   27508:	cmp	r4, #1
   2750c:	mov	r2, #1
   27510:	vld1.32	{d16-d17}, [r0], r1
   27514:	sub	r1, fp, #72	; 0x48
   27518:	vld1.32	{d18-d19}, [r0]
   2751c:	add	r0, r1, #12
   27520:	vst1.32	{d18-d19}, [r0]
   27524:	mov	r0, r1
   27528:	mov	r1, #20
   2752c:	vst1.64	{d16-d17}, [r0], r1
   27530:	str	r4, [r0]
   27534:	blt	275f8 <__assert_fail@plt+0x16144>
   27538:	lsl	r0, r4, #2
   2753c:	str	r4, [fp, #-56]	; 0xffffffc8
   27540:	bl	2ac60 <__assert_fail@plt+0x197ac>
   27544:	cmp	r0, #0
   27548:	str	r0, [fp, #-48]	; 0xffffffd0
   2754c:	beq	27b80 <__assert_fail@plt+0x166cc>
   27550:	mov	r6, r0
   27554:	ldr	r0, [r5, #20]
   27558:	ldr	r1, [r5, #24]
   2755c:	lsl	r2, r0, #2
   27560:	mov	r0, r6
   27564:	bl	1125c <memcpy@plt>
   27568:	ldr	r0, [sp, #56]	; 0x38
   2756c:	mov	sl, r6
   27570:	str	r0, [fp, #-64]	; 0xffffffc0
   27574:	ldr	r0, [fp, #-80]	; 0xffffffb0
   27578:	str	r0, [fp, #-60]	; 0xffffffc4
   2757c:	lsl	r0, r4, #1
   27580:	lsl	r1, r4, #3
   27584:	str	r0, [sp, #16]
   27588:	str	r0, [fp, #-56]	; 0xffffffc8
   2758c:	mov	r0, r6
   27590:	bl	2ac90 <__assert_fail@plt+0x197dc>
   27594:	cmp	r0, #0
   27598:	beq	27ba0 <__assert_fail@plt+0x166ec>
   2759c:	mov	sl, r0
   275a0:	mov	r6, r0
   275a4:	str	r0, [fp, #-48]	; 0xffffffd0
   275a8:	str	r0, [sp, #12]
   275ac:	ldr	r0, [sl]
   275b0:	ldr	r2, [sp, #72]	; 0x48
   275b4:	cmp	r0, r2
   275b8:	ble	27664 <__assert_fail@plt+0x161b0>
   275bc:	ldr	lr, [sp, #64]	; 0x40
   275c0:	cmp	r4, #1
   275c4:	mov	r2, r4
   275c8:	blt	276a0 <__assert_fail@plt+0x161ec>
   275cc:	add	r1, sl, r4, lsl #2
   275d0:	add	r0, r4, #1
   275d4:	mov	r2, r1
   275d8:	ldr	r3, [r2, #-4]!
   275dc:	sub	r0, r0, #1
   275e0:	cmp	r0, #1
   275e4:	str	r3, [r1]
   275e8:	mov	r1, r2
   275ec:	bgt	275d8 <__assert_fail@plt+0x16124>
   275f0:	sub	r2, r0, #1
   275f4:	b	276a0 <__assert_fail@plt+0x161ec>
   275f8:	ldr	r1, [sp, #8]
   275fc:	mov	r0, #0
   27600:	str	r0, [r1]
   27604:	str	r0, [r1, #4]
   27608:	str	r0, [r1, #8]
   2760c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   27610:	str	r0, [fp, #-60]	; 0xffffffc4
   27614:	ldr	r0, [sp, #56]	; 0x38
   27618:	str	r0, [fp, #-64]	; 0xffffffc0
   2761c:	mov	r0, #4
   27620:	str	r2, [fp, #-52]	; 0xffffffcc
   27624:	str	r2, [fp, #-56]	; 0xffffffc8
   27628:	bl	2ac60 <__assert_fail@plt+0x197ac>
   2762c:	cmp	r0, #0
   27630:	str	r0, [fp, #-48]	; 0xffffffd0
   27634:	beq	27b80 <__assert_fail@plt+0x166cc>
   27638:	mov	sl, r0
   2763c:	ldr	r0, [sp, #72]	; 0x48
   27640:	ldr	lr, [sp, #64]	; 0x40
   27644:	str	sl, [sp, #12]
   27648:	str	sl, [sp, #28]
   2764c:	str	r0, [sl]
   27650:	mov	r0, #1
   27654:	str	r0, [sp, #40]	; 0x28
   27658:	mov	r0, #1
   2765c:	str	r0, [sp, #16]
   27660:	b	276b8 <__assert_fail@plt+0x16204>
   27664:	add	r0, sl, r4, lsl #2
   27668:	ldr	lr, [sp, #64]	; 0x40
   2766c:	ldr	r1, [r0, #-4]
   27670:	cmp	r1, r2
   27674:	mov	r2, r4
   27678:	ble	276a0 <__assert_fail@plt+0x161ec>
   2767c:	ldr	r3, [sp, #72]	; 0x48
   27680:	sub	r2, r4, #2
   27684:	str	r1, [r0]
   27688:	sub	r2, r2, #1
   2768c:	ldr	r1, [r0, #-8]
   27690:	sub	r0, r0, #4
   27694:	cmp	r1, r3
   27698:	bgt	27684 <__assert_fail@plt+0x161d0>
   2769c:	add	r2, r2, #2
   276a0:	ldr	r0, [sp, #72]	; 0x48
   276a4:	add	r4, r4, #1
   276a8:	str	r6, [sp, #28]
   276ac:	str	r4, [sp, #40]	; 0x28
   276b0:	str	r0, [sl, r2, lsl #2]
   276b4:	str	r4, [fp, #-52]	; 0xffffffcc
   276b8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   276bc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   276c0:	ldr	r6, [r1, r0, lsl #2]
   276c4:	mov	r8, r1
   276c8:	mov	r0, lr
   276cc:	sub	r1, fp, #72	; 0x48
   276d0:	bl	265e0 <__assert_fail@plt+0x1512c>
   276d4:	cmp	r0, #0
   276d8:	bne	27b5c <__assert_fail@plt+0x166a8>
   276dc:	ldr	r5, [r5, #4]
   276e0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   276e4:	ldr	r4, [sp, #72]	; 0x48
   276e8:	mov	r7, r8
   276ec:	cmp	r5, #0
   276f0:	beq	277a0 <__assert_fail@plt+0x162ec>
   276f4:	mov	r3, r0
   276f8:	cmp	r0, #0
   276fc:	str	r6, [sp, #84]	; 0x54
   27700:	blt	27798 <__assert_fail@plt+0x162e4>
   27704:	mov	r0, #0
   27708:	mov	r6, r0
   2770c:	ldr	r0, [r7, r0, lsl #2]
   27710:	ldr	r1, [r5, r6, lsl #2]
   27714:	cmp	r1, #0
   27718:	beq	27788 <__assert_fail@plt+0x162d4>
   2771c:	cmp	r0, #0
   27720:	beq	27778 <__assert_fail@plt+0x162c4>
   27724:	sub	r4, fp, #44	; 0x2c
   27728:	add	r2, r0, #4
   2772c:	add	r1, r1, #4
   27730:	mov	r0, r4
   27734:	bl	229fc <__assert_fail@plt+0x11548>
   27738:	cmp	r0, #0
   2773c:	str	r0, [fp, #-32]	; 0xffffffe0
   27740:	bne	27b5c <__assert_fail@plt+0x166a8>
   27744:	ldr	r1, [sp, #60]	; 0x3c
   27748:	sub	r0, fp, #32
   2774c:	mov	r2, r4
   27750:	bl	24070 <__assert_fail@plt+0x12bbc>
   27754:	str	r0, [r5, r6, lsl #2]
   27758:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2775c:	bl	2ae28 <__assert_fail@plt+0x19974>
   27760:	ldr	r9, [fp, #-32]	; 0xffffffe0
   27764:	ldr	r3, [fp, #-80]	; 0xffffffb0
   27768:	ldr	r4, [sp, #72]	; 0x48
   2776c:	mov	r7, r8
   27770:	cmp	r9, #0
   27774:	bne	27ad0 <__assert_fail@plt+0x1661c>
   27778:	add	r0, r6, #1
   2777c:	cmp	r6, r3
   27780:	blt	27708 <__assert_fail@plt+0x16254>
   27784:	b	27798 <__assert_fail@plt+0x162e4>
   27788:	str	r0, [r5, r6, lsl #2]
   2778c:	add	r0, r6, #1
   27790:	cmp	r6, r3
   27794:	blt	27708 <__assert_fail@plt+0x16254>
   27798:	ldr	r6, [sp, #84]	; 0x54
   2779c:	mov	r0, r3
   277a0:	str	r6, [r7, r0, lsl #2]
   277a4:	ldr	r0, [sp, #40]	; 0x28
   277a8:	str	r7, [sp, #32]
   277ac:	str	sl, [sp, #48]	; 0x30
   277b0:	cmp	r0, #1
   277b4:	blt	27848 <__assert_fail@plt+0x16394>
   277b8:	ldr	r5, [sp, #80]	; 0x50
   277bc:	ldr	ip, [sp, #24]
   277c0:	ldr	r8, [sp, #56]	; 0x38
   277c4:	subs	r0, r0, #1
   277c8:	mov	r9, #1
   277cc:	mov	r1, #0
   277d0:	beq	277f8 <__assert_fail@plt+0x16344>
   277d4:	mov	r2, r0
   277d8:	add	r3, r1, r2
   277dc:	lsr	r7, r3, #1
   277e0:	ldr	r6, [sl, r7, lsl #2]
   277e4:	cmp	r6, r4
   277e8:	movge	r2, r7
   277ec:	addlt	r1, r9, r3, lsr #1
   277f0:	cmp	r1, r2
   277f4:	bcc	277d8 <__assert_fail@plt+0x16324>
   277f8:	ldr	r2, [sl, r1, lsl #2]
   277fc:	cmp	r2, r4
   27800:	mov	r2, r1
   27804:	mvnne	r2, #0
   27808:	cmp	r2, #0
   2780c:	blt	27864 <__assert_fail@plt+0x163b0>
   27810:	ldr	r3, [sp, #40]	; 0x28
   27814:	ldr	r7, [sp, #60]	; 0x3c
   27818:	cmp	r3, r2
   2781c:	ble	27874 <__assert_fail@plt+0x163c0>
   27820:	cmp	r0, r2
   27824:	str	r0, [fp, #-52]	; 0xffffffcc
   27828:	ble	27880 <__assert_fail@plt+0x163cc>
   2782c:	ldr	r3, [sp, #40]	; 0x28
   27830:	mvn	r2, r1
   27834:	add	r3, r3, r2
   27838:	cmp	r3, #4
   2783c:	bcs	2788c <__assert_fail@plt+0x163d8>
   27840:	mov	r2, r1
   27844:	b	278e4 <__assert_fail@plt+0x16430>
   27848:	ldr	r5, [sp, #80]	; 0x50
   2784c:	ldr	ip, [sp, #24]
   27850:	ldr	lr, [sp, #36]	; 0x24
   27854:	ldr	r8, [sp, #56]	; 0x38
   27858:	ldr	r7, [sp, #60]	; 0x3c
   2785c:	mov	r9, #1
   27860:	b	278d0 <__assert_fail@plt+0x1641c>
   27864:	ldr	r0, [sp, #12]
   27868:	ldr	r7, [sp, #60]	; 0x3c
   2786c:	str	r0, [sp, #28]
   27870:	b	278cc <__assert_fail@plt+0x16418>
   27874:	ldr	r0, [sp, #12]
   27878:	str	r0, [sp, #28]
   2787c:	b	278cc <__assert_fail@plt+0x16418>
   27880:	ldr	r1, [sp, #12]
   27884:	str	r1, [sp, #28]
   27888:	b	278c8 <__assert_fail@plt+0x16414>
   2788c:	bic	r6, r3, #3
   27890:	add	r2, r1, r6
   27894:	add	r1, sl, r1, lsl #2
   27898:	mov	r7, r6
   2789c:	add	r1, r1, #4
   278a0:	sub	r5, r1, #4
   278a4:	vld1.32	{d16-d17}, [r1]!
   278a8:	subs	r7, r7, #4
   278ac:	vst1.32	{d16-d17}, [r5]
   278b0:	bne	278a0 <__assert_fail@plt+0x163ec>
   278b4:	ldr	r5, [sp, #80]	; 0x50
   278b8:	ldr	r7, [sp, #60]	; 0x3c
   278bc:	cmp	r3, r6
   278c0:	bne	278e4 <__assert_fail@plt+0x16430>
   278c4:	str	sl, [sp, #28]
   278c8:	str	r0, [sp, #40]	; 0x28
   278cc:	ldr	lr, [sp, #36]	; 0x24
   278d0:	ldr	r0, [sp, #64]	; 0x40
   278d4:	add	r1, r4, r4, lsl #1
   278d8:	ldr	r0, [r0, #116]	; 0x74
   278dc:	add	r0, r0, r1, lsl #3
   278e0:	b	27a9c <__assert_fail@plt+0x165e8>
   278e4:	ldr	lr, [sp, #36]	; 0x24
   278e8:	add	r1, sl, r2, lsl #2
   278ec:	ldr	r1, [r1, #4]
   278f0:	str	r1, [sl, r2, lsl #2]
   278f4:	add	r2, r2, #1
   278f8:	cmp	r0, r2
   278fc:	bne	278e8 <__assert_fail@plt+0x16434>
   27900:	str	sl, [sp, #28]
   27904:	str	r0, [sp, #40]	; 0x28
   27908:	b	278d0 <__assert_fail@plt+0x1641c>
   2790c:	ldr	r0, [sp, #16]
   27910:	ldr	sl, [sp, #48]	; 0x30
   27914:	ldr	r6, [sp, #28]
   27918:	cmp	r0, r4
   2791c:	beq	2757c <__assert_fail@plt+0x160c8>
   27920:	b	275ac <__assert_fail@plt+0x160f8>
   27924:	ldr	r0, [sl]
   27928:	cmp	r0, r8
   2792c:	bne	27a98 <__assert_fail@plt+0x165e4>
   27930:	ldr	r0, [sl, #8]
   27934:	ldr	r1, [sl, #12]
   27938:	subs	r0, r1, r0
   2793c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   27940:	add	r0, r0, r1
   27944:	str	r0, [sp, #84]	; 0x54
   27948:	beq	27a6c <__assert_fail@plt+0x165b8>
   2794c:	ldr	r0, [r7, #12]
   27950:	add	r0, r0, r8, lsl #2
   27954:	ldr	r1, [r5, #12]
   27958:	ldr	r2, [sp, #84]	; 0x54
   2795c:	cmp	r2, r1
   27960:	bgt	27a98 <__assert_fail@plt+0x165e4>
   27964:	ldr	r1, [r5]
   27968:	ldr	r1, [r1, r2, lsl #2]
   2796c:	cmp	r1, #0
   27970:	beq	27a98 <__assert_fail@plt+0x165e4>
   27974:	ldr	r2, [r1, #8]
   27978:	cmp	r2, #1
   2797c:	blt	27a98 <__assert_fail@plt+0x165e4>
   27980:	ldr	r7, [r0]
   27984:	ldr	r0, [r1, #12]
   27988:	subs	r2, r2, #1
   2798c:	mov	r1, #0
   27990:	beq	279b4 <__assert_fail@plt+0x16500>
   27994:	add	r3, r1, r2
   27998:	lsr	r6, r3, #1
   2799c:	ldr	r5, [r0, r6, lsl #2]
   279a0:	cmp	r5, r7
   279a4:	movge	r2, r6
   279a8:	addlt	r1, r9, r3, lsr #1
   279ac:	cmp	r1, r2
   279b0:	bcc	27994 <__assert_fail@plt+0x164e0>
   279b4:	ldr	r0, [r0, r1, lsl #2]
   279b8:	cmp	r0, r7
   279bc:	bne	27a90 <__assert_fail@plt+0x165dc>
   279c0:	str	r7, [sp, #44]	; 0x2c
   279c4:	ldr	r7, [sp, #64]	; 0x40
   279c8:	str	r4, [sp, #72]	; 0x48
   279cc:	ldr	r0, [r7, #108]	; 0x6c
   279d0:	cmp	r0, #1
   279d4:	blt	2727c <__assert_fail@plt+0x15dc8>
   279d8:	ldr	r1, [r7, #116]	; 0x74
   279dc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   279e0:	mov	r9, #0
   279e4:	mov	r2, r0
   279e8:	mov	r8, #1
   279ec:	add	r3, r2, r9
   279f0:	add	r3, r3, r3, lsr #31
   279f4:	asr	r6, r3, #1
   279f8:	add	r5, r6, r6, lsl #1
   279fc:	add	r5, r1, r5, lsl #3
   27a00:	ldr	r5, [r5, #4]
   27a04:	cmp	r5, r4
   27a08:	addlt	r9, r8, r3, asr #1
   27a0c:	movge	r2, r6
   27a10:	cmp	r9, r2
   27a14:	blt	279ec <__assert_fail@plt+0x16538>
   27a18:	cmp	r9, r0
   27a1c:	bge	2728c <__assert_fail@plt+0x15dd8>
   27a20:	ldr	r1, [r7, #116]	; 0x74
   27a24:	add	r2, r9, r9, lsl #1
   27a28:	add	r1, r1, r2, lsl #3
   27a2c:	ldr	r1, [r1, #4]
   27a30:	cmp	r1, r4
   27a34:	mvnne	r9, #0
   27a38:	cmp	r0, #1
   27a3c:	bge	27298 <__assert_fail@plt+0x15de4>
   27a40:	ldr	r4, [sp, #84]	; 0x54
   27a44:	mov	r8, #0
   27a48:	ldr	lr, [sp, #64]	; 0x40
   27a4c:	cmp	r8, r0
   27a50:	blt	272e4 <__assert_fail@plt+0x15e30>
   27a54:	mvn	r8, #0
   27a58:	ldr	r5, [sp, #80]	; 0x50
   27a5c:	ldr	r4, [r5, #20]
   27a60:	cmp	r4, #1
   27a64:	bge	2730c <__assert_fail@plt+0x15e58>
   27a68:	b	27480 <__assert_fail@plt+0x15fcc>
   27a6c:	ldr	r0, [r7, #20]
   27a70:	add	r1, r8, r8, lsl #1
   27a74:	add	r0, r0, r1, lsl #2
   27a78:	ldr	r0, [r0, #8]
   27a7c:	ldr	r1, [r5, #12]
   27a80:	ldr	r2, [sp, #84]	; 0x54
   27a84:	cmp	r2, r1
   27a88:	bgt	27a98 <__assert_fail@plt+0x165e4>
   27a8c:	b	27964 <__assert_fail@plt+0x164b0>
   27a90:	ldr	r5, [sp, #80]	; 0x50
   27a94:	ldr	r7, [sp, #60]	; 0x3c
   27a98:	mov	r0, sl
   27a9c:	add	sl, r0, #24
   27aa0:	ldrb	r0, [r0, #20]
   27aa4:	add	r4, r4, #1
   27aa8:	cmp	r0, #0
   27aac:	bne	27924 <__assert_fail@plt+0x16470>
   27ab0:	ldr	r1, [sp, #68]	; 0x44
   27ab4:	ldr	sl, [sp, #48]	; 0x30
   27ab8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   27abc:	add	lr, lr, #1
   27ac0:	ldr	r0, [r1, #4]
   27ac4:	cmp	lr, r0
   27ac8:	blt	27218 <__assert_fail@plt+0x15d64>
   27acc:	mov	r9, #0
   27ad0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   27ad4:	cmp	r0, #0
   27ad8:	beq	27ae4 <__assert_fail@plt+0x16630>
   27adc:	mov	r0, sl
   27ae0:	bl	2ae28 <__assert_fail@plt+0x19974>
   27ae4:	cmp	r9, #0
   27ae8:	str	r9, [fp, #-76]	; 0xffffffb4
   27aec:	moveq	r9, #0
   27af0:	mov	r0, r9
   27af4:	sub	sp, fp, #28
   27af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27afc:	mov	ip, #0
   27b00:	cmp	ip, lr
   27b04:	blt	271b0 <__assert_fail@plt+0x15cfc>
   27b08:	mov	r0, #0
   27b0c:	str	r0, [fp, #-76]	; 0xffffffb4
   27b10:	mov	r9, #0
   27b14:	mov	r0, r9
   27b18:	sub	sp, fp, #28
   27b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b20:	mov	r9, r0
   27b24:	str	r0, [fp, #-76]	; 0xffffffb4
   27b28:	mov	r0, r9
   27b2c:	sub	sp, fp, #28
   27b30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b34:	str	r2, [fp, #-76]	; 0xffffffb4
   27b38:	mov	r9, #0
   27b3c:	mov	r0, r9
   27b40:	sub	sp, fp, #28
   27b44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b48:	str	r0, [fp, #-72]	; 0xffffffb8
   27b4c:	str	r9, [fp, #-76]	; 0xffffffb4
   27b50:	mov	r0, r9
   27b54:	sub	sp, fp, #28
   27b58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b5c:	mov	r9, r0
   27b60:	ldr	r0, [fp, #-72]	; 0xffffffb8
   27b64:	cmp	r0, #0
   27b68:	bne	27adc <__assert_fail@plt+0x16628>
   27b6c:	b	27ae4 <__assert_fail@plt+0x16630>
   27b70:	mov	r9, r0
   27b74:	mov	r0, r9
   27b78:	sub	sp, fp, #28
   27b7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b80:	mov	sl, #0
   27b84:	mov	r9, #12
   27b88:	str	sl, [fp, #-56]	; 0xffffffc8
   27b8c:	str	sl, [fp, #-52]	; 0xffffffcc
   27b90:	ldr	r0, [fp, #-72]	; 0xffffffb8
   27b94:	cmp	r0, #0
   27b98:	bne	27adc <__assert_fail@plt+0x16628>
   27b9c:	b	27ae4 <__assert_fail@plt+0x16630>
   27ba0:	mov	r9, #12
   27ba4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   27ba8:	cmp	r0, #0
   27bac:	bne	27adc <__assert_fail@plt+0x16628>
   27bb0:	b	27ae4 <__assert_fail@plt+0x16630>
   27bb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27bb8:	add	fp, sp, #28
   27bbc:	sub	sp, sp, #12
   27bc0:	ldr	ip, [r1, #4]
   27bc4:	mov	sl, r0
   27bc8:	mov	r0, #0
   27bcc:	cmp	ip, #0
   27bd0:	ldrne	lr, [r2, #4]
   27bd4:	cmpne	lr, #0
   27bd8:	bne	27be4 <__assert_fail@plt+0x16730>
   27bdc:	sub	sp, fp, #28
   27be0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27be4:	mov	r7, r1
   27be8:	ldr	r1, [sl, #4]
   27bec:	ldr	r6, [sl]
   27bf0:	add	r3, lr, ip
   27bf4:	add	r4, r1, r3
   27bf8:	cmp	r4, r6
   27bfc:	ble	27c40 <__assert_fail@plt+0x1678c>
   27c00:	mov	r5, r2
   27c04:	mov	r2, sl
   27c08:	add	r4, r6, r3
   27c0c:	ldr	r0, [r2, #8]!
   27c10:	lsl	r1, r4, #2
   27c14:	str	r2, [sp, #8]
   27c18:	bl	2ac90 <__assert_fail@plt+0x197dc>
   27c1c:	cmp	r0, #0
   27c20:	beq	27dc4 <__assert_fail@plt+0x16910>
   27c24:	str	r4, [sl]
   27c28:	str	r0, [sl, #8]
   27c2c:	mov	r2, r5
   27c30:	ldr	r1, [sl, #4]
   27c34:	ldr	lr, [r5, #4]
   27c38:	ldr	ip, [r7, #4]
   27c3c:	b	27c48 <__assert_fail@plt+0x16794>
   27c40:	add	r0, sl, #8
   27c44:	str	r0, [sp, #8]
   27c48:	str	r2, [sp, #4]
   27c4c:	ldr	r2, [r2, #8]
   27c50:	ldr	r4, [r7, #8]
   27c54:	add	r3, ip, r1
   27c58:	sub	r8, r1, #1
   27c5c:	add	r9, r3, lr
   27c60:	sub	ip, ip, #1
   27c64:	sub	r3, lr, #1
   27c68:	ldr	r1, [r2, r3, lsl #2]
   27c6c:	ldr	r6, [r4, ip, lsl #2]
   27c70:	cmp	r6, r1
   27c74:	beq	27ca0 <__assert_fail@plt+0x167ec>
   27c78:	blt	27c90 <__assert_fail@plt+0x167dc>
   27c7c:	sub	r5, ip, #1
   27c80:	cmp	ip, #0
   27c84:	mov	ip, r5
   27c88:	bgt	27c6c <__assert_fail@plt+0x167b8>
   27c8c:	b	27d1c <__assert_fail@plt+0x16868>
   27c90:	cmp	lr, #2
   27c94:	mov	lr, r3
   27c98:	bge	27c64 <__assert_fail@plt+0x167b0>
   27c9c:	b	27d1c <__assert_fail@plt+0x16868>
   27ca0:	mov	r0, r9
   27ca4:	cmp	r8, #0
   27ca8:	blt	27cf4 <__assert_fail@plt+0x16840>
   27cac:	ldr	r1, [sp, #8]
   27cb0:	ldr	r9, [r1]
   27cb4:	mov	r1, r8
   27cb8:	ldr	r5, [r9, r1, lsl #2]
   27cbc:	cmp	r5, r6
   27cc0:	ble	27cd8 <__assert_fail@plt+0x16824>
   27cc4:	sub	r8, r1, #1
   27cc8:	cmp	r1, #0
   27ccc:	mov	r1, r8
   27cd0:	bgt	27cb8 <__assert_fail@plt+0x16804>
   27cd4:	b	27cf4 <__assert_fail@plt+0x16840>
   27cd8:	mov	r8, r1
   27cdc:	bne	27cf4 <__assert_fail@plt+0x16840>
   27ce0:	mov	r8, r1
   27ce4:	mov	r9, r0
   27ce8:	cmp	ip, #1
   27cec:	bge	27d10 <__assert_fail@plt+0x1685c>
   27cf0:	b	27d1c <__assert_fail@plt+0x16868>
   27cf4:	ldr	r1, [sp, #8]
   27cf8:	mov	r9, r0
   27cfc:	sub	r9, r0, #1
   27d00:	ldr	r1, [r1]
   27d04:	str	r6, [r1, r9, lsl #2]
   27d08:	cmp	ip, #1
   27d0c:	blt	27d1c <__assert_fail@plt+0x16868>
   27d10:	cmp	lr, #2
   27d14:	mov	lr, r3
   27d18:	bge	27c60 <__assert_fail@plt+0x167ac>
   27d1c:	ldr	lr, [r7, #4]
   27d20:	ldr	r7, [sp, #4]
   27d24:	ldr	r2, [sl, #4]
   27d28:	ldr	r0, [sl, #8]
   27d2c:	ldr	r4, [r7, #4]
   27d30:	subs	r1, r2, #1
   27d34:	add	r3, r1, lr
   27d38:	add	r3, r3, r4
   27d3c:	sub	r5, r3, r9
   27d40:	add	r6, r5, #1
   27d44:	cmpge	r5, #0
   27d48:	add	r7, r6, r2
   27d4c:	str	r7, [sl, #4]
   27d50:	blt	27da8 <__assert_fail@plt+0x168f4>
   27d54:	add	r2, r2, r4
   27d58:	add	r2, r2, lr
   27d5c:	sub	r2, r2, r9
   27d60:	add	r7, r0, r2, lsl #2
   27d64:	ldr	r2, [r0, r1, lsl #2]
   27d68:	ldr	r5, [r0, r3, lsl #2]
   27d6c:	cmp	r5, r2
   27d70:	bgt	27d8c <__assert_fail@plt+0x168d8>
   27d74:	str	r2, [r7, r1, lsl #2]
   27d78:	sub	r2, r1, #1
   27d7c:	cmp	r1, #0
   27d80:	mov	r1, r2
   27d84:	bgt	27d64 <__assert_fail@plt+0x168b0>
   27d88:	b	27da8 <__assert_fail@plt+0x168f4>
   27d8c:	str	r5, [r7, r1, lsl #2]
   27d90:	sub	r7, r7, #4
   27d94:	subs	r6, r6, #1
   27d98:	sub	r3, r3, #1
   27d9c:	mov	r2, #0
   27da0:	bne	27d64 <__assert_fail@plt+0x168b0>
   27da4:	b	27dac <__assert_fail@plt+0x168f8>
   27da8:	mov	r2, r6
   27dac:	add	r1, r0, r9, lsl #2
   27db0:	lsl	r2, r2, #2
   27db4:	bl	1125c <memcpy@plt>
   27db8:	mov	r0, #0
   27dbc:	sub	sp, fp, #28
   27dc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27dc4:	mov	r0, #12
   27dc8:	sub	sp, fp, #28
   27dcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27dd4:	add	fp, sp, #28
   27dd8:	sub	sp, sp, #44	; 0x2c
   27ddc:	mov	ip, r0
   27de0:	ldr	r0, [r0, #28]
   27de4:	str	r3, [sp, #4]
   27de8:	add	r3, r1, r1, lsl #1
   27dec:	mov	r9, #0
   27df0:	str	r9, [sp, #36]	; 0x24
   27df4:	str	r9, [sp, #32]
   27df8:	str	r9, [sp, #40]	; 0x28
   27dfc:	add	r3, r0, r3, lsl #2
   27e00:	mov	r0, r3
   27e04:	ldr	lr, [r0, #4]!
   27e08:	cmp	lr, #1
   27e0c:	str	r0, [sp, #24]
   27e10:	blt	28120 <__assert_fail@plt+0x16c6c>
   27e14:	add	r4, r3, #8
   27e18:	mov	sl, #1
   27e1c:	str	r2, [sp, #28]
   27e20:	str	r3, [sp]
   27e24:	str	r1, [sp, #12]
   27e28:	str	ip, [sp, #8]
   27e2c:	str	r4, [sp, #20]
   27e30:	ldr	r3, [r4]
   27e34:	ldr	r0, [r3, r9, lsl #2]
   27e38:	cmp	r0, r1
   27e3c:	beq	27fe4 <__assert_fail@plt+0x16b30>
   27e40:	ldr	r2, [ip]
   27e44:	add	r2, r2, r0, lsl #3
   27e48:	ldrb	r2, [r2, #4]
   27e4c:	tst	r2, #8
   27e50:	beq	27fe4 <__assert_fail@plt+0x16b30>
   27e54:	ldr	r2, [ip, #20]
   27e58:	add	r0, r0, r0, lsl #1
   27e5c:	mvn	r8, #0
   27e60:	str	r0, [sp, #16]
   27e64:	add	r0, r2, r0, lsl #2
   27e68:	ldr	r7, [r0, #4]
   27e6c:	ldr	r0, [r0, #8]
   27e70:	cmp	r7, #2
   27e74:	ldr	r5, [r0]
   27e78:	ldrge	r8, [r0, #4]
   27e7c:	cmp	lr, #1
   27e80:	blt	27ec0 <__assert_fail@plt+0x16a0c>
   27e84:	mov	r2, #0
   27e88:	subs	r7, lr, #1
   27e8c:	beq	27eb0 <__assert_fail@plt+0x169fc>
   27e90:	add	r6, r2, r7
   27e94:	lsr	r4, r6, #1
   27e98:	ldr	r0, [r3, r4, lsl #2]
   27e9c:	cmp	r0, r5
   27ea0:	movge	r7, r4
   27ea4:	addlt	r2, sl, r6, lsr #1
   27ea8:	cmp	r2, r7
   27eac:	bcc	27e90 <__assert_fail@plt+0x169dc>
   27eb0:	ldr	r0, [r3, r2, lsl #2]
   27eb4:	ldr	r4, [sp, #20]
   27eb8:	cmp	r0, r5
   27ebc:	beq	27f1c <__assert_fail@plt+0x16a68>
   27ec0:	ldr	r0, [sp, #28]
   27ec4:	ldr	r0, [r0, #4]
   27ec8:	cmp	r0, #1
   27ecc:	blt	27f1c <__assert_fail@plt+0x16a68>
   27ed0:	subs	r6, r0, #1
   27ed4:	ldr	r0, [sp, #28]
   27ed8:	mov	r7, #0
   27edc:	ldr	r1, [r0, #8]
   27ee0:	beq	27f04 <__assert_fail@plt+0x16a50>
   27ee4:	add	r0, r7, r6
   27ee8:	lsr	r4, r0, #1
   27eec:	ldr	ip, [r1, r4, lsl #2]
   27ef0:	cmp	ip, r5
   27ef4:	movge	r6, r4
   27ef8:	addlt	r7, sl, r0, lsr #1
   27efc:	cmp	r7, r6
   27f00:	bcc	27ee4 <__assert_fail@plt+0x16a30>
   27f04:	ldr	r0, [r1, r7, lsl #2]
   27f08:	ldr	r1, [sp, #12]
   27f0c:	ldr	ip, [sp, #8]
   27f10:	ldr	r4, [sp, #20]
   27f14:	cmp	r0, r5
   27f18:	beq	27fb4 <__assert_fail@plt+0x16b00>
   27f1c:	cmp	r8, #1
   27f20:	blt	27fe4 <__assert_fail@plt+0x16b30>
   27f24:	cmp	lr, #1
   27f28:	blt	27f64 <__assert_fail@plt+0x16ab0>
   27f2c:	mov	r2, #0
   27f30:	subs	r7, lr, #1
   27f34:	beq	27f58 <__assert_fail@plt+0x16aa4>
   27f38:	add	r0, r2, r7
   27f3c:	lsr	r6, r0, #1
   27f40:	ldr	r5, [r3, r6, lsl #2]
   27f44:	cmp	r5, r8
   27f48:	movge	r7, r6
   27f4c:	addlt	r2, sl, r0, lsr #1
   27f50:	cmp	r2, r7
   27f54:	bcc	27f38 <__assert_fail@plt+0x16a84>
   27f58:	ldr	r0, [r3, r2, lsl #2]
   27f5c:	cmp	r0, r8
   27f60:	beq	27fe4 <__assert_fail@plt+0x16b30>
   27f64:	ldr	r2, [sp, #28]
   27f68:	ldr	r0, [r2, #4]
   27f6c:	cmp	r0, #1
   27f70:	blt	27fe4 <__assert_fail@plt+0x16b30>
   27f74:	ldr	r4, [r2, #8]
   27f78:	subs	r7, r0, #1
   27f7c:	mov	r3, #0
   27f80:	beq	27fa4 <__assert_fail@plt+0x16af0>
   27f84:	add	r0, r3, r7
   27f88:	lsr	r6, r0, #1
   27f8c:	ldr	r5, [r4, r6, lsl #2]
   27f90:	cmp	r5, r8
   27f94:	movge	r7, r6
   27f98:	addlt	r3, sl, r0, lsr #1
   27f9c:	cmp	r3, r7
   27fa0:	bcc	27f84 <__assert_fail@plt+0x16ad0>
   27fa4:	ldr	r0, [r4, r3, lsl #2]
   27fa8:	ldr	r4, [sp, #20]
   27fac:	cmp	r0, r8
   27fb0:	bne	27fe4 <__assert_fail@plt+0x16b30>
   27fb4:	ldr	r0, [ip, #28]
   27fb8:	ldr	r1, [sp, #16]
   27fbc:	add	r2, r0, r1, lsl #2
   27fc0:	ldr	r1, [sp, #4]
   27fc4:	add	r0, sp, #32
   27fc8:	bl	27bb4 <__assert_fail@plt+0x16700>
   27fcc:	cmp	r0, #0
   27fd0:	bne	281f8 <__assert_fail@plt+0x16d44>
   27fd4:	ldr	r0, [sp, #24]
   27fd8:	ldr	r1, [sp, #12]
   27fdc:	ldr	ip, [sp, #8]
   27fe0:	ldr	lr, [r0]
   27fe4:	add	r9, r9, #1
   27fe8:	cmp	r9, lr
   27fec:	blt	27e30 <__assert_fail@plt+0x1697c>
   27ff0:	ldr	r2, [sp, #28]
   27ff4:	ldr	r0, [sp]
   27ff8:	cmp	lr, #0
   27ffc:	ble	28120 <__assert_fail@plt+0x16c6c>
   28000:	ldr	r1, [sp, #36]	; 0x24
   28004:	ldr	r9, [r0, #8]
   28008:	ldr	r0, [sp, #40]	; 0x28
   2800c:	subs	lr, r1, #1
   28010:	str	r9, [sp, #20]
   28014:	blt	28138 <__assert_fail@plt+0x16c84>
   28018:	mov	ip, #0
   2801c:	mov	r7, #1
   28020:	b	28044 <__assert_fail@plt+0x16b90>
   28024:	add	r2, r5, r1, lsl #2
   28028:	ldr	r2, [r2, #4]
   2802c:	str	r2, [r5, r1, lsl #2]
   28030:	add	r1, r1, #1
   28034:	ldr	r2, [r3, #4]
   28038:	cmp	r1, r2
   2803c:	blt	28024 <__assert_fail@plt+0x16b70>
   28040:	b	28108 <__assert_fail@plt+0x16c54>
   28044:	ldr	r6, [r9, ip, lsl #2]
   28048:	cmp	lr, #0
   2804c:	mov	r1, #0
   28050:	beq	2807c <__assert_fail@plt+0x16bc8>
   28054:	mov	r1, #0
   28058:	mov	r2, lr
   2805c:	add	r5, r1, r2
   28060:	lsr	r4, r5, #1
   28064:	ldr	r3, [r0, r4, lsl #2]
   28068:	cmp	r3, r6
   2806c:	movge	r2, r4
   28070:	addlt	r1, r7, r5, lsr #1
   28074:	cmp	r1, r2
   28078:	bcc	2805c <__assert_fail@plt+0x16ba8>
   2807c:	ldr	r1, [r0, r1, lsl #2]
   28080:	cmp	r1, r6
   28084:	ldr	r1, [sp, #28]
   28088:	beq	28108 <__assert_fail@plt+0x16c54>
   2808c:	ldr	sl, [r1, #4]
   28090:	cmp	sl, #1
   28094:	blt	28108 <__assert_fail@plt+0x16c54>
   28098:	ldr	r5, [r1, #8]
   2809c:	subs	r4, sl, #1
   280a0:	beq	280d0 <__assert_fail@plt+0x16c1c>
   280a4:	mov	r1, #0
   280a8:	mov	r8, r4
   280ac:	add	r3, r1, r4
   280b0:	lsr	r2, r3, #1
   280b4:	ldr	r9, [r5, r2, lsl #2]
   280b8:	cmp	r9, r6
   280bc:	movge	r4, r2
   280c0:	addlt	r1, r7, r3, lsr #1
   280c4:	cmp	r1, r4
   280c8:	bcc	280ac <__assert_fail@plt+0x16bf8>
   280cc:	b	280d8 <__assert_fail@plt+0x16c24>
   280d0:	mov	r8, r4
   280d4:	mov	r1, #0
   280d8:	ldr	r2, [r5, r1, lsl #2]
   280dc:	ldr	r3, [sp, #28]
   280e0:	ldr	r9, [sp, #20]
   280e4:	mov	r4, r1
   280e8:	cmp	r2, r6
   280ec:	mvnne	r4, #0
   280f0:	cmp	r4, #0
   280f4:	blt	28108 <__assert_fail@plt+0x16c54>
   280f8:	cmp	sl, r4
   280fc:	strgt	r8, [r3, #4]
   28100:	cmpgt	r8, r4
   28104:	bgt	28024 <__assert_fail@plt+0x16b70>
   28108:	ldr	r1, [sp, #24]
   2810c:	add	ip, ip, #1
   28110:	ldr	r1, [r1]
   28114:	cmp	ip, r1
   28118:	blt	28044 <__assert_fail@plt+0x16b90>
   2811c:	b	28124 <__assert_fail@plt+0x16c70>
   28120:	ldr	r0, [sp, #40]	; 0x28
   28124:	bl	2ae28 <__assert_fail@plt+0x19974>
   28128:	mov	r5, #0
   2812c:	mov	r0, r5
   28130:	sub	sp, fp, #28
   28134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28138:	ldr	r7, [r2, #4]
   2813c:	mov	sl, #0
   28140:	mov	r9, #1
   28144:	cmp	r7, #1
   28148:	blt	281e0 <__assert_fail@plt+0x16d2c>
   2814c:	ldr	r1, [sp, #20]
   28150:	ldr	r6, [r2, #8]
   28154:	subs	lr, r7, #1
   28158:	mov	r5, #0
   2815c:	ldr	r1, [r1, sl, lsl #2]
   28160:	beq	28188 <__assert_fail@plt+0x16cd4>
   28164:	mov	r4, lr
   28168:	add	r3, r5, r4
   2816c:	lsr	r2, r3, #1
   28170:	ldr	ip, [r6, r2, lsl #2]
   28174:	cmp	ip, r1
   28178:	movge	r4, r2
   2817c:	addlt	r5, r9, r3, lsr #1
   28180:	cmp	r5, r4
   28184:	bcc	28168 <__assert_fail@plt+0x16cb4>
   28188:	ldr	r2, [r6, r5, lsl #2]
   2818c:	cmp	r2, r1
   28190:	mov	r1, r5
   28194:	mvnne	r1, #0
   28198:	cmp	r1, #0
   2819c:	blt	281dc <__assert_fail@plt+0x16d28>
   281a0:	ldr	r2, [sp, #28]
   281a4:	cmp	r7, r1
   281a8:	ble	281e0 <__assert_fail@plt+0x16d2c>
   281ac:	cmp	lr, r1
   281b0:	mov	r7, lr
   281b4:	str	lr, [r2, #4]
   281b8:	ble	281e0 <__assert_fail@plt+0x16d2c>
   281bc:	add	r1, r6, r5, lsl #2
   281c0:	ldr	r1, [r1, #4]
   281c4:	str	r1, [r6, r5, lsl #2]
   281c8:	add	r5, r5, #1
   281cc:	ldr	r7, [r2, #4]
   281d0:	cmp	r5, r7
   281d4:	blt	281bc <__assert_fail@plt+0x16d08>
   281d8:	b	281e0 <__assert_fail@plt+0x16d2c>
   281dc:	ldr	r2, [sp, #28]
   281e0:	ldr	r1, [sp, #24]
   281e4:	add	sl, sl, #1
   281e8:	ldr	r1, [r1]
   281ec:	cmp	sl, r1
   281f0:	blt	28144 <__assert_fail@plt+0x16c90>
   281f4:	b	28124 <__assert_fail@plt+0x16c70>
   281f8:	mov	r5, r0
   281fc:	ldr	r0, [sp, #40]	; 0x28
   28200:	bl	2ae28 <__assert_fail@plt+0x19974>
   28204:	mov	r0, r5
   28208:	sub	sp, fp, #28
   2820c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28210:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28214:	add	fp, sp, #28
   28218:	sub	sp, sp, #44	; 0x2c
   2821c:	ldr	r4, [r0, #84]	; 0x54
   28220:	mov	r7, r0
   28224:	str	r1, [fp, #-32]	; 0xffffffe0
   28228:	add	r1, r3, r3, lsl #1
   2822c:	mov	r6, r2
   28230:	str	r3, [sp, #36]	; 0x24
   28234:	ldr	r0, [r4, #24]
   28238:	add	r0, r0, r1, lsl #2
   2823c:	mov	r2, r0
   28240:	ldr	r1, [r2, #4]!
   28244:	cmp	r1, #1
   28248:	str	r2, [sp, #28]
   2824c:	blt	28500 <__assert_fail@plt+0x1704c>
   28250:	mov	r1, #1
   28254:	cmp	r6, #31
   28258:	add	r0, r0, #8
   2825c:	mov	sl, #0
   28260:	mvn	r2, r1, lsl r6
   28264:	lsl	r1, r1, r6
   28268:	str	r0, [sp, #32]
   2826c:	str	r2, [sp, #16]
   28270:	ldr	r2, [fp, #-32]	; 0xffffffe0
   28274:	str	r1, [sp, #24]
   28278:	mov	r1, #0
   2827c:	movwgt	r1, #1
   28280:	and	r3, r2, #2
   28284:	and	r0, r2, #1
   28288:	orr	r1, r1, r3, lsr #1
   2828c:	str	r3, [sp, #20]
   28290:	str	r0, [sp, #8]
   28294:	str	r1, [sp, #12]
   28298:	b	283b8 <__assert_fail@plt+0x16f04>
   2829c:	ldr	r2, [sp, #12]
   282a0:	cmp	r2, #0
   282a4:	beq	28324 <__assert_fail@plt+0x16e70>
   282a8:	add	r5, r0, r1, lsl #3
   282ac:	ldr	r0, [r5]
   282b0:	cmp	r0, r8
   282b4:	bne	28310 <__assert_fail@plt+0x16e5c>
   282b8:	ldr	r0, [r4, #20]
   282bc:	add	r1, r8, r8, lsl #1
   282c0:	add	r0, r0, r1, lsl #2
   282c4:	ldr	r0, [r0, #8]
   282c8:	ldr	r3, [r0]
   282cc:	ldr	r0, [sp, #36]	; 0x24
   282d0:	cmp	r3, r0
   282d4:	beq	28510 <__assert_fail@plt+0x1705c>
   282d8:	ldr	r0, [fp, #8]
   282dc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   282e0:	mov	r2, r6
   282e4:	str	r0, [sp]
   282e8:	mov	r0, r7
   282ec:	bl	28210 <__assert_fail@plt+0x16d5c>
   282f0:	cmp	r0, #0
   282f4:	beq	28304 <__assert_fail@plt+0x16e50>
   282f8:	cmn	r0, #1
   282fc:	bne	28310 <__assert_fail@plt+0x16e5c>
   28300:	b	28524 <__assert_fail@plt+0x17070>
   28304:	ldr	r0, [sp, #20]
   28308:	cmp	r0, #0
   2830c:	bne	28520 <__assert_fail@plt+0x1706c>
   28310:	ldrb	r0, [r5, #20]
   28314:	add	r5, r5, #24
   28318:	cmp	r0, #0
   2831c:	bne	282ac <__assert_fail@plt+0x16df8>
   28320:	b	284ec <__assert_fail@plt+0x17038>
   28324:	add	r0, r0, r1, lsl #3
   28328:	add	r5, r0, #16
   2832c:	ldr	r0, [r5, #-16]
   28330:	cmp	r0, r8
   28334:	bne	28380 <__assert_fail@plt+0x16ecc>
   28338:	ldr	r0, [r4, #20]
   2833c:	add	r1, r8, r8, lsl #1
   28340:	add	r0, r0, r1, lsl #2
   28344:	ldr	r0, [r0, #8]
   28348:	ldr	r3, [r0]
   2834c:	ldr	r0, [sp, #36]	; 0x24
   28350:	cmp	r3, r0
   28354:	beq	28510 <__assert_fail@plt+0x1705c>
   28358:	ldr	r0, [fp, #8]
   2835c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   28360:	mov	r2, r6
   28364:	str	r0, [sp]
   28368:	mov	r0, r7
   2836c:	bl	28210 <__assert_fail@plt+0x16d5c>
   28370:	cmp	r0, #0
   28374:	beq	28394 <__assert_fail@plt+0x16ee0>
   28378:	cmn	r0, #1
   2837c:	beq	28524 <__assert_fail@plt+0x17070>
   28380:	ldrb	r0, [r5, #4]
   28384:	add	r5, r5, #24
   28388:	cmp	r0, #0
   2838c:	bne	2832c <__assert_fail@plt+0x16e78>
   28390:	b	284ec <__assert_fail@plt+0x17038>
   28394:	ldr	r0, [r5]
   28398:	ldr	r1, [sp, #16]
   2839c:	and	r0, r0, r1
   283a0:	str	r0, [r5]
   283a4:	ldrb	r0, [r5, #4]
   283a8:	add	r5, r5, #24
   283ac:	cmp	r0, #0
   283b0:	bne	2832c <__assert_fail@plt+0x16e78>
   283b4:	b	284ec <__assert_fail@plt+0x17038>
   283b8:	ldr	r0, [sp, #32]
   283bc:	ldr	r0, [r0]
   283c0:	ldr	r8, [r0, sl, lsl #2]
   283c4:	ldr	r0, [r4]
   283c8:	add	r1, r0, r8, lsl #3
   283cc:	ldrb	r1, [r1, #4]
   283d0:	cmp	r1, #9
   283d4:	beq	284b8 <__assert_fail@plt+0x17004>
   283d8:	cmp	r1, #8
   283dc:	beq	284d4 <__assert_fail@plt+0x17020>
   283e0:	cmp	r1, #4
   283e4:	bne	284ec <__assert_fail@plt+0x17038>
   283e8:	ldr	r0, [fp, #8]
   283ec:	cmn	r0, #1
   283f0:	beq	284ec <__assert_fail@plt+0x17038>
   283f4:	ldr	r1, [fp, #8]
   283f8:	ldr	r0, [r7, #116]	; 0x74
   283fc:	cmp	r6, #31
   28400:	add	r1, r1, r1, lsl #1
   28404:	bgt	2829c <__assert_fail@plt+0x16de8>
   28408:	add	r0, r0, r1, lsl #3
   2840c:	add	r9, r0, #16
   28410:	ldr	r0, [r9, #-16]
   28414:	cmp	r0, r8
   28418:	bne	284a4 <__assert_fail@plt+0x16ff0>
   2841c:	ldr	r0, [r9]
   28420:	ldr	r1, [sp, #24]
   28424:	tst	r0, r1
   28428:	beq	284a4 <__assert_fail@plt+0x16ff0>
   2842c:	ldr	r0, [r4, #20]
   28430:	add	r1, r8, r8, lsl #1
   28434:	add	r0, r0, r1, lsl #2
   28438:	ldr	r0, [r0, #8]
   2843c:	ldr	r3, [r0]
   28440:	ldr	r0, [sp, #36]	; 0x24
   28444:	cmp	r3, r0
   28448:	beq	28510 <__assert_fail@plt+0x1705c>
   2844c:	ldr	r0, [fp, #8]
   28450:	ldr	r1, [fp, #-32]	; 0xffffffe0
   28454:	mov	r2, r6
   28458:	str	r0, [sp]
   2845c:	mov	r0, r7
   28460:	bl	28210 <__assert_fail@plt+0x16d5c>
   28464:	cmp	r0, #0
   28468:	beq	28478 <__assert_fail@plt+0x16fc4>
   2846c:	cmn	r0, #1
   28470:	bne	28494 <__assert_fail@plt+0x16fe0>
   28474:	b	28524 <__assert_fail@plt+0x17070>
   28478:	ldr	r0, [sp, #12]
   2847c:	cmp	r0, #0
   28480:	beq	28494 <__assert_fail@plt+0x16fe0>
   28484:	ldr	r0, [sp, #20]
   28488:	cmp	r0, #0
   2848c:	beq	284a4 <__assert_fail@plt+0x16ff0>
   28490:	b	28520 <__assert_fail@plt+0x1706c>
   28494:	ldr	r0, [r9]
   28498:	ldr	r1, [sp, #16]
   2849c:	and	r0, r0, r1
   284a0:	str	r0, [r9]
   284a4:	ldrb	r0, [r9, #4]
   284a8:	add	r9, r9, #24
   284ac:	cmp	r0, #0
   284b0:	bne	28410 <__assert_fail@plt+0x16f5c>
   284b4:	b	284ec <__assert_fail@plt+0x17038>
   284b8:	ldr	r1, [sp, #20]
   284bc:	cmp	r1, #0
   284c0:	beq	284ec <__assert_fail@plt+0x17038>
   284c4:	ldr	r0, [r0, r8, lsl #3]
   284c8:	cmp	r0, r6
   284cc:	bne	284ec <__assert_fail@plt+0x17038>
   284d0:	b	28520 <__assert_fail@plt+0x1706c>
   284d4:	ldr	r1, [sp, #8]
   284d8:	cmp	r1, #0
   284dc:	beq	284ec <__assert_fail@plt+0x17038>
   284e0:	ldr	r0, [r0, r8, lsl #3]
   284e4:	cmp	r0, r6
   284e8:	beq	2852c <__assert_fail@plt+0x17078>
   284ec:	ldr	r0, [sp, #28]
   284f0:	add	sl, sl, #1
   284f4:	ldr	r0, [r0]
   284f8:	cmp	sl, r0
   284fc:	blt	283b8 <__assert_fail@plt+0x16f04>
   28500:	ldr	r0, [fp, #-32]	; 0xffffffe0
   28504:	ubfx	r0, r0, #1, #1
   28508:	sub	sp, fp, #28
   2850c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28510:	ldr	r0, [sp, #8]
   28514:	rsb	r0, r0, #0
   28518:	sub	sp, fp, #28
   2851c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28520:	mov	r0, #0
   28524:	sub	sp, fp, #28
   28528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2852c:	mvn	r0, #0
   28530:	sub	sp, fp, #28
   28534:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28538:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2853c:	add	fp, sp, #24
   28540:	sub	sp, sp, #32
   28544:	ldr	r6, [fp, #12]
   28548:	ldr	r7, [fp, #8]
   2854c:	mov	r4, r2
   28550:	mov	r8, r0
   28554:	cmp	r1, #0
   28558:	beq	28580 <__assert_fail@plt+0x170cc>
   2855c:	movw	r2, #49745	; 0xc251
   28560:	mov	r5, r1
   28564:	str	r3, [sp, #4]
   28568:	str	r4, [sp]
   2856c:	mov	r0, r8
   28570:	mov	r1, #1
   28574:	movt	r2, #2
   28578:	mov	r3, r5
   2857c:	b	28598 <__assert_fail@plt+0x170e4>
   28580:	movw	r2, #49757	; 0xc25d
   28584:	str	r3, [sp]
   28588:	mov	r0, r8
   2858c:	mov	r1, #1
   28590:	mov	r3, r4
   28594:	movt	r2, #2
   28598:	bl	11400 <__fprintf_chk@plt>
   2859c:	movw	r1, #49764	; 0xc264
   285a0:	mov	r0, #0
   285a4:	mov	r2, #5
   285a8:	movt	r1, #2
   285ac:	bl	112b0 <dcgettext@plt>
   285b0:	movw	r2, #50482	; 0xc532
   285b4:	mov	r3, r0
   285b8:	movw	r0, #2022	; 0x7e6
   285bc:	mov	r1, #1
   285c0:	str	r0, [sp]
   285c4:	movt	r2, #2
   285c8:	mov	r0, r8
   285cc:	bl	11400 <__fprintf_chk@plt>
   285d0:	movw	r4, #47519	; 0xb99f
   285d4:	mov	r1, r8
   285d8:	movt	r4, #2
   285dc:	mov	r0, r4
   285e0:	bl	111c0 <fputs_unlocked@plt>
   285e4:	movw	r1, #49768	; 0xc268
   285e8:	mov	r0, #0
   285ec:	mov	r2, #5
   285f0:	movt	r1, #2
   285f4:	bl	112b0 <dcgettext@plt>
   285f8:	movw	r3, #49939	; 0xc313
   285fc:	mov	r2, r0
   28600:	mov	r0, r8
   28604:	mov	r1, #1
   28608:	movt	r3, #2
   2860c:	bl	11400 <__fprintf_chk@plt>
   28610:	mov	r0, r4
   28614:	mov	r1, r8
   28618:	bl	111c0 <fputs_unlocked@plt>
   2861c:	cmp	r6, #9
   28620:	bhi	2865c <__assert_fail@plt+0x171a8>
   28624:	add	r0, pc, #0
   28628:	ldr	pc, [r0, r6, lsl #2]
   2862c:	andeq	r8, r2, r4, asr r6
   28630:	andeq	r8, r2, r8, ror #12
   28634:	muleq	r2, r8, r6
   28638:	andeq	r8, r2, r0, asr #13
   2863c:	andeq	r8, r2, r8, ror #13
   28640:	andeq	r8, r2, r0, lsl r7
   28644:	andeq	r8, r2, r8, lsr r7
   28648:	andeq	r8, r2, r0, ror r7
   2864c:	andeq	r8, r2, r8, lsl r8
   28650:	andeq	r8, r2, r0, asr #15
   28654:	sub	sp, fp, #24
   28658:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2865c:	movw	r1, #50292	; 0xc474
   28660:	movt	r1, #2
   28664:	b	287c8 <__assert_fail@plt+0x17314>
   28668:	movw	r1, #49973	; 0xc335
   2866c:	mov	r0, #0
   28670:	mov	r2, #5
   28674:	movt	r1, #2
   28678:	bl	112b0 <dcgettext@plt>
   2867c:	ldr	r3, [r7]
   28680:	mov	r2, r0
   28684:	mov	r0, r8
   28688:	mov	r1, #1
   2868c:	sub	sp, fp, #24
   28690:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   28694:	b	11400 <__fprintf_chk@plt>
   28698:	movw	r1, #49989	; 0xc345
   2869c:	mov	r0, #0
   286a0:	mov	r2, #5
   286a4:	movt	r1, #2
   286a8:	bl	112b0 <dcgettext@plt>
   286ac:	mov	r2, r0
   286b0:	ldr	r3, [r7]
   286b4:	ldr	r0, [r7, #4]
   286b8:	str	r0, [sp]
   286bc:	b	287ac <__assert_fail@plt+0x172f8>
   286c0:	movw	r1, #50012	; 0xc35c
   286c4:	mov	r0, #0
   286c8:	mov	r2, #5
   286cc:	movt	r1, #2
   286d0:	bl	112b0 <dcgettext@plt>
   286d4:	ldr	r3, [r7]
   286d8:	mov	r2, r0
   286dc:	ldmib	r7, {r0, r1}
   286e0:	stm	sp, {r0, r1}
   286e4:	b	287ac <__assert_fail@plt+0x172f8>
   286e8:	movw	r1, #50040	; 0xc378
   286ec:	mov	r0, #0
   286f0:	mov	r2, #5
   286f4:	movt	r1, #2
   286f8:	bl	112b0 <dcgettext@plt>
   286fc:	ldr	r3, [r7]
   28700:	mov	r2, r0
   28704:	ldmib	r7, {r0, r1, r7}
   28708:	stm	sp, {r0, r1, r7}
   2870c:	b	287ac <__assert_fail@plt+0x172f8>
   28710:	movw	r1, #50072	; 0xc398
   28714:	mov	r0, #0
   28718:	mov	r2, #5
   2871c:	movt	r1, #2
   28720:	bl	112b0 <dcgettext@plt>
   28724:	ldr	r3, [r7]
   28728:	mov	r2, r0
   2872c:	ldmib	r7, {r0, r1, r6, r7}
   28730:	stm	sp, {r0, r1, r6, r7}
   28734:	b	287ac <__assert_fail@plt+0x172f8>
   28738:	movw	r1, #50108	; 0xc3bc
   2873c:	mov	r0, #0
   28740:	mov	r2, #5
   28744:	movt	r1, #2
   28748:	bl	112b0 <dcgettext@plt>
   2874c:	ldr	r3, [r7]
   28750:	mov	r2, r0
   28754:	ldmib	r7, {r0, r1, r6}
   28758:	ldr	r5, [r7, #16]
   2875c:	ldr	r7, [r7, #20]
   28760:	stm	sp, {r0, r1, r6}
   28764:	str	r5, [sp, #12]
   28768:	str	r7, [sp, #16]
   2876c:	b	287ac <__assert_fail@plt+0x172f8>
   28770:	movw	r1, #50148	; 0xc3e4
   28774:	mov	r0, #0
   28778:	mov	r2, #5
   2877c:	movt	r1, #2
   28780:	bl	112b0 <dcgettext@plt>
   28784:	ldr	r3, [r7]
   28788:	mov	r2, r0
   2878c:	ldmib	r7, {r0, r1, r6}
   28790:	ldr	r5, [r7, #16]
   28794:	ldr	r4, [r7, #20]
   28798:	ldr	r7, [r7, #24]
   2879c:	stm	sp, {r0, r1, r6}
   287a0:	str	r5, [sp, #12]
   287a4:	str	r4, [sp, #16]
   287a8:	str	r7, [sp, #20]
   287ac:	mov	r0, r8
   287b0:	mov	r1, #1
   287b4:	bl	11400 <__fprintf_chk@plt>
   287b8:	sub	sp, fp, #24
   287bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   287c0:	movw	r1, #50240	; 0xc440
   287c4:	movt	r1, #2
   287c8:	mov	r0, #0
   287cc:	mov	r2, #5
   287d0:	bl	112b0 <dcgettext@plt>
   287d4:	mov	ip, r0
   287d8:	ldr	r3, [r7]
   287dc:	ldr	r0, [r7, #4]
   287e0:	ldr	r1, [r7, #8]
   287e4:	ldr	r6, [r7, #12]
   287e8:	ldr	r5, [r7, #16]
   287ec:	ldr	r4, [r7, #20]
   287f0:	ldr	r2, [r7, #24]
   287f4:	ldr	lr, [r7, #28]
   287f8:	ldr	r7, [r7, #32]
   287fc:	stm	sp, {r0, r1, r6}
   28800:	str	r5, [sp, #12]
   28804:	str	r4, [sp, #16]
   28808:	str	r2, [sp, #20]
   2880c:	str	lr, [sp, #24]
   28810:	str	r7, [sp, #28]
   28814:	b	2885c <__assert_fail@plt+0x173a8>
   28818:	movw	r1, #50192	; 0xc410
   2881c:	mov	r0, #0
   28820:	mov	r2, #5
   28824:	movt	r1, #2
   28828:	bl	112b0 <dcgettext@plt>
   2882c:	mov	ip, r0
   28830:	ldr	r3, [r7]
   28834:	ldmib	r7, {r0, r1, r6}
   28838:	ldr	r5, [r7, #16]
   2883c:	ldr	r4, [r7, #20]
   28840:	ldr	r2, [r7, #24]
   28844:	ldr	r7, [r7, #28]
   28848:	stm	sp, {r0, r1, r6}
   2884c:	str	r5, [sp, #12]
   28850:	str	r4, [sp, #16]
   28854:	str	r2, [sp, #20]
   28858:	str	r7, [sp, #24]
   2885c:	mov	r0, r8
   28860:	mov	r1, #1
   28864:	mov	r2, ip
   28868:	bl	11400 <__fprintf_chk@plt>
   2886c:	sub	sp, fp, #24
   28870:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28874:	push	{r4, sl, fp, lr}
   28878:	add	fp, sp, #8
   2887c:	sub	sp, sp, #8
   28880:	ldr	ip, [fp, #8]
   28884:	mov	lr, #0
   28888:	ldr	r4, [ip, lr, lsl #2]
   2888c:	add	lr, lr, #1
   28890:	cmp	r4, #0
   28894:	bne	28888 <__assert_fail@plt+0x173d4>
   28898:	sub	r4, lr, #1
   2889c:	str	ip, [sp]
   288a0:	str	r4, [sp, #4]
   288a4:	bl	28538 <__assert_fail@plt+0x17084>
   288a8:	sub	sp, fp, #8
   288ac:	pop	{r4, sl, fp, pc}
   288b0:	push	{fp, lr}
   288b4:	mov	fp, sp
   288b8:	sub	sp, sp, #48	; 0x30
   288bc:	ldr	ip, [fp, #8]
   288c0:	ldr	lr, [ip]
   288c4:	cmp	lr, #0
   288c8:	str	lr, [sp, #8]
   288cc:	beq	28968 <__assert_fail@plt+0x174b4>
   288d0:	ldr	lr, [ip, #4]
   288d4:	cmp	lr, #0
   288d8:	str	lr, [sp, #12]
   288dc:	beq	28970 <__assert_fail@plt+0x174bc>
   288e0:	ldr	lr, [ip, #8]
   288e4:	cmp	lr, #0
   288e8:	str	lr, [sp, #16]
   288ec:	beq	28978 <__assert_fail@plt+0x174c4>
   288f0:	ldr	lr, [ip, #12]
   288f4:	cmp	lr, #0
   288f8:	str	lr, [sp, #20]
   288fc:	beq	28980 <__assert_fail@plt+0x174cc>
   28900:	ldr	lr, [ip, #16]
   28904:	cmp	lr, #0
   28908:	str	lr, [sp, #24]
   2890c:	beq	28988 <__assert_fail@plt+0x174d4>
   28910:	ldr	lr, [ip, #20]
   28914:	cmp	lr, #0
   28918:	str	lr, [sp, #28]
   2891c:	beq	28990 <__assert_fail@plt+0x174dc>
   28920:	ldr	lr, [ip, #24]
   28924:	cmp	lr, #0
   28928:	str	lr, [sp, #32]
   2892c:	beq	28998 <__assert_fail@plt+0x174e4>
   28930:	ldr	lr, [ip, #28]
   28934:	cmp	lr, #0
   28938:	str	lr, [sp, #36]	; 0x24
   2893c:	beq	289a0 <__assert_fail@plt+0x174ec>
   28940:	ldr	lr, [ip, #32]
   28944:	cmp	lr, #0
   28948:	str	lr, [sp, #40]	; 0x28
   2894c:	beq	289a8 <__assert_fail@plt+0x174f4>
   28950:	ldr	lr, [ip, #36]	; 0x24
   28954:	mov	ip, #10
   28958:	cmp	lr, #0
   2895c:	str	lr, [sp, #44]	; 0x2c
   28960:	movweq	ip, #9
   28964:	b	289ac <__assert_fail@plt+0x174f8>
   28968:	mov	ip, #0
   2896c:	b	289ac <__assert_fail@plt+0x174f8>
   28970:	mov	ip, #1
   28974:	b	289ac <__assert_fail@plt+0x174f8>
   28978:	mov	ip, #2
   2897c:	b	289ac <__assert_fail@plt+0x174f8>
   28980:	mov	ip, #3
   28984:	b	289ac <__assert_fail@plt+0x174f8>
   28988:	mov	ip, #4
   2898c:	b	289ac <__assert_fail@plt+0x174f8>
   28990:	mov	ip, #5
   28994:	b	289ac <__assert_fail@plt+0x174f8>
   28998:	mov	ip, #6
   2899c:	b	289ac <__assert_fail@plt+0x174f8>
   289a0:	mov	ip, #7
   289a4:	b	289ac <__assert_fail@plt+0x174f8>
   289a8:	mov	ip, #8
   289ac:	add	lr, sp, #8
   289b0:	str	ip, [sp, #4]
   289b4:	str	lr, [sp]
   289b8:	bl	28538 <__assert_fail@plt+0x17084>
   289bc:	mov	sp, fp
   289c0:	pop	{fp, pc}
   289c4:	push	{fp, lr}
   289c8:	mov	fp, sp
   289cc:	sub	sp, sp, #56	; 0x38
   289d0:	add	ip, fp, #8
   289d4:	str	ip, [sp, #12]
   289d8:	ldr	lr, [fp, #8]
   289dc:	cmp	lr, #0
   289e0:	str	lr, [sp, #16]
   289e4:	beq	28a80 <__assert_fail@plt+0x175cc>
   289e8:	ldr	lr, [ip, #4]
   289ec:	cmp	lr, #0
   289f0:	str	lr, [sp, #20]
   289f4:	beq	28a88 <__assert_fail@plt+0x175d4>
   289f8:	ldr	lr, [ip, #8]
   289fc:	cmp	lr, #0
   28a00:	str	lr, [sp, #24]
   28a04:	beq	28a90 <__assert_fail@plt+0x175dc>
   28a08:	ldr	lr, [ip, #12]
   28a0c:	cmp	lr, #0
   28a10:	str	lr, [sp, #28]
   28a14:	beq	28a98 <__assert_fail@plt+0x175e4>
   28a18:	ldr	lr, [ip, #16]
   28a1c:	cmp	lr, #0
   28a20:	str	lr, [sp, #32]
   28a24:	beq	28aa0 <__assert_fail@plt+0x175ec>
   28a28:	ldr	lr, [ip, #20]
   28a2c:	cmp	lr, #0
   28a30:	str	lr, [sp, #36]	; 0x24
   28a34:	beq	28aa8 <__assert_fail@plt+0x175f4>
   28a38:	ldr	lr, [ip, #24]
   28a3c:	cmp	lr, #0
   28a40:	str	lr, [sp, #40]	; 0x28
   28a44:	beq	28ab0 <__assert_fail@plt+0x175fc>
   28a48:	ldr	lr, [ip, #28]
   28a4c:	cmp	lr, #0
   28a50:	str	lr, [sp, #44]	; 0x2c
   28a54:	beq	28ab8 <__assert_fail@plt+0x17604>
   28a58:	ldr	lr, [ip, #32]
   28a5c:	cmp	lr, #0
   28a60:	str	lr, [sp, #48]	; 0x30
   28a64:	beq	28ac0 <__assert_fail@plt+0x1760c>
   28a68:	ldr	lr, [ip, #36]	; 0x24
   28a6c:	mov	ip, #10
   28a70:	cmp	lr, #0
   28a74:	str	lr, [sp, #52]	; 0x34
   28a78:	movweq	ip, #9
   28a7c:	b	28ac4 <__assert_fail@plt+0x17610>
   28a80:	mov	ip, #0
   28a84:	b	28ac4 <__assert_fail@plt+0x17610>
   28a88:	mov	ip, #1
   28a8c:	b	28ac4 <__assert_fail@plt+0x17610>
   28a90:	mov	ip, #2
   28a94:	b	28ac4 <__assert_fail@plt+0x17610>
   28a98:	mov	ip, #3
   28a9c:	b	28ac4 <__assert_fail@plt+0x17610>
   28aa0:	mov	ip, #4
   28aa4:	b	28ac4 <__assert_fail@plt+0x17610>
   28aa8:	mov	ip, #5
   28aac:	b	28ac4 <__assert_fail@plt+0x17610>
   28ab0:	mov	ip, #6
   28ab4:	b	28ac4 <__assert_fail@plt+0x17610>
   28ab8:	mov	ip, #7
   28abc:	b	28ac4 <__assert_fail@plt+0x17610>
   28ac0:	mov	ip, #8
   28ac4:	add	lr, sp, #16
   28ac8:	str	ip, [sp, #4]
   28acc:	str	lr, [sp]
   28ad0:	bl	28538 <__assert_fail@plt+0x17084>
   28ad4:	mov	sp, fp
   28ad8:	pop	{fp, pc}
   28adc:	push	{fp, lr}
   28ae0:	mov	fp, sp
   28ae4:	movw	r0, #53700	; 0xd1c4
   28ae8:	movt	r0, #3
   28aec:	ldr	r1, [r0]
   28af0:	movw	r0, #47519	; 0xb99f
   28af4:	movt	r0, #2
   28af8:	bl	111c0 <fputs_unlocked@plt>
   28afc:	movw	r1, #50352	; 0xc4b0
   28b00:	mov	r0, #0
   28b04:	mov	r2, #5
   28b08:	movt	r1, #2
   28b0c:	bl	112b0 <dcgettext@plt>
   28b10:	movw	r2, #50372	; 0xc4c4
   28b14:	mov	r1, r0
   28b18:	mov	r0, #1
   28b1c:	movt	r2, #2
   28b20:	bl	113e8 <__printf_chk@plt>
   28b24:	movw	r1, #50394	; 0xc4da
   28b28:	mov	r0, #0
   28b2c:	mov	r2, #5
   28b30:	movt	r1, #2
   28b34:	bl	112b0 <dcgettext@plt>
   28b38:	movw	r2, #47842	; 0xbae2
   28b3c:	movw	r3, #48135	; 0xbc07
   28b40:	mov	r1, r0
   28b44:	mov	r0, #1
   28b48:	movt	r2, #2
   28b4c:	movt	r3, #2
   28b50:	bl	113e8 <__printf_chk@plt>
   28b54:	movw	r1, #50414	; 0xc4ee
   28b58:	mov	r0, #0
   28b5c:	mov	r2, #5
   28b60:	movt	r1, #2
   28b64:	bl	112b0 <dcgettext@plt>
   28b68:	movw	r2, #50453	; 0xc515
   28b6c:	mov	r1, r0
   28b70:	mov	r0, #1
   28b74:	movt	r2, #2
   28b78:	pop	{fp, lr}
   28b7c:	b	113e8 <__printf_chk@plt>
   28b80:	push	{r4, r5, r6, sl, fp, lr}
   28b84:	add	fp, sp, #16
   28b88:	mov	r4, r2
   28b8c:	mov	r5, r1
   28b90:	mov	r6, r0
   28b94:	bl	2aee8 <__assert_fail@plt+0x19a34>
   28b98:	cmp	r0, #0
   28b9c:	popne	{r4, r5, r6, sl, fp, pc}
   28ba0:	cmp	r6, #0
   28ba4:	beq	28bb8 <__assert_fail@plt+0x17704>
   28ba8:	cmp	r5, #0
   28bac:	cmpne	r4, #0
   28bb0:	bne	28bb8 <__assert_fail@plt+0x17704>
   28bb4:	pop	{r4, r5, r6, sl, fp, pc}
   28bb8:	bl	29158 <__assert_fail@plt+0x17ca4>
   28bbc:	push	{r4, r5, r6, sl, fp, lr}
   28bc0:	add	fp, sp, #16
   28bc4:	mov	r4, r2
   28bc8:	mov	r5, r1
   28bcc:	mov	r6, r0
   28bd0:	bl	2aee8 <__assert_fail@plt+0x19a34>
   28bd4:	cmp	r0, #0
   28bd8:	popne	{r4, r5, r6, sl, fp, pc}
   28bdc:	cmp	r6, #0
   28be0:	beq	28bf4 <__assert_fail@plt+0x17740>
   28be4:	cmp	r5, #0
   28be8:	cmpne	r4, #0
   28bec:	bne	28bf4 <__assert_fail@plt+0x17740>
   28bf0:	pop	{r4, r5, r6, sl, fp, pc}
   28bf4:	bl	29158 <__assert_fail@plt+0x17ca4>
   28bf8:	push	{fp, lr}
   28bfc:	mov	fp, sp
   28c00:	bl	2ac60 <__assert_fail@plt+0x197ac>
   28c04:	cmp	r0, #0
   28c08:	popne	{fp, pc}
   28c0c:	bl	29158 <__assert_fail@plt+0x17ca4>
   28c10:	push	{fp, lr}
   28c14:	mov	fp, sp
   28c18:	bl	2ac60 <__assert_fail@plt+0x197ac>
   28c1c:	cmp	r0, #0
   28c20:	popne	{fp, pc}
   28c24:	bl	29158 <__assert_fail@plt+0x17ca4>
   28c28:	push	{fp, lr}
   28c2c:	mov	fp, sp
   28c30:	bl	2ac60 <__assert_fail@plt+0x197ac>
   28c34:	cmp	r0, #0
   28c38:	popne	{fp, pc}
   28c3c:	bl	29158 <__assert_fail@plt+0x17ca4>
   28c40:	push	{r4, r5, fp, lr}
   28c44:	add	fp, sp, #8
   28c48:	mov	r4, r1
   28c4c:	mov	r5, r0
   28c50:	bl	2ac90 <__assert_fail@plt+0x197dc>
   28c54:	cmp	r0, #0
   28c58:	popne	{r4, r5, fp, pc}
   28c5c:	cmp	r5, #0
   28c60:	beq	28c70 <__assert_fail@plt+0x177bc>
   28c64:	cmp	r4, #0
   28c68:	bne	28c70 <__assert_fail@plt+0x177bc>
   28c6c:	pop	{r4, r5, fp, pc}
   28c70:	bl	29158 <__assert_fail@plt+0x17ca4>
   28c74:	push	{fp, lr}
   28c78:	mov	fp, sp
   28c7c:	cmp	r1, #0
   28c80:	orreq	r1, r1, #1
   28c84:	bl	2ac90 <__assert_fail@plt+0x197dc>
   28c88:	cmp	r0, #0
   28c8c:	popne	{fp, pc}
   28c90:	bl	29158 <__assert_fail@plt+0x17ca4>
   28c94:	push	{fp, lr}
   28c98:	mov	fp, sp
   28c9c:	clz	r3, r2
   28ca0:	lsr	ip, r3, #5
   28ca4:	clz	r3, r1
   28ca8:	lsr	r3, r3, #5
   28cac:	orrs	r3, r3, ip
   28cb0:	movwne	r1, #1
   28cb4:	movwne	r2, #1
   28cb8:	bl	2aee8 <__assert_fail@plt+0x19a34>
   28cbc:	cmp	r0, #0
   28cc0:	popne	{fp, pc}
   28cc4:	bl	29158 <__assert_fail@plt+0x17ca4>
   28cc8:	push	{fp, lr}
   28ccc:	mov	fp, sp
   28cd0:	mov	r2, r1
   28cd4:	mov	r1, r0
   28cd8:	mov	r0, #0
   28cdc:	bl	2aee8 <__assert_fail@plt+0x19a34>
   28ce0:	cmp	r0, #0
   28ce4:	popne	{fp, pc}
   28ce8:	bl	29158 <__assert_fail@plt+0x17ca4>
   28cec:	push	{fp, lr}
   28cf0:	mov	fp, sp
   28cf4:	mov	r2, r1
   28cf8:	mov	r1, r0
   28cfc:	clz	r0, r2
   28d00:	clz	r3, r1
   28d04:	lsr	r0, r0, #5
   28d08:	lsr	r3, r3, #5
   28d0c:	orrs	r0, r3, r0
   28d10:	movwne	r1, #1
   28d14:	movwne	r2, #1
   28d18:	mov	r0, #0
   28d1c:	bl	2aee8 <__assert_fail@plt+0x19a34>
   28d20:	cmp	r0, #0
   28d24:	popne	{fp, pc}
   28d28:	bl	29158 <__assert_fail@plt+0x17ca4>
   28d2c:	push	{r4, r5, r6, sl, fp, lr}
   28d30:	add	fp, sp, #16
   28d34:	ldr	r5, [r1]
   28d38:	mov	r4, r1
   28d3c:	mov	r6, r0
   28d40:	cmp	r0, #0
   28d44:	beq	28d5c <__assert_fail@plt+0x178a8>
   28d48:	mov	r0, #1
   28d4c:	add	r0, r0, r5, lsr #1
   28d50:	adds	r5, r5, r0
   28d54:	bcc	28d64 <__assert_fail@plt+0x178b0>
   28d58:	b	28da0 <__assert_fail@plt+0x178ec>
   28d5c:	cmp	r5, #0
   28d60:	movweq	r5, #64	; 0x40
   28d64:	mov	r0, r6
   28d68:	mov	r1, r5
   28d6c:	mov	r2, #1
   28d70:	bl	2aee8 <__assert_fail@plt+0x19a34>
   28d74:	cmp	r5, #0
   28d78:	mov	r1, r5
   28d7c:	movwne	r1, #1
   28d80:	cmp	r0, #0
   28d84:	bne	28d98 <__assert_fail@plt+0x178e4>
   28d88:	clz	r2, r6
   28d8c:	lsr	r2, r2, #5
   28d90:	orrs	r1, r2, r1
   28d94:	bne	28da0 <__assert_fail@plt+0x178ec>
   28d98:	str	r5, [r4]
   28d9c:	pop	{r4, r5, r6, sl, fp, pc}
   28da0:	bl	29158 <__assert_fail@plt+0x17ca4>
   28da4:	push	{r4, r5, r6, r7, fp, lr}
   28da8:	add	fp, sp, #16
   28dac:	ldr	r5, [r1]
   28db0:	mov	r6, r2
   28db4:	mov	r4, r1
   28db8:	mov	r7, r0
   28dbc:	cmp	r0, #0
   28dc0:	beq	28dd8 <__assert_fail@plt+0x17924>
   28dc4:	mov	r0, #1
   28dc8:	add	r0, r0, r5, lsr #1
   28dcc:	adds	r5, r5, r0
   28dd0:	bcc	28df0 <__assert_fail@plt+0x1793c>
   28dd4:	b	28e24 <__assert_fail@plt+0x17970>
   28dd8:	cmp	r5, #0
   28ddc:	bne	28df0 <__assert_fail@plt+0x1793c>
   28de0:	mov	r0, #64	; 0x40
   28de4:	cmp	r6, #64	; 0x40
   28de8:	udiv	r5, r0, r6
   28dec:	addhi	r5, r5, #1
   28df0:	mov	r0, r7
   28df4:	mov	r1, r5
   28df8:	mov	r2, r6
   28dfc:	bl	2aee8 <__assert_fail@plt+0x19a34>
   28e00:	cmp	r0, #0
   28e04:	bne	28e1c <__assert_fail@plt+0x17968>
   28e08:	cmp	r7, #0
   28e0c:	beq	28e24 <__assert_fail@plt+0x17970>
   28e10:	cmp	r6, #0
   28e14:	cmpne	r5, #0
   28e18:	bne	28e24 <__assert_fail@plt+0x17970>
   28e1c:	str	r5, [r4]
   28e20:	pop	{r4, r5, r6, r7, fp, pc}
   28e24:	bl	29158 <__assert_fail@plt+0x17ca4>
   28e28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   28e2c:	add	fp, sp, #24
   28e30:	mov	r8, r1
   28e34:	ldr	r1, [r1]
   28e38:	mov	r5, r0
   28e3c:	add	r0, r1, r1, asr #1
   28e40:	cmp	r0, r1
   28e44:	mvnvs	r0, #-2147483648	; 0x80000000
   28e48:	cmp	r0, r3
   28e4c:	mov	r7, r0
   28e50:	movgt	r7, r3
   28e54:	cmn	r3, #1
   28e58:	movle	r7, r0
   28e5c:	ldr	r0, [fp, #8]
   28e60:	cmn	r0, #1
   28e64:	ble	28e8c <__assert_fail@plt+0x179d8>
   28e68:	cmp	r0, #0
   28e6c:	beq	28ee0 <__assert_fail@plt+0x17a2c>
   28e70:	cmn	r7, #1
   28e74:	ble	28eb4 <__assert_fail@plt+0x17a00>
   28e78:	mvn	r4, #-2147483648	; 0x80000000
   28e7c:	udiv	r6, r4, r0
   28e80:	cmp	r6, r7
   28e84:	bge	28ee0 <__assert_fail@plt+0x17a2c>
   28e88:	b	28ef0 <__assert_fail@plt+0x17a3c>
   28e8c:	cmn	r7, #1
   28e90:	ble	28ed0 <__assert_fail@plt+0x17a1c>
   28e94:	cmn	r0, #1
   28e98:	beq	28ee0 <__assert_fail@plt+0x17a2c>
   28e9c:	mov	r6, #-2147483648	; 0x80000000
   28ea0:	mvn	r4, #-2147483648	; 0x80000000
   28ea4:	sdiv	r6, r6, r0
   28ea8:	cmp	r6, r7
   28eac:	bge	28ee0 <__assert_fail@plt+0x17a2c>
   28eb0:	b	28ef0 <__assert_fail@plt+0x17a3c>
   28eb4:	beq	28ee0 <__assert_fail@plt+0x17a2c>
   28eb8:	mov	r6, #-2147483648	; 0x80000000
   28ebc:	mvn	r4, #-2147483648	; 0x80000000
   28ec0:	sdiv	r6, r6, r7
   28ec4:	cmp	r6, r0
   28ec8:	bge	28ee0 <__assert_fail@plt+0x17a2c>
   28ecc:	b	28ef0 <__assert_fail@plt+0x17a3c>
   28ed0:	mvn	r4, #-2147483648	; 0x80000000
   28ed4:	sdiv	r6, r4, r0
   28ed8:	cmp	r7, r6
   28edc:	blt	28ef0 <__assert_fail@plt+0x17a3c>
   28ee0:	mul	r6, r7, r0
   28ee4:	mov	r4, #64	; 0x40
   28ee8:	cmp	r6, #63	; 0x3f
   28eec:	bgt	28ef8 <__assert_fail@plt+0x17a44>
   28ef0:	sdiv	r7, r4, r0
   28ef4:	mul	r6, r7, r0
   28ef8:	cmp	r5, #0
   28efc:	moveq	r4, #0
   28f00:	streq	r4, [r8]
   28f04:	sub	r4, r7, r1
   28f08:	cmp	r4, r2
   28f0c:	bge	28fb8 <__assert_fail@plt+0x17b04>
   28f10:	add	r7, r1, r2
   28f14:	mov	r6, #0
   28f18:	mov	r2, #0
   28f1c:	cmp	r7, r3
   28f20:	movwgt	r6, #1
   28f24:	cmn	r3, #1
   28f28:	movwgt	r2, #1
   28f2c:	cmp	r7, r1
   28f30:	bvs	28fec <__assert_fail@plt+0x17b38>
   28f34:	ands	r1, r2, r6
   28f38:	bne	28fec <__assert_fail@plt+0x17b38>
   28f3c:	cmn	r0, #1
   28f40:	ble	28f68 <__assert_fail@plt+0x17ab4>
   28f44:	cmp	r0, #0
   28f48:	beq	28fb4 <__assert_fail@plt+0x17b00>
   28f4c:	cmn	r7, #1
   28f50:	ble	28f8c <__assert_fail@plt+0x17ad8>
   28f54:	mvn	r1, #-2147483648	; 0x80000000
   28f58:	udiv	r1, r1, r0
   28f5c:	cmp	r1, r7
   28f60:	bge	28fb4 <__assert_fail@plt+0x17b00>
   28f64:	b	28fec <__assert_fail@plt+0x17b38>
   28f68:	cmn	r7, #1
   28f6c:	ble	28fa4 <__assert_fail@plt+0x17af0>
   28f70:	cmn	r0, #1
   28f74:	beq	28fb4 <__assert_fail@plt+0x17b00>
   28f78:	mov	r1, #-2147483648	; 0x80000000
   28f7c:	sdiv	r1, r1, r0
   28f80:	cmp	r1, r7
   28f84:	bge	28fb4 <__assert_fail@plt+0x17b00>
   28f88:	b	28fec <__assert_fail@plt+0x17b38>
   28f8c:	beq	28fb4 <__assert_fail@plt+0x17b00>
   28f90:	mov	r1, #-2147483648	; 0x80000000
   28f94:	sdiv	r1, r1, r7
   28f98:	cmp	r1, r0
   28f9c:	bge	28fb4 <__assert_fail@plt+0x17b00>
   28fa0:	b	28fec <__assert_fail@plt+0x17b38>
   28fa4:	mvn	r1, #-2147483648	; 0x80000000
   28fa8:	sdiv	r1, r1, r0
   28fac:	cmp	r7, r1
   28fb0:	blt	28fec <__assert_fail@plt+0x17b38>
   28fb4:	mul	r6, r7, r0
   28fb8:	mov	r0, r5
   28fbc:	mov	r1, r6
   28fc0:	bl	2ac90 <__assert_fail@plt+0x197dc>
   28fc4:	cmp	r6, #0
   28fc8:	movwne	r6, #1
   28fcc:	cmp	r0, #0
   28fd0:	bne	28fe4 <__assert_fail@plt+0x17b30>
   28fd4:	clz	r1, r5
   28fd8:	lsr	r1, r1, #5
   28fdc:	orrs	r1, r1, r6
   28fe0:	bne	28fec <__assert_fail@plt+0x17b38>
   28fe4:	str	r7, [r8]
   28fe8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28fec:	bl	29158 <__assert_fail@plt+0x17ca4>
   28ff0:	push	{fp, lr}
   28ff4:	mov	fp, sp
   28ff8:	mov	r1, #1
   28ffc:	bl	2ac0c <__assert_fail@plt+0x19758>
   29000:	cmp	r0, #0
   29004:	popne	{fp, pc}
   29008:	bl	29158 <__assert_fail@plt+0x17ca4>
   2900c:	push	{fp, lr}
   29010:	mov	fp, sp
   29014:	bl	2ac0c <__assert_fail@plt+0x19758>
   29018:	cmp	r0, #0
   2901c:	popne	{fp, pc}
   29020:	bl	29158 <__assert_fail@plt+0x17ca4>
   29024:	push	{fp, lr}
   29028:	mov	fp, sp
   2902c:	mov	r1, #1
   29030:	bl	2ac0c <__assert_fail@plt+0x19758>
   29034:	cmp	r0, #0
   29038:	popne	{fp, pc}
   2903c:	bl	29158 <__assert_fail@plt+0x17ca4>
   29040:	push	{fp, lr}
   29044:	mov	fp, sp
   29048:	bl	2ac0c <__assert_fail@plt+0x19758>
   2904c:	cmp	r0, #0
   29050:	popne	{fp, pc}
   29054:	bl	29158 <__assert_fail@plt+0x17ca4>
   29058:	push	{r4, r5, r6, sl, fp, lr}
   2905c:	add	fp, sp, #16
   29060:	mov	r5, r0
   29064:	mov	r0, r1
   29068:	mov	r4, r1
   2906c:	bl	2ac60 <__assert_fail@plt+0x197ac>
   29070:	cmp	r0, #0
   29074:	beq	29090 <__assert_fail@plt+0x17bdc>
   29078:	mov	r1, r5
   2907c:	mov	r2, r4
   29080:	mov	r6, r0
   29084:	bl	1125c <memcpy@plt>
   29088:	mov	r0, r6
   2908c:	pop	{r4, r5, r6, sl, fp, pc}
   29090:	bl	29158 <__assert_fail@plt+0x17ca4>
   29094:	push	{r4, r5, r6, sl, fp, lr}
   29098:	add	fp, sp, #16
   2909c:	mov	r5, r0
   290a0:	mov	r0, r1
   290a4:	mov	r4, r1
   290a8:	bl	2ac60 <__assert_fail@plt+0x197ac>
   290ac:	cmp	r0, #0
   290b0:	beq	290cc <__assert_fail@plt+0x17c18>
   290b4:	mov	r1, r5
   290b8:	mov	r2, r4
   290bc:	mov	r6, r0
   290c0:	bl	1125c <memcpy@plt>
   290c4:	mov	r0, r6
   290c8:	pop	{r4, r5, r6, sl, fp, pc}
   290cc:	bl	29158 <__assert_fail@plt+0x17ca4>
   290d0:	push	{r4, r5, r6, sl, fp, lr}
   290d4:	add	fp, sp, #16
   290d8:	mov	r5, r0
   290dc:	add	r0, r1, #1
   290e0:	mov	r4, r1
   290e4:	bl	2ac60 <__assert_fail@plt+0x197ac>
   290e8:	cmp	r0, #0
   290ec:	beq	29114 <__assert_fail@plt+0x17c60>
   290f0:	mov	r6, r0
   290f4:	mov	r0, #0
   290f8:	mov	r1, r5
   290fc:	mov	r2, r4
   29100:	strb	r0, [r6, r4]
   29104:	mov	r0, r6
   29108:	bl	1125c <memcpy@plt>
   2910c:	mov	r0, r6
   29110:	pop	{r4, r5, r6, sl, fp, pc}
   29114:	bl	29158 <__assert_fail@plt+0x17ca4>
   29118:	push	{r4, r5, r6, sl, fp, lr}
   2911c:	add	fp, sp, #16
   29120:	mov	r4, r0
   29124:	bl	11394 <strlen@plt>
   29128:	add	r5, r0, #1
   2912c:	mov	r0, r5
   29130:	bl	2ac60 <__assert_fail@plt+0x197ac>
   29134:	cmp	r0, #0
   29138:	beq	29154 <__assert_fail@plt+0x17ca0>
   2913c:	mov	r1, r4
   29140:	mov	r2, r5
   29144:	mov	r6, r0
   29148:	bl	1125c <memcpy@plt>
   2914c:	mov	r0, r6
   29150:	pop	{r4, r5, r6, sl, fp, pc}
   29154:	bl	29158 <__assert_fail@plt+0x17ca4>
   29158:	push	{fp, lr}
   2915c:	mov	fp, sp
   29160:	movw	r0, #53604	; 0xd164
   29164:	movw	r1, #50529	; 0xc561
   29168:	mov	r2, #5
   2916c:	movt	r0, #3
   29170:	movt	r1, #2
   29174:	ldr	r4, [r0]
   29178:	mov	r0, #0
   2917c:	bl	112b0 <dcgettext@plt>
   29180:	movw	r2, #47602	; 0xb9f2
   29184:	mov	r3, r0
   29188:	mov	r0, r4
   2918c:	mov	r1, #0
   29190:	movt	r2, #2
   29194:	bl	1131c <error@plt>
   29198:	bl	114a8 <abort@plt>
   2919c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   291a0:	add	fp, sp, #24
   291a4:	sub	sp, sp, #16
   291a8:	mov	r8, r0
   291ac:	ldr	r0, [fp, #16]
   291b0:	mov	r7, r3
   291b4:	mov	r4, r2
   291b8:	mov	r2, r1
   291bc:	add	r3, sp, #8
   291c0:	mov	r1, #0
   291c4:	str	r0, [sp]
   291c8:	mov	r0, r8
   291cc:	bl	292ac <__assert_fail@plt+0x17df8>
   291d0:	cmp	r0, #0
   291d4:	bne	29280 <__assert_fail@plt+0x17dcc>
   291d8:	ldr	r6, [sp, #8]
   291dc:	ldr	r5, [sp, #12]
   291e0:	subs	r0, r6, r4
   291e4:	sbcs	r0, r5, r7
   291e8:	blt	2920c <__assert_fail@plt+0x17d58>
   291ec:	ldr	r1, [fp, #8]
   291f0:	ldr	r0, [fp, #12]
   291f4:	subs	r1, r1, r6
   291f8:	sbcs	r0, r0, r5
   291fc:	movge	r0, r6
   29200:	movge	r1, r5
   29204:	subge	sp, fp, #24
   29208:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   2920c:	subs	r0, r6, #1073741824	; 0x40000000
   29210:	sbcs	r0, r5, #0
   29214:	blt	29224 <__assert_fail@plt+0x17d70>
   29218:	bl	113ac <__errno_location@plt>
   2921c:	mov	r1, #75	; 0x4b
   29220:	b	29240 <__assert_fail@plt+0x17d8c>
   29224:	bl	113ac <__errno_location@plt>
   29228:	mvn	r2, #1073741824	; 0x40000000
   2922c:	mvn	r1, #0
   29230:	subs	r2, r2, r6
   29234:	sbcs	r1, r1, r5
   29238:	movlt	r1, #34	; 0x22
   2923c:	movge	r1, #75	; 0x4b
   29240:	str	r1, [r0]
   29244:	ldr	r6, [r0]
   29248:	ldr	r4, [fp, #24]
   2924c:	ldr	r5, [fp, #20]
   29250:	mov	r0, r8
   29254:	bl	14cdc <__assert_fail@plt+0x3828>
   29258:	subs	r1, r6, #22
   2925c:	movw	r2, #48915	; 0xbf13
   29260:	str	r0, [sp]
   29264:	mov	r3, r5
   29268:	movne	r1, r6
   2926c:	cmp	r4, #0
   29270:	movt	r2, #2
   29274:	movweq	r4, #1
   29278:	mov	r0, r4
   2927c:	bl	1131c <error@plt>
   29280:	cmp	r0, #1
   29284:	beq	29218 <__assert_fail@plt+0x17d64>
   29288:	cmp	r0, #3
   2928c:	bne	2929c <__assert_fail@plt+0x17de8>
   29290:	bl	113ac <__errno_location@plt>
   29294:	mov	r1, #0
   29298:	b	29240 <__assert_fail@plt+0x17d8c>
   2929c:	bl	113ac <__errno_location@plt>
   292a0:	b	29244 <__assert_fail@plt+0x17d90>
   292a4:	mov	r1, #10
   292a8:	b	2919c <__assert_fail@plt+0x17ce8>
   292ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   292b0:	add	fp, sp, #28
   292b4:	sub	sp, sp, #36	; 0x24
   292b8:	cmp	r2, #37	; 0x25
   292bc:	bcs	2abec <__assert_fail@plt+0x19738>
   292c0:	ldr	r8, [fp, #8]
   292c4:	mov	r9, r3
   292c8:	mov	r6, r2
   292cc:	mov	r7, r1
   292d0:	mov	r4, r0
   292d4:	bl	113ac <__errno_location@plt>
   292d8:	add	sl, sp, #32
   292dc:	cmp	r7, #0
   292e0:	mov	r5, r0
   292e4:	mov	r0, #0
   292e8:	mov	r2, r6
   292ec:	mov	r3, #0
   292f0:	movne	sl, r7
   292f4:	str	r0, [r5]
   292f8:	mov	r0, r4
   292fc:	mov	r1, sl
   29300:	bl	1146c <__strtoll_internal@plt>
   29304:	mov	r7, r1
   29308:	ldr	r1, [sl]
   2930c:	cmp	r1, r4
   29310:	beq	2934c <__assert_fail@plt+0x17e98>
   29314:	mov	r6, r0
   29318:	ldr	r0, [r5]
   2931c:	cmp	r0, #0
   29320:	beq	294d8 <__assert_fail@plt+0x18024>
   29324:	mov	r5, #4
   29328:	cmp	r0, #34	; 0x22
   2932c:	bne	29730 <__assert_fail@plt+0x1827c>
   29330:	mov	r5, #1
   29334:	cmp	r8, #0
   29338:	beq	294e4 <__assert_fail@plt+0x18030>
   2933c:	ldrb	r4, [r1]
   29340:	cmp	r4, #0
   29344:	bne	29394 <__assert_fail@plt+0x17ee0>
   29348:	b	294e4 <__assert_fail@plt+0x18030>
   2934c:	mov	r5, #4
   29350:	cmp	r8, #0
   29354:	beq	29730 <__assert_fail@plt+0x1827c>
   29358:	mov	r6, r1
   2935c:	ldrb	r1, [r4]
   29360:	cmp	r1, #0
   29364:	beq	29730 <__assert_fail@plt+0x1827c>
   29368:	mov	r0, r8
   2936c:	bl	113a0 <strchr@plt>
   29370:	cmp	r0, #0
   29374:	beq	29730 <__assert_fail@plt+0x1827c>
   29378:	mov	r1, r6
   2937c:	mov	r5, #0
   29380:	mov	r6, #1
   29384:	mov	r7, #0
   29388:	ldrb	r4, [r1]
   2938c:	cmp	r4, #0
   29390:	beq	294e4 <__assert_fail@plt+0x18030>
   29394:	str	r1, [sp, #20]
   29398:	mov	r0, r8
   2939c:	mov	r1, r4
   293a0:	bl	113a0 <strchr@plt>
   293a4:	cmp	r0, #0
   293a8:	beq	29728 <__assert_fail@plt+0x18274>
   293ac:	sub	r0, r4, #69	; 0x45
   293b0:	mov	r1, #1
   293b4:	mov	r3, #0
   293b8:	mov	r2, #1024	; 0x400
   293bc:	cmp	r0, #47	; 0x2f
   293c0:	str	r1, [sp, #16]
   293c4:	bhi	294fc <__assert_fail@plt+0x18048>
   293c8:	add	r1, pc, #0
   293cc:	ldr	pc, [r1, r0, lsl #2]
   293d0:	muleq	r2, r0, r4
   293d4:	strdeq	r9, [r2], -ip
   293d8:	muleq	r2, r0, r4
   293dc:	strdeq	r9, [r2], -ip
   293e0:	strdeq	r9, [r2], -ip
   293e4:	strdeq	r9, [r2], -ip
   293e8:	muleq	r2, r0, r4
   293ec:	strdeq	r9, [r2], -ip
   293f0:	muleq	r2, r0, r4
   293f4:	strdeq	r9, [r2], -ip
   293f8:	strdeq	r9, [r2], -ip
   293fc:	muleq	r2, r0, r4
   29400:	strdeq	r9, [r2], -ip
   29404:	strdeq	r9, [r2], -ip
   29408:	strdeq	r9, [r2], -ip
   2940c:	muleq	r2, r0, r4
   29410:	strdeq	r9, [r2], -ip
   29414:	strdeq	r9, [r2], -ip
   29418:	strdeq	r9, [r2], -ip
   2941c:	strdeq	r9, [r2], -ip
   29420:	muleq	r2, r0, r4
   29424:	muleq	r2, r0, r4
   29428:	strdeq	r9, [r2], -ip
   2942c:	strdeq	r9, [r2], -ip
   29430:	strdeq	r9, [r2], -ip
   29434:	strdeq	r9, [r2], -ip
   29438:	strdeq	r9, [r2], -ip
   2943c:	strdeq	r9, [r2], -ip
   29440:	strdeq	r9, [r2], -ip
   29444:	strdeq	r9, [r2], -ip
   29448:	strdeq	r9, [r2], -ip
   2944c:	strdeq	r9, [r2], -ip
   29450:	strdeq	r9, [r2], -ip
   29454:	strdeq	r9, [r2], -ip
   29458:	muleq	r2, r0, r4
   2945c:	strdeq	r9, [r2], -ip
   29460:	strdeq	r9, [r2], -ip
   29464:	strdeq	r9, [r2], -ip
   29468:	muleq	r2, r0, r4
   2946c:	strdeq	r9, [r2], -ip
   29470:	muleq	r2, r0, r4
   29474:	strdeq	r9, [r2], -ip
   29478:	strdeq	r9, [r2], -ip
   2947c:	strdeq	r9, [r2], -ip
   29480:	strdeq	r9, [r2], -ip
   29484:	strdeq	r9, [r2], -ip
   29488:	strdeq	r9, [r2], -ip
   2948c:	muleq	r2, r0, r4
   29490:	mov	r0, r8
   29494:	mov	r1, #48	; 0x30
   29498:	bl	113a0 <strchr@plt>
   2949c:	cmp	r0, #0
   294a0:	beq	294f4 <__assert_fail@plt+0x18040>
   294a4:	ldr	r1, [sp, #20]
   294a8:	ldrb	r0, [r1, #1]
   294ac:	cmp	r0, #66	; 0x42
   294b0:	cmpne	r0, #68	; 0x44
   294b4:	bne	29630 <__assert_fail@plt+0x1817c>
   294b8:	mov	r0, #2
   294bc:	mov	r2, #1000	; 0x3e8
   294c0:	mov	r3, #0
   294c4:	str	r0, [sp, #16]
   294c8:	sub	r0, r4, #66	; 0x42
   294cc:	cmp	r0, #53	; 0x35
   294d0:	bls	29508 <__assert_fail@plt+0x18054>
   294d4:	b	29728 <__assert_fail@plt+0x18274>
   294d8:	mov	r5, r0
   294dc:	cmp	r8, #0
   294e0:	bne	2933c <__assert_fail@plt+0x17e88>
   294e4:	strd	r6, [r9]
   294e8:	mov	r0, r5
   294ec:	sub	sp, fp, #28
   294f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   294f4:	mov	r3, #0
   294f8:	mov	r2, #1024	; 0x400
   294fc:	sub	r0, r4, #66	; 0x42
   29500:	cmp	r0, #53	; 0x35
   29504:	bhi	29728 <__assert_fail@plt+0x18274>
   29508:	add	r1, pc, #8
   2950c:	str	r3, [sp, #28]
   29510:	str	r2, [sp, #24]
   29514:	ldr	pc, [r1, r0, lsl #2]
   29518:	andeq	r9, r2, r0, lsl #15
   2951c:	andeq	r9, r2, r8, lsr #14
   29520:	andeq	r9, r2, r8, lsr #14
   29524:	muleq	r2, r4, r7
   29528:	andeq	r9, r2, r8, lsr #14
   2952c:	strdeq	r9, [r2], -r0
   29530:	andeq	r9, r2, r8, lsr #14
   29534:	andeq	r9, r2, r8, lsr #14
   29538:	andeq	r9, r2, r8, lsr #14
   2953c:	andeq	r9, r2, r4, ror #12
   29540:	andeq	r9, r2, r8, lsr #14
   29544:	muleq	r2, r4, r6
   29548:	andeq	r9, r2, r8, lsr #14
   2954c:	andeq	r9, r2, r8, lsr #14
   29550:	ldrdeq	r9, [r2], -r8
   29554:	andeq	r9, r2, r8, lsr #14
   29558:	andeq	r9, r2, r8, lsr #14
   2955c:	andeq	r9, r2, r8, lsr #14
   29560:	ldrdeq	r9, [r2], -r4
   29564:	andeq	r9, r2, r8, lsr #14
   29568:	andeq	r9, r2, r8, lsr #14
   2956c:	andeq	r9, r2, r8, lsr #14
   29570:	andeq	r9, r2, r8, lsr #14
   29574:	andeq	r9, r2, ip, lsl r8
   29578:	andeq	r9, r2, ip, lsr r7
   2957c:	andeq	r9, r2, r8, lsr #14
   29580:	andeq	r9, r2, r8, lsr #14
   29584:	andeq	r9, r2, r8, lsr #14
   29588:	andeq	r9, r2, r8, lsr #14
   2958c:	andeq	r9, r2, r8, lsr #14
   29590:	andeq	r9, r2, r8, lsr #14
   29594:	andeq	r9, r2, r8, lsr #14
   29598:	andeq	r9, r2, r0, ror #16
   2959c:	ldrdeq	sl, [r2], -r8
   295a0:	andeq	r9, r2, r8, lsr #14
   295a4:	andeq	r9, r2, r8, lsr #14
   295a8:	andeq	r9, r2, r8, lsr #14
   295ac:	strdeq	r9, [r2], -r0
   295b0:	andeq	r9, r2, r8, lsr #14
   295b4:	andeq	r9, r2, r8, lsr #14
   295b8:	andeq	r9, r2, r8, lsr #14
   295bc:	andeq	r9, r2, r4, ror #12
   295c0:	andeq	r9, r2, r8, lsr #14
   295c4:	muleq	r2, r4, r6
   295c8:	andeq	r9, r2, r8, lsr #14
   295cc:	andeq	r9, r2, r8, lsr #14
   295d0:	andeq	r9, r2, r8, lsr #14
   295d4:	andeq	r9, r2, r8, lsr #14
   295d8:	andeq	r9, r2, r8, lsr #14
   295dc:	andeq	r9, r2, r8, lsr #14
   295e0:	ldrdeq	r9, [r2], -r4
   295e4:	andeq	r9, r2, r8, lsr #14
   295e8:	andeq	r9, r2, r8, lsr #14
   295ec:	andeq	r9, r2, r4, ror r8
   295f0:	cmn	r7, #1
   295f4:	str	r9, [sp, #12]
   295f8:	ble	29888 <__assert_fail@plt+0x183d4>
   295fc:	ldr	r3, [sp, #28]
   29600:	mvn	r0, #0
   29604:	mvn	r1, #-2147483648	; 0x80000000
   29608:	mvn	r8, #0
   2960c:	mvn	r9, #-2147483648	; 0x80000000
   29610:	bl	2b100 <__assert_fail@plt+0x19c4c>
   29614:	ldr	r2, [sp, #24]
   29618:	ldr	r3, [sp, #28]
   2961c:	subs	r0, r0, r6
   29620:	mov	r4, #1
   29624:	sbcs	r0, r1, r7
   29628:	bge	298c8 <__assert_fail@plt+0x18414>
   2962c:	b	298e0 <__assert_fail@plt+0x1842c>
   29630:	cmp	r0, #105	; 0x69
   29634:	mov	r3, #0
   29638:	bne	29718 <__assert_fail@plt+0x18264>
   2963c:	ldrb	r0, [r1, #2]
   29640:	mov	r1, #1
   29644:	mov	r2, #1024	; 0x400
   29648:	cmp	r0, #66	; 0x42
   2964c:	movweq	r1, #3
   29650:	str	r1, [sp, #16]
   29654:	sub	r0, r4, #66	; 0x42
   29658:	cmp	r0, #53	; 0x35
   2965c:	bls	29508 <__assert_fail@plt+0x18054>
   29660:	b	29728 <__assert_fail@plt+0x18274>
   29664:	cmn	r7, #1
   29668:	ble	2991c <__assert_fail@plt+0x18468>
   2966c:	ldr	r3, [sp, #28]
   29670:	mvn	r0, #0
   29674:	mvn	r1, #-2147483648	; 0x80000000
   29678:	bl	2b100 <__assert_fail@plt+0x19c4c>
   2967c:	ldr	r2, [sp, #24]
   29680:	ldr	r3, [sp, #28]
   29684:	subs	r0, r0, r6
   29688:	sbcs	r0, r1, r7
   2968c:	bge	29950 <__assert_fail@plt+0x1849c>
   29690:	b	2a060 <__assert_fail@plt+0x18bac>
   29694:	cmn	r7, #1
   29698:	str	r9, [sp, #12]
   2969c:	ble	29964 <__assert_fail@plt+0x184b0>
   296a0:	ldr	r3, [sp, #28]
   296a4:	mvn	r0, #0
   296a8:	mvn	r1, #-2147483648	; 0x80000000
   296ac:	mvn	r8, #0
   296b0:	mvn	r9, #-2147483648	; 0x80000000
   296b4:	bl	2b100 <__assert_fail@plt+0x19c4c>
   296b8:	ldr	r2, [sp, #24]
   296bc:	ldr	r3, [sp, #28]
   296c0:	subs	r0, r0, r6
   296c4:	mov	r4, #1
   296c8:	sbcs	r0, r1, r7
   296cc:	bge	299a4 <__assert_fail@plt+0x184f0>
   296d0:	b	299bc <__assert_fail@plt+0x18508>
   296d4:	cmn	r7, #1
   296d8:	str	r9, [sp, #12]
   296dc:	ble	299f4 <__assert_fail@plt+0x18540>
   296e0:	ldr	r3, [sp, #28]
   296e4:	mvn	r0, #0
   296e8:	mvn	r1, #-2147483648	; 0x80000000
   296ec:	mvn	r9, #-2147483648	; 0x80000000
   296f0:	str	r0, [sp, #8]
   296f4:	mvn	r0, #0
   296f8:	bl	2b100 <__assert_fail@plt+0x19c4c>
   296fc:	ldr	r2, [sp, #24]
   29700:	ldr	r3, [sp, #28]
   29704:	subs	r0, r0, r6
   29708:	mov	r4, #1
   2970c:	sbcs	r0, r1, r7
   29710:	bge	29a38 <__assert_fail@plt+0x18584>
   29714:	b	29a54 <__assert_fail@plt+0x185a0>
   29718:	mov	r2, #1024	; 0x400
   2971c:	sub	r0, r4, #66	; 0x42
   29720:	cmp	r0, #53	; 0x35
   29724:	bls	29508 <__assert_fail@plt+0x18054>
   29728:	orr	r5, r5, #2
   2972c:	strd	r6, [r9]
   29730:	mov	r0, r5
   29734:	sub	sp, fp, #28
   29738:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2973c:	cmp	r7, #0
   29740:	str	r9, [sp, #12]
   29744:	blt	29d3c <__assert_fail@plt+0x18888>
   29748:	ldr	r3, [sp, #28]
   2974c:	mvn	r0, #0
   29750:	mvn	r1, #-2147483648	; 0x80000000
   29754:	mvn	r9, #-2147483648	; 0x80000000
   29758:	str	r0, [sp, #8]
   2975c:	mvn	r0, #0
   29760:	bl	2b100 <__assert_fail@plt+0x19c4c>
   29764:	ldr	r2, [sp, #24]
   29768:	ldr	r3, [sp, #28]
   2976c:	subs	r0, r0, r6
   29770:	mov	r4, #1
   29774:	sbcs	r0, r1, r7
   29778:	bge	29d80 <__assert_fail@plt+0x188cc>
   2977c:	b	29d9c <__assert_fail@plt+0x188e8>
   29780:	cmn	r7, #1
   29784:	ble	29dd8 <__assert_fail@plt+0x18924>
   29788:	cmp	r7, #2097152	; 0x200000
   2978c:	blt	29e08 <__assert_fail@plt+0x18954>
   29790:	b	2a060 <__assert_fail@plt+0x18bac>
   29794:	cmp	r7, #0
   29798:	str	r9, [sp, #12]
   2979c:	blt	29e18 <__assert_fail@plt+0x18964>
   297a0:	ldr	r3, [sp, #28]
   297a4:	mvn	r0, #0
   297a8:	mvn	r1, #-2147483648	; 0x80000000
   297ac:	mvn	r9, #-2147483648	; 0x80000000
   297b0:	str	r0, [sp, #8]
   297b4:	mvn	r0, #0
   297b8:	bl	2b100 <__assert_fail@plt+0x19c4c>
   297bc:	ldr	r2, [sp, #24]
   297c0:	ldr	r3, [sp, #28]
   297c4:	subs	r0, r0, r6
   297c8:	mov	r4, #1
   297cc:	sbcs	r0, r1, r7
   297d0:	bge	29e5c <__assert_fail@plt+0x189a8>
   297d4:	b	29e78 <__assert_fail@plt+0x189c4>
   297d8:	cmp	r7, #0
   297dc:	str	r9, [sp, #12]
   297e0:	blt	29eb4 <__assert_fail@plt+0x18a00>
   297e4:	ldr	r3, [sp, #28]
   297e8:	mvn	r0, #0
   297ec:	mvn	r1, #-2147483648	; 0x80000000
   297f0:	mvn	r8, #-2147483648	; 0x80000000
   297f4:	str	r0, [sp, #8]
   297f8:	mvn	r0, #0
   297fc:	bl	2b100 <__assert_fail@plt+0x19c4c>
   29800:	ldr	r2, [sp, #24]
   29804:	ldr	r3, [sp, #28]
   29808:	subs	r0, r0, r6
   2980c:	mov	r4, #1
   29810:	sbcs	r0, r1, r7
   29814:	bge	29ef8 <__assert_fail@plt+0x18a44>
   29818:	b	29f14 <__assert_fail@plt+0x18a60>
   2981c:	cmp	r7, #0
   29820:	str	r9, [sp, #12]
   29824:	blt	29f50 <__assert_fail@plt+0x18a9c>
   29828:	ldr	r3, [sp, #28]
   2982c:	mvn	r0, #0
   29830:	mvn	r1, #-2147483648	; 0x80000000
   29834:	mvn	r9, #-2147483648	; 0x80000000
   29838:	str	r0, [sp, #8]
   2983c:	mvn	r0, #0
   29840:	bl	2b100 <__assert_fail@plt+0x19c4c>
   29844:	ldr	r2, [sp, #24]
   29848:	ldr	r3, [sp, #28]
   2984c:	subs	r0, r0, r6
   29850:	mov	r4, #1
   29854:	sbcs	r0, r1, r7
   29858:	bge	29f94 <__assert_fail@plt+0x18ae0>
   2985c:	b	29fb0 <__assert_fail@plt+0x18afc>
   29860:	cmn	r7, #1
   29864:	ble	29ff0 <__assert_fail@plt+0x18b3c>
   29868:	cmp	r7, #4194304	; 0x400000
   2986c:	blt	2a020 <__assert_fail@plt+0x18b6c>
   29870:	b	2a060 <__assert_fail@plt+0x18bac>
   29874:	cmn	r7, #1
   29878:	ble	2a030 <__assert_fail@plt+0x18b7c>
   2987c:	cmp	r7, #1073741824	; 0x40000000
   29880:	bge	2a060 <__assert_fail@plt+0x18bac>
   29884:	b	2a080 <__assert_fail@plt+0x18bcc>
   29888:	and	r0, r6, r7
   2988c:	cmn	r0, #1
   29890:	beq	298c8 <__assert_fail@plt+0x18414>
   29894:	mov	r0, #0
   29898:	mov	r1, #-2147483648	; 0x80000000
   2989c:	mov	r2, r6
   298a0:	mov	r3, r7
   298a4:	mov	r8, #0
   298a8:	mov	r9, #-2147483648	; 0x80000000
   298ac:	bl	2b02c <__assert_fail@plt+0x19b78>
   298b0:	ldr	r2, [sp, #24]
   298b4:	ldr	r3, [sp, #28]
   298b8:	mov	r4, #1
   298bc:	subs	r0, r0, r2
   298c0:	sbcs	r0, r1, r3
   298c4:	blt	29a90 <__assert_fail@plt+0x185dc>
   298c8:	umull	r8, r0, r6, r2
   298cc:	mov	r4, #0
   298d0:	mla	r0, r6, r3, r0
   298d4:	mla	r9, r7, r2, r0
   298d8:	cmp	r9, #0
   298dc:	blt	29a90 <__assert_fail@plt+0x185dc>
   298e0:	ldr	r3, [sp, #28]
   298e4:	mvn	r0, #-2147483648	; 0x80000000
   298e8:	mvn	r1, #-2147483648	; 0x80000000
   298ec:	mov	r6, r4
   298f0:	mvn	r4, #0
   298f4:	str	r0, [sp, #8]
   298f8:	mvn	r0, #0
   298fc:	bl	2b100 <__assert_fail@plt+0x19c4c>
   29900:	ldr	r2, [sp, #24]
   29904:	ldr	r3, [sp, #28]
   29908:	subs	r0, r0, r8
   2990c:	mov	r7, #1
   29910:	sbcs	r0, r1, r9
   29914:	bge	29acc <__assert_fail@plt+0x18618>
   29918:	b	29ae8 <__assert_fail@plt+0x18634>
   2991c:	and	r0, r6, r7
   29920:	cmn	r0, #1
   29924:	beq	29950 <__assert_fail@plt+0x1849c>
   29928:	mov	r0, #0
   2992c:	mov	r1, #-2147483648	; 0x80000000
   29930:	mov	r2, r6
   29934:	mov	r3, r7
   29938:	bl	2b02c <__assert_fail@plt+0x19b78>
   2993c:	ldr	r2, [sp, #24]
   29940:	ldr	r3, [sp, #28]
   29944:	subs	r0, r0, r2
   29948:	sbcs	r0, r1, r3
   2994c:	blt	2a060 <__assert_fail@plt+0x18bac>
   29950:	umull	r0, r1, r6, r2
   29954:	mla	r1, r6, r3, r1
   29958:	mov	r6, r0
   2995c:	mla	r7, r7, r2, r1
   29960:	b	2a7d8 <__assert_fail@plt+0x19324>
   29964:	and	r0, r6, r7
   29968:	cmn	r0, #1
   2996c:	beq	299a4 <__assert_fail@plt+0x184f0>
   29970:	mov	r0, #0
   29974:	mov	r1, #-2147483648	; 0x80000000
   29978:	mov	r2, r6
   2997c:	mov	r3, r7
   29980:	mov	r8, #0
   29984:	mov	r9, #-2147483648	; 0x80000000
   29988:	bl	2b02c <__assert_fail@plt+0x19b78>
   2998c:	ldr	r2, [sp, #24]
   29990:	ldr	r3, [sp, #28]
   29994:	mov	r4, #1
   29998:	subs	r0, r0, r2
   2999c:	sbcs	r0, r1, r3
   299a0:	blt	29b7c <__assert_fail@plt+0x186c8>
   299a4:	umull	r8, r0, r6, r2
   299a8:	mov	r4, #0
   299ac:	mla	r0, r6, r3, r0
   299b0:	mla	r9, r7, r2, r0
   299b4:	cmp	r9, #0
   299b8:	blt	29b7c <__assert_fail@plt+0x186c8>
   299bc:	ldr	r3, [sp, #28]
   299c0:	mvn	r0, #0
   299c4:	mvn	r1, #-2147483648	; 0x80000000
   299c8:	str	r4, [sp, #8]
   299cc:	mvn	r6, #0
   299d0:	mvn	r7, #-2147483648	; 0x80000000
   299d4:	bl	2b100 <__assert_fail@plt+0x19c4c>
   299d8:	ldr	r4, [sp, #24]
   299dc:	ldr	r3, [sp, #28]
   299e0:	subs	r0, r0, r8
   299e4:	mov	r2, #1
   299e8:	sbcs	r0, r1, r9
   299ec:	bge	29bb4 <__assert_fail@plt+0x18700>
   299f0:	b	29cec <__assert_fail@plt+0x18838>
   299f4:	and	r0, r6, r7
   299f8:	cmn	r0, #1
   299fc:	beq	29a38 <__assert_fail@plt+0x18584>
   29a00:	mov	r0, #0
   29a04:	mov	r1, #-2147483648	; 0x80000000
   29a08:	mov	r2, r6
   29a0c:	mov	r3, r7
   29a10:	bl	2b02c <__assert_fail@plt+0x19b78>
   29a14:	ldr	r2, [sp, #24]
   29a18:	ldr	r3, [sp, #28]
   29a1c:	mov	r4, #1
   29a20:	mov	r9, #-2147483648	; 0x80000000
   29a24:	subs	r0, r0, r2
   29a28:	sbcs	r0, r1, r3
   29a2c:	mov	r0, #0
   29a30:	str	r0, [sp, #8]
   29a34:	blt	29bc8 <__assert_fail@plt+0x18714>
   29a38:	umull	r1, r0, r6, r2
   29a3c:	mov	r4, #0
   29a40:	mla	r0, r6, r3, r0
   29a44:	str	r1, [sp, #8]
   29a48:	mla	r9, r7, r2, r0
   29a4c:	cmp	r9, #0
   29a50:	blt	29bc8 <__assert_fail@plt+0x18714>
   29a54:	ldr	r3, [sp, #28]
   29a58:	mvn	r0, #0
   29a5c:	mvn	r1, #-2147483648	; 0x80000000
   29a60:	str	r4, [sp, #4]
   29a64:	mvn	r6, #0
   29a68:	mvn	r8, #-2147483648	; 0x80000000
   29a6c:	bl	2b100 <__assert_fail@plt+0x19c4c>
   29a70:	ldr	r4, [sp, #8]
   29a74:	ldr	r2, [sp, #24]
   29a78:	ldr	r3, [sp, #28]
   29a7c:	mov	r7, #1
   29a80:	subs	r0, r0, r4
   29a84:	sbcs	r0, r1, r9
   29a88:	bge	29c04 <__assert_fail@plt+0x18750>
   29a8c:	b	29c1c <__assert_fail@plt+0x18768>
   29a90:	mov	r0, #-2147483648	; 0x80000000
   29a94:	mov	r1, #-2147483648	; 0x80000000
   29a98:	mov	r2, r8
   29a9c:	mov	r3, r9
   29aa0:	mov	r6, r4
   29aa4:	mov	r4, #0
   29aa8:	str	r0, [sp, #8]
   29aac:	mov	r0, #0
   29ab0:	bl	2b02c <__assert_fail@plt+0x19b78>
   29ab4:	ldr	r2, [sp, #24]
   29ab8:	ldr	r3, [sp, #28]
   29abc:	mov	r7, #1
   29ac0:	subs	r0, r0, r2
   29ac4:	sbcs	r0, r1, r3
   29ac8:	blt	29b3c <__assert_fail@plt+0x18688>
   29acc:	umull	r4, r0, r8, r2
   29ad0:	mov	r7, r6
   29ad4:	mla	r0, r8, r3, r0
   29ad8:	mla	r0, r9, r2, r0
   29adc:	cmp	r0, #0
   29ae0:	str	r0, [sp, #8]
   29ae4:	blt	29b3c <__assert_fail@plt+0x18688>
   29ae8:	ldr	r3, [sp, #28]
   29aec:	mvn	r0, #0
   29af0:	mvn	r1, #-2147483648	; 0x80000000
   29af4:	mov	r9, r7
   29af8:	mvn	r6, #0
   29afc:	mvn	r7, #-2147483648	; 0x80000000
   29b00:	bl	2b100 <__assert_fail@plt+0x19c4c>
   29b04:	ldr	r8, [sp, #8]
   29b08:	ldr	r3, [sp, #24]
   29b0c:	ldr	ip, [sp, #28]
   29b10:	subs	r0, r0, r4
   29b14:	mov	r2, #1
   29b18:	sbcs	r0, r1, r8
   29b1c:	blt	29b30 <__assert_fail@plt+0x1867c>
   29b20:	umull	r6, r0, r4, r3
   29b24:	mov	r2, #0
   29b28:	mla	r0, r4, ip, r0
   29b2c:	mla	r7, r8, r3, r0
   29b30:	orr	r3, r2, r9
   29b34:	ldr	r9, [sp, #12]
   29b38:	b	2a7d8 <__assert_fail@plt+0x19324>
   29b3c:	ldr	r8, [sp, #8]
   29b40:	mov	r0, #0
   29b44:	mov	r1, #-2147483648	; 0x80000000
   29b48:	mov	r2, r4
   29b4c:	mov	r9, r7
   29b50:	mov	r6, #0
   29b54:	mov	r7, #-2147483648	; 0x80000000
   29b58:	mov	r3, r8
   29b5c:	bl	2b02c <__assert_fail@plt+0x19b78>
   29b60:	ldr	r3, [sp, #24]
   29b64:	ldr	ip, [sp, #28]
   29b68:	mov	r2, #1
   29b6c:	subs	r0, r0, r3
   29b70:	sbcs	r0, r1, ip
   29b74:	bge	29b20 <__assert_fail@plt+0x1866c>
   29b78:	b	29b30 <__assert_fail@plt+0x1867c>
   29b7c:	mov	r0, #0
   29b80:	mov	r1, #-2147483648	; 0x80000000
   29b84:	mov	r2, r8
   29b88:	mov	r3, r9
   29b8c:	str	r4, [sp, #8]
   29b90:	mov	r6, #0
   29b94:	mov	r7, #-2147483648	; 0x80000000
   29b98:	bl	2b02c <__assert_fail@plt+0x19b78>
   29b9c:	ldr	r4, [sp, #24]
   29ba0:	ldr	r3, [sp, #28]
   29ba4:	mov	r2, #1
   29ba8:	subs	r0, r0, r4
   29bac:	sbcs	r0, r1, r3
   29bb0:	blt	29cec <__assert_fail@plt+0x18838>
   29bb4:	umull	r6, r0, r8, r4
   29bb8:	mov	r2, #0
   29bbc:	mla	r0, r8, r3, r0
   29bc0:	mla	r7, r9, r4, r0
   29bc4:	b	29cec <__assert_fail@plt+0x18838>
   29bc8:	str	r4, [sp, #4]
   29bcc:	ldr	r4, [sp, #8]
   29bd0:	mov	r0, #0
   29bd4:	mov	r1, #-2147483648	; 0x80000000
   29bd8:	mov	r3, r9
   29bdc:	mov	r2, r4
   29be0:	bl	2b02c <__assert_fail@plt+0x19b78>
   29be4:	ldr	r2, [sp, #24]
   29be8:	ldr	r3, [sp, #28]
   29bec:	mov	r7, #1
   29bf0:	mov	r6, #0
   29bf4:	mov	r8, #-2147483648	; 0x80000000
   29bf8:	subs	r0, r0, r2
   29bfc:	sbcs	r0, r1, r3
   29c00:	blt	29c54 <__assert_fail@plt+0x187a0>
   29c04:	umull	r6, r0, r4, r2
   29c08:	ldr	r7, [sp, #4]
   29c0c:	mla	r0, r4, r3, r0
   29c10:	mla	r8, r9, r2, r0
   29c14:	cmp	r8, #0
   29c18:	blt	29c54 <__assert_fail@plt+0x187a0>
   29c1c:	ldr	r3, [sp, #28]
   29c20:	mvn	r0, #0
   29c24:	mvn	r1, #-2147483648	; 0x80000000
   29c28:	str	r7, [sp, #8]
   29c2c:	mvn	r4, #0
   29c30:	mvn	r9, #-2147483648	; 0x80000000
   29c34:	bl	2b100 <__assert_fail@plt+0x19c4c>
   29c38:	ldr	r2, [sp, #24]
   29c3c:	ldr	r3, [sp, #28]
   29c40:	subs	r0, r0, r6
   29c44:	mov	r7, #1
   29c48:	sbcs	r0, r1, r8
   29c4c:	bge	29c8c <__assert_fail@plt+0x187d8>
   29c50:	b	29ca4 <__assert_fail@plt+0x187f0>
   29c54:	mov	r0, #0
   29c58:	mov	r1, #-2147483648	; 0x80000000
   29c5c:	mov	r2, r6
   29c60:	mov	r3, r8
   29c64:	str	r7, [sp, #8]
   29c68:	bl	2b02c <__assert_fail@plt+0x19b78>
   29c6c:	ldr	r2, [sp, #24]
   29c70:	ldr	r3, [sp, #28]
   29c74:	mov	r7, #1
   29c78:	mov	r4, #0
   29c7c:	mov	r9, #-2147483648	; 0x80000000
   29c80:	subs	r0, r0, r2
   29c84:	sbcs	r0, r1, r3
   29c88:	blt	29cfc <__assert_fail@plt+0x18848>
   29c8c:	umull	r4, r0, r6, r2
   29c90:	ldr	r7, [sp, #8]
   29c94:	mla	r0, r6, r3, r0
   29c98:	mla	r9, r8, r2, r0
   29c9c:	cmp	r9, #0
   29ca0:	blt	29cfc <__assert_fail@plt+0x18848>
   29ca4:	ldr	r3, [sp, #28]
   29ca8:	mvn	r0, #0
   29cac:	mvn	r1, #-2147483648	; 0x80000000
   29cb0:	str	r7, [sp, #8]
   29cb4:	mvn	r6, #0
   29cb8:	mvn	r7, #-2147483648	; 0x80000000
   29cbc:	bl	2b100 <__assert_fail@plt+0x19c4c>
   29cc0:	ldr	r3, [sp, #24]
   29cc4:	ldr	ip, [sp, #28]
   29cc8:	subs	r0, r0, r4
   29ccc:	mov	r2, #1
   29cd0:	mov	r8, r4
   29cd4:	sbcs	r0, r1, r9
   29cd8:	blt	29cec <__assert_fail@plt+0x18838>
   29cdc:	umull	r6, r0, r8, r3
   29ce0:	mov	r2, #0
   29ce4:	mla	r0, r8, ip, r0
   29ce8:	mla	r7, r9, r3, r0
   29cec:	ldr	r0, [sp, #8]
   29cf0:	ldr	r9, [sp, #12]
   29cf4:	orr	r3, r2, r0
   29cf8:	b	2a7d8 <__assert_fail@plt+0x19324>
   29cfc:	mov	r0, #0
   29d00:	mov	r1, #-2147483648	; 0x80000000
   29d04:	mov	r2, r4
   29d08:	mov	r3, r9
   29d0c:	str	r7, [sp, #8]
   29d10:	mov	r8, r4
   29d14:	bl	2b02c <__assert_fail@plt+0x19b78>
   29d18:	ldr	r3, [sp, #24]
   29d1c:	ldr	ip, [sp, #28]
   29d20:	mov	r2, #1
   29d24:	mov	r6, #0
   29d28:	mov	r7, #-2147483648	; 0x80000000
   29d2c:	subs	r0, r0, r3
   29d30:	sbcs	r0, r1, ip
   29d34:	bge	29cdc <__assert_fail@plt+0x18828>
   29d38:	b	29cec <__assert_fail@plt+0x18838>
   29d3c:	and	r0, r6, r7
   29d40:	cmn	r0, #1
   29d44:	beq	29d80 <__assert_fail@plt+0x188cc>
   29d48:	mov	r0, #0
   29d4c:	mov	r1, #-2147483648	; 0x80000000
   29d50:	mov	r2, r6
   29d54:	mov	r3, r7
   29d58:	bl	2b02c <__assert_fail@plt+0x19b78>
   29d5c:	ldr	r2, [sp, #24]
   29d60:	ldr	r3, [sp, #28]
   29d64:	mov	r4, #1
   29d68:	mov	r9, #-2147483648	; 0x80000000
   29d6c:	subs	r0, r0, r2
   29d70:	sbcs	r0, r1, r3
   29d74:	mov	r0, #0
   29d78:	str	r0, [sp, #8]
   29d7c:	blt	2a090 <__assert_fail@plt+0x18bdc>
   29d80:	umull	r1, r0, r6, r2
   29d84:	mov	r4, #0
   29d88:	mla	r0, r6, r3, r0
   29d8c:	str	r1, [sp, #8]
   29d90:	mla	r9, r7, r2, r0
   29d94:	cmp	r9, #0
   29d98:	blt	2a090 <__assert_fail@plt+0x18bdc>
   29d9c:	ldr	r3, [sp, #28]
   29da0:	mvn	r0, #0
   29da4:	mvn	r1, #-2147483648	; 0x80000000
   29da8:	str	r4, [sp, #4]
   29dac:	mvn	r8, #0
   29db0:	mvn	r4, #-2147483648	; 0x80000000
   29db4:	bl	2b100 <__assert_fail@plt+0x19c4c>
   29db8:	ldr	r6, [sp, #8]
   29dbc:	ldr	r2, [sp, #24]
   29dc0:	ldr	r3, [sp, #28]
   29dc4:	mov	r7, #1
   29dc8:	subs	r0, r0, r6
   29dcc:	sbcs	r0, r1, r9
   29dd0:	bge	2a0cc <__assert_fail@plt+0x18c18>
   29dd4:	b	2a0e4 <__assert_fail@plt+0x18c30>
   29dd8:	and	r0, r6, r7
   29ddc:	cmn	r0, #1
   29de0:	beq	29e08 <__assert_fail@plt+0x18954>
   29de4:	mov	r0, #0
   29de8:	mov	r1, #-2147483648	; 0x80000000
   29dec:	mov	r2, r6
   29df0:	mov	r3, r7
   29df4:	bl	2b02c <__assert_fail@plt+0x19b78>
   29df8:	ldr	r3, [sp, #28]
   29dfc:	subs	r0, r0, #1024	; 0x400
   29e00:	sbcs	r0, r1, #0
   29e04:	blt	2a060 <__assert_fail@plt+0x18bac>
   29e08:	lsl	r0, r7, #10
   29e0c:	orr	r7, r0, r6, lsr #22
   29e10:	lsl	r6, r6, #10
   29e14:	b	2a7d8 <__assert_fail@plt+0x19324>
   29e18:	and	r0, r6, r7
   29e1c:	cmn	r0, #1
   29e20:	beq	29e5c <__assert_fail@plt+0x189a8>
   29e24:	mov	r0, #0
   29e28:	mov	r1, #-2147483648	; 0x80000000
   29e2c:	mov	r2, r6
   29e30:	mov	r3, r7
   29e34:	bl	2b02c <__assert_fail@plt+0x19b78>
   29e38:	ldr	r2, [sp, #24]
   29e3c:	ldr	r3, [sp, #28]
   29e40:	mov	r4, #1
   29e44:	mov	r9, #-2147483648	; 0x80000000
   29e48:	subs	r0, r0, r2
   29e4c:	sbcs	r0, r1, r3
   29e50:	mov	r0, #0
   29e54:	str	r0, [sp, #8]
   29e58:	blt	2a3a8 <__assert_fail@plt+0x18ef4>
   29e5c:	umull	r1, r0, r6, r2
   29e60:	mov	r4, #0
   29e64:	mla	r0, r6, r3, r0
   29e68:	str	r1, [sp, #8]
   29e6c:	mla	r9, r7, r2, r0
   29e70:	cmp	r9, #0
   29e74:	blt	2a3a8 <__assert_fail@plt+0x18ef4>
   29e78:	ldr	r3, [sp, #28]
   29e7c:	mvn	r0, #0
   29e80:	mvn	r1, #-2147483648	; 0x80000000
   29e84:	str	r4, [sp, #4]
   29e88:	mvn	r8, #0
   29e8c:	mvn	r4, #-2147483648	; 0x80000000
   29e90:	bl	2b100 <__assert_fail@plt+0x19c4c>
   29e94:	ldr	r6, [sp, #8]
   29e98:	ldr	r2, [sp, #24]
   29e9c:	ldr	r3, [sp, #28]
   29ea0:	mov	r7, #1
   29ea4:	subs	r0, r0, r6
   29ea8:	sbcs	r0, r1, r9
   29eac:	bge	2a3e4 <__assert_fail@plt+0x18f30>
   29eb0:	b	2a3fc <__assert_fail@plt+0x18f48>
   29eb4:	and	r0, r6, r7
   29eb8:	cmn	r0, #1
   29ebc:	beq	29ef8 <__assert_fail@plt+0x18a44>
   29ec0:	mov	r0, #0
   29ec4:	mov	r1, #-2147483648	; 0x80000000
   29ec8:	mov	r2, r6
   29ecc:	mov	r3, r7
   29ed0:	bl	2b02c <__assert_fail@plt+0x19b78>
   29ed4:	ldr	r2, [sp, #24]
   29ed8:	ldr	r3, [sp, #28]
   29edc:	mov	r4, #1
   29ee0:	mov	r8, #-2147483648	; 0x80000000
   29ee4:	subs	r0, r0, r2
   29ee8:	sbcs	r0, r1, r3
   29eec:	mov	r0, #0
   29ef0:	str	r0, [sp, #8]
   29ef4:	blt	2a624 <__assert_fail@plt+0x19170>
   29ef8:	umull	r1, r0, r6, r2
   29efc:	mov	r4, #0
   29f00:	mla	r0, r6, r3, r0
   29f04:	str	r1, [sp, #8]
   29f08:	mla	r8, r7, r2, r0
   29f0c:	cmp	r8, #0
   29f10:	blt	2a624 <__assert_fail@plt+0x19170>
   29f14:	ldr	r3, [sp, #28]
   29f18:	mvn	r0, #0
   29f1c:	mvn	r1, #-2147483648	; 0x80000000
   29f20:	str	r4, [sp, #4]
   29f24:	mvn	r9, #0
   29f28:	mvn	r4, #-2147483648	; 0x80000000
   29f2c:	bl	2b100 <__assert_fail@plt+0x19c4c>
   29f30:	ldr	r6, [sp, #8]
   29f34:	ldr	r2, [sp, #24]
   29f38:	ldr	r3, [sp, #28]
   29f3c:	mov	r7, #1
   29f40:	subs	r0, r0, r6
   29f44:	sbcs	r0, r1, r8
   29f48:	bge	2a660 <__assert_fail@plt+0x191ac>
   29f4c:	b	2a678 <__assert_fail@plt+0x191c4>
   29f50:	and	r0, r6, r7
   29f54:	cmn	r0, #1
   29f58:	beq	29f94 <__assert_fail@plt+0x18ae0>
   29f5c:	mov	r0, #0
   29f60:	mov	r1, #-2147483648	; 0x80000000
   29f64:	mov	r2, r6
   29f68:	mov	r3, r7
   29f6c:	bl	2b02c <__assert_fail@plt+0x19b78>
   29f70:	ldr	r2, [sp, #24]
   29f74:	ldr	r3, [sp, #28]
   29f78:	mov	r4, #1
   29f7c:	mov	r9, #-2147483648	; 0x80000000
   29f80:	subs	r0, r0, r2
   29f84:	sbcs	r0, r1, r3
   29f88:	mov	r0, #0
   29f8c:	str	r0, [sp, #8]
   29f90:	blt	2a840 <__assert_fail@plt+0x1938c>
   29f94:	umull	r1, r0, r6, r2
   29f98:	mov	r4, #0
   29f9c:	mla	r0, r6, r3, r0
   29fa0:	str	r1, [sp, #8]
   29fa4:	mla	r9, r7, r2, r0
   29fa8:	cmp	r9, #0
   29fac:	blt	2a840 <__assert_fail@plt+0x1938c>
   29fb0:	ldr	r3, [sp, #28]
   29fb4:	mvn	r0, #0
   29fb8:	mvn	r1, #-2147483648	; 0x80000000
   29fbc:	str	r4, [sp]
   29fc0:	mvn	r8, #-2147483648	; 0x80000000
   29fc4:	str	r0, [sp, #4]
   29fc8:	mvn	r0, #0
   29fcc:	bl	2b100 <__assert_fail@plt+0x19c4c>
   29fd0:	ldr	r6, [sp, #8]
   29fd4:	ldr	r2, [sp, #24]
   29fd8:	ldr	r3, [sp, #28]
   29fdc:	mov	r7, #1
   29fe0:	subs	r0, r0, r6
   29fe4:	sbcs	r0, r1, r9
   29fe8:	bge	2a880 <__assert_fail@plt+0x193cc>
   29fec:	b	2a89c <__assert_fail@plt+0x193e8>
   29ff0:	and	r0, r6, r7
   29ff4:	cmn	r0, #1
   29ff8:	beq	2a020 <__assert_fail@plt+0x18b6c>
   29ffc:	mov	r0, #0
   2a000:	mov	r1, #-2147483648	; 0x80000000
   2a004:	mov	r2, r6
   2a008:	mov	r3, r7
   2a00c:	bl	2b02c <__assert_fail@plt+0x19b78>
   2a010:	ldr	r3, [sp, #28]
   2a014:	subs	r0, r0, #512	; 0x200
   2a018:	sbcs	r0, r1, #0
   2a01c:	blt	2a060 <__assert_fail@plt+0x18bac>
   2a020:	lsl	r0, r7, #9
   2a024:	orr	r7, r0, r6, lsr #23
   2a028:	lsl	r6, r6, #9
   2a02c:	b	2a7d8 <__assert_fail@plt+0x19324>
   2a030:	and	r0, r6, r7
   2a034:	cmn	r0, #1
   2a038:	beq	2a080 <__assert_fail@plt+0x18bcc>
   2a03c:	mov	r0, #0
   2a040:	mov	r1, #-2147483648	; 0x80000000
   2a044:	mov	r2, r6
   2a048:	mov	r3, r7
   2a04c:	bl	2b02c <__assert_fail@plt+0x19b78>
   2a050:	ldr	r3, [sp, #28]
   2a054:	subs	r0, r0, #2
   2a058:	sbcs	r0, r1, #0
   2a05c:	bge	2a080 <__assert_fail@plt+0x18bcc>
   2a060:	mvn	r0, #-2147483648	; 0x80000000
   2a064:	cmp	r7, #0
   2a068:	mvn	r6, #0
   2a06c:	mov	r3, #1
   2a070:	movlt	r0, #-2147483648	; 0x80000000
   2a074:	movwlt	r6, #0
   2a078:	mov	r7, r0
   2a07c:	b	2a7d8 <__assert_fail@plt+0x19324>
   2a080:	lsl	r0, r7, #1
   2a084:	orr	r7, r0, r6, lsr #31
   2a088:	lsl	r6, r6, #1
   2a08c:	b	2a7d8 <__assert_fail@plt+0x19324>
   2a090:	ldr	r6, [sp, #8]
   2a094:	mov	r0, #0
   2a098:	mov	r1, #-2147483648	; 0x80000000
   2a09c:	mov	r3, r9
   2a0a0:	str	r4, [sp, #4]
   2a0a4:	mov	r2, r6
   2a0a8:	bl	2b02c <__assert_fail@plt+0x19b78>
   2a0ac:	ldr	r2, [sp, #24]
   2a0b0:	ldr	r3, [sp, #28]
   2a0b4:	mov	r7, #1
   2a0b8:	mov	r8, #0
   2a0bc:	mov	r4, #-2147483648	; 0x80000000
   2a0c0:	subs	r0, r0, r2
   2a0c4:	sbcs	r0, r1, r3
   2a0c8:	blt	2a11c <__assert_fail@plt+0x18c68>
   2a0cc:	umull	r8, r0, r6, r2
   2a0d0:	ldr	r7, [sp, #4]
   2a0d4:	mla	r0, r6, r3, r0
   2a0d8:	mla	r4, r9, r2, r0
   2a0dc:	cmp	r4, #0
   2a0e0:	blt	2a11c <__assert_fail@plt+0x18c68>
   2a0e4:	ldr	r3, [sp, #28]
   2a0e8:	mvn	r0, #0
   2a0ec:	mvn	r1, #-2147483648	; 0x80000000
   2a0f0:	str	r7, [sp, #8]
   2a0f4:	mvn	r7, #0
   2a0f8:	mvn	r9, #-2147483648	; 0x80000000
   2a0fc:	bl	2b100 <__assert_fail@plt+0x19c4c>
   2a100:	ldr	r2, [sp, #24]
   2a104:	ldr	r3, [sp, #28]
   2a108:	subs	r0, r0, r8
   2a10c:	mov	r6, #1
   2a110:	sbcs	r0, r1, r4
   2a114:	bge	2a154 <__assert_fail@plt+0x18ca0>
   2a118:	b	2a16c <__assert_fail@plt+0x18cb8>
   2a11c:	mov	r0, #0
   2a120:	mov	r1, #-2147483648	; 0x80000000
   2a124:	mov	r2, r8
   2a128:	mov	r3, r4
   2a12c:	str	r7, [sp, #8]
   2a130:	bl	2b02c <__assert_fail@plt+0x19b78>
   2a134:	ldr	r2, [sp, #24]
   2a138:	ldr	r3, [sp, #28]
   2a13c:	mov	r6, #1
   2a140:	mov	r7, #0
   2a144:	mov	r9, #-2147483648	; 0x80000000
   2a148:	subs	r0, r0, r2
   2a14c:	sbcs	r0, r1, r3
   2a150:	blt	2a1ac <__assert_fail@plt+0x18cf8>
   2a154:	umull	r7, r0, r8, r2
   2a158:	ldr	r6, [sp, #8]
   2a15c:	mla	r0, r8, r3, r0
   2a160:	mla	r9, r4, r2, r0
   2a164:	cmp	r9, #0
   2a168:	blt	2a1ac <__assert_fail@plt+0x18cf8>
   2a16c:	ldr	r3, [sp, #28]
   2a170:	mvn	r0, #0
   2a174:	mvn	r1, #-2147483648	; 0x80000000
   2a178:	str	r6, [sp, #8]
   2a17c:	mvn	r8, #0
   2a180:	mvn	r4, #-2147483648	; 0x80000000
   2a184:	bl	2b100 <__assert_fail@plt+0x19c4c>
   2a188:	ldr	r2, [sp, #24]
   2a18c:	ldr	r3, [sp, #28]
   2a190:	subs	r0, r0, r7
   2a194:	sbcs	r0, r1, r9
   2a198:	bge	2a1f0 <__assert_fail@plt+0x18d3c>
   2a19c:	mov	r0, #1
   2a1a0:	mov	r6, #0
   2a1a4:	str	r0, [sp, #8]
   2a1a8:	b	2a208 <__assert_fail@plt+0x18d54>
   2a1ac:	mov	r0, #0
   2a1b0:	mov	r1, #-2147483648	; 0x80000000
   2a1b4:	mov	r2, r7
   2a1b8:	mov	r3, r9
   2a1bc:	str	r6, [sp, #8]
   2a1c0:	bl	2b02c <__assert_fail@plt+0x19b78>
   2a1c4:	ldr	r2, [sp, #24]
   2a1c8:	ldr	r3, [sp, #28]
   2a1cc:	subs	r0, r0, r2
   2a1d0:	sbcs	r0, r1, r3
   2a1d4:	bge	2a1f0 <__assert_fail@plt+0x18d3c>
   2a1d8:	mov	r0, #1
   2a1dc:	mov	r8, #0
   2a1e0:	mov	r4, #-2147483648	; 0x80000000
   2a1e4:	mov	r6, #0
   2a1e8:	str	r0, [sp, #8]
   2a1ec:	b	2a240 <__assert_fail@plt+0x18d8c>
   2a1f0:	umull	r8, r0, r7, r2
   2a1f4:	mov	r6, #0
   2a1f8:	mla	r0, r7, r3, r0
   2a1fc:	mla	r4, r9, r2, r0
   2a200:	cmp	r4, #0
   2a204:	blt	2a240 <__assert_fail@plt+0x18d8c>
   2a208:	ldr	r3, [sp, #28]
   2a20c:	mvn	r0, #0
   2a210:	mvn	r1, #-2147483648	; 0x80000000
   2a214:	mvn	r9, #0
   2a218:	mvn	r7, #-2147483648	; 0x80000000
   2a21c:	bl	2b100 <__assert_fail@plt+0x19c4c>
   2a220:	ldr	r2, [sp, #24]
   2a224:	ldr	r3, [sp, #28]
   2a228:	subs	r0, r0, r8
   2a22c:	sbcs	r0, r1, r4
   2a230:	bge	2a27c <__assert_fail@plt+0x18dc8>
   2a234:	mov	r0, #1
   2a238:	str	r0, [sp, #8]
   2a23c:	b	2a290 <__assert_fail@plt+0x18ddc>
   2a240:	mov	r0, #0
   2a244:	mov	r1, #-2147483648	; 0x80000000
   2a248:	mov	r2, r8
   2a24c:	mov	r3, r4
   2a250:	bl	2b02c <__assert_fail@plt+0x19b78>
   2a254:	ldr	r2, [sp, #24]
   2a258:	ldr	r3, [sp, #28]
   2a25c:	subs	r0, r0, r2
   2a260:	sbcs	r0, r1, r3
   2a264:	bge	2a27c <__assert_fail@plt+0x18dc8>
   2a268:	mov	r0, #1
   2a26c:	mov	r9, #0
   2a270:	mov	r7, #-2147483648	; 0x80000000
   2a274:	str	r0, [sp, #8]
   2a278:	b	2a2cc <__assert_fail@plt+0x18e18>
   2a27c:	umull	r9, r0, r8, r2
   2a280:	mla	r0, r8, r3, r0
   2a284:	mla	r7, r4, r2, r0
   2a288:	cmp	r7, #0
   2a28c:	blt	2a2cc <__assert_fail@plt+0x18e18>
   2a290:	ldr	r3, [sp, #28]
   2a294:	mvn	r0, #0
   2a298:	mvn	r1, #-2147483648	; 0x80000000
   2a29c:	mvn	r8, #0
   2a2a0:	mvn	r4, #-2147483648	; 0x80000000
   2a2a4:	bl	2b100 <__assert_fail@plt+0x19c4c>
   2a2a8:	ldr	r2, [sp, #24]
   2a2ac:	ldr	r3, [sp, #28]
   2a2b0:	subs	r0, r0, r9
   2a2b4:	sbcs	r0, r1, r7
   2a2b8:	bge	2a30c <__assert_fail@plt+0x18e58>
   2a2bc:	ldr	r9, [sp, #12]
   2a2c0:	mov	r0, #1
   2a2c4:	str	r0, [sp, #8]
   2a2c8:	b	2a324 <__assert_fail@plt+0x18e70>
   2a2cc:	mov	r0, #0
   2a2d0:	mov	r1, #-2147483648	; 0x80000000
   2a2d4:	mov	r2, r9
   2a2d8:	mov	r3, r7
   2a2dc:	bl	2b02c <__assert_fail@plt+0x19b78>
   2a2e0:	ldr	r2, [sp, #24]
   2a2e4:	ldr	r3, [sp, #28]
   2a2e8:	subs	r0, r0, r2
   2a2ec:	sbcs	r0, r1, r3
   2a2f0:	bge	2a30c <__assert_fail@plt+0x18e58>
   2a2f4:	ldr	r9, [sp, #12]
   2a2f8:	mov	r0, #1
   2a2fc:	mov	r8, #0
   2a300:	mov	r4, #-2147483648	; 0x80000000
   2a304:	str	r0, [sp, #8]
   2a308:	b	2a374 <__assert_fail@plt+0x18ec0>
   2a30c:	umull	r8, r0, r9, r2
   2a310:	mla	r0, r9, r3, r0
   2a314:	ldr	r9, [sp, #12]
   2a318:	mla	r4, r7, r2, r0
   2a31c:	cmp	r4, #0
   2a320:	blt	2a374 <__assert_fail@plt+0x18ec0>
   2a324:	ldr	r3, [sp, #28]
   2a328:	mvn	r0, #0
   2a32c:	mvn	r1, #-2147483648	; 0x80000000
   2a330:	mvn	r6, #0
   2a334:	bl	2b100 <__assert_fail@plt+0x19c4c>
   2a338:	ldr	r7, [sp, #24]
   2a33c:	ldr	r3, [sp, #28]
   2a340:	subs	r0, r0, r8
   2a344:	mov	r2, #1
   2a348:	sbcs	r0, r1, r4
   2a34c:	mvn	r0, #-2147483648	; 0x80000000
   2a350:	blt	2a364 <__assert_fail@plt+0x18eb0>
   2a354:	umull	r6, r0, r8, r7
   2a358:	mov	r2, #0
   2a35c:	mla	r0, r8, r3, r0
   2a360:	mla	r0, r4, r7, r0
   2a364:	ldr	r1, [sp, #8]
   2a368:	mov	r7, r0
   2a36c:	orr	r3, r2, r1
   2a370:	b	2a7d8 <__assert_fail@plt+0x19324>
   2a374:	mov	r0, #0
   2a378:	mov	r1, #-2147483648	; 0x80000000
   2a37c:	mov	r2, r8
   2a380:	mov	r3, r4
   2a384:	bl	2b02c <__assert_fail@plt+0x19b78>
   2a388:	ldr	r7, [sp, #24]
   2a38c:	ldr	r3, [sp, #28]
   2a390:	mov	r2, #1
   2a394:	subs	r0, r0, r7
   2a398:	sbcs	r0, r1, r3
   2a39c:	mov	r0, #-2147483648	; 0x80000000
   2a3a0:	bge	2a354 <__assert_fail@plt+0x18ea0>
   2a3a4:	b	2a364 <__assert_fail@plt+0x18eb0>
   2a3a8:	ldr	r6, [sp, #8]
   2a3ac:	mov	r0, #0
   2a3b0:	mov	r1, #-2147483648	; 0x80000000
   2a3b4:	mov	r3, r9
   2a3b8:	str	r4, [sp, #4]
   2a3bc:	mov	r2, r6
   2a3c0:	bl	2b02c <__assert_fail@plt+0x19b78>
   2a3c4:	ldr	r2, [sp, #24]
   2a3c8:	ldr	r3, [sp, #28]
   2a3cc:	mov	r7, #1
   2a3d0:	mov	r8, #0
   2a3d4:	mov	r4, #-2147483648	; 0x80000000
   2a3d8:	subs	r0, r0, r2
   2a3dc:	sbcs	r0, r1, r3
   2a3e0:	blt	2a438 <__assert_fail@plt+0x18f84>
   2a3e4:	umull	r8, r0, r6, r2
   2a3e8:	ldr	r7, [sp, #4]
   2a3ec:	mla	r0, r6, r3, r0
   2a3f0:	mla	r4, r9, r2, r0
   2a3f4:	cmp	r4, #0
   2a3f8:	blt	2a438 <__assert_fail@plt+0x18f84>
   2a3fc:	ldr	r3, [sp, #28]
   2a400:	mvn	r0, #0
   2a404:	mvn	r1, #-2147483648	; 0x80000000
   2a408:	str	r7, [sp, #4]
   2a40c:	mvn	r7, #0
   2a410:	mvn	r9, #-2147483648	; 0x80000000
   2a414:	bl	2b100 <__assert_fail@plt+0x19c4c>
   2a418:	ldr	r2, [sp, #24]
   2a41c:	ldr	r3, [sp, #28]
   2a420:	subs	r0, r0, r8
   2a424:	mov	r6, #1
   2a428:	sbcs	r0, r1, r4
   2a42c:	str	r6, [sp, #8]
   2a430:	bge	2a474 <__assert_fail@plt+0x18fc0>
   2a434:	b	2a490 <__assert_fail@plt+0x18fdc>
   2a438:	mov	r0, #0
   2a43c:	mov	r1, #-2147483648	; 0x80000000
   2a440:	mov	r2, r8
   2a444:	mov	r3, r4
   2a448:	str	r7, [sp, #4]
   2a44c:	bl	2b02c <__assert_fail@plt+0x19b78>
   2a450:	ldr	r2, [sp, #24]
   2a454:	ldr	r3, [sp, #28]
   2a458:	mov	r7, #1
   2a45c:	mov	r9, #-2147483648	; 0x80000000
   2a460:	str	r7, [sp, #8]
   2a464:	mov	r7, #0
   2a468:	subs	r0, r0, r2
   2a46c:	sbcs	r0, r1, r3
   2a470:	blt	2a4c8 <__assert_fail@plt+0x19014>
   2a474:	umull	r7, r0, r8, r2
   2a478:	mla	r0, r8, r3, r0
   2a47c:	mla	r9, r4, r2, r0
   2a480:	ldr	r0, [sp, #4]
   2a484:	cmp	r9, #0
   2a488:	str	r0, [sp, #8]
   2a48c:	blt	2a4c8 <__assert_fail@plt+0x19014>
   2a490:	ldr	r3, [sp, #28]
   2a494:	mvn	r0, #0
   2a498:	mvn	r1, #-2147483648	; 0x80000000
   2a49c:	mvn	r4, #0
   2a4a0:	mvn	r8, #-2147483648	; 0x80000000
   2a4a4:	bl	2b100 <__assert_fail@plt+0x19c4c>
   2a4a8:	ldr	r2, [sp, #24]
   2a4ac:	ldr	r3, [sp, #28]
   2a4b0:	subs	r0, r0, r7
   2a4b4:	sbcs	r0, r1, r9
   2a4b8:	bge	2a504 <__assert_fail@plt+0x19050>
   2a4bc:	mov	r0, #1
   2a4c0:	str	r0, [sp, #8]
   2a4c4:	b	2a518 <__assert_fail@plt+0x19064>
   2a4c8:	mov	r0, #0
   2a4cc:	mov	r1, #-2147483648	; 0x80000000
   2a4d0:	mov	r2, r7
   2a4d4:	mov	r3, r9
   2a4d8:	bl	2b02c <__assert_fail@plt+0x19b78>
   2a4dc:	ldr	r2, [sp, #24]
   2a4e0:	ldr	r3, [sp, #28]
   2a4e4:	subs	r0, r0, r2
   2a4e8:	sbcs	r0, r1, r3
   2a4ec:	bge	2a504 <__assert_fail@plt+0x19050>
   2a4f0:	mov	r0, #1
   2a4f4:	mov	r4, #0
   2a4f8:	mov	r8, #-2147483648	; 0x80000000
   2a4fc:	str	r0, [sp, #8]
   2a500:	b	2a54c <__assert_fail@plt+0x19098>
   2a504:	umull	r4, r0, r7, r2
   2a508:	mla	r0, r7, r3, r0
   2a50c:	mla	r8, r9, r2, r0
   2a510:	cmp	r8, #0
   2a514:	blt	2a54c <__assert_fail@plt+0x19098>
   2a518:	ldr	r3, [sp, #28]
   2a51c:	mvn	r0, #0
   2a520:	mvn	r1, #-2147483648	; 0x80000000
   2a524:	mvn	r6, #0
   2a528:	mvn	r9, #-2147483648	; 0x80000000
   2a52c:	bl	2b100 <__assert_fail@plt+0x19c4c>
   2a530:	ldr	r2, [sp, #24]
   2a534:	ldr	r3, [sp, #28]
   2a538:	subs	r0, r0, r4
   2a53c:	sbcs	r0, r1, r8
   2a540:	bge	2a584 <__assert_fail@plt+0x190d0>
   2a544:	mov	r8, #1
   2a548:	b	2a59c <__assert_fail@plt+0x190e8>
   2a54c:	mov	r0, #0
   2a550:	mov	r1, #-2147483648	; 0x80000000
   2a554:	mov	r2, r4
   2a558:	mov	r3, r8
   2a55c:	bl	2b02c <__assert_fail@plt+0x19b78>
   2a560:	ldr	r2, [sp, #24]
   2a564:	ldr	r3, [sp, #28]
   2a568:	subs	r0, r0, r2
   2a56c:	sbcs	r0, r1, r3
   2a570:	bge	2a584 <__assert_fail@plt+0x190d0>
   2a574:	mov	r8, #1
   2a578:	mov	r6, #0
   2a57c:	mov	r9, #-2147483648	; 0x80000000
   2a580:	b	2a5ec <__assert_fail@plt+0x19138>
   2a584:	umull	r6, r0, r4, r2
   2a588:	mla	r0, r4, r3, r0
   2a58c:	mla	r9, r8, r2, r0
   2a590:	ldr	r8, [sp, #8]
   2a594:	cmp	r9, #0
   2a598:	blt	2a5ec <__assert_fail@plt+0x19138>
   2a59c:	ldr	r3, [sp, #28]
   2a5a0:	mvn	r0, #0
   2a5a4:	mvn	r1, #-2147483648	; 0x80000000
   2a5a8:	mvn	r4, #0
   2a5ac:	mvn	r7, #-2147483648	; 0x80000000
   2a5b0:	bl	2b100 <__assert_fail@plt+0x19c4c>
   2a5b4:	ldr	r3, [sp, #24]
   2a5b8:	ldr	ip, [sp, #28]
   2a5bc:	subs	r0, r0, r6
   2a5c0:	mov	r2, #1
   2a5c4:	sbcs	r0, r1, r9
   2a5c8:	blt	2a5dc <__assert_fail@plt+0x19128>
   2a5cc:	umull	r4, r0, r6, r3
   2a5d0:	mov	r2, #0
   2a5d4:	mla	r0, r6, ip, r0
   2a5d8:	mla	r7, r9, r3, r0
   2a5dc:	ldr	r9, [sp, #12]
   2a5e0:	orr	r3, r2, r8
   2a5e4:	mov	r6, r4
   2a5e8:	b	2a7d8 <__assert_fail@plt+0x19324>
   2a5ec:	mov	r0, #0
   2a5f0:	mov	r1, #-2147483648	; 0x80000000
   2a5f4:	mov	r2, r6
   2a5f8:	mov	r3, r9
   2a5fc:	bl	2b02c <__assert_fail@plt+0x19b78>
   2a600:	ldr	r3, [sp, #24]
   2a604:	ldr	ip, [sp, #28]
   2a608:	mov	r2, #1
   2a60c:	mov	r4, #0
   2a610:	mov	r7, #-2147483648	; 0x80000000
   2a614:	subs	r0, r0, r3
   2a618:	sbcs	r0, r1, ip
   2a61c:	bge	2a5cc <__assert_fail@plt+0x19118>
   2a620:	b	2a5dc <__assert_fail@plt+0x19128>
   2a624:	ldr	r6, [sp, #8]
   2a628:	mov	r0, #0
   2a62c:	mov	r1, #-2147483648	; 0x80000000
   2a630:	mov	r3, r8
   2a634:	str	r4, [sp, #4]
   2a638:	mov	r2, r6
   2a63c:	bl	2b02c <__assert_fail@plt+0x19b78>
   2a640:	ldr	r2, [sp, #24]
   2a644:	ldr	r3, [sp, #28]
   2a648:	mov	r7, #1
   2a64c:	mov	r9, #0
   2a650:	mov	r4, #-2147483648	; 0x80000000
   2a654:	subs	r0, r0, r2
   2a658:	sbcs	r0, r1, r3
   2a65c:	blt	2a6b4 <__assert_fail@plt+0x19200>
   2a660:	umull	r9, r0, r6, r2
   2a664:	ldr	r7, [sp, #4]
   2a668:	mla	r0, r6, r3, r0
   2a66c:	mla	r4, r8, r2, r0
   2a670:	cmp	r4, #0
   2a674:	blt	2a6b4 <__assert_fail@plt+0x19200>
   2a678:	ldr	r3, [sp, #28]
   2a67c:	mvn	r0, #0
   2a680:	mvn	r1, #-2147483648	; 0x80000000
   2a684:	str	r7, [sp, #4]
   2a688:	mvn	r8, #0
   2a68c:	mvn	r7, #-2147483648	; 0x80000000
   2a690:	bl	2b100 <__assert_fail@plt+0x19c4c>
   2a694:	ldr	r2, [sp, #24]
   2a698:	ldr	r3, [sp, #28]
   2a69c:	subs	r0, r0, r9
   2a6a0:	mov	r6, #1
   2a6a4:	sbcs	r0, r1, r4
   2a6a8:	str	r6, [sp, #8]
   2a6ac:	bge	2a6f0 <__assert_fail@plt+0x1923c>
   2a6b0:	b	2a70c <__assert_fail@plt+0x19258>
   2a6b4:	mov	r0, #0
   2a6b8:	mov	r1, #-2147483648	; 0x80000000
   2a6bc:	mov	r2, r9
   2a6c0:	mov	r3, r4
   2a6c4:	str	r7, [sp, #4]
   2a6c8:	bl	2b02c <__assert_fail@plt+0x19b78>
   2a6cc:	ldr	r2, [sp, #24]
   2a6d0:	ldr	r3, [sp, #28]
   2a6d4:	mov	r7, #1
   2a6d8:	mov	r8, #0
   2a6dc:	str	r7, [sp, #8]
   2a6e0:	mov	r7, #-2147483648	; 0x80000000
   2a6e4:	subs	r0, r0, r2
   2a6e8:	sbcs	r0, r1, r3
   2a6ec:	blt	2a740 <__assert_fail@plt+0x1928c>
   2a6f0:	umull	r8, r0, r9, r2
   2a6f4:	mla	r0, r9, r3, r0
   2a6f8:	mla	r7, r4, r2, r0
   2a6fc:	ldr	r0, [sp, #4]
   2a700:	cmp	r7, #0
   2a704:	str	r0, [sp, #8]
   2a708:	blt	2a740 <__assert_fail@plt+0x1928c>
   2a70c:	ldr	r3, [sp, #28]
   2a710:	mvn	r0, #0
   2a714:	mvn	r1, #-2147483648	; 0x80000000
   2a718:	mvn	r4, #0
   2a71c:	mvn	r9, #-2147483648	; 0x80000000
   2a720:	bl	2b100 <__assert_fail@plt+0x19c4c>
   2a724:	ldr	r2, [sp, #24]
   2a728:	ldr	r3, [sp, #28]
   2a72c:	subs	r0, r0, r8
   2a730:	sbcs	r0, r1, r7
   2a734:	bge	2a778 <__assert_fail@plt+0x192c4>
   2a738:	mov	r8, #1
   2a73c:	b	2a790 <__assert_fail@plt+0x192dc>
   2a740:	mov	r0, #0
   2a744:	mov	r1, #-2147483648	; 0x80000000
   2a748:	mov	r2, r8
   2a74c:	mov	r3, r7
   2a750:	bl	2b02c <__assert_fail@plt+0x19b78>
   2a754:	ldr	r2, [sp, #24]
   2a758:	ldr	r3, [sp, #28]
   2a75c:	subs	r0, r0, r2
   2a760:	sbcs	r0, r1, r3
   2a764:	bge	2a778 <__assert_fail@plt+0x192c4>
   2a768:	mov	r8, #1
   2a76c:	mov	r4, #0
   2a770:	mov	r9, #-2147483648	; 0x80000000
   2a774:	b	2a808 <__assert_fail@plt+0x19354>
   2a778:	umull	r4, r0, r8, r2
   2a77c:	mla	r0, r8, r3, r0
   2a780:	ldr	r8, [sp, #8]
   2a784:	mla	r9, r7, r2, r0
   2a788:	cmp	r9, #0
   2a78c:	blt	2a808 <__assert_fail@plt+0x19354>
   2a790:	ldr	r3, [sp, #28]
   2a794:	mvn	r0, #0
   2a798:	mvn	r1, #-2147483648	; 0x80000000
   2a79c:	mvn	r6, #0
   2a7a0:	mvn	r7, #-2147483648	; 0x80000000
   2a7a4:	bl	2b100 <__assert_fail@plt+0x19c4c>
   2a7a8:	ldr	r3, [sp, #24]
   2a7ac:	ldr	ip, [sp, #28]
   2a7b0:	subs	r0, r0, r4
   2a7b4:	mov	r2, #1
   2a7b8:	sbcs	r0, r1, r9
   2a7bc:	blt	2a7d0 <__assert_fail@plt+0x1931c>
   2a7c0:	umull	r6, r0, r4, r3
   2a7c4:	mov	r2, #0
   2a7c8:	mla	r0, r4, ip, r0
   2a7cc:	mla	r7, r9, r3, r0
   2a7d0:	ldr	r9, [sp, #12]
   2a7d4:	orr	r3, r2, r8
   2a7d8:	ldr	r1, [sp, #20]
   2a7dc:	ldr	r2, [sp, #16]
   2a7e0:	orr	r5, r3, r5
   2a7e4:	add	r0, r1, r2
   2a7e8:	str	r0, [sl]
   2a7ec:	ldrb	r0, [r1, r2]
   2a7f0:	cmp	r0, #0
   2a7f4:	orrne	r5, r5, #2
   2a7f8:	strd	r6, [r9]
   2a7fc:	mov	r0, r5
   2a800:	sub	sp, fp, #28
   2a804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a808:	mov	r0, #0
   2a80c:	mov	r1, #-2147483648	; 0x80000000
   2a810:	mov	r2, r4
   2a814:	mov	r3, r9
   2a818:	bl	2b02c <__assert_fail@plt+0x19b78>
   2a81c:	ldr	r3, [sp, #24]
   2a820:	ldr	ip, [sp, #28]
   2a824:	mov	r2, #1
   2a828:	mov	r6, #0
   2a82c:	mov	r7, #-2147483648	; 0x80000000
   2a830:	subs	r0, r0, r3
   2a834:	sbcs	r0, r1, ip
   2a838:	bge	2a7c0 <__assert_fail@plt+0x1930c>
   2a83c:	b	2a7d0 <__assert_fail@plt+0x1931c>
   2a840:	ldr	r6, [sp, #8]
   2a844:	mov	r0, #0
   2a848:	mov	r1, #-2147483648	; 0x80000000
   2a84c:	mov	r3, r9
   2a850:	str	r4, [sp]
   2a854:	mov	r2, r6
   2a858:	bl	2b02c <__assert_fail@plt+0x19b78>
   2a85c:	ldr	r2, [sp, #24]
   2a860:	ldr	r3, [sp, #28]
   2a864:	mov	r7, #1
   2a868:	mov	r8, #-2147483648	; 0x80000000
   2a86c:	subs	r0, r0, r2
   2a870:	sbcs	r0, r1, r3
   2a874:	mov	r0, #0
   2a878:	str	r0, [sp, #4]
   2a87c:	blt	2a8dc <__assert_fail@plt+0x19428>
   2a880:	umull	r1, r0, r6, r2
   2a884:	ldr	r7, [sp]
   2a888:	mla	r0, r6, r3, r0
   2a88c:	str	r1, [sp, #4]
   2a890:	mla	r8, r9, r2, r0
   2a894:	cmp	r8, #0
   2a898:	blt	2a8dc <__assert_fail@plt+0x19428>
   2a89c:	ldr	r3, [sp, #28]
   2a8a0:	mvn	r0, #0
   2a8a4:	mvn	r1, #-2147483648	; 0x80000000
   2a8a8:	str	r7, [sp]
   2a8ac:	mvn	r7, #0
   2a8b0:	mvn	r4, #-2147483648	; 0x80000000
   2a8b4:	bl	2b100 <__assert_fail@plt+0x19c4c>
   2a8b8:	mov	r6, #1
   2a8bc:	ldr	r2, [sp, #24]
   2a8c0:	ldr	r3, [sp, #28]
   2a8c4:	str	r6, [sp, #8]
   2a8c8:	ldr	r6, [sp, #4]
   2a8cc:	subs	r0, r0, r6
   2a8d0:	sbcs	r0, r1, r8
   2a8d4:	bge	2a91c <__assert_fail@plt+0x19468>
   2a8d8:	b	2a938 <__assert_fail@plt+0x19484>
   2a8dc:	ldr	r6, [sp, #4]
   2a8e0:	mov	r0, #0
   2a8e4:	mov	r1, #-2147483648	; 0x80000000
   2a8e8:	mov	r3, r8
   2a8ec:	str	r7, [sp]
   2a8f0:	mov	r2, r6
   2a8f4:	bl	2b02c <__assert_fail@plt+0x19b78>
   2a8f8:	ldr	r2, [sp, #24]
   2a8fc:	ldr	r3, [sp, #28]
   2a900:	mov	r7, #1
   2a904:	mov	r4, #-2147483648	; 0x80000000
   2a908:	str	r7, [sp, #8]
   2a90c:	mov	r7, #0
   2a910:	subs	r0, r0, r2
   2a914:	sbcs	r0, r1, r3
   2a918:	blt	2a970 <__assert_fail@plt+0x194bc>
   2a91c:	umull	r7, r0, r6, r2
   2a920:	mla	r0, r6, r3, r0
   2a924:	mla	r4, r8, r2, r0
   2a928:	ldr	r0, [sp]
   2a92c:	cmp	r4, #0
   2a930:	str	r0, [sp, #8]
   2a934:	blt	2a970 <__assert_fail@plt+0x194bc>
   2a938:	ldr	r3, [sp, #28]
   2a93c:	mvn	r0, #0
   2a940:	mvn	r1, #-2147483648	; 0x80000000
   2a944:	mvn	r9, #0
   2a948:	mvn	r8, #-2147483648	; 0x80000000
   2a94c:	bl	2b100 <__assert_fail@plt+0x19c4c>
   2a950:	ldr	r2, [sp, #24]
   2a954:	ldr	r3, [sp, #28]
   2a958:	subs	r0, r0, r7
   2a95c:	sbcs	r0, r1, r4
   2a960:	bge	2a9ac <__assert_fail@plt+0x194f8>
   2a964:	mov	r0, #1
   2a968:	str	r0, [sp, #8]
   2a96c:	b	2a9c0 <__assert_fail@plt+0x1950c>
   2a970:	mov	r0, #0
   2a974:	mov	r1, #-2147483648	; 0x80000000
   2a978:	mov	r2, r7
   2a97c:	mov	r3, r4
   2a980:	bl	2b02c <__assert_fail@plt+0x19b78>
   2a984:	ldr	r2, [sp, #24]
   2a988:	ldr	r3, [sp, #28]
   2a98c:	subs	r0, r0, r2
   2a990:	sbcs	r0, r1, r3
   2a994:	bge	2a9ac <__assert_fail@plt+0x194f8>
   2a998:	mov	r0, #1
   2a99c:	mov	r9, #0
   2a9a0:	mov	r8, #-2147483648	; 0x80000000
   2a9a4:	str	r0, [sp, #8]
   2a9a8:	b	2a9f8 <__assert_fail@plt+0x19544>
   2a9ac:	umull	r9, r0, r7, r2
   2a9b0:	mla	r0, r7, r3, r0
   2a9b4:	mla	r8, r4, r2, r0
   2a9b8:	cmp	r8, #0
   2a9bc:	blt	2a9f8 <__assert_fail@plt+0x19544>
   2a9c0:	ldr	r3, [sp, #28]
   2a9c4:	mvn	r0, #0
   2a9c8:	mvn	r1, #-2147483648	; 0x80000000
   2a9cc:	mvn	r4, #0
   2a9d0:	mvn	r7, #-2147483648	; 0x80000000
   2a9d4:	bl	2b100 <__assert_fail@plt+0x19c4c>
   2a9d8:	ldr	r2, [sp, #24]
   2a9dc:	ldr	r3, [sp, #28]
   2a9e0:	subs	r0, r0, r9
   2a9e4:	sbcs	r0, r1, r8
   2a9e8:	bge	2aa34 <__assert_fail@plt+0x19580>
   2a9ec:	mov	r0, #1
   2a9f0:	str	r0, [sp, #8]
   2a9f4:	b	2aa48 <__assert_fail@plt+0x19594>
   2a9f8:	mov	r0, #0
   2a9fc:	mov	r1, #-2147483648	; 0x80000000
   2aa00:	mov	r2, r9
   2aa04:	mov	r3, r8
   2aa08:	bl	2b02c <__assert_fail@plt+0x19b78>
   2aa0c:	ldr	r2, [sp, #24]
   2aa10:	ldr	r3, [sp, #28]
   2aa14:	subs	r0, r0, r2
   2aa18:	sbcs	r0, r1, r3
   2aa1c:	bge	2aa34 <__assert_fail@plt+0x19580>
   2aa20:	mov	r0, #1
   2aa24:	mov	r4, #0
   2aa28:	mov	r7, #-2147483648	; 0x80000000
   2aa2c:	str	r0, [sp, #8]
   2aa30:	b	2aa80 <__assert_fail@plt+0x195cc>
   2aa34:	umull	r4, r0, r9, r2
   2aa38:	mla	r0, r9, r3, r0
   2aa3c:	mla	r7, r8, r2, r0
   2aa40:	cmp	r7, #0
   2aa44:	blt	2aa80 <__assert_fail@plt+0x195cc>
   2aa48:	ldr	r3, [sp, #28]
   2aa4c:	mvn	r0, #0
   2aa50:	mvn	r1, #-2147483648	; 0x80000000
   2aa54:	mvn	r8, #0
   2aa58:	mvn	r9, #-2147483648	; 0x80000000
   2aa5c:	bl	2b100 <__assert_fail@plt+0x19c4c>
   2aa60:	ldr	r2, [sp, #24]
   2aa64:	ldr	r3, [sp, #28]
   2aa68:	subs	r0, r0, r4
   2aa6c:	sbcs	r0, r1, r7
   2aa70:	bge	2aabc <__assert_fail@plt+0x19608>
   2aa74:	mov	r0, #1
   2aa78:	str	r0, [sp, #8]
   2aa7c:	b	2aad0 <__assert_fail@plt+0x1961c>
   2aa80:	mov	r0, #0
   2aa84:	mov	r1, #-2147483648	; 0x80000000
   2aa88:	mov	r2, r4
   2aa8c:	mov	r3, r7
   2aa90:	bl	2b02c <__assert_fail@plt+0x19b78>
   2aa94:	ldr	r2, [sp, #24]
   2aa98:	ldr	r3, [sp, #28]
   2aa9c:	subs	r0, r0, r2
   2aaa0:	sbcs	r0, r1, r3
   2aaa4:	bge	2aabc <__assert_fail@plt+0x19608>
   2aaa8:	mov	r0, #1
   2aaac:	mov	r8, #0
   2aab0:	mov	r9, #-2147483648	; 0x80000000
   2aab4:	str	r0, [sp, #8]
   2aab8:	b	2ab0c <__assert_fail@plt+0x19658>
   2aabc:	umull	r8, r0, r4, r2
   2aac0:	mla	r0, r4, r3, r0
   2aac4:	mla	r9, r7, r2, r0
   2aac8:	cmp	r9, #0
   2aacc:	blt	2ab0c <__assert_fail@plt+0x19658>
   2aad0:	ldr	r3, [sp, #28]
   2aad4:	mvn	r0, #0
   2aad8:	mvn	r1, #-2147483648	; 0x80000000
   2aadc:	mvn	r4, #0
   2aae0:	mvn	r6, #-2147483648	; 0x80000000
   2aae4:	bl	2b100 <__assert_fail@plt+0x19c4c>
   2aae8:	ldr	r2, [sp, #24]
   2aaec:	ldr	r3, [sp, #28]
   2aaf0:	subs	r0, r0, r8
   2aaf4:	sbcs	r0, r1, r9
   2aaf8:	bge	2ab4c <__assert_fail@plt+0x19698>
   2aafc:	ldr	r9, [sp, #12]
   2ab00:	mov	r0, #1
   2ab04:	str	r0, [sp, #8]
   2ab08:	b	2ab64 <__assert_fail@plt+0x196b0>
   2ab0c:	mov	r0, #0
   2ab10:	mov	r1, #-2147483648	; 0x80000000
   2ab14:	mov	r2, r8
   2ab18:	mov	r3, r9
   2ab1c:	bl	2b02c <__assert_fail@plt+0x19b78>
   2ab20:	ldr	r2, [sp, #24]
   2ab24:	ldr	r3, [sp, #28]
   2ab28:	subs	r0, r0, r2
   2ab2c:	sbcs	r0, r1, r3
   2ab30:	bge	2ab4c <__assert_fail@plt+0x19698>
   2ab34:	ldr	r9, [sp, #12]
   2ab38:	mov	r0, #1
   2ab3c:	mov	r4, #0
   2ab40:	mov	r6, #-2147483648	; 0x80000000
   2ab44:	str	r0, [sp, #8]
   2ab48:	b	2abb0 <__assert_fail@plt+0x196fc>
   2ab4c:	umull	r4, r0, r8, r2
   2ab50:	mla	r0, r8, r3, r0
   2ab54:	mla	r6, r9, r2, r0
   2ab58:	ldr	r9, [sp, #12]
   2ab5c:	cmp	r6, #0
   2ab60:	blt	2abb0 <__assert_fail@plt+0x196fc>
   2ab64:	ldr	r3, [sp, #28]
   2ab68:	mvn	r0, #0
   2ab6c:	mvn	r1, #-2147483648	; 0x80000000
   2ab70:	mov	r8, r6
   2ab74:	mvn	r6, #0
   2ab78:	mvn	r7, #-2147483648	; 0x80000000
   2ab7c:	bl	2b100 <__assert_fail@plt+0x19c4c>
   2ab80:	ldr	r3, [sp, #24]
   2ab84:	ldr	ip, [sp, #28]
   2ab88:	subs	r0, r0, r4
   2ab8c:	mov	r2, #1
   2ab90:	sbcs	r0, r1, r8
   2ab94:	blt	2aba8 <__assert_fail@plt+0x196f4>
   2ab98:	umull	r6, r0, r4, r3
   2ab9c:	mov	r2, #0
   2aba0:	mla	r0, r4, ip, r0
   2aba4:	mla	r7, r8, r3, r0
   2aba8:	ldr	r0, [sp, #8]
   2abac:	b	29cf4 <__assert_fail@plt+0x18840>
   2abb0:	mov	r0, #0
   2abb4:	mov	r1, #-2147483648	; 0x80000000
   2abb8:	mov	r2, r4
   2abbc:	mov	r3, r6
   2abc0:	bl	2b02c <__assert_fail@plt+0x19b78>
   2abc4:	ldr	r3, [sp, #24]
   2abc8:	ldr	ip, [sp, #28]
   2abcc:	mov	r8, r6
   2abd0:	mov	r2, #1
   2abd4:	mov	r6, #0
   2abd8:	mov	r7, #-2147483648	; 0x80000000
   2abdc:	subs	r0, r0, r3
   2abe0:	sbcs	r0, r1, ip
   2abe4:	bge	2ab98 <__assert_fail@plt+0x196e4>
   2abe8:	b	2aba8 <__assert_fail@plt+0x196f4>
   2abec:	movw	r0, #50546	; 0xc572
   2abf0:	movw	r1, #50584	; 0xc598
   2abf4:	movw	r3, #50600	; 0xc5a8
   2abf8:	mov	r2, #85	; 0x55
   2abfc:	movt	r0, #2
   2ac00:	movt	r1, #2
   2ac04:	movt	r3, #2
   2ac08:	bl	114b4 <__assert_fail@plt>
   2ac0c:	clz	r2, r1
   2ac10:	clz	r3, r0
   2ac14:	lsr	r2, r2, #5
   2ac18:	lsr	r3, r3, #5
   2ac1c:	orrs	r2, r3, r2
   2ac20:	movwne	r1, #1
   2ac24:	movwne	r0, #1
   2ac28:	cmp	r1, #0
   2ac2c:	beq	2ac5c <__assert_fail@plt+0x197a8>
   2ac30:	mvn	r2, #-2147483648	; 0x80000000
   2ac34:	udiv	r2, r2, r1
   2ac38:	cmp	r2, r0
   2ac3c:	bcs	2ac5c <__assert_fail@plt+0x197a8>
   2ac40:	push	{fp, lr}
   2ac44:	mov	fp, sp
   2ac48:	bl	113ac <__errno_location@plt>
   2ac4c:	mov	r1, #12
   2ac50:	str	r1, [r0]
   2ac54:	mov	r0, #0
   2ac58:	pop	{fp, pc}
   2ac5c:	b	111b4 <calloc@plt>
   2ac60:	cmp	r0, #0
   2ac64:	movweq	r0, #1
   2ac68:	cmn	r0, #1
   2ac6c:	ble	2ac74 <__assert_fail@plt+0x197c0>
   2ac70:	b	11328 <malloc@plt>
   2ac74:	push	{fp, lr}
   2ac78:	mov	fp, sp
   2ac7c:	bl	113ac <__errno_location@plt>
   2ac80:	mov	r1, #12
   2ac84:	str	r1, [r0]
   2ac88:	mov	r0, #0
   2ac8c:	pop	{fp, pc}
   2ac90:	push	{fp, lr}
   2ac94:	mov	fp, sp
   2ac98:	cmp	r0, #0
   2ac9c:	beq	2acb8 <__assert_fail@plt+0x19804>
   2aca0:	cmp	r1, #0
   2aca4:	beq	2acc4 <__assert_fail@plt+0x19810>
   2aca8:	cmn	r1, #1
   2acac:	ble	2acd0 <__assert_fail@plt+0x1981c>
   2acb0:	pop	{fp, lr}
   2acb4:	b	112bc <realloc@plt>
   2acb8:	mov	r0, r1
   2acbc:	pop	{fp, lr}
   2acc0:	b	2ac60 <__assert_fail@plt+0x197ac>
   2acc4:	bl	2ae28 <__assert_fail@plt+0x19974>
   2acc8:	mov	r0, #0
   2accc:	pop	{fp, pc}
   2acd0:	bl	113ac <__errno_location@plt>
   2acd4:	mov	r1, #12
   2acd8:	str	r1, [r0]
   2acdc:	mov	r0, #0
   2ace0:	pop	{fp, pc}
   2ace4:	push	{r4, r5, r6, sl, fp, lr}
   2ace8:	add	fp, sp, #16
   2acec:	mov	r4, r0
   2acf0:	bl	11304 <__fpending@plt>
   2acf4:	ldr	r6, [r4]
   2acf8:	mov	r5, r0
   2acfc:	mov	r0, r4
   2ad00:	bl	12958 <__assert_fail@plt+0x14a4>
   2ad04:	tst	r6, #32
   2ad08:	bne	2ad40 <__assert_fail@plt+0x1988c>
   2ad0c:	cmp	r0, #0
   2ad10:	mov	r4, r0
   2ad14:	mvnne	r4, #0
   2ad18:	cmp	r5, #0
   2ad1c:	bne	2ad4c <__assert_fail@plt+0x19898>
   2ad20:	cmp	r0, #0
   2ad24:	beq	2ad4c <__assert_fail@plt+0x19898>
   2ad28:	bl	113ac <__errno_location@plt>
   2ad2c:	ldr	r0, [r0]
   2ad30:	subs	r4, r0, #9
   2ad34:	mvnne	r4, #0
   2ad38:	mov	r0, r4
   2ad3c:	pop	{r4, r5, r6, sl, fp, pc}
   2ad40:	mvn	r4, #0
   2ad44:	cmp	r0, #0
   2ad48:	beq	2ad54 <__assert_fail@plt+0x198a0>
   2ad4c:	mov	r0, r4
   2ad50:	pop	{r4, r5, r6, sl, fp, pc}
   2ad54:	bl	113ac <__errno_location@plt>
   2ad58:	mov	r1, #0
   2ad5c:	str	r1, [r0]
   2ad60:	mov	r0, r4
   2ad64:	pop	{r4, r5, r6, sl, fp, pc}
   2ad68:	push	{r4, r5, r6, r7, fp, lr}
   2ad6c:	add	fp, sp, #16
   2ad70:	mov	r4, r0
   2ad74:	ldr	r0, [r0, #4]
   2ad78:	mov	r5, r1
   2ad7c:	cmp	r0, r1
   2ad80:	movcs	r0, #1
   2ad84:	strcs	r5, [r4]
   2ad88:	popcs	{r4, r5, r6, r7, fp, pc}
   2ad8c:	mov	r6, r3
   2ad90:	cmp	r3, #0
   2ad94:	beq	2adbc <__assert_fail@plt+0x19908>
   2ad98:	mvn	r0, #0
   2ad9c:	udiv	r0, r0, r6
   2ada0:	cmp	r0, r5
   2ada4:	bcs	2adbc <__assert_fail@plt+0x19908>
   2ada8:	bl	113ac <__errno_location@plt>
   2adac:	mov	r1, #12
   2adb0:	str	r1, [r0]
   2adb4:	mov	r0, #0
   2adb8:	pop	{r4, r5, r6, r7, fp, pc}
   2adbc:	ldr	r0, [r4, #8]
   2adc0:	mul	r1, r6, r5
   2adc4:	cmp	r0, r2
   2adc8:	beq	2ade0 <__assert_fail@plt+0x1992c>
   2adcc:	bl	2ac90 <__assert_fail@plt+0x197dc>
   2add0:	mov	r7, r0
   2add4:	cmp	r0, #0
   2add8:	bne	2ae10 <__assert_fail@plt+0x1995c>
   2addc:	b	2ae20 <__assert_fail@plt+0x1996c>
   2ade0:	mov	r0, r1
   2ade4:	bl	2ac60 <__assert_fail@plt+0x197ac>
   2ade8:	cmp	r0, #0
   2adec:	beq	2ae20 <__assert_fail@plt+0x1996c>
   2adf0:	ldr	r1, [r4, #8]
   2adf4:	mov	r7, r0
   2adf8:	cmp	r1, #0
   2adfc:	beq	2ae10 <__assert_fail@plt+0x1995c>
   2ae00:	ldr	r0, [r4]
   2ae04:	mul	r2, r0, r6
   2ae08:	mov	r0, r7
   2ae0c:	bl	1125c <memcpy@plt>
   2ae10:	mov	r0, #1
   2ae14:	str	r5, [r4]
   2ae18:	stmib	r4, {r5, r7}
   2ae1c:	pop	{r4, r5, r6, r7, fp, pc}
   2ae20:	mov	r0, #0
   2ae24:	pop	{r4, r5, r6, r7, fp, pc}
   2ae28:	push	{r4, r5, r6, sl, fp, lr}
   2ae2c:	add	fp, sp, #16
   2ae30:	mov	r4, r0
   2ae34:	bl	113ac <__errno_location@plt>
   2ae38:	ldr	r6, [r0]
   2ae3c:	mov	r5, r0
   2ae40:	mov	r0, r4
   2ae44:	bl	11238 <free@plt>
   2ae48:	str	r6, [r5]
   2ae4c:	pop	{r4, r5, r6, sl, fp, pc}
   2ae50:	push	{fp, lr}
   2ae54:	mov	fp, sp
   2ae58:	mov	r0, #14
   2ae5c:	bl	11454 <nl_langinfo@plt>
   2ae60:	movw	r1, #48518	; 0xbd86
   2ae64:	cmp	r0, #0
   2ae68:	movt	r1, #2
   2ae6c:	movne	r1, r0
   2ae70:	movw	r0, #50678	; 0xc5f6
   2ae74:	ldrb	r2, [r1]
   2ae78:	movt	r0, #2
   2ae7c:	cmp	r2, #0
   2ae80:	movne	r0, r1
   2ae84:	pop	{fp, pc}
   2ae88:	push	{r4, r5, r6, r7, fp, lr}
   2ae8c:	add	fp, sp, #16
   2ae90:	sub	sp, sp, #8
   2ae94:	add	r5, sp, #4
   2ae98:	cmp	r0, #0
   2ae9c:	mov	r7, r2
   2aea0:	mov	r4, r1
   2aea4:	movne	r5, r0
   2aea8:	mov	r0, r5
   2aeac:	bl	11310 <mbrtowc@plt>
   2aeb0:	mov	r6, r0
   2aeb4:	cmp	r7, #0
   2aeb8:	beq	2aedc <__assert_fail@plt+0x19a28>
   2aebc:	cmn	r6, #2
   2aec0:	bcc	2aedc <__assert_fail@plt+0x19a28>
   2aec4:	mov	r0, #0
   2aec8:	bl	2af24 <__assert_fail@plt+0x19a70>
   2aecc:	cmp	r0, #0
   2aed0:	ldrbeq	r0, [r4]
   2aed4:	moveq	r6, #1
   2aed8:	streq	r0, [r5]
   2aedc:	mov	r0, r6
   2aee0:	sub	sp, fp, #16
   2aee4:	pop	{r4, r5, r6, r7, fp, pc}
   2aee8:	cmp	r2, #0
   2aeec:	beq	2af1c <__assert_fail@plt+0x19a68>
   2aef0:	mvn	r3, #0
   2aef4:	udiv	r3, r3, r2
   2aef8:	cmp	r3, r1
   2aefc:	bcs	2af1c <__assert_fail@plt+0x19a68>
   2af00:	push	{fp, lr}
   2af04:	mov	fp, sp
   2af08:	bl	113ac <__errno_location@plt>
   2af0c:	mov	r1, #12
   2af10:	str	r1, [r0]
   2af14:	mov	r0, #0
   2af18:	pop	{fp, pc}
   2af1c:	mul	r1, r2, r1
   2af20:	b	2ac90 <__assert_fail@plt+0x197dc>
   2af24:	push	{r4, sl, fp, lr}
   2af28:	add	fp, sp, #8
   2af2c:	sub	sp, sp, #264	; 0x108
   2af30:	add	r1, sp, #7
   2af34:	movw	r2, #257	; 0x101
   2af38:	bl	2af88 <__assert_fail@plt+0x19ad4>
   2af3c:	mov	r4, #0
   2af40:	cmp	r0, #0
   2af44:	bne	2af7c <__assert_fail@plt+0x19ac8>
   2af48:	movw	r1, #50684	; 0xc5fc
   2af4c:	add	r0, sp, #7
   2af50:	movt	r1, #2
   2af54:	bl	111fc <strcmp@plt>
   2af58:	cmp	r0, #0
   2af5c:	beq	2af7c <__assert_fail@plt+0x19ac8>
   2af60:	movw	r1, #50686	; 0xc5fe
   2af64:	add	r0, sp, #7
   2af68:	movt	r1, #2
   2af6c:	bl	111fc <strcmp@plt>
   2af70:	mov	r4, r0
   2af74:	cmp	r0, #0
   2af78:	movwne	r4, #1
   2af7c:	mov	r0, r4
   2af80:	sub	sp, fp, #8
   2af84:	pop	{r4, sl, fp, pc}
   2af88:	push	{r4, r5, r6, r7, fp, lr}
   2af8c:	add	fp, sp, #16
   2af90:	mov	r4, r1
   2af94:	mov	r1, #0
   2af98:	mov	r6, r2
   2af9c:	bl	1143c <setlocale@plt>
   2afa0:	cmp	r0, #0
   2afa4:	beq	2afd4 <__assert_fail@plt+0x19b20>
   2afa8:	mov	r7, r0
   2afac:	bl	11394 <strlen@plt>
   2afb0:	cmp	r0, r6
   2afb4:	bcs	2aff4 <__assert_fail@plt+0x19b40>
   2afb8:	add	r2, r0, #1
   2afbc:	mov	r0, r4
   2afc0:	mov	r1, r7
   2afc4:	bl	1125c <memcpy@plt>
   2afc8:	mov	r5, #0
   2afcc:	mov	r0, r5
   2afd0:	pop	{r4, r5, r6, r7, fp, pc}
   2afd4:	cmp	r6, #0
   2afd8:	mov	r5, #22
   2afdc:	movne	r0, #0
   2afe0:	strbne	r0, [r4]
   2afe4:	movne	r0, r5
   2afe8:	popne	{r4, r5, r6, r7, fp, pc}
   2afec:	mov	r0, r5
   2aff0:	pop	{r4, r5, r6, r7, fp, pc}
   2aff4:	mov	r5, #34	; 0x22
   2aff8:	cmp	r6, #0
   2affc:	beq	2b01c <__assert_fail@plt+0x19b68>
   2b000:	sub	r6, r6, #1
   2b004:	mov	r0, r4
   2b008:	mov	r1, r7
   2b00c:	mov	r2, r6
   2b010:	bl	1125c <memcpy@plt>
   2b014:	mov	r0, #0
   2b018:	strb	r0, [r4, r6]
   2b01c:	mov	r0, r5
   2b020:	pop	{r4, r5, r6, r7, fp, pc}
   2b024:	mov	r1, #0
   2b028:	b	1143c <setlocale@plt>
   2b02c:	cmp	r3, #0
   2b030:	cmpeq	r2, #0
   2b034:	bne	2b058 <__assert_fail@plt+0x19ba4>
   2b038:	cmp	r1, #0
   2b03c:	movlt	r1, #-2147483648	; 0x80000000
   2b040:	movlt	r0, #0
   2b044:	blt	2b054 <__assert_fail@plt+0x19ba0>
   2b048:	cmpeq	r0, #0
   2b04c:	mvnne	r1, #-2147483648	; 0x80000000
   2b050:	mvnne	r0, #0
   2b054:	b	2b13c <__assert_fail@plt+0x19c88>
   2b058:	sub	sp, sp, #8
   2b05c:	push	{sp, lr}
   2b060:	cmp	r1, #0
   2b064:	blt	2b084 <__assert_fail@plt+0x19bd0>
   2b068:	cmp	r3, #0
   2b06c:	blt	2b0b8 <__assert_fail@plt+0x19c04>
   2b070:	bl	2b14c <__assert_fail@plt+0x19c98>
   2b074:	ldr	lr, [sp, #4]
   2b078:	add	sp, sp, #8
   2b07c:	pop	{r2, r3}
   2b080:	bx	lr
   2b084:	rsbs	r0, r0, #0
   2b088:	sbc	r1, r1, r1, lsl #1
   2b08c:	cmp	r3, #0
   2b090:	blt	2b0dc <__assert_fail@plt+0x19c28>
   2b094:	bl	2b14c <__assert_fail@plt+0x19c98>
   2b098:	ldr	lr, [sp, #4]
   2b09c:	add	sp, sp, #8
   2b0a0:	pop	{r2, r3}
   2b0a4:	rsbs	r0, r0, #0
   2b0a8:	sbc	r1, r1, r1, lsl #1
   2b0ac:	rsbs	r2, r2, #0
   2b0b0:	sbc	r3, r3, r3, lsl #1
   2b0b4:	bx	lr
   2b0b8:	rsbs	r2, r2, #0
   2b0bc:	sbc	r3, r3, r3, lsl #1
   2b0c0:	bl	2b14c <__assert_fail@plt+0x19c98>
   2b0c4:	ldr	lr, [sp, #4]
   2b0c8:	add	sp, sp, #8
   2b0cc:	pop	{r2, r3}
   2b0d0:	rsbs	r0, r0, #0
   2b0d4:	sbc	r1, r1, r1, lsl #1
   2b0d8:	bx	lr
   2b0dc:	rsbs	r2, r2, #0
   2b0e0:	sbc	r3, r3, r3, lsl #1
   2b0e4:	bl	2b14c <__assert_fail@plt+0x19c98>
   2b0e8:	ldr	lr, [sp, #4]
   2b0ec:	add	sp, sp, #8
   2b0f0:	pop	{r2, r3}
   2b0f4:	rsbs	r2, r2, #0
   2b0f8:	sbc	r3, r3, r3, lsl #1
   2b0fc:	bx	lr
   2b100:	cmp	r3, #0
   2b104:	cmpeq	r2, #0
   2b108:	bne	2b120 <__assert_fail@plt+0x19c6c>
   2b10c:	cmp	r1, #0
   2b110:	cmpeq	r0, #0
   2b114:	mvnne	r1, #0
   2b118:	mvnne	r0, #0
   2b11c:	b	2b13c <__assert_fail@plt+0x19c88>
   2b120:	sub	sp, sp, #8
   2b124:	push	{sp, lr}
   2b128:	bl	2b14c <__assert_fail@plt+0x19c98>
   2b12c:	ldr	lr, [sp, #4]
   2b130:	add	sp, sp, #8
   2b134:	pop	{r2, r3}
   2b138:	bx	lr
   2b13c:	push	{r1, lr}
   2b140:	mov	r0, #8
   2b144:	bl	111d8 <raise@plt>
   2b148:	pop	{r1, pc}
   2b14c:	cmp	r1, r3
   2b150:	cmpeq	r0, r2
   2b154:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b158:	mov	r4, r0
   2b15c:	movcc	r0, #0
   2b160:	mov	r5, r1
   2b164:	ldr	lr, [sp, #36]	; 0x24
   2b168:	movcc	r1, r0
   2b16c:	bcc	2b268 <__assert_fail@plt+0x19db4>
   2b170:	cmp	r3, #0
   2b174:	clzeq	ip, r2
   2b178:	clzne	ip, r3
   2b17c:	addeq	ip, ip, #32
   2b180:	cmp	r5, #0
   2b184:	clzeq	r1, r4
   2b188:	addeq	r1, r1, #32
   2b18c:	clzne	r1, r5
   2b190:	sub	ip, ip, r1
   2b194:	sub	sl, ip, #32
   2b198:	lsl	r9, r3, ip
   2b19c:	rsb	fp, ip, #32
   2b1a0:	orr	r9, r9, r2, lsl sl
   2b1a4:	orr	r9, r9, r2, lsr fp
   2b1a8:	lsl	r8, r2, ip
   2b1ac:	cmp	r5, r9
   2b1b0:	cmpeq	r4, r8
   2b1b4:	movcc	r0, #0
   2b1b8:	movcc	r1, r0
   2b1bc:	bcc	2b1d8 <__assert_fail@plt+0x19d24>
   2b1c0:	mov	r0, #1
   2b1c4:	subs	r4, r4, r8
   2b1c8:	lsl	r1, r0, sl
   2b1cc:	orr	r1, r1, r0, lsr fp
   2b1d0:	lsl	r0, r0, ip
   2b1d4:	sbc	r5, r5, r9
   2b1d8:	cmp	ip, #0
   2b1dc:	beq	2b268 <__assert_fail@plt+0x19db4>
   2b1e0:	lsr	r6, r8, #1
   2b1e4:	orr	r6, r6, r9, lsl #31
   2b1e8:	lsr	r7, r9, #1
   2b1ec:	mov	r2, ip
   2b1f0:	b	2b214 <__assert_fail@plt+0x19d60>
   2b1f4:	subs	r3, r4, r6
   2b1f8:	sbc	r8, r5, r7
   2b1fc:	adds	r3, r3, r3
   2b200:	adc	r8, r8, r8
   2b204:	adds	r4, r3, #1
   2b208:	adc	r5, r8, #0
   2b20c:	subs	r2, r2, #1
   2b210:	beq	2b230 <__assert_fail@plt+0x19d7c>
   2b214:	cmp	r5, r7
   2b218:	cmpeq	r4, r6
   2b21c:	bcs	2b1f4 <__assert_fail@plt+0x19d40>
   2b220:	adds	r4, r4, r4
   2b224:	adc	r5, r5, r5
   2b228:	subs	r2, r2, #1
   2b22c:	bne	2b214 <__assert_fail@plt+0x19d60>
   2b230:	lsr	r3, r4, ip
   2b234:	orr	r3, r3, r5, lsl fp
   2b238:	lsr	r2, r5, ip
   2b23c:	orr	r3, r3, r5, lsr sl
   2b240:	adds	r0, r0, r4
   2b244:	mov	r4, r3
   2b248:	lsl	r3, r2, ip
   2b24c:	orr	r3, r3, r4, lsl sl
   2b250:	lsl	ip, r4, ip
   2b254:	orr	r3, r3, r4, lsr fp
   2b258:	adc	r1, r1, r5
   2b25c:	subs	r0, r0, ip
   2b260:	mov	r5, r2
   2b264:	sbc	r1, r1, r3
   2b268:	cmp	lr, #0
   2b26c:	strdne	r4, [lr]
   2b270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b274:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2b278:	mov	r7, r0
   2b27c:	ldr	r6, [pc, #72]	; 2b2cc <__assert_fail@plt+0x19e18>
   2b280:	ldr	r5, [pc, #72]	; 2b2d0 <__assert_fail@plt+0x19e1c>
   2b284:	add	r6, pc, r6
   2b288:	add	r5, pc, r5
   2b28c:	sub	r6, r6, r5
   2b290:	mov	r8, r1
   2b294:	mov	r9, r2
   2b298:	bl	11188 <pthread_mutex_unlock@plt-0x20>
   2b29c:	asrs	r6, r6, #2
   2b2a0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b2a4:	mov	r4, #0
   2b2a8:	add	r4, r4, #1
   2b2ac:	ldr	r3, [r5], #4
   2b2b0:	mov	r2, r9
   2b2b4:	mov	r1, r8
   2b2b8:	mov	r0, r7
   2b2bc:	blx	r3
   2b2c0:	cmp	r6, r4
   2b2c4:	bne	2b2a8 <__assert_fail@plt+0x19df4>
   2b2c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b2cc:	andeq	r1, r1, r0, lsl #25
   2b2d0:	andeq	r1, r1, r8, ror ip
   2b2d4:	bx	lr
   2b2d8:	ldr	r3, [pc, #12]	; 2b2ec <__assert_fail@plt+0x19e38>
   2b2dc:	mov	r1, #0
   2b2e0:	add	r3, pc, r3
   2b2e4:	ldr	r2, [r3]
   2b2e8:	b	113c4 <__cxa_atexit@plt>
   2b2ec:	andeq	r1, r1, r4, lsr lr

Disassembly of section .fini:

0002b2f0 <.fini>:
   2b2f0:	push	{r3, lr}
   2b2f4:	pop	{r3, pc}
