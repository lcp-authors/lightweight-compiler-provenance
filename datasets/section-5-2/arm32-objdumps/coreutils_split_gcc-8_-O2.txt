
../repos/coreutils/src/split:     file format elf32-littlearm


Disassembly of section .init:

00011118 <.init>:
   11118:	push	{r3, lr}
   1111c:	bl	1348c <__assert_fail@plt+0x1fac>
   11120:	pop	{r3, pc}

Disassembly of section .plt:

00011124 <fdopen@plt-0x14>:
   11124:	push	{lr}		; (str lr, [sp, #-4]!)
   11128:	ldr	lr, [pc, #4]	; 11134 <fdopen@plt-0x4>
   1112c:	add	lr, pc, lr
   11130:	ldr	pc, [lr, #8]!
   11134:	andeq	r9, r1, ip, asr #29

00011138 <fdopen@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #102400	; 0x19000
   11140:	ldr	pc, [ip, #3788]!	; 0xecc

00011144 <calloc@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #102400	; 0x19000
   1114c:	ldr	pc, [ip, #3780]!	; 0xec4

00011150 <fputs_unlocked@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #102400	; 0x19000
   11158:	ldr	pc, [ip, #3772]!	; 0xebc

0001115c <raise@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #102400	; 0x19000
   11164:	ldr	pc, [ip, #3764]!	; 0xeb4

00011168 <strcmp@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #102400	; 0x19000
   11170:	ldr	pc, [ip, #3756]!	; 0xeac

00011174 <strtol@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #102400	; 0x19000
   1117c:	ldr	pc, [ip, #3748]!	; 0xea4

00011180 <read@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #102400	; 0x19000
   11188:	ldr	pc, [ip, #3740]!	; 0xe9c

0001118c <fflush@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #102400	; 0x19000
   11194:	ldr	pc, [ip, #3732]!	; 0xe94

00011198 <sigprocmask@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #102400	; 0x19000
   111a0:	ldr	pc, [ip, #3724]!	; 0xe8c

000111a4 <memmove@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #102400	; 0x19000
   111ac:	ldr	pc, [ip, #3716]!	; 0xe84

000111b0 <free@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #102400	; 0x19000
   111b8:	ldr	pc, [ip, #3708]!	; 0xe7c

000111bc <_exit@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #102400	; 0x19000
   111c4:	ldr	pc, [ip, #3700]!	; 0xe74

000111c8 <memcpy@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #102400	; 0x19000
   111d0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111d4 <__strtoull_internal@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #102400	; 0x19000
   111dc:	ldr	pc, [ip, #3684]!	; 0xe64

000111e0 <mbsinit@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #102400	; 0x19000
   111e8:	ldr	pc, [ip, #3676]!	; 0xe5c

000111ec <ftruncate64@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #102400	; 0x19000
   111f4:	ldr	pc, [ip, #3668]!	; 0xe54

000111f8 <fwrite_unlocked@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #102400	; 0x19000
   11200:	ldr	pc, [ip, #3660]!	; 0xe4c

00011204 <memcmp@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #102400	; 0x19000
   1120c:	ldr	pc, [ip, #3652]!	; 0xe44

00011210 <fputc_unlocked@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #102400	; 0x19000
   11218:	ldr	pc, [ip, #3644]!	; 0xe3c

0001121c <dcgettext@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #102400	; 0x19000
   11224:	ldr	pc, [ip, #3636]!	; 0xe34

00011228 <dup2@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #102400	; 0x19000
   11230:	ldr	pc, [ip, #3628]!	; 0xe2c

00011234 <realloc@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #102400	; 0x19000
   1123c:	ldr	pc, [ip, #3620]!	; 0xe24

00011240 <textdomain@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #102400	; 0x19000
   11248:	ldr	pc, [ip, #3612]!	; 0xe1c

0001124c <rawmemchr@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #102400	; 0x19000
   11254:	ldr	pc, [ip, #3604]!	; 0xe14

00011258 <iswprint@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #102400	; 0x19000
   11260:	ldr	pc, [ip, #3596]!	; 0xe0c

00011264 <__fxstat64@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #102400	; 0x19000
   1126c:	ldr	pc, [ip, #3588]!	; 0xe04

00011270 <sigaction@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #102400	; 0x19000
   11278:	ldr	pc, [ip, #3580]!	; 0xdfc

0001127c <fwrite@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #102400	; 0x19000
   11284:	ldr	pc, [ip, #3572]!	; 0xdf4

00011288 <lseek64@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #102400	; 0x19000
   11290:	ldr	pc, [ip, #3564]!	; 0xdec

00011294 <waitpid@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #102400	; 0x19000
   1129c:	ldr	pc, [ip, #3556]!	; 0xde4

000112a0 <__ctype_get_mb_cur_max@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #102400	; 0x19000
   112a8:	ldr	pc, [ip, #3548]!	; 0xddc

000112ac <strcpy@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #102400	; 0x19000
   112b4:	ldr	pc, [ip, #3540]!	; 0xdd4

000112b8 <__fpending@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #102400	; 0x19000
   112c0:	ldr	pc, [ip, #3532]!	; 0xdcc

000112c4 <mbrtowc@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #102400	; 0x19000
   112cc:	ldr	pc, [ip, #3524]!	; 0xdc4

000112d0 <error@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #102400	; 0x19000
   112d8:	ldr	pc, [ip, #3516]!	; 0xdbc

000112dc <open64@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #102400	; 0x19000
   112e4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112e8 <getenv@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #102400	; 0x19000
   112f0:	ldr	pc, [ip, #3500]!	; 0xdac

000112f4 <malloc@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #102400	; 0x19000
   112fc:	ldr	pc, [ip, #3492]!	; 0xda4

00011300 <sigaddset@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #102400	; 0x19000
   11308:	ldr	pc, [ip, #3484]!	; 0xd9c

0001130c <__libc_start_main@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #102400	; 0x19000
   11314:	ldr	pc, [ip, #3476]!	; 0xd94

00011318 <__freading@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #102400	; 0x19000
   11320:	ldr	pc, [ip, #3468]!	; 0xd8c

00011324 <__gmon_start__@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #102400	; 0x19000
   1132c:	ldr	pc, [ip, #3460]!	; 0xd84

00011330 <getopt_long@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #102400	; 0x19000
   11338:	ldr	pc, [ip, #3452]!	; 0xd7c

0001133c <__ctype_b_loc@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #102400	; 0x19000
   11344:	ldr	pc, [ip, #3444]!	; 0xd74

00011348 <exit@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #102400	; 0x19000
   11350:	ldr	pc, [ip, #3436]!	; 0xd6c

00011354 <strlen@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #102400	; 0x19000
   1135c:	ldr	pc, [ip, #3428]!	; 0xd64

00011360 <__libc_current_sigrtmax@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #102400	; 0x19000
   11368:	ldr	pc, [ip, #3420]!	; 0xd5c

0001136c <strchr@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #102400	; 0x19000
   11374:	ldr	pc, [ip, #3412]!	; 0xd54

00011378 <setenv@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #102400	; 0x19000
   11380:	ldr	pc, [ip, #3404]!	; 0xd4c

00011384 <memrchr@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #102400	; 0x19000
   1138c:	ldr	pc, [ip, #3396]!	; 0xd44

00011390 <getpagesize@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #102400	; 0x19000
   11398:	ldr	pc, [ip, #3388]!	; 0xd3c

0001139c <__errno_location@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #102400	; 0x19000
   113a4:	ldr	pc, [ip, #3380]!	; 0xd34

000113a8 <__sprintf_chk@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #102400	; 0x19000
   113b0:	ldr	pc, [ip, #3372]!	; 0xd2c

000113b4 <__cxa_atexit@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #102400	; 0x19000
   113bc:	ldr	pc, [ip, #3364]!	; 0xd24

000113c0 <memset@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #102400	; 0x19000
   113c8:	ldr	pc, [ip, #3356]!	; 0xd1c

000113cc <__printf_chk@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #102400	; 0x19000
   113d4:	ldr	pc, [ip, #3348]!	; 0xd14

000113d8 <write@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #102400	; 0x19000
   113e0:	ldr	pc, [ip, #3340]!	; 0xd0c

000113e4 <fileno@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #102400	; 0x19000
   113ec:	ldr	pc, [ip, #3332]!	; 0xd04

000113f0 <__fprintf_chk@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #102400	; 0x19000
   113f8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113fc <memchr@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #102400	; 0x19000
   11404:	ldr	pc, [ip, #3316]!	; 0xcf4

00011408 <fclose@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #102400	; 0x19000
   11410:	ldr	pc, [ip, #3308]!	; 0xcec

00011414 <pipe@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #102400	; 0x19000
   1141c:	ldr	pc, [ip, #3300]!	; 0xce4

00011420 <fseeko64@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #102400	; 0x19000
   11428:	ldr	pc, [ip, #3292]!	; 0xcdc

0001142c <fcntl64@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #102400	; 0x19000
   11434:	ldr	pc, [ip, #3284]!	; 0xcd4

00011438 <setlocale@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #102400	; 0x19000
   11440:	ldr	pc, [ip, #3276]!	; 0xccc

00011444 <sigemptyset@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #102400	; 0x19000
   1144c:	ldr	pc, [ip, #3268]!	; 0xcc4

00011450 <fork@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #102400	; 0x19000
   11458:	ldr	pc, [ip, #3260]!	; 0xcbc

0001145c <execl@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #102400	; 0x19000
   11464:	ldr	pc, [ip, #3252]!	; 0xcb4

00011468 <strrchr@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #102400	; 0x19000
   11470:	ldr	pc, [ip, #3244]!	; 0xcac

00011474 <nl_langinfo@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #102400	; 0x19000
   1147c:	ldr	pc, [ip, #3236]!	; 0xca4

00011480 <clearerr_unlocked@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #102400	; 0x19000
   11488:	ldr	pc, [ip, #3228]!	; 0xc9c

0001148c <bindtextdomain@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #102400	; 0x19000
   11494:	ldr	pc, [ip, #3220]!	; 0xc94

00011498 <aligned_alloc@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #102400	; 0x19000
   114a0:	ldr	pc, [ip, #3212]!	; 0xc8c

000114a4 <__libc_current_sigrtmin@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #102400	; 0x19000
   114ac:	ldr	pc, [ip, #3204]!	; 0xc84

000114b0 <strncmp@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #102400	; 0x19000
   114b8:	ldr	pc, [ip, #3196]!	; 0xc7c

000114bc <abort@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #102400	; 0x19000
   114c4:	ldr	pc, [ip, #3188]!	; 0xc74

000114c8 <close@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #102400	; 0x19000
   114d0:	ldr	pc, [ip, #3180]!	; 0xc6c

000114d4 <strspn@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #102400	; 0x19000
   114dc:	ldr	pc, [ip, #3172]!	; 0xc64

000114e0 <__assert_fail@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #102400	; 0x19000
   114e8:	ldr	pc, [ip, #3164]!	; 0xc5c

Disassembly of section .text:

000114f0 <.text>:
   114f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   114f4:	mov	r5, #0
   114f8:	mov	r4, #0
   114fc:	strd	r6, [sp, #8]
   11500:	movw	r6, #45936	; 0xb370
   11504:	movt	r6, #2
   11508:	strd	r8, [sp, #16]
   1150c:	mov	r8, #0
   11510:	mov	r7, r1
   11514:	strd	sl, [sp, #24]
   11518:	mov	sl, r0
   1151c:	str	lr, [sp, #32]
   11520:	sub	sp, sp, #292	; 0x124
   11524:	ldr	r0, [r1]
   11528:	strd	r4, [sp, #24]
   1152c:	str	r6, [sp, #64]	; 0x40
   11530:	str	r8, [sp, #72]	; 0x48
   11534:	bl	14ec4 <__assert_fail@plt+0x39e4>
   11538:	movw	r1, #40116	; 0x9cb4
   1153c:	movt	r1, #1
   11540:	strd	r4, [sp, #56]	; 0x38
   11544:	mov	r0, #6
   11548:	movw	r5, #45912	; 0xb358
   1154c:	movt	r5, #2
   11550:	bl	11438 <setlocale@plt>
   11554:	movw	r1, #41044	; 0xa054
   11558:	movt	r1, #1
   1155c:	movw	r0, #40844	; 0x9f8c
   11560:	movt	r0, #1
   11564:	bl	1148c <bindtextdomain@plt>
   11568:	movw	r0, #40844	; 0x9f8c
   1156c:	movt	r0, #1
   11570:	bl	11240 <textdomain@plt>
   11574:	movw	r0, #18896	; 0x49d0
   11578:	movt	r0, #1
   1157c:	bl	192b4 <__assert_fail@plt+0x7dd4>
   11580:	movw	r2, #41068	; 0xa06c
   11584:	movt	r2, #1
   11588:	str	r5, [sp, #32]
   1158c:	movw	r3, #42160	; 0xa4b0
   11590:	movt	r3, #1
   11594:	str	sl, [sp, #48]	; 0x30
   11598:	str	r8, [sp, #52]	; 0x34
   1159c:	str	r3, [r6, #12]
   115a0:	str	r2, [r6, #300]	; 0x12c
   115a4:	movw	r6, #41072	; 0xa070
   115a8:	movt	r6, #1
   115ac:	str	r8, [sp, #68]	; 0x44
   115b0:	ldr	r3, [sp, #32]
   115b4:	mov	r9, #0
   115b8:	mov	r2, r6
   115bc:	mov	r1, r7
   115c0:	ldr	r0, [sp, #48]	; 0x30
   115c4:	ldr	r4, [r3]
   115c8:	str	r9, [sp]
   115cc:	ldr	r3, [pc, #2612]	; 12008 <__assert_fail@plt+0xb28>
   115d0:	cmp	r4, r9
   115d4:	moveq	r4, #1
   115d8:	bl	11330 <getopt_long@plt>
   115dc:	cmn	r0, #1
   115e0:	mov	r8, r0
   115e4:	beq	118dc <__assert_fail@plt+0x3fc>
   115e8:	cmp	r0, #101	; 0x65
   115ec:	beq	11b00 <__assert_fail@plt+0x620>
   115f0:	ble	1162c <__assert_fail@plt+0x14c>
   115f4:	cmp	r0, #120	; 0x78
   115f8:	beq	13408 <__assert_fail@plt+0x1f28>
   115fc:	bgt	11728 <__assert_fail@plt+0x248>
   11600:	cmp	r0, #110	; 0x6e
   11604:	beq	119a0 <__assert_fail@plt+0x4c0>
   11608:	ble	116b4 <__assert_fail@plt+0x1d4>
   1160c:	cmp	r0, #116	; 0x74
   11610:	beq	11bb0 <__assert_fail@plt+0x6d0>
   11614:	cmp	r0, #117	; 0x75
   11618:	bne	11924 <__assert_fail@plt+0x444>
   1161c:	ldr	r2, [sp, #64]	; 0x40
   11620:	mov	r3, #1
   11624:	strb	r3, [r2, #304]	; 0x130
   11628:	b	115b0 <__assert_fail@plt+0xd0>
   1162c:	cmp	r0, #57	; 0x39
   11630:	ble	118a4 <__assert_fail@plt+0x3c4>
   11634:	cmp	r0, #97	; 0x61
   11638:	beq	11944 <__assert_fail@plt+0x464>
   1163c:	ble	11834 <__assert_fail@plt+0x354>
   11640:	cmp	r0, #98	; 0x62
   11644:	bne	11778 <__assert_fail@plt+0x298>
   11648:	ldr	r3, [sp, #52]	; 0x34
   1164c:	cmp	r3, #0
   11650:	bne	11e74 <__assert_fail@plt+0x994>
   11654:	ldr	r5, [sp, #52]	; 0x34
   11658:	mov	r2, #5
   1165c:	movw	r3, #45928	; 0xb368
   11660:	movt	r3, #2
   11664:	movw	r1, #41208	; 0xa0f8
   11668:	movt	r1, #1
   1166c:	ldr	r4, [r3]
   11670:	mvn	r8, #0
   11674:	mvn	r9, #-2147483648	; 0x80000000
   11678:	mov	r0, r5
   1167c:	bl	1121c <dcgettext@plt>
   11680:	ldr	r1, [pc, #2436]	; 1200c <__assert_fail@plt+0xb2c>
   11684:	mov	ip, #1
   11688:	mov	r2, #1
   1168c:	mov	r3, #0
   11690:	strd	r8, [sp]
   11694:	str	r1, [sp, #8]
   11698:	str	r0, [sp, #12]
   1169c:	mov	r0, r4
   116a0:	str	r5, [sp, #16]
   116a4:	str	ip, [sp, #52]	; 0x34
   116a8:	bl	18198 <__assert_fail@plt+0x6cb8>
   116ac:	strd	r0, [sp, #24]
   116b0:	b	115b0 <__assert_fail@plt+0xd0>
   116b4:	cmp	r0, #108	; 0x6c
   116b8:	bne	11924 <__assert_fail@plt+0x444>
   116bc:	ldr	r5, [sp, #52]	; 0x34
   116c0:	cmp	r5, #0
   116c4:	mov	r0, r5
   116c8:	bne	11e74 <__assert_fail@plt+0x994>
   116cc:	movw	r3, #45928	; 0xb368
   116d0:	movt	r3, #2
   116d4:	ldr	r4, [r3]
   116d8:	mov	r2, #5
   116dc:	movw	r1, #41232	; 0xa110
   116e0:	movt	r1, #1
   116e4:	mvn	r8, #0
   116e8:	bl	1121c <dcgettext@plt>
   116ec:	movw	r1, #40116	; 0x9cb4
   116f0:	movt	r1, #1
   116f4:	mvn	r9, #0
   116f8:	mov	r2, #1
   116fc:	mov	r3, #0
   11700:	str	r1, [sp, #8]
   11704:	mov	r1, #3
   11708:	strd	r8, [sp]
   1170c:	str	r0, [sp, #12]
   11710:	mov	r0, r4
   11714:	str	r5, [sp, #16]
   11718:	str	r1, [sp, #52]	; 0x34
   1171c:	bl	18198 <__assert_fail@plt+0x6cb8>
   11720:	strd	r0, [sp, #24]
   11724:	b	115b0 <__assert_fail@plt+0xd0>
   11728:	movw	r3, #257	; 0x101
   1172c:	cmp	r0, r3
   11730:	beq	1192c <__assert_fail@plt+0x44c>
   11734:	ble	118c4 <__assert_fail@plt+0x3e4>
   11738:	movw	r3, #258	; 0x102
   1173c:	cmp	r0, r3
   11740:	beq	11b5c <__assert_fail@plt+0x67c>
   11744:	movw	r3, #259	; 0x103
   11748:	cmp	r0, r3
   1174c:	bne	11924 <__assert_fail@plt+0x444>
   11750:	movw	r4, #45928	; 0xb368
   11754:	movt	r4, #2
   11758:	ldr	r8, [r4]
   1175c:	mov	r0, r8
   11760:	bl	148f8 <__assert_fail@plt+0x3418>
   11764:	cmp	r8, r0
   11768:	bne	11e80 <__assert_fail@plt+0x9a0>
   1176c:	ldr	r3, [sp, #64]	; 0x40
   11770:	str	r8, [r3, #20]
   11774:	b	115b0 <__assert_fail@plt+0xd0>
   11778:	cmp	r0, #100	; 0x64
   1177c:	bne	11924 <__assert_fail@plt+0x444>
   11780:	movw	r1, #41032	; 0xa048
   11784:	movt	r1, #1
   11788:	movw	r4, #45928	; 0xb368
   1178c:	movt	r4, #2
   11790:	str	r1, [sp, #80]	; 0x50
   11794:	ldr	r9, [r4]
   11798:	movw	r3, #45396	; 0xb154
   1179c:	movt	r3, #2
   117a0:	str	r1, [r3, #4]
   117a4:	cmp	r9, #0
   117a8:	beq	115b0 <__assert_fail@plt+0xd0>
   117ac:	mov	r0, r9
   117b0:	bl	11354 <strlen@plt>
   117b4:	mov	r3, r0
   117b8:	mov	r0, r9
   117bc:	ldr	r1, [sp, #80]	; 0x50
   117c0:	str	r3, [sp, #84]	; 0x54
   117c4:	bl	114d4 <strspn@plt>
   117c8:	ldr	r3, [sp, #84]	; 0x54
   117cc:	cmp	r3, r0
   117d0:	bne	12d88 <__assert_fail@plt+0x18a8>
   117d4:	ldrb	r3, [r9]
   117d8:	cmp	r3, #48	; 0x30
   117dc:	bne	11828 <__assert_fail@plt+0x348>
   117e0:	ldrb	r3, [r9, #1]
   117e4:	cmp	r3, #0
   117e8:	addne	r3, r9, #1
   117ec:	ldrne	r5, [sp, #32]
   117f0:	ldrne	sl, [sp, #48]	; 0x30
   117f4:	bne	11808 <__assert_fail@plt+0x328>
   117f8:	b	11828 <__assert_fail@plt+0x348>
   117fc:	ldrb	r2, [r3]
   11800:	cmp	r2, #0
   11804:	beq	11820 <__assert_fail@plt+0x340>
   11808:	mov	r9, r3
   1180c:	str	r3, [r4]
   11810:	add	r3, r3, #1
   11814:	ldrb	r2, [r9]
   11818:	cmp	r2, #48	; 0x30
   1181c:	beq	117fc <__assert_fail@plt+0x31c>
   11820:	str	r5, [sp, #32]
   11824:	str	sl, [sp, #48]	; 0x30
   11828:	ldr	r3, [sp, #64]	; 0x40
   1182c:	str	r9, [r3, #36]	; 0x24
   11830:	b	115b0 <__assert_fail@plt+0xd0>
   11834:	cmp	r0, #67	; 0x43
   11838:	bne	11924 <__assert_fail@plt+0x444>
   1183c:	ldr	r5, [sp, #52]	; 0x34
   11840:	cmp	r5, #0
   11844:	mov	r0, r5
   11848:	bne	11e74 <__assert_fail@plt+0x994>
   1184c:	mov	r2, #5
   11850:	movw	r3, #45928	; 0xb368
   11854:	movt	r3, #2
   11858:	movw	r1, #41208	; 0xa0f8
   1185c:	movt	r1, #1
   11860:	ldr	r4, [r3]
   11864:	mvn	r8, #0
   11868:	bl	1121c <dcgettext@plt>
   1186c:	ldr	r1, [pc, #1944]	; 1200c <__assert_fail@plt+0xb2c>
   11870:	mov	r9, #0
   11874:	mov	ip, #2
   11878:	mov	r2, #1
   1187c:	mov	r3, #0
   11880:	strd	r8, [sp]
   11884:	str	r1, [sp, #8]
   11888:	str	r0, [sp, #12]
   1188c:	mov	r0, r4
   11890:	str	r5, [sp, #16]
   11894:	str	ip, [sp, #52]	; 0x34
   11898:	bl	18198 <__assert_fail@plt+0x6cb8>
   1189c:	strd	r0, [sp, #24]
   118a0:	b	115b0 <__assert_fail@plt+0xd0>
   118a4:	cmp	r0, #48	; 0x30
   118a8:	bge	11c0c <__assert_fail@plt+0x72c>
   118ac:	cmn	r0, #3
   118b0:	beq	11b10 <__assert_fail@plt+0x630>
   118b4:	cmn	r0, #2
   118b8:	bne	11924 <__assert_fail@plt+0x444>
   118bc:	mov	r0, r9
   118c0:	bl	14528 <__assert_fail@plt+0x3048>
   118c4:	cmp	r0, #256	; 0x100
   118c8:	bne	11924 <__assert_fail@plt+0x444>
   118cc:	ldr	r2, [sp, #64]	; 0x40
   118d0:	mov	r3, #1
   118d4:	strb	r3, [r2, #44]	; 0x2c
   118d8:	b	115b0 <__assert_fail@plt+0xd0>
   118dc:	ldr	r5, [sp, #32]
   118e0:	ldrd	r2, [sp, #56]	; 0x38
   118e4:	ldr	sl, [sp, #48]	; 0x30
   118e8:	orrs	r3, r2, r3
   118ec:	beq	11cc4 <__assert_fail@plt+0x7e4>
   118f0:	ldr	r3, [sp, #64]	; 0x40
   118f4:	ldr	r3, [r3, #40]	; 0x28
   118f8:	cmp	r3, #0
   118fc:	beq	11cc4 <__assert_fail@plt+0x7e4>
   11900:	movw	r1, #41616	; 0xa290
   11904:	movt	r1, #1
   11908:	mov	r2, #5
   1190c:	mov	r0, #0
   11910:	bl	1121c <dcgettext@plt>
   11914:	mov	r1, #0
   11918:	mov	r2, r0
   1191c:	mov	r0, r1
   11920:	bl	112d0 <error@plt>
   11924:	mov	r0, #1
   11928:	bl	14528 <__assert_fail@plt+0x3048>
   1192c:	movw	r3, #45928	; 0xb368
   11930:	movt	r3, #2
   11934:	ldr	r2, [sp, #64]	; 0x40
   11938:	ldr	r3, [r3]
   1193c:	str	r3, [r2, #40]	; 0x28
   11940:	b	115b0 <__assert_fail@plt+0xd0>
   11944:	movw	r3, #45928	; 0xb368
   11948:	movt	r3, #2
   1194c:	ldr	r4, [r3]
   11950:	mov	r2, #5
   11954:	mov	r0, r9
   11958:	movw	r1, #41100	; 0xa08c
   1195c:	movt	r1, #1
   11960:	bl	1121c <dcgettext@plt>
   11964:	mvn	r8, #-1073741824	; 0xc0000000
   11968:	movw	r1, #40116	; 0x9cb4
   1196c:	movt	r1, #1
   11970:	mov	r3, #0
   11974:	str	r9, [sp, #16]
   11978:	mov	r9, #0
   1197c:	mov	r2, #0
   11980:	strd	r8, [sp]
   11984:	str	r1, [sp, #8]
   11988:	str	r0, [sp, #12]
   1198c:	mov	r0, r4
   11990:	bl	18198 <__assert_fail@plt+0x6cb8>
   11994:	ldr	r3, [sp, #64]	; 0x40
   11998:	str	r0, [r3, #4]
   1199c:	b	115b0 <__assert_fail@plt+0xd0>
   119a0:	ldr	r3, [sp, #52]	; 0x34
   119a4:	cmp	r3, #0
   119a8:	bne	11e74 <__assert_fail@plt+0x994>
   119ac:	bl	1133c <__ctype_b_loc@plt>
   119b0:	movw	r4, #45928	; 0xb368
   119b4:	movt	r4, #2
   119b8:	ldr	r1, [r0]
   119bc:	ldr	r2, [r4]
   119c0:	ldr	r5, [sp, #32]
   119c4:	ldr	sl, [sp, #48]	; 0x30
   119c8:	b	119d0 <__assert_fail@plt+0x4f0>
   119cc:	str	r2, [r4]
   119d0:	mov	r8, r2
   119d4:	add	r2, r2, #1
   119d8:	ldrb	r3, [r8]
   119dc:	lsl	r3, r3, #1
   119e0:	ldrh	r3, [r1, r3]
   119e4:	tst	r3, #8192	; 0x2000
   119e8:	bne	119cc <__assert_fail@plt+0x4ec>
   119ec:	movw	r1, #41256	; 0xa128
   119f0:	movt	r1, #1
   119f4:	str	r5, [sp, #32]
   119f8:	mov	r2, #2
   119fc:	mov	r0, r8
   11a00:	str	sl, [sp, #48]	; 0x30
   11a04:	bl	114b0 <strncmp@plt>
   11a08:	cmp	r0, #0
   11a0c:	beq	11cb0 <__assert_fail@plt+0x7d0>
   11a10:	mov	r0, r8
   11a14:	movw	r1, #41260	; 0xa12c
   11a18:	movt	r1, #1
   11a1c:	mov	r2, #2
   11a20:	bl	114b0 <strncmp@plt>
   11a24:	cmp	r0, #0
   11a28:	addeq	r8, r8, #2
   11a2c:	moveq	r3, #6
   11a30:	movne	r3, #5
   11a34:	streq	r8, [r4]
   11a38:	str	r3, [sp, #52]	; 0x34
   11a3c:	ldr	r9, [r4]
   11a40:	mov	r1, #47	; 0x2f
   11a44:	mov	r0, r9
   11a48:	bl	1136c <strchr@plt>
   11a4c:	subs	r5, r0, #0
   11a50:	movw	r1, #41264	; 0xa130
   11a54:	movt	r1, #1
   11a58:	mov	r2, #5
   11a5c:	beq	11de4 <__assert_fail@plt+0x904>
   11a60:	mov	r0, #0
   11a64:	mvn	r8, #0
   11a68:	bl	1121c <dcgettext@plt>
   11a6c:	mvn	r9, #0
   11a70:	mov	r1, #0
   11a74:	movw	sl, #40116	; 0x9cb4
   11a78:	movt	sl, #1
   11a7c:	mov	r3, #0
   11a80:	mov	r2, #1
   11a84:	strd	r8, [sp]
   11a88:	str	sl, [sp, #8]
   11a8c:	strd	r0, [sp, #12]
   11a90:	add	r0, r5, #1
   11a94:	bl	18198 <__assert_fail@plt+0x6cb8>
   11a98:	ldr	r3, [r4]
   11a9c:	mov	r8, r0
   11aa0:	mov	r9, r1
   11aa4:	strd	r8, [sp, #24]
   11aa8:	cmp	r5, r3
   11aac:	beq	115b0 <__assert_fail@plt+0xd0>
   11ab0:	mov	r3, #0
   11ab4:	mov	r2, #5
   11ab8:	movw	r1, #41292	; 0xa14c
   11abc:	movt	r1, #1
   11ac0:	strb	r3, [r5]
   11ac4:	mov	r0, #0
   11ac8:	mov	r5, r9
   11acc:	ldr	fp, [r4]
   11ad0:	mov	r4, r8
   11ad4:	bl	1121c <dcgettext@plt>
   11ad8:	mov	r1, #0
   11adc:	mov	r2, #1
   11ae0:	strd	r4, [sp]
   11ae4:	mov	r3, #0
   11ae8:	str	sl, [sp, #8]
   11aec:	strd	r0, [sp, #12]
   11af0:	mov	r0, fp
   11af4:	bl	18198 <__assert_fail@plt+0x6cb8>
   11af8:	strd	r0, [sp, #56]	; 0x38
   11afc:	b	115b0 <__assert_fail@plt+0xd0>
   11b00:	ldr	r2, [sp, #64]	; 0x40
   11b04:	mov	r3, #1
   11b08:	strb	r3, [r2, #296]	; 0x128
   11b0c:	b	115b0 <__assert_fail@plt+0xd0>
   11b10:	movw	r1, #41576	; 0xa268
   11b14:	movt	r1, #1
   11b18:	movw	r2, #41596	; 0xa27c
   11b1c:	movt	r2, #1
   11b20:	movw	r3, #45412	; 0xb164
   11b24:	movt	r3, #2
   11b28:	movw	r0, #45924	; 0xb364
   11b2c:	movt	r0, #2
   11b30:	str	r2, [sp]
   11b34:	movw	r2, #40840	; 0x9f88
   11b38:	movt	r2, #1
   11b3c:	stmib	sp, {r1, r9}
   11b40:	movw	r1, #38584	; 0x96b8
   11b44:	movt	r1, #1
   11b48:	ldr	r0, [r0]
   11b4c:	ldr	r3, [r3]
   11b50:	bl	17a64 <__assert_fail@plt+0x6584>
   11b54:	mov	r0, r9
   11b58:	bl	11348 <exit@plt>
   11b5c:	movw	r3, #45928	; 0xb368
   11b60:	movt	r3, #2
   11b64:	ldr	r4, [r3]
   11b68:	mov	r2, #5
   11b6c:	movw	r1, #41552	; 0xa250
   11b70:	movt	r1, #1
   11b74:	mov	r0, r9
   11b78:	bl	1121c <dcgettext@plt>
   11b7c:	ldr	r1, [pc, #1160]	; 1200c <__assert_fail@plt+0xb2c>
   11b80:	mov	r5, #0
   11b84:	mov	r2, #1
   11b88:	mov	r3, #0
   11b8c:	str	r0, [sp, #12]
   11b90:	mov	r0, r4
   11b94:	mvn	r4, #-2147483647	; 0x80000001
   11b98:	strd	r4, [sp]
   11b9c:	str	r1, [sp, #8]
   11ba0:	str	r9, [sp, #16]
   11ba4:	bl	18198 <__assert_fail@plt+0x6cb8>
   11ba8:	str	r0, [sp, #68]	; 0x44
   11bac:	b	115b0 <__assert_fail@plt+0xd0>
   11bb0:	movw	r4, #45928	; 0xb368
   11bb4:	movt	r4, #2
   11bb8:	ldr	r0, [r4]
   11bbc:	ldrb	r8, [r0]
   11bc0:	cmp	r8, #0
   11bc4:	beq	13414 <__assert_fail@plt+0x1f34>
   11bc8:	ldrb	r3, [r0, #1]
   11bcc:	cmp	r3, #0
   11bd0:	beq	11be8 <__assert_fail@plt+0x708>
   11bd4:	movw	r1, #41340	; 0xa17c
   11bd8:	movt	r1, #1
   11bdc:	bl	11168 <strcmp@plt>
   11be0:	subs	r8, r0, #0
   11be4:	bne	1321c <__assert_fail@plt+0x1d3c>
   11be8:	movw	r3, #45396	; 0xb154
   11bec:	movt	r3, #2
   11bf0:	ldr	r2, [r3, #12]
   11bf4:	cmp	r2, #0
   11bf8:	blt	11c04 <__assert_fail@plt+0x724>
   11bfc:	cmp	r2, r8
   11c00:	bne	13250 <__assert_fail@plt+0x1d70>
   11c04:	str	r8, [r3, #12]
   11c08:	b	115b0 <__assert_fail@plt+0xd0>
   11c0c:	ldr	r3, [sp, #52]	; 0x34
   11c10:	cmp	r3, #0
   11c14:	beq	11c90 <__assert_fail@plt+0x7b0>
   11c18:	cmp	r3, #4
   11c1c:	bne	11e74 <__assert_fail@plt+0x994>
   11c20:	ldr	r3, [sp, #72]	; 0x48
   11c24:	cmp	r3, #0
   11c28:	cmpne	r3, r4
   11c2c:	bne	11c90 <__assert_fail@plt+0x7b0>
   11c30:	add	r1, pc, #968	; 0x3c8
   11c34:	ldrd	r0, [r1]
   11c38:	ldrd	r2, [sp, #24]
   11c3c:	cmp	r3, r1
   11c40:	cmpeq	r2, r0
   11c44:	bhi	13314 <__assert_fail@plt+0x1e34>
   11c48:	mov	r0, #10
   11c4c:	mov	fp, r3
   11c50:	sub	r1, r8, #48	; 0x30
   11c54:	umull	r2, r3, r2, r0
   11c58:	mla	r3, r0, fp, r3
   11c5c:	adds	sl, r2, r1
   11c60:	mov	r0, sl
   11c64:	adc	fp, r3, r1, asr #31
   11c68:	ldrd	r2, [sp, #24]
   11c6c:	mov	r1, fp
   11c70:	cmp	fp, r3
   11c74:	cmpeq	sl, r2
   11c78:	bcc	13314 <__assert_fail@plt+0x1e34>
   11c7c:	mov	r2, r0
   11c80:	mov	r3, r1
   11c84:	strd	r2, [sp, #24]
   11c88:	str	r4, [sp, #72]	; 0x48
   11c8c:	b	115b0 <__assert_fail@plt+0xd0>
   11c90:	sub	r8, r8, #48	; 0x30
   11c94:	str	r4, [sp, #72]	; 0x48
   11c98:	asr	r3, r8, #31
   11c9c:	mov	r2, r8
   11ca0:	strd	r2, [sp, #24]
   11ca4:	mov	r3, #4
   11ca8:	str	r3, [sp, #52]	; 0x34
   11cac:	b	115b0 <__assert_fail@plt+0xd0>
   11cb0:	add	r8, r8, #2
   11cb4:	mov	r3, #7
   11cb8:	str	r8, [r4]
   11cbc:	str	r3, [sp, #52]	; 0x34
   11cc0:	b	11a3c <__assert_fail@plt+0x55c>
   11cc4:	ldr	r3, [sp, #52]	; 0x34
   11cc8:	cmp	r3, #0
   11ccc:	bne	11e20 <__assert_fail@plt+0x940>
   11cd0:	mov	r3, #0
   11cd4:	mov	r2, #1000	; 0x3e8
   11cd8:	strd	r2, [sp, #24]
   11cdc:	mov	r3, #3
   11ce0:	str	r3, [sp, #52]	; 0x34
   11ce4:	movw	r2, #45396	; 0xb154
   11ce8:	movt	r2, #2
   11cec:	ldr	r3, [r2, #12]
   11cf0:	str	r2, [sp, #48]	; 0x30
   11cf4:	cmp	r3, #0
   11cf8:	movlt	r3, #10
   11cfc:	strlt	r3, [r2, #12]
   11d00:	ldr	r3, [sp, #64]	; 0x40
   11d04:	ldr	r0, [r3, #36]	; 0x24
   11d08:	ldr	r3, [sp, #52]	; 0x34
   11d0c:	cmp	r0, #0
   11d10:	sub	r4, r3, #5
   11d14:	beq	12a34 <__assert_fail@plt+0x1554>
   11d18:	ldr	r3, [sp, #48]	; 0x30
   11d1c:	mov	r1, #0
   11d20:	cmp	r4, #2
   11d24:	strb	r1, [r3]
   11d28:	bls	12b14 <__assert_fail@plt+0x1634>
   11d2c:	ldr	r3, [sp, #64]	; 0x40
   11d30:	ldr	r3, [r3, #4]
   11d34:	cmp	r3, #0
   11d38:	moveq	r8, #0
   11d3c:	moveq	r9, #0
   11d40:	bne	12a24 <__assert_fail@plt+0x1544>
   11d44:	ldr	r1, [sp, #64]	; 0x40
   11d48:	cmp	r9, #0
   11d4c:	mov	r2, r8
   11d50:	cmpeq	r8, #2
   11d54:	movcc	r2, #2
   11d58:	str	r2, [r1, #4]
   11d5c:	ldr	r3, [r5]
   11d60:	cmp	r3, sl
   11d64:	bge	11eac <__assert_fail@plt+0x9cc>
   11d68:	ldr	r1, [r7, r3, lsl #2]
   11d6c:	add	r2, r3, #1
   11d70:	cmp	r2, sl
   11d74:	ldr	r0, [sp, #64]	; 0x40
   11d78:	str	r2, [r5]
   11d7c:	lsl	r2, r3, #2
   11d80:	str	r1, [r0, #300]	; 0x12c
   11d84:	bge	11eac <__assert_fail@plt+0x9cc>
   11d88:	add	r2, r7, r2
   11d8c:	add	r3, r3, #2
   11d90:	ldr	r2, [r2, #4]
   11d94:	cmp	r3, sl
   11d98:	str	r3, [r5]
   11d9c:	str	r2, [r0, #12]
   11da0:	bge	11eac <__assert_fail@plt+0x9cc>
   11da4:	mov	r2, #5
   11da8:	movw	r1, #41728	; 0xa300
   11dac:	movt	r1, #1
   11db0:	mov	r0, #0
   11db4:	bl	1121c <dcgettext@plt>
   11db8:	ldr	r3, [r5]
   11dbc:	mov	r4, r0
   11dc0:	ldr	r0, [r7, r3, lsl #2]
   11dc4:	bl	171b4 <__assert_fail@plt+0x5cd4>
   11dc8:	mov	r3, r0
   11dcc:	mov	r2, r4
   11dd0:	mov	r1, #0
   11dd4:	mov	r0, r1
   11dd8:	bl	112d0 <error@plt>
   11ddc:	mov	r0, #1
   11de0:	bl	14528 <__assert_fail@plt+0x3048>
   11de4:	bl	1121c <dcgettext@plt>
   11de8:	mvn	r4, #0
   11dec:	movw	r3, #40116	; 0x9cb4
   11df0:	movt	r3, #1
   11df4:	mov	r2, #1
   11df8:	str	r5, [sp, #16]
   11dfc:	mvn	r5, #0
   11e00:	strd	r4, [sp]
   11e04:	str	r3, [sp, #8]
   11e08:	mov	r3, #0
   11e0c:	str	r0, [sp, #12]
   11e10:	mov	r0, r9
   11e14:	bl	18198 <__assert_fail@plt+0x6cb8>
   11e18:	strd	r0, [sp, #24]
   11e1c:	b	115b0 <__assert_fail@plt+0xd0>
   11e20:	ldrd	r2, [sp, #24]
   11e24:	orrs	r3, r2, r3
   11e28:	bne	11ce4 <__assert_fail@plt+0x804>
   11e2c:	mov	r2, #5
   11e30:	movw	r1, #41232	; 0xa110
   11e34:	movt	r1, #1
   11e38:	mov	r0, #0
   11e3c:	bl	1121c <dcgettext@plt>
   11e40:	mov	r4, r0
   11e44:	movw	r0, #41672	; 0xa2c8
   11e48:	movt	r0, #1
   11e4c:	bl	171b4 <__assert_fail@plt+0x5cd4>
   11e50:	mov	r1, #0
   11e54:	mov	r3, r4
   11e58:	str	r0, [sp]
   11e5c:	movw	r2, #41676	; 0xa2cc
   11e60:	movt	r2, #1
   11e64:	mov	r0, r1
   11e68:	bl	112d0 <error@plt>
   11e6c:	mov	r0, #1
   11e70:	bl	14528 <__assert_fail@plt+0x3048>
   11e74:	movw	r1, #41172	; 0xa0d4
   11e78:	movt	r1, #1
   11e7c:	b	11908 <__assert_fail@plt+0x428>
   11e80:	movw	r1, #41124	; 0xa0a4
   11e84:	movt	r1, #1
   11e88:	mov	r2, #5
   11e8c:	mov	r0, #0
   11e90:	bl	1121c <dcgettext@plt>
   11e94:	mov	r5, r0
   11e98:	ldr	r0, [r4]
   11e9c:	bl	171b4 <__assert_fail@plt+0x5cd4>
   11ea0:	mov	r3, r0
   11ea4:	mov	r2, r5
   11ea8:	b	11dd0 <__assert_fail@plt+0x8f0>
   11eac:	ldr	r3, [sp, #64]	; 0x40
   11eb0:	ldr	r0, [r3, #36]	; 0x24
   11eb4:	cmp	r0, #0
   11eb8:	beq	11ed8 <__assert_fail@plt+0x9f8>
   11ebc:	bl	11354 <strlen@plt>
   11ec0:	ldr	r3, [sp, #64]	; 0x40
   11ec4:	ldr	r3, [r3, #4]
   11ec8:	cmp	r0, r3
   11ecc:	movwhi	r1, #41748	; 0xa314
   11ed0:	movthi	r1, #1
   11ed4:	bhi	11908 <__assert_fail@plt+0x428>
   11ed8:	ldr	r3, [sp, #64]	; 0x40
   11edc:	movw	r1, #41068	; 0xa06c
   11ee0:	movt	r1, #1
   11ee4:	ldr	r5, [r3, #300]	; 0x12c
   11ee8:	mov	r0, r5
   11eec:	bl	11168 <strcmp@plt>
   11ef0:	cmp	r0, #0
   11ef4:	beq	11f14 <__assert_fail@plt+0xa34>
   11ef8:	mov	r3, #0
   11efc:	mov	r1, r5
   11f00:	mov	r2, r3
   11f04:	mov	r0, r3
   11f08:	bl	14bb0 <__assert_fail@plt+0x36d0>
   11f0c:	cmp	r0, #0
   11f10:	blt	13378 <__assert_fail@plt+0x1e98>
   11f14:	ldr	r2, [pc, #244]	; 12010 <__assert_fail@plt+0xb30>
   11f18:	mov	r1, #0
   11f1c:	mov	r0, #3
   11f20:	bl	11264 <__fxstat64@plt>
   11f24:	cmp	r0, #0
   11f28:	bne	13088 <__assert_fail@plt+0x1ba8>
   11f2c:	ldr	r3, [sp, #68]	; 0x44
   11f30:	cmp	r3, #0
   11f34:	bne	11f58 <__assert_fail@plt+0xa78>
   11f38:	ldr	r3, [sp, #64]	; 0x40
   11f3c:	ldr	r1, [r3, #104]	; 0x68
   11f40:	mov	r3, #0
   11f44:	movt	r3, #8190	; 0x1ffe
   11f48:	sub	r2, r1, #131072	; 0x20000
   11f4c:	cmp	r2, r3
   11f50:	movhi	r1, #131072	; 0x20000
   11f54:	str	r1, [sp, #68]	; 0x44
   11f58:	bl	11390 <getpagesize@plt>
   11f5c:	ldr	r3, [sp, #68]	; 0x44
   11f60:	add	r1, r3, #1
   11f64:	bl	17b74 <__assert_fail@plt+0x6694>
   11f68:	cmp	r4, #1
   11f6c:	str	r0, [sp, #88]	; 0x58
   11f70:	mvnhi	sl, #0
   11f74:	mvnhi	r8, #0
   11f78:	mvnhi	r9, #-2147483648	; 0x80000000
   11f7c:	bls	12b9c <__assert_fail@plt+0x16bc>
   11f80:	ldr	r3, [sp, #64]	; 0x40
   11f84:	ldr	r3, [r3, #40]	; 0x28
   11f88:	cmp	r3, #0
   11f8c:	beq	11fd0 <__assert_fail@plt+0xaf0>
   11f90:	ldr	r0, [pc, #124]	; 12014 <__assert_fail@plt+0xb34>
   11f94:	bl	11444 <sigemptyset@plt>
   11f98:	add	r2, sp, #144	; 0x90
   11f9c:	mov	r1, #0
   11fa0:	mov	r0, #13
   11fa4:	bl	11270 <sigaction@plt>
   11fa8:	ldr	r3, [sp, #144]	; 0x90
   11fac:	cmp	r3, #1
   11fb0:	beq	11fc0 <__assert_fail@plt+0xae0>
   11fb4:	mov	r1, #13
   11fb8:	ldr	r0, [pc, #84]	; 12014 <__assert_fail@plt+0xb34>
   11fbc:	bl	11300 <sigaddset@plt>
   11fc0:	ldr	r2, [pc, #80]	; 12018 <__assert_fail@plt+0xb38>
   11fc4:	mov	r0, #0
   11fc8:	add	r1, r2, #148	; 0x94
   11fcc:	bl	11198 <sigprocmask@plt>
   11fd0:	ldr	r3, [sp, #52]	; 0x34
   11fd4:	sub	r3, r3, #2
   11fd8:	cmp	r3, #5
   11fdc:	ldrls	pc, [pc, r3, lsl #2]
   11fe0:	b	13420 <__assert_fail@plt+0x1f40>
   11fe4:	strheq	r2, [r1], -r4
   11fe8:	andeq	r2, r1, ip, lsl r0
   11fec:	andeq	r2, r1, ip, lsl r0
   11ff0:	andeq	r2, r1, r8, lsl #15
   11ff4:	ldrdeq	r2, [r1], -r0
   11ff8:	ldrdeq	r2, [r1], -r0
   11ffc:	nop	{0}
   12000:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   12004:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   12008:	andeq	r9, r1, r0, lsr #6
   1200c:	andeq	r9, r1, r0, lsr r4
   12010:	andeq	fp, r2, r0, lsr #7
   12014:	andeq	fp, r2, r4, lsr #9
   12018:	andeq	fp, r2, r0, lsl r4
   1201c:	ldr	r9, [sp, #48]	; 0x30
   12020:	mov	r4, #0
   12024:	mov	r5, #0
   12028:	mov	r8, #1
   1202c:	mov	r0, #0
   12030:	ldr	r2, [sp, #68]	; 0x44
   12034:	ldr	r1, [sp, #88]	; 0x58
   12038:	bl	171cc <__assert_fail@plt+0x5cec>
   1203c:	cmn	r0, #1
   12040:	mov	fp, r0
   12044:	beq	13088 <__assert_fail@plt+0x1ba8>
   12048:	ldr	r3, [sp, #88]	; 0x58
   1204c:	ldr	r2, [r9, #12]
   12050:	add	r6, r3, r0
   12054:	mov	r7, r3
   12058:	mov	sl, r3
   1205c:	strb	r2, [r3, r0]
   12060:	mov	r0, sl
   12064:	ldr	r1, [r9, #12]
   12068:	bl	1124c <rawmemchr@plt>
   1206c:	cmp	r6, r0
   12070:	beq	129ec <__assert_fail@plt+0x150c>
   12074:	ldrd	r2, [sp, #24]
   12078:	adds	r4, r4, #1
   1207c:	add	sl, r0, #1
   12080:	adc	r5, r5, #0
   12084:	cmp	r5, r3
   12088:	cmpeq	r4, r2
   1208c:	bcc	12060 <__assert_fail@plt+0xb80>
   12090:	mov	r0, r8
   12094:	sub	r2, sl, r7
   12098:	mov	r1, r7
   1209c:	mov	r8, #1
   120a0:	bl	1413c <__assert_fail@plt+0x2c5c>
   120a4:	mov	r7, sl
   120a8:	mov	r4, #0
   120ac:	mov	r5, #0
   120b0:	b	12060 <__assert_fail@plt+0xb80>
   120b4:	ldr	r3, [sp, #68]	; 0x44
   120b8:	mov	sl, #0
   120bc:	mov	r8, #0
   120c0:	mov	r9, #0
   120c4:	str	sl, [sp, #32]
   120c8:	str	sl, [sp, #52]	; 0x34
   120cc:	str	sl, [sp, #56]	; 0x38
   120d0:	mvn	r3, r3
   120d4:	str	r3, [sp, #80]	; 0x50
   120d8:	mov	r0, #0
   120dc:	ldr	r2, [sp, #68]	; 0x44
   120e0:	ldr	r1, [sp, #88]	; 0x58
   120e4:	bl	171cc <__assert_fail@plt+0x5cec>
   120e8:	cmn	r0, #1
   120ec:	mov	r7, r0
   120f0:	beq	13088 <__assert_fail@plt+0x1ba8>
   120f4:	cmp	r0, #0
   120f8:	beq	12c90 <__assert_fail@plt+0x17b0>
   120fc:	ldr	r6, [sp, #88]	; 0x58
   12100:	b	12194 <__assert_fail@plt+0xcb4>
   12104:	sub	r4, r4, sl
   12108:	mov	r1, ip
   1210c:	sub	r4, r4, r8
   12110:	mov	r0, r6
   12114:	mov	r2, r4
   12118:	sub	fp, r4, #1
   1211c:	bl	11384 <memrchr@plt>
   12120:	cmp	sl, #0
   12124:	add	fp, r6, fp
   12128:	mov	r5, r0
   1212c:	beq	121f8 <__assert_fail@plt+0xd18>
   12130:	orrs	r3, r8, r9
   12134:	moveq	r0, #1
   12138:	movne	r0, #0
   1213c:	cmp	r5, #0
   12140:	moveq	r2, r0
   12144:	movne	r2, #1
   12148:	cmp	r2, #0
   1214c:	bne	128f4 <__assert_fail@plt+0x1414>
   12150:	ldr	r3, [sp, #56]	; 0x38
   12154:	cmp	r3, #0
   12158:	bne	13350 <__assert_fail@plt+0x1e70>
   1215c:	orrs	r3, r8, r9
   12160:	moveq	r0, #1
   12164:	movne	r0, #0
   12168:	cmp	fp, #0
   1216c:	beq	12964 <__assert_fail@plt+0x1484>
   12170:	mov	r1, r6
   12174:	mov	r2, r4
   12178:	sub	r7, r7, r4
   1217c:	add	r6, r6, r4
   12180:	mov	r8, #0
   12184:	mov	r9, #0
   12188:	bl	1413c <__assert_fail@plt+0x2c5c>
   1218c:	cmp	r7, #0
   12190:	beq	120d8 <__assert_fail@plt+0xbf8>
   12194:	ldrd	r4, [sp, #24]
   12198:	ldr	r1, [sp, #48]	; 0x30
   1219c:	subs	r2, r4, r8
   121a0:	sbc	r0, r5, r9
   121a4:	subs	r3, r2, sl
   121a8:	ldr	ip, [r1, #12]
   121ac:	mov	r1, #0
   121b0:	mov	r2, r7
   121b4:	sbc	r1, r0, r1
   121b8:	str	r3, [sp, #40]	; 0x28
   121bc:	mov	r3, #0
   121c0:	str	r1, [sp, #44]	; 0x2c
   121c4:	ldrd	r0, [sp, #40]	; 0x28
   121c8:	strd	r2, [sp, #72]	; 0x48
   121cc:	cmp	r1, r3
   121d0:	cmpeq	r0, r7
   121d4:	bls	12104 <__assert_fail@plt+0xc24>
   121d8:	mov	r1, ip
   121dc:	mov	r0, r6
   121e0:	bl	11384 <memrchr@plt>
   121e4:	mov	fp, #0
   121e8:	cmp	sl, #0
   121ec:	mov	r5, r0
   121f0:	mov	r4, fp
   121f4:	bne	12130 <__assert_fail@plt+0xc50>
   121f8:	cmp	r5, #0
   121fc:	beq	129b0 <__assert_fail@plt+0x14d0>
   12200:	sub	r5, r5, r6
   12204:	orrs	r3, r8, r9
   12208:	add	r5, r5, #1
   1220c:	moveq	r0, #1
   12210:	movne	r0, #0
   12214:	mov	r1, r6
   12218:	adds	r8, r8, r5
   1221c:	mov	r2, r5
   12220:	adc	r9, r9, #0
   12224:	sub	r7, r7, r5
   12228:	bl	1413c <__assert_fail@plt+0x2c5c>
   1222c:	cmp	fp, #0
   12230:	add	r6, r6, r5
   12234:	beq	12938 <__assert_fail@plt+0x1458>
   12238:	subs	r4, r4, r5
   1223c:	moveq	r3, #0
   12240:	movne	r3, #1
   12244:	moveq	sl, #0
   12248:	str	r3, [sp, #56]	; 0x38
   1224c:	moveq	r3, #1
   12250:	streq	r3, [sp, #56]	; 0x38
   12254:	beq	122b4 <__assert_fail@plt+0xdd4>
   12258:	mov	sl, #0
   1225c:	ldr	r3, [sp, #52]	; 0x34
   12260:	sub	r2, r3, sl
   12264:	cmp	r2, r4
   12268:	bcs	12294 <__assert_fail@plt+0xdb4>
   1226c:	ldr	r2, [sp, #80]	; 0x50
   12270:	cmp	r2, r3
   12274:	bcc	131f0 <__assert_fail@plt+0x1d10>
   12278:	ldr	r0, [sp, #32]
   1227c:	ldr	r2, [sp, #68]	; 0x44
   12280:	add	r3, r3, r2
   12284:	mov	r1, r3
   12288:	str	r3, [sp, #52]	; 0x34
   1228c:	bl	17c04 <__assert_fail@plt+0x6724>
   12290:	str	r0, [sp, #32]
   12294:	ldr	r3, [sp, #32]
   12298:	mov	r1, r6
   1229c:	mov	r2, r4
   122a0:	sub	r7, r7, r4
   122a4:	add	r6, r6, r4
   122a8:	add	r0, r3, sl
   122ac:	add	sl, sl, r4
   122b0:	bl	111c8 <memcpy@plt>
   122b4:	cmp	fp, #0
   122b8:	beq	1218c <__assert_fail@plt+0xcac>
   122bc:	mov	r3, #0
   122c0:	mov	r8, #0
   122c4:	mov	r9, #0
   122c8:	str	r3, [sp, #56]	; 0x38
   122cc:	b	1218c <__assert_fail@plt+0xcac>
   122d0:	ldrd	r2, [sp, #56]	; 0x38
   122d4:	orrs	r3, r2, r3
   122d8:	bne	12ee8 <__assert_fail@plt+0x1a08>
   122dc:	ldrd	sl, [sp, #24]
   122e0:	mov	r3, #0
   122e4:	mvn	r2, #0
   122e8:	cmp	fp, r3
   122ec:	cmpeq	sl, r2
   122f0:	bhi	131f0 <__assert_fail@plt+0x1d10>
   122f4:	mov	r1, #16
   122f8:	mov	r0, sl
   122fc:	bl	17d00 <__assert_fail@plt+0x6820>
   12300:	ldr	r9, [sp, #64]	; 0x40
   12304:	mov	r4, #0
   12308:	mov	r7, r0
   1230c:	mov	r8, r4
   12310:	mov	r6, sl
   12314:	str	r0, [sp, #84]	; 0x54
   12318:	mvn	r5, #0
   1231c:	bl	13540 <__assert_fail@plt+0x2060>
   12320:	add	r4, r4, #1
   12324:	ldr	r0, [r9]
   12328:	bl	17fe8 <__assert_fail@plt+0x6b08>
   1232c:	cmp	r6, r4
   12330:	stm	r7, {r0, r5, r8}
   12334:	add	r7, r7, #16
   12338:	str	r8, [r7, #-4]
   1233c:	bne	1231c <__assert_fail@plt+0xe3c>
   12340:	ldr	r8, [sp, #64]	; 0x40
   12344:	movw	r3, #45924	; 0xb364
   12348:	movt	r3, #2
   1234c:	mov	r9, #0
   12350:	mov	r2, #1
   12354:	str	r3, [sp, #96]	; 0x60
   12358:	mov	r3, #0
   1235c:	strd	r2, [sp, #32]
   12360:	str	r9, [sp, #40]	; 0x28
   12364:	str	r9, [sp, #72]	; 0x48
   12368:	str	r9, [sp, #104]	; 0x68
   1236c:	mov	r0, #0
   12370:	ldr	r2, [sp, #68]	; 0x44
   12374:	ldr	r1, [sp, #88]	; 0x58
   12378:	bl	171cc <__assert_fail@plt+0x5cec>
   1237c:	cmn	r0, #1
   12380:	beq	13088 <__assert_fail@plt+0x1ba8>
   12384:	cmp	r0, #0
   12388:	beq	12cfc <__assert_fail@plt+0x181c>
   1238c:	ldr	r3, [sp, #88]	; 0x58
   12390:	add	r7, r3, r0
   12394:	cmp	r3, r7
   12398:	beq	1236c <__assert_fail@plt+0xe8c>
   1239c:	mov	r4, r3
   123a0:	b	123f0 <__assert_fail@plt+0xf10>
   123a4:	ldrd	r0, [sp, #32]
   123a8:	cmp	r1, r3
   123ac:	cmpeq	r0, r2
   123b0:	beq	12888 <__assert_fail@plt+0x13a8>
   123b4:	cmp	r5, #0
   123b8:	beq	123e4 <__assert_fail@plt+0xf04>
   123bc:	ldrd	r0, [sp, #24]
   123c0:	ldrd	r2, [sp, #32]
   123c4:	cmp	r3, r1
   123c8:	cmpeq	r2, r0
   123cc:	beq	12980 <__assert_fail@plt+0x14a0>
   123d0:	adds	r3, r2, #1
   123d4:	str	r3, [sp, #32]
   123d8:	ldr	r3, [sp, #36]	; 0x24
   123dc:	adc	r3, r3, #0
   123e0:	str	r3, [sp, #36]	; 0x24
   123e4:	cmp	r7, r6
   123e8:	mov	r4, r6
   123ec:	beq	1236c <__assert_fail@plt+0xe8c>
   123f0:	ldr	r3, [sp, #48]	; 0x30
   123f4:	sub	fp, r7, r4
   123f8:	mov	r0, r4
   123fc:	mov	r2, fp
   12400:	ldr	r1, [r3, #12]
   12404:	bl	113fc <memchr@plt>
   12408:	ldrd	r2, [sp, #56]	; 0x38
   1240c:	subs	r5, r0, #0
   12410:	addne	r6, r5, #1
   12414:	moveq	r6, r7
   12418:	movne	r5, #1
   1241c:	subne	fp, r6, r4
   12420:	orrs	r1, r2, r3
   12424:	bne	123a4 <__assert_fail@plt+0xec4>
   12428:	mov	r1, r9
   1242c:	ldr	r2, [sp, #24]
   12430:	ldr	r0, [sp, #84]	; 0x54
   12434:	add	sl, r0, r9, lsl #4
   12438:	bl	13c78 <__assert_fail@plt+0x2798>
   1243c:	ldr	r3, [sp, #40]	; 0x28
   12440:	ldrb	r2, [r8, #304]	; 0x130
   12444:	orr	r0, r0, r3
   12448:	uxtb	r3, r0
   1244c:	str	r3, [sp, #40]	; 0x28
   12450:	str	r2, [sp, #80]	; 0x50
   12454:	bl	1139c <__errno_location@plt>
   12458:	ldr	r2, [sp, #80]	; 0x50
   1245c:	str	r0, [sp, #52]	; 0x34
   12460:	cmp	r2, #0
   12464:	bne	127f0 <__assert_fail@plt+0x1310>
   12468:	mov	r1, fp
   1246c:	mov	r0, r4
   12470:	ldr	r3, [sl, #8]
   12474:	mov	r2, #1
   12478:	bl	111f8 <fwrite_unlocked@plt>
   1247c:	cmp	r0, #1
   12480:	beq	12808 <__assert_fail@plt+0x1328>
   12484:	ldr	r3, [sp, #52]	; 0x34
   12488:	ldr	r4, [r3]
   1248c:	ldr	r3, [r8, #40]	; 0x28
   12490:	sub	r0, r4, #32
   12494:	clz	r0, r0
   12498:	lsr	r0, r0, #5
   1249c:	cmp	r3, #0
   124a0:	moveq	r0, #0
   124a4:	cmp	r0, #0
   124a8:	bne	12838 <__assert_fail@plt+0x1358>
   124ac:	mov	r1, #3
   124b0:	ldr	r2, [sl]
   124b4:	bl	16fdc <__assert_fail@plt+0x5afc>
   124b8:	mov	r3, r0
   124bc:	movw	r2, #38544	; 0x9690
   124c0:	movt	r2, #1
   124c4:	mov	r1, r4
   124c8:	mov	r0, #1
   124cc:	bl	112d0 <error@plt>
   124d0:	ldrd	r2, [sp, #24]
   124d4:	ldrd	r0, [sp, #56]	; 0x38
   124d8:	cmp	r1, r3
   124dc:	cmpeq	r0, r2
   124e0:	bhi	13274 <__assert_fail@plt+0x1d94>
   124e4:	cmp	r9, r3
   124e8:	cmpeq	r8, r2
   124ec:	bcc	13274 <__assert_fail@plt+0x1d94>
   124f0:	mov	r0, r8
   124f4:	mov	r1, r9
   124f8:	ldrd	r2, [sp, #24]
   124fc:	bl	190dc <__assert_fail@plt+0x7bfc>
   12500:	ldrd	r6, [sp, #56]	; 0x38
   12504:	mov	r3, r1
   12508:	str	r0, [sp, #40]	; 0x28
   1250c:	str	r1, [sp, #52]	; 0x34
   12510:	cmp	r7, #0
   12514:	cmpeq	r6, #1
   12518:	bls	130d8 <__assert_fail@plt+0x1bf8>
   1251c:	subs	r2, r6, #1
   12520:	mov	r5, #0
   12524:	mov	r4, sl
   12528:	str	r2, [sp, #96]	; 0x60
   1252c:	sbc	r2, r7, #0
   12530:	str	r2, [sp, #100]	; 0x64
   12534:	ldrd	r6, [sp, #96]	; 0x60
   12538:	mul	r2, r0, r7
   1253c:	umull	r0, r1, r0, r6
   12540:	mla	r3, r6, r3, r2
   12544:	subs	r2, r0, #1
   12548:	add	r1, r3, r1
   1254c:	sbc	r3, r1, #0
   12550:	strd	r2, [sp, #112]	; 0x70
   12554:	ldrd	r0, [sp, #112]	; 0x70
   12558:	cmp	r0, sl
   1255c:	sbcs	ip, r1, r5
   12560:	bge	13108 <__assert_fail@plt+0x1c28>
   12564:	mov	r4, r0
   12568:	sub	sl, sl, r0
   1256c:	ldr	r0, [sp, #88]	; 0x58
   12570:	mov	r5, r1
   12574:	mov	r2, sl
   12578:	add	r1, r0, r4
   1257c:	bl	111a4 <memmove@plt>
   12580:	mov	r0, sl
   12584:	ldrd	r6, [sp, #96]	; 0x60
   12588:	mov	r3, #0
   1258c:	strd	r8, [sp, #72]	; 0x48
   12590:	ldrd	sl, [sp, #112]	; 0x70
   12594:	str	r3, [sp, #128]	; 0x80
   12598:	mov	r3, #1
   1259c:	str	r3, [sp, #136]	; 0x88
   125a0:	ldrd	r2, [sp, #72]	; 0x48
   125a4:	cmp	r4, r2
   125a8:	sbcs	r3, r5, r3
   125ac:	bge	132ac <__assert_fail@plt+0x1dcc>
   125b0:	cmn	r0, #1
   125b4:	beq	131d4 <__assert_fail@plt+0x1cf4>
   125b8:	cmp	r0, #0
   125bc:	beq	132ac <__assert_fail@plt+0x1dcc>
   125c0:	ldrd	r2, [sp, #72]	; 0x48
   125c4:	ldr	r9, [sp, #88]	; 0x58
   125c8:	subs	r1, r2, r4
   125cc:	sbc	r3, r3, r5
   125d0:	str	r1, [sp, #120]	; 0x78
   125d4:	mov	r1, #0
   125d8:	str	r3, [sp, #124]	; 0x7c
   125dc:	ldrd	r2, [sp, #120]	; 0x78
   125e0:	cmp	r0, r2
   125e4:	sbcs	r3, r1, r3
   125e8:	strdlt	r0, [sp, #120]	; 0x78
   125ec:	ldrd	r2, [sp, #120]	; 0x78
   125f0:	mov	r3, #0
   125f4:	str	r3, [sp, #128]	; 0x80
   125f8:	mov	r1, r2
   125fc:	add	r8, r9, r2
   12600:	ldrd	r2, [sp, #56]	; 0x38
   12604:	str	r1, [sp, #80]	; 0x50
   12608:	orr	r3, r2, r3
   1260c:	str	r3, [sp, #32]
   12610:	cmp	r8, r9
   12614:	mvn	r0, #0
   12618:	beq	125a0 <__assert_fail@plt+0x10c0>
   1261c:	subs	r3, sl, r4
   12620:	str	r3, [sp, #104]	; 0x68
   12624:	sbc	r3, fp, r5
   12628:	str	r3, [sp, #108]	; 0x6c
   1262c:	ldrd	r2, [sp, #104]	; 0x68
   12630:	cmp	r2, #0
   12634:	sbcs	r3, r3, #0
   12638:	bge	12648 <__assert_fail@plt+0x1168>
   1263c:	mov	r2, #0
   12640:	mov	r3, #0
   12644:	strd	r2, [sp, #104]	; 0x68
   12648:	ldr	r2, [sp, #80]	; 0x50
   1264c:	mov	r3, #0
   12650:	ldrd	r0, [sp, #104]	; 0x68
   12654:	cmp	r2, r0
   12658:	sbcs	ip, r3, r1
   1265c:	ldr	r3, [sp, #80]	; 0x50
   12660:	movlt	r0, r2
   12664:	sub	r2, r3, r0
   12668:	ldr	r3, [sp, #48]	; 0x30
   1266c:	add	r0, r9, r0
   12670:	ldr	r1, [r3, #12]
   12674:	bl	113fc <memchr@plt>
   12678:	subs	r3, r0, #0
   1267c:	beq	12cb0 <__assert_fail@plt+0x17d0>
   12680:	mov	r2, #1
   12684:	add	r3, r3, #1
   12688:	str	r2, [sp, #112]	; 0x70
   1268c:	ldrd	r0, [sp, #56]	; 0x38
   12690:	sub	r2, r3, r9
   12694:	str	r2, [sp, #84]	; 0x54
   12698:	cmp	r7, r1
   1269c:	cmpeq	r6, r0
   126a0:	beq	12cd8 <__assert_fail@plt+0x17f8>
   126a4:	ldrd	r0, [sp, #56]	; 0x38
   126a8:	orrs	r2, r0, r1
   126ac:	beq	12cbc <__assert_fail@plt+0x17dc>
   126b0:	ldr	r2, [sp, #84]	; 0x54
   126b4:	ldr	r9, [sp, #112]	; 0x70
   126b8:	adds	r4, r4, r2
   126bc:	adc	r5, r5, #0
   126c0:	mov	r2, r9
   126c4:	mov	r9, r8
   126c8:	mov	r8, r3
   126cc:	mov	r3, r2
   126d0:	cmp	sl, r4
   126d4:	sbcs	r2, fp, r5
   126d8:	movge	r2, r3
   126dc:	orrlt	r2, r3, #1
   126e0:	tst	r2, #255	; 0xff
   126e4:	beq	12c60 <__assert_fail@plt+0x1780>
   126e8:	eor	r2, r3, #1
   126ec:	cmp	r9, r8
   126f0:	movne	r2, #0
   126f4:	andeq	r2, r2, #1
   126f8:	cmp	r2, #0
   126fc:	bne	12ca4 <__assert_fail@plt+0x17c4>
   12700:	ldrd	r0, [sp, #56]	; 0x38
   12704:	adds	r6, r6, #1
   12708:	adc	r7, r7, #0
   1270c:	cmp	r7, r1
   12710:	ldr	r1, [sp, #32]
   12714:	cmpeq	r6, r0
   12718:	movhi	r2, #1
   1271c:	movls	r2, #0
   12720:	cmp	r1, #0
   12724:	moveq	r2, #0
   12728:	cmp	r2, #0
   1272c:	bne	127c0 <__assert_fail@plt+0x12e0>
   12730:	ldrd	r0, [sp, #24]
   12734:	cmp	r7, r1
   12738:	cmpeq	r6, r0
   1273c:	beq	12a14 <__assert_fail@plt+0x1534>
   12740:	ldr	r2, [sp, #40]	; 0x28
   12744:	adds	sl, sl, r2
   12748:	ldr	r2, [sp, #52]	; 0x34
   1274c:	adc	fp, fp, r2
   12750:	cmp	sl, r4
   12754:	sbcs	r2, fp, r5
   12758:	movge	r3, #0
   1275c:	bge	126d0 <__assert_fail@plt+0x11f0>
   12760:	ldrd	r0, [sp, #56]	; 0x38
   12764:	orrs	r2, r0, r1
   12768:	bne	126d0 <__assert_fail@plt+0x11f0>
   1276c:	mov	r2, #0
   12770:	mov	r0, #1
   12774:	str	r3, [sp, #96]	; 0x60
   12778:	mov	r1, r2
   1277c:	bl	1413c <__assert_fail@plt+0x2c5c>
   12780:	ldr	r3, [sp, #96]	; 0x60
   12784:	b	126d0 <__assert_fail@plt+0x11f0>
   12788:	ldrd	r2, [sp, #56]	; 0x38
   1278c:	orrs	r3, r2, r3
   12790:	bne	12ef4 <__assert_fail@plt+0x1a14>
   12794:	ldrd	r4, [sp, #24]
   12798:	mov	r0, r8
   1279c:	mov	r1, r9
   127a0:	mov	r2, r4
   127a4:	mov	r3, r5
   127a8:	bl	190dc <__assert_fail@plt+0x7bfc>
   127ac:	str	sl, [sp]
   127b0:	strd	r4, [sp, #8]
   127b4:	ldr	r3, [sp, #68]	; 0x44
   127b8:	ldr	r2, [sp, #88]	; 0x58
   127bc:	bl	14270 <__assert_fail@plt+0x2d90>
   127c0:	mov	r0, #0
   127c4:	bl	114c8 <close@plt>
   127c8:	subs	r4, r0, #0
   127cc:	bne	13088 <__assert_fail@plt+0x1ba8>
   127d0:	ldr	r1, [sp, #48]	; 0x30
   127d4:	ldr	r2, [sp, #64]	; 0x40
   127d8:	ldr	r1, [r1, #8]
   127dc:	ldr	r3, [r2]
   127e0:	ldr	r2, [r2, #288]	; 0x120
   127e4:	bl	13e54 <__assert_fail@plt+0x2974>
   127e8:	mov	r0, r4
   127ec:	bl	11348 <exit@plt>
   127f0:	mov	r1, r4
   127f4:	mov	r2, fp
   127f8:	ldr	r0, [sl, #4]
   127fc:	bl	14dc4 <__assert_fail@plt+0x38e4>
   12800:	cmp	r0, fp
   12804:	bne	12484 <__assert_fail@plt+0xfa4>
   12808:	ldr	r3, [sp, #52]	; 0x34
   1280c:	ldr	r2, [r8, #40]	; 0x28
   12810:	ldr	r1, [r3]
   12814:	cmp	r2, #0
   12818:	sub	r3, r1, #32
   1281c:	clz	r3, r3
   12820:	lsr	r3, r3, #5
   12824:	moveq	r3, #0
   12828:	cmp	r3, #0
   1282c:	ldr	r3, [sp, #72]	; 0x48
   12830:	moveq	r3, #1
   12834:	str	r3, [sp, #72]	; 0x48
   12838:	ldr	r3, [sp, #40]	; 0x28
   1283c:	cmp	r3, #0
   12840:	bne	12990 <__assert_fail@plt+0x14b0>
   12844:	cmp	r5, #0
   12848:	beq	123e4 <__assert_fail@plt+0xf04>
   1284c:	ldrd	r0, [sp, #24]
   12850:	mov	r3, #0
   12854:	add	r9, r9, #1
   12858:	cmp	r3, r1
   1285c:	cmpeq	r9, r0
   12860:	bne	123e4 <__assert_fail@plt+0xf04>
   12864:	ldr	r3, [sp, #72]	; 0x48
   12868:	cmp	r3, #0
   1286c:	beq	12d14 <__assert_fail@plt+0x1834>
   12870:	ldr	r3, [sp, #72]	; 0x48
   12874:	str	r3, [sp, #104]	; 0x68
   12878:	mov	r3, #0
   1287c:	mov	r9, r3
   12880:	str	r3, [sp, #72]	; 0x48
   12884:	b	123e4 <__assert_fail@plt+0xf04>
   12888:	ldrb	sl, [r8, #304]	; 0x130
   1288c:	cmp	sl, #0
   12890:	bne	129b8 <__assert_fail@plt+0x14d8>
   12894:	ldr	r3, [sp, #96]	; 0x60
   12898:	mov	r1, fp
   1289c:	mov	r0, r4
   128a0:	mov	r2, #1
   128a4:	ldr	r3, [r3]
   128a8:	bl	111f8 <fwrite_unlocked@plt>
   128ac:	cmp	r0, #1
   128b0:	beq	123b4 <__assert_fail@plt+0xed4>
   128b4:	ldr	r3, [sp, #96]	; 0x60
   128b8:	ldr	r0, [r3]
   128bc:	bl	11480 <clearerr_unlocked@plt>
   128c0:	bl	1139c <__errno_location@plt>
   128c4:	movw	r1, #41940	; 0xa3d4
   128c8:	movt	r1, #1
   128cc:	ldr	r4, [r0]
   128d0:	mov	r2, #5
   128d4:	mov	r0, sl
   128d8:	bl	1121c <dcgettext@plt>
   128dc:	mov	r3, r0
   128e0:	movw	r2, #38544	; 0x9690
   128e4:	movt	r2, #1
   128e8:	mov	r0, #1
   128ec:	mov	r1, r4
   128f0:	bl	112d0 <error@plt>
   128f4:	mov	r2, sl
   128f8:	ldr	r1, [sp, #32]
   128fc:	bl	1413c <__assert_fail@plt+0x2c5c>
   12900:	ldr	r3, [sp, #68]	; 0x44
   12904:	adds	r8, r8, sl
   12908:	adc	r9, r9, #0
   1290c:	cmp	r3, sl
   12910:	ldrcs	r3, [sp, #68]	; 0x44
   12914:	strcs	r3, [sp, #52]	; 0x34
   12918:	bcs	121f8 <__assert_fail@plt+0xd18>
   1291c:	mov	sl, r3
   12920:	mov	r1, r3
   12924:	ldr	r0, [sp, #32]
   12928:	bl	17c04 <__assert_fail@plt+0x6724>
   1292c:	str	r0, [sp, #32]
   12930:	str	sl, [sp, #52]	; 0x34
   12934:	b	121f8 <__assert_fail@plt+0xd18>
   12938:	adds	r3, r7, #0
   1293c:	movne	r3, #1
   12940:	cmp	r3, #0
   12944:	moveq	sl, r3
   12948:	str	r3, [sp, #56]	; 0x38
   1294c:	moveq	r3, #1
   12950:	streq	r3, [sp, #56]	; 0x38
   12954:	beq	1218c <__assert_fail@plt+0xcac>
   12958:	mov	sl, fp
   1295c:	mov	r4, r7
   12960:	b	1225c <__assert_fail@plt+0xd7c>
   12964:	mov	r2, r7
   12968:	mov	r1, r6
   1296c:	bl	1413c <__assert_fail@plt+0x2c5c>
   12970:	ldrd	r2, [sp, #72]	; 0x48
   12974:	adds	r8, r8, r2
   12978:	adc	r9, r9, r3
   1297c:	b	120d8 <__assert_fail@plt+0xbf8>
   12980:	mov	r2, #1
   12984:	mov	r3, #0
   12988:	strd	r2, [sp, #32]
   1298c:	b	123e4 <__assert_fail@plt+0xf04>
   12990:	ldr	r0, [sl, #8]
   12994:	bl	14abc <__assert_fail@plt+0x35dc>
   12998:	cmp	r0, #0
   1299c:	bne	133f0 <__assert_fail@plt+0x1f10>
   129a0:	mvn	r3, #1
   129a4:	str	r3, [sl, #4]
   129a8:	str	r0, [sl, #8]
   129ac:	b	12844 <__assert_fail@plt+0x1364>
   129b0:	mov	sl, r5
   129b4:	b	12150 <__assert_fail@plt+0xc70>
   129b8:	mov	r1, r4
   129bc:	mov	r2, fp
   129c0:	mov	r0, #1
   129c4:	bl	14dc4 <__assert_fail@plt+0x38e4>
   129c8:	cmp	r0, fp
   129cc:	beq	123b4 <__assert_fail@plt+0xed4>
   129d0:	bl	1139c <__errno_location@plt>
   129d4:	movw	r1, #41940	; 0xa3d4
   129d8:	movt	r1, #1
   129dc:	ldr	r4, [r0]
   129e0:	mov	r2, #5
   129e4:	mov	r0, #0
   129e8:	b	128d8 <__assert_fail@plt+0x13f8>
   129ec:	cmp	r6, r7
   129f0:	beq	12a08 <__assert_fail@plt+0x1528>
   129f4:	mov	r0, r8
   129f8:	sub	r2, r6, r7
   129fc:	mov	r1, r7
   12a00:	mov	r8, #0
   12a04:	bl	1413c <__assert_fail@plt+0x2c5c>
   12a08:	cmp	fp, #0
   12a0c:	bne	1202c <__assert_fail@plt+0xb4c>
   12a10:	b	127c0 <__assert_fail@plt+0x12e0>
   12a14:	ldrd	r0, [sp, #72]	; 0x48
   12a18:	subs	sl, r0, #1
   12a1c:	sbc	fp, r1, #0
   12a20:	b	12750 <__assert_fail@plt+0x1270>
   12a24:	ldr	r2, [sp, #48]	; 0x30
   12a28:	mov	r3, #0
   12a2c:	strb	r3, [r2]
   12a30:	b	11d5c <__assert_fail@plt+0x87c>
   12a34:	cmp	r4, #2
   12a38:	bhi	11d2c <__assert_fail@plt+0x84c>
   12a3c:	ldrd	r2, [sp, #24]
   12a40:	subs	r1, r2, #1
   12a44:	sbc	r3, r3, #0
   12a48:	str	r1, [sp, #88]	; 0x58
   12a4c:	str	r3, [sp, #92]	; 0x5c
   12a50:	ldr	r3, [sp, #48]	; 0x30
   12a54:	mov	fp, r7
   12a58:	mov	r8, #0
   12a5c:	mov	r9, #0
   12a60:	ldr	r0, [r3, #4]
   12a64:	bl	11354 <strlen@plt>
   12a68:	mov	r3, #0
   12a6c:	mov	r6, r0
   12a70:	str	r4, [sp, #32]
   12a74:	mov	r7, r3
   12a78:	str	r5, [sp, #72]	; 0x48
   12a7c:	ldrd	r4, [sp, #88]	; 0x58
   12a80:	b	12a8c <__assert_fail@plt+0x15ac>
   12a84:	mov	r4, r0
   12a88:	mov	r5, r1
   12a8c:	adds	r8, r8, #1
   12a90:	mov	r2, r6
   12a94:	mov	r3, r7
   12a98:	mov	r0, r4
   12a9c:	mov	r1, r5
   12aa0:	adc	r9, r9, #0
   12aa4:	bl	190dc <__assert_fail@plt+0x7bfc>
   12aa8:	cmp	r7, r5
   12aac:	cmpeq	r6, r4
   12ab0:	bls	12a84 <__assert_fail@plt+0x15a4>
   12ab4:	mov	r6, #0
   12ab8:	mov	r7, fp
   12abc:	ldr	r4, [sp, #32]
   12ac0:	ldr	r3, [sp, #64]	; 0x40
   12ac4:	ldr	r5, [sp, #72]	; 0x48
   12ac8:	ldr	r2, [r3, #4]
   12acc:	ldr	r3, [sp, #48]	; 0x30
   12ad0:	cmp	r2, r6
   12ad4:	strb	r6, [r3]
   12ad8:	beq	11d44 <__assert_fail@plt+0x864>
   12adc:	mov	r3, #0
   12ae0:	cmp	r9, r3
   12ae4:	cmpeq	r8, r2
   12ae8:	bls	12a24 <__assert_fail@plt+0x1544>
   12aec:	mov	r2, #5
   12af0:	movw	r1, #41684	; 0xa2d4
   12af4:	movt	r1, #1
   12af8:	mov	r0, r6
   12afc:	bl	1121c <dcgettext@plt>
   12b00:	mov	r2, r0
   12b04:	mov	r1, r6
   12b08:	strd	r8, [sp]
   12b0c:	mov	r0, #1
   12b10:	bl	112d0 <error@plt>
   12b14:	ldrd	r8, [sp, #24]
   12b18:	movw	r2, #40116	; 0x9cb4
   12b1c:	movt	r2, #1
   12b20:	str	r2, [sp]
   12b24:	mov	r2, #10
   12b28:	subs	r3, r8, #1
   12b2c:	sbc	ip, r9, #0
   12b30:	str	r3, [sp, #88]	; 0x58
   12b34:	add	r3, sp, #144	; 0x90
   12b38:	str	ip, [sp, #92]	; 0x5c
   12b3c:	bl	181a0 <__assert_fail@plt+0x6cc0>
   12b40:	cmp	r0, #0
   12b44:	bne	12a50 <__assert_fail@plt+0x1570>
   12b48:	ldrd	r8, [sp, #24]
   12b4c:	ldrd	r2, [sp, #144]	; 0x90
   12b50:	mvn	r1, r9
   12b54:	mvn	r0, r8
   12b58:	cmp	r1, r3
   12b5c:	cmpeq	r0, r2
   12b60:	movcs	r1, #1
   12b64:	movcc	r1, #0
   12b68:	cmp	r3, r9
   12b6c:	cmpeq	r2, r8
   12b70:	movcs	r1, #0
   12b74:	andcc	r1, r1, #1
   12b78:	cmp	r1, #0
   12b7c:	beq	12a50 <__assert_fail@plt+0x1570>
   12b80:	ldr	r1, [sp, #88]	; 0x58
   12b84:	adds	r1, r1, r2
   12b88:	str	r1, [sp, #88]	; 0x58
   12b8c:	ldr	r1, [sp, #92]	; 0x5c
   12b90:	adc	r3, r1, r3
   12b94:	str	r3, [sp, #92]	; 0x5c
   12b98:	b	12a50 <__assert_fail@plt+0x1570>
   12b9c:	mov	r1, #1
   12ba0:	mov	r3, #0
   12ba4:	mov	r2, #0
   12ba8:	mov	r0, #0
   12bac:	str	r1, [sp]
   12bb0:	bl	11288 <lseek64@plt>
   12bb4:	cmp	r0, #0
   12bb8:	mov	sl, r0
   12bbc:	sbcs	r3, r1, #0
   12bc0:	mov	fp, r1
   12bc4:	blt	13204 <__assert_fail@plt+0x1d24>
   12bc8:	ldr	r8, [sp, #68]	; 0x44
   12bcc:	mov	r6, #0
   12bd0:	mov	r7, #0
   12bd4:	mov	r5, #0
   12bd8:	ldr	r9, [sp, #88]	; 0x58
   12bdc:	mov	r4, r8
   12be0:	b	12c00 <__assert_fail@plt+0x1720>
   12be4:	cmn	r0, #1
   12be8:	beq	12ea0 <__assert_fail@plt+0x19c0>
   12bec:	adds	r6, r6, r0
   12bf0:	adc	r7, r7, #0
   12bf4:	cmp	r6, r4
   12bf8:	sbcs	r3, r7, r5
   12bfc:	bge	12db4 <__assert_fail@plt+0x18d4>
   12c00:	sub	r2, r8, r6
   12c04:	add	r1, r9, r6
   12c08:	mov	r0, #0
   12c0c:	bl	171cc <__assert_fail@plt+0x5cec>
   12c10:	cmp	r0, #0
   12c14:	bne	12be4 <__assert_fail@plt+0x1704>
   12c18:	ldr	r2, [sp, #68]	; 0x44
   12c1c:	asr	r3, r2, #31
   12c20:	cmp	r6, r2
   12c24:	sbcs	r1, r7, r3
   12c28:	ldrd	r0, [sp, #24]
   12c2c:	movlt	r2, r6
   12c30:	mov	sl, r2
   12c34:	cmp	r0, #0
   12c38:	sbcs	r1, r1, #0
   12c3c:	blt	133ac <__assert_fail@plt+0x1ecc>
   12c40:	ldrd	r2, [sp, #24]
   12c44:	mov	r8, r6
   12c48:	mov	r9, r7
   12c4c:	cmp	r7, r3
   12c50:	cmpeq	r6, r2
   12c54:	movcc	r8, r2
   12c58:	movcc	r9, r3
   12c5c:	b	11f80 <__assert_fail@plt+0xaa0>
   12c60:	ldr	r2, [sp, #128]	; 0x80
   12c64:	mov	r3, r8
   12c68:	mov	r8, r9
   12c6c:	mov	r9, r3
   12c70:	str	r2, [sp, #128]	; 0x80
   12c74:	ldr	r1, [sp, #80]	; 0x50
   12c78:	ldr	r0, [sp, #84]	; 0x54
   12c7c:	ldr	r3, [sp, #112]	; 0x70
   12c80:	sub	r1, r1, r0
   12c84:	str	r1, [sp, #80]	; 0x50
   12c88:	str	r3, [sp, #136]	; 0x88
   12c8c:	b	12610 <__assert_fail@plt+0x1130>
   12c90:	cmp	sl, #0
   12c94:	bne	130bc <__assert_fail@plt+0x1bdc>
   12c98:	ldr	r0, [sp, #32]
   12c9c:	bl	14c94 <__assert_fail@plt+0x37b4>
   12ca0:	b	127c0 <__assert_fail@plt+0x12e0>
   12ca4:	mov	r3, r8
   12ca8:	mov	r8, r9
   12cac:	b	12c6c <__assert_fail@plt+0x178c>
   12cb0:	str	r3, [sp, #112]	; 0x70
   12cb4:	mov	r3, r8
   12cb8:	b	1268c <__assert_fail@plt+0x11ac>
   12cbc:	mov	r1, r9
   12cc0:	ldr	r2, [sp, #84]	; 0x54
   12cc4:	str	r3, [sp, #96]	; 0x60
   12cc8:	ldr	r0, [sp, #136]	; 0x88
   12ccc:	bl	1413c <__assert_fail@plt+0x2c5c>
   12cd0:	ldr	r3, [sp, #96]	; 0x60
   12cd4:	b	126b0 <__assert_fail@plt+0x11d0>
   12cd8:	mov	r1, r9
   12cdc:	mov	r0, #1
   12ce0:	str	r3, [sp, #96]	; 0x60
   12ce4:	mov	r9, r2
   12ce8:	bl	14dc4 <__assert_fail@plt+0x38e4>
   12cec:	cmp	r9, r0
   12cf0:	ldr	r3, [sp, #96]	; 0x60
   12cf4:	beq	126b0 <__assert_fail@plt+0x11d0>
   12cf8:	b	129d0 <__assert_fail@plt+0x14f0>
   12cfc:	ldrd	r2, [sp, #56]	; 0x38
   12d00:	orrs	r3, r2, r3
   12d04:	bne	127c0 <__assert_fail@plt+0x12e0>
   12d08:	ldr	r3, [sp, #104]	; 0x68
   12d0c:	cmp	r3, #0
   12d10:	beq	12d18 <__assert_fail@plt+0x1838>
   12d14:	ldr	r9, [sp, #24]
   12d18:	mov	r5, #0
   12d1c:	mvn	r7, #1
   12d20:	ldr	r6, [sp, #24]
   12d24:	ldr	r4, [sp, #84]	; 0x54
   12d28:	b	12d5c <__assert_fail@plt+0x187c>
   12d2c:	ldr	r1, [r4, #4]
   12d30:	cmp	r1, #0
   12d34:	blt	12d48 <__assert_fail@plt+0x1868>
   12d38:	ldr	r3, [r4]
   12d3c:	ldr	r0, [r4, #8]
   12d40:	ldr	r2, [r4, #12]
   12d44:	bl	13e54 <__assert_fail@plt+0x2974>
   12d48:	add	r5, r5, #1
   12d4c:	add	r4, r4, #16
   12d50:	str	r7, [r4, #-12]
   12d54:	cmp	r6, r5
   12d58:	beq	127c0 <__assert_fail@plt+0x12e0>
   12d5c:	cmp	r5, r9
   12d60:	bcc	12d2c <__assert_fail@plt+0x184c>
   12d64:	ldr	r3, [sp, #64]	; 0x40
   12d68:	ldrb	r3, [r3, #296]	; 0x128
   12d6c:	cmp	r3, #0
   12d70:	bne	12d2c <__assert_fail@plt+0x184c>
   12d74:	mov	r2, r6
   12d78:	mov	r1, r5
   12d7c:	ldr	r0, [sp, #84]	; 0x54
   12d80:	bl	13c78 <__assert_fail@plt+0x2798>
   12d84:	b	12d2c <__assert_fail@plt+0x184c>
   12d88:	cmp	r8, #100	; 0x64
   12d8c:	movwne	r1, #41504	; 0xa220
   12d90:	movtne	r1, #1
   12d94:	bne	11e88 <__assert_fail@plt+0x9a8>
   12d98:	movw	r1, #41456	; 0xa1f0
   12d9c:	movt	r1, #1
   12da0:	mov	r2, #5
   12da4:	mov	r0, #0
   12da8:	bl	1121c <dcgettext@plt>
   12dac:	mov	r5, r0
   12db0:	b	11e98 <__assert_fail@plt+0x9b8>
   12db4:	ldr	r3, [sp, #64]	; 0x40
   12db8:	ldrd	r8, [r3, #96]	; 0x60
   12dbc:	orrs	r3, r8, r9
   12dc0:	beq	131f4 <__assert_fail@plt+0x1d14>
   12dc4:	ldr	r3, [sp, #64]	; 0x40
   12dc8:	ldr	r4, [r3, #64]	; 0x40
   12dcc:	adds	r3, sl, r6
   12dd0:	str	r3, [sp, #128]	; 0x80
   12dd4:	adc	r3, fp, r7
   12dd8:	str	r3, [sp, #132]	; 0x84
   12ddc:	ldrd	sl, [sp, #128]	; 0x80
   12de0:	and	r4, r4, #53248	; 0xd000
   12de4:	cmp	r8, sl
   12de8:	sbcs	r3, r9, fp
   12dec:	movge	r3, #1
   12df0:	movlt	r3, #0
   12df4:	cmp	r4, #32768	; 0x8000
   12df8:	movne	r4, #0
   12dfc:	andeq	r4, r3, #1
   12e00:	cmp	r4, #0
   12e04:	bne	12e6c <__assert_fail@plt+0x198c>
   12e08:	mov	r1, #2
   12e0c:	mov	r3, #0
   12e10:	mov	r2, #0
   12e14:	mov	r0, r4
   12e18:	str	r1, [sp]
   12e1c:	bl	11288 <lseek64@plt>
   12e20:	cmp	r0, #0
   12e24:	mov	r8, r0
   12e28:	sbcs	r3, r1, #0
   12e2c:	mov	r9, r1
   12e30:	blt	12ea0 <__assert_fail@plt+0x19c0>
   12e34:	cmp	fp, r1
   12e38:	cmpeq	sl, r0
   12e3c:	beq	12c18 <__assert_fail@plt+0x1738>
   12e40:	mov	r3, fp
   12e44:	mov	r0, r4
   12e48:	str	r4, [sp]
   12e4c:	mov	r2, sl
   12e50:	bl	11288 <lseek64@plt>
   12e54:	cmp	r0, #0
   12e58:	sbcs	r3, r1, #0
   12e5c:	blt	12ea0 <__assert_fail@plt+0x19c0>
   12e60:	cmp	r8, sl
   12e64:	sbcs	r3, r9, fp
   12e68:	blt	12c18 <__assert_fail@plt+0x1738>
   12e6c:	ldrd	r0, [sp, #128]	; 0x80
   12e70:	subs	r3, r8, r0
   12e74:	sbc	r2, r9, r1
   12e78:	adds	r6, r6, r3
   12e7c:	adc	r7, r7, r2
   12e80:	mvn	r3, #-2147483648	; 0x80000000
   12e84:	mvn	r2, #0
   12e88:	cmp	r7, r3
   12e8c:	cmpeq	r6, r2
   12e90:	beq	131f4 <__assert_fail@plt+0x1d14>
   12e94:	cmp	r6, #0
   12e98:	sbcs	r3, r7, #0
   12e9c:	bge	12c18 <__assert_fail@plt+0x1738>
   12ea0:	bl	1139c <__errno_location@plt>
   12ea4:	mov	r2, #5
   12ea8:	movw	r1, #41840	; 0xa370
   12eac:	movt	r1, #1
   12eb0:	ldr	r4, [r0]
   12eb4:	mov	r0, #0
   12eb8:	bl	1121c <dcgettext@plt>
   12ebc:	ldr	r3, [sp, #64]	; 0x40
   12ec0:	mov	r5, r0
   12ec4:	mov	r1, #3
   12ec8:	mov	r0, #0
   12ecc:	ldr	r2, [r3, #300]	; 0x12c
   12ed0:	bl	16fdc <__assert_fail@plt+0x5afc>
   12ed4:	mov	r3, r0
   12ed8:	mov	r2, r5
   12edc:	mov	r1, r4
   12ee0:	mov	r0, #1
   12ee4:	bl	112d0 <error@plt>
   12ee8:	mov	r3, #0
   12eec:	str	r3, [sp, #84]	; 0x54
   12ef0:	b	12340 <__assert_fail@plt+0xe60>
   12ef4:	ldrd	r0, [sp, #24]
   12ef8:	ldrd	r2, [sp, #56]	; 0x38
   12efc:	cmp	r3, r1
   12f00:	cmpeq	r2, r0
   12f04:	movls	r3, #1
   12f08:	movhi	r3, #0
   12f0c:	cmp	r9, r1
   12f10:	cmpeq	r8, r0
   12f14:	movcc	r3, #0
   12f18:	andcs	r3, r3, #1
   12f1c:	cmp	r3, #0
   12f20:	beq	13290 <__assert_fail@plt+0x1db0>
   12f24:	ldrd	r4, [sp, #24]
   12f28:	mov	r0, r8
   12f2c:	mov	r1, r9
   12f30:	mov	r2, r4
   12f34:	mov	r3, r5
   12f38:	bl	190dc <__assert_fail@plt+0x7bfc>
   12f3c:	ldrd	r6, [sp, #56]	; 0x38
   12f40:	subs	ip, r6, #1
   12f44:	sbc	r3, r7, #0
   12f48:	cmp	r7, r5
   12f4c:	mul	r2, ip, r1
   12f50:	cmpeq	r6, r4
   12f54:	umull	r4, r5, ip, r0
   12f58:	mla	r3, r0, r3, r2
   12f5c:	strd	r4, [sp, #24]
   12f60:	add	r3, r3, r5
   12f64:	str	r3, [sp, #28]
   12f68:	ldrd	r4, [sp, #24]
   12f6c:	beq	12f80 <__assert_fail@plt+0x1aa0>
   12f70:	mul	r3, r0, r7
   12f74:	umull	r8, r9, r0, r6
   12f78:	mla	r1, r6, r1, r3
   12f7c:	add	r9, r1, r9
   12f80:	ldrd	r2, [sp, #24]
   12f84:	mov	r1, #0
   12f88:	mov	r0, sl
   12f8c:	cmp	r2, sl
   12f90:	sbcs	ip, r3, r1
   12f94:	bge	13168 <__assert_fail@plt+0x1c88>
   12f98:	ldr	r7, [sp, #88]	; 0x58
   12f9c:	sub	r6, sl, r2
   12fa0:	mov	r3, r2
   12fa4:	mov	r2, r6
   12fa8:	add	r1, r7, r3
   12fac:	mov	r0, r7
   12fb0:	bl	111a4 <memmove@plt>
   12fb4:	mov	r0, r6
   12fb8:	ldr	r6, [sp, #64]	; 0x40
   12fbc:	cmp	r4, r8
   12fc0:	sbcs	r3, r5, r9
   12fc4:	bge	127c0 <__assert_fail@plt+0x12e0>
   12fc8:	cmn	r0, #1
   12fcc:	beq	13070 <__assert_fail@plt+0x1b90>
   12fd0:	cmp	r0, #0
   12fd4:	beq	127c0 <__assert_fail@plt+0x12e0>
   12fd8:	subs	sl, r8, r4
   12fdc:	mov	r1, #0
   12fe0:	sbc	fp, r9, r5
   12fe4:	cmp	r0, sl
   12fe8:	sbcs	r3, r1, fp
   12fec:	movlt	sl, r0
   12ff0:	movlt	fp, r1
   12ff4:	mov	r2, sl
   12ff8:	mov	r1, r7
   12ffc:	mov	r0, #1
   13000:	bl	14dc4 <__assert_fail@plt+0x38e4>
   13004:	cmp	r0, sl
   13008:	beq	13060 <__assert_fail@plt+0x1b80>
   1300c:	bl	1139c <__errno_location@plt>
   13010:	ldr	r3, [r0]
   13014:	ldr	r2, [r6, #40]	; 0x28
   13018:	sub	r0, r3, #32
   1301c:	clz	r0, r0
   13020:	lsr	r0, r0, #5
   13024:	cmp	r2, #0
   13028:	moveq	r0, #0
   1302c:	cmp	r0, #0
   13030:	bne	13060 <__assert_fail@plt+0x1b80>
   13034:	mov	r1, #3
   13038:	movw	r2, #41068	; 0xa06c
   1303c:	movt	r2, #1
   13040:	mov	r6, r3
   13044:	bl	16fdc <__assert_fail@plt+0x5afc>
   13048:	mov	r3, r0
   1304c:	movw	r2, #38544	; 0x9690
   13050:	movt	r2, #1
   13054:	mov	r1, r6
   13058:	mov	r0, #1
   1305c:	bl	112d0 <error@plt>
   13060:	adds	r4, r4, sl
   13064:	mvn	r0, #0
   13068:	adc	r5, r5, fp
   1306c:	b	12fbc <__assert_fail@plt+0x1adc>
   13070:	mov	r1, r7
   13074:	mov	r0, #0
   13078:	ldr	r2, [sp, #68]	; 0x44
   1307c:	bl	171cc <__assert_fail@plt+0x5cec>
   13080:	cmn	r0, #1
   13084:	bne	12fd0 <__assert_fail@plt+0x1af0>
   13088:	bl	1139c <__errno_location@plt>
   1308c:	ldr	r3, [sp, #64]	; 0x40
   13090:	mov	r1, #3
   13094:	ldr	r4, [r0]
   13098:	mov	r0, #0
   1309c:	ldr	r2, [r3, #300]	; 0x12c
   130a0:	bl	16fdc <__assert_fail@plt+0x5afc>
   130a4:	mov	r3, r0
   130a8:	movw	r2, #38544	; 0x9690
   130ac:	movt	r2, #1
   130b0:	mov	r1, r4
   130b4:	mov	r0, #1
   130b8:	bl	112d0 <error@plt>
   130bc:	orrs	r3, r8, r9
   130c0:	mov	r2, sl
   130c4:	ldr	r1, [sp, #32]
   130c8:	moveq	r0, #1
   130cc:	movne	r0, #0
   130d0:	bl	1413c <__assert_fail@plt+0x2c5c>
   130d4:	b	12c98 <__assert_fail@plt+0x17b8>
   130d8:	ldr	r3, [sp, #40]	; 0x28
   130dc:	mov	r2, #1
   130e0:	mov	r4, #0
   130e4:	mov	r5, #0
   130e8:	subs	r3, r3, #1
   130ec:	str	r3, [sp, #112]	; 0x70
   130f0:	ldr	r3, [sp, #52]	; 0x34
   130f4:	sbc	r3, r3, #0
   130f8:	str	r3, [sp, #116]	; 0x74
   130fc:	mov	r3, #0
   13100:	strd	r2, [sp, #96]	; 0x60
   13104:	b	12580 <__assert_fail@plt+0x10a0>
   13108:	mov	r6, #1
   1310c:	subs	r2, r2, sl
   13110:	sbc	r3, r3, r5
   13114:	mov	r0, #0
   13118:	str	r6, [sp]
   1311c:	bl	11288 <lseek64@plt>
   13120:	cmp	r0, #0
   13124:	sbcs	r3, r1, #0
   13128:	mvnge	sl, #0
   1312c:	ldrdge	r4, [sp, #112]	; 0x70
   13130:	bge	12580 <__assert_fail@plt+0x10a0>
   13134:	bl	1139c <__errno_location@plt>
   13138:	ldr	r3, [sp, #64]	; 0x40
   1313c:	mov	r1, #3
   13140:	ldr	r5, [r0]
   13144:	mov	r0, #0
   13148:	ldr	r2, [r3, #300]	; 0x12c
   1314c:	bl	16fdc <__assert_fail@plt+0x5afc>
   13150:	mov	r3, r0
   13154:	movw	r2, #38544	; 0x9690
   13158:	movt	r2, #1
   1315c:	mov	r1, r5
   13160:	mov	r0, r6
   13164:	bl	112d0 <error@plt>
   13168:	ldrd	sl, [sp, #24]
   1316c:	mov	r6, #1
   13170:	str	r6, [sp]
   13174:	subs	r2, sl, r0
   13178:	mov	r0, #0
   1317c:	sbc	r3, fp, r1
   13180:	bl	11288 <lseek64@plt>
   13184:	cmp	r0, #0
   13188:	sbcs	r3, r1, #0
   1318c:	mvnge	r6, #0
   13190:	ldrge	r7, [sp, #88]	; 0x58
   13194:	movge	r0, r6
   13198:	ldrge	r6, [sp, #64]	; 0x40
   1319c:	bge	12fbc <__assert_fail@plt+0x1adc>
   131a0:	bl	1139c <__errno_location@plt>
   131a4:	ldr	r3, [sp, #64]	; 0x40
   131a8:	mov	r1, #3
   131ac:	ldr	r4, [r0]
   131b0:	mov	r0, #0
   131b4:	ldr	r2, [r3, #300]	; 0x12c
   131b8:	bl	16fdc <__assert_fail@plt+0x5afc>
   131bc:	mov	r3, r0
   131c0:	movw	r2, #38544	; 0x9690
   131c4:	movt	r2, #1
   131c8:	mov	r1, r4
   131cc:	mov	r0, r6
   131d0:	bl	112d0 <error@plt>
   131d4:	mov	r0, #0
   131d8:	ldr	r2, [sp, #68]	; 0x44
   131dc:	ldr	r1, [sp, #88]	; 0x58
   131e0:	bl	171cc <__assert_fail@plt+0x5cec>
   131e4:	cmn	r0, #1
   131e8:	bne	125b8 <__assert_fail@plt+0x10d8>
   131ec:	b	13088 <__assert_fail@plt+0x1ba8>
   131f0:	bl	18010 <__assert_fail@plt+0x6b30>
   131f4:	bl	1139c <__errno_location@plt>
   131f8:	mov	r3, #75	; 0x4b
   131fc:	str	r3, [r0]
   13200:	b	12ea0 <__assert_fail@plt+0x19c0>
   13204:	bl	1139c <__errno_location@plt>
   13208:	ldr	r3, [r0]
   1320c:	cmp	r3, #29
   13210:	moveq	r3, #0
   13214:	streq	r3, [r0]
   13218:	b	12ea0 <__assert_fail@plt+0x19c0>
   1321c:	mov	r2, #5
   13220:	movw	r1, #41344	; 0xa180
   13224:	movt	r1, #1
   13228:	mov	r0, #0
   1322c:	bl	1121c <dcgettext@plt>
   13230:	mov	r5, r0
   13234:	ldr	r0, [r4]
   13238:	bl	171b4 <__assert_fail@plt+0x5cd4>
   1323c:	mov	r3, r0
   13240:	mov	r2, r5
   13244:	mov	r1, #0
   13248:	mov	r0, #1
   1324c:	bl	112d0 <error@plt>
   13250:	movw	r1, #41376	; 0xa1a0
   13254:	movt	r1, #1
   13258:	mov	r2, #5
   1325c:	mov	r0, #0
   13260:	bl	1121c <dcgettext@plt>
   13264:	mov	r2, r0
   13268:	mov	r1, #0
   1326c:	mov	r0, #1
   13270:	bl	112d0 <error@plt>
   13274:	movw	r1, #37992	; 0x9468
   13278:	movt	r1, #1
   1327c:	ldr	r3, [pc, #452]	; 13448 <__assert_fail@plt+0x1f68>
   13280:	movw	r0, #41908	; 0xa3b4
   13284:	movt	r0, #1
   13288:	movw	r2, #867	; 0x363
   1328c:	bl	114e0 <__assert_fail@plt>
   13290:	movw	r1, #37992	; 0x9468
   13294:	movt	r1, #1
   13298:	ldr	r3, [pc, #428]	; 1344c <__assert_fail@plt+0x1f6c>
   1329c:	movw	r0, #41872	; 0xa390
   132a0:	movt	r0, #1
   132a4:	mov	r2, #996	; 0x3e4
   132a8:	bl	114e0 <__assert_fail@plt>
   132ac:	ldr	r3, [sp, #128]	; 0x80
   132b0:	strd	r6, [sp, #96]	; 0x60
   132b4:	cmp	r3, #0
   132b8:	beq	132d4 <__assert_fail@plt+0x1df4>
   132bc:	ldr	r3, [sp, #96]	; 0x60
   132c0:	adds	r3, r3, #1
   132c4:	str	r3, [sp, #96]	; 0x60
   132c8:	ldr	r3, [sp, #100]	; 0x64
   132cc:	adc	r3, r3, #0
   132d0:	str	r3, [sp, #100]	; 0x64
   132d4:	ldrd	r4, [sp, #96]	; 0x60
   132d8:	b	13304 <__assert_fail@plt+0x1e24>
   132dc:	ldrd	r2, [sp, #24]
   132e0:	cmp	r5, r3
   132e4:	cmpeq	r4, r2
   132e8:	bhi	127c0 <__assert_fail@plt+0x12e0>
   132ec:	mov	r2, #0
   132f0:	mov	r0, #1
   132f4:	mov	r1, r2
   132f8:	bl	1413c <__assert_fail@plt+0x2c5c>
   132fc:	adds	r4, r4, #1
   13300:	adc	r5, r5, #0
   13304:	ldrd	r2, [sp, #56]	; 0x38
   13308:	orrs	r3, r2, r3
   1330c:	beq	132dc <__assert_fail@plt+0x1dfc>
   13310:	b	127c0 <__assert_fail@plt+0x12e0>
   13314:	mov	r2, #5
   13318:	movw	r1, #41416	; 0xa1c8
   1331c:	movt	r1, #1
   13320:	mov	r0, #0
   13324:	bl	1121c <dcgettext@plt>
   13328:	mov	r4, r0
   1332c:	add	r2, sp, #144	; 0x90
   13330:	ldrd	r0, [sp, #24]
   13334:	bl	14e4c <__assert_fail@plt+0x396c>
   13338:	mov	r3, r0
   1333c:	mov	r2, r4
   13340:	str	r8, [sp]
   13344:	mov	r1, #0
   13348:	mov	r0, #1
   1334c:	bl	112d0 <error@plt>
   13350:	cmp	fp, #0
   13354:	cmpne	r4, #0
   13358:	bne	1225c <__assert_fail@plt+0xd7c>
   1335c:	adds	r2, r7, #0
   13360:	movne	r2, #1
   13364:	cmp	fp, #0
   13368:	movne	r2, #0
   1336c:	cmp	r2, #0
   13370:	bne	1295c <__assert_fail@plt+0x147c>
   13374:	b	122b4 <__assert_fail@plt+0xdd4>
   13378:	bl	1139c <__errno_location@plt>
   1337c:	mov	r2, #5
   13380:	movw	r1, #41812	; 0xa354
   13384:	movt	r1, #1
   13388:	ldr	r4, [r0]
   1338c:	mov	r0, #0
   13390:	bl	1121c <dcgettext@plt>
   13394:	ldr	r3, [sp, #64]	; 0x40
   13398:	mov	r5, r0
   1339c:	mov	r0, #4
   133a0:	ldr	r1, [r3, #300]	; 0x12c
   133a4:	bl	16f00 <__assert_fail@plt+0x5a20>
   133a8:	b	12ed4 <__assert_fail@plt+0x19f4>
   133ac:	mov	r2, #5
   133b0:	movw	r1, #41264	; 0xa130
   133b4:	movt	r1, #1
   133b8:	mov	r0, #0
   133bc:	bl	1121c <dcgettext@plt>
   133c0:	mov	r4, r0
   133c4:	add	r2, sp, #144	; 0x90
   133c8:	ldrd	r0, [sp, #24]
   133cc:	bl	14e4c <__assert_fail@plt+0x396c>
   133d0:	bl	171b4 <__assert_fail@plt+0x5cd4>
   133d4:	movw	r2, #41676	; 0xa2cc
   133d8:	movt	r2, #1
   133dc:	str	r0, [sp]
   133e0:	mov	r3, r4
   133e4:	mov	r1, #75	; 0x4b
   133e8:	mov	r0, #1
   133ec:	bl	112d0 <error@plt>
   133f0:	ldr	r3, [sp, #52]	; 0x34
   133f4:	mov	r1, #3
   133f8:	mov	r0, #0
   133fc:	ldr	r2, [sl]
   13400:	ldr	r4, [r3]
   13404:	b	130a0 <__assert_fail@plt+0x1bc0>
   13408:	movw	r1, #41012	; 0xa034
   1340c:	movt	r1, #1
   13410:	b	11788 <__assert_fail@plt+0x2a8>
   13414:	movw	r1, #41316	; 0xa164
   13418:	movt	r1, #1
   1341c:	b	13258 <__assert_fail@plt+0x1d78>
   13420:	mov	r4, #0
   13424:	mov	r5, #0
   13428:	ldrd	r0, [sp, #24]
   1342c:	mvn	ip, #0
   13430:	ldr	r3, [sp, #68]	; 0x44
   13434:	str	ip, [sp]
   13438:	strd	r4, [sp, #8]
   1343c:	ldr	r2, [sp, #88]	; 0x58
   13440:	bl	14270 <__assert_fail@plt+0x2d90>
   13444:	b	127c0 <__assert_fail@plt+0x12e0>
   13448:	andeq	r9, r1, r4, asr r4
   1344c:	andeq	r9, r1, r0, asr #8
   13450:	mov	fp, #0
   13454:	mov	lr, #0
   13458:	pop	{r1}		; (ldr r1, [sp], #4)
   1345c:	mov	r2, sp
   13460:	push	{r2}		; (str r2, [sp, #-4]!)
   13464:	push	{r0}		; (str r0, [sp, #-4]!)
   13468:	ldr	ip, [pc, #16]	; 13480 <__assert_fail@plt+0x1fa0>
   1346c:	push	{ip}		; (str ip, [sp, #-4]!)
   13470:	ldr	r0, [pc, #12]	; 13484 <__assert_fail@plt+0x1fa4>
   13474:	ldr	r3, [pc, #12]	; 13488 <__assert_fail@plt+0x1fa8>
   13478:	bl	1130c <__libc_start_main@plt>
   1347c:	bl	114bc <abort@plt>
   13480:			; <UNDEFINED> instruction: 0x000192b0
   13484:	strdeq	r1, [r1], -r0
   13488:	andeq	r9, r1, r0, asr r2
   1348c:	ldr	r3, [pc, #20]	; 134a8 <__assert_fail@plt+0x1fc8>
   13490:	ldr	r2, [pc, #20]	; 134ac <__assert_fail@plt+0x1fcc>
   13494:	add	r3, pc, r3
   13498:	ldr	r2, [r3, r2]
   1349c:	cmp	r2, #0
   134a0:	bxeq	lr
   134a4:	b	11324 <__gmon_start__@plt>
   134a8:	andeq	r7, r1, r4, ror #22
   134ac:	andeq	r0, r0, r8, asr #2
   134b0:	ldr	r0, [pc, #24]	; 134d0 <__assert_fail@plt+0x1ff0>
   134b4:	ldr	r3, [pc, #24]	; 134d4 <__assert_fail@plt+0x1ff4>
   134b8:	cmp	r3, r0
   134bc:	bxeq	lr
   134c0:	ldr	r3, [pc, #16]	; 134d8 <__assert_fail@plt+0x1ff8>
   134c4:	cmp	r3, #0
   134c8:	bxeq	lr
   134cc:	bx	r3
   134d0:	andeq	fp, r2, r0, asr r3
   134d4:	andeq	fp, r2, r0, asr r3
   134d8:	andeq	r0, r0, r0
   134dc:	ldr	r0, [pc, #36]	; 13508 <__assert_fail@plt+0x2028>
   134e0:	ldr	r1, [pc, #36]	; 1350c <__assert_fail@plt+0x202c>
   134e4:	sub	r1, r1, r0
   134e8:	asr	r1, r1, #2
   134ec:	add	r1, r1, r1, lsr #31
   134f0:	asrs	r1, r1, #1
   134f4:	bxeq	lr
   134f8:	ldr	r3, [pc, #16]	; 13510 <__assert_fail@plt+0x2030>
   134fc:	cmp	r3, #0
   13500:	bxeq	lr
   13504:	bx	r3
   13508:	andeq	fp, r2, r0, asr r3
   1350c:	andeq	fp, r2, r0, asr r3
   13510:	andeq	r0, r0, r0
   13514:	push	{r4, lr}
   13518:	ldr	r4, [pc, #24]	; 13538 <__assert_fail@plt+0x2058>
   1351c:	ldrb	r3, [r4]
   13520:	cmp	r3, #0
   13524:	popne	{r4, pc}
   13528:	bl	134b0 <__assert_fail@plt+0x1fd0>
   1352c:	mov	r3, #1
   13530:	strb	r3, [r4]
   13534:	pop	{r4, pc}
   13538:	andeq	fp, r2, ip, ror #6
   1353c:	b	134dc <__assert_fail@plt+0x1ffc>
   13540:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13544:	movw	r4, #45936	; 0xb370
   13548:	movt	r4, #2
   1354c:	ldr	r5, [r4]
   13550:	strd	r6, [sp, #8]
   13554:	strd	r8, [sp, #16]
   13558:	str	sl, [sp, #24]
   1355c:	str	lr, [sp, #28]
   13560:	cmp	r5, #0
   13564:	ldr	r6, [r4, #4]
   13568:	beq	13628 <__assert_fail@plt+0x2148>
   1356c:	cmp	r6, #0
   13570:	sub	r1, r6, #1
   13574:	beq	137d0 <__assert_fail@plt+0x22f0>
   13578:	ldr	r9, [r4, #28]
   1357c:	movw	r3, #45396	; 0xb154
   13580:	movt	r3, #2
   13584:	sub	r2, r6, #-1073741823	; 0xc0000001
   13588:	ldr	r8, [r4, #32]
   1358c:	ldrb	r7, [r3]
   13590:	add	r0, r9, r6
   13594:	ldr	ip, [r3, #4]
   13598:	add	r2, r8, r2, lsl #2
   1359c:	b	135c8 <__assert_fail@plt+0x20e8>
   135a0:	ldrb	r3, [ip, r3]
   135a4:	cmp	r3, #0
   135a8:	strb	r3, [r0, #-1]
   135ac:	bne	13610 <__assert_fail@plt+0x2130>
   135b0:	str	r3, [r2, #4]
   135b4:	sub	r1, r1, #1
   135b8:	ldrb	r3, [ip]
   135bc:	cmn	r1, #1
   135c0:	strb	r3, [r0, #-1]!
   135c4:	beq	137d0 <__assert_fail@plt+0x22f0>
   135c8:	ldr	r3, [r2]
   135cc:	cmp	r1, #0
   135d0:	movne	sl, #0
   135d4:	andeq	sl, r7, #1
   135d8:	mov	lr, r2
   135dc:	cmp	sl, #0
   135e0:	add	r3, r3, #1
   135e4:	str	r3, [r2], #-4
   135e8:	beq	135a0 <__assert_fail@plt+0x20c0>
   135ec:	ldr	r2, [r8]
   135f0:	add	r2, ip, r2
   135f4:	ldrb	r2, [r2, #1]
   135f8:	cmp	r2, #0
   135fc:	beq	13628 <__assert_fail@plt+0x2148>
   13600:	ldrb	r3, [ip, r3]
   13604:	cmp	r3, #0
   13608:	strb	r3, [r9]
   1360c:	beq	137c4 <__assert_fail@plt+0x22e4>
   13610:	ldrd	r4, [sp]
   13614:	ldrd	r6, [sp, #8]
   13618:	ldrd	r8, [sp, #16]
   1361c:	ldr	sl, [sp, #24]
   13620:	add	sp, sp, #28
   13624:	pop	{pc}		; (ldr pc, [sp], #4)
   13628:	ldr	r8, [r4, #8]
   1362c:	cmp	r8, #0
   13630:	bne	136a8 <__assert_fail@plt+0x21c8>
   13634:	ldr	r0, [r4, #12]
   13638:	bl	11354 <strlen@plt>
   1363c:	mov	r7, r0
   13640:	ldr	r0, [r4, #20]
   13644:	str	r7, [r4, #16]
   13648:	cmp	r0, #0
   1364c:	moveq	r0, r8
   13650:	beq	13658 <__assert_fail@plt+0x2178>
   13654:	bl	11354 <strlen@plt>
   13658:	add	r3, r7, r6
   1365c:	str	r0, [r4, #24]
   13660:	add	r3, r3, r0
   13664:	add	r1, r3, #1
   13668:	cmp	r7, r1
   1366c:	str	r3, [r4, #8]
   13670:	bhi	137c0 <__assert_fail@plt+0x22e0>
   13674:	mov	r0, r5
   13678:	bl	17c04 <__assert_fail@plt+0x6724>
   1367c:	ldr	r1, [r4, #12]
   13680:	mov	r6, r0
   13684:	str	r0, [r4]
   13688:	ldr	r5, [r4, #16]
   1368c:	mov	r2, r5
   13690:	bl	111c8 <memcpy@plt>
   13694:	movw	r3, #45396	; 0xb154
   13698:	movt	r3, #2
   1369c:	ldr	r7, [r4, #32]
   136a0:	ldr	r2, [r3, #4]
   136a4:	b	13700 <__assert_fail@plt+0x2220>
   136a8:	ldr	r3, [r4, #16]
   136ac:	add	r6, r6, #1
   136b0:	add	r1, r8, #3
   136b4:	add	r2, r8, #2
   136b8:	str	r6, [r4, #4]
   136bc:	str	r2, [r4, #8]
   136c0:	cmp	r1, r3
   136c4:	bcc	137c0 <__assert_fail@plt+0x22e0>
   136c8:	mov	r0, r5
   136cc:	bl	17c04 <__assert_fail@plt+0x6724>
   136d0:	ldr	r7, [r4, #32]
   136d4:	movw	r3, #45396	; 0xb154
   136d8:	movt	r3, #2
   136dc:	mov	r6, r0
   136e0:	str	r0, [r4]
   136e4:	ldr	r2, [r3, #4]
   136e8:	ldr	r3, [r4, #16]
   136ec:	ldr	r1, [r7]
   136f0:	add	r5, r3, #1
   136f4:	ldrb	r1, [r2, r1]
   136f8:	str	r5, [r4, #16]
   136fc:	strb	r1, [r0, r3]
   13700:	ldr	r9, [r4, #4]
   13704:	add	r5, r6, r5
   13708:	mov	r0, r5
   1370c:	ldrb	r1, [r2]
   13710:	str	r5, [r4, #28]
   13714:	mov	r2, r9
   13718:	bl	113c0 <memset@plt>
   1371c:	ldr	r1, [r4, #20]
   13720:	cmp	r1, #0
   13724:	beq	13734 <__assert_fail@plt+0x2254>
   13728:	add	r0, r5, r9
   1372c:	ldr	r2, [r4, #24]
   13730:	bl	111c8 <memcpy@plt>
   13734:	ldr	r3, [r4, #8]
   13738:	mov	r2, #0
   1373c:	mov	r0, r7
   13740:	strb	r2, [r6, r3]
   13744:	bl	14c94 <__assert_fail@plt+0x37b4>
   13748:	mov	r1, #4
   1374c:	ldr	r0, [r4, #4]
   13750:	bl	17ec0 <__assert_fail@plt+0x69e0>
   13754:	ldr	r7, [r4, #36]	; 0x24
   13758:	mov	r6, r0
   1375c:	str	r0, [r4, #32]
   13760:	cmp	r7, #0
   13764:	beq	13610 <__assert_fail@plt+0x2130>
   13768:	cmp	r8, #0
   1376c:	bne	137f4 <__assert_fail@plt+0x2314>
   13770:	mov	r0, r7
   13774:	bl	11354 <strlen@plt>
   13778:	ldr	r8, [r4, #4]
   1377c:	mov	r5, r0
   13780:	mov	r2, r0
   13784:	mov	r1, r7
   13788:	ldr	r0, [r4, #28]
   1378c:	sub	r3, r8, r5
   13790:	add	r0, r0, r3
   13794:	bl	111c8 <memcpy@plt>
   13798:	cmp	r5, #0
   1379c:	add	r1, r6, r8, lsl #2
   137a0:	beq	13610 <__assert_fail@plt+0x2130>
   137a4:	add	r2, r7, r5
   137a8:	ldrb	r3, [r2, #-1]!
   137ac:	sub	r3, r3, #48	; 0x30
   137b0:	cmp	r7, r2
   137b4:	str	r3, [r1, #-4]!
   137b8:	bne	137a8 <__assert_fail@plt+0x22c8>
   137bc:	b	13610 <__assert_fail@plt+0x2130>
   137c0:	bl	18010 <__assert_fail@plt+0x6b30>
   137c4:	str	r3, [lr]
   137c8:	ldrb	r3, [ip]
   137cc:	strb	r3, [r9]
   137d0:	mov	r2, #5
   137d4:	movw	r1, #38012	; 0x947c
   137d8:	movt	r1, #1
   137dc:	mov	r0, #0
   137e0:	bl	1121c <dcgettext@plt>
   137e4:	mov	r2, r0
   137e8:	mov	r1, #0
   137ec:	mov	r0, #1
   137f0:	bl	112d0 <error@plt>
   137f4:	movw	r3, #37592	; 0x92d8
   137f8:	movt	r3, #1
   137fc:	movw	r1, #37992	; 0x9468
   13800:	movt	r1, #1
   13804:	movw	r0, #38004	; 0x9474
   13808:	movt	r0, #1
   1380c:	movw	r2, #409	; 0x199
   13810:	bl	114e0 <__assert_fail@plt>
   13814:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13818:	strd	r6, [sp, #8]
   1381c:	movw	r6, #45936	; 0xb370
   13820:	movt	r6, #2
   13824:	ldr	r3, [r6, #40]	; 0x28
   13828:	mov	r7, r0
   1382c:	strd	r8, [sp, #16]
   13830:	str	lr, [sp, #24]
   13834:	sub	sp, sp, #116	; 0x74
   13838:	cmp	r3, #0
   1383c:	beq	139e8 <__assert_fail@plt+0x2508>
   13840:	movw	r0, #38152	; 0x9508
   13844:	movt	r0, #1
   13848:	bl	112e8 <getenv@plt>
   1384c:	cmp	r0, #0
   13850:	movw	r3, #38044	; 0x949c
   13854:	movt	r3, #1
   13858:	movne	r5, r0
   1385c:	mov	r2, #1
   13860:	movw	r0, #38160	; 0x9510
   13864:	movt	r0, #1
   13868:	mov	r1, r7
   1386c:	moveq	r5, r3
   13870:	bl	11378 <setenv@plt>
   13874:	subs	r4, r0, #0
   13878:	bne	13be8 <__assert_fail@plt+0x2708>
   1387c:	ldrb	r3, [r6, #44]	; 0x2c
   13880:	cmp	r3, #0
   13884:	bne	13ab8 <__assert_fail@plt+0x25d8>
   13888:	add	r0, sp, #8
   1388c:	bl	11414 <pipe@plt>
   13890:	subs	r7, r0, #0
   13894:	bne	13bd8 <__assert_fail@plt+0x26f8>
   13898:	bl	11450 <fork@plt>
   1389c:	subs	r4, r0, #0
   138a0:	beq	13904 <__assert_fail@plt+0x2424>
   138a4:	cmn	r4, #1
   138a8:	beq	13bf8 <__assert_fail@plt+0x2718>
   138ac:	ldr	r0, [sp, #8]
   138b0:	bl	114c8 <close@plt>
   138b4:	cmp	r0, #0
   138b8:	bne	13c08 <__assert_fail@plt+0x2728>
   138bc:	ldr	r3, [r6, #152]	; 0x98
   138c0:	str	r4, [r6, #288]	; 0x120
   138c4:	ldr	r0, [r6, #156]	; 0x9c
   138c8:	ldr	r2, [r6, #292]	; 0x124
   138cc:	cmp	r3, r2
   138d0:	beq	13b70 <__assert_fail@plt+0x2690>
   138d4:	ldr	r2, [sp, #12]
   138d8:	add	r1, r3, #1
   138dc:	str	r1, [r6, #152]	; 0x98
   138e0:	str	r2, [r0, r3, lsl #2]
   138e4:	ldr	r8, [sp, #12]
   138e8:	mov	r0, r8
   138ec:	add	sp, sp, #116	; 0x74
   138f0:	ldrd	r4, [sp]
   138f4:	ldrd	r6, [sp, #8]
   138f8:	ldrd	r8, [sp, #16]
   138fc:	add	sp, sp, #24
   13900:	pop	{pc}		; (ldr pc, [sp], #4)
   13904:	ldr	r3, [r6, #152]	; 0x98
   13908:	cmp	r3, #0
   1390c:	beq	13934 <__assert_fail@plt+0x2454>
   13910:	ldr	r3, [r6, #156]	; 0x9c
   13914:	ldr	r0, [r3, r4, lsl #2]
   13918:	bl	114c8 <close@plt>
   1391c:	cmp	r0, #0
   13920:	bne	13b88 <__assert_fail@plt+0x26a8>
   13924:	ldr	r3, [r6, #152]	; 0x98
   13928:	add	r4, r4, #1
   1392c:	cmp	r3, r4
   13930:	bhi	13910 <__assert_fail@plt+0x2430>
   13934:	ldr	r0, [sp, #12]
   13938:	bl	114c8 <close@plt>
   1393c:	mov	r4, r0
   13940:	bl	1139c <__errno_location@plt>
   13944:	cmp	r4, #0
   13948:	mov	r7, r0
   1394c:	bne	13c60 <__assert_fail@plt+0x2780>
   13950:	ldr	r0, [sp, #8]
   13954:	cmp	r0, #0
   13958:	beq	1397c <__assert_fail@plt+0x249c>
   1395c:	mov	r1, r4
   13960:	bl	11228 <dup2@plt>
   13964:	subs	r8, r0, #0
   13968:	bne	13c18 <__assert_fail@plt+0x2738>
   1396c:	ldr	r0, [sp, #8]
   13970:	bl	114c8 <close@plt>
   13974:	cmp	r0, #0
   13978:	bne	13b00 <__assert_fail@plt+0x2620>
   1397c:	mov	r2, #0
   13980:	ldr	r1, [pc, #744]	; 13c70 <__assert_fail@plt+0x2790>
   13984:	mov	r0, #2
   13988:	bl	11198 <sigprocmask@plt>
   1398c:	mov	r0, r5
   13990:	mov	r8, #0
   13994:	bl	148f8 <__assert_fail@plt+0x3418>
   13998:	ldr	r4, [r6, #40]	; 0x28
   1399c:	mov	r1, r0
   139a0:	movw	r2, #38336	; 0x95c0
   139a4:	movt	r2, #1
   139a8:	mov	r0, r5
   139ac:	str	r8, [sp]
   139b0:	mov	r3, r4
   139b4:	bl	1145c <execl@plt>
   139b8:	ldr	r6, [r7]
   139bc:	mov	r2, #5
   139c0:	mov	r0, r8
   139c4:	movw	r1, #38340	; 0x95c4
   139c8:	movt	r1, #1
   139cc:	bl	1121c <dcgettext@plt>
   139d0:	mov	r2, r0
   139d4:	mov	r3, r5
   139d8:	str	r4, [sp]
   139dc:	mov	r0, #1
   139e0:	mov	r1, r6
   139e4:	bl	112d0 <error@plt>
   139e8:	ldrb	r2, [r6, #44]	; 0x2c
   139ec:	cmp	r2, #0
   139f0:	bne	13b28 <__assert_fail@plt+0x2648>
   139f4:	movw	r2, #438	; 0x1b6
   139f8:	mov	r1, #65	; 0x41
   139fc:	mov	r0, r7
   13a00:	bl	14b70 <__assert_fail@plt+0x3690>
   13a04:	subs	r8, r0, #0
   13a08:	blt	138e8 <__assert_fail@plt+0x2408>
   13a0c:	add	r2, sp, #8
   13a10:	mov	r1, r8
   13a14:	mov	r0, #3
   13a18:	bl	11264 <__fxstat64@plt>
   13a1c:	subs	r9, r0, #0
   13a20:	bne	13c30 <__assert_fail@plt+0x2750>
   13a24:	ldrd	r2, [sp, #104]	; 0x68
   13a28:	ldrd	r4, [r6, #144]	; 0x90
   13a2c:	cmp	r5, r3
   13a30:	cmpeq	r4, r2
   13a34:	bne	13a4c <__assert_fail@plt+0x256c>
   13a38:	ldrd	r2, [sp, #8]
   13a3c:	ldrd	r4, [r6, #48]	; 0x30
   13a40:	cmp	r5, r3
   13a44:	cmpeq	r4, r2
   13a48:	beq	13ba4 <__assert_fail@plt+0x26c4>
   13a4c:	mov	r2, #0
   13a50:	mov	r3, #0
   13a54:	mov	r0, r8
   13a58:	bl	111ec <ftruncate64@plt>
   13a5c:	cmp	r0, #0
   13a60:	beq	138e8 <__assert_fail@plt+0x2408>
   13a64:	ldr	r3, [sp, #24]
   13a68:	and	r3, r3, #61440	; 0xf000
   13a6c:	cmp	r3, #32768	; 0x8000
   13a70:	bne	138e8 <__assert_fail@plt+0x2408>
   13a74:	bl	1139c <__errno_location@plt>
   13a78:	mov	r2, #5
   13a7c:	movw	r1, #38128	; 0x94f0
   13a80:	movt	r1, #1
   13a84:	ldr	r4, [r0]
   13a88:	mov	r0, #0
   13a8c:	bl	1121c <dcgettext@plt>
   13a90:	mov	r5, r0
   13a94:	mov	r2, r7
   13a98:	mov	r1, #3
   13a9c:	mov	r0, #0
   13aa0:	bl	16fdc <__assert_fail@plt+0x5afc>
   13aa4:	mov	r3, r0
   13aa8:	mov	r2, r5
   13aac:	mov	r1, r4
   13ab0:	mov	r0, #1
   13ab4:	bl	112d0 <error@plt>
   13ab8:	movw	r3, #45924	; 0xb364
   13abc:	movt	r3, #2
   13ac0:	ldr	r8, [r3]
   13ac4:	mov	r2, #5
   13ac8:	movw	r1, #38208	; 0x9540
   13acc:	movt	r1, #1
   13ad0:	bl	1121c <dcgettext@plt>
   13ad4:	mov	r9, r0
   13ad8:	mov	r2, r7
   13adc:	mov	r0, r4
   13ae0:	mov	r1, #3
   13ae4:	bl	16fdc <__assert_fail@plt+0x5afc>
   13ae8:	mov	r3, r0
   13aec:	mov	r2, r9
   13af0:	mov	r0, r8
   13af4:	mov	r1, #1
   13af8:	bl	113f0 <__fprintf_chk@plt>
   13afc:	b	13888 <__assert_fail@plt+0x23a8>
   13b00:	ldr	r4, [r7]
   13b04:	movw	r1, #38316	; 0x95ac
   13b08:	movt	r1, #1
   13b0c:	mov	r0, r8
   13b10:	mov	r2, #5
   13b14:	bl	1121c <dcgettext@plt>
   13b18:	mov	r2, r0
   13b1c:	mov	r1, r4
   13b20:	mov	r0, #1
   13b24:	bl	112d0 <error@plt>
   13b28:	movw	r2, #45924	; 0xb364
   13b2c:	movt	r2, #2
   13b30:	ldr	r4, [r2]
   13b34:	mov	r0, r3
   13b38:	mov	r2, #5
   13b3c:	movw	r1, #38052	; 0x94a4
   13b40:	movt	r1, #1
   13b44:	bl	1121c <dcgettext@plt>
   13b48:	mov	r5, r0
   13b4c:	mov	r1, r7
   13b50:	mov	r0, #4
   13b54:	bl	16f00 <__assert_fail@plt+0x5a20>
   13b58:	mov	r3, r0
   13b5c:	mov	r2, r5
   13b60:	mov	r0, r4
   13b64:	mov	r1, #1
   13b68:	bl	113f0 <__fprintf_chk@plt>
   13b6c:	b	139f4 <__assert_fail@plt+0x2514>
   13b70:	mov	r2, #4
   13b74:	ldr	r1, [pc, #248]	; 13c74 <__assert_fail@plt+0x2794>
   13b78:	bl	17d20 <__assert_fail@plt+0x6840>
   13b7c:	str	r0, [r6, #156]	; 0x9c
   13b80:	ldr	r3, [r6, #152]	; 0x98
   13b84:	b	138d4 <__assert_fail@plt+0x23f4>
   13b88:	bl	1139c <__errno_location@plt>
   13b8c:	movw	r1, #38256	; 0x9570
   13b90:	movt	r1, #1
   13b94:	ldr	r4, [r0]
   13b98:	mov	r2, #5
   13b9c:	mov	r0, #0
   13ba0:	b	13b14 <__assert_fail@plt+0x2634>
   13ba4:	mov	r2, #5
   13ba8:	movw	r1, #38092	; 0x94cc
   13bac:	movt	r1, #1
   13bb0:	bl	1121c <dcgettext@plt>
   13bb4:	mov	r4, r0
   13bb8:	mov	r1, r7
   13bbc:	mov	r0, #4
   13bc0:	bl	16f00 <__assert_fail@plt+0x5a20>
   13bc4:	mov	r3, r0
   13bc8:	mov	r2, r4
   13bcc:	mov	r1, r9
   13bd0:	mov	r0, #1
   13bd4:	bl	112d0 <error@plt>
   13bd8:	bl	1139c <__errno_location@plt>
   13bdc:	movw	r1, #38232	; 0x9558
   13be0:	movt	r1, #1
   13be4:	b	13b94 <__assert_fail@plt+0x26b4>
   13be8:	bl	1139c <__errno_location@plt>
   13bec:	movw	r1, #38168	; 0x9518
   13bf0:	movt	r1, #1
   13bf4:	b	13b94 <__assert_fail@plt+0x26b4>
   13bf8:	bl	1139c <__errno_location@plt>
   13bfc:	movw	r1, #38376	; 0x95e8
   13c00:	movt	r1, #1
   13c04:	b	13b94 <__assert_fail@plt+0x26b4>
   13c08:	bl	1139c <__errno_location@plt>
   13c0c:	movw	r1, #38400	; 0x9600
   13c10:	movt	r1, #1
   13c14:	b	13b94 <__assert_fail@plt+0x26b4>
   13c18:	mov	r0, r4
   13c1c:	movw	r1, #38296	; 0x9598
   13c20:	movt	r1, #1
   13c24:	mov	r2, #5
   13c28:	ldr	r4, [r7]
   13c2c:	b	13b14 <__assert_fail@plt+0x2634>
   13c30:	bl	1139c <__errno_location@plt>
   13c34:	mov	r2, #5
   13c38:	movw	r1, #38072	; 0x94b8
   13c3c:	movt	r1, #1
   13c40:	ldr	r4, [r0]
   13c44:	mov	r0, #0
   13c48:	bl	1121c <dcgettext@plt>
   13c4c:	mov	r5, r0
   13c50:	mov	r1, r7
   13c54:	mov	r0, #4
   13c58:	bl	16f00 <__assert_fail@plt+0x5a20>
   13c5c:	b	13aa4 <__assert_fail@plt+0x25c4>
   13c60:	movw	r1, #38276	; 0x9584
   13c64:	movt	r1, #1
   13c68:	ldr	r4, [r0]
   13c6c:	b	13b98 <__assert_fail@plt+0x26b8>
   13c70:	andeq	fp, r2, r0, lsl r4
   13c74:	muleq	r2, r4, r4
   13c78:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13c7c:	strd	r6, [sp, #8]
   13c80:	strd	r8, [sp, #16]
   13c84:	add	r8, r0, r1, lsl #4
   13c88:	strd	sl, [sp, #24]
   13c8c:	ldr	r3, [r8, #4]
   13c90:	str	lr, [sp, #32]
   13c94:	sub	sp, sp, #4
   13c98:	cmp	r3, #0
   13c9c:	movge	r9, #0
   13ca0:	blt	13cc4 <__assert_fail@plt+0x27e4>
   13ca4:	mov	r0, r9
   13ca8:	add	sp, sp, #4
   13cac:	ldrd	r4, [sp]
   13cb0:	ldrd	r6, [sp, #8]
   13cb4:	ldrd	r8, [sp, #16]
   13cb8:	ldrd	sl, [sp, #24]
   13cbc:	add	sp, sp, #32
   13cc0:	pop	{pc}		; (ldr pc, [sp], #4)
   13cc4:	cmp	r1, #0
   13cc8:	mov	r6, r0
   13ccc:	ldr	r0, [r8]
   13cd0:	subeq	r4, r2, #1
   13cd4:	subne	r4, r1, #1
   13cd8:	cmn	r3, #1
   13cdc:	mov	fp, r2
   13ce0:	mov	r7, r1
   13ce4:	mov	r9, #0
   13ce8:	beq	13d70 <__assert_fail@plt+0x2890>
   13cec:	movw	r1, #3073	; 0xc01
   13cf0:	bl	14b70 <__assert_fail@plt+0x3690>
   13cf4:	mov	r3, r0
   13cf8:	cmp	r3, #0
   13cfc:	bge	13d80 <__assert_fail@plt+0x28a0>
   13d00:	bl	1139c <__errno_location@plt>
   13d04:	ldr	r9, [r0]
   13d08:	mov	sl, r0
   13d0c:	sub	r3, r9, #23
   13d10:	cmp	r3, #1
   13d14:	bls	13d30 <__assert_fail@plt+0x2850>
   13d18:	b	13de8 <__assert_fail@plt+0x2908>
   13d1c:	cmp	r4, #0
   13d20:	subne	r4, r4, #1
   13d24:	subeq	r4, fp, #1
   13d28:	cmp	r4, r7
   13d2c:	beq	13dc0 <__assert_fail@plt+0x28e0>
   13d30:	add	r5, r6, r4, lsl #4
   13d34:	ldr	r3, [r5, #4]
   13d38:	cmp	r3, #0
   13d3c:	blt	13d1c <__assert_fail@plt+0x283c>
   13d40:	ldr	r0, [r5, #8]
   13d44:	bl	14abc <__assert_fail@plt+0x35dc>
   13d48:	cmp	r0, #0
   13d4c:	bne	13df8 <__assert_fail@plt+0x2918>
   13d50:	mvn	r3, #1
   13d54:	mov	r9, #1
   13d58:	str	r3, [r5, #4]
   13d5c:	ldr	r3, [r8, #4]
   13d60:	str	r0, [r5, #8]
   13d64:	ldr	r0, [r8]
   13d68:	cmn	r3, #1
   13d6c:	bne	13cec <__assert_fail@plt+0x280c>
   13d70:	bl	13814 <__assert_fail@plt+0x2334>
   13d74:	mov	r3, r0
   13d78:	cmp	r3, #0
   13d7c:	blt	13d00 <__assert_fail@plt+0x2820>
   13d80:	mov	r0, r3
   13d84:	movw	r1, #38428	; 0x961c
   13d88:	movt	r1, #1
   13d8c:	str	r3, [r8, #4]
   13d90:	bl	11138 <fdopen@plt>
   13d94:	cmp	r0, #0
   13d98:	mov	r4, r0
   13d9c:	str	r0, [r8, #8]
   13da0:	beq	13e24 <__assert_fail@plt+0x2944>
   13da4:	movw	r3, #45936	; 0xb370
   13da8:	movt	r3, #2
   13dac:	ldr	r2, [r3, #288]	; 0x120
   13db0:	mov	r1, #0
   13db4:	str	r1, [r3, #288]	; 0x120
   13db8:	str	r2, [r8, #12]
   13dbc:	b	13ca4 <__assert_fail@plt+0x27c4>
   13dc0:	ldr	r2, [r6, r4, lsl #4]
   13dc4:	mov	r1, #3
   13dc8:	mov	r0, #0
   13dcc:	bl	16fdc <__assert_fail@plt+0x5afc>
   13dd0:	mov	r3, r0
   13dd4:	movw	r2, #38544	; 0x9690
   13dd8:	movt	r2, #1
   13ddc:	mov	r1, r9
   13de0:	mov	r0, #1
   13de4:	bl	112d0 <error@plt>
   13de8:	mov	r1, #3
   13dec:	mov	r0, #0
   13df0:	ldr	r2, [r6, r7, lsl #4]
   13df4:	b	13dcc <__assert_fail@plt+0x28ec>
   13df8:	ldr	r4, [sl]
   13dfc:	mov	r1, #3
   13e00:	mov	r0, #0
   13e04:	ldr	r2, [r5]
   13e08:	bl	16fdc <__assert_fail@plt+0x5afc>
   13e0c:	mov	r3, r0
   13e10:	movw	r2, #38544	; 0x9690
   13e14:	movt	r2, #1
   13e18:	mov	r1, r4
   13e1c:	mov	r0, #1
   13e20:	bl	112d0 <error@plt>
   13e24:	bl	1139c <__errno_location@plt>
   13e28:	ldr	r5, [r0]
   13e2c:	mov	r1, #3
   13e30:	mov	r0, r4
   13e34:	ldr	r2, [r6, r7, lsl #4]
   13e38:	bl	16fdc <__assert_fail@plt+0x5afc>
   13e3c:	mov	r3, r0
   13e40:	movw	r2, #38544	; 0x9690
   13e44:	movt	r2, #1
   13e48:	mov	r1, r5
   13e4c:	mov	r0, #1
   13e50:	bl	112d0 <error@plt>
   13e54:	strd	r4, [sp, #-20]!	; 0xffffffec
   13e58:	mov	r4, r1
   13e5c:	mov	r5, r3
   13e60:	strd	r6, [sp, #8]
   13e64:	subs	r6, r0, #0
   13e68:	mov	r7, r2
   13e6c:	str	lr, [sp, #16]
   13e70:	sub	sp, sp, #36	; 0x24
   13e74:	beq	13f4c <__assert_fail@plt+0x2a6c>
   13e78:	bl	14abc <__assert_fail@plt+0x35dc>
   13e7c:	cmp	r0, #0
   13e80:	beq	13ed8 <__assert_fail@plt+0x29f8>
   13e84:	bl	1139c <__errno_location@plt>
   13e88:	ldr	r6, [r0]
   13e8c:	movw	r3, #45936	; 0xb370
   13e90:	movt	r3, #2
   13e94:	ldr	r3, [r3, #40]	; 0x28
   13e98:	sub	r0, r6, #32
   13e9c:	clz	r0, r0
   13ea0:	lsr	r0, r0, #5
   13ea4:	cmp	r3, #0
   13ea8:	moveq	r0, #0
   13eac:	cmp	r0, #0
   13eb0:	bne	13ed8 <__assert_fail@plt+0x29f8>
   13eb4:	mov	r2, r5
   13eb8:	mov	r1, #3
   13ebc:	bl	16fdc <__assert_fail@plt+0x5afc>
   13ec0:	mov	r3, r0
   13ec4:	movw	r2, #38544	; 0x9690
   13ec8:	movt	r2, #1
   13ecc:	mov	r1, r6
   13ed0:	mov	r0, #1
   13ed4:	bl	112d0 <error@plt>
   13ed8:	cmp	r4, #0
   13edc:	blt	13f30 <__assert_fail@plt+0x2a50>
   13ee0:	movw	r6, #45936	; 0xb370
   13ee4:	movt	r6, #2
   13ee8:	ldr	r1, [r6, #152]	; 0x98
   13eec:	cmp	r1, #0
   13ef0:	beq	13f30 <__assert_fail@plt+0x2a50>
   13ef4:	ldr	r2, [r6, #156]	; 0x9c
   13ef8:	ldr	r3, [r2]
   13efc:	cmp	r4, r3
   13f00:	addne	r0, r2, #4
   13f04:	movne	r3, #0
   13f08:	bne	13f24 <__assert_fail@plt+0x2a44>
   13f0c:	b	14040 <__assert_fail@plt+0x2b60>
   13f10:	mov	ip, r0
   13f14:	add	r0, r0, #4
   13f18:	ldr	lr, [ip]
   13f1c:	cmp	lr, r4
   13f20:	beq	14044 <__assert_fail@plt+0x2b64>
   13f24:	add	r3, r3, #1
   13f28:	cmp	r3, r1
   13f2c:	bne	13f10 <__assert_fail@plt+0x2a30>
   13f30:	cmp	r7, #0
   13f34:	bgt	13f94 <__assert_fail@plt+0x2ab4>
   13f38:	add	sp, sp, #36	; 0x24
   13f3c:	ldrd	r4, [sp]
   13f40:	ldrd	r6, [sp, #8]
   13f44:	add	sp, sp, #16
   13f48:	pop	{pc}		; (ldr pc, [sp], #4)
   13f4c:	cmp	r1, #0
   13f50:	blt	13f30 <__assert_fail@plt+0x2a50>
   13f54:	mov	r0, r4
   13f58:	bl	114c8 <close@plt>
   13f5c:	cmp	r0, #0
   13f60:	bge	13ee0 <__assert_fail@plt+0x2a00>
   13f64:	bl	1139c <__errno_location@plt>
   13f68:	ldr	r4, [r0]
   13f6c:	mov	r2, r5
   13f70:	mov	r1, #3
   13f74:	mov	r0, r6
   13f78:	bl	16fdc <__assert_fail@plt+0x5afc>
   13f7c:	mov	r3, r0
   13f80:	movw	r2, #38544	; 0x9690
   13f84:	movt	r2, #1
   13f88:	mov	r0, #1
   13f8c:	mov	r1, r4
   13f90:	bl	112d0 <error@plt>
   13f94:	mov	r4, #0
   13f98:	mov	r0, r7
   13f9c:	mov	r2, r4
   13fa0:	add	r1, sp, #8
   13fa4:	str	r4, [sp, #8]
   13fa8:	bl	11294 <waitpid@plt>
   13fac:	cmn	r0, #1
   13fb0:	beq	140c0 <__assert_fail@plt+0x2be0>
   13fb4:	ldr	r2, [sp, #8]
   13fb8:	and	r4, r2, #127	; 0x7f
   13fbc:	add	r3, r4, #1
   13fc0:	sbfx	r3, r3, #1, #7
   13fc4:	cmp	r3, #0
   13fc8:	ble	14058 <__assert_fail@plt+0x2b78>
   13fcc:	cmp	r4, #13
   13fd0:	beq	13f38 <__assert_fail@plt+0x2a58>
   13fd4:	add	r6, sp, #12
   13fd8:	mov	r0, r4
   13fdc:	mov	r1, r6
   13fe0:	bl	17468 <__assert_fail@plt+0x5f88>
   13fe4:	cmp	r0, #0
   13fe8:	bne	140f4 <__assert_fail@plt+0x2c14>
   13fec:	mov	r2, #5
   13ff0:	movw	r1, #38464	; 0x9640
   13ff4:	movt	r1, #1
   13ff8:	mov	r0, #0
   13ffc:	bl	1121c <dcgettext@plt>
   14000:	mov	r7, r0
   14004:	mov	r2, r5
   14008:	mov	r1, #3
   1400c:	mov	r0, #0
   14010:	bl	16fdc <__assert_fail@plt+0x5afc>
   14014:	movw	r3, #45936	; 0xb370
   14018:	movt	r3, #2
   1401c:	str	r6, [sp]
   14020:	ldr	ip, [r3, #40]	; 0x28
   14024:	mov	r2, r7
   14028:	mov	r3, r0
   1402c:	mov	r1, #0
   14030:	add	r0, r4, #128	; 0x80
   14034:	str	ip, [sp, #4]
   14038:	bl	112d0 <error@plt>
   1403c:	b	13f38 <__assert_fail@plt+0x2a58>
   14040:	mov	ip, r2
   14044:	sub	r1, r1, #1
   14048:	ldr	r3, [r2, r1, lsl #2]
   1404c:	str	r1, [r6, #152]	; 0x98
   14050:	str	r3, [ip]
   14054:	b	13f30 <__assert_fail@plt+0x2a50>
   14058:	cmp	r4, #0
   1405c:	bne	14114 <__assert_fail@plt+0x2c34>
   14060:	ubfx	r6, r2, #8, #8
   14064:	cmp	r6, #0
   14068:	beq	13f38 <__assert_fail@plt+0x2a58>
   1406c:	mov	r2, #5
   14070:	mov	r0, r4
   14074:	movw	r1, #38508	; 0x966c
   14078:	movt	r1, #1
   1407c:	bl	1121c <dcgettext@plt>
   14080:	mov	r7, r0
   14084:	mov	r2, r5
   14088:	mov	r1, #3
   1408c:	mov	r0, r4
   14090:	bl	16fdc <__assert_fail@plt+0x5afc>
   14094:	movw	r3, #45936	; 0xb370
   14098:	movt	r3, #2
   1409c:	str	r6, [sp]
   140a0:	ldr	ip, [r3, #40]	; 0x28
   140a4:	mov	r2, r7
   140a8:	mov	r3, r0
   140ac:	mov	r1, r4
   140b0:	mov	r0, r6
   140b4:	str	ip, [sp, #4]
   140b8:	bl	112d0 <error@plt>
   140bc:	b	13f38 <__assert_fail@plt+0x2a58>
   140c0:	bl	1139c <__errno_location@plt>
   140c4:	ldr	r6, [r0]
   140c8:	cmp	r6, #10
   140cc:	beq	13fb4 <__assert_fail@plt+0x2ad4>
   140d0:	mov	r2, #5
   140d4:	mov	r0, r4
   140d8:	movw	r1, #38432	; 0x9620
   140dc:	movt	r1, #1
   140e0:	bl	1121c <dcgettext@plt>
   140e4:	mov	r2, r0
   140e8:	mov	r1, r6
   140ec:	mov	r0, #1
   140f0:	bl	112d0 <error@plt>
   140f4:	movw	r3, #38460	; 0x963c
   140f8:	movt	r3, #1
   140fc:	str	r4, [sp]
   14100:	mov	r2, #19
   14104:	mov	r1, #1
   14108:	mov	r0, r6
   1410c:	bl	113a8 <__sprintf_chk@plt>
   14110:	b	13fec <__assert_fail@plt+0x2b0c>
   14114:	mov	r2, #5
   14118:	movw	r1, #38548	; 0x9694
   1411c:	movt	r1, #1
   14120:	mov	r0, #0
   14124:	bl	1121c <dcgettext@plt>
   14128:	mov	r2, r0
   1412c:	mov	r1, #0
   14130:	ldr	r3, [sp, #8]
   14134:	mov	r0, #1
   14138:	bl	112d0 <error@plt>
   1413c:	cmp	r0, #0
   14140:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14144:	mov	r5, r2
   14148:	strd	r6, [sp, #8]
   1414c:	mov	r7, r1
   14150:	str	r8, [sp, #16]
   14154:	str	lr, [sp, #20]
   14158:	beq	14230 <__assert_fail@plt+0x2d50>
   1415c:	orrs	r3, r1, r2
   14160:	movw	r4, #45936	; 0xb370
   14164:	movt	r4, #2
   14168:	bne	14178 <__assert_fail@plt+0x2c98>
   1416c:	ldrb	r3, [r4, #296]	; 0x128
   14170:	cmp	r3, #0
   14174:	bne	14218 <__assert_fail@plt+0x2d38>
   14178:	movw	r6, #45396	; 0xb154
   1417c:	movt	r6, #2
   14180:	ldr	r3, [r4]
   14184:	mov	r0, #0
   14188:	ldr	r1, [r6, #8]
   1418c:	ldr	r2, [r4, #288]	; 0x120
   14190:	bl	13e54 <__assert_fail@plt+0x2974>
   14194:	bl	13540 <__assert_fail@plt+0x2060>
   14198:	ldr	r0, [r4]
   1419c:	bl	13814 <__assert_fail@plt+0x2334>
   141a0:	cmp	r0, #0
   141a4:	str	r0, [r6, #8]
   141a8:	blt	14240 <__assert_fail@plt+0x2d60>
   141ac:	mov	r1, r7
   141b0:	mov	r2, r5
   141b4:	bl	14dc4 <__assert_fail@plt+0x38e4>
   141b8:	cmp	r0, r5
   141bc:	beq	14218 <__assert_fail@plt+0x2d38>
   141c0:	bl	1139c <__errno_location@plt>
   141c4:	ldr	r4, [r0]
   141c8:	movw	r3, #45936	; 0xb370
   141cc:	movt	r3, #2
   141d0:	ldr	r2, [r3, #40]	; 0x28
   141d4:	sub	r0, r4, #32
   141d8:	clz	r0, r0
   141dc:	lsr	r0, r0, #5
   141e0:	cmp	r2, #0
   141e4:	moveq	r0, #0
   141e8:	cmp	r0, #0
   141ec:	movne	r0, #0
   141f0:	bne	1421c <__assert_fail@plt+0x2d3c>
   141f4:	mov	r1, #3
   141f8:	ldr	r2, [r3]
   141fc:	bl	16fdc <__assert_fail@plt+0x5afc>
   14200:	mov	r3, r0
   14204:	movw	r2, #38544	; 0x9690
   14208:	movt	r2, #1
   1420c:	mov	r1, r4
   14210:	mov	r0, #1
   14214:	bl	112d0 <error@plt>
   14218:	mov	r0, #1
   1421c:	ldrd	r4, [sp]
   14220:	ldrd	r6, [sp, #8]
   14224:	ldr	r8, [sp, #16]
   14228:	add	sp, sp, #20
   1422c:	pop	{pc}		; (ldr pc, [sp], #4)
   14230:	movw	r3, #45396	; 0xb154
   14234:	movt	r3, #2
   14238:	ldr	r0, [r3, #8]
   1423c:	b	141ac <__assert_fail@plt+0x2ccc>
   14240:	bl	1139c <__errno_location@plt>
   14244:	ldr	r5, [r0]
   14248:	mov	r1, #3
   1424c:	mov	r0, #0
   14250:	ldr	r2, [r4]
   14254:	bl	16fdc <__assert_fail@plt+0x5afc>
   14258:	mov	r3, r0
   1425c:	movw	r2, #38544	; 0x9690
   14260:	movt	r2, #1
   14264:	mov	r1, r5
   14268:	mov	r0, #1
   1426c:	bl	112d0 <error@plt>
   14270:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14274:	strd	r6, [sp, #8]
   14278:	mov	r6, r0
   1427c:	mov	r7, r1
   14280:	strd	r8, [sp, #16]
   14284:	mov	r8, #0
   14288:	mov	r9, #0
   1428c:	strd	sl, [sp, #24]
   14290:	mov	sl, #1
   14294:	str	lr, [sp, #32]
   14298:	sub	sp, sp, #52	; 0x34
   1429c:	mov	r4, sl
   142a0:	ldr	r5, [sp, #88]	; 0x58
   142a4:	strd	r0, [sp, #24]
   142a8:	strd	r2, [sp, #32]
   142ac:	cmn	r5, #1
   142b0:	beq	1439c <__assert_fail@plt+0x2ebc>
   142b4:	cmp	r5, r3
   142b8:	movcs	r3, #0
   142bc:	movcc	r3, #1
   142c0:	str	r3, [sp, #20]
   142c4:	mov	r3, #0
   142c8:	mov	r2, r5
   142cc:	cmp	r7, r3
   142d0:	cmpeq	r6, r5
   142d4:	strd	r2, [sp, #8]
   142d8:	bhi	14404 <__assert_fail@plt+0x2f24>
   142dc:	ldr	fp, [sp, #32]
   142e0:	ldr	r3, [sp, #96]	; 0x60
   142e4:	ldr	r2, [sp, #100]	; 0x64
   142e8:	orrs	r3, r3, r2
   142ec:	orr	r2, sl, r4
   142f0:	moveq	r3, #1
   142f4:	movne	r3, #0
   142f8:	str	r3, [sp, #8]
   142fc:	mov	r3, fp
   14300:	ldrd	sl, [sp, #24]
   14304:	b	14350 <__assert_fail@plt+0x2e70>
   14308:	ldrd	r0, [sp, #96]	; 0x60
   1430c:	adds	r8, r8, r4
   14310:	adc	r9, r9, #0
   14314:	ldr	r4, [sp, #8]
   14318:	cmp	r9, r1
   1431c:	cmpeq	r8, r0
   14320:	orrcc	r4, r4, #1
   14324:	orr	r2, r4, ip
   14328:	tst	r2, #255	; 0xff
   1432c:	beq	1450c <__assert_fail@plt+0x302c>
   14330:	mov	r1, #0
   14334:	sub	r5, r5, r6
   14338:	cmp	r1, fp
   1433c:	add	r3, r3, r6
   14340:	cmpeq	r5, sl
   14344:	mov	r0, r5
   14348:	mov	r6, sl
   1434c:	bcc	14378 <__assert_fail@plt+0x2e98>
   14350:	ands	ip, r2, #255	; 0xff
   14354:	beq	14308 <__assert_fail@plt+0x2e28>
   14358:	mov	r1, r3
   1435c:	mov	r2, r6
   14360:	str	r3, [sp, #16]
   14364:	mov	r0, r4
   14368:	bl	1413c <__assert_fail@plt+0x2c5c>
   1436c:	mov	ip, r0
   14370:	ldr	r3, [sp, #16]
   14374:	b	14308 <__assert_fail@plt+0x2e28>
   14378:	cmp	r5, #0
   1437c:	mov	sl, ip
   14380:	strd	r0, [sp, #8]
   14384:	mov	fp, r3
   14388:	ldrd	r6, [sp, #24]
   1438c:	bne	14424 <__assert_fail@plt+0x2f44>
   14390:	ldr	r3, [sp, #20]
   14394:	cmp	r3, #0
   14398:	bne	144b4 <__assert_fail@plt+0x2fd4>
   1439c:	cmp	sl, #0
   143a0:	beq	14480 <__assert_fail@plt+0x2fa0>
   143a4:	mov	r0, #0
   143a8:	ldr	r1, [sp, #32]
   143ac:	ldr	r2, [sp, #36]	; 0x24
   143b0:	bl	171cc <__assert_fail@plt+0x5cec>
   143b4:	cmn	r0, #1
   143b8:	mov	r5, r0
   143bc:	clzne	r3, r0
   143c0:	lsrne	r3, r3, #5
   143c4:	strne	r3, [sp, #20]
   143c8:	bne	142c4 <__assert_fail@plt+0x2de4>
   143cc:	bl	1139c <__errno_location@plt>
   143d0:	ldr	r4, [r0]
   143d4:	movw	r3, #45936	; 0xb370
   143d8:	movt	r3, #2
   143dc:	mov	r1, #3
   143e0:	mov	r0, #0
   143e4:	ldr	r2, [r3, #300]	; 0x12c
   143e8:	bl	16fdc <__assert_fail@plt+0x5afc>
   143ec:	mov	r3, r0
   143f0:	movw	r2, #38544	; 0x9690
   143f4:	movt	r2, #1
   143f8:	mov	r1, r4
   143fc:	mov	r0, #1
   14400:	bl	112d0 <error@plt>
   14404:	cmp	r5, #0
   14408:	beq	14390 <__assert_fail@plt+0x2eb0>
   1440c:	orr	r2, r4, sl
   14410:	ands	r2, r2, #255	; 0xff
   14414:	moveq	sl, r2
   14418:	moveq	r4, #1
   1441c:	beq	14444 <__assert_fail@plt+0x2f64>
   14420:	ldr	fp, [sp, #32]
   14424:	mov	r2, r5
   14428:	mov	r0, r4
   1442c:	mov	r1, fp
   14430:	bl	1413c <__assert_fail@plt+0x2c5c>
   14434:	mov	r2, r4
   14438:	eor	r4, r0, #1
   1443c:	mov	sl, r0
   14440:	uxtb	r4, r4
   14444:	uxtb	r2, r2
   14448:	mov	r3, #0
   1444c:	adds	r8, r8, r2
   14450:	adc	r9, r9, r3
   14454:	ldrd	r2, [sp, #96]	; 0x60
   14458:	cmp	r3, r9
   1445c:	cmpeq	r2, r8
   14460:	movne	r4, #0
   14464:	andeq	r4, r4, #1
   14468:	cmp	r4, #0
   1446c:	bne	1450c <__assert_fail@plt+0x302c>
   14470:	ldrd	r2, [sp, #8]
   14474:	subs	r6, r6, r2
   14478:	sbc	r7, r7, r3
   1447c:	b	14390 <__assert_fail@plt+0x2eb0>
   14480:	mov	r1, #1
   14484:	mov	r2, r6
   14488:	mov	r3, r7
   1448c:	mov	r0, sl
   14490:	str	r1, [sp]
   14494:	bl	11288 <lseek64@plt>
   14498:	mvn	r3, #0
   1449c:	mvn	r2, #0
   144a0:	cmp	r1, r3
   144a4:	cmpeq	r0, r2
   144a8:	movne	r4, #1
   144ac:	ldrdne	r6, [sp, #24]
   144b0:	b	143a4 <__assert_fail@plt+0x2ec4>
   144b4:	adds	r3, r8, #1
   144b8:	str	r3, [sp, #40]	; 0x28
   144bc:	adc	r3, r9, #0
   144c0:	str	r3, [sp, #44]	; 0x2c
   144c4:	ldrd	r2, [sp, #96]	; 0x60
   144c8:	cmp	r9, r3
   144cc:	cmpeq	r8, r2
   144d0:	bcs	1450c <__assert_fail@plt+0x302c>
   144d4:	ldrd	r4, [sp, #40]	; 0x28
   144d8:	ldrd	r6, [sp, #96]	; 0x60
   144dc:	b	144e8 <__assert_fail@plt+0x3008>
   144e0:	mov	r4, r2
   144e4:	mov	r5, r3
   144e8:	mov	r2, #0
   144ec:	mov	r0, #1
   144f0:	mov	r1, r2
   144f4:	bl	1413c <__assert_fail@plt+0x2c5c>
   144f8:	adds	r2, r4, #1
   144fc:	adc	r3, r5, #0
   14500:	cmp	r7, r5
   14504:	cmpeq	r6, r4
   14508:	bne	144e0 <__assert_fail@plt+0x3000>
   1450c:	add	sp, sp, #52	; 0x34
   14510:	ldrd	r4, [sp]
   14514:	ldrd	r6, [sp, #8]
   14518:	ldrd	r8, [sp, #16]
   1451c:	ldrd	sl, [sp, #24]
   14520:	add	sp, sp, #32
   14524:	pop	{pc}		; (ldr pc, [sp], #4)
   14528:	subs	r4, r0, #0
   1452c:	str	r7, [sp, #-8]!
   14530:	str	lr, [sp, #4]
   14534:	sub	sp, sp, #56	; 0x38
   14538:	beq	14580 <__assert_fail@plt+0x30a0>
   1453c:	movw	r3, #45920	; 0xb360
   14540:	movt	r3, #2
   14544:	ldr	r5, [r3]
   14548:	mov	r2, #5
   1454c:	movw	r1, #38592	; 0x96c0
   14550:	movt	r1, #1
   14554:	mov	r0, #0
   14558:	bl	1121c <dcgettext@plt>
   1455c:	movw	r3, #46380	; 0xb52c
   14560:	movt	r3, #2
   14564:	mov	r2, r0
   14568:	mov	r1, #1
   1456c:	ldr	r3, [r3]
   14570:	mov	r0, r5
   14574:	bl	113f0 <__fprintf_chk@plt>
   14578:	mov	r0, r4
   1457c:	bl	11348 <exit@plt>
   14580:	mov	r2, #5
   14584:	movw	r1, #38632	; 0x96e8
   14588:	movt	r1, #1
   1458c:	movw	r5, #45924	; 0xb364
   14590:	movt	r5, #2
   14594:	bl	1121c <dcgettext@plt>
   14598:	movw	r3, #46380	; 0xb52c
   1459c:	movt	r3, #2
   145a0:	mov	r1, r0
   145a4:	mov	r0, #1
   145a8:	ldr	r2, [r3]
   145ac:	bl	113cc <__printf_chk@plt>
   145b0:	mov	r2, #5
   145b4:	movw	r1, #38672	; 0x9710
   145b8:	movt	r1, #1
   145bc:	mov	r0, r4
   145c0:	bl	1121c <dcgettext@plt>
   145c4:	ldr	r1, [r5]
   145c8:	bl	11150 <fputs_unlocked@plt>
   145cc:	mov	r2, #5
   145d0:	movw	r1, #38780	; 0x977c
   145d4:	movt	r1, #1
   145d8:	mov	r0, r4
   145dc:	bl	1121c <dcgettext@plt>
   145e0:	ldr	r1, [r5]
   145e4:	bl	11150 <fputs_unlocked@plt>
   145e8:	mov	r2, #5
   145ec:	movw	r1, #38836	; 0x97b4
   145f0:	movt	r1, #1
   145f4:	mov	r0, r4
   145f8:	bl	1121c <dcgettext@plt>
   145fc:	ldr	r1, [r5]
   14600:	bl	11150 <fputs_unlocked@plt>
   14604:	ldr	r6, [r5]
   14608:	mov	r2, #5
   1460c:	movw	r1, #38912	; 0x9800
   14610:	movt	r1, #1
   14614:	mov	r0, r4
   14618:	bl	1121c <dcgettext@plt>
   1461c:	mov	r2, r0
   14620:	mov	r3, #2
   14624:	mov	r1, #1
   14628:	mov	r0, r6
   1462c:	bl	113f0 <__fprintf_chk@plt>
   14630:	mov	r2, #5
   14634:	movw	r1, #40004	; 0x9c44
   14638:	movt	r1, #1
   1463c:	mov	r0, r4
   14640:	bl	1121c <dcgettext@plt>
   14644:	ldr	r1, [r5]
   14648:	bl	11150 <fputs_unlocked@plt>
   1464c:	mov	r2, #5
   14650:	movw	r1, #40120	; 0x9cb8
   14654:	movt	r1, #1
   14658:	mov	r0, r4
   1465c:	bl	1121c <dcgettext@plt>
   14660:	ldr	r1, [r5]
   14664:	bl	11150 <fputs_unlocked@plt>
   14668:	mov	r2, #5
   1466c:	movw	r1, #40168	; 0x9ce8
   14670:	movt	r1, #1
   14674:	mov	r0, r4
   14678:	bl	1121c <dcgettext@plt>
   1467c:	ldr	r1, [r5]
   14680:	bl	11150 <fputs_unlocked@plt>
   14684:	mov	r2, #5
   14688:	movw	r1, #40224	; 0x9d20
   1468c:	movt	r1, #1
   14690:	mov	r0, r4
   14694:	bl	1121c <dcgettext@plt>
   14698:	ldr	r1, [r5]
   1469c:	bl	11150 <fputs_unlocked@plt>
   146a0:	mov	r2, #5
   146a4:	movw	r1, #40436	; 0x9df4
   146a8:	movt	r1, #1
   146ac:	mov	r0, r4
   146b0:	bl	1121c <dcgettext@plt>
   146b4:	ldr	r1, [r5]
   146b8:	bl	11150 <fputs_unlocked@plt>
   146bc:	movw	r0, #37592	; 0x92d8
   146c0:	movt	r0, #1
   146c4:	ldr	ip, [r0, #16]
   146c8:	ldrd	r2, [r0, #24]
   146cc:	ldr	r6, [r0, #20]
   146d0:	subs	r1, ip, #0
   146d4:	str	ip, [sp]
   146d8:	ldrd	r8, [r0, #32]
   146dc:	strd	r2, [sp, #8]
   146e0:	ldrd	r2, [r0, #40]	; 0x28
   146e4:	str	r6, [sp, #4]
   146e8:	ldrd	r6, [r0, #48]	; 0x30
   146ec:	strd	r8, [sp, #16]
   146f0:	ldrd	r8, [r0, #56]	; 0x38
   146f4:	strd	r2, [sp, #24]
   146f8:	ldrd	r2, [r0, #64]	; 0x40
   146fc:	strd	r6, [sp, #32]
   14700:	movwne	r7, #38584	; 0x96b8
   14704:	mov	r6, sp
   14708:	movtne	r7, #1
   1470c:	strd	r8, [sp, #40]	; 0x28
   14710:	strd	r2, [sp, #48]	; 0x30
   14714:	bne	1480c <__assert_fail@plt+0x332c>
   14718:	ldr	r6, [r6, #4]
   1471c:	movw	r1, #40776	; 0x9f48
   14720:	movt	r1, #1
   14724:	mov	r2, #5
   14728:	cmp	r6, #0
   1472c:	beq	14820 <__assert_fail@plt+0x3340>
   14730:	mov	r0, #0
   14734:	bl	1121c <dcgettext@plt>
   14738:	mov	r1, r0
   1473c:	movw	r3, #40800	; 0x9f60
   14740:	movt	r3, #1
   14744:	movw	r2, #40840	; 0x9f88
   14748:	movt	r2, #1
   1474c:	mov	r0, #1
   14750:	bl	113cc <__printf_chk@plt>
   14754:	mov	r1, #0
   14758:	mov	r0, #5
   1475c:	bl	11438 <setlocale@plt>
   14760:	cmp	r0, #0
   14764:	movweq	r7, #38584	; 0x96b8
   14768:	movteq	r7, #1
   1476c:	beq	14790 <__assert_fail@plt+0x32b0>
   14770:	movw	r1, #40856	; 0x9f98
   14774:	movt	r1, #1
   14778:	mov	r2, #3
   1477c:	movw	r7, #38584	; 0x96b8
   14780:	movt	r7, #1
   14784:	bl	114b0 <strncmp@plt>
   14788:	cmp	r0, #0
   1478c:	bne	148d8 <__assert_fail@plt+0x33f8>
   14790:	mov	r2, #5
   14794:	movw	r1, #40932	; 0x9fe4
   14798:	movt	r1, #1
   1479c:	mov	r0, #0
   147a0:	bl	1121c <dcgettext@plt>
   147a4:	mov	r1, r0
   147a8:	movw	r3, #38584	; 0x96b8
   147ac:	movt	r3, #1
   147b0:	movw	r2, #40800	; 0x9f60
   147b4:	movt	r2, #1
   147b8:	mov	r0, #1
   147bc:	bl	113cc <__printf_chk@plt>
   147c0:	mov	r2, #5
   147c4:	movw	r1, #40960	; 0xa000
   147c8:	movt	r1, #1
   147cc:	mov	r0, #0
   147d0:	bl	1121c <dcgettext@plt>
   147d4:	movw	r2, #41960	; 0xa3e8
   147d8:	movt	r2, #1
   147dc:	cmp	r6, r7
   147e0:	movw	r3, #40116	; 0x9cb4
   147e4:	movt	r3, #1
   147e8:	mov	r1, r0
   147ec:	moveq	r3, r2
   147f0:	mov	r2, r6
   147f4:	mov	r0, #1
   147f8:	bl	113cc <__printf_chk@plt>
   147fc:	b	14578 <__assert_fail@plt+0x3098>
   14800:	ldr	r1, [r6, #8]!
   14804:	cmp	r1, #0
   14808:	beq	14718 <__assert_fail@plt+0x3238>
   1480c:	mov	r0, r7
   14810:	bl	11168 <strcmp@plt>
   14814:	cmp	r0, #0
   14818:	bne	14800 <__assert_fail@plt+0x3320>
   1481c:	b	14718 <__assert_fail@plt+0x3238>
   14820:	mov	r0, r6
   14824:	bl	1121c <dcgettext@plt>
   14828:	mov	r1, r0
   1482c:	movw	r3, #40800	; 0x9f60
   14830:	movt	r3, #1
   14834:	movw	r2, #40840	; 0x9f88
   14838:	movt	r2, #1
   1483c:	mov	r0, #1
   14840:	bl	113cc <__printf_chk@plt>
   14844:	mov	r1, r6
   14848:	mov	r0, #5
   1484c:	bl	11438 <setlocale@plt>
   14850:	cmp	r0, #0
   14854:	beq	14870 <__assert_fail@plt+0x3390>
   14858:	movw	r1, #40856	; 0x9f98
   1485c:	movt	r1, #1
   14860:	mov	r2, #3
   14864:	bl	114b0 <strncmp@plt>
   14868:	cmp	r0, #0
   1486c:	bne	148cc <__assert_fail@plt+0x33ec>
   14870:	mov	r2, #5
   14874:	movw	r1, #40932	; 0x9fe4
   14878:	movt	r1, #1
   1487c:	mov	r0, #0
   14880:	bl	1121c <dcgettext@plt>
   14884:	mov	r1, r0
   14888:	movw	r3, #38584	; 0x96b8
   1488c:	movt	r3, #1
   14890:	movw	r2, #40800	; 0x9f60
   14894:	movt	r2, #1
   14898:	mov	r0, #1
   1489c:	bl	113cc <__printf_chk@plt>
   148a0:	movw	r1, #40960	; 0xa000
   148a4:	movt	r1, #1
   148a8:	mov	r2, #5
   148ac:	mov	r0, #0
   148b0:	bl	1121c <dcgettext@plt>
   148b4:	movw	r6, #38584	; 0x96b8
   148b8:	movt	r6, #1
   148bc:	movw	r3, #41960	; 0xa3e8
   148c0:	movt	r3, #1
   148c4:	mov	r1, r0
   148c8:	b	147f0 <__assert_fail@plt+0x3310>
   148cc:	movw	r7, #38584	; 0x96b8
   148d0:	movt	r7, #1
   148d4:	mov	r6, r7
   148d8:	mov	r2, #5
   148dc:	movw	r1, #40860	; 0x9f9c
   148e0:	movt	r1, #1
   148e4:	mov	r0, #0
   148e8:	bl	1121c <dcgettext@plt>
   148ec:	ldr	r1, [r5]
   148f0:	bl	11150 <fputs_unlocked@plt>
   148f4:	b	14790 <__assert_fail@plt+0x32b0>
   148f8:	ldrb	r3, [r0]
   148fc:	cmp	r3, #47	; 0x2f
   14900:	bne	14910 <__assert_fail@plt+0x3430>
   14904:	ldrb	r3, [r0, #1]!
   14908:	cmp	r3, #47	; 0x2f
   1490c:	beq	14904 <__assert_fail@plt+0x3424>
   14910:	cmp	r3, #0
   14914:	beq	14944 <__assert_fail@plt+0x3464>
   14918:	mov	r2, r0
   1491c:	mov	r1, #0
   14920:	cmp	r3, #47	; 0x2f
   14924:	moveq	r1, #1
   14928:	beq	14938 <__assert_fail@plt+0x3458>
   1492c:	cmp	r1, #0
   14930:	movne	r0, r2
   14934:	movne	r1, #0
   14938:	ldrb	r3, [r2, #1]!
   1493c:	cmp	r3, #0
   14940:	bne	14920 <__assert_fail@plt+0x3440>
   14944:	bx	lr
   14948:	str	r4, [sp, #-8]!
   1494c:	mov	r4, r0
   14950:	str	lr, [sp, #4]
   14954:	bl	11354 <strlen@plt>
   14958:	cmp	r0, #1
   1495c:	bls	14980 <__assert_fail@plt+0x34a0>
   14960:	add	r2, r4, r0
   14964:	mov	r3, r0
   14968:	ldrb	r2, [r2, #-1]
   1496c:	cmp	r2, #47	; 0x2f
   14970:	subeq	r3, r0, #2
   14974:	rsbeq	r1, r4, #1
   14978:	addeq	r3, r4, r3
   1497c:	beq	1498c <__assert_fail@plt+0x34ac>
   14980:	ldr	r4, [sp]
   14984:	add	sp, sp, #4
   14988:	pop	{pc}		; (ldr pc, [sp], #4)
   1498c:	cmp	r3, r4
   14990:	add	r0, r1, r3
   14994:	beq	14980 <__assert_fail@plt+0x34a0>
   14998:	ldrb	r2, [r3], #-1
   1499c:	cmp	r2, #47	; 0x2f
   149a0:	beq	1498c <__assert_fail@plt+0x34ac>
   149a4:	ldr	r4, [sp]
   149a8:	add	sp, sp, #4
   149ac:	pop	{pc}		; (ldr pc, [sp], #4)
   149b0:	movw	r3, #46372	; 0xb524
   149b4:	movt	r3, #2
   149b8:	str	r0, [r3]
   149bc:	bx	lr
   149c0:	movw	r3, #46372	; 0xb524
   149c4:	movt	r3, #2
   149c8:	strb	r0, [r3, #4]
   149cc:	bx	lr
   149d0:	movw	r3, #45924	; 0xb364
   149d4:	movt	r3, #2
   149d8:	strd	r4, [sp, #-16]!
   149dc:	ldr	r0, [r3]
   149e0:	str	r6, [sp, #8]
   149e4:	str	lr, [sp, #12]
   149e8:	sub	sp, sp, #8
   149ec:	bl	18c50 <__assert_fail@plt+0x7770>
   149f0:	cmp	r0, #0
   149f4:	beq	14a20 <__assert_fail@plt+0x3540>
   149f8:	movw	r4, #46372	; 0xb524
   149fc:	movt	r4, #2
   14a00:	ldrb	r6, [r4, #4]
   14a04:	bl	1139c <__errno_location@plt>
   14a08:	mov	r5, r0
   14a0c:	cmp	r6, #0
   14a10:	beq	14a4c <__assert_fail@plt+0x356c>
   14a14:	ldr	r3, [r0]
   14a18:	cmp	r3, #32
   14a1c:	bne	14a4c <__assert_fail@plt+0x356c>
   14a20:	movw	r3, #45920	; 0xb360
   14a24:	movt	r3, #2
   14a28:	ldr	r0, [r3]
   14a2c:	bl	18c50 <__assert_fail@plt+0x7770>
   14a30:	cmp	r0, #0
   14a34:	bne	14a94 <__assert_fail@plt+0x35b4>
   14a38:	add	sp, sp, #8
   14a3c:	ldrd	r4, [sp]
   14a40:	ldr	r6, [sp, #8]
   14a44:	add	sp, sp, #12
   14a48:	pop	{pc}		; (ldr pc, [sp], #4)
   14a4c:	movw	r1, #41940	; 0xa3d4
   14a50:	movt	r1, #1
   14a54:	mov	r2, #5
   14a58:	mov	r0, #0
   14a5c:	bl	1121c <dcgettext@plt>
   14a60:	mov	r6, r0
   14a64:	ldr	r0, [r4]
   14a68:	cmp	r0, #0
   14a6c:	beq	14aa4 <__assert_fail@plt+0x35c4>
   14a70:	ldr	r4, [r5]
   14a74:	bl	16fc8 <__assert_fail@plt+0x5ae8>
   14a78:	mov	r3, r0
   14a7c:	movw	r2, #41676	; 0xa2cc
   14a80:	movt	r2, #1
   14a84:	mov	r0, #0
   14a88:	str	r6, [sp]
   14a8c:	mov	r1, r4
   14a90:	bl	112d0 <error@plt>
   14a94:	movw	r3, #45416	; 0xb168
   14a98:	movt	r3, #2
   14a9c:	ldr	r0, [r3]
   14aa0:	bl	111bc <_exit@plt>
   14aa4:	mov	r3, r6
   14aa8:	movw	r2, #38544	; 0x9690
   14aac:	movt	r2, #1
   14ab0:	ldr	r1, [r5]
   14ab4:	bl	112d0 <error@plt>
   14ab8:	b	14a94 <__assert_fail@plt+0x35b4>
   14abc:	strd	r4, [sp, #-12]!
   14ac0:	mov	r4, r0
   14ac4:	str	lr, [sp, #8]
   14ac8:	sub	sp, sp, #12
   14acc:	bl	113e4 <fileno@plt>
   14ad0:	cmp	r0, #0
   14ad4:	mov	r0, r4
   14ad8:	blt	14b5c <__assert_fail@plt+0x367c>
   14adc:	bl	11318 <__freading@plt>
   14ae0:	cmp	r0, #0
   14ae4:	bne	14b28 <__assert_fail@plt+0x3648>
   14ae8:	mov	r0, r4
   14aec:	bl	14c34 <__assert_fail@plt+0x3754>
   14af0:	cmp	r0, #0
   14af4:	beq	14b58 <__assert_fail@plt+0x3678>
   14af8:	bl	1139c <__errno_location@plt>
   14afc:	mov	r5, r0
   14b00:	mov	r0, r4
   14b04:	ldr	r4, [r5]
   14b08:	bl	11408 <fclose@plt>
   14b0c:	cmp	r4, #0
   14b10:	mvnne	r0, #0
   14b14:	strne	r4, [r5]
   14b18:	add	sp, sp, #12
   14b1c:	ldrd	r4, [sp]
   14b20:	add	sp, sp, #8
   14b24:	pop	{pc}		; (ldr pc, [sp], #4)
   14b28:	mov	r0, r4
   14b2c:	bl	113e4 <fileno@plt>
   14b30:	mov	r1, #1
   14b34:	mov	r2, #0
   14b38:	mov	r3, #0
   14b3c:	str	r1, [sp]
   14b40:	bl	11288 <lseek64@plt>
   14b44:	mvn	r3, #0
   14b48:	mvn	r2, #0
   14b4c:	cmp	r1, r3
   14b50:	cmpeq	r0, r2
   14b54:	bne	14ae8 <__assert_fail@plt+0x3608>
   14b58:	mov	r0, r4
   14b5c:	add	sp, sp, #12
   14b60:	ldrd	r4, [sp]
   14b64:	ldr	lr, [sp, #8]
   14b68:	add	sp, sp, #12
   14b6c:	b	11408 <fclose@plt>
   14b70:	push	{r1, r2, r3}
   14b74:	push	{lr}		; (str lr, [sp, #-4]!)
   14b78:	sub	sp, sp, #8
   14b7c:	ldr	r1, [sp, #12]
   14b80:	ands	r2, r1, #64	; 0x40
   14b84:	bne	14ba0 <__assert_fail@plt+0x36c0>
   14b88:	bl	112dc <open64@plt>
   14b8c:	bl	17584 <__assert_fail@plt+0x60a4>
   14b90:	add	sp, sp, #8
   14b94:	pop	{lr}		; (ldr lr, [sp], #4)
   14b98:	add	sp, sp, #12
   14b9c:	bx	lr
   14ba0:	add	r3, sp, #16
   14ba4:	ldr	r2, [sp, #16]
   14ba8:	str	r3, [sp, #4]
   14bac:	b	14b88 <__assert_fail@plt+0x36a8>
   14bb0:	mov	ip, r1
   14bb4:	mov	r1, r2
   14bb8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14bbc:	mov	r2, r3
   14bc0:	mov	r5, r0
   14bc4:	strd	r6, [sp, #8]
   14bc8:	mov	r0, ip
   14bcc:	str	r8, [sp, #16]
   14bd0:	str	lr, [sp, #20]
   14bd4:	bl	112dc <open64@plt>
   14bd8:	sub	r3, r5, r0
   14bdc:	mov	r4, r0
   14be0:	clz	r3, r3
   14be4:	lsr	r3, r3, #5
   14be8:	orrs	r3, r3, r0, lsr #31
   14bec:	beq	14c08 <__assert_fail@plt+0x3728>
   14bf0:	mov	r0, r4
   14bf4:	ldrd	r4, [sp]
   14bf8:	ldrd	r6, [sp, #8]
   14bfc:	ldr	r8, [sp, #16]
   14c00:	add	sp, sp, #20
   14c04:	pop	{pc}		; (ldr pc, [sp], #4)
   14c08:	mov	r1, r5
   14c0c:	bl	11228 <dup2@plt>
   14c10:	mov	r7, r0
   14c14:	bl	1139c <__errno_location@plt>
   14c18:	mov	r5, r0
   14c1c:	mov	r0, r4
   14c20:	ldr	r6, [r5]
   14c24:	mov	r4, r7
   14c28:	bl	114c8 <close@plt>
   14c2c:	str	r6, [r5]
   14c30:	b	14bf0 <__assert_fail@plt+0x3710>
   14c34:	str	r4, [sp, #-8]!
   14c38:	subs	r4, r0, #0
   14c3c:	str	lr, [sp, #4]
   14c40:	sub	sp, sp, #8
   14c44:	beq	14c60 <__assert_fail@plt+0x3780>
   14c48:	bl	11318 <__freading@plt>
   14c4c:	cmp	r0, #0
   14c50:	beq	14c60 <__assert_fail@plt+0x3780>
   14c54:	ldr	r3, [r4]
   14c58:	tst	r3, #256	; 0x100
   14c5c:	bne	14c78 <__assert_fail@plt+0x3798>
   14c60:	mov	r0, r4
   14c64:	add	sp, sp, #8
   14c68:	ldr	r4, [sp]
   14c6c:	ldr	lr, [sp, #4]
   14c70:	add	sp, sp, #8
   14c74:	b	1118c <fflush@plt>
   14c78:	mov	r1, #1
   14c7c:	mov	r2, #0
   14c80:	mov	r3, #0
   14c84:	mov	r0, r4
   14c88:	str	r1, [sp]
   14c8c:	bl	14cf4 <__assert_fail@plt+0x3814>
   14c90:	b	14c60 <__assert_fail@plt+0x3780>
   14c94:	strd	r4, [sp, #-12]!
   14c98:	mov	r5, r0
   14c9c:	str	lr, [sp, #8]
   14ca0:	sub	sp, sp, #12
   14ca4:	bl	1139c <__errno_location@plt>
   14ca8:	mov	r4, r0
   14cac:	mov	r2, #0
   14cb0:	ldr	r3, [r4]
   14cb4:	mov	r0, r5
   14cb8:	str	r2, [r4]
   14cbc:	str	r3, [sp]
   14cc0:	str	r3, [sp, #4]
   14cc4:	bl	111b0 <free@plt>
   14cc8:	ldr	r3, [r4]
   14ccc:	add	r2, sp, #8
   14cd0:	clz	r3, r3
   14cd4:	lsr	r3, r3, #5
   14cd8:	add	r3, r2, r3, lsl #2
   14cdc:	ldr	r3, [r3, #-8]
   14ce0:	str	r3, [r4]
   14ce4:	add	sp, sp, #12
   14ce8:	ldrd	r4, [sp]
   14cec:	add	sp, sp, #8
   14cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   14cf4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14cf8:	mov	r4, r0
   14cfc:	ldr	ip, [r0, #4]
   14d00:	strd	r6, [sp, #8]
   14d04:	str	lr, [sp, #20]
   14d08:	ldr	lr, [r0, #8]
   14d0c:	str	r8, [sp, #16]
   14d10:	sub	sp, sp, #8
   14d14:	ldr	r5, [sp, #32]
   14d18:	cmp	lr, ip
   14d1c:	beq	14d44 <__assert_fail@plt+0x3864>
   14d20:	mov	r0, r4
   14d24:	str	r5, [sp, #32]
   14d28:	add	sp, sp, #8
   14d2c:	ldrd	r4, [sp]
   14d30:	ldrd	r6, [sp, #8]
   14d34:	ldr	r8, [sp, #16]
   14d38:	ldr	lr, [sp, #20]
   14d3c:	add	sp, sp, #24
   14d40:	b	11420 <fseeko64@plt>
   14d44:	ldr	ip, [r0, #16]
   14d48:	ldr	lr, [r0, #20]
   14d4c:	cmp	lr, ip
   14d50:	bne	14d20 <__assert_fail@plt+0x3840>
   14d54:	ldr	r8, [r0, #36]	; 0x24
   14d58:	cmp	r8, #0
   14d5c:	bne	14d20 <__assert_fail@plt+0x3840>
   14d60:	mov	r6, r2
   14d64:	mov	r7, r3
   14d68:	bl	113e4 <fileno@plt>
   14d6c:	mov	r2, r6
   14d70:	mov	r3, r7
   14d74:	str	r5, [sp]
   14d78:	bl	11288 <lseek64@plt>
   14d7c:	mvn	r3, #0
   14d80:	mvn	r2, #0
   14d84:	cmp	r1, r3
   14d88:	cmpeq	r0, r2
   14d8c:	beq	14dbc <__assert_fail@plt+0x38dc>
   14d90:	ldr	r3, [r4]
   14d94:	strd	r0, [r4, #80]	; 0x50
   14d98:	bic	r3, r3, #16
   14d9c:	str	r3, [r4]
   14da0:	mov	r0, r8
   14da4:	add	sp, sp, #8
   14da8:	ldrd	r4, [sp]
   14dac:	ldrd	r6, [sp, #8]
   14db0:	ldr	r8, [sp, #16]
   14db4:	add	sp, sp, #20
   14db8:	pop	{pc}		; (ldr pc, [sp], #4)
   14dbc:	mvn	r8, #0
   14dc0:	b	14da0 <__assert_fail@plt+0x38c0>
   14dc4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14dc8:	subs	r4, r2, #0
   14dcc:	strd	r6, [sp, #8]
   14dd0:	str	r8, [sp, #16]
   14dd4:	str	lr, [sp, #20]
   14dd8:	beq	14e44 <__assert_fail@plt+0x3964>
   14ddc:	mov	r7, r0
   14de0:	mov	r5, r1
   14de4:	mov	r6, #0
   14de8:	b	14e00 <__assert_fail@plt+0x3920>
   14dec:	cmp	r0, #0
   14df0:	beq	14e34 <__assert_fail@plt+0x3954>
   14df4:	subs	r4, r4, r0
   14df8:	add	r6, r6, r0
   14dfc:	beq	14e1c <__assert_fail@plt+0x393c>
   14e00:	mov	r1, r5
   14e04:	mov	r2, r4
   14e08:	mov	r0, r7
   14e0c:	bl	17250 <__assert_fail@plt+0x5d70>
   14e10:	cmn	r0, #1
   14e14:	add	r5, r5, r0
   14e18:	bne	14dec <__assert_fail@plt+0x390c>
   14e1c:	mov	r0, r6
   14e20:	ldrd	r4, [sp]
   14e24:	ldrd	r6, [sp, #8]
   14e28:	ldr	r8, [sp, #16]
   14e2c:	add	sp, sp, #20
   14e30:	pop	{pc}		; (ldr pc, [sp], #4)
   14e34:	bl	1139c <__errno_location@plt>
   14e38:	mov	r3, #28
   14e3c:	str	r3, [r0]
   14e40:	b	14e1c <__assert_fail@plt+0x393c>
   14e44:	mov	r6, r4
   14e48:	b	14e1c <__assert_fail@plt+0x393c>
   14e4c:	mov	r3, #0
   14e50:	strd	r4, [sp, #-16]!
   14e54:	mov	r4, r0
   14e58:	mov	r5, r1
   14e5c:	str	r6, [sp, #8]
   14e60:	add	r6, r2, #20
   14e64:	str	lr, [sp, #12]
   14e68:	strb	r3, [r2, #20]
   14e6c:	mov	r0, r4
   14e70:	mov	r1, r5
   14e74:	mov	r2, #10
   14e78:	mov	r3, #0
   14e7c:	bl	190dc <__assert_fail@plt+0x7bfc>
   14e80:	add	ip, r2, #48	; 0x30
   14e84:	mov	r0, r4
   14e88:	mov	r1, r5
   14e8c:	mov	r2, #10
   14e90:	mov	r3, #0
   14e94:	strb	ip, [r6, #-1]!
   14e98:	bl	190dc <__assert_fail@plt+0x7bfc>
   14e9c:	cmp	r5, #0
   14ea0:	mov	r5, r1
   14ea4:	cmpeq	r4, #9
   14ea8:	mov	r4, r0
   14eac:	bhi	14e6c <__assert_fail@plt+0x398c>
   14eb0:	mov	r0, r6
   14eb4:	ldrd	r4, [sp]
   14eb8:	ldr	r6, [sp, #8]
   14ebc:	add	sp, sp, #12
   14ec0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ec4:	strd	r4, [sp, #-16]!
   14ec8:	subs	r4, r0, #0
   14ecc:	str	r6, [sp, #8]
   14ed0:	str	lr, [sp, #12]
   14ed4:	beq	14f6c <__assert_fail@plt+0x3a8c>
   14ed8:	mov	r1, #47	; 0x2f
   14edc:	bl	11468 <strrchr@plt>
   14ee0:	subs	r5, r0, #0
   14ee4:	beq	14f44 <__assert_fail@plt+0x3a64>
   14ee8:	add	r6, r5, #1
   14eec:	sub	r3, r6, r4
   14ef0:	cmp	r3, #6
   14ef4:	ble	14f44 <__assert_fail@plt+0x3a64>
   14ef8:	movw	r1, #42356	; 0xa574
   14efc:	movt	r1, #1
   14f00:	mov	r2, #7
   14f04:	sub	r0, r5, #6
   14f08:	bl	114b0 <strncmp@plt>
   14f0c:	cmp	r0, #0
   14f10:	bne	14f44 <__assert_fail@plt+0x3a64>
   14f14:	movw	r1, #42364	; 0xa57c
   14f18:	movt	r1, #1
   14f1c:	mov	r2, #3
   14f20:	mov	r0, r6
   14f24:	bl	114b0 <strncmp@plt>
   14f28:	cmp	r0, #0
   14f2c:	movne	r4, r6
   14f30:	bne	14f44 <__assert_fail@plt+0x3a64>
   14f34:	add	r4, r5, #4
   14f38:	movw	r3, #45904	; 0xb350
   14f3c:	movt	r3, #2
   14f40:	str	r4, [r3]
   14f44:	movw	r2, #46380	; 0xb52c
   14f48:	movt	r2, #2
   14f4c:	ldr	r6, [sp, #8]
   14f50:	movw	r3, #45908	; 0xb354
   14f54:	movt	r3, #2
   14f58:	str	r4, [r2]
   14f5c:	str	r4, [r3]
   14f60:	ldrd	r4, [sp]
   14f64:	add	sp, sp, #12
   14f68:	pop	{pc}		; (ldr pc, [sp], #4)
   14f6c:	movw	r3, #45920	; 0xb360
   14f70:	movt	r3, #2
   14f74:	movw	r0, #42300	; 0xa53c
   14f78:	movt	r0, #1
   14f7c:	ldr	r3, [r3]
   14f80:	mov	r2, #55	; 0x37
   14f84:	mov	r1, #1
   14f88:	bl	1127c <fwrite@plt>
   14f8c:	bl	114bc <abort@plt>
   14f90:	strd	r4, [sp, #-16]!
   14f94:	mov	r4, #0
   14f98:	mov	r5, #0
   14f9c:	cmp	r1, #10
   14fa0:	str	r6, [sp, #8]
   14fa4:	strd	r4, [r0]
   14fa8:	strd	r4, [r0, #8]
   14fac:	str	lr, [sp, #12]
   14fb0:	strd	r4, [r0, #16]
   14fb4:	strd	r4, [r0, #24]
   14fb8:	strd	r4, [r0, #32]
   14fbc:	strd	r4, [r0, #40]	; 0x28
   14fc0:	beq	14fd8 <__assert_fail@plt+0x3af8>
   14fc4:	ldrd	r4, [sp]
   14fc8:	str	r1, [r0]
   14fcc:	ldr	r6, [sp, #8]
   14fd0:	add	sp, sp, #12
   14fd4:	pop	{pc}		; (ldr pc, [sp], #4)
   14fd8:	bl	114bc <abort@plt>
   14fdc:	mov	r2, #5
   14fe0:	strd	r4, [sp, #-16]!
   14fe4:	mov	r5, r0
   14fe8:	str	r6, [sp, #8]
   14fec:	mov	r6, r1
   14ff0:	mov	r1, r0
   14ff4:	mov	r0, #0
   14ff8:	str	lr, [sp, #12]
   14ffc:	bl	1121c <dcgettext@plt>
   15000:	cmp	r5, r0
   15004:	mov	r4, r0
   15008:	beq	15020 <__assert_fail@plt+0x3b40>
   1500c:	mov	r0, r4
   15010:	ldrd	r4, [sp]
   15014:	ldr	r6, [sp, #8]
   15018:	add	sp, sp, #12
   1501c:	pop	{pc}		; (ldr pc, [sp], #4)
   15020:	bl	18cd8 <__assert_fail@plt+0x77f8>
   15024:	ldrb	r3, [r0]
   15028:	bic	r3, r3, #32
   1502c:	cmp	r3, #85	; 0x55
   15030:	bne	15098 <__assert_fail@plt+0x3bb8>
   15034:	ldrb	r3, [r0, #1]
   15038:	bic	r3, r3, #32
   1503c:	cmp	r3, #84	; 0x54
   15040:	bne	15118 <__assert_fail@plt+0x3c38>
   15044:	ldrb	r3, [r0, #2]
   15048:	bic	r3, r3, #32
   1504c:	cmp	r3, #70	; 0x46
   15050:	bne	15118 <__assert_fail@plt+0x3c38>
   15054:	ldrb	r3, [r0, #3]
   15058:	cmp	r3, #45	; 0x2d
   1505c:	bne	15118 <__assert_fail@plt+0x3c38>
   15060:	ldrb	r3, [r0, #4]
   15064:	cmp	r3, #56	; 0x38
   15068:	bne	15118 <__assert_fail@plt+0x3c38>
   1506c:	ldrb	r3, [r0, #5]
   15070:	cmp	r3, #0
   15074:	bne	15118 <__assert_fail@plt+0x3c38>
   15078:	ldrb	r2, [r4]
   1507c:	movw	r3, #42452	; 0xa5d4
   15080:	movt	r3, #1
   15084:	movw	r4, #42464	; 0xa5e0
   15088:	movt	r4, #1
   1508c:	cmp	r2, #96	; 0x60
   15090:	movne	r4, r3
   15094:	b	1500c <__assert_fail@plt+0x3b2c>
   15098:	cmp	r3, #71	; 0x47
   1509c:	bne	15118 <__assert_fail@plt+0x3c38>
   150a0:	ldrb	r3, [r0, #1]
   150a4:	bic	r3, r3, #32
   150a8:	cmp	r3, #66	; 0x42
   150ac:	bne	15118 <__assert_fail@plt+0x3c38>
   150b0:	ldrb	r3, [r0, #2]
   150b4:	cmp	r3, #49	; 0x31
   150b8:	bne	15118 <__assert_fail@plt+0x3c38>
   150bc:	ldrb	r3, [r0, #3]
   150c0:	cmp	r3, #56	; 0x38
   150c4:	bne	15118 <__assert_fail@plt+0x3c38>
   150c8:	ldrb	r3, [r0, #4]
   150cc:	cmp	r3, #48	; 0x30
   150d0:	bne	15118 <__assert_fail@plt+0x3c38>
   150d4:	ldrb	r3, [r0, #5]
   150d8:	cmp	r3, #51	; 0x33
   150dc:	bne	15118 <__assert_fail@plt+0x3c38>
   150e0:	ldrb	r3, [r0, #6]
   150e4:	cmp	r3, #48	; 0x30
   150e8:	bne	15118 <__assert_fail@plt+0x3c38>
   150ec:	ldrb	r3, [r0, #7]
   150f0:	cmp	r3, #0
   150f4:	bne	15118 <__assert_fail@plt+0x3c38>
   150f8:	ldrb	r2, [r4]
   150fc:	movw	r3, #42456	; 0xa5d8
   15100:	movt	r3, #1
   15104:	movw	r4, #42460	; 0xa5dc
   15108:	movt	r4, #1
   1510c:	cmp	r2, #96	; 0x60
   15110:	movne	r4, r3
   15114:	b	1500c <__assert_fail@plt+0x3b2c>
   15118:	movw	r3, #42468	; 0xa5e4
   1511c:	movt	r3, #1
   15120:	cmp	r6, #9
   15124:	movw	r4, #38372	; 0x95e4
   15128:	movt	r4, #1
   1512c:	movne	r4, r3
   15130:	b	1500c <__assert_fail@plt+0x3b2c>
   15134:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15138:	strd	r6, [sp, #8]
   1513c:	strd	r8, [sp, #16]
   15140:	strd	sl, [sp, #24]
   15144:	mov	fp, r0
   15148:	mov	sl, r1
   1514c:	str	lr, [sp, #32]
   15150:	sub	sp, sp, #116	; 0x74
   15154:	ldr	r8, [sp, #152]	; 0x98
   15158:	str	r3, [sp, #28]
   1515c:	ldr	r3, [sp, #156]	; 0x9c
   15160:	str	r2, [sp, #32]
   15164:	and	r4, r3, #2
   15168:	ubfx	r3, r3, #1, #1
   1516c:	str	r3, [sp, #44]	; 0x2c
   15170:	bl	112a0 <__ctype_get_mb_cur_max@plt>
   15174:	str	r0, [sp, #64]	; 0x40
   15178:	cmp	r8, #10
   1517c:	ldrls	pc, [pc, r8, lsl #2]
   15180:	b	168f0 <__assert_fail@plt+0x5410>
   15184:	andeq	r5, r1, r8, lsl #11
   15188:	andeq	r5, r1, r4, lsr #12
   1518c:	andeq	r5, r1, r0, lsl #24
   15190:	andeq	r5, r1, r4, asr #12
   15194:	andeq	r5, r1, ip, ror #9
   15198:	andeq	r5, r1, r8, lsr r5
   1519c:			; <UNDEFINED> instruction: 0x000155b8
   151a0:	strdeq	r5, [r1], -r4
   151a4:			; <UNDEFINED> instruction: 0x000151b0
   151a8:			; <UNDEFINED> instruction: 0x000151b0
   151ac:			; <UNDEFINED> instruction: 0x000151b0
   151b0:	cmp	r8, #10
   151b4:	beq	151e0 <__assert_fail@plt+0x3d00>
   151b8:	mov	r1, r8
   151bc:	movw	r0, #42472	; 0xa5e8
   151c0:	movt	r0, #1
   151c4:	bl	14fdc <__assert_fail@plt+0x3afc>
   151c8:	mov	r1, r8
   151cc:	str	r0, [sp, #164]	; 0xa4
   151d0:	movw	r0, #42468	; 0xa5e4
   151d4:	movt	r0, #1
   151d8:	bl	14fdc <__assert_fail@plt+0x3afc>
   151dc:	str	r0, [sp, #168]	; 0xa8
   151e0:	cmp	r4, #0
   151e4:	movne	r4, #0
   151e8:	beq	165cc <__assert_fail@plt+0x50ec>
   151ec:	mov	r3, #1
   151f0:	mov	r5, #0
   151f4:	ldr	r0, [sp, #168]	; 0xa8
   151f8:	str	r3, [sp, #36]	; 0x24
   151fc:	str	r3, [sp, #40]	; 0x28
   15200:	str	r5, [sp, #68]	; 0x44
   15204:	bl	11354 <strlen@plt>
   15208:	ldr	r3, [sp, #168]	; 0xa8
   1520c:	str	r5, [sp, #48]	; 0x30
   15210:	str	r0, [sp, #56]	; 0x38
   15214:	str	r3, [sp, #60]	; 0x3c
   15218:	str	r5, [sp, #72]	; 0x48
   1521c:	str	r8, [sp, #152]	; 0x98
   15220:	mov	r8, fp
   15224:	mov	r9, #0
   15228:	ldr	fp, [sp, #152]	; 0x98
   1522c:	ldr	r3, [sp, #28]
   15230:	cmn	r3, #1
   15234:	beq	15794 <__assert_fail@plt+0x42b4>
   15238:	ldr	r3, [sp, #28]
   1523c:	subs	r6, r3, r9
   15240:	movne	r6, #1
   15244:	cmp	r6, #0
   15248:	beq	157ac <__assert_fail@plt+0x42cc>
   1524c:	ldr	r0, [sp, #32]
   15250:	ldr	r7, [sp, #40]	; 0x28
   15254:	add	r3, r0, r9
   15258:	cmp	fp, #2
   1525c:	moveq	r7, #0
   15260:	andne	r7, r7, #1
   15264:	str	r3, [sp, #52]	; 0x34
   15268:	cmp	r7, #0
   1526c:	beq	15c48 <__assert_fail@plt+0x4768>
   15270:	ldr	r2, [sp, #56]	; 0x38
   15274:	cmp	r2, #0
   15278:	beq	15ee4 <__assert_fail@plt+0x4a04>
   1527c:	ldr	r1, [sp, #28]
   15280:	cmp	r2, #1
   15284:	mov	r3, r2
   15288:	movls	r3, #0
   1528c:	movhi	r3, #1
   15290:	add	r5, r9, r2
   15294:	cmn	r1, #1
   15298:	movne	r3, #0
   1529c:	cmp	r3, #0
   152a0:	beq	152ac <__assert_fail@plt+0x3dcc>
   152a4:	bl	11354 <strlen@plt>
   152a8:	str	r0, [sp, #28]
   152ac:	ldr	r3, [sp, #28]
   152b0:	cmp	r5, r3
   152b4:	bhi	15ee4 <__assert_fail@plt+0x4a04>
   152b8:	ldr	r0, [sp, #52]	; 0x34
   152bc:	ldr	r2, [sp, #56]	; 0x38
   152c0:	ldr	r1, [sp, #60]	; 0x3c
   152c4:	bl	11204 <memcmp@plt>
   152c8:	cmp	r0, #0
   152cc:	bne	15ee4 <__assert_fail@plt+0x4a04>
   152d0:	ldr	r3, [sp, #44]	; 0x2c
   152d4:	cmp	r3, #0
   152d8:	bne	16814 <__assert_fail@plt+0x5334>
   152dc:	ldr	r3, [sp, #52]	; 0x34
   152e0:	ldrb	r5, [r3]
   152e4:	cmp	r5, #126	; 0x7e
   152e8:	ldrls	pc, [pc, r5, lsl #2]
   152ec:	b	15ba4 <__assert_fail@plt+0x46c4>
   152f0:	andeq	r5, r1, r8, lsr #21
   152f4:	andeq	r5, r1, r4, lsr #23
   152f8:	andeq	r5, r1, r4, lsr #23
   152fc:	andeq	r5, r1, r4, lsr #23
   15300:	andeq	r5, r1, r4, lsr #23
   15304:	andeq	r5, r1, r4, lsr #23
   15308:	andeq	r5, r1, r4, lsr #23
   1530c:	andeq	r5, r1, ip, ror sl
   15310:	andeq	r5, r1, r4, ror sl
   15314:			; <UNDEFINED> instruction: 0x000159bc
   15318:	andeq	r5, r1, r8, ror #20
   1531c:			; <UNDEFINED> instruction: 0x000159b4
   15320:	andeq	r5, r1, r4, asr #20
   15324:	muleq	r1, r0, sl
   15328:	andeq	r5, r1, r4, lsr #23
   1532c:	andeq	r5, r1, r4, lsr #23
   15330:	andeq	r5, r1, r4, lsr #23
   15334:	andeq	r5, r1, r4, lsr #23
   15338:	andeq	r5, r1, r4, lsr #23
   1533c:	andeq	r5, r1, r4, lsr #23
   15340:	andeq	r5, r1, r4, lsr #23
   15344:	andeq	r5, r1, r4, lsr #23
   15348:	andeq	r5, r1, r4, lsr #23
   1534c:	andeq	r5, r1, r4, lsr #23
   15350:	andeq	r5, r1, r4, lsr #23
   15354:	andeq	r5, r1, r4, lsr #23
   15358:	andeq	r5, r1, r4, lsr #23
   1535c:	andeq	r5, r1, r4, lsr #23
   15360:	andeq	r5, r1, r4, lsr #23
   15364:	andeq	r5, r1, r4, lsr #23
   15368:	andeq	r5, r1, r4, lsr #23
   1536c:	andeq	r5, r1, r4, lsr #23
   15370:	andeq	r5, r1, r0, lsl #23
   15374:	andeq	r5, r1, r8, lsl #21
   15378:	andeq	r5, r1, r8, lsl #21
   1537c:	andeq	r5, r1, r4, ror #22
   15380:	andeq	r5, r1, r8, lsl #21
   15384:	muleq	r1, r8, fp
   15388:	andeq	r5, r1, r8, lsl #21
   1538c:	andeq	r5, r1, r4, ror #17
   15390:	andeq	r5, r1, r8, lsl #21
   15394:	andeq	r5, r1, r8, lsl #21
   15398:	andeq	r5, r1, r8, lsl #21
   1539c:	muleq	r1, r8, fp
   153a0:	muleq	r1, r8, fp
   153a4:	muleq	r1, r8, fp
   153a8:	muleq	r1, r8, fp
   153ac:	muleq	r1, r8, fp
   153b0:	muleq	r1, r8, fp
   153b4:	muleq	r1, r8, fp
   153b8:	muleq	r1, r8, fp
   153bc:	muleq	r1, r8, fp
   153c0:	muleq	r1, r8, fp
   153c4:	muleq	r1, r8, fp
   153c8:	muleq	r1, r8, fp
   153cc:	muleq	r1, r8, fp
   153d0:	muleq	r1, r8, fp
   153d4:	muleq	r1, r8, fp
   153d8:	muleq	r1, r8, fp
   153dc:	andeq	r5, r1, r8, lsl #21
   153e0:	andeq	r5, r1, r8, lsl #21
   153e4:	andeq	r5, r1, r8, lsl #21
   153e8:	andeq	r5, r1, r8, lsl #21
   153ec:			; <UNDEFINED> instruction: 0x000158b8
   153f0:	andeq	r5, r1, r4, lsr #23
   153f4:	muleq	r1, r8, fp
   153f8:	muleq	r1, r8, fp
   153fc:	muleq	r1, r8, fp
   15400:	muleq	r1, r8, fp
   15404:	muleq	r1, r8, fp
   15408:	muleq	r1, r8, fp
   1540c:	muleq	r1, r8, fp
   15410:	muleq	r1, r8, fp
   15414:	muleq	r1, r8, fp
   15418:	muleq	r1, r8, fp
   1541c:	muleq	r1, r8, fp
   15420:	muleq	r1, r8, fp
   15424:	muleq	r1, r8, fp
   15428:	muleq	r1, r8, fp
   1542c:	muleq	r1, r8, fp
   15430:	muleq	r1, r8, fp
   15434:	muleq	r1, r8, fp
   15438:	muleq	r1, r8, fp
   1543c:	muleq	r1, r8, fp
   15440:	muleq	r1, r8, fp
   15444:	muleq	r1, r8, fp
   15448:	muleq	r1, r8, fp
   1544c:	muleq	r1, r8, fp
   15450:	muleq	r1, r8, fp
   15454:	muleq	r1, r8, fp
   15458:	muleq	r1, r8, fp
   1545c:	andeq	r5, r1, r8, lsl #21
   15460:	andeq	r5, r1, r0, ror #16
   15464:	muleq	r1, r8, fp
   15468:	andeq	r5, r1, r8, lsl #21
   1546c:	muleq	r1, r8, fp
   15470:	andeq	r5, r1, r8, lsl #21
   15474:	muleq	r1, r8, fp
   15478:	muleq	r1, r8, fp
   1547c:	muleq	r1, r8, fp
   15480:	muleq	r1, r8, fp
   15484:	muleq	r1, r8, fp
   15488:	muleq	r1, r8, fp
   1548c:	muleq	r1, r8, fp
   15490:	muleq	r1, r8, fp
   15494:	muleq	r1, r8, fp
   15498:	muleq	r1, r8, fp
   1549c:	muleq	r1, r8, fp
   154a0:	muleq	r1, r8, fp
   154a4:	muleq	r1, r8, fp
   154a8:	muleq	r1, r8, fp
   154ac:	muleq	r1, r8, fp
   154b0:	muleq	r1, r8, fp
   154b4:	muleq	r1, r8, fp
   154b8:	muleq	r1, r8, fp
   154bc:	muleq	r1, r8, fp
   154c0:	muleq	r1, r8, fp
   154c4:	muleq	r1, r8, fp
   154c8:	muleq	r1, r8, fp
   154cc:	muleq	r1, r8, fp
   154d0:	muleq	r1, r8, fp
   154d4:	muleq	r1, r8, fp
   154d8:	muleq	r1, r8, fp
   154dc:	andeq	r5, r1, r4, lsl #13
   154e0:	andeq	r5, r1, r8, lsl #21
   154e4:	andeq	r5, r1, r4, lsl #13
   154e8:	andeq	r5, r1, r4, ror #22
   154ec:	cmp	r4, #0
   154f0:	moveq	r3, #1
   154f4:	streq	r3, [sp, #40]	; 0x28
   154f8:	beq	15c0c <__assert_fail@plt+0x472c>
   154fc:	mov	r3, #0
   15500:	mov	r2, #1
   15504:	mov	r4, r3
   15508:	str	r2, [sp, #36]	; 0x24
   1550c:	str	r2, [sp, #44]	; 0x2c
   15510:	str	r2, [sp, #56]	; 0x38
   15514:	str	r3, [sp, #68]	; 0x44
   15518:	movw	r3, #42468	; 0xa5e4
   1551c:	movt	r3, #1
   15520:	str	r4, [sp, #40]	; 0x28
   15524:	mov	r8, #2
   15528:	str	r4, [sp, #48]	; 0x30
   1552c:	str	r3, [sp, #60]	; 0x3c
   15530:	str	r4, [sp, #72]	; 0x48
   15534:	b	1521c <__assert_fail@plt+0x3d3c>
   15538:	cmp	r4, #0
   1553c:	bne	16788 <__assert_fail@plt+0x52a8>
   15540:	cmp	sl, #0
   15544:	beq	16548 <__assert_fail@plt+0x5068>
   15548:	mov	r3, #34	; 0x22
   1554c:	mov	r1, r4
   15550:	mov	r2, #1
   15554:	strb	r3, [fp]
   15558:	movw	r3, #38372	; 0x95e4
   1555c:	movt	r3, #1
   15560:	mov	r4, r2
   15564:	str	r2, [sp, #36]	; 0x24
   15568:	str	r2, [sp, #40]	; 0x28
   1556c:	str	r1, [sp, #44]	; 0x2c
   15570:	str	r1, [sp, #48]	; 0x30
   15574:	str	r2, [sp, #56]	; 0x38
   15578:	str	r3, [sp, #60]	; 0x3c
   1557c:	str	r1, [sp, #68]	; 0x44
   15580:	str	r1, [sp, #72]	; 0x48
   15584:	b	1521c <__assert_fail@plt+0x3d3c>
   15588:	mov	r3, #0
   1558c:	mov	r4, r8
   15590:	str	r3, [sp, #40]	; 0x28
   15594:	str	r3, [sp, #44]	; 0x2c
   15598:	str	r3, [sp, #48]	; 0x30
   1559c:	str	r8, [sp, #56]	; 0x38
   155a0:	str	r3, [sp, #60]	; 0x3c
   155a4:	str	r3, [sp, #68]	; 0x44
   155a8:	mov	r3, #1
   155ac:	str	r3, [sp, #36]	; 0x24
   155b0:	str	r8, [sp, #72]	; 0x48
   155b4:	b	1521c <__assert_fail@plt+0x3d3c>
   155b8:	mov	r3, #1
   155bc:	mov	r2, #0
   155c0:	mov	r4, r2
   155c4:	mov	r8, #5
   155c8:	str	r3, [sp, #36]	; 0x24
   155cc:	str	r3, [sp, #40]	; 0x28
   155d0:	str	r3, [sp, #44]	; 0x2c
   155d4:	str	r2, [sp, #48]	; 0x30
   155d8:	str	r3, [sp, #56]	; 0x38
   155dc:	movw	r3, #38372	; 0x95e4
   155e0:	movt	r3, #1
   155e4:	str	r3, [sp, #60]	; 0x3c
   155e8:	str	r2, [sp, #68]	; 0x44
   155ec:	str	r2, [sp, #72]	; 0x48
   155f0:	b	1521c <__assert_fail@plt+0x3d3c>
   155f4:	mov	r3, #0
   155f8:	mov	r2, #1
   155fc:	mov	r4, r3
   15600:	str	r2, [sp, #36]	; 0x24
   15604:	str	r2, [sp, #40]	; 0x28
   15608:	str	r3, [sp, #44]	; 0x2c
   1560c:	str	r3, [sp, #48]	; 0x30
   15610:	str	r3, [sp, #56]	; 0x38
   15614:	str	r3, [sp, #60]	; 0x3c
   15618:	str	r3, [sp, #68]	; 0x44
   1561c:	str	r3, [sp, #72]	; 0x48
   15620:	b	1521c <__assert_fail@plt+0x3d3c>
   15624:	mov	r2, #1
   15628:	mov	r3, #0
   1562c:	mov	r4, r3
   15630:	str	r2, [sp, #36]	; 0x24
   15634:	str	r2, [sp, #44]	; 0x2c
   15638:	str	r8, [sp, #56]	; 0x38
   1563c:	str	r3, [sp, #68]	; 0x44
   15640:	b	15518 <__assert_fail@plt+0x4038>
   15644:	mov	r3, #1
   15648:	mov	r2, #0
   1564c:	mov	r4, r2
   15650:	mov	r8, #2
   15654:	str	r3, [sp, #36]	; 0x24
   15658:	str	r3, [sp, #40]	; 0x28
   1565c:	str	r3, [sp, #44]	; 0x2c
   15660:	str	r2, [sp, #48]	; 0x30
   15664:	str	r3, [sp, #56]	; 0x38
   15668:	movw	r3, #42468	; 0xa5e4
   1566c:	movt	r3, #1
   15670:	str	r3, [sp, #60]	; 0x3c
   15674:	str	r2, [sp, #68]	; 0x44
   15678:	str	r2, [sp, #72]	; 0x48
   1567c:	b	1521c <__assert_fail@plt+0x3d3c>
   15680:	mov	r7, #0
   15684:	ldr	r3, [sp, #28]
   15688:	cmn	r3, #1
   1568c:	beq	16164 <__assert_fail@plt+0x4c84>
   15690:	ldr	r3, [sp, #28]
   15694:	subs	r2, r3, #1
   15698:	movne	r2, #1
   1569c:	sub	r3, fp, #2
   156a0:	cmp	r2, #0
   156a4:	clz	r3, r3
   156a8:	lsr	r3, r3, #5
   156ac:	bne	156b8 <__assert_fail@plt+0x41d8>
   156b0:	cmp	r9, #0
   156b4:	beq	15ec4 <__assert_fail@plt+0x49e4>
   156b8:	mov	r6, #0
   156bc:	ldr	r2, [sp, #40]	; 0x28
   156c0:	eor	r2, r2, #1
   156c4:	orrs	r3, r3, r2
   156c8:	bne	158a0 <__assert_fail@plt+0x43c0>
   156cc:	ldr	r2, [sp, #160]	; 0xa0
   156d0:	cmp	r2, #0
   156d4:	beq	156f4 <__assert_fail@plt+0x4214>
   156d8:	ldr	r0, [sp, #160]	; 0xa0
   156dc:	ubfx	r1, r5, #5, #8
   156e0:	and	r2, r5, #31
   156e4:	ldr	r1, [r0, r1, lsl #2]
   156e8:	lsr	r2, r1, r2
   156ec:	tst	r2, #1
   156f0:	bne	156fc <__assert_fail@plt+0x421c>
   156f4:	cmp	r7, #0
   156f8:	beq	1596c <__assert_fail@plt+0x448c>
   156fc:	ldr	r2, [sp, #44]	; 0x2c
   15700:	sub	r3, fp, #2
   15704:	clz	r3, r3
   15708:	lsr	r3, r3, #5
   1570c:	cmp	r2, #0
   15710:	bne	164b8 <__assert_fail@plt+0x4fd8>
   15714:	ldr	r2, [sp, #48]	; 0x30
   15718:	eor	r2, r2, #1
   1571c:	ands	r3, r3, r2
   15720:	beq	15758 <__assert_fail@plt+0x4278>
   15724:	cmp	sl, r4
   15728:	str	r3, [sp, #48]	; 0x30
   1572c:	movhi	r2, #39	; 0x27
   15730:	strbhi	r2, [r8, r4]
   15734:	add	r2, r4, #1
   15738:	cmp	sl, r2
   1573c:	movhi	r1, #36	; 0x24
   15740:	strbhi	r1, [r8, r2]
   15744:	add	r2, r4, #2
   15748:	add	r4, r4, #3
   1574c:	cmp	sl, r2
   15750:	movhi	r1, #39	; 0x27
   15754:	strbhi	r1, [r8, r2]
   15758:	cmp	r4, sl
   1575c:	add	r9, r9, #1
   15760:	movcc	r3, #92	; 0x5c
   15764:	strbcc	r3, [r8, r4]
   15768:	add	r4, r4, #1
   1576c:	cmp	r4, sl
   15770:	ldr	r3, [sp, #36]	; 0x24
   15774:	strbcc	r5, [r8, r4]
   15778:	cmp	r6, #0
   1577c:	add	r4, r4, #1
   15780:	moveq	r3, #0
   15784:	str	r3, [sp, #36]	; 0x24
   15788:	ldr	r3, [sp, #28]
   1578c:	cmn	r3, #1
   15790:	bne	15238 <__assert_fail@plt+0x3d58>
   15794:	ldr	r3, [sp, #32]
   15798:	ldrb	r6, [r3, r9]
   1579c:	adds	r6, r6, #0
   157a0:	movne	r6, #1
   157a4:	cmp	r6, #0
   157a8:	bne	1524c <__assert_fail@plt+0x3d6c>
   157ac:	str	fp, [sp, #152]	; 0x98
   157b0:	mov	fp, r8
   157b4:	cmp	r4, #0
   157b8:	ldr	r1, [sp, #44]	; 0x2c
   157bc:	movne	r3, #0
   157c0:	ldr	r8, [sp, #152]	; 0x98
   157c4:	sub	r2, r8, #2
   157c8:	clz	r2, r2
   157cc:	lsr	r2, r2, #5
   157d0:	andeq	r3, r2, r1
   157d4:	cmp	r3, #0
   157d8:	bne	16894 <__assert_fail@plt+0x53b4>
   157dc:	eor	r3, r1, #1
   157e0:	ands	r2, r2, r3
   157e4:	beq	167c0 <__assert_fail@plt+0x52e0>
   157e8:	ldr	r3, [sp, #68]	; 0x44
   157ec:	cmp	r3, #0
   157f0:	beq	167c4 <__assert_fail@plt+0x52e4>
   157f4:	ldr	r3, [sp, #36]	; 0x24
   157f8:	cmp	r3, #0
   157fc:	bne	16850 <__assert_fail@plt+0x5370>
   15800:	ldr	r3, [sp, #72]	; 0x48
   15804:	adds	r3, r3, #0
   15808:	movne	r3, #1
   1580c:	cmp	sl, #0
   15810:	movne	r3, #0
   15814:	cmp	r3, #0
   15818:	ldreq	r2, [sp, #68]	; 0x44
   1581c:	beq	167c4 <__assert_fail@plt+0x52e4>
   15820:	ldr	r2, [sp, #72]	; 0x48
   15824:	str	r3, [sp, #68]	; 0x44
   15828:	movw	r3, #42468	; 0xa5e4
   1582c:	movt	r3, #1
   15830:	mov	r1, #39	; 0x27
   15834:	mov	r4, #1
   15838:	ldr	sl, [sp, #72]	; 0x48
   1583c:	mov	r8, #2
   15840:	str	r3, [sp, #60]	; 0x3c
   15844:	mov	r3, #0
   15848:	strb	r1, [fp]
   1584c:	str	r3, [sp, #44]	; 0x2c
   15850:	str	r4, [sp, #56]	; 0x38
   15854:	str	r2, [sp, #72]	; 0x48
   15858:	b	1521c <__assert_fail@plt+0x3d3c>
   1585c:	mov	r7, #0
   15860:	cmp	fp, #2
   15864:	beq	16144 <__assert_fail@plt+0x4c64>
   15868:	ldr	r2, [sp, #40]	; 0x28
   1586c:	ldr	r3, [sp, #56]	; 0x38
   15870:	ldr	r1, [sp, #44]	; 0x2c
   15874:	cmp	r3, #0
   15878:	moveq	r3, #0
   1587c:	andne	r3, r2, r1
   15880:	cmp	r3, #0
   15884:	moveq	r5, #92	; 0x5c
   15888:	moveq	r3, r5
   1588c:	bne	16150 <__assert_fail@plt+0x4c70>
   15890:	ldr	r2, [sp, #40]	; 0x28
   15894:	cmp	r2, #0
   15898:	bne	1658c <__assert_fail@plt+0x50ac>
   1589c:	mov	r6, #0
   158a0:	ldr	r3, [sp, #44]	; 0x2c
   158a4:	cmp	r3, #0
   158a8:	beq	1613c <__assert_fail@plt+0x4c5c>
   158ac:	mov	r3, #0
   158b0:	b	156cc <__assert_fail@plt+0x41ec>
   158b4:	mov	r7, #0
   158b8:	cmp	fp, #2
   158bc:	beq	161b4 <__assert_fail@plt+0x4cd4>
   158c0:	cmp	fp, #5
   158c4:	beq	16178 <__assert_fail@plt+0x4c98>
   158c8:	sub	r3, fp, #2
   158cc:	mov	r6, #0
   158d0:	clz	r3, r3
   158d4:	mov	r5, #63	; 0x3f
   158d8:	lsr	r3, r3, #5
   158dc:	b	156bc <__assert_fail@plt+0x41dc>
   158e0:	mov	r7, #0
   158e4:	cmp	fp, #2
   158e8:	movne	r3, #0
   158ec:	movne	r5, #39	; 0x27
   158f0:	strne	r6, [sp, #68]	; 0x44
   158f4:	bne	156bc <__assert_fail@plt+0x41dc>
   158f8:	ldr	r3, [sp, #44]	; 0x2c
   158fc:	cmp	r3, #0
   15900:	bne	165bc <__assert_fail@plt+0x50dc>
   15904:	ldr	r3, [sp, #72]	; 0x48
   15908:	cmp	sl, #0
   1590c:	clz	r3, r3
   15910:	lsr	r3, r3, #5
   15914:	moveq	r3, #0
   15918:	cmp	r3, #0
   1591c:	bne	164e8 <__assert_fail@plt+0x5008>
   15920:	cmp	sl, r4
   15924:	movhi	r3, #39	; 0x27
   15928:	strbhi	r3, [r8, r4]
   1592c:	add	r3, r4, #1
   15930:	cmp	sl, r3
   15934:	movhi	r2, #92	; 0x5c
   15938:	strbhi	r2, [r8, r3]
   1593c:	add	r3, r4, #2
   15940:	cmp	sl, r3
   15944:	bls	15950 <__assert_fail@plt+0x4470>
   15948:	mov	r2, #39	; 0x27
   1594c:	strb	r2, [r8, r3]
   15950:	mov	r3, #0
   15954:	cmp	r7, #0
   15958:	add	r4, r4, #3
   1595c:	mov	r5, #39	; 0x27
   15960:	str	r3, [sp, #48]	; 0x30
   15964:	str	r6, [sp, #68]	; 0x44
   15968:	bne	156fc <__assert_fail@plt+0x421c>
   1596c:	ldr	r2, [sp, #48]	; 0x30
   15970:	eor	r3, r3, #1
   15974:	add	r9, r9, #1
   15978:	and	r3, r3, r2
   1597c:	uxtb	r3, r3
   15980:	cmp	r3, #0
   15984:	beq	1576c <__assert_fail@plt+0x428c>
   15988:	cmp	sl, r4
   1598c:	movhi	r3, #39	; 0x27
   15990:	strbhi	r3, [r8, r4]
   15994:	add	r3, r4, #1
   15998:	add	r4, r4, #2
   1599c:	cmp	sl, r3
   159a0:	movhi	r2, #39	; 0x27
   159a4:	strbhi	r2, [r8, r3]
   159a8:	mov	r3, #0
   159ac:	str	r3, [sp, #48]	; 0x30
   159b0:	b	1576c <__assert_fail@plt+0x428c>
   159b4:	mov	r3, #118	; 0x76
   159b8:	b	15890 <__assert_fail@plt+0x43b0>
   159bc:	mov	r3, #116	; 0x74
   159c0:	ldr	r2, [sp, #44]	; 0x2c
   159c4:	cmp	fp, #2
   159c8:	movne	r2, #0
   159cc:	andeq	r2, r2, #1
   159d0:	cmp	r2, #0
   159d4:	beq	15890 <__assert_fail@plt+0x43b0>
   159d8:	mov	fp, r8
   159dc:	mov	r8, #2
   159e0:	ldr	r3, [sp, #40]	; 0x28
   159e4:	cmp	r3, #0
   159e8:	movne	r8, #4
   159ec:	mov	lr, #0
   159f0:	mov	r0, fp
   159f4:	ldr	r2, [sp, #32]
   159f8:	ldr	r3, [sp, #156]	; 0x9c
   159fc:	ldr	r1, [sp, #164]	; 0xa4
   15a00:	bic	ip, r3, #2
   15a04:	ldr	r3, [sp, #28]
   15a08:	stm	sp, {r8, ip, lr}
   15a0c:	ldr	ip, [sp, #168]	; 0xa8
   15a10:	str	r1, [sp, #12]
   15a14:	mov	r1, sl
   15a18:	str	ip, [sp, #16]
   15a1c:	bl	15134 <__assert_fail@plt+0x3c54>
   15a20:	mov	r4, r0
   15a24:	mov	r0, r4
   15a28:	add	sp, sp, #116	; 0x74
   15a2c:	ldrd	r4, [sp]
   15a30:	ldrd	r6, [sp, #8]
   15a34:	ldrd	r8, [sp, #16]
   15a38:	ldrd	sl, [sp, #24]
   15a3c:	add	sp, sp, #32
   15a40:	pop	{pc}		; (ldr pc, [sp], #4)
   15a44:	mov	r5, #102	; 0x66
   15a48:	ldr	r2, [sp, #44]	; 0x2c
   15a4c:	sub	r3, fp, #2
   15a50:	clz	r3, r3
   15a54:	lsr	r3, r3, #5
   15a58:	cmp	r2, #0
   15a5c:	bne	164b8 <__assert_fail@plt+0x4fd8>
   15a60:	mov	r6, r2
   15a64:	b	15758 <__assert_fail@plt+0x4278>
   15a68:	mov	r5, #110	; 0x6e
   15a6c:	mov	r6, #0
   15a70:	b	156fc <__assert_fail@plt+0x421c>
   15a74:	mov	r5, #98	; 0x62
   15a78:	b	15a48 <__assert_fail@plt+0x4568>
   15a7c:	mov	r5, #97	; 0x61
   15a80:	b	15a48 <__assert_fail@plt+0x4568>
   15a84:	mov	r7, #0
   15a88:	mov	r6, #0
   15a8c:	b	158ac <__assert_fail@plt+0x43cc>
   15a90:	mov	r5, #114	; 0x72
   15a94:	b	15a6c <__assert_fail@plt+0x458c>
   15a98:	ldr	r3, [sp, #44]	; 0x2c
   15a9c:	cmp	r3, #0
   15aa0:	bne	16830 <__assert_fail@plt+0x5350>
   15aa4:	mov	r7, r3
   15aa8:	ldr	r3, [sp, #48]	; 0x30
   15aac:	sub	r2, fp, #2
   15ab0:	clz	r2, r2
   15ab4:	lsr	r2, r2, #5
   15ab8:	eor	r3, r3, #1
   15abc:	ands	r3, r2, r3
   15ac0:	beq	164d4 <__assert_fail@plt+0x4ff4>
   15ac4:	cmp	sl, r4
   15ac8:	movhi	r1, #39	; 0x27
   15acc:	strbhi	r1, [r8, r4]
   15ad0:	add	r1, r4, #1
   15ad4:	cmp	sl, r1
   15ad8:	movhi	r0, #36	; 0x24
   15adc:	strbhi	r0, [r8, r1]
   15ae0:	add	r1, r4, #2
   15ae4:	cmp	sl, r1
   15ae8:	movhi	r0, #39	; 0x27
   15aec:	strbhi	r0, [r8, r1]
   15af0:	add	r1, r4, #3
   15af4:	cmp	sl, r1
   15af8:	bls	1652c <__assert_fail@plt+0x504c>
   15afc:	mov	r4, r1
   15b00:	mov	r1, #92	; 0x5c
   15b04:	mov	r0, r4
   15b08:	str	r3, [sp, #48]	; 0x30
   15b0c:	strb	r1, [r8, r4]
   15b10:	cmp	fp, #2
   15b14:	add	r4, r4, #1
   15b18:	beq	1657c <__assert_fail@plt+0x509c>
   15b1c:	ldr	r1, [sp, #28]
   15b20:	add	r3, r9, #1
   15b24:	cmp	r3, r1
   15b28:	bcs	15b40 <__assert_fail@plt+0x4660>
   15b2c:	ldr	r1, [sp, #32]
   15b30:	ldrb	r3, [r1, r3]
   15b34:	sub	r3, r3, #48	; 0x30
   15b38:	cmp	r3, #9
   15b3c:	bls	16594 <__assert_fail@plt+0x50b4>
   15b40:	mov	r5, #48	; 0x30
   15b44:	ldr	r3, [sp, #40]	; 0x28
   15b48:	eor	r3, r3, #1
   15b4c:	orrs	r2, r2, r3
   15b50:	mov	r3, r6
   15b54:	moveq	r6, r2
   15b58:	beq	156cc <__assert_fail@plt+0x41ec>
   15b5c:	mov	r6, #0
   15b60:	b	156f4 <__assert_fail@plt+0x4214>
   15b64:	cmp	r9, #0
   15b68:	mov	r2, r7
   15b6c:	bne	1610c <__assert_fail@plt+0x4c2c>
   15b70:	mov	r6, r7
   15b74:	mov	r3, r9
   15b78:	mov	r7, r2
   15b7c:	b	156bc <__assert_fail@plt+0x41dc>
   15b80:	mov	r2, r7
   15b84:	mov	r6, r7
   15b88:	mov	r3, #0
   15b8c:	mov	r7, r2
   15b90:	mov	r5, #32
   15b94:	b	156bc <__assert_fail@plt+0x41dc>
   15b98:	mov	r6, r7
   15b9c:	b	158ac <__assert_fail@plt+0x43cc>
   15ba0:	mov	r7, #0
   15ba4:	ldr	r3, [sp, #64]	; 0x40
   15ba8:	cmp	r3, #1
   15bac:	bne	161cc <__assert_fail@plt+0x4cec>
   15bb0:	bl	1133c <__ctype_b_loc@plt>
   15bb4:	ldr	r2, [r0]
   15bb8:	sxth	r3, r5
   15bbc:	lsl	r3, r3, #1
   15bc0:	ldr	r1, [sp, #64]	; 0x40
   15bc4:	ldrh	r3, [r2, r3]
   15bc8:	mov	ip, r1
   15bcc:	and	r3, r3, #16384	; 0x4000
   15bd0:	cmp	r3, #0
   15bd4:	ldr	r3, [sp, #40]	; 0x28
   15bd8:	movne	r6, #1
   15bdc:	moveq	r6, #0
   15be0:	movne	r2, #0
   15be4:	andeq	r2, r3, #1
   15be8:	cmp	r2, #0
   15bec:	bne	16514 <__assert_fail@plt+0x5034>
   15bf0:	sub	r3, fp, #2
   15bf4:	clz	r3, r3
   15bf8:	lsr	r3, r3, #5
   15bfc:	b	156bc <__assert_fail@plt+0x41dc>
   15c00:	cmp	r4, #0
   15c04:	bne	168a4 <__assert_fail@plt+0x53c4>
   15c08:	str	r4, [sp, #40]	; 0x28
   15c0c:	cmp	sl, #0
   15c10:	bne	168d4 <__assert_fail@plt+0x53f4>
   15c14:	mov	r3, #1
   15c18:	movw	r2, #42468	; 0xa5e4
   15c1c:	movt	r2, #1
   15c20:	mov	r4, r3
   15c24:	mov	r8, #2
   15c28:	str	r3, [sp, #36]	; 0x24
   15c2c:	str	sl, [sp, #44]	; 0x2c
   15c30:	str	sl, [sp, #48]	; 0x30
   15c34:	str	r3, [sp, #56]	; 0x38
   15c38:	str	r2, [sp, #60]	; 0x3c
   15c3c:	str	sl, [sp, #68]	; 0x44
   15c40:	str	sl, [sp, #72]	; 0x48
   15c44:	b	1521c <__assert_fail@plt+0x3d3c>
   15c48:	ldr	r3, [sp, #32]
   15c4c:	ldrb	r5, [r3, r9]
   15c50:	cmp	r5, #126	; 0x7e
   15c54:	ldrls	pc, [pc, r5, lsl #2]
   15c58:	b	15ba4 <__assert_fail@plt+0x46c4>
   15c5c:	andeq	r5, r1, r0, lsl #29
   15c60:	andeq	r5, r1, r4, lsr #23
   15c64:	andeq	r5, r1, r4, lsr #23
   15c68:	andeq	r5, r1, r4, lsr #23
   15c6c:	andeq	r5, r1, r4, lsr #23
   15c70:	andeq	r5, r1, r4, lsr #23
   15c74:	andeq	r5, r1, r4, lsr #23
   15c78:	andeq	r5, r1, r8, ror lr
   15c7c:	andeq	r5, r1, r0, ror lr
   15c80:			; <UNDEFINED> instruction: 0x000159bc
   15c84:	andeq	r5, r1, r8, ror #28
   15c88:			; <UNDEFINED> instruction: 0x000159b4
   15c8c:	andeq	r5, r1, r0, ror #28
   15c90:	andeq	r5, r1, r8, asr lr
   15c94:	andeq	r5, r1, r4, lsr #23
   15c98:	andeq	r5, r1, r4, lsr #23
   15c9c:	andeq	r5, r1, r4, lsr #23
   15ca0:	andeq	r5, r1, r4, lsr #23
   15ca4:	andeq	r5, r1, r4, lsr #23
   15ca8:	andeq	r5, r1, r4, lsr #23
   15cac:	andeq	r5, r1, r4, lsr #23
   15cb0:	andeq	r5, r1, r4, lsr #23
   15cb4:	andeq	r5, r1, r4, lsr #23
   15cb8:	andeq	r5, r1, r4, lsr #23
   15cbc:	andeq	r5, r1, r4, lsr #23
   15cc0:	andeq	r5, r1, r4, lsr #23
   15cc4:	andeq	r5, r1, r4, lsr #23
   15cc8:	andeq	r5, r1, r4, lsr #23
   15ccc:	andeq	r5, r1, r4, lsr #23
   15cd0:	andeq	r5, r1, r4, lsr #23
   15cd4:	andeq	r5, r1, r4, lsr #23
   15cd8:	andeq	r5, r1, r4, lsr #23
   15cdc:	ldrdeq	r5, [r1], -r4
   15ce0:			; <UNDEFINED> instruction: 0x00015eb4
   15ce4:			; <UNDEFINED> instruction: 0x00015eb4
   15ce8:	andeq	r5, r1, r4, lsr #29
   15cec:			; <UNDEFINED> instruction: 0x00015eb4
   15cf0:	strdeq	r5, [r1], -r0
   15cf4:			; <UNDEFINED> instruction: 0x00015eb4
   15cf8:	andeq	r5, r1, r4, ror #17
   15cfc:			; <UNDEFINED> instruction: 0x00015eb4
   15d00:			; <UNDEFINED> instruction: 0x00015eb4
   15d04:			; <UNDEFINED> instruction: 0x00015eb4
   15d08:	strdeq	r5, [r1], -r0
   15d0c:	strdeq	r5, [r1], -r0
   15d10:	strdeq	r5, [r1], -r0
   15d14:	strdeq	r5, [r1], -r0
   15d18:	strdeq	r5, [r1], -r0
   15d1c:	strdeq	r5, [r1], -r0
   15d20:	strdeq	r5, [r1], -r0
   15d24:	strdeq	r5, [r1], -r0
   15d28:	strdeq	r5, [r1], -r0
   15d2c:	strdeq	r5, [r1], -r0
   15d30:	strdeq	r5, [r1], -r0
   15d34:	strdeq	r5, [r1], -r0
   15d38:	strdeq	r5, [r1], -r0
   15d3c:	strdeq	r5, [r1], -r0
   15d40:	strdeq	r5, [r1], -r0
   15d44:	strdeq	r5, [r1], -r0
   15d48:			; <UNDEFINED> instruction: 0x00015eb4
   15d4c:			; <UNDEFINED> instruction: 0x00015eb4
   15d50:			; <UNDEFINED> instruction: 0x00015eb4
   15d54:			; <UNDEFINED> instruction: 0x00015eb4
   15d58:			; <UNDEFINED> instruction: 0x000158b8
   15d5c:	andeq	r5, r1, r4, lsr #23
   15d60:	strdeq	r5, [r1], -r0
   15d64:	strdeq	r5, [r1], -r0
   15d68:	strdeq	r5, [r1], -r0
   15d6c:	strdeq	r5, [r1], -r0
   15d70:	strdeq	r5, [r1], -r0
   15d74:	strdeq	r5, [r1], -r0
   15d78:	strdeq	r5, [r1], -r0
   15d7c:	strdeq	r5, [r1], -r0
   15d80:	strdeq	r5, [r1], -r0
   15d84:	strdeq	r5, [r1], -r0
   15d88:	strdeq	r5, [r1], -r0
   15d8c:	strdeq	r5, [r1], -r0
   15d90:	strdeq	r5, [r1], -r0
   15d94:	strdeq	r5, [r1], -r0
   15d98:	strdeq	r5, [r1], -r0
   15d9c:	strdeq	r5, [r1], -r0
   15da0:	strdeq	r5, [r1], -r0
   15da4:	strdeq	r5, [r1], -r0
   15da8:	strdeq	r5, [r1], -r0
   15dac:	strdeq	r5, [r1], -r0
   15db0:	strdeq	r5, [r1], -r0
   15db4:	strdeq	r5, [r1], -r0
   15db8:	strdeq	r5, [r1], -r0
   15dbc:	strdeq	r5, [r1], -r0
   15dc0:	strdeq	r5, [r1], -r0
   15dc4:	strdeq	r5, [r1], -r0
   15dc8:			; <UNDEFINED> instruction: 0x00015eb4
   15dcc:	andeq	r5, r1, r0, ror #16
   15dd0:	strdeq	r5, [r1], -r0
   15dd4:			; <UNDEFINED> instruction: 0x00015eb4
   15dd8:	strdeq	r5, [r1], -r0
   15ddc:			; <UNDEFINED> instruction: 0x00015eb4
   15de0:	strdeq	r5, [r1], -r0
   15de4:	strdeq	r5, [r1], -r0
   15de8:	strdeq	r5, [r1], -r0
   15dec:	strdeq	r5, [r1], -r0
   15df0:	strdeq	r5, [r1], -r0
   15df4:	strdeq	r5, [r1], -r0
   15df8:	strdeq	r5, [r1], -r0
   15dfc:	strdeq	r5, [r1], -r0
   15e00:	strdeq	r5, [r1], -r0
   15e04:	strdeq	r5, [r1], -r0
   15e08:	strdeq	r5, [r1], -r0
   15e0c:	strdeq	r5, [r1], -r0
   15e10:	strdeq	r5, [r1], -r0
   15e14:	strdeq	r5, [r1], -r0
   15e18:	strdeq	r5, [r1], -r0
   15e1c:	strdeq	r5, [r1], -r0
   15e20:	strdeq	r5, [r1], -r0
   15e24:	strdeq	r5, [r1], -r0
   15e28:	strdeq	r5, [r1], -r0
   15e2c:	strdeq	r5, [r1], -r0
   15e30:	strdeq	r5, [r1], -r0
   15e34:	strdeq	r5, [r1], -r0
   15e38:	strdeq	r5, [r1], -r0
   15e3c:	strdeq	r5, [r1], -r0
   15e40:	strdeq	r5, [r1], -r0
   15e44:	strdeq	r5, [r1], -r0
   15e48:	andeq	r5, r1, r4, lsl #13
   15e4c:			; <UNDEFINED> instruction: 0x00015eb4
   15e50:	andeq	r5, r1, r4, lsl #13
   15e54:	andeq	r5, r1, r4, lsr #29
   15e58:	mov	r3, #114	; 0x72
   15e5c:	b	159c0 <__assert_fail@plt+0x44e0>
   15e60:	mov	r3, #102	; 0x66
   15e64:	b	15890 <__assert_fail@plt+0x43b0>
   15e68:	mov	r3, #110	; 0x6e
   15e6c:	b	159c0 <__assert_fail@plt+0x44e0>
   15e70:	mov	r3, #98	; 0x62
   15e74:	b	15890 <__assert_fail@plt+0x43b0>
   15e78:	mov	r3, #97	; 0x61
   15e7c:	b	15890 <__assert_fail@plt+0x43b0>
   15e80:	ldr	r3, [sp, #40]	; 0x28
   15e84:	cmp	r3, #0
   15e88:	bne	15a98 <__assert_fail@plt+0x45b8>
   15e8c:	ldr	r3, [sp, #156]	; 0x9c
   15e90:	tst	r3, #1
   15e94:	addne	r9, r9, #1
   15e98:	bne	1522c <__assert_fail@plt+0x3d4c>
   15e9c:	ldr	r7, [sp, #40]	; 0x28
   15ea0:	b	1589c <__assert_fail@plt+0x43bc>
   15ea4:	sub	r3, fp, #2
   15ea8:	clz	r3, r3
   15eac:	lsr	r3, r3, #5
   15eb0:	b	156b0 <__assert_fail@plt+0x41d0>
   15eb4:	sub	r3, fp, #2
   15eb8:	mov	r6, #0
   15ebc:	clz	r3, r3
   15ec0:	lsr	r3, r3, #5
   15ec4:	ldr	r2, [sp, #44]	; 0x2c
   15ec8:	tst	r2, r3
   15ecc:	beq	156bc <__assert_fail@plt+0x41dc>
   15ed0:	b	159d8 <__assert_fail@plt+0x44f8>
   15ed4:	sub	r3, fp, #2
   15ed8:	clz	r3, r3
   15edc:	lsr	r3, r3, #5
   15ee0:	b	15ec4 <__assert_fail@plt+0x49e4>
   15ee4:	ldr	r3, [sp, #52]	; 0x34
   15ee8:	ldrb	r5, [r3]
   15eec:	cmp	r5, #126	; 0x7e
   15ef0:	ldrls	pc, [pc, r5, lsl #2]
   15ef4:	b	15ba0 <__assert_fail@plt+0x46c0>
   15ef8:	muleq	r1, r8, sl
   15efc:	andeq	r5, r1, r0, lsr #23
   15f00:	andeq	r5, r1, r0, lsr #23
   15f04:	andeq	r5, r1, r0, lsr #23
   15f08:	andeq	r5, r1, r0, lsr #23
   15f0c:	andeq	r5, r1, r0, lsr #23
   15f10:	andeq	r5, r1, r0, lsr #23
   15f14:	andeq	r5, r1, ip, ror sl
   15f18:	andeq	r5, r1, r4, ror sl
   15f1c:	andeq	r6, r1, r0, lsr r1
   15f20:	andeq	r5, r1, r8, ror #20
   15f24:	andeq	r6, r1, r4, lsr #2
   15f28:	andeq	r5, r1, r4, asr #20
   15f2c:	muleq	r1, r0, sl
   15f30:	andeq	r5, r1, r0, lsr #23
   15f34:	andeq	r5, r1, r0, lsr #23
   15f38:	andeq	r5, r1, r0, lsr #23
   15f3c:	andeq	r5, r1, r0, lsr #23
   15f40:	andeq	r5, r1, r0, lsr #23
   15f44:	andeq	r5, r1, r0, lsr #23
   15f48:	andeq	r5, r1, r0, lsr #23
   15f4c:	andeq	r5, r1, r0, lsr #23
   15f50:	andeq	r5, r1, r0, lsr #23
   15f54:	andeq	r5, r1, r0, lsr #23
   15f58:	andeq	r5, r1, r0, lsr #23
   15f5c:	andeq	r5, r1, r0, lsr #23
   15f60:	andeq	r5, r1, r0, lsr #23
   15f64:	andeq	r5, r1, r0, lsr #23
   15f68:	andeq	r5, r1, r0, lsr #23
   15f6c:	andeq	r5, r1, r0, lsr #23
   15f70:	andeq	r5, r1, r0, lsr #23
   15f74:	andeq	r5, r1, r0, lsr #23
   15f78:	andeq	r6, r1, ip, lsl r1
   15f7c:	andeq	r5, r1, r4, lsl #21
   15f80:	andeq	r5, r1, r4, lsl #21
   15f84:	andeq	r6, r1, r0, lsl #2
   15f88:	andeq	r5, r1, r4, lsl #21
   15f8c:	strdeq	r6, [r1], -r4
   15f90:	andeq	r5, r1, r4, lsl #21
   15f94:	andeq	r5, r1, r0, ror #17
   15f98:	andeq	r5, r1, r4, lsl #21
   15f9c:	andeq	r5, r1, r4, lsl #21
   15fa0:	andeq	r5, r1, r4, lsl #21
   15fa4:	strdeq	r6, [r1], -r4
   15fa8:	strdeq	r6, [r1], -r4
   15fac:	strdeq	r6, [r1], -r4
   15fb0:	strdeq	r6, [r1], -r4
   15fb4:	strdeq	r6, [r1], -r4
   15fb8:	strdeq	r6, [r1], -r4
   15fbc:	strdeq	r6, [r1], -r4
   15fc0:	strdeq	r6, [r1], -r4
   15fc4:	strdeq	r6, [r1], -r4
   15fc8:	strdeq	r6, [r1], -r4
   15fcc:	strdeq	r6, [r1], -r4
   15fd0:	strdeq	r6, [r1], -r4
   15fd4:	strdeq	r6, [r1], -r4
   15fd8:	strdeq	r6, [r1], -r4
   15fdc:	strdeq	r6, [r1], -r4
   15fe0:	strdeq	r6, [r1], -r4
   15fe4:	andeq	r5, r1, r4, lsl #21
   15fe8:	andeq	r5, r1, r4, lsl #21
   15fec:	andeq	r5, r1, r4, lsl #21
   15ff0:	andeq	r5, r1, r4, lsl #21
   15ff4:			; <UNDEFINED> instruction: 0x000158b4
   15ff8:	andeq	r5, r1, r0, lsr #23
   15ffc:	strdeq	r6, [r1], -r4
   16000:	strdeq	r6, [r1], -r4
   16004:	strdeq	r6, [r1], -r4
   16008:	strdeq	r6, [r1], -r4
   1600c:	strdeq	r6, [r1], -r4
   16010:	strdeq	r6, [r1], -r4
   16014:	strdeq	r6, [r1], -r4
   16018:	strdeq	r6, [r1], -r4
   1601c:	strdeq	r6, [r1], -r4
   16020:	strdeq	r6, [r1], -r4
   16024:	strdeq	r6, [r1], -r4
   16028:	strdeq	r6, [r1], -r4
   1602c:	strdeq	r6, [r1], -r4
   16030:	strdeq	r6, [r1], -r4
   16034:	strdeq	r6, [r1], -r4
   16038:	strdeq	r6, [r1], -r4
   1603c:	strdeq	r6, [r1], -r4
   16040:	strdeq	r6, [r1], -r4
   16044:	strdeq	r6, [r1], -r4
   16048:	strdeq	r6, [r1], -r4
   1604c:	strdeq	r6, [r1], -r4
   16050:	strdeq	r6, [r1], -r4
   16054:	strdeq	r6, [r1], -r4
   16058:	strdeq	r6, [r1], -r4
   1605c:	strdeq	r6, [r1], -r4
   16060:	strdeq	r6, [r1], -r4
   16064:	andeq	r5, r1, r4, lsl #21
   16068:	andeq	r5, r1, ip, asr r8
   1606c:	strdeq	r6, [r1], -r4
   16070:	andeq	r5, r1, r4, lsl #21
   16074:	strdeq	r6, [r1], -r4
   16078:	andeq	r5, r1, r4, lsl #21
   1607c:	strdeq	r6, [r1], -r4
   16080:	strdeq	r6, [r1], -r4
   16084:	strdeq	r6, [r1], -r4
   16088:	strdeq	r6, [r1], -r4
   1608c:	strdeq	r6, [r1], -r4
   16090:	strdeq	r6, [r1], -r4
   16094:	strdeq	r6, [r1], -r4
   16098:	strdeq	r6, [r1], -r4
   1609c:	strdeq	r6, [r1], -r4
   160a0:	strdeq	r6, [r1], -r4
   160a4:	strdeq	r6, [r1], -r4
   160a8:	strdeq	r6, [r1], -r4
   160ac:	strdeq	r6, [r1], -r4
   160b0:	strdeq	r6, [r1], -r4
   160b4:	strdeq	r6, [r1], -r4
   160b8:	strdeq	r6, [r1], -r4
   160bc:	strdeq	r6, [r1], -r4
   160c0:	strdeq	r6, [r1], -r4
   160c4:	strdeq	r6, [r1], -r4
   160c8:	strdeq	r6, [r1], -r4
   160cc:	strdeq	r6, [r1], -r4
   160d0:	strdeq	r6, [r1], -r4
   160d4:	strdeq	r6, [r1], -r4
   160d8:	strdeq	r6, [r1], -r4
   160dc:	strdeq	r6, [r1], -r4
   160e0:	strdeq	r6, [r1], -r4
   160e4:	andeq	r5, r1, r0, lsl #13
   160e8:	andeq	r5, r1, r4, lsl #21
   160ec:	andeq	r5, r1, r0, lsl #13
   160f0:	andeq	r6, r1, r0, lsl #2
   160f4:	mov	r6, r7
   160f8:	mov	r7, #0
   160fc:	b	158ac <__assert_fail@plt+0x43cc>
   16100:	cmp	r9, #0
   16104:	mov	r2, #0
   16108:	beq	15b70 <__assert_fail@plt+0x4690>
   1610c:	mov	r6, #0
   16110:	mov	r7, r2
   16114:	mov	r3, r6
   16118:	b	156cc <__assert_fail@plt+0x41ec>
   1611c:	mov	r2, #0
   16120:	b	15b84 <__assert_fail@plt+0x46a4>
   16124:	mov	r7, #0
   16128:	mov	r3, #118	; 0x76
   1612c:	b	15890 <__assert_fail@plt+0x43b0>
   16130:	mov	r7, #0
   16134:	mov	r3, #116	; 0x74
   16138:	b	159c0 <__assert_fail@plt+0x44e0>
   1613c:	ldr	r3, [sp, #44]	; 0x2c
   16140:	b	156f4 <__assert_fail@plt+0x4214>
   16144:	ldr	r3, [sp, #44]	; 0x2c
   16148:	cmp	r3, #0
   1614c:	bne	165bc <__assert_fail@plt+0x50dc>
   16150:	add	r9, r9, #1
   16154:	mov	r6, #0
   16158:	ldr	r3, [sp, #48]	; 0x30
   1615c:	mov	r5, #92	; 0x5c
   16160:	b	15980 <__assert_fail@plt+0x44a0>
   16164:	ldr	r3, [sp, #32]
   16168:	ldrb	r2, [r3, #1]
   1616c:	adds	r2, r2, #0
   16170:	movne	r2, #1
   16174:	b	1569c <__assert_fail@plt+0x41bc>
   16178:	ldr	r3, [sp, #156]	; 0x9c
   1617c:	ands	r3, r3, #4
   16180:	beq	161a8 <__assert_fail@plt+0x4cc8>
   16184:	ldr	r2, [sp, #28]
   16188:	add	r3, r9, #2
   1618c:	cmp	r3, r2
   16190:	bcs	161a4 <__assert_fail@plt+0x4cc4>
   16194:	ldr	r2, [sp, #52]	; 0x34
   16198:	ldrb	r5, [r2, #1]
   1619c:	cmp	r5, #63	; 0x3f
   161a0:	beq	16620 <__assert_fail@plt+0x5140>
   161a4:	mov	r3, #0
   161a8:	mov	r5, #63	; 0x3f
   161ac:	mov	r6, r3
   161b0:	b	156bc <__assert_fail@plt+0x41dc>
   161b4:	ldr	r3, [sp, #44]	; 0x2c
   161b8:	cmp	r3, #0
   161bc:	bne	165bc <__assert_fail@plt+0x50dc>
   161c0:	mov	r6, r3
   161c4:	mov	r5, #63	; 0x3f
   161c8:	b	156f4 <__assert_fail@plt+0x4214>
   161cc:	ldr	r1, [sp, #28]
   161d0:	mov	r2, #0
   161d4:	mov	r3, #0
   161d8:	strd	r2, [sp, #104]	; 0x68
   161dc:	cmn	r1, #1
   161e0:	bne	161f0 <__assert_fail@plt+0x4d10>
   161e4:	ldr	r0, [sp, #32]
   161e8:	bl	11354 <strlen@plt>
   161ec:	str	r0, [sp, #28]
   161f0:	str	r8, [sp, #76]	; 0x4c
   161f4:	mov	r3, #0
   161f8:	str	sl, [sp, #80]	; 0x50
   161fc:	ldr	sl, [sp, #32]
   16200:	str	r5, [sp, #84]	; 0x54
   16204:	mov	r5, r3
   16208:	ldr	r8, [sp, #44]	; 0x2c
   1620c:	str	r7, [sp, #88]	; 0x58
   16210:	str	r4, [sp, #92]	; 0x5c
   16214:	ldr	r2, [sp, #28]
   16218:	add	r4, r9, r5
   1621c:	add	r3, sp, #104	; 0x68
   16220:	add	r7, sl, r4
   16224:	add	r0, sp, #100	; 0x64
   16228:	mov	r1, r7
   1622c:	sub	r2, r2, r4
   16230:	bl	18d24 <__assert_fail@plt+0x7844>
   16234:	subs	r1, r0, #0
   16238:	beq	16284 <__assert_fail@plt+0x4da4>
   1623c:	cmn	r1, #1
   16240:	beq	165fc <__assert_fail@plt+0x511c>
   16244:	cmn	r1, #2
   16248:	beq	1671c <__assert_fail@plt+0x523c>
   1624c:	cmp	fp, #2
   16250:	movne	r3, #0
   16254:	andeq	r3, r8, #1
   16258:	cmp	r3, #0
   1625c:	bne	163e8 <__assert_fail@plt+0x4f08>
   16260:	ldr	r0, [sp, #100]	; 0x64
   16264:	add	r5, r5, r1
   16268:	bl	11258 <iswprint@plt>
   1626c:	cmp	r0, #0
   16270:	add	r0, sp, #104	; 0x68
   16274:	moveq	r6, #0
   16278:	bl	111e0 <mbsinit@plt>
   1627c:	cmp	r0, #0
   16280:	beq	16214 <__assert_fail@plt+0x4d34>
   16284:	ldr	r3, [sp, #40]	; 0x28
   16288:	mov	ip, r5
   1628c:	eor	r2, r6, #1
   16290:	ldr	r8, [sp, #76]	; 0x4c
   16294:	ldr	sl, [sp, #80]	; 0x50
   16298:	and	r2, r2, r3
   1629c:	ldr	r5, [sp, #84]	; 0x54
   162a0:	ldr	r7, [sp, #88]	; 0x58
   162a4:	ldr	r4, [sp, #92]	; 0x5c
   162a8:	cmp	ip, #1
   162ac:	bls	15be8 <__assert_fail@plt+0x4708>
   162b0:	add	r1, ip, r9
   162b4:	mov	r0, #39	; 0x27
   162b8:	ldr	lr, [sp, #52]	; 0x34
   162bc:	mov	ip, #0
   162c0:	str	r6, [sp, #52]	; 0x34
   162c4:	ldr	r6, [sp, #48]	; 0x30
   162c8:	b	16384 <__assert_fail@plt+0x4ea4>
   162cc:	ldr	ip, [sp, #44]	; 0x2c
   162d0:	sub	r3, fp, #2
   162d4:	clz	r3, r3
   162d8:	lsr	r3, r3, #5
   162dc:	cmp	ip, #0
   162e0:	bne	164f4 <__assert_fail@plt+0x5014>
   162e4:	eor	ip, r6, #1
   162e8:	ands	r3, r3, ip
   162ec:	beq	1631c <__assert_fail@plt+0x4e3c>
   162f0:	cmp	sl, r4
   162f4:	add	ip, r4, #1
   162f8:	strbhi	r0, [r8, r4]
   162fc:	cmp	sl, ip
   16300:	movhi	r6, #36	; 0x24
   16304:	strbhi	r6, [r8, ip]
   16308:	add	ip, r4, #2
   1630c:	mov	r6, r3
   16310:	cmp	sl, ip
   16314:	add	r4, r4, #3
   16318:	strbhi	r0, [r8, ip]
   1631c:	cmp	sl, r4
   16320:	movhi	r3, #92	; 0x5c
   16324:	strbhi	r3, [r8, r4]
   16328:	add	r3, r4, #1
   1632c:	cmp	sl, r3
   16330:	bls	16340 <__assert_fail@plt+0x4e60>
   16334:	lsr	ip, r5, #6
   16338:	add	ip, ip, #48	; 0x30
   1633c:	strb	ip, [r8, r3]
   16340:	add	r3, r4, #2
   16344:	cmp	sl, r3
   16348:	bls	16358 <__assert_fail@plt+0x4e78>
   1634c:	ubfx	ip, r5, #3, #3
   16350:	add	ip, ip, #48	; 0x30
   16354:	strb	ip, [r8, r3]
   16358:	add	r9, r9, #1
   1635c:	and	r5, r5, #7
   16360:	cmp	r9, r1
   16364:	add	r5, r5, #48	; 0x30
   16368:	add	r4, r4, #3
   1636c:	bcs	16520 <__assert_fail@plt+0x5040>
   16370:	mov	ip, r2
   16374:	cmp	sl, r4
   16378:	strbhi	r5, [r8, r4]
   1637c:	add	r4, r4, #1
   16380:	ldrb	r5, [lr, #1]!
   16384:	cmp	r2, #0
   16388:	bne	162cc <__assert_fail@plt+0x4dec>
   1638c:	eor	r3, ip, #1
   16390:	cmp	r7, #0
   16394:	and	r3, r3, r6
   16398:	uxtb	r3, r3
   1639c:	beq	163b0 <__assert_fail@plt+0x4ed0>
   163a0:	cmp	sl, r4
   163a4:	movhi	r7, #92	; 0x5c
   163a8:	strbhi	r7, [r8, r4]
   163ac:	add	r4, r4, #1
   163b0:	add	r9, r9, #1
   163b4:	cmp	r9, r1
   163b8:	bcs	16508 <__assert_fail@plt+0x5028>
   163bc:	cmp	r3, #0
   163c0:	beq	16540 <__assert_fail@plt+0x5060>
   163c4:	cmp	sl, r4
   163c8:	add	r3, r4, #1
   163cc:	mov	r7, #0
   163d0:	strbhi	r0, [r8, r4]
   163d4:	cmp	sl, r3
   163d8:	add	r4, r4, #2
   163dc:	mov	r6, r7
   163e0:	strbhi	r0, [r8, r3]
   163e4:	b	16374 <__assert_fail@plt+0x4e94>
   163e8:	cmp	r1, #1
   163ec:	beq	16260 <__assert_fail@plt+0x4d80>
   163f0:	add	r2, r4, #1
   163f4:	add	r3, sl, r1
   163f8:	add	r2, sl, r2
   163fc:	add	r4, r3, r4
   16400:	ldrb	r3, [r2], #1
   16404:	sub	r3, r3, #91	; 0x5b
   16408:	cmp	r3, #33	; 0x21
   1640c:	ldrls	pc, [pc, r3, lsl #2]
   16410:	b	1649c <__assert_fail@plt+0x4fbc>
   16414:	andeq	r6, r1, r8, lsr #9
   16418:	andeq	r6, r1, r8, lsr #9
   1641c:	muleq	r1, ip, r4
   16420:	andeq	r6, r1, r8, lsr #9
   16424:	muleq	r1, ip, r4
   16428:	andeq	r6, r1, r8, lsr #9
   1642c:	muleq	r1, ip, r4
   16430:	muleq	r1, ip, r4
   16434:	muleq	r1, ip, r4
   16438:	muleq	r1, ip, r4
   1643c:	muleq	r1, ip, r4
   16440:	muleq	r1, ip, r4
   16444:	muleq	r1, ip, r4
   16448:	muleq	r1, ip, r4
   1644c:	muleq	r1, ip, r4
   16450:	muleq	r1, ip, r4
   16454:	muleq	r1, ip, r4
   16458:	muleq	r1, ip, r4
   1645c:	muleq	r1, ip, r4
   16460:	muleq	r1, ip, r4
   16464:	muleq	r1, ip, r4
   16468:	muleq	r1, ip, r4
   1646c:	muleq	r1, ip, r4
   16470:	muleq	r1, ip, r4
   16474:	muleq	r1, ip, r4
   16478:	muleq	r1, ip, r4
   1647c:	muleq	r1, ip, r4
   16480:	muleq	r1, ip, r4
   16484:	muleq	r1, ip, r4
   16488:	muleq	r1, ip, r4
   1648c:	muleq	r1, ip, r4
   16490:	muleq	r1, ip, r4
   16494:	muleq	r1, ip, r4
   16498:	andeq	r6, r1, r8, lsr #9
   1649c:	cmp	r4, r2
   164a0:	bne	16400 <__assert_fail@plt+0x4f20>
   164a4:	b	16260 <__assert_fail@plt+0x4d80>
   164a8:	mov	r8, #2
   164ac:	ldr	fp, [sp, #76]	; 0x4c
   164b0:	ldr	sl, [sp, #80]	; 0x50
   164b4:	b	159e0 <__assert_fail@plt+0x4500>
   164b8:	ldr	r2, [sp, #40]	; 0x28
   164bc:	str	fp, [sp, #152]	; 0x98
   164c0:	mov	fp, r8
   164c4:	ldr	r8, [sp, #152]	; 0x98
   164c8:	and	r2, r2, r3
   164cc:	str	r2, [sp, #40]	; 0x28
   164d0:	b	159e0 <__assert_fail@plt+0x4500>
   164d4:	cmp	sl, r4
   164d8:	movls	r0, r4
   164dc:	bls	15b10 <__assert_fail@plt+0x4630>
   164e0:	ldr	r3, [sp, #48]	; 0x30
   164e4:	b	15b00 <__assert_fail@plt+0x4620>
   164e8:	str	sl, [sp, #72]	; 0x48
   164ec:	ldr	sl, [sp, #44]	; 0x2c
   164f0:	b	15950 <__assert_fail@plt+0x4470>
   164f4:	str	r3, [sp, #40]	; 0x28
   164f8:	str	fp, [sp, #152]	; 0x98
   164fc:	mov	fp, r8
   16500:	ldr	r8, [sp, #152]	; 0x98
   16504:	b	159e0 <__assert_fail@plt+0x4500>
   16508:	str	r6, [sp, #48]	; 0x30
   1650c:	ldr	r6, [sp, #52]	; 0x34
   16510:	b	15980 <__assert_fail@plt+0x44a0>
   16514:	mov	r6, #0
   16518:	ldr	r2, [sp, #40]	; 0x28
   1651c:	b	162b0 <__assert_fail@plt+0x4dd0>
   16520:	str	r6, [sp, #48]	; 0x30
   16524:	ldr	r6, [sp, #52]	; 0x34
   16528:	b	1576c <__assert_fail@plt+0x428c>
   1652c:	add	r4, r4, #4
   16530:	mov	r6, #0
   16534:	str	r3, [sp, #48]	; 0x30
   16538:	mov	r5, #48	; 0x30
   1653c:	b	156f4 <__assert_fail@plt+0x4214>
   16540:	mov	r7, r3
   16544:	b	16374 <__assert_fail@plt+0x4e94>
   16548:	mov	r3, #1
   1654c:	movw	r2, #38372	; 0x95e4
   16550:	movt	r2, #1
   16554:	mov	r4, r3
   16558:	str	r3, [sp, #36]	; 0x24
   1655c:	str	r3, [sp, #40]	; 0x28
   16560:	str	sl, [sp, #44]	; 0x2c
   16564:	str	sl, [sp, #48]	; 0x30
   16568:	str	r3, [sp, #56]	; 0x38
   1656c:	str	r2, [sp, #60]	; 0x3c
   16570:	str	sl, [sp, #68]	; 0x44
   16574:	str	sl, [sp, #72]	; 0x48
   16578:	b	1521c <__assert_fail@plt+0x3d3c>
   1657c:	mov	r3, r6
   16580:	mov	r5, #48	; 0x30
   16584:	mov	r6, #0
   16588:	b	156f4 <__assert_fail@plt+0x4214>
   1658c:	mov	r5, r3
   16590:	b	15a6c <__assert_fail@plt+0x458c>
   16594:	cmp	sl, r4
   16598:	mov	r5, #48	; 0x30
   1659c:	movhi	r3, #48	; 0x30
   165a0:	strbhi	r3, [r8, r4]
   165a4:	add	r3, r0, #2
   165a8:	add	r4, r0, #3
   165ac:	cmp	sl, r3
   165b0:	movhi	r1, #48	; 0x30
   165b4:	strbhi	r1, [r8, r3]
   165b8:	b	15b44 <__assert_fail@plt+0x4664>
   165bc:	str	fp, [sp, #152]	; 0x98
   165c0:	mov	fp, r8
   165c4:	ldr	r8, [sp, #152]	; 0x98
   165c8:	b	159e0 <__assert_fail@plt+0x4500>
   165cc:	ldr	r3, [sp, #164]	; 0xa4
   165d0:	ldrb	r3, [r3]
   165d4:	cmp	r3, #0
   165d8:	beq	151ec <__assert_fail@plt+0x3d0c>
   165dc:	ldr	r2, [sp, #164]	; 0xa4
   165e0:	cmp	sl, r4
   165e4:	strbhi	r3, [fp, r4]
   165e8:	add	r4, r4, #1
   165ec:	ldrb	r3, [r2, #1]!
   165f0:	cmp	r3, #0
   165f4:	bne	165e0 <__assert_fail@plt+0x5100>
   165f8:	b	151ec <__assert_fail@plt+0x3d0c>
   165fc:	mov	ip, r5
   16600:	mov	r6, #0
   16604:	ldr	r2, [sp, #40]	; 0x28
   16608:	ldr	r8, [sp, #76]	; 0x4c
   1660c:	ldr	sl, [sp, #80]	; 0x50
   16610:	ldr	r5, [sp, #84]	; 0x54
   16614:	ldr	r7, [sp, #88]	; 0x58
   16618:	ldr	r4, [sp, #92]	; 0x5c
   1661c:	b	162a8 <__assert_fail@plt+0x4dc8>
   16620:	ldr	r2, [sp, #32]
   16624:	ldrb	r1, [r2, r3]
   16628:	sub	r2, r1, #33	; 0x21
   1662c:	cmp	r2, #29
   16630:	ldrls	pc, [pc, r2, lsl #2]
   16634:	b	16710 <__assert_fail@plt+0x5230>
   16638:			; <UNDEFINED> instruction: 0x000166b0
   1663c:	andeq	r6, r1, r0, lsl r7
   16640:	andeq	r6, r1, r0, lsl r7
   16644:	andeq	r6, r1, r0, lsl r7
   16648:	andeq	r6, r1, r0, lsl r7
   1664c:	andeq	r6, r1, r0, lsl r7
   16650:			; <UNDEFINED> instruction: 0x000166b0
   16654:			; <UNDEFINED> instruction: 0x000166b0
   16658:			; <UNDEFINED> instruction: 0x000166b0
   1665c:	andeq	r6, r1, r0, lsl r7
   16660:	andeq	r6, r1, r0, lsl r7
   16664:	andeq	r6, r1, r0, lsl r7
   16668:			; <UNDEFINED> instruction: 0x000166b0
   1666c:	andeq	r6, r1, r0, lsl r7
   16670:			; <UNDEFINED> instruction: 0x000166b0
   16674:	andeq	r6, r1, r0, lsl r7
   16678:	andeq	r6, r1, r0, lsl r7
   1667c:	andeq	r6, r1, r0, lsl r7
   16680:	andeq	r6, r1, r0, lsl r7
   16684:	andeq	r6, r1, r0, lsl r7
   16688:	andeq	r6, r1, r0, lsl r7
   1668c:	andeq	r6, r1, r0, lsl r7
   16690:	andeq	r6, r1, r0, lsl r7
   16694:	andeq	r6, r1, r0, lsl r7
   16698:	andeq	r6, r1, r0, lsl r7
   1669c:	andeq	r6, r1, r0, lsl r7
   166a0:	andeq	r6, r1, r0, lsl r7
   166a4:			; <UNDEFINED> instruction: 0x000166b0
   166a8:			; <UNDEFINED> instruction: 0x000166b0
   166ac:			; <UNDEFINED> instruction: 0x000166b0
   166b0:	ldr	r2, [sp, #44]	; 0x2c
   166b4:	cmp	r2, #0
   166b8:	bne	16814 <__assert_fail@plt+0x5334>
   166bc:	cmp	sl, r4
   166c0:	mov	r5, r1
   166c4:	movhi	r2, #63	; 0x3f
   166c8:	mov	r9, r3
   166cc:	strbhi	r2, [r8, r4]
   166d0:	add	r2, r4, #1
   166d4:	cmp	sl, r2
   166d8:	movhi	r0, #34	; 0x22
   166dc:	strbhi	r0, [r8, r2]
   166e0:	add	r2, r4, #2
   166e4:	cmp	sl, r2
   166e8:	movhi	r0, #34	; 0x22
   166ec:	strbhi	r0, [r8, r2]
   166f0:	add	r2, r4, #3
   166f4:	add	r4, r4, #4
   166f8:	cmp	sl, r2
   166fc:	movhi	r0, #63	; 0x3f
   16700:	strbhi	r0, [r8, r2]
   16704:	mov	r2, #0
   16708:	mov	r6, r2
   1670c:	b	15b44 <__assert_fail@plt+0x4664>
   16710:	mov	r3, #0
   16714:	mov	r6, r3
   16718:	b	156bc <__assert_fail@plt+0x41dc>
   1671c:	ldr	r0, [sp, #28]
   16720:	mov	r1, r4
   16724:	mov	r2, r7
   16728:	mov	r3, r5
   1672c:	mov	ip, r5
   16730:	ldr	r8, [sp, #76]	; 0x4c
   16734:	ldr	sl, [sp, #80]	; 0x50
   16738:	cmp	r1, r0
   1673c:	ldr	r5, [sp, #84]	; 0x54
   16740:	ldr	r7, [sp, #88]	; 0x58
   16744:	ldr	r4, [sp, #92]	; 0x5c
   16748:	bcs	1677c <__assert_fail@plt+0x529c>
   1674c:	ldrb	r6, [r2]
   16750:	cmp	r6, #0
   16754:	bne	16768 <__assert_fail@plt+0x5288>
   16758:	b	1689c <__assert_fail@plt+0x53bc>
   1675c:	ldrb	r6, [r2, #1]!
   16760:	cmp	r6, #0
   16764:	beq	16824 <__assert_fail@plt+0x5344>
   16768:	add	r3, r3, #1
   1676c:	add	r1, r9, r3
   16770:	cmp	r1, r0
   16774:	bcc	1675c <__assert_fail@plt+0x527c>
   16778:	mov	ip, r3
   1677c:	mov	r6, #0
   16780:	ldr	r2, [sp, #40]	; 0x28
   16784:	b	162a8 <__assert_fail@plt+0x4dc8>
   16788:	mov	r3, #1
   1678c:	mov	r2, #0
   16790:	mov	r4, r2
   16794:	str	r3, [sp, #36]	; 0x24
   16798:	str	r3, [sp, #40]	; 0x28
   1679c:	str	r3, [sp, #44]	; 0x2c
   167a0:	str	r2, [sp, #48]	; 0x30
   167a4:	str	r3, [sp, #56]	; 0x38
   167a8:	movw	r3, #38372	; 0x95e4
   167ac:	movt	r3, #1
   167b0:	str	r3, [sp, #60]	; 0x3c
   167b4:	str	r2, [sp, #68]	; 0x44
   167b8:	str	r2, [sp, #72]	; 0x48
   167bc:	b	1521c <__assert_fail@plt+0x3d3c>
   167c0:	mov	r2, r3
   167c4:	ldr	r3, [sp, #60]	; 0x3c
   167c8:	cmp	r3, #0
   167cc:	moveq	r2, #0
   167d0:	andne	r2, r2, #1
   167d4:	cmp	r2, #0
   167d8:	beq	16804 <__assert_fail@plt+0x5324>
   167dc:	mov	r2, r3
   167e0:	ldrb	r3, [r3]
   167e4:	cmp	r3, #0
   167e8:	beq	16804 <__assert_fail@plt+0x5324>
   167ec:	cmp	sl, r4
   167f0:	strbhi	r3, [fp, r4]
   167f4:	add	r4, r4, #1
   167f8:	ldrb	r3, [r2, #1]!
   167fc:	cmp	r3, #0
   16800:	bne	167ec <__assert_fail@plt+0x530c>
   16804:	cmp	sl, r4
   16808:	movhi	r3, #0
   1680c:	strbhi	r3, [fp, r4]
   16810:	b	15a24 <__assert_fail@plt+0x4544>
   16814:	str	fp, [sp, #152]	; 0x98
   16818:	mov	fp, r8
   1681c:	ldr	r8, [sp, #152]	; 0x98
   16820:	b	159ec <__assert_fail@plt+0x450c>
   16824:	mov	ip, r3
   16828:	ldr	r2, [sp, #40]	; 0x28
   1682c:	b	162a8 <__assert_fail@plt+0x4dc8>
   16830:	str	fp, [sp, #152]	; 0x98
   16834:	mov	fp, r8
   16838:	ldr	r8, [sp, #152]	; 0x98
   1683c:	sub	r3, r8, #2
   16840:	clz	r3, r3
   16844:	lsr	r3, r3, #5
   16848:	str	r3, [sp, #40]	; 0x28
   1684c:	b	159e0 <__assert_fail@plt+0x4500>
   16850:	mov	ip, #5
   16854:	ldr	r3, [sp, #28]
   16858:	str	ip, [sp]
   1685c:	ldr	r2, [sp, #156]	; 0x9c
   16860:	ldr	ip, [sp, #164]	; 0xa4
   16864:	ldr	r0, [sp, #160]	; 0xa0
   16868:	str	r2, [sp, #4]
   1686c:	ldr	r2, [sp, #32]
   16870:	ldr	r1, [sp, #72]	; 0x48
   16874:	str	ip, [sp, #12]
   16878:	ldr	ip, [sp, #168]	; 0xa8
   1687c:	str	r0, [sp, #8]
   16880:	mov	r0, fp
   16884:	str	ip, [sp, #16]
   16888:	bl	15134 <__assert_fail@plt+0x3c54>
   1688c:	mov	r4, r0
   16890:	b	15a24 <__assert_fail@plt+0x4544>
   16894:	mov	r8, #2
   16898:	b	159e0 <__assert_fail@plt+0x4500>
   1689c:	ldr	r2, [sp, #40]	; 0x28
   168a0:	b	162a8 <__assert_fail@plt+0x4dc8>
   168a4:	mov	r3, #0
   168a8:	mov	r2, #1
   168ac:	mov	r4, r3
   168b0:	strd	r2, [sp, #36]	; 0x24
   168b4:	strd	r2, [sp, #44]	; 0x2c
   168b8:	str	r2, [sp, #56]	; 0x38
   168bc:	str	r3, [sp, #68]	; 0x44
   168c0:	str	r3, [sp, #72]	; 0x48
   168c4:	movw	r3, #42468	; 0xa5e4
   168c8:	movt	r3, #1
   168cc:	str	r3, [sp, #60]	; 0x3c
   168d0:	b	1521c <__assert_fail@plt+0x3d3c>
   168d4:	mov	r3, #0
   168d8:	mov	r1, #1
   168dc:	mov	r2, r3
   168e0:	str	r1, [sp, #36]	; 0x24
   168e4:	str	r3, [sp, #48]	; 0x30
   168e8:	str	sl, [sp, #72]	; 0x48
   168ec:	b	15824 <__assert_fail@plt+0x4344>
   168f0:	bl	114bc <abort@plt>
   168f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   168f8:	mov	r4, r0
   168fc:	mov	r5, r3
   16900:	strd	r6, [sp, #8]
   16904:	movw	r7, #45420	; 0xb16c
   16908:	movt	r7, #2
   1690c:	strd	r8, [sp, #16]
   16910:	strd	sl, [sp, #24]
   16914:	mov	sl, r1
   16918:	mov	fp, r2
   1691c:	str	lr, [sp, #32]
   16920:	sub	sp, sp, #60	; 0x3c
   16924:	bl	1139c <__errno_location@plt>
   16928:	mov	r8, r0
   1692c:	cmn	r4, #-2147483647	; 0x80000001
   16930:	ldr	r6, [r7]
   16934:	movne	r0, #0
   16938:	moveq	r0, #1
   1693c:	ldr	r3, [r8]
   16940:	orrs	r0, r0, r4, lsr #31
   16944:	str	r3, [sp, #28]
   16948:	bne	16ad8 <__assert_fail@plt+0x55f8>
   1694c:	ldr	r3, [r7, #4]
   16950:	cmp	r3, r4
   16954:	bgt	169b4 <__assert_fail@plt+0x54d4>
   16958:	add	r1, r7, #8
   1695c:	sub	r2, r4, r3
   16960:	str	r3, [sp, #52]	; 0x34
   16964:	cmp	r6, r1
   16968:	add	r2, r2, #1
   1696c:	beq	16ab0 <__assert_fail@plt+0x55d0>
   16970:	mov	r1, #8
   16974:	mov	r0, r6
   16978:	mvn	r3, #-2147483648	; 0x80000000
   1697c:	str	r1, [sp]
   16980:	add	r1, sp, #52	; 0x34
   16984:	bl	17d90 <__assert_fail@plt+0x68b0>
   16988:	mov	r6, r0
   1698c:	str	r0, [r7]
   16990:	ldr	r0, [r7, #4]
   16994:	mov	r1, #0
   16998:	ldr	r2, [sp, #52]	; 0x34
   1699c:	sub	r2, r2, r0
   169a0:	add	r0, r6, r0, lsl #3
   169a4:	lsl	r2, r2, #3
   169a8:	bl	113c0 <memset@plt>
   169ac:	ldr	r3, [sp, #52]	; 0x34
   169b0:	str	r3, [r7, #4]
   169b4:	ldr	r1, [r5, #4]
   169b8:	add	r0, r6, r4, lsl #3
   169bc:	add	ip, r5, #8
   169c0:	mov	r3, fp
   169c4:	mov	r2, sl
   169c8:	ldr	r7, [r0, #4]
   169cc:	str	r0, [sp, #36]	; 0x24
   169d0:	str	ip, [sp, #40]	; 0x28
   169d4:	orr	r0, r1, #1
   169d8:	ldr	r9, [r6, r4, lsl #3]
   169dc:	str	ip, [sp, #8]
   169e0:	ldr	lr, [r5, #44]	; 0x2c
   169e4:	str	r0, [sp, #4]
   169e8:	ldr	ip, [r5]
   169ec:	mov	r1, r9
   169f0:	str	ip, [sp, #32]
   169f4:	ldr	ip, [r5, #40]	; 0x28
   169f8:	str	ip, [sp, #12]
   169fc:	ldr	ip, [sp, #32]
   16a00:	str	lr, [sp, #16]
   16a04:	str	r0, [sp, #44]	; 0x2c
   16a08:	mov	r0, r7
   16a0c:	str	ip, [sp]
   16a10:	bl	15134 <__assert_fail@plt+0x3c54>
   16a14:	cmp	r9, r0
   16a18:	bhi	16a88 <__assert_fail@plt+0x55a8>
   16a1c:	add	r9, r0, #1
   16a20:	movw	r3, #46384	; 0xb530
   16a24:	movt	r3, #2
   16a28:	cmp	r7, r3
   16a2c:	str	r9, [r6, r4, lsl #3]
   16a30:	beq	16a3c <__assert_fail@plt+0x555c>
   16a34:	mov	r0, r7
   16a38:	bl	14c94 <__assert_fail@plt+0x37b4>
   16a3c:	mov	r0, r9
   16a40:	bl	17be0 <__assert_fail@plt+0x6700>
   16a44:	ldr	ip, [r5]
   16a48:	mov	r3, fp
   16a4c:	mov	r2, sl
   16a50:	mov	r1, r9
   16a54:	mov	r7, r0
   16a58:	ldr	lr, [sp, #36]	; 0x24
   16a5c:	ldr	r4, [r5, #40]	; 0x28
   16a60:	str	r0, [lr, #4]
   16a64:	ldr	lr, [r5, #44]	; 0x2c
   16a68:	str	ip, [sp]
   16a6c:	ldr	ip, [sp, #44]	; 0x2c
   16a70:	str	ip, [sp, #4]
   16a74:	ldr	ip, [sp, #40]	; 0x28
   16a78:	str	r4, [sp, #12]
   16a7c:	str	lr, [sp, #16]
   16a80:	str	ip, [sp, #8]
   16a84:	bl	15134 <__assert_fail@plt+0x3c54>
   16a88:	ldr	r3, [sp, #28]
   16a8c:	mov	r0, r7
   16a90:	str	r3, [r8]
   16a94:	add	sp, sp, #60	; 0x3c
   16a98:	ldrd	r4, [sp]
   16a9c:	ldrd	r6, [sp, #8]
   16aa0:	ldrd	r8, [sp, #16]
   16aa4:	ldrd	sl, [sp, #24]
   16aa8:	add	sp, sp, #32
   16aac:	pop	{pc}		; (ldr pc, [sp], #4)
   16ab0:	mov	r1, #8
   16ab4:	mvn	r3, #-2147483648	; 0x80000000
   16ab8:	str	r1, [sp]
   16abc:	add	r1, sp, #52	; 0x34
   16ac0:	bl	17d90 <__assert_fail@plt+0x68b0>
   16ac4:	ldrd	r2, [r7, #8]
   16ac8:	mov	r6, r0
   16acc:	str	r0, [r7]
   16ad0:	strd	r2, [r0]
   16ad4:	b	16990 <__assert_fail@plt+0x54b0>
   16ad8:	bl	114bc <abort@plt>
   16adc:	strd	r4, [sp, #-16]!
   16ae0:	mov	r5, r0
   16ae4:	str	r6, [sp, #8]
   16ae8:	str	lr, [sp, #12]
   16aec:	bl	1139c <__errno_location@plt>
   16af0:	mov	r4, r0
   16af4:	cmp	r5, #0
   16af8:	ldr	r0, [pc, #32]	; 16b20 <__assert_fail@plt+0x5640>
   16afc:	mov	r1, #48	; 0x30
   16b00:	movne	r0, r5
   16b04:	ldr	r6, [r4]
   16b08:	bl	17f08 <__assert_fail@plt+0x6a28>
   16b0c:	str	r6, [r4]
   16b10:	ldrd	r4, [sp]
   16b14:	ldr	r6, [sp, #8]
   16b18:	add	sp, sp, #12
   16b1c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b20:	andeq	fp, r2, r0, lsr r6
   16b24:	ldr	r3, [pc, #12]	; 16b38 <__assert_fail@plt+0x5658>
   16b28:	cmp	r0, #0
   16b2c:	moveq	r0, r3
   16b30:	ldr	r0, [r0]
   16b34:	bx	lr
   16b38:	andeq	fp, r2, r0, lsr r6
   16b3c:	ldr	r3, [pc, #12]	; 16b50 <__assert_fail@plt+0x5670>
   16b40:	cmp	r0, #0
   16b44:	moveq	r0, r3
   16b48:	str	r1, [r0]
   16b4c:	bx	lr
   16b50:	andeq	fp, r2, r0, lsr r6
   16b54:	ldr	r3, [pc, #52]	; 16b90 <__assert_fail@plt+0x56b0>
   16b58:	cmp	r0, #0
   16b5c:	push	{lr}		; (str lr, [sp, #-4]!)
   16b60:	lsr	lr, r1, #5
   16b64:	and	r1, r1, #31
   16b68:	moveq	r0, r3
   16b6c:	add	r3, r0, #8
   16b70:	ldr	ip, [r3, lr, lsl #2]
   16b74:	lsr	r0, ip, r1
   16b78:	eor	r2, r2, r0
   16b7c:	and	r0, r0, #1
   16b80:	and	r2, r2, #1
   16b84:	eor	r1, ip, r2, lsl r1
   16b88:	str	r1, [r3, lr, lsl #2]
   16b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b90:	andeq	fp, r2, r0, lsr r6
   16b94:	ldr	r3, [pc, #16]	; 16bac <__assert_fail@plt+0x56cc>
   16b98:	cmp	r0, #0
   16b9c:	movne	r3, r0
   16ba0:	ldr	r0, [r3, #4]
   16ba4:	str	r1, [r3, #4]
   16ba8:	bx	lr
   16bac:	andeq	fp, r2, r0, lsr r6
   16bb0:	ldr	r3, [pc, #48]	; 16be8 <__assert_fail@plt+0x5708>
   16bb4:	cmp	r0, #0
   16bb8:	mov	ip, #10
   16bbc:	moveq	r0, r3
   16bc0:	cmp	r2, #0
   16bc4:	cmpne	r1, #0
   16bc8:	str	ip, [r0]
   16bcc:	beq	16bdc <__assert_fail@plt+0x56fc>
   16bd0:	str	r1, [r0, #40]	; 0x28
   16bd4:	str	r2, [r0, #44]	; 0x2c
   16bd8:	bx	lr
   16bdc:	str	r4, [sp, #-8]!
   16be0:	str	lr, [sp, #4]
   16be4:	bl	114bc <abort@plt>
   16be8:	andeq	fp, r2, r0, lsr r6
   16bec:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16bf0:	strd	r6, [sp, #8]
   16bf4:	mov	r7, r0
   16bf8:	mov	r6, r1
   16bfc:	strd	r8, [sp, #16]
   16c00:	mov	r8, r2
   16c04:	mov	r9, r3
   16c08:	str	lr, [sp, #24]
   16c0c:	sub	sp, sp, #28
   16c10:	ldr	r4, [sp, #56]	; 0x38
   16c14:	ldr	ip, [pc, #104]	; 16c84 <__assert_fail@plt+0x57a4>
   16c18:	cmp	r4, #0
   16c1c:	moveq	r4, ip
   16c20:	bl	1139c <__errno_location@plt>
   16c24:	ldr	ip, [r4, #44]	; 0x2c
   16c28:	mov	r5, r0
   16c2c:	mov	r1, r6
   16c30:	add	lr, r4, #8
   16c34:	mov	r3, r9
   16c38:	ldr	r6, [r5]
   16c3c:	mov	r2, r8
   16c40:	mov	r0, r7
   16c44:	str	ip, [sp, #16]
   16c48:	ldr	ip, [r4, #40]	; 0x28
   16c4c:	str	lr, [sp, #8]
   16c50:	str	ip, [sp, #12]
   16c54:	ldr	ip, [r4, #4]
   16c58:	str	ip, [sp, #4]
   16c5c:	ldr	ip, [r4]
   16c60:	str	ip, [sp]
   16c64:	bl	15134 <__assert_fail@plt+0x3c54>
   16c68:	str	r6, [r5]
   16c6c:	add	sp, sp, #28
   16c70:	ldrd	r4, [sp]
   16c74:	ldrd	r6, [sp, #8]
   16c78:	ldrd	r8, [sp, #16]
   16c7c:	add	sp, sp, #24
   16c80:	pop	{pc}		; (ldr pc, [sp], #4)
   16c84:	andeq	fp, r2, r0, lsr r6
   16c88:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16c8c:	cmp	r3, #0
   16c90:	ldr	r4, [pc, #220]	; 16d74 <__assert_fail@plt+0x5894>
   16c94:	movne	r4, r3
   16c98:	strd	r6, [sp, #8]
   16c9c:	mov	r6, r2
   16ca0:	strd	r8, [sp, #16]
   16ca4:	mov	r9, r0
   16ca8:	strd	sl, [sp, #24]
   16cac:	mov	sl, r1
   16cb0:	str	lr, [sp, #32]
   16cb4:	sub	sp, sp, #44	; 0x2c
   16cb8:	bl	1139c <__errno_location@plt>
   16cbc:	ldr	r5, [r4, #4]
   16cc0:	mov	r7, r0
   16cc4:	mov	r1, #0
   16cc8:	add	r8, r4, #8
   16ccc:	mov	r3, sl
   16cd0:	ldr	ip, [r4, #44]	; 0x2c
   16cd4:	mov	r2, r9
   16cd8:	mov	r0, r1
   16cdc:	ldr	lr, [r7]
   16ce0:	cmp	r6, r1
   16ce4:	orreq	r5, r5, #1
   16ce8:	str	ip, [sp, #16]
   16cec:	ldr	ip, [r4, #40]	; 0x28
   16cf0:	stmib	sp, {r5, r8, ip}
   16cf4:	ldr	ip, [r4]
   16cf8:	str	lr, [sp, #28]
   16cfc:	str	ip, [sp]
   16d00:	bl	15134 <__assert_fail@plt+0x3c54>
   16d04:	add	r1, r0, #1
   16d08:	mov	fp, r0
   16d0c:	mov	r0, r1
   16d10:	str	r1, [sp, #36]	; 0x24
   16d14:	bl	17be0 <__assert_fail@plt+0x6700>
   16d18:	ldr	ip, [r4, #44]	; 0x2c
   16d1c:	mov	r3, sl
   16d20:	mov	r2, r9
   16d24:	ldr	r1, [sp, #36]	; 0x24
   16d28:	str	ip, [sp, #16]
   16d2c:	ldr	ip, [r4, #40]	; 0x28
   16d30:	str	r0, [sp, #32]
   16d34:	stmib	sp, {r5, r8, ip}
   16d38:	ldr	ip, [r4]
   16d3c:	str	ip, [sp]
   16d40:	bl	15134 <__assert_fail@plt+0x3c54>
   16d44:	ldr	lr, [sp, #28]
   16d48:	cmp	r6, #0
   16d4c:	ldr	r0, [sp, #32]
   16d50:	str	lr, [r7]
   16d54:	strne	fp, [r6]
   16d58:	add	sp, sp, #44	; 0x2c
   16d5c:	ldrd	r4, [sp]
   16d60:	ldrd	r6, [sp, #8]
   16d64:	ldrd	r8, [sp, #16]
   16d68:	ldrd	sl, [sp, #24]
   16d6c:	add	sp, sp, #32
   16d70:	pop	{pc}		; (ldr pc, [sp], #4)
   16d74:	andeq	fp, r2, r0, lsr r6
   16d78:	mov	r3, r2
   16d7c:	mov	r2, #0
   16d80:	b	16c88 <__assert_fail@plt+0x57a8>
   16d84:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16d88:	movw	r5, #45420	; 0xb16c
   16d8c:	movt	r5, #2
   16d90:	ldr	r3, [r5, #4]
   16d94:	strd	r6, [sp, #8]
   16d98:	str	r8, [sp, #16]
   16d9c:	str	lr, [sp, #20]
   16da0:	ldr	r7, [r5]
   16da4:	cmp	r3, #1
   16da8:	ble	16dcc <__assert_fail@plt+0x58ec>
   16dac:	mov	r4, #1
   16db0:	add	r6, r7, #4
   16db4:	ldr	r0, [r6, r4, lsl #3]
   16db8:	add	r4, r4, #1
   16dbc:	bl	14c94 <__assert_fail@plt+0x37b4>
   16dc0:	ldr	r3, [r5, #4]
   16dc4:	cmp	r3, r4
   16dc8:	bgt	16db4 <__assert_fail@plt+0x58d4>
   16dcc:	ldr	r0, [r7, #4]
   16dd0:	movw	r4, #46384	; 0xb530
   16dd4:	movt	r4, #2
   16dd8:	cmp	r0, r4
   16ddc:	beq	16df0 <__assert_fail@plt+0x5910>
   16de0:	bl	14c94 <__assert_fail@plt+0x37b4>
   16de4:	mov	r3, #256	; 0x100
   16de8:	str	r3, [r5, #8]
   16dec:	str	r4, [r5, #12]
   16df0:	ldr	r4, [pc, #44]	; 16e24 <__assert_fail@plt+0x5944>
   16df4:	cmp	r7, r4
   16df8:	beq	16e08 <__assert_fail@plt+0x5928>
   16dfc:	mov	r0, r7
   16e00:	bl	14c94 <__assert_fail@plt+0x37b4>
   16e04:	str	r4, [r5]
   16e08:	mov	r3, #1
   16e0c:	ldrd	r6, [sp, #8]
   16e10:	str	r3, [r5, #4]
   16e14:	ldrd	r4, [sp]
   16e18:	ldr	r8, [sp, #16]
   16e1c:	add	sp, sp, #20
   16e20:	pop	{pc}		; (ldr pc, [sp], #4)
   16e24:	andeq	fp, r2, r4, ror r1
   16e28:	ldr	r3, [pc, #4]	; 16e34 <__assert_fail@plt+0x5954>
   16e2c:	mvn	r2, #0
   16e30:	b	168f4 <__assert_fail@plt+0x5414>
   16e34:	andeq	fp, r2, r0, lsr r6
   16e38:	ldr	r3, [pc]	; 16e40 <__assert_fail@plt+0x5960>
   16e3c:	b	168f4 <__assert_fail@plt+0x5414>
   16e40:	andeq	fp, r2, r0, lsr r6
   16e44:	mov	r1, r0
   16e48:	ldr	r3, [pc, #8]	; 16e58 <__assert_fail@plt+0x5978>
   16e4c:	mvn	r2, #0
   16e50:	mov	r0, #0
   16e54:	b	168f4 <__assert_fail@plt+0x5414>
   16e58:	andeq	fp, r2, r0, lsr r6
   16e5c:	mov	r2, r1
   16e60:	ldr	r3, [pc, #8]	; 16e70 <__assert_fail@plt+0x5990>
   16e64:	mov	r1, r0
   16e68:	mov	r0, #0
   16e6c:	b	168f4 <__assert_fail@plt+0x5414>
   16e70:	andeq	fp, r2, r0, lsr r6
   16e74:	strd	r4, [sp, #-12]!
   16e78:	mov	r5, r2
   16e7c:	mov	r4, r0
   16e80:	str	lr, [sp, #8]
   16e84:	sub	sp, sp, #52	; 0x34
   16e88:	mov	r0, sp
   16e8c:	bl	14f90 <__assert_fail@plt+0x3ab0>
   16e90:	mov	r3, sp
   16e94:	mov	r1, r5
   16e98:	mov	r0, r4
   16e9c:	mvn	r2, #0
   16ea0:	bl	168f4 <__assert_fail@plt+0x5414>
   16ea4:	add	sp, sp, #52	; 0x34
   16ea8:	ldrd	r4, [sp]
   16eac:	add	sp, sp, #8
   16eb0:	pop	{pc}		; (ldr pc, [sp], #4)
   16eb4:	strd	r4, [sp, #-16]!
   16eb8:	mov	r5, r2
   16ebc:	mov	r4, r0
   16ec0:	str	r6, [sp, #8]
   16ec4:	mov	r6, r3
   16ec8:	str	lr, [sp, #12]
   16ecc:	sub	sp, sp, #48	; 0x30
   16ed0:	mov	r0, sp
   16ed4:	bl	14f90 <__assert_fail@plt+0x3ab0>
   16ed8:	mov	r3, sp
   16edc:	mov	r2, r6
   16ee0:	mov	r1, r5
   16ee4:	mov	r0, r4
   16ee8:	bl	168f4 <__assert_fail@plt+0x5414>
   16eec:	add	sp, sp, #48	; 0x30
   16ef0:	ldrd	r4, [sp]
   16ef4:	ldr	r6, [sp, #8]
   16ef8:	add	sp, sp, #12
   16efc:	pop	{pc}		; (ldr pc, [sp], #4)
   16f00:	mov	r2, r1
   16f04:	mov	r1, r0
   16f08:	mov	r0, #0
   16f0c:	b	16e74 <__assert_fail@plt+0x5994>
   16f10:	mov	r3, r2
   16f14:	mov	r2, r1
   16f18:	mov	r1, r0
   16f1c:	mov	r0, #0
   16f20:	b	16eb4 <__assert_fail@plt+0x59d4>
   16f24:	ldr	ip, [pc, #140]	; 16fb8 <__assert_fail@plt+0x5ad8>
   16f28:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16f2c:	ldrd	r4, [ip]
   16f30:	strd	r6, [sp, #8]
   16f34:	ldrd	r6, [ip, #8]
   16f38:	strd	r8, [sp, #16]
   16f3c:	lsr	r9, r2, #5
   16f40:	str	lr, [sp, #24]
   16f44:	sub	sp, sp, #52	; 0x34
   16f48:	and	lr, r2, #31
   16f4c:	add	r8, sp, #8
   16f50:	mov	r2, r1
   16f54:	strd	r4, [sp]
   16f58:	mov	r1, r0
   16f5c:	mov	r3, sp
   16f60:	strd	r6, [sp, #8]
   16f64:	mov	r0, #0
   16f68:	ldrd	r4, [ip, #16]
   16f6c:	ldrd	r6, [ip, #24]
   16f70:	strd	r4, [sp, #16]
   16f74:	ldrd	r4, [ip, #32]
   16f78:	strd	r6, [sp, #24]
   16f7c:	ldrd	r6, [ip, #40]	; 0x28
   16f80:	strd	r4, [sp, #32]
   16f84:	strd	r6, [sp, #40]	; 0x28
   16f88:	ldr	ip, [r8, r9, lsl #2]
   16f8c:	mvn	r4, ip, lsr lr
   16f90:	and	r4, r4, #1
   16f94:	eor	lr, ip, r4, lsl lr
   16f98:	str	lr, [r8, r9, lsl #2]
   16f9c:	bl	168f4 <__assert_fail@plt+0x5414>
   16fa0:	add	sp, sp, #52	; 0x34
   16fa4:	ldrd	r4, [sp]
   16fa8:	ldrd	r6, [sp, #8]
   16fac:	ldrd	r8, [sp, #16]
   16fb0:	add	sp, sp, #24
   16fb4:	pop	{pc}		; (ldr pc, [sp], #4)
   16fb8:	andeq	fp, r2, r0, lsr r6
   16fbc:	mov	r2, r1
   16fc0:	mvn	r1, #0
   16fc4:	b	16f24 <__assert_fail@plt+0x5a44>
   16fc8:	mov	r2, #58	; 0x3a
   16fcc:	mvn	r1, #0
   16fd0:	b	16f24 <__assert_fail@plt+0x5a44>
   16fd4:	mov	r2, #58	; 0x3a
   16fd8:	b	16f24 <__assert_fail@plt+0x5a44>
   16fdc:	strd	r4, [sp, #-20]!	; 0xffffffec
   16fe0:	strd	r6, [sp, #8]
   16fe4:	mov	r6, r0
   16fe8:	mov	r7, r2
   16fec:	str	lr, [sp, #16]
   16ff0:	sub	sp, sp, #100	; 0x64
   16ff4:	mov	r0, sp
   16ff8:	bl	14f90 <__assert_fail@plt+0x3ab0>
   16ffc:	ldrd	r4, [sp, #8]
   17000:	mov	r1, r7
   17004:	mov	r0, r6
   17008:	add	r3, sp, #48	; 0x30
   1700c:	mvn	r2, #0
   17010:	ldrd	r6, [sp]
   17014:	strd	r4, [sp, #56]	; 0x38
   17018:	ldrd	r4, [sp, #16]
   1701c:	strd	r6, [sp, #48]	; 0x30
   17020:	ldrd	r6, [sp, #32]
   17024:	ldr	lr, [sp, #60]	; 0x3c
   17028:	strd	r4, [sp, #64]	; 0x40
   1702c:	ldrd	r4, [sp, #24]
   17030:	mvn	ip, lr
   17034:	and	ip, ip, #67108864	; 0x4000000
   17038:	strd	r4, [sp, #72]	; 0x48
   1703c:	eor	ip, ip, lr
   17040:	ldrd	r4, [sp, #40]	; 0x28
   17044:	str	ip, [sp, #60]	; 0x3c
   17048:	strd	r6, [sp, #80]	; 0x50
   1704c:	strd	r4, [sp, #88]	; 0x58
   17050:	bl	168f4 <__assert_fail@plt+0x5414>
   17054:	add	sp, sp, #100	; 0x64
   17058:	ldrd	r4, [sp]
   1705c:	ldrd	r6, [sp, #8]
   17060:	add	sp, sp, #16
   17064:	pop	{pc}		; (ldr pc, [sp], #4)
   17068:	ldr	ip, [pc, #156]	; 1710c <__assert_fail@plt+0x5c2c>
   1706c:	cmp	r2, #0
   17070:	cmpne	r1, #0
   17074:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17078:	strd	r6, [sp, #8]
   1707c:	mov	r6, r2
   17080:	str	r8, [sp, #16]
   17084:	mov	r8, r3
   17088:	strd	sl, [sp, #20]
   1708c:	ldrd	r4, [ip]
   17090:	str	lr, [sp, #28]
   17094:	sub	sp, sp, #48	; 0x30
   17098:	mov	lr, #10
   1709c:	ldrd	r2, [ip, #8]
   170a0:	ldrd	sl, [ip, #16]
   170a4:	strd	r4, [sp]
   170a8:	ldrd	r4, [ip, #32]
   170ac:	str	lr, [sp]
   170b0:	strd	r2, [sp, #8]
   170b4:	strd	sl, [sp, #16]
   170b8:	ldrd	r2, [ip, #24]
   170bc:	ldrd	sl, [ip, #40]	; 0x28
   170c0:	strd	r2, [sp, #24]
   170c4:	strd	r4, [sp, #32]
   170c8:	strd	sl, [sp, #40]	; 0x28
   170cc:	beq	17108 <__assert_fail@plt+0x5c28>
   170d0:	ldr	r2, [sp, #80]	; 0x50
   170d4:	mov	r7, r1
   170d8:	mov	r3, sp
   170dc:	mov	r1, r8
   170e0:	str	r7, [sp, #40]	; 0x28
   170e4:	str	r6, [sp, #44]	; 0x2c
   170e8:	bl	168f4 <__assert_fail@plt+0x5414>
   170ec:	add	sp, sp, #48	; 0x30
   170f0:	ldrd	r4, [sp]
   170f4:	ldrd	r6, [sp, #8]
   170f8:	ldr	r8, [sp, #16]
   170fc:	ldrd	sl, [sp, #20]
   17100:	add	sp, sp, #28
   17104:	pop	{pc}		; (ldr pc, [sp], #4)
   17108:	bl	114bc <abort@plt>
   1710c:	andeq	fp, r2, r0, lsr r6
   17110:	mvn	ip, #0
   17114:	push	{lr}		; (str lr, [sp, #-4]!)
   17118:	sub	sp, sp, #12
   1711c:	str	ip, [sp]
   17120:	bl	17068 <__assert_fail@plt+0x5b88>
   17124:	add	sp, sp, #12
   17128:	pop	{pc}		; (ldr pc, [sp], #4)
   1712c:	mvn	ip, #0
   17130:	push	{lr}		; (str lr, [sp, #-4]!)
   17134:	sub	sp, sp, #12
   17138:	mov	r3, r2
   1713c:	mov	r2, r1
   17140:	mov	r1, r0
   17144:	mov	r0, #0
   17148:	str	ip, [sp]
   1714c:	bl	17068 <__assert_fail@plt+0x5b88>
   17150:	add	sp, sp, #12
   17154:	pop	{pc}		; (ldr pc, [sp], #4)
   17158:	push	{lr}		; (str lr, [sp, #-4]!)
   1715c:	sub	sp, sp, #12
   17160:	str	r3, [sp]
   17164:	mov	r3, r2
   17168:	mov	r2, r1
   1716c:	mov	r1, r0
   17170:	mov	r0, #0
   17174:	bl	17068 <__assert_fail@plt+0x5b88>
   17178:	add	sp, sp, #12
   1717c:	pop	{pc}		; (ldr pc, [sp], #4)
   17180:	ldr	r3, [pc]	; 17188 <__assert_fail@plt+0x5ca8>
   17184:	b	168f4 <__assert_fail@plt+0x5414>
   17188:	andeq	fp, r2, ip, ror r1
   1718c:	mov	r2, r1
   17190:	ldr	r3, [pc, #8]	; 171a0 <__assert_fail@plt+0x5cc0>
   17194:	mov	r1, r0
   17198:	mov	r0, #0
   1719c:	b	168f4 <__assert_fail@plt+0x5414>
   171a0:	andeq	fp, r2, ip, ror r1
   171a4:	ldr	r3, [pc, #4]	; 171b0 <__assert_fail@plt+0x5cd0>
   171a8:	mvn	r2, #0
   171ac:	b	168f4 <__assert_fail@plt+0x5414>
   171b0:	andeq	fp, r2, ip, ror r1
   171b4:	mov	r1, r0
   171b8:	ldr	r3, [pc, #8]	; 171c8 <__assert_fail@plt+0x5ce8>
   171bc:	mvn	r2, #0
   171c0:	mov	r0, #0
   171c4:	b	168f4 <__assert_fail@plt+0x5414>
   171c8:	andeq	fp, r2, ip, ror r1
   171cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   171d0:	mov	r5, #0
   171d4:	movt	r5, #32752	; 0x7ff0
   171d8:	mov	r4, r2
   171dc:	strd	r6, [sp, #8]
   171e0:	mov	r7, r1
   171e4:	str	r8, [sp, #16]
   171e8:	mov	r8, r0
   171ec:	str	lr, [sp, #20]
   171f0:	mov	r2, r4
   171f4:	mov	r1, r7
   171f8:	mov	r0, r8
   171fc:	bl	11180 <read@plt>
   17200:	subs	r6, r0, #0
   17204:	bge	17238 <__assert_fail@plt+0x5d58>
   17208:	bl	1139c <__errno_location@plt>
   1720c:	ldr	r3, [r0]
   17210:	cmp	r3, #4
   17214:	beq	171f0 <__assert_fail@plt+0x5d10>
   17218:	cmp	r4, r5
   1721c:	mov	r4, r5
   17220:	movls	r2, #0
   17224:	movhi	r2, #1
   17228:	cmp	r3, #22
   1722c:	movne	r2, #0
   17230:	cmp	r2, #0
   17234:	bne	171f0 <__assert_fail@plt+0x5d10>
   17238:	mov	r0, r6
   1723c:	ldrd	r4, [sp]
   17240:	ldrd	r6, [sp, #8]
   17244:	ldr	r8, [sp, #16]
   17248:	add	sp, sp, #20
   1724c:	pop	{pc}		; (ldr pc, [sp], #4)
   17250:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17254:	mov	r5, #0
   17258:	movt	r5, #32752	; 0x7ff0
   1725c:	mov	r4, r2
   17260:	strd	r6, [sp, #8]
   17264:	mov	r7, r1
   17268:	str	r8, [sp, #16]
   1726c:	mov	r8, r0
   17270:	str	lr, [sp, #20]
   17274:	mov	r2, r4
   17278:	mov	r1, r7
   1727c:	mov	r0, r8
   17280:	bl	113d8 <write@plt>
   17284:	subs	r6, r0, #0
   17288:	bge	172bc <__assert_fail@plt+0x5ddc>
   1728c:	bl	1139c <__errno_location@plt>
   17290:	ldr	r2, [r0]
   17294:	cmp	r2, #4
   17298:	beq	17274 <__assert_fail@plt+0x5d94>
   1729c:	sub	r3, r2, #22
   172a0:	cmp	r4, r5
   172a4:	clz	r3, r3
   172a8:	mov	r4, r5
   172ac:	lsr	r3, r3, #5
   172b0:	movls	r3, #0
   172b4:	cmp	r3, #0
   172b8:	bne	17274 <__assert_fail@plt+0x5d94>
   172bc:	mov	r0, r6
   172c0:	ldrd	r4, [sp]
   172c4:	ldrd	r6, [sp, #8]
   172c8:	ldr	r8, [sp, #16]
   172cc:	add	sp, sp, #20
   172d0:	pop	{pc}		; (ldr pc, [sp], #4)
   172d4:	strd	r4, [sp, #-20]!	; 0xffffffec
   172d8:	strd	r6, [sp, #8]
   172dc:	mov	r6, r1
   172e0:	str	lr, [sp, #16]
   172e4:	sub	sp, sp, #12
   172e8:	ldrb	r3, [r0]
   172ec:	sub	r3, r3, #48	; 0x30
   172f0:	cmp	r3, #9
   172f4:	bls	17358 <__assert_fail@plt+0x5e78>
   172f8:	mov	r7, r0
   172fc:	ldr	r5, [pc, #352]	; 17464 <__assert_fail@plt+0x5f84>
   17300:	mov	r4, #0
   17304:	b	17314 <__assert_fail@plt+0x5e34>
   17308:	add	r4, r4, #1
   1730c:	cmp	r4, #35	; 0x23
   17310:	beq	1738c <__assert_fail@plt+0x5eac>
   17314:	mov	r0, r5
   17318:	mov	r1, r7
   1731c:	bl	11168 <strcmp@plt>
   17320:	cmp	r0, #0
   17324:	add	r5, r5, #12
   17328:	bne	17308 <__assert_fail@plt+0x5e28>
   1732c:	add	r4, r4, r4, lsl #1
   17330:	movw	r3, #45484	; 0xb1ac
   17334:	movt	r3, #2
   17338:	ldr	r4, [r3, r4, lsl #2]
   1733c:	asr	r0, r4, #31
   17340:	str	r4, [r6]
   17344:	add	sp, sp, #12
   17348:	ldrd	r4, [sp]
   1734c:	ldrd	r6, [sp, #8]
   17350:	add	sp, sp, #16
   17354:	pop	{pc}		; (ldr pc, [sp], #4)
   17358:	mov	r2, #10
   1735c:	add	r1, sp, #4
   17360:	bl	11174 <strtol@plt>
   17364:	ldr	r2, [sp, #4]
   17368:	mov	r4, r0
   1736c:	ldrb	r2, [r2]
   17370:	cmp	r0, #64	; 0x40
   17374:	cmple	r2, #0
   17378:	beq	1733c <__assert_fail@plt+0x5e5c>
   1737c:	mvn	r3, #0
   17380:	mov	r0, r3
   17384:	str	r3, [r6]
   17388:	b	17344 <__assert_fail@plt+0x5e64>
   1738c:	bl	114a4 <__libc_current_sigrtmin@plt>
   17390:	mov	r5, r0
   17394:	bl	11360 <__libc_current_sigrtmax@plt>
   17398:	cmp	r5, #0
   1739c:	mov	r4, r0
   173a0:	ble	173c0 <__assert_fail@plt+0x5ee0>
   173a4:	movw	r1, #42576	; 0xa650
   173a8:	movt	r1, #1
   173ac:	mov	r2, #5
   173b0:	mov	r0, r7
   173b4:	bl	114b0 <strncmp@plt>
   173b8:	cmp	r0, #0
   173bc:	beq	1742c <__assert_fail@plt+0x5f4c>
   173c0:	cmp	r4, #0
   173c4:	ble	1737c <__assert_fail@plt+0x5e9c>
   173c8:	movw	r1, #42584	; 0xa658
   173cc:	movt	r1, #1
   173d0:	mov	r2, #5
   173d4:	mov	r0, r7
   173d8:	bl	114b0 <strncmp@plt>
   173dc:	cmp	r0, #0
   173e0:	bne	1737c <__assert_fail@plt+0x5e9c>
   173e4:	add	r0, r7, #5
   173e8:	mov	r2, #10
   173ec:	add	r1, sp, #4
   173f0:	bl	11174 <strtol@plt>
   173f4:	ldr	r3, [sp, #4]
   173f8:	ldrb	r3, [r3]
   173fc:	cmp	r3, #0
   17400:	bne	1737c <__assert_fail@plt+0x5e9c>
   17404:	sub	r3, r5, r4
   17408:	cmp	r0, r3
   1740c:	movlt	r5, #0
   17410:	movge	r5, #1
   17414:	cmp	r0, #0
   17418:	movgt	r5, #0
   1741c:	cmp	r5, #0
   17420:	beq	1737c <__assert_fail@plt+0x5e9c>
   17424:	add	r4, r4, r0
   17428:	b	1733c <__assert_fail@plt+0x5e5c>
   1742c:	add	r0, r7, #5
   17430:	mov	r2, #10
   17434:	add	r1, sp, #4
   17438:	bl	11174 <strtol@plt>
   1743c:	ldr	r3, [sp, #4]
   17440:	ldrb	r3, [r3]
   17444:	cmp	r0, #0
   17448:	cmpge	r3, #0
   1744c:	bne	1737c <__assert_fail@plt+0x5e9c>
   17450:	sub	r3, r4, r5
   17454:	cmp	r0, r3
   17458:	bgt	1737c <__assert_fail@plt+0x5e9c>
   1745c:	add	r4, r5, r0
   17460:	b	1733c <__assert_fail@plt+0x5e5c>
   17464:			; <UNDEFINED> instruction: 0x0002b1b0
   17468:	strd	r4, [sp, #-16]!
   1746c:	mov	r3, #0
   17470:	mov	r4, r0
   17474:	mov	r5, r1
   17478:	str	r6, [sp, #8]
   1747c:	str	lr, [sp, #12]
   17480:	movw	lr, #45484	; 0xb1ac
   17484:	movt	lr, #2
   17488:	sub	sp, sp, #8
   1748c:	mov	r2, lr
   17490:	b	174a0 <__assert_fail@plt+0x5fc0>
   17494:	add	r3, r3, #1
   17498:	cmp	r3, #35	; 0x23
   1749c:	beq	174e0 <__assert_fail@plt+0x6000>
   174a0:	ldr	ip, [r2]
   174a4:	add	r2, r2, #12
   174a8:	cmp	ip, r4
   174ac:	bne	17494 <__assert_fail@plt+0x5fb4>
   174b0:	add	r3, r3, r3, lsl #1
   174b4:	mov	r0, r5
   174b8:	mov	r4, #0
   174bc:	add	r3, lr, r3, lsl #2
   174c0:	add	r1, r3, #4
   174c4:	bl	112ac <strcpy@plt>
   174c8:	mov	r0, r4
   174cc:	add	sp, sp, #8
   174d0:	ldrd	r4, [sp]
   174d4:	ldr	r6, [sp, #8]
   174d8:	add	sp, sp, #12
   174dc:	pop	{pc}		; (ldr pc, [sp], #4)
   174e0:	bl	114a4 <__libc_current_sigrtmin@plt>
   174e4:	mov	r6, r0
   174e8:	bl	11360 <__libc_current_sigrtmax@plt>
   174ec:	cmp	r4, r0
   174f0:	movle	r3, #0
   174f4:	movgt	r3, #1
   174f8:	cmp	r4, r6
   174fc:	orrlt	r3, r3, #1
   17500:	cmp	r3, #0
   17504:	bne	1757c <__assert_fail@plt+0x609c>
   17508:	sub	r3, r0, r6
   1750c:	add	r3, r6, r3, asr #1
   17510:	cmp	r3, r4
   17514:	bge	17560 <__assert_fail@plt+0x6080>
   17518:	movw	r3, #42584	; 0xa658
   1751c:	movt	r3, #1
   17520:	ldr	r2, [r3]
   17524:	mov	r6, r0
   17528:	ldrh	r3, [r3, #4]
   1752c:	str	r2, [r5]
   17530:	strh	r3, [r5, #4]
   17534:	subs	r4, r4, r6
   17538:	beq	174c8 <__assert_fail@plt+0x5fe8>
   1753c:	add	r0, r5, #5
   17540:	movw	r3, #42592	; 0xa660
   17544:	movt	r3, #1
   17548:	mvn	r2, #0
   1754c:	str	r4, [sp]
   17550:	mov	r1, #1
   17554:	mov	r4, #0
   17558:	bl	113a8 <__sprintf_chk@plt>
   1755c:	b	174c8 <__assert_fail@plt+0x5fe8>
   17560:	movw	r3, #42576	; 0xa650
   17564:	movt	r3, #1
   17568:	ldr	r2, [r3]
   1756c:	ldrh	r3, [r3, #4]
   17570:	str	r2, [r5]
   17574:	strh	r3, [r5, #4]
   17578:	b	17534 <__assert_fail@plt+0x6054>
   1757c:	mvn	r4, #0
   17580:	b	174c8 <__assert_fail@plt+0x5fe8>
   17584:	cmp	r0, #2
   17588:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1758c:	mov	r4, r0
   17590:	strd	r6, [sp, #8]
   17594:	str	r8, [sp, #16]
   17598:	str	lr, [sp, #20]
   1759c:	bls	175b8 <__assert_fail@plt+0x60d8>
   175a0:	mov	r0, r4
   175a4:	ldrd	r4, [sp]
   175a8:	ldrd	r6, [sp, #8]
   175ac:	ldr	r8, [sp, #16]
   175b0:	add	sp, sp, #20
   175b4:	pop	{pc}		; (ldr pc, [sp], #4)
   175b8:	bl	18dcc <__assert_fail@plt+0x78ec>
   175bc:	mov	r7, r0
   175c0:	bl	1139c <__errno_location@plt>
   175c4:	mov	r5, r0
   175c8:	mov	r0, r4
   175cc:	ldr	r6, [r5]
   175d0:	mov	r4, r7
   175d4:	bl	114c8 <close@plt>
   175d8:	str	r6, [r5]
   175dc:	b	175a0 <__assert_fail@plt+0x60c0>
   175e0:	cmp	r1, #0
   175e4:	strd	r4, [sp, #-16]!
   175e8:	mov	ip, r3
   175ec:	str	r6, [sp, #8]
   175f0:	mov	r4, r0
   175f4:	str	lr, [sp, #12]
   175f8:	sub	sp, sp, #32
   175fc:	ldr	r5, [sp, #48]	; 0x30
   17600:	ldr	r6, [sp, #52]	; 0x34
   17604:	beq	17748 <__assert_fail@plt+0x6268>
   17608:	mov	r3, r1
   1760c:	mov	r1, #1
   17610:	stm	sp, {r2, ip}
   17614:	movw	r2, #42596	; 0xa664
   17618:	movt	r2, #1
   1761c:	bl	113f0 <__fprintf_chk@plt>
   17620:	mov	r2, #5
   17624:	movw	r1, #42616	; 0xa678
   17628:	movt	r1, #1
   1762c:	mov	r0, #0
   17630:	bl	1121c <dcgettext@plt>
   17634:	movw	ip, #2022	; 0x7e6
   17638:	mov	r3, r0
   1763c:	mov	r1, #1
   17640:	movw	r2, #43344	; 0xa950
   17644:	movt	r2, #1
   17648:	mov	r0, r4
   1764c:	str	ip, [sp]
   17650:	bl	113f0 <__fprintf_chk@plt>
   17654:	mov	r1, r4
   17658:	mov	r0, #10
   1765c:	bl	11210 <fputc_unlocked@plt>
   17660:	mov	r2, #5
   17664:	movw	r1, #42620	; 0xa67c
   17668:	movt	r1, #1
   1766c:	mov	r0, #0
   17670:	bl	1121c <dcgettext@plt>
   17674:	mov	r2, r0
   17678:	mov	r1, #1
   1767c:	movw	r3, #42792	; 0xa728
   17680:	movt	r3, #1
   17684:	mov	r0, r4
   17688:	bl	113f0 <__fprintf_chk@plt>
   1768c:	mov	r1, r4
   17690:	mov	r0, #10
   17694:	bl	11210 <fputc_unlocked@plt>
   17698:	cmp	r6, #9
   1769c:	ldrls	pc, [pc, r6, lsl #2]
   176a0:	b	179b4 <__assert_fail@plt+0x64d4>
   176a4:	andeq	r7, r1, r4, lsr r7
   176a8:	andeq	r7, r1, r4, ror #14
   176ac:	andeq	r7, r1, r0, lsr #15
   176b0:	andeq	r7, r1, r0, ror #15
   176b4:	andeq	r7, r1, r8, lsr #16
   176b8:	andeq	r7, r1, r0, ror #16
   176bc:	andeq	r7, r1, r8, lsr #17
   176c0:	strdeq	r7, [r1], -ip
   176c4:	andeq	r7, r1, r4, asr r9
   176c8:	andeq	r7, r1, ip, asr #13
   176cc:	movw	r1, #43096	; 0xa858
   176d0:	movt	r1, #1
   176d4:	mov	r2, #5
   176d8:	mov	r0, #0
   176dc:	bl	1121c <dcgettext@plt>
   176e0:	ldr	lr, [r5, #4]
   176e4:	mov	r2, r0
   176e8:	mov	r1, #1
   176ec:	mov	r0, r4
   176f0:	ldr	r3, [r5, #8]
   176f4:	ldr	ip, [r5, #32]
   176f8:	str	lr, [sp]
   176fc:	ldr	lr, [r5, #12]
   17700:	str	ip, [sp, #28]
   17704:	ldr	ip, [r5, #28]
   17708:	str	r3, [sp, #4]
   1770c:	ldr	r3, [r5, #16]
   17710:	str	lr, [sp, #8]
   17714:	ldr	lr, [r5, #20]
   17718:	str	ip, [sp, #24]
   1771c:	ldr	ip, [r5, #24]
   17720:	str	r3, [sp, #12]
   17724:	ldr	r3, [r5]
   17728:	str	lr, [sp, #16]
   1772c:	str	ip, [sp, #20]
   17730:	bl	113f0 <__fprintf_chk@plt>
   17734:	add	sp, sp, #32
   17738:	ldrd	r4, [sp]
   1773c:	ldr	r6, [sp, #8]
   17740:	add	sp, sp, #12
   17744:	pop	{pc}		; (ldr pc, [sp], #4)
   17748:	mov	r3, r2
   1774c:	mov	r1, #1
   17750:	str	ip, [sp]
   17754:	movw	r2, #42608	; 0xa670
   17758:	movt	r2, #1
   1775c:	bl	113f0 <__fprintf_chk@plt>
   17760:	b	17620 <__assert_fail@plt+0x6140>
   17764:	mov	r2, #5
   17768:	movw	r1, #42828	; 0xa74c
   1776c:	movt	r1, #1
   17770:	mov	r0, #0
   17774:	bl	1121c <dcgettext@plt>
   17778:	ldr	r3, [r5]
   1777c:	mov	r2, r0
   17780:	mov	r1, #1
   17784:	mov	r0, r4
   17788:	add	sp, sp, #32
   1778c:	ldrd	r4, [sp]
   17790:	ldr	r6, [sp, #8]
   17794:	ldr	lr, [sp, #12]
   17798:	add	sp, sp, #16
   1779c:	b	113f0 <__fprintf_chk@plt>
   177a0:	mov	r2, #5
   177a4:	movw	r1, #42844	; 0xa75c
   177a8:	movt	r1, #1
   177ac:	mov	r0, #0
   177b0:	bl	1121c <dcgettext@plt>
   177b4:	ldm	r5, {r3, ip}
   177b8:	mov	r2, r0
   177bc:	mov	r1, #1
   177c0:	mov	r0, r4
   177c4:	str	ip, [sp, #48]	; 0x30
   177c8:	add	sp, sp, #32
   177cc:	ldrd	r4, [sp]
   177d0:	ldr	r6, [sp, #8]
   177d4:	ldr	lr, [sp, #12]
   177d8:	add	sp, sp, #16
   177dc:	b	113f0 <__fprintf_chk@plt>
   177e0:	mov	r2, #5
   177e4:	movw	r1, #42868	; 0xa774
   177e8:	movt	r1, #1
   177ec:	mov	r0, #0
   177f0:	bl	1121c <dcgettext@plt>
   177f4:	ldm	r5, {r3, lr}
   177f8:	mov	r2, r0
   177fc:	mov	r1, #1
   17800:	mov	r0, r4
   17804:	ldr	ip, [r5, #8]
   17808:	str	lr, [sp, #48]	; 0x30
   1780c:	str	ip, [sp, #52]	; 0x34
   17810:	add	sp, sp, #32
   17814:	ldrd	r4, [sp]
   17818:	ldr	r6, [sp, #8]
   1781c:	ldr	lr, [sp, #12]
   17820:	add	sp, sp, #16
   17824:	b	113f0 <__fprintf_chk@plt>
   17828:	mov	r2, #5
   1782c:	movw	r1, #42896	; 0xa790
   17830:	movt	r1, #1
   17834:	mov	r0, #0
   17838:	bl	1121c <dcgettext@plt>
   1783c:	ldmib	r5, {r3, ip, lr}
   17840:	mov	r2, r0
   17844:	mov	r1, #1
   17848:	mov	r0, r4
   1784c:	str	r3, [sp]
   17850:	ldr	r3, [r5]
   17854:	stmib	sp, {ip, lr}
   17858:	bl	113f0 <__fprintf_chk@plt>
   1785c:	b	17734 <__assert_fail@plt+0x6254>
   17860:	mov	r2, #5
   17864:	movw	r1, #42928	; 0xa7b0
   17868:	movt	r1, #1
   1786c:	mov	r0, #0
   17870:	bl	1121c <dcgettext@plt>
   17874:	ldmib	r5, {ip, lr}
   17878:	mov	r2, r0
   1787c:	mov	r1, #1
   17880:	mov	r0, r4
   17884:	ldr	r3, [r5, #16]
   17888:	str	ip, [sp]
   1788c:	ldr	ip, [r5, #12]
   17890:	str	r3, [sp, #12]
   17894:	ldr	r3, [r5]
   17898:	str	lr, [sp, #4]
   1789c:	str	ip, [sp, #8]
   178a0:	bl	113f0 <__fprintf_chk@plt>
   178a4:	b	17734 <__assert_fail@plt+0x6254>
   178a8:	mov	r2, #5
   178ac:	movw	r1, #42964	; 0xa7d4
   178b0:	movt	r1, #1
   178b4:	mov	r0, #0
   178b8:	bl	1121c <dcgettext@plt>
   178bc:	ldr	lr, [r5, #4]
   178c0:	mov	r2, r0
   178c4:	mov	r1, #1
   178c8:	mov	r0, r4
   178cc:	ldr	r3, [r5, #8]
   178d0:	ldr	ip, [r5, #20]
   178d4:	str	lr, [sp]
   178d8:	ldr	lr, [r5, #12]
   178dc:	str	ip, [sp, #16]
   178e0:	ldr	ip, [r5, #16]
   178e4:	str	r3, [sp, #4]
   178e8:	ldr	r3, [r5]
   178ec:	str	lr, [sp, #8]
   178f0:	str	ip, [sp, #12]
   178f4:	bl	113f0 <__fprintf_chk@plt>
   178f8:	b	17734 <__assert_fail@plt+0x6254>
   178fc:	mov	r2, #5
   17900:	movw	r1, #43004	; 0xa7fc
   17904:	movt	r1, #1
   17908:	mov	r0, #0
   1790c:	bl	1121c <dcgettext@plt>
   17910:	ldmib	r5, {r3, ip}
   17914:	mov	r2, r0
   17918:	mov	r1, #1
   1791c:	mov	r0, r4
   17920:	ldr	lr, [r5, #24]
   17924:	str	r3, [sp]
   17928:	ldr	r3, [r5, #12]
   1792c:	str	lr, [sp, #20]
   17930:	ldr	lr, [r5, #20]
   17934:	str	ip, [sp, #4]
   17938:	ldr	ip, [r5, #16]
   1793c:	str	r3, [sp, #8]
   17940:	ldr	r3, [r5]
   17944:	str	ip, [sp, #12]
   17948:	str	lr, [sp, #16]
   1794c:	bl	113f0 <__fprintf_chk@plt>
   17950:	b	17734 <__assert_fail@plt+0x6254>
   17954:	mov	r2, #5
   17958:	movw	r1, #43048	; 0xa828
   1795c:	movt	r1, #1
   17960:	mov	r0, #0
   17964:	bl	1121c <dcgettext@plt>
   17968:	ldmib	r5, {ip, lr}
   1796c:	mov	r2, r0
   17970:	mov	r1, #1
   17974:	mov	r0, r4
   17978:	ldr	r3, [r5, #28]
   1797c:	str	ip, [sp]
   17980:	ldr	ip, [r5, #12]
   17984:	str	r3, [sp, #24]
   17988:	ldr	r3, [r5, #24]
   1798c:	str	lr, [sp, #4]
   17990:	ldr	lr, [r5, #16]
   17994:	str	ip, [sp, #8]
   17998:	ldr	ip, [r5, #20]
   1799c:	str	r3, [sp, #20]
   179a0:	ldr	r3, [r5]
   179a4:	str	lr, [sp, #12]
   179a8:	str	ip, [sp, #16]
   179ac:	bl	113f0 <__fprintf_chk@plt>
   179b0:	b	17734 <__assert_fail@plt+0x6254>
   179b4:	movw	r1, #43148	; 0xa88c
   179b8:	movt	r1, #1
   179bc:	b	176d4 <__assert_fail@plt+0x61f4>
   179c0:	strd	r4, [sp, #-12]!
   179c4:	str	lr, [sp, #8]
   179c8:	sub	sp, sp, #12
   179cc:	ldr	r5, [sp, #24]
   179d0:	ldr	ip, [r5]
   179d4:	cmp	ip, #0
   179d8:	beq	179f4 <__assert_fail@plt+0x6514>
   179dc:	mov	lr, r5
   179e0:	mov	ip, #0
   179e4:	ldr	r4, [lr, #4]!
   179e8:	add	ip, ip, #1
   179ec:	cmp	r4, #0
   179f0:	bne	179e4 <__assert_fail@plt+0x6504>
   179f4:	stm	sp, {r5, ip}
   179f8:	bl	175e0 <__assert_fail@plt+0x6100>
   179fc:	add	sp, sp, #12
   17a00:	ldrd	r4, [sp]
   17a04:	add	sp, sp, #8
   17a08:	pop	{pc}		; (ldr pc, [sp], #4)
   17a0c:	strd	r4, [sp, #-16]!
   17a10:	mov	ip, #0
   17a14:	str	r6, [sp, #8]
   17a18:	str	lr, [sp, #12]
   17a1c:	sub	sp, sp, #48	; 0x30
   17a20:	ldr	r5, [sp, #64]	; 0x40
   17a24:	add	r6, sp, #8
   17a28:	mov	r4, r6
   17a2c:	ldr	lr, [r5], #4
   17a30:	cmp	lr, #0
   17a34:	str	lr, [r4], #4
   17a38:	beq	17a48 <__assert_fail@plt+0x6568>
   17a3c:	add	ip, ip, #1
   17a40:	cmp	ip, #10
   17a44:	bne	17a2c <__assert_fail@plt+0x654c>
   17a48:	stm	sp, {r6, ip}
   17a4c:	bl	175e0 <__assert_fail@plt+0x6100>
   17a50:	add	sp, sp, #48	; 0x30
   17a54:	ldrd	r4, [sp]
   17a58:	ldr	r6, [sp, #8]
   17a5c:	add	sp, sp, #12
   17a60:	pop	{pc}		; (ldr pc, [sp], #4)
   17a64:	push	{r3}		; (str r3, [sp, #-4]!)
   17a68:	mov	ip, #0
   17a6c:	strd	r4, [sp, #-12]!
   17a70:	str	lr, [sp, #8]
   17a74:	sub	sp, sp, #56	; 0x38
   17a78:	add	r3, sp, #72	; 0x48
   17a7c:	add	r5, sp, #16
   17a80:	mov	r4, r3
   17a84:	mov	lr, r5
   17a88:	str	r3, [sp, #12]
   17a8c:	ldr	r3, [r4], #4
   17a90:	cmp	r3, #0
   17a94:	str	r3, [lr], #4
   17a98:	beq	17aa8 <__assert_fail@plt+0x65c8>
   17a9c:	add	ip, ip, #1
   17aa0:	cmp	ip, #10
   17aa4:	bne	17a8c <__assert_fail@plt+0x65ac>
   17aa8:	ldr	r3, [sp, #68]	; 0x44
   17aac:	stm	sp, {r5, ip}
   17ab0:	bl	175e0 <__assert_fail@plt+0x6100>
   17ab4:	add	sp, sp, #56	; 0x38
   17ab8:	ldrd	r4, [sp]
   17abc:	ldr	lr, [sp, #8]
   17ac0:	add	sp, sp, #12
   17ac4:	add	sp, sp, #4
   17ac8:	bx	lr
   17acc:	movw	r3, #45924	; 0xb364
   17ad0:	movt	r3, #2
   17ad4:	str	r4, [sp, #-8]!
   17ad8:	mov	r0, #10
   17adc:	ldr	r1, [r3]
   17ae0:	str	lr, [sp, #4]
   17ae4:	bl	11210 <fputc_unlocked@plt>
   17ae8:	mov	r2, #5
   17aec:	movw	r1, #43208	; 0xa8c8
   17af0:	movt	r1, #1
   17af4:	mov	r0, #0
   17af8:	bl	1121c <dcgettext@plt>
   17afc:	mov	r1, r0
   17b00:	movw	r2, #43228	; 0xa8dc
   17b04:	movt	r2, #1
   17b08:	mov	r0, #1
   17b0c:	bl	113cc <__printf_chk@plt>
   17b10:	mov	r2, #5
   17b14:	movw	r1, #43252	; 0xa8f4
   17b18:	movt	r1, #1
   17b1c:	mov	r0, #0
   17b20:	bl	1121c <dcgettext@plt>
   17b24:	mov	r1, r0
   17b28:	movw	r3, #40800	; 0x9f60
   17b2c:	movt	r3, #1
   17b30:	movw	r2, #40840	; 0x9f88
   17b34:	movt	r2, #1
   17b38:	mov	r0, #1
   17b3c:	bl	113cc <__printf_chk@plt>
   17b40:	mov	r2, #5
   17b44:	movw	r1, #43272	; 0xa908
   17b48:	movt	r1, #1
   17b4c:	mov	r0, #0
   17b50:	bl	1121c <dcgettext@plt>
   17b54:	mov	r1, r0
   17b58:	movw	r2, #43312	; 0xa930
   17b5c:	movt	r2, #1
   17b60:	mov	r0, #1
   17b64:	ldr	r4, [sp]
   17b68:	ldr	lr, [sp, #4]
   17b6c:	add	sp, sp, #8
   17b70:	b	113cc <__printf_chk@plt>
   17b74:	str	r4, [sp, #-8]!
   17b78:	str	lr, [sp, #4]
   17b7c:	bl	11498 <aligned_alloc@plt>
   17b80:	cmp	r0, #0
   17b84:	beq	17b94 <__assert_fail@plt+0x66b4>
   17b88:	ldr	r4, [sp]
   17b8c:	add	sp, sp, #4
   17b90:	pop	{pc}		; (ldr pc, [sp], #4)
   17b94:	bl	18010 <__assert_fail@plt+0x6b30>
   17b98:	str	r4, [sp, #-8]!
   17b9c:	str	lr, [sp, #4]
   17ba0:	bl	18bbc <__assert_fail@plt+0x76dc>
   17ba4:	cmp	r0, #0
   17ba8:	beq	17bb8 <__assert_fail@plt+0x66d8>
   17bac:	ldr	r4, [sp]
   17bb0:	add	sp, sp, #4
   17bb4:	pop	{pc}		; (ldr pc, [sp], #4)
   17bb8:	bl	18010 <__assert_fail@plt+0x6b30>
   17bbc:	str	r4, [sp, #-8]!
   17bc0:	str	lr, [sp, #4]
   17bc4:	bl	18bbc <__assert_fail@plt+0x76dc>
   17bc8:	cmp	r0, #0
   17bcc:	beq	17bdc <__assert_fail@plt+0x66fc>
   17bd0:	ldr	r4, [sp]
   17bd4:	add	sp, sp, #4
   17bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   17bdc:	bl	18010 <__assert_fail@plt+0x6b30>
   17be0:	str	r4, [sp, #-8]!
   17be4:	str	lr, [sp, #4]
   17be8:	bl	18bbc <__assert_fail@plt+0x76dc>
   17bec:	cmp	r0, #0
   17bf0:	beq	17c00 <__assert_fail@plt+0x6720>
   17bf4:	ldr	r4, [sp]
   17bf8:	add	sp, sp, #4
   17bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   17c00:	bl	18010 <__assert_fail@plt+0x6b30>
   17c04:	strd	r4, [sp, #-16]!
   17c08:	mov	r5, r0
   17c0c:	mov	r4, r1
   17c10:	str	r6, [sp, #8]
   17c14:	str	lr, [sp, #12]
   17c18:	bl	18bf8 <__assert_fail@plt+0x7718>
   17c1c:	cmp	r0, #0
   17c20:	beq	17c34 <__assert_fail@plt+0x6754>
   17c24:	ldrd	r4, [sp]
   17c28:	ldr	r6, [sp, #8]
   17c2c:	add	sp, sp, #12
   17c30:	pop	{pc}		; (ldr pc, [sp], #4)
   17c34:	adds	r4, r4, #0
   17c38:	movne	r4, #1
   17c3c:	cmp	r5, #0
   17c40:	moveq	r4, #1
   17c44:	cmp	r4, #0
   17c48:	beq	17c24 <__assert_fail@plt+0x6744>
   17c4c:	bl	18010 <__assert_fail@plt+0x6b30>
   17c50:	cmp	r1, #0
   17c54:	orreq	r1, r1, #1
   17c58:	str	r4, [sp, #-8]!
   17c5c:	str	lr, [sp, #4]
   17c60:	bl	18bf8 <__assert_fail@plt+0x7718>
   17c64:	cmp	r0, #0
   17c68:	beq	17c78 <__assert_fail@plt+0x6798>
   17c6c:	ldr	r4, [sp]
   17c70:	add	sp, sp, #4
   17c74:	pop	{pc}		; (ldr pc, [sp], #4)
   17c78:	bl	18010 <__assert_fail@plt+0x6b30>
   17c7c:	strd	r4, [sp, #-16]!
   17c80:	mov	r4, r0
   17c84:	mov	r5, r2
   17c88:	str	r6, [sp, #8]
   17c8c:	mov	r6, r1
   17c90:	str	lr, [sp, #12]
   17c94:	bl	18d94 <__assert_fail@plt+0x78b4>
   17c98:	cmp	r0, #0
   17c9c:	beq	17cb0 <__assert_fail@plt+0x67d0>
   17ca0:	ldrd	r4, [sp]
   17ca4:	ldr	r6, [sp, #8]
   17ca8:	add	sp, sp, #12
   17cac:	pop	{pc}		; (ldr pc, [sp], #4)
   17cb0:	cmp	r4, #0
   17cb4:	beq	17cc4 <__assert_fail@plt+0x67e4>
   17cb8:	cmp	r6, #0
   17cbc:	cmpne	r5, #0
   17cc0:	beq	17ca0 <__assert_fail@plt+0x67c0>
   17cc4:	bl	18010 <__assert_fail@plt+0x6b30>
   17cc8:	b	17c7c <__assert_fail@plt+0x679c>
   17ccc:	cmp	r2, #0
   17cd0:	cmpne	r1, #0
   17cd4:	str	r4, [sp, #-8]!
   17cd8:	moveq	r2, #1
   17cdc:	str	lr, [sp, #4]
   17ce0:	moveq	r1, r2
   17ce4:	bl	18d94 <__assert_fail@plt+0x78b4>
   17ce8:	cmp	r0, #0
   17cec:	beq	17cfc <__assert_fail@plt+0x681c>
   17cf0:	ldr	r4, [sp]
   17cf4:	add	sp, sp, #4
   17cf8:	pop	{pc}		; (ldr pc, [sp], #4)
   17cfc:	bl	18010 <__assert_fail@plt+0x6b30>
   17d00:	mov	r2, r1
   17d04:	mov	r1, r0
   17d08:	mov	r0, #0
   17d0c:	b	17c7c <__assert_fail@plt+0x679c>
   17d10:	mov	r2, r1
   17d14:	mov	r1, r0
   17d18:	mov	r0, #0
   17d1c:	b	17ccc <__assert_fail@plt+0x67ec>
   17d20:	cmp	r0, #0
   17d24:	strd	r4, [sp, #-16]!
   17d28:	mov	r5, r1
   17d2c:	ldr	r4, [r1]
   17d30:	str	r6, [sp, #8]
   17d34:	str	lr, [sp, #12]
   17d38:	beq	17d68 <__assert_fail@plt+0x6888>
   17d3c:	lsr	r3, r4, #1
   17d40:	add	r3, r3, #1
   17d44:	adds	r4, r4, r3
   17d48:	bcs	17d84 <__assert_fail@plt+0x68a4>
   17d4c:	mov	r1, r4
   17d50:	bl	17c7c <__assert_fail@plt+0x679c>
   17d54:	ldr	r6, [sp, #8]
   17d58:	str	r4, [r5]
   17d5c:	ldrd	r4, [sp]
   17d60:	add	sp, sp, #12
   17d64:	pop	{pc}		; (ldr pc, [sp], #4)
   17d68:	cmp	r4, #0
   17d6c:	bne	17d4c <__assert_fail@plt+0x686c>
   17d70:	mov	r4, #64	; 0x40
   17d74:	udiv	r4, r4, r2
   17d78:	cmp	r2, #64	; 0x40
   17d7c:	addhi	r4, r4, #1
   17d80:	b	17d4c <__assert_fail@plt+0x686c>
   17d84:	bl	18010 <__assert_fail@plt+0x6b30>
   17d88:	mov	r2, #1
   17d8c:	b	17d20 <__assert_fail@plt+0x6840>
   17d90:	ldr	ip, [r1]
   17d94:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17d98:	mov	r5, r1
   17d9c:	strd	r6, [sp, #8]
   17da0:	str	lr, [sp, #28]
   17da4:	strd	r8, [sp, #16]
   17da8:	asr	lr, ip, #1
   17dac:	ldr	r8, [sp, #32]
   17db0:	str	sl, [sp, #24]
   17db4:	adds	r4, ip, lr
   17db8:	mvn	lr, r3
   17dbc:	lsr	lr, lr, #31
   17dc0:	mvnvs	r4, #-2147483648	; 0x80000000
   17dc4:	cmp	r3, r4
   17dc8:	movge	r1, #0
   17dcc:	andlt	r1, lr, #1
   17dd0:	cmp	r1, #0
   17dd4:	movne	r4, r3
   17dd8:	smull	r6, r7, r4, r8
   17ddc:	cmp	r7, r6, asr #31
   17de0:	bne	17e68 <__assert_fail@plt+0x6988>
   17de4:	cmp	r6, #63	; 0x3f
   17de8:	mov	r1, r6
   17dec:	ble	17e50 <__assert_fail@plt+0x6970>
   17df0:	cmp	r0, #0
   17df4:	sub	r6, r4, ip
   17df8:	streq	r0, [r5]
   17dfc:	cmp	r6, r2
   17e00:	bge	17e30 <__assert_fail@plt+0x6950>
   17e04:	adds	r4, ip, r2
   17e08:	bvs	17e64 <__assert_fail@plt+0x6984>
   17e0c:	cmp	r4, r3
   17e10:	movle	r3, #0
   17e14:	andgt	r3, lr, #1
   17e18:	cmp	r3, #0
   17e1c:	bne	17e64 <__assert_fail@plt+0x6984>
   17e20:	smull	r8, r9, r4, r8
   17e24:	cmp	r9, r8, asr #31
   17e28:	mov	r1, r8
   17e2c:	bne	17e64 <__assert_fail@plt+0x6984>
   17e30:	bl	17c04 <__assert_fail@plt+0x6724>
   17e34:	ldrd	r6, [sp, #8]
   17e38:	ldrd	r8, [sp, #16]
   17e3c:	ldr	sl, [sp, #24]
   17e40:	str	r4, [r5]
   17e44:	ldrd	r4, [sp]
   17e48:	add	sp, sp, #28
   17e4c:	pop	{pc}		; (ldr pc, [sp], #4)
   17e50:	mov	r6, #64	; 0x40
   17e54:	sdiv	r4, r6, r8
   17e58:	mls	r1, r8, r4, r6
   17e5c:	sub	r1, r6, r1
   17e60:	b	17df0 <__assert_fail@plt+0x6910>
   17e64:	bl	18010 <__assert_fail@plt+0x6b30>
   17e68:	mvn	r6, #-2147483648	; 0x80000000
   17e6c:	b	17e54 <__assert_fail@plt+0x6974>
   17e70:	mov	r1, #1
   17e74:	str	r4, [sp, #-8]!
   17e78:	str	lr, [sp, #4]
   17e7c:	bl	18b48 <__assert_fail@plt+0x7668>
   17e80:	cmp	r0, #0
   17e84:	beq	17e94 <__assert_fail@plt+0x69b4>
   17e88:	ldr	r4, [sp]
   17e8c:	add	sp, sp, #4
   17e90:	pop	{pc}		; (ldr pc, [sp], #4)
   17e94:	bl	18010 <__assert_fail@plt+0x6b30>
   17e98:	mov	r1, #1
   17e9c:	str	r4, [sp, #-8]!
   17ea0:	str	lr, [sp, #4]
   17ea4:	bl	18b48 <__assert_fail@plt+0x7668>
   17ea8:	cmp	r0, #0
   17eac:	beq	17ebc <__assert_fail@plt+0x69dc>
   17eb0:	ldr	r4, [sp]
   17eb4:	add	sp, sp, #4
   17eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   17ebc:	bl	18010 <__assert_fail@plt+0x6b30>
   17ec0:	str	r4, [sp, #-8]!
   17ec4:	str	lr, [sp, #4]
   17ec8:	bl	18b48 <__assert_fail@plt+0x7668>
   17ecc:	cmp	r0, #0
   17ed0:	beq	17ee0 <__assert_fail@plt+0x6a00>
   17ed4:	ldr	r4, [sp]
   17ed8:	add	sp, sp, #4
   17edc:	pop	{pc}		; (ldr pc, [sp], #4)
   17ee0:	bl	18010 <__assert_fail@plt+0x6b30>
   17ee4:	str	r4, [sp, #-8]!
   17ee8:	str	lr, [sp, #4]
   17eec:	bl	18b48 <__assert_fail@plt+0x7668>
   17ef0:	cmp	r0, #0
   17ef4:	beq	17f04 <__assert_fail@plt+0x6a24>
   17ef8:	ldr	r4, [sp]
   17efc:	add	sp, sp, #4
   17f00:	pop	{pc}		; (ldr pc, [sp], #4)
   17f04:	bl	18010 <__assert_fail@plt+0x6b30>
   17f08:	strd	r4, [sp, #-16]!
   17f0c:	mov	r4, r1
   17f10:	str	r6, [sp, #8]
   17f14:	mov	r6, r0
   17f18:	mov	r0, r1
   17f1c:	str	lr, [sp, #12]
   17f20:	bl	18bbc <__assert_fail@plt+0x76dc>
   17f24:	subs	r5, r0, #0
   17f28:	beq	17f4c <__assert_fail@plt+0x6a6c>
   17f2c:	mov	r2, r4
   17f30:	mov	r1, r6
   17f34:	bl	111c8 <memcpy@plt>
   17f38:	mov	r0, r5
   17f3c:	ldrd	r4, [sp]
   17f40:	ldr	r6, [sp, #8]
   17f44:	add	sp, sp, #12
   17f48:	pop	{pc}		; (ldr pc, [sp], #4)
   17f4c:	bl	18010 <__assert_fail@plt+0x6b30>
   17f50:	strd	r4, [sp, #-16]!
   17f54:	mov	r4, r1
   17f58:	str	r6, [sp, #8]
   17f5c:	mov	r6, r0
   17f60:	mov	r0, r1
   17f64:	str	lr, [sp, #12]
   17f68:	bl	18bbc <__assert_fail@plt+0x76dc>
   17f6c:	subs	r5, r0, #0
   17f70:	beq	17f94 <__assert_fail@plt+0x6ab4>
   17f74:	mov	r2, r4
   17f78:	mov	r1, r6
   17f7c:	bl	111c8 <memcpy@plt>
   17f80:	mov	r0, r5
   17f84:	ldrd	r4, [sp]
   17f88:	ldr	r6, [sp, #8]
   17f8c:	add	sp, sp, #12
   17f90:	pop	{pc}		; (ldr pc, [sp], #4)
   17f94:	bl	18010 <__assert_fail@plt+0x6b30>
   17f98:	strd	r4, [sp, #-16]!
   17f9c:	mov	r4, r1
   17fa0:	str	r6, [sp, #8]
   17fa4:	mov	r6, r0
   17fa8:	add	r0, r1, #1
   17fac:	str	lr, [sp, #12]
   17fb0:	bl	18bbc <__assert_fail@plt+0x76dc>
   17fb4:	subs	r5, r0, #0
   17fb8:	beq	17fe4 <__assert_fail@plt+0x6b04>
   17fbc:	mov	r3, #0
   17fc0:	mov	r1, r6
   17fc4:	mov	r2, r4
   17fc8:	strb	r3, [r5, r4]
   17fcc:	bl	111c8 <memcpy@plt>
   17fd0:	mov	r0, r5
   17fd4:	ldrd	r4, [sp]
   17fd8:	ldr	r6, [sp, #8]
   17fdc:	add	sp, sp, #12
   17fe0:	pop	{pc}		; (ldr pc, [sp], #4)
   17fe4:	bl	18010 <__assert_fail@plt+0x6b30>
   17fe8:	str	r4, [sp, #-8]!
   17fec:	mov	r4, r0
   17ff0:	str	lr, [sp, #4]
   17ff4:	bl	11354 <strlen@plt>
   17ff8:	add	r1, r0, #1
   17ffc:	mov	r0, r4
   18000:	ldr	r4, [sp]
   18004:	ldr	lr, [sp, #4]
   18008:	add	sp, sp, #8
   1800c:	b	17f08 <__assert_fail@plt+0x6a28>
   18010:	movw	r3, #45416	; 0xb168
   18014:	movt	r3, #2
   18018:	str	r4, [sp, #-8]!
   1801c:	ldr	r4, [r3]
   18020:	mov	r2, #5
   18024:	movw	r1, #43392	; 0xa980
   18028:	movt	r1, #1
   1802c:	mov	r0, #0
   18030:	str	lr, [sp, #4]
   18034:	bl	1121c <dcgettext@plt>
   18038:	mov	r3, r0
   1803c:	movw	r2, #38544	; 0x9690
   18040:	movt	r2, #1
   18044:	mov	r1, #0
   18048:	mov	r0, r4
   1804c:	bl	112d0 <error@plt>
   18050:	bl	114bc <abort@plt>
   18054:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18058:	strd	r6, [sp, #8]
   1805c:	mov	r6, r2
   18060:	mov	r7, r3
   18064:	str	r8, [sp, #16]
   18068:	mov	r2, r1
   1806c:	mov	r1, #0
   18070:	str	lr, [sp, #20]
   18074:	sub	sp, sp, #16
   18078:	mov	r8, r0
   1807c:	ldr	ip, [sp, #48]	; 0x30
   18080:	add	r3, sp, #8
   18084:	str	ip, [sp]
   18088:	bl	181a0 <__assert_fail@plt+0x6cc0>
   1808c:	subs	r4, r0, #0
   18090:	bne	180e0 <__assert_fail@plt+0x6c00>
   18094:	ldrd	r4, [sp, #8]
   18098:	ldrd	r0, [sp, #40]	; 0x28
   1809c:	cmp	r5, r7
   180a0:	cmpeq	r4, r6
   180a4:	movcc	r3, #1
   180a8:	movcs	r3, #0
   180ac:	cmp	r5, r1
   180b0:	cmpeq	r4, r0
   180b4:	orrhi	r3, r3, #1
   180b8:	cmp	r3, #0
   180bc:	bne	18160 <__assert_fail@plt+0x6c80>
   180c0:	mov	r0, r4
   180c4:	mov	r1, r5
   180c8:	add	sp, sp, #16
   180cc:	ldrd	r4, [sp]
   180d0:	ldrd	r6, [sp, #8]
   180d4:	ldr	r8, [sp, #16]
   180d8:	add	sp, sp, #20
   180dc:	pop	{pc}		; (ldr pc, [sp], #4)
   180e0:	bl	1139c <__errno_location@plt>
   180e4:	cmp	r4, #1
   180e8:	moveq	r3, #75	; 0x4b
   180ec:	moveq	r4, r3
   180f0:	streq	r3, [r0]
   180f4:	beq	18148 <__assert_fail@plt+0x6c68>
   180f8:	cmp	r4, #3
   180fc:	beq	1813c <__assert_fail@plt+0x6c5c>
   18100:	ldr	r3, [sp, #56]	; 0x38
   18104:	ldr	r4, [r0]
   18108:	cmp	r3, #0
   1810c:	beq	18154 <__assert_fail@plt+0x6c74>
   18110:	cmp	r4, #22
   18114:	moveq	r4, #0
   18118:	mov	r0, r8
   1811c:	bl	171b4 <__assert_fail@plt+0x5cd4>
   18120:	movw	r2, #41676	; 0xa2cc
   18124:	movt	r2, #1
   18128:	str	r0, [sp]
   1812c:	mov	r1, r4
   18130:	ldr	r3, [sp, #52]	; 0x34
   18134:	ldr	r0, [sp, #56]	; 0x38
   18138:	bl	112d0 <error@plt>
   1813c:	mov	r3, #0
   18140:	mov	r4, r3
   18144:	str	r3, [r0]
   18148:	ldr	r3, [sp, #56]	; 0x38
   1814c:	cmp	r3, #0
   18150:	bne	18118 <__assert_fail@plt+0x6c38>
   18154:	mov	r3, #1
   18158:	str	r3, [sp, #56]	; 0x38
   1815c:	b	18110 <__assert_fail@plt+0x6c30>
   18160:	bl	1139c <__errno_location@plt>
   18164:	mov	r3, #0
   18168:	mvn	r2, #-1073741824	; 0xc0000000
   1816c:	cmp	r5, r3
   18170:	cmpeq	r4, r2
   18174:	movhi	r3, #75	; 0x4b
   18178:	movls	r3, #34	; 0x22
   1817c:	mov	r4, r3
   18180:	str	r3, [r0]
   18184:	ldr	r3, [sp, #56]	; 0x38
   18188:	cmp	r3, #0
   1818c:	moveq	r3, #1
   18190:	str	r3, [sp, #56]	; 0x38
   18194:	b	18118 <__assert_fail@plt+0x6c38>
   18198:	mov	r1, #10
   1819c:	b	18054 <__assert_fail@plt+0x6b74>
   181a0:	cmp	r2, #36	; 0x24
   181a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   181a8:	strd	r6, [sp, #8]
   181ac:	strd	r8, [sp, #16]
   181b0:	strd	sl, [sp, #24]
   181b4:	str	lr, [sp, #32]
   181b8:	sub	sp, sp, #36	; 0x24
   181bc:	bhi	18a4c <__assert_fail@plt+0x756c>
   181c0:	cmp	r1, #0
   181c4:	mov	r8, r2
   181c8:	mov	r6, r0
   181cc:	mov	r5, r1
   181d0:	mov	sl, r3
   181d4:	addeq	r5, sp, #28
   181d8:	bl	1139c <__errno_location@plt>
   181dc:	mov	r3, #0
   181e0:	mov	r7, r0
   181e4:	str	r3, [r0]
   181e8:	bl	1133c <__ctype_b_loc@plt>
   181ec:	ldrb	r3, [r6]
   181f0:	mov	r2, r6
   181f4:	ldr	r0, [r0]
   181f8:	b	18200 <__assert_fail@plt+0x6d20>
   181fc:	ldrb	r3, [r2, #1]!
   18200:	lsl	r1, r3, #1
   18204:	ldrh	r4, [r0, r1]
   18208:	ands	r4, r4, #8192	; 0x2000
   1820c:	bne	181fc <__assert_fail@plt+0x6d1c>
   18210:	cmp	r3, #45	; 0x2d
   18214:	beq	182b4 <__assert_fail@plt+0x6dd4>
   18218:	mov	r2, r8
   1821c:	mov	r3, r4
   18220:	mov	r1, r5
   18224:	mov	r0, r6
   18228:	bl	111d4 <__strtoull_internal@plt>
   1822c:	ldr	fp, [r5]
   18230:	mov	r9, r0
   18234:	mov	r8, r1
   18238:	cmp	fp, r6
   1823c:	beq	1829c <__assert_fail@plt+0x6dbc>
   18240:	ldr	r4, [r7]
   18244:	cmp	r4, #0
   18248:	bne	1828c <__assert_fail@plt+0x6dac>
   1824c:	ldr	r3, [sp, #72]	; 0x48
   18250:	cmp	r3, #0
   18254:	beq	18264 <__assert_fail@plt+0x6d84>
   18258:	ldrb	r6, [fp]
   1825c:	cmp	r6, #0
   18260:	bne	185a4 <__assert_fail@plt+0x70c4>
   18264:	str	r9, [sl]
   18268:	str	r8, [sl, #4]
   1826c:	mov	r0, r4
   18270:	add	sp, sp, #36	; 0x24
   18274:	ldrd	r4, [sp]
   18278:	ldrd	r6, [sp, #8]
   1827c:	ldrd	r8, [sp, #16]
   18280:	ldrd	sl, [sp, #24]
   18284:	add	sp, sp, #32
   18288:	pop	{pc}		; (ldr pc, [sp], #4)
   1828c:	cmp	r4, #34	; 0x22
   18290:	bne	182b4 <__assert_fail@plt+0x6dd4>
   18294:	mov	r4, #1
   18298:	b	1824c <__assert_fail@plt+0x6d6c>
   1829c:	ldr	r3, [sp, #72]	; 0x48
   182a0:	cmp	r3, #0
   182a4:	beq	182b4 <__assert_fail@plt+0x6dd4>
   182a8:	ldrb	r6, [r6]
   182ac:	cmp	r6, #0
   182b0:	bne	182bc <__assert_fail@plt+0x6ddc>
   182b4:	mov	r4, #4
   182b8:	b	1826c <__assert_fail@plt+0x6d8c>
   182bc:	mov	r1, r6
   182c0:	mov	r0, r3
   182c4:	bl	1136c <strchr@plt>
   182c8:	cmp	r0, #0
   182cc:	movne	r9, #1
   182d0:	movne	r8, #0
   182d4:	beq	182b4 <__assert_fail@plt+0x6dd4>
   182d8:	sub	r3, r6, #69	; 0x45
   182dc:	cmp	r3, #47	; 0x2f
   182e0:	ldrls	pc, [pc, r3, lsl #2]
   182e4:	b	183ec <__assert_fail@plt+0x6f0c>
   182e8:	andeq	r8, r1, r8, lsr #7
   182ec:	andeq	r8, r1, ip, ror #7
   182f0:	andeq	r8, r1, r8, lsr #7
   182f4:	andeq	r8, r1, ip, ror #7
   182f8:	andeq	r8, r1, ip, ror #7
   182fc:	andeq	r8, r1, ip, ror #7
   18300:	andeq	r8, r1, r8, lsr #7
   18304:	andeq	r8, r1, ip, ror #7
   18308:	andeq	r8, r1, r8, lsr #7
   1830c:	andeq	r8, r1, ip, ror #7
   18310:	andeq	r8, r1, ip, ror #7
   18314:	andeq	r8, r1, r8, lsr #7
   18318:	andeq	r8, r1, ip, ror #7
   1831c:	andeq	r8, r1, ip, ror #7
   18320:	andeq	r8, r1, ip, ror #7
   18324:	andeq	r8, r1, r8, lsr #7
   18328:	andeq	r8, r1, ip, ror #7
   1832c:	andeq	r8, r1, ip, ror #7
   18330:	andeq	r8, r1, ip, ror #7
   18334:	andeq	r8, r1, ip, ror #7
   18338:	andeq	r8, r1, r8, lsr #7
   1833c:	andeq	r8, r1, r8, lsr #7
   18340:	andeq	r8, r1, ip, ror #7
   18344:	andeq	r8, r1, ip, ror #7
   18348:	andeq	r8, r1, ip, ror #7
   1834c:	andeq	r8, r1, ip, ror #7
   18350:	andeq	r8, r1, ip, ror #7
   18354:	andeq	r8, r1, ip, ror #7
   18358:	andeq	r8, r1, ip, ror #7
   1835c:	andeq	r8, r1, ip, ror #7
   18360:	andeq	r8, r1, ip, ror #7
   18364:	andeq	r8, r1, ip, ror #7
   18368:	andeq	r8, r1, ip, ror #7
   1836c:	andeq	r8, r1, ip, ror #7
   18370:	andeq	r8, r1, r8, lsr #7
   18374:	andeq	r8, r1, ip, ror #7
   18378:	andeq	r8, r1, ip, ror #7
   1837c:	andeq	r8, r1, ip, ror #7
   18380:	andeq	r8, r1, r8, lsr #7
   18384:	andeq	r8, r1, ip, ror #7
   18388:	andeq	r8, r1, r8, lsr #7
   1838c:	andeq	r8, r1, ip, ror #7
   18390:	andeq	r8, r1, ip, ror #7
   18394:	andeq	r8, r1, ip, ror #7
   18398:	andeq	r8, r1, ip, ror #7
   1839c:	andeq	r8, r1, ip, ror #7
   183a0:	andeq	r8, r1, ip, ror #7
   183a4:	andeq	r8, r1, r8, lsr #7
   183a8:	mov	r1, #48	; 0x30
   183ac:	ldr	r0, [sp, #72]	; 0x48
   183b0:	bl	1136c <strchr@plt>
   183b4:	cmp	r0, #0
   183b8:	beq	183ec <__assert_fail@plt+0x6f0c>
   183bc:	ldrb	r3, [fp, #1]
   183c0:	cmp	r3, #68	; 0x44
   183c4:	beq	18918 <__assert_fail@plt+0x7438>
   183c8:	cmp	r3, #105	; 0x69
   183cc:	beq	185bc <__assert_fail@plt+0x70dc>
   183d0:	cmp	r3, #66	; 0x42
   183d4:	moveq	r3, #2
   183d8:	movne	r3, #1
   183dc:	moveq	r7, #1000	; 0x3e8
   183e0:	movne	r7, #1024	; 0x400
   183e4:	str	r3, [sp, #4]
   183e8:	b	183f8 <__assert_fail@plt+0x6f18>
   183ec:	mov	r3, #1
   183f0:	mov	r7, #1024	; 0x400
   183f4:	str	r3, [sp, #4]
   183f8:	sub	r6, r6, #66	; 0x42
   183fc:	cmp	r6, #53	; 0x35
   18400:	ldrls	pc, [pc, r6, lsl #2]
   18404:	b	18568 <__assert_fail@plt+0x7088>
   18408:	andeq	r8, r1, r0, asr #17
   1840c:	andeq	r8, r1, r8, ror #10
   18410:	andeq	r8, r1, r8, ror #10
   18414:	andeq	r8, r1, ip, asr #13
   18418:	andeq	r8, r1, r8, ror #10
   1841c:	andeq	r8, r1, r0, ror #9
   18420:	andeq	r8, r1, r8, ror #10
   18424:	andeq	r8, r1, r8, ror #10
   18428:	andeq	r8, r1, r8, ror #10
   1842c:	andeq	r8, r1, r0, ror r5
   18430:	andeq	r8, r1, r8, ror #10
   18434:	andeq	r8, r1, ip, ror #16
   18438:	andeq	r8, r1, r8, ror #10
   1843c:	andeq	r8, r1, r8, ror #10
   18440:			; <UNDEFINED> instruction: 0x000187bc
   18444:	andeq	r8, r1, r8, ror #10
   18448:	andeq	r8, r1, r8, ror #10
   1844c:	andeq	r8, r1, r8, ror #10
   18450:	andeq	r8, r1, r4, asr #14
   18454:	andeq	r8, r1, r8, ror #10
   18458:	andeq	r8, r1, r8, ror #10
   1845c:	andeq	r8, r1, r8, ror #10
   18460:	andeq	r8, r1, r8, ror #10
   18464:	andeq	r8, r1, r4, asr r6
   18468:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1846c:	andeq	r8, r1, r8, ror #10
   18470:	andeq	r8, r1, r8, ror #10
   18474:	andeq	r8, r1, r8, ror #10
   18478:	andeq	r8, r1, r8, ror #10
   1847c:	andeq	r8, r1, r8, ror #10
   18480:	andeq	r8, r1, r8, ror #10
   18484:	andeq	r8, r1, r8, ror #10
   18488:	andeq	r8, r1, ip, asr #16
   1848c:	andeq	r8, r1, r0, asr r5
   18490:	andeq	r8, r1, r8, ror #10
   18494:	andeq	r8, r1, r8, ror #10
   18498:	andeq	r8, r1, r8, ror #10
   1849c:	andeq	r8, r1, r0, ror #9
   184a0:	andeq	r8, r1, r8, ror #10
   184a4:	andeq	r8, r1, r8, ror #10
   184a8:	andeq	r8, r1, r8, ror #10
   184ac:	andeq	r8, r1, r0, ror r5
   184b0:	andeq	r8, r1, r8, ror #10
   184b4:	andeq	r8, r1, ip, ror #16
   184b8:	andeq	r8, r1, r8, ror #10
   184bc:	andeq	r8, r1, r8, ror #10
   184c0:	andeq	r8, r1, r8, ror #10
   184c4:	andeq	r8, r1, r8, ror #10
   184c8:	andeq	r8, r1, r8, ror #10
   184cc:	andeq	r8, r1, r8, ror #10
   184d0:	andeq	r8, r1, r4, asr #14
   184d4:	andeq	r8, r1, r8, ror #10
   184d8:	andeq	r8, r1, r8, ror #10
   184dc:	andeq	r8, r1, r4, lsr r8
   184e0:	asr	r3, r7, #31
   184e4:	mov	r2, r7
   184e8:	cmp	r8, #0
   184ec:	umull	r0, r1, r9, r7
   184f0:	mov	ip, #0
   184f4:	strd	r2, [sp, #8]
   184f8:	bne	1894c <__assert_fail@plt+0x746c>
   184fc:	mov	r2, r0
   18500:	mov	r3, r1
   18504:	cmp	ip, #0
   18508:	bne	18594 <__assert_fail@plt+0x70b4>
   1850c:	cmp	r3, #0
   18510:	mov	lr, ip
   18514:	bne	189b0 <__assert_fail@plt+0x74d0>
   18518:	umull	r2, r3, r2, r7
   1851c:	mov	ip, r2
   18520:	mov	r1, r3
   18524:	subs	r0, lr, #0
   18528:	bne	18594 <__assert_fail@plt+0x70b4>
   1852c:	cmp	r1, #0
   18530:	bne	18990 <__assert_fail@plt+0x74b0>
   18534:	umull	r2, r3, ip, r7
   18538:	mov	r6, r2
   1853c:	mov	r2, r3
   18540:	cmp	r0, #0
   18544:	mov	r9, r6
   18548:	mov	r8, r2
   1854c:	bne	18594 <__assert_fail@plt+0x70b4>
   18550:	ldr	r2, [sp, #4]
   18554:	add	r3, fp, r2
   18558:	str	r3, [r5]
   1855c:	ldrb	r3, [fp, r2]
   18560:	cmp	r3, #0
   18564:	beq	18264 <__assert_fail@plt+0x6d84>
   18568:	orr	r4, r4, #2
   1856c:	b	18264 <__assert_fail@plt+0x6d84>
   18570:	cmp	r8, #0
   18574:	umull	r2, r3, r9, r7
   18578:	mov	ip, #0
   1857c:	asr	r1, r7, #31
   18580:	bne	188e8 <__assert_fail@plt+0x7408>
   18584:	mov	r9, r2
   18588:	mov	r8, r3
   1858c:	cmp	ip, #0
   18590:	beq	18550 <__assert_fail@plt+0x7070>
   18594:	mvn	r9, #0
   18598:	mov	r4, #1
   1859c:	mov	r8, r9
   185a0:	b	18550 <__assert_fail@plt+0x7070>
   185a4:	mov	r1, r6
   185a8:	ldr	r0, [sp, #72]	; 0x48
   185ac:	bl	1136c <strchr@plt>
   185b0:	cmp	r0, #0
   185b4:	bne	182d8 <__assert_fail@plt+0x6df8>
   185b8:	b	18568 <__assert_fail@plt+0x7088>
   185bc:	ldrb	r3, [fp, #2]
   185c0:	mov	r7, #1024	; 0x400
   185c4:	cmp	r3, #66	; 0x42
   185c8:	movne	r3, #1
   185cc:	moveq	r3, #3
   185d0:	str	r3, [sp, #4]
   185d4:	b	183f8 <__assert_fail@plt+0x6f18>
   185d8:	asr	r3, r7, #31
   185dc:	mov	r2, r7
   185e0:	mov	ip, #0
   185e4:	mov	r0, #7
   185e8:	mov	lr, ip
   185ec:	mov	r6, r4
   185f0:	strd	r2, [sp, #8]
   185f4:	str	r5, [sp, #16]
   185f8:	b	18624 <__assert_fail@plt+0x7144>
   185fc:	umull	r2, r3, r9, r7
   18600:	mov	r9, r2
   18604:	mov	r8, r3
   18608:	cmp	r1, #0
   1860c:	beq	1861c <__assert_fail@plt+0x713c>
   18610:	mvn	r9, #0
   18614:	mov	ip, #1
   18618:	mov	r8, r9
   1861c:	subs	r0, r0, #1
   18620:	beq	1890c <__assert_fail@plt+0x742c>
   18624:	cmp	r8, #0
   18628:	mov	r1, #0
   1862c:	beq	185fc <__assert_fail@plt+0x711c>
   18630:	umull	r4, r5, r9, r7
   18634:	mov	r3, lr
   18638:	mov	r2, r5
   1863c:	umlal	r2, r3, r8, r7
   18640:	cmp	r3, #0
   18644:	bne	18a6c <__assert_fail@plt+0x758c>
   18648:	mov	r9, r4
   1864c:	mov	r8, r2
   18650:	b	18608 <__assert_fail@plt+0x7128>
   18654:	asr	r3, r7, #31
   18658:	mov	r2, r7
   1865c:	mov	r6, #0
   18660:	mov	lr, #8
   18664:	mov	r0, r4
   18668:	mov	ip, r5
   1866c:	strd	r2, [sp, #8]
   18670:	b	1869c <__assert_fail@plt+0x71bc>
   18674:	umull	r2, r3, r9, r7
   18678:	mov	r9, r2
   1867c:	mov	r8, r3
   18680:	cmp	r1, #0
   18684:	beq	18694 <__assert_fail@plt+0x71b4>
   18688:	mvn	r9, #0
   1868c:	mov	r6, #1
   18690:	mov	r8, r9
   18694:	subs	lr, lr, #1
   18698:	beq	188dc <__assert_fail@plt+0x73fc>
   1869c:	cmp	r8, #0
   186a0:	mov	r1, #0
   186a4:	beq	18674 <__assert_fail@plt+0x7194>
   186a8:	umull	r4, r5, r9, r7
   186ac:	mov	r3, #0
   186b0:	mov	r2, r5
   186b4:	umlal	r2, r3, r8, r7
   186b8:	cmp	r3, #0
   186bc:	bne	18ac4 <__assert_fail@plt+0x75e4>
   186c0:	mov	r9, r4
   186c4:	mov	r8, r2
   186c8:	b	18680 <__assert_fail@plt+0x71a0>
   186cc:	asr	r3, r7, #31
   186d0:	mov	r2, r7
   186d4:	mov	r6, #0
   186d8:	mov	lr, #6
   186dc:	mov	r0, r4
   186e0:	mov	ip, r5
   186e4:	strd	r2, [sp, #8]
   186e8:	b	18714 <__assert_fail@plt+0x7234>
   186ec:	umull	r2, r3, r9, r7
   186f0:	mov	r9, r2
   186f4:	mov	r8, r3
   186f8:	cmp	r1, #0
   186fc:	beq	1870c <__assert_fail@plt+0x722c>
   18700:	mvn	r9, #0
   18704:	mov	r6, #1
   18708:	mov	r8, r9
   1870c:	subs	lr, lr, #1
   18710:	beq	188dc <__assert_fail@plt+0x73fc>
   18714:	cmp	r8, #0
   18718:	mov	r1, #0
   1871c:	beq	186ec <__assert_fail@plt+0x720c>
   18720:	umull	r4, r5, r9, r7
   18724:	mov	r3, #0
   18728:	mov	r2, r5
   1872c:	umlal	r2, r3, r8, r7
   18730:	cmp	r3, #0
   18734:	bne	18a8c <__assert_fail@plt+0x75ac>
   18738:	mov	r9, r4
   1873c:	mov	r8, r2
   18740:	b	186f8 <__assert_fail@plt+0x7218>
   18744:	asr	r3, r7, #31
   18748:	mov	r2, r7
   1874c:	mov	r6, #0
   18750:	mov	lr, #4
   18754:	mov	r0, r4
   18758:	mov	ip, r5
   1875c:	strd	r2, [sp, #8]
   18760:	b	1878c <__assert_fail@plt+0x72ac>
   18764:	umull	r2, r3, r9, r7
   18768:	mov	r9, r2
   1876c:	mov	r8, r3
   18770:	cmp	r1, #0
   18774:	beq	18784 <__assert_fail@plt+0x72a4>
   18778:	mvn	r9, #0
   1877c:	mov	r6, #1
   18780:	mov	r8, r9
   18784:	subs	lr, lr, #1
   18788:	beq	188dc <__assert_fail@plt+0x73fc>
   1878c:	cmp	r8, #0
   18790:	mov	r1, #0
   18794:	beq	18764 <__assert_fail@plt+0x7284>
   18798:	umull	r4, r5, r9, r7
   1879c:	mov	r3, #0
   187a0:	mov	r2, r5
   187a4:	umlal	r2, r3, r8, r7
   187a8:	cmp	r3, #0
   187ac:	bne	18aa8 <__assert_fail@plt+0x75c8>
   187b0:	mov	r9, r4
   187b4:	mov	r8, r2
   187b8:	b	18770 <__assert_fail@plt+0x7290>
   187bc:	asr	r3, r7, #31
   187c0:	mov	r2, r7
   187c4:	mov	r6, #0
   187c8:	mov	lr, #5
   187cc:	mov	r0, r4
   187d0:	mov	ip, r5
   187d4:	strd	r2, [sp, #8]
   187d8:	b	18804 <__assert_fail@plt+0x7324>
   187dc:	umull	r2, r3, r9, r7
   187e0:	mov	r9, r2
   187e4:	mov	r8, r3
   187e8:	cmp	r1, #0
   187ec:	beq	187fc <__assert_fail@plt+0x731c>
   187f0:	mvn	r9, #0
   187f4:	mov	r6, #1
   187f8:	mov	r8, r9
   187fc:	subs	lr, lr, #1
   18800:	beq	188dc <__assert_fail@plt+0x73fc>
   18804:	cmp	r8, #0
   18808:	mov	r1, #0
   1880c:	beq	187dc <__assert_fail@plt+0x72fc>
   18810:	umull	r4, r5, r9, r7
   18814:	mov	r3, #0
   18818:	mov	r2, r5
   1881c:	umlal	r2, r3, r8, r7
   18820:	cmp	r3, #0
   18824:	bne	18a14 <__assert_fail@plt+0x7534>
   18828:	mov	r9, r4
   1882c:	mov	r8, r2
   18830:	b	187e8 <__assert_fail@plt+0x7308>
   18834:	lsr	r3, r8, #31
   18838:	adds	r9, r9, r9
   1883c:	adc	r8, r8, r8
   18840:	cmp	r3, #0
   18844:	beq	18550 <__assert_fail@plt+0x7070>
   18848:	b	18594 <__assert_fail@plt+0x70b4>
   1884c:	lsr	r3, r8, #23
   18850:	lsl	r8, r8, #9
   18854:	cmp	r3, #0
   18858:	lsl	r3, r9, #9
   1885c:	orr	r8, r8, r9, lsr #23
   18860:	bne	18594 <__assert_fail@plt+0x70b4>
   18864:	mov	r9, r3
   18868:	b	18550 <__assert_fail@plt+0x7070>
   1886c:	asr	r3, r7, #31
   18870:	mov	r2, r7
   18874:	cmp	r8, #0
   18878:	mov	r1, #0
   1887c:	strd	r2, [sp, #8]
   18880:	umull	r2, r3, r9, r7
   18884:	bne	18928 <__assert_fail@plt+0x7448>
   18888:	mov	r0, r2
   1888c:	mov	ip, r3
   18890:	cmp	r1, #0
   18894:	bne	18594 <__assert_fail@plt+0x70b4>
   18898:	cmp	ip, #0
   1889c:	bne	18970 <__assert_fail@plt+0x7490>
   188a0:	umull	r2, r3, r0, r7
   188a4:	mov	r6, r2
   188a8:	mov	r2, r3
   188ac:	cmp	r1, #0
   188b0:	mov	r9, r6
   188b4:	mov	r8, r2
   188b8:	beq	18550 <__assert_fail@plt+0x7070>
   188bc:	b	18594 <__assert_fail@plt+0x70b4>
   188c0:	lsr	r3, r8, #22
   188c4:	lsl	r8, r8, #10
   188c8:	cmp	r3, #0
   188cc:	lsl	r3, r9, #10
   188d0:	orr	r8, r8, r9, lsr #22
   188d4:	beq	18864 <__assert_fail@plt+0x7384>
   188d8:	b	18594 <__assert_fail@plt+0x70b4>
   188dc:	mov	r5, ip
   188e0:	orr	r4, r0, r6
   188e4:	b	18550 <__assert_fail@plt+0x7070>
   188e8:	strd	r2, [sp, #8]
   188ec:	mov	r3, ip
   188f0:	ldr	r2, [sp, #12]
   188f4:	umlal	r2, r3, r8, r7
   188f8:	cmp	r3, #0
   188fc:	bne	18a30 <__assert_fail@plt+0x7550>
   18900:	mov	r8, r2
   18904:	ldr	r9, [sp, #8]
   18908:	b	1858c <__assert_fail@plt+0x70ac>
   1890c:	orr	r4, r6, ip
   18910:	ldr	r5, [sp, #16]
   18914:	b	18550 <__assert_fail@plt+0x7070>
   18918:	mov	r3, #2
   1891c:	mov	r7, #1000	; 0x3e8
   18920:	str	r3, [sp, #4]
   18924:	b	183f8 <__assert_fail@plt+0x6f18>
   18928:	strd	r2, [sp, #16]
   1892c:	mov	r3, r1
   18930:	ldr	r2, [sp, #20]
   18934:	umlal	r2, r3, r8, r7
   18938:	cmp	r3, #0
   1893c:	bne	18b00 <__assert_fail@plt+0x7620>
   18940:	mov	ip, r2
   18944:	ldr	r0, [sp, #16]
   18948:	b	18890 <__assert_fail@plt+0x73b0>
   1894c:	mov	r2, r1
   18950:	mov	r3, ip
   18954:	umlal	r2, r3, r8, r7
   18958:	cmp	r3, #0
   1895c:	strd	r2, [sp, #16]
   18960:	bne	189d4 <__assert_fail@plt+0x74f4>
   18964:	mov	r2, r0
   18968:	ldr	r3, [sp, #16]
   1896c:	b	18504 <__assert_fail@plt+0x7024>
   18970:	umull	r8, r9, r0, r7
   18974:	mov	r3, r1
   18978:	mov	r2, r9
   1897c:	umlal	r2, r3, ip, r7
   18980:	cmp	r3, #0
   18984:	bne	18ae0 <__assert_fail@plt+0x7600>
   18988:	mov	r6, r8
   1898c:	b	188ac <__assert_fail@plt+0x73cc>
   18990:	umull	r8, r9, ip, r7
   18994:	mov	r3, r0
   18998:	mov	r2, r9
   1899c:	umlal	r2, r3, r1, r7
   189a0:	cmp	r3, #0
   189a4:	bne	18b28 <__assert_fail@plt+0x7648>
   189a8:	mov	r6, r8
   189ac:	b	18540 <__assert_fail@plt+0x7060>
   189b0:	umull	r8, r9, r2, r7
   189b4:	mov	r1, ip
   189b8:	mov	r0, r9
   189bc:	umlal	r0, r1, r3, r7
   189c0:	cmp	r1, #0
   189c4:	bne	189f4 <__assert_fail@plt+0x7514>
   189c8:	mov	ip, r8
   189cc:	mov	r1, r0
   189d0:	b	18524 <__assert_fail@plt+0x7044>
   189d4:	ldr	lr, [sp, #8]
   189d8:	mov	r2, r0
   189dc:	mov	ip, #1
   189e0:	ldr	r3, [sp, #12]
   189e4:	mul	r3, r9, r3
   189e8:	mla	r3, lr, r8, r3
   189ec:	add	r3, r3, r1
   189f0:	b	18504 <__assert_fail@plt+0x7024>
   189f4:	ldr	r1, [sp, #12]
   189f8:	mov	lr, #1
   189fc:	mov	ip, r8
   18a00:	mul	r1, r2, r1
   18a04:	ldr	r2, [sp, #8]
   18a08:	mla	r1, r3, r2, r1
   18a0c:	add	r1, r1, r9
   18a10:	b	18524 <__assert_fail@plt+0x7044>
   18a14:	ldrd	r2, [sp, #8]
   18a18:	mov	r1, #1
   18a1c:	mul	r3, r9, r3
   18a20:	mov	r9, r4
   18a24:	mla	r8, r2, r8, r3
   18a28:	add	r8, r8, r5
   18a2c:	b	187e8 <__assert_fail@plt+0x7308>
   18a30:	mul	r3, r9, r1
   18a34:	mov	ip, #1
   18a38:	mla	r8, r7, r8, r3
   18a3c:	ldrd	r6, [sp, #8]
   18a40:	mov	r9, r6
   18a44:	add	r8, r8, r7
   18a48:	b	1858c <__assert_fail@plt+0x70ac>
   18a4c:	movw	r3, #43412	; 0xa994
   18a50:	movt	r3, #1
   18a54:	movw	r1, #43424	; 0xa9a0
   18a58:	movt	r1, #1
   18a5c:	movw	r0, #43440	; 0xa9b0
   18a60:	movt	r0, #1
   18a64:	mov	r2, #85	; 0x55
   18a68:	bl	114e0 <__assert_fail@plt>
   18a6c:	ldr	r3, [sp, #12]
   18a70:	mov	r1, #1
   18a74:	mul	r2, r9, r3
   18a78:	ldr	r3, [sp, #8]
   18a7c:	mov	r9, r4
   18a80:	mla	r8, r3, r8, r2
   18a84:	add	r8, r8, r5
   18a88:	b	18608 <__assert_fail@plt+0x7128>
   18a8c:	ldrd	r2, [sp, #8]
   18a90:	mov	r1, #1
   18a94:	mul	r3, r9, r3
   18a98:	mov	r9, r4
   18a9c:	mla	r8, r2, r8, r3
   18aa0:	add	r8, r8, r5
   18aa4:	b	186f8 <__assert_fail@plt+0x7218>
   18aa8:	ldrd	r2, [sp, #8]
   18aac:	mov	r1, #1
   18ab0:	mul	r3, r9, r3
   18ab4:	mov	r9, r4
   18ab8:	mla	r8, r2, r8, r3
   18abc:	add	r8, r8, r5
   18ac0:	b	18770 <__assert_fail@plt+0x7290>
   18ac4:	ldrd	r2, [sp, #8]
   18ac8:	mov	r1, #1
   18acc:	mul	r3, r9, r3
   18ad0:	mov	r9, r4
   18ad4:	mla	r8, r2, r8, r3
   18ad8:	add	r8, r8, r5
   18adc:	b	18680 <__assert_fail@plt+0x71a0>
   18ae0:	ldr	r3, [sp, #12]
   18ae4:	mov	r6, r8
   18ae8:	mov	r1, #1
   18aec:	mul	r2, r0, r3
   18af0:	ldr	r3, [sp, #8]
   18af4:	mla	r2, ip, r3, r2
   18af8:	add	r2, r2, r9
   18afc:	b	188ac <__assert_fail@plt+0x73cc>
   18b00:	ldr	r3, [sp, #12]
   18b04:	mov	r1, #1
   18b08:	ldr	r2, [sp, #16]
   18b0c:	mul	ip, r9, r3
   18b10:	ldr	r3, [sp, #8]
   18b14:	mov	r0, r2
   18b18:	mla	ip, r3, r8, ip
   18b1c:	ldr	r3, [sp, #20]
   18b20:	add	ip, ip, r3
   18b24:	b	18890 <__assert_fail@plt+0x73b0>
   18b28:	ldr	r3, [sp, #12]
   18b2c:	mov	r6, r8
   18b30:	mov	r0, #1
   18b34:	mul	r2, ip, r3
   18b38:	ldr	r3, [sp, #8]
   18b3c:	mla	r2, r1, r3, r2
   18b40:	add	r2, r2, r9
   18b44:	b	18540 <__assert_fail@plt+0x7060>
   18b48:	cmp	r1, #0
   18b4c:	cmpne	r0, #0
   18b50:	beq	18b9c <__assert_fail@plt+0x76bc>
   18b54:	strd	r4, [sp, #-16]!
   18b58:	umull	r4, r5, r0, r1
   18b5c:	str	r6, [sp, #8]
   18b60:	str	lr, [sp, #12]
   18b64:	adds	r3, r5, #0
   18b68:	movne	r3, #1
   18b6c:	cmp	r4, #0
   18b70:	blt	18b7c <__assert_fail@plt+0x769c>
   18b74:	cmp	r3, #0
   18b78:	beq	18ba8 <__assert_fail@plt+0x76c8>
   18b7c:	bl	1139c <__errno_location@plt>
   18b80:	mov	r3, #12
   18b84:	ldrd	r4, [sp]
   18b88:	ldr	r6, [sp, #8]
   18b8c:	add	sp, sp, #12
   18b90:	str	r3, [r0]
   18b94:	mov	r0, #0
   18b98:	pop	{pc}		; (ldr pc, [sp], #4)
   18b9c:	mov	r1, #1
   18ba0:	mov	r0, r1
   18ba4:	b	11144 <calloc@plt>
   18ba8:	ldrd	r4, [sp]
   18bac:	ldr	r6, [sp, #8]
   18bb0:	ldr	lr, [sp, #12]
   18bb4:	add	sp, sp, #16
   18bb8:	b	11144 <calloc@plt>
   18bbc:	cmp	r0, #0
   18bc0:	beq	18bcc <__assert_fail@plt+0x76ec>
   18bc4:	blt	18bd4 <__assert_fail@plt+0x76f4>
   18bc8:	b	112f4 <malloc@plt>
   18bcc:	mov	r0, #1
   18bd0:	b	112f4 <malloc@plt>
   18bd4:	str	r4, [sp, #-8]!
   18bd8:	str	lr, [sp, #4]
   18bdc:	bl	1139c <__errno_location@plt>
   18be0:	mov	r3, #12
   18be4:	ldr	r4, [sp]
   18be8:	add	sp, sp, #4
   18bec:	str	r3, [r0]
   18bf0:	mov	r0, #0
   18bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   18bf8:	cmp	r0, #0
   18bfc:	beq	18c24 <__assert_fail@plt+0x7744>
   18c00:	cmp	r1, #0
   18c04:	str	r4, [sp, #-8]!
   18c08:	str	lr, [sp, #4]
   18c0c:	beq	18c2c <__assert_fail@plt+0x774c>
   18c10:	blt	18c40 <__assert_fail@plt+0x7760>
   18c14:	ldr	r4, [sp]
   18c18:	ldr	lr, [sp, #4]
   18c1c:	add	sp, sp, #8
   18c20:	b	11234 <realloc@plt>
   18c24:	mov	r0, r1
   18c28:	b	18bbc <__assert_fail@plt+0x76dc>
   18c2c:	bl	14c94 <__assert_fail@plt+0x37b4>
   18c30:	ldr	r4, [sp]
   18c34:	add	sp, sp, #4
   18c38:	mov	r0, #0
   18c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   18c40:	bl	1139c <__errno_location@plt>
   18c44:	mov	r3, #12
   18c48:	str	r3, [r0]
   18c4c:	b	18c30 <__assert_fail@plt+0x7750>
   18c50:	strd	r4, [sp, #-16]!
   18c54:	mov	r4, r0
   18c58:	str	r6, [sp, #8]
   18c5c:	str	lr, [sp, #12]
   18c60:	bl	112b8 <__fpending@plt>
   18c64:	ldr	r5, [r4]
   18c68:	mov	r6, r0
   18c6c:	mov	r0, r4
   18c70:	bl	14abc <__assert_fail@plt+0x35dc>
   18c74:	mov	r4, r0
   18c78:	and	r5, r5, #32
   18c7c:	cmp	r5, #0
   18c80:	bne	18cb8 <__assert_fail@plt+0x77d8>
   18c84:	cmp	r0, #0
   18c88:	beq	18ca4 <__assert_fail@plt+0x77c4>
   18c8c:	cmp	r6, #0
   18c90:	bne	18cd0 <__assert_fail@plt+0x77f0>
   18c94:	bl	1139c <__errno_location@plt>
   18c98:	ldr	r4, [r0]
   18c9c:	subs	r4, r4, #9
   18ca0:	mvnne	r4, #0
   18ca4:	mov	r0, r4
   18ca8:	ldrd	r4, [sp]
   18cac:	ldr	r6, [sp, #8]
   18cb0:	add	sp, sp, #12
   18cb4:	pop	{pc}		; (ldr pc, [sp], #4)
   18cb8:	cmp	r0, #0
   18cbc:	bne	18cd0 <__assert_fail@plt+0x77f0>
   18cc0:	bl	1139c <__errno_location@plt>
   18cc4:	str	r4, [r0]
   18cc8:	mvn	r4, #0
   18ccc:	b	18ca4 <__assert_fail@plt+0x77c4>
   18cd0:	mvn	r4, #0
   18cd4:	b	18ca4 <__assert_fail@plt+0x77c4>
   18cd8:	mov	r0, #14
   18cdc:	str	r4, [sp, #-8]!
   18ce0:	str	lr, [sp, #4]
   18ce4:	bl	11474 <nl_langinfo@plt>
   18ce8:	cmp	r0, #0
   18cec:	beq	18d10 <__assert_fail@plt+0x7830>
   18cf0:	ldrb	r2, [r0]
   18cf4:	movw	r3, #43480	; 0xa9d8
   18cf8:	movt	r3, #1
   18cfc:	ldr	r4, [sp]
   18d00:	add	sp, sp, #4
   18d04:	cmp	r2, #0
   18d08:	moveq	r0, r3
   18d0c:	pop	{pc}		; (ldr pc, [sp], #4)
   18d10:	ldr	r4, [sp]
   18d14:	add	sp, sp, #4
   18d18:	movw	r0, #43480	; 0xa9d8
   18d1c:	movt	r0, #1
   18d20:	pop	{pc}		; (ldr pc, [sp], #4)
   18d24:	strd	r4, [sp, #-20]!	; 0xffffffec
   18d28:	mov	r5, r2
   18d2c:	strd	r6, [sp, #8]
   18d30:	subs	r6, r0, #0
   18d34:	mov	r7, r1
   18d38:	str	lr, [sp, #16]
   18d3c:	sub	sp, sp, #12
   18d40:	addeq	r6, sp, #4
   18d44:	mov	r0, r6
   18d48:	bl	112c4 <mbrtowc@plt>
   18d4c:	cmp	r5, #0
   18d50:	cmnne	r0, #3
   18d54:	mov	r4, r0
   18d58:	bhi	18d74 <__assert_fail@plt+0x7894>
   18d5c:	mov	r0, r4
   18d60:	add	sp, sp, #12
   18d64:	ldrd	r4, [sp]
   18d68:	ldrd	r6, [sp, #8]
   18d6c:	add	sp, sp, #16
   18d70:	pop	{pc}		; (ldr pc, [sp], #4)
   18d74:	mov	r0, #0
   18d78:	bl	18fc0 <__assert_fail@plt+0x7ae0>
   18d7c:	cmp	r0, #0
   18d80:	bne	18d5c <__assert_fail@plt+0x787c>
   18d84:	ldrb	r3, [r7]
   18d88:	mov	r4, #1
   18d8c:	str	r3, [r6]
   18d90:	b	18d5c <__assert_fail@plt+0x787c>
   18d94:	umull	r2, r3, r1, r2
   18d98:	cmp	r3, #0
   18d9c:	bne	18da8 <__assert_fail@plt+0x78c8>
   18da0:	mov	r1, r2
   18da4:	b	18bf8 <__assert_fail@plt+0x7718>
   18da8:	str	r4, [sp, #-8]!
   18dac:	str	lr, [sp, #4]
   18db0:	bl	1139c <__errno_location@plt>
   18db4:	mov	r3, #12
   18db8:	ldr	r4, [sp]
   18dbc:	add	sp, sp, #4
   18dc0:	str	r3, [r0]
   18dc4:	mov	r0, #0
   18dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   18dcc:	mov	r2, #3
   18dd0:	mov	r1, #0
   18dd4:	b	18dd8 <__assert_fail@plt+0x78f8>
   18dd8:	push	{r1, r2, r3}
   18ddc:	strd	r4, [sp, #-20]!	; 0xffffffec
   18de0:	strd	r6, [sp, #8]
   18de4:	str	lr, [sp, #16]
   18de8:	sub	sp, sp, #8
   18dec:	ldr	r1, [sp, #28]
   18df0:	add	r2, sp, #32
   18df4:	str	r2, [sp, #4]
   18df8:	cmp	r1, #0
   18dfc:	beq	18ed8 <__assert_fail@plt+0x79f8>
   18e00:	movw	r3, #1030	; 0x406
   18e04:	mov	r6, r0
   18e08:	cmp	r1, r3
   18e0c:	beq	18ee8 <__assert_fail@plt+0x7a08>
   18e10:	cmp	r1, #11
   18e14:	beq	18e90 <__assert_fail@plt+0x79b0>
   18e18:	ble	18e70 <__assert_fail@plt+0x7990>
   18e1c:	movw	r2, #1031	; 0x407
   18e20:	cmp	r1, r2
   18e24:	bgt	18eac <__assert_fail@plt+0x79cc>
   18e28:	cmp	r1, r3
   18e2c:	bge	18e3c <__assert_fail@plt+0x795c>
   18e30:	movw	r3, #1025	; 0x401
   18e34:	cmp	r1, r3
   18e38:	beq	18e90 <__assert_fail@plt+0x79b0>
   18e3c:	ldr	r3, [sp, #4]
   18e40:	mov	r0, r6
   18e44:	ldr	r2, [r3]
   18e48:	bl	1142c <fcntl64@plt>
   18e4c:	mov	r4, r0
   18e50:	mov	r0, r4
   18e54:	add	sp, sp, #8
   18e58:	ldrd	r4, [sp]
   18e5c:	ldrd	r6, [sp, #8]
   18e60:	ldr	lr, [sp, #16]
   18e64:	add	sp, sp, #20
   18e68:	add	sp, sp, #12
   18e6c:	bx	lr
   18e70:	cmp	r1, #4
   18e74:	beq	18e3c <__assert_fail@plt+0x795c>
   18e78:	bgt	18ea0 <__assert_fail@plt+0x79c0>
   18e7c:	cmp	r1, #2
   18e80:	beq	18e3c <__assert_fail@plt+0x795c>
   18e84:	bgt	18e90 <__assert_fail@plt+0x79b0>
   18e88:	cmp	r1, #1
   18e8c:	bne	18e3c <__assert_fail@plt+0x795c>
   18e90:	mov	r0, r6
   18e94:	bl	1142c <fcntl64@plt>
   18e98:	mov	r4, r0
   18e9c:	b	18e50 <__assert_fail@plt+0x7970>
   18ea0:	cmp	r1, #9
   18ea4:	bne	18e3c <__assert_fail@plt+0x795c>
   18ea8:	b	18e90 <__assert_fail@plt+0x79b0>
   18eac:	movw	r3, #1033	; 0x409
   18eb0:	cmp	r1, r3
   18eb4:	beq	18e3c <__assert_fail@plt+0x795c>
   18eb8:	blt	18e90 <__assert_fail@plt+0x79b0>
   18ebc:	movw	r3, #1034	; 0x40a
   18ec0:	cmp	r1, r3
   18ec4:	bne	18e3c <__assert_fail@plt+0x795c>
   18ec8:	mov	r0, r6
   18ecc:	bl	1142c <fcntl64@plt>
   18ed0:	mov	r4, r0
   18ed4:	b	18e50 <__assert_fail@plt+0x7970>
   18ed8:	ldr	r2, [sp, #32]
   18edc:	bl	1142c <fcntl64@plt>
   18ee0:	mov	r4, r0
   18ee4:	b	18e50 <__assert_fail@plt+0x7970>
   18ee8:	movw	r5, #46688	; 0xb660
   18eec:	movt	r5, #2
   18ef0:	ldr	r7, [r2]
   18ef4:	add	r2, sp, #36	; 0x24
   18ef8:	ldr	r3, [r5]
   18efc:	str	r2, [sp, #4]
   18f00:	mov	r2, r7
   18f04:	cmp	r3, #0
   18f08:	blt	18f24 <__assert_fail@plt+0x7a44>
   18f0c:	bl	1142c <fcntl64@plt>
   18f10:	subs	r4, r0, #0
   18f14:	blt	18f8c <__assert_fail@plt+0x7aac>
   18f18:	mov	r3, #1
   18f1c:	str	r3, [r5]
   18f20:	b	18e50 <__assert_fail@plt+0x7970>
   18f24:	mov	r1, #0
   18f28:	bl	1142c <fcntl64@plt>
   18f2c:	subs	r4, r0, #0
   18f30:	blt	18e50 <__assert_fail@plt+0x7970>
   18f34:	ldr	r3, [r5]
   18f38:	cmn	r3, #1
   18f3c:	bne	18e50 <__assert_fail@plt+0x7970>
   18f40:	mov	r1, #1
   18f44:	mov	r0, r4
   18f48:	bl	1142c <fcntl64@plt>
   18f4c:	subs	r2, r0, #0
   18f50:	blt	18f6c <__assert_fail@plt+0x7a8c>
   18f54:	orr	r2, r2, #1
   18f58:	mov	r1, #2
   18f5c:	mov	r0, r4
   18f60:	bl	1142c <fcntl64@plt>
   18f64:	cmn	r0, #1
   18f68:	bne	18e50 <__assert_fail@plt+0x7970>
   18f6c:	bl	1139c <__errno_location@plt>
   18f70:	mov	r5, r0
   18f74:	mov	r0, r4
   18f78:	ldr	r6, [r5]
   18f7c:	mvn	r4, #0
   18f80:	bl	114c8 <close@plt>
   18f84:	str	r6, [r5]
   18f88:	b	18e50 <__assert_fail@plt+0x7970>
   18f8c:	bl	1139c <__errno_location@plt>
   18f90:	ldr	r3, [r0]
   18f94:	cmp	r3, #22
   18f98:	bne	18f18 <__assert_fail@plt+0x7a38>
   18f9c:	mov	r2, r7
   18fa0:	mov	r0, r6
   18fa4:	mov	r1, #0
   18fa8:	bl	1142c <fcntl64@plt>
   18fac:	subs	r4, r0, #0
   18fb0:	mvnge	r3, #0
   18fb4:	strge	r3, [r5]
   18fb8:	bge	18f40 <__assert_fail@plt+0x7a60>
   18fbc:	b	18e50 <__assert_fail@plt+0x7970>
   18fc0:	push	{lr}		; (str lr, [sp, #-4]!)
   18fc4:	sub	sp, sp, #268	; 0x10c
   18fc8:	movw	r2, #257	; 0x101
   18fcc:	add	r1, sp, #4
   18fd0:	bl	19018 <__assert_fail@plt+0x7b38>
   18fd4:	cmp	r0, #0
   18fd8:	movne	r0, #0
   18fdc:	bne	19010 <__assert_fail@plt+0x7b30>
   18fe0:	movw	r1, #43488	; 0xa9e0
   18fe4:	movt	r1, #1
   18fe8:	add	r0, sp, #4
   18fec:	bl	11168 <strcmp@plt>
   18ff0:	cmp	r0, #0
   18ff4:	beq	19010 <__assert_fail@plt+0x7b30>
   18ff8:	add	r0, sp, #4
   18ffc:	movw	r1, #43492	; 0xa9e4
   19000:	movt	r1, #1
   19004:	bl	11168 <strcmp@plt>
   19008:	adds	r0, r0, #0
   1900c:	movne	r0, #1
   19010:	add	sp, sp, #268	; 0x10c
   19014:	pop	{pc}		; (ldr pc, [sp], #4)
   19018:	strd	r4, [sp, #-16]!
   1901c:	mov	r5, r1
   19020:	mov	r1, #0
   19024:	mov	r4, r2
   19028:	str	r6, [sp, #8]
   1902c:	str	lr, [sp, #12]
   19030:	bl	11438 <setlocale@plt>
   19034:	subs	r6, r0, #0
   19038:	beq	190b8 <__assert_fail@plt+0x7bd8>
   1903c:	bl	11354 <strlen@plt>
   19040:	cmp	r4, r0
   19044:	bhi	19064 <__assert_fail@plt+0x7b84>
   19048:	cmp	r4, #0
   1904c:	moveq	r0, #34	; 0x22
   19050:	bne	19088 <__assert_fail@plt+0x7ba8>
   19054:	ldrd	r4, [sp]
   19058:	ldr	r6, [sp, #8]
   1905c:	add	sp, sp, #12
   19060:	pop	{pc}		; (ldr pc, [sp], #4)
   19064:	add	r2, r0, #1
   19068:	mov	r1, r6
   1906c:	mov	r0, r5
   19070:	bl	111c8 <memcpy@plt>
   19074:	ldrd	r4, [sp]
   19078:	mov	r0, #0
   1907c:	ldr	r6, [sp, #8]
   19080:	add	sp, sp, #12
   19084:	pop	{pc}		; (ldr pc, [sp], #4)
   19088:	sub	r4, r4, #1
   1908c:	mov	r1, r6
   19090:	mov	r2, r4
   19094:	mov	r0, r5
   19098:	bl	111c8 <memcpy@plt>
   1909c:	mov	r3, #0
   190a0:	mov	r0, #34	; 0x22
   190a4:	strb	r3, [r5, r4]
   190a8:	ldrd	r4, [sp]
   190ac:	ldr	r6, [sp, #8]
   190b0:	add	sp, sp, #12
   190b4:	pop	{pc}		; (ldr pc, [sp], #4)
   190b8:	cmp	r4, #0
   190bc:	mov	r0, #22
   190c0:	strbne	r6, [r5]
   190c4:	ldrd	r4, [sp]
   190c8:	ldr	r6, [sp, #8]
   190cc:	add	sp, sp, #12
   190d0:	pop	{pc}		; (ldr pc, [sp], #4)
   190d4:	mov	r1, #0
   190d8:	b	11438 <setlocale@plt>
   190dc:	cmp	r3, #0
   190e0:	cmpeq	r2, #0
   190e4:	bne	190fc <__assert_fail@plt+0x7c1c>
   190e8:	cmp	r1, #0
   190ec:	cmpeq	r0, #0
   190f0:	mvnne	r1, #0
   190f4:	mvnne	r0, #0
   190f8:	b	19118 <__assert_fail@plt+0x7c38>
   190fc:	sub	sp, sp, #8
   19100:	push	{sp, lr}
   19104:	bl	19128 <__assert_fail@plt+0x7c48>
   19108:	ldr	lr, [sp, #4]
   1910c:	add	sp, sp, #8
   19110:	pop	{r2, r3}
   19114:	bx	lr
   19118:	push	{r1, lr}
   1911c:	mov	r0, #8
   19120:	bl	1115c <raise@plt>
   19124:	pop	{r1, pc}
   19128:	cmp	r1, r3
   1912c:	cmpeq	r0, r2
   19130:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19134:	mov	r4, r0
   19138:	movcc	r0, #0
   1913c:	mov	r5, r1
   19140:	ldr	lr, [sp, #36]	; 0x24
   19144:	movcc	r1, r0
   19148:	bcc	19244 <__assert_fail@plt+0x7d64>
   1914c:	cmp	r3, #0
   19150:	clzeq	ip, r2
   19154:	clzne	ip, r3
   19158:	addeq	ip, ip, #32
   1915c:	cmp	r5, #0
   19160:	clzeq	r1, r4
   19164:	addeq	r1, r1, #32
   19168:	clzne	r1, r5
   1916c:	sub	ip, ip, r1
   19170:	sub	sl, ip, #32
   19174:	lsl	r9, r3, ip
   19178:	rsb	fp, ip, #32
   1917c:	orr	r9, r9, r2, lsl sl
   19180:	orr	r9, r9, r2, lsr fp
   19184:	lsl	r8, r2, ip
   19188:	cmp	r5, r9
   1918c:	cmpeq	r4, r8
   19190:	movcc	r0, #0
   19194:	movcc	r1, r0
   19198:	bcc	191b4 <__assert_fail@plt+0x7cd4>
   1919c:	mov	r0, #1
   191a0:	subs	r4, r4, r8
   191a4:	lsl	r1, r0, sl
   191a8:	orr	r1, r1, r0, lsr fp
   191ac:	lsl	r0, r0, ip
   191b0:	sbc	r5, r5, r9
   191b4:	cmp	ip, #0
   191b8:	beq	19244 <__assert_fail@plt+0x7d64>
   191bc:	lsr	r6, r8, #1
   191c0:	orr	r6, r6, r9, lsl #31
   191c4:	lsr	r7, r9, #1
   191c8:	mov	r2, ip
   191cc:	b	191f0 <__assert_fail@plt+0x7d10>
   191d0:	subs	r3, r4, r6
   191d4:	sbc	r8, r5, r7
   191d8:	adds	r3, r3, r3
   191dc:	adc	r8, r8, r8
   191e0:	adds	r4, r3, #1
   191e4:	adc	r5, r8, #0
   191e8:	subs	r2, r2, #1
   191ec:	beq	1920c <__assert_fail@plt+0x7d2c>
   191f0:	cmp	r5, r7
   191f4:	cmpeq	r4, r6
   191f8:	bcs	191d0 <__assert_fail@plt+0x7cf0>
   191fc:	adds	r4, r4, r4
   19200:	adc	r5, r5, r5
   19204:	subs	r2, r2, #1
   19208:	bne	191f0 <__assert_fail@plt+0x7d10>
   1920c:	lsr	r3, r4, ip
   19210:	orr	r3, r3, r5, lsl fp
   19214:	lsr	r2, r5, ip
   19218:	orr	r3, r3, r5, lsr sl
   1921c:	adds	r0, r0, r4
   19220:	mov	r4, r3
   19224:	lsl	r3, r2, ip
   19228:	orr	r3, r3, r4, lsl sl
   1922c:	lsl	ip, r4, ip
   19230:	orr	r3, r3, r4, lsr fp
   19234:	adc	r1, r1, r5
   19238:	subs	r0, r0, ip
   1923c:	mov	r5, r2
   19240:	sbc	r1, r1, r3
   19244:	cmp	lr, #0
   19248:	strdne	r4, [lr]
   1924c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19250:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19254:	mov	r7, r0
   19258:	ldr	r6, [pc, #72]	; 192a8 <__assert_fail@plt+0x7dc8>
   1925c:	ldr	r5, [pc, #72]	; 192ac <__assert_fail@plt+0x7dcc>
   19260:	add	r6, pc, r6
   19264:	add	r5, pc, r5
   19268:	sub	r6, r6, r5
   1926c:	mov	r8, r1
   19270:	mov	r9, r2
   19274:	bl	11118 <fdopen@plt-0x20>
   19278:	asrs	r6, r6, #2
   1927c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19280:	mov	r4, #0
   19284:	add	r4, r4, #1
   19288:	ldr	r3, [r5], #4
   1928c:	mov	r2, r9
   19290:	mov	r1, r8
   19294:	mov	r0, r7
   19298:	blx	r3
   1929c:	cmp	r6, r4
   192a0:	bne	19284 <__assert_fail@plt+0x7da4>
   192a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   192a8:	andeq	r1, r1, ip, lsr #25
   192ac:	andeq	r1, r1, r4, lsr #25
   192b0:	bx	lr
   192b4:	ldr	r3, [pc, #12]	; 192c8 <__assert_fail@plt+0x7de8>
   192b8:	mov	r1, #0
   192bc:	add	r3, pc, r3
   192c0:	ldr	r2, [r3]
   192c4:	b	113b4 <__cxa_atexit@plt>
   192c8:	andeq	r1, r1, ip, lsl #29

Disassembly of section .fini:

000192cc <.fini>:
   192cc:	push	{r3, lr}
   192d0:	pop	{r3, pc}
