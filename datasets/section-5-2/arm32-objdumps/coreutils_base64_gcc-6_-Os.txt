
../repos/coreutils/src/base64:     file format elf32-littlearm


Disassembly of section .init:

00010cc4 <.init>:
   10cc4:	push	{r3, lr}
   10cc8:	bl	115c8 <__assert_fail@plt+0x668>
   10ccc:	pop	{r3, pc}

Disassembly of section .plt:

00010cd0 <calloc@plt-0x14>:
   10cd0:	push	{lr}		; (str lr, [sp, #-4]!)
   10cd4:	ldr	lr, [pc, #4]	; 10ce0 <calloc@plt-0x4>
   10cd8:	add	lr, pc, lr
   10cdc:	ldr	pc, [lr, #8]!
   10ce0:	andeq	r5, r1, r0, lsr #6

00010ce4 <calloc@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #86016	; 0x15000
   10cec:	ldr	pc, [ip, #800]!	; 0x320

00010cf0 <fputs_unlocked@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #86016	; 0x15000
   10cf8:	ldr	pc, [ip, #792]!	; 0x318

00010cfc <raise@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #86016	; 0x15000
   10d04:	ldr	pc, [ip, #784]!	; 0x310

00010d08 <strcmp@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #86016	; 0x15000
   10d10:	ldr	pc, [ip, #776]!	; 0x308

00010d14 <posix_fadvise64@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #86016	; 0x15000
   10d1c:	ldr	pc, [ip, #768]!	; 0x300

00010d20 <fflush@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #86016	; 0x15000
   10d28:	ldr	pc, [ip, #760]!	; 0x2f8

00010d2c <memmove@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #86016	; 0x15000
   10d34:	ldr	pc, [ip, #752]!	; 0x2f0

00010d38 <free@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #86016	; 0x15000
   10d40:	ldr	pc, [ip, #744]!	; 0x2e8

00010d44 <_exit@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #86016	; 0x15000
   10d4c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d50 <memcpy@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #86016	; 0x15000
   10d58:	ldr	pc, [ip, #728]!	; 0x2d8

00010d5c <mbsinit@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #86016	; 0x15000
   10d64:	ldr	pc, [ip, #720]!	; 0x2d0

00010d68 <fwrite_unlocked@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #86016	; 0x15000
   10d70:	ldr	pc, [ip, #712]!	; 0x2c8

00010d74 <memcmp@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #86016	; 0x15000
   10d7c:	ldr	pc, [ip, #704]!	; 0x2c0

00010d80 <fputc_unlocked@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #86016	; 0x15000
   10d88:	ldr	pc, [ip, #696]!	; 0x2b8

00010d8c <dcgettext@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #86016	; 0x15000
   10d94:	ldr	pc, [ip, #688]!	; 0x2b0

00010d98 <realloc@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #86016	; 0x15000
   10da0:	ldr	pc, [ip, #680]!	; 0x2a8

00010da4 <textdomain@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #86016	; 0x15000
   10dac:	ldr	pc, [ip, #672]!	; 0x2a0

00010db0 <iswprint@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #86016	; 0x15000
   10db8:	ldr	pc, [ip, #664]!	; 0x298

00010dbc <lseek64@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #86016	; 0x15000
   10dc4:	ldr	pc, [ip, #656]!	; 0x290

00010dc8 <__ctype_get_mb_cur_max@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #86016	; 0x15000
   10dd0:	ldr	pc, [ip, #648]!	; 0x288

00010dd4 <__fpending@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #86016	; 0x15000
   10ddc:	ldr	pc, [ip, #640]!	; 0x280

00010de0 <ferror_unlocked@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #86016	; 0x15000
   10de8:	ldr	pc, [ip, #632]!	; 0x278

00010dec <mbrtowc@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #86016	; 0x15000
   10df4:	ldr	pc, [ip, #624]!	; 0x270

00010df8 <error@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #86016	; 0x15000
   10e00:	ldr	pc, [ip, #616]!	; 0x268

00010e04 <malloc@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #86016	; 0x15000
   10e0c:	ldr	pc, [ip, #608]!	; 0x260

00010e10 <__libc_start_main@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #86016	; 0x15000
   10e18:	ldr	pc, [ip, #600]!	; 0x258

00010e1c <__freading@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #86016	; 0x15000
   10e24:	ldr	pc, [ip, #592]!	; 0x250

00010e28 <__gmon_start__@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #86016	; 0x15000
   10e30:	ldr	pc, [ip, #584]!	; 0x248

00010e34 <getopt_long@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #86016	; 0x15000
   10e3c:	ldr	pc, [ip, #576]!	; 0x240

00010e40 <__ctype_b_loc@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #86016	; 0x15000
   10e48:	ldr	pc, [ip, #568]!	; 0x238

00010e4c <exit@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #86016	; 0x15000
   10e54:	ldr	pc, [ip, #560]!	; 0x230

00010e58 <strlen@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #86016	; 0x15000
   10e60:	ldr	pc, [ip, #552]!	; 0x228

00010e64 <strchr@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #86016	; 0x15000
   10e6c:	ldr	pc, [ip, #544]!	; 0x220

00010e70 <__errno_location@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #86016	; 0x15000
   10e78:	ldr	pc, [ip, #536]!	; 0x218

00010e7c <__cxa_atexit@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #86016	; 0x15000
   10e84:	ldr	pc, [ip, #528]!	; 0x210

00010e88 <memset@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #86016	; 0x15000
   10e90:	ldr	pc, [ip, #520]!	; 0x208

00010e94 <__printf_chk@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #86016	; 0x15000
   10e9c:	ldr	pc, [ip, #512]!	; 0x200

00010ea0 <fileno@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #86016	; 0x15000
   10ea8:	ldr	pc, [ip, #504]!	; 0x1f8

00010eac <__fprintf_chk@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #86016	; 0x15000
   10eb4:	ldr	pc, [ip, #496]!	; 0x1f0

00010eb8 <memchr@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #86016	; 0x15000
   10ec0:	ldr	pc, [ip, #488]!	; 0x1e8

00010ec4 <strtoimax@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #86016	; 0x15000
   10ecc:	ldr	pc, [ip, #480]!	; 0x1e0

00010ed0 <fclose@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #86016	; 0x15000
   10ed8:	ldr	pc, [ip, #472]!	; 0x1d8

00010edc <fseeko64@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #86016	; 0x15000
   10ee4:	ldr	pc, [ip, #464]!	; 0x1d0

00010ee8 <setlocale@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #86016	; 0x15000
   10ef0:	ldr	pc, [ip, #456]!	; 0x1c8

00010ef4 <strrchr@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #86016	; 0x15000
   10efc:	ldr	pc, [ip, #448]!	; 0x1c0

00010f00 <nl_langinfo@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #86016	; 0x15000
   10f08:	ldr	pc, [ip, #440]!	; 0x1b8

00010f0c <fopen64@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #86016	; 0x15000
   10f14:	ldr	pc, [ip, #432]!	; 0x1b0

00010f18 <bindtextdomain@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #86016	; 0x15000
   10f20:	ldr	pc, [ip, #424]!	; 0x1a8

00010f24 <fread_unlocked@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #86016	; 0x15000
   10f2c:	ldr	pc, [ip, #416]!	; 0x1a0

00010f30 <fputs@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #86016	; 0x15000
   10f38:	ldr	pc, [ip, #408]!	; 0x198

00010f3c <strncmp@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #86016	; 0x15000
   10f44:	ldr	pc, [ip, #400]!	; 0x190

00010f48 <abort@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #86016	; 0x15000
   10f50:	ldr	pc, [ip, #392]!	; 0x188

00010f54 <feof_unlocked@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #86016	; 0x15000
   10f5c:	ldr	pc, [ip, #384]!	; 0x180

00010f60 <__assert_fail@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #86016	; 0x15000
   10f68:	ldr	pc, [ip, #376]!	; 0x178

Disassembly of section .text:

00010f6c <.text>:
   10f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f70:	mov	r9, r0
   10f74:	sub	sp, sp, #52	; 0x34
   10f78:	ldr	r0, [r1]
   10f7c:	mov	r5, r1
   10f80:	bl	12338 <__assert_fail@plt+0x13d8>
   10f84:	ldr	r1, [pc, #1436]	; 11528 <__assert_fail@plt+0x5c8>
   10f88:	mov	r0, #6
   10f8c:	bl	10ee8 <setlocale@plt>
   10f90:	ldr	r1, [pc, #1428]	; 1152c <__assert_fail@plt+0x5cc>
   10f94:	ldr	r0, [pc, #1428]	; 11530 <__assert_fail@plt+0x5d0>
   10f98:	bl	10f18 <bindtextdomain@plt>
   10f9c:	ldr	r0, [pc, #1420]	; 11530 <__assert_fail@plt+0x5d0>
   10fa0:	bl	10da4 <textdomain@plt>
   10fa4:	ldr	r0, [pc, #1416]	; 11534 <__assert_fail@plt+0x5d4>
   10fa8:	bl	15178 <__assert_fail@plt+0x4218>
   10fac:	mov	r8, #0
   10fb0:	ldr	sl, [pc, #1408]	; 11538 <__assert_fail@plt+0x5d8>
   10fb4:	mov	r6, #76	; 0x4c
   10fb8:	mov	r7, r8
   10fbc:	mov	r4, #0
   10fc0:	str	r4, [sp]
   10fc4:	ldr	r3, [pc, #1392]	; 1153c <__assert_fail@plt+0x5dc>
   10fc8:	ldr	r2, [pc, #1392]	; 11540 <__assert_fail@plt+0x5e0>
   10fcc:	mov	r1, r5
   10fd0:	mov	r0, r9
   10fd4:	bl	10e34 <getopt_long@plt>
   10fd8:	cmn	r0, #1
   10fdc:	bne	11030 <__assert_fail@plt+0xd0>
   10fe0:	ldr	sl, [pc, #1372]	; 11544 <__assert_fail@plt+0x5e4>
   10fe4:	ldr	r3, [sl]
   10fe8:	sub	r2, r9, r3
   10fec:	cmp	r2, #1
   10ff0:	ble	11134 <__assert_fail@plt+0x1d4>
   10ff4:	mov	r2, #5
   10ff8:	ldr	r1, [pc, #1352]	; 11548 <__assert_fail@plt+0x5e8>
   10ffc:	mov	r0, r4
   11000:	bl	10d8c <dcgettext@plt>
   11004:	ldr	r3, [sl]
   11008:	add	r3, r3, #1
   1100c:	mov	r6, r0
   11010:	ldr	r0, [r5, r3, lsl #2]
   11014:	bl	13968 <__assert_fail@plt+0x2a08>
   11018:	mov	r2, r6
   1101c:	mov	r1, r4
   11020:	mov	r3, r0
   11024:	mov	r0, r4
   11028:	bl	10df8 <error@plt>
   1102c:	b	11050 <__assert_fail@plt+0xf0>
   11030:	cmp	r0, #100	; 0x64
   11034:	beq	1112c <__assert_fail@plt+0x1cc>
   11038:	bgt	11058 <__assert_fail@plt+0xf8>
   1103c:	cmn	r0, #3
   11040:	beq	110fc <__assert_fail@plt+0x19c>
   11044:	cmn	r0, #2
   11048:	moveq	r0, r4
   1104c:	beq	11054 <__assert_fail@plt+0xf4>
   11050:	mov	r0, #1
   11054:	bl	11740 <__assert_fail@plt+0x7e0>
   11058:	cmp	r0, #105	; 0x69
   1105c:	beq	110d0 <__assert_fail@plt+0x170>
   11060:	cmp	r0, #119	; 0x77
   11064:	bne	11050 <__assert_fail@plt+0xf0>
   11068:	ldr	r3, [pc, #1208]	; 11528 <__assert_fail@plt+0x5c8>
   1106c:	mov	r2, #10
   11070:	str	r3, [sp]
   11074:	mov	r1, r4
   11078:	add	r3, sp, #40	; 0x28
   1107c:	ldr	r0, [sl]
   11080:	bl	144c0 <__assert_fail@plt+0x3560>
   11084:	cmp	r0, #1
   11088:	bhi	1109c <__assert_fail@plt+0x13c>
   1108c:	ldrd	r2, [sp, #40]	; 0x28
   11090:	cmp	r2, #0
   11094:	sbcs	r1, r3, #0
   11098:	bge	110d8 <__assert_fail@plt+0x178>
   1109c:	mov	r2, #5
   110a0:	ldr	r1, [pc, #1188]	; 1154c <__assert_fail@plt+0x5ec>
   110a4:	mov	r0, #0
   110a8:	bl	10d8c <dcgettext@plt>
   110ac:	mov	r4, r0
   110b0:	ldr	r0, [sl]
   110b4:	bl	13968 <__assert_fail@plt+0x2a08>
   110b8:	mov	r3, r4
   110bc:	ldr	r2, [pc, #1164]	; 11550 <__assert_fail@plt+0x5f0>
   110c0:	mov	r1, #0
   110c4:	str	r0, [sp]
   110c8:	mov	r0, #1
   110cc:	bl	10df8 <error@plt>
   110d0:	mov	r8, #1
   110d4:	b	10fbc <__assert_fail@plt+0x5c>
   110d8:	cmp	r2, #-2147483648	; 0x80000000
   110dc:	sbcs	r1, r3, #0
   110e0:	eor	r0, r0, #1
   110e4:	andlt	r0, r0, #1
   110e8:	movge	r0, #0
   110ec:	cmp	r0, #0
   110f0:	moveq	r2, #0
   110f4:	mov	r6, r2
   110f8:	b	10fbc <__assert_fail@plt+0x5c>
   110fc:	ldr	r3, [pc, #1104]	; 11554 <__assert_fail@plt+0x5f4>
   11100:	ldr	r0, [pc, #1104]	; 11558 <__assert_fail@plt+0x5f8>
   11104:	str	r3, [sp]
   11108:	ldr	r3, [pc, #1100]	; 1155c <__assert_fail@plt+0x5fc>
   1110c:	str	r4, [sp, #4]
   11110:	ldr	r2, [pc, #1096]	; 11560 <__assert_fail@plt+0x600>
   11114:	ldr	r0, [r0]
   11118:	ldr	r3, [r3]
   1111c:	ldr	r1, [pc, #1088]	; 11564 <__assert_fail@plt+0x604>
   11120:	bl	13db8 <__assert_fail@plt+0x2e58>
   11124:	mov	r0, r4
   11128:	bl	10e4c <exit@plt>
   1112c:	mov	r7, #1
   11130:	b	10fbc <__assert_fail@plt+0x5c>
   11134:	cmp	r9, r3
   11138:	ldr	r1, [pc, #1064]	; 11568 <__assert_fail@plt+0x608>
   1113c:	ldrgt	r3, [r5, r3, lsl #2]
   11140:	ldrle	r3, [pc, #1056]	; 11568 <__assert_fail@plt+0x608>
   11144:	str	r3, [sp, #12]
   11148:	ldr	r0, [sp, #12]
   1114c:	bl	10d08 <strcmp@plt>
   11150:	cmp	r0, #0
   11154:	ldreq	r3, [pc, #1040]	; 1156c <__assert_fail@plt+0x60c>
   11158:	ldreq	r4, [r3]
   1115c:	beq	111a0 <__assert_fail@plt+0x240>
   11160:	ldr	r1, [pc, #1032]	; 11570 <__assert_fail@plt+0x610>
   11164:	ldr	r0, [sp, #12]
   11168:	bl	10f0c <fopen64@plt>
   1116c:	subs	r4, r0, #0
   11170:	bne	111a0 <__assert_fail@plt+0x240>
   11174:	bl	10e70 <__errno_location@plt>
   11178:	ldr	r2, [sp, #12]
   1117c:	mov	r1, #3
   11180:	ldr	r5, [r0]
   11184:	mov	r0, r4
   11188:	bl	13828 <__assert_fail@plt+0x28c8>
   1118c:	ldr	r2, [pc, #992]	; 11574 <__assert_fail@plt+0x614>
   11190:	mov	r1, r5
   11194:	mov	r3, r0
   11198:	mov	r0, #1
   1119c:	bl	10df8 <error@plt>
   111a0:	ldr	fp, [pc, #944]	; 11558 <__assert_fail@plt+0x5f8>
   111a4:	mov	r1, #2
   111a8:	mov	r0, r4
   111ac:	bl	12128 <__assert_fail@plt+0x11c8>
   111b0:	ldr	r3, [fp]
   111b4:	cmp	r7, #0
   111b8:	str	r3, [sp, #20]
   111bc:	beq	113a0 <__assert_fail@plt+0x440>
   111c0:	mov	r0, #4096	; 0x1000
   111c4:	bl	13e80 <__assert_fail@plt+0x2f20>
   111c8:	add	r5, sp, #40	; 0x28
   111cc:	mov	r7, r0
   111d0:	mov	r0, #3072	; 0xc00
   111d4:	bl	13e80 <__assert_fail@plt+0x2f20>
   111d8:	str	r0, [sp, #16]
   111dc:	mov	r0, r5
   111e0:	bl	11d78 <__assert_fail@plt+0xe18>
   111e4:	str	r5, [sp, #24]
   111e8:	mov	r6, #0
   111ec:	mov	sl, #1
   111f0:	add	r9, r7, r6
   111f4:	mov	r3, r4
   111f8:	rsb	r2, r6, #4096	; 0x1000
   111fc:	mov	r1, sl
   11200:	mov	r0, r9
   11204:	bl	10f24 <fread_unlocked@plt>
   11208:	cmp	r8, #0
   1120c:	movne	r5, #0
   11210:	mov	fp, r0
   11214:	bne	11284 <__assert_fail@plt+0x324>
   11218:	mov	r0, r4
   1121c:	bl	10de0 <ferror_unlocked@plt>
   11220:	add	r6, r6, fp
   11224:	subs	r5, r0, #0
   11228:	beq	11290 <__assert_fail@plt+0x330>
   1122c:	bl	10e70 <__errno_location@plt>
   11230:	mov	r2, #5
   11234:	ldr	r1, [pc, #828]	; 11578 <__assert_fail@plt+0x618>
   11238:	ldr	r4, [r0]
   1123c:	b	1135c <__assert_fail@plt+0x3fc>
   11240:	ldrb	r3, [r9, r5]
   11244:	mov	r0, r3
   11248:	str	r3, [sp, #28]
   1124c:	bl	11d60 <__assert_fail@plt+0xe00>
   11250:	ldr	r3, [sp, #28]
   11254:	cmp	r3, #61	; 0x3d
   11258:	orreq	r0, r0, #1
   1125c:	tst	r0, #255	; 0xff
   11260:	addne	r5, r5, #1
   11264:	bne	11284 <__assert_fail@plt+0x324>
   11268:	add	r0, r5, r6
   1126c:	add	r1, r0, #1
   11270:	sub	fp, fp, #1
   11274:	sub	r2, fp, r5
   11278:	add	r1, r7, r1
   1127c:	add	r0, r7, r0
   11280:	bl	10d2c <memmove@plt>
   11284:	cmp	r5, fp
   11288:	blt	11240 <__assert_fail@plt+0x2e0>
   1128c:	b	11218 <__assert_fail@plt+0x2b8>
   11290:	ldr	r3, [pc, #740]	; 1157c <__assert_fail@plt+0x61c>
   11294:	cmp	r6, r3
   11298:	ble	112dc <__assert_fail@plt+0x37c>
   1129c:	mov	sl, #3072	; 0xc00
   112a0:	add	fp, sp, #36	; 0x24
   112a4:	mov	r0, r4
   112a8:	bl	10f54 <feof_unlocked@plt>
   112ac:	cmp	r0, #0
   112b0:	movne	r0, #2
   112b4:	moveq	r0, #1
   112b8:	cmp	r5, r0
   112bc:	blt	112f0 <__assert_fail@plt+0x390>
   112c0:	mov	r0, r4
   112c4:	bl	10f54 <feof_unlocked@plt>
   112c8:	cmp	r0, #0
   112cc:	beq	111e8 <__assert_fail@plt+0x288>
   112d0:	ldr	r1, [sp, #12]
   112d4:	mov	r0, r4
   112d8:	bl	116b4 <__assert_fail@plt+0x754>
   112dc:	mov	r0, r4
   112e0:	bl	10f54 <feof_unlocked@plt>
   112e4:	cmp	r0, #0
   112e8:	beq	111f0 <__assert_fail@plt+0x290>
   112ec:	b	1129c <__assert_fail@plt+0x33c>
   112f0:	cmp	r5, #1
   112f4:	bne	11304 <__assert_fail@plt+0x3a4>
   112f8:	ldr	r3, [sp, #40]	; 0x28
   112fc:	cmp	r3, #0
   11300:	beq	112c0 <__assert_fail@plt+0x360>
   11304:	cmp	r5, #0
   11308:	moveq	r2, r6
   1130c:	movne	r2, #0
   11310:	ldr	r3, [sp, #16]
   11314:	mov	r1, r7
   11318:	str	fp, [sp]
   1131c:	ldr	r0, [sp, #24]
   11320:	str	sl, [sp, #36]	; 0x24
   11324:	bl	11d84 <__assert_fail@plt+0xe24>
   11328:	ldr	r3, [sp, #20]
   1132c:	ldr	r2, [sp, #36]	; 0x24
   11330:	mov	r1, #1
   11334:	mov	r9, r0
   11338:	ldr	r0, [sp, #16]
   1133c:	bl	10d68 <fwrite_unlocked@plt>
   11340:	ldr	r3, [sp, #36]	; 0x24
   11344:	cmp	r0, r3
   11348:	bcs	11370 <__assert_fail@plt+0x410>
   1134c:	bl	10e70 <__errno_location@plt>
   11350:	ldr	r1, [pc, #552]	; 11580 <__assert_fail@plt+0x620>
   11354:	mov	r2, #5
   11358:	ldr	r4, [r0]
   1135c:	mov	r0, #0
   11360:	bl	10d8c <dcgettext@plt>
   11364:	mov	r1, r4
   11368:	mov	r2, r0
   1136c:	b	11390 <__assert_fail@plt+0x430>
   11370:	cmp	r9, #0
   11374:	bne	11398 <__assert_fail@plt+0x438>
   11378:	mov	r2, #5
   1137c:	ldr	r1, [pc, #512]	; 11584 <__assert_fail@plt+0x624>
   11380:	mov	r0, r9
   11384:	bl	10d8c <dcgettext@plt>
   11388:	mov	r1, r9
   1138c:	mov	r2, r0
   11390:	mov	r0, #1
   11394:	bl	10df8 <error@plt>
   11398:	add	r5, r5, #1
   1139c:	b	112a4 <__assert_fail@plt+0x344>
   113a0:	mov	r0, #30720	; 0x7800
   113a4:	bl	13e80 <__assert_fail@plt+0x2f20>
   113a8:	str	r0, [sp, #24]
   113ac:	mov	r0, #40960	; 0xa000
   113b0:	bl	13e80 <__assert_fail@plt+0x2f20>
   113b4:	str	r0, [sp, #16]
   113b8:	mov	r8, #0
   113bc:	mov	r5, #1
   113c0:	ldr	r0, [sp, #24]
   113c4:	rsb	r2, r8, #30720	; 0x7800
   113c8:	mov	r3, r4
   113cc:	mov	r1, r5
   113d0:	add	r0, r0, r8
   113d4:	bl	10f24 <fread_unlocked@plt>
   113d8:	add	r8, r8, r0
   113dc:	mov	r0, r4
   113e0:	bl	10f54 <feof_unlocked@plt>
   113e4:	cmp	r0, #0
   113e8:	bne	11458 <__assert_fail@plt+0x4f8>
   113ec:	mov	r0, r4
   113f0:	bl	10de0 <ferror_unlocked@plt>
   113f4:	cmp	r0, #0
   113f8:	bne	11458 <__assert_fail@plt+0x4f8>
   113fc:	ldr	r3, [pc, #388]	; 11588 <__assert_fail@plt+0x628>
   11400:	cmp	r8, r3
   11404:	ble	113c0 <__assert_fail@plt+0x460>
   11408:	mov	r1, #3
   1140c:	add	r0, r8, #2
   11410:	bl	14cc8 <__assert_fail@plt+0x3d68>
   11414:	ldr	r2, [sp, #16]
   11418:	mov	r1, r8
   1141c:	lsl	sl, r0, #2
   11420:	mov	r3, sl
   11424:	ldr	r0, [sp, #24]
   11428:	bl	11b10 <__assert_fail@plt+0xbb0>
   1142c:	cmp	r6, #0
   11430:	movne	r9, #0
   11434:	bne	114bc <__assert_fail@plt+0x55c>
   11438:	ldr	r3, [fp]
   1143c:	mov	r2, sl
   11440:	mov	r1, #1
   11444:	ldr	r0, [sp, #16]
   11448:	bl	10d68 <fwrite_unlocked@plt>
   1144c:	cmp	sl, r0
   11450:	bls	11460 <__assert_fail@plt+0x500>
   11454:	b	1134c <__assert_fail@plt+0x3ec>
   11458:	cmp	r8, #0
   1145c:	bgt	11408 <__assert_fail@plt+0x4a8>
   11460:	mov	r0, r4
   11464:	bl	10f54 <feof_unlocked@plt>
   11468:	cmp	r0, #0
   1146c:	beq	114f8 <__assert_fail@plt+0x598>
   11470:	cmp	r6, #0
   11474:	cmpne	r7, #0
   11478:	bgt	11510 <__assert_fail@plt+0x5b0>
   1147c:	mov	r0, r4
   11480:	bl	10de0 <ferror_unlocked@plt>
   11484:	cmp	r0, #0
   11488:	beq	112d0 <__assert_fail@plt+0x370>
   1148c:	b	1122c <__assert_fail@plt+0x2cc>
   11490:	ldr	r3, [pc, #192]	; 11558 <__assert_fail@plt+0x5f8>
   11494:	ldr	r0, [sp, #16]
   11498:	mov	r2, r5
   1149c:	ldr	r3, [r3]
   114a0:	mov	r1, #1
   114a4:	add	r0, r0, r9
   114a8:	bl	10d68 <fwrite_unlocked@plt>
   114ac:	cmp	r5, r0
   114b0:	bhi	1134c <__assert_fail@plt+0x3ec>
   114b4:	add	r7, r7, r5
   114b8:	add	r9, r9, r5
   114bc:	cmp	sl, r9
   114c0:	ble	11460 <__assert_fail@plt+0x500>
   114c4:	sub	r5, sl, r9
   114c8:	sub	r3, r6, r7
   114cc:	cmp	r5, r3
   114d0:	movge	r5, r3
   114d4:	cmp	r5, #0
   114d8:	bne	11490 <__assert_fail@plt+0x530>
   114dc:	ldr	r1, [sp, #20]
   114e0:	mov	r0, #10
   114e4:	bl	10d80 <fputc_unlocked@plt>
   114e8:	cmn	r0, #1
   114ec:	beq	1134c <__assert_fail@plt+0x3ec>
   114f0:	mov	r7, r5
   114f4:	b	114bc <__assert_fail@plt+0x55c>
   114f8:	mov	r0, r4
   114fc:	bl	10de0 <ferror_unlocked@plt>
   11500:	cmp	r0, #0
   11504:	cmpeq	r8, #30720	; 0x7800
   11508:	beq	113b8 <__assert_fail@plt+0x458>
   1150c:	b	11470 <__assert_fail@plt+0x510>
   11510:	ldr	r1, [sp, #20]
   11514:	mov	r0, #10
   11518:	bl	10d80 <fputc_unlocked@plt>
   1151c:	cmn	r0, #1
   11520:	bne	1147c <__assert_fail@plt+0x51c>
   11524:	b	1134c <__assert_fail@plt+0x3ec>
   11528:	andeq	r5, r1, r6, lsr #13
   1152c:	andeq	r5, r1, r7, lsr #13
   11530:	andeq	r5, r1, r4, lsl #12
   11534:	andeq	r2, r1, r8, lsr r0
   11538:	andeq	r6, r2, r8, asr r1
   1153c:	ldrdeq	r5, [r1], -r4
   11540:	andeq	r5, r1, r8, ror #13
   11544:	andeq	r6, r2, r0, asr #2
   11548:	andeq	r5, r1, sp, ror #13
   1154c:			; <UNDEFINED> instruction: 0x000156bf
   11550:	ldrdeq	r5, [r1], -r1
   11554:	ldrdeq	r5, [r1], -r8
   11558:	andeq	r6, r2, r4, asr r1
   1155c:	strdeq	r6, [r2], -r0
   11560:	andeq	r5, r1, r0, lsl #12
   11564:	andeq	r5, r1, fp, asr #4
   11568:	andeq	r5, r1, lr, lsr r9
   1156c:	andeq	r6, r2, r0, asr r1
   11570:	strdeq	r5, [r1], -lr
   11574:	ldrdeq	r5, [r1], -r5	; <UNPREDICTABLE>
   11578:	andeq	r5, r1, r1, lsl #14
   1157c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   11580:	andeq	r5, r1, ip, lsl #14
   11584:	andeq	r5, r1, r8, lsl r7
   11588:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   1158c:	mov	fp, #0
   11590:	mov	lr, #0
   11594:	pop	{r1}		; (ldr r1, [sp], #4)
   11598:	mov	r2, sp
   1159c:	push	{r2}		; (str r2, [sp, #-4]!)
   115a0:	push	{r0}		; (str r0, [sp, #-4]!)
   115a4:	ldr	ip, [pc, #16]	; 115bc <__assert_fail@plt+0x65c>
   115a8:	push	{ip}		; (str ip, [sp, #-4]!)
   115ac:	ldr	r0, [pc, #12]	; 115c0 <__assert_fail@plt+0x660>
   115b0:	ldr	r3, [pc, #12]	; 115c4 <__assert_fail@plt+0x664>
   115b4:	bl	10e10 <__libc_start_main@plt>
   115b8:	bl	10f48 <abort@plt>
   115bc:	andeq	r5, r1, r4, ror r1
   115c0:	andeq	r0, r1, ip, ror #30
   115c4:	andeq	r5, r1, r4, lsl r1
   115c8:	ldr	r3, [pc, #20]	; 115e4 <__assert_fail@plt+0x684>
   115cc:	ldr	r2, [pc, #20]	; 115e8 <__assert_fail@plt+0x688>
   115d0:	add	r3, pc, r3
   115d4:	ldr	r2, [r3, r2]
   115d8:	cmp	r2, #0
   115dc:	bxeq	lr
   115e0:	b	10e28 <__gmon_start__@plt>
   115e4:	andeq	r4, r1, r8, lsr #20
   115e8:	andeq	r0, r0, r4, ror #1
   115ec:	ldr	r3, [pc, #28]	; 11610 <__assert_fail@plt+0x6b0>
   115f0:	ldr	r0, [pc, #28]	; 11614 <__assert_fail@plt+0x6b4>
   115f4:	sub	r3, r3, r0
   115f8:	cmp	r3, #6
   115fc:	bxls	lr
   11600:	ldr	r3, [pc, #16]	; 11618 <__assert_fail@plt+0x6b8>
   11604:	cmp	r3, #0
   11608:	bxeq	lr
   1160c:	bx	r3
   11610:	andeq	r6, r2, fp, lsr r1
   11614:	andeq	r6, r2, r8, lsr r1
   11618:	andeq	r0, r0, r0
   1161c:	ldr	r1, [pc, #36]	; 11648 <__assert_fail@plt+0x6e8>
   11620:	ldr	r0, [pc, #36]	; 1164c <__assert_fail@plt+0x6ec>
   11624:	sub	r1, r1, r0
   11628:	asr	r1, r1, #2
   1162c:	add	r1, r1, r1, lsr #31
   11630:	asrs	r1, r1, #1
   11634:	bxeq	lr
   11638:	ldr	r3, [pc, #16]	; 11650 <__assert_fail@plt+0x6f0>
   1163c:	cmp	r3, #0
   11640:	bxeq	lr
   11644:	bx	r3
   11648:	andeq	r6, r2, r8, lsr r1
   1164c:	andeq	r6, r2, r8, lsr r1
   11650:	andeq	r0, r0, r0
   11654:	push	{r4, lr}
   11658:	ldr	r4, [pc, #24]	; 11678 <__assert_fail@plt+0x718>
   1165c:	ldrb	r3, [r4]
   11660:	cmp	r3, #0
   11664:	popne	{r4, pc}
   11668:	bl	115ec <__assert_fail@plt+0x68c>
   1166c:	mov	r3, #1
   11670:	strb	r3, [r4]
   11674:	pop	{r4, pc}
   11678:	andeq	r6, r2, ip, asr r1
   1167c:	ldr	r0, [pc, #40]	; 116ac <__assert_fail@plt+0x74c>
   11680:	ldr	r3, [r0]
   11684:	cmp	r3, #0
   11688:	bne	11690 <__assert_fail@plt+0x730>
   1168c:	b	1161c <__assert_fail@plt+0x6bc>
   11690:	ldr	r3, [pc, #24]	; 116b0 <__assert_fail@plt+0x750>
   11694:	cmp	r3, #0
   11698:	beq	1168c <__assert_fail@plt+0x72c>
   1169c:	push	{r4, lr}
   116a0:	blx	r3
   116a4:	pop	{r4, lr}
   116a8:	b	1161c <__assert_fail@plt+0x6bc>
   116ac:	andeq	r5, r2, r4, lsl pc
   116b0:	andeq	r0, r0, r0
   116b4:	push	{r4, lr}
   116b8:	mov	r4, r1
   116bc:	bl	12158 <__assert_fail@plt+0x11f8>
   116c0:	cmp	r0, #0
   116c4:	beq	11730 <__assert_fail@plt+0x7d0>
   116c8:	ldr	r1, [pc, #100]	; 11734 <__assert_fail@plt+0x7d4>
   116cc:	mov	r0, r4
   116d0:	bl	10d08 <strcmp@plt>
   116d4:	subs	r5, r0, #0
   116d8:	bne	11704 <__assert_fail@plt+0x7a4>
   116dc:	bl	10e70 <__errno_location@plt>
   116e0:	mov	r2, #5
   116e4:	ldr	r1, [pc, #76]	; 11738 <__assert_fail@plt+0x7d8>
   116e8:	ldr	r4, [r0]
   116ec:	mov	r0, r5
   116f0:	bl	10d8c <dcgettext@plt>
   116f4:	mov	r1, r4
   116f8:	mov	r2, r0
   116fc:	mov	r0, #1
   11700:	bl	10df8 <error@plt>
   11704:	bl	10e70 <__errno_location@plt>
   11708:	mov	r2, r4
   1170c:	mov	r1, #3
   11710:	ldr	r5, [r0]
   11714:	mov	r0, #0
   11718:	bl	13828 <__assert_fail@plt+0x28c8>
   1171c:	ldr	r2, [pc, #24]	; 1173c <__assert_fail@plt+0x7dc>
   11720:	mov	r1, r5
   11724:	mov	r3, r0
   11728:	mov	r0, #1
   1172c:	bl	10df8 <error@plt>
   11730:	bl	10e4c <exit@plt>
   11734:	andeq	r5, r1, lr, lsr r9
   11738:	andeq	r5, r1, r4, lsr r2
   1173c:	ldrdeq	r5, [r1], -r5	; <UNPREDICTABLE>
   11740:	subs	r4, r0, #0
   11744:	push	{r7, lr}
   11748:	sub	sp, sp, #56	; 0x38
   1174c:	ldr	r5, [pc, #568]	; 1198c <__assert_fail@plt+0xa2c>
   11750:	beq	11788 <__assert_fail@plt+0x828>
   11754:	ldr	r3, [pc, #564]	; 11990 <__assert_fail@plt+0xa30>
   11758:	mov	r2, #5
   1175c:	ldr	r1, [pc, #560]	; 11994 <__assert_fail@plt+0xa34>
   11760:	mov	r0, #0
   11764:	ldr	r6, [r3]
   11768:	bl	10d8c <dcgettext@plt>
   1176c:	ldr	r3, [r5]
   11770:	mov	r1, #1
   11774:	mov	r2, r0
   11778:	mov	r0, r6
   1177c:	bl	10eac <__fprintf_chk@plt>
   11780:	mov	r0, r4
   11784:	bl	10e4c <exit@plt>
   11788:	mov	r2, #5
   1178c:	ldr	r1, [pc, #516]	; 11998 <__assert_fail@plt+0xa38>
   11790:	bl	10d8c <dcgettext@plt>
   11794:	ldr	r2, [r5]
   11798:	ldr	r5, [pc, #508]	; 1199c <__assert_fail@plt+0xa3c>
   1179c:	ldr	r8, [pc, #508]	; 119a0 <__assert_fail@plt+0xa40>
   117a0:	mov	r6, r4
   117a4:	mov	r1, r0
   117a8:	mov	r0, #1
   117ac:	bl	10e94 <__printf_chk@plt>
   117b0:	mov	r2, #5
   117b4:	ldr	r1, [pc, #488]	; 119a4 <__assert_fail@plt+0xa44>
   117b8:	mov	r0, r4
   117bc:	bl	10d8c <dcgettext@plt>
   117c0:	mov	r2, #64	; 0x40
   117c4:	mov	r1, r0
   117c8:	mov	r0, #1
   117cc:	bl	10e94 <__printf_chk@plt>
   117d0:	mov	r2, #5
   117d4:	ldr	r1, [pc, #460]	; 119a8 <__assert_fail@plt+0xa48>
   117d8:	mov	r0, r4
   117dc:	bl	10d8c <dcgettext@plt>
   117e0:	ldr	r1, [r5]
   117e4:	bl	10cf0 <fputs_unlocked@plt>
   117e8:	mov	r2, #5
   117ec:	ldr	r1, [pc, #440]	; 119ac <__assert_fail@plt+0xa4c>
   117f0:	mov	r0, r4
   117f4:	bl	10d8c <dcgettext@plt>
   117f8:	ldr	r1, [r5]
   117fc:	bl	10cf0 <fputs_unlocked@plt>
   11800:	mov	r2, #5
   11804:	ldr	r1, [pc, #420]	; 119b0 <__assert_fail@plt+0xa50>
   11808:	mov	r0, r4
   1180c:	bl	10d8c <dcgettext@plt>
   11810:	ldr	r1, [r5]
   11814:	bl	10cf0 <fputs_unlocked@plt>
   11818:	mov	r2, #5
   1181c:	ldr	r1, [pc, #400]	; 119b4 <__assert_fail@plt+0xa54>
   11820:	mov	r0, r4
   11824:	bl	10d8c <dcgettext@plt>
   11828:	ldr	r1, [r5]
   1182c:	bl	10cf0 <fputs_unlocked@plt>
   11830:	mov	r2, #5
   11834:	ldr	r1, [pc, #380]	; 119b8 <__assert_fail@plt+0xa58>
   11838:	mov	r0, r4
   1183c:	bl	10d8c <dcgettext@plt>
   11840:	ldr	r1, [r5]
   11844:	bl	10cf0 <fputs_unlocked@plt>
   11848:	mov	r2, #5
   1184c:	ldr	r1, [pc, #360]	; 119bc <__assert_fail@plt+0xa5c>
   11850:	mov	r0, r4
   11854:	bl	10d8c <dcgettext@plt>
   11858:	ldr	r3, [pc, #320]	; 119a0 <__assert_fail@plt+0xa40>
   1185c:	mov	r2, r3
   11860:	mov	r1, r0
   11864:	mov	r0, #1
   11868:	bl	10e94 <__printf_chk@plt>
   1186c:	ldr	lr, [pc, #332]	; 119c0 <__assert_fail@plt+0xa60>
   11870:	mov	ip, sp
   11874:	ldm	lr!, {r0, r1, r2, r3}
   11878:	stmia	ip!, {r0, r1, r2, r3}
   1187c:	ldm	lr!, {r0, r1, r2, r3}
   11880:	stmia	ip!, {r0, r1, r2, r3}
   11884:	ldm	lr!, {r0, r1, r2, r3}
   11888:	stmia	ip!, {r0, r1, r2, r3}
   1188c:	ldm	lr, {r0, r1}
   11890:	stm	ip, {r0, r1}
   11894:	ldr	r1, [sp, r6]
   11898:	add	r7, sp, r6
   1189c:	cmp	r1, #0
   118a0:	bne	11944 <__assert_fail@plt+0x9e4>
   118a4:	ldr	r6, [r7, #4]
   118a8:	ldr	r7, [pc, #240]	; 119a0 <__assert_fail@plt+0xa40>
   118ac:	cmp	r6, #0
   118b0:	mov	r2, #5
   118b4:	ldr	r1, [pc, #264]	; 119c4 <__assert_fail@plt+0xa64>
   118b8:	mov	r0, #0
   118bc:	moveq	r6, r7
   118c0:	bl	10d8c <dcgettext@plt>
   118c4:	ldr	r3, [pc, #252]	; 119c8 <__assert_fail@plt+0xa68>
   118c8:	ldr	r2, [pc, #252]	; 119cc <__assert_fail@plt+0xa6c>
   118cc:	mov	r1, r0
   118d0:	mov	r0, #1
   118d4:	bl	10e94 <__printf_chk@plt>
   118d8:	mov	r1, #0
   118dc:	mov	r0, #5
   118e0:	bl	10ee8 <setlocale@plt>
   118e4:	cmp	r0, #0
   118e8:	bne	1195c <__assert_fail@plt+0x9fc>
   118ec:	mov	r2, #5
   118f0:	ldr	r1, [pc, #216]	; 119d0 <__assert_fail@plt+0xa70>
   118f4:	mov	r0, #0
   118f8:	bl	10d8c <dcgettext@plt>
   118fc:	ldr	r3, [pc, #156]	; 119a0 <__assert_fail@plt+0xa40>
   11900:	ldr	r2, [pc, #192]	; 119c8 <__assert_fail@plt+0xa68>
   11904:	mov	r1, r0
   11908:	mov	r0, #1
   1190c:	bl	10e94 <__printf_chk@plt>
   11910:	mov	r2, #5
   11914:	ldr	r1, [pc, #184]	; 119d4 <__assert_fail@plt+0xa74>
   11918:	mov	r0, #0
   1191c:	bl	10d8c <dcgettext@plt>
   11920:	ldr	r2, [pc, #176]	; 119d8 <__assert_fail@plt+0xa78>
   11924:	cmp	r6, r7
   11928:	ldr	r3, [pc, #172]	; 119dc <__assert_fail@plt+0xa7c>
   1192c:	moveq	r3, r2
   11930:	mov	r2, r6
   11934:	mov	r1, r0
   11938:	mov	r0, #1
   1193c:	bl	10e94 <__printf_chk@plt>
   11940:	b	11780 <__assert_fail@plt+0x820>
   11944:	mov	r0, r8
   11948:	bl	10d08 <strcmp@plt>
   1194c:	add	r6, r6, #8
   11950:	cmp	r0, #0
   11954:	bne	11894 <__assert_fail@plt+0x934>
   11958:	b	118a4 <__assert_fail@plt+0x944>
   1195c:	mov	r2, #3
   11960:	ldr	r1, [pc, #120]	; 119e0 <__assert_fail@plt+0xa80>
   11964:	bl	10f3c <strncmp@plt>
   11968:	cmp	r0, #0
   1196c:	beq	118ec <__assert_fail@plt+0x98c>
   11970:	mov	r2, #5
   11974:	ldr	r1, [pc, #104]	; 119e4 <__assert_fail@plt+0xa84>
   11978:	mov	r0, #0
   1197c:	bl	10d8c <dcgettext@plt>
   11980:	ldr	r1, [r5]
   11984:	bl	10cf0 <fputs_unlocked@plt>
   11988:	b	118ec <__assert_fail@plt+0x98c>
   1198c:	andeq	r6, r2, r8, ror #2
   11990:	andeq	r6, r2, r8, asr #2
   11994:	andeq	r5, r1, r2, asr r2
   11998:	andeq	r5, r1, r9, ror r2
   1199c:	andeq	r6, r2, r4, asr r1
   119a0:	andeq	r5, r1, fp, asr #4
   119a4:	muleq	r1, r7, r2
   119a8:	ldrdeq	r5, [r1], -sp
   119ac:	andeq	r5, r1, r5, lsl r3
   119b0:	andeq	r5, r1, r0, ror #6
   119b4:	andeq	r5, r1, r2, asr r4
   119b8:	andeq	r5, r1, pc, ror r4
   119bc:			; <UNDEFINED> instruction: 0x000154b5
   119c0:	muleq	r1, ip, r1
   119c4:	andeq	r5, r1, r1, asr #11
   119c8:	ldrdeq	r5, [r1], -r8
   119cc:	andeq	r5, r1, r0, lsl #12
   119d0:	andeq	r5, r1, r9, asr r6
   119d4:	andeq	r5, r1, r4, ror r6
   119d8:	andeq	r5, r1, r2, asr #14
   119dc:	andeq	r5, r1, r6, lsr #13
   119e0:	andeq	r5, r1, lr, lsl #12
   119e4:	andeq	r5, r1, r2, lsl r6
   119e8:	cmp	r1, #1
   119ec:	ble	11b04 <__assert_fail@plt+0xba4>
   119f0:	push	{r4, r5, r6, lr}
   119f4:	ldrb	ip, [r0]
   119f8:	ldr	lr, [pc, #268]	; 11b0c <__assert_fail@plt+0xbac>
   119fc:	ldrsb	r5, [lr, ip]
   11a00:	cmp	r5, #0
   11a04:	blt	11a50 <__assert_fail@plt+0xaf0>
   11a08:	ldrb	ip, [r0, #1]
   11a0c:	ldrsb	r6, [lr, ip]
   11a10:	cmp	r6, #0
   11a14:	blt	11a50 <__assert_fail@plt+0xaf0>
   11a18:	ldr	r4, [r3]
   11a1c:	ldr	ip, [r2]
   11a20:	cmp	r4, #0
   11a24:	beq	11a44 <__assert_fail@plt+0xae4>
   11a28:	asr	r4, r6, #4
   11a2c:	orr	r4, r4, r5, lsl #2
   11a30:	strb	r4, [ip]
   11a34:	ldr	r4, [r3]
   11a38:	add	ip, ip, #1
   11a3c:	sub	r4, r4, #1
   11a40:	str	r4, [r3]
   11a44:	cmp	r1, #2
   11a48:	bne	11a58 <__assert_fail@plt+0xaf8>
   11a4c:	str	ip, [r2]
   11a50:	mov	r0, #0
   11a54:	pop	{r4, r5, r6, pc}
   11a58:	ldrb	r4, [r0, #2]
   11a5c:	cmp	r4, #61	; 0x3d
   11a60:	bne	11a84 <__assert_fail@plt+0xb24>
   11a64:	cmp	r1, #4
   11a68:	bne	11a4c <__assert_fail@plt+0xaec>
   11a6c:	ldrb	r3, [r0, #3]
   11a70:	cmp	r3, #61	; 0x3d
   11a74:	bne	11a4c <__assert_fail@plt+0xaec>
   11a78:	str	ip, [r2]
   11a7c:	mov	r0, #1
   11a80:	pop	{r4, r5, r6, pc}
   11a84:	ldrsb	r4, [lr, r4]
   11a88:	cmp	r4, #0
   11a8c:	blt	11a4c <__assert_fail@plt+0xaec>
   11a90:	ldr	r5, [r3]
   11a94:	cmp	r5, #0
   11a98:	beq	11ab8 <__assert_fail@plt+0xb58>
   11a9c:	asr	r5, r4, #2
   11aa0:	orr	r5, r5, r6, lsl #4
   11aa4:	strb	r5, [ip]
   11aa8:	ldr	r5, [r3]
   11aac:	add	ip, ip, #1
   11ab0:	sub	r5, r5, #1
   11ab4:	str	r5, [r3]
   11ab8:	cmp	r1, #3
   11abc:	beq	11a4c <__assert_fail@plt+0xaec>
   11ac0:	ldrb	r0, [r0, #3]
   11ac4:	cmp	r0, #61	; 0x3d
   11ac8:	bne	11ad4 <__assert_fail@plt+0xb74>
   11acc:	cmp	r1, #4
   11ad0:	b	11a74 <__assert_fail@plt+0xb14>
   11ad4:	ldrsb	r1, [lr, r0]
   11ad8:	cmp	r1, #0
   11adc:	blt	11a4c <__assert_fail@plt+0xaec>
   11ae0:	ldr	r0, [r3]
   11ae4:	cmp	r0, #0
   11ae8:	orrne	r1, r1, r4, lsl #6
   11aec:	strbne	r1, [ip]
   11af0:	ldrne	r1, [r3]
   11af4:	addne	ip, ip, #1
   11af8:	subne	r1, r1, #1
   11afc:	strne	r1, [r3]
   11b00:	b	11a78 <__assert_fail@plt+0xb18>
   11b04:	mov	r0, #0
   11b08:	bx	lr
   11b0c:			; <UNDEFINED> instruction: 0x000157bc
   11b10:	tst	r3, #3
   11b14:	push	{r4, r5, r6, r7, lr}
   11b18:	bne	11b2c <__assert_fail@plt+0xbcc>
   11b1c:	asr	ip, r3, #2
   11b20:	add	ip, ip, ip, lsl #1
   11b24:	cmp	r1, ip
   11b28:	beq	11b58 <__assert_fail@plt+0xbf8>
   11b2c:	ldr	r4, [pc, #356]	; 11c98 <__assert_fail@plt+0xd38>
   11b30:	mov	r5, #0
   11b34:	mov	r6, #61	; 0x3d
   11b38:	cmp	r1, #0
   11b3c:	cmpne	r3, #0
   11b40:	movne	ip, #1
   11b44:	moveq	ip, #0
   11b48:	bne	11bd0 <__assert_fail@plt+0xc70>
   11b4c:	cmp	r3, #0
   11b50:	strbne	ip, [r2]
   11b54:	pop	{r4, r5, r6, r7, pc}
   11b58:	ldr	lr, [pc, #312]	; 11c98 <__assert_fail@plt+0xd38>
   11b5c:	add	r1, r0, r1
   11b60:	cmp	r1, r0
   11b64:	add	r2, r2, #4
   11b68:	bne	11b70 <__assert_fail@plt+0xc10>
   11b6c:	pop	{r4, r5, r6, r7, pc}
   11b70:	ldrb	r3, [r0]
   11b74:	ldrb	r4, [r0, #1]
   11b78:	add	r0, r0, #3
   11b7c:	add	ip, lr, r3, lsr #2
   11b80:	ldrb	ip, [ip, #256]	; 0x100
   11b84:	strb	ip, [r2, #-4]
   11b88:	lsr	ip, r4, #4
   11b8c:	add	ip, ip, r3, lsl #4
   11b90:	and	ip, ip, #63	; 0x3f
   11b94:	add	ip, lr, ip
   11b98:	ldrb	r3, [ip, #256]	; 0x100
   11b9c:	ldrb	ip, [r0, #-1]
   11ba0:	strb	r3, [r2, #-3]
   11ba4:	lsr	r3, ip, #6
   11ba8:	add	r3, r3, r4, lsl #2
   11bac:	and	r3, r3, #63	; 0x3f
   11bb0:	add	r3, lr, r3
   11bb4:	and	ip, ip, #63	; 0x3f
   11bb8:	ldrb	r3, [r3, #256]	; 0x100
   11bbc:	add	ip, lr, ip
   11bc0:	strb	r3, [r2, #-2]
   11bc4:	ldrb	r3, [ip, #256]	; 0x100
   11bc8:	strb	r3, [r2, #-1]
   11bcc:	b	11b60 <__assert_fail@plt+0xc00>
   11bd0:	ldrb	ip, [r0]
   11bd4:	cmp	r3, #1
   11bd8:	add	lr, r4, ip, lsr #2
   11bdc:	ldrb	lr, [lr, #256]	; 0x100
   11be0:	strb	lr, [r2]
   11be4:	popeq	{r4, r5, r6, r7, pc}
   11be8:	subs	lr, r1, #1
   11bec:	lsl	r7, ip, #4
   11bf0:	ldrbne	ip, [r0, #1]
   11bf4:	moveq	ip, r5
   11bf8:	lsrne	ip, ip, #4
   11bfc:	add	ip, ip, r7
   11c00:	and	ip, ip, #63	; 0x3f
   11c04:	add	ip, r4, ip
   11c08:	cmp	r3, #2
   11c0c:	ldrb	ip, [ip, #256]	; 0x100
   11c10:	strb	ip, [r2, #1]
   11c14:	popeq	{r4, r5, r6, r7, pc}
   11c18:	cmp	lr, #0
   11c1c:	moveq	r1, r6
   11c20:	beq	11c4c <__assert_fail@plt+0xcec>
   11c24:	subs	lr, r1, #2
   11c28:	ldrb	r7, [r0, #1]
   11c2c:	ldrbne	ip, [r0, #2]
   11c30:	moveq	r1, r5
   11c34:	lsl	r7, r7, #2
   11c38:	lsrne	r1, ip, #6
   11c3c:	add	r1, r1, r7
   11c40:	and	r1, r1, #63	; 0x3f
   11c44:	add	r1, r4, r1
   11c48:	ldrb	r1, [r1, #256]	; 0x100
   11c4c:	cmp	r3, #3
   11c50:	strb	r1, [r2, #2]
   11c54:	popeq	{r4, r5, r6, r7, pc}
   11c58:	cmp	lr, #0
   11c5c:	moveq	r1, r6
   11c60:	ldrbne	r1, [r0, #2]
   11c64:	add	r2, r2, #4
   11c68:	andne	r1, r1, #63	; 0x3f
   11c6c:	addne	r1, r4, r1
   11c70:	ldrbne	r1, [r1, #256]	; 0x100
   11c74:	subs	r3, r3, #4
   11c78:	strb	r1, [r2, #-1]
   11c7c:	popeq	{r4, r5, r6, r7, pc}
   11c80:	cmp	lr, #0
   11c84:	beq	11c90 <__assert_fail@plt+0xd30>
   11c88:	subs	lr, lr, #1
   11c8c:	addne	r0, r0, #3
   11c90:	mov	r1, lr
   11c94:	b	11b38 <__assert_fail@plt+0xbd8>
   11c98:			; <UNDEFINED> instruction: 0x000157bc
   11c9c:	push	{r4, r5, r6, r7, r8, lr}
   11ca0:	mov	r6, r1
   11ca4:	mov	r8, r0
   11ca8:	mov	r1, #3
   11cac:	mov	r0, r6
   11cb0:	mov	r7, r2
   11cb4:	bl	14ee8 <__assert_fail@plt+0x3f88>
   11cb8:	mov	r0, r6
   11cbc:	adds	r4, r1, #0
   11cc0:	mov	r1, #3
   11cc4:	movne	r4, #1
   11cc8:	bl	14cc8 <__assert_fail@plt+0x3d68>
   11ccc:	adds	r4, r4, r0
   11cd0:	bpl	11d18 <__assert_fail@plt+0xdb8>
   11cd4:	cmn	r4, #1
   11cd8:	moveq	r0, #0
   11cdc:	beq	11cf8 <__assert_fail@plt+0xd98>
   11ce0:	mov	r1, r4
   11ce4:	mov	r0, #-2147483648	; 0x80000000
   11ce8:	bl	14cc8 <__assert_fail@plt+0x3d68>
   11cec:	sub	r0, r0, #3
   11cf0:	clz	r0, r0
   11cf4:	lsr	r0, r0, #5
   11cf8:	cmp	r0, #0
   11cfc:	bne	11d08 <__assert_fail@plt+0xda8>
   11d00:	cmp	r6, #0
   11d04:	bge	11d28 <__assert_fail@plt+0xdc8>
   11d08:	mov	r5, #0
   11d0c:	str	r5, [r7]
   11d10:	mov	r0, r5
   11d14:	pop	{r4, r5, r6, r7, r8, pc}
   11d18:	cmn	r4, #-536870911	; 0xe0000001
   11d1c:	movle	r0, #0
   11d20:	movgt	r0, #1
   11d24:	b	11cf8 <__assert_fail@plt+0xd98>
   11d28:	lsl	r4, r4, #2
   11d2c:	add	r5, r4, #1
   11d30:	mov	r0, r5
   11d34:	bl	14800 <__assert_fail@plt+0x38a0>
   11d38:	cmp	r0, #0
   11d3c:	mov	r2, r0
   11d40:	str	r0, [r7]
   11d44:	beq	11d10 <__assert_fail@plt+0xdb0>
   11d48:	mov	r3, r5
   11d4c:	mov	r1, r6
   11d50:	mov	r0, r8
   11d54:	bl	11b10 <__assert_fail@plt+0xbb0>
   11d58:	mov	r5, r4
   11d5c:	b	11d10 <__assert_fail@plt+0xdb0>
   11d60:	ldr	r3, [pc, #12]	; 11d74 <__assert_fail@plt+0xe14>
   11d64:	ldrb	r0, [r3, r0]
   11d68:	eor	r0, r0, #128	; 0x80
   11d6c:	lsr	r0, r0, #7
   11d70:	bx	lr
   11d74:			; <UNDEFINED> instruction: 0x000157bc
   11d78:	mov	r3, #0
   11d7c:	str	r3, [r0]
   11d80:	bx	lr
   11d84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d88:	sub	sp, sp, #28
   11d8c:	subs	r6, r0, #0
   11d90:	ldr	sl, [sp, #64]	; 0x40
   11d94:	str	r3, [sp, #12]
   11d98:	clzne	r8, r2
   11d9c:	ldr	r3, [sl]
   11da0:	lsrne	r8, r8, #5
   11da4:	str	r3, [sp, #20]
   11da8:	movne	r3, #1
   11dac:	moveq	r3, #0
   11db0:	str	r3, [sp]
   11db4:	ldrne	r3, [r6]
   11db8:	moveq	r8, r6
   11dbc:	strne	r3, [sp, #4]
   11dc0:	ldr	r3, [sp]
   11dc4:	eor	r8, r8, #1
   11dc8:	mov	r9, r1
   11dcc:	mov	r7, r2
   11dd0:	and	r3, r3, r8
   11dd4:	streq	r6, [sp, #4]
   11dd8:	str	r3, [sp, #8]
   11ddc:	ldr	r3, [sp, #4]
   11de0:	cmp	r3, #0
   11de4:	movne	r3, #0
   11de8:	andeq	r3, r8, #1
   11dec:	cmp	r3, #0
   11df0:	moveq	r5, r7
   11df4:	ldreq	fp, [sp, #20]
   11df8:	moveq	r4, r9
   11dfc:	beq	11e30 <__assert_fail@plt+0xed0>
   11e00:	mov	r4, r9
   11e04:	sub	r5, r7, r4
   11e08:	add	r5, r9, r5
   11e0c:	add	r3, sp, #20
   11e10:	add	r2, sp, #12
   11e14:	mov	r1, r5
   11e18:	mov	r0, r4
   11e1c:	ldr	fp, [sp, #20]
   11e20:	bl	119e8 <__assert_fail@plt+0xa88>
   11e24:	cmp	r0, #0
   11e28:	addne	r4, r4, #4
   11e2c:	bne	11e04 <__assert_fail@plt+0xea4>
   11e30:	cmp	r5, #0
   11e34:	movne	r3, #0
   11e38:	andeq	r3, r8, #1
   11e3c:	cmp	r3, #0
   11e40:	bne	11f64 <__assert_fail@plt+0x1004>
   11e44:	cmp	r5, #0
   11e48:	beq	11e70 <__assert_fail@plt+0xf10>
   11e4c:	ldrb	r3, [r4]
   11e50:	ldr	r2, [sp]
   11e54:	cmp	r3, #10
   11e58:	movne	r2, #0
   11e5c:	andeq	r2, r2, #1
   11e60:	cmp	r2, #0
   11e64:	subne	r7, r5, #1
   11e68:	addne	r4, r4, #1
   11e6c:	bne	11f54 <__assert_fail@plt+0xff4>
   11e70:	ldr	r3, [sp, #20]
   11e74:	cmp	r6, #0
   11e78:	sub	r2, fp, r3
   11e7c:	ldr	r3, [sp, #12]
   11e80:	str	fp, [sp, #20]
   11e84:	sub	r3, r3, r2
   11e88:	str	r3, [sp, #12]
   11e8c:	add	r7, r4, r5
   11e90:	beq	11f5c <__assert_fail@plt+0xffc>
   11e94:	ldr	r3, [r6]
   11e98:	cmp	r3, #4
   11e9c:	moveq	r3, #0
   11ea0:	streq	r3, [r6]
   11ea4:	cmp	r5, #3
   11ea8:	ldr	r3, [r6]
   11eac:	clz	r3, r3
   11eb0:	lsr	r3, r3, #5
   11eb4:	movle	r3, #0
   11eb8:	cmp	r3, #0
   11ebc:	beq	11ee4 <__assert_fail@plt+0xf84>
   11ec0:	mov	r0, r4
   11ec4:	mov	r2, #4
   11ec8:	mov	r1, #10
   11ecc:	bl	10eb8 <memchr@plt>
   11ed0:	cmp	r0, #0
   11ed4:	moveq	r0, r4
   11ed8:	moveq	r5, #4
   11edc:	addeq	r4, r4, #4
   11ee0:	beq	11f38 <__assert_fail@plt+0xfd8>
   11ee4:	cmp	r7, r4
   11ee8:	bls	11f14 <__assert_fail@plt+0xfb4>
   11eec:	ldrb	r1, [r4], #1
   11ef0:	cmp	r1, #10
   11ef4:	beq	11ee4 <__assert_fail@plt+0xf84>
   11ef8:	ldr	r0, [r6]
   11efc:	mov	r3, r6
   11f00:	add	r2, r0, #1
   11f04:	cmp	r2, #4
   11f08:	str	r2, [r3], r0
   11f0c:	strb	r1, [r3, #4]
   11f10:	bne	11ee4 <__assert_fail@plt+0xf84>
   11f14:	mov	r0, r6
   11f18:	ldr	r5, [r0], #4
   11f1c:	cmp	r5, #0
   11f20:	beq	11f64 <__assert_fail@plt+0x1004>
   11f24:	cmp	r5, #3
   11f28:	bgt	11f38 <__assert_fail@plt+0xfd8>
   11f2c:	ldr	r3, [sp, #8]
   11f30:	cmp	r3, #0
   11f34:	bne	11f64 <__assert_fail@plt+0x1004>
   11f38:	add	r3, sp, #20
   11f3c:	add	r2, sp, #12
   11f40:	mov	r1, r5
   11f44:	bl	119e8 <__assert_fail@plt+0xa88>
   11f48:	cmp	r0, #0
   11f4c:	beq	11f68 <__assert_fail@plt+0x1008>
   11f50:	sub	r7, r7, r4
   11f54:	mov	r9, r4
   11f58:	b	11ddc <__assert_fail@plt+0xe7c>
   11f5c:	mov	r0, r4
   11f60:	b	11f1c <__assert_fail@plt+0xfbc>
   11f64:	mov	r5, #0
   11f68:	ldr	r3, [sl]
   11f6c:	ldr	r2, [sp, #20]
   11f70:	clz	r0, r5
   11f74:	sub	r3, r3, r2
   11f78:	lsr	r0, r0, #5
   11f7c:	str	r3, [sl]
   11f80:	add	sp, sp, #28
   11f84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f88:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   11f8c:	mov	r7, r0
   11f90:	asr	r0, r2, #2
   11f94:	add	r0, r0, #1
   11f98:	mov	r5, r3
   11f9c:	add	r0, r0, r0, lsl #1
   11fa0:	mov	r8, r1
   11fa4:	mov	r4, r2
   11fa8:	ldr	r6, [sp, #40]	; 0x28
   11fac:	str	r0, [sp, #12]
   11fb0:	bl	14800 <__assert_fail@plt+0x38a0>
   11fb4:	cmp	r0, #0
   11fb8:	str	r0, [r5]
   11fbc:	bne	11fd0 <__assert_fail@plt+0x1070>
   11fc0:	mov	r4, #1
   11fc4:	mov	r0, r4
   11fc8:	add	sp, sp, #16
   11fcc:	pop	{r4, r5, r6, r7, r8, pc}
   11fd0:	add	r2, sp, #12
   11fd4:	mov	r3, r0
   11fd8:	str	r2, [sp]
   11fdc:	mov	r1, r8
   11fe0:	mov	r2, r4
   11fe4:	mov	r0, r7
   11fe8:	bl	11d84 <__assert_fail@plt+0xe24>
   11fec:	subs	r4, r0, #0
   11ff0:	bne	12004 <__assert_fail@plt+0x10a4>
   11ff4:	ldr	r0, [r5]
   11ff8:	bl	12250 <__assert_fail@plt+0x12f0>
   11ffc:	str	r4, [r5]
   12000:	b	11fc4 <__assert_fail@plt+0x1064>
   12004:	cmp	r6, #0
   12008:	beq	11fc0 <__assert_fail@plt+0x1060>
   1200c:	ldr	r3, [sp, #12]
   12010:	str	r3, [r6]
   12014:	b	11fc4 <__assert_fail@plt+0x1064>
   12018:	ldr	r3, [pc, #4]	; 12024 <__assert_fail@plt+0x10c4>
   1201c:	str	r0, [r3]
   12020:	bx	lr
   12024:	andeq	r6, r2, r0, ror #2
   12028:	ldr	r3, [pc, #4]	; 12034 <__assert_fail@plt+0x10d4>
   1202c:	strb	r0, [r3, #4]
   12030:	bx	lr
   12034:	andeq	r6, r2, r0, ror #2
   12038:	ldr	r3, [pc, #192]	; 12100 <__assert_fail@plt+0x11a0>
   1203c:	push	{r0, r1, r4, r5, r6, lr}
   12040:	ldr	r0, [r3]
   12044:	bl	1489c <__assert_fail@plt+0x393c>
   12048:	cmp	r0, #0
   1204c:	beq	120e4 <__assert_fail@plt+0x1184>
   12050:	ldr	r3, [pc, #172]	; 12104 <__assert_fail@plt+0x11a4>
   12054:	mov	r4, r3
   12058:	ldrb	r2, [r3, #4]
   1205c:	cmp	r2, #0
   12060:	beq	12074 <__assert_fail@plt+0x1114>
   12064:	bl	10e70 <__errno_location@plt>
   12068:	ldr	r3, [r0]
   1206c:	cmp	r3, #32
   12070:	beq	120e4 <__assert_fail@plt+0x1184>
   12074:	mov	r2, #5
   12078:	ldr	r1, [pc, #136]	; 12108 <__assert_fail@plt+0x11a8>
   1207c:	mov	r0, #0
   12080:	bl	10d8c <dcgettext@plt>
   12084:	ldr	r4, [r4]
   12088:	cmp	r4, #0
   1208c:	mov	r5, r0
   12090:	beq	120c8 <__assert_fail@plt+0x1168>
   12094:	bl	10e70 <__errno_location@plt>
   12098:	ldr	r6, [r0]
   1209c:	mov	r0, r4
   120a0:	bl	13818 <__assert_fail@plt+0x28b8>
   120a4:	str	r5, [sp]
   120a8:	ldr	r2, [pc, #92]	; 1210c <__assert_fail@plt+0x11ac>
   120ac:	mov	r1, r6
   120b0:	mov	r3, r0
   120b4:	mov	r0, #0
   120b8:	bl	10df8 <error@plt>
   120bc:	ldr	r3, [pc, #76]	; 12110 <__assert_fail@plt+0x11b0>
   120c0:	ldr	r0, [r3]
   120c4:	bl	10d44 <_exit@plt>
   120c8:	bl	10e70 <__errno_location@plt>
   120cc:	mov	r3, r5
   120d0:	ldr	r2, [pc, #60]	; 12114 <__assert_fail@plt+0x11b4>
   120d4:	ldr	r1, [r0]
   120d8:	mov	r0, r4
   120dc:	bl	10df8 <error@plt>
   120e0:	b	120bc <__assert_fail@plt+0x115c>
   120e4:	ldr	r3, [pc, #44]	; 12118 <__assert_fail@plt+0x11b8>
   120e8:	ldr	r0, [r3]
   120ec:	bl	1489c <__assert_fail@plt+0x393c>
   120f0:	cmp	r0, #0
   120f4:	bne	120bc <__assert_fail@plt+0x115c>
   120f8:	add	sp, sp, #8
   120fc:	pop	{r4, r5, r6, pc}
   12100:	andeq	r6, r2, r4, asr r1
   12104:	andeq	r6, r2, r0, ror #2
   12108:	andeq	r5, r1, ip, lsl #14
   1210c:	ldrdeq	r5, [r1], -r1
   12110:	strdeq	r6, [r2], -r4
   12114:	ldrdeq	r5, [r1], -r5	; <UNPREDICTABLE>
   12118:	andeq	r6, r2, r8, asr #2
   1211c:	push	{r4, r5}
   12120:	pop	{r4, r5}
   12124:	b	10d14 <posix_fadvise64@plt>
   12128:	cmp	r0, #0
   1212c:	bxeq	lr
   12130:	push	{r0, r1, r2, r3, r4, lr}
   12134:	mov	r4, r1
   12138:	bl	10ea0 <fileno@plt>
   1213c:	mov	r2, #0
   12140:	mov	r3, #0
   12144:	str	r4, [sp, #8]
   12148:	strd	r2, [sp]
   1214c:	bl	10d14 <posix_fadvise64@plt>
   12150:	add	sp, sp, #16
   12154:	pop	{r4, pc}
   12158:	push	{r0, r1, r2, r4, r5, lr}
   1215c:	mov	r4, r0
   12160:	bl	10ea0 <fileno@plt>
   12164:	cmp	r0, #0
   12168:	mov	r0, r4
   1216c:	bge	1217c <__assert_fail@plt+0x121c>
   12170:	add	sp, sp, #12
   12174:	pop	{r4, r5, lr}
   12178:	b	10ed0 <fclose@plt>
   1217c:	bl	10e1c <__freading@plt>
   12180:	cmp	r0, #0
   12184:	bne	121c0 <__assert_fail@plt+0x1260>
   12188:	mov	r0, r4
   1218c:	bl	12200 <__assert_fail@plt+0x12a0>
   12190:	cmp	r0, #0
   12194:	bne	121f4 <__assert_fail@plt+0x1294>
   12198:	mov	r5, #0
   1219c:	mov	r0, r4
   121a0:	bl	10ed0 <fclose@plt>
   121a4:	cmp	r5, #0
   121a8:	beq	121b8 <__assert_fail@plt+0x1258>
   121ac:	bl	10e70 <__errno_location@plt>
   121b0:	str	r5, [r0]
   121b4:	mvn	r0, #0
   121b8:	add	sp, sp, #12
   121bc:	pop	{r4, r5, pc}
   121c0:	mov	r0, r4
   121c4:	bl	10ea0 <fileno@plt>
   121c8:	mov	r3, #1
   121cc:	str	r3, [sp]
   121d0:	mov	r2, #0
   121d4:	mov	r3, #0
   121d8:	bl	10dbc <lseek64@plt>
   121dc:	mvn	r3, #0
   121e0:	mvn	r2, #0
   121e4:	cmp	r1, r3
   121e8:	cmpeq	r0, r2
   121ec:	bne	12188 <__assert_fail@plt+0x1228>
   121f0:	b	12198 <__assert_fail@plt+0x1238>
   121f4:	bl	10e70 <__errno_location@plt>
   121f8:	ldr	r5, [r0]
   121fc:	b	1219c <__assert_fail@plt+0x123c>
   12200:	push	{r0, r1, r4, lr}
   12204:	subs	r4, r0, #0
   12208:	bne	1221c <__assert_fail@plt+0x12bc>
   1220c:	mov	r0, r4
   12210:	add	sp, sp, #8
   12214:	pop	{r4, lr}
   12218:	b	10d20 <fflush@plt>
   1221c:	bl	10e1c <__freading@plt>
   12220:	cmp	r0, #0
   12224:	beq	1220c <__assert_fail@plt+0x12ac>
   12228:	ldr	r3, [r4]
   1222c:	tst	r3, #256	; 0x100
   12230:	beq	1220c <__assert_fail@plt+0x12ac>
   12234:	mov	r3, #1
   12238:	str	r3, [sp]
   1223c:	mov	r2, #0
   12240:	mov	r3, #0
   12244:	mov	r0, r4
   12248:	bl	122a4 <__assert_fail@plt+0x1344>
   1224c:	b	1220c <__assert_fail@plt+0x12ac>
   12250:	push	{r0, r1, r2, r4, r5, lr}
   12254:	mov	r5, r0
   12258:	bl	10e70 <__errno_location@plt>
   1225c:	ldr	r3, [r0]
   12260:	mov	r4, r0
   12264:	str	r3, [sp]
   12268:	str	r3, [sp, #4]
   1226c:	mov	r3, #0
   12270:	str	r3, [r0]
   12274:	mov	r0, r5
   12278:	bl	10d38 <free@plt>
   1227c:	ldr	r3, [r4]
   12280:	add	r2, sp, #8
   12284:	cmp	r3, #0
   12288:	moveq	r3, #4
   1228c:	movne	r3, #0
   12290:	add	r3, r2, r3
   12294:	ldr	r3, [r3, #-8]
   12298:	str	r3, [r4]
   1229c:	add	sp, sp, #12
   122a0:	pop	{r4, r5, pc}
   122a4:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   122a8:	mov	r4, r0
   122ac:	ldmib	r0, {ip, lr}
   122b0:	ldr	r8, [sp, #32]
   122b4:	cmp	lr, ip
   122b8:	bne	12324 <__assert_fail@plt+0x13c4>
   122bc:	ldr	lr, [r0, #20]
   122c0:	ldr	ip, [r0, #16]
   122c4:	cmp	lr, ip
   122c8:	bne	12324 <__assert_fail@plt+0x13c4>
   122cc:	ldr	r5, [r0, #36]	; 0x24
   122d0:	cmp	r5, #0
   122d4:	bne	12324 <__assert_fail@plt+0x13c4>
   122d8:	mov	r6, r2
   122dc:	mov	r7, r3
   122e0:	bl	10ea0 <fileno@plt>
   122e4:	mov	r2, r6
   122e8:	mov	r3, r7
   122ec:	str	r8, [sp]
   122f0:	bl	10dbc <lseek64@plt>
   122f4:	mvn	r3, #0
   122f8:	mvn	r2, #0
   122fc:	cmp	r1, r3
   12300:	cmpeq	r0, r2
   12304:	mvneq	r0, #0
   12308:	ldrne	r3, [r4]
   1230c:	strdne	r0, [r4, #80]	; 0x50
   12310:	movne	r0, r5
   12314:	bicne	r3, r3, #16
   12318:	strne	r3, [r4]
   1231c:	add	sp, sp, #8
   12320:	pop	{r4, r5, r6, r7, r8, pc}
   12324:	str	r8, [sp, #32]
   12328:	mov	r0, r4
   1232c:	add	sp, sp, #8
   12330:	pop	{r4, r5, r6, r7, r8, lr}
   12334:	b	10edc <fseeko64@plt>
   12338:	push	{r4, r5, r6, lr}
   1233c:	subs	r5, r0, #0
   12340:	bne	12358 <__assert_fail@plt+0x13f8>
   12344:	ldr	r3, [pc, #124]	; 123c8 <__assert_fail@plt+0x1468>
   12348:	ldr	r0, [pc, #124]	; 123cc <__assert_fail@plt+0x146c>
   1234c:	ldr	r1, [r3]
   12350:	bl	10f30 <fputs@plt>
   12354:	bl	10f48 <abort@plt>
   12358:	mov	r1, #47	; 0x2f
   1235c:	bl	10ef4 <strrchr@plt>
   12360:	cmp	r0, #0
   12364:	addne	r4, r0, #1
   12368:	moveq	r4, r5
   1236c:	sub	r3, r4, r5
   12370:	cmp	r3, #6
   12374:	ble	123b4 <__assert_fail@plt+0x1454>
   12378:	mov	r2, #7
   1237c:	ldr	r1, [pc, #76]	; 123d0 <__assert_fail@plt+0x1470>
   12380:	sub	r0, r4, #7
   12384:	bl	10f3c <strncmp@plt>
   12388:	cmp	r0, #0
   1238c:	bne	123b4 <__assert_fail@plt+0x1454>
   12390:	mov	r2, #3
   12394:	ldr	r1, [pc, #56]	; 123d4 <__assert_fail@plt+0x1474>
   12398:	mov	r0, r4
   1239c:	bl	10f3c <strncmp@plt>
   123a0:	cmp	r0, #0
   123a4:	movne	r5, r4
   123a8:	ldreq	r3, [pc, #40]	; 123d8 <__assert_fail@plt+0x1478>
   123ac:	addeq	r5, r4, #3
   123b0:	streq	r5, [r3]
   123b4:	ldr	r3, [pc, #32]	; 123dc <__assert_fail@plt+0x147c>
   123b8:	str	r5, [r3]
   123bc:	ldr	r3, [pc, #28]	; 123e0 <__assert_fail@plt+0x1480>
   123c0:	str	r5, [r3]
   123c4:	pop	{r4, r5, r6, pc}
   123c8:	andeq	r6, r2, r8, asr #2
   123cc:	strdeq	r5, [r1], -ip
   123d0:	andeq	r5, r1, r4, lsr r9
   123d4:	andeq	r5, r1, ip, lsr r9
   123d8:	andeq	r6, r2, r8, lsr r1
   123dc:	andeq	r6, r2, r8, ror #2
   123e0:	andeq	r6, r2, ip, lsr r1
   123e4:	push	{r4, r5, r6, lr}
   123e8:	mov	r2, #48	; 0x30
   123ec:	mov	r5, r1
   123f0:	mov	r1, #0
   123f4:	mov	r4, r0
   123f8:	bl	10e88 <memset@plt>
   123fc:	cmp	r5, #10
   12400:	bne	12408 <__assert_fail@plt+0x14a8>
   12404:	bl	10f48 <abort@plt>
   12408:	str	r5, [r4]
   1240c:	mov	r0, r4
   12410:	pop	{r4, r5, r6, pc}
   12414:	push	{r4, r5, r6, lr}
   12418:	mov	r4, r0
   1241c:	mov	r5, r1
   12420:	bl	1490c <__assert_fail@plt+0x39ac>
   12424:	ldrb	r3, [r0]
   12428:	bic	r3, r3, #32
   1242c:	cmp	r3, #85	; 0x55
   12430:	bne	124a0 <__assert_fail@plt+0x1540>
   12434:	ldrb	r3, [r0, #1]
   12438:	bic	r3, r3, #32
   1243c:	cmp	r3, #84	; 0x54
   12440:	bne	12478 <__assert_fail@plt+0x1518>
   12444:	ldrb	r3, [r0, #2]
   12448:	bic	r3, r3, #32
   1244c:	cmp	r3, #70	; 0x46
   12450:	bne	12478 <__assert_fail@plt+0x1518>
   12454:	ldrb	r3, [r0, #3]
   12458:	cmp	r3, #45	; 0x2d
   1245c:	bne	12478 <__assert_fail@plt+0x1518>
   12460:	ldrb	r3, [r0, #4]
   12464:	cmp	r3, #56	; 0x38
   12468:	bne	12478 <__assert_fail@plt+0x1518>
   1246c:	ldrb	r3, [r0, #5]
   12470:	cmp	r3, #0
   12474:	beq	1248c <__assert_fail@plt+0x152c>
   12478:	ldr	r1, [pc, #144]	; 12510 <__assert_fail@plt+0x15b0>
   1247c:	ldr	r0, [pc, #144]	; 12514 <__assert_fail@plt+0x15b4>
   12480:	cmp	r5, #9
   12484:	movne	r0, r1
   12488:	pop	{r4, r5, r6, pc}
   1248c:	ldrb	r3, [r4]
   12490:	ldr	r1, [pc, #128]	; 12518 <__assert_fail@plt+0x15b8>
   12494:	ldr	r0, [pc, #128]	; 1251c <__assert_fail@plt+0x15bc>
   12498:	cmp	r3, #96	; 0x60
   1249c:	b	12484 <__assert_fail@plt+0x1524>
   124a0:	cmp	r3, #71	; 0x47
   124a4:	bne	12478 <__assert_fail@plt+0x1518>
   124a8:	ldrb	r3, [r0, #1]
   124ac:	bic	r3, r3, #32
   124b0:	cmp	r3, #66	; 0x42
   124b4:	bne	12478 <__assert_fail@plt+0x1518>
   124b8:	ldrb	r3, [r0, #2]
   124bc:	cmp	r3, #49	; 0x31
   124c0:	bne	12478 <__assert_fail@plt+0x1518>
   124c4:	ldrb	r3, [r0, #3]
   124c8:	cmp	r3, #56	; 0x38
   124cc:	bne	12478 <__assert_fail@plt+0x1518>
   124d0:	ldrb	r3, [r0, #4]
   124d4:	cmp	r3, #48	; 0x30
   124d8:	bne	12478 <__assert_fail@plt+0x1518>
   124dc:	ldrb	r3, [r0, #5]
   124e0:	cmp	r3, #51	; 0x33
   124e4:	bne	12478 <__assert_fail@plt+0x1518>
   124e8:	ldrb	r3, [r0, #6]
   124ec:	cmp	r3, #48	; 0x30
   124f0:	bne	12478 <__assert_fail@plt+0x1518>
   124f4:	ldrb	r3, [r0, #7]
   124f8:	cmp	r3, #0
   124fc:	bne	12478 <__assert_fail@plt+0x1518>
   12500:	ldrb	r3, [r4]
   12504:	ldr	r1, [pc, #20]	; 12520 <__assert_fail@plt+0x15c0>
   12508:	ldr	r0, [pc, #20]	; 12524 <__assert_fail@plt+0x15c4>
   1250c:	b	12498 <__assert_fail@plt+0x1538>
   12510:	andeq	r5, r1, r5, lsr #19
   12514:	andeq	r5, r1, r3, lsr #19
   12518:	muleq	r1, r8, r9
   1251c:	muleq	r1, r4, r9
   12520:	andeq	r5, r1, r0, lsr #19
   12524:	muleq	r1, ip, r9
   12528:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1252c:	sub	sp, sp, #108	; 0x6c
   12530:	mov	r8, r0
   12534:	str	r3, [sp, #36]	; 0x24
   12538:	mov	r5, r1
   1253c:	str	r2, [sp, #44]	; 0x2c
   12540:	ldr	sl, [sp, #144]	; 0x90
   12544:	bl	10dc8 <__ctype_get_mb_cur_max@plt>
   12548:	ldr	r3, [sp, #148]	; 0x94
   1254c:	mov	r7, #0
   12550:	str	r7, [sp, #48]	; 0x30
   12554:	lsr	r6, r3, #1
   12558:	and	r6, r6, #1
   1255c:	mov	r3, #1
   12560:	str	r3, [sp, #72]	; 0x48
   12564:	str	r7, [sp, #24]
   12568:	str	r7, [sp, #32]
   1256c:	str	r7, [sp, #40]	; 0x28
   12570:	str	r7, [sp, #60]	; 0x3c
   12574:	str	r0, [sp, #76]	; 0x4c
   12578:	cmp	sl, #10
   1257c:	ldrls	pc, [pc, sl, lsl #2]
   12580:	b	127bc <__assert_fail@plt+0x185c>
   12584:			; <UNDEFINED> instruction: 0x000125b0
   12588:	andeq	r3, r1, r4, asr #4
   1258c:	andeq	r2, r1, r8, lsl #15
   12590:	ldrdeq	r2, [r1], -r4
   12594:	andeq	r2, r1, r4, ror #14
   12598:			; <UNDEFINED> instruction: 0x000125bc
   1259c:	andeq	r3, r1, r4, lsr #4
   125a0:	andeq	r2, r1, r0, asr #15
   125a4:			; <UNDEFINED> instruction: 0x000126b4
   125a8:			; <UNDEFINED> instruction: 0x000126b4
   125ac:			; <UNDEFINED> instruction: 0x000126b4
   125b0:	mov	r6, #0
   125b4:	mov	r4, #0
   125b8:	b	125e8 <__assert_fail@plt+0x1688>
   125bc:	cmp	r6, #0
   125c0:	bne	127e4 <__assert_fail@plt+0x1884>
   125c4:	cmp	r5, #0
   125c8:	movne	r3, #34	; 0x22
   125cc:	strbne	r3, [r8]
   125d0:	mov	r3, #1
   125d4:	str	r3, [sp, #24]
   125d8:	str	r3, [sp, #32]
   125dc:	mov	r4, #1
   125e0:	ldr	r3, [pc, #3172]	; 1324c <__assert_fail@plt+0x22ec>
   125e4:	str	r3, [sp, #40]	; 0x28
   125e8:	mov	r9, r5
   125ec:	mov	r3, #0
   125f0:	str	r7, [sp, #68]	; 0x44
   125f4:	str	r3, [sp, #28]
   125f8:	ldr	r3, [sp, #36]	; 0x24
   125fc:	cmn	r3, #1
   12600:	bne	13190 <__assert_fail@plt+0x2230>
   12604:	ldr	r3, [sp, #44]	; 0x2c
   12608:	ldr	r2, [sp, #28]
   1260c:	ldrb	r3, [r3, r2]
   12610:	adds	r3, r3, #0
   12614:	movne	r3, #1
   12618:	str	r3, [sp, #52]	; 0x34
   1261c:	ldr	r3, [sp, #52]	; 0x34
   12620:	cmp	r3, #0
   12624:	bne	1280c <__assert_fail@plt+0x18ac>
   12628:	sub	r2, sl, #2
   1262c:	clz	r2, r2
   12630:	lsr	r2, r2, #5
   12634:	and	r3, r6, r2
   12638:	cmp	r4, #0
   1263c:	movne	r3, #0
   12640:	andeq	r3, r3, #1
   12644:	cmp	r3, #0
   12648:	bne	129d4 <__assert_fail@plt+0x1a74>
   1264c:	eor	r3, r6, #1
   12650:	ands	r2, r2, r3
   12654:	beq	131c8 <__assert_fail@plt+0x2268>
   12658:	ldr	r3, [sp, #68]	; 0x44
   1265c:	cmp	r3, #0
   12660:	beq	13200 <__assert_fail@plt+0x22a0>
   12664:	ldr	r3, [sp, #72]	; 0x48
   12668:	cmp	r3, #0
   1266c:	beq	131a4 <__assert_fail@plt+0x2244>
   12670:	ldr	r3, [sp, #160]	; 0xa0
   12674:	ldr	r2, [sp, #44]	; 0x2c
   12678:	str	r3, [sp, #16]
   1267c:	ldr	r3, [sp, #156]	; 0x9c
   12680:	ldr	r1, [sp, #60]	; 0x3c
   12684:	str	r3, [sp, #12]
   12688:	ldr	r3, [sp, #152]	; 0x98
   1268c:	str	r3, [sp, #8]
   12690:	ldr	r3, [sp, #148]	; 0x94
   12694:	str	r3, [sp, #4]
   12698:	mov	r3, #5
   1269c:	str	r3, [sp]
   126a0:	ldr	r3, [sp, #36]	; 0x24
   126a4:	mov	r0, r8
   126a8:	bl	12528 <__assert_fail@plt+0x15c8>
   126ac:	mov	r4, r0
   126b0:	b	131f4 <__assert_fail@plt+0x2294>
   126b4:	cmp	sl, #10
   126b8:	beq	12714 <__assert_fail@plt+0x17b4>
   126bc:	ldr	r4, [pc, #2956]	; 13250 <__assert_fail@plt+0x22f0>
   126c0:	mov	r2, #5
   126c4:	mov	r1, r4
   126c8:	mov	r0, #0
   126cc:	bl	10d8c <dcgettext@plt>
   126d0:	cmp	r0, r4
   126d4:	str	r0, [sp, #156]	; 0x9c
   126d8:	bne	126e8 <__assert_fail@plt+0x1788>
   126dc:	mov	r1, sl
   126e0:	bl	12414 <__assert_fail@plt+0x14b4>
   126e4:	str	r0, [sp, #156]	; 0x9c
   126e8:	ldr	r4, [pc, #2916]	; 13254 <__assert_fail@plt+0x22f4>
   126ec:	mov	r2, #5
   126f0:	mov	r1, r4
   126f4:	mov	r0, #0
   126f8:	bl	10d8c <dcgettext@plt>
   126fc:	cmp	r0, r4
   12700:	str	r0, [sp, #160]	; 0xa0
   12704:	bne	12714 <__assert_fail@plt+0x17b4>
   12708:	mov	r1, sl
   1270c:	bl	12414 <__assert_fail@plt+0x14b4>
   12710:	str	r0, [sp, #160]	; 0xa0
   12714:	cmp	r6, #0
   12718:	moveq	r4, r6
   1271c:	beq	12734 <__assert_fail@plt+0x17d4>
   12720:	mov	r4, #0
   12724:	b	12744 <__assert_fail@plt+0x17e4>
   12728:	cmp	r5, r4
   1272c:	strbhi	r3, [r8, r4]
   12730:	add	r4, r4, #1
   12734:	ldr	r3, [sp, #156]	; 0x9c
   12738:	ldrb	r3, [r3, r4]
   1273c:	cmp	r3, #0
   12740:	bne	12728 <__assert_fail@plt+0x17c8>
   12744:	ldr	r0, [sp, #160]	; 0xa0
   12748:	bl	10e58 <strlen@plt>
   1274c:	ldr	r3, [sp, #160]	; 0xa0
   12750:	str	r3, [sp, #40]	; 0x28
   12754:	mov	r3, #1
   12758:	str	r3, [sp, #24]
   1275c:	str	r0, [sp, #32]
   12760:	b	125e8 <__assert_fail@plt+0x1688>
   12764:	mov	r3, #1
   12768:	cmp	r6, #0
   1276c:	streq	r3, [sp, #24]
   12770:	beq	12790 <__assert_fail@plt+0x1830>
   12774:	str	r3, [sp, #32]
   12778:	ldr	r3, [pc, #2772]	; 13254 <__assert_fail@plt+0x22f4>
   1277c:	mov	r4, #0
   12780:	str	r3, [sp, #40]	; 0x28
   12784:	b	127b4 <__assert_fail@plt+0x1854>
   12788:	cmp	r6, #0
   1278c:	bne	127fc <__assert_fail@plt+0x189c>
   12790:	cmp	r5, #0
   12794:	movne	r3, #39	; 0x27
   12798:	strbne	r3, [r8]
   1279c:	mov	r3, #1
   127a0:	str	r3, [sp, #32]
   127a4:	mov	r6, #0
   127a8:	ldr	r3, [pc, #2724]	; 13254 <__assert_fail@plt+0x22f4>
   127ac:	mov	r4, #1
   127b0:	str	r3, [sp, #40]	; 0x28
   127b4:	mov	sl, #2
   127b8:	b	125e8 <__assert_fail@plt+0x1688>
   127bc:	bl	10f48 <abort@plt>
   127c0:	mov	r6, #0
   127c4:	mov	r3, #1
   127c8:	str	r3, [sp, #24]
   127cc:	mov	r4, r6
   127d0:	b	125e8 <__assert_fail@plt+0x1688>
   127d4:	mov	r6, #1
   127d8:	str	r6, [sp, #24]
   127dc:	str	r6, [sp, #32]
   127e0:	b	12778 <__assert_fail@plt+0x1818>
   127e4:	mov	r3, #1
   127e8:	str	r3, [sp, #32]
   127ec:	ldr	r3, [pc, #2648]	; 1324c <__assert_fail@plt+0x22ec>
   127f0:	str	r6, [sp, #24]
   127f4:	str	r3, [sp, #40]	; 0x28
   127f8:	b	125b4 <__assert_fail@plt+0x1654>
   127fc:	mov	r3, #1
   12800:	str	r3, [sp, #32]
   12804:	ldr	r3, [pc, #2632]	; 13254 <__assert_fail@plt+0x22f4>
   12808:	b	127f4 <__assert_fail@plt+0x1894>
   1280c:	ldr	r3, [sp, #32]
   12810:	ldr	fp, [sp, #24]
   12814:	cmp	sl, #2
   12818:	moveq	fp, #0
   1281c:	andne	fp, fp, #1
   12820:	adds	r5, r3, #0
   12824:	movne	r5, #1
   12828:	ands	r3, r5, fp
   1282c:	str	r3, [sp, #64]	; 0x40
   12830:	beq	12900 <__assert_fail@plt+0x19a0>
   12834:	ldr	r2, [sp, #32]
   12838:	ldr	r3, [sp, #28]
   1283c:	add	r7, r3, r2
   12840:	mov	r3, r2
   12844:	ldr	r2, [sp, #36]	; 0x24
   12848:	cmp	r3, #1
   1284c:	movls	r3, #0
   12850:	movhi	r3, #1
   12854:	cmn	r2, #1
   12858:	movne	r3, #0
   1285c:	cmp	r3, #0
   12860:	beq	12870 <__assert_fail@plt+0x1910>
   12864:	ldr	r0, [sp, #44]	; 0x2c
   12868:	bl	10e58 <strlen@plt>
   1286c:	str	r0, [sp, #36]	; 0x24
   12870:	ldr	r3, [sp, #36]	; 0x24
   12874:	cmp	r3, r7
   12878:	bcc	128f8 <__assert_fail@plt+0x1998>
   1287c:	ldr	r3, [sp, #44]	; 0x2c
   12880:	ldr	r0, [sp, #28]
   12884:	ldr	r2, [sp, #32]
   12888:	ldr	r1, [sp, #40]	; 0x28
   1288c:	add	r0, r3, r0
   12890:	bl	10d74 <memcmp@plt>
   12894:	cmp	r0, #0
   12898:	bne	128f8 <__assert_fail@plt+0x1998>
   1289c:	cmp	r6, #0
   128a0:	beq	12900 <__assert_fail@plt+0x19a0>
   128a4:	str	r6, [sp, #24]
   128a8:	ldr	r3, [sp, #24]
   128ac:	ldr	r2, [sp, #44]	; 0x2c
   128b0:	cmp	sl, #2
   128b4:	movne	r3, #0
   128b8:	andeq	r3, r3, #1
   128bc:	cmp	r3, #0
   128c0:	ldr	r3, [sp, #160]	; 0xa0
   128c4:	movne	sl, #4
   128c8:	str	r3, [sp, #16]
   128cc:	ldr	r3, [sp, #156]	; 0x9c
   128d0:	str	sl, [sp]
   128d4:	str	r3, [sp, #12]
   128d8:	mov	r3, #0
   128dc:	str	r3, [sp, #8]
   128e0:	ldr	r3, [sp, #148]	; 0x94
   128e4:	mov	r1, r9
   128e8:	bic	r3, r3, #2
   128ec:	str	r3, [sp, #4]
   128f0:	ldr	r3, [sp, #36]	; 0x24
   128f4:	b	126a4 <__assert_fail@plt+0x1744>
   128f8:	mov	r3, #0
   128fc:	str	r3, [sp, #64]	; 0x40
   12900:	ldr	r2, [sp, #28]
   12904:	ldr	r3, [sp, #44]	; 0x2c
   12908:	add	r3, r3, r2
   1290c:	str	r3, [sp, #80]	; 0x50
   12910:	ldr	r3, [sp, #44]	; 0x2c
   12914:	ldrb	r7, [r3, r2]
   12918:	cmp	r7, #58	; 0x3a
   1291c:	bhi	12a84 <__assert_fail@plt+0x1b24>
   12920:	cmp	r7, #43	; 0x2b
   12924:	bcs	12ad8 <__assert_fail@plt+0x1b78>
   12928:	cmp	r7, #32
   1292c:	beq	12b30 <__assert_fail@plt+0x1bd0>
   12930:	bhi	129dc <__assert_fail@plt+0x1a7c>
   12934:	cmp	r7, #9
   12938:	beq	12de4 <__assert_fail@plt+0x1e84>
   1293c:	bhi	129a0 <__assert_fail@plt+0x1a40>
   12940:	cmp	r7, #7
   12944:	beq	12e90 <__assert_fail@plt+0x1f30>
   12948:	bhi	12b4c <__assert_fail@plt+0x1bec>
   1294c:	cmp	r7, #0
   12950:	beq	12b68 <__assert_fail@plt+0x1c08>
   12954:	ldr	r3, [sp, #76]	; 0x4c
   12958:	cmp	r3, #1
   1295c:	bne	12ed4 <__assert_fail@plt+0x1f74>
   12960:	bl	10e40 <__ctype_b_loc@plt>
   12964:	sxth	r3, r7
   12968:	lsl	r3, r3, #1
   1296c:	ldr	r2, [r0]
   12970:	ldrh	r5, [r2, r3]
   12974:	ldr	r3, [sp, #76]	; 0x4c
   12978:	str	r3, [sp, #56]	; 0x38
   1297c:	lsr	r5, r5, #14
   12980:	and	r5, r5, #1
   12984:	ldr	r3, [sp, #24]
   12988:	eor	fp, r5, #1
   1298c:	and	fp, fp, r3
   12990:	ands	fp, fp, #255	; 0xff
   12994:	beq	12d1c <__assert_fail@plt+0x1dbc>
   12998:	mov	r5, #0
   1299c:	b	12f80 <__assert_fail@plt+0x2020>
   129a0:	cmp	r7, #11
   129a4:	beq	12dec <__assert_fail@plt+0x1e8c>
   129a8:	bcc	12e88 <__assert_fail@plt+0x1f28>
   129ac:	cmp	r7, #12
   129b0:	beq	12e98 <__assert_fail@plt+0x1f38>
   129b4:	cmp	r7, #13
   129b8:	moveq	r3, #114	; 0x72
   129bc:	bne	12954 <__assert_fail@plt+0x19f4>
   129c0:	cmp	sl, #2
   129c4:	movne	r2, #0
   129c8:	andeq	r2, r6, #1
   129cc:	cmp	r2, #0
   129d0:	beq	12b50 <__assert_fail@plt+0x1bf0>
   129d4:	mov	sl, #2
   129d8:	b	128a8 <__assert_fail@plt+0x1948>
   129dc:	cmp	r7, #37	; 0x25
   129e0:	beq	12ad8 <__assert_fail@plt+0x1b78>
   129e4:	bhi	129f8 <__assert_fail@plt+0x1a98>
   129e8:	cmp	r7, #35	; 0x23
   129ec:	beq	12b24 <__assert_fail@plt+0x1bc4>
   129f0:	mov	r5, #0
   129f4:	b	12b34 <__assert_fail@plt+0x1bd4>
   129f8:	cmp	r7, #39	; 0x27
   129fc:	bne	129f0 <__assert_fail@plt+0x1a90>
   12a00:	cmp	sl, #2
   12a04:	ldrne	r5, [sp, #52]	; 0x34
   12a08:	movne	r3, r5
   12a0c:	strne	r3, [sp, #68]	; 0x44
   12a10:	bne	12adc <__assert_fail@plt+0x1b7c>
   12a14:	cmp	r6, #0
   12a18:	bne	128a8 <__assert_fail@plt+0x1948>
   12a1c:	ldr	r2, [sp, #60]	; 0x3c
   12a20:	adds	r3, r9, #0
   12a24:	movne	r3, #1
   12a28:	cmp	r2, #0
   12a2c:	movne	r3, #0
   12a30:	cmp	r3, #0
   12a34:	strne	r9, [sp, #60]	; 0x3c
   12a38:	movne	r9, #0
   12a3c:	bne	12a4c <__assert_fail@plt+0x1aec>
   12a40:	cmp	r9, r4
   12a44:	movhi	r3, #39	; 0x27
   12a48:	strbhi	r3, [r8, r4]
   12a4c:	add	r3, r4, #1
   12a50:	cmp	r3, r9
   12a54:	movcc	r2, #92	; 0x5c
   12a58:	strbcc	r2, [r8, r3]
   12a5c:	add	r3, r4, #2
   12a60:	cmp	r3, r9
   12a64:	ldr	r5, [sp, #52]	; 0x34
   12a68:	movcc	r2, #39	; 0x27
   12a6c:	strbcc	r2, [r8, r3]
   12a70:	add	r4, r4, #3
   12a74:	mov	fp, r6
   12a78:	str	r5, [sp, #68]	; 0x44
   12a7c:	str	r6, [sp, #48]	; 0x30
   12a80:	b	12d1c <__assert_fail@plt+0x1dbc>
   12a84:	cmp	r7, #94	; 0x5e
   12a88:	beq	129f0 <__assert_fail@plt+0x1a90>
   12a8c:	bhi	12ae4 <__assert_fail@plt+0x1b84>
   12a90:	cmp	r7, #90	; 0x5a
   12a94:	bhi	12acc <__assert_fail@plt+0x1b6c>
   12a98:	cmp	r7, #65	; 0x41
   12a9c:	bcs	12ad8 <__assert_fail@plt+0x1b78>
   12aa0:	cmp	r7, #62	; 0x3e
   12aa4:	bls	129f0 <__assert_fail@plt+0x1a90>
   12aa8:	cmp	r7, #63	; 0x3f
   12aac:	bne	12954 <__assert_fail@plt+0x19f4>
   12ab0:	cmp	sl, #2
   12ab4:	beq	12c58 <__assert_fail@plt+0x1cf8>
   12ab8:	cmp	sl, #5
   12abc:	beq	12c68 <__assert_fail@plt+0x1d08>
   12ac0:	mov	fp, #0
   12ac4:	mov	r5, fp
   12ac8:	b	12d1c <__assert_fail@plt+0x1dbc>
   12acc:	cmp	r7, #92	; 0x5c
   12ad0:	beq	12df4 <__assert_fail@plt+0x1e94>
   12ad4:	bls	129f0 <__assert_fail@plt+0x1a90>
   12ad8:	ldr	r5, [sp, #52]	; 0x34
   12adc:	mov	fp, #0
   12ae0:	b	12d1c <__assert_fail@plt+0x1dbc>
   12ae4:	cmp	r7, #122	; 0x7a
   12ae8:	bhi	12b08 <__assert_fail@plt+0x1ba8>
   12aec:	cmp	r7, #97	; 0x61
   12af0:	bcs	12ad8 <__assert_fail@plt+0x1b78>
   12af4:	cmp	r7, #95	; 0x5f
   12af8:	beq	12ad8 <__assert_fail@plt+0x1b78>
   12afc:	cmp	r7, #96	; 0x60
   12b00:	bne	12954 <__assert_fail@plt+0x19f4>
   12b04:	b	129f0 <__assert_fail@plt+0x1a90>
   12b08:	cmp	r7, #124	; 0x7c
   12b0c:	beq	129f0 <__assert_fail@plt+0x1a90>
   12b10:	bcc	12ea0 <__assert_fail@plt+0x1f40>
   12b14:	cmp	r7, #125	; 0x7d
   12b18:	beq	12ea0 <__assert_fail@plt+0x1f40>
   12b1c:	cmp	r7, #126	; 0x7e
   12b20:	bne	12954 <__assert_fail@plt+0x19f4>
   12b24:	ldr	r3, [sp, #28]
   12b28:	cmp	r3, #0
   12b2c:	bne	12c60 <__assert_fail@plt+0x1d00>
   12b30:	ldr	r5, [sp, #52]	; 0x34
   12b34:	cmp	sl, #2
   12b38:	movne	fp, #0
   12b3c:	andeq	fp, r6, #1
   12b40:	cmp	fp, #0
   12b44:	beq	12d1c <__assert_fail@plt+0x1dbc>
   12b48:	b	129d4 <__assert_fail@plt+0x1a74>
   12b4c:	mov	r3, #98	; 0x62
   12b50:	ldr	r2, [sp, #24]
   12b54:	cmp	r2, #0
   12b58:	beq	12c60 <__assert_fail@plt+0x1d00>
   12b5c:	mov	r7, r3
   12b60:	mov	r5, #0
   12b64:	b	12d74 <__assert_fail@plt+0x1e14>
   12b68:	ldr	r3, [sp, #24]
   12b6c:	cmp	r3, #0
   12b70:	beq	12c3c <__assert_fail@plt+0x1cdc>
   12b74:	cmp	r6, #0
   12b78:	bne	128a4 <__assert_fail@plt+0x1944>
   12b7c:	ldr	r3, [sp, #48]	; 0x30
   12b80:	eor	r2, r3, #1
   12b84:	cmp	sl, #2
   12b88:	movne	r2, #0
   12b8c:	andeq	r2, r2, #1
   12b90:	cmp	r2, #0
   12b94:	moveq	r3, r4
   12b98:	beq	12bd0 <__assert_fail@plt+0x1c70>
   12b9c:	cmp	r9, r4
   12ba0:	movhi	r3, #39	; 0x27
   12ba4:	strbhi	r3, [r8, r4]
   12ba8:	add	r3, r4, #1
   12bac:	cmp	r9, r3
   12bb0:	movhi	r1, #36	; 0x24
   12bb4:	strbhi	r1, [r8, r3]
   12bb8:	add	r3, r4, #2
   12bbc:	cmp	r9, r3
   12bc0:	movhi	r1, #39	; 0x27
   12bc4:	strbhi	r1, [r8, r3]
   12bc8:	add	r3, r4, #3
   12bcc:	str	r2, [sp, #48]	; 0x30
   12bd0:	cmp	r9, r3
   12bd4:	movhi	r2, #92	; 0x5c
   12bd8:	strbhi	r2, [r8, r3]
   12bdc:	cmp	fp, #0
   12be0:	add	r4, r3, #1
   12be4:	beq	13174 <__assert_fail@plt+0x2214>
   12be8:	ldr	r2, [sp, #28]
   12bec:	ldr	r1, [sp, #36]	; 0x24
   12bf0:	add	r2, r2, #1
   12bf4:	cmp	r1, r2
   12bf8:	bls	12c34 <__assert_fail@plt+0x1cd4>
   12bfc:	ldr	r1, [sp, #44]	; 0x2c
   12c00:	mov	r7, #48	; 0x30
   12c04:	ldrb	r2, [r1, r2]
   12c08:	sub	r2, r2, #48	; 0x30
   12c0c:	cmp	r2, #9
   12c10:	movhi	r5, r6
   12c14:	bhi	12d1c <__assert_fail@plt+0x1dbc>
   12c18:	cmp	r9, r4
   12c1c:	add	r2, r3, #2
   12c20:	strbhi	r7, [r8, r4]
   12c24:	cmp	r9, r2
   12c28:	add	r4, r3, #3
   12c2c:	movhi	r1, #48	; 0x30
   12c30:	strbhi	r1, [r8, r2]
   12c34:	mov	r5, r6
   12c38:	b	1317c <__assert_fail@plt+0x221c>
   12c3c:	ldr	r3, [sp, #148]	; 0x94
   12c40:	tst	r3, #1
   12c44:	ldreq	r5, [sp, #24]
   12c48:	beq	13188 <__assert_fail@plt+0x2228>
   12c4c:	ldr	r3, [sp, #28]
   12c50:	add	r3, r3, #1
   12c54:	b	125f4 <__assert_fail@plt+0x1694>
   12c58:	cmp	r6, #0
   12c5c:	bne	128a8 <__assert_fail@plt+0x1948>
   12c60:	mov	r5, #0
   12c64:	b	12adc <__assert_fail@plt+0x1b7c>
   12c68:	ldr	r3, [sp, #148]	; 0x94
   12c6c:	tst	r3, #4
   12c70:	beq	12c60 <__assert_fail@plt+0x1d00>
   12c74:	ldr	r3, [sp, #28]
   12c78:	add	r2, r3, #2
   12c7c:	ldr	r3, [sp, #36]	; 0x24
   12c80:	cmp	r3, r2
   12c84:	bls	12c60 <__assert_fail@plt+0x1d00>
   12c88:	ldr	r3, [sp, #44]	; 0x2c
   12c8c:	ldr	r1, [sp, #28]
   12c90:	add	r3, r3, r1
   12c94:	ldrb	r0, [r3, #1]
   12c98:	cmp	r0, #63	; 0x3f
   12c9c:	bne	12c60 <__assert_fail@plt+0x1d00>
   12ca0:	ldr	r3, [sp, #44]	; 0x2c
   12ca4:	ldrb	r1, [r3, r2]
   12ca8:	sub	r3, r1, #33	; 0x21
   12cac:	uxtb	r3, r3
   12cb0:	cmp	r3, #29
   12cb4:	bhi	13184 <__assert_fail@plt+0x2224>
   12cb8:	mov	ip, #1
   12cbc:	ldr	r5, [pc, #1428]	; 13258 <__assert_fail@plt+0x22f8>
   12cc0:	ands	r5, r5, ip, lsl r3
   12cc4:	beq	12adc <__assert_fail@plt+0x1b7c>
   12cc8:	cmp	r6, #0
   12ccc:	bne	128a8 <__assert_fail@plt+0x1948>
   12cd0:	add	r3, r4, #1
   12cd4:	cmp	r9, r4
   12cd8:	strbhi	r0, [r8, r4]
   12cdc:	cmp	r9, r3
   12ce0:	movhi	r0, #34	; 0x22
   12ce4:	strbhi	r0, [r8, r3]
   12ce8:	add	r3, r4, #2
   12cec:	cmp	r9, r3
   12cf0:	movhi	r0, #34	; 0x22
   12cf4:	strbhi	r0, [r8, r3]
   12cf8:	add	r3, r4, #3
   12cfc:	cmp	r9, r3
   12d00:	add	r4, r4, #4
   12d04:	mov	r5, r6
   12d08:	mov	fp, r6
   12d0c:	mov	r7, r1
   12d10:	movhi	r0, #63	; 0x3f
   12d14:	strbhi	r0, [r8, r3]
   12d18:	str	r2, [sp, #28]
   12d1c:	ldr	r3, [sp, #24]
   12d20:	eor	r3, r3, #1
   12d24:	cmp	sl, #2
   12d28:	orreq	r3, r3, #1
   12d2c:	eor	r3, r3, #1
   12d30:	orr	r3, r6, r3
   12d34:	tst	r3, #255	; 0xff
   12d38:	beq	12d68 <__assert_fail@plt+0x1e08>
   12d3c:	ldr	r3, [sp, #152]	; 0x98
   12d40:	cmp	r3, #0
   12d44:	beq	12d68 <__assert_fail@plt+0x1e08>
   12d48:	lsr	r2, r7, #5
   12d4c:	ldr	r1, [sp, #152]	; 0x98
   12d50:	uxtb	r2, r2
   12d54:	and	r3, r7, #31
   12d58:	ldr	r2, [r1, r2, lsl #2]
   12d5c:	lsr	r3, r2, r3
   12d60:	tst	r3, #1
   12d64:	bne	12d74 <__assert_fail@plt+0x1e14>
   12d68:	ldr	r3, [sp, #64]	; 0x40
   12d6c:	cmp	r3, #0
   12d70:	beq	12e0c <__assert_fail@plt+0x1eac>
   12d74:	cmp	r6, #0
   12d78:	bne	128a8 <__assert_fail@plt+0x1948>
   12d7c:	ldr	r3, [sp, #48]	; 0x30
   12d80:	eor	r3, r3, #1
   12d84:	cmp	sl, #2
   12d88:	movne	r3, #0
   12d8c:	andeq	r3, r3, #1
   12d90:	cmp	r3, #0
   12d94:	beq	12dcc <__assert_fail@plt+0x1e6c>
   12d98:	cmp	r9, r4
   12d9c:	movhi	r2, #39	; 0x27
   12da0:	strbhi	r2, [r8, r4]
   12da4:	add	r2, r4, #1
   12da8:	cmp	r9, r2
   12dac:	movhi	r1, #36	; 0x24
   12db0:	strbhi	r1, [r8, r2]
   12db4:	add	r2, r4, #2
   12db8:	cmp	r9, r2
   12dbc:	add	r4, r4, #3
   12dc0:	movhi	r1, #39	; 0x27
   12dc4:	strbhi	r1, [r8, r2]
   12dc8:	str	r3, [sp, #48]	; 0x30
   12dcc:	cmp	r9, r4
   12dd0:	movhi	r3, #92	; 0x5c
   12dd4:	strbhi	r3, [r8, r4]
   12dd8:	ldr	fp, [sp, #52]	; 0x34
   12ddc:	add	r4, r4, #1
   12de0:	b	12e0c <__assert_fail@plt+0x1eac>
   12de4:	mov	r3, #116	; 0x74
   12de8:	b	129c0 <__assert_fail@plt+0x1a60>
   12dec:	mov	r3, #118	; 0x76
   12df0:	b	12b50 <__assert_fail@plt+0x1bf0>
   12df4:	cmp	sl, #2
   12df8:	bne	12e68 <__assert_fail@plt+0x1f08>
   12dfc:	cmp	r6, #0
   12e00:	bne	128a8 <__assert_fail@plt+0x1948>
   12e04:	mov	r5, r6
   12e08:	mov	fp, r6
   12e0c:	ldr	r3, [sp, #48]	; 0x30
   12e10:	eor	fp, fp, #1
   12e14:	and	fp, fp, r3
   12e18:	tst	fp, #255	; 0xff
   12e1c:	beq	12e48 <__assert_fail@plt+0x1ee8>
   12e20:	cmp	r9, r4
   12e24:	movhi	r3, #39	; 0x27
   12e28:	strbhi	r3, [r8, r4]
   12e2c:	add	r3, r4, #1
   12e30:	cmp	r9, r3
   12e34:	movhi	r2, #39	; 0x27
   12e38:	add	r4, r4, #2
   12e3c:	strbhi	r2, [r8, r3]
   12e40:	mov	r3, #0
   12e44:	str	r3, [sp, #48]	; 0x30
   12e48:	cmp	r9, r4
   12e4c:	strbhi	r7, [r8, r4]
   12e50:	ldr	r3, [sp, #72]	; 0x48
   12e54:	cmp	r5, #0
   12e58:	moveq	r3, #0
   12e5c:	add	r4, r4, #1
   12e60:	str	r3, [sp, #72]	; 0x48
   12e64:	b	12c4c <__assert_fail@plt+0x1cec>
   12e68:	ldr	r3, [sp, #24]
   12e6c:	and	r3, r3, r6
   12e70:	tst	r5, r3
   12e74:	moveq	r3, r7
   12e78:	beq	129c0 <__assert_fail@plt+0x1a60>
   12e7c:	mov	fp, #0
   12e80:	mov	r5, fp
   12e84:	b	12e0c <__assert_fail@plt+0x1eac>
   12e88:	mov	r3, #110	; 0x6e
   12e8c:	b	129c0 <__assert_fail@plt+0x1a60>
   12e90:	mov	r3, #97	; 0x61
   12e94:	b	12b50 <__assert_fail@plt+0x1bf0>
   12e98:	mov	r3, #102	; 0x66
   12e9c:	b	12b50 <__assert_fail@plt+0x1bf0>
   12ea0:	ldr	r3, [sp, #36]	; 0x24
   12ea4:	cmn	r3, #1
   12ea8:	bne	12ec8 <__assert_fail@plt+0x1f68>
   12eac:	ldr	r3, [sp, #44]	; 0x2c
   12eb0:	ldrb	r3, [r3, #1]
   12eb4:	adds	r3, r3, #0
   12eb8:	movne	r3, #1
   12ebc:	cmp	r3, #0
   12ec0:	bne	12c60 <__assert_fail@plt+0x1d00>
   12ec4:	b	12b24 <__assert_fail@plt+0x1bc4>
   12ec8:	ldr	r3, [sp, #36]	; 0x24
   12ecc:	subs	r3, r3, #1
   12ed0:	b	12eb8 <__assert_fail@plt+0x1f58>
   12ed4:	mov	r3, #0
   12ed8:	str	r3, [sp, #96]	; 0x60
   12edc:	str	r3, [sp, #100]	; 0x64
   12ee0:	ldr	r3, [sp, #36]	; 0x24
   12ee4:	cmn	r3, #1
   12ee8:	bne	12ef8 <__assert_fail@plt+0x1f98>
   12eec:	ldr	r0, [sp, #44]	; 0x2c
   12ef0:	bl	10e58 <strlen@plt>
   12ef4:	str	r0, [sp, #36]	; 0x24
   12ef8:	ldr	r5, [sp, #52]	; 0x34
   12efc:	mov	r3, #0
   12f00:	str	r3, [sp, #56]	; 0x38
   12f04:	ldr	r3, [sp, #28]
   12f08:	ldr	r2, [sp, #56]	; 0x38
   12f0c:	ldr	r1, [sp, #36]	; 0x24
   12f10:	add	r2, r3, r2
   12f14:	ldr	r3, [sp, #44]	; 0x2c
   12f18:	add	r0, sp, #92	; 0x5c
   12f1c:	add	fp, r3, r2
   12f20:	sub	r2, r1, r2
   12f24:	add	r3, sp, #96	; 0x60
   12f28:	mov	r1, fp
   12f2c:	bl	14940 <__assert_fail@plt+0x39e0>
   12f30:	subs	r2, r0, #0
   12f34:	beq	12f74 <__assert_fail@plt+0x2014>
   12f38:	cmn	r2, #1
   12f3c:	beq	1314c <__assert_fail@plt+0x21ec>
   12f40:	cmn	r2, #2
   12f44:	bne	130bc <__assert_fail@plt+0x215c>
   12f48:	ldr	r2, [sp, #56]	; 0x38
   12f4c:	ldr	r3, [sp, #28]
   12f50:	add	r3, r3, r2
   12f54:	ldr	r2, [sp, #36]	; 0x24
   12f58:	cmp	r2, r3
   12f5c:	bls	1314c <__assert_fail@plt+0x21ec>
   12f60:	ldr	r3, [sp, #80]	; 0x50
   12f64:	ldr	r2, [sp, #56]	; 0x38
   12f68:	ldrb	r5, [r3, r2]
   12f6c:	cmp	r5, #0
   12f70:	bne	130ac <__assert_fail@plt+0x214c>
   12f74:	ldr	r3, [sp, #56]	; 0x38
   12f78:	cmp	r3, #1
   12f7c:	bls	12984 <__assert_fail@plt+0x1a24>
   12f80:	ldr	r2, [sp, #56]	; 0x38
   12f84:	ldr	r3, [sp, #28]
   12f88:	mov	fp, #0
   12f8c:	add	r3, r3, r2
   12f90:	ldr	r2, [sp, #24]
   12f94:	str	r3, [sp, #52]	; 0x34
   12f98:	eor	r3, r5, #1
   12f9c:	and	r3, r3, r2
   12fa0:	mov	ip, #92	; 0x5c
   12fa4:	uxtb	r3, r3
   12fa8:	mov	r2, #39	; 0x27
   12fac:	cmp	r3, #0
   12fb0:	beq	13154 <__assert_fail@plt+0x21f4>
   12fb4:	cmp	r6, #0
   12fb8:	bne	128a4 <__assert_fail@plt+0x1944>
   12fbc:	ldr	r1, [sp, #48]	; 0x30
   12fc0:	eor	r1, r1, #1
   12fc4:	cmp	sl, #2
   12fc8:	movne	r1, #0
   12fcc:	andeq	r1, r1, #1
   12fd0:	cmp	r1, #0
   12fd4:	beq	13004 <__assert_fail@plt+0x20a4>
   12fd8:	add	r0, r4, #1
   12fdc:	cmp	r9, r4
   12fe0:	strbhi	r2, [r8, r4]
   12fe4:	cmp	r9, r0
   12fe8:	movhi	lr, #36	; 0x24
   12fec:	strbhi	lr, [r8, r0]
   12ff0:	add	r0, r4, #2
   12ff4:	add	r4, r4, #3
   12ff8:	cmp	r9, r0
   12ffc:	strbhi	r2, [r8, r0]
   13000:	str	r1, [sp, #48]	; 0x30
   13004:	add	r0, r4, #1
   13008:	cmp	r9, r4
   1300c:	strbhi	ip, [r8, r4]
   13010:	cmp	r9, r0
   13014:	lsrhi	r1, r7, #6
   13018:	addhi	r1, r1, #48	; 0x30
   1301c:	strbhi	r1, [r8, r0]
   13020:	add	r0, r4, #2
   13024:	cmp	r9, r0
   13028:	lsrhi	r1, r7, #3
   1302c:	and	r7, r7, #7
   13030:	andhi	r1, r1, #7
   13034:	add	r4, r4, #3
   13038:	add	r7, r7, #48	; 0x30
   1303c:	mov	fp, r3
   13040:	addhi	r1, r1, #48	; 0x30
   13044:	strbhi	r1, [r8, r0]
   13048:	ldr	r1, [sp, #28]
   1304c:	ldr	r0, [sp, #52]	; 0x34
   13050:	add	r1, r1, #1
   13054:	cmp	r0, r1
   13058:	bls	12e0c <__assert_fail@plt+0x1eac>
   1305c:	ldr	lr, [sp, #48]	; 0x30
   13060:	eor	r0, fp, #1
   13064:	and	r0, r0, lr
   13068:	tst	r0, #255	; 0xff
   1306c:	beq	13090 <__assert_fail@plt+0x2130>
   13070:	add	r0, r4, #1
   13074:	cmp	r9, r4
   13078:	strbhi	r2, [r8, r4]
   1307c:	cmp	r9, r0
   13080:	add	r4, r4, #2
   13084:	strbhi	r2, [r8, r0]
   13088:	mov	r0, #0
   1308c:	str	r0, [sp, #48]	; 0x30
   13090:	ldr	r0, [sp, #44]	; 0x2c
   13094:	cmp	r9, r4
   13098:	strbhi	r7, [r8, r4]
   1309c:	str	r1, [sp, #28]
   130a0:	add	r4, r4, #1
   130a4:	ldrb	r7, [r0, r1]
   130a8:	b	12fac <__assert_fail@plt+0x204c>
   130ac:	ldr	r3, [sp, #56]	; 0x38
   130b0:	add	r3, r3, #1
   130b4:	str	r3, [sp, #56]	; 0x38
   130b8:	b	12f48 <__assert_fail@plt+0x1fe8>
   130bc:	cmp	sl, #2
   130c0:	movne	r3, #0
   130c4:	andeq	r3, r6, #1
   130c8:	cmp	r3, #0
   130cc:	movne	r1, #1
   130d0:	bne	1312c <__assert_fail@plt+0x21cc>
   130d4:	ldr	r0, [sp, #92]	; 0x5c
   130d8:	str	r2, [sp, #84]	; 0x54
   130dc:	bl	10db0 <iswprint@plt>
   130e0:	ldr	r3, [sp, #56]	; 0x38
   130e4:	ldr	r2, [sp, #84]	; 0x54
   130e8:	add	r3, r3, r2
   130ec:	str	r3, [sp, #56]	; 0x38
   130f0:	cmp	r0, #0
   130f4:	add	r0, sp, #96	; 0x60
   130f8:	moveq	r5, #0
   130fc:	bl	10d5c <mbsinit@plt>
   13100:	cmp	r0, #0
   13104:	beq	12f04 <__assert_fail@plt+0x1fa4>
   13108:	b	12f74 <__assert_fail@plt+0x2014>
   1310c:	ldrb	r3, [fp, r1]
   13110:	cmp	r3, #94	; 0x5e
   13114:	beq	129d4 <__assert_fail@plt+0x1a74>
   13118:	bhi	13138 <__assert_fail@plt+0x21d8>
   1311c:	sub	r3, r3, #91	; 0x5b
   13120:	cmp	r3, #1
   13124:	bls	129d4 <__assert_fail@plt+0x1a74>
   13128:	add	r1, r1, #1
   1312c:	cmp	r1, r2
   13130:	bne	1310c <__assert_fail@plt+0x21ac>
   13134:	b	130d4 <__assert_fail@plt+0x2174>
   13138:	cmp	r3, #96	; 0x60
   1313c:	beq	129d4 <__assert_fail@plt+0x1a74>
   13140:	cmp	r3, #124	; 0x7c
   13144:	bne	13128 <__assert_fail@plt+0x21c8>
   13148:	b	129d4 <__assert_fail@plt+0x1a74>
   1314c:	mov	r5, #0
   13150:	b	12f74 <__assert_fail@plt+0x2014>
   13154:	ldr	r1, [sp, #64]	; 0x40
   13158:	cmp	r1, #0
   1315c:	beq	13048 <__assert_fail@plt+0x20e8>
   13160:	cmp	r9, r4
   13164:	strbhi	ip, [r8, r4]
   13168:	str	r3, [sp, #64]	; 0x40
   1316c:	add	r4, r4, #1
   13170:	b	13048 <__assert_fail@plt+0x20e8>
   13174:	mov	r5, fp
   13178:	ldr	fp, [sp, #24]
   1317c:	mov	r7, #48	; 0x30
   13180:	b	12d1c <__assert_fail@plt+0x1dbc>
   13184:	mov	r5, #0
   13188:	mov	fp, r5
   1318c:	b	12d1c <__assert_fail@plt+0x1dbc>
   13190:	ldr	r3, [sp, #36]	; 0x24
   13194:	ldr	r2, [sp, #28]
   13198:	subs	r3, r3, r2
   1319c:	movne	r3, #1
   131a0:	b	12618 <__assert_fail@plt+0x16b8>
   131a4:	ldr	r3, [sp, #60]	; 0x3c
   131a8:	clz	r7, r9
   131ac:	cmp	r3, #0
   131b0:	lsr	r7, r7, #5
   131b4:	moveq	r7, #0
   131b8:	cmp	r7, #0
   131bc:	mov	r5, r3
   131c0:	bne	12578 <__assert_fail@plt+0x1618>
   131c4:	ldr	r3, [sp, #68]	; 0x44
   131c8:	ldr	r2, [sp, #40]	; 0x28
   131cc:	cmp	r2, #0
   131d0:	moveq	r3, #0
   131d4:	andne	r3, r3, #1
   131d8:	cmp	r3, #0
   131dc:	movne	r3, r2
   131e0:	subne	r2, r3, #1
   131e4:	bne	13214 <__assert_fail@plt+0x22b4>
   131e8:	cmp	r9, r4
   131ec:	movhi	r3, #0
   131f0:	strbhi	r3, [r8, r4]
   131f4:	mov	r0, r4
   131f8:	add	sp, sp, #108	; 0x6c
   131fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13200:	mov	r3, r2
   13204:	b	131c8 <__assert_fail@plt+0x2268>
   13208:	cmp	r9, r4
   1320c:	strbhi	r3, [r8, r4]
   13210:	add	r4, r4, #1
   13214:	ldrb	r3, [r2, #1]!
   13218:	cmp	r3, #0
   1321c:	bne	13208 <__assert_fail@plt+0x22a8>
   13220:	b	131e8 <__assert_fail@plt+0x2288>
   13224:	ldr	r3, [pc, #32]	; 1324c <__assert_fail@plt+0x22ec>
   13228:	mov	r6, #1
   1322c:	str	r6, [sp, #24]
   13230:	str	r6, [sp, #32]
   13234:	str	r3, [sp, #40]	; 0x28
   13238:	mov	r4, #0
   1323c:	mov	sl, #5
   13240:	b	125e8 <__assert_fail@plt+0x1688>
   13244:	mov	r6, #1
   13248:	b	127dc <__assert_fail@plt+0x187c>
   1324c:	andeq	r5, r1, r3, lsr #19
   13250:	andeq	r5, r1, r7, lsr #19
   13254:	andeq	r5, r1, r5, lsr #19
   13258:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1325c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13260:	sub	sp, sp, #52	; 0x34
   13264:	mov	r6, r0
   13268:	mov	r5, r3
   1326c:	mov	r8, r1
   13270:	mov	r9, r2
   13274:	bl	10e70 <__errno_location@plt>
   13278:	ldr	r7, [pc, #380]	; 133fc <__assert_fail@plt+0x249c>
   1327c:	cmn	r6, #-2147483647	; 0x80000001
   13280:	ldr	r4, [r7]
   13284:	ldr	r3, [r0]
   13288:	str	r0, [sp, #24]
   1328c:	str	r3, [sp, #32]
   13290:	movne	r3, #0
   13294:	moveq	r3, #1
   13298:	orrs	r3, r3, r6, lsr #31
   1329c:	beq	132a4 <__assert_fail@plt+0x2344>
   132a0:	bl	10f48 <abort@plt>
   132a4:	ldr	r2, [r7, #4]
   132a8:	cmp	r6, r2
   132ac:	blt	1331c <__assert_fail@plt+0x23bc>
   132b0:	add	r1, sp, #48	; 0x30
   132b4:	add	sl, r7, #8
   132b8:	str	r2, [r1, #-4]!
   132bc:	cmp	r4, sl
   132c0:	mov	r3, #8
   132c4:	sub	r2, r6, r2
   132c8:	movne	r0, r4
   132cc:	str	r3, [sp]
   132d0:	add	r2, r2, #1
   132d4:	mvn	r3, #-2147483648	; 0x80000000
   132d8:	moveq	r0, #0
   132dc:	bl	13ff0 <__assert_fail@plt+0x3090>
   132e0:	cmp	r4, sl
   132e4:	ldr	r2, [sp, #44]	; 0x2c
   132e8:	mov	fp, r0
   132ec:	str	r0, [r7]
   132f0:	ldmeq	r4, {r0, r1}
   132f4:	mov	r4, fp
   132f8:	stmeq	fp, {r0, r1}
   132fc:	ldr	r0, [r7, #4]
   13300:	mov	r1, #0
   13304:	sub	r2, r2, r0
   13308:	add	r0, fp, r0, lsl #3
   1330c:	lsl	r2, r2, #3
   13310:	bl	10e88 <memset@plt>
   13314:	ldr	r3, [sp, #44]	; 0x2c
   13318:	str	r3, [r7, #4]
   1331c:	ldr	r3, [r5, #4]
   13320:	add	sl, r4, r6, lsl #3
   13324:	orr	r3, r3, #1
   13328:	str	r3, [sp, #28]
   1332c:	add	r3, r5, #8
   13330:	str	r3, [sp, #36]	; 0x24
   13334:	ldr	r3, [r5, #44]	; 0x2c
   13338:	ldr	fp, [r4, r6, lsl #3]
   1333c:	ldr	r7, [sl, #4]
   13340:	str	r3, [sp, #16]
   13344:	ldr	r3, [r5, #40]	; 0x28
   13348:	mov	r2, r8
   1334c:	str	r3, [sp, #12]
   13350:	add	r3, r5, #8
   13354:	str	r3, [sp, #8]
   13358:	ldr	r3, [sp, #28]
   1335c:	mov	r1, fp
   13360:	str	r3, [sp, #4]
   13364:	ldr	r3, [r5]
   13368:	mov	r0, r7
   1336c:	str	r3, [sp]
   13370:	mov	r3, r9
   13374:	bl	12528 <__assert_fail@plt+0x15c8>
   13378:	cmp	fp, r0
   1337c:	bhi	133e4 <__assert_fail@plt+0x2484>
   13380:	ldr	r3, [pc, #120]	; 13400 <__assert_fail@plt+0x24a0>
   13384:	add	fp, r0, #1
   13388:	cmp	r7, r3
   1338c:	str	fp, [r4, r6, lsl #3]
   13390:	beq	1339c <__assert_fail@plt+0x243c>
   13394:	mov	r0, r7
   13398:	bl	12250 <__assert_fail@plt+0x12f0>
   1339c:	mov	r0, fp
   133a0:	bl	13ea8 <__assert_fail@plt+0x2f48>
   133a4:	ldr	r3, [r5, #44]	; 0x2c
   133a8:	mov	r2, r8
   133ac:	mov	r1, fp
   133b0:	str	r0, [sl, #4]
   133b4:	str	r3, [sp, #16]
   133b8:	ldr	r3, [r5, #40]	; 0x28
   133bc:	mov	r7, r0
   133c0:	str	r3, [sp, #12]
   133c4:	add	r3, r5, #8
   133c8:	str	r3, [sp, #8]
   133cc:	ldr	r3, [sp, #28]
   133d0:	str	r3, [sp, #4]
   133d4:	ldr	r3, [r5]
   133d8:	str	r3, [sp]
   133dc:	mov	r3, r9
   133e0:	bl	12528 <__assert_fail@plt+0x15c8>
   133e4:	ldr	r3, [sp, #24]
   133e8:	ldr	r2, [sp, #32]
   133ec:	mov	r0, r7
   133f0:	str	r2, [r3]
   133f4:	add	sp, sp, #52	; 0x34
   133f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133fc:	strdeq	r6, [r2], -r8
   13400:	andeq	r6, r2, ip, ror #2
   13404:	push	{r4, r5, r6, lr}
   13408:	mov	r5, r0
   1340c:	bl	10e70 <__errno_location@plt>
   13410:	cmp	r5, #0
   13414:	mov	r1, #48	; 0x30
   13418:	ldr	r6, [r0]
   1341c:	mov	r4, r0
   13420:	ldr	r0, [pc, #12]	; 13434 <__assert_fail@plt+0x24d4>
   13424:	movne	r0, r5
   13428:	bl	14284 <__assert_fail@plt+0x3324>
   1342c:	str	r6, [r4]
   13430:	pop	{r4, r5, r6, pc}
   13434:	andeq	r6, r2, ip, ror #4
   13438:	ldr	r3, [pc, #12]	; 1344c <__assert_fail@plt+0x24ec>
   1343c:	cmp	r0, #0
   13440:	moveq	r0, r3
   13444:	ldr	r0, [r0]
   13448:	bx	lr
   1344c:	andeq	r6, r2, ip, ror #4
   13450:	ldr	r3, [pc, #12]	; 13464 <__assert_fail@plt+0x2504>
   13454:	cmp	r0, #0
   13458:	moveq	r0, r3
   1345c:	str	r1, [r0]
   13460:	bx	lr
   13464:	andeq	r6, r2, ip, ror #4
   13468:	ldr	r3, [pc, #52]	; 134a4 <__assert_fail@plt+0x2544>
   1346c:	cmp	r0, #0
   13470:	moveq	r0, r3
   13474:	add	r3, r0, #8
   13478:	push	{lr}		; (str lr, [sp, #-4]!)
   1347c:	lsr	lr, r1, #5
   13480:	and	r1, r1, #31
   13484:	ldr	ip, [r3, lr, lsl #2]
   13488:	lsr	r0, ip, r1
   1348c:	eor	r2, r2, r0
   13490:	and	r2, r2, #1
   13494:	and	r0, r0, #1
   13498:	eor	r1, ip, r2, lsl r1
   1349c:	str	r1, [r3, lr, lsl #2]
   134a0:	pop	{pc}		; (ldr pc, [sp], #4)
   134a4:	andeq	r6, r2, ip, ror #4
   134a8:	ldr	r3, [pc, #16]	; 134c0 <__assert_fail@plt+0x2560>
   134ac:	cmp	r0, #0
   134b0:	movne	r3, r0
   134b4:	ldr	r0, [r3, #4]
   134b8:	str	r1, [r3, #4]
   134bc:	bx	lr
   134c0:	andeq	r6, r2, ip, ror #4
   134c4:	ldr	r3, [pc, #44]	; 134f8 <__assert_fail@plt+0x2598>
   134c8:	cmp	r0, #0
   134cc:	moveq	r0, r3
   134d0:	mov	r3, #10
   134d4:	cmp	r2, #0
   134d8:	cmpne	r1, #0
   134dc:	str	r3, [r0]
   134e0:	bne	134ec <__assert_fail@plt+0x258c>
   134e4:	push	{r4, lr}
   134e8:	bl	10f48 <abort@plt>
   134ec:	str	r1, [r0, #40]	; 0x28
   134f0:	str	r2, [r0, #44]	; 0x2c
   134f4:	bx	lr
   134f8:	andeq	r6, r2, ip, ror #4
   134fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13500:	sub	sp, sp, #24
   13504:	mov	sl, r3
   13508:	ldr	r4, [sp, #56]	; 0x38
   1350c:	ldr	r3, [pc, #100]	; 13578 <__assert_fail@plt+0x2618>
   13510:	cmp	r4, #0
   13514:	moveq	r4, r3
   13518:	mov	r7, r0
   1351c:	mov	r8, r1
   13520:	mov	r9, r2
   13524:	bl	10e70 <__errno_location@plt>
   13528:	ldr	r3, [r4, #44]	; 0x2c
   1352c:	mov	r2, r9
   13530:	mov	r1, r8
   13534:	ldr	r6, [r0]
   13538:	str	r3, [sp, #16]
   1353c:	ldr	r3, [r4, #40]	; 0x28
   13540:	mov	r5, r0
   13544:	str	r3, [sp, #12]
   13548:	add	r3, r4, #8
   1354c:	str	r3, [sp, #8]
   13550:	ldr	r3, [r4, #4]
   13554:	mov	r0, r7
   13558:	str	r3, [sp, #4]
   1355c:	ldr	r3, [r4]
   13560:	str	r3, [sp]
   13564:	mov	r3, sl
   13568:	bl	12528 <__assert_fail@plt+0x15c8>
   1356c:	str	r6, [r5]
   13570:	add	sp, sp, #24
   13574:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13578:	andeq	r6, r2, ip, ror #4
   1357c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13580:	cmp	r3, #0
   13584:	sub	sp, sp, #44	; 0x2c
   13588:	ldr	r4, [pc, #188]	; 1364c <__assert_fail@plt+0x26ec>
   1358c:	mov	r6, r2
   13590:	movne	r4, r3
   13594:	mov	sl, r1
   13598:	mov	r9, r0
   1359c:	bl	10e70 <__errno_location@plt>
   135a0:	ldr	r5, [r4, #4]
   135a4:	add	fp, r4, #8
   135a8:	cmp	r6, #0
   135ac:	orreq	r5, r5, #1
   135b0:	mov	r1, #0
   135b4:	mov	r2, r9
   135b8:	ldr	r3, [r0]
   135bc:	mov	r8, r0
   135c0:	str	r3, [sp, #28]
   135c4:	ldr	r3, [r4, #44]	; 0x2c
   135c8:	mov	r0, r1
   135cc:	str	r3, [sp, #16]
   135d0:	ldr	r3, [r4, #40]	; 0x28
   135d4:	stmib	sp, {r5, fp}
   135d8:	str	r3, [sp, #12]
   135dc:	ldr	r3, [r4]
   135e0:	str	r3, [sp]
   135e4:	mov	r3, sl
   135e8:	bl	12528 <__assert_fail@plt+0x15c8>
   135ec:	add	r1, r0, #1
   135f0:	mov	r7, r0
   135f4:	mov	r0, r1
   135f8:	str	r1, [sp, #36]	; 0x24
   135fc:	bl	13ea8 <__assert_fail@plt+0x2f48>
   13600:	ldr	r3, [r4, #44]	; 0x2c
   13604:	mov	r2, r9
   13608:	str	r3, [sp, #16]
   1360c:	ldr	r3, [r4, #40]	; 0x28
   13610:	stmib	sp, {r5, fp}
   13614:	str	r3, [sp, #12]
   13618:	ldr	r3, [r4]
   1361c:	ldr	r1, [sp, #36]	; 0x24
   13620:	str	r3, [sp]
   13624:	mov	r3, sl
   13628:	str	r0, [sp, #32]
   1362c:	bl	12528 <__assert_fail@plt+0x15c8>
   13630:	ldr	r3, [sp, #28]
   13634:	cmp	r6, #0
   13638:	str	r3, [r8]
   1363c:	ldr	r0, [sp, #32]
   13640:	strne	r7, [r6]
   13644:	add	sp, sp, #44	; 0x2c
   13648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1364c:	andeq	r6, r2, ip, ror #4
   13650:	mov	r3, r2
   13654:	mov	r2, #0
   13658:	b	1357c <__assert_fail@plt+0x261c>
   1365c:	push	{r4, r5, r6, r7, r8, lr}
   13660:	mov	r6, #1
   13664:	ldr	r4, [pc, #104]	; 136d4 <__assert_fail@plt+0x2774>
   13668:	ldr	r5, [r4]
   1366c:	add	r7, r5, #12
   13670:	ldr	r3, [r4, #4]
   13674:	add	r7, r7, #8
   13678:	cmp	r6, r3
   1367c:	blt	136c4 <__assert_fail@plt+0x2764>
   13680:	ldr	r0, [r5, #4]
   13684:	ldr	r6, [pc, #76]	; 136d8 <__assert_fail@plt+0x2778>
   13688:	cmp	r0, r6
   1368c:	beq	136a0 <__assert_fail@plt+0x2740>
   13690:	bl	12250 <__assert_fail@plt+0x12f0>
   13694:	mov	r3, #256	; 0x100
   13698:	str	r3, [r4, #8]
   1369c:	str	r6, [r4, #12]
   136a0:	ldr	r6, [pc, #52]	; 136dc <__assert_fail@plt+0x277c>
   136a4:	cmp	r5, r6
   136a8:	beq	136b8 <__assert_fail@plt+0x2758>
   136ac:	mov	r0, r5
   136b0:	bl	12250 <__assert_fail@plt+0x12f0>
   136b4:	str	r6, [r4]
   136b8:	mov	r3, #1
   136bc:	str	r3, [r4, #4]
   136c0:	pop	{r4, r5, r6, r7, r8, pc}
   136c4:	ldr	r0, [r7, #-8]
   136c8:	bl	12250 <__assert_fail@plt+0x12f0>
   136cc:	add	r6, r6, #1
   136d0:	b	13670 <__assert_fail@plt+0x2710>
   136d4:	strdeq	r6, [r2], -r8
   136d8:	andeq	r6, r2, ip, ror #2
   136dc:	andeq	r6, r2, r0, lsl #2
   136e0:	ldr	r3, [pc, #4]	; 136ec <__assert_fail@plt+0x278c>
   136e4:	mvn	r2, #0
   136e8:	b	1325c <__assert_fail@plt+0x22fc>
   136ec:	andeq	r6, r2, ip, ror #4
   136f0:	ldr	r3, [pc]	; 136f8 <__assert_fail@plt+0x2798>
   136f4:	b	1325c <__assert_fail@plt+0x22fc>
   136f8:	andeq	r6, r2, ip, ror #4
   136fc:	mov	r1, r0
   13700:	mov	r0, #0
   13704:	b	136e0 <__assert_fail@plt+0x2780>
   13708:	mov	r2, r1
   1370c:	mov	r1, r0
   13710:	mov	r0, #0
   13714:	b	136f0 <__assert_fail@plt+0x2790>
   13718:	push	{r4, r5, lr}
   1371c:	sub	sp, sp, #52	; 0x34
   13720:	mov	r5, r2
   13724:	mov	r4, r0
   13728:	mov	r0, sp
   1372c:	bl	123e4 <__assert_fail@plt+0x1484>
   13730:	mov	r3, sp
   13734:	mvn	r2, #0
   13738:	mov	r1, r5
   1373c:	mov	r0, r4
   13740:	bl	1325c <__assert_fail@plt+0x22fc>
   13744:	add	sp, sp, #52	; 0x34
   13748:	pop	{r4, r5, pc}
   1374c:	push	{r4, r5, r6, lr}
   13750:	sub	sp, sp, #48	; 0x30
   13754:	mov	r5, r2
   13758:	mov	r6, r3
   1375c:	mov	r4, r0
   13760:	mov	r0, sp
   13764:	bl	123e4 <__assert_fail@plt+0x1484>
   13768:	mov	r3, sp
   1376c:	mov	r2, r6
   13770:	mov	r1, r5
   13774:	mov	r0, r4
   13778:	bl	1325c <__assert_fail@plt+0x22fc>
   1377c:	add	sp, sp, #48	; 0x30
   13780:	pop	{r4, r5, r6, pc}
   13784:	mov	r2, r1
   13788:	mov	r1, r0
   1378c:	mov	r0, #0
   13790:	b	13718 <__assert_fail@plt+0x27b8>
   13794:	mov	r3, r2
   13798:	mov	r2, r1
   1379c:	mov	r1, r0
   137a0:	mov	r0, #0
   137a4:	b	1374c <__assert_fail@plt+0x27ec>
   137a8:	push	{r4, r5, r6, lr}
   137ac:	mov	r4, r0
   137b0:	ldr	lr, [pc, #80]	; 13808 <__assert_fail@plt+0x28a8>
   137b4:	mov	r5, r1
   137b8:	mov	r6, r2
   137bc:	ldm	lr!, {r0, r1, r2, r3}
   137c0:	sub	sp, sp, #48	; 0x30
   137c4:	mov	ip, sp
   137c8:	stmia	ip!, {r0, r1, r2, r3}
   137cc:	ldm	lr!, {r0, r1, r2, r3}
   137d0:	stmia	ip!, {r0, r1, r2, r3}
   137d4:	ldm	lr, {r0, r1, r2, r3}
   137d8:	stm	ip, {r0, r1, r2, r3}
   137dc:	mov	r1, r6
   137e0:	mov	r2, #1
   137e4:	mov	r0, sp
   137e8:	bl	13468 <__assert_fail@plt+0x2508>
   137ec:	mov	r3, sp
   137f0:	mov	r2, r5
   137f4:	mov	r1, r4
   137f8:	mov	r0, #0
   137fc:	bl	1325c <__assert_fail@plt+0x22fc>
   13800:	add	sp, sp, #48	; 0x30
   13804:	pop	{r4, r5, r6, pc}
   13808:	andeq	r6, r2, ip, ror #4
   1380c:	mov	r2, r1
   13810:	mvn	r1, #0
   13814:	b	137a8 <__assert_fail@plt+0x2848>
   13818:	mov	r1, #58	; 0x3a
   1381c:	b	1380c <__assert_fail@plt+0x28ac>
   13820:	mov	r2, #58	; 0x3a
   13824:	b	137a8 <__assert_fail@plt+0x2848>
   13828:	push	{r4, r5, lr}
   1382c:	sub	sp, sp, #100	; 0x64
   13830:	mov	r4, r0
   13834:	mov	r0, sp
   13838:	mov	r5, r2
   1383c:	bl	123e4 <__assert_fail@plt+0x1484>
   13840:	mov	ip, sp
   13844:	add	lr, sp, #48	; 0x30
   13848:	ldm	ip!, {r0, r1, r2, r3}
   1384c:	stmia	lr!, {r0, r1, r2, r3}
   13850:	ldm	ip!, {r0, r1, r2, r3}
   13854:	stmia	lr!, {r0, r1, r2, r3}
   13858:	ldm	ip, {r0, r1, r2, r3}
   1385c:	stm	lr, {r0, r1, r2, r3}
   13860:	mov	r2, #1
   13864:	mov	r1, #58	; 0x3a
   13868:	add	r0, sp, #48	; 0x30
   1386c:	bl	13468 <__assert_fail@plt+0x2508>
   13870:	add	r3, sp, #48	; 0x30
   13874:	mvn	r2, #0
   13878:	mov	r1, r5
   1387c:	mov	r0, r4
   13880:	bl	1325c <__assert_fail@plt+0x22fc>
   13884:	add	sp, sp, #100	; 0x64
   13888:	pop	{r4, r5, pc}
   1388c:	push	{r4, r5, r6, r7, lr}
   13890:	mov	r4, r0
   13894:	ldr	lr, [pc, #84]	; 138f0 <__assert_fail@plt+0x2990>
   13898:	mov	r6, r1
   1389c:	mov	r7, r2
   138a0:	mov	r5, r3
   138a4:	ldm	lr!, {r0, r1, r2, r3}
   138a8:	sub	sp, sp, #52	; 0x34
   138ac:	mov	ip, sp
   138b0:	stmia	ip!, {r0, r1, r2, r3}
   138b4:	ldm	lr!, {r0, r1, r2, r3}
   138b8:	stmia	ip!, {r0, r1, r2, r3}
   138bc:	ldm	lr, {r0, r1, r2, r3}
   138c0:	stm	ip, {r0, r1, r2, r3}
   138c4:	mov	r2, r7
   138c8:	mov	r1, r6
   138cc:	mov	r0, sp
   138d0:	bl	134c4 <__assert_fail@plt+0x2564>
   138d4:	mov	r3, sp
   138d8:	ldr	r2, [sp, #72]	; 0x48
   138dc:	mov	r1, r5
   138e0:	mov	r0, r4
   138e4:	bl	1325c <__assert_fail@plt+0x22fc>
   138e8:	add	sp, sp, #52	; 0x34
   138ec:	pop	{r4, r5, r6, r7, pc}
   138f0:	andeq	r6, r2, ip, ror #4
   138f4:	mvn	ip, #0
   138f8:	push	{r0, r1, r2, lr}
   138fc:	str	ip, [sp]
   13900:	bl	1388c <__assert_fail@plt+0x292c>
   13904:	add	sp, sp, #12
   13908:	pop	{pc}		; (ldr pc, [sp], #4)
   1390c:	mov	r3, r2
   13910:	mov	r2, r1
   13914:	mov	r1, r0
   13918:	mov	r0, #0
   1391c:	b	138f4 <__assert_fail@plt+0x2994>
   13920:	push	{r0, r1, r2, lr}
   13924:	str	r3, [sp]
   13928:	mov	r3, r2
   1392c:	mov	r2, r1
   13930:	mov	r1, r0
   13934:	mov	r0, #0
   13938:	bl	1388c <__assert_fail@plt+0x292c>
   1393c:	add	sp, sp, #12
   13940:	pop	{pc}		; (ldr pc, [sp], #4)
   13944:	ldr	r3, [pc]	; 1394c <__assert_fail@plt+0x29ec>
   13948:	b	1325c <__assert_fail@plt+0x22fc>
   1394c:	andeq	r6, r2, r8, lsl #2
   13950:	mov	r2, r1
   13954:	mov	r1, r0
   13958:	mov	r0, #0
   1395c:	b	13944 <__assert_fail@plt+0x29e4>
   13960:	mvn	r2, #0
   13964:	b	13944 <__assert_fail@plt+0x29e4>
   13968:	mov	r1, r0
   1396c:	mov	r0, #0
   13970:	b	13960 <__assert_fail@plt+0x2a00>
   13974:	push	{r4, r5, r6, lr}
   13978:	sub	sp, sp, #32
   1397c:	cmp	r1, #0
   13980:	mov	r5, r0
   13984:	ldr	r4, [sp, #48]	; 0x30
   13988:	ldr	r6, [sp, #52]	; 0x34
   1398c:	beq	13a40 <__assert_fail@plt+0x2ae0>
   13990:	stm	sp, {r2, r3}
   13994:	mov	r3, r1
   13998:	ldr	r2, [pc, #860]	; 13cfc <__assert_fail@plt+0x2d9c>
   1399c:	mov	r1, #1
   139a0:	bl	10eac <__fprintf_chk@plt>
   139a4:	mov	r2, #5
   139a8:	ldr	r1, [pc, #848]	; 13d00 <__assert_fail@plt+0x2da0>
   139ac:	mov	r0, #0
   139b0:	bl	10d8c <dcgettext@plt>
   139b4:	ldr	r3, [pc, #840]	; 13d04 <__assert_fail@plt+0x2da4>
   139b8:	ldr	r2, [pc, #840]	; 13d08 <__assert_fail@plt+0x2da8>
   139bc:	str	r3, [sp]
   139c0:	mov	r1, #1
   139c4:	mov	r3, r0
   139c8:	mov	r0, r5
   139cc:	bl	10eac <__fprintf_chk@plt>
   139d0:	mov	r1, r5
   139d4:	mov	r0, #10
   139d8:	bl	10d80 <fputc_unlocked@plt>
   139dc:	mov	r2, #5
   139e0:	ldr	r1, [pc, #804]	; 13d0c <__assert_fail@plt+0x2dac>
   139e4:	mov	r0, #0
   139e8:	bl	10d8c <dcgettext@plt>
   139ec:	mov	r1, #1
   139f0:	ldr	r3, [pc, #792]	; 13d10 <__assert_fail@plt+0x2db0>
   139f4:	mov	r2, r0
   139f8:	mov	r0, r5
   139fc:	bl	10eac <__fprintf_chk@plt>
   13a00:	mov	r1, r5
   13a04:	mov	r0, #10
   13a08:	bl	10d80 <fputc_unlocked@plt>
   13a0c:	cmp	r6, #9
   13a10:	ldrls	pc, [pc, r6, lsl #2]
   13a14:	b	13cf0 <__assert_fail@plt+0x2d90>
   13a18:	andeq	r3, r1, r0, lsr fp
   13a1c:	andeq	r3, r1, r8, asr sl
   13a20:	andeq	r3, r1, r4, lsl #21
   13a24:			; <UNDEFINED> instruction: 0x00013ab8
   13a28:	strdeq	r3, [r1], -r4
   13a2c:	andeq	r3, r1, r8, lsr fp
   13a30:	andeq	r3, r1, r0, lsl #23
   13a34:	ldrdeq	r3, [r1], -r0
   13a38:	andeq	r3, r1, r8, lsr #24
   13a3c:	andeq	r3, r1, r8, lsl #25
   13a40:	str	r3, [sp]
   13a44:	mov	r1, #1
   13a48:	mov	r3, r2
   13a4c:	ldr	r2, [pc, #704]	; 13d14 <__assert_fail@plt+0x2db4>
   13a50:	bl	10eac <__fprintf_chk@plt>
   13a54:	b	139a4 <__assert_fail@plt+0x2a44>
   13a58:	mov	r2, #5
   13a5c:	ldr	r1, [pc, #692]	; 13d18 <__assert_fail@plt+0x2db8>
   13a60:	mov	r0, #0
   13a64:	bl	10d8c <dcgettext@plt>
   13a68:	ldr	r3, [r4]
   13a6c:	mov	r1, #1
   13a70:	mov	r2, r0
   13a74:	mov	r0, r5
   13a78:	add	sp, sp, #32
   13a7c:	pop	{r4, r5, r6, lr}
   13a80:	b	10eac <__fprintf_chk@plt>
   13a84:	mov	r2, #5
   13a88:	ldr	r1, [pc, #652]	; 13d1c <__assert_fail@plt+0x2dbc>
   13a8c:	mov	r0, #0
   13a90:	bl	10d8c <dcgettext@plt>
   13a94:	ldr	r3, [r4, #4]
   13a98:	mov	r1, #1
   13a9c:	str	r3, [sp, #48]	; 0x30
   13aa0:	ldr	r3, [r4]
   13aa4:	mov	r2, r0
   13aa8:	mov	r0, r5
   13aac:	add	sp, sp, #32
   13ab0:	pop	{r4, r5, r6, lr}
   13ab4:	b	10eac <__fprintf_chk@plt>
   13ab8:	mov	r2, #5
   13abc:	ldr	r1, [pc, #604]	; 13d20 <__assert_fail@plt+0x2dc0>
   13ac0:	mov	r0, #0
   13ac4:	bl	10d8c <dcgettext@plt>
   13ac8:	ldr	r3, [r4, #8]
   13acc:	mov	r1, #1
   13ad0:	str	r3, [sp, #52]	; 0x34
   13ad4:	ldr	r3, [r4, #4]
   13ad8:	str	r3, [sp, #48]	; 0x30
   13adc:	ldr	r3, [r4]
   13ae0:	mov	r2, r0
   13ae4:	mov	r0, r5
   13ae8:	add	sp, sp, #32
   13aec:	pop	{r4, r5, r6, lr}
   13af0:	b	10eac <__fprintf_chk@plt>
   13af4:	mov	r2, #5
   13af8:	ldr	r1, [pc, #548]	; 13d24 <__assert_fail@plt+0x2dc4>
   13afc:	mov	r0, #0
   13b00:	bl	10d8c <dcgettext@plt>
   13b04:	ldr	r3, [r4, #12]
   13b08:	mov	r1, #1
   13b0c:	str	r3, [sp, #8]
   13b10:	ldr	r3, [r4, #8]
   13b14:	str	r3, [sp, #4]
   13b18:	ldr	r3, [r4, #4]
   13b1c:	str	r3, [sp]
   13b20:	ldr	r3, [r4]
   13b24:	mov	r2, r0
   13b28:	mov	r0, r5
   13b2c:	bl	10eac <__fprintf_chk@plt>
   13b30:	add	sp, sp, #32
   13b34:	pop	{r4, r5, r6, pc}
   13b38:	mov	r2, #5
   13b3c:	ldr	r1, [pc, #484]	; 13d28 <__assert_fail@plt+0x2dc8>
   13b40:	mov	r0, #0
   13b44:	bl	10d8c <dcgettext@plt>
   13b48:	ldr	r3, [r4, #16]
   13b4c:	mov	r1, #1
   13b50:	str	r3, [sp, #12]
   13b54:	ldr	r3, [r4, #12]
   13b58:	str	r3, [sp, #8]
   13b5c:	ldr	r3, [r4, #8]
   13b60:	str	r3, [sp, #4]
   13b64:	ldr	r3, [r4, #4]
   13b68:	str	r3, [sp]
   13b6c:	ldr	r3, [r4]
   13b70:	mov	r2, r0
   13b74:	mov	r0, r5
   13b78:	bl	10eac <__fprintf_chk@plt>
   13b7c:	b	13b30 <__assert_fail@plt+0x2bd0>
   13b80:	mov	r2, #5
   13b84:	ldr	r1, [pc, #416]	; 13d2c <__assert_fail@plt+0x2dcc>
   13b88:	mov	r0, #0
   13b8c:	bl	10d8c <dcgettext@plt>
   13b90:	ldr	r3, [r4, #20]
   13b94:	mov	r1, #1
   13b98:	str	r3, [sp, #16]
   13b9c:	ldr	r3, [r4, #16]
   13ba0:	str	r3, [sp, #12]
   13ba4:	ldr	r3, [r4, #12]
   13ba8:	str	r3, [sp, #8]
   13bac:	ldr	r3, [r4, #8]
   13bb0:	str	r3, [sp, #4]
   13bb4:	ldr	r3, [r4, #4]
   13bb8:	str	r3, [sp]
   13bbc:	ldr	r3, [r4]
   13bc0:	mov	r2, r0
   13bc4:	mov	r0, r5
   13bc8:	bl	10eac <__fprintf_chk@plt>
   13bcc:	b	13b30 <__assert_fail@plt+0x2bd0>
   13bd0:	mov	r2, #5
   13bd4:	ldr	r1, [pc, #340]	; 13d30 <__assert_fail@plt+0x2dd0>
   13bd8:	mov	r0, #0
   13bdc:	bl	10d8c <dcgettext@plt>
   13be0:	ldr	r3, [r4, #24]
   13be4:	mov	r1, #1
   13be8:	str	r3, [sp, #20]
   13bec:	ldr	r3, [r4, #20]
   13bf0:	str	r3, [sp, #16]
   13bf4:	ldr	r3, [r4, #16]
   13bf8:	str	r3, [sp, #12]
   13bfc:	ldr	r3, [r4, #12]
   13c00:	str	r3, [sp, #8]
   13c04:	ldr	r3, [r4, #8]
   13c08:	str	r3, [sp, #4]
   13c0c:	ldr	r3, [r4, #4]
   13c10:	str	r3, [sp]
   13c14:	ldr	r3, [r4]
   13c18:	mov	r2, r0
   13c1c:	mov	r0, r5
   13c20:	bl	10eac <__fprintf_chk@plt>
   13c24:	b	13b30 <__assert_fail@plt+0x2bd0>
   13c28:	mov	r2, #5
   13c2c:	ldr	r1, [pc, #256]	; 13d34 <__assert_fail@plt+0x2dd4>
   13c30:	mov	r0, #0
   13c34:	bl	10d8c <dcgettext@plt>
   13c38:	ldr	r3, [r4, #28]
   13c3c:	mov	r1, #1
   13c40:	str	r3, [sp, #24]
   13c44:	ldr	r3, [r4, #24]
   13c48:	str	r3, [sp, #20]
   13c4c:	ldr	r3, [r4, #20]
   13c50:	str	r3, [sp, #16]
   13c54:	ldr	r3, [r4, #16]
   13c58:	str	r3, [sp, #12]
   13c5c:	ldr	r3, [r4, #12]
   13c60:	str	r3, [sp, #8]
   13c64:	ldr	r3, [r4, #8]
   13c68:	str	r3, [sp, #4]
   13c6c:	ldr	r3, [r4, #4]
   13c70:	str	r3, [sp]
   13c74:	ldr	r3, [r4]
   13c78:	mov	r2, r0
   13c7c:	mov	r0, r5
   13c80:	bl	10eac <__fprintf_chk@plt>
   13c84:	b	13b30 <__assert_fail@plt+0x2bd0>
   13c88:	ldr	r1, [pc, #168]	; 13d38 <__assert_fail@plt+0x2dd8>
   13c8c:	mov	r2, #5
   13c90:	mov	r0, #0
   13c94:	bl	10d8c <dcgettext@plt>
   13c98:	ldr	r3, [r4, #32]
   13c9c:	mov	r1, #1
   13ca0:	str	r3, [sp, #28]
   13ca4:	ldr	r3, [r4, #28]
   13ca8:	str	r3, [sp, #24]
   13cac:	ldr	r3, [r4, #24]
   13cb0:	str	r3, [sp, #20]
   13cb4:	ldr	r3, [r4, #20]
   13cb8:	str	r3, [sp, #16]
   13cbc:	ldr	r3, [r4, #16]
   13cc0:	str	r3, [sp, #12]
   13cc4:	ldr	r3, [r4, #12]
   13cc8:	str	r3, [sp, #8]
   13ccc:	ldr	r3, [r4, #8]
   13cd0:	str	r3, [sp, #4]
   13cd4:	ldr	r3, [r4, #4]
   13cd8:	str	r3, [sp]
   13cdc:	ldr	r3, [r4]
   13ce0:	mov	r2, r0
   13ce4:	mov	r0, r5
   13ce8:	bl	10eac <__fprintf_chk@plt>
   13cec:	b	13b30 <__assert_fail@plt+0x2bd0>
   13cf0:	mov	r2, #5
   13cf4:	ldr	r1, [pc, #64]	; 13d3c <__assert_fail@plt+0x2ddc>
   13cf8:	b	13c90 <__assert_fail@plt+0x2d30>
   13cfc:	strdeq	r5, [r1], -r5	; <UNPREDICTABLE>
   13d00:	andeq	r5, r1, r8, lsl #20
   13d04:	andeq	r0, r0, r6, ror #15
   13d08:	ldrdeq	r5, [r1], -r6
   13d0c:	andeq	r5, r1, ip, lsl #20
   13d10:			; <UNDEFINED> instruction: 0x00015ab7
   13d14:	andeq	r5, r1, r1, lsl #20
   13d18:	ldrdeq	r5, [r1], -r9
   13d1c:	andeq	r5, r1, r9, ror #21
   13d20:	andeq	r5, r1, r0, lsl #22
   13d24:	andeq	r5, r1, ip, lsl fp
   13d28:	andeq	r5, r1, ip, lsr fp
   13d2c:	andeq	r5, r1, r0, ror #22
   13d30:	andeq	r5, r1, r8, lsl #23
   13d34:			; <UNDEFINED> instruction: 0x00015bb4
   13d38:	andeq	r5, r1, r4, ror #23
   13d3c:	andeq	r5, r1, r8, lsl ip
   13d40:	push	{r0, r1, r4, lr}
   13d44:	mov	ip, #0
   13d48:	ldr	lr, [sp, #16]
   13d4c:	ldr	r4, [lr, ip, lsl #2]
   13d50:	cmp	r4, #0
   13d54:	bne	13d6c <__assert_fail@plt+0x2e0c>
   13d58:	str	ip, [sp, #4]
   13d5c:	str	lr, [sp]
   13d60:	bl	13974 <__assert_fail@plt+0x2a14>
   13d64:	add	sp, sp, #8
   13d68:	pop	{r4, pc}
   13d6c:	add	ip, ip, #1
   13d70:	b	13d4c <__assert_fail@plt+0x2dec>
   13d74:	push	{r4, r5, lr}
   13d78:	sub	sp, sp, #52	; 0x34
   13d7c:	mov	ip, #0
   13d80:	ldr	r5, [sp, #64]	; 0x40
   13d84:	add	lr, sp, #8
   13d88:	ldr	r4, [r5, ip, lsl #2]
   13d8c:	cmp	r4, #0
   13d90:	str	r4, [lr, ip, lsl #2]
   13d94:	beq	13da4 <__assert_fail@plt+0x2e44>
   13d98:	add	ip, ip, #1
   13d9c:	cmp	ip, #10
   13da0:	bne	13d88 <__assert_fail@plt+0x2e28>
   13da4:	str	ip, [sp, #4]
   13da8:	str	lr, [sp]
   13dac:	bl	13974 <__assert_fail@plt+0x2a14>
   13db0:	add	sp, sp, #52	; 0x34
   13db4:	pop	{r4, r5, pc}
   13db8:	push	{r3}		; (str r3, [sp, #-4]!)
   13dbc:	push	{r0, r1, r2, r3, lr}
   13dc0:	add	r3, sp, #24
   13dc4:	str	r3, [sp, #12]
   13dc8:	str	r3, [sp]
   13dcc:	ldr	r3, [sp, #20]
   13dd0:	bl	13d74 <__assert_fail@plt+0x2e14>
   13dd4:	add	sp, sp, #16
   13dd8:	pop	{lr}		; (ldr lr, [sp], #4)
   13ddc:	add	sp, sp, #4
   13de0:	bx	lr
   13de4:	ldr	r3, [pc, #116]	; 13e60 <__assert_fail@plt+0x2f00>
   13de8:	push	{r4, lr}
   13dec:	mov	r0, #10
   13df0:	ldr	r1, [r3]
   13df4:	bl	10d80 <fputc_unlocked@plt>
   13df8:	mov	r2, #5
   13dfc:	ldr	r1, [pc, #96]	; 13e64 <__assert_fail@plt+0x2f04>
   13e00:	mov	r0, #0
   13e04:	bl	10d8c <dcgettext@plt>
   13e08:	ldr	r2, [pc, #88]	; 13e68 <__assert_fail@plt+0x2f08>
   13e0c:	mov	r1, r0
   13e10:	mov	r0, #1
   13e14:	bl	10e94 <__printf_chk@plt>
   13e18:	mov	r2, #5
   13e1c:	ldr	r1, [pc, #72]	; 13e6c <__assert_fail@plt+0x2f0c>
   13e20:	mov	r0, #0
   13e24:	bl	10d8c <dcgettext@plt>
   13e28:	ldr	r3, [pc, #64]	; 13e70 <__assert_fail@plt+0x2f10>
   13e2c:	ldr	r2, [pc, #64]	; 13e74 <__assert_fail@plt+0x2f14>
   13e30:	mov	r1, r0
   13e34:	mov	r0, #1
   13e38:	bl	10e94 <__printf_chk@plt>
   13e3c:	mov	r2, #5
   13e40:	ldr	r1, [pc, #48]	; 13e78 <__assert_fail@plt+0x2f18>
   13e44:	mov	r0, #0
   13e48:	bl	10d8c <dcgettext@plt>
   13e4c:	ldr	r2, [pc, #40]	; 13e7c <__assert_fail@plt+0x2f1c>
   13e50:	pop	{r4, lr}
   13e54:	mov	r1, r0
   13e58:	mov	r0, #1
   13e5c:	b	10e94 <__printf_chk@plt>
   13e60:	andeq	r6, r2, r4, asr r1
   13e64:	andeq	r5, r1, r4, asr ip
   13e68:	andeq	r5, r1, r8, ror #24
   13e6c:	andeq	r5, r1, lr, ror ip
   13e70:	ldrdeq	r5, [r1], -r8
   13e74:	andeq	r5, r1, r0, lsl #12
   13e78:	muleq	r1, r2, ip
   13e7c:			; <UNDEFINED> instruction: 0x00015cb9
   13e80:	push	{r4, lr}
   13e84:	bl	14800 <__assert_fail@plt+0x38a0>
   13e88:	cmp	r0, #0
   13e8c:	popne	{r4, pc}
   13e90:	bl	14314 <__assert_fail@plt+0x33b4>
   13e94:	push	{r4, lr}
   13e98:	bl	14800 <__assert_fail@plt+0x38a0>
   13e9c:	cmp	r0, #0
   13ea0:	popne	{r4, pc}
   13ea4:	bl	14314 <__assert_fail@plt+0x33b4>
   13ea8:	b	13e80 <__assert_fail@plt+0x2f20>
   13eac:	push	{r4, r5, r6, lr}
   13eb0:	mov	r5, r0
   13eb4:	mov	r4, r1
   13eb8:	bl	14840 <__assert_fail@plt+0x38e0>
   13ebc:	cmp	r0, #0
   13ec0:	popne	{r4, r5, r6, pc}
   13ec4:	adds	r4, r4, #0
   13ec8:	movne	r4, #1
   13ecc:	cmp	r5, #0
   13ed0:	orreq	r4, r4, #1
   13ed4:	cmp	r4, #0
   13ed8:	popeq	{r4, r5, r6, pc}
   13edc:	bl	14314 <__assert_fail@plt+0x33b4>
   13ee0:	push	{r4, lr}
   13ee4:	cmp	r1, #0
   13ee8:	orreq	r1, r1, #1
   13eec:	bl	14840 <__assert_fail@plt+0x38e0>
   13ef0:	cmp	r0, #0
   13ef4:	popne	{r4, pc}
   13ef8:	bl	14314 <__assert_fail@plt+0x33b4>
   13efc:	push	{r4, r5, r6, lr}
   13f00:	mov	r6, r0
   13f04:	mov	r5, r1
   13f08:	mov	r4, r2
   13f0c:	bl	14990 <__assert_fail@plt+0x3a30>
   13f10:	cmp	r0, #0
   13f14:	popne	{r4, r5, r6, pc}
   13f18:	cmp	r6, #0
   13f1c:	beq	13f2c <__assert_fail@plt+0x2fcc>
   13f20:	cmp	r5, #0
   13f24:	cmpne	r4, #0
   13f28:	popeq	{r4, r5, r6, pc}
   13f2c:	bl	14314 <__assert_fail@plt+0x33b4>
   13f30:	b	13efc <__assert_fail@plt+0x2f9c>
   13f34:	cmp	r2, #0
   13f38:	cmpne	r1, #0
   13f3c:	moveq	r2, #1
   13f40:	moveq	r1, r2
   13f44:	push	{r4, lr}
   13f48:	bl	14990 <__assert_fail@plt+0x3a30>
   13f4c:	cmp	r0, #0
   13f50:	popne	{r4, pc}
   13f54:	bl	14314 <__assert_fail@plt+0x33b4>
   13f58:	mov	r2, r1
   13f5c:	mov	r1, r0
   13f60:	mov	r0, #0
   13f64:	b	13efc <__assert_fail@plt+0x2f9c>
   13f68:	mov	r2, r1
   13f6c:	mov	r1, r0
   13f70:	mov	r0, #0
   13f74:	b	13f34 <__assert_fail@plt+0x2fd4>
   13f78:	push	{r4, r5, r6, r7, r8, lr}
   13f7c:	subs	r7, r0, #0
   13f80:	mov	r5, r1
   13f84:	mov	r6, r2
   13f88:	ldr	r4, [r1]
   13f8c:	bne	13fc8 <__assert_fail@plt+0x3068>
   13f90:	cmp	r4, #0
   13f94:	bne	13fb0 <__assert_fail@plt+0x3050>
   13f98:	mov	r1, r2
   13f9c:	mov	r0, #64	; 0x40
   13fa0:	bl	14abc <__assert_fail@plt+0x3b5c>
   13fa4:	cmp	r0, #0
   13fa8:	movne	r4, r0
   13fac:	addeq	r4, r0, #1
   13fb0:	mov	r2, r6
   13fb4:	mov	r1, r4
   13fb8:	mov	r0, r7
   13fbc:	bl	13efc <__assert_fail@plt+0x2f9c>
   13fc0:	str	r4, [r5]
   13fc4:	pop	{r4, r5, r6, r7, r8, pc}
   13fc8:	lsr	r2, r4, #1
   13fcc:	add	r3, r2, #1
   13fd0:	mvn	r3, r3
   13fd4:	cmp	r4, r3
   13fd8:	addls	r4, r4, #1
   13fdc:	addls	r4, r4, r2
   13fe0:	bls	13fb0 <__assert_fail@plt+0x3050>
   13fe4:	bl	14314 <__assert_fail@plt+0x33b4>
   13fe8:	mov	r2, #1
   13fec:	b	13f78 <__assert_fail@plt+0x3018>
   13ff0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ff4:	mov	sl, r0
   13ff8:	ldr	r8, [r1]
   13ffc:	mov	fp, r1
   14000:	mov	r5, r2
   14004:	asrs	r4, r8, #1
   14008:	mov	r9, r3
   1400c:	ldr	r7, [sp, #48]	; 0x30
   14010:	bpl	140ac <__assert_fail@plt+0x314c>
   14014:	rsb	r2, r4, #-2147483648	; 0x80000000
   14018:	cmp	r8, r2
   1401c:	movge	r2, #0
   14020:	movlt	r2, #1
   14024:	mvn	r3, r9
   14028:	cmp	r2, #0
   1402c:	lsr	r3, r3, #31
   14030:	addeq	r4, r4, r8
   14034:	mvnne	r4, #-2147483648	; 0x80000000
   14038:	mov	r0, r3
   1403c:	cmp	r9, r4
   14040:	movge	r0, #0
   14044:	andlt	r0, r0, #1
   14048:	cmp	r0, #0
   1404c:	str	r3, [sp, #4]
   14050:	bne	14220 <__assert_fail@plt+0x32c0>
   14054:	cmp	r7, #0
   14058:	bge	1416c <__assert_fail@plt+0x320c>
   1405c:	cmp	r4, #0
   14060:	bge	140c4 <__assert_fail@plt+0x3164>
   14064:	mov	r1, r7
   14068:	mvn	r0, #-2147483648	; 0x80000000
   1406c:	bl	14cc8 <__assert_fail@plt+0x3d68>
   14070:	cmp	r0, r4
   14074:	movle	r0, #0
   14078:	movgt	r0, #1
   1407c:	cmp	r0, #0
   14080:	mvnne	r6, #-2147483648	; 0x80000000
   14084:	beq	140d4 <__assert_fail@plt+0x3174>
   14088:	mov	r1, r7
   1408c:	mov	r0, r6
   14090:	bl	14cc8 <__assert_fail@plt+0x3d68>
   14094:	mov	r1, r7
   14098:	mov	r4, r0
   1409c:	mov	r0, r6
   140a0:	bl	14ee8 <__assert_fail@plt+0x3f88>
   140a4:	sub	r1, r6, r1
   140a8:	b	140e4 <__assert_fail@plt+0x3184>
   140ac:	mvn	r2, #-2147483648	; 0x80000000
   140b0:	sub	r2, r2, r4
   140b4:	cmp	r8, r2
   140b8:	movle	r2, #0
   140bc:	movgt	r2, #1
   140c0:	b	14024 <__assert_fail@plt+0x30c4>
   140c4:	cmn	r7, #1
   140c8:	movne	r1, r7
   140cc:	movne	r0, #-2147483648	; 0x80000000
   140d0:	bne	14238 <__assert_fail@plt+0x32d8>
   140d4:	mul	r1, r7, r4
   140d8:	cmp	r1, #63	; 0x3f
   140dc:	movle	r6, #64	; 0x40
   140e0:	ble	14088 <__assert_fail@plt+0x3128>
   140e4:	cmp	sl, #0
   140e8:	sub	r2, r4, r8
   140ec:	streq	sl, [fp]
   140f0:	cmp	r2, r5
   140f4:	bge	141c8 <__assert_fail@plt+0x3268>
   140f8:	cmp	r5, #0
   140fc:	bge	14194 <__assert_fail@plt+0x3234>
   14100:	rsb	r2, r5, #-2147483648	; 0x80000000
   14104:	cmp	r8, r2
   14108:	movge	r2, #0
   1410c:	movlt	r2, #1
   14110:	cmp	r2, #0
   14114:	bne	14168 <__assert_fail@plt+0x3208>
   14118:	ldr	r0, [sp, #4]
   1411c:	add	r5, r8, r5
   14120:	cmp	r9, r5
   14124:	movge	r0, #0
   14128:	andlt	r0, r0, #1
   1412c:	cmp	r0, #0
   14130:	mov	r4, r5
   14134:	bne	14168 <__assert_fail@plt+0x3208>
   14138:	cmp	r7, #0
   1413c:	bge	141dc <__assert_fail@plt+0x327c>
   14140:	cmp	r5, #0
   14144:	bge	141b4 <__assert_fail@plt+0x3254>
   14148:	mov	r1, r7
   1414c:	mvn	r0, #-2147483648	; 0x80000000
   14150:	bl	14cc8 <__assert_fail@plt+0x3d68>
   14154:	cmp	r5, r0
   14158:	movge	r0, #0
   1415c:	movlt	r0, #1
   14160:	cmp	r0, #0
   14164:	beq	141c4 <__assert_fail@plt+0x3264>
   14168:	bl	14314 <__assert_fail@plt+0x33b4>
   1416c:	beq	140d4 <__assert_fail@plt+0x3174>
   14170:	cmp	r4, #0
   14174:	bge	14230 <__assert_fail@plt+0x32d0>
   14178:	cmn	r4, #1
   1417c:	beq	140d4 <__assert_fail@plt+0x3174>
   14180:	mov	r1, r4
   14184:	mov	r0, #-2147483648	; 0x80000000
   14188:	bl	14cc8 <__assert_fail@plt+0x3d68>
   1418c:	cmp	r7, r0
   14190:	b	14074 <__assert_fail@plt+0x3114>
   14194:	cmp	r8, #0
   14198:	blt	14118 <__assert_fail@plt+0x31b8>
   1419c:	mvn	r2, #-2147483648	; 0x80000000
   141a0:	sub	r2, r2, r5
   141a4:	cmp	r8, r2
   141a8:	movle	r2, #0
   141ac:	movgt	r2, #1
   141b0:	b	14110 <__assert_fail@plt+0x31b0>
   141b4:	cmn	r7, #1
   141b8:	movne	r1, r7
   141bc:	movne	r0, #-2147483648	; 0x80000000
   141c0:	bne	14214 <__assert_fail@plt+0x32b4>
   141c4:	mul	r1, r5, r7
   141c8:	mov	r0, sl
   141cc:	bl	13eac <__assert_fail@plt+0x2f4c>
   141d0:	str	r4, [fp]
   141d4:	add	sp, sp, #12
   141d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141dc:	beq	141c4 <__assert_fail@plt+0x3264>
   141e0:	cmp	r5, #0
   141e4:	movge	r1, r7
   141e8:	mvnge	r0, #-2147483648	; 0x80000000
   141ec:	bge	14214 <__assert_fail@plt+0x32b4>
   141f0:	cmn	r5, #1
   141f4:	beq	141c4 <__assert_fail@plt+0x3264>
   141f8:	mov	r1, r5
   141fc:	mov	r0, #-2147483648	; 0x80000000
   14200:	bl	14cc8 <__assert_fail@plt+0x3d68>
   14204:	cmp	r7, r0
   14208:	movle	r0, #0
   1420c:	movgt	r0, #1
   14210:	b	14160 <__assert_fail@plt+0x3200>
   14214:	bl	14cc8 <__assert_fail@plt+0x3d68>
   14218:	cmp	r5, r0
   1421c:	b	14208 <__assert_fail@plt+0x32a8>
   14220:	cmp	r7, #0
   14224:	mov	r4, r9
   14228:	blt	140c4 <__assert_fail@plt+0x3164>
   1422c:	beq	140d4 <__assert_fail@plt+0x3174>
   14230:	mov	r1, r7
   14234:	mvn	r0, #-2147483648	; 0x80000000
   14238:	bl	14cc8 <__assert_fail@plt+0x3d68>
   1423c:	cmp	r0, r4
   14240:	movge	r0, #0
   14244:	movlt	r0, #1
   14248:	b	1407c <__assert_fail@plt+0x311c>
   1424c:	push	{r4, lr}
   14250:	bl	147b8 <__assert_fail@plt+0x3858>
   14254:	cmp	r0, #0
   14258:	popne	{r4, pc}
   1425c:	bl	14314 <__assert_fail@plt+0x33b4>
   14260:	mov	r1, #1
   14264:	b	1424c <__assert_fail@plt+0x32ec>
   14268:	push	{r4, lr}
   1426c:	bl	147b8 <__assert_fail@plt+0x3858>
   14270:	cmp	r0, #0
   14274:	popne	{r4, pc}
   14278:	bl	14314 <__assert_fail@plt+0x33b4>
   1427c:	mov	r1, #1
   14280:	b	14268 <__assert_fail@plt+0x3308>
   14284:	push	{r4, r5, r6, lr}
   14288:	mov	r4, r1
   1428c:	mov	r5, r0
   14290:	mov	r0, r1
   14294:	bl	13e80 <__assert_fail@plt+0x2f20>
   14298:	mov	r2, r4
   1429c:	mov	r1, r5
   142a0:	pop	{r4, r5, r6, lr}
   142a4:	b	10d50 <memcpy@plt>
   142a8:	push	{r4, r5, r6, lr}
   142ac:	mov	r4, r1
   142b0:	mov	r5, r0
   142b4:	mov	r0, r1
   142b8:	bl	13e94 <__assert_fail@plt+0x2f34>
   142bc:	mov	r2, r4
   142c0:	mov	r1, r5
   142c4:	pop	{r4, r5, r6, lr}
   142c8:	b	10d50 <memcpy@plt>
   142cc:	push	{r4, r5, r6, lr}
   142d0:	mov	r5, r0
   142d4:	add	r0, r1, #1
   142d8:	mov	r4, r1
   142dc:	bl	13e94 <__assert_fail@plt+0x2f34>
   142e0:	mov	r2, #0
   142e4:	mov	r1, r5
   142e8:	strb	r2, [r0, r4]
   142ec:	mov	r2, r4
   142f0:	pop	{r4, r5, r6, lr}
   142f4:	b	10d50 <memcpy@plt>
   142f8:	push	{r4, lr}
   142fc:	mov	r4, r0
   14300:	bl	10e58 <strlen@plt>
   14304:	add	r1, r0, #1
   14308:	mov	r0, r4
   1430c:	pop	{r4, lr}
   14310:	b	14284 <__assert_fail@plt+0x3324>
   14314:	ldr	r3, [pc, #44]	; 14348 <__assert_fail@plt+0x33e8>
   14318:	push	{r4, lr}
   1431c:	mov	r2, #5
   14320:	ldr	r1, [pc, #36]	; 1434c <__assert_fail@plt+0x33ec>
   14324:	mov	r0, #0
   14328:	ldr	r4, [r3]
   1432c:	bl	10d8c <dcgettext@plt>
   14330:	ldr	r2, [pc, #24]	; 14350 <__assert_fail@plt+0x33f0>
   14334:	mov	r1, #0
   14338:	mov	r3, r0
   1433c:	mov	r0, r4
   14340:	bl	10df8 <error@plt>
   14344:	bl	10f48 <abort@plt>
   14348:	strdeq	r6, [r2], -r4
   1434c:	andeq	r5, r1, r5, lsl #26
   14350:	ldrdeq	r5, [r1], -r5	; <UNPREDICTABLE>
   14354:	push	{r4, r5, r6, r7, r8, lr}
   14358:	subs	r4, r1, #0
   1435c:	mov	r5, r0
   14360:	bge	1441c <__assert_fail@plt+0x34bc>
   14364:	ldrd	r6, [r0]
   14368:	cmp	r6, #0
   1436c:	sbcs	r3, r7, #0
   14370:	bge	143d0 <__assert_fail@plt+0x3470>
   14374:	asr	r3, r4, #31
   14378:	mov	r2, r4
   1437c:	mvn	r0, #0
   14380:	mvn	r1, #-2147483648	; 0x80000000
   14384:	bl	14f08 <__assert_fail@plt+0x3fa8>
   14388:	cmp	r6, r0
   1438c:	sbcs	r3, r7, r1
   14390:	movlt	r3, #1
   14394:	movge	r3, #0
   14398:	cmp	r3, #0
   1439c:	movne	r2, #0
   143a0:	movne	r3, #-2147483648	; 0x80000000
   143a4:	bne	14410 <__assert_fail@plt+0x34b0>
   143a8:	ldr	r2, [r5]
   143ac:	asr	r3, r4, #31
   143b0:	ldr	r1, [r5, #4]
   143b4:	mul	r3, r3, r2
   143b8:	mov	r0, #0
   143bc:	mla	r1, r4, r1, r3
   143c0:	umull	r2, r3, r2, r4
   143c4:	add	r3, r1, r3
   143c8:	strd	r2, [r5]
   143cc:	pop	{r4, r5, r6, r7, r8, pc}
   143d0:	cmn	r4, #1
   143d4:	moveq	r3, #0
   143d8:	beq	14400 <__assert_fail@plt+0x34a0>
   143dc:	mov	r2, r4
   143e0:	asr	r3, r4, #31
   143e4:	mov	r0, #0
   143e8:	mov	r1, #-2147483648	; 0x80000000
   143ec:	bl	14f08 <__assert_fail@plt+0x3fa8>
   143f0:	cmp	r0, r6
   143f4:	sbcs	r3, r1, r7
   143f8:	movlt	r3, #1
   143fc:	movge	r3, #0
   14400:	cmp	r3, #0
   14404:	mvnne	r2, #0
   14408:	mvnne	r3, #-2147483648	; 0x80000000
   1440c:	beq	143a8 <__assert_fail@plt+0x3448>
   14410:	strd	r2, [r5]
   14414:	mov	r0, #1
   14418:	pop	{r4, r5, r6, r7, r8, pc}
   1441c:	beq	143a8 <__assert_fail@plt+0x3448>
   14420:	ldrd	r6, [r0]
   14424:	cmp	r6, #0
   14428:	sbcs	r3, r7, #0
   1442c:	bge	14470 <__assert_fail@plt+0x3510>
   14430:	mvn	r3, #0
   14434:	cmp	r7, r3
   14438:	mvn	r2, #0
   1443c:	cmpeq	r6, r2
   14440:	moveq	r3, #0
   14444:	beq	14398 <__assert_fail@plt+0x3438>
   14448:	mov	r2, r6
   1444c:	mov	r3, r7
   14450:	mov	r0, #0
   14454:	mov	r1, #-2147483648	; 0x80000000
   14458:	bl	14f08 <__assert_fail@plt+0x3fa8>
   1445c:	asr	r3, r4, #31
   14460:	mov	r2, r4
   14464:	cmp	r0, r4
   14468:	sbcs	r3, r1, r3
   1446c:	b	14390 <__assert_fail@plt+0x3430>
   14470:	mov	r2, r4
   14474:	asr	r3, r4, #31
   14478:	mvn	r0, #0
   1447c:	mvn	r1, #-2147483648	; 0x80000000
   14480:	b	143ec <__assert_fail@plt+0x348c>
   14484:	push	{r4, r5, r6, r7, r8, lr}
   14488:	mov	r6, r0
   1448c:	mov	r7, r1
   14490:	mov	r5, r2
   14494:	mov	r4, #0
   14498:	cmp	r5, #0
   1449c:	bne	144a8 <__assert_fail@plt+0x3548>
   144a0:	mov	r0, r4
   144a4:	pop	{r4, r5, r6, r7, r8, pc}
   144a8:	mov	r1, r7
   144ac:	mov	r0, r6
   144b0:	bl	14354 <__assert_fail@plt+0x33f4>
   144b4:	sub	r5, r5, #1
   144b8:	orr	r4, r4, r0
   144bc:	b	14498 <__assert_fail@plt+0x3538>
   144c0:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   144c4:	cmp	r2, #36	; 0x24
   144c8:	ldr	r9, [sp, #48]	; 0x30
   144cc:	bls	144e4 <__assert_fail@plt+0x3584>
   144d0:	ldr	r3, [pc, #724]	; 147ac <__assert_fail@plt+0x384c>
   144d4:	mov	r2, #85	; 0x55
   144d8:	ldr	r1, [pc, #720]	; 147b0 <__assert_fail@plt+0x3850>
   144dc:	ldr	r0, [pc, #720]	; 147b4 <__assert_fail@plt+0x3854>
   144e0:	bl	10f60 <__assert_fail@plt>
   144e4:	cmp	r1, #0
   144e8:	mov	r7, r1
   144ec:	mov	r4, r0
   144f0:	addeq	r7, sp, #4
   144f4:	mov	r6, r2
   144f8:	mov	r8, r3
   144fc:	bl	10e70 <__errno_location@plt>
   14500:	mov	r5, #0
   14504:	mov	r2, r6
   14508:	mov	r1, r7
   1450c:	str	r5, [r0]
   14510:	mov	sl, r0
   14514:	mov	r0, r4
   14518:	bl	10ec4 <strtoimax@plt>
   1451c:	ldr	r6, [r7]
   14520:	cmp	r4, r6
   14524:	strd	r0, [sp, #8]
   14528:	bne	1458c <__assert_fail@plt+0x362c>
   1452c:	cmp	r9, r5
   14530:	beq	147a4 <__assert_fail@plt+0x3844>
   14534:	ldrb	r1, [r6]
   14538:	cmp	r1, r5
   1453c:	beq	147a4 <__assert_fail@plt+0x3844>
   14540:	mov	r0, r9
   14544:	bl	10e64 <strchr@plt>
   14548:	cmp	r0, r5
   1454c:	beq	147a4 <__assert_fail@plt+0x3844>
   14550:	mov	r2, #1
   14554:	mov	r3, #0
   14558:	strd	r2, [sp, #8]
   1455c:	ldrb	r4, [r6]
   14560:	cmp	r4, #0
   14564:	beq	146a4 <__assert_fail@plt+0x3744>
   14568:	mov	r1, r4
   1456c:	mov	r0, r9
   14570:	bl	10e64 <strchr@plt>
   14574:	cmp	r0, #0
   14578:	bne	145bc <__assert_fail@plt+0x365c>
   1457c:	ldrd	r2, [sp, #8]
   14580:	orr	r5, r5, #2
   14584:	strd	r2, [r8]
   14588:	b	145b0 <__assert_fail@plt+0x3650>
   1458c:	ldr	r5, [sl]
   14590:	cmp	r5, #0
   14594:	beq	145a4 <__assert_fail@plt+0x3644>
   14598:	cmp	r5, #34	; 0x22
   1459c:	bne	147a4 <__assert_fail@plt+0x3844>
   145a0:	mov	r5, #1
   145a4:	cmp	r9, #0
   145a8:	bne	1455c <__assert_fail@plt+0x35fc>
   145ac:	strd	r0, [r8]
   145b0:	mov	r0, r5
   145b4:	add	sp, sp, #16
   145b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   145bc:	cmp	r4, #84	; 0x54
   145c0:	beq	14614 <__assert_fail@plt+0x36b4>
   145c4:	bhi	145fc <__assert_fail@plt+0x369c>
   145c8:	cmp	r4, #75	; 0x4b
   145cc:	beq	14614 <__assert_fail@plt+0x36b4>
   145d0:	bhi	145ec <__assert_fail@plt+0x368c>
   145d4:	cmp	r4, #69	; 0x45
   145d8:	beq	14614 <__assert_fail@plt+0x36b4>
   145dc:	cmp	r4, #71	; 0x47
   145e0:	beq	14614 <__assert_fail@plt+0x36b4>
   145e4:	mov	r6, #1
   145e8:	b	146d8 <__assert_fail@plt+0x3778>
   145ec:	cmp	r4, #77	; 0x4d
   145f0:	beq	14614 <__assert_fail@plt+0x36b4>
   145f4:	cmp	r4, #80	; 0x50
   145f8:	b	145e0 <__assert_fail@plt+0x3680>
   145fc:	cmp	r4, #103	; 0x67
   14600:	beq	14614 <__assert_fail@plt+0x36b4>
   14604:	bhi	146b0 <__assert_fail@plt+0x3750>
   14608:	sub	r3, r4, #89	; 0x59
   1460c:	cmp	r3, #1
   14610:	bhi	145e4 <__assert_fail@plt+0x3684>
   14614:	mov	r1, #48	; 0x30
   14618:	mov	r0, r9
   1461c:	bl	10e64 <strchr@plt>
   14620:	cmp	r0, #0
   14624:	beq	145e4 <__assert_fail@plt+0x3684>
   14628:	ldrb	r3, [r6, #1]
   1462c:	cmp	r3, #68	; 0x44
   14630:	beq	14644 <__assert_fail@plt+0x36e4>
   14634:	cmp	r3, #105	; 0x69
   14638:	beq	146c8 <__assert_fail@plt+0x3768>
   1463c:	cmp	r3, #66	; 0x42
   14640:	bne	145e4 <__assert_fail@plt+0x3684>
   14644:	mov	r6, #2
   14648:	mov	r1, #1000	; 0x3e8
   1464c:	cmp	r4, #89	; 0x59
   14650:	beq	1478c <__assert_fail@plt+0x382c>
   14654:	bhi	14700 <__assert_fail@plt+0x37a0>
   14658:	cmp	r4, #75	; 0x4b
   1465c:	beq	14740 <__assert_fail@plt+0x37e0>
   14660:	bhi	146e0 <__assert_fail@plt+0x3780>
   14664:	cmp	r4, #69	; 0x45
   14668:	beq	14768 <__assert_fail@plt+0x3808>
   1466c:	cmp	r4, #71	; 0x47
   14670:	beq	14774 <__assert_fail@plt+0x3814>
   14674:	cmp	r4, #66	; 0x42
   14678:	moveq	r1, #1024	; 0x400
   1467c:	bne	1457c <__assert_fail@plt+0x361c>
   14680:	add	r0, sp, #8
   14684:	bl	14354 <__assert_fail@plt+0x33f4>
   14688:	ldr	r3, [r7]
   1468c:	orr	r5, r5, r0
   14690:	add	r2, r3, r6
   14694:	str	r2, [r7]
   14698:	ldrb	r3, [r3, r6]
   1469c:	cmp	r3, #0
   146a0:	orrne	r5, r5, #2
   146a4:	ldrd	r2, [sp, #8]
   146a8:	strd	r2, [r8]
   146ac:	b	145b0 <__assert_fail@plt+0x3650>
   146b0:	cmp	r4, #109	; 0x6d
   146b4:	beq	14614 <__assert_fail@plt+0x36b4>
   146b8:	cmp	r4, #116	; 0x74
   146bc:	beq	14614 <__assert_fail@plt+0x36b4>
   146c0:	cmp	r4, #107	; 0x6b
   146c4:	b	145e0 <__assert_fail@plt+0x3680>
   146c8:	ldrb	r6, [r6, #2]
   146cc:	cmp	r6, #66	; 0x42
   146d0:	movne	r6, #1
   146d4:	moveq	r6, #3
   146d8:	mov	r1, #1024	; 0x400
   146dc:	b	1464c <__assert_fail@plt+0x36ec>
   146e0:	cmp	r4, #80	; 0x50
   146e4:	beq	1477c <__assert_fail@plt+0x381c>
   146e8:	cmp	r4, #84	; 0x54
   146ec:	beq	14784 <__assert_fail@plt+0x3824>
   146f0:	cmp	r4, #77	; 0x4d
   146f4:	bne	1457c <__assert_fail@plt+0x361c>
   146f8:	mov	r2, #2
   146fc:	b	1476c <__assert_fail@plt+0x380c>
   14700:	cmp	r4, #103	; 0x67
   14704:	beq	14774 <__assert_fail@plt+0x3814>
   14708:	bhi	1472c <__assert_fail@plt+0x37cc>
   1470c:	cmp	r4, #98	; 0x62
   14710:	beq	14760 <__assert_fail@plt+0x3800>
   14714:	cmp	r4, #99	; 0x63
   14718:	beq	1479c <__assert_fail@plt+0x383c>
   1471c:	cmp	r4, #90	; 0x5a
   14720:	bne	1457c <__assert_fail@plt+0x361c>
   14724:	mov	r2, #7
   14728:	b	1476c <__assert_fail@plt+0x380c>
   1472c:	cmp	r4, #109	; 0x6d
   14730:	beq	146f8 <__assert_fail@plt+0x3798>
   14734:	bhi	14748 <__assert_fail@plt+0x37e8>
   14738:	cmp	r4, #107	; 0x6b
   1473c:	bne	1457c <__assert_fail@plt+0x361c>
   14740:	mov	r2, #1
   14744:	b	1476c <__assert_fail@plt+0x380c>
   14748:	cmp	r4, #116	; 0x74
   1474c:	beq	14784 <__assert_fail@plt+0x3824>
   14750:	cmp	r4, #119	; 0x77
   14754:	moveq	r1, #2
   14758:	beq	14680 <__assert_fail@plt+0x3720>
   1475c:	b	1457c <__assert_fail@plt+0x361c>
   14760:	mov	r1, #512	; 0x200
   14764:	b	14680 <__assert_fail@plt+0x3720>
   14768:	mov	r2, #6
   1476c:	add	r0, sp, #8
   14770:	b	14794 <__assert_fail@plt+0x3834>
   14774:	mov	r2, #3
   14778:	b	1476c <__assert_fail@plt+0x380c>
   1477c:	mov	r2, #5
   14780:	b	1476c <__assert_fail@plt+0x380c>
   14784:	mov	r2, #4
   14788:	b	1476c <__assert_fail@plt+0x380c>
   1478c:	mov	r2, #8
   14790:	add	r0, sp, r2
   14794:	bl	14484 <__assert_fail@plt+0x3524>
   14798:	b	14688 <__assert_fail@plt+0x3728>
   1479c:	mov	r0, #0
   147a0:	b	14688 <__assert_fail@plt+0x3728>
   147a4:	mov	r5, #4
   147a8:	b	145b0 <__assert_fail@plt+0x3650>
   147ac:	andeq	r5, r1, r6, lsl sp
   147b0:	andeq	r5, r1, r1, lsr #26
   147b4:	andeq	r5, r1, pc, lsr #26
   147b8:	cmp	r1, #0
   147bc:	cmpne	r0, #0
   147c0:	moveq	r1, #1
   147c4:	moveq	r0, r1
   147c8:	umull	r2, r3, r0, r1
   147cc:	adds	r3, r3, #0
   147d0:	movne	r3, #1
   147d4:	cmp	r2, #0
   147d8:	blt	147e8 <__assert_fail@plt+0x3888>
   147dc:	cmp	r3, #0
   147e0:	bne	147e8 <__assert_fail@plt+0x3888>
   147e4:	b	10ce4 <calloc@plt>
   147e8:	push	{r4, lr}
   147ec:	bl	10e70 <__errno_location@plt>
   147f0:	mov	r3, #12
   147f4:	str	r3, [r0]
   147f8:	mov	r0, #0
   147fc:	pop	{r4, pc}
   14800:	cmp	r0, #0
   14804:	mov	r3, #0
   14808:	moveq	r0, #1
   1480c:	adds	r3, r3, #0
   14810:	movne	r3, #1
   14814:	cmp	r0, #0
   14818:	blt	14828 <__assert_fail@plt+0x38c8>
   1481c:	cmp	r3, #0
   14820:	bne	14828 <__assert_fail@plt+0x38c8>
   14824:	b	10e04 <malloc@plt>
   14828:	push	{r4, lr}
   1482c:	bl	10e70 <__errno_location@plt>
   14830:	mov	r3, #12
   14834:	str	r3, [r0]
   14838:	mov	r0, #0
   1483c:	pop	{r4, pc}
   14840:	cmp	r0, #0
   14844:	push	{r4, lr}
   14848:	mov	r4, r1
   1484c:	bne	1485c <__assert_fail@plt+0x38fc>
   14850:	mov	r0, r1
   14854:	pop	{r4, lr}
   14858:	b	14800 <__assert_fail@plt+0x38a0>
   1485c:	cmp	r1, #0
   14860:	bne	14870 <__assert_fail@plt+0x3910>
   14864:	bl	12250 <__assert_fail@plt+0x12f0>
   14868:	mov	r0, #0
   1486c:	pop	{r4, pc}
   14870:	cmp	r1, #0
   14874:	blt	14884 <__assert_fail@plt+0x3924>
   14878:	mov	r3, #0
   1487c:	cmp	r3, r3
   14880:	beq	14894 <__assert_fail@plt+0x3934>
   14884:	bl	10e70 <__errno_location@plt>
   14888:	mov	r3, #12
   1488c:	str	r3, [r0]
   14890:	b	14868 <__assert_fail@plt+0x3908>
   14894:	pop	{r4, lr}
   14898:	b	10d98 <realloc@plt>
   1489c:	push	{r4, r5, r6, lr}
   148a0:	mov	r4, r0
   148a4:	bl	10dd4 <__fpending@plt>
   148a8:	mov	r5, r0
   148ac:	mov	r0, r4
   148b0:	bl	10de0 <ferror_unlocked@plt>
   148b4:	mov	r6, r0
   148b8:	mov	r0, r4
   148bc:	bl	12158 <__assert_fail@plt+0x11f8>
   148c0:	cmp	r6, #0
   148c4:	mov	r4, r0
   148c8:	bne	148f4 <__assert_fail@plt+0x3994>
   148cc:	cmp	r0, #0
   148d0:	beq	148ec <__assert_fail@plt+0x398c>
   148d4:	cmp	r5, #0
   148d8:	bne	14904 <__assert_fail@plt+0x39a4>
   148dc:	bl	10e70 <__errno_location@plt>
   148e0:	ldr	r4, [r0]
   148e4:	subs	r4, r4, #9
   148e8:	mvnne	r4, #0
   148ec:	mov	r0, r4
   148f0:	pop	{r4, r5, r6, pc}
   148f4:	cmp	r0, #0
   148f8:	bne	14904 <__assert_fail@plt+0x39a4>
   148fc:	bl	10e70 <__errno_location@plt>
   14900:	str	r4, [r0]
   14904:	mvn	r4, #0
   14908:	b	148ec <__assert_fail@plt+0x398c>
   1490c:	push	{r4, lr}
   14910:	mov	r0, #14
   14914:	bl	10f00 <nl_langinfo@plt>
   14918:	ldr	r3, [pc, #24]	; 14938 <__assert_fail@plt+0x39d8>
   1491c:	cmp	r0, #0
   14920:	moveq	r0, r3
   14924:	ldr	r3, [pc, #16]	; 1493c <__assert_fail@plt+0x39dc>
   14928:	ldrb	r2, [r0]
   1492c:	cmp	r2, #0
   14930:	moveq	r0, r3
   14934:	pop	{r4, pc}
   14938:	andeq	r5, r1, r6, lsr #13
   1493c:	andeq	r5, r1, r5, asr sp
   14940:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14944:	subs	r5, r0, #0
   14948:	addeq	r5, sp, #4
   1494c:	mov	r0, r5
   14950:	mov	r7, r2
   14954:	mov	r6, r1
   14958:	bl	10dec <mbrtowc@plt>
   1495c:	cmp	r7, #0
   14960:	cmnne	r0, #3
   14964:	mov	r4, r0
   14968:	bls	14984 <__assert_fail@plt+0x3a24>
   1496c:	mov	r0, #0
   14970:	bl	149dc <__assert_fail@plt+0x3a7c>
   14974:	cmp	r0, #0
   14978:	moveq	r4, #1
   1497c:	ldrbeq	r3, [r6]
   14980:	streq	r3, [r5]
   14984:	mov	r0, r4
   14988:	add	sp, sp, #12
   1498c:	pop	{r4, r5, r6, r7, pc}
   14990:	push	{r4, r5, r6, lr}
   14994:	subs	r4, r2, #0
   14998:	mov	r6, r0
   1499c:	mov	r5, r1
   149a0:	beq	149b8 <__assert_fail@plt+0x3a58>
   149a4:	mov	r1, r4
   149a8:	mvn	r0, #0
   149ac:	bl	14abc <__assert_fail@plt+0x3b5c>
   149b0:	cmp	r0, r5
   149b4:	bcc	149c8 <__assert_fail@plt+0x3a68>
   149b8:	mul	r1, r5, r4
   149bc:	mov	r0, r6
   149c0:	pop	{r4, r5, r6, lr}
   149c4:	b	14840 <__assert_fail@plt+0x38e0>
   149c8:	bl	10e70 <__errno_location@plt>
   149cc:	mov	r3, #12
   149d0:	str	r3, [r0]
   149d4:	mov	r0, #0
   149d8:	pop	{r4, r5, r6, pc}
   149dc:	push	{lr}		; (str lr, [sp, #-4]!)
   149e0:	sub	sp, sp, #268	; 0x10c
   149e4:	ldr	r2, [pc, #64]	; 14a2c <__assert_fail@plt+0x3acc>
   149e8:	add	r1, sp, #4
   149ec:	bl	14a38 <__assert_fail@plt+0x3ad8>
   149f0:	cmp	r0, #0
   149f4:	movne	r0, #0
   149f8:	bne	14a24 <__assert_fail@plt+0x3ac4>
   149fc:	ldr	r1, [pc, #44]	; 14a30 <__assert_fail@plt+0x3ad0>
   14a00:	add	r0, sp, #4
   14a04:	bl	10d08 <strcmp@plt>
   14a08:	cmp	r0, #0
   14a0c:	beq	14a24 <__assert_fail@plt+0x3ac4>
   14a10:	ldr	r1, [pc, #28]	; 14a34 <__assert_fail@plt+0x3ad4>
   14a14:	add	r0, sp, #4
   14a18:	bl	10d08 <strcmp@plt>
   14a1c:	adds	r0, r0, #0
   14a20:	movne	r0, #1
   14a24:	add	sp, sp, #268	; 0x10c
   14a28:	pop	{pc}		; (ldr pc, [sp], #4)
   14a2c:	andeq	r0, r0, r1, lsl #2
   14a30:	andeq	r5, r1, fp, asr sp
   14a34:	andeq	r5, r1, sp, asr sp
   14a38:	push	{r4, r5, r6, lr}
   14a3c:	mov	r5, r1
   14a40:	mov	r1, #0
   14a44:	mov	r4, r2
   14a48:	bl	10ee8 <setlocale@plt>
   14a4c:	subs	r6, r0, #0
   14a50:	bne	14a64 <__assert_fail@plt+0x3b04>
   14a54:	cmp	r4, #0
   14a58:	strbne	r6, [r5]
   14a5c:	mov	r0, #22
   14a60:	pop	{r4, r5, r6, pc}
   14a64:	bl	10e58 <strlen@plt>
   14a68:	cmp	r4, r0
   14a6c:	bls	14a88 <__assert_fail@plt+0x3b28>
   14a70:	add	r2, r0, #1
   14a74:	mov	r1, r6
   14a78:	mov	r0, r5
   14a7c:	bl	10d50 <memcpy@plt>
   14a80:	mov	r0, #0
   14a84:	pop	{r4, r5, r6, pc}
   14a88:	cmp	r4, #0
   14a8c:	beq	14aac <__assert_fail@plt+0x3b4c>
   14a90:	sub	r4, r4, #1
   14a94:	mov	r2, r4
   14a98:	mov	r1, r6
   14a9c:	mov	r0, r5
   14aa0:	bl	10d50 <memcpy@plt>
   14aa4:	mov	r3, #0
   14aa8:	strb	r3, [r5, r4]
   14aac:	mov	r0, #34	; 0x22
   14ab0:	pop	{r4, r5, r6, pc}
   14ab4:	mov	r1, #0
   14ab8:	b	10ee8 <setlocale@plt>
   14abc:	subs	r2, r1, #1
   14ac0:	bxeq	lr
   14ac4:	bcc	14c9c <__assert_fail@plt+0x3d3c>
   14ac8:	cmp	r0, r1
   14acc:	bls	14c80 <__assert_fail@plt+0x3d20>
   14ad0:	tst	r1, r2
   14ad4:	beq	14c8c <__assert_fail@plt+0x3d2c>
   14ad8:	clz	r3, r0
   14adc:	clz	r2, r1
   14ae0:	sub	r3, r2, r3
   14ae4:	rsbs	r3, r3, #31
   14ae8:	addne	r3, r3, r3, lsl #1
   14aec:	mov	r2, #0
   14af0:	addne	pc, pc, r3, lsl #2
   14af4:	nop			; (mov r0, r0)
   14af8:	cmp	r0, r1, lsl #31
   14afc:	adc	r2, r2, r2
   14b00:	subcs	r0, r0, r1, lsl #31
   14b04:	cmp	r0, r1, lsl #30
   14b08:	adc	r2, r2, r2
   14b0c:	subcs	r0, r0, r1, lsl #30
   14b10:	cmp	r0, r1, lsl #29
   14b14:	adc	r2, r2, r2
   14b18:	subcs	r0, r0, r1, lsl #29
   14b1c:	cmp	r0, r1, lsl #28
   14b20:	adc	r2, r2, r2
   14b24:	subcs	r0, r0, r1, lsl #28
   14b28:	cmp	r0, r1, lsl #27
   14b2c:	adc	r2, r2, r2
   14b30:	subcs	r0, r0, r1, lsl #27
   14b34:	cmp	r0, r1, lsl #26
   14b38:	adc	r2, r2, r2
   14b3c:	subcs	r0, r0, r1, lsl #26
   14b40:	cmp	r0, r1, lsl #25
   14b44:	adc	r2, r2, r2
   14b48:	subcs	r0, r0, r1, lsl #25
   14b4c:	cmp	r0, r1, lsl #24
   14b50:	adc	r2, r2, r2
   14b54:	subcs	r0, r0, r1, lsl #24
   14b58:	cmp	r0, r1, lsl #23
   14b5c:	adc	r2, r2, r2
   14b60:	subcs	r0, r0, r1, lsl #23
   14b64:	cmp	r0, r1, lsl #22
   14b68:	adc	r2, r2, r2
   14b6c:	subcs	r0, r0, r1, lsl #22
   14b70:	cmp	r0, r1, lsl #21
   14b74:	adc	r2, r2, r2
   14b78:	subcs	r0, r0, r1, lsl #21
   14b7c:	cmp	r0, r1, lsl #20
   14b80:	adc	r2, r2, r2
   14b84:	subcs	r0, r0, r1, lsl #20
   14b88:	cmp	r0, r1, lsl #19
   14b8c:	adc	r2, r2, r2
   14b90:	subcs	r0, r0, r1, lsl #19
   14b94:	cmp	r0, r1, lsl #18
   14b98:	adc	r2, r2, r2
   14b9c:	subcs	r0, r0, r1, lsl #18
   14ba0:	cmp	r0, r1, lsl #17
   14ba4:	adc	r2, r2, r2
   14ba8:	subcs	r0, r0, r1, lsl #17
   14bac:	cmp	r0, r1, lsl #16
   14bb0:	adc	r2, r2, r2
   14bb4:	subcs	r0, r0, r1, lsl #16
   14bb8:	cmp	r0, r1, lsl #15
   14bbc:	adc	r2, r2, r2
   14bc0:	subcs	r0, r0, r1, lsl #15
   14bc4:	cmp	r0, r1, lsl #14
   14bc8:	adc	r2, r2, r2
   14bcc:	subcs	r0, r0, r1, lsl #14
   14bd0:	cmp	r0, r1, lsl #13
   14bd4:	adc	r2, r2, r2
   14bd8:	subcs	r0, r0, r1, lsl #13
   14bdc:	cmp	r0, r1, lsl #12
   14be0:	adc	r2, r2, r2
   14be4:	subcs	r0, r0, r1, lsl #12
   14be8:	cmp	r0, r1, lsl #11
   14bec:	adc	r2, r2, r2
   14bf0:	subcs	r0, r0, r1, lsl #11
   14bf4:	cmp	r0, r1, lsl #10
   14bf8:	adc	r2, r2, r2
   14bfc:	subcs	r0, r0, r1, lsl #10
   14c00:	cmp	r0, r1, lsl #9
   14c04:	adc	r2, r2, r2
   14c08:	subcs	r0, r0, r1, lsl #9
   14c0c:	cmp	r0, r1, lsl #8
   14c10:	adc	r2, r2, r2
   14c14:	subcs	r0, r0, r1, lsl #8
   14c18:	cmp	r0, r1, lsl #7
   14c1c:	adc	r2, r2, r2
   14c20:	subcs	r0, r0, r1, lsl #7
   14c24:	cmp	r0, r1, lsl #6
   14c28:	adc	r2, r2, r2
   14c2c:	subcs	r0, r0, r1, lsl #6
   14c30:	cmp	r0, r1, lsl #5
   14c34:	adc	r2, r2, r2
   14c38:	subcs	r0, r0, r1, lsl #5
   14c3c:	cmp	r0, r1, lsl #4
   14c40:	adc	r2, r2, r2
   14c44:	subcs	r0, r0, r1, lsl #4
   14c48:	cmp	r0, r1, lsl #3
   14c4c:	adc	r2, r2, r2
   14c50:	subcs	r0, r0, r1, lsl #3
   14c54:	cmp	r0, r1, lsl #2
   14c58:	adc	r2, r2, r2
   14c5c:	subcs	r0, r0, r1, lsl #2
   14c60:	cmp	r0, r1, lsl #1
   14c64:	adc	r2, r2, r2
   14c68:	subcs	r0, r0, r1, lsl #1
   14c6c:	cmp	r0, r1
   14c70:	adc	r2, r2, r2
   14c74:	subcs	r0, r0, r1
   14c78:	mov	r0, r2
   14c7c:	bx	lr
   14c80:	moveq	r0, #1
   14c84:	movne	r0, #0
   14c88:	bx	lr
   14c8c:	clz	r2, r1
   14c90:	rsb	r2, r2, #31
   14c94:	lsr	r0, r0, r2
   14c98:	bx	lr
   14c9c:	cmp	r0, #0
   14ca0:	mvnne	r0, #0
   14ca4:	b	14fdc <__assert_fail@plt+0x407c>
   14ca8:	cmp	r1, #0
   14cac:	beq	14c9c <__assert_fail@plt+0x3d3c>
   14cb0:	push	{r0, r1, lr}
   14cb4:	bl	14abc <__assert_fail@plt+0x3b5c>
   14cb8:	pop	{r1, r2, lr}
   14cbc:	mul	r3, r2, r0
   14cc0:	sub	r1, r1, r3
   14cc4:	bx	lr
   14cc8:	cmp	r1, #0
   14ccc:	beq	14ed8 <__assert_fail@plt+0x3f78>
   14cd0:	eor	ip, r0, r1
   14cd4:	rsbmi	r1, r1, #0
   14cd8:	subs	r2, r1, #1
   14cdc:	beq	14ea4 <__assert_fail@plt+0x3f44>
   14ce0:	movs	r3, r0
   14ce4:	rsbmi	r3, r0, #0
   14ce8:	cmp	r3, r1
   14cec:	bls	14eb0 <__assert_fail@plt+0x3f50>
   14cf0:	tst	r1, r2
   14cf4:	beq	14ec0 <__assert_fail@plt+0x3f60>
   14cf8:	clz	r2, r3
   14cfc:	clz	r0, r1
   14d00:	sub	r2, r0, r2
   14d04:	rsbs	r2, r2, #31
   14d08:	addne	r2, r2, r2, lsl #1
   14d0c:	mov	r0, #0
   14d10:	addne	pc, pc, r2, lsl #2
   14d14:	nop			; (mov r0, r0)
   14d18:	cmp	r3, r1, lsl #31
   14d1c:	adc	r0, r0, r0
   14d20:	subcs	r3, r3, r1, lsl #31
   14d24:	cmp	r3, r1, lsl #30
   14d28:	adc	r0, r0, r0
   14d2c:	subcs	r3, r3, r1, lsl #30
   14d30:	cmp	r3, r1, lsl #29
   14d34:	adc	r0, r0, r0
   14d38:	subcs	r3, r3, r1, lsl #29
   14d3c:	cmp	r3, r1, lsl #28
   14d40:	adc	r0, r0, r0
   14d44:	subcs	r3, r3, r1, lsl #28
   14d48:	cmp	r3, r1, lsl #27
   14d4c:	adc	r0, r0, r0
   14d50:	subcs	r3, r3, r1, lsl #27
   14d54:	cmp	r3, r1, lsl #26
   14d58:	adc	r0, r0, r0
   14d5c:	subcs	r3, r3, r1, lsl #26
   14d60:	cmp	r3, r1, lsl #25
   14d64:	adc	r0, r0, r0
   14d68:	subcs	r3, r3, r1, lsl #25
   14d6c:	cmp	r3, r1, lsl #24
   14d70:	adc	r0, r0, r0
   14d74:	subcs	r3, r3, r1, lsl #24
   14d78:	cmp	r3, r1, lsl #23
   14d7c:	adc	r0, r0, r0
   14d80:	subcs	r3, r3, r1, lsl #23
   14d84:	cmp	r3, r1, lsl #22
   14d88:	adc	r0, r0, r0
   14d8c:	subcs	r3, r3, r1, lsl #22
   14d90:	cmp	r3, r1, lsl #21
   14d94:	adc	r0, r0, r0
   14d98:	subcs	r3, r3, r1, lsl #21
   14d9c:	cmp	r3, r1, lsl #20
   14da0:	adc	r0, r0, r0
   14da4:	subcs	r3, r3, r1, lsl #20
   14da8:	cmp	r3, r1, lsl #19
   14dac:	adc	r0, r0, r0
   14db0:	subcs	r3, r3, r1, lsl #19
   14db4:	cmp	r3, r1, lsl #18
   14db8:	adc	r0, r0, r0
   14dbc:	subcs	r3, r3, r1, lsl #18
   14dc0:	cmp	r3, r1, lsl #17
   14dc4:	adc	r0, r0, r0
   14dc8:	subcs	r3, r3, r1, lsl #17
   14dcc:	cmp	r3, r1, lsl #16
   14dd0:	adc	r0, r0, r0
   14dd4:	subcs	r3, r3, r1, lsl #16
   14dd8:	cmp	r3, r1, lsl #15
   14ddc:	adc	r0, r0, r0
   14de0:	subcs	r3, r3, r1, lsl #15
   14de4:	cmp	r3, r1, lsl #14
   14de8:	adc	r0, r0, r0
   14dec:	subcs	r3, r3, r1, lsl #14
   14df0:	cmp	r3, r1, lsl #13
   14df4:	adc	r0, r0, r0
   14df8:	subcs	r3, r3, r1, lsl #13
   14dfc:	cmp	r3, r1, lsl #12
   14e00:	adc	r0, r0, r0
   14e04:	subcs	r3, r3, r1, lsl #12
   14e08:	cmp	r3, r1, lsl #11
   14e0c:	adc	r0, r0, r0
   14e10:	subcs	r3, r3, r1, lsl #11
   14e14:	cmp	r3, r1, lsl #10
   14e18:	adc	r0, r0, r0
   14e1c:	subcs	r3, r3, r1, lsl #10
   14e20:	cmp	r3, r1, lsl #9
   14e24:	adc	r0, r0, r0
   14e28:	subcs	r3, r3, r1, lsl #9
   14e2c:	cmp	r3, r1, lsl #8
   14e30:	adc	r0, r0, r0
   14e34:	subcs	r3, r3, r1, lsl #8
   14e38:	cmp	r3, r1, lsl #7
   14e3c:	adc	r0, r0, r0
   14e40:	subcs	r3, r3, r1, lsl #7
   14e44:	cmp	r3, r1, lsl #6
   14e48:	adc	r0, r0, r0
   14e4c:	subcs	r3, r3, r1, lsl #6
   14e50:	cmp	r3, r1, lsl #5
   14e54:	adc	r0, r0, r0
   14e58:	subcs	r3, r3, r1, lsl #5
   14e5c:	cmp	r3, r1, lsl #4
   14e60:	adc	r0, r0, r0
   14e64:	subcs	r3, r3, r1, lsl #4
   14e68:	cmp	r3, r1, lsl #3
   14e6c:	adc	r0, r0, r0
   14e70:	subcs	r3, r3, r1, lsl #3
   14e74:	cmp	r3, r1, lsl #2
   14e78:	adc	r0, r0, r0
   14e7c:	subcs	r3, r3, r1, lsl #2
   14e80:	cmp	r3, r1, lsl #1
   14e84:	adc	r0, r0, r0
   14e88:	subcs	r3, r3, r1, lsl #1
   14e8c:	cmp	r3, r1
   14e90:	adc	r0, r0, r0
   14e94:	subcs	r3, r3, r1
   14e98:	cmp	ip, #0
   14e9c:	rsbmi	r0, r0, #0
   14ea0:	bx	lr
   14ea4:	teq	ip, r0
   14ea8:	rsbmi	r0, r0, #0
   14eac:	bx	lr
   14eb0:	movcc	r0, #0
   14eb4:	asreq	r0, ip, #31
   14eb8:	orreq	r0, r0, #1
   14ebc:	bx	lr
   14ec0:	clz	r2, r1
   14ec4:	rsb	r2, r2, #31
   14ec8:	cmp	ip, #0
   14ecc:	lsr	r0, r3, r2
   14ed0:	rsbmi	r0, r0, #0
   14ed4:	bx	lr
   14ed8:	cmp	r0, #0
   14edc:	mvngt	r0, #-2147483648	; 0x80000000
   14ee0:	movlt	r0, #-2147483648	; 0x80000000
   14ee4:	b	14fdc <__assert_fail@plt+0x407c>
   14ee8:	cmp	r1, #0
   14eec:	beq	14ed8 <__assert_fail@plt+0x3f78>
   14ef0:	push	{r0, r1, lr}
   14ef4:	bl	14cd0 <__assert_fail@plt+0x3d70>
   14ef8:	pop	{r1, r2, lr}
   14efc:	mul	r3, r2, r0
   14f00:	sub	r1, r1, r3
   14f04:	bx	lr
   14f08:	cmp	r3, #0
   14f0c:	cmpeq	r2, #0
   14f10:	bne	14f34 <__assert_fail@plt+0x3fd4>
   14f14:	cmp	r1, #0
   14f18:	movlt	r1, #-2147483648	; 0x80000000
   14f1c:	movlt	r0, #0
   14f20:	blt	14f30 <__assert_fail@plt+0x3fd0>
   14f24:	cmpeq	r0, #0
   14f28:	mvnne	r1, #-2147483648	; 0x80000000
   14f2c:	mvnne	r0, #0
   14f30:	b	14fdc <__assert_fail@plt+0x407c>
   14f34:	sub	sp, sp, #8
   14f38:	push	{sp, lr}
   14f3c:	cmp	r1, #0
   14f40:	blt	14f60 <__assert_fail@plt+0x4000>
   14f44:	cmp	r3, #0
   14f48:	blt	14f94 <__assert_fail@plt+0x4034>
   14f4c:	bl	14fec <__assert_fail@plt+0x408c>
   14f50:	ldr	lr, [sp, #4]
   14f54:	add	sp, sp, #8
   14f58:	pop	{r2, r3}
   14f5c:	bx	lr
   14f60:	rsbs	r0, r0, #0
   14f64:	sbc	r1, r1, r1, lsl #1
   14f68:	cmp	r3, #0
   14f6c:	blt	14fb8 <__assert_fail@plt+0x4058>
   14f70:	bl	14fec <__assert_fail@plt+0x408c>
   14f74:	ldr	lr, [sp, #4]
   14f78:	add	sp, sp, #8
   14f7c:	pop	{r2, r3}
   14f80:	rsbs	r0, r0, #0
   14f84:	sbc	r1, r1, r1, lsl #1
   14f88:	rsbs	r2, r2, #0
   14f8c:	sbc	r3, r3, r3, lsl #1
   14f90:	bx	lr
   14f94:	rsbs	r2, r2, #0
   14f98:	sbc	r3, r3, r3, lsl #1
   14f9c:	bl	14fec <__assert_fail@plt+0x408c>
   14fa0:	ldr	lr, [sp, #4]
   14fa4:	add	sp, sp, #8
   14fa8:	pop	{r2, r3}
   14fac:	rsbs	r0, r0, #0
   14fb0:	sbc	r1, r1, r1, lsl #1
   14fb4:	bx	lr
   14fb8:	rsbs	r2, r2, #0
   14fbc:	sbc	r3, r3, r3, lsl #1
   14fc0:	bl	14fec <__assert_fail@plt+0x408c>
   14fc4:	ldr	lr, [sp, #4]
   14fc8:	add	sp, sp, #8
   14fcc:	pop	{r2, r3}
   14fd0:	rsbs	r2, r2, #0
   14fd4:	sbc	r3, r3, r3, lsl #1
   14fd8:	bx	lr
   14fdc:	push	{r1, lr}
   14fe0:	mov	r0, #8
   14fe4:	bl	10cfc <raise@plt>
   14fe8:	pop	{r1, pc}
   14fec:	cmp	r1, r3
   14ff0:	push	{r4, r5, r6, r7, r8, r9, lr}
   14ff4:	cmpeq	r0, r2
   14ff8:	mov	r4, r0
   14ffc:	mov	r5, r1
   15000:	ldr	r9, [sp, #28]
   15004:	movcc	r0, #0
   15008:	movcc	r1, #0
   1500c:	bcc	15104 <__assert_fail@plt+0x41a4>
   15010:	cmp	r3, #0
   15014:	clzeq	ip, r2
   15018:	clzne	ip, r3
   1501c:	addeq	ip, ip, #32
   15020:	cmp	r5, #0
   15024:	clzeq	r1, r4
   15028:	addeq	r1, r1, #32
   1502c:	clzne	r1, r5
   15030:	sub	ip, ip, r1
   15034:	sub	lr, ip, #32
   15038:	lsl	r7, r3, ip
   1503c:	rsb	r8, ip, #32
   15040:	orr	r7, r7, r2, lsl lr
   15044:	orr	r7, r7, r2, lsr r8
   15048:	lsl	r6, r2, ip
   1504c:	cmp	r5, r7
   15050:	cmpeq	r4, r6
   15054:	movcc	r0, #0
   15058:	movcc	r1, #0
   1505c:	bcc	15078 <__assert_fail@plt+0x4118>
   15060:	mov	r3, #1
   15064:	subs	r4, r4, r6
   15068:	lsl	r1, r3, lr
   1506c:	lsl	r0, r3, ip
   15070:	orr	r1, r1, r3, lsr r8
   15074:	sbc	r5, r5, r7
   15078:	cmp	ip, #0
   1507c:	beq	15104 <__assert_fail@plt+0x41a4>
   15080:	lsrs	r3, r7, #1
   15084:	rrx	r2, r6
   15088:	mov	r6, ip
   1508c:	b	150b0 <__assert_fail@plt+0x4150>
   15090:	subs	r4, r4, r2
   15094:	sbc	r5, r5, r3
   15098:	adds	r4, r4, r4
   1509c:	adc	r5, r5, r5
   150a0:	adds	r4, r4, #1
   150a4:	adc	r5, r5, #0
   150a8:	subs	r6, r6, #1
   150ac:	beq	150cc <__assert_fail@plt+0x416c>
   150b0:	cmp	r5, r3
   150b4:	cmpeq	r4, r2
   150b8:	bcs	15090 <__assert_fail@plt+0x4130>
   150bc:	adds	r4, r4, r4
   150c0:	adc	r5, r5, r5
   150c4:	subs	r6, r6, #1
   150c8:	bne	150b0 <__assert_fail@plt+0x4150>
   150cc:	lsr	r6, r4, ip
   150d0:	lsr	r7, r5, ip
   150d4:	orr	r6, r6, r5, lsl r8
   150d8:	adds	r2, r0, r4
   150dc:	orr	r6, r6, r5, lsr lr
   150e0:	adc	r3, r1, r5
   150e4:	lsl	r1, r7, ip
   150e8:	orr	r1, r1, r6, lsl lr
   150ec:	lsl	r0, r6, ip
   150f0:	orr	r1, r1, r6, lsr r8
   150f4:	subs	r0, r2, r0
   150f8:	mov	r4, r6
   150fc:	mov	r5, r7
   15100:	sbc	r1, r3, r1
   15104:	cmp	r9, #0
   15108:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1510c:	strd	r4, [r9]
   15110:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15114:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15118:	mov	r7, r0
   1511c:	ldr	r6, [pc, #72]	; 1516c <__assert_fail@plt+0x420c>
   15120:	ldr	r5, [pc, #72]	; 15170 <__assert_fail@plt+0x4210>
   15124:	add	r6, pc, r6
   15128:	add	r5, pc, r5
   1512c:	sub	r6, r6, r5
   15130:	mov	r8, r1
   15134:	mov	r9, r2
   15138:	bl	10cc4 <calloc@plt-0x20>
   1513c:	asrs	r6, r6, #2
   15140:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15144:	mov	r4, #0
   15148:	add	r4, r4, #1
   1514c:	ldr	r3, [r5], #4
   15150:	mov	r2, r9
   15154:	mov	r1, r8
   15158:	mov	r0, r7
   1515c:	blx	r3
   15160:	cmp	r6, r4
   15164:	bne	15148 <__assert_fail@plt+0x41e8>
   15168:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1516c:	andeq	r0, r1, r4, ror #27
   15170:	ldrdeq	r0, [r1], -ip
   15174:	bx	lr
   15178:	ldr	r3, [pc, #12]	; 1518c <__assert_fail@plt+0x422c>
   1517c:	mov	r1, #0
   15180:	add	r3, pc, r3
   15184:	ldr	r2, [r3]
   15188:	b	10e7c <__cxa_atexit@plt>
   1518c:	andeq	r0, r1, r4, ror #30

Disassembly of section .fini:

00015190 <.fini>:
   15190:	push	{r3, lr}
   15194:	pop	{r3, pc}
