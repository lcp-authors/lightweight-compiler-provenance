
../repos/coreutils/src/du:     file format elf32-littlearm


Disassembly of section .init:

00011674 <.init>:
   11674:	push	{r3, lr}
   11678:	bl	11bec <__assert_fail@plt+0x48>
   1167c:	pop	{r3, pc}

Disassembly of section .plt:

00011680 <pthread_mutex_unlock@plt-0x14>:
   11680:	push	{lr}		; (str lr, [sp, #-4]!)
   11684:	ldr	lr, [pc, #4]	; 11690 <pthread_mutex_unlock@plt-0x4>
   11688:	add	lr, pc, lr
   1168c:	ldr	pc, [lr, #8]!
   11690:	andeq	r1, r3, r0, ror r9

00011694 <pthread_mutex_unlock@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #200704	; 0x31000
   1169c:	ldr	pc, [ip, #2416]!	; 0x970

000116a0 <fstatfs64@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #200704	; 0x31000
   116a8:	ldr	pc, [ip, #2408]!	; 0x968

000116ac <calloc@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #200704	; 0x31000
   116b4:	ldr	pc, [ip, #2400]!	; 0x960

000116b8 <fputs_unlocked@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #200704	; 0x31000
   116c0:	ldr	pc, [ip, #2392]!	; 0x958

000116c4 <wctype@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #200704	; 0x31000
   116cc:	ldr	pc, [ip, #2384]!	; 0x950

000116d0 <raise@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #200704	; 0x31000
   116d8:	ldr	pc, [ip, #2376]!	; 0x948

000116dc <wcrtomb@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #200704	; 0x31000
   116e4:	ldr	pc, [ip, #2368]!	; 0x940

000116e8 <gmtime_r@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #200704	; 0x31000
   116f0:	ldr	pc, [ip, #2360]!	; 0x938

000116f4 <__getdelim@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #200704	; 0x31000
   116fc:	ldr	pc, [ip, #2352]!	; 0x930

00011700 <iswctype@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #200704	; 0x31000
   11708:	ldr	pc, [ip, #2344]!	; 0x928

0001170c <strcmp@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #200704	; 0x31000
   11714:	ldr	pc, [ip, #2336]!	; 0x920

00011718 <pthread_mutex_destroy@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #200704	; 0x31000
   11720:	ldr	pc, [ip, #2328]!	; 0x918

00011724 <mktime@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #200704	; 0x31000
   1172c:	ldr	pc, [ip, #2320]!	; 0x910

00011730 <fflush@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #200704	; 0x31000
   11738:	ldr	pc, [ip, #2312]!	; 0x908

0001173c <wcwidth@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #200704	; 0x31000
   11744:	ldr	pc, [ip, #2304]!	; 0x900

00011748 <memmove@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #200704	; 0x31000
   11750:	ldr	pc, [ip, #2296]!	; 0x8f8

00011754 <free@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #200704	; 0x31000
   1175c:	ldr	pc, [ip, #2288]!	; 0x8f0

00011760 <pthread_mutex_lock@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #200704	; 0x31000
   11768:	ldr	pc, [ip, #2280]!	; 0x8e8

0001176c <ferror@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #200704	; 0x31000
   11774:	ldr	pc, [ip, #2272]!	; 0x8e0

00011778 <_exit@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #200704	; 0x31000
   11780:	ldr	pc, [ip, #2264]!	; 0x8d8

00011784 <memcpy@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #200704	; 0x31000
   1178c:	ldr	pc, [ip, #2256]!	; 0x8d0

00011790 <pthread_mutex_init@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #200704	; 0x31000
   11798:	ldr	pc, [ip, #2248]!	; 0x8c8

0001179c <__strtoull_internal@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #200704	; 0x31000
   117a4:	ldr	pc, [ip, #2240]!	; 0x8c0

000117a8 <towlower@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #200704	; 0x31000
   117b0:	ldr	pc, [ip, #2232]!	; 0x8b8

000117b4 <mbsinit@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #200704	; 0x31000
   117bc:	ldr	pc, [ip, #2224]!	; 0x8b0

000117c0 <memcmp@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #200704	; 0x31000
   117c8:	ldr	pc, [ip, #2216]!	; 0x8a8

000117cc <fputc_unlocked@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #200704	; 0x31000
   117d4:	ldr	pc, [ip, #2208]!	; 0x8a0

000117d8 <dcgettext@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #200704	; 0x31000
   117e0:	ldr	pc, [ip, #2200]!	; 0x898

000117e4 <dup2@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #200704	; 0x31000
   117ec:	ldr	pc, [ip, #2192]!	; 0x890

000117f0 <realloc@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #200704	; 0x31000
   117f8:	ldr	pc, [ip, #2184]!	; 0x888

000117fc <localtime_r@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #200704	; 0x31000
   11804:	ldr	pc, [ip, #2176]!	; 0x880

00011808 <textdomain@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #200704	; 0x31000
   11810:	ldr	pc, [ip, #2168]!	; 0x878

00011814 <iswcntrl@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #200704	; 0x31000
   1181c:	ldr	pc, [ip, #2160]!	; 0x870

00011820 <__fxstatat64@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #200704	; 0x31000
   11828:	ldr	pc, [ip, #2152]!	; 0x868

0001182c <fflush_unlocked@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #200704	; 0x31000
   11834:	ldr	pc, [ip, #2144]!	; 0x860

00011838 <iswprint@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #200704	; 0x31000
   11840:	ldr	pc, [ip, #2136]!	; 0x858

00011844 <tzset@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #200704	; 0x31000
   1184c:	ldr	pc, [ip, #2128]!	; 0x850

00011850 <__fxstat64@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #200704	; 0x31000
   11858:	ldr	pc, [ip, #2120]!	; 0x848

0001185c <__memcpy_chk@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #200704	; 0x31000
   11864:	ldr	pc, [ip, #2112]!	; 0x840

00011868 <fwrite@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #200704	; 0x31000
   11870:	ldr	pc, [ip, #2104]!	; 0x838

00011874 <lseek64@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #200704	; 0x31000
   1187c:	ldr	pc, [ip, #2096]!	; 0x830

00011880 <__ctype_get_mb_cur_max@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #200704	; 0x31000
   11888:	ldr	pc, [ip, #2088]!	; 0x828

0001188c <hasmntopt@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #200704	; 0x31000
   11894:	ldr	pc, [ip, #2080]!	; 0x820

00011898 <strcpy@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #200704	; 0x31000
   118a0:	ldr	pc, [ip, #2072]!	; 0x818

000118a4 <__fpending@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #200704	; 0x31000
   118ac:	ldr	pc, [ip, #2064]!	; 0x810

000118b0 <mbrtowc@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #200704	; 0x31000
   118b8:	ldr	pc, [ip, #2056]!	; 0x808

000118bc <error@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #200704	; 0x31000
   118c4:	ldr	pc, [ip, #2048]!	; 0x800

000118c8 <getmntent@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #200704	; 0x31000
   118d0:	ldr	pc, [ip, #2040]!	; 0x7f8

000118d4 <fnmatch@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #200704	; 0x31000
   118dc:	ldr	pc, [ip, #2032]!	; 0x7f0

000118e0 <open64@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #200704	; 0x31000
   118e8:	ldr	pc, [ip, #2024]!	; 0x7e8

000118ec <getenv@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #200704	; 0x31000
   118f4:	ldr	pc, [ip, #2016]!	; 0x7e0

000118f8 <malloc@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #200704	; 0x31000
   11900:	ldr	pc, [ip, #2008]!	; 0x7d8

00011904 <__libc_start_main@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #200704	; 0x31000
   1190c:	ldr	pc, [ip, #2000]!	; 0x7d0

00011910 <strftime@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #200704	; 0x31000
   11918:	ldr	pc, [ip, #1992]!	; 0x7c8

0001191c <__freading@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #200704	; 0x31000
   11924:	ldr	pc, [ip, #1984]!	; 0x7c0

00011928 <__ctype_tolower_loc@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #200704	; 0x31000
   11930:	ldr	pc, [ip, #1976]!	; 0x7b8

00011934 <__ctype_toupper_loc@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #200704	; 0x31000
   1193c:	ldr	pc, [ip, #1968]!	; 0x7b0

00011940 <__gmon_start__@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #200704	; 0x31000
   11948:	ldr	pc, [ip, #1960]!	; 0x7a8

0001194c <freopen64@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #200704	; 0x31000
   11954:	ldr	pc, [ip, #1952]!	; 0x7a0

00011958 <getopt_long@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #200704	; 0x31000
   11960:	ldr	pc, [ip, #1944]!	; 0x798

00011964 <__ctype_b_loc@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #200704	; 0x31000
   1196c:	ldr	pc, [ip, #1936]!	; 0x790

00011970 <exit@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #200704	; 0x31000
   11978:	ldr	pc, [ip, #1928]!	; 0x788

0001197c <feof@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #200704	; 0x31000
   11984:	ldr	pc, [ip, #1920]!	; 0x780

00011988 <strlen@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #200704	; 0x31000
   11990:	ldr	pc, [ip, #1912]!	; 0x778

00011994 <strchr@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #200704	; 0x31000
   1199c:	ldr	pc, [ip, #1904]!	; 0x770

000119a0 <setenv@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #200704	; 0x31000
   119a8:	ldr	pc, [ip, #1896]!	; 0x768

000119ac <openat64@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #200704	; 0x31000
   119b4:	ldr	pc, [ip, #1888]!	; 0x760

000119b8 <__errno_location@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #200704	; 0x31000
   119c0:	ldr	pc, [ip, #1880]!	; 0x758

000119c4 <iswalnum@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #200704	; 0x31000
   119cc:	ldr	pc, [ip, #1872]!	; 0x750

000119d0 <__sprintf_chk@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #200704	; 0x31000
   119d8:	ldr	pc, [ip, #1864]!	; 0x748

000119dc <__cxa_atexit@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #200704	; 0x31000
   119e4:	ldr	pc, [ip, #1856]!	; 0x740

000119e8 <memset@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #200704	; 0x31000
   119f0:	ldr	pc, [ip, #1848]!	; 0x738

000119f4 <btowc@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #200704	; 0x31000
   119fc:	ldr	pc, [ip, #1840]!	; 0x730

00011a00 <__printf_chk@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #200704	; 0x31000
   11a08:	ldr	pc, [ip, #1832]!	; 0x728

00011a0c <fileno@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #200704	; 0x31000
   11a14:	ldr	pc, [ip, #1824]!	; 0x720

00011a18 <__fprintf_chk@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #200704	; 0x31000
   11a20:	ldr	pc, [ip, #1816]!	; 0x718

00011a24 <memchr@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #200704	; 0x31000
   11a2c:	ldr	pc, [ip, #1808]!	; 0x710

00011a30 <fclose@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #200704	; 0x31000
   11a38:	ldr	pc, [ip, #1800]!	; 0x708

00011a3c <fseeko64@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #200704	; 0x31000
   11a44:	ldr	pc, [ip, #1792]!	; 0x700

00011a48 <endmntent@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #200704	; 0x31000
   11a50:	ldr	pc, [ip, #1784]!	; 0x6f8

00011a54 <fcntl64@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #200704	; 0x31000
   11a5c:	ldr	pc, [ip, #1776]!	; 0x6f0

00011a60 <__overflow@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #200704	; 0x31000
   11a68:	ldr	pc, [ip, #1768]!	; 0x6e8

00011a6c <setlocale@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #200704	; 0x31000
   11a74:	ldr	pc, [ip, #1760]!	; 0x6e0

00011a78 <strrchr@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #200704	; 0x31000
   11a80:	ldr	pc, [ip, #1752]!	; 0x6d8

00011a84 <nl_langinfo@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #200704	; 0x31000
   11a8c:	ldr	pc, [ip, #1744]!	; 0x6d0

00011a90 <fputc@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #200704	; 0x31000
   11a98:	ldr	pc, [ip, #1736]!	; 0x6c8

00011a9c <sscanf@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #200704	; 0x31000
   11aa4:	ldr	pc, [ip, #1728]!	; 0x6c0

00011aa8 <localeconv@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #200704	; 0x31000
   11ab0:	ldr	pc, [ip, #1720]!	; 0x6b8

00011ab4 <readdir64@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #200704	; 0x31000
   11abc:	ldr	pc, [ip, #1712]!	; 0x6b0

00011ac0 <fdopendir@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #200704	; 0x31000
   11ac8:	ldr	pc, [ip, #1704]!	; 0x6a8

00011acc <timegm@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #200704	; 0x31000
   11ad4:	ldr	pc, [ip, #1696]!	; 0x6a0

00011ad8 <dirfd@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #200704	; 0x31000
   11ae0:	ldr	pc, [ip, #1688]!	; 0x698

00011ae4 <fchdir@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #200704	; 0x31000
   11aec:	ldr	pc, [ip, #1680]!	; 0x690

00011af0 <__strtoll_internal@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #200704	; 0x31000
   11af8:	ldr	pc, [ip, #1672]!	; 0x688

00011afc <fopen64@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #200704	; 0x31000
   11b04:	ldr	pc, [ip, #1664]!	; 0x680

00011b08 <qsort@plt>:
   11b08:	add	ip, pc, #0, 12
   11b0c:	add	ip, ip, #200704	; 0x31000
   11b10:	ldr	pc, [ip, #1656]!	; 0x678

00011b14 <setmntent@plt>:
   11b14:	add	ip, pc, #0, 12
   11b18:	add	ip, ip, #200704	; 0x31000
   11b1c:	ldr	pc, [ip, #1648]!	; 0x670

00011b20 <bindtextdomain@plt>:
   11b20:	add	ip, pc, #0, 12
   11b24:	add	ip, ip, #200704	; 0x31000
   11b28:	ldr	pc, [ip, #1640]!	; 0x668

00011b2c <getdelim@plt>:
   11b2c:	add	ip, pc, #0, 12
   11b30:	add	ip, ip, #200704	; 0x31000
   11b34:	ldr	pc, [ip, #1632]!	; 0x660

00011b38 <__xstat64@plt>:
   11b38:	add	ip, pc, #0, 12
   11b3c:	add	ip, ip, #200704	; 0x31000
   11b40:	ldr	pc, [ip, #1624]!	; 0x658

00011b44 <unsetenv@plt>:
   11b44:	add	ip, pc, #0, 12
   11b48:	add	ip, ip, #200704	; 0x31000
   11b4c:	ldr	pc, [ip, #1616]!	; 0x650

00011b50 <towupper@plt>:
   11b50:	add	ip, pc, #0, 12
   11b54:	add	ip, ip, #200704	; 0x31000
   11b58:	ldr	pc, [ip, #1608]!	; 0x648

00011b5c <strncmp@plt>:
   11b5c:	add	ip, pc, #0, 12
   11b60:	add	ip, ip, #200704	; 0x31000
   11b64:	ldr	pc, [ip, #1600]!	; 0x640

00011b68 <abort@plt>:
   11b68:	add	ip, pc, #0, 12
   11b6c:	add	ip, ip, #200704	; 0x31000
   11b70:	ldr	pc, [ip, #1592]!	; 0x638

00011b74 <getc@plt>:
   11b74:	add	ip, pc, #0, 12
   11b78:	add	ip, ip, #200704	; 0x31000
   11b7c:	ldr	pc, [ip, #1584]!	; 0x630

00011b80 <close@plt>:
   11b80:	add	ip, pc, #0, 12
   11b84:	add	ip, ip, #200704	; 0x31000
   11b88:	ldr	pc, [ip, #1576]!	; 0x628

00011b8c <__lxstat64@plt>:
   11b8c:	add	ip, pc, #0, 12
   11b90:	add	ip, ip, #200704	; 0x31000
   11b94:	ldr	pc, [ip, #1568]!	; 0x620

00011b98 <closedir@plt>:
   11b98:	add	ip, pc, #0, 12
   11b9c:	add	ip, ip, #200704	; 0x31000
   11ba0:	ldr	pc, [ip, #1560]!	; 0x618

00011ba4 <__assert_fail@plt>:
   11ba4:	add	ip, pc, #0, 12
   11ba8:	add	ip, ip, #200704	; 0x31000
   11bac:	ldr	pc, [ip, #1552]!	; 0x610

Disassembly of section .text:

00011bb0 <.text>:
   11bb0:	mov	fp, #0
   11bb4:	mov	lr, #0
   11bb8:	pop	{r1}		; (ldr r1, [sp], #4)
   11bbc:	mov	r2, sp
   11bc0:	push	{r2}		; (str r2, [sp, #-4]!)
   11bc4:	push	{r0}		; (str r0, [sp, #-4]!)
   11bc8:	ldr	ip, [pc, #16]	; 11be0 <__assert_fail@plt+0x3c>
   11bcc:	push	{ip}		; (str ip, [sp, #-4]!)
   11bd0:	ldr	r0, [pc, #12]	; 11be4 <__assert_fail@plt+0x40>
   11bd4:	ldr	r3, [pc, #12]	; 11be8 <__assert_fail@plt+0x44>
   11bd8:	bl	11904 <__libc_start_main@plt>
   11bdc:	bl	11b68 <abort@plt>
   11be0:	andeq	r0, r3, r0, lsl #15
   11be4:	andeq	r2, r1, ip, lsr r3
   11be8:	andeq	r0, r3, r0, lsr #14
   11bec:	ldr	r3, [pc, #20]	; 11c08 <__assert_fail@plt+0x64>
   11bf0:	ldr	r2, [pc, #20]	; 11c0c <__assert_fail@plt+0x68>
   11bf4:	add	r3, pc, r3
   11bf8:	ldr	r2, [r3, r2]
   11bfc:	cmp	r2, #0
   11c00:	bxeq	lr
   11c04:	b	11940 <__gmon_start__@plt>
   11c08:	andeq	r1, r3, r4, lsl #8
   11c0c:	andeq	r0, r0, r0, asr #3
   11c10:	ldr	r0, [pc, #24]	; 11c30 <__assert_fail@plt+0x8c>
   11c14:	ldr	r3, [pc, #24]	; 11c34 <__assert_fail@plt+0x90>
   11c18:	cmp	r3, r0
   11c1c:	bxeq	lr
   11c20:	ldr	r3, [pc, #16]	; 11c38 <__assert_fail@plt+0x94>
   11c24:	cmp	r3, #0
   11c28:	bxeq	lr
   11c2c:	bx	r3
   11c30:	andeq	r3, r4, ip, lsl r2
   11c34:	andeq	r3, r4, ip, lsl r2
   11c38:	andeq	r0, r0, r0
   11c3c:	ldr	r0, [pc, #36]	; 11c68 <__assert_fail@plt+0xc4>
   11c40:	ldr	r1, [pc, #36]	; 11c6c <__assert_fail@plt+0xc8>
   11c44:	sub	r1, r1, r0
   11c48:	asr	r1, r1, #2
   11c4c:	add	r1, r1, r1, lsr #31
   11c50:	asrs	r1, r1, #1
   11c54:	bxeq	lr
   11c58:	ldr	r3, [pc, #16]	; 11c70 <__assert_fail@plt+0xcc>
   11c5c:	cmp	r3, #0
   11c60:	bxeq	lr
   11c64:	bx	r3
   11c68:	andeq	r3, r4, ip, lsl r2
   11c6c:	andeq	r3, r4, ip, lsl r2
   11c70:	andeq	r0, r0, r0
   11c74:	push	{r4, lr}
   11c78:	ldr	r4, [pc, #24]	; 11c98 <__assert_fail@plt+0xf4>
   11c7c:	ldrb	r3, [r4]
   11c80:	cmp	r3, #0
   11c84:	popne	{r4, pc}
   11c88:	bl	11c10 <__assert_fail@plt+0x6c>
   11c8c:	mov	r3, #1
   11c90:	strb	r3, [r4]
   11c94:	pop	{r4, pc}
   11c98:	andeq	r3, r4, r4, asr #4
   11c9c:	b	11c3c <__assert_fail@plt+0x98>
   11ca0:	strd	r4, [sp, #-12]!
   11ca4:	str	lr, [sp, #8]
   11ca8:	sub	sp, sp, #676	; 0x2a4
   11cac:	mvn	r2, #0
   11cb0:	mvn	r3, #0
   11cb4:	cmp	r1, r3
   11cb8:	cmpeq	r0, r2
   11cbc:	beq	11d08 <__assert_fail@plt+0x164>
   11cc0:	movw	r3, #12872	; 0x3248
   11cc4:	movt	r3, #4
   11cc8:	ldrd	r4, [r3, #8]
   11ccc:	strd	r4, [sp, #8]
   11cd0:	mov	r4, #1
   11cd4:	mov	r5, #0
   11cd8:	strd	r4, [sp]
   11cdc:	ldr	r3, [r3]
   11ce0:	add	r2, sp, #20
   11ce4:	bl	1afa0 <__assert_fail@plt+0x93fc>
   11ce8:	movw	r3, #12860	; 0x323c
   11cec:	movt	r3, #4
   11cf0:	ldr	r1, [r3]
   11cf4:	bl	116b8 <fputs_unlocked@plt>
   11cf8:	add	sp, sp, #676	; 0x2a4
   11cfc:	ldrd	r4, [sp]
   11d00:	add	sp, sp, #8
   11d04:	pop	{pc}		; (ldr pc, [sp], #4)
   11d08:	mov	r2, #5
   11d0c:	movw	r1, #2536	; 0x9e8
   11d10:	movt	r1, #3
   11d14:	mov	r0, #0
   11d18:	bl	117d8 <dcgettext@plt>
   11d1c:	b	11ce8 <__assert_fail@plt+0x144>
   11d20:	strd	r4, [sp, #-20]!	; 0xffffffec
   11d24:	strd	r6, [sp, #8]
   11d28:	str	lr, [sp, #16]
   11d2c:	sub	sp, sp, #92	; 0x5c
   11d30:	mov	r4, r0
   11d34:	mov	r5, r1
   11d38:	movw	r3, #12872	; 0x3248
   11d3c:	movt	r3, #4
   11d40:	ldrb	r3, [r3, #16]
   11d44:	cmp	r3, #0
   11d48:	ldrdne	r0, [r0, #8]
   11d4c:	ldrdeq	r0, [r4]
   11d50:	bl	11ca0 <__assert_fail@plt+0xfc>
   11d54:	movw	r3, #12872	; 0x3248
   11d58:	movt	r3, #4
   11d5c:	ldrb	r3, [r3, #17]
   11d60:	cmp	r3, #0
   11d64:	beq	11de8 <__assert_fail@plt+0x244>
   11d68:	movw	r3, #12860	; 0x323c
   11d6c:	movt	r3, #4
   11d70:	ldr	r0, [r3]
   11d74:	ldr	r3, [r0, #20]
   11d78:	ldr	r2, [r0, #24]
   11d7c:	cmp	r3, r2
   11d80:	addcc	r2, r3, #1
   11d84:	strcc	r2, [r0, #20]
   11d88:	movcc	r2, #9
   11d8c:	strbcc	r2, [r3]
   11d90:	bcs	11e38 <__assert_fail@plt+0x294>
   11d94:	movw	r3, #12872	; 0x3248
   11d98:	movt	r3, #4
   11d9c:	ldr	r7, [r3, #20]
   11da0:	ldr	r6, [r3, #24]
   11da4:	ldrd	r2, [r4, #16]
   11da8:	strd	r2, [sp, #12]
   11dac:	add	r2, sp, #44	; 0x2c
   11db0:	add	r1, sp, #12
   11db4:	mov	r0, r6
   11db8:	bl	2d398 <__assert_fail@plt+0x1b7f4>
   11dbc:	cmp	r0, #0
   11dc0:	beq	11e44 <__assert_fail@plt+0x2a0>
   11dc4:	movw	r0, #12860	; 0x323c
   11dc8:	movt	r0, #4
   11dcc:	ldr	r3, [sp, #16]
   11dd0:	str	r3, [sp]
   11dd4:	mov	r3, r6
   11dd8:	add	r2, sp, #44	; 0x2c
   11ddc:	mov	r1, r7
   11de0:	ldr	r0, [r0]
   11de4:	bl	17710 <__assert_fail@plt+0x5b6c>
   11de8:	movw	r3, #12872	; 0x3248
   11dec:	movt	r3, #4
   11df0:	ldrb	r3, [r3, #28]
   11df4:	cmp	r3, #0
   11df8:	movne	r3, #0
   11dfc:	moveq	r3, #10
   11e00:	mov	r2, r5
   11e04:	movw	r1, #2572	; 0xa0c
   11e08:	movt	r1, #3
   11e0c:	mov	r0, #1
   11e10:	bl	11a00 <__printf_chk@plt>
   11e14:	movw	r3, #12860	; 0x323c
   11e18:	movt	r3, #4
   11e1c:	ldr	r0, [r3]
   11e20:	bl	1182c <fflush_unlocked@plt>
   11e24:	add	sp, sp, #92	; 0x5c
   11e28:	ldrd	r4, [sp]
   11e2c:	ldrd	r6, [sp, #8]
   11e30:	add	sp, sp, #16
   11e34:	pop	{pc}		; (ldr pc, [sp], #4)
   11e38:	mov	r1, #9
   11e3c:	bl	11a60 <__overflow@plt>
   11e40:	b	11d94 <__assert_fail@plt+0x1f0>
   11e44:	add	r2, sp, #20
   11e48:	ldr	r0, [sp, #12]
   11e4c:	asr	r1, r0, #31
   11e50:	bl	1bcdc <__assert_fail@plt+0xa138>
   11e54:	mov	r4, r0
   11e58:	mov	r2, #5
   11e5c:	movw	r1, #2548	; 0x9f4
   11e60:	movt	r1, #3
   11e64:	mov	r0, #0
   11e68:	bl	117d8 <dcgettext@plt>
   11e6c:	mov	r6, r0
   11e70:	mov	r0, r4
   11e74:	bl	1f584 <__assert_fail@plt+0xd9e0>
   11e78:	mov	r3, r0
   11e7c:	mov	r2, r6
   11e80:	mov	r1, #0
   11e84:	mov	r0, r1
   11e88:	bl	118bc <error@plt>
   11e8c:	movw	r3, #12860	; 0x323c
   11e90:	movt	r3, #4
   11e94:	ldr	r1, [r3]
   11e98:	mov	r0, r4
   11e9c:	bl	116b8 <fputs_unlocked@plt>
   11ea0:	b	11de8 <__assert_fail@plt+0x244>
   11ea4:	push	{lr}		; (str lr, [sp, #-4]!)
   11ea8:	sub	sp, sp, #60	; 0x3c
   11eac:	subs	r5, r0, #0
   11eb0:	beq	11ef8 <__assert_fail@plt+0x354>
   11eb4:	movw	r3, #12848	; 0x3230
   11eb8:	movt	r3, #4
   11ebc:	ldr	r4, [r3]
   11ec0:	mov	r2, #5
   11ec4:	movw	r1, #2584	; 0xa18
   11ec8:	movt	r1, #3
   11ecc:	mov	r0, #0
   11ed0:	bl	117d8 <dcgettext@plt>
   11ed4:	movw	r3, #13000	; 0x32c8
   11ed8:	movt	r3, #4
   11edc:	ldr	r3, [r3]
   11ee0:	mov	r2, r0
   11ee4:	mov	r1, #1
   11ee8:	mov	r0, r4
   11eec:	bl	11a18 <__fprintf_chk@plt>
   11ef0:	mov	r0, r5
   11ef4:	bl	11970 <exit@plt>
   11ef8:	mov	r2, #5
   11efc:	movw	r1, #2624	; 0xa40
   11f00:	movt	r1, #3
   11f04:	mov	r0, #0
   11f08:	bl	117d8 <dcgettext@plt>
   11f0c:	movw	r3, #13000	; 0x32c8
   11f10:	movt	r3, #4
   11f14:	ldr	r2, [r3]
   11f18:	mov	r3, r2
   11f1c:	mov	r1, r0
   11f20:	mov	r0, #1
   11f24:	bl	11a00 <__printf_chk@plt>
   11f28:	mov	r2, #5
   11f2c:	movw	r1, #2696	; 0xa88
   11f30:	movt	r1, #3
   11f34:	mov	r0, #0
   11f38:	bl	117d8 <dcgettext@plt>
   11f3c:	movw	r4, #12860	; 0x323c
   11f40:	movt	r4, #4
   11f44:	ldr	r1, [r4]
   11f48:	bl	116b8 <fputs_unlocked@plt>
   11f4c:	mov	r2, #5
   11f50:	movw	r1, #2772	; 0xad4
   11f54:	movt	r1, #3
   11f58:	mov	r0, #0
   11f5c:	bl	117d8 <dcgettext@plt>
   11f60:	ldr	r1, [r4]
   11f64:	bl	116b8 <fputs_unlocked@plt>
   11f68:	mov	r2, #5
   11f6c:	movw	r1, #2848	; 0xb20
   11f70:	movt	r1, #3
   11f74:	mov	r0, #0
   11f78:	bl	117d8 <dcgettext@plt>
   11f7c:	ldr	r1, [r4]
   11f80:	bl	116b8 <fputs_unlocked@plt>
   11f84:	mov	r2, #5
   11f88:	movw	r1, #3292	; 0xcdc
   11f8c:	movt	r1, #3
   11f90:	mov	r0, #0
   11f94:	bl	117d8 <dcgettext@plt>
   11f98:	ldr	r1, [r4]
   11f9c:	bl	116b8 <fputs_unlocked@plt>
   11fa0:	mov	r2, #5
   11fa4:	movw	r1, #3984	; 0xf90
   11fa8:	movt	r1, #3
   11fac:	mov	r0, #0
   11fb0:	bl	117d8 <dcgettext@plt>
   11fb4:	ldr	r1, [r4]
   11fb8:	bl	116b8 <fputs_unlocked@plt>
   11fbc:	mov	r2, #5
   11fc0:	movw	r1, #4404	; 0x1134
   11fc4:	movt	r1, #3
   11fc8:	mov	r0, #0
   11fcc:	bl	117d8 <dcgettext@plt>
   11fd0:	ldr	r1, [r4]
   11fd4:	bl	116b8 <fputs_unlocked@plt>
   11fd8:	mov	r2, #5
   11fdc:	movw	r1, #4612	; 0x1204
   11fe0:	movt	r1, #3
   11fe4:	mov	r0, #0
   11fe8:	bl	117d8 <dcgettext@plt>
   11fec:	ldr	r1, [r4]
   11ff0:	bl	116b8 <fputs_unlocked@plt>
   11ff4:	mov	r2, #5
   11ff8:	movw	r1, #4900	; 0x1324
   11ffc:	movt	r1, #3
   12000:	mov	r0, #0
   12004:	bl	117d8 <dcgettext@plt>
   12008:	ldr	r1, [r4]
   1200c:	bl	116b8 <fputs_unlocked@plt>
   12010:	mov	r2, #5
   12014:	movw	r1, #5512	; 0x1588
   12018:	movt	r1, #3
   1201c:	mov	r0, #0
   12020:	bl	117d8 <dcgettext@plt>
   12024:	ldr	r1, [r4]
   12028:	bl	116b8 <fputs_unlocked@plt>
   1202c:	mov	r2, #5
   12030:	movw	r1, #5716	; 0x1654
   12034:	movt	r1, #3
   12038:	mov	r0, #0
   1203c:	bl	117d8 <dcgettext@plt>
   12040:	ldr	r1, [r4]
   12044:	bl	116b8 <fputs_unlocked@plt>
   12048:	mov	r2, #5
   1204c:	movw	r1, #5764	; 0x1684
   12050:	movt	r1, #3
   12054:	mov	r0, #0
   12058:	bl	117d8 <dcgettext@plt>
   1205c:	ldr	r1, [r4]
   12060:	bl	116b8 <fputs_unlocked@plt>
   12064:	mov	r2, #5
   12068:	movw	r1, #5820	; 0x16bc
   1206c:	movt	r1, #3
   12070:	mov	r0, #0
   12074:	bl	117d8 <dcgettext@plt>
   12078:	movw	r2, #6044	; 0x179c
   1207c:	movt	r2, #3
   12080:	mov	r1, r0
   12084:	mov	r0, #1
   12088:	bl	11a00 <__printf_chk@plt>
   1208c:	mov	r2, #5
   12090:	movw	r1, #6048	; 0x17a0
   12094:	movt	r1, #3
   12098:	mov	r0, #0
   1209c:	bl	117d8 <dcgettext@plt>
   120a0:	ldr	r1, [r4]
   120a4:	bl	116b8 <fputs_unlocked@plt>
   120a8:	movw	r0, #1960	; 0x7a8
   120ac:	movt	r0, #3
   120b0:	ldr	r1, [r0]
   120b4:	ldr	r3, [r0, #4]
   120b8:	str	r1, [sp]
   120bc:	str	r3, [sp, #4]
   120c0:	ldrd	r2, [r0, #8]
   120c4:	strd	r2, [sp, #8]
   120c8:	ldrd	r2, [r0, #16]
   120cc:	strd	r2, [sp, #16]
   120d0:	ldrd	r2, [r0, #24]
   120d4:	strd	r2, [sp, #24]
   120d8:	ldrd	r2, [r0, #32]
   120dc:	strd	r2, [sp, #32]
   120e0:	ldrd	r2, [r0, #40]	; 0x28
   120e4:	strd	r2, [sp, #40]	; 0x28
   120e8:	ldrd	r2, [r0, #48]	; 0x30
   120ec:	strd	r2, [sp, #48]	; 0x30
   120f0:	cmp	r1, #0
   120f4:	moveq	r4, sp
   120f8:	beq	12124 <__assert_fail@plt+0x580>
   120fc:	mov	r4, sp
   12100:	movw	r6, #2580	; 0xa14
   12104:	movt	r6, #3
   12108:	mov	r0, r6
   1210c:	bl	1170c <strcmp@plt>
   12110:	cmp	r0, #0
   12114:	beq	12124 <__assert_fail@plt+0x580>
   12118:	ldr	r1, [r4, #8]!
   1211c:	cmp	r1, #0
   12120:	bne	12108 <__assert_fail@plt+0x564>
   12124:	ldr	r4, [r4, #4]
   12128:	cmp	r4, #0
   1212c:	beq	12288 <__assert_fail@plt+0x6e4>
   12130:	mov	r2, #5
   12134:	movw	r1, #6260	; 0x1874
   12138:	movt	r1, #3
   1213c:	mov	r0, #0
   12140:	bl	117d8 <dcgettext@plt>
   12144:	movw	r3, #6284	; 0x188c
   12148:	movt	r3, #3
   1214c:	movw	r2, #6324	; 0x18b4
   12150:	movt	r2, #3
   12154:	mov	r1, r0
   12158:	mov	r0, #1
   1215c:	bl	11a00 <__printf_chk@plt>
   12160:	mov	r1, #0
   12164:	mov	r0, #5
   12168:	bl	11a6c <setlocale@plt>
   1216c:	cmp	r0, #0
   12170:	beq	1218c <__assert_fail@plt+0x5e8>
   12174:	mov	r2, #3
   12178:	movw	r1, #6340	; 0x18c4
   1217c:	movt	r1, #3
   12180:	bl	11b5c <strncmp@plt>
   12184:	cmp	r0, #0
   12188:	bne	12208 <__assert_fail@plt+0x664>
   1218c:	mov	r2, #5
   12190:	movw	r1, #6416	; 0x1910
   12194:	movt	r1, #3
   12198:	mov	r0, #0
   1219c:	bl	117d8 <dcgettext@plt>
   121a0:	movw	r6, #2580	; 0xa14
   121a4:	movt	r6, #3
   121a8:	mov	r3, r6
   121ac:	movw	r2, #6284	; 0x188c
   121b0:	movt	r2, #3
   121b4:	mov	r1, r0
   121b8:	mov	r0, #1
   121bc:	bl	11a00 <__printf_chk@plt>
   121c0:	mov	r2, #5
   121c4:	movw	r1, #6444	; 0x192c
   121c8:	movt	r1, #3
   121cc:	mov	r0, #0
   121d0:	bl	117d8 <dcgettext@plt>
   121d4:	mov	r1, r0
   121d8:	movw	r2, #7664	; 0x1df0
   121dc:	movt	r2, #3
   121e0:	movw	r3, #8476	; 0x211c
   121e4:	movt	r3, #3
   121e8:	cmp	r4, r6
   121ec:	moveq	r3, r2
   121f0:	mov	r2, r4
   121f4:	mov	r0, #1
   121f8:	bl	11a00 <__printf_chk@plt>
   121fc:	b	11ef0 <__assert_fail@plt+0x34c>
   12200:	movw	r4, #2580	; 0xa14
   12204:	movt	r4, #3
   12208:	mov	r2, #5
   1220c:	movw	r1, #6344	; 0x18c8
   12210:	movt	r1, #3
   12214:	mov	r0, #0
   12218:	bl	117d8 <dcgettext@plt>
   1221c:	movw	r3, #12860	; 0x323c
   12220:	movt	r3, #4
   12224:	ldr	r1, [r3]
   12228:	bl	116b8 <fputs_unlocked@plt>
   1222c:	b	1218c <__assert_fail@plt+0x5e8>
   12230:	mov	r2, #5
   12234:	movw	r1, #6416	; 0x1910
   12238:	movt	r1, #3
   1223c:	mov	r0, #0
   12240:	bl	117d8 <dcgettext@plt>
   12244:	movw	r4, #2580	; 0xa14
   12248:	movt	r4, #3
   1224c:	mov	r3, r4
   12250:	movw	r2, #6284	; 0x188c
   12254:	movt	r2, #3
   12258:	mov	r1, r0
   1225c:	mov	r0, #1
   12260:	bl	11a00 <__printf_chk@plt>
   12264:	mov	r2, #5
   12268:	movw	r1, #6444	; 0x192c
   1226c:	movt	r1, #3
   12270:	mov	r0, #0
   12274:	bl	117d8 <dcgettext@plt>
   12278:	mov	r1, r0
   1227c:	movw	r3, #7664	; 0x1df0
   12280:	movt	r3, #3
   12284:	b	121f0 <__assert_fail@plt+0x64c>
   12288:	mov	r2, #5
   1228c:	movw	r1, #6260	; 0x1874
   12290:	movt	r1, #3
   12294:	mov	r0, #0
   12298:	bl	117d8 <dcgettext@plt>
   1229c:	movw	r3, #6284	; 0x188c
   122a0:	movt	r3, #3
   122a4:	movw	r2, #6324	; 0x18b4
   122a8:	movt	r2, #3
   122ac:	mov	r1, r0
   122b0:	mov	r0, #1
   122b4:	bl	11a00 <__printf_chk@plt>
   122b8:	mov	r1, #0
   122bc:	mov	r0, #5
   122c0:	bl	11a6c <setlocale@plt>
   122c4:	cmp	r0, #0
   122c8:	beq	12230 <__assert_fail@plt+0x68c>
   122cc:	mov	r2, #3
   122d0:	movw	r1, #6340	; 0x18c4
   122d4:	movt	r1, #3
   122d8:	bl	11b5c <strncmp@plt>
   122dc:	cmp	r0, #0
   122e0:	bne	12200 <__assert_fail@plt+0x65c>
   122e4:	mov	r2, #5
   122e8:	movw	r1, #6416	; 0x1910
   122ec:	movt	r1, #3
   122f0:	mov	r0, #0
   122f4:	bl	117d8 <dcgettext@plt>
   122f8:	movw	r4, #2580	; 0xa14
   122fc:	movt	r4, #3
   12300:	mov	r3, r4
   12304:	movw	r2, #6284	; 0x188c
   12308:	movt	r2, #3
   1230c:	mov	r1, r0
   12310:	mov	r0, #1
   12314:	bl	11a00 <__printf_chk@plt>
   12318:	mov	r2, #5
   1231c:	movw	r1, #6444	; 0x192c
   12320:	movt	r1, #3
   12324:	mov	r0, #0
   12328:	bl	117d8 <dcgettext@plt>
   1232c:	mov	r1, r0
   12330:	movw	r3, #7664	; 0x1df0
   12334:	movt	r3, #3
   12338:	b	121f0 <__assert_fail@plt+0x64c>
   1233c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12340:	strd	r6, [sp, #8]
   12344:	strd	r8, [sp, #16]
   12348:	strd	sl, [sp, #24]
   1234c:	str	lr, [sp, #32]
   12350:	sub	sp, sp, #260	; 0x104
   12354:	mov	r6, r0
   12358:	mov	r5, r1
   1235c:	movw	r3, #6508	; 0x196c
   12360:	movt	r3, #3
   12364:	str	r3, [sp, #248]	; 0xf8
   12368:	mov	r4, #0
   1236c:	str	r4, [sp, #252]	; 0xfc
   12370:	ldr	r0, [r1]
   12374:	bl	1d288 <__assert_fail@plt+0xb6e4>
   12378:	movw	r1, #8476	; 0x211c
   1237c:	movt	r1, #3
   12380:	mov	r0, #6
   12384:	bl	11a6c <setlocale@plt>
   12388:	movw	r7, #6328	; 0x18b8
   1238c:	movt	r7, #3
   12390:	movw	r1, #6512	; 0x1970
   12394:	movt	r1, #3
   12398:	mov	r0, r7
   1239c:	bl	11b20 <bindtextdomain@plt>
   123a0:	mov	r0, r7
   123a4:	bl	11808 <textdomain@plt>
   123a8:	movw	r0, #17884	; 0x45dc
   123ac:	movt	r0, #1
   123b0:	bl	30784 <__assert_fail@plt+0x1ebe0>
   123b4:	bl	150a0 <__assert_fail@plt+0x34fc>
   123b8:	movw	r7, #12872	; 0x3248
   123bc:	movt	r7, #4
   123c0:	str	r0, [r7, #32]
   123c4:	movw	r0, #6536	; 0x1988
   123c8:	movt	r0, #3
   123cc:	bl	118ec <getenv@plt>
   123d0:	add	r2, r7, #8
   123d4:	mov	r1, r7
   123d8:	bl	1b894 <__assert_fail@plt+0x9cf0>
   123dc:	mov	fp, r4
   123e0:	mov	r9, #16
   123e4:	mov	sl, #8
   123e8:	str	r4, [sp, #28]
   123ec:	mov	r3, #1
   123f0:	str	r3, [sp, #56]	; 0x38
   123f4:	str	r4, [sp, #44]	; 0x2c
   123f8:	movw	r8, #1960	; 0x7a8
   123fc:	movt	r8, #3
   12400:	add	r7, r8, #56	; 0x38
   12404:	movw	r4, #12872	; 0x3248
   12408:	movt	r4, #4
   1240c:	add	r3, r4, sl
   12410:	str	r3, [sp, #40]	; 0x28
   12414:	mvn	r3, #0
   12418:	str	r3, [sp, #140]	; 0x8c
   1241c:	add	r3, sp, #140	; 0x8c
   12420:	str	r3, [sp]
   12424:	mov	r3, r7
   12428:	movw	r2, #6552	; 0x1998
   1242c:	movt	r2, #3
   12430:	mov	r1, r5
   12434:	mov	r0, r6
   12438:	bl	11958 <getopt_long@plt>
   1243c:	cmn	r0, #1
   12440:	beq	12cbc <__assert_fail@plt+0x1118>
   12444:	add	r0, r0, #3
   12448:	movw	r3, #266	; 0x10a
   1244c:	cmp	r0, r3
   12450:	ldrls	pc, [pc, r0, lsl #2]
   12454:	b	12ca8 <__assert_fail@plt+0x1104>
   12458:	andeq	r2, r1, ip, lsr ip
   1245c:	andeq	r2, r1, r4, lsr ip
   12460:	andeq	r2, r1, r8, lsr #25
   12464:	andeq	r2, r1, r8, lsr #25
   12468:	andeq	r2, r1, r8, lsr #25
   1246c:	andeq	r2, r1, r8, lsr #25
   12470:	andeq	r2, r1, r8, lsr #25
   12474:	andeq	r2, r1, r8, lsr #25
   12478:	andeq	r2, r1, r8, lsr #25
   1247c:	andeq	r2, r1, r8, lsr #25
   12480:	andeq	r2, r1, r8, lsr #25
   12484:	andeq	r2, r1, r8, lsr #25
   12488:	andeq	r2, r1, r8, lsr #25
   1248c:	andeq	r2, r1, r8, lsr #25
   12490:	andeq	r2, r1, r8, lsr #25
   12494:	andeq	r2, r1, r8, lsr #25
   12498:	andeq	r2, r1, r8, lsr #25
   1249c:	andeq	r2, r1, r8, lsr #25
   124a0:	andeq	r2, r1, r8, lsr #25
   124a4:	andeq	r2, r1, r8, lsr #25
   124a8:	andeq	r2, r1, r8, lsr #25
   124ac:	andeq	r2, r1, r8, lsr #25
   124b0:	andeq	r2, r1, r8, lsr #25
   124b4:	andeq	r2, r1, r8, lsr #25
   124b8:	andeq	r2, r1, r8, lsr #25
   124bc:	andeq	r2, r1, r8, lsr #25
   124c0:	andeq	r2, r1, r8, lsr #25
   124c4:	andeq	r2, r1, r8, lsr #25
   124c8:	andeq	r2, r1, r8, lsr #25
   124cc:	andeq	r2, r1, r8, lsr #25
   124d0:	andeq	r2, r1, r8, lsr #25
   124d4:	andeq	r2, r1, r8, lsr #25
   124d8:	andeq	r2, r1, r8, lsr #25
   124dc:	andeq	r2, r1, r8, lsr #25
   124e0:	andeq	r2, r1, r8, lsr #25
   124e4:	andeq	r2, r1, r8, lsr #25
   124e8:	andeq	r2, r1, r8, lsr #25
   124ec:	andeq	r2, r1, r8, lsr #25
   124f0:	andeq	r2, r1, r8, lsr #25
   124f4:	andeq	r2, r1, r8, lsr #25
   124f8:	andeq	r2, r1, r8, lsr #25
   124fc:	andeq	r2, r1, r8, lsr #25
   12500:	andeq	r2, r1, r8, lsr #25
   12504:	andeq	r2, r1, r8, lsr #25
   12508:	andeq	r2, r1, r8, lsr #25
   1250c:	andeq	r2, r1, r8, lsr #25
   12510:	andeq	r2, r1, r8, lsr #25
   12514:	andeq	r2, r1, r8, lsr #25
   12518:	andeq	r2, r1, r8, lsr #25
   1251c:	andeq	r2, r1, r8, lsr #25
   12520:	andeq	r2, r1, r8, lsr #25
   12524:	andeq	r2, r1, ip, lsl #17
   12528:	andeq	r2, r1, r8, lsr #25
   1252c:	andeq	r2, r1, r8, lsr #25
   12530:	andeq	r2, r1, r8, lsr #25
   12534:	andeq	r2, r1, r8, lsr #25
   12538:	andeq	r2, r1, r8, lsr #25
   1253c:	andeq	r2, r1, r8, lsr #25
   12540:	andeq	r2, r1, r8, lsr #25
   12544:	andeq	r2, r1, r8, lsr #25
   12548:	andeq	r2, r1, r8, lsr #25
   1254c:	andeq	r2, r1, r8, lsr #25
   12550:	andeq	r2, r1, r8, lsr #25
   12554:	andeq	r2, r1, r8, lsr #25
   12558:	andeq	r2, r1, r8, lsr #25
   1255c:	andeq	r2, r1, r8, lsr #25
   12560:	andeq	r2, r1, r8, lsr #25
   12564:	andeq	r2, r1, r8, lsr #25
   12568:	andeq	r2, r1, r8, lsr #25
   1256c:	muleq	r1, r0, sl
   12570:	andeq	r2, r1, r8, lsr #25
   12574:	ldrdeq	r2, [r1], -r0
   12578:	andeq	r2, r1, r8, lsr #25
   1257c:	andeq	r2, r1, r8, lsr #25
   12580:	andeq	r2, r1, r8, lsr #25
   12584:	ldrdeq	r2, [r1], -r0
   12588:	andeq	r2, r1, r8, lsr #25
   1258c:	andeq	r2, r1, r8, lsr #25
   12590:	andeq	r2, r1, r8, lsr #25
   12594:	ldrdeq	r2, [r1], -r8
   12598:	andeq	r2, r1, r8, lsr #25
   1259c:	andeq	r2, r1, r8, lsr #25
   125a0:	andeq	r2, r1, r8, lsr #25
   125a4:	andeq	r2, r1, r0, ror #21
   125a8:	andeq	r2, r1, r8, lsr #25
   125ac:	andeq	r2, r1, r8, lsr #25
   125b0:	andeq	r2, r1, r8, ror #21
   125b4:	andeq	r2, r1, r8, lsr #25
   125b8:	andeq	r2, r1, r8, lsr #25
   125bc:	andeq	r2, r1, r8, lsr #25
   125c0:	andeq	r2, r1, r8, lsr #25
   125c4:	strdeq	r2, [r1], -r4
   125c8:	andeq	r2, r1, r8, lsr #25
   125cc:	andeq	r2, r1, r8, lsr #25
   125d0:	andeq	r2, r1, r8, lsr #25
   125d4:	andeq	r2, r1, r8, lsr #25
   125d8:	andeq	r2, r1, r8, lsr #25
   125dc:	andeq	r2, r1, r8, lsr #25
   125e0:	andeq	r2, r1, r8, lsr #25
   125e4:	andeq	r2, r1, r8, lsr #25
   125e8:	muleq	r1, r8, r8
   125ec:			; <UNDEFINED> instruction: 0x000128b0
   125f0:	ldrdeq	r2, [r1], -r0
   125f4:	andeq	r2, r1, r4, lsr #18
   125f8:	andeq	r2, r1, r8, lsr #25
   125fc:	andeq	r2, r1, r8, lsr #25
   12600:	andeq	r2, r1, r8, lsr #25
   12604:	ldrdeq	r2, [r1], -ip
   12608:	andeq	r2, r1, r8, lsr #25
   1260c:	andeq	r2, r1, r8, lsr #25
   12610:	andeq	r2, r1, ip, lsl #18
   12614:	andeq	r2, r1, ip, ror #19
   12618:	ldrdeq	r2, [r1], -r4
   1261c:	andeq	r2, r1, r8, lsr #25
   12620:	andeq	r2, r1, r8, lsr #25
   12624:	andeq	r2, r1, r8, lsr #25
   12628:	andeq	r2, r1, r8, lsr #25
   1262c:	andeq	r2, r1, r8, lsr #25
   12630:			; <UNDEFINED> instruction: 0x00012cb4
   12634:	strdeq	r2, [r1], -r8
   12638:	andeq	r2, r1, r8, lsr #25
   1263c:	andeq	r2, r1, r8, lsr #25
   12640:	andeq	r2, r1, r8, lsr #25
   12644:	andeq	r2, r1, r4, lsl #17
   12648:	andeq	r2, r1, r8, lsr #25
   1264c:	andeq	r2, r1, r8, lsr #25
   12650:	andeq	r2, r1, r8, lsr #25
   12654:	andeq	r2, r1, r8, lsr #25
   12658:	andeq	r2, r1, r8, lsr #25
   1265c:	andeq	r2, r1, r8, lsr #25
   12660:	andeq	r2, r1, r8, lsr #25
   12664:	andeq	r2, r1, r8, lsr #25
   12668:	andeq	r2, r1, r8, lsr #25
   1266c:	andeq	r2, r1, r8, lsr #25
   12670:	andeq	r2, r1, r8, lsr #25
   12674:	andeq	r2, r1, r8, lsr #25
   12678:	andeq	r2, r1, r8, lsr #25
   1267c:	andeq	r2, r1, r8, lsr #25
   12680:	andeq	r2, r1, r8, lsr #25
   12684:	andeq	r2, r1, r8, lsr #25
   12688:	andeq	r2, r1, r8, lsr #25
   1268c:	andeq	r2, r1, r8, lsr #25
   12690:	andeq	r2, r1, r8, lsr #25
   12694:	andeq	r2, r1, r8, lsr #25
   12698:	andeq	r2, r1, r8, lsr #25
   1269c:	andeq	r2, r1, r8, lsr #25
   126a0:	andeq	r2, r1, r8, lsr #25
   126a4:	andeq	r2, r1, r8, lsr #25
   126a8:	andeq	r2, r1, r8, lsr #25
   126ac:	andeq	r2, r1, r8, lsr #25
   126b0:	andeq	r2, r1, r8, lsr #25
   126b4:	andeq	r2, r1, r8, lsr #25
   126b8:	andeq	r2, r1, r8, lsr #25
   126bc:	andeq	r2, r1, r8, lsr #25
   126c0:	andeq	r2, r1, r8, lsr #25
   126c4:	andeq	r2, r1, r8, lsr #25
   126c8:	andeq	r2, r1, r8, lsr #25
   126cc:	andeq	r2, r1, r8, lsr #25
   126d0:	andeq	r2, r1, r8, lsr #25
   126d4:	andeq	r2, r1, r8, lsr #25
   126d8:	andeq	r2, r1, r8, lsr #25
   126dc:	andeq	r2, r1, r8, lsr #25
   126e0:	andeq	r2, r1, r8, lsr #25
   126e4:	andeq	r2, r1, r8, lsr #25
   126e8:	andeq	r2, r1, r8, lsr #25
   126ec:	andeq	r2, r1, r8, lsr #25
   126f0:	andeq	r2, r1, r8, lsr #25
   126f4:	andeq	r2, r1, r8, lsr #25
   126f8:	andeq	r2, r1, r8, lsr #25
   126fc:	andeq	r2, r1, r8, lsr #25
   12700:	andeq	r2, r1, r8, lsr #25
   12704:	andeq	r2, r1, r8, lsr #25
   12708:	andeq	r2, r1, r8, lsr #25
   1270c:	andeq	r2, r1, r8, lsr #25
   12710:	andeq	r2, r1, r8, lsr #25
   12714:	andeq	r2, r1, r8, lsr #25
   12718:	andeq	r2, r1, r8, lsr #25
   1271c:	andeq	r2, r1, r8, lsr #25
   12720:	andeq	r2, r1, r8, lsr #25
   12724:	andeq	r2, r1, r8, lsr #25
   12728:	andeq	r2, r1, r8, lsr #25
   1272c:	andeq	r2, r1, r8, lsr #25
   12730:	andeq	r2, r1, r8, lsr #25
   12734:	andeq	r2, r1, r8, lsr #25
   12738:	andeq	r2, r1, r8, lsr #25
   1273c:	andeq	r2, r1, r8, lsr #25
   12740:	andeq	r2, r1, r8, lsr #25
   12744:	andeq	r2, r1, r8, lsr #25
   12748:	andeq	r2, r1, r8, lsr #25
   1274c:	andeq	r2, r1, r8, lsr #25
   12750:	andeq	r2, r1, r8, lsr #25
   12754:	andeq	r2, r1, r8, lsr #25
   12758:	andeq	r2, r1, r8, lsr #25
   1275c:	andeq	r2, r1, r8, lsr #25
   12760:	andeq	r2, r1, r8, lsr #25
   12764:	andeq	r2, r1, r8, lsr #25
   12768:	andeq	r2, r1, r8, lsr #25
   1276c:	andeq	r2, r1, r8, lsr #25
   12770:	andeq	r2, r1, r8, lsr #25
   12774:	andeq	r2, r1, r8, lsr #25
   12778:	andeq	r2, r1, r8, lsr #25
   1277c:	andeq	r2, r1, r8, lsr #25
   12780:	andeq	r2, r1, r8, lsr #25
   12784:	andeq	r2, r1, r8, lsr #25
   12788:	andeq	r2, r1, r8, lsr #25
   1278c:	andeq	r2, r1, r8, lsr #25
   12790:	andeq	r2, r1, r8, lsr #25
   12794:	andeq	r2, r1, r8, lsr #25
   12798:	andeq	r2, r1, r8, lsr #25
   1279c:	andeq	r2, r1, r8, lsr #25
   127a0:	andeq	r2, r1, r8, lsr #25
   127a4:	andeq	r2, r1, r8, lsr #25
   127a8:	andeq	r2, r1, r8, lsr #25
   127ac:	andeq	r2, r1, r8, lsr #25
   127b0:	andeq	r2, r1, r8, lsr #25
   127b4:	andeq	r2, r1, r8, lsr #25
   127b8:	andeq	r2, r1, r8, lsr #25
   127bc:	andeq	r2, r1, r8, lsr #25
   127c0:	andeq	r2, r1, r8, lsr #25
   127c4:	andeq	r2, r1, r8, lsr #25
   127c8:	andeq	r2, r1, r8, lsr #25
   127cc:	andeq	r2, r1, r8, lsr #25
   127d0:	andeq	r2, r1, r8, lsr #25
   127d4:	andeq	r2, r1, r8, lsr #25
   127d8:	andeq	r2, r1, r8, lsr #25
   127dc:	andeq	r2, r1, r8, lsr #25
   127e0:	andeq	r2, r1, r8, lsr #25
   127e4:	andeq	r2, r1, r8, lsr #25
   127e8:	andeq	r2, r1, r8, lsr #25
   127ec:	andeq	r2, r1, r8, lsr #25
   127f0:	andeq	r2, r1, r8, lsr #25
   127f4:	andeq	r2, r1, r8, lsr #25
   127f8:	andeq	r2, r1, r8, lsr #25
   127fc:	andeq	r2, r1, r8, lsr #25
   12800:	andeq	r2, r1, r8, lsr #25
   12804:	andeq	r2, r1, r8, lsr #25
   12808:	andeq	r2, r1, r8, lsr #25
   1280c:	andeq	r2, r1, r8, lsr #25
   12810:	andeq	r2, r1, r8, lsr #25
   12814:	andeq	r2, r1, r8, lsr #25
   12818:	andeq	r2, r1, r8, lsr #25
   1281c:	andeq	r2, r1, r8, lsr #25
   12820:	andeq	r2, r1, r8, lsr #25
   12824:	andeq	r2, r1, r8, lsr #25
   12828:	andeq	r2, r1, r8, lsr #25
   1282c:	andeq	r2, r1, r8, lsr #25
   12830:	andeq	r2, r1, r8, lsr #25
   12834:	andeq	r2, r1, r8, lsr #25
   12838:	andeq	r2, r1, r8, lsr #25
   1283c:	andeq	r2, r1, r8, lsr #25
   12840:	andeq	r2, r1, r8, lsr #25
   12844:	andeq	r2, r1, r8, lsr #25
   12848:	andeq	r2, r1, r8, lsr #25
   1284c:	andeq	r2, r1, r8, lsr #25
   12850:	andeq	r2, r1, r8, lsr #25
   12854:	andeq	r2, r1, r8, lsr #25
   12858:	andeq	r2, r1, r8, lsr #25
   1285c:	andeq	r2, r1, r8, lsr #25
   12860:	andeq	r2, r1, r8, lsr #25
   12864:	andeq	r2, r1, r4, lsr #17
   12868:	andeq	r2, r1, r0, lsl #23
   1286c:	andeq	r2, r1, ip, ror #22
   12870:	strdeq	r2, [r1], -r4
   12874:	andeq	r2, r1, r8, lsr #25
   12878:	andeq	r2, r1, r8, lsr #23
   1287c:	andeq	r2, r1, r0, lsr #24
   12880:	muleq	r1, ip, fp
   12884:	mov	sl, #72	; 0x48
   12888:	b	12414 <__assert_fail@plt+0x870>
   1288c:	mov	r3, #1
   12890:	strb	r3, [r4, #28]
   12894:	b	12414 <__assert_fail@plt+0x870>
   12898:	mov	r3, #1
   1289c:	strb	r3, [r4, #36]	; 0x24
   128a0:	b	12414 <__assert_fail@plt+0x870>
   128a4:	mov	r3, #1
   128a8:	strb	r3, [r4, #37]	; 0x25
   128ac:	b	12414 <__assert_fail@plt+0x870>
   128b0:	mov	r3, #1
   128b4:	strb	r3, [r4, #37]	; 0x25
   128b8:	mov	r3, #0
   128bc:	str	r3, [r4]
   128c0:	mov	r2, #1
   128c4:	mov	r3, #0
   128c8:	strd	r2, [r4, #8]
   128cc:	b	12414 <__assert_fail@plt+0x870>
   128d0:	mov	r3, #1
   128d4:	strb	r3, [r4, #38]	; 0x26
   128d8:	b	12414 <__assert_fail@plt+0x870>
   128dc:	mov	r3, #176	; 0xb0
   128e0:	str	r3, [r4]
   128e4:	mov	r2, #1
   128e8:	mov	r3, #0
   128ec:	strd	r2, [r4, #8]
   128f0:	b	12414 <__assert_fail@plt+0x870>
   128f4:	mov	r3, #144	; 0x90
   128f8:	str	r3, [r4]
   128fc:	mov	r2, #1
   12900:	mov	r3, #0
   12904:	strd	r2, [r4, #8]
   12908:	b	12414 <__assert_fail@plt+0x870>
   1290c:	mov	r3, #0
   12910:	str	r3, [r4]
   12914:	mov	r2, #1024	; 0x400
   12918:	mov	r3, #0
   1291c:	strd	r2, [r4, #8]
   12920:	b	12414 <__assert_fail@plt+0x870>
   12924:	movw	r0, #12864	; 0x3240
   12928:	movt	r0, #4
   1292c:	movw	r3, #8476	; 0x211c
   12930:	movt	r3, #3
   12934:	str	r3, [sp]
   12938:	add	r3, sp, #144	; 0x90
   1293c:	mov	r2, #0
   12940:	mov	r1, r2
   12944:	ldr	r0, [r0]
   12948:	bl	2ea4c <__assert_fail@plt+0x1cea8>
   1294c:	cmp	r0, #0
   12950:	bne	1298c <__assert_fail@plt+0xde8>
   12954:	ldrd	r2, [sp, #144]	; 0x90
   12958:	mvn	r0, #0
   1295c:	mov	r1, #0
   12960:	strd	r2, [sp, #48]	; 0x30
   12964:	cmp	r3, r1
   12968:	cmpeq	r2, r0
   1296c:	bhi	1298c <__assert_fail@plt+0xde8>
   12970:	movw	r3, #12748	; 0x31cc
   12974:	movt	r3, #4
   12978:	ldr	r2, [sp, #48]	; 0x30
   1297c:	str	r2, [r3]
   12980:	mov	r3, #1
   12984:	str	r3, [sp, #44]	; 0x2c
   12988:	b	12414 <__assert_fail@plt+0x870>
   1298c:	mov	r2, #5
   12990:	movw	r1, #6576	; 0x19b0
   12994:	movt	r1, #3
   12998:	mov	r0, #0
   1299c:	bl	117d8 <dcgettext@plt>
   129a0:	str	r0, [sp, #56]	; 0x38
   129a4:	movw	r3, #12864	; 0x3240
   129a8:	movt	r3, #4
   129ac:	ldr	r0, [r3]
   129b0:	bl	1f584 <__assert_fail@plt+0xd9e0>
   129b4:	mov	r3, r0
   129b8:	ldr	r2, [sp, #56]	; 0x38
   129bc:	mov	r1, #0
   129c0:	mov	r0, r1
   129c4:	bl	118bc <error@plt>
   129c8:	mov	r3, #0
   129cc:	str	r3, [sp, #56]	; 0x38
   129d0:	b	12414 <__assert_fail@plt+0x870>
   129d4:	mov	r3, #0
   129d8:	str	r3, [r4]
   129dc:	mov	r2, #1048576	; 0x100000
   129e0:	mov	r3, #0
   129e4:	strd	r2, [r4, #8]
   129e8:	b	12414 <__assert_fail@plt+0x870>
   129ec:	mov	r3, #1
   129f0:	strb	r3, [r4, #39]	; 0x27
   129f4:	b	12414 <__assert_fail@plt+0x870>
   129f8:	movw	r0, #12864	; 0x3240
   129fc:	movt	r0, #4
   12a00:	movw	r3, #6604	; 0x19cc
   12a04:	movt	r3, #3
   12a08:	str	r3, [sp]
   12a0c:	add	r3, r4, #40	; 0x28
   12a10:	mov	r2, #0
   12a14:	mov	r1, r2
   12a18:	ldr	r0, [r0]
   12a1c:	bl	2e22c <__assert_fail@plt+0x1c688>
   12a20:	cmp	r0, #0
   12a24:	bne	12a70 <__assert_fail@plt+0xecc>
   12a28:	ldrd	r2, [r4, #40]	; 0x28
   12a2c:	orrs	r3, r2, r3
   12a30:	bne	12414 <__assert_fail@plt+0x870>
   12a34:	movw	r3, #12864	; 0x3240
   12a38:	movt	r3, #4
   12a3c:	ldr	r3, [r3]
   12a40:	ldrb	r3, [r3]
   12a44:	cmp	r3, #45	; 0x2d
   12a48:	bne	12414 <__assert_fail@plt+0x870>
   12a4c:	mov	r2, #5
   12a50:	movw	r1, #6616	; 0x19d8
   12a54:	movt	r1, #3
   12a58:	mov	r0, #0
   12a5c:	bl	117d8 <dcgettext@plt>
   12a60:	mov	r2, r0
   12a64:	mov	r1, #0
   12a68:	mov	r0, #1
   12a6c:	bl	118bc <error@plt>
   12a70:	movw	r3, #12864	; 0x3240
   12a74:	movt	r3, #4
   12a78:	ldr	r3, [r3]
   12a7c:	str	r3, [sp]
   12a80:	ldr	r3, [pc, #3600]	; 13898 <__assert_fail@plt+0x1cf4>
   12a84:	mov	r2, #116	; 0x74
   12a88:	ldr	r1, [sp, #140]	; 0x8c
   12a8c:	bl	2e868 <__assert_fail@plt+0x1ccc4>
   12a90:	movw	r3, #12864	; 0x3240
   12a94:	movt	r3, #4
   12a98:	ldr	r2, [sp, #40]	; 0x28
   12a9c:	mov	r1, r4
   12aa0:	ldr	r0, [r3]
   12aa4:	bl	1b894 <__assert_fail@plt+0x9cf0>
   12aa8:	cmp	r0, #0
   12aac:	beq	12414 <__assert_fail@plt+0x870>
   12ab0:	movw	r3, #12864	; 0x3240
   12ab4:	movt	r3, #4
   12ab8:	ldr	r3, [r3]
   12abc:	str	r3, [sp]
   12ac0:	ldr	r3, [pc, #3536]	; 13898 <__assert_fail@plt+0x1cf4>
   12ac4:	mov	r2, #66	; 0x42
   12ac8:	ldr	r1, [sp, #140]	; 0x8c
   12acc:	bl	2e868 <__assert_fail@plt+0x1ccc4>
   12ad0:	mov	r9, #17
   12ad4:	b	12414 <__assert_fail@plt+0x870>
   12ad8:	mov	r9, #2
   12adc:	b	12414 <__assert_fail@plt+0x870>
   12ae0:	mov	r9, #16
   12ae4:	b	12414 <__assert_fail@plt+0x870>
   12ae8:	mov	r3, #1
   12aec:	strb	r3, [r4, #48]	; 0x30
   12af0:	b	12414 <__assert_fail@plt+0x870>
   12af4:	movw	r2, #12864	; 0x3240
   12af8:	movt	r2, #4
   12afc:	mov	r3, #10
   12b00:	str	r3, [sp]
   12b04:	mov	r3, #268435456	; 0x10000000
   12b08:	ldr	r2, [r2]
   12b0c:	ldr	r1, [r4, #32]
   12b10:	movw	r0, #21552	; 0x5430
   12b14:	movt	r0, #1
   12b18:	bl	15944 <__assert_fail@plt+0x3da0>
   12b1c:	cmp	r0, #0
   12b20:	beq	12414 <__assert_fail@plt+0x870>
   12b24:	bl	119b8 <__errno_location@plt>
   12b28:	ldr	r3, [r0]
   12b2c:	str	r3, [sp, #56]	; 0x38
   12b30:	movw	r3, #12864	; 0x3240
   12b34:	movt	r3, #4
   12b38:	ldr	r2, [r3]
   12b3c:	mov	r1, #3
   12b40:	mov	r0, #0
   12b44:	bl	1f3b8 <__assert_fail@plt+0xd814>
   12b48:	mov	r3, r0
   12b4c:	movw	r2, #8212	; 0x2014
   12b50:	movt	r2, #3
   12b54:	ldr	r1, [sp, #56]	; 0x38
   12b58:	mov	r0, #0
   12b5c:	bl	118bc <error@plt>
   12b60:	mov	r3, #0
   12b64:	str	r3, [sp, #56]	; 0x38
   12b68:	b	12414 <__assert_fail@plt+0x870>
   12b6c:	movw	r3, #12864	; 0x3240
   12b70:	movt	r3, #4
   12b74:	ldr	r3, [r3]
   12b78:	str	r3, [sp, #28]
   12b7c:	b	12414 <__assert_fail@plt+0x870>
   12b80:	movw	r3, #12864	; 0x3240
   12b84:	movt	r3, #4
   12b88:	mov	r2, #268435456	; 0x10000000
   12b8c:	ldr	r1, [r3]
   12b90:	ldr	r0, [r4, #32]
   12b94:	bl	15430 <__assert_fail@plt+0x388c>
   12b98:	b	12414 <__assert_fail@plt+0x870>
   12b9c:	mov	r3, #1
   12ba0:	strb	r3, [r4, #16]
   12ba4:	b	12414 <__assert_fail@plt+0x870>
   12ba8:	mov	r3, #1
   12bac:	strb	r3, [r4, #17]
   12bb0:	movw	r3, #12864	; 0x3240
   12bb4:	movt	r3, #4
   12bb8:	ldr	r1, [r3]
   12bbc:	cmp	r1, #0
   12bc0:	moveq	r3, #0
   12bc4:	beq	12c04 <__assert_fail@plt+0x1060>
   12bc8:	mov	r3, #1
   12bcc:	str	r3, [sp, #8]
   12bd0:	movw	r3, #12756	; 0x31d4
   12bd4:	movt	r3, #4
   12bd8:	ldr	r3, [r3]
   12bdc:	str	r3, [sp, #4]
   12be0:	mov	r3, #4
   12be4:	str	r3, [sp]
   12be8:	add	r3, r8, #472	; 0x1d8
   12bec:	add	r2, r8, #492	; 0x1ec
   12bf0:	movw	r0, #6652	; 0x19fc
   12bf4:	movt	r0, #3
   12bf8:	bl	14324 <__assert_fail@plt+0x2780>
   12bfc:	add	r0, r8, r0, lsl #2
   12c00:	ldr	r3, [r0, #472]	; 0x1d8
   12c04:	str	r3, [r4, #52]	; 0x34
   12c08:	movw	r0, #6660	; 0x1a04
   12c0c:	movt	r0, #3
   12c10:	bl	118ec <getenv@plt>
   12c14:	bl	2d034 <__assert_fail@plt+0x1b490>
   12c18:	str	r0, [r4, #24]
   12c1c:	b	12414 <__assert_fail@plt+0x870>
   12c20:	movw	r3, #12864	; 0x3240
   12c24:	movt	r3, #4
   12c28:	ldr	r3, [r3]
   12c2c:	str	r3, [r4, #56]	; 0x38
   12c30:	b	12414 <__assert_fail@plt+0x870>
   12c34:	mov	r0, #0
   12c38:	bl	11ea4 <__assert_fail@plt+0x300>
   12c3c:	movw	r3, #12752	; 0x31d0
   12c40:	movt	r3, #4
   12c44:	movw	r0, #12860	; 0x323c
   12c48:	movt	r0, #4
   12c4c:	mov	r4, #0
   12c50:	str	r4, [sp, #16]
   12c54:	movw	r2, #6664	; 0x1a08
   12c58:	movt	r2, #3
   12c5c:	str	r2, [sp, #12]
   12c60:	movw	r2, #6680	; 0x1a18
   12c64:	movt	r2, #3
   12c68:	str	r2, [sp, #8]
   12c6c:	movw	r2, #6692	; 0x1a24
   12c70:	movt	r2, #3
   12c74:	str	r2, [sp, #4]
   12c78:	movw	r2, #6708	; 0x1a34
   12c7c:	movt	r2, #3
   12c80:	str	r2, [sp]
   12c84:	ldr	r3, [r3]
   12c88:	movw	r2, #6324	; 0x18b4
   12c8c:	movt	r2, #3
   12c90:	movw	r1, #2580	; 0xa14
   12c94:	movt	r1, #3
   12c98:	ldr	r0, [r0]
   12c9c:	bl	2da94 <__assert_fail@plt+0x1bef0>
   12ca0:	mov	r0, r4
   12ca4:	bl	11970 <exit@plt>
   12ca8:	mov	r3, #0
   12cac:	str	r3, [sp, #56]	; 0x38
   12cb0:	b	12414 <__assert_fail@plt+0x870>
   12cb4:	mov	fp, #1
   12cb8:	b	12414 <__assert_fail@plt+0x870>
   12cbc:	ldr	r3, [sp, #56]	; 0x38
   12cc0:	cmp	r3, #0
   12cc4:	beq	12d3c <__assert_fail@plt+0x1198>
   12cc8:	movw	r3, #12872	; 0x3248
   12ccc:	movt	r3, #4
   12cd0:	ldrb	r3, [r3, #36]	; 0x24
   12cd4:	ands	r3, fp, r3
   12cd8:	str	r3, [sp, #84]	; 0x54
   12cdc:	bne	12d44 <__assert_fail@plt+0x11a0>
   12ce0:	ldr	r3, [sp, #44]	; 0x2c
   12ce4:	tst	r3, fp
   12ce8:	beq	13d3c <__assert_fail@plt+0x2198>
   12cec:	movw	r3, #12748	; 0x31cc
   12cf0:	movt	r3, #4
   12cf4:	ldr	r3, [r3]
   12cf8:	cmp	r3, #0
   12cfc:	beq	12d70 <__assert_fail@plt+0x11cc>
   12d00:	movw	r3, #12748	; 0x31cc
   12d04:	movt	r3, #4
   12d08:	ldr	r4, [r3]
   12d0c:	mov	r2, #5
   12d10:	movw	r1, #6828	; 0x1aac
   12d14:	movt	r1, #3
   12d18:	mov	r0, #0
   12d1c:	bl	117d8 <dcgettext@plt>
   12d20:	mov	r3, r4
   12d24:	mov	r2, r0
   12d28:	mov	r1, #0
   12d2c:	mov	r0, r1
   12d30:	bl	118bc <error@plt>
   12d34:	mov	r0, #1
   12d38:	bl	11ea4 <__assert_fail@plt+0x300>
   12d3c:	mov	r0, #1
   12d40:	bl	11ea4 <__assert_fail@plt+0x300>
   12d44:	mov	r2, #5
   12d48:	movw	r1, #6728	; 0x1a48
   12d4c:	movt	r1, #3
   12d50:	mov	r0, #0
   12d54:	bl	117d8 <dcgettext@plt>
   12d58:	mov	r2, r0
   12d5c:	mov	r1, #0
   12d60:	mov	r0, r1
   12d64:	bl	118bc <error@plt>
   12d68:	mov	r0, #1
   12d6c:	bl	11ea4 <__assert_fail@plt+0x300>
   12d70:	mov	r2, #5
   12d74:	movw	r1, #6772	; 0x1a74
   12d78:	movt	r1, #3
   12d7c:	mov	r0, #0
   12d80:	bl	117d8 <dcgettext@plt>
   12d84:	mov	r2, r0
   12d88:	mov	r1, #0
   12d8c:	mov	r0, r1
   12d90:	bl	118bc <error@plt>
   12d94:	movw	r3, #12748	; 0x31cc
   12d98:	movt	r3, #4
   12d9c:	ldr	r4, [r3]
   12da0:	cmp	r4, #0
   12da4:	bne	12d0c <__assert_fail@plt+0x1168>
   12da8:	movw	r3, #12748	; 0x31cc
   12dac:	movt	r3, #4
   12db0:	mov	r2, #0
   12db4:	str	r2, [r3]
   12db8:	b	13d44 <__assert_fail@plt+0x21a0>
   12dbc:	mov	r2, #5
   12dc0:	movw	r1, #6880	; 0x1ae0
   12dc4:	movt	r1, #3
   12dc8:	mov	r0, #0
   12dcc:	bl	117d8 <dcgettext@plt>
   12dd0:	mov	r2, r0
   12dd4:	mov	r1, #0
   12dd8:	mov	r0, r1
   12ddc:	bl	118bc <error@plt>
   12de0:	b	13d6c <__assert_fail@plt+0x21c8>
   12de4:	movw	r0, #6952	; 0x1b28
   12de8:	movt	r0, #3
   12dec:	bl	118ec <getenv@plt>
   12df0:	mov	r4, r0
   12df4:	movw	r3, #12872	; 0x3248
   12df8:	movt	r3, #4
   12dfc:	str	r0, [r3, #56]	; 0x38
   12e00:	cmp	r0, #0
   12e04:	beq	12e1c <__assert_fail@plt+0x1278>
   12e08:	movw	r1, #6964	; 0x1b34
   12e0c:	movt	r1, #3
   12e10:	bl	1170c <strcmp@plt>
   12e14:	cmp	r0, #0
   12e18:	bne	12ea8 <__assert_fail@plt+0x1304>
   12e1c:	movw	r3, #12872	; 0x3248
   12e20:	movt	r3, #4
   12e24:	movw	r4, #6496	; 0x1960
   12e28:	movt	r4, #3
   12e2c:	str	r4, [r3, #56]	; 0x38
   12e30:	movw	r7, #1960	; 0x7a8
   12e34:	movt	r7, #3
   12e38:	mov	r3, #1
   12e3c:	str	r3, [sp, #8]
   12e40:	movw	r3, #12756	; 0x31d4
   12e44:	movt	r3, #4
   12e48:	ldr	r3, [r3]
   12e4c:	str	r3, [sp, #4]
   12e50:	mov	r3, #4
   12e54:	str	r3, [sp]
   12e58:	add	r3, r7, #524	; 0x20c
   12e5c:	add	r2, r7, #536	; 0x218
   12e60:	mov	r1, r4
   12e64:	movw	r0, #6972	; 0x1b3c
   12e68:	movt	r0, #3
   12e6c:	bl	14324 <__assert_fail@plt+0x2780>
   12e70:	add	r0, r7, r0, lsl #2
   12e74:	ldr	r3, [r0, #524]	; 0x20c
   12e78:	cmp	r3, #1
   12e7c:	beq	12f28 <__assert_fail@plt+0x1384>
   12e80:	cmp	r3, #0
   12e84:	beq	12f10 <__assert_fail@plt+0x136c>
   12e88:	cmp	r3, #2
   12e8c:	bne	13dd0 <__assert_fail@plt+0x222c>
   12e90:	movw	r3, #12872	; 0x3248
   12e94:	movt	r3, #4
   12e98:	movw	r2, #7024	; 0x1b70
   12e9c:	movt	r2, #3
   12ea0:	str	r2, [r3, #20]
   12ea4:	b	13dd0 <__assert_fail@plt+0x222c>
   12ea8:	ldrb	r3, [r4]
   12eac:	cmp	r3, #43	; 0x2b
   12eb0:	beq	12ec8 <__assert_fail@plt+0x1324>
   12eb4:	movw	r7, #12872	; 0x3248
   12eb8:	movt	r7, #4
   12ebc:	ldr	r8, [pc, #2520]	; 1389c <__assert_fail@plt+0x1cf8>
   12ec0:	mov	fp, #6
   12ec4:	b	12ef0 <__assert_fail@plt+0x134c>
   12ec8:	mov	r1, #10
   12ecc:	mov	r0, r4
   12ed0:	bl	11994 <strchr@plt>
   12ed4:	cmp	r0, #0
   12ed8:	beq	13dc0 <__assert_fail@plt+0x221c>
   12edc:	mov	r3, #0
   12ee0:	strb	r3, [r0]
   12ee4:	b	13da8 <__assert_fail@plt+0x2204>
   12ee8:	add	r4, r4, #6
   12eec:	str	r4, [r7, #56]	; 0x38
   12ef0:	ldr	r4, [r7, #56]	; 0x38
   12ef4:	mov	r2, fp
   12ef8:	mov	r1, r8
   12efc:	mov	r0, r4
   12f00:	bl	11b5c <strncmp@plt>
   12f04:	cmp	r0, #0
   12f08:	beq	12ee8 <__assert_fail@plt+0x1344>
   12f0c:	b	13da8 <__assert_fail@plt+0x2204>
   12f10:	movw	r3, #12872	; 0x3248
   12f14:	movt	r3, #4
   12f18:	movw	r2, #6984	; 0x1b48
   12f1c:	movt	r2, #3
   12f20:	str	r2, [r3, #20]
   12f24:	b	13dd0 <__assert_fail@plt+0x222c>
   12f28:	movw	r3, #12872	; 0x3248
   12f2c:	movt	r3, #4
   12f30:	movw	r2, #7008	; 0x1b60
   12f34:	movt	r2, #3
   12f38:	str	r2, [r3, #20]
   12f3c:	b	13dd0 <__assert_fail@plt+0x222c>
   12f40:	mov	r2, #5
   12f44:	movw	r1, #7036	; 0x1b7c
   12f48:	movt	r1, #3
   12f4c:	mov	r0, #0
   12f50:	bl	117d8 <dcgettext@plt>
   12f54:	mov	r4, r0
   12f58:	movw	r3, #12840	; 0x3228
   12f5c:	movt	r3, #4
   12f60:	ldr	r3, [r3]
   12f64:	ldr	r0, [r5, r3, lsl #2]
   12f68:	bl	1f584 <__assert_fail@plt+0xd9e0>
   12f6c:	mov	r3, r0
   12f70:	mov	r2, r4
   12f74:	mov	r1, #0
   12f78:	mov	r0, r1
   12f7c:	bl	118bc <error@plt>
   12f80:	movw	r3, #12848	; 0x3230
   12f84:	movt	r3, #4
   12f88:	ldr	r4, [r3]
   12f8c:	mov	r2, #5
   12f90:	movw	r1, #7056	; 0x1b90
   12f94:	movt	r1, #3
   12f98:	mov	r0, #0
   12f9c:	bl	117d8 <dcgettext@plt>
   12fa0:	mov	r3, r0
   12fa4:	movw	r2, #9820	; 0x265c
   12fa8:	movt	r2, #3
   12fac:	mov	r1, #1
   12fb0:	mov	r0, r4
   12fb4:	bl	11a18 <__fprintf_chk@plt>
   12fb8:	mov	r0, #1
   12fbc:	bl	11ea4 <__assert_fail@plt+0x300>
   12fc0:	bl	119b8 <__errno_location@plt>
   12fc4:	ldr	r4, [r0]
   12fc8:	mov	r2, #5
   12fcc:	movw	r1, #7112	; 0x1bc8
   12fd0:	movt	r1, #3
   12fd4:	mov	r0, #0
   12fd8:	bl	117d8 <dcgettext@plt>
   12fdc:	mov	r5, r0
   12fe0:	ldr	r1, [sp, #28]
   12fe4:	mov	r0, #4
   12fe8:	bl	1f294 <__assert_fail@plt+0xd6f0>
   12fec:	mov	r3, r0
   12ff0:	mov	r2, r5
   12ff4:	mov	r1, r4
   12ff8:	mov	r0, #1
   12ffc:	bl	118bc <error@plt>
   13000:	movw	r3, #12840	; 0x3228
   13004:	movt	r3, #4
   13008:	ldr	r3, [r3]
   1300c:	cmp	r3, r6
   13010:	addlt	r0, r5, r3, lsl #2
   13014:	addge	r0, sp, #248	; 0xf8
   13018:	bl	1442c <__assert_fail@plt+0x2888>
   1301c:	str	r0, [sp, #44]	; 0x2c
   13020:	movw	r3, #12872	; 0x3248
   13024:	movt	r3, #4
   13028:	movw	r2, #12840	; 0x3228
   1302c:	movt	r2, #4
   13030:	ldr	r1, [r2]
   13034:	add	r1, r1, #1
   13038:	cmp	r9, #2
   1303c:	movne	r2, #0
   13040:	moveq	r2, #1
   13044:	cmp	r1, r6
   13048:	movge	r6, r2
   1304c:	orrlt	r6, r2, #1
   13050:	strb	r6, [r3, #60]	; 0x3c
   13054:	b	13e54 <__assert_fail@plt+0x22b0>
   13058:	bl	2e000 <__assert_fail@plt+0x1c45c>
   1305c:	bl	2e000 <__assert_fail@plt+0x1c45c>
   13060:	ldr	r3, [sp, #140]	; 0x8c
   13064:	cmp	r3, #3
   13068:	beq	13178 <__assert_fail@plt+0x15d4>
   1306c:	cmp	r3, #4
   13070:	beq	13098 <__assert_fail@plt+0x14f4>
   13074:	cmp	r3, #2
   13078:	beq	130e4 <__assert_fail@plt+0x1540>
   1307c:	ldr	r3, [pc, #2076]	; 138a0 <__assert_fail@plt+0x1cfc>
   13080:	movw	r2, #1081	; 0x439
   13084:	movw	r1, #7156	; 0x1bf4
   13088:	movt	r1, #3
   1308c:	movw	r0, #7168	; 0x1c00
   13090:	movt	r0, #3
   13094:	bl	11ba4 <__assert_fail@plt>
   13098:	bl	119b8 <__errno_location@plt>
   1309c:	ldr	r4, [r0]
   130a0:	mov	r2, #5
   130a4:	movw	r1, #7140	; 0x1be4
   130a8:	movt	r1, #3
   130ac:	mov	r0, #0
   130b0:	bl	117d8 <dcgettext@plt>
   130b4:	mov	r5, r0
   130b8:	ldr	r2, [sp, #28]
   130bc:	mov	r1, #3
   130c0:	mov	r0, #0
   130c4:	bl	1f3b8 <__assert_fail@plt+0xd814>
   130c8:	mov	r3, r0
   130cc:	mov	r2, r5
   130d0:	mov	r1, r4
   130d4:	mov	r0, #0
   130d8:	bl	118bc <error@plt>
   130dc:	ldr	r3, [sp, #84]	; 0x54
   130e0:	str	r3, [sp, #72]	; 0x48
   130e4:	ldr	r0, [sp, #44]	; 0x2c
   130e8:	bl	14588 <__assert_fail@plt+0x29e4>
   130ec:	movw	r4, #12872	; 0x3248
   130f0:	movt	r4, #4
   130f4:	ldr	r0, [r4, #64]	; 0x40
   130f8:	bl	14940 <__assert_fail@plt+0x2d9c>
   130fc:	ldr	r0, [r4, #80]	; 0x50
   13100:	cmp	r0, #0
   13104:	beq	1310c <__assert_fail@plt+0x1568>
   13108:	bl	14940 <__assert_fail@plt+0x2d9c>
   1310c:	ldr	r3, [sp, #28]
   13110:	cmp	r3, #0
   13114:	beq	1313c <__assert_fail@plt+0x1598>
   13118:	movw	r3, #12856	; 0x3238
   1311c:	movt	r3, #4
   13120:	ldr	r0, [r3]
   13124:	ldr	r3, [r0]
   13128:	tst	r3, #32
   1312c:	beq	13c24 <__assert_fail@plt+0x2080>
   13130:	ldr	r3, [sp, #72]	; 0x48
   13134:	cmp	r3, #0
   13138:	bne	13c34 <__assert_fail@plt+0x2090>
   1313c:	movw	r3, #12872	; 0x3248
   13140:	movt	r3, #4
   13144:	ldrb	r3, [r3, #38]	; 0x26
   13148:	cmp	r3, #0
   1314c:	bne	13c6c <__assert_fail@plt+0x20c8>
   13150:	ldr	r3, [sp, #72]	; 0x48
   13154:	eor	r0, r3, #1
   13158:	uxtb	r0, r0
   1315c:	add	sp, sp, #260	; 0x104
   13160:	ldrd	r4, [sp]
   13164:	ldrd	r6, [sp, #8]
   13168:	ldrd	r8, [sp, #16]
   1316c:	ldrd	sl, [sp, #24]
   13170:	add	sp, sp, #32
   13174:	pop	{pc}		; (ldr pc, [sp], #4)
   13178:	bl	2e000 <__assert_fail@plt+0x1c45c>
   1317c:	mov	r2, #5
   13180:	ldr	r1, [sp, #112]	; 0x70
   13184:	mov	r0, #0
   13188:	bl	117d8 <dcgettext@plt>
   1318c:	mov	r3, r0
   13190:	movw	r2, #8212	; 0x2014
   13194:	movt	r2, #3
   13198:	mov	r1, #0
   1319c:	mov	r0, r1
   131a0:	bl	118bc <error@plt>
   131a4:	ldr	r3, [sp, #84]	; 0x54
   131a8:	str	r3, [sp, #72]	; 0x48
   131ac:	b	13f30 <__assert_fail@plt+0x238c>
   131b0:	ldr	r6, [sp, #48]	; 0x30
   131b4:	bl	119b8 <__errno_location@plt>
   131b8:	mov	r4, r0
   131bc:	ldr	r5, [r0]
   131c0:	cmp	r5, #0
   131c4:	bne	131f4 <__assert_fail@plt+0x1650>
   131c8:	mov	r3, #0
   131cc:	str	r3, [r7, #76]	; 0x4c
   131d0:	ldr	r0, [sp, #80]	; 0x50
   131d4:	bl	19434 <__assert_fail@plt+0x7890>
   131d8:	cmp	r0, #0
   131dc:	bne	13bf4 <__assert_fail@plt+0x2050>
   131e0:	ldr	r3, [sp, #72]	; 0x48
   131e4:	and	r3, r3, r6
   131e8:	uxtb	r3, r3
   131ec:	str	r3, [sp, #72]	; 0x48
   131f0:	b	13f30 <__assert_fail@plt+0x238c>
   131f4:	mov	r2, #5
   131f8:	movw	r1, #7316	; 0x1c94
   131fc:	movt	r1, #3
   13200:	mov	r0, #0
   13204:	bl	117d8 <dcgettext@plt>
   13208:	mov	r6, r0
   1320c:	ldr	r3, [sp, #80]	; 0x50
   13210:	ldr	r2, [r3, #24]
   13214:	mov	r1, #3
   13218:	mov	r0, #0
   1321c:	bl	1f3b8 <__assert_fail@plt+0xd814>
   13220:	mov	r3, r0
   13224:	mov	r2, r6
   13228:	mov	r1, r5
   1322c:	mov	r0, #0
   13230:	bl	118bc <error@plt>
   13234:	ldr	r6, [sp, #84]	; 0x54
   13238:	b	131c8 <__assert_fail@plt+0x1624>
   1323c:	ldr	r6, [r4, #32]
   13240:	mov	r2, #5
   13244:	movw	r1, #7336	; 0x1ca8
   13248:	movt	r1, #3
   1324c:	mov	r0, #0
   13250:	bl	117d8 <dcgettext@plt>
   13254:	mov	r8, r0
   13258:	ldr	r1, [sp, #76]	; 0x4c
   1325c:	mov	r0, #4
   13260:	bl	1f294 <__assert_fail@plt+0xd6f0>
   13264:	mov	r3, r0
   13268:	mov	r2, r8
   1326c:	mov	r1, r6
   13270:	mov	r0, #0
   13274:	bl	118bc <error@plt>
   13278:	ldr	r3, [sp, #84]	; 0x54
   1327c:	str	r3, [sp, #60]	; 0x3c
   13280:	b	13794 <__assert_fail@plt+0x1bf0>
   13284:	ldr	r1, [sp, #76]	; 0x4c
   13288:	ldr	r0, [r7, #32]
   1328c:	bl	15280 <__assert_fail@plt+0x36dc>
   13290:	subs	r6, r0, #0
   13294:	bne	132e8 <__assert_fail@plt+0x1744>
   13298:	cmp	r5, #11
   1329c:	beq	13328 <__assert_fail@plt+0x1784>
   132a0:	cmp	r5, #13
   132a4:	cmpne	r5, #10
   132a8:	moveq	r3, #1
   132ac:	movne	r3, #0
   132b0:	str	r3, [sp, #60]	; 0x3c
   132b4:	beq	13370 <__assert_fail@plt+0x17cc>
   132b8:	ldr	r2, [sp, #80]	; 0x50
   132bc:	ldr	r3, [r2, #48]	; 0x30
   132c0:	tst	r3, #64	; 0x40
   132c4:	beq	13c90 <__assert_fail@plt+0x20ec>
   132c8:	ldr	r3, [r4, #48]	; 0x30
   132cc:	cmp	r3, #0
   132d0:	ble	13c90 <__assert_fail@plt+0x20ec>
   132d4:	ldrd	r0, [r2, #16]
   132d8:	ldrd	r2, [r4, #64]	; 0x40
   132dc:	cmp	r1, r3
   132e0:	cmpeq	r0, r2
   132e4:	beq	13c90 <__assert_fail@plt+0x20ec>
   132e8:	cmp	r5, #1
   132ec:	ldrne	r3, [sp, #56]	; 0x38
   132f0:	strne	r3, [sp, #60]	; 0x3c
   132f4:	bne	1374c <__assert_fail@plt+0x1ba8>
   132f8:	mov	r2, #4
   132fc:	mov	r1, r4
   13300:	ldr	r5, [sp, #80]	; 0x50
   13304:	mov	r0, r5
   13308:	bl	19c40 <__assert_fail@plt+0x809c>
   1330c:	mov	r0, r5
   13310:	bl	195b0 <__assert_fail@plt+0x7a0c>
   13314:	cmp	r4, r0
   13318:	bne	133b8 <__assert_fail@plt+0x1814>
   1331c:	ldr	r3, [sp, #56]	; 0x38
   13320:	str	r3, [sp, #60]	; 0x3c
   13324:	b	1374c <__assert_fail@plt+0x1ba8>
   13328:	mov	r2, #1
   1332c:	mov	r1, r4
   13330:	ldr	r5, [sp, #80]	; 0x50
   13334:	mov	r0, r5
   13338:	bl	19c40 <__assert_fail@plt+0x809c>
   1333c:	mov	r0, r5
   13340:	bl	195b0 <__assert_fail@plt+0x7a0c>
   13344:	cmp	r4, r0
   13348:	bne	13354 <__assert_fail@plt+0x17b0>
   1334c:	ldrh	r5, [r4, #56]	; 0x38
   13350:	b	132a0 <__assert_fail@plt+0x16fc>
   13354:	ldr	r3, [pc, #1352]	; 138a4 <__assert_fail@plt+0x1d00>
   13358:	movw	r2, #527	; 0x20f
   1335c:	movw	r1, #7156	; 0x1bf4
   13360:	movt	r1, #3
   13364:	movw	r0, #7364	; 0x1cc4
   13368:	movt	r0, #3
   1336c:	bl	11ba4 <__assert_fail@plt>
   13370:	ldr	r4, [r4, #32]
   13374:	mov	r2, #5
   13378:	movw	r1, #7376	; 0x1cd0
   1337c:	movt	r1, #3
   13380:	mov	r0, #0
   13384:	bl	117d8 <dcgettext@plt>
   13388:	mov	r5, r0
   1338c:	ldr	r1, [sp, #76]	; 0x4c
   13390:	mov	r0, #4
   13394:	bl	1f294 <__assert_fail@plt+0xd6f0>
   13398:	mov	r3, r0
   1339c:	mov	r2, r5
   133a0:	mov	r1, r4
   133a4:	mov	r0, #0
   133a8:	bl	118bc <error@plt>
   133ac:	str	r6, [sp, #60]	; 0x3c
   133b0:	b	1374c <__assert_fail@plt+0x1ba8>
   133b4:	bl	2e000 <__assert_fail@plt+0x1c45c>
   133b8:	ldr	r3, [pc, #1252]	; 138a4 <__assert_fail@plt+0x1d00>
   133bc:	mov	r2, #560	; 0x230
   133c0:	movw	r1, #7156	; 0x1bf4
   133c4:	movt	r1, #3
   133c8:	movw	r0, #7364	; 0x1cc4
   133cc:	movt	r0, #3
   133d0:	bl	11ba4 <__assert_fail@plt>
   133d4:	ldr	r6, [r4, #32]
   133d8:	ldr	r2, [sp, #76]	; 0x4c
   133dc:	mov	r1, #3
   133e0:	mov	r0, #0
   133e4:	bl	1f3b8 <__assert_fail@plt+0xd814>
   133e8:	mov	r3, r0
   133ec:	movw	r2, #8212	; 0x2014
   133f0:	movt	r2, #3
   133f4:	mov	r1, r6
   133f8:	mov	r0, #0
   133fc:	bl	118bc <error@plt>
   13400:	b	13794 <__assert_fail@plt+0x1bf0>
   13404:	mov	r1, r4
   13408:	ldr	r0, [sp, #80]	; 0x50
   1340c:	bl	2e09c <__assert_fail@plt+0x1c4f8>
   13410:	cmp	r0, #0
   13414:	ldreq	r3, [sp, #56]	; 0x38
   13418:	streq	r3, [sp, #60]	; 0x3c
   1341c:	beq	1374c <__assert_fail@plt+0x1ba8>
   13420:	ldr	r5, [r4]
   13424:	ldr	r3, [r7, #80]	; 0x50
   13428:	cmp	r3, #0
   1342c:	beq	1346c <__assert_fail@plt+0x18c8>
   13430:	subs	r6, r5, r4
   13434:	movne	r6, #1
   13438:	cmp	r4, #0
   1343c:	moveq	r6, #0
   13440:	cmp	r6, #0
   13444:	beq	134f0 <__assert_fail@plt+0x194c>
   13448:	ldrd	r2, [r4, #160]	; 0xa0
   1344c:	strd	r2, [sp]
   13450:	ldrd	r2, [r4, #64]	; 0x40
   13454:	ldr	r0, [r7, #80]	; 0x50
   13458:	bl	149e0 <__assert_fail@plt+0x2e3c>
   1345c:	cmp	r0, #0
   13460:	bgt	13bec <__assert_fail@plt+0x2048>
   13464:	ldr	r4, [r4, #4]
   13468:	b	13430 <__assert_fail@plt+0x188c>
   1346c:	bl	148bc <__assert_fail@plt+0x2d18>
   13470:	str	r0, [r7, #80]	; 0x50
   13474:	cmp	r0, #0
   13478:	beq	13490 <__assert_fail@plt+0x18ec>
   1347c:	mov	r0, #0
   13480:	bl	1c824 <__assert_fail@plt+0xac80>
   13484:	mov	r6, r0
   13488:	mov	r9, #3
   1348c:	b	134a4 <__assert_fail@plt+0x1900>
   13490:	bl	2e000 <__assert_fail@plt+0x1c45c>
   13494:	ldr	r8, [r6, #28]
   13498:	mov	r0, r6
   1349c:	bl	1c7d4 <__assert_fail@plt+0xac30>
   134a0:	mov	r6, r8
   134a4:	cmp	r6, #0
   134a8:	beq	13430 <__assert_fail@plt+0x188c>
   134ac:	ldrb	r3, [r6, #24]
   134b0:	tst	r3, #3
   134b4:	bne	13494 <__assert_fail@plt+0x18f0>
   134b8:	add	r2, sp, #144	; 0x90
   134bc:	ldr	r1, [r6, #4]
   134c0:	mov	r0, r9
   134c4:	bl	11b38 <__xstat64@plt>
   134c8:	cmp	r0, #0
   134cc:	bne	13494 <__assert_fail@plt+0x18f0>
   134d0:	ldrd	r2, [sp, #240]	; 0xf0
   134d4:	strd	r2, [sp]
   134d8:	ldrd	r2, [sp, #144]	; 0x90
   134dc:	ldr	r0, [r7, #80]	; 0x50
   134e0:	bl	14980 <__assert_fail@plt+0x2ddc>
   134e4:	cmp	r0, #0
   134e8:	bge	13494 <__assert_fail@plt+0x18f0>
   134ec:	bl	2e000 <__assert_fail@plt+0x1c45c>
   134f0:	str	r6, [sp, #60]	; 0x3c
   134f4:	mov	r2, #5
   134f8:	movw	r1, #7468	; 0x1d2c
   134fc:	movt	r1, #3
   13500:	mov	r0, #0
   13504:	bl	117d8 <dcgettext@plt>
   13508:	mov	r4, r0
   1350c:	ldr	r2, [sp, #76]	; 0x4c
   13510:	mov	r1, #3
   13514:	mov	r0, #0
   13518:	bl	1f3b8 <__assert_fail@plt+0xd814>
   1351c:	mov	r3, r0
   13520:	mov	r2, r4
   13524:	mov	r1, #0
   13528:	mov	r0, r1
   1352c:	bl	118bc <error@plt>
   13530:	b	1374c <__assert_fail@plt+0x1ba8>
   13534:	ldr	r3, [r4, #128]	; 0x80
   13538:	ldr	r2, [r4, #132]	; 0x84
   1353c:	lsl	fp, r2, #9
   13540:	orr	fp, fp, r3, lsr #23
   13544:	lsl	sl, r3, #9
   13548:	b	137b4 <__assert_fail@plt+0x1c10>
   1354c:	cmp	r3, #2
   13550:	ldreq	r3, [r4, #136]	; 0x88
   13554:	streq	r3, [sp, #40]	; 0x28
   13558:	ldreq	r6, [r4, #140]	; 0x8c
   1355c:	beq	137cc <__assert_fail@plt+0x1c28>
   13560:	ldr	r3, [r4, #152]	; 0x98
   13564:	str	r3, [sp, #40]	; 0x28
   13568:	ldr	r6, [r4, #156]	; 0x9c
   1356c:	b	137cc <__assert_fail@plt+0x1c28>
   13570:	add	r0, r4, #10
   13574:	str	r0, [r7, #84]	; 0x54
   13578:	mov	r1, #48	; 0x30
   1357c:	bl	2dea8 <__assert_fail@plt+0x1c304>
   13580:	str	r0, [r7, #88]	; 0x58
   13584:	str	r4, [r7, #76]	; 0x4c
   13588:	ldrb	r3, [r7, #48]	; 0x30
   1358c:	cmp	r3, #0
   13590:	beq	135a0 <__assert_fail@plt+0x19fc>
   13594:	bic	r3, r5, #2
   13598:	cmp	r3, #4
   1359c:	beq	13648 <__assert_fail@plt+0x1aa4>
   135a0:	add	r2, r4, r4, lsl #1
   135a4:	lsl	r2, r2, #4
   135a8:	ldr	ip, [r7, #88]	; 0x58
   135ac:	add	r3, ip, r2
   135b0:	ldrd	r0, [ip, r2]
   135b4:	adds	lr, sl, r0
   135b8:	str	lr, [sp, #64]	; 0x40
   135bc:	adc	lr, fp, r1
   135c0:	str	lr, [sp, #68]	; 0x44
   135c4:	ldrd	r8, [sp, #64]	; 0x40
   135c8:	cmp	r1, r9
   135cc:	cmpeq	r0, r8
   135d0:	bls	135e0 <__assert_fail@plt+0x1a3c>
   135d4:	mvn	r0, #0
   135d8:	mvn	r1, #0
   135dc:	strd	r0, [sp, #64]	; 0x40
   135e0:	ldrd	r0, [sp, #64]	; 0x40
   135e4:	strd	r0, [ip, r2]
   135e8:	ldr	r2, [r3, #8]
   135ec:	ldr	r1, [r3, #12]
   135f0:	adds	r2, r2, #1
   135f4:	adc	r1, r1, #0
   135f8:	str	r2, [r3, #8]
   135fc:	str	r1, [r3, #12]
   13600:	ldr	r1, [r3, #16]
   13604:	ldr	r2, [r3, #20]
   13608:	ldr	ip, [sp, #40]	; 0x28
   1360c:	cmp	ip, r1
   13610:	movlt	r1, #1
   13614:	movge	r1, #0
   13618:	movgt	r0, #1
   1361c:	movle	r0, #0
   13620:	sub	r1, r1, r0
   13624:	cmp	r6, r2
   13628:	movlt	r2, #1
   1362c:	movge	r2, #0
   13630:	movgt	r0, #1
   13634:	movle	r0, #0
   13638:	sub	r2, r2, r0
   1363c:	adds	r2, r2, r1, lsl #1
   13640:	strmi	ip, [r3, #16]
   13644:	strmi	r6, [r3, #20]
   13648:	ldrd	r2, [r7, #96]	; 0x60
   1364c:	adds	r1, sl, r2
   13650:	str	r1, [sp, #32]
   13654:	adc	r1, fp, r3
   13658:	str	r1, [sp, #36]	; 0x24
   1365c:	ldrd	r0, [sp, #32]
   13660:	cmp	r3, r1
   13664:	cmpeq	r2, r0
   13668:	bls	13678 <__assert_fail@plt+0x1ad4>
   1366c:	mvn	r2, #0
   13670:	mvn	r3, #0
   13674:	strd	r2, [sp, #32]
   13678:	ldrd	r2, [sp, #32]
   1367c:	strd	r2, [r7, #96]	; 0x60
   13680:	ldr	r3, [r7, #104]	; 0x68
   13684:	ldr	r2, [r7, #108]	; 0x6c
   13688:	adds	r3, r3, #1
   1368c:	adc	r2, r2, #0
   13690:	str	r3, [r7, #104]	; 0x68
   13694:	str	r2, [r7, #108]	; 0x6c
   13698:	ldr	r2, [r7, #112]	; 0x70
   1369c:	ldr	r3, [r7, #116]	; 0x74
   136a0:	ldr	r0, [sp, #40]	; 0x28
   136a4:	cmp	r0, r2
   136a8:	movlt	r2, #1
   136ac:	movge	r2, #0
   136b0:	movgt	r1, #1
   136b4:	movle	r1, #0
   136b8:	sub	r2, r2, r1
   136bc:	cmp	r6, r3
   136c0:	movlt	r3, #1
   136c4:	movge	r3, #0
   136c8:	movgt	r1, #1
   136cc:	movle	r1, #0
   136d0:	sub	r3, r3, r1
   136d4:	adds	r3, r3, r2, lsl #1
   136d8:	strmi	r0, [r7, #112]	; 0x70
   136dc:	strmi	r6, [r7, #116]	; 0x74
   136e0:	bic	r5, r5, #2
   136e4:	cmp	r5, #4
   136e8:	beq	136f8 <__assert_fail@plt+0x1b54>
   136ec:	ldrb	r3, [r7, #36]	; 0x24
   136f0:	cmp	r3, #0
   136f4:	beq	1370c <__assert_fail@plt+0x1b68>
   136f8:	movw	r3, #12748	; 0x31cc
   136fc:	movt	r3, #4
   13700:	ldr	r3, [r3]
   13704:	cmp	r4, r3
   13708:	bls	13714 <__assert_fail@plt+0x1b70>
   1370c:	cmp	r4, #0
   13710:	bne	1374c <__assert_fail@plt+0x1ba8>
   13714:	ldrb	r3, [r7, #16]
   13718:	cmp	r3, #0
   1371c:	ldrdne	r0, [sp, #152]	; 0x98
   13720:	ldrdeq	r0, [sp, #144]	; 0x90
   13724:	ldrd	r2, [r7, #40]	; 0x28
   13728:	cmp	r2, #0
   1372c:	sbcs	ip, r3, #0
   13730:	blt	13bb4 <__assert_fail@plt+0x2010>
   13734:	cmp	r1, r3
   13738:	cmpeq	r0, r2
   1373c:	movcs	r3, #1
   13740:	movcc	r3, #0
   13744:	cmp	r3, #0
   13748:	bne	13bd0 <__assert_fail@plt+0x202c>
   1374c:	ldr	fp, [sp, #48]	; 0x30
   13750:	ldr	r3, [sp, #60]	; 0x3c
   13754:	and	fp, fp, r3
   13758:	uxtb	r3, fp
   1375c:	str	r3, [sp, #48]	; 0x30
   13760:	ldr	r0, [sp, #80]	; 0x50
   13764:	bl	195b0 <__assert_fail@plt+0x7a0c>
   13768:	subs	r4, r0, #0
   1376c:	beq	131b0 <__assert_fail@plt+0x160c>
   13770:	ldr	r3, [r4, #28]
   13774:	str	r3, [sp, #76]	; 0x4c
   13778:	ldrh	r5, [r4, #56]	; 0x38
   1377c:	cmp	r5, #4
   13780:	beq	1323c <__assert_fail@plt+0x1698>
   13784:	cmp	r5, #6
   13788:	bne	13284 <__assert_fail@plt+0x16e0>
   1378c:	ldr	r3, [sp, #56]	; 0x38
   13790:	str	r3, [sp, #60]	; 0x3c
   13794:	ldrb	r3, [r7, #37]	; 0x25
   13798:	cmp	r3, #0
   1379c:	beq	13534 <__assert_fail@plt+0x1990>
   137a0:	ldrd	sl, [r4, #112]	; 0x70
   137a4:	cmp	sl, #0
   137a8:	sbcs	r3, fp, #0
   137ac:	movlt	sl, #0
   137b0:	movlt	fp, #0
   137b4:	ldr	r3, [r7, #52]	; 0x34
   137b8:	cmp	r3, #0
   137bc:	bne	1354c <__assert_fail@plt+0x19a8>
   137c0:	ldr	r3, [r4, #144]	; 0x90
   137c4:	str	r3, [sp, #40]	; 0x28
   137c8:	ldr	r6, [r4, #148]	; 0x94
   137cc:	ldr	r4, [r4, #48]	; 0x30
   137d0:	strd	sl, [sp, #144]	; 0x90
   137d4:	mov	r2, #1
   137d8:	mov	r3, #0
   137dc:	strd	r2, [sp, #152]	; 0x98
   137e0:	ldr	r3, [sp, #40]	; 0x28
   137e4:	str	r3, [sp, #160]	; 0xa0
   137e8:	str	r6, [sp, #164]	; 0xa4
   137ec:	ldr	r3, [r7, #84]	; 0x54
   137f0:	cmp	r3, #0
   137f4:	beq	13570 <__assert_fail@plt+0x19cc>
   137f8:	ldr	r1, [r7, #76]	; 0x4c
   137fc:	cmp	r4, r1
   13800:	beq	13584 <__assert_fail@plt+0x19e0>
   13804:	bls	138ac <__assert_fail@plt+0x1d08>
   13808:	cmp	r4, r3
   1380c:	bcs	13878 <__assert_fail@plt+0x1cd4>
   13810:	ldr	r3, [r7, #76]	; 0x4c
   13814:	add	r2, r3, #1
   13818:	cmp	r4, r2
   1381c:	bcc	13584 <__assert_fail@plt+0x19e0>
   13820:	ldr	r1, [r7, #88]	; 0x58
   13824:	mov	r0, #48	; 0x30
   13828:	mla	r3, r0, r3, r1
   1382c:	mov	r0, #0
   13830:	mov	r1, #0
   13834:	mov	lr, #-2147483648	; 0x80000000
   13838:	mvn	ip, #0
   1383c:	ldr	r8, [sp, #40]	; 0x28
   13840:	strd	r0, [r3, #48]	; 0x30
   13844:	strd	r0, [r3, #56]	; 0x38
   13848:	str	lr, [r3, #64]	; 0x40
   1384c:	str	ip, [r3, #68]	; 0x44
   13850:	strd	r0, [r3, #72]	; 0x48
   13854:	strd	r0, [r3, #80]	; 0x50
   13858:	str	lr, [r3, #88]	; 0x58
   1385c:	str	ip, [r3, #92]	; 0x5c
   13860:	add	r2, r2, #1
   13864:	add	r3, r3, #48	; 0x30
   13868:	cmp	r4, r2
   1386c:	bcs	13840 <__assert_fail@plt+0x1c9c>
   13870:	str	r8, [sp, #40]	; 0x28
   13874:	b	13584 <__assert_fail@plt+0x19e0>
   13878:	mov	r2, #96	; 0x60
   1387c:	mov	r1, r4
   13880:	ldr	r0, [r7, #88]	; 0x58
   13884:	bl	2dc44 <__assert_fail@plt+0x1c0a0>
   13888:	str	r0, [r7, #88]	; 0x58
   1388c:	lsl	r3, r4, #1
   13890:	str	r3, [r7, #84]	; 0x54
   13894:	b	13810 <__assert_fail@plt+0x1c6c>
   13898:	andeq	r0, r3, r0, ror #15
   1389c:	andeq	r0, r3, ip, lsr #19
   138a0:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   138a4:	ldrdeq	r0, [r3], -r8
   138a8:	andeq	r3, r4, r8, lsr #5
   138ac:	sub	r3, r1, #1
   138b0:	cmp	r4, r3
   138b4:	bne	13ae0 <__assert_fail@plt+0x1f3c>
   138b8:	ldr	r2, [r7, #88]	; 0x58
   138bc:	mov	ip, #48	; 0x30
   138c0:	mul	ip, ip, r1
   138c4:	add	r3, r2, ip
   138c8:	ldr	r1, [r2, ip]
   138cc:	ldr	r0, [r3, #4]
   138d0:	adds	r1, sl, r1
   138d4:	str	r1, [sp, #96]	; 0x60
   138d8:	adc	r1, fp, r0
   138dc:	str	r1, [sp, #100]	; 0x64
   138e0:	ldrd	r0, [sp, #96]	; 0x60
   138e4:	cmp	fp, r1
   138e8:	cmpeq	sl, r0
   138ec:	bls	138fc <__assert_fail@plt+0x1d58>
   138f0:	mvn	r0, #0
   138f4:	mvn	r1, #0
   138f8:	strd	r0, [sp, #96]	; 0x60
   138fc:	ldrd	r0, [sp, #96]	; 0x60
   13900:	strd	r0, [sp, #144]	; 0x90
   13904:	ldr	r1, [r3, #8]
   13908:	ldr	r0, [r3, #12]
   1390c:	adds	lr, r1, #1
   13910:	str	lr, [sp, #128]	; 0x80
   13914:	adc	r1, r0, #0
   13918:	str	r1, [sp, #132]	; 0x84
   1391c:	str	lr, [sp, #152]	; 0x98
   13920:	str	r1, [sp, #156]	; 0x9c
   13924:	ldr	lr, [r3, #16]
   13928:	ldr	r1, [sp, #40]	; 0x28
   1392c:	cmp	r1, lr
   13930:	movgt	r9, #1
   13934:	movle	r9, #0
   13938:	movlt	lr, #1
   1393c:	movge	lr, #0
   13940:	sub	r9, r9, lr
   13944:	ldr	r1, [r3, #20]
   13948:	cmp	r6, r1
   1394c:	movgt	lr, #1
   13950:	movle	lr, #0
   13954:	movlt	r1, #1
   13958:	movge	r1, #0
   1395c:	sub	lr, lr, r1
   13960:	adds	r1, lr, r9, lsl #1
   13964:	ldrdmi	r8, [r3, #16]
   13968:	strdmi	r8, [sp, #160]	; 0xa0
   1396c:	ldrb	lr, [r7, #48]	; 0x30
   13970:	cmp	lr, #0
   13974:	beq	13afc <__assert_fail@plt+0x1f58>
   13978:	mov	lr, #48	; 0x30
   1397c:	mla	lr, lr, r4, r2
   13980:	ldrd	r0, [lr, #24]
   13984:	ldr	r9, [r2, ip]
   13988:	add	r2, r2, ip
   1398c:	ldr	r2, [r2, #4]
   13990:	adds	ip, r0, r9
   13994:	str	ip, [sp, #88]	; 0x58
   13998:	adc	r2, r1, r2
   1399c:	str	r2, [sp, #92]	; 0x5c
   139a0:	ldrd	r8, [sp, #88]	; 0x58
   139a4:	cmp	r1, r9
   139a8:	cmpeq	r0, r8
   139ac:	bls	139bc <__assert_fail@plt+0x1e18>
   139b0:	mvn	r0, #0
   139b4:	mvn	r1, #0
   139b8:	strd	r0, [sp, #88]	; 0x58
   139bc:	ldrd	r0, [sp, #88]	; 0x58
   139c0:	strd	r0, [lr, #24]
   139c4:	ldr	r2, [lr, #32]
   139c8:	ldr	r0, [lr, #36]	; 0x24
   139cc:	ldr	ip, [r3, #8]
   139d0:	ldr	r1, [r3, #12]
   139d4:	adds	r2, r2, ip
   139d8:	adc	r1, r0, r1
   139dc:	str	r1, [sp, #128]	; 0x80
   139e0:	str	r2, [lr, #32]
   139e4:	str	r1, [lr, #36]	; 0x24
   139e8:	ldr	ip, [lr, #40]	; 0x28
   139ec:	ldr	r9, [lr, #44]	; 0x2c
   139f0:	ldr	r0, [r3, #16]
   139f4:	cmp	ip, r0
   139f8:	movgt	ip, #1
   139fc:	movle	ip, #0
   13a00:	movlt	r0, #1
   13a04:	movge	r0, #0
   13a08:	sub	ip, ip, r0
   13a0c:	ldr	r1, [r3, #20]
   13a10:	cmp	r9, r1
   13a14:	movgt	r0, #1
   13a18:	movle	r0, #0
   13a1c:	movlt	r9, #1
   13a20:	movge	r9, #0
   13a24:	sub	r0, r0, r9
   13a28:	adds	r1, r0, ip, lsl #1
   13a2c:	ldrdmi	r0, [r3, #16]
   13a30:	strdmi	r0, [lr, #40]	; 0x28
   13a34:	ldr	r0, [r3, #24]
   13a38:	ldr	ip, [r3, #28]
   13a3c:	ldrd	r8, [sp, #88]	; 0x58
   13a40:	adds	r1, r8, r0
   13a44:	str	r1, [sp, #104]	; 0x68
   13a48:	adc	r1, r9, ip
   13a4c:	str	r1, [sp, #108]	; 0x6c
   13a50:	ldrd	r0, [sp, #104]	; 0x68
   13a54:	cmp	r1, r9
   13a58:	cmpeq	r0, r8
   13a5c:	bcs	13a6c <__assert_fail@plt+0x1ec8>
   13a60:	mvn	r0, #0
   13a64:	mvn	r1, #0
   13a68:	strd	r0, [sp, #104]	; 0x68
   13a6c:	ldrd	r0, [sp, #104]	; 0x68
   13a70:	strd	r0, [lr, #24]
   13a74:	ldr	r0, [r3, #32]
   13a78:	ldr	ip, [r3, #36]	; 0x24
   13a7c:	adds	r2, r0, r2
   13a80:	ldr	r1, [sp, #128]	; 0x80
   13a84:	adc	r1, ip, r1
   13a88:	str	r2, [lr, #32]
   13a8c:	str	r1, [lr, #36]	; 0x24
   13a90:	ldr	ip, [lr, #40]	; 0x28
   13a94:	ldr	r0, [lr, #44]	; 0x2c
   13a98:	ldr	r1, [r3, #40]	; 0x28
   13a9c:	ldr	r2, [r3, #44]	; 0x2c
   13aa0:	cmp	ip, r1
   13aa4:	movgt	ip, #1
   13aa8:	movle	ip, #0
   13aac:	movlt	r1, #1
   13ab0:	movge	r1, #0
   13ab4:	sub	r1, ip, r1
   13ab8:	cmp	r0, r2
   13abc:	movgt	r2, #1
   13ac0:	movle	r2, #0
   13ac4:	movlt	r0, #1
   13ac8:	movge	r0, #0
   13acc:	sub	r2, r2, r0
   13ad0:	adds	r2, r2, r1, lsl #1
   13ad4:	ldrdmi	r2, [r3, #40]	; 0x28
   13ad8:	strdmi	r2, [lr, #40]	; 0x28
   13adc:	b	13584 <__assert_fail@plt+0x19e0>
   13ae0:	ldr	r3, [pc, #-580]	; 138a4 <__assert_fail@plt+0x1d00>
   13ae4:	movw	r2, #638	; 0x27e
   13ae8:	movw	r1, #7156	; 0x1bf4
   13aec:	movt	r1, #3
   13af0:	movw	r0, #7396	; 0x1ce4
   13af4:	movt	r0, #3
   13af8:	bl	11ba4 <__assert_fail@plt>
   13afc:	ldr	lr, [r3, #24]
   13b00:	ldr	r9, [r3, #28]
   13b04:	ldr	r1, [sp, #96]	; 0x60
   13b08:	adds	r1, r1, lr
   13b0c:	str	r1, [sp, #120]	; 0x78
   13b10:	ldr	r1, [sp, #100]	; 0x64
   13b14:	adc	r1, r1, r9
   13b18:	str	r1, [sp, #124]	; 0x7c
   13b1c:	ldrd	r8, [sp, #96]	; 0x60
   13b20:	ldrd	r0, [sp, #120]	; 0x78
   13b24:	cmp	r9, r1
   13b28:	cmpeq	r8, r0
   13b2c:	bls	13b3c <__assert_fail@plt+0x1f98>
   13b30:	mvn	r0, #0
   13b34:	mvn	r1, #0
   13b38:	strd	r0, [sp, #120]	; 0x78
   13b3c:	ldrd	r0, [sp, #120]	; 0x78
   13b40:	strd	r0, [sp, #144]	; 0x90
   13b44:	ldr	lr, [r3, #32]
   13b48:	ldr	r9, [r3, #36]	; 0x24
   13b4c:	ldr	r1, [sp, #128]	; 0x80
   13b50:	adds	r1, lr, r1
   13b54:	ldr	r0, [sp, #132]	; 0x84
   13b58:	adc	r0, r9, r0
   13b5c:	str	r1, [sp, #152]	; 0x98
   13b60:	str	r0, [sp, #156]	; 0x9c
   13b64:	ldr	r0, [r3, #40]	; 0x28
   13b68:	ldr	r1, [r3, #44]	; 0x2c
   13b6c:	ldr	lr, [sp, #160]	; 0xa0
   13b70:	cmp	lr, r0
   13b74:	movgt	lr, #1
   13b78:	movle	lr, #0
   13b7c:	movlt	r0, #1
   13b80:	movge	r0, #0
   13b84:	sub	r0, lr, r0
   13b88:	ldr	lr, [sp, #164]	; 0xa4
   13b8c:	cmp	lr, r1
   13b90:	movgt	r1, #1
   13b94:	movle	r1, #0
   13b98:	movlt	lr, #1
   13b9c:	movge	lr, #0
   13ba0:	sub	r1, r1, lr
   13ba4:	adds	r1, r1, r0, lsl #1
   13ba8:	ldrdmi	r0, [r3, #40]	; 0x28
   13bac:	strdmi	r0, [sp, #160]	; 0xa0
   13bb0:	b	13978 <__assert_fail@plt+0x1dd4>
   13bb4:	rsbs	r2, r2, #0
   13bb8:	rsc	r3, r3, #0
   13bbc:	cmp	r3, r1
   13bc0:	cmpeq	r2, r0
   13bc4:	movcs	r3, #1
   13bc8:	movcc	r3, #0
   13bcc:	b	13744 <__assert_fail@plt+0x1ba0>
   13bd0:	ldr	r1, [sp, #76]	; 0x4c
   13bd4:	add	r0, sp, #144	; 0x90
   13bd8:	bl	11d20 <__assert_fail@plt+0x17c>
   13bdc:	b	1374c <__assert_fail@plt+0x1ba8>
   13be0:	ldr	r3, [sp, #56]	; 0x38
   13be4:	str	r3, [sp, #60]	; 0x3c
   13be8:	b	1374c <__assert_fail@plt+0x1ba8>
   13bec:	str	r6, [sp, #60]	; 0x3c
   13bf0:	b	1374c <__assert_fail@plt+0x1ba8>
   13bf4:	ldr	r4, [r4]
   13bf8:	mov	r2, #5
   13bfc:	movw	r1, #7420	; 0x1cfc
   13c00:	movt	r1, #3
   13c04:	mov	r0, #0
   13c08:	bl	117d8 <dcgettext@plt>
   13c0c:	mov	r2, r0
   13c10:	mov	r1, r4
   13c14:	mov	r0, #0
   13c18:	bl	118bc <error@plt>
   13c1c:	ldr	r6, [sp, #84]	; 0x54
   13c20:	b	131e0 <__assert_fail@plt+0x163c>
   13c24:	bl	15a44 <__assert_fail@plt+0x3ea0>
   13c28:	cmp	r0, #0
   13c2c:	beq	1313c <__assert_fail@plt+0x1598>
   13c30:	b	13130 <__assert_fail@plt+0x158c>
   13c34:	mov	r2, #5
   13c38:	movw	r1, #7440	; 0x1d10
   13c3c:	movt	r1, #3
   13c40:	mov	r0, #0
   13c44:	bl	117d8 <dcgettext@plt>
   13c48:	mov	r4, r0
   13c4c:	ldr	r1, [sp, #28]
   13c50:	mov	r0, #4
   13c54:	bl	1f294 <__assert_fail@plt+0xd6f0>
   13c58:	mov	r3, r0
   13c5c:	mov	r2, r4
   13c60:	mov	r1, #0
   13c64:	mov	r0, #1
   13c68:	bl	118bc <error@plt>
   13c6c:	mov	r2, #5
   13c70:	movw	r1, #7460	; 0x1d24
   13c74:	movt	r1, #3
   13c78:	mov	r0, #0
   13c7c:	bl	117d8 <dcgettext@plt>
   13c80:	mov	r1, r0
   13c84:	ldr	r0, [pc, #-996]	; 138a8 <__assert_fail@plt+0x1d04>
   13c88:	bl	11d20 <__assert_fail@plt+0x17c>
   13c8c:	b	13150 <__assert_fail@plt+0x15ac>
   13c90:	ldrb	r3, [r7, #39]	; 0x27
   13c94:	cmp	r3, #0
   13c98:	bne	13ce8 <__assert_fail@plt+0x2144>
   13c9c:	ldrb	r3, [r7, #60]	; 0x3c
   13ca0:	cmp	r3, #0
   13ca4:	bne	13cc4 <__assert_fail@plt+0x2120>
   13ca8:	ldr	r3, [r4, #80]	; 0x50
   13cac:	and	r3, r3, #61440	; 0xf000
   13cb0:	cmp	r3, #16384	; 0x4000
   13cb4:	beq	13ce8 <__assert_fail@plt+0x2144>
   13cb8:	ldr	r3, [r4, #84]	; 0x54
   13cbc:	cmp	r3, #1
   13cc0:	bls	13ce8 <__assert_fail@plt+0x2144>
   13cc4:	ldrd	r2, [r4, #160]	; 0xa0
   13cc8:	strd	r2, [sp]
   13ccc:	ldrd	r2, [r4, #64]	; 0x40
   13cd0:	ldr	r0, [r7, #64]	; 0x40
   13cd4:	bl	14980 <__assert_fail@plt+0x2ddc>
   13cd8:	cmp	r0, #0
   13cdc:	blt	133b4 <__assert_fail@plt+0x1810>
   13ce0:	cmp	r0, #0
   13ce4:	beq	132e8 <__assert_fail@plt+0x1744>
   13ce8:	cmp	r5, #2
   13cec:	beq	13404 <__assert_fail@plt+0x1860>
   13cf0:	cmp	r5, #7
   13cf4:	beq	133d4 <__assert_fail@plt+0x1830>
   13cf8:	cmp	r5, #1
   13cfc:	beq	13be0 <__assert_fail@plt+0x203c>
   13d00:	ldr	r3, [sp, #56]	; 0x38
   13d04:	str	r3, [sp, #60]	; 0x3c
   13d08:	b	13794 <__assert_fail@plt+0x1bf0>
   13d0c:	ldrb	r3, [r4]
   13d10:	cmp	r3, #0
   13d14:	beq	1317c <__assert_fail@plt+0x15d8>
   13d18:	mov	r0, r7
   13d1c:	str	r4, [r0, #68]!	; 0x44
   13d20:	mov	r2, #0
   13d24:	ldr	r1, [sp, #116]	; 0x74
   13d28:	bl	2e044 <__assert_fail@plt+0x1c4a0>
   13d2c:	str	r0, [sp, #80]	; 0x50
   13d30:	ldr	r6, [sp, #56]	; 0x38
   13d34:	str	r6, [sp, #48]	; 0x30
   13d38:	b	13760 <__assert_fail@plt+0x1bbc>
   13d3c:	cmp	fp, #0
   13d40:	bne	12da8 <__assert_fail@plt+0x1204>
   13d44:	movw	r3, #12872	; 0x3248
   13d48:	movt	r3, #4
   13d4c:	ldrb	r3, [r3, #16]
   13d50:	cmp	r3, #0
   13d54:	beq	13d80 <__assert_fail@plt+0x21dc>
   13d58:	movw	r3, #12872	; 0x3248
   13d5c:	movt	r3, #4
   13d60:	ldrb	r3, [r3, #37]	; 0x25
   13d64:	cmp	r3, #0
   13d68:	bne	12dbc <__assert_fail@plt+0x1218>
   13d6c:	movw	r3, #12872	; 0x3248
   13d70:	movt	r3, #4
   13d74:	mov	r0, #1
   13d78:	mov	r1, #0
   13d7c:	strd	r0, [r3, #8]
   13d80:	movw	r3, #12872	; 0x3248
   13d84:	movt	r3, #4
   13d88:	ldrb	r3, [r3, #17]
   13d8c:	cmp	r3, #0
   13d90:	beq	13dd0 <__assert_fail@plt+0x222c>
   13d94:	movw	r3, #12872	; 0x3248
   13d98:	movt	r3, #4
   13d9c:	ldr	r3, [r3, #56]	; 0x38
   13da0:	cmp	r3, #0
   13da4:	beq	12de4 <__assert_fail@plt+0x1240>
   13da8:	movw	r3, #12872	; 0x3248
   13dac:	movt	r3, #4
   13db0:	ldr	r4, [r3, #56]	; 0x38
   13db4:	ldrb	r3, [r4]
   13db8:	cmp	r3, #43	; 0x2b
   13dbc:	bne	12e30 <__assert_fail@plt+0x128c>
   13dc0:	movw	r3, #12872	; 0x3248
   13dc4:	movt	r3, #4
   13dc8:	add	r4, r4, #1
   13dcc:	str	r4, [r3, #20]
   13dd0:	ldr	r3, [sp, #28]
   13dd4:	cmp	r3, #0
   13dd8:	beq	13000 <__assert_fail@plt+0x145c>
   13ddc:	movw	r3, #12840	; 0x3228
   13de0:	movt	r3, #4
   13de4:	ldr	r3, [r3]
   13de8:	cmp	r3, r6
   13dec:	blt	12f40 <__assert_fail@plt+0x139c>
   13df0:	movw	r1, #7108	; 0x1bc4
   13df4:	movt	r1, #3
   13df8:	ldr	r4, [sp, #28]
   13dfc:	mov	r0, r4
   13e00:	bl	1170c <strcmp@plt>
   13e04:	cmp	r0, #0
   13e08:	beq	13e30 <__assert_fail@plt+0x228c>
   13e0c:	movw	r3, #12856	; 0x3238
   13e10:	movt	r3, #4
   13e14:	ldr	r2, [r3]
   13e18:	movw	r1, #9720	; 0x25f8
   13e1c:	movt	r1, #3
   13e20:	mov	r0, r4
   13e24:	bl	17808 <__assert_fail@plt+0x5c64>
   13e28:	cmp	r0, #0
   13e2c:	beq	12fc0 <__assert_fail@plt+0x141c>
   13e30:	movw	r3, #12856	; 0x3238
   13e34:	movt	r3, #4
   13e38:	ldr	r0, [r3]
   13e3c:	bl	14464 <__assert_fail@plt+0x28c0>
   13e40:	str	r0, [sp, #44]	; 0x2c
   13e44:	movw	r3, #12872	; 0x3248
   13e48:	movt	r3, #4
   13e4c:	mov	r2, #1
   13e50:	strb	r2, [r3, #60]	; 0x3c
   13e54:	ldr	r3, [sp, #44]	; 0x2c
   13e58:	cmp	r3, #0
   13e5c:	beq	13058 <__assert_fail@plt+0x14b4>
   13e60:	bl	148bc <__assert_fail@plt+0x2d18>
   13e64:	movw	r3, #12872	; 0x3248
   13e68:	movt	r3, #4
   13e6c:	str	r0, [r3, #64]	; 0x40
   13e70:	cmp	r0, #0
   13e74:	beq	1305c <__assert_fail@plt+0x14b8>
   13e78:	movw	r3, #12872	; 0x3248
   13e7c:	movt	r3, #4
   13e80:	ldrb	r3, [r3, #39]	; 0x27
   13e84:	cmp	r3, #0
   13e88:	bne	13ea0 <__assert_fail@plt+0x22fc>
   13e8c:	movw	r3, #12872	; 0x3248
   13e90:	movt	r3, #4
   13e94:	ldrb	r3, [r3, #60]	; 0x3c
   13e98:	cmp	r3, #0
   13e9c:	bne	13ea4 <__assert_fail@plt+0x2300>
   13ea0:	orr	sl, sl, #256	; 0x100
   13ea4:	orr	r3, sl, r9
   13ea8:	str	r3, [sp, #116]	; 0x74
   13eac:	ldr	r3, [sp, #56]	; 0x38
   13eb0:	str	r3, [sp, #72]	; 0x48
   13eb4:	movw	r3, #7272	; 0x1c68
   13eb8:	movt	r3, #3
   13ebc:	str	r3, [sp, #112]	; 0x70
   13ec0:	movw	r7, #12872	; 0x3248
   13ec4:	movt	r7, #4
   13ec8:	b	13f30 <__assert_fail@plt+0x238c>
   13ecc:	ldrb	r3, [r4]
   13ed0:	cmp	r3, #0
   13ed4:	bne	13d18 <__assert_fail@plt+0x2174>
   13ed8:	ldr	r0, [sp, #44]	; 0x2c
   13edc:	bl	14560 <__assert_fail@plt+0x29bc>
   13ee0:	mov	r5, r0
   13ee4:	ldr	r2, [sp, #28]
   13ee8:	mov	r1, #3
   13eec:	mov	r0, #0
   13ef0:	bl	1f3b8 <__assert_fail@plt+0xd814>
   13ef4:	mov	r4, r0
   13ef8:	mov	r2, #5
   13efc:	ldr	r1, [sp, #112]	; 0x70
   13f00:	mov	r0, #0
   13f04:	bl	117d8 <dcgettext@plt>
   13f08:	str	r0, [sp, #4]
   13f0c:	str	r5, [sp]
   13f10:	mov	r3, r4
   13f14:	movw	r2, #7304	; 0x1c88
   13f18:	movt	r2, #3
   13f1c:	mov	r1, #0
   13f20:	mov	r0, r1
   13f24:	bl	118bc <error@plt>
   13f28:	ldr	r3, [sp, #84]	; 0x54
   13f2c:	str	r3, [sp, #72]	; 0x48
   13f30:	add	r1, sp, #140	; 0x8c
   13f34:	ldr	r0, [sp, #44]	; 0x2c
   13f38:	bl	144a4 <__assert_fail@plt+0x2900>
   13f3c:	subs	r4, r0, #0
   13f40:	beq	13060 <__assert_fail@plt+0x14bc>
   13f44:	ldr	r3, [sp, #28]
   13f48:	cmp	r3, #0
   13f4c:	beq	13d0c <__assert_fail@plt+0x2168>
   13f50:	movw	r1, #7108	; 0x1bc4
   13f54:	movt	r1, #3
   13f58:	mov	r0, r3
   13f5c:	bl	1170c <strcmp@plt>
   13f60:	cmp	r0, #0
   13f64:	bne	13ecc <__assert_fail@plt+0x2328>
   13f68:	movw	r1, #7108	; 0x1bc4
   13f6c:	movt	r1, #3
   13f70:	mov	r0, r4
   13f74:	bl	1170c <strcmp@plt>
   13f78:	cmp	r0, #0
   13f7c:	bne	13ecc <__assert_fail@plt+0x2328>
   13f80:	mov	r2, #5
   13f84:	movw	r1, #7208	; 0x1c28
   13f88:	movt	r1, #3
   13f8c:	bl	117d8 <dcgettext@plt>
   13f90:	mov	r5, r0
   13f94:	mov	r1, r4
   13f98:	mov	r0, #4
   13f9c:	bl	1f294 <__assert_fail@plt+0xd6f0>
   13fa0:	mov	r3, r0
   13fa4:	mov	r2, r5
   13fa8:	mov	r1, #0
   13fac:	mov	r0, r1
   13fb0:	bl	118bc <error@plt>
   13fb4:	ldrb	r3, [r4]
   13fb8:	cmp	r3, #0
   13fbc:	beq	13ed8 <__assert_fail@plt+0x2334>
   13fc0:	ldr	r3, [sp, #84]	; 0x54
   13fc4:	str	r3, [sp, #72]	; 0x48
   13fc8:	b	13f30 <__assert_fail@plt+0x238c>
   13fcc:	str	r4, [sp, #-8]!
   13fd0:	str	lr, [sp, #4]
   13fd4:	mov	r0, #1
   13fd8:	bl	11ea4 <__assert_fail@plt+0x300>
   13fdc:	ldr	r4, [sp]
   13fe0:	add	sp, sp, #4
   13fe4:	pop	{pc}		; (ldr pc, [sp], #4)
   13fe8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13fec:	strd	r6, [sp, #8]
   13ff0:	strd	r8, [sp, #16]
   13ff4:	strd	sl, [sp, #24]
   13ff8:	str	lr, [sp, #32]
   13ffc:	sub	sp, sp, #12
   14000:	str	r0, [sp]
   14004:	mov	r5, r1
   14008:	mov	r6, r2
   1400c:	str	r2, [sp, #4]
   14010:	mov	r9, r3
   14014:	bl	11988 <strlen@plt>
   14018:	ldr	r4, [r5]
   1401c:	cmp	r4, #0
   14020:	beq	140dc <__assert_fail@plt+0x2538>
   14024:	mov	r8, r0
   14028:	mov	fp, #0
   1402c:	mvn	sl, #0
   14030:	mov	r7, fp
   14034:	b	14054 <__assert_fail@plt+0x24b0>
   14038:	mov	sl, r7
   1403c:	b	140bc <__assert_fail@plt+0x2518>
   14040:	add	r7, r7, #1
   14044:	ldr	r4, [r5, #4]!
   14048:	add	r6, r6, r9
   1404c:	cmp	r4, #0
   14050:	beq	140b4 <__assert_fail@plt+0x2510>
   14054:	mov	r2, r8
   14058:	ldr	r1, [sp]
   1405c:	mov	r0, r4
   14060:	bl	11b5c <strncmp@plt>
   14064:	cmp	r0, #0
   14068:	bne	14040 <__assert_fail@plt+0x249c>
   1406c:	mov	r0, r4
   14070:	bl	11988 <strlen@plt>
   14074:	cmp	r0, r8
   14078:	beq	14038 <__assert_fail@plt+0x2494>
   1407c:	cmn	sl, #1
   14080:	moveq	sl, r7
   14084:	beq	14040 <__assert_fail@plt+0x249c>
   14088:	ldr	r3, [sp, #4]
   1408c:	cmp	r3, #0
   14090:	moveq	fp, #1
   14094:	beq	14040 <__assert_fail@plt+0x249c>
   14098:	mov	r2, r9
   1409c:	mov	r1, r6
   140a0:	mla	r0, r9, sl, r3
   140a4:	bl	117c0 <memcmp@plt>
   140a8:	cmp	r0, #0
   140ac:	movne	fp, #1
   140b0:	b	14040 <__assert_fail@plt+0x249c>
   140b4:	cmp	fp, #0
   140b8:	mvnne	sl, #1
   140bc:	mov	r0, sl
   140c0:	add	sp, sp, #12
   140c4:	ldrd	r4, [sp]
   140c8:	ldrd	r6, [sp, #8]
   140cc:	ldrd	r8, [sp, #16]
   140d0:	ldrd	sl, [sp, #24]
   140d4:	add	sp, sp, #32
   140d8:	pop	{pc}		; (ldr pc, [sp], #4)
   140dc:	mvn	sl, #0
   140e0:	b	140bc <__assert_fail@plt+0x2518>
   140e4:	strd	r4, [sp, #-16]!
   140e8:	str	r6, [sp, #8]
   140ec:	str	lr, [sp, #12]
   140f0:	mov	r6, r0
   140f4:	ldr	r0, [r1]
   140f8:	cmp	r0, #0
   140fc:	beq	14144 <__assert_fail@plt+0x25a0>
   14100:	mov	r4, r1
   14104:	mov	r5, #0
   14108:	mov	r1, r6
   1410c:	bl	1170c <strcmp@plt>
   14110:	cmp	r0, #0
   14114:	beq	14130 <__assert_fail@plt+0x258c>
   14118:	add	r5, r5, #1
   1411c:	ldr	r0, [r4, #4]!
   14120:	cmp	r0, #0
   14124:	bne	14108 <__assert_fail@plt+0x2564>
   14128:	mvn	r0, #0
   1412c:	b	14134 <__assert_fail@plt+0x2590>
   14130:	mov	r0, r5
   14134:	ldrd	r4, [sp]
   14138:	ldr	r6, [sp, #8]
   1413c:	add	sp, sp, #12
   14140:	pop	{pc}		; (ldr pc, [sp], #4)
   14144:	mvn	r0, #0
   14148:	b	14134 <__assert_fail@plt+0x2590>
   1414c:	strd	r4, [sp, #-16]!
   14150:	str	r6, [sp, #8]
   14154:	str	lr, [sp, #12]
   14158:	sub	sp, sp, #8
   1415c:	mov	r6, r0
   14160:	mov	r5, r1
   14164:	cmn	r2, #1
   14168:	mov	r2, #5
   1416c:	movweq	r1, #8096	; 0x1fa0
   14170:	movteq	r1, #3
   14174:	movwne	r1, #8124	; 0x1fbc
   14178:	movtne	r1, #3
   1417c:	mov	r0, #0
   14180:	bl	117d8 <dcgettext@plt>
   14184:	mov	r4, r0
   14188:	mov	r2, r5
   1418c:	mov	r1, #8
   14190:	mov	r0, #0
   14194:	bl	1f208 <__assert_fail@plt+0xd664>
   14198:	mov	r5, r0
   1419c:	mov	r1, r6
   141a0:	mov	r0, #1
   141a4:	bl	1f568 <__assert_fail@plt+0xd9c4>
   141a8:	str	r0, [sp]
   141ac:	mov	r3, r5
   141b0:	mov	r2, r4
   141b4:	mov	r1, #0
   141b8:	mov	r0, r1
   141bc:	bl	118bc <error@plt>
   141c0:	add	sp, sp, #8
   141c4:	ldrd	r4, [sp]
   141c8:	ldr	r6, [sp, #8]
   141cc:	add	sp, sp, #12
   141d0:	pop	{pc}		; (ldr pc, [sp], #4)
   141d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   141d8:	strd	r6, [sp, #8]
   141dc:	strd	r8, [sp, #16]
   141e0:	strd	sl, [sp, #24]
   141e4:	str	lr, [sp, #32]
   141e8:	sub	sp, sp, #12
   141ec:	mov	r7, r0
   141f0:	mov	r4, r1
   141f4:	mov	r8, r2
   141f8:	mov	r2, #5
   141fc:	movw	r1, #8156	; 0x1fdc
   14200:	movt	r1, #3
   14204:	mov	r0, #0
   14208:	bl	117d8 <dcgettext@plt>
   1420c:	movw	r3, #12848	; 0x3230
   14210:	movt	r3, #4
   14214:	ldr	r1, [r3]
   14218:	bl	116b8 <fputs_unlocked@plt>
   1421c:	ldr	r5, [r7]
   14220:	cmp	r5, #0
   14224:	beq	142d0 <__assert_fail@plt+0x272c>
   14228:	mov	r3, #0
   1422c:	str	r3, [sp]
   14230:	mov	r6, r3
   14234:	movw	sl, #12848	; 0x3230
   14238:	movt	sl, #4
   1423c:	movw	fp, #8180	; 0x1ff4
   14240:	movt	fp, #3
   14244:	movw	r3, #8188	; 0x1ffc
   14248:	movt	r3, #3
   1424c:	str	r3, [sp, #4]
   14250:	b	1428c <__assert_fail@plt+0x26e8>
   14254:	ldr	r9, [sl]
   14258:	mov	r0, r5
   1425c:	bl	1f584 <__assert_fail@plt+0xd9e0>
   14260:	mov	r3, r0
   14264:	mov	r2, fp
   14268:	mov	r1, #1
   1426c:	mov	r0, r9
   14270:	bl	11a18 <__fprintf_chk@plt>
   14274:	str	r4, [sp]
   14278:	add	r6, r6, #1
   1427c:	ldr	r5, [r7, #4]!
   14280:	add	r4, r4, r8
   14284:	cmp	r5, #0
   14288:	beq	142d0 <__assert_fail@plt+0x272c>
   1428c:	cmp	r6, #0
   14290:	beq	14254 <__assert_fail@plt+0x26b0>
   14294:	mov	r2, r8
   14298:	mov	r1, r4
   1429c:	ldr	r0, [sp]
   142a0:	bl	117c0 <memcmp@plt>
   142a4:	cmp	r0, #0
   142a8:	bne	14254 <__assert_fail@plt+0x26b0>
   142ac:	ldr	r9, [sl]
   142b0:	mov	r0, r5
   142b4:	bl	1f584 <__assert_fail@plt+0xd9e0>
   142b8:	mov	r3, r0
   142bc:	ldr	r2, [sp, #4]
   142c0:	mov	r1, #1
   142c4:	mov	r0, r9
   142c8:	bl	11a18 <__fprintf_chk@plt>
   142cc:	b	14278 <__assert_fail@plt+0x26d4>
   142d0:	movw	r3, #12848	; 0x3230
   142d4:	movt	r3, #4
   142d8:	ldr	r0, [r3]
   142dc:	ldr	r3, [r0, #20]
   142e0:	ldr	r2, [r0, #24]
   142e4:	cmp	r3, r2
   142e8:	addcc	r2, r3, #1
   142ec:	strcc	r2, [r0, #20]
   142f0:	movcc	r2, #10
   142f4:	strbcc	r2, [r3]
   142f8:	bcs	14318 <__assert_fail@plt+0x2774>
   142fc:	add	sp, sp, #12
   14300:	ldrd	r4, [sp]
   14304:	ldrd	r6, [sp, #8]
   14308:	ldrd	r8, [sp, #16]
   1430c:	ldrd	sl, [sp, #24]
   14310:	add	sp, sp, #32
   14314:	pop	{pc}		; (ldr pc, [sp], #4)
   14318:	mov	r1, #10
   1431c:	bl	11a60 <__overflow@plt>
   14320:	b	142fc <__assert_fail@plt+0x2758>
   14324:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14328:	strd	r6, [sp, #8]
   1432c:	str	r8, [sp, #16]
   14330:	str	lr, [sp, #20]
   14334:	mov	r7, r0
   14338:	mov	r5, r1
   1433c:	mov	r4, r2
   14340:	mov	r6, r3
   14344:	ldrb	r3, [sp, #32]
   14348:	cmp	r3, #0
   1434c:	beq	14380 <__assert_fail@plt+0x27dc>
   14350:	ldr	r3, [sp, #24]
   14354:	mov	r2, r6
   14358:	mov	r1, r4
   1435c:	mov	r0, r5
   14360:	bl	13fe8 <__assert_fail@plt+0x2444>
   14364:	cmp	r0, #0
   14368:	blt	14390 <__assert_fail@plt+0x27ec>
   1436c:	ldrd	r4, [sp]
   14370:	ldrd	r6, [sp, #8]
   14374:	ldr	r8, [sp, #16]
   14378:	add	sp, sp, #20
   1437c:	pop	{pc}		; (ldr pc, [sp], #4)
   14380:	mov	r1, r2
   14384:	mov	r0, r5
   14388:	bl	140e4 <__assert_fail@plt+0x2540>
   1438c:	b	14364 <__assert_fail@plt+0x27c0>
   14390:	mov	r2, r0
   14394:	mov	r1, r5
   14398:	mov	r0, r7
   1439c:	bl	1414c <__assert_fail@plt+0x25a8>
   143a0:	ldr	r2, [sp, #24]
   143a4:	mov	r1, r6
   143a8:	mov	r0, r4
   143ac:	bl	141d4 <__assert_fail@plt+0x2630>
   143b0:	ldr	r3, [sp, #28]
   143b4:	blx	r3
   143b8:	mvn	r0, #0
   143bc:	b	1436c <__assert_fail@plt+0x27c8>
   143c0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   143c4:	strd	r6, [sp, #8]
   143c8:	str	r8, [sp, #16]
   143cc:	str	lr, [sp, #20]
   143d0:	ldr	r7, [r1]
   143d4:	cmp	r7, #0
   143d8:	beq	14414 <__assert_fail@plt+0x2870>
   143dc:	mov	r6, r3
   143e0:	mov	r8, r0
   143e4:	mov	r4, r2
   143e8:	mov	r5, r1
   143ec:	mov	r2, r6
   143f0:	mov	r1, r4
   143f4:	mov	r0, r8
   143f8:	bl	117c0 <memcmp@plt>
   143fc:	cmp	r0, #0
   14400:	beq	14414 <__assert_fail@plt+0x2870>
   14404:	ldr	r7, [r5, #4]!
   14408:	add	r4, r4, r6
   1440c:	cmp	r7, #0
   14410:	bne	143ec <__assert_fail@plt+0x2848>
   14414:	mov	r0, r7
   14418:	ldrd	r4, [sp]
   1441c:	ldrd	r6, [sp, #8]
   14420:	ldr	r8, [sp, #16]
   14424:	add	sp, sp, #20
   14428:	pop	{pc}		; (ldr pc, [sp], #4)
   1442c:	str	r4, [sp, #-8]!
   14430:	str	lr, [sp, #4]
   14434:	mov	r4, r0
   14438:	mov	r0, #24
   1443c:	bl	2f010 <__assert_fail@plt+0x1d46c>
   14440:	cmp	r0, #0
   14444:	beq	14458 <__assert_fail@plt+0x28b4>
   14448:	mov	r3, #0
   1444c:	str	r3, [r0]
   14450:	str	r4, [r0, #16]
   14454:	str	r4, [r0, #20]
   14458:	ldr	r4, [sp]
   1445c:	add	sp, sp, #4
   14460:	pop	{pc}		; (ldr pc, [sp], #4)
   14464:	str	r4, [sp, #-8]!
   14468:	str	lr, [sp, #4]
   1446c:	mov	r4, r0
   14470:	mov	r0, #24
   14474:	bl	2f010 <__assert_fail@plt+0x1d46c>
   14478:	cmp	r0, #0
   1447c:	beq	14498 <__assert_fail@plt+0x28f4>
   14480:	str	r4, [r0]
   14484:	mov	r3, #0
   14488:	str	r3, [r0, #8]
   1448c:	str	r3, [r0, #12]
   14490:	str	r3, [r0, #4]
   14494:	str	r3, [r0, #16]
   14498:	ldr	r4, [sp]
   1449c:	add	sp, sp, #4
   144a0:	pop	{pc}		; (ldr pc, [sp], #4)
   144a4:	ldr	r3, [r0]
   144a8:	cmp	r3, #0
   144ac:	beq	14528 <__assert_fail@plt+0x2984>
   144b0:	strd	r4, [sp, #-16]!
   144b4:	str	r6, [sp, #8]
   144b8:	str	lr, [sp, #12]
   144bc:	mov	r5, r1
   144c0:	mov	r4, r0
   144c4:	mov	r2, #0
   144c8:	add	r1, r0, #12
   144cc:	add	r0, r0, #8
   144d0:	bl	11b2c <getdelim@plt>
   144d4:	cmp	r0, #0
   144d8:	blt	14508 <__assert_fail@plt+0x2964>
   144dc:	mov	r3, #1
   144e0:	str	r3, [r5]
   144e4:	ldr	r3, [r4, #4]
   144e8:	add	r3, r3, #1
   144ec:	str	r3, [r4, #4]
   144f0:	ldr	r3, [r4, #8]
   144f4:	mov	r0, r3
   144f8:	ldrd	r4, [sp]
   144fc:	ldr	r6, [sp, #8]
   14500:	add	sp, sp, #12
   14504:	pop	{pc}		; (ldr pc, [sp], #4)
   14508:	ldr	r0, [r4]
   1450c:	bl	1197c <feof@plt>
   14510:	cmp	r0, #0
   14514:	movne	r3, #2
   14518:	moveq	r3, #4
   1451c:	str	r3, [r5]
   14520:	mov	r3, #0
   14524:	b	144f4 <__assert_fail@plt+0x2950>
   14528:	ldr	r3, [r0, #20]
   1452c:	ldr	r3, [r3]
   14530:	cmp	r3, #0
   14534:	moveq	r2, #2
   14538:	streq	r2, [r1]
   1453c:	beq	14558 <__assert_fail@plt+0x29b4>
   14540:	mov	r3, #1
   14544:	str	r3, [r1]
   14548:	ldr	r3, [r0, #20]
   1454c:	add	r2, r3, #4
   14550:	str	r2, [r0, #20]
   14554:	ldr	r3, [r3]
   14558:	mov	r0, r3
   1455c:	bx	lr
   14560:	ldr	r3, [r0]
   14564:	cmp	r3, #0
   14568:	beq	14574 <__assert_fail@plt+0x29d0>
   1456c:	ldr	r0, [r0, #4]
   14570:	bx	lr
   14574:	ldr	r3, [r0, #20]
   14578:	ldr	r0, [r0, #16]
   1457c:	sub	r0, r3, r0
   14580:	asr	r0, r0, #2
   14584:	bx	lr
   14588:	str	r4, [sp, #-8]!
   1458c:	str	lr, [sp, #4]
   14590:	mov	r4, r0
   14594:	ldr	r3, [r0]
   14598:	cmp	r3, #0
   1459c:	beq	145a8 <__assert_fail@plt+0x2a04>
   145a0:	ldr	r0, [r0, #8]
   145a4:	bl	17750 <__assert_fail@plt+0x5bac>
   145a8:	mov	r0, r4
   145ac:	bl	17750 <__assert_fail@plt+0x5bac>
   145b0:	ldr	r4, [sp]
   145b4:	add	sp, sp, #4
   145b8:	pop	{pc}		; (ldr pc, [sp], #4)
   145bc:	movw	r3, #12992	; 0x32c0
   145c0:	movt	r3, #4
   145c4:	str	r0, [r3]
   145c8:	bx	lr
   145cc:	movw	r3, #12992	; 0x32c0
   145d0:	movt	r3, #4
   145d4:	strb	r0, [r3, #4]
   145d8:	bx	lr
   145dc:	strd	r4, [sp, #-16]!
   145e0:	str	r6, [sp, #8]
   145e4:	str	lr, [sp, #12]
   145e8:	sub	sp, sp, #8
   145ec:	movw	r3, #12860	; 0x323c
   145f0:	movt	r3, #4
   145f4:	ldr	r0, [r3]
   145f8:	bl	2fa08 <__assert_fail@plt+0x1de64>
   145fc:	cmp	r0, #0
   14600:	beq	14628 <__assert_fail@plt+0x2a84>
   14604:	movw	r3, #12992	; 0x32c0
   14608:	movt	r3, #4
   1460c:	ldrb	r3, [r3, #4]
   14610:	cmp	r3, #0
   14614:	beq	14654 <__assert_fail@plt+0x2ab0>
   14618:	bl	119b8 <__errno_location@plt>
   1461c:	ldr	r3, [r0]
   14620:	cmp	r3, #32
   14624:	bne	14654 <__assert_fail@plt+0x2ab0>
   14628:	movw	r3, #12848	; 0x3230
   1462c:	movt	r3, #4
   14630:	ldr	r0, [r3]
   14634:	bl	2fa08 <__assert_fail@plt+0x1de64>
   14638:	cmp	r0, #0
   1463c:	bne	146dc <__assert_fail@plt+0x2b38>
   14640:	add	sp, sp, #8
   14644:	ldrd	r4, [sp]
   14648:	ldr	r6, [sp, #8]
   1464c:	add	sp, sp, #12
   14650:	pop	{pc}		; (ldr pc, [sp], #4)
   14654:	mov	r2, #5
   14658:	movw	r1, #8196	; 0x2004
   1465c:	movt	r1, #3
   14660:	mov	r0, #0
   14664:	bl	117d8 <dcgettext@plt>
   14668:	mov	r4, r0
   1466c:	movw	r3, #12992	; 0x32c0
   14670:	movt	r3, #4
   14674:	ldr	r5, [r3]
   14678:	cmp	r5, #0
   1467c:	beq	146bc <__assert_fail@plt+0x2b18>
   14680:	bl	119b8 <__errno_location@plt>
   14684:	ldr	r6, [r0]
   14688:	mov	r0, r5
   1468c:	bl	1f380 <__assert_fail@plt+0xd7dc>
   14690:	str	r4, [sp]
   14694:	mov	r3, r0
   14698:	movw	r2, #8208	; 0x2010
   1469c:	movt	r2, #3
   146a0:	mov	r1, r6
   146a4:	mov	r0, #0
   146a8:	bl	118bc <error@plt>
   146ac:	movw	r3, #12760	; 0x31d8
   146b0:	movt	r3, #4
   146b4:	ldr	r0, [r3]
   146b8:	bl	11778 <_exit@plt>
   146bc:	bl	119b8 <__errno_location@plt>
   146c0:	mov	r3, r4
   146c4:	movw	r2, #8212	; 0x2014
   146c8:	movt	r2, #3
   146cc:	ldr	r1, [r0]
   146d0:	mov	r0, #0
   146d4:	bl	118bc <error@plt>
   146d8:	b	146ac <__assert_fail@plt+0x2b08>
   146dc:	movw	r3, #12760	; 0x31d8
   146e0:	movt	r3, #4
   146e4:	ldr	r0, [r3]
   146e8:	bl	11778 <_exit@plt>
   146ec:	ldr	r3, [r0]
   146f0:	ldr	r0, [r0, #4]
   146f4:	eor	r3, r3, r0
   146f8:	udiv	r0, r3, r1
   146fc:	mls	r0, r0, r1, r3
   14700:	bx	lr
   14704:	strd	r4, [sp, #-8]!
   14708:	ldrd	r4, [r0]
   1470c:	ldrd	r2, [r1]
   14710:	cmp	r5, r3
   14714:	cmpeq	r4, r2
   14718:	moveq	r0, #1
   1471c:	movne	r0, #0
   14720:	ldrd	r4, [sp]
   14724:	add	sp, sp, #8
   14728:	bx	lr
   1472c:	udiv	r3, r0, r1
   14730:	mls	r0, r3, r1, r0
   14734:	bx	lr
   14738:	str	r4, [sp, #-8]!
   1473c:	str	lr, [sp, #4]
   14740:	mov	r4, r0
   14744:	ldr	r0, [r0, #8]
   14748:	bl	1a9a0 <__assert_fail@plt+0x8dfc>
   1474c:	mov	r0, r4
   14750:	bl	17750 <__assert_fail@plt+0x5bac>
   14754:	ldr	r4, [sp]
   14758:	add	sp, sp, #4
   1475c:	pop	{pc}		; (ldr pc, [sp], #4)
   14760:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14764:	str	r6, [sp, #8]
   14768:	strd	r8, [sp, #12]
   1476c:	str	lr, [sp, #20]
   14770:	sub	sp, sp, #8
   14774:	mov	r6, r0
   14778:	mov	r8, r2
   1477c:	mov	r9, r3
   14780:	ldr	r4, [r0, #8]
   14784:	cmp	r4, #0
   14788:	beq	147ec <__assert_fail@plt+0x2c48>
   1478c:	ldrd	r2, [r4]
   14790:	cmp	r3, r9
   14794:	cmpeq	r2, r8
   14798:	beq	147e4 <__assert_fail@plt+0x2c40>
   1479c:	strd	r8, [r4]
   147a0:	mov	r1, r4
   147a4:	ldr	r0, [r6]
   147a8:	bl	1ad88 <__assert_fail@plt+0x91e4>
   147ac:	subs	r5, r0, #0
   147b0:	beq	147c8 <__assert_fail@plt+0x2c24>
   147b4:	cmp	r4, r5
   147b8:	beq	1480c <__assert_fail@plt+0x2c68>
   147bc:	ldr	r3, [r5, #8]
   147c0:	str	r3, [r4, #8]
   147c4:	ldr	r5, [r4, #8]
   147c8:	mov	r0, r5
   147cc:	add	sp, sp, #8
   147d0:	ldrd	r4, [sp]
   147d4:	ldr	r6, [sp, #8]
   147d8:	ldrd	r8, [sp, #12]
   147dc:	add	sp, sp, #20
   147e0:	pop	{pc}		; (ldr pc, [sp], #4)
   147e4:	ldr	r5, [r4, #8]
   147e8:	b	147c8 <__assert_fail@plt+0x2c24>
   147ec:	mov	r0, #16
   147f0:	bl	2f010 <__assert_fail@plt+0x1d46c>
   147f4:	mov	r4, r0
   147f8:	str	r0, [r6, #8]
   147fc:	cmp	r0, #0
   14800:	bne	1479c <__assert_fail@plt+0x2bf8>
   14804:	mov	r5, r0
   14808:	b	147c8 <__assert_fail@plt+0x2c24>
   1480c:	mov	r1, #0
   14810:	str	r1, [r6, #8]
   14814:	str	r1, [sp]
   14818:	mov	r3, r1
   1481c:	movw	r2, #18220	; 0x472c
   14820:	movt	r2, #1
   14824:	movw	r0, #1021	; 0x3fd
   14828:	bl	1a7d4 <__assert_fail@plt+0x8c30>
   1482c:	str	r0, [r5, #8]
   14830:	b	147c4 <__assert_fail@plt+0x2c20>
   14834:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14838:	strd	r6, [sp, #8]
   1483c:	str	r8, [sp, #16]
   14840:	str	lr, [sp, #20]
   14844:	subs	r4, r2, #1
   14848:	sbc	r5, r3, #0
   1484c:	mvn	r6, #-2147483646	; 0x80000002
   14850:	mov	r7, #0
   14854:	cmp	r5, r7
   14858:	cmpeq	r4, r6
   1485c:	movls	r0, r2
   14860:	bls	1488c <__assert_fail@plt+0x2ce8>
   14864:	mov	r5, r3
   14868:	mov	r4, r2
   1486c:	mov	r6, r0
   14870:	ldr	r3, [r0, #4]
   14874:	cmp	r3, #0
   14878:	beq	148a0 <__assert_fail@plt+0x2cfc>
   1487c:	mov	r2, r4
   14880:	mov	r3, r5
   14884:	ldr	r0, [r6, #4]
   14888:	bl	1bc18 <__assert_fail@plt+0xa074>
   1488c:	ldrd	r4, [sp]
   14890:	ldrd	r6, [sp, #8]
   14894:	ldr	r8, [sp, #16]
   14898:	add	sp, sp, #20
   1489c:	pop	{pc}		; (ldr pc, [sp], #4)
   148a0:	mvn	r0, #-2147483648	; 0x80000000
   148a4:	bl	1bb58 <__assert_fail@plt+0x9fb4>
   148a8:	str	r0, [r6, #4]
   148ac:	cmp	r0, #0
   148b0:	bne	1487c <__assert_fail@plt+0x2cd8>
   148b4:	mvn	r0, #0
   148b8:	b	1488c <__assert_fail@plt+0x2ce8>
   148bc:	strd	r4, [sp, #-12]!
   148c0:	str	lr, [sp, #8]
   148c4:	sub	sp, sp, #12
   148c8:	mov	r0, #12
   148cc:	bl	2f010 <__assert_fail@plt+0x1d46c>
   148d0:	subs	r4, r0, #0
   148d4:	beq	1491c <__assert_fail@plt+0x2d78>
   148d8:	movw	r3, #18232	; 0x4738
   148dc:	movt	r3, #1
   148e0:	str	r3, [sp]
   148e4:	movw	r3, #18180	; 0x4704
   148e8:	movt	r3, #1
   148ec:	movw	r2, #18156	; 0x46ec
   148f0:	movt	r2, #1
   148f4:	mov	r1, #0
   148f8:	mov	r0, #11
   148fc:	bl	1a7d4 <__assert_fail@plt+0x8c30>
   14900:	mov	r5, r0
   14904:	str	r0, [r4]
   14908:	cmp	r0, #0
   1490c:	movne	r3, #0
   14910:	strne	r3, [r4, #4]
   14914:	strne	r3, [r4, #8]
   14918:	beq	14930 <__assert_fail@plt+0x2d8c>
   1491c:	mov	r0, r4
   14920:	add	sp, sp, #12
   14924:	ldrd	r4, [sp]
   14928:	add	sp, sp, #8
   1492c:	pop	{pc}		; (ldr pc, [sp], #4)
   14930:	mov	r0, r4
   14934:	bl	17750 <__assert_fail@plt+0x5bac>
   14938:	mov	r4, r5
   1493c:	b	1491c <__assert_fail@plt+0x2d78>
   14940:	str	r4, [sp, #-8]!
   14944:	str	lr, [sp, #4]
   14948:	mov	r4, r0
   1494c:	ldr	r0, [r0]
   14950:	bl	1a9a0 <__assert_fail@plt+0x8dfc>
   14954:	ldr	r0, [r4, #4]
   14958:	cmp	r0, #0
   1495c:	beq	14964 <__assert_fail@plt+0x2dc0>
   14960:	bl	1bbe8 <__assert_fail@plt+0xa044>
   14964:	ldr	r0, [r4, #8]
   14968:	bl	17750 <__assert_fail@plt+0x5bac>
   1496c:	mov	r0, r4
   14970:	bl	17750 <__assert_fail@plt+0x5bac>
   14974:	ldr	r4, [sp]
   14978:	add	sp, sp, #4
   1497c:	pop	{pc}		; (ldr pc, [sp], #4)
   14980:	strd	r4, [sp, #-16]!
   14984:	str	r6, [sp, #8]
   14988:	str	lr, [sp, #12]
   1498c:	mov	r4, r0
   14990:	bl	14760 <__assert_fail@plt+0x2bbc>
   14994:	subs	r5, r0, #0
   14998:	beq	149d0 <__assert_fail@plt+0x2e2c>
   1499c:	ldrd	r2, [sp, #16]
   149a0:	mov	r0, r4
   149a4:	bl	14834 <__assert_fail@plt+0x2c90>
   149a8:	cmn	r0, #1
   149ac:	beq	149d8 <__assert_fail@plt+0x2e34>
   149b0:	mov	r2, #0
   149b4:	mov	r1, r0
   149b8:	mov	r0, r5
   149bc:	bl	1abdc <__assert_fail@plt+0x9038>
   149c0:	ldrd	r4, [sp]
   149c4:	ldr	r6, [sp, #8]
   149c8:	add	sp, sp, #12
   149cc:	pop	{pc}		; (ldr pc, [sp], #4)
   149d0:	mvn	r0, #0
   149d4:	b	149c0 <__assert_fail@plt+0x2e1c>
   149d8:	mvn	r0, #0
   149dc:	b	149c0 <__assert_fail@plt+0x2e1c>
   149e0:	strd	r4, [sp, #-16]!
   149e4:	str	r6, [sp, #8]
   149e8:	str	lr, [sp, #12]
   149ec:	mov	r4, r0
   149f0:	bl	14760 <__assert_fail@plt+0x2bbc>
   149f4:	subs	r5, r0, #0
   149f8:	mvneq	r0, #0
   149fc:	beq	14a2c <__assert_fail@plt+0x2e88>
   14a00:	ldrd	r2, [sp, #16]
   14a04:	mov	r0, r4
   14a08:	bl	14834 <__assert_fail@plt+0x2c90>
   14a0c:	cmn	r0, #1
   14a10:	mvneq	r0, #0
   14a14:	beq	14a2c <__assert_fail@plt+0x2e88>
   14a18:	mov	r1, r0
   14a1c:	mov	r0, r5
   14a20:	bl	1a4e0 <__assert_fail@plt+0x893c>
   14a24:	adds	r0, r0, #0
   14a28:	movne	r0, #1
   14a2c:	ldrd	r4, [sp]
   14a30:	ldr	r6, [sp, #8]
   14a34:	add	sp, sp, #12
   14a38:	pop	{pc}		; (ldr pc, [sp], #4)
   14a3c:	str	r4, [sp, #-8]!
   14a40:	str	lr, [sp, #4]
   14a44:	ldr	r3, [r3]
   14a48:	blx	r3
   14a4c:	ldr	r4, [sp]
   14a50:	add	sp, sp, #4
   14a54:	pop	{pc}		; (ldr pc, [sp], #4)
   14a58:	str	r4, [sp, #-8]!
   14a5c:	str	lr, [sp, #4]
   14a60:	bl	17750 <__assert_fail@plt+0x5bac>
   14a64:	ldr	r4, [sp]
   14a68:	add	sp, sp, #4
   14a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a70:	str	r4, [sp, #-8]!
   14a74:	str	lr, [sp, #4]
   14a78:	bl	1bf04 <__assert_fail@plt+0xa360>
   14a7c:	clz	r0, r0
   14a80:	lsr	r0, r0, #5
   14a84:	ldr	r4, [sp]
   14a88:	add	sp, sp, #4
   14a8c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a90:	str	r4, [sp, #-8]!
   14a94:	str	lr, [sp, #4]
   14a98:	bl	1170c <strcmp@plt>
   14a9c:	clz	r0, r0
   14aa0:	lsr	r0, r0, #5
   14aa4:	ldr	r4, [sp]
   14aa8:	add	sp, sp, #4
   14aac:	pop	{pc}		; (ldr pc, [sp], #4)
   14ab0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14ab4:	strd	r6, [sp, #8]
   14ab8:	strd	r8, [sp, #16]
   14abc:	str	sl, [sp, #24]
   14ac0:	str	lr, [sp, #28]
   14ac4:	mov	r5, r0
   14ac8:	mov	r4, r1
   14acc:	tst	r2, #8
   14ad0:	beq	14b24 <__assert_fail@plt+0x2f80>
   14ad4:	tst	r2, #16
   14ad8:	bne	14b44 <__assert_fail@plt+0x2fa0>
   14adc:	bl	11988 <strlen@plt>
   14ae0:	mov	r7, r0
   14ae4:	mov	r2, r0
   14ae8:	mov	r1, r4
   14aec:	mov	r0, r5
   14af0:	bl	11b5c <strncmp@plt>
   14af4:	subs	r6, r0, #0
   14af8:	bne	14b08 <__assert_fail@plt+0x2f64>
   14afc:	ldrb	r3, [r4, r7]
   14b00:	cmp	r3, #47	; 0x2f
   14b04:	movne	r6, r3
   14b08:	mov	r0, r6
   14b0c:	ldrd	r4, [sp]
   14b10:	ldrd	r6, [sp, #8]
   14b14:	ldrd	r8, [sp, #16]
   14b18:	ldr	sl, [sp, #24]
   14b1c:	add	sp, sp, #28
   14b20:	pop	{pc}		; (ldr pc, [sp], #4)
   14b24:	tst	r2, #16
   14b28:	beq	14b38 <__assert_fail@plt+0x2f94>
   14b2c:	bl	1bf04 <__assert_fail@plt+0xa360>
   14b30:	mov	r6, r0
   14b34:	b	14b08 <__assert_fail@plt+0x2f64>
   14b38:	bl	1170c <strcmp@plt>
   14b3c:	mov	r6, r0
   14b40:	b	14b08 <__assert_fail@plt+0x2f64>
   14b44:	mov	r0, r1
   14b48:	bl	2dfd8 <__assert_fail@plt+0x1c434>
   14b4c:	mov	r8, r0
   14b50:	mov	r7, #47	; 0x2f
   14b54:	mov	r9, #0
   14b58:	b	14b7c <__assert_fail@plt+0x2fd8>
   14b5c:	strb	r9, [r4]
   14b60:	mov	r1, r8
   14b64:	mov	r0, r5
   14b68:	bl	1bf04 <__assert_fail@plt+0xa360>
   14b6c:	subs	r6, r0, #0
   14b70:	ble	14b9c <__assert_fail@plt+0x2ff8>
   14b74:	mov	r0, r4
   14b78:	strb	r7, [r0], #1
   14b7c:	mov	r1, r7
   14b80:	bl	11994 <strchr@plt>
   14b84:	subs	r4, r0, #0
   14b88:	bne	14b5c <__assert_fail@plt+0x2fb8>
   14b8c:	mov	r1, r8
   14b90:	mov	r0, r5
   14b94:	bl	1bf04 <__assert_fail@plt+0xa360>
   14b98:	mov	r6, r0
   14b9c:	mov	r0, r8
   14ba0:	bl	17750 <__assert_fail@plt+0x5bac>
   14ba4:	b	14b08 <__assert_fail@plt+0x2f64>
   14ba8:	str	r4, [sp, #-8]!
   14bac:	str	lr, [sp, #4]
   14bb0:	bl	1a768 <__assert_fail@plt+0x8bc4>
   14bb4:	ldr	r4, [sp]
   14bb8:	add	sp, sp, #4
   14bbc:	pop	{pc}		; (ldr pc, [sp], #4)
   14bc0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14bc4:	strd	r6, [sp, #8]
   14bc8:	str	r8, [sp, #16]
   14bcc:	str	lr, [sp, #20]
   14bd0:	sub	sp, sp, #56	; 0x38
   14bd4:	mov	r8, r1
   14bd8:	str	r0, [sp, #16]
   14bdc:	mov	r4, #0
   14be0:	strb	r4, [sp]
   14be4:	mov	r2, #0
   14be8:	mov	r3, #0
   14bec:	strd	r2, [sp, #4]
   14bf0:	strb	r4, [sp, #12]
   14bf4:	mov	r6, #1
   14bf8:	movw	r7, #8612	; 0x21a4
   14bfc:	movt	r7, #3
   14c00:	b	14cf8 <__assert_fail@plt+0x3154>
   14c04:	ldrb	r0, [r5]
   14c08:	b	14cdc <__assert_fail@plt+0x3138>
   14c0c:	add	r0, sp, #4
   14c10:	bl	117b4 <mbsinit@plt>
   14c14:	cmp	r0, #0
   14c18:	beq	14d44 <__assert_fail@plt+0x31a0>
   14c1c:	strb	r6, [sp]
   14c20:	ldr	r5, [sp, #16]
   14c24:	bl	11880 <__ctype_get_mb_cur_max@plt>
   14c28:	mov	r1, r0
   14c2c:	mov	r0, r5
   14c30:	bl	2cfb8 <__assert_fail@plt+0x1b414>
   14c34:	add	r3, sp, #4
   14c38:	mov	r2, r0
   14c3c:	mov	r1, r5
   14c40:	add	r0, sp, #28
   14c44:	bl	1be94 <__assert_fail@plt+0xa2f0>
   14c48:	str	r0, [sp, #20]
   14c4c:	cmn	r0, #1
   14c50:	streq	r6, [sp, #20]
   14c54:	moveq	r3, #0
   14c58:	strbeq	r3, [sp, #24]
   14c5c:	beq	14ca8 <__assert_fail@plt+0x3104>
   14c60:	cmn	r0, #2
   14c64:	beq	14d64 <__assert_fail@plt+0x31c0>
   14c68:	cmp	r0, #0
   14c6c:	bne	14c90 <__assert_fail@plt+0x30ec>
   14c70:	str	r6, [sp, #20]
   14c74:	ldr	r3, [sp, #16]
   14c78:	ldrb	r3, [r3]
   14c7c:	cmp	r3, #0
   14c80:	bne	14d7c <__assert_fail@plt+0x31d8>
   14c84:	ldr	r3, [sp, #28]
   14c88:	cmp	r3, #0
   14c8c:	bne	14d9c <__assert_fail@plt+0x31f8>
   14c90:	strb	r6, [sp, #24]
   14c94:	add	r0, sp, #4
   14c98:	bl	117b4 <mbsinit@plt>
   14c9c:	cmp	r0, #0
   14ca0:	movne	r3, #0
   14ca4:	strbne	r3, [sp]
   14ca8:	strb	r6, [sp, #12]
   14cac:	ldrb	r3, [sp, #24]
   14cb0:	cmp	r3, #0
   14cb4:	beq	14cc4 <__assert_fail@plt+0x3120>
   14cb8:	ldr	r3, [sp, #28]
   14cbc:	cmp	r3, #0
   14cc0:	beq	14dbc <__assert_fail@plt+0x3218>
   14cc4:	ldr	r5, [sp, #16]
   14cc8:	ldrb	r3, [sp, #24]
   14ccc:	cmp	r3, #0
   14cd0:	beq	14c04 <__assert_fail@plt+0x3060>
   14cd4:	ldr	r0, [sp, #28]
   14cd8:	bl	117a8 <towlower@plt>
   14cdc:	rsb	r4, r4, r4, lsl #5
   14ce0:	add	r4, r4, r0
   14ce4:	ldr	r3, [sp, #20]
   14ce8:	add	r5, r5, r3
   14cec:	str	r5, [sp, #16]
   14cf0:	mov	r3, #0
   14cf4:	strb	r3, [sp, #12]
   14cf8:	ldrb	r3, [sp, #12]
   14cfc:	cmp	r3, #0
   14d00:	bne	14cac <__assert_fail@plt+0x3108>
   14d04:	ldrb	r3, [sp]
   14d08:	cmp	r3, #0
   14d0c:	bne	14c20 <__assert_fail@plt+0x307c>
   14d10:	ldr	r1, [sp, #16]
   14d14:	ldrb	r3, [r1]
   14d18:	lsr	r2, r3, #5
   14d1c:	and	r3, r3, #31
   14d20:	ldr	r2, [r7, r2, lsl #2]
   14d24:	lsr	r3, r2, r3
   14d28:	tst	r3, #1
   14d2c:	beq	14c0c <__assert_fail@plt+0x3068>
   14d30:	str	r6, [sp, #20]
   14d34:	ldrb	r3, [r1]
   14d38:	str	r3, [sp, #28]
   14d3c:	strb	r6, [sp, #24]
   14d40:	b	14ca8 <__assert_fail@plt+0x3104>
   14d44:	movw	r3, #8216	; 0x2018
   14d48:	movt	r3, #3
   14d4c:	mov	r2, #143	; 0x8f
   14d50:	movw	r1, #8236	; 0x202c
   14d54:	movt	r1, #3
   14d58:	movw	r0, #8252	; 0x203c
   14d5c:	movt	r0, #3
   14d60:	bl	11ba4 <__assert_fail@plt>
   14d64:	ldr	r0, [sp, #16]
   14d68:	bl	11988 <strlen@plt>
   14d6c:	str	r0, [sp, #20]
   14d70:	mov	r3, #0
   14d74:	strb	r3, [sp, #24]
   14d78:	b	14ca8 <__assert_fail@plt+0x3104>
   14d7c:	movw	r3, #8216	; 0x2018
   14d80:	movt	r3, #3
   14d84:	mov	r2, #171	; 0xab
   14d88:	movw	r1, #8236	; 0x202c
   14d8c:	movt	r1, #3
   14d90:	movw	r0, #8276	; 0x2054
   14d94:	movt	r0, #3
   14d98:	bl	11ba4 <__assert_fail@plt>
   14d9c:	movw	r3, #8216	; 0x2018
   14da0:	movt	r3, #3
   14da4:	mov	r2, #172	; 0xac
   14da8:	movw	r1, #8236	; 0x202c
   14dac:	movt	r1, #3
   14db0:	movw	r0, #8300	; 0x206c
   14db4:	movt	r0, #3
   14db8:	bl	11ba4 <__assert_fail@plt>
   14dbc:	udiv	r0, r4, r8
   14dc0:	mls	r0, r8, r0, r4
   14dc4:	add	sp, sp, #56	; 0x38
   14dc8:	ldrd	r4, [sp]
   14dcc:	ldrd	r6, [sp, #8]
   14dd0:	ldr	r8, [sp, #16]
   14dd4:	add	sp, sp, #20
   14dd8:	pop	{pc}		; (ldr pc, [sp], #4)
   14ddc:	strd	r4, [sp, #-16]!
   14de0:	str	r6, [sp, #8]
   14de4:	str	lr, [sp, #12]
   14de8:	mov	r4, r0
   14dec:	mov	r5, r1
   14df0:	mov	r0, #8
   14df4:	bl	2db6c <__assert_fail@plt+0x1bfc8>
   14df8:	str	r5, [r0, #4]
   14dfc:	ldr	r3, [r4, #4]
   14e00:	str	r3, [r0]
   14e04:	str	r0, [r4, #4]
   14e08:	ldrd	r4, [sp]
   14e0c:	ldr	r6, [sp, #8]
   14e10:	add	sp, sp, #12
   14e14:	pop	{pc}		; (ldr pc, [sp], #4)
   14e18:	push	{lr}		; (str lr, [sp, #-4]!)
   14e1c:	and	lr, r1, #32
   14e20:	and	ip, r1, #134217728	; 0x8000000
   14e24:	and	r1, r1, #2
   14e28:	b	14e40 <__assert_fail@plt+0x329c>
   14e2c:	mov	r0, #0
   14e30:	b	15094 <__assert_fail@plt+0x34f0>
   14e34:	cmp	ip, #0
   14e38:	bne	15098 <__assert_fail@plt+0x34f4>
   14e3c:	mov	r0, r3
   14e40:	mov	r3, r0
   14e44:	ldrb	r2, [r3], #1
   14e48:	cmp	r2, #125	; 0x7d
   14e4c:	ldrls	pc, [pc, r2, lsl #2]
   14e50:	b	14e3c <__assert_fail@plt+0x3298>
   14e54:	andeq	r4, r1, ip, lsr #28
   14e58:	andeq	r4, r1, ip, lsr lr
   14e5c:	andeq	r4, r1, ip, lsr lr
   14e60:	andeq	r4, r1, ip, lsr lr
   14e64:	andeq	r4, r1, ip, lsr lr
   14e68:	andeq	r4, r1, ip, lsr lr
   14e6c:	andeq	r4, r1, ip, lsr lr
   14e70:	andeq	r4, r1, ip, lsr lr
   14e74:	andeq	r4, r1, ip, lsr lr
   14e78:	andeq	r4, r1, ip, lsr lr
   14e7c:	andeq	r4, r1, ip, lsr lr
   14e80:	andeq	r4, r1, ip, lsr lr
   14e84:	andeq	r4, r1, ip, lsr lr
   14e88:	andeq	r4, r1, ip, lsr lr
   14e8c:	andeq	r4, r1, ip, lsr lr
   14e90:	andeq	r4, r1, ip, lsr lr
   14e94:	andeq	r4, r1, ip, lsr lr
   14e98:	andeq	r4, r1, ip, lsr lr
   14e9c:	andeq	r4, r1, ip, lsr lr
   14ea0:	andeq	r4, r1, ip, lsr lr
   14ea4:	andeq	r4, r1, ip, lsr lr
   14ea8:	andeq	r4, r1, ip, lsr lr
   14eac:	andeq	r4, r1, ip, lsr lr
   14eb0:	andeq	r4, r1, ip, lsr lr
   14eb4:	andeq	r4, r1, ip, lsr lr
   14eb8:	andeq	r4, r1, ip, lsr lr
   14ebc:	andeq	r4, r1, ip, lsr lr
   14ec0:	andeq	r4, r1, ip, lsr lr
   14ec4:	andeq	r4, r1, ip, lsr lr
   14ec8:	andeq	r4, r1, ip, lsr lr
   14ecc:	andeq	r4, r1, ip, lsr lr
   14ed0:	andeq	r4, r1, ip, lsr lr
   14ed4:	andeq	r4, r1, ip, lsr lr
   14ed8:	andeq	r5, r1, r4, ror r0
   14edc:	andeq	r4, r1, ip, lsr lr
   14ee0:	andeq	r4, r1, ip, lsr lr
   14ee4:	andeq	r4, r1, ip, lsr lr
   14ee8:	andeq	r4, r1, ip, lsr lr
   14eec:	andeq	r4, r1, ip, lsr lr
   14ef0:	andeq	r4, r1, ip, lsr lr
   14ef4:	andeq	r4, r1, r4, lsr lr
   14ef8:	andeq	r4, r1, r4, lsr lr
   14efc:	muleq	r1, r0, r0
   14f00:	andeq	r5, r1, r4, ror r0
   14f04:	andeq	r4, r1, ip, lsr lr
   14f08:	andeq	r4, r1, ip, lsr lr
   14f0c:	andeq	r4, r1, r4, lsr lr
   14f10:	andeq	r4, r1, ip, lsr lr
   14f14:	andeq	r4, r1, ip, lsr lr
   14f18:	andeq	r4, r1, ip, lsr lr
   14f1c:	andeq	r4, r1, ip, lsr lr
   14f20:	andeq	r4, r1, ip, lsr lr
   14f24:	andeq	r4, r1, ip, lsr lr
   14f28:	andeq	r4, r1, ip, lsr lr
   14f2c:	andeq	r4, r1, ip, lsr lr
   14f30:	andeq	r4, r1, ip, lsr lr
   14f34:	andeq	r4, r1, ip, lsr lr
   14f38:	andeq	r4, r1, ip, lsr lr
   14f3c:	andeq	r4, r1, ip, lsr lr
   14f40:	andeq	r4, r1, ip, lsr lr
   14f44:	andeq	r4, r1, ip, lsr lr
   14f48:	andeq	r4, r1, ip, lsr lr
   14f4c:	andeq	r4, r1, ip, lsr lr
   14f50:	muleq	r1, r0, r0
   14f54:	andeq	r5, r1, r4, ror r0
   14f58:	andeq	r4, r1, ip, lsr lr
   14f5c:	andeq	r4, r1, ip, lsr lr
   14f60:	andeq	r4, r1, ip, lsr lr
   14f64:	andeq	r4, r1, ip, lsr lr
   14f68:	andeq	r4, r1, ip, lsr lr
   14f6c:	andeq	r4, r1, ip, lsr lr
   14f70:	andeq	r4, r1, ip, lsr lr
   14f74:	andeq	r4, r1, ip, lsr lr
   14f78:	andeq	r4, r1, ip, lsr lr
   14f7c:	andeq	r4, r1, ip, lsr lr
   14f80:	andeq	r4, r1, ip, lsr lr
   14f84:	andeq	r4, r1, ip, lsr lr
   14f88:	andeq	r4, r1, ip, lsr lr
   14f8c:	andeq	r4, r1, ip, lsr lr
   14f90:	andeq	r4, r1, ip, lsr lr
   14f94:	andeq	r4, r1, ip, lsr lr
   14f98:	andeq	r4, r1, ip, lsr lr
   14f9c:	andeq	r4, r1, ip, lsr lr
   14fa0:	andeq	r4, r1, ip, lsr lr
   14fa4:	andeq	r4, r1, ip, lsr lr
   14fa8:	andeq	r4, r1, ip, lsr lr
   14fac:	andeq	r4, r1, ip, lsr lr
   14fb0:	andeq	r4, r1, ip, lsr lr
   14fb4:	andeq	r4, r1, ip, lsr lr
   14fb8:	andeq	r4, r1, ip, lsr lr
   14fbc:	andeq	r4, r1, ip, lsr lr
   14fc0:	muleq	r1, r0, r0
   14fc4:	andeq	r5, r1, ip, asr #32
   14fc8:	andeq	r4, r1, ip, lsr lr
   14fcc:	andeq	r4, r1, ip, lsr lr
   14fd0:	andeq	r4, r1, ip, lsr lr
   14fd4:	andeq	r4, r1, ip, lsr lr
   14fd8:	andeq	r4, r1, ip, lsr lr
   14fdc:	andeq	r4, r1, ip, lsr lr
   14fe0:	andeq	r4, r1, ip, lsr lr
   14fe4:	andeq	r4, r1, ip, lsr lr
   14fe8:	andeq	r4, r1, ip, lsr lr
   14fec:	andeq	r4, r1, ip, lsr lr
   14ff0:	andeq	r4, r1, ip, lsr lr
   14ff4:	andeq	r4, r1, ip, lsr lr
   14ff8:	andeq	r4, r1, ip, lsr lr
   14ffc:	andeq	r4, r1, ip, lsr lr
   15000:	andeq	r4, r1, ip, lsr lr
   15004:	andeq	r4, r1, ip, lsr lr
   15008:	andeq	r4, r1, ip, lsr lr
   1500c:	andeq	r4, r1, ip, lsr lr
   15010:	andeq	r4, r1, ip, lsr lr
   15014:	andeq	r4, r1, ip, lsr lr
   15018:	andeq	r4, r1, ip, lsr lr
   1501c:	andeq	r4, r1, ip, lsr lr
   15020:	andeq	r4, r1, ip, lsr lr
   15024:	andeq	r4, r1, ip, lsr lr
   15028:	andeq	r4, r1, ip, lsr lr
   1502c:	andeq	r4, r1, ip, lsr lr
   15030:	andeq	r4, r1, ip, lsr lr
   15034:	andeq	r4, r1, ip, lsr lr
   15038:	andeq	r4, r1, ip, lsr lr
   1503c:	andeq	r4, r1, ip, lsr lr
   15040:	andeq	r4, r1, r4, lsr lr
   15044:	andeq	r4, r1, ip, lsr lr
   15048:	andeq	r4, r1, r4, lsr lr
   1504c:	mov	r2, ip
   15050:	cmp	ip, #0
   15054:	bne	14e3c <__assert_fail@plt+0x3298>
   15058:	cmp	r1, #0
   1505c:	bne	1506c <__assert_fail@plt+0x34c8>
   15060:	ldrb	r2, [r0, #1]
   15064:	adds	r2, r2, #0
   15068:	movne	r2, #1
   1506c:	add	r3, r3, r2
   15070:	b	14e3c <__assert_fail@plt+0x3298>
   15074:	cmp	lr, #0
   15078:	beq	14e3c <__assert_fail@plt+0x3298>
   1507c:	ldrb	r2, [r0, #1]
   15080:	cmp	r2, #40	; 0x28
   15084:	bne	14e3c <__assert_fail@plt+0x3298>
   15088:	mov	r0, #1
   1508c:	b	15094 <__assert_fail@plt+0x34f0>
   15090:	mov	r0, #1
   15094:	pop	{pc}		; (ldr pc, [sp], #4)
   15098:	mov	r0, #1
   1509c:	b	15094 <__assert_fail@plt+0x34f0>
   150a0:	str	r4, [sp, #-8]!
   150a4:	str	lr, [sp, #4]
   150a8:	mov	r0, #8
   150ac:	bl	2decc <__assert_fail@plt+0x1c328>
   150b0:	ldr	r4, [sp]
   150b4:	add	sp, sp, #4
   150b8:	pop	{pc}		; (ldr pc, [sp], #4)
   150bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   150c0:	strd	r6, [sp, #8]
   150c4:	str	r8, [sp, #16]
   150c8:	str	lr, [sp, #20]
   150cc:	mov	r8, r0
   150d0:	ldr	r4, [r0]
   150d4:	cmp	r4, #0
   150d8:	bne	15174 <__assert_fail@plt+0x35d0>
   150dc:	ldr	r4, [r8, #4]
   150e0:	cmp	r4, #0
   150e4:	beq	15108 <__assert_fail@plt+0x3564>
   150e8:	ldr	r5, [r4]
   150ec:	ldr	r0, [r4, #4]
   150f0:	bl	17750 <__assert_fail@plt+0x5bac>
   150f4:	mov	r0, r4
   150f8:	bl	17750 <__assert_fail@plt+0x5bac>
   150fc:	mov	r4, r5
   15100:	cmp	r5, #0
   15104:	bne	150e8 <__assert_fail@plt+0x3544>
   15108:	mov	r0, r8
   1510c:	bl	17750 <__assert_fail@plt+0x5bac>
   15110:	ldrd	r4, [sp]
   15114:	ldrd	r6, [sp, #8]
   15118:	ldr	r8, [sp, #16]
   1511c:	add	sp, sp, #20
   15120:	pop	{pc}		; (ldr pc, [sp], #4)
   15124:	add	r0, r0, #4
   15128:	bl	2ccac <__assert_fail@plt+0x1b108>
   1512c:	add	r6, r6, #1
   15130:	add	r5, r5, #36	; 0x24
   15134:	ldr	r3, [r4, #20]
   15138:	cmp	r6, r3
   1513c:	bge	15158 <__assert_fail@plt+0x35b4>
   15140:	ldr	r3, [r4, #12]
   15144:	add	r0, r3, r5
   15148:	ldr	r3, [r3, r5]
   1514c:	tst	r3, #134217728	; 0x8000000
   15150:	beq	1512c <__assert_fail@plt+0x3588>
   15154:	b	15124 <__assert_fail@plt+0x3580>
   15158:	ldr	r0, [r4, #12]
   1515c:	bl	17750 <__assert_fail@plt+0x5bac>
   15160:	mov	r0, r4
   15164:	bl	17750 <__assert_fail@plt+0x5bac>
   15168:	mov	r4, r7
   1516c:	cmp	r7, #0
   15170:	beq	150dc <__assert_fail@plt+0x3538>
   15174:	ldr	r7, [r4]
   15178:	ldr	r3, [r4, #4]
   1517c:	cmp	r3, #0
   15180:	beq	151a4 <__assert_fail@plt+0x3600>
   15184:	cmp	r3, #1
   15188:	bne	15160 <__assert_fail@plt+0x35bc>
   1518c:	ldr	r3, [r4, #20]
   15190:	cmp	r3, #0
   15194:	ble	15158 <__assert_fail@plt+0x35b4>
   15198:	mov	r5, #0
   1519c:	mov	r6, r5
   151a0:	b	15140 <__assert_fail@plt+0x359c>
   151a4:	ldr	r0, [r4, #12]
   151a8:	bl	1a9a0 <__assert_fail@plt+0x8dfc>
   151ac:	b	15160 <__assert_fail@plt+0x35bc>
   151b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   151b4:	strd	r6, [sp, #8]
   151b8:	str	r8, [sp, #16]
   151bc:	str	lr, [sp, #20]
   151c0:	mov	r7, r0
   151c4:	mov	r4, r1
   151c8:	mov	r6, r2
   151cc:	and	r8, r2, #268435456	; 0x10000000
   151d0:	movw	r2, #6356	; 0x18d4
   151d4:	movt	r2, #1
   151d8:	movw	r3, #19120	; 0x4ab0
   151dc:	movt	r3, #1
   151e0:	cmp	r8, #0
   151e4:	movne	r8, r2
   151e8:	moveq	r8, r3
   151ec:	mov	r2, r6
   151f0:	blx	r8
   151f4:	clz	r0, r0
   151f8:	lsr	r0, r0, #5
   151fc:	tst	r6, #1073741824	; 0x40000000
   15200:	bne	1521c <__assert_fail@plt+0x3678>
   15204:	ldrb	r3, [r4]
   15208:	cmp	r3, #0
   1520c:	movne	r5, r0
   15210:	moveq	r5, #1
   15214:	cmp	r5, #0
   15218:	beq	15260 <__assert_fail@plt+0x36bc>
   1521c:	ldrd	r4, [sp]
   15220:	ldrd	r6, [sp, #8]
   15224:	ldr	r8, [sp, #16]
   15228:	add	sp, sp, #20
   1522c:	pop	{pc}		; (ldr pc, [sp], #4)
   15230:	mov	r2, r6
   15234:	add	r1, r4, #1
   15238:	mov	r0, r7
   1523c:	blx	r8
   15240:	clz	r0, r0
   15244:	lsr	r0, r0, #5
   15248:	ldrb	r3, [r4, #1]!
   1524c:	cmp	r3, #0
   15250:	movne	r2, r0
   15254:	moveq	r2, #1
   15258:	cmp	r2, #0
   1525c:	bne	1521c <__assert_fail@plt+0x3678>
   15260:	cmp	r3, #47	; 0x2f
   15264:	movne	r0, r5
   15268:	bne	15248 <__assert_fail@plt+0x36a4>
   1526c:	ldrb	r3, [r4, #1]
   15270:	cmp	r3, #47	; 0x2f
   15274:	moveq	r0, r5
   15278:	bne	15230 <__assert_fail@plt+0x368c>
   1527c:	b	15248 <__assert_fail@plt+0x36a4>
   15280:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15284:	strd	r6, [sp, #8]
   15288:	strd	r8, [sp, #16]
   1528c:	strd	sl, [sp, #24]
   15290:	str	lr, [sp, #32]
   15294:	sub	sp, sp, #20
   15298:	ldr	r5, [r0]
   1529c:	cmp	r5, #0
   152a0:	moveq	r0, #0
   152a4:	beq	1540c <__assert_fail@plt+0x3868>
   152a8:	str	r1, [sp, #12]
   152ac:	mov	r6, #0
   152b0:	mov	fp, r6
   152b4:	mov	r7, r6
   152b8:	b	153bc <__assert_fail@plt+0x3818>
   152bc:	ldr	r0, [sp, #12]
   152c0:	bl	11988 <strlen@plt>
   152c4:	add	r0, r0, #1
   152c8:	bl	2db6c <__assert_fail@plt+0x1bfc8>
   152cc:	mov	r6, r0
   152d0:	b	153d0 <__assert_fail@plt+0x382c>
   152d4:	tst	r8, #1073741824	; 0x40000000
   152d8:	bne	153ac <__assert_fail@plt+0x3808>
   152dc:	mov	r1, #47	; 0x2f
   152e0:	mov	r0, r4
   152e4:	bl	11994 <strchr@plt>
   152e8:	cmp	r0, #0
   152ec:	beq	153ac <__assert_fail@plt+0x3808>
   152f0:	adds	r4, r0, #1
   152f4:	beq	153ac <__assert_fail@plt+0x3808>
   152f8:	mov	r1, r4
   152fc:	mov	r0, r6
   15300:	bl	11898 <strcpy@plt>
   15304:	mov	r1, r6
   15308:	mov	r0, sl
   1530c:	bl	1a4e0 <__assert_fail@plt+0x893c>
   15310:	cmp	r0, #0
   15314:	bne	153ec <__assert_fail@plt+0x3848>
   15318:	cmp	r9, #0
   1531c:	beq	152d4 <__assert_fail@plt+0x3730>
   15320:	mov	r1, #47	; 0x2f
   15324:	mov	r0, r6
   15328:	bl	11a78 <strrchr@plt>
   1532c:	cmp	r0, #0
   15330:	beq	152d4 <__assert_fail@plt+0x3730>
   15334:	strb	fp, [r0]
   15338:	b	15304 <__assert_fail@plt+0x3760>
   1533c:	ldr	r9, [r5, #20]
   15340:	ldr	r4, [r5, #12]
   15344:	cmp	r9, #0
   15348:	ble	153ac <__assert_fail@plt+0x3808>
   1534c:	add	r4, r4, #4
   15350:	mov	r8, #0
   15354:	b	1537c <__assert_fail@plt+0x37d8>
   15358:	ldr	r1, [sp, #12]
   1535c:	ldr	r0, [r4]
   15360:	bl	151b0 <__assert_fail@plt+0x360c>
   15364:	cmp	r0, #0
   15368:	bne	15428 <__assert_fail@plt+0x3884>
   1536c:	add	r8, r8, #1
   15370:	add	r4, r4, #36	; 0x24
   15374:	cmp	r9, r8
   15378:	beq	153ac <__assert_fail@plt+0x3808>
   1537c:	ldr	r2, [r4, #-4]
   15380:	tst	r2, #134217728	; 0x8000000
   15384:	beq	15358 <__assert_fail@plt+0x37b4>
   15388:	str	r7, [sp]
   1538c:	mov	r3, r7
   15390:	mov	r2, r7
   15394:	ldr	r1, [sp, #12]
   15398:	mov	r0, r4
   1539c:	bl	2cd40 <__assert_fail@plt+0x1b19c>
   153a0:	clz	r0, r0
   153a4:	lsr	r0, r0, #5
   153a8:	b	15364 <__assert_fail@plt+0x37c0>
   153ac:	ldr	r3, [r5]
   153b0:	cmp	r3, #0
   153b4:	beq	153e4 <__assert_fail@plt+0x3840>
   153b8:	mov	r5, r3
   153bc:	ldr	r3, [r5, #4]
   153c0:	cmp	r3, #0
   153c4:	bne	1533c <__assert_fail@plt+0x3798>
   153c8:	cmp	r6, #0
   153cc:	beq	152bc <__assert_fail@plt+0x3718>
   153d0:	ldr	r8, [r5, #8]
   153d4:	ldr	sl, [r5, #12]
   153d8:	ldr	r4, [sp, #12]
   153dc:	and	r9, r8, #8
   153e0:	b	152f8 <__assert_fail@plt+0x3754>
   153e4:	mov	r4, #1
   153e8:	b	153f0 <__assert_fail@plt+0x384c>
   153ec:	mov	r4, #0
   153f0:	mov	r0, r6
   153f4:	bl	17750 <__assert_fail@plt+0x5bac>
   153f8:	ldr	r0, [r5, #8]
   153fc:	eor	r0, r0, #536870912	; 0x20000000
   15400:	ubfx	r0, r0, #29, #1
   15404:	subs	r0, r0, r4
   15408:	movne	r0, #1
   1540c:	add	sp, sp, #20
   15410:	ldrd	r4, [sp]
   15414:	ldrd	r6, [sp, #8]
   15418:	ldrd	r8, [sp, #16]
   1541c:	ldrd	sl, [sp, #24]
   15420:	add	sp, sp, #32
   15424:	pop	{pc}		; (ldr pc, [sp], #4)
   15428:	mov	r4, #0
   1542c:	b	153f0 <__assert_fail@plt+0x384c>
   15430:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15434:	strd	r6, [sp, #8]
   15438:	strd	r8, [sp, #16]
   1543c:	str	lr, [sp, #24]
   15440:	sub	sp, sp, #12
   15444:	mov	r5, r0
   15448:	mov	r7, r1
   1544c:	mov	r4, r2
   15450:	tst	r2, #402653184	; 0x18000000
   15454:	beq	15628 <__assert_fail@plt+0x3a84>
   15458:	mov	r1, r2
   1545c:	mov	r0, r7
   15460:	bl	14e18 <__assert_fail@plt+0x3274>
   15464:	cmp	r0, #0
   15468:	beq	15628 <__assert_fail@plt+0x3a84>
   1546c:	ldr	r3, [r5]
   15470:	cmp	r3, #0
   15474:	beq	15484 <__assert_fail@plt+0x38e0>
   15478:	ldr	r2, [r3, #4]
   1547c:	cmp	r2, #1
   15480:	beq	1558c <__assert_fail@plt+0x39e8>
   15484:	mov	r0, #24
   15488:	bl	2decc <__assert_fail@plt+0x1c328>
   1548c:	mov	r3, #1
   15490:	str	r3, [r0, #4]
   15494:	str	r4, [r0, #8]
   15498:	ldr	r3, [r5]
   1549c:	str	r3, [r0]
   154a0:	str	r0, [r5]
   154a4:	ldr	r6, [r5]
   154a8:	ldr	r2, [r6, #20]
   154ac:	ldr	r3, [r6, #16]
   154b0:	cmp	r2, r3
   154b4:	beq	155a0 <__assert_fail@plt+0x39fc>
   154b8:	ldr	r2, [r6, #12]
   154bc:	ldr	r3, [r6, #20]
   154c0:	add	r1, r3, #1
   154c4:	str	r1, [r6, #20]
   154c8:	add	r3, r3, r3, lsl #3
   154cc:	lsl	r3, r3, #2
   154d0:	add	r8, r2, r3
   154d4:	str	r4, [r2, r3]
   154d8:	tst	r4, #134217728	; 0x8000000
   154dc:	beq	155fc <__assert_fail@plt+0x3a58>
   154e0:	asr	r5, r4, #3
   154e4:	and	r5, r5, #2
   154e8:	orr	r5, r5, #9
   154ec:	tst	r4, #8
   154f0:	beq	155d0 <__assert_fail@plt+0x3a2c>
   154f4:	mov	r0, r7
   154f8:	bl	11988 <strlen@plt>
   154fc:	mov	r4, r0
   15500:	cmp	r0, #0
   15504:	ble	155c4 <__assert_fail@plt+0x3a20>
   15508:	sub	r0, r0, #1
   1550c:	add	r3, r7, r0
   15510:	ldrb	r2, [r7, r0]
   15514:	cmp	r2, #47	; 0x2f
   15518:	bne	15530 <__assert_fail@plt+0x398c>
   1551c:	subs	r4, r4, #1
   15520:	beq	155ec <__assert_fail@plt+0x3a48>
   15524:	ldrb	r2, [r3, #-1]!
   15528:	cmp	r2, #47	; 0x2f
   1552c:	beq	1551c <__assert_fail@plt+0x3978>
   15530:	add	r0, r4, #7
   15534:	bl	2db90 <__assert_fail@plt+0x1bfec>
   15538:	mov	r9, r0
   1553c:	mov	r2, r4
   15540:	mov	r1, r7
   15544:	bl	11784 <memcpy@plt>
   15548:	add	r2, r9, r4
   1554c:	movw	r3, #8320	; 0x2080
   15550:	movt	r3, #3
   15554:	ldr	r1, [r3]
   15558:	str	r1, [r9, r4]
   1555c:	ldrh	r1, [r3, #4]
   15560:	strh	r1, [r2, #4]
   15564:	ldrb	r3, [r3, #6]
   15568:	strb	r3, [r2, #6]
   1556c:	mov	r2, r5
   15570:	mov	r1, r9
   15574:	add	r0, r8, #4
   15578:	bl	2cb10 <__assert_fail@plt+0x1af6c>
   1557c:	mov	r4, r0
   15580:	mov	r0, r9
   15584:	bl	17750 <__assert_fail@plt+0x5bac>
   15588:	b	155e4 <__assert_fail@plt+0x3a40>
   1558c:	ldr	r3, [r3, #8]
   15590:	eor	r3, r3, r4
   15594:	tst	r3, #536870912	; 0x20000000
   15598:	beq	154a4 <__assert_fail@plt+0x3900>
   1559c:	b	15484 <__assert_fail@plt+0x38e0>
   155a0:	ldr	r0, [r6, #12]
   155a4:	mov	r3, #36	; 0x24
   155a8:	str	r3, [sp]
   155ac:	mvn	r3, #0
   155b0:	mov	r2, #1
   155b4:	add	r1, r6, #16
   155b8:	bl	2ddb8 <__assert_fail@plt+0x1c214>
   155bc:	str	r0, [r6, #12]
   155c0:	b	154b8 <__assert_fail@plt+0x3914>
   155c4:	cmp	r0, #0
   155c8:	beq	155ec <__assert_fail@plt+0x3a48>
   155cc:	b	15530 <__assert_fail@plt+0x398c>
   155d0:	mov	r2, r5
   155d4:	mov	r1, r7
   155d8:	add	r0, r8, #4
   155dc:	bl	2cb10 <__assert_fail@plt+0x1af6c>
   155e0:	mov	r4, r0
   155e4:	cmp	r4, #0
   155e8:	beq	15704 <__assert_fail@plt+0x3b60>
   155ec:	ldr	r3, [r6, #20]
   155f0:	sub	r3, r3, #1
   155f4:	str	r3, [r6, #20]
   155f8:	b	15704 <__assert_fail@plt+0x3b60>
   155fc:	tst	r4, #67108864	; 0x4000000
   15600:	bne	1560c <__assert_fail@plt+0x3a68>
   15604:	str	r7, [r8, #4]
   15608:	b	15704 <__assert_fail@plt+0x3b60>
   1560c:	mov	r0, r7
   15610:	bl	2dfd8 <__assert_fail@plt+0x1c434>
   15614:	mov	r7, r0
   15618:	mov	r1, r0
   1561c:	mov	r0, r5
   15620:	bl	14ddc <__assert_fail@plt+0x3238>
   15624:	b	15604 <__assert_fail@plt+0x3a60>
   15628:	ldr	r3, [r5]
   1562c:	cmp	r3, #0
   15630:	beq	15658 <__assert_fail@plt+0x3ab4>
   15634:	ldr	r2, [r3, #4]
   15638:	cmp	r2, #0
   1563c:	bne	15658 <__assert_fail@plt+0x3ab4>
   15640:	ldr	r3, [r3, #8]
   15644:	eor	r3, r3, r4
   15648:	mov	r2, #24
   1564c:	movt	r2, #24576	; 0x6000
   15650:	tst	r3, r2
   15654:	beq	156cc <__assert_fail@plt+0x3b28>
   15658:	mov	r0, #24
   1565c:	bl	2decc <__assert_fail@plt+0x1c328>
   15660:	mov	r6, r0
   15664:	mov	r3, #0
   15668:	str	r3, [r0, #4]
   1566c:	str	r4, [r0, #8]
   15670:	and	r1, r4, #16
   15674:	movw	r0, #19392	; 0x4bc0
   15678:	movt	r0, #1
   1567c:	movw	r2, #19368	; 0x4ba8
   15680:	movt	r2, #1
   15684:	movw	ip, #19056	; 0x4a70
   15688:	movt	ip, #1
   1568c:	movw	r3, #19088	; 0x4a90
   15690:	movt	r3, #1
   15694:	movw	lr, #19032	; 0x4a58
   15698:	movt	lr, #1
   1569c:	str	lr, [sp]
   156a0:	cmp	r1, #0
   156a4:	movne	r3, ip
   156a8:	cmp	r1, #0
   156ac:	movne	r2, r0
   156b0:	mov	r1, #0
   156b4:	mov	r0, r1
   156b8:	bl	1a7d4 <__assert_fail@plt+0x8c30>
   156bc:	str	r0, [r6, #12]
   156c0:	ldr	r3, [r5]
   156c4:	str	r3, [r6]
   156c8:	str	r6, [r5]
   156cc:	ldr	r6, [r5]
   156d0:	mov	r0, r7
   156d4:	bl	2dfd8 <__assert_fail@plt+0x1c434>
   156d8:	mov	r5, r0
   156dc:	and	r4, r4, #268435458	; 0x10000002
   156e0:	cmp	r4, #268435456	; 0x10000000
   156e4:	beq	1571c <__assert_fail@plt+0x3b78>
   156e8:	mov	r1, r5
   156ec:	ldr	r0, [r6, #12]
   156f0:	bl	1ad88 <__assert_fail@plt+0x91e4>
   156f4:	cmp	r5, r0
   156f8:	beq	15704 <__assert_fail@plt+0x3b60>
   156fc:	mov	r0, r5
   15700:	bl	17750 <__assert_fail@plt+0x5bac>
   15704:	add	sp, sp, #12
   15708:	ldrd	r4, [sp]
   1570c:	ldrd	r6, [sp, #8]
   15710:	ldrd	r8, [sp, #16]
   15714:	add	sp, sp, #24
   15718:	pop	{pc}		; (ldr pc, [sp], #4)
   1571c:	mov	r3, r0
   15720:	mov	r1, r0
   15724:	mov	r0, #0
   15728:	mov	ip, #1
   1572c:	b	15744 <__assert_fail@plt+0x3ba0>
   15730:	add	r3, r3, r2
   15734:	ldrb	r2, [r3], #1
   15738:	strb	r2, [r1], #1
   1573c:	cmp	r2, #0
   15740:	beq	156e8 <__assert_fail@plt+0x3b44>
   15744:	ldrb	r2, [r3]
   15748:	cmp	r2, #92	; 0x5c
   1574c:	movne	r2, r0
   15750:	bne	15730 <__assert_fail@plt+0x3b8c>
   15754:	ldrb	r2, [r3, #1]
   15758:	cmp	r2, #0
   1575c:	movne	r2, ip
   15760:	bne	15730 <__assert_fail@plt+0x3b8c>
   15764:	ldrb	r2, [r3], #1
   15768:	strb	r2, [r1], #1
   1576c:	b	15744 <__assert_fail@plt+0x3ba0>
   15770:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15774:	strd	r6, [sp, #8]
   15778:	strd	r8, [sp, #16]
   1577c:	strd	sl, [sp, #24]
   15780:	str	lr, [sp, #32]
   15784:	sub	sp, sp, #36	; 0x24
   15788:	str	r0, [sp, #16]
   1578c:	str	r1, [sp, #12]
   15790:	mov	r8, r2
   15794:	str	r3, [sp, #20]
   15798:	ldrb	r9, [sp, #72]	; 0x48
   1579c:	mov	r6, #0
   157a0:	str	r6, [sp, #28]
   157a4:	mov	r4, r6
   157a8:	mov	sl, #1
   157ac:	mvn	fp, #0
   157b0:	b	157d8 <__assert_fail@plt+0x3c34>
   157b4:	str	sl, [sp]
   157b8:	mov	r3, fp
   157bc:	mov	r2, sl
   157c0:	add	r1, sp, #28
   157c4:	mov	r0, r6
   157c8:	bl	2ddb8 <__assert_fail@plt+0x1c214>
   157cc:	mov	r6, r0
   157d0:	strb	r5, [r6, r4]
   157d4:	add	r4, r4, #1
   157d8:	mov	r7, r4
   157dc:	mov	r0, r8
   157e0:	bl	11b74 <getc@plt>
   157e4:	mov	r5, r0
   157e8:	cmn	r0, #1
   157ec:	beq	15800 <__assert_fail@plt+0x3c5c>
   157f0:	ldr	r3, [sp, #28]
   157f4:	cmp	r3, r4
   157f8:	bne	157d0 <__assert_fail@plt+0x3c2c>
   157fc:	b	157b4 <__assert_fail@plt+0x3c10>
   15800:	mov	r0, r8
   15804:	bl	1176c <ferror@plt>
   15808:	subs	sl, r0, #0
   1580c:	beq	15818 <__assert_fail@plt+0x3c74>
   15810:	bl	119b8 <__errno_location@plt>
   15814:	ldr	sl, [r0]
   15818:	add	r1, r7, #1
   1581c:	mov	r0, r6
   15820:	bl	2dc18 <__assert_fail@plt+0x1c074>
   15824:	mov	r8, r0
   15828:	strb	r9, [r0, r4]
   1582c:	cmp	r7, #0
   15830:	beq	15908 <__assert_fail@plt+0x3d64>
   15834:	add	r3, r0, r4
   15838:	ldrb	r3, [r3, #-1]
   1583c:	cmp	r3, r9
   15840:	addne	r4, r4, #1
   15844:	add	r4, r0, r4
   15848:	mov	r1, r0
   1584c:	ldr	r0, [sp, #12]
   15850:	bl	14ddc <__assert_fail@plt+0x3238>
   15854:	cmp	r8, r4
   15858:	bcs	15914 <__assert_fail@plt+0x3d70>
   1585c:	lsl	fp, r9, #1
   15860:	mov	r5, r8
   15864:	b	15898 <__assert_fail@plt+0x3cf4>
   15868:	mov	r3, #0
   1586c:	strb	r3, [r7]
   15870:	ldr	r3, [sp, #76]	; 0x4c
   15874:	ldr	r2, [sp, #20]
   15878:	mov	r1, r8
   1587c:	ldr	r0, [sp, #12]
   15880:	ldr	ip, [sp, #16]
   15884:	blx	ip
   15888:	mov	r8, r6
   1588c:	mov	r5, r6
   15890:	cmp	r6, r4
   15894:	beq	15914 <__assert_fail@plt+0x3d70>
   15898:	mov	r7, r5
   1589c:	mov	r6, r5
   158a0:	ldrb	r3, [r6], #1
   158a4:	cmp	r3, r9
   158a8:	bne	1588c <__assert_fail@plt+0x3ce8>
   158ac:	bl	11964 <__ctype_b_loc@plt>
   158b0:	ldr	r2, [r0]
   158b4:	ldrh	r3, [r2, fp]
   158b8:	tst	r3, #8192	; 0x2000
   158bc:	beq	15868 <__assert_fail@plt+0x3cc4>
   158c0:	cmp	r8, r5
   158c4:	beq	15888 <__assert_fail@plt+0x3ce4>
   158c8:	ldrb	r3, [r6, #-2]
   158cc:	lsl	r3, r3, #1
   158d0:	ldrh	r3, [r2, r3]
   158d4:	tst	r3, #8192	; 0x2000
   158d8:	beq	15868 <__assert_fail@plt+0x3cc4>
   158dc:	sub	r5, r5, #1
   158e0:	mov	r1, r8
   158e4:	mov	r7, r5
   158e8:	cmp	r5, r1
   158ec:	beq	15888 <__assert_fail@plt+0x3ce4>
   158f0:	ldrb	r3, [r5, #-1]!
   158f4:	lsl	r3, r3, #1
   158f8:	ldrh	r3, [r2, r3]
   158fc:	tst	r3, #8192	; 0x2000
   15900:	bne	158e4 <__assert_fail@plt+0x3d40>
   15904:	b	15868 <__assert_fail@plt+0x3cc4>
   15908:	mov	r1, r0
   1590c:	ldr	r0, [sp, #12]
   15910:	bl	14ddc <__assert_fail@plt+0x3238>
   15914:	bl	119b8 <__errno_location@plt>
   15918:	str	sl, [r0]
   1591c:	adds	r0, sl, #0
   15920:	movne	r0, #1
   15924:	rsb	r0, r0, #0
   15928:	add	sp, sp, #36	; 0x24
   1592c:	ldrd	r4, [sp]
   15930:	ldrd	r6, [sp, #8]
   15934:	ldrd	r8, [sp, #16]
   15938:	ldrd	sl, [sp, #24]
   1593c:	add	sp, sp, #32
   15940:	pop	{pc}		; (ldr pc, [sp], #4)
   15944:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15948:	strd	r6, [sp, #8]
   1594c:	str	r8, [sp, #16]
   15950:	str	lr, [sp, #20]
   15954:	sub	sp, sp, #16
   15958:	str	r0, [sp, #12]
   1595c:	mov	r5, r1
   15960:	mov	r4, r2
   15964:	mov	r6, r3
   15968:	ldrb	r7, [sp, #40]	; 0x28
   1596c:	movw	r1, #7108	; 0x1bc4
   15970:	movt	r1, #3
   15974:	mov	r0, r2
   15978:	bl	1170c <strcmp@plt>
   1597c:	cmp	r0, #0
   15980:	beq	15a00 <__assert_fail@plt+0x3e5c>
   15984:	movw	r1, #8820	; 0x2274
   15988:	movt	r1, #3
   1598c:	mov	r0, r4
   15990:	bl	11afc <fopen64@plt>
   15994:	subs	r8, r0, #0
   15998:	beq	15a34 <__assert_fail@plt+0x3e90>
   1599c:	add	r3, sp, #12
   159a0:	str	r3, [sp, #4]
   159a4:	str	r7, [sp]
   159a8:	mov	r3, r6
   159ac:	mov	r2, r8
   159b0:	mov	r1, r5
   159b4:	movw	r0, #19004	; 0x4a3c
   159b8:	movt	r0, #1
   159bc:	bl	15770 <__assert_fail@plt+0x3bcc>
   159c0:	mov	r4, r0
   159c4:	bl	119b8 <__errno_location@plt>
   159c8:	mov	r5, r0
   159cc:	ldr	r6, [r0]
   159d0:	mov	r0, r8
   159d4:	bl	15a44 <__assert_fail@plt+0x3ea0>
   159d8:	cmp	r0, #0
   159dc:	bne	15a3c <__assert_fail@plt+0x3e98>
   159e0:	str	r6, [r5]
   159e4:	mov	r0, r4
   159e8:	add	sp, sp, #16
   159ec:	ldrd	r4, [sp]
   159f0:	ldrd	r6, [sp, #8]
   159f4:	ldr	r8, [sp, #16]
   159f8:	add	sp, sp, #20
   159fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15a00:	movw	r2, #12856	; 0x3238
   15a04:	movt	r2, #4
   15a08:	add	r3, sp, #12
   15a0c:	str	r3, [sp, #4]
   15a10:	str	r7, [sp]
   15a14:	mov	r3, r6
   15a18:	ldr	r2, [r2]
   15a1c:	mov	r1, r5
   15a20:	movw	r0, #19004	; 0x4a3c
   15a24:	movt	r0, #1
   15a28:	bl	15770 <__assert_fail@plt+0x3bcc>
   15a2c:	mov	r4, r0
   15a30:	b	159e4 <__assert_fail@plt+0x3e40>
   15a34:	mvn	r4, #0
   15a38:	b	159e4 <__assert_fail@plt+0x3e40>
   15a3c:	mvn	r4, #0
   15a40:	b	159e4 <__assert_fail@plt+0x3e40>
   15a44:	strd	r4, [sp, #-16]!
   15a48:	str	r6, [sp, #8]
   15a4c:	str	lr, [sp, #12]
   15a50:	sub	sp, sp, #8
   15a54:	mov	r4, r0
   15a58:	bl	11a0c <fileno@plt>
   15a5c:	cmp	r0, #0
   15a60:	blt	15ad8 <__assert_fail@plt+0x3f34>
   15a64:	mov	r0, r4
   15a68:	bl	1191c <__freading@plt>
   15a6c:	cmp	r0, #0
   15a70:	beq	15aa4 <__assert_fail@plt+0x3f00>
   15a74:	mov	r0, r4
   15a78:	bl	11a0c <fileno@plt>
   15a7c:	mov	r3, #1
   15a80:	str	r3, [sp]
   15a84:	mov	r2, #0
   15a88:	mov	r3, #0
   15a8c:	bl	11874 <lseek64@plt>
   15a90:	mvn	r2, #0
   15a94:	mvn	r3, #0
   15a98:	cmp	r1, r3
   15a9c:	cmpeq	r0, r2
   15aa0:	beq	15ae4 <__assert_fail@plt+0x3f40>
   15aa4:	mov	r0, r4
   15aa8:	bl	15b00 <__assert_fail@plt+0x3f5c>
   15aac:	cmp	r0, #0
   15ab0:	beq	15ae4 <__assert_fail@plt+0x3f40>
   15ab4:	bl	119b8 <__errno_location@plt>
   15ab8:	mov	r5, r0
   15abc:	ldr	r6, [r0]
   15ac0:	mov	r0, r4
   15ac4:	bl	11a30 <fclose@plt>
   15ac8:	cmp	r6, #0
   15acc:	strne	r6, [r5]
   15ad0:	mvnne	r0, #0
   15ad4:	b	15aec <__assert_fail@plt+0x3f48>
   15ad8:	mov	r0, r4
   15adc:	bl	11a30 <fclose@plt>
   15ae0:	b	15aec <__assert_fail@plt+0x3f48>
   15ae4:	mov	r0, r4
   15ae8:	bl	11a30 <fclose@plt>
   15aec:	add	sp, sp, #8
   15af0:	ldrd	r4, [sp]
   15af4:	ldr	r6, [sp, #8]
   15af8:	add	sp, sp, #12
   15afc:	pop	{pc}		; (ldr pc, [sp], #4)
   15b00:	str	r4, [sp, #-8]!
   15b04:	str	lr, [sp, #4]
   15b08:	sub	sp, sp, #8
   15b0c:	subs	r4, r0, #0
   15b10:	beq	15b24 <__assert_fail@plt+0x3f80>
   15b14:	mov	r0, r4
   15b18:	bl	1191c <__freading@plt>
   15b1c:	cmp	r0, #0
   15b20:	bne	15b3c <__assert_fail@plt+0x3f98>
   15b24:	mov	r0, r4
   15b28:	bl	11730 <fflush@plt>
   15b2c:	add	sp, sp, #8
   15b30:	ldr	r4, [sp]
   15b34:	add	sp, sp, #4
   15b38:	pop	{pc}		; (ldr pc, [sp], #4)
   15b3c:	ldr	r3, [r4]
   15b40:	tst	r3, #256	; 0x100
   15b44:	bne	15b54 <__assert_fail@plt+0x3fb0>
   15b48:	mov	r0, r4
   15b4c:	bl	11730 <fflush@plt>
   15b50:	b	15b2c <__assert_fail@plt+0x3f88>
   15b54:	mov	r3, #1
   15b58:	str	r3, [sp]
   15b5c:	mov	r2, #0
   15b60:	mov	r3, #0
   15b64:	mov	r0, r4
   15b68:	bl	179a8 <__assert_fail@plt+0x5e04>
   15b6c:	b	15b48 <__assert_fail@plt+0x3fa4>
   15b70:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15b74:	strd	r6, [sp, #8]
   15b78:	str	r8, [sp, #16]
   15b7c:	str	lr, [sp, #20]
   15b80:	subs	r5, r2, #0
   15b84:	beq	15bb8 <__assert_fail@plt+0x4014>
   15b88:	mov	r6, r0
   15b8c:	mov	r4, r1
   15b90:	bl	11928 <__ctype_tolower_loc@plt>
   15b94:	mov	r7, r0
   15b98:	add	r5, r4, r5
   15b9c:	ldrb	r2, [r4], #1
   15ba0:	ldr	r3, [r7]
   15ba4:	mov	r1, r6
   15ba8:	ldr	r0, [r3, r2, lsl #2]
   15bac:	bl	11a90 <fputc@plt>
   15bb0:	cmp	r5, r4
   15bb4:	bne	15b9c <__assert_fail@plt+0x3ff8>
   15bb8:	ldrd	r4, [sp]
   15bbc:	ldrd	r6, [sp, #8]
   15bc0:	ldr	r8, [sp, #16]
   15bc4:	add	sp, sp, #20
   15bc8:	pop	{pc}		; (ldr pc, [sp], #4)
   15bcc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15bd0:	strd	r6, [sp, #8]
   15bd4:	str	r8, [sp, #16]
   15bd8:	str	lr, [sp, #20]
   15bdc:	subs	r5, r2, #0
   15be0:	beq	15c14 <__assert_fail@plt+0x4070>
   15be4:	mov	r6, r0
   15be8:	mov	r4, r1
   15bec:	bl	11934 <__ctype_toupper_loc@plt>
   15bf0:	mov	r7, r0
   15bf4:	add	r5, r4, r5
   15bf8:	ldrb	r2, [r4], #1
   15bfc:	ldr	r3, [r7]
   15c00:	mov	r1, r6
   15c04:	ldr	r0, [r3, r2, lsl #2]
   15c08:	bl	11a90 <fputc@plt>
   15c0c:	cmp	r5, r4
   15c10:	bne	15bf8 <__assert_fail@plt+0x4054>
   15c14:	ldrd	r4, [sp]
   15c18:	ldrd	r6, [sp, #8]
   15c1c:	ldr	r8, [sp, #16]
   15c20:	add	sp, sp, #20
   15c24:	pop	{pc}		; (ldr pc, [sp], #4)
   15c28:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15c2c:	strd	r6, [sp, #8]
   15c30:	strd	r8, [sp, #16]
   15c34:	strd	sl, [sp, #24]
   15c38:	str	lr, [sp, #32]
   15c3c:	sub	sp, sp, #1120	; 0x460
   15c40:	sub	sp, sp, #12
   15c44:	str	r0, [sp, #24]
   15c48:	mov	r6, r1
   15c4c:	mov	r4, r2
   15c50:	str	r2, [sp, #40]	; 0x28
   15c54:	str	r3, [sp, #32]
   15c58:	ldr	sl, [sp, #1172]	; 0x494
   15c5c:	bl	119b8 <__errno_location@plt>
   15c60:	str	r0, [sp, #28]
   15c64:	ldr	r3, [r0]
   15c68:	str	r3, [sp, #44]	; 0x2c
   15c6c:	ldr	r9, [r4, #8]
   15c70:	ldr	r2, [r4, #40]	; 0x28
   15c74:	movw	r3, #8476	; 0x211c
   15c78:	movt	r3, #3
   15c7c:	cmp	r2, #0
   15c80:	moveq	r2, r3
   15c84:	str	r2, [sp, #48]	; 0x30
   15c88:	cmp	r9, #12
   15c8c:	subgt	r9, r9, #12
   15c90:	bgt	15c9c <__assert_fail@plt+0x40f8>
   15c94:	cmp	r9, #0
   15c98:	moveq	r9, #12
   15c9c:	ldrb	r3, [r6]
   15ca0:	cmp	r3, #0
   15ca4:	beq	17530 <__assert_fail@plt+0x598c>
   15ca8:	mov	r7, #0
   15cac:	movw	r2, #46021	; 0xb3c5
   15cb0:	movt	r2, #37282	; 0x91a2
   15cb4:	str	r2, [sp, #68]	; 0x44
   15cb8:	movw	r2, #34953	; 0x8889
   15cbc:	movt	r2, #34952	; 0x8888
   15cc0:	str	r2, [sp, #72]	; 0x48
   15cc4:	movw	r2, #34079	; 0x851f
   15cc8:	movt	r2, #20971	; 0x51eb
   15ccc:	str	r2, [sp, #56]	; 0x38
   15cd0:	movw	fp, #9363	; 0x2493
   15cd4:	movt	fp, #37449	; 0x9249
   15cd8:	movw	r8, #26215	; 0x6667
   15cdc:	movt	r8, #26214	; 0x6666
   15ce0:	str	r9, [sp, #64]	; 0x40
   15ce4:	str	fp, [sp, #52]	; 0x34
   15ce8:	str	r8, [sp, #60]	; 0x3c
   15cec:	b	15d2c <__assert_fail@plt+0x4188>
   15cf0:	ldr	r3, [sp, #24]
   15cf4:	cmp	r3, #0
   15cf8:	beq	15d10 <__assert_fail@plt+0x416c>
   15cfc:	cmp	sl, #1
   15d00:	bhi	15d84 <__assert_fail@plt+0x41e0>
   15d04:	ldr	r1, [sp, #24]
   15d08:	ldrb	r0, [r6]
   15d0c:	bl	11a90 <fputc@plt>
   15d10:	add	r7, r7, r5
   15d14:	mov	r4, r6
   15d18:	add	r6, r4, #1
   15d1c:	ldrb	r3, [r4, #1]
   15d20:	mvn	sl, #0
   15d24:	cmp	r3, #0
   15d28:	beq	17534 <__assert_fail@plt+0x5990>
   15d2c:	cmp	r3, #37	; 0x25
   15d30:	beq	15ec0 <__assert_fail@plt+0x431c>
   15d34:	bic	sl, sl, sl, asr #31
   15d38:	cmp	sl, #1
   15d3c:	movcs	r5, sl
   15d40:	movcc	r5, #1
   15d44:	mvn	r3, r7
   15d48:	cmp	r3, r5
   15d4c:	bhi	15cf0 <__assert_fail@plt+0x414c>
   15d50:	mov	r3, #34	; 0x22
   15d54:	ldr	r2, [sp, #28]
   15d58:	str	r3, [r2]
   15d5c:	mov	r7, #0
   15d60:	mov	r0, r7
   15d64:	add	sp, sp, #1120	; 0x460
   15d68:	add	sp, sp, #12
   15d6c:	ldrd	r4, [sp]
   15d70:	ldrd	r6, [sp, #8]
   15d74:	ldrd	r8, [sp, #16]
   15d78:	ldrd	sl, [sp, #24]
   15d7c:	add	sp, sp, #32
   15d80:	pop	{pc}		; (ldr pc, [sp], #4)
   15d84:	sub	sl, sl, #1
   15d88:	mov	r4, #0
   15d8c:	mov	r8, #32
   15d90:	ldr	r1, [sp, #24]
   15d94:	mov	r0, r8
   15d98:	bl	11a90 <fputc@plt>
   15d9c:	add	r4, r4, #1
   15da0:	cmp	sl, r4
   15da4:	bne	15d90 <__assert_fail@plt+0x41ec>
   15da8:	b	15d04 <__assert_fail@plt+0x4160>
   15dac:	str	r2, [sp, #36]	; 0x24
   15db0:	b	15db8 <__assert_fail@plt+0x4214>
   15db4:	mov	r5, r1
   15db8:	ldrb	r2, [r4, #1]!
   15dbc:	sub	r3, r2, #35	; 0x23
   15dc0:	cmp	r3, #60	; 0x3c
   15dc4:	ldrls	pc, [pc, r3, lsl #2]
   15dc8:	b	15ee8 <__assert_fail@plt+0x4344>
   15dcc:			; <UNDEFINED> instruction: 0x00015db4
   15dd0:	andeq	r5, r1, r8, ror #29
   15dd4:	andeq	r5, r1, r8, ror #29
   15dd8:	andeq	r5, r1, r8, ror #29
   15ddc:	andeq	r5, r1, r8, ror #29
   15de0:	andeq	r5, r1, r8, ror #29
   15de4:	andeq	r5, r1, r8, ror #29
   15de8:	andeq	r5, r1, r8, ror #29
   15dec:	andeq	r5, r1, ip, lsr #27
   15df0:	andeq	r5, r1, r8, ror #29
   15df4:	andeq	r5, r1, ip, lsr #27
   15df8:	andeq	r5, r1, r8, ror #29
   15dfc:	andeq	r5, r1, r8, ror #29
   15e00:	andeq	r5, r1, ip, lsr #27
   15e04:	andeq	r5, r1, r8, ror #29
   15e08:	andeq	r5, r1, r8, ror #29
   15e0c:	andeq	r5, r1, r8, ror #29
   15e10:	andeq	r5, r1, r8, ror #29
   15e14:	andeq	r5, r1, r8, ror #29
   15e18:	andeq	r5, r1, r8, ror #29
   15e1c:	andeq	r5, r1, r8, ror #29
   15e20:	andeq	r5, r1, r8, ror #29
   15e24:	andeq	r5, r1, r8, ror #29
   15e28:	andeq	r5, r1, r8, ror #29
   15e2c:	andeq	r5, r1, r8, ror #29
   15e30:	andeq	r5, r1, r8, ror #29
   15e34:	andeq	r5, r1, r8, ror #29
   15e38:	andeq	r5, r1, r8, ror #29
   15e3c:	andeq	r5, r1, r8, ror #29
   15e40:	andeq	r5, r1, r8, ror #29
   15e44:	andeq	r5, r1, r8, ror #29
   15e48:	andeq	r5, r1, r8, ror #29
   15e4c:	andeq	r5, r1, r8, ror #29
   15e50:	andeq	r5, r1, r8, ror #29
   15e54:	andeq	r5, r1, r8, ror #29
   15e58:	andeq	r5, r1, r8, ror #29
   15e5c:	andeq	r5, r1, r8, ror #29
   15e60:	andeq	r5, r1, r8, ror #29
   15e64:	andeq	r5, r1, r8, ror #29
   15e68:	andeq	r5, r1, r8, ror #29
   15e6c:	andeq	r5, r1, r8, ror #29
   15e70:	andeq	r5, r1, r8, ror #29
   15e74:	andeq	r5, r1, r8, ror #29
   15e78:	andeq	r5, r1, r8, ror #29
   15e7c:	andeq	r5, r1, r8, ror #29
   15e80:	andeq	r5, r1, r8, ror #29
   15e84:	andeq	r5, r1, r8, ror #29
   15e88:	andeq	r5, r1, r8, ror #29
   15e8c:	andeq	r5, r1, r8, ror #29
   15e90:	andeq	r5, r1, r8, ror #29
   15e94:	andeq	r5, r1, r8, ror #29
   15e98:	andeq	r5, r1, r8, ror #29
   15e9c:	andeq	r5, r1, r8, ror #29
   15ea0:	andeq	r5, r1, r8, ror #29
   15ea4:	andeq	r5, r1, r8, ror #29
   15ea8:	andeq	r5, r1, r8, ror #29
   15eac:	andeq	r5, r1, r8, ror #29
   15eb0:	andeq	r5, r1, r8, ror #29
   15eb4:	andeq	r5, r1, r8, ror #29
   15eb8:	ldrdeq	r5, [r1], -ip
   15ebc:	andeq	r5, r1, ip, lsr #27
   15ec0:	ldr	r3, [sp, #32]
   15ec4:	str	r3, [sp, #76]	; 0x4c
   15ec8:	mov	r4, r6
   15ecc:	mov	r5, #0
   15ed0:	str	r5, [sp, #36]	; 0x24
   15ed4:	mov	r1, #1
   15ed8:	b	15db8 <__assert_fail@plt+0x4214>
   15edc:	mov	r3, #1
   15ee0:	str	r3, [sp, #76]	; 0x4c
   15ee4:	b	15db8 <__assert_fail@plt+0x4214>
   15ee8:	sub	r2, r2, #48	; 0x30
   15eec:	cmp	r2, #9
   15ef0:	bls	1610c <__assert_fail@plt+0x4568>
   15ef4:	ldrb	r9, [r4]
   15ef8:	cmp	r9, #69	; 0x45
   15efc:	beq	16160 <__assert_fail@plt+0x45bc>
   15f00:	cmp	r9, #79	; 0x4f
   15f04:	movne	r9, #0
   15f08:	beq	16160 <__assert_fail@plt+0x45bc>
   15f0c:	ldrb	r3, [r4]
   15f10:	mov	r1, r3
   15f14:	cmp	r3, #122	; 0x7a
   15f18:	ldrls	pc, [pc, r3, lsl #2]
   15f1c:	b	161ac <__assert_fail@plt+0x4608>
   15f20:	andeq	r6, r1, r8, lsr #3
   15f24:	andeq	r6, r1, ip, lsr #3
   15f28:	andeq	r6, r1, ip, lsr #3
   15f2c:	andeq	r6, r1, ip, lsr #3
   15f30:	andeq	r6, r1, ip, lsr #3
   15f34:	andeq	r6, r1, ip, lsr #3
   15f38:	andeq	r6, r1, ip, lsr #3
   15f3c:	andeq	r6, r1, ip, lsr #3
   15f40:	andeq	r6, r1, ip, lsr #3
   15f44:	andeq	r6, r1, ip, lsr #3
   15f48:	andeq	r6, r1, ip, lsr #3
   15f4c:	andeq	r6, r1, ip, lsr #3
   15f50:	andeq	r6, r1, ip, lsr #3
   15f54:	andeq	r6, r1, ip, lsr #3
   15f58:	andeq	r6, r1, ip, lsr #3
   15f5c:	andeq	r6, r1, ip, lsr #3
   15f60:	andeq	r6, r1, ip, lsr #3
   15f64:	andeq	r6, r1, ip, lsr #3
   15f68:	andeq	r6, r1, ip, lsr #3
   15f6c:	andeq	r6, r1, ip, lsr #3
   15f70:	andeq	r6, r1, ip, lsr #3
   15f74:	andeq	r6, r1, ip, lsr #3
   15f78:	andeq	r6, r1, ip, lsr #3
   15f7c:	andeq	r6, r1, ip, lsr #3
   15f80:	andeq	r6, r1, ip, lsr #3
   15f84:	andeq	r6, r1, ip, lsr #3
   15f88:	andeq	r6, r1, ip, lsr #3
   15f8c:	andeq	r6, r1, ip, lsr #3
   15f90:	andeq	r6, r1, ip, lsr #3
   15f94:	andeq	r6, r1, ip, lsr #3
   15f98:	andeq	r6, r1, ip, lsr #3
   15f9c:	andeq	r6, r1, ip, lsr #3
   15fa0:	andeq	r6, r1, ip, lsr #3
   15fa4:	andeq	r6, r1, ip, lsr #3
   15fa8:	andeq	r6, r1, ip, lsr #3
   15fac:	andeq	r6, r1, ip, lsr #3
   15fb0:	andeq	r6, r1, ip, lsr #3
   15fb4:	muleq	r1, ip, r1
   15fb8:	andeq	r6, r1, ip, lsr #3
   15fbc:	andeq	r6, r1, ip, lsr #3
   15fc0:	andeq	r6, r1, ip, lsr #3
   15fc4:	andeq	r6, r1, ip, lsr #3
   15fc8:	andeq	r6, r1, ip, lsr #3
   15fcc:	andeq	r6, r1, ip, lsr #3
   15fd0:	andeq	r6, r1, ip, lsr #3
   15fd4:	andeq	r6, r1, ip, lsr #3
   15fd8:	andeq	r6, r1, ip, lsr #3
   15fdc:	andeq	r6, r1, ip, lsr #3
   15fe0:	andeq	r6, r1, ip, lsr #3
   15fe4:	andeq	r6, r1, ip, lsr #3
   15fe8:	andeq	r6, r1, ip, lsr #3
   15fec:	andeq	r6, r1, ip, lsr #3
   15ff0:	andeq	r6, r1, ip, lsr #3
   15ff4:	andeq	r6, r1, ip, lsr #3
   15ff8:	andeq	r6, r1, ip, lsr #3
   15ffc:	andeq	r6, r1, ip, lsr #3
   16000:	andeq	r6, r1, ip, lsr #3
   16004:	andeq	r6, r1, ip, lsr #3
   16008:	andeq	r6, r1, r8, ror r1
   1600c:	andeq	r6, r1, ip, lsr #3
   16010:	andeq	r6, r1, ip, lsr #3
   16014:	andeq	r6, r1, ip, lsr #3
   16018:	andeq	r6, r1, ip, lsr #3
   1601c:	andeq	r6, r1, ip, lsr #3
   16020:	andeq	r6, r1, ip, lsr #3
   16024:	andeq	r6, r1, r0, asr r3
   16028:	muleq	r1, r0, r3
   1602c:	muleq	r1, r0, r5
   16030:	andeq	r6, r1, ip, lsr #12
   16034:	andeq	r6, r1, ip, lsr #3
   16038:	andeq	r6, r1, r0, lsr r9
   1603c:	andeq	r6, r1, ip, lsr pc
   16040:	andeq	r6, r1, r4, ror #18
   16044:	andeq	r6, r1, ip, ror r9
   16048:	andeq	r6, r1, ip, lsr #3
   1604c:	andeq	r6, r1, ip, lsr #3
   16050:	andeq	r6, r1, ip, lsr #3
   16054:	andeq	r6, r1, r4, ror #19
   16058:	andeq	r6, r1, ip, lsr #20
   1605c:	andeq	r6, r1, ip, lsr #3
   16060:	andeq	r6, r1, r4, lsr #25
   16064:	andeq	r6, r1, ip, lsr #3
   16068:	andeq	r6, r1, r8, asr #7
   1606c:	andeq	r6, r1, r4, lsr #26
   16070:	andeq	r6, r1, r8, ror #2
   16074:	andeq	r6, r1, r4, lsl #30
   16078:	andeq	r6, r1, ip, lsr pc
   1607c:	andeq	r7, r1, r0, ror r1
   16080:	strdeq	r6, [r1], -r8
   16084:	ldrdeq	r7, [r1], -ip
   16088:	andeq	r7, r1, ip, ror #4
   1608c:	andeq	r6, r1, ip, lsr #3
   16090:	andeq	r6, r1, ip, lsr #3
   16094:	andeq	r6, r1, ip, lsr #3
   16098:	andeq	r6, r1, ip, lsr #3
   1609c:	andeq	r6, r1, ip, lsr #3
   160a0:	andeq	r6, r1, ip, lsr #3
   160a4:	andeq	r6, r1, r8, lsl r3
   160a8:	andeq	r6, r1, r0, ror r3
   160ac:			; <UNDEFINED> instruction: 0x000163b4
   160b0:	andeq	r6, r1, r4, asr #12
   160b4:	andeq	r6, r1, ip, asr r6
   160b8:	andeq	r6, r1, ip, lsr #3
   160bc:	andeq	r6, r1, ip, lsr pc
   160c0:	andeq	r6, r1, r0, ror r3
   160c4:	andeq	r6, r1, ip, lsr #3
   160c8:			; <UNDEFINED> instruction: 0x000169b4
   160cc:	muleq	r1, r0, r9
   160d0:	andeq	r6, r1, r4, lsr #19
   160d4:	strdeq	r6, [r1], -ip
   160d8:	andeq	r6, r1, r0, ror #23
   160dc:	andeq	r6, r1, ip, lsr #3
   160e0:	andeq	r6, r1, ip, lsr #25
   160e4:	andeq	r6, r1, ip, ror #25
   160e8:	strdeq	r6, [r1], -r8
   160ec:	andeq	r6, r1, ip, lsr sp
   160f0:	andeq	r6, r1, ip, lsl #28
   160f4:	ldrdeq	r6, [r1], -r0
   160f8:	andeq	r6, r1, ip, lsr #3
   160fc:	andeq	r7, r1, r4, asr #3
   16100:	andeq	r6, r1, r8, lsl r6
   16104:	andeq	r7, r1, r8, lsl r2
   16108:	andeq	r7, r1, r0, asr #7
   1610c:	mov	sl, #0
   16110:	mov	r2, #10
   16114:	b	16128 <__assert_fail@plt+0x4584>
   16118:	ldrb	r3, [r4, #1]!
   1611c:	sub	r3, r3, #48	; 0x30
   16120:	cmp	r3, #9
   16124:	bhi	15ef4 <__assert_fail@plt+0x4350>
   16128:	smull	r0, r1, sl, r2
   1612c:	asr	r3, r0, #31
   16130:	mov	sl, r0
   16134:	cmp	r3, r1
   16138:	mvnne	sl, #-2147483648	; 0x80000000
   1613c:	bne	16118 <__assert_fail@plt+0x4574>
   16140:	ldrb	r3, [r4]
   16144:	sub	r3, r3, #48	; 0x30
   16148:	adds	sl, sl, r3
   1614c:	movvs	r3, #1
   16150:	movvc	r3, #0
   16154:	cmp	r3, #0
   16158:	mvnne	sl, #-2147483648	; 0x80000000
   1615c:	b	16118 <__assert_fail@plt+0x4574>
   16160:	add	r4, r4, #1
   16164:	b	15f0c <__assert_fail@plt+0x4368>
   16168:	mvn	r9, #0
   1616c:	movw	r8, #8328	; 0x2088
   16170:	movt	r8, #3
   16174:	b	163d4 <__assert_fail@plt+0x4830>
   16178:	add	r2, r4, #1
   1617c:	ldrb	r3, [r4, #1]
   16180:	cmp	r3, #58	; 0x3a
   16184:	movne	lr, #1
   16188:	beq	173a0 <__assert_fail@plt+0x57fc>
   1618c:	cmp	r3, #122	; 0x7a
   16190:	moveq	r4, r2
   16194:	bne	161ac <__assert_fail@plt+0x4608>
   16198:	b	173c4 <__assert_fail@plt+0x5820>
   1619c:	sub	r3, r4, #1
   161a0:	cmp	r6, r3
   161a4:	beq	16254 <__assert_fail@plt+0x46b0>
   161a8:	sub	r4, r4, #1
   161ac:	sub	r5, r4, r6
   161b0:	add	r5, r5, #1
   161b4:	ldr	r2, [sp, #36]	; 0x24
   161b8:	mvn	r3, sl
   161bc:	lsr	r3, r3, #31
   161c0:	cmp	r2, #45	; 0x2d
   161c4:	moveq	r3, #0
   161c8:	cmp	r3, #0
   161cc:	moveq	sl, #0
   161d0:	mov	r8, sl
   161d4:	cmp	sl, r5
   161d8:	movcc	sl, r5
   161dc:	mvn	r3, r7
   161e0:	cmp	r3, sl
   161e4:	bls	174e4 <__assert_fail@plt+0x5940>
   161e8:	ldr	r3, [sp, #24]
   161ec:	cmp	r3, #0
   161f0:	beq	1624c <__assert_fail@plt+0x46a8>
   161f4:	cmp	r8, r5
   161f8:	bls	16230 <__assert_fail@plt+0x468c>
   161fc:	sub	r8, r8, r5
   16200:	ldr	r3, [sp, #36]	; 0x24
   16204:	cmp	r3, #43	; 0x2b
   16208:	cmpne	r3, #48	; 0x30
   1620c:	bne	174f4 <__assert_fail@plt+0x5950>
   16210:	mov	r9, #0
   16214:	mov	fp, #48	; 0x30
   16218:	ldr	r1, [sp, #24]
   1621c:	mov	r0, fp
   16220:	bl	11a90 <fputc@plt>
   16224:	add	r9, r9, #1
   16228:	cmp	r8, r9
   1622c:	bne	16218 <__assert_fail@plt+0x4674>
   16230:	ldr	r3, [sp, #76]	; 0x4c
   16234:	cmp	r3, #0
   16238:	beq	17518 <__assert_fail@plt+0x5974>
   1623c:	mov	r2, r5
   16240:	mov	r1, r6
   16244:	ldr	r0, [sp, #24]
   16248:	bl	15bcc <__assert_fail@plt+0x4028>
   1624c:	add	r7, r7, sl
   16250:	b	15d18 <__assert_fail@plt+0x4174>
   16254:	ldr	r2, [sp, #36]	; 0x24
   16258:	mvn	r3, sl
   1625c:	lsr	r3, r3, #31
   16260:	cmp	r2, #45	; 0x2d
   16264:	moveq	r3, #0
   16268:	cmp	r3, #0
   1626c:	moveq	sl, #0
   16270:	mov	r5, sl
   16274:	cmp	sl, #1
   16278:	movcc	sl, #1
   1627c:	mvn	r3, r7
   16280:	cmp	r3, sl
   16284:	bls	162e4 <__assert_fail@plt+0x4740>
   16288:	ldr	r3, [sp, #24]
   1628c:	cmp	r3, #0
   16290:	beq	162dc <__assert_fail@plt+0x4738>
   16294:	cmp	r5, #1
   16298:	bls	162d0 <__assert_fail@plt+0x472c>
   1629c:	sub	r5, r5, #1
   162a0:	ldr	r3, [sp, #36]	; 0x24
   162a4:	cmp	r3, #43	; 0x2b
   162a8:	cmpne	r3, #48	; 0x30
   162ac:	bne	162f4 <__assert_fail@plt+0x4750>
   162b0:	mov	r6, #0
   162b4:	mov	r8, #48	; 0x30
   162b8:	ldr	r1, [sp, #24]
   162bc:	mov	r0, r8
   162c0:	bl	11a90 <fputc@plt>
   162c4:	add	r6, r6, #1
   162c8:	cmp	r5, r6
   162cc:	bne	162b8 <__assert_fail@plt+0x4714>
   162d0:	ldr	r1, [sp, #24]
   162d4:	ldrb	r0, [r4]
   162d8:	bl	11a90 <fputc@plt>
   162dc:	add	r7, r7, sl
   162e0:	b	15d18 <__assert_fail@plt+0x4174>
   162e4:	mov	r3, #34	; 0x22
   162e8:	ldr	r2, [sp, #28]
   162ec:	str	r3, [r2]
   162f0:	b	15d5c <__assert_fail@plt+0x41b8>
   162f4:	mov	r6, #0
   162f8:	mov	r8, #32
   162fc:	ldr	r1, [sp, #24]
   16300:	mov	r0, r8
   16304:	bl	11a90 <fputc@plt>
   16308:	add	r6, r6, #1
   1630c:	cmp	r5, r6
   16310:	bne	162fc <__assert_fail@plt+0x4758>
   16314:	b	162d0 <__assert_fail@plt+0x472c>
   16318:	cmp	r9, #0
   1631c:	bne	161ac <__assert_fail@plt+0x4608>
   16320:	ldr	r3, [sp, #76]	; 0x4c
   16324:	cmp	r5, #0
   16328:	movne	r3, r5
   1632c:	str	r3, [sp, #76]	; 0x4c
   16330:	mov	r1, #97	; 0x61
   16334:	mov	r3, #32
   16338:	strb	r3, [sp, #88]	; 0x58
   1633c:	mov	r3, #37	; 0x25
   16340:	strb	r3, [sp, #89]	; 0x59
   16344:	mov	fp, #0
   16348:	add	r3, sp, #90	; 0x5a
   1634c:	b	166c0 <__assert_fail@plt+0x4b1c>
   16350:	cmp	r9, #0
   16354:	bne	161ac <__assert_fail@plt+0x4608>
   16358:	ldr	r3, [sp, #76]	; 0x4c
   1635c:	cmp	r5, #0
   16360:	movne	r3, r5
   16364:	str	r3, [sp, #76]	; 0x4c
   16368:	mov	r1, #65	; 0x41
   1636c:	b	16334 <__assert_fail@plt+0x4790>
   16370:	ldr	r3, [sp, #76]	; 0x4c
   16374:	cmp	r5, #0
   16378:	movne	r3, r5
   1637c:	str	r3, [sp, #76]	; 0x4c
   16380:	cmp	r9, #69	; 0x45
   16384:	movne	fp, #0
   16388:	bne	16ccc <__assert_fail@plt+0x5128>
   1638c:	b	161ac <__assert_fail@plt+0x4608>
   16390:	cmp	r9, #69	; 0x45
   16394:	beq	161ac <__assert_fail@plt+0x4608>
   16398:	ldr	r3, [sp, #76]	; 0x4c
   1639c:	cmp	r5, #0
   163a0:	movne	r3, r5
   163a4:	str	r3, [sp, #76]	; 0x4c
   163a8:	mov	r1, #66	; 0x42
   163ac:	mov	fp, #0
   163b0:	b	16ccc <__assert_fail@plt+0x5128>
   163b4:	cmp	r9, #79	; 0x4f
   163b8:	beq	161ac <__assert_fail@plt+0x4608>
   163bc:	mov	r1, #99	; 0x63
   163c0:	mov	fp, #0
   163c4:	b	16ccc <__assert_fail@plt+0x5128>
   163c8:	mvn	r9, #0
   163cc:	movw	r8, #8340	; 0x2094
   163d0:	movt	r8, #3
   163d4:	ldr	r3, [sp, #1184]	; 0x4a0
   163d8:	str	r3, [sp, #16]
   163dc:	ldr	r3, [sp, #1180]	; 0x49c
   163e0:	str	r3, [sp, #12]
   163e4:	ldr	r3, [sp, #1176]	; 0x498
   163e8:	str	r3, [sp, #8]
   163ec:	str	r9, [sp, #4]
   163f0:	ldr	r5, [sp, #36]	; 0x24
   163f4:	str	r5, [sp]
   163f8:	ldr	r3, [sp, #76]	; 0x4c
   163fc:	ldr	r2, [sp, #40]	; 0x28
   16400:	mov	r1, r8
   16404:	mov	r0, #0
   16408:	bl	15c28 <__assert_fail@plt+0x4084>
   1640c:	mvn	r3, sl
   16410:	lsr	r3, r3, #31
   16414:	cmp	r5, #45	; 0x2d
   16418:	moveq	r3, #0
   1641c:	cmp	r3, #0
   16420:	moveq	sl, #0
   16424:	mov	r5, sl
   16428:	cmp	sl, r0
   1642c:	movcc	sl, r0
   16430:	mvn	r3, r7
   16434:	cmp	r3, sl
   16438:	bls	164c4 <__assert_fail@plt+0x4920>
   1643c:	ldr	r3, [sp, #24]
   16440:	cmp	r3, #0
   16444:	beq	164bc <__assert_fail@plt+0x4918>
   16448:	cmp	r5, r0
   1644c:	bls	16484 <__assert_fail@plt+0x48e0>
   16450:	sub	r5, r5, r0
   16454:	ldr	r3, [sp, #36]	; 0x24
   16458:	cmp	r3, #43	; 0x2b
   1645c:	cmpne	r3, #48	; 0x30
   16460:	bne	164d4 <__assert_fail@plt+0x4930>
   16464:	mov	r6, #0
   16468:	mov	fp, #48	; 0x30
   1646c:	ldr	r1, [sp, #24]
   16470:	mov	r0, fp
   16474:	bl	11a90 <fputc@plt>
   16478:	add	r6, r6, #1
   1647c:	cmp	r5, r6
   16480:	bne	1646c <__assert_fail@plt+0x48c8>
   16484:	ldr	r3, [sp, #1184]	; 0x4a0
   16488:	str	r3, [sp, #16]
   1648c:	ldr	r3, [sp, #1180]	; 0x49c
   16490:	str	r3, [sp, #12]
   16494:	ldr	r3, [sp, #1176]	; 0x498
   16498:	str	r3, [sp, #8]
   1649c:	str	r9, [sp, #4]
   164a0:	ldr	r3, [sp, #36]	; 0x24
   164a4:	str	r3, [sp]
   164a8:	ldr	r3, [sp, #76]	; 0x4c
   164ac:	ldr	r2, [sp, #40]	; 0x28
   164b0:	mov	r1, r8
   164b4:	ldr	r0, [sp, #24]
   164b8:	bl	15c28 <__assert_fail@plt+0x4084>
   164bc:	add	r7, r7, sl
   164c0:	b	15d18 <__assert_fail@plt+0x4174>
   164c4:	mov	r3, #34	; 0x22
   164c8:	ldr	r2, [sp, #28]
   164cc:	str	r3, [r2]
   164d0:	b	15d5c <__assert_fail@plt+0x41b8>
   164d4:	mov	r6, #0
   164d8:	mov	fp, #32
   164dc:	ldr	r1, [sp, #24]
   164e0:	mov	r0, fp
   164e4:	bl	11a90 <fputc@plt>
   164e8:	add	r6, r6, #1
   164ec:	cmp	r5, r6
   164f0:	bne	164dc <__assert_fail@plt+0x4938>
   164f4:	b	16484 <__assert_fail@plt+0x48e0>
   164f8:	mov	fp, #0
   164fc:	b	16ccc <__assert_fail@plt+0x5128>
   16500:	mov	r3, #34	; 0x22
   16504:	ldr	r2, [sp, #28]
   16508:	str	r3, [r2]
   1650c:	b	15d5c <__assert_fail@plt+0x41b8>
   16510:	cmp	r6, #0
   16514:	beq	16538 <__assert_fail@plt+0x4994>
   16518:	mov	r8, #0
   1651c:	mov	r9, #48	; 0x30
   16520:	ldr	r1, [sp, #24]
   16524:	mov	r0, r9
   16528:	bl	11a90 <fputc@plt>
   1652c:	add	r8, r8, #1
   16530:	cmp	r6, r8
   16534:	bne	16520 <__assert_fail@plt+0x497c>
   16538:	cmp	fp, #0
   1653c:	bne	16564 <__assert_fail@plt+0x49c0>
   16540:	ldr	r3, [sp, #76]	; 0x4c
   16544:	cmp	r3, #0
   16548:	beq	16578 <__assert_fail@plt+0x49d4>
   1654c:	mov	r2, r5
   16550:	add	r1, sp, #105	; 0x69
   16554:	ldr	r0, [sp, #24]
   16558:	bl	15bcc <__assert_fail@plt+0x4028>
   1655c:	add	r7, r7, sl
   16560:	b	15d18 <__assert_fail@plt+0x4174>
   16564:	mov	r2, r5
   16568:	add	r1, sp, #105	; 0x69
   1656c:	ldr	r0, [sp, #24]
   16570:	bl	15b70 <__assert_fail@plt+0x3fcc>
   16574:	b	1655c <__assert_fail@plt+0x49b8>
   16578:	ldr	r3, [sp, #24]
   1657c:	mov	r2, #1
   16580:	mov	r1, r5
   16584:	add	r0, sp, #105	; 0x69
   16588:	bl	11868 <fwrite@plt>
   1658c:	b	1655c <__assert_fail@plt+0x49b8>
   16590:	cmp	r9, #69	; 0x45
   16594:	beq	17544 <__assert_fail@plt+0x59a0>
   16598:	ldr	r3, [sp, #40]	; 0x28
   1659c:	ldr	r2, [r3, #20]
   165a0:	movw	r8, #63636	; 0xf894
   165a4:	movt	r8, #65535	; 0xffff
   165a8:	cmp	r2, r8
   165ac:	movge	r8, #0
   165b0:	movlt	r8, #1
   165b4:	add	r3, r2, #1888	; 0x760
   165b8:	add	r3, r3, #12
   165bc:	movw	r0, #1899	; 0x76b
   165c0:	cmp	r3, r0
   165c4:	mvnls	r3, #98	; 0x62
   165c8:	movhi	r3, #0
   165cc:	add	r3, r3, r2
   165d0:	ldr	r2, [sp, #56]	; 0x38
   165d4:	smull	r0, r2, r2, r3
   165d8:	asr	r3, r3, #31
   165dc:	rsb	r3, r3, r2, asr #5
   165e0:	add	r3, r3, #19
   165e4:	mov	fp, #2
   165e8:	ldr	r0, [sp, #36]	; 0x24
   165ec:	mov	r2, r0
   165f0:	ldr	ip, [sp, #1168]	; 0x490
   165f4:	cmp	r0, #0
   165f8:	moveq	r2, ip
   165fc:	str	r2, [sp, #36]	; 0x24
   16600:	cmp	r2, #43	; 0x2b
   16604:	movne	r2, #0
   16608:	beq	16774 <__assert_fail@plt+0x4bd0>
   1660c:	str	r2, [sp, #80]	; 0x50
   16610:	mov	r0, #0
   16614:	b	1668c <__assert_fail@plt+0x4ae8>
   16618:	cmp	r9, #79	; 0x4f
   1661c:	beq	161ac <__assert_fail@plt+0x4608>
   16620:	mov	r1, #120	; 0x78
   16624:	mov	fp, #0
   16628:	b	16ccc <__assert_fail@plt+0x5128>
   1662c:	cmp	r9, #0
   16630:	bne	161ac <__assert_fail@plt+0x4608>
   16634:	mvn	r9, #0
   16638:	movw	r8, #8348	; 0x209c
   1663c:	movt	r8, #3
   16640:	b	163d4 <__assert_fail@plt+0x4830>
   16644:	cmp	r9, #69	; 0x45
   16648:	beq	161ac <__assert_fail@plt+0x4608>
   1664c:	ldr	r3, [sp, #40]	; 0x28
   16650:	ldr	r3, [r3, #12]
   16654:	mov	fp, #2
   16658:	b	16680 <__assert_fail@plt+0x4adc>
   1665c:	cmp	r9, #69	; 0x45
   16660:	beq	161ac <__assert_fail@plt+0x4608>
   16664:	ldr	r3, [sp, #40]	; 0x28
   16668:	ldr	r3, [r3, #12]
   1666c:	ldr	r2, [sp, #36]	; 0x24
   16670:	cmp	r2, #0
   16674:	mov	fp, #2
   16678:	moveq	r2, #95	; 0x5f
   1667c:	streq	r2, [sp, #36]	; 0x24
   16680:	lsr	r8, r3, #31
   16684:	mov	r0, #0
   16688:	str	r0, [sp, #80]	; 0x50
   1668c:	eor	r2, r8, #1
   16690:	cmp	r9, #79	; 0x4f
   16694:	movne	r2, #0
   16698:	andeq	r2, r2, #1
   1669c:	cmp	r2, #0
   166a0:	beq	16798 <__assert_fail@plt+0x4bf4>
   166a4:	mov	r3, #32
   166a8:	strb	r3, [sp, #88]	; 0x58
   166ac:	mov	r3, #37	; 0x25
   166b0:	strb	r3, [sp, #89]	; 0x59
   166b4:	mov	fp, #0
   166b8:	strb	r9, [sp, #90]	; 0x5a
   166bc:	add	r3, sp, #91	; 0x5b
   166c0:	strb	r1, [r3]
   166c4:	mov	r2, #0
   166c8:	strb	r2, [r3, #1]
   166cc:	ldr	r3, [sp, #40]	; 0x28
   166d0:	add	r2, sp, #88	; 0x58
   166d4:	mov	r1, #1024	; 0x400
   166d8:	add	r0, sp, #104	; 0x68
   166dc:	bl	11910 <strftime@plt>
   166e0:	cmp	r0, #0
   166e4:	beq	15d18 <__assert_fail@plt+0x4174>
   166e8:	sub	r5, r0, #1
   166ec:	ldr	r2, [sp, #36]	; 0x24
   166f0:	mvn	r3, sl
   166f4:	lsr	r3, r3, #31
   166f8:	cmp	r2, #45	; 0x2d
   166fc:	moveq	r3, #0
   16700:	cmp	r3, #0
   16704:	moveq	sl, #0
   16708:	mov	r6, sl
   1670c:	cmp	sl, r5
   16710:	movcc	sl, r5
   16714:	mvn	r3, r7
   16718:	cmp	r3, sl
   1671c:	bls	16500 <__assert_fail@plt+0x495c>
   16720:	ldr	r3, [sp, #24]
   16724:	cmp	r3, #0
   16728:	beq	1655c <__assert_fail@plt+0x49b8>
   1672c:	cmp	r6, r5
   16730:	bls	16538 <__assert_fail@plt+0x4994>
   16734:	sub	r6, r6, r5
   16738:	ldr	r3, [sp, #36]	; 0x24
   1673c:	cmp	r3, #43	; 0x2b
   16740:	cmpne	r3, #48	; 0x30
   16744:	beq	16510 <__assert_fail@plt+0x496c>
   16748:	cmp	r6, #0
   1674c:	movne	r8, #0
   16750:	movne	r9, #32
   16754:	beq	16538 <__assert_fail@plt+0x4994>
   16758:	ldr	r1, [sp, #24]
   1675c:	mov	r0, r9
   16760:	bl	11a90 <fputc@plt>
   16764:	add	r8, r8, #1
   16768:	cmp	r6, r8
   1676c:	bne	16758 <__assert_fail@plt+0x4bb4>
   16770:	b	16538 <__assert_fail@plt+0x4994>
   16774:	cmp	fp, #2
   16778:	movw	r2, #9999	; 0x270f
   1677c:	moveq	r2, #99	; 0x63
   16780:	cmp	r3, r2
   16784:	movls	r2, #0
   16788:	movhi	r2, #1
   1678c:	cmp	fp, sl
   16790:	orrlt	r2, r2, #1
   16794:	b	1660c <__assert_fail@plt+0x4a68>
   16798:	cmp	r8, #0
   1679c:	rsbne	r3, r3, #0
   167a0:	add	r5, sp, #102	; 0x66
   167a4:	mov	r6, #58	; 0x3a
   167a8:	movw	lr, #52429	; 0xcccd
   167ac:	movt	lr, #52428	; 0xcccc
   167b0:	b	167b8 <__assert_fail@plt+0x4c14>
   167b4:	mov	r3, r1
   167b8:	tst	r0, #1
   167bc:	subne	ip, r5, #1
   167c0:	strbne	r6, [r5, #-1]
   167c4:	moveq	ip, r5
   167c8:	sub	r5, ip, #1
   167cc:	umull	r2, r1, lr, r3
   167d0:	lsr	r1, r1, #3
   167d4:	add	r2, r1, r1, lsl #2
   167d8:	sub	r2, r3, r2, lsl #1
   167dc:	add	r2, r2, #48	; 0x30
   167e0:	strb	r2, [ip, #-1]
   167e4:	asrs	r0, r0, #1
   167e8:	movne	r2, #1
   167ec:	moveq	r2, #0
   167f0:	cmp	r3, #9
   167f4:	movls	r3, r2
   167f8:	orrhi	r3, r2, #1
   167fc:	cmp	r3, #0
   16800:	bne	167b4 <__assert_fail@plt+0x4c10>
   16804:	ldr	r3, [sp, #36]	; 0x24
   16808:	cmp	r3, #0
   1680c:	moveq	r3, #48	; 0x30
   16810:	str	r3, [sp, #36]	; 0x24
   16814:	cmp	sl, #0
   16818:	movlt	sl, fp
   1681c:	cmp	r8, #0
   16820:	bne	1755c <__assert_fail@plt+0x59b8>
   16824:	ldr	r3, [sp, #80]	; 0x50
   16828:	cmp	r3, #0
   1682c:	bne	17650 <__assert_fail@plt+0x5aac>
   16830:	add	r8, sp, #102	; 0x66
   16834:	sub	fp, r8, r5
   16838:	ldr	r3, [sp, #36]	; 0x24
   1683c:	subs	r3, r3, #45	; 0x2d
   16840:	movne	r3, #1
   16844:	sub	r6, sl, fp
   16848:	cmp	r6, #0
   1684c:	movle	r6, #0
   16850:	andgt	r6, r3, #1
   16854:	cmp	r6, #0
   16858:	moveq	r6, r3
   1685c:	b	175cc <__assert_fail@plt+0x5a28>
   16860:	ldr	r3, [sp, #24]
   16864:	cmp	r3, #0
   16868:	bne	16878 <__assert_fail@plt+0x4cd4>
   1686c:	add	r7, r7, r8
   16870:	sub	sl, sl, r8
   16874:	b	175a4 <__assert_fail@plt+0x5a00>
   16878:	cmp	r8, #0
   1687c:	beq	1686c <__assert_fail@plt+0x4cc8>
   16880:	mov	r9, #0
   16884:	str	r4, [sp, #84]	; 0x54
   16888:	mov	r4, r8
   1688c:	ldr	r1, [sp, #24]
   16890:	mov	r0, #32
   16894:	bl	11a90 <fputc@plt>
   16898:	add	r9, r9, #1
   1689c:	cmp	r9, r4
   168a0:	bne	1688c <__assert_fail@plt+0x4ce8>
   168a4:	ldr	r4, [sp, #84]	; 0x54
   168a8:	b	1686c <__assert_fail@plt+0x4cc8>
   168ac:	mov	r3, #34	; 0x22
   168b0:	ldr	r2, [sp, #28]
   168b4:	str	r3, [r2]
   168b8:	b	15d5c <__assert_fail@plt+0x41b8>
   168bc:	mov	r3, #34	; 0x22
   168c0:	ldr	r2, [sp, #28]
   168c4:	str	r3, [r2]
   168c8:	b	15d5c <__assert_fail@plt+0x41b8>
   168cc:	cmp	r6, #0
   168d0:	beq	168f4 <__assert_fail@plt+0x4d50>
   168d4:	mov	r9, #0
   168d8:	mov	fp, #48	; 0x30
   168dc:	ldr	r1, [sp, #24]
   168e0:	mov	r0, fp
   168e4:	bl	11a90 <fputc@plt>
   168e8:	add	r9, r9, #1
   168ec:	cmp	r6, r9
   168f0:	bne	168dc <__assert_fail@plt+0x4d38>
   168f4:	ldr	r3, [sp, #76]	; 0x4c
   168f8:	cmp	r3, #0
   168fc:	beq	16918 <__assert_fail@plt+0x4d74>
   16900:	mov	r2, r8
   16904:	mov	r1, r5
   16908:	ldr	r0, [sp, #24]
   1690c:	bl	15bcc <__assert_fail@plt+0x4028>
   16910:	add	r7, r7, sl
   16914:	b	15d18 <__assert_fail@plt+0x4174>
   16918:	ldr	r3, [sp, #24]
   1691c:	mov	r2, #1
   16920:	mov	r1, r8
   16924:	mov	r0, r5
   16928:	bl	11868 <fwrite@plt>
   1692c:	b	16910 <__assert_fail@plt+0x4d6c>
   16930:	cmp	r9, #0
   16934:	bne	161ac <__assert_fail@plt+0x4608>
   16938:	ldr	r3, [sp, #36]	; 0x24
   1693c:	cmp	r3, #0
   16940:	lsreq	r3, sl, #31
   16944:	movne	r3, #0
   16948:	cmp	r3, #0
   1694c:	bne	17698 <__assert_fail@plt+0x5af4>
   16950:	sub	r9, sl, #6
   16954:	bic	r9, r9, r9, asr #31
   16958:	movw	r8, #7024	; 0x1b70
   1695c:	movt	r8, #3
   16960:	b	163d4 <__assert_fail@plt+0x4830>
   16964:	cmp	r9, #69	; 0x45
   16968:	beq	161ac <__assert_fail@plt+0x4608>
   1696c:	ldr	r3, [sp, #40]	; 0x28
   16970:	ldr	r3, [r3, #8]
   16974:	mov	fp, #2
   16978:	b	16680 <__assert_fail@plt+0x4adc>
   1697c:	cmp	r9, #69	; 0x45
   16980:	beq	161ac <__assert_fail@plt+0x4608>
   16984:	ldr	r3, [sp, #64]	; 0x40
   16988:	mov	fp, #2
   1698c:	b	16680 <__assert_fail@plt+0x4adc>
   16990:	cmp	r9, #69	; 0x45
   16994:	beq	161ac <__assert_fail@plt+0x4608>
   16998:	ldr	r3, [sp, #40]	; 0x28
   1699c:	ldr	r3, [r3, #8]
   169a0:	b	1666c <__assert_fail@plt+0x4ac8>
   169a4:	cmp	r9, #69	; 0x45
   169a8:	beq	161ac <__assert_fail@plt+0x4608>
   169ac:	ldr	r3, [sp, #64]	; 0x40
   169b0:	b	1666c <__assert_fail@plt+0x4ac8>
   169b4:	cmp	r9, #69	; 0x45
   169b8:	beq	161ac <__assert_fail@plt+0x4608>
   169bc:	ldr	r3, [sp, #40]	; 0x28
   169c0:	ldr	r3, [r3, #28]
   169c4:	cmn	r3, #1
   169c8:	movge	r8, #0
   169cc:	movlt	r8, #1
   169d0:	add	r3, r3, #1
   169d4:	mov	r0, #0
   169d8:	str	r0, [sp, #80]	; 0x50
   169dc:	mov	fp, #3
   169e0:	b	1668c <__assert_fail@plt+0x4ae8>
   169e4:	cmp	r9, #69	; 0x45
   169e8:	beq	161ac <__assert_fail@plt+0x4608>
   169ec:	ldr	r3, [sp, #40]	; 0x28
   169f0:	ldr	r3, [r3, #4]
   169f4:	mov	fp, #2
   169f8:	b	16680 <__assert_fail@plt+0x4adc>
   169fc:	cmp	r9, #69	; 0x45
   16a00:	beq	161ac <__assert_fail@plt+0x4608>
   16a04:	ldr	r3, [sp, #40]	; 0x28
   16a08:	ldr	r3, [r3, #16]
   16a0c:	cmn	r3, #1
   16a10:	movge	r8, #0
   16a14:	movlt	r8, #1
   16a18:	add	r3, r3, #1
   16a1c:	mov	r0, #0
   16a20:	str	r0, [sp, #80]	; 0x50
   16a24:	mov	fp, #2
   16a28:	b	1668c <__assert_fail@plt+0x4ae8>
   16a2c:	cmp	r9, #69	; 0x45
   16a30:	beq	161ac <__assert_fail@plt+0x4608>
   16a34:	cmp	sl, #0
   16a38:	movle	sl, #9
   16a3c:	ldr	r3, [sp, #1184]	; 0x4a0
   16a40:	mov	r5, #9
   16a44:	ldr	r0, [sp, #60]	; 0x3c
   16a48:	b	16a5c <__assert_fail@plt+0x4eb8>
   16a4c:	sub	r5, r5, #1
   16a50:	smull	r1, r2, r0, r3
   16a54:	asr	r3, r3, #31
   16a58:	rsb	r3, r3, r2, asr #2
   16a5c:	cmp	r5, sl
   16a60:	bgt	16a4c <__assert_fail@plt+0x4ea8>
   16a64:	cmp	r5, #1
   16a68:	ble	16a88 <__assert_fail@plt+0x4ee4>
   16a6c:	smull	r1, r2, r0, r3
   16a70:	asr	r1, r3, #31
   16a74:	rsb	r2, r1, r2, asr #2
   16a78:	add	r2, r2, r2, lsl #2
   16a7c:	cmp	r3, r2, lsl #1
   16a80:	beq	16a4c <__assert_fail@plt+0x4ea8>
   16a84:	b	16a90 <__assert_fail@plt+0x4eec>
   16a88:	cmp	r5, #1
   16a8c:	bne	16adc <__assert_fail@plt+0x4f38>
   16a90:	add	r2, sp, #1120	; 0x460
   16a94:	add	r2, r2, #8
   16a98:	add	r1, r2, r5
   16a9c:	sub	r1, r1, #1040	; 0x410
   16aa0:	sub	r1, r1, #1
   16aa4:	rsb	r0, r2, #1040	; 0x410
   16aa8:	add	r0, r0, #1
   16aac:	ldr	lr, [sp, #60]	; 0x3c
   16ab0:	smull	r2, ip, lr, r3
   16ab4:	asr	r2, r3, #31
   16ab8:	rsb	r2, r2, ip, asr #2
   16abc:	add	ip, r2, r2, lsl #2
   16ac0:	sub	r3, r3, ip, lsl #1
   16ac4:	add	r3, r3, #48	; 0x30
   16ac8:	strb	r3, [r1], #-1
   16acc:	mov	r3, r2
   16ad0:	add	r2, r0, r1
   16ad4:	cmp	r2, #0
   16ad8:	bgt	16ab0 <__assert_fail@plt+0x4f0c>
   16adc:	ldr	r3, [sp, #36]	; 0x24
   16ae0:	cmp	r3, #0
   16ae4:	moveq	r3, #48	; 0x30
   16ae8:	str	r3, [sp, #36]	; 0x24
   16aec:	mov	r6, r5
   16af0:	mvn	r3, r7
   16af4:	cmp	r3, r5
   16af8:	bls	16b84 <__assert_fail@plt+0x4fe0>
   16afc:	ldr	r0, [sp, #24]
   16b00:	cmp	r0, #0
   16b04:	beq	16b20 <__assert_fail@plt+0x4f7c>
   16b08:	ldr	r3, [sp, #76]	; 0x4c
   16b0c:	cmp	r3, #0
   16b10:	beq	16b94 <__assert_fail@plt+0x4ff0>
   16b14:	mov	r2, r5
   16b18:	add	r1, sp, #88	; 0x58
   16b1c:	bl	15bcc <__assert_fail@plt+0x4028>
   16b20:	add	r7, r6, r7
   16b24:	ldr	r3, [sp, #36]	; 0x24
   16b28:	cmp	r3, #45	; 0x2d
   16b2c:	beq	176ec <__assert_fail@plt+0x5b48>
   16b30:	sub	r5, sl, r5
   16b34:	mvn	r3, r7
   16b38:	cmp	r3, r5
   16b3c:	bls	16bac <__assert_fail@plt+0x5008>
   16b40:	ldr	r3, [sp, #24]
   16b44:	cmp	r5, #0
   16b48:	cmpne	r3, #0
   16b4c:	beq	176f8 <__assert_fail@plt+0x5b54>
   16b50:	ldr	r3, [sp, #36]	; 0x24
   16b54:	cmp	r3, #43	; 0x2b
   16b58:	cmpne	r3, #48	; 0x30
   16b5c:	bne	16bbc <__assert_fail@plt+0x5018>
   16b60:	mov	r6, #0
   16b64:	mov	r8, #48	; 0x30
   16b68:	ldr	r1, [sp, #24]
   16b6c:	mov	r0, r8
   16b70:	bl	11a90 <fputc@plt>
   16b74:	add	r6, r6, #1
   16b78:	cmp	r5, r6
   16b7c:	bhi	16b68 <__assert_fail@plt+0x4fc4>
   16b80:	b	176f8 <__assert_fail@plt+0x5b54>
   16b84:	mov	r3, #34	; 0x22
   16b88:	ldr	r2, [sp, #28]
   16b8c:	str	r3, [r2]
   16b90:	b	15d5c <__assert_fail@plt+0x41b8>
   16b94:	ldr	r3, [sp, #24]
   16b98:	mov	r2, #1
   16b9c:	mov	r1, r5
   16ba0:	add	r0, sp, #88	; 0x58
   16ba4:	bl	11868 <fwrite@plt>
   16ba8:	b	16b20 <__assert_fail@plt+0x4f7c>
   16bac:	mov	r3, #34	; 0x22
   16bb0:	ldr	r2, [sp, #28]
   16bb4:	str	r3, [r2]
   16bb8:	b	15d5c <__assert_fail@plt+0x41b8>
   16bbc:	mov	r6, #0
   16bc0:	mov	r8, #32
   16bc4:	ldr	r1, [sp, #24]
   16bc8:	mov	r0, r8
   16bcc:	bl	11a90 <fputc@plt>
   16bd0:	add	r6, r6, #1
   16bd4:	cmp	r5, r6
   16bd8:	bhi	16bc4 <__assert_fail@plt+0x5020>
   16bdc:	b	176f8 <__assert_fail@plt+0x5b54>
   16be0:	ldr	r2, [sp, #36]	; 0x24
   16be4:	mvn	r3, sl
   16be8:	lsr	r3, r3, #31
   16bec:	cmp	r2, #45	; 0x2d
   16bf0:	moveq	r3, #0
   16bf4:	cmp	r3, #0
   16bf8:	moveq	sl, #0
   16bfc:	mov	r5, sl
   16c00:	cmp	sl, #1
   16c04:	movcc	sl, #1
   16c08:	mvn	r3, r7
   16c0c:	cmp	r3, sl
   16c10:	bls	16c70 <__assert_fail@plt+0x50cc>
   16c14:	ldr	r3, [sp, #24]
   16c18:	cmp	r3, #0
   16c1c:	beq	16c68 <__assert_fail@plt+0x50c4>
   16c20:	cmp	r5, #1
   16c24:	bls	16c5c <__assert_fail@plt+0x50b8>
   16c28:	sub	r5, r5, #1
   16c2c:	ldr	r3, [sp, #36]	; 0x24
   16c30:	cmp	r3, #43	; 0x2b
   16c34:	cmpne	r3, #48	; 0x30
   16c38:	bne	16c80 <__assert_fail@plt+0x50dc>
   16c3c:	mov	r6, #0
   16c40:	mov	r8, #48	; 0x30
   16c44:	ldr	r1, [sp, #24]
   16c48:	mov	r0, r8
   16c4c:	bl	11a90 <fputc@plt>
   16c50:	add	r6, r6, #1
   16c54:	cmp	r5, r6
   16c58:	bne	16c44 <__assert_fail@plt+0x50a0>
   16c5c:	ldr	r1, [sp, #24]
   16c60:	mov	r0, #10
   16c64:	bl	11a90 <fputc@plt>
   16c68:	add	r7, r7, sl
   16c6c:	b	15d18 <__assert_fail@plt+0x4174>
   16c70:	mov	r3, #34	; 0x22
   16c74:	ldr	r2, [sp, #28]
   16c78:	str	r3, [r2]
   16c7c:	b	15d5c <__assert_fail@plt+0x41b8>
   16c80:	mov	r6, #0
   16c84:	mov	r8, #32
   16c88:	ldr	r1, [sp, #24]
   16c8c:	mov	r0, r8
   16c90:	bl	11a90 <fputc@plt>
   16c94:	add	r6, r6, #1
   16c98:	cmp	r5, r6
   16c9c:	bne	16c88 <__assert_fail@plt+0x50e4>
   16ca0:	b	16c5c <__assert_fail@plt+0x50b8>
   16ca4:	mov	fp, #1
   16ca8:	b	16cb0 <__assert_fail@plt+0x510c>
   16cac:	mov	fp, #0
   16cb0:	cmp	r5, #0
   16cb4:	movne	fp, r5
   16cb8:	mov	r1, #112	; 0x70
   16cbc:	cmp	r5, #0
   16cc0:	ldr	r3, [sp, #76]	; 0x4c
   16cc4:	movne	r3, #0
   16cc8:	str	r3, [sp, #76]	; 0x4c
   16ccc:	mov	r3, #32
   16cd0:	strb	r3, [sp, #88]	; 0x58
   16cd4:	mov	r3, #37	; 0x25
   16cd8:	strb	r3, [sp, #89]	; 0x59
   16cdc:	cmp	r9, #0
   16ce0:	addeq	r3, sp, #90	; 0x5a
   16ce4:	beq	166c0 <__assert_fail@plt+0x4b1c>
   16ce8:	b	166b8 <__assert_fail@plt+0x4b14>
   16cec:	ldr	r3, [sp, #40]	; 0x28
   16cf0:	ldr	r2, [r3, #16]
   16cf4:	cmp	r9, #79	; 0x4f
   16cf8:	moveq	r1, #113	; 0x71
   16cfc:	beq	166a4 <__assert_fail@plt+0x4b00>
   16d00:	mov	r3, #11
   16d04:	mul	r3, r3, r2
   16d08:	asr	r3, r3, #5
   16d0c:	add	r3, r3, #1
   16d10:	mov	r0, #0
   16d14:	str	r0, [sp, #80]	; 0x50
   16d18:	mov	r8, r0
   16d1c:	mov	fp, #1
   16d20:	b	167a0 <__assert_fail@plt+0x4bfc>
   16d24:	cmp	r9, #69	; 0x45
   16d28:	beq	161ac <__assert_fail@plt+0x4608>
   16d2c:	ldr	r3, [sp, #40]	; 0x28
   16d30:	ldr	r3, [r3]
   16d34:	mov	fp, #2
   16d38:	b	16680 <__assert_fail@plt+0x4adc>
   16d3c:	ldr	r1, [sp, #40]	; 0x28
   16d40:	ldrd	r2, [r1]
   16d44:	strd	r2, [sp, #104]	; 0x68
   16d48:	ldrd	r2, [r1, #8]
   16d4c:	strd	r2, [sp, #112]	; 0x70
   16d50:	ldrd	r2, [r1, #16]
   16d54:	strd	r2, [sp, #120]	; 0x78
   16d58:	ldrd	r2, [r1, #24]
   16d5c:	strd	r2, [sp, #128]	; 0x80
   16d60:	ldrd	r2, [r1, #32]
   16d64:	strd	r2, [sp, #136]	; 0x88
   16d68:	ldr	r3, [r1, #40]	; 0x28
   16d6c:	str	r3, [sp, #144]	; 0x90
   16d70:	mvn	r3, #0
   16d74:	str	r3, [sp, #132]	; 0x84
   16d78:	add	r1, sp, #104	; 0x68
   16d7c:	ldr	r0, [sp, #1180]	; 0x49c
   16d80:	bl	2d444 <__assert_fail@plt+0x1b8a0>
   16d84:	ldr	r3, [sp, #132]	; 0x84
   16d88:	cmp	r3, #0
   16d8c:	blt	16de8 <__assert_fail@plt+0x5244>
   16d90:	lsr	r8, r0, #31
   16d94:	mov	r2, r0
   16d98:	add	r5, sp, #102	; 0x66
   16d9c:	ldr	ip, [sp, #60]	; 0x3c
   16da0:	smull	r3, r1, ip, r2
   16da4:	asr	r1, r1, #2
   16da8:	asr	lr, r2, #31
   16dac:	sub	r3, r1, lr
   16db0:	add	r3, r3, r3, lsl #2
   16db4:	sub	r3, r2, r3, lsl #1
   16db8:	sub	r2, r1, lr
   16dbc:	cmp	r0, #0
   16dc0:	rsblt	r3, r3, #48	; 0x30
   16dc4:	addge	r3, r3, #48	; 0x30
   16dc8:	uxtb	r3, r3
   16dcc:	strb	r3, [r5, #-1]!
   16dd0:	cmp	r2, #0
   16dd4:	bne	16da0 <__assert_fail@plt+0x51fc>
   16dd8:	mov	r3, #0
   16ddc:	str	r3, [sp, #80]	; 0x50
   16de0:	mov	fp, #1
   16de4:	b	16804 <__assert_fail@plt+0x4c60>
   16de8:	mov	r3, #75	; 0x4b
   16dec:	ldr	r2, [sp, #28]
   16df0:	str	r3, [r2]
   16df4:	b	15d5c <__assert_fail@plt+0x41b8>
   16df8:	cmp	r9, #79	; 0x4f
   16dfc:	beq	161ac <__assert_fail@plt+0x4608>
   16e00:	mov	r1, #88	; 0x58
   16e04:	mov	fp, #0
   16e08:	b	16ccc <__assert_fail@plt+0x5128>
   16e0c:	ldr	r2, [sp, #36]	; 0x24
   16e10:	mvn	r3, sl
   16e14:	lsr	r3, r3, #31
   16e18:	cmp	r2, #45	; 0x2d
   16e1c:	moveq	r3, #0
   16e20:	cmp	r3, #0
   16e24:	moveq	sl, #0
   16e28:	mov	r5, sl
   16e2c:	cmp	sl, #1
   16e30:	movcc	sl, #1
   16e34:	mvn	r3, r7
   16e38:	cmp	r3, sl
   16e3c:	bls	16e9c <__assert_fail@plt+0x52f8>
   16e40:	ldr	r3, [sp, #24]
   16e44:	cmp	r3, #0
   16e48:	beq	16e94 <__assert_fail@plt+0x52f0>
   16e4c:	cmp	r5, #1
   16e50:	bls	16e88 <__assert_fail@plt+0x52e4>
   16e54:	sub	r5, r5, #1
   16e58:	ldr	r3, [sp, #36]	; 0x24
   16e5c:	cmp	r3, #43	; 0x2b
   16e60:	cmpne	r3, #48	; 0x30
   16e64:	bne	16eac <__assert_fail@plt+0x5308>
   16e68:	mov	r6, #0
   16e6c:	mov	r8, #48	; 0x30
   16e70:	ldr	r1, [sp, #24]
   16e74:	mov	r0, r8
   16e78:	bl	11a90 <fputc@plt>
   16e7c:	add	r6, r6, #1
   16e80:	cmp	r5, r6
   16e84:	bne	16e70 <__assert_fail@plt+0x52cc>
   16e88:	ldr	r1, [sp, #24]
   16e8c:	mov	r0, #9
   16e90:	bl	11a90 <fputc@plt>
   16e94:	add	r7, r7, sl
   16e98:	b	15d18 <__assert_fail@plt+0x4174>
   16e9c:	mov	r3, #34	; 0x22
   16ea0:	ldr	r2, [sp, #28]
   16ea4:	str	r3, [r2]
   16ea8:	b	15d5c <__assert_fail@plt+0x41b8>
   16eac:	mov	r6, #0
   16eb0:	mov	r8, #32
   16eb4:	ldr	r1, [sp, #24]
   16eb8:	mov	r0, r8
   16ebc:	bl	11a90 <fputc@plt>
   16ec0:	add	r6, r6, #1
   16ec4:	cmp	r5, r6
   16ec8:	bne	16eb4 <__assert_fail@plt+0x5310>
   16ecc:	b	16e88 <__assert_fail@plt+0x52e4>
   16ed0:	ldr	r3, [sp, #40]	; 0x28
   16ed4:	ldr	r3, [r3, #24]
   16ed8:	add	r3, r3, #6
   16edc:	ldr	r2, [sp, #52]	; 0x34
   16ee0:	smull	r0, r2, r2, r3
   16ee4:	add	r0, r2, r3
   16ee8:	asr	r2, r3, #31
   16eec:	rsb	r2, r2, r0, asr #2
   16ef0:	rsb	r2, r2, r2, lsl #3
   16ef4:	sub	r3, r3, r2
   16ef8:	add	r3, r3, #1
   16efc:	mov	fp, #1
   16f00:	b	16680 <__assert_fail@plt+0x4adc>
   16f04:	cmp	r9, #69	; 0x45
   16f08:	beq	161ac <__assert_fail@plt+0x4608>
   16f0c:	ldr	r2, [sp, #40]	; 0x28
   16f10:	ldr	r3, [r2, #28]
   16f14:	ldr	r2, [r2, #24]
   16f18:	sub	r3, r3, r2
   16f1c:	add	r3, r3, #7
   16f20:	ldr	r2, [sp, #52]	; 0x34
   16f24:	smull	r0, r2, r2, r3
   16f28:	add	r2, r2, r3
   16f2c:	asr	r3, r3, #31
   16f30:	rsb	r3, r3, r2, asr #2
   16f34:	mov	fp, #2
   16f38:	b	16680 <__assert_fail@plt+0x4adc>
   16f3c:	cmp	r9, #69	; 0x45
   16f40:	beq	161ac <__assert_fail@plt+0x4608>
   16f44:	ldr	r2, [sp, #40]	; 0x28
   16f48:	ldr	r5, [r2, #20]
   16f4c:	cmp	r5, #0
   16f50:	movlt	r0, #300	; 0x12c
   16f54:	mvnge	r0, #99	; 0x63
   16f58:	add	r0, r5, r0
   16f5c:	ldr	r6, [r2, #28]
   16f60:	ldr	fp, [r2, #24]
   16f64:	sub	r2, r6, fp
   16f68:	add	r2, r2, #380	; 0x17c
   16f6c:	add	r2, r2, #2
   16f70:	ldr	ip, [sp, #52]	; 0x34
   16f74:	smull	ip, lr, ip, r2
   16f78:	add	lr, lr, r2
   16f7c:	asr	ip, r2, #31
   16f80:	rsb	ip, ip, lr, asr #2
   16f84:	rsb	ip, ip, ip, lsl #3
   16f88:	sub	ip, r2, ip
   16f8c:	sub	r8, r6, ip
   16f90:	adds	r8, r8, #3
   16f94:	bmi	17098 <__assert_fail@plt+0x54f4>
   16f98:	tst	r0, #3
   16f9c:	movne	r2, #0
   16fa0:	bne	16fdc <__assert_fail@plt+0x5438>
   16fa4:	ldr	r2, [sp, #56]	; 0x38
   16fa8:	smull	ip, r2, r2, r0
   16fac:	asr	ip, r0, #31
   16fb0:	rsb	r2, ip, r2, asr #5
   16fb4:	mov	ip, #100	; 0x64
   16fb8:	mls	r2, ip, r2, r0
   16fbc:	cmp	r2, #0
   16fc0:	movne	r2, #1
   16fc4:	bne	16fdc <__assert_fail@plt+0x5438>
   16fc8:	mov	ip, #400	; 0x190
   16fcc:	sdiv	r2, r0, ip
   16fd0:	mls	r2, ip, r2, r0
   16fd4:	clz	r2, r2
   16fd8:	lsr	r2, r2, #5
   16fdc:	add	r2, r2, #364	; 0x16c
   16fe0:	add	r2, r2, #1
   16fe4:	sub	r2, r6, r2
   16fe8:	sub	r0, r2, fp
   16fec:	add	r0, r0, #380	; 0x17c
   16ff0:	add	r0, r0, #2
   16ff4:	ldr	ip, [sp, #52]	; 0x34
   16ff8:	smull	ip, lr, ip, r0
   16ffc:	add	lr, lr, r0
   17000:	asr	ip, r0, #31
   17004:	rsb	ip, ip, lr, asr #2
   17008:	rsb	ip, ip, ip, lsl #3
   1700c:	sub	ip, r0, ip
   17010:	sub	lr, r2, ip
   17014:	add	lr, lr, #3
   17018:	cmp	lr, #0
   1701c:	movge	r8, lr
   17020:	mvn	lr, lr
   17024:	lsr	lr, lr, #31
   17028:	cmp	r3, #71	; 0x47
   1702c:	beq	17124 <__assert_fail@plt+0x5580>
   17030:	cmp	r3, #103	; 0x67
   17034:	bne	17150 <__assert_fail@plt+0x55ac>
   17038:	ldr	ip, [sp, #56]	; 0x38
   1703c:	smull	r2, r3, ip, r5
   17040:	asr	r2, r5, #31
   17044:	rsb	r2, r2, r3, asr #5
   17048:	mov	r0, #100	; 0x64
   1704c:	mls	r2, r0, r2, r5
   17050:	add	r2, r2, lr
   17054:	smull	r3, ip, ip, r2
   17058:	asr	r3, r2, #31
   1705c:	rsb	r3, r3, ip, asr #5
   17060:	mls	r3, r0, r3, r2
   17064:	cmp	r3, #0
   17068:	movge	r8, #0
   1706c:	movge	fp, #2
   17070:	bge	165e8 <__assert_fail@plt+0x4a44>
   17074:	movw	r2, #63636	; 0xf894
   17078:	movt	r2, #65535	; 0xffff
   1707c:	sub	r2, r2, lr
   17080:	cmp	r2, r5
   17084:	rsbgt	r3, r3, #0
   17088:	addle	r3, r3, #100	; 0x64
   1708c:	mov	r8, #0
   17090:	mov	fp, #2
   17094:	b	165e8 <__assert_fail@plt+0x4a44>
   17098:	sub	r0, r0, #1
   1709c:	tst	r0, #3
   170a0:	movne	r2, #0
   170a4:	bne	170e0 <__assert_fail@plt+0x553c>
   170a8:	ldr	r2, [sp, #56]	; 0x38
   170ac:	smull	ip, r2, r2, r0
   170b0:	asr	ip, r0, #31
   170b4:	rsb	r2, ip, r2, asr #5
   170b8:	mov	ip, #100	; 0x64
   170bc:	mls	r2, ip, r2, r0
   170c0:	cmp	r2, #0
   170c4:	movne	r2, #1
   170c8:	bne	170e0 <__assert_fail@plt+0x553c>
   170cc:	mov	ip, #400	; 0x190
   170d0:	sdiv	r2, r0, ip
   170d4:	mls	r2, ip, r2, r0
   170d8:	clz	r2, r2
   170dc:	lsr	r2, r2, #5
   170e0:	add	r2, r2, #364	; 0x16c
   170e4:	add	r2, r2, #1
   170e8:	add	r2, r2, r6
   170ec:	sub	r0, r2, fp
   170f0:	add	r0, r0, #380	; 0x17c
   170f4:	add	r0, r0, #2
   170f8:	ldr	ip, [sp, #52]	; 0x34
   170fc:	smull	ip, lr, ip, r0
   17100:	add	lr, lr, r0
   17104:	asr	ip, r0, #31
   17108:	rsb	ip, ip, lr, asr #2
   1710c:	rsb	ip, ip, ip, lsl #3
   17110:	sub	r0, r0, ip
   17114:	sub	r0, r2, r0
   17118:	add	r8, r0, #3
   1711c:	mvn	lr, #0
   17120:	b	17028 <__assert_fail@plt+0x5484>
   17124:	movw	r3, #63636	; 0xf894
   17128:	movt	r3, #65535	; 0xffff
   1712c:	sub	r3, r3, lr
   17130:	cmp	r5, r3
   17134:	movge	r8, #0
   17138:	movlt	r8, #1
   1713c:	add	r3, r5, #1888	; 0x760
   17140:	add	r3, r3, #12
   17144:	add	r3, r3, lr
   17148:	mov	fp, #4
   1714c:	b	165e8 <__assert_fail@plt+0x4a44>
   17150:	ldr	r3, [sp, #52]	; 0x34
   17154:	smull	r2, r3, r3, r8
   17158:	add	r2, r3, r8
   1715c:	asr	r3, r8, #31
   17160:	rsb	r3, r3, r2, asr #2
   17164:	add	r3, r3, #1
   17168:	mov	fp, #2
   1716c:	b	16680 <__assert_fail@plt+0x4adc>
   17170:	cmp	r9, #69	; 0x45
   17174:	beq	161ac <__assert_fail@plt+0x4608>
   17178:	ldr	ip, [sp, #40]	; 0x28
   1717c:	ldr	r3, [ip, #24]
   17180:	add	r3, r3, #6
   17184:	ldr	lr, [sp, #52]	; 0x34
   17188:	smull	r0, r2, lr, r3
   1718c:	add	r0, r2, r3
   17190:	asr	r2, r3, #31
   17194:	rsb	r2, r2, r0, asr #2
   17198:	rsb	r2, r2, r2, lsl #3
   1719c:	sub	r2, r3, r2
   171a0:	ldr	r3, [ip, #28]
   171a4:	sub	r3, r3, r2
   171a8:	add	r3, r3, #7
   171ac:	smull	r0, r2, lr, r3
   171b0:	add	r2, r2, r3
   171b4:	asr	r3, r3, #31
   171b8:	rsb	r3, r3, r2, asr #2
   171bc:	mov	fp, #2
   171c0:	b	16680 <__assert_fail@plt+0x4adc>
   171c4:	cmp	r9, #69	; 0x45
   171c8:	beq	161ac <__assert_fail@plt+0x4608>
   171cc:	ldr	r3, [sp, #40]	; 0x28
   171d0:	ldr	r3, [r3, #24]
   171d4:	mov	fp, #1
   171d8:	b	16680 <__assert_fail@plt+0x4adc>
   171dc:	cmp	r9, #69	; 0x45
   171e0:	beq	1754c <__assert_fail@plt+0x59a8>
   171e4:	cmp	r9, #79	; 0x4f
   171e8:	beq	161ac <__assert_fail@plt+0x4608>
   171ec:	ldr	r3, [sp, #40]	; 0x28
   171f0:	ldr	r3, [r3, #20]
   171f4:	movw	r8, #63636	; 0xf894
   171f8:	movt	r8, #65535	; 0xffff
   171fc:	cmp	r3, r8
   17200:	movge	r8, #0
   17204:	movlt	r8, #1
   17208:	add	r3, r3, #1888	; 0x760
   1720c:	add	r3, r3, #12
   17210:	mov	fp, #4
   17214:	b	165e8 <__assert_fail@plt+0x4a44>
   17218:	cmp	r9, #69	; 0x45
   1721c:	beq	17554 <__assert_fail@plt+0x59b0>
   17220:	ldr	r3, [sp, #40]	; 0x28
   17224:	ldr	r2, [r3, #20]
   17228:	ldr	r3, [sp, #56]	; 0x38
   1722c:	smull	r3, r0, r3, r2
   17230:	asr	r3, r2, #31
   17234:	rsb	r3, r3, r0, asr #5
   17238:	mov	r0, #100	; 0x64
   1723c:	mls	r3, r0, r3, r2
   17240:	cmp	r3, #0
   17244:	blt	17254 <__assert_fail@plt+0x56b0>
   17248:	mov	r8, #0
   1724c:	mov	fp, #2
   17250:	b	165e8 <__assert_fail@plt+0x4a44>
   17254:	movw	r0, #63636	; 0xf894
   17258:	movt	r0, #65535	; 0xffff
   1725c:	cmp	r2, r0
   17260:	rsblt	r3, r3, #0
   17264:	addge	r3, r3, #100	; 0x64
   17268:	b	17248 <__assert_fail@plt+0x56a4>
   1726c:	cmp	r5, #0
   17270:	ldr	r3, [sp, #76]	; 0x4c
   17274:	movne	r3, #0
   17278:	str	r3, [sp, #76]	; 0x4c
   1727c:	ldr	r0, [sp, #48]	; 0x30
   17280:	bl	11988 <strlen@plt>
   17284:	mov	r9, r0
   17288:	ldr	r2, [sp, #36]	; 0x24
   1728c:	mvn	r3, sl
   17290:	lsr	r3, r3, #31
   17294:	cmp	r2, #45	; 0x2d
   17298:	moveq	r3, #0
   1729c:	cmp	r3, #0
   172a0:	moveq	sl, #0
   172a4:	mov	r6, sl
   172a8:	cmp	sl, r0
   172ac:	movcc	sl, r0
   172b0:	mvn	r3, r7
   172b4:	cmp	r3, sl
   172b8:	bls	17310 <__assert_fail@plt+0x576c>
   172bc:	ldr	r3, [sp, #24]
   172c0:	cmp	r3, #0
   172c4:	beq	1736c <__assert_fail@plt+0x57c8>
   172c8:	cmp	r6, r0
   172cc:	bls	17348 <__assert_fail@plt+0x57a4>
   172d0:	sub	r6, r6, r0
   172d4:	ldr	r3, [sp, #36]	; 0x24
   172d8:	cmp	r3, #43	; 0x2b
   172dc:	cmpne	r3, #48	; 0x30
   172e0:	beq	17320 <__assert_fail@plt+0x577c>
   172e4:	cmp	r6, #0
   172e8:	movne	r8, #0
   172ec:	movne	fp, #32
   172f0:	beq	17348 <__assert_fail@plt+0x57a4>
   172f4:	ldr	r1, [sp, #24]
   172f8:	mov	r0, fp
   172fc:	bl	11a90 <fputc@plt>
   17300:	add	r8, r8, #1
   17304:	cmp	r6, r8
   17308:	bne	172f4 <__assert_fail@plt+0x5750>
   1730c:	b	17348 <__assert_fail@plt+0x57a4>
   17310:	mov	r3, #34	; 0x22
   17314:	ldr	r2, [sp, #28]
   17318:	str	r3, [r2]
   1731c:	b	15d5c <__assert_fail@plt+0x41b8>
   17320:	cmp	r6, #0
   17324:	beq	17348 <__assert_fail@plt+0x57a4>
   17328:	mov	r8, #0
   1732c:	mov	fp, #48	; 0x30
   17330:	ldr	r1, [sp, #24]
   17334:	mov	r0, fp
   17338:	bl	11a90 <fputc@plt>
   1733c:	add	r8, r8, #1
   17340:	cmp	r6, r8
   17344:	bne	17330 <__assert_fail@plt+0x578c>
   17348:	cmp	r5, #0
   1734c:	bne	17374 <__assert_fail@plt+0x57d0>
   17350:	ldr	r3, [sp, #76]	; 0x4c
   17354:	cmp	r3, #0
   17358:	beq	17388 <__assert_fail@plt+0x57e4>
   1735c:	mov	r2, r9
   17360:	ldr	r1, [sp, #48]	; 0x30
   17364:	ldr	r0, [sp, #24]
   17368:	bl	15bcc <__assert_fail@plt+0x4028>
   1736c:	add	r7, r7, sl
   17370:	b	15d18 <__assert_fail@plt+0x4174>
   17374:	mov	r2, r9
   17378:	ldr	r1, [sp, #48]	; 0x30
   1737c:	ldr	r0, [sp, #24]
   17380:	bl	15b70 <__assert_fail@plt+0x3fcc>
   17384:	b	1736c <__assert_fail@plt+0x57c8>
   17388:	ldr	r3, [sp, #24]
   1738c:	mov	r2, #1
   17390:	mov	r1, r9
   17394:	ldr	r0, [sp, #48]	; 0x30
   17398:	bl	11868 <fwrite@plt>
   1739c:	b	1736c <__assert_fail@plt+0x57c8>
   173a0:	add	r0, r4, #2
   173a4:	mov	lr, #1
   173a8:	add	lr, lr, #1
   173ac:	mov	r2, r0
   173b0:	ldrb	r3, [r0], #1
   173b4:	cmp	r3, #58	; 0x3a
   173b8:	bne	1618c <__assert_fail@plt+0x45e8>
   173bc:	b	173a8 <__assert_fail@plt+0x5804>
   173c0:	mov	lr, #0
   173c4:	ldr	r2, [sp, #40]	; 0x28
   173c8:	ldr	r3, [r2, #32]
   173cc:	cmp	r3, #0
   173d0:	blt	15d18 <__assert_fail@plt+0x4174>
   173d4:	ldr	r2, [r2, #36]	; 0x24
   173d8:	cmp	r2, #0
   173dc:	movlt	r8, #1
   173e0:	blt	17400 <__assert_fail@plt+0x585c>
   173e4:	movne	r8, #0
   173e8:	bne	17400 <__assert_fail@plt+0x585c>
   173ec:	ldr	r3, [sp, #48]	; 0x30
   173f0:	ldrb	r8, [r3]
   173f4:	cmp	r8, #45	; 0x2d
   173f8:	movne	r8, #0
   173fc:	moveq	r8, #1
   17400:	ldr	r3, [sp, #68]	; 0x44
   17404:	smull	r0, r3, r3, r2
   17408:	add	r3, r3, r2
   1740c:	asr	r0, r2, #31
   17410:	rsb	r5, r0, r3, asr #11
   17414:	ldr	ip, [sp, #72]	; 0x48
   17418:	smull	fp, r3, ip, r2
   1741c:	add	r3, r3, r2
   17420:	rsb	r3, r0, r3, asr #5
   17424:	smull	ip, r0, ip, r3
   17428:	add	r0, r0, r3
   1742c:	asr	ip, r3, #31
   17430:	rsb	r0, ip, r0, asr #5
   17434:	rsb	r0, r0, r0, lsl #4
   17438:	sub	r0, r3, r0, lsl #2
   1743c:	rsb	r3, r3, r3, lsl #4
   17440:	sub	r3, r2, r3, lsl #2
   17444:	cmp	lr, #3
   17448:	ldrls	pc, [pc, lr, lsl #2]
   1744c:	b	161ac <__assert_fail@plt+0x4608>
   17450:	andeq	r7, r1, r0, ror #8
   17454:	andeq	r7, r1, ip, ror r4
   17458:	muleq	r1, r8, r4
   1745c:	andeq	r7, r1, r0, asr #9
   17460:	mov	r3, #100	; 0x64
   17464:	mla	r3, r3, r5, r0
   17468:	mov	r0, #0
   1746c:	mov	r2, #1
   17470:	str	r2, [sp, #80]	; 0x50
   17474:	mov	fp, #5
   17478:	b	1668c <__assert_fail@plt+0x4ae8>
   1747c:	mov	r3, #100	; 0x64
   17480:	mla	r3, r3, r5, r0
   17484:	mov	r0, #4
   17488:	mov	r2, #1
   1748c:	str	r2, [sp, #80]	; 0x50
   17490:	mov	fp, #6
   17494:	b	1668c <__assert_fail@plt+0x4ae8>
   17498:	mov	r2, #100	; 0x64
   1749c:	mul	r0, r2, r0
   174a0:	movw	r2, #10000	; 0x2710
   174a4:	mla	r5, r2, r5, r0
   174a8:	add	r3, r5, r3
   174ac:	mov	r0, #20
   174b0:	mov	r2, #1
   174b4:	str	r2, [sp, #80]	; 0x50
   174b8:	mov	fp, #9
   174bc:	b	1668c <__assert_fail@plt+0x4ae8>
   174c0:	cmp	r3, #0
   174c4:	bne	17498 <__assert_fail@plt+0x58f4>
   174c8:	cmp	r0, #0
   174cc:	bne	1747c <__assert_fail@plt+0x58d8>
   174d0:	mov	r3, r5
   174d4:	mov	r2, #1
   174d8:	str	r2, [sp, #80]	; 0x50
   174dc:	mov	fp, #3
   174e0:	b	1668c <__assert_fail@plt+0x4ae8>
   174e4:	mov	r3, #34	; 0x22
   174e8:	ldr	r2, [sp, #28]
   174ec:	str	r3, [r2]
   174f0:	b	15d5c <__assert_fail@plt+0x41b8>
   174f4:	mov	r9, #0
   174f8:	mov	fp, #32
   174fc:	ldr	r1, [sp, #24]
   17500:	mov	r0, fp
   17504:	bl	11a90 <fputc@plt>
   17508:	add	r9, r9, #1
   1750c:	cmp	r8, r9
   17510:	bne	174fc <__assert_fail@plt+0x5958>
   17514:	b	16230 <__assert_fail@plt+0x468c>
   17518:	ldr	r3, [sp, #24]
   1751c:	mov	r2, #1
   17520:	mov	r1, r5
   17524:	mov	r0, r6
   17528:	bl	11868 <fwrite@plt>
   1752c:	b	1624c <__assert_fail@plt+0x46a8>
   17530:	mov	r7, #0
   17534:	ldr	r3, [sp, #28]
   17538:	ldr	r2, [sp, #44]	; 0x2c
   1753c:	str	r2, [r3]
   17540:	b	15d60 <__assert_fail@plt+0x41bc>
   17544:	mov	r1, #67	; 0x43
   17548:	b	166a4 <__assert_fail@plt+0x4b00>
   1754c:	mov	r1, #89	; 0x59
   17550:	b	166a4 <__assert_fail@plt+0x4b00>
   17554:	mov	r1, #121	; 0x79
   17558:	b	166a4 <__assert_fail@plt+0x4b00>
   1755c:	add	r8, sp, #102	; 0x66
   17560:	sub	fp, r8, r5
   17564:	sub	r8, sl, #1
   17568:	sub	r8, r8, fp
   1756c:	ldr	r3, [sp, #36]	; 0x24
   17570:	subs	r6, r3, #45	; 0x2d
   17574:	movne	r6, #1
   17578:	cmp	r8, #0
   1757c:	movle	r3, #0
   17580:	andgt	r3, r6, #1
   17584:	cmp	r3, #0
   17588:	bne	17700 <__assert_fail@plt+0x5b5c>
   1758c:	mov	r8, #0
   17590:	mov	r3, #45	; 0x2d
   17594:	str	r3, [sp, #80]	; 0x50
   17598:	ldr	r3, [sp, #36]	; 0x24
   1759c:	cmp	r3, #95	; 0x5f
   175a0:	beq	16860 <__assert_fail@plt+0x4cbc>
   175a4:	cmn	r7, #3
   175a8:	bhi	168ac <__assert_fail@plt+0x4d08>
   175ac:	ldr	r3, [sp, #24]
   175b0:	cmp	r3, #0
   175b4:	beq	175c4 <__assert_fail@plt+0x5a20>
   175b8:	mov	r1, r3
   175bc:	ldr	r0, [sp, #80]	; 0x50
   175c0:	bl	11a90 <fputc@plt>
   175c4:	add	r7, r7, #1
   175c8:	sub	sl, sl, #1
   175cc:	mov	r8, fp
   175d0:	cmp	sl, #0
   175d4:	movlt	r6, #0
   175d8:	andge	r6, r6, #1
   175dc:	cmp	r6, #0
   175e0:	moveq	sl, #0
   175e4:	mov	r6, sl
   175e8:	cmp	sl, fp
   175ec:	movcc	sl, fp
   175f0:	mvn	r3, r7
   175f4:	cmp	r3, sl
   175f8:	bls	168bc <__assert_fail@plt+0x4d18>
   175fc:	ldr	r3, [sp, #24]
   17600:	cmp	r3, #0
   17604:	beq	16910 <__assert_fail@plt+0x4d6c>
   17608:	cmp	r6, fp
   1760c:	bls	168f4 <__assert_fail@plt+0x4d50>
   17610:	sub	r6, r6, fp
   17614:	ldr	r3, [sp, #36]	; 0x24
   17618:	cmp	r3, #43	; 0x2b
   1761c:	cmpne	r3, #48	; 0x30
   17620:	beq	168cc <__assert_fail@plt+0x4d28>
   17624:	cmp	r6, #0
   17628:	movne	r9, #0
   1762c:	movne	fp, #32
   17630:	beq	168f4 <__assert_fail@plt+0x4d50>
   17634:	ldr	r1, [sp, #24]
   17638:	mov	r0, fp
   1763c:	bl	11a90 <fputc@plt>
   17640:	add	r9, r9, #1
   17644:	cmp	r6, r9
   17648:	bne	17634 <__assert_fail@plt+0x5a90>
   1764c:	b	168f4 <__assert_fail@plt+0x4d50>
   17650:	add	r8, sp, #102	; 0x66
   17654:	sub	fp, r8, r5
   17658:	sub	r8, sl, #1
   1765c:	sub	r8, r8, fp
   17660:	ldr	r3, [sp, #36]	; 0x24
   17664:	subs	r3, r3, #45	; 0x2d
   17668:	movne	r3, #1
   1766c:	cmp	r8, #0
   17670:	movle	r6, #0
   17674:	andgt	r6, r3, #1
   17678:	cmp	r6, #0
   1767c:	movne	r3, #43	; 0x2b
   17680:	strne	r3, [sp, #80]	; 0x50
   17684:	bne	17598 <__assert_fail@plt+0x59f4>
   17688:	mov	r2, #43	; 0x2b
   1768c:	str	r2, [sp, #80]	; 0x50
   17690:	mov	r8, #0
   17694:	b	17708 <__assert_fail@plt+0x5b64>
   17698:	movw	r8, #7024	; 0x1b70
   1769c:	movt	r8, #3
   176a0:	ldr	r3, [sp, #1184]	; 0x4a0
   176a4:	str	r3, [sp, #16]
   176a8:	ldr	r3, [sp, #1180]	; 0x49c
   176ac:	str	r3, [sp, #12]
   176b0:	ldr	r3, [sp, #1176]	; 0x498
   176b4:	str	r3, [sp, #8]
   176b8:	mov	r6, #4
   176bc:	str	r6, [sp, #4]
   176c0:	mov	fp, #43	; 0x2b
   176c4:	str	fp, [sp]
   176c8:	ldr	r3, [sp, #76]	; 0x4c
   176cc:	ldr	r2, [sp, #40]	; 0x28
   176d0:	mov	r1, r8
   176d4:	mov	r0, #0
   176d8:	bl	15c28 <__assert_fail@plt+0x4084>
   176dc:	mov	sl, r9
   176e0:	mov	r9, r6
   176e4:	str	fp, [sp, #36]	; 0x24
   176e8:	b	16424 <__assert_fail@plt+0x4880>
   176ec:	cmn	r7, #1
   176f0:	beq	16bac <__assert_fail@plt+0x5008>
   176f4:	mov	r5, #0
   176f8:	add	r7, r7, r5
   176fc:	b	15d18 <__assert_fail@plt+0x4174>
   17700:	mov	r2, #45	; 0x2d
   17704:	str	r2, [sp, #80]	; 0x50
   17708:	mov	r6, r3
   1770c:	b	17598 <__assert_fail@plt+0x59f4>
   17710:	push	{lr}		; (str lr, [sp, #-4]!)
   17714:	sub	sp, sp, #36	; 0x24
   17718:	mov	ip, #0
   1771c:	strb	ip, [sp, #31]
   17720:	ldr	lr, [sp, #40]	; 0x28
   17724:	str	lr, [sp, #16]
   17728:	str	r3, [sp, #12]
   1772c:	add	r3, sp, #31
   17730:	str	r3, [sp, #8]
   17734:	mvn	r3, #0
   17738:	str	r3, [sp, #4]
   1773c:	str	ip, [sp]
   17740:	mov	r3, ip
   17744:	bl	15c28 <__assert_fail@plt+0x4084>
   17748:	add	sp, sp, #36	; 0x24
   1774c:	pop	{pc}		; (ldr pc, [sp], #4)
   17750:	strd	r4, [sp, #-12]!
   17754:	str	lr, [sp, #8]
   17758:	sub	sp, sp, #12
   1775c:	mov	r5, r0
   17760:	bl	119b8 <__errno_location@plt>
   17764:	mov	r4, r0
   17768:	ldr	r3, [r0]
   1776c:	str	r3, [sp]
   17770:	str	r3, [sp, #4]
   17774:	mov	r3, #0
   17778:	str	r3, [r0]
   1777c:	mov	r0, r5
   17780:	bl	11754 <free@plt>
   17784:	ldr	r3, [r4]
   17788:	clz	r3, r3
   1778c:	lsr	r3, r3, #5
   17790:	add	r2, sp, #8
   17794:	add	r3, r2, r3, lsl #2
   17798:	ldr	r3, [r3, #-8]
   1779c:	str	r3, [r4]
   177a0:	add	sp, sp, #12
   177a4:	ldrd	r4, [sp]
   177a8:	add	sp, sp, #8
   177ac:	pop	{pc}		; (ldr pc, [sp], #4)
   177b0:	str	r4, [sp, #-8]!
   177b4:	str	lr, [sp, #4]
   177b8:	mov	r4, r0
   177bc:	mov	r1, #0
   177c0:	movw	r0, #8360	; 0x20a8
   177c4:	movt	r0, #3
   177c8:	bl	118e0 <open64@plt>
   177cc:	cmp	r4, r0
   177d0:	moveq	r0, #1
   177d4:	beq	177e4 <__assert_fail@plt+0x5c40>
   177d8:	cmp	r0, #0
   177dc:	movlt	r0, #0
   177e0:	bge	177f0 <__assert_fail@plt+0x5c4c>
   177e4:	ldr	r4, [sp]
   177e8:	add	sp, sp, #4
   177ec:	pop	{pc}		; (ldr pc, [sp], #4)
   177f0:	bl	11b80 <close@plt>
   177f4:	bl	119b8 <__errno_location@plt>
   177f8:	mov	r3, #9
   177fc:	str	r3, [r0]
   17800:	mov	r0, #0
   17804:	b	177e4 <__assert_fail@plt+0x5c40>
   17808:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1780c:	strd	r6, [sp, #8]
   17810:	strd	r8, [sp, #16]
   17814:	str	sl, [sp, #24]
   17818:	str	lr, [sp, #28]
   1781c:	mov	r8, r0
   17820:	mov	r9, r1
   17824:	mov	r6, r2
   17828:	mov	r0, r2
   1782c:	bl	11a0c <fileno@plt>
   17830:	cmp	r0, #1
   17834:	beq	17910 <__assert_fail@plt+0x5d6c>
   17838:	cmp	r0, #2
   1783c:	beq	17860 <__assert_fail@plt+0x5cbc>
   17840:	cmp	r0, #0
   17844:	beq	1791c <__assert_fail@plt+0x5d78>
   17848:	mov	r1, #2
   1784c:	mov	r0, r1
   17850:	bl	117e4 <dup2@plt>
   17854:	subs	r4, r0, #2
   17858:	movne	r4, #1
   1785c:	b	17864 <__assert_fail@plt+0x5cc0>
   17860:	mov	r4, #0
   17864:	mov	r1, #1
   17868:	mov	r0, r1
   1786c:	bl	117e4 <dup2@plt>
   17870:	subs	r7, r0, #1
   17874:	movne	r7, #1
   17878:	mov	r1, #0
   1787c:	mov	r0, r1
   17880:	bl	117e4 <dup2@plt>
   17884:	adds	r5, r0, #0
   17888:	movne	r5, #1
   1788c:	cmp	r5, #0
   17890:	bne	1792c <__assert_fail@plt+0x5d88>
   17894:	cmp	r7, #0
   17898:	bne	17944 <__assert_fail@plt+0x5da0>
   1789c:	cmp	r4, #0
   178a0:	beq	178b4 <__assert_fail@plt+0x5d10>
   178a4:	mov	r0, #2
   178a8:	bl	177b0 <__assert_fail@plt+0x5c0c>
   178ac:	cmp	r0, #0
   178b0:	beq	1798c <__assert_fail@plt+0x5de8>
   178b4:	mov	r2, r6
   178b8:	mov	r1, r9
   178bc:	mov	r0, r8
   178c0:	bl	1194c <freopen64@plt>
   178c4:	mov	r6, r0
   178c8:	bl	119b8 <__errno_location@plt>
   178cc:	mov	r8, r0
   178d0:	ldr	r9, [r0]
   178d4:	cmp	r4, #0
   178d8:	bne	1799c <__assert_fail@plt+0x5df8>
   178dc:	cmp	r7, #0
   178e0:	bne	1796c <__assert_fail@plt+0x5dc8>
   178e4:	cmp	r5, #0
   178e8:	bne	17980 <__assert_fail@plt+0x5ddc>
   178ec:	cmp	r6, #0
   178f0:	streq	r9, [r8]
   178f4:	mov	r0, r6
   178f8:	ldrd	r4, [sp]
   178fc:	ldrd	r6, [sp, #8]
   17900:	ldrd	r8, [sp, #16]
   17904:	ldr	sl, [sp, #24]
   17908:	add	sp, sp, #28
   1790c:	pop	{pc}		; (ldr pc, [sp], #4)
   17910:	mov	r4, #0
   17914:	mov	r7, r4
   17918:	b	17878 <__assert_fail@plt+0x5cd4>
   1791c:	mov	r4, #0
   17920:	mov	r7, r4
   17924:	mov	r5, r4
   17928:	b	1788c <__assert_fail@plt+0x5ce8>
   1792c:	mov	r0, #0
   17930:	bl	177b0 <__assert_fail@plt+0x5c0c>
   17934:	cmp	r0, #0
   17938:	bne	17894 <__assert_fail@plt+0x5cf0>
   1793c:	mov	r6, #0
   17940:	b	178c8 <__assert_fail@plt+0x5d24>
   17944:	mov	r0, #1
   17948:	bl	177b0 <__assert_fail@plt+0x5c0c>
   1794c:	cmp	r0, #0
   17950:	bne	1789c <__assert_fail@plt+0x5cf8>
   17954:	bl	119b8 <__errno_location@plt>
   17958:	mov	r8, r0
   1795c:	ldr	r9, [r0]
   17960:	cmp	r4, #0
   17964:	moveq	r6, #0
   17968:	bne	17978 <__assert_fail@plt+0x5dd4>
   1796c:	mov	r0, #1
   17970:	bl	11b80 <close@plt>
   17974:	b	178e4 <__assert_fail@plt+0x5d40>
   17978:	mov	r6, #0
   1797c:	b	1799c <__assert_fail@plt+0x5df8>
   17980:	mov	r0, #0
   17984:	bl	11b80 <close@plt>
   17988:	b	178ec <__assert_fail@plt+0x5d48>
   1798c:	bl	119b8 <__errno_location@plt>
   17990:	mov	r8, r0
   17994:	ldr	r9, [r0]
   17998:	mov	r6, #0
   1799c:	mov	r0, #2
   179a0:	bl	11b80 <close@plt>
   179a4:	b	178dc <__assert_fail@plt+0x5d38>
   179a8:	str	r4, [sp, #-16]!
   179ac:	strd	r6, [sp, #4]
   179b0:	str	lr, [sp, #12]
   179b4:	sub	sp, sp, #8
   179b8:	mov	r4, r0
   179bc:	mov	r6, r2
   179c0:	mov	r7, r3
   179c4:	ldr	r2, [r0, #8]
   179c8:	ldr	r3, [r0, #4]
   179cc:	cmp	r2, r3
   179d0:	beq	17a00 <__assert_fail@plt+0x5e5c>
   179d4:	ldr	r3, [sp, #24]
   179d8:	str	r3, [sp]
   179dc:	mov	r2, r6
   179e0:	mov	r3, r7
   179e4:	mov	r0, r4
   179e8:	bl	11a3c <fseeko64@plt>
   179ec:	add	sp, sp, #8
   179f0:	ldr	r4, [sp]
   179f4:	ldrd	r6, [sp, #4]
   179f8:	add	sp, sp, #12
   179fc:	pop	{pc}		; (ldr pc, [sp], #4)
   17a00:	ldr	r2, [r0, #20]
   17a04:	ldr	r3, [r0, #16]
   17a08:	cmp	r2, r3
   17a0c:	bne	179d4 <__assert_fail@plt+0x5e30>
   17a10:	ldr	r3, [r0, #36]	; 0x24
   17a14:	cmp	r3, #0
   17a18:	bne	179d4 <__assert_fail@plt+0x5e30>
   17a1c:	bl	11a0c <fileno@plt>
   17a20:	ldr	r3, [sp, #24]
   17a24:	str	r3, [sp]
   17a28:	mov	r2, r6
   17a2c:	mov	r3, r7
   17a30:	bl	11874 <lseek64@plt>
   17a34:	mvn	r2, #0
   17a38:	mvn	r3, #0
   17a3c:	cmp	r1, r3
   17a40:	cmpeq	r0, r2
   17a44:	beq	17a60 <__assert_fail@plt+0x5ebc>
   17a48:	ldr	r3, [r4]
   17a4c:	bic	r3, r3, #16
   17a50:	str	r3, [r4]
   17a54:	strd	r0, [r4, #80]	; 0x50
   17a58:	mov	r0, #0
   17a5c:	b	179ec <__assert_fail@plt+0x5e48>
   17a60:	mvn	r0, #0
   17a64:	b	179ec <__assert_fail@plt+0x5e48>
   17a68:	strd	r4, [sp, #-8]!
   17a6c:	ldrd	r4, [r0, #8]
   17a70:	ldrd	r2, [r1, #8]
   17a74:	cmp	r5, r3
   17a78:	cmpeq	r4, r2
   17a7c:	movne	r0, #0
   17a80:	beq	17a90 <__assert_fail@plt+0x5eec>
   17a84:	ldrd	r4, [sp]
   17a88:	add	sp, sp, #8
   17a8c:	bx	lr
   17a90:	ldrd	r4, [r0]
   17a94:	ldrd	r2, [r1]
   17a98:	cmp	r5, r3
   17a9c:	cmpeq	r4, r2
   17aa0:	moveq	r0, #1
   17aa4:	movne	r0, #0
   17aa8:	b	17a84 <__assert_fail@plt+0x5ee0>
   17aac:	str	r4, [sp, #-8]!
   17ab0:	str	lr, [sp, #4]
   17ab4:	mov	r2, r1
   17ab8:	mov	r3, #0
   17abc:	ldrd	r0, [r0, #8]
   17ac0:	bl	3056c <__assert_fail@plt+0x1e9c8>
   17ac4:	mov	r0, r2
   17ac8:	ldr	r4, [sp]
   17acc:	add	sp, sp, #4
   17ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ad4:	str	r4, [sp, #-8]!
   17ad8:	str	lr, [sp, #4]
   17adc:	mov	r2, r1
   17ae0:	mov	r3, #0
   17ae4:	ldrd	r0, [r0]
   17ae8:	bl	3056c <__assert_fail@plt+0x1e9c8>
   17aec:	mov	r0, r2
   17af0:	ldr	r4, [sp]
   17af4:	add	sp, sp, #4
   17af8:	pop	{pc}		; (ldr pc, [sp], #4)
   17afc:	strd	r4, [sp, #-8]!
   17b00:	ldrd	r4, [r0]
   17b04:	ldrd	r2, [r1]
   17b08:	cmp	r5, r3
   17b0c:	cmpeq	r4, r2
   17b10:	moveq	r0, #1
   17b14:	movne	r0, #0
   17b18:	ldrd	r4, [sp]
   17b1c:	add	sp, sp, #8
   17b20:	bx	lr
   17b24:	strd	r4, [sp, #-8]!
   17b28:	ldr	r3, [r0]
   17b2c:	ldrd	r4, [r3, #160]	; 0xa0
   17b30:	ldr	r3, [r1]
   17b34:	ldrd	r2, [r3, #160]	; 0xa0
   17b38:	cmp	r5, r3
   17b3c:	cmpeq	r4, r2
   17b40:	movhi	r0, #1
   17b44:	movls	r0, #0
   17b48:	movcc	r3, #1
   17b4c:	movcs	r3, #0
   17b50:	sub	r0, r0, r3
   17b54:	ldrd	r4, [sp]
   17b58:	add	sp, sp, #8
   17b5c:	bx	lr
   17b60:	strd	r4, [sp, #-16]!
   17b64:	str	r6, [sp, #8]
   17b68:	str	lr, [sp, #12]
   17b6c:	mov	r4, r0
   17b70:	ldr	r3, [r0, #36]	; 0x24
   17b74:	add	r1, r1, #256	; 0x100
   17b78:	adds	r1, r1, r3
   17b7c:	bcs	17bac <__assert_fail@plt+0x6008>
   17b80:	str	r1, [r0, #36]	; 0x24
   17b84:	ldr	r0, [r0, #24]
   17b88:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   17b8c:	cmp	r0, #0
   17b90:	strne	r0, [r4, #24]
   17b94:	movne	r0, #1
   17b98:	beq	17bd0 <__assert_fail@plt+0x602c>
   17b9c:	ldrd	r4, [sp]
   17ba0:	ldr	r6, [sp, #8]
   17ba4:	add	sp, sp, #12
   17ba8:	pop	{pc}		; (ldr pc, [sp], #4)
   17bac:	ldr	r0, [r0, #24]
   17bb0:	bl	17750 <__assert_fail@plt+0x5bac>
   17bb4:	mov	r5, #0
   17bb8:	str	r5, [r4, #24]
   17bbc:	bl	119b8 <__errno_location@plt>
   17bc0:	mov	r3, #36	; 0x24
   17bc4:	str	r3, [r0]
   17bc8:	mov	r0, r5
   17bcc:	b	17b9c <__assert_fail@plt+0x5ff8>
   17bd0:	ldr	r0, [r4, #24]
   17bd4:	bl	17750 <__assert_fail@plt+0x5bac>
   17bd8:	mov	r0, #0
   17bdc:	str	r0, [r4, #24]
   17be0:	b	17b9c <__assert_fail@plt+0x5ff8>
   17be4:	strd	r4, [sp, #-16]!
   17be8:	str	r6, [sp, #8]
   17bec:	str	lr, [sp, #12]
   17bf0:	sub	sp, sp, #8
   17bf4:	mov	r4, r1
   17bf8:	add	r5, r1, #64	; 0x40
   17bfc:	ldr	r3, [r1, #48]	; 0x30
   17c00:	cmp	r3, #0
   17c04:	bne	17c14 <__assert_fail@plt+0x6070>
   17c08:	ldr	r3, [r0, #48]	; 0x30
   17c0c:	tst	r3, #1
   17c10:	bne	17c24 <__assert_fail@plt+0x6080>
   17c14:	ldr	r3, [r0, #48]	; 0x30
   17c18:	ubfx	r3, r3, #1, #1
   17c1c:	orrs	r3, r2, r3
   17c20:	beq	17c98 <__assert_fail@plt+0x60f4>
   17c24:	mov	r2, r5
   17c28:	ldr	r1, [r4, #24]
   17c2c:	mov	r0, #3
   17c30:	bl	11b38 <__xstat64@plt>
   17c34:	cmp	r0, #0
   17c38:	beq	17cbc <__assert_fail@plt+0x6118>
   17c3c:	bl	119b8 <__errno_location@plt>
   17c40:	mov	r6, r0
   17c44:	ldr	r3, [r0]
   17c48:	cmp	r3, #2
   17c4c:	bne	17c78 <__assert_fail@plt+0x60d4>
   17c50:	mov	r2, r5
   17c54:	ldr	r1, [r4, #24]
   17c58:	mov	r0, #3
   17c5c:	bl	11b8c <__lxstat64@plt>
   17c60:	cmp	r0, #0
   17c64:	bne	17c78 <__assert_fail@plt+0x60d4>
   17c68:	mov	r3, #0
   17c6c:	str	r3, [r6]
   17c70:	mov	r0, #13
   17c74:	b	17ce0 <__assert_fail@plt+0x613c>
   17c78:	ldr	r3, [r6]
   17c7c:	str	r3, [r4, #32]
   17c80:	mov	r2, #104	; 0x68
   17c84:	mov	r1, #0
   17c88:	mov	r0, r5
   17c8c:	bl	119e8 <memset@plt>
   17c90:	mov	r0, #10
   17c94:	b	17ce0 <__assert_fail@plt+0x613c>
   17c98:	mov	r3, #256	; 0x100
   17c9c:	str	r3, [sp]
   17ca0:	mov	r3, r5
   17ca4:	ldr	r2, [r4, #24]
   17ca8:	ldr	r1, [r0, #32]
   17cac:	mov	r0, #3
   17cb0:	bl	11820 <__fxstatat64@plt>
   17cb4:	cmp	r0, #0
   17cb8:	bne	17cf4 <__assert_fail@plt+0x6150>
   17cbc:	ldr	r3, [r4, #80]	; 0x50
   17cc0:	and	r3, r3, #61440	; 0xf000
   17cc4:	cmp	r3, #16384	; 0x4000
   17cc8:	beq	17d04 <__assert_fail@plt+0x6160>
   17ccc:	cmp	r3, #40960	; 0xa000
   17cd0:	beq	17d4c <__assert_fail@plt+0x61a8>
   17cd4:	cmp	r3, #32768	; 0x8000
   17cd8:	movne	r0, #3
   17cdc:	moveq	r0, #8
   17ce0:	add	sp, sp, #8
   17ce4:	ldrd	r4, [sp]
   17ce8:	ldr	r6, [sp, #8]
   17cec:	add	sp, sp, #12
   17cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   17cf4:	bl	119b8 <__errno_location@plt>
   17cf8:	ldr	r3, [r0]
   17cfc:	str	r3, [r4, #32]
   17d00:	b	17c80 <__assert_fail@plt+0x60dc>
   17d04:	ldrb	r3, [r4, #168]	; 0xa8
   17d08:	cmp	r3, #46	; 0x2e
   17d0c:	movne	r0, #1
   17d10:	bne	17ce0 <__assert_fail@plt+0x613c>
   17d14:	ldrb	r3, [r4, #169]	; 0xa9
   17d18:	cmp	r3, #0
   17d1c:	beq	17d38 <__assert_fail@plt+0x6194>
   17d20:	ldr	r3, [r4, #168]	; 0xa8
   17d24:	bic	r3, r3, #-16777216	; 0xff000000
   17d28:	bic	r3, r3, #255	; 0xff
   17d2c:	cmp	r3, #11776	; 0x2e00
   17d30:	movne	r0, #1
   17d34:	bne	17ce0 <__assert_fail@plt+0x613c>
   17d38:	ldr	r3, [r4, #48]	; 0x30
   17d3c:	cmp	r3, #0
   17d40:	moveq	r0, #1
   17d44:	movne	r0, #5
   17d48:	b	17ce0 <__assert_fail@plt+0x613c>
   17d4c:	mov	r0, #12
   17d50:	b	17ce0 <__assert_fail@plt+0x613c>
   17d54:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17d58:	strd	r6, [sp, #8]
   17d5c:	str	r8, [sp, #16]
   17d60:	str	lr, [sp, #20]
   17d64:	mov	r6, r0
   17d68:	mov	r4, r1
   17d6c:	mov	r5, r2
   17d70:	ldr	r7, [r0, #44]	; 0x2c
   17d74:	ldr	r3, [r0, #40]	; 0x28
   17d78:	cmp	r3, r2
   17d7c:	bcs	17da8 <__assert_fail@plt+0x6204>
   17d80:	add	r1, r2, #40	; 0x28
   17d84:	str	r1, [r0, #40]	; 0x28
   17d88:	cmn	r1, #-1073741823	; 0xc0000001
   17d8c:	bhi	17e28 <__assert_fail@plt+0x6284>
   17d90:	lsl	r1, r1, #2
   17d94:	ldr	r0, [r0, #8]
   17d98:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   17d9c:	cmp	r0, #0
   17da0:	strne	r0, [r6, #8]
   17da4:	beq	17e28 <__assert_fail@plt+0x6284>
   17da8:	ldr	r3, [r6, #8]
   17dac:	cmp	r4, #0
   17db0:	beq	17dc4 <__assert_fail@plt+0x6220>
   17db4:	str	r4, [r3], #4
   17db8:	ldr	r4, [r4, #8]
   17dbc:	cmp	r4, #0
   17dc0:	bne	17db4 <__assert_fail@plt+0x6210>
   17dc4:	mov	r3, r7
   17dc8:	mov	r2, #4
   17dcc:	mov	r1, r5
   17dd0:	ldr	r0, [r6, #8]
   17dd4:	bl	11b08 <qsort@plt>
   17dd8:	ldr	lr, [r6, #8]
   17ddc:	ldr	r0, [lr]
   17de0:	subs	r3, r5, #1
   17de4:	beq	17e08 <__assert_fail@plt+0x6264>
   17de8:	mov	r2, lr
   17dec:	ldr	r1, [r2]
   17df0:	ldr	ip, [r2, #4]!
   17df4:	str	ip, [r1, #8]
   17df8:	subs	r3, r3, #1
   17dfc:	bne	17dec <__assert_fail@plt+0x6248>
   17e00:	sub	r5, r5, #-1073741823	; 0xc0000001
   17e04:	add	lr, lr, r5, lsl #2
   17e08:	ldr	r3, [lr]
   17e0c:	mov	r2, #0
   17e10:	str	r2, [r3, #8]
   17e14:	ldrd	r4, [sp]
   17e18:	ldrd	r6, [sp, #8]
   17e1c:	ldr	r8, [sp, #16]
   17e20:	add	sp, sp, #20
   17e24:	pop	{pc}		; (ldr pc, [sp], #4)
   17e28:	ldr	r0, [r6, #8]
   17e2c:	bl	17750 <__assert_fail@plt+0x5bac>
   17e30:	mov	r3, #0
   17e34:	str	r3, [r6, #8]
   17e38:	str	r3, [r6, #40]	; 0x28
   17e3c:	mov	r0, r4
   17e40:	b	17e14 <__assert_fail@plt+0x6270>
   17e44:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17e48:	strd	r6, [sp, #8]
   17e4c:	str	r8, [sp, #16]
   17e50:	str	lr, [sp, #20]
   17e54:	mov	r6, r0
   17e58:	mov	r7, r1
   17e5c:	mov	r5, r2
   17e60:	add	r0, r2, #176	; 0xb0
   17e64:	bic	r0, r0, #7
   17e68:	bl	2f010 <__assert_fail@plt+0x1d46c>
   17e6c:	subs	r4, r0, #0
   17e70:	beq	17ebc <__assert_fail@plt+0x6318>
   17e74:	mov	r2, r5
   17e78:	mov	r1, r7
   17e7c:	add	r0, r4, #168	; 0xa8
   17e80:	bl	11784 <memcpy@plt>
   17e84:	add	r2, r4, r5
   17e88:	mov	r3, #0
   17e8c:	strb	r3, [r2, #168]	; 0xa8
   17e90:	str	r5, [r4, #52]	; 0x34
   17e94:	str	r6, [r4, #44]	; 0x2c
   17e98:	ldr	r2, [r6, #24]
   17e9c:	str	r2, [r4, #28]
   17ea0:	str	r3, [r4, #32]
   17ea4:	str	r3, [r4, #12]
   17ea8:	strh	r3, [r4, #58]	; 0x3a
   17eac:	mov	r2, #3
   17eb0:	strh	r2, [r4, #60]	; 0x3c
   17eb4:	str	r3, [r4, #16]
   17eb8:	str	r3, [r4, #20]
   17ebc:	mov	r0, r4
   17ec0:	ldrd	r4, [sp]
   17ec4:	ldrd	r6, [sp, #8]
   17ec8:	ldr	r8, [sp, #16]
   17ecc:	add	sp, sp, #20
   17ed0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ed4:	str	r4, [sp, #-8]!
   17ed8:	str	lr, [sp, #4]
   17edc:	sub	sp, sp, #8
   17ee0:	mov	r4, r0
   17ee4:	ldr	r3, [r0, #48]	; 0x30
   17ee8:	movw	r2, #258	; 0x102
   17eec:	tst	r2, r3
   17ef0:	beq	17f38 <__assert_fail@plt+0x6394>
   17ef4:	movw	r3, #30544	; 0x7750
   17ef8:	movt	r3, #1
   17efc:	str	r3, [sp]
   17f00:	movw	r3, #31336	; 0x7a68
   17f04:	movt	r3, #1
   17f08:	movw	r2, #31404	; 0x7aac
   17f0c:	movt	r2, #1
   17f10:	mov	r1, #0
   17f14:	mov	r0, #31
   17f18:	bl	1a7d4 <__assert_fail@plt+0x8c30>
   17f1c:	str	r0, [r4, #56]	; 0x38
   17f20:	adds	r0, r0, #0
   17f24:	movne	r0, #1
   17f28:	add	sp, sp, #8
   17f2c:	ldr	r4, [sp]
   17f30:	add	sp, sp, #4
   17f34:	pop	{pc}		; (ldr pc, [sp], #4)
   17f38:	mov	r0, #32
   17f3c:	bl	2f010 <__assert_fail@plt+0x1d46c>
   17f40:	str	r0, [r4, #56]	; 0x38
   17f44:	cmp	r0, #0
   17f48:	moveq	r0, #0
   17f4c:	beq	17f28 <__assert_fail@plt+0x6384>
   17f50:	bl	2fa94 <__assert_fail@plt+0x1def0>
   17f54:	mov	r0, #1
   17f58:	b	17f28 <__assert_fail@plt+0x6384>
   17f5c:	str	r4, [sp, #-8]!
   17f60:	str	lr, [sp, #4]
   17f64:	mov	ip, r1
   17f68:	ldr	r3, [r0, #48]	; 0x30
   17f6c:	lsl	r2, r3, #11
   17f70:	and	r2, r2, #32768	; 0x8000
   17f74:	orr	r2, r2, #540672	; 0x84000
   17f78:	orr	r2, r2, #2304	; 0x900
   17f7c:	tst	r3, #512	; 0x200
   17f80:	beq	17f98 <__assert_fail@plt+0x63f4>
   17f84:	ldr	r0, [r0, #32]
   17f88:	bl	1d1d8 <__assert_fail@plt+0xb634>
   17f8c:	ldr	r4, [sp]
   17f90:	add	sp, sp, #4
   17f94:	pop	{pc}		; (ldr pc, [sp], #4)
   17f98:	mov	r1, r2
   17f9c:	mov	r0, ip
   17fa0:	bl	2fee0 <__assert_fail@plt+0x1e33c>
   17fa4:	b	17f8c <__assert_fail@plt+0x63e8>
   17fa8:	strd	r4, [sp, #-16]!
   17fac:	str	r6, [sp, #8]
   17fb0:	str	lr, [sp, #12]
   17fb4:	subs	r4, r0, #0
   17fb8:	bne	17fe4 <__assert_fail@plt+0x6440>
   17fbc:	ldrd	r4, [sp]
   17fc0:	ldr	r6, [sp, #8]
   17fc4:	add	sp, sp, #12
   17fc8:	pop	{pc}		; (ldr pc, [sp], #4)
   17fcc:	bl	11b98 <closedir@plt>
   17fd0:	mov	r0, r4
   17fd4:	bl	17750 <__assert_fail@plt+0x5bac>
   17fd8:	mov	r4, r5
   17fdc:	cmp	r5, #0
   17fe0:	beq	17fbc <__assert_fail@plt+0x6418>
   17fe4:	ldr	r5, [r4, #8]
   17fe8:	ldr	r0, [r4, #12]
   17fec:	cmp	r0, #0
   17ff0:	bne	17fcc <__assert_fail@plt+0x6428>
   17ff4:	b	17fd0 <__assert_fail@plt+0x642c>
   17ff8:	str	r4, [sp, #-8]!
   17ffc:	str	lr, [sp, #4]
   18000:	ldr	r3, [r0, #48]	; 0x30
   18004:	movw	r2, #258	; 0x102
   18008:	tst	r2, r3
   1800c:	beq	1802c <__assert_fail@plt+0x6488>
   18010:	ldr	r0, [r0, #56]	; 0x38
   18014:	cmp	r0, #0
   18018:	beq	18020 <__assert_fail@plt+0x647c>
   1801c:	bl	1a9a0 <__assert_fail@plt+0x8dfc>
   18020:	ldr	r4, [sp]
   18024:	add	sp, sp, #4
   18028:	pop	{pc}		; (ldr pc, [sp], #4)
   1802c:	ldr	r0, [r0, #56]	; 0x38
   18030:	bl	17750 <__assert_fail@plt+0x5bac>
   18034:	b	18020 <__assert_fail@plt+0x647c>
   18038:	str	r4, [sp, #-8]!
   1803c:	str	lr, [sp, #4]
   18040:	mov	r4, r0
   18044:	mov	r0, r4
   18048:	bl	1ba74 <__assert_fail@plt+0x9ed0>
   1804c:	cmp	r0, #0
   18050:	bne	1806c <__assert_fail@plt+0x64c8>
   18054:	mov	r0, r4
   18058:	bl	1bac8 <__assert_fail@plt+0x9f24>
   1805c:	cmp	r0, #0
   18060:	blt	18044 <__assert_fail@plt+0x64a0>
   18064:	bl	11b80 <close@plt>
   18068:	b	18044 <__assert_fail@plt+0x64a0>
   1806c:	ldr	r4, [sp]
   18070:	add	sp, sp, #4
   18074:	pop	{pc}		; (ldr pc, [sp], #4)
   18078:	strd	r4, [sp, #-20]!	; 0xffffffec
   1807c:	strd	r6, [sp, #8]
   18080:	str	lr, [sp, #16]
   18084:	sub	sp, sp, #116	; 0x74
   18088:	ldr	r7, [r0, #44]	; 0x2c
   1808c:	ldr	r3, [r7, #48]	; 0x30
   18090:	ands	r3, r3, #512	; 0x200
   18094:	beq	18184 <__assert_fail@plt+0x65e0>
   18098:	mov	r6, r1
   1809c:	mov	r5, r0
   180a0:	ldr	r4, [r7, #52]	; 0x34
   180a4:	cmp	r4, #0
   180a8:	beq	180d0 <__assert_fail@plt+0x652c>
   180ac:	ldrd	r2, [r5, #64]	; 0x40
   180b0:	strd	r2, [sp, #8]
   180b4:	add	r1, sp, #8
   180b8:	mov	r0, r4
   180bc:	bl	1a4e0 <__assert_fail@plt+0x893c>
   180c0:	cmp	r0, #0
   180c4:	beq	18108 <__assert_fail@plt+0x6564>
   180c8:	ldr	r3, [r0, #8]
   180cc:	b	18184 <__assert_fail@plt+0x65e0>
   180d0:	movw	r3, #30544	; 0x7750
   180d4:	movt	r3, #1
   180d8:	str	r3, [sp]
   180dc:	movw	r3, #31484	; 0x7afc
   180e0:	movt	r3, #1
   180e4:	movw	r2, #31444	; 0x7ad4
   180e8:	movt	r2, #1
   180ec:	mov	r1, #0
   180f0:	mov	r0, #13
   180f4:	bl	1a7d4 <__assert_fail@plt+0x8c30>
   180f8:	mov	r4, r0
   180fc:	str	r0, [r7, #52]	; 0x34
   18100:	cmp	r0, #0
   18104:	bne	180ac <__assert_fail@plt+0x6508>
   18108:	cmp	r6, #0
   1810c:	blt	18180 <__assert_fail@plt+0x65dc>
   18110:	add	r1, sp, #24
   18114:	mov	r0, r6
   18118:	bl	116a0 <fstatfs64@plt>
   1811c:	cmp	r0, #0
   18120:	bne	1819c <__assert_fail@plt+0x65f8>
   18124:	cmp	r4, #0
   18128:	beq	18168 <__assert_fail@plt+0x65c4>
   1812c:	mov	r0, #16
   18130:	bl	2f010 <__assert_fail@plt+0x1d46c>
   18134:	subs	r6, r0, #0
   18138:	beq	18168 <__assert_fail@plt+0x65c4>
   1813c:	ldrd	r2, [r5, #64]	; 0x40
   18140:	strd	r2, [r6]
   18144:	ldr	r3, [sp, #24]
   18148:	str	r3, [r6, #8]
   1814c:	mov	r1, r6
   18150:	mov	r0, r4
   18154:	bl	1ad88 <__assert_fail@plt+0x91e4>
   18158:	cmp	r0, #0
   1815c:	beq	18174 <__assert_fail@plt+0x65d0>
   18160:	cmp	r6, r0
   18164:	bne	18170 <__assert_fail@plt+0x65cc>
   18168:	ldr	r3, [sp, #24]
   1816c:	b	18184 <__assert_fail@plt+0x65e0>
   18170:	bl	11b68 <abort@plt>
   18174:	mov	r0, r6
   18178:	bl	17750 <__assert_fail@plt+0x5bac>
   1817c:	b	18168 <__assert_fail@plt+0x65c4>
   18180:	mov	r3, #0
   18184:	mov	r0, r3
   18188:	add	sp, sp, #116	; 0x74
   1818c:	ldrd	r4, [sp]
   18190:	ldrd	r6, [sp, #8]
   18194:	add	sp, sp, #16
   18198:	pop	{pc}		; (ldr pc, [sp], #4)
   1819c:	mov	r3, #0
   181a0:	b	18184 <__assert_fail@plt+0x65e0>
   181a4:	strd	r4, [sp, #-16]!
   181a8:	str	r6, [sp, #8]
   181ac:	str	lr, [sp, #12]
   181b0:	mov	r5, r0
   181b4:	mov	r4, r1
   181b8:	ldr	r3, [r0, #48]	; 0x30
   181bc:	movw	r2, #258	; 0x102
   181c0:	tst	r2, r3
   181c4:	beq	18238 <__assert_fail@plt+0x6694>
   181c8:	mov	r0, #24
   181cc:	bl	2f010 <__assert_fail@plt+0x1d46c>
   181d0:	subs	r6, r0, #0
   181d4:	moveq	r0, #0
   181d8:	beq	1825c <__assert_fail@plt+0x66b8>
   181dc:	ldrd	r2, [r4, #64]	; 0x40
   181e0:	strd	r2, [r6]
   181e4:	ldrd	r2, [r4, #160]	; 0xa0
   181e8:	strd	r2, [r6, #8]
   181ec:	str	r4, [r6, #16]
   181f0:	mov	r1, r6
   181f4:	ldr	r0, [r5, #56]	; 0x38
   181f8:	bl	1ad88 <__assert_fail@plt+0x91e4>
   181fc:	mov	r5, r0
   18200:	cmp	r6, r0
   18204:	moveq	r0, #1
   18208:	beq	1825c <__assert_fail@plt+0x66b8>
   1820c:	mov	r0, r6
   18210:	bl	17750 <__assert_fail@plt+0x5bac>
   18214:	cmp	r5, #0
   18218:	moveq	r0, #0
   1821c:	beq	1825c <__assert_fail@plt+0x66b8>
   18220:	ldr	r3, [r5, #16]
   18224:	str	r3, [r4]
   18228:	mov	r3, #2
   1822c:	strh	r3, [r4, #56]	; 0x38
   18230:	mov	r0, #1
   18234:	b	1825c <__assert_fail@plt+0x66b8>
   18238:	add	r1, r1, #64	; 0x40
   1823c:	ldr	r0, [r0, #56]	; 0x38
   18240:	bl	2fab0 <__assert_fail@plt+0x1df0c>
   18244:	cmp	r0, #0
   18248:	moveq	r0, #1
   1824c:	beq	1825c <__assert_fail@plt+0x66b8>
   18250:	str	r4, [r4]
   18254:	mov	r3, #2
   18258:	strh	r3, [r4, #56]	; 0x38
   1825c:	ldrd	r4, [sp]
   18260:	ldr	r6, [sp, #8]
   18264:	add	sp, sp, #12
   18268:	pop	{pc}		; (ldr pc, [sp], #4)
   1826c:	strd	r4, [sp, #-16]!
   18270:	str	r6, [sp, #8]
   18274:	str	lr, [sp, #12]
   18278:	mov	r5, r1
   1827c:	ldr	r1, [r0, #32]
   18280:	cmp	r1, r5
   18284:	movne	r3, #0
   18288:	moveq	r3, #1
   1828c:	cmn	r1, #100	; 0x64
   18290:	moveq	r3, #0
   18294:	cmp	r3, #0
   18298:	bne	182dc <__assert_fail@plt+0x6738>
   1829c:	mov	r4, r0
   182a0:	cmp	r2, #0
   182a4:	bne	182e0 <__assert_fail@plt+0x673c>
   182a8:	ldr	r3, [r0, #48]	; 0x30
   182ac:	eor	r3, r3, #4
   182b0:	ubfx	r3, r3, #2, #1
   182b4:	cmp	r1, #0
   182b8:	movlt	r3, #0
   182bc:	andge	r3, r3, #1
   182c0:	cmp	r3, #0
   182c4:	bne	182f8 <__assert_fail@plt+0x6754>
   182c8:	str	r5, [r4, #32]
   182cc:	ldrd	r4, [sp]
   182d0:	ldr	r6, [sp, #8]
   182d4:	add	sp, sp, #12
   182d8:	pop	{pc}		; (ldr pc, [sp], #4)
   182dc:	bl	11b68 <abort@plt>
   182e0:	add	r0, r0, #60	; 0x3c
   182e4:	bl	1ba7c <__assert_fail@plt+0x9ed8>
   182e8:	cmp	r0, #0
   182ec:	blt	182c8 <__assert_fail@plt+0x6724>
   182f0:	bl	11b80 <close@plt>
   182f4:	b	182c8 <__assert_fail@plt+0x6724>
   182f8:	mov	r0, r1
   182fc:	bl	11b80 <close@plt>
   18300:	b	182c8 <__assert_fail@plt+0x6724>
   18304:	strd	r4, [sp, #-16]!
   18308:	str	r6, [sp, #8]
   1830c:	str	lr, [sp, #12]
   18310:	mov	r4, r0
   18314:	ldr	r3, [r0, #48]	; 0x30
   18318:	ands	r5, r3, #4
   1831c:	movne	r5, #0
   18320:	bne	18338 <__assert_fail@plt+0x6794>
   18324:	tst	r3, #512	; 0x200
   18328:	beq	18354 <__assert_fail@plt+0x67b0>
   1832c:	mov	r2, #1
   18330:	mvn	r1, #99	; 0x63
   18334:	bl	1826c <__assert_fail@plt+0x66c8>
   18338:	add	r0, r4, #60	; 0x3c
   1833c:	bl	18038 <__assert_fail@plt+0x6494>
   18340:	mov	r0, r5
   18344:	ldrd	r4, [sp]
   18348:	ldr	r6, [sp, #8]
   1834c:	add	sp, sp, #12
   18350:	pop	{pc}		; (ldr pc, [sp], #4)
   18354:	ldr	r0, [r0, #28]
   18358:	bl	11ae4 <fchdir@plt>
   1835c:	adds	r5, r0, #0
   18360:	movne	r5, #1
   18364:	b	18338 <__assert_fail@plt+0x6794>
   18368:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1836c:	strd	r6, [sp, #8]
   18370:	strd	r8, [sp, #16]
   18374:	str	lr, [sp, #24]
   18378:	sub	sp, sp, #108	; 0x6c
   1837c:	mov	r4, r0
   18380:	mov	r7, r1
   18384:	mov	r5, r2
   18388:	subs	r9, r3, #0
   1838c:	beq	184b8 <__assert_fail@plt+0x6914>
   18390:	movw	r1, #8372	; 0x20b4
   18394:	movt	r1, #3
   18398:	mov	r0, r9
   1839c:	bl	1170c <strcmp@plt>
   183a0:	cmp	r0, #0
   183a4:	bne	184b8 <__assert_fail@plt+0x6914>
   183a8:	ldr	r3, [r4, #48]	; 0x30
   183ac:	tst	r3, #4
   183b0:	bne	183f8 <__assert_fail@plt+0x6854>
   183b4:	cmp	r5, #0
   183b8:	bge	1846c <__assert_fail@plt+0x68c8>
   183bc:	tst	r3, #512	; 0x200
   183c0:	beq	183d8 <__assert_fail@plt+0x6834>
   183c4:	add	r6, r4, #60	; 0x3c
   183c8:	mov	r0, r6
   183cc:	bl	1ba74 <__assert_fail@plt+0x9ed0>
   183d0:	cmp	r0, #0
   183d4:	beq	18424 <__assert_fail@plt+0x6880>
   183d8:	mov	r8, #1
   183dc:	mov	r1, r9
   183e0:	mov	r0, r4
   183e4:	bl	17f5c <__assert_fail@plt+0x63b8>
   183e8:	subs	r6, r0, #0
   183ec:	bge	184d4 <__assert_fail@plt+0x6930>
   183f0:	mvn	r4, #0
   183f4:	b	18558 <__assert_fail@plt+0x69b4>
   183f8:	ubfx	r3, r3, #9, #1
   183fc:	cmp	r5, #0
   18400:	movlt	r3, #0
   18404:	andge	r3, r3, #1
   18408:	cmp	r3, #0
   1840c:	moveq	r4, #0
   18410:	beq	18558 <__assert_fail@plt+0x69b4>
   18414:	mov	r0, r5
   18418:	bl	11b80 <close@plt>
   1841c:	mov	r4, #0
   18420:	b	18558 <__assert_fail@plt+0x69b4>
   18424:	mov	r0, r6
   18428:	bl	1bac8 <__assert_fail@plt+0x9f24>
   1842c:	subs	r6, r0, #0
   18430:	blt	183d8 <__assert_fail@plt+0x6834>
   18434:	ldr	r3, [r4, #48]	; 0x30
   18438:	tst	r3, #2
   1843c:	bne	18478 <__assert_fail@plt+0x68d4>
   18440:	mov	r5, r6
   18444:	mov	r8, #1
   18448:	ldr	r3, [r4, #48]	; 0x30
   1844c:	tst	r3, #512	; 0x200
   18450:	bne	18484 <__assert_fail@plt+0x68e0>
   18454:	mov	r0, r6
   18458:	bl	11ae4 <fchdir@plt>
   1845c:	mov	r4, r0
   18460:	b	18550 <__assert_fail@plt+0x69ac>
   18464:	mov	r8, #0
   18468:	b	183dc <__assert_fail@plt+0x6838>
   1846c:	mov	r6, r5
   18470:	mov	r8, #1
   18474:	b	184d4 <__assert_fail@plt+0x6930>
   18478:	mov	r5, r6
   1847c:	mov	r8, #1
   18480:	b	18500 <__assert_fail@plt+0x695c>
   18484:	eor	r2, r8, #1
   18488:	mov	r1, r6
   1848c:	mov	r0, r4
   18490:	bl	1826c <__assert_fail@plt+0x66c8>
   18494:	mov	r4, #0
   18498:	b	18558 <__assert_fail@plt+0x69b4>
   1849c:	bl	119b8 <__errno_location@plt>
   184a0:	mov	r5, r0
   184a4:	ldr	r7, [r0]
   184a8:	mov	r0, r6
   184ac:	bl	11b80 <close@plt>
   184b0:	str	r7, [r5]
   184b4:	b	18558 <__assert_fail@plt+0x69b4>
   184b8:	ldr	r3, [r4, #48]	; 0x30
   184bc:	tst	r3, #4
   184c0:	bne	183f8 <__assert_fail@plt+0x6854>
   184c4:	cmp	r5, #0
   184c8:	movge	r6, r5
   184cc:	movge	r8, #0
   184d0:	blt	18464 <__assert_fail@plt+0x68c0>
   184d4:	ldr	r3, [r4, #48]	; 0x30
   184d8:	tst	r3, #2
   184dc:	bne	18500 <__assert_fail@plt+0x695c>
   184e0:	cmp	r9, #0
   184e4:	beq	18448 <__assert_fail@plt+0x68a4>
   184e8:	movw	r1, #8372	; 0x20b4
   184ec:	movt	r1, #3
   184f0:	mov	r0, r9
   184f4:	bl	1170c <strcmp@plt>
   184f8:	cmp	r0, #0
   184fc:	bne	18448 <__assert_fail@plt+0x68a4>
   18500:	mov	r2, sp
   18504:	mov	r1, r6
   18508:	mov	r0, #3
   1850c:	bl	11850 <__fxstat64@plt>
   18510:	cmp	r0, #0
   18514:	bne	1854c <__assert_fail@plt+0x69a8>
   18518:	ldrd	r0, [r7, #64]	; 0x40
   1851c:	ldrd	r2, [sp]
   18520:	cmp	r1, r3
   18524:	cmpeq	r0, r2
   18528:	bne	18540 <__assert_fail@plt+0x699c>
   1852c:	ldrd	r0, [r7, #160]	; 0xa0
   18530:	ldrd	r2, [sp, #96]	; 0x60
   18534:	cmp	r1, r3
   18538:	cmpeq	r0, r2
   1853c:	beq	18448 <__assert_fail@plt+0x68a4>
   18540:	bl	119b8 <__errno_location@plt>
   18544:	mov	r3, #2
   18548:	str	r3, [r0]
   1854c:	mvn	r4, #0
   18550:	cmp	r5, #0
   18554:	blt	1849c <__assert_fail@plt+0x68f8>
   18558:	mov	r0, r4
   1855c:	add	sp, sp, #108	; 0x6c
   18560:	ldrd	r4, [sp]
   18564:	ldrd	r6, [sp, #8]
   18568:	ldrd	r8, [sp, #16]
   1856c:	add	sp, sp, #24
   18570:	pop	{pc}		; (ldr pc, [sp], #4)
   18574:	strd	r4, [sp, #-12]!
   18578:	str	lr, [sp, #8]
   1857c:	sub	sp, sp, #28
   18580:	ldr	r3, [r0, #48]	; 0x30
   18584:	movw	r2, #258	; 0x102
   18588:	tst	r2, r3
   1858c:	bne	185f8 <__assert_fail@plt+0x6a54>
   18590:	ldr	ip, [r1, #4]
   18594:	cmp	ip, #0
   18598:	beq	18620 <__assert_fail@plt+0x6a7c>
   1859c:	ldr	r3, [ip, #48]	; 0x30
   185a0:	cmp	r3, #0
   185a4:	blt	18620 <__assert_fail@plt+0x6a7c>
   185a8:	ldr	lr, [r0, #56]	; 0x38
   185ac:	ldrd	r2, [lr, #16]
   185b0:	orrs	r3, r2, r3
   185b4:	beq	18634 <__assert_fail@plt+0x6a90>
   185b8:	ldrd	r4, [lr]
   185bc:	ldrd	r2, [r1, #160]	; 0xa0
   185c0:	cmp	r5, r3
   185c4:	cmpeq	r4, r2
   185c8:	bne	18620 <__assert_fail@plt+0x6a7c>
   185cc:	ldrd	r2, [lr, #8]
   185d0:	ldrd	r4, [r1, #64]	; 0x40
   185d4:	cmp	r3, r5
   185d8:	cmpeq	r2, r4
   185dc:	bne	18620 <__assert_fail@plt+0x6a7c>
   185e0:	ldrd	r2, [ip, #64]	; 0x40
   185e4:	strd	r2, [lr, #8]
   185e8:	ldr	r3, [r0, #56]	; 0x38
   185ec:	ldrd	r0, [ip, #160]	; 0xa0
   185f0:	strd	r0, [r3]
   185f4:	b	18620 <__assert_fail@plt+0x6a7c>
   185f8:	ldrd	r2, [r1, #64]	; 0x40
   185fc:	strd	r2, [sp]
   18600:	ldrd	r2, [r1, #160]	; 0xa0
   18604:	strd	r2, [sp, #8]
   18608:	mov	r1, sp
   1860c:	ldr	r0, [r0, #56]	; 0x38
   18610:	bl	1adc8 <__assert_fail@plt+0x9224>
   18614:	cmp	r0, #0
   18618:	beq	18630 <__assert_fail@plt+0x6a8c>
   1861c:	bl	17750 <__assert_fail@plt+0x5bac>
   18620:	add	sp, sp, #28
   18624:	ldrd	r4, [sp]
   18628:	add	sp, sp, #8
   1862c:	pop	{pc}		; (ldr pc, [sp], #4)
   18630:	bl	11b68 <abort@plt>
   18634:	bl	11b68 <abort@plt>
   18638:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1863c:	strd	r6, [sp, #8]
   18640:	strd	r8, [sp, #16]
   18644:	strd	sl, [sp, #24]
   18648:	str	lr, [sp, #32]
   1864c:	sub	sp, sp, #68	; 0x44
   18650:	mov	r5, r0
   18654:	str	r1, [sp, #32]
   18658:	ldr	r9, [r0]
   1865c:	ldr	r0, [r9, #12]
   18660:	str	r0, [sp, #40]	; 0x28
   18664:	cmp	r0, #0
   18668:	beq	18778 <__assert_fail@plt+0x6bd4>
   1866c:	bl	11ad8 <dirfd@plt>
   18670:	str	r0, [sp, #60]	; 0x3c
   18674:	cmp	r0, #0
   18678:	blt	18734 <__assert_fail@plt+0x6b90>
   1867c:	ldr	r2, [r5, #44]	; 0x2c
   18680:	movw	r3, #34464	; 0x86a0
   18684:	movt	r3, #1
   18688:	cmp	r2, #0
   1868c:	mvnne	r3, #0
   18690:	str	r3, [sp, #16]
   18694:	mov	r3, #1
   18698:	str	r3, [sp, #52]	; 0x34
   1869c:	ldr	r3, [r9, #40]	; 0x28
   186a0:	sub	r1, r3, #1
   186a4:	ldr	r2, [r9, #28]
   186a8:	ldrb	r2, [r2, r1]
   186ac:	cmp	r2, #47	; 0x2f
   186b0:	movne	r1, r3
   186b4:	str	r1, [sp, #28]
   186b8:	ldr	r3, [r5, #48]	; 0x30
   186bc:	tst	r3, #4
   186c0:	moveq	r3, #0
   186c4:	streq	r3, [sp, #20]
   186c8:	beq	186e4 <__assert_fail@plt+0x6b40>
   186cc:	ldr	r3, [r5, #24]
   186d0:	add	r2, r3, r1
   186d4:	add	r2, r2, #1
   186d8:	str	r2, [sp, #20]
   186dc:	mov	r2, #47	; 0x2f
   186e0:	strb	r2, [r3, r1]
   186e4:	ldr	r3, [sp, #28]
   186e8:	add	sl, r3, #1
   186ec:	ldr	fp, [r5, #36]	; 0x24
   186f0:	sub	fp, fp, sl
   186f4:	ldr	r3, [r9, #48]	; 0x30
   186f8:	add	r3, r3, #1
   186fc:	str	r3, [sp, #12]
   18700:	mov	r3, #0
   18704:	str	r3, [sp, #36]	; 0x24
   18708:	str	r3, [sp, #24]
   1870c:	str	r3, [sp]
   18710:	mov	r8, r3
   18714:	str	r3, [sp, #4]
   18718:	movw	r3, #6548	; 0x1994
   1871c:	movt	r3, #258	; 0x102
   18720:	str	r3, [sp, #44]	; 0x2c
   18724:	movw	r3, #19778	; 0x4d42
   18728:	movt	r3, #65363	; 0xff53
   1872c:	str	r3, [sp, #48]	; 0x30
   18730:	b	18d10 <__assert_fail@plt+0x716c>
   18734:	ldr	r0, [r9, #12]
   18738:	bl	11b98 <closedir@plt>
   1873c:	mov	r3, #0
   18740:	str	r3, [r9, #12]
   18744:	ldr	r3, [sp, #32]
   18748:	cmp	r3, #3
   1874c:	movne	r3, #0
   18750:	strne	r3, [sp, #4]
   18754:	bne	18bc0 <__assert_fail@plt+0x701c>
   18758:	mov	r3, #4
   1875c:	strh	r3, [r9, #56]	; 0x38
   18760:	bl	119b8 <__errno_location@plt>
   18764:	ldr	r3, [r0]
   18768:	str	r3, [r9, #32]
   1876c:	mov	r3, #0
   18770:	str	r3, [sp, #4]
   18774:	b	18bc0 <__assert_fail@plt+0x701c>
   18778:	ldr	r3, [r5, #48]	; 0x30
   1877c:	and	r2, r3, #516	; 0x204
   18780:	cmp	r2, #512	; 0x200
   18784:	ldreq	r0, [r5, #32]
   18788:	mvnne	r0, #99	; 0x63
   1878c:	ldr	r1, [r9, #24]
   18790:	ands	r2, r3, #16
   18794:	beq	187b0 <__assert_fail@plt+0x6c0c>
   18798:	tst	r3, #1
   1879c:	moveq	r2, #32768	; 0x8000
   187a0:	beq	187b0 <__assert_fail@plt+0x6c0c>
   187a4:	ldr	r2, [r9, #48]	; 0x30
   187a8:	cmp	r2, #0
   187ac:	movne	r2, #32768	; 0x8000
   187b0:	add	r3, sp, #60	; 0x3c
   187b4:	bl	1d214 <__assert_fail@plt+0xb670>
   187b8:	str	r0, [sp, #4]
   187bc:	str	r0, [r9, #12]
   187c0:	cmp	r0, #0
   187c4:	beq	18898 <__assert_fail@plt+0x6cf4>
   187c8:	ldrh	r3, [r9, #56]	; 0x38
   187cc:	cmp	r3, #11
   187d0:	beq	188bc <__assert_fail@plt+0x6d18>
   187d4:	ldr	r3, [r5, #48]	; 0x30
   187d8:	tst	r3, #256	; 0x100
   187dc:	bne	188d4 <__assert_fail@plt+0x6d30>
   187e0:	ldr	r2, [r5, #44]	; 0x2c
   187e4:	movw	r3, #34464	; 0x86a0
   187e8:	movt	r3, #1
   187ec:	cmp	r2, #0
   187f0:	mvnne	r3, #0
   187f4:	str	r3, [sp, #16]
   187f8:	ldr	r3, [sp, #32]
   187fc:	cmp	r3, #2
   18800:	beq	189f8 <__assert_fail@plt+0x6e54>
   18804:	ldr	r3, [r5, #48]	; 0x30
   18808:	and	r3, r3, #56	; 0x38
   1880c:	cmp	r3, #24
   18810:	beq	1891c <__assert_fail@plt+0x6d78>
   18814:	ldr	r3, [sp, #32]
   18818:	cmp	r3, #3
   1881c:	movne	r4, #0
   18820:	moveq	r4, #1
   18824:	mov	r6, #1
   18828:	ldr	r3, [r5, #48]	; 0x30
   1882c:	tst	r3, #512	; 0x200
   18830:	bne	189b4 <__assert_fail@plt+0x6e10>
   18834:	ldr	r2, [sp, #60]	; 0x3c
   18838:	cmp	r2, #0
   1883c:	bge	189cc <__assert_fail@plt+0x6e28>
   18840:	tst	r4, r6
   18844:	beq	18854 <__assert_fail@plt+0x6cb0>
   18848:	bl	119b8 <__errno_location@plt>
   1884c:	ldr	r3, [r0]
   18850:	str	r3, [r9, #32]
   18854:	ldrh	r3, [r9, #58]	; 0x3a
   18858:	orr	r3, r3, #1
   1885c:	strh	r3, [r9, #58]	; 0x3a
   18860:	ldr	r0, [r9, #12]
   18864:	bl	11b98 <closedir@plt>
   18868:	mov	r3, #0
   1886c:	str	r3, [r9, #12]
   18870:	ldr	r3, [r5, #48]	; 0x30
   18874:	tst	r3, #512	; 0x200
   18878:	beq	18888 <__assert_fail@plt+0x6ce4>
   1887c:	ldr	r0, [sp, #60]	; 0x3c
   18880:	cmp	r0, #0
   18884:	bge	189f0 <__assert_fail@plt+0x6e4c>
   18888:	mov	r3, #0
   1888c:	str	r3, [r9, #12]
   18890:	str	r3, [sp, #52]	; 0x34
   18894:	b	1869c <__assert_fail@plt+0x6af8>
   18898:	ldr	r3, [sp, #32]
   1889c:	cmp	r3, #3
   188a0:	bne	18bc0 <__assert_fail@plt+0x701c>
   188a4:	mov	r3, #4
   188a8:	strh	r3, [r9, #56]	; 0x38
   188ac:	bl	119b8 <__errno_location@plt>
   188b0:	ldr	r3, [r0]
   188b4:	str	r3, [r9, #32]
   188b8:	b	18bc0 <__assert_fail@plt+0x701c>
   188bc:	mov	r2, #0
   188c0:	mov	r1, r9
   188c4:	mov	r0, r5
   188c8:	bl	17be4 <__assert_fail@plt+0x6040>
   188cc:	strh	r0, [r9, #56]	; 0x38
   188d0:	b	187e0 <__assert_fail@plt+0x6c3c>
   188d4:	mov	r1, r9
   188d8:	mov	r0, r5
   188dc:	bl	18574 <__assert_fail@plt+0x69d0>
   188e0:	mov	r2, #0
   188e4:	mov	r1, r9
   188e8:	mov	r0, r5
   188ec:	bl	17be4 <__assert_fail@plt+0x6040>
   188f0:	mov	r1, r9
   188f4:	mov	r0, r5
   188f8:	bl	181a4 <__assert_fail@plt+0x6600>
   188fc:	cmp	r0, #0
   18900:	bne	187e0 <__assert_fail@plt+0x6c3c>
   18904:	bl	119b8 <__errno_location@plt>
   18908:	mov	r3, #12
   1890c:	str	r3, [r0]
   18910:	ldr	r3, [sp, #40]	; 0x28
   18914:	str	r3, [sp, #4]
   18918:	b	18bc0 <__assert_fail@plt+0x701c>
   1891c:	ldr	r3, [r9, #84]	; 0x54
   18920:	cmp	r3, #2
   18924:	bne	18814 <__assert_fail@plt+0x6c70>
   18928:	ldr	r1, [sp, #60]	; 0x3c
   1892c:	mov	r0, r9
   18930:	bl	18078 <__assert_fail@plt+0x64d4>
   18934:	movw	r3, #26985	; 0x6969
   18938:	cmp	r0, r3
   1893c:	beq	1899c <__assert_fail@plt+0x6df8>
   18940:	bgt	18980 <__assert_fail@plt+0x6ddc>
   18944:	movw	r3, #19778	; 0x4d42
   18948:	movt	r3, #65363	; 0xff53
   1894c:	cmp	r0, r3
   18950:	beq	1899c <__assert_fail@plt+0x6df8>
   18954:	cmp	r0, #0
   18958:	beq	1899c <__assert_fail@plt+0x6df8>
   1895c:	ldr	r3, [sp, #32]
   18960:	cmp	r3, #3
   18964:	moveq	r4, #1
   18968:	movne	r4, #0
   1896c:	movne	r3, #0
   18970:	strne	r3, [sp, #52]	; 0x34
   18974:	bne	1869c <__assert_fail@plt+0x6af8>
   18978:	mov	r6, #0
   1897c:	b	18828 <__assert_fail@plt+0x6c84>
   18980:	movw	r3, #40864	; 0x9fa0
   18984:	cmp	r0, r3
   18988:	beq	1899c <__assert_fail@plt+0x6df8>
   1898c:	movw	r3, #16719	; 0x414f
   18990:	movt	r3, #21318	; 0x5346
   18994:	cmp	r0, r3
   18998:	bne	1895c <__assert_fail@plt+0x6db8>
   1899c:	ldr	r3, [sp, #32]
   189a0:	cmp	r3, #3
   189a4:	movne	r4, #0
   189a8:	moveq	r4, #1
   189ac:	mov	r6, #1
   189b0:	b	18828 <__assert_fail@plt+0x6c84>
   189b4:	mov	r2, #3
   189b8:	movw	r1, #1030	; 0x406
   189bc:	ldr	r0, [sp, #60]	; 0x3c
   189c0:	bl	2fc74 <__assert_fail@plt+0x1e0d0>
   189c4:	str	r0, [sp, #60]	; 0x3c
   189c8:	b	18834 <__assert_fail@plt+0x6c90>
   189cc:	mov	r3, #0
   189d0:	mov	r1, r9
   189d4:	mov	r0, r5
   189d8:	bl	18368 <__assert_fail@plt+0x67c4>
   189dc:	cmp	r0, #0
   189e0:	moveq	r3, #1
   189e4:	streq	r3, [sp, #52]	; 0x34
   189e8:	beq	1869c <__assert_fail@plt+0x6af8>
   189ec:	b	18840 <__assert_fail@plt+0x6c9c>
   189f0:	bl	11b80 <close@plt>
   189f4:	b	18888 <__assert_fail@plt+0x6ce4>
   189f8:	mov	r3, #0
   189fc:	str	r3, [sp, #52]	; 0x34
   18a00:	b	1869c <__assert_fail@plt+0x6af8>
   18a04:	ldr	r3, [sp, #8]
   18a08:	ldr	r3, [r3]
   18a0c:	cmp	r3, #0
   18a10:	beq	18a30 <__assert_fail@plt+0x6e8c>
   18a14:	str	r3, [r9, #32]
   18a18:	ldr	r3, [sp, #40]	; 0x28
   18a1c:	orr	r3, r3, r8
   18a20:	cmp	r3, #0
   18a24:	movne	r3, #7
   18a28:	moveq	r3, #4
   18a2c:	strh	r3, [r9, #56]	; 0x38
   18a30:	ldr	r0, [r9, #12]
   18a34:	cmp	r0, #0
   18a38:	beq	18a48 <__assert_fail@plt+0x6ea4>
   18a3c:	bl	11b98 <closedir@plt>
   18a40:	mov	r3, #0
   18a44:	str	r3, [r9, #12]
   18a48:	ldr	r3, [sp, #24]
   18a4c:	cmp	r3, #0
   18a50:	bne	18f10 <__assert_fail@plt+0x736c>
   18a54:	ldr	r3, [r5, #48]	; 0x30
   18a58:	tst	r3, #4
   18a5c:	beq	18a88 <__assert_fail@plt+0x6ee4>
   18a60:	ldr	r3, [r5, #36]	; 0x24
   18a64:	cmp	r8, #0
   18a68:	cmpne	r3, sl
   18a6c:	bne	18a7c <__assert_fail@plt+0x6ed8>
   18a70:	ldr	r3, [sp, #20]
   18a74:	sub	r3, r3, #1
   18a78:	str	r3, [sp, #20]
   18a7c:	mov	r3, #0
   18a80:	ldr	r2, [sp, #20]
   18a84:	strb	r3, [r2]
   18a88:	ldr	r3, [sp, #52]	; 0x34
   18a8c:	ldr	r2, [sp, #40]	; 0x28
   18a90:	cmp	r2, #0
   18a94:	movne	r3, #0
   18a98:	cmp	r3, #0
   18a9c:	beq	18ad4 <__assert_fail@plt+0x6f30>
   18aa0:	ldr	r3, [sp, #32]
   18aa4:	cmp	r8, #0
   18aa8:	cmpne	r3, #1
   18aac:	bne	18adc <__assert_fail@plt+0x6f38>
   18ab0:	ldr	r3, [r9, #48]	; 0x30
   18ab4:	cmp	r3, #0
   18ab8:	bne	18fa0 <__assert_fail@plt+0x73fc>
   18abc:	mov	r0, r5
   18ac0:	bl	18304 <__assert_fail@plt+0x6760>
   18ac4:	adds	r0, r0, #0
   18ac8:	movne	r0, #1
   18acc:	cmp	r0, #0
   18ad0:	bne	18fc4 <__assert_fail@plt+0x7420>
   18ad4:	cmp	r8, #0
   18ad8:	beq	18fec <__assert_fail@plt+0x7448>
   18adc:	ldr	r3, [sp, #36]	; 0x24
   18ae0:	cmp	r3, #0
   18ae4:	bne	19024 <__assert_fail@plt+0x7480>
   18ae8:	ldr	r3, [r5, #44]	; 0x2c
   18aec:	cmp	r3, #0
   18af0:	cmpne	r8, #1
   18af4:	bls	18bc0 <__assert_fail@plt+0x701c>
   18af8:	mov	r2, r8
   18afc:	ldr	r1, [sp, #4]
   18b00:	mov	r0, r5
   18b04:	bl	17d54 <__assert_fail@plt+0x61b0>
   18b08:	str	r0, [sp, #4]
   18b0c:	b	18bc0 <__assert_fail@plt+0x701c>
   18b10:	ldrb	r3, [r7, #20]
   18b14:	cmp	r3, #0
   18b18:	beq	18f08 <__assert_fail@plt+0x7364>
   18b1c:	ldrh	r3, [r7, #20]
   18b20:	cmp	r3, #46	; 0x2e
   18b24:	bne	18d54 <__assert_fail@plt+0x71b0>
   18b28:	ldr	r4, [sp]
   18b2c:	b	18d0c <__assert_fail@plt+0x7168>
   18b30:	ldr	fp, [r5, #24]
   18b34:	ldr	r3, [sp, #28]
   18b38:	add	r1, r3, #2
   18b3c:	add	r1, r1, r6
   18b40:	mov	r0, r5
   18b44:	bl	17b60 <__assert_fail@plt+0x5fbc>
   18b48:	cmp	r0, #0
   18b4c:	beq	18b7c <__assert_fail@plt+0x6fd8>
   18b50:	ldr	r3, [r5, #24]
   18b54:	cmp	r3, fp
   18b58:	beq	18be0 <__assert_fail@plt+0x703c>
   18b5c:	ldr	r2, [r5, #48]	; 0x30
   18b60:	tst	r2, #4
   18b64:	addne	r3, r3, sl
   18b68:	strne	r3, [sp, #20]
   18b6c:	ldr	fp, [r5, #36]	; 0x24
   18b70:	sub	fp, fp, sl
   18b74:	str	r0, [sp, #24]
   18b78:	b	18d84 <__assert_fail@plt+0x71e0>
   18b7c:	ldr	r7, [sp, #8]
   18b80:	ldr	r6, [r7]
   18b84:	mov	r0, r4
   18b88:	bl	17750 <__assert_fail@plt+0x5bac>
   18b8c:	ldr	r0, [sp, #4]
   18b90:	bl	17fa8 <__assert_fail@plt+0x6404>
   18b94:	ldr	r0, [r9, #12]
   18b98:	bl	11b98 <closedir@plt>
   18b9c:	mov	r2, #0
   18ba0:	str	r2, [r9, #12]
   18ba4:	mov	r3, #7
   18ba8:	strh	r3, [r9, #56]	; 0x38
   18bac:	ldr	r3, [r5, #48]	; 0x30
   18bb0:	orr	r3, r3, #8192	; 0x2000
   18bb4:	str	r3, [r5, #48]	; 0x30
   18bb8:	str	r6, [r7]
   18bbc:	str	r2, [sp, #4]
   18bc0:	ldr	r0, [sp, #4]
   18bc4:	add	sp, sp, #68	; 0x44
   18bc8:	ldrd	r4, [sp]
   18bcc:	ldrd	r6, [sp, #8]
   18bd0:	ldrd	r8, [sp, #16]
   18bd4:	ldrd	sl, [sp, #24]
   18bd8:	add	sp, sp, #32
   18bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   18be0:	ldr	r0, [sp, #24]
   18be4:	b	18b6c <__assert_fail@plt+0x6fc8>
   18be8:	mov	r0, r4
   18bec:	bl	17750 <__assert_fail@plt+0x5bac>
   18bf0:	ldr	r0, [sp, #4]
   18bf4:	bl	17fa8 <__assert_fail@plt+0x6404>
   18bf8:	ldr	r0, [r9, #12]
   18bfc:	bl	11b98 <closedir@plt>
   18c00:	mov	r2, #0
   18c04:	str	r2, [r9, #12]
   18c08:	mov	r3, #7
   18c0c:	strh	r3, [r9, #56]	; 0x38
   18c10:	ldr	r3, [r5, #48]	; 0x30
   18c14:	orr	r3, r3, #8192	; 0x2000
   18c18:	str	r3, [r5, #48]	; 0x30
   18c1c:	mov	r3, #36	; 0x24
   18c20:	ldr	r1, [sp, #8]
   18c24:	str	r3, [r1]
   18c28:	str	r2, [sp, #4]
   18c2c:	b	18bc0 <__assert_fail@plt+0x701c>
   18c30:	ldr	r3, [r4, #28]
   18c34:	str	r3, [r4, #24]
   18c38:	ldr	r2, [r4, #52]	; 0x34
   18c3c:	add	r2, r2, #1
   18c40:	add	r1, r4, #168	; 0xa8
   18c44:	ldr	r0, [sp, #20]
   18c48:	bl	11748 <memmove@plt>
   18c4c:	b	18dbc <__assert_fail@plt+0x7218>
   18c50:	ubfx	r3, r3, #4, #1
   18c54:	cmp	r2, #10
   18c58:	orrne	r3, r3, #1
   18c5c:	cmp	r3, #0
   18c60:	beq	18dec <__assert_fail@plt+0x7248>
   18c64:	mov	r2, #11
   18c68:	strh	r2, [r4, #56]	; 0x38
   18c6c:	ldrb	r2, [r7, #18]
   18c70:	sub	r2, r2, #1
   18c74:	cmp	r2, #11
   18c78:	ldrls	pc, [pc, r2, lsl #2]
   18c7c:	b	18e78 <__assert_fail@plt+0x72d4>
   18c80:	andeq	r8, r1, r8, asr #28
   18c84:			; <UNDEFINED> instruction: 0x00018cb4
   18c88:	andeq	r8, r1, r8, ror lr
   18c8c:	andeq	r8, r1, ip, lsr lr
   18c90:	andeq	r8, r1, r8, ror lr
   18c94:	andeq	r9, r1, r0, asr r0
   18c98:	andeq	r8, r1, r8, ror lr
   18c9c:	andeq	r8, r1, r0, ror #28
   18ca0:	andeq	r8, r1, r8, ror lr
   18ca4:	andeq	r8, r1, r4, asr lr
   18ca8:	andeq	r8, r1, r8, ror lr
   18cac:	andeq	r8, r1, ip, ror #28
   18cb0:	mov	r3, #0
   18cb4:	mov	r2, #8192	; 0x2000
   18cb8:	str	r2, [r4, #80]	; 0x50
   18cbc:	cmp	r3, #0
   18cc0:	movne	r2, #1
   18cc4:	moveq	r2, #2
   18cc8:	mov	r3, #0
   18ccc:	str	r2, [r4, #112]	; 0x70
   18cd0:	str	r3, [r4, #116]	; 0x74
   18cd4:	mov	r3, #0
   18cd8:	str	r3, [r4, #8]
   18cdc:	ldr	r3, [sp, #4]
   18ce0:	cmp	r3, #0
   18ce4:	ldrne	r3, [sp]
   18ce8:	strne	r4, [r3, #8]
   18cec:	streq	r4, [sp, #4]
   18cf0:	movw	r3, #10000	; 0x2710
   18cf4:	cmp	r8, r3
   18cf8:	beq	18e98 <__assert_fail@plt+0x72f4>
   18cfc:	add	r8, r8, #1
   18d00:	ldr	r3, [sp, #16]
   18d04:	cmp	r8, r3
   18d08:	bcs	18a48 <__assert_fail@plt+0x6ea4>
   18d0c:	str	r4, [sp]
   18d10:	ldr	r3, [r9, #12]
   18d14:	cmp	r3, #0
   18d18:	beq	18a48 <__assert_fail@plt+0x6ea4>
   18d1c:	bl	119b8 <__errno_location@plt>
   18d20:	str	r0, [sp, #8]
   18d24:	mov	r3, #0
   18d28:	str	r3, [r0]
   18d2c:	ldr	r0, [r9, #12]
   18d30:	bl	11ab4 <readdir64@plt>
   18d34:	subs	r7, r0, #0
   18d38:	beq	18a04 <__assert_fail@plt+0x6e60>
   18d3c:	ldr	r3, [r5, #48]	; 0x30
   18d40:	tst	r3, #32
   18d44:	bne	18d54 <__assert_fail@plt+0x71b0>
   18d48:	ldrb	r3, [r7, #19]
   18d4c:	cmp	r3, #46	; 0x2e
   18d50:	beq	18b10 <__assert_fail@plt+0x6f6c>
   18d54:	add	r4, r7, #19
   18d58:	mov	r0, r4
   18d5c:	bl	11988 <strlen@plt>
   18d60:	mov	r6, r0
   18d64:	mov	r2, r0
   18d68:	mov	r1, r4
   18d6c:	mov	r0, r5
   18d70:	bl	17e44 <__assert_fail@plt+0x62a0>
   18d74:	subs	r4, r0, #0
   18d78:	beq	18b7c <__assert_fail@plt+0x6fd8>
   18d7c:	cmp	fp, r6
   18d80:	bls	18b30 <__assert_fail@plt+0x6f8c>
   18d84:	adds	r6, sl, r6
   18d88:	bcs	18be8 <__assert_fail@plt+0x7044>
   18d8c:	ldr	r3, [sp, #12]
   18d90:	str	r3, [r4, #48]	; 0x30
   18d94:	ldr	r3, [r5]
   18d98:	str	r3, [r4, #4]
   18d9c:	str	r6, [r4, #40]	; 0x28
   18da0:	ldrd	r2, [r7]
   18da4:	strd	r2, [r4, #160]	; 0xa0
   18da8:	ldr	r3, [r5, #48]	; 0x30
   18dac:	tst	r3, #4
   18db0:	addeq	r3, r4, #168	; 0xa8
   18db4:	streq	r3, [r4, #24]
   18db8:	bne	18c30 <__assert_fail@plt+0x708c>
   18dbc:	ldr	r3, [r5, #44]	; 0x2c
   18dc0:	cmp	r3, #0
   18dc4:	beq	18dd4 <__assert_fail@plt+0x7230>
   18dc8:	ldr	r3, [r5, #48]	; 0x30
   18dcc:	tst	r3, #1024	; 0x400
   18dd0:	beq	18e80 <__assert_fail@plt+0x72dc>
   18dd4:	ldr	r3, [r5, #48]	; 0x30
   18dd8:	tst	r3, #8
   18ddc:	beq	18dec <__assert_fail@plt+0x7248>
   18de0:	ldrb	r2, [r7, #18]
   18de4:	tst	r2, #251	; 0xfb
   18de8:	bne	18c50 <__assert_fail@plt+0x70ac>
   18dec:	mov	r3, #11
   18df0:	strh	r3, [r4, #56]	; 0x38
   18df4:	ldrb	r3, [r7, #18]
   18df8:	sub	r3, r3, #1
   18dfc:	cmp	r3, #11
   18e00:	ldrls	pc, [pc, r3, lsl #2]
   18e04:	b	18e74 <__assert_fail@plt+0x72d0>
   18e08:	andeq	r8, r1, r4, asr #28
   18e0c:			; <UNDEFINED> instruction: 0x00018cb0
   18e10:	andeq	r8, r1, r4, ror lr
   18e14:	andeq	r8, r1, r8, lsr lr
   18e18:	andeq	r8, r1, r4, ror lr
   18e1c:	andeq	r9, r1, r4, rrx
   18e20:	andeq	r8, r1, r4, ror lr
   18e24:	andeq	r8, r1, ip, asr lr
   18e28:	andeq	r8, r1, r4, ror lr
   18e2c:	andeq	r8, r1, r0, asr lr
   18e30:	andeq	r8, r1, r4, ror lr
   18e34:	andeq	r8, r1, r8, ror #28
   18e38:	mov	r3, #0
   18e3c:	mov	r2, #16384	; 0x4000
   18e40:	b	18cb8 <__assert_fail@plt+0x7114>
   18e44:	mov	r3, #0
   18e48:	mov	r2, #4096	; 0x1000
   18e4c:	b	18cb8 <__assert_fail@plt+0x7114>
   18e50:	mov	r3, #0
   18e54:	mov	r2, #40960	; 0xa000
   18e58:	b	18cb8 <__assert_fail@plt+0x7114>
   18e5c:	mov	r3, #0
   18e60:	mov	r2, #32768	; 0x8000
   18e64:	b	18cb8 <__assert_fail@plt+0x7114>
   18e68:	mov	r3, #0
   18e6c:	mov	r2, #49152	; 0xc000
   18e70:	b	18cb8 <__assert_fail@plt+0x7114>
   18e74:	mov	r3, #0
   18e78:	mov	r2, #0
   18e7c:	b	18cb8 <__assert_fail@plt+0x7114>
   18e80:	mov	r2, #0
   18e84:	mov	r1, r4
   18e88:	mov	r0, r5
   18e8c:	bl	17be4 <__assert_fail@plt+0x6040>
   18e90:	strh	r0, [r4, #56]	; 0x38
   18e94:	b	18cd4 <__assert_fail@plt+0x7130>
   18e98:	ldr	r3, [r5, #44]	; 0x2c
   18e9c:	cmp	r3, #0
   18ea0:	beq	18eac <__assert_fail@plt+0x7308>
   18ea4:	movw	r8, #10001	; 0x2711
   18ea8:	b	18d0c <__assert_fail@plt+0x7168>
   18eac:	ldr	r1, [sp, #60]	; 0x3c
   18eb0:	mov	r0, r9
   18eb4:	bl	18078 <__assert_fail@plt+0x64d4>
   18eb8:	movw	r3, #26985	; 0x6969
   18ebc:	cmp	r0, r3
   18ec0:	beq	18ef0 <__assert_fail@plt+0x734c>
   18ec4:	ldr	r3, [sp, #44]	; 0x2c
   18ec8:	cmp	r0, r3
   18ecc:	beq	18efc <__assert_fail@plt+0x7358>
   18ed0:	ldr	r3, [sp, #48]	; 0x30
   18ed4:	cmp	r0, r3
   18ed8:	moveq	r3, #0
   18edc:	streq	r3, [sp, #36]	; 0x24
   18ee0:	beq	18cfc <__assert_fail@plt+0x7158>
   18ee4:	mov	r3, #1
   18ee8:	str	r3, [sp, #36]	; 0x24
   18eec:	b	18ea4 <__assert_fail@plt+0x7300>
   18ef0:	mov	r3, #0
   18ef4:	str	r3, [sp, #36]	; 0x24
   18ef8:	b	18cfc <__assert_fail@plt+0x7158>
   18efc:	mov	r3, #0
   18f00:	str	r3, [sp, #36]	; 0x24
   18f04:	b	18cfc <__assert_fail@plt+0x7158>
   18f08:	ldr	r4, [sp]
   18f0c:	b	18d0c <__assert_fail@plt+0x7168>
   18f10:	ldr	r1, [r5, #24]
   18f14:	ldr	r3, [r5, #4]
   18f18:	cmp	r3, #0
   18f1c:	bne	18f38 <__assert_fail@plt+0x7394>
   18f20:	ldr	r3, [sp, #4]
   18f24:	b	18f70 <__assert_fail@plt+0x73cc>
   18f28:	str	r1, [r3, #28]
   18f2c:	ldr	r3, [r3, #8]
   18f30:	cmp	r3, #0
   18f34:	beq	18f20 <__assert_fail@plt+0x737c>
   18f38:	ldr	r2, [r3, #24]
   18f3c:	add	r0, r3, #168	; 0xa8
   18f40:	cmp	r2, r0
   18f44:	beq	18f28 <__assert_fail@plt+0x7384>
   18f48:	ldr	r0, [r3, #28]
   18f4c:	sub	r2, r2, r0
   18f50:	add	r2, r1, r2
   18f54:	str	r2, [r3, #24]
   18f58:	b	18f28 <__assert_fail@plt+0x7384>
   18f5c:	str	r1, [r3, #28]
   18f60:	ldr	r2, [r3, #8]
   18f64:	cmp	r2, #0
   18f68:	ldreq	r2, [r3, #4]
   18f6c:	mov	r3, r2
   18f70:	ldr	r2, [r3, #48]	; 0x30
   18f74:	cmp	r2, #0
   18f78:	blt	18a54 <__assert_fail@plt+0x6eb0>
   18f7c:	ldr	r2, [r3, #24]
   18f80:	add	r0, r3, #168	; 0xa8
   18f84:	cmp	r2, r0
   18f88:	beq	18f5c <__assert_fail@plt+0x73b8>
   18f8c:	ldr	r0, [r3, #28]
   18f90:	sub	r2, r2, r0
   18f94:	add	r2, r1, r2
   18f98:	str	r2, [r3, #24]
   18f9c:	b	18f5c <__assert_fail@plt+0x73b8>
   18fa0:	movw	r3, #8372	; 0x20b4
   18fa4:	movt	r3, #3
   18fa8:	mvn	r2, #0
   18fac:	ldr	r1, [r9, #4]
   18fb0:	mov	r0, r5
   18fb4:	bl	18368 <__assert_fail@plt+0x67c4>
   18fb8:	adds	r0, r0, #0
   18fbc:	movne	r0, #1
   18fc0:	b	18acc <__assert_fail@plt+0x6f28>
   18fc4:	mov	r3, #7
   18fc8:	strh	r3, [r9, #56]	; 0x38
   18fcc:	ldr	r3, [r5, #48]	; 0x30
   18fd0:	orr	r3, r3, #8192	; 0x2000
   18fd4:	str	r3, [r5, #48]	; 0x30
   18fd8:	ldr	r0, [sp, #4]
   18fdc:	bl	17fa8 <__assert_fail@plt+0x6404>
   18fe0:	mov	r3, #0
   18fe4:	str	r3, [sp, #4]
   18fe8:	b	18bc0 <__assert_fail@plt+0x701c>
   18fec:	ldr	r3, [sp, #32]
   18ff0:	cmp	r3, #3
   18ff4:	beq	1900c <__assert_fail@plt+0x7468>
   18ff8:	ldr	r0, [sp, #4]
   18ffc:	bl	17fa8 <__assert_fail@plt+0x6404>
   19000:	mov	r3, #0
   19004:	str	r3, [sp, #4]
   19008:	b	18bc0 <__assert_fail@plt+0x701c>
   1900c:	ldrh	r3, [r9, #56]	; 0x38
   19010:	cmp	r3, #7
   19014:	cmpne	r3, #4
   19018:	movne	r3, #6
   1901c:	strhne	r3, [r9, #56]	; 0x38
   19020:	b	18ff8 <__assert_fail@plt+0x7454>
   19024:	movw	r3, #31524	; 0x7b24
   19028:	movt	r3, #1
   1902c:	str	r3, [r5, #44]	; 0x2c
   19030:	mov	r2, r8
   19034:	ldr	r1, [sp, #4]
   19038:	mov	r0, r5
   1903c:	bl	17d54 <__assert_fail@plt+0x61b0>
   19040:	str	r0, [sp, #4]
   19044:	mov	r3, #0
   19048:	str	r3, [r5, #44]	; 0x2c
   1904c:	b	18bc0 <__assert_fail@plt+0x701c>
   19050:	mov	r3, #24576	; 0x6000
   19054:	str	r3, [r4, #80]	; 0x50
   19058:	mov	r2, #1
   1905c:	mov	r3, #0
   19060:	b	18ccc <__assert_fail@plt+0x7128>
   19064:	mov	r3, #24576	; 0x6000
   19068:	str	r3, [r4, #80]	; 0x50
   1906c:	mov	r2, #2
   19070:	mov	r3, #0
   19074:	b	18ccc <__assert_fail@plt+0x7128>
   19078:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1907c:	strd	r6, [sp, #8]
   19080:	strd	r8, [sp, #16]
   19084:	strd	sl, [sp, #24]
   19088:	str	lr, [sp, #32]
   1908c:	sub	sp, sp, #20
   19090:	bic	r3, r1, #4080	; 0xff0
   19094:	bic	r3, r3, #15
   19098:	cmp	r3, #0
   1909c:	bne	1917c <__assert_fail@plt+0x75d8>
   190a0:	mov	r6, r0
   190a4:	mov	r9, r1
   190a8:	mov	sl, r2
   190ac:	and	r3, r1, #516	; 0x204
   190b0:	cmp	r3, #516	; 0x204
   190b4:	beq	19190 <__assert_fail@plt+0x75ec>
   190b8:	tst	r1, #18
   190bc:	beq	191a4 <__assert_fail@plt+0x7600>
   190c0:	mov	r1, #96	; 0x60
   190c4:	mov	r0, #1
   190c8:	bl	2ef9c <__assert_fail@plt+0x1d3f8>
   190cc:	subs	r5, r0, #0
   190d0:	beq	193cc <__assert_fail@plt+0x7828>
   190d4:	str	sl, [r5, #44]	; 0x2c
   190d8:	tst	r9, #2
   190dc:	streq	r9, [r5, #48]	; 0x30
   190e0:	bicne	r3, r9, #512	; 0x200
   190e4:	orrne	r3, r3, #4
   190e8:	strne	r3, [r5, #48]	; 0x30
   190ec:	mvn	r3, #99	; 0x63
   190f0:	str	r3, [r5, #32]
   190f4:	ldr	r0, [r6]
   190f8:	cmp	r0, #0
   190fc:	beq	191b8 <__assert_fail@plt+0x7614>
   19100:	mov	r7, r6
   19104:	mov	r4, #0
   19108:	bl	11988 <strlen@plt>
   1910c:	cmp	r4, r0
   19110:	movcc	r4, r0
   19114:	ldr	r0, [r7, #4]!
   19118:	cmp	r0, #0
   1911c:	bne	19108 <__assert_fail@plt+0x7564>
   19120:	add	r1, r4, #1
   19124:	cmp	r1, #4096	; 0x1000
   19128:	movcc	r1, #4096	; 0x1000
   1912c:	mov	r0, r5
   19130:	bl	17b60 <__assert_fail@plt+0x5fbc>
   19134:	cmp	r0, #0
   19138:	beq	193c0 <__assert_fail@plt+0x781c>
   1913c:	ldr	fp, [r6]
   19140:	cmp	fp, #0
   19144:	beq	193ec <__assert_fail@plt+0x7848>
   19148:	mov	r2, #0
   1914c:	movw	r1, #8476	; 0x211c
   19150:	movt	r1, #3
   19154:	mov	r0, r5
   19158:	bl	17e44 <__assert_fail@plt+0x62a0>
   1915c:	subs	fp, r0, #0
   19160:	beq	193b8 <__assert_fail@plt+0x7814>
   19164:	mvn	r3, #0
   19168:	str	r3, [fp, #48]	; 0x30
   1916c:	cmp	sl, #0
   19170:	moveq	r3, #1
   19174:	bne	193f4 <__assert_fail@plt+0x7850>
   19178:	b	193fc <__assert_fail@plt+0x7858>
   1917c:	bl	119b8 <__errno_location@plt>
   19180:	mov	r3, #22
   19184:	str	r3, [r0]
   19188:	mov	r5, #0
   1918c:	b	193cc <__assert_fail@plt+0x7828>
   19190:	bl	119b8 <__errno_location@plt>
   19194:	mov	r3, #22
   19198:	str	r3, [r0]
   1919c:	mov	r5, #0
   191a0:	b	193cc <__assert_fail@plt+0x7828>
   191a4:	bl	119b8 <__errno_location@plt>
   191a8:	mov	r3, #22
   191ac:	str	r3, [r0]
   191b0:	mov	r5, #0
   191b4:	b	193cc <__assert_fail@plt+0x7828>
   191b8:	mov	r4, #0
   191bc:	b	19120 <__assert_fail@plt+0x757c>
   191c0:	sub	r1, r0, #1
   191c4:	ldrb	r3, [r4, r1]
   191c8:	cmp	r3, #47	; 0x2f
   191cc:	bne	19258 <__assert_fail@plt+0x76b4>
   191d0:	sub	r0, r0, #2
   191d4:	add	r3, r4, r0
   191d8:	ldrb	r0, [r4, r0]
   191dc:	cmp	r0, #47	; 0x2f
   191e0:	moveq	r2, r1
   191e4:	bne	19258 <__assert_fail@plt+0x76b4>
   191e8:	ldrb	r1, [r3, #-1]!
   191ec:	cmp	r1, #47	; 0x2f
   191f0:	bne	19258 <__assert_fail@plt+0x76b4>
   191f4:	sub	r2, r2, #1
   191f8:	cmp	r2, #1
   191fc:	bhi	191e8 <__assert_fail@plt+0x7644>
   19200:	b	19258 <__assert_fail@plt+0x76b4>
   19204:	mov	r2, r9
   19208:	mov	r1, r4
   1920c:	ldr	r0, [sp, #4]
   19210:	bl	17be4 <__assert_fail@plt+0x6040>
   19214:	strh	r0, [r4, #56]	; 0x38
   19218:	cmp	sl, #0
   1921c:	beq	192c0 <__assert_fail@plt+0x771c>
   19220:	str	r7, [r4, #8]
   19224:	mov	r7, r4
   19228:	add	r8, r8, #1
   1922c:	ldr	r4, [r6, #4]!
   19230:	cmp	r4, #0
   19234:	beq	192d8 <__assert_fail@plt+0x7734>
   19238:	mov	r0, r4
   1923c:	bl	11988 <strlen@plt>
   19240:	mov	r2, r0
   19244:	cmp	r0, #2
   19248:	movls	r3, #0
   1924c:	andhi	r3, r5, #1
   19250:	cmp	r3, #0
   19254:	bne	191c0 <__assert_fail@plt+0x761c>
   19258:	mov	r1, r4
   1925c:	ldr	r0, [sp, #4]
   19260:	bl	17e44 <__assert_fail@plt+0x62a0>
   19264:	subs	r4, r0, #0
   19268:	beq	193a4 <__assert_fail@plt+0x7800>
   1926c:	str	r9, [r4, #48]	; 0x30
   19270:	str	fp, [r4, #4]
   19274:	add	r3, r4, #168	; 0xa8
   19278:	str	r3, [r4, #24]
   1927c:	ldr	r3, [sp, #8]
   19280:	cmp	r7, #0
   19284:	moveq	r3, #0
   19288:	cmp	r3, #0
   1928c:	beq	19204 <__assert_fail@plt+0x7660>
   19290:	mov	r3, #11
   19294:	strh	r3, [r4, #56]	; 0x38
   19298:	mov	r2, #2
   1929c:	mov	r3, #0
   192a0:	strd	r2, [r4, #112]	; 0x70
   192a4:	cmp	sl, #0
   192a8:	bne	19220 <__assert_fail@plt+0x767c>
   192ac:	str	r9, [r4, #8]
   192b0:	ldr	r3, [sp, #12]
   192b4:	str	r4, [r3, #8]
   192b8:	str	r4, [sp, #12]
   192bc:	b	19228 <__assert_fail@plt+0x7684>
   192c0:	str	r9, [r4, #8]
   192c4:	cmp	r7, #0
   192c8:	streq	r4, [sp, #12]
   192cc:	moveq	r7, r4
   192d0:	beq	19228 <__assert_fail@plt+0x7684>
   192d4:	b	192b0 <__assert_fail@plt+0x770c>
   192d8:	ldr	r5, [sp, #4]
   192dc:	cmp	sl, #0
   192e0:	cmpne	r8, #1
   192e4:	bhi	19350 <__assert_fail@plt+0x77ac>
   192e8:	mov	r2, #0
   192ec:	movw	r1, #8476	; 0x211c
   192f0:	movt	r1, #3
   192f4:	mov	r0, r5
   192f8:	bl	17e44 <__assert_fail@plt+0x62a0>
   192fc:	str	r0, [r5]
   19300:	cmp	r0, #0
   19304:	beq	193a8 <__assert_fail@plt+0x7804>
   19308:	str	r7, [r0, #8]
   1930c:	ldr	r3, [r5]
   19310:	mov	r2, #9
   19314:	strh	r2, [r3, #56]	; 0x38
   19318:	ldr	r3, [r5]
   1931c:	mov	r2, #1
   19320:	str	r2, [r3, #48]	; 0x30
   19324:	mov	r0, r5
   19328:	bl	17ed4 <__assert_fail@plt+0x6330>
   1932c:	cmp	r0, #0
   19330:	beq	193a8 <__assert_fail@plt+0x7804>
   19334:	ldr	r3, [r5, #48]	; 0x30
   19338:	tst	r3, #516	; 0x204
   1933c:	beq	19378 <__assert_fail@plt+0x77d4>
   19340:	mvn	r1, #0
   19344:	add	r0, r5, #60	; 0x3c
   19348:	bl	1ba48 <__assert_fail@plt+0x9ea4>
   1934c:	b	193cc <__assert_fail@plt+0x7828>
   19350:	mov	r2, r8
   19354:	mov	r1, r7
   19358:	mov	r0, r5
   1935c:	bl	17d54 <__assert_fail@plt+0x61b0>
   19360:	mov	r7, r0
   19364:	b	192e8 <__assert_fail@plt+0x7744>
   19368:	mov	r7, r4
   1936c:	b	192e8 <__assert_fail@plt+0x7744>
   19370:	mov	r7, fp
   19374:	b	192e8 <__assert_fail@plt+0x7744>
   19378:	movw	r1, #6508	; 0x196c
   1937c:	movt	r1, #3
   19380:	mov	r0, r5
   19384:	bl	17f5c <__assert_fail@plt+0x63b8>
   19388:	str	r0, [r5, #28]
   1938c:	cmp	r0, #0
   19390:	bge	19340 <__assert_fail@plt+0x779c>
   19394:	ldr	r3, [r5, #48]	; 0x30
   19398:	orr	r3, r3, #4
   1939c:	str	r3, [r5, #48]	; 0x30
   193a0:	b	19340 <__assert_fail@plt+0x779c>
   193a4:	ldr	r5, [sp, #4]
   193a8:	mov	r0, r7
   193ac:	bl	17fa8 <__assert_fail@plt+0x6404>
   193b0:	mov	r0, fp
   193b4:	bl	17750 <__assert_fail@plt+0x5bac>
   193b8:	ldr	r0, [r5, #24]
   193bc:	bl	17750 <__assert_fail@plt+0x5bac>
   193c0:	mov	r0, r5
   193c4:	bl	17750 <__assert_fail@plt+0x5bac>
   193c8:	mov	r5, #0
   193cc:	mov	r0, r5
   193d0:	add	sp, sp, #20
   193d4:	ldrd	r4, [sp]
   193d8:	ldrd	r6, [sp, #8]
   193dc:	ldrd	r8, [sp, #16]
   193e0:	ldrd	sl, [sp, #24]
   193e4:	add	sp, sp, #32
   193e8:	pop	{pc}		; (ldr pc, [sp], #4)
   193ec:	cmp	sl, #0
   193f0:	beq	19370 <__assert_fail@plt+0x77cc>
   193f4:	ldr	r3, [r5, #48]	; 0x30
   193f8:	ubfx	r3, r3, #10, #1
   193fc:	str	r3, [sp, #8]
   19400:	ldr	r4, [r6]
   19404:	cmp	r4, #0
   19408:	beq	19368 <__assert_fail@plt+0x77c4>
   1940c:	mov	r3, #0
   19410:	mov	r7, r3
   19414:	str	r3, [sp, #12]
   19418:	mov	r8, r3
   1941c:	eor	r9, r9, #2048	; 0x800
   19420:	ubfx	r3, r9, #11, #1
   19424:	mov	r9, r7
   19428:	str	r5, [sp, #4]
   1942c:	mov	r5, r3
   19430:	b	19238 <__assert_fail@plt+0x7694>
   19434:	strd	r4, [sp, #-16]!
   19438:	str	r6, [sp, #8]
   1943c:	str	lr, [sp, #12]
   19440:	mov	r5, r0
   19444:	ldr	r0, [r0]
   19448:	cmp	r0, #0
   1944c:	beq	19484 <__assert_fail@plt+0x78e0>
   19450:	ldr	r3, [r0, #48]	; 0x30
   19454:	cmp	r3, #0
   19458:	blt	194d4 <__assert_fail@plt+0x7930>
   1945c:	ldr	r4, [r0, #8]
   19460:	cmp	r4, #0
   19464:	ldreq	r4, [r0, #4]
   19468:	bl	17750 <__assert_fail@plt+0x5bac>
   1946c:	mov	r0, r4
   19470:	ldr	r3, [r4, #48]	; 0x30
   19474:	cmp	r3, #0
   19478:	bge	1945c <__assert_fail@plt+0x78b8>
   1947c:	mov	r0, r4
   19480:	bl	17750 <__assert_fail@plt+0x5bac>
   19484:	ldr	r0, [r5, #4]
   19488:	cmp	r0, #0
   1948c:	beq	19494 <__assert_fail@plt+0x78f0>
   19490:	bl	17fa8 <__assert_fail@plt+0x6404>
   19494:	ldr	r0, [r5, #8]
   19498:	bl	17750 <__assert_fail@plt+0x5bac>
   1949c:	ldr	r0, [r5, #24]
   194a0:	bl	17750 <__assert_fail@plt+0x5bac>
   194a4:	ldr	r3, [r5, #48]	; 0x30
   194a8:	tst	r3, #512	; 0x200
   194ac:	beq	194dc <__assert_fail@plt+0x7938>
   194b0:	ldr	r0, [r5, #32]
   194b4:	cmp	r0, #0
   194b8:	blt	194e4 <__assert_fail@plt+0x7940>
   194bc:	bl	11b80 <close@plt>
   194c0:	cmp	r0, #0
   194c4:	beq	194e4 <__assert_fail@plt+0x7940>
   194c8:	bl	119b8 <__errno_location@plt>
   194cc:	ldr	r4, [r0]
   194d0:	b	19564 <__assert_fail@plt+0x79c0>
   194d4:	mov	r4, r0
   194d8:	b	1947c <__assert_fail@plt+0x78d8>
   194dc:	tst	r3, #4
   194e0:	beq	1952c <__assert_fail@plt+0x7988>
   194e4:	add	r0, r5, #60	; 0x3c
   194e8:	bl	18038 <__assert_fail@plt+0x6494>
   194ec:	ldr	r0, [r5, #52]	; 0x34
   194f0:	cmp	r0, #0
   194f4:	movne	r4, #0
   194f8:	beq	19598 <__assert_fail@plt+0x79f4>
   194fc:	bl	1a9a0 <__assert_fail@plt+0x8dfc>
   19500:	mov	r0, r5
   19504:	bl	17ff8 <__assert_fail@plt+0x6454>
   19508:	mov	r0, r5
   1950c:	bl	17750 <__assert_fail@plt+0x5bac>
   19510:	cmp	r4, #0
   19514:	bne	19588 <__assert_fail@plt+0x79e4>
   19518:	mov	r0, r4
   1951c:	ldrd	r4, [sp]
   19520:	ldr	r6, [sp, #8]
   19524:	add	sp, sp, #12
   19528:	pop	{pc}		; (ldr pc, [sp], #4)
   1952c:	ldr	r0, [r5, #28]
   19530:	bl	11ae4 <fchdir@plt>
   19534:	subs	r4, r0, #0
   19538:	beq	19544 <__assert_fail@plt+0x79a0>
   1953c:	bl	119b8 <__errno_location@plt>
   19540:	ldr	r4, [r0]
   19544:	ldr	r0, [r5, #28]
   19548:	bl	11b80 <close@plt>
   1954c:	adds	r0, r0, #0
   19550:	movne	r0, #1
   19554:	cmp	r4, #0
   19558:	movne	r0, #0
   1955c:	cmp	r0, #0
   19560:	bne	1957c <__assert_fail@plt+0x79d8>
   19564:	add	r0, r5, #60	; 0x3c
   19568:	bl	18038 <__assert_fail@plt+0x6494>
   1956c:	ldr	r0, [r5, #52]	; 0x34
   19570:	cmp	r0, #0
   19574:	bne	194fc <__assert_fail@plt+0x7958>
   19578:	b	19500 <__assert_fail@plt+0x795c>
   1957c:	bl	119b8 <__errno_location@plt>
   19580:	ldr	r4, [r0]
   19584:	b	19564 <__assert_fail@plt+0x79c0>
   19588:	bl	119b8 <__errno_location@plt>
   1958c:	str	r4, [r0]
   19590:	mvn	r4, #0
   19594:	b	19518 <__assert_fail@plt+0x7974>
   19598:	mov	r0, r5
   1959c:	bl	17ff8 <__assert_fail@plt+0x6454>
   195a0:	mov	r0, r5
   195a4:	bl	17750 <__assert_fail@plt+0x5bac>
   195a8:	mov	r4, #0
   195ac:	b	19518 <__assert_fail@plt+0x7974>
   195b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   195b4:	strd	r6, [sp, #8]
   195b8:	str	r8, [sp, #16]
   195bc:	str	lr, [sp, #20]
   195c0:	ldr	r5, [r0]
   195c4:	cmp	r5, #0
   195c8:	beq	19c28 <__assert_fail@plt+0x8084>
   195cc:	ldr	r3, [r0, #48]	; 0x30
   195d0:	tst	r3, #8192	; 0x2000
   195d4:	bne	19c24 <__assert_fail@plt+0x8080>
   195d8:	mov	r8, r0
   195dc:	ldrh	r3, [r5, #60]	; 0x3c
   195e0:	mov	r2, #3
   195e4:	strh	r2, [r5, #60]	; 0x3c
   195e8:	cmp	r3, #1
   195ec:	beq	19668 <__assert_fail@plt+0x7ac4>
   195f0:	cmp	r3, #2
   195f4:	beq	1967c <__assert_fail@plt+0x7ad8>
   195f8:	ldrh	r2, [r5, #56]	; 0x38
   195fc:	cmp	r2, #1
   19600:	bne	198fc <__assert_fail@plt+0x7d58>
   19604:	cmp	r3, #4
   19608:	beq	1962c <__assert_fail@plt+0x7a88>
   1960c:	ldr	r1, [r8, #48]	; 0x30
   19610:	tst	r1, #64	; 0x40
   19614:	beq	19710 <__assert_fail@plt+0x7b6c>
   19618:	ldrd	r6, [r5, #64]	; 0x40
   1961c:	ldrd	r2, [r8, #16]
   19620:	cmp	r7, r3
   19624:	cmpeq	r6, r2
   19628:	beq	19710 <__assert_fail@plt+0x7b6c>
   1962c:	ldrh	r3, [r5, #58]	; 0x3a
   19630:	tst	r3, #2
   19634:	bne	19704 <__assert_fail@plt+0x7b60>
   19638:	ldr	r0, [r8, #4]
   1963c:	cmp	r0, #0
   19640:	beq	19650 <__assert_fail@plt+0x7aac>
   19644:	bl	17fa8 <__assert_fail@plt+0x6404>
   19648:	mov	r3, #0
   1964c:	str	r3, [r8, #4]
   19650:	mov	r3, #6
   19654:	strh	r3, [r5, #56]	; 0x38
   19658:	mov	r1, r5
   1965c:	mov	r0, r8
   19660:	bl	18574 <__assert_fail@plt+0x69d0>
   19664:	b	19c28 <__assert_fail@plt+0x8084>
   19668:	mov	r2, #0
   1966c:	mov	r1, r5
   19670:	bl	17be4 <__assert_fail@plt+0x6040>
   19674:	strh	r0, [r5, #56]	; 0x38
   19678:	b	19c28 <__assert_fail@plt+0x8084>
   1967c:	ldrh	r2, [r5, #56]	; 0x38
   19680:	sub	r3, r2, #12
   19684:	uxth	r3, r3
   19688:	cmp	r3, #1
   1968c:	bls	1969c <__assert_fail@plt+0x7af8>
   19690:	cmp	r2, #1
   19694:	bne	198fc <__assert_fail@plt+0x7d58>
   19698:	b	1960c <__assert_fail@plt+0x7a68>
   1969c:	mov	r2, #1
   196a0:	mov	r1, r5
   196a4:	bl	17be4 <__assert_fail@plt+0x6040>
   196a8:	strh	r0, [r5, #56]	; 0x38
   196ac:	cmp	r0, #1
   196b0:	bne	1978c <__assert_fail@plt+0x7be8>
   196b4:	ldr	r3, [r8, #48]	; 0x30
   196b8:	tst	r3, #4
   196bc:	bne	1978c <__assert_fail@plt+0x7be8>
   196c0:	movw	r1, #6508	; 0x196c
   196c4:	movt	r1, #3
   196c8:	mov	r0, r8
   196cc:	bl	17f5c <__assert_fail@plt+0x63b8>
   196d0:	str	r0, [r5, #36]	; 0x24
   196d4:	cmp	r0, #0
   196d8:	blt	196ec <__assert_fail@plt+0x7b48>
   196dc:	ldrh	r3, [r5, #58]	; 0x3a
   196e0:	orr	r3, r3, #2
   196e4:	strh	r3, [r5, #58]	; 0x3a
   196e8:	b	1978c <__assert_fail@plt+0x7be8>
   196ec:	bl	119b8 <__errno_location@plt>
   196f0:	ldr	r3, [r0]
   196f4:	str	r3, [r5, #32]
   196f8:	mov	r3, #7
   196fc:	strh	r3, [r5, #56]	; 0x38
   19700:	b	1978c <__assert_fail@plt+0x7be8>
   19704:	ldr	r0, [r5, #36]	; 0x24
   19708:	bl	11b80 <close@plt>
   1970c:	b	19638 <__assert_fail@plt+0x7a94>
   19710:	ldr	r0, [r8, #4]
   19714:	cmp	r0, #0
   19718:	beq	197f4 <__assert_fail@plt+0x7c50>
   1971c:	tst	r1, #4096	; 0x1000
   19720:	bne	197e0 <__assert_fail@plt+0x7c3c>
   19724:	ldr	r3, [r5, #24]
   19728:	mvn	r2, #0
   1972c:	mov	r1, r5
   19730:	mov	r0, r8
   19734:	bl	18368 <__assert_fail@plt+0x67c4>
   19738:	cmp	r0, #0
   1973c:	bne	19848 <__assert_fail@plt+0x7ca4>
   19740:	ldr	r5, [r8, #4]
   19744:	mov	r3, #0
   19748:	str	r3, [r8, #4]
   1974c:	ldr	r2, [r8, #24]
   19750:	ldr	r0, [r5, #4]
   19754:	ldr	r1, [r0, #40]	; 0x28
   19758:	sub	r3, r1, #1
   1975c:	ldr	r0, [r0, #28]
   19760:	ldrb	r0, [r0, r3]
   19764:	cmp	r0, #47	; 0x2f
   19768:	movne	r3, r1
   1976c:	add	r0, r2, r3
   19770:	mov	r1, #47	; 0x2f
   19774:	strb	r1, [r2, r3]
   19778:	ldr	r2, [r5, #52]	; 0x34
   1977c:	add	r2, r2, #1
   19780:	add	r1, r5, #168	; 0xa8
   19784:	add	r0, r0, #1
   19788:	bl	11748 <memmove@plt>
   1978c:	str	r5, [r8]
   19790:	ldrh	r3, [r5, #56]	; 0x38
   19794:	cmp	r3, #11
   19798:	beq	19b1c <__assert_fail@plt+0x7f78>
   1979c:	ldrh	r3, [r5, #56]	; 0x38
   197a0:	cmp	r3, #1
   197a4:	bne	19c28 <__assert_fail@plt+0x8084>
   197a8:	ldr	r3, [r5, #48]	; 0x30
   197ac:	cmp	r3, #0
   197b0:	ldrdeq	r2, [r5, #64]	; 0x40
   197b4:	strdeq	r2, [r8, #16]
   197b8:	mov	r1, r5
   197bc:	mov	r0, r8
   197c0:	bl	181a4 <__assert_fail@plt+0x6600>
   197c4:	cmp	r0, #0
   197c8:	bne	19c28 <__assert_fail@plt+0x8084>
   197cc:	bl	119b8 <__errno_location@plt>
   197d0:	mov	r3, #12
   197d4:	str	r3, [r0]
   197d8:	mov	r5, #0
   197dc:	b	19c28 <__assert_fail@plt+0x8084>
   197e0:	bic	r1, r1, #4096	; 0x1000
   197e4:	str	r1, [r8, #48]	; 0x30
   197e8:	bl	17fa8 <__assert_fail@plt+0x6404>
   197ec:	mov	r3, #0
   197f0:	str	r3, [r8, #4]
   197f4:	mov	r1, #3
   197f8:	mov	r0, r8
   197fc:	bl	18638 <__assert_fail@plt+0x6a94>
   19800:	str	r0, [r8, #4]
   19804:	cmp	r0, #0
   19808:	bne	19740 <__assert_fail@plt+0x7b9c>
   1980c:	ldr	r3, [r8, #48]	; 0x30
   19810:	tst	r3, #8192	; 0x2000
   19814:	movne	r5, r0
   19818:	bne	19c28 <__assert_fail@plt+0x8084>
   1981c:	ldr	r3, [r5, #32]
   19820:	cmp	r3, #0
   19824:	beq	19838 <__assert_fail@plt+0x7c94>
   19828:	ldrh	r3, [r5, #56]	; 0x38
   1982c:	cmp	r3, #4
   19830:	movne	r3, #7
   19834:	strhne	r3, [r5, #56]	; 0x38
   19838:	mov	r1, r5
   1983c:	mov	r0, r8
   19840:	bl	18574 <__assert_fail@plt+0x69d0>
   19844:	b	19c28 <__assert_fail@plt+0x8084>
   19848:	bl	119b8 <__errno_location@plt>
   1984c:	ldr	r3, [r0]
   19850:	str	r3, [r5, #32]
   19854:	ldrh	r3, [r5, #58]	; 0x3a
   19858:	orr	r3, r3, #1
   1985c:	strh	r3, [r5, #58]	; 0x3a
   19860:	ldr	r3, [r8, #4]
   19864:	cmp	r3, #0
   19868:	beq	19740 <__assert_fail@plt+0x7b9c>
   1986c:	ldr	r2, [r3, #4]
   19870:	ldr	r2, [r2, #24]
   19874:	str	r2, [r3, #24]
   19878:	ldr	r3, [r3, #8]
   1987c:	cmp	r3, #0
   19880:	bne	1986c <__assert_fail@plt+0x7cc8>
   19884:	b	19740 <__assert_fail@plt+0x7b9c>
   19888:	str	r3, [r8]
   1988c:	ldr	r2, [r8, #24]
   19890:	ldr	r3, [r3, #40]	; 0x28
   19894:	mov	r1, #0
   19898:	strb	r1, [r2, r3]
   1989c:	mov	r1, #3
   198a0:	mov	r0, r8
   198a4:	bl	18638 <__assert_fail@plt+0x6a94>
   198a8:	subs	r6, r0, #0
   198ac:	bne	198c4 <__assert_fail@plt+0x7d20>
   198b0:	ldr	r3, [r8, #48]	; 0x30
   198b4:	tst	r3, #8192	; 0x2000
   198b8:	beq	19918 <__assert_fail@plt+0x7d74>
   198bc:	mov	r5, r6
   198c0:	b	19c28 <__assert_fail@plt+0x8084>
   198c4:	mov	r0, r5
   198c8:	bl	17750 <__assert_fail@plt+0x5bac>
   198cc:	mov	r5, r6
   198d0:	b	1974c <__assert_fail@plt+0x7ba8>
   198d4:	str	r4, [r8]
   198d8:	mov	r0, r5
   198dc:	bl	17750 <__assert_fail@plt+0x5bac>
   198e0:	ldr	r3, [r4, #48]	; 0x30
   198e4:	cmp	r3, #0
   198e8:	beq	199e0 <__assert_fail@plt+0x7e3c>
   198ec:	ldrh	r3, [r4, #60]	; 0x3c
   198f0:	mov	r5, r4
   198f4:	cmp	r3, #4
   198f8:	bne	19a94 <__assert_fail@plt+0x7ef0>
   198fc:	ldr	r4, [r5, #8]
   19900:	cmp	r4, #0
   19904:	bne	198d4 <__assert_fail@plt+0x7d30>
   19908:	ldr	r3, [r5, #4]
   1990c:	ldr	r2, [r3, #12]
   19910:	cmp	r2, #0
   19914:	bne	19888 <__assert_fail@plt+0x7ce4>
   19918:	ldr	r6, [r5, #4]
   1991c:	str	r6, [r8]
   19920:	mov	r0, r5
   19924:	bl	17750 <__assert_fail@plt+0x5bac>
   19928:	ldr	r3, [r6, #48]	; 0x30
   1992c:	cmn	r3, #1
   19930:	beq	19b54 <__assert_fail@plt+0x7fb0>
   19934:	ldrh	r3, [r6, #56]	; 0x38
   19938:	cmp	r3, #11
   1993c:	beq	19b74 <__assert_fail@plt+0x7fd0>
   19940:	ldr	r2, [r8, #24]
   19944:	ldr	r3, [r6, #40]	; 0x28
   19948:	mov	r1, #0
   1994c:	strb	r1, [r2, r3]
   19950:	ldr	r3, [r6, #48]	; 0x30
   19954:	cmp	r3, r1
   19958:	beq	19b78 <__assert_fail@plt+0x7fd4>
   1995c:	ldrh	r3, [r6, #58]	; 0x3a
   19960:	tst	r3, #2
   19964:	beq	19be0 <__assert_fail@plt+0x803c>
   19968:	ldr	r3, [r8, #48]	; 0x30
   1996c:	tst	r3, #4
   19970:	bne	1998c <__assert_fail@plt+0x7de8>
   19974:	tst	r3, #512	; 0x200
   19978:	beq	19bb4 <__assert_fail@plt+0x8010>
   1997c:	mov	r2, #1
   19980:	ldr	r1, [r6, #36]	; 0x24
   19984:	mov	r0, r8
   19988:	bl	1826c <__assert_fail@plt+0x66c8>
   1998c:	ldr	r0, [r6, #36]	; 0x24
   19990:	bl	11b80 <close@plt>
   19994:	ldrh	r3, [r6, #56]	; 0x38
   19998:	cmp	r3, #2
   1999c:	beq	199c8 <__assert_fail@plt+0x7e24>
   199a0:	ldr	r3, [r6, #32]
   199a4:	cmp	r3, #0
   199a8:	movne	r3, #7
   199ac:	strhne	r3, [r6, #56]	; 0x38
   199b0:	bne	199c8 <__assert_fail@plt+0x7e24>
   199b4:	mov	r3, #6
   199b8:	strh	r3, [r6, #56]	; 0x38
   199bc:	mov	r1, r6
   199c0:	mov	r0, r8
   199c4:	bl	18574 <__assert_fail@plt+0x69d0>
   199c8:	ldr	r5, [r8, #48]	; 0x30
   199cc:	and	r5, r5, #8192	; 0x2000
   199d0:	cmp	r5, #0
   199d4:	moveq	r5, r6
   199d8:	movne	r5, r4
   199dc:	b	19c28 <__assert_fail@plt+0x8084>
   199e0:	mov	r0, r8
   199e4:	bl	18304 <__assert_fail@plt+0x6760>
   199e8:	cmp	r0, #0
   199ec:	bne	19a70 <__assert_fail@plt+0x7ecc>
   199f0:	mov	r0, r8
   199f4:	bl	17ff8 <__assert_fail@plt+0x6454>
   199f8:	ldr	r2, [r4, #52]	; 0x34
   199fc:	str	r2, [r4, #40]	; 0x28
   19a00:	add	r5, r4, #168	; 0xa8
   19a04:	add	r2, r2, #1
   19a08:	mov	r1, r5
   19a0c:	ldr	r0, [r8, #24]
   19a10:	bl	11748 <memmove@plt>
   19a14:	mov	r1, #47	; 0x2f
   19a18:	mov	r0, r5
   19a1c:	bl	11a78 <strrchr@plt>
   19a20:	cmp	r0, #0
   19a24:	beq	19a54 <__assert_fail@plt+0x7eb0>
   19a28:	cmp	r5, r0
   19a2c:	beq	19a84 <__assert_fail@plt+0x7ee0>
   19a30:	add	r6, r0, #1
   19a34:	mov	r0, r6
   19a38:	bl	11988 <strlen@plt>
   19a3c:	mov	r7, r0
   19a40:	add	r2, r0, #1
   19a44:	mov	r1, r6
   19a48:	mov	r0, r5
   19a4c:	bl	11748 <memmove@plt>
   19a50:	str	r7, [r4, #52]	; 0x34
   19a54:	ldr	r3, [r8, #24]
   19a58:	str	r3, [r4, #28]
   19a5c:	str	r3, [r4, #24]
   19a60:	mov	r0, r8
   19a64:	bl	17ed4 <__assert_fail@plt+0x6330>
   19a68:	mov	r5, r4
   19a6c:	b	1978c <__assert_fail@plt+0x7be8>
   19a70:	ldr	r3, [r8, #48]	; 0x30
   19a74:	orr	r3, r3, #8192	; 0x2000
   19a78:	str	r3, [r8, #48]	; 0x30
   19a7c:	mov	r5, #0
   19a80:	b	19c28 <__assert_fail@plt+0x8084>
   19a84:	ldrb	r3, [r0, #1]
   19a88:	cmp	r3, #0
   19a8c:	beq	19a54 <__assert_fail@plt+0x7eb0>
   19a90:	b	19a30 <__assert_fail@plt+0x7e8c>
   19a94:	cmp	r3, #2
   19a98:	movne	r5, r4
   19a9c:	bne	1974c <__assert_fail@plt+0x7ba8>
   19aa0:	mov	r2, #1
   19aa4:	mov	r1, r4
   19aa8:	mov	r0, r8
   19aac:	bl	17be4 <__assert_fail@plt+0x6040>
   19ab0:	strh	r0, [r4, #56]	; 0x38
   19ab4:	cmp	r0, #1
   19ab8:	beq	19acc <__assert_fail@plt+0x7f28>
   19abc:	mov	r3, #3
   19ac0:	strh	r3, [r4, #60]	; 0x3c
   19ac4:	mov	r5, r4
   19ac8:	b	1974c <__assert_fail@plt+0x7ba8>
   19acc:	ldr	r3, [r8, #48]	; 0x30
   19ad0:	tst	r3, #4
   19ad4:	bne	19abc <__assert_fail@plt+0x7f18>
   19ad8:	movw	r1, #6508	; 0x196c
   19adc:	movt	r1, #3
   19ae0:	mov	r0, r8
   19ae4:	bl	17f5c <__assert_fail@plt+0x63b8>
   19ae8:	str	r0, [r4, #36]	; 0x24
   19aec:	cmp	r0, #0
   19af0:	blt	19b04 <__assert_fail@plt+0x7f60>
   19af4:	ldrh	r3, [r4, #58]	; 0x3a
   19af8:	orr	r3, r3, #2
   19afc:	strh	r3, [r4, #58]	; 0x3a
   19b00:	b	19abc <__assert_fail@plt+0x7f18>
   19b04:	bl	119b8 <__errno_location@plt>
   19b08:	ldr	r3, [r0]
   19b0c:	str	r3, [r4, #32]
   19b10:	mov	r3, #7
   19b14:	strh	r3, [r4, #56]	; 0x38
   19b18:	b	19abc <__assert_fail@plt+0x7f18>
   19b1c:	ldrd	r2, [r5, #112]	; 0x70
   19b20:	cmp	r3, #0
   19b24:	cmpeq	r2, #2
   19b28:	beq	19b3c <__assert_fail@plt+0x7f98>
   19b2c:	cmp	r3, #0
   19b30:	cmpeq	r2, #1
   19b34:	beq	19c28 <__assert_fail@plt+0x8084>
   19b38:	bl	11b68 <abort@plt>
   19b3c:	mov	r2, #0
   19b40:	mov	r1, r5
   19b44:	mov	r0, r8
   19b48:	bl	17be4 <__assert_fail@plt+0x6040>
   19b4c:	strh	r0, [r5, #56]	; 0x38
   19b50:	b	1979c <__assert_fail@plt+0x7bf8>
   19b54:	mov	r0, r6
   19b58:	bl	17750 <__assert_fail@plt+0x5bac>
   19b5c:	bl	119b8 <__errno_location@plt>
   19b60:	mov	r3, #0
   19b64:	str	r3, [r0]
   19b68:	str	r3, [r8]
   19b6c:	mov	r5, r4
   19b70:	b	19c28 <__assert_fail@plt+0x8084>
   19b74:	bl	11b68 <abort@plt>
   19b78:	mov	r0, r8
   19b7c:	bl	18304 <__assert_fail@plt+0x6760>
   19b80:	cmp	r0, #0
   19b84:	beq	19994 <__assert_fail@plt+0x7df0>
   19b88:	bl	119b8 <__errno_location@plt>
   19b8c:	ldr	r3, [r0]
   19b90:	str	r3, [r6, #32]
   19b94:	ldr	r3, [r8, #48]	; 0x30
   19b98:	orr	r3, r3, #8192	; 0x2000
   19b9c:	str	r3, [r8, #48]	; 0x30
   19ba0:	ldrh	r3, [r6, #56]	; 0x38
   19ba4:	cmp	r3, #2
   19ba8:	moveq	r5, r4
   19bac:	bne	199a0 <__assert_fail@plt+0x7dfc>
   19bb0:	b	19c28 <__assert_fail@plt+0x8084>
   19bb4:	ldr	r0, [r6, #36]	; 0x24
   19bb8:	bl	11ae4 <fchdir@plt>
   19bbc:	cmp	r0, #0
   19bc0:	beq	1998c <__assert_fail@plt+0x7de8>
   19bc4:	bl	119b8 <__errno_location@plt>
   19bc8:	ldr	r3, [r0]
   19bcc:	str	r3, [r6, #32]
   19bd0:	ldr	r3, [r8, #48]	; 0x30
   19bd4:	orr	r3, r3, #8192	; 0x2000
   19bd8:	str	r3, [r8, #48]	; 0x30
   19bdc:	b	1998c <__assert_fail@plt+0x7de8>
   19be0:	tst	r3, #1
   19be4:	bne	19994 <__assert_fail@plt+0x7df0>
   19be8:	movw	r3, #8372	; 0x20b4
   19bec:	movt	r3, #3
   19bf0:	mvn	r2, #0
   19bf4:	ldr	r1, [r6, #4]
   19bf8:	mov	r0, r8
   19bfc:	bl	18368 <__assert_fail@plt+0x67c4>
   19c00:	cmp	r0, #0
   19c04:	beq	19994 <__assert_fail@plt+0x7df0>
   19c08:	bl	119b8 <__errno_location@plt>
   19c0c:	ldr	r3, [r0]
   19c10:	str	r3, [r6, #32]
   19c14:	ldr	r3, [r8, #48]	; 0x30
   19c18:	orr	r3, r3, #8192	; 0x2000
   19c1c:	str	r3, [r8, #48]	; 0x30
   19c20:	b	19ba0 <__assert_fail@plt+0x7ffc>
   19c24:	mov	r5, #0
   19c28:	mov	r0, r5
   19c2c:	ldrd	r4, [sp]
   19c30:	ldrd	r6, [sp, #8]
   19c34:	ldr	r8, [sp, #16]
   19c38:	add	sp, sp, #20
   19c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   19c40:	cmp	r2, #4
   19c44:	bhi	19c54 <__assert_fail@plt+0x80b0>
   19c48:	strh	r2, [r1, #60]	; 0x3c
   19c4c:	mov	r0, #0
   19c50:	bx	lr
   19c54:	str	r4, [sp, #-8]!
   19c58:	str	lr, [sp, #4]
   19c5c:	bl	119b8 <__errno_location@plt>
   19c60:	mov	r3, #22
   19c64:	str	r3, [r0]
   19c68:	mov	r0, #1
   19c6c:	ldr	r4, [sp]
   19c70:	add	sp, sp, #4
   19c74:	pop	{pc}		; (ldr pc, [sp], #4)
   19c78:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19c7c:	strd	r6, [sp, #8]
   19c80:	str	r8, [sp, #16]
   19c84:	str	lr, [sp, #20]
   19c88:	bics	r3, r1, #4096	; 0x1000
   19c8c:	bne	19d3c <__assert_fail@plt+0x8198>
   19c90:	mov	r4, r0
   19c94:	mov	r5, r1
   19c98:	ldr	r6, [r0]
   19c9c:	bl	119b8 <__errno_location@plt>
   19ca0:	mov	r7, r0
   19ca4:	mov	r3, #0
   19ca8:	str	r3, [r0]
   19cac:	ldr	r3, [r4, #48]	; 0x30
   19cb0:	tst	r3, #8192	; 0x2000
   19cb4:	movne	r0, #0
   19cb8:	bne	19d28 <__assert_fail@plt+0x8184>
   19cbc:	ldrh	r3, [r6, #56]	; 0x38
   19cc0:	cmp	r3, #9
   19cc4:	beq	19d50 <__assert_fail@plt+0x81ac>
   19cc8:	cmp	r3, #1
   19ccc:	movne	r0, #0
   19cd0:	bne	19d28 <__assert_fail@plt+0x8184>
   19cd4:	ldr	r0, [r4, #4]
   19cd8:	cmp	r0, #0
   19cdc:	beq	19ce4 <__assert_fail@plt+0x8140>
   19ce0:	bl	17fa8 <__assert_fail@plt+0x6404>
   19ce4:	cmp	r5, #4096	; 0x1000
   19ce8:	movne	r5, #1
   19cec:	beq	19d58 <__assert_fail@plt+0x81b4>
   19cf0:	ldr	r3, [r6, #48]	; 0x30
   19cf4:	cmp	r3, #0
   19cf8:	bne	19d18 <__assert_fail@plt+0x8174>
   19cfc:	ldr	r3, [r6, #24]
   19d00:	ldrb	r3, [r3]
   19d04:	cmp	r3, #47	; 0x2f
   19d08:	beq	19d18 <__assert_fail@plt+0x8174>
   19d0c:	ldr	r3, [r4, #48]	; 0x30
   19d10:	tst	r3, #4
   19d14:	beq	19d6c <__assert_fail@plt+0x81c8>
   19d18:	mov	r1, r5
   19d1c:	mov	r0, r4
   19d20:	bl	18638 <__assert_fail@plt+0x6a94>
   19d24:	str	r0, [r4, #4]
   19d28:	ldrd	r4, [sp]
   19d2c:	ldrd	r6, [sp, #8]
   19d30:	ldr	r8, [sp, #16]
   19d34:	add	sp, sp, #20
   19d38:	pop	{pc}		; (ldr pc, [sp], #4)
   19d3c:	bl	119b8 <__errno_location@plt>
   19d40:	mov	r3, #22
   19d44:	str	r3, [r0]
   19d48:	mov	r0, #0
   19d4c:	b	19d28 <__assert_fail@plt+0x8184>
   19d50:	ldr	r0, [r6, #8]
   19d54:	b	19d28 <__assert_fail@plt+0x8184>
   19d58:	ldr	r3, [r4, #48]	; 0x30
   19d5c:	orr	r3, r3, #4096	; 0x1000
   19d60:	str	r3, [r4, #48]	; 0x30
   19d64:	mov	r5, #2
   19d68:	b	19cf0 <__assert_fail@plt+0x814c>
   19d6c:	movw	r1, #6508	; 0x196c
   19d70:	movt	r1, #3
   19d74:	mov	r0, r4
   19d78:	bl	17f5c <__assert_fail@plt+0x63b8>
   19d7c:	subs	r6, r0, #0
   19d80:	movlt	r0, #0
   19d84:	strlt	r0, [r4, #4]
   19d88:	blt	19d28 <__assert_fail@plt+0x8184>
   19d8c:	mov	r1, r5
   19d90:	mov	r0, r4
   19d94:	bl	18638 <__assert_fail@plt+0x6a94>
   19d98:	str	r0, [r4, #4]
   19d9c:	ldr	r3, [r4, #48]	; 0x30
   19da0:	tst	r3, #512	; 0x200
   19da4:	beq	19dc0 <__assert_fail@plt+0x821c>
   19da8:	mov	r2, #1
   19dac:	mov	r1, r6
   19db0:	mov	r0, r4
   19db4:	bl	1826c <__assert_fail@plt+0x66c8>
   19db8:	ldr	r0, [r4, #4]
   19dbc:	b	19d28 <__assert_fail@plt+0x8184>
   19dc0:	mov	r0, r6
   19dc4:	bl	11ae4 <fchdir@plt>
   19dc8:	cmp	r0, #0
   19dcc:	bne	19ddc <__assert_fail@plt+0x8238>
   19dd0:	mov	r0, r6
   19dd4:	bl	11b80 <close@plt>
   19dd8:	b	19db8 <__assert_fail@plt+0x8214>
   19ddc:	ldr	r4, [r7]
   19de0:	mov	r0, r6
   19de4:	bl	11b80 <close@plt>
   19de8:	str	r4, [r7]
   19dec:	mov	r0, #0
   19df0:	b	19d28 <__assert_fail@plt+0x8184>
   19df4:	andeq	r0, r0, r0
   19df8:	ror	r0, r0, #3
   19dfc:	udiv	r3, r0, r1
   19e00:	mls	r0, r3, r1, r0
   19e04:	bx	lr
   19e08:	cmp	r1, r0
   19e0c:	movne	r0, #0
   19e10:	moveq	r0, #1
   19e14:	bx	lr
   19e18:	ldr	r2, [r0, #20]
   19e1c:	movw	r3, #8376	; 0x20b8
   19e20:	movt	r3, #3
   19e24:	cmp	r2, r3
   19e28:	beq	19ec4 <__assert_fail@plt+0x8320>
   19e2c:	vldr	s15, [r2, #8]
   19e30:	vldr	s14, [pc, #148]	; 19ecc <__assert_fail@plt+0x8328>
   19e34:	vcmpe.f32	s15, s14
   19e38:	vmrs	APSR_nzcv, fpscr
   19e3c:	ble	19e9c <__assert_fail@plt+0x82f8>
   19e40:	vldr	s14, [pc, #136]	; 19ed0 <__assert_fail@plt+0x832c>
   19e44:	vcmpe.f32	s15, s14
   19e48:	vmrs	APSR_nzcv, fpscr
   19e4c:	bpl	19e9c <__assert_fail@plt+0x82f8>
   19e50:	vldr	s13, [r2, #12]
   19e54:	vldr	s14, [pc, #120]	; 19ed4 <__assert_fail@plt+0x8330>
   19e58:	vcmpe.f32	s13, s14
   19e5c:	vmrs	APSR_nzcv, fpscr
   19e60:	ble	19e9c <__assert_fail@plt+0x82f8>
   19e64:	vldr	s14, [r2]
   19e68:	vcmpe.f32	s14, #0.0
   19e6c:	vmrs	APSR_nzcv, fpscr
   19e70:	blt	19e9c <__assert_fail@plt+0x82f8>
   19e74:	vldr	s13, [pc, #80]	; 19ecc <__assert_fail@plt+0x8328>
   19e78:	vadd.f32	s14, s14, s13
   19e7c:	vldr	s13, [r2, #4]
   19e80:	vcmpe.f32	s14, s13
   19e84:	vmrs	APSR_nzcv, fpscr
   19e88:	bpl	19e9c <__assert_fail@plt+0x82f8>
   19e8c:	vldr	s12, [pc, #68]	; 19ed8 <__assert_fail@plt+0x8334>
   19e90:	vcmpe.f32	s13, s12
   19e94:	vmrs	APSR_nzcv, fpscr
   19e98:	bls	19eb0 <__assert_fail@plt+0x830c>
   19e9c:	movw	r3, #8376	; 0x20b8
   19ea0:	movt	r3, #3
   19ea4:	str	r3, [r0, #20]
   19ea8:	mov	r0, #0
   19eac:	bx	lr
   19eb0:	vcmpe.f32	s15, s14
   19eb4:	vmrs	APSR_nzcv, fpscr
   19eb8:	ble	19e9c <__assert_fail@plt+0x82f8>
   19ebc:	mov	r0, #1
   19ec0:	bx	lr
   19ec4:	mov	r0, #1
   19ec8:	bx	lr
   19ecc:	stclcc	12, cr12, [ip, #820]	; 0x334
   19ed0:	svccc	0x00666666
   19ed4:	svccc	0x008ccccd
   19ed8:	svccc	0x00800000
   19edc:	ldrb	r3, [r1, #16]
   19ee0:	cmp	r3, #0
   19ee4:	bne	19f10 <__assert_fail@plt+0x836c>
   19ee8:	vmov	s15, r0
   19eec:	vcvt.f32.u32	s15, s15
   19ef0:	vldr	s13, [r1, #8]
   19ef4:	vdiv.f32	s14, s15, s13
   19ef8:	vldr	s15, [pc, #224]	; 19fe0 <__assert_fail@plt+0x843c>
   19efc:	vcmpe.f32	s14, s15
   19f00:	vmrs	APSR_nzcv, fpscr
   19f04:	bge	19fd0 <__assert_fail@plt+0x842c>
   19f08:	vcvt.u32.f32	s15, s14
   19f0c:	vmov	r0, s15
   19f10:	cmp	r0, #10
   19f14:	movcc	r0, #10
   19f18:	orr	r0, r0, #1
   19f1c:	cmn	r0, #1
   19f20:	beq	19f34 <__assert_fail@plt+0x8390>
   19f24:	push	{lr}		; (str lr, [sp, #-4]!)
   19f28:	movw	lr, #43691	; 0xaaab
   19f2c:	movt	lr, #43690	; 0xaaaa
   19f30:	b	19f5c <__assert_fail@plt+0x83b8>
   19f34:	mov	r0, #0
   19f38:	bx	lr
   19f3c:	mov	r3, #3
   19f40:	udiv	r2, r0, r3
   19f44:	mls	r3, r3, r2, r0
   19f48:	cmp	r3, #0
   19f4c:	bne	19fac <__assert_fail@plt+0x8408>
   19f50:	add	r0, r0, #2
   19f54:	cmn	r0, #1
   19f58:	beq	19fd8 <__assert_fail@plt+0x8434>
   19f5c:	cmp	r0, #9
   19f60:	bls	19f3c <__assert_fail@plt+0x8398>
   19f64:	umull	r2, r3, lr, r0
   19f68:	lsr	r3, r3, #1
   19f6c:	add	r3, r3, r3, lsl #1
   19f70:	cmp	r0, r3
   19f74:	beq	19f50 <__assert_fail@plt+0x83ac>
   19f78:	mov	r1, #16
   19f7c:	mov	r2, #9
   19f80:	mov	r3, #3
   19f84:	add	r2, r2, r1
   19f88:	add	r3, r3, #2
   19f8c:	cmp	r2, r0
   19f90:	bcs	19f40 <__assert_fail@plt+0x839c>
   19f94:	add	r1, r1, #8
   19f98:	udiv	ip, r0, r3
   19f9c:	mls	ip, r3, ip, r0
   19fa0:	cmp	ip, #0
   19fa4:	bne	19f84 <__assert_fail@plt+0x83e0>
   19fa8:	b	19f50 <__assert_fail@plt+0x83ac>
   19fac:	lsl	r2, r0, #2
   19fb0:	lsr	r3, r0, #30
   19fb4:	adds	r3, r3, #0
   19fb8:	movne	r3, #1
   19fbc:	cmp	r2, #0
   19fc0:	movlt	r3, #1
   19fc4:	cmp	r3, #0
   19fc8:	movne	r0, #0
   19fcc:	pop	{pc}		; (ldr pc, [sp], #4)
   19fd0:	mov	r0, #0
   19fd4:	bx	lr
   19fd8:	mov	r0, #0
   19fdc:	b	19fcc <__assert_fail@plt+0x8428>
   19fe0:	svcmi	0x00800000
   19fe4:	str	r4, [sp, #-8]!
   19fe8:	str	lr, [sp, #4]
   19fec:	mov	r4, r0
   19ff0:	mov	r0, r1
   19ff4:	ldr	r3, [r4, #24]
   19ff8:	ldr	r1, [r4, #8]
   19ffc:	blx	r3
   1a000:	ldr	r3, [r4, #8]
   1a004:	cmp	r3, r0
   1a008:	bls	1a020 <__assert_fail@plt+0x847c>
   1a00c:	ldr	r3, [r4]
   1a010:	add	r0, r3, r0, lsl #3
   1a014:	ldr	r4, [sp]
   1a018:	add	sp, sp, #4
   1a01c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a020:	bl	11b68 <abort@plt>
   1a024:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a028:	strd	r6, [sp, #8]
   1a02c:	strd	r8, [sp, #16]
   1a030:	strd	sl, [sp, #24]
   1a034:	str	lr, [sp, #32]
   1a038:	sub	sp, sp, #4
   1a03c:	ldr	r7, [r1]
   1a040:	ldr	r3, [r1, #4]
   1a044:	cmp	r7, r3
   1a048:	bcs	1a1a0 <__assert_fail@plt+0x85fc>
   1a04c:	mov	fp, r2
   1a050:	mov	r9, r1
   1a054:	mov	r6, r0
   1a058:	add	r7, r7, #8
   1a05c:	mov	sl, #0
   1a060:	b	1a134 <__assert_fail@plt+0x8590>
   1a064:	str	r5, [r0]
   1a068:	ldr	r2, [r6, #12]
   1a06c:	add	r2, r2, #1
   1a070:	str	r2, [r6, #12]
   1a074:	str	sl, [r4]
   1a078:	ldr	r2, [r6, #36]	; 0x24
   1a07c:	str	r2, [r4, #4]
   1a080:	str	r4, [r6, #36]	; 0x24
   1a084:	mov	r4, r3
   1a088:	cmp	r3, #0
   1a08c:	beq	1a0c0 <__assert_fail@plt+0x851c>
   1a090:	ldr	r5, [r4]
   1a094:	mov	r1, r5
   1a098:	mov	r0, r6
   1a09c:	bl	19fe4 <__assert_fail@plt+0x8440>
   1a0a0:	ldr	r3, [r4, #4]
   1a0a4:	ldr	r2, [r0]
   1a0a8:	cmp	r2, #0
   1a0ac:	beq	1a064 <__assert_fail@plt+0x84c0>
   1a0b0:	ldr	r2, [r0, #4]
   1a0b4:	str	r2, [r4, #4]
   1a0b8:	str	r4, [r0, #4]
   1a0bc:	b	1a084 <__assert_fail@plt+0x84e0>
   1a0c0:	ldr	r4, [r8, #-8]
   1a0c4:	str	sl, [r8, #-4]
   1a0c8:	cmp	fp, #0
   1a0cc:	bne	1a120 <__assert_fail@plt+0x857c>
   1a0d0:	mov	r1, r4
   1a0d4:	mov	r0, r6
   1a0d8:	bl	19fe4 <__assert_fail@plt+0x8440>
   1a0dc:	mov	r5, r0
   1a0e0:	ldr	r3, [r0]
   1a0e4:	cmp	r3, #0
   1a0e8:	beq	1a16c <__assert_fail@plt+0x85c8>
   1a0ec:	ldr	r0, [r6, #36]	; 0x24
   1a0f0:	cmp	r0, #0
   1a0f4:	beq	1a154 <__assert_fail@plt+0x85b0>
   1a0f8:	ldr	r3, [r0, #4]
   1a0fc:	str	r3, [r6, #36]	; 0x24
   1a100:	str	r4, [r0]
   1a104:	ldr	r3, [r5, #4]
   1a108:	str	r3, [r0, #4]
   1a10c:	str	r0, [r5, #4]
   1a110:	str	sl, [r8, #-8]
   1a114:	ldr	r3, [r9, #12]
   1a118:	sub	r3, r3, #1
   1a11c:	str	r3, [r9, #12]
   1a120:	add	r2, r7, #8
   1a124:	ldr	r3, [r9, #4]
   1a128:	cmp	r3, r7
   1a12c:	bls	1a180 <__assert_fail@plt+0x85dc>
   1a130:	mov	r7, r2
   1a134:	mov	r8, r7
   1a138:	ldr	r3, [r7, #-8]
   1a13c:	cmp	r3, #0
   1a140:	beq	1a120 <__assert_fail@plt+0x857c>
   1a144:	ldr	r4, [r7, #-4]
   1a148:	cmp	r4, #0
   1a14c:	bne	1a090 <__assert_fail@plt+0x84ec>
   1a150:	b	1a0c0 <__assert_fail@plt+0x851c>
   1a154:	mov	r0, #8
   1a158:	bl	2f010 <__assert_fail@plt+0x1d46c>
   1a15c:	cmp	r0, #0
   1a160:	bne	1a100 <__assert_fail@plt+0x855c>
   1a164:	mov	r0, fp
   1a168:	b	1a184 <__assert_fail@plt+0x85e0>
   1a16c:	str	r4, [r0]
   1a170:	ldr	r3, [r6, #12]
   1a174:	add	r3, r3, #1
   1a178:	str	r3, [r6, #12]
   1a17c:	b	1a110 <__assert_fail@plt+0x856c>
   1a180:	mov	r0, #1
   1a184:	add	sp, sp, #4
   1a188:	ldrd	r4, [sp]
   1a18c:	ldrd	r6, [sp, #8]
   1a190:	ldrd	r8, [sp, #16]
   1a194:	ldrd	sl, [sp, #24]
   1a198:	add	sp, sp, #32
   1a19c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a1a0:	mov	r0, #1
   1a1a4:	b	1a184 <__assert_fail@plt+0x85e0>
   1a1a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a1ac:	strd	r6, [sp, #8]
   1a1b0:	str	r8, [sp, #16]
   1a1b4:	str	lr, [sp, #20]
   1a1b8:	mov	r6, r0
   1a1bc:	mov	r5, r1
   1a1c0:	mov	r7, r2
   1a1c4:	mov	r8, r3
   1a1c8:	bl	19fe4 <__assert_fail@plt+0x8440>
   1a1cc:	mov	r4, r0
   1a1d0:	str	r0, [r7]
   1a1d4:	ldr	r0, [r0]
   1a1d8:	cmp	r0, #0
   1a1dc:	beq	1a258 <__assert_fail@plt+0x86b4>
   1a1e0:	cmp	r0, r5
   1a1e4:	beq	1a26c <__assert_fail@plt+0x86c8>
   1a1e8:	ldr	r3, [r6, #28]
   1a1ec:	mov	r1, r0
   1a1f0:	mov	r0, r5
   1a1f4:	blx	r3
   1a1f8:	cmp	r0, #0
   1a1fc:	bne	1a26c <__assert_fail@plt+0x86c8>
   1a200:	ldr	r0, [r4, #4]
   1a204:	cmp	r0, #0
   1a208:	beq	1a258 <__assert_fail@plt+0x86b4>
   1a20c:	ldr	r1, [r0]
   1a210:	cmp	r5, r1
   1a214:	beq	1a248 <__assert_fail@plt+0x86a4>
   1a218:	ldr	r3, [r6, #28]
   1a21c:	mov	r0, r5
   1a220:	blx	r3
   1a224:	cmp	r0, #0
   1a228:	bne	1a248 <__assert_fail@plt+0x86a4>
   1a22c:	ldr	r4, [r4, #4]
   1a230:	ldr	r0, [r4, #4]
   1a234:	cmp	r0, #0
   1a238:	beq	1a258 <__assert_fail@plt+0x86b4>
   1a23c:	ldr	r1, [r0]
   1a240:	cmp	r1, r5
   1a244:	bne	1a218 <__assert_fail@plt+0x8674>
   1a248:	ldr	r3, [r4, #4]
   1a24c:	ldr	r0, [r3]
   1a250:	cmp	r8, #0
   1a254:	bne	1a2ac <__assert_fail@plt+0x8708>
   1a258:	ldrd	r4, [sp]
   1a25c:	ldrd	r6, [sp, #8]
   1a260:	ldr	r8, [sp, #16]
   1a264:	add	sp, sp, #20
   1a268:	pop	{pc}		; (ldr pc, [sp], #4)
   1a26c:	ldr	r0, [r4]
   1a270:	cmp	r8, #0
   1a274:	beq	1a258 <__assert_fail@plt+0x86b4>
   1a278:	ldr	r1, [r4, #4]
   1a27c:	cmp	r1, #0
   1a280:	moveq	r3, #0
   1a284:	streq	r3, [r4]
   1a288:	beq	1a258 <__assert_fail@plt+0x86b4>
   1a28c:	ldrd	r2, [r1]
   1a290:	strd	r2, [r4]
   1a294:	mov	r3, #0
   1a298:	str	r3, [r1]
   1a29c:	ldr	r3, [r6, #36]	; 0x24
   1a2a0:	str	r3, [r1, #4]
   1a2a4:	str	r1, [r6, #36]	; 0x24
   1a2a8:	b	1a258 <__assert_fail@plt+0x86b4>
   1a2ac:	ldr	r2, [r3, #4]
   1a2b0:	str	r2, [r4, #4]
   1a2b4:	mov	r2, #0
   1a2b8:	str	r2, [r3]
   1a2bc:	ldr	r2, [r6, #36]	; 0x24
   1a2c0:	str	r2, [r3, #4]
   1a2c4:	str	r3, [r6, #36]	; 0x24
   1a2c8:	b	1a258 <__assert_fail@plt+0x86b4>
   1a2cc:	ldr	r0, [r0, #8]
   1a2d0:	bx	lr
   1a2d4:	ldr	r0, [r0, #12]
   1a2d8:	bx	lr
   1a2dc:	ldr	r0, [r0, #16]
   1a2e0:	bx	lr
   1a2e4:	ldr	r2, [r0]
   1a2e8:	ldr	r3, [r0, #4]
   1a2ec:	cmp	r2, r3
   1a2f0:	bcs	1a360 <__assert_fail@plt+0x87bc>
   1a2f4:	add	r1, r2, #8
   1a2f8:	sub	ip, r3, #1
   1a2fc:	sub	ip, ip, r2
   1a300:	bic	ip, ip, #7
   1a304:	add	r2, r2, #16
   1a308:	add	ip, ip, r2
   1a30c:	mov	r0, #0
   1a310:	b	1a32c <__assert_fail@plt+0x8788>
   1a314:	mov	r2, #1
   1a318:	cmp	r0, r2
   1a31c:	movcc	r0, r2
   1a320:	add	r1, r1, #8
   1a324:	cmp	r1, ip
   1a328:	beq	1a35c <__assert_fail@plt+0x87b8>
   1a32c:	ldr	r3, [r1, #-8]
   1a330:	cmp	r3, #0
   1a334:	beq	1a320 <__assert_fail@plt+0x877c>
   1a338:	ldr	r3, [r1, #-4]
   1a33c:	cmp	r3, #0
   1a340:	beq	1a314 <__assert_fail@plt+0x8770>
   1a344:	mov	r2, #1
   1a348:	add	r2, r2, #1
   1a34c:	ldr	r3, [r3, #4]
   1a350:	cmp	r3, #0
   1a354:	bne	1a348 <__assert_fail@plt+0x87a4>
   1a358:	b	1a318 <__assert_fail@plt+0x8774>
   1a35c:	bx	lr
   1a360:	mov	r0, #0
   1a364:	bx	lr
   1a368:	push	{lr}		; (str lr, [sp, #-4]!)
   1a36c:	ldr	r2, [r0]
   1a370:	ldr	r3, [r0, #4]
   1a374:	cmp	r2, r3
   1a378:	bcs	1a3e0 <__assert_fail@plt+0x883c>
   1a37c:	add	r1, r2, #8
   1a380:	sub	ip, r3, #1
   1a384:	sub	ip, ip, r2
   1a388:	bic	ip, ip, #7
   1a38c:	add	r2, r2, #16
   1a390:	add	ip, ip, r2
   1a394:	mov	r2, #0
   1a398:	mov	lr, r2
   1a39c:	b	1a3ac <__assert_fail@plt+0x8808>
   1a3a0:	add	r1, r1, #8
   1a3a4:	cmp	r1, ip
   1a3a8:	beq	1a3e8 <__assert_fail@plt+0x8844>
   1a3ac:	ldr	r3, [r1, #-8]
   1a3b0:	cmp	r3, #0
   1a3b4:	beq	1a3a0 <__assert_fail@plt+0x87fc>
   1a3b8:	add	lr, lr, #1
   1a3bc:	add	r2, r2, #1
   1a3c0:	ldr	r3, [r1, #-4]
   1a3c4:	cmp	r3, #0
   1a3c8:	beq	1a3a0 <__assert_fail@plt+0x87fc>
   1a3cc:	add	r2, r2, #1
   1a3d0:	ldr	r3, [r3, #4]
   1a3d4:	cmp	r3, #0
   1a3d8:	bne	1a3cc <__assert_fail@plt+0x8828>
   1a3dc:	b	1a3a0 <__assert_fail@plt+0x87fc>
   1a3e0:	mov	r2, #0
   1a3e4:	mov	lr, r2
   1a3e8:	ldr	r3, [r0, #12]
   1a3ec:	cmp	r3, lr
   1a3f0:	movne	r0, #0
   1a3f4:	beq	1a3fc <__assert_fail@plt+0x8858>
   1a3f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3fc:	ldr	r0, [r0, #16]
   1a400:	cmp	r0, r2
   1a404:	movne	r0, #0
   1a408:	moveq	r0, #1
   1a40c:	b	1a3f8 <__assert_fail@plt+0x8854>
   1a410:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a414:	strd	r6, [sp, #8]
   1a418:	str	r8, [sp, #16]
   1a41c:	str	lr, [sp, #20]
   1a420:	sub	sp, sp, #8
   1a424:	mov	r6, r0
   1a428:	mov	r4, r1
   1a42c:	ldr	r5, [r0, #8]
   1a430:	ldr	r7, [r0, #12]
   1a434:	bl	1a2e4 <__assert_fail@plt+0x8740>
   1a438:	mov	r8, r0
   1a43c:	ldr	r3, [r6, #16]
   1a440:	movw	r2, #8396	; 0x20cc
   1a444:	movt	r2, #3
   1a448:	mov	r1, #1
   1a44c:	mov	r0, r4
   1a450:	bl	11a18 <__fprintf_chk@plt>
   1a454:	mov	r3, r5
   1a458:	movw	r2, #8420	; 0x20e4
   1a45c:	movt	r2, #3
   1a460:	mov	r1, #1
   1a464:	mov	r0, r4
   1a468:	bl	11a18 <__fprintf_chk@plt>
   1a46c:	vmov	s15, r7
   1a470:	vcvt.f64.u32	d6, s15
   1a474:	vldr	d7, [pc, #92]	; 1a4d8 <__assert_fail@plt+0x8934>
   1a478:	vmul.f64	d6, d6, d7
   1a47c:	vmov	s15, r5
   1a480:	vcvt.f64.u32	d7, s15
   1a484:	vdiv.f64	d5, d6, d7
   1a488:	vstr	d5, [sp]
   1a48c:	mov	r3, r7
   1a490:	movw	r2, #8444	; 0x20fc
   1a494:	movt	r2, #3
   1a498:	mov	r1, #1
   1a49c:	mov	r0, r4
   1a4a0:	bl	11a18 <__fprintf_chk@plt>
   1a4a4:	mov	r3, r8
   1a4a8:	movw	r2, #8480	; 0x2120
   1a4ac:	movt	r2, #3
   1a4b0:	mov	r1, #1
   1a4b4:	mov	r0, r4
   1a4b8:	bl	11a18 <__fprintf_chk@plt>
   1a4bc:	add	sp, sp, #8
   1a4c0:	ldrd	r4, [sp]
   1a4c4:	ldrd	r6, [sp, #8]
   1a4c8:	ldr	r8, [sp, #16]
   1a4cc:	add	sp, sp, #20
   1a4d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4d4:	nop	{0}
   1a4d8:	andeq	r0, r0, r0
   1a4dc:	subsmi	r0, r9, r0
   1a4e0:	strd	r4, [sp, #-16]!
   1a4e4:	str	r6, [sp, #8]
   1a4e8:	str	lr, [sp, #12]
   1a4ec:	mov	r6, r0
   1a4f0:	mov	r5, r1
   1a4f4:	bl	19fe4 <__assert_fail@plt+0x8440>
   1a4f8:	ldr	r1, [r0]
   1a4fc:	cmp	r1, #0
   1a500:	beq	1a554 <__assert_fail@plt+0x89b0>
   1a504:	mov	r4, r0
   1a508:	cmp	r1, r5
   1a50c:	beq	1a53c <__assert_fail@plt+0x8998>
   1a510:	ldr	r3, [r6, #28]
   1a514:	mov	r0, r5
   1a518:	blx	r3
   1a51c:	cmp	r0, #0
   1a520:	bne	1a53c <__assert_fail@plt+0x8998>
   1a524:	ldr	r4, [r4, #4]
   1a528:	cmp	r4, #0
   1a52c:	beq	1a540 <__assert_fail@plt+0x899c>
   1a530:	ldr	r1, [r4]
   1a534:	cmp	r1, r5
   1a538:	bne	1a510 <__assert_fail@plt+0x896c>
   1a53c:	ldr	r4, [r4]
   1a540:	mov	r0, r4
   1a544:	ldrd	r4, [sp]
   1a548:	ldr	r6, [sp, #8]
   1a54c:	add	sp, sp, #12
   1a550:	pop	{pc}		; (ldr pc, [sp], #4)
   1a554:	mov	r4, r1
   1a558:	b	1a540 <__assert_fail@plt+0x899c>
   1a55c:	ldr	r3, [r0, #16]
   1a560:	cmp	r3, #0
   1a564:	beq	1a5bc <__assert_fail@plt+0x8a18>
   1a568:	ldr	r2, [r0]
   1a56c:	ldr	r1, [r0, #4]
   1a570:	cmp	r2, r1
   1a574:	bcs	1a5b0 <__assert_fail@plt+0x8a0c>
   1a578:	ldr	r0, [r2]
   1a57c:	cmp	r0, #0
   1a580:	bxne	lr
   1a584:	mov	r3, r2
   1a588:	sub	r1, r1, #1
   1a58c:	sub	r1, r1, r2
   1a590:	bic	r1, r1, #7
   1a594:	add	r2, r2, r1
   1a598:	cmp	r3, r2
   1a59c:	beq	1a5b0 <__assert_fail@plt+0x8a0c>
   1a5a0:	ldr	r0, [r3, #8]!
   1a5a4:	cmp	r0, #0
   1a5a8:	beq	1a598 <__assert_fail@plt+0x89f4>
   1a5ac:	bx	lr
   1a5b0:	str	r4, [sp, #-8]!
   1a5b4:	str	lr, [sp, #4]
   1a5b8:	bl	11b68 <abort@plt>
   1a5bc:	mov	r0, #0
   1a5c0:	bx	lr
   1a5c4:	strd	r4, [sp, #-16]!
   1a5c8:	str	r6, [sp, #8]
   1a5cc:	str	lr, [sp, #12]
   1a5d0:	mov	r5, r0
   1a5d4:	mov	r4, r1
   1a5d8:	bl	19fe4 <__assert_fail@plt+0x8440>
   1a5dc:	mov	r2, r0
   1a5e0:	mov	r3, r0
   1a5e4:	b	1a5f4 <__assert_fail@plt+0x8a50>
   1a5e8:	ldr	r3, [r3, #4]
   1a5ec:	cmp	r3, #0
   1a5f0:	beq	1a610 <__assert_fail@plt+0x8a6c>
   1a5f4:	ldr	r1, [r3]
   1a5f8:	cmp	r1, r4
   1a5fc:	bne	1a5e8 <__assert_fail@plt+0x8a44>
   1a600:	ldr	r3, [r3, #4]
   1a604:	cmp	r3, #0
   1a608:	ldrne	r0, [r3]
   1a60c:	bne	1a634 <__assert_fail@plt+0x8a90>
   1a610:	ldr	r3, [r5, #4]
   1a614:	add	r2, r2, #8
   1a618:	cmp	r3, r2
   1a61c:	bls	1a630 <__assert_fail@plt+0x8a8c>
   1a620:	ldr	r0, [r2]
   1a624:	cmp	r0, #0
   1a628:	beq	1a614 <__assert_fail@plt+0x8a70>
   1a62c:	b	1a634 <__assert_fail@plt+0x8a90>
   1a630:	mov	r0, #0
   1a634:	ldrd	r4, [sp]
   1a638:	ldr	r6, [sp, #8]
   1a63c:	add	sp, sp, #12
   1a640:	pop	{pc}		; (ldr pc, [sp], #4)
   1a644:	strd	r4, [sp, #-12]!
   1a648:	str	lr, [sp, #8]
   1a64c:	ldr	r4, [r0]
   1a650:	ldr	r3, [r0, #4]
   1a654:	cmp	r4, r3
   1a658:	bcs	1a6c0 <__assert_fail@plt+0x8b1c>
   1a65c:	mov	r5, r0
   1a660:	mov	r0, #0
   1a664:	b	1a678 <__assert_fail@plt+0x8ad4>
   1a668:	add	r4, r4, #8
   1a66c:	ldr	r3, [r5, #4]
   1a670:	cmp	r3, r4
   1a674:	bls	1a6b4 <__assert_fail@plt+0x8b10>
   1a678:	ldr	r3, [r4]
   1a67c:	cmp	r3, #0
   1a680:	beq	1a668 <__assert_fail@plt+0x8ac4>
   1a684:	cmp	r2, r0
   1a688:	bls	1a6b4 <__assert_fail@plt+0x8b10>
   1a68c:	add	ip, r1, r0, lsl #2
   1a690:	mov	r3, r4
   1a694:	add	r0, r0, #1
   1a698:	ldr	lr, [r3]
   1a69c:	str	lr, [ip], #4
   1a6a0:	ldr	r3, [r3, #4]
   1a6a4:	cmp	r3, #0
   1a6a8:	beq	1a668 <__assert_fail@plt+0x8ac4>
   1a6ac:	cmp	r2, r0
   1a6b0:	bne	1a694 <__assert_fail@plt+0x8af0>
   1a6b4:	ldrd	r4, [sp]
   1a6b8:	add	sp, sp, #8
   1a6bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6c0:	mov	r0, #0
   1a6c4:	b	1a6b4 <__assert_fail@plt+0x8b10>
   1a6c8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a6cc:	strd	r6, [sp, #8]
   1a6d0:	strd	r8, [sp, #16]
   1a6d4:	str	sl, [sp, #24]
   1a6d8:	str	lr, [sp, #28]
   1a6dc:	ldr	r8, [r0]
   1a6e0:	ldr	r3, [r0, #4]
   1a6e4:	cmp	r8, r3
   1a6e8:	bcs	1a748 <__assert_fail@plt+0x8ba4>
   1a6ec:	mov	r7, r2
   1a6f0:	mov	r6, r1
   1a6f4:	mov	r9, r0
   1a6f8:	mov	r5, #0
   1a6fc:	b	1a710 <__assert_fail@plt+0x8b6c>
   1a700:	add	r8, r8, #8
   1a704:	ldr	r3, [r9, #4]
   1a708:	cmp	r3, r8
   1a70c:	bls	1a74c <__assert_fail@plt+0x8ba8>
   1a710:	ldr	r3, [r8]
   1a714:	cmp	r3, #0
   1a718:	beq	1a700 <__assert_fail@plt+0x8b5c>
   1a71c:	mov	r4, r8
   1a720:	mov	r1, r7
   1a724:	ldr	r0, [r4]
   1a728:	blx	r6
   1a72c:	cmp	r0, #0
   1a730:	beq	1a74c <__assert_fail@plt+0x8ba8>
   1a734:	add	r5, r5, #1
   1a738:	ldr	r4, [r4, #4]
   1a73c:	cmp	r4, #0
   1a740:	bne	1a720 <__assert_fail@plt+0x8b7c>
   1a744:	b	1a700 <__assert_fail@plt+0x8b5c>
   1a748:	mov	r5, #0
   1a74c:	mov	r0, r5
   1a750:	ldrd	r4, [sp]
   1a754:	ldrd	r6, [sp, #8]
   1a758:	ldrd	r8, [sp, #16]
   1a75c:	ldr	sl, [sp, #24]
   1a760:	add	sp, sp, #28
   1a764:	pop	{pc}		; (ldr pc, [sp], #4)
   1a768:	ldrb	r2, [r0]
   1a76c:	cmp	r2, #0
   1a770:	beq	1a79c <__assert_fail@plt+0x8bf8>
   1a774:	mov	r3, #0
   1a778:	rsb	r3, r3, r3, lsl #5
   1a77c:	add	r3, r3, r2
   1a780:	udiv	r2, r3, r1
   1a784:	mls	r3, r1, r2, r3
   1a788:	ldrb	r2, [r0, #1]!
   1a78c:	cmp	r2, #0
   1a790:	bne	1a778 <__assert_fail@plt+0x8bd4>
   1a794:	mov	r0, r3
   1a798:	bx	lr
   1a79c:	mov	r3, #0
   1a7a0:	b	1a794 <__assert_fail@plt+0x8bf0>
   1a7a4:	strd	r4, [sp, #-8]!
   1a7a8:	movw	r3, #8376	; 0x20b8
   1a7ac:	movt	r3, #3
   1a7b0:	ldrd	r4, [r3]
   1a7b4:	strd	r4, [r0]
   1a7b8:	ldrd	r4, [r3, #8]
   1a7bc:	strd	r4, [r0, #8]
   1a7c0:	ldr	r3, [r3, #16]
   1a7c4:	str	r3, [r0, #16]
   1a7c8:	ldrd	r4, [sp]
   1a7cc:	add	sp, sp, #8
   1a7d0:	bx	lr
   1a7d4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a7d8:	strd	r6, [sp, #8]
   1a7dc:	str	r8, [sp, #16]
   1a7e0:	str	lr, [sp, #20]
   1a7e4:	mov	r8, r0
   1a7e8:	mov	r5, r1
   1a7ec:	subs	r7, r2, #0
   1a7f0:	movw	r2, #40440	; 0x9df8
   1a7f4:	movt	r2, #1
   1a7f8:	cmp	r7, #0
   1a7fc:	moveq	r7, r2
   1a800:	subs	r6, r3, #0
   1a804:	movw	r3, #40456	; 0x9e08
   1a808:	movt	r3, #1
   1a80c:	cmp	r6, #0
   1a810:	moveq	r6, r3
   1a814:	mov	r0, #40	; 0x28
   1a818:	bl	2f010 <__assert_fail@plt+0x1d46c>
   1a81c:	subs	r4, r0, #0
   1a820:	beq	1a8a0 <__assert_fail@plt+0x8cfc>
   1a824:	movw	r3, #8376	; 0x20b8
   1a828:	movt	r3, #3
   1a82c:	cmp	r5, #0
   1a830:	moveq	r5, r3
   1a834:	str	r5, [r4, #20]
   1a838:	mov	r0, r4
   1a83c:	bl	19e18 <__assert_fail@plt+0x8274>
   1a840:	cmp	r0, #0
   1a844:	beq	1a8b8 <__assert_fail@plt+0x8d14>
   1a848:	mov	r1, r5
   1a84c:	mov	r0, r8
   1a850:	bl	19edc <__assert_fail@plt+0x8338>
   1a854:	str	r0, [r4, #8]
   1a858:	cmp	r0, #0
   1a85c:	beq	1a8b8 <__assert_fail@plt+0x8d14>
   1a860:	mov	r1, #8
   1a864:	bl	2ef9c <__assert_fail@plt+0x1d3f8>
   1a868:	str	r0, [r4]
   1a86c:	cmp	r0, #0
   1a870:	beq	1a8b8 <__assert_fail@plt+0x8d14>
   1a874:	ldr	r3, [r4, #8]
   1a878:	add	r0, r0, r3, lsl #3
   1a87c:	str	r0, [r4, #4]
   1a880:	mov	r3, #0
   1a884:	str	r3, [r4, #12]
   1a888:	str	r3, [r4, #16]
   1a88c:	str	r7, [r4, #24]
   1a890:	str	r6, [r4, #28]
   1a894:	ldr	r2, [sp, #24]
   1a898:	str	r2, [r4, #32]
   1a89c:	str	r3, [r4, #36]	; 0x24
   1a8a0:	mov	r0, r4
   1a8a4:	ldrd	r4, [sp]
   1a8a8:	ldrd	r6, [sp, #8]
   1a8ac:	ldr	r8, [sp, #16]
   1a8b0:	add	sp, sp, #20
   1a8b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8b8:	mov	r0, r4
   1a8bc:	bl	17750 <__assert_fail@plt+0x5bac>
   1a8c0:	mov	r4, #0
   1a8c4:	b	1a8a0 <__assert_fail@plt+0x8cfc>
   1a8c8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a8cc:	strd	r6, [sp, #8]
   1a8d0:	str	r8, [sp, #16]
   1a8d4:	str	lr, [sp, #20]
   1a8d8:	mov	r5, r0
   1a8dc:	ldr	r6, [r0]
   1a8e0:	ldr	r3, [r0, #4]
   1a8e4:	cmp	r6, r3
   1a8e8:	bcs	1a980 <__assert_fail@plt+0x8ddc>
   1a8ec:	add	r6, r6, #8
   1a8f0:	mov	r7, #0
   1a8f4:	b	1a960 <__assert_fail@plt+0x8dbc>
   1a8f8:	str	r7, [r4]
   1a8fc:	ldr	r3, [r4, #4]
   1a900:	ldr	r2, [r5, #36]	; 0x24
   1a904:	str	r2, [r4, #4]
   1a908:	str	r4, [r5, #36]	; 0x24
   1a90c:	mov	r4, r3
   1a910:	cmp	r3, #0
   1a914:	beq	1a930 <__assert_fail@plt+0x8d8c>
   1a918:	ldr	r3, [r5, #32]
   1a91c:	cmp	r3, #0
   1a920:	beq	1a8f8 <__assert_fail@plt+0x8d54>
   1a924:	ldr	r0, [r4]
   1a928:	blx	r3
   1a92c:	b	1a8f8 <__assert_fail@plt+0x8d54>
   1a930:	ldr	r3, [r5, #32]
   1a934:	cmp	r3, #0
   1a938:	beq	1a944 <__assert_fail@plt+0x8da0>
   1a93c:	ldr	r0, [r8, #-8]
   1a940:	blx	r3
   1a944:	str	r7, [r8, #-8]
   1a948:	str	r7, [r8, #-4]
   1a94c:	add	r2, r6, #8
   1a950:	ldr	r3, [r5, #4]
   1a954:	cmp	r3, r6
   1a958:	bls	1a980 <__assert_fail@plt+0x8ddc>
   1a95c:	mov	r6, r2
   1a960:	mov	r8, r6
   1a964:	ldr	r3, [r6, #-8]
   1a968:	cmp	r3, #0
   1a96c:	beq	1a94c <__assert_fail@plt+0x8da8>
   1a970:	ldr	r4, [r6, #-4]
   1a974:	cmp	r4, #0
   1a978:	bne	1a918 <__assert_fail@plt+0x8d74>
   1a97c:	b	1a930 <__assert_fail@plt+0x8d8c>
   1a980:	mov	r3, #0
   1a984:	str	r3, [r5, #12]
   1a988:	str	r3, [r5, #16]
   1a98c:	ldrd	r4, [sp]
   1a990:	ldrd	r6, [sp, #8]
   1a994:	ldr	r8, [sp, #16]
   1a998:	add	sp, sp, #20
   1a99c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9a0:	strd	r4, [sp, #-16]!
   1a9a4:	str	r6, [sp, #8]
   1a9a8:	str	lr, [sp, #12]
   1a9ac:	mov	r6, r0
   1a9b0:	ldr	r3, [r0, #32]
   1a9b4:	cmp	r3, #0
   1a9b8:	beq	1aa18 <__assert_fail@plt+0x8e74>
   1a9bc:	ldr	r3, [r0, #16]
   1a9c0:	cmp	r3, #0
   1a9c4:	beq	1aa18 <__assert_fail@plt+0x8e74>
   1a9c8:	ldr	r5, [r0]
   1a9cc:	ldr	r3, [r0, #4]
   1a9d0:	cmp	r5, r3
   1a9d4:	bcc	1a9ec <__assert_fail@plt+0x8e48>
   1a9d8:	b	1aa28 <__assert_fail@plt+0x8e84>
   1a9dc:	add	r5, r5, #8
   1a9e0:	ldr	r3, [r6, #4]
   1a9e4:	cmp	r3, r5
   1a9e8:	bls	1aa18 <__assert_fail@plt+0x8e74>
   1a9ec:	ldr	r3, [r5]
   1a9f0:	cmp	r3, #0
   1a9f4:	beq	1a9dc <__assert_fail@plt+0x8e38>
   1a9f8:	mov	r4, r5
   1a9fc:	ldr	r3, [r6, #32]
   1aa00:	ldr	r0, [r4]
   1aa04:	blx	r3
   1aa08:	ldr	r4, [r4, #4]
   1aa0c:	cmp	r4, #0
   1aa10:	bne	1a9fc <__assert_fail@plt+0x8e58>
   1aa14:	b	1a9dc <__assert_fail@plt+0x8e38>
   1aa18:	ldr	r5, [r6]
   1aa1c:	ldr	r3, [r6, #4]
   1aa20:	cmp	r5, r3
   1aa24:	bcc	1aa78 <__assert_fail@plt+0x8ed4>
   1aa28:	ldr	r0, [r6, #36]	; 0x24
   1aa2c:	cmp	r0, #0
   1aa30:	beq	1aa48 <__assert_fail@plt+0x8ea4>
   1aa34:	ldr	r4, [r0, #4]
   1aa38:	bl	17750 <__assert_fail@plt+0x5bac>
   1aa3c:	mov	r0, r4
   1aa40:	cmp	r4, #0
   1aa44:	bne	1aa34 <__assert_fail@plt+0x8e90>
   1aa48:	ldr	r0, [r6]
   1aa4c:	bl	17750 <__assert_fail@plt+0x5bac>
   1aa50:	mov	r0, r6
   1aa54:	bl	17750 <__assert_fail@plt+0x5bac>
   1aa58:	ldrd	r4, [sp]
   1aa5c:	ldr	r6, [sp, #8]
   1aa60:	add	sp, sp, #12
   1aa64:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa68:	add	r5, r5, #8
   1aa6c:	ldr	r3, [r6, #4]
   1aa70:	cmp	r3, r5
   1aa74:	bls	1aa28 <__assert_fail@plt+0x8e84>
   1aa78:	ldr	r0, [r5, #4]
   1aa7c:	cmp	r0, #0
   1aa80:	beq	1aa68 <__assert_fail@plt+0x8ec4>
   1aa84:	ldr	r4, [r0, #4]
   1aa88:	bl	17750 <__assert_fail@plt+0x5bac>
   1aa8c:	mov	r0, r4
   1aa90:	cmp	r4, #0
   1aa94:	bne	1aa84 <__assert_fail@plt+0x8ee0>
   1aa98:	b	1aa68 <__assert_fail@plt+0x8ec4>
   1aa9c:	strd	r4, [sp, #-12]!
   1aaa0:	str	lr, [sp, #8]
   1aaa4:	sub	sp, sp, #44	; 0x2c
   1aaa8:	mov	r4, r0
   1aaac:	mov	r0, r1
   1aab0:	ldr	r1, [r4, #20]
   1aab4:	bl	19edc <__assert_fail@plt+0x8338>
   1aab8:	subs	r5, r0, #0
   1aabc:	beq	1abb4 <__assert_fail@plt+0x9010>
   1aac0:	ldr	r3, [r4, #8]
   1aac4:	cmp	r3, r5
   1aac8:	beq	1abcc <__assert_fail@plt+0x9028>
   1aacc:	mov	r1, #8
   1aad0:	mov	r0, r5
   1aad4:	bl	2ef9c <__assert_fail@plt+0x1d3f8>
   1aad8:	str	r0, [sp]
   1aadc:	cmp	r0, #0
   1aae0:	beq	1abd4 <__assert_fail@plt+0x9030>
   1aae4:	str	r5, [sp, #8]
   1aae8:	add	r0, r0, r5, lsl #3
   1aaec:	str	r0, [sp, #4]
   1aaf0:	mov	r2, #0
   1aaf4:	str	r2, [sp, #12]
   1aaf8:	str	r2, [sp, #16]
   1aafc:	ldr	r3, [r4, #20]
   1ab00:	str	r3, [sp, #20]
   1ab04:	ldr	r3, [r4, #24]
   1ab08:	str	r3, [sp, #24]
   1ab0c:	ldr	r3, [r4, #28]
   1ab10:	str	r3, [sp, #28]
   1ab14:	ldr	r3, [r4, #32]
   1ab18:	str	r3, [sp, #32]
   1ab1c:	ldr	r3, [r4, #36]	; 0x24
   1ab20:	str	r3, [sp, #36]	; 0x24
   1ab24:	mov	r1, r4
   1ab28:	mov	r0, sp
   1ab2c:	bl	1a024 <__assert_fail@plt+0x8480>
   1ab30:	subs	r5, r0, #0
   1ab34:	bne	1ab7c <__assert_fail@plt+0x8fd8>
   1ab38:	ldr	r3, [sp, #36]	; 0x24
   1ab3c:	str	r3, [r4, #36]	; 0x24
   1ab40:	mov	r2, #1
   1ab44:	mov	r1, sp
   1ab48:	mov	r0, r4
   1ab4c:	bl	1a024 <__assert_fail@plt+0x8480>
   1ab50:	cmp	r0, #0
   1ab54:	beq	1abb0 <__assert_fail@plt+0x900c>
   1ab58:	mov	r2, #0
   1ab5c:	mov	r1, sp
   1ab60:	mov	r0, r4
   1ab64:	bl	1a024 <__assert_fail@plt+0x8480>
   1ab68:	cmp	r0, #0
   1ab6c:	beq	1abb0 <__assert_fail@plt+0x900c>
   1ab70:	ldr	r0, [sp]
   1ab74:	bl	17750 <__assert_fail@plt+0x5bac>
   1ab78:	b	1abb8 <__assert_fail@plt+0x9014>
   1ab7c:	ldr	r0, [r4]
   1ab80:	bl	17750 <__assert_fail@plt+0x5bac>
   1ab84:	ldr	r3, [sp]
   1ab88:	str	r3, [r4]
   1ab8c:	ldr	r3, [sp, #4]
   1ab90:	str	r3, [r4, #4]
   1ab94:	ldr	r3, [sp, #8]
   1ab98:	str	r3, [r4, #8]
   1ab9c:	ldr	r3, [sp, #12]
   1aba0:	str	r3, [r4, #12]
   1aba4:	ldr	r3, [sp, #36]	; 0x24
   1aba8:	str	r3, [r4, #36]	; 0x24
   1abac:	b	1abb8 <__assert_fail@plt+0x9014>
   1abb0:	bl	11b68 <abort@plt>
   1abb4:	mov	r5, #0
   1abb8:	mov	r0, r5
   1abbc:	add	sp, sp, #44	; 0x2c
   1abc0:	ldrd	r4, [sp]
   1abc4:	add	sp, sp, #8
   1abc8:	pop	{pc}		; (ldr pc, [sp], #4)
   1abcc:	mov	r5, #1
   1abd0:	b	1abb8 <__assert_fail@plt+0x9014>
   1abd4:	mov	r5, #0
   1abd8:	b	1abb8 <__assert_fail@plt+0x9014>
   1abdc:	strd	r4, [sp, #-16]!
   1abe0:	str	r6, [sp, #8]
   1abe4:	str	lr, [sp, #12]
   1abe8:	sub	sp, sp, #8
   1abec:	subs	r5, r1, #0
   1abf0:	beq	1ac3c <__assert_fail@plt+0x9098>
   1abf4:	mov	r4, r0
   1abf8:	mov	r6, r2
   1abfc:	mov	r3, #0
   1ac00:	add	r2, sp, #4
   1ac04:	mov	r1, r5
   1ac08:	bl	1a1a8 <__assert_fail@plt+0x8604>
   1ac0c:	cmp	r0, #0
   1ac10:	beq	1ac40 <__assert_fail@plt+0x909c>
   1ac14:	cmp	r6, #0
   1ac18:	moveq	r0, #0
   1ac1c:	beq	1ac28 <__assert_fail@plt+0x9084>
   1ac20:	str	r0, [r6]
   1ac24:	mov	r0, #0
   1ac28:	add	sp, sp, #8
   1ac2c:	ldrd	r4, [sp]
   1ac30:	ldr	r6, [sp, #8]
   1ac34:	add	sp, sp, #12
   1ac38:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac3c:	bl	11b68 <abort@plt>
   1ac40:	vldr	s15, [r4, #12]
   1ac44:	vcvt.f32.u32	s14, s15
   1ac48:	ldr	r3, [r4, #20]
   1ac4c:	vldr	s15, [r4, #8]
   1ac50:	vcvt.f32.u32	s15, s15
   1ac54:	vldr	s13, [r3, #8]
   1ac58:	vmul.f32	s15, s15, s13
   1ac5c:	vcmpe.f32	s14, s15
   1ac60:	vmrs	APSR_nzcv, fpscr
   1ac64:	bgt	1acb4 <__assert_fail@plt+0x9110>
   1ac68:	ldr	r3, [sp, #4]
   1ac6c:	ldr	r2, [r3]
   1ac70:	cmp	r2, #0
   1ac74:	beq	1ad60 <__assert_fail@plt+0x91bc>
   1ac78:	ldr	r0, [r4, #36]	; 0x24
   1ac7c:	cmp	r0, #0
   1ac80:	beq	1ad48 <__assert_fail@plt+0x91a4>
   1ac84:	ldr	r3, [r0, #4]
   1ac88:	str	r3, [r4, #36]	; 0x24
   1ac8c:	str	r5, [r0]
   1ac90:	ldr	r3, [sp, #4]
   1ac94:	ldr	r2, [r3, #4]
   1ac98:	str	r2, [r0, #4]
   1ac9c:	str	r0, [r3, #4]
   1aca0:	ldr	r3, [r4, #16]
   1aca4:	add	r3, r3, #1
   1aca8:	str	r3, [r4, #16]
   1acac:	mov	r0, #1
   1acb0:	b	1ac28 <__assert_fail@plt+0x9084>
   1acb4:	mov	r0, r4
   1acb8:	bl	19e18 <__assert_fail@plt+0x8274>
   1acbc:	ldr	r3, [r4, #20]
   1acc0:	vldr	s13, [r3, #8]
   1acc4:	vldr	s15, [r4, #8]
   1acc8:	vcvt.f32.u32	s15, s15
   1accc:	vldr	s14, [r4, #12]
   1acd0:	vcvt.f32.u32	s14, s14
   1acd4:	vmul.f32	s12, s13, s15
   1acd8:	vcmpe.f32	s14, s12
   1acdc:	vmrs	APSR_nzcv, fpscr
   1ace0:	ble	1ac68 <__assert_fail@plt+0x90c4>
   1ace4:	ldrb	r2, [r3, #16]
   1ace8:	cmp	r2, #0
   1acec:	vldr	s14, [r3, #12]
   1acf0:	vmul.f32	s15, s15, s14
   1acf4:	vmuleq.f32	s15, s15, s13
   1acf8:	vldr	s14, [pc, #132]	; 1ad84 <__assert_fail@plt+0x91e0>
   1acfc:	vcmpe.f32	s15, s14
   1ad00:	vmrs	APSR_nzcv, fpscr
   1ad04:	mvnge	r0, #0
   1ad08:	bge	1ac28 <__assert_fail@plt+0x9084>
   1ad0c:	vcvt.u32.f32	s15, s15
   1ad10:	vmov	r1, s15
   1ad14:	mov	r0, r4
   1ad18:	bl	1aa9c <__assert_fail@plt+0x8ef8>
   1ad1c:	cmp	r0, #0
   1ad20:	mvneq	r0, #0
   1ad24:	beq	1ac28 <__assert_fail@plt+0x9084>
   1ad28:	mov	r3, #0
   1ad2c:	add	r2, sp, #4
   1ad30:	mov	r1, r5
   1ad34:	mov	r0, r4
   1ad38:	bl	1a1a8 <__assert_fail@plt+0x8604>
   1ad3c:	cmp	r0, #0
   1ad40:	beq	1ac68 <__assert_fail@plt+0x90c4>
   1ad44:	bl	11b68 <abort@plt>
   1ad48:	mov	r0, #8
   1ad4c:	bl	2f010 <__assert_fail@plt+0x1d46c>
   1ad50:	cmp	r0, #0
   1ad54:	mvneq	r0, #0
   1ad58:	beq	1ac28 <__assert_fail@plt+0x9084>
   1ad5c:	b	1ac8c <__assert_fail@plt+0x90e8>
   1ad60:	str	r5, [r3]
   1ad64:	ldr	r3, [r4, #16]
   1ad68:	add	r3, r3, #1
   1ad6c:	str	r3, [r4, #16]
   1ad70:	ldr	r3, [r4, #12]
   1ad74:	add	r3, r3, #1
   1ad78:	str	r3, [r4, #12]
   1ad7c:	mov	r0, #1
   1ad80:	b	1ac28 <__assert_fail@plt+0x9084>
   1ad84:	svcmi	0x00800000
   1ad88:	str	r4, [sp, #-8]!
   1ad8c:	str	lr, [sp, #4]
   1ad90:	sub	sp, sp, #8
   1ad94:	mov	r4, r1
   1ad98:	add	r2, sp, #4
   1ad9c:	bl	1abdc <__assert_fail@plt+0x9038>
   1ada0:	cmn	r0, #1
   1ada4:	moveq	r0, #0
   1ada8:	beq	1adb8 <__assert_fail@plt+0x9214>
   1adac:	cmp	r0, #0
   1adb0:	ldreq	r0, [sp, #4]
   1adb4:	movne	r0, r4
   1adb8:	add	sp, sp, #8
   1adbc:	ldr	r4, [sp]
   1adc0:	add	sp, sp, #4
   1adc4:	pop	{pc}		; (ldr pc, [sp], #4)
   1adc8:	strd	r4, [sp, #-16]!
   1adcc:	str	r6, [sp, #8]
   1add0:	str	lr, [sp, #12]
   1add4:	sub	sp, sp, #8
   1add8:	mov	r4, r0
   1addc:	mov	r3, #1
   1ade0:	add	r2, sp, #4
   1ade4:	bl	1a1a8 <__assert_fail@plt+0x8604>
   1ade8:	subs	r5, r0, #0
   1adec:	beq	1ae0c <__assert_fail@plt+0x9268>
   1adf0:	ldr	r3, [r4, #16]
   1adf4:	sub	r3, r3, #1
   1adf8:	str	r3, [r4, #16]
   1adfc:	ldr	r3, [sp, #4]
   1ae00:	ldr	r3, [r3]
   1ae04:	cmp	r3, #0
   1ae08:	beq	1ae24 <__assert_fail@plt+0x9280>
   1ae0c:	mov	r0, r5
   1ae10:	add	sp, sp, #8
   1ae14:	ldrd	r4, [sp]
   1ae18:	ldr	r6, [sp, #8]
   1ae1c:	add	sp, sp, #12
   1ae20:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae24:	ldr	r3, [r4, #12]
   1ae28:	sub	r3, r3, #1
   1ae2c:	str	r3, [r4, #12]
   1ae30:	vmov	s15, r3
   1ae34:	vcvt.f32.u32	s15, s15
   1ae38:	ldr	r3, [r4, #20]
   1ae3c:	vldr	s14, [r4, #8]
   1ae40:	vcvt.f32.u32	s14, s14
   1ae44:	vldr	s13, [r3]
   1ae48:	vmul.f32	s14, s14, s13
   1ae4c:	vcmpe.f32	s15, s14
   1ae50:	vmrs	APSR_nzcv, fpscr
   1ae54:	bpl	1ae0c <__assert_fail@plt+0x9268>
   1ae58:	mov	r0, r4
   1ae5c:	bl	19e18 <__assert_fail@plt+0x8274>
   1ae60:	ldr	r3, [r4, #20]
   1ae64:	vldr	s15, [r4, #8]
   1ae68:	vcvt.f32.u32	s15, s15
   1ae6c:	vldr	s14, [r4, #12]
   1ae70:	vcvt.f32.u32	s13, s14
   1ae74:	vldr	s14, [r3]
   1ae78:	vmul.f32	s14, s15, s14
   1ae7c:	vcmpe.f32	s13, s14
   1ae80:	vmrs	APSR_nzcv, fpscr
   1ae84:	bpl	1ae0c <__assert_fail@plt+0x9268>
   1ae88:	ldrb	r2, [r3, #16]
   1ae8c:	cmp	r2, #0
   1ae90:	vldr	s14, [r3, #4]
   1ae94:	vmuleq.f32	s15, s15, s14
   1ae98:	vldreq	s14, [r3, #8]
   1ae9c:	vmul.f32	s15, s15, s14
   1aea0:	vcvt.u32.f32	s15, s15
   1aea4:	vmov	r1, s15
   1aea8:	mov	r0, r4
   1aeac:	bl	1aa9c <__assert_fail@plt+0x8ef8>
   1aeb0:	cmp	r0, #0
   1aeb4:	bne	1ae0c <__assert_fail@plt+0x9268>
   1aeb8:	ldr	r0, [r4, #36]	; 0x24
   1aebc:	cmp	r0, #0
   1aec0:	beq	1aed8 <__assert_fail@plt+0x9334>
   1aec4:	ldr	r6, [r0, #4]
   1aec8:	bl	17750 <__assert_fail@plt+0x5bac>
   1aecc:	mov	r0, r6
   1aed0:	cmp	r6, #0
   1aed4:	bne	1aec4 <__assert_fail@plt+0x9320>
   1aed8:	mov	r3, #0
   1aedc:	str	r3, [r4, #36]	; 0x24
   1aee0:	b	1ae0c <__assert_fail@plt+0x9268>
   1aee4:	str	r4, [sp, #-8]!
   1aee8:	str	lr, [sp, #4]
   1aeec:	bl	1adc8 <__assert_fail@plt+0x9224>
   1aef0:	ldr	r4, [sp]
   1aef4:	add	sp, sp, #4
   1aef8:	pop	{pc}		; (ldr pc, [sp], #4)
   1aefc:	andeq	r0, r0, r0
   1af00:	str	r4, [sp, #-16]!
   1af04:	strd	r6, [sp, #4]
   1af08:	str	lr, [sp, #12]
   1af0c:	vpush	{d8}
   1af10:	vmov.f64	d8, d0
   1af14:	cmp	r0, #1
   1af18:	beq	1af80 <__assert_fail@plt+0x93dc>
   1af1c:	mov	r4, r0
   1af20:	vldr	d7, [pc, #112]	; 1af98 <__assert_fail@plt+0x93f4>
   1af24:	vcmpe.f64	d0, d7
   1af28:	vmrs	APSR_nzcv, fpscr
   1af2c:	bpl	1af80 <__assert_fail@plt+0x93dc>
   1af30:	vmov	r0, r1, d0
   1af34:	bl	305b8 <__assert_fail@plt+0x1ea14>
   1af38:	mov	r6, r0
   1af3c:	mov	r7, r1
   1af40:	cmp	r4, #0
   1af44:	movne	r0, #0
   1af48:	bne	1af68 <__assert_fail@plt+0x93c4>
   1af4c:	mov	r0, r6
   1af50:	bl	30424 <__assert_fail@plt+0x1e880>
   1af54:	vmov	d7, r0, r1
   1af58:	vcmp.f64	d7, d8
   1af5c:	vmrs	APSR_nzcv, fpscr
   1af60:	movne	r0, #1
   1af64:	moveq	r0, #0
   1af68:	adds	r2, r6, r0
   1af6c:	adc	r3, r7, r0, asr #31
   1af70:	mov	r0, r2
   1af74:	mov	r1, r3
   1af78:	bl	30424 <__assert_fail@plt+0x1e880>
   1af7c:	vmov	d8, r0, r1
   1af80:	vmov.f64	d0, d8
   1af84:	vpop	{d8}
   1af88:	ldr	r4, [sp]
   1af8c:	ldrd	r6, [sp, #4]
   1af90:	add	sp, sp, #12
   1af94:	pop	{pc}		; (ldr pc, [sp], #4)
   1af98:	andeq	r0, r0, r0
   1af9c:	mvnsmi	r0, #0
   1afa0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1afa4:	strd	r6, [sp, #8]
   1afa8:	strd	r8, [sp, #16]
   1afac:	strd	sl, [sp, #24]
   1afb0:	str	lr, [sp, #32]
   1afb4:	vpush	{d8-d9}
   1afb8:	sub	sp, sp, #124	; 0x7c
   1afbc:	mov	r6, r0
   1afc0:	mov	r7, r1
   1afc4:	mov	r8, r2
   1afc8:	str	r2, [sp, #36]	; 0x24
   1afcc:	mov	r9, r3
   1afd0:	and	r3, r3, #3
   1afd4:	str	r3, [sp, #8]
   1afd8:	ands	r3, r9, #32
   1afdc:	str	r3, [sp, #44]	; 0x2c
   1afe0:	movne	r3, #1024	; 0x400
   1afe4:	moveq	r3, #1000	; 0x3e8
   1afe8:	str	r3, [sp, #40]	; 0x28
   1afec:	bl	11aa8 <localeconv@plt>
   1aff0:	mov	r4, r0
   1aff4:	ldr	r5, [r0]
   1aff8:	mov	r0, r5
   1affc:	bl	11988 <strlen@plt>
   1b000:	mov	fp, r0
   1b004:	sub	r2, r0, #1
   1b008:	cmp	r2, #16
   1b00c:	movcc	fp, r0
   1b010:	movcs	fp, #1
   1b014:	movw	r3, #6508	; 0x196c
   1b018:	movt	r3, #3
   1b01c:	cmp	r2, #15
   1b020:	movhi	r5, r3
   1b024:	ldr	sl, [r4, #8]
   1b028:	ldr	r3, [r4, #4]
   1b02c:	mov	r4, r3
   1b030:	mov	r0, r3
   1b034:	bl	11988 <strlen@plt>
   1b038:	movw	r3, #8476	; 0x211c
   1b03c:	movt	r3, #3
   1b040:	mov	r1, r4
   1b044:	cmp	r0, #16
   1b048:	movhi	r1, r3
   1b04c:	str	r1, [sp, #20]
   1b050:	add	r3, r8, #644	; 0x284
   1b054:	add	r3, r3, #3
   1b058:	str	r3, [sp, #32]
   1b05c:	ldrd	r2, [sp, #184]	; 0xb8
   1b060:	ldrd	r0, [sp, #176]	; 0xb0
   1b064:	cmp	r3, r1
   1b068:	cmpeq	r2, r0
   1b06c:	bhi	1b1f0 <__assert_fail@plt+0x964c>
   1b070:	bl	3056c <__assert_fail@plt+0x1e9c8>
   1b074:	orrs	r3, r2, r3
   1b078:	bne	1b0bc <__assert_fail@plt+0x9518>
   1b07c:	ldrd	r2, [sp, #184]	; 0xb8
   1b080:	ldrd	r0, [sp, #176]	; 0xb0
   1b084:	bl	3056c <__assert_fail@plt+0x1e9c8>
   1b088:	mov	r2, r0
   1b08c:	mov	r3, r1
   1b090:	mul	r0, r0, r7
   1b094:	mla	ip, r6, r1, r0
   1b098:	umull	r0, r1, r2, r6
   1b09c:	strd	r0, [sp, #24]
   1b0a0:	add	r1, ip, r1
   1b0a4:	str	r1, [sp, #28]
   1b0a8:	ldrd	r0, [sp, #24]
   1b0ac:	bl	3056c <__assert_fail@plt+0x1e9c8>
   1b0b0:	cmp	r1, r7
   1b0b4:	cmpeq	r0, r6
   1b0b8:	beq	1b38c <__assert_fail@plt+0x97e8>
   1b0bc:	ldrd	r0, [sp, #176]	; 0xb0
   1b0c0:	bl	30424 <__assert_fail@plt+0x1e880>
   1b0c4:	vmov	d9, r0, r1
   1b0c8:	ldrd	r0, [sp, #184]	; 0xb8
   1b0cc:	bl	30424 <__assert_fail@plt+0x1e880>
   1b0d0:	vmov	d7, r0, r1
   1b0d4:	vdiv.f64	d8, d9, d7
   1b0d8:	mov	r0, r6
   1b0dc:	mov	r1, r7
   1b0e0:	bl	30424 <__assert_fail@plt+0x1e880>
   1b0e4:	vmov	d7, r0, r1
   1b0e8:	vmul.f64	d0, d8, d7
   1b0ec:	tst	r9, #16
   1b0f0:	beq	1b2dc <__assert_fail@plt+0x9738>
   1b0f4:	vldr	d7, [pc, #1004]	; 1b4e8 <__assert_fail@plt+0x9944>
   1b0f8:	mov	r7, #0
   1b0fc:	vldr	s13, [sp, #40]	; 0x28
   1b100:	vcvt.f64.u32	d6, s13
   1b104:	vmul.f64	d7, d7, d6
   1b108:	add	r7, r7, #1
   1b10c:	vmul.f64	d5, d6, d7
   1b110:	vcmpe.f64	d5, d0
   1b114:	vmrs	APSR_nzcv, fpscr
   1b118:	movls	r3, #1
   1b11c:	movhi	r3, #0
   1b120:	cmp	r7, #7
   1b124:	movgt	r3, #0
   1b128:	andle	r3, r3, #1
   1b12c:	cmp	r3, #0
   1b130:	bne	1b104 <__assert_fail@plt+0x9560>
   1b134:	vdiv.f64	d8, d0, d7
   1b138:	vmov.f64	d0, d8
   1b13c:	ldr	r0, [sp, #8]
   1b140:	bl	1af00 <__assert_fail@plt+0x935c>
   1b144:	vstr	d0, [sp]
   1b148:	movw	r3, #8544	; 0x2160
   1b14c:	movt	r3, #3
   1b150:	mvn	r2, #0
   1b154:	mov	r1, #1
   1b158:	ldr	r4, [sp, #36]	; 0x24
   1b15c:	mov	r0, r4
   1b160:	bl	119d0 <__sprintf_chk@plt>
   1b164:	mov	r0, r4
   1b168:	bl	11988 <strlen@plt>
   1b16c:	mov	r8, r0
   1b170:	add	fp, fp, #1
   1b174:	ldr	r3, [sp, #44]	; 0x2c
   1b178:	clz	r3, r3
   1b17c:	lsr	r3, r3, #5
   1b180:	add	r3, r3, #1
   1b184:	add	r3, r3, fp
   1b188:	cmp	r3, r0
   1b18c:	bcc	1b1a8 <__assert_fail@plt+0x9604>
   1b190:	tst	r9, #8
   1b194:	beq	1b318 <__assert_fail@plt+0x9774>
   1b198:	add	r3, r4, r0
   1b19c:	ldrb	r3, [r3, #-1]
   1b1a0:	cmp	r3, #48	; 0x30
   1b1a4:	bne	1b318 <__assert_fail@plt+0x9774>
   1b1a8:	vldr	d9, [pc, #832]	; 1b4f0 <__assert_fail@plt+0x994c>
   1b1ac:	vmul.f64	d0, d8, d9
   1b1b0:	ldr	r0, [sp, #8]
   1b1b4:	bl	1af00 <__assert_fail@plt+0x935c>
   1b1b8:	vdiv.f64	d0, d0, d9
   1b1bc:	vstr	d0, [sp]
   1b1c0:	movw	r3, #8536	; 0x2158
   1b1c4:	movt	r3, #3
   1b1c8:	mvn	r2, #0
   1b1cc:	mov	r1, #1
   1b1d0:	ldr	r4, [sp, #36]	; 0x24
   1b1d4:	mov	r0, r4
   1b1d8:	bl	119d0 <__sprintf_chk@plt>
   1b1dc:	mov	r0, r4
   1b1e0:	bl	11988 <strlen@plt>
   1b1e4:	mov	r8, r0
   1b1e8:	mov	fp, #0
   1b1ec:	b	1b318 <__assert_fail@plt+0x9774>
   1b1f0:	ldrd	r2, [sp, #176]	; 0xb0
   1b1f4:	orrs	r3, r2, r3
   1b1f8:	beq	1b0bc <__assert_fail@plt+0x9518>
   1b1fc:	ldrd	r2, [sp, #176]	; 0xb0
   1b200:	ldrd	r0, [sp, #184]	; 0xb8
   1b204:	bl	3056c <__assert_fail@plt+0x1e9c8>
   1b208:	orrs	r3, r2, r3
   1b20c:	bne	1b0bc <__assert_fail@plt+0x9518>
   1b210:	ldrd	r2, [sp, #176]	; 0xb0
   1b214:	ldrd	r0, [sp, #184]	; 0xb8
   1b218:	bl	3056c <__assert_fail@plt+0x1e9c8>
   1b21c:	strd	r0, [sp, #48]	; 0x30
   1b220:	mov	r2, r0
   1b224:	mov	r3, r1
   1b228:	mov	r0, r6
   1b22c:	mov	r1, r7
   1b230:	bl	3056c <__assert_fail@plt+0x1e9c8>
   1b234:	lsl	r1, r3, #2
   1b238:	lsl	r4, r2, #2
   1b23c:	orr	r0, r1, r2, lsr #30
   1b240:	adds	r4, r4, r2
   1b244:	adc	r3, r0, r3
   1b248:	adds	r4, r4, r4
   1b24c:	adc	r8, r3, r3
   1b250:	ldrd	r2, [sp, #48]	; 0x30
   1b254:	mov	r0, r4
   1b258:	mov	r1, r8
   1b25c:	bl	3056c <__assert_fail@plt+0x1e9c8>
   1b260:	adds	r1, r2, r2
   1b264:	str	r1, [sp, #56]	; 0x38
   1b268:	adc	r3, r3, r3
   1b26c:	str	r3, [sp, #60]	; 0x3c
   1b270:	ldrd	r2, [sp, #48]	; 0x30
   1b274:	mov	r0, r6
   1b278:	mov	r1, r7
   1b27c:	bl	3056c <__assert_fail@plt+0x1e9c8>
   1b280:	strd	r0, [sp, #24]
   1b284:	ldrd	r2, [sp, #48]	; 0x30
   1b288:	mov	r0, r4
   1b28c:	mov	r1, r8
   1b290:	bl	3056c <__assert_fail@plt+0x1e9c8>
   1b294:	mov	r6, r0
   1b298:	ldrd	r2, [sp, #48]	; 0x30
   1b29c:	ldrd	r0, [sp, #56]	; 0x38
   1b2a0:	cmp	r3, r1
   1b2a4:	cmpeq	r2, r0
   1b2a8:	bls	1b2c0 <__assert_fail@plt+0x971c>
   1b2ac:	mov	r3, r0
   1b2b0:	orrs	r3, r3, r1
   1b2b4:	movne	r4, #1
   1b2b8:	moveq	r4, #0
   1b2bc:	b	1b394 <__assert_fail@plt+0x97f0>
   1b2c0:	ldrd	r2, [sp, #48]	; 0x30
   1b2c4:	ldrd	r0, [sp, #56]	; 0x38
   1b2c8:	cmp	r3, r1
   1b2cc:	cmpeq	r2, r0
   1b2d0:	movcc	r4, #3
   1b2d4:	movcs	r4, #2
   1b2d8:	b	1b394 <__assert_fail@plt+0x97f0>
   1b2dc:	ldr	r0, [sp, #8]
   1b2e0:	bl	1af00 <__assert_fail@plt+0x935c>
   1b2e4:	vstr	d0, [sp]
   1b2e8:	movw	r3, #8536	; 0x2158
   1b2ec:	movt	r3, #3
   1b2f0:	mvn	r2, #0
   1b2f4:	mov	r1, #1
   1b2f8:	ldr	r4, [sp, #36]	; 0x24
   1b2fc:	mov	r0, r4
   1b300:	bl	119d0 <__sprintf_chk@plt>
   1b304:	mov	r0, r4
   1b308:	bl	11988 <strlen@plt>
   1b30c:	mov	r8, r0
   1b310:	mov	fp, #0
   1b314:	mvn	r7, #0
   1b318:	ldr	r3, [sp, #32]
   1b31c:	sub	r6, r3, r8
   1b320:	mov	r2, r8
   1b324:	ldr	r1, [sp, #36]	; 0x24
   1b328:	mov	r0, r6
   1b32c:	bl	11748 <memmove@plt>
   1b330:	sub	r8, r8, fp
   1b334:	add	r8, r6, r8
   1b338:	tst	r9, #4
   1b33c:	bne	1b6dc <__assert_fail@plt+0x9b38>
   1b340:	tst	r9, #128	; 0x80
   1b344:	beq	1b35c <__assert_fail@plt+0x97b8>
   1b348:	cmp	r7, #0
   1b34c:	blt	1b76c <__assert_fail@plt+0x9bc8>
   1b350:	and	r3, r9, #256	; 0x100
   1b354:	orrs	r2, r3, r7
   1b358:	bne	1b7cc <__assert_fail@plt+0x9c28>
   1b35c:	mov	r3, #0
   1b360:	ldr	r2, [sp, #32]
   1b364:	strb	r3, [r2]
   1b368:	mov	r0, r6
   1b36c:	add	sp, sp, #124	; 0x7c
   1b370:	vpop	{d8-d9}
   1b374:	ldrd	r4, [sp]
   1b378:	ldrd	r6, [sp, #8]
   1b37c:	ldrd	r8, [sp, #16]
   1b380:	ldrd	sl, [sp, #24]
   1b384:	add	sp, sp, #32
   1b388:	pop	{pc}		; (ldr pc, [sp], #4)
   1b38c:	mov	r4, #0
   1b390:	mov	r6, r4
   1b394:	ands	r3, r9, #16
   1b398:	str	r3, [sp, #48]	; 0x30
   1b39c:	beq	1b554 <__assert_fail@plt+0x99b0>
   1b3a0:	ldr	r8, [sp, #40]	; 0x28
   1b3a4:	mov	r3, #0
   1b3a8:	ldrd	r0, [sp, #24]
   1b3ac:	cmp	r3, r1
   1b3b0:	cmpeq	r8, r0
   1b3b4:	bhi	1b58c <__assert_fail@plt+0x99e8>
   1b3b8:	mov	r7, #0
   1b3bc:	str	r5, [sp, #56]	; 0x38
   1b3c0:	str	fp, [sp, #64]	; 0x40
   1b3c4:	str	sl, [sp, #68]	; 0x44
   1b3c8:	mov	sl, r8
   1b3cc:	mov	fp, r3
   1b3d0:	b	1b410 <__assert_fail@plt+0x986c>
   1b3d4:	add	r4, r4, r5
   1b3d8:	cmp	r4, r8
   1b3dc:	movhi	r4, #3
   1b3e0:	movls	r4, #2
   1b3e4:	add	r7, r7, #1
   1b3e8:	ldrd	r2, [sp, #24]
   1b3ec:	cmp	fp, r3
   1b3f0:	cmpeq	sl, r2
   1b3f4:	movls	r3, #1
   1b3f8:	movhi	r3, #0
   1b3fc:	cmp	r7, #7
   1b400:	movgt	r3, #0
   1b404:	andle	r3, r3, #1
   1b408:	cmp	r3, #0
   1b40c:	beq	1b464 <__assert_fail@plt+0x98c0>
   1b410:	mov	r2, sl
   1b414:	mov	r3, fp
   1b418:	ldrd	r0, [sp, #24]
   1b41c:	bl	3056c <__assert_fail@plt+0x1e9c8>
   1b420:	add	r2, r2, r2, lsl #2
   1b424:	add	r2, r6, r2, lsl #1
   1b428:	udiv	r6, r2, r8
   1b42c:	mls	r2, r8, r6, r2
   1b430:	asr	r5, r4, #1
   1b434:	add	r5, r5, r2, lsl #1
   1b438:	mov	r2, sl
   1b43c:	mov	r3, fp
   1b440:	ldrd	r0, [sp, #24]
   1b444:	bl	3056c <__assert_fail@plt+0x1e9c8>
   1b448:	strd	r0, [sp, #24]
   1b44c:	cmp	r8, r5
   1b450:	bls	1b3d4 <__assert_fail@plt+0x9830>
   1b454:	cmn	r4, r5
   1b458:	movne	r4, #1
   1b45c:	moveq	r4, #0
   1b460:	b	1b3e4 <__assert_fail@plt+0x9840>
   1b464:	ldr	r5, [sp, #56]	; 0x38
   1b468:	ldr	fp, [sp, #64]	; 0x40
   1b46c:	ldr	sl, [sp, #68]	; 0x44
   1b470:	ldrd	r2, [sp, #24]
   1b474:	cmp	r3, #0
   1b478:	cmpeq	r2, #9
   1b47c:	bhi	1b598 <__assert_fail@plt+0x99f4>
   1b480:	ldr	r3, [sp, #8]
   1b484:	cmp	r3, #1
   1b488:	beq	1b4f8 <__assert_fail@plt+0x9954>
   1b48c:	adds	r3, r4, #0
   1b490:	movne	r3, #1
   1b494:	ldr	r2, [sp, #8]
   1b498:	cmp	r2, #0
   1b49c:	movne	r3, #0
   1b4a0:	cmp	r3, #0
   1b4a4:	beq	1b858 <__assert_fail@plt+0x9cb4>
   1b4a8:	add	r6, r6, #1
   1b4ac:	cmp	r6, #10
   1b4b0:	beq	1b510 <__assert_fail@plt+0x996c>
   1b4b4:	ldr	r3, [sp, #36]	; 0x24
   1b4b8:	add	r8, r3, #644	; 0x284
   1b4bc:	add	r8, r8, #2
   1b4c0:	add	r6, r6, #48	; 0x30
   1b4c4:	strb	r6, [r3, #646]	; 0x286
   1b4c8:	sub	r8, r8, fp
   1b4cc:	mov	r2, fp
   1b4d0:	mov	r1, r5
   1b4d4:	mov	r0, r8
   1b4d8:	bl	11784 <memcpy@plt>
   1b4dc:	mov	r6, #0
   1b4e0:	mov	r4, r6
   1b4e4:	b	1b55c <__assert_fail@plt+0x99b8>
   1b4e8:	andeq	r0, r0, r0
   1b4ec:	svccc	0x00f00000	; IMB
   1b4f0:	andeq	r0, r0, r0
   1b4f4:	eormi	r0, r4, r0
   1b4f8:	and	r3, r6, #1
   1b4fc:	add	r3, r3, r4
   1b500:	cmp	r3, #2
   1b504:	movle	r3, #0
   1b508:	movgt	r3, #1
   1b50c:	b	1b4a0 <__assert_fail@plt+0x98fc>
   1b510:	ldr	r3, [sp, #24]
   1b514:	adds	r3, r3, #1
   1b518:	str	r3, [sp, #24]
   1b51c:	ldr	r3, [sp, #28]
   1b520:	adc	r3, r3, #0
   1b524:	str	r3, [sp, #28]
   1b528:	ldrd	r2, [sp, #24]
   1b52c:	cmp	r3, #0
   1b530:	cmpeq	r2, #9
   1b534:	bls	1b548 <__assert_fail@plt+0x99a4>
   1b538:	ldr	r8, [sp, #32]
   1b53c:	mov	r4, #0
   1b540:	mov	r6, r4
   1b544:	b	1b55c <__assert_fail@plt+0x99b8>
   1b548:	mov	r4, #0
   1b54c:	mov	r6, r4
   1b550:	b	1b860 <__assert_fail@plt+0x9cbc>
   1b554:	ldr	r8, [sp, #32]
   1b558:	mvn	r7, #0
   1b55c:	ldr	r3, [sp, #8]
   1b560:	cmp	r3, #1
   1b564:	beq	1b5a0 <__assert_fail@plt+0x99fc>
   1b568:	ldr	r3, [sp, #8]
   1b56c:	cmp	r3, #0
   1b570:	movne	r6, #0
   1b574:	bne	1b5cc <__assert_fail@plt+0x9a28>
   1b578:	add	r6, r6, r4
   1b57c:	cmp	r6, #0
   1b580:	movle	r6, #0
   1b584:	movgt	r6, #1
   1b588:	b	1b5cc <__assert_fail@plt+0x9a28>
   1b58c:	ldr	r8, [sp, #32]
   1b590:	mov	r7, #0
   1b594:	b	1b55c <__assert_fail@plt+0x99b8>
   1b598:	ldr	r8, [sp, #32]
   1b59c:	b	1b55c <__assert_fail@plt+0x99b8>
   1b5a0:	ldr	r3, [sp, #24]
   1b5a4:	and	r0, r3, #1
   1b5a8:	mov	r1, #0
   1b5ac:	adds	r2, r0, r4
   1b5b0:	adc	r3, r1, r4, asr #31
   1b5b4:	orr	r2, r2, r3
   1b5b8:	cmp	r2, r1
   1b5bc:	addne	r6, r6, #1
   1b5c0:	cmp	r6, #5
   1b5c4:	movle	r6, #0
   1b5c8:	movgt	r6, #1
   1b5cc:	cmp	r6, #0
   1b5d0:	beq	1b628 <__assert_fail@plt+0x9a84>
   1b5d4:	ldr	r3, [sp, #24]
   1b5d8:	adds	r3, r3, #1
   1b5dc:	str	r3, [sp, #24]
   1b5e0:	ldr	r3, [sp, #28]
   1b5e4:	adc	r3, r3, #0
   1b5e8:	str	r3, [sp, #28]
   1b5ec:	ldr	r3, [sp, #48]	; 0x30
   1b5f0:	cmp	r3, #0
   1b5f4:	beq	1b628 <__assert_fail@plt+0x9a84>
   1b5f8:	ldr	r2, [sp, #40]	; 0x28
   1b5fc:	mov	r3, #0
   1b600:	ldrd	r0, [sp, #24]
   1b604:	cmp	r3, r1
   1b608:	cmpeq	r2, r0
   1b60c:	moveq	r3, #1
   1b610:	movne	r3, #0
   1b614:	cmp	r7, #7
   1b618:	movgt	r3, #0
   1b61c:	andle	r3, r3, #1
   1b620:	cmp	r3, #0
   1b624:	bne	1b64c <__assert_fail@plt+0x9aa8>
   1b628:	mov	r4, #10
   1b62c:	mov	r5, #0
   1b630:	mov	fp, r8
   1b634:	strd	r4, [sp, #8]
   1b638:	mov	r5, r9
   1b63c:	mov	r9, r8
   1b640:	mov	r8, r7
   1b644:	ldrd	r6, [sp, #24]
   1b648:	b	1b694 <__assert_fail@plt+0x9af0>
   1b64c:	add	r7, r7, #1
   1b650:	tst	r9, #8
   1b654:	beq	1b668 <__assert_fail@plt+0x9ac4>
   1b658:	sub	r6, r8, #1
   1b65c:	mov	r3, #49	; 0x31
   1b660:	strb	r3, [r8, #-1]
   1b664:	b	1b338 <__assert_fail@plt+0x9794>
   1b668:	mov	r3, #48	; 0x30
   1b66c:	strb	r3, [r8, #-1]
   1b670:	mvn	r3, fp
   1b674:	add	r8, r8, r3
   1b678:	mov	r2, fp
   1b67c:	mov	r1, r5
   1b680:	mov	r0, r8
   1b684:	bl	11784 <memcpy@plt>
   1b688:	b	1b658 <__assert_fail@plt+0x9ab4>
   1b68c:	mov	r6, r0
   1b690:	mov	r7, r1
   1b694:	ldrd	r2, [sp, #8]
   1b698:	mov	r0, r6
   1b69c:	mov	r1, r7
   1b6a0:	bl	3056c <__assert_fail@plt+0x1e9c8>
   1b6a4:	add	r2, r2, #48	; 0x30
   1b6a8:	strb	r2, [fp, #-1]!
   1b6ac:	ldrd	r2, [sp, #8]
   1b6b0:	mov	r0, r6
   1b6b4:	mov	r1, r7
   1b6b8:	bl	3056c <__assert_fail@plt+0x1e9c8>
   1b6bc:	cmp	r7, #0
   1b6c0:	cmpeq	r6, #9
   1b6c4:	bhi	1b68c <__assert_fail@plt+0x9ae8>
   1b6c8:	mov	r7, r8
   1b6cc:	mov	r8, r9
   1b6d0:	mov	r6, fp
   1b6d4:	mov	r9, r5
   1b6d8:	b	1b338 <__assert_fail@plt+0x9794>
   1b6dc:	sub	r4, r8, r6
   1b6e0:	ldr	r0, [sp, #20]
   1b6e4:	bl	11988 <strlen@plt>
   1b6e8:	mov	fp, r0
   1b6ec:	mov	r3, #41	; 0x29
   1b6f0:	mov	r2, r4
   1b6f4:	mov	r1, r6
   1b6f8:	add	r0, sp, #76	; 0x4c
   1b6fc:	bl	1185c <__memcpy_chk@plt>
   1b700:	mvn	r5, #0
   1b704:	mov	r6, r8
   1b708:	b	1b74c <__assert_fail@plt+0x9ba8>
   1b70c:	cmp	r5, r4
   1b710:	movcs	r5, r4
   1b714:	sub	r6, r6, r5
   1b718:	sub	r4, r4, r5
   1b71c:	mov	r2, r5
   1b720:	add	r3, sp, #76	; 0x4c
   1b724:	add	r1, r3, r4
   1b728:	mov	r0, r6
   1b72c:	bl	11784 <memcpy@plt>
   1b730:	cmp	r4, #0
   1b734:	beq	1b340 <__assert_fail@plt+0x979c>
   1b738:	sub	r6, r6, fp
   1b73c:	mov	r2, fp
   1b740:	ldr	r1, [sp, #20]
   1b744:	mov	r0, r6
   1b748:	bl	11784 <memcpy@plt>
   1b74c:	ldrb	r3, [sl]
   1b750:	cmp	r3, #0
   1b754:	beq	1b70c <__assert_fail@plt+0x9b68>
   1b758:	cmp	r3, #255	; 0xff
   1b75c:	movne	r5, r3
   1b760:	moveq	r5, r4
   1b764:	add	sl, sl, #1
   1b768:	b	1b70c <__assert_fail@plt+0x9b68>
   1b76c:	ldrd	r2, [sp, #184]	; 0xb8
   1b770:	cmp	r3, #0
   1b774:	cmpeq	r2, #1
   1b778:	movls	r7, #0
   1b77c:	bls	1b350 <__assert_fail@plt+0x97ac>
   1b780:	mov	r7, #1
   1b784:	mov	r2, #1
   1b788:	mov	r3, #0
   1b78c:	ldr	r1, [sp, #40]	; 0x28
   1b790:	ldrd	r4, [sp, #184]	; 0xb8
   1b794:	mul	r0, r1, r3
   1b798:	umull	r2, r3, r2, r1
   1b79c:	add	r3, r0, r3
   1b7a0:	cmp	r5, r3
   1b7a4:	cmpeq	r4, r2
   1b7a8:	bls	1b350 <__assert_fail@plt+0x97ac>
   1b7ac:	add	r7, r7, #1
   1b7b0:	cmp	r7, #8
   1b7b4:	bne	1b794 <__assert_fail@plt+0x9bf0>
   1b7b8:	and	r3, r9, #256	; 0x100
   1b7bc:	tst	r9, #64	; 0x40
   1b7c0:	bne	1b7d4 <__assert_fail@plt+0x9c30>
   1b7c4:	ldr	r2, [sp, #32]
   1b7c8:	b	1b7ec <__assert_fail@plt+0x9c48>
   1b7cc:	tst	r9, #64	; 0x40
   1b7d0:	beq	1b834 <__assert_fail@plt+0x9c90>
   1b7d4:	ldr	r0, [sp, #36]	; 0x24
   1b7d8:	add	r2, r0, #648	; 0x288
   1b7dc:	mov	r1, #32
   1b7e0:	strb	r1, [r0, #647]	; 0x287
   1b7e4:	cmp	r7, #0
   1b7e8:	beq	1b83c <__assert_fail@plt+0x9c98>
   1b7ec:	ldr	ip, [sp, #44]	; 0x2c
   1b7f0:	cmp	ip, #0
   1b7f4:	cmpeq	r7, #1
   1b7f8:	beq	1b874 <__assert_fail@plt+0x9cd0>
   1b7fc:	mov	r0, r2
   1b800:	movw	r1, #8504	; 0x2138
   1b804:	movt	r1, #3
   1b808:	ldrb	r1, [r1, r7]
   1b80c:	strb	r1, [r0], #1
   1b810:	str	r0, [sp, #32]
   1b814:	cmp	r3, #0
   1b818:	beq	1b35c <__assert_fail@plt+0x97b8>
   1b81c:	cmp	ip, #0
   1b820:	movne	r3, #105	; 0x69
   1b824:	strbne	r3, [r2, #1]
   1b828:	addne	r2, r2, #2
   1b82c:	ldreq	r2, [sp, #32]
   1b830:	b	1b848 <__assert_fail@plt+0x9ca4>
   1b834:	ldr	r2, [sp, #32]
   1b838:	b	1b7e4 <__assert_fail@plt+0x9c40>
   1b83c:	cmp	r3, #0
   1b840:	streq	r2, [sp, #32]
   1b844:	beq	1b35c <__assert_fail@plt+0x97b8>
   1b848:	mov	r3, #66	; 0x42
   1b84c:	strb	r3, [r2], #1
   1b850:	str	r2, [sp, #32]
   1b854:	b	1b35c <__assert_fail@plt+0x97b8>
   1b858:	cmp	r6, #0
   1b85c:	bne	1b4b4 <__assert_fail@plt+0x9910>
   1b860:	tst	r9, #8
   1b864:	beq	1b4b4 <__assert_fail@plt+0x9910>
   1b868:	ldr	r8, [sp, #32]
   1b86c:	mov	r6, #0
   1b870:	b	1b55c <__assert_fail@plt+0x99b8>
   1b874:	mov	r1, r2
   1b878:	mov	r2, #107	; 0x6b
   1b87c:	strb	r2, [r1], #1
   1b880:	str	r1, [sp, #32]
   1b884:	cmp	r3, #0
   1b888:	beq	1b35c <__assert_fail@plt+0x97b8>
   1b88c:	ldr	r2, [sp, #32]
   1b890:	b	1b848 <__assert_fail@plt+0x9ca4>
   1b894:	strd	r4, [sp, #-20]!	; 0xffffffec
   1b898:	strd	r6, [sp, #8]
   1b89c:	str	lr, [sp, #16]
   1b8a0:	sub	sp, sp, #20
   1b8a4:	mov	r7, r1
   1b8a8:	mov	r6, r2
   1b8ac:	subs	r4, r0, #0
   1b8b0:	beq	1b934 <__assert_fail@plt+0x9d90>
   1b8b4:	ldrb	r3, [r4]
   1b8b8:	cmp	r3, #39	; 0x27
   1b8bc:	addeq	r4, r4, #1
   1b8c0:	moveq	r5, #4
   1b8c4:	movne	r5, #0
   1b8c8:	movw	r1, #8504	; 0x2138
   1b8cc:	movt	r1, #3
   1b8d0:	mov	r3, #4
   1b8d4:	add	r2, r1, #12
   1b8d8:	add	r1, r1, #20
   1b8dc:	mov	r0, r4
   1b8e0:	bl	13fe8 <__assert_fail@plt+0x2444>
   1b8e4:	cmp	r0, #0
   1b8e8:	blt	1b984 <__assert_fail@plt+0x9de0>
   1b8ec:	movw	r3, #8504	; 0x2138
   1b8f0:	movt	r3, #3
   1b8f4:	add	r3, r3, r0, lsl #2
   1b8f8:	ldr	r3, [r3, #12]
   1b8fc:	orr	r5, r5, r3
   1b900:	mov	r2, #1
   1b904:	mov	r3, #0
   1b908:	strd	r2, [r6]
   1b90c:	str	r5, [r7]
   1b910:	mov	r0, #0
   1b914:	ldrd	r2, [r6]
   1b918:	orrs	r3, r2, r3
   1b91c:	beq	1ba20 <__assert_fail@plt+0x9e7c>
   1b920:	add	sp, sp, #20
   1b924:	ldrd	r4, [sp]
   1b928:	ldrd	r6, [sp, #8]
   1b92c:	add	sp, sp, #16
   1b930:	pop	{pc}		; (ldr pc, [sp], #4)
   1b934:	movw	r0, #8552	; 0x2168
   1b938:	movt	r0, #3
   1b93c:	bl	118ec <getenv@plt>
   1b940:	subs	r4, r0, #0
   1b944:	bne	1b8b4 <__assert_fail@plt+0x9d10>
   1b948:	movw	r0, #8564	; 0x2174
   1b94c:	movt	r0, #3
   1b950:	bl	118ec <getenv@plt>
   1b954:	subs	r4, r0, #0
   1b958:	bne	1b8b4 <__assert_fail@plt+0x9d10>
   1b95c:	movw	r0, #8576	; 0x2180
   1b960:	movt	r0, #3
   1b964:	bl	118ec <getenv@plt>
   1b968:	cmp	r0, #0
   1b96c:	moveq	r2, #1024	; 0x400
   1b970:	movne	r2, #512	; 0x200
   1b974:	mov	r3, #0
   1b978:	strd	r2, [r6]
   1b97c:	mov	r5, #0
   1b980:	b	1b90c <__assert_fail@plt+0x9d68>
   1b984:	movw	r3, #8592	; 0x2190
   1b988:	movt	r3, #3
   1b98c:	str	r3, [sp]
   1b990:	mov	r3, r6
   1b994:	mov	r2, #0
   1b998:	add	r1, sp, #12
   1b99c:	mov	r0, r4
   1b9a0:	bl	2ea4c <__assert_fail@plt+0x1cea8>
   1b9a4:	cmp	r0, #0
   1b9a8:	bne	1ba00 <__assert_fail@plt+0x9e5c>
   1b9ac:	ldrb	r3, [r4]
   1b9b0:	sub	r3, r3, #48	; 0x30
   1b9b4:	uxtb	r3, r3
   1b9b8:	cmp	r3, #9
   1b9bc:	bls	1b90c <__assert_fail@plt+0x9d68>
   1b9c0:	ldr	r2, [sp, #12]
   1b9c4:	cmp	r2, r4
   1b9c8:	beq	1b9e8 <__assert_fail@plt+0x9e44>
   1b9cc:	ldrb	r3, [r4, #1]!
   1b9d0:	sub	r3, r3, #48	; 0x30
   1b9d4:	uxtb	r3, r3
   1b9d8:	cmp	r3, #9
   1b9dc:	bls	1b90c <__assert_fail@plt+0x9d68>
   1b9e0:	cmp	r2, r4
   1b9e4:	bne	1b9cc <__assert_fail@plt+0x9e28>
   1b9e8:	ldrb	r3, [r4, #-1]
   1b9ec:	cmp	r3, #66	; 0x42
   1b9f0:	orrne	r5, r5, #128	; 0x80
   1b9f4:	beq	1ba0c <__assert_fail@plt+0x9e68>
   1b9f8:	orr	r5, r5, #32
   1b9fc:	b	1b90c <__assert_fail@plt+0x9d68>
   1ba00:	mov	r3, #0
   1ba04:	str	r3, [r7]
   1ba08:	b	1b914 <__assert_fail@plt+0x9d70>
   1ba0c:	orr	r5, r5, #384	; 0x180
   1ba10:	ldrb	r3, [r4, #-2]
   1ba14:	cmp	r3, #105	; 0x69
   1ba18:	bne	1b90c <__assert_fail@plt+0x9d68>
   1ba1c:	b	1b9f8 <__assert_fail@plt+0x9e54>
   1ba20:	movw	r0, #8576	; 0x2180
   1ba24:	movt	r0, #3
   1ba28:	bl	118ec <getenv@plt>
   1ba2c:	cmp	r0, #0
   1ba30:	moveq	r2, #1024	; 0x400
   1ba34:	movne	r2, #512	; 0x200
   1ba38:	mov	r3, #0
   1ba3c:	strd	r2, [r6]
   1ba40:	mov	r0, #4
   1ba44:	b	1b920 <__assert_fail@plt+0x9d7c>
   1ba48:	mov	r3, #1
   1ba4c:	strb	r3, [r0, #28]
   1ba50:	mov	r3, #0
   1ba54:	str	r3, [r0, #20]
   1ba58:	str	r3, [r0, #24]
   1ba5c:	str	r1, [r0]
   1ba60:	str	r1, [r0, #4]
   1ba64:	str	r1, [r0, #8]
   1ba68:	str	r1, [r0, #12]
   1ba6c:	str	r1, [r0, #16]
   1ba70:	bx	lr
   1ba74:	ldrb	r0, [r0, #28]
   1ba78:	bx	lr
   1ba7c:	mov	r2, r0
   1ba80:	ldrb	ip, [r0, #28]
   1ba84:	eor	ip, ip, #1
   1ba88:	ldr	r3, [r0, #20]
   1ba8c:	add	r3, ip, r3
   1ba90:	and	r3, r3, #3
   1ba94:	ldr	r0, [r0, r3, lsl #2]
   1ba98:	str	r1, [r2, r3, lsl #2]
   1ba9c:	str	r3, [r2, #20]
   1baa0:	ldr	r1, [r2, #24]
   1baa4:	cmp	r1, r3
   1baa8:	beq	1bab8 <__assert_fail@plt+0x9f14>
   1baac:	mov	r3, #0
   1bab0:	strb	r3, [r2, #28]
   1bab4:	bx	lr
   1bab8:	add	ip, ip, r1
   1babc:	and	ip, ip, #3
   1bac0:	str	ip, [r2, #24]
   1bac4:	b	1baac <__assert_fail@plt+0x9f08>
   1bac8:	ldrb	r3, [r0, #28]
   1bacc:	cmp	r3, #0
   1bad0:	bne	1bb0c <__assert_fail@plt+0x9f68>
   1bad4:	ldr	r3, [r0, #20]
   1bad8:	ldr	r2, [r0, r3, lsl #2]
   1badc:	ldr	r1, [r0, #16]
   1bae0:	str	r1, [r0, r3, lsl #2]
   1bae4:	ldr	r1, [r0, #24]
   1bae8:	cmp	r3, r1
   1baec:	moveq	r3, #1
   1baf0:	strbeq	r3, [r0, #28]
   1baf4:	beq	1bb04 <__assert_fail@plt+0x9f60>
   1baf8:	add	r3, r3, #3
   1bafc:	and	r3, r3, #3
   1bb00:	str	r3, [r0, #20]
   1bb04:	mov	r0, r2
   1bb08:	bx	lr
   1bb0c:	str	r4, [sp, #-8]!
   1bb10:	str	lr, [sp, #4]
   1bb14:	bl	11b68 <abort@plt>
   1bb18:	ldr	r3, [r0]
   1bb1c:	ldr	r0, [r0, #4]
   1bb20:	eor	r3, r3, r0
   1bb24:	udiv	r0, r3, r1
   1bb28:	mls	r0, r0, r1, r3
   1bb2c:	bx	lr
   1bb30:	strd	r4, [sp, #-8]!
   1bb34:	ldrd	r4, [r0]
   1bb38:	ldrd	r2, [r1]
   1bb3c:	cmp	r5, r3
   1bb40:	cmpeq	r4, r2
   1bb44:	moveq	r0, #1
   1bb48:	movne	r0, #0
   1bb4c:	ldrd	r4, [sp]
   1bb50:	add	sp, sp, #8
   1bb54:	bx	lr
   1bb58:	strd	r4, [sp, #-16]!
   1bb5c:	str	r6, [sp, #8]
   1bb60:	str	lr, [sp, #12]
   1bb64:	sub	sp, sp, #8
   1bb68:	mov	r6, r0
   1bb6c:	mov	r0, #12
   1bb70:	bl	2f010 <__assert_fail@plt+0x1d46c>
   1bb74:	subs	r4, r0, #0
   1bb78:	beq	1bbc0 <__assert_fail@plt+0xa01c>
   1bb7c:	movw	r3, #30544	; 0x7750
   1bb80:	movt	r3, #1
   1bb84:	str	r3, [sp]
   1bb88:	movw	r3, #47920	; 0xbb30
   1bb8c:	movt	r3, #1
   1bb90:	movw	r2, #47896	; 0xbb18
   1bb94:	movt	r2, #1
   1bb98:	mov	r1, #0
   1bb9c:	movw	r0, #1021	; 0x3fd
   1bba0:	bl	1a7d4 <__assert_fail@plt+0x8c30>
   1bba4:	mov	r5, r0
   1bba8:	str	r0, [r4]
   1bbac:	cmp	r0, #0
   1bbb0:	strne	r6, [r4, #4]
   1bbb4:	movne	r3, #0
   1bbb8:	strne	r3, [r4, #8]
   1bbbc:	beq	1bbd8 <__assert_fail@plt+0xa034>
   1bbc0:	mov	r0, r4
   1bbc4:	add	sp, sp, #8
   1bbc8:	ldrd	r4, [sp]
   1bbcc:	ldr	r6, [sp, #8]
   1bbd0:	add	sp, sp, #12
   1bbd4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbd8:	mov	r0, r4
   1bbdc:	bl	17750 <__assert_fail@plt+0x5bac>
   1bbe0:	mov	r4, r5
   1bbe4:	b	1bbc0 <__assert_fail@plt+0xa01c>
   1bbe8:	str	r4, [sp, #-8]!
   1bbec:	str	lr, [sp, #4]
   1bbf0:	mov	r4, r0
   1bbf4:	ldr	r0, [r0]
   1bbf8:	bl	1a9a0 <__assert_fail@plt+0x8dfc>
   1bbfc:	ldr	r0, [r4, #8]
   1bc00:	bl	17750 <__assert_fail@plt+0x5bac>
   1bc04:	mov	r0, r4
   1bc08:	bl	17750 <__assert_fail@plt+0x5bac>
   1bc0c:	ldr	r4, [sp]
   1bc10:	add	sp, sp, #4
   1bc14:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc18:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1bc1c:	strd	r6, [sp, #8]
   1bc20:	str	r8, [sp, #16]
   1bc24:	str	lr, [sp, #20]
   1bc28:	mov	r5, r0
   1bc2c:	mov	r6, r2
   1bc30:	mov	r7, r3
   1bc34:	ldr	r4, [r0, #8]
   1bc38:	cmp	r4, #0
   1bc3c:	beq	1bc98 <__assert_fail@plt+0xa0f4>
   1bc40:	ldrd	r2, [r4]
   1bc44:	cmp	r3, r7
   1bc48:	cmpeq	r2, r6
   1bc4c:	beq	1bc90 <__assert_fail@plt+0xa0ec>
   1bc50:	strd	r6, [r4]
   1bc54:	mov	r1, r4
   1bc58:	ldr	r0, [r5]
   1bc5c:	bl	1ad88 <__assert_fail@plt+0x91e4>
   1bc60:	cmp	r0, #0
   1bc64:	beq	1bcd4 <__assert_fail@plt+0xa130>
   1bc68:	cmp	r4, r0
   1bc6c:	beq	1bcb8 <__assert_fail@plt+0xa114>
   1bc70:	ldr	r3, [r0, #8]
   1bc74:	str	r3, [r4, #8]
   1bc78:	ldr	r0, [r4, #8]
   1bc7c:	ldrd	r4, [sp]
   1bc80:	ldrd	r6, [sp, #8]
   1bc84:	ldr	r8, [sp, #16]
   1bc88:	add	sp, sp, #20
   1bc8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc90:	ldr	r0, [r4, #8]
   1bc94:	b	1bc7c <__assert_fail@plt+0xa0d8>
   1bc98:	mov	r0, #16
   1bc9c:	bl	2f010 <__assert_fail@plt+0x1d46c>
   1bca0:	mov	r4, r0
   1bca4:	str	r0, [r5, #8]
   1bca8:	cmp	r0, #0
   1bcac:	bne	1bc50 <__assert_fail@plt+0xa0ac>
   1bcb0:	mvn	r0, #0
   1bcb4:	b	1bc7c <__assert_fail@plt+0xa0d8>
   1bcb8:	mov	r3, #0
   1bcbc:	str	r3, [r5, #8]
   1bcc0:	ldr	r3, [r5, #4]
   1bcc4:	add	r2, r3, #1
   1bcc8:	str	r2, [r5, #4]
   1bccc:	str	r3, [r0, #8]
   1bcd0:	b	1bc78 <__assert_fail@plt+0xa0d4>
   1bcd4:	mvn	r0, #0
   1bcd8:	b	1bc7c <__assert_fail@plt+0xa0d8>
   1bcdc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1bce0:	strd	r6, [sp, #8]
   1bce4:	strd	r8, [sp, #16]
   1bce8:	str	sl, [sp, #24]
   1bcec:	str	lr, [sp, #28]
   1bcf0:	mov	r4, r0
   1bcf4:	mov	r5, r1
   1bcf8:	add	r6, r2, #20
   1bcfc:	mov	r3, #0
   1bd00:	strb	r3, [r2, #20]
   1bd04:	cmp	r0, #0
   1bd08:	sbcs	r3, r1, #0
   1bd0c:	movge	r8, #10
   1bd10:	movge	r9, #0
   1bd14:	movlt	r8, #10
   1bd18:	movlt	r9, #0
   1bd1c:	blt	1bd80 <__assert_fail@plt+0xa1dc>
   1bd20:	mov	r2, r8
   1bd24:	mov	r3, r9
   1bd28:	mov	r0, r4
   1bd2c:	mov	r1, r5
   1bd30:	bl	30498 <__assert_fail@plt+0x1e8f4>
   1bd34:	add	r2, r2, #48	; 0x30
   1bd38:	strb	r2, [r6, #-1]!
   1bd3c:	mov	r2, r8
   1bd40:	mov	r3, r9
   1bd44:	mov	r0, r4
   1bd48:	mov	r1, r5
   1bd4c:	bl	30498 <__assert_fail@plt+0x1e8f4>
   1bd50:	mov	r4, r0
   1bd54:	mov	r5, r1
   1bd58:	orrs	r3, r4, r5
   1bd5c:	bne	1bd20 <__assert_fail@plt+0xa17c>
   1bd60:	mov	r0, r6
   1bd64:	ldrd	r4, [sp]
   1bd68:	ldrd	r6, [sp, #8]
   1bd6c:	ldrd	r8, [sp, #16]
   1bd70:	ldr	sl, [sp, #24]
   1bd74:	add	sp, sp, #28
   1bd78:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd7c:	mov	r6, r7
   1bd80:	sub	r7, r6, #1
   1bd84:	mov	r2, r8
   1bd88:	mov	r3, r9
   1bd8c:	mov	r0, r4
   1bd90:	mov	r1, r5
   1bd94:	bl	30498 <__assert_fail@plt+0x1e8f4>
   1bd98:	rsb	r2, r2, #48	; 0x30
   1bd9c:	strb	r2, [r6, #-1]
   1bda0:	mov	r2, r8
   1bda4:	mov	r3, r9
   1bda8:	mov	r0, r4
   1bdac:	mov	r1, r5
   1bdb0:	bl	30498 <__assert_fail@plt+0x1e8f4>
   1bdb4:	mov	r4, r0
   1bdb8:	mov	r5, r1
   1bdbc:	orrs	r3, r4, r5
   1bdc0:	bne	1bd7c <__assert_fail@plt+0xa1d8>
   1bdc4:	sub	r6, r6, #2
   1bdc8:	mov	r3, #45	; 0x2d
   1bdcc:	strb	r3, [r7, #-1]
   1bdd0:	b	1bd60 <__assert_fail@plt+0xa1bc>
   1bdd4:	str	r4, [sp, #-8]!
   1bdd8:	str	lr, [sp, #4]
   1bddc:	mov	r4, r0
   1bde0:	bl	1173c <wcwidth@plt>
   1bde4:	cmp	r0, #0
   1bde8:	blt	1bdf8 <__assert_fail@plt+0xa254>
   1bdec:	ldr	r4, [sp]
   1bdf0:	add	sp, sp, #4
   1bdf4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdf8:	mov	r0, r4
   1bdfc:	bl	11814 <iswcntrl@plt>
   1be00:	clz	r0, r0
   1be04:	lsr	r0, r0, #5
   1be08:	b	1bdec <__assert_fail@plt+0xa248>
   1be0c:	strd	r4, [sp, #-16]!
   1be10:	str	r6, [sp, #8]
   1be14:	str	lr, [sp, #12]
   1be18:	mov	r5, r0
   1be1c:	mov	r4, r1
   1be20:	ldr	r3, [r1], #16
   1be24:	cmp	r3, r1
   1be28:	strne	r3, [r0]
   1be2c:	beq	1be5c <__assert_fail@plt+0xa2b8>
   1be30:	ldr	r3, [r4, #4]
   1be34:	str	r3, [r5, #4]
   1be38:	ldrb	r3, [r4, #8]
   1be3c:	strb	r3, [r5, #8]
   1be40:	cmp	r3, #0
   1be44:	ldrne	r3, [r4, #12]
   1be48:	strne	r3, [r5, #12]
   1be4c:	ldrd	r4, [sp]
   1be50:	ldr	r6, [sp, #8]
   1be54:	add	sp, sp, #12
   1be58:	pop	{pc}		; (ldr pc, [sp], #4)
   1be5c:	add	r6, r0, #16
   1be60:	ldr	r2, [r4, #4]
   1be64:	mov	r0, r6
   1be68:	bl	11784 <memcpy@plt>
   1be6c:	str	r6, [r5]
   1be70:	b	1be30 <__assert_fail@plt+0xa28c>
   1be74:	movw	r3, #8612	; 0x21a4
   1be78:	movt	r3, #3
   1be7c:	lsr	r2, r0, #5
   1be80:	and	r0, r0, #31
   1be84:	ldr	r3, [r3, r2, lsl #2]
   1be88:	lsr	r0, r3, r0
   1be8c:	and	r0, r0, #1
   1be90:	bx	lr
   1be94:	strd	r4, [sp, #-20]!	; 0xffffffec
   1be98:	strd	r6, [sp, #8]
   1be9c:	str	lr, [sp, #16]
   1bea0:	sub	sp, sp, #12
   1bea4:	mov	r7, r1
   1bea8:	mov	r5, r2
   1beac:	subs	r6, r0, #0
   1beb0:	addeq	r6, sp, #4
   1beb4:	mov	r0, r6
   1beb8:	bl	118b0 <mbrtowc@plt>
   1bebc:	mov	r4, r0
   1bec0:	cmp	r5, #0
   1bec4:	cmnne	r0, #3
   1bec8:	bhi	1bee4 <__assert_fail@plt+0xa340>
   1becc:	mov	r0, r4
   1bed0:	add	sp, sp, #12
   1bed4:	ldrd	r4, [sp]
   1bed8:	ldrd	r6, [sp, #8]
   1bedc:	add	sp, sp, #16
   1bee0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bee4:	mov	r0, #0
   1bee8:	bl	2ff1c <__assert_fail@plt+0x1e378>
   1beec:	cmp	r0, #0
   1bef0:	bne	1becc <__assert_fail@plt+0xa328>
   1bef4:	ldrb	r3, [r7]
   1bef8:	str	r3, [r6]
   1befc:	mov	r4, #1
   1bf00:	b	1becc <__assert_fail@plt+0xa328>
   1bf04:	cmp	r1, r0
   1bf08:	beq	1c5e4 <__assert_fail@plt+0xaa40>
   1bf0c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1bf10:	strd	r6, [sp, #8]
   1bf14:	str	r8, [sp, #16]
   1bf18:	str	lr, [sp, #20]
   1bf1c:	sub	sp, sp, #112	; 0x70
   1bf20:	mov	r6, r1
   1bf24:	mov	r7, r0
   1bf28:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1bf2c:	cmp	r0, #1
   1bf30:	bls	1c560 <__assert_fail@plt+0xa9bc>
   1bf34:	str	r7, [sp, #16]
   1bf38:	mov	r3, #0
   1bf3c:	strb	r3, [sp]
   1bf40:	mov	r0, #0
   1bf44:	mov	r1, #0
   1bf48:	strd	r0, [sp, #4]
   1bf4c:	strb	r3, [sp, #12]
   1bf50:	str	r6, [sp, #72]	; 0x48
   1bf54:	strb	r3, [sp, #56]	; 0x38
   1bf58:	strd	r0, [sp, #60]	; 0x3c
   1bf5c:	strb	r3, [sp, #68]	; 0x44
   1bf60:	mov	r5, #1
   1bf64:	movw	r6, #8612	; 0x21a4
   1bf68:	movt	r6, #3
   1bf6c:	b	1c1dc <__assert_fail@plt+0xa638>
   1bf70:	cmp	r2, r3
   1bf74:	bcs	1bf94 <__assert_fail@plt+0xa3f0>
   1bf78:	ldr	r1, [sp, #72]	; 0x48
   1bf7c:	ldr	r0, [sp, #16]
   1bf80:	bl	117c0 <memcmp@plt>
   1bf84:	cmp	r0, #0
   1bf88:	mvnle	r0, #0
   1bf8c:	movgt	r0, #1
   1bf90:	b	1c5cc <__assert_fail@plt+0xaa28>
   1bf94:	mov	r2, r3
   1bf98:	ldr	r1, [sp, #72]	; 0x48
   1bf9c:	ldr	r0, [sp, #16]
   1bfa0:	bl	117c0 <memcmp@plt>
   1bfa4:	cmp	r0, #0
   1bfa8:	mvnlt	r0, #0
   1bfac:	movge	r0, #1
   1bfb0:	b	1c5cc <__assert_fail@plt+0xaa28>
   1bfb4:	add	r0, sp, #4
   1bfb8:	bl	117b4 <mbsinit@plt>
   1bfbc:	cmp	r0, #0
   1bfc0:	beq	1c054 <__assert_fail@plt+0xa4b0>
   1bfc4:	strb	r5, [sp]
   1bfc8:	ldr	r4, [sp, #16]
   1bfcc:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1bfd0:	mov	r1, r0
   1bfd4:	mov	r0, r4
   1bfd8:	bl	2cfb8 <__assert_fail@plt+0x1b414>
   1bfdc:	add	r3, sp, #4
   1bfe0:	mov	r2, r0
   1bfe4:	mov	r1, r4
   1bfe8:	add	r0, sp, #28
   1bfec:	bl	1be94 <__assert_fail@plt+0xa2f0>
   1bff0:	str	r0, [sp, #20]
   1bff4:	cmn	r0, #1
   1bff8:	streq	r5, [sp, #20]
   1bffc:	moveq	r3, #0
   1c000:	strbeq	r3, [sp, #24]
   1c004:	beq	1c224 <__assert_fail@plt+0xa680>
   1c008:	cmn	r0, #2
   1c00c:	beq	1c074 <__assert_fail@plt+0xa4d0>
   1c010:	cmp	r0, #0
   1c014:	bne	1c038 <__assert_fail@plt+0xa494>
   1c018:	str	r5, [sp, #20]
   1c01c:	ldr	r3, [sp, #16]
   1c020:	ldrb	r3, [r3]
   1c024:	cmp	r3, #0
   1c028:	bne	1c08c <__assert_fail@plt+0xa4e8>
   1c02c:	ldr	r3, [sp, #28]
   1c030:	cmp	r3, #0
   1c034:	bne	1c0ac <__assert_fail@plt+0xa508>
   1c038:	strb	r5, [sp, #24]
   1c03c:	add	r0, sp, #4
   1c040:	bl	117b4 <mbsinit@plt>
   1c044:	cmp	r0, #0
   1c048:	movne	r3, #0
   1c04c:	strbne	r3, [sp]
   1c050:	b	1c224 <__assert_fail@plt+0xa680>
   1c054:	movw	r3, #8644	; 0x21c4
   1c058:	movt	r3, #3
   1c05c:	mov	r2, #143	; 0x8f
   1c060:	movw	r1, #8236	; 0x202c
   1c064:	movt	r1, #3
   1c068:	movw	r0, #8252	; 0x203c
   1c06c:	movt	r0, #3
   1c070:	bl	11ba4 <__assert_fail@plt>
   1c074:	ldr	r0, [sp, #16]
   1c078:	bl	11988 <strlen@plt>
   1c07c:	str	r0, [sp, #20]
   1c080:	mov	r3, #0
   1c084:	strb	r3, [sp, #24]
   1c088:	b	1c224 <__assert_fail@plt+0xa680>
   1c08c:	movw	r3, #8644	; 0x21c4
   1c090:	movt	r3, #3
   1c094:	mov	r2, #171	; 0xab
   1c098:	movw	r1, #8236	; 0x202c
   1c09c:	movt	r1, #3
   1c0a0:	movw	r0, #8276	; 0x2054
   1c0a4:	movt	r0, #3
   1c0a8:	bl	11ba4 <__assert_fail@plt>
   1c0ac:	movw	r3, #8644	; 0x21c4
   1c0b0:	movt	r3, #3
   1c0b4:	mov	r2, #172	; 0xac
   1c0b8:	movw	r1, #8236	; 0x202c
   1c0bc:	movt	r1, #3
   1c0c0:	movw	r0, #8300	; 0x206c
   1c0c4:	movt	r0, #3
   1c0c8:	bl	11ba4 <__assert_fail@plt>
   1c0cc:	add	r0, sp, #60	; 0x3c
   1c0d0:	bl	117b4 <mbsinit@plt>
   1c0d4:	cmp	r0, #0
   1c0d8:	beq	1c28c <__assert_fail@plt+0xa6e8>
   1c0dc:	strb	r5, [sp, #56]	; 0x38
   1c0e0:	ldr	r4, [sp, #72]	; 0x48
   1c0e4:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1c0e8:	mov	r1, r0
   1c0ec:	mov	r0, r4
   1c0f0:	bl	2cfb8 <__assert_fail@plt+0x1b414>
   1c0f4:	add	r3, sp, #60	; 0x3c
   1c0f8:	mov	r2, r0
   1c0fc:	mov	r1, r4
   1c100:	add	r0, sp, #84	; 0x54
   1c104:	bl	1be94 <__assert_fail@plt+0xa2f0>
   1c108:	str	r0, [sp, #76]	; 0x4c
   1c10c:	cmn	r0, #1
   1c110:	streq	r5, [sp, #76]	; 0x4c
   1c114:	moveq	r3, #0
   1c118:	strbeq	r3, [sp, #80]	; 0x50
   1c11c:	beq	1c168 <__assert_fail@plt+0xa5c4>
   1c120:	cmn	r0, #2
   1c124:	beq	1c2ac <__assert_fail@plt+0xa708>
   1c128:	cmp	r0, #0
   1c12c:	bne	1c150 <__assert_fail@plt+0xa5ac>
   1c130:	str	r5, [sp, #76]	; 0x4c
   1c134:	ldr	r3, [sp, #72]	; 0x48
   1c138:	ldrb	r3, [r3]
   1c13c:	cmp	r3, #0
   1c140:	bne	1c2c4 <__assert_fail@plt+0xa720>
   1c144:	ldr	r3, [sp, #84]	; 0x54
   1c148:	cmp	r3, #0
   1c14c:	bne	1c2e4 <__assert_fail@plt+0xa740>
   1c150:	strb	r5, [sp, #80]	; 0x50
   1c154:	add	r0, sp, #60	; 0x3c
   1c158:	bl	117b4 <mbsinit@plt>
   1c15c:	cmp	r0, #0
   1c160:	movne	r3, #0
   1c164:	strbne	r3, [sp, #56]	; 0x38
   1c168:	strb	r5, [sp, #68]	; 0x44
   1c16c:	ldrb	r3, [sp, #80]	; 0x50
   1c170:	cmp	r3, #0
   1c174:	beq	1c5f4 <__assert_fail@plt+0xaa50>
   1c178:	ldr	r7, [sp, #84]	; 0x54
   1c17c:	cmp	r7, #0
   1c180:	beq	1c304 <__assert_fail@plt+0xa760>
   1c184:	ldrb	r3, [sp, #24]
   1c188:	cmp	r3, #0
   1c18c:	beq	1c5ec <__assert_fail@plt+0xaa48>
   1c190:	ldr	r0, [sp, #28]
   1c194:	bl	117a8 <towlower@plt>
   1c198:	mov	r4, r0
   1c19c:	mov	r0, r7
   1c1a0:	bl	117a8 <towlower@plt>
   1c1a4:	sub	r0, r4, r0
   1c1a8:	cmp	r0, #0
   1c1ac:	bne	1c5cc <__assert_fail@plt+0xaa28>
   1c1b0:	ldr	r3, [sp, #16]
   1c1b4:	ldr	r2, [sp, #20]
   1c1b8:	add	r3, r3, r2
   1c1bc:	str	r3, [sp, #16]
   1c1c0:	mov	r2, #0
   1c1c4:	strb	r2, [sp, #12]
   1c1c8:	ldr	r3, [sp, #72]	; 0x48
   1c1cc:	ldr	r1, [sp, #76]	; 0x4c
   1c1d0:	add	r3, r3, r1
   1c1d4:	str	r3, [sp, #72]	; 0x48
   1c1d8:	strb	r2, [sp, #68]	; 0x44
   1c1dc:	ldrb	r3, [sp, #12]
   1c1e0:	cmp	r3, #0
   1c1e4:	bne	1c228 <__assert_fail@plt+0xa684>
   1c1e8:	ldrb	r3, [sp]
   1c1ec:	cmp	r3, #0
   1c1f0:	bne	1bfc8 <__assert_fail@plt+0xa424>
   1c1f4:	ldr	r1, [sp, #16]
   1c1f8:	ldrb	r3, [r1]
   1c1fc:	lsr	r2, r3, #5
   1c200:	and	r3, r3, #31
   1c204:	ldr	r2, [r6, r2, lsl #2]
   1c208:	lsr	r3, r2, r3
   1c20c:	tst	r3, #1
   1c210:	beq	1bfb4 <__assert_fail@plt+0xa410>
   1c214:	str	r5, [sp, #20]
   1c218:	ldrb	r3, [r1]
   1c21c:	str	r3, [sp, #28]
   1c220:	strb	r5, [sp, #24]
   1c224:	strb	r5, [sp, #12]
   1c228:	ldrb	r3, [sp, #24]
   1c22c:	cmp	r3, #0
   1c230:	beq	1c240 <__assert_fail@plt+0xa69c>
   1c234:	ldr	r3, [sp, #28]
   1c238:	cmp	r3, #0
   1c23c:	beq	1c620 <__assert_fail@plt+0xaa7c>
   1c240:	ldrb	r3, [sp, #68]	; 0x44
   1c244:	cmp	r3, #0
   1c248:	bne	1c16c <__assert_fail@plt+0xa5c8>
   1c24c:	ldrb	r3, [sp, #56]	; 0x38
   1c250:	cmp	r3, #0
   1c254:	bne	1c0e0 <__assert_fail@plt+0xa53c>
   1c258:	ldr	r1, [sp, #72]	; 0x48
   1c25c:	ldrb	r3, [r1]
   1c260:	lsr	r2, r3, #5
   1c264:	and	r3, r3, #31
   1c268:	ldr	r2, [r6, r2, lsl #2]
   1c26c:	lsr	r3, r2, r3
   1c270:	tst	r3, #1
   1c274:	beq	1c0cc <__assert_fail@plt+0xa528>
   1c278:	str	r5, [sp, #76]	; 0x4c
   1c27c:	ldrb	r3, [r1]
   1c280:	str	r3, [sp, #84]	; 0x54
   1c284:	strb	r5, [sp, #80]	; 0x50
   1c288:	b	1c168 <__assert_fail@plt+0xa5c4>
   1c28c:	movw	r3, #8644	; 0x21c4
   1c290:	movt	r3, #3
   1c294:	mov	r2, #143	; 0x8f
   1c298:	movw	r1, #8236	; 0x202c
   1c29c:	movt	r1, #3
   1c2a0:	movw	r0, #8252	; 0x203c
   1c2a4:	movt	r0, #3
   1c2a8:	bl	11ba4 <__assert_fail@plt>
   1c2ac:	ldr	r0, [sp, #72]	; 0x48
   1c2b0:	bl	11988 <strlen@plt>
   1c2b4:	str	r0, [sp, #76]	; 0x4c
   1c2b8:	mov	r3, #0
   1c2bc:	strb	r3, [sp, #80]	; 0x50
   1c2c0:	b	1c168 <__assert_fail@plt+0xa5c4>
   1c2c4:	movw	r3, #8644	; 0x21c4
   1c2c8:	movt	r3, #3
   1c2cc:	mov	r2, #171	; 0xab
   1c2d0:	movw	r1, #8236	; 0x202c
   1c2d4:	movt	r1, #3
   1c2d8:	movw	r0, #8276	; 0x2054
   1c2dc:	movt	r0, #3
   1c2e0:	bl	11ba4 <__assert_fail@plt>
   1c2e4:	movw	r3, #8644	; 0x21c4
   1c2e8:	movt	r3, #3
   1c2ec:	mov	r2, #172	; 0xac
   1c2f0:	movw	r1, #8236	; 0x202c
   1c2f4:	movt	r1, #3
   1c2f8:	movw	r0, #8300	; 0x206c
   1c2fc:	movt	r0, #3
   1c300:	bl	11ba4 <__assert_fail@plt>
   1c304:	ldrb	r3, [sp, #12]
   1c308:	cmp	r3, #0
   1c30c:	beq	1c62c <__assert_fail@plt+0xaa88>
   1c310:	b	1c67c <__assert_fail@plt+0xaad8>
   1c314:	add	r0, sp, #4
   1c318:	bl	117b4 <mbsinit@plt>
   1c31c:	cmp	r0, #0
   1c320:	movne	r3, #1
   1c324:	strbne	r3, [sp]
   1c328:	beq	1c3b4 <__assert_fail@plt+0xa810>
   1c32c:	ldr	r4, [sp, #16]
   1c330:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1c334:	mov	r1, r0
   1c338:	mov	r0, r4
   1c33c:	bl	2cfb8 <__assert_fail@plt+0x1b414>
   1c340:	add	r3, sp, #4
   1c344:	mov	r2, r0
   1c348:	mov	r1, r4
   1c34c:	add	r0, sp, #28
   1c350:	bl	1be94 <__assert_fail@plt+0xa2f0>
   1c354:	str	r0, [sp, #20]
   1c358:	cmn	r0, #1
   1c35c:	beq	1c3d4 <__assert_fail@plt+0xa830>
   1c360:	cmn	r0, #2
   1c364:	beq	1c3e8 <__assert_fail@plt+0xa844>
   1c368:	cmp	r0, #0
   1c36c:	bne	1c394 <__assert_fail@plt+0xa7f0>
   1c370:	mov	r3, #1
   1c374:	str	r3, [sp, #20]
   1c378:	ldr	r3, [sp, #16]
   1c37c:	ldrb	r3, [r3]
   1c380:	cmp	r3, #0
   1c384:	bne	1c400 <__assert_fail@plt+0xa85c>
   1c388:	ldr	r3, [sp, #28]
   1c38c:	cmp	r3, #0
   1c390:	bne	1c420 <__assert_fail@plt+0xa87c>
   1c394:	mov	r3, #1
   1c398:	strb	r3, [sp, #24]
   1c39c:	add	r0, sp, #4
   1c3a0:	bl	117b4 <mbsinit@plt>
   1c3a4:	cmp	r0, #0
   1c3a8:	movne	r3, #0
   1c3ac:	strbne	r3, [sp]
   1c3b0:	b	1c674 <__assert_fail@plt+0xaad0>
   1c3b4:	movw	r3, #8644	; 0x21c4
   1c3b8:	movt	r3, #3
   1c3bc:	mov	r2, #143	; 0x8f
   1c3c0:	movw	r1, #8236	; 0x202c
   1c3c4:	movt	r1, #3
   1c3c8:	movw	r0, #8252	; 0x203c
   1c3cc:	movt	r0, #3
   1c3d0:	bl	11ba4 <__assert_fail@plt>
   1c3d4:	mov	r3, #1
   1c3d8:	str	r3, [sp, #20]
   1c3dc:	mov	r3, #0
   1c3e0:	strb	r3, [sp, #24]
   1c3e4:	b	1c674 <__assert_fail@plt+0xaad0>
   1c3e8:	ldr	r0, [sp, #16]
   1c3ec:	bl	11988 <strlen@plt>
   1c3f0:	str	r0, [sp, #20]
   1c3f4:	mov	r3, #0
   1c3f8:	strb	r3, [sp, #24]
   1c3fc:	b	1c674 <__assert_fail@plt+0xaad0>
   1c400:	movw	r3, #8644	; 0x21c4
   1c404:	movt	r3, #3
   1c408:	mov	r2, #171	; 0xab
   1c40c:	movw	r1, #8236	; 0x202c
   1c410:	movt	r1, #3
   1c414:	movw	r0, #8276	; 0x2054
   1c418:	movt	r0, #3
   1c41c:	bl	11ba4 <__assert_fail@plt>
   1c420:	movw	r3, #8644	; 0x21c4
   1c424:	movt	r3, #3
   1c428:	mov	r2, #172	; 0xac
   1c42c:	movw	r1, #8236	; 0x202c
   1c430:	movt	r1, #3
   1c434:	movw	r0, #8300	; 0x206c
   1c438:	movt	r0, #3
   1c43c:	bl	11ba4 <__assert_fail@plt>
   1c440:	add	r0, sp, #60	; 0x3c
   1c444:	bl	117b4 <mbsinit@plt>
   1c448:	cmp	r0, #0
   1c44c:	movne	r3, #1
   1c450:	strbne	r3, [sp, #56]	; 0x38
   1c454:	beq	1c4dc <__assert_fail@plt+0xa938>
   1c458:	ldr	r4, [sp, #72]	; 0x48
   1c45c:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1c460:	mov	r1, r0
   1c464:	mov	r0, r4
   1c468:	bl	2cfb8 <__assert_fail@plt+0x1b414>
   1c46c:	add	r3, sp, #60	; 0x3c
   1c470:	mov	r2, r0
   1c474:	mov	r1, r4
   1c478:	add	r0, sp, #84	; 0x54
   1c47c:	bl	1be94 <__assert_fail@plt+0xa2f0>
   1c480:	cmn	r0, #1
   1c484:	beq	1c548 <__assert_fail@plt+0xa9a4>
   1c488:	cmn	r0, #2
   1c48c:	beq	1c550 <__assert_fail@plt+0xa9ac>
   1c490:	cmp	r0, #0
   1c494:	bne	1c52c <__assert_fail@plt+0xa988>
   1c498:	mov	r3, #1
   1c49c:	str	r3, [sp, #76]	; 0x4c
   1c4a0:	ldr	r3, [sp, #72]	; 0x48
   1c4a4:	ldrb	r3, [r3]
   1c4a8:	cmp	r3, #0
   1c4ac:	bne	1c4fc <__assert_fail@plt+0xa958>
   1c4b0:	ldr	r3, [sp, #84]	; 0x54
   1c4b4:	cmp	r3, #0
   1c4b8:	beq	1c52c <__assert_fail@plt+0xa988>
   1c4bc:	movw	r3, #8644	; 0x21c4
   1c4c0:	movt	r3, #3
   1c4c4:	mov	r2, #172	; 0xac
   1c4c8:	movw	r1, #8236	; 0x202c
   1c4cc:	movt	r1, #3
   1c4d0:	movw	r0, #8300	; 0x206c
   1c4d4:	movt	r0, #3
   1c4d8:	bl	11ba4 <__assert_fail@plt>
   1c4dc:	movw	r3, #8644	; 0x21c4
   1c4e0:	movt	r3, #3
   1c4e4:	mov	r2, #143	; 0x8f
   1c4e8:	movw	r1, #8236	; 0x202c
   1c4ec:	movt	r1, #3
   1c4f0:	movw	r0, #8252	; 0x203c
   1c4f4:	movt	r0, #3
   1c4f8:	bl	11ba4 <__assert_fail@plt>
   1c4fc:	movw	r3, #8644	; 0x21c4
   1c500:	movt	r3, #3
   1c504:	mov	r2, #171	; 0xab
   1c508:	movw	r1, #8236	; 0x202c
   1c50c:	movt	r1, #3
   1c510:	movw	r0, #8276	; 0x2054
   1c514:	movt	r0, #3
   1c518:	bl	11ba4 <__assert_fail@plt>
   1c51c:	ldrb	r3, [sp, #80]	; 0x50
   1c520:	cmp	r3, #0
   1c524:	mvneq	r0, #0
   1c528:	beq	1c5cc <__assert_fail@plt+0xaa28>
   1c52c:	ldr	r0, [sp, #84]	; 0x54
   1c530:	adds	r0, r0, #0
   1c534:	movne	r0, #1
   1c538:	rsb	r0, r0, #0
   1c53c:	b	1c5cc <__assert_fail@plt+0xaa28>
   1c540:	mov	r0, #1
   1c544:	b	1c5cc <__assert_fail@plt+0xaa28>
   1c548:	mvn	r0, #0
   1c54c:	b	1c5cc <__assert_fail@plt+0xaa28>
   1c550:	mvn	r0, #0
   1c554:	b	1c5cc <__assert_fail@plt+0xaa28>
   1c558:	mvn	r0, #0
   1c55c:	b	1c5cc <__assert_fail@plt+0xaa28>
   1c560:	bl	11964 <__ctype_b_loc@plt>
   1c564:	ldr	r8, [r0]
   1c568:	sub	r7, r7, #1
   1c56c:	sub	r6, r6, #1
   1c570:	b	1c584 <__assert_fail@plt+0xa9e0>
   1c574:	cmp	r4, #0
   1c578:	beq	1c5c8 <__assert_fail@plt+0xaa24>
   1c57c:	cmp	r4, r5
   1c580:	bne	1c5c8 <__assert_fail@plt+0xaa24>
   1c584:	ldrb	r4, [r7, #1]!
   1c588:	lsl	r3, r4, #1
   1c58c:	ldrh	r3, [r8, r3]
   1c590:	tst	r3, #256	; 0x100
   1c594:	beq	1c5a4 <__assert_fail@plt+0xaa00>
   1c598:	bl	11928 <__ctype_tolower_loc@plt>
   1c59c:	ldr	r3, [r0]
   1c5a0:	ldrb	r4, [r3, r4, lsl #2]
   1c5a4:	ldrb	r5, [r6, #1]!
   1c5a8:	lsl	r3, r5, #1
   1c5ac:	ldrh	r3, [r8, r3]
   1c5b0:	tst	r3, #256	; 0x100
   1c5b4:	beq	1c574 <__assert_fail@plt+0xa9d0>
   1c5b8:	bl	11928 <__ctype_tolower_loc@plt>
   1c5bc:	ldr	r3, [r0]
   1c5c0:	ldrb	r5, [r3, r5, lsl #2]
   1c5c4:	b	1c574 <__assert_fail@plt+0xa9d0>
   1c5c8:	sub	r0, r4, r5
   1c5cc:	add	sp, sp, #112	; 0x70
   1c5d0:	ldrd	r4, [sp]
   1c5d4:	ldrd	r6, [sp, #8]
   1c5d8:	ldr	r8, [sp, #16]
   1c5dc:	add	sp, sp, #20
   1c5e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c5e4:	mov	r0, #0
   1c5e8:	bx	lr
   1c5ec:	mov	r0, #1
   1c5f0:	b	1c5cc <__assert_fail@plt+0xaa28>
   1c5f4:	ldrb	r3, [sp, #24]
   1c5f8:	cmp	r3, #0
   1c5fc:	bne	1c558 <__assert_fail@plt+0xa9b4>
   1c600:	ldr	r2, [sp, #20]
   1c604:	ldr	r3, [sp, #76]	; 0x4c
   1c608:	cmp	r2, r3
   1c60c:	bne	1bf70 <__assert_fail@plt+0xa3cc>
   1c610:	ldr	r1, [sp, #72]	; 0x48
   1c614:	ldr	r0, [sp, #16]
   1c618:	bl	117c0 <memcmp@plt>
   1c61c:	b	1c1a8 <__assert_fail@plt+0xa604>
   1c620:	ldrb	r3, [sp, #12]
   1c624:	cmp	r3, #0
   1c628:	bne	1c698 <__assert_fail@plt+0xaaf4>
   1c62c:	ldrb	r3, [sp]
   1c630:	cmp	r3, #0
   1c634:	bne	1c32c <__assert_fail@plt+0xa788>
   1c638:	ldr	r1, [sp, #16]
   1c63c:	ldrb	r3, [r1]
   1c640:	movw	r2, #8612	; 0x21a4
   1c644:	movt	r2, #3
   1c648:	lsr	r0, r3, #5
   1c64c:	and	r3, r3, #31
   1c650:	ldr	r2, [r2, r0, lsl #2]
   1c654:	lsr	r3, r2, r3
   1c658:	tst	r3, #1
   1c65c:	beq	1c314 <__assert_fail@plt+0xa770>
   1c660:	mov	r3, #1
   1c664:	str	r3, [sp, #20]
   1c668:	ldrb	r2, [r1]
   1c66c:	str	r2, [sp, #28]
   1c670:	strb	r3, [sp, #24]
   1c674:	mov	r3, #1
   1c678:	strb	r3, [sp, #12]
   1c67c:	ldrb	r3, [sp, #24]
   1c680:	cmp	r3, #0
   1c684:	beq	1c540 <__assert_fail@plt+0xa99c>
   1c688:	ldr	r3, [sp, #28]
   1c68c:	cmp	r3, #0
   1c690:	movne	r0, #1
   1c694:	bne	1c5cc <__assert_fail@plt+0xaa28>
   1c698:	ldrb	r3, [sp, #68]	; 0x44
   1c69c:	cmp	r3, #0
   1c6a0:	bne	1c51c <__assert_fail@plt+0xa978>
   1c6a4:	ldrb	r3, [sp, #56]	; 0x38
   1c6a8:	cmp	r3, #0
   1c6ac:	bne	1c458 <__assert_fail@plt+0xa8b4>
   1c6b0:	ldr	r1, [sp, #72]	; 0x48
   1c6b4:	ldrb	r3, [r1]
   1c6b8:	movw	r2, #8612	; 0x21a4
   1c6bc:	movt	r2, #3
   1c6c0:	lsr	r0, r3, #5
   1c6c4:	and	r3, r3, #31
   1c6c8:	ldr	r2, [r2, r0, lsl #2]
   1c6cc:	lsr	r3, r2, r3
   1c6d0:	tst	r3, #1
   1c6d4:	beq	1c440 <__assert_fail@plt+0xa89c>
   1c6d8:	mov	r3, #1
   1c6dc:	str	r3, [sp, #76]	; 0x4c
   1c6e0:	ldrb	r3, [r1]
   1c6e4:	str	r3, [sp, #84]	; 0x54
   1c6e8:	b	1c52c <__assert_fail@plt+0xa988>
   1c6ec:	str	r4, [sp, #-8]!
   1c6f0:	str	lr, [sp, #4]
   1c6f4:	mov	r1, #32
   1c6f8:	bl	11994 <strchr@plt>
   1c6fc:	cmp	r0, #0
   1c700:	movne	r3, #0
   1c704:	strbne	r3, [r0]
   1c708:	ldr	r4, [sp]
   1c70c:	add	sp, sp, #4
   1c710:	pop	{pc}		; (ldr pc, [sp], #4)
   1c714:	strd	r4, [sp, #-16]!
   1c718:	str	r6, [sp, #8]
   1c71c:	str	lr, [sp, #12]
   1c720:	mov	r4, r0
   1c724:	bl	11988 <strlen@plt>
   1c728:	add	r0, r0, #1
   1c72c:	mov	r2, r4
   1c730:	mov	r3, #0
   1c734:	b	1c74c <__assert_fail@plt+0xaba8>
   1c738:	strb	r1, [r2]
   1c73c:	add	r3, r3, #1
   1c740:	add	r2, r2, #1
   1c744:	cmp	r0, r3
   1c748:	bls	1c7c4 <__assert_fail@plt+0xac20>
   1c74c:	ldrb	r1, [r4, r3]
   1c750:	cmp	r1, #92	; 0x5c
   1c754:	bne	1c738 <__assert_fail@plt+0xab94>
   1c758:	add	ip, r3, #4
   1c75c:	cmp	ip, r0
   1c760:	bcs	1c738 <__assert_fail@plt+0xab94>
   1c764:	add	ip, r4, r3
   1c768:	ldrb	lr, [ip, #1]
   1c76c:	sub	ip, lr, #48	; 0x30
   1c770:	uxtb	ip, ip
   1c774:	cmp	ip, #3
   1c778:	bhi	1c738 <__assert_fail@plt+0xab94>
   1c77c:	add	ip, r4, r3
   1c780:	ldrb	r5, [ip, #2]
   1c784:	sub	ip, r5, #48	; 0x30
   1c788:	uxtb	ip, ip
   1c78c:	cmp	ip, #7
   1c790:	bhi	1c738 <__assert_fail@plt+0xab94>
   1c794:	add	r6, r3, #3
   1c798:	ldrb	ip, [r4, r6]
   1c79c:	sub	ip, ip, #48	; 0x30
   1c7a0:	uxtb	ip, ip
   1c7a4:	cmp	ip, #7
   1c7a8:	bhi	1c738 <__assert_fail@plt+0xab94>
   1c7ac:	add	r3, r5, lr, lsl #3
   1c7b0:	sub	r3, r3, #432	; 0x1b0
   1c7b4:	add	r3, ip, r3, lsl #3
   1c7b8:	strb	r3, [r2]
   1c7bc:	mov	r3, r6
   1c7c0:	b	1c73c <__assert_fail@plt+0xab98>
   1c7c4:	ldrd	r4, [sp]
   1c7c8:	ldr	r6, [sp, #8]
   1c7cc:	add	sp, sp, #12
   1c7d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c7d4:	str	r4, [sp, #-8]!
   1c7d8:	str	lr, [sp, #4]
   1c7dc:	mov	r4, r0
   1c7e0:	ldr	r0, [r0]
   1c7e4:	bl	17750 <__assert_fail@plt+0x5bac>
   1c7e8:	ldr	r0, [r4, #4]
   1c7ec:	bl	17750 <__assert_fail@plt+0x5bac>
   1c7f0:	ldr	r0, [r4, #8]
   1c7f4:	bl	17750 <__assert_fail@plt+0x5bac>
   1c7f8:	ldrb	r3, [r4, #24]
   1c7fc:	tst	r3, #4
   1c800:	bne	1c818 <__assert_fail@plt+0xac74>
   1c804:	mov	r0, r4
   1c808:	bl	17750 <__assert_fail@plt+0x5bac>
   1c80c:	ldr	r4, [sp]
   1c810:	add	sp, sp, #4
   1c814:	pop	{pc}		; (ldr pc, [sp], #4)
   1c818:	ldr	r0, [r4, #12]
   1c81c:	bl	17750 <__assert_fail@plt+0x5bac>
   1c820:	b	1c804 <__assert_fail@plt+0xac60>
   1c824:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c828:	strd	r6, [sp, #8]
   1c82c:	strd	r8, [sp, #16]
   1c830:	strd	sl, [sp, #24]
   1c834:	str	lr, [sp, #32]
   1c838:	sub	sp, sp, #44	; 0x2c
   1c83c:	movw	r1, #8820	; 0x2274
   1c840:	movt	r1, #3
   1c844:	movw	r0, #8664	; 0x21d8
   1c848:	movt	r0, #3
   1c84c:	bl	11afc <fopen64@plt>
   1c850:	subs	r5, r0, #0
   1c854:	beq	1cdd0 <__assert_fail@plt+0xb22c>
   1c858:	mov	r3, #0
   1c85c:	str	r3, [sp, #16]
   1c860:	str	r3, [sp, #20]
   1c864:	add	r9, sp, #36	; 0x24
   1c868:	movw	r7, #8688	; 0x21f0
   1c86c:	movt	r7, #3
   1c870:	movw	sl, #8708	; 0x2204
   1c874:	movt	sl, #3
   1c878:	mov	fp, #65280	; 0xff00
   1c87c:	movt	fp, #15
   1c880:	mov	r3, r5
   1c884:	mov	r2, #10
   1c888:	add	r1, sp, #20
   1c88c:	add	r0, sp, #16
   1c890:	bl	116f4 <__getdelim@plt>
   1c894:	cmn	r0, #1
   1c898:	beq	1cd24 <__assert_fail@plt+0xb180>
   1c89c:	add	r3, sp, #32
   1c8a0:	str	r3, [sp]
   1c8a4:	add	r3, sp, #28
   1c8a8:	add	r2, sp, #24
   1c8ac:	mov	r1, r7
   1c8b0:	ldr	r0, [sp, #16]
   1c8b4:	bl	11a9c <sscanf@plt>
   1c8b8:	sub	r0, r0, #2
   1c8bc:	cmp	r0, #1
   1c8c0:	bhi	1c880 <__assert_fail@plt+0xacdc>
   1c8c4:	ldr	r4, [sp, #16]
   1c8c8:	ldr	r3, [sp, #32]
   1c8cc:	add	r4, r4, r3
   1c8d0:	mov	r0, r4
   1c8d4:	bl	1c6ec <__assert_fail@plt+0xab48>
   1c8d8:	cmp	r0, #0
   1c8dc:	beq	1c880 <__assert_fail@plt+0xacdc>
   1c8e0:	add	r6, r0, #1
   1c8e4:	mov	r0, r6
   1c8e8:	bl	1c6ec <__assert_fail@plt+0xab48>
   1c8ec:	cmp	r0, #0
   1c8f0:	beq	1c880 <__assert_fail@plt+0xacdc>
   1c8f4:	mov	r1, sl
   1c8f8:	add	r0, r0, #1
   1c8fc:	bl	2f604 <__assert_fail@plt+0x1da60>
   1c900:	cmp	r0, #0
   1c904:	beq	1c880 <__assert_fail@plt+0xacdc>
   1c908:	add	r8, r0, #3
   1c90c:	mov	r0, r8
   1c910:	bl	1c6ec <__assert_fail@plt+0xab48>
   1c914:	cmp	r0, #0
   1c918:	beq	1c880 <__assert_fail@plt+0xacdc>
   1c91c:	add	r3, r0, #1
   1c920:	str	r3, [sp, #8]
   1c924:	mov	r0, r3
   1c928:	bl	1c6ec <__assert_fail@plt+0xab48>
   1c92c:	cmp	r0, #0
   1c930:	beq	1c880 <__assert_fail@plt+0xacdc>
   1c934:	ldr	r0, [sp, #8]
   1c938:	bl	1c714 <__assert_fail@plt+0xab70>
   1c93c:	mov	r0, r6
   1c940:	bl	1c714 <__assert_fail@plt+0xab70>
   1c944:	mov	r0, r4
   1c948:	bl	1c714 <__assert_fail@plt+0xab70>
   1c94c:	str	r8, [sp, #12]
   1c950:	mov	r0, r8
   1c954:	bl	1c714 <__assert_fail@plt+0xab70>
   1c958:	mov	r0, #32
   1c95c:	bl	2db6c <__assert_fail@plt+0x1bfc8>
   1c960:	mov	r8, r0
   1c964:	ldr	r0, [sp, #8]
   1c968:	bl	2dfd8 <__assert_fail@plt+0x1c434>
   1c96c:	str	r0, [r8]
   1c970:	mov	r0, r6
   1c974:	bl	2dfd8 <__assert_fail@plt+0x1c434>
   1c978:	str	r0, [r8, #4]
   1c97c:	mov	r0, r4
   1c980:	bl	2dfd8 <__assert_fail@plt+0x1c434>
   1c984:	str	r0, [r8, #8]
   1c988:	ldr	r0, [sp, #12]
   1c98c:	bl	2dfd8 <__assert_fail@plt+0x1c434>
   1c990:	mov	r4, r0
   1c994:	str	r0, [r8, #12]
   1c998:	ldrb	r3, [r8, #24]
   1c99c:	orr	r3, r3, #4
   1c9a0:	strb	r3, [r8, #24]
   1c9a4:	ldr	r1, [sp, #28]
   1c9a8:	ldr	r3, [sp, #24]
   1c9ac:	and	ip, fp, r3, lsl #8
   1c9b0:	bic	r3, r3, #4080	; 0xff0
   1c9b4:	bic	r3, r3, #15
   1c9b8:	uxtb	r2, r1
   1c9bc:	orr	ip, r2, ip
   1c9c0:	mov	r2, #0
   1c9c4:	movt	r2, #65520	; 0xfff0
   1c9c8:	and	r2, r2, r1, lsl #12
   1c9cc:	orr	r2, r2, ip
   1c9d0:	orr	r3, r3, r1, lsr #20
   1c9d4:	str	r2, [r8, #16]
   1c9d8:	str	r3, [r8, #20]
   1c9dc:	movw	r1, #8712	; 0x2208
   1c9e0:	movt	r1, #3
   1c9e4:	bl	1170c <strcmp@plt>
   1c9e8:	cmp	r0, #0
   1c9ec:	moveq	r0, #1
   1c9f0:	beq	1cb5c <__assert_fail@plt+0xafb8>
   1c9f4:	movw	r1, #8720	; 0x2210
   1c9f8:	movt	r1, #3
   1c9fc:	mov	r0, r4
   1ca00:	bl	1170c <strcmp@plt>
   1ca04:	cmp	r0, #0
   1ca08:	moveq	r0, #1
   1ca0c:	beq	1cb5c <__assert_fail@plt+0xafb8>
   1ca10:	movw	r1, #8728	; 0x2218
   1ca14:	movt	r1, #3
   1ca18:	mov	r0, r4
   1ca1c:	bl	1170c <strcmp@plt>
   1ca20:	cmp	r0, #0
   1ca24:	moveq	r0, #1
   1ca28:	beq	1cb5c <__assert_fail@plt+0xafb8>
   1ca2c:	movw	r1, #8736	; 0x2220
   1ca30:	movt	r1, #3
   1ca34:	mov	r0, r4
   1ca38:	bl	1170c <strcmp@plt>
   1ca3c:	cmp	r0, #0
   1ca40:	moveq	r0, #1
   1ca44:	beq	1cb5c <__assert_fail@plt+0xafb8>
   1ca48:	movw	r1, #8744	; 0x2228
   1ca4c:	movt	r1, #3
   1ca50:	mov	r0, r4
   1ca54:	bl	1170c <strcmp@plt>
   1ca58:	cmp	r0, #0
   1ca5c:	moveq	r0, #1
   1ca60:	beq	1cb5c <__assert_fail@plt+0xafb8>
   1ca64:	movw	r1, #8752	; 0x2230
   1ca68:	movt	r1, #3
   1ca6c:	mov	r0, r4
   1ca70:	bl	1170c <strcmp@plt>
   1ca74:	cmp	r0, #0
   1ca78:	moveq	r0, #1
   1ca7c:	beq	1cb5c <__assert_fail@plt+0xafb8>
   1ca80:	movw	r1, #8760	; 0x2238
   1ca84:	movt	r1, #3
   1ca88:	mov	r0, r4
   1ca8c:	bl	1170c <strcmp@plt>
   1ca90:	cmp	r0, #0
   1ca94:	moveq	r0, #1
   1ca98:	beq	1cb5c <__assert_fail@plt+0xafb8>
   1ca9c:	movw	r1, #8772	; 0x2244
   1caa0:	movt	r1, #3
   1caa4:	mov	r0, r4
   1caa8:	bl	1170c <strcmp@plt>
   1caac:	cmp	r0, #0
   1cab0:	moveq	r0, #1
   1cab4:	beq	1cb5c <__assert_fail@plt+0xafb8>
   1cab8:	movw	r1, #8780	; 0x224c
   1cabc:	movt	r1, #3
   1cac0:	mov	r0, r4
   1cac4:	bl	1170c <strcmp@plt>
   1cac8:	cmp	r0, #0
   1cacc:	moveq	r0, #1
   1cad0:	beq	1cb5c <__assert_fail@plt+0xafb8>
   1cad4:	movw	r1, #8792	; 0x2258
   1cad8:	movt	r1, #3
   1cadc:	mov	r0, r4
   1cae0:	bl	1170c <strcmp@plt>
   1cae4:	cmp	r0, #0
   1cae8:	moveq	r0, #1
   1caec:	beq	1cb5c <__assert_fail@plt+0xafb8>
   1caf0:	movw	r1, #8800	; 0x2260
   1caf4:	movt	r1, #3
   1caf8:	mov	r0, r4
   1cafc:	bl	1170c <strcmp@plt>
   1cb00:	cmp	r0, #0
   1cb04:	moveq	r0, #1
   1cb08:	beq	1cb5c <__assert_fail@plt+0xafb8>
   1cb0c:	movw	r1, #8808	; 0x2268
   1cb10:	movt	r1, #3
   1cb14:	mov	r0, r4
   1cb18:	bl	1170c <strcmp@plt>
   1cb1c:	cmp	r0, #0
   1cb20:	moveq	r0, #1
   1cb24:	beq	1cb5c <__assert_fail@plt+0xafb8>
   1cb28:	movw	r1, #8816	; 0x2270
   1cb2c:	movt	r1, #3
   1cb30:	mov	r0, r4
   1cb34:	bl	1170c <strcmp@plt>
   1cb38:	cmp	r0, #0
   1cb3c:	moveq	r0, #1
   1cb40:	beq	1cb5c <__assert_fail@plt+0xafb8>
   1cb44:	movw	r1, #8824	; 0x2278
   1cb48:	movt	r1, #3
   1cb4c:	mov	r0, r4
   1cb50:	bl	1170c <strcmp@plt>
   1cb54:	clz	r0, r0
   1cb58:	lsr	r0, r0, #5
   1cb5c:	ldrb	r3, [r8, #24]
   1cb60:	bfi	r3, r0, #0, #1
   1cb64:	strb	r3, [r8, #24]
   1cb68:	ldr	r6, [r8]
   1cb6c:	mov	r1, #58	; 0x3a
   1cb70:	mov	r0, r6
   1cb74:	bl	11994 <strchr@plt>
   1cb78:	cmp	r0, #0
   1cb7c:	movne	r0, #1
   1cb80:	beq	1cb9c <__assert_fail@plt+0xaff8>
   1cb84:	ldrb	r3, [r8, #24]
   1cb88:	bfi	r3, r0, #1, #1
   1cb8c:	strb	r3, [r8, #24]
   1cb90:	str	r8, [r9]
   1cb94:	add	r9, r8, #28
   1cb98:	b	1c880 <__assert_fail@plt+0xacdc>
   1cb9c:	ldrb	r3, [r6]
   1cba0:	cmp	r3, #47	; 0x2f
   1cba4:	beq	1ccc0 <__assert_fail@plt+0xb11c>
   1cba8:	movw	r1, #8856	; 0x2298
   1cbac:	movt	r1, #3
   1cbb0:	mov	r0, r4
   1cbb4:	bl	1170c <strcmp@plt>
   1cbb8:	cmp	r0, #0
   1cbbc:	moveq	r0, #1
   1cbc0:	beq	1cb84 <__assert_fail@plt+0xafe0>
   1cbc4:	movw	r1, #8864	; 0x22a0
   1cbc8:	movt	r1, #3
   1cbcc:	mov	r0, r4
   1cbd0:	bl	1170c <strcmp@plt>
   1cbd4:	cmp	r0, #0
   1cbd8:	moveq	r0, #1
   1cbdc:	beq	1cb84 <__assert_fail@plt+0xafe0>
   1cbe0:	movw	r1, #8868	; 0x22a4
   1cbe4:	movt	r1, #3
   1cbe8:	mov	r0, r4
   1cbec:	bl	1170c <strcmp@plt>
   1cbf0:	cmp	r0, #0
   1cbf4:	moveq	r0, #1
   1cbf8:	beq	1cb84 <__assert_fail@plt+0xafe0>
   1cbfc:	movw	r1, #8876	; 0x22ac
   1cc00:	movt	r1, #3
   1cc04:	mov	r0, r4
   1cc08:	bl	1170c <strcmp@plt>
   1cc0c:	cmp	r0, #0
   1cc10:	moveq	r0, #1
   1cc14:	beq	1cb84 <__assert_fail@plt+0xafe0>
   1cc18:	movw	r1, #8888	; 0x22b8
   1cc1c:	movt	r1, #3
   1cc20:	mov	r0, r4
   1cc24:	bl	1170c <strcmp@plt>
   1cc28:	cmp	r0, #0
   1cc2c:	moveq	r0, #1
   1cc30:	beq	1cb84 <__assert_fail@plt+0xafe0>
   1cc34:	movw	r1, #8896	; 0x22c0
   1cc38:	movt	r1, #3
   1cc3c:	mov	r0, r4
   1cc40:	bl	1170c <strcmp@plt>
   1cc44:	cmp	r0, #0
   1cc48:	moveq	r0, #1
   1cc4c:	beq	1cb84 <__assert_fail@plt+0xafe0>
   1cc50:	movw	r1, #8904	; 0x22c8
   1cc54:	movt	r1, #3
   1cc58:	mov	r0, r4
   1cc5c:	bl	1170c <strcmp@plt>
   1cc60:	cmp	r0, #0
   1cc64:	moveq	r0, #1
   1cc68:	beq	1cb84 <__assert_fail@plt+0xafe0>
   1cc6c:	movw	r1, #8912	; 0x22d0
   1cc70:	movt	r1, #3
   1cc74:	mov	r0, r4
   1cc78:	bl	1170c <strcmp@plt>
   1cc7c:	cmp	r0, #0
   1cc80:	moveq	r0, #1
   1cc84:	beq	1cb84 <__assert_fail@plt+0xafe0>
   1cc88:	movw	r1, #8920	; 0x22d8
   1cc8c:	movt	r1, #3
   1cc90:	mov	r0, r4
   1cc94:	bl	1170c <strcmp@plt>
   1cc98:	cmp	r0, #0
   1cc9c:	moveq	r0, #1
   1cca0:	beq	1cb84 <__assert_fail@plt+0xafe0>
   1cca4:	mov	r1, r6
   1cca8:	movw	r0, #8928	; 0x22e0
   1ccac:	movt	r0, #3
   1ccb0:	bl	1170c <strcmp@plt>
   1ccb4:	clz	r0, r0
   1ccb8:	lsr	r0, r0, #5
   1ccbc:	b	1cb84 <__assert_fail@plt+0xafe0>
   1ccc0:	ldrb	r3, [r6, #1]
   1ccc4:	cmp	r3, #47	; 0x2f
   1ccc8:	bne	1cba8 <__assert_fail@plt+0xb004>
   1cccc:	movw	r1, #8832	; 0x2280
   1ccd0:	movt	r1, #3
   1ccd4:	mov	r0, r4
   1ccd8:	bl	1170c <strcmp@plt>
   1ccdc:	cmp	r0, #0
   1cce0:	moveq	r0, #1
   1cce4:	beq	1cb84 <__assert_fail@plt+0xafe0>
   1cce8:	movw	r1, #8840	; 0x2288
   1ccec:	movt	r1, #3
   1ccf0:	mov	r0, r4
   1ccf4:	bl	1170c <strcmp@plt>
   1ccf8:	cmp	r0, #0
   1ccfc:	moveq	r0, #1
   1cd00:	beq	1cb84 <__assert_fail@plt+0xafe0>
   1cd04:	movw	r1, #8848	; 0x2290
   1cd08:	movt	r1, #3
   1cd0c:	mov	r0, r4
   1cd10:	bl	1170c <strcmp@plt>
   1cd14:	cmp	r0, #0
   1cd18:	moveq	r0, #1
   1cd1c:	beq	1cb84 <__assert_fail@plt+0xafe0>
   1cd20:	b	1cba8 <__assert_fail@plt+0xb004>
   1cd24:	ldr	r0, [sp, #16]
   1cd28:	bl	17750 <__assert_fail@plt+0x5bac>
   1cd2c:	ldr	r3, [r5]
   1cd30:	tst	r3, #32
   1cd34:	bne	1cd74 <__assert_fail@plt+0xb1d0>
   1cd38:	mov	r0, r5
   1cd3c:	bl	15a44 <__assert_fail@plt+0x3ea0>
   1cd40:	cmn	r0, #1
   1cd44:	beq	1cd8c <__assert_fail@plt+0xb1e8>
   1cd48:	mov	r3, #0
   1cd4c:	str	r3, [r9]
   1cd50:	ldr	r6, [sp, #36]	; 0x24
   1cd54:	mov	r0, r6
   1cd58:	add	sp, sp, #44	; 0x2c
   1cd5c:	ldrd	r4, [sp]
   1cd60:	ldrd	r6, [sp, #8]
   1cd64:	ldrd	r8, [sp, #16]
   1cd68:	ldrd	sl, [sp, #24]
   1cd6c:	add	sp, sp, #32
   1cd70:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd74:	bl	119b8 <__errno_location@plt>
   1cd78:	mov	r4, r0
   1cd7c:	ldr	r6, [r0]
   1cd80:	mov	r0, r5
   1cd84:	bl	15a44 <__assert_fail@plt+0x3ea0>
   1cd88:	str	r6, [r4]
   1cd8c:	bl	119b8 <__errno_location@plt>
   1cd90:	mov	r5, r0
   1cd94:	ldr	r6, [r0]
   1cd98:	mov	r3, #0
   1cd9c:	str	r3, [r9]
   1cda0:	ldr	r0, [sp, #36]	; 0x24
   1cda4:	cmp	r0, r3
   1cda8:	beq	1cdc4 <__assert_fail@plt+0xb220>
   1cdac:	ldr	r4, [r0, #28]
   1cdb0:	bl	1c7d4 <__assert_fail@plt+0xac30>
   1cdb4:	str	r4, [sp, #36]	; 0x24
   1cdb8:	mov	r0, r4
   1cdbc:	cmp	r4, #0
   1cdc0:	bne	1cdac <__assert_fail@plt+0xb208>
   1cdc4:	str	r6, [r5]
   1cdc8:	mov	r6, #0
   1cdcc:	b	1cd54 <__assert_fail@plt+0xb1b0>
   1cdd0:	movw	r1, #9720	; 0x25f8
   1cdd4:	movt	r1, #3
   1cdd8:	movw	r0, #8936	; 0x22e8
   1cddc:	movt	r0, #3
   1cde0:	bl	11b14 <setmntent@plt>
   1cde4:	subs	r6, r0, #0
   1cde8:	beq	1cd54 <__assert_fail@plt+0xb1b0>
   1cdec:	add	r9, sp, #36	; 0x24
   1cdf0:	movw	r8, #8948	; 0x22f4
   1cdf4:	movt	r8, #3
   1cdf8:	movw	r7, #8712	; 0x2208
   1cdfc:	movt	r7, #3
   1ce00:	movw	fp, #8720	; 0x2210
   1ce04:	movt	fp, #3
   1ce08:	b	1ce54 <__assert_fail@plt+0xb2b0>
   1ce0c:	ldrb	r3, [r4, #24]
   1ce10:	bfi	r3, r2, #0, #1
   1ce14:	strb	r3, [r4, #24]
   1ce18:	ldr	sl, [r4]
   1ce1c:	mov	r1, #58	; 0x3a
   1ce20:	mov	r0, sl
   1ce24:	bl	11994 <strchr@plt>
   1ce28:	cmp	r0, #0
   1ce2c:	movne	r0, #1
   1ce30:	beq	1d03c <__assert_fail@plt+0xb498>
   1ce34:	ldrb	r3, [r4, #24]
   1ce38:	bfi	r3, r0, #1, #1
   1ce3c:	strb	r3, [r4, #24]
   1ce40:	mvn	r2, #0
   1ce44:	mvn	r3, #0
   1ce48:	strd	r2, [r4, #16]
   1ce4c:	str	r4, [r9]
   1ce50:	add	r9, r4, #28
   1ce54:	mov	r0, r6
   1ce58:	bl	118c8 <getmntent@plt>
   1ce5c:	subs	r5, r0, #0
   1ce60:	beq	1d1c4 <__assert_fail@plt+0xb620>
   1ce64:	mov	r1, r8
   1ce68:	mov	r0, r5
   1ce6c:	bl	1188c <hasmntopt@plt>
   1ce70:	mov	sl, r0
   1ce74:	mov	r0, #32
   1ce78:	bl	2db6c <__assert_fail@plt+0x1bfc8>
   1ce7c:	mov	r4, r0
   1ce80:	ldr	r0, [r5]
   1ce84:	bl	2dfd8 <__assert_fail@plt+0x1c434>
   1ce88:	str	r0, [r4]
   1ce8c:	ldr	r0, [r5, #4]
   1ce90:	bl	2dfd8 <__assert_fail@plt+0x1c434>
   1ce94:	str	r0, [r4, #4]
   1ce98:	mov	r3, #0
   1ce9c:	str	r3, [r4, #8]
   1cea0:	ldr	r0, [r5, #8]
   1cea4:	bl	2dfd8 <__assert_fail@plt+0x1c434>
   1cea8:	mov	r5, r0
   1ceac:	str	r0, [r4, #12]
   1ceb0:	ldrb	r3, [r4, #24]
   1ceb4:	orr	r3, r3, #4
   1ceb8:	strb	r3, [r4, #24]
   1cebc:	mov	r1, r7
   1cec0:	bl	1170c <strcmp@plt>
   1cec4:	cmp	r0, #0
   1cec8:	moveq	r2, #1
   1cecc:	beq	1ce0c <__assert_fail@plt+0xb268>
   1ced0:	mov	r1, fp
   1ced4:	mov	r0, r5
   1ced8:	bl	1170c <strcmp@plt>
   1cedc:	cmp	r0, #0
   1cee0:	moveq	r2, #1
   1cee4:	beq	1ce0c <__assert_fail@plt+0xb268>
   1cee8:	movw	r1, #8728	; 0x2218
   1ceec:	movt	r1, #3
   1cef0:	mov	r0, r5
   1cef4:	bl	1170c <strcmp@plt>
   1cef8:	cmp	r0, #0
   1cefc:	moveq	r2, #1
   1cf00:	beq	1ce0c <__assert_fail@plt+0xb268>
   1cf04:	movw	r1, #8736	; 0x2220
   1cf08:	movt	r1, #3
   1cf0c:	mov	r0, r5
   1cf10:	bl	1170c <strcmp@plt>
   1cf14:	cmp	r0, #0
   1cf18:	moveq	r2, #1
   1cf1c:	beq	1ce0c <__assert_fail@plt+0xb268>
   1cf20:	movw	r1, #8744	; 0x2228
   1cf24:	movt	r1, #3
   1cf28:	mov	r0, r5
   1cf2c:	bl	1170c <strcmp@plt>
   1cf30:	cmp	r0, #0
   1cf34:	moveq	r2, #1
   1cf38:	beq	1ce0c <__assert_fail@plt+0xb268>
   1cf3c:	movw	r1, #8752	; 0x2230
   1cf40:	movt	r1, #3
   1cf44:	mov	r0, r5
   1cf48:	bl	1170c <strcmp@plt>
   1cf4c:	cmp	r0, #0
   1cf50:	moveq	r2, #1
   1cf54:	beq	1ce0c <__assert_fail@plt+0xb268>
   1cf58:	movw	r1, #8760	; 0x2238
   1cf5c:	movt	r1, #3
   1cf60:	mov	r0, r5
   1cf64:	bl	1170c <strcmp@plt>
   1cf68:	cmp	r0, #0
   1cf6c:	moveq	r2, #1
   1cf70:	beq	1ce0c <__assert_fail@plt+0xb268>
   1cf74:	movw	r1, #8772	; 0x2244
   1cf78:	movt	r1, #3
   1cf7c:	mov	r0, r5
   1cf80:	bl	1170c <strcmp@plt>
   1cf84:	cmp	r0, #0
   1cf88:	moveq	r2, #1
   1cf8c:	beq	1ce0c <__assert_fail@plt+0xb268>
   1cf90:	movw	r1, #8780	; 0x224c
   1cf94:	movt	r1, #3
   1cf98:	mov	r0, r5
   1cf9c:	bl	1170c <strcmp@plt>
   1cfa0:	cmp	r0, #0
   1cfa4:	moveq	r2, #1
   1cfa8:	beq	1ce0c <__assert_fail@plt+0xb268>
   1cfac:	movw	r1, #8792	; 0x2258
   1cfb0:	movt	r1, #3
   1cfb4:	mov	r0, r5
   1cfb8:	bl	1170c <strcmp@plt>
   1cfbc:	cmp	r0, #0
   1cfc0:	moveq	r2, #1
   1cfc4:	beq	1ce0c <__assert_fail@plt+0xb268>
   1cfc8:	movw	r1, #8800	; 0x2260
   1cfcc:	movt	r1, #3
   1cfd0:	mov	r0, r5
   1cfd4:	bl	1170c <strcmp@plt>
   1cfd8:	cmp	r0, #0
   1cfdc:	moveq	r2, #1
   1cfe0:	beq	1ce0c <__assert_fail@plt+0xb268>
   1cfe4:	movw	r1, #8808	; 0x2268
   1cfe8:	movt	r1, #3
   1cfec:	mov	r0, r5
   1cff0:	bl	1170c <strcmp@plt>
   1cff4:	cmp	r0, #0
   1cff8:	moveq	r2, #1
   1cffc:	beq	1ce0c <__assert_fail@plt+0xb268>
   1d000:	movw	r1, #8816	; 0x2270
   1d004:	movt	r1, #3
   1d008:	mov	r0, r5
   1d00c:	bl	1170c <strcmp@plt>
   1d010:	cmp	r0, #0
   1d014:	moveq	r2, #1
   1d018:	beq	1ce0c <__assert_fail@plt+0xb268>
   1d01c:	movw	r1, #8824	; 0x2278
   1d020:	movt	r1, #3
   1d024:	mov	r0, r5
   1d028:	bl	1170c <strcmp@plt>
   1d02c:	orrs	r3, sl, r0
   1d030:	moveq	r2, #1
   1d034:	movne	r2, #0
   1d038:	b	1ce0c <__assert_fail@plt+0xb268>
   1d03c:	ldrb	r3, [sl]
   1d040:	cmp	r3, #47	; 0x2f
   1d044:	beq	1d160 <__assert_fail@plt+0xb5bc>
   1d048:	movw	r1, #8856	; 0x2298
   1d04c:	movt	r1, #3
   1d050:	mov	r0, r5
   1d054:	bl	1170c <strcmp@plt>
   1d058:	cmp	r0, #0
   1d05c:	moveq	r0, #1
   1d060:	beq	1ce34 <__assert_fail@plt+0xb290>
   1d064:	movw	r1, #8864	; 0x22a0
   1d068:	movt	r1, #3
   1d06c:	mov	r0, r5
   1d070:	bl	1170c <strcmp@plt>
   1d074:	cmp	r0, #0
   1d078:	moveq	r0, #1
   1d07c:	beq	1ce34 <__assert_fail@plt+0xb290>
   1d080:	movw	r1, #8868	; 0x22a4
   1d084:	movt	r1, #3
   1d088:	mov	r0, r5
   1d08c:	bl	1170c <strcmp@plt>
   1d090:	cmp	r0, #0
   1d094:	moveq	r0, #1
   1d098:	beq	1ce34 <__assert_fail@plt+0xb290>
   1d09c:	movw	r1, #8876	; 0x22ac
   1d0a0:	movt	r1, #3
   1d0a4:	mov	r0, r5
   1d0a8:	bl	1170c <strcmp@plt>
   1d0ac:	cmp	r0, #0
   1d0b0:	moveq	r0, #1
   1d0b4:	beq	1ce34 <__assert_fail@plt+0xb290>
   1d0b8:	movw	r1, #8888	; 0x22b8
   1d0bc:	movt	r1, #3
   1d0c0:	mov	r0, r5
   1d0c4:	bl	1170c <strcmp@plt>
   1d0c8:	cmp	r0, #0
   1d0cc:	moveq	r0, #1
   1d0d0:	beq	1ce34 <__assert_fail@plt+0xb290>
   1d0d4:	movw	r1, #8896	; 0x22c0
   1d0d8:	movt	r1, #3
   1d0dc:	mov	r0, r5
   1d0e0:	bl	1170c <strcmp@plt>
   1d0e4:	cmp	r0, #0
   1d0e8:	moveq	r0, #1
   1d0ec:	beq	1ce34 <__assert_fail@plt+0xb290>
   1d0f0:	movw	r1, #8904	; 0x22c8
   1d0f4:	movt	r1, #3
   1d0f8:	mov	r0, r5
   1d0fc:	bl	1170c <strcmp@plt>
   1d100:	cmp	r0, #0
   1d104:	moveq	r0, #1
   1d108:	beq	1ce34 <__assert_fail@plt+0xb290>
   1d10c:	movw	r1, #8912	; 0x22d0
   1d110:	movt	r1, #3
   1d114:	mov	r0, r5
   1d118:	bl	1170c <strcmp@plt>
   1d11c:	cmp	r0, #0
   1d120:	moveq	r0, #1
   1d124:	beq	1ce34 <__assert_fail@plt+0xb290>
   1d128:	movw	r1, #8920	; 0x22d8
   1d12c:	movt	r1, #3
   1d130:	mov	r0, r5
   1d134:	bl	1170c <strcmp@plt>
   1d138:	cmp	r0, #0
   1d13c:	moveq	r0, #1
   1d140:	beq	1ce34 <__assert_fail@plt+0xb290>
   1d144:	mov	r1, sl
   1d148:	movw	r0, #8928	; 0x22e0
   1d14c:	movt	r0, #3
   1d150:	bl	1170c <strcmp@plt>
   1d154:	clz	r0, r0
   1d158:	lsr	r0, r0, #5
   1d15c:	b	1ce34 <__assert_fail@plt+0xb290>
   1d160:	ldrb	r3, [sl, #1]
   1d164:	cmp	r3, #47	; 0x2f
   1d168:	bne	1d048 <__assert_fail@plt+0xb4a4>
   1d16c:	movw	r1, #8832	; 0x2280
   1d170:	movt	r1, #3
   1d174:	mov	r0, r5
   1d178:	bl	1170c <strcmp@plt>
   1d17c:	cmp	r0, #0
   1d180:	moveq	r0, #1
   1d184:	beq	1ce34 <__assert_fail@plt+0xb290>
   1d188:	movw	r1, #8840	; 0x2288
   1d18c:	movt	r1, #3
   1d190:	mov	r0, r5
   1d194:	bl	1170c <strcmp@plt>
   1d198:	cmp	r0, #0
   1d19c:	moveq	r0, #1
   1d1a0:	beq	1ce34 <__assert_fail@plt+0xb290>
   1d1a4:	movw	r1, #8848	; 0x2290
   1d1a8:	movt	r1, #3
   1d1ac:	mov	r0, r5
   1d1b0:	bl	1170c <strcmp@plt>
   1d1b4:	cmp	r0, #0
   1d1b8:	moveq	r0, #1
   1d1bc:	beq	1ce34 <__assert_fail@plt+0xb290>
   1d1c0:	b	1d048 <__assert_fail@plt+0xb4a4>
   1d1c4:	mov	r0, r6
   1d1c8:	bl	11a48 <endmntent@plt>
   1d1cc:	cmp	r0, #0
   1d1d0:	bne	1cd48 <__assert_fail@plt+0xb1a4>
   1d1d4:	b	1cd8c <__assert_fail@plt+0xb1e8>
   1d1d8:	push	{r2, r3}
   1d1dc:	push	{lr}		; (str lr, [sp, #-4]!)
   1d1e0:	sub	sp, sp, #12
   1d1e4:	ldr	r2, [sp, #16]
   1d1e8:	tst	r2, #64	; 0x40
   1d1ec:	addne	r3, sp, #24
   1d1f0:	strne	r3, [sp, #4]
   1d1f4:	ldrne	r3, [sp, #20]
   1d1f8:	moveq	r3, #0
   1d1fc:	bl	119ac <openat64@plt>
   1d200:	bl	2d55c <__assert_fail@plt+0x1b9b8>
   1d204:	add	sp, sp, #12
   1d208:	pop	{lr}		; (ldr lr, [sp], #4)
   1d20c:	add	sp, sp, #8
   1d210:	bx	lr
   1d214:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d218:	strd	r6, [sp, #8]
   1d21c:	str	r8, [sp, #16]
   1d220:	str	lr, [sp, #20]
   1d224:	mov	r6, r3
   1d228:	orr	r2, r2, #540672	; 0x84000
   1d22c:	orr	r2, r2, #2304	; 0x900
   1d230:	bl	1d1d8 <__assert_fail@plt+0xb634>
   1d234:	subs	r4, r0, #0
   1d238:	movlt	r5, #0
   1d23c:	blt	1d254 <__assert_fail@plt+0xb6b0>
   1d240:	mov	r0, r4
   1d244:	bl	11ac0 <fdopendir@plt>
   1d248:	subs	r5, r0, #0
   1d24c:	strne	r4, [r6]
   1d250:	beq	1d26c <__assert_fail@plt+0xb6c8>
   1d254:	mov	r0, r5
   1d258:	ldrd	r4, [sp]
   1d25c:	ldrd	r6, [sp, #8]
   1d260:	ldr	r8, [sp, #16]
   1d264:	add	sp, sp, #20
   1d268:	pop	{pc}		; (ldr pc, [sp], #4)
   1d26c:	bl	119b8 <__errno_location@plt>
   1d270:	mov	r6, r0
   1d274:	ldr	r7, [r0]
   1d278:	mov	r0, r4
   1d27c:	bl	11b80 <close@plt>
   1d280:	str	r7, [r6]
   1d284:	b	1d254 <__assert_fail@plt+0xb6b0>
   1d288:	strd	r4, [sp, #-16]!
   1d28c:	str	r6, [sp, #8]
   1d290:	str	lr, [sp, #12]
   1d294:	subs	r4, r0, #0
   1d298:	beq	1d334 <__assert_fail@plt+0xb790>
   1d29c:	mov	r1, #47	; 0x2f
   1d2a0:	mov	r0, r4
   1d2a4:	bl	11a78 <strrchr@plt>
   1d2a8:	subs	r5, r0, #0
   1d2ac:	beq	1d30c <__assert_fail@plt+0xb768>
   1d2b0:	add	r6, r5, #1
   1d2b4:	sub	r3, r6, r4
   1d2b8:	cmp	r3, #6
   1d2bc:	ble	1d30c <__assert_fail@plt+0xb768>
   1d2c0:	mov	r2, #7
   1d2c4:	movw	r1, #9012	; 0x2334
   1d2c8:	movt	r1, #3
   1d2cc:	sub	r0, r5, #6
   1d2d0:	bl	11b5c <strncmp@plt>
   1d2d4:	cmp	r0, #0
   1d2d8:	bne	1d30c <__assert_fail@plt+0xb768>
   1d2dc:	mov	r2, #3
   1d2e0:	movw	r1, #9020	; 0x233c
   1d2e4:	movt	r1, #3
   1d2e8:	mov	r0, r6
   1d2ec:	bl	11b5c <strncmp@plt>
   1d2f0:	cmp	r0, #0
   1d2f4:	movne	r4, r6
   1d2f8:	bne	1d30c <__assert_fail@plt+0xb768>
   1d2fc:	add	r4, r5, #4
   1d300:	movw	r3, #12832	; 0x3220
   1d304:	movt	r3, #4
   1d308:	str	r4, [r3]
   1d30c:	movw	r3, #13000	; 0x32c8
   1d310:	movt	r3, #4
   1d314:	str	r4, [r3]
   1d318:	movw	r3, #12836	; 0x3224
   1d31c:	movt	r3, #4
   1d320:	str	r4, [r3]
   1d324:	ldrd	r4, [sp]
   1d328:	ldr	r6, [sp, #8]
   1d32c:	add	sp, sp, #12
   1d330:	pop	{pc}		; (ldr pc, [sp], #4)
   1d334:	movw	r3, #12848	; 0x3230
   1d338:	movt	r3, #4
   1d33c:	ldr	r3, [r3]
   1d340:	mov	r2, #55	; 0x37
   1d344:	mov	r1, #1
   1d348:	movw	r0, #8956	; 0x22fc
   1d34c:	movt	r0, #3
   1d350:	bl	11868 <fwrite@plt>
   1d354:	bl	11b68 <abort@plt>
   1d358:	mov	r2, #0
   1d35c:	mov	r3, #0
   1d360:	strd	r2, [r0]
   1d364:	strd	r2, [r0, #8]
   1d368:	strd	r2, [r0, #16]
   1d36c:	strd	r2, [r0, #24]
   1d370:	strd	r2, [r0, #32]
   1d374:	strd	r2, [r0, #40]	; 0x28
   1d378:	cmp	r1, #10
   1d37c:	beq	1d388 <__assert_fail@plt+0xb7e4>
   1d380:	str	r1, [r0]
   1d384:	bx	lr
   1d388:	str	r4, [sp, #-8]!
   1d38c:	str	lr, [sp, #4]
   1d390:	bl	11b68 <abort@plt>
   1d394:	strd	r4, [sp, #-16]!
   1d398:	str	r6, [sp, #8]
   1d39c:	str	lr, [sp, #12]
   1d3a0:	mov	r5, r0
   1d3a4:	mov	r6, r1
   1d3a8:	mov	r2, #5
   1d3ac:	mov	r1, r0
   1d3b0:	mov	r0, #0
   1d3b4:	bl	117d8 <dcgettext@plt>
   1d3b8:	mov	r4, r0
   1d3bc:	cmp	r5, r0
   1d3c0:	beq	1d3d8 <__assert_fail@plt+0xb834>
   1d3c4:	mov	r0, r4
   1d3c8:	ldrd	r4, [sp]
   1d3cc:	ldr	r6, [sp, #8]
   1d3d0:	add	sp, sp, #12
   1d3d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d3d8:	bl	2ff78 <__assert_fail@plt+0x1e3d4>
   1d3dc:	ldrb	r3, [r0]
   1d3e0:	bic	r3, r3, #32
   1d3e4:	cmp	r3, #85	; 0x55
   1d3e8:	bne	1d46c <__assert_fail@plt+0xb8c8>
   1d3ec:	ldrb	r3, [r0, #1]
   1d3f0:	bic	r3, r3, #32
   1d3f4:	cmp	r3, #84	; 0x54
   1d3f8:	bne	1d430 <__assert_fail@plt+0xb88c>
   1d3fc:	ldrb	r3, [r0, #2]
   1d400:	bic	r3, r3, #32
   1d404:	cmp	r3, #70	; 0x46
   1d408:	bne	1d430 <__assert_fail@plt+0xb88c>
   1d40c:	ldrb	r3, [r0, #3]
   1d410:	cmp	r3, #45	; 0x2d
   1d414:	bne	1d430 <__assert_fail@plt+0xb88c>
   1d418:	ldrb	r3, [r0, #4]
   1d41c:	cmp	r3, #56	; 0x38
   1d420:	bne	1d430 <__assert_fail@plt+0xb88c>
   1d424:	ldrb	r3, [r0, #5]
   1d428:	cmp	r3, #0
   1d42c:	beq	1d44c <__assert_fail@plt+0xb8a8>
   1d430:	movw	r4, #9108	; 0x2394
   1d434:	movt	r4, #3
   1d438:	movw	r3, #6648	; 0x19f8
   1d43c:	movt	r3, #3
   1d440:	cmp	r6, #9
   1d444:	movne	r4, r3
   1d448:	b	1d3c4 <__assert_fail@plt+0xb820>
   1d44c:	ldrb	r2, [r4]
   1d450:	movw	r4, #9124	; 0x23a4
   1d454:	movt	r4, #3
   1d458:	movw	r3, #9112	; 0x2398
   1d45c:	movt	r3, #3
   1d460:	cmp	r2, #96	; 0x60
   1d464:	movne	r4, r3
   1d468:	b	1d3c4 <__assert_fail@plt+0xb820>
   1d46c:	cmp	r3, #71	; 0x47
   1d470:	bne	1d430 <__assert_fail@plt+0xb88c>
   1d474:	ldrb	r3, [r0, #1]
   1d478:	bic	r3, r3, #32
   1d47c:	cmp	r3, #66	; 0x42
   1d480:	bne	1d430 <__assert_fail@plt+0xb88c>
   1d484:	ldrb	r3, [r0, #2]
   1d488:	cmp	r3, #49	; 0x31
   1d48c:	bne	1d430 <__assert_fail@plt+0xb88c>
   1d490:	ldrb	r3, [r0, #3]
   1d494:	cmp	r3, #56	; 0x38
   1d498:	bne	1d430 <__assert_fail@plt+0xb88c>
   1d49c:	ldrb	r3, [r0, #4]
   1d4a0:	cmp	r3, #48	; 0x30
   1d4a4:	bne	1d430 <__assert_fail@plt+0xb88c>
   1d4a8:	ldrb	r3, [r0, #5]
   1d4ac:	cmp	r3, #51	; 0x33
   1d4b0:	bne	1d430 <__assert_fail@plt+0xb88c>
   1d4b4:	ldrb	r3, [r0, #6]
   1d4b8:	cmp	r3, #48	; 0x30
   1d4bc:	bne	1d430 <__assert_fail@plt+0xb88c>
   1d4c0:	ldrb	r3, [r0, #7]
   1d4c4:	cmp	r3, #0
   1d4c8:	bne	1d430 <__assert_fail@plt+0xb88c>
   1d4cc:	ldrb	r2, [r4]
   1d4d0:	movw	r4, #9120	; 0x23a0
   1d4d4:	movt	r4, #3
   1d4d8:	movw	r3, #9116	; 0x239c
   1d4dc:	movt	r3, #3
   1d4e0:	cmp	r2, #96	; 0x60
   1d4e4:	movne	r4, r3
   1d4e8:	b	1d3c4 <__assert_fail@plt+0xb820>
   1d4ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d4f0:	strd	r6, [sp, #8]
   1d4f4:	strd	r8, [sp, #16]
   1d4f8:	strd	sl, [sp, #24]
   1d4fc:	str	lr, [sp, #32]
   1d500:	sub	sp, sp, #116	; 0x74
   1d504:	str	r0, [sp, #64]	; 0x40
   1d508:	mov	r8, r1
   1d50c:	str	r2, [sp, #48]	; 0x30
   1d510:	str	r3, [sp, #24]
   1d514:	ldr	r7, [sp, #152]	; 0x98
   1d518:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1d51c:	str	r0, [sp, #76]	; 0x4c
   1d520:	ldr	r3, [sp, #156]	; 0x9c
   1d524:	ubfx	r3, r3, #1, #1
   1d528:	str	r3, [sp, #32]
   1d52c:	mov	r3, #1
   1d530:	str	r3, [sp, #40]	; 0x28
   1d534:	mov	r3, #0
   1d538:	str	r3, [sp, #68]	; 0x44
   1d53c:	str	r3, [sp, #36]	; 0x24
   1d540:	str	r3, [sp, #28]
   1d544:	str	r3, [sp, #52]	; 0x34
   1d548:	str	r3, [sp, #60]	; 0x3c
   1d54c:	str	r3, [sp, #72]	; 0x48
   1d550:	movw	r3, #9128	; 0x23a8
   1d554:	movt	r3, #3
   1d558:	str	r3, [sp, #80]	; 0x50
   1d55c:	mov	r9, r8
   1d560:	mov	sl, r7
   1d564:	cmp	sl, #10
   1d568:	ldrls	pc, [pc, sl, lsl #2]
   1d56c:	b	1d730 <__assert_fail@plt+0xbb8c>
   1d570:	ldrdeq	sp, [r1], -r0
   1d574:	andeq	sp, r1, r4, lsr #11
   1d578:	andeq	sp, r1, r8, lsl #14
   1d57c:	muleq	r1, ip, r5
   1d580:			; <UNDEFINED> instruction: 0x0001d6bc
   1d584:	andeq	sp, r1, r0, ror #11
   1d588:	andeq	lr, r1, ip, lsr #19
   1d58c:	andeq	sp, r1, r4, lsr r7
   1d590:	andeq	sp, r1, ip, lsl r6
   1d594:	andeq	sp, r1, ip, lsl r6
   1d598:	andeq	sp, r1, ip, lsl r6
   1d59c:	mov	r3, #1
   1d5a0:	str	r3, [sp, #28]
   1d5a4:	mov	r3, #1
   1d5a8:	str	r3, [sp, #32]
   1d5ac:	str	r3, [sp, #52]	; 0x34
   1d5b0:	movw	r3, #6648	; 0x19f8
   1d5b4:	movt	r3, #3
   1d5b8:	str	r3, [sp, #60]	; 0x3c
   1d5bc:	mov	fp, #0
   1d5c0:	mov	sl, #2
   1d5c4:	mov	r6, #0
   1d5c8:	ldr	r8, [sp, #64]	; 0x40
   1d5cc:	b	1de44 <__assert_fail@plt+0xc2a0>
   1d5d0:	mov	fp, sl
   1d5d4:	mov	r3, #0
   1d5d8:	str	r3, [sp, #32]
   1d5dc:	b	1d5c4 <__assert_fail@plt+0xba20>
   1d5e0:	ldr	r3, [sp, #32]
   1d5e4:	cmp	r3, #0
   1d5e8:	bne	1d748 <__assert_fail@plt+0xbba4>
   1d5ec:	cmp	r9, #0
   1d5f0:	beq	1d76c <__assert_fail@plt+0xbbc8>
   1d5f4:	mov	r3, #34	; 0x22
   1d5f8:	ldr	r2, [sp, #64]	; 0x40
   1d5fc:	strb	r3, [r2]
   1d600:	mov	fp, #1
   1d604:	str	fp, [sp, #28]
   1d608:	str	fp, [sp, #52]	; 0x34
   1d60c:	movw	r3, #9108	; 0x2394
   1d610:	movt	r3, #3
   1d614:	str	r3, [sp, #60]	; 0x3c
   1d618:	b	1d5c4 <__assert_fail@plt+0xba20>
   1d61c:	cmp	sl, #10
   1d620:	bne	1d654 <__assert_fail@plt+0xbab0>
   1d624:	ldr	r3, [sp, #32]
   1d628:	cmp	r3, #0
   1d62c:	movne	fp, #0
   1d630:	beq	1d67c <__assert_fail@plt+0xbad8>
   1d634:	ldr	r0, [sp, #168]	; 0xa8
   1d638:	bl	11988 <strlen@plt>
   1d63c:	str	r0, [sp, #52]	; 0x34
   1d640:	ldr	r3, [sp, #168]	; 0xa8
   1d644:	str	r3, [sp, #60]	; 0x3c
   1d648:	mov	r3, #1
   1d64c:	str	r3, [sp, #28]
   1d650:	b	1d5c4 <__assert_fail@plt+0xba20>
   1d654:	mov	r1, sl
   1d658:	ldr	r0, [sp, #80]	; 0x50
   1d65c:	bl	1d394 <__assert_fail@plt+0xb7f0>
   1d660:	str	r0, [sp, #164]	; 0xa4
   1d664:	mov	r1, sl
   1d668:	movw	r0, #6648	; 0x19f8
   1d66c:	movt	r0, #3
   1d670:	bl	1d394 <__assert_fail@plt+0xb7f0>
   1d674:	str	r0, [sp, #168]	; 0xa8
   1d678:	b	1d624 <__assert_fail@plt+0xba80>
   1d67c:	ldr	r3, [sp, #164]	; 0xa4
   1d680:	ldrb	r3, [r3]
   1d684:	cmp	r3, #0
   1d688:	beq	1d6b4 <__assert_fail@plt+0xbb10>
   1d68c:	ldr	r2, [sp, #164]	; 0xa4
   1d690:	mov	fp, #0
   1d694:	ldr	r1, [sp, #64]	; 0x40
   1d698:	cmp	r9, fp
   1d69c:	strbhi	r3, [r1, fp]
   1d6a0:	add	fp, fp, #1
   1d6a4:	ldrb	r3, [r2, #1]!
   1d6a8:	cmp	r3, #0
   1d6ac:	bne	1d698 <__assert_fail@plt+0xbaf4>
   1d6b0:	b	1d634 <__assert_fail@plt+0xba90>
   1d6b4:	mov	fp, #0
   1d6b8:	b	1d634 <__assert_fail@plt+0xba90>
   1d6bc:	ldr	r3, [sp, #32]
   1d6c0:	cmp	r3, #0
   1d6c4:	bne	1d5a4 <__assert_fail@plt+0xba00>
   1d6c8:	mov	r3, #1
   1d6cc:	str	r3, [sp, #28]
   1d6d0:	cmp	r9, #0
   1d6d4:	beq	1d788 <__assert_fail@plt+0xbbe4>
   1d6d8:	mov	r3, #39	; 0x27
   1d6dc:	ldr	r2, [sp, #64]	; 0x40
   1d6e0:	strb	r3, [r2]
   1d6e4:	mov	r3, #0
   1d6e8:	str	r3, [sp, #32]
   1d6ec:	mov	fp, #1
   1d6f0:	str	fp, [sp, #52]	; 0x34
   1d6f4:	movw	r3, #6648	; 0x19f8
   1d6f8:	movt	r3, #3
   1d6fc:	str	r3, [sp, #60]	; 0x3c
   1d700:	mov	sl, #2
   1d704:	b	1d5c4 <__assert_fail@plt+0xba20>
   1d708:	ldr	r3, [sp, #32]
   1d70c:	cmp	r3, #0
   1d710:	beq	1d6d0 <__assert_fail@plt+0xbb2c>
   1d714:	mov	r3, #1
   1d718:	str	r3, [sp, #52]	; 0x34
   1d71c:	movw	r3, #6648	; 0x19f8
   1d720:	movt	r3, #3
   1d724:	str	r3, [sp, #60]	; 0x3c
   1d728:	mov	fp, #0
   1d72c:	b	1d5c4 <__assert_fail@plt+0xba20>
   1d730:	bl	11b68 <abort@plt>
   1d734:	mov	fp, #0
   1d738:	str	fp, [sp, #32]
   1d73c:	mov	r3, #1
   1d740:	str	r3, [sp, #28]
   1d744:	b	1d5c4 <__assert_fail@plt+0xba20>
   1d748:	ldr	r3, [sp, #32]
   1d74c:	str	r3, [sp, #28]
   1d750:	mov	r3, #1
   1d754:	str	r3, [sp, #52]	; 0x34
   1d758:	movw	r3, #9108	; 0x2394
   1d75c:	movt	r3, #3
   1d760:	str	r3, [sp, #60]	; 0x3c
   1d764:	mov	fp, #0
   1d768:	b	1d5c4 <__assert_fail@plt+0xba20>
   1d76c:	mov	fp, #1
   1d770:	str	fp, [sp, #28]
   1d774:	str	fp, [sp, #52]	; 0x34
   1d778:	movw	r3, #9108	; 0x2394
   1d77c:	movt	r3, #3
   1d780:	str	r3, [sp, #60]	; 0x3c
   1d784:	b	1d5c4 <__assert_fail@plt+0xba20>
   1d788:	mov	r3, #0
   1d78c:	str	r3, [sp, #32]
   1d790:	mov	fp, #1
   1d794:	str	fp, [sp, #52]	; 0x34
   1d798:	movw	r3, #6648	; 0x19f8
   1d79c:	movt	r3, #3
   1d7a0:	str	r3, [sp, #60]	; 0x3c
   1d7a4:	mov	sl, #2
   1d7a8:	b	1d5c4 <__assert_fail@plt+0xba20>
   1d7ac:	mov	r3, r2
   1d7b0:	add	r4, r6, r2
   1d7b4:	ldr	r2, [sp, #24]
   1d7b8:	cmp	r3, #1
   1d7bc:	movls	r3, #0
   1d7c0:	movhi	r3, #1
   1d7c4:	cmn	r2, #1
   1d7c8:	movne	r3, #0
   1d7cc:	cmp	r3, #0
   1d7d0:	beq	1d7e0 <__assert_fail@plt+0xbc3c>
   1d7d4:	ldr	r0, [sp, #48]	; 0x30
   1d7d8:	bl	11988 <strlen@plt>
   1d7dc:	str	r0, [sp, #24]
   1d7e0:	ldr	r3, [sp, #24]
   1d7e4:	cmp	r4, r3
   1d7e8:	bhi	1e9d4 <__assert_fail@plt+0xce30>
   1d7ec:	ldr	r3, [sp, #48]	; 0x30
   1d7f0:	add	r4, r3, r6
   1d7f4:	ldr	r2, [sp, #52]	; 0x34
   1d7f8:	ldr	r1, [sp, #60]	; 0x3c
   1d7fc:	mov	r0, r4
   1d800:	bl	117c0 <memcmp@plt>
   1d804:	cmp	r0, #0
   1d808:	bne	1e9d4 <__assert_fail@plt+0xce30>
   1d80c:	ldr	r3, [sp, #32]
   1d810:	cmp	r3, #0
   1d814:	bne	1da24 <__assert_fail@plt+0xbe80>
   1d818:	ldrb	r4, [r4]
   1d81c:	cmp	r4, #126	; 0x7e
   1d820:	ldrls	pc, [pc, r4, lsl #2]
   1d824:	b	1e2d8 <__assert_fail@plt+0xc734>
   1d828:	andeq	sp, r1, r8, ror #20
   1d82c:	ldrdeq	lr, [r1], -r8
   1d830:	ldrdeq	lr, [r1], -r8
   1d834:	ldrdeq	lr, [r1], -r8
   1d838:	ldrdeq	lr, [r1], -r8
   1d83c:	ldrdeq	lr, [r1], -r8
   1d840:	ldrdeq	lr, [r1], -r8
   1d844:	andeq	lr, r1, r0, lsl #3
   1d848:	andeq	sp, r1, r4, lsl #26
   1d84c:	andeq	lr, r1, r8, lsr #1
   1d850:	andeq	lr, r1, r4, asr r1
   1d854:	strheq	lr, [r1], -ip
   1d858:	andeq	sp, r1, r8, lsl sp
   1d85c:	andeq	sp, r1, ip, lsr #26
   1d860:	ldrdeq	lr, [r1], -r8
   1d864:	ldrdeq	lr, [r1], -r8
   1d868:	ldrdeq	lr, [r1], -r8
   1d86c:	ldrdeq	lr, [r1], -r8
   1d870:	ldrdeq	lr, [r1], -r8
   1d874:	ldrdeq	lr, [r1], -r8
   1d878:	ldrdeq	lr, [r1], -r8
   1d87c:	ldrdeq	lr, [r1], -r8
   1d880:	ldrdeq	lr, [r1], -r8
   1d884:	ldrdeq	lr, [r1], -r8
   1d888:	ldrdeq	lr, [r1], -r8
   1d88c:	ldrdeq	lr, [r1], -r8
   1d890:	ldrdeq	lr, [r1], -r8
   1d894:	ldrdeq	lr, [r1], -r8
   1d898:	ldrdeq	lr, [r1], -r8
   1d89c:	ldrdeq	lr, [r1], -r8
   1d8a0:	ldrdeq	lr, [r1], -r8
   1d8a4:	ldrdeq	lr, [r1], -r8
   1d8a8:	strdeq	lr, [r1], -r4
   1d8ac:	andeq	lr, r1, r8, lsl r2
   1d8b0:	andeq	lr, r1, r8, lsl r2
   1d8b4:			; <UNDEFINED> instruction: 0x0001e1b0
   1d8b8:	andeq	lr, r1, r8, lsl r2
   1d8bc:	andeq	lr, r1, r8, lsr r7
   1d8c0:	andeq	lr, r1, r8, lsl r2
   1d8c4:	andeq	lr, r1, r8, lsr r2
   1d8c8:	andeq	lr, r1, r8, lsl r2
   1d8cc:	andeq	lr, r1, r8, lsl r2
   1d8d0:	andeq	lr, r1, r8, lsl r2
   1d8d4:	andeq	lr, r1, r8, lsr r7
   1d8d8:	andeq	lr, r1, r8, lsr r7
   1d8dc:	andeq	lr, r1, r8, lsr r7
   1d8e0:	andeq	lr, r1, r8, lsr r7
   1d8e4:	andeq	lr, r1, r8, lsr r7
   1d8e8:	andeq	lr, r1, r8, lsr r7
   1d8ec:	andeq	lr, r1, r8, lsr r7
   1d8f0:	andeq	lr, r1, r8, lsr r7
   1d8f4:	andeq	lr, r1, r8, lsr r7
   1d8f8:	andeq	lr, r1, r8, lsr r7
   1d8fc:	andeq	lr, r1, r8, lsr r7
   1d900:	andeq	lr, r1, r8, lsr r7
   1d904:	andeq	lr, r1, r8, lsr r7
   1d908:	andeq	lr, r1, r8, lsr r7
   1d90c:	andeq	lr, r1, r8, lsr r7
   1d910:	andeq	lr, r1, r8, lsr r7
   1d914:	andeq	lr, r1, r8, lsl r2
   1d918:	andeq	lr, r1, r8, lsl r2
   1d91c:	andeq	lr, r1, r8, lsl r2
   1d920:	andeq	lr, r1, r8, lsl r2
   1d924:	muleq	r1, r8, fp
   1d928:	ldrdeq	lr, [r1], -r8
   1d92c:	andeq	lr, r1, r8, lsr r7
   1d930:	andeq	lr, r1, r8, lsr r7
   1d934:	andeq	lr, r1, r8, lsr r7
   1d938:	andeq	lr, r1, r8, lsr r7
   1d93c:	andeq	lr, r1, r8, lsr r7
   1d940:	andeq	lr, r1, r8, lsr r7
   1d944:	andeq	lr, r1, r8, lsr r7
   1d948:	andeq	lr, r1, r8, lsr r7
   1d94c:	andeq	lr, r1, r8, lsr r7
   1d950:	andeq	lr, r1, r8, lsr r7
   1d954:	andeq	lr, r1, r8, lsr r7
   1d958:	andeq	lr, r1, r8, lsr r7
   1d95c:	andeq	lr, r1, r8, lsr r7
   1d960:	andeq	lr, r1, r8, lsr r7
   1d964:	andeq	lr, r1, r8, lsr r7
   1d968:	andeq	lr, r1, r8, lsr r7
   1d96c:	andeq	lr, r1, r8, lsr r7
   1d970:	andeq	lr, r1, r8, lsr r7
   1d974:	andeq	lr, r1, r8, lsr r7
   1d978:	andeq	lr, r1, r8, lsr r7
   1d97c:	andeq	lr, r1, r8, lsr r7
   1d980:	andeq	lr, r1, r8, lsr r7
   1d984:	andeq	lr, r1, r8, lsr r7
   1d988:	andeq	lr, r1, r8, lsr r7
   1d98c:	andeq	lr, r1, r8, lsr r7
   1d990:	andeq	lr, r1, r8, lsr r7
   1d994:	andeq	lr, r1, r8, lsl r2
   1d998:	ldrdeq	lr, [r1], -r0
   1d99c:	andeq	lr, r1, r8, lsr r7
   1d9a0:	andeq	lr, r1, r8, lsl r2
   1d9a4:	andeq	lr, r1, r8, lsr r7
   1d9a8:	andeq	lr, r1, r8, lsl r2
   1d9ac:	andeq	lr, r1, r8, lsr r7
   1d9b0:	andeq	lr, r1, r8, lsr r7
   1d9b4:	andeq	lr, r1, r8, lsr r7
   1d9b8:	andeq	lr, r1, r8, lsr r7
   1d9bc:	andeq	lr, r1, r8, lsr r7
   1d9c0:	andeq	lr, r1, r8, lsr r7
   1d9c4:	andeq	lr, r1, r8, lsr r7
   1d9c8:	andeq	lr, r1, r8, lsr r7
   1d9cc:	andeq	lr, r1, r8, lsr r7
   1d9d0:	andeq	lr, r1, r8, lsr r7
   1d9d4:	andeq	lr, r1, r8, lsr r7
   1d9d8:	andeq	lr, r1, r8, lsr r7
   1d9dc:	andeq	lr, r1, r8, lsr r7
   1d9e0:	andeq	lr, r1, r8, lsr r7
   1d9e4:	andeq	lr, r1, r8, lsr r7
   1d9e8:	andeq	lr, r1, r8, lsr r7
   1d9ec:	andeq	lr, r1, r8, lsr r7
   1d9f0:	andeq	lr, r1, r8, lsr r7
   1d9f4:	andeq	lr, r1, r8, lsr r7
   1d9f8:	andeq	lr, r1, r8, lsr r7
   1d9fc:	andeq	lr, r1, r8, lsr r7
   1da00:	andeq	lr, r1, r8, lsr r7
   1da04:	andeq	lr, r1, r8, lsr r7
   1da08:	andeq	lr, r1, r8, lsr r7
   1da0c:	andeq	lr, r1, r8, lsr r7
   1da10:	andeq	lr, r1, r8, lsr r7
   1da14:	muleq	r1, r0, r1
   1da18:	andeq	lr, r1, r8, lsl r2
   1da1c:	muleq	r1, r0, r1
   1da20:			; <UNDEFINED> instruction: 0x0001e1b0
   1da24:	mov	r8, r9
   1da28:	mov	r7, sl
   1da2c:	b	1e92c <__assert_fail@plt+0xcd88>
   1da30:	ldr	r3, [sp, #28]
   1da34:	cmp	r3, #0
   1da38:	bne	1da58 <__assert_fail@plt+0xbeb4>
   1da3c:	ldr	r3, [sp, #156]	; 0x9c
   1da40:	tst	r3, #1
   1da44:	bne	1de40 <__assert_fail@plt+0xc29c>
   1da48:	ldr	r3, [sp, #28]
   1da4c:	str	r3, [sp, #44]	; 0x2c
   1da50:	mov	r5, r3
   1da54:	b	1dd60 <__assert_fail@plt+0xc1bc>
   1da58:	ldr	r3, [sp, #32]
   1da5c:	cmp	r3, #0
   1da60:	bne	1e8dc <__assert_fail@plt+0xcd38>
   1da64:	str	r3, [sp, #44]	; 0x2c
   1da68:	ldr	r3, [sp, #36]	; 0x24
   1da6c:	eor	r3, r3, #1
   1da70:	cmp	sl, #2
   1da74:	movne	r3, #0
   1da78:	andeq	r3, r3, #1
   1da7c:	cmp	r3, #0
   1da80:	beq	1dad8 <__assert_fail@plt+0xbf34>
   1da84:	cmp	r9, fp
   1da88:	movhi	r2, #39	; 0x27
   1da8c:	strbhi	r2, [r8, fp]
   1da90:	add	r2, fp, #1
   1da94:	cmp	r9, r2
   1da98:	movhi	r1, #36	; 0x24
   1da9c:	strbhi	r1, [r8, r2]
   1daa0:	add	r2, fp, #2
   1daa4:	cmp	r9, r2
   1daa8:	movhi	r1, #39	; 0x27
   1daac:	strbhi	r1, [r8, r2]
   1dab0:	add	r2, fp, #3
   1dab4:	cmp	r9, r2
   1dab8:	bls	1e998 <__assert_fail@plt+0xcdf4>
   1dabc:	mov	r1, #92	; 0x5c
   1dac0:	strb	r1, [r8, r2]
   1dac4:	add	fp, fp, #4
   1dac8:	str	r3, [sp, #36]	; 0x24
   1dacc:	mov	r5, #0
   1dad0:	mov	r4, #48	; 0x30
   1dad4:	b	1ddac <__assert_fail@plt+0xc208>
   1dad8:	cmp	r9, fp
   1dadc:	bhi	1db04 <__assert_fail@plt+0xbf60>
   1dae0:	add	r1, fp, #1
   1dae4:	ldr	r2, [sp, #56]	; 0x38
   1dae8:	cmp	r2, #0
   1daec:	bne	1db2c <__assert_fail@plt+0xbf88>
   1daf0:	mov	r3, r5
   1daf4:	ldr	r5, [sp, #56]	; 0x38
   1daf8:	mov	fp, r1
   1dafc:	mov	r4, #48	; 0x30
   1db00:	b	1dd60 <__assert_fail@plt+0xc1bc>
   1db04:	mov	r2, #92	; 0x5c
   1db08:	strb	r2, [r8, fp]
   1db0c:	add	r1, fp, #1
   1db10:	ldr	r2, [sp, #56]	; 0x38
   1db14:	cmp	r2, #0
   1db18:	moveq	r3, r5
   1db1c:	moveq	r5, r2
   1db20:	moveq	fp, r1
   1db24:	moveq	r4, #48	; 0x30
   1db28:	beq	1ddac <__assert_fail@plt+0xc208>
   1db2c:	add	r2, r6, #1
   1db30:	ldr	r0, [sp, #24]
   1db34:	cmp	r2, r0
   1db38:	bcs	1db54 <__assert_fail@plt+0xbfb0>
   1db3c:	ldr	r0, [sp, #48]	; 0x30
   1db40:	ldrb	r2, [r0, r2]
   1db44:	sub	r2, r2, #48	; 0x30
   1db48:	uxtb	r2, r2
   1db4c:	cmp	r2, #9
   1db50:	bls	1db6c <__assert_fail@plt+0xbfc8>
   1db54:	mov	r2, r3
   1db58:	mov	r3, r5
   1db5c:	mov	r5, r2
   1db60:	mov	fp, r1
   1db64:	mov	r4, #48	; 0x30
   1db68:	b	1dd84 <__assert_fail@plt+0xc1e0>
   1db6c:	cmp	r9, r1
   1db70:	movhi	r2, #48	; 0x30
   1db74:	strbhi	r2, [r8, r1]
   1db78:	add	r2, fp, #2
   1db7c:	cmp	r9, r2
   1db80:	movhi	r1, #48	; 0x30
   1db84:	strbhi	r1, [r8, r2]
   1db88:	add	r1, fp, #3
   1db8c:	b	1db54 <__assert_fail@plt+0xbfb0>
   1db90:	mov	r3, #0
   1db94:	str	r3, [sp, #44]	; 0x2c
   1db98:	cmp	sl, #2
   1db9c:	beq	1dbb8 <__assert_fail@plt+0xc014>
   1dba0:	cmp	sl, #5
   1dba4:	beq	1dbd0 <__assert_fail@plt+0xc02c>
   1dba8:	mov	r5, #0
   1dbac:	mov	r3, r5
   1dbb0:	mov	r4, #63	; 0x3f
   1dbb4:	b	1dd60 <__assert_fail@plt+0xc1bc>
   1dbb8:	ldr	r3, [sp, #32]
   1dbbc:	cmp	r3, #0
   1dbc0:	bne	1e8e8 <__assert_fail@plt+0xcd44>
   1dbc4:	mov	r5, r3
   1dbc8:	mov	r4, #63	; 0x3f
   1dbcc:	b	1e2c8 <__assert_fail@plt+0xc724>
   1dbd0:	ldr	r3, [sp, #156]	; 0x9c
   1dbd4:	tst	r3, #4
   1dbd8:	beq	1e700 <__assert_fail@plt+0xcb5c>
   1dbdc:	add	r2, r6, #2
   1dbe0:	ldr	r3, [sp, #24]
   1dbe4:	cmp	r2, r3
   1dbe8:	bcs	1e710 <__assert_fail@plt+0xcb6c>
   1dbec:	ldr	r3, [sp, #48]	; 0x30
   1dbf0:	add	r3, r3, r6
   1dbf4:	ldrb	r4, [r3, #1]
   1dbf8:	cmp	r4, #63	; 0x3f
   1dbfc:	movne	r5, #0
   1dc00:	movne	r3, r5
   1dc04:	movne	r4, #63	; 0x3f
   1dc08:	bne	1dd60 <__assert_fail@plt+0xc1bc>
   1dc0c:	ldr	r3, [sp, #48]	; 0x30
   1dc10:	ldrb	r1, [r3, r2]
   1dc14:	sub	r3, r1, #33	; 0x21
   1dc18:	cmp	r3, #29
   1dc1c:	ldrls	pc, [pc, r3, lsl #2]
   1dc20:	b	1e720 <__assert_fail@plt+0xcb7c>
   1dc24:	muleq	r1, ip, ip
   1dc28:	andeq	lr, r1, r0, lsr #14
   1dc2c:	andeq	lr, r1, r0, lsr #14
   1dc30:	andeq	lr, r1, r0, lsr #14
   1dc34:	andeq	lr, r1, r0, lsr #14
   1dc38:	andeq	lr, r1, r0, lsr #14
   1dc3c:	muleq	r1, ip, ip
   1dc40:	muleq	r1, ip, ip
   1dc44:	muleq	r1, ip, ip
   1dc48:	andeq	lr, r1, r0, lsr #14
   1dc4c:	andeq	lr, r1, r0, lsr #14
   1dc50:	andeq	lr, r1, r0, lsr #14
   1dc54:	muleq	r1, ip, ip
   1dc58:	andeq	lr, r1, r0, lsr #14
   1dc5c:	muleq	r1, ip, ip
   1dc60:	andeq	lr, r1, r0, lsr #14
   1dc64:	andeq	lr, r1, r0, lsr #14
   1dc68:	andeq	lr, r1, r0, lsr #14
   1dc6c:	andeq	lr, r1, r0, lsr #14
   1dc70:	andeq	lr, r1, r0, lsr #14
   1dc74:	andeq	lr, r1, r0, lsr #14
   1dc78:	andeq	lr, r1, r0, lsr #14
   1dc7c:	andeq	lr, r1, r0, lsr #14
   1dc80:	andeq	lr, r1, r0, lsr #14
   1dc84:	andeq	lr, r1, r0, lsr #14
   1dc88:	andeq	lr, r1, r0, lsr #14
   1dc8c:	andeq	lr, r1, r0, lsr #14
   1dc90:	muleq	r1, ip, ip
   1dc94:	muleq	r1, ip, ip
   1dc98:	muleq	r1, ip, ip
   1dc9c:	ldr	r3, [sp, #32]
   1dca0:	cmp	r3, #0
   1dca4:	bne	1e98c <__assert_fail@plt+0xcde8>
   1dca8:	cmp	r9, fp
   1dcac:	movhi	r3, #63	; 0x3f
   1dcb0:	strbhi	r3, [r8, fp]
   1dcb4:	add	r3, fp, #1
   1dcb8:	cmp	r9, r3
   1dcbc:	movhi	r0, #34	; 0x22
   1dcc0:	strbhi	r0, [r8, r3]
   1dcc4:	add	r3, fp, #2
   1dcc8:	cmp	r9, r3
   1dccc:	movhi	r0, #34	; 0x22
   1dcd0:	strbhi	r0, [r8, r3]
   1dcd4:	add	r3, fp, #3
   1dcd8:	cmp	r9, r3
   1dcdc:	movhi	r0, #63	; 0x3f
   1dce0:	strbhi	r0, [r8, r3]
   1dce4:	add	fp, fp, #4
   1dce8:	ldr	r3, [sp, #32]
   1dcec:	mov	r5, r3
   1dcf0:	mov	r4, r1
   1dcf4:	mov	r6, r2
   1dcf8:	b	1dd60 <__assert_fail@plt+0xc1bc>
   1dcfc:	mov	r3, #0
   1dd00:	str	r3, [sp, #44]	; 0x2c
   1dd04:	mov	r4, #8
   1dd08:	mov	r3, #98	; 0x62
   1dd0c:	b	1dd4c <__assert_fail@plt+0xc1a8>
   1dd10:	mov	r3, #0
   1dd14:	str	r3, [sp, #44]	; 0x2c
   1dd18:	mov	r4, #12
   1dd1c:	mov	r3, #102	; 0x66
   1dd20:	b	1dd4c <__assert_fail@plt+0xc1a8>
   1dd24:	mov	r3, #0
   1dd28:	str	r3, [sp, #44]	; 0x2c
   1dd2c:	mov	r4, #13
   1dd30:	mov	r3, #114	; 0x72
   1dd34:	ldr	r2, [sp, #32]
   1dd38:	cmp	sl, #2
   1dd3c:	movne	r2, #0
   1dd40:	andeq	r2, r2, #1
   1dd44:	cmp	r2, #0
   1dd48:	bne	1e16c <__assert_fail@plt+0xc5c8>
   1dd4c:	ldr	r2, [sp, #28]
   1dd50:	cmp	r2, #0
   1dd54:	bne	1e754 <__assert_fail@plt+0xcbb0>
   1dd58:	mov	r5, r2
   1dd5c:	mov	r3, r2
   1dd60:	ldr	r2, [sp, #28]
   1dd64:	eor	r2, r2, #1
   1dd68:	cmp	sl, #2
   1dd6c:	orreq	r2, r2, #1
   1dd70:	eor	r2, r2, #1
   1dd74:	ldr	r1, [sp, #32]
   1dd78:	orr	r2, r1, r2
   1dd7c:	tst	r2, #255	; 0xff
   1dd80:	beq	1ddac <__assert_fail@plt+0xc208>
   1dd84:	ldr	r2, [sp, #160]	; 0xa0
   1dd88:	cmp	r2, #0
   1dd8c:	beq	1ddac <__assert_fail@plt+0xc208>
   1dd90:	ubfx	r1, r4, #5, #8
   1dd94:	and	r2, r4, #31
   1dd98:	ldr	r0, [sp, #160]	; 0xa0
   1dd9c:	ldr	r1, [r0, r1, lsl #2]
   1dda0:	lsr	r2, r1, r2
   1dda4:	tst	r2, #1
   1dda8:	bne	1ddb8 <__assert_fail@plt+0xc214>
   1ddac:	ldr	r2, [sp, #44]	; 0x2c
   1ddb0:	cmp	r2, #0
   1ddb4:	beq	1e10c <__assert_fail@plt+0xc568>
   1ddb8:	ldr	r3, [sp, #32]
   1ddbc:	cmp	r3, #0
   1ddc0:	bne	1e90c <__assert_fail@plt+0xcd68>
   1ddc4:	ldr	r3, [sp, #36]	; 0x24
   1ddc8:	eor	r3, r3, #1
   1ddcc:	cmp	sl, #2
   1ddd0:	movne	r3, #0
   1ddd4:	andeq	r3, r3, #1
   1ddd8:	cmp	r3, #0
   1dddc:	beq	1de14 <__assert_fail@plt+0xc270>
   1dde0:	cmp	r9, fp
   1dde4:	movhi	r2, #39	; 0x27
   1dde8:	strbhi	r2, [r8, fp]
   1ddec:	add	r2, fp, #1
   1ddf0:	cmp	r9, r2
   1ddf4:	movhi	r1, #36	; 0x24
   1ddf8:	strbhi	r1, [r8, r2]
   1ddfc:	add	r2, fp, #2
   1de00:	cmp	r9, r2
   1de04:	movhi	r1, #39	; 0x27
   1de08:	strbhi	r1, [r8, r2]
   1de0c:	add	fp, fp, #3
   1de10:	str	r3, [sp, #36]	; 0x24
   1de14:	cmp	r9, fp
   1de18:	movhi	r3, #92	; 0x5c
   1de1c:	strbhi	r3, [r8, fp]
   1de20:	add	fp, fp, #1
   1de24:	cmp	fp, r9
   1de28:	strbcc	r4, [r8, fp]
   1de2c:	add	fp, fp, #1
   1de30:	cmp	r5, #0
   1de34:	ldr	r3, [sp, #40]	; 0x28
   1de38:	moveq	r3, r5
   1de3c:	str	r3, [sp, #40]	; 0x28
   1de40:	add	r6, r6, #1
   1de44:	ldr	r3, [sp, #24]
   1de48:	cmn	r3, #1
   1de4c:	beq	1e77c <__assert_fail@plt+0xcbd8>
   1de50:	ldr	r3, [sp, #24]
   1de54:	subs	r5, r3, r6
   1de58:	movne	r5, #1
   1de5c:	cmp	r5, #0
   1de60:	beq	1e790 <__assert_fail@plt+0xcbec>
   1de64:	ldr	r3, [sp, #28]
   1de68:	cmp	sl, #2
   1de6c:	moveq	r3, #0
   1de70:	andne	r3, r3, #1
   1de74:	str	r3, [sp, #56]	; 0x38
   1de78:	ldr	r2, [sp, #52]	; 0x34
   1de7c:	adds	r7, r2, #0
   1de80:	movne	r7, #1
   1de84:	ands	r3, r3, r7
   1de88:	str	r3, [sp, #44]	; 0x2c
   1de8c:	bne	1d7ac <__assert_fail@plt+0xbc08>
   1de90:	ldr	r3, [sp, #48]	; 0x30
   1de94:	ldrb	r4, [r3, r6]
   1de98:	cmp	r4, #126	; 0x7e
   1de9c:	ldrls	pc, [pc, r4, lsl #2]
   1dea0:	b	1e2d8 <__assert_fail@plt+0xc734>
   1dea4:	andeq	sp, r1, r0, lsr sl
   1dea8:	ldrdeq	lr, [r1], -r8
   1deac:	ldrdeq	lr, [r1], -r8
   1deb0:	ldrdeq	lr, [r1], -r8
   1deb4:	ldrdeq	lr, [r1], -r8
   1deb8:	ldrdeq	lr, [r1], -r8
   1debc:	ldrdeq	lr, [r1], -r8
   1dec0:	andeq	lr, r1, r8, ror r1
   1dec4:	andeq	sp, r1, r4, lsl #26
   1dec8:	andeq	lr, r1, r8, lsr #1
   1decc:	andeq	lr, r1, ip, asr #2
   1ded0:	strheq	lr, [r1], -ip
   1ded4:	andeq	sp, r1, r8, lsl sp
   1ded8:	andeq	sp, r1, ip, lsr #26
   1dedc:	ldrdeq	lr, [r1], -r8
   1dee0:	ldrdeq	lr, [r1], -r8
   1dee4:	ldrdeq	lr, [r1], -r8
   1dee8:	ldrdeq	lr, [r1], -r8
   1deec:	ldrdeq	lr, [r1], -r8
   1def0:	ldrdeq	lr, [r1], -r8
   1def4:	ldrdeq	lr, [r1], -r8
   1def8:	ldrdeq	lr, [r1], -r8
   1defc:	ldrdeq	lr, [r1], -r8
   1df00:	ldrdeq	lr, [r1], -r8
   1df04:	ldrdeq	lr, [r1], -r8
   1df08:	ldrdeq	lr, [r1], -r8
   1df0c:	ldrdeq	lr, [r1], -r8
   1df10:	ldrdeq	lr, [r1], -r8
   1df14:	ldrdeq	lr, [r1], -r8
   1df18:	ldrdeq	lr, [r1], -r8
   1df1c:	ldrdeq	lr, [r1], -r8
   1df20:	ldrdeq	lr, [r1], -r8
   1df24:	strdeq	lr, [r1], -r4
   1df28:	strdeq	lr, [r1], -r0
   1df2c:	strdeq	lr, [r1], -r0
   1df30:			; <UNDEFINED> instruction: 0x0001e1b0
   1df34:	strdeq	lr, [r1], -r0
   1df38:	strdeq	lr, [r1], -r8
   1df3c:	strdeq	lr, [r1], -r0
   1df40:	andeq	lr, r1, r8, lsr r2
   1df44:	strdeq	lr, [r1], -r0
   1df48:	strdeq	lr, [r1], -r0
   1df4c:	strdeq	lr, [r1], -r0
   1df50:	strdeq	lr, [r1], -r8
   1df54:	strdeq	lr, [r1], -r8
   1df58:	strdeq	lr, [r1], -r8
   1df5c:	strdeq	lr, [r1], -r8
   1df60:	strdeq	lr, [r1], -r8
   1df64:	strdeq	lr, [r1], -r8
   1df68:	strdeq	lr, [r1], -r8
   1df6c:	strdeq	lr, [r1], -r8
   1df70:	strdeq	lr, [r1], -r8
   1df74:	strdeq	lr, [r1], -r8
   1df78:	strdeq	lr, [r1], -r8
   1df7c:	strdeq	lr, [r1], -r8
   1df80:	strdeq	lr, [r1], -r8
   1df84:	strdeq	lr, [r1], -r8
   1df88:	strdeq	lr, [r1], -r8
   1df8c:	strdeq	lr, [r1], -r8
   1df90:	strdeq	lr, [r1], -r0
   1df94:	strdeq	lr, [r1], -r0
   1df98:	strdeq	lr, [r1], -r0
   1df9c:	strdeq	lr, [r1], -r0
   1dfa0:	muleq	r1, r8, fp
   1dfa4:	ldrdeq	lr, [r1], -r8
   1dfa8:	strdeq	lr, [r1], -r8
   1dfac:	strdeq	lr, [r1], -r8
   1dfb0:	strdeq	lr, [r1], -r8
   1dfb4:	strdeq	lr, [r1], -r8
   1dfb8:	strdeq	lr, [r1], -r8
   1dfbc:	strdeq	lr, [r1], -r8
   1dfc0:	strdeq	lr, [r1], -r8
   1dfc4:	strdeq	lr, [r1], -r8
   1dfc8:	strdeq	lr, [r1], -r8
   1dfcc:	strdeq	lr, [r1], -r8
   1dfd0:	strdeq	lr, [r1], -r8
   1dfd4:	strdeq	lr, [r1], -r8
   1dfd8:	strdeq	lr, [r1], -r8
   1dfdc:	strdeq	lr, [r1], -r8
   1dfe0:	strdeq	lr, [r1], -r8
   1dfe4:	strdeq	lr, [r1], -r8
   1dfe8:	strdeq	lr, [r1], -r8
   1dfec:	strdeq	lr, [r1], -r8
   1dff0:	strdeq	lr, [r1], -r8
   1dff4:	strdeq	lr, [r1], -r8
   1dff8:	strdeq	lr, [r1], -r8
   1dffc:	strdeq	lr, [r1], -r8
   1e000:	strdeq	lr, [r1], -r8
   1e004:	strdeq	lr, [r1], -r8
   1e008:	strdeq	lr, [r1], -r8
   1e00c:	strdeq	lr, [r1], -r8
   1e010:	strdeq	lr, [r1], -r0
   1e014:	ldrdeq	lr, [r1], -r0
   1e018:	strdeq	lr, [r1], -r8
   1e01c:	strdeq	lr, [r1], -r0
   1e020:	strdeq	lr, [r1], -r8
   1e024:	strdeq	lr, [r1], -r0
   1e028:	strdeq	lr, [r1], -r8
   1e02c:	strdeq	lr, [r1], -r8
   1e030:	strdeq	lr, [r1], -r8
   1e034:	strdeq	lr, [r1], -r8
   1e038:	strdeq	lr, [r1], -r8
   1e03c:	strdeq	lr, [r1], -r8
   1e040:	strdeq	lr, [r1], -r8
   1e044:	strdeq	lr, [r1], -r8
   1e048:	strdeq	lr, [r1], -r8
   1e04c:	strdeq	lr, [r1], -r8
   1e050:	strdeq	lr, [r1], -r8
   1e054:	strdeq	lr, [r1], -r8
   1e058:	strdeq	lr, [r1], -r8
   1e05c:	strdeq	lr, [r1], -r8
   1e060:	strdeq	lr, [r1], -r8
   1e064:	strdeq	lr, [r1], -r8
   1e068:	strdeq	lr, [r1], -r8
   1e06c:	strdeq	lr, [r1], -r8
   1e070:	strdeq	lr, [r1], -r8
   1e074:	strdeq	lr, [r1], -r8
   1e078:	strdeq	lr, [r1], -r8
   1e07c:	strdeq	lr, [r1], -r8
   1e080:	strdeq	lr, [r1], -r8
   1e084:	strdeq	lr, [r1], -r8
   1e088:	strdeq	lr, [r1], -r8
   1e08c:	strdeq	lr, [r1], -r8
   1e090:	muleq	r1, r0, r1
   1e094:	strdeq	lr, [r1], -r0
   1e098:	muleq	r1, r0, r1
   1e09c:			; <UNDEFINED> instruction: 0x0001e1b0
   1e0a0:	mov	r3, #0
   1e0a4:	str	r3, [sp, #44]	; 0x2c
   1e0a8:	mov	r4, #9
   1e0ac:	mov	r3, #116	; 0x74
   1e0b0:	b	1dd34 <__assert_fail@plt+0xc190>
   1e0b4:	mov	r3, #0
   1e0b8:	str	r3, [sp, #44]	; 0x2c
   1e0bc:	mov	r4, #11
   1e0c0:	mov	r3, #118	; 0x76
   1e0c4:	b	1dd4c <__assert_fail@plt+0xc1a8>
   1e0c8:	mov	r3, #0
   1e0cc:	str	r3, [sp, #44]	; 0x2c
   1e0d0:	cmp	sl, #2
   1e0d4:	beq	1e0f8 <__assert_fail@plt+0xc554>
   1e0d8:	ldr	r3, [sp, #28]
   1e0dc:	ldr	r2, [sp, #32]
   1e0e0:	and	r3, r3, r2
   1e0e4:	tst	r7, r3
   1e0e8:	bne	1e76c <__assert_fail@plt+0xcbc8>
   1e0ec:	mov	r4, #92	; 0x5c
   1e0f0:	mov	r3, r4
   1e0f4:	b	1dd4c <__assert_fail@plt+0xc1a8>
   1e0f8:	ldr	r3, [sp, #32]
   1e0fc:	cmp	r3, #0
   1e100:	bne	1e8f4 <__assert_fail@plt+0xcd50>
   1e104:	mov	r5, r3
   1e108:	mov	r4, #92	; 0x5c
   1e10c:	eor	r3, r3, #1
   1e110:	ldr	r2, [sp, #36]	; 0x24
   1e114:	and	r3, r3, r2
   1e118:	tst	r3, #255	; 0xff
   1e11c:	beq	1de24 <__assert_fail@plt+0xc280>
   1e120:	cmp	r9, fp
   1e124:	movhi	r3, #39	; 0x27
   1e128:	strbhi	r3, [r8, fp]
   1e12c:	add	r3, fp, #1
   1e130:	cmp	r9, r3
   1e134:	movhi	r2, #39	; 0x27
   1e138:	strbhi	r2, [r8, r3]
   1e13c:	add	fp, fp, #2
   1e140:	mov	r3, #0
   1e144:	str	r3, [sp, #36]	; 0x24
   1e148:	b	1de24 <__assert_fail@plt+0xc280>
   1e14c:	mov	r3, #110	; 0x6e
   1e150:	b	1dd34 <__assert_fail@plt+0xc190>
   1e154:	mov	r3, #110	; 0x6e
   1e158:	b	1dd34 <__assert_fail@plt+0xc190>
   1e15c:	mov	r3, #0
   1e160:	str	r3, [sp, #44]	; 0x2c
   1e164:	mov	r3, #110	; 0x6e
   1e168:	b	1dd34 <__assert_fail@plt+0xc190>
   1e16c:	mov	r8, r9
   1e170:	mov	r7, #2
   1e174:	b	1e914 <__assert_fail@plt+0xcd70>
   1e178:	mov	r3, #97	; 0x61
   1e17c:	b	1dd4c <__assert_fail@plt+0xc1a8>
   1e180:	mov	r3, #97	; 0x61
   1e184:	b	1dd4c <__assert_fail@plt+0xc1a8>
   1e188:	mov	r3, #0
   1e18c:	str	r3, [sp, #44]	; 0x2c
   1e190:	ldr	r3, [sp, #24]
   1e194:	cmn	r3, #1
   1e198:	beq	1e1c4 <__assert_fail@plt+0xc620>
   1e19c:	ldr	r3, [sp, #24]
   1e1a0:	subs	r3, r3, #1
   1e1a4:	movne	r3, #1
   1e1a8:	cmp	r3, #0
   1e1ac:	bne	1e72c <__assert_fail@plt+0xcb88>
   1e1b0:	cmp	r6, #0
   1e1b4:	beq	1e1f4 <__assert_fail@plt+0xc650>
   1e1b8:	mov	r5, #0
   1e1bc:	mov	r3, r5
   1e1c0:	b	1dd60 <__assert_fail@plt+0xc1bc>
   1e1c4:	ldr	r3, [sp, #48]	; 0x30
   1e1c8:	ldrb	r3, [r3, #1]
   1e1cc:	adds	r3, r3, #0
   1e1d0:	movne	r3, #1
   1e1d4:	b	1e1a8 <__assert_fail@plt+0xc604>
   1e1d8:	mov	r3, #0
   1e1dc:	str	r3, [sp, #44]	; 0x2c
   1e1e0:	b	1e1b0 <__assert_fail@plt+0xc60c>
   1e1e4:	mov	r3, #0
   1e1e8:	str	r3, [sp, #44]	; 0x2c
   1e1ec:	b	1e1f4 <__assert_fail@plt+0xc650>
   1e1f0:	ldr	r5, [sp, #44]	; 0x2c
   1e1f4:	ldr	r3, [sp, #32]
   1e1f8:	cmp	sl, #2
   1e1fc:	movne	r3, #0
   1e200:	andeq	r3, r3, #1
   1e204:	cmp	r3, #0
   1e208:	beq	1dd60 <__assert_fail@plt+0xc1bc>
   1e20c:	mov	r8, r9
   1e210:	mov	r7, #2
   1e214:	b	1e914 <__assert_fail@plt+0xcd70>
   1e218:	ldr	r5, [sp, #32]
   1e21c:	b	1e1f4 <__assert_fail@plt+0xc650>
   1e220:	mov	r3, #0
   1e224:	str	r3, [sp, #44]	; 0x2c
   1e228:	mov	r5, r3
   1e22c:	b	1e1f4 <__assert_fail@plt+0xc650>
   1e230:	mov	r3, #0
   1e234:	str	r3, [sp, #44]	; 0x2c
   1e238:	cmp	sl, #2
   1e23c:	strne	r5, [sp, #68]	; 0x44
   1e240:	movne	r3, #0
   1e244:	movne	r4, #39	; 0x27
   1e248:	bne	1dd60 <__assert_fail@plt+0xc1bc>
   1e24c:	ldr	r3, [sp, #32]
   1e250:	cmp	r3, #0
   1e254:	bne	1e900 <__assert_fail@plt+0xcd5c>
   1e258:	ldr	r3, [sp, #72]	; 0x48
   1e25c:	clz	r3, r3
   1e260:	lsr	r3, r3, #5
   1e264:	cmp	r9, #0
   1e268:	moveq	r3, #0
   1e26c:	cmp	r3, #0
   1e270:	movne	r3, #0
   1e274:	bne	1e29c <__assert_fail@plt+0xc6f8>
   1e278:	cmp	r9, fp
   1e27c:	movhi	r3, #39	; 0x27
   1e280:	strbhi	r3, [r8, fp]
   1e284:	add	r3, fp, #1
   1e288:	cmp	r9, r3
   1e28c:	movhi	r2, #92	; 0x5c
   1e290:	strbhi	r2, [r8, r3]
   1e294:	mov	r3, r9
   1e298:	ldr	r9, [sp, #72]	; 0x48
   1e29c:	add	r2, fp, #2
   1e2a0:	cmp	r2, r3
   1e2a4:	movcc	r1, #39	; 0x27
   1e2a8:	strbcc	r1, [r8, r2]
   1e2ac:	add	fp, fp, #3
   1e2b0:	str	r5, [sp, #68]	; 0x44
   1e2b4:	ldr	r2, [sp, #32]
   1e2b8:	str	r2, [sp, #36]	; 0x24
   1e2bc:	str	r9, [sp, #72]	; 0x48
   1e2c0:	mov	r9, r3
   1e2c4:	mov	r4, #39	; 0x27
   1e2c8:	mov	r3, #0
   1e2cc:	b	1ddac <__assert_fail@plt+0xc208>
   1e2d0:	mov	r3, #0
   1e2d4:	str	r3, [sp, #44]	; 0x2c
   1e2d8:	ldr	r7, [sp, #76]	; 0x4c
   1e2dc:	cmp	r7, #1
   1e2e0:	bne	1e318 <__assert_fail@plt+0xc774>
   1e2e4:	bl	11964 <__ctype_b_loc@plt>
   1e2e8:	ldr	r2, [r0]
   1e2ec:	lsl	r3, r4, #1
   1e2f0:	ldrh	r5, [r2, r3]
   1e2f4:	ubfx	r5, r5, #14, #1
   1e2f8:	mov	ip, r7
   1e2fc:	eor	r3, r5, #1
   1e300:	ldr	r2, [sp, #28]
   1e304:	and	r3, r3, r2
   1e308:	ands	r3, r3, #255	; 0xff
   1e30c:	beq	1dd60 <__assert_fail@plt+0xc1bc>
   1e310:	mov	r5, #0
   1e314:	b	1e574 <__assert_fail@plt+0xc9d0>
   1e318:	mov	r2, #0
   1e31c:	mov	r3, #0
   1e320:	strd	r2, [sp, #104]	; 0x68
   1e324:	ldr	r3, [sp, #24]
   1e328:	cmn	r3, #1
   1e32c:	beq	1e350 <__assert_fail@plt+0xc7ac>
   1e330:	mov	r3, #0
   1e334:	str	r4, [sp, #88]	; 0x58
   1e338:	str	fp, [sp, #92]	; 0x5c
   1e33c:	str	r8, [sp, #56]	; 0x38
   1e340:	mov	r8, r3
   1e344:	str	r9, [sp, #84]	; 0x54
   1e348:	ldr	r9, [sp, #48]	; 0x30
   1e34c:	b	1e49c <__assert_fail@plt+0xc8f8>
   1e350:	ldr	r0, [sp, #48]	; 0x30
   1e354:	bl	11988 <strlen@plt>
   1e358:	str	r0, [sp, #24]
   1e35c:	b	1e330 <__assert_fail@plt+0xc78c>
   1e360:	mov	r1, fp
   1e364:	ldr	r4, [sp, #88]	; 0x58
   1e368:	mov	r2, r8
   1e36c:	mov	ip, r8
   1e370:	ldr	fp, [sp, #92]	; 0x5c
   1e374:	ldr	r8, [sp, #56]	; 0x38
   1e378:	ldr	r9, [sp, #84]	; 0x54
   1e37c:	ldr	r0, [sp, #24]
   1e380:	cmp	r7, r0
   1e384:	bcs	1e53c <__assert_fail@plt+0xc998>
   1e388:	ldrb	r3, [r1]
   1e38c:	cmp	r3, #0
   1e390:	beq	1e544 <__assert_fail@plt+0xc9a0>
   1e394:	mov	r3, r1
   1e398:	add	r2, r2, #1
   1e39c:	add	r1, r6, r2
   1e3a0:	cmp	r0, r1
   1e3a4:	bls	1e54c <__assert_fail@plt+0xc9a8>
   1e3a8:	ldrb	r1, [r3, #1]!
   1e3ac:	cmp	r1, #0
   1e3b0:	bne	1e398 <__assert_fail@plt+0xc7f4>
   1e3b4:	mov	ip, r2
   1e3b8:	mov	r5, #0
   1e3bc:	b	1e56c <__assert_fail@plt+0xc9c8>
   1e3c0:	ldr	r3, [sp, #56]	; 0x38
   1e3c4:	str	r3, [sp, #64]	; 0x40
   1e3c8:	ldr	r8, [sp, #84]	; 0x54
   1e3cc:	mov	r7, #2
   1e3d0:	b	1e914 <__assert_fail@plt+0xcd70>
   1e3d4:	cmp	r2, r7
   1e3d8:	beq	1e478 <__assert_fail@plt+0xc8d4>
   1e3dc:	ldrb	r3, [r2], #1
   1e3e0:	sub	r3, r3, #91	; 0x5b
   1e3e4:	cmp	r3, #33	; 0x21
   1e3e8:	ldrls	pc, [pc, r3, lsl #2]
   1e3ec:	b	1e3d4 <__assert_fail@plt+0xc830>
   1e3f0:	andeq	lr, r1, r0, asr #7
   1e3f4:	andeq	lr, r1, r0, asr #7
   1e3f8:	ldrdeq	lr, [r1], -r4
   1e3fc:	andeq	lr, r1, r0, asr #7
   1e400:	ldrdeq	lr, [r1], -r4
   1e404:	andeq	lr, r1, r0, asr #7
   1e408:	ldrdeq	lr, [r1], -r4
   1e40c:	ldrdeq	lr, [r1], -r4
   1e410:	ldrdeq	lr, [r1], -r4
   1e414:	ldrdeq	lr, [r1], -r4
   1e418:	ldrdeq	lr, [r1], -r4
   1e41c:	ldrdeq	lr, [r1], -r4
   1e420:	ldrdeq	lr, [r1], -r4
   1e424:	ldrdeq	lr, [r1], -r4
   1e428:	ldrdeq	lr, [r1], -r4
   1e42c:	ldrdeq	lr, [r1], -r4
   1e430:	ldrdeq	lr, [r1], -r4
   1e434:	ldrdeq	lr, [r1], -r4
   1e438:	ldrdeq	lr, [r1], -r4
   1e43c:	ldrdeq	lr, [r1], -r4
   1e440:	ldrdeq	lr, [r1], -r4
   1e444:	ldrdeq	lr, [r1], -r4
   1e448:	ldrdeq	lr, [r1], -r4
   1e44c:	ldrdeq	lr, [r1], -r4
   1e450:	ldrdeq	lr, [r1], -r4
   1e454:	ldrdeq	lr, [r1], -r4
   1e458:	ldrdeq	lr, [r1], -r4
   1e45c:	ldrdeq	lr, [r1], -r4
   1e460:	ldrdeq	lr, [r1], -r4
   1e464:	ldrdeq	lr, [r1], -r4
   1e468:	ldrdeq	lr, [r1], -r4
   1e46c:	ldrdeq	lr, [r1], -r4
   1e470:	ldrdeq	lr, [r1], -r4
   1e474:	andeq	lr, r1, r0, asr #7
   1e478:	ldr	r0, [sp, #100]	; 0x64
   1e47c:	bl	11838 <iswprint@plt>
   1e480:	cmp	r0, #0
   1e484:	moveq	r5, #0
   1e488:	add	r8, r8, r4
   1e48c:	add	r0, sp, #104	; 0x68
   1e490:	bl	117b4 <mbsinit@plt>
   1e494:	cmp	r0, #0
   1e498:	bne	1e508 <__assert_fail@plt+0xc964>
   1e49c:	add	r7, r6, r8
   1e4a0:	add	fp, r9, r7
   1e4a4:	add	r3, sp, #104	; 0x68
   1e4a8:	ldr	r2, [sp, #24]
   1e4ac:	sub	r2, r2, r7
   1e4b0:	mov	r1, fp
   1e4b4:	add	r0, sp, #100	; 0x64
   1e4b8:	bl	1be94 <__assert_fail@plt+0xa2f0>
   1e4bc:	subs	r4, r0, #0
   1e4c0:	beq	1e558 <__assert_fail@plt+0xc9b4>
   1e4c4:	cmn	r4, #1
   1e4c8:	beq	1e520 <__assert_fail@plt+0xc97c>
   1e4cc:	cmn	r4, #2
   1e4d0:	beq	1e360 <__assert_fail@plt+0xc7bc>
   1e4d4:	ldr	r3, [sp, #32]
   1e4d8:	cmp	sl, #2
   1e4dc:	movne	r3, #0
   1e4e0:	andeq	r3, r3, #1
   1e4e4:	cmp	r3, #0
   1e4e8:	beq	1e478 <__assert_fail@plt+0xc8d4>
   1e4ec:	cmp	r4, #1
   1e4f0:	bls	1e478 <__assert_fail@plt+0xc8d4>
   1e4f4:	add	r2, r7, #1
   1e4f8:	add	r2, r9, r2
   1e4fc:	add	r3, r9, r4
   1e500:	add	r7, r3, r7
   1e504:	b	1e3dc <__assert_fail@plt+0xc838>
   1e508:	ldr	r4, [sp, #88]	; 0x58
   1e50c:	mov	ip, r8
   1e510:	ldr	fp, [sp, #92]	; 0x5c
   1e514:	ldr	r8, [sp, #56]	; 0x38
   1e518:	ldr	r9, [sp, #84]	; 0x54
   1e51c:	b	1e56c <__assert_fail@plt+0xc9c8>
   1e520:	ldr	r4, [sp, #88]	; 0x58
   1e524:	mov	ip, r8
   1e528:	ldr	fp, [sp, #92]	; 0x5c
   1e52c:	ldr	r8, [sp, #56]	; 0x38
   1e530:	ldr	r9, [sp, #84]	; 0x54
   1e534:	mov	r5, #0
   1e538:	b	1e56c <__assert_fail@plt+0xc9c8>
   1e53c:	mov	r5, #0
   1e540:	b	1e56c <__assert_fail@plt+0xc9c8>
   1e544:	mov	r5, #0
   1e548:	b	1e56c <__assert_fail@plt+0xc9c8>
   1e54c:	mov	ip, r2
   1e550:	mov	r5, #0
   1e554:	b	1e56c <__assert_fail@plt+0xc9c8>
   1e558:	ldr	r4, [sp, #88]	; 0x58
   1e55c:	mov	ip, r8
   1e560:	ldr	fp, [sp, #92]	; 0x5c
   1e564:	ldr	r8, [sp, #56]	; 0x38
   1e568:	ldr	r9, [sp, #84]	; 0x54
   1e56c:	cmp	ip, #1
   1e570:	bls	1e2fc <__assert_fail@plt+0xc758>
   1e574:	add	lr, r6, ip
   1e578:	ldr	r3, [sp, #48]	; 0x30
   1e57c:	add	r1, r3, r6
   1e580:	mov	r3, #0
   1e584:	eor	r0, r5, #1
   1e588:	ldr	r2, [sp, #28]
   1e58c:	and	r0, r0, r2
   1e590:	uxtb	r0, r0
   1e594:	str	r0, [sp, #56]	; 0x38
   1e598:	mov	r7, #92	; 0x5c
   1e59c:	ldr	ip, [sp, #36]	; 0x24
   1e5a0:	str	r5, [sp, #84]	; 0x54
   1e5a4:	ldr	r2, [sp, #44]	; 0x2c
   1e5a8:	b	1e618 <__assert_fail@plt+0xca74>
   1e5ac:	cmp	r2, #0
   1e5b0:	beq	1e5c0 <__assert_fail@plt+0xca1c>
   1e5b4:	cmp	r9, fp
   1e5b8:	strbhi	r7, [r8, fp]
   1e5bc:	add	fp, fp, #1
   1e5c0:	add	r5, r6, #1
   1e5c4:	cmp	r5, lr
   1e5c8:	bcs	1e6d4 <__assert_fail@plt+0xcb30>
   1e5cc:	eor	r2, r3, #1
   1e5d0:	and	r2, r2, ip
   1e5d4:	ands	r2, r2, #255	; 0xff
   1e5d8:	beq	1e6f0 <__assert_fail@plt+0xcb4c>
   1e5dc:	cmp	r9, fp
   1e5e0:	movhi	r2, #39	; 0x27
   1e5e4:	strbhi	r2, [r8, fp]
   1e5e8:	add	r2, fp, #1
   1e5ec:	cmp	r9, r2
   1e5f0:	movhi	ip, #39	; 0x27
   1e5f4:	strbhi	ip, [r8, r2]
   1e5f8:	add	fp, fp, #2
   1e5fc:	ldr	ip, [sp, #56]	; 0x38
   1e600:	mov	r2, ip
   1e604:	mov	r6, r5
   1e608:	cmp	r9, fp
   1e60c:	strbhi	r4, [r8, fp]
   1e610:	add	fp, fp, #1
   1e614:	ldrb	r4, [r1, #1]!
   1e618:	cmp	r0, #0
   1e61c:	beq	1e5ac <__assert_fail@plt+0xca08>
   1e620:	ldr	r3, [sp, #32]
   1e624:	cmp	r3, #0
   1e628:	bne	1e8bc <__assert_fail@plt+0xcd18>
   1e62c:	eor	r3, ip, #1
   1e630:	cmp	sl, #2
   1e634:	movne	r3, #0
   1e638:	andeq	r3, r3, #1
   1e63c:	cmp	r3, #0
   1e640:	beq	1e678 <__assert_fail@plt+0xcad4>
   1e644:	cmp	r9, fp
   1e648:	movhi	ip, #39	; 0x27
   1e64c:	strbhi	ip, [r8, fp]
   1e650:	add	ip, fp, #1
   1e654:	cmp	r9, ip
   1e658:	movhi	r5, #36	; 0x24
   1e65c:	strbhi	r5, [r8, ip]
   1e660:	add	ip, fp, #2
   1e664:	cmp	r9, ip
   1e668:	movhi	r5, #39	; 0x27
   1e66c:	strbhi	r5, [r8, ip]
   1e670:	add	fp, fp, #3
   1e674:	mov	ip, r3
   1e678:	cmp	r9, fp
   1e67c:	strbhi	r7, [r8, fp]
   1e680:	add	r3, fp, #1
   1e684:	cmp	r9, r3
   1e688:	bls	1e698 <__assert_fail@plt+0xcaf4>
   1e68c:	lsr	r5, r4, #6
   1e690:	add	r5, r5, #48	; 0x30
   1e694:	strb	r5, [r8, r3]
   1e698:	add	r3, fp, #2
   1e69c:	cmp	r9, r3
   1e6a0:	bls	1e6b0 <__assert_fail@plt+0xcb0c>
   1e6a4:	ubfx	r5, r4, #3, #3
   1e6a8:	add	r5, r5, #48	; 0x30
   1e6ac:	strb	r5, [r8, r3]
   1e6b0:	add	fp, fp, #3
   1e6b4:	and	r4, r4, #7
   1e6b8:	add	r4, r4, #48	; 0x30
   1e6bc:	add	r5, r6, #1
   1e6c0:	cmp	r5, lr
   1e6c4:	bcs	1e6e0 <__assert_fail@plt+0xcb3c>
   1e6c8:	ldr	r3, [sp, #56]	; 0x38
   1e6cc:	mov	r6, r5
   1e6d0:	b	1e608 <__assert_fail@plt+0xca64>
   1e6d4:	str	ip, [sp, #36]	; 0x24
   1e6d8:	ldr	r5, [sp, #84]	; 0x54
   1e6dc:	b	1e10c <__assert_fail@plt+0xc568>
   1e6e0:	str	ip, [sp, #36]	; 0x24
   1e6e4:	ldr	r5, [sp, #84]	; 0x54
   1e6e8:	mov	r3, r0
   1e6ec:	b	1e10c <__assert_fail@plt+0xc568>
   1e6f0:	mov	r6, r5
   1e6f4:	b	1e608 <__assert_fail@plt+0xca64>
   1e6f8:	ldr	r3, [sp, #44]	; 0x2c
   1e6fc:	b	1dd60 <__assert_fail@plt+0xc1bc>
   1e700:	mov	r5, #0
   1e704:	mov	r3, r5
   1e708:	mov	r4, #63	; 0x3f
   1e70c:	b	1dd60 <__assert_fail@plt+0xc1bc>
   1e710:	mov	r5, #0
   1e714:	mov	r3, r5
   1e718:	mov	r4, #63	; 0x3f
   1e71c:	b	1dd60 <__assert_fail@plt+0xc1bc>
   1e720:	mov	r5, #0
   1e724:	mov	r3, r5
   1e728:	b	1dd60 <__assert_fail@plt+0xc1bc>
   1e72c:	mov	r5, #0
   1e730:	mov	r3, r5
   1e734:	b	1dd60 <__assert_fail@plt+0xc1bc>
   1e738:	ldr	r5, [sp, #44]	; 0x2c
   1e73c:	ldr	r3, [sp, #32]
   1e740:	b	1dd60 <__assert_fail@plt+0xc1bc>
   1e744:	ldr	r5, [sp, #44]	; 0x2c
   1e748:	mov	r3, #0
   1e74c:	str	r3, [sp, #44]	; 0x2c
   1e750:	b	1dd60 <__assert_fail@plt+0xc1bc>
   1e754:	mov	r4, r3
   1e758:	mov	r5, #0
   1e75c:	b	1ddb8 <__assert_fail@plt+0xc214>
   1e760:	mov	r5, #0
   1e764:	mov	r4, #97	; 0x61
   1e768:	b	1ddb8 <__assert_fail@plt+0xc214>
   1e76c:	mov	r5, #0
   1e770:	mov	r3, r5
   1e774:	mov	r4, #92	; 0x5c
   1e778:	b	1e10c <__assert_fail@plt+0xc568>
   1e77c:	ldr	r3, [sp, #48]	; 0x30
   1e780:	ldrb	r5, [r3, r6]
   1e784:	adds	r5, r5, #0
   1e788:	movne	r5, #1
   1e78c:	b	1de5c <__assert_fail@plt+0xc2b8>
   1e790:	cmp	sl, #2
   1e794:	movne	r3, #0
   1e798:	moveq	r3, #1
   1e79c:	ldr	r1, [sp, #32]
   1e7a0:	cmp	fp, #0
   1e7a4:	andeq	r2, r3, r1
   1e7a8:	movne	r2, #0
   1e7ac:	cmp	r2, #0
   1e7b0:	bne	1e8d0 <__assert_fail@plt+0xcd2c>
   1e7b4:	eor	r2, r1, #1
   1e7b8:	uxtb	r2, r2
   1e7bc:	and	r3, r3, r2
   1e7c0:	ldr	r1, [sp, #68]	; 0x44
   1e7c4:	ands	r3, r1, r3
   1e7c8:	beq	1e85c <__assert_fail@plt+0xccb8>
   1e7cc:	ldr	r2, [sp, #40]	; 0x28
   1e7d0:	cmp	r2, #0
   1e7d4:	bne	1e80c <__assert_fail@plt+0xcc68>
   1e7d8:	ldr	r2, [sp, #72]	; 0x48
   1e7dc:	adds	r2, r2, #0
   1e7e0:	movne	r2, #1
   1e7e4:	cmp	r9, #0
   1e7e8:	movne	r2, #0
   1e7ec:	str	r2, [sp, #68]	; 0x44
   1e7f0:	mov	sl, #2
   1e7f4:	ldr	r1, [sp, #40]	; 0x28
   1e7f8:	str	r1, [sp, #32]
   1e7fc:	cmp	r2, #0
   1e800:	beq	1e850 <__assert_fail@plt+0xccac>
   1e804:	ldr	r9, [sp, #72]	; 0x48
   1e808:	b	1d564 <__assert_fail@plt+0xb9c0>
   1e80c:	ldr	r3, [sp, #168]	; 0xa8
   1e810:	str	r3, [sp, #16]
   1e814:	ldr	r3, [sp, #164]	; 0xa4
   1e818:	str	r3, [sp, #12]
   1e81c:	ldr	r3, [sp, #160]	; 0xa0
   1e820:	str	r3, [sp, #8]
   1e824:	ldr	r3, [sp, #156]	; 0x9c
   1e828:	str	r3, [sp, #4]
   1e82c:	mov	r3, #5
   1e830:	str	r3, [sp]
   1e834:	ldr	r3, [sp, #24]
   1e838:	ldr	r2, [sp, #48]	; 0x30
   1e83c:	ldr	r1, [sp, #72]	; 0x48
   1e840:	ldr	r0, [sp, #64]	; 0x40
   1e844:	bl	1d4ec <__assert_fail@plt+0xb948>
   1e848:	mov	fp, r0
   1e84c:	b	1e96c <__assert_fail@plt+0xcdc8>
   1e850:	mov	r8, r9
   1e854:	mov	r2, r3
   1e858:	b	1e860 <__assert_fail@plt+0xccbc>
   1e85c:	mov	r8, r9
   1e860:	ldr	r3, [sp, #60]	; 0x3c
   1e864:	cmp	r3, #0
   1e868:	moveq	r2, #0
   1e86c:	andne	r2, r2, #1
   1e870:	cmp	r2, #0
   1e874:	beq	1e8a4 <__assert_fail@plt+0xcd00>
   1e878:	mov	r2, r3
   1e87c:	ldrb	r3, [r3]
   1e880:	cmp	r3, #0
   1e884:	beq	1e8a4 <__assert_fail@plt+0xcd00>
   1e888:	ldr	r1, [sp, #64]	; 0x40
   1e88c:	cmp	r8, fp
   1e890:	strbhi	r3, [r1, fp]
   1e894:	add	fp, fp, #1
   1e898:	ldrb	r3, [r2, #1]!
   1e89c:	cmp	r3, #0
   1e8a0:	bne	1e88c <__assert_fail@plt+0xcce8>
   1e8a4:	cmp	r8, fp
   1e8a8:	bls	1e96c <__assert_fail@plt+0xcdc8>
   1e8ac:	mov	r3, #0
   1e8b0:	ldr	r2, [sp, #64]	; 0x40
   1e8b4:	strb	r3, [r2, fp]
   1e8b8:	b	1e96c <__assert_fail@plt+0xcdc8>
   1e8bc:	mov	r8, r9
   1e8c0:	mov	r7, sl
   1e8c4:	ldr	r3, [sp, #32]
   1e8c8:	str	r3, [sp, #28]
   1e8cc:	b	1e914 <__assert_fail@plt+0xcd70>
   1e8d0:	mov	r8, r9
   1e8d4:	mov	r7, #2
   1e8d8:	b	1e914 <__assert_fail@plt+0xcd70>
   1e8dc:	mov	r8, r9
   1e8e0:	mov	r7, sl
   1e8e4:	b	1e914 <__assert_fail@plt+0xcd70>
   1e8e8:	mov	r8, r9
   1e8ec:	mov	r7, sl
   1e8f0:	b	1e914 <__assert_fail@plt+0xcd70>
   1e8f4:	mov	r8, r9
   1e8f8:	mov	r7, sl
   1e8fc:	b	1e914 <__assert_fail@plt+0xcd70>
   1e900:	mov	r8, r9
   1e904:	mov	r7, sl
   1e908:	b	1e914 <__assert_fail@plt+0xcd70>
   1e90c:	mov	r8, r9
   1e910:	mov	r7, sl
   1e914:	ldr	r3, [sp, #28]
   1e918:	cmp	r7, #2
   1e91c:	movne	r3, #0
   1e920:	andeq	r3, r3, #1
   1e924:	cmp	r3, #0
   1e928:	movne	r7, #4
   1e92c:	ldr	r3, [sp, #168]	; 0xa8
   1e930:	str	r3, [sp, #16]
   1e934:	ldr	r3, [sp, #164]	; 0xa4
   1e938:	str	r3, [sp, #12]
   1e93c:	mov	r3, #0
   1e940:	str	r3, [sp, #8]
   1e944:	ldr	r3, [sp, #156]	; 0x9c
   1e948:	bic	r3, r3, #2
   1e94c:	str	r3, [sp, #4]
   1e950:	str	r7, [sp]
   1e954:	ldr	r3, [sp, #24]
   1e958:	ldr	r2, [sp, #48]	; 0x30
   1e95c:	mov	r1, r8
   1e960:	ldr	r0, [sp, #64]	; 0x40
   1e964:	bl	1d4ec <__assert_fail@plt+0xb948>
   1e968:	mov	fp, r0
   1e96c:	mov	r0, fp
   1e970:	add	sp, sp, #116	; 0x74
   1e974:	ldrd	r4, [sp]
   1e978:	ldrd	r6, [sp, #8]
   1e97c:	ldrd	r8, [sp, #16]
   1e980:	ldrd	sl, [sp, #24]
   1e984:	add	sp, sp, #32
   1e988:	pop	{pc}		; (ldr pc, [sp], #4)
   1e98c:	mov	r8, r9
   1e990:	mov	r7, sl
   1e994:	b	1e92c <__assert_fail@plt+0xcd88>
   1e998:	add	fp, fp, #4
   1e99c:	str	r3, [sp, #36]	; 0x24
   1e9a0:	mov	r5, #0
   1e9a4:	mov	r4, #48	; 0x30
   1e9a8:	b	1dd60 <__assert_fail@plt+0xc1bc>
   1e9ac:	mov	r3, #1
   1e9b0:	str	r3, [sp, #32]
   1e9b4:	str	r3, [sp, #28]
   1e9b8:	str	r3, [sp, #52]	; 0x34
   1e9bc:	movw	r3, #9108	; 0x2394
   1e9c0:	movt	r3, #3
   1e9c4:	str	r3, [sp, #60]	; 0x3c
   1e9c8:	mov	fp, #0
   1e9cc:	mov	sl, #5
   1e9d0:	b	1d5c4 <__assert_fail@plt+0xba20>
   1e9d4:	ldr	r3, [sp, #48]	; 0x30
   1e9d8:	ldrb	r4, [r3, r6]
   1e9dc:	cmp	r4, #126	; 0x7e
   1e9e0:	ldrls	pc, [pc, r4, lsl #2]
   1e9e4:	b	1e2d0 <__assert_fail@plt+0xc72c>
   1e9e8:	andeq	sp, r1, r8, asr sl
   1e9ec:	ldrdeq	lr, [r1], -r0
   1e9f0:	ldrdeq	lr, [r1], -r0
   1e9f4:	ldrdeq	lr, [r1], -r0
   1e9f8:	ldrdeq	lr, [r1], -r0
   1e9fc:	ldrdeq	lr, [r1], -r0
   1ea00:	ldrdeq	lr, [r1], -r0
   1ea04:	andeq	lr, r1, r0, ror #14
   1ea08:	strdeq	sp, [r1], -ip
   1ea0c:	andeq	lr, r1, r0, lsr #1
   1ea10:	andeq	lr, r1, ip, asr r1
   1ea14:	strheq	lr, [r1], -r4
   1ea18:	andeq	sp, r1, r0, lsl sp
   1ea1c:	andeq	sp, r1, r4, lsr #26
   1ea20:	ldrdeq	lr, [r1], -r0
   1ea24:	ldrdeq	lr, [r1], -r0
   1ea28:	ldrdeq	lr, [r1], -r0
   1ea2c:	ldrdeq	lr, [r1], -r0
   1ea30:	ldrdeq	lr, [r1], -r0
   1ea34:	ldrdeq	lr, [r1], -r0
   1ea38:	ldrdeq	lr, [r1], -r0
   1ea3c:	ldrdeq	lr, [r1], -r0
   1ea40:	ldrdeq	lr, [r1], -r0
   1ea44:	ldrdeq	lr, [r1], -r0
   1ea48:	ldrdeq	lr, [r1], -r0
   1ea4c:	ldrdeq	lr, [r1], -r0
   1ea50:	ldrdeq	lr, [r1], -r0
   1ea54:	ldrdeq	lr, [r1], -r0
   1ea58:	ldrdeq	lr, [r1], -r0
   1ea5c:	ldrdeq	lr, [r1], -r0
   1ea60:	ldrdeq	lr, [r1], -r0
   1ea64:	ldrdeq	lr, [r1], -r0
   1ea68:	andeq	lr, r1, r4, ror #3
   1ea6c:	andeq	lr, r1, r0, lsr #4
   1ea70:	andeq	lr, r1, r0, lsr #4
   1ea74:	ldrdeq	lr, [r1], -r8
   1ea78:	andeq	lr, r1, r0, lsr #4
   1ea7c:	andeq	lr, r1, r4, asr #14
   1ea80:	andeq	lr, r1, r0, lsr #4
   1ea84:	andeq	lr, r1, r0, lsr r2
   1ea88:	andeq	lr, r1, r0, lsr #4
   1ea8c:	andeq	lr, r1, r0, lsr #4
   1ea90:	andeq	lr, r1, r0, lsr #4
   1ea94:	andeq	lr, r1, r4, asr #14
   1ea98:	andeq	lr, r1, r4, asr #14
   1ea9c:	andeq	lr, r1, r4, asr #14
   1eaa0:	andeq	lr, r1, r4, asr #14
   1eaa4:	andeq	lr, r1, r4, asr #14
   1eaa8:	andeq	lr, r1, r4, asr #14
   1eaac:	andeq	lr, r1, r4, asr #14
   1eab0:	andeq	lr, r1, r4, asr #14
   1eab4:	andeq	lr, r1, r4, asr #14
   1eab8:	andeq	lr, r1, r4, asr #14
   1eabc:	andeq	lr, r1, r4, asr #14
   1eac0:	andeq	lr, r1, r4, asr #14
   1eac4:	andeq	lr, r1, r4, asr #14
   1eac8:	andeq	lr, r1, r4, asr #14
   1eacc:	andeq	lr, r1, r4, asr #14
   1ead0:	andeq	lr, r1, r4, asr #14
   1ead4:	andeq	lr, r1, r0, lsr #4
   1ead8:	andeq	lr, r1, r0, lsr #4
   1eadc:	andeq	lr, r1, r0, lsr #4
   1eae0:	andeq	lr, r1, r0, lsr #4
   1eae4:	muleq	r1, r0, fp
   1eae8:	ldrdeq	lr, [r1], -r0
   1eaec:	andeq	lr, r1, r4, asr #14
   1eaf0:	andeq	lr, r1, r4, asr #14
   1eaf4:	andeq	lr, r1, r4, asr #14
   1eaf8:	andeq	lr, r1, r4, asr #14
   1eafc:	andeq	lr, r1, r4, asr #14
   1eb00:	andeq	lr, r1, r4, asr #14
   1eb04:	andeq	lr, r1, r4, asr #14
   1eb08:	andeq	lr, r1, r4, asr #14
   1eb0c:	andeq	lr, r1, r4, asr #14
   1eb10:	andeq	lr, r1, r4, asr #14
   1eb14:	andeq	lr, r1, r4, asr #14
   1eb18:	andeq	lr, r1, r4, asr #14
   1eb1c:	andeq	lr, r1, r4, asr #14
   1eb20:	andeq	lr, r1, r4, asr #14
   1eb24:	andeq	lr, r1, r4, asr #14
   1eb28:	andeq	lr, r1, r4, asr #14
   1eb2c:	andeq	lr, r1, r4, asr #14
   1eb30:	andeq	lr, r1, r4, asr #14
   1eb34:	andeq	lr, r1, r4, asr #14
   1eb38:	andeq	lr, r1, r4, asr #14
   1eb3c:	andeq	lr, r1, r4, asr #14
   1eb40:	andeq	lr, r1, r4, asr #14
   1eb44:	andeq	lr, r1, r4, asr #14
   1eb48:	andeq	lr, r1, r4, asr #14
   1eb4c:	andeq	lr, r1, r4, asr #14
   1eb50:	andeq	lr, r1, r4, asr #14
   1eb54:	andeq	lr, r1, r0, lsr #4
   1eb58:	andeq	lr, r1, r8, asr #1
   1eb5c:	andeq	lr, r1, r4, asr #14
   1eb60:	andeq	lr, r1, r0, lsr #4
   1eb64:	andeq	lr, r1, r4, asr #14
   1eb68:	andeq	lr, r1, r0, lsr #4
   1eb6c:	andeq	lr, r1, r4, asr #14
   1eb70:	andeq	lr, r1, r4, asr #14
   1eb74:	andeq	lr, r1, r4, asr #14
   1eb78:	andeq	lr, r1, r4, asr #14
   1eb7c:	andeq	lr, r1, r4, asr #14
   1eb80:	andeq	lr, r1, r4, asr #14
   1eb84:	andeq	lr, r1, r4, asr #14
   1eb88:	andeq	lr, r1, r4, asr #14
   1eb8c:	andeq	lr, r1, r4, asr #14
   1eb90:	andeq	lr, r1, r4, asr #14
   1eb94:	andeq	lr, r1, r4, asr #14
   1eb98:	andeq	lr, r1, r4, asr #14
   1eb9c:	andeq	lr, r1, r4, asr #14
   1eba0:	andeq	lr, r1, r4, asr #14
   1eba4:	andeq	lr, r1, r4, asr #14
   1eba8:	andeq	lr, r1, r4, asr #14
   1ebac:	andeq	lr, r1, r4, asr #14
   1ebb0:	andeq	lr, r1, r4, asr #14
   1ebb4:	andeq	lr, r1, r4, asr #14
   1ebb8:	andeq	lr, r1, r4, asr #14
   1ebbc:	andeq	lr, r1, r4, asr #14
   1ebc0:	andeq	lr, r1, r4, asr #14
   1ebc4:	andeq	lr, r1, r4, asr #14
   1ebc8:	andeq	lr, r1, r4, asr #14
   1ebcc:	andeq	lr, r1, r4, asr #14
   1ebd0:	andeq	lr, r1, r4, asr #14
   1ebd4:	andeq	lr, r1, r8, lsl #3
   1ebd8:	andeq	lr, r1, r0, lsr #4
   1ebdc:	andeq	lr, r1, r8, lsl #3
   1ebe0:	ldrdeq	lr, [r1], -r8
   1ebe4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ebe8:	strd	r6, [sp, #8]
   1ebec:	strd	r8, [sp, #16]
   1ebf0:	strd	sl, [sp, #24]
   1ebf4:	str	lr, [sp, #32]
   1ebf8:	sub	sp, sp, #52	; 0x34
   1ebfc:	mov	r5, r0
   1ec00:	str	r1, [sp, #24]
   1ec04:	str	r2, [sp, #28]
   1ec08:	mov	r4, r3
   1ec0c:	bl	119b8 <__errno_location@plt>
   1ec10:	str	r0, [sp, #32]
   1ec14:	ldr	r3, [r0]
   1ec18:	str	r3, [sp, #36]	; 0x24
   1ec1c:	movw	r3, #12764	; 0x31dc
   1ec20:	movt	r3, #4
   1ec24:	ldr	r6, [r3]
   1ec28:	cmn	r5, #-2147483647	; 0x80000001
   1ec2c:	movne	r3, #0
   1ec30:	moveq	r3, #1
   1ec34:	orrs	r3, r3, r5, lsr #31
   1ec38:	bne	1ed9c <__assert_fail@plt+0xd1f8>
   1ec3c:	movw	r3, #12764	; 0x31dc
   1ec40:	movt	r3, #4
   1ec44:	ldr	r2, [r3, #4]
   1ec48:	cmp	r2, r5
   1ec4c:	bgt	1ecbc <__assert_fail@plt+0xd118>
   1ec50:	str	r2, [sp, #44]	; 0x2c
   1ec54:	add	r3, r3, #8
   1ec58:	cmp	r6, r3
   1ec5c:	beq	1eda0 <__assert_fail@plt+0xd1fc>
   1ec60:	sub	r2, r5, r2
   1ec64:	mov	r3, #8
   1ec68:	str	r3, [sp]
   1ec6c:	mvn	r3, #-2147483648	; 0x80000000
   1ec70:	add	r2, r2, #1
   1ec74:	add	r1, sp, #44	; 0x2c
   1ec78:	mov	r0, r6
   1ec7c:	bl	2ddb8 <__assert_fail@plt+0x1c214>
   1ec80:	mov	r6, r0
   1ec84:	movw	r3, #12764	; 0x31dc
   1ec88:	movt	r3, #4
   1ec8c:	str	r0, [r3]
   1ec90:	movw	r7, #12764	; 0x31dc
   1ec94:	movt	r7, #4
   1ec98:	ldr	r0, [r7, #4]
   1ec9c:	ldr	r2, [sp, #44]	; 0x2c
   1eca0:	sub	r2, r2, r0
   1eca4:	lsl	r2, r2, #3
   1eca8:	mov	r1, #0
   1ecac:	add	r0, r6, r0, lsl #3
   1ecb0:	bl	119e8 <memset@plt>
   1ecb4:	ldr	r3, [sp, #44]	; 0x2c
   1ecb8:	str	r3, [r7, #4]
   1ecbc:	add	fp, r6, r5, lsl #3
   1ecc0:	ldr	r8, [r6, r5, lsl #3]
   1ecc4:	ldr	r7, [fp, #4]
   1ecc8:	ldr	r3, [r4, #4]
   1eccc:	orr	r9, r3, #1
   1ecd0:	add	sl, r4, #8
   1ecd4:	ldr	r3, [r4, #44]	; 0x2c
   1ecd8:	str	r3, [sp, #16]
   1ecdc:	ldr	r3, [r4, #40]	; 0x28
   1ece0:	str	r3, [sp, #12]
   1ece4:	str	sl, [sp, #8]
   1ece8:	str	r9, [sp, #4]
   1ecec:	ldr	r3, [r4]
   1ecf0:	str	r3, [sp]
   1ecf4:	ldr	r3, [sp, #28]
   1ecf8:	ldr	r2, [sp, #24]
   1ecfc:	mov	r1, r8
   1ed00:	mov	r0, r7
   1ed04:	bl	1d4ec <__assert_fail@plt+0xb948>
   1ed08:	cmp	r8, r0
   1ed0c:	bhi	1ed70 <__assert_fail@plt+0xd1cc>
   1ed10:	add	r8, r0, #1
   1ed14:	str	r8, [r6, r5, lsl #3]
   1ed18:	movw	r3, #13004	; 0x32cc
   1ed1c:	movt	r3, #4
   1ed20:	cmp	r7, r3
   1ed24:	beq	1ed30 <__assert_fail@plt+0xd18c>
   1ed28:	mov	r0, r7
   1ed2c:	bl	17750 <__assert_fail@plt+0x5bac>
   1ed30:	mov	r0, r8
   1ed34:	bl	2dbb4 <__assert_fail@plt+0x1c010>
   1ed38:	mov	r7, r0
   1ed3c:	str	r0, [fp, #4]
   1ed40:	ldr	r3, [r4, #44]	; 0x2c
   1ed44:	str	r3, [sp, #16]
   1ed48:	ldr	r3, [r4, #40]	; 0x28
   1ed4c:	str	r3, [sp, #12]
   1ed50:	str	sl, [sp, #8]
   1ed54:	str	r9, [sp, #4]
   1ed58:	ldr	r3, [r4]
   1ed5c:	str	r3, [sp]
   1ed60:	ldr	r3, [sp, #28]
   1ed64:	ldr	r2, [sp, #24]
   1ed68:	mov	r1, r8
   1ed6c:	bl	1d4ec <__assert_fail@plt+0xb948>
   1ed70:	ldr	r3, [sp, #32]
   1ed74:	ldr	r2, [sp, #36]	; 0x24
   1ed78:	str	r2, [r3]
   1ed7c:	mov	r0, r7
   1ed80:	add	sp, sp, #52	; 0x34
   1ed84:	ldrd	r4, [sp]
   1ed88:	ldrd	r6, [sp, #8]
   1ed8c:	ldrd	r8, [sp, #16]
   1ed90:	ldrd	sl, [sp, #24]
   1ed94:	add	sp, sp, #32
   1ed98:	pop	{pc}		; (ldr pc, [sp], #4)
   1ed9c:	bl	11b68 <abort@plt>
   1eda0:	sub	r2, r5, r2
   1eda4:	mov	r3, #8
   1eda8:	str	r3, [sp]
   1edac:	mvn	r3, #-2147483648	; 0x80000000
   1edb0:	add	r2, r2, #1
   1edb4:	add	r1, sp, #44	; 0x2c
   1edb8:	mov	r0, #0
   1edbc:	bl	2ddb8 <__assert_fail@plt+0x1c214>
   1edc0:	mov	r6, r0
   1edc4:	movw	r3, #12764	; 0x31dc
   1edc8:	movt	r3, #4
   1edcc:	str	r0, [r3]
   1edd0:	ldrd	r2, [r3, #8]
   1edd4:	strd	r2, [r0]
   1edd8:	b	1ec90 <__assert_fail@plt+0xd0ec>
   1eddc:	strd	r4, [sp, #-16]!
   1ede0:	str	r6, [sp, #8]
   1ede4:	str	lr, [sp, #12]
   1ede8:	mov	r4, r0
   1edec:	bl	119b8 <__errno_location@plt>
   1edf0:	mov	r5, r0
   1edf4:	ldr	r6, [r0]
   1edf8:	cmp	r4, #0
   1edfc:	ldr	r3, [pc, #32]	; 1ee24 <__assert_fail@plt+0xd280>
   1ee00:	moveq	r4, r3
   1ee04:	mov	r1, #48	; 0x30
   1ee08:	mov	r0, r4
   1ee0c:	bl	2df28 <__assert_fail@plt+0x1c384>
   1ee10:	str	r6, [r5]
   1ee14:	ldrd	r4, [sp]
   1ee18:	ldr	r6, [sp, #8]
   1ee1c:	add	sp, sp, #12
   1ee20:	pop	{pc}		; (ldr pc, [sp], #4)
   1ee24:	andeq	r3, r4, ip, asr #7
   1ee28:	subs	r3, r0, #0
   1ee2c:	ldr	r2, [pc, #8]	; 1ee3c <__assert_fail@plt+0xd298>
   1ee30:	moveq	r3, r2
   1ee34:	ldr	r0, [r3]
   1ee38:	bx	lr
   1ee3c:	andeq	r3, r4, ip, asr #7
   1ee40:	subs	r3, r0, #0
   1ee44:	ldr	r2, [pc, #8]	; 1ee54 <__assert_fail@plt+0xd2b0>
   1ee48:	moveq	r3, r2
   1ee4c:	str	r1, [r3]
   1ee50:	bx	lr
   1ee54:	andeq	r3, r4, ip, asr #7
   1ee58:	push	{lr}		; (str lr, [sp, #-4]!)
   1ee5c:	subs	r3, r0, #0
   1ee60:	ldr	r0, [pc, #44]	; 1ee94 <__assert_fail@plt+0xd2f0>
   1ee64:	moveq	r3, r0
   1ee68:	add	r3, r3, #8
   1ee6c:	lsr	lr, r1, #5
   1ee70:	and	r1, r1, #31
   1ee74:	ldr	ip, [r3, lr, lsl #2]
   1ee78:	lsr	r0, ip, r1
   1ee7c:	eor	r2, r2, r0
   1ee80:	and	r2, r2, #1
   1ee84:	eor	r1, ip, r2, lsl r1
   1ee88:	str	r1, [r3, lr, lsl #2]
   1ee8c:	and	r0, r0, #1
   1ee90:	pop	{pc}		; (ldr pc, [sp], #4)
   1ee94:	andeq	r3, r4, ip, asr #7
   1ee98:	subs	r3, r0, #0
   1ee9c:	ldr	r2, [pc, #12]	; 1eeb0 <__assert_fail@plt+0xd30c>
   1eea0:	moveq	r3, r2
   1eea4:	ldr	r0, [r3, #4]
   1eea8:	str	r1, [r3, #4]
   1eeac:	bx	lr
   1eeb0:	andeq	r3, r4, ip, asr #7
   1eeb4:	subs	r3, r0, #0
   1eeb8:	ldr	r0, [pc, #44]	; 1eeec <__assert_fail@plt+0xd348>
   1eebc:	moveq	r3, r0
   1eec0:	mov	r0, #10
   1eec4:	str	r0, [r3]
   1eec8:	cmp	r2, #0
   1eecc:	cmpne	r1, #0
   1eed0:	beq	1eee0 <__assert_fail@plt+0xd33c>
   1eed4:	str	r1, [r3, #40]	; 0x28
   1eed8:	str	r2, [r3, #44]	; 0x2c
   1eedc:	bx	lr
   1eee0:	str	r4, [sp, #-8]!
   1eee4:	str	lr, [sp, #4]
   1eee8:	bl	11b68 <abort@plt>
   1eeec:	andeq	r3, r4, ip, asr #7
   1eef0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1eef4:	strd	r6, [sp, #8]
   1eef8:	strd	r8, [sp, #16]
   1eefc:	str	sl, [sp, #24]
   1ef00:	str	lr, [sp, #28]
   1ef04:	sub	sp, sp, #24
   1ef08:	mov	r7, r0
   1ef0c:	mov	r8, r1
   1ef10:	mov	r9, r2
   1ef14:	mov	sl, r3
   1ef18:	ldr	r4, [sp, #56]	; 0x38
   1ef1c:	cmp	r4, #0
   1ef20:	ldr	r3, [pc, #104]	; 1ef90 <__assert_fail@plt+0xd3ec>
   1ef24:	moveq	r4, r3
   1ef28:	bl	119b8 <__errno_location@plt>
   1ef2c:	mov	r5, r0
   1ef30:	ldr	r6, [r0]
   1ef34:	ldr	r3, [r4, #44]	; 0x2c
   1ef38:	str	r3, [sp, #16]
   1ef3c:	ldr	r3, [r4, #40]	; 0x28
   1ef40:	str	r3, [sp, #12]
   1ef44:	add	r3, r4, #8
   1ef48:	str	r3, [sp, #8]
   1ef4c:	ldr	r3, [r4, #4]
   1ef50:	str	r3, [sp, #4]
   1ef54:	ldr	r3, [r4]
   1ef58:	str	r3, [sp]
   1ef5c:	mov	r3, sl
   1ef60:	mov	r2, r9
   1ef64:	mov	r1, r8
   1ef68:	mov	r0, r7
   1ef6c:	bl	1d4ec <__assert_fail@plt+0xb948>
   1ef70:	str	r6, [r5]
   1ef74:	add	sp, sp, #24
   1ef78:	ldrd	r4, [sp]
   1ef7c:	ldrd	r6, [sp, #8]
   1ef80:	ldrd	r8, [sp, #16]
   1ef84:	ldr	sl, [sp, #24]
   1ef88:	add	sp, sp, #28
   1ef8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ef90:	andeq	r3, r4, ip, asr #7
   1ef94:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ef98:	strd	r6, [sp, #8]
   1ef9c:	strd	r8, [sp, #16]
   1efa0:	strd	sl, [sp, #24]
   1efa4:	str	lr, [sp, #32]
   1efa8:	sub	sp, sp, #44	; 0x2c
   1efac:	mov	r8, r0
   1efb0:	mov	sl, r1
   1efb4:	mov	r6, r2
   1efb8:	subs	r4, r3, #0
   1efbc:	ldr	r3, [pc, #200]	; 1f08c <__assert_fail@plt+0xd4e8>
   1efc0:	moveq	r4, r3
   1efc4:	bl	119b8 <__errno_location@plt>
   1efc8:	mov	r7, r0
   1efcc:	ldr	fp, [r0]
   1efd0:	ldr	r5, [r4, #4]
   1efd4:	cmp	r6, #0
   1efd8:	orreq	r5, r5, #1
   1efdc:	add	r9, r4, #8
   1efe0:	ldr	r3, [r4, #44]	; 0x2c
   1efe4:	str	r3, [sp, #16]
   1efe8:	ldr	r3, [r4, #40]	; 0x28
   1efec:	str	r3, [sp, #12]
   1eff0:	str	r9, [sp, #8]
   1eff4:	str	r5, [sp, #4]
   1eff8:	ldr	r3, [r4]
   1effc:	str	r3, [sp]
   1f000:	str	sl, [sp, #36]	; 0x24
   1f004:	mov	r3, sl
   1f008:	str	r8, [sp, #32]
   1f00c:	mov	r2, r8
   1f010:	mov	r1, #0
   1f014:	mov	r0, r1
   1f018:	bl	1d4ec <__assert_fail@plt+0xb948>
   1f01c:	mov	sl, r0
   1f020:	add	r8, r0, #1
   1f024:	mov	r0, r8
   1f028:	bl	2dbb4 <__assert_fail@plt+0x1c010>
   1f02c:	str	r0, [sp, #28]
   1f030:	ldr	r3, [r4, #44]	; 0x2c
   1f034:	str	r3, [sp, #16]
   1f038:	ldr	r3, [r4, #40]	; 0x28
   1f03c:	str	r3, [sp, #12]
   1f040:	str	r9, [sp, #8]
   1f044:	str	r5, [sp, #4]
   1f048:	ldr	r3, [r4]
   1f04c:	str	r3, [sp]
   1f050:	ldr	r3, [sp, #36]	; 0x24
   1f054:	ldr	r2, [sp, #32]
   1f058:	mov	r1, r8
   1f05c:	bl	1d4ec <__assert_fail@plt+0xb948>
   1f060:	str	fp, [r7]
   1f064:	cmp	r6, #0
   1f068:	strne	sl, [r6]
   1f06c:	ldr	r0, [sp, #28]
   1f070:	add	sp, sp, #44	; 0x2c
   1f074:	ldrd	r4, [sp]
   1f078:	ldrd	r6, [sp, #8]
   1f07c:	ldrd	r8, [sp, #16]
   1f080:	ldrd	sl, [sp, #24]
   1f084:	add	sp, sp, #32
   1f088:	pop	{pc}		; (ldr pc, [sp], #4)
   1f08c:	andeq	r3, r4, ip, asr #7
   1f090:	str	r4, [sp, #-8]!
   1f094:	str	lr, [sp, #4]
   1f098:	mov	r3, r2
   1f09c:	mov	r2, #0
   1f0a0:	bl	1ef94 <__assert_fail@plt+0xd3f0>
   1f0a4:	ldr	r4, [sp]
   1f0a8:	add	sp, sp, #4
   1f0ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1f0b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1f0b4:	strd	r6, [sp, #8]
   1f0b8:	str	r8, [sp, #16]
   1f0bc:	str	lr, [sp, #20]
   1f0c0:	movw	r3, #12764	; 0x31dc
   1f0c4:	movt	r3, #4
   1f0c8:	ldr	r7, [r3]
   1f0cc:	ldr	r3, [r3, #4]
   1f0d0:	cmp	r3, #1
   1f0d4:	ble	1f100 <__assert_fail@plt+0xd55c>
   1f0d8:	mov	r4, #1
   1f0dc:	add	r6, r7, #4
   1f0e0:	movw	r5, #12764	; 0x31dc
   1f0e4:	movt	r5, #4
   1f0e8:	ldr	r0, [r6, r4, lsl #3]
   1f0ec:	bl	17750 <__assert_fail@plt+0x5bac>
   1f0f0:	add	r4, r4, #1
   1f0f4:	ldr	r3, [r5, #4]
   1f0f8:	cmp	r3, r4
   1f0fc:	bgt	1f0e8 <__assert_fail@plt+0xd544>
   1f100:	ldr	r0, [r7, #4]
   1f104:	movw	r3, #13004	; 0x32cc
   1f108:	movt	r3, #4
   1f10c:	cmp	r0, r3
   1f110:	beq	1f134 <__assert_fail@plt+0xd590>
   1f114:	bl	17750 <__assert_fail@plt+0x5bac>
   1f118:	movw	r3, #12764	; 0x31dc
   1f11c:	movt	r3, #4
   1f120:	mov	r2, #256	; 0x100
   1f124:	str	r2, [r3, #8]
   1f128:	movw	r2, #13004	; 0x32cc
   1f12c:	movt	r2, #4
   1f130:	str	r2, [r3, #12]
   1f134:	ldr	r3, [pc, #64]	; 1f17c <__assert_fail@plt+0xd5d8>
   1f138:	cmp	r7, r3
   1f13c:	beq	1f158 <__assert_fail@plt+0xd5b4>
   1f140:	mov	r0, r7
   1f144:	bl	17750 <__assert_fail@plt+0x5bac>
   1f148:	movw	r3, #12764	; 0x31dc
   1f14c:	movt	r3, #4
   1f150:	add	r2, r3, #8
   1f154:	str	r2, [r3]
   1f158:	movw	r3, #12764	; 0x31dc
   1f15c:	movt	r3, #4
   1f160:	mov	r2, #1
   1f164:	str	r2, [r3, #4]
   1f168:	ldrd	r4, [sp]
   1f16c:	ldrd	r6, [sp, #8]
   1f170:	ldr	r8, [sp, #16]
   1f174:	add	sp, sp, #20
   1f178:	pop	{pc}		; (ldr pc, [sp], #4)
   1f17c:	andeq	r3, r4, r4, ror #3
   1f180:	str	r4, [sp, #-8]!
   1f184:	str	lr, [sp, #4]
   1f188:	ldr	r3, [pc, #16]	; 1f1a0 <__assert_fail@plt+0xd5fc>
   1f18c:	mvn	r2, #0
   1f190:	bl	1ebe4 <__assert_fail@plt+0xd040>
   1f194:	ldr	r4, [sp]
   1f198:	add	sp, sp, #4
   1f19c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f1a0:	andeq	r3, r4, ip, asr #7
   1f1a4:	str	r4, [sp, #-8]!
   1f1a8:	str	lr, [sp, #4]
   1f1ac:	ldr	r3, [pc, #12]	; 1f1c0 <__assert_fail@plt+0xd61c>
   1f1b0:	bl	1ebe4 <__assert_fail@plt+0xd040>
   1f1b4:	ldr	r4, [sp]
   1f1b8:	add	sp, sp, #4
   1f1bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1f1c0:	andeq	r3, r4, ip, asr #7
   1f1c4:	str	r4, [sp, #-8]!
   1f1c8:	str	lr, [sp, #4]
   1f1cc:	mov	r1, r0
   1f1d0:	mov	r0, #0
   1f1d4:	bl	1f180 <__assert_fail@plt+0xd5dc>
   1f1d8:	ldr	r4, [sp]
   1f1dc:	add	sp, sp, #4
   1f1e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f1e4:	str	r4, [sp, #-8]!
   1f1e8:	str	lr, [sp, #4]
   1f1ec:	mov	r2, r1
   1f1f0:	mov	r1, r0
   1f1f4:	mov	r0, #0
   1f1f8:	bl	1f1a4 <__assert_fail@plt+0xd600>
   1f1fc:	ldr	r4, [sp]
   1f200:	add	sp, sp, #4
   1f204:	pop	{pc}		; (ldr pc, [sp], #4)
   1f208:	strd	r4, [sp, #-12]!
   1f20c:	str	lr, [sp, #8]
   1f210:	sub	sp, sp, #52	; 0x34
   1f214:	mov	r4, r0
   1f218:	mov	r5, r2
   1f21c:	mov	r0, sp
   1f220:	bl	1d358 <__assert_fail@plt+0xb7b4>
   1f224:	mov	r3, sp
   1f228:	mvn	r2, #0
   1f22c:	mov	r1, r5
   1f230:	mov	r0, r4
   1f234:	bl	1ebe4 <__assert_fail@plt+0xd040>
   1f238:	add	sp, sp, #52	; 0x34
   1f23c:	ldrd	r4, [sp]
   1f240:	add	sp, sp, #8
   1f244:	pop	{pc}		; (ldr pc, [sp], #4)
   1f248:	strd	r4, [sp, #-16]!
   1f24c:	str	r6, [sp, #8]
   1f250:	str	lr, [sp, #12]
   1f254:	sub	sp, sp, #48	; 0x30
   1f258:	mov	r4, r0
   1f25c:	mov	r5, r2
   1f260:	mov	r6, r3
   1f264:	mov	r0, sp
   1f268:	bl	1d358 <__assert_fail@plt+0xb7b4>
   1f26c:	mov	r3, sp
   1f270:	mov	r2, r6
   1f274:	mov	r1, r5
   1f278:	mov	r0, r4
   1f27c:	bl	1ebe4 <__assert_fail@plt+0xd040>
   1f280:	add	sp, sp, #48	; 0x30
   1f284:	ldrd	r4, [sp]
   1f288:	ldr	r6, [sp, #8]
   1f28c:	add	sp, sp, #12
   1f290:	pop	{pc}		; (ldr pc, [sp], #4)
   1f294:	str	r4, [sp, #-8]!
   1f298:	str	lr, [sp, #4]
   1f29c:	mov	r2, r1
   1f2a0:	mov	r1, r0
   1f2a4:	mov	r0, #0
   1f2a8:	bl	1f208 <__assert_fail@plt+0xd664>
   1f2ac:	ldr	r4, [sp]
   1f2b0:	add	sp, sp, #4
   1f2b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f2b8:	str	r4, [sp, #-8]!
   1f2bc:	str	lr, [sp, #4]
   1f2c0:	mov	r3, r2
   1f2c4:	mov	r2, r1
   1f2c8:	mov	r1, r0
   1f2cc:	mov	r0, #0
   1f2d0:	bl	1f248 <__assert_fail@plt+0xd6a4>
   1f2d4:	ldr	r4, [sp]
   1f2d8:	add	sp, sp, #4
   1f2dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1f2e0:	strd	r4, [sp, #-12]!
   1f2e4:	str	lr, [sp, #8]
   1f2e8:	sub	sp, sp, #52	; 0x34
   1f2ec:	mov	r4, r0
   1f2f0:	mov	r5, r1
   1f2f4:	mov	r1, r2
   1f2f8:	ldr	r0, [pc, #92]	; 1f35c <__assert_fail@plt+0xd7b8>
   1f2fc:	ldrd	r2, [r0]
   1f300:	strd	r2, [sp]
   1f304:	ldrd	r2, [r0, #8]
   1f308:	strd	r2, [sp, #8]
   1f30c:	ldrd	r2, [r0, #16]
   1f310:	strd	r2, [sp, #16]
   1f314:	ldrd	r2, [r0, #24]
   1f318:	strd	r2, [sp, #24]
   1f31c:	ldrd	r2, [r0, #32]
   1f320:	strd	r2, [sp, #32]
   1f324:	ldrd	r2, [r0, #40]	; 0x28
   1f328:	strd	r2, [sp, #40]	; 0x28
   1f32c:	mov	r2, #1
   1f330:	mov	r0, sp
   1f334:	bl	1ee58 <__assert_fail@plt+0xd2b4>
   1f338:	mov	r3, sp
   1f33c:	mov	r2, r5
   1f340:	mov	r1, r4
   1f344:	mov	r0, #0
   1f348:	bl	1ebe4 <__assert_fail@plt+0xd040>
   1f34c:	add	sp, sp, #52	; 0x34
   1f350:	ldrd	r4, [sp]
   1f354:	add	sp, sp, #8
   1f358:	pop	{pc}		; (ldr pc, [sp], #4)
   1f35c:	andeq	r3, r4, ip, asr #7
   1f360:	str	r4, [sp, #-8]!
   1f364:	str	lr, [sp, #4]
   1f368:	mov	r2, r1
   1f36c:	mvn	r1, #0
   1f370:	bl	1f2e0 <__assert_fail@plt+0xd73c>
   1f374:	ldr	r4, [sp]
   1f378:	add	sp, sp, #4
   1f37c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f380:	str	r4, [sp, #-8]!
   1f384:	str	lr, [sp, #4]
   1f388:	mov	r1, #58	; 0x3a
   1f38c:	bl	1f360 <__assert_fail@plt+0xd7bc>
   1f390:	ldr	r4, [sp]
   1f394:	add	sp, sp, #4
   1f398:	pop	{pc}		; (ldr pc, [sp], #4)
   1f39c:	str	r4, [sp, #-8]!
   1f3a0:	str	lr, [sp, #4]
   1f3a4:	mov	r2, #58	; 0x3a
   1f3a8:	bl	1f2e0 <__assert_fail@plt+0xd73c>
   1f3ac:	ldr	r4, [sp]
   1f3b0:	add	sp, sp, #4
   1f3b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f3b8:	strd	r4, [sp, #-12]!
   1f3bc:	str	lr, [sp, #8]
   1f3c0:	sub	sp, sp, #100	; 0x64
   1f3c4:	mov	r4, r0
   1f3c8:	mov	r5, r2
   1f3cc:	mov	r0, sp
   1f3d0:	bl	1d358 <__assert_fail@plt+0xb7b4>
   1f3d4:	ldrd	r2, [sp]
   1f3d8:	strd	r2, [sp, #48]	; 0x30
   1f3dc:	ldrd	r2, [sp, #8]
   1f3e0:	strd	r2, [sp, #56]	; 0x38
   1f3e4:	ldrd	r2, [sp, #16]
   1f3e8:	strd	r2, [sp, #64]	; 0x40
   1f3ec:	ldrd	r2, [sp, #24]
   1f3f0:	strd	r2, [sp, #72]	; 0x48
   1f3f4:	ldrd	r2, [sp, #32]
   1f3f8:	strd	r2, [sp, #80]	; 0x50
   1f3fc:	ldrd	r2, [sp, #40]	; 0x28
   1f400:	strd	r2, [sp, #88]	; 0x58
   1f404:	mov	r2, #1
   1f408:	mov	r1, #58	; 0x3a
   1f40c:	add	r0, sp, #48	; 0x30
   1f410:	bl	1ee58 <__assert_fail@plt+0xd2b4>
   1f414:	add	r3, sp, #48	; 0x30
   1f418:	mvn	r2, #0
   1f41c:	mov	r1, r5
   1f420:	mov	r0, r4
   1f424:	bl	1ebe4 <__assert_fail@plt+0xd040>
   1f428:	add	sp, sp, #100	; 0x64
   1f42c:	ldrd	r4, [sp]
   1f430:	add	sp, sp, #8
   1f434:	pop	{pc}		; (ldr pc, [sp], #4)
   1f438:	strd	r4, [sp, #-20]!	; 0xffffffec
   1f43c:	strd	r6, [sp, #8]
   1f440:	str	lr, [sp, #16]
   1f444:	sub	sp, sp, #52	; 0x34
   1f448:	mov	r4, r0
   1f44c:	mov	r5, r3
   1f450:	ldr	r3, [pc, #92]	; 1f4b4 <__assert_fail@plt+0xd910>
   1f454:	ldrd	r6, [r3]
   1f458:	strd	r6, [sp]
   1f45c:	ldrd	r6, [r3, #8]
   1f460:	strd	r6, [sp, #8]
   1f464:	ldrd	r6, [r3, #16]
   1f468:	strd	r6, [sp, #16]
   1f46c:	ldrd	r6, [r3, #24]
   1f470:	strd	r6, [sp, #24]
   1f474:	ldrd	r6, [r3, #32]
   1f478:	strd	r6, [sp, #32]
   1f47c:	ldrd	r6, [r3, #40]	; 0x28
   1f480:	strd	r6, [sp, #40]	; 0x28
   1f484:	mov	r0, sp
   1f488:	bl	1eeb4 <__assert_fail@plt+0xd310>
   1f48c:	mov	r3, sp
   1f490:	ldr	r2, [sp, #72]	; 0x48
   1f494:	mov	r1, r5
   1f498:	mov	r0, r4
   1f49c:	bl	1ebe4 <__assert_fail@plt+0xd040>
   1f4a0:	add	sp, sp, #52	; 0x34
   1f4a4:	ldrd	r4, [sp]
   1f4a8:	ldrd	r6, [sp, #8]
   1f4ac:	add	sp, sp, #16
   1f4b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f4b4:	andeq	r3, r4, ip, asr #7
   1f4b8:	push	{lr}		; (str lr, [sp, #-4]!)
   1f4bc:	sub	sp, sp, #12
   1f4c0:	mvn	ip, #0
   1f4c4:	str	ip, [sp]
   1f4c8:	bl	1f438 <__assert_fail@plt+0xd894>
   1f4cc:	add	sp, sp, #12
   1f4d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f4d4:	str	r4, [sp, #-8]!
   1f4d8:	str	lr, [sp, #4]
   1f4dc:	mov	r3, r2
   1f4e0:	mov	r2, r1
   1f4e4:	mov	r1, r0
   1f4e8:	mov	r0, #0
   1f4ec:	bl	1f4b8 <__assert_fail@plt+0xd914>
   1f4f0:	ldr	r4, [sp]
   1f4f4:	add	sp, sp, #4
   1f4f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1f4fc:	push	{lr}		; (str lr, [sp, #-4]!)
   1f500:	sub	sp, sp, #12
   1f504:	str	r3, [sp]
   1f508:	mov	r3, r2
   1f50c:	mov	r2, r1
   1f510:	mov	r1, r0
   1f514:	mov	r0, #0
   1f518:	bl	1f438 <__assert_fail@plt+0xd894>
   1f51c:	add	sp, sp, #12
   1f520:	pop	{pc}		; (ldr pc, [sp], #4)
   1f524:	str	r4, [sp, #-8]!
   1f528:	str	lr, [sp, #4]
   1f52c:	ldr	r3, [pc, #12]	; 1f540 <__assert_fail@plt+0xd99c>
   1f530:	bl	1ebe4 <__assert_fail@plt+0xd040>
   1f534:	ldr	r4, [sp]
   1f538:	add	sp, sp, #4
   1f53c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f540:	andeq	r3, r4, ip, ror #3
   1f544:	str	r4, [sp, #-8]!
   1f548:	str	lr, [sp, #4]
   1f54c:	mov	r2, r1
   1f550:	mov	r1, r0
   1f554:	mov	r0, #0
   1f558:	bl	1f524 <__assert_fail@plt+0xd980>
   1f55c:	ldr	r4, [sp]
   1f560:	add	sp, sp, #4
   1f564:	pop	{pc}		; (ldr pc, [sp], #4)
   1f568:	str	r4, [sp, #-8]!
   1f56c:	str	lr, [sp, #4]
   1f570:	mvn	r2, #0
   1f574:	bl	1f524 <__assert_fail@plt+0xd980>
   1f578:	ldr	r4, [sp]
   1f57c:	add	sp, sp, #4
   1f580:	pop	{pc}		; (ldr pc, [sp], #4)
   1f584:	str	r4, [sp, #-8]!
   1f588:	str	lr, [sp, #4]
   1f58c:	mov	r1, r0
   1f590:	mov	r0, #0
   1f594:	bl	1f568 <__assert_fail@plt+0xd9c4>
   1f598:	ldr	r4, [sp]
   1f59c:	add	sp, sp, #4
   1f5a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f5a4:	mov	r2, r0
   1f5a8:	ldr	r0, [r0, #80]	; 0x50
   1f5ac:	cmp	r0, #1
   1f5b0:	beq	1f5fc <__assert_fail@plt+0xda58>
   1f5b4:	add	r0, r1, #1
   1f5b8:	ldr	r3, [r2, #28]
   1f5bc:	cmp	r0, r3
   1f5c0:	bge	1f604 <__assert_fail@plt+0xda60>
   1f5c4:	ldr	ip, [r2, #8]
   1f5c8:	add	r2, ip, r0, lsl #2
   1f5cc:	ldr	r0, [ip, r0, lsl #2]
   1f5d0:	cmn	r0, #1
   1f5d4:	bne	1f60c <__assert_fail@plt+0xda68>
   1f5d8:	sub	r0, r3, r1
   1f5dc:	mov	r3, #1
   1f5e0:	add	r3, r3, #1
   1f5e4:	cmp	r3, r0
   1f5e8:	beq	1f600 <__assert_fail@plt+0xda5c>
   1f5ec:	ldr	r1, [r2, #4]!
   1f5f0:	cmn	r1, #1
   1f5f4:	beq	1f5e0 <__assert_fail@plt+0xda3c>
   1f5f8:	mov	r0, r3
   1f5fc:	bx	lr
   1f600:	bx	lr
   1f604:	mov	r0, #1
   1f608:	bx	lr
   1f60c:	mov	r0, #1
   1f610:	bx	lr
   1f614:	ldr	r3, [r0, #80]	; 0x50
   1f618:	cmp	r3, #1
   1f61c:	ldreq	r3, [r0, #4]
   1f620:	ldrbeq	r0, [r3, r1]
   1f624:	ldrne	r3, [r0, #8]
   1f628:	ldrne	r0, [r3, r1, lsl #2]
   1f62c:	bx	lr
   1f630:	ldr	ip, [r0, #36]	; 0x24
   1f634:	ldr	r3, [r0, #48]	; 0x30
   1f638:	cmp	ip, r3
   1f63c:	movge	ip, r3
   1f640:	ldr	r3, [r0, #28]
   1f644:	cmp	ip, r3
   1f648:	ble	1f684 <__assert_fail@plt+0xdae0>
   1f64c:	ldr	r2, [r0]
   1f650:	ldr	r1, [r0, #24]
   1f654:	add	r2, r2, r3
   1f658:	ldrb	r2, [r2, r1]
   1f65c:	ldr	r1, [r0, #64]	; 0x40
   1f660:	ldrb	r1, [r1, r2]
   1f664:	ldr	r2, [r0, #4]
   1f668:	strb	r1, [r2, r3]
   1f66c:	add	r3, r3, #1
   1f670:	cmp	ip, r3
   1f674:	bne	1f64c <__assert_fail@plt+0xdaa8>
   1f678:	str	ip, [r0, #28]
   1f67c:	str	ip, [r0, #32]
   1f680:	bx	lr
   1f684:	mov	ip, r3
   1f688:	b	1f678 <__assert_fail@plt+0xdad4>
   1f68c:	push	{lr}		; (str lr, [sp, #-4]!)
   1f690:	mov	ip, r0
   1f694:	mov	lr, r1
   1f698:	clz	r1, r1
   1f69c:	lsr	r1, r1, #5
   1f6a0:	cmp	r0, #0
   1f6a4:	movne	r0, r1
   1f6a8:	moveq	r0, #1
   1f6ac:	cmp	r0, #0
   1f6b0:	movne	r0, #0
   1f6b4:	bne	1f6f0 <__assert_fail@plt+0xdb4c>
   1f6b8:	ldr	r3, [ip, #4]
   1f6bc:	ldr	r2, [lr, #4]
   1f6c0:	cmp	r3, r2
   1f6c4:	bne	1f6f0 <__assert_fail@plt+0xdb4c>
   1f6c8:	subs	r3, r3, #1
   1f6cc:	bmi	1f6ec <__assert_fail@plt+0xdb48>
   1f6d0:	ldr	r1, [ip, #8]
   1f6d4:	ldr	r2, [lr, #8]
   1f6d8:	ldr	r1, [r1, r3, lsl #2]
   1f6dc:	ldr	r2, [r2, r3, lsl #2]
   1f6e0:	cmp	r1, r2
   1f6e4:	beq	1f6c8 <__assert_fail@plt+0xdb24>
   1f6e8:	b	1f6f0 <__assert_fail@plt+0xdb4c>
   1f6ec:	mov	r0, #1
   1f6f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f6f4:	str	r4, [sp, #-8]!
   1f6f8:	str	lr, [sp, #4]
   1f6fc:	ldr	lr, [r0, #4]
   1f700:	cmp	lr, #0
   1f704:	movle	r0, #0
   1f708:	ble	1f780 <__assert_fail@plt+0xdbdc>
   1f70c:	sub	lr, lr, #1
   1f710:	mov	ip, #0
   1f714:	cmp	lr, ip
   1f718:	bls	1f76c <__assert_fail@plt+0xdbc8>
   1f71c:	add	r2, lr, ip
   1f720:	lsr	r2, r2, #1
   1f724:	ldr	r4, [r0, #8]
   1f728:	ldr	r3, [r4, r2, lsl #2]
   1f72c:	cmp	r1, r3
   1f730:	bgt	1f758 <__assert_fail@plt+0xdbb4>
   1f734:	cmp	ip, r2
   1f738:	bcs	1f76c <__assert_fail@plt+0xdbc8>
   1f73c:	add	r3, ip, r2
   1f740:	lsr	r3, r3, #1
   1f744:	ldr	lr, [r4, r3, lsl #2]
   1f748:	cmp	lr, r1
   1f74c:	blt	1f760 <__assert_fail@plt+0xdbbc>
   1f750:	mov	r2, r3
   1f754:	b	1f734 <__assert_fail@plt+0xdb90>
   1f758:	mov	r3, r2
   1f75c:	mov	r2, lr
   1f760:	add	ip, r3, #1
   1f764:	mov	lr, r2
   1f768:	b	1f714 <__assert_fail@plt+0xdb70>
   1f76c:	ldr	r3, [r0, #8]
   1f770:	ldr	r3, [r3, ip, lsl #2]
   1f774:	cmp	r3, r1
   1f778:	addeq	r0, ip, #1
   1f77c:	movne	r0, #0
   1f780:	ldr	r4, [sp]
   1f784:	add	sp, sp, #4
   1f788:	pop	{pc}		; (ldr pc, [sp], #4)
   1f78c:	cmp	r1, #0
   1f790:	blt	1f7d8 <__assert_fail@plt+0xdc34>
   1f794:	ldr	r3, [r0, #4]
   1f798:	cmp	r3, r1
   1f79c:	ble	1f7d8 <__assert_fail@plt+0xdc34>
   1f7a0:	sub	r3, r3, #1
   1f7a4:	str	r3, [r0, #4]
   1f7a8:	cmp	r3, r1
   1f7ac:	ble	1f7d8 <__assert_fail@plt+0xdc34>
   1f7b0:	add	r3, r1, #1
   1f7b4:	lsl	r3, r3, #2
   1f7b8:	ldr	r2, [r0, #8]
   1f7bc:	ldr	ip, [r2, r3]
   1f7c0:	str	ip, [r2, r1, lsl #2]
   1f7c4:	add	r1, r1, #1
   1f7c8:	add	r3, r3, #4
   1f7cc:	ldr	r2, [r0, #4]
   1f7d0:	cmp	r2, r1
   1f7d4:	bgt	1f7b8 <__assert_fail@plt+0xdc14>
   1f7d8:	bx	lr
   1f7dc:	strd	r4, [sp, #-16]!
   1f7e0:	str	r6, [sp, #8]
   1f7e4:	str	lr, [sp, #12]
   1f7e8:	mov	r4, r0
   1f7ec:	mov	r6, r1
   1f7f0:	mov	r5, r2
   1f7f4:	b	1f7fc <__assert_fail@plt+0xdc58>
   1f7f8:	mov	r4, r3
   1f7fc:	ldr	r3, [r4, #4]
   1f800:	cmp	r3, #0
   1f804:	bne	1f7f8 <__assert_fail@plt+0xdc54>
   1f808:	ldr	r3, [r4, #8]
   1f80c:	cmp	r3, #0
   1f810:	bne	1f7f8 <__assert_fail@plt+0xdc54>
   1f814:	mov	r1, r4
   1f818:	mov	r0, r5
   1f81c:	blx	r6
   1f820:	cmp	r0, #0
   1f824:	bne	1f860 <__assert_fail@plt+0xdcbc>
   1f828:	ldr	r2, [r4]
   1f82c:	cmp	r2, #0
   1f830:	beq	1f860 <__assert_fail@plt+0xdcbc>
   1f834:	ldr	r3, [r2, #8]
   1f838:	cmp	r3, r4
   1f83c:	movne	r4, #0
   1f840:	moveq	r4, #1
   1f844:	cmp	r3, #0
   1f848:	movne	r1, r4
   1f84c:	moveq	r1, #1
   1f850:	mov	r4, r2
   1f854:	cmp	r1, #0
   1f858:	bne	1f814 <__assert_fail@plt+0xdc70>
   1f85c:	b	1f7f8 <__assert_fail@plt+0xdc54>
   1f860:	ldrd	r4, [sp]
   1f864:	ldr	r6, [sp, #8]
   1f868:	add	sp, sp, #12
   1f86c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f870:	strd	r4, [sp, #-16]!
   1f874:	str	r6, [sp, #8]
   1f878:	str	lr, [sp, #12]
   1f87c:	mov	r4, r0
   1f880:	mov	r6, r1
   1f884:	mov	r5, r2
   1f888:	b	1f894 <__assert_fail@plt+0xdcf0>
   1f88c:	mov	r3, r2
   1f890:	mov	r4, r3
   1f894:	mov	r1, r4
   1f898:	mov	r0, r5
   1f89c:	blx	r6
   1f8a0:	cmp	r0, #0
   1f8a4:	bne	1f8dc <__assert_fail@plt+0xdd38>
   1f8a8:	ldr	r3, [r4, #4]
   1f8ac:	cmp	r3, #0
   1f8b0:	bne	1f890 <__assert_fail@plt+0xdcec>
   1f8b4:	ldr	r2, [r4, #8]
   1f8b8:	cmp	r2, #0
   1f8bc:	cmpne	r2, r3
   1f8c0:	bne	1f88c <__assert_fail@plt+0xdce8>
   1f8c4:	ldr	r2, [r4]
   1f8c8:	mov	r3, r4
   1f8cc:	cmp	r2, #0
   1f8d0:	beq	1f8dc <__assert_fail@plt+0xdd38>
   1f8d4:	mov	r4, r2
   1f8d8:	b	1f8b4 <__assert_fail@plt+0xdd10>
   1f8dc:	ldrd	r4, [sp]
   1f8e0:	ldr	r6, [sp, #8]
   1f8e4:	add	sp, sp, #12
   1f8e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1f8ec:	ldrb	r3, [r1, #24]
   1f8f0:	cmp	r3, #4
   1f8f4:	beq	1f908 <__assert_fail@plt+0xdd64>
   1f8f8:	cmp	r3, #17
   1f8fc:	beq	1f934 <__assert_fail@plt+0xdd90>
   1f900:	mov	r0, #0
   1f904:	bx	lr
   1f908:	ldr	r3, [r0, #132]	; 0x84
   1f90c:	cmp	r3, #0
   1f910:	beq	1f900 <__assert_fail@plt+0xdd5c>
   1f914:	ldr	r2, [r1, #20]
   1f918:	ldr	r2, [r3, r2, lsl #2]
   1f91c:	str	r2, [r1, #20]
   1f920:	ldr	r3, [r0, #80]	; 0x50
   1f924:	mov	r1, #1
   1f928:	orr	r3, r3, r1, lsl r2
   1f92c:	str	r3, [r0, #80]	; 0x50
   1f930:	b	1f900 <__assert_fail@plt+0xdd5c>
   1f934:	ldr	r3, [r1, #4]
   1f938:	cmp	r3, #0
   1f93c:	beq	1f900 <__assert_fail@plt+0xdd5c>
   1f940:	ldrb	r2, [r3, #24]
   1f944:	cmp	r2, #17
   1f948:	bne	1f900 <__assert_fail@plt+0xdd5c>
   1f94c:	ldr	r2, [r3, #20]
   1f950:	ldr	r3, [r3, #4]
   1f954:	str	r3, [r1, #4]
   1f958:	cmp	r3, #0
   1f95c:	strne	r1, [r3]
   1f960:	ldr	r3, [r0, #132]	; 0x84
   1f964:	ldr	r1, [r1, #20]
   1f968:	ldr	r1, [r3, r1, lsl #2]
   1f96c:	str	r1, [r3, r2, lsl #2]
   1f970:	cmp	r2, #31
   1f974:	bgt	1f900 <__assert_fail@plt+0xdd5c>
   1f978:	ldr	r3, [r0, #80]	; 0x50
   1f97c:	mov	r1, #1
   1f980:	bic	r2, r3, r1, lsl r2
   1f984:	str	r2, [r0, #80]	; 0x50
   1f988:	b	1f900 <__assert_fail@plt+0xdd5c>
   1f98c:	ldrb	r3, [r1, #24]
   1f990:	cmp	r3, #11
   1f994:	beq	1f9c4 <__assert_fail@plt+0xde20>
   1f998:	cmp	r3, #16
   1f99c:	beq	1f9d4 <__assert_fail@plt+0xde30>
   1f9a0:	ldr	r3, [r1, #4]
   1f9a4:	cmp	r3, #0
   1f9a8:	ldrne	r2, [r1, #16]
   1f9ac:	strne	r2, [r3, #16]
   1f9b0:	ldr	r3, [r1, #8]
   1f9b4:	cmp	r3, #0
   1f9b8:	ldrne	r2, [r1, #16]
   1f9bc:	strne	r2, [r3, #16]
   1f9c0:	b	1f9cc <__assert_fail@plt+0xde28>
   1f9c4:	ldr	r3, [r1, #4]
   1f9c8:	str	r1, [r3, #16]
   1f9cc:	mov	r0, #0
   1f9d0:	bx	lr
   1f9d4:	ldr	r3, [r1, #4]
   1f9d8:	ldr	r2, [r1, #8]
   1f9dc:	ldr	r2, [r2, #12]
   1f9e0:	str	r2, [r3, #16]
   1f9e4:	ldr	r3, [r1, #8]
   1f9e8:	ldr	r2, [r1, #16]
   1f9ec:	str	r2, [r3, #16]
   1f9f0:	b	1f9cc <__assert_fail@plt+0xde28>
   1f9f4:	ldr	r3, [r1, #40]	; 0x28
   1f9f8:	ldr	ip, [r1, #56]	; 0x38
   1f9fc:	cmp	ip, r3
   1fa00:	ble	1fa7c <__assert_fail@plt+0xded8>
   1fa04:	push	{lr}		; (str lr, [sp, #-4]!)
   1fa08:	ldr	ip, [r1, #4]
   1fa0c:	ldrb	r3, [ip, r3]
   1fa10:	strb	r3, [r0]
   1fa14:	ldr	ip, [r1, #80]	; 0x50
   1fa18:	cmp	ip, #1
   1fa1c:	ble	1fa4c <__assert_fail@plt+0xdea8>
   1fa20:	ldr	ip, [r1, #40]	; 0x28
   1fa24:	ldr	lr, [r1, #28]
   1fa28:	cmp	ip, lr
   1fa2c:	beq	1fa4c <__assert_fail@plt+0xdea8>
   1fa30:	ldr	lr, [r1, #8]
   1fa34:	ldr	ip, [lr, ip, lsl #2]
   1fa38:	cmn	ip, #1
   1fa3c:	moveq	r3, #1
   1fa40:	strbeq	r3, [r0, #4]
   1fa44:	moveq	r0, r3
   1fa48:	beq	1fb74 <__assert_fail@plt+0xdfd0>
   1fa4c:	cmp	r3, #92	; 0x5c
   1fa50:	beq	1fa8c <__assert_fail@plt+0xdee8>
   1fa54:	cmp	r3, #91	; 0x5b
   1fa58:	beq	1fad8 <__assert_fail@plt+0xdf34>
   1fa5c:	cmp	r3, #93	; 0x5d
   1fa60:	beq	1fb78 <__assert_fail@plt+0xdfd4>
   1fa64:	cmp	r3, #94	; 0x5e
   1fa68:	bne	1fb60 <__assert_fail@plt+0xdfbc>
   1fa6c:	mov	r3, #25
   1fa70:	strb	r3, [r0, #4]
   1fa74:	mov	r0, #1
   1fa78:	b	1fb74 <__assert_fail@plt+0xdfd0>
   1fa7c:	mov	r3, #2
   1fa80:	strb	r3, [r0, #4]
   1fa84:	mov	r0, #0
   1fa88:	bx	lr
   1fa8c:	tst	r2, #1
   1fa90:	beq	1faa8 <__assert_fail@plt+0xdf04>
   1fa94:	ldr	r3, [r1, #40]	; 0x28
   1fa98:	add	r3, r3, #1
   1fa9c:	ldr	r2, [r1, #48]	; 0x30
   1faa0:	cmp	r3, r2
   1faa4:	blt	1fab8 <__assert_fail@plt+0xdf14>
   1faa8:	mov	r3, #1
   1faac:	strb	r3, [r0, #4]
   1fab0:	mov	r0, r3
   1fab4:	b	1fb74 <__assert_fail@plt+0xdfd0>
   1fab8:	str	r3, [r1, #40]	; 0x28
   1fabc:	ldr	r2, [r1, #4]
   1fac0:	ldrb	r3, [r2, r3]
   1fac4:	strb	r3, [r0]
   1fac8:	mov	r3, #1
   1facc:	strb	r3, [r0, #4]
   1fad0:	mov	r0, r3
   1fad4:	b	1fb74 <__assert_fail@plt+0xdfd0>
   1fad8:	ldr	r3, [r1, #40]	; 0x28
   1fadc:	add	lr, r3, #1
   1fae0:	ldr	ip, [r1, #48]	; 0x30
   1fae4:	cmp	lr, ip
   1fae8:	bge	1fb20 <__assert_fail@plt+0xdf7c>
   1faec:	ldr	r1, [r1, #4]
   1faf0:	add	r3, r1, r3
   1faf4:	ldrb	r3, [r3, #1]
   1faf8:	strb	r3, [r0]
   1fafc:	cmp	r3, #58	; 0x3a
   1fb00:	beq	1fb48 <__assert_fail@plt+0xdfa4>
   1fb04:	cmp	r3, #61	; 0x3d
   1fb08:	beq	1fb38 <__assert_fail@plt+0xdf94>
   1fb0c:	cmp	r3, #46	; 0x2e
   1fb10:	moveq	r3, #26
   1fb14:	strbeq	r3, [r0, #4]
   1fb18:	moveq	r0, #2
   1fb1c:	beq	1fb74 <__assert_fail@plt+0xdfd0>
   1fb20:	mov	r3, #1
   1fb24:	strb	r3, [r0, #4]
   1fb28:	mov	r2, #91	; 0x5b
   1fb2c:	strb	r2, [r0]
   1fb30:	mov	r0, r3
   1fb34:	b	1fb74 <__assert_fail@plt+0xdfd0>
   1fb38:	mov	r3, #28
   1fb3c:	strb	r3, [r0, #4]
   1fb40:	mov	r0, #2
   1fb44:	b	1fb74 <__assert_fail@plt+0xdfd0>
   1fb48:	tst	r2, #4
   1fb4c:	beq	1fb20 <__assert_fail@plt+0xdf7c>
   1fb50:	mov	r3, #30
   1fb54:	strb	r3, [r0, #4]
   1fb58:	mov	r0, #2
   1fb5c:	b	1fb74 <__assert_fail@plt+0xdfd0>
   1fb60:	cmp	r3, #45	; 0x2d
   1fb64:	bne	1faa8 <__assert_fail@plt+0xdf04>
   1fb68:	mov	r3, #22
   1fb6c:	strb	r3, [r0, #4]
   1fb70:	mov	r0, #1
   1fb74:	pop	{pc}		; (ldr pc, [sp], #4)
   1fb78:	mov	r3, #21
   1fb7c:	strb	r3, [r0, #4]
   1fb80:	mov	r0, #1
   1fb84:	b	1fb74 <__assert_fail@plt+0xdfd0>
   1fb88:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1fb8c:	strd	r6, [sp, #8]
   1fb90:	strd	r8, [sp, #16]
   1fb94:	str	sl, [sp, #24]
   1fb98:	str	lr, [sp, #28]
   1fb9c:	sub	sp, sp, #8
   1fba0:	mov	r6, r0
   1fba4:	mov	r4, r1
   1fba8:	mov	r8, r2
   1fbac:	mov	r9, r3
   1fbb0:	ldr	r5, [r1, #40]	; 0x28
   1fbb4:	mov	r1, r5
   1fbb8:	mov	r0, r4
   1fbbc:	bl	1f5a4 <__assert_fail@plt+0xda00>
   1fbc0:	cmp	r0, #1
   1fbc4:	bgt	1fc10 <__assert_fail@plt+0xe06c>
   1fbc8:	add	r5, r5, r9
   1fbcc:	str	r5, [r4, #40]	; 0x28
   1fbd0:	ldrb	r3, [r8, #4]
   1fbd4:	and	r2, r3, #251	; 0xfb
   1fbd8:	cmp	r3, #28
   1fbdc:	cmpne	r2, #26
   1fbe0:	beq	1fc58 <__assert_fail@plt+0xe0b4>
   1fbe4:	ldrb	r2, [sp, #48]	; 0x30
   1fbe8:	cmp	r3, #22
   1fbec:	moveq	r3, r2
   1fbf0:	orrne	r3, r2, #1
   1fbf4:	cmp	r3, #0
   1fbf8:	beq	1fe00 <__assert_fail@plt+0xe25c>
   1fbfc:	mov	r0, #0
   1fc00:	str	r0, [r6]
   1fc04:	ldrb	r3, [r8]
   1fc08:	strb	r3, [r6, #4]
   1fc0c:	b	1fc3c <__assert_fail@plt+0xe098>
   1fc10:	mov	r7, r0
   1fc14:	mov	r3, #1
   1fc18:	str	r3, [r6]
   1fc1c:	ldr	r1, [r4, #40]	; 0x28
   1fc20:	mov	r0, r4
   1fc24:	bl	1f614 <__assert_fail@plt+0xda70>
   1fc28:	str	r0, [r6, #4]
   1fc2c:	ldr	r3, [r4, #40]	; 0x28
   1fc30:	add	r7, r3, r7
   1fc34:	str	r7, [r4, #40]	; 0x28
   1fc38:	mov	r0, #0
   1fc3c:	add	sp, sp, #8
   1fc40:	ldrd	r4, [sp]
   1fc44:	ldrd	r6, [sp, #8]
   1fc48:	ldrd	r8, [sp, #16]
   1fc4c:	ldr	sl, [sp, #24]
   1fc50:	add	sp, sp, #28
   1fc54:	pop	{pc}		; (ldr pc, [sp], #4)
   1fc58:	ldr	r3, [r4, #56]	; 0x38
   1fc5c:	cmp	r5, r3
   1fc60:	movge	r0, #7
   1fc64:	bge	1fc3c <__assert_fail@plt+0xe098>
   1fc68:	ldrb	r9, [r8]
   1fc6c:	mov	r5, #0
   1fc70:	b	1fd58 <__assert_fail@plt+0xe1b4>
   1fc74:	ldrb	r3, [r4, #75]	; 0x4b
   1fc78:	cmp	r3, #0
   1fc7c:	bne	1fc98 <__assert_fail@plt+0xe0f4>
   1fc80:	ldr	r2, [r4, #4]
   1fc84:	ldr	r3, [r4, #40]	; 0x28
   1fc88:	add	r1, r3, #1
   1fc8c:	str	r1, [r4, #40]	; 0x28
   1fc90:	ldrb	r7, [r2, r3]
   1fc94:	b	1fd78 <__assert_fail@plt+0xe1d4>
   1fc98:	ldrb	r3, [r4, #76]	; 0x4c
   1fc9c:	cmp	r3, #0
   1fca0:	beq	1fd24 <__assert_fail@plt+0xe180>
   1fca4:	ldr	sl, [r4, #40]	; 0x28
   1fca8:	ldr	r3, [r4, #28]
   1fcac:	cmp	sl, r3
   1fcb0:	beq	1fcc4 <__assert_fail@plt+0xe120>
   1fcb4:	ldr	r3, [r4, #8]
   1fcb8:	ldr	r3, [r3, sl, lsl #2]
   1fcbc:	cmn	r3, #1
   1fcc0:	beq	1fcf8 <__assert_fail@plt+0xe154>
   1fcc4:	ldr	r2, [r4, #12]
   1fcc8:	ldr	r3, [r4]
   1fccc:	ldr	r1, [r2, sl, lsl #2]
   1fcd0:	ldr	r2, [r4, #24]
   1fcd4:	add	r3, r3, r1
   1fcd8:	ldrb	r7, [r3, r2]
   1fcdc:	bics	r3, r7, #127	; 0x7f
   1fce0:	beq	1fd0c <__assert_fail@plt+0xe168>
   1fce4:	ldr	r3, [r4, #4]
   1fce8:	add	r2, sl, #1
   1fcec:	str	r2, [r4, #40]	; 0x28
   1fcf0:	ldrb	r7, [r3, sl]
   1fcf4:	b	1fd78 <__assert_fail@plt+0xe1d4>
   1fcf8:	ldr	r3, [r4, #4]
   1fcfc:	add	r2, sl, #1
   1fd00:	str	r2, [r4, #40]	; 0x28
   1fd04:	ldrb	r7, [r3, sl]
   1fd08:	b	1fd78 <__assert_fail@plt+0xe1d4>
   1fd0c:	mov	r1, sl
   1fd10:	mov	r0, r4
   1fd14:	bl	1f5a4 <__assert_fail@plt+0xda00>
   1fd18:	add	r0, sl, r0
   1fd1c:	str	r0, [r4, #40]	; 0x28
   1fd20:	b	1fd78 <__assert_fail@plt+0xe1d4>
   1fd24:	ldr	r3, [r4]
   1fd28:	ldr	r1, [r4, #24]
   1fd2c:	ldr	r2, [r4, #40]	; 0x28
   1fd30:	add	r0, r2, #1
   1fd34:	str	r0, [r4, #40]	; 0x28
   1fd38:	add	r3, r3, r1
   1fd3c:	ldrb	r7, [r3, r2]
   1fd40:	b	1fd78 <__assert_fail@plt+0xe1d4>
   1fd44:	ldr	r3, [r6, #4]
   1fd48:	strb	r7, [r3, r5]
   1fd4c:	add	r5, r5, #1
   1fd50:	cmp	r5, #32
   1fd54:	beq	1fe2c <__assert_fail@plt+0xe288>
   1fd58:	ldrb	r3, [r8, #4]
   1fd5c:	cmp	r3, #30
   1fd60:	beq	1fc74 <__assert_fail@plt+0xe0d0>
   1fd64:	ldr	r2, [r4, #4]
   1fd68:	ldr	r3, [r4, #40]	; 0x28
   1fd6c:	add	r1, r3, #1
   1fd70:	str	r1, [r4, #40]	; 0x28
   1fd74:	ldrb	r7, [r2, r3]
   1fd78:	ldr	r3, [r4, #40]	; 0x28
   1fd7c:	ldr	r2, [r4, #56]	; 0x38
   1fd80:	cmp	r2, r3
   1fd84:	ble	1fe24 <__assert_fail@plt+0xe280>
   1fd88:	cmp	r9, r7
   1fd8c:	bne	1fd44 <__assert_fail@plt+0xe1a0>
   1fd90:	ldr	r2, [r4, #4]
   1fd94:	ldrb	r2, [r2, r3]
   1fd98:	cmp	r2, #93	; 0x5d
   1fd9c:	bne	1fd44 <__assert_fail@plt+0xe1a0>
   1fda0:	add	r3, r3, #1
   1fda4:	str	r3, [r4, #40]	; 0x28
   1fda8:	ldr	r3, [r6, #4]
   1fdac:	mov	r2, #0
   1fdb0:	strb	r2, [r3, r5]
   1fdb4:	ldrb	r3, [r8, #4]
   1fdb8:	cmp	r3, #28
   1fdbc:	beq	1fde0 <__assert_fail@plt+0xe23c>
   1fdc0:	cmp	r3, #30
   1fdc4:	beq	1fdf0 <__assert_fail@plt+0xe24c>
   1fdc8:	cmp	r3, #26
   1fdcc:	moveq	r3, #3
   1fdd0:	streq	r3, [r6]
   1fdd4:	moveq	r0, r2
   1fdd8:	movne	r0, #0
   1fddc:	b	1fc3c <__assert_fail@plt+0xe098>
   1fde0:	mov	r3, #2
   1fde4:	str	r3, [r6]
   1fde8:	mov	r0, #0
   1fdec:	b	1fc3c <__assert_fail@plt+0xe098>
   1fdf0:	mov	r3, #4
   1fdf4:	str	r3, [r6]
   1fdf8:	mov	r0, #0
   1fdfc:	b	1fc3c <__assert_fail@plt+0xe098>
   1fe00:	ldr	r2, [sp, #44]	; 0x2c
   1fe04:	mov	r1, r4
   1fe08:	mov	r0, sp
   1fe0c:	bl	1f9f4 <__assert_fail@plt+0xde50>
   1fe10:	ldrb	r3, [sp, #4]
   1fe14:	cmp	r3, #21
   1fe18:	movne	r0, #11
   1fe1c:	beq	1fbfc <__assert_fail@plt+0xe058>
   1fe20:	b	1fc3c <__assert_fail@plt+0xe098>
   1fe24:	mov	r0, #7
   1fe28:	b	1fc3c <__assert_fail@plt+0xe098>
   1fe2c:	mov	r0, #7
   1fe30:	b	1fc3c <__assert_fail@plt+0xe098>
   1fe34:	ldrb	r3, [r1, #24]
   1fe38:	cmp	r3, #17
   1fe3c:	beq	1fe48 <__assert_fail@plt+0xe2a4>
   1fe40:	mov	r0, #0
   1fe44:	bx	lr
   1fe48:	ldr	r3, [r1, #20]
   1fe4c:	cmp	r0, r3
   1fe50:	bne	1fe40 <__assert_fail@plt+0xe29c>
   1fe54:	ldrb	r3, [r1, #26]
   1fe58:	orr	r3, r3, #8
   1fe5c:	strb	r3, [r1, #26]
   1fe60:	b	1fe40 <__assert_fail@plt+0xe29c>
   1fe64:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1fe68:	strd	r6, [sp, #8]
   1fe6c:	strd	r8, [sp, #16]
   1fe70:	strd	sl, [sp, #24]
   1fe74:	str	lr, [sp, #32]
   1fe78:	sub	sp, sp, #52	; 0x34
   1fe7c:	str	r0, [sp, #12]
   1fe80:	mov	fp, r1
   1fe84:	mov	sl, r2
   1fe88:	str	r3, [sp, #32]
   1fe8c:	ldr	r8, [r0, #84]	; 0x54
   1fe90:	add	r3, r3, r3, lsl #1
   1fe94:	ldr	r7, [r8, #24]
   1fe98:	add	r7, r7, r3, lsl #2
   1fe9c:	ldr	r3, [r7, #4]
   1fea0:	cmp	r3, #0
   1fea4:	ble	20040 <__assert_fail@plt+0xe49c>
   1fea8:	mov	r3, #1
   1feac:	lsl	r3, r3, sl
   1feb0:	str	r3, [sp, #20]
   1feb4:	mvn	r3, r3
   1feb8:	str	r3, [sp, #24]
   1febc:	mov	r4, #0
   1fec0:	ldr	r3, [sp, #88]	; 0x58
   1fec4:	add	r3, r3, #1
   1fec8:	add	r3, r3, r3, lsl #1
   1fecc:	str	r3, [sp, #36]	; 0x24
   1fed0:	b	1ffb0 <__assert_fail@plt+0xe40c>
   1fed4:	ldr	r3, [r8, #20]
   1fed8:	add	r3, r3, r4
   1fedc:	ldr	r3, [r3, #8]
   1fee0:	ldr	r3, [r3]
   1fee4:	cmp	r7, r3
   1fee8:	beq	1ff70 <__assert_fail@plt+0xe3cc>
   1feec:	str	fp, [sp]
   1fef0:	mov	r2, sl
   1fef4:	ldr	r1, [sp, #16]
   1fef8:	ldr	r0, [sp, #12]
   1fefc:	bl	1fe64 <__assert_fail@plt+0xe2c0>
   1ff00:	cmn	r0, #1
   1ff04:	beq	20044 <__assert_fail@plt+0xe4a0>
   1ff08:	cmp	r0, #0
   1ff0c:	bne	1ff1c <__assert_fail@plt+0xe378>
   1ff10:	ldr	r3, [sp, #28]
   1ff14:	cmp	r3, #0
   1ff18:	bne	20044 <__assert_fail@plt+0xe4a0>
   1ff1c:	cmp	sl, #31
   1ff20:	bgt	1ff34 <__assert_fail@plt+0xe390>
   1ff24:	ldr	r3, [r9, #-8]
   1ff28:	ldr	r2, [sp, #24]
   1ff2c:	and	r3, r3, r2
   1ff30:	str	r3, [r9, #-8]
   1ff34:	add	r5, r5, #24
   1ff38:	ldrb	r3, [r5, #-28]	; 0xffffffe4
   1ff3c:	cmp	r3, #0
   1ff40:	beq	1ff7c <__assert_fail@plt+0xe3d8>
   1ff44:	mov	r9, r5
   1ff48:	ldr	r3, [r5, #-24]	; 0xffffffe8
   1ff4c:	cmp	r3, r6
   1ff50:	bne	1ff34 <__assert_fail@plt+0xe390>
   1ff54:	cmp	sl, #31
   1ff58:	bgt	1fed4 <__assert_fail@plt+0xe330>
   1ff5c:	ldr	r3, [r5, #-8]
   1ff60:	ldr	r2, [sp, #20]
   1ff64:	tst	r2, r3
   1ff68:	bne	1fed4 <__assert_fail@plt+0xe330>
   1ff6c:	b	1ff34 <__assert_fail@plt+0xe390>
   1ff70:	ldr	fp, [sp, #16]
   1ff74:	sbfx	r0, fp, #0, #1
   1ff78:	b	20044 <__assert_fail@plt+0xe4a0>
   1ff7c:	ldr	r7, [sp, #40]	; 0x28
   1ff80:	ldr	r4, [sp, #44]	; 0x2c
   1ff84:	ldr	fp, [sp, #16]
   1ff88:	b	1ffa0 <__assert_fail@plt+0xe3fc>
   1ff8c:	tst	fp, #1
   1ff90:	beq	1ffa0 <__assert_fail@plt+0xe3fc>
   1ff94:	ldr	r3, [r2, r6, lsl #3]
   1ff98:	cmp	r3, sl
   1ff9c:	beq	20060 <__assert_fail@plt+0xe4bc>
   1ffa0:	add	r4, r4, #1
   1ffa4:	ldr	r3, [r7, #4]
   1ffa8:	cmp	r3, r4
   1ffac:	ble	20040 <__assert_fail@plt+0xe49c>
   1ffb0:	ldr	r3, [r7, #8]
   1ffb4:	ldr	r6, [r3, r4, lsl #2]
   1ffb8:	ldr	r2, [r8]
   1ffbc:	add	r3, r2, r6, lsl #3
   1ffc0:	ldrb	r3, [r3, #4]
   1ffc4:	cmp	r3, #8
   1ffc8:	beq	1ff8c <__assert_fail@plt+0xe3e8>
   1ffcc:	cmp	r3, #9
   1ffd0:	beq	20024 <__assert_fail@plt+0xe480>
   1ffd4:	cmp	r3, #4
   1ffd8:	bne	1ffa0 <__assert_fail@plt+0xe3fc>
   1ffdc:	ldr	r3, [sp, #88]	; 0x58
   1ffe0:	cmn	r3, #1
   1ffe4:	beq	1ffa0 <__assert_fail@plt+0xe3fc>
   1ffe8:	add	r3, r6, r6, lsl #1
   1ffec:	lsl	r3, r3, #2
   1fff0:	ldr	r2, [sp, #12]
   1fff4:	ldr	r5, [r2, #116]	; 0x74
   1fff8:	ldr	r2, [sp, #36]	; 0x24
   1fffc:	add	r5, r5, r2, lsl #3
   20000:	and	r2, fp, #2
   20004:	str	r2, [sp, #28]
   20008:	str	r7, [sp, #40]	; 0x28
   2000c:	str	r4, [sp, #44]	; 0x2c
   20010:	mov	r4, r3
   20014:	str	fp, [sp, #16]
   20018:	ldr	r7, [sp, #32]
   2001c:	ldr	fp, [sp, #88]	; 0x58
   20020:	b	1ff44 <__assert_fail@plt+0xe3a0>
   20024:	tst	fp, #2
   20028:	beq	1ffa0 <__assert_fail@plt+0xe3fc>
   2002c:	ldr	r3, [r2, r6, lsl #3]
   20030:	cmp	r3, sl
   20034:	bne	1ffa0 <__assert_fail@plt+0xe3fc>
   20038:	mov	r0, #0
   2003c:	b	20044 <__assert_fail@plt+0xe4a0>
   20040:	ubfx	r0, fp, #1, #1
   20044:	add	sp, sp, #52	; 0x34
   20048:	ldrd	r4, [sp]
   2004c:	ldrd	r6, [sp, #8]
   20050:	ldrd	r8, [sp, #16]
   20054:	ldrd	sl, [sp, #24]
   20058:	add	sp, sp, #32
   2005c:	pop	{pc}		; (ldr pc, [sp], #4)
   20060:	mvn	r0, #0
   20064:	b	20044 <__assert_fail@plt+0xe4a0>
   20068:	str	r4, [sp, #-8]!
   2006c:	str	lr, [sp, #4]
   20070:	sub	sp, sp, #8
   20074:	ldr	lr, [sp, #16]
   20078:	add	r1, r1, r1, lsl #1
   2007c:	ldr	ip, [r0, #116]	; 0x74
   20080:	add	r1, ip, r1, lsl #3
   20084:	ldr	ip, [r1, #8]
   20088:	cmp	ip, lr
   2008c:	bgt	200d0 <__assert_fail@plt+0xe52c>
   20090:	ldr	r4, [r1, #12]
   20094:	cmp	r4, lr
   20098:	movlt	r0, #1
   2009c:	blt	200c0 <__assert_fail@plt+0xe51c>
   200a0:	cmp	ip, lr
   200a4:	movne	r1, #0
   200a8:	moveq	r1, #1
   200ac:	cmp	r4, lr
   200b0:	beq	200d8 <__assert_fail@plt+0xe534>
   200b4:	cmp	ip, lr
   200b8:	movne	r0, #0
   200bc:	beq	200dc <__assert_fail@plt+0xe538>
   200c0:	add	sp, sp, #8
   200c4:	ldr	r4, [sp]
   200c8:	add	sp, sp, #4
   200cc:	pop	{pc}		; (ldr pc, [sp], #4)
   200d0:	mvn	r0, #0
   200d4:	b	200c0 <__assert_fail@plt+0xe51c>
   200d8:	orr	r1, r1, #2
   200dc:	ldr	ip, [sp, #20]
   200e0:	str	ip, [sp]
   200e4:	bl	1fe64 <__assert_fail@plt+0xe2c0>
   200e8:	b	200c0 <__assert_fail@plt+0xe51c>
   200ec:	strd	r4, [sp, #-12]!
   200f0:	str	lr, [sp, #8]
   200f4:	mov	r4, r0
   200f8:	ldr	r5, [r0, #108]	; 0x6c
   200fc:	mov	ip, r5
   20100:	mov	r0, #0
   20104:	cmp	ip, r0
   20108:	ble	20174 <__assert_fail@plt+0xe5d0>
   2010c:	add	r2, ip, r0
   20110:	add	r2, r2, r2, lsr #31
   20114:	asr	r2, r2, #1
   20118:	ldr	lr, [r4, #116]	; 0x74
   2011c:	add	r3, r2, r2, lsl #1
   20120:	add	r3, lr, r3, lsl #3
   20124:	ldr	r3, [r3, #4]
   20128:	cmp	r1, r3
   2012c:	bgt	20160 <__assert_fail@plt+0xe5bc>
   20130:	cmp	r0, r2
   20134:	bge	20174 <__assert_fail@plt+0xe5d0>
   20138:	add	r3, r0, r2
   2013c:	add	r3, r3, r3, lsr #31
   20140:	asr	r3, r3, #1
   20144:	add	ip, r3, r3, lsl #1
   20148:	add	ip, lr, ip, lsl #3
   2014c:	ldr	ip, [ip, #4]
   20150:	cmp	ip, r1
   20154:	blt	20168 <__assert_fail@plt+0xe5c4>
   20158:	mov	r2, r3
   2015c:	b	20130 <__assert_fail@plt+0xe58c>
   20160:	mov	r3, r2
   20164:	mov	r2, ip
   20168:	add	r0, r3, #1
   2016c:	mov	ip, r2
   20170:	b	20104 <__assert_fail@plt+0xe560>
   20174:	cmp	r5, r0
   20178:	ble	201a0 <__assert_fail@plt+0xe5fc>
   2017c:	ldr	r3, [r4, #116]	; 0x74
   20180:	add	r2, r0, r0, lsl #1
   20184:	add	r3, r3, r2, lsl #3
   20188:	ldr	r3, [r3, #4]
   2018c:	cmp	r3, r1
   20190:	mvnne	r0, #0
   20194:	ldrd	r4, [sp]
   20198:	add	sp, sp, #8
   2019c:	pop	{pc}		; (ldr pc, [sp], #4)
   201a0:	mvn	r0, #0
   201a4:	b	20194 <__assert_fail@plt+0xe5f0>
   201a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   201ac:	strd	r6, [sp, #8]
   201b0:	strd	r8, [sp, #16]
   201b4:	strd	sl, [sp, #24]
   201b8:	str	lr, [sp, #32]
   201bc:	sub	sp, sp, #20
   201c0:	mov	r4, r0
   201c4:	mov	r5, r1
   201c8:	str	r2, [sp, #12]
   201cc:	mov	r8, r3
   201d0:	ldr	sl, [r0, #84]	; 0x54
   201d4:	mov	r1, r3
   201d8:	bl	200ec <__assert_fail@plt+0xe548>
   201dc:	mov	fp, r0
   201e0:	ldr	r1, [sp, #60]	; 0x3c
   201e4:	mov	r0, r4
   201e8:	bl	200ec <__assert_fail@plt+0xe548>
   201ec:	str	r0, [sp, #8]
   201f0:	ldr	r3, [r5, #4]
   201f4:	cmp	r3, #0
   201f8:	ble	202a0 <__assert_fail@plt+0xe6fc>
   201fc:	mov	r6, #0
   20200:	ldr	r3, [r5, #8]
   20204:	ldr	r1, [r3, r6, lsl #2]
   20208:	ldr	r3, [r4, #116]	; 0x74
   2020c:	add	r2, r1, r1, lsl #1
   20210:	ldr	r2, [r3, r2, lsl #3]
   20214:	ldr	r3, [sl]
   20218:	ldr	r7, [r3, r2, lsl #3]
   2021c:	str	fp, [sp, #4]
   20220:	str	r8, [sp]
   20224:	ldr	r3, [sp, #12]
   20228:	mov	r2, r7
   2022c:	mov	r0, r4
   20230:	bl	20068 <__assert_fail@plt+0xe4c4>
   20234:	mov	r9, r0
   20238:	ldr	r3, [r5, #8]
   2023c:	ldr	r1, [r3, r6, lsl #2]
   20240:	ldr	r3, [sp, #8]
   20244:	str	r3, [sp, #4]
   20248:	ldr	r3, [sp, #60]	; 0x3c
   2024c:	str	r3, [sp]
   20250:	ldr	r3, [sp, #56]	; 0x38
   20254:	mov	r2, r7
   20258:	mov	r0, r4
   2025c:	bl	20068 <__assert_fail@plt+0xe4c4>
   20260:	cmp	r9, r0
   20264:	beq	20288 <__assert_fail@plt+0xe6e4>
   20268:	mov	r0, #1
   2026c:	add	sp, sp, #20
   20270:	ldrd	r4, [sp]
   20274:	ldrd	r6, [sp, #8]
   20278:	ldrd	r8, [sp, #16]
   2027c:	ldrd	sl, [sp, #24]
   20280:	add	sp, sp, #32
   20284:	pop	{pc}		; (ldr pc, [sp], #4)
   20288:	add	r6, r6, #1
   2028c:	ldr	r3, [r5, #4]
   20290:	cmp	r3, r6
   20294:	bgt	20200 <__assert_fail@plt+0xe65c>
   20298:	mov	r0, #0
   2029c:	b	2026c <__assert_fail@plt+0xe6c8>
   202a0:	mov	r0, #0
   202a4:	b	2026c <__assert_fail@plt+0xe6c8>
   202a8:	strd	r4, [sp, #-16]!
   202ac:	str	r6, [sp, #8]
   202b0:	str	lr, [sp, #12]
   202b4:	mov	r4, r0
   202b8:	mov	r5, r1
   202bc:	ldr	r3, [r0, #80]	; 0x50
   202c0:	cmp	r3, #1
   202c4:	ble	2030c <__assert_fail@plt+0xe768>
   202c8:	cmn	r1, #-1073741823	; 0xc0000001
   202cc:	bhi	2034c <__assert_fail@plt+0xe7a8>
   202d0:	lsl	r6, r1, #2
   202d4:	mov	r1, r6
   202d8:	ldr	r0, [r0, #8]
   202dc:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   202e0:	cmp	r0, #0
   202e4:	beq	20354 <__assert_fail@plt+0xe7b0>
   202e8:	str	r0, [r4, #8]
   202ec:	ldr	r0, [r4, #12]
   202f0:	cmp	r0, #0
   202f4:	beq	2030c <__assert_fail@plt+0xe768>
   202f8:	mov	r1, r6
   202fc:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   20300:	cmp	r0, #0
   20304:	beq	2035c <__assert_fail@plt+0xe7b8>
   20308:	str	r0, [r4, #12]
   2030c:	ldrb	r3, [r4, #75]	; 0x4b
   20310:	cmp	r3, #0
   20314:	bne	20330 <__assert_fail@plt+0xe78c>
   20318:	str	r5, [r4, #36]	; 0x24
   2031c:	mov	r0, #0
   20320:	ldrd	r4, [sp]
   20324:	ldr	r6, [sp, #8]
   20328:	add	sp, sp, #12
   2032c:	pop	{pc}		; (ldr pc, [sp], #4)
   20330:	mov	r1, r5
   20334:	ldr	r0, [r4, #4]
   20338:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   2033c:	cmp	r0, #0
   20340:	beq	20364 <__assert_fail@plt+0xe7c0>
   20344:	str	r0, [r4, #4]
   20348:	b	20318 <__assert_fail@plt+0xe774>
   2034c:	mov	r0, #12
   20350:	b	20320 <__assert_fail@plt+0xe77c>
   20354:	mov	r0, #12
   20358:	b	20320 <__assert_fail@plt+0xe77c>
   2035c:	mov	r0, #12
   20360:	b	20320 <__assert_fail@plt+0xe77c>
   20364:	mov	r0, #12
   20368:	b	20320 <__assert_fail@plt+0xe77c>
   2036c:	strd	r4, [sp, #-16]!
   20370:	str	r6, [sp, #8]
   20374:	str	lr, [sp, #12]
   20378:	mov	r4, r0
   2037c:	mov	r5, r1
   20380:	ldr	r1, [r0]
   20384:	ldr	r3, [r0, #4]
   20388:	cmp	r1, r3
   2038c:	beq	203b8 <__assert_fail@plt+0xe814>
   20390:	ldr	r2, [r4, #8]
   20394:	ldr	r3, [r4, #4]
   20398:	add	r1, r3, #1
   2039c:	str	r1, [r4, #4]
   203a0:	str	r5, [r2, r3, lsl #2]
   203a4:	mov	r0, #1
   203a8:	ldrd	r4, [sp]
   203ac:	ldr	r6, [sp, #8]
   203b0:	add	sp, sp, #12
   203b4:	pop	{pc}		; (ldr pc, [sp], #4)
   203b8:	add	r1, r1, #1
   203bc:	lsl	r3, r1, #1
   203c0:	str	r3, [r0]
   203c4:	lsl	r1, r1, #3
   203c8:	ldr	r0, [r0, #8]
   203cc:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   203d0:	cmp	r0, #0
   203d4:	beq	203e0 <__assert_fail@plt+0xe83c>
   203d8:	str	r0, [r4, #8]
   203dc:	b	20390 <__assert_fail@plt+0xe7ec>
   203e0:	mov	r0, #0
   203e4:	b	203a8 <__assert_fail@plt+0xe804>
   203e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   203ec:	strd	r6, [sp, #8]
   203f0:	str	r8, [sp, #16]
   203f4:	str	lr, [sp, #20]
   203f8:	mov	r7, r0
   203fc:	mov	r5, r1
   20400:	mov	r4, r2
   20404:	mov	r6, r3
   20408:	ldr	r3, [r0, #64]	; 0x40
   2040c:	cmp	r3, #31
   20410:	beq	20490 <__assert_fail@plt+0xe8ec>
   20414:	ldr	r3, [r7, #56]	; 0x38
   20418:	ldr	r2, [r7, #64]	; 0x40
   2041c:	add	r1, r2, #1
   20420:	str	r1, [r7, #64]	; 0x40
   20424:	lsl	r2, r2, #5
   20428:	add	r0, r2, #4
   2042c:	add	r0, r3, r0
   20430:	add	r3, r3, r2
   20434:	mov	r2, #0
   20438:	str	r2, [r3, #4]
   2043c:	str	r5, [r3, #8]
   20440:	str	r4, [r3, #12]
   20444:	ldrd	r6, [r6]
   20448:	strd	r6, [r3, #24]
   2044c:	ldrb	r1, [r3, #30]
   20450:	and	r1, r1, #251	; 0xfb
   20454:	bfi	r1, r2, #3, #1
   20458:	strb	r1, [r3, #30]
   2045c:	str	r2, [r3, #16]
   20460:	str	r2, [r3, #20]
   20464:	mvn	r2, #0
   20468:	str	r2, [r3, #32]
   2046c:	cmp	r5, #0
   20470:	strne	r0, [r5]
   20474:	cmp	r4, #0
   20478:	strne	r0, [r4]
   2047c:	ldrd	r4, [sp]
   20480:	ldrd	r6, [sp, #8]
   20484:	ldr	r8, [sp, #16]
   20488:	add	sp, sp, #20
   2048c:	pop	{pc}		; (ldr pc, [sp], #4)
   20490:	mov	r0, #996	; 0x3e4
   20494:	bl	2f010 <__assert_fail@plt+0x1d46c>
   20498:	cmp	r0, #0
   2049c:	beq	2047c <__assert_fail@plt+0xe8d8>
   204a0:	ldr	r3, [r7, #56]	; 0x38
   204a4:	str	r3, [r0]
   204a8:	str	r0, [r7, #56]	; 0x38
   204ac:	mov	r3, #0
   204b0:	str	r3, [r7, #64]	; 0x40
   204b4:	b	20414 <__assert_fail@plt+0xe870>
   204b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   204bc:	strd	r6, [sp, #8]
   204c0:	str	r8, [sp, #16]
   204c4:	str	lr, [sp, #20]
   204c8:	sub	sp, sp, #8
   204cc:	mov	r4, r0
   204d0:	mov	r7, r1
   204d4:	ldr	r5, [r0]
   204d8:	add	r8, sp, #4
   204dc:	mov	r6, #0
   204e0:	add	r3, r4, #20
   204e4:	mov	r2, r6
   204e8:	mov	r1, r6
   204ec:	mov	r0, r7
   204f0:	bl	203e8 <__assert_fail@plt+0xe844>
   204f4:	str	r0, [r8]
   204f8:	cmp	r0, #0
   204fc:	beq	20534 <__assert_fail@plt+0xe990>
   20500:	str	r5, [r0]
   20504:	ldr	r2, [r8]
   20508:	ldrb	r3, [r2, #26]
   2050c:	orr	r3, r3, #4
   20510:	strb	r3, [r2, #26]
   20514:	ldr	r5, [r8]
   20518:	ldr	r3, [r4, #4]
   2051c:	cmp	r3, #0
   20520:	beq	2054c <__assert_fail@plt+0xe9a8>
   20524:	add	r8, r5, #4
   20528:	mov	r4, r3
   2052c:	b	204e0 <__assert_fail@plt+0xe93c>
   20530:	ldr	r0, [sp, #4]
   20534:	add	sp, sp, #8
   20538:	ldrd	r4, [sp]
   2053c:	ldrd	r6, [sp, #8]
   20540:	ldr	r8, [sp, #16]
   20544:	add	sp, sp, #20
   20548:	pop	{pc}		; (ldr pc, [sp], #4)
   2054c:	ldr	r2, [r4, #8]
   20550:	cmp	r2, r3
   20554:	cmpne	r2, #0
   20558:	bne	20578 <__assert_fail@plt+0xe9d4>
   2055c:	ldr	r2, [r4]
   20560:	ldr	r5, [r5]
   20564:	mov	r3, r4
   20568:	cmp	r2, #0
   2056c:	beq	20530 <__assert_fail@plt+0xe98c>
   20570:	mov	r4, r2
   20574:	b	2054c <__assert_fail@plt+0xe9a8>
   20578:	add	r8, r5, #8
   2057c:	mov	r4, r2
   20580:	b	204e0 <__assert_fail@plt+0xe93c>
   20584:	strd	r4, [sp, #-12]!
   20588:	str	lr, [sp, #8]
   2058c:	sub	sp, sp, #12
   20590:	mov	r4, #0
   20594:	mov	r5, #0
   20598:	strd	r4, [sp]
   2059c:	strb	r3, [sp, #4]
   205a0:	mov	r3, sp
   205a4:	bl	203e8 <__assert_fail@plt+0xe844>
   205a8:	add	sp, sp, #12
   205ac:	ldrd	r4, [sp]
   205b0:	add	sp, sp, #8
   205b4:	pop	{pc}		; (ldr pc, [sp], #4)
   205b8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   205bc:	strd	r6, [sp, #8]
   205c0:	strd	r8, [sp, #16]
   205c4:	str	sl, [sp, #24]
   205c8:	str	lr, [sp, #28]
   205cc:	mov	r8, r0
   205d0:	mov	r7, r2
   205d4:	ldr	r6, [r1]
   205d8:	ldr	r4, [r2, #4]
   205dc:	ldrb	r3, [r1, #28]
   205e0:	ubfx	r3, r3, #4, #1
   205e4:	cmp	r4, #0
   205e8:	moveq	r3, #0
   205ec:	cmp	r3, #0
   205f0:	bne	20638 <__assert_fail@plt+0xea94>
   205f4:	mov	r3, #8
   205f8:	mov	r2, #0
   205fc:	mov	r1, r2
   20600:	mov	r0, r6
   20604:	bl	20584 <__assert_fail@plt+0xe9e0>
   20608:	mov	r5, r0
   2060c:	mov	r3, #9
   20610:	mov	r2, #0
   20614:	mov	r1, r2
   20618:	mov	r0, r6
   2061c:	bl	20584 <__assert_fail@plt+0xe9e0>
   20620:	mov	sl, r0
   20624:	cmp	r4, #0
   20628:	moveq	r9, r0
   2062c:	beq	2069c <__assert_fail@plt+0xeaf8>
   20630:	mov	r9, r0
   20634:	b	20684 <__assert_fail@plt+0xeae0>
   20638:	ldr	r3, [r2, #20]
   2063c:	cmp	r3, #31
   20640:	bgt	206f8 <__assert_fail@plt+0xeb54>
   20644:	ldr	r2, [r6, #80]	; 0x50
   20648:	lsr	r3, r2, r3
   2064c:	tst	r3, #1
   20650:	beq	206f8 <__assert_fail@plt+0xeb54>
   20654:	mov	r3, #8
   20658:	mov	r2, #0
   2065c:	mov	r1, r2
   20660:	mov	r0, r6
   20664:	bl	20584 <__assert_fail@plt+0xe9e0>
   20668:	mov	r5, r0
   2066c:	mov	r3, #9
   20670:	mov	r2, #0
   20674:	mov	r1, r2
   20678:	mov	r0, r6
   2067c:	bl	20584 <__assert_fail@plt+0xe9e0>
   20680:	mov	r9, r0
   20684:	mov	r3, #16
   20688:	mov	r2, r9
   2068c:	mov	r1, r4
   20690:	mov	r0, r6
   20694:	bl	20584 <__assert_fail@plt+0xe9e0>
   20698:	mov	sl, r0
   2069c:	mov	r3, #16
   206a0:	mov	r2, sl
   206a4:	mov	r1, r5
   206a8:	mov	r0, r6
   206ac:	bl	20584 <__assert_fail@plt+0xe9e0>
   206b0:	mov	r4, r0
   206b4:	cmp	sl, #0
   206b8:	cmpne	r0, #0
   206bc:	beq	20714 <__assert_fail@plt+0xeb70>
   206c0:	cmp	r9, #0
   206c4:	cmpne	r5, #0
   206c8:	beq	20714 <__assert_fail@plt+0xeb70>
   206cc:	ldr	r3, [r7, #20]
   206d0:	str	r3, [r9, #20]
   206d4:	str	r3, [r5, #20]
   206d8:	ldrb	r3, [r7, #26]
   206dc:	ubfx	r3, r3, #3, #1
   206e0:	ldrb	r2, [r9, #26]
   206e4:	bfi	r2, r3, #3, #1
   206e8:	strb	r2, [r9, #26]
   206ec:	ldrb	r2, [r5, #26]
   206f0:	bfi	r2, r3, #3, #1
   206f4:	strb	r2, [r5, #26]
   206f8:	mov	r0, r4
   206fc:	ldrd	r4, [sp]
   20700:	ldrd	r6, [sp, #8]
   20704:	ldrd	r8, [sp, #16]
   20708:	ldr	sl, [sp, #24]
   2070c:	add	sp, sp, #28
   20710:	pop	{pc}		; (ldr pc, [sp], #4)
   20714:	mov	r3, #12
   20718:	str	r3, [r8]
   2071c:	mov	r4, #0
   20720:	b	206f8 <__assert_fail@plt+0xeb54>
   20724:	strd	r4, [sp, #-12]!
   20728:	str	lr, [sp, #8]
   2072c:	sub	sp, sp, #12
   20730:	mov	r5, r0
   20734:	mov	r4, r1
   20738:	mov	r3, #0
   2073c:	str	r3, [sp, #4]
   20740:	ldr	r2, [r1, #4]
   20744:	cmp	r2, r3
   20748:	beq	20758 <__assert_fail@plt+0xebb4>
   2074c:	ldrb	r3, [r2, #24]
   20750:	cmp	r3, #17
   20754:	beq	20784 <__assert_fail@plt+0xebe0>
   20758:	ldr	r2, [r4, #8]
   2075c:	cmp	r2, #0
   20760:	beq	20770 <__assert_fail@plt+0xebcc>
   20764:	ldrb	r3, [r2, #24]
   20768:	cmp	r3, #17
   2076c:	beq	207a0 <__assert_fail@plt+0xebfc>
   20770:	ldr	r0, [sp, #4]
   20774:	add	sp, sp, #12
   20778:	ldrd	r4, [sp]
   2077c:	add	sp, sp, #8
   20780:	pop	{pc}		; (ldr pc, [sp], #4)
   20784:	mov	r1, r0
   20788:	add	r0, sp, #4
   2078c:	bl	205b8 <__assert_fail@plt+0xea14>
   20790:	str	r0, [r4, #4]
   20794:	cmp	r0, #0
   20798:	strne	r4, [r0]
   2079c:	b	20758 <__assert_fail@plt+0xebb4>
   207a0:	mov	r1, r5
   207a4:	add	r0, sp, #4
   207a8:	bl	205b8 <__assert_fail@plt+0xea14>
   207ac:	str	r0, [r4, #8]
   207b0:	cmp	r0, #0
   207b4:	strne	r4, [r0]
   207b8:	b	20770 <__assert_fail@plt+0xebcc>
   207bc:	strd	r4, [sp, #-16]!
   207c0:	str	r6, [sp, #8]
   207c4:	str	lr, [sp, #12]
   207c8:	mov	r4, r0
   207cc:	mov	r5, r1
   207d0:	mov	r3, #1
   207d4:	str	r3, [r0]
   207d8:	str	r3, [r0, #4]
   207dc:	mov	r0, #4
   207e0:	bl	2f010 <__assert_fail@plt+0x1d46c>
   207e4:	str	r0, [r4, #8]
   207e8:	cmp	r0, #0
   207ec:	moveq	r3, #0
   207f0:	streq	r3, [r4, #4]
   207f4:	streq	r3, [r4]
   207f8:	moveq	r0, #12
   207fc:	strne	r5, [r0]
   20800:	movne	r0, #0
   20804:	ldrd	r4, [sp]
   20808:	ldr	r6, [sp, #8]
   2080c:	add	sp, sp, #12
   20810:	pop	{pc}		; (ldr pc, [sp], #4)
   20814:	str	r4, [sp, #-8]!
   20818:	str	lr, [sp, #4]
   2081c:	mov	r4, r0
   20820:	str	r1, [r0]
   20824:	mov	r3, #0
   20828:	str	r3, [r0, #4]
   2082c:	lsl	r0, r1, #2
   20830:	bl	2f010 <__assert_fail@plt+0x1d46c>
   20834:	str	r0, [r4, #8]
   20838:	cmp	r0, #0
   2083c:	movne	r0, #0
   20840:	moveq	r0, #12
   20844:	ldr	r4, [sp]
   20848:	add	sp, sp, #4
   2084c:	pop	{pc}		; (ldr pc, [sp], #4)
   20850:	strd	r4, [sp, #-32]!	; 0xffffffe0
   20854:	strd	r6, [sp, #8]
   20858:	strd	r8, [sp, #16]
   2085c:	str	sl, [sp, #24]
   20860:	str	lr, [sp, #28]
   20864:	mov	r6, r0
   20868:	mov	r5, r1
   2086c:	mov	r7, r2
   20870:	mov	r8, r1
   20874:	str	r2, [r8], #16
   20878:	ldr	r1, [r1, #8]
   2087c:	mov	r0, r8
   20880:	bl	20814 <__assert_fail@plt+0xec70>
   20884:	subs	r9, r0, #0
   20888:	bne	20964 <__assert_fail@plt+0xedc0>
   2088c:	ldr	r3, [r5, #8]
   20890:	cmp	r3, #0
   20894:	ble	208e4 <__assert_fail@plt+0xed40>
   20898:	mov	r4, r9
   2089c:	b	208b0 <__assert_fail@plt+0xed0c>
   208a0:	add	r4, r4, #1
   208a4:	ldr	r3, [r5, #8]
   208a8:	cmp	r3, r4
   208ac:	ble	208e4 <__assert_fail@plt+0xed40>
   208b0:	ldr	r3, [r5, #12]
   208b4:	ldr	r1, [r3, r4, lsl #2]
   208b8:	ldr	r3, [r6]
   208bc:	add	r3, r3, r1, lsl #3
   208c0:	ldrb	r3, [r3, #4]
   208c4:	tst	r3, #8
   208c8:	bne	208a0 <__assert_fail@plt+0xecfc>
   208cc:	mov	r0, r8
   208d0:	bl	2036c <__assert_fail@plt+0xe7c8>
   208d4:	cmp	r0, #0
   208d8:	bne	208a0 <__assert_fail@plt+0xecfc>
   208dc:	mov	r9, #12
   208e0:	b	20920 <__assert_fail@plt+0xed7c>
   208e4:	ldr	r4, [r6, #68]	; 0x44
   208e8:	and	r7, r7, r4
   208ec:	add	r7, r7, r7, lsl #1
   208f0:	lsl	r4, r7, #2
   208f4:	ldr	r6, [r6, #32]
   208f8:	add	r7, r6, r4
   208fc:	ldr	r3, [r6, r4]
   20900:	ldr	r2, [r7, #4]
   20904:	cmp	r2, r3
   20908:	ble	2093c <__assert_fail@plt+0xed98>
   2090c:	ldr	r2, [r7, #8]
   20910:	ldr	r3, [r6, r4]
   20914:	add	r1, r3, #1
   20918:	str	r1, [r6, r4]
   2091c:	str	r5, [r2, r3, lsl #2]
   20920:	mov	r0, r9
   20924:	ldrd	r4, [sp]
   20928:	ldrd	r6, [sp, #8]
   2092c:	ldrd	r8, [sp, #16]
   20930:	ldr	sl, [sp, #24]
   20934:	add	sp, sp, #28
   20938:	pop	{pc}		; (ldr pc, [sp], #4)
   2093c:	add	r3, r3, #1
   20940:	lsl	r8, r3, #1
   20944:	lsl	r1, r3, #3
   20948:	ldr	r0, [r7, #8]
   2094c:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   20950:	cmp	r0, #0
   20954:	beq	2096c <__assert_fail@plt+0xedc8>
   20958:	str	r0, [r7, #8]
   2095c:	str	r8, [r7, #4]
   20960:	b	2090c <__assert_fail@plt+0xed68>
   20964:	mov	r9, #12
   20968:	b	20920 <__assert_fail@plt+0xed7c>
   2096c:	mov	r9, #12
   20970:	b	20920 <__assert_fail@plt+0xed7c>
   20974:	strd	r4, [sp, #-20]!	; 0xffffffec
   20978:	strd	r6, [sp, #8]
   2097c:	str	lr, [sp, #16]
   20980:	sub	sp, sp, #84	; 0x54
   20984:	mov	r4, r0
   20988:	ldr	r5, [r0, #36]	; 0x24
   2098c:	ldr	r3, [r0, #48]	; 0x30
   20990:	cmp	r5, r3
   20994:	movge	r5, r3
   20998:	ldr	r7, [r0, #28]
   2099c:	cmp	r5, r7
   209a0:	ble	20ae8 <__assert_fail@plt+0xef44>
   209a4:	mov	r6, #1
   209a8:	b	20a88 <__assert_fail@plt+0xeee4>
   209ac:	ldr	r3, [r4, #80]	; 0x50
   209b0:	cmp	r3, #0
   209b4:	cmpgt	r2, #0
   209b8:	ble	20a10 <__assert_fail@plt+0xee6c>
   209bc:	add	r0, sp, #16
   209c0:	mov	r1, #0
   209c4:	ldr	r3, [r4]
   209c8:	ldr	ip, [r4, #24]
   209cc:	add	r3, r3, r7
   209d0:	add	r3, r3, r1
   209d4:	ldrb	r3, [r3, ip]
   209d8:	ldr	ip, [r4, #64]	; 0x40
   209dc:	ldrb	ip, [ip, r3]
   209e0:	ldr	r3, [r4, #4]
   209e4:	add	r3, r3, r7
   209e8:	strb	ip, [r3, r1]
   209ec:	strb	ip, [r0], #1
   209f0:	add	r1, r1, #1
   209f4:	ldr	r3, [r4, #80]	; 0x50
   209f8:	cmp	r2, r3
   209fc:	movlt	r3, r2
   20a00:	cmp	r3, r1
   20a04:	bgt	209c4 <__assert_fail@plt+0xee20>
   20a08:	add	r1, sp, #16
   20a0c:	b	20ab0 <__assert_fail@plt+0xef0c>
   20a10:	add	r1, sp, #16
   20a14:	b	20ab0 <__assert_fail@plt+0xef0c>
   20a18:	ldr	r3, [r4]
   20a1c:	ldr	r2, [r4, #24]
   20a20:	add	r3, r3, r7
   20a24:	ldrb	r3, [r3, r2]
   20a28:	str	r3, [sp, #4]
   20a2c:	ldr	r2, [r4, #64]	; 0x40
   20a30:	cmp	r2, #0
   20a34:	ldrbne	r3, [r2, r3]
   20a38:	strne	r3, [sp, #4]
   20a3c:	ldrd	r2, [sp, #8]
   20a40:	strd	r2, [r4, #16]
   20a44:	mov	r0, r6
   20a48:	add	r3, r7, #1
   20a4c:	ldr	r2, [r4, #8]
   20a50:	ldr	r1, [sp, #4]
   20a54:	str	r1, [r2, r7, lsl #2]
   20a58:	add	r0, r7, r0
   20a5c:	cmp	r3, r0
   20a60:	bge	20b04 <__assert_fail@plt+0xef60>
   20a64:	mvn	r1, #0
   20a68:	ldr	r2, [r4, #8]
   20a6c:	str	r1, [r2, r3, lsl #2]
   20a70:	add	r3, r3, #1
   20a74:	cmp	r3, r0
   20a78:	bne	20a68 <__assert_fail@plt+0xeec4>
   20a7c:	mov	r7, r0
   20a80:	cmp	r7, r5
   20a84:	bge	20ae8 <__assert_fail@plt+0xef44>
   20a88:	sub	r2, r5, r7
   20a8c:	ldrd	r0, [r4, #16]
   20a90:	strd	r0, [sp, #8]
   20a94:	ldr	r3, [r4, #64]	; 0x40
   20a98:	cmp	r3, #0
   20a9c:	bne	209ac <__assert_fail@plt+0xee08>
   20aa0:	ldr	r1, [r4, #24]
   20aa4:	add	r3, r7, r1
   20aa8:	ldr	r1, [r4]
   20aac:	add	r1, r1, r3
   20ab0:	add	r3, r4, #16
   20ab4:	add	r0, sp, #4
   20ab8:	bl	1be94 <__assert_fail@plt+0xa2f0>
   20abc:	sub	r3, r0, #1
   20ac0:	cmn	r3, #3
   20ac4:	bhi	20a18 <__assert_fail@plt+0xee74>
   20ac8:	cmn	r0, #2
   20acc:	bne	20a48 <__assert_fail@plt+0xeea4>
   20ad0:	ldr	r2, [r4, #36]	; 0x24
   20ad4:	ldr	r3, [r4, #48]	; 0x30
   20ad8:	cmp	r2, r3
   20adc:	bge	20a18 <__assert_fail@plt+0xee74>
   20ae0:	ldrd	r2, [sp, #8]
   20ae4:	strd	r2, [r4, #16]
   20ae8:	str	r7, [r4, #28]
   20aec:	str	r7, [r4, #32]
   20af0:	add	sp, sp, #84	; 0x54
   20af4:	ldrd	r4, [sp]
   20af8:	ldrd	r6, [sp, #8]
   20afc:	add	sp, sp, #16
   20b00:	pop	{pc}		; (ldr pc, [sp], #4)
   20b04:	mov	r7, r3
   20b08:	b	20a80 <__assert_fail@plt+0xeedc>
   20b0c:	ldr	r3, [r1, #4]
   20b10:	cmp	r3, #0
   20b14:	beq	20cd0 <__assert_fail@plt+0xf12c>
   20b18:	ldr	ip, [r2, #4]
   20b1c:	cmp	ip, #0
   20b20:	beq	20ccc <__assert_fail@plt+0xf128>
   20b24:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20b28:	strd	r6, [sp, #8]
   20b2c:	str	r8, [sp, #16]
   20b30:	str	lr, [sp, #20]
   20b34:	mov	r6, r2
   20b38:	mov	r5, r1
   20b3c:	mov	r7, r0
   20b40:	add	r3, r3, ip
   20b44:	ldr	r4, [r0]
   20b48:	ldr	r2, [r0, #4]
   20b4c:	add	r2, r3, r2
   20b50:	cmp	r2, r4
   20b54:	bgt	20b7c <__assert_fail@plt+0xefd8>
   20b58:	ldr	r3, [r7, #4]
   20b5c:	ldr	r4, [r5, #4]
   20b60:	ldr	r2, [r6, #4]
   20b64:	add	r1, r3, r4
   20b68:	add	r1, r1, r2
   20b6c:	sub	r4, r4, #1
   20b70:	sub	r2, r2, #1
   20b74:	sub	r3, r3, #1
   20b78:	b	20c08 <__assert_fail@plt+0xf064>
   20b7c:	add	r4, r3, r4
   20b80:	lsl	r1, r4, #2
   20b84:	ldr	r0, [r0, #8]
   20b88:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   20b8c:	cmp	r0, #0
   20b90:	beq	20cd8 <__assert_fail@plt+0xf134>
   20b94:	str	r0, [r7, #8]
   20b98:	str	r4, [r7]
   20b9c:	b	20b58 <__assert_fail@plt+0xefb4>
   20ba0:	cmp	r3, #0
   20ba4:	blt	20be0 <__assert_fail@plt+0xf03c>
   20ba8:	ldr	r8, [r7, #8]
   20bac:	add	lr, r8, r3, lsl #2
   20bb0:	ldr	r0, [r8, r3, lsl #2]
   20bb4:	cmp	ip, r0
   20bb8:	bge	20bd4 <__assert_fail@plt+0xf030>
   20bbc:	sub	r3, r3, #1
   20bc0:	cmn	r3, #1
   20bc4:	beq	20be0 <__assert_fail@plt+0xf03c>
   20bc8:	ldr	r0, [lr, #-4]!
   20bcc:	cmp	ip, r0
   20bd0:	blt	20bbc <__assert_fail@plt+0xf018>
   20bd4:	ldr	r0, [r8, r3, lsl #2]
   20bd8:	cmp	ip, r0
   20bdc:	beq	20bec <__assert_fail@plt+0xf048>
   20be0:	sub	r1, r1, #1
   20be4:	ldr	r0, [r7, #8]
   20be8:	str	ip, [r0, r1, lsl #2]
   20bec:	subs	r4, r4, #1
   20bf0:	bmi	20c30 <__assert_fail@plt+0xf08c>
   20bf4:	subs	r2, r2, #1
   20bf8:	bpl	20c08 <__assert_fail@plt+0xf064>
   20bfc:	b	20c30 <__assert_fail@plt+0xf08c>
   20c00:	subs	r4, r4, #1
   20c04:	bmi	20c30 <__assert_fail@plt+0xf08c>
   20c08:	ldr	r0, [r5, #8]
   20c0c:	ldr	ip, [r0, r4, lsl #2]
   20c10:	ldr	r0, [r6, #8]
   20c14:	ldr	r0, [r0, r2, lsl #2]
   20c18:	cmp	ip, r0
   20c1c:	beq	20ba0 <__assert_fail@plt+0xeffc>
   20c20:	cmp	ip, r0
   20c24:	bge	20c00 <__assert_fail@plt+0xf05c>
   20c28:	subs	r2, r2, #1
   20c2c:	bpl	20c08 <__assert_fail@plt+0xf064>
   20c30:	ldr	r3, [r7, #4]
   20c34:	sub	r0, r3, #1
   20c38:	ldr	r2, [r5, #4]
   20c3c:	add	r2, r3, r2
   20c40:	ldr	ip, [r6, #4]
   20c44:	add	r2, r2, ip
   20c48:	sub	r4, r2, #1
   20c4c:	sub	r2, r2, r1
   20c50:	add	r3, r3, r2
   20c54:	str	r3, [r7, #4]
   20c58:	cmp	r0, #0
   20c5c:	cmpge	r2, #0
   20c60:	bgt	20ca0 <__assert_fail@plt+0xf0fc>
   20c64:	ldr	r0, [r7, #8]
   20c68:	lsl	r2, r2, #2
   20c6c:	add	r1, r0, r1, lsl #2
   20c70:	bl	11784 <memcpy@plt>
   20c74:	mov	r3, #0
   20c78:	mov	r0, r3
   20c7c:	ldrd	r4, [sp]
   20c80:	ldrd	r6, [sp, #8]
   20c84:	ldr	r8, [sp, #16]
   20c88:	add	sp, sp, #20
   20c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   20c90:	add	lr, r0, r2
   20c94:	str	ip, [r3, lr, lsl #2]
   20c98:	subs	r0, r0, #1
   20c9c:	bmi	20c64 <__assert_fail@plt+0xf0c0>
   20ca0:	ldr	r3, [r7, #8]
   20ca4:	ldr	lr, [r3, r4, lsl #2]
   20ca8:	ldr	ip, [r3, r0, lsl #2]
   20cac:	cmp	lr, ip
   20cb0:	ble	20c90 <__assert_fail@plt+0xf0ec>
   20cb4:	sub	r4, r4, #1
   20cb8:	add	ip, r0, r2
   20cbc:	str	lr, [r3, ip, lsl #2]
   20cc0:	subs	r2, r2, #1
   20cc4:	bne	20ca0 <__assert_fail@plt+0xf0fc>
   20cc8:	b	20c64 <__assert_fail@plt+0xf0c0>
   20ccc:	mov	r3, ip
   20cd0:	mov	r0, r3
   20cd4:	bx	lr
   20cd8:	mov	r3, #12
   20cdc:	b	20c78 <__assert_fail@plt+0xf0d4>
   20ce0:	ldr	r3, [r1, #4]
   20ce4:	str	r3, [r0, #4]
   20ce8:	cmp	r3, #0
   20cec:	ble	20d50 <__assert_fail@plt+0xf1ac>
   20cf0:	strd	r4, [sp, #-16]!
   20cf4:	str	r6, [sp, #8]
   20cf8:	str	lr, [sp, #12]
   20cfc:	mov	r5, r1
   20d00:	mov	r4, r0
   20d04:	str	r3, [r0]
   20d08:	lsl	r0, r3, #2
   20d0c:	bl	2f010 <__assert_fail@plt+0x1d46c>
   20d10:	str	r0, [r4, #8]
   20d14:	cmp	r0, #0
   20d18:	moveq	r3, #0
   20d1c:	streq	r3, [r4, #4]
   20d20:	streq	r3, [r4]
   20d24:	moveq	r0, #12
   20d28:	beq	20d40 <__assert_fail@plt+0xf19c>
   20d2c:	ldr	r2, [r5, #4]
   20d30:	lsl	r2, r2, #2
   20d34:	ldr	r1, [r5, #8]
   20d38:	bl	11784 <memcpy@plt>
   20d3c:	mov	r0, #0
   20d40:	ldrd	r4, [sp]
   20d44:	ldr	r6, [sp, #8]
   20d48:	add	sp, sp, #12
   20d4c:	pop	{pc}		; (ldr pc, [sp], #4)
   20d50:	mov	r3, #0
   20d54:	str	r3, [r0]
   20d58:	str	r3, [r0, #4]
   20d5c:	str	r3, [r0, #8]
   20d60:	mov	r0, r3
   20d64:	bx	lr
   20d68:	strd	r4, [sp, #-32]!	; 0xffffffe0
   20d6c:	strd	r6, [sp, #8]
   20d70:	strd	r8, [sp, #16]
   20d74:	str	sl, [sp, #24]
   20d78:	str	lr, [sp, #28]
   20d7c:	mov	r5, r0
   20d80:	mov	r4, r2
   20d84:	subs	r6, r1, #0
   20d88:	beq	20da4 <__assert_fail@plt+0xf200>
   20d8c:	ldr	r0, [r6, #4]
   20d90:	cmp	r2, #0
   20d94:	cmpne	r0, #0
   20d98:	bgt	20de0 <__assert_fail@plt+0xf23c>
   20d9c:	cmp	r0, #0
   20da0:	bgt	20dec <__assert_fail@plt+0xf248>
   20da4:	cmp	r4, #0
   20da8:	beq	20db8 <__assert_fail@plt+0xf214>
   20dac:	ldr	r3, [r4, #4]
   20db0:	cmp	r3, #0
   20db4:	bgt	20e28 <__assert_fail@plt+0xf284>
   20db8:	mov	r0, #0
   20dbc:	str	r0, [r5]
   20dc0:	str	r0, [r5, #4]
   20dc4:	str	r0, [r5, #8]
   20dc8:	ldrd	r4, [sp]
   20dcc:	ldrd	r6, [sp, #8]
   20dd0:	ldrd	r8, [sp, #16]
   20dd4:	ldr	sl, [sp, #24]
   20dd8:	add	sp, sp, #28
   20ddc:	pop	{pc}		; (ldr pc, [sp], #4)
   20de0:	ldr	r3, [r2, #4]
   20de4:	cmp	r3, #0
   20de8:	bgt	20dfc <__assert_fail@plt+0xf258>
   20dec:	mov	r1, r6
   20df0:	mov	r0, r5
   20df4:	bl	20ce0 <__assert_fail@plt+0xf13c>
   20df8:	b	20dc8 <__assert_fail@plt+0xf224>
   20dfc:	add	r0, r0, r3
   20e00:	str	r0, [r5]
   20e04:	lsl	r0, r0, #2
   20e08:	bl	2f010 <__assert_fail@plt+0x1d46c>
   20e0c:	str	r0, [r5, #8]
   20e10:	cmp	r0, #0
   20e14:	beq	20f04 <__assert_fail@plt+0xf360>
   20e18:	mov	r3, #0
   20e1c:	mov	r8, r3
   20e20:	mov	r7, r3
   20e24:	b	20e48 <__assert_fail@plt+0xf2a4>
   20e28:	mov	r1, r4
   20e2c:	mov	r0, r5
   20e30:	bl	20ce0 <__assert_fail@plt+0xf13c>
   20e34:	b	20dc8 <__assert_fail@plt+0xf224>
   20e38:	add	r8, r8, #1
   20e3c:	ldr	r2, [r5, #8]
   20e40:	str	r1, [r2, r3, lsl #2]
   20e44:	add	r3, r3, #1
   20e48:	mov	r9, r3
   20e4c:	ldr	r2, [r6, #4]
   20e50:	cmp	r2, r7
   20e54:	ble	20ec0 <__assert_fail@plt+0xf31c>
   20e58:	ldr	r1, [r4, #4]
   20e5c:	cmp	r1, r8
   20e60:	ble	20e94 <__assert_fail@plt+0xf2f0>
   20e64:	ldr	r2, [r6, #8]
   20e68:	ldr	r2, [r2, r7, lsl #2]
   20e6c:	ldr	r1, [r4, #8]
   20e70:	ldr	r1, [r1, r8, lsl #2]
   20e74:	cmp	r2, r1
   20e78:	bgt	20e38 <__assert_fail@plt+0xf294>
   20e7c:	cmp	r2, r1
   20e80:	addeq	r8, r8, #1
   20e84:	add	r7, r7, #1
   20e88:	ldr	r1, [r5, #8]
   20e8c:	str	r2, [r1, r3, lsl #2]
   20e90:	b	20e44 <__assert_fail@plt+0xf2a0>
   20e94:	ldr	r0, [r5, #8]
   20e98:	sub	r2, r2, r7
   20e9c:	ldr	r1, [r6, #8]
   20ea0:	lsl	r2, r2, #2
   20ea4:	add	r1, r1, r7, lsl #2
   20ea8:	add	r0, r0, r3, lsl #2
   20eac:	bl	11784 <memcpy@plt>
   20eb0:	ldr	r3, [r6, #4]
   20eb4:	sub	r7, r3, r7
   20eb8:	add	r9, r9, r7
   20ebc:	b	20ecc <__assert_fail@plt+0xf328>
   20ec0:	ldr	r2, [r4, #4]
   20ec4:	cmp	r2, r8
   20ec8:	bgt	20ed8 <__assert_fail@plt+0xf334>
   20ecc:	str	r9, [r5, #4]
   20ed0:	mov	r0, #0
   20ed4:	b	20dc8 <__assert_fail@plt+0xf224>
   20ed8:	ldr	r0, [r5, #8]
   20edc:	sub	r2, r2, r8
   20ee0:	ldr	r1, [r4, #8]
   20ee4:	lsl	r2, r2, #2
   20ee8:	add	r1, r1, r8, lsl #2
   20eec:	add	r0, r0, r3, lsl #2
   20ef0:	bl	11784 <memcpy@plt>
   20ef4:	ldr	r3, [r4, #4]
   20ef8:	sub	r8, r3, r8
   20efc:	add	r9, r9, r8
   20f00:	b	20ecc <__assert_fail@plt+0xf328>
   20f04:	mov	r0, #12
   20f08:	b	20dc8 <__assert_fail@plt+0xf224>
   20f0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20f10:	strd	r6, [sp, #8]
   20f14:	strd	r8, [sp, #16]
   20f18:	strd	sl, [sp, #24]
   20f1c:	str	lr, [sp, #32]
   20f20:	sub	sp, sp, #92	; 0x5c
   20f24:	mov	r5, r0
   20f28:	ldr	r4, [r0, #28]
   20f2c:	ldr	r6, [r0, #36]	; 0x24
   20f30:	ldr	r3, [r0, #48]	; 0x30
   20f34:	cmp	r6, r3
   20f38:	movge	r6, r3
   20f3c:	ldrb	r3, [r0, #74]	; 0x4a
   20f40:	cmp	r3, #0
   20f44:	bne	20f54 <__assert_fail@plt+0xf3b0>
   20f48:	ldr	r3, [r0, #64]	; 0x40
   20f4c:	cmp	r3, #0
   20f50:	beq	20f88 <__assert_fail@plt+0xf3e4>
   20f54:	ldr	r7, [r5, #32]
   20f58:	cmp	r4, r6
   20f5c:	blt	210b4 <__assert_fail@plt+0xf510>
   20f60:	str	r4, [r5, #28]
   20f64:	str	r7, [r5, #32]
   20f68:	mov	r0, #0
   20f6c:	add	sp, sp, #92	; 0x5c
   20f70:	ldrd	r4, [sp]
   20f74:	ldrd	r6, [sp, #8]
   20f78:	ldrd	r8, [sp, #16]
   20f7c:	ldrd	sl, [sp, #24]
   20f80:	add	sp, sp, #32
   20f84:	pop	{pc}		; (ldr pc, [sp], #4)
   20f88:	ldrb	r3, [r0, #76]	; 0x4c
   20f8c:	cmp	r3, #0
   20f90:	bne	20f54 <__assert_fail@plt+0xf3b0>
   20f94:	cmp	r4, r6
   20f98:	bge	21214 <__assert_fail@plt+0xf670>
   20f9c:	add	r3, r0, #16
   20fa0:	str	r3, [sp, #4]
   20fa4:	mvn	r7, #0
   20fa8:	b	21060 <__assert_fail@plt+0xf4bc>
   20fac:	ldr	r0, [sp, #4]
   20fb0:	ldrd	r2, [r0]
   20fb4:	strd	r2, [sp, #80]	; 0x50
   20fb8:	mov	r9, r4
   20fbc:	add	r1, r8, r4
   20fc0:	mov	r3, r0
   20fc4:	sub	r2, r6, r4
   20fc8:	add	r1, sl, r1
   20fcc:	add	r0, sp, #12
   20fd0:	bl	1be94 <__assert_fail@plt+0xa2f0>
   20fd4:	mov	r8, r0
   20fd8:	sub	r3, r0, #1
   20fdc:	cmn	r3, #4
   20fe0:	bhi	211b0 <__assert_fail@plt+0xf60c>
   20fe4:	ldr	sl, [sp, #12]
   20fe8:	mov	r0, sl
   20fec:	bl	11b50 <towupper@plt>
   20ff0:	mov	fp, r0
   20ff4:	cmp	sl, r0
   20ff8:	beq	2118c <__assert_fail@plt+0xf5e8>
   20ffc:	add	r2, sp, #80	; 0x50
   21000:	mov	r1, r0
   21004:	add	r0, sp, #16
   21008:	bl	116dc <wcrtomb@plt>
   2100c:	cmp	r8, r0
   21010:	bne	210b0 <__assert_fail@plt+0xf50c>
   21014:	ldr	r0, [r5, #4]
   21018:	mov	r2, r8
   2101c:	add	r1, sp, #16
   21020:	add	r0, r0, r4
   21024:	bl	11784 <memcpy@plt>
   21028:	add	r4, r4, #1
   2102c:	ldr	r3, [r5, #8]
   21030:	str	fp, [r3, r9, lsl #2]
   21034:	add	r9, r9, r8
   21038:	cmp	r4, r9
   2103c:	bge	21058 <__assert_fail@plt+0xf4b4>
   21040:	ldr	r3, [r5, #8]
   21044:	str	r7, [r3, r4, lsl #2]
   21048:	add	r4, r4, #1
   2104c:	cmp	r9, r4
   21050:	bne	21040 <__assert_fail@plt+0xf49c>
   21054:	mov	r4, r9
   21058:	cmp	r6, r4
   2105c:	ble	21214 <__assert_fail@plt+0xf670>
   21060:	ldr	sl, [r5]
   21064:	ldr	r8, [r5, #24]
   21068:	add	r3, sl, r8
   2106c:	ldrb	fp, [r3, r4]
   21070:	bics	r3, fp, #127	; 0x7f
   21074:	bne	20fac <__assert_fail@plt+0xf408>
   21078:	ldr	r0, [sp, #4]
   2107c:	bl	117b4 <mbsinit@plt>
   21080:	cmp	r0, #0
   21084:	beq	20fac <__assert_fail@plt+0xf408>
   21088:	mov	r0, fp
   2108c:	bl	11b50 <towupper@plt>
   21090:	bics	r3, r0, #127	; 0x7f
   21094:	bne	20fac <__assert_fail@plt+0xf408>
   21098:	ldr	r3, [r5, #4]
   2109c:	strb	r0, [r3, r4]
   210a0:	ldr	r3, [r5, #8]
   210a4:	str	r0, [r3, r4, lsl #2]
   210a8:	add	r4, r4, #1
   210ac:	b	21058 <__assert_fail@plt+0xf4b4>
   210b0:	mov	r7, r4
   210b4:	sub	r2, r6, r4
   210b8:	ldrd	r0, [r5, #16]
   210bc:	strd	r0, [sp, #80]	; 0x50
   210c0:	ldr	r3, [r5, #64]	; 0x40
   210c4:	cmp	r3, #0
   210c8:	bne	21224 <__assert_fail@plt+0xf680>
   210cc:	ldr	r3, [r5, #24]
   210d0:	add	r3, r7, r3
   210d4:	ldr	r1, [r5]
   210d8:	add	r3, r1, r3
   210dc:	str	r3, [sp, #4]
   210e0:	add	r3, r5, #16
   210e4:	ldr	r1, [sp, #4]
   210e8:	add	r0, sp, #12
   210ec:	bl	1be94 <__assert_fail@plt+0xa2f0>
   210f0:	mov	r8, r0
   210f4:	sub	fp, r0, #1
   210f8:	cmn	fp, #4
   210fc:	bhi	2140c <__assert_fail@plt+0xf868>
   21100:	ldr	sl, [sp, #12]
   21104:	mov	r0, sl
   21108:	bl	11b50 <towupper@plt>
   2110c:	mov	r9, r0
   21110:	cmp	sl, r0
   21114:	beq	213cc <__assert_fail@plt+0xf828>
   21118:	add	r2, sp, #80	; 0x50
   2111c:	mov	r1, r0
   21120:	add	r0, sp, #16
   21124:	bl	116dc <wcrtomb@plt>
   21128:	mov	sl, r0
   2112c:	cmp	r8, r0
   21130:	bne	21284 <__assert_fail@plt+0xf6e0>
   21134:	ldr	r0, [r5, #4]
   21138:	mov	r2, sl
   2113c:	add	r1, sp, #16
   21140:	add	r0, r0, r4
   21144:	bl	11784 <memcpy@plt>
   21148:	ldrb	r3, [r5, #76]	; 0x4c
   2114c:	cmp	r3, #0
   21150:	bne	213e4 <__assert_fail@plt+0xf840>
   21154:	add	r7, r7, r8
   21158:	add	r3, r4, #1
   2115c:	ldr	r2, [r5, #8]
   21160:	str	r9, [r2, r4, lsl #2]
   21164:	add	r4, r4, r8
   21168:	cmp	r3, r4
   2116c:	bge	21488 <__assert_fail@plt+0xf8e4>
   21170:	mvn	r1, #0
   21174:	ldr	r2, [r5, #8]
   21178:	str	r1, [r2, r3, lsl #2]
   2117c:	add	r3, r3, #1
   21180:	cmp	r4, r3
   21184:	bne	21174 <__assert_fail@plt+0xf5d0>
   21188:	b	20f58 <__assert_fail@plt+0xf3b4>
   2118c:	ldr	r0, [r5, #4]
   21190:	ldr	r3, [r5, #24]
   21194:	add	r3, r4, r3
   21198:	ldr	r1, [r5]
   2119c:	mov	r2, r8
   211a0:	add	r1, r1, r3
   211a4:	add	r0, r0, r4
   211a8:	bl	11784 <memcpy@plt>
   211ac:	b	21028 <__assert_fail@plt+0xf484>
   211b0:	cmn	r3, #3
   211b4:	bhi	211e0 <__assert_fail@plt+0xf63c>
   211b8:	ldr	r2, [r5, #36]	; 0x24
   211bc:	ldr	r3, [r5, #48]	; 0x30
   211c0:	cmp	r2, r3
   211c4:	blt	2120c <__assert_fail@plt+0xf668>
   211c8:	ldr	r3, [r5, #4]
   211cc:	strb	fp, [r3, r4]
   211d0:	add	r4, r4, #1
   211d4:	ldr	r3, [r5, #8]
   211d8:	str	fp, [r3, r9, lsl #2]
   211dc:	b	21058 <__assert_fail@plt+0xf4b4>
   211e0:	ldr	r3, [r5, #4]
   211e4:	strb	fp, [r3, r4]
   211e8:	add	r4, r4, #1
   211ec:	ldr	r3, [r5, #8]
   211f0:	str	fp, [r3, r9, lsl #2]
   211f4:	cmn	r0, #1
   211f8:	bne	21058 <__assert_fail@plt+0xf4b4>
   211fc:	ldrd	r2, [sp, #80]	; 0x50
   21200:	ldr	r1, [sp, #4]
   21204:	strd	r2, [r1]
   21208:	b	21058 <__assert_fail@plt+0xf4b4>
   2120c:	ldrd	r2, [sp, #80]	; 0x50
   21210:	strd	r2, [r5, #16]
   21214:	str	r4, [r5, #28]
   21218:	str	r4, [r5, #32]
   2121c:	mov	r0, #0
   21220:	b	20f6c <__assert_fail@plt+0xf3c8>
   21224:	ldr	lr, [r5, #80]	; 0x50
   21228:	cmp	r2, #0
   2122c:	cmpgt	lr, #0
   21230:	ble	21278 <__assert_fail@plt+0xf6d4>
   21234:	ldr	r8, [r5]
   21238:	ldr	ip, [r5, #24]
   2123c:	add	ip, r7, ip
   21240:	add	r1, r8, ip
   21244:	add	r0, sp, #16
   21248:	cmp	lr, r2
   2124c:	movge	lr, r2
   21250:	mov	r8, r1
   21254:	ldrb	ip, [r1], #1
   21258:	ldrb	ip, [r3, ip]
   2125c:	strb	ip, [r0], #1
   21260:	sub	ip, r1, r8
   21264:	cmp	lr, ip
   21268:	bgt	21254 <__assert_fail@plt+0xf6b0>
   2126c:	add	r3, sp, #16
   21270:	str	r3, [sp, #4]
   21274:	b	210e0 <__assert_fail@plt+0xf53c>
   21278:	add	r3, sp, #16
   2127c:	str	r3, [sp, #4]
   21280:	b	210e0 <__assert_fail@plt+0xf53c>
   21284:	cmn	r0, #1
   21288:	beq	213b4 <__assert_fail@plt+0xf810>
   2128c:	mov	r6, r4
   21290:	add	r3, r4, r0
   21294:	str	r3, [sp, #4]
   21298:	ldr	r0, [r5, #36]	; 0x24
   2129c:	cmp	r3, r0
   212a0:	bls	212b0 <__assert_fail@plt+0xf70c>
   212a4:	ldrd	r2, [sp, #80]	; 0x50
   212a8:	strd	r2, [r5, #16]
   212ac:	b	20f60 <__assert_fail@plt+0xf3bc>
   212b0:	ldr	r3, [r5, #12]
   212b4:	cmp	r3, #0
   212b8:	beq	21398 <__assert_fail@plt+0xf7f4>
   212bc:	ldrb	r3, [r5, #76]	; 0x4c
   212c0:	cmp	r3, #0
   212c4:	bne	212ec <__assert_fail@plt+0xf748>
   212c8:	cmp	r6, #0
   212cc:	beq	212e4 <__assert_fail@plt+0xf740>
   212d0:	ldr	r2, [r5, #12]
   212d4:	str	r3, [r2, r3, lsl #2]
   212d8:	add	r3, r3, #1
   212dc:	cmp	r6, r3
   212e0:	bne	212d0 <__assert_fail@plt+0xf72c>
   212e4:	mov	r3, #1
   212e8:	strb	r3, [r5, #76]	; 0x4c
   212ec:	ldr	r0, [r5, #4]
   212f0:	mov	r2, sl
   212f4:	add	r1, sp, #16
   212f8:	add	r0, r0, r6
   212fc:	bl	11784 <memcpy@plt>
   21300:	lsl	r3, r6, #2
   21304:	ldr	r2, [r5, #8]
   21308:	str	r9, [r2, r6, lsl #2]
   2130c:	ldr	r2, [r5, #12]
   21310:	str	r7, [r2, r6, lsl #2]
   21314:	cmp	sl, #1
   21318:	bls	21358 <__assert_fail@plt+0xf7b4>
   2131c:	add	r3, r3, #4
   21320:	mov	r2, #1
   21324:	mvn	r0, #0
   21328:	cmp	r2, r8
   2132c:	movcc	r1, r2
   21330:	movcs	r1, fp
   21334:	ldr	ip, [r5, #12]
   21338:	add	r1, r7, r1
   2133c:	str	r1, [ip, r3]
   21340:	ldr	r1, [r5, #8]
   21344:	str	r0, [r1, r3]
   21348:	add	r2, r2, #1
   2134c:	add	r3, r3, #4
   21350:	cmp	r2, sl
   21354:	bne	21328 <__assert_fail@plt+0xf784>
   21358:	sub	sl, sl, r8
   2135c:	ldr	r6, [r5, #48]	; 0x30
   21360:	add	r6, sl, r6
   21364:	str	r6, [r5, #48]	; 0x30
   21368:	ldr	r3, [r5, #52]	; 0x34
   2136c:	cmp	r3, r7
   21370:	ble	21380 <__assert_fail@plt+0xf7dc>
   21374:	ldr	r3, [r5, #56]	; 0x38
   21378:	add	sl, r3, sl
   2137c:	str	sl, [r5, #56]	; 0x38
   21380:	ldr	r3, [r5, #36]	; 0x24
   21384:	cmp	r6, r3
   21388:	movge	r6, r3
   2138c:	ldr	r4, [sp, #4]
   21390:	add	r7, r7, r8
   21394:	b	20f58 <__assert_fail@plt+0xf3b4>
   21398:	lsl	r0, r0, #2
   2139c:	bl	2f010 <__assert_fail@plt+0x1d46c>
   213a0:	str	r0, [r5, #12]
   213a4:	cmp	r0, #0
   213a8:	moveq	r0, #12
   213ac:	bne	212bc <__assert_fail@plt+0xf718>
   213b0:	b	20f6c <__assert_fail@plt+0xf3c8>
   213b4:	ldr	r0, [r5, #4]
   213b8:	mov	r2, r8
   213bc:	ldr	r1, [sp, #4]
   213c0:	add	r0, r0, r4
   213c4:	bl	11784 <memcpy@plt>
   213c8:	b	21148 <__assert_fail@plt+0xf5a4>
   213cc:	ldr	r0, [r5, #4]
   213d0:	mov	r2, r8
   213d4:	ldr	r1, [sp, #4]
   213d8:	add	r0, r0, r4
   213dc:	bl	11784 <memcpy@plt>
   213e0:	b	21148 <__assert_fail@plt+0xf5a4>
   213e4:	lsl	r2, r4, #2
   213e8:	mov	r3, r7
   213ec:	add	r0, r8, r7
   213f0:	ldr	r1, [r5, #12]
   213f4:	str	r3, [r1, r2]
   213f8:	add	r2, r2, #4
   213fc:	add	r3, r3, #1
   21400:	cmp	r3, r0
   21404:	bne	213f0 <__assert_fail@plt+0xf84c>
   21408:	b	21154 <__assert_fail@plt+0xf5b0>
   2140c:	cmn	fp, #3
   21410:	bhi	21424 <__assert_fail@plt+0xf880>
   21414:	ldr	r2, [r5, #36]	; 0x24
   21418:	ldr	r3, [r5, #48]	; 0x30
   2141c:	cmp	r2, r3
   21420:	blt	2147c <__assert_fail@plt+0xf8d8>
   21424:	ldr	r3, [r5]
   21428:	ldr	r2, [r5, #24]
   2142c:	add	r3, r3, r7
   21430:	ldrb	r3, [r3, r2]
   21434:	ldr	r2, [r5, #64]	; 0x40
   21438:	cmp	r2, #0
   2143c:	ldrbne	r3, [r2, r3]
   21440:	mov	r1, r4
   21444:	ldr	r2, [r5, #4]
   21448:	strb	r3, [r2, r4]
   2144c:	ldrb	r2, [r5, #76]	; 0x4c
   21450:	cmp	r2, #0
   21454:	ldrne	r2, [r5, #12]
   21458:	strne	r7, [r2, r4, lsl #2]
   2145c:	add	r7, r7, #1
   21460:	add	r4, r4, #1
   21464:	ldr	r2, [r5, #8]
   21468:	str	r3, [r2, r1, lsl #2]
   2146c:	cmn	r8, #1
   21470:	ldrdeq	r2, [sp, #80]	; 0x50
   21474:	strdeq	r2, [r5, #16]
   21478:	b	20f58 <__assert_fail@plt+0xf3b4>
   2147c:	ldrd	r2, [sp, #80]	; 0x50
   21480:	strd	r2, [r5, #16]
   21484:	b	20f60 <__assert_fail@plt+0xf3bc>
   21488:	mov	r4, r3
   2148c:	b	20f58 <__assert_fail@plt+0xf3b4>
   21490:	strd	r4, [sp, #-16]!
   21494:	str	r6, [sp, #8]
   21498:	str	lr, [sp, #12]
   2149c:	mov	r5, r0
   214a0:	ldr	r6, [r0, #36]	; 0x24
   214a4:	ldr	r3, [r0, #48]	; 0x30
   214a8:	cmp	r6, r3
   214ac:	movge	r6, r3
   214b0:	ldr	r4, [r0, #28]
   214b4:	cmp	r6, r4
   214b8:	ble	21510 <__assert_fail@plt+0xf96c>
   214bc:	bl	11934 <__ctype_toupper_loc@plt>
   214c0:	ldr	r3, [r5]
   214c4:	ldr	r2, [r5, #24]
   214c8:	add	r3, r3, r4
   214cc:	ldrb	r3, [r3, r2]
   214d0:	ldr	r2, [r5, #64]	; 0x40
   214d4:	cmp	r2, #0
   214d8:	ldrbne	r3, [r2, r3]
   214dc:	ldr	r2, [r5, #4]
   214e0:	ldr	r1, [r0]
   214e4:	ldr	r3, [r1, r3, lsl #2]
   214e8:	strb	r3, [r2, r4]
   214ec:	add	r4, r4, #1
   214f0:	cmp	r6, r4
   214f4:	bne	214c0 <__assert_fail@plt+0xf91c>
   214f8:	str	r6, [r5, #28]
   214fc:	str	r6, [r5, #32]
   21500:	ldrd	r4, [sp]
   21504:	ldr	r6, [sp, #8]
   21508:	add	sp, sp, #12
   2150c:	pop	{pc}		; (ldr pc, [sp], #4)
   21510:	mov	r6, r4
   21514:	b	214f8 <__assert_fail@plt+0xf954>
   21518:	strd	r4, [sp, #-16]!
   2151c:	str	r6, [sp, #8]
   21520:	str	lr, [sp, #12]
   21524:	ldr	r3, [r0, #36]	; 0x24
   21528:	cmn	r3, #-536870910	; 0xe0000002
   2152c:	bhi	215f4 <__assert_fail@plt+0xfa50>
   21530:	mov	r4, r0
   21534:	lsl	r3, r3, #1
   21538:	ldr	r2, [r0, #48]	; 0x30
   2153c:	cmp	r3, r2
   21540:	movge	r3, r2
   21544:	cmp	r3, r1
   21548:	movge	r1, r3
   2154c:	bl	202a8 <__assert_fail@plt+0xe704>
   21550:	subs	r5, r0, #0
   21554:	bne	215a4 <__assert_fail@plt+0xfa00>
   21558:	ldr	r0, [r4, #100]	; 0x64
   2155c:	cmp	r0, #0
   21560:	beq	21580 <__assert_fail@plt+0xf9dc>
   21564:	ldr	r1, [r4, #36]	; 0x24
   21568:	add	r1, r1, #1
   2156c:	lsl	r1, r1, #2
   21570:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   21574:	cmp	r0, #0
   21578:	beq	215fc <__assert_fail@plt+0xfa58>
   2157c:	str	r0, [r4, #100]	; 0x64
   21580:	ldrb	r3, [r4, #72]	; 0x48
   21584:	cmp	r3, #0
   21588:	beq	215c4 <__assert_fail@plt+0xfa20>
   2158c:	ldr	r3, [r4, #80]	; 0x50
   21590:	cmp	r3, #1
   21594:	ble	215b8 <__assert_fail@plt+0xfa14>
   21598:	mov	r0, r4
   2159c:	bl	20f0c <__assert_fail@plt+0xf368>
   215a0:	mov	r5, r0
   215a4:	mov	r0, r5
   215a8:	ldrd	r4, [sp]
   215ac:	ldr	r6, [sp, #8]
   215b0:	add	sp, sp, #12
   215b4:	pop	{pc}		; (ldr pc, [sp], #4)
   215b8:	mov	r0, r4
   215bc:	bl	21490 <__assert_fail@plt+0xf8ec>
   215c0:	b	215a4 <__assert_fail@plt+0xfa00>
   215c4:	ldr	r3, [r4, #80]	; 0x50
   215c8:	cmp	r3, #1
   215cc:	bgt	215e8 <__assert_fail@plt+0xfa44>
   215d0:	ldr	r3, [r4, #64]	; 0x40
   215d4:	cmp	r3, #0
   215d8:	beq	215a4 <__assert_fail@plt+0xfa00>
   215dc:	mov	r0, r4
   215e0:	bl	1f630 <__assert_fail@plt+0xda8c>
   215e4:	b	215a4 <__assert_fail@plt+0xfa00>
   215e8:	mov	r0, r4
   215ec:	bl	20974 <__assert_fail@plt+0xedd0>
   215f0:	b	215a4 <__assert_fail@plt+0xfa00>
   215f4:	mov	r5, #12
   215f8:	b	215a4 <__assert_fail@plt+0xfa00>
   215fc:	mov	r5, #12
   21600:	b	215a4 <__assert_fail@plt+0xfa00>
   21604:	ldr	r3, [r1, #40]	; 0x28
   21608:	ldr	ip, [r1, #56]	; 0x38
   2160c:	cmp	ip, r3
   21610:	ble	218a8 <__assert_fail@plt+0xfd04>
   21614:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21618:	strd	r6, [sp, #8]
   2161c:	str	r8, [sp, #16]
   21620:	str	lr, [sp, #20]
   21624:	sub	sp, sp, #8
   21628:	ldr	ip, [r1, #4]
   2162c:	ldrb	r6, [ip, r3]
   21630:	strb	r6, [r0]
   21634:	ldrb	r3, [r0, #6]
   21638:	and	r3, r3, #191	; 0xbf
   2163c:	bfc	r3, #5, #1
   21640:	strb	r3, [r0, #6]
   21644:	ldr	r3, [r1, #80]	; 0x50
   21648:	cmp	r3, #1
   2164c:	ble	21670 <__assert_fail@plt+0xfacc>
   21650:	ldr	ip, [r1, #40]	; 0x28
   21654:	ldr	lr, [r1, #28]
   21658:	cmp	ip, lr
   2165c:	beq	21670 <__assert_fail@plt+0xfacc>
   21660:	ldr	lr, [r1, #8]
   21664:	ldr	ip, [lr, ip, lsl #2]
   21668:	cmn	ip, #1
   2166c:	beq	218b8 <__assert_fail@plt+0xfd14>
   21670:	mov	r7, r2
   21674:	mov	r4, r1
   21678:	mov	r5, r0
   2167c:	cmp	r6, #92	; 0x5c
   21680:	beq	218d4 <__assert_fail@plt+0xfd30>
   21684:	mov	r3, #1
   21688:	strb	r3, [r0, #4]
   2168c:	ldr	r3, [r1, #80]	; 0x50
   21690:	cmp	r3, #1
   21694:	ble	21db8 <__assert_fail@plt+0x10214>
   21698:	ldr	r1, [r1, #40]	; 0x28
   2169c:	mov	r0, r4
   216a0:	bl	1f614 <__assert_fail@plt+0xda70>
   216a4:	mov	r8, r0
   216a8:	bl	119c4 <iswalnum@plt>
   216ac:	adds	r0, r0, #0
   216b0:	movne	r0, #1
   216b4:	cmp	r8, #95	; 0x5f
   216b8:	orreq	r0, r0, #1
   216bc:	ldrb	r3, [r5, #6]
   216c0:	bfi	r3, r0, #6, #1
   216c4:	strb	r3, [r5, #6]
   216c8:	sub	r3, r6, #10
   216cc:	cmp	r3, #115	; 0x73
   216d0:	ldrls	pc, [pc, r3, lsl #2]
   216d4:	b	21fd0 <__assert_fail@plt+0x1042c>
   216d8:	andeq	r1, r2, r4, ror #27
   216dc:	ldrdeq	r1, [r2], -r0
   216e0:	ldrdeq	r1, [r2], -r0
   216e4:	ldrdeq	r1, [r2], -r0
   216e8:	ldrdeq	r1, [r2], -r0
   216ec:	ldrdeq	r1, [r2], -r0
   216f0:	ldrdeq	r1, [r2], -r0
   216f4:	ldrdeq	r1, [r2], -r0
   216f8:	ldrdeq	r1, [r2], -r0
   216fc:	ldrdeq	r1, [r2], -r0
   21700:	ldrdeq	r1, [r2], -r0
   21704:	ldrdeq	r1, [r2], -r0
   21708:	ldrdeq	r1, [r2], -r0
   2170c:	ldrdeq	r1, [r2], -r0
   21710:	ldrdeq	r1, [r2], -r0
   21714:	ldrdeq	r1, [r2], -r0
   21718:	ldrdeq	r1, [r2], -r0
   2171c:	ldrdeq	r1, [r2], -r0
   21720:	ldrdeq	r1, [r2], -r0
   21724:	ldrdeq	r1, [r2], -r0
   21728:	ldrdeq	r1, [r2], -r0
   2172c:	ldrdeq	r1, [r2], -r0
   21730:	ldrdeq	r1, [r2], -r0
   21734:	ldrdeq	r1, [r2], -r0
   21738:	ldrdeq	r1, [r2], -r0
   2173c:	ldrdeq	r1, [r2], -r0
   21740:	andeq	r1, r2, r8, asr pc
   21744:	ldrdeq	r1, [r2], -r0
   21748:	ldrdeq	r1, [r2], -r0
   2174c:	ldrdeq	r1, [r2], -r0
   21750:	andeq	r1, r2, r4, lsr #29
   21754:	andeq	r1, r2, r0, asr #29
   21758:	andeq	r1, r2, ip, lsl lr
   2175c:	andeq	r1, r2, ip, lsr #28
   21760:	ldrdeq	r1, [r2], -r0
   21764:	ldrdeq	r1, [r2], -r0
   21768:	andeq	r1, r2, ip, ror #29
   2176c:	ldrdeq	r1, [r2], -r0
   21770:	ldrdeq	r1, [r2], -r0
   21774:	ldrdeq	r1, [r2], -r0
   21778:	ldrdeq	r1, [r2], -r0
   2177c:	ldrdeq	r1, [r2], -r0
   21780:	ldrdeq	r1, [r2], -r0
   21784:	ldrdeq	r1, [r2], -r0
   21788:	ldrdeq	r1, [r2], -r0
   2178c:	ldrdeq	r1, [r2], -r0
   21790:	ldrdeq	r1, [r2], -r0
   21794:	ldrdeq	r1, [r2], -r0
   21798:	ldrdeq	r1, [r2], -r0
   2179c:	ldrdeq	r1, [r2], -r0
   217a0:	ldrdeq	r1, [r2], -r0
   217a4:	ldrdeq	r1, [r2], -r0
   217a8:	ldrdeq	r1, [r2], -r0
   217ac:	andeq	r1, r2, ip, asr #28
   217b0:	ldrdeq	r1, [r2], -r0
   217b4:	ldrdeq	r1, [r2], -r0
   217b8:	ldrdeq	r1, [r2], -r0
   217bc:	ldrdeq	r1, [r2], -r0
   217c0:	ldrdeq	r1, [r2], -r0
   217c4:	ldrdeq	r1, [r2], -r0
   217c8:	ldrdeq	r1, [r2], -r0
   217cc:	ldrdeq	r1, [r2], -r0
   217d0:	ldrdeq	r1, [r2], -r0
   217d4:	ldrdeq	r1, [r2], -r0
   217d8:	ldrdeq	r1, [r2], -r0
   217dc:	ldrdeq	r1, [r2], -r0
   217e0:	ldrdeq	r1, [r2], -r0
   217e4:	ldrdeq	r1, [r2], -r0
   217e8:	ldrdeq	r1, [r2], -r0
   217ec:	ldrdeq	r1, [r2], -r0
   217f0:	ldrdeq	r1, [r2], -r0
   217f4:	ldrdeq	r1, [r2], -r0
   217f8:	ldrdeq	r1, [r2], -r0
   217fc:	ldrdeq	r1, [r2], -r0
   21800:	ldrdeq	r1, [r2], -r0
   21804:	ldrdeq	r1, [r2], -r0
   21808:	ldrdeq	r1, [r2], -r0
   2180c:	ldrdeq	r1, [r2], -r0
   21810:	ldrdeq	r1, [r2], -r0
   21814:	ldrdeq	r1, [r2], -r0
   21818:	ldrdeq	r1, [r2], -r0
   2181c:	ldrdeq	r1, [r2], -ip
   21820:	ldrdeq	r1, [r2], -r0
   21824:	ldrdeq	r1, [r2], -r0
   21828:	strdeq	r1, [r2], -ip
   2182c:	ldrdeq	r1, [r2], -r0
   21830:	ldrdeq	r1, [r2], -r0
   21834:	ldrdeq	r1, [r2], -r0
   21838:	ldrdeq	r1, [r2], -r0
   2183c:	ldrdeq	r1, [r2], -r0
   21840:	ldrdeq	r1, [r2], -r0
   21844:	ldrdeq	r1, [r2], -r0
   21848:	ldrdeq	r1, [r2], -r0
   2184c:	ldrdeq	r1, [r2], -r0
   21850:	ldrdeq	r1, [r2], -r0
   21854:	ldrdeq	r1, [r2], -r0
   21858:	ldrdeq	r1, [r2], -r0
   2185c:	ldrdeq	r1, [r2], -r0
   21860:	ldrdeq	r1, [r2], -r0
   21864:	ldrdeq	r1, [r2], -r0
   21868:	ldrdeq	r1, [r2], -r0
   2186c:	ldrdeq	r1, [r2], -r0
   21870:	ldrdeq	r1, [r2], -r0
   21874:	ldrdeq	r1, [r2], -r0
   21878:	ldrdeq	r1, [r2], -r0
   2187c:	ldrdeq	r1, [r2], -r0
   21880:	ldrdeq	r1, [r2], -r0
   21884:	ldrdeq	r1, [r2], -r0
   21888:	ldrdeq	r1, [r2], -r0
   2188c:	ldrdeq	r1, [r2], -r0
   21890:	ldrdeq	r1, [r2], -r0
   21894:	ldrdeq	r1, [r2], -r0
   21898:	ldrdeq	r1, [r2], -r0
   2189c:	andeq	r1, r2, ip, ror #28
   218a0:	andeq	r1, r2, r0, lsl #28
   218a4:	andeq	r1, r2, r8, lsl #29
   218a8:	mov	r3, #2
   218ac:	strb	r3, [r0, #4]
   218b0:	mov	r0, #0
   218b4:	bx	lr
   218b8:	mov	r3, #1
   218bc:	strb	r3, [r0, #4]
   218c0:	ldrb	r2, [r0, #6]
   218c4:	orr	r2, r2, #32
   218c8:	strb	r2, [r0, #6]
   218cc:	mov	r0, r3
   218d0:	b	218f4 <__assert_fail@plt+0xfd50>
   218d4:	ldr	r1, [r1, #40]	; 0x28
   218d8:	add	r2, r1, #1
   218dc:	ldr	r0, [r4, #48]	; 0x30
   218e0:	cmp	r2, r0
   218e4:	blt	2190c <__assert_fail@plt+0xfd68>
   218e8:	mov	r3, #36	; 0x24
   218ec:	strb	r3, [r5, #4]
   218f0:	mov	r0, #1
   218f4:	add	sp, sp, #8
   218f8:	ldrd	r4, [sp]
   218fc:	ldrd	r6, [sp, #8]
   21900:	ldr	r8, [sp, #16]
   21904:	add	sp, sp, #20
   21908:	pop	{pc}		; (ldr pc, [sp], #4)
   2190c:	ldrb	r0, [r4, #75]	; 0x4b
   21910:	cmp	r0, #0
   21914:	bne	21ad8 <__assert_fail@plt+0xff34>
   21918:	ldr	r3, [r4, #4]
   2191c:	ldrb	r6, [r3, r2]
   21920:	strb	r6, [r5]
   21924:	mov	r3, #1
   21928:	strb	r3, [r5, #4]
   2192c:	ldr	r3, [r4, #80]	; 0x50
   21930:	cmp	r3, #1
   21934:	ble	21b54 <__assert_fail@plt+0xffb0>
   21938:	ldr	r1, [r4, #40]	; 0x28
   2193c:	add	r1, r1, #1
   21940:	mov	r0, r4
   21944:	bl	1f614 <__assert_fail@plt+0xda70>
   21948:	mov	r4, r0
   2194c:	bl	119c4 <iswalnum@plt>
   21950:	adds	r0, r0, #0
   21954:	movne	r0, #1
   21958:	cmp	r4, #95	; 0x5f
   2195c:	orreq	r0, r0, #1
   21960:	ldrb	r3, [r5, #6]
   21964:	bfi	r3, r0, #6, #1
   21968:	strb	r3, [r5, #6]
   2196c:	sub	r3, r6, #39	; 0x27
   21970:	cmp	r3, #86	; 0x56
   21974:	ldrls	pc, [pc, r3, lsl #2]
   21978:	b	21fc8 <__assert_fail@plt+0x10424>
   2197c:	andeq	r1, r2, r4, ror #25
   21980:	andeq	r1, r2, r8, lsl #26
   21984:	andeq	r1, r2, r4, lsr #26
   21988:	andeq	r1, r2, r8, asr #31
   2198c:	andeq	r1, r2, r0, asr #26
   21990:	andeq	r1, r2, r8, asr #31
   21994:	andeq	r1, r2, r8, asr #31
   21998:	andeq	r1, r2, r8, asr #31
   2199c:	andeq	r1, r2, r8, asr #31
   219a0:	andeq	r1, r2, r8, asr #31
   219a4:	muleq	r2, ip, fp
   219a8:	muleq	r2, ip, fp
   219ac:	muleq	r2, ip, fp
   219b0:	muleq	r2, ip, fp
   219b4:	muleq	r2, ip, fp
   219b8:	muleq	r2, ip, fp
   219bc:	muleq	r2, ip, fp
   219c0:	muleq	r2, ip, fp
   219c4:	muleq	r2, ip, fp
   219c8:	andeq	r1, r2, r8, asr #31
   219cc:	andeq	r1, r2, r8, asr #31
   219d0:	andeq	r1, r2, r0, asr #23
   219d4:	andeq	r1, r2, r8, asr #31
   219d8:	andeq	r1, r2, r4, ror #23
   219dc:	andeq	r1, r2, r0, ror #26
   219e0:	andeq	r1, r2, r8, asr #31
   219e4:	andeq	r1, r2, r8, asr #31
   219e8:	andeq	r1, r2, ip, lsr #24
   219ec:	andeq	r1, r2, r8, asr #31
   219f0:	andeq	r1, r2, r8, asr #31
   219f4:	andeq	r1, r2, r8, asr #31
   219f8:	andeq	r1, r2, r8, asr #31
   219fc:	andeq	r1, r2, r8, asr #31
   21a00:	andeq	r1, r2, r8, asr #31
   21a04:	andeq	r1, r2, r8, asr #31
   21a08:	andeq	r1, r2, r8, asr #31
   21a0c:	andeq	r1, r2, r8, asr #31
   21a10:	andeq	r1, r2, r8, asr #31
   21a14:	andeq	r1, r2, r8, asr #31
   21a18:	andeq	r1, r2, r8, asr #31
   21a1c:	andeq	r1, r2, r8, asr #31
   21a20:	andeq	r1, r2, r8, asr #31
   21a24:	andeq	r1, r2, r8, asr #31
   21a28:	andeq	r1, r2, r8, asr #31
   21a2c:	andeq	r1, r2, r4, lsr #25
   21a30:	andeq	r1, r2, r8, asr #31
   21a34:	andeq	r1, r2, r8, asr #31
   21a38:	andeq	r1, r2, r8, asr #31
   21a3c:	andeq	r1, r2, ip, ror #24
   21a40:	andeq	r1, r2, r8, asr #31
   21a44:	andeq	r1, r2, r8, asr #31
   21a48:	andeq	r1, r2, r8, asr #31
   21a4c:	andeq	r1, r2, r8, asr #31
   21a50:	andeq	r1, r2, r8, asr #31
   21a54:	andeq	r1, r2, r8, asr #31
   21a58:	andeq	r1, r2, r8, asr #31
   21a5c:	andeq	r1, r2, r8, asr #31
   21a60:	andeq	r1, r2, r0, asr #25
   21a64:	andeq	r1, r2, r8, asr #31
   21a68:	andeq	r1, r2, r8, lsl #24
   21a6c:	andeq	r1, r2, r8, asr #31
   21a70:	andeq	r1, r2, r8, asr #31
   21a74:	andeq	r1, r2, r8, asr #31
   21a78:	andeq	r1, r2, r8, asr #31
   21a7c:	andeq	r1, r2, r8, asr #31
   21a80:	andeq	r1, r2, r8, asr #31
   21a84:	andeq	r1, r2, r8, asr #31
   21a88:	andeq	r1, r2, r8, asr #31
   21a8c:	andeq	r1, r2, r8, asr #31
   21a90:	andeq	r1, r2, r8, asr #31
   21a94:	andeq	r1, r2, r8, asr #31
   21a98:	andeq	r1, r2, r8, asr #31
   21a9c:	andeq	r1, r2, r8, asr #31
   21aa0:	andeq	r1, r2, r8, asr #31
   21aa4:	andeq	r1, r2, r8, asr #31
   21aa8:	andeq	r1, r2, r8, asr #31
   21aac:	andeq	r1, r2, r8, lsl #25
   21ab0:	andeq	r1, r2, r8, asr #31
   21ab4:	andeq	r1, r2, r8, asr #31
   21ab8:	andeq	r1, r2, r8, asr #31
   21abc:	andeq	r1, r2, r0, asr ip
   21ac0:	andeq	r1, r2, r8, asr #31
   21ac4:	andeq	r1, r2, r8, asr #31
   21ac8:	andeq	r1, r2, r8, asr #31
   21acc:	andeq	r1, r2, r0, lsl #27
   21ad0:	andeq	r1, r2, r0, lsl #23
   21ad4:	muleq	r2, ip, sp
   21ad8:	cmp	r3, #1
   21adc:	ble	21b14 <__assert_fail@plt+0xff70>
   21ae0:	ldr	r3, [r4, #8]
   21ae4:	lsl	ip, r2, #2
   21ae8:	ldr	r0, [r3, r2, lsl #2]
   21aec:	cmn	r0, #1
   21af0:	beq	21b48 <__assert_fail@plt+0xffa4>
   21af4:	add	r1, r1, #2
   21af8:	ldr	r0, [r4, #28]
   21afc:	cmp	r0, r1
   21b00:	beq	21b14 <__assert_fail@plt+0xff70>
   21b04:	add	r3, r3, ip
   21b08:	ldr	r3, [r3, #4]
   21b0c:	cmn	r3, #1
   21b10:	beq	21b48 <__assert_fail@plt+0xffa4>
   21b14:	ldrb	r3, [r4, #76]	; 0x4c
   21b18:	cmp	r3, #0
   21b1c:	beq	21fd8 <__assert_fail@plt+0x10434>
   21b20:	ldr	r1, [r4, #12]
   21b24:	ldr	r3, [r4]
   21b28:	ldr	r0, [r1, r2, lsl #2]
   21b2c:	ldr	r1, [r4, #24]
   21b30:	add	r3, r3, r0
   21b34:	ldrb	r6, [r3, r1]
   21b38:	bics	r3, r6, #127	; 0x7f
   21b3c:	ldrne	r3, [r4, #4]
   21b40:	ldrbne	r6, [r3, r2]
   21b44:	b	21920 <__assert_fail@plt+0xfd7c>
   21b48:	ldr	r3, [r4, #4]
   21b4c:	ldrb	r6, [r3, r2]
   21b50:	b	21920 <__assert_fail@plt+0xfd7c>
   21b54:	bl	11964 <__ctype_b_loc@plt>
   21b58:	ldr	r2, [r0]
   21b5c:	lsl	r3, r6, #1
   21b60:	ldrh	r3, [r2, r3]
   21b64:	ubfx	r3, r3, #3, #1
   21b68:	cmp	r6, #95	; 0x5f
   21b6c:	orreq	r3, r3, #1
   21b70:	ldrb	r2, [r5, #6]
   21b74:	bfi	r2, r3, #6, #1
   21b78:	strb	r2, [r5, #6]
   21b7c:	b	2196c <__assert_fail@plt+0xfdc8>
   21b80:	tst	r7, #33792	; 0x8400
   21b84:	movne	r0, #2
   21b88:	bne	218f4 <__assert_fail@plt+0xfd50>
   21b8c:	mov	r3, #10
   21b90:	strb	r3, [r5, #4]
   21b94:	mov	r0, #2
   21b98:	b	218f4 <__assert_fail@plt+0xfd50>
   21b9c:	tst	r7, #16384	; 0x4000
   21ba0:	movne	r0, #2
   21ba4:	bne	218f4 <__assert_fail@plt+0xfd50>
   21ba8:	mov	r3, #4
   21bac:	strb	r3, [r5, #4]
   21bb0:	sub	r6, r6, #49	; 0x31
   21bb4:	str	r6, [r5]
   21bb8:	mov	r0, #2
   21bbc:	b	218f4 <__assert_fail@plt+0xfd50>
   21bc0:	tst	r7, #524288	; 0x80000
   21bc4:	movne	r0, #2
   21bc8:	bne	218f4 <__assert_fail@plt+0xfd50>
   21bcc:	mov	r3, #12
   21bd0:	strb	r3, [r5, #4]
   21bd4:	mov	r3, #6
   21bd8:	str	r3, [r5]
   21bdc:	mov	r0, #2
   21be0:	b	218f4 <__assert_fail@plt+0xfd50>
   21be4:	tst	r7, #524288	; 0x80000
   21be8:	movne	r0, #2
   21bec:	bne	218f4 <__assert_fail@plt+0xfd50>
   21bf0:	mov	r3, #12
   21bf4:	strb	r3, [r5, #4]
   21bf8:	mov	r3, #9
   21bfc:	str	r3, [r5]
   21c00:	mov	r0, #2
   21c04:	b	218f4 <__assert_fail@plt+0xfd50>
   21c08:	tst	r7, #524288	; 0x80000
   21c0c:	movne	r0, #2
   21c10:	bne	218f4 <__assert_fail@plt+0xfd50>
   21c14:	mov	r3, #12
   21c18:	strb	r3, [r5, #4]
   21c1c:	mov	r3, #256	; 0x100
   21c20:	str	r3, [r5]
   21c24:	mov	r0, #2
   21c28:	b	218f4 <__assert_fail@plt+0xfd50>
   21c2c:	tst	r7, #524288	; 0x80000
   21c30:	movne	r0, #2
   21c34:	bne	218f4 <__assert_fail@plt+0xfd50>
   21c38:	mov	r3, #12
   21c3c:	strb	r3, [r5, #4]
   21c40:	mov	r3, #512	; 0x200
   21c44:	str	r3, [r5]
   21c48:	mov	r0, #2
   21c4c:	b	218f4 <__assert_fail@plt+0xfd50>
   21c50:	tst	r7, #524288	; 0x80000
   21c54:	movne	r0, #2
   21c58:	bne	218f4 <__assert_fail@plt+0xfd50>
   21c5c:	mov	r3, #32
   21c60:	strb	r3, [r5, #4]
   21c64:	mov	r0, #2
   21c68:	b	218f4 <__assert_fail@plt+0xfd50>
   21c6c:	tst	r7, #524288	; 0x80000
   21c70:	movne	r0, #2
   21c74:	bne	218f4 <__assert_fail@plt+0xfd50>
   21c78:	mov	r3, #33	; 0x21
   21c7c:	strb	r3, [r5, #4]
   21c80:	mov	r0, #2
   21c84:	b	218f4 <__assert_fail@plt+0xfd50>
   21c88:	tst	r7, #524288	; 0x80000
   21c8c:	movne	r0, #2
   21c90:	bne	218f4 <__assert_fail@plt+0xfd50>
   21c94:	mov	r3, #34	; 0x22
   21c98:	strb	r3, [r5, #4]
   21c9c:	mov	r0, #2
   21ca0:	b	218f4 <__assert_fail@plt+0xfd50>
   21ca4:	tst	r7, #524288	; 0x80000
   21ca8:	movne	r0, #2
   21cac:	bne	218f4 <__assert_fail@plt+0xfd50>
   21cb0:	mov	r3, #35	; 0x23
   21cb4:	strb	r3, [r5, #4]
   21cb8:	mov	r0, #2
   21cbc:	b	218f4 <__assert_fail@plt+0xfd50>
   21cc0:	tst	r7, #524288	; 0x80000
   21cc4:	movne	r0, #2
   21cc8:	bne	218f4 <__assert_fail@plt+0xfd50>
   21ccc:	mov	r3, #12
   21cd0:	strb	r3, [r5, #4]
   21cd4:	mov	r3, #64	; 0x40
   21cd8:	str	r3, [r5]
   21cdc:	mov	r0, #2
   21ce0:	b	218f4 <__assert_fail@plt+0xfd50>
   21ce4:	tst	r7, #524288	; 0x80000
   21ce8:	movne	r0, #2
   21cec:	bne	218f4 <__assert_fail@plt+0xfd50>
   21cf0:	mov	r3, #12
   21cf4:	strb	r3, [r5, #4]
   21cf8:	mov	r3, #128	; 0x80
   21cfc:	str	r3, [r5]
   21d00:	mov	r0, #2
   21d04:	b	218f4 <__assert_fail@plt+0xfd50>
   21d08:	tst	r7, #8192	; 0x2000
   21d0c:	movne	r0, #2
   21d10:	bne	218f4 <__assert_fail@plt+0xfd50>
   21d14:	mov	r3, #8
   21d18:	strb	r3, [r5, #4]
   21d1c:	mov	r0, #2
   21d20:	b	218f4 <__assert_fail@plt+0xfd50>
   21d24:	tst	r7, #8192	; 0x2000
   21d28:	movne	r0, #2
   21d2c:	bne	218f4 <__assert_fail@plt+0xfd50>
   21d30:	mov	r3, #9
   21d34:	strb	r3, [r5, #4]
   21d38:	mov	r0, #2
   21d3c:	b	218f4 <__assert_fail@plt+0xfd50>
   21d40:	movw	r2, #1026	; 0x402
   21d44:	and	r2, r7, r2
   21d48:	cmp	r2, #2
   21d4c:	moveq	r3, #18
   21d50:	strbeq	r3, [r5, #4]
   21d54:	moveq	r0, #2
   21d58:	movne	r0, #2
   21d5c:	b	218f4 <__assert_fail@plt+0xfd50>
   21d60:	movw	r2, #1026	; 0x402
   21d64:	and	r2, r7, r2
   21d68:	cmp	r2, #2
   21d6c:	moveq	r3, #19
   21d70:	strbeq	r3, [r5, #4]
   21d74:	moveq	r0, #2
   21d78:	movne	r0, #2
   21d7c:	b	218f4 <__assert_fail@plt+0xfd50>
   21d80:	and	r2, r7, #4608	; 0x1200
   21d84:	cmp	r2, #512	; 0x200
   21d88:	moveq	r3, #23
   21d8c:	strbeq	r3, [r5, #4]
   21d90:	moveq	r0, #2
   21d94:	movne	r0, #2
   21d98:	b	218f4 <__assert_fail@plt+0xfd50>
   21d9c:	and	r2, r7, #4608	; 0x1200
   21da0:	cmp	r2, #512	; 0x200
   21da4:	moveq	r3, #24
   21da8:	strbeq	r3, [r5, #4]
   21dac:	moveq	r0, #2
   21db0:	movne	r0, #2
   21db4:	b	218f4 <__assert_fail@plt+0xfd50>
   21db8:	bl	11964 <__ctype_b_loc@plt>
   21dbc:	ldr	r2, [r0]
   21dc0:	lsl	r3, r6, #1
   21dc4:	ldrh	r3, [r2, r3]
   21dc8:	ubfx	r3, r3, #3, #1
   21dcc:	cmp	r6, #95	; 0x5f
   21dd0:	orreq	r3, r3, #1
   21dd4:	ldrb	r2, [r5, #6]
   21dd8:	bfi	r2, r3, #6, #1
   21ddc:	strb	r2, [r5, #6]
   21de0:	b	216c8 <__assert_fail@plt+0xfb24>
   21de4:	tst	r7, #2048	; 0x800
   21de8:	moveq	r0, #1
   21dec:	beq	218f4 <__assert_fail@plt+0xfd50>
   21df0:	mov	r3, #10
   21df4:	strb	r3, [r5, #4]
   21df8:	mov	r0, #1
   21dfc:	b	218f4 <__assert_fail@plt+0xfd50>
   21e00:	and	r2, r7, #33792	; 0x8400
   21e04:	cmp	r2, #32768	; 0x8000
   21e08:	moveq	r3, #10
   21e0c:	strbeq	r3, [r5, #4]
   21e10:	moveq	r0, #1
   21e14:	movne	r0, #1
   21e18:	b	218f4 <__assert_fail@plt+0xfd50>
   21e1c:	mov	r3, #11
   21e20:	strb	r3, [r5, #4]
   21e24:	mov	r0, #1
   21e28:	b	218f4 <__assert_fail@plt+0xfd50>
   21e2c:	movw	r3, #1026	; 0x402
   21e30:	tst	r7, r3
   21e34:	movne	r0, #1
   21e38:	bne	218f4 <__assert_fail@plt+0xfd50>
   21e3c:	mov	r3, #18
   21e40:	strb	r3, [r5, #4]
   21e44:	mov	r0, #1
   21e48:	b	218f4 <__assert_fail@plt+0xfd50>
   21e4c:	movw	r3, #1026	; 0x402
   21e50:	tst	r7, r3
   21e54:	movne	r0, #1
   21e58:	bne	218f4 <__assert_fail@plt+0xfd50>
   21e5c:	mov	r3, #19
   21e60:	strb	r3, [r5, #4]
   21e64:	mov	r0, #1
   21e68:	b	218f4 <__assert_fail@plt+0xfd50>
   21e6c:	and	r2, r7, #4608	; 0x1200
   21e70:	cmp	r2, #4608	; 0x1200
   21e74:	moveq	r3, #23
   21e78:	strbeq	r3, [r5, #4]
   21e7c:	moveq	r0, #1
   21e80:	movne	r0, #1
   21e84:	b	218f4 <__assert_fail@plt+0xfd50>
   21e88:	and	r2, r7, #4608	; 0x1200
   21e8c:	cmp	r2, #4608	; 0x1200
   21e90:	moveq	r3, #24
   21e94:	strbeq	r3, [r5, #4]
   21e98:	moveq	r0, #1
   21e9c:	movne	r0, #1
   21ea0:	b	218f4 <__assert_fail@plt+0xfd50>
   21ea4:	tst	r7, #8192	; 0x2000
   21ea8:	moveq	r0, #1
   21eac:	beq	218f4 <__assert_fail@plt+0xfd50>
   21eb0:	mov	r3, #8
   21eb4:	strb	r3, [r5, #4]
   21eb8:	mov	r0, #1
   21ebc:	b	218f4 <__assert_fail@plt+0xfd50>
   21ec0:	tst	r7, #8192	; 0x2000
   21ec4:	moveq	r0, #1
   21ec8:	beq	218f4 <__assert_fail@plt+0xfd50>
   21ecc:	mov	r3, #9
   21ed0:	strb	r3, [r5, #4]
   21ed4:	mov	r0, #1
   21ed8:	b	218f4 <__assert_fail@plt+0xfd50>
   21edc:	mov	r3, #20
   21ee0:	strb	r3, [r5, #4]
   21ee4:	mov	r0, #1
   21ee8:	b	218f4 <__assert_fail@plt+0xfd50>
   21eec:	mov	r3, #5
   21ef0:	strb	r3, [r5, #4]
   21ef4:	mov	r0, #1
   21ef8:	b	218f4 <__assert_fail@plt+0xfd50>
   21efc:	mov	r3, #8
   21f00:	movt	r3, #128	; 0x80
   21f04:	tst	r7, r3
   21f08:	bne	21f40 <__assert_fail@plt+0x1039c>
   21f0c:	ldr	r3, [r4, #40]	; 0x28
   21f10:	cmp	r3, #0
   21f14:	beq	21f40 <__assert_fail@plt+0x1039c>
   21f18:	ldr	r2, [r4, #4]
   21f1c:	add	r3, r2, r3
   21f20:	ldrb	r2, [r3, #-1]
   21f24:	eor	r3, r7, #2048	; 0x800
   21f28:	ubfx	r3, r3, #11, #1
   21f2c:	cmp	r2, #10
   21f30:	orrne	r3, r3, #1
   21f34:	cmp	r3, #0
   21f38:	movne	r0, #1
   21f3c:	bne	218f4 <__assert_fail@plt+0xfd50>
   21f40:	mov	r3, #12
   21f44:	strb	r3, [r5, #4]
   21f48:	mov	r3, #16
   21f4c:	str	r3, [r5]
   21f50:	mov	r0, #1
   21f54:	b	218f4 <__assert_fail@plt+0xfd50>
   21f58:	tst	r7, #8
   21f5c:	bne	21f74 <__assert_fail@plt+0x103d0>
   21f60:	ldr	r3, [r4, #40]	; 0x28
   21f64:	add	r3, r3, #1
   21f68:	ldr	r2, [r4, #48]	; 0x30
   21f6c:	cmp	r3, r2
   21f70:	bne	21f8c <__assert_fail@plt+0x103e8>
   21f74:	mov	r3, #12
   21f78:	strb	r3, [r5, #4]
   21f7c:	mov	r3, #32
   21f80:	str	r3, [r5]
   21f84:	mov	r0, #1
   21f88:	b	218f4 <__assert_fail@plt+0xfd50>
   21f8c:	str	r3, [r4, #40]	; 0x28
   21f90:	mov	r2, r7
   21f94:	mov	r1, r4
   21f98:	mov	r0, sp
   21f9c:	bl	21604 <__assert_fail@plt+0xfa60>
   21fa0:	ldr	r3, [r4, #40]	; 0x28
   21fa4:	sub	r3, r3, #1
   21fa8:	str	r3, [r4, #40]	; 0x28
   21fac:	ldrb	r3, [sp, #4]
   21fb0:	sub	r3, r3, #9
   21fb4:	uxtb	r3, r3
   21fb8:	cmp	r3, #1
   21fbc:	movhi	r0, #1
   21fc0:	bhi	218f4 <__assert_fail@plt+0xfd50>
   21fc4:	b	21f74 <__assert_fail@plt+0x103d0>
   21fc8:	mov	r0, #2
   21fcc:	b	218f4 <__assert_fail@plt+0xfd50>
   21fd0:	mov	r0, #1
   21fd4:	b	218f4 <__assert_fail@plt+0xfd50>
   21fd8:	ldr	r3, [r4]
   21fdc:	ldr	r1, [r4, #24]
   21fe0:	add	r2, r3, r2
   21fe4:	ldrb	r6, [r2, r1]
   21fe8:	b	21920 <__assert_fail@plt+0xfd7c>
   21fec:	str	r4, [sp, #-8]!
   21ff0:	str	lr, [sp, #4]
   21ff4:	mov	r4, r1
   21ff8:	bl	21604 <__assert_fail@plt+0xfa60>
   21ffc:	ldr	r3, [r4, #40]	; 0x28
   22000:	add	r0, r3, r0
   22004:	str	r0, [r4, #40]	; 0x28
   22008:	ldr	r4, [sp]
   2200c:	add	sp, sp, #4
   22010:	pop	{pc}		; (ldr pc, [sp], #4)
   22014:	strd	r4, [sp, #-32]!	; 0xffffffe0
   22018:	strd	r6, [sp, #8]
   2201c:	strd	r8, [sp, #16]
   22020:	str	sl, [sp, #24]
   22024:	str	lr, [sp, #28]
   22028:	mov	r6, r0
   2202c:	mov	r4, r1
   22030:	mov	r5, r2
   22034:	mvn	r9, #0
   22038:	movw	r8, #32816	; 0x8030
   2203c:	mvn	r7, #1
   22040:	mov	r2, r5
   22044:	mov	r1, r6
   22048:	mov	r0, r4
   2204c:	bl	21fec <__assert_fail@plt+0x10448>
   22050:	ldrb	r2, [r4]
   22054:	ldrb	r3, [r4, #4]
   22058:	cmp	r3, #2
   2205c:	beq	220c4 <__assert_fail@plt+0x10520>
   22060:	cmp	r3, #24
   22064:	cmpne	r2, #44	; 0x2c
   22068:	beq	220c8 <__assert_fail@plt+0x10524>
   2206c:	cmp	r3, #1
   22070:	movne	r9, r7
   22074:	bne	22040 <__assert_fail@plt+0x1049c>
   22078:	sub	r3, r2, #48	; 0x30
   2207c:	uxtb	r1, r3
   22080:	cmp	r1, #9
   22084:	movhi	r3, #0
   22088:	movls	r3, #1
   2208c:	cmn	r9, #2
   22090:	moveq	r3, #0
   22094:	cmp	r3, #0
   22098:	moveq	r9, r7
   2209c:	beq	22040 <__assert_fail@plt+0x1049c>
   220a0:	cmn	r9, #1
   220a4:	subeq	r9, r2, #48	; 0x30
   220a8:	beq	22040 <__assert_fail@plt+0x1049c>
   220ac:	add	r9, r9, r9, lsl #2
   220b0:	add	r2, r2, r9, lsl #1
   220b4:	cmp	r2, r8
   220b8:	movge	r2, r8
   220bc:	sub	r9, r2, #48	; 0x30
   220c0:	b	22040 <__assert_fail@plt+0x1049c>
   220c4:	mvn	r9, #1
   220c8:	mov	r0, r9
   220cc:	ldrd	r4, [sp]
   220d0:	ldrd	r6, [sp, #8]
   220d4:	ldrd	r8, [sp, #16]
   220d8:	ldr	sl, [sp, #24]
   220dc:	add	sp, sp, #28
   220e0:	pop	{pc}		; (ldr pc, [sp], #4)
   220e4:	str	r4, [sp, #-8]!
   220e8:	str	lr, [sp, #4]
   220ec:	mov	r4, r0
   220f0:	ldr	r0, [r0]
   220f4:	bl	17750 <__assert_fail@plt+0x5bac>
   220f8:	ldr	r0, [r4, #4]
   220fc:	bl	17750 <__assert_fail@plt+0x5bac>
   22100:	ldr	r0, [r4, #8]
   22104:	bl	17750 <__assert_fail@plt+0x5bac>
   22108:	ldr	r0, [r4, #12]
   2210c:	bl	17750 <__assert_fail@plt+0x5bac>
   22110:	mov	r0, r4
   22114:	bl	17750 <__assert_fail@plt+0x5bac>
   22118:	ldr	r4, [sp]
   2211c:	add	sp, sp, #4
   22120:	pop	{pc}		; (ldr pc, [sp], #4)
   22124:	str	r4, [sp, #-8]!
   22128:	str	lr, [sp, #4]
   2212c:	ldr	r2, [r0, #4]
   22130:	mov	r3, #255	; 0xff
   22134:	movt	r3, #4
   22138:	and	r3, r3, r2
   2213c:	cmp	r3, #6
   22140:	beq	22158 <__assert_fail@plt+0x105b4>
   22144:	cmp	r3, #3
   22148:	beq	22164 <__assert_fail@plt+0x105c0>
   2214c:	ldr	r4, [sp]
   22150:	add	sp, sp, #4
   22154:	pop	{pc}		; (ldr pc, [sp], #4)
   22158:	ldr	r0, [r0]
   2215c:	bl	220e4 <__assert_fail@plt+0x10540>
   22160:	b	2214c <__assert_fail@plt+0x105a8>
   22164:	ldr	r0, [r0]
   22168:	bl	17750 <__assert_fail@plt+0x5bac>
   2216c:	b	2214c <__assert_fail@plt+0x105a8>
   22170:	str	r4, [sp, #-8]!
   22174:	str	lr, [sp, #4]
   22178:	add	r0, r1, #20
   2217c:	bl	22124 <__assert_fail@plt+0x10580>
   22180:	mov	r0, #0
   22184:	ldr	r4, [sp]
   22188:	add	sp, sp, #4
   2218c:	pop	{pc}		; (ldr pc, [sp], #4)
   22190:	strd	r4, [sp, #-32]!	; 0xffffffe0
   22194:	strd	r6, [sp, #8]
   22198:	strd	r8, [sp, #16]
   2219c:	str	sl, [sp, #24]
   221a0:	str	lr, [sp, #28]
   221a4:	sub	sp, sp, #8
   221a8:	mov	r4, r0
   221ac:	add	r3, sp, #8
   221b0:	stmdb	r3, {r1, r2}
   221b4:	ldrb	r5, [sp, #4]
   221b8:	ldr	r6, [r0, #4]
   221bc:	ldr	r3, [r0, #8]
   221c0:	cmp	r3, r6
   221c4:	bcs	2229c <__assert_fail@plt+0x106f8>
   221c8:	ldr	r1, [r4, #8]
   221cc:	ldr	r0, [r4]
   221d0:	lsl	r1, r1, #3
   221d4:	ldrd	r2, [sp]
   221d8:	strd	r2, [r0, r1]
   221dc:	ldr	r2, [r4, #8]
   221e0:	ldr	r3, [r4]
   221e4:	add	r3, r3, r2, lsl #3
   221e8:	ldr	r2, [r3, #4]
   221ec:	bfc	r2, #8, #10
   221f0:	str	r2, [r3, #4]
   221f4:	cmp	r5, #5
   221f8:	beq	2236c <__assert_fail@plt+0x107c8>
   221fc:	cmp	r5, #6
   22200:	movne	r5, #0
   22204:	moveq	r5, #1
   22208:	ldr	r2, [r4, #8]
   2220c:	ldr	r3, [r4]
   22210:	add	r3, r3, r2, lsl #3
   22214:	ldrb	r2, [r3, #6]
   22218:	bfi	r2, r5, #4, #1
   2221c:	strb	r2, [r3, #6]
   22220:	ldr	r2, [r4, #8]
   22224:	ldr	r3, [r4, #12]
   22228:	mvn	r1, #0
   2222c:	str	r1, [r3, r2, lsl #2]
   22230:	ldr	r3, [r4, #8]
   22234:	add	r3, r3, r3, lsl #1
   22238:	lsl	r3, r3, #2
   2223c:	ldr	r0, [r4, #20]
   22240:	add	r1, r0, r3
   22244:	mov	r2, #0
   22248:	str	r2, [r0, r3]
   2224c:	str	r2, [r1, #4]
   22250:	str	r2, [r1, #8]
   22254:	ldr	r3, [r4, #8]
   22258:	add	r3, r3, r3, lsl #1
   2225c:	lsl	r3, r3, #2
   22260:	ldr	r0, [r4, #24]
   22264:	add	r1, r0, r3
   22268:	str	r2, [r0, r3]
   2226c:	str	r2, [r1, #4]
   22270:	str	r2, [r1, #8]
   22274:	ldr	r0, [r4, #8]
   22278:	add	r3, r0, #1
   2227c:	str	r3, [r4, #8]
   22280:	add	sp, sp, #8
   22284:	ldrd	r4, [sp]
   22288:	ldrd	r6, [sp, #8]
   2228c:	ldrd	r8, [sp, #16]
   22290:	ldr	sl, [sp, #24]
   22294:	add	sp, sp, #28
   22298:	pop	{pc}		; (ldr pc, [sp], #4)
   2229c:	lsl	r7, r6, #1
   222a0:	movw	r3, #21845	; 0x5555
   222a4:	movt	r3, #5461	; 0x1555
   222a8:	cmp	r7, r3
   222ac:	bhi	22380 <__assert_fail@plt+0x107dc>
   222b0:	lsl	r1, r6, #4
   222b4:	ldr	r0, [r0]
   222b8:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   222bc:	cmp	r0, #0
   222c0:	beq	22388 <__assert_fail@plt+0x107e4>
   222c4:	str	r0, [r4]
   222c8:	lsl	r8, r6, #3
   222cc:	mov	r1, r8
   222d0:	ldr	r0, [r4, #12]
   222d4:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   222d8:	mov	r9, r0
   222dc:	mov	r1, r8
   222e0:	ldr	r0, [r4, #16]
   222e4:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   222e8:	mov	r8, r0
   222ec:	add	r6, r6, r6, lsl #1
   222f0:	lsl	r6, r6, #3
   222f4:	mov	r1, r6
   222f8:	ldr	r0, [r4, #20]
   222fc:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   22300:	mov	sl, r0
   22304:	mov	r1, r6
   22308:	ldr	r0, [r4, #24]
   2230c:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   22310:	mov	r6, r0
   22314:	cmp	r8, #0
   22318:	cmpne	r9, #0
   2231c:	beq	22344 <__assert_fail@plt+0x107a0>
   22320:	cmp	r0, #0
   22324:	cmpne	sl, #0
   22328:	beq	22344 <__assert_fail@plt+0x107a0>
   2232c:	str	r9, [r4, #12]
   22330:	str	r8, [r4, #16]
   22334:	str	sl, [r4, #20]
   22338:	str	r0, [r4, #24]
   2233c:	str	r7, [r4, #4]
   22340:	b	221c8 <__assert_fail@plt+0x10624>
   22344:	mov	r0, r9
   22348:	bl	17750 <__assert_fail@plt+0x5bac>
   2234c:	mov	r0, r8
   22350:	bl	17750 <__assert_fail@plt+0x5bac>
   22354:	mov	r0, sl
   22358:	bl	17750 <__assert_fail@plt+0x5bac>
   2235c:	mov	r0, r6
   22360:	bl	17750 <__assert_fail@plt+0x5bac>
   22364:	mvn	r0, #0
   22368:	b	22280 <__assert_fail@plt+0x106dc>
   2236c:	ldr	r3, [r4, #92]	; 0x5c
   22370:	cmp	r3, #1
   22374:	movgt	r5, #1
   22378:	bgt	22208 <__assert_fail@plt+0x10664>
   2237c:	b	221fc <__assert_fail@plt+0x10658>
   22380:	mvn	r0, #0
   22384:	b	22280 <__assert_fail@plt+0x106dc>
   22388:	mvn	r0, #0
   2238c:	b	22280 <__assert_fail@plt+0x106dc>
   22390:	ldrb	r3, [r1, #24]
   22394:	cmp	r3, #16
   22398:	bne	223b8 <__assert_fail@plt+0x10814>
   2239c:	ldr	r3, [r1, #4]
   223a0:	ldr	r2, [r3, #12]
   223a4:	str	r2, [r1, #12]
   223a8:	ldr	r3, [r3, #28]
   223ac:	str	r3, [r1, #28]
   223b0:	mov	r0, #0
   223b4:	bx	lr
   223b8:	strd	r4, [sp, #-16]!
   223bc:	str	r6, [sp, #8]
   223c0:	str	lr, [sp, #12]
   223c4:	mov	r4, r1
   223c8:	mov	r5, r0
   223cc:	str	r1, [r4, #12]
   223d0:	add	r3, r1, #20
   223d4:	ldm	r3, {r1, r2}
   223d8:	bl	22190 <__assert_fail@plt+0x105ec>
   223dc:	str	r0, [r4, #28]
   223e0:	cmn	r0, #1
   223e4:	beq	22428 <__assert_fail@plt+0x10884>
   223e8:	ldrb	r3, [r4, #24]
   223ec:	cmp	r3, #12
   223f0:	movne	r0, #0
   223f4:	beq	22408 <__assert_fail@plt+0x10864>
   223f8:	ldrd	r4, [sp]
   223fc:	ldr	r6, [sp, #8]
   22400:	add	sp, sp, #12
   22404:	pop	{pc}		; (ldr pc, [sp], #4)
   22408:	ldr	r3, [r5]
   2240c:	add	r0, r3, r0, lsl #3
   22410:	ldr	r3, [r0, #4]
   22414:	ldr	r2, [r4, #20]
   22418:	bfi	r3, r2, #8, #10
   2241c:	str	r3, [r0, #4]
   22420:	mov	r0, #0
   22424:	b	223f8 <__assert_fail@plt+0x10854>
   22428:	mov	r0, #12
   2242c:	b	223f8 <__assert_fail@plt+0x10854>
   22430:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22434:	strd	r6, [sp, #8]
   22438:	str	r8, [sp, #16]
   2243c:	str	lr, [sp, #20]
   22440:	mov	r4, r0
   22444:	mov	r5, r1
   22448:	mov	r7, r2
   2244c:	lsl	r6, r1, #3
   22450:	ldr	r3, [r0]
   22454:	add	r3, r3, r6
   22458:	ldm	r3, {r1, r2}
   2245c:	bl	22190 <__assert_fail@plt+0x105ec>
   22460:	cmn	r0, #1
   22464:	beq	224c0 <__assert_fail@plt+0x1091c>
   22468:	lsl	r3, r0, #3
   2246c:	ldr	r2, [r4]
   22470:	add	r2, r2, r3
   22474:	ldr	r1, [r2, #4]
   22478:	bfi	r1, r7, #8, #10
   2247c:	str	r1, [r2, #4]
   22480:	ldr	r2, [r4]
   22484:	add	ip, r2, r3
   22488:	add	r2, r2, r6
   2248c:	ldr	r1, [r2, #4]
   22490:	ldr	r2, [ip, #4]
   22494:	orr	r1, r2, r1
   22498:	ubfx	r1, r1, #8, #10
   2249c:	bfi	r2, r1, #8, #10
   224a0:	str	r2, [ip, #4]
   224a4:	ldr	r2, [r4]
   224a8:	add	r3, r2, r3
   224ac:	ldrb	r2, [r3, #6]
   224b0:	orr	r2, r2, #4
   224b4:	strb	r2, [r3, #6]
   224b8:	ldr	r3, [r4, #16]
   224bc:	str	r5, [r3, r0, lsl #2]
   224c0:	ldrd	r4, [sp]
   224c4:	ldrd	r6, [sp, #8]
   224c8:	ldr	r8, [sp, #16]
   224cc:	add	sp, sp, #20
   224d0:	pop	{pc}		; (ldr pc, [sp], #4)
   224d4:	str	r4, [sp, #-8]!
   224d8:	str	lr, [sp, #4]
   224dc:	mov	r4, r0
   224e0:	ldr	r0, [r0, #24]
   224e4:	bl	17750 <__assert_fail@plt+0x5bac>
   224e8:	ldr	r0, [r4, #36]	; 0x24
   224ec:	bl	17750 <__assert_fail@plt+0x5bac>
   224f0:	ldr	r3, [r4, #40]	; 0x28
   224f4:	add	r2, r4, #4
   224f8:	cmp	r3, r2
   224fc:	beq	22510 <__assert_fail@plt+0x1096c>
   22500:	ldr	r0, [r3, #8]
   22504:	bl	17750 <__assert_fail@plt+0x5bac>
   22508:	ldr	r0, [r4, #40]	; 0x28
   2250c:	bl	17750 <__assert_fail@plt+0x5bac>
   22510:	ldr	r0, [r4, #12]
   22514:	bl	17750 <__assert_fail@plt+0x5bac>
   22518:	ldr	r0, [r4, #48]	; 0x30
   2251c:	bl	17750 <__assert_fail@plt+0x5bac>
   22520:	ldr	r0, [r4, #44]	; 0x2c
   22524:	bl	17750 <__assert_fail@plt+0x5bac>
   22528:	mov	r0, r4
   2252c:	bl	17750 <__assert_fail@plt+0x5bac>
   22530:	ldr	r4, [sp]
   22534:	add	sp, sp, #4
   22538:	pop	{pc}		; (ldr pc, [sp], #4)
   2253c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22540:	strd	r6, [sp, #8]
   22544:	strd	r8, [sp, #16]
   22548:	strd	sl, [sp, #24]
   2254c:	str	lr, [sp, #32]
   22550:	sub	sp, sp, #20
   22554:	mov	ip, #0
   22558:	str	ip, [r0]
   2255c:	ldr	r5, [r2, #4]
   22560:	cmp	r5, ip
   22564:	moveq	r5, #0
   22568:	beq	22800 <__assert_fail@plt+0x10c5c>
   2256c:	add	r8, r3, r5
   22570:	ble	2258c <__assert_fail@plt+0x109e8>
   22574:	ldr	ip, [r2, #8]
   22578:	add	r5, ip, r5, lsl #2
   2257c:	ldr	lr, [ip], #4
   22580:	add	r8, r8, lr
   22584:	cmp	r5, ip
   22588:	bne	2257c <__assert_fail@plt+0x109d8>
   2258c:	mov	r4, r3
   22590:	mov	r7, r2
   22594:	mov	r9, r1
   22598:	str	r0, [sp, #12]
   2259c:	ldr	r3, [r1, #68]	; 0x44
   225a0:	and	r3, r3, r8
   225a4:	add	r3, r3, r3, lsl #1
   225a8:	lsl	r3, r3, #2
   225ac:	ldr	r2, [r1, #32]
   225b0:	add	r1, r2, r3
   225b4:	ldr	fp, [r2, r3]
   225b8:	cmp	fp, #0
   225bc:	ble	22614 <__assert_fail@plt+0x10a70>
   225c0:	ldr	sl, [r1, #8]
   225c4:	sub	sl, sl, #4
   225c8:	mov	r6, #0
   225cc:	b	225dc <__assert_fail@plt+0x10a38>
   225d0:	add	r6, r6, #1
   225d4:	cmp	r6, fp
   225d8:	beq	22614 <__assert_fail@plt+0x10a70>
   225dc:	ldr	r5, [sl, #4]!
   225e0:	ldr	r3, [r5]
   225e4:	cmp	r3, r8
   225e8:	bne	225d0 <__assert_fail@plt+0x10a2c>
   225ec:	ldrb	r3, [r5, #52]	; 0x34
   225f0:	and	r3, r3, #15
   225f4:	cmp	r3, r4
   225f8:	bne	225d0 <__assert_fail@plt+0x10a2c>
   225fc:	mov	r1, r7
   22600:	ldr	r0, [r5, #40]	; 0x28
   22604:	bl	1f68c <__assert_fail@plt+0xdae8>
   22608:	cmp	r0, #0
   2260c:	beq	225d0 <__assert_fail@plt+0x10a2c>
   22610:	b	22800 <__assert_fail@plt+0x10c5c>
   22614:	mov	r1, #1
   22618:	mov	r0, #56	; 0x38
   2261c:	bl	2ef9c <__assert_fail@plt+0x1d3f8>
   22620:	subs	r5, r0, #0
   22624:	beq	226d8 <__assert_fail@plt+0x10b34>
   22628:	add	fp, r5, #4
   2262c:	mov	r1, r7
   22630:	mov	r0, fp
   22634:	bl	20ce0 <__assert_fail@plt+0xf13c>
   22638:	subs	r6, r0, #0
   2263c:	bne	22680 <__assert_fail@plt+0x10adc>
   22640:	ldrb	r3, [r5, #52]	; 0x34
   22644:	bfi	r3, r4, #0, #4
   22648:	strb	r3, [r5, #52]	; 0x34
   2264c:	str	fp, [r5, #40]	; 0x28
   22650:	ldr	r3, [r7, #4]
   22654:	cmp	r3, #0
   22658:	ble	227e8 <__assert_fail@plt+0x10c44>
   2265c:	mov	sl, r6
   22660:	and	r3, r4, #4
   22664:	str	r3, [sp, #4]
   22668:	and	r3, r4, #2
   2266c:	str	r3, [sp]
   22670:	and	r3, r4, #1
   22674:	str	r8, [sp, #8]
   22678:	mov	r8, r3
   2267c:	b	22750 <__assert_fail@plt+0x10bac>
   22680:	mov	r0, r5
   22684:	bl	17750 <__assert_fail@plt+0x5bac>
   22688:	b	226d8 <__assert_fail@plt+0x10b34>
   2268c:	ldrb	r3, [r5, #52]	; 0x34
   22690:	orr	r3, r3, #64	; 0x40
   22694:	strb	r3, [r5, #52]	; 0x34
   22698:	b	227b4 <__assert_fail@plt+0x10c10>
   2269c:	mov	r0, #12
   226a0:	bl	2f010 <__assert_fail@plt+0x1d46c>
   226a4:	cmp	r0, #0
   226a8:	beq	226d0 <__assert_fail@plt+0x10b2c>
   226ac:	str	r0, [r5, #40]	; 0x28
   226b0:	mov	r1, r7
   226b4:	bl	20ce0 <__assert_fail@plt+0xf13c>
   226b8:	subs	sl, r0, #0
   226bc:	bne	226ec <__assert_fail@plt+0x10b48>
   226c0:	ldrb	r3, [r5, #52]	; 0x34
   226c4:	orr	r3, r3, #128	; 0x80
   226c8:	strb	r3, [r5, #52]	; 0x34
   226cc:	b	227c8 <__assert_fail@plt+0x10c24>
   226d0:	mov	r0, r5
   226d4:	bl	224d4 <__assert_fail@plt+0x10930>
   226d8:	mov	r3, #12
   226dc:	ldr	r2, [sp, #12]
   226e0:	str	r3, [r2]
   226e4:	mov	r5, #0
   226e8:	b	22800 <__assert_fail@plt+0x10c5c>
   226ec:	mov	r0, r5
   226f0:	bl	224d4 <__assert_fail@plt+0x10930>
   226f4:	b	226d8 <__assert_fail@plt+0x10b34>
   226f8:	tst	r4, #2
   226fc:	beq	22708 <__assert_fail@plt+0x10b64>
   22700:	cmp	r8, #0
   22704:	bne	22730 <__assert_fail@plt+0x10b8c>
   22708:	tst	r4, #16
   2270c:	beq	2271c <__assert_fail@plt+0x10b78>
   22710:	ldr	r3, [sp]
   22714:	cmp	r3, #0
   22718:	beq	22730 <__assert_fail@plt+0x10b8c>
   2271c:	tst	r4, #64	; 0x40
   22720:	beq	22740 <__assert_fail@plt+0x10b9c>
   22724:	ldr	r3, [sp, #4]
   22728:	cmp	r3, #0
   2272c:	bne	22740 <__assert_fail@plt+0x10b9c>
   22730:	sub	r1, r6, sl
   22734:	mov	r0, fp
   22738:	bl	1f78c <__assert_fail@plt+0xdbe8>
   2273c:	add	sl, sl, #1
   22740:	add	r6, r6, #1
   22744:	ldr	r3, [r7, #4]
   22748:	cmp	r6, r3
   2274c:	bge	227e4 <__assert_fail@plt+0x10c40>
   22750:	ldr	r3, [r7, #8]
   22754:	ldr	r2, [r3, r6, lsl #2]
   22758:	ldr	r3, [r9]
   2275c:	add	r3, r3, r2, lsl #3
   22760:	ldrb	r1, [r3, #4]
   22764:	ldr	r4, [r3, #4]
   22768:	ubfx	r4, r4, #8, #10
   2276c:	cmp	r1, #1
   22770:	cmpeq	r4, #0
   22774:	beq	22740 <__assert_fail@plt+0x10b9c>
   22778:	ldrb	r2, [r5, #52]	; 0x34
   2277c:	ubfx	r0, r2, #5, #1
   22780:	ldrb	r3, [r3, #6]
   22784:	ubfx	r3, r3, #4, #1
   22788:	orr	r0, r0, r3
   2278c:	mov	r3, r2
   22790:	bfi	r3, r0, #5, #1
   22794:	strb	r3, [r5, #52]	; 0x34
   22798:	cmp	r1, #2
   2279c:	uxtbeq	r3, r3
   227a0:	orreq	r3, r3, #16
   227a4:	strbeq	r3, [r5, #52]	; 0x34
   227a8:	beq	227b4 <__assert_fail@plt+0x10c10>
   227ac:	cmp	r1, #4
   227b0:	beq	2268c <__assert_fail@plt+0x10ae8>
   227b4:	cmp	r4, #0
   227b8:	beq	22740 <__assert_fail@plt+0x10b9c>
   227bc:	ldr	r3, [r5, #40]	; 0x28
   227c0:	cmp	fp, r3
   227c4:	beq	2269c <__assert_fail@plt+0x10af8>
   227c8:	tst	r4, #1
   227cc:	beq	226f8 <__assert_fail@plt+0x10b54>
   227d0:	cmp	r8, #0
   227d4:	beq	22730 <__assert_fail@plt+0x10b8c>
   227d8:	tst	r4, #2
   227dc:	bne	22730 <__assert_fail@plt+0x10b8c>
   227e0:	b	22708 <__assert_fail@plt+0x10b64>
   227e4:	ldr	r8, [sp, #8]
   227e8:	mov	r2, r8
   227ec:	mov	r1, r5
   227f0:	mov	r0, r9
   227f4:	bl	20850 <__assert_fail@plt+0xecac>
   227f8:	cmp	r0, #0
   227fc:	bne	22820 <__assert_fail@plt+0x10c7c>
   22800:	mov	r0, r5
   22804:	add	sp, sp, #20
   22808:	ldrd	r4, [sp]
   2280c:	ldrd	r6, [sp, #8]
   22810:	ldrd	r8, [sp, #16]
   22814:	ldrd	sl, [sp, #24]
   22818:	add	sp, sp, #32
   2281c:	pop	{pc}		; (ldr pc, [sp], #4)
   22820:	mov	r0, r5
   22824:	bl	224d4 <__assert_fail@plt+0x10930>
   22828:	b	226d8 <__assert_fail@plt+0x10b34>
   2282c:	strd	r4, [sp, #-16]!
   22830:	str	r6, [sp, #8]
   22834:	str	lr, [sp, #12]
   22838:	ldr	r5, [r0]
   2283c:	ldr	r0, [r5, #56]	; 0x38
   22840:	cmp	r0, #0
   22844:	beq	2285c <__assert_fail@plt+0x10cb8>
   22848:	ldr	r4, [r0]
   2284c:	bl	17750 <__assert_fail@plt+0x5bac>
   22850:	mov	r0, r4
   22854:	cmp	r4, #0
   22858:	bne	22848 <__assert_fail@plt+0x10ca4>
   2285c:	mov	r4, #0
   22860:	str	r4, [r5, #56]	; 0x38
   22864:	mov	r3, #31
   22868:	str	r3, [r5, #64]	; 0x40
   2286c:	str	r4, [r5, #52]	; 0x34
   22870:	ldr	r0, [r5, #16]
   22874:	bl	17750 <__assert_fail@plt+0x5bac>
   22878:	str	r4, [r5, #16]
   2287c:	ldrd	r4, [sp]
   22880:	ldr	r6, [sp, #8]
   22884:	add	sp, sp, #12
   22888:	pop	{pc}		; (ldr pc, [sp], #4)
   2288c:	str	r4, [sp, #-8]!
   22890:	str	lr, [sp, #4]
   22894:	mov	r4, r0
   22898:	ldr	r0, [r0, #8]
   2289c:	bl	17750 <__assert_fail@plt+0x5bac>
   228a0:	ldr	r0, [r4, #12]
   228a4:	bl	17750 <__assert_fail@plt+0x5bac>
   228a8:	ldrb	r3, [r4, #75]	; 0x4b
   228ac:	cmp	r3, #0
   228b0:	bne	228c0 <__assert_fail@plt+0x10d1c>
   228b4:	ldr	r4, [sp]
   228b8:	add	sp, sp, #4
   228bc:	pop	{pc}		; (ldr pc, [sp], #4)
   228c0:	ldr	r0, [r4, #4]
   228c4:	bl	17750 <__assert_fail@plt+0x5bac>
   228c8:	b	228b4 <__assert_fail@plt+0x10d10>
   228cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   228d0:	strd	r6, [sp, #8]
   228d4:	str	r8, [sp, #16]
   228d8:	str	lr, [sp, #20]
   228dc:	mov	r6, r0
   228e0:	ldr	r3, [r0]
   228e4:	cmp	r3, #0
   228e8:	beq	22918 <__assert_fail@plt+0x10d74>
   228ec:	ldr	r3, [r0, #8]
   228f0:	cmp	r3, #0
   228f4:	beq	22918 <__assert_fail@plt+0x10d74>
   228f8:	mov	r4, #0
   228fc:	ldr	r0, [r6]
   22900:	add	r0, r0, r4, lsl #3
   22904:	bl	22124 <__assert_fail@plt+0x10580>
   22908:	add	r4, r4, #1
   2290c:	ldr	r3, [r6, #8]
   22910:	cmp	r3, r4
   22914:	bhi	228fc <__assert_fail@plt+0x10d58>
   22918:	ldr	r0, [r6, #12]
   2291c:	bl	17750 <__assert_fail@plt+0x5bac>
   22920:	ldr	r3, [r6, #8]
   22924:	cmp	r3, #0
   22928:	beq	22998 <__assert_fail@plt+0x10df4>
   2292c:	mov	r4, #0
   22930:	mov	r5, r4
   22934:	b	2294c <__assert_fail@plt+0x10da8>
   22938:	add	r5, r5, #1
   2293c:	add	r4, r4, #12
   22940:	ldr	r3, [r6, #8]
   22944:	cmp	r3, r5
   22948:	bls	22998 <__assert_fail@plt+0x10df4>
   2294c:	ldr	r3, [r6, #24]
   22950:	cmp	r3, #0
   22954:	beq	22964 <__assert_fail@plt+0x10dc0>
   22958:	add	r3, r3, r4
   2295c:	ldr	r0, [r3, #8]
   22960:	bl	17750 <__assert_fail@plt+0x5bac>
   22964:	ldr	r3, [r6, #28]
   22968:	cmp	r3, #0
   2296c:	beq	2297c <__assert_fail@plt+0x10dd8>
   22970:	add	r3, r3, r4
   22974:	ldr	r0, [r3, #8]
   22978:	bl	17750 <__assert_fail@plt+0x5bac>
   2297c:	ldr	r3, [r6, #20]
   22980:	cmp	r3, #0
   22984:	beq	22938 <__assert_fail@plt+0x10d94>
   22988:	add	r3, r3, r4
   2298c:	ldr	r0, [r3, #8]
   22990:	bl	17750 <__assert_fail@plt+0x5bac>
   22994:	b	22938 <__assert_fail@plt+0x10d94>
   22998:	ldr	r0, [r6, #20]
   2299c:	bl	17750 <__assert_fail@plt+0x5bac>
   229a0:	ldr	r0, [r6, #24]
   229a4:	bl	17750 <__assert_fail@plt+0x5bac>
   229a8:	ldr	r0, [r6, #28]
   229ac:	bl	17750 <__assert_fail@plt+0x5bac>
   229b0:	ldr	r0, [r6]
   229b4:	bl	17750 <__assert_fail@plt+0x5bac>
   229b8:	ldr	r3, [r6, #32]
   229bc:	cmp	r3, #0
   229c0:	beq	22a24 <__assert_fail@plt+0x10e80>
   229c4:	mov	r7, #0
   229c8:	mov	r8, r7
   229cc:	b	229ec <__assert_fail@plt+0x10e48>
   229d0:	ldr	r0, [r5, #8]
   229d4:	bl	17750 <__assert_fail@plt+0x5bac>
   229d8:	add	r8, r8, #1
   229dc:	add	r7, r7, #12
   229e0:	ldr	r3, [r6, #68]	; 0x44
   229e4:	cmp	r3, r8
   229e8:	bcc	22a24 <__assert_fail@plt+0x10e80>
   229ec:	ldr	r3, [r6, #32]
   229f0:	add	r5, r3, r7
   229f4:	ldr	r3, [r3, r7]
   229f8:	cmp	r3, #0
   229fc:	ble	229d0 <__assert_fail@plt+0x10e2c>
   22a00:	mov	r4, #0
   22a04:	ldr	r3, [r5, #8]
   22a08:	ldr	r0, [r3, r4, lsl #2]
   22a0c:	bl	224d4 <__assert_fail@plt+0x10930>
   22a10:	add	r4, r4, #1
   22a14:	ldr	r3, [r5]
   22a18:	cmp	r3, r4
   22a1c:	bgt	22a04 <__assert_fail@plt+0x10e60>
   22a20:	b	229d0 <__assert_fail@plt+0x10e2c>
   22a24:	ldr	r0, [r6, #32]
   22a28:	bl	17750 <__assert_fail@plt+0x5bac>
   22a2c:	ldr	r0, [r6, #60]	; 0x3c
   22a30:	movw	r3, #9224	; 0x2408
   22a34:	movt	r3, #3
   22a38:	cmp	r0, r3
   22a3c:	beq	22a44 <__assert_fail@plt+0x10ea0>
   22a40:	bl	17750 <__assert_fail@plt+0x5bac>
   22a44:	ldr	r0, [r6, #132]	; 0x84
   22a48:	bl	17750 <__assert_fail@plt+0x5bac>
   22a4c:	mov	r0, r6
   22a50:	bl	17750 <__assert_fail@plt+0x5bac>
   22a54:	ldrd	r4, [sp]
   22a58:	ldrd	r6, [sp, #8]
   22a5c:	ldr	r8, [sp, #16]
   22a60:	add	sp, sp, #20
   22a64:	pop	{pc}		; (ldr pc, [sp], #4)
   22a68:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22a6c:	strd	r6, [sp, #8]
   22a70:	str	r8, [sp, #16]
   22a74:	str	lr, [sp, #20]
   22a78:	mov	r8, r0
   22a7c:	ldr	r3, [r0, #124]	; 0x7c
   22a80:	cmp	r3, #0
   22a84:	ble	22b10 <__assert_fail@plt+0x10f6c>
   22a88:	mov	r7, #0
   22a8c:	b	22aa8 <__assert_fail@plt+0x10f04>
   22a90:	mov	r0, r6
   22a94:	bl	17750 <__assert_fail@plt+0x5bac>
   22a98:	add	r7, r7, #1
   22a9c:	ldr	r3, [r8, #124]	; 0x7c
   22aa0:	cmp	r3, r7
   22aa4:	ble	22b10 <__assert_fail@plt+0x10f6c>
   22aa8:	ldr	r3, [r8, #132]	; 0x84
   22aac:	ldr	r6, [r3, r7, lsl #2]
   22ab0:	ldr	r3, [r6, #16]
   22ab4:	cmp	r3, #0
   22ab8:	ble	22ae8 <__assert_fail@plt+0x10f44>
   22abc:	mov	r4, #0
   22ac0:	ldr	r3, [r6, #20]
   22ac4:	ldr	r5, [r3, r4, lsl #2]
   22ac8:	ldr	r0, [r5, #16]
   22acc:	bl	17750 <__assert_fail@plt+0x5bac>
   22ad0:	mov	r0, r5
   22ad4:	bl	17750 <__assert_fail@plt+0x5bac>
   22ad8:	add	r4, r4, #1
   22adc:	ldr	r3, [r6, #16]
   22ae0:	cmp	r3, r4
   22ae4:	bgt	22ac0 <__assert_fail@plt+0x10f1c>
   22ae8:	ldr	r0, [r6, #20]
   22aec:	bl	17750 <__assert_fail@plt+0x5bac>
   22af0:	ldr	r3, [r6, #8]
   22af4:	cmp	r3, #0
   22af8:	beq	22a90 <__assert_fail@plt+0x10eec>
   22afc:	ldr	r0, [r3, #8]
   22b00:	bl	17750 <__assert_fail@plt+0x5bac>
   22b04:	ldr	r0, [r6, #8]
   22b08:	bl	17750 <__assert_fail@plt+0x5bac>
   22b0c:	b	22a90 <__assert_fail@plt+0x10eec>
   22b10:	mov	r3, #0
   22b14:	str	r3, [r8, #124]	; 0x7c
   22b18:	str	r3, [r8, #108]	; 0x6c
   22b1c:	ldrd	r4, [sp]
   22b20:	ldrd	r6, [sp, #8]
   22b24:	ldr	r8, [sp, #16]
   22b28:	add	sp, sp, #20
   22b2c:	pop	{pc}		; (ldr pc, [sp], #4)
   22b30:	strd	r4, [sp, #-16]!
   22b34:	str	r6, [sp, #8]
   22b38:	str	lr, [sp, #12]
   22b3c:	mov	r4, r0
   22b40:	ldr	r0, [r0, #8]
   22b44:	add	r5, r4, #12
   22b48:	cmp	r0, r5
   22b4c:	beq	22b54 <__assert_fail@plt+0x10fb0>
   22b50:	bl	17750 <__assert_fail@plt+0x5bac>
   22b54:	mov	r3, #0
   22b58:	str	r3, [r4]
   22b5c:	mov	r3, #16
   22b60:	str	r3, [r4, #4]
   22b64:	str	r5, [r4, #8]
   22b68:	ldrd	r4, [sp]
   22b6c:	ldr	r6, [sp, #8]
   22b70:	add	sp, sp, #12
   22b74:	pop	{pc}		; (ldr pc, [sp], #4)
   22b78:	strd	r4, [sp, #-16]!
   22b7c:	str	r6, [sp, #8]
   22b80:	str	lr, [sp, #12]
   22b84:	subs	r5, r0, #0
   22b88:	beq	22bdc <__assert_fail@plt+0x11038>
   22b8c:	ldr	r3, [r5]
   22b90:	cmp	r3, #0
   22b94:	ble	22bd4 <__assert_fail@plt+0x11030>
   22b98:	mov	r4, #0
   22b9c:	mov	r6, r4
   22ba0:	ldr	r3, [r5, #8]
   22ba4:	add	r3, r3, r4
   22ba8:	ldr	r0, [r3, #20]
   22bac:	bl	17750 <__assert_fail@plt+0x5bac>
   22bb0:	ldr	r3, [r5, #8]
   22bb4:	add	r3, r3, r4
   22bb8:	ldr	r0, [r3, #8]
   22bbc:	bl	17750 <__assert_fail@plt+0x5bac>
   22bc0:	add	r6, r6, #1
   22bc4:	add	r4, r4, #24
   22bc8:	ldr	r3, [r5]
   22bcc:	cmp	r3, r6
   22bd0:	bgt	22ba0 <__assert_fail@plt+0x10ffc>
   22bd4:	ldr	r0, [r5, #8]
   22bd8:	bl	17750 <__assert_fail@plt+0x5bac>
   22bdc:	mov	r0, #0
   22be0:	ldrd	r4, [sp]
   22be4:	ldr	r6, [sp, #8]
   22be8:	add	sp, sp, #12
   22bec:	pop	{pc}		; (ldr pc, [sp], #4)
   22bf0:	strd	r4, [sp, #-16]!
   22bf4:	str	r6, [sp, #8]
   22bf8:	str	lr, [sp, #12]
   22bfc:	ldr	r2, [r1, #28]
   22c00:	ldrb	r3, [r1, #24]
   22c04:	sub	r3, r3, #2
   22c08:	cmp	r3, #14
   22c0c:	ldrls	pc, [pc, r3, lsl #2]
   22c10:	b	22d48 <__assert_fail@plt+0x111a4>
   22c14:	andeq	r2, r2, r0, ror #26
   22c18:	andeq	r2, r2, r8, asr #26
   22c1c:	andeq	r2, r2, ip, lsl #26
   22c20:	andeq	r2, r2, r8, asr #26
   22c24:	andeq	r2, r2, r8, asr #26
   22c28:	andeq	r2, r2, r8, asr #26
   22c2c:	strdeq	r2, [r2], -r0
   22c30:	strdeq	r2, [r2], -r0
   22c34:	andeq	r2, r2, r0, asr ip
   22c38:	andeq	r2, r2, r0, asr ip
   22c3c:	strdeq	r2, [r2], -r0
   22c40:	andeq	r2, r2, r8, asr #26
   22c44:	andeq	r2, r2, r8, asr #26
   22c48:	andeq	r2, r2, r8, asr #26
   22c4c:	andeq	r2, r2, r0, ror #26
   22c50:	ldrb	r3, [r0, #88]	; 0x58
   22c54:	orr	r3, r3, #1
   22c58:	strb	r3, [r0, #88]	; 0x58
   22c5c:	ldr	r3, [r1, #4]
   22c60:	cmp	r3, #0
   22c64:	ldrne	r3, [r3, #12]
   22c68:	ldreq	r3, [r1, #16]
   22c6c:	ldr	r4, [r3, #28]
   22c70:	ldr	r3, [r1, #8]
   22c74:	cmp	r3, #0
   22c78:	ldrne	r3, [r3, #12]
   22c7c:	ldreq	r3, [r1, #16]
   22c80:	ldr	r5, [r3, #28]
   22c84:	add	r2, r2, r2, lsl #1
   22c88:	lsl	r2, r2, #2
   22c8c:	ldr	r3, [r0, #20]
   22c90:	add	r6, r3, r2
   22c94:	mov	r1, #2
   22c98:	str	r1, [r3, r2]
   22c9c:	mov	r0, #8
   22ca0:	bl	2f010 <__assert_fail@plt+0x1d46c>
   22ca4:	str	r0, [r6, #8]
   22ca8:	cmp	r0, #0
   22cac:	beq	22d74 <__assert_fail@plt+0x111d0>
   22cb0:	cmp	r4, r5
   22cb4:	beq	22cdc <__assert_fail@plt+0x11138>
   22cb8:	mov	r3, #2
   22cbc:	str	r3, [r6, #4]
   22cc0:	cmp	r4, r5
   22cc4:	strlt	r4, [r0]
   22cc8:	strlt	r5, [r0, #4]
   22ccc:	strge	r5, [r0]
   22cd0:	strge	r4, [r0, #4]
   22cd4:	mov	r0, #0
   22cd8:	b	22d64 <__assert_fail@plt+0x111c0>
   22cdc:	mov	r3, #1
   22ce0:	str	r3, [r6, #4]
   22ce4:	str	r4, [r0]
   22ce8:	mov	r0, #0
   22cec:	b	22d64 <__assert_fail@plt+0x111c0>
   22cf0:	ldr	r1, [r1, #16]
   22cf4:	add	r2, r2, r2, lsl #1
   22cf8:	ldr	r0, [r0, #20]
   22cfc:	ldr	r1, [r1, #28]
   22d00:	add	r0, r0, r2, lsl #2
   22d04:	bl	207bc <__assert_fail@plt+0xec18>
   22d08:	b	22d64 <__assert_fail@plt+0x111c0>
   22d0c:	ldr	r3, [r1, #16]
   22d10:	ldr	ip, [r3, #28]
   22d14:	ldr	r3, [r0, #12]
   22d18:	str	ip, [r3, r2, lsl #2]
   22d1c:	ldrb	r3, [r1, #24]
   22d20:	cmp	r3, #4
   22d24:	movne	r0, #0
   22d28:	bne	22d64 <__assert_fail@plt+0x111c0>
   22d2c:	ldr	r1, [r0, #12]
   22d30:	add	ip, r2, r2, lsl #1
   22d34:	ldr	r0, [r0, #20]
   22d38:	ldr	r1, [r1, r2, lsl #2]
   22d3c:	add	r0, r0, ip, lsl #2
   22d40:	bl	207bc <__assert_fail@plt+0xec18>
   22d44:	b	22d64 <__assert_fail@plt+0x111c0>
   22d48:	ldr	r3, [r1, #16]
   22d4c:	ldr	r1, [r3, #28]
   22d50:	ldr	r3, [r0, #12]
   22d54:	str	r1, [r3, r2, lsl #2]
   22d58:	mov	r0, #0
   22d5c:	b	22d64 <__assert_fail@plt+0x111c0>
   22d60:	mov	r0, #0
   22d64:	ldrd	r4, [sp]
   22d68:	ldr	r6, [sp, #8]
   22d6c:	add	sp, sp, #12
   22d70:	pop	{pc}		; (ldr pc, [sp], #4)
   22d74:	mov	r0, #12
   22d78:	b	22d64 <__assert_fail@plt+0x111c0>
   22d7c:	strd	r4, [sp, #-16]!
   22d80:	str	r6, [sp, #8]
   22d84:	str	lr, [sp, #12]
   22d88:	mov	r4, r0
   22d8c:	mov	r5, r1
   22d90:	ldr	r1, [r0]
   22d94:	cmp	r1, #0
   22d98:	beq	22dd0 <__assert_fail@plt+0x1122c>
   22d9c:	ldr	r3, [r0, #4]
   22da0:	cmp	r3, #0
   22da4:	bne	22de4 <__assert_fail@plt+0x11240>
   22da8:	ldr	r3, [r0, #8]
   22dac:	str	r5, [r3]
   22db0:	ldr	r3, [r0, #4]
   22db4:	add	r3, r3, #1
   22db8:	str	r3, [r0, #4]
   22dbc:	mov	r0, #1
   22dc0:	ldrd	r4, [sp]
   22dc4:	ldr	r6, [sp, #8]
   22dc8:	add	sp, sp, #12
   22dcc:	pop	{pc}		; (ldr pc, [sp], #4)
   22dd0:	mov	r1, r5
   22dd4:	bl	207bc <__assert_fail@plt+0xec18>
   22dd8:	clz	r0, r0
   22ddc:	lsr	r0, r0, #5
   22de0:	b	22dc0 <__assert_fail@plt+0x1121c>
   22de4:	cmp	r1, r3
   22de8:	beq	22e44 <__assert_fail@plt+0x112a0>
   22dec:	ldr	r1, [r4, #8]
   22df0:	ldr	r3, [r1]
   22df4:	cmp	r3, r5
   22df8:	ble	22e68 <__assert_fail@plt+0x112c4>
   22dfc:	ldr	r3, [r4, #4]
   22e00:	cmp	r3, #0
   22e04:	ble	22e28 <__assert_fail@plt+0x11284>
   22e08:	sub	r2, r3, #-1073741823	; 0xc0000001
   22e0c:	lsl	r2, r2, #2
   22e10:	ldr	r1, [r4, #8]
   22e14:	ldr	r0, [r1, r2]
   22e18:	str	r0, [r1, r3, lsl #2]
   22e1c:	sub	r2, r2, #4
   22e20:	subs	r3, r3, #1
   22e24:	bne	22e10 <__assert_fail@plt+0x1126c>
   22e28:	ldr	r2, [r4, #8]
   22e2c:	str	r5, [r2, r3, lsl #2]
   22e30:	ldr	r3, [r4, #4]
   22e34:	add	r3, r3, #1
   22e38:	str	r3, [r4, #4]
   22e3c:	mov	r0, #1
   22e40:	b	22dc0 <__assert_fail@plt+0x1121c>
   22e44:	lsl	r3, r1, #1
   22e48:	str	r3, [r0]
   22e4c:	lsl	r1, r1, #3
   22e50:	ldr	r0, [r0, #8]
   22e54:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   22e58:	cmp	r0, #0
   22e5c:	beq	22ea8 <__assert_fail@plt+0x11304>
   22e60:	str	r0, [r4, #8]
   22e64:	b	22dec <__assert_fail@plt+0x11248>
   22e68:	ldr	r3, [r4, #4]
   22e6c:	sub	r0, r3, #-1073741823	; 0xc0000001
   22e70:	lsl	r2, r0, #2
   22e74:	ldr	r0, [r1, r0, lsl #2]
   22e78:	cmp	r5, r0
   22e7c:	bge	22e28 <__assert_fail@plt+0x11284>
   22e80:	add	r2, r2, #4
   22e84:	str	r0, [r1, r2]
   22e88:	sub	r3, r3, #1
   22e8c:	ldr	r1, [r4, #8]
   22e90:	add	r0, r1, r2
   22e94:	ldr	r0, [r0, #-8]
   22e98:	sub	r2, r2, #4
   22e9c:	cmp	r0, r5
   22ea0:	bgt	22e84 <__assert_fail@plt+0x112e0>
   22ea4:	b	22e28 <__assert_fail@plt+0x11284>
   22ea8:	mov	r0, #0
   22eac:	b	22dc0 <__assert_fail@plt+0x1121c>
   22eb0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22eb4:	strd	r6, [sp, #8]
   22eb8:	strd	r8, [sp, #16]
   22ebc:	strd	sl, [sp, #24]
   22ec0:	str	lr, [sp, #32]
   22ec4:	sub	sp, sp, #20
   22ec8:	mov	r4, r0
   22ecc:	mov	r5, r1
   22ed0:	mov	r6, r2
   22ed4:	mov	r9, r3
   22ed8:	ldr	r7, [sp, #56]	; 0x38
   22edc:	mov	r8, #0
   22ee0:	b	230b0 <__assert_fail@plt+0x1150c>
   22ee4:	lsl	fp, r5, #2
   22ee8:	ldr	r3, [r4, #12]
   22eec:	ldr	r5, [r3, r5, lsl #2]
   22ef0:	str	r6, [sp, #12]
   22ef4:	add	r6, r6, r6, lsl #1
   22ef8:	lsl	sl, r6, #2
   22efc:	ldr	r3, [r4, #20]
   22f00:	add	r3, r3, sl
   22f04:	str	r8, [r3, #4]
   22f08:	mov	r2, r7
   22f0c:	mov	r1, r5
   22f10:	mov	r0, r4
   22f14:	bl	22430 <__assert_fail@plt+0x1088c>
   22f18:	mov	r6, r0
   22f1c:	cmn	r0, #1
   22f20:	beq	231a8 <__assert_fail@plt+0x11604>
   22f24:	ldr	r3, [r4, #12]
   22f28:	ldr	r2, [r3, fp]
   22f2c:	ldr	r1, [sp, #12]
   22f30:	str	r2, [r3, r1, lsl #2]
   22f34:	ldr	r0, [r4, #20]
   22f38:	mov	r1, r6
   22f3c:	add	r0, r0, sl
   22f40:	bl	22d7c <__assert_fail@plt+0x111d8>
   22f44:	cmp	r0, #0
   22f48:	bne	230b0 <__assert_fail@plt+0x1150c>
   22f4c:	mov	r0, #12
   22f50:	b	231d4 <__assert_fail@plt+0x11630>
   22f54:	ldr	r3, [r4, #12]
   22f58:	ldr	r2, [r3, r5, lsl #2]
   22f5c:	str	r2, [r3, r6, lsl #2]
   22f60:	b	231d4 <__assert_fail@plt+0x11630>
   22f64:	ldr	r2, [r2, #8]
   22f68:	ldr	fp, [r2]
   22f6c:	add	sl, r6, r6, lsl #1
   22f70:	lsl	sl, sl, #2
   22f74:	add	r3, r3, sl
   22f78:	str	r8, [r3, #4]
   22f7c:	cmp	r5, r9
   22f80:	movne	r3, #0
   22f84:	moveq	r3, #1
   22f88:	cmp	r5, r6
   22f8c:	moveq	r3, #0
   22f90:	cmp	r3, #0
   22f94:	bne	22fe8 <__assert_fail@plt+0x11444>
   22f98:	ldr	r3, [r4]
   22f9c:	add	r1, r3, r1
   22fa0:	ldr	r3, [r1, #4]
   22fa4:	ubfx	r3, r3, #8, #10
   22fa8:	orr	r7, r7, r3
   22fac:	mov	r2, r7
   22fb0:	mov	r1, fp
   22fb4:	mov	r0, r4
   22fb8:	bl	22430 <__assert_fail@plt+0x1088c>
   22fbc:	mov	r6, r0
   22fc0:	cmn	r0, #1
   22fc4:	beq	231b0 <__assert_fail@plt+0x1160c>
   22fc8:	ldr	r0, [r4, #20]
   22fcc:	mov	r1, r6
   22fd0:	add	r0, r0, sl
   22fd4:	bl	22d7c <__assert_fail@plt+0x111d8>
   22fd8:	cmp	r0, #0
   22fdc:	beq	23008 <__assert_fail@plt+0x11464>
   22fe0:	mov	r5, fp
   22fe4:	b	230b0 <__assert_fail@plt+0x1150c>
   22fe8:	ldr	r0, [r4, #20]
   22fec:	mov	r1, fp
   22ff0:	add	r0, r0, sl
   22ff4:	bl	22d7c <__assert_fail@plt+0x111d8>
   22ff8:	cmp	r0, #0
   22ffc:	movne	r0, #0
   23000:	moveq	r0, #12
   23004:	b	231d4 <__assert_fail@plt+0x11630>
   23008:	mov	r0, #12
   2300c:	b	231d4 <__assert_fail@plt+0x11630>
   23010:	sub	r1, r1, #1
   23014:	add	r2, r2, r0
   23018:	ldrb	r3, [r2, #6]
   2301c:	ubfx	r3, r3, #2, #1
   23020:	cmp	r1, #0
   23024:	movle	r3, #0
   23028:	andgt	r3, r3, #1
   2302c:	cmp	r3, #0
   23030:	beq	23148 <__assert_fail@plt+0x115a4>
   23034:	ldr	r3, [ip, #-4]!
   23038:	cmp	r5, r3
   2303c:	bne	23010 <__assert_fail@plt+0x1146c>
   23040:	ldr	r3, [r2, #4]
   23044:	ubfx	r3, r3, #8, #10
   23048:	cmp	r7, r3
   2304c:	bne	23010 <__assert_fail@plt+0x1146c>
   23050:	cmn	r1, #1
   23054:	beq	23148 <__assert_fail@plt+0x115a4>
   23058:	ldr	r0, [r4, #20]
   2305c:	add	r0, r0, fp
   23060:	bl	22d7c <__assert_fail@plt+0x111d8>
   23064:	cmp	r0, #0
   23068:	beq	231c8 <__assert_fail@plt+0x11624>
   2306c:	ldr	r3, [r4, #20]
   23070:	add	sl, r3, sl
   23074:	ldr	r3, [sl, #8]
   23078:	ldr	r5, [r3, #4]
   2307c:	mov	r2, r7
   23080:	mov	r1, r5
   23084:	mov	r0, r4
   23088:	bl	22430 <__assert_fail@plt+0x1088c>
   2308c:	mov	r6, r0
   23090:	cmn	r0, #1
   23094:	beq	231d0 <__assert_fail@plt+0x1162c>
   23098:	ldr	r0, [r4, #20]
   2309c:	mov	r1, r6
   230a0:	add	r0, r0, fp
   230a4:	bl	22d7c <__assert_fail@plt+0x111d8>
   230a8:	cmp	r0, #0
   230ac:	beq	231a0 <__assert_fail@plt+0x115fc>
   230b0:	lsl	r1, r5, #3
   230b4:	ldr	r3, [r4]
   230b8:	add	r3, r3, r1
   230bc:	ldrb	r3, [r3, #4]
   230c0:	cmp	r3, #4
   230c4:	beq	22ee4 <__assert_fail@plt+0x11340>
   230c8:	ldr	r3, [r4, #20]
   230cc:	add	sl, r5, r5, lsl #1
   230d0:	lsl	sl, sl, #2
   230d4:	add	r2, r3, sl
   230d8:	ldr	r0, [r2, #4]
   230dc:	cmp	r0, #0
   230e0:	beq	22f54 <__assert_fail@plt+0x113b0>
   230e4:	cmp	r0, #1
   230e8:	beq	22f64 <__assert_fail@plt+0x113c0>
   230ec:	ldr	r2, [r2, #8]
   230f0:	ldr	r5, [r2]
   230f4:	add	r6, r6, r6, lsl #1
   230f8:	lsl	fp, r6, #2
   230fc:	add	r3, r3, fp
   23100:	str	r8, [r3, #4]
   23104:	ldr	lr, [r4, #8]
   23108:	sub	r1, lr, #1
   2310c:	ldr	r0, [r4]
   23110:	add	r2, r0, r1, lsl #3
   23114:	ldrb	r3, [r2, #6]
   23118:	ubfx	r3, r3, #2, #1
   2311c:	cmp	r1, #0
   23120:	movle	r3, #0
   23124:	andgt	r3, r3, #1
   23128:	cmp	r3, #0
   2312c:	beq	23148 <__assert_fail@plt+0x115a4>
   23130:	ldr	ip, [r4, #16]
   23134:	add	ip, ip, lr, lsl #2
   23138:	add	r0, r0, lr, lsl #3
   2313c:	sub	r0, r0, r2
   23140:	sub	r0, r0, #16
   23144:	b	23034 <__assert_fail@plt+0x11490>
   23148:	mov	r2, r7
   2314c:	mov	r1, r5
   23150:	mov	r0, r4
   23154:	bl	22430 <__assert_fail@plt+0x1088c>
   23158:	mov	r6, r0
   2315c:	cmn	r0, #1
   23160:	beq	231b8 <__assert_fail@plt+0x11614>
   23164:	ldr	r0, [r4, #20]
   23168:	mov	r1, r6
   2316c:	add	r0, r0, fp
   23170:	bl	22d7c <__assert_fail@plt+0x111d8>
   23174:	cmp	r0, #0
   23178:	beq	231c0 <__assert_fail@plt+0x1161c>
   2317c:	str	r7, [sp]
   23180:	mov	r3, r9
   23184:	mov	r2, r6
   23188:	mov	r1, r5
   2318c:	mov	r0, r4
   23190:	bl	22eb0 <__assert_fail@plt+0x1130c>
   23194:	cmp	r0, #0
   23198:	beq	2306c <__assert_fail@plt+0x114c8>
   2319c:	b	231d4 <__assert_fail@plt+0x11630>
   231a0:	mov	r0, #12
   231a4:	b	231d4 <__assert_fail@plt+0x11630>
   231a8:	mov	r0, #12
   231ac:	b	231d4 <__assert_fail@plt+0x11630>
   231b0:	mov	r0, #12
   231b4:	b	231d4 <__assert_fail@plt+0x11630>
   231b8:	mov	r0, #12
   231bc:	b	231d4 <__assert_fail@plt+0x11630>
   231c0:	mov	r0, #12
   231c4:	b	231d4 <__assert_fail@plt+0x11630>
   231c8:	mov	r0, #12
   231cc:	b	231d4 <__assert_fail@plt+0x11630>
   231d0:	mov	r0, #12
   231d4:	add	sp, sp, #20
   231d8:	ldrd	r4, [sp]
   231dc:	ldrd	r6, [sp, #8]
   231e0:	ldrd	r8, [sp, #16]
   231e4:	ldrd	sl, [sp, #24]
   231e8:	add	sp, sp, #32
   231ec:	pop	{pc}		; (ldr pc, [sp], #4)
   231f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   231f4:	strd	r6, [sp, #8]
   231f8:	strd	r8, [sp, #16]
   231fc:	str	sl, [sp, #24]
   23200:	str	lr, [sp, #28]
   23204:	sub	sp, sp, #8
   23208:	mov	r6, r0
   2320c:	mov	r7, r1
   23210:	mov	r4, r2
   23214:	mov	r9, r3
   23218:	ldr	r8, [sp, #40]	; 0x28
   2321c:	b	23268 <__assert_fail@plt+0x116c4>
   23220:	mov	r1, r4
   23224:	mov	r0, r7
   23228:	bl	22d7c <__assert_fail@plt+0x111d8>
   2322c:	cmp	r0, #0
   23230:	beq	232f0 <__assert_fail@plt+0x1174c>
   23234:	add	r5, r5, r5, lsl #1
   23238:	lsl	r5, r5, #2
   2323c:	ldr	r3, [r6, #20]
   23240:	add	r3, r3, r5
   23244:	ldr	sl, [r3, #4]
   23248:	cmp	sl, #0
   2324c:	beq	232f4 <__assert_fail@plt+0x11750>
   23250:	cmp	sl, #2
   23254:	beq	232c0 <__assert_fail@plt+0x1171c>
   23258:	ldr	r3, [r6, #20]
   2325c:	add	r5, r3, r5
   23260:	ldr	r3, [r5, #8]
   23264:	ldr	r4, [r3]
   23268:	mov	r1, r4
   2326c:	mov	r0, r7
   23270:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   23274:	subs	sl, r0, #0
   23278:	bne	232e8 <__assert_fail@plt+0x11744>
   2327c:	mov	r5, r4
   23280:	ldr	r3, [r6]
   23284:	add	r2, r3, r4, lsl #3
   23288:	ldrb	r2, [r2, #4]
   2328c:	cmp	r2, r8
   23290:	bne	23220 <__assert_fail@plt+0x1167c>
   23294:	ldr	r3, [r3, r4, lsl #3]
   23298:	cmp	r3, r9
   2329c:	bne	23220 <__assert_fail@plt+0x1167c>
   232a0:	cmp	r8, #9
   232a4:	bne	232f4 <__assert_fail@plt+0x11750>
   232a8:	mov	r1, r4
   232ac:	mov	r0, r7
   232b0:	bl	22d7c <__assert_fail@plt+0x111d8>
   232b4:	cmp	r0, #0
   232b8:	moveq	sl, #12
   232bc:	b	232f4 <__assert_fail@plt+0x11750>
   232c0:	ldr	r3, [r3, #8]
   232c4:	ldr	r2, [r3, #4]
   232c8:	str	r8, [sp]
   232cc:	mov	r3, r9
   232d0:	mov	r1, r7
   232d4:	mov	r0, r6
   232d8:	bl	231f0 <__assert_fail@plt+0x1164c>
   232dc:	subs	sl, r0, #0
   232e0:	beq	23258 <__assert_fail@plt+0x116b4>
   232e4:	b	232f4 <__assert_fail@plt+0x11750>
   232e8:	mov	sl, #0
   232ec:	b	232f4 <__assert_fail@plt+0x11750>
   232f0:	mov	sl, #12
   232f4:	mov	r0, sl
   232f8:	add	sp, sp, #8
   232fc:	ldrd	r4, [sp]
   23300:	ldrd	r6, [sp, #8]
   23304:	ldrd	r8, [sp, #16]
   23308:	ldr	sl, [sp, #24]
   2330c:	add	sp, sp, #28
   23310:	pop	{pc}		; (ldr pc, [sp], #4)
   23314:	strd	r4, [sp, #-16]!
   23318:	str	r6, [sp, #8]
   2331c:	str	lr, [sp, #12]
   23320:	subs	r6, r1, #0
   23324:	moveq	r2, #0
   23328:	beq	23490 <__assert_fail@plt+0x118ec>
   2332c:	ldr	r2, [r6, #4]
   23330:	cmp	r2, #0
   23334:	beq	23490 <__assert_fail@plt+0x118ec>
   23338:	mov	r4, r0
   2333c:	ldr	r1, [r0]
   23340:	ldr	r3, [r0, #4]
   23344:	add	r0, r3, r2, lsl #1
   23348:	cmp	r1, r0
   2334c:	blt	2336c <__assert_fail@plt+0x117c8>
   23350:	cmp	r3, #0
   23354:	beq	233a0 <__assert_fail@plt+0x117fc>
   23358:	ldr	r2, [r6, #4]
   2335c:	add	r5, r3, r2, lsl #1
   23360:	sub	r2, r2, #1
   23364:	sub	r3, r3, #1
   23368:	b	233d8 <__assert_fail@plt+0x11834>
   2336c:	add	r1, r2, r1
   23370:	lsl	r5, r1, #1
   23374:	lsl	r1, r1, #3
   23378:	ldr	r0, [r4, #8]
   2337c:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   23380:	cmp	r0, #0
   23384:	beq	234bc <__assert_fail@plt+0x11918>
   23388:	str	r0, [r4, #8]
   2338c:	str	r5, [r4]
   23390:	ldr	r3, [r4, #4]
   23394:	cmp	r3, #0
   23398:	bne	23358 <__assert_fail@plt+0x117b4>
   2339c:	b	233a4 <__assert_fail@plt+0x11800>
   233a0:	ldr	r0, [r4, #8]
   233a4:	ldr	r3, [r6, #4]
   233a8:	str	r3, [r4, #4]
   233ac:	ldr	r2, [r6, #4]
   233b0:	lsl	r2, r2, #2
   233b4:	ldr	r1, [r6, #8]
   233b8:	bl	11784 <memcpy@plt>
   233bc:	mov	r2, #0
   233c0:	b	23490 <__assert_fail@plt+0x118ec>
   233c4:	cmp	r0, r1
   233c8:	sublt	r2, r2, #1
   233cc:	sublt	r5, r5, #1
   233d0:	strlt	r1, [ip, r5, lsl #2]
   233d4:	subge	r3, r3, #1
   233d8:	cmp	r2, #0
   233dc:	cmpge	r3, #0
   233e0:	blt	23408 <__assert_fail@plt+0x11864>
   233e4:	ldr	ip, [r4, #8]
   233e8:	ldr	r0, [ip, r3, lsl #2]
   233ec:	ldr	r1, [r6, #8]
   233f0:	ldr	r1, [r1, r2, lsl #2]
   233f4:	cmp	r0, r1
   233f8:	subeq	r2, r2, #1
   233fc:	subeq	r3, r3, #1
   23400:	bne	233c4 <__assert_fail@plt+0x11820>
   23404:	b	233d8 <__assert_fail@plt+0x11834>
   23408:	cmp	r2, #0
   2340c:	bge	23438 <__assert_fail@plt+0x11894>
   23410:	ldr	r3, [r4, #4]
   23414:	ldr	r2, [r6, #4]
   23418:	add	r2, r3, r2, lsl #1
   2341c:	sub	lr, r2, #1
   23420:	subs	r2, r2, r5
   23424:	beq	23490 <__assert_fail@plt+0x118ec>
   23428:	sub	ip, r3, #1
   2342c:	add	r3, r3, r2
   23430:	str	r3, [r4, #4]
   23434:	b	23468 <__assert_fail@plt+0x118c4>
   23438:	add	r2, r2, #1
   2343c:	sub	r5, r5, r2
   23440:	ldr	r0, [r4, #8]
   23444:	lsl	r2, r2, #2
   23448:	ldr	r1, [r6, #8]
   2344c:	add	r0, r0, r5, lsl #2
   23450:	bl	11784 <memcpy@plt>
   23454:	b	23410 <__assert_fail@plt+0x1186c>
   23458:	add	r0, ip, r2
   2345c:	str	r1, [r3, r0, lsl #2]
   23460:	subs	ip, ip, #1
   23464:	bmi	234a4 <__assert_fail@plt+0x11900>
   23468:	ldr	r3, [r4, #8]
   2346c:	ldr	r0, [r3, lr, lsl #2]
   23470:	ldr	r1, [r3, ip, lsl #2]
   23474:	cmp	r0, r1
   23478:	ble	23458 <__assert_fail@plt+0x118b4>
   2347c:	sub	lr, lr, #1
   23480:	add	r1, ip, r2
   23484:	str	r0, [r3, r1, lsl #2]
   23488:	subs	r2, r2, #1
   2348c:	bne	23468 <__assert_fail@plt+0x118c4>
   23490:	mov	r0, r2
   23494:	ldrd	r4, [sp]
   23498:	ldr	r6, [sp, #8]
   2349c:	add	sp, sp, #12
   234a0:	pop	{pc}		; (ldr pc, [sp], #4)
   234a4:	ldr	r0, [r4, #8]
   234a8:	lsl	r2, r2, #2
   234ac:	add	r1, r0, r5, lsl #2
   234b0:	bl	11784 <memcpy@plt>
   234b4:	mov	r2, #0
   234b8:	b	23490 <__assert_fail@plt+0x118ec>
   234bc:	mov	r2, #12
   234c0:	b	23490 <__assert_fail@plt+0x118ec>
   234c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   234c8:	strd	r6, [sp, #8]
   234cc:	strd	r8, [sp, #16]
   234d0:	strd	sl, [sp, #24]
   234d4:	str	lr, [sp, #32]
   234d8:	sub	sp, sp, #44	; 0x2c
   234dc:	mov	sl, r0
   234e0:	mov	r4, r1
   234e4:	mov	r5, r2
   234e8:	mov	fp, r3
   234ec:	add	r7, r2, r2, lsl #1
   234f0:	lsl	r7, r7, #2
   234f4:	ldr	r3, [r1, #20]
   234f8:	add	r3, r3, r7
   234fc:	ldr	r1, [r3, #4]
   23500:	add	r1, r1, #1
   23504:	add	r0, sp, #28
   23508:	bl	20814 <__assert_fail@plt+0xec70>
   2350c:	subs	r9, r0, #0
   23510:	bne	236d8 <__assert_fail@plt+0x11b34>
   23514:	mov	r8, r7
   23518:	ldr	r3, [sp, #32]
   2351c:	add	r2, r3, #1
   23520:	str	r2, [sp, #32]
   23524:	ldr	r2, [sp, #36]	; 0x24
   23528:	str	r5, [r2, r3, lsl #2]
   2352c:	ldr	r3, [r4, #24]
   23530:	add	r3, r3, r7
   23534:	mvn	r2, #0
   23538:	str	r2, [r3, #4]
   2353c:	ldr	r2, [r4]
   23540:	lsl	r6, r5, #3
   23544:	add	r1, r2, r6
   23548:	ldr	r0, [r1, #4]
   2354c:	mov	r3, #65280	; 0xff00
   23550:	movt	r3, #3
   23554:	and	r3, r3, r0
   23558:	cmp	r3, #0
   2355c:	beq	2358c <__assert_fail@plt+0x119e8>
   23560:	ldr	r3, [r4, #20]
   23564:	add	r3, r3, r7
   23568:	ldr	r0, [r3, #4]
   2356c:	cmp	r0, #0
   23570:	beq	236f8 <__assert_fail@plt+0x11b54>
   23574:	ldr	r3, [r3, #8]
   23578:	ldr	r3, [r3]
   2357c:	add	r2, r2, r3, lsl #3
   23580:	ldrb	r3, [r2, #6]
   23584:	tst	r3, #4
   23588:	beq	235c4 <__assert_fail@plt+0x11a20>
   2358c:	ldr	r3, [r4]
   23590:	add	r6, r3, r6
   23594:	ldrb	r3, [r6, #4]
   23598:	tst	r3, #8
   2359c:	beq	236f8 <__assert_fail@plt+0x11b54>
   235a0:	ldr	r3, [r4, #20]
   235a4:	add	r3, r3, r7
   235a8:	ldr	r2, [r3, #4]
   235ac:	cmp	r2, #0
   235b0:	ble	236f8 <__assert_fail@plt+0x11b54>
   235b4:	mov	r6, r9
   235b8:	mov	r2, #0
   235bc:	str	r2, [sp, #12]
   235c0:	b	23638 <__assert_fail@plt+0x11a94>
   235c4:	ldr	r3, [r1, #4]
   235c8:	ubfx	r3, r3, #8, #10
   235cc:	str	r3, [sp]
   235d0:	mov	r3, r5
   235d4:	mov	r2, r5
   235d8:	mov	r1, r5
   235dc:	mov	r0, r4
   235e0:	bl	22eb0 <__assert_fail@plt+0x1130c>
   235e4:	cmp	r0, #0
   235e8:	beq	2358c <__assert_fail@plt+0x119e8>
   235ec:	mov	r9, r0
   235f0:	b	236d8 <__assert_fail@plt+0x11b34>
   235f4:	mov	r1, r4
   235f8:	add	r0, sp, #16
   235fc:	bl	234c4 <__assert_fail@plt+0x11920>
   23600:	cmp	r0, #0
   23604:	beq	2367c <__assert_fail@plt+0x11ad8>
   23608:	mov	r9, r0
   2360c:	b	236d8 <__assert_fail@plt+0x11b34>
   23610:	ldr	r0, [sp, #24]
   23614:	bl	17750 <__assert_fail@plt+0x5bac>
   23618:	mov	r3, #1
   2361c:	str	r3, [sp, #12]
   23620:	add	r6, r6, #1
   23624:	ldr	r3, [r4, #20]
   23628:	add	r3, r3, r8
   2362c:	ldr	r2, [r3, #4]
   23630:	cmp	r2, r6
   23634:	ble	236a8 <__assert_fail@plt+0x11b04>
   23638:	ldr	r3, [r3, #8]
   2363c:	ldr	r2, [r3, r6, lsl #2]
   23640:	add	r5, r2, r2, lsl #1
   23644:	lsl	r5, r5, #2
   23648:	ldr	r0, [r4, #24]
   2364c:	add	r1, r0, r5
   23650:	ldr	r3, [r1, #4]
   23654:	cmn	r3, #1
   23658:	moveq	r3, #1
   2365c:	streq	r3, [sp, #12]
   23660:	beq	23620 <__assert_fail@plt+0x11a7c>
   23664:	cmp	r3, #0
   23668:	beq	235f4 <__assert_fail@plt+0x11a50>
   2366c:	ldrd	r2, [r0, r5]
   23670:	strd	r2, [sp, #16]
   23674:	ldr	r3, [r1, #8]
   23678:	str	r3, [sp, #24]
   2367c:	add	r1, sp, #16
   23680:	add	r0, sp, #28
   23684:	bl	23314 <__assert_fail@plt+0x11770>
   23688:	cmp	r0, #0
   2368c:	bne	23608 <__assert_fail@plt+0x11a64>
   23690:	ldr	r3, [r4, #24]
   23694:	add	r5, r3, r5
   23698:	ldr	r3, [r5, #4]
   2369c:	cmp	r3, #0
   236a0:	bne	23620 <__assert_fail@plt+0x11a7c>
   236a4:	b	23610 <__assert_fail@plt+0x11a6c>
   236a8:	eor	fp, fp, #1
   236ac:	ldr	r3, [sp, #12]
   236b0:	tst	r3, fp
   236b4:	beq	236f8 <__assert_fail@plt+0x11b54>
   236b8:	ldr	r3, [r4, #24]
   236bc:	add	r7, r3, r7
   236c0:	mov	r3, #0
   236c4:	str	r3, [r7, #4]
   236c8:	ldrd	r2, [sp, #28]
   236cc:	strd	r2, [sl]
   236d0:	ldr	r3, [sp, #36]	; 0x24
   236d4:	str	r3, [sl, #8]
   236d8:	mov	r0, r9
   236dc:	add	sp, sp, #44	; 0x2c
   236e0:	ldrd	r4, [sp]
   236e4:	ldrd	r6, [sp, #8]
   236e8:	ldrd	r8, [sp, #16]
   236ec:	ldrd	sl, [sp, #24]
   236f0:	add	sp, sp, #32
   236f4:	pop	{pc}		; (ldr pc, [sp], #4)
   236f8:	ldr	r1, [r4, #24]
   236fc:	add	r0, r1, r7
   23700:	ldrd	r2, [sp, #28]
   23704:	strd	r2, [r1, r7]
   23708:	ldr	r3, [sp, #36]	; 0x24
   2370c:	str	r3, [r0, #8]
   23710:	b	236c8 <__assert_fail@plt+0x11b24>
   23714:	strd	r4, [sp, #-16]!
   23718:	str	r6, [sp, #8]
   2371c:	str	lr, [sp, #12]
   23720:	mov	r5, r0
   23724:	cmp	r1, #0
   23728:	ldrlt	r0, [r0, #60]	; 0x3c
   2372c:	blt	2376c <__assert_fail@plt+0x11bc8>
   23730:	ldr	r3, [r5, #48]	; 0x30
   23734:	cmp	r3, r1
   23738:	beq	2377c <__assert_fail@plt+0x11bd8>
   2373c:	ldr	r3, [r5, #80]	; 0x50
   23740:	cmp	r3, #1
   23744:	ble	237e4 <__assert_fail@plt+0x11c40>
   23748:	ldr	r3, [r5, #8]
   2374c:	add	r3, r3, r1, lsl #2
   23750:	ldr	r4, [r3], #-4
   23754:	cmn	r4, #1
   23758:	bne	23790 <__assert_fail@plt+0x11bec>
   2375c:	sub	r1, r1, #1
   23760:	cmn	r1, #1
   23764:	bne	23750 <__assert_fail@plt+0x11bac>
   23768:	ldr	r0, [r5, #60]	; 0x3c
   2376c:	ldrd	r4, [sp]
   23770:	ldr	r6, [sp, #8]
   23774:	add	sp, sp, #12
   23778:	pop	{pc}		; (ldr pc, [sp], #4)
   2377c:	and	r2, r2, #2
   23780:	cmp	r2, #0
   23784:	movne	r0, #8
   23788:	moveq	r0, #10
   2378c:	b	2376c <__assert_fail@plt+0x11bc8>
   23790:	ldrb	r3, [r5, #78]	; 0x4e
   23794:	cmp	r3, #0
   23798:	bne	237bc <__assert_fail@plt+0x11c18>
   2379c:	cmp	r4, #10
   237a0:	movne	r0, #0
   237a4:	bne	2376c <__assert_fail@plt+0x11bc8>
   237a8:	ldrb	r3, [r5, #77]	; 0x4d
   237ac:	cmp	r3, #0
   237b0:	moveq	r0, #0
   237b4:	movne	r0, #2
   237b8:	b	2376c <__assert_fail@plt+0x11bc8>
   237bc:	mov	r0, r4
   237c0:	bl	119c4 <iswalnum@plt>
   237c4:	adds	r3, r0, #0
   237c8:	movne	r3, #1
   237cc:	cmp	r4, #95	; 0x5f
   237d0:	orreq	r3, r3, #1
   237d4:	cmp	r3, #0
   237d8:	movne	r0, #1
   237dc:	bne	2376c <__assert_fail@plt+0x11bc8>
   237e0:	b	2379c <__assert_fail@plt+0x11bf8>
   237e4:	ldr	r3, [r5, #4]
   237e8:	ldrb	r3, [r3, r1]
   237ec:	asr	r0, r3, #5
   237f0:	ldr	r1, [r5, #68]	; 0x44
   237f4:	and	r2, r3, #31
   237f8:	ldr	r0, [r1, r0, lsl #2]
   237fc:	lsr	r0, r0, r2
   23800:	ands	r0, r0, #1
   23804:	bne	2376c <__assert_fail@plt+0x11bc8>
   23808:	cmp	r3, #10
   2380c:	bne	2376c <__assert_fail@plt+0x11bc8>
   23810:	ldrb	r3, [r5, #77]	; 0x4d
   23814:	cmp	r3, #0
   23818:	movne	r0, #2
   2381c:	b	2376c <__assert_fail@plt+0x11bc8>
   23820:	str	r4, [sp, #-8]!
   23824:	str	lr, [sp, #4]
   23828:	ldr	r3, [r0, #4]
   2382c:	ldrb	ip, [r3, r2]
   23830:	ldrb	r3, [r1, #4]
   23834:	sub	r3, r3, #1
   23838:	cmp	r3, #6
   2383c:	ldrls	pc, [pc, r3, lsl #2]
   23840:	b	23968 <__assert_fail@plt+0x11dc4>
   23844:	andeq	r3, r2, r0, ror #16
   23848:	andeq	r3, r2, r8, ror #18
   2384c:	andeq	r3, r2, r4, ror r8
   23850:	andeq	r3, r2, r8, ror #18
   23854:	strdeq	r3, [r2], -r4
   23858:	andeq	r3, r2, r8, ror #18
   2385c:	andeq	r3, r2, r8, ror #17
   23860:	ldrb	r3, [r1]
   23864:	cmp	r3, ip
   23868:	movne	r0, #0
   2386c:	bne	2396c <__assert_fail@plt+0x11dc8>
   23870:	b	23890 <__assert_fail@plt+0x11cec>
   23874:	lsr	lr, ip, #5
   23878:	ldr	r3, [r1]
   2387c:	and	ip, ip, #31
   23880:	ldr	r3, [r3, lr, lsl #2]
   23884:	lsr	ip, r3, ip
   23888:	tst	ip, #1
   2388c:	beq	23978 <__assert_fail@plt+0x11dd4>
   23890:	ldr	ip, [r1, #4]
   23894:	mov	r3, #65280	; 0xff00
   23898:	movt	r3, #3
   2389c:	and	r3, r3, ip
   238a0:	cmp	r3, #0
   238a4:	moveq	r0, #1
   238a8:	beq	2396c <__assert_fail@plt+0x11dc8>
   238ac:	mov	r3, r2
   238b0:	mov	r4, r1
   238b4:	ldr	r2, [r0, #88]	; 0x58
   238b8:	mov	r1, r3
   238bc:	bl	23714 <__assert_fail@plt+0x11b70>
   238c0:	ldr	r3, [r4, #4]
   238c4:	ubfx	r3, r3, #8, #10
   238c8:	tst	r3, #4
   238cc:	beq	23934 <__assert_fail@plt+0x11d90>
   238d0:	tst	r0, #1
   238d4:	beq	23980 <__assert_fail@plt+0x11ddc>
   238d8:	tst	r3, #8
   238dc:	beq	23944 <__assert_fail@plt+0x11da0>
   238e0:	mov	r0, #0
   238e4:	b	2396c <__assert_fail@plt+0x11dc8>
   238e8:	tst	ip, #128	; 0x80
   238ec:	movne	r0, #0
   238f0:	bne	2396c <__assert_fail@plt+0x11dc8>
   238f4:	cmp	ip, #10
   238f8:	beq	2391c <__assert_fail@plt+0x11d78>
   238fc:	cmp	ip, #0
   23900:	bne	23890 <__assert_fail@plt+0x11cec>
   23904:	ldr	r3, [r0, #84]	; 0x54
   23908:	ldr	r3, [r3, #128]	; 0x80
   2390c:	tst	r3, #128	; 0x80
   23910:	movne	r0, #0
   23914:	beq	23890 <__assert_fail@plt+0x11cec>
   23918:	b	2396c <__assert_fail@plt+0x11dc8>
   2391c:	ldr	r3, [r0, #84]	; 0x54
   23920:	ldr	r3, [r3, #128]	; 0x80
   23924:	tst	r3, #64	; 0x40
   23928:	bne	23890 <__assert_fail@plt+0x11cec>
   2392c:	mov	r0, #0
   23930:	b	2396c <__assert_fail@plt+0x11dc8>
   23934:	tst	r3, #8
   23938:	beq	23944 <__assert_fail@plt+0x11da0>
   2393c:	tst	r0, #1
   23940:	bne	23988 <__assert_fail@plt+0x11de4>
   23944:	tst	r3, #32
   23948:	beq	23958 <__assert_fail@plt+0x11db4>
   2394c:	tst	r0, #2
   23950:	moveq	r0, #0
   23954:	beq	2396c <__assert_fail@plt+0x11dc8>
   23958:	tst	r3, #128	; 0x80
   2395c:	ubfxne	r0, r0, #3, #1
   23960:	moveq	r0, #1
   23964:	b	2396c <__assert_fail@plt+0x11dc8>
   23968:	mov	r0, #0
   2396c:	ldr	r4, [sp]
   23970:	add	sp, sp, #4
   23974:	pop	{pc}		; (ldr pc, [sp], #4)
   23978:	mov	r0, #0
   2397c:	b	2396c <__assert_fail@plt+0x11dc8>
   23980:	mov	r0, #0
   23984:	b	2396c <__assert_fail@plt+0x11dc8>
   23988:	mov	r0, #0
   2398c:	b	2396c <__assert_fail@plt+0x11dc8>
   23990:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23994:	strd	r6, [sp, #8]
   23998:	strd	r8, [sp, #16]
   2399c:	strd	sl, [sp, #24]
   239a0:	str	lr, [sp, #32]
   239a4:	sub	sp, sp, #4
   239a8:	ldr	r7, [r0, #84]	; 0x54
   239ac:	ldr	r3, [r1, #4]
   239b0:	cmp	r3, #0
   239b4:	ble	23ab4 <__assert_fail@plt+0x11f10>
   239b8:	mov	r9, r2
   239bc:	mov	r6, r1
   239c0:	mov	r8, r0
   239c4:	mov	r4, #0
   239c8:	b	239fc <__assert_fail@plt+0x11e58>
   239cc:	lsl	sl, r1, #1
   239d0:	lsl	r1, r1, #3
   239d4:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   239d8:	cmp	r0, #0
   239dc:	beq	23abc <__assert_fail@plt+0x11f18>
   239e0:	str	r0, [r8, #132]	; 0x84
   239e4:	str	sl, [r8, #128]	; 0x80
   239e8:	b	23a48 <__assert_fail@plt+0x11ea4>
   239ec:	add	r4, r4, #1
   239f0:	ldr	r3, [r6, #4]
   239f4:	cmp	r3, r4
   239f8:	ble	23a94 <__assert_fail@plt+0x11ef0>
   239fc:	ldr	r3, [r6, #8]
   23a00:	ldr	r5, [r3, r4, lsl #2]
   23a04:	ldr	r3, [r7]
   23a08:	add	r2, r3, r5, lsl #3
   23a0c:	ldrb	r2, [r2, #4]
   23a10:	cmp	r2, #8
   23a14:	bne	239ec <__assert_fail@plt+0x11e48>
   23a18:	ldr	r3, [r3, r5, lsl #3]
   23a1c:	cmp	r3, #31
   23a20:	bgt	239ec <__assert_fail@plt+0x11e48>
   23a24:	ldr	r2, [r7, #80]	; 0x50
   23a28:	lsr	r3, r2, r3
   23a2c:	tst	r3, #1
   23a30:	beq	239ec <__assert_fail@plt+0x11e48>
   23a34:	ldr	r0, [r8, #132]	; 0x84
   23a38:	ldr	r1, [r8, #128]	; 0x80
   23a3c:	ldr	r3, [r8, #124]	; 0x7c
   23a40:	cmp	r1, r3
   23a44:	beq	239cc <__assert_fail@plt+0x11e28>
   23a48:	ldr	fp, [r8, #124]	; 0x7c
   23a4c:	ldr	sl, [r8, #132]	; 0x84
   23a50:	mov	r1, #24
   23a54:	mov	r0, #1
   23a58:	bl	2ef9c <__assert_fail@plt+0x1d3f8>
   23a5c:	str	r0, [sl, fp, lsl #2]
   23a60:	ldr	r2, [r8, #124]	; 0x7c
   23a64:	ldr	r3, [r8, #132]	; 0x84
   23a68:	ldr	r3, [r3, r2, lsl #2]
   23a6c:	cmp	r3, #0
   23a70:	beq	23abc <__assert_fail@plt+0x11f18>
   23a74:	str	r5, [r3, #4]
   23a78:	ldr	r2, [r8, #132]	; 0x84
   23a7c:	ldr	r3, [r8, #124]	; 0x7c
   23a80:	add	r1, r3, #1
   23a84:	str	r1, [r8, #124]	; 0x7c
   23a88:	ldr	r3, [r2, r3, lsl #2]
   23a8c:	str	r9, [r3]
   23a90:	b	239ec <__assert_fail@plt+0x11e48>
   23a94:	mov	r0, #0
   23a98:	add	sp, sp, #4
   23a9c:	ldrd	r4, [sp]
   23aa0:	ldrd	r6, [sp, #8]
   23aa4:	ldrd	r8, [sp, #16]
   23aa8:	ldrd	sl, [sp, #24]
   23aac:	add	sp, sp, #32
   23ab0:	pop	{pc}		; (ldr pc, [sp], #4)
   23ab4:	mov	r0, #0
   23ab8:	b	23a98 <__assert_fail@plt+0x11ef4>
   23abc:	mov	r0, #12
   23ac0:	b	23a98 <__assert_fail@plt+0x11ef4>
   23ac4:	strd	r4, [sp, #-16]!
   23ac8:	str	r6, [sp, #8]
   23acc:	str	lr, [sp, #12]
   23ad0:	mov	r4, r0
   23ad4:	mov	r5, r1
   23ad8:	ldr	r6, [r0, #104]	; 0x68
   23adc:	ldr	r3, [r0, #36]	; 0x24
   23ae0:	cmp	r3, r1
   23ae4:	bgt	23af4 <__assert_fail@plt+0x11f50>
   23ae8:	ldr	r2, [r0, #48]	; 0x30
   23aec:	cmp	r3, r2
   23af0:	blt	23b0c <__assert_fail@plt+0x11f68>
   23af4:	ldr	r3, [r4, #28]
   23af8:	cmp	r3, r5
   23afc:	bgt	23b20 <__assert_fail@plt+0x11f7c>
   23b00:	ldr	r2, [r4, #48]	; 0x30
   23b04:	cmp	r3, r2
   23b08:	bge	23b20 <__assert_fail@plt+0x11f7c>
   23b0c:	add	r1, r5, #1
   23b10:	mov	r0, r4
   23b14:	bl	21518 <__assert_fail@plt+0xf974>
   23b18:	cmp	r0, #0
   23b1c:	bne	23b50 <__assert_fail@plt+0x11fac>
   23b20:	cmp	r6, r5
   23b24:	movge	r0, #0
   23b28:	bge	23b50 <__assert_fail@plt+0x11fac>
   23b2c:	sub	r2, r5, r6
   23b30:	add	r6, r6, #1
   23b34:	ldr	r0, [r4, #100]	; 0x64
   23b38:	lsl	r2, r2, #2
   23b3c:	mov	r1, #0
   23b40:	add	r0, r0, r6, lsl #2
   23b44:	bl	119e8 <memset@plt>
   23b48:	str	r5, [r4, #104]	; 0x68
   23b4c:	mov	r0, #0
   23b50:	ldrd	r4, [sp]
   23b54:	ldr	r6, [sp, #8]
   23b58:	add	sp, sp, #12
   23b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   23b60:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23b64:	strd	r6, [sp, #8]
   23b68:	strd	r8, [sp, #16]
   23b6c:	strd	sl, [sp, #24]
   23b70:	str	lr, [sp, #32]
   23b74:	sub	sp, sp, #28
   23b78:	mov	r5, r0
   23b7c:	mov	r6, r1
   23b80:	mov	r7, r2
   23b84:	mov	r8, r3
   23b88:	ldr	r1, [r1, #4]
   23b8c:	add	r0, sp, #12
   23b90:	bl	20814 <__assert_fail@plt+0xec70>
   23b94:	subs	r9, r0, #0
   23b98:	bne	23c70 <__assert_fail@plt+0x120cc>
   23b9c:	ldr	r3, [r6, #4]
   23ba0:	cmp	r3, #0
   23ba4:	ble	23c90 <__assert_fail@plt+0x120ec>
   23ba8:	mov	r4, r9
   23bac:	b	23c10 <__assert_fail@plt+0x1206c>
   23bb0:	add	r0, r0, #1
   23bb4:	cmp	lr, r0
   23bb8:	beq	23c44 <__assert_fail@plt+0x120a0>
   23bbc:	ldr	ip, [r3, #4]!
   23bc0:	add	fp, sl, ip, lsl #3
   23bc4:	ldrb	fp, [fp, #4]
   23bc8:	cmp	r8, fp
   23bcc:	bne	23bb0 <__assert_fail@plt+0x1200c>
   23bd0:	ldr	fp, [sl, ip, lsl #3]
   23bd4:	cmp	r7, fp
   23bd8:	bne	23bb0 <__assert_fail@plt+0x1200c>
   23bdc:	cmn	ip, #1
   23be0:	beq	23c44 <__assert_fail@plt+0x120a0>
   23be4:	str	r8, [sp]
   23be8:	mov	r3, r7
   23bec:	add	r1, sp, #12
   23bf0:	mov	r0, r5
   23bf4:	bl	231f0 <__assert_fail@plt+0x1164c>
   23bf8:	subs	sl, r0, #0
   23bfc:	bne	23c64 <__assert_fail@plt+0x120c0>
   23c00:	add	r4, r4, #1
   23c04:	ldr	r3, [r6, #4]
   23c08:	cmp	r3, r4
   23c0c:	ble	23c90 <__assert_fail@plt+0x120ec>
   23c10:	ldr	r3, [r6, #8]
   23c14:	ldr	r2, [r3, r4, lsl #2]
   23c18:	add	r3, r2, r2, lsl #1
   23c1c:	ldr	r1, [r5, #24]
   23c20:	add	r1, r1, r3, lsl #2
   23c24:	ldr	lr, [r1, #4]
   23c28:	cmp	lr, #0
   23c2c:	ble	23c44 <__assert_fail@plt+0x120a0>
   23c30:	ldr	sl, [r5]
   23c34:	ldr	r3, [r1, #8]
   23c38:	sub	r3, r3, #4
   23c3c:	mov	r0, r9
   23c40:	b	23bbc <__assert_fail@plt+0x12018>
   23c44:	add	r0, sp, #12
   23c48:	bl	23314 <__assert_fail@plt+0x11770>
   23c4c:	subs	sl, r0, #0
   23c50:	beq	23c00 <__assert_fail@plt+0x1205c>
   23c54:	ldr	r0, [sp, #20]
   23c58:	bl	17750 <__assert_fail@plt+0x5bac>
   23c5c:	mov	r9, sl
   23c60:	b	23c70 <__assert_fail@plt+0x120cc>
   23c64:	ldr	r0, [sp, #20]
   23c68:	bl	17750 <__assert_fail@plt+0x5bac>
   23c6c:	mov	r9, sl
   23c70:	mov	r0, r9
   23c74:	add	sp, sp, #28
   23c78:	ldrd	r4, [sp]
   23c7c:	ldrd	r6, [sp, #8]
   23c80:	ldrd	r8, [sp, #16]
   23c84:	ldrd	sl, [sp, #24]
   23c88:	add	sp, sp, #32
   23c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   23c90:	ldr	r0, [r6, #8]
   23c94:	bl	17750 <__assert_fail@plt+0x5bac>
   23c98:	ldrd	r2, [sp, #12]
   23c9c:	strd	r2, [r6]
   23ca0:	ldr	r3, [sp, #20]
   23ca4:	str	r3, [r6, #8]
   23ca8:	b	23c70 <__assert_fail@plt+0x120cc>
   23cac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23cb0:	strd	r6, [sp, #8]
   23cb4:	str	r8, [sp, #16]
   23cb8:	str	lr, [sp, #20]
   23cbc:	mov	r4, r0
   23cc0:	mov	r5, r1
   23cc4:	mov	r1, r2
   23cc8:	ldr	r2, [r0, #88]	; 0x58
   23ccc:	bl	23714 <__assert_fail@plt+0x11b70>
   23cd0:	ldr	lr, [r5, #8]
   23cd4:	cmp	lr, #0
   23cd8:	ble	23d44 <__assert_fail@plt+0x121a0>
   23cdc:	ldr	r3, [r4, #84]	; 0x54
   23ce0:	ldr	r4, [r3]
   23ce4:	ldr	ip, [r5, #12]
   23ce8:	sub	ip, ip, #4
   23cec:	mov	r1, #0
   23cf0:	and	r7, r0, #8
   23cf4:	and	r6, r0, #2
   23cf8:	and	r5, r0, #1
   23cfc:	b	23d58 <__assert_fail@plt+0x121b4>
   23d00:	tst	r3, #8
   23d04:	beq	23d10 <__assert_fail@plt+0x1216c>
   23d08:	cmp	r5, #0
   23d0c:	bne	23d4c <__assert_fail@plt+0x121a8>
   23d10:	tst	r3, #32
   23d14:	beq	23d20 <__assert_fail@plt+0x1217c>
   23d18:	cmp	r6, #0
   23d1c:	beq	23d4c <__assert_fail@plt+0x121a8>
   23d20:	tst	r3, #128	; 0x80
   23d24:	beq	23d30 <__assert_fail@plt+0x1218c>
   23d28:	cmp	r7, #0
   23d2c:	beq	23d4c <__assert_fail@plt+0x121a8>
   23d30:	ldrd	r4, [sp]
   23d34:	ldrd	r6, [sp, #8]
   23d38:	ldr	r8, [sp, #16]
   23d3c:	add	sp, sp, #20
   23d40:	pop	{pc}		; (ldr pc, [sp], #4)
   23d44:	mov	r0, #0
   23d48:	b	23d30 <__assert_fail@plt+0x1218c>
   23d4c:	add	r1, r1, #1
   23d50:	cmp	lr, r1
   23d54:	beq	23d98 <__assert_fail@plt+0x121f4>
   23d58:	ldr	r0, [ip, #4]!
   23d5c:	add	r2, r4, r0, lsl #3
   23d60:	ldr	r3, [r2, #4]
   23d64:	ubfx	r3, r3, #8, #10
   23d68:	ldrb	r2, [r2, #4]
   23d6c:	cmp	r2, #2
   23d70:	bne	23d4c <__assert_fail@plt+0x121a8>
   23d74:	cmp	r3, #0
   23d78:	beq	23d30 <__assert_fail@plt+0x1218c>
   23d7c:	tst	r3, #4
   23d80:	beq	23d00 <__assert_fail@plt+0x1215c>
   23d84:	cmp	r5, #0
   23d88:	beq	23d4c <__assert_fail@plt+0x121a8>
   23d8c:	tst	r3, #8
   23d90:	beq	23d10 <__assert_fail@plt+0x1216c>
   23d94:	b	23d4c <__assert_fail@plt+0x121a8>
   23d98:	mov	r0, #0
   23d9c:	b	23d30 <__assert_fail@plt+0x1218c>
   23da0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23da4:	strd	r6, [sp, #8]
   23da8:	str	r8, [sp, #16]
   23dac:	str	lr, [sp, #20]
   23db0:	ldr	r7, [sp, #28]
   23db4:	subs	r5, r0, #0
   23db8:	beq	23e6c <__assert_fail@plt+0x122c8>
   23dbc:	ldr	r4, [r5]
   23dc0:	cmp	r4, #0
   23dc4:	beq	23e74 <__assert_fail@plt+0x122d0>
   23dc8:	mov	r0, r3
   23dcc:	sub	r4, r4, #1
   23dd0:	str	r4, [r5]
   23dd4:	add	r4, r4, r4, lsl #1
   23dd8:	lsl	r4, r4, #3
   23ddc:	ldr	r3, [r5, #8]
   23de0:	ldr	r3, [r3, r4]
   23de4:	str	r3, [r1]
   23de8:	lsl	r6, r2, #3
   23dec:	ldr	r3, [r5, #8]
   23df0:	add	r3, r3, r4
   23df4:	mov	r2, r6
   23df8:	ldr	r1, [r3, #8]
   23dfc:	bl	11784 <memcpy@plt>
   23e00:	ldr	r3, [r5, #8]
   23e04:	add	r3, r3, r4
   23e08:	ldr	r1, [r3, #8]
   23e0c:	mov	r2, r6
   23e10:	add	r1, r1, r6
   23e14:	ldr	r0, [sp, #24]
   23e18:	bl	11784 <memcpy@plt>
   23e1c:	ldr	r0, [r7, #8]
   23e20:	bl	17750 <__assert_fail@plt+0x5bac>
   23e24:	ldr	r3, [r5, #8]
   23e28:	add	r3, r3, r4
   23e2c:	ldr	r0, [r3, #8]
   23e30:	bl	17750 <__assert_fail@plt+0x5bac>
   23e34:	ldr	r1, [r5, #8]
   23e38:	add	r1, r1, r4
   23e3c:	ldrd	r2, [r1, #12]
   23e40:	strd	r2, [r7]
   23e44:	ldr	r3, [r1, #20]
   23e48:	str	r3, [r7, #8]
   23e4c:	ldr	r3, [r5, #8]
   23e50:	add	r4, r3, r4
   23e54:	ldr	r0, [r4, #4]
   23e58:	ldrd	r4, [sp]
   23e5c:	ldrd	r6, [sp, #8]
   23e60:	ldr	r8, [sp, #16]
   23e64:	add	sp, sp, #20
   23e68:	pop	{pc}		; (ldr pc, [sp], #4)
   23e6c:	mvn	r0, #0
   23e70:	b	23e58 <__assert_fail@plt+0x122b4>
   23e74:	mvn	r0, #0
   23e78:	b	23e58 <__assert_fail@plt+0x122b4>
   23e7c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   23e80:	strd	r6, [sp, #8]
   23e84:	strd	r8, [sp, #16]
   23e88:	str	sl, [sp, #24]
   23e8c:	str	lr, [sp, #28]
   23e90:	mov	r6, r0
   23e94:	mov	r4, r1
   23e98:	mov	r5, r2
   23e9c:	mov	r9, r3
   23ea0:	ldr	r7, [sp, #32]
   23ea4:	ldr	r3, [sp, #36]	; 0x24
   23ea8:	tst	r3, #4194304	; 0x400000
   23eac:	beq	23ef0 <__assert_fail@plt+0x1234c>
   23eb0:	movw	r1, #9716	; 0x25f4
   23eb4:	movt	r1, #3
   23eb8:	mov	r0, r7
   23ebc:	bl	1170c <strcmp@plt>
   23ec0:	cmp	r0, #0
   23ec4:	movweq	r7, #9708	; 0x25ec
   23ec8:	movteq	r7, #3
   23ecc:	beq	23ef0 <__assert_fail@plt+0x1234c>
   23ed0:	movw	r1, #9724	; 0x25fc
   23ed4:	movt	r1, #3
   23ed8:	mov	r0, r7
   23edc:	bl	1170c <strcmp@plt>
   23ee0:	movw	r3, #9708	; 0x25ec
   23ee4:	movt	r3, #3
   23ee8:	cmp	r0, #0
   23eec:	moveq	r7, r3
   23ef0:	ldr	r3, [r5, #36]	; 0x24
   23ef4:	ldr	r2, [r9]
   23ef8:	cmp	r2, r3
   23efc:	beq	23f4c <__assert_fail@plt+0x123a8>
   23f00:	ldr	r9, [r5, #12]
   23f04:	ldr	r8, [r5, #36]	; 0x24
   23f08:	add	r3, r8, #1
   23f0c:	str	r3, [r5, #36]	; 0x24
   23f10:	mov	r0, r7
   23f14:	bl	116c4 <wctype@plt>
   23f18:	str	r0, [r9, r8, lsl #2]
   23f1c:	movw	r1, #9732	; 0x2604
   23f20:	movt	r1, #3
   23f24:	mov	r0, r7
   23f28:	bl	1170c <strcmp@plt>
   23f2c:	subs	r5, r0, #0
   23f30:	bne	24010 <__assert_fail@plt+0x1246c>
   23f34:	cmp	r6, #0
   23f38:	bne	23f74 <__assert_fail@plt+0x123d0>
   23f3c:	bl	11964 <__ctype_b_loc@plt>
   23f40:	mov	r3, r5
   23f44:	mov	lr, #1
   23f48:	b	23fcc <__assert_fail@plt+0x12428>
   23f4c:	lsl	r3, r3, #1
   23f50:	add	r8, r3, #1
   23f54:	lsl	r1, r8, #2
   23f58:	ldr	r0, [r5, #12]
   23f5c:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   23f60:	cmp	r0, #0
   23f64:	beq	248d8 <__assert_fail@plt+0x12d34>
   23f68:	str	r0, [r5, #12]
   23f6c:	str	r8, [r9]
   23f70:	b	23f00 <__assert_fail@plt+0x1235c>
   23f74:	bl	11964 <__ctype_b_loc@plt>
   23f78:	mov	r3, r5
   23f7c:	mov	lr, #1
   23f80:	b	23f90 <__assert_fail@plt+0x123ec>
   23f84:	add	r3, r3, #1
   23f88:	cmp	r3, #256	; 0x100
   23f8c:	beq	248dc <__assert_fail@plt+0x12d38>
   23f90:	ldr	r1, [r0]
   23f94:	lsl	r2, r3, #1
   23f98:	ldrh	r2, [r1, r2]
   23f9c:	tst	r2, #8
   23fa0:	beq	23f84 <__assert_fail@plt+0x123e0>
   23fa4:	ldrb	r2, [r6, r3]
   23fa8:	asr	ip, r2, #5
   23fac:	and	r2, r2, #31
   23fb0:	ldr	r1, [r4, ip, lsl #2]
   23fb4:	orr	r2, r1, lr, lsl r2
   23fb8:	str	r2, [r4, ip, lsl #2]
   23fbc:	b	23f84 <__assert_fail@plt+0x123e0>
   23fc0:	add	r3, r3, #1
   23fc4:	cmp	r3, #256	; 0x100
   23fc8:	beq	248dc <__assert_fail@plt+0x12d38>
   23fcc:	ldr	r1, [r0]
   23fd0:	lsl	r2, r3, #1
   23fd4:	ldrh	r2, [r1, r2]
   23fd8:	tst	r2, #8
   23fdc:	beq	23fc0 <__assert_fail@plt+0x1241c>
   23fe0:	add	r2, r3, #31
   23fe4:	cmp	r3, #0
   23fe8:	movge	r2, r3
   23fec:	asr	r2, r2, #5
   23ff0:	rsbs	r1, r3, #0
   23ff4:	and	ip, r3, #31
   23ff8:	and	r1, r1, #31
   23ffc:	rsbpl	ip, r1, #0
   24000:	ldr	r1, [r4, r2, lsl #2]
   24004:	orr	r1, r1, lr, lsl ip
   24008:	str	r1, [r4, r2, lsl #2]
   2400c:	b	23fc0 <__assert_fail@plt+0x1241c>
   24010:	movw	r1, #9740	; 0x260c
   24014:	movt	r1, #3
   24018:	mov	r0, r7
   2401c:	bl	1170c <strcmp@plt>
   24020:	subs	r5, r0, #0
   24024:	bne	240dc <__assert_fail@plt+0x12538>
   24028:	cmp	r6, #0
   2402c:	bne	24040 <__assert_fail@plt+0x1249c>
   24030:	bl	11964 <__ctype_b_loc@plt>
   24034:	mov	r3, r5
   24038:	mov	lr, #1
   2403c:	b	24098 <__assert_fail@plt+0x124f4>
   24040:	bl	11964 <__ctype_b_loc@plt>
   24044:	mov	r3, r5
   24048:	mov	lr, #1
   2404c:	b	2405c <__assert_fail@plt+0x124b8>
   24050:	add	r3, r3, #1
   24054:	cmp	r3, #256	; 0x100
   24058:	beq	248dc <__assert_fail@plt+0x12d38>
   2405c:	ldr	r1, [r0]
   24060:	lsl	r2, r3, #1
   24064:	ldrh	r2, [r1, r2]
   24068:	tst	r2, #2
   2406c:	beq	24050 <__assert_fail@plt+0x124ac>
   24070:	ldrb	r2, [r6, r3]
   24074:	asr	ip, r2, #5
   24078:	and	r2, r2, #31
   2407c:	ldr	r1, [r4, ip, lsl #2]
   24080:	orr	r2, r1, lr, lsl r2
   24084:	str	r2, [r4, ip, lsl #2]
   24088:	b	24050 <__assert_fail@plt+0x124ac>
   2408c:	add	r3, r3, #1
   24090:	cmp	r3, #256	; 0x100
   24094:	beq	248dc <__assert_fail@plt+0x12d38>
   24098:	ldr	r1, [r0]
   2409c:	lsl	r2, r3, #1
   240a0:	ldrh	r2, [r1, r2]
   240a4:	tst	r2, #2
   240a8:	beq	2408c <__assert_fail@plt+0x124e8>
   240ac:	add	r2, r3, #31
   240b0:	cmp	r3, #0
   240b4:	movge	r2, r3
   240b8:	asr	r2, r2, #5
   240bc:	rsbs	r1, r3, #0
   240c0:	and	ip, r3, #31
   240c4:	and	r1, r1, #31
   240c8:	rsbpl	ip, r1, #0
   240cc:	ldr	r1, [r4, r2, lsl #2]
   240d0:	orr	r1, r1, lr, lsl ip
   240d4:	str	r1, [r4, r2, lsl #2]
   240d8:	b	2408c <__assert_fail@plt+0x124e8>
   240dc:	movw	r1, #9724	; 0x25fc
   240e0:	movt	r1, #3
   240e4:	mov	r0, r7
   240e8:	bl	1170c <strcmp@plt>
   240ec:	subs	r5, r0, #0
   240f0:	bne	241a8 <__assert_fail@plt+0x12604>
   240f4:	cmp	r6, #0
   240f8:	bne	2410c <__assert_fail@plt+0x12568>
   240fc:	bl	11964 <__ctype_b_loc@plt>
   24100:	mov	r3, r5
   24104:	mov	lr, #1
   24108:	b	24164 <__assert_fail@plt+0x125c0>
   2410c:	bl	11964 <__ctype_b_loc@plt>
   24110:	mov	r3, r5
   24114:	mov	lr, #1
   24118:	b	24128 <__assert_fail@plt+0x12584>
   2411c:	add	r3, r3, #1
   24120:	cmp	r3, #256	; 0x100
   24124:	beq	248dc <__assert_fail@plt+0x12d38>
   24128:	ldr	r1, [r0]
   2412c:	lsl	r2, r3, #1
   24130:	ldrh	r2, [r1, r2]
   24134:	tst	r2, #512	; 0x200
   24138:	beq	2411c <__assert_fail@plt+0x12578>
   2413c:	ldrb	r2, [r6, r3]
   24140:	asr	ip, r2, #5
   24144:	and	r2, r2, #31
   24148:	ldr	r1, [r4, ip, lsl #2]
   2414c:	orr	r2, r1, lr, lsl r2
   24150:	str	r2, [r4, ip, lsl #2]
   24154:	b	2411c <__assert_fail@plt+0x12578>
   24158:	add	r3, r3, #1
   2415c:	cmp	r3, #256	; 0x100
   24160:	beq	248dc <__assert_fail@plt+0x12d38>
   24164:	ldr	r1, [r0]
   24168:	lsl	r2, r3, #1
   2416c:	ldrh	r2, [r1, r2]
   24170:	tst	r2, #512	; 0x200
   24174:	beq	24158 <__assert_fail@plt+0x125b4>
   24178:	add	r2, r3, #31
   2417c:	cmp	r3, #0
   24180:	movge	r2, r3
   24184:	asr	r2, r2, #5
   24188:	rsbs	r1, r3, #0
   2418c:	and	ip, r3, #31
   24190:	and	r1, r1, #31
   24194:	rsbpl	ip, r1, #0
   24198:	ldr	r1, [r4, r2, lsl #2]
   2419c:	orr	r1, r1, lr, lsl ip
   241a0:	str	r1, [r4, r2, lsl #2]
   241a4:	b	24158 <__assert_fail@plt+0x125b4>
   241a8:	movw	r1, #9748	; 0x2614
   241ac:	movt	r1, #3
   241b0:	mov	r0, r7
   241b4:	bl	1170c <strcmp@plt>
   241b8:	subs	r5, r0, #0
   241bc:	bne	24274 <__assert_fail@plt+0x126d0>
   241c0:	cmp	r6, #0
   241c4:	bne	241d8 <__assert_fail@plt+0x12634>
   241c8:	bl	11964 <__ctype_b_loc@plt>
   241cc:	mov	r3, r5
   241d0:	mov	lr, #1
   241d4:	b	24230 <__assert_fail@plt+0x1268c>
   241d8:	bl	11964 <__ctype_b_loc@plt>
   241dc:	mov	r3, r5
   241e0:	mov	lr, #1
   241e4:	b	241f4 <__assert_fail@plt+0x12650>
   241e8:	add	r3, r3, #1
   241ec:	cmp	r3, #256	; 0x100
   241f0:	beq	248dc <__assert_fail@plt+0x12d38>
   241f4:	ldr	r1, [r0]
   241f8:	lsl	r2, r3, #1
   241fc:	ldrh	r2, [r1, r2]
   24200:	tst	r2, #8192	; 0x2000
   24204:	beq	241e8 <__assert_fail@plt+0x12644>
   24208:	ldrb	r2, [r6, r3]
   2420c:	asr	ip, r2, #5
   24210:	and	r2, r2, #31
   24214:	ldr	r1, [r4, ip, lsl #2]
   24218:	orr	r2, r1, lr, lsl r2
   2421c:	str	r2, [r4, ip, lsl #2]
   24220:	b	241e8 <__assert_fail@plt+0x12644>
   24224:	add	r3, r3, #1
   24228:	cmp	r3, #256	; 0x100
   2422c:	beq	248dc <__assert_fail@plt+0x12d38>
   24230:	ldr	r1, [r0]
   24234:	lsl	r2, r3, #1
   24238:	ldrh	r2, [r1, r2]
   2423c:	tst	r2, #8192	; 0x2000
   24240:	beq	24224 <__assert_fail@plt+0x12680>
   24244:	add	r2, r3, #31
   24248:	cmp	r3, #0
   2424c:	movge	r2, r3
   24250:	asr	r2, r2, #5
   24254:	rsbs	r1, r3, #0
   24258:	and	ip, r3, #31
   2425c:	and	r1, r1, #31
   24260:	rsbpl	ip, r1, #0
   24264:	ldr	r1, [r4, r2, lsl #2]
   24268:	orr	r1, r1, lr, lsl ip
   2426c:	str	r1, [r4, r2, lsl #2]
   24270:	b	24224 <__assert_fail@plt+0x12680>
   24274:	movw	r1, #9708	; 0x25ec
   24278:	movt	r1, #3
   2427c:	mov	r0, r7
   24280:	bl	1170c <strcmp@plt>
   24284:	subs	r5, r0, #0
   24288:	bne	24340 <__assert_fail@plt+0x1279c>
   2428c:	cmp	r6, #0
   24290:	bne	242a4 <__assert_fail@plt+0x12700>
   24294:	bl	11964 <__ctype_b_loc@plt>
   24298:	mov	r3, r5
   2429c:	mov	lr, #1
   242a0:	b	242fc <__assert_fail@plt+0x12758>
   242a4:	bl	11964 <__ctype_b_loc@plt>
   242a8:	mov	r3, r5
   242ac:	mov	lr, #1
   242b0:	b	242c0 <__assert_fail@plt+0x1271c>
   242b4:	add	r3, r3, #1
   242b8:	cmp	r3, #256	; 0x100
   242bc:	beq	248dc <__assert_fail@plt+0x12d38>
   242c0:	ldr	r1, [r0]
   242c4:	lsl	r2, r3, #1
   242c8:	ldrh	r2, [r1, r2]
   242cc:	tst	r2, #1024	; 0x400
   242d0:	beq	242b4 <__assert_fail@plt+0x12710>
   242d4:	ldrb	r2, [r6, r3]
   242d8:	asr	ip, r2, #5
   242dc:	and	r2, r2, #31
   242e0:	ldr	r1, [r4, ip, lsl #2]
   242e4:	orr	r2, r1, lr, lsl r2
   242e8:	str	r2, [r4, ip, lsl #2]
   242ec:	b	242b4 <__assert_fail@plt+0x12710>
   242f0:	add	r3, r3, #1
   242f4:	cmp	r3, #256	; 0x100
   242f8:	beq	248dc <__assert_fail@plt+0x12d38>
   242fc:	ldr	r1, [r0]
   24300:	lsl	r2, r3, #1
   24304:	ldrh	r2, [r1, r2]
   24308:	tst	r2, #1024	; 0x400
   2430c:	beq	242f0 <__assert_fail@plt+0x1274c>
   24310:	add	r2, r3, #31
   24314:	cmp	r3, #0
   24318:	movge	r2, r3
   2431c:	asr	r2, r2, #5
   24320:	rsbs	r1, r3, #0
   24324:	and	ip, r3, #31
   24328:	and	r1, r1, #31
   2432c:	rsbpl	ip, r1, #0
   24330:	ldr	r1, [r4, r2, lsl #2]
   24334:	orr	r1, r1, lr, lsl ip
   24338:	str	r1, [r4, r2, lsl #2]
   2433c:	b	242f0 <__assert_fail@plt+0x1274c>
   24340:	movw	r1, #9756	; 0x261c
   24344:	movt	r1, #3
   24348:	mov	r0, r7
   2434c:	bl	1170c <strcmp@plt>
   24350:	subs	r5, r0, #0
   24354:	bne	2440c <__assert_fail@plt+0x12868>
   24358:	cmp	r6, #0
   2435c:	bne	24370 <__assert_fail@plt+0x127cc>
   24360:	bl	11964 <__ctype_b_loc@plt>
   24364:	mov	r3, r5
   24368:	mov	lr, #1
   2436c:	b	243c8 <__assert_fail@plt+0x12824>
   24370:	bl	11964 <__ctype_b_loc@plt>
   24374:	mov	r3, r5
   24378:	mov	lr, #1
   2437c:	b	2438c <__assert_fail@plt+0x127e8>
   24380:	add	r3, r3, #1
   24384:	cmp	r3, #256	; 0x100
   24388:	beq	248dc <__assert_fail@plt+0x12d38>
   2438c:	ldr	r1, [r0]
   24390:	lsl	r2, r3, #1
   24394:	ldrh	r2, [r1, r2]
   24398:	tst	r2, #2048	; 0x800
   2439c:	beq	24380 <__assert_fail@plt+0x127dc>
   243a0:	ldrb	r2, [r6, r3]
   243a4:	asr	ip, r2, #5
   243a8:	and	r2, r2, #31
   243ac:	ldr	r1, [r4, ip, lsl #2]
   243b0:	orr	r2, r1, lr, lsl r2
   243b4:	str	r2, [r4, ip, lsl #2]
   243b8:	b	24380 <__assert_fail@plt+0x127dc>
   243bc:	add	r3, r3, #1
   243c0:	cmp	r3, #256	; 0x100
   243c4:	beq	248dc <__assert_fail@plt+0x12d38>
   243c8:	ldr	r1, [r0]
   243cc:	lsl	r2, r3, #1
   243d0:	ldrh	r2, [r1, r2]
   243d4:	tst	r2, #2048	; 0x800
   243d8:	beq	243bc <__assert_fail@plt+0x12818>
   243dc:	add	r2, r3, #31
   243e0:	cmp	r3, #0
   243e4:	movge	r2, r3
   243e8:	asr	r2, r2, #5
   243ec:	rsbs	r1, r3, #0
   243f0:	and	ip, r3, #31
   243f4:	and	r1, r1, #31
   243f8:	rsbpl	ip, r1, #0
   243fc:	ldr	r1, [r4, r2, lsl #2]
   24400:	orr	r1, r1, lr, lsl ip
   24404:	str	r1, [r4, r2, lsl #2]
   24408:	b	243bc <__assert_fail@plt+0x12818>
   2440c:	movw	r1, #9764	; 0x2624
   24410:	movt	r1, #3
   24414:	mov	r0, r7
   24418:	bl	1170c <strcmp@plt>
   2441c:	subs	r5, r0, #0
   24420:	bne	244d8 <__assert_fail@plt+0x12934>
   24424:	cmp	r6, #0
   24428:	bne	2443c <__assert_fail@plt+0x12898>
   2442c:	bl	11964 <__ctype_b_loc@plt>
   24430:	mov	r3, r5
   24434:	mov	lr, #1
   24438:	b	24494 <__assert_fail@plt+0x128f0>
   2443c:	bl	11964 <__ctype_b_loc@plt>
   24440:	mov	r3, r5
   24444:	mov	lr, #1
   24448:	b	24458 <__assert_fail@plt+0x128b4>
   2444c:	add	r3, r3, #1
   24450:	cmp	r3, #256	; 0x100
   24454:	beq	248dc <__assert_fail@plt+0x12d38>
   24458:	ldr	r1, [r0]
   2445c:	lsl	r2, r3, #1
   24460:	ldrh	r2, [r1, r2]
   24464:	tst	r2, #16384	; 0x4000
   24468:	beq	2444c <__assert_fail@plt+0x128a8>
   2446c:	ldrb	r2, [r6, r3]
   24470:	asr	ip, r2, #5
   24474:	and	r2, r2, #31
   24478:	ldr	r1, [r4, ip, lsl #2]
   2447c:	orr	r2, r1, lr, lsl r2
   24480:	str	r2, [r4, ip, lsl #2]
   24484:	b	2444c <__assert_fail@plt+0x128a8>
   24488:	add	r3, r3, #1
   2448c:	cmp	r3, #256	; 0x100
   24490:	beq	248dc <__assert_fail@plt+0x12d38>
   24494:	ldr	r1, [r0]
   24498:	lsl	r2, r3, #1
   2449c:	ldrh	r2, [r1, r2]
   244a0:	tst	r2, #16384	; 0x4000
   244a4:	beq	24488 <__assert_fail@plt+0x128e4>
   244a8:	add	r2, r3, #31
   244ac:	cmp	r3, #0
   244b0:	movge	r2, r3
   244b4:	asr	r2, r2, #5
   244b8:	rsbs	r1, r3, #0
   244bc:	and	ip, r3, #31
   244c0:	and	r1, r1, #31
   244c4:	rsbpl	ip, r1, #0
   244c8:	ldr	r1, [r4, r2, lsl #2]
   244cc:	orr	r1, r1, lr, lsl ip
   244d0:	str	r1, [r4, r2, lsl #2]
   244d4:	b	24488 <__assert_fail@plt+0x128e4>
   244d8:	movw	r1, #9716	; 0x25f4
   244dc:	movt	r1, #3
   244e0:	mov	r0, r7
   244e4:	bl	1170c <strcmp@plt>
   244e8:	subs	r5, r0, #0
   244ec:	bne	245a4 <__assert_fail@plt+0x12a00>
   244f0:	cmp	r6, #0
   244f4:	bne	24508 <__assert_fail@plt+0x12964>
   244f8:	bl	11964 <__ctype_b_loc@plt>
   244fc:	mov	r3, r5
   24500:	mov	lr, #1
   24504:	b	24560 <__assert_fail@plt+0x129bc>
   24508:	bl	11964 <__ctype_b_loc@plt>
   2450c:	mov	r3, r5
   24510:	mov	lr, #1
   24514:	b	24524 <__assert_fail@plt+0x12980>
   24518:	add	r3, r3, #1
   2451c:	cmp	r3, #256	; 0x100
   24520:	beq	248dc <__assert_fail@plt+0x12d38>
   24524:	ldr	r1, [r0]
   24528:	lsl	r2, r3, #1
   2452c:	ldrh	r2, [r1, r2]
   24530:	tst	r2, #256	; 0x100
   24534:	beq	24518 <__assert_fail@plt+0x12974>
   24538:	ldrb	r2, [r6, r3]
   2453c:	asr	ip, r2, #5
   24540:	and	r2, r2, #31
   24544:	ldr	r1, [r4, ip, lsl #2]
   24548:	orr	r2, r1, lr, lsl r2
   2454c:	str	r2, [r4, ip, lsl #2]
   24550:	b	24518 <__assert_fail@plt+0x12974>
   24554:	add	r3, r3, #1
   24558:	cmp	r3, #256	; 0x100
   2455c:	beq	248dc <__assert_fail@plt+0x12d38>
   24560:	ldr	r1, [r0]
   24564:	lsl	r2, r3, #1
   24568:	ldrh	r2, [r1, r2]
   2456c:	tst	r2, #256	; 0x100
   24570:	beq	24554 <__assert_fail@plt+0x129b0>
   24574:	add	r2, r3, #31
   24578:	cmp	r3, #0
   2457c:	movge	r2, r3
   24580:	asr	r2, r2, #5
   24584:	rsbs	r1, r3, #0
   24588:	and	ip, r3, #31
   2458c:	and	r1, r1, #31
   24590:	rsbpl	ip, r1, #0
   24594:	ldr	r1, [r4, r2, lsl #2]
   24598:	orr	r1, r1, lr, lsl ip
   2459c:	str	r1, [r4, r2, lsl #2]
   245a0:	b	24554 <__assert_fail@plt+0x129b0>
   245a4:	movw	r1, #9772	; 0x262c
   245a8:	movt	r1, #3
   245ac:	mov	r0, r7
   245b0:	bl	1170c <strcmp@plt>
   245b4:	subs	r5, r0, #0
   245b8:	bne	24670 <__assert_fail@plt+0x12acc>
   245bc:	cmp	r6, #0
   245c0:	bne	245d4 <__assert_fail@plt+0x12a30>
   245c4:	bl	11964 <__ctype_b_loc@plt>
   245c8:	mov	r3, r5
   245cc:	mov	lr, #1
   245d0:	b	2462c <__assert_fail@plt+0x12a88>
   245d4:	bl	11964 <__ctype_b_loc@plt>
   245d8:	mov	r3, r5
   245dc:	mov	lr, #1
   245e0:	b	245f0 <__assert_fail@plt+0x12a4c>
   245e4:	add	r3, r3, #1
   245e8:	cmp	r3, #256	; 0x100
   245ec:	beq	248dc <__assert_fail@plt+0x12d38>
   245f0:	ldr	r1, [r0]
   245f4:	lsl	r2, r3, #1
   245f8:	ldrh	r2, [r1, r2]
   245fc:	tst	r2, #1
   24600:	beq	245e4 <__assert_fail@plt+0x12a40>
   24604:	ldrb	r2, [r6, r3]
   24608:	asr	ip, r2, #5
   2460c:	and	r2, r2, #31
   24610:	ldr	r1, [r4, ip, lsl #2]
   24614:	orr	r2, r1, lr, lsl r2
   24618:	str	r2, [r4, ip, lsl #2]
   2461c:	b	245e4 <__assert_fail@plt+0x12a40>
   24620:	add	r3, r3, #1
   24624:	cmp	r3, #256	; 0x100
   24628:	beq	248dc <__assert_fail@plt+0x12d38>
   2462c:	ldr	r1, [r0]
   24630:	lsl	r2, r3, #1
   24634:	ldrh	r2, [r1, r2]
   24638:	tst	r2, #1
   2463c:	beq	24620 <__assert_fail@plt+0x12a7c>
   24640:	add	r2, r3, #31
   24644:	cmp	r3, #0
   24648:	movge	r2, r3
   2464c:	asr	r2, r2, #5
   24650:	rsbs	r1, r3, #0
   24654:	and	ip, r3, #31
   24658:	and	r1, r1, #31
   2465c:	rsbpl	ip, r1, #0
   24660:	ldr	r1, [r4, r2, lsl #2]
   24664:	orr	r1, r1, lr, lsl ip
   24668:	str	r1, [r4, r2, lsl #2]
   2466c:	b	24620 <__assert_fail@plt+0x12a7c>
   24670:	movw	r1, #9780	; 0x2634
   24674:	movt	r1, #3
   24678:	mov	r0, r7
   2467c:	bl	1170c <strcmp@plt>
   24680:	subs	r5, r0, #0
   24684:	bne	2473c <__assert_fail@plt+0x12b98>
   24688:	cmp	r6, #0
   2468c:	bne	246a0 <__assert_fail@plt+0x12afc>
   24690:	bl	11964 <__ctype_b_loc@plt>
   24694:	mov	r3, r5
   24698:	mov	lr, #1
   2469c:	b	246f8 <__assert_fail@plt+0x12b54>
   246a0:	bl	11964 <__ctype_b_loc@plt>
   246a4:	mov	r3, r5
   246a8:	mov	lr, #1
   246ac:	b	246bc <__assert_fail@plt+0x12b18>
   246b0:	add	r3, r3, #1
   246b4:	cmp	r3, #256	; 0x100
   246b8:	beq	248dc <__assert_fail@plt+0x12d38>
   246bc:	ldr	r1, [r0]
   246c0:	lsl	r2, r3, #1
   246c4:	ldrsh	r2, [r1, r2]
   246c8:	cmp	r2, #0
   246cc:	bge	246b0 <__assert_fail@plt+0x12b0c>
   246d0:	ldrb	r2, [r6, r3]
   246d4:	asr	ip, r2, #5
   246d8:	and	r2, r2, #31
   246dc:	ldr	r1, [r4, ip, lsl #2]
   246e0:	orr	r2, r1, lr, lsl r2
   246e4:	str	r2, [r4, ip, lsl #2]
   246e8:	b	246b0 <__assert_fail@plt+0x12b0c>
   246ec:	add	r3, r3, #1
   246f0:	cmp	r3, #256	; 0x100
   246f4:	beq	248dc <__assert_fail@plt+0x12d38>
   246f8:	ldr	r1, [r0]
   246fc:	lsl	r2, r3, #1
   24700:	ldrsh	r2, [r1, r2]
   24704:	cmp	r2, #0
   24708:	bge	246ec <__assert_fail@plt+0x12b48>
   2470c:	add	r2, r3, #31
   24710:	cmp	r3, #0
   24714:	movge	r2, r3
   24718:	asr	r2, r2, #5
   2471c:	rsbs	r1, r3, #0
   24720:	and	ip, r3, #31
   24724:	and	r1, r1, #31
   24728:	rsbpl	ip, r1, #0
   2472c:	ldr	r1, [r4, r2, lsl #2]
   24730:	orr	r1, r1, lr, lsl ip
   24734:	str	r1, [r4, r2, lsl #2]
   24738:	b	246ec <__assert_fail@plt+0x12b48>
   2473c:	movw	r1, #9788	; 0x263c
   24740:	movt	r1, #3
   24744:	mov	r0, r7
   24748:	bl	1170c <strcmp@plt>
   2474c:	subs	r5, r0, #0
   24750:	bne	24808 <__assert_fail@plt+0x12c64>
   24754:	cmp	r6, #0
   24758:	bne	2476c <__assert_fail@plt+0x12bc8>
   2475c:	bl	11964 <__ctype_b_loc@plt>
   24760:	mov	r3, r5
   24764:	mov	lr, #1
   24768:	b	247c4 <__assert_fail@plt+0x12c20>
   2476c:	bl	11964 <__ctype_b_loc@plt>
   24770:	mov	r3, #0
   24774:	mov	lr, #1
   24778:	b	2478c <__assert_fail@plt+0x12be8>
   2477c:	add	r3, r3, #2
   24780:	add	r6, r6, #1
   24784:	cmp	r3, #512	; 0x200
   24788:	beq	248dc <__assert_fail@plt+0x12d38>
   2478c:	ldr	r2, [r0]
   24790:	ldrh	r2, [r2, r3]
   24794:	tst	r2, #4
   24798:	beq	2477c <__assert_fail@plt+0x12bd8>
   2479c:	ldrb	r2, [r6]
   247a0:	asr	ip, r2, #5
   247a4:	and	r2, r2, #31
   247a8:	ldr	r1, [r4, ip, lsl #2]
   247ac:	orr	r2, r1, lr, lsl r2
   247b0:	str	r2, [r4, ip, lsl #2]
   247b4:	b	2477c <__assert_fail@plt+0x12bd8>
   247b8:	add	r3, r3, #1
   247bc:	cmp	r3, #256	; 0x100
   247c0:	beq	248dc <__assert_fail@plt+0x12d38>
   247c4:	ldr	r1, [r0]
   247c8:	lsl	r2, r3, #1
   247cc:	ldrh	r2, [r1, r2]
   247d0:	tst	r2, #4
   247d4:	beq	247b8 <__assert_fail@plt+0x12c14>
   247d8:	add	r2, r3, #31
   247dc:	cmp	r3, #0
   247e0:	movge	r2, r3
   247e4:	asr	r2, r2, #5
   247e8:	rsbs	r1, r3, #0
   247ec:	and	ip, r3, #31
   247f0:	and	r1, r1, #31
   247f4:	rsbpl	ip, r1, #0
   247f8:	ldr	r1, [r4, r2, lsl #2]
   247fc:	orr	r1, r1, lr, lsl ip
   24800:	str	r1, [r4, r2, lsl #2]
   24804:	b	247b8 <__assert_fail@plt+0x12c14>
   24808:	movw	r1, #9796	; 0x2644
   2480c:	movt	r1, #3
   24810:	mov	r0, r7
   24814:	bl	1170c <strcmp@plt>
   24818:	subs	r5, r0, #0
   2481c:	movne	r5, #4
   24820:	bne	248dc <__assert_fail@plt+0x12d38>
   24824:	cmp	r6, #0
   24828:	bne	2483c <__assert_fail@plt+0x12c98>
   2482c:	bl	11964 <__ctype_b_loc@plt>
   24830:	mov	r3, r5
   24834:	mov	lr, #1
   24838:	b	24894 <__assert_fail@plt+0x12cf0>
   2483c:	bl	11964 <__ctype_b_loc@plt>
   24840:	mov	r3, r5
   24844:	mov	lr, #1
   24848:	b	24858 <__assert_fail@plt+0x12cb4>
   2484c:	add	r3, r3, #1
   24850:	cmp	r3, #256	; 0x100
   24854:	beq	248dc <__assert_fail@plt+0x12d38>
   24858:	ldr	r1, [r0]
   2485c:	lsl	r2, r3, #1
   24860:	ldrh	r2, [r1, r2]
   24864:	tst	r2, #4096	; 0x1000
   24868:	beq	2484c <__assert_fail@plt+0x12ca8>
   2486c:	ldrb	r2, [r6, r3]
   24870:	asr	ip, r2, #5
   24874:	and	r2, r2, #31
   24878:	ldr	r1, [r4, ip, lsl #2]
   2487c:	orr	r2, r1, lr, lsl r2
   24880:	str	r2, [r4, ip, lsl #2]
   24884:	b	2484c <__assert_fail@plt+0x12ca8>
   24888:	add	r3, r3, #1
   2488c:	cmp	r3, #256	; 0x100
   24890:	beq	248dc <__assert_fail@plt+0x12d38>
   24894:	ldr	r1, [r0]
   24898:	lsl	r2, r3, #1
   2489c:	ldrh	r2, [r1, r2]
   248a0:	tst	r2, #4096	; 0x1000
   248a4:	beq	24888 <__assert_fail@plt+0x12ce4>
   248a8:	add	r2, r3, #31
   248ac:	cmp	r3, #0
   248b0:	movge	r2, r3
   248b4:	asr	r2, r2, #5
   248b8:	rsbs	r1, r3, #0
   248bc:	and	ip, r3, #31
   248c0:	and	r1, r1, #31
   248c4:	rsbpl	ip, r1, #0
   248c8:	ldr	r1, [r4, r2, lsl #2]
   248cc:	orr	r1, r1, lr, lsl ip
   248d0:	str	r1, [r4, r2, lsl #2]
   248d4:	b	24888 <__assert_fail@plt+0x12ce4>
   248d8:	mov	r5, #12
   248dc:	mov	r0, r5
   248e0:	ldrd	r4, [sp]
   248e4:	ldrd	r6, [sp, #8]
   248e8:	ldrd	r8, [sp, #16]
   248ec:	ldr	sl, [sp, #24]
   248f0:	add	sp, sp, #28
   248f4:	pop	{pc}		; (ldr pc, [sp], #4)
   248f8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   248fc:	strd	r6, [sp, #8]
   24900:	strd	r8, [sp, #16]
   24904:	str	sl, [sp, #24]
   24908:	str	lr, [sp, #28]
   2490c:	sub	sp, sp, #24
   24910:	mov	r6, r0
   24914:	mov	r9, r1
   24918:	mov	sl, r2
   2491c:	mov	r5, r3
   24920:	ldrb	r8, [sp, #56]	; 0x38
   24924:	mov	r3, #0
   24928:	str	r3, [sp, #20]
   2492c:	mov	r1, #1
   24930:	mov	r0, #32
   24934:	bl	2ef9c <__assert_fail@plt+0x1d3f8>
   24938:	subs	r4, r0, #0
   2493c:	beq	24ab0 <__assert_fail@plt+0x12f0c>
   24940:	mov	r1, #1
   24944:	mov	r0, #40	; 0x28
   24948:	bl	2ef9c <__assert_fail@plt+0x1d3f8>
   2494c:	subs	r7, r0, #0
   24950:	beq	24ac4 <__assert_fail@plt+0x12f20>
   24954:	ldrb	r3, [r7, #16]
   24958:	bfi	r3, r8, #0, #1
   2495c:	strb	r3, [r7, #16]
   24960:	mov	r3, #0
   24964:	str	r3, [sp, #4]
   24968:	str	sl, [sp]
   2496c:	add	r3, sp, #20
   24970:	mov	r2, r7
   24974:	mov	r1, r4
   24978:	mov	r0, r9
   2497c:	bl	23e7c <__assert_fail@plt+0x122d8>
   24980:	subs	r9, r0, #0
   24984:	bne	24ae0 <__assert_fail@plt+0x12f3c>
   24988:	ldrb	r3, [r5]
   2498c:	cmp	r3, #0
   24990:	beq	249b8 <__assert_fail@plt+0x12e14>
   24994:	mov	r0, #1
   24998:	lsr	r1, r3, #5
   2499c:	and	r3, r3, #31
   249a0:	ldr	r2, [r4, r1, lsl #2]
   249a4:	orr	r3, r2, r0, lsl r3
   249a8:	str	r3, [r4, r1, lsl #2]
   249ac:	ldrb	r3, [r5, #1]!
   249b0:	cmp	r3, #0
   249b4:	bne	24998 <__assert_fail@plt+0x12df4>
   249b8:	cmp	r8, #0
   249bc:	beq	249dc <__assert_fail@plt+0x12e38>
   249c0:	sub	r3, r4, #4
   249c4:	add	r1, r4, #28
   249c8:	ldr	r2, [r3, #4]!
   249cc:	mvn	r2, r2
   249d0:	str	r2, [r3]
   249d4:	cmp	r3, r1
   249d8:	bne	249c8 <__assert_fail@plt+0x12e24>
   249dc:	ldr	r3, [r6, #92]	; 0x5c
   249e0:	cmp	r3, #1
   249e4:	ble	24a10 <__assert_fail@plt+0x12e6c>
   249e8:	sub	r3, r4, #4
   249ec:	ldr	r1, [r6, #60]	; 0x3c
   249f0:	sub	r1, r1, #4
   249f4:	add	ip, r4, #28
   249f8:	ldr	r2, [r3, #4]!
   249fc:	ldr	r0, [r1, #4]!
   24a00:	and	r2, r2, r0
   24a04:	str	r2, [r3]
   24a08:	cmp	r3, ip
   24a0c:	bne	249f8 <__assert_fail@plt+0x12e54>
   24a10:	mov	r1, #0
   24a14:	str	r1, [sp, #16]
   24a18:	str	r4, [sp, #12]
   24a1c:	mov	r3, #3
   24a20:	strb	r3, [sp, #16]
   24a24:	add	r3, sp, #12
   24a28:	mov	r2, r1
   24a2c:	mov	r0, r6
   24a30:	bl	203e8 <__assert_fail@plt+0xe844>
   24a34:	subs	r5, r0, #0
   24a38:	beq	24b0c <__assert_fail@plt+0x12f68>
   24a3c:	ldr	r3, [r6, #92]	; 0x5c
   24a40:	cmp	r3, #1
   24a44:	ble	24b00 <__assert_fail@plt+0x12f5c>
   24a48:	mov	r3, #6
   24a4c:	strb	r3, [sp, #16]
   24a50:	str	r7, [sp, #12]
   24a54:	ldrb	r3, [r6, #88]	; 0x58
   24a58:	orr	r3, r3, #2
   24a5c:	strb	r3, [r6, #88]	; 0x58
   24a60:	add	r3, sp, #12
   24a64:	mov	r2, #0
   24a68:	mov	r1, r2
   24a6c:	mov	r0, r6
   24a70:	bl	203e8 <__assert_fail@plt+0xe844>
   24a74:	subs	r2, r0, #0
   24a78:	beq	24b0c <__assert_fail@plt+0x12f68>
   24a7c:	mov	r3, #10
   24a80:	mov	r1, r5
   24a84:	mov	r0, r6
   24a88:	bl	20584 <__assert_fail@plt+0xe9e0>
   24a8c:	mov	r5, r0
   24a90:	mov	r0, r5
   24a94:	add	sp, sp, #24
   24a98:	ldrd	r4, [sp]
   24a9c:	ldrd	r6, [sp, #8]
   24aa0:	ldrd	r8, [sp, #16]
   24aa4:	ldr	sl, [sp, #24]
   24aa8:	add	sp, sp, #28
   24aac:	pop	{pc}		; (ldr pc, [sp], #4)
   24ab0:	mov	r3, #12
   24ab4:	ldr	r2, [sp, #60]	; 0x3c
   24ab8:	str	r3, [r2]
   24abc:	mov	r5, r4
   24ac0:	b	24a90 <__assert_fail@plt+0x12eec>
   24ac4:	mov	r0, r4
   24ac8:	bl	17750 <__assert_fail@plt+0x5bac>
   24acc:	mov	r3, #12
   24ad0:	ldr	r2, [sp, #60]	; 0x3c
   24ad4:	str	r3, [r2]
   24ad8:	mov	r5, r7
   24adc:	b	24a90 <__assert_fail@plt+0x12eec>
   24ae0:	mov	r0, r4
   24ae4:	bl	17750 <__assert_fail@plt+0x5bac>
   24ae8:	mov	r0, r7
   24aec:	bl	220e4 <__assert_fail@plt+0x10540>
   24af0:	ldr	r3, [sp, #60]	; 0x3c
   24af4:	str	r9, [r3]
   24af8:	mov	r5, #0
   24afc:	b	24a90 <__assert_fail@plt+0x12eec>
   24b00:	mov	r0, r7
   24b04:	bl	220e4 <__assert_fail@plt+0x10540>
   24b08:	b	24a90 <__assert_fail@plt+0x12eec>
   24b0c:	mov	r0, r4
   24b10:	bl	17750 <__assert_fail@plt+0x5bac>
   24b14:	mov	r0, r7
   24b18:	bl	220e4 <__assert_fail@plt+0x10540>
   24b1c:	mov	r3, #12
   24b20:	ldr	r2, [sp, #60]	; 0x3c
   24b24:	str	r3, [r2]
   24b28:	mov	r5, #0
   24b2c:	b	24a90 <__assert_fail@plt+0x12eec>
   24b30:	strd	r4, [sp, #-36]!	; 0xffffffdc
   24b34:	strd	r6, [sp, #8]
   24b38:	strd	r8, [sp, #16]
   24b3c:	strd	sl, [sp, #24]
   24b40:	str	lr, [sp, #32]
   24b44:	sub	sp, sp, #4
   24b48:	ldr	r9, [r0]
   24b4c:	add	ip, r9, r1, lsl #3
   24b50:	ldrb	fp, [ip, #4]
   24b54:	cmp	fp, #7
   24b58:	beq	24bc4 <__assert_fail@plt+0x13020>
   24b5c:	mov	r5, r3
   24b60:	mov	r6, r2
   24b64:	mov	r8, r1
   24b68:	mov	r7, r0
   24b6c:	mov	r1, r3
   24b70:	mov	r0, r2
   24b74:	bl	1f5a4 <__assert_fail@plt+0xda00>
   24b78:	mov	sl, r0
   24b7c:	cmp	fp, #5
   24b80:	beq	24cd8 <__assert_fail@plt+0x13134>
   24b84:	cmp	fp, #6
   24b88:	movne	r4, #0
   24b8c:	moveq	r4, #1
   24b90:	cmp	r0, #1
   24b94:	movle	r4, #0
   24b98:	cmp	r4, #0
   24b9c:	moveq	sl, #0
   24ba0:	bne	24d20 <__assert_fail@plt+0x1317c>
   24ba4:	mov	r0, sl
   24ba8:	add	sp, sp, #4
   24bac:	ldrd	r4, [sp]
   24bb0:	ldrd	r6, [sp, #8]
   24bb4:	ldrd	r8, [sp, #16]
   24bb8:	ldrd	sl, [sp, #24]
   24bbc:	add	sp, sp, #32
   24bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   24bc4:	ldr	r1, [r2, #4]
   24bc8:	ldrb	r0, [r1, r3]
   24bcc:	cmp	r0, #193	; 0xc1
   24bd0:	movls	sl, #0
   24bd4:	bls	24ba4 <__assert_fail@plt+0x13000>
   24bd8:	add	ip, r3, #1
   24bdc:	ldr	r2, [r2, #48]	; 0x30
   24be0:	cmp	ip, r2
   24be4:	movge	sl, #0
   24be8:	bge	24ba4 <__assert_fail@plt+0x13000>
   24bec:	add	lr, r1, r3
   24bf0:	ldrb	lr, [lr, #1]
   24bf4:	cmp	r0, #223	; 0xdf
   24bf8:	bls	24c60 <__assert_fail@plt+0x130bc>
   24bfc:	cmp	r0, #239	; 0xef
   24c00:	bhi	24c74 <__assert_fail@plt+0x130d0>
   24c04:	cmp	lr, #159	; 0x9f
   24c08:	cmpls	r0, #224	; 0xe0
   24c0c:	movne	sl, #3
   24c10:	beq	24e48 <__assert_fail@plt+0x132a4>
   24c14:	add	r0, sl, r3
   24c18:	cmp	r2, r0
   24c1c:	movlt	sl, #0
   24c20:	blt	24ba4 <__assert_fail@plt+0x13000>
   24c24:	ldrb	r2, [r1, ip]
   24c28:	eor	r2, r2, #128	; 0x80
   24c2c:	cmp	r2, #63	; 0x3f
   24c30:	bhi	24e50 <__assert_fail@plt+0x132ac>
   24c34:	add	r0, r3, #2
   24c38:	add	r0, r1, r0
   24c3c:	add	r3, r1, r3
   24c40:	add	r3, r3, sl
   24c44:	ldrb	r2, [r0], #1
   24c48:	eor	r2, r2, #128	; 0x80
   24c4c:	cmp	r2, #63	; 0x3f
   24c50:	bhi	24e58 <__assert_fail@plt+0x132b4>
   24c54:	cmp	r3, r0
   24c58:	bne	24c44 <__assert_fail@plt+0x130a0>
   24c5c:	b	24ba4 <__assert_fail@plt+0x13000>
   24c60:	eor	lr, lr, #128	; 0x80
   24c64:	cmp	lr, #63	; 0x3f
   24c68:	movhi	sl, #0
   24c6c:	movls	sl, #2
   24c70:	b	24ba4 <__assert_fail@plt+0x13000>
   24c74:	cmp	r0, #247	; 0xf7
   24c78:	bhi	24c94 <__assert_fail@plt+0x130f0>
   24c7c:	cmp	lr, #143	; 0x8f
   24c80:	cmpls	r0, #240	; 0xf0
   24c84:	movne	sl, #4
   24c88:	bne	24c14 <__assert_fail@plt+0x13070>
   24c8c:	mov	sl, #0
   24c90:	b	24ba4 <__assert_fail@plt+0x13000>
   24c94:	cmp	r0, #251	; 0xfb
   24c98:	bhi	24cb4 <__assert_fail@plt+0x13110>
   24c9c:	cmp	lr, #135	; 0x87
   24ca0:	cmpls	r0, #248	; 0xf8
   24ca4:	movne	sl, #5
   24ca8:	bne	24c14 <__assert_fail@plt+0x13070>
   24cac:	mov	sl, #0
   24cb0:	b	24ba4 <__assert_fail@plt+0x13000>
   24cb4:	cmp	r0, #253	; 0xfd
   24cb8:	movhi	sl, #0
   24cbc:	bhi	24ba4 <__assert_fail@plt+0x13000>
   24cc0:	cmp	lr, #131	; 0x83
   24cc4:	cmpls	r0, #252	; 0xfc
   24cc8:	moveq	sl, #0
   24ccc:	beq	24ba4 <__assert_fail@plt+0x13000>
   24cd0:	mov	sl, #6
   24cd4:	b	24c14 <__assert_fail@plt+0x13070>
   24cd8:	cmp	r0, #1
   24cdc:	movle	sl, #0
   24ce0:	ble	24ba4 <__assert_fail@plt+0x13000>
   24ce4:	ldr	r3, [r7, #128]	; 0x80
   24ce8:	tst	r3, #64	; 0x40
   24cec:	bne	24d04 <__assert_fail@plt+0x13160>
   24cf0:	ldr	r2, [r6, #4]
   24cf4:	ldrb	r2, [r2, r5]
   24cf8:	cmp	r2, #10
   24cfc:	moveq	sl, #0
   24d00:	beq	24ba4 <__assert_fail@plt+0x13000>
   24d04:	tst	r3, #128	; 0x80
   24d08:	beq	24ba4 <__assert_fail@plt+0x13000>
   24d0c:	ldr	r3, [r6, #4]
   24d10:	ldrb	r3, [r3, r5]
   24d14:	cmp	r3, #0
   24d18:	moveq	sl, #0
   24d1c:	b	24ba4 <__assert_fail@plt+0x13000>
   24d20:	ldr	r7, [r9, r8, lsl #3]
   24d24:	ldr	r3, [r7, #32]
   24d28:	cmp	r3, #0
   24d2c:	bne	24d6c <__assert_fail@plt+0x131c8>
   24d30:	ldr	r3, [r7, #36]	; 0x24
   24d34:	cmp	r3, #0
   24d38:	bne	24d6c <__assert_fail@plt+0x131c8>
   24d3c:	ldr	r3, [r7, #20]
   24d40:	cmp	r3, #0
   24d44:	moveq	r4, #0
   24d48:	beq	24e00 <__assert_fail@plt+0x1325c>
   24d4c:	mov	r1, r5
   24d50:	mov	r0, r6
   24d54:	bl	1f614 <__assert_fail@plt+0xda70>
   24d58:	mov	r4, r0
   24d5c:	ldr	r0, [r7, #20]
   24d60:	cmp	r0, #0
   24d64:	bgt	24d88 <__assert_fail@plt+0x131e4>
   24d68:	b	24e00 <__assert_fail@plt+0x1325c>
   24d6c:	mov	r1, r5
   24d70:	mov	r0, r6
   24d74:	bl	1f614 <__assert_fail@plt+0xda70>
   24d78:	mov	r4, r0
   24d7c:	ldr	r0, [r7, #20]
   24d80:	cmp	r0, #0
   24d84:	ble	24dc8 <__assert_fail@plt+0x13224>
   24d88:	ldr	r2, [r7]
   24d8c:	ldr	r3, [r2]
   24d90:	cmp	r3, r4
   24d94:	beq	24db4 <__assert_fail@plt+0x13210>
   24d98:	mov	r3, #0
   24d9c:	add	r3, r3, #1
   24da0:	cmp	r0, r3
   24da4:	beq	24dc8 <__assert_fail@plt+0x13224>
   24da8:	ldr	r1, [r2, #4]!
   24dac:	cmp	r1, r4
   24db0:	bne	24d9c <__assert_fail@plt+0x131f8>
   24db4:	ldrb	r3, [r7, #16]
   24db8:	and	r3, r3, #1
   24dbc:	cmp	r3, #0
   24dc0:	movne	sl, #0
   24dc4:	b	24ba4 <__assert_fail@plt+0x13000>
   24dc8:	ldr	r3, [r7, #36]	; 0x24
   24dcc:	cmp	r3, #0
   24dd0:	ble	24e00 <__assert_fail@plt+0x1325c>
   24dd4:	mov	r5, #0
   24dd8:	ldr	r3, [r7, #12]
   24ddc:	ldr	r1, [r3, r5, lsl #2]
   24de0:	mov	r0, r4
   24de4:	bl	11700 <iswctype@plt>
   24de8:	cmp	r0, #0
   24dec:	bne	24db4 <__assert_fail@plt+0x13210>
   24df0:	add	r5, r5, #1
   24df4:	ldr	r3, [r7, #36]	; 0x24
   24df8:	cmp	r3, r5
   24dfc:	bgt	24dd8 <__assert_fail@plt+0x13234>
   24e00:	ldr	r0, [r7, #32]
   24e04:	cmp	r0, #0
   24e08:	ble	24e68 <__assert_fail@plt+0x132c4>
   24e0c:	ldr	r2, [r7, #4]
   24e10:	sub	r2, r2, #4
   24e14:	mov	r3, #0
   24e18:	b	24e28 <__assert_fail@plt+0x13284>
   24e1c:	add	r3, r3, #1
   24e20:	cmp	r0, r3
   24e24:	beq	24e68 <__assert_fail@plt+0x132c4>
   24e28:	ldr	r1, [r2, #4]!
   24e2c:	cmp	r4, r1
   24e30:	bcc	24e1c <__assert_fail@plt+0x13278>
   24e34:	ldr	r1, [r7, #8]
   24e38:	ldr	r1, [r1, r3, lsl #2]
   24e3c:	cmp	r4, r1
   24e40:	bhi	24e1c <__assert_fail@plt+0x13278>
   24e44:	b	24db4 <__assert_fail@plt+0x13210>
   24e48:	mov	sl, #0
   24e4c:	b	24ba4 <__assert_fail@plt+0x13000>
   24e50:	mov	sl, #0
   24e54:	b	24ba4 <__assert_fail@plt+0x13000>
   24e58:	mov	sl, #0
   24e5c:	b	24ba4 <__assert_fail@plt+0x13000>
   24e60:	mov	sl, #0
   24e64:	b	24ba4 <__assert_fail@plt+0x13000>
   24e68:	ldrb	r3, [r7, #16]
   24e6c:	tst	r3, #1
   24e70:	beq	24e60 <__assert_fail@plt+0x132bc>
   24e74:	cmp	sl, #1
   24e78:	movlt	sl, #1
   24e7c:	b	24ba4 <__assert_fail@plt+0x13000>
   24e80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   24e84:	strd	r6, [sp, #8]
   24e88:	strd	r8, [sp, #16]
   24e8c:	strd	sl, [sp, #24]
   24e90:	str	lr, [sp, #32]
   24e94:	sub	sp, sp, #28
   24e98:	str	r3, [sp, #4]
   24e9c:	add	r3, r1, r1, lsl #1
   24ea0:	ldr	r6, [r0, #28]
   24ea4:	add	r6, r6, r3, lsl #2
   24ea8:	mov	r3, #0
   24eac:	str	r3, [sp, #12]
   24eb0:	str	r3, [sp, #16]
   24eb4:	str	r3, [sp, #20]
   24eb8:	ldr	r3, [r6, #4]
   24ebc:	cmp	r3, #0
   24ec0:	ble	24f3c <__assert_fail@plt+0x13398>
   24ec4:	mov	r7, r0
   24ec8:	mov	r8, r1
   24ecc:	mov	fp, r2
   24ed0:	mov	r5, #0
   24ed4:	b	24fbc <__assert_fail@plt+0x13418>
   24ed8:	ldr	r0, [sp, #20]
   24edc:	bl	17750 <__assert_fail@plt+0x5bac>
   24ee0:	b	24f48 <__assert_fail@plt+0x133a4>
   24ee4:	cmp	r3, #0
   24ee8:	ble	24f3c <__assert_fail@plt+0x13398>
   24eec:	mov	r4, #0
   24ef0:	b	24f1c <__assert_fail@plt+0x13378>
   24ef4:	mov	r1, r5
   24ef8:	mov	r0, fp
   24efc:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   24f00:	sub	r1, r0, #1
   24f04:	mov	r0, fp
   24f08:	bl	1f78c <__assert_fail@plt+0xdbe8>
   24f0c:	add	r4, r4, #1
   24f10:	ldr	r3, [r6, #4]
   24f14:	cmp	r3, r4
   24f18:	ble	24f3c <__assert_fail@plt+0x13398>
   24f1c:	ldr	r3, [r6, #8]
   24f20:	ldr	r5, [r3, r4, lsl #2]
   24f24:	mov	r1, r5
   24f28:	add	r0, sp, #12
   24f2c:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   24f30:	cmp	r0, #0
   24f34:	bne	24f0c <__assert_fail@plt+0x13368>
   24f38:	b	24ef4 <__assert_fail@plt+0x13350>
   24f3c:	ldr	r0, [sp, #20]
   24f40:	bl	17750 <__assert_fail@plt+0x5bac>
   24f44:	mov	r4, #0
   24f48:	mov	r0, r4
   24f4c:	add	sp, sp, #28
   24f50:	ldrd	r4, [sp]
   24f54:	ldrd	r6, [sp, #8]
   24f58:	ldrd	r8, [sp, #16]
   24f5c:	ldrd	sl, [sp, #24]
   24f60:	add	sp, sp, #32
   24f64:	pop	{pc}		; (ldr pc, [sp], #4)
   24f68:	mov	r1, r9
   24f6c:	mov	r0, r6
   24f70:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   24f74:	cmp	r0, #0
   24f78:	bne	24fac <__assert_fail@plt+0x13408>
   24f7c:	mov	r1, r9
   24f80:	mov	r0, fp
   24f84:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   24f88:	cmp	r0, #0
   24f8c:	beq	24fac <__assert_fail@plt+0x13408>
   24f90:	ldr	r2, [r7, #28]
   24f94:	add	r2, r2, r4
   24f98:	ldr	r1, [sp, #4]
   24f9c:	add	r0, sp, #12
   24fa0:	bl	20b0c <__assert_fail@plt+0xef68>
   24fa4:	subs	r4, r0, #0
   24fa8:	bne	24ed8 <__assert_fail@plt+0x13334>
   24fac:	add	r5, r5, #1
   24fb0:	ldr	r3, [r6, #4]
   24fb4:	cmp	r3, r5
   24fb8:	ble	24ee4 <__assert_fail@plt+0x13340>
   24fbc:	ldr	r3, [r6, #8]
   24fc0:	ldr	r4, [r3, r5, lsl #2]
   24fc4:	cmp	r8, r4
   24fc8:	beq	24fac <__assert_fail@plt+0x13408>
   24fcc:	ldr	r3, [r7]
   24fd0:	add	r3, r3, r4, lsl #3
   24fd4:	ldrb	r3, [r3, #4]
   24fd8:	tst	r3, #8
   24fdc:	beq	24fac <__assert_fail@plt+0x13408>
   24fe0:	add	r4, r4, r4, lsl #1
   24fe4:	lsl	r4, r4, #2
   24fe8:	ldr	r3, [r7, #20]
   24fec:	add	r3, r3, r4
   24ff0:	ldr	r2, [r3, #8]
   24ff4:	ldr	r9, [r2]
   24ff8:	ldr	r3, [r3, #4]
   24ffc:	cmp	r3, #1
   25000:	ble	24f68 <__assert_fail@plt+0x133c4>
   25004:	ldr	sl, [r2, #4]
   25008:	mov	r1, r9
   2500c:	mov	r0, r6
   25010:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   25014:	cmp	r0, #0
   25018:	bne	25030 <__assert_fail@plt+0x1348c>
   2501c:	mov	r1, r9
   25020:	mov	r0, fp
   25024:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   25028:	cmp	r0, #0
   2502c:	bne	24f90 <__assert_fail@plt+0x133ec>
   25030:	cmp	sl, #0
   25034:	ble	24fac <__assert_fail@plt+0x13408>
   25038:	mov	r1, sl
   2503c:	mov	r0, r6
   25040:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   25044:	cmp	r0, #0
   25048:	bne	24fac <__assert_fail@plt+0x13408>
   2504c:	mov	r1, sl
   25050:	mov	r0, fp
   25054:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   25058:	cmp	r0, #0
   2505c:	beq	24fac <__assert_fail@plt+0x13408>
   25060:	b	24f90 <__assert_fail@plt+0x133ec>
   25064:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25068:	strd	r6, [sp, #8]
   2506c:	strd	r8, [sp, #16]
   25070:	strd	sl, [sp, #24]
   25074:	str	lr, [sp, #32]
   25078:	sub	sp, sp, #28
   2507c:	mov	r4, r0
   25080:	mov	r6, r1
   25084:	mov	r7, r2
   25088:	ldr	r5, [r0, #24]
   2508c:	cmp	r5, r1
   25090:	suble	r5, r1, r5
   25094:	ble	250f0 <__assert_fail@plt+0x1354c>
   25098:	ldr	r3, [r0, #80]	; 0x50
   2509c:	cmp	r3, #1
   250a0:	bgt	251b4 <__assert_fail@plt+0x13610>
   250a4:	ldr	r3, [r4, #44]	; 0x2c
   250a8:	str	r3, [r4, #48]	; 0x30
   250ac:	ldr	r3, [r4, #52]	; 0x34
   250b0:	str	r3, [r4, #56]	; 0x38
   250b4:	mov	r3, #0
   250b8:	str	r3, [r4, #28]
   250bc:	str	r3, [r4, #24]
   250c0:	str	r3, [r4, #32]
   250c4:	strb	r3, [r4, #76]	; 0x4c
   250c8:	and	r3, r7, #1
   250cc:	cmp	r3, #0
   250d0:	movne	r3, #4
   250d4:	moveq	r3, #6
   250d8:	str	r3, [r4, #60]	; 0x3c
   250dc:	ldrb	r3, [r4, #75]	; 0x4b
   250e0:	cmp	r3, #0
   250e4:	ldreq	r3, [r4]
   250e8:	streq	r3, [r4, #4]
   250ec:	mov	r5, r6
   250f0:	cmp	r5, #0
   250f4:	beq	2516c <__assert_fail@plt+0x135c8>
   250f8:	ldr	r3, [r4, #32]
   250fc:	cmp	r3, r5
   25100:	ble	253e8 <__assert_fail@plt+0x13844>
   25104:	ldrb	r3, [r4, #76]	; 0x4c
   25108:	cmp	r3, #0
   2510c:	bne	251c4 <__assert_fail@plt+0x13620>
   25110:	mov	r2, r7
   25114:	sub	r1, r5, #1
   25118:	mov	r0, r4
   2511c:	bl	23714 <__assert_fail@plt+0x11b70>
   25120:	str	r0, [r4, #60]	; 0x3c
   25124:	ldr	r3, [r4, #80]	; 0x50
   25128:	cmp	r3, #1
   2512c:	bgt	253b4 <__assert_fail@plt+0x13810>
   25130:	ldrb	r3, [r4, #75]	; 0x4b
   25134:	cmp	r3, #0
   25138:	bne	253d0 <__assert_fail@plt+0x1382c>
   2513c:	ldr	r3, [r4, #28]
   25140:	sub	r3, r3, r5
   25144:	str	r3, [r4, #28]
   25148:	ldr	r3, [r4, #32]
   2514c:	sub	r3, r3, r5
   25150:	str	r3, [r4, #32]
   25154:	ldrb	r3, [r4, #75]	; 0x4b
   25158:	cmp	r3, #0
   2515c:	bne	2516c <__assert_fail@plt+0x135c8>
   25160:	ldr	r3, [r4, #4]
   25164:	add	r3, r3, r5
   25168:	str	r3, [r4, #4]
   2516c:	str	r6, [r4, #24]
   25170:	ldr	r3, [r4, #48]	; 0x30
   25174:	sub	r3, r3, r5
   25178:	str	r3, [r4, #48]	; 0x30
   2517c:	ldr	r2, [r4, #56]	; 0x38
   25180:	sub	r5, r2, r5
   25184:	str	r5, [r4, #56]	; 0x38
   25188:	ldr	r2, [r4, #80]	; 0x50
   2518c:	cmp	r2, #1
   25190:	ble	2572c <__assert_fail@plt+0x13b88>
   25194:	ldrb	r3, [r4, #72]	; 0x48
   25198:	cmp	r3, #0
   2519c:	beq	25720 <__assert_fail@plt+0x13b7c>
   251a0:	mov	r0, r4
   251a4:	bl	20f0c <__assert_fail@plt+0xf368>
   251a8:	cmp	r0, #0
   251ac:	beq	2573c <__assert_fail@plt+0x13b98>
   251b0:	b	25744 <__assert_fail@plt+0x13ba0>
   251b4:	mov	r3, #0
   251b8:	str	r3, [r0, #16]
   251bc:	str	r3, [r0, #20]
   251c0:	b	250a4 <__assert_fail@plt+0x13500>
   251c4:	ldr	sl, [r4, #28]
   251c8:	ldr	r9, [r4, #12]
   251cc:	mov	r2, sl
   251d0:	mov	r1, #0
   251d4:	b	251e4 <__assert_fail@plt+0x13640>
   251d8:	mov	r2, r8
   251dc:	cmp	r1, r2
   251e0:	bge	25208 <__assert_fail@plt+0x13664>
   251e4:	add	r3, r1, r2
   251e8:	add	r3, r3, r3, lsr #31
   251ec:	asr	r8, r3, #1
   251f0:	ldr	r3, [r9, r8, lsl #2]
   251f4:	cmp	r3, r5
   251f8:	bgt	251d8 <__assert_fail@plt+0x13634>
   251fc:	bge	25210 <__assert_fail@plt+0x1366c>
   25200:	add	r1, r8, #1
   25204:	b	251dc <__assert_fail@plt+0x13638>
   25208:	cmp	r3, r5
   2520c:	addlt	r8, r8, #1
   25210:	mov	r2, r7
   25214:	sub	r1, r8, #1
   25218:	mov	r0, r4
   2521c:	bl	23714 <__assert_fail@plt+0x11b70>
   25220:	str	r0, [r4, #60]	; 0x3c
   25224:	cmp	r5, sl
   25228:	movge	r3, #0
   2522c:	movlt	r3, #1
   25230:	cmp	r5, r8
   25234:	movne	r3, #0
   25238:	cmp	r3, #0
   2523c:	bne	25314 <__assert_fail@plt+0x13770>
   25240:	ldr	r3, [r4, #44]	; 0x2c
   25244:	sub	r3, r3, r6
   25248:	add	r3, r3, r5
   2524c:	str	r3, [r4, #48]	; 0x30
   25250:	ldr	r3, [r4, #52]	; 0x34
   25254:	sub	r3, r3, r6
   25258:	add	r3, r3, r5
   2525c:	str	r3, [r4, #56]	; 0x38
   25260:	mov	r3, #0
   25264:	strb	r3, [r4, #76]	; 0x4c
   25268:	cmp	r8, r3
   2526c:	ble	25298 <__assert_fail@plt+0x136f4>
   25270:	sub	r2, r8, #-1073741823	; 0xc0000001
   25274:	add	r3, r9, r2, lsl #2
   25278:	ldr	r2, [r9, r2, lsl #2]
   2527c:	cmp	r5, r2
   25280:	bne	25298 <__assert_fail@plt+0x136f4>
   25284:	subs	r8, r8, #1
   25288:	beq	25298 <__assert_fail@plt+0x136f4>
   2528c:	ldr	r2, [r3, #-4]!
   25290:	cmp	r2, r5
   25294:	beq	25284 <__assert_fail@plt+0x136e0>
   25298:	cmp	r8, sl
   2529c:	bge	25398 <__assert_fail@plt+0x137f4>
   252a0:	ldr	r2, [r4, #8]
   252a4:	add	r3, r2, r8, lsl #2
   252a8:	ldr	r2, [r2, r8, lsl #2]
   252ac:	cmn	r2, #1
   252b0:	bne	252cc <__assert_fail@plt+0x13728>
   252b4:	add	r8, r8, #1
   252b8:	cmp	sl, r8
   252bc:	beq	253a0 <__assert_fail@plt+0x137fc>
   252c0:	ldr	r2, [r3, #4]!
   252c4:	cmn	r2, #1
   252c8:	beq	252b4 <__assert_fail@plt+0x13710>
   252cc:	ldr	r2, [r9, r8, lsl #2]
   252d0:	sub	r2, r2, r5
   252d4:	str	r2, [r4, #28]
   252d8:	cmp	r2, #0
   252dc:	beq	253a8 <__assert_fail@plt+0x13804>
   252e0:	ble	25304 <__assert_fail@plt+0x13760>
   252e4:	mov	r3, #0
   252e8:	mvn	r1, #0
   252ec:	ldr	r2, [r4, #8]
   252f0:	str	r1, [r2, r3, lsl #2]
   252f4:	add	r3, r3, #1
   252f8:	ldr	r2, [r4, #28]
   252fc:	cmp	r2, r3
   25300:	bgt	252ec <__assert_fail@plt+0x13748>
   25304:	mov	r1, #255	; 0xff
   25308:	ldr	r0, [r4, #4]
   2530c:	bl	119e8 <memset@plt>
   25310:	b	253a8 <__assert_fail@plt+0x13804>
   25314:	ldr	r3, [r9, r8, lsl #2]
   25318:	cmp	r3, r5
   2531c:	bne	25240 <__assert_fail@plt+0x1369c>
   25320:	ldr	r0, [r4, #8]
   25324:	lsl	r7, r5, #2
   25328:	sub	r2, sl, r5
   2532c:	lsl	r2, r2, #2
   25330:	add	r1, r0, r7
   25334:	bl	11748 <memmove@plt>
   25338:	ldr	r0, [r4, #4]
   2533c:	ldr	r2, [r4, #28]
   25340:	sub	r2, r2, r5
   25344:	add	r1, r0, r5
   25348:	bl	11748 <memmove@plt>
   2534c:	ldr	r3, [r4, #28]
   25350:	sub	r3, r3, r5
   25354:	str	r3, [r4, #28]
   25358:	ldr	r2, [r4, #32]
   2535c:	sub	r2, r2, r5
   25360:	str	r2, [r4, #32]
   25364:	cmp	r3, #0
   25368:	ble	25154 <__assert_fail@plt+0x135b0>
   2536c:	mov	r3, #0
   25370:	ldr	r1, [r4, #12]
   25374:	ldr	r2, [r1, r7]
   25378:	sub	r2, r2, r5
   2537c:	str	r2, [r1, r3, lsl #2]
   25380:	add	r3, r3, #1
   25384:	add	r7, r7, #4
   25388:	ldr	r2, [r4, #28]
   2538c:	cmp	r2, r3
   25390:	bgt	25370 <__assert_fail@plt+0x137cc>
   25394:	b	25154 <__assert_fail@plt+0x135b0>
   25398:	cmp	r8, sl
   2539c:	bne	252cc <__assert_fail@plt+0x13728>
   253a0:	mov	r3, #0
   253a4:	str	r3, [r4, #28]
   253a8:	ldr	r3, [r4, #28]
   253ac:	str	r3, [r4, #32]
   253b0:	b	25154 <__assert_fail@plt+0x135b0>
   253b4:	ldr	r0, [r4, #8]
   253b8:	ldr	r2, [r4, #28]
   253bc:	sub	r2, r2, r5
   253c0:	lsl	r2, r2, #2
   253c4:	add	r1, r0, r5, lsl #2
   253c8:	bl	11748 <memmove@plt>
   253cc:	b	25130 <__assert_fail@plt+0x1358c>
   253d0:	ldr	r0, [r4, #4]
   253d4:	ldr	r2, [r4, #28]
   253d8:	sub	r2, r2, r5
   253dc:	add	r1, r0, r5
   253e0:	bl	11748 <memmove@plt>
   253e4:	b	2513c <__assert_fail@plt+0x13598>
   253e8:	ldr	fp, [r4, #28]
   253ec:	ldrb	r3, [r4, #76]	; 0x4c
   253f0:	cmp	r3, #0
   253f4:	bne	25554 <__assert_fail@plt+0x139b0>
   253f8:	mov	r3, #0
   253fc:	str	r3, [r4, #28]
   25400:	ldr	r3, [r4, #80]	; 0x50
   25404:	cmp	r3, #1
   25408:	ble	256bc <__assert_fail@plt+0x13b18>
   2540c:	ldrb	r2, [r4, #73]	; 0x49
   25410:	cmp	r2, #0
   25414:	beq	254cc <__assert_fail@plt+0x13928>
   25418:	ldr	r1, [r4]
   2541c:	ldr	r9, [r4, #24]
   25420:	add	r9, r1, r9
   25424:	sub	r3, r5, r3
   25428:	add	r3, r9, r3
   2542c:	cmp	r1, r3
   25430:	movcc	r1, r3
   25434:	mov	sl, r5
   25438:	sub	r3, r5, #1
   2543c:	add	r8, r9, r3
   25440:	cmp	r1, r8
   25444:	bhi	254cc <__assert_fail@plt+0x13928>
   25448:	ldrb	r3, [r9, r3]
   2544c:	and	r3, r3, #192	; 0xc0
   25450:	cmp	r3, #128	; 0x80
   25454:	subeq	r3, r8, #1
   25458:	subeq	r1, r1, #1
   2545c:	bne	25480 <__assert_fail@plt+0x138dc>
   25460:	mov	r8, r3
   25464:	cmp	r3, r1
   25468:	beq	254cc <__assert_fail@plt+0x13928>
   2546c:	sub	r3, r3, #1
   25470:	ldrb	r2, [r8]
   25474:	and	r2, r2, #192	; 0xc0
   25478:	cmp	r2, #128	; 0x80
   2547c:	beq	25460 <__assert_fail@plt+0x138bc>
   25480:	ldr	r2, [r4, #48]	; 0x30
   25484:	add	r2, r9, r2
   25488:	sub	r2, r2, r8
   2548c:	ldr	r3, [r4, #64]	; 0x40
   25490:	cmp	r3, #0
   25494:	moveq	ip, r8
   25498:	bne	25580 <__assert_fail@plt+0x139dc>
   2549c:	mov	r0, #0
   254a0:	mov	r1, #0
   254a4:	strd	r0, [sp, #16]
   254a8:	add	r3, sp, #16
   254ac:	mov	r1, ip
   254b0:	add	r0, sp, #4
   254b4:	bl	1be94 <__assert_fail@plt+0xa2f0>
   254b8:	add	r9, r9, sl
   254bc:	sub	r8, r9, r8
   254c0:	cmp	r8, r0
   254c4:	cmnls	r0, #3
   254c8:	bls	255c8 <__assert_fail@plt+0x13a24>
   254cc:	ldr	r0, [r4, #24]
   254d0:	ldr	r3, [r4, #32]
   254d4:	add	r0, r0, r3
   254d8:	cmp	r6, r0
   254dc:	ble	25790 <__assert_fail@plt+0x13bec>
   254e0:	add	r9, r4, #16
   254e4:	ldr	r8, [r4, #44]	; 0x2c
   254e8:	sub	r8, r8, r0
   254ec:	ldrd	r2, [r9]
   254f0:	strd	r2, [sp, #16]
   254f4:	mov	sl, r0
   254f8:	ldr	r1, [r4]
   254fc:	mov	r3, r9
   25500:	mov	r2, r8
   25504:	add	r1, r1, r0
   25508:	add	r0, sp, #8
   2550c:	bl	1be94 <__assert_fail@plt+0xa2f0>
   25510:	sub	r3, r0, #1
   25514:	cmn	r3, #4
   25518:	ldrls	r8, [sp, #8]
   2551c:	bhi	2561c <__assert_fail@plt+0x13a78>
   25520:	add	r0, sl, r0
   25524:	cmp	r6, r0
   25528:	bgt	254e4 <__assert_fail@plt+0x13940>
   2552c:	sub	r0, r0, r6
   25530:	str	r0, [r4, #28]
   25534:	cmn	r8, #1
   25538:	bne	255e8 <__assert_fail@plt+0x13a44>
   2553c:	mov	r2, r7
   25540:	sub	r1, fp, #1
   25544:	mov	r0, r4
   25548:	bl	23714 <__assert_fail@plt+0x11b70>
   2554c:	str	r0, [r4, #60]	; 0x3c
   25550:	b	25604 <__assert_fail@plt+0x13a60>
   25554:	ldr	r3, [r4, #44]	; 0x2c
   25558:	sub	r3, r3, r6
   2555c:	add	r3, r3, r5
   25560:	str	r3, [r4, #48]	; 0x30
   25564:	ldr	r3, [r4, #52]	; 0x34
   25568:	sub	r3, r3, r6
   2556c:	add	r3, r3, r5
   25570:	str	r3, [r4, #56]	; 0x38
   25574:	mov	r3, #0
   25578:	strb	r3, [r4, #76]	; 0x4c
   2557c:	b	253f8 <__assert_fail@plt+0x13854>
   25580:	cmp	r2, #6
   25584:	movlt	r0, r2
   25588:	movge	r0, #6
   2558c:	cmp	r2, #0
   25590:	addle	ip, sp, #8
   25594:	ble	2549c <__assert_fail@plt+0x138f8>
   25598:	add	r1, r8, r0
   2559c:	add	ip, sp, #24
   255a0:	add	r0, ip, r0
   255a4:	sub	r0, r0, #17
   255a8:	mov	lr, r8
   255ac:	ldrb	ip, [r1, #-1]!
   255b0:	ldrb	ip, [r3, ip]
   255b4:	strb	ip, [r0], #-1
   255b8:	cmp	r1, lr
   255bc:	bne	255ac <__assert_fail@plt+0x13a08>
   255c0:	add	ip, sp, #8
   255c4:	b	2549c <__assert_fail@plt+0x138f8>
   255c8:	mov	r3, #0
   255cc:	str	r3, [r4, #16]
   255d0:	str	r3, [r4, #20]
   255d4:	sub	r0, r0, r8
   255d8:	str	r0, [r4, #28]
   255dc:	ldr	r8, [sp, #4]
   255e0:	cmn	r8, #1
   255e4:	beq	254cc <__assert_fail@plt+0x13928>
   255e8:	ldrb	r3, [r4, #78]	; 0x4e
   255ec:	cmp	r3, #0
   255f0:	bne	25640 <__assert_fail@plt+0x13a9c>
   255f4:	cmp	r8, #10
   255f8:	movne	r3, #0
   255fc:	beq	25668 <__assert_fail@plt+0x13ac4>
   25600:	str	r3, [r4, #60]	; 0x3c
   25604:	ldr	r2, [r4, #28]
   25608:	cmp	r2, #0
   2560c:	bne	2567c <__assert_fail@plt+0x13ad8>
   25610:	ldr	r3, [r4, #28]
   25614:	str	r3, [r4, #32]
   25618:	b	25154 <__assert_fail@plt+0x135b0>
   2561c:	cmp	r8, #0
   25620:	cmpne	r0, #0
   25624:	ldrne	r3, [r4]
   25628:	ldrbne	r8, [r3, sl]
   2562c:	moveq	r8, #0
   25630:	ldrd	r2, [sp, #16]
   25634:	strd	r2, [r9]
   25638:	mov	r0, #1
   2563c:	b	25520 <__assert_fail@plt+0x1397c>
   25640:	mov	r0, r8
   25644:	bl	119c4 <iswalnum@plt>
   25648:	subs	r3, r8, #95	; 0x5f
   2564c:	movne	r3, #1
   25650:	cmp	r0, #0
   25654:	movne	r3, #0
   25658:	cmp	r3, #0
   2565c:	moveq	r3, #1
   25660:	beq	25600 <__assert_fail@plt+0x13a5c>
   25664:	b	255f4 <__assert_fail@plt+0x13a50>
   25668:	ldrb	r3, [r4, #77]	; 0x4d
   2566c:	cmp	r3, #0
   25670:	moveq	r3, #0
   25674:	movne	r3, #2
   25678:	b	25600 <__assert_fail@plt+0x13a5c>
   2567c:	ble	256a0 <__assert_fail@plt+0x13afc>
   25680:	mov	r3, #0
   25684:	mvn	r1, #0
   25688:	ldr	r2, [r4, #8]
   2568c:	str	r1, [r2, r3, lsl #2]
   25690:	add	r3, r3, #1
   25694:	ldr	r2, [r4, #28]
   25698:	cmp	r2, r3
   2569c:	bgt	25688 <__assert_fail@plt+0x13ae4>
   256a0:	ldrb	r3, [r4, #75]	; 0x4b
   256a4:	cmp	r3, #0
   256a8:	beq	25610 <__assert_fail@plt+0x13a6c>
   256ac:	mov	r1, #255	; 0xff
   256b0:	ldr	r0, [r4, #4]
   256b4:	bl	119e8 <memset@plt>
   256b8:	b	25610 <__assert_fail@plt+0x13a6c>
   256bc:	ldr	r3, [r4]
   256c0:	ldr	r2, [r4, #24]
   256c4:	add	r3, r3, r5
   256c8:	add	r3, r3, r2
   256cc:	ldrb	r1, [r3, #-1]
   256d0:	mov	r3, #0
   256d4:	str	r3, [r4, #32]
   256d8:	ldr	r3, [r4, #64]	; 0x40
   256dc:	cmp	r3, #0
   256e0:	ldrbne	r1, [r3, r1]
   256e4:	lsr	r2, r1, #5
   256e8:	ldr	r0, [r4, #68]	; 0x44
   256ec:	and	r3, r1, #31
   256f0:	ldr	r2, [r0, r2, lsl #2]
   256f4:	lsr	r3, r2, r3
   256f8:	ands	r3, r3, #1
   256fc:	bne	25708 <__assert_fail@plt+0x13b64>
   25700:	cmp	r1, #10
   25704:	beq	25710 <__assert_fail@plt+0x13b6c>
   25708:	str	r3, [r4, #60]	; 0x3c
   2570c:	b	25154 <__assert_fail@plt+0x135b0>
   25710:	ldrb	r2, [r4, #77]	; 0x4d
   25714:	cmp	r2, #0
   25718:	movne	r3, #2
   2571c:	b	25708 <__assert_fail@plt+0x13b64>
   25720:	mov	r0, r4
   25724:	bl	20974 <__assert_fail@plt+0xedd0>
   25728:	b	2573c <__assert_fail@plt+0x13b98>
   2572c:	ldrb	r2, [r4, #75]	; 0x4b
   25730:	cmp	r2, #0
   25734:	streq	r3, [r4, #28]
   25738:	bne	25760 <__assert_fail@plt+0x13bbc>
   2573c:	mov	r0, #0
   25740:	str	r0, [r4, #40]	; 0x28
   25744:	add	sp, sp, #28
   25748:	ldrd	r4, [sp]
   2574c:	ldrd	r6, [sp, #8]
   25750:	ldrd	r8, [sp, #16]
   25754:	ldrd	sl, [sp, #24]
   25758:	add	sp, sp, #32
   2575c:	pop	{pc}		; (ldr pc, [sp], #4)
   25760:	ldrb	r3, [r4, #72]	; 0x48
   25764:	cmp	r3, #0
   25768:	bne	25784 <__assert_fail@plt+0x13be0>
   2576c:	ldr	r3, [r4, #64]	; 0x40
   25770:	cmp	r3, #0
   25774:	beq	2573c <__assert_fail@plt+0x13b98>
   25778:	mov	r0, r4
   2577c:	bl	1f630 <__assert_fail@plt+0xda8c>
   25780:	b	2573c <__assert_fail@plt+0x13b98>
   25784:	mov	r0, r4
   25788:	bl	21490 <__assert_fail@plt+0xf8ec>
   2578c:	b	2573c <__assert_fail@plt+0x13b98>
   25790:	sub	r0, r0, r6
   25794:	str	r0, [r4, #28]
   25798:	b	2553c <__assert_fail@plt+0x13998>
   2579c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   257a0:	strd	r6, [sp, #8]
   257a4:	strd	r8, [sp, #16]
   257a8:	strd	sl, [sp, #24]
   257ac:	str	lr, [sp, #32]
   257b0:	sub	sp, sp, #14464	; 0x3880
   257b4:	sub	sp, sp, #44	; 0x2c
   257b8:	str	r1, [sp, #16]
   257bc:	mov	r3, #0
   257c0:	str	r3, [r1, #44]	; 0x2c
   257c4:	str	r3, [r1, #48]	; 0x30
   257c8:	mov	r2, #0
   257cc:	mov	r3, #0
   257d0:	strd	r2, [sp, #24]
   257d4:	strd	r2, [sp, #32]
   257d8:	strd	r2, [sp, #40]	; 0x28
   257dc:	strd	r2, [sp, #48]	; 0x30
   257e0:	ldr	r3, [r1, #8]
   257e4:	cmp	r3, #0
   257e8:	ble	25e38 <__assert_fail@plt+0x14294>
   257ec:	mov	r9, r1
   257f0:	mov	sl, #0
   257f4:	str	sl, [sp, #4]
   257f8:	str	r0, [sp, #8]
   257fc:	b	25c74 <__assert_fail@plt+0x140d0>
   25800:	ldrb	r3, [r3, r1, lsl #3]
   25804:	asr	r0, r3, #5
   25808:	and	r3, r3, #31
   2580c:	add	r1, sp, #24
   25810:	ldr	r1, [r1, r0, lsl #2]
   25814:	mov	ip, #1
   25818:	orr	r3, r1, ip, lsl r3
   2581c:	add	r1, sp, #24
   25820:	str	r3, [r1, r0, lsl #2]
   25824:	cmp	r2, #0
   25828:	beq	25908 <__assert_fail@plt+0x13d64>
   2582c:	tst	r2, #32
   25830:	bne	259d4 <__assert_fail@plt+0x13e30>
   25834:	tst	r2, #128	; 0x80
   25838:	bne	25a04 <__assert_fail@plt+0x13e60>
   2583c:	tst	r2, #4
   25840:	beq	258a4 <__assert_fail@plt+0x13d00>
   25844:	cmp	r7, #1
   25848:	beq	25a20 <__assert_fail@plt+0x13e7c>
   2584c:	ldr	r1, [sp, #8]
   25850:	ldr	r3, [r1, #92]	; 0x5c
   25854:	cmp	r3, #1
   25858:	ble	25a48 <__assert_fail@plt+0x13ea4>
   2585c:	add	ip, sp, #20
   25860:	add	r0, r1, #96	; 0x60
   25864:	ldr	lr, [r1, #60]	; 0x3c
   25868:	sub	lr, lr, #4
   2586c:	add	r4, r1, #128	; 0x80
   25870:	mov	r1, #0
   25874:	ldr	r5, [r0], #4
   25878:	ldr	r3, [lr, #4]!
   2587c:	mvn	r3, r3
   25880:	orr	r3, r3, r5
   25884:	ldr	r5, [ip, #4]!
   25888:	and	r3, r3, r5
   2588c:	str	r3, [ip]
   25890:	orr	r1, r1, r3
   25894:	cmp	r0, r4
   25898:	bne	25874 <__assert_fail@plt+0x13cd0>
   2589c:	cmp	r1, #0
   258a0:	beq	25c58 <__assert_fail@plt+0x140b4>
   258a4:	tst	r2, #8
   258a8:	beq	25908 <__assert_fail@plt+0x13d64>
   258ac:	cmp	r7, #1
   258b0:	beq	25a7c <__assert_fail@plt+0x13ed8>
   258b4:	ldr	r2, [sp, #8]
   258b8:	ldr	r3, [r2, #92]	; 0x5c
   258bc:	cmp	r3, #1
   258c0:	ble	25aa4 <__assert_fail@plt+0x13f00>
   258c4:	add	r0, sp, #20
   258c8:	add	r1, r2, #96	; 0x60
   258cc:	ldr	ip, [r2, #60]	; 0x3c
   258d0:	sub	ip, ip, #4
   258d4:	add	lr, r2, #128	; 0x80
   258d8:	mov	r2, #0
   258dc:	ldr	r3, [r1], #4
   258e0:	ldr	r4, [ip, #4]!
   258e4:	and	r4, r4, r3
   258e8:	ldr	r3, [r0, #4]!
   258ec:	bic	r3, r3, r4
   258f0:	str	r3, [r0]
   258f4:	orr	r2, r2, r3
   258f8:	cmp	r1, lr
   258fc:	bne	258dc <__assert_fail@plt+0x13d38>
   25900:	cmp	r2, #0
   25904:	beq	25c58 <__assert_fail@plt+0x140b4>
   25908:	cmp	sl, #0
   2590c:	addgt	r4, sp, #148	; 0x94
   25910:	movgt	r5, #0
   25914:	bgt	25b24 <__assert_fail@plt+0x13f80>
   25918:	mov	r5, #0
   2591c:	b	25c50 <__assert_fail@plt+0x140ac>
   25920:	ldr	lr, [r3, r1, lsl #3]
   25924:	add	r0, sp, #20
   25928:	sub	r1, lr, #4
   2592c:	add	lr, lr, #28
   25930:	ldr	r3, [r0, #4]!
   25934:	ldr	ip, [r1, #4]!
   25938:	orr	r3, r3, ip
   2593c:	str	r3, [r0]
   25940:	cmp	r1, lr
   25944:	bne	25930 <__assert_fail@plt+0x13d8c>
   25948:	b	25824 <__assert_fail@plt+0x13c80>
   2594c:	ldr	r1, [sp, #8]
   25950:	ldr	r3, [r1, #92]	; 0x5c
   25954:	cmp	r3, #1
   25958:	ble	25988 <__assert_fail@plt+0x13de4>
   2595c:	ldr	lr, [r1, #60]	; 0x3c
   25960:	add	r0, sp, #20
   25964:	sub	r1, lr, #4
   25968:	add	lr, lr, #28
   2596c:	ldr	r3, [r0, #4]!
   25970:	ldr	ip, [r1, #4]!
   25974:	orr	r3, r3, ip
   25978:	str	r3, [r0]
   2597c:	cmp	r1, lr
   25980:	bne	2596c <__assert_fail@plt+0x13dc8>
   25984:	b	259a0 <__assert_fail@plt+0x13dfc>
   25988:	mvn	r0, #0
   2598c:	mvn	r1, #0
   25990:	strd	r0, [sp, #24]
   25994:	strd	r0, [sp, #32]
   25998:	strd	r0, [sp, #40]	; 0x28
   2599c:	strd	r0, [sp, #48]	; 0x30
   259a0:	ldr	r3, [sp, #8]
   259a4:	ldr	r3, [r3, #128]	; 0x80
   259a8:	tst	r3, #64	; 0x40
   259ac:	bne	259bc <__assert_fail@plt+0x13e18>
   259b0:	ldr	r1, [sp, #24]
   259b4:	bic	r1, r1, #1024	; 0x400
   259b8:	str	r1, [sp, #24]
   259bc:	tst	r3, #128	; 0x80
   259c0:	beq	25824 <__assert_fail@plt+0x13c80>
   259c4:	ldr	r3, [sp, #24]
   259c8:	bic	r3, r3, #1
   259cc:	str	r3, [sp, #24]
   259d0:	b	25824 <__assert_fail@plt+0x13c80>
   259d4:	ldr	r3, [sp, #24]
   259d8:	mov	r0, #0
   259dc:	mov	r1, #0
   259e0:	strd	r0, [sp, #24]
   259e4:	strd	r0, [sp, #32]
   259e8:	strd	r0, [sp, #40]	; 0x28
   259ec:	strd	r0, [sp, #48]	; 0x30
   259f0:	tst	r3, #1024	; 0x400
   259f4:	beq	25c58 <__assert_fail@plt+0x140b4>
   259f8:	mov	r3, #1024	; 0x400
   259fc:	str	r3, [sp, #24]
   25a00:	b	25834 <__assert_fail@plt+0x13c90>
   25a04:	mov	r2, #0
   25a08:	mov	r3, #0
   25a0c:	strd	r2, [sp, #24]
   25a10:	strd	r2, [sp, #32]
   25a14:	strd	r2, [sp, #40]	; 0x28
   25a18:	strd	r2, [sp, #48]	; 0x30
   25a1c:	b	25c58 <__assert_fail@plt+0x140b4>
   25a20:	ldrb	r3, [r8, #6]
   25a24:	tst	r3, #64	; 0x40
   25a28:	bne	2584c <__assert_fail@plt+0x13ca8>
   25a2c:	mov	r2, #0
   25a30:	mov	r3, #0
   25a34:	strd	r2, [sp, #24]
   25a38:	strd	r2, [sp, #32]
   25a3c:	strd	r2, [sp, #40]	; 0x28
   25a40:	strd	r2, [sp, #48]	; 0x30
   25a44:	b	25c58 <__assert_fail@plt+0x140b4>
   25a48:	add	ip, sp, #20
   25a4c:	ldr	r3, [sp, #8]
   25a50:	add	r0, r3, #96	; 0x60
   25a54:	add	lr, r3, #128	; 0x80
   25a58:	mov	r1, #0
   25a5c:	ldr	r3, [r0], #4
   25a60:	ldr	r4, [ip, #4]!
   25a64:	and	r3, r3, r4
   25a68:	str	r3, [ip]
   25a6c:	orr	r1, r1, r3
   25a70:	cmp	r0, lr
   25a74:	bne	25a5c <__assert_fail@plt+0x13eb8>
   25a78:	b	2589c <__assert_fail@plt+0x13cf8>
   25a7c:	ldrb	r3, [r8, #6]
   25a80:	tst	r3, #64	; 0x40
   25a84:	beq	258b4 <__assert_fail@plt+0x13d10>
   25a88:	mov	r2, #0
   25a8c:	mov	r3, #0
   25a90:	strd	r2, [sp, #24]
   25a94:	strd	r2, [sp, #32]
   25a98:	strd	r2, [sp, #40]	; 0x28
   25a9c:	strd	r2, [sp, #48]	; 0x30
   25aa0:	b	25c58 <__assert_fail@plt+0x140b4>
   25aa4:	add	r0, sp, #20
   25aa8:	ldr	r3, [sp, #8]
   25aac:	add	r1, r3, #96	; 0x60
   25ab0:	add	lr, r3, #128	; 0x80
   25ab4:	mov	r2, #0
   25ab8:	ldr	ip, [r1], #4
   25abc:	ldr	r3, [r0, #4]!
   25ac0:	bic	r3, r3, ip
   25ac4:	str	r3, [r0]
   25ac8:	orr	r2, r2, r3
   25acc:	cmp	r1, lr
   25ad0:	bne	25ab8 <__assert_fail@plt+0x13f14>
   25ad4:	b	25900 <__assert_fail@plt+0x13d5c>
   25ad8:	add	r2, sp, #20
   25adc:	sub	r1, r4, #32
   25ae0:	add	r6, sp, #52	; 0x34
   25ae4:	mov	ip, r1
   25ae8:	mov	lr, r2
   25aec:	mov	r0, #0
   25af0:	ldr	r3, [lr, #4]!
   25af4:	ldr	fp, [ip, #4]!
   25af8:	and	r3, r3, fp
   25afc:	str	r3, [r6, #4]!
   25b00:	orr	r0, r0, r3
   25b04:	cmp	ip, r4
   25b08:	bne	25af0 <__assert_fail@plt+0x13f4c>
   25b0c:	cmp	r0, #0
   25b10:	bne	25b64 <__assert_fail@plt+0x13fc0>
   25b14:	add	r5, r5, #1
   25b18:	add	r4, r4, #32
   25b1c:	cmp	r5, sl
   25b20:	bge	25c50 <__assert_fail@plt+0x140ac>
   25b24:	cmp	r7, #1
   25b28:	bne	25ad8 <__assert_fail@plt+0x13f34>
   25b2c:	ldrb	r2, [r8]
   25b30:	asr	r1, r2, #5
   25b34:	lsl	r3, r5, #5
   25b38:	add	r3, r3, r1, lsl #2
   25b3c:	add	r1, sp, #14464	; 0x3880
   25b40:	add	r1, r1, #40	; 0x28
   25b44:	add	r3, r1, r3
   25b48:	sub	r3, r3, #14336	; 0x3800
   25b4c:	and	r2, r2, #31
   25b50:	ldr	r3, [r3, #-48]	; 0xffffffd0
   25b54:	lsr	r2, r3, r2
   25b58:	tst	r2, #1
   25b5c:	beq	25b14 <__assert_fail@plt+0x13f70>
   25b60:	b	25ad8 <__assert_fail@plt+0x13f34>
   25b64:	add	fp, sp, #84	; 0x54
   25b68:	mov	r6, #0
   25b6c:	mov	lr, r6
   25b70:	ldr	r3, [r2, #4]!
   25b74:	ldr	r0, [r1, #4]!
   25b78:	bic	ip, r0, r3
   25b7c:	str	ip, [fp, #4]!
   25b80:	orr	lr, lr, ip
   25b84:	bic	r3, r3, r0
   25b88:	str	r3, [r2]
   25b8c:	orr	r6, r6, r3
   25b90:	cmp	r1, r4
   25b94:	bne	25b70 <__assert_fail@plt+0x13fcc>
   25b98:	cmp	lr, #0
   25b9c:	beq	25c20 <__assert_fail@plt+0x1407c>
   25ba0:	add	r3, sp, #14464	; 0x3880
   25ba4:	add	r3, r3, #40	; 0x28
   25ba8:	add	ip, r3, sl, lsl #5
   25bac:	sub	ip, ip, #14336	; 0x3800
   25bb0:	add	r1, sp, #88	; 0x58
   25bb4:	ldrd	r2, [r1]
   25bb8:	strd	r2, [ip, #-48]	; 0xffffffd0
   25bbc:	ldrd	r2, [r1, #8]
   25bc0:	strd	r2, [ip, #-40]	; 0xffffffd8
   25bc4:	ldrd	r2, [r1, #16]
   25bc8:	strd	r2, [ip, #-32]	; 0xffffffe0
   25bcc:	ldrd	r2, [r1, #24]
   25bd0:	strd	r2, [ip, #-24]	; 0xffffffe8
   25bd4:	add	r1, sp, #56	; 0x38
   25bd8:	ldrd	r2, [r1]
   25bdc:	strd	r2, [r4, #-28]	; 0xffffffe4
   25be0:	ldrd	r2, [r1, #8]
   25be4:	strd	r2, [r4, #-20]	; 0xffffffec
   25be8:	ldrd	r2, [r1, #16]
   25bec:	strd	r2, [r4, #-12]
   25bf0:	ldrd	r2, [r1, #24]
   25bf4:	strd	r2, [r4, #-4]
   25bf8:	add	r1, r5, r5, lsl #1
   25bfc:	add	r0, sl, sl, lsl #1
   25c00:	add	r3, sp, #8256	; 0x2040
   25c04:	add	r3, r3, #56	; 0x38
   25c08:	add	r1, r3, r1, lsl #2
   25c0c:	add	r0, r3, r0, lsl #2
   25c10:	bl	20ce0 <__assert_fail@plt+0xf13c>
   25c14:	cmp	r0, #0
   25c18:	bne	25d7c <__assert_fail@plt+0x141d8>
   25c1c:	add	sl, sl, #1
   25c20:	ldr	r3, [r9, #12]
   25c24:	add	r0, r5, r5, lsl #1
   25c28:	ldr	r2, [sp, #12]
   25c2c:	ldr	r1, [r3, r2]
   25c30:	add	r3, sp, #8256	; 0x2040
   25c34:	add	r3, r3, #56	; 0x38
   25c38:	add	r0, r3, r0, lsl #2
   25c3c:	bl	22d7c <__assert_fail@plt+0x111d8>
   25c40:	cmp	r0, #0
   25c44:	beq	25d7c <__assert_fail@plt+0x141d8>
   25c48:	cmp	r6, #0
   25c4c:	bne	25b14 <__assert_fail@plt+0x13f70>
   25c50:	cmp	sl, r5
   25c54:	beq	25d04 <__assert_fail@plt+0x14160>
   25c58:	ldr	r3, [sp, #4]
   25c5c:	add	r3, r3, #1
   25c60:	mov	r2, r3
   25c64:	str	r3, [sp, #4]
   25c68:	ldr	r3, [r9, #8]
   25c6c:	cmp	r2, r3
   25c70:	bge	25db0 <__assert_fail@plt+0x1420c>
   25c74:	ldr	r2, [sp, #4]
   25c78:	lsl	r3, r2, #2
   25c7c:	str	r3, [sp, #12]
   25c80:	ldr	r3, [r9, #12]
   25c84:	ldr	r1, [r3, r2, lsl #2]
   25c88:	ldr	r3, [sp, #8]
   25c8c:	ldr	r3, [r3]
   25c90:	add	r8, r3, r1, lsl #3
   25c94:	ldrb	r7, [r8, #4]
   25c98:	ldr	r2, [r8, #4]
   25c9c:	ubfx	r2, r2, #8, #10
   25ca0:	cmp	r7, #1
   25ca4:	beq	25800 <__assert_fail@plt+0x13c5c>
   25ca8:	cmp	r7, #3
   25cac:	beq	25920 <__assert_fail@plt+0x13d7c>
   25cb0:	cmp	r7, #5
   25cb4:	beq	2594c <__assert_fail@plt+0x13da8>
   25cb8:	cmp	r7, #7
   25cbc:	bne	25c58 <__assert_fail@plt+0x140b4>
   25cc0:	mvn	r0, #0
   25cc4:	mvn	r1, #0
   25cc8:	strd	r0, [sp, #24]
   25ccc:	strd	r0, [sp, #32]
   25cd0:	ldr	r3, [sp, #8]
   25cd4:	ldr	r3, [r3, #128]	; 0x80
   25cd8:	tst	r3, #64	; 0x40
   25cdc:	bne	25cec <__assert_fail@plt+0x14148>
   25ce0:	ldr	r1, [sp, #24]
   25ce4:	bic	r1, r1, #1024	; 0x400
   25ce8:	str	r1, [sp, #24]
   25cec:	tst	r3, #128	; 0x80
   25cf0:	beq	25824 <__assert_fail@plt+0x13c80>
   25cf4:	ldr	r3, [sp, #24]
   25cf8:	bic	r3, r3, #1
   25cfc:	str	r3, [sp, #24]
   25d00:	b	25824 <__assert_fail@plt+0x13c80>
   25d04:	add	r3, sp, #14464	; 0x3880
   25d08:	add	r3, r3, #40	; 0x28
   25d0c:	add	r1, r3, sl, lsl #5
   25d10:	sub	r1, r1, #14336	; 0x3800
   25d14:	ldrd	r2, [sp, #24]
   25d18:	strd	r2, [r1, #-48]	; 0xffffffd0
   25d1c:	ldrd	r2, [sp, #32]
   25d20:	strd	r2, [r1, #-40]	; 0xffffffd8
   25d24:	ldrd	r2, [sp, #40]	; 0x28
   25d28:	strd	r2, [r1, #-32]	; 0xffffffe0
   25d2c:	ldrd	r2, [sp, #48]	; 0x30
   25d30:	strd	r2, [r1, #-24]	; 0xffffffe8
   25d34:	ldr	r3, [r9, #12]
   25d38:	add	r0, sl, sl, lsl #1
   25d3c:	ldr	r2, [sp, #12]
   25d40:	ldr	r1, [r3, r2]
   25d44:	add	r3, sp, #8256	; 0x2040
   25d48:	add	r3, r3, #56	; 0x38
   25d4c:	add	r0, r3, r0, lsl #2
   25d50:	bl	207bc <__assert_fail@plt+0xec18>
   25d54:	cmp	r0, #0
   25d58:	bne	25d7c <__assert_fail@plt+0x141d8>
   25d5c:	add	sl, sl, #1
   25d60:	mov	r2, #0
   25d64:	mov	r3, #0
   25d68:	strd	r2, [sp, #24]
   25d6c:	strd	r2, [sp, #32]
   25d70:	strd	r2, [sp, #40]	; 0x28
   25d74:	strd	r2, [sp, #48]	; 0x30
   25d78:	b	25c58 <__assert_fail@plt+0x140b4>
   25d7c:	cmp	sl, #0
   25d80:	ble	25da8 <__assert_fail@plt+0x14204>
   25d84:	add	r4, sp, #8256	; 0x2040
   25d88:	add	r4, r4, #56	; 0x38
   25d8c:	add	r5, sl, sl, lsl #1
   25d90:	add	r5, r4, r5, lsl #2
   25d94:	ldr	r0, [r4, #8]
   25d98:	bl	17750 <__assert_fail@plt+0x5bac>
   25d9c:	add	r4, r4, #12
   25da0:	cmp	r4, r5
   25da4:	bne	25d94 <__assert_fail@plt+0x141f0>
   25da8:	mov	r0, #0
   25dac:	b	25ee4 <__assert_fail@plt+0x14340>
   25db0:	ldr	r7, [sp, #8]
   25db4:	cmp	sl, #0
   25db8:	ble	25e34 <__assert_fail@plt+0x14290>
   25dbc:	add	r1, sl, #1
   25dc0:	add	r0, sp, #11392	; 0x2c80
   25dc4:	add	r0, r0, #24
   25dc8:	bl	20814 <__assert_fail@plt+0xec70>
   25dcc:	str	r0, [sp, #4]
   25dd0:	add	r2, sp, #14464	; 0x3880
   25dd4:	add	r2, r2, #36	; 0x24
   25dd8:	str	r0, [r2]
   25ddc:	cmp	r0, #0
   25de0:	bne	25eac <__assert_fail@plt+0x14308>
   25de4:	add	r3, sp, #11328	; 0x2c40
   25de8:	add	r3, r3, #56	; 0x38
   25dec:	mov	r0, #0
   25df0:	mov	r1, #0
   25df4:	strd	r0, [r3]
   25df8:	strd	r0, [r3, #8]
   25dfc:	strd	r0, [r3, #16]
   25e00:	strd	r0, [r3, #24]
   25e04:	add	r8, sp, #8256	; 0x2040
   25e08:	add	r8, r8, #56	; 0x38
   25e0c:	str	r8, [sp, #20]
   25e10:	add	r3, sp, #120	; 0x78
   25e14:	str	r3, [sp, #12]
   25e18:	add	r6, sp, #148	; 0x94
   25e1c:	add	fp, sp, #13440	; 0x3480
   25e20:	add	fp, fp, #36	; 0x24
   25e24:	ldr	r9, [sp, #4]
   25e28:	mov	r3, #0
   25e2c:	str	r3, [sp, #8]
   25e30:	b	25f90 <__assert_fail@plt+0x143ec>
   25e34:	bne	262a4 <__assert_fail@plt+0x14700>
   25e38:	mov	r1, #256	; 0x100
   25e3c:	mov	r0, #4
   25e40:	bl	2ef9c <__assert_fail@plt+0x1d3f8>
   25e44:	ldr	r3, [sp, #16]
   25e48:	str	r0, [r3, #44]	; 0x2c
   25e4c:	adds	r0, r0, #0
   25e50:	movne	r0, #1
   25e54:	b	25ee4 <__assert_fail@plt+0x14340>
   25e58:	add	r4, r4, #1
   25e5c:	ldr	r3, [r5, #4]
   25e60:	cmp	r3, r4
   25e64:	ble	25f04 <__assert_fail@plt+0x14360>
   25e68:	ldr	r3, [r5, #8]
   25e6c:	ldr	r2, [r3, r4, lsl #2]
   25e70:	ldr	r3, [r7, #12]
   25e74:	ldr	r1, [r3, r2, lsl #2]
   25e78:	cmn	r1, #1
   25e7c:	beq	25e58 <__assert_fail@plt+0x142b4>
   25e80:	add	r1, r1, r1, lsl #1
   25e84:	ldr	r3, [r7, #24]
   25e88:	add	r1, r3, r1, lsl #2
   25e8c:	add	r0, sp, #11392	; 0x2c80
   25e90:	add	r0, r0, #24
   25e94:	bl	23314 <__assert_fail@plt+0x11770>
   25e98:	add	r3, sp, #14464	; 0x3880
   25e9c:	add	r3, r3, #36	; 0x24
   25ea0:	str	r0, [r3]
   25ea4:	cmp	r0, #0
   25ea8:	beq	25e58 <__assert_fail@plt+0x142b4>
   25eac:	add	r3, sp, #11392	; 0x2c80
   25eb0:	add	r3, r3, #32
   25eb4:	ldr	r0, [r3]
   25eb8:	bl	17750 <__assert_fail@plt+0x5bac>
   25ebc:	add	r4, sp, #8256	; 0x2040
   25ec0:	add	r4, r4, #56	; 0x38
   25ec4:	add	r5, sl, sl, lsl #1
   25ec8:	add	r5, r4, r5, lsl #2
   25ecc:	ldr	r0, [r4, #8]
   25ed0:	bl	17750 <__assert_fail@plt+0x5bac>
   25ed4:	add	r4, r4, #12
   25ed8:	cmp	r5, r4
   25edc:	bne	25ecc <__assert_fail@plt+0x14328>
   25ee0:	mov	r0, #0
   25ee4:	add	sp, sp, #14464	; 0x3880
   25ee8:	add	sp, sp, #44	; 0x2c
   25eec:	ldrd	r4, [sp]
   25ef0:	ldrd	r6, [sp, #8]
   25ef4:	ldrd	r8, [sp, #16]
   25ef8:	ldrd	sl, [sp, #24]
   25efc:	add	sp, sp, #32
   25f00:	pop	{pc}		; (ldr pc, [sp], #4)
   25f04:	mov	r3, #0
   25f08:	add	r2, sp, #11392	; 0x2c80
   25f0c:	add	r2, r2, #24
   25f10:	mov	r1, r7
   25f14:	add	r0, sp, #14464	; 0x3880
   25f18:	add	r0, r0, #36	; 0x24
   25f1c:	bl	2253c <__assert_fail@plt+0x10998>
   25f20:	mov	r4, r0
   25f24:	str	r0, [fp], #4
   25f28:	cmp	r0, #0
   25f2c:	beq	25fb8 <__assert_fail@plt+0x14414>
   25f30:	ldrsb	r3, [r4, #52]	; 0x34
   25f34:	cmp	r3, #0
   25f38:	blt	25fd0 <__assert_fail@plt+0x1442c>
   25f3c:	add	r3, sp, #12416	; 0x3080
   25f40:	add	r3, r3, #36	; 0x24
   25f44:	str	r4, [r3, r9, lsl #2]
   25f48:	add	r3, sp, #11392	; 0x2c80
   25f4c:	add	r3, r3, #36	; 0x24
   25f50:	str	r4, [r3, r9, lsl #2]
   25f54:	add	r4, sp, #11328	; 0x2c40
   25f58:	add	r4, r4, #52	; 0x34
   25f5c:	sub	r1, r6, #32
   25f60:	mov	r2, r4
   25f64:	ldr	r3, [r2, #4]!
   25f68:	ldr	r0, [r1, #4]!
   25f6c:	orr	r3, r3, r0
   25f70:	str	r3, [r2]
   25f74:	cmp	r6, r1
   25f78:	bne	25f64 <__assert_fail@plt+0x143c0>
   25f7c:	add	r9, r9, #1
   25f80:	add	r8, r8, #12
   25f84:	add	r6, r6, #32
   25f88:	cmp	r9, sl
   25f8c:	beq	26080 <__assert_fail@plt+0x144dc>
   25f90:	add	r3, sp, #11392	; 0x2c80
   25f94:	add	r3, r3, #28
   25f98:	mov	r2, #0
   25f9c:	str	r2, [r3]
   25fa0:	mov	r5, r8
   25fa4:	ldr	r3, [r8, #4]
   25fa8:	cmp	r3, r2
   25fac:	ble	25f04 <__assert_fail@plt+0x14360>
   25fb0:	ldr	r4, [sp, #4]
   25fb4:	b	25e68 <__assert_fail@plt+0x142c4>
   25fb8:	add	r3, sp, #14464	; 0x3880
   25fbc:	add	r3, r3, #36	; 0x24
   25fc0:	ldr	r3, [r3]
   25fc4:	cmp	r3, #0
   25fc8:	beq	25f30 <__assert_fail@plt+0x1438c>
   25fcc:	b	25eac <__assert_fail@plt+0x14308>
   25fd0:	mov	r3, #1
   25fd4:	add	r2, sp, #11392	; 0x2c80
   25fd8:	add	r2, r2, #24
   25fdc:	mov	r1, r7
   25fe0:	add	r0, sp, #14464	; 0x3880
   25fe4:	add	r0, r0, #36	; 0x24
   25fe8:	bl	2253c <__assert_fail@plt+0x10998>
   25fec:	mov	r5, r9
   25ff0:	add	r3, sp, #12416	; 0x3080
   25ff4:	add	r3, r3, #36	; 0x24
   25ff8:	str	r0, [r3, r9, lsl #2]
   25ffc:	cmp	r0, #0
   26000:	beq	26068 <__assert_fail@plt+0x144c4>
   26004:	cmp	r4, r0
   26008:	beq	26020 <__assert_fail@plt+0x1447c>
   2600c:	ldr	r3, [r7, #92]	; 0x5c
   26010:	cmp	r3, #2
   26014:	ldr	r3, [sp, #8]
   26018:	movge	r3, #1
   2601c:	str	r3, [sp, #8]
   26020:	mov	r3, #2
   26024:	add	r2, sp, #11392	; 0x2c80
   26028:	add	r2, r2, #24
   2602c:	mov	r1, r7
   26030:	add	r0, sp, #14464	; 0x3880
   26034:	add	r0, r0, #36	; 0x24
   26038:	bl	2253c <__assert_fail@plt+0x10998>
   2603c:	add	r3, sp, #11392	; 0x2c80
   26040:	add	r3, r3, #36	; 0x24
   26044:	str	r0, [r3, r5, lsl #2]
   26048:	cmp	r0, #0
   2604c:	bne	25f54 <__assert_fail@plt+0x143b0>
   26050:	add	r3, sp, #14464	; 0x3880
   26054:	add	r3, r3, #36	; 0x24
   26058:	ldr	r3, [r3]
   2605c:	cmp	r3, #0
   26060:	beq	25f54 <__assert_fail@plt+0x143b0>
   26064:	b	25eac <__assert_fail@plt+0x14308>
   26068:	add	r3, sp, #14464	; 0x3880
   2606c:	add	r3, r3, #36	; 0x24
   26070:	ldr	r3, [r3]
   26074:	cmp	r3, #0
   26078:	beq	2600c <__assert_fail@plt+0x14468>
   2607c:	b	25eac <__assert_fail@plt+0x14308>
   26080:	ldr	r3, [sp, #8]
   26084:	cmp	r3, #0
   26088:	bne	261ec <__assert_fail@plt+0x14648>
   2608c:	mov	r1, #256	; 0x100
   26090:	mov	r0, #4
   26094:	bl	2ef9c <__assert_fail@plt+0x1d3f8>
   26098:	mov	r9, r0
   2609c:	ldr	r3, [sp, #16]
   260a0:	str	r0, [r3, #44]	; 0x2c
   260a4:	cmp	r0, #0
   260a8:	beq	25eac <__assert_fail@plt+0x14308>
   260ac:	mov	r5, r0
   260b0:	add	r7, r7, #96	; 0x60
   260b4:	add	r8, r0, #1024	; 0x400
   260b8:	ldr	r6, [sp, #12]
   260bc:	ldr	r3, [r4, #4]!
   260c0:	cmp	r3, #0
   260c4:	beq	260ec <__assert_fail@plt+0x14548>
   260c8:	mov	r0, r5
   260cc:	mov	r2, #1
   260d0:	mov	ip, r6
   260d4:	tst	r3, #1
   260d8:	bne	261a0 <__assert_fail@plt+0x145fc>
   260dc:	lsl	r2, r2, #1
   260e0:	add	r0, r0, #4
   260e4:	lsrs	r3, r3, #1
   260e8:	bne	260d4 <__assert_fail@plt+0x14530>
   260ec:	add	r5, r5, #128	; 0x80
   260f0:	add	r7, r7, #4
   260f4:	add	r6, r6, #4
   260f8:	cmp	r8, r5
   260fc:	bne	260bc <__assert_fail@plt+0x14518>
   26100:	add	r3, sp, #11328	; 0x2c40
   26104:	add	r3, r3, #56	; 0x38
   26108:	ldr	r3, [r3]
   2610c:	tst	r3, #1024	; 0x400
   26110:	beq	26168 <__assert_fail@plt+0x145c4>
   26114:	ldr	r3, [sp, #120]	; 0x78
   26118:	tst	r3, #1024	; 0x400
   2611c:	bne	26144 <__assert_fail@plt+0x145a0>
   26120:	ldr	r2, [sp, #12]
   26124:	ldr	r3, [sp, #4]
   26128:	add	r3, r3, #1
   2612c:	cmp	r3, sl
   26130:	beq	26168 <__assert_fail@plt+0x145c4>
   26134:	ldr	r1, [r2, #32]!
   26138:	tst	r1, #1024	; 0x400
   2613c:	beq	26128 <__assert_fail@plt+0x14584>
   26140:	str	r3, [sp, #4]
   26144:	add	r3, sp, #14464	; 0x3880
   26148:	add	r3, r3, #40	; 0x28
   2614c:	ldr	r2, [sp, #4]
   26150:	add	r3, r3, r2, lsl #2
   26154:	ldr	r3, [r3, #-3076]	; 0xfffff3fc
   26158:	str	r3, [r9, #40]	; 0x28
   2615c:	ldr	r2, [sp, #8]
   26160:	cmp	r2, #0
   26164:	strne	r3, [r9, #1064]	; 0x428
   26168:	add	r3, sp, #11392	; 0x2c80
   2616c:	add	r3, r3, #32
   26170:	ldr	r0, [r3]
   26174:	bl	17750 <__assert_fail@plt+0x5bac>
   26178:	add	r4, sl, sl, lsl #1
   2617c:	ldr	r5, [sp, #20]
   26180:	add	r4, r5, r4, lsl #2
   26184:	ldr	r0, [r5, #8]
   26188:	bl	17750 <__assert_fail@plt+0x5bac>
   2618c:	add	r5, r5, #12
   26190:	cmp	r4, r5
   26194:	bne	26184 <__assert_fail@plt+0x145e0>
   26198:	mov	r0, #1
   2619c:	b	25ee4 <__assert_fail@plt+0x14340>
   261a0:	ldr	r1, [r6]
   261a4:	tst	r2, r1
   261a8:	bne	261e4 <__assert_fail@plt+0x14640>
   261ac:	ldr	r1, [sp, #4]
   261b0:	add	r1, r1, #1
   261b4:	ldr	lr, [ip, r1, lsl #5]
   261b8:	tst	r2, lr
   261bc:	beq	261b0 <__assert_fail@plt+0x1460c>
   261c0:	ldr	lr, [r7]
   261c4:	tst	r2, lr
   261c8:	add	lr, sp, #14464	; 0x3880
   261cc:	add	lr, lr, #40	; 0x28
   261d0:	add	r1, lr, r1, lsl #2
   261d4:	ldrne	r1, [r1, #-2052]	; 0xfffff7fc
   261d8:	ldreq	r1, [r1, #-1028]	; 0xfffffbfc
   261dc:	str	r1, [r0]
   261e0:	b	260dc <__assert_fail@plt+0x14538>
   261e4:	ldr	r1, [sp, #4]
   261e8:	b	261c0 <__assert_fail@plt+0x1461c>
   261ec:	mov	r1, #512	; 0x200
   261f0:	mov	r0, #4
   261f4:	bl	2ef9c <__assert_fail@plt+0x1d3f8>
   261f8:	mov	r9, r0
   261fc:	ldr	r3, [sp, #16]
   26200:	str	r0, [r3, #48]	; 0x30
   26204:	cmp	r0, #0
   26208:	beq	25eac <__assert_fail@plt+0x14308>
   2620c:	mov	r6, r0
   26210:	add	r7, r0, #1024	; 0x400
   26214:	ldr	r5, [sp, #12]
   26218:	ldr	r3, [r4, #4]!
   2621c:	cmp	r3, #0
   26220:	beq	26248 <__assert_fail@plt+0x146a4>
   26224:	mov	r0, r6
   26228:	mov	r2, #1
   2622c:	mov	lr, r5
   26230:	tst	r3, #1
   26234:	bne	2625c <__assert_fail@plt+0x146b8>
   26238:	lsl	r2, r2, #1
   2623c:	add	r0, r0, #4
   26240:	lsrs	r3, r3, #1
   26244:	bne	26230 <__assert_fail@plt+0x1468c>
   26248:	add	r6, r6, #128	; 0x80
   2624c:	add	r5, r5, #4
   26250:	cmp	r7, r6
   26254:	bne	26218 <__assert_fail@plt+0x14674>
   26258:	b	26100 <__assert_fail@plt+0x1455c>
   2625c:	ldr	r1, [r5]
   26260:	tst	r2, r1
   26264:	bne	2629c <__assert_fail@plt+0x146f8>
   26268:	ldr	r1, [sp, #4]
   2626c:	add	r1, r1, #1
   26270:	ldr	ip, [lr, r1, lsl #5]
   26274:	tst	r2, ip
   26278:	beq	2626c <__assert_fail@plt+0x146c8>
   2627c:	add	ip, sp, #14464	; 0x3880
   26280:	add	ip, ip, #40	; 0x28
   26284:	add	r1, ip, r1, lsl #2
   26288:	ldr	ip, [r1, #-1028]	; 0xfffffbfc
   2628c:	str	ip, [r0]
   26290:	ldr	r1, [r1, #-2052]	; 0xfffff7fc
   26294:	str	r1, [r0, #1024]	; 0x400
   26298:	b	26238 <__assert_fail@plt+0x14694>
   2629c:	ldr	r1, [sp, #4]
   262a0:	b	2627c <__assert_fail@plt+0x146d8>
   262a4:	mov	r0, #0
   262a8:	b	25ee4 <__assert_fail@plt+0x14340>
   262ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   262b0:	strd	r6, [sp, #8]
   262b4:	strd	r8, [sp, #16]
   262b8:	strd	sl, [sp, #24]
   262bc:	str	lr, [sp, #32]
   262c0:	sub	sp, sp, #316	; 0x13c
   262c4:	ldr	fp, [r0]
   262c8:	ldr	r3, [fp, #92]	; 0x5c
   262cc:	cmp	r3, #1
   262d0:	ldreq	r3, [r0, #12]
   262d4:	ubfxeq	r3, r3, #22, #1
   262d8:	movne	r3, #0
   262dc:	mov	r9, r3
   262e0:	ldr	r3, [r1, #8]
   262e4:	cmp	r3, #0
   262e8:	ble	263ec <__assert_fail@plt+0x14848>
   262ec:	mov	r7, r2
   262f0:	str	r1, [sp, #8]
   262f4:	str	r0, [sp, #28]
   262f8:	mov	r3, #0
   262fc:	str	r3, [sp, #4]
   26300:	str	r3, [sp, #20]
   26304:	str	r3, [sp, #24]
   26308:	mov	r3, #255	; 0xff
   2630c:	movt	r3, #32
   26310:	str	r3, [sp, #32]
   26314:	mov	r3, #1
   26318:	movt	r3, #32
   2631c:	str	r3, [sp, #36]	; 0x24
   26320:	mov	sl, fp
   26324:	b	26384 <__assert_fail@plt+0x147e0>
   26328:	ldrb	r5, [r2, r4, lsl #3]
   2632c:	strb	r3, [r7, r5]
   26330:	cmp	r9, #0
   26334:	beq	2634c <__assert_fail@plt+0x147a8>
   26338:	bl	11928 <__ctype_tolower_loc@plt>
   2633c:	ldr	r3, [r0]
   26340:	ldr	r3, [r3, r5, lsl #2]
   26344:	mov	r2, #1
   26348:	strb	r2, [r7, r3]
   2634c:	ldr	r3, [sp, #28]
   26350:	ldr	r3, [r3, #12]
   26354:	tst	r3, #4194304	; 0x400000
   26358:	beq	26368 <__assert_fail@plt+0x147c4>
   2635c:	ldr	r3, [sl, #92]	; 0x5c
   26360:	cmp	r3, #1
   26364:	bgt	26408 <__assert_fail@plt+0x14864>
   26368:	ldr	r3, [sp, #4]
   2636c:	add	r2, r3, #1
   26370:	str	r2, [sp, #4]
   26374:	ldr	r3, [sp, #8]
   26378:	ldr	r3, [r3, #8]
   2637c:	cmp	r3, r2
   26380:	ble	263ec <__assert_fail@plt+0x14848>
   26384:	ldr	r3, [sp, #8]
   26388:	ldr	r3, [r3, #12]
   2638c:	ldr	r2, [sp, #4]
   26390:	ldr	r4, [r3, r2, lsl #2]
   26394:	lsl	r3, r4, #3
   26398:	str	r3, [sp, #12]
   2639c:	ldr	r2, [sl]
   263a0:	add	r3, r2, r3
   263a4:	ldrb	r3, [r3, #4]
   263a8:	mov	r5, r3
   263ac:	cmp	r3, #1
   263b0:	beq	26328 <__assert_fail@plt+0x14784>
   263b4:	cmp	r3, #3
   263b8:	beq	264ec <__assert_fail@plt+0x14948>
   263bc:	cmp	r3, #6
   263c0:	beq	2657c <__assert_fail@plt+0x149d8>
   263c4:	and	r2, r3, #253	; 0xfd
   263c8:	cmp	r3, #2
   263cc:	cmpne	r2, #5
   263d0:	bne	26368 <__assert_fail@plt+0x147c4>
   263d4:	mov	r2, #256	; 0x100
   263d8:	mov	r1, #1
   263dc:	mov	r0, r7
   263e0:	bl	119e8 <memset@plt>
   263e4:	cmp	r5, #2
   263e8:	beq	266dc <__assert_fail@plt+0x14b38>
   263ec:	add	sp, sp, #316	; 0x13c
   263f0:	ldrd	r4, [sp]
   263f4:	ldrd	r6, [sp, #8]
   263f8:	ldrd	r8, [sp, #16]
   263fc:	ldrd	sl, [sp, #24]
   26400:	add	sp, sp, #32
   26404:	pop	{pc}		; (ldr pc, [sp], #4)
   26408:	ldr	r3, [sl]
   2640c:	ldrb	r3, [r3, r4, lsl #3]
   26410:	strb	r3, [sp, #56]	; 0x38
   26414:	add	r2, r4, #1
   26418:	ldr	r3, [sl, #8]
   2641c:	cmp	r2, r3
   26420:	bcs	264dc <__assert_fail@plt+0x14938>
   26424:	ldr	r3, [sp, #12]
   26428:	add	r3, r3, #8
   2642c:	ldr	r1, [sl]
   26430:	add	r3, r1, r3
   26434:	ldr	r1, [r3, #4]
   26438:	ldr	r0, [sp, #32]
   2643c:	and	r1, r1, r0
   26440:	ldr	ip, [sp, #36]	; 0x24
   26444:	cmp	r1, ip
   26448:	bne	264e4 <__assert_fail@plt+0x14940>
   2644c:	add	r4, sp, #57	; 0x39
   26450:	ldrb	r3, [r3]
   26454:	strb	r3, [r4], #1
   26458:	add	r2, r2, #1
   2645c:	ldr	r3, [sl, #8]
   26460:	cmp	r3, r2
   26464:	bls	26480 <__assert_fail@plt+0x148dc>
   26468:	ldr	r3, [sl]
   2646c:	add	r3, r3, r2, lsl #3
   26470:	ldr	r1, [r3, #4]
   26474:	and	r1, r1, r0
   26478:	cmp	r1, ip
   2647c:	beq	26450 <__assert_fail@plt+0x148ac>
   26480:	mov	r3, #0
   26484:	str	r3, [sp, #48]	; 0x30
   26488:	str	r3, [sp, #52]	; 0x34
   2648c:	add	r1, sp, #56	; 0x38
   26490:	sub	r4, r4, r1
   26494:	add	r3, sp, #48	; 0x30
   26498:	mov	r2, r4
   2649c:	add	r0, sp, #44	; 0x2c
   264a0:	bl	1be94 <__assert_fail@plt+0xa2f0>
   264a4:	cmp	r4, r0
   264a8:	bne	26368 <__assert_fail@plt+0x147c4>
   264ac:	ldr	r0, [sp, #44]	; 0x2c
   264b0:	bl	117a8 <towlower@plt>
   264b4:	add	r2, sp, #48	; 0x30
   264b8:	mov	r1, r0
   264bc:	add	r0, sp, #56	; 0x38
   264c0:	bl	116dc <wcrtomb@plt>
   264c4:	cmn	r0, #1
   264c8:	beq	26368 <__assert_fail@plt+0x147c4>
   264cc:	ldrb	r3, [sp, #56]	; 0x38
   264d0:	mov	r2, #1
   264d4:	strb	r2, [r7, r3]
   264d8:	b	26368 <__assert_fail@plt+0x147c4>
   264dc:	add	r4, sp, #57	; 0x39
   264e0:	b	26480 <__assert_fail@plt+0x148dc>
   264e4:	add	r4, sp, #57	; 0x39
   264e8:	b	26480 <__assert_fail@plt+0x148dc>
   264ec:	mov	fp, #0
   264f0:	mov	r8, #1
   264f4:	str	sl, [sp, #16]
   264f8:	b	26554 <__assert_fail@plt+0x149b0>
   264fc:	strb	r8, [r7, r3]
   26500:	add	r4, r4, #1
   26504:	add	r5, r5, #1
   26508:	cmp	r4, #32
   2650c:	beq	26548 <__assert_fail@plt+0x149a4>
   26510:	lsr	r3, r6, r4
   26514:	tst	r3, #1
   26518:	beq	26500 <__assert_fail@plt+0x1495c>
   2651c:	strb	r8, [r7, r5]
   26520:	cmp	r9, #0
   26524:	beq	26500 <__assert_fail@plt+0x1495c>
   26528:	add	r3, r5, #128	; 0x80
   2652c:	cmp	r3, #384	; 0x180
   26530:	movcs	r3, r5
   26534:	bcs	264fc <__assert_fail@plt+0x14958>
   26538:	bl	11928 <__ctype_tolower_loc@plt>
   2653c:	ldr	r3, [r0]
   26540:	ldr	r3, [r3, r5, lsl #2]
   26544:	b	264fc <__assert_fail@plt+0x14958>
   26548:	add	fp, fp, #4
   2654c:	cmp	fp, #32
   26550:	beq	26574 <__assert_fail@plt+0x149d0>
   26554:	lsl	r5, fp, #3
   26558:	ldr	r3, [sp, #16]
   2655c:	ldr	r3, [r3]
   26560:	ldr	r2, [sp, #12]
   26564:	ldr	r3, [r3, r2]
   26568:	ldr	r6, [r3, fp]
   2656c:	mov	r4, #0
   26570:	b	26510 <__assert_fail@plt+0x1496c>
   26574:	ldr	sl, [sp, #16]
   26578:	b	26368 <__assert_fail@plt+0x147c4>
   2657c:	ldr	r5, [r2, r4, lsl #3]
   26580:	ldr	r3, [sl, #92]	; 0x5c
   26584:	cmp	r3, #1
   26588:	ble	265c4 <__assert_fail@plt+0x14a20>
   2658c:	ldr	r3, [r5, #36]	; 0x24
   26590:	cmp	r3, #0
   26594:	bne	265b0 <__assert_fail@plt+0x14a0c>
   26598:	ldrb	r3, [r5, #16]
   2659c:	tst	r3, #1
   265a0:	bne	265b0 <__assert_fail@plt+0x14a0c>
   265a4:	ldr	r3, [r5, #32]
   265a8:	cmp	r3, #0
   265ac:	beq	265c4 <__assert_fail@plt+0x14a20>
   265b0:	mov	r3, #0
   265b4:	strb	r3, [sp, #48]	; 0x30
   265b8:	ldr	r4, [sp, #20]
   265bc:	ldr	r5, [sp, #24]
   265c0:	b	265f4 <__assert_fail@plt+0x14a50>
   265c4:	ldr	r3, [r5, #20]
   265c8:	cmp	r3, #0
   265cc:	ble	26368 <__assert_fail@plt+0x147c4>
   265d0:	mov	r4, #0
   265d4:	ldr	fp, [sp, #28]
   265d8:	b	26638 <__assert_fail@plt+0x14a94>
   265dc:	ldrb	r3, [sp, #48]	; 0x30
   265e0:	add	r3, r3, #1
   265e4:	uxtb	r3, r3
   265e8:	strb	r3, [sp, #48]	; 0x30
   265ec:	cmp	r3, #0
   265f0:	beq	26368 <__assert_fail@plt+0x147c4>
   265f4:	str	r4, [sp, #56]	; 0x38
   265f8:	str	r5, [sp, #60]	; 0x3c
   265fc:	add	r3, sp, #56	; 0x38
   26600:	mov	r2, #1
   26604:	add	r1, sp, #48	; 0x30
   26608:	mov	r0, #0
   2660c:	bl	1be94 <__assert_fail@plt+0xa2f0>
   26610:	cmn	r0, #2
   26614:	bne	265dc <__assert_fail@plt+0x14a38>
   26618:	ldrb	r3, [sp, #48]	; 0x30
   2661c:	mov	r2, #1
   26620:	strb	r2, [r7, r3]
   26624:	b	265dc <__assert_fail@plt+0x14a38>
   26628:	add	r4, r4, #1
   2662c:	ldr	r3, [r5, #20]
   26630:	cmp	r3, r4
   26634:	ble	26368 <__assert_fail@plt+0x147c4>
   26638:	ldr	r3, [sp, #20]
   2663c:	str	r3, [sp, #48]	; 0x30
   26640:	ldr	r3, [sp, #24]
   26644:	str	r3, [sp, #52]	; 0x34
   26648:	lsl	r8, r4, #2
   2664c:	ldr	r3, [r5]
   26650:	add	r2, sp, #48	; 0x30
   26654:	ldr	r1, [r3, r4, lsl #2]
   26658:	add	r0, sp, #56	; 0x38
   2665c:	bl	116dc <wcrtomb@plt>
   26660:	cmn	r0, #1
   26664:	beq	26690 <__assert_fail@plt+0x14aec>
   26668:	ldrb	r6, [sp, #56]	; 0x38
   2666c:	mov	r3, #1
   26670:	strb	r3, [r7, r6]
   26674:	cmp	r9, #0
   26678:	beq	26690 <__assert_fail@plt+0x14aec>
   2667c:	bl	11928 <__ctype_tolower_loc@plt>
   26680:	ldr	r3, [r0]
   26684:	ldr	r3, [r3, r6, lsl #2]
   26688:	mov	r2, #1
   2668c:	strb	r2, [r7, r3]
   26690:	ldr	r3, [fp, #12]
   26694:	tst	r3, #4194304	; 0x400000
   26698:	beq	26628 <__assert_fail@plt+0x14a84>
   2669c:	ldr	r3, [sl, #92]	; 0x5c
   266a0:	cmp	r3, #1
   266a4:	ble	26628 <__assert_fail@plt+0x14a84>
   266a8:	ldr	r3, [r5]
   266ac:	ldr	r0, [r3, r8]
   266b0:	bl	117a8 <towlower@plt>
   266b4:	add	r2, sp, #48	; 0x30
   266b8:	mov	r1, r0
   266bc:	add	r0, sp, #56	; 0x38
   266c0:	bl	116dc <wcrtomb@plt>
   266c4:	cmn	r0, #1
   266c8:	beq	26628 <__assert_fail@plt+0x14a84>
   266cc:	ldrb	r3, [sp, #56]	; 0x38
   266d0:	mov	r2, #1
   266d4:	strb	r2, [r7, r3]
   266d8:	b	26628 <__assert_fail@plt+0x14a84>
   266dc:	ldr	r2, [sp, #28]
   266e0:	ldrb	r3, [r2, #28]
   266e4:	orr	r3, r3, #1
   266e8:	strb	r3, [r2, #28]
   266ec:	b	263ec <__assert_fail@plt+0x14848>
   266f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   266f4:	strd	r6, [sp, #8]
   266f8:	strd	r8, [sp, #16]
   266fc:	strd	sl, [sp, #24]
   26700:	str	lr, [sp, #32]
   26704:	sub	sp, sp, #164	; 0xa4
   26708:	mov	r9, r0
   2670c:	mov	r4, r1
   26710:	mov	r8, r2
   26714:	str	r3, [sp, #24]
   26718:	ldr	fp, [sp, #204]	; 0xcc
   2671c:	ldr	r3, [r1]
   26720:	str	r3, [sp, #20]
   26724:	ldrb	r2, [r2, #4]
   26728:	sub	r3, r2, #1
   2672c:	cmp	r3, #35	; 0x23
   26730:	ldrls	pc, [pc, r3, lsl #2]
   26734:	b	275f0 <__assert_fail@plt+0x15a4c>
   26738:	andeq	r6, r2, r8, asr #15
   2673c:	andeq	r7, r2, r4, asr sl
   26740:	strdeq	r7, [r2], -r0
   26744:	andeq	r7, r2, r4, lsl #3
   26748:	strdeq	r7, [r2], -ip
   2674c:	strdeq	r7, [r2], -r0
   26750:	strdeq	r7, [r2], -r0
   26754:	muleq	r2, r0, r8
   26758:	andeq	r7, r2, r8, lsr r2
   2675c:	andeq	r7, r2, r4, asr sl
   26760:	andeq	r7, r2, r4, lsl r2
   26764:	strdeq	r7, [r2], -r0
   26768:	strdeq	r7, [r2], -r0
   2676c:	strdeq	r7, [r2], -r0
   26770:	strdeq	r7, [r2], -r0
   26774:	strdeq	r7, [r2], -r0
   26778:	strdeq	r7, [r2], -r0
   2677c:	andeq	r7, r2, r4, lsl r2
   26780:	andeq	r7, r2, r4, lsl r2
   26784:	andeq	r6, r2, r0, ror r9
   26788:	strdeq	r7, [r2], -r0
   2678c:	strdeq	r7, [r2], -r0
   26790:	strdeq	r7, [r2], -ip
   26794:	andeq	r7, r2, r0, asr #4
   26798:	strdeq	r7, [r2], -r0
   2679c:	strdeq	r7, [r2], -r0
   267a0:	strdeq	r7, [r2], -r0
   267a4:	strdeq	r7, [r2], -r0
   267a8:	strdeq	r7, [r2], -r0
   267ac:	strdeq	r7, [r2], -r0
   267b0:	strdeq	r7, [r2], -r0
   267b4:	andeq	r7, r2, r0, asr #10
   267b8:	andeq	r7, r2, r0, asr #10
   267bc:	muleq	r2, r8, r5
   267c0:	muleq	r2, r8, r5
   267c4:	strdeq	r7, [r2], -r0
   267c8:	mov	r3, r8
   267cc:	mov	r2, #0
   267d0:	mov	r1, r2
   267d4:	ldr	r0, [sp, #20]
   267d8:	bl	203e8 <__assert_fail@plt+0xe844>
   267dc:	subs	sl, r0, #0
   267e0:	moveq	r3, #12
   267e4:	streq	r3, [fp]
   267e8:	beq	27878 <__assert_fail@plt+0x15cd4>
   267ec:	ldr	r3, [sp, #20]
   267f0:	ldr	r3, [r3, #92]	; 0x5c
   267f4:	cmp	r3, #1
   267f8:	movgt	r6, #0
   267fc:	movgt	r5, #16
   26800:	ble	2726c <__assert_fail@plt+0x156c8>
   26804:	ldr	r3, [r9, #40]	; 0x28
   26808:	ldr	r2, [r9, #56]	; 0x38
   2680c:	cmp	r2, r3
   26810:	ble	2726c <__assert_fail@plt+0x156c8>
   26814:	ldr	r2, [r9, #28]
   26818:	cmp	r3, r2
   2681c:	beq	2726c <__assert_fail@plt+0x156c8>
   26820:	ldr	r2, [r9, #8]
   26824:	ldr	r3, [r2, r3, lsl #2]
   26828:	cmn	r3, #1
   2682c:	bne	2726c <__assert_fail@plt+0x156c8>
   26830:	ldr	r2, [sp, #24]
   26834:	mov	r1, r9
   26838:	mov	r0, r8
   2683c:	bl	21fec <__assert_fail@plt+0x10448>
   26840:	mov	r3, r8
   26844:	mov	r2, r6
   26848:	mov	r1, r6
   2684c:	ldr	r7, [sp, #20]
   26850:	mov	r0, r7
   26854:	bl	203e8 <__assert_fail@plt+0xe844>
   26858:	mov	r4, r0
   2685c:	mov	r3, r5
   26860:	mov	r2, r0
   26864:	mov	r1, sl
   26868:	mov	r0, r7
   2686c:	bl	20584 <__assert_fail@plt+0xe9e0>
   26870:	mov	sl, r0
   26874:	cmp	r0, #0
   26878:	cmpne	r4, #0
   2687c:	bne	26804 <__assert_fail@plt+0x14c60>
   26880:	mov	r3, #12
   26884:	str	r3, [fp]
   26888:	mov	sl, #0
   2688c:	b	27878 <__assert_fail@plt+0x15cd4>
   26890:	ldr	r5, [r1, #24]
   26894:	add	r3, r5, #1
   26898:	str	r3, [r1, #24]
   2689c:	ldr	r6, [sp, #24]
   268a0:	orr	r2, r6, #8388608	; 0x800000
   268a4:	mov	r1, r0
   268a8:	mov	r0, r8
   268ac:	bl	21fec <__assert_fail@plt+0x10448>
   268b0:	ldrb	r3, [r8, #4]
   268b4:	cmp	r3, #9
   268b8:	moveq	r0, #0
   268bc:	bne	26908 <__assert_fail@plt+0x14d64>
   268c0:	cmp	r5, #8
   268c4:	bhi	268dc <__assert_fail@plt+0x14d38>
   268c8:	ldr	r1, [sp, #20]
   268cc:	ldr	r3, [r1, #84]	; 0x54
   268d0:	mov	r2, #1
   268d4:	orr	r3, r3, r2, lsl r5
   268d8:	str	r3, [r1, #84]	; 0x54
   268dc:	mov	r3, #17
   268e0:	mov	r2, #0
   268e4:	mov	r1, r0
   268e8:	ldr	r0, [sp, #20]
   268ec:	bl	20584 <__assert_fail@plt+0xe9e0>
   268f0:	subs	sl, r0, #0
   268f4:	moveq	r3, #12
   268f8:	streq	r3, [fp]
   268fc:	beq	26938 <__assert_fail@plt+0x14d94>
   26900:	str	r5, [sl, #20]
   26904:	b	2726c <__assert_fail@plt+0x156c8>
   26908:	str	fp, [sp, #4]
   2690c:	ldr	r3, [sp, #200]	; 0xc8
   26910:	add	r3, r3, #1
   26914:	str	r3, [sp]
   26918:	mov	r3, r6
   2691c:	mov	r2, r8
   26920:	mov	r1, r4
   26924:	mov	r0, r9
   26928:	bl	27cd8 <__assert_fail@plt+0x16134>
   2692c:	ldr	r3, [fp]
   26930:	cmp	r3, #0
   26934:	beq	26940 <__assert_fail@plt+0x14d9c>
   26938:	mov	sl, #0
   2693c:	b	27878 <__assert_fail@plt+0x15cd4>
   26940:	ldrb	r3, [r8, #4]
   26944:	cmp	r3, #9
   26948:	beq	268c0 <__assert_fail@plt+0x14d1c>
   2694c:	cmp	r0, #0
   26950:	beq	26964 <__assert_fail@plt+0x14dc0>
   26954:	mov	r2, #0
   26958:	movw	r1, #8560	; 0x2170
   2695c:	movt	r1, #2
   26960:	bl	1f7dc <__assert_fail@plt+0xdc38>
   26964:	mov	r3, #8
   26968:	str	r3, [fp]
   2696c:	b	26938 <__assert_fail@plt+0x14d94>
   26970:	mov	r3, #0
   26974:	str	r3, [sp, #68]	; 0x44
   26978:	mov	r1, #1
   2697c:	mov	r0, #32
   26980:	bl	2ef9c <__assert_fail@plt+0x1d3f8>
   26984:	mov	r4, r0
   26988:	str	r0, [sp, #32]
   2698c:	mov	r1, #1
   26990:	mov	r0, #40	; 0x28
   26994:	bl	2ef9c <__assert_fail@plt+0x1d3f8>
   26998:	str	r0, [sp, #36]	; 0x24
   2699c:	clz	r0, r0
   269a0:	lsr	r0, r0, #5
   269a4:	cmp	r4, #0
   269a8:	movne	r7, r0
   269ac:	moveq	r7, #1
   269b0:	cmp	r7, #0
   269b4:	bne	26a2c <__assert_fail@plt+0x14e88>
   269b8:	ldr	r2, [sp, #24]
   269bc:	mov	r1, r9
   269c0:	mov	r0, r8
   269c4:	bl	1f9f4 <__assert_fail@plt+0xde50>
   269c8:	str	r0, [sp, #28]
   269cc:	ldrb	r3, [r8, #4]
   269d0:	cmp	r3, #2
   269d4:	streq	r3, [fp]
   269d8:	beq	26abc <__assert_fail@plt+0x14f18>
   269dc:	cmp	r3, #25
   269e0:	strne	r7, [sp, #52]	; 0x34
   269e4:	beq	26a48 <__assert_fail@plt+0x14ea4>
   269e8:	ldrb	r3, [r8, #4]
   269ec:	cmp	r3, #21
   269f0:	moveq	r3, #1
   269f4:	strbeq	r3, [r8, #4]
   269f8:	mov	r3, #0
   269fc:	str	r3, [sp, #48]	; 0x30
   26a00:	mov	r2, #1
   26a04:	str	r3, [sp, #44]	; 0x2c
   26a08:	add	sl, sp, #96	; 0x60
   26a0c:	ldr	r3, [sp, #24]
   26a10:	ubfx	r3, r3, #16, #1
   26a14:	str	r3, [sp, #60]	; 0x3c
   26a18:	ldr	r4, [sp, #32]
   26a1c:	str	r7, [sp, #40]	; 0x28
   26a20:	str	fp, [sp, #204]	; 0xcc
   26a24:	ldr	fp, [sp, #36]	; 0x24
   26a28:	b	26e4c <__assert_fail@plt+0x152a8>
   26a2c:	ldr	r0, [sp, #32]
   26a30:	bl	17750 <__assert_fail@plt+0x5bac>
   26a34:	ldr	r0, [sp, #36]	; 0x24
   26a38:	bl	17750 <__assert_fail@plt+0x5bac>
   26a3c:	mov	r3, #12
   26a40:	str	r3, [fp]
   26a44:	b	26acc <__assert_fail@plt+0x14f28>
   26a48:	ldr	r2, [sp, #36]	; 0x24
   26a4c:	ldrb	r3, [r2, #16]
   26a50:	orr	r3, r3, #1
   26a54:	strb	r3, [r2, #16]
   26a58:	ldr	r3, [sp, #24]
   26a5c:	tst	r3, #256	; 0x100
   26a60:	beq	26a74 <__assert_fail@plt+0x14ed0>
   26a64:	ldr	r2, [sp, #32]
   26a68:	ldr	r3, [r2]
   26a6c:	orr	r3, r3, #1024	; 0x400
   26a70:	str	r3, [r2]
   26a74:	ldr	r3, [r9, #40]	; 0x28
   26a78:	ldr	r2, [sp, #28]
   26a7c:	add	r3, r3, r2
   26a80:	str	r3, [r9, #40]	; 0x28
   26a84:	ldr	r2, [sp, #24]
   26a88:	mov	r1, r9
   26a8c:	mov	r0, r8
   26a90:	bl	1f9f4 <__assert_fail@plt+0xde50>
   26a94:	str	r0, [sp, #28]
   26a98:	ldrb	r3, [r8, #4]
   26a9c:	cmp	r3, #2
   26aa0:	streq	r3, [fp]
   26aa4:	beq	26abc <__assert_fail@plt+0x14f18>
   26aa8:	mov	r3, #1
   26aac:	str	r3, [sp, #52]	; 0x34
   26ab0:	b	269e8 <__assert_fail@plt+0x14e44>
   26ab4:	ldr	fp, [sp, #204]	; 0xcc
   26ab8:	str	r0, [fp]
   26abc:	ldr	r0, [sp, #32]
   26ac0:	bl	17750 <__assert_fail@plt+0x5bac>
   26ac4:	ldr	r0, [sp, #36]	; 0x24
   26ac8:	bl	220e4 <__assert_fail@plt+0x10540>
   26acc:	ldr	r3, [fp]
   26ad0:	cmp	r3, #0
   26ad4:	bne	27a5c <__assert_fail@plt+0x15eb8>
   26ad8:	mov	sl, #0
   26adc:	b	2726c <__assert_fail@plt+0x156c8>
   26ae0:	ldr	fp, [sp, #204]	; 0xcc
   26ae4:	mov	r3, #7
   26ae8:	str	r3, [fp]
   26aec:	b	26abc <__assert_fail@plt+0x14f18>
   26af0:	ldr	r3, [r9, #40]	; 0x28
   26af4:	ldr	r2, [sp, #28]
   26af8:	add	r3, r3, r2
   26afc:	str	r3, [r9, #40]	; 0x28
   26b00:	ldr	r2, [sp, #24]
   26b04:	mov	r1, r9
   26b08:	add	r0, sp, #88	; 0x58
   26b0c:	bl	1f9f4 <__assert_fail@plt+0xde50>
   26b10:	mov	r3, r0
   26b14:	ldrb	r2, [sp, #92]	; 0x5c
   26b18:	cmp	r2, #2
   26b1c:	beq	26b44 <__assert_fail@plt+0x14fa0>
   26b20:	cmp	r2, #21
   26b24:	bne	26b54 <__assert_fail@plt+0x14fb0>
   26b28:	ldr	r3, [r9, #40]	; 0x28
   26b2c:	ldr	r2, [sp, #28]
   26b30:	sub	r3, r3, r2
   26b34:	str	r3, [r9, #40]	; 0x28
   26b38:	mov	r3, #1
   26b3c:	strb	r3, [r8, #4]
   26b40:	b	26ec0 <__assert_fail@plt+0x1531c>
   26b44:	ldr	fp, [sp, #204]	; 0xcc
   26b48:	mov	r3, #7
   26b4c:	str	r3, [fp]
   26b50:	b	26abc <__assert_fail@plt+0x14f18>
   26b54:	add	r2, sp, #128	; 0x80
   26b58:	str	r2, [sp, #84]	; 0x54
   26b5c:	mov	r2, #3
   26b60:	str	r2, [sp, #80]	; 0x50
   26b64:	mov	r2, #1
   26b68:	str	r2, [sp, #8]
   26b6c:	ldr	r2, [sp, #24]
   26b70:	str	r2, [sp, #4]
   26b74:	ldr	r2, [sp, #20]
   26b78:	str	r2, [sp]
   26b7c:	add	r2, sp, #88	; 0x58
   26b80:	mov	r1, r9
   26b84:	add	r0, sp, #80	; 0x50
   26b88:	bl	1fb88 <__assert_fail@plt+0xdfe4>
   26b8c:	cmp	r0, #0
   26b90:	bne	26c9c <__assert_fail@plt+0x150f8>
   26b94:	ldr	r2, [sp, #24]
   26b98:	mov	r1, r9
   26b9c:	mov	r0, r8
   26ba0:	bl	1f9f4 <__assert_fail@plt+0xde50>
   26ba4:	str	r0, [sp, #28]
   26ba8:	ldr	r6, [sp, #72]	; 0x48
   26bac:	sub	r3, r6, #2
   26bb0:	bics	r3, r3, #2
   26bb4:	beq	27adc <__assert_fail@plt+0x15f38>
   26bb8:	ldr	r7, [sp, #80]	; 0x50
   26bbc:	sub	r3, r7, #2
   26bc0:	bics	r3, r3, #2
   26bc4:	beq	27ae8 <__assert_fail@plt+0x15f44>
   26bc8:	cmp	r6, #3
   26bcc:	moveq	r3, #1
   26bd0:	movne	r3, #0
   26bd4:	str	r3, [sp, #56]	; 0x38
   26bd8:	beq	26ca8 <__assert_fail@plt+0x15104>
   26bdc:	cmp	r7, #3
   26be0:	beq	26cd8 <__assert_fail@plt+0x15134>
   26be4:	cmp	r6, #0
   26be8:	movne	r5, #0
   26bec:	bne	26bf4 <__assert_fail@plt+0x15050>
   26bf0:	ldrb	r5, [sp, #76]	; 0x4c
   26bf4:	cmp	r7, #0
   26bf8:	bne	26d00 <__assert_fail@plt+0x1515c>
   26bfc:	ldrb	r7, [sp, #84]	; 0x54
   26c00:	ldr	r3, [sp, #56]	; 0x38
   26c04:	cmp	r6, #0
   26c08:	moveq	r3, #1
   26c0c:	cmp	r3, #0
   26c10:	bne	26d14 <__assert_fail@plt+0x15170>
   26c14:	ldr	r5, [sp, #76]	; 0x4c
   26c18:	ldr	r3, [sp, #80]	; 0x50
   26c1c:	cmp	r3, #3
   26c20:	cmpne	r3, #0
   26c24:	beq	26d34 <__assert_fail@plt+0x15190>
   26c28:	ldr	r7, [sp, #84]	; 0x54
   26c2c:	cmn	r5, #1
   26c30:	cmnne	r7, #1
   26c34:	beq	27b04 <__assert_fail@plt+0x15f60>
   26c38:	ldr	r3, [sp, #60]	; 0x3c
   26c3c:	cmp	r7, r5
   26c40:	movcs	r3, #0
   26c44:	andcc	r3, r3, #1
   26c48:	cmp	r3, #0
   26c4c:	bne	27b10 <__assert_fail@plt+0x15f6c>
   26c50:	ldr	r3, [sp, #20]
   26c54:	ldr	r3, [r3, #92]	; 0x5c
   26c58:	cmp	r3, #1
   26c5c:	ble	26c90 <__assert_fail@plt+0x150ec>
   26c60:	ldr	r3, [fp, #32]
   26c64:	ldr	r2, [sp, #48]	; 0x30
   26c68:	cmp	r3, r2
   26c6c:	beq	26d54 <__assert_fail@plt+0x151b0>
   26c70:	ldr	r2, [fp, #32]
   26c74:	ldr	r3, [fp, #4]
   26c78:	str	r5, [r3, r2, lsl #2]
   26c7c:	ldr	r2, [fp, #8]
   26c80:	ldr	r3, [fp, #32]
   26c84:	add	r1, r3, #1
   26c88:	str	r1, [fp, #32]
   26c8c:	str	r7, [r2, r3, lsl #2]
   26c90:	mov	r3, #0
   26c94:	mov	ip, #1
   26c98:	b	26dcc <__assert_fail@plt+0x15228>
   26c9c:	ldr	fp, [sp, #204]	; 0xcc
   26ca0:	str	r0, [fp]
   26ca4:	b	26abc <__assert_fail@plt+0x14f18>
   26ca8:	ldr	r0, [sp, #76]	; 0x4c
   26cac:	bl	11988 <strlen@plt>
   26cb0:	cmp	r0, #1
   26cb4:	bhi	26ccc <__assert_fail@plt+0x15128>
   26cb8:	cmp	r7, #3
   26cbc:	beq	27b38 <__assert_fail@plt+0x15f94>
   26cc0:	ldr	r3, [sp, #76]	; 0x4c
   26cc4:	ldrb	r5, [r3]
   26cc8:	b	26bf4 <__assert_fail@plt+0x15050>
   26ccc:	ldr	fp, [sp, #204]	; 0xcc
   26cd0:	mov	r3, #3
   26cd4:	b	27af0 <__assert_fail@plt+0x15f4c>
   26cd8:	ldr	r0, [sp, #84]	; 0x54
   26cdc:	bl	11988 <strlen@plt>
   26ce0:	cmp	r0, #1
   26ce4:	bhi	27af8 <__assert_fail@plt+0x15f54>
   26ce8:	cmp	r6, #0
   26cec:	beq	26bf0 <__assert_fail@plt+0x1504c>
   26cf0:	cmp	r6, #3
   26cf4:	beq	26cc0 <__assert_fail@plt+0x1511c>
   26cf8:	mov	r5, #0
   26cfc:	b	26bf4 <__assert_fail@plt+0x15050>
   26d00:	cmp	r7, #3
   26d04:	ldreq	r3, [sp, #84]	; 0x54
   26d08:	ldrbeq	r7, [r3]
   26d0c:	movne	r7, #0
   26d10:	b	26c00 <__assert_fail@plt+0x1505c>
   26d14:	ldr	r3, [sp, #20]
   26d18:	ldr	r3, [r3, #92]	; 0x5c
   26d1c:	cmp	r3, #1
   26d20:	ble	27b24 <__assert_fail@plt+0x15f80>
   26d24:	mov	r0, r5
   26d28:	bl	119f4 <btowc@plt>
   26d2c:	mov	r5, r0
   26d30:	b	26c18 <__assert_fail@plt+0x15074>
   26d34:	ldr	r3, [sp, #20]
   26d38:	ldr	r3, [r3, #92]	; 0x5c
   26d3c:	cmp	r3, #1
   26d40:	ble	26c2c <__assert_fail@plt+0x15088>
   26d44:	mov	r0, r7
   26d48:	bl	119f4 <btowc@plt>
   26d4c:	mov	r7, r0
   26d50:	b	26c2c <__assert_fail@plt+0x15088>
   26d54:	lsl	r3, r2, #1
   26d58:	add	r3, r3, #1
   26d5c:	str	r3, [sp, #48]	; 0x30
   26d60:	lsl	r6, r3, #2
   26d64:	mov	r1, r6
   26d68:	ldr	r0, [fp, #4]
   26d6c:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   26d70:	str	r0, [sp, #56]	; 0x38
   26d74:	mov	r1, r6
   26d78:	ldr	r0, [fp, #8]
   26d7c:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   26d80:	mov	r6, r0
   26d84:	ldr	r3, [sp, #56]	; 0x38
   26d88:	cmp	r0, #0
   26d8c:	cmpne	r3, #0
   26d90:	beq	26da4 <__assert_fail@plt+0x15200>
   26d94:	ldr	r3, [sp, #56]	; 0x38
   26d98:	str	r3, [fp, #4]
   26d9c:	str	r0, [fp, #8]
   26da0:	b	26c70 <__assert_fail@plt+0x150cc>
   26da4:	ldr	fp, [sp, #204]	; 0xcc
   26da8:	mov	r0, r3
   26dac:	bl	17750 <__assert_fail@plt+0x5bac>
   26db0:	mov	r0, r6
   26db4:	bl	17750 <__assert_fail@plt+0x5bac>
   26db8:	mov	r3, #12
   26dbc:	b	27af0 <__assert_fail@plt+0x15f4c>
   26dc0:	add	r3, r3, #1
   26dc4:	cmp	r3, #256	; 0x100
   26dc8:	beq	27acc <__assert_fail@plt+0x15f28>
   26dcc:	cmp	r3, r5
   26dd0:	movcc	r2, #0
   26dd4:	movcs	r2, #1
   26dd8:	cmp	r3, r7
   26ddc:	movhi	r2, #0
   26de0:	cmp	r2, #0
   26de4:	beq	26dc0 <__assert_fail@plt+0x1521c>
   26de8:	add	r2, r3, #31
   26dec:	cmp	r3, #0
   26df0:	movge	r2, r3
   26df4:	asr	r2, r2, #5
   26df8:	rsbs	r1, r3, #0
   26dfc:	and	r0, r3, #31
   26e00:	and	r1, r1, #31
   26e04:	rsbpl	r0, r1, #0
   26e08:	ldr	r1, [r4, r2, lsl #2]
   26e0c:	orr	r1, r1, ip, lsl r0
   26e10:	str	r1, [r4, r2, lsl #2]
   26e14:	b	26dc0 <__assert_fail@plt+0x1521c>
   26e18:	ldrb	r3, [sp, #76]	; 0x4c
   26e1c:	asr	r1, r3, #5
   26e20:	and	r3, r3, #31
   26e24:	ldr	r2, [r4, r1, lsl #2]
   26e28:	mov	r0, #1
   26e2c:	orr	r3, r2, r0, lsl r3
   26e30:	str	r3, [r4, r1, lsl #2]
   26e34:	ldrb	r3, [r8, #4]
   26e38:	cmp	r3, #2
   26e3c:	beq	26fec <__assert_fail@plt+0x15448>
   26e40:	cmp	r3, #21
   26e44:	beq	26ffc <__assert_fail@plt+0x15458>
   26e48:	ldr	r2, [sp, #40]	; 0x28
   26e4c:	str	sl, [sp, #76]	; 0x4c
   26e50:	mov	r3, #3
   26e54:	str	r3, [sp, #72]	; 0x48
   26e58:	str	r2, [sp, #8]
   26e5c:	ldr	r3, [sp, #24]
   26e60:	str	r3, [sp, #4]
   26e64:	ldr	r3, [sp, #20]
   26e68:	str	r3, [sp]
   26e6c:	ldr	r3, [sp, #28]
   26e70:	mov	r2, r8
   26e74:	mov	r1, r9
   26e78:	add	r0, sp, #72	; 0x48
   26e7c:	bl	1fb88 <__assert_fail@plt+0xdfe4>
   26e80:	cmp	r0, #0
   26e84:	bne	26ab4 <__assert_fail@plt+0x14f10>
   26e88:	ldr	r2, [sp, #24]
   26e8c:	mov	r1, r9
   26e90:	mov	r0, r8
   26e94:	bl	1f9f4 <__assert_fail@plt+0xde50>
   26e98:	str	r0, [sp, #28]
   26e9c:	ldr	r3, [sp, #72]	; 0x48
   26ea0:	sub	r3, r3, #2
   26ea4:	bics	r3, r3, #2
   26ea8:	beq	26ec0 <__assert_fail@plt+0x1531c>
   26eac:	ldrb	r3, [r8, #4]
   26eb0:	cmp	r3, #2
   26eb4:	beq	26ae0 <__assert_fail@plt+0x14f3c>
   26eb8:	cmp	r3, #22
   26ebc:	beq	26af0 <__assert_fail@plt+0x14f4c>
   26ec0:	ldr	r3, [sp, #72]	; 0x48
   26ec4:	cmp	r3, #4
   26ec8:	ldrls	pc, [pc, r3, lsl #2]
   26ecc:	b	26fb0 <__assert_fail@plt+0x1540c>
   26ed0:	andeq	r6, r2, r8, lsl lr
   26ed4:	andeq	r6, r2, r4, ror #29
   26ed8:	andeq	r6, r2, r8, lsr pc
   26edc:	andeq	r6, r2, r4, ror pc
   26ee0:			; <UNDEFINED> instruction: 0x00026fb0
   26ee4:	ldr	r3, [fp, #20]
   26ee8:	ldr	r2, [sp, #44]	; 0x2c
   26eec:	cmp	r3, r2
   26ef0:	beq	26f10 <__assert_fail@plt+0x1536c>
   26ef4:	ldr	r2, [fp]
   26ef8:	ldr	r3, [fp, #20]
   26efc:	add	r1, r3, #1
   26f00:	str	r1, [fp, #20]
   26f04:	ldr	r1, [sp, #76]	; 0x4c
   26f08:	str	r1, [r2, r3, lsl #2]
   26f0c:	b	26e34 <__assert_fail@plt+0x15290>
   26f10:	lsl	r3, r2, #1
   26f14:	add	r3, r3, #1
   26f18:	str	r3, [sp, #44]	; 0x2c
   26f1c:	lsl	r1, r3, #2
   26f20:	ldr	r0, [fp]
   26f24:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   26f28:	cmp	r0, #0
   26f2c:	beq	27174 <__assert_fail@plt+0x155d0>
   26f30:	str	r0, [fp]
   26f34:	b	26ef4 <__assert_fail@plt+0x15350>
   26f38:	ldr	r5, [sp, #76]	; 0x4c
   26f3c:	mov	r0, r5
   26f40:	bl	11988 <strlen@plt>
   26f44:	cmp	r0, #1
   26f48:	bne	27aac <__assert_fail@plt+0x15f08>
   26f4c:	ldrb	r3, [r5]
   26f50:	asr	r1, r3, #5
   26f54:	and	r3, r3, #31
   26f58:	ldr	r2, [r4, r1, lsl #2]
   26f5c:	orr	r3, r2, r0, lsl r3
   26f60:	str	r3, [r4, r1, lsl #2]
   26f64:	mov	r3, #0
   26f68:	ldr	r2, [sp, #204]	; 0xcc
   26f6c:	str	r3, [r2]
   26f70:	b	26e34 <__assert_fail@plt+0x15290>
   26f74:	ldr	r5, [sp, #76]	; 0x4c
   26f78:	mov	r0, r5
   26f7c:	bl	11988 <strlen@plt>
   26f80:	cmp	r0, #1
   26f84:	bne	27abc <__assert_fail@plt+0x15f18>
   26f88:	ldrb	r3, [r5]
   26f8c:	asr	r1, r3, #5
   26f90:	and	r3, r3, #31
   26f94:	ldr	r2, [r4, r1, lsl #2]
   26f98:	orr	r3, r2, r0, lsl r3
   26f9c:	str	r3, [r4, r1, lsl #2]
   26fa0:	mov	r3, #0
   26fa4:	ldr	r2, [sp, #204]	; 0xcc
   26fa8:	str	r3, [r2]
   26fac:	b	26e34 <__assert_fail@plt+0x15290>
   26fb0:	ldr	r3, [sp, #24]
   26fb4:	str	r3, [sp, #4]
   26fb8:	ldr	r3, [sp, #76]	; 0x4c
   26fbc:	str	r3, [sp]
   26fc0:	add	r3, sp, #68	; 0x44
   26fc4:	mov	r2, fp
   26fc8:	mov	r1, r4
   26fcc:	ldr	r0, [r9, #64]	; 0x40
   26fd0:	bl	23e7c <__assert_fail@plt+0x122d8>
   26fd4:	ldr	r3, [sp, #204]	; 0xcc
   26fd8:	str	r0, [r3]
   26fdc:	cmp	r0, #0
   26fe0:	beq	26e34 <__assert_fail@plt+0x15290>
   26fe4:	ldr	fp, [sp, #204]	; 0xcc
   26fe8:	b	26abc <__assert_fail@plt+0x14f18>
   26fec:	ldr	fp, [sp, #204]	; 0xcc
   26ff0:	mov	r3, #7
   26ff4:	str	r3, [fp]
   26ff8:	b	26abc <__assert_fail@plt+0x14f18>
   26ffc:	ldr	fp, [sp, #204]	; 0xcc
   27000:	ldr	r3, [r9, #40]	; 0x28
   27004:	ldr	r2, [sp, #28]
   27008:	add	r3, r3, r2
   2700c:	str	r3, [r9, #40]	; 0x28
   27010:	ldr	r3, [sp, #52]	; 0x34
   27014:	cmp	r3, #0
   27018:	beq	2703c <__assert_fail@plt+0x15498>
   2701c:	ldr	r2, [sp, #32]
   27020:	sub	r3, r2, #4
   27024:	add	r1, r2, #28
   27028:	ldr	r2, [r3, #4]!
   2702c:	mvn	r2, r2
   27030:	str	r2, [r3]
   27034:	cmp	r3, r1
   27038:	bne	27028 <__assert_fail@plt+0x15484>
   2703c:	ldr	r3, [sp, #20]
   27040:	ldr	r0, [r3, #92]	; 0x5c
   27044:	cmp	r0, #1
   27048:	ble	27078 <__assert_fail@plt+0x154d4>
   2704c:	ldr	r1, [sp, #32]
   27050:	sub	r2, r1, #4
   27054:	ldr	r3, [r3, #60]	; 0x3c
   27058:	sub	r3, r3, #4
   2705c:	add	ip, r1, #28
   27060:	ldr	r1, [r2, #4]!
   27064:	ldr	lr, [r3, #4]!
   27068:	and	r1, r1, lr
   2706c:	str	r1, [r2]
   27070:	cmp	ip, r2
   27074:	bne	27060 <__assert_fail@plt+0x154bc>
   27078:	ldr	r2, [sp, #36]	; 0x24
   2707c:	ldr	r3, [r2, #20]
   27080:	cmp	r3, #0
   27084:	bne	270cc <__assert_fail@plt+0x15528>
   27088:	ldr	r3, [r2, #24]
   2708c:	cmp	r3, #0
   27090:	bne	270cc <__assert_fail@plt+0x15528>
   27094:	ldr	r3, [r2, #28]
   27098:	cmp	r3, #0
   2709c:	bne	270cc <__assert_fail@plt+0x15528>
   270a0:	ldr	r3, [r2, #32]
   270a4:	cmp	r3, #0
   270a8:	bne	270cc <__assert_fail@plt+0x15528>
   270ac:	cmp	r0, #1
   270b0:	ble	2713c <__assert_fail@plt+0x15598>
   270b4:	ldr	r3, [r2, #36]	; 0x24
   270b8:	cmp	r3, #0
   270bc:	bne	270cc <__assert_fail@plt+0x15528>
   270c0:	ldrb	r3, [r2, #16]
   270c4:	tst	r3, #1
   270c8:	beq	2713c <__assert_fail@plt+0x15598>
   270cc:	ldr	r0, [sp, #20]
   270d0:	ldrb	r3, [r0, #88]	; 0x58
   270d4:	orr	r3, r3, #2
   270d8:	strb	r3, [r0, #88]	; 0x58
   270dc:	mov	r3, #6
   270e0:	strb	r3, [sp, #132]	; 0x84
   270e4:	ldr	r3, [sp, #36]	; 0x24
   270e8:	str	r3, [sp, #128]	; 0x80
   270ec:	add	r3, sp, #128	; 0x80
   270f0:	mov	r2, #0
   270f4:	mov	r1, r2
   270f8:	bl	203e8 <__assert_fail@plt+0xe844>
   270fc:	subs	sl, r0, #0
   27100:	beq	27178 <__assert_fail@plt+0x155d4>
   27104:	ldr	r2, [sp, #32]
   27108:	ldr	r3, [r2]
   2710c:	cmp	r3, #0
   27110:	bne	27a64 <__assert_fail@plt+0x15ec0>
   27114:	mov	r3, r2
   27118:	add	r2, r2, #28
   2711c:	ldr	r1, [r3, #4]!
   27120:	cmp	r1, #0
   27124:	bne	27a64 <__assert_fail@plt+0x15ec0>
   27128:	cmp	r3, r2
   2712c:	bne	2711c <__assert_fail@plt+0x15578>
   27130:	ldr	r0, [sp, #32]
   27134:	bl	17750 <__assert_fail@plt+0x5bac>
   27138:	b	2726c <__assert_fail@plt+0x156c8>
   2713c:	ldr	r0, [sp, #36]	; 0x24
   27140:	bl	220e4 <__assert_fail@plt+0x10540>
   27144:	mov	r3, #3
   27148:	strb	r3, [sp, #132]	; 0x84
   2714c:	ldr	r3, [sp, #32]
   27150:	str	r3, [sp, #128]	; 0x80
   27154:	add	r3, sp, #128	; 0x80
   27158:	mov	r2, #0
   2715c:	mov	r1, r2
   27160:	ldr	r0, [sp, #20]
   27164:	bl	203e8 <__assert_fail@plt+0xe844>
   27168:	subs	sl, r0, #0
   2716c:	bne	2726c <__assert_fail@plt+0x156c8>
   27170:	b	27178 <__assert_fail@plt+0x155d4>
   27174:	ldr	fp, [sp, #204]	; 0xcc
   27178:	mov	r3, #12
   2717c:	str	r3, [fp]
   27180:	b	26abc <__assert_fail@plt+0x14f18>
   27184:	ldr	r2, [r8]
   27188:	mov	r3, #1
   2718c:	lsl	r3, r3, r2
   27190:	ldr	r2, [sp, #20]
   27194:	ldr	r2, [r2, #84]	; 0x54
   27198:	tst	r3, r2
   2719c:	moveq	r3, #6
   271a0:	streq	r3, [fp]
   271a4:	moveq	sl, #0
   271a8:	beq	27878 <__assert_fail@plt+0x15cd4>
   271ac:	ldr	r0, [sp, #20]
   271b0:	ldr	r2, [r0, #80]	; 0x50
   271b4:	orr	r3, r2, r3
   271b8:	str	r3, [r0, #80]	; 0x50
   271bc:	mov	r3, r8
   271c0:	mov	r2, #0
   271c4:	mov	r1, r2
   271c8:	bl	203e8 <__assert_fail@plt+0xe844>
   271cc:	subs	sl, r0, #0
   271d0:	moveq	r3, #12
   271d4:	streq	r3, [fp]
   271d8:	beq	27878 <__assert_fail@plt+0x15cd4>
   271dc:	ldr	r2, [sp, #20]
   271e0:	ldr	r3, [r2, #76]	; 0x4c
   271e4:	add	r3, r3, #1
   271e8:	str	r3, [r2, #76]	; 0x4c
   271ec:	ldrb	r3, [r2, #88]	; 0x58
   271f0:	orr	r3, r3, #2
   271f4:	strb	r3, [r2, #88]	; 0x58
   271f8:	b	2726c <__assert_fail@plt+0x156c8>
   271fc:	ldr	r3, [sp, #24]
   27200:	tst	r3, #16777216	; 0x1000000
   27204:	movne	r3, #13
   27208:	strne	r3, [fp]
   2720c:	movne	sl, #0
   27210:	bne	27878 <__assert_fail@plt+0x15cd4>
   27214:	ldr	r3, [sp, #24]
   27218:	tst	r3, #32
   2721c:	movne	r3, #13
   27220:	strne	r3, [fp]
   27224:	movne	sl, #0
   27228:	bne	27878 <__assert_fail@plt+0x15cd4>
   2722c:	ldr	r3, [sp, #24]
   27230:	tst	r3, #16
   27234:	bne	27298 <__assert_fail@plt+0x156f4>
   27238:	cmp	r2, #9
   2723c:	beq	272d4 <__assert_fail@plt+0x15730>
   27240:	mov	r3, #1
   27244:	strb	r3, [r8, #4]
   27248:	mov	r3, r8
   2724c:	mov	r2, #0
   27250:	mov	r1, r2
   27254:	ldr	r0, [sp, #20]
   27258:	bl	203e8 <__assert_fail@plt+0xe844>
   2725c:	subs	sl, r0, #0
   27260:	moveq	r3, #12
   27264:	streq	r3, [fp]
   27268:	beq	27878 <__assert_fail@plt+0x15cd4>
   2726c:	ldr	r2, [sp, #24]
   27270:	mov	r1, r9
   27274:	mov	r0, r8
   27278:	bl	21fec <__assert_fail@plt+0x10448>
   2727c:	movw	r3, #65076	; 0xfe34
   27280:	movt	r3, #1
   27284:	str	r3, [sp, #32]
   27288:	movw	r3, #8560	; 0x2170
   2728c:	movt	r3, #2
   27290:	str	r3, [sp, #36]	; 0x24
   27294:	b	27910 <__assert_fail@plt+0x15d6c>
   27298:	mov	r5, r3
   2729c:	mov	r2, r3
   272a0:	mov	r1, r9
   272a4:	mov	r0, r8
   272a8:	bl	21fec <__assert_fail@plt+0x10448>
   272ac:	str	fp, [sp, #4]
   272b0:	ldr	r3, [sp, #200]	; 0xc8
   272b4:	str	r3, [sp]
   272b8:	mov	r3, r5
   272bc:	mov	r2, r8
   272c0:	mov	r1, r4
   272c4:	mov	r0, r9
   272c8:	bl	266f0 <__assert_fail@plt+0x14b4c>
   272cc:	mov	sl, r0
   272d0:	b	27878 <__assert_fail@plt+0x15cd4>
   272d4:	ldr	r3, [sp, #24]
   272d8:	tst	r3, #131072	; 0x20000
   272dc:	moveq	r3, #16
   272e0:	streq	r3, [fp]
   272e4:	moveq	sl, #0
   272e8:	bne	27240 <__assert_fail@plt+0x1569c>
   272ec:	b	27878 <__assert_fail@plt+0x15cd4>
   272f0:	ldr	r3, [r8]
   272f4:	movw	r2, #783	; 0x30f
   272f8:	tst	r2, r3
   272fc:	beq	27310 <__assert_fail@plt+0x1576c>
   27300:	ldr	r3, [sp, #20]
   27304:	ldrb	r3, [r3, #88]	; 0x58
   27308:	tst	r3, #16
   2730c:	beq	273c4 <__assert_fail@plt+0x15820>
   27310:	ldr	r3, [r8]
   27314:	sub	r2, r3, #256	; 0x100
   27318:	bics	r2, r2, #256	; 0x100
   2731c:	bne	274d4 <__assert_fail@plt+0x15930>
   27320:	cmp	r3, #256	; 0x100
   27324:	beq	274a8 <__assert_fail@plt+0x15904>
   27328:	mov	r3, #5
   2732c:	str	r3, [r8]
   27330:	mov	r3, r8
   27334:	mov	r2, #0
   27338:	mov	r1, r2
   2733c:	ldr	r0, [sp, #20]
   27340:	bl	203e8 <__assert_fail@plt+0xe844>
   27344:	mov	r5, r0
   27348:	mov	r3, #10
   2734c:	str	r3, [r8]
   27350:	mov	r3, r8
   27354:	mov	r2, #0
   27358:	mov	r1, r2
   2735c:	ldr	r6, [sp, #20]
   27360:	mov	r0, r6
   27364:	bl	203e8 <__assert_fail@plt+0xe844>
   27368:	mov	r4, r0
   2736c:	mov	r3, #10
   27370:	mov	r2, r0
   27374:	mov	r1, r5
   27378:	mov	r0, r6
   2737c:	bl	20584 <__assert_fail@plt+0xe9e0>
   27380:	clz	r3, r4
   27384:	lsr	r3, r3, #5
   27388:	cmp	r5, #0
   2738c:	moveq	r3, #1
   27390:	mov	sl, r0
   27394:	cmp	r0, #0
   27398:	moveq	r3, #1
   2739c:	cmp	r3, #0
   273a0:	movne	r3, #12
   273a4:	strne	r3, [fp]
   273a8:	movne	sl, #0
   273ac:	bne	27878 <__assert_fail@plt+0x15cd4>
   273b0:	ldr	r2, [sp, #24]
   273b4:	mov	r1, r9
   273b8:	mov	r0, r8
   273bc:	bl	21fec <__assert_fail@plt+0x10448>
   273c0:	b	27878 <__assert_fail@plt+0x15cd4>
   273c4:	ldr	r2, [sp, #20]
   273c8:	orr	r3, r3, #16
   273cc:	strb	r3, [r2, #88]	; 0x58
   273d0:	tst	r3, #8
   273d4:	bne	27428 <__assert_fail@plt+0x15884>
   273d8:	mov	r3, #0
   273dc:	str	r3, [r2, #96]	; 0x60
   273e0:	movt	r3, #1023	; 0x3ff
   273e4:	str	r3, [r2, #100]	; 0x64
   273e8:	mvn	r3, #2013265921	; 0x78000001
   273ec:	str	r3, [r2, #104]	; 0x68
   273f0:	mvn	r3, #-134217727	; 0xf8000001
   273f4:	str	r3, [r2, #108]	; 0x6c
   273f8:	ldrb	r3, [r2, #88]	; 0x58
   273fc:	tst	r3, #4
   27400:	moveq	r5, #128	; 0x80
   27404:	moveq	r3, #4
   27408:	beq	27430 <__assert_fail@plt+0x1588c>
   2740c:	ldr	r1, [sp, #20]
   27410:	mov	r2, #0
   27414:	str	r2, [r1, #112]	; 0x70
   27418:	str	r2, [r1, #116]	; 0x74
   2741c:	str	r2, [r1, #120]	; 0x78
   27420:	str	r2, [r1, #124]	; 0x7c
   27424:	b	27310 <__assert_fail@plt+0x1576c>
   27428:	mov	r5, #0
   2742c:	mov	r3, r5
   27430:	add	r3, r3, #24
   27434:	ldr	r2, [sp, #20]
   27438:	add	r4, r2, r3, lsl #2
   2743c:	add	r6, r2, #128	; 0x80
   27440:	bl	11964 <__ctype_b_loc@plt>
   27444:	mov	ip, #1
   27448:	b	2749c <__assert_fail@plt+0x158f8>
   2744c:	ldr	r3, [r4]
   27450:	orr	r3, r3, ip, lsl r1
   27454:	str	r3, [r4]
   27458:	add	r1, r1, #1
   2745c:	add	r2, r2, #1
   27460:	cmp	r1, #32
   27464:	beq	2748c <__assert_fail@plt+0x158e8>
   27468:	ldr	lr, [r0]
   2746c:	lsl	r3, r2, #1
   27470:	ldrh	r3, [lr, r3]
   27474:	ubfx	r3, r3, #3, #1
   27478:	cmp	r2, #95	; 0x5f
   2747c:	orreq	r3, r3, #1
   27480:	cmp	r3, #0
   27484:	bne	2744c <__assert_fail@plt+0x158a8>
   27488:	b	27458 <__assert_fail@plt+0x158b4>
   2748c:	add	r5, r5, #32
   27490:	add	r4, r4, #4
   27494:	cmp	r6, r4
   27498:	beq	27310 <__assert_fail@plt+0x1576c>
   2749c:	mov	r2, r5
   274a0:	mov	r1, #0
   274a4:	b	27468 <__assert_fail@plt+0x158c4>
   274a8:	mov	r3, #6
   274ac:	str	r3, [r8]
   274b0:	mov	r3, r8
   274b4:	mov	r2, #0
   274b8:	mov	r1, r2
   274bc:	ldr	r0, [sp, #20]
   274c0:	bl	203e8 <__assert_fail@plt+0xe844>
   274c4:	mov	r5, r0
   274c8:	mov	r3, #9
   274cc:	str	r3, [r8]
   274d0:	b	27350 <__assert_fail@plt+0x157ac>
   274d4:	mov	r3, r8
   274d8:	mov	r2, #0
   274dc:	mov	r1, r2
   274e0:	ldr	r0, [sp, #20]
   274e4:	bl	203e8 <__assert_fail@plt+0xe844>
   274e8:	subs	sl, r0, #0
   274ec:	moveq	r3, #12
   274f0:	streq	r3, [fp]
   274f4:	bne	273b0 <__assert_fail@plt+0x1580c>
   274f8:	b	27878 <__assert_fail@plt+0x15cd4>
   274fc:	mov	r3, r8
   27500:	mov	r2, #0
   27504:	mov	r1, r2
   27508:	ldr	r0, [sp, #20]
   2750c:	bl	203e8 <__assert_fail@plt+0xe844>
   27510:	subs	sl, r0, #0
   27514:	moveq	r3, #12
   27518:	streq	r3, [fp]
   2751c:	beq	27878 <__assert_fail@plt+0x15cd4>
   27520:	ldr	r2, [sp, #20]
   27524:	ldr	r3, [r2, #92]	; 0x5c
   27528:	cmp	r3, #1
   2752c:	ble	2726c <__assert_fail@plt+0x156c8>
   27530:	ldrb	r3, [r2, #88]	; 0x58
   27534:	orr	r3, r3, #2
   27538:	strb	r3, [r2, #88]	; 0x58
   2753c:	b	2726c <__assert_fail@plt+0x156c8>
   27540:	str	fp, [sp, #4]
   27544:	cmp	r2, #33	; 0x21
   27548:	movne	r2, #0
   2754c:	moveq	r2, #1
   27550:	str	r2, [sp]
   27554:	movw	r3, #9804	; 0x264c
   27558:	movt	r3, #3
   2755c:	movw	r2, #9732	; 0x2604
   27560:	movt	r2, #3
   27564:	ldr	r1, [r0, #64]	; 0x40
   27568:	ldr	r0, [sp, #20]
   2756c:	bl	248f8 <__assert_fail@plt+0x12d54>
   27570:	ldr	r3, [fp]
   27574:	mov	sl, r0
   27578:	clz	r0, r0
   2757c:	lsr	r0, r0, #5
   27580:	cmp	r3, #0
   27584:	moveq	r0, #0
   27588:	cmp	r0, #0
   2758c:	beq	2726c <__assert_fail@plt+0x156c8>
   27590:	mov	sl, #0
   27594:	b	27878 <__assert_fail@plt+0x15cd4>
   27598:	str	fp, [sp, #4]
   2759c:	cmp	r2, #35	; 0x23
   275a0:	movne	r2, #0
   275a4:	moveq	r2, #1
   275a8:	str	r2, [sp]
   275ac:	movw	r3, #8476	; 0x211c
   275b0:	movt	r3, #3
   275b4:	movw	r2, #9748	; 0x2614
   275b8:	movt	r2, #3
   275bc:	ldr	r1, [r0, #64]	; 0x40
   275c0:	ldr	r0, [sp, #20]
   275c4:	bl	248f8 <__assert_fail@plt+0x12d54>
   275c8:	ldr	r3, [fp]
   275cc:	mov	sl, r0
   275d0:	clz	r0, r0
   275d4:	lsr	r0, r0, #5
   275d8:	cmp	r3, #0
   275dc:	moveq	r0, #0
   275e0:	cmp	r0, #0
   275e4:	beq	2726c <__assert_fail@plt+0x156c8>
   275e8:	mov	sl, #0
   275ec:	b	27878 <__assert_fail@plt+0x15cd4>
   275f0:	mov	r3, #5
   275f4:	str	r3, [fp]
   275f8:	mov	sl, #0
   275fc:	b	27878 <__assert_fail@plt+0x15cd4>
   27600:	ldr	r2, [sp, #24]
   27604:	mov	r1, r8
   27608:	mov	r0, r9
   2760c:	bl	22014 <__assert_fail@plt+0x10470>
   27610:	mov	r4, r0
   27614:	cmn	r0, #1
   27618:	beq	27660 <__assert_fail@plt+0x15abc>
   2761c:	cmn	r0, #2
   27620:	beq	27638 <__assert_fail@plt+0x15a94>
   27624:	ldrb	r3, [r8, #4]
   27628:	cmp	r3, #24
   2762c:	beq	27768 <__assert_fail@plt+0x15bc4>
   27630:	cmp	r3, #1
   27634:	beq	2767c <__assert_fail@plt+0x15ad8>
   27638:	ldr	r3, [sp, #24]
   2763c:	tst	r3, #2097152	; 0x200000
   27640:	bne	27694 <__assert_fail@plt+0x15af0>
   27644:	ldrb	r3, [r8, #4]
   27648:	cmp	r3, #2
   2764c:	bne	27758 <__assert_fail@plt+0x15bb4>
   27650:	mov	r3, #9
   27654:	str	r3, [fp]
   27658:	mov	r6, #0
   2765c:	b	27814 <__assert_fail@plt+0x15c70>
   27660:	ldrb	r3, [r8, #4]
   27664:	cmp	r3, #1
   27668:	bne	276b0 <__assert_fail@plt+0x15b0c>
   2766c:	ldrb	r3, [r8]
   27670:	cmp	r3, #44	; 0x2c
   27674:	moveq	r4, #0
   27678:	bne	276b0 <__assert_fail@plt+0x15b0c>
   2767c:	ldrb	r3, [r8]
   27680:	cmp	r3, #44	; 0x2c
   27684:	beq	276c0 <__assert_fail@plt+0x15b1c>
   27688:	ldr	r3, [sp, #24]
   2768c:	tst	r3, #2097152	; 0x200000
   27690:	beq	27758 <__assert_fail@plt+0x15bb4>
   27694:	str	r6, [r9, #40]	; 0x28
   27698:	ldrd	r2, [sp, #128]	; 0x80
   2769c:	strd	r2, [r8]
   276a0:	mov	r3, #1
   276a4:	strb	r3, [r8, #4]
   276a8:	mov	r6, sl
   276ac:	b	27814 <__assert_fail@plt+0x15c70>
   276b0:	mov	r3, #10
   276b4:	str	r3, [fp]
   276b8:	mov	r6, #0
   276bc:	b	27814 <__assert_fail@plt+0x15c70>
   276c0:	ldr	r2, [sp, #24]
   276c4:	mov	r1, r8
   276c8:	mov	r0, r9
   276cc:	bl	22014 <__assert_fail@plt+0x10470>
   276d0:	mov	r7, r0
   276d4:	cmn	r4, #2
   276d8:	cmnne	r0, #2
   276dc:	beq	27638 <__assert_fail@plt+0x15a94>
   276e0:	cmn	r0, #1
   276e4:	cmpne	r4, r0
   276e8:	bgt	27770 <__assert_fail@plt+0x15bcc>
   276ec:	ldrb	r3, [r8, #4]
   276f0:	cmp	r3, #24
   276f4:	bne	27770 <__assert_fail@plt+0x15bcc>
   276f8:	cmn	r7, #1
   276fc:	beq	27780 <__assert_fail@plt+0x15bdc>
   27700:	cmp	r7, #32768	; 0x8000
   27704:	movlt	r3, #0
   27708:	movge	r3, #1
   2770c:	cmp	r3, #0
   27710:	movne	r3, #15
   27714:	strne	r3, [fp]
   27718:	movne	r6, #0
   2771c:	bne	27814 <__assert_fail@plt+0x15c70>
   27720:	ldr	r2, [sp, #24]
   27724:	mov	r1, r9
   27728:	mov	r0, r8
   2772c:	bl	21fec <__assert_fail@plt+0x10448>
   27730:	cmp	sl, #0
   27734:	beq	278d0 <__assert_fail@plt+0x15d2c>
   27738:	orrs	r3, r4, r7
   2773c:	bne	27790 <__assert_fail@plt+0x15bec>
   27740:	mov	r2, #0
   27744:	ldr	r1, [sp, #36]	; 0x24
   27748:	mov	r0, sl
   2774c:	bl	1f7dc <__assert_fail@plt+0xdc38>
   27750:	mov	r6, #0
   27754:	b	27814 <__assert_fail@plt+0x15c70>
   27758:	mov	r3, #10
   2775c:	str	r3, [fp]
   27760:	mov	r6, #0
   27764:	b	27814 <__assert_fail@plt+0x15c70>
   27768:	mov	r7, r0
   2776c:	b	276ec <__assert_fail@plt+0x15b48>
   27770:	mov	r3, #10
   27774:	str	r3, [fp]
   27778:	mov	r6, #0
   2777c:	b	27814 <__assert_fail@plt+0x15c70>
   27780:	cmp	r4, #32768	; 0x8000
   27784:	movlt	r3, #0
   27788:	movge	r3, #1
   2778c:	b	2770c <__assert_fail@plt+0x15b68>
   27790:	cmp	r4, #0
   27794:	ble	278ac <__assert_fail@plt+0x15d08>
   27798:	cmp	r4, #1
   2779c:	ble	27898 <__assert_fail@plt+0x15cf4>
   277a0:	str	sl, [sp, #28]
   277a4:	mov	r5, sl
   277a8:	mov	r6, #2
   277ac:	ldr	r1, [sp, #20]
   277b0:	mov	r0, r5
   277b4:	bl	204b8 <__assert_fail@plt+0xe914>
   277b8:	mov	r5, r0
   277bc:	mov	r3, #16
   277c0:	mov	r2, r0
   277c4:	ldr	r1, [sp, #28]
   277c8:	ldr	r0, [sp, #20]
   277cc:	bl	20584 <__assert_fail@plt+0xe9e0>
   277d0:	str	r0, [sp, #28]
   277d4:	cmp	r0, #0
   277d8:	cmpne	r5, #0
   277dc:	beq	27808 <__assert_fail@plt+0x15c64>
   277e0:	add	r6, r6, #1
   277e4:	cmp	r4, r6
   277e8:	bge	277ac <__assert_fail@plt+0x15c08>
   277ec:	cmp	r4, r7
   277f0:	beq	27b1c <__assert_fail@plt+0x15f78>
   277f4:	ldr	r1, [sp, #20]
   277f8:	mov	r0, r5
   277fc:	bl	204b8 <__assert_fail@plt+0xe914>
   27800:	subs	r5, r0, #0
   27804:	bne	27994 <__assert_fail@plt+0x15df0>
   27808:	mov	r3, #12
   2780c:	str	r3, [fp]
   27810:	mov	r6, #0
   27814:	ldr	r2, [fp]
   27818:	clz	r3, r6
   2781c:	lsr	r3, r3, #5
   27820:	cmp	r2, #0
   27824:	moveq	r3, #0
   27828:	cmp	r3, #0
   2782c:	bne	278e8 <__assert_fail@plt+0x15d44>
   27830:	ldr	r3, [sp, #24]
   27834:	tst	r3, #16777216	; 0x1000000
   27838:	beq	2790c <__assert_fail@plt+0x15d68>
   2783c:	ldrb	r3, [r8, #4]
   27840:	mov	sl, r6
   27844:	cmp	r3, #23
   27848:	cmpne	r3, #11
   2784c:	bne	27910 <__assert_fail@plt+0x15d6c>
   27850:	cmp	r6, #0
   27854:	beq	2786c <__assert_fail@plt+0x15cc8>
   27858:	mov	r2, #0
   2785c:	movw	r1, #8560	; 0x2170
   27860:	movt	r1, #2
   27864:	mov	r0, r6
   27868:	bl	1f7dc <__assert_fail@plt+0xdc38>
   2786c:	mov	r3, #13
   27870:	str	r3, [fp]
   27874:	mov	sl, #0
   27878:	mov	r0, sl
   2787c:	add	sp, sp, #164	; 0xa4
   27880:	ldrd	r4, [sp]
   27884:	ldrd	r6, [sp, #8]
   27888:	ldrd	r8, [sp, #16]
   2788c:	ldrd	sl, [sp, #24]
   27890:	add	sp, sp, #32
   27894:	pop	{pc}		; (ldr pc, [sp], #4)
   27898:	cmp	r4, r7
   2789c:	beq	278d8 <__assert_fail@plt+0x15d34>
   278a0:	str	sl, [sp, #28]
   278a4:	mov	r5, sl
   278a8:	b	277f4 <__assert_fail@plt+0x15c50>
   278ac:	mov	r5, sl
   278b0:	mov	r3, #0
   278b4:	str	r3, [sp, #28]
   278b8:	b	27994 <__assert_fail@plt+0x15df0>
   278bc:	ldr	r2, [r5, #20]
   278c0:	ldr	r1, [sp, #32]
   278c4:	mov	r0, r5
   278c8:	bl	1f7dc <__assert_fail@plt+0xdc38>
   278cc:	b	279a0 <__assert_fail@plt+0x15dfc>
   278d0:	mov	r6, sl
   278d4:	b	27814 <__assert_fail@plt+0x15c70>
   278d8:	mov	r6, sl
   278dc:	b	27814 <__assert_fail@plt+0x15c70>
   278e0:	mov	r6, sl
   278e4:	b	27814 <__assert_fail@plt+0x15c70>
   278e8:	cmp	sl, #0
   278ec:	beq	27878 <__assert_fail@plt+0x15cd4>
   278f0:	mov	r2, #0
   278f4:	movw	r1, #8560	; 0x2170
   278f8:	movt	r1, #2
   278fc:	mov	r0, sl
   27900:	bl	1f7dc <__assert_fail@plt+0xdc38>
   27904:	mov	sl, #0
   27908:	b	27878 <__assert_fail@plt+0x15cd4>
   2790c:	mov	sl, r6
   27910:	ldrb	r5, [r8, #4]
   27914:	cmp	r5, #18
   27918:	movne	r4, #0
   2791c:	moveq	r4, #1
   27920:	cmp	r5, #11
   27924:	cmpne	r5, #23
   27928:	moveq	r3, #1
   2792c:	movne	r3, #0
   27930:	sub	r2, r5, #18
   27934:	uxtb	r2, r2
   27938:	cmp	r2, #1
   2793c:	orrls	r3, r3, #1
   27940:	cmp	r3, #0
   27944:	beq	27878 <__assert_fail@plt+0x15cd4>
   27948:	ldr	r6, [r9, #40]	; 0x28
   2794c:	ldrd	r2, [r8]
   27950:	strd	r2, [sp, #128]	; 0x80
   27954:	cmp	r5, #23
   27958:	beq	27600 <__assert_fail@plt+0x15a5c>
   2795c:	cmp	r5, #19
   27960:	moveq	r7, #1
   27964:	mvnne	r7, #0
   27968:	ldr	r2, [sp, #24]
   2796c:	mov	r1, r9
   27970:	mov	r0, r8
   27974:	bl	21fec <__assert_fail@plt+0x10448>
   27978:	cmp	sl, #0
   2797c:	beq	278e0 <__assert_fail@plt+0x15d3c>
   27980:	cmp	r5, #18
   27984:	beq	27898 <__assert_fail@plt+0x15cf4>
   27988:	mov	r5, sl
   2798c:	mov	r3, #0
   27990:	str	r3, [sp, #28]
   27994:	ldrb	r3, [r5, #24]
   27998:	cmp	r3, #17
   2799c:	beq	278bc <__assert_fail@plt+0x15d18>
   279a0:	cmn	r7, #1
   279a4:	moveq	r3, #11
   279a8:	movne	r3, #10
   279ac:	mov	r2, #0
   279b0:	mov	r1, r5
   279b4:	ldr	r0, [sp, #20]
   279b8:	bl	20584 <__assert_fail@plt+0xe9e0>
   279bc:	subs	r6, r0, #0
   279c0:	beq	27808 <__assert_fail@plt+0x15c64>
   279c4:	add	r4, r4, #2
   279c8:	cmp	r7, r4
   279cc:	blt	27a2c <__assert_fail@plt+0x15e88>
   279d0:	ldr	r1, [sp, #20]
   279d4:	mov	r0, r5
   279d8:	bl	204b8 <__assert_fail@plt+0xe914>
   279dc:	mov	r5, r0
   279e0:	mov	r3, #16
   279e4:	mov	r2, r0
   279e8:	mov	r1, r6
   279ec:	ldr	r6, [sp, #20]
   279f0:	mov	r0, r6
   279f4:	bl	20584 <__assert_fail@plt+0xe9e0>
   279f8:	mov	r1, r0
   279fc:	cmp	r0, #0
   27a00:	cmpne	r5, #0
   27a04:	beq	27808 <__assert_fail@plt+0x15c64>
   27a08:	mov	r3, #10
   27a0c:	mov	r2, #0
   27a10:	mov	r0, r6
   27a14:	bl	20584 <__assert_fail@plt+0xe9e0>
   27a18:	subs	r6, r0, #0
   27a1c:	beq	27808 <__assert_fail@plt+0x15c64>
   27a20:	add	r4, r4, #1
   27a24:	cmp	r7, r4
   27a28:	bge	279d0 <__assert_fail@plt+0x15e2c>
   27a2c:	ldr	r3, [sp, #28]
   27a30:	cmp	r3, #0
   27a34:	beq	27830 <__assert_fail@plt+0x15c8c>
   27a38:	mov	r3, #16
   27a3c:	mov	r2, r6
   27a40:	ldr	r1, [sp, #28]
   27a44:	ldr	r0, [sp, #20]
   27a48:	bl	20584 <__assert_fail@plt+0xe9e0>
   27a4c:	mov	r6, r0
   27a50:	b	27814 <__assert_fail@plt+0x15c70>
   27a54:	mov	sl, #0
   27a58:	b	27878 <__assert_fail@plt+0x15cd4>
   27a5c:	mov	sl, #0
   27a60:	b	27878 <__assert_fail@plt+0x15cd4>
   27a64:	mov	r3, #3
   27a68:	strb	r3, [sp, #132]	; 0x84
   27a6c:	ldr	r3, [sp, #32]
   27a70:	str	r3, [sp, #128]	; 0x80
   27a74:	add	r3, sp, #128	; 0x80
   27a78:	mov	r2, #0
   27a7c:	mov	r1, r2
   27a80:	ldr	r0, [sp, #20]
   27a84:	bl	203e8 <__assert_fail@plt+0xe844>
   27a88:	subs	r1, r0, #0
   27a8c:	beq	27178 <__assert_fail@plt+0x155d4>
   27a90:	mov	r3, #10
   27a94:	mov	r2, sl
   27a98:	ldr	r0, [sp, #20]
   27a9c:	bl	20584 <__assert_fail@plt+0xe9e0>
   27aa0:	subs	sl, r0, #0
   27aa4:	bne	2726c <__assert_fail@plt+0x156c8>
   27aa8:	b	27178 <__assert_fail@plt+0x155d4>
   27aac:	ldr	fp, [sp, #204]	; 0xcc
   27ab0:	mov	r3, #3
   27ab4:	str	r3, [fp]
   27ab8:	b	26abc <__assert_fail@plt+0x14f18>
   27abc:	ldr	fp, [sp, #204]	; 0xcc
   27ac0:	mov	r3, #3
   27ac4:	str	r3, [fp]
   27ac8:	b	26abc <__assert_fail@plt+0x14f18>
   27acc:	mov	r3, #0
   27ad0:	ldr	r2, [sp, #204]	; 0xcc
   27ad4:	str	r3, [r2]
   27ad8:	b	26e34 <__assert_fail@plt+0x15290>
   27adc:	ldr	fp, [sp, #204]	; 0xcc
   27ae0:	mov	r3, #11
   27ae4:	b	27af0 <__assert_fail@plt+0x15f4c>
   27ae8:	ldr	fp, [sp, #204]	; 0xcc
   27aec:	mov	r3, #11
   27af0:	str	r3, [fp]
   27af4:	b	26abc <__assert_fail@plt+0x14f18>
   27af8:	ldr	fp, [sp, #204]	; 0xcc
   27afc:	mov	r3, #3
   27b00:	b	27af0 <__assert_fail@plt+0x15f4c>
   27b04:	ldr	fp, [sp, #204]	; 0xcc
   27b08:	mov	r3, #3
   27b0c:	b	27af0 <__assert_fail@plt+0x15f4c>
   27b10:	ldr	fp, [sp, #204]	; 0xcc
   27b14:	mov	r3, #11
   27b18:	b	27af0 <__assert_fail@plt+0x15f4c>
   27b1c:	ldr	r6, [sp, #28]
   27b20:	b	27830 <__assert_fail@plt+0x15c8c>
   27b24:	ldr	r3, [sp, #80]	; 0x50
   27b28:	cmp	r3, #3
   27b2c:	cmpne	r3, #0
   27b30:	bne	26c28 <__assert_fail@plt+0x15084>
   27b34:	b	26c2c <__assert_fail@plt+0x15088>
   27b38:	ldr	r0, [sp, #84]	; 0x54
   27b3c:	bl	11988 <strlen@plt>
   27b40:	cmp	r0, #1
   27b44:	bls	26cc0 <__assert_fail@plt+0x1511c>
   27b48:	ldr	fp, [sp, #204]	; 0xcc
   27b4c:	mov	r3, #3
   27b50:	b	27af0 <__assert_fail@plt+0x15f4c>
   27b54:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27b58:	strd	r6, [sp, #8]
   27b5c:	strd	r8, [sp, #16]
   27b60:	strd	sl, [sp, #24]
   27b64:	str	lr, [sp, #32]
   27b68:	sub	sp, sp, #20
   27b6c:	mov	fp, r0
   27b70:	mov	r9, r1
   27b74:	mov	r8, r2
   27b78:	mov	sl, r3
   27b7c:	ldr	r7, [sp, #56]	; 0x38
   27b80:	ldr	r6, [sp, #60]	; 0x3c
   27b84:	ldr	ip, [r1]
   27b88:	str	ip, [sp, #12]
   27b8c:	str	r6, [sp, #4]
   27b90:	str	r7, [sp]
   27b94:	bl	266f0 <__assert_fail@plt+0x14b4c>
   27b98:	ldr	r3, [r6]
   27b9c:	mov	r4, r0
   27ba0:	clz	r0, r0
   27ba4:	lsr	r0, r0, #5
   27ba8:	cmp	r3, #0
   27bac:	moveq	r0, #0
   27bb0:	cmp	r0, #0
   27bb4:	beq	27c04 <__assert_fail@plt+0x16060>
   27bb8:	mov	r4, #0
   27bbc:	b	27cb8 <__assert_fail@plt+0x16114>
   27bc0:	cmp	r4, #0
   27bc4:	beq	27cb8 <__assert_fail@plt+0x16114>
   27bc8:	mov	r2, #0
   27bcc:	movw	r1, #8560	; 0x2170
   27bd0:	movt	r1, #2
   27bd4:	mov	r0, r4
   27bd8:	bl	1f7dc <__assert_fail@plt+0xdc38>
   27bdc:	mov	r4, #0
   27be0:	b	27cb8 <__assert_fail@plt+0x16114>
   27be4:	mov	r3, #16
   27be8:	mov	r2, r5
   27bec:	mov	r1, r4
   27bf0:	ldr	r0, [sp, #12]
   27bf4:	bl	20584 <__assert_fail@plt+0xe9e0>
   27bf8:	cmp	r0, #0
   27bfc:	beq	27c80 <__assert_fail@plt+0x160dc>
   27c00:	mov	r4, r0
   27c04:	ldrb	r2, [r8, #4]
   27c08:	and	r3, r2, #247	; 0xf7
   27c0c:	cmp	r3, #2
   27c10:	beq	27cb8 <__assert_fail@plt+0x16114>
   27c14:	clz	r3, r7
   27c18:	lsr	r3, r3, #5
   27c1c:	cmp	r2, #9
   27c20:	orrne	r3, r3, #1
   27c24:	cmp	r3, #0
   27c28:	beq	27cb8 <__assert_fail@plt+0x16114>
   27c2c:	str	r6, [sp, #4]
   27c30:	str	r7, [sp]
   27c34:	mov	r3, sl
   27c38:	mov	r2, r8
   27c3c:	mov	r1, r9
   27c40:	mov	r0, fp
   27c44:	bl	266f0 <__assert_fail@plt+0x14b4c>
   27c48:	ldr	r3, [r6]
   27c4c:	mov	r5, r0
   27c50:	clz	r0, r0
   27c54:	lsr	r0, r0, #5
   27c58:	cmp	r3, #0
   27c5c:	moveq	r0, #0
   27c60:	cmp	r0, #0
   27c64:	bne	27bc0 <__assert_fail@plt+0x1601c>
   27c68:	cmp	r4, #0
   27c6c:	cmpne	r5, #0
   27c70:	bne	27be4 <__assert_fail@plt+0x16040>
   27c74:	cmp	r4, #0
   27c78:	moveq	r4, r5
   27c7c:	b	27c04 <__assert_fail@plt+0x16060>
   27c80:	mov	fp, r0
   27c84:	movw	r7, #8560	; 0x2170
   27c88:	movt	r7, #2
   27c8c:	mov	r2, #0
   27c90:	mov	r1, r7
   27c94:	mov	r0, r5
   27c98:	bl	1f7dc <__assert_fail@plt+0xdc38>
   27c9c:	mov	r2, #0
   27ca0:	mov	r1, r7
   27ca4:	mov	r0, r4
   27ca8:	bl	1f7dc <__assert_fail@plt+0xdc38>
   27cac:	mov	r3, #12
   27cb0:	str	r3, [r6]
   27cb4:	mov	r4, fp
   27cb8:	mov	r0, r4
   27cbc:	add	sp, sp, #20
   27cc0:	ldrd	r4, [sp]
   27cc4:	ldrd	r6, [sp, #8]
   27cc8:	ldrd	r8, [sp, #16]
   27ccc:	ldrd	sl, [sp, #24]
   27cd0:	add	sp, sp, #32
   27cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   27cd8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27cdc:	strd	r6, [sp, #8]
   27ce0:	strd	r8, [sp, #16]
   27ce4:	strd	sl, [sp, #24]
   27ce8:	str	lr, [sp, #32]
   27cec:	sub	sp, sp, #28
   27cf0:	str	r0, [sp, #12]
   27cf4:	str	r1, [sp, #16]
   27cf8:	mov	r4, r2
   27cfc:	mov	r9, r3
   27d00:	str	r3, [sp, #20]
   27d04:	ldr	r8, [sp, #64]	; 0x40
   27d08:	ldr	r7, [sp, #68]	; 0x44
   27d0c:	ldr	r5, [r1]
   27d10:	ldr	fp, [r5, #84]	; 0x54
   27d14:	str	r7, [sp, #4]
   27d18:	str	r8, [sp]
   27d1c:	bl	27b54 <__assert_fail@plt+0x15fb0>
   27d20:	ldr	r3, [r7]
   27d24:	mov	r6, r0
   27d28:	clz	r0, r0
   27d2c:	lsr	r0, r0, #5
   27d30:	cmp	r3, #0
   27d34:	moveq	r0, #0
   27d38:	cmp	r0, #0
   27d3c:	bne	27e50 <__assert_fail@plt+0x162ac>
   27d40:	orr	r9, r9, #8388608	; 0x800000
   27d44:	b	27d88 <__assert_fail@plt+0x161e4>
   27d48:	cmp	r6, #0
   27d4c:	beq	27e30 <__assert_fail@plt+0x1628c>
   27d50:	mov	r2, #0
   27d54:	movw	r1, #8560	; 0x2170
   27d58:	movt	r1, #2
   27d5c:	mov	r0, r6
   27d60:	bl	1f7dc <__assert_fail@plt+0xdc38>
   27d64:	mov	r6, #0
   27d68:	b	27e30 <__assert_fail@plt+0x1628c>
   27d6c:	mov	r2, #0
   27d70:	mov	r3, #10
   27d74:	mov	r1, r6
   27d78:	mov	r0, r5
   27d7c:	bl	20584 <__assert_fail@plt+0xe9e0>
   27d80:	subs	r6, r0, #0
   27d84:	beq	27e28 <__assert_fail@plt+0x16284>
   27d88:	ldrb	r3, [r4, #4]
   27d8c:	cmp	r3, #10
   27d90:	bne	27e30 <__assert_fail@plt+0x1628c>
   27d94:	mov	r2, r9
   27d98:	ldr	r1, [sp, #12]
   27d9c:	mov	r0, r4
   27da0:	bl	21fec <__assert_fail@plt+0x10448>
   27da4:	ldrb	r2, [r4, #4]
   27da8:	and	r3, r2, #247	; 0xf7
   27dac:	cmp	r3, #2
   27db0:	beq	27d6c <__assert_fail@plt+0x161c8>
   27db4:	clz	r3, r8
   27db8:	lsr	r3, r3, #5
   27dbc:	cmp	r2, #9
   27dc0:	orrne	r3, r3, #1
   27dc4:	cmp	r3, #0
   27dc8:	beq	27e20 <__assert_fail@plt+0x1627c>
   27dcc:	ldr	sl, [r5, #84]	; 0x54
   27dd0:	str	fp, [r5, #84]	; 0x54
   27dd4:	str	r7, [sp, #4]
   27dd8:	str	r8, [sp]
   27ddc:	ldr	r3, [sp, #20]
   27de0:	mov	r2, r4
   27de4:	ldr	r1, [sp, #16]
   27de8:	ldr	r0, [sp, #12]
   27dec:	bl	27b54 <__assert_fail@plt+0x15fb0>
   27df0:	ldr	r3, [r7]
   27df4:	mov	r2, r0
   27df8:	clz	r0, r0
   27dfc:	lsr	r0, r0, #5
   27e00:	cmp	r3, #0
   27e04:	moveq	r0, #0
   27e08:	cmp	r0, #0
   27e0c:	bne	27d48 <__assert_fail@plt+0x161a4>
   27e10:	ldr	r3, [r5, #84]	; 0x54
   27e14:	orr	sl, r3, sl
   27e18:	str	sl, [r5, #84]	; 0x54
   27e1c:	b	27d70 <__assert_fail@plt+0x161cc>
   27e20:	mov	r2, #0
   27e24:	b	27d70 <__assert_fail@plt+0x161cc>
   27e28:	mov	r3, #12
   27e2c:	str	r3, [r7]
   27e30:	mov	r0, r6
   27e34:	add	sp, sp, #28
   27e38:	ldrd	r4, [sp]
   27e3c:	ldrd	r6, [sp, #8]
   27e40:	ldrd	r8, [sp, #16]
   27e44:	ldrd	sl, [sp, #24]
   27e48:	add	sp, sp, #32
   27e4c:	pop	{pc}		; (ldr pc, [sp], #4)
   27e50:	mov	r6, #0
   27e54:	b	27e30 <__assert_fail@plt+0x1628c>
   27e58:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27e5c:	strd	r6, [sp, #8]
   27e60:	strd	r8, [sp, #16]
   27e64:	strd	sl, [sp, #24]
   27e68:	str	lr, [sp, #32]
   27e6c:	sub	sp, sp, #4
   27e70:	mov	r3, #0
   27e74:	str	r3, [r0]
   27e78:	ldr	lr, [r2, #4]
   27e7c:	cmp	lr, r3
   27e80:	beq	2807c <__assert_fail@plt+0x164d8>
   27e84:	mov	r6, lr
   27e88:	ble	27ea4 <__assert_fail@plt+0x16300>
   27e8c:	ldr	r3, [r2, #8]
   27e90:	add	lr, r3, lr, lsl #2
   27e94:	ldr	ip, [r3], #4
   27e98:	add	r6, r6, ip
   27e9c:	cmp	r3, lr
   27ea0:	bne	27e94 <__assert_fail@plt+0x162f0>
   27ea4:	mov	fp, r2
   27ea8:	mov	r9, r1
   27eac:	mov	sl, r0
   27eb0:	ldr	r3, [r1, #68]	; 0x44
   27eb4:	and	r3, r3, r6
   27eb8:	add	r3, r3, r3, lsl #1
   27ebc:	lsl	r3, r3, #2
   27ec0:	ldr	r2, [r1, #32]
   27ec4:	add	r1, r2, r3
   27ec8:	ldr	r8, [r2, r3]
   27ecc:	cmp	r8, #0
   27ed0:	ble	27f18 <__assert_fail@plt+0x16374>
   27ed4:	ldr	r7, [r1, #8]
   27ed8:	sub	r7, r7, #4
   27edc:	mov	r5, #0
   27ee0:	b	27ef0 <__assert_fail@plt+0x1634c>
   27ee4:	add	r5, r5, #1
   27ee8:	cmp	r8, r5
   27eec:	beq	27f18 <__assert_fail@plt+0x16374>
   27ef0:	ldr	r4, [r7, #4]!
   27ef4:	ldr	r3, [r4]
   27ef8:	cmp	r6, r3
   27efc:	bne	27ee4 <__assert_fail@plt+0x16340>
   27f00:	mov	r1, fp
   27f04:	add	r0, r4, #4
   27f08:	bl	1f68c <__assert_fail@plt+0xdae8>
   27f0c:	cmp	r0, #0
   27f10:	beq	27ee4 <__assert_fail@plt+0x16340>
   27f14:	b	28050 <__assert_fail@plt+0x164ac>
   27f18:	mov	r1, #1
   27f1c:	mov	r0, #56	; 0x38
   27f20:	bl	2ef9c <__assert_fail@plt+0x1d3f8>
   27f24:	subs	r4, r0, #0
   27f28:	beq	27f74 <__assert_fail@plt+0x163d0>
   27f2c:	add	r5, r4, #4
   27f30:	mov	r1, fp
   27f34:	mov	r0, r5
   27f38:	bl	20ce0 <__assert_fail@plt+0xf13c>
   27f3c:	cmp	r0, #0
   27f40:	bne	27f6c <__assert_fail@plt+0x163c8>
   27f44:	str	r5, [r4, #40]	; 0x28
   27f48:	ldr	lr, [fp, #4]
   27f4c:	cmp	lr, #0
   27f50:	ble	28038 <__assert_fail@plt+0x16494>
   27f54:	ldr	r5, [r9]
   27f58:	ldr	r1, [fp, #8]
   27f5c:	add	lr, r1, lr, lsl #2
   27f60:	mov	r7, #65280	; 0xff00
   27f64:	movt	r7, #3
   27f68:	b	27fd0 <__assert_fail@plt+0x1642c>
   27f6c:	mov	r0, r4
   27f70:	bl	17750 <__assert_fail@plt+0x5bac>
   27f74:	mov	r3, #12
   27f78:	str	r3, [sl]
   27f7c:	mov	r4, #0
   27f80:	b	28050 <__assert_fail@plt+0x164ac>
   27f84:	ldr	r2, [r3, #4]
   27f88:	tst	r7, r2
   27f8c:	beq	27fc8 <__assert_fail@plt+0x16424>
   27f90:	ldrb	r2, [r4, #52]	; 0x34
   27f94:	ubfx	r0, r2, #5, #1
   27f98:	ldrb	ip, [r3, #6]
   27f9c:	ubfx	ip, ip, #4, #1
   27fa0:	orr	r0, r0, ip
   27fa4:	bfi	r2, r0, #5, #1
   27fa8:	strb	r2, [r4, #52]	; 0x34
   27fac:	ldr	r3, [r3, #4]
   27fb0:	tst	r7, r3
   27fb4:	beq	27fc8 <__assert_fail@plt+0x16424>
   27fb8:	b	28028 <__assert_fail@plt+0x16484>
   27fbc:	uxtb	r3, r2
   27fc0:	orr	r3, r3, #16
   27fc4:	strb	r3, [r4, #52]	; 0x34
   27fc8:	cmp	r1, lr
   27fcc:	beq	28038 <__assert_fail@plt+0x16494>
   27fd0:	ldr	r3, [r1], #4
   27fd4:	add	r3, r5, r3, lsl #3
   27fd8:	ldrb	r0, [r3, #4]
   27fdc:	cmp	r0, #1
   27fe0:	beq	27f84 <__assert_fail@plt+0x163e0>
   27fe4:	ldrb	r2, [r4, #52]	; 0x34
   27fe8:	ubfx	ip, r2, #5, #1
   27fec:	ldrb	r8, [r3, #6]
   27ff0:	ubfx	r8, r8, #4, #1
   27ff4:	orr	ip, ip, r8
   27ff8:	bfi	r2, ip, #5, #1
   27ffc:	strb	r2, [r4, #52]	; 0x34
   28000:	cmp	r0, #2
   28004:	beq	27fbc <__assert_fail@plt+0x16418>
   28008:	cmp	r0, #4
   2800c:	bne	28020 <__assert_fail@plt+0x1647c>
   28010:	ldrb	r3, [r4, #52]	; 0x34
   28014:	orr	r3, r3, #64	; 0x40
   28018:	strb	r3, [r4, #52]	; 0x34
   2801c:	b	27fc8 <__assert_fail@plt+0x16424>
   28020:	cmp	r0, #12
   28024:	bne	27fac <__assert_fail@plt+0x16408>
   28028:	ldrb	r3, [r4, #52]	; 0x34
   2802c:	orr	r3, r3, #128	; 0x80
   28030:	strb	r3, [r4, #52]	; 0x34
   28034:	b	27fc8 <__assert_fail@plt+0x16424>
   28038:	mov	r2, r6
   2803c:	mov	r1, r4
   28040:	mov	r0, r9
   28044:	bl	20850 <__assert_fail@plt+0xecac>
   28048:	cmp	r0, #0
   2804c:	bne	28070 <__assert_fail@plt+0x164cc>
   28050:	mov	r0, r4
   28054:	add	sp, sp, #4
   28058:	ldrd	r4, [sp]
   2805c:	ldrd	r6, [sp, #8]
   28060:	ldrd	r8, [sp, #16]
   28064:	ldrd	sl, [sp, #24]
   28068:	add	sp, sp, #32
   2806c:	pop	{pc}		; (ldr pc, [sp], #4)
   28070:	mov	r0, r4
   28074:	bl	224d4 <__assert_fail@plt+0x10930>
   28078:	b	27f74 <__assert_fail@plt+0x163d0>
   2807c:	mov	r4, #0
   28080:	b	28050 <__assert_fail@plt+0x164ac>
   28084:	strd	r4, [sp, #-28]!	; 0xffffffe4
   28088:	strd	r6, [sp, #8]
   2808c:	strd	r8, [sp, #16]
   28090:	str	lr, [sp, #24]
   28094:	sub	sp, sp, #20
   28098:	subs	r8, r3, #0
   2809c:	ble	28148 <__assert_fail@plt+0x165a4>
   280a0:	mov	r7, r2
   280a4:	mov	r9, r0
   280a8:	sub	r4, r1, #4
   280ac:	mov	r5, #0
   280b0:	b	280c8 <__assert_fail@plt+0x16524>
   280b4:	ldr	r3, [r7, r5, lsl #2]
   280b8:	str	r3, [r4]
   280bc:	add	r5, r5, #1
   280c0:	cmp	r8, r5
   280c4:	beq	2812c <__assert_fail@plt+0x16588>
   280c8:	add	r4, r4, #4
   280cc:	ldr	r1, [r4]
   280d0:	cmp	r1, #0
   280d4:	beq	280b4 <__assert_fail@plt+0x16510>
   280d8:	ldr	r2, [r7, r5, lsl #2]
   280dc:	cmp	r2, #0
   280e0:	beq	280bc <__assert_fail@plt+0x16518>
   280e4:	add	r2, r2, #4
   280e8:	add	r1, r1, #4
   280ec:	mov	r0, sp
   280f0:	bl	20d68 <__assert_fail@plt+0xf1c4>
   280f4:	str	r0, [sp, #12]
   280f8:	cmp	r0, #0
   280fc:	bne	28130 <__assert_fail@plt+0x1658c>
   28100:	mov	r2, sp
   28104:	mov	r1, r9
   28108:	add	r0, sp, #12
   2810c:	bl	27e58 <__assert_fail@plt+0x162b4>
   28110:	str	r0, [r4]
   28114:	ldr	r0, [sp, #8]
   28118:	bl	17750 <__assert_fail@plt+0x5bac>
   2811c:	ldr	r0, [sp, #12]
   28120:	cmp	r0, #0
   28124:	beq	280bc <__assert_fail@plt+0x16518>
   28128:	b	28130 <__assert_fail@plt+0x1658c>
   2812c:	mov	r0, #0
   28130:	add	sp, sp, #20
   28134:	ldrd	r4, [sp]
   28138:	ldrd	r6, [sp, #8]
   2813c:	ldrd	r8, [sp, #16]
   28140:	add	sp, sp, #24
   28144:	pop	{pc}		; (ldr pc, [sp], #4)
   28148:	mov	r0, #0
   2814c:	b	28130 <__assert_fail@plt+0x1658c>
   28150:	strd	r4, [sp, #-36]!	; 0xffffffdc
   28154:	strd	r6, [sp, #8]
   28158:	strd	r8, [sp, #16]
   2815c:	strd	sl, [sp, #24]
   28160:	str	lr, [sp, #32]
   28164:	sub	sp, sp, #28
   28168:	mov	r8, r0
   2816c:	str	r1, [sp]
   28170:	mov	r7, r2
   28174:	str	r3, [sp, #4]
   28178:	mov	r1, r2
   2817c:	bl	200ec <__assert_fail@plt+0xe548>
   28180:	cmn	r0, #1
   28184:	moveq	r0, #0
   28188:	beq	28358 <__assert_fail@plt+0x167b4>
   2818c:	ldr	r9, [r8, #84]	; 0x54
   28190:	add	r0, r0, #1
   28194:	add	r0, r0, r0, lsl #1
   28198:	lsl	fp, r0, #3
   2819c:	b	2821c <__assert_fail@plt+0x16678>
   281a0:	ldr	r3, [r9, #20]
   281a4:	add	r6, r6, r6, lsl #1
   281a8:	add	r6, r3, r6, lsl #2
   281ac:	ldr	r3, [r6, #8]
   281b0:	ldr	r5, [r3]
   281b4:	mov	r1, r5
   281b8:	ldr	r6, [sp]
   281bc:	mov	r0, r6
   281c0:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   281c4:	cmp	r0, #0
   281c8:	bne	28288 <__assert_fail@plt+0x166e4>
   281cc:	mov	r1, r5
   281d0:	add	r0, sp, #8
   281d4:	bl	207bc <__assert_fail@plt+0xec18>
   281d8:	str	r0, [sp, #20]
   281dc:	ldr	r3, [sp, #64]	; 0x40
   281e0:	ldr	r2, [sp, #4]
   281e4:	add	r1, sp, #8
   281e8:	mov	r0, r9
   281ec:	bl	23b60 <__assert_fail@plt+0x11fbc>
   281f0:	mov	r4, r0
   281f4:	add	r1, sp, #8
   281f8:	mov	r0, r6
   281fc:	bl	23314 <__assert_fail@plt+0x11770>
   28200:	mov	r5, r0
   28204:	ldr	r0, [sp, #16]
   28208:	bl	17750 <__assert_fail@plt+0x5bac>
   2820c:	ldr	r0, [sp, #20]
   28210:	orr	r3, r4, r5
   28214:	orrs	r3, r3, r0
   28218:	bne	28228 <__assert_fail@plt+0x16684>
   2821c:	ldr	r4, [r8, #116]	; 0x74
   28220:	add	r4, r4, fp
   28224:	b	28298 <__assert_fail@plt+0x166f4>
   28228:	cmp	r0, #0
   2822c:	bne	28358 <__assert_fail@plt+0x167b4>
   28230:	cmp	r4, #0
   28234:	movne	r0, r4
   28238:	moveq	r0, r5
   2823c:	b	28358 <__assert_fail@plt+0x167b4>
   28240:	mov	r1, sl
   28244:	add	r0, sp, #8
   28248:	bl	207bc <__assert_fail@plt+0xec18>
   2824c:	str	r0, [sp, #20]
   28250:	cmp	r0, #0
   28254:	bne	28358 <__assert_fail@plt+0x167b4>
   28258:	ldr	r6, [r8, #100]	; 0x64
   2825c:	add	r2, sp, #8
   28260:	mov	r1, r9
   28264:	add	r0, sp, #20
   28268:	bl	27e58 <__assert_fail@plt+0x162b4>
   2826c:	str	r0, [r6, r5, lsl #2]
   28270:	ldr	r0, [sp, #16]
   28274:	bl	17750 <__assert_fail@plt+0x5bac>
   28278:	ldr	r3, [r8, #100]	; 0x64
   2827c:	ldr	r3, [r3, r5, lsl #2]
   28280:	cmp	r3, #0
   28284:	beq	28344 <__assert_fail@plt+0x167a0>
   28288:	add	r4, r4, #24
   2828c:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   28290:	cmp	r3, #0
   28294:	beq	28354 <__assert_fail@plt+0x167b0>
   28298:	ldr	r6, [r4, #-24]	; 0xffffffe8
   2829c:	mov	r1, r6
   282a0:	ldr	r0, [sp]
   282a4:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   282a8:	cmp	r0, #0
   282ac:	beq	28288 <__assert_fail@plt+0x166e4>
   282b0:	ldr	r5, [r4, #-12]
   282b4:	add	r5, r7, r5
   282b8:	ldr	r3, [r4, #-16]
   282bc:	sub	r5, r5, r3
   282c0:	cmp	r7, r5
   282c4:	beq	281a0 <__assert_fail@plt+0x165fc>
   282c8:	ldr	r3, [r9, #12]
   282cc:	ldr	sl, [r3, r6, lsl #2]
   282d0:	ldr	r3, [r8, #100]	; 0x64
   282d4:	ldr	r6, [r3, r5, lsl #2]
   282d8:	cmp	r6, #0
   282dc:	beq	28240 <__assert_fail@plt+0x1669c>
   282e0:	add	r6, r6, #4
   282e4:	mov	r1, sl
   282e8:	mov	r0, r6
   282ec:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   282f0:	cmp	r0, #0
   282f4:	bne	28288 <__assert_fail@plt+0x166e4>
   282f8:	mov	r1, r6
   282fc:	add	r0, sp, #8
   28300:	bl	20ce0 <__assert_fail@plt+0xf13c>
   28304:	str	r0, [sp, #20]
   28308:	mov	r1, sl
   2830c:	add	r0, sp, #8
   28310:	bl	22d7c <__assert_fail@plt+0x111d8>
   28314:	eor	r0, r0, #1
   28318:	ldr	r3, [sp, #20]
   2831c:	cmp	r3, #0
   28320:	orrne	r0, r0, #1
   28324:	tst	r0, #255	; 0xff
   28328:	beq	28258 <__assert_fail@plt+0x166b4>
   2832c:	ldr	r0, [sp, #16]
   28330:	bl	17750 <__assert_fail@plt+0x5bac>
   28334:	ldr	r0, [sp, #20]
   28338:	cmp	r0, #0
   2833c:	moveq	r0, #12
   28340:	b	28358 <__assert_fail@plt+0x167b4>
   28344:	ldr	r0, [sp, #20]
   28348:	cmp	r0, #0
   2834c:	beq	28288 <__assert_fail@plt+0x166e4>
   28350:	b	28358 <__assert_fail@plt+0x167b4>
   28354:	mov	r0, #0
   28358:	add	sp, sp, #28
   2835c:	ldrd	r4, [sp]
   28360:	ldrd	r6, [sp, #8]
   28364:	ldrd	r8, [sp, #16]
   28368:	ldrd	sl, [sp, #24]
   2836c:	add	sp, sp, #32
   28370:	pop	{pc}		; (ldr pc, [sp], #4)
   28374:	strd	r4, [sp, #-36]!	; 0xffffffdc
   28378:	strd	r6, [sp, #8]
   2837c:	strd	r8, [sp, #16]
   28380:	strd	sl, [sp, #24]
   28384:	str	lr, [sp, #32]
   28388:	sub	sp, sp, #84	; 0x54
   2838c:	mov	r4, r0
   28390:	str	r1, [sp, #32]
   28394:	mov	r7, r2
   28398:	mov	r6, r3
   2839c:	ldr	r3, [r0, #84]	; 0x54
   283a0:	mov	r2, r3
   283a4:	str	r3, [sp, #24]
   283a8:	mov	r3, #0
   283ac:	str	r3, [sp, #76]	; 0x4c
   283b0:	ldr	r3, [r2]
   283b4:	ldr	r3, [r3, r7, lsl #3]
   283b8:	str	r3, [sp, #28]
   283bc:	ldr	r5, [r0, #120]	; 0x78
   283c0:	ldr	r3, [sp, #124]	; 0x7c
   283c4:	add	r5, r3, r5
   283c8:	ldr	r8, [r1, #4]
   283cc:	cmp	r5, r8
   283d0:	bge	28520 <__assert_fail@plt+0x1697c>
   283d4:	ldr	r3, [sp, #32]
   283d8:	ldr	r5, [r3]
   283dc:	cmp	r5, #0
   283e0:	beq	2894c <__assert_fail@plt+0x16da8>
   283e4:	ldr	r2, [r4, #100]	; 0x64
   283e8:	str	r2, [sp, #40]	; 0x28
   283ec:	ldr	r2, [r4, #40]	; 0x28
   283f0:	str	r2, [sp, #44]	; 0x2c
   283f4:	ldr	r9, [r3, #8]
   283f8:	str	r9, [r4, #100]	; 0x64
   283fc:	str	r5, [r4, #40]	; 0x28
   28400:	str	r4, [sp, #12]
   28404:	ldr	r2, [r4, #88]	; 0x58
   28408:	sub	r1, r5, #1
   2840c:	mov	r0, r4
   28410:	bl	23714 <__assert_fail@plt+0x11b70>
   28414:	mov	r8, r0
   28418:	cmp	r5, r6
   2841c:	beq	28984 <__assert_fail@plt+0x16de0>
   28420:	ldr	sl, [r9, r5, lsl #2]
   28424:	cmp	sl, #0
   28428:	beq	289d0 <__assert_fail@plt+0x16e2c>
   2842c:	ldrb	r3, [sl, #52]	; 0x34
   28430:	tst	r3, #64	; 0x40
   28434:	bne	28578 <__assert_fail@plt+0x169d4>
   28438:	mov	r3, #0
   2843c:	str	r3, [sp, #64]	; 0x40
   28440:	str	r3, [sp, #68]	; 0x44
   28444:	str	r3, [sp, #72]	; 0x48
   28448:	ldrb	r3, [sl, #52]	; 0x34
   2844c:	tst	r3, #64	; 0x40
   28450:	beq	284ac <__assert_fail@plt+0x16908>
   28454:	ldr	r3, [sp, #68]	; 0x44
   28458:	cmp	r3, #0
   2845c:	beq	28488 <__assert_fail@plt+0x168e4>
   28460:	ldr	r3, [sp, #128]	; 0x80
   28464:	str	r3, [sp]
   28468:	ldr	r3, [sp, #28]
   2846c:	mov	r2, r5
   28470:	add	r1, sp, #64	; 0x40
   28474:	mov	r0, r4
   28478:	bl	28150 <__assert_fail@plt+0x165ac>
   2847c:	str	r0, [sp, #76]	; 0x4c
   28480:	cmp	r0, #0
   28484:	bne	28594 <__assert_fail@plt+0x169f0>
   28488:	mov	r3, r8
   2848c:	add	r2, sp, #64	; 0x40
   28490:	ldr	r1, [sp, #24]
   28494:	add	r0, sp, #76	; 0x4c
   28498:	bl	2253c <__assert_fail@plt+0x10998>
   2849c:	subs	sl, r0, #0
   284a0:	beq	285a4 <__assert_fail@plt+0x16a00>
   284a4:	ldr	r3, [r4, #100]	; 0x64
   284a8:	str	sl, [r3, r5, lsl #2]
   284ac:	ldr	r3, [sp, #124]	; 0x7c
   284b0:	cmp	r3, r5
   284b4:	ble	284d4 <__assert_fail@plt+0x16930>
   284b8:	ldr	r3, [r4, #120]	; 0x78
   284bc:	cmp	r3, #0
   284c0:	addge	r7, r5, #1
   284c4:	movge	r3, #0
   284c8:	strge	r3, [sp, #16]
   284cc:	movge	r9, r3
   284d0:	bge	287b8 <__assert_fail@plt+0x16c14>
   284d4:	ldr	r0, [sp, #72]	; 0x48
   284d8:	bl	17750 <__assert_fail@plt+0x5bac>
   284dc:	ldr	r3, [r4, #100]	; 0x64
   284e0:	ldr	r2, [sp, #124]	; 0x7c
   284e4:	ldr	r0, [r3, r2, lsl #2]
   284e8:	cmp	r0, #0
   284ec:	beq	2891c <__assert_fail@plt+0x16d78>
   284f0:	ldr	r3, [sp, #32]
   284f4:	str	r5, [r3]
   284f8:	ldr	r3, [sp, #40]	; 0x28
   284fc:	str	r3, [r4, #100]	; 0x64
   28500:	ldr	r3, [sp, #44]	; 0x2c
   28504:	str	r3, [r4, #40]	; 0x28
   28508:	ldr	r1, [sp, #120]	; 0x78
   2850c:	add	r0, r0, #4
   28510:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   28514:	clz	r0, r0
   28518:	lsr	r0, r0, #5
   2851c:	b	285cc <__assert_fail@plt+0x16a28>
   28520:	add	r5, r5, #1
   28524:	movw	r3, #65535	; 0xffff
   28528:	movt	r3, #32767	; 0x7fff
   2852c:	sub	r3, r3, r8
   28530:	cmp	r3, r5
   28534:	blt	28904 <__assert_fail@plt+0x16d60>
   28538:	add	r9, r8, r5
   2853c:	cmn	r9, #-1073741823	; 0xc0000001
   28540:	bhi	2890c <__assert_fail@plt+0x16d68>
   28544:	lsl	r1, r9, #2
   28548:	ldr	sl, [sp, #32]
   2854c:	ldr	r0, [sl, #8]
   28550:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   28554:	cmp	r0, #0
   28558:	beq	28914 <__assert_fail@plt+0x16d70>
   2855c:	str	r0, [sl, #8]
   28560:	str	r9, [sl, #4]
   28564:	lsl	r2, r5, #2
   28568:	mov	r1, #0
   2856c:	add	r0, r0, r8, lsl #2
   28570:	bl	119e8 <memset@plt>
   28574:	b	283d4 <__assert_fail@plt+0x16830>
   28578:	add	r1, sl, #4
   2857c:	add	r0, sp, #64	; 0x40
   28580:	bl	20ce0 <__assert_fail@plt+0xf13c>
   28584:	str	r0, [sp, #76]	; 0x4c
   28588:	cmp	r0, #0
   2858c:	beq	28448 <__assert_fail@plt+0x168a4>
   28590:	b	285cc <__assert_fail@plt+0x16a28>
   28594:	ldr	r0, [sp, #72]	; 0x48
   28598:	bl	17750 <__assert_fail@plt+0x5bac>
   2859c:	ldr	r0, [sp, #76]	; 0x4c
   285a0:	b	285cc <__assert_fail@plt+0x16a28>
   285a4:	ldr	r3, [sp, #76]	; 0x4c
   285a8:	cmp	r3, #0
   285ac:	beq	284a4 <__assert_fail@plt+0x16900>
   285b0:	ldr	r0, [sp, #72]	; 0x48
   285b4:	bl	17750 <__assert_fail@plt+0x5bac>
   285b8:	ldr	r0, [sp, #76]	; 0x4c
   285bc:	b	285cc <__assert_fail@plt+0x16a28>
   285c0:	ldr	r0, [sp, #72]	; 0x48
   285c4:	bl	17750 <__assert_fail@plt+0x5bac>
   285c8:	ldr	r0, [sp, #76]	; 0x4c
   285cc:	add	sp, sp, #84	; 0x54
   285d0:	ldrd	r4, [sp]
   285d4:	ldrd	r6, [sp, #8]
   285d8:	ldrd	r8, [sp, #16]
   285dc:	ldrd	sl, [sp, #24]
   285e0:	add	sp, sp, #32
   285e4:	pop	{pc}		; (ldr pc, [sp], #4)
   285e8:	ldr	r5, [sp, #8]
   285ec:	mov	r3, r5
   285f0:	ldr	r2, [sp, #12]
   285f4:	mov	r0, r6
   285f8:	bl	24b30 <__assert_fail@plt+0x12f8c>
   285fc:	cmp	r0, #1
   28600:	ble	2886c <__assert_fail@plt+0x16cc8>
   28604:	ldr	r3, [r6, #12]
   28608:	ldr	fp, [r3, r7, lsl #2]
   2860c:	add	r5, r5, r0
   28610:	ldr	r3, [r4, #100]	; 0x64
   28614:	ldr	r1, [r3, r5, lsl #2]
   28618:	str	r9, [sp, #56]	; 0x38
   2861c:	cmp	r1, #0
   28620:	beq	2863c <__assert_fail@plt+0x16a98>
   28624:	add	r1, r1, #4
   28628:	add	r0, sp, #52	; 0x34
   2862c:	bl	23314 <__assert_fail@plt+0x11770>
   28630:	str	r0, [sp, #48]	; 0x30
   28634:	cmp	r0, #0
   28638:	bne	286e4 <__assert_fail@plt+0x16b40>
   2863c:	mov	r1, fp
   28640:	add	r0, sp, #52	; 0x34
   28644:	bl	22d7c <__assert_fail@plt+0x111d8>
   28648:	cmp	r0, #0
   2864c:	beq	28840 <__assert_fail@plt+0x16c9c>
   28650:	ldr	fp, [r4, #100]	; 0x64
   28654:	add	r2, sp, #52	; 0x34
   28658:	mov	r1, r6
   2865c:	add	r0, sp, #48	; 0x30
   28660:	bl	27e58 <__assert_fail@plt+0x162b4>
   28664:	str	r0, [fp, r5, lsl #2]
   28668:	ldr	r3, [r4, #100]	; 0x64
   2866c:	ldr	r3, [r3, r5, lsl #2]
   28670:	cmp	r3, #0
   28674:	beq	2884c <__assert_fail@plt+0x16ca8>
   28678:	ldr	r3, [r6, #12]
   2867c:	ldr	r1, [r3, r7, lsl #2]
   28680:	add	r0, sp, #64	; 0x40
   28684:	bl	22d7c <__assert_fail@plt+0x111d8>
   28688:	cmp	r0, #0
   2868c:	beq	28878 <__assert_fail@plt+0x16cd4>
   28690:	add	r8, r8, #1
   28694:	ldr	r3, [sl, #20]
   28698:	cmp	r8, r3
   2869c:	bge	28898 <__assert_fail@plt+0x16cf4>
   286a0:	ldr	r3, [sl, #24]
   286a4:	ldr	r1, [r3, r8, lsl #2]
   286a8:	mov	r7, r1
   286ac:	lsl	fp, r1, #3
   286b0:	ldr	r3, [r6]
   286b4:	add	r3, r3, fp
   286b8:	ldrb	r3, [r3, #6]
   286bc:	tst	r3, #16
   286c0:	bne	285e8 <__assert_fail@plt+0x16a44>
   286c4:	ldr	r1, [r6]
   286c8:	ldr	r2, [sp, #8]
   286cc:	add	r1, r1, fp
   286d0:	mov	r0, r4
   286d4:	bl	23820 <__assert_fail@plt+0x11c7c>
   286d8:	cmp	r0, #0
   286dc:	beq	28690 <__assert_fail@plt+0x16aec>
   286e0:	b	28678 <__assert_fail@plt+0x16ad4>
   286e4:	ldr	r7, [sp, #36]	; 0x24
   286e8:	ldr	r0, [sp, #60]	; 0x3c
   286ec:	bl	17750 <__assert_fail@plt+0x5bac>
   286f0:	ldr	r3, [sp, #48]	; 0x30
   286f4:	str	r3, [sp, #76]	; 0x4c
   286f8:	cmp	r3, #0
   286fc:	bne	28888 <__assert_fail@plt+0x16ce4>
   28700:	mov	r5, r7
   28704:	ldr	r3, [sp, #68]	; 0x44
   28708:	cmp	r3, #0
   2870c:	beq	28758 <__assert_fail@plt+0x16bb4>
   28710:	ldr	r3, [sp, #128]	; 0x80
   28714:	ldr	r2, [sp, #28]
   28718:	add	r1, sp, #64	; 0x40
   2871c:	ldr	r0, [sp, #24]
   28720:	bl	23b60 <__assert_fail@plt+0x11fbc>
   28724:	str	r0, [sp, #76]	; 0x4c
   28728:	cmp	r0, #0
   2872c:	bne	288ac <__assert_fail@plt+0x16d08>
   28730:	ldr	r3, [sp, #128]	; 0x80
   28734:	str	r3, [sp]
   28738:	ldr	r3, [sp, #28]
   2873c:	mov	r2, r7
   28740:	add	r1, sp, #64	; 0x40
   28744:	mov	r0, r4
   28748:	bl	28150 <__assert_fail@plt+0x165ac>
   2874c:	str	r0, [sp, #76]	; 0x4c
   28750:	cmp	r0, #0
   28754:	bne	288bc <__assert_fail@plt+0x16d18>
   28758:	ldr	r2, [r4, #88]	; 0x58
   2875c:	ldr	r1, [sp, #8]
   28760:	ldr	r0, [sp, #12]
   28764:	bl	23714 <__assert_fail@plt+0x11b70>
   28768:	mov	r3, r0
   2876c:	add	r2, sp, #64	; 0x40
   28770:	ldr	r1, [sp, #24]
   28774:	add	r0, sp, #76	; 0x4c
   28778:	bl	2253c <__assert_fail@plt+0x10998>
   2877c:	subs	sl, r0, #0
   28780:	beq	288cc <__assert_fail@plt+0x16d28>
   28784:	ldr	r3, [r4, #100]	; 0x64
   28788:	ldr	r2, [sp, #20]
   2878c:	str	sl, [r3, r2]
   28790:	mov	r3, #0
   28794:	str	r3, [sp, #16]
   28798:	ldr	r3, [sp, #124]	; 0x7c
   2879c:	cmp	r3, r5
   287a0:	ble	284d4 <__assert_fail@plt+0x16930>
   287a4:	add	r7, r7, #1
   287a8:	ldr	r3, [r4, #120]	; 0x78
   287ac:	ldr	r2, [sp, #16]
   287b0:	cmp	r2, r3
   287b4:	bgt	284d4 <__assert_fail@plt+0x16930>
   287b8:	sub	r3, r7, #1
   287bc:	str	r3, [sp, #8]
   287c0:	str	r9, [sp, #68]	; 0x44
   287c4:	lsl	r3, r7, #2
   287c8:	str	r3, [sp, #20]
   287cc:	ldr	r3, [r4, #100]	; 0x64
   287d0:	ldr	r1, [r3, r7, lsl #2]
   287d4:	cmp	r1, #0
   287d8:	beq	2893c <__assert_fail@plt+0x16d98>
   287dc:	add	r1, r1, #4
   287e0:	add	r0, sp, #64	; 0x40
   287e4:	bl	23314 <__assert_fail@plt+0x11770>
   287e8:	str	r0, [sp, #76]	; 0x4c
   287ec:	cmp	r0, #0
   287f0:	bne	285c0 <__assert_fail@plt+0x16a1c>
   287f4:	cmp	sl, #0
   287f8:	beq	28700 <__assert_fail@plt+0x16b5c>
   287fc:	ldr	r6, [r4, #84]	; 0x54
   28800:	str	r9, [sp, #48]	; 0x30
   28804:	str	r9, [sp, #52]	; 0x34
   28808:	str	r9, [sp, #56]	; 0x38
   2880c:	str	r9, [sp, #60]	; 0x3c
   28810:	ldr	r3, [sl, #20]
   28814:	cmp	r3, #0
   28818:	ble	2889c <__assert_fail@plt+0x16cf8>
   2881c:	ldr	r3, [sl, #24]
   28820:	ldr	r1, [r3]
   28824:	lsl	fp, r1, #3
   28828:	ldr	r3, [r6]
   2882c:	add	r3, r3, fp
   28830:	mov	r8, #0
   28834:	str	r7, [sp, #36]	; 0x24
   28838:	mov	r7, r1
   2883c:	b	286b8 <__assert_fail@plt+0x16b14>
   28840:	ldr	r0, [sp, #60]	; 0x3c
   28844:	bl	17750 <__assert_fail@plt+0x5bac>
   28848:	b	28880 <__assert_fail@plt+0x16cdc>
   2884c:	ldr	r3, [sp, #48]	; 0x30
   28850:	cmp	r3, #0
   28854:	beq	28678 <__assert_fail@plt+0x16ad4>
   28858:	ldr	r7, [sp, #36]	; 0x24
   2885c:	ldr	r0, [sp, #60]	; 0x3c
   28860:	bl	17750 <__assert_fail@plt+0x5bac>
   28864:	ldr	r3, [sp, #48]	; 0x30
   28868:	b	286f4 <__assert_fail@plt+0x16b50>
   2886c:	cmp	r0, #0
   28870:	beq	286c4 <__assert_fail@plt+0x16b20>
   28874:	b	28678 <__assert_fail@plt+0x16ad4>
   28878:	ldr	r0, [sp, #60]	; 0x3c
   2887c:	bl	17750 <__assert_fail@plt+0x5bac>
   28880:	mov	r3, #12
   28884:	str	r3, [sp, #76]	; 0x4c
   28888:	ldr	r0, [sp, #72]	; 0x48
   2888c:	bl	17750 <__assert_fail@plt+0x5bac>
   28890:	ldr	r0, [sp, #76]	; 0x4c
   28894:	b	285cc <__assert_fail@plt+0x16a28>
   28898:	ldr	r7, [sp, #36]	; 0x24
   2889c:	ldr	r0, [sp, #60]	; 0x3c
   288a0:	bl	17750 <__assert_fail@plt+0x5bac>
   288a4:	str	r9, [sp, #76]	; 0x4c
   288a8:	b	28700 <__assert_fail@plt+0x16b5c>
   288ac:	ldr	r0, [sp, #72]	; 0x48
   288b0:	bl	17750 <__assert_fail@plt+0x5bac>
   288b4:	ldr	r0, [sp, #76]	; 0x4c
   288b8:	b	285cc <__assert_fail@plt+0x16a28>
   288bc:	ldr	r0, [sp, #72]	; 0x48
   288c0:	bl	17750 <__assert_fail@plt+0x5bac>
   288c4:	ldr	r0, [sp, #76]	; 0x4c
   288c8:	b	285cc <__assert_fail@plt+0x16a28>
   288cc:	ldr	r3, [sp, #76]	; 0x4c
   288d0:	cmp	r3, #0
   288d4:	bne	288f4 <__assert_fail@plt+0x16d50>
   288d8:	ldr	r3, [r4, #100]	; 0x64
   288dc:	ldr	r2, [sp, #20]
   288e0:	str	r9, [r3, r2]
   288e4:	ldr	r3, [sp, #16]
   288e8:	add	r3, r3, #1
   288ec:	str	r3, [sp, #16]
   288f0:	b	28798 <__assert_fail@plt+0x16bf4>
   288f4:	ldr	r0, [sp, #72]	; 0x48
   288f8:	bl	17750 <__assert_fail@plt+0x5bac>
   288fc:	ldr	r0, [sp, #76]	; 0x4c
   28900:	b	285cc <__assert_fail@plt+0x16a28>
   28904:	mov	r0, #12
   28908:	b	285cc <__assert_fail@plt+0x16a28>
   2890c:	mov	r0, #12
   28910:	b	285cc <__assert_fail@plt+0x16a28>
   28914:	mov	r0, #12
   28918:	b	285cc <__assert_fail@plt+0x16a28>
   2891c:	ldr	r3, [sp, #32]
   28920:	str	r5, [r3]
   28924:	ldr	r3, [sp, #40]	; 0x28
   28928:	str	r3, [r4, #100]	; 0x64
   2892c:	ldr	r3, [sp, #44]	; 0x2c
   28930:	str	r3, [r4, #40]	; 0x28
   28934:	mov	r0, #1
   28938:	b	285cc <__assert_fail@plt+0x16a28>
   2893c:	cmp	sl, #0
   28940:	bne	287fc <__assert_fail@plt+0x16c58>
   28944:	mov	r5, r7
   28948:	b	28758 <__assert_fail@plt+0x16bb4>
   2894c:	ldr	r3, [r4, #100]	; 0x64
   28950:	str	r3, [sp, #40]	; 0x28
   28954:	ldr	r3, [r4, #40]	; 0x28
   28958:	str	r3, [sp, #44]	; 0x2c
   2895c:	ldr	r3, [sp, #32]
   28960:	ldr	r3, [r3, #8]
   28964:	str	r3, [r4, #100]	; 0x64
   28968:	str	r6, [r4, #40]	; 0x28
   2896c:	str	r4, [sp, #12]
   28970:	ldr	r2, [r4, #88]	; 0x58
   28974:	sub	r1, r6, #1
   28978:	mov	r0, r4
   2897c:	bl	23714 <__assert_fail@plt+0x11b70>
   28980:	mov	r8, r0
   28984:	mov	r1, r7
   28988:	add	r0, sp, #64	; 0x40
   2898c:	bl	207bc <__assert_fail@plt+0xec18>
   28990:	str	r0, [sp, #76]	; 0x4c
   28994:	cmp	r0, #0
   28998:	bne	285cc <__assert_fail@plt+0x16a28>
   2899c:	ldr	r3, [sp, #128]	; 0x80
   289a0:	ldr	r2, [sp, #28]
   289a4:	add	r1, sp, #64	; 0x40
   289a8:	ldr	r0, [sp, #24]
   289ac:	bl	23b60 <__assert_fail@plt+0x11fbc>
   289b0:	str	r0, [sp, #76]	; 0x4c
   289b4:	cmp	r0, #0
   289b8:	moveq	r5, r6
   289bc:	beq	28454 <__assert_fail@plt+0x168b0>
   289c0:	ldr	r0, [sp, #72]	; 0x48
   289c4:	bl	17750 <__assert_fail@plt+0x5bac>
   289c8:	ldr	r0, [sp, #76]	; 0x4c
   289cc:	b	285cc <__assert_fail@plt+0x16a28>
   289d0:	mov	r3, #0
   289d4:	str	r3, [sp, #64]	; 0x40
   289d8:	str	r3, [sp, #68]	; 0x44
   289dc:	str	r3, [sp, #72]	; 0x48
   289e0:	b	284ac <__assert_fail@plt+0x16908>
   289e4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   289e8:	strd	r6, [sp, #8]
   289ec:	strd	r8, [sp, #16]
   289f0:	str	sl, [sp, #24]
   289f4:	str	lr, [sp, #28]
   289f8:	sub	sp, sp, #16
   289fc:	mov	r4, r0
   28a00:	mov	r8, r1
   28a04:	mov	r6, r2
   28a08:	mov	r9, r3
   28a0c:	ldr	r5, [sp, #48]	; 0x30
   28a10:	mov	r1, r2
   28a14:	mov	r3, #8
   28a18:	str	r3, [sp, #8]
   28a1c:	str	r5, [sp, #4]
   28a20:	str	r9, [sp]
   28a24:	ldr	r3, [r2, #4]
   28a28:	ldr	r2, [r1], #8
   28a2c:	bl	28374 <__assert_fail@plt+0x167d0>
   28a30:	cmp	r0, #0
   28a34:	beq	28a54 <__assert_fail@plt+0x16eb0>
   28a38:	add	sp, sp, #16
   28a3c:	ldrd	r4, [sp]
   28a40:	ldrd	r6, [sp, #8]
   28a44:	ldrd	r8, [sp, #16]
   28a48:	ldr	sl, [sp, #24]
   28a4c:	add	sp, sp, #28
   28a50:	pop	{pc}		; (ldr pc, [sp], #4)
   28a54:	ldr	sl, [r8]
   28a58:	ldr	r7, [r6, #4]
   28a5c:	ldr	r1, [r4, #112]	; 0x70
   28a60:	ldr	r3, [r4, #108]	; 0x6c
   28a64:	cmp	r3, r1
   28a68:	bge	28b54 <__assert_fail@plt+0x16fb0>
   28a6c:	ldr	r3, [r4, #108]	; 0x6c
   28a70:	cmp	r3, #0
   28a74:	ble	28a9c <__assert_fail@plt+0x16ef8>
   28a78:	add	r3, r3, r3, lsl #1
   28a7c:	lsl	r3, r3, #3
   28a80:	sub	r3, r3, #24
   28a84:	ldr	r2, [r4, #116]	; 0x74
   28a88:	add	r3, r2, r3
   28a8c:	ldr	r2, [r3, #4]
   28a90:	cmp	r5, r2
   28a94:	moveq	r2, #1
   28a98:	strbeq	r2, [r3, #20]
   28a9c:	ldr	r3, [r4, #108]	; 0x6c
   28aa0:	ldr	r2, [r4, #116]	; 0x74
   28aa4:	add	r3, r3, r3, lsl #1
   28aa8:	str	r9, [r2, r3, lsl #3]
   28aac:	ldr	r3, [r4, #108]	; 0x6c
   28ab0:	ldr	r2, [r4, #116]	; 0x74
   28ab4:	add	r3, r3, r3, lsl #1
   28ab8:	add	r3, r2, r3, lsl #3
   28abc:	str	r5, [r3, #4]
   28ac0:	ldr	r3, [r4, #108]	; 0x6c
   28ac4:	ldr	r2, [r4, #116]	; 0x74
   28ac8:	add	r3, r3, r3, lsl #1
   28acc:	add	r3, r2, r3, lsl #3
   28ad0:	str	sl, [r3, #8]
   28ad4:	ldr	r3, [r4, #108]	; 0x6c
   28ad8:	ldr	r2, [r4, #116]	; 0x74
   28adc:	add	r3, r3, r3, lsl #1
   28ae0:	add	r3, r2, r3, lsl #3
   28ae4:	str	r7, [r3, #12]
   28ae8:	ldr	r3, [r4, #108]	; 0x6c
   28aec:	ldr	r2, [r4, #116]	; 0x74
   28af0:	add	r3, r3, r3, lsl #1
   28af4:	add	r3, r2, r3, lsl #3
   28af8:	cmp	sl, r7
   28afc:	movne	r2, #0
   28b00:	mvneq	r2, #0
   28b04:	str	r2, [r3, #16]
   28b08:	ldr	r2, [r4, #116]	; 0x74
   28b0c:	ldr	r3, [r4, #108]	; 0x6c
   28b10:	add	r1, r3, #1
   28b14:	str	r1, [r4, #108]	; 0x6c
   28b18:	add	r3, r3, r3, lsl #1
   28b1c:	add	r3, r2, r3, lsl #3
   28b20:	mov	r2, #0
   28b24:	strb	r2, [r3, #20]
   28b28:	sub	r7, r7, sl
   28b2c:	ldr	r3, [r4, #120]	; 0x78
   28b30:	cmp	r3, r7
   28b34:	strlt	r7, [r4, #120]	; 0x78
   28b38:	ldr	r1, [r6, #4]
   28b3c:	add	r5, r5, r1
   28b40:	ldr	r1, [r8]
   28b44:	sub	r1, r5, r1
   28b48:	mov	r0, r4
   28b4c:	bl	23ac4 <__assert_fail@plt+0x11f20>
   28b50:	b	28a38 <__assert_fail@plt+0x16e94>
   28b54:	add	r1, r1, r1, lsl #1
   28b58:	lsl	r1, r1, #4
   28b5c:	ldr	r0, [r4, #116]	; 0x74
   28b60:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   28b64:	cmp	r0, #0
   28b68:	beq	28ba0 <__assert_fail@plt+0x16ffc>
   28b6c:	str	r0, [r4, #116]	; 0x74
   28b70:	ldr	r2, [r4, #112]	; 0x70
   28b74:	add	r2, r2, r2, lsl #1
   28b78:	ldr	r3, [r4, #108]	; 0x6c
   28b7c:	add	r3, r3, r3, lsl #1
   28b80:	lsl	r2, r2, #3
   28b84:	mov	r1, #0
   28b88:	add	r0, r0, r3, lsl #3
   28b8c:	bl	119e8 <memset@plt>
   28b90:	ldr	r3, [r4, #112]	; 0x70
   28b94:	lsl	r3, r3, #1
   28b98:	str	r3, [r4, #112]	; 0x70
   28b9c:	b	28a6c <__assert_fail@plt+0x16ec8>
   28ba0:	ldr	r0, [r4, #116]	; 0x74
   28ba4:	bl	17750 <__assert_fail@plt+0x5bac>
   28ba8:	mov	r0, #12
   28bac:	b	28a38 <__assert_fail@plt+0x16e94>
   28bb0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   28bb4:	strd	r6, [sp, #8]
   28bb8:	strd	r8, [sp, #16]
   28bbc:	strd	sl, [sp, #24]
   28bc0:	str	lr, [sp, #32]
   28bc4:	sub	sp, sp, #84	; 0x54
   28bc8:	ldr	fp, [r0, #84]	; 0x54
   28bcc:	ldr	r2, [r0, #40]	; 0x28
   28bd0:	str	r2, [sp, #28]
   28bd4:	ldr	r3, [r1, #4]
   28bd8:	cmp	r3, #0
   28bdc:	ble	29298 <__assert_fail@plt+0x176f4>
   28be0:	mov	sl, r0
   28be4:	lsl	r3, r2, #2
   28be8:	str	r3, [sp, #40]	; 0x28
   28bec:	mov	r3, #0
   28bf0:	str	r3, [sp, #20]
   28bf4:	mov	r7, r1
   28bf8:	b	28c48 <__assert_fail@plt+0x170a4>
   28bfc:	tst	r3, #8
   28c00:	beq	28c0c <__assert_fail@plt+0x17068>
   28c04:	tst	r0, #1
   28c08:	bne	28c2c <__assert_fail@plt+0x17088>
   28c0c:	tst	r3, #32
   28c10:	beq	28c1c <__assert_fail@plt+0x17078>
   28c14:	tst	r0, #2
   28c18:	beq	28c2c <__assert_fail@plt+0x17088>
   28c1c:	tst	r3, #128	; 0x80
   28c20:	beq	28cb4 <__assert_fail@plt+0x17110>
   28c24:	tst	r0, #8
   28c28:	bne	28cb4 <__assert_fail@plt+0x17110>
   28c2c:	ldr	r3, [sp, #20]
   28c30:	add	r3, r3, #1
   28c34:	mov	r2, r3
   28c38:	str	r3, [sp, #20]
   28c3c:	ldr	r3, [r7, #4]
   28c40:	cmp	r3, r2
   28c44:	ble	29298 <__assert_fail@plt+0x176f4>
   28c48:	ldr	r3, [r7, #8]
   28c4c:	ldr	r2, [sp, #20]
   28c50:	ldr	r8, [r3, r2, lsl #2]
   28c54:	ldr	r4, [fp]
   28c58:	add	r4, r4, r8, lsl #3
   28c5c:	ldrb	r3, [r4, #4]
   28c60:	cmp	r3, #4
   28c64:	bne	28c2c <__assert_fail@plt+0x17088>
   28c68:	ldr	r2, [r4, #4]
   28c6c:	mov	r3, #65280	; 0xff00
   28c70:	movt	r3, #3
   28c74:	and	r3, r3, r2
   28c78:	cmp	r3, #0
   28c7c:	beq	28cb4 <__assert_fail@plt+0x17110>
   28c80:	ldr	r2, [sl, #88]	; 0x58
   28c84:	ldr	r1, [sp, #28]
   28c88:	mov	r0, sl
   28c8c:	bl	23714 <__assert_fail@plt+0x11b70>
   28c90:	ldr	r3, [r4, #4]
   28c94:	ubfx	r3, r3, #8, #10
   28c98:	tst	r3, #4
   28c9c:	beq	28bfc <__assert_fail@plt+0x17058>
   28ca0:	tst	r0, #1
   28ca4:	beq	28c2c <__assert_fail@plt+0x17088>
   28ca8:	tst	r3, #8
   28cac:	beq	28c0c <__assert_fail@plt+0x17068>
   28cb0:	b	28c2c <__assert_fail@plt+0x17088>
   28cb4:	ldr	r9, [sl, #108]	; 0x6c
   28cb8:	ldr	r1, [sp, #28]
   28cbc:	mov	r0, sl
   28cc0:	bl	200ec <__assert_fail@plt+0xe548>
   28cc4:	cmn	r0, #1
   28cc8:	beq	28cf8 <__assert_fail@plt+0x17154>
   28ccc:	add	r0, r0, #1
   28cd0:	add	r0, r0, r0, lsl #1
   28cd4:	ldr	r3, [sl, #116]	; 0x74
   28cd8:	add	r3, r3, r0, lsl #3
   28cdc:	ldr	r2, [r3, #-24]	; 0xffffffe8
   28ce0:	cmp	r8, r2
   28ce4:	beq	29068 <__assert_fail@plt+0x174c4>
   28ce8:	add	r3, r3, #24
   28cec:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   28cf0:	cmp	r2, #0
   28cf4:	bne	28cdc <__assert_fail@plt+0x17138>
   28cf8:	ldr	r3, [sl, #84]	; 0x54
   28cfc:	str	r3, [sp, #44]	; 0x2c
   28d00:	ldr	r3, [r3]
   28d04:	ldr	r3, [r3, r8, lsl #3]
   28d08:	str	r3, [sp, #48]	; 0x30
   28d0c:	ldr	r3, [sl, #124]	; 0x7c
   28d10:	cmp	r3, #0
   28d14:	ble	29068 <__assert_fail@plt+0x174c4>
   28d18:	ldr	r3, [sl, #4]
   28d1c:	mov	r2, #0
   28d20:	str	r2, [sp, #32]
   28d24:	str	fp, [sp, #52]	; 0x34
   28d28:	str	r8, [sp, #36]	; 0x24
   28d2c:	str	r9, [sp, #56]	; 0x38
   28d30:	mov	fp, r3
   28d34:	str	r7, [sp, #60]	; 0x3c
   28d38:	b	28e10 <__assert_fail@plt+0x1726c>
   28d3c:	mov	r2, r5
   28d40:	ldr	r3, [sp, #24]
   28d44:	add	r1, fp, r3
   28d48:	add	r0, fp, r7
   28d4c:	bl	117c0 <memcmp@plt>
   28d50:	cmp	r0, #0
   28d54:	bne	28de8 <__assert_fail@plt+0x17244>
   28d58:	add	r7, r7, r5
   28d5c:	ldr	r3, [sp, #28]
   28d60:	str	r3, [sp]
   28d64:	ldr	r3, [sp, #36]	; 0x24
   28d68:	mov	r2, r8
   28d6c:	mov	r1, r4
   28d70:	mov	r0, sl
   28d74:	bl	289e4 <__assert_fail@plt+0x16e40>
   28d78:	ldr	fp, [sl, #4]
   28d7c:	cmp	r0, #1
   28d80:	bhi	2909c <__assert_fail@plt+0x174f8>
   28d84:	add	r6, r6, #1
   28d88:	str	r9, [sp, #24]
   28d8c:	ldr	r3, [r4, #16]
   28d90:	cmp	r6, r3
   28d94:	bge	28e5c <__assert_fail@plt+0x172b8>
   28d98:	ldr	r3, [r4, #20]
   28d9c:	ldr	r8, [r3, r6, lsl #2]
   28da0:	ldr	r9, [r8, #4]
   28da4:	ldr	r3, [sp, #24]
   28da8:	sub	r5, r9, r3
   28dac:	cmp	r5, #0
   28db0:	ble	28d58 <__assert_fail@plt+0x171b4>
   28db4:	add	r1, r5, r7
   28db8:	ldr	r3, [sl, #28]
   28dbc:	cmp	r1, r3
   28dc0:	ble	28d3c <__assert_fail@plt+0x17198>
   28dc4:	ldr	r3, [sl, #48]	; 0x30
   28dc8:	cmp	r1, r3
   28dcc:	bgt	28de8 <__assert_fail@plt+0x17244>
   28dd0:	mov	r0, sl
   28dd4:	bl	23ac4 <__assert_fail@plt+0x11f20>
   28dd8:	cmp	r0, #0
   28ddc:	bne	292a8 <__assert_fail@plt+0x17704>
   28de0:	ldr	fp, [sl, #4]
   28de4:	b	28d3c <__assert_fail@plt+0x17198>
   28de8:	ldr	r3, [r4, #16]
   28dec:	cmp	r3, r6
   28df0:	ble	28e58 <__assert_fail@plt+0x172b4>
   28df4:	ldr	r3, [sp, #32]
   28df8:	add	r3, r3, #1
   28dfc:	mov	r2, r3
   28e00:	str	r3, [sp, #32]
   28e04:	ldr	r3, [sl, #124]	; 0x7c
   28e08:	cmp	r2, r3
   28e0c:	bge	29058 <__assert_fail@plt+0x174b4>
   28e10:	ldr	r3, [sl, #132]	; 0x84
   28e14:	ldr	r2, [sp, #32]
   28e18:	ldr	r4, [r3, r2, lsl #2]
   28e1c:	ldr	r2, [r4, #4]
   28e20:	ldr	r3, [sp, #44]	; 0x2c
   28e24:	ldr	r3, [r3]
   28e28:	ldr	r3, [r3, r2, lsl #3]
   28e2c:	ldr	r2, [sp, #48]	; 0x30
   28e30:	cmp	r2, r3
   28e34:	bne	28df4 <__assert_fail@plt+0x17250>
   28e38:	ldr	r3, [r4]
   28e3c:	str	r3, [sp, #24]
   28e40:	ldr	r3, [r4, #16]
   28e44:	cmp	r3, #0
   28e48:	ble	28e7c <__assert_fail@plt+0x172d8>
   28e4c:	ldr	r7, [sp, #28]
   28e50:	mov	r6, #0
   28e54:	b	28d98 <__assert_fail@plt+0x171f4>
   28e58:	ldr	r9, [sp, #24]
   28e5c:	cmp	r6, #0
   28e60:	addgt	r9, r9, #1
   28e64:	ldr	r3, [sp, #28]
   28e68:	cmp	r3, r9
   28e6c:	blt	28df4 <__assert_fail@plt+0x17250>
   28e70:	mov	r8, #1
   28e74:	ldr	r6, [sp, #48]	; 0x30
   28e78:	b	28f9c <__assert_fail@plt+0x173f8>
   28e7c:	ldr	r7, [sp, #28]
   28e80:	ldr	r9, [sp, #24]
   28e84:	b	28e64 <__assert_fail@plt+0x172c0>
   28e88:	ldr	r3, [sl, #48]	; 0x30
   28e8c:	cmp	r3, r7
   28e90:	ble	28df4 <__assert_fail@plt+0x17250>
   28e94:	add	r1, r7, #1
   28e98:	mov	r0, sl
   28e9c:	bl	21518 <__assert_fail@plt+0xf974>
   28ea0:	cmp	r0, #0
   28ea4:	bne	292a8 <__assert_fail@plt+0x17704>
   28ea8:	ldr	fp, [sl, #4]
   28eac:	b	28fb8 <__assert_fail@plt+0x17414>
   28eb0:	add	r3, r3, #1
   28eb4:	cmp	ip, r3
   28eb8:	beq	28f8c <__assert_fail@plt+0x173e8>
   28ebc:	ldr	r5, [r2, #4]!
   28ec0:	add	r1, r0, r5, lsl #3
   28ec4:	ldrb	r1, [r1, #4]
   28ec8:	cmp	r1, #9
   28ecc:	bne	28eb0 <__assert_fail@plt+0x1730c>
   28ed0:	ldr	r1, [r0, r5, lsl #3]
   28ed4:	cmp	r6, r1
   28ed8:	bne	28eb0 <__assert_fail@plt+0x1730c>
   28edc:	cmn	r5, #1
   28ee0:	beq	28f8c <__assert_fail@plt+0x173e8>
   28ee4:	ldr	r3, [r4, #8]
   28ee8:	cmp	r3, #0
   28eec:	beq	29008 <__assert_fail@plt+0x17464>
   28ef0:	ldr	r3, [r4]
   28ef4:	ldr	r2, [r4, #4]
   28ef8:	ldr	r1, [r4, #8]
   28efc:	mov	r0, #9
   28f00:	str	r0, [sp, #8]
   28f04:	str	r9, [sp, #4]
   28f08:	str	r5, [sp]
   28f0c:	mov	r0, sl
   28f10:	bl	28374 <__assert_fail@plt+0x167d0>
   28f14:	cmp	r0, #1
   28f18:	beq	28f8c <__assert_fail@plt+0x173e8>
   28f1c:	cmp	r0, #0
   28f20:	bne	292a8 <__assert_fail@plt+0x17704>
   28f24:	ldr	r3, [r4, #12]
   28f28:	ldr	r2, [r4, #16]
   28f2c:	cmp	r2, r3
   28f30:	beq	29030 <__assert_fail@plt+0x1748c>
   28f34:	mov	r1, #20
   28f38:	mov	r0, r8
   28f3c:	bl	2ef9c <__assert_fail@plt+0x1d3f8>
   28f40:	subs	r2, r0, #0
   28f44:	beq	292a4 <__assert_fail@plt+0x17700>
   28f48:	ldr	r1, [r4, #16]
   28f4c:	ldr	r3, [r4, #20]
   28f50:	str	r2, [r3, r1, lsl #2]
   28f54:	str	r5, [r2]
   28f58:	str	r9, [r2, #4]
   28f5c:	ldr	r3, [r4, #16]
   28f60:	add	r3, r3, #1
   28f64:	str	r3, [r4, #16]
   28f68:	ldr	r3, [sp, #28]
   28f6c:	str	r3, [sp]
   28f70:	ldr	r3, [sp, #36]	; 0x24
   28f74:	mov	r1, r4
   28f78:	mov	r0, sl
   28f7c:	bl	289e4 <__assert_fail@plt+0x16e40>
   28f80:	ldr	fp, [sl, #4]
   28f84:	cmp	r0, #1
   28f88:	bhi	2909c <__assert_fail@plt+0x174f8>
   28f8c:	add	r9, r9, #1
   28f90:	ldr	r3, [sp, #28]
   28f94:	cmp	r3, r9
   28f98:	blt	28df4 <__assert_fail@plt+0x17250>
   28f9c:	ldr	r3, [r4]
   28fa0:	sub	r3, r9, r3
   28fa4:	cmp	r3, #0
   28fa8:	ble	28fd4 <__assert_fail@plt+0x17430>
   28fac:	ldr	r3, [sl, #28]
   28fb0:	cmp	r3, r7
   28fb4:	ble	28e88 <__assert_fail@plt+0x172e4>
   28fb8:	add	r1, r7, #1
   28fbc:	add	r3, fp, r9
   28fc0:	ldrb	r2, [fp, r7]
   28fc4:	ldrb	r3, [r3, #-1]
   28fc8:	cmp	r2, r3
   28fcc:	bne	28df4 <__assert_fail@plt+0x17250>
   28fd0:	mov	r7, r1
   28fd4:	ldr	r3, [sl, #100]	; 0x64
   28fd8:	ldr	r3, [r3, r9, lsl #2]
   28fdc:	cmp	r3, #0
   28fe0:	beq	28f8c <__assert_fail@plt+0x173e8>
   28fe4:	ldr	ip, [r3, #8]
   28fe8:	cmp	ip, #0
   28fec:	ble	28f8c <__assert_fail@plt+0x173e8>
   28ff0:	ldr	r2, [sp, #44]	; 0x2c
   28ff4:	ldr	r0, [r2]
   28ff8:	ldr	r2, [r3, #12]
   28ffc:	sub	r2, r2, #4
   29000:	mov	r3, #0
   29004:	b	28ebc <__assert_fail@plt+0x17318>
   29008:	ldr	r1, [r4]
   2900c:	sub	r1, r9, r1
   29010:	add	r1, r1, #1
   29014:	mov	r0, #12
   29018:	bl	2ef9c <__assert_fail@plt+0x1d3f8>
   2901c:	str	r0, [r4, #8]
   29020:	cmp	r0, #0
   29024:	bne	28ef0 <__assert_fail@plt+0x1734c>
   29028:	mov	r0, #12
   2902c:	b	292a8 <__assert_fail@plt+0x17704>
   29030:	lsl	r3, r3, #1
   29034:	add	fp, r3, #1
   29038:	lsl	r1, fp, #2
   2903c:	ldr	r0, [r4, #20]
   29040:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   29044:	cmp	r0, #0
   29048:	beq	292a4 <__assert_fail@plt+0x17700>
   2904c:	str	r0, [r4, #20]
   29050:	str	fp, [r4, #12]
   29054:	b	28f34 <__assert_fail@plt+0x17390>
   29058:	ldr	fp, [sp, #52]	; 0x34
   2905c:	ldr	r8, [sp, #36]	; 0x24
   29060:	ldr	r9, [sp, #56]	; 0x38
   29064:	ldr	r7, [sp, #60]	; 0x3c
   29068:	mov	r3, #0
   2906c:	str	r3, [sp, #76]	; 0x4c
   29070:	lsl	r3, r8, #2
   29074:	str	r3, [sp, #44]	; 0x2c
   29078:	ldr	r3, [sl, #108]	; 0x6c
   2907c:	cmp	r3, r9
   29080:	ble	28c2c <__assert_fail@plt+0x17088>
   29084:	add	r3, r8, r8, lsl #1
   29088:	lsl	r3, r3, #2
   2908c:	str	r3, [sp, #48]	; 0x30
   29090:	ldr	r6, [sp, #28]
   29094:	str	r7, [sp, #52]	; 0x34
   29098:	b	29144 <__assert_fail@plt+0x175a0>
   2909c:	str	r0, [sp, #76]	; 0x4c
   290a0:	ldr	r0, [sp, #76]	; 0x4c
   290a4:	add	sp, sp, #84	; 0x54
   290a8:	ldrd	r4, [sp]
   290ac:	ldrd	r6, [sp, #8]
   290b0:	ldrd	r8, [sp, #16]
   290b4:	ldrd	sl, [sp, #24]
   290b8:	add	sp, sp, #32
   290bc:	pop	{pc}		; (ldr pc, [sp], #4)
   290c0:	ldr	r2, [fp, #12]
   290c4:	ldr	r1, [sp, #44]	; 0x2c
   290c8:	ldr	r2, [r2, r1]
   290cc:	add	r2, r2, r2, lsl #1
   290d0:	ldr	r1, [fp, #24]
   290d4:	add	r2, r1, r2, lsl #2
   290d8:	str	r2, [sp, #24]
   290dc:	b	2919c <__assert_fail@plt+0x175f8>
   290e0:	ldr	r3, [sp, #32]
   290e4:	ldr	r2, [sp, #24]
   290e8:	mov	r1, fp
   290ec:	add	r0, sp, #76	; 0x4c
   290f0:	bl	2253c <__assert_fail@plt+0x10998>
   290f4:	str	r0, [r5, r4, lsl #2]
   290f8:	ldr	r3, [sl, #100]	; 0x64
   290fc:	ldr	r3, [r3, r4, lsl #2]
   29100:	cmp	r3, #0
   29104:	bne	29230 <__assert_fail@plt+0x1768c>
   29108:	ldr	r3, [sp, #76]	; 0x4c
   2910c:	cmp	r3, #0
   29110:	beq	29230 <__assert_fail@plt+0x1768c>
   29114:	b	290a0 <__assert_fail@plt+0x174fc>
   29118:	ldr	r0, [sp, #72]	; 0x48
   2911c:	bl	17750 <__assert_fail@plt+0x5bac>
   29120:	b	290a0 <__assert_fail@plt+0x174fc>
   29124:	ldr	r3, [sp, #76]	; 0x4c
   29128:	cmp	r3, #0
   2912c:	beq	29230 <__assert_fail@plt+0x1768c>
   29130:	b	290a0 <__assert_fail@plt+0x174fc>
   29134:	add	r9, r9, #1
   29138:	ldr	r3, [sl, #108]	; 0x6c
   2913c:	cmp	r3, r9
   29140:	ble	29290 <__assert_fail@plt+0x176ec>
   29144:	add	r3, r9, r9, lsl #1
   29148:	ldr	r2, [sl, #116]	; 0x74
   2914c:	add	r1, r2, r3, lsl #3
   29150:	ldr	r3, [r2, r3, lsl #3]
   29154:	cmp	r3, r8
   29158:	bne	29134 <__assert_fail@plt+0x17590>
   2915c:	ldr	r3, [r1, #4]
   29160:	cmp	r3, r6
   29164:	bne	29134 <__assert_fail@plt+0x17590>
   29168:	ldr	r3, [r1, #12]
   2916c:	ldr	r4, [r1, #8]
   29170:	subs	r7, r3, r4
   29174:	bne	290c0 <__assert_fail@plt+0x1751c>
   29178:	ldr	r2, [fp, #20]
   2917c:	ldr	r1, [sp, #48]	; 0x30
   29180:	add	r2, r2, r1
   29184:	ldr	r2, [r2, #8]
   29188:	ldr	r2, [r2]
   2918c:	add	r2, r2, r2, lsl #1
   29190:	ldr	r1, [fp, #24]
   29194:	add	r2, r1, r2, lsl #2
   29198:	str	r2, [sp, #24]
   2919c:	add	r3, r3, r6
   291a0:	sub	r4, r3, r4
   291a4:	ldr	r2, [sl, #88]	; 0x58
   291a8:	sub	r1, r4, #1
   291ac:	mov	r0, sl
   291b0:	bl	23714 <__assert_fail@plt+0x11b70>
   291b4:	str	r0, [sp, #32]
   291b8:	ldr	r5, [sl, #100]	; 0x64
   291bc:	ldr	r3, [r5, r4, lsl #2]
   291c0:	ldr	r2, [sp, #40]	; 0x28
   291c4:	ldr	r2, [r5, r2]
   291c8:	cmp	r2, #0
   291cc:	ldrne	r2, [r2, #8]
   291d0:	moveq	r2, #0
   291d4:	str	r2, [sp, #36]	; 0x24
   291d8:	cmp	r3, #0
   291dc:	beq	290e0 <__assert_fail@plt+0x1753c>
   291e0:	ldr	r2, [sp, #24]
   291e4:	ldr	r1, [r3, #40]	; 0x28
   291e8:	add	r0, sp, #64	; 0x40
   291ec:	bl	20d68 <__assert_fail@plt+0xf1c4>
   291f0:	str	r0, [sp, #76]	; 0x4c
   291f4:	cmp	r0, #0
   291f8:	bne	29118 <__assert_fail@plt+0x17574>
   291fc:	ldr	r5, [sl, #100]	; 0x64
   29200:	ldr	r3, [sp, #32]
   29204:	add	r2, sp, #64	; 0x40
   29208:	mov	r1, fp
   2920c:	add	r0, sp, #76	; 0x4c
   29210:	bl	2253c <__assert_fail@plt+0x10998>
   29214:	str	r0, [r5, r4, lsl #2]
   29218:	ldr	r0, [sp, #72]	; 0x48
   2921c:	bl	17750 <__assert_fail@plt+0x5bac>
   29220:	ldr	r3, [sl, #100]	; 0x64
   29224:	ldr	r3, [r3, r4, lsl #2]
   29228:	cmp	r3, #0
   2922c:	beq	29124 <__assert_fail@plt+0x17580>
   29230:	cmp	r7, #0
   29234:	bne	29134 <__assert_fail@plt+0x17590>
   29238:	ldr	r3, [sl, #100]	; 0x64
   2923c:	ldr	r2, [sp, #40]	; 0x28
   29240:	ldr	r3, [r3, r2]
   29244:	ldr	r3, [r3, #8]
   29248:	ldr	r2, [sp, #36]	; 0x24
   2924c:	cmp	r3, r2
   29250:	ble	29134 <__assert_fail@plt+0x17590>
   29254:	mov	r2, r6
   29258:	ldr	r4, [sp, #24]
   2925c:	mov	r1, r4
   29260:	mov	r0, sl
   29264:	bl	23990 <__assert_fail@plt+0x11dec>
   29268:	str	r0, [sp, #76]	; 0x4c
   2926c:	cmp	r0, #0
   29270:	bne	290a0 <__assert_fail@plt+0x174fc>
   29274:	mov	r1, r4
   29278:	mov	r0, sl
   2927c:	bl	28bb0 <__assert_fail@plt+0x1700c>
   29280:	str	r0, [sp, #76]	; 0x4c
   29284:	cmp	r0, #0
   29288:	beq	29134 <__assert_fail@plt+0x17590>
   2928c:	b	290a0 <__assert_fail@plt+0x174fc>
   29290:	ldr	r7, [sp, #52]	; 0x34
   29294:	b	28c2c <__assert_fail@plt+0x17088>
   29298:	mov	r3, #0
   2929c:	str	r3, [sp, #76]	; 0x4c
   292a0:	b	290a0 <__assert_fail@plt+0x174fc>
   292a4:	mov	r0, #12
   292a8:	str	r0, [sp, #76]	; 0x4c
   292ac:	b	290a0 <__assert_fail@plt+0x174fc>
   292b0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   292b4:	strd	r6, [sp, #8]
   292b8:	strd	r8, [sp, #16]
   292bc:	str	sl, [sp, #24]
   292c0:	str	lr, [sp, #28]
   292c4:	sub	sp, sp, #16
   292c8:	mov	r8, r0
   292cc:	mov	r4, r1
   292d0:	ldr	r7, [r1, #84]	; 0x54
   292d4:	ldr	r6, [r1, #40]	; 0x28
   292d8:	ldr	r3, [r1, #104]	; 0x68
   292dc:	cmp	r3, r6
   292e0:	bge	29324 <__assert_fail@plt+0x17780>
   292e4:	ldr	r3, [r1, #100]	; 0x64
   292e8:	str	r2, [r3, r6, lsl #2]
   292ec:	str	r6, [r1, #104]	; 0x68
   292f0:	mov	r5, r2
   292f4:	ldr	r3, [r7, #76]	; 0x4c
   292f8:	cmp	r3, #0
   292fc:	cmpne	r5, #0
   29300:	bne	293f4 <__assert_fail@plt+0x17850>
   29304:	mov	r0, r5
   29308:	add	sp, sp, #16
   2930c:	ldrd	r4, [sp]
   29310:	ldrd	r6, [sp, #8]
   29314:	ldrd	r8, [sp, #16]
   29318:	ldr	sl, [sp, #24]
   2931c:	add	sp, sp, #28
   29320:	pop	{pc}		; (ldr pc, [sp], #4)
   29324:	ldr	r9, [r1, #100]	; 0x64
   29328:	ldr	r3, [r9, r6, lsl #2]
   2932c:	cmp	r3, #0
   29330:	streq	r2, [r9, r6, lsl #2]
   29334:	moveq	r5, r2
   29338:	beq	292f4 <__assert_fail@plt+0x17750>
   2933c:	ldr	r3, [r3, #40]	; 0x28
   29340:	cmp	r2, #0
   29344:	beq	293b4 <__assert_fail@plt+0x17810>
   29348:	ldr	r9, [r2, #40]	; 0x28
   2934c:	mov	r2, r3
   29350:	mov	r1, r9
   29354:	add	r0, sp, #4
   29358:	bl	20d68 <__assert_fail@plt+0xf1c4>
   2935c:	str	r0, [r8]
   29360:	cmp	r0, #0
   29364:	movne	r5, #0
   29368:	bne	29304 <__assert_fail@plt+0x17760>
   2936c:	ldr	r1, [r4, #40]	; 0x28
   29370:	ldr	r2, [r4, #88]	; 0x58
   29374:	sub	r1, r1, #1
   29378:	mov	r0, r4
   2937c:	bl	23714 <__assert_fail@plt+0x11b70>
   29380:	ldr	sl, [r4, #100]	; 0x64
   29384:	mov	r3, r0
   29388:	add	r2, sp, #4
   2938c:	mov	r1, r7
   29390:	mov	r0, r8
   29394:	bl	2253c <__assert_fail@plt+0x10998>
   29398:	mov	r5, r0
   2939c:	str	r0, [sl, r6, lsl #2]
   293a0:	cmp	r9, #0
   293a4:	beq	292f4 <__assert_fail@plt+0x17750>
   293a8:	ldr	r0, [sp, #12]
   293ac:	bl	17750 <__assert_fail@plt+0x5bac>
   293b0:	b	292f4 <__assert_fail@plt+0x17750>
   293b4:	ldrd	r0, [r3]
   293b8:	strd	r0, [sp, #4]
   293bc:	ldr	r3, [r3, #8]
   293c0:	str	r3, [sp, #12]
   293c4:	ldr	r2, [r4, #88]	; 0x58
   293c8:	sub	r1, r6, #1
   293cc:	mov	r0, r4
   293d0:	bl	23714 <__assert_fail@plt+0x11b70>
   293d4:	mov	r3, r0
   293d8:	add	r2, sp, #4
   293dc:	mov	r1, r7
   293e0:	mov	r0, r8
   293e4:	bl	2253c <__assert_fail@plt+0x10998>
   293e8:	mov	r5, r0
   293ec:	str	r0, [r9, r6, lsl #2]
   293f0:	b	292f4 <__assert_fail@plt+0x17750>
   293f4:	add	r7, r5, #4
   293f8:	mov	r2, r6
   293fc:	mov	r1, r7
   29400:	mov	r0, r4
   29404:	bl	23990 <__assert_fail@plt+0x11dec>
   29408:	str	r0, [r8]
   2940c:	cmp	r0, #0
   29410:	bne	29444 <__assert_fail@plt+0x178a0>
   29414:	ldrb	r3, [r5, #52]	; 0x34
   29418:	tst	r3, #64	; 0x40
   2941c:	beq	29304 <__assert_fail@plt+0x17760>
   29420:	mov	r1, r7
   29424:	mov	r0, r4
   29428:	bl	28bb0 <__assert_fail@plt+0x1700c>
   2942c:	str	r0, [r8]
   29430:	cmp	r0, #0
   29434:	bne	2944c <__assert_fail@plt+0x178a8>
   29438:	ldr	r3, [r4, #100]	; 0x64
   2943c:	ldr	r5, [r3, r6, lsl #2]
   29440:	b	29304 <__assert_fail@plt+0x17760>
   29444:	mov	r5, #0
   29448:	b	29304 <__assert_fail@plt+0x17760>
   2944c:	mov	r5, #0
   29450:	b	29304 <__assert_fail@plt+0x17760>
   29454:	strd	r4, [sp, #-36]!	; 0xffffffdc
   29458:	strd	r6, [sp, #8]
   2945c:	strd	r8, [sp, #16]
   29460:	strd	sl, [sp, #24]
   29464:	str	lr, [sp, #32]
   29468:	sub	sp, sp, #84	; 0x54
   2946c:	str	r0, [sp, #8]
   29470:	mov	r4, r1
   29474:	mov	sl, r2
   29478:	mov	r5, r3
   2947c:	ldr	r6, [r0, #84]	; 0x54
   29480:	mov	r3, #0
   29484:	str	r3, [sp, #76]	; 0x4c
   29488:	lsl	r3, sl, #2
   2948c:	str	r3, [sp, #12]
   29490:	ldr	r3, [r0, #100]	; 0x64
   29494:	ldr	fp, [r3, sl, lsl #2]
   29498:	cmp	fp, #0
   2949c:	beq	2959c <__assert_fail@plt+0x179f8>
   294a0:	add	fp, fp, #4
   294a4:	ldr	r3, [r5, #4]
   294a8:	cmp	r3, #0
   294ac:	beq	295a8 <__assert_fail@plt+0x17a04>
   294b0:	mov	r3, #0
   294b4:	str	r3, [sp, #48]	; 0x30
   294b8:	mov	r2, r5
   294bc:	mov	r1, r6
   294c0:	add	r0, sp, #48	; 0x30
   294c4:	bl	27e58 <__assert_fail@plt+0x162b4>
   294c8:	mov	r9, r0
   294cc:	ldr	r8, [sp, #48]	; 0x30
   294d0:	cmp	r8, #0
   294d4:	bne	295dc <__assert_fail@plt+0x17a38>
   294d8:	ldr	r3, [r0, #28]
   294dc:	cmp	r3, #0
   294e0:	bne	29548 <__assert_fail@plt+0x179a4>
   294e4:	add	r8, r0, #28
   294e8:	ldr	r1, [r5, #4]
   294ec:	mov	r0, r8
   294f0:	bl	20814 <__assert_fail@plt+0xec70>
   294f4:	mov	r7, r0
   294f8:	str	r0, [sp, #48]	; 0x30
   294fc:	cmp	r0, #0
   29500:	bne	29af0 <__assert_fail@plt+0x17f4c>
   29504:	ldr	r3, [r5, #4]
   29508:	cmp	r3, #0
   2950c:	ble	29548 <__assert_fail@plt+0x179a4>
   29510:	ldr	r3, [r5, #8]
   29514:	ldr	r1, [r3, r7, lsl #2]
   29518:	add	r1, r1, r1, lsl #1
   2951c:	ldr	r3, [r6, #28]
   29520:	add	r1, r3, r1, lsl #2
   29524:	mov	r0, r8
   29528:	bl	23314 <__assert_fail@plt+0x11770>
   2952c:	str	r0, [sp, #48]	; 0x30
   29530:	cmp	r0, #0
   29534:	bne	29af8 <__assert_fail@plt+0x17f54>
   29538:	add	r7, r7, #1
   2953c:	ldr	r3, [r5, #4]
   29540:	cmp	r7, r3
   29544:	blt	29510 <__assert_fail@plt+0x1796c>
   29548:	add	r2, r9, #28
   2954c:	mov	r1, fp
   29550:	mov	r0, r5
   29554:	bl	20b0c <__assert_fail@plt+0xef68>
   29558:	str	r0, [sp, #28]
   2955c:	str	r0, [sp, #76]	; 0x4c
   29560:	cmp	r0, #0
   29564:	bne	29ae8 <__assert_fail@plt+0x17f44>
   29568:	ldr	r3, [r4, #20]
   2956c:	cmp	r3, #0
   29570:	bne	295fc <__assert_fail@plt+0x17a58>
   29574:	ldr	r7, [r4]
   29578:	mov	r2, r5
   2957c:	mov	r1, r6
   29580:	add	r0, sp, #76	; 0x4c
   29584:	bl	27e58 <__assert_fail@plt+0x162b4>
   29588:	str	r0, [r7, sl, lsl #2]
   2958c:	ldr	r8, [sp, #76]	; 0x4c
   29590:	cmp	r8, #0
   29594:	beq	295c0 <__assert_fail@plt+0x17a1c>
   29598:	b	295dc <__assert_fail@plt+0x17a38>
   2959c:	ldr	r3, [r5, #4]
   295a0:	cmp	r3, #0
   295a4:	bne	2980c <__assert_fail@plt+0x17c68>
   295a8:	ldr	r3, [r4]
   295ac:	mov	r2, #0
   295b0:	str	r2, [r3, sl, lsl #2]
   295b4:	cmp	fp, r2
   295b8:	moveq	r8, r2
   295bc:	beq	295dc <__assert_fail@plt+0x17a38>
   295c0:	ldr	r3, [sp, #8]
   295c4:	ldr	r3, [r3, #100]	; 0x64
   295c8:	ldr	r3, [r3, sl, lsl #2]
   295cc:	ldrb	r3, [r3, #52]	; 0x34
   295d0:	tst	r3, #64	; 0x40
   295d4:	moveq	r8, #0
   295d8:	bne	2982c <__assert_fail@plt+0x17c88>
   295dc:	mov	r0, r8
   295e0:	add	sp, sp, #84	; 0x54
   295e4:	ldrd	r4, [sp]
   295e8:	ldrd	r6, [sp, #8]
   295ec:	ldrd	r8, [sp, #16]
   295f0:	ldrd	sl, [sp, #24]
   295f4:	add	sp, sp, #32
   295f8:	pop	{pc}		; (ldr pc, [sp], #4)
   295fc:	ldr	r3, [sp, #8]
   29600:	ldr	r3, [r3, #116]	; 0x74
   29604:	str	r3, [sp, #20]
   29608:	ble	29800 <__assert_fail@plt+0x17c5c>
   2960c:	mov	r7, r0
   29610:	str	fp, [sp, #24]
   29614:	b	296a0 <__assert_fail@plt+0x17afc>
   29618:	ldr	lr, [r5, #4]
   2961c:	cmp	lr, #0
   29620:	ble	29690 <__assert_fail@plt+0x17aec>
   29624:	ldr	r2, [r5, #8]
   29628:	add	lr, r2, lr, lsl #2
   2962c:	mvn	r8, #0
   29630:	mov	r1, r8
   29634:	b	2964c <__assert_fail@plt+0x17aa8>
   29638:	ldr	ip, [r0, r3, lsl #3]
   2963c:	cmp	r9, ip
   29640:	moveq	r1, r3
   29644:	cmp	r2, lr
   29648:	beq	29678 <__assert_fail@plt+0x17ad4>
   2964c:	ldr	r3, [r2], #4
   29650:	add	ip, r0, r3, lsl #3
   29654:	ldrb	ip, [ip, #4]
   29658:	cmp	ip, #8
   2965c:	beq	29638 <__assert_fail@plt+0x17a94>
   29660:	cmp	ip, #9
   29664:	bne	29644 <__assert_fail@plt+0x17aa0>
   29668:	ldr	ip, [r0, r3, lsl #3]
   2966c:	cmp	r9, ip
   29670:	moveq	r8, r3
   29674:	b	29644 <__assert_fail@plt+0x17aa0>
   29678:	str	r8, [sp, #16]
   2967c:	cmp	r1, #0
   29680:	bge	296f8 <__assert_fail@plt+0x17b54>
   29684:	ldr	r3, [sp, #16]
   29688:	cmp	r3, #0
   2968c:	bge	29724 <__assert_fail@plt+0x17b80>
   29690:	add	r7, r7, #1
   29694:	ldr	r3, [r4, #20]
   29698:	cmp	r7, r3
   2969c:	bge	297fc <__assert_fail@plt+0x17c58>
   296a0:	ldr	r3, [r4, #24]
   296a4:	ldr	r3, [r3, r7, lsl #2]
   296a8:	add	r3, r3, r3, lsl #1
   296ac:	ldr	ip, [sp, #20]
   296b0:	add	r2, ip, r3, lsl #3
   296b4:	ldr	r1, [r2, #8]
   296b8:	cmp	sl, r1
   296bc:	ble	29690 <__assert_fail@plt+0x17aec>
   296c0:	ldr	r1, [r2, #4]
   296c4:	cmp	sl, r1
   296c8:	bgt	29690 <__assert_fail@plt+0x17aec>
   296cc:	ldr	r0, [r6]
   296d0:	ldr	r3, [ip, r3, lsl #3]
   296d4:	ldr	r9, [r0, r3, lsl #3]
   296d8:	ldr	r3, [r2, #12]
   296dc:	cmp	sl, r3
   296e0:	beq	29618 <__assert_fail@plt+0x17a74>
   296e4:	ldr	r3, [r5, #4]
   296e8:	cmp	r3, #0
   296ec:	ldrgt	fp, [sp, #28]
   296f0:	bgt	297b0 <__assert_fail@plt+0x17c0c>
   296f4:	b	29690 <__assert_fail@plt+0x17aec>
   296f8:	ldr	r3, [sp, #24]
   296fc:	mov	r2, r5
   29700:	mov	r0, r6
   29704:	bl	24e80 <__assert_fail@plt+0x132dc>
   29708:	cmp	r0, #0
   2970c:	bne	29b00 <__assert_fail@plt+0x17f5c>
   29710:	cmp	r8, #0
   29714:	blt	29690 <__assert_fail@plt+0x17aec>
   29718:	ldr	r3, [r5, #4]
   2971c:	cmp	r3, #0
   29720:	ble	29690 <__assert_fail@plt+0x17aec>
   29724:	ldr	r9, [sp, #28]
   29728:	b	2973c <__assert_fail@plt+0x17b98>
   2972c:	add	r9, r9, #1
   29730:	ldr	r3, [r5, #4]
   29734:	cmp	r9, r3
   29738:	bge	29690 <__assert_fail@plt+0x17aec>
   2973c:	ldr	r3, [r5, #8]
   29740:	ldr	fp, [r3, r9, lsl #2]
   29744:	add	r8, fp, fp, lsl #1
   29748:	lsl	r8, r8, #2
   2974c:	ldr	r0, [r6, #28]
   29750:	ldr	r1, [sp, #16]
   29754:	add	r0, r0, r8
   29758:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   2975c:	cmp	r0, #0
   29760:	bne	2972c <__assert_fail@plt+0x17b88>
   29764:	ldr	r0, [r6, #24]
   29768:	ldr	r1, [sp, #16]
   2976c:	add	r0, r0, r8
   29770:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   29774:	cmp	r0, #0
   29778:	bne	2972c <__assert_fail@plt+0x17b88>
   2977c:	ldr	r3, [sp, #24]
   29780:	mov	r2, r5
   29784:	mov	r1, fp
   29788:	mov	r0, r6
   2978c:	bl	24e80 <__assert_fail@plt+0x132dc>
   29790:	cmp	r0, #0
   29794:	bne	29b08 <__assert_fail@plt+0x17f64>
   29798:	sub	r9, r9, #1
   2979c:	b	2972c <__assert_fail@plt+0x17b88>
   297a0:	add	fp, fp, #1
   297a4:	ldr	r3, [r5, #4]
   297a8:	cmp	fp, r3
   297ac:	bge	29690 <__assert_fail@plt+0x17aec>
   297b0:	ldr	r3, [r5, #8]
   297b4:	ldr	r1, [r3, fp, lsl #2]
   297b8:	ldr	r2, [r6]
   297bc:	add	r3, r2, r1, lsl #3
   297c0:	ldrb	r3, [r3, #4]
   297c4:	sub	r3, r3, #8
   297c8:	cmp	r3, #1
   297cc:	bhi	297a0 <__assert_fail@plt+0x17bfc>
   297d0:	ldr	r3, [r2, r1, lsl #3]
   297d4:	cmp	r9, r3
   297d8:	bne	297a0 <__assert_fail@plt+0x17bfc>
   297dc:	ldr	r3, [sp, #24]
   297e0:	mov	r2, r5
   297e4:	mov	r0, r6
   297e8:	bl	24e80 <__assert_fail@plt+0x132dc>
   297ec:	cmp	r0, #0
   297f0:	beq	297a0 <__assert_fail@plt+0x17bfc>
   297f4:	mov	r8, r0
   297f8:	b	295dc <__assert_fail@plt+0x17a38>
   297fc:	ldr	fp, [sp, #24]
   29800:	mov	r3, #0
   29804:	str	r3, [sp, #76]	; 0x4c
   29808:	b	29574 <__assert_fail@plt+0x179d0>
   2980c:	ldr	r4, [r1]
   29810:	mov	r2, r5
   29814:	mov	r1, r6
   29818:	add	r0, sp, #76	; 0x4c
   2981c:	bl	27e58 <__assert_fail@plt+0x162b4>
   29820:	str	r0, [r4, sl, lsl #2]
   29824:	ldr	r8, [sp, #76]	; 0x4c
   29828:	b	295dc <__assert_fail@plt+0x17a38>
   2982c:	mov	r1, sl
   29830:	ldr	r5, [sp, #8]
   29834:	mov	r0, r5
   29838:	bl	200ec <__assert_fail@plt+0xe548>
   2983c:	str	r0, [sp, #32]
   29840:	cmn	r0, #1
   29844:	moveq	r8, #0
   29848:	beq	295dc <__assert_fail@plt+0x17a38>
   2984c:	ldr	r7, [r5, #84]	; 0x54
   29850:	mov	r3, #0
   29854:	str	r3, [sp, #48]	; 0x30
   29858:	ldr	r3, [fp, #4]
   2985c:	cmp	r3, #0
   29860:	ble	29ae0 <__assert_fail@plt+0x17f3c>
   29864:	add	r3, r0, r0, lsl #1
   29868:	lsl	r3, r3, #3
   2986c:	str	r3, [sp, #36]	; 0x24
   29870:	mov	r3, #0
   29874:	add	r2, r4, #16
   29878:	str	r2, [sp, #24]
   2987c:	str	sl, [sp, #28]
   29880:	mov	sl, r3
   29884:	b	298a0 <__assert_fail@plt+0x17cfc>
   29888:	cmp	r2, #4
   2988c:	beq	298d4 <__assert_fail@plt+0x17d30>
   29890:	add	sl, sl, #1
   29894:	ldr	r3, [fp, #4]
   29898:	cmp	sl, r3
   2989c:	bge	29ab4 <__assert_fail@plt+0x17f10>
   298a0:	ldr	r3, [fp, #8]
   298a4:	ldr	r6, [r3, sl, lsl #2]
   298a8:	ldr	r3, [r7]
   298ac:	add	r3, r3, r6, lsl #3
   298b0:	ldrb	r2, [r3, #4]
   298b4:	ldr	r3, [r4, #8]
   298b8:	cmp	r6, r3
   298bc:	bne	29888 <__assert_fail@plt+0x17ce4>
   298c0:	ldr	r3, [r4, #12]
   298c4:	ldr	r1, [sp, #28]
   298c8:	cmp	r1, r3
   298cc:	bne	29888 <__assert_fail@plt+0x17ce4>
   298d0:	b	29890 <__assert_fail@plt+0x17cec>
   298d4:	ldr	r3, [sp, #8]
   298d8:	ldr	r5, [r3, #116]	; 0x74
   298dc:	ldr	r3, [sp, #36]	; 0x24
   298e0:	add	r5, r5, r3
   298e4:	add	r3, r6, r6, lsl #1
   298e8:	lsl	r3, r3, #2
   298ec:	str	r3, [sp, #20]
   298f0:	lsl	r3, r6, #2
   298f4:	str	r3, [sp, #16]
   298f8:	ldr	r3, [sp, #32]
   298fc:	str	fp, [sp, #40]	; 0x28
   29900:	str	sl, [sp, #44]	; 0x2c
   29904:	mov	sl, r3
   29908:	ldr	fp, [sp, #28]
   2990c:	b	299b0 <__assert_fail@plt+0x17e0c>
   29910:	ldr	r3, [r7, #20]
   29914:	ldr	r2, [sp, #20]
   29918:	add	r3, r3, r2
   2991c:	ldr	r3, [r3, #8]
   29920:	ldr	r8, [r3]
   29924:	b	299e0 <__assert_fail@plt+0x17e3c>
   29928:	ldrd	r2, [r4]
   2992c:	strd	r2, [sp, #48]	; 0x30
   29930:	ldrd	r2, [r4, #8]
   29934:	strd	r2, [sp, #56]	; 0x38
   29938:	ldrd	r2, [r4, #16]
   2993c:	strd	r2, [sp, #64]	; 0x40
   29940:	ldr	r3, [r4, #24]
   29944:	str	r3, [sp, #72]	; 0x48
   29948:	ldr	r1, [sp, #24]
   2994c:	add	r0, sp, #64	; 0x40
   29950:	bl	20ce0 <__assert_fail@plt+0xf13c>
   29954:	cmp	r0, #0
   29958:	beq	29a40 <__assert_fail@plt+0x17e9c>
   2995c:	mov	r8, r0
   29960:	b	29ac0 <__assert_fail@plt+0x17f1c>
   29964:	ldr	r3, [sp, #48]	; 0x30
   29968:	ldr	r2, [sp, #12]
   2996c:	str	r5, [r3, r2]
   29970:	mov	r1, sl
   29974:	add	r0, sp, #64	; 0x40
   29978:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   2997c:	sub	r1, r0, #1
   29980:	add	r0, sp, #64	; 0x40
   29984:	bl	1f78c <__assert_fail@plt+0xdbe8>
   29988:	add	r5, sl, sl, lsl #1
   2998c:	ldr	r3, [sp, #8]
   29990:	ldr	r3, [r3, #116]	; 0x74
   29994:	add	r5, r3, r5, lsl #3
   29998:	add	sl, sl, #1
   2999c:	add	r2, r5, #24
   299a0:	ldrb	r3, [r5, #20]
   299a4:	cmp	r3, #0
   299a8:	beq	29aa8 <__assert_fail@plt+0x17f04>
   299ac:	mov	r5, r2
   299b0:	ldr	r3, [r5]
   299b4:	cmp	r6, r3
   299b8:	bne	29998 <__assert_fail@plt+0x17df4>
   299bc:	ldr	r3, [r5, #12]
   299c0:	ldr	r2, [r5, #8]
   299c4:	sub	r3, r3, r2
   299c8:	add	r9, fp, r3
   299cc:	cmp	r3, #0
   299d0:	beq	29910 <__assert_fail@plt+0x17d6c>
   299d4:	ldr	r3, [r7, #12]
   299d8:	ldr	r2, [sp, #16]
   299dc:	ldr	r8, [r3, r2]
   299e0:	ldr	r3, [r4, #12]
   299e4:	cmp	r9, r3
   299e8:	bgt	29998 <__assert_fail@plt+0x17df4>
   299ec:	ldr	r3, [r4]
   299f0:	ldr	r0, [r3, r9, lsl #2]
   299f4:	cmp	r0, #0
   299f8:	beq	29998 <__assert_fail@plt+0x17df4>
   299fc:	mov	r1, r8
   29a00:	add	r0, r0, #4
   29a04:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   29a08:	cmp	r0, #0
   29a0c:	beq	29998 <__assert_fail@plt+0x17df4>
   29a10:	str	r9, [sp, #4]
   29a14:	str	r8, [sp]
   29a18:	mov	r3, fp
   29a1c:	mov	r2, r6
   29a20:	ldr	r1, [sp, #24]
   29a24:	ldr	r0, [sp, #8]
   29a28:	bl	201a8 <__assert_fail@plt+0xe604>
   29a2c:	cmp	r0, #0
   29a30:	bne	29998 <__assert_fail@plt+0x17df4>
   29a34:	ldr	r3, [sp, #48]	; 0x30
   29a38:	cmp	r3, #0
   29a3c:	beq	29928 <__assert_fail@plt+0x17d84>
   29a40:	str	r6, [sp, #56]	; 0x38
   29a44:	str	fp, [sp, #60]	; 0x3c
   29a48:	mov	r1, sl
   29a4c:	add	r0, sp, #64	; 0x40
   29a50:	bl	22d7c <__assert_fail@plt+0x111d8>
   29a54:	cmp	r0, #0
   29a58:	beq	29abc <__assert_fail@plt+0x17f18>
   29a5c:	ldr	r3, [sp, #48]	; 0x30
   29a60:	ldr	r2, [sp, #12]
   29a64:	ldr	r5, [r3, r2]
   29a68:	add	r1, sp, #48	; 0x30
   29a6c:	ldr	r0, [sp, #8]
   29a70:	bl	29b10 <__assert_fail@plt+0x17f6c>
   29a74:	cmp	r0, #0
   29a78:	bne	29ad8 <__assert_fail@plt+0x17f34>
   29a7c:	ldr	r1, [r4, #4]
   29a80:	cmp	r1, #0
   29a84:	beq	29964 <__assert_fail@plt+0x17dc0>
   29a88:	add	r3, fp, #1
   29a8c:	ldr	r2, [sp, #48]	; 0x30
   29a90:	mov	r0, r7
   29a94:	bl	28084 <__assert_fail@plt+0x164e0>
   29a98:	cmp	r0, #0
   29a9c:	beq	29964 <__assert_fail@plt+0x17dc0>
   29aa0:	mov	r8, r0
   29aa4:	b	29ac0 <__assert_fail@plt+0x17f1c>
   29aa8:	ldr	fp, [sp, #40]	; 0x28
   29aac:	ldr	sl, [sp, #44]	; 0x2c
   29ab0:	b	29890 <__assert_fail@plt+0x17cec>
   29ab4:	mov	r8, #0
   29ab8:	b	29ac0 <__assert_fail@plt+0x17f1c>
   29abc:	mov	r8, #12
   29ac0:	ldr	r3, [sp, #48]	; 0x30
   29ac4:	cmp	r3, #0
   29ac8:	beq	295dc <__assert_fail@plt+0x17a38>
   29acc:	ldr	r0, [sp, #72]	; 0x48
   29ad0:	bl	17750 <__assert_fail@plt+0x5bac>
   29ad4:	b	295dc <__assert_fail@plt+0x17a38>
   29ad8:	mov	r8, r0
   29adc:	b	29ac0 <__assert_fail@plt+0x17f1c>
   29ae0:	mov	r8, #0
   29ae4:	b	295dc <__assert_fail@plt+0x17a38>
   29ae8:	ldr	r8, [sp, #28]
   29aec:	b	295dc <__assert_fail@plt+0x17a38>
   29af0:	mov	r8, #12
   29af4:	b	295dc <__assert_fail@plt+0x17a38>
   29af8:	mov	r8, #12
   29afc:	b	295dc <__assert_fail@plt+0x17a38>
   29b00:	mov	r8, r0
   29b04:	b	295dc <__assert_fail@plt+0x17a38>
   29b08:	mov	r8, r0
   29b0c:	b	295dc <__assert_fail@plt+0x17a38>
   29b10:	strd	r4, [sp, #-36]!	; 0xffffffdc
   29b14:	strd	r6, [sp, #8]
   29b18:	strd	r8, [sp, #16]
   29b1c:	strd	sl, [sp, #24]
   29b20:	str	lr, [sp, #32]
   29b24:	sub	sp, sp, #60	; 0x3c
   29b28:	mov	sl, r0
   29b2c:	mov	r7, r1
   29b30:	ldr	fp, [r1, #12]
   29b34:	ldr	r1, [r1, #8]
   29b38:	add	r0, sp, #44	; 0x2c
   29b3c:	bl	207bc <__assert_fail@plt+0xec18>
   29b40:	subs	r4, r0, #0
   29b44:	bne	29dd0 <__assert_fail@plt+0x1822c>
   29b48:	add	r3, sp, #44	; 0x2c
   29b4c:	mov	r2, fp
   29b50:	mov	r1, r7
   29b54:	mov	r0, sl
   29b58:	bl	29454 <__assert_fail@plt+0x178b0>
   29b5c:	subs	r3, r0, #0
   29b60:	str	r3, [sp, #32]
   29b64:	bne	29db4 <__assert_fail@plt+0x18210>
   29b68:	cmp	fp, #0
   29b6c:	ble	29dbc <__assert_fail@plt+0x18218>
   29b70:	str	r3, [sp, #20]
   29b74:	mov	r9, sl
   29b78:	b	29d10 <__assert_fail@plt+0x1816c>
   29b7c:	ldr	r2, [sp, #16]
   29b80:	mov	r1, #0
   29b84:	bl	119e8 <memset@plt>
   29b88:	ldr	r0, [sp, #52]	; 0x34
   29b8c:	bl	17750 <__assert_fail@plt+0x5bac>
   29b90:	ldr	r4, [sp, #32]
   29b94:	b	29dd0 <__assert_fail@plt+0x1822c>
   29b98:	ldr	r3, [r7, #12]
   29b9c:	str	r3, [sp, #24]
   29ba0:	ldr	r2, [sp, #12]
   29ba4:	ldr	r3, [r2, #84]	; 0x54
   29ba8:	mov	r0, r3
   29bac:	mov	r3, r9
   29bb0:	mov	r1, fp
   29bb4:	str	r0, [sp, #36]	; 0x24
   29bb8:	bl	24b30 <__assert_fail@plt+0x12f8c>
   29bbc:	subs	r6, r0, #0
   29bc0:	ble	29cd8 <__assert_fail@plt+0x18134>
   29bc4:	add	r3, r9, r6
   29bc8:	ldr	r2, [sp, #24]
   29bcc:	cmp	r2, r3
   29bd0:	blt	29c04 <__assert_fail@plt+0x18060>
   29bd4:	ldr	r2, [r7]
   29bd8:	ldr	r0, [r2, r3, lsl #2]
   29bdc:	cmp	r0, #0
   29be0:	beq	29c84 <__assert_fail@plt+0x180e0>
   29be4:	ldr	r3, [sp, #36]	; 0x24
   29be8:	ldr	r3, [r3, #12]
   29bec:	ldr	r2, [sp, #8]
   29bf0:	ldr	r1, [r3, r2, lsl #2]
   29bf4:	add	r0, r0, #4
   29bf8:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   29bfc:	cmp	r0, #0
   29c00:	beq	29c84 <__assert_fail@plt+0x180e0>
   29c04:	ldr	r3, [r7, #20]
   29c08:	cmp	r3, #0
   29c0c:	beq	29c3c <__assert_fail@plt+0x18098>
   29c10:	ldr	r3, [r4, #12]
   29c14:	ldr	r2, [sp, #8]
   29c18:	ldr	r2, [r3, r2, lsl #2]
   29c1c:	str	r9, [sp, #4]
   29c20:	str	fp, [sp]
   29c24:	add	r3, r9, r6
   29c28:	ldr	r1, [sp, #28]
   29c2c:	ldr	r0, [sp, #12]
   29c30:	bl	201a8 <__assert_fail@plt+0xe604>
   29c34:	cmp	r0, #0
   29c38:	bne	29c50 <__assert_fail@plt+0x180ac>
   29c3c:	mov	r1, fp
   29c40:	add	r0, sp, #44	; 0x2c
   29c44:	bl	22d7c <__assert_fail@plt+0x111d8>
   29c48:	cmp	r0, #0
   29c4c:	beq	29dc4 <__assert_fail@plt+0x18220>
   29c50:	add	sl, sl, #1
   29c54:	ldr	r3, [r5, #20]
   29c58:	cmp	sl, r3
   29c5c:	bge	29ce4 <__assert_fail@plt+0x18140>
   29c60:	ldr	r3, [r5, #24]
   29c64:	ldr	fp, [r3, sl, lsl #2]
   29c68:	str	fp, [sp, #8]
   29c6c:	lsl	r8, fp, #3
   29c70:	ldr	r3, [r4]
   29c74:	add	r3, r3, r8
   29c78:	ldrb	r3, [r3, #6]
   29c7c:	tst	r3, #16
   29c80:	bne	29b98 <__assert_fail@plt+0x17ff4>
   29c84:	ldr	r1, [r4]
   29c88:	mov	r2, r9
   29c8c:	add	r1, r1, r8
   29c90:	ldr	r0, [sp, #12]
   29c94:	bl	23820 <__assert_fail@plt+0x11c7c>
   29c98:	cmp	r0, #0
   29c9c:	beq	29c50 <__assert_fail@plt+0x180ac>
   29ca0:	ldr	r3, [r7]
   29ca4:	ldr	r2, [sp, #16]
   29ca8:	ldr	r0, [r3, r2]
   29cac:	cmp	r0, #0
   29cb0:	beq	29c50 <__assert_fail@plt+0x180ac>
   29cb4:	ldr	r3, [r4, #12]
   29cb8:	ldr	r2, [sp, #8]
   29cbc:	ldr	r1, [r3, r2, lsl #2]
   29cc0:	add	r0, r0, #4
   29cc4:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   29cc8:	cmp	r0, #0
   29ccc:	beq	29c50 <__assert_fail@plt+0x180ac>
   29cd0:	mov	r6, #1
   29cd4:	b	29c04 <__assert_fail@plt+0x18060>
   29cd8:	cmp	r6, #0
   29cdc:	beq	29c84 <__assert_fail@plt+0x180e0>
   29ce0:	b	29c04 <__assert_fail@plt+0x18060>
   29ce4:	mov	fp, r9
   29ce8:	ldr	r9, [sp, #12]
   29cec:	add	r3, sp, #44	; 0x2c
   29cf0:	mov	r2, fp
   29cf4:	mov	r1, r7
   29cf8:	mov	r0, r9
   29cfc:	bl	29454 <__assert_fail@plt+0x178b0>
   29d00:	cmp	r0, #0
   29d04:	bne	29df0 <__assert_fail@plt+0x1824c>
   29d08:	cmp	fp, #0
   29d0c:	beq	29dac <__assert_fail@plt+0x18208>
   29d10:	ldr	r0, [r7]
   29d14:	lsl	r3, fp, #2
   29d18:	str	r3, [sp, #16]
   29d1c:	ldr	r3, [r0, fp, lsl #2]
   29d20:	cmp	r3, #0
   29d24:	ldreq	r3, [sp, #20]
   29d28:	addeq	r3, r3, #1
   29d2c:	ldrne	r3, [sp, #32]
   29d30:	str	r3, [sp, #20]
   29d34:	ldr	r3, [r9, #120]	; 0x78
   29d38:	ldr	r2, [sp, #20]
   29d3c:	cmp	r3, r2
   29d40:	blt	29b7c <__assert_fail@plt+0x17fd8>
   29d44:	mov	r3, #0
   29d48:	str	r3, [sp, #48]	; 0x30
   29d4c:	sub	fp, fp, #1
   29d50:	ldr	r3, [r9, #100]	; 0x64
   29d54:	ldr	r2, [sp, #16]
   29d58:	add	r3, r3, r2
   29d5c:	ldr	r5, [r3, #-4]
   29d60:	cmp	r5, #0
   29d64:	beq	29cec <__assert_fail@plt+0x18148>
   29d68:	ldr	r4, [r9, #84]	; 0x54
   29d6c:	ldr	r3, [r5, #20]
   29d70:	cmp	r3, #0
   29d74:	ble	29cec <__assert_fail@plt+0x18148>
   29d78:	ldr	r3, [r5, #24]
   29d7c:	ldr	r6, [r3]
   29d80:	str	r6, [sp, #8]
   29d84:	lsl	r8, r6, #3
   29d88:	ldr	r3, [r4]
   29d8c:	add	r3, r3, r8
   29d90:	ldr	sl, [sp, #32]
   29d94:	add	r2, r7, #16
   29d98:	str	r2, [sp, #28]
   29d9c:	str	r9, [sp, #12]
   29da0:	mov	r9, fp
   29da4:	mov	fp, r6
   29da8:	b	29c78 <__assert_fail@plt+0x180d4>
   29dac:	mov	r4, fp
   29db0:	b	29dc8 <__assert_fail@plt+0x18224>
   29db4:	ldr	r4, [sp, #32]
   29db8:	b	29dc8 <__assert_fail@plt+0x18224>
   29dbc:	ldr	r4, [sp, #32]
   29dc0:	b	29dc8 <__assert_fail@plt+0x18224>
   29dc4:	mov	r4, #12
   29dc8:	ldr	r0, [sp, #52]	; 0x34
   29dcc:	bl	17750 <__assert_fail@plt+0x5bac>
   29dd0:	mov	r0, r4
   29dd4:	add	sp, sp, #60	; 0x3c
   29dd8:	ldrd	r4, [sp]
   29ddc:	ldrd	r6, [sp, #8]
   29de0:	ldrd	r8, [sp, #16]
   29de4:	ldrd	sl, [sp, #24]
   29de8:	add	sp, sp, #32
   29dec:	pop	{pc}		; (ldr pc, [sp], #4)
   29df0:	mov	r4, r0
   29df4:	b	29dc8 <__assert_fail@plt+0x18224>
   29df8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   29dfc:	strd	r6, [sp, #8]
   29e00:	strd	r8, [sp, #16]
   29e04:	strd	sl, [sp, #24]
   29e08:	str	lr, [sp, #32]
   29e0c:	sub	sp, sp, #420	; 0x1a4
   29e10:	mov	r5, r0
   29e14:	str	r0, [sp, #20]
   29e18:	str	r1, [sp, #44]	; 0x2c
   29e1c:	str	r2, [sp, #60]	; 0x3c
   29e20:	mov	r4, r3
   29e24:	ldr	r6, [sp, #456]	; 0x1c8
   29e28:	ldr	sl, [r0]
   29e2c:	mov	r2, #136	; 0x88
   29e30:	mov	r1, #0
   29e34:	add	r0, sp, #276	; 0x114
   29e38:	bl	119e8 <memset@plt>
   29e3c:	str	sl, [sp, #360]	; 0x168
   29e40:	ldr	r2, [r5, #16]
   29e44:	str	r2, [sp, #32]
   29e48:	cmp	r2, #0
   29e4c:	beq	29e74 <__assert_fail@plt+0x182d0>
   29e50:	ldrb	r2, [r5, #28]
   29e54:	ubfx	r3, r2, #3, #1
   29e58:	cmp	r4, r6
   29e5c:	moveq	r3, #0
   29e60:	andne	r3, r3, #1
   29e64:	cmp	r3, #0
   29e68:	moveq	r3, #0
   29e6c:	streq	r3, [sp, #32]
   29e70:	bne	2a1c0 <__assert_fail@plt+0x1861c>
   29e74:	ldr	r3, [sp, #20]
   29e78:	ldr	r3, [r3, #24]
   29e7c:	ldr	r2, [sp, #464]	; 0x1d0
   29e80:	cmp	r3, r2
   29e84:	subcc	r2, r2, #1
   29e88:	subcc	r3, r2, r3
   29e8c:	movcs	r3, #0
   29e90:	str	r3, [sp, #72]	; 0x48
   29e94:	ldr	ip, [sp, #20]
   29e98:	ldr	r3, [ip, #8]
   29e9c:	cmp	r3, #0
   29ea0:	beq	2b3bc <__assert_fail@plt+0x19818>
   29ea4:	ldr	r3, [sl, #36]	; 0x24
   29ea8:	cmp	r3, #0
   29eac:	beq	2b3c8 <__assert_fail@plt+0x19824>
   29eb0:	ldr	r2, [sl, #40]	; 0x28
   29eb4:	cmp	r2, #0
   29eb8:	beq	2b3d4 <__assert_fail@plt+0x19830>
   29ebc:	ldr	r1, [sl, #44]	; 0x2c
   29ec0:	cmp	r1, #0
   29ec4:	beq	2b3e0 <__assert_fail@plt+0x1983c>
   29ec8:	ldr	r0, [sl, #48]	; 0x30
   29ecc:	cmp	r0, #0
   29ed0:	beq	2b3ec <__assert_fail@plt+0x19848>
   29ed4:	ldr	r3, [r3, #8]
   29ed8:	cmp	r3, #0
   29edc:	bne	29f18 <__assert_fail@plt+0x18374>
   29ee0:	ldr	r3, [r2, #8]
   29ee4:	cmp	r3, #0
   29ee8:	bne	29f18 <__assert_fail@plt+0x18374>
   29eec:	ldr	r2, [r1, #8]
   29ef0:	cmp	r2, #0
   29ef4:	beq	29f04 <__assert_fail@plt+0x18360>
   29ef8:	ldrsb	r2, [ip, #28]
   29efc:	cmp	r2, #0
   29f00:	blt	29f18 <__assert_fail@plt+0x18374>
   29f04:	cmp	r4, #0
   29f08:	cmpne	r6, #0
   29f0c:	bne	2b3f8 <__assert_fail@plt+0x19854>
   29f10:	mov	r6, r3
   29f14:	mov	r4, r3
   29f18:	ldr	r3, [sp, #464]	; 0x1d0
   29f1c:	ldr	r2, [sp, #72]	; 0x48
   29f20:	subs	r3, r3, r2
   29f24:	str	r3, [sp, #64]	; 0x40
   29f28:	movne	r5, #1
   29f2c:	bne	29f3c <__assert_fail@plt+0x18398>
   29f30:	ldr	r5, [sl, #76]	; 0x4c
   29f34:	adds	r5, r5, #0
   29f38:	movne	r5, #1
   29f3c:	ldr	r3, [sp, #20]
   29f40:	ldr	ip, [r3, #20]
   29f44:	str	ip, [sp, #68]	; 0x44
   29f48:	ldr	r2, [r3, #12]
   29f4c:	ldr	r0, [sl, #92]	; 0x5c
   29f50:	ldr	r3, [sl, #8]
   29f54:	add	r3, r3, #1
   29f58:	cmp	r3, r0
   29f5c:	movlt	r3, r0
   29f60:	ldr	lr, [sp, #60]	; 0x3c
   29f64:	add	r1, lr, #1
   29f68:	ldr	r7, [sp, #44]	; 0x2c
   29f6c:	str	r7, [sp, #276]	; 0x114
   29f70:	str	lr, [sp, #324]	; 0x144
   29f74:	str	lr, [sp, #320]	; 0x140
   29f78:	mov	r7, ip
   29f7c:	str	ip, [sp, #340]	; 0x154
   29f80:	and	ip, r2, #4194304	; 0x400000
   29f84:	ubfx	r2, r2, #22, #1
   29f88:	strb	r2, [sp, #348]	; 0x15c
   29f8c:	orrs	r2, r7, ip
   29f90:	movne	r2, #1
   29f94:	moveq	r2, #0
   29f98:	strb	r2, [sp, #351]	; 0x15f
   29f9c:	str	r0, [sp, #356]	; 0x164
   29fa0:	ldrb	r2, [sl, #88]	; 0x58
   29fa4:	ubfx	r0, r2, #2, #1
   29fa8:	strb	r0, [sp, #349]	; 0x15d
   29fac:	ubfx	r2, r2, #3, #1
   29fb0:	strb	r2, [sp, #350]	; 0x15e
   29fb4:	str	lr, [sp, #332]	; 0x14c
   29fb8:	str	lr, [sp, #328]	; 0x148
   29fbc:	cmp	r3, r1
   29fc0:	movlt	r1, r3
   29fc4:	add	r0, sp, #276	; 0x114
   29fc8:	bl	202a8 <__assert_fail@plt+0xe704>
   29fcc:	subs	r2, r0, #0
   29fd0:	str	r2, [sp, #76]	; 0x4c
   29fd4:	bne	2b350 <__assert_fail@plt+0x197ac>
   29fd8:	add	r3, sl, #96	; 0x60
   29fdc:	str	r3, [sp, #344]	; 0x158
   29fe0:	ldrb	r3, [sl, #88]	; 0x58
   29fe4:	ubfx	r3, r3, #4, #1
   29fe8:	strb	r3, [sp, #354]	; 0x162
   29fec:	ldrb	r3, [sp, #351]	; 0x15f
   29ff0:	cmp	r3, #0
   29ff4:	beq	2b500 <__assert_fail@plt+0x1995c>
   29ff8:	mov	r3, r2
   29ffc:	str	r3, [sp, #304]	; 0x130
   2a000:	str	r3, [sp, #308]	; 0x134
   2a004:	ldr	r3, [sp, #460]	; 0x1cc
   2a008:	str	r3, [sp, #332]	; 0x14c
   2a00c:	str	r3, [sp, #328]	; 0x148
   2a010:	ldr	r3, [sp, #20]
   2a014:	ldrb	r3, [r3, #28]
   2a018:	ubfx	r3, r3, #7, #1
   2a01c:	strb	r3, [sp, #353]	; 0x161
   2a020:	ldr	r7, [sl, #76]	; 0x4c
   2a024:	lsl	r7, r7, #1
   2a028:	ldr	r3, [sp, #472]	; 0x1d8
   2a02c:	str	r3, [sp, #364]	; 0x16c
   2a030:	mvn	r3, #0
   2a034:	str	r3, [sp, #368]	; 0x170
   2a038:	cmp	r7, #0
   2a03c:	ble	2a07c <__assert_fail@plt+0x184d8>
   2a040:	movw	r3, #43690	; 0xaaaa
   2a044:	movt	r3, #2730	; 0xaaa
   2a048:	cmp	r7, r3
   2a04c:	bhi	2b4f4 <__assert_fail@plt+0x19950>
   2a050:	add	r0, r7, r7, lsl #1
   2a054:	lsl	r0, r0, #3
   2a058:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2a05c:	str	r0, [sp, #392]	; 0x188
   2a060:	lsl	r0, r7, #2
   2a064:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2a068:	str	r0, [sp, #408]	; 0x198
   2a06c:	ldr	r3, [sp, #392]	; 0x188
   2a070:	cmp	r0, #0
   2a074:	cmpne	r3, #0
   2a078:	beq	2b4f4 <__assert_fail@plt+0x19950>
   2a07c:	str	r7, [sp, #388]	; 0x184
   2a080:	mov	r3, #1
   2a084:	str	r3, [sp, #396]	; 0x18c
   2a088:	str	r7, [sp, #404]	; 0x194
   2a08c:	ldr	r3, [sp, #64]	; 0x40
   2a090:	cmp	r3, #1
   2a094:	bls	2a1d8 <__assert_fail@plt+0x18634>
   2a098:	ldr	r0, [sp, #312]	; 0x138
   2a09c:	cmn	r0, #-1073741822	; 0xc0000002
   2a0a0:	bhi	2b35c <__assert_fail@plt+0x197b8>
   2a0a4:	add	r0, r0, #1
   2a0a8:	lsl	r0, r0, #2
   2a0ac:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2a0b0:	str	r0, [sp, #376]	; 0x178
   2a0b4:	cmp	r0, #0
   2a0b8:	beq	2b368 <__assert_fail@plt+0x197c4>
   2a0bc:	str	r4, [sp, #412]	; 0x19c
   2a0c0:	ldr	r3, [sp, #472]	; 0x1d8
   2a0c4:	and	r3, r3, #1
   2a0c8:	cmp	r3, #0
   2a0cc:	movne	r3, #4
   2a0d0:	moveq	r3, #6
   2a0d4:	str	r3, [sp, #336]	; 0x150
   2a0d8:	cmp	r4, r6
   2a0dc:	mvngt	r3, #0
   2a0e0:	movle	r3, #1
   2a0e4:	str	r3, [sp, #92]	; 0x5c
   2a0e8:	movlt	r3, r4
   2a0ec:	movge	r3, r6
   2a0f0:	str	r3, [sp, #56]	; 0x38
   2a0f4:	movge	r3, r4
   2a0f8:	movlt	r3, r6
   2a0fc:	str	r3, [sp, #48]	; 0x30
   2a100:	ldr	r3, [sl, #92]	; 0x5c
   2a104:	str	r3, [sp, #88]	; 0x58
   2a108:	ldr	r2, [sp, #32]
   2a10c:	cmp	r2, #0
   2a110:	beq	2a1e8 <__assert_fail@plt+0x18644>
   2a114:	cmp	r3, #1
   2a118:	moveq	r3, #4
   2a11c:	beq	2a140 <__assert_fail@plt+0x1859c>
   2a120:	ldr	r3, [sp, #20]
   2a124:	ldr	r3, [r3, #12]
   2a128:	and	r3, r3, #4194304	; 0x400000
   2a12c:	ldr	r2, [sp, #68]	; 0x44
   2a130:	orr	r3, r2, r3
   2a134:	cmp	r3, #0
   2a138:	ldr	r3, [sp, #76]	; 0x4c
   2a13c:	moveq	r3, #4
   2a140:	ldr	r2, [sp, #76]	; 0x4c
   2a144:	cmp	r4, r6
   2a148:	movle	r2, #2
   2a14c:	ldr	r1, [sp, #68]	; 0x44
   2a150:	cmp	r1, #0
   2a154:	orrne	r3, r3, #1
   2a158:	orr	r3, r3, r2
   2a15c:	str	r3, [sp, #80]	; 0x50
   2a160:	ldr	r3, [sp, #48]	; 0x30
   2a164:	cmp	r4, r3
   2a168:	movle	r3, #0
   2a16c:	movgt	r3, #1
   2a170:	ldr	r2, [sp, #56]	; 0x38
   2a174:	cmp	r4, r2
   2a178:	orrlt	r3, r3, #1
   2a17c:	str	r3, [sp, #84]	; 0x54
   2a180:	cmp	r3, #0
   2a184:	bne	2b374 <__assert_fail@plt+0x197d0>
   2a188:	str	r5, [sp, #16]
   2a18c:	add	r3, sp, #416	; 0x1a0
   2a190:	cmp	r4, r6
   2a194:	suble	r3, r3, #4
   2a198:	movgt	r3, #0
   2a19c:	str	r3, [sp, #96]	; 0x60
   2a1a0:	adds	r3, r3, #0
   2a1a4:	movne	r3, #1
   2a1a8:	str	r3, [sp, #100]	; 0x64
   2a1ac:	mov	r3, #65280	; 0xff00
   2a1b0:	movt	r3, #3
   2a1b4:	str	r3, [sp, #40]	; 0x28
   2a1b8:	str	sl, [sp, #52]	; 0x34
   2a1bc:	b	2b594 <__assert_fail@plt+0x199f0>
   2a1c0:	and	r2, r2, #1
   2a1c4:	cmp	r2, #0
   2a1c8:	ldr	r3, [sp, #32]
   2a1cc:	movne	r3, #0
   2a1d0:	str	r3, [sp, #32]
   2a1d4:	b	29e74 <__assert_fail@plt+0x182d0>
   2a1d8:	ldrb	r3, [sl, #88]	; 0x58
   2a1dc:	tst	r3, #2
   2a1e0:	beq	2a0bc <__assert_fail@plt+0x18518>
   2a1e4:	b	2a098 <__assert_fail@plt+0x184f4>
   2a1e8:	mov	r3, #8
   2a1ec:	str	r3, [sp, #80]	; 0x50
   2a1f0:	b	2a160 <__assert_fail@plt+0x185bc>
   2a1f4:	ldr	r5, [sp, #76]	; 0x4c
   2a1f8:	ldr	r4, [sp, #412]	; 0x19c
   2a1fc:	ldr	r3, [sp, #300]	; 0x12c
   2a200:	sub	r3, r4, r3
   2a204:	ldr	r2, [sp, #308]	; 0x134
   2a208:	cmp	r2, r3
   2a20c:	bhi	2a234 <__assert_fail@plt+0x18690>
   2a210:	ldr	r2, [sp, #472]	; 0x1d8
   2a214:	mov	r1, r4
   2a218:	add	r0, sp, #276	; 0x114
   2a21c:	bl	25064 <__assert_fail@plt+0x134c0>
   2a220:	subs	r3, r0, #0
   2a224:	str	r3, [sp, #24]
   2a228:	bne	2b390 <__assert_fail@plt+0x197ec>
   2a22c:	ldr	r3, [sp, #300]	; 0x12c
   2a230:	sub	r3, r4, r3
   2a234:	ldr	r2, [sp, #304]	; 0x130
   2a238:	cmp	r2, r3
   2a23c:	ldrhi	r2, [sp, #280]	; 0x118
   2a240:	ldrbhi	r3, [r2, r3]
   2a244:	movls	r3, r5
   2a248:	ldr	r2, [sp, #32]
   2a24c:	ldrb	r3, [r2, r3]
   2a250:	cmp	r3, #0
   2a254:	bne	2a44c <__assert_fail@plt+0x188a8>
   2a258:	ldr	r3, [sp, #92]	; 0x5c
   2a25c:	add	r4, r4, r3
   2a260:	str	r4, [sp, #412]	; 0x19c
   2a264:	ldr	r3, [sp, #48]	; 0x30
   2a268:	cmp	r4, r3
   2a26c:	movle	r3, #0
   2a270:	movgt	r3, #1
   2a274:	ldr	r2, [sp, #56]	; 0x38
   2a278:	cmp	r4, r2
   2a27c:	movge	r4, r3
   2a280:	orrlt	r4, r3, #1
   2a284:	cmp	r4, #0
   2a288:	beq	2a1f8 <__assert_fail@plt+0x18654>
   2a28c:	ldr	sl, [sp, #52]	; 0x34
   2a290:	mov	r3, #1
   2a294:	str	r3, [sp, #24]
   2a298:	b	2a3ec <__assert_fail@plt+0x18848>
   2a29c:	ldr	r2, [sp, #412]	; 0x19c
   2a2a0:	ldr	r3, [sp, #48]	; 0x30
   2a2a4:	cmp	r3, r2
   2a2a8:	ble	2a43c <__assert_fail@plt+0x18898>
   2a2ac:	ldr	r1, [sp, #44]	; 0x2c
   2a2b0:	add	r3, r1, r2
   2a2b4:	ldrb	r2, [r1, r2]
   2a2b8:	ldr	r1, [sp, #68]	; 0x44
   2a2bc:	ldrb	r2, [r1, r2]
   2a2c0:	ldr	r1, [sp, #32]
   2a2c4:	ldrb	r2, [r1, r2]
   2a2c8:	cmp	r2, #0
   2a2cc:	bne	2a44c <__assert_fail@plt+0x188a8>
   2a2d0:	ldr	r2, [sp, #44]	; 0x2c
   2a2d4:	sub	r1, r2, #1
   2a2d8:	ldr	r0, [sp, #48]	; 0x30
   2a2dc:	add	r1, r1, r0
   2a2e0:	rsb	ip, r2, #1
   2a2e4:	ldr	lr, [sp, #32]
   2a2e8:	ldr	r4, [sp, #68]	; 0x44
   2a2ec:	add	r0, ip, r3
   2a2f0:	cmp	r3, r1
   2a2f4:	beq	2a520 <__assert_fail@plt+0x1897c>
   2a2f8:	ldrb	r2, [r3, #1]!
   2a2fc:	ldrb	r2, [r4, r2]
   2a300:	ldrb	r2, [lr, r2]
   2a304:	cmp	r2, #0
   2a308:	beq	2a2ec <__assert_fail@plt+0x18748>
   2a30c:	str	r0, [sp, #412]	; 0x19c
   2a310:	b	2a44c <__assert_fail@plt+0x188a8>
   2a314:	ldr	r2, [sp, #412]	; 0x19c
   2a318:	ldr	r3, [sp, #48]	; 0x30
   2a31c:	cmp	r3, r2
   2a320:	ble	2a43c <__assert_fail@plt+0x18898>
   2a324:	ldr	r1, [sp, #44]	; 0x2c
   2a328:	add	r3, r1, r2
   2a32c:	ldrb	r2, [r1, r2]
   2a330:	ldr	r1, [sp, #32]
   2a334:	ldrb	r2, [r1, r2]
   2a338:	cmp	r2, #0
   2a33c:	bne	2a44c <__assert_fail@plt+0x188a8>
   2a340:	ldr	r2, [sp, #44]	; 0x2c
   2a344:	sub	r1, r2, #1
   2a348:	ldr	r0, [sp, #48]	; 0x30
   2a34c:	add	r1, r1, r0
   2a350:	rsb	ip, r2, #1
   2a354:	ldr	lr, [sp, #32]
   2a358:	add	r0, ip, r3
   2a35c:	cmp	r1, r3
   2a360:	beq	2a438 <__assert_fail@plt+0x18894>
   2a364:	ldrb	r2, [r3, #1]!
   2a368:	ldrb	r2, [lr, r2]
   2a36c:	cmp	r2, #0
   2a370:	beq	2a358 <__assert_fail@plt+0x187b4>
   2a374:	str	r0, [sp, #412]	; 0x19c
   2a378:	b	2a44c <__assert_fail@plt+0x188a8>
   2a37c:	ldr	r3, [sp, #412]	; 0x19c
   2a380:	ldr	r2, [sp, #56]	; 0x38
   2a384:	cmp	r2, r3
   2a388:	bgt	2a428 <__assert_fail@plt+0x18884>
   2a38c:	ldr	r1, [sp, #84]	; 0x54
   2a390:	ldr	ip, [sp, #76]	; 0x4c
   2a394:	mov	r0, #1
   2a398:	ldr	r4, [sp, #32]
   2a39c:	ldr	lr, [sp, #68]	; 0x44
   2a3a0:	ldr	r6, [sp, #56]	; 0x38
   2a3a4:	ldr	r7, [sp, #44]	; 0x2c
   2a3a8:	ldr	r5, [sp, #60]	; 0x3c
   2a3ac:	cmp	r5, r3
   2a3b0:	ldrbgt	r2, [r7, r3]
   2a3b4:	movle	r2, ip
   2a3b8:	cmp	lr, #0
   2a3bc:	ldrbne	r2, [lr, r2]
   2a3c0:	ldrb	r2, [r4, r2]
   2a3c4:	cmp	r2, #0
   2a3c8:	bne	2a568 <__assert_fail@plt+0x189c4>
   2a3cc:	sub	r3, r3, #1
   2a3d0:	mov	r1, r0
   2a3d4:	cmp	r3, r6
   2a3d8:	bge	2a3ac <__assert_fail@plt+0x18808>
   2a3dc:	ldr	sl, [sp, #52]	; 0x34
   2a3e0:	str	r3, [sp, #412]	; 0x19c
   2a3e4:	mov	r3, #1
   2a3e8:	str	r3, [sp, #24]
   2a3ec:	ldr	r0, [sp, #376]	; 0x178
   2a3f0:	bl	17750 <__assert_fail@plt+0x5bac>
   2a3f4:	ldr	r3, [sl, #76]	; 0x4c
   2a3f8:	cmp	r3, #0
   2a3fc:	bne	2b3a0 <__assert_fail@plt+0x197fc>
   2a400:	add	r0, sp, #276	; 0x114
   2a404:	bl	2288c <__assert_fail@plt+0x10ce8>
   2a408:	ldr	r0, [sp, #24]
   2a40c:	add	sp, sp, #420	; 0x1a4
   2a410:	ldrd	r4, [sp]
   2a414:	ldrd	r6, [sp, #8]
   2a418:	ldrd	r8, [sp, #16]
   2a41c:	ldrd	sl, [sp, #24]
   2a420:	add	sp, sp, #32
   2a424:	pop	{pc}		; (ldr pc, [sp], #4)
   2a428:	ldr	sl, [sp, #52]	; 0x34
   2a42c:	mov	r3, #1
   2a430:	str	r3, [sp, #24]
   2a434:	b	2a3ec <__assert_fail@plt+0x18848>
   2a438:	str	r0, [sp, #412]	; 0x19c
   2a43c:	ldr	r3, [sp, #412]	; 0x19c
   2a440:	ldr	r2, [sp, #48]	; 0x30
   2a444:	cmp	r3, r2
   2a448:	beq	2a528 <__assert_fail@plt+0x18984>
   2a44c:	ldr	r2, [sp, #472]	; 0x1d8
   2a450:	ldr	r1, [sp, #412]	; 0x19c
   2a454:	add	r0, sp, #276	; 0x114
   2a458:	bl	25064 <__assert_fail@plt+0x134c0>
   2a45c:	subs	r3, r0, #0
   2a460:	str	r3, [sp, #24]
   2a464:	bne	2b398 <__assert_fail@plt+0x197f4>
   2a468:	ldr	r3, [sp, #88]	; 0x58
   2a46c:	cmp	r3, #1
   2a470:	beq	2a490 <__assert_fail@plt+0x188ec>
   2a474:	ldr	r3, [sp, #304]	; 0x130
   2a478:	cmp	r3, #0
   2a47c:	beq	2a490 <__assert_fail@plt+0x188ec>
   2a480:	ldr	r3, [sp, #284]	; 0x11c
   2a484:	ldr	r3, [r3]
   2a488:	cmn	r3, #1
   2a48c:	beq	2b55c <__assert_fail@plt+0x199b8>
   2a490:	mov	r3, #0
   2a494:	str	r3, [sp, #396]	; 0x18c
   2a498:	str	r3, [sp, #384]	; 0x180
   2a49c:	str	r3, [sp, #380]	; 0x17c
   2a4a0:	ldr	r4, [sp, #360]	; 0x168
   2a4a4:	ldr	r1, [sp, #316]	; 0x13c
   2a4a8:	str	r1, [sp, #36]	; 0x24
   2a4ac:	str	r3, [sp, #112]	; 0x70
   2a4b0:	ldr	r5, [r4, #36]	; 0x24
   2a4b4:	ldrsb	r3, [r5, #52]	; 0x34
   2a4b8:	cmp	r3, #0
   2a4bc:	bge	2a590 <__assert_fail@plt+0x189ec>
   2a4c0:	ldr	r2, [sp, #364]	; 0x16c
   2a4c4:	sub	r1, r1, #1
   2a4c8:	add	r0, sp, #276	; 0x114
   2a4cc:	bl	23714 <__assert_fail@plt+0x11b70>
   2a4d0:	tst	r0, #1
   2a4d4:	bne	2a58c <__assert_fail@plt+0x189e8>
   2a4d8:	cmp	r0, #0
   2a4dc:	beq	2a590 <__assert_fail@plt+0x189ec>
   2a4e0:	and	r3, r0, #6
   2a4e4:	cmp	r3, #6
   2a4e8:	beq	2a5d8 <__assert_fail@plt+0x18a34>
   2a4ec:	tst	r0, #2
   2a4f0:	bne	2a5e0 <__assert_fail@plt+0x18a3c>
   2a4f4:	tst	r0, #4
   2a4f8:	beq	2a590 <__assert_fail@plt+0x189ec>
   2a4fc:	mov	r3, r0
   2a500:	ldr	r2, [r5, #40]	; 0x28
   2a504:	mov	r1, r4
   2a508:	add	r0, sp, #112	; 0x70
   2a50c:	bl	2253c <__assert_fail@plt+0x10998>
   2a510:	subs	r5, r0, #0
   2a514:	bne	2a590 <__assert_fail@plt+0x189ec>
   2a518:	ldr	sl, [sp, #52]	; 0x34
   2a51c:	b	2b4dc <__assert_fail@plt+0x19938>
   2a520:	str	r0, [sp, #412]	; 0x19c
   2a524:	b	2a43c <__assert_fail@plt+0x18898>
   2a528:	ldr	r2, [sp, #60]	; 0x3c
   2a52c:	cmp	r3, r2
   2a530:	ldrlt	r2, [sp, #44]	; 0x2c
   2a534:	ldrblt	r3, [r2, r3]
   2a538:	ldrge	r3, [sp, #76]	; 0x4c
   2a53c:	ldr	r2, [sp, #68]	; 0x44
   2a540:	cmp	r2, #0
   2a544:	ldrbne	r3, [r2, r3]
   2a548:	ldr	r2, [sp, #32]
   2a54c:	ldrb	r3, [r2, r3]
   2a550:	cmp	r3, #0
   2a554:	bne	2a44c <__assert_fail@plt+0x188a8>
   2a558:	ldr	sl, [sp, #52]	; 0x34
   2a55c:	mov	r3, #1
   2a560:	str	r3, [sp, #24]
   2a564:	b	2a3ec <__assert_fail@plt+0x18848>
   2a568:	cmp	r1, #0
   2a56c:	strne	r3, [sp, #412]	; 0x19c
   2a570:	ldr	r2, [sp, #56]	; 0x38
   2a574:	cmp	r2, r3
   2a578:	ble	2a44c <__assert_fail@plt+0x188a8>
   2a57c:	ldr	sl, [sp, #52]	; 0x34
   2a580:	mov	r3, #1
   2a584:	str	r3, [sp, #24]
   2a588:	b	2a3ec <__assert_fail@plt+0x18848>
   2a58c:	ldr	r5, [r4, #40]	; 0x28
   2a590:	ldr	r3, [sp, #376]	; 0x178
   2a594:	cmp	r3, #0
   2a598:	beq	2a644 <__assert_fail@plt+0x18aa0>
   2a59c:	ldr	r2, [sp, #36]	; 0x24
   2a5a0:	str	r5, [r3, r2, lsl #2]
   2a5a4:	ldr	r3, [r4, #76]	; 0x4c
   2a5a8:	cmp	r3, #0
   2a5ac:	ldreq	sl, [sp, #100]	; 0x64
   2a5b0:	bne	2a5e8 <__assert_fail@plt+0x18a44>
   2a5b4:	ldrb	r3, [r5, #52]	; 0x34
   2a5b8:	tst	r3, #16
   2a5bc:	bne	2a64c <__assert_fail@plt+0x18aa8>
   2a5c0:	ldr	r3, [sp, #24]
   2a5c4:	str	r3, [sp, #12]
   2a5c8:	mvn	fp, #0
   2a5cc:	ldr	r3, [sp, #96]	; 0x60
   2a5d0:	str	r3, [sp, #28]
   2a5d4:	b	2a9f0 <__assert_fail@plt+0x18e4c>
   2a5d8:	ldr	r5, [r4, #48]	; 0x30
   2a5dc:	b	2a590 <__assert_fail@plt+0x189ec>
   2a5e0:	ldr	r5, [r4, #44]	; 0x2c
   2a5e4:	b	2a590 <__assert_fail@plt+0x189ec>
   2a5e8:	add	r4, r5, #4
   2a5ec:	mov	r2, #0
   2a5f0:	mov	r1, r4
   2a5f4:	add	r0, sp, #276	; 0x114
   2a5f8:	bl	23990 <__assert_fail@plt+0x11dec>
   2a5fc:	mov	fp, r0
   2a600:	str	r0, [sp, #112]	; 0x70
   2a604:	cmp	r0, #0
   2a608:	bne	2b760 <__assert_fail@plt+0x19bbc>
   2a60c:	ldrb	r3, [r5, #52]	; 0x34
   2a610:	tst	r3, #64	; 0x40
   2a614:	bne	2a620 <__assert_fail@plt+0x18a7c>
   2a618:	ldr	sl, [sp, #84]	; 0x54
   2a61c:	b	2a5b4 <__assert_fail@plt+0x18a10>
   2a620:	mov	r1, r4
   2a624:	add	r0, sp, #276	; 0x114
   2a628:	bl	28bb0 <__assert_fail@plt+0x1700c>
   2a62c:	mov	fp, r0
   2a630:	str	r0, [sp, #112]	; 0x70
   2a634:	cmp	r0, #0
   2a638:	bne	2b760 <__assert_fail@plt+0x19bbc>
   2a63c:	ldr	sl, [sp, #84]	; 0x54
   2a640:	b	2a5b4 <__assert_fail@plt+0x18a10>
   2a644:	ldr	sl, [sp, #100]	; 0x64
   2a648:	b	2a5b4 <__assert_fail@plt+0x18a10>
   2a64c:	ldrsb	r3, [r5, #52]	; 0x34
   2a650:	cmp	r3, #0
   2a654:	blt	2a674 <__assert_fail@plt+0x18ad0>
   2a658:	ldr	r3, [sp, #16]
   2a65c:	cmp	r3, #0
   2a660:	beq	2a698 <__assert_fail@plt+0x18af4>
   2a664:	ldr	fp, [sp, #36]	; 0x24
   2a668:	mov	r3, #1
   2a66c:	str	r3, [sp, #12]
   2a670:	b	2a5cc <__assert_fail@plt+0x18a28>
   2a674:	ldr	r2, [sp, #36]	; 0x24
   2a678:	mov	r1, r5
   2a67c:	add	r0, sp, #276	; 0x114
   2a680:	bl	23cac <__assert_fail@plt+0x12108>
   2a684:	subs	r3, r0, #0
   2a688:	str	r3, [sp, #12]
   2a68c:	bne	2a658 <__assert_fail@plt+0x18ab4>
   2a690:	mvn	fp, #0
   2a694:	b	2a5cc <__assert_fail@plt+0x18a28>
   2a698:	ldr	fp, [sp, #36]	; 0x24
   2a69c:	b	2b760 <__assert_fail@plt+0x19bbc>
   2a6a0:	ldr	r2, [sp, #324]	; 0x144
   2a6a4:	cmp	r3, r2
   2a6a8:	bge	2aa10 <__assert_fail@plt+0x18e6c>
   2a6ac:	add	r1, r1, #2
   2a6b0:	add	r0, sp, #276	; 0x114
   2a6b4:	bl	21518 <__assert_fail@plt+0xf974>
   2a6b8:	str	r0, [sp, #112]	; 0x70
   2a6bc:	cmp	r0, #0
   2a6c0:	beq	2aa1c <__assert_fail@plt+0x18e78>
   2a6c4:	ldr	sl, [sp, #52]	; 0x34
   2a6c8:	b	2b4dc <__assert_fail@plt+0x19938>
   2a6cc:	ldr	r2, [sp, #324]	; 0x144
   2a6d0:	cmp	r3, r2
   2a6d4:	bge	2aa1c <__assert_fail@plt+0x18e78>
   2a6d8:	b	2a6ac <__assert_fail@plt+0x18b08>
   2a6dc:	ldr	r6, [sp, #360]	; 0x168
   2a6e0:	ldr	r3, [r5, #8]
   2a6e4:	cmp	r3, #0
   2a6e8:	ble	2b4e8 <__assert_fail@plt+0x19944>
   2a6ec:	ldr	r7, [sp, #24]
   2a6f0:	b	2a804 <__assert_fail@plt+0x18c60>
   2a6f4:	tst	r3, #8
   2a6f8:	beq	2a704 <__assert_fail@plt+0x18b60>
   2a6fc:	tst	r0, #1
   2a700:	bne	2a7f4 <__assert_fail@plt+0x18c50>
   2a704:	tst	r3, #32
   2a708:	beq	2a714 <__assert_fail@plt+0x18b70>
   2a70c:	tst	r0, #2
   2a710:	beq	2a7f4 <__assert_fail@plt+0x18c50>
   2a714:	tst	r3, #128	; 0x80
   2a718:	beq	2a724 <__assert_fail@plt+0x18b80>
   2a71c:	tst	r0, #8
   2a720:	beq	2a7f4 <__assert_fail@plt+0x18c50>
   2a724:	ldr	r3, [sp, #316]	; 0x13c
   2a728:	add	r2, sp, #276	; 0x114
   2a72c:	mov	r1, r8
   2a730:	mov	r0, r6
   2a734:	bl	24b30 <__assert_fail@plt+0x12f8c>
   2a738:	cmp	r0, #0
   2a73c:	beq	2a7f4 <__assert_fail@plt+0x18c50>
   2a740:	ldr	r4, [sp, #316]	; 0x13c
   2a744:	add	r4, r0, r4
   2a748:	ldr	r3, [sp, #396]	; 0x18c
   2a74c:	cmp	r3, r0
   2a750:	movlt	r3, r0
   2a754:	str	r3, [sp, #396]	; 0x18c
   2a758:	mov	r1, r4
   2a75c:	add	r0, sp, #276	; 0x114
   2a760:	bl	23ac4 <__assert_fail@plt+0x11f20>
   2a764:	str	r0, [sp, #124]	; 0x7c
   2a768:	cmp	r0, #0
   2a76c:	bne	2a8ac <__assert_fail@plt+0x18d08>
   2a770:	ldr	r3, [r6, #12]
   2a774:	ldr	r3, [r3, r8, lsl #2]
   2a778:	add	r3, r3, r3, lsl #1
   2a77c:	lsl	r3, r3, #2
   2a780:	ldr	r0, [r6, #24]
   2a784:	add	r2, r0, r3
   2a788:	ldr	r8, [sp, #376]	; 0x178
   2a78c:	ldr	r1, [r8, r4, lsl #2]
   2a790:	cmp	r1, #0
   2a794:	beq	2a864 <__assert_fail@plt+0x18cc0>
   2a798:	ldr	r1, [r1, #40]	; 0x28
   2a79c:	add	r0, sp, #136	; 0x88
   2a7a0:	bl	20d68 <__assert_fail@plt+0xf1c4>
   2a7a4:	str	r0, [sp, #124]	; 0x7c
   2a7a8:	cmp	r0, #0
   2a7ac:	bne	2a8ac <__assert_fail@plt+0x18d08>
   2a7b0:	ldr	r2, [sp, #364]	; 0x16c
   2a7b4:	sub	r1, r4, #1
   2a7b8:	add	r0, sp, #276	; 0x114
   2a7bc:	bl	23714 <__assert_fail@plt+0x11b70>
   2a7c0:	ldr	r8, [sp, #376]	; 0x178
   2a7c4:	mov	r3, r0
   2a7c8:	add	r2, sp, #136	; 0x88
   2a7cc:	mov	r1, r6
   2a7d0:	add	r0, sp, #124	; 0x7c
   2a7d4:	bl	2253c <__assert_fail@plt+0x10998>
   2a7d8:	str	r0, [r8, r4, lsl #2]
   2a7dc:	ldr	r0, [sp, #144]	; 0x90
   2a7e0:	bl	17750 <__assert_fail@plt+0x5bac>
   2a7e4:	ldr	r3, [sp, #376]	; 0x178
   2a7e8:	ldr	r3, [r3, r4, lsl #2]
   2a7ec:	cmp	r3, #0
   2a7f0:	beq	2a8a0 <__assert_fail@plt+0x18cfc>
   2a7f4:	add	r7, r7, #1
   2a7f8:	ldr	r3, [r5, #8]
   2a7fc:	cmp	r7, r3
   2a800:	bge	2b4e8 <__assert_fail@plt+0x19944>
   2a804:	ldr	r3, [r5, #12]
   2a808:	ldr	r8, [r3, r7, lsl #2]
   2a80c:	ldr	r4, [r6]
   2a810:	add	r4, r4, r8, lsl #3
   2a814:	ldrb	r3, [r4, #6]
   2a818:	tst	r3, #16
   2a81c:	beq	2a7f4 <__assert_fail@plt+0x18c50>
   2a820:	ldr	r3, [r4, #4]
   2a824:	ldr	r2, [sp, #40]	; 0x28
   2a828:	tst	r2, r3
   2a82c:	beq	2a724 <__assert_fail@plt+0x18b80>
   2a830:	ldr	r2, [sp, #364]	; 0x16c
   2a834:	ldr	r1, [sp, #316]	; 0x13c
   2a838:	add	r0, sp, #276	; 0x114
   2a83c:	bl	23714 <__assert_fail@plt+0x11b70>
   2a840:	ldr	r3, [r4, #4]
   2a844:	ubfx	r3, r3, #8, #10
   2a848:	tst	r3, #4
   2a84c:	beq	2a6f4 <__assert_fail@plt+0x18b50>
   2a850:	tst	r0, #1
   2a854:	beq	2a7f4 <__assert_fail@plt+0x18c50>
   2a858:	tst	r3, #8
   2a85c:	beq	2a704 <__assert_fail@plt+0x18b60>
   2a860:	b	2a7f4 <__assert_fail@plt+0x18c50>
   2a864:	ldrd	r0, [r0, r3]
   2a868:	strd	r0, [sp, #136]	; 0x88
   2a86c:	ldr	r3, [r2, #8]
   2a870:	str	r3, [sp, #144]	; 0x90
   2a874:	ldr	r2, [sp, #364]	; 0x16c
   2a878:	sub	r1, r4, #1
   2a87c:	add	r0, sp, #276	; 0x114
   2a880:	bl	23714 <__assert_fail@plt+0x11b70>
   2a884:	mov	r3, r0
   2a888:	add	r2, sp, #136	; 0x88
   2a88c:	mov	r1, r6
   2a890:	add	r0, sp, #124	; 0x7c
   2a894:	bl	2253c <__assert_fail@plt+0x10998>
   2a898:	str	r0, [r8, r4, lsl #2]
   2a89c:	b	2a7e4 <__assert_fail@plt+0x18c40>
   2a8a0:	ldr	r0, [sp, #124]	; 0x7c
   2a8a4:	cmp	r0, #0
   2a8a8:	beq	2a7f4 <__assert_fail@plt+0x18c50>
   2a8ac:	str	r0, [sp, #112]	; 0x70
   2a8b0:	ldr	r3, [sp, #376]	; 0x178
   2a8b4:	cmp	r3, #0
   2a8b8:	beq	2b738 <__assert_fail@plt+0x19b94>
   2a8bc:	mov	r4, #0
   2a8c0:	b	2aa58 <__assert_fail@plt+0x18eb4>
   2a8c4:	ldr	r6, [r5, #48]	; 0x30
   2a8c8:	cmp	r6, #0
   2a8cc:	beq	2a8f4 <__assert_fail@plt+0x18d50>
   2a8d0:	ldr	r2, [sp, #364]	; 0x16c
   2a8d4:	ldr	r1, [sp, #316]	; 0x13c
   2a8d8:	sub	r1, r1, #1
   2a8dc:	add	r0, sp, #276	; 0x114
   2a8e0:	bl	23714 <__assert_fail@plt+0x11b70>
   2a8e4:	tst	r0, #1
   2a8e8:	addne	r4, r4, #256	; 0x100
   2a8ec:	ldr	r4, [r6, r4, lsl #2]
   2a8f0:	b	2aa4c <__assert_fail@plt+0x18ea8>
   2a8f4:	mov	r1, r5
   2a8f8:	ldr	r0, [sp, #360]	; 0x168
   2a8fc:	bl	2579c <__assert_fail@plt+0x13bf8>
   2a900:	cmp	r0, #0
   2a904:	bne	2aa3c <__assert_fail@plt+0x18e98>
   2a908:	mov	r3, #12
   2a90c:	str	r3, [sp, #112]	; 0x70
   2a910:	b	2a8b0 <__assert_fail@plt+0x18d0c>
   2a914:	ldr	r3, [sp, #112]	; 0x70
   2a918:	cmp	r3, #0
   2a91c:	bne	2b4d8 <__assert_fail@plt+0x19934>
   2a920:	ldr	r3, [sp, #376]	; 0x178
   2a924:	cmp	r3, #0
   2a928:	beq	2b744 <__assert_fail@plt+0x19ba0>
   2a92c:	ldr	r3, [sp, #12]
   2a930:	ldr	r2, [sp, #16]
   2a934:	cmp	r3, #0
   2a938:	eorne	r3, r2, #1
   2a93c:	moveq	r3, #0
   2a940:	cmp	r3, #0
   2a944:	bne	2b744 <__assert_fail@plt+0x19ba0>
   2a948:	mov	r6, #0
   2a94c:	ldr	r0, [sp, #380]	; 0x17c
   2a950:	ldr	r2, [sp, #316]	; 0x13c
   2a954:	ldr	r3, [sp, #376]	; 0x178
   2a958:	add	r3, r3, r2, lsl #2
   2a95c:	add	r2, r2, #1
   2a960:	cmp	r0, r2
   2a964:	blt	2b744 <__assert_fail@plt+0x19ba0>
   2a968:	ldr	r1, [sp, #316]	; 0x13c
   2a96c:	add	r1, r1, #1
   2a970:	str	r1, [sp, #316]	; 0x13c
   2a974:	ldr	r1, [r3, #4]!
   2a978:	cmp	r1, #0
   2a97c:	beq	2a95c <__assert_fail@plt+0x18db8>
   2a980:	mov	r2, r6
   2a984:	add	r1, sp, #276	; 0x114
   2a988:	add	r0, sp, #112	; 0x70
   2a98c:	bl	292b0 <__assert_fail@plt+0x1770c>
   2a990:	ldr	r3, [sp, #112]	; 0x70
   2a994:	orrs	r3, r0, r3
   2a998:	beq	2a94c <__assert_fail@plt+0x18da8>
   2a99c:	mov	r4, r0
   2a9a0:	cmp	r0, #0
   2a9a4:	bne	2aa74 <__assert_fail@plt+0x18ed0>
   2a9a8:	b	2b744 <__assert_fail@plt+0x19ba0>
   2a9ac:	ldr	r3, [sp, #84]	; 0x54
   2a9b0:	cmp	r5, r4
   2a9b4:	movne	sl, r3
   2a9b8:	ldr	r3, [sp, #36]	; 0x24
   2a9bc:	cmp	r5, r4
   2a9c0:	moveq	r3, r9
   2a9c4:	str	r3, [sp, #36]	; 0x24
   2a9c8:	b	2aa7c <__assert_fail@plt+0x18ed8>
   2a9cc:	ldr	fp, [sp, #316]	; 0x13c
   2a9d0:	ldr	r3, [sp, #16]
   2a9d4:	cmp	r3, #0
   2a9d8:	beq	2b760 <__assert_fail@plt+0x19bbc>
   2a9dc:	mov	r3, #1
   2a9e0:	str	r3, [sp, #12]
   2a9e4:	mov	r3, #0
   2a9e8:	str	r3, [sp, #28]
   2a9ec:	mov	r5, r4
   2a9f0:	ldr	r1, [sp, #316]	; 0x13c
   2a9f4:	ldr	r3, [sp, #332]	; 0x14c
   2a9f8:	cmp	r1, r3
   2a9fc:	bge	2b744 <__assert_fail@plt+0x19ba0>
   2aa00:	add	r9, r1, #1
   2aa04:	ldr	r3, [sp, #312]	; 0x138
   2aa08:	cmp	r9, r3
   2aa0c:	bge	2a6a0 <__assert_fail@plt+0x18afc>
   2aa10:	ldr	r3, [sp, #304]	; 0x130
   2aa14:	cmp	r9, r3
   2aa18:	bge	2a6cc <__assert_fail@plt+0x18b28>
   2aa1c:	ldrb	r3, [r5, #52]	; 0x34
   2aa20:	tst	r3, #32
   2aa24:	bne	2a6dc <__assert_fail@plt+0x18b38>
   2aa28:	ldr	r3, [sp, #316]	; 0x13c
   2aa2c:	add	r2, r3, #1
   2aa30:	str	r2, [sp, #316]	; 0x13c
   2aa34:	ldr	r2, [sp, #280]	; 0x118
   2aa38:	ldrb	r4, [r2, r3]
   2aa3c:	ldr	r3, [r5, #44]	; 0x2c
   2aa40:	cmp	r3, #0
   2aa44:	beq	2a8c4 <__assert_fail@plt+0x18d20>
   2aa48:	ldr	r4, [r3, r4, lsl #2]
   2aa4c:	ldr	r3, [sp, #376]	; 0x178
   2aa50:	cmp	r3, #0
   2aa54:	beq	2aa6c <__assert_fail@plt+0x18ec8>
   2aa58:	mov	r2, r4
   2aa5c:	add	r1, sp, #276	; 0x114
   2aa60:	add	r0, sp, #112	; 0x70
   2aa64:	bl	292b0 <__assert_fail@plt+0x1770c>
   2aa68:	mov	r4, r0
   2aa6c:	cmp	r4, #0
   2aa70:	beq	2a914 <__assert_fail@plt+0x18d70>
   2aa74:	cmp	sl, #0
   2aa78:	bne	2a9ac <__assert_fail@plt+0x18e08>
   2aa7c:	ldrb	r3, [r4, #52]	; 0x34
   2aa80:	tst	r3, #16
   2aa84:	beq	2a9ec <__assert_fail@plt+0x18e48>
   2aa88:	tst	r3, #128	; 0x80
   2aa8c:	beq	2a9cc <__assert_fail@plt+0x18e28>
   2aa90:	ldr	r2, [sp, #316]	; 0x13c
   2aa94:	mov	r1, r4
   2aa98:	add	r0, sp, #276	; 0x114
   2aa9c:	bl	23cac <__assert_fail@plt+0x12108>
   2aaa0:	cmp	r0, #0
   2aaa4:	beq	2a9ec <__assert_fail@plt+0x18e48>
   2aaa8:	b	2a9cc <__assert_fail@plt+0x18e28>
   2aaac:	ldr	r9, [sp, #28]
   2aab0:	mov	r3, sl
   2aab4:	ldr	sl, [sp, #12]
   2aab8:	mov	r2, r5
   2aabc:	mov	r1, r4
   2aac0:	mov	r0, r9
   2aac4:	bl	28084 <__assert_fail@plt+0x164e0>
   2aac8:	mov	r8, r0
   2aacc:	mov	r0, r5
   2aad0:	bl	17750 <__assert_fail@plt+0x5bac>
   2aad4:	cmp	r8, #0
   2aad8:	beq	2ab30 <__assert_fail@plt+0x18f8c>
   2aadc:	mov	r5, #0
   2aae0:	b	2b53c <__assert_fail@plt+0x19998>
   2aae4:	str	r4, [sp, #136]	; 0x88
   2aae8:	mov	r3, #0
   2aaec:	str	r3, [sp, #140]	; 0x8c
   2aaf0:	str	r7, [sp, #144]	; 0x90
   2aaf4:	str	fp, [sp, #148]	; 0x94
   2aaf8:	str	r3, [sp, #152]	; 0x98
   2aafc:	str	r3, [sp, #156]	; 0x9c
   2ab00:	str	r3, [sp, #160]	; 0xa0
   2ab04:	add	r1, sp, #136	; 0x88
   2ab08:	add	r0, sp, #276	; 0x114
   2ab0c:	bl	29b10 <__assert_fail@plt+0x17f6c>
   2ab10:	mov	r8, r0
   2ab14:	ldr	r0, [sp, #160]	; 0xa0
   2ab18:	bl	17750 <__assert_fail@plt+0x5bac>
   2ab1c:	cmp	r8, #0
   2ab20:	bne	2b538 <__assert_fail@plt+0x19994>
   2ab24:	ldr	r5, [r4]
   2ab28:	cmp	r5, #0
   2ab2c:	beq	2b524 <__assert_fail@plt+0x19980>
   2ab30:	mov	r8, sl
   2ab34:	ldr	sl, [sp, #52]	; 0x34
   2ab38:	ldr	r0, [sp, #376]	; 0x178
   2ab3c:	bl	17750 <__assert_fail@plt+0x5bac>
   2ab40:	str	r4, [sp, #376]	; 0x178
   2ab44:	str	r7, [sp, #372]	; 0x174
   2ab48:	str	fp, [sp, #368]	; 0x170
   2ab4c:	mov	r0, #0
   2ab50:	bl	17750 <__assert_fail@plt+0x5bac>
   2ab54:	mov	r0, #0
   2ab58:	bl	17750 <__assert_fail@plt+0x5bac>
   2ab5c:	b	2b7b4 <__assert_fail@plt+0x19c10>
   2ab60:	ldr	sl, [sp, #52]	; 0x34
   2ab64:	mov	r3, #1
   2ab68:	str	r3, [sp, #24]
   2ab6c:	b	2a3ec <__assert_fail@plt+0x18848>
   2ab70:	mov	r8, sl
   2ab74:	ldr	sl, [sp, #52]	; 0x34
   2ab78:	b	2b7b4 <__assert_fail@plt+0x19c10>
   2ab7c:	ldrb	r3, [sl, #88]	; 0x58
   2ab80:	tst	r3, #1
   2ab84:	beq	2b410 <__assert_fail@plt+0x1986c>
   2ab88:	ldr	r3, [sl, #76]	; 0x4c
   2ab8c:	cmp	r3, #0
   2ab90:	ble	2b410 <__assert_fail@plt+0x1986c>
   2ab94:	ldr	r3, [sp, #20]
   2ab98:	ldr	r3, [r3]
   2ab9c:	str	r3, [sp, #16]
   2aba0:	mov	r3, #0
   2aba4:	str	r3, [sp, #124]	; 0x7c
   2aba8:	mov	r2, #2
   2abac:	str	r2, [sp, #128]	; 0x80
   2abb0:	str	r3, [sp, #132]	; 0x84
   2abb4:	str	r3, [sp, #136]	; 0x88
   2abb8:	mov	r3, #16
   2abbc:	str	r3, [sp, #140]	; 0x8c
   2abc0:	add	r3, sp, #148	; 0x94
   2abc4:	str	r3, [sp, #144]	; 0x90
   2abc8:	mov	r0, #48	; 0x30
   2abcc:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2abd0:	str	r0, [sp, #132]	; 0x84
   2abd4:	cmp	r0, #0
   2abd8:	beq	2b404 <__assert_fail@plt+0x19860>
   2abdc:	add	fp, sp, #124	; 0x7c
   2abe0:	b	2b444 <__assert_fail@plt+0x198a0>
   2abe4:	mov	r3, #8
   2abe8:	add	r2, sp, #148	; 0x94
   2abec:	ldr	r1, [sp, #64]	; 0x40
   2abf0:	add	r0, sp, #136	; 0x88
   2abf4:	bl	2fba0 <__assert_fail@plt+0x1dffc>
   2abf8:	cmp	r0, #0
   2abfc:	bne	2b474 <__assert_fail@plt+0x198d0>
   2ac00:	ldr	r0, [sp, #144]	; 0x90
   2ac04:	add	r3, sp, #148	; 0x94
   2ac08:	cmp	r0, r3
   2ac0c:	beq	2ac14 <__assert_fail@plt+0x19070>
   2ac10:	bl	17750 <__assert_fail@plt+0x5bac>
   2ac14:	add	r3, sp, #148	; 0x94
   2ac18:	str	r3, [sp, #144]	; 0x90
   2ac1c:	mov	r3, #0
   2ac20:	str	r3, [sp, #136]	; 0x88
   2ac24:	mvn	r3, #0
   2ac28:	str	r3, [sp, #140]	; 0x8c
   2ac2c:	add	r0, sp, #136	; 0x88
   2ac30:	bl	22b30 <__assert_fail@plt+0x10f8c>
   2ac34:	mov	r0, fp
   2ac38:	bl	22b78 <__assert_fail@plt+0x10fd4>
   2ac3c:	mov	r3, #12
   2ac40:	str	r3, [sp, #24]
   2ac44:	b	2a3ec <__assert_fail@plt+0x18848>
   2ac48:	ldr	r3, [r2, r7, lsl #3]
   2ac4c:	add	r3, r3, #1
   2ac50:	ldr	r2, [sp, #64]	; 0x40
   2ac54:	cmp	r2, r3
   2ac58:	ble	2afd4 <__assert_fail@plt+0x19430>
   2ac5c:	ldr	r2, [sp, #468]	; 0x1d4
   2ac60:	add	r2, r2, r3, lsl #3
   2ac64:	ldr	r0, [sp, #468]	; 0x1d4
   2ac68:	str	r1, [r0, r3, lsl #3]
   2ac6c:	mvn	r3, #0
   2ac70:	str	r3, [r2, #4]
   2ac74:	b	2afd4 <__assert_fail@plt+0x19430>
   2ac78:	ldr	r3, [r2, r0]
   2ac7c:	add	r3, r3, #1
   2ac80:	ldr	r2, [sp, #64]	; 0x40
   2ac84:	cmp	r2, r3
   2ac88:	ble	2afd4 <__assert_fail@plt+0x19430>
   2ac8c:	ldr	r2, [sp, #468]	; 0x1d4
   2ac90:	add	r2, r2, r3, lsl #3
   2ac94:	ldr	r0, [sp, #468]	; 0x1d4
   2ac98:	ldr	r0, [r0, r3, lsl #3]
   2ac9c:	cmp	r1, r0
   2aca0:	bgt	2acc8 <__assert_fail@plt+0x19124>
   2aca4:	ldrb	r0, [ip, #6]
   2aca8:	tst	r0, #8
   2acac:	beq	2acc0 <__assert_fail@plt+0x1911c>
   2acb0:	ldr	r0, [sp, #32]
   2acb4:	ldr	r3, [r0, r3, lsl #3]
   2acb8:	cmn	r3, #1
   2acbc:	bne	2ace0 <__assert_fail@plt+0x1913c>
   2acc0:	str	r1, [r2, #4]
   2acc4:	b	2afd4 <__assert_fail@plt+0x19430>
   2acc8:	str	r1, [r2, #4]
   2accc:	ldr	r2, [sp, #36]	; 0x24
   2acd0:	ldr	r1, [sp, #468]	; 0x1d4
   2acd4:	ldr	r0, [sp, #32]
   2acd8:	bl	11784 <memcpy@plt>
   2acdc:	b	2afd4 <__assert_fail@plt+0x19430>
   2ace0:	ldr	r2, [sp, #36]	; 0x24
   2ace4:	mov	r1, r0
   2ace8:	ldr	r0, [sp, #468]	; 0x1d4
   2acec:	bl	11784 <memcpy@plt>
   2acf0:	b	2afd4 <__assert_fail@plt+0x19430>
   2acf4:	ldr	r3, [sp, #372]	; 0x174
   2acf8:	cmp	r7, r3
   2acfc:	bne	2afe8 <__assert_fail@plt+0x19444>
   2ad00:	cmp	fp, #0
   2ad04:	beq	2ad98 <__assert_fail@plt+0x191f4>
   2ad08:	ldr	r3, [sp, #24]
   2ad0c:	b	2ad14 <__assert_fail@plt+0x19170>
   2ad10:	ldr	r3, [sp, #24]
   2ad14:	ldr	r1, [sp, #12]
   2ad18:	b	2ad28 <__assert_fail@plt+0x19184>
   2ad1c:	add	r3, r3, #1
   2ad20:	cmp	r1, r3
   2ad24:	beq	2ad78 <__assert_fail@plt+0x191d4>
   2ad28:	ldr	r2, [sp, #468]	; 0x1d4
   2ad2c:	ldr	r2, [r2, r3, lsl #3]
   2ad30:	cmp	r2, #0
   2ad34:	blt	2ad1c <__assert_fail@plt+0x19178>
   2ad38:	ldr	r2, [r9, r3, lsl #3]
   2ad3c:	cmn	r2, #1
   2ad40:	bne	2ad1c <__assert_fail@plt+0x19178>
   2ad44:	add	r3, sp, #112	; 0x70
   2ad48:	str	r3, [sp, #4]
   2ad4c:	ldr	r3, [sp, #32]
   2ad50:	str	r3, [sp]
   2ad54:	ldr	r3, [sp, #468]	; 0x1d4
   2ad58:	ldr	r2, [sp, #12]
   2ad5c:	add	r1, sp, #108	; 0x6c
   2ad60:	mov	r0, fp
   2ad64:	bl	23da0 <__assert_fail@plt+0x121fc>
   2ad68:	subs	r7, r0, #0
   2ad6c:	bge	2b004 <__assert_fail@plt+0x19460>
   2ad70:	ldr	sl, [sp, #28]
   2ad74:	b	2ad7c <__assert_fail@plt+0x191d8>
   2ad78:	ldr	sl, [sp, #28]
   2ad7c:	ldr	r0, [sp, #120]	; 0x78
   2ad80:	bl	17750 <__assert_fail@plt+0x5bac>
   2ad84:	add	r0, sp, #136	; 0x88
   2ad88:	bl	22b30 <__assert_fail@plt+0x10f8c>
   2ad8c:	mov	r0, fp
   2ad90:	bl	22b78 <__assert_fail@plt+0x10fd4>
   2ad94:	b	2b23c <__assert_fail@plt+0x19698>
   2ad98:	ldr	sl, [sp, #28]
   2ad9c:	b	2ad7c <__assert_fail@plt+0x191d8>
   2ada0:	mov	r1, r7
   2ada4:	add	r0, sp, #112	; 0x70
   2ada8:	bl	22d7c <__assert_fail@plt+0x111d8>
   2adac:	cmp	r0, #0
   2adb0:	bne	2b054 <__assert_fail@plt+0x194b0>
   2adb4:	ldr	sl, [sp, #28]
   2adb8:	ldr	r0, [sp, #120]	; 0x78
   2adbc:	bl	17750 <__assert_fail@plt+0x5bac>
   2adc0:	add	r0, sp, #136	; 0x88
   2adc4:	bl	22b30 <__assert_fail@plt+0x10f8c>
   2adc8:	mov	r0, fp
   2adcc:	bl	22b78 <__assert_fail@plt+0x10fd4>
   2add0:	mov	r3, #12
   2add4:	str	r3, [sp, #24]
   2add8:	b	2a3ec <__assert_fail@plt+0x18848>
   2addc:	mov	r1, r7
   2ade0:	add	r0, sp, #112	; 0x70
   2ade4:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   2ade8:	cmp	r0, #0
   2adec:	bne	2b1f8 <__assert_fail@plt+0x19654>
   2adf0:	cmp	fp, #0
   2adf4:	beq	2af8c <__assert_fail@plt+0x193e8>
   2adf8:	ldr	r8, [sp, #108]	; 0x6c
   2adfc:	ldr	r4, [fp]
   2ae00:	add	r3, r4, #1
   2ae04:	str	r3, [fp]
   2ae08:	ldr	r1, [fp, #4]
   2ae0c:	cmp	r3, r1
   2ae10:	beq	2aea8 <__assert_fail@plt+0x19304>
   2ae14:	add	r4, r4, r4, lsl #1
   2ae18:	lsl	r6, r4, #3
   2ae1c:	ldr	r3, [fp, #8]
   2ae20:	str	r8, [r3, r4, lsl #3]
   2ae24:	ldr	r3, [fp, #8]
   2ae28:	add	r3, r3, r6
   2ae2c:	str	r5, [r3, #4]
   2ae30:	ldr	r4, [fp, #8]
   2ae34:	add	r4, r4, r6
   2ae38:	ldr	r0, [sp, #40]	; 0x28
   2ae3c:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2ae40:	str	r0, [r4, #8]
   2ae44:	ldr	r3, [fp, #8]
   2ae48:	add	r3, r3, r6
   2ae4c:	ldr	r0, [r3, #8]
   2ae50:	cmp	r0, #0
   2ae54:	beq	2b210 <__assert_fail@plt+0x1966c>
   2ae58:	ldr	r4, [sp, #36]	; 0x24
   2ae5c:	mov	r2, r4
   2ae60:	ldr	r1, [sp, #468]	; 0x1d4
   2ae64:	bl	11784 <memcpy@plt>
   2ae68:	ldr	r3, [fp, #8]
   2ae6c:	add	r3, r3, r6
   2ae70:	ldr	r0, [r3, #8]
   2ae74:	mov	r2, r4
   2ae78:	ldr	r1, [sp, #32]
   2ae7c:	add	r0, r0, r4
   2ae80:	bl	11784 <memcpy@plt>
   2ae84:	ldr	r0, [fp, #8]
   2ae88:	add	r0, r0, r6
   2ae8c:	add	r1, sp, #112	; 0x70
   2ae90:	add	r0, r0, #12
   2ae94:	bl	20ce0 <__assert_fail@plt+0xf13c>
   2ae98:	cmp	r0, #0
   2ae9c:	beq	2af8c <__assert_fail@plt+0x193e8>
   2aea0:	ldr	sl, [sp, #28]
   2aea4:	b	2adb8 <__assert_fail@plt+0x19214>
   2aea8:	add	r1, r1, r1, lsl #1
   2aeac:	lsl	r1, r1, #4
   2aeb0:	ldr	r0, [fp, #8]
   2aeb4:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   2aeb8:	cmp	r0, #0
   2aebc:	beq	2b208 <__assert_fail@plt+0x19664>
   2aec0:	ldr	r3, [fp, #4]
   2aec4:	lsl	r3, r3, #1
   2aec8:	str	r3, [fp, #4]
   2aecc:	str	r0, [fp, #8]
   2aed0:	b	2ae14 <__assert_fail@plt+0x19270>
   2aed4:	add	r4, r4, #1
   2aed8:	cmp	sl, r4
   2aedc:	beq	2af8c <__assert_fail@plt+0x193e8>
   2aee0:	ldr	r5, [r6, #4]!
   2aee4:	mov	r1, r5
   2aee8:	mov	r0, r8
   2aeec:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   2aef0:	cmp	r0, #0
   2aef4:	beq	2aed4 <__assert_fail@plt+0x19330>
   2aef8:	cmn	r7, #1
   2aefc:	bne	2addc <__assert_fail@plt+0x19238>
   2af00:	mov	r7, r5
   2af04:	b	2aed4 <__assert_fail@plt+0x19330>
   2af08:	ldrb	r3, [r3, #6]
   2af0c:	tst	r3, #16
   2af10:	bne	2b074 <__assert_fail@plt+0x194d0>
   2af14:	cmp	r2, #4
   2af18:	beq	2b0a4 <__assert_fail@plt+0x19500>
   2af1c:	ldr	r5, [sp, #108]	; 0x6c
   2af20:	ldr	r1, [r4]
   2af24:	mov	r2, r5
   2af28:	add	r1, r1, r6
   2af2c:	add	r0, sp, #276	; 0x114
   2af30:	bl	23820 <__assert_fail@plt+0x11c7c>
   2af34:	cmp	r0, #0
   2af38:	beq	2b134 <__assert_fail@plt+0x19590>
   2af3c:	ldr	r3, [r4, #12]
   2af40:	ldr	r7, [r3, r8, lsl #2]
   2af44:	add	r5, r5, #1
   2af48:	str	r5, [sp, #108]	; 0x6c
   2af4c:	cmp	fp, #0
   2af50:	beq	2af84 <__assert_fail@plt+0x193e0>
   2af54:	ldr	r3, [sp, #368]	; 0x170
   2af58:	cmp	r5, r3
   2af5c:	bgt	2b134 <__assert_fail@plt+0x19590>
   2af60:	ldr	r3, [sp, #376]	; 0x178
   2af64:	ldr	r0, [r3, r5, lsl #2]
   2af68:	cmp	r0, #0
   2af6c:	beq	2b134 <__assert_fail@plt+0x19590>
   2af70:	mov	r1, r7
   2af74:	add	r0, r0, #4
   2af78:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   2af7c:	cmp	r0, #0
   2af80:	beq	2b134 <__assert_fail@plt+0x19590>
   2af84:	mov	r3, #0
   2af88:	str	r3, [sp, #116]	; 0x74
   2af8c:	cmp	r7, #0
   2af90:	blt	2b138 <__assert_fail@plt+0x19594>
   2af94:	ldr	r1, [sp, #108]	; 0x6c
   2af98:	ldr	r3, [sp, #468]	; 0x1d4
   2af9c:	ldr	r3, [r3, #4]
   2afa0:	cmp	r1, r3
   2afa4:	bgt	2b220 <__assert_fail@plt+0x1967c>
   2afa8:	ldr	r3, [sp, #12]
   2afac:	str	r3, [sp, #20]
   2afb0:	lsl	r0, r7, #3
   2afb4:	ldr	r3, [sp, #16]
   2afb8:	ldr	r2, [r3]
   2afbc:	add	ip, r2, r0
   2afc0:	ldrb	r3, [ip, #4]
   2afc4:	cmp	r3, #8
   2afc8:	beq	2ac48 <__assert_fail@plt+0x190a4>
   2afcc:	cmp	r3, #9
   2afd0:	beq	2ac78 <__assert_fail@plt+0x190d4>
   2afd4:	ldr	r3, [sp, #468]	; 0x1d4
   2afd8:	ldr	r2, [r3, #4]
   2afdc:	ldr	r3, [sp, #108]	; 0x6c
   2afe0:	cmp	r2, r3
   2afe4:	beq	2acf4 <__assert_fail@plt+0x19150>
   2afe8:	cmp	fp, #0
   2afec:	beq	2b004 <__assert_fail@plt+0x19460>
   2aff0:	mov	r1, r7
   2aff4:	add	r0, sp, #112	; 0x70
   2aff8:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   2affc:	cmp	r0, #0
   2b000:	bne	2ad10 <__assert_fail@plt+0x1916c>
   2b004:	ldr	r4, [sp, #360]	; 0x168
   2b008:	mov	r8, r7
   2b00c:	lsl	r6, r7, #3
   2b010:	ldr	r1, [r4]
   2b014:	add	r3, r1, r6
   2b018:	ldrb	r2, [r3, #4]
   2b01c:	tst	r2, #8
   2b020:	beq	2af08 <__assert_fail@plt+0x19364>
   2b024:	ldr	r2, [sp, #108]	; 0x6c
   2b028:	ldr	r3, [sp, #376]	; 0x178
   2b02c:	ldr	r8, [r3, r2, lsl #2]
   2b030:	add	r8, r8, #4
   2b034:	add	r3, r7, r7, lsl #1
   2b038:	ldr	r4, [r4, #20]
   2b03c:	add	r4, r4, r3, lsl #2
   2b040:	mov	r1, r7
   2b044:	add	r0, sp, #112	; 0x70
   2b048:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   2b04c:	cmp	r0, #0
   2b050:	beq	2ada0 <__assert_fail@plt+0x191fc>
   2b054:	ldr	sl, [r4, #4]
   2b058:	cmp	sl, #0
   2b05c:	ble	2b134 <__assert_fail@plt+0x19590>
   2b060:	ldr	r6, [r4, #8]
   2b064:	sub	r6, r6, #4
   2b068:	ldr	r4, [sp, #24]
   2b06c:	mvn	r7, #0
   2b070:	b	2aee0 <__assert_fail@plt+0x1933c>
   2b074:	ldr	r3, [sp, #108]	; 0x6c
   2b078:	add	r2, sp, #276	; 0x114
   2b07c:	mov	r1, r7
   2b080:	mov	r0, r4
   2b084:	bl	24b30 <__assert_fail@plt+0x12f8c>
   2b088:	subs	r5, r0, #0
   2b08c:	beq	2af1c <__assert_fail@plt+0x19378>
   2b090:	ldr	r3, [r4, #12]
   2b094:	ldr	r7, [r3, r8, lsl #2]
   2b098:	ldr	r3, [sp, #108]	; 0x6c
   2b09c:	add	r5, r5, r3
   2b0a0:	b	2af48 <__assert_fail@plt+0x193a4>
   2b0a4:	ldr	r3, [r1, r6]
   2b0a8:	add	r3, r3, #1
   2b0ac:	ldr	r2, [sp, #64]	; 0x40
   2b0b0:	cmp	r2, r3
   2b0b4:	ble	2b194 <__assert_fail@plt+0x195f0>
   2b0b8:	ldr	r2, [sp, #468]	; 0x1d4
   2b0bc:	add	r2, r2, r3, lsl #3
   2b0c0:	ldr	r5, [r2, #4]
   2b0c4:	ldr	r2, [sp, #468]	; 0x1d4
   2b0c8:	ldr	r2, [r2, r3, lsl #3]
   2b0cc:	sub	r5, r5, r2
   2b0d0:	cmp	fp, #0
   2b0d4:	beq	2b1ec <__assert_fail@plt+0x19648>
   2b0d8:	ldr	r2, [sp, #468]	; 0x1d4
   2b0dc:	add	r2, r2, r3, lsl #3
   2b0e0:	ldr	r1, [sp, #468]	; 0x1d4
   2b0e4:	ldr	r0, [r1, r3, lsl #3]
   2b0e8:	cmn	r0, #1
   2b0ec:	beq	2b134 <__assert_fail@plt+0x19590>
   2b0f0:	ldr	r3, [r2, #4]
   2b0f4:	cmn	r3, #1
   2b0f8:	beq	2b134 <__assert_fail@plt+0x19590>
   2b0fc:	cmp	r5, #0
   2b100:	beq	2b1a0 <__assert_fail@plt+0x195fc>
   2b104:	ldr	ip, [sp, #280]	; 0x118
   2b108:	ldr	r1, [sp, #108]	; 0x6c
   2b10c:	ldr	r3, [sp, #304]	; 0x130
   2b110:	sub	r3, r3, r1
   2b114:	cmp	r5, r3
   2b118:	bgt	2b134 <__assert_fail@plt+0x19590>
   2b11c:	mov	r2, r5
   2b120:	add	r1, ip, r1
   2b124:	add	r0, ip, r0
   2b128:	bl	117c0 <memcmp@plt>
   2b12c:	cmp	r0, #0
   2b130:	beq	2b090 <__assert_fail@plt+0x194ec>
   2b134:	mvn	r7, #0
   2b138:	cmn	r7, #2
   2b13c:	beq	2b200 <__assert_fail@plt+0x1965c>
   2b140:	add	r3, sp, #112	; 0x70
   2b144:	str	r3, [sp, #4]
   2b148:	ldr	r3, [sp, #32]
   2b14c:	str	r3, [sp]
   2b150:	ldr	r3, [sp, #468]	; 0x1d4
   2b154:	ldr	r2, [sp, #20]
   2b158:	add	r1, sp, #108	; 0x6c
   2b15c:	mov	r0, fp
   2b160:	bl	23da0 <__assert_fail@plt+0x121fc>
   2b164:	subs	r7, r0, #0
   2b168:	bge	2af94 <__assert_fail@plt+0x193f0>
   2b16c:	ldr	sl, [sp, #28]
   2b170:	ldr	r0, [sp, #120]	; 0x78
   2b174:	bl	17750 <__assert_fail@plt+0x5bac>
   2b178:	add	r0, sp, #136	; 0x88
   2b17c:	bl	22b30 <__assert_fail@plt+0x10f8c>
   2b180:	mov	r0, fp
   2b184:	bl	22b78 <__assert_fail@plt+0x10fd4>
   2b188:	mov	r3, #1
   2b18c:	str	r3, [sp, #24]
   2b190:	b	2a3ec <__assert_fail@plt+0x18848>
   2b194:	cmp	fp, #0
   2b198:	mvnne	r7, #0
   2b19c:	bne	2af8c <__assert_fail@plt+0x193e8>
   2b1a0:	mov	r1, r7
   2b1a4:	add	r0, sp, #112	; 0x70
   2b1a8:	bl	22d7c <__assert_fail@plt+0x111d8>
   2b1ac:	cmp	r0, #0
   2b1b0:	beq	2b218 <__assert_fail@plt+0x19674>
   2b1b4:	ldr	r3, [r4, #20]
   2b1b8:	add	r2, r8, r8, lsl #1
   2b1bc:	add	r3, r3, r2, lsl #2
   2b1c0:	ldr	r3, [r3, #8]
   2b1c4:	ldr	r7, [r3]
   2b1c8:	ldr	r2, [sp, #108]	; 0x6c
   2b1cc:	ldr	r3, [sp, #376]	; 0x178
   2b1d0:	ldr	r0, [r3, r2, lsl #2]
   2b1d4:	mov	r1, r7
   2b1d8:	add	r0, r0, #4
   2b1dc:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   2b1e0:	cmp	r0, #0
   2b1e4:	beq	2af1c <__assert_fail@plt+0x19378>
   2b1e8:	b	2af8c <__assert_fail@plt+0x193e8>
   2b1ec:	cmp	r5, #0
   2b1f0:	bne	2b090 <__assert_fail@plt+0x194ec>
   2b1f4:	b	2b1a0 <__assert_fail@plt+0x195fc>
   2b1f8:	mov	r7, r5
   2b1fc:	b	2af8c <__assert_fail@plt+0x193e8>
   2b200:	ldr	sl, [sp, #28]
   2b204:	b	2adb8 <__assert_fail@plt+0x19214>
   2b208:	ldr	sl, [sp, #28]
   2b20c:	b	2adb8 <__assert_fail@plt+0x19214>
   2b210:	ldr	sl, [sp, #28]
   2b214:	b	2adb8 <__assert_fail@plt+0x19214>
   2b218:	ldr	sl, [sp, #28]
   2b21c:	b	2adb8 <__assert_fail@plt+0x19214>
   2b220:	ldr	sl, [sp, #28]
   2b224:	ldr	r0, [sp, #120]	; 0x78
   2b228:	bl	17750 <__assert_fail@plt+0x5bac>
   2b22c:	add	r0, sp, #136	; 0x88
   2b230:	bl	22b30 <__assert_fail@plt+0x10f8c>
   2b234:	mov	r0, fp
   2b238:	bl	22b78 <__assert_fail@plt+0x10fd4>
   2b23c:	cmp	r0, #0
   2b240:	beq	2b81c <__assert_fail@plt+0x19c78>
   2b244:	str	r0, [sp, #24]
   2b248:	b	2a3ec <__assert_fail@plt+0x18848>
   2b24c:	ldr	r0, [r1, #-4]
   2b250:	add	r0, r0, ip
   2b254:	str	r0, [r1, #-4]
   2b258:	ldr	r0, [r1]
   2b25c:	add	r0, r0, ip
   2b260:	str	r0, [r1]
   2b264:	add	r2, r2, #8
   2b268:	cmp	r2, lr
   2b26c:	beq	2b2b0 <__assert_fail@plt+0x1970c>
   2b270:	mov	r1, r2
   2b274:	ldr	r0, [r2, #-4]
   2b278:	cmn	r0, #1
   2b27c:	beq	2b264 <__assert_fail@plt+0x196c0>
   2b280:	cmp	r4, #0
   2b284:	beq	2b24c <__assert_fail@plt+0x196a8>
   2b288:	cmp	r0, r5
   2b28c:	ldrne	r0, [r6, r0, lsl #2]
   2b290:	moveq	r0, r7
   2b294:	str	r0, [r2, #-4]
   2b298:	ldr	r0, [r2]
   2b29c:	cmp	r5, r0
   2b2a0:	ldrne	r0, [r6, r0, lsl #2]
   2b2a4:	moveq	r0, r7
   2b2a8:	str	r0, [r2]
   2b2ac:	b	2b24c <__assert_fail@plt+0x196a8>
   2b2b0:	ldr	r2, [sp, #72]	; 0x48
   2b2b4:	cmp	r2, #0
   2b2b8:	ble	2b2e4 <__assert_fail@plt+0x19740>
   2b2bc:	ldr	r2, [sp, #468]	; 0x1d4
   2b2c0:	add	r3, r2, r3
   2b2c4:	ldr	r1, [sp, #464]	; 0x1d0
   2b2c8:	add	r1, r2, r1, lsl #3
   2b2cc:	mvn	r2, #0
   2b2d0:	str	r2, [r3]
   2b2d4:	str	r2, [r3, #4]
   2b2d8:	add	r3, r3, #8
   2b2dc:	cmp	r1, r3
   2b2e0:	bne	2b2d0 <__assert_fail@plt+0x1972c>
   2b2e4:	ldr	r3, [sl, #132]	; 0x84
   2b2e8:	cmp	r3, #0
   2b2ec:	beq	2a3ec <__assert_fail@plt+0x18848>
   2b2f0:	ldr	r3, [sp, #64]	; 0x40
   2b2f4:	sub	r1, r3, #1
   2b2f8:	mov	r3, #0
   2b2fc:	ldr	r2, [sp, #468]	; 0x1d4
   2b300:	add	ip, r2, #8
   2b304:	add	r0, r2, #12
   2b308:	b	2b334 <__assert_fail@plt+0x19790>
   2b30c:	add	r2, r2, #1
   2b310:	ldr	lr, [sp, #468]	; 0x1d4
   2b314:	ldr	r2, [lr, r2, lsl #3]
   2b318:	str	r2, [ip, r3, lsl #3]
   2b31c:	ldr	r2, [sl, #132]	; 0x84
   2b320:	ldr	r2, [r2, r3, lsl #2]
   2b324:	add	r2, lr, r2, lsl #3
   2b328:	ldr	r2, [r2, #12]
   2b32c:	str	r2, [r0, r3, lsl #3]
   2b330:	add	r3, r3, #1
   2b334:	cmp	r3, r1
   2b338:	beq	2a3ec <__assert_fail@plt+0x18848>
   2b33c:	ldr	r2, [sl, #132]	; 0x84
   2b340:	ldr	r2, [r2, r3, lsl #2]
   2b344:	cmp	r3, r2
   2b348:	bne	2b30c <__assert_fail@plt+0x19768>
   2b34c:	b	2b330 <__assert_fail@plt+0x1978c>
   2b350:	ldr	r3, [sp, #76]	; 0x4c
   2b354:	str	r3, [sp, #24]
   2b358:	b	2a3ec <__assert_fail@plt+0x18848>
   2b35c:	mov	r3, #12
   2b360:	str	r3, [sp, #24]
   2b364:	b	2a3ec <__assert_fail@plt+0x18848>
   2b368:	mov	r3, #12
   2b36c:	str	r3, [sp, #24]
   2b370:	b	2a3ec <__assert_fail@plt+0x18848>
   2b374:	mov	r3, #1
   2b378:	str	r3, [sp, #24]
   2b37c:	b	2a3ec <__assert_fail@plt+0x18848>
   2b380:	ldr	sl, [sp, #52]	; 0x34
   2b384:	mov	r3, #12
   2b388:	str	r3, [sp, #24]
   2b38c:	b	2a3ec <__assert_fail@plt+0x18848>
   2b390:	ldr	sl, [sp, #52]	; 0x34
   2b394:	b	2a3ec <__assert_fail@plt+0x18848>
   2b398:	ldr	sl, [sp, #52]	; 0x34
   2b39c:	b	2a3ec <__assert_fail@plt+0x18848>
   2b3a0:	add	r0, sp, #276	; 0x114
   2b3a4:	bl	22a68 <__assert_fail@plt+0x10ec4>
   2b3a8:	ldr	r0, [sp, #408]	; 0x198
   2b3ac:	bl	17750 <__assert_fail@plt+0x5bac>
   2b3b0:	ldr	r0, [sp, #392]	; 0x188
   2b3b4:	bl	17750 <__assert_fail@plt+0x5bac>
   2b3b8:	b	2a400 <__assert_fail@plt+0x1885c>
   2b3bc:	mov	r3, #1
   2b3c0:	str	r3, [sp, #24]
   2b3c4:	b	2a408 <__assert_fail@plt+0x18864>
   2b3c8:	mov	r3, #1
   2b3cc:	str	r3, [sp, #24]
   2b3d0:	b	2a408 <__assert_fail@plt+0x18864>
   2b3d4:	mov	r3, #1
   2b3d8:	str	r3, [sp, #24]
   2b3dc:	b	2a408 <__assert_fail@plt+0x18864>
   2b3e0:	mov	r3, #1
   2b3e4:	str	r3, [sp, #24]
   2b3e8:	b	2a408 <__assert_fail@plt+0x18864>
   2b3ec:	mov	r3, #1
   2b3f0:	str	r3, [sp, #24]
   2b3f4:	b	2a408 <__assert_fail@plt+0x18864>
   2b3f8:	mov	r3, #1
   2b3fc:	str	r3, [sp, #24]
   2b400:	b	2a408 <__assert_fail@plt+0x18864>
   2b404:	mov	r3, #12
   2b408:	str	r3, [sp, #24]
   2b40c:	b	2a3ec <__assert_fail@plt+0x18848>
   2b410:	ldr	r3, [sp, #20]
   2b414:	ldr	r3, [r3]
   2b418:	str	r3, [sp, #16]
   2b41c:	mov	fp, #0
   2b420:	str	fp, [sp, #124]	; 0x7c
   2b424:	mov	r3, #2
   2b428:	str	r3, [sp, #128]	; 0x80
   2b42c:	str	fp, [sp, #132]	; 0x84
   2b430:	str	fp, [sp, #136]	; 0x88
   2b434:	mov	r3, #16
   2b438:	str	r3, [sp, #140]	; 0x8c
   2b43c:	add	r3, sp, #148	; 0x94
   2b440:	str	r3, [sp, #144]	; 0x90
   2b444:	ldr	r3, [sp, #16]
   2b448:	ldr	r7, [r3, #72]	; 0x48
   2b44c:	mov	r3, #0
   2b450:	str	r3, [sp, #112]	; 0x70
   2b454:	str	r3, [sp, #116]	; 0x74
   2b458:	str	r3, [sp, #120]	; 0x78
   2b45c:	ldr	r3, [sp, #136]	; 0x88
   2b460:	ldr	r2, [sp, #64]	; 0x40
   2b464:	cmp	r2, r3
   2b468:	bhi	2abe4 <__assert_fail@plt+0x19040>
   2b46c:	ldr	r3, [sp, #64]	; 0x40
   2b470:	str	r3, [sp, #136]	; 0x88
   2b474:	ldr	r3, [sp, #144]	; 0x90
   2b478:	str	r3, [sp, #32]
   2b47c:	ldr	r2, [sp, #36]	; 0x24
   2b480:	ldr	r1, [sp, #468]	; 0x1d4
   2b484:	mov	r0, r3
   2b488:	bl	11784 <memcpy@plt>
   2b48c:	ldr	r9, [sp, #468]	; 0x1d4
   2b490:	ldr	r3, [r9], #4
   2b494:	str	r3, [sp, #108]	; 0x6c
   2b498:	ldr	r3, [sp, #64]	; 0x40
   2b49c:	lsl	r2, r3, #4
   2b4a0:	str	r2, [sp, #40]	; 0x28
   2b4a4:	str	r3, [sp, #12]
   2b4a8:	str	sl, [sp, #28]
   2b4ac:	b	2af94 <__assert_fail@plt+0x193f0>
   2b4b0:	mov	r3, #0
   2b4b4:	ldr	r2, [sp, #468]	; 0x1d4
   2b4b8:	str	r3, [r2]
   2b4bc:	ldr	r3, [sp, #368]	; 0x170
   2b4c0:	str	r3, [r2, #4]
   2b4c4:	b	2b81c <__assert_fail@plt+0x19c78>
   2b4c8:	ldr	sl, [sp, #52]	; 0x34
   2b4cc:	mov	r3, #12
   2b4d0:	str	r3, [sp, #24]
   2b4d4:	b	2a3ec <__assert_fail@plt+0x18848>
   2b4d8:	ldr	sl, [sp, #52]	; 0x34
   2b4dc:	mov	r3, #12
   2b4e0:	str	r3, [sp, #24]
   2b4e4:	b	2a3ec <__assert_fail@plt+0x18848>
   2b4e8:	mov	r3, #0
   2b4ec:	str	r3, [sp, #112]	; 0x70
   2b4f0:	b	2aa28 <__assert_fail@plt+0x18e84>
   2b4f4:	mov	r3, #12
   2b4f8:	str	r3, [sp, #24]
   2b4fc:	b	2a3ec <__assert_fail@plt+0x18848>
   2b500:	ldr	r3, [sp, #44]	; 0x2c
   2b504:	str	r3, [sp, #280]	; 0x118
   2b508:	ldr	r3, [sl, #92]	; 0x5c
   2b50c:	ldr	r2, [sp, #60]	; 0x3c
   2b510:	ldr	r1, [sp, #76]	; 0x4c
   2b514:	cmp	r3, #1
   2b518:	movgt	r2, r1
   2b51c:	mov	r3, r2
   2b520:	b	29ffc <__assert_fail@plt+0x18458>
   2b524:	mov	r0, r4
   2b528:	bl	17750 <__assert_fail@plt+0x5bac>
   2b52c:	mov	r0, r5
   2b530:	bl	17750 <__assert_fail@plt+0x5bac>
   2b534:	b	2b554 <__assert_fail@plt+0x199b0>
   2b538:	mov	r5, #0
   2b53c:	mov	r0, r4
   2b540:	bl	17750 <__assert_fail@plt+0x5bac>
   2b544:	mov	r0, r5
   2b548:	bl	17750 <__assert_fail@plt+0x5bac>
   2b54c:	cmp	r8, #1
   2b550:	bne	2b5bc <__assert_fail@plt+0x19a18>
   2b554:	add	r0, sp, #276	; 0x114
   2b558:	bl	22a68 <__assert_fail@plt+0x10ec4>
   2b55c:	ldr	r3, [sp, #412]	; 0x19c
   2b560:	ldr	r2, [sp, #92]	; 0x5c
   2b564:	add	r3, r2, r3
   2b568:	str	r3, [sp, #412]	; 0x19c
   2b56c:	ldr	r2, [sp, #48]	; 0x30
   2b570:	cmp	r3, r2
   2b574:	movle	r2, #0
   2b578:	movgt	r2, #1
   2b57c:	ldr	r1, [sp, #56]	; 0x38
   2b580:	cmp	r3, r1
   2b584:	movge	r3, r2
   2b588:	orrlt	r3, r2, #1
   2b58c:	cmp	r3, #0
   2b590:	bne	2ab60 <__assert_fail@plt+0x18fbc>
   2b594:	ldr	r3, [sp, #80]	; 0x50
   2b598:	sub	r3, r3, #4
   2b59c:	cmp	r3, #4
   2b5a0:	ldrls	pc, [pc, r3, lsl #2]
   2b5a4:	b	2a1f4 <__assert_fail@plt+0x18650>
   2b5a8:	andeq	sl, r2, ip, ror r3
   2b5ac:	andeq	sl, r2, ip, ror r3
   2b5b0:	andeq	sl, r2, r4, lsl r3
   2b5b4:	muleq	r2, ip, r2
   2b5b8:	andeq	sl, r2, ip, asr #8
   2b5bc:	mov	r3, r8
   2b5c0:	ldr	sl, [sp, #52]	; 0x34
   2b5c4:	str	r3, [sp, #24]
   2b5c8:	b	2a3ec <__assert_fail@plt+0x18848>
   2b5cc:	ldr	sl, [sp, #52]	; 0x34
   2b5d0:	mov	r0, r4
   2b5d4:	bl	17750 <__assert_fail@plt+0x5bac>
   2b5d8:	mov	r0, #0
   2b5dc:	bl	17750 <__assert_fail@plt+0x5bac>
   2b5e0:	mov	r3, #12
   2b5e4:	b	2b5c4 <__assert_fail@plt+0x19a20>
   2b5e8:	mov	r2, fp
   2b5ec:	ldr	r3, [sp, #376]	; 0x178
   2b5f0:	ldr	r1, [r3, fp, lsl #2]
   2b5f4:	add	r0, sp, #276	; 0x114
   2b5f8:	bl	23cac <__assert_fail@plt+0x12108>
   2b5fc:	str	r0, [sp, #372]	; 0x174
   2b600:	ldr	r3, [sp, #52]	; 0x34
   2b604:	ldrb	r3, [r3, #88]	; 0x58
   2b608:	tst	r3, #1
   2b60c:	bne	2b63c <__assert_fail@plt+0x19a98>
   2b610:	b	2b62c <__assert_fail@plt+0x19a88>
   2b614:	mov	r2, fp
   2b618:	ldr	r3, [sp, #376]	; 0x178
   2b61c:	ldr	r1, [r3, fp, lsl #2]
   2b620:	add	r0, sp, #276	; 0x114
   2b624:	bl	23cac <__assert_fail@plt+0x12108>
   2b628:	str	r0, [sp, #372]	; 0x174
   2b62c:	ldr	r3, [sp, #52]	; 0x34
   2b630:	ldr	r3, [r3, #76]	; 0x4c
   2b634:	cmp	r3, #0
   2b638:	beq	2ab70 <__assert_fail@plt+0x18fcc>
   2b63c:	ldr	r9, [sp, #360]	; 0x168
   2b640:	ldr	r7, [sp, #372]	; 0x174
   2b644:	cmn	fp, #-1073741822	; 0xc0000002
   2b648:	bhi	2b4c8 <__assert_fail@plt+0x19924>
   2b64c:	add	r5, fp, #1
   2b650:	lsl	r5, r5, #2
   2b654:	mov	r0, r5
   2b658:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2b65c:	subs	r4, r0, #0
   2b660:	beq	2b5cc <__assert_fail@plt+0x19a28>
   2b664:	ldr	r3, [r9, #76]	; 0x4c
   2b668:	cmp	r3, #0
   2b66c:	beq	2aae4 <__assert_fail@plt+0x18f40>
   2b670:	mov	r0, r5
   2b674:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2b678:	subs	r5, r0, #0
   2b67c:	beq	2b5cc <__assert_fail@plt+0x19a28>
   2b680:	mov	r6, #0
   2b684:	str	sl, [sp, #12]
   2b688:	str	r9, [sp, #28]
   2b68c:	add	sl, fp, #1
   2b690:	lsl	r9, sl, #2
   2b694:	mov	r2, r9
   2b698:	mov	r1, r6
   2b69c:	mov	r0, r5
   2b6a0:	bl	119e8 <memset@plt>
   2b6a4:	str	r4, [sp, #136]	; 0x88
   2b6a8:	str	r5, [sp, #140]	; 0x8c
   2b6ac:	str	r7, [sp, #144]	; 0x90
   2b6b0:	str	fp, [sp, #148]	; 0x94
   2b6b4:	str	r6, [sp, #152]	; 0x98
   2b6b8:	str	r6, [sp, #156]	; 0x9c
   2b6bc:	str	r6, [sp, #160]	; 0xa0
   2b6c0:	add	r1, sp, #136	; 0x88
   2b6c4:	add	r0, sp, #276	; 0x114
   2b6c8:	bl	29b10 <__assert_fail@plt+0x17f6c>
   2b6cc:	mov	r8, r0
   2b6d0:	ldr	r0, [sp, #160]	; 0xa0
   2b6d4:	bl	17750 <__assert_fail@plt+0x5bac>
   2b6d8:	cmp	r8, #0
   2b6dc:	bne	2b53c <__assert_fail@plt+0x19998>
   2b6e0:	ldr	r3, [r4]
   2b6e4:	cmp	r3, #0
   2b6e8:	bne	2aaac <__assert_fail@plt+0x18f08>
   2b6ec:	ldr	r3, [r5]
   2b6f0:	cmp	r3, #0
   2b6f4:	bne	2aaac <__assert_fail@plt+0x18f08>
   2b6f8:	sub	r9, r9, #4
   2b6fc:	ldr	r3, [sp, #376]	; 0x178
   2b700:	add	r9, r3, r9
   2b704:	subs	fp, fp, #1
   2b708:	bmi	2b524 <__assert_fail@plt+0x19980>
   2b70c:	ldr	r1, [r9, #-4]!
   2b710:	cmp	r1, #0
   2b714:	beq	2b704 <__assert_fail@plt+0x19b60>
   2b718:	ldrb	r3, [r1, #52]	; 0x34
   2b71c:	tst	r3, #16
   2b720:	beq	2b704 <__assert_fail@plt+0x19b60>
   2b724:	mov	r2, fp
   2b728:	add	r0, sp, #276	; 0x114
   2b72c:	bl	23cac <__assert_fail@plt+0x12108>
   2b730:	mov	r7, r0
   2b734:	b	2b68c <__assert_fail@plt+0x19ae8>
   2b738:	ldr	r3, [sp, #112]	; 0x70
   2b73c:	cmp	r3, #0
   2b740:	bne	2b848 <__assert_fail@plt+0x19ca4>
   2b744:	ldr	r2, [sp, #28]
   2b748:	cmp	r2, #0
   2b74c:	beq	2b760 <__assert_fail@plt+0x19bbc>
   2b750:	ldr	r3, [r2]
   2b754:	ldr	r1, [sp, #36]	; 0x24
   2b758:	add	r3, r3, r1
   2b75c:	str	r3, [r2]
   2b760:	cmn	fp, #1
   2b764:	beq	2b554 <__assert_fail@plt+0x199b0>
   2b768:	cmn	fp, #2
   2b76c:	beq	2b380 <__assert_fail@plt+0x197dc>
   2b770:	str	fp, [sp, #368]	; 0x170
   2b774:	ldr	r3, [sp, #64]	; 0x40
   2b778:	cmp	r3, #1
   2b77c:	movls	sl, #0
   2b780:	movhi	sl, #1
   2b784:	ldr	r3, [sp, #20]
   2b788:	ldrb	r3, [r3, #28]
   2b78c:	eor	r3, r3, #16
   2b790:	ubfx	r3, r3, #4, #1
   2b794:	tst	sl, r3
   2b798:	bne	2b5e8 <__assert_fail@plt+0x19a44>
   2b79c:	ldr	r2, [sp, #52]	; 0x34
   2b7a0:	ldr	r3, [r2, #76]	; 0x4c
   2b7a4:	cmp	r3, #0
   2b7a8:	bne	2b614 <__assert_fail@plt+0x19a70>
   2b7ac:	mov	r8, sl
   2b7b0:	mov	sl, r2
   2b7b4:	ldr	r2, [sp, #64]	; 0x40
   2b7b8:	cmp	r2, #0
   2b7bc:	beq	2a3ec <__assert_fail@plt+0x18848>
   2b7c0:	cmp	r2, #1
   2b7c4:	bls	2b4b0 <__assert_fail@plt+0x1990c>
   2b7c8:	ldr	r3, [sp, #468]	; 0x1d4
   2b7cc:	lsl	r2, r2, #3
   2b7d0:	str	r2, [sp, #36]	; 0x24
   2b7d4:	sub	r1, r3, #8
   2b7d8:	add	r1, r1, r2
   2b7dc:	mvn	r2, #0
   2b7e0:	str	r2, [r3, #12]
   2b7e4:	str	r2, [r3, #8]!
   2b7e8:	cmp	r3, r1
   2b7ec:	bne	2b7e0 <__assert_fail@plt+0x19c3c>
   2b7f0:	mov	r3, #0
   2b7f4:	ldr	r2, [sp, #468]	; 0x1d4
   2b7f8:	str	r3, [r2]
   2b7fc:	ldr	r3, [sp, #368]	; 0x170
   2b800:	str	r3, [r2, #4]
   2b804:	ldr	r3, [sp, #20]
   2b808:	ldrb	r3, [r3, #28]
   2b80c:	eor	r3, r3, #16
   2b810:	ubfx	r3, r3, #4, #1
   2b814:	tst	r8, r3
   2b818:	bne	2ab7c <__assert_fail@plt+0x18fd8>
   2b81c:	ldrb	r4, [sp, #352]	; 0x160
   2b820:	ldr	r5, [sp, #304]	; 0x130
   2b824:	ldr	r6, [sp, #288]	; 0x120
   2b828:	ldr	ip, [sp, #412]	; 0x19c
   2b82c:	ldr	r3, [sp, #468]	; 0x1d4
   2b830:	add	r2, r3, #4
   2b834:	ldr	r3, [sp, #64]	; 0x40
   2b838:	lsl	r3, r3, #3
   2b83c:	add	lr, r2, r3
   2b840:	ldr	r7, [sp, #308]	; 0x134
   2b844:	b	2b270 <__assert_fail@plt+0x196cc>
   2b848:	ldr	sl, [sp, #52]	; 0x34
   2b84c:	b	2b4dc <__assert_fail@plt+0x19938>
   2b850:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2b854:	strd	r6, [sp, #8]
   2b858:	strd	r8, [sp, #16]
   2b85c:	strd	sl, [sp, #24]
   2b860:	str	lr, [sp, #32]
   2b864:	sub	sp, sp, #132	; 0x84
   2b868:	mov	r5, r0
   2b86c:	mov	fp, r1
   2b870:	mov	r6, r2
   2b874:	mov	r9, r3
   2b878:	mov	r2, #0
   2b87c:	str	r2, [sp, #124]	; 0x7c
   2b880:	ldrb	r3, [r0, #28]
   2b884:	str	r9, [r0, #12]
   2b888:	str	r2, [r0, #8]
   2b88c:	str	r2, [r0, #24]
   2b890:	and	r3, r3, #150	; 0x96
   2b894:	bfi	r3, r2, #1, #2
   2b898:	strb	r3, [r0, #28]
   2b89c:	ldr	r4, [r0]
   2b8a0:	ldr	r3, [r0, #4]
   2b8a4:	cmp	r3, #159	; 0x9f
   2b8a8:	bls	2bb6c <__assert_fail@plt+0x19fc8>
   2b8ac:	mov	r2, #160	; 0xa0
   2b8b0:	str	r2, [r5, #8]
   2b8b4:	mov	r1, #0
   2b8b8:	mov	r0, r4
   2b8bc:	bl	119e8 <memset@plt>
   2b8c0:	mov	r3, #31
   2b8c4:	str	r3, [r4, #64]	; 0x40
   2b8c8:	movw	r3, #43689	; 0xaaa9
   2b8cc:	movt	r3, #2730	; 0xaaa
   2b8d0:	cmp	r6, r3
   2b8d4:	bhi	2c4a4 <__assert_fail@plt+0x1a900>
   2b8d8:	add	r0, r6, #1
   2b8dc:	str	r0, [r4, #4]
   2b8e0:	lsl	r0, r0, #3
   2b8e4:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2b8e8:	str	r0, [r4]
   2b8ec:	cmp	r6, #0
   2b8f0:	beq	2bb90 <__assert_fail@plt+0x19fec>
   2b8f4:	mov	r7, #1
   2b8f8:	lsl	r7, r7, #1
   2b8fc:	cmp	r6, r7
   2b900:	bcs	2b8f8 <__assert_fail@plt+0x19d54>
   2b904:	mov	r1, r7
   2b908:	mov	r0, #12
   2b90c:	bl	2ef9c <__assert_fail@plt+0x1d3f8>
   2b910:	str	r0, [r4, #32]
   2b914:	sub	r7, r7, #1
   2b918:	str	r7, [r4, #68]	; 0x44
   2b91c:	bl	11880 <__ctype_get_mb_cur_max@plt>
   2b920:	str	r0, [r4, #92]	; 0x5c
   2b924:	mov	r0, #14
   2b928:	bl	11a84 <nl_langinfo@plt>
   2b92c:	ldrb	r3, [r0]
   2b930:	and	r3, r3, #223	; 0xdf
   2b934:	cmp	r3, #85	; 0x55
   2b938:	bne	2b990 <__assert_fail@plt+0x19dec>
   2b93c:	ldrb	r3, [r0, #1]
   2b940:	and	r3, r3, #223	; 0xdf
   2b944:	cmp	r3, #84	; 0x54
   2b948:	bne	2b990 <__assert_fail@plt+0x19dec>
   2b94c:	ldrb	r3, [r0, #2]
   2b950:	and	r3, r3, #223	; 0xdf
   2b954:	cmp	r3, #70	; 0x46
   2b958:	bne	2b990 <__assert_fail@plt+0x19dec>
   2b95c:	ldrb	r3, [r0, #3]
   2b960:	cmp	r3, #45	; 0x2d
   2b964:	moveq	r3, #4
   2b968:	movne	r3, #3
   2b96c:	movw	r1, #9808	; 0x2650
   2b970:	movt	r1, #3
   2b974:	add	r0, r0, r3
   2b978:	bl	1170c <strcmp@plt>
   2b97c:	cmp	r0, #0
   2b980:	bne	2b990 <__assert_fail@plt+0x19dec>
   2b984:	ldrb	r3, [r4, #88]	; 0x58
   2b988:	orr	r3, r3, #4
   2b98c:	strb	r3, [r4, #88]	; 0x58
   2b990:	ldrb	r3, [r4, #88]	; 0x58
   2b994:	bfc	r3, #3, #1
   2b998:	strb	r3, [r4, #88]	; 0x58
   2b99c:	ldr	r3, [r4, #92]	; 0x5c
   2b9a0:	cmp	r3, #1
   2b9a4:	ble	2b9c0 <__assert_fail@plt+0x19e1c>
   2b9a8:	ldrb	r3, [r4, #88]	; 0x58
   2b9ac:	tst	r3, #4
   2b9b0:	beq	2bb98 <__assert_fail@plt+0x19ff4>
   2b9b4:	movw	r3, #9224	; 0x2408
   2b9b8:	movt	r3, #3
   2b9bc:	str	r3, [r4, #60]	; 0x3c
   2b9c0:	ldr	r3, [r4]
   2b9c4:	cmp	r3, #0
   2b9c8:	beq	2c4a4 <__assert_fail@plt+0x1a900>
   2b9cc:	ldr	r3, [r4, #32]
   2b9d0:	cmp	r3, #0
   2b9d4:	beq	2c4a4 <__assert_fail@plt+0x1a900>
   2b9d8:	mov	r3, #0
   2b9dc:	str	r3, [sp, #124]	; 0x7c
   2b9e0:	movw	r3, #0
   2b9e4:	movt	r3, #0
   2b9e8:	cmp	r3, #0
   2b9ec:	movne	r3, #1
   2b9f0:	moveq	r3, #0
   2b9f4:	mov	r2, r3
   2b9f8:	movw	r3, #0
   2b9fc:	movt	r3, #0
   2ba00:	cmp	r3, #0
   2ba04:	movne	r3, #1
   2ba08:	moveq	r3, #0
   2ba0c:	orr	r3, r2, r3
   2ba10:	ands	r3, r3, #255	; 0xff
   2ba14:	str	r3, [sp, #16]
   2ba18:	beq	2ba44 <__assert_fail@plt+0x19ea0>
   2ba1c:	mov	r1, #0
   2ba20:	add	r0, r4, #136	; 0x88
   2ba24:	bl	11790 <pthread_mutex_init@plt>
   2ba28:	cmp	r0, #0
   2ba2c:	movne	r3, #12
   2ba30:	strne	r3, [sp, #124]	; 0x7c
   2ba34:	bne	2c4ac <__assert_fail@plt+0x1a908>
   2ba38:	ldr	r3, [sp, #124]	; 0x7c
   2ba3c:	cmp	r3, #0
   2ba40:	bne	2c4ac <__assert_fail@plt+0x1a908>
   2ba44:	str	r6, [sp, #12]
   2ba48:	ldr	r8, [r5, #20]
   2ba4c:	and	r7, r9, #4194304	; 0x400000
   2ba50:	orr	sl, r8, r7
   2ba54:	mov	r2, #76	; 0x4c
   2ba58:	mov	r1, #0
   2ba5c:	add	r0, sp, #44	; 0x2c
   2ba60:	bl	119e8 <memset@plt>
   2ba64:	str	fp, [sp, #40]	; 0x28
   2ba68:	str	r6, [sp, #88]	; 0x58
   2ba6c:	str	r6, [sp, #84]	; 0x54
   2ba70:	str	r8, [sp, #104]	; 0x68
   2ba74:	adds	r3, r7, #0
   2ba78:	movne	r3, #1
   2ba7c:	strb	r3, [sp, #112]	; 0x70
   2ba80:	adds	r3, sl, #0
   2ba84:	movne	r3, #1
   2ba88:	strb	r3, [sp, #115]	; 0x73
   2ba8c:	ldr	r3, [r4, #92]	; 0x5c
   2ba90:	str	r3, [sp, #120]	; 0x78
   2ba94:	ldrb	r3, [r4, #88]	; 0x58
   2ba98:	ubfx	r2, r3, #2, #1
   2ba9c:	strb	r2, [sp, #113]	; 0x71
   2baa0:	ubfx	r3, r3, #3, #1
   2baa4:	strb	r3, [sp, #114]	; 0x72
   2baa8:	str	r6, [sp, #96]	; 0x60
   2baac:	str	r6, [sp, #92]	; 0x5c
   2bab0:	cmp	r6, #0
   2bab4:	bgt	2bc24 <__assert_fail@plt+0x1a080>
   2bab8:	ldrb	r3, [sp, #115]	; 0x73
   2babc:	cmp	r3, #0
   2bac0:	ldrne	fp, [sp, #44]	; 0x2c
   2bac4:	str	fp, [sp, #44]	; 0x2c
   2bac8:	cmp	r7, #0
   2bacc:	beq	2bc48 <__assert_fail@plt+0x1a0a4>
   2bad0:	ldr	r3, [r4, #92]	; 0x5c
   2bad4:	cmp	r3, #1
   2bad8:	ble	2bc3c <__assert_fail@plt+0x1a098>
   2badc:	ldr	r6, [sp, #12]
   2bae0:	add	r0, sp, #40	; 0x28
   2bae4:	bl	20f0c <__assert_fail@plt+0xf368>
   2bae8:	cmp	r0, #0
   2baec:	bne	2bb28 <__assert_fail@plt+0x19f84>
   2baf0:	ldr	r3, [sp, #72]	; 0x48
   2baf4:	cmp	r6, r3
   2baf8:	ble	2bc70 <__assert_fail@plt+0x1a0cc>
   2bafc:	ldr	r1, [sp, #76]	; 0x4c
   2bb00:	ldr	r2, [r4, #92]	; 0x5c
   2bb04:	ldr	r3, [sp, #68]	; 0x44
   2bb08:	add	r3, r3, r2
   2bb0c:	cmp	r1, r3
   2bb10:	bgt	2bc70 <__assert_fail@plt+0x1a0cc>
   2bb14:	lsl	r1, r1, #1
   2bb18:	add	r0, sp, #40	; 0x28
   2bb1c:	bl	202a8 <__assert_fail@plt+0xe704>
   2bb20:	cmp	r0, #0
   2bb24:	beq	2bae0 <__assert_fail@plt+0x19f3c>
   2bb28:	str	r0, [sp, #124]	; 0x7c
   2bb2c:	mov	r0, r5
   2bb30:	bl	2282c <__assert_fail@plt+0x10c88>
   2bb34:	add	r0, sp, #40	; 0x28
   2bb38:	bl	2288c <__assert_fail@plt+0x10ce8>
   2bb3c:	ldr	r3, [sp, #16]
   2bb40:	cmp	r3, #0
   2bb44:	beq	2bb50 <__assert_fail@plt+0x19fac>
   2bb48:	add	r0, r4, #136	; 0x88
   2bb4c:	bl	11718 <pthread_mutex_destroy@plt>
   2bb50:	mov	r0, r4
   2bb54:	bl	228cc <__assert_fail@plt+0x10d28>
   2bb58:	mov	r3, #0
   2bb5c:	str	r3, [r5]
   2bb60:	str	r3, [r5, #4]
   2bb64:	ldr	r0, [sp, #124]	; 0x7c
   2bb68:	b	2c3a8 <__assert_fail@plt+0x1a804>
   2bb6c:	mov	r1, #160	; 0xa0
   2bb70:	mov	r0, r4
   2bb74:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   2bb78:	subs	r4, r0, #0
   2bb7c:	beq	2c45c <__assert_fail@plt+0x1a8b8>
   2bb80:	mov	r3, #160	; 0xa0
   2bb84:	str	r3, [r5, #4]
   2bb88:	str	r4, [r5]
   2bb8c:	b	2b8ac <__assert_fail@plt+0x19d08>
   2bb90:	mov	r7, #1
   2bb94:	b	2b904 <__assert_fail@plt+0x19d60>
   2bb98:	mov	r1, #1
   2bb9c:	mov	r0, #32
   2bba0:	bl	2ef9c <__assert_fail@plt+0x1d3f8>
   2bba4:	str	r0, [r4, #60]	; 0x3c
   2bba8:	cmp	r0, #0
   2bbac:	beq	2c4a4 <__assert_fail@plt+0x1a900>
   2bbb0:	mov	r7, #0
   2bbb4:	b	2bc18 <__assert_fail@plt+0x1a074>
   2bbb8:	ldrb	r3, [r4, #88]	; 0x58
   2bbbc:	orr	r3, r3, #8
   2bbc0:	strb	r3, [r4, #88]	; 0x58
   2bbc4:	add	sl, sl, #1
   2bbc8:	add	r8, r8, #1
   2bbcc:	cmp	sl, #32
   2bbd0:	beq	2bc0c <__assert_fail@plt+0x1a068>
   2bbd4:	mov	r0, r8
   2bbd8:	bl	119f4 <btowc@plt>
   2bbdc:	cmn	r0, #1
   2bbe0:	beq	2bbf8 <__assert_fail@plt+0x1a054>
   2bbe4:	ldr	r2, [r4, #60]	; 0x3c
   2bbe8:	ldr	r3, [r2, r7]
   2bbec:	mov	r1, #1
   2bbf0:	orr	r3, r3, r1, lsl sl
   2bbf4:	str	r3, [r2, r7]
   2bbf8:	bics	r3, r8, #127	; 0x7f
   2bbfc:	bne	2bbc4 <__assert_fail@plt+0x1a020>
   2bc00:	cmp	r0, r8
   2bc04:	bne	2bbb8 <__assert_fail@plt+0x1a014>
   2bc08:	b	2bbc4 <__assert_fail@plt+0x1a020>
   2bc0c:	add	r7, r7, #4
   2bc10:	cmp	r7, #32
   2bc14:	beq	2b9c0 <__assert_fail@plt+0x19e1c>
   2bc18:	lsl	r8, r7, #3
   2bc1c:	mov	sl, #0
   2bc20:	b	2bbd4 <__assert_fail@plt+0x1a030>
   2bc24:	add	r1, r6, #1
   2bc28:	add	r0, sp, #40	; 0x28
   2bc2c:	bl	202a8 <__assert_fail@plt+0xe704>
   2bc30:	cmp	r0, #0
   2bc34:	beq	2bab8 <__assert_fail@plt+0x19f14>
   2bc38:	b	2bb28 <__assert_fail@plt+0x19f84>
   2bc3c:	add	r0, sp, #40	; 0x28
   2bc40:	bl	21490 <__assert_fail@plt+0xf8ec>
   2bc44:	b	2bc70 <__assert_fail@plt+0x1a0cc>
   2bc48:	ldr	r3, [r4, #92]	; 0x5c
   2bc4c:	cmp	r3, #1
   2bc50:	bgt	2bc68 <__assert_fail@plt+0x1a0c4>
   2bc54:	cmp	sl, #0
   2bc58:	beq	2bea4 <__assert_fail@plt+0x1a300>
   2bc5c:	add	r0, sp, #40	; 0x28
   2bc60:	bl	1f630 <__assert_fail@plt+0xda8c>
   2bc64:	b	2bc70 <__assert_fail@plt+0x1a0cc>
   2bc68:	add	r0, sp, #40	; 0x28
   2bc6c:	bl	20974 <__assert_fail@plt+0xedd0>
   2bc70:	mov	r8, #0
   2bc74:	str	r8, [sp, #124]	; 0x7c
   2bc78:	str	r8, [r5, #24]
   2bc7c:	ldr	r6, [r5]
   2bc80:	str	r9, [r6, #128]	; 0x80
   2bc84:	orr	r2, r9, #8388608	; 0x800000
   2bc88:	add	r1, sp, #40	; 0x28
   2bc8c:	add	r0, sp, #28
   2bc90:	bl	21fec <__assert_fail@plt+0x10448>
   2bc94:	add	r3, sp, #124	; 0x7c
   2bc98:	str	r3, [sp, #4]
   2bc9c:	str	r8, [sp]
   2bca0:	mov	r3, r9
   2bca4:	add	r2, sp, #28
   2bca8:	mov	r1, r5
   2bcac:	add	r0, sp, #40	; 0x28
   2bcb0:	bl	27cd8 <__assert_fail@plt+0x16134>
   2bcb4:	mov	r8, r0
   2bcb8:	clz	r0, r0
   2bcbc:	lsr	r0, r0, #5
   2bcc0:	ldr	r3, [sp, #124]	; 0x7c
   2bcc4:	cmp	r3, #0
   2bcc8:	moveq	r0, #0
   2bccc:	cmp	r0, #0
   2bcd0:	bne	2c498 <__assert_fail@plt+0x1a8f4>
   2bcd4:	mov	r3, #2
   2bcd8:	mov	r2, #0
   2bcdc:	mov	r1, r2
   2bce0:	mov	r0, r6
   2bce4:	bl	20584 <__assert_fail@plt+0xe9e0>
   2bce8:	mov	r9, r0
   2bcec:	cmp	r8, #0
   2bcf0:	beq	2bd08 <__assert_fail@plt+0x1a164>
   2bcf4:	mov	r3, #16
   2bcf8:	mov	r2, r9
   2bcfc:	mov	r1, r8
   2bd00:	mov	r0, r6
   2bd04:	bl	20584 <__assert_fail@plt+0xe9e0>
   2bd08:	cmp	r0, #0
   2bd0c:	cmpne	r9, #0
   2bd10:	moveq	r3, #12
   2bd14:	streq	r3, [sp, #124]	; 0x7c
   2bd18:	beq	2c498 <__assert_fail@plt+0x1a8f4>
   2bd1c:	str	r0, [r4, #52]	; 0x34
   2bd20:	ldr	r6, [r5]
   2bd24:	ldr	r0, [r6, #4]
   2bd28:	lsl	r0, r0, #2
   2bd2c:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2bd30:	str	r0, [r6, #12]
   2bd34:	ldr	r0, [r6, #4]
   2bd38:	lsl	r0, r0, #2
   2bd3c:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2bd40:	str	r0, [r6, #16]
   2bd44:	ldr	r0, [r6, #4]
   2bd48:	add	r0, r0, r0, lsl #1
   2bd4c:	lsl	r0, r0, #2
   2bd50:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2bd54:	str	r0, [r6, #20]
   2bd58:	ldr	r0, [r6, #4]
   2bd5c:	add	r0, r0, r0, lsl #1
   2bd60:	lsl	r0, r0, #2
   2bd64:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2bd68:	str	r0, [r6, #24]
   2bd6c:	ldr	r3, [r6, #12]
   2bd70:	cmp	r3, #0
   2bd74:	beq	2c490 <__assert_fail@plt+0x1a8ec>
   2bd78:	ldr	r3, [r6, #16]
   2bd7c:	cmp	r3, #0
   2bd80:	beq	2c464 <__assert_fail@plt+0x1a8c0>
   2bd84:	ldr	r3, [r6, #20]
   2bd88:	clz	sl, r0
   2bd8c:	lsr	sl, sl, #5
   2bd90:	cmp	r3, #0
   2bd94:	moveq	sl, #1
   2bd98:	cmp	sl, #0
   2bd9c:	bne	2c46c <__assert_fail@plt+0x1a8c8>
   2bda0:	ldr	r0, [r5, #24]
   2bda4:	lsl	r0, r0, #2
   2bda8:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2bdac:	str	r0, [r6, #132]	; 0x84
   2bdb0:	cmp	r0, #0
   2bdb4:	beq	2be2c <__assert_fail@plt+0x1a288>
   2bdb8:	ldr	r3, [r5, #24]
   2bdbc:	cmp	r3, #0
   2bdc0:	beq	2bde0 <__assert_fail@plt+0x1a23c>
   2bdc4:	mov	r3, #0
   2bdc8:	ldr	r2, [r6, #132]	; 0x84
   2bdcc:	str	r3, [r2, r3, lsl #2]
   2bdd0:	add	r3, r3, #1
   2bdd4:	ldr	r2, [r5, #24]
   2bdd8:	cmp	r2, r3
   2bddc:	bhi	2bdc8 <__assert_fail@plt+0x1a224>
   2bde0:	mov	r2, r6
   2bde4:	movw	r1, #63724	; 0xf8ec
   2bde8:	movt	r1, #1
   2bdec:	ldr	r0, [r6, #52]	; 0x34
   2bdf0:	bl	1f870 <__assert_fail@plt+0xdccc>
   2bdf4:	ldr	ip, [r5, #24]
   2bdf8:	cmp	ip, #0
   2bdfc:	beq	2bebc <__assert_fail@plt+0x1a318>
   2be00:	ldr	r2, [r6, #132]	; 0x84
   2be04:	ldr	r3, [r2]
   2be08:	cmp	r3, #0
   2be0c:	bne	2be2c <__assert_fail@plt+0x1a288>
   2be10:	mov	r0, ip
   2be14:	add	r3, r3, #1
   2be18:	cmp	r0, r3
   2be1c:	beq	2beb4 <__assert_fail@plt+0x1a310>
   2be20:	ldr	r1, [r2, #4]!
   2be24:	cmp	r1, r3
   2be28:	beq	2be14 <__assert_fail@plt+0x1a270>
   2be2c:	mov	r2, r5
   2be30:	movw	r1, #1828	; 0x724
   2be34:	movt	r1, #2
   2be38:	ldr	r0, [r6, #52]	; 0x34
   2be3c:	bl	1f7dc <__assert_fail@plt+0xdc38>
   2be40:	cmp	r0, #0
   2be44:	bne	2c488 <__assert_fail@plt+0x1a8e4>
   2be48:	mov	r2, r6
   2be4c:	movw	r1, #9104	; 0x2390
   2be50:	movt	r1, #2
   2be54:	ldr	r0, [r6, #52]	; 0x34
   2be58:	bl	1f7dc <__assert_fail@plt+0xdc38>
   2be5c:	cmp	r0, #0
   2be60:	bne	2c488 <__assert_fail@plt+0x1a8e4>
   2be64:	mov	r2, r6
   2be68:	movw	r1, #63884	; 0xf98c
   2be6c:	movt	r1, #1
   2be70:	ldr	r0, [r6, #52]	; 0x34
   2be74:	bl	1f870 <__assert_fail@plt+0xdccc>
   2be78:	mov	r2, r6
   2be7c:	movw	r1, #11248	; 0x2bf0
   2be80:	movt	r1, #2
   2be84:	ldr	r0, [r6, #52]	; 0x34
   2be88:	bl	1f870 <__assert_fail@plt+0xdccc>
   2be8c:	subs	r3, r0, #0
   2be90:	str	r3, [sp, #12]
   2be94:	bne	2c474 <__assert_fail@plt+0x1a8d0>
   2be98:	mov	r8, sl
   2be9c:	mov	r9, r3
   2bea0:	b	2bf00 <__assert_fail@plt+0x1a35c>
   2bea4:	ldr	r3, [sp, #76]	; 0x4c
   2bea8:	str	r3, [sp, #68]	; 0x44
   2beac:	str	r3, [sp, #72]	; 0x48
   2beb0:	b	2bc70 <__assert_fail@plt+0x1a0cc>
   2beb4:	cmp	ip, r3
   2beb8:	bne	2be2c <__assert_fail@plt+0x1a288>
   2bebc:	ldr	r0, [r6, #132]	; 0x84
   2bec0:	bl	17750 <__assert_fail@plt+0x5bac>
   2bec4:	mov	r3, #0
   2bec8:	str	r3, [r6, #132]	; 0x84
   2becc:	b	2be2c <__assert_fail@plt+0x1a288>
   2bed0:	cmp	r8, #0
   2bed4:	beq	2bf50 <__assert_fail@plt+0x1a3ac>
   2bed8:	mov	r8, sl
   2bedc:	ldr	r9, [sp, #12]
   2bee0:	b	2bf00 <__assert_fail@plt+0x1a35c>
   2bee4:	ldr	r0, [sp, #36]	; 0x24
   2bee8:	bl	17750 <__assert_fail@plt+0x5bac>
   2beec:	mov	r8, #1
   2bef0:	add	r9, r9, #1
   2bef4:	ldr	r3, [r6, #8]
   2bef8:	cmp	r3, r9
   2befc:	beq	2bed0 <__assert_fail@plt+0x1a32c>
   2bf00:	add	fp, r9, r9, lsl #1
   2bf04:	lsl	fp, fp, #2
   2bf08:	ldr	r3, [r6, #24]
   2bf0c:	add	r3, r3, fp
   2bf10:	ldr	r3, [r3, #4]
   2bf14:	cmp	r3, #0
   2bf18:	bne	2bef0 <__assert_fail@plt+0x1a34c>
   2bf1c:	mov	r3, #1
   2bf20:	mov	r2, r9
   2bf24:	mov	r1, r6
   2bf28:	add	r0, sp, #28
   2bf2c:	bl	234c4 <__assert_fail@plt+0x11920>
   2bf30:	cmp	r0, #0
   2bf34:	bne	2c488 <__assert_fail@plt+0x1a8e4>
   2bf38:	ldr	r3, [r6, #24]
   2bf3c:	add	fp, r3, fp
   2bf40:	ldr	r3, [fp, #4]
   2bf44:	cmp	r3, #0
   2bf48:	bne	2bef0 <__assert_fail@plt+0x1a34c>
   2bf4c:	b	2bee4 <__assert_fail@plt+0x1a340>
   2bf50:	ldrb	r3, [r5, #28]
   2bf54:	tst	r3, #16
   2bf58:	beq	2c0c4 <__assert_fail@plt+0x1a520>
   2bf5c:	ldr	r3, [r6, #76]	; 0x4c
   2bf60:	cmp	r3, #0
   2bf64:	beq	2c04c <__assert_fail@plt+0x1a4a8>
   2bf68:	ldr	r0, [r6, #8]
   2bf6c:	add	r0, r0, r0, lsl #1
   2bf70:	lsl	r0, r0, #2
   2bf74:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2bf78:	str	r0, [r6, #28]
   2bf7c:	cmp	r0, #0
   2bf80:	beq	2c47c <__assert_fail@plt+0x1a8d8>
   2bf84:	ldr	r3, [r6, #8]
   2bf88:	cmp	r3, #0
   2bf8c:	beq	2c04c <__assert_fail@plt+0x1a4a8>
   2bf90:	ldr	r1, [sp, #12]
   2bf94:	mov	r3, #0
   2bf98:	mov	r2, r3
   2bf9c:	ldr	ip, [r6, #28]
   2bfa0:	add	r0, ip, r3
   2bfa4:	str	r2, [ip, r3]
   2bfa8:	str	r2, [r0, #4]
   2bfac:	str	r2, [r0, #8]
   2bfb0:	add	r1, r1, #1
   2bfb4:	ldr	r0, [r6, #8]
   2bfb8:	add	r3, r3, #12
   2bfbc:	cmp	r1, r0
   2bfc0:	bcc	2bf9c <__assert_fail@plt+0x1a3f8>
   2bfc4:	cmp	r0, #0
   2bfc8:	beq	2c04c <__assert_fail@plt+0x1a4a8>
   2bfcc:	ldr	r3, [sp, #12]
   2bfd0:	mov	fp, #0
   2bfd4:	str	r7, [sp, #20]
   2bfd8:	mov	r7, r3
   2bfdc:	ldr	r3, [r6, #24]
   2bfe0:	add	r3, r3, fp
   2bfe4:	ldr	sl, [r3, #8]
   2bfe8:	ldr	r3, [r3, #4]
   2bfec:	cmp	r3, #0
   2bff0:	ble	2c034 <__assert_fail@plt+0x1a490>
   2bff4:	sub	sl, sl, #4
   2bff8:	ldr	r9, [sp, #12]
   2bffc:	ldr	r0, [sl, #4]!
   2c000:	add	r0, r0, r0, lsl #1
   2c004:	ldr	r3, [r6, #28]
   2c008:	mov	r1, r7
   2c00c:	add	r0, r3, r0, lsl #2
   2c010:	bl	2036c <__assert_fail@plt+0xe7c8>
   2c014:	cmp	r0, #0
   2c018:	beq	2c484 <__assert_fail@plt+0x1a8e0>
   2c01c:	add	r9, r9, #1
   2c020:	ldr	r3, [r6, #24]
   2c024:	add	r3, r3, fp
   2c028:	ldr	r3, [r3, #4]
   2c02c:	cmp	r9, r3
   2c030:	blt	2bffc <__assert_fail@plt+0x1a458>
   2c034:	add	r7, r7, #1
   2c038:	add	fp, fp, #12
   2c03c:	ldr	r3, [r6, #8]
   2c040:	cmp	r7, r3
   2c044:	bcc	2bfdc <__assert_fail@plt+0x1a438>
   2c048:	ldr	r7, [sp, #20]
   2c04c:	mov	r3, #0
   2c050:	str	r3, [sp, #124]	; 0x7c
   2c054:	ldrb	r3, [r4, #88]	; 0x58
   2c058:	ubfx	r3, r3, #2, #1
   2c05c:	cmp	r7, #0
   2c060:	moveq	r7, r3
   2c064:	movne	r7, #0
   2c068:	cmp	r7, #0
   2c06c:	bne	2c0e0 <__assert_fail@plt+0x1a53c>
   2c070:	ldr	r3, [r4, #52]	; 0x34
   2c074:	ldr	r3, [r3, #12]
   2c078:	ldr	r1, [r3, #28]
   2c07c:	str	r1, [r4, #72]	; 0x48
   2c080:	add	r1, r1, r1, lsl #1
   2c084:	ldr	r3, [r4, #24]
   2c088:	add	r1, r3, r1, lsl #2
   2c08c:	add	r0, sp, #28
   2c090:	bl	20ce0 <__assert_fail@plt+0xf13c>
   2c094:	mov	r7, r0
   2c098:	str	r0, [sp, #24]
   2c09c:	cmp	r0, #0
   2c0a0:	bne	2c384 <__assert_fail@plt+0x1a7e0>
   2c0a4:	ldr	r3, [r4, #76]	; 0x4c
   2c0a8:	cmp	r3, #0
   2c0ac:	ble	2c340 <__assert_fail@plt+0x1a79c>
   2c0b0:	ldr	r0, [sp, #32]
   2c0b4:	cmp	r0, #0
   2c0b8:	ble	2c340 <__assert_fail@plt+0x1a79c>
   2c0bc:	mov	r6, r7
   2c0c0:	b	2c2e4 <__assert_fail@plt+0x1a740>
   2c0c4:	ldr	r3, [r5, #24]
   2c0c8:	cmp	r3, #0
   2c0cc:	beq	2bf5c <__assert_fail@plt+0x1a3b8>
   2c0d0:	ldrb	r3, [r6, #88]	; 0x58
   2c0d4:	tst	r3, #1
   2c0d8:	bne	2bf68 <__assert_fail@plt+0x1a3c4>
   2c0dc:	b	2bf5c <__assert_fail@plt+0x1a3b8>
   2c0e0:	ldr	r3, [r5, #20]
   2c0e4:	cmp	r3, #0
   2c0e8:	bne	2c070 <__assert_fail@plt+0x1a4cc>
   2c0ec:	ldr	r0, [r4, #8]
   2c0f0:	cmp	r0, #0
   2c0f4:	beq	2c248 <__assert_fail@plt+0x1a6a4>
   2c0f8:	ldr	r2, [r4]
   2c0fc:	mov	ip, r8
   2c100:	ldr	r1, [sp, #12]
   2c104:	mov	lr, r7
   2c108:	b	2c168 <__assert_fail@plt+0x1a5c4>
   2c10c:	mov	ip, lr
   2c110:	b	2c158 <__assert_fail@plt+0x1a5b4>
   2c114:	ldr	r3, [r2]
   2c118:	ldr	r6, [r3, #16]
   2c11c:	cmp	r6, #0
   2c120:	bne	2c070 <__assert_fail@plt+0x1a4cc>
   2c124:	ldr	r6, [r3, #20]
   2c128:	cmp	r6, #0
   2c12c:	bne	2c070 <__assert_fail@plt+0x1a4cc>
   2c130:	ldr	r6, [r3, #24]
   2c134:	cmp	r6, #0
   2c138:	bne	2c070 <__assert_fail@plt+0x1a4cc>
   2c13c:	ldr	r3, [r3, #28]
   2c140:	cmp	r3, #0
   2c144:	beq	2c158 <__assert_fail@plt+0x1a5b4>
   2c148:	b	2c070 <__assert_fail@plt+0x1a4cc>
   2c14c:	ldrsb	r3, [r2]
   2c150:	cmp	r3, #0
   2c154:	movlt	r8, r7
   2c158:	add	r1, r1, #1
   2c15c:	add	r2, r2, #8
   2c160:	cmp	r1, r0
   2c164:	beq	2c1e0 <__assert_fail@plt+0x1a63c>
   2c168:	ldrb	r3, [r2, #4]
   2c16c:	sub	r3, r3, #1
   2c170:	cmp	r3, #11
   2c174:	ldrls	pc, [pc, r3, lsl #2]
   2c178:	b	2c1dc <__assert_fail@plt+0x1a638>
   2c17c:	andeq	ip, r2, ip, asr #2
   2c180:	andeq	ip, r2, r8, asr r1
   2c184:	andeq	ip, r2, r4, lsl r1
   2c188:	andeq	ip, r2, r8, asr r1
   2c18c:	andeq	ip, r2, ip, lsl #2
   2c190:	andeq	ip, r2, r0, ror r0
   2c194:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c198:	andeq	ip, r2, r8, asr r1
   2c19c:	andeq	ip, r2, r8, asr r1
   2c1a0:	andeq	ip, r2, r8, asr r1
   2c1a4:	andeq	ip, r2, r8, asr r1
   2c1a8:	andeq	ip, r2, ip, lsr #3
   2c1ac:	ldr	r3, [r2]
   2c1b0:	cmp	r3, #32
   2c1b4:	beq	2c158 <__assert_fail@plt+0x1a5b4>
   2c1b8:	bls	2c1d0 <__assert_fail@plt+0x1a62c>
   2c1bc:	cmp	r3, #64	; 0x40
   2c1c0:	beq	2c158 <__assert_fail@plt+0x1a5b4>
   2c1c4:	cmp	r3, #128	; 0x80
   2c1c8:	beq	2c158 <__assert_fail@plt+0x1a5b4>
   2c1cc:	b	2c070 <__assert_fail@plt+0x1a4cc>
   2c1d0:	cmp	r3, #16
   2c1d4:	beq	2c158 <__assert_fail@plt+0x1a5b4>
   2c1d8:	b	2c070 <__assert_fail@plt+0x1a4cc>
   2c1dc:	bl	11b68 <abort@plt>
   2c1e0:	orr	r8, r8, ip
   2c1e4:	tst	r8, #255	; 0xff
   2c1e8:	beq	2c24c <__assert_fail@plt+0x1a6a8>
   2c1ec:	mov	lr, #7
   2c1f0:	ldr	r3, [sp, #12]
   2c1f4:	b	2c214 <__assert_fail@plt+0x1a670>
   2c1f8:	ldrsb	r2, [r6, r0]
   2c1fc:	cmp	r2, #0
   2c200:	blt	2c238 <__assert_fail@plt+0x1a694>
   2c204:	add	r3, r3, #1
   2c208:	ldr	r2, [r4, #8]
   2c20c:	cmp	r3, r2
   2c210:	bcs	2c24c <__assert_fail@plt+0x1a6a8>
   2c214:	lsl	r0, r3, #3
   2c218:	ldr	r6, [r4]
   2c21c:	add	r1, r6, r0
   2c220:	ldrb	r2, [r1, #4]
   2c224:	cmp	r2, #1
   2c228:	beq	2c1f8 <__assert_fail@plt+0x1a654>
   2c22c:	cmp	r2, #5
   2c230:	strbeq	lr, [r1, #4]
   2c234:	b	2c204 <__assert_fail@plt+0x1a660>
   2c238:	ldrb	r2, [r1, #6]
   2c23c:	bfc	r2, #5, #1
   2c240:	strb	r2, [r1, #6]
   2c244:	b	2c204 <__assert_fail@plt+0x1a660>
   2c248:	mov	ip, r8
   2c24c:	mov	r3, #1
   2c250:	str	r3, [r4, #92]	; 0x5c
   2c254:	ldrb	r3, [r4, #88]	; 0x58
   2c258:	ldr	r2, [r4, #76]	; 0x4c
   2c25c:	cmp	r2, #0
   2c260:	orrgt	ip, ip, #1
   2c264:	and	r3, r3, #251	; 0xfb
   2c268:	bfi	r3, ip, #1, #1
   2c26c:	strb	r3, [r4, #88]	; 0x58
   2c270:	b	2c070 <__assert_fail@plt+0x1a4cc>
   2c274:	add	r1, r1, #1
   2c278:	cmp	r0, r1
   2c27c:	beq	2c2d4 <__assert_fail@plt+0x1a730>
   2c280:	ldr	r8, [r2, #4]!
   2c284:	add	r9, ip, r8, lsl #3
   2c288:	ldrb	r9, [r9, #4]
   2c28c:	cmp	r9, #9
   2c290:	bne	2c274 <__assert_fail@plt+0x1a6d0>
   2c294:	ldr	r9, [ip, r8, lsl #3]
   2c298:	ldr	r8, [lr]
   2c29c:	cmp	r9, r8
   2c2a0:	bne	2c274 <__assert_fail@plt+0x1a6d0>
   2c2a4:	cmp	r1, r0
   2c2a8:	beq	2c2d4 <__assert_fail@plt+0x1a730>
   2c2ac:	ldr	r2, [r4, #20]
   2c2b0:	add	r3, r3, r3, lsl #1
   2c2b4:	add	r3, r2, r3, lsl #2
   2c2b8:	ldr	r3, [r3, #8]
   2c2bc:	ldr	r8, [r3]
   2c2c0:	mov	r1, r8
   2c2c4:	add	r0, sp, #28
   2c2c8:	bl	1f6f4 <__assert_fail@plt+0xdb50>
   2c2cc:	cmp	r0, #0
   2c2d0:	beq	2c31c <__assert_fail@plt+0x1a778>
   2c2d4:	add	r6, r6, #1
   2c2d8:	ldr	r0, [sp, #32]
   2c2dc:	cmp	r0, r6
   2c2e0:	ble	2c340 <__assert_fail@plt+0x1a79c>
   2c2e4:	ldr	r2, [sp, #36]	; 0x24
   2c2e8:	ldr	ip, [r4]
   2c2ec:	ldr	r3, [r2, r6, lsl #2]
   2c2f0:	add	lr, ip, r3, lsl #3
   2c2f4:	ldrb	r1, [lr, #4]
   2c2f8:	cmp	r1, #4
   2c2fc:	bne	2c2d4 <__assert_fail@plt+0x1a730>
   2c300:	cmp	r0, #0
   2c304:	ble	2c314 <__assert_fail@plt+0x1a770>
   2c308:	sub	r2, r2, #4
   2c30c:	mov	r1, r7
   2c310:	b	2c280 <__assert_fail@plt+0x1a6dc>
   2c314:	mov	r1, r7
   2c318:	b	2c2a4 <__assert_fail@plt+0x1a700>
   2c31c:	add	r8, r8, r8, lsl #1
   2c320:	ldr	r1, [r4, #24]
   2c324:	add	r1, r1, r8, lsl #2
   2c328:	add	r0, sp, #28
   2c32c:	bl	23314 <__assert_fail@plt+0x11770>
   2c330:	subs	r6, r0, #0
   2c334:	beq	2c2d4 <__assert_fail@plt+0x1a730>
   2c338:	mov	r7, r6
   2c33c:	b	2c384 <__assert_fail@plt+0x1a7e0>
   2c340:	mov	r3, #0
   2c344:	add	r2, sp, #28
   2c348:	mov	r1, r4
   2c34c:	add	r0, sp, #24
   2c350:	bl	2253c <__assert_fail@plt+0x10998>
   2c354:	str	r0, [r4, #36]	; 0x24
   2c358:	cmp	r0, #0
   2c35c:	ldreq	r7, [sp, #24]
   2c360:	beq	2c384 <__assert_fail@plt+0x1a7e0>
   2c364:	ldrsb	r3, [r0, #52]	; 0x34
   2c368:	cmp	r3, #0
   2c36c:	strge	r0, [r4, #48]	; 0x30
   2c370:	strge	r0, [r4, #44]	; 0x2c
   2c374:	strge	r0, [r4, #40]	; 0x28
   2c378:	blt	2c3c4 <__assert_fail@plt+0x1a820>
   2c37c:	ldr	r0, [sp, #36]	; 0x24
   2c380:	bl	17750 <__assert_fail@plt+0x5bac>
   2c384:	str	r7, [sp, #124]	; 0x7c
   2c388:	mov	r0, r5
   2c38c:	bl	2282c <__assert_fail@plt+0x10c88>
   2c390:	add	r0, sp, #40	; 0x28
   2c394:	bl	2288c <__assert_fail@plt+0x10ce8>
   2c398:	ldr	r3, [sp, #124]	; 0x7c
   2c39c:	cmp	r3, #0
   2c3a0:	bne	2c430 <__assert_fail@plt+0x1a88c>
   2c3a4:	ldr	r0, [sp, #124]	; 0x7c
   2c3a8:	add	sp, sp, #132	; 0x84
   2c3ac:	ldrd	r4, [sp]
   2c3b0:	ldrd	r6, [sp, #8]
   2c3b4:	ldrd	r8, [sp, #16]
   2c3b8:	ldrd	sl, [sp, #24]
   2c3bc:	add	sp, sp, #32
   2c3c0:	pop	{pc}		; (ldr pc, [sp], #4)
   2c3c4:	mov	r3, #1
   2c3c8:	add	r2, sp, #28
   2c3cc:	mov	r1, r4
   2c3d0:	add	r0, sp, #24
   2c3d4:	bl	2253c <__assert_fail@plt+0x10998>
   2c3d8:	str	r0, [r4, #40]	; 0x28
   2c3dc:	mov	r3, #2
   2c3e0:	add	r2, sp, #28
   2c3e4:	mov	r1, r4
   2c3e8:	add	r0, sp, #24
   2c3ec:	bl	2253c <__assert_fail@plt+0x10998>
   2c3f0:	str	r0, [r4, #44]	; 0x2c
   2c3f4:	mov	r3, #6
   2c3f8:	add	r2, sp, #28
   2c3fc:	mov	r1, r4
   2c400:	add	r0, sp, #24
   2c404:	bl	2253c <__assert_fail@plt+0x10998>
   2c408:	str	r0, [r4, #48]	; 0x30
   2c40c:	ldr	r3, [r4, #40]	; 0x28
   2c410:	cmp	r3, #0
   2c414:	beq	2c428 <__assert_fail@plt+0x1a884>
   2c418:	ldr	r3, [r4, #44]	; 0x2c
   2c41c:	cmp	r0, #0
   2c420:	cmpne	r3, #0
   2c424:	bne	2c37c <__assert_fail@plt+0x1a7d8>
   2c428:	ldr	r7, [sp, #24]
   2c42c:	b	2c384 <__assert_fail@plt+0x1a7e0>
   2c430:	ldr	r3, [sp, #16]
   2c434:	cmp	r3, #0
   2c438:	beq	2c444 <__assert_fail@plt+0x1a8a0>
   2c43c:	add	r0, r4, #136	; 0x88
   2c440:	bl	11718 <pthread_mutex_destroy@plt>
   2c444:	mov	r0, r4
   2c448:	bl	228cc <__assert_fail@plt+0x10d28>
   2c44c:	mov	r3, #0
   2c450:	str	r3, [r5]
   2c454:	str	r3, [r5, #4]
   2c458:	b	2c3a4 <__assert_fail@plt+0x1a800>
   2c45c:	mov	r0, #12
   2c460:	b	2c3a8 <__assert_fail@plt+0x1a804>
   2c464:	mov	r0, #12
   2c468:	b	2c488 <__assert_fail@plt+0x1a8e4>
   2c46c:	mov	r0, #12
   2c470:	b	2c488 <__assert_fail@plt+0x1a8e4>
   2c474:	ldr	r0, [sp, #12]
   2c478:	b	2c488 <__assert_fail@plt+0x1a8e4>
   2c47c:	mov	r0, #12
   2c480:	b	2c488 <__assert_fail@plt+0x1a8e4>
   2c484:	mov	r0, #12
   2c488:	str	r0, [sp, #124]	; 0x7c
   2c48c:	b	2bb2c <__assert_fail@plt+0x19f88>
   2c490:	mov	r0, #12
   2c494:	b	2c488 <__assert_fail@plt+0x1a8e4>
   2c498:	mov	r3, #0
   2c49c:	str	r3, [r4, #52]	; 0x34
   2c4a0:	b	2bb2c <__assert_fail@plt+0x19f88>
   2c4a4:	mov	r3, #12
   2c4a8:	str	r3, [sp, #124]	; 0x7c
   2c4ac:	mov	r0, r4
   2c4b0:	bl	228cc <__assert_fail@plt+0x10d28>
   2c4b4:	mov	r3, #0
   2c4b8:	str	r3, [r5]
   2c4bc:	str	r3, [r5, #4]
   2c4c0:	ldr	r0, [sp, #124]	; 0x7c
   2c4c4:	b	2c3a8 <__assert_fail@plt+0x1a804>
   2c4c8:	str	r4, [sp, #-8]!
   2c4cc:	str	lr, [sp, #4]
   2c4d0:	mov	ip, r2
   2c4d4:	movw	r3, #13308	; 0x33fc
   2c4d8:	movt	r3, #4
   2c4dc:	ldr	r3, [r3]
   2c4e0:	ubfx	lr, r3, #25, #1
   2c4e4:	ldrb	r2, [r2, #28]
   2c4e8:	bfi	r2, lr, #4, #1
   2c4ec:	mvn	r2, r2, lsl #25
   2c4f0:	mvn	r2, r2, lsr #25
   2c4f4:	strb	r2, [ip, #28]
   2c4f8:	mov	r2, r1
   2c4fc:	mov	r1, r0
   2c500:	mov	r0, ip
   2c504:	bl	2b850 <__assert_fail@plt+0x19cac>
   2c508:	cmp	r0, #0
   2c50c:	moveq	r0, #0
   2c510:	beq	2c538 <__assert_fail@plt+0x1a994>
   2c514:	movw	r3, #9224	; 0x2408
   2c518:	movt	r3, #3
   2c51c:	add	r1, r3, #32
   2c520:	add	r3, r3, r0, lsl #2
   2c524:	ldr	r3, [r3, #416]	; 0x1a0
   2c528:	mov	r2, #5
   2c52c:	add	r1, r1, r3
   2c530:	mov	r0, #0
   2c534:	bl	117d8 <dcgettext@plt>
   2c538:	ldr	r4, [sp]
   2c53c:	add	sp, sp, #4
   2c540:	pop	{pc}		; (ldr pc, [sp], #4)
   2c544:	movw	r3, #13308	; 0x33fc
   2c548:	movt	r3, #4
   2c54c:	ldr	r2, [r3]
   2c550:	str	r0, [r3]
   2c554:	mov	r0, r2
   2c558:	bx	lr
   2c55c:	strd	r4, [sp, #-16]!
   2c560:	str	r6, [sp, #8]
   2c564:	str	lr, [sp, #12]
   2c568:	mov	r5, r0
   2c56c:	ldr	r4, [r0]
   2c570:	ldr	r6, [r0, #16]
   2c574:	mov	r2, #256	; 0x100
   2c578:	mov	r1, #0
   2c57c:	mov	r0, r6
   2c580:	bl	119e8 <memset@plt>
   2c584:	mov	r2, r6
   2c588:	ldr	r1, [r4, #36]	; 0x24
   2c58c:	mov	r0, r5
   2c590:	bl	262ac <__assert_fail@plt+0x14708>
   2c594:	ldr	r1, [r4, #40]	; 0x28
   2c598:	ldr	r3, [r4, #36]	; 0x24
   2c59c:	cmp	r3, r1
   2c5a0:	beq	2c5b0 <__assert_fail@plt+0x1aa0c>
   2c5a4:	mov	r2, r6
   2c5a8:	mov	r0, r5
   2c5ac:	bl	262ac <__assert_fail@plt+0x14708>
   2c5b0:	ldr	r1, [r4, #44]	; 0x2c
   2c5b4:	ldr	r3, [r4, #36]	; 0x24
   2c5b8:	cmp	r3, r1
   2c5bc:	beq	2c5cc <__assert_fail@plt+0x1aa28>
   2c5c0:	mov	r2, r6
   2c5c4:	mov	r0, r5
   2c5c8:	bl	262ac <__assert_fail@plt+0x14708>
   2c5cc:	ldr	r1, [r4, #48]	; 0x30
   2c5d0:	ldr	r3, [r4, #36]	; 0x24
   2c5d4:	cmp	r3, r1
   2c5d8:	beq	2c5e8 <__assert_fail@plt+0x1aa44>
   2c5dc:	mov	r2, r6
   2c5e0:	mov	r0, r5
   2c5e4:	bl	262ac <__assert_fail@plt+0x14708>
   2c5e8:	ldrb	r3, [r5, #28]
   2c5ec:	orr	r3, r3, #8
   2c5f0:	strb	r3, [r5, #28]
   2c5f4:	mov	r0, #0
   2c5f8:	ldrd	r4, [sp]
   2c5fc:	ldr	r6, [sp, #8]
   2c600:	add	sp, sp, #12
   2c604:	pop	{pc}		; (ldr pc, [sp], #4)
   2c608:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2c60c:	strd	r6, [sp, #8]
   2c610:	strd	r8, [sp, #16]
   2c614:	strd	sl, [sp, #24]
   2c618:	str	lr, [sp, #32]
   2c61c:	sub	sp, sp, #52	; 0x34
   2c620:	ldr	ip, [sp, #88]	; 0x58
   2c624:	ldr	r7, [sp, #96]	; 0x60
   2c628:	ldr	r9, [r0]
   2c62c:	add	r8, r3, ip
   2c630:	cmp	r3, r2
   2c634:	movle	lr, #0
   2c638:	movgt	lr, #1
   2c63c:	orrs	lr, lr, r3, lsr #31
   2c640:	bne	2c9a4 <__assert_fail@plt+0x1ae00>
   2c644:	mov	r5, r3
   2c648:	str	r2, [sp, #32]
   2c64c:	str	r1, [sp, #36]	; 0x24
   2c650:	mov	r6, r0
   2c654:	cmp	r8, r2
   2c658:	bgt	2c7b0 <__assert_fail@plt+0x1ac0c>
   2c65c:	cmp	ip, #0
   2c660:	cmpge	r3, r8
   2c664:	bgt	2c7b8 <__assert_fail@plt+0x1ac14>
   2c668:	cmp	r8, #0
   2c66c:	blt	2c9b4 <__assert_fail@plt+0x1ae10>
   2c670:	cmp	r3, r8
   2c674:	movgt	r3, #0
   2c678:	movle	r3, #1
   2c67c:	ands	r3, r3, ip, lsr #31
   2c680:	bne	2c9b4 <__assert_fail@plt+0x1ae10>
   2c684:	movw	r3, #0
   2c688:	movt	r3, #0
   2c68c:	cmp	r3, #0
   2c690:	movne	r3, #1
   2c694:	moveq	r3, #0
   2c698:	mov	r2, r3
   2c69c:	movw	r3, #0
   2c6a0:	movt	r3, #0
   2c6a4:	cmp	r3, #0
   2c6a8:	movne	r3, #1
   2c6ac:	moveq	r3, #0
   2c6b0:	orr	r3, r2, r3
   2c6b4:	ands	r3, r3, #255	; 0xff
   2c6b8:	str	r3, [sp, #28]
   2c6bc:	beq	2c6d0 <__assert_fail@plt+0x1ab2c>
   2c6c0:	add	r0, r9, #136	; 0x88
   2c6c4:	bl	11760 <pthread_mutex_lock@plt>
   2c6c8:	mov	r3, #1
   2c6cc:	str	r3, [sp, #28]
   2c6d0:	ldrb	r3, [r6, #28]
   2c6d4:	ubfx	fp, r3, #5, #2
   2c6d8:	cmp	r8, r5
   2c6dc:	ble	2c6f4 <__assert_fail@plt+0x1ab50>
   2c6e0:	ldr	r2, [r6, #16]
   2c6e4:	cmp	r2, #0
   2c6e8:	beq	2c6f4 <__assert_fail@plt+0x1ab50>
   2c6ec:	tst	r3, #8
   2c6f0:	beq	2c7c0 <__assert_fail@plt+0x1ac1c>
   2c6f4:	ldrb	r3, [r6, #28]
   2c6f8:	tst	r3, #16
   2c6fc:	bne	2c7f0 <__assert_fail@plt+0x1ac4c>
   2c700:	cmp	r7, #0
   2c704:	moveq	r4, #1
   2c708:	beq	2c720 <__assert_fail@plt+0x1ab7c>
   2c70c:	and	r3, r3, #6
   2c710:	cmp	r3, #4
   2c714:	beq	2c7cc <__assert_fail@plt+0x1ac28>
   2c718:	ldr	r4, [r6, #24]
   2c71c:	add	r4, r4, #1
   2c720:	str	r4, [sp, #40]	; 0x28
   2c724:	lsl	r0, r4, #3
   2c728:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2c72c:	subs	sl, r0, #0
   2c730:	beq	2c99c <__assert_fail@plt+0x1adf8>
   2c734:	str	fp, [sp, #16]
   2c738:	str	sl, [sp, #12]
   2c73c:	str	r4, [sp, #8]
   2c740:	ldr	r3, [sp, #92]	; 0x5c
   2c744:	str	r3, [sp, #4]
   2c748:	str	r8, [sp]
   2c74c:	mov	r3, r5
   2c750:	ldr	r2, [sp, #32]
   2c754:	ldr	r1, [sp, #36]	; 0x24
   2c758:	mov	r0, r6
   2c75c:	bl	29df8 <__assert_fail@plt+0x18254>
   2c760:	subs	r8, r0, #0
   2c764:	beq	2c7fc <__assert_fail@plt+0x1ac58>
   2c768:	cmp	r8, #1
   2c76c:	mvneq	r5, #0
   2c770:	mvnne	r5, #1
   2c774:	mov	r0, sl
   2c778:	bl	17750 <__assert_fail@plt+0x5bac>
   2c77c:	ldr	r3, [sp, #28]
   2c780:	cmp	r3, #0
   2c784:	beq	2c790 <__assert_fail@plt+0x1abec>
   2c788:	add	r0, r9, #136	; 0x88
   2c78c:	bl	11694 <pthread_mutex_unlock@plt>
   2c790:	mov	r0, r5
   2c794:	add	sp, sp, #52	; 0x34
   2c798:	ldrd	r4, [sp]
   2c79c:	ldrd	r6, [sp, #8]
   2c7a0:	ldrd	r8, [sp, #16]
   2c7a4:	ldrd	sl, [sp, #24]
   2c7a8:	add	sp, sp, #32
   2c7ac:	pop	{pc}		; (ldr pc, [sp], #4)
   2c7b0:	ldr	r8, [sp, #32]
   2c7b4:	b	2c684 <__assert_fail@plt+0x1aae0>
   2c7b8:	ldr	r8, [sp, #32]
   2c7bc:	b	2c684 <__assert_fail@plt+0x1aae0>
   2c7c0:	mov	r0, r6
   2c7c4:	bl	2c55c <__assert_fail@plt+0x1a9b8>
   2c7c8:	b	2c6f4 <__assert_fail@plt+0x1ab50>
   2c7cc:	ldr	r3, [r7]
   2c7d0:	ldr	r2, [r6, #24]
   2c7d4:	cmp	r3, r2
   2c7d8:	bhi	2c718 <__assert_fail@plt+0x1ab74>
   2c7dc:	cmp	r3, #0
   2c7e0:	movgt	r4, r3
   2c7e4:	movle	r4, #1
   2c7e8:	movle	r7, #0
   2c7ec:	b	2c720 <__assert_fail@plt+0x1ab7c>
   2c7f0:	mov	r4, #1
   2c7f4:	mov	r7, #0
   2c7f8:	b	2c720 <__assert_fail@plt+0x1ab7c>
   2c7fc:	cmp	r7, #0
   2c800:	beq	2c8ac <__assert_fail@plt+0x1ad08>
   2c804:	ldrb	fp, [r6, #28]
   2c808:	ubfx	fp, fp, #1, #2
   2c80c:	add	r3, r4, #1
   2c810:	str	r3, [sp, #32]
   2c814:	cmp	fp, #0
   2c818:	beq	2c8c0 <__assert_fail@plt+0x1ad1c>
   2c81c:	cmp	fp, #1
   2c820:	movne	fp, #2
   2c824:	beq	2c90c <__assert_fail@plt+0x1ad68>
   2c828:	cmp	r4, #0
   2c82c:	ble	2c978 <__assert_fail@plt+0x1add4>
   2c830:	ldr	r3, [sp, #40]	; 0x28
   2c834:	lsl	ip, r3, #2
   2c838:	mov	r3, #0
   2c83c:	add	r0, sl, #4
   2c840:	ldr	r1, [sl, r3, lsl #1]
   2c844:	ldr	r2, [r7, #4]
   2c848:	str	r1, [r2, r3]
   2c84c:	ldr	r1, [r0, r3, lsl #1]
   2c850:	ldr	r2, [r7, #8]
   2c854:	str	r1, [r2, r3]
   2c858:	add	r3, r3, #4
   2c85c:	cmp	ip, r3
   2c860:	bne	2c840 <__assert_fail@plt+0x1ac9c>
   2c864:	ldr	r3, [r7]
   2c868:	cmp	r4, r3
   2c86c:	bcs	2c894 <__assert_fail@plt+0x1acf0>
   2c870:	mvn	r3, #0
   2c874:	ldr	r2, [r7, #8]
   2c878:	str	r3, [r2, r4, lsl #2]
   2c87c:	ldr	r2, [r7, #4]
   2c880:	str	r3, [r2, r4, lsl #2]
   2c884:	add	r4, r4, #1
   2c888:	ldr	r2, [r7]
   2c88c:	cmp	r4, r2
   2c890:	bcc	2c874 <__assert_fail@plt+0x1acd0>
   2c894:	ldrb	r3, [r6, #28]
   2c898:	bfi	r3, fp, #1, #2
   2c89c:	strb	r3, [r6, #28]
   2c8a0:	and	r3, r3, #6
   2c8a4:	cmp	r3, #0
   2c8a8:	beq	2c9ac <__assert_fail@plt+0x1ae08>
   2c8ac:	ldrb	r3, [sp, #100]	; 0x64
   2c8b0:	cmp	r3, #0
   2c8b4:	bne	2c990 <__assert_fail@plt+0x1adec>
   2c8b8:	ldr	r5, [sl]
   2c8bc:	b	2c774 <__assert_fail@plt+0x1abd0>
   2c8c0:	lsl	fp, r3, #2
   2c8c4:	mov	r0, fp
   2c8c8:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2c8cc:	str	r0, [r7, #4]
   2c8d0:	cmp	r0, #0
   2c8d4:	beq	2c980 <__assert_fail@plt+0x1addc>
   2c8d8:	mov	r0, fp
   2c8dc:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2c8e0:	str	r0, [r7, #8]
   2c8e4:	cmp	r0, #0
   2c8e8:	beq	2c8fc <__assert_fail@plt+0x1ad58>
   2c8ec:	ldr	r3, [sp, #32]
   2c8f0:	str	r3, [r7]
   2c8f4:	mov	fp, #1
   2c8f8:	b	2c828 <__assert_fail@plt+0x1ac84>
   2c8fc:	ldr	r0, [r7, #4]
   2c900:	bl	17750 <__assert_fail@plt+0x5bac>
   2c904:	mov	fp, #0
   2c908:	b	2c894 <__assert_fail@plt+0x1acf0>
   2c90c:	ldr	r3, [r7]
   2c910:	ldr	r2, [sp, #32]
   2c914:	cmp	r3, r2
   2c918:	bcs	2c828 <__assert_fail@plt+0x1ac84>
   2c91c:	lsl	r3, r2, #2
   2c920:	str	r3, [sp, #44]	; 0x2c
   2c924:	mov	r1, r3
   2c928:	ldr	r0, [r7, #4]
   2c92c:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   2c930:	subs	r2, r0, #0
   2c934:	str	r2, [sp, #36]	; 0x24
   2c938:	beq	2c988 <__assert_fail@plt+0x1ade4>
   2c93c:	ldr	r1, [sp, #44]	; 0x2c
   2c940:	ldr	r0, [r7, #8]
   2c944:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   2c948:	cmp	r0, #0
   2c94c:	beq	2c968 <__assert_fail@plt+0x1adc4>
   2c950:	ldr	r3, [sp, #36]	; 0x24
   2c954:	str	r3, [r7, #4]
   2c958:	str	r0, [r7, #8]
   2c95c:	ldr	r3, [sp, #32]
   2c960:	str	r3, [r7]
   2c964:	b	2c828 <__assert_fail@plt+0x1ac84>
   2c968:	ldr	r0, [sp, #36]	; 0x24
   2c96c:	bl	17750 <__assert_fail@plt+0x5bac>
   2c970:	mov	fp, #0
   2c974:	b	2c894 <__assert_fail@plt+0x1acf0>
   2c978:	mov	r4, r8
   2c97c:	b	2c864 <__assert_fail@plt+0x1acc0>
   2c980:	mov	fp, #0
   2c984:	b	2c894 <__assert_fail@plt+0x1acf0>
   2c988:	mov	fp, #0
   2c98c:	b	2c894 <__assert_fail@plt+0x1acf0>
   2c990:	ldr	r3, [sl, #4]
   2c994:	sub	r5, r3, r5
   2c998:	b	2c774 <__assert_fail@plt+0x1abd0>
   2c99c:	mvn	r5, #1
   2c9a0:	b	2c77c <__assert_fail@plt+0x1abd8>
   2c9a4:	mvn	r5, #0
   2c9a8:	b	2c790 <__assert_fail@plt+0x1abec>
   2c9ac:	mvn	r5, #1
   2c9b0:	b	2c774 <__assert_fail@plt+0x1abd0>
   2c9b4:	movw	r3, #0
   2c9b8:	movt	r3, #0
   2c9bc:	cmp	r3, #0
   2c9c0:	movne	r3, #1
   2c9c4:	moveq	r3, #0
   2c9c8:	mov	r2, r3
   2c9cc:	movw	r3, #0
   2c9d0:	movt	r3, #0
   2c9d4:	cmp	r3, #0
   2c9d8:	movne	r3, #1
   2c9dc:	moveq	r3, #0
   2c9e0:	orr	r3, r2, r3
   2c9e4:	ands	r3, r3, #255	; 0xff
   2c9e8:	str	r3, [sp, #28]
   2c9ec:	movne	r8, #0
   2c9f0:	bne	2c6c0 <__assert_fail@plt+0x1ab1c>
   2c9f4:	ldrb	fp, [r6, #28]
   2c9f8:	ubfx	fp, fp, #5, #2
   2c9fc:	mov	r8, #0
   2ca00:	b	2c6f4 <__assert_fail@plt+0x1ab50>
   2ca04:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2ca08:	strd	r6, [sp, #8]
   2ca0c:	strd	r8, [sp, #16]
   2ca10:	strd	sl, [sp, #24]
   2ca14:	str	lr, [sp, #32]
   2ca18:	sub	sp, sp, #20
   2ca1c:	mov	r7, r3
   2ca20:	ldr	r5, [sp, #56]	; 0x38
   2ca24:	ldr	r6, [sp, #72]	; 0x48
   2ca28:	orr	r3, r5, r2
   2ca2c:	orrs	r3, r3, r6
   2ca30:	mvnmi	r4, #1
   2ca34:	bmi	2ca9c <__assert_fail@plt+0x1aef8>
   2ca38:	mov	r9, r0
   2ca3c:	mov	sl, r1
   2ca40:	mov	r4, r2
   2ca44:	adds	fp, r2, r5
   2ca48:	bvs	2cb00 <__assert_fail@plt+0x1af5c>
   2ca4c:	cmp	r5, #0
   2ca50:	ble	2caf4 <__assert_fail@plt+0x1af50>
   2ca54:	cmp	r2, #0
   2ca58:	movle	r8, #0
   2ca5c:	bgt	2cabc <__assert_fail@plt+0x1af18>
   2ca60:	ldrb	r3, [sp, #76]	; 0x4c
   2ca64:	str	r3, [sp, #12]
   2ca68:	ldr	r3, [sp, #68]	; 0x44
   2ca6c:	str	r3, [sp, #8]
   2ca70:	str	r6, [sp, #4]
   2ca74:	ldr	r3, [sp, #64]	; 0x40
   2ca78:	str	r3, [sp]
   2ca7c:	ldr	r3, [sp, #60]	; 0x3c
   2ca80:	mov	r2, fp
   2ca84:	mov	r1, r7
   2ca88:	mov	r0, r9
   2ca8c:	bl	2c608 <__assert_fail@plt+0x1aa64>
   2ca90:	mov	r4, r0
   2ca94:	mov	r0, r8
   2ca98:	bl	17750 <__assert_fail@plt+0x5bac>
   2ca9c:	mov	r0, r4
   2caa0:	add	sp, sp, #20
   2caa4:	ldrd	r4, [sp]
   2caa8:	ldrd	r6, [sp, #8]
   2caac:	ldrd	r8, [sp, #16]
   2cab0:	ldrd	sl, [sp, #24]
   2cab4:	add	sp, sp, #32
   2cab8:	pop	{pc}		; (ldr pc, [sp], #4)
   2cabc:	mov	r0, fp
   2cac0:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2cac4:	subs	r8, r0, #0
   2cac8:	beq	2cb08 <__assert_fail@plt+0x1af64>
   2cacc:	mov	r2, r4
   2cad0:	mov	r1, sl
   2cad4:	mov	r0, r8
   2cad8:	bl	11784 <memcpy@plt>
   2cadc:	mov	r2, r5
   2cae0:	mov	r1, r7
   2cae4:	add	r0, r8, r4
   2cae8:	bl	11784 <memcpy@plt>
   2caec:	mov	r7, r8
   2caf0:	b	2ca60 <__assert_fail@plt+0x1aebc>
   2caf4:	mov	r7, r1
   2caf8:	mov	r8, #0
   2cafc:	b	2ca60 <__assert_fail@plt+0x1aebc>
   2cb00:	mvn	r4, #1
   2cb04:	b	2ca9c <__assert_fail@plt+0x1aef8>
   2cb08:	mvn	r4, #1
   2cb0c:	b	2ca9c <__assert_fail@plt+0x1aef8>
   2cb10:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2cb14:	strd	r6, [sp, #8]
   2cb18:	str	r8, [sp, #16]
   2cb1c:	str	lr, [sp, #20]
   2cb20:	mov	r4, r0
   2cb24:	mov	r7, r1
   2cb28:	mov	r6, r2
   2cb2c:	and	r2, r2, #1
   2cb30:	movw	r5, #45820	; 0xb2fc
   2cb34:	movt	r5, #3
   2cb38:	movw	r3, #710	; 0x2c6
   2cb3c:	movt	r3, #257	; 0x101
   2cb40:	cmp	r2, #0
   2cb44:	moveq	r5, r3
   2cb48:	mov	r3, #0
   2cb4c:	str	r3, [r0]
   2cb50:	str	r3, [r0, #4]
   2cb54:	str	r3, [r0, #8]
   2cb58:	mov	r0, #256	; 0x100
   2cb5c:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2cb60:	str	r0, [r4, #16]
   2cb64:	cmp	r0, #0
   2cb68:	beq	2cc10 <__assert_fail@plt+0x1b06c>
   2cb6c:	lsl	r3, r6, #21
   2cb70:	and	r3, r3, #4194304	; 0x400000
   2cb74:	orr	r5, r3, r5
   2cb78:	tst	r6, #4
   2cb7c:	bicne	r5, r5, #64	; 0x40
   2cb80:	orrne	r5, r5, #256	; 0x100
   2cb84:	movne	r2, #1
   2cb88:	moveq	r2, #0
   2cb8c:	ldrb	r3, [r4, #28]
   2cb90:	bfi	r3, r2, #7, #1
   2cb94:	ubfx	r6, r6, #3, #1
   2cb98:	bfi	r3, r6, #4, #1
   2cb9c:	strb	r3, [r4, #28]
   2cba0:	mov	r3, #0
   2cba4:	str	r3, [r4, #20]
   2cba8:	mov	r0, r7
   2cbac:	bl	11988 <strlen@plt>
   2cbb0:	mov	r3, r5
   2cbb4:	mov	r2, r0
   2cbb8:	mov	r1, r7
   2cbbc:	mov	r0, r4
   2cbc0:	bl	2b850 <__assert_fail@plt+0x19cac>
   2cbc4:	mov	r5, r0
   2cbc8:	cmp	r0, #16
   2cbcc:	beq	2cbf8 <__assert_fail@plt+0x1b054>
   2cbd0:	cmp	r0, #0
   2cbd4:	bne	2cbfc <__assert_fail@plt+0x1b058>
   2cbd8:	mov	r0, r4
   2cbdc:	bl	2c55c <__assert_fail@plt+0x1a9b8>
   2cbe0:	mov	r0, r5
   2cbe4:	ldrd	r4, [sp]
   2cbe8:	ldrd	r6, [sp, #8]
   2cbec:	ldr	r8, [sp, #16]
   2cbf0:	add	sp, sp, #20
   2cbf4:	pop	{pc}		; (ldr pc, [sp], #4)
   2cbf8:	mov	r5, #8
   2cbfc:	ldr	r0, [r4, #16]
   2cc00:	bl	17750 <__assert_fail@plt+0x5bac>
   2cc04:	mov	r3, #0
   2cc08:	str	r3, [r4, #16]
   2cc0c:	b	2cbe0 <__assert_fail@plt+0x1b03c>
   2cc10:	mov	r5, #12
   2cc14:	b	2cbe0 <__assert_fail@plt+0x1b03c>
   2cc18:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2cc1c:	strd	r6, [sp, #8]
   2cc20:	str	r8, [sp, #16]
   2cc24:	str	lr, [sp, #20]
   2cc28:	cmp	r0, #16
   2cc2c:	bhi	2cca8 <__assert_fail@plt+0x1b104>
   2cc30:	mov	r6, r2
   2cc34:	mov	r4, r3
   2cc38:	movw	r3, #9224	; 0x2408
   2cc3c:	movt	r3, #3
   2cc40:	add	r1, r3, #32
   2cc44:	add	r3, r3, r0, lsl #2
   2cc48:	ldr	r3, [r3, #416]	; 0x1a0
   2cc4c:	mov	r2, #5
   2cc50:	add	r1, r1, r3
   2cc54:	mov	r0, #0
   2cc58:	bl	117d8 <dcgettext@plt>
   2cc5c:	mov	r7, r0
   2cc60:	bl	11988 <strlen@plt>
   2cc64:	add	r5, r0, #1
   2cc68:	cmp	r4, #0
   2cc6c:	beq	2cc90 <__assert_fail@plt+0x1b0ec>
   2cc70:	cmp	r5, r4
   2cc74:	subhi	r2, r4, #1
   2cc78:	movhi	r3, #0
   2cc7c:	strbhi	r3, [r6, r2]
   2cc80:	movls	r2, r5
   2cc84:	mov	r1, r7
   2cc88:	mov	r0, r6
   2cc8c:	bl	11784 <memcpy@plt>
   2cc90:	mov	r0, r5
   2cc94:	ldrd	r4, [sp]
   2cc98:	ldrd	r6, [sp, #8]
   2cc9c:	ldr	r8, [sp, #16]
   2cca0:	add	sp, sp, #20
   2cca4:	pop	{pc}		; (ldr pc, [sp], #4)
   2cca8:	bl	11b68 <abort@plt>
   2ccac:	strd	r4, [sp, #-16]!
   2ccb0:	str	r6, [sp, #8]
   2ccb4:	str	lr, [sp, #12]
   2ccb8:	mov	r4, r0
   2ccbc:	ldr	r5, [r0]
   2ccc0:	cmp	r5, #0
   2ccc4:	beq	2cd0c <__assert_fail@plt+0x1b168>
   2ccc8:	movw	r3, #0
   2cccc:	movt	r3, #0
   2ccd0:	cmp	r3, #0
   2ccd4:	movne	r3, #1
   2ccd8:	moveq	r3, #0
   2ccdc:	movw	r2, #0
   2cce0:	movt	r2, #0
   2cce4:	cmp	r2, #0
   2cce8:	movne	r2, #1
   2ccec:	moveq	r2, #0
   2ccf0:	orr	r3, r3, r2
   2ccf4:	tst	r3, #255	; 0xff
   2ccf8:	beq	2cd04 <__assert_fail@plt+0x1b160>
   2ccfc:	add	r0, r5, #136	; 0x88
   2cd00:	bl	11718 <pthread_mutex_destroy@plt>
   2cd04:	mov	r0, r5
   2cd08:	bl	228cc <__assert_fail@plt+0x10d28>
   2cd0c:	mov	r5, #0
   2cd10:	str	r5, [r4]
   2cd14:	str	r5, [r4, #4]
   2cd18:	ldr	r0, [r4, #16]
   2cd1c:	bl	17750 <__assert_fail@plt+0x5bac>
   2cd20:	str	r5, [r4, #16]
   2cd24:	ldr	r0, [r4, #20]
   2cd28:	bl	17750 <__assert_fail@plt+0x5bac>
   2cd2c:	str	r5, [r4, #20]
   2cd30:	ldrd	r4, [sp]
   2cd34:	ldr	r6, [sp, #8]
   2cd38:	add	sp, sp, #12
   2cd3c:	pop	{pc}		; (ldr pc, [sp], #4)
   2cd40:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2cd44:	strd	r6, [sp, #8]
   2cd48:	strd	r8, [sp, #16]
   2cd4c:	strd	sl, [sp, #24]
   2cd50:	str	lr, [sp, #32]
   2cd54:	sub	sp, sp, #36	; 0x24
   2cd58:	ldr	r6, [sp, #72]	; 0x48
   2cd5c:	bics	ip, r6, #7
   2cd60:	movne	r0, #2
   2cd64:	bne	2ce24 <__assert_fail@plt+0x1b280>
   2cd68:	mov	r7, r3
   2cd6c:	mov	r9, r2
   2cd70:	str	r1, [sp, #28]
   2cd74:	mov	r5, r0
   2cd78:	ands	fp, r6, #4
   2cd7c:	beq	2ce40 <__assert_fail@plt+0x1b29c>
   2cd80:	ldr	fp, [r3]
   2cd84:	ldr	r8, [r3, #4]
   2cd88:	ldr	sl, [r5]
   2cd8c:	movw	r3, #0
   2cd90:	movt	r3, #0
   2cd94:	cmp	r3, #0
   2cd98:	movne	r4, #1
   2cd9c:	moveq	r4, #0
   2cda0:	mov	r3, r4
   2cda4:	mov	r4, #1
   2cda8:	movw	r2, #0
   2cdac:	movt	r2, #0
   2cdb0:	cmp	r2, #0
   2cdb4:	movne	r4, #1
   2cdb8:	moveq	r4, #0
   2cdbc:	orr	r4, r3, r4
   2cdc0:	ands	r4, r4, #255	; 0xff
   2cdc4:	beq	2cdd0 <__assert_fail@plt+0x1b22c>
   2cdc8:	add	r0, sl, #136	; 0x88
   2cdcc:	bl	11760 <pthread_mutex_lock@plt>
   2cdd0:	ldrb	r3, [r5, #28]
   2cdd4:	tst	r3, #16
   2cdd8:	beq	2ce50 <__assert_fail@plt+0x1b2ac>
   2cddc:	str	r6, [sp, #16]
   2cde0:	mov	r3, #0
   2cde4:	str	r3, [sp, #12]
   2cde8:	str	r3, [sp, #8]
   2cdec:	str	r8, [sp, #4]
   2cdf0:	str	r8, [sp]
   2cdf4:	mov	r3, fp
   2cdf8:	mov	r2, r8
   2cdfc:	ldr	r1, [sp, #28]
   2ce00:	mov	r0, r5
   2ce04:	bl	29df8 <__assert_fail@plt+0x18254>
   2ce08:	mov	r5, r0
   2ce0c:	cmp	r4, #0
   2ce10:	beq	2ce1c <__assert_fail@plt+0x1b278>
   2ce14:	add	r0, sl, #136	; 0x88
   2ce18:	bl	11694 <pthread_mutex_unlock@plt>
   2ce1c:	adds	r0, r5, #0
   2ce20:	movne	r0, #1
   2ce24:	add	sp, sp, #36	; 0x24
   2ce28:	ldrd	r4, [sp]
   2ce2c:	ldrd	r6, [sp, #8]
   2ce30:	ldrd	r8, [sp, #16]
   2ce34:	ldrd	sl, [sp, #24]
   2ce38:	add	sp, sp, #32
   2ce3c:	pop	{pc}		; (ldr pc, [sp], #4)
   2ce40:	ldr	r0, [sp, #28]
   2ce44:	bl	11988 <strlen@plt>
   2ce48:	mov	r8, r0
   2ce4c:	b	2cd88 <__assert_fail@plt+0x1b1e4>
   2ce50:	str	r6, [sp, #16]
   2ce54:	str	r7, [sp, #12]
   2ce58:	str	r9, [sp, #8]
   2ce5c:	str	r8, [sp, #4]
   2ce60:	str	r8, [sp]
   2ce64:	mov	r3, fp
   2ce68:	mov	r2, r8
   2ce6c:	ldr	r1, [sp, #28]
   2ce70:	mov	r0, r5
   2ce74:	bl	29df8 <__assert_fail@plt+0x18254>
   2ce78:	mov	r5, r0
   2ce7c:	b	2ce0c <__assert_fail@plt+0x1b268>
   2ce80:	push	{lr}		; (str lr, [sp, #-4]!)
   2ce84:	sub	sp, sp, #20
   2ce88:	mov	ip, #1
   2ce8c:	str	ip, [sp, #12]
   2ce90:	ldr	ip, [sp, #24]
   2ce94:	str	ip, [sp, #8]
   2ce98:	str	r2, [sp, #4]
   2ce9c:	mov	ip, #0
   2cea0:	str	ip, [sp]
   2cea4:	bl	2c608 <__assert_fail@plt+0x1aa64>
   2cea8:	add	sp, sp, #20
   2ceac:	pop	{pc}		; (ldr pc, [sp], #4)
   2ceb0:	push	{lr}		; (str lr, [sp, #-4]!)
   2ceb4:	sub	sp, sp, #20
   2ceb8:	mov	ip, #0
   2cebc:	str	ip, [sp, #12]
   2cec0:	ldr	ip, [sp, #28]
   2cec4:	str	ip, [sp, #8]
   2cec8:	str	r2, [sp, #4]
   2cecc:	ldr	ip, [sp, #24]
   2ced0:	str	ip, [sp]
   2ced4:	bl	2c608 <__assert_fail@plt+0x1aa64>
   2ced8:	add	sp, sp, #20
   2cedc:	pop	{pc}		; (ldr pc, [sp], #4)
   2cee0:	push	{lr}		; (str lr, [sp, #-4]!)
   2cee4:	sub	sp, sp, #28
   2cee8:	mov	ip, #1
   2ceec:	str	ip, [sp, #20]
   2cef0:	ldr	ip, [sp, #44]	; 0x2c
   2cef4:	str	ip, [sp, #16]
   2cef8:	ldr	ip, [sp, #40]	; 0x28
   2cefc:	str	ip, [sp, #12]
   2cf00:	mov	ip, #0
   2cf04:	str	ip, [sp, #8]
   2cf08:	ldr	ip, [sp, #36]	; 0x24
   2cf0c:	str	ip, [sp, #4]
   2cf10:	ldr	ip, [sp, #32]
   2cf14:	str	ip, [sp]
   2cf18:	bl	2ca04 <__assert_fail@plt+0x1ae60>
   2cf1c:	add	sp, sp, #28
   2cf20:	pop	{pc}		; (ldr pc, [sp], #4)
   2cf24:	push	{lr}		; (str lr, [sp, #-4]!)
   2cf28:	sub	sp, sp, #28
   2cf2c:	mov	ip, #0
   2cf30:	str	ip, [sp, #20]
   2cf34:	ldr	ip, [sp, #48]	; 0x30
   2cf38:	str	ip, [sp, #16]
   2cf3c:	ldr	ip, [sp, #44]	; 0x2c
   2cf40:	str	ip, [sp, #12]
   2cf44:	ldr	ip, [sp, #40]	; 0x28
   2cf48:	str	ip, [sp, #8]
   2cf4c:	ldr	ip, [sp, #36]	; 0x24
   2cf50:	str	ip, [sp, #4]
   2cf54:	ldr	ip, [sp, #32]
   2cf58:	str	ip, [sp]
   2cf5c:	bl	2ca04 <__assert_fail@plt+0x1ae60>
   2cf60:	add	sp, sp, #28
   2cf64:	pop	{pc}		; (ldr pc, [sp], #4)
   2cf68:	cmp	r2, #0
   2cf6c:	beq	2cf98 <__assert_fail@plt+0x1b3f4>
   2cf70:	push	{lr}		; (str lr, [sp, #-4]!)
   2cf74:	ldrb	ip, [r0, #28]
   2cf78:	mov	lr, #1
   2cf7c:	bfi	ip, lr, #1, #2
   2cf80:	strb	ip, [r0, #28]
   2cf84:	str	r2, [r1]
   2cf88:	str	r3, [r1, #4]
   2cf8c:	ldr	r3, [sp, #4]
   2cf90:	str	r3, [r1, #8]
   2cf94:	pop	{pc}		; (ldr pc, [sp], #4)
   2cf98:	ldrb	r3, [r0, #28]
   2cf9c:	bfc	r3, #1, #2
   2cfa0:	strb	r3, [r0, #28]
   2cfa4:	mov	r3, #0
   2cfa8:	str	r3, [r1]
   2cfac:	str	r3, [r1, #8]
   2cfb0:	str	r3, [r1, #4]
   2cfb4:	bx	lr
   2cfb8:	strd	r4, [sp, #-16]!
   2cfbc:	str	r6, [sp, #8]
   2cfc0:	str	lr, [sp, #12]
   2cfc4:	mov	r5, r0
   2cfc8:	mov	r4, r1
   2cfcc:	mov	r2, r1
   2cfd0:	mov	r1, #0
   2cfd4:	bl	11a24 <memchr@plt>
   2cfd8:	cmp	r0, #0
   2cfdc:	subne	r0, r0, r5
   2cfe0:	addne	r0, r0, #1
   2cfe4:	moveq	r0, r4
   2cfe8:	ldrd	r4, [sp]
   2cfec:	ldr	r6, [sp, #8]
   2cff0:	add	sp, sp, #12
   2cff4:	pop	{pc}		; (ldr pc, [sp], #4)
   2cff8:	str	r4, [sp, #-8]!
   2cffc:	str	lr, [sp, #4]
   2d000:	subs	r1, r0, #0
   2d004:	beq	2d024 <__assert_fail@plt+0x1b480>
   2d008:	mov	r2, #1
   2d00c:	movw	r0, #6660	; 0x1a04
   2d010:	movt	r0, #3
   2d014:	bl	119a0 <setenv@plt>
   2d018:	ldr	r4, [sp]
   2d01c:	add	sp, sp, #4
   2d020:	pop	{pc}		; (ldr pc, [sp], #4)
   2d024:	movw	r0, #6660	; 0x1a04
   2d028:	movt	r0, #3
   2d02c:	bl	11b44 <unsetenv@plt>
   2d030:	b	2d018 <__assert_fail@plt+0x1b474>
   2d034:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2d038:	strd	r6, [sp, #8]
   2d03c:	str	r8, [sp, #16]
   2d040:	str	lr, [sp, #20]
   2d044:	subs	r6, r0, #0
   2d048:	beq	2d0bc <__assert_fail@plt+0x1b518>
   2d04c:	mov	r0, r6
   2d050:	bl	11988 <strlen@plt>
   2d054:	add	r5, r0, #1
   2d058:	cmp	r5, #58	; 0x3a
   2d05c:	movcs	r0, r5
   2d060:	movcc	r0, #58	; 0x3a
   2d064:	add	r0, r0, #9
   2d068:	bic	r0, r0, #3
   2d06c:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2d070:	subs	r4, r0, #0
   2d074:	beq	2d0a4 <__assert_fail@plt+0x1b500>
   2d078:	mov	r8, #0
   2d07c:	str	r8, [r4]
   2d080:	mov	r3, #1
   2d084:	strb	r3, [r4, #4]
   2d088:	mov	r7, r4
   2d08c:	strb	r8, [r7, #5]!
   2d090:	mov	r2, r5
   2d094:	mov	r1, r6
   2d098:	mov	r0, r7
   2d09c:	bl	11784 <memcpy@plt>
   2d0a0:	strb	r8, [r7, r5]
   2d0a4:	mov	r0, r4
   2d0a8:	ldrd	r4, [sp]
   2d0ac:	ldrd	r6, [sp, #8]
   2d0b0:	ldr	r8, [sp, #16]
   2d0b4:	add	sp, sp, #20
   2d0b8:	pop	{pc}		; (ldr pc, [sp], #4)
   2d0bc:	mov	r0, #64	; 0x40
   2d0c0:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2d0c4:	subs	r4, r0, #0
   2d0c8:	beq	2d0a4 <__assert_fail@plt+0x1b500>
   2d0cc:	mov	r3, #0
   2d0d0:	str	r3, [r4]
   2d0d4:	strb	r3, [r4, #4]
   2d0d8:	strb	r3, [r4, #5]
   2d0dc:	b	2d0a4 <__assert_fail@plt+0x1b500>
   2d0e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2d0e4:	strd	r6, [sp, #8]
   2d0e8:	str	r8, [sp, #16]
   2d0ec:	str	lr, [sp, #20]
   2d0f0:	ldr	r6, [r1, #40]	; 0x28
   2d0f4:	cmp	r6, #0
   2d0f8:	moveq	r0, #1
   2d0fc:	beq	2d140 <__assert_fail@plt+0x1b59c>
   2d100:	mov	r5, r0
   2d104:	mov	r7, r1
   2d108:	cmp	r1, r6
   2d10c:	bhi	2d120 <__assert_fail@plt+0x1b57c>
   2d110:	add	r3, r1, #44	; 0x2c
   2d114:	cmp	r6, r3
   2d118:	movcc	r0, #1
   2d11c:	bcc	2d140 <__assert_fail@plt+0x1b59c>
   2d120:	ldrb	r3, [r6]
   2d124:	cmp	r3, #0
   2d128:	addne	r4, r5, #5
   2d12c:	bne	2d1a4 <__assert_fail@plt+0x1b600>
   2d130:	movw	r4, #8476	; 0x211c
   2d134:	movt	r4, #3
   2d138:	str	r4, [r7, #40]	; 0x28
   2d13c:	mov	r0, #1
   2d140:	ldrd	r4, [sp]
   2d144:	ldrd	r6, [sp, #8]
   2d148:	ldr	r8, [sp, #16]
   2d14c:	add	sp, sp, #20
   2d150:	pop	{pc}		; (ldr pc, [sp], #4)
   2d154:	mov	r0, r6
   2d158:	bl	2d034 <__assert_fail@plt+0x1b490>
   2d15c:	str	r0, [r5]
   2d160:	cmp	r0, #0
   2d164:	moveq	r0, #0
   2d168:	beq	2d140 <__assert_fail@plt+0x1b59c>
   2d16c:	mov	r3, #0
   2d170:	strb	r3, [r0, #4]
   2d174:	add	r4, r0, #5
   2d178:	b	2d138 <__assert_fail@plt+0x1b594>
   2d17c:	mov	r0, r4
   2d180:	bl	11988 <strlen@plt>
   2d184:	add	r0, r0, #1
   2d188:	ldrb	r3, [r4, r0]!
   2d18c:	cmp	r3, #0
   2d190:	bne	2d1a4 <__assert_fail@plt+0x1b600>
   2d194:	ldr	r3, [r5]
   2d198:	cmp	r3, #0
   2d19c:	addne	r4, r3, #5
   2d1a0:	movne	r5, r3
   2d1a4:	mov	r1, r6
   2d1a8:	mov	r0, r4
   2d1ac:	bl	1170c <strcmp@plt>
   2d1b0:	cmp	r0, #0
   2d1b4:	beq	2d138 <__assert_fail@plt+0x1b594>
   2d1b8:	ldrb	r3, [r4]
   2d1bc:	cmp	r3, #0
   2d1c0:	bne	2d17c <__assert_fail@plt+0x1b5d8>
   2d1c4:	add	r3, r5, #5
   2d1c8:	cmp	r4, r3
   2d1cc:	bne	2d1dc <__assert_fail@plt+0x1b638>
   2d1d0:	ldrb	r3, [r5, #4]
   2d1d4:	cmp	r3, #0
   2d1d8:	bne	2d17c <__assert_fail@plt+0x1b5d8>
   2d1dc:	mov	r0, r6
   2d1e0:	bl	11988 <strlen@plt>
   2d1e4:	add	r8, r0, #1
   2d1e8:	add	r3, r5, #64	; 0x40
   2d1ec:	sub	r3, r3, r4
   2d1f0:	cmp	r3, r8
   2d1f4:	ble	2d154 <__assert_fail@plt+0x1b5b0>
   2d1f8:	mov	r2, r8
   2d1fc:	mov	r1, r6
   2d200:	mov	r0, r4
   2d204:	bl	11784 <memcpy@plt>
   2d208:	mov	r3, #0
   2d20c:	strb	r3, [r4, r8]
   2d210:	b	2d138 <__assert_fail@plt+0x1b594>
   2d214:	cmp	r0, #1
   2d218:	bxeq	lr
   2d21c:	cmp	r0, #0
   2d220:	bxeq	lr
   2d224:	str	r4, [sp, #-8]!
   2d228:	str	lr, [sp, #4]
   2d22c:	ldr	r4, [r0]
   2d230:	bl	17750 <__assert_fail@plt+0x5bac>
   2d234:	mov	r0, r4
   2d238:	cmp	r4, #0
   2d23c:	bne	2d22c <__assert_fail@plt+0x1b688>
   2d240:	ldr	r4, [sp]
   2d244:	add	sp, sp, #4
   2d248:	pop	{pc}		; (ldr pc, [sp], #4)
   2d24c:	strd	r4, [sp, #-16]!
   2d250:	str	r6, [sp, #8]
   2d254:	str	lr, [sp, #12]
   2d258:	mov	r4, r0
   2d25c:	movw	r0, #6660	; 0x1a04
   2d260:	movt	r0, #3
   2d264:	bl	118ec <getenv@plt>
   2d268:	subs	r5, r0, #0
   2d26c:	beq	2d2b4 <__assert_fail@plt+0x1b710>
   2d270:	ldrb	r3, [r4, #4]
   2d274:	cmp	r3, #0
   2d278:	moveq	r0, #0
   2d27c:	beq	2d294 <__assert_fail@plt+0x1b6f0>
   2d280:	mov	r1, r5
   2d284:	add	r0, r4, #5
   2d288:	bl	1170c <strcmp@plt>
   2d28c:	clz	r0, r0
   2d290:	lsr	r0, r0, #5
   2d294:	cmp	r0, #0
   2d298:	movne	r5, #1
   2d29c:	beq	2d2c4 <__assert_fail@plt+0x1b720>
   2d2a0:	mov	r0, r5
   2d2a4:	ldrd	r4, [sp]
   2d2a8:	ldr	r6, [sp, #8]
   2d2ac:	add	sp, sp, #12
   2d2b0:	pop	{pc}		; (ldr pc, [sp], #4)
   2d2b4:	ldrb	r0, [r4, #4]
   2d2b8:	clz	r0, r0
   2d2bc:	lsr	r0, r0, #5
   2d2c0:	b	2d294 <__assert_fail@plt+0x1b6f0>
   2d2c4:	mov	r0, r5
   2d2c8:	bl	2d034 <__assert_fail@plt+0x1b490>
   2d2cc:	subs	r5, r0, #0
   2d2d0:	beq	2d2a0 <__assert_fail@plt+0x1b6fc>
   2d2d4:	ldrb	r3, [r4, #4]
   2d2d8:	cmp	r3, #0
   2d2dc:	addne	r0, r4, #5
   2d2e0:	moveq	r0, #0
   2d2e4:	bl	2cff8 <__assert_fail@plt+0x1b454>
   2d2e8:	cmp	r0, #0
   2d2ec:	beq	2d310 <__assert_fail@plt+0x1b76c>
   2d2f0:	bl	119b8 <__errno_location@plt>
   2d2f4:	mov	r4, r0
   2d2f8:	ldr	r6, [r0]
   2d2fc:	mov	r0, r5
   2d300:	bl	2d214 <__assert_fail@plt+0x1b670>
   2d304:	str	r6, [r4]
   2d308:	mov	r5, #0
   2d30c:	b	2d2a0 <__assert_fail@plt+0x1b6fc>
   2d310:	bl	11844 <tzset@plt>
   2d314:	b	2d2a0 <__assert_fail@plt+0x1b6fc>
   2d318:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2d31c:	strd	r6, [sp, #8]
   2d320:	str	r8, [sp, #16]
   2d324:	str	lr, [sp, #20]
   2d328:	cmp	r0, #1
   2d32c:	moveq	r5, #1
   2d330:	beq	2d374 <__assert_fail@plt+0x1b7d0>
   2d334:	mov	r4, r0
   2d338:	bl	119b8 <__errno_location@plt>
   2d33c:	mov	r6, r0
   2d340:	ldr	r7, [r0]
   2d344:	ldrb	r3, [r4, #4]
   2d348:	cmp	r3, #0
   2d34c:	addne	r0, r4, #5
   2d350:	moveq	r0, #0
   2d354:	bl	2cff8 <__assert_fail@plt+0x1b454>
   2d358:	cmp	r0, #0
   2d35c:	beq	2d38c <__assert_fail@plt+0x1b7e8>
   2d360:	ldr	r7, [r6]
   2d364:	mov	r5, #0
   2d368:	mov	r0, r4
   2d36c:	bl	2d214 <__assert_fail@plt+0x1b670>
   2d370:	str	r7, [r6]
   2d374:	mov	r0, r5
   2d378:	ldrd	r4, [sp]
   2d37c:	ldrd	r6, [sp, #8]
   2d380:	ldr	r8, [sp, #16]
   2d384:	add	sp, sp, #20
   2d388:	pop	{pc}		; (ldr pc, [sp], #4)
   2d38c:	bl	11844 <tzset@plt>
   2d390:	mov	r5, #1
   2d394:	b	2d368 <__assert_fail@plt+0x1b7c4>
   2d398:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2d39c:	strd	r6, [sp, #8]
   2d3a0:	str	r8, [sp, #16]
   2d3a4:	str	lr, [sp, #20]
   2d3a8:	mov	r6, r1
   2d3ac:	mov	r4, r2
   2d3b0:	subs	r5, r0, #0
   2d3b4:	beq	2d420 <__assert_fail@plt+0x1b87c>
   2d3b8:	mov	r0, r5
   2d3bc:	bl	2d24c <__assert_fail@plt+0x1b6a8>
   2d3c0:	subs	r7, r0, #0
   2d3c4:	moveq	r4, r7
   2d3c8:	beq	2d408 <__assert_fail@plt+0x1b864>
   2d3cc:	mov	r1, r4
   2d3d0:	mov	r0, r6
   2d3d4:	bl	117fc <localtime_r@plt>
   2d3d8:	subs	r6, r0, #0
   2d3dc:	beq	2d434 <__assert_fail@plt+0x1b890>
   2d3e0:	mov	r1, r4
   2d3e4:	mov	r0, r5
   2d3e8:	bl	2d0e0 <__assert_fail@plt+0x1b53c>
   2d3ec:	mov	r5, r0
   2d3f0:	mov	r0, r7
   2d3f4:	bl	2d318 <__assert_fail@plt+0x1b774>
   2d3f8:	and	r0, r0, r5
   2d3fc:	uxtb	r0, r0
   2d400:	cmp	r0, #0
   2d404:	moveq	r4, #0
   2d408:	mov	r0, r4
   2d40c:	ldrd	r4, [sp]
   2d410:	ldrd	r6, [sp, #8]
   2d414:	ldr	r8, [sp, #16]
   2d418:	add	sp, sp, #20
   2d41c:	pop	{pc}		; (ldr pc, [sp], #4)
   2d420:	mov	r1, r2
   2d424:	mov	r0, r6
   2d428:	bl	116e8 <gmtime_r@plt>
   2d42c:	mov	r4, r0
   2d430:	b	2d408 <__assert_fail@plt+0x1b864>
   2d434:	mov	r0, r7
   2d438:	bl	2d318 <__assert_fail@plt+0x1b774>
   2d43c:	mov	r4, r6
   2d440:	b	2d408 <__assert_fail@plt+0x1b864>
   2d444:	strd	r4, [sp, #-20]!	; 0xffffffec
   2d448:	strd	r6, [sp, #8]
   2d44c:	str	lr, [sp, #16]
   2d450:	sub	sp, sp, #52	; 0x34
   2d454:	mov	r4, r1
   2d458:	subs	r5, r0, #0
   2d45c:	beq	2d4d8 <__assert_fail@plt+0x1b934>
   2d460:	mov	r0, r5
   2d464:	bl	2d24c <__assert_fail@plt+0x1b6a8>
   2d468:	subs	r7, r0, #0
   2d46c:	beq	2d554 <__assert_fail@plt+0x1b9b0>
   2d470:	ldr	r3, [r4]
   2d474:	str	r3, [sp, #4]
   2d478:	ldr	r3, [r4, #4]
   2d47c:	str	r3, [sp, #8]
   2d480:	ldr	r3, [r4, #8]
   2d484:	str	r3, [sp, #12]
   2d488:	ldr	r3, [r4, #12]
   2d48c:	str	r3, [sp, #16]
   2d490:	ldr	r3, [r4, #16]
   2d494:	str	r3, [sp, #20]
   2d498:	ldr	r3, [r4, #20]
   2d49c:	str	r3, [sp, #24]
   2d4a0:	mvn	r3, #0
   2d4a4:	str	r3, [sp, #32]
   2d4a8:	ldr	r3, [r4, #32]
   2d4ac:	str	r3, [sp, #36]	; 0x24
   2d4b0:	add	r0, sp, #4
   2d4b4:	bl	11724 <mktime@plt>
   2d4b8:	mov	r6, r0
   2d4bc:	ldr	r3, [sp, #32]
   2d4c0:	cmp	r3, #0
   2d4c4:	bge	2d4e8 <__assert_fail@plt+0x1b944>
   2d4c8:	mov	r0, r7
   2d4cc:	bl	2d318 <__assert_fail@plt+0x1b774>
   2d4d0:	mvn	r6, #0
   2d4d4:	b	2d53c <__assert_fail@plt+0x1b998>
   2d4d8:	mov	r0, r1
   2d4dc:	bl	11acc <timegm@plt>
   2d4e0:	mov	r6, r0
   2d4e4:	b	2d53c <__assert_fail@plt+0x1b998>
   2d4e8:	add	r1, sp, #4
   2d4ec:	mov	r0, r5
   2d4f0:	bl	2d0e0 <__assert_fail@plt+0x1b53c>
   2d4f4:	mov	r5, r0
   2d4f8:	mov	r0, r7
   2d4fc:	bl	2d318 <__assert_fail@plt+0x1b774>
   2d500:	and	r0, r0, r5
   2d504:	tst	r0, #255	; 0xff
   2d508:	beq	2d4d0 <__assert_fail@plt+0x1b92c>
   2d50c:	ldrd	r2, [sp, #4]
   2d510:	strd	r2, [r4]
   2d514:	ldrd	r2, [sp, #12]
   2d518:	strd	r2, [r4, #8]
   2d51c:	ldrd	r2, [sp, #20]
   2d520:	strd	r2, [r4, #16]
   2d524:	ldrd	r2, [sp, #28]
   2d528:	strd	r2, [r4, #24]
   2d52c:	ldrd	r2, [sp, #36]	; 0x24
   2d530:	strd	r2, [r4, #32]
   2d534:	ldr	r3, [sp, #44]	; 0x2c
   2d538:	str	r3, [r4, #40]	; 0x28
   2d53c:	mov	r0, r6
   2d540:	add	sp, sp, #52	; 0x34
   2d544:	ldrd	r4, [sp]
   2d548:	ldrd	r6, [sp, #8]
   2d54c:	add	sp, sp, #16
   2d550:	pop	{pc}		; (ldr pc, [sp], #4)
   2d554:	mvn	r6, #0
   2d558:	b	2d53c <__assert_fail@plt+0x1b998>
   2d55c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2d560:	strd	r6, [sp, #8]
   2d564:	str	r8, [sp, #16]
   2d568:	str	lr, [sp, #20]
   2d56c:	mov	r4, r0
   2d570:	cmp	r0, #2
   2d574:	bls	2d590 <__assert_fail@plt+0x1b9ec>
   2d578:	mov	r0, r4
   2d57c:	ldrd	r4, [sp]
   2d580:	ldrd	r6, [sp, #8]
   2d584:	ldr	r8, [sp, #16]
   2d588:	add	sp, sp, #20
   2d58c:	pop	{pc}		; (ldr pc, [sp], #4)
   2d590:	bl	300b8 <__assert_fail@plt+0x1e514>
   2d594:	mov	r6, r0
   2d598:	bl	119b8 <__errno_location@plt>
   2d59c:	mov	r5, r0
   2d5a0:	ldr	r7, [r0]
   2d5a4:	mov	r0, r4
   2d5a8:	bl	11b80 <close@plt>
   2d5ac:	str	r7, [r5]
   2d5b0:	mov	r4, r6
   2d5b4:	b	2d578 <__assert_fail@plt+0x1b9d4>
   2d5b8:	strd	r4, [sp, #-16]!
   2d5bc:	str	r6, [sp, #8]
   2d5c0:	str	lr, [sp, #12]
   2d5c4:	sub	sp, sp, #32
   2d5c8:	mov	r4, r0
   2d5cc:	ldr	r5, [sp, #48]	; 0x30
   2d5d0:	ldr	r6, [sp, #52]	; 0x34
   2d5d4:	cmp	r1, #0
   2d5d8:	beq	2d6a4 <__assert_fail@plt+0x1bb00>
   2d5dc:	str	r3, [sp, #4]
   2d5e0:	str	r2, [sp]
   2d5e4:	mov	r3, r1
   2d5e8:	movw	r2, #9812	; 0x2654
   2d5ec:	movt	r2, #3
   2d5f0:	mov	r1, #1
   2d5f4:	bl	11a18 <__fprintf_chk@plt>
   2d5f8:	mov	r2, #5
   2d5fc:	movw	r1, #9832	; 0x2668
   2d600:	movt	r1, #3
   2d604:	mov	r0, #0
   2d608:	bl	117d8 <dcgettext@plt>
   2d60c:	movw	r3, #2022	; 0x7e6
   2d610:	str	r3, [sp]
   2d614:	mov	r3, r0
   2d618:	movw	r2, #10560	; 0x2940
   2d61c:	movt	r2, #3
   2d620:	mov	r1, #1
   2d624:	mov	r0, r4
   2d628:	bl	11a18 <__fprintf_chk@plt>
   2d62c:	mov	r1, r4
   2d630:	mov	r0, #10
   2d634:	bl	117cc <fputc_unlocked@plt>
   2d638:	mov	r2, #5
   2d63c:	movw	r1, #9836	; 0x266c
   2d640:	movt	r1, #3
   2d644:	mov	r0, #0
   2d648:	bl	117d8 <dcgettext@plt>
   2d64c:	movw	r3, #10008	; 0x2718
   2d650:	movt	r3, #3
   2d654:	mov	r2, r0
   2d658:	mov	r1, #1
   2d65c:	mov	r0, r4
   2d660:	bl	11a18 <__fprintf_chk@plt>
   2d664:	mov	r1, r4
   2d668:	mov	r0, #10
   2d66c:	bl	117cc <fputc_unlocked@plt>
   2d670:	cmp	r6, #9
   2d674:	ldrls	pc, [pc, r6, lsl #2]
   2d678:	b	2d97c <__assert_fail@plt+0x1bdd8>
   2d67c:	andeq	sp, r2, r8, ror #13
   2d680:	andeq	sp, r2, r0, asr #13
   2d684:	strdeq	sp, [r2], -ip
   2d688:	andeq	sp, r2, r0, lsr r7
   2d68c:	andeq	sp, r2, ip, ror #14
   2d690:			; <UNDEFINED> instruction: 0x0002d7b0
   2d694:	strdeq	sp, [r2], -ip
   2d698:	andeq	sp, r2, r0, asr r8
   2d69c:	andeq	sp, r2, ip, lsr #17
   2d6a0:	andeq	sp, r2, r0, lsl r9
   2d6a4:	str	r3, [sp]
   2d6a8:	mov	r3, r2
   2d6ac:	movw	r2, #9824	; 0x2660
   2d6b0:	movt	r2, #3
   2d6b4:	mov	r1, #1
   2d6b8:	bl	11a18 <__fprintf_chk@plt>
   2d6bc:	b	2d5f8 <__assert_fail@plt+0x1ba54>
   2d6c0:	mov	r2, #5
   2d6c4:	movw	r1, #10044	; 0x273c
   2d6c8:	movt	r1, #3
   2d6cc:	mov	r0, #0
   2d6d0:	bl	117d8 <dcgettext@plt>
   2d6d4:	ldr	r3, [r5]
   2d6d8:	mov	r2, r0
   2d6dc:	mov	r1, #1
   2d6e0:	mov	r0, r4
   2d6e4:	bl	11a18 <__fprintf_chk@plt>
   2d6e8:	add	sp, sp, #32
   2d6ec:	ldrd	r4, [sp]
   2d6f0:	ldr	r6, [sp, #8]
   2d6f4:	add	sp, sp, #12
   2d6f8:	pop	{pc}		; (ldr pc, [sp], #4)
   2d6fc:	mov	r2, #5
   2d700:	movw	r1, #10060	; 0x274c
   2d704:	movt	r1, #3
   2d708:	mov	r0, #0
   2d70c:	bl	117d8 <dcgettext@plt>
   2d710:	ldr	r3, [r5, #4]
   2d714:	str	r3, [sp]
   2d718:	ldr	r3, [r5]
   2d71c:	mov	r2, r0
   2d720:	mov	r1, #1
   2d724:	mov	r0, r4
   2d728:	bl	11a18 <__fprintf_chk@plt>
   2d72c:	b	2d6e8 <__assert_fail@plt+0x1bb44>
   2d730:	mov	r2, #5
   2d734:	movw	r1, #10084	; 0x2764
   2d738:	movt	r1, #3
   2d73c:	mov	r0, #0
   2d740:	bl	117d8 <dcgettext@plt>
   2d744:	ldr	r3, [r5, #8]
   2d748:	str	r3, [sp, #4]
   2d74c:	ldr	r3, [r5, #4]
   2d750:	str	r3, [sp]
   2d754:	ldr	r3, [r5]
   2d758:	mov	r2, r0
   2d75c:	mov	r1, #1
   2d760:	mov	r0, r4
   2d764:	bl	11a18 <__fprintf_chk@plt>
   2d768:	b	2d6e8 <__assert_fail@plt+0x1bb44>
   2d76c:	mov	r2, #5
   2d770:	movw	r1, #10112	; 0x2780
   2d774:	movt	r1, #3
   2d778:	mov	r0, #0
   2d77c:	bl	117d8 <dcgettext@plt>
   2d780:	ldr	r3, [r5, #12]
   2d784:	str	r3, [sp, #8]
   2d788:	ldr	r3, [r5, #8]
   2d78c:	str	r3, [sp, #4]
   2d790:	ldr	r3, [r5, #4]
   2d794:	str	r3, [sp]
   2d798:	ldr	r3, [r5]
   2d79c:	mov	r2, r0
   2d7a0:	mov	r1, #1
   2d7a4:	mov	r0, r4
   2d7a8:	bl	11a18 <__fprintf_chk@plt>
   2d7ac:	b	2d6e8 <__assert_fail@plt+0x1bb44>
   2d7b0:	mov	r2, #5
   2d7b4:	movw	r1, #10144	; 0x27a0
   2d7b8:	movt	r1, #3
   2d7bc:	mov	r0, #0
   2d7c0:	bl	117d8 <dcgettext@plt>
   2d7c4:	ldr	r3, [r5, #16]
   2d7c8:	str	r3, [sp, #12]
   2d7cc:	ldr	r3, [r5, #12]
   2d7d0:	str	r3, [sp, #8]
   2d7d4:	ldr	r3, [r5, #8]
   2d7d8:	str	r3, [sp, #4]
   2d7dc:	ldr	r3, [r5, #4]
   2d7e0:	str	r3, [sp]
   2d7e4:	ldr	r3, [r5]
   2d7e8:	mov	r2, r0
   2d7ec:	mov	r1, #1
   2d7f0:	mov	r0, r4
   2d7f4:	bl	11a18 <__fprintf_chk@plt>
   2d7f8:	b	2d6e8 <__assert_fail@plt+0x1bb44>
   2d7fc:	mov	r2, #5
   2d800:	movw	r1, #10180	; 0x27c4
   2d804:	movt	r1, #3
   2d808:	mov	r0, #0
   2d80c:	bl	117d8 <dcgettext@plt>
   2d810:	ldr	r3, [r5, #20]
   2d814:	str	r3, [sp, #16]
   2d818:	ldr	r3, [r5, #16]
   2d81c:	str	r3, [sp, #12]
   2d820:	ldr	r3, [r5, #12]
   2d824:	str	r3, [sp, #8]
   2d828:	ldr	r3, [r5, #8]
   2d82c:	str	r3, [sp, #4]
   2d830:	ldr	r3, [r5, #4]
   2d834:	str	r3, [sp]
   2d838:	ldr	r3, [r5]
   2d83c:	mov	r2, r0
   2d840:	mov	r1, #1
   2d844:	mov	r0, r4
   2d848:	bl	11a18 <__fprintf_chk@plt>
   2d84c:	b	2d6e8 <__assert_fail@plt+0x1bb44>
   2d850:	mov	r2, #5
   2d854:	movw	r1, #10220	; 0x27ec
   2d858:	movt	r1, #3
   2d85c:	mov	r0, #0
   2d860:	bl	117d8 <dcgettext@plt>
   2d864:	ldr	r3, [r5, #24]
   2d868:	str	r3, [sp, #20]
   2d86c:	ldr	r3, [r5, #20]
   2d870:	str	r3, [sp, #16]
   2d874:	ldr	r3, [r5, #16]
   2d878:	str	r3, [sp, #12]
   2d87c:	ldr	r3, [r5, #12]
   2d880:	str	r3, [sp, #8]
   2d884:	ldr	r3, [r5, #8]
   2d888:	str	r3, [sp, #4]
   2d88c:	ldr	r3, [r5, #4]
   2d890:	str	r3, [sp]
   2d894:	ldr	r3, [r5]
   2d898:	mov	r2, r0
   2d89c:	mov	r1, #1
   2d8a0:	mov	r0, r4
   2d8a4:	bl	11a18 <__fprintf_chk@plt>
   2d8a8:	b	2d6e8 <__assert_fail@plt+0x1bb44>
   2d8ac:	mov	r2, #5
   2d8b0:	movw	r1, #10264	; 0x2818
   2d8b4:	movt	r1, #3
   2d8b8:	mov	r0, #0
   2d8bc:	bl	117d8 <dcgettext@plt>
   2d8c0:	ldr	r3, [r5, #28]
   2d8c4:	str	r3, [sp, #24]
   2d8c8:	ldr	r3, [r5, #24]
   2d8cc:	str	r3, [sp, #20]
   2d8d0:	ldr	r3, [r5, #20]
   2d8d4:	str	r3, [sp, #16]
   2d8d8:	ldr	r3, [r5, #16]
   2d8dc:	str	r3, [sp, #12]
   2d8e0:	ldr	r3, [r5, #12]
   2d8e4:	str	r3, [sp, #8]
   2d8e8:	ldr	r3, [r5, #8]
   2d8ec:	str	r3, [sp, #4]
   2d8f0:	ldr	r3, [r5, #4]
   2d8f4:	str	r3, [sp]
   2d8f8:	ldr	r3, [r5]
   2d8fc:	mov	r2, r0
   2d900:	mov	r1, #1
   2d904:	mov	r0, r4
   2d908:	bl	11a18 <__fprintf_chk@plt>
   2d90c:	b	2d6e8 <__assert_fail@plt+0x1bb44>
   2d910:	mov	r2, #5
   2d914:	movw	r1, #10312	; 0x2848
   2d918:	movt	r1, #3
   2d91c:	mov	r0, #0
   2d920:	bl	117d8 <dcgettext@plt>
   2d924:	ldr	r3, [r5, #32]
   2d928:	str	r3, [sp, #28]
   2d92c:	ldr	r3, [r5, #28]
   2d930:	str	r3, [sp, #24]
   2d934:	ldr	r3, [r5, #24]
   2d938:	str	r3, [sp, #20]
   2d93c:	ldr	r3, [r5, #20]
   2d940:	str	r3, [sp, #16]
   2d944:	ldr	r3, [r5, #16]
   2d948:	str	r3, [sp, #12]
   2d94c:	ldr	r3, [r5, #12]
   2d950:	str	r3, [sp, #8]
   2d954:	ldr	r3, [r5, #8]
   2d958:	str	r3, [sp, #4]
   2d95c:	ldr	r3, [r5, #4]
   2d960:	str	r3, [sp]
   2d964:	ldr	r3, [r5]
   2d968:	mov	r2, r0
   2d96c:	mov	r1, #1
   2d970:	mov	r0, r4
   2d974:	bl	11a18 <__fprintf_chk@plt>
   2d978:	b	2d6e8 <__assert_fail@plt+0x1bb44>
   2d97c:	mov	r2, #5
   2d980:	movw	r1, #10364	; 0x287c
   2d984:	movt	r1, #3
   2d988:	mov	r0, #0
   2d98c:	bl	117d8 <dcgettext@plt>
   2d990:	ldr	r3, [r5, #32]
   2d994:	str	r3, [sp, #28]
   2d998:	ldr	r3, [r5, #28]
   2d99c:	str	r3, [sp, #24]
   2d9a0:	ldr	r3, [r5, #24]
   2d9a4:	str	r3, [sp, #20]
   2d9a8:	ldr	r3, [r5, #20]
   2d9ac:	str	r3, [sp, #16]
   2d9b0:	ldr	r3, [r5, #16]
   2d9b4:	str	r3, [sp, #12]
   2d9b8:	ldr	r3, [r5, #12]
   2d9bc:	str	r3, [sp, #8]
   2d9c0:	ldr	r3, [r5, #8]
   2d9c4:	str	r3, [sp, #4]
   2d9c8:	ldr	r3, [r5, #4]
   2d9cc:	str	r3, [sp]
   2d9d0:	ldr	r3, [r5]
   2d9d4:	mov	r2, r0
   2d9d8:	mov	r1, #1
   2d9dc:	mov	r0, r4
   2d9e0:	bl	11a18 <__fprintf_chk@plt>
   2d9e4:	b	2d6e8 <__assert_fail@plt+0x1bb44>
   2d9e8:	strd	r4, [sp, #-12]!
   2d9ec:	str	lr, [sp, #8]
   2d9f0:	sub	sp, sp, #12
   2d9f4:	ldr	r5, [sp, #24]
   2d9f8:	ldr	ip, [r5]
   2d9fc:	cmp	ip, #0
   2da00:	beq	2da38 <__assert_fail@plt+0x1be94>
   2da04:	mov	lr, r5
   2da08:	mov	ip, #0
   2da0c:	add	ip, ip, #1
   2da10:	ldr	r4, [lr, #4]!
   2da14:	cmp	r4, #0
   2da18:	bne	2da0c <__assert_fail@plt+0x1be68>
   2da1c:	str	ip, [sp, #4]
   2da20:	str	r5, [sp]
   2da24:	bl	2d5b8 <__assert_fail@plt+0x1ba14>
   2da28:	add	sp, sp, #12
   2da2c:	ldrd	r4, [sp]
   2da30:	add	sp, sp, #8
   2da34:	pop	{pc}		; (ldr pc, [sp], #4)
   2da38:	mov	ip, #0
   2da3c:	b	2da1c <__assert_fail@plt+0x1be78>
   2da40:	strd	r4, [sp, #-12]!
   2da44:	str	lr, [sp, #8]
   2da48:	sub	sp, sp, #52	; 0x34
   2da4c:	ldr	r5, [sp, #64]	; 0x40
   2da50:	add	r4, sp, #8
   2da54:	mov	ip, #0
   2da58:	ldr	lr, [r5], #4
   2da5c:	str	lr, [r4], #4
   2da60:	cmp	lr, #0
   2da64:	beq	2da74 <__assert_fail@plt+0x1bed0>
   2da68:	add	ip, ip, #1
   2da6c:	cmp	ip, #10
   2da70:	bne	2da58 <__assert_fail@plt+0x1beb4>
   2da74:	str	ip, [sp, #4]
   2da78:	add	ip, sp, #8
   2da7c:	str	ip, [sp]
   2da80:	bl	2d5b8 <__assert_fail@plt+0x1ba14>
   2da84:	add	sp, sp, #52	; 0x34
   2da88:	ldrd	r4, [sp]
   2da8c:	add	sp, sp, #8
   2da90:	pop	{pc}		; (ldr pc, [sp], #4)
   2da94:	push	{r3}		; (str r3, [sp, #-4]!)
   2da98:	push	{lr}		; (str lr, [sp, #-4]!)
   2da9c:	sub	sp, sp, #16
   2daa0:	add	r3, sp, #24
   2daa4:	str	r3, [sp, #12]
   2daa8:	str	r3, [sp]
   2daac:	ldr	r3, [sp, #20]
   2dab0:	bl	2da40 <__assert_fail@plt+0x1be9c>
   2dab4:	add	sp, sp, #16
   2dab8:	pop	{lr}		; (ldr lr, [sp], #4)
   2dabc:	add	sp, sp, #4
   2dac0:	bx	lr
   2dac4:	str	r4, [sp, #-8]!
   2dac8:	str	lr, [sp, #4]
   2dacc:	movw	r3, #12860	; 0x323c
   2dad0:	movt	r3, #4
   2dad4:	ldr	r1, [r3]
   2dad8:	mov	r0, #10
   2dadc:	bl	117cc <fputc_unlocked@plt>
   2dae0:	mov	r2, #5
   2dae4:	movw	r1, #10424	; 0x28b8
   2dae8:	movt	r1, #3
   2daec:	mov	r0, #0
   2daf0:	bl	117d8 <dcgettext@plt>
   2daf4:	movw	r2, #10444	; 0x28cc
   2daf8:	movt	r2, #3
   2dafc:	mov	r1, r0
   2db00:	mov	r0, #1
   2db04:	bl	11a00 <__printf_chk@plt>
   2db08:	mov	r2, #5
   2db0c:	movw	r1, #10468	; 0x28e4
   2db10:	movt	r1, #3
   2db14:	mov	r0, #0
   2db18:	bl	117d8 <dcgettext@plt>
   2db1c:	movw	r3, #6284	; 0x188c
   2db20:	movt	r3, #3
   2db24:	movw	r2, #6324	; 0x18b4
   2db28:	movt	r2, #3
   2db2c:	mov	r1, r0
   2db30:	mov	r0, #1
   2db34:	bl	11a00 <__printf_chk@plt>
   2db38:	mov	r2, #5
   2db3c:	movw	r1, #10488	; 0x28f8
   2db40:	movt	r1, #3
   2db44:	mov	r0, #0
   2db48:	bl	117d8 <dcgettext@plt>
   2db4c:	movw	r2, #10528	; 0x2920
   2db50:	movt	r2, #3
   2db54:	mov	r1, r0
   2db58:	mov	r0, #1
   2db5c:	bl	11a00 <__printf_chk@plt>
   2db60:	ldr	r4, [sp]
   2db64:	add	sp, sp, #4
   2db68:	pop	{pc}		; (ldr pc, [sp], #4)
   2db6c:	str	r4, [sp, #-8]!
   2db70:	str	lr, [sp, #4]
   2db74:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2db78:	cmp	r0, #0
   2db7c:	beq	2db8c <__assert_fail@plt+0x1bfe8>
   2db80:	ldr	r4, [sp]
   2db84:	add	sp, sp, #4
   2db88:	pop	{pc}		; (ldr pc, [sp], #4)
   2db8c:	bl	2e000 <__assert_fail@plt+0x1c45c>
   2db90:	str	r4, [sp, #-8]!
   2db94:	str	lr, [sp, #4]
   2db98:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2db9c:	cmp	r0, #0
   2dba0:	beq	2dbb0 <__assert_fail@plt+0x1c00c>
   2dba4:	ldr	r4, [sp]
   2dba8:	add	sp, sp, #4
   2dbac:	pop	{pc}		; (ldr pc, [sp], #4)
   2dbb0:	bl	2e000 <__assert_fail@plt+0x1c45c>
   2dbb4:	str	r4, [sp, #-8]!
   2dbb8:	str	lr, [sp, #4]
   2dbbc:	bl	2db6c <__assert_fail@plt+0x1bfc8>
   2dbc0:	ldr	r4, [sp]
   2dbc4:	add	sp, sp, #4
   2dbc8:	pop	{pc}		; (ldr pc, [sp], #4)
   2dbcc:	strd	r4, [sp, #-16]!
   2dbd0:	str	r6, [sp, #8]
   2dbd4:	str	lr, [sp, #12]
   2dbd8:	mov	r5, r0
   2dbdc:	mov	r4, r1
   2dbe0:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   2dbe4:	cmp	r0, #0
   2dbe8:	beq	2dbfc <__assert_fail@plt+0x1c058>
   2dbec:	ldrd	r4, [sp]
   2dbf0:	ldr	r6, [sp, #8]
   2dbf4:	add	sp, sp, #12
   2dbf8:	pop	{pc}		; (ldr pc, [sp], #4)
   2dbfc:	adds	r4, r4, #0
   2dc00:	movne	r4, #1
   2dc04:	cmp	r5, #0
   2dc08:	moveq	r4, #1
   2dc0c:	cmp	r4, #0
   2dc10:	beq	2dbec <__assert_fail@plt+0x1c048>
   2dc14:	bl	2e000 <__assert_fail@plt+0x1c45c>
   2dc18:	str	r4, [sp, #-8]!
   2dc1c:	str	lr, [sp, #4]
   2dc20:	cmp	r1, #0
   2dc24:	orreq	r1, r1, #1
   2dc28:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   2dc2c:	cmp	r0, #0
   2dc30:	beq	2dc40 <__assert_fail@plt+0x1c09c>
   2dc34:	ldr	r4, [sp]
   2dc38:	add	sp, sp, #4
   2dc3c:	pop	{pc}		; (ldr pc, [sp], #4)
   2dc40:	bl	2e000 <__assert_fail@plt+0x1c45c>
   2dc44:	strd	r4, [sp, #-16]!
   2dc48:	str	r6, [sp, #8]
   2dc4c:	str	lr, [sp, #12]
   2dc50:	mov	r4, r0
   2dc54:	mov	r6, r1
   2dc58:	mov	r5, r2
   2dc5c:	bl	2ffbc <__assert_fail@plt+0x1e418>
   2dc60:	cmp	r0, #0
   2dc64:	beq	2dc78 <__assert_fail@plt+0x1c0d4>
   2dc68:	ldrd	r4, [sp]
   2dc6c:	ldr	r6, [sp, #8]
   2dc70:	add	sp, sp, #12
   2dc74:	pop	{pc}		; (ldr pc, [sp], #4)
   2dc78:	cmp	r4, #0
   2dc7c:	beq	2dc8c <__assert_fail@plt+0x1c0e8>
   2dc80:	cmp	r6, #0
   2dc84:	cmpne	r5, #0
   2dc88:	beq	2dc68 <__assert_fail@plt+0x1c0c4>
   2dc8c:	bl	2e000 <__assert_fail@plt+0x1c45c>
   2dc90:	str	r4, [sp, #-8]!
   2dc94:	str	lr, [sp, #4]
   2dc98:	bl	2dc44 <__assert_fail@plt+0x1c0a0>
   2dc9c:	ldr	r4, [sp]
   2dca0:	add	sp, sp, #4
   2dca4:	pop	{pc}		; (ldr pc, [sp], #4)
   2dca8:	str	r4, [sp, #-8]!
   2dcac:	str	lr, [sp, #4]
   2dcb0:	mov	ip, r1
   2dcb4:	mov	r3, r2
   2dcb8:	cmp	r2, #0
   2dcbc:	cmpne	r1, #0
   2dcc0:	moveq	r3, #1
   2dcc4:	moveq	ip, r3
   2dcc8:	mov	r2, r3
   2dccc:	mov	r1, ip
   2dcd0:	bl	2ffbc <__assert_fail@plt+0x1e418>
   2dcd4:	cmp	r0, #0
   2dcd8:	beq	2dce8 <__assert_fail@plt+0x1c144>
   2dcdc:	ldr	r4, [sp]
   2dce0:	add	sp, sp, #4
   2dce4:	pop	{pc}		; (ldr pc, [sp], #4)
   2dce8:	bl	2e000 <__assert_fail@plt+0x1c45c>
   2dcec:	str	r4, [sp, #-8]!
   2dcf0:	str	lr, [sp, #4]
   2dcf4:	mov	r2, r1
   2dcf8:	mov	r1, r0
   2dcfc:	mov	r0, #0
   2dd00:	bl	2dc44 <__assert_fail@plt+0x1c0a0>
   2dd04:	ldr	r4, [sp]
   2dd08:	add	sp, sp, #4
   2dd0c:	pop	{pc}		; (ldr pc, [sp], #4)
   2dd10:	str	r4, [sp, #-8]!
   2dd14:	str	lr, [sp, #4]
   2dd18:	mov	r2, r1
   2dd1c:	mov	r1, r0
   2dd20:	mov	r0, #0
   2dd24:	bl	2dca8 <__assert_fail@plt+0x1c104>
   2dd28:	ldr	r4, [sp]
   2dd2c:	add	sp, sp, #4
   2dd30:	pop	{pc}		; (ldr pc, [sp], #4)
   2dd34:	strd	r4, [sp, #-16]!
   2dd38:	str	r6, [sp, #8]
   2dd3c:	str	lr, [sp, #12]
   2dd40:	mov	r5, r1
   2dd44:	ldr	r4, [r1]
   2dd48:	cmp	r0, #0
   2dd4c:	beq	2dd7c <__assert_fail@plt+0x1c1d8>
   2dd50:	lsr	r3, r4, #1
   2dd54:	add	r3, r3, #1
   2dd58:	adds	r4, r4, r3
   2dd5c:	bcs	2dd98 <__assert_fail@plt+0x1c1f4>
   2dd60:	mov	r1, r4
   2dd64:	bl	2dc44 <__assert_fail@plt+0x1c0a0>
   2dd68:	str	r4, [r5]
   2dd6c:	ldrd	r4, [sp]
   2dd70:	ldr	r6, [sp, #8]
   2dd74:	add	sp, sp, #12
   2dd78:	pop	{pc}		; (ldr pc, [sp], #4)
   2dd7c:	cmp	r4, #0
   2dd80:	bne	2dd60 <__assert_fail@plt+0x1c1bc>
   2dd84:	mov	r4, #64	; 0x40
   2dd88:	udiv	r4, r4, r2
   2dd8c:	cmp	r2, #64	; 0x40
   2dd90:	addhi	r4, r4, #1
   2dd94:	b	2dd60 <__assert_fail@plt+0x1c1bc>
   2dd98:	bl	2e000 <__assert_fail@plt+0x1c45c>
   2dd9c:	str	r4, [sp, #-8]!
   2dda0:	str	lr, [sp, #4]
   2dda4:	mov	r2, #1
   2dda8:	bl	2dd34 <__assert_fail@plt+0x1c190>
   2ddac:	ldr	r4, [sp]
   2ddb0:	add	sp, sp, #4
   2ddb4:	pop	{pc}		; (ldr pc, [sp], #4)
   2ddb8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2ddbc:	strd	r6, [sp, #8]
   2ddc0:	str	r8, [sp, #16]
   2ddc4:	str	lr, [sp, #20]
   2ddc8:	mov	r5, r1
   2ddcc:	ldr	lr, [sp, #24]
   2ddd0:	ldr	ip, [r1]
   2ddd4:	asr	r4, ip, #1
   2ddd8:	adds	r4, ip, r4
   2dddc:	movvs	r1, #1
   2dde0:	movvc	r1, #0
   2dde4:	cmp	r1, #0
   2dde8:	mvnne	r4, #-2147483648	; 0x80000000
   2ddec:	mvn	r8, r3
   2ddf0:	lsr	r8, r8, #31
   2ddf4:	cmp	r3, r4
   2ddf8:	movge	r1, #0
   2ddfc:	andlt	r1, r8, #1
   2de00:	cmp	r1, #0
   2de04:	movne	r4, r3
   2de08:	smull	r6, r7, r4, lr
   2de0c:	asr	r1, r6, #31
   2de10:	cmp	r1, r7
   2de14:	bne	2de2c <__assert_fail@plt+0x1c288>
   2de18:	mov	r1, r6
   2de1c:	cmp	r6, #63	; 0x3f
   2de20:	movle	r1, #64	; 0x40
   2de24:	ble	2de30 <__assert_fail@plt+0x1c28c>
   2de28:	b	2de3c <__assert_fail@plt+0x1c298>
   2de2c:	mvn	r1, #-2147483648	; 0x80000000
   2de30:	sdiv	r4, r1, lr
   2de34:	mls	r6, lr, r4, r1
   2de38:	sub	r1, r1, r6
   2de3c:	cmp	r0, #0
   2de40:	moveq	r6, #0
   2de44:	streq	r6, [r5]
   2de48:	sub	r6, r4, ip
   2de4c:	cmp	r6, r2
   2de50:	bge	2de88 <__assert_fail@plt+0x1c2e4>
   2de54:	adds	r2, ip, r2
   2de58:	mov	r4, r2
   2de5c:	bvs	2dea4 <__assert_fail@plt+0x1c300>
   2de60:	cmp	r2, r3
   2de64:	movle	r3, #0
   2de68:	andgt	r3, r8, #1
   2de6c:	cmp	r3, #0
   2de70:	bne	2dea4 <__assert_fail@plt+0x1c300>
   2de74:	smull	r2, r3, r2, lr
   2de78:	asr	ip, r2, #31
   2de7c:	mov	r1, r2
   2de80:	cmp	ip, r3
   2de84:	bne	2dea4 <__assert_fail@plt+0x1c300>
   2de88:	bl	2dbcc <__assert_fail@plt+0x1c028>
   2de8c:	str	r4, [r5]
   2de90:	ldrd	r4, [sp]
   2de94:	ldrd	r6, [sp, #8]
   2de98:	ldr	r8, [sp, #16]
   2de9c:	add	sp, sp, #20
   2dea0:	pop	{pc}		; (ldr pc, [sp], #4)
   2dea4:	bl	2e000 <__assert_fail@plt+0x1c45c>
   2dea8:	str	r4, [sp, #-8]!
   2deac:	str	lr, [sp, #4]
   2deb0:	bl	2ef9c <__assert_fail@plt+0x1d3f8>
   2deb4:	cmp	r0, #0
   2deb8:	beq	2dec8 <__assert_fail@plt+0x1c324>
   2debc:	ldr	r4, [sp]
   2dec0:	add	sp, sp, #4
   2dec4:	pop	{pc}		; (ldr pc, [sp], #4)
   2dec8:	bl	2e000 <__assert_fail@plt+0x1c45c>
   2decc:	str	r4, [sp, #-8]!
   2ded0:	str	lr, [sp, #4]
   2ded4:	mov	r1, #1
   2ded8:	bl	2dea8 <__assert_fail@plt+0x1c304>
   2dedc:	ldr	r4, [sp]
   2dee0:	add	sp, sp, #4
   2dee4:	pop	{pc}		; (ldr pc, [sp], #4)
   2dee8:	str	r4, [sp, #-8]!
   2deec:	str	lr, [sp, #4]
   2def0:	bl	2ef9c <__assert_fail@plt+0x1d3f8>
   2def4:	cmp	r0, #0
   2def8:	beq	2df08 <__assert_fail@plt+0x1c364>
   2defc:	ldr	r4, [sp]
   2df00:	add	sp, sp, #4
   2df04:	pop	{pc}		; (ldr pc, [sp], #4)
   2df08:	bl	2e000 <__assert_fail@plt+0x1c45c>
   2df0c:	str	r4, [sp, #-8]!
   2df10:	str	lr, [sp, #4]
   2df14:	mov	r1, #1
   2df18:	bl	2dee8 <__assert_fail@plt+0x1c344>
   2df1c:	ldr	r4, [sp]
   2df20:	add	sp, sp, #4
   2df24:	pop	{pc}		; (ldr pc, [sp], #4)
   2df28:	strd	r4, [sp, #-16]!
   2df2c:	str	r6, [sp, #8]
   2df30:	str	lr, [sp, #12]
   2df34:	mov	r5, r0
   2df38:	mov	r4, r1
   2df3c:	mov	r0, r1
   2df40:	bl	2db6c <__assert_fail@plt+0x1bfc8>
   2df44:	mov	r2, r4
   2df48:	mov	r1, r5
   2df4c:	bl	11784 <memcpy@plt>
   2df50:	ldrd	r4, [sp]
   2df54:	ldr	r6, [sp, #8]
   2df58:	add	sp, sp, #12
   2df5c:	pop	{pc}		; (ldr pc, [sp], #4)
   2df60:	strd	r4, [sp, #-16]!
   2df64:	str	r6, [sp, #8]
   2df68:	str	lr, [sp, #12]
   2df6c:	mov	r5, r0
   2df70:	mov	r4, r1
   2df74:	mov	r0, r1
   2df78:	bl	2db90 <__assert_fail@plt+0x1bfec>
   2df7c:	mov	r2, r4
   2df80:	mov	r1, r5
   2df84:	bl	11784 <memcpy@plt>
   2df88:	ldrd	r4, [sp]
   2df8c:	ldr	r6, [sp, #8]
   2df90:	add	sp, sp, #12
   2df94:	pop	{pc}		; (ldr pc, [sp], #4)
   2df98:	strd	r4, [sp, #-16]!
   2df9c:	str	r6, [sp, #8]
   2dfa0:	str	lr, [sp, #12]
   2dfa4:	mov	r5, r0
   2dfa8:	mov	r4, r1
   2dfac:	add	r0, r1, #1
   2dfb0:	bl	2db90 <__assert_fail@plt+0x1bfec>
   2dfb4:	mov	r2, #0
   2dfb8:	strb	r2, [r0, r4]
   2dfbc:	mov	r2, r4
   2dfc0:	mov	r1, r5
   2dfc4:	bl	11784 <memcpy@plt>
   2dfc8:	ldrd	r4, [sp]
   2dfcc:	ldr	r6, [sp, #8]
   2dfd0:	add	sp, sp, #12
   2dfd4:	pop	{pc}		; (ldr pc, [sp], #4)
   2dfd8:	str	r4, [sp, #-8]!
   2dfdc:	str	lr, [sp, #4]
   2dfe0:	mov	r4, r0
   2dfe4:	bl	11988 <strlen@plt>
   2dfe8:	add	r1, r0, #1
   2dfec:	mov	r0, r4
   2dff0:	bl	2df28 <__assert_fail@plt+0x1c384>
   2dff4:	ldr	r4, [sp]
   2dff8:	add	sp, sp, #4
   2dffc:	pop	{pc}		; (ldr pc, [sp], #4)
   2e000:	str	r4, [sp, #-8]!
   2e004:	str	lr, [sp, #4]
   2e008:	movw	r3, #12760	; 0x31d8
   2e00c:	movt	r3, #4
   2e010:	ldr	r4, [r3]
   2e014:	mov	r2, #5
   2e018:	movw	r1, #10608	; 0x2970
   2e01c:	movt	r1, #3
   2e020:	mov	r0, #0
   2e024:	bl	117d8 <dcgettext@plt>
   2e028:	mov	r3, r0
   2e02c:	movw	r2, #8212	; 0x2014
   2e030:	movt	r2, #3
   2e034:	mov	r1, #0
   2e038:	mov	r0, r4
   2e03c:	bl	118bc <error@plt>
   2e040:	bl	11b68 <abort@plt>
   2e044:	str	r4, [sp, #-8]!
   2e048:	str	lr, [sp, #4]
   2e04c:	orr	r1, r1, #512	; 0x200
   2e050:	bl	19078 <__assert_fail@plt+0x74d4>
   2e054:	cmp	r0, #0
   2e058:	beq	2e068 <__assert_fail@plt+0x1c4c4>
   2e05c:	ldr	r4, [sp]
   2e060:	add	sp, sp, #4
   2e064:	pop	{pc}		; (ldr pc, [sp], #4)
   2e068:	bl	119b8 <__errno_location@plt>
   2e06c:	ldr	r3, [r0]
   2e070:	cmp	r3, #22
   2e074:	beq	2e07c <__assert_fail@plt+0x1c4d8>
   2e078:	bl	2e000 <__assert_fail@plt+0x1c45c>
   2e07c:	movw	r3, #10628	; 0x2984
   2e080:	movt	r3, #3
   2e084:	mov	r2, #41	; 0x29
   2e088:	movw	r1, #10640	; 0x2990
   2e08c:	movt	r1, #3
   2e090:	movw	r0, #10652	; 0x299c
   2e094:	movt	r0, #3
   2e098:	bl	11ba4 <__assert_fail@plt>
   2e09c:	ldr	r3, [r0, #48]	; 0x30
   2e0a0:	and	r3, r3, #17
   2e0a4:	cmp	r3, #16
   2e0a8:	beq	2e0cc <__assert_fail@plt+0x1c528>
   2e0ac:	cmp	r3, #17
   2e0b0:	beq	2e0bc <__assert_fail@plt+0x1c518>
   2e0b4:	mov	r0, #0
   2e0b8:	bx	lr
   2e0bc:	ldr	r0, [r1, #48]	; 0x30
   2e0c0:	adds	r0, r0, #0
   2e0c4:	movne	r0, #1
   2e0c8:	bx	lr
   2e0cc:	mov	r0, #1
   2e0d0:	bx	lr
   2e0d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2e0d8:	strd	r6, [sp, #8]
   2e0dc:	strd	r8, [sp, #16]
   2e0e0:	strd	sl, [sp, #24]
   2e0e4:	str	lr, [sp, #32]
   2e0e8:	sub	sp, sp, #20
   2e0ec:	cmp	r2, #0
   2e0f0:	beq	2e208 <__assert_fail@plt+0x1c664>
   2e0f4:	sub	ip, r2, #1
   2e0f8:	mov	lr, #0
   2e0fc:	mov	r2, r1
   2e100:	asr	r3, r1, #31
   2e104:	strd	r2, [sp, #8]
   2e108:	mov	r8, lr
   2e10c:	b	2e1b0 <__assert_fail@plt+0x1c60c>
   2e110:	umull	r4, r5, r2, r1
   2e114:	umull	r6, r7, r1, r3
   2e118:	strd	r6, [sp]
   2e11c:	cmp	r3, #0
   2e120:	bge	2e13c <__assert_fail@plt+0x1c598>
   2e124:	mov	sl, #0
   2e128:	subs	r6, r6, sl
   2e12c:	str	r6, [sp]
   2e130:	ldr	r6, [sp, #4]
   2e134:	sbc	r6, r6, r1
   2e138:	str	r6, [sp, #4]
   2e13c:	cmp	r1, #0
   2e140:	bge	2e15c <__assert_fail@plt+0x1c5b8>
   2e144:	ldr	r6, [sp]
   2e148:	subs	r6, r6, r2
   2e14c:	str	r6, [sp]
   2e150:	ldr	r6, [sp, #4]
   2e154:	sbc	r6, r6, r3
   2e158:	str	r6, [sp, #4]
   2e15c:	mov	sl, #0
   2e160:	ldr	r6, [sp]
   2e164:	adds	r6, r6, r5
   2e168:	ldr	r7, [sp, #4]
   2e16c:	adc	sl, r7, sl
   2e170:	cmp	sl, r6, asr #31
   2e174:	bne	2e180 <__assert_fail@plt+0x1c5dc>
   2e178:	mov	r5, r6
   2e17c:	b	2e1cc <__assert_fail@plt+0x1c628>
   2e180:	ldr	r4, [sp, #12]
   2e184:	mul	r5, r2, r4
   2e188:	mla	r6, r1, r3, r5
   2e18c:	umull	sl, fp, r2, r1
   2e190:	add	r5, r6, fp
   2e194:	mov	r4, sl
   2e198:	mov	r9, #1
   2e19c:	b	2e1cc <__assert_fail@plt+0x1c628>
   2e1a0:	orr	lr, lr, r3
   2e1a4:	sub	ip, ip, #1
   2e1a8:	cmn	ip, #1
   2e1ac:	beq	2e20c <__assert_fail@plt+0x1c668>
   2e1b0:	ldrd	r2, [r0]
   2e1b4:	mov	r9, r8
   2e1b8:	cmp	r3, r2, asr #31
   2e1bc:	bne	2e110 <__assert_fail@plt+0x1c56c>
   2e1c0:	smull	r6, r7, r2, r1
   2e1c4:	mov	r4, r6
   2e1c8:	mov	r5, r7
   2e1cc:	cmp	r9, #0
   2e1d0:	streq	r4, [r0]
   2e1d4:	streq	r5, [r0, #4]
   2e1d8:	moveq	r3, r8
   2e1dc:	beq	2e1a0 <__assert_fail@plt+0x1c5fc>
   2e1e0:	cmp	r2, #0
   2e1e4:	sbcs	r3, r3, #0
   2e1e8:	mvnge	r2, #0
   2e1ec:	mvnge	r3, #-2147483648	; 0x80000000
   2e1f0:	movlt	r2, #0
   2e1f4:	movlt	r3, #-2147483648	; 0x80000000
   2e1f8:	str	r2, [r0]
   2e1fc:	str	r3, [r0, #4]
   2e200:	mov	r3, #1
   2e204:	b	2e1a0 <__assert_fail@plt+0x1c5fc>
   2e208:	mov	lr, #0
   2e20c:	mov	r0, lr
   2e210:	add	sp, sp, #20
   2e214:	ldrd	r4, [sp]
   2e218:	ldrd	r6, [sp, #8]
   2e21c:	ldrd	r8, [sp, #16]
   2e220:	ldrd	sl, [sp, #24]
   2e224:	add	sp, sp, #32
   2e228:	pop	{pc}		; (ldr pc, [sp], #4)
   2e22c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2e230:	strd	r6, [sp, #8]
   2e234:	strd	r8, [sp, #16]
   2e238:	strd	sl, [sp, #24]
   2e23c:	str	lr, [sp, #32]
   2e240:	sub	sp, sp, #20
   2e244:	cmp	r2, #36	; 0x24
   2e248:	bhi	2e2b4 <__assert_fail@plt+0x1c710>
   2e24c:	mov	r5, r0
   2e250:	mov	r4, r1
   2e254:	mov	r6, r2
   2e258:	mov	r8, r3
   2e25c:	cmp	r1, #0
   2e260:	addeq	r4, sp, #12
   2e264:	bl	119b8 <__errno_location@plt>
   2e268:	mov	r7, r0
   2e26c:	mov	r3, #0
   2e270:	str	r3, [r0]
   2e274:	mov	r2, r6
   2e278:	mov	r1, r4
   2e27c:	mov	r0, r5
   2e280:	bl	11af0 <__strtoll_internal@plt>
   2e284:	strd	r0, [sp]
   2e288:	ldr	r6, [r4]
   2e28c:	cmp	r6, r5
   2e290:	beq	2e2d4 <__assert_fail@plt+0x1c730>
   2e294:	ldr	r3, [r7]
   2e298:	cmp	r3, #0
   2e29c:	beq	2e3f8 <__assert_fail@plt+0x1c854>
   2e2a0:	cmp	r3, #34	; 0x22
   2e2a4:	moveq	r5, #1
   2e2a8:	beq	2e3fc <__assert_fail@plt+0x1c858>
   2e2ac:	mov	r5, #4
   2e2b0:	b	2e420 <__assert_fail@plt+0x1c87c>
   2e2b4:	movw	r3, #10668	; 0x29ac
   2e2b8:	movt	r3, #3
   2e2bc:	mov	r2, #85	; 0x55
   2e2c0:	movw	r1, #10680	; 0x29b8
   2e2c4:	movt	r1, #3
   2e2c8:	movw	r0, #10696	; 0x29c8
   2e2cc:	movt	r0, #3
   2e2d0:	bl	11ba4 <__assert_fail@plt>
   2e2d4:	ldr	r3, [sp, #56]	; 0x38
   2e2d8:	cmp	r3, #0
   2e2dc:	beq	2e858 <__assert_fail@plt+0x1ccb4>
   2e2e0:	ldrb	r1, [r5]
   2e2e4:	cmp	r1, #0
   2e2e8:	moveq	r5, #4
   2e2ec:	beq	2e420 <__assert_fail@plt+0x1c87c>
   2e2f0:	mov	r0, r3
   2e2f4:	bl	11994 <strchr@plt>
   2e2f8:	cmp	r0, #0
   2e2fc:	beq	2e860 <__assert_fail@plt+0x1ccbc>
   2e300:	mov	r2, #1
   2e304:	mov	r3, #0
   2e308:	strd	r2, [sp]
   2e30c:	ldrb	r7, [r6]
   2e310:	mov	r5, #0
   2e314:	mov	r1, r7
   2e318:	ldr	r0, [sp, #56]	; 0x38
   2e31c:	bl	11994 <strchr@plt>
   2e320:	cmp	r0, #0
   2e324:	beq	2e440 <__assert_fail@plt+0x1c89c>
   2e328:	sub	r3, r7, #69	; 0x45
   2e32c:	cmp	r3, #47	; 0x2f
   2e330:	ldrls	pc, [pc, r3, lsl #2]
   2e334:	b	2e58c <__assert_fail@plt+0x1c9e8>
   2e338:	andeq	lr, r2, r0, asr r4
   2e33c:	andeq	lr, r2, ip, lsl #11
   2e340:	andeq	lr, r2, r0, asr r4
   2e344:	andeq	lr, r2, ip, lsl #11
   2e348:	andeq	lr, r2, ip, lsl #11
   2e34c:	andeq	lr, r2, ip, lsl #11
   2e350:	andeq	lr, r2, r0, asr r4
   2e354:	andeq	lr, r2, ip, lsl #11
   2e358:	andeq	lr, r2, r0, asr r4
   2e35c:	andeq	lr, r2, ip, lsl #11
   2e360:	andeq	lr, r2, ip, lsl #11
   2e364:	andeq	lr, r2, r0, asr r4
   2e368:	andeq	lr, r2, ip, lsl #11
   2e36c:	andeq	lr, r2, ip, lsl #11
   2e370:	andeq	lr, r2, ip, lsl #11
   2e374:	andeq	lr, r2, r0, asr r4
   2e378:	andeq	lr, r2, ip, lsl #11
   2e37c:	andeq	lr, r2, ip, lsl #11
   2e380:	andeq	lr, r2, ip, lsl #11
   2e384:	andeq	lr, r2, ip, lsl #11
   2e388:	andeq	lr, r2, r0, asr r4
   2e38c:	andeq	lr, r2, r0, asr r4
   2e390:	andeq	lr, r2, ip, lsl #11
   2e394:	andeq	lr, r2, ip, lsl #11
   2e398:	andeq	lr, r2, ip, lsl #11
   2e39c:	andeq	lr, r2, ip, lsl #11
   2e3a0:	andeq	lr, r2, ip, lsl #11
   2e3a4:	andeq	lr, r2, ip, lsl #11
   2e3a8:	andeq	lr, r2, ip, lsl #11
   2e3ac:	andeq	lr, r2, ip, lsl #11
   2e3b0:	andeq	lr, r2, ip, lsl #11
   2e3b4:	andeq	lr, r2, ip, lsl #11
   2e3b8:	andeq	lr, r2, ip, lsl #11
   2e3bc:	andeq	lr, r2, ip, lsl #11
   2e3c0:	andeq	lr, r2, r0, asr r4
   2e3c4:	andeq	lr, r2, ip, lsl #11
   2e3c8:	andeq	lr, r2, ip, lsl #11
   2e3cc:	andeq	lr, r2, ip, lsl #11
   2e3d0:	andeq	lr, r2, r0, asr r4
   2e3d4:	andeq	lr, r2, ip, lsl #11
   2e3d8:	andeq	lr, r2, r0, asr r4
   2e3dc:	andeq	lr, r2, ip, lsl #11
   2e3e0:	andeq	lr, r2, ip, lsl #11
   2e3e4:	andeq	lr, r2, ip, lsl #11
   2e3e8:	andeq	lr, r2, ip, lsl #11
   2e3ec:	andeq	lr, r2, ip, lsl #11
   2e3f0:	andeq	lr, r2, ip, lsl #11
   2e3f4:	andeq	lr, r2, r0, asr r4
   2e3f8:	mov	r5, #0
   2e3fc:	ldr	r3, [sp, #56]	; 0x38
   2e400:	cmp	r3, #0
   2e404:	strdeq	r0, [r8]
   2e408:	beq	2e420 <__assert_fail@plt+0x1c87c>
   2e40c:	ldrb	r7, [r6]
   2e410:	cmp	r7, #0
   2e414:	bne	2e314 <__assert_fail@plt+0x1c770>
   2e418:	ldrd	r2, [sp]
   2e41c:	strd	r2, [r8]
   2e420:	mov	r0, r5
   2e424:	add	sp, sp, #20
   2e428:	ldrd	r4, [sp]
   2e42c:	ldrd	r6, [sp, #8]
   2e430:	ldrd	r8, [sp, #16]
   2e434:	ldrd	sl, [sp, #24]
   2e438:	add	sp, sp, #32
   2e43c:	pop	{pc}		; (ldr pc, [sp], #4)
   2e440:	ldrd	r2, [sp]
   2e444:	strd	r2, [r8]
   2e448:	orr	r5, r5, #2
   2e44c:	b	2e420 <__assert_fail@plt+0x1c87c>
   2e450:	mov	r1, #48	; 0x30
   2e454:	ldr	r0, [sp, #56]	; 0x38
   2e458:	bl	11994 <strchr@plt>
   2e45c:	cmp	r0, #0
   2e460:	beq	2e598 <__assert_fail@plt+0x1c9f4>
   2e464:	ldrb	r3, [r6, #1]
   2e468:	cmp	r3, #68	; 0x44
   2e46c:	beq	2e5a4 <__assert_fail@plt+0x1ca00>
   2e470:	cmp	r3, #105	; 0x69
   2e474:	beq	2e574 <__assert_fail@plt+0x1c9d0>
   2e478:	cmp	r3, #66	; 0x42
   2e47c:	moveq	r6, #2
   2e480:	movne	r6, #1
   2e484:	moveq	r1, #1000	; 0x3e8
   2e488:	movne	r1, #1024	; 0x400
   2e48c:	sub	r7, r7, #66	; 0x42
   2e490:	cmp	r7, #53	; 0x35
   2e494:	ldrls	pc, [pc, r7, lsl #2]
   2e498:	b	2e824 <__assert_fail@plt+0x1cc80>
   2e49c:	andeq	lr, r2, r4, asr r6
   2e4a0:	andeq	lr, r2, r4, lsr #16
   2e4a4:	andeq	lr, r2, r4, lsr #16
   2e4a8:	strdeq	lr, [r2], -r8
   2e4ac:	andeq	lr, r2, r4, lsr #16
   2e4b0:	andeq	lr, r2, r8, lsl #14
   2e4b4:	andeq	lr, r2, r4, lsr #16
   2e4b8:	andeq	lr, r2, r4, lsr #16
   2e4bc:	andeq	lr, r2, r4, lsr #16
   2e4c0:	andeq	lr, r2, r8, lsl r7
   2e4c4:	andeq	lr, r2, r4, lsr #16
   2e4c8:	andeq	lr, r2, r8, lsr #14
   2e4cc:	andeq	lr, r2, r4, lsr #16
   2e4d0:	andeq	lr, r2, r4, lsr #16
   2e4d4:	andeq	lr, r2, r8, lsr r7
   2e4d8:	andeq	lr, r2, r4, lsr #16
   2e4dc:	andeq	lr, r2, r4, lsr #16
   2e4e0:	andeq	lr, r2, r4, lsr #16
   2e4e4:	andeq	lr, r2, r8, asr #14
   2e4e8:	andeq	lr, r2, r4, lsr #16
   2e4ec:	andeq	lr, r2, r4, lsr #16
   2e4f0:	andeq	lr, r2, r4, lsr #16
   2e4f4:	andeq	lr, r2, r4, lsr #16
   2e4f8:	andeq	lr, r2, r4, lsl #16
   2e4fc:	andeq	lr, r2, r4, lsl r8
   2e500:	andeq	lr, r2, r4, lsr #16
   2e504:	andeq	lr, r2, r4, lsr #16
   2e508:	andeq	lr, r2, r4, lsr #16
   2e50c:	andeq	lr, r2, r4, lsr #16
   2e510:	andeq	lr, r2, r4, lsr #16
   2e514:	andeq	lr, r2, r4, lsr #16
   2e518:	andeq	lr, r2, r4, lsr #16
   2e51c:			; <UNDEFINED> instruction: 0x0002e5b0
   2e520:	andeq	lr, r2, r4, lsr r8
   2e524:	andeq	lr, r2, r4, lsr #16
   2e528:	andeq	lr, r2, r4, lsr #16
   2e52c:	andeq	lr, r2, r4, lsr #16
   2e530:	andeq	lr, r2, r8, lsl #14
   2e534:	andeq	lr, r2, r4, lsr #16
   2e538:	andeq	lr, r2, r4, lsr #16
   2e53c:	andeq	lr, r2, r4, lsr #16
   2e540:	andeq	lr, r2, r8, lsl r7
   2e544:	andeq	lr, r2, r4, lsr #16
   2e548:	andeq	lr, r2, r8, lsr #14
   2e54c:	andeq	lr, r2, r4, lsr #16
   2e550:	andeq	lr, r2, r4, lsr #16
   2e554:	andeq	lr, r2, r4, lsr #16
   2e558:	andeq	lr, r2, r4, lsr #16
   2e55c:	andeq	lr, r2, r4, lsr #16
   2e560:	andeq	lr, r2, r4, lsr #16
   2e564:	andeq	lr, r2, r8, asr #14
   2e568:	andeq	lr, r2, r4, lsr #16
   2e56c:	andeq	lr, r2, r4, lsr #16
   2e570:	andeq	lr, r2, r8, asr r7
   2e574:	ldrb	r3, [r6, #2]
   2e578:	cmp	r3, #66	; 0x42
   2e57c:	movne	r6, #1
   2e580:	moveq	r6, #3
   2e584:	mov	r1, #1024	; 0x400
   2e588:	b	2e48c <__assert_fail@plt+0x1c8e8>
   2e58c:	mov	r6, #1
   2e590:	mov	r1, #1024	; 0x400
   2e594:	b	2e48c <__assert_fail@plt+0x1c8e8>
   2e598:	mov	r6, #1
   2e59c:	mov	r1, #1024	; 0x400
   2e5a0:	b	2e48c <__assert_fail@plt+0x1c8e8>
   2e5a4:	mov	r6, #2
   2e5a8:	mov	r1, #1000	; 0x3e8
   2e5ac:	b	2e48c <__assert_fail@plt+0x1c8e8>
   2e5b0:	ldrd	r2, [sp]
   2e5b4:	mov	ip, #0
   2e5b8:	cmp	r3, r2, asr #31
   2e5bc:	bne	2e604 <__assert_fail@plt+0x1ca60>
   2e5c0:	lsl	r1, r3, #9
   2e5c4:	lsl	r0, r2, #9
   2e5c8:	orr	r1, r1, r2, lsr #23
   2e5cc:	cmp	ip, #0
   2e5d0:	streq	r0, [sp]
   2e5d4:	streq	r1, [sp, #4]
   2e5d8:	moveq	r0, #0
   2e5dc:	beq	2e838 <__assert_fail@plt+0x1cc94>
   2e5e0:	cmp	r2, #0
   2e5e4:	sbcs	r3, r3, #0
   2e5e8:	mvnge	r2, #0
   2e5ec:	mvnge	r3, #-2147483648	; 0x80000000
   2e5f0:	movlt	r2, #0
   2e5f4:	movlt	r3, #-2147483648	; 0x80000000
   2e5f8:	strd	r2, [sp]
   2e5fc:	mov	r0, #1
   2e600:	b	2e838 <__assert_fail@plt+0x1cc94>
   2e604:	mov	lr, #512	; 0x200
   2e608:	lsr	r7, r2, #23
   2e60c:	lsl	r0, r2, #9
   2e610:	umull	sl, fp, lr, r3
   2e614:	cmp	r3, #0
   2e618:	bge	2e628 <__assert_fail@plt+0x1ca84>
   2e61c:	mov	r1, #0
   2e620:	subs	sl, sl, r1
   2e624:	sbc	fp, fp, lr
   2e628:	mov	r1, #0
   2e62c:	mov	lr, r1
   2e630:	adds	r1, sl, r7
   2e634:	adc	lr, fp, lr
   2e638:	cmp	lr, r1, asr #31
   2e63c:	beq	2e5cc <__assert_fail@plt+0x1ca28>
   2e640:	lsl	r1, r3, #9
   2e644:	lsl	r0, r2, #9
   2e648:	orr	r1, r1, r2, lsr #23
   2e64c:	mov	ip, #1
   2e650:	b	2e5cc <__assert_fail@plt+0x1ca28>
   2e654:	ldrd	r2, [sp]
   2e658:	mov	ip, #0
   2e65c:	cmp	r3, r2, asr #31
   2e660:	bne	2e6a8 <__assert_fail@plt+0x1cb04>
   2e664:	lsl	r1, r3, #10
   2e668:	lsl	r0, r2, #10
   2e66c:	orr	r1, r1, r2, lsr #22
   2e670:	cmp	ip, #0
   2e674:	streq	r0, [sp]
   2e678:	streq	r1, [sp, #4]
   2e67c:	moveq	r0, #0
   2e680:	beq	2e838 <__assert_fail@plt+0x1cc94>
   2e684:	cmp	r2, #0
   2e688:	sbcs	r3, r3, #0
   2e68c:	mvnge	r2, #0
   2e690:	mvnge	r3, #-2147483648	; 0x80000000
   2e694:	movlt	r2, #0
   2e698:	movlt	r3, #-2147483648	; 0x80000000
   2e69c:	strd	r2, [sp]
   2e6a0:	mov	r0, #1
   2e6a4:	b	2e838 <__assert_fail@plt+0x1cc94>
   2e6a8:	mov	lr, #1024	; 0x400
   2e6ac:	lsr	r7, r2, #22
   2e6b0:	lsl	r0, r2, #10
   2e6b4:	umull	sl, fp, lr, r3
   2e6b8:	cmp	r3, #0
   2e6bc:	bge	2e6cc <__assert_fail@plt+0x1cb28>
   2e6c0:	mov	r1, #0
   2e6c4:	subs	sl, sl, r1
   2e6c8:	sbc	fp, fp, lr
   2e6cc:	mov	r1, #0
   2e6d0:	mov	lr, r1
   2e6d4:	adds	r1, sl, r7
   2e6d8:	adc	lr, fp, lr
   2e6dc:	cmp	lr, r1, asr #31
   2e6e0:	beq	2e670 <__assert_fail@plt+0x1cacc>
   2e6e4:	lsl	r1, r3, #10
   2e6e8:	lsl	r0, r2, #10
   2e6ec:	orr	r1, r1, r2, lsr #22
   2e6f0:	mov	ip, #1
   2e6f4:	b	2e670 <__assert_fail@plt+0x1cacc>
   2e6f8:	mov	r2, #6
   2e6fc:	mov	r0, sp
   2e700:	bl	2e0d4 <__assert_fail@plt+0x1c530>
   2e704:	b	2e838 <__assert_fail@plt+0x1cc94>
   2e708:	mov	r2, #3
   2e70c:	mov	r0, sp
   2e710:	bl	2e0d4 <__assert_fail@plt+0x1c530>
   2e714:	b	2e838 <__assert_fail@plt+0x1cc94>
   2e718:	mov	r2, #1
   2e71c:	mov	r0, sp
   2e720:	bl	2e0d4 <__assert_fail@plt+0x1c530>
   2e724:	b	2e838 <__assert_fail@plt+0x1cc94>
   2e728:	mov	r2, #2
   2e72c:	mov	r0, sp
   2e730:	bl	2e0d4 <__assert_fail@plt+0x1c530>
   2e734:	b	2e838 <__assert_fail@plt+0x1cc94>
   2e738:	mov	r2, #5
   2e73c:	mov	r0, sp
   2e740:	bl	2e0d4 <__assert_fail@plt+0x1c530>
   2e744:	b	2e838 <__assert_fail@plt+0x1cc94>
   2e748:	mov	r2, #4
   2e74c:	mov	r0, sp
   2e750:	bl	2e0d4 <__assert_fail@plt+0x1c530>
   2e754:	b	2e838 <__assert_fail@plt+0x1cc94>
   2e758:	ldrd	r2, [sp]
   2e75c:	mov	lr, #0
   2e760:	cmp	r3, r2, asr #31
   2e764:	bne	2e7a8 <__assert_fail@plt+0x1cc04>
   2e768:	adds	r0, r2, r2
   2e76c:	adc	r1, r3, r3
   2e770:	cmp	lr, #0
   2e774:	streq	r0, [sp]
   2e778:	streq	r1, [sp, #4]
   2e77c:	moveq	r0, #0
   2e780:	beq	2e838 <__assert_fail@plt+0x1cc94>
   2e784:	cmp	r2, #0
   2e788:	sbcs	r3, r3, #0
   2e78c:	mvnge	r2, #0
   2e790:	mvnge	r3, #-2147483648	; 0x80000000
   2e794:	movlt	r2, #0
   2e798:	movlt	r3, #-2147483648	; 0x80000000
   2e79c:	strd	r2, [sp]
   2e7a0:	mov	r0, #1
   2e7a4:	b	2e838 <__assert_fail@plt+0x1cc94>
   2e7a8:	mov	ip, #2
   2e7ac:	mov	r1, #0
   2e7b0:	adds	r7, r2, r2
   2e7b4:	adc	sl, r1, r1
   2e7b8:	umull	r0, r1, ip, r3
   2e7bc:	cmp	r3, #0
   2e7c0:	bge	2e7d0 <__assert_fail@plt+0x1cc2c>
   2e7c4:	mov	r9, #0
   2e7c8:	subs	r0, r0, r9
   2e7cc:	sbc	r1, r1, ip
   2e7d0:	mov	ip, #0
   2e7d4:	mov	r9, ip
   2e7d8:	adds	ip, r0, sl
   2e7dc:	adc	r9, r1, r9
   2e7e0:	cmp	r9, ip, asr #31
   2e7e4:	bne	2e7f4 <__assert_fail@plt+0x1cc50>
   2e7e8:	mov	r0, r7
   2e7ec:	mov	r1, ip
   2e7f0:	b	2e770 <__assert_fail@plt+0x1cbcc>
   2e7f4:	adds	r0, r2, r2
   2e7f8:	adc	r1, r3, r3
   2e7fc:	mov	lr, #1
   2e800:	b	2e770 <__assert_fail@plt+0x1cbcc>
   2e804:	mov	r2, #8
   2e808:	mov	r0, sp
   2e80c:	bl	2e0d4 <__assert_fail@plt+0x1c530>
   2e810:	b	2e838 <__assert_fail@plt+0x1cc94>
   2e814:	mov	r2, #7
   2e818:	mov	r0, sp
   2e81c:	bl	2e0d4 <__assert_fail@plt+0x1c530>
   2e820:	b	2e838 <__assert_fail@plt+0x1cc94>
   2e824:	ldrd	r2, [sp]
   2e828:	strd	r2, [r8]
   2e82c:	orr	r5, r5, #2
   2e830:	b	2e420 <__assert_fail@plt+0x1c87c>
   2e834:	mov	r0, #0
   2e838:	orr	r5, r5, r0
   2e83c:	ldr	r3, [r4]
   2e840:	add	r2, r3, r6
   2e844:	str	r2, [r4]
   2e848:	ldrb	r3, [r3, r6]
   2e84c:	cmp	r3, #0
   2e850:	orrne	r5, r5, #2
   2e854:	b	2e418 <__assert_fail@plt+0x1c874>
   2e858:	mov	r5, #4
   2e85c:	b	2e420 <__assert_fail@plt+0x1c87c>
   2e860:	mov	r5, #4
   2e864:	b	2e420 <__assert_fail@plt+0x1c87c>
   2e868:	push	{lr}		; (str lr, [sp, #-4]!)
   2e86c:	sub	sp, sp, #20
   2e870:	movw	ip, #12760	; 0x31d8
   2e874:	movt	ip, #4
   2e878:	ldr	r5, [ip]
   2e87c:	sub	r0, r0, #1
   2e880:	cmp	r0, #3
   2e884:	ldrls	pc, [pc, r0, lsl #2]
   2e888:	b	2e8a8 <__assert_fail@plt+0x1cd04>
   2e88c:	andeq	lr, r2, ip, lsr #17
   2e890:	muleq	r2, ip, r8
   2e894:	muleq	r2, ip, r8
   2e898:			; <UNDEFINED> instruction: 0x0002e8b8
   2e89c:	movw	r0, #10796	; 0x2a2c
   2e8a0:	movt	r0, #3
   2e8a4:	b	2e8c0 <__assert_fail@plt+0x1cd1c>
   2e8a8:	bl	11b68 <abort@plt>
   2e8ac:	movw	r0, #10736	; 0x29f0
   2e8b0:	movt	r0, #3
   2e8b4:	b	2e8c0 <__assert_fail@plt+0x1cd1c>
   2e8b8:	movw	r0, #10768	; 0x2a10
   2e8bc:	movt	r0, #3
   2e8c0:	cmp	r1, #0
   2e8c4:	blt	2e908 <__assert_fail@plt+0x1cd64>
   2e8c8:	ldr	r6, [r3, r1, lsl #4]
   2e8cc:	movw	r4, #10836	; 0x2a54
   2e8d0:	movt	r4, #3
   2e8d4:	mov	r2, #5
   2e8d8:	mov	r1, r0
   2e8dc:	mov	r0, #0
   2e8e0:	bl	117d8 <dcgettext@plt>
   2e8e4:	ldr	r3, [sp, #24]
   2e8e8:	str	r3, [sp, #4]
   2e8ec:	str	r6, [sp]
   2e8f0:	mov	r3, r4
   2e8f4:	mov	r2, r0
   2e8f8:	mov	r1, #0
   2e8fc:	mov	r0, r5
   2e900:	bl	118bc <error@plt>
   2e904:	bl	11b68 <abort@plt>
   2e908:	movw	r4, #10836	; 0x2a54
   2e90c:	movt	r4, #3
   2e910:	sub	r4, r4, r1
   2e914:	strb	r2, [sp, #12]
   2e918:	mov	r3, #0
   2e91c:	strb	r3, [sp, #13]
   2e920:	add	r6, sp, #12
   2e924:	b	2e8d4 <__assert_fail@plt+0x1cd30>
   2e928:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2e92c:	strd	r6, [sp, #8]
   2e930:	strd	r8, [sp, #16]
   2e934:	strd	sl, [sp, #24]
   2e938:	str	lr, [sp, #32]
   2e93c:	sub	sp, sp, #12
   2e940:	str	r0, [sp, #4]
   2e944:	cmp	r2, #0
   2e948:	beq	2ea44 <__assert_fail@plt+0x1cea0>
   2e94c:	sub	ip, r2, #1
   2e950:	ldrd	r2, [r0]
   2e954:	mov	r0, #0
   2e958:	mov	r8, r1
   2e95c:	asr	r9, r1, #31
   2e960:	str	r1, [sp]
   2e964:	b	2e9b4 <__assert_fail@plt+0x1ce10>
   2e968:	orrs	r4, r2, r3
   2e96c:	movne	lr, #1
   2e970:	b	2e9c4 <__assert_fail@plt+0x1ce20>
   2e974:	mov	sl, r3
   2e978:	ldr	fp, [sp]
   2e97c:	umull	r6, r7, r1, r2
   2e980:	mov	r4, r7
   2e984:	mov	r5, #0
   2e988:	umlal	r4, r5, sl, fp
   2e98c:	cmp	r5, #0
   2e990:	bne	2e9f8 <__assert_fail@plt+0x1ce54>
   2e994:	cmp	lr, #0
   2e998:	bne	2ea10 <__assert_fail@plt+0x1ce6c>
   2e99c:	mov	r2, r6
   2e9a0:	mov	r3, r4
   2e9a4:	orr	r0, r0, lr
   2e9a8:	sub	ip, ip, #1
   2e9ac:	cmn	ip, #1
   2e9b0:	beq	2ea20 <__assert_fail@plt+0x1ce7c>
   2e9b4:	mov	lr, #0
   2e9b8:	cmp	r8, #0
   2e9bc:	sbcs	r4, r9, #0
   2e9c0:	blt	2e968 <__assert_fail@plt+0x1cdc4>
   2e9c4:	cmp	r9, #0
   2e9c8:	bne	2e9e4 <__assert_fail@plt+0x1ce40>
   2e9cc:	cmp	r3, #0
   2e9d0:	bne	2e974 <__assert_fail@plt+0x1cdd0>
   2e9d4:	umull	r2, r3, r1, r2
   2e9d8:	mov	r6, r2
   2e9dc:	mov	r4, r3
   2e9e0:	b	2e994 <__assert_fail@plt+0x1cdf0>
   2e9e4:	cmp	r3, #0
   2e9e8:	bne	2e9f8 <__assert_fail@plt+0x1ce54>
   2e9ec:	mov	sl, r9
   2e9f0:	mov	fp, r2
   2e9f4:	b	2e97c <__assert_fail@plt+0x1cdd8>
   2e9f8:	mul	r4, r1, r3
   2e9fc:	mla	r4, r2, r9, r4
   2ea00:	umull	r6, r7, r1, r2
   2ea04:	add	r4, r4, r7
   2ea08:	mov	lr, #1
   2ea0c:	b	2e994 <__assert_fail@plt+0x1cdf0>
   2ea10:	mvn	r2, #0
   2ea14:	mvn	r3, #0
   2ea18:	mov	lr, #1
   2ea1c:	b	2e9a4 <__assert_fail@plt+0x1ce00>
   2ea20:	ldr	r1, [sp, #4]
   2ea24:	strd	r2, [r1]
   2ea28:	add	sp, sp, #12
   2ea2c:	ldrd	r4, [sp]
   2ea30:	ldrd	r6, [sp, #8]
   2ea34:	ldrd	r8, [sp, #16]
   2ea38:	ldrd	sl, [sp, #24]
   2ea3c:	add	sp, sp, #32
   2ea40:	pop	{pc}		; (ldr pc, [sp], #4)
   2ea44:	mov	r0, #0
   2ea48:	b	2ea28 <__assert_fail@plt+0x1ce84>
   2ea4c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2ea50:	strd	r6, [sp, #8]
   2ea54:	strd	r8, [sp, #16]
   2ea58:	str	lr, [sp, #24]
   2ea5c:	sub	sp, sp, #20
   2ea60:	cmp	r2, #36	; 0x24
   2ea64:	bhi	2eab8 <__assert_fail@plt+0x1cf14>
   2ea68:	mov	r5, r0
   2ea6c:	mov	r6, r1
   2ea70:	mov	r7, r2
   2ea74:	mov	r9, r3
   2ea78:	cmp	r1, #0
   2ea7c:	addeq	r6, sp, #12
   2ea80:	bl	119b8 <__errno_location@plt>
   2ea84:	mov	r8, r0
   2ea88:	mov	r3, #0
   2ea8c:	str	r3, [r0]
   2ea90:	ldrb	r4, [r5]
   2ea94:	bl	11964 <__ctype_b_loc@plt>
   2ea98:	ldr	r1, [r0]
   2ea9c:	mov	r2, r5
   2eaa0:	lsl	r3, r4, #1
   2eaa4:	ldrh	r3, [r1, r3]
   2eaa8:	tst	r3, #8192	; 0x2000
   2eaac:	beq	2ead8 <__assert_fail@plt+0x1cf34>
   2eab0:	ldrb	r4, [r2, #1]!
   2eab4:	b	2eaa0 <__assert_fail@plt+0x1cefc>
   2eab8:	movw	r3, #10840	; 0x2a58
   2eabc:	movt	r3, #3
   2eac0:	mov	r2, #85	; 0x55
   2eac4:	movw	r1, #10680	; 0x29b8
   2eac8:	movt	r1, #3
   2eacc:	movw	r0, #10696	; 0x29c8
   2ead0:	movt	r0, #3
   2ead4:	bl	11ba4 <__assert_fail@plt>
   2ead8:	cmp	r4, #45	; 0x2d
   2eadc:	moveq	r4, #4
   2eae0:	beq	2ec74 <__assert_fail@plt+0x1d0d0>
   2eae4:	mov	r3, #0
   2eae8:	mov	r2, r7
   2eaec:	mov	r1, r6
   2eaf0:	mov	r0, r5
   2eaf4:	bl	1179c <__strtoull_internal@plt>
   2eaf8:	strd	r0, [sp]
   2eafc:	ldr	r7, [r6]
   2eb00:	cmp	r7, r5
   2eb04:	beq	2eb28 <__assert_fail@plt+0x1cf84>
   2eb08:	ldr	r3, [r8]
   2eb0c:	cmp	r3, #0
   2eb10:	beq	2ec4c <__assert_fail@plt+0x1d0a8>
   2eb14:	cmp	r3, #34	; 0x22
   2eb18:	moveq	r4, #1
   2eb1c:	beq	2ec50 <__assert_fail@plt+0x1d0ac>
   2eb20:	mov	r4, #4
   2eb24:	b	2ec74 <__assert_fail@plt+0x1d0d0>
   2eb28:	ldr	r3, [sp, #48]	; 0x30
   2eb2c:	cmp	r3, #0
   2eb30:	beq	2ef8c <__assert_fail@plt+0x1d3e8>
   2eb34:	ldrb	r1, [r5]
   2eb38:	cmp	r1, #0
   2eb3c:	moveq	r4, #4
   2eb40:	beq	2ec74 <__assert_fail@plt+0x1d0d0>
   2eb44:	mov	r0, r3
   2eb48:	bl	11994 <strchr@plt>
   2eb4c:	cmp	r0, #0
   2eb50:	beq	2ef94 <__assert_fail@plt+0x1d3f0>
   2eb54:	mov	r2, #1
   2eb58:	mov	r3, #0
   2eb5c:	strd	r2, [sp]
   2eb60:	ldrb	r5, [r7]
   2eb64:	mov	r4, #0
   2eb68:	mov	r1, r5
   2eb6c:	ldr	r0, [sp, #48]	; 0x30
   2eb70:	bl	11994 <strchr@plt>
   2eb74:	cmp	r0, #0
   2eb78:	beq	2ec90 <__assert_fail@plt+0x1d0ec>
   2eb7c:	sub	r3, r5, #69	; 0x45
   2eb80:	cmp	r3, #47	; 0x2f
   2eb84:	ldrls	pc, [pc, r3, lsl #2]
   2eb88:	b	2eddc <__assert_fail@plt+0x1d238>
   2eb8c:	andeq	lr, r2, r0, lsr #25
   2eb90:	ldrdeq	lr, [r2], -ip
   2eb94:	andeq	lr, r2, r0, lsr #25
   2eb98:	ldrdeq	lr, [r2], -ip
   2eb9c:	ldrdeq	lr, [r2], -ip
   2eba0:	ldrdeq	lr, [r2], -ip
   2eba4:	andeq	lr, r2, r0, lsr #25
   2eba8:	ldrdeq	lr, [r2], -ip
   2ebac:	andeq	lr, r2, r0, lsr #25
   2ebb0:	ldrdeq	lr, [r2], -ip
   2ebb4:	ldrdeq	lr, [r2], -ip
   2ebb8:	andeq	lr, r2, r0, lsr #25
   2ebbc:	ldrdeq	lr, [r2], -ip
   2ebc0:	ldrdeq	lr, [r2], -ip
   2ebc4:	ldrdeq	lr, [r2], -ip
   2ebc8:	andeq	lr, r2, r0, lsr #25
   2ebcc:	ldrdeq	lr, [r2], -ip
   2ebd0:	ldrdeq	lr, [r2], -ip
   2ebd4:	ldrdeq	lr, [r2], -ip
   2ebd8:	ldrdeq	lr, [r2], -ip
   2ebdc:	andeq	lr, r2, r0, lsr #25
   2ebe0:	andeq	lr, r2, r0, lsr #25
   2ebe4:	ldrdeq	lr, [r2], -ip
   2ebe8:	ldrdeq	lr, [r2], -ip
   2ebec:	ldrdeq	lr, [r2], -ip
   2ebf0:	ldrdeq	lr, [r2], -ip
   2ebf4:	ldrdeq	lr, [r2], -ip
   2ebf8:	ldrdeq	lr, [r2], -ip
   2ebfc:	ldrdeq	lr, [r2], -ip
   2ec00:	ldrdeq	lr, [r2], -ip
   2ec04:	ldrdeq	lr, [r2], -ip
   2ec08:	ldrdeq	lr, [r2], -ip
   2ec0c:	ldrdeq	lr, [r2], -ip
   2ec10:	ldrdeq	lr, [r2], -ip
   2ec14:	andeq	lr, r2, r0, lsr #25
   2ec18:	ldrdeq	lr, [r2], -ip
   2ec1c:	ldrdeq	lr, [r2], -ip
   2ec20:	ldrdeq	lr, [r2], -ip
   2ec24:	andeq	lr, r2, r0, lsr #25
   2ec28:	ldrdeq	lr, [r2], -ip
   2ec2c:	andeq	lr, r2, r0, lsr #25
   2ec30:	ldrdeq	lr, [r2], -ip
   2ec34:	ldrdeq	lr, [r2], -ip
   2ec38:	ldrdeq	lr, [r2], -ip
   2ec3c:	ldrdeq	lr, [r2], -ip
   2ec40:	ldrdeq	lr, [r2], -ip
   2ec44:	ldrdeq	lr, [r2], -ip
   2ec48:	andeq	lr, r2, r0, lsr #25
   2ec4c:	mov	r4, #0
   2ec50:	ldr	r3, [sp, #48]	; 0x30
   2ec54:	cmp	r3, #0
   2ec58:	strdeq	r0, [r9]
   2ec5c:	beq	2ec74 <__assert_fail@plt+0x1d0d0>
   2ec60:	ldrb	r5, [r7]
   2ec64:	cmp	r5, #0
   2ec68:	bne	2eb68 <__assert_fail@plt+0x1cfc4>
   2ec6c:	ldrd	r2, [sp]
   2ec70:	strd	r2, [r9]
   2ec74:	mov	r0, r4
   2ec78:	add	sp, sp, #20
   2ec7c:	ldrd	r4, [sp]
   2ec80:	ldrd	r6, [sp, #8]
   2ec84:	ldrd	r8, [sp, #16]
   2ec88:	add	sp, sp, #24
   2ec8c:	pop	{pc}		; (ldr pc, [sp], #4)
   2ec90:	ldrd	r2, [sp]
   2ec94:	strd	r2, [r9]
   2ec98:	orr	r4, r4, #2
   2ec9c:	b	2ec74 <__assert_fail@plt+0x1d0d0>
   2eca0:	mov	r1, #48	; 0x30
   2eca4:	ldr	r0, [sp, #48]	; 0x30
   2eca8:	bl	11994 <strchr@plt>
   2ecac:	cmp	r0, #0
   2ecb0:	beq	2ede8 <__assert_fail@plt+0x1d244>
   2ecb4:	ldrb	r3, [r7, #1]
   2ecb8:	cmp	r3, #68	; 0x44
   2ecbc:	beq	2edf4 <__assert_fail@plt+0x1d250>
   2ecc0:	cmp	r3, #105	; 0x69
   2ecc4:	beq	2edc4 <__assert_fail@plt+0x1d220>
   2ecc8:	cmp	r3, #66	; 0x42
   2eccc:	moveq	r7, #2
   2ecd0:	movne	r7, #1
   2ecd4:	moveq	r1, #1000	; 0x3e8
   2ecd8:	movne	r1, #1024	; 0x400
   2ecdc:	sub	r5, r5, #66	; 0x42
   2ece0:	cmp	r5, #53	; 0x35
   2ece4:	ldrls	pc, [pc, r5, lsl #2]
   2ece8:	b	2ef58 <__assert_fail@plt+0x1d3b4>
   2ecec:	andeq	lr, r2, r8, asr #28
   2ecf0:	andeq	lr, r2, r8, asr pc
   2ecf4:	andeq	lr, r2, r8, asr pc
   2ecf8:	muleq	r2, r0, lr
   2ecfc:	andeq	lr, r2, r8, asr pc
   2ed00:	andeq	lr, r2, r0, lsr #29
   2ed04:	andeq	lr, r2, r8, asr pc
   2ed08:	andeq	lr, r2, r8, asr pc
   2ed0c:	andeq	lr, r2, r8, asr pc
   2ed10:			; <UNDEFINED> instruction: 0x0002eeb0
   2ed14:	andeq	lr, r2, r8, asr pc
   2ed18:	andeq	lr, r2, r0, asr #29
   2ed1c:	andeq	lr, r2, r8, asr pc
   2ed20:	andeq	lr, r2, r8, asr pc
   2ed24:	ldrdeq	lr, [r2], -r0
   2ed28:	andeq	lr, r2, r8, asr pc
   2ed2c:	andeq	lr, r2, r8, asr pc
   2ed30:	andeq	lr, r2, r8, asr pc
   2ed34:	andeq	lr, r2, r0, ror #29
   2ed38:	andeq	lr, r2, r8, asr pc
   2ed3c:	andeq	lr, r2, r8, asr pc
   2ed40:	andeq	lr, r2, r8, asr pc
   2ed44:	andeq	lr, r2, r8, asr pc
   2ed48:	andeq	lr, r2, r8, lsr pc
   2ed4c:	andeq	lr, r2, r8, asr #30
   2ed50:	andeq	lr, r2, r8, asr pc
   2ed54:	andeq	lr, r2, r8, asr pc
   2ed58:	andeq	lr, r2, r8, asr pc
   2ed5c:	andeq	lr, r2, r8, asr pc
   2ed60:	andeq	lr, r2, r8, asr pc
   2ed64:	andeq	lr, r2, r8, asr pc
   2ed68:	andeq	lr, r2, r8, asr pc
   2ed6c:	andeq	lr, r2, r0, lsl #28
   2ed70:	andeq	lr, r2, r8, ror #30
   2ed74:	andeq	lr, r2, r8, asr pc
   2ed78:	andeq	lr, r2, r8, asr pc
   2ed7c:	andeq	lr, r2, r8, asr pc
   2ed80:	andeq	lr, r2, r0, lsr #29
   2ed84:	andeq	lr, r2, r8, asr pc
   2ed88:	andeq	lr, r2, r8, asr pc
   2ed8c:	andeq	lr, r2, r8, asr pc
   2ed90:			; <UNDEFINED> instruction: 0x0002eeb0
   2ed94:	andeq	lr, r2, r8, asr pc
   2ed98:	andeq	lr, r2, r0, asr #29
   2ed9c:	andeq	lr, r2, r8, asr pc
   2eda0:	andeq	lr, r2, r8, asr pc
   2eda4:	andeq	lr, r2, r8, asr pc
   2eda8:	andeq	lr, r2, r8, asr pc
   2edac:	andeq	lr, r2, r8, asr pc
   2edb0:	andeq	lr, r2, r8, asr pc
   2edb4:	andeq	lr, r2, r0, ror #29
   2edb8:	andeq	lr, r2, r8, asr pc
   2edbc:	andeq	lr, r2, r8, asr pc
   2edc0:	strdeq	lr, [r2], -r0
   2edc4:	ldrb	r3, [r7, #2]
   2edc8:	cmp	r3, #66	; 0x42
   2edcc:	movne	r7, #1
   2edd0:	moveq	r7, #3
   2edd4:	mov	r1, #1024	; 0x400
   2edd8:	b	2ecdc <__assert_fail@plt+0x1d138>
   2eddc:	mov	r7, #1
   2ede0:	mov	r1, #1024	; 0x400
   2ede4:	b	2ecdc <__assert_fail@plt+0x1d138>
   2ede8:	mov	r7, #1
   2edec:	mov	r1, #1024	; 0x400
   2edf0:	b	2ecdc <__assert_fail@plt+0x1d138>
   2edf4:	mov	r7, #2
   2edf8:	mov	r1, #1000	; 0x3e8
   2edfc:	b	2ecdc <__assert_fail@plt+0x1d138>
   2ee00:	ldr	r3, [sp]
   2ee04:	ldr	ip, [sp, #4]
   2ee08:	lsl	r2, ip, #9
   2ee0c:	orr	r2, r2, r3, lsr #23
   2ee10:	lsl	r3, r3, #9
   2ee14:	mov	r0, #0
   2ee18:	mov	r1, r0
   2ee1c:	lsr	r0, ip, #23
   2ee20:	orrs	r1, r0, r1
   2ee24:	streq	r3, [sp]
   2ee28:	streq	r2, [sp, #4]
   2ee2c:	moveq	r0, #0
   2ee30:	beq	2ef6c <__assert_fail@plt+0x1d3c8>
   2ee34:	mvn	r2, #0
   2ee38:	mvn	r3, #0
   2ee3c:	strd	r2, [sp]
   2ee40:	mov	r0, #1
   2ee44:	b	2ef6c <__assert_fail@plt+0x1d3c8>
   2ee48:	ldr	r3, [sp]
   2ee4c:	ldr	ip, [sp, #4]
   2ee50:	lsl	r2, ip, #10
   2ee54:	orr	r2, r2, r3, lsr #22
   2ee58:	lsl	r3, r3, #10
   2ee5c:	mov	r0, #0
   2ee60:	mov	r1, r0
   2ee64:	lsr	r0, ip, #22
   2ee68:	orrs	r1, r0, r1
   2ee6c:	streq	r3, [sp]
   2ee70:	streq	r2, [sp, #4]
   2ee74:	moveq	r0, #0
   2ee78:	beq	2ef6c <__assert_fail@plt+0x1d3c8>
   2ee7c:	mvn	r2, #0
   2ee80:	mvn	r3, #0
   2ee84:	strd	r2, [sp]
   2ee88:	mov	r0, #1
   2ee8c:	b	2ef6c <__assert_fail@plt+0x1d3c8>
   2ee90:	mov	r2, #6
   2ee94:	mov	r0, sp
   2ee98:	bl	2e928 <__assert_fail@plt+0x1cd84>
   2ee9c:	b	2ef6c <__assert_fail@plt+0x1d3c8>
   2eea0:	mov	r2, #3
   2eea4:	mov	r0, sp
   2eea8:	bl	2e928 <__assert_fail@plt+0x1cd84>
   2eeac:	b	2ef6c <__assert_fail@plt+0x1d3c8>
   2eeb0:	mov	r2, #1
   2eeb4:	mov	r0, sp
   2eeb8:	bl	2e928 <__assert_fail@plt+0x1cd84>
   2eebc:	b	2ef6c <__assert_fail@plt+0x1d3c8>
   2eec0:	mov	r2, #2
   2eec4:	mov	r0, sp
   2eec8:	bl	2e928 <__assert_fail@plt+0x1cd84>
   2eecc:	b	2ef6c <__assert_fail@plt+0x1d3c8>
   2eed0:	mov	r2, #5
   2eed4:	mov	r0, sp
   2eed8:	bl	2e928 <__assert_fail@plt+0x1cd84>
   2eedc:	b	2ef6c <__assert_fail@plt+0x1d3c8>
   2eee0:	mov	r2, #4
   2eee4:	mov	r0, sp
   2eee8:	bl	2e928 <__assert_fail@plt+0x1cd84>
   2eeec:	b	2ef6c <__assert_fail@plt+0x1d3c8>
   2eef0:	ldr	r3, [sp]
   2eef4:	ldr	r2, [sp, #4]
   2eef8:	adds	r3, r3, r3
   2eefc:	adc	r2, r2, r2
   2ef00:	mov	r1, #0
   2ef04:	mov	r0, r1
   2ef08:	ldr	r1, [sp, #4]
   2ef0c:	lsr	r1, r1, #31
   2ef10:	orrs	r1, r1, r0
   2ef14:	streq	r3, [sp]
   2ef18:	streq	r2, [sp, #4]
   2ef1c:	moveq	r0, #0
   2ef20:	beq	2ef6c <__assert_fail@plt+0x1d3c8>
   2ef24:	mvn	r2, #0
   2ef28:	mvn	r3, #0
   2ef2c:	strd	r2, [sp]
   2ef30:	mov	r0, #1
   2ef34:	b	2ef6c <__assert_fail@plt+0x1d3c8>
   2ef38:	mov	r2, #8
   2ef3c:	mov	r0, sp
   2ef40:	bl	2e928 <__assert_fail@plt+0x1cd84>
   2ef44:	b	2ef6c <__assert_fail@plt+0x1d3c8>
   2ef48:	mov	r2, #7
   2ef4c:	mov	r0, sp
   2ef50:	bl	2e928 <__assert_fail@plt+0x1cd84>
   2ef54:	b	2ef6c <__assert_fail@plt+0x1d3c8>
   2ef58:	ldrd	r2, [sp]
   2ef5c:	strd	r2, [r9]
   2ef60:	orr	r4, r4, #2
   2ef64:	b	2ec74 <__assert_fail@plt+0x1d0d0>
   2ef68:	mov	r0, #0
   2ef6c:	orr	r4, r4, r0
   2ef70:	ldr	r3, [r6]
   2ef74:	add	r2, r3, r7
   2ef78:	str	r2, [r6]
   2ef7c:	ldrb	r3, [r3, r7]
   2ef80:	cmp	r3, #0
   2ef84:	orrne	r4, r4, #2
   2ef88:	b	2ec6c <__assert_fail@plt+0x1d0c8>
   2ef8c:	mov	r4, #4
   2ef90:	b	2ec74 <__assert_fail@plt+0x1d0d0>
   2ef94:	mov	r4, #4
   2ef98:	b	2ec74 <__assert_fail@plt+0x1d0d0>
   2ef9c:	strd	r4, [sp, #-16]!
   2efa0:	str	r6, [sp, #8]
   2efa4:	str	lr, [sp, #12]
   2efa8:	cmp	r1, #0
   2efac:	cmpne	r0, #0
   2efb0:	beq	2efec <__assert_fail@plt+0x1d448>
   2efb4:	mov	r2, r0
   2efb8:	mov	r3, r1
   2efbc:	umull	r4, r5, r0, r1
   2efc0:	adds	r1, r5, #0
   2efc4:	movne	r1, #1
   2efc8:	cmp	r4, #0
   2efcc:	movlt	r1, #1
   2efd0:	cmp	r1, #0
   2efd4:	beq	2eff4 <__assert_fail@plt+0x1d450>
   2efd8:	bl	119b8 <__errno_location@plt>
   2efdc:	mov	r3, #12
   2efe0:	str	r3, [r0]
   2efe4:	mov	r0, #0
   2efe8:	b	2f000 <__assert_fail@plt+0x1d45c>
   2efec:	mov	r3, #1
   2eff0:	mov	r2, r3
   2eff4:	mov	r1, r3
   2eff8:	mov	r0, r2
   2effc:	bl	116ac <calloc@plt>
   2f000:	ldrd	r4, [sp]
   2f004:	ldr	r6, [sp, #8]
   2f008:	add	sp, sp, #12
   2f00c:	pop	{pc}		; (ldr pc, [sp], #4)
   2f010:	str	r4, [sp, #-8]!
   2f014:	str	lr, [sp, #4]
   2f018:	cmp	r0, #0
   2f01c:	beq	2f038 <__assert_fail@plt+0x1d494>
   2f020:	bge	2f03c <__assert_fail@plt+0x1d498>
   2f024:	bl	119b8 <__errno_location@plt>
   2f028:	mov	r3, #12
   2f02c:	str	r3, [r0]
   2f030:	mov	r0, #0
   2f034:	b	2f040 <__assert_fail@plt+0x1d49c>
   2f038:	mov	r0, #1
   2f03c:	bl	118f8 <malloc@plt>
   2f040:	ldr	r4, [sp]
   2f044:	add	sp, sp, #4
   2f048:	pop	{pc}		; (ldr pc, [sp], #4)
   2f04c:	str	r4, [sp, #-8]!
   2f050:	str	lr, [sp, #4]
   2f054:	cmp	r0, #0
   2f058:	beq	2f07c <__assert_fail@plt+0x1d4d8>
   2f05c:	cmp	r1, #0
   2f060:	beq	2f088 <__assert_fail@plt+0x1d4e4>
   2f064:	cmp	r1, #0
   2f068:	blt	2f094 <__assert_fail@plt+0x1d4f0>
   2f06c:	bl	117f0 <realloc@plt>
   2f070:	ldr	r4, [sp]
   2f074:	add	sp, sp, #4
   2f078:	pop	{pc}		; (ldr pc, [sp], #4)
   2f07c:	mov	r0, r1
   2f080:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2f084:	b	2f070 <__assert_fail@plt+0x1d4cc>
   2f088:	bl	17750 <__assert_fail@plt+0x5bac>
   2f08c:	mov	r0, #0
   2f090:	b	2f070 <__assert_fail@plt+0x1d4cc>
   2f094:	bl	119b8 <__errno_location@plt>
   2f098:	mov	r3, #12
   2f09c:	str	r3, [r0]
   2f0a0:	mov	r0, #0
   2f0a4:	b	2f070 <__assert_fail@plt+0x1d4cc>
   2f0a8:	cmp	r1, #2
   2f0ac:	bls	2f0dc <__assert_fail@plt+0x1d538>
   2f0b0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2f0b4:	strd	r6, [sp, #8]
   2f0b8:	strd	r8, [sp, #16]
   2f0bc:	str	lr, [sp, #24]
   2f0c0:	mov	r7, #1
   2f0c4:	mov	ip, r7
   2f0c8:	mov	lr, #0
   2f0cc:	mvn	r4, #0
   2f0d0:	mov	r3, r7
   2f0d4:	mov	r8, r7
   2f0d8:	b	2f110 <__assert_fail@plt+0x1d56c>
   2f0dc:	mov	r3, #1
   2f0e0:	str	r3, [r2]
   2f0e4:	sub	r0, r1, #1
   2f0e8:	bx	lr
   2f0ec:	cmp	r6, r5
   2f0f0:	beq	2f134 <__assert_fail@plt+0x1d590>
   2f0f4:	mov	r4, lr
   2f0f8:	add	lr, lr, #1
   2f0fc:	mov	r7, r8
   2f100:	mov	ip, r8
   2f104:	add	r3, ip, lr
   2f108:	cmp	r3, r1
   2f10c:	bcs	2f148 <__assert_fail@plt+0x1d5a4>
   2f110:	ldrb	r6, [r0, r3]
   2f114:	add	r5, r0, ip
   2f118:	ldrb	r5, [r5, r4]
   2f11c:	cmp	r6, r5
   2f120:	bcs	2f0ec <__assert_fail@plt+0x1d548>
   2f124:	sub	r7, r3, r4
   2f128:	mov	lr, r3
   2f12c:	mov	ip, #1
   2f130:	b	2f104 <__assert_fail@plt+0x1d560>
   2f134:	cmp	ip, r7
   2f138:	addne	ip, ip, #1
   2f13c:	addeq	lr, lr, r7
   2f140:	moveq	ip, #1
   2f144:	b	2f104 <__assert_fail@plt+0x1d560>
   2f148:	str	r7, [r2]
   2f14c:	mov	r8, #1
   2f150:	mov	ip, r8
   2f154:	mov	lr, #0
   2f158:	mvn	r7, #0
   2f15c:	mov	r3, r8
   2f160:	mov	r9, r8
   2f164:	b	2f18c <__assert_fail@plt+0x1d5e8>
   2f168:	cmp	r6, r5
   2f16c:	beq	2f1b0 <__assert_fail@plt+0x1d60c>
   2f170:	mov	r7, lr
   2f174:	add	lr, lr, #1
   2f178:	mov	r8, r9
   2f17c:	mov	ip, r9
   2f180:	add	r3, ip, lr
   2f184:	cmp	r3, r1
   2f188:	bcs	2f1c4 <__assert_fail@plt+0x1d620>
   2f18c:	ldrb	r6, [r0, r3]
   2f190:	add	r5, r0, ip
   2f194:	ldrb	r5, [r5, r7]
   2f198:	cmp	r6, r5
   2f19c:	bls	2f168 <__assert_fail@plt+0x1d5c4>
   2f1a0:	sub	r8, r3, r7
   2f1a4:	mov	lr, r3
   2f1a8:	mov	ip, #1
   2f1ac:	b	2f180 <__assert_fail@plt+0x1d5dc>
   2f1b0:	cmp	ip, r8
   2f1b4:	addne	ip, ip, #1
   2f1b8:	addeq	lr, lr, r8
   2f1bc:	moveq	ip, #1
   2f1c0:	b	2f180 <__assert_fail@plt+0x1d5dc>
   2f1c4:	add	r7, r7, #1
   2f1c8:	add	r0, r4, #1
   2f1cc:	cmp	r7, r0
   2f1d0:	strcs	r8, [r2]
   2f1d4:	movcs	r0, r7
   2f1d8:	ldrd	r4, [sp]
   2f1dc:	ldrd	r6, [sp, #8]
   2f1e0:	ldrd	r8, [sp, #16]
   2f1e4:	add	sp, sp, #24
   2f1e8:	pop	{pc}		; (ldr pc, [sp], #4)
   2f1ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2f1f0:	strd	r6, [sp, #8]
   2f1f4:	strd	r8, [sp, #16]
   2f1f8:	strd	sl, [sp, #24]
   2f1fc:	str	lr, [sp, #32]
   2f200:	sub	sp, sp, #1072	; 0x430
   2f204:	sub	sp, sp, #4
   2f208:	mov	r5, r0
   2f20c:	mov	r6, r1
   2f210:	mov	r0, r2
   2f214:	str	r2, [sp]
   2f218:	mov	r4, r3
   2f21c:	add	r2, sp, #1056	; 0x420
   2f220:	add	r2, r2, #12
   2f224:	mov	r1, r3
   2f228:	bl	2f0a8 <__assert_fail@plt+0x1d504>
   2f22c:	mov	r7, r0
   2f230:	add	r3, sp, #40	; 0x28
   2f234:	add	r2, sp, #48	; 0x30
   2f238:	add	r2, r2, #1016	; 0x3f8
   2f23c:	str	r4, [r3, #4]!
   2f240:	cmp	r3, r2
   2f244:	bne	2f23c <__assert_fail@plt+0x1d698>
   2f248:	cmp	r4, #0
   2f24c:	beq	2f5c0 <__assert_fail@plt+0x1da1c>
   2f250:	ldr	r3, [sp]
   2f254:	sub	r2, r3, #1
   2f258:	mov	fp, r3
   2f25c:	sub	r1, r4, #1
   2f260:	str	r1, [sp, #8]
   2f264:	add	r0, r1, r3
   2f268:	ldrb	r1, [r2, #1]!
   2f26c:	add	r3, sp, #1072	; 0x430
   2f270:	add	r1, r3, r1, lsl #2
   2f274:	mvn	r3, r2
   2f278:	add	r3, r3, r4
   2f27c:	add	r3, r3, fp
   2f280:	str	r3, [r1, #-1028]	; 0xfffffbfc
   2f284:	cmp	r2, r0
   2f288:	bne	2f268 <__assert_fail@plt+0x1d6c4>
   2f28c:	ldr	r3, [sp, #1068]	; 0x42c
   2f290:	str	r3, [sp, #4]
   2f294:	mov	r2, r7
   2f298:	ldr	r0, [sp]
   2f29c:	add	r1, r0, r3
   2f2a0:	bl	117c0 <memcmp@plt>
   2f2a4:	cmp	r0, #0
   2f2a8:	beq	2f3f0 <__assert_fail@plt+0x1d84c>
   2f2ac:	sub	r3, r4, r7
   2f2b0:	cmp	r3, r7
   2f2b4:	movcc	r3, r7
   2f2b8:	add	r3, r3, #1
   2f2bc:	str	r3, [sp, #12]
   2f2c0:	mov	r8, #0
   2f2c4:	sub	r3, r4, #1
   2f2c8:	str	r3, [sp, #4]
   2f2cc:	sub	r1, r7, #1
   2f2d0:	str	r1, [sp, #8]
   2f2d4:	ldr	r2, [sp]
   2f2d8:	add	r1, r2, r1
   2f2dc:	str	r1, [sp, #16]
   2f2e0:	mov	fp, r2
   2f2e4:	add	r1, r2, r7
   2f2e8:	str	r1, [sp]
   2f2ec:	sub	r9, r4, #2
   2f2f0:	add	r9, r9, r2
   2f2f4:	rsb	sl, r2, #1
   2f2f8:	mov	r0, r6
   2f2fc:	mov	r6, r4
   2f300:	mov	r4, r7
   2f304:	b	2f4d0 <__assert_fail@plt+0x1d92c>
   2f308:	cmp	sl, fp
   2f30c:	movcs	ip, sl
   2f310:	movcc	ip, fp
   2f314:	ldr	r3, [sp, #8]
   2f318:	cmp	ip, r3
   2f31c:	bcs	2f440 <__assert_fail@plt+0x1d89c>
   2f320:	ldr	r0, [sp]
   2f324:	add	r3, r0, ip
   2f328:	add	r1, r8, ip
   2f32c:	add	r2, r5, r1
   2f330:	ldrb	r0, [r0, ip]
   2f334:	ldrb	r1, [r5, r1]
   2f338:	cmp	r0, r1
   2f33c:	bne	2f364 <__assert_fail@plt+0x1d7c0>
   2f340:	ldr	r1, [sp, #12]
   2f344:	rsb	lr, r1, #1
   2f348:	add	ip, lr, r3
   2f34c:	cmp	r3, r9
   2f350:	beq	2f440 <__assert_fail@plt+0x1d89c>
   2f354:	ldrb	r0, [r3, #1]!
   2f358:	ldrb	r1, [r2, #1]!
   2f35c:	cmp	r0, r1
   2f360:	beq	2f348 <__assert_fail@plt+0x1d7a4>
   2f364:	ldr	r3, [sp, #16]
   2f368:	add	r8, r3, r8
   2f36c:	add	r8, ip, r8
   2f370:	mov	sl, r6
   2f374:	mov	r0, r7
   2f378:	add	r7, r8, r4
   2f37c:	sub	r2, r7, r0
   2f380:	mov	r1, #0
   2f384:	add	r0, r5, r0
   2f388:	bl	11a24 <memchr@plt>
   2f38c:	adds	r3, r7, #0
   2f390:	movne	r3, #1
   2f394:	cmp	r0, #0
   2f398:	moveq	r0, r3
   2f39c:	movne	r0, #0
   2f3a0:	cmp	r0, #0
   2f3a4:	beq	2f5e4 <__assert_fail@plt+0x1da40>
   2f3a8:	add	r3, r5, r7
   2f3ac:	ldrb	r3, [r3, #-1]
   2f3b0:	add	r2, sp, #1072	; 0x430
   2f3b4:	add	r3, r2, r3, lsl #2
   2f3b8:	ldr	r6, [r3, #-1028]	; 0xfffffbfc
   2f3bc:	cmp	r6, #0
   2f3c0:	beq	2f308 <__assert_fail@plt+0x1d764>
   2f3c4:	ldr	r3, [sp, #4]
   2f3c8:	cmp	sl, #0
   2f3cc:	cmpne	r3, r6
   2f3d0:	ldrhi	r6, [sp, #20]
   2f3d4:	add	r8, r8, r6
   2f3d8:	mov	sl, #0
   2f3dc:	b	2f374 <__assert_fail@plt+0x1d7d0>
   2f3e0:	ldr	lr, [sp, #36]	; 0x24
   2f3e4:	b	2f49c <__assert_fail@plt+0x1d8f8>
   2f3e8:	add	r0, r5, r8
   2f3ec:	b	2f5e4 <__assert_fail@plt+0x1da40>
   2f3f0:	mov	sl, #0
   2f3f4:	mov	r8, sl
   2f3f8:	sub	r2, r7, #1
   2f3fc:	str	r2, [sp, #24]
   2f400:	str	r7, [sp, #36]	; 0x24
   2f404:	ldr	r1, [sp, #4]
   2f408:	sub	r1, r4, r1
   2f40c:	str	r1, [sp, #20]
   2f410:	ldr	r1, [sp]
   2f414:	add	r2, r1, r2
   2f418:	str	r2, [sp, #28]
   2f41c:	str	r5, [sp, #32]
   2f420:	rsb	r2, r7, #1
   2f424:	str	r2, [sp, #16]
   2f428:	sub	r9, r4, #2
   2f42c:	add	r9, r9, fp
   2f430:	str	fp, [sp, #12]
   2f434:	mov	fp, r7
   2f438:	mov	r0, r6
   2f43c:	b	2f378 <__assert_fail@plt+0x1d7d4>
   2f440:	cmp	sl, fp
   2f444:	ldrcs	lr, [sp, #36]	; 0x24
   2f448:	bcs	2f49c <__assert_fail@plt+0x1d8f8>
   2f44c:	ldr	r3, [sp, #24]
   2f450:	add	r2, r8, r3
   2f454:	add	r3, r5, r2
   2f458:	ldr	r0, [sp, #28]
   2f45c:	ldrb	r1, [r0]
   2f460:	ldrb	r2, [r5, r2]
   2f464:	cmp	r1, r2
   2f468:	bne	2f3e0 <__assert_fail@plt+0x1d83c>
   2f46c:	mov	r2, r0
   2f470:	add	ip, r8, sl
   2f474:	add	ip, ip, r5
   2f478:	ldr	r1, [sp, #32]
   2f47c:	add	r6, r1, r8
   2f480:	sub	lr, r3, r6
   2f484:	cmp	r3, ip
   2f488:	beq	2f49c <__assert_fail@plt+0x1d8f8>
   2f48c:	ldrb	r0, [r2, #-1]!
   2f490:	ldrb	r1, [r3, #-1]!
   2f494:	cmp	r0, r1
   2f498:	beq	2f480 <__assert_fail@plt+0x1d8dc>
   2f49c:	add	sl, sl, #1
   2f4a0:	cmp	sl, lr
   2f4a4:	bhi	2f3e8 <__assert_fail@plt+0x1d844>
   2f4a8:	ldr	r3, [sp, #4]
   2f4ac:	add	r8, r8, r3
   2f4b0:	ldr	sl, [sp, #20]
   2f4b4:	b	2f374 <__assert_fail@plt+0x1d7d0>
   2f4b8:	add	r0, r5, r8
   2f4bc:	b	2f5e4 <__assert_fail@plt+0x1da40>
   2f4c0:	rsb	r3, r4, #1
   2f4c4:	add	r8, r3, r8
   2f4c8:	add	r8, ip, r8
   2f4cc:	mov	r0, r7
   2f4d0:	add	r7, r8, r6
   2f4d4:	sub	r2, r7, r0
   2f4d8:	mov	r1, #0
   2f4dc:	add	r0, r5, r0
   2f4e0:	bl	11a24 <memchr@plt>
   2f4e4:	clz	r0, r0
   2f4e8:	lsr	r0, r0, #5
   2f4ec:	cmp	r7, #0
   2f4f0:	moveq	r0, #0
   2f4f4:	cmp	r0, #0
   2f4f8:	beq	2f5e4 <__assert_fail@plt+0x1da40>
   2f4fc:	add	r3, r5, r7
   2f500:	ldrb	r3, [r3, #-1]
   2f504:	add	r2, sp, #1072	; 0x430
   2f508:	add	r3, r2, r3, lsl #2
   2f50c:	ldr	r3, [r3, #-1028]	; 0xfffffbfc
   2f510:	cmp	r3, #0
   2f514:	addne	r8, r8, r3
   2f518:	bne	2f4cc <__assert_fail@plt+0x1d928>
   2f51c:	ldr	r3, [sp, #4]
   2f520:	cmp	r4, r3
   2f524:	bcs	2f56c <__assert_fail@plt+0x1d9c8>
   2f528:	add	r3, r8, r4
   2f52c:	add	r2, r5, r3
   2f530:	ldr	r1, [sp]
   2f534:	ldrb	r1, [r1]
   2f538:	ldrb	r3, [r5, r3]
   2f53c:	cmp	r1, r3
   2f540:	movne	ip, r4
   2f544:	bne	2f4c0 <__assert_fail@plt+0x1d91c>
   2f548:	ldr	r3, [sp]
   2f54c:	add	ip, sl, r3
   2f550:	cmp	r3, r9
   2f554:	beq	2f56c <__assert_fail@plt+0x1d9c8>
   2f558:	ldrb	r0, [r3, #1]!
   2f55c:	ldrb	r1, [r2, #1]!
   2f560:	cmp	r0, r1
   2f564:	beq	2f54c <__assert_fail@plt+0x1d9a8>
   2f568:	b	2f4c0 <__assert_fail@plt+0x1d91c>
   2f56c:	ldr	r3, [sp, #8]
   2f570:	cmn	r3, #1
   2f574:	beq	2f4b8 <__assert_fail@plt+0x1d914>
   2f578:	ldr	r3, [sp, #8]
   2f57c:	add	r3, r8, r3
   2f580:	add	r2, r5, r3
   2f584:	ldr	r0, [sp, #16]
   2f588:	ldrb	r1, [r0]
   2f58c:	ldrb	r3, [r5, r3]
   2f590:	cmp	r1, r3
   2f594:	bne	2f5b4 <__assert_fail@plt+0x1da10>
   2f598:	mov	r3, r0
   2f59c:	cmp	r3, fp
   2f5a0:	beq	2f4b8 <__assert_fail@plt+0x1d914>
   2f5a4:	ldrb	r0, [r3, #-1]!
   2f5a8:	ldrb	r1, [r2, #-1]!
   2f5ac:	cmp	r0, r1
   2f5b0:	beq	2f59c <__assert_fail@plt+0x1d9f8>
   2f5b4:	ldr	r3, [sp, #12]
   2f5b8:	add	r8, r8, r3
   2f5bc:	b	2f4cc <__assert_fail@plt+0x1d928>
   2f5c0:	mov	r2, r7
   2f5c4:	ldr	r1, [sp, #1068]	; 0x42c
   2f5c8:	ldr	r3, [sp]
   2f5cc:	add	r1, r3, r1
   2f5d0:	mov	r0, r3
   2f5d4:	bl	117c0 <memcmp@plt>
   2f5d8:	cmp	r0, #0
   2f5dc:	moveq	r0, #0
   2f5e0:	bne	2f2ac <__assert_fail@plt+0x1d708>
   2f5e4:	add	sp, sp, #1072	; 0x430
   2f5e8:	add	sp, sp, #4
   2f5ec:	ldrd	r4, [sp]
   2f5f0:	ldrd	r6, [sp, #8]
   2f5f4:	ldrd	r8, [sp, #16]
   2f5f8:	ldrd	sl, [sp, #24]
   2f5fc:	add	sp, sp, #32
   2f600:	pop	{pc}		; (ldr pc, [sp], #4)
   2f604:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2f608:	strd	r6, [sp, #8]
   2f60c:	strd	r8, [sp, #16]
   2f610:	strd	sl, [sp, #24]
   2f614:	str	lr, [sp, #32]
   2f618:	sub	sp, sp, #44	; 0x2c
   2f61c:	ldrb	r3, [r0]
   2f620:	cmp	r3, #0
   2f624:	beq	2f6ec <__assert_fail@plt+0x1db48>
   2f628:	ldrb	r2, [r1]
   2f62c:	cmp	r2, #0
   2f630:	beq	2f804 <__assert_fail@plt+0x1dc60>
   2f634:	mov	r7, r0
   2f638:	add	ip, r1, #1
   2f63c:	mov	lr, #1
   2f640:	mov	r6, ip
   2f644:	cmp	r3, r2
   2f648:	movne	lr, #0
   2f64c:	andeq	lr, lr, #1
   2f650:	ldrb	r3, [r7, #1]!
   2f654:	cmp	r3, #0
   2f658:	beq	2f6f4 <__assert_fail@plt+0x1db50>
   2f65c:	ldrb	r2, [ip], #1
   2f660:	cmp	r2, #0
   2f664:	bne	2f640 <__assert_fail@plt+0x1da9c>
   2f668:	cmp	lr, #0
   2f66c:	movne	r5, r0
   2f670:	bne	2f6cc <__assert_fail@plt+0x1db28>
   2f674:	mov	r4, r0
   2f678:	sub	r8, r6, r1
   2f67c:	ldrb	r1, [r1]
   2f680:	add	r0, r0, #1
   2f684:	bl	11994 <strchr@plt>
   2f688:	mov	r5, r0
   2f68c:	cmp	r8, #1
   2f690:	cmpne	r0, #0
   2f694:	beq	2f6cc <__assert_fail@plt+0x1db28>
   2f698:	sub	r3, r6, r8
   2f69c:	str	r3, [sp, #8]
   2f6a0:	add	r4, r4, r8
   2f6a4:	cmp	r4, r0
   2f6a8:	subcs	r4, r4, r0
   2f6ac:	movcc	r4, #1
   2f6b0:	cmp	r8, #31
   2f6b4:	bls	2f708 <__assert_fail@plt+0x1db64>
   2f6b8:	mov	r3, r8
   2f6bc:	ldr	r2, [sp, #8]
   2f6c0:	mov	r1, r4
   2f6c4:	bl	2f1ec <__assert_fail@plt+0x1d648>
   2f6c8:	mov	r5, r0
   2f6cc:	mov	r0, r5
   2f6d0:	add	sp, sp, #44	; 0x2c
   2f6d4:	ldrd	r4, [sp]
   2f6d8:	ldrd	r6, [sp, #8]
   2f6dc:	ldrd	r8, [sp, #16]
   2f6e0:	ldrd	sl, [sp, #24]
   2f6e4:	add	sp, sp, #32
   2f6e8:	pop	{pc}		; (ldr pc, [sp], #4)
   2f6ec:	mov	r6, r1
   2f6f0:	mov	lr, #1
   2f6f4:	ldrb	r3, [r6]
   2f6f8:	cmp	r3, #0
   2f6fc:	movne	r5, #0
   2f700:	beq	2f668 <__assert_fail@plt+0x1dac4>
   2f704:	b	2f6cc <__assert_fail@plt+0x1db28>
   2f708:	add	r2, sp, #36	; 0x24
   2f70c:	mov	r1, r8
   2f710:	ldr	r6, [sp, #8]
   2f714:	mov	r0, r6
   2f718:	bl	2f0a8 <__assert_fail@plt+0x1d504>
   2f71c:	mov	r2, r0
   2f720:	mov	r7, r0
   2f724:	ldr	r1, [sp, #36]	; 0x24
   2f728:	str	r1, [sp, #12]
   2f72c:	add	r1, r6, r1
   2f730:	mov	r0, r6
   2f734:	bl	117c0 <memcmp@plt>
   2f738:	cmp	r0, #0
   2f73c:	beq	2f7ac <__assert_fail@plt+0x1dc08>
   2f740:	sub	r3, r8, r7
   2f744:	cmp	r3, r7
   2f748:	movcc	r3, r7
   2f74c:	add	r3, r3, #1
   2f750:	str	r3, [sp, #16]
   2f754:	mov	r9, #0
   2f758:	mov	r3, r7
   2f75c:	sub	r1, r7, #1
   2f760:	str	r1, [sp, #12]
   2f764:	ldr	r2, [sp, #8]
   2f768:	add	r1, r2, r1
   2f76c:	str	r1, [sp, #20]
   2f770:	mov	fp, r2
   2f774:	add	r1, r2, r7
   2f778:	str	r1, [sp, #4]
   2f77c:	rsb	r1, r7, #1
   2f780:	str	r1, [sp, #8]
   2f784:	sub	r6, r8, #1
   2f788:	add	r6, r6, r2
   2f78c:	rsb	r7, r2, #1
   2f790:	mov	r0, r4
   2f794:	mov	r4, r3
   2f798:	b	2f938 <__assert_fail@plt+0x1dd94>
   2f79c:	ldr	lr, [sp, #28]
   2f7a0:	b	2f864 <__assert_fail@plt+0x1dcc0>
   2f7a4:	add	r5, r5, r9
   2f7a8:	b	2f6cc <__assert_fail@plt+0x1db28>
   2f7ac:	mov	fp, #0
   2f7b0:	mov	r9, fp
   2f7b4:	mov	sl, r7
   2f7b8:	sub	r2, r7, #1
   2f7bc:	str	r2, [sp, #16]
   2f7c0:	str	r7, [sp, #28]
   2f7c4:	ldr	r3, [sp, #12]
   2f7c8:	sub	r3, r8, r3
   2f7cc:	str	r3, [sp, #20]
   2f7d0:	ldr	r3, [sp, #8]
   2f7d4:	add	r2, r3, r2
   2f7d8:	str	r2, [sp, #24]
   2f7dc:	sub	r6, r8, #1
   2f7e0:	add	r6, r6, r3
   2f7e4:	rsb	r7, r3, #1
   2f7e8:	mov	r0, r4
   2f7ec:	str	r8, [sp, #4]
   2f7f0:	b	2f894 <__assert_fail@plt+0x1dcf0>
   2f7f4:	mov	r5, #0
   2f7f8:	b	2f6cc <__assert_fail@plt+0x1db28>
   2f7fc:	mov	r5, #0
   2f800:	b	2f6cc <__assert_fail@plt+0x1db28>
   2f804:	mov	r5, r0
   2f808:	b	2f6cc <__assert_fail@plt+0x1db28>
   2f80c:	cmp	sl, fp
   2f810:	ldrls	lr, [sp, #28]
   2f814:	bls	2f864 <__assert_fail@plt+0x1dcc0>
   2f818:	ldr	r3, [sp, #16]
   2f81c:	add	r2, r9, r3
   2f820:	add	r3, r5, r2
   2f824:	ldr	r0, [sp, #24]
   2f828:	ldrb	r1, [r0]
   2f82c:	ldrb	r2, [r5, r2]
   2f830:	cmp	r1, r2
   2f834:	bne	2f79c <__assert_fail@plt+0x1dbf8>
   2f838:	mov	r2, r0
   2f83c:	add	ip, fp, r9
   2f840:	add	ip, ip, r5
   2f844:	add	r4, r5, r9
   2f848:	sub	lr, r3, r4
   2f84c:	cmp	r3, ip
   2f850:	beq	2f864 <__assert_fail@plt+0x1dcc0>
   2f854:	ldrb	r0, [r2, #-1]!
   2f858:	ldrb	r1, [r3, #-1]!
   2f85c:	cmp	r0, r1
   2f860:	beq	2f848 <__assert_fail@plt+0x1dca4>
   2f864:	add	fp, fp, #1
   2f868:	cmp	fp, lr
   2f86c:	bhi	2f7a4 <__assert_fail@plt+0x1dc00>
   2f870:	ldr	r3, [sp, #12]
   2f874:	add	r9, r9, r3
   2f878:	ldr	fp, [sp, #20]
   2f87c:	b	2f890 <__assert_fail@plt+0x1dcec>
   2f880:	rsb	r3, sl, #1
   2f884:	add	r9, r3, r9
   2f888:	add	r9, r9, r0
   2f88c:	mov	fp, #0
   2f890:	mov	r0, r8
   2f894:	ldr	r3, [sp, #4]
   2f898:	add	r8, r3, r9
   2f89c:	sub	r2, r8, r0
   2f8a0:	mov	r1, #0
   2f8a4:	add	r0, r5, r0
   2f8a8:	bl	11a24 <memchr@plt>
   2f8ac:	adds	r3, r8, #0
   2f8b0:	movne	r3, #1
   2f8b4:	cmp	r0, #0
   2f8b8:	moveq	r0, r3
   2f8bc:	movne	r0, #0
   2f8c0:	cmp	r0, #0
   2f8c4:	beq	2f7f4 <__assert_fail@plt+0x1dc50>
   2f8c8:	cmp	sl, fp
   2f8cc:	movcs	r0, sl
   2f8d0:	movcc	r0, fp
   2f8d4:	ldr	r3, [sp, #4]
   2f8d8:	cmp	r3, r0
   2f8dc:	bls	2f80c <__assert_fail@plt+0x1dc68>
   2f8e0:	ldr	ip, [sp, #8]
   2f8e4:	add	r3, ip, r0
   2f8e8:	add	r1, r0, r9
   2f8ec:	add	r2, r5, r1
   2f8f0:	ldrb	ip, [ip, r0]
   2f8f4:	ldrb	r1, [r5, r1]
   2f8f8:	cmp	ip, r1
   2f8fc:	bne	2f880 <__assert_fail@plt+0x1dcdc>
   2f900:	add	r0, r7, r3
   2f904:	cmp	r3, r6
   2f908:	beq	2f80c <__assert_fail@plt+0x1dc68>
   2f90c:	ldrb	ip, [r3, #1]!
   2f910:	ldrb	r1, [r2, #1]!
   2f914:	cmp	ip, r1
   2f918:	beq	2f900 <__assert_fail@plt+0x1dd5c>
   2f91c:	b	2f880 <__assert_fail@plt+0x1dcdc>
   2f920:	add	r5, r5, r9
   2f924:	b	2f6cc <__assert_fail@plt+0x1db28>
   2f928:	ldr	r3, [sp, #8]
   2f92c:	add	r9, r3, r9
   2f930:	add	r9, ip, r9
   2f934:	mov	r0, sl
   2f938:	add	sl, r8, r9
   2f93c:	sub	r2, sl, r0
   2f940:	mov	r1, #0
   2f944:	add	r0, r5, r0
   2f948:	bl	11a24 <memchr@plt>
   2f94c:	adds	r3, sl, #0
   2f950:	movne	r3, #1
   2f954:	cmp	r0, #0
   2f958:	moveq	r0, r3
   2f95c:	movne	r0, #0
   2f960:	cmp	r0, #0
   2f964:	beq	2f7fc <__assert_fail@plt+0x1dc58>
   2f968:	cmp	r8, r4
   2f96c:	bls	2f9b4 <__assert_fail@plt+0x1de10>
   2f970:	add	r3, r4, r9
   2f974:	add	r2, r5, r3
   2f978:	ldr	r1, [sp, #4]
   2f97c:	ldrb	r1, [r1]
   2f980:	ldrb	r3, [r5, r3]
   2f984:	cmp	r1, r3
   2f988:	movne	ip, r4
   2f98c:	bne	2f928 <__assert_fail@plt+0x1dd84>
   2f990:	ldr	r3, [sp, #4]
   2f994:	add	ip, r7, r3
   2f998:	cmp	r3, r6
   2f99c:	beq	2f9b4 <__assert_fail@plt+0x1de10>
   2f9a0:	ldrb	r0, [r3, #1]!
   2f9a4:	ldrb	r1, [r2, #1]!
   2f9a8:	cmp	r0, r1
   2f9ac:	beq	2f994 <__assert_fail@plt+0x1ddf0>
   2f9b0:	b	2f928 <__assert_fail@plt+0x1dd84>
   2f9b4:	ldr	r3, [sp, #12]
   2f9b8:	cmn	r3, #1
   2f9bc:	beq	2f920 <__assert_fail@plt+0x1dd7c>
   2f9c0:	ldr	r3, [sp, #12]
   2f9c4:	add	r3, r9, r3
   2f9c8:	add	r2, r5, r3
   2f9cc:	ldr	r0, [sp, #20]
   2f9d0:	ldrb	r1, [r0]
   2f9d4:	ldrb	r3, [r5, r3]
   2f9d8:	cmp	r1, r3
   2f9dc:	bne	2f9fc <__assert_fail@plt+0x1de58>
   2f9e0:	mov	r3, r0
   2f9e4:	cmp	r3, fp
   2f9e8:	beq	2f920 <__assert_fail@plt+0x1dd7c>
   2f9ec:	ldrb	r0, [r3, #-1]!
   2f9f0:	ldrb	r1, [r2, #-1]!
   2f9f4:	cmp	r0, r1
   2f9f8:	beq	2f9e4 <__assert_fail@plt+0x1de40>
   2f9fc:	ldr	r3, [sp, #16]
   2fa00:	add	r9, r9, r3
   2fa04:	b	2f934 <__assert_fail@plt+0x1dd90>
   2fa08:	strd	r4, [sp, #-16]!
   2fa0c:	str	r6, [sp, #8]
   2fa10:	str	lr, [sp, #12]
   2fa14:	mov	r5, r0
   2fa18:	bl	118a4 <__fpending@plt>
   2fa1c:	mov	r6, r0
   2fa20:	ldr	r4, [r5]
   2fa24:	and	r4, r4, #32
   2fa28:	mov	r0, r5
   2fa2c:	bl	15a44 <__assert_fail@plt+0x3ea0>
   2fa30:	cmp	r4, #0
   2fa34:	bne	2fa68 <__assert_fail@plt+0x1dec4>
   2fa38:	cmp	r0, #0
   2fa3c:	beq	2fa58 <__assert_fail@plt+0x1deb4>
   2fa40:	cmp	r6, #0
   2fa44:	bne	2fa84 <__assert_fail@plt+0x1dee0>
   2fa48:	bl	119b8 <__errno_location@plt>
   2fa4c:	ldr	r0, [r0]
   2fa50:	subs	r0, r0, #9
   2fa54:	mvnne	r0, #0
   2fa58:	ldrd	r4, [sp]
   2fa5c:	ldr	r6, [sp, #8]
   2fa60:	add	sp, sp, #12
   2fa64:	pop	{pc}		; (ldr pc, [sp], #4)
   2fa68:	cmp	r0, #0
   2fa6c:	bne	2fa8c <__assert_fail@plt+0x1dee8>
   2fa70:	bl	119b8 <__errno_location@plt>
   2fa74:	mov	r3, #0
   2fa78:	str	r3, [r0]
   2fa7c:	mvn	r0, #0
   2fa80:	b	2fa58 <__assert_fail@plt+0x1deb4>
   2fa84:	mvn	r0, #0
   2fa88:	b	2fa58 <__assert_fail@plt+0x1deb4>
   2fa8c:	mvn	r0, #0
   2fa90:	b	2fa58 <__assert_fail@plt+0x1deb4>
   2fa94:	mov	r2, #0
   2fa98:	mov	r3, #0
   2fa9c:	strd	r2, [r0, #16]
   2faa0:	movw	r3, #62998	; 0xf616
   2faa4:	movt	r3, #149	; 0x95
   2faa8:	str	r3, [r0, #24]
   2faac:	bx	lr
   2fab0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2fab4:	strd	r6, [sp, #8]
   2fab8:	strd	r8, [sp, #16]
   2fabc:	str	sl, [sp, #24]
   2fac0:	str	lr, [sp, #28]
   2fac4:	movw	r3, #62998	; 0xf616
   2fac8:	movt	r3, #149	; 0x95
   2facc:	ldr	r2, [r0, #24]
   2fad0:	cmp	r2, r3
   2fad4:	bne	2fb30 <__assert_fail@plt+0x1df8c>
   2fad8:	ldrd	r6, [r0, #16]
   2fadc:	orrs	r3, r6, r7
   2fae0:	beq	2fb7c <__assert_fail@plt+0x1dfd8>
   2fae4:	ldrd	r4, [r1, #96]	; 0x60
   2fae8:	ldrd	r2, [r0]
   2faec:	cmp	r5, r3
   2faf0:	cmpeq	r4, r2
   2faf4:	beq	2fb50 <__assert_fail@plt+0x1dfac>
   2faf8:	adds	r8, r6, #1
   2fafc:	adc	r9, r7, #0
   2fb00:	strd	r8, [r0, #16]
   2fb04:	and	r2, r6, r8
   2fb08:	and	r3, r7, r9
   2fb0c:	orrs	r3, r2, r3
   2fb10:	movne	r0, #0
   2fb14:	beq	2fb6c <__assert_fail@plt+0x1dfc8>
   2fb18:	ldrd	r4, [sp]
   2fb1c:	ldrd	r6, [sp, #8]
   2fb20:	ldrd	r8, [sp, #16]
   2fb24:	ldr	sl, [sp, #24]
   2fb28:	add	sp, sp, #28
   2fb2c:	pop	{pc}		; (ldr pc, [sp], #4)
   2fb30:	movw	r3, #10852	; 0x2a64
   2fb34:	movt	r3, #3
   2fb38:	mov	r2, #60	; 0x3c
   2fb3c:	movw	r1, #10864	; 0x2a70
   2fb40:	movt	r1, #3
   2fb44:	movw	r0, #10884	; 0x2a84
   2fb48:	movt	r0, #3
   2fb4c:	bl	11ba4 <__assert_fail@plt>
   2fb50:	ldrd	r4, [r1]
   2fb54:	ldrd	r2, [r0, #8]
   2fb58:	cmp	r5, r3
   2fb5c:	cmpeq	r4, r2
   2fb60:	moveq	r0, #1
   2fb64:	bne	2faf8 <__assert_fail@plt+0x1df54>
   2fb68:	b	2fb18 <__assert_fail@plt+0x1df74>
   2fb6c:	orrs	r3, r8, r9
   2fb70:	moveq	r0, #1
   2fb74:	beq	2fb18 <__assert_fail@plt+0x1df74>
   2fb78:	b	2fb88 <__assert_fail@plt+0x1dfe4>
   2fb7c:	mov	r2, #1
   2fb80:	mov	r3, #0
   2fb84:	strd	r2, [r0, #16]
   2fb88:	ldrd	r2, [r1]
   2fb8c:	strd	r2, [r0, #8]
   2fb90:	ldrd	r2, [r1, #96]	; 0x60
   2fb94:	strd	r2, [r0]
   2fb98:	mov	r0, #0
   2fb9c:	b	2fb18 <__assert_fail@plt+0x1df74>
   2fba0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2fba4:	strd	r6, [sp, #8]
   2fba8:	strd	r8, [sp, #16]
   2fbac:	str	sl, [sp, #24]
   2fbb0:	str	lr, [sp, #28]
   2fbb4:	ldr	ip, [r0, #4]
   2fbb8:	cmp	ip, r1
   2fbbc:	strcs	r1, [r0]
   2fbc0:	movcs	r4, #1
   2fbc4:	bcs	2fc14 <__assert_fail@plt+0x1e070>
   2fbc8:	mov	r7, r3
   2fbcc:	mov	r6, r1
   2fbd0:	mov	r5, r0
   2fbd4:	umull	r8, r9, r1, r3
   2fbd8:	adds	r4, r9, #0
   2fbdc:	movne	r4, #1
   2fbe0:	cmp	r4, #0
   2fbe4:	bne	2fc30 <__assert_fail@plt+0x1e08c>
   2fbe8:	ldr	r0, [r0, #8]
   2fbec:	cmp	r0, r2
   2fbf0:	beq	2fc44 <__assert_fail@plt+0x1e0a0>
   2fbf4:	mov	r1, r8
   2fbf8:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   2fbfc:	subs	r8, r0, #0
   2fc00:	beq	2fc14 <__assert_fail@plt+0x1e070>
   2fc04:	str	r8, [r5, #8]
   2fc08:	str	r6, [r5, #4]
   2fc0c:	str	r6, [r5]
   2fc10:	mov	r4, #1
   2fc14:	mov	r0, r4
   2fc18:	ldrd	r4, [sp]
   2fc1c:	ldrd	r6, [sp, #8]
   2fc20:	ldrd	r8, [sp, #16]
   2fc24:	ldr	sl, [sp, #24]
   2fc28:	add	sp, sp, #28
   2fc2c:	pop	{pc}		; (ldr pc, [sp], #4)
   2fc30:	bl	119b8 <__errno_location@plt>
   2fc34:	mov	r3, #12
   2fc38:	str	r3, [r0]
   2fc3c:	mov	r4, #0
   2fc40:	b	2fc14 <__assert_fail@plt+0x1e070>
   2fc44:	mov	r0, r8
   2fc48:	bl	2f010 <__assert_fail@plt+0x1d46c>
   2fc4c:	subs	r8, r0, #0
   2fc50:	beq	2fc14 <__assert_fail@plt+0x1e070>
   2fc54:	ldr	r1, [r5, #8]
   2fc58:	cmp	r1, #0
   2fc5c:	beq	2fc04 <__assert_fail@plt+0x1e060>
   2fc60:	ldr	r2, [r5]
   2fc64:	mul	r2, r2, r7
   2fc68:	mov	r0, r8
   2fc6c:	bl	11784 <memcpy@plt>
   2fc70:	b	2fc04 <__assert_fail@plt+0x1e060>
   2fc74:	push	{r1, r2, r3}
   2fc78:	strd	r4, [sp, #-16]!
   2fc7c:	str	r6, [sp, #8]
   2fc80:	str	lr, [sp, #12]
   2fc84:	sub	sp, sp, #12
   2fc88:	mov	r5, r0
   2fc8c:	ldr	r1, [sp, #28]
   2fc90:	add	r3, sp, #32
   2fc94:	str	r3, [sp, #4]
   2fc98:	cmp	r1, #0
   2fc9c:	beq	2fce4 <__assert_fail@plt+0x1e140>
   2fca0:	movw	r3, #1030	; 0x406
   2fca4:	cmp	r1, r3
   2fca8:	beq	2fd20 <__assert_fail@plt+0x1e17c>
   2fcac:	cmp	r1, #11
   2fcb0:	beq	2fed0 <__assert_fail@plt+0x1e32c>
   2fcb4:	bgt	2fe5c <__assert_fail@plt+0x1e2b8>
   2fcb8:	cmp	r1, #3
   2fcbc:	beq	2fed0 <__assert_fail@plt+0x1e32c>
   2fcc0:	ble	2fe1c <__assert_fail@plt+0x1e278>
   2fcc4:	cmp	r1, #8
   2fcc8:	beq	2fe3c <__assert_fail@plt+0x1e298>
   2fccc:	ble	2fe34 <__assert_fail@plt+0x1e290>
   2fcd0:	cmp	r1, #9
   2fcd4:	beq	2fed0 <__assert_fail@plt+0x1e32c>
   2fcd8:	cmp	r1, #10
   2fcdc:	bne	2fe94 <__assert_fail@plt+0x1e2f0>
   2fce0:	b	2fe3c <__assert_fail@plt+0x1e298>
   2fce4:	ldr	r3, [sp, #4]
   2fce8:	add	r2, r3, #4
   2fcec:	str	r2, [sp, #4]
   2fcf0:	ldr	r2, [r3]
   2fcf4:	mov	r1, #0
   2fcf8:	bl	11a54 <fcntl64@plt>
   2fcfc:	mov	r4, r0
   2fd00:	mov	r0, r4
   2fd04:	add	sp, sp, #12
   2fd08:	ldrd	r4, [sp]
   2fd0c:	ldr	r6, [sp, #8]
   2fd10:	ldr	lr, [sp, #12]
   2fd14:	add	sp, sp, #16
   2fd18:	add	sp, sp, #12
   2fd1c:	bx	lr
   2fd20:	ldr	r3, [sp, #4]
   2fd24:	add	r2, r3, #4
   2fd28:	str	r2, [sp, #4]
   2fd2c:	ldr	r6, [r3]
   2fd30:	movw	r3, #13312	; 0x3400
   2fd34:	movt	r3, #4
   2fd38:	ldr	r3, [r3]
   2fd3c:	cmp	r3, #0
   2fd40:	blt	2fda8 <__assert_fail@plt+0x1e204>
   2fd44:	mov	r2, r6
   2fd48:	movw	r1, #1030	; 0x406
   2fd4c:	bl	11a54 <fcntl64@plt>
   2fd50:	subs	r4, r0, #0
   2fd54:	blt	2fd6c <__assert_fail@plt+0x1e1c8>
   2fd58:	movw	r3, #13312	; 0x3400
   2fd5c:	movt	r3, #4
   2fd60:	mov	r2, #1
   2fd64:	str	r2, [r3]
   2fd68:	b	2fd00 <__assert_fail@plt+0x1e15c>
   2fd6c:	bl	119b8 <__errno_location@plt>
   2fd70:	ldr	r3, [r0]
   2fd74:	cmp	r3, #22
   2fd78:	bne	2fd58 <__assert_fail@plt+0x1e1b4>
   2fd7c:	mov	r2, r6
   2fd80:	mov	r1, #0
   2fd84:	mov	r0, r5
   2fd88:	bl	11a54 <fcntl64@plt>
   2fd8c:	subs	r4, r0, #0
   2fd90:	blt	2fd00 <__assert_fail@plt+0x1e15c>
   2fd94:	movw	r3, #13312	; 0x3400
   2fd98:	movt	r3, #4
   2fd9c:	mvn	r2, #0
   2fda0:	str	r2, [r3]
   2fda4:	b	2fdd0 <__assert_fail@plt+0x1e22c>
   2fda8:	mov	r2, r6
   2fdac:	mov	r1, #0
   2fdb0:	bl	11a54 <fcntl64@plt>
   2fdb4:	subs	r4, r0, #0
   2fdb8:	blt	2fd00 <__assert_fail@plt+0x1e15c>
   2fdbc:	movw	r3, #13312	; 0x3400
   2fdc0:	movt	r3, #4
   2fdc4:	ldr	r3, [r3]
   2fdc8:	cmn	r3, #1
   2fdcc:	bne	2fd00 <__assert_fail@plt+0x1e15c>
   2fdd0:	mov	r1, #1
   2fdd4:	mov	r0, r4
   2fdd8:	bl	11a54 <fcntl64@plt>
   2fddc:	subs	r2, r0, #0
   2fde0:	blt	2fdfc <__assert_fail@plt+0x1e258>
   2fde4:	orr	r2, r2, #1
   2fde8:	mov	r1, #2
   2fdec:	mov	r0, r4
   2fdf0:	bl	11a54 <fcntl64@plt>
   2fdf4:	cmn	r0, #1
   2fdf8:	bne	2fd00 <__assert_fail@plt+0x1e15c>
   2fdfc:	bl	119b8 <__errno_location@plt>
   2fe00:	mov	r5, r0
   2fe04:	ldr	r6, [r0]
   2fe08:	mov	r0, r4
   2fe0c:	bl	11b80 <close@plt>
   2fe10:	str	r6, [r5]
   2fe14:	mvn	r4, #0
   2fe18:	b	2fd00 <__assert_fail@plt+0x1e15c>
   2fe1c:	cmp	r1, #1
   2fe20:	beq	2fed0 <__assert_fail@plt+0x1e32c>
   2fe24:	bgt	2fe3c <__assert_fail@plt+0x1e298>
   2fe28:	cmp	r1, #0
   2fe2c:	bne	2fe94 <__assert_fail@plt+0x1e2f0>
   2fe30:	b	2fe3c <__assert_fail@plt+0x1e298>
   2fe34:	cmp	r1, #4
   2fe38:	bne	2fe94 <__assert_fail@plt+0x1e2f0>
   2fe3c:	ldr	r3, [sp, #4]
   2fe40:	add	r2, r3, #4
   2fe44:	str	r2, [sp, #4]
   2fe48:	ldr	r2, [r3]
   2fe4c:	mov	r0, r5
   2fe50:	bl	11a54 <fcntl64@plt>
   2fe54:	mov	r4, r0
   2fe58:	b	2fd00 <__assert_fail@plt+0x1e15c>
   2fe5c:	movw	r3, #1031	; 0x407
   2fe60:	cmp	r1, r3
   2fe64:	bgt	2feb4 <__assert_fail@plt+0x1e310>
   2fe68:	movw	r3, #1030	; 0x406
   2fe6c:	cmp	r1, r3
   2fe70:	bge	2fe3c <__assert_fail@plt+0x1e298>
   2fe74:	movw	r3, #1025	; 0x401
   2fe78:	cmp	r1, r3
   2fe7c:	beq	2fed0 <__assert_fail@plt+0x1e32c>
   2fe80:	movw	r3, #1026	; 0x402
   2fe84:	cmp	r1, r3
   2fe88:	beq	2fe3c <__assert_fail@plt+0x1e298>
   2fe8c:	cmp	r1, #1024	; 0x400
   2fe90:	beq	2fe3c <__assert_fail@plt+0x1e298>
   2fe94:	ldr	r3, [sp, #4]
   2fe98:	add	r2, r3, #4
   2fe9c:	str	r2, [sp, #4]
   2fea0:	ldr	r2, [r3]
   2fea4:	mov	r0, r5
   2fea8:	bl	11a54 <fcntl64@plt>
   2feac:	mov	r4, r0
   2feb0:	b	2fd00 <__assert_fail@plt+0x1e15c>
   2feb4:	movw	r3, #1033	; 0x409
   2feb8:	cmp	r1, r3
   2febc:	beq	2fe3c <__assert_fail@plt+0x1e298>
   2fec0:	blt	2fed0 <__assert_fail@plt+0x1e32c>
   2fec4:	movw	r3, #1034	; 0x40a
   2fec8:	cmp	r1, r3
   2fecc:	bne	2fe94 <__assert_fail@plt+0x1e2f0>
   2fed0:	mov	r0, r5
   2fed4:	bl	11a54 <fcntl64@plt>
   2fed8:	mov	r4, r0
   2fedc:	b	2fd00 <__assert_fail@plt+0x1e15c>
   2fee0:	push	{r1, r2, r3}
   2fee4:	push	{lr}		; (str lr, [sp, #-4]!)
   2fee8:	sub	sp, sp, #8
   2feec:	ldr	r1, [sp, #12]
   2fef0:	tst	r1, #64	; 0x40
   2fef4:	addne	r3, sp, #20
   2fef8:	strne	r3, [sp, #4]
   2fefc:	ldrne	r2, [sp, #16]
   2ff00:	moveq	r2, #0
   2ff04:	bl	118e0 <open64@plt>
   2ff08:	bl	2d55c <__assert_fail@plt+0x1b9b8>
   2ff0c:	add	sp, sp, #8
   2ff10:	pop	{lr}		; (ldr lr, [sp], #4)
   2ff14:	add	sp, sp, #12
   2ff18:	bx	lr
   2ff1c:	push	{lr}		; (str lr, [sp, #-4]!)
   2ff20:	sub	sp, sp, #268	; 0x10c
   2ff24:	movw	r2, #257	; 0x101
   2ff28:	add	r1, sp, #4
   2ff2c:	bl	2fff8 <__assert_fail@plt+0x1e454>
   2ff30:	cmp	r0, #0
   2ff34:	movne	r0, #0
   2ff38:	bne	2ff70 <__assert_fail@plt+0x1e3cc>
   2ff3c:	movw	r1, #10908	; 0x2a9c
   2ff40:	movt	r1, #3
   2ff44:	add	r0, sp, #4
   2ff48:	bl	1170c <strcmp@plt>
   2ff4c:	cmp	r0, #0
   2ff50:	beq	2ff6c <__assert_fail@plt+0x1e3c8>
   2ff54:	movw	r1, #10912	; 0x2aa0
   2ff58:	movt	r1, #3
   2ff5c:	add	r0, sp, #4
   2ff60:	bl	1170c <strcmp@plt>
   2ff64:	adds	r0, r0, #0
   2ff68:	movne	r0, #1
   2ff6c:	and	r0, r0, #1
   2ff70:	add	sp, sp, #268	; 0x10c
   2ff74:	pop	{pc}		; (ldr pc, [sp], #4)
   2ff78:	str	r4, [sp, #-8]!
   2ff7c:	str	lr, [sp, #4]
   2ff80:	mov	r0, #14
   2ff84:	bl	11a84 <nl_langinfo@plt>
   2ff88:	cmp	r0, #0
   2ff8c:	beq	2ffb0 <__assert_fail@plt+0x1e40c>
   2ff90:	ldrb	r2, [r0]
   2ff94:	movw	r3, #10920	; 0x2aa8
   2ff98:	movt	r3, #3
   2ff9c:	cmp	r2, #0
   2ffa0:	moveq	r0, r3
   2ffa4:	ldr	r4, [sp]
   2ffa8:	add	sp, sp, #4
   2ffac:	pop	{pc}		; (ldr pc, [sp], #4)
   2ffb0:	movw	r0, #10920	; 0x2aa8
   2ffb4:	movt	r0, #3
   2ffb8:	b	2ffa4 <__assert_fail@plt+0x1e400>
   2ffbc:	str	r4, [sp, #-8]!
   2ffc0:	str	lr, [sp, #4]
   2ffc4:	umull	r2, r3, r1, r2
   2ffc8:	cmp	r3, #0
   2ffcc:	bne	2ffe4 <__assert_fail@plt+0x1e440>
   2ffd0:	mov	r1, r2
   2ffd4:	bl	2f04c <__assert_fail@plt+0x1d4a8>
   2ffd8:	ldr	r4, [sp]
   2ffdc:	add	sp, sp, #4
   2ffe0:	pop	{pc}		; (ldr pc, [sp], #4)
   2ffe4:	bl	119b8 <__errno_location@plt>
   2ffe8:	mov	r3, #12
   2ffec:	str	r3, [r0]
   2fff0:	mov	r0, #0
   2fff4:	b	2ffd8 <__assert_fail@plt+0x1e434>
   2fff8:	strd	r4, [sp, #-16]!
   2fffc:	str	r6, [sp, #8]
   30000:	str	lr, [sp, #12]
   30004:	mov	r6, r1
   30008:	mov	r4, r2
   3000c:	mov	r1, #0
   30010:	bl	11a6c <setlocale@plt>
   30014:	subs	r5, r0, #0
   30018:	beq	3005c <__assert_fail@plt+0x1e4b8>
   3001c:	mov	r0, r5
   30020:	bl	11988 <strlen@plt>
   30024:	cmp	r4, r0
   30028:	bhi	30078 <__assert_fail@plt+0x1e4d4>
   3002c:	cmp	r4, #0
   30030:	moveq	r0, #34	; 0x22
   30034:	beq	3008c <__assert_fail@plt+0x1e4e8>
   30038:	sub	r4, r4, #1
   3003c:	mov	r2, r4
   30040:	mov	r1, r5
   30044:	mov	r0, r6
   30048:	bl	11784 <memcpy@plt>
   3004c:	mov	r3, #0
   30050:	strb	r3, [r6, r4]
   30054:	mov	r0, #34	; 0x22
   30058:	b	3008c <__assert_fail@plt+0x1e4e8>
   3005c:	cmp	r4, #0
   30060:	moveq	r0, #22
   30064:	beq	3008c <__assert_fail@plt+0x1e4e8>
   30068:	mov	r3, #0
   3006c:	strb	r3, [r6]
   30070:	mov	r0, #22
   30074:	b	3008c <__assert_fail@plt+0x1e4e8>
   30078:	add	r2, r0, #1
   3007c:	mov	r1, r5
   30080:	mov	r0, r6
   30084:	bl	11784 <memcpy@plt>
   30088:	mov	r0, #0
   3008c:	ldrd	r4, [sp]
   30090:	ldr	r6, [sp, #8]
   30094:	add	sp, sp, #12
   30098:	pop	{pc}		; (ldr pc, [sp], #4)
   3009c:	str	r4, [sp, #-8]!
   300a0:	str	lr, [sp, #4]
   300a4:	mov	r1, #0
   300a8:	bl	11a6c <setlocale@plt>
   300ac:	ldr	r4, [sp]
   300b0:	add	sp, sp, #4
   300b4:	pop	{pc}		; (ldr pc, [sp], #4)
   300b8:	str	r4, [sp, #-8]!
   300bc:	str	lr, [sp, #4]
   300c0:	mov	r2, #3
   300c4:	mov	r1, #0
   300c8:	bl	2fc74 <__assert_fail@plt+0x1e0d0>
   300cc:	ldr	r4, [sp]
   300d0:	add	sp, sp, #4
   300d4:	pop	{pc}		; (ldr pc, [sp], #4)
   300d8:	eor	r1, r1, #-2147483648	; 0x80000000
   300dc:	b	300e4 <__assert_fail@plt+0x1e540>
   300e0:	eor	r3, r3, #-2147483648	; 0x80000000
   300e4:	push	{r4, r5, lr}
   300e8:	lsl	r4, r1, #1
   300ec:	lsl	r5, r3, #1
   300f0:	teq	r4, r5
   300f4:	teqeq	r0, r2
   300f8:	orrsne	ip, r4, r0
   300fc:	orrsne	ip, r5, r2
   30100:	mvnsne	ip, r4, asr #21
   30104:	mvnsne	ip, r5, asr #21
   30108:	beq	302f4 <__assert_fail@plt+0x1e750>
   3010c:	lsr	r4, r4, #21
   30110:	rsbs	r5, r4, r5, lsr #21
   30114:	rsblt	r5, r5, #0
   30118:	ble	30138 <__assert_fail@plt+0x1e594>
   3011c:	add	r4, r4, r5
   30120:	eor	r2, r0, r2
   30124:	eor	r3, r1, r3
   30128:	eor	r0, r2, r0
   3012c:	eor	r1, r3, r1
   30130:	eor	r2, r0, r2
   30134:	eor	r3, r1, r3
   30138:	cmp	r5, #54	; 0x36
   3013c:	pophi	{r4, r5, pc}
   30140:	tst	r1, #-2147483648	; 0x80000000
   30144:	lsl	r1, r1, #12
   30148:	mov	ip, #1048576	; 0x100000
   3014c:	orr	r1, ip, r1, lsr #12
   30150:	beq	3015c <__assert_fail@plt+0x1e5b8>
   30154:	rsbs	r0, r0, #0
   30158:	rsc	r1, r1, #0
   3015c:	tst	r3, #-2147483648	; 0x80000000
   30160:	lsl	r3, r3, #12
   30164:	orr	r3, ip, r3, lsr #12
   30168:	beq	30174 <__assert_fail@plt+0x1e5d0>
   3016c:	rsbs	r2, r2, #0
   30170:	rsc	r3, r3, #0
   30174:	teq	r4, r5
   30178:	beq	302dc <__assert_fail@plt+0x1e738>
   3017c:	sub	r4, r4, #1
   30180:	rsbs	lr, r5, #32
   30184:	blt	301a0 <__assert_fail@plt+0x1e5fc>
   30188:	lsl	ip, r2, lr
   3018c:	adds	r0, r0, r2, lsr r5
   30190:	adc	r1, r1, #0
   30194:	adds	r0, r0, r3, lsl lr
   30198:	adcs	r1, r1, r3, asr r5
   3019c:	b	301bc <__assert_fail@plt+0x1e618>
   301a0:	sub	r5, r5, #32
   301a4:	add	lr, lr, #32
   301a8:	cmp	r2, #1
   301ac:	lsl	ip, r3, lr
   301b0:	orrcs	ip, ip, #2
   301b4:	adds	r0, r0, r3, asr r5
   301b8:	adcs	r1, r1, r3, asr #31
   301bc:	and	r5, r1, #-2147483648	; 0x80000000
   301c0:	bpl	301d0 <__assert_fail@plt+0x1e62c>
   301c4:	rsbs	ip, ip, #0
   301c8:	rscs	r0, r0, #0
   301cc:	rsc	r1, r1, #0
   301d0:	cmp	r1, #1048576	; 0x100000
   301d4:	bcc	30214 <__assert_fail@plt+0x1e670>
   301d8:	cmp	r1, #2097152	; 0x200000
   301dc:	bcc	301fc <__assert_fail@plt+0x1e658>
   301e0:	lsrs	r1, r1, #1
   301e4:	rrxs	r0, r0
   301e8:	rrx	ip, ip
   301ec:	add	r4, r4, #1
   301f0:	lsl	r2, r4, #21
   301f4:	cmn	r2, #4194304	; 0x400000
   301f8:	bcs	30354 <__assert_fail@plt+0x1e7b0>
   301fc:	cmp	ip, #-2147483648	; 0x80000000
   30200:	lsrseq	ip, r0, #1
   30204:	adcs	r0, r0, #0
   30208:	adc	r1, r1, r4, lsl #20
   3020c:	orr	r1, r1, r5
   30210:	pop	{r4, r5, pc}
   30214:	lsls	ip, ip, #1
   30218:	adcs	r0, r0, r0
   3021c:	adc	r1, r1, r1
   30220:	tst	r1, #1048576	; 0x100000
   30224:	sub	r4, r4, #1
   30228:	bne	301fc <__assert_fail@plt+0x1e658>
   3022c:	teq	r1, #0
   30230:	moveq	r1, r0
   30234:	moveq	r0, #0
   30238:	clz	r3, r1
   3023c:	addeq	r3, r3, #32
   30240:	sub	r3, r3, #11
   30244:	subs	r2, r3, #32
   30248:	bge	3026c <__assert_fail@plt+0x1e6c8>
   3024c:	adds	r2, r2, #12
   30250:	ble	30268 <__assert_fail@plt+0x1e6c4>
   30254:	add	ip, r2, #20
   30258:	rsb	r2, r2, #12
   3025c:	lsl	r0, r1, ip
   30260:	lsr	r1, r1, r2
   30264:	b	3027c <__assert_fail@plt+0x1e6d8>
   30268:	add	r2, r2, #20
   3026c:	rsble	ip, r2, #32
   30270:	lsl	r1, r1, r2
   30274:	orrle	r1, r1, r0, lsr ip
   30278:	lslle	r0, r0, r2
   3027c:	subs	r4, r4, r3
   30280:	addge	r1, r1, r4, lsl #20
   30284:	orrge	r1, r1, r5
   30288:	popge	{r4, r5, pc}
   3028c:	mvn	r4, r4
   30290:	subs	r4, r4, #31
   30294:	bge	302d0 <__assert_fail@plt+0x1e72c>
   30298:	adds	r4, r4, #12
   3029c:	bgt	302b8 <__assert_fail@plt+0x1e714>
   302a0:	add	r4, r4, #20
   302a4:	rsb	r2, r4, #32
   302a8:	lsr	r0, r0, r4
   302ac:	orr	r0, r0, r1, lsl r2
   302b0:	orr	r1, r5, r1, lsr r4
   302b4:	pop	{r4, r5, pc}
   302b8:	rsb	r4, r4, #12
   302bc:	rsb	r2, r4, #32
   302c0:	lsr	r0, r0, r2
   302c4:	orr	r0, r0, r1, lsl r4
   302c8:	mov	r1, r5
   302cc:	pop	{r4, r5, pc}
   302d0:	lsr	r0, r1, r4
   302d4:	mov	r1, r5
   302d8:	pop	{r4, r5, pc}
   302dc:	teq	r4, #0
   302e0:	eor	r3, r3, #1048576	; 0x100000
   302e4:	eoreq	r1, r1, #1048576	; 0x100000
   302e8:	addeq	r4, r4, #1
   302ec:	subne	r5, r5, #1
   302f0:	b	3017c <__assert_fail@plt+0x1e5d8>
   302f4:	mvns	ip, r4, asr #21
   302f8:	mvnsne	ip, r5, asr #21
   302fc:	beq	30364 <__assert_fail@plt+0x1e7c0>
   30300:	teq	r4, r5
   30304:	teqeq	r0, r2
   30308:	beq	3031c <__assert_fail@plt+0x1e778>
   3030c:	orrs	ip, r4, r0
   30310:	moveq	r1, r3
   30314:	moveq	r0, r2
   30318:	pop	{r4, r5, pc}
   3031c:	teq	r1, r3
   30320:	movne	r1, #0
   30324:	movne	r0, #0
   30328:	popne	{r4, r5, pc}
   3032c:	lsrs	ip, r4, #21
   30330:	bne	30344 <__assert_fail@plt+0x1e7a0>
   30334:	lsls	r0, r0, #1
   30338:	adcs	r1, r1, r1
   3033c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   30340:	pop	{r4, r5, pc}
   30344:	adds	r4, r4, #4194304	; 0x400000
   30348:	addcc	r1, r1, #1048576	; 0x100000
   3034c:	popcc	{r4, r5, pc}
   30350:	and	r5, r1, #-2147483648	; 0x80000000
   30354:	orr	r1, r5, #2130706432	; 0x7f000000
   30358:	orr	r1, r1, #15728640	; 0xf00000
   3035c:	mov	r0, #0
   30360:	pop	{r4, r5, pc}
   30364:	mvns	ip, r4, asr #21
   30368:	movne	r1, r3
   3036c:	movne	r0, r2
   30370:	mvnseq	ip, r5, asr #21
   30374:	movne	r3, r1
   30378:	movne	r2, r0
   3037c:	orrs	r4, r0, r1, lsl #12
   30380:	orrseq	r5, r2, r3, lsl #12
   30384:	teqeq	r1, r3
   30388:	orrne	r1, r1, #524288	; 0x80000
   3038c:	pop	{r4, r5, pc}
   30390:	teq	r0, #0
   30394:	moveq	r1, #0
   30398:	bxeq	lr
   3039c:	push	{r4, r5, lr}
   303a0:	mov	r4, #1024	; 0x400
   303a4:	add	r4, r4, #50	; 0x32
   303a8:	mov	r5, #0
   303ac:	mov	r1, #0
   303b0:	b	3022c <__assert_fail@plt+0x1e688>
   303b4:	teq	r0, #0
   303b8:	moveq	r1, #0
   303bc:	bxeq	lr
   303c0:	push	{r4, r5, lr}
   303c4:	mov	r4, #1024	; 0x400
   303c8:	add	r4, r4, #50	; 0x32
   303cc:	ands	r5, r0, #-2147483648	; 0x80000000
   303d0:	rsbmi	r0, r0, #0
   303d4:	mov	r1, #0
   303d8:	b	3022c <__assert_fail@plt+0x1e688>
   303dc:	lsls	r2, r0, #1
   303e0:	asr	r1, r2, #3
   303e4:	rrx	r1, r1
   303e8:	lsl	r0, r2, #28
   303ec:	andsne	r3, r2, #-16777216	; 0xff000000
   303f0:	teqne	r3, #-16777216	; 0xff000000
   303f4:	eorne	r1, r1, #939524096	; 0x38000000
   303f8:	bxne	lr
   303fc:	bics	r2, r2, #-16777216	; 0xff000000
   30400:	bxeq	lr
   30404:	teq	r3, #-16777216	; 0xff000000
   30408:	orreq	r1, r1, #524288	; 0x80000
   3040c:	bxeq	lr
   30410:	push	{r4, r5, lr}
   30414:	mov	r4, #896	; 0x380
   30418:	and	r5, r1, #-2147483648	; 0x80000000
   3041c:	bic	r1, r1, #-2147483648	; 0x80000000
   30420:	b	3022c <__assert_fail@plt+0x1e688>
   30424:	orrs	r2, r0, r1
   30428:	bxeq	lr
   3042c:	push	{r4, r5, lr}
   30430:	mov	r5, #0
   30434:	b	30454 <__assert_fail@plt+0x1e8b0>
   30438:	orrs	r2, r0, r1
   3043c:	bxeq	lr
   30440:	push	{r4, r5, lr}
   30444:	ands	r5, r1, #-2147483648	; 0x80000000
   30448:	bpl	30454 <__assert_fail@plt+0x1e8b0>
   3044c:	rsbs	r0, r0, #0
   30450:	rsc	r1, r1, #0
   30454:	mov	r4, #1024	; 0x400
   30458:	add	r4, r4, #50	; 0x32
   3045c:	lsrs	ip, r1, #22
   30460:	beq	301d0 <__assert_fail@plt+0x1e62c>
   30464:	mov	r2, #3
   30468:	lsrs	ip, ip, #3
   3046c:	addne	r2, r2, #3
   30470:	lsrs	ip, ip, #3
   30474:	addne	r2, r2, #3
   30478:	add	r2, r2, ip, lsr #3
   3047c:	rsb	r3, r2, #32
   30480:	lsl	ip, r0, r3
   30484:	lsr	r0, r0, r2
   30488:	orr	r0, r0, r1, lsl r3
   3048c:	lsr	r1, r1, r2
   30490:	add	r4, r4, r2
   30494:	b	301d0 <__assert_fail@plt+0x1e62c>
   30498:	cmp	r3, #0
   3049c:	cmpeq	r2, #0
   304a0:	bne	304c4 <__assert_fail@plt+0x1e920>
   304a4:	cmp	r1, #0
   304a8:	movlt	r1, #-2147483648	; 0x80000000
   304ac:	movlt	r0, #0
   304b0:	blt	304c0 <__assert_fail@plt+0x1e91c>
   304b4:	cmpeq	r0, #0
   304b8:	mvnne	r1, #-2147483648	; 0x80000000
   304bc:	mvnne	r0, #0
   304c0:	b	305a8 <__assert_fail@plt+0x1ea04>
   304c4:	sub	sp, sp, #8
   304c8:	push	{sp, lr}
   304cc:	cmp	r1, #0
   304d0:	blt	304f0 <__assert_fail@plt+0x1e94c>
   304d4:	cmp	r3, #0
   304d8:	blt	30524 <__assert_fail@plt+0x1e980>
   304dc:	bl	305f8 <__assert_fail@plt+0x1ea54>
   304e0:	ldr	lr, [sp, #4]
   304e4:	add	sp, sp, #8
   304e8:	pop	{r2, r3}
   304ec:	bx	lr
   304f0:	rsbs	r0, r0, #0
   304f4:	sbc	r1, r1, r1, lsl #1
   304f8:	cmp	r3, #0
   304fc:	blt	30548 <__assert_fail@plt+0x1e9a4>
   30500:	bl	305f8 <__assert_fail@plt+0x1ea54>
   30504:	ldr	lr, [sp, #4]
   30508:	add	sp, sp, #8
   3050c:	pop	{r2, r3}
   30510:	rsbs	r0, r0, #0
   30514:	sbc	r1, r1, r1, lsl #1
   30518:	rsbs	r2, r2, #0
   3051c:	sbc	r3, r3, r3, lsl #1
   30520:	bx	lr
   30524:	rsbs	r2, r2, #0
   30528:	sbc	r3, r3, r3, lsl #1
   3052c:	bl	305f8 <__assert_fail@plt+0x1ea54>
   30530:	ldr	lr, [sp, #4]
   30534:	add	sp, sp, #8
   30538:	pop	{r2, r3}
   3053c:	rsbs	r0, r0, #0
   30540:	sbc	r1, r1, r1, lsl #1
   30544:	bx	lr
   30548:	rsbs	r2, r2, #0
   3054c:	sbc	r3, r3, r3, lsl #1
   30550:	bl	305f8 <__assert_fail@plt+0x1ea54>
   30554:	ldr	lr, [sp, #4]
   30558:	add	sp, sp, #8
   3055c:	pop	{r2, r3}
   30560:	rsbs	r2, r2, #0
   30564:	sbc	r3, r3, r3, lsl #1
   30568:	bx	lr
   3056c:	cmp	r3, #0
   30570:	cmpeq	r2, #0
   30574:	bne	3058c <__assert_fail@plt+0x1e9e8>
   30578:	cmp	r1, #0
   3057c:	cmpeq	r0, #0
   30580:	mvnne	r1, #0
   30584:	mvnne	r0, #0
   30588:	b	305a8 <__assert_fail@plt+0x1ea04>
   3058c:	sub	sp, sp, #8
   30590:	push	{sp, lr}
   30594:	bl	305f8 <__assert_fail@plt+0x1ea54>
   30598:	ldr	lr, [sp, #4]
   3059c:	add	sp, sp, #8
   305a0:	pop	{r2, r3}
   305a4:	bx	lr
   305a8:	push	{r1, lr}
   305ac:	mov	r0, #8
   305b0:	bl	116d0 <raise@plt>
   305b4:	pop	{r1, pc}
   305b8:	vmov	d6, r0, r1
   305bc:	vldr	d7, [pc, #36]	; 305e8 <__assert_fail@plt+0x1ea44>
   305c0:	vldr	d5, [pc, #40]	; 305f0 <__assert_fail@plt+0x1ea4c>
   305c4:	vmul.f64	d7, d6, d7
   305c8:	vcvt.u32.f64	s14, d7
   305cc:	vcvt.f64.u32	d4, s14
   305d0:	vmov	r1, s14
   305d4:	vmls.f64	d6, d4, d5
   305d8:	vcvt.u32.f64	s15, d6
   305dc:	vmov	r0, s15
   305e0:	bx	lr
   305e4:	nop			; (mov r0, r0)
   305e8:	andeq	r0, r0, r0
   305ec:	ldclcc	0, cr0, [r0]
   305f0:	andeq	r0, r0, r0
   305f4:	mvnsmi	r0, r0
   305f8:	cmp	r1, r3
   305fc:	cmpeq	r0, r2
   30600:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30604:	mov	r4, r0
   30608:	movcc	r0, #0
   3060c:	mov	r5, r1
   30610:	ldr	lr, [sp, #36]	; 0x24
   30614:	movcc	r1, r0
   30618:	bcc	30714 <__assert_fail@plt+0x1eb70>
   3061c:	cmp	r3, #0
   30620:	clzeq	ip, r2
   30624:	clzne	ip, r3
   30628:	addeq	ip, ip, #32
   3062c:	cmp	r5, #0
   30630:	clzeq	r1, r4
   30634:	addeq	r1, r1, #32
   30638:	clzne	r1, r5
   3063c:	sub	ip, ip, r1
   30640:	sub	sl, ip, #32
   30644:	lsl	r9, r3, ip
   30648:	rsb	fp, ip, #32
   3064c:	orr	r9, r9, r2, lsl sl
   30650:	orr	r9, r9, r2, lsr fp
   30654:	lsl	r8, r2, ip
   30658:	cmp	r5, r9
   3065c:	cmpeq	r4, r8
   30660:	movcc	r0, #0
   30664:	movcc	r1, r0
   30668:	bcc	30684 <__assert_fail@plt+0x1eae0>
   3066c:	mov	r0, #1
   30670:	subs	r4, r4, r8
   30674:	lsl	r1, r0, sl
   30678:	orr	r1, r1, r0, lsr fp
   3067c:	lsl	r0, r0, ip
   30680:	sbc	r5, r5, r9
   30684:	cmp	ip, #0
   30688:	beq	30714 <__assert_fail@plt+0x1eb70>
   3068c:	lsr	r6, r8, #1
   30690:	orr	r6, r6, r9, lsl #31
   30694:	lsr	r7, r9, #1
   30698:	mov	r2, ip
   3069c:	b	306c0 <__assert_fail@plt+0x1eb1c>
   306a0:	subs	r3, r4, r6
   306a4:	sbc	r8, r5, r7
   306a8:	adds	r3, r3, r3
   306ac:	adc	r8, r8, r8
   306b0:	adds	r4, r3, #1
   306b4:	adc	r5, r8, #0
   306b8:	subs	r2, r2, #1
   306bc:	beq	306dc <__assert_fail@plt+0x1eb38>
   306c0:	cmp	r5, r7
   306c4:	cmpeq	r4, r6
   306c8:	bcs	306a0 <__assert_fail@plt+0x1eafc>
   306cc:	adds	r4, r4, r4
   306d0:	adc	r5, r5, r5
   306d4:	subs	r2, r2, #1
   306d8:	bne	306c0 <__assert_fail@plt+0x1eb1c>
   306dc:	lsr	r3, r4, ip
   306e0:	orr	r3, r3, r5, lsl fp
   306e4:	lsr	r2, r5, ip
   306e8:	orr	r3, r3, r5, lsr sl
   306ec:	adds	r0, r0, r4
   306f0:	mov	r4, r3
   306f4:	lsl	r3, r2, ip
   306f8:	orr	r3, r3, r4, lsl sl
   306fc:	lsl	ip, r4, ip
   30700:	orr	r3, r3, r4, lsr fp
   30704:	adc	r1, r1, r5
   30708:	subs	r0, r0, ip
   3070c:	mov	r5, r2
   30710:	sbc	r1, r1, r3
   30714:	cmp	lr, #0
   30718:	strdne	r4, [lr]
   3071c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30720:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   30724:	mov	r7, r0
   30728:	ldr	r6, [pc, #72]	; 30778 <__assert_fail@plt+0x1ebd4>
   3072c:	ldr	r5, [pc, #72]	; 3077c <__assert_fail@plt+0x1ebd8>
   30730:	add	r6, pc, r6
   30734:	add	r5, pc, r5
   30738:	sub	r6, r6, r5
   3073c:	mov	r8, r1
   30740:	mov	r9, r2
   30744:	bl	11674 <pthread_mutex_unlock@plt-0x20>
   30748:	asrs	r6, r6, #2
   3074c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   30750:	mov	r4, #0
   30754:	add	r4, r4, #1
   30758:	ldr	r3, [r5], #4
   3075c:	mov	r2, r9
   30760:	mov	r1, r8
   30764:	mov	r0, r7
   30768:	blx	r3
   3076c:	cmp	r6, r4
   30770:	bne	30754 <__assert_fail@plt+0x1ebb0>
   30774:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   30778:	ldrdeq	r2, [r1], -ip
   3077c:	ldrdeq	r2, [r1], -r4
   30780:	bx	lr
   30784:	ldr	r3, [pc, #12]	; 30798 <__assert_fail@plt+0x1ebf4>
   30788:	mov	r1, #0
   3078c:	add	r3, pc, r3
   30790:	ldr	r2, [r3]
   30794:	b	119dc <__cxa_atexit@plt>
   30798:	andeq	r2, r1, r4, lsr sl

Disassembly of section .fini:

0003079c <.fini>:
   3079c:	push	{r3, lr}
   307a0:	pop	{r3, pc}
