
../repos/coreutils/src/join:     file format elf32-littlearm


Disassembly of section .init:

00010e48 <.init>:
   10e48:	push	{r3, lr}
   10e4c:	bl	11d24 <__assert_fail@plt+0xbf8>
   10e50:	pop	{r3, pc}

Disassembly of section .plt:

00010e54 <fdopen@plt-0x14>:
   10e54:	push	{lr}		; (str lr, [sp, #-4]!)
   10e58:	ldr	lr, [pc, #4]	; 10e64 <fdopen@plt-0x4>
   10e5c:	add	lr, pc, lr
   10e60:	ldr	pc, [lr, #8]!
   10e64:	muleq	r1, ip, r1

00010e68 <fdopen@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #94208	; 0x17000
   10e70:	ldr	pc, [ip, #412]!	; 0x19c

00010e74 <calloc@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #94208	; 0x17000
   10e7c:	ldr	pc, [ip, #404]!	; 0x194

00010e80 <fputs_unlocked@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #94208	; 0x17000
   10e88:	ldr	pc, [ip, #396]!	; 0x18c

00010e8c <strcmp@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #94208	; 0x17000
   10e94:	ldr	pc, [ip, #388]!	; 0x184

00010e98 <posix_fadvise64@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #94208	; 0x17000
   10ea0:	ldr	pc, [ip, #380]!	; 0x17c

00010ea4 <fflush@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #94208	; 0x17000
   10eac:	ldr	pc, [ip, #372]!	; 0x174

00010eb0 <free@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #94208	; 0x17000
   10eb8:	ldr	pc, [ip, #364]!	; 0x16c

00010ebc <_exit@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #94208	; 0x17000
   10ec4:	ldr	pc, [ip, #356]!	; 0x164

00010ec8 <memcpy@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #94208	; 0x17000
   10ed0:	ldr	pc, [ip, #348]!	; 0x15c

00010ed4 <mbsinit@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #94208	; 0x17000
   10edc:	ldr	pc, [ip, #340]!	; 0x154

00010ee0 <fwrite_unlocked@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #94208	; 0x17000
   10ee8:	ldr	pc, [ip, #332]!	; 0x14c

00010eec <memcmp@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #94208	; 0x17000
   10ef4:	ldr	pc, [ip, #324]!	; 0x144

00010ef8 <fputc_unlocked@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #94208	; 0x17000
   10f00:	ldr	pc, [ip, #316]!	; 0x13c

00010f04 <getc_unlocked@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #94208	; 0x17000
   10f0c:	ldr	pc, [ip, #308]!	; 0x134

00010f10 <dcgettext@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #94208	; 0x17000
   10f18:	ldr	pc, [ip, #300]!	; 0x12c

00010f1c <realloc@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #94208	; 0x17000
   10f24:	ldr	pc, [ip, #292]!	; 0x124

00010f28 <textdomain@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #94208	; 0x17000
   10f30:	ldr	pc, [ip, #284]!	; 0x11c

00010f34 <iswprint@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #94208	; 0x17000
   10f3c:	ldr	pc, [ip, #276]!	; 0x114

00010f40 <lseek64@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #94208	; 0x17000
   10f48:	ldr	pc, [ip, #268]!	; 0x10c

00010f4c <__ctype_get_mb_cur_max@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #94208	; 0x17000
   10f54:	ldr	pc, [ip, #260]!	; 0x104

00010f58 <__fpending@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #94208	; 0x17000
   10f60:	ldr	pc, [ip, #252]!	; 0xfc

00010f64 <ferror_unlocked@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #94208	; 0x17000
   10f6c:	ldr	pc, [ip, #244]!	; 0xf4

00010f70 <mbrtowc@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #94208	; 0x17000
   10f78:	ldr	pc, [ip, #236]!	; 0xec

00010f7c <error@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #94208	; 0x17000
   10f84:	ldr	pc, [ip, #228]!	; 0xe4

00010f88 <strcoll@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #94208	; 0x17000
   10f90:	ldr	pc, [ip, #220]!	; 0xdc

00010f94 <malloc@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #94208	; 0x17000
   10f9c:	ldr	pc, [ip, #212]!	; 0xd4

00010fa0 <__libc_start_main@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #94208	; 0x17000
   10fa8:	ldr	pc, [ip, #204]!	; 0xcc

00010fac <__freading@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #94208	; 0x17000
   10fb4:	ldr	pc, [ip, #196]!	; 0xc4

00010fb8 <__ctype_toupper_loc@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #94208	; 0x17000
   10fc0:	ldr	pc, [ip, #188]!	; 0xbc

00010fc4 <__gmon_start__@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #94208	; 0x17000
   10fcc:	ldr	pc, [ip, #180]!	; 0xb4

00010fd0 <getopt_long@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #94208	; 0x17000
   10fd8:	ldr	pc, [ip, #172]!	; 0xac

00010fdc <__ctype_b_loc@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #94208	; 0x17000
   10fe4:	ldr	pc, [ip, #164]!	; 0xa4

00010fe8 <exit@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #94208	; 0x17000
   10ff0:	ldr	pc, [ip, #156]!	; 0x9c

00010ff4 <strtoul@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #94208	; 0x17000
   10ffc:	ldr	pc, [ip, #148]!	; 0x94

00011000 <strlen@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #94208	; 0x17000
   11008:	ldr	pc, [ip, #140]!	; 0x8c

0001100c <strchr@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #94208	; 0x17000
   11014:	ldr	pc, [ip, #132]!	; 0x84

00011018 <__errno_location@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #94208	; 0x17000
   11020:	ldr	pc, [ip, #124]!	; 0x7c

00011024 <__cxa_atexit@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #94208	; 0x17000
   1102c:	ldr	pc, [ip, #116]!	; 0x74

00011030 <memset@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #94208	; 0x17000
   11038:	ldr	pc, [ip, #108]!	; 0x6c

0001103c <__printf_chk@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #94208	; 0x17000
   11044:	ldr	pc, [ip, #100]!	; 0x64

00011048 <fileno@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #94208	; 0x17000
   11050:	ldr	pc, [ip, #92]!	; 0x5c

00011054 <strtoumax@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #94208	; 0x17000
   1105c:	ldr	pc, [ip, #84]!	; 0x54

00011060 <__fprintf_chk@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #94208	; 0x17000
   11068:	ldr	pc, [ip, #76]!	; 0x4c

0001106c <memchr@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #94208	; 0x17000
   11074:	ldr	pc, [ip, #68]!	; 0x44

00011078 <fclose@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #94208	; 0x17000
   11080:	ldr	pc, [ip, #60]!	; 0x3c

00011084 <fseeko64@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #94208	; 0x17000
   1108c:	ldr	pc, [ip, #52]!	; 0x34

00011090 <fcntl64@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #94208	; 0x17000
   11098:	ldr	pc, [ip, #44]!	; 0x2c

0001109c <setlocale@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #94208	; 0x17000
   110a4:	ldr	pc, [ip, #36]!	; 0x24

000110a8 <strrchr@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #94208	; 0x17000
   110b0:	ldr	pc, [ip, #28]!

000110b4 <nl_langinfo@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #94208	; 0x17000
   110bc:	ldr	pc, [ip, #20]!

000110c0 <fopen64@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #94208	; 0x17000
   110c8:	ldr	pc, [ip, #12]!

000110cc <strpbrk@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #94208	; 0x17000
   110d4:	ldr	pc, [ip, #4]!

000110d8 <bindtextdomain@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #90112	; 0x16000
   110e0:	ldr	pc, [ip, #4092]!	; 0xffc

000110e4 <fputs@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #90112	; 0x16000
   110ec:	ldr	pc, [ip, #4084]!	; 0xff4

000110f0 <strncmp@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #90112	; 0x16000
   110f8:	ldr	pc, [ip, #4076]!	; 0xfec

000110fc <abort@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #90112	; 0x16000
   11104:	ldr	pc, [ip, #4068]!	; 0xfe4

00011108 <feof_unlocked@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #90112	; 0x16000
   11110:	ldr	pc, [ip, #4060]!	; 0xfdc

00011114 <close@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #90112	; 0x16000
   1111c:	ldr	pc, [ip, #4052]!	; 0xfd4

00011120 <putchar_unlocked@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #90112	; 0x16000
   11128:	ldr	pc, [ip, #4044]!	; 0xfcc

0001112c <__assert_fail@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #90112	; 0x16000
   11134:	ldr	pc, [ip, #4036]!	; 0xfc4

Disassembly of section .text:

00011138 <.text>:
   11138:	push	{r4, lr}
   1113c:	bl	11018 <__errno_location@plt>
   11140:	mov	r3, #12
   11144:	str	r3, [r0]
   11148:	mov	r0, #0
   1114c:	pop	{r4, pc}
   11150:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11154:	mov	r5, #0
   11158:	sub	sp, sp, #84	; 0x54
   1115c:	mov	r8, r0
   11160:	mov	r7, r1
   11164:	ldr	r0, [r1]
   11168:	str	r5, [sp, #28]
   1116c:	ldr	r4, [pc, #2800]	; 11c64 <__assert_fail@plt+0xb38>
   11170:	str	r5, [sp, #32]
   11174:	str	r5, [sp, #48]	; 0x30
   11178:	str	r5, [sp, #52]	; 0x34
   1117c:	bl	13038 <__assert_fail@plt+0x1f0c>
   11180:	ldr	r1, [pc, #2784]	; 11c68 <__assert_fail@plt+0xb3c>
   11184:	mov	r0, #6
   11188:	bl	1109c <setlocale@plt>
   1118c:	ldr	r1, [pc, #2776]	; 11c6c <__assert_fail@plt+0xb40>
   11190:	ldr	r0, [pc, #2776]	; 11c70 <__assert_fail@plt+0xb44>
   11194:	bl	110d8 <bindtextdomain@plt>
   11198:	ldr	r0, [pc, #2768]	; 11c70 <__assert_fail@plt+0xb44>
   1119c:	bl	10f28 <textdomain@plt>
   111a0:	mov	r0, #3
   111a4:	ldr	r9, [pc, #2760]	; 11c74 <__assert_fail@plt+0xb48>
   111a8:	bl	12ea4 <__assert_fail@plt+0x1d78>
   111ac:	ldr	r6, [pc, #2756]	; 11c78 <__assert_fail@plt+0xb4c>
   111b0:	strb	r0, [r4, #1]
   111b4:	ldr	r0, [pc, #2752]	; 11c7c <__assert_fail@plt+0xb50>
   111b8:	bl	15d88 <__assert_fail@plt+0x4c5c>
   111bc:	ldr	r0, [pc, #2748]	; 11c80 <__assert_fail@plt+0xb54>
   111c0:	bl	15d88 <__assert_fail@plt+0x4c5c>
   111c4:	mov	r3, #1
   111c8:	str	r5, [r4, #40]	; 0x28
   111cc:	strb	r5, [r4, #44]	; 0x2c
   111d0:	strb	r5, [r4, #45]	; 0x2d
   111d4:	strb	r5, [r4, #46]	; 0x2e
   111d8:	strb	r3, [r4, #108]	; 0x6c
   111dc:	mov	r5, #0
   111e0:	mov	r3, r9
   111e4:	ldr	r2, [pc, #2712]	; 11c84 <__assert_fail@plt+0xb58>
   111e8:	mov	r1, r7
   111ec:	mov	r0, r8
   111f0:	str	r5, [sp]
   111f4:	bl	10fd0 <getopt_long@plt>
   111f8:	cmn	r0, #1
   111fc:	bne	112ec <__assert_fail@plt+0x1c0>
   11200:	str	r5, [sp, #28]
   11204:	ldr	r5, [pc, #2684]	; 11c88 <__assert_fail@plt+0xb5c>
   11208:	ldr	r0, [r5]
   1120c:	cmp	r0, r8
   11210:	blt	11640 <__assert_fail@plt+0x514>
   11214:	ldr	r5, [sp, #32]
   11218:	cmp	r5, #2
   1121c:	bne	11670 <__assert_fail@plt+0x544>
   11220:	ldr	r3, [sp, #48]	; 0x30
   11224:	cmp	r3, #0
   11228:	beq	11244 <__assert_fail@plt+0x118>
   1122c:	mov	r1, #0
   11230:	ldr	r0, [pc, #2644]	; 11c8c <__assert_fail@plt+0xb60>
   11234:	bl	11dd8 <__assert_fail@plt+0xcac>
   11238:	mov	r1, #0
   1123c:	ldr	r0, [pc, #2636]	; 11c90 <__assert_fail@plt+0xb64>
   11240:	bl	11dd8 <__assert_fail@plt+0xcac>
   11244:	ldr	r3, [sp, #52]	; 0x34
   11248:	cmp	r3, #0
   1124c:	beq	11268 <__assert_fail@plt+0x13c>
   11250:	mov	r1, #1
   11254:	ldr	r0, [pc, #2608]	; 11c8c <__assert_fail@plt+0xb60>
   11258:	bl	11dd8 <__assert_fail@plt+0xcac>
   1125c:	mov	r1, #1
   11260:	ldr	r0, [pc, #2600]	; 11c90 <__assert_fail@plt+0xb64>
   11264:	bl	11dd8 <__assert_fail@plt+0xcac>
   11268:	ldr	r5, [pc, #2596]	; 11c94 <__assert_fail@plt+0xb68>
   1126c:	ldr	r3, [r5, #8]
   11270:	cmn	r3, #1
   11274:	moveq	r3, #0
   11278:	streq	r3, [r5, #8]
   1127c:	ldr	r3, [r5, #12]
   11280:	ldr	r6, [r4, #48]	; 0x30
   11284:	ldr	r1, [pc, #2572]	; 11c98 <__assert_fail@plt+0xb6c>
   11288:	cmn	r3, #1
   1128c:	moveq	r3, #0
   11290:	mov	r0, r6
   11294:	streq	r3, [r5, #12]
   11298:	bl	10e8c <strcmp@plt>
   1129c:	cmp	r0, #0
   112a0:	ldreq	r3, [pc, #2548]	; 11c9c <__assert_fail@plt+0xb70>
   112a4:	ldreq	r7, [r3]
   112a8:	beq	112bc <__assert_fail@plt+0x190>
   112ac:	mov	r0, r6
   112b0:	ldr	r1, [pc, #2536]	; 11ca0 <__assert_fail@plt+0xb74>
   112b4:	bl	12d28 <__assert_fail@plt+0x1bfc>
   112b8:	mov	r7, r0
   112bc:	cmp	r7, #0
   112c0:	bne	116d0 <__assert_fail@plt+0x5a4>
   112c4:	bl	11018 <__errno_location@plt>
   112c8:	ldr	r5, [r0]
   112cc:	ldr	r2, [r4, #48]	; 0x30
   112d0:	mov	r1, #3
   112d4:	mov	r0, #0
   112d8:	bl	144f8 <__assert_fail@plt+0x33cc>
   112dc:	mov	r3, r0
   112e0:	ldr	r2, [pc, #2492]	; 11ca4 <__assert_fail@plt+0xb78>
   112e4:	mov	r1, r5
   112e8:	b	114a4 <__assert_fail@plt+0x378>
   112ec:	cmp	r0, #105	; 0x69
   112f0:	str	r5, [sp, #24]
   112f4:	beq	1150c <__assert_fail@plt+0x3e0>
   112f8:	bgt	11378 <__assert_fail@plt+0x24c>
   112fc:	cmp	r0, #49	; 0x31
   11300:	beq	11518 <__assert_fail@plt+0x3ec>
   11304:	bgt	1134c <__assert_fail@plt+0x220>
   11308:	cmn	r0, #2
   1130c:	beq	11638 <__assert_fail@plt+0x50c>
   11310:	cmp	r0, #1
   11314:	beq	11610 <__assert_fail@plt+0x4e4>
   11318:	cmn	r0, #3
   1131c:	bne	11418 <__assert_fail@plt+0x2ec>
   11320:	ldr	r3, [pc, #2432]	; 11ca8 <__assert_fail@plt+0xb7c>
   11324:	ldr	r0, [pc, #2432]	; 11cac <__assert_fail@plt+0xb80>
   11328:	ldr	r2, [pc, #2432]	; 11cb0 <__assert_fail@plt+0xb84>
   1132c:	stm	sp, {r3, r5}
   11330:	ldr	r3, [pc, #2428]	; 11cb4 <__assert_fail@plt+0xb88>
   11334:	ldr	r1, [pc, #2428]	; 11cb8 <__assert_fail@plt+0xb8c>
   11338:	ldr	r0, [r0]
   1133c:	ldr	r3, [r3]
   11340:	bl	14b14 <__assert_fail@plt+0x39e8>
   11344:	mov	r0, r5
   11348:	bl	10fe8 <exit@plt>
   1134c:	cmp	r0, #97	; 0x61
   11350:	beq	11448 <__assert_fail@plt+0x31c>
   11354:	cmp	r0, #101	; 0x65
   11358:	beq	114c8 <__assert_fail@plt+0x39c>
   1135c:	cmp	r0, #50	; 0x32
   11360:	bne	11418 <__assert_fail@plt+0x2ec>
   11364:	ldr	r0, [r6]
   11368:	bl	123d0 <__assert_fail@plt+0x12a4>
   1136c:	mov	r1, r0
   11370:	ldr	r0, [pc, #2328]	; 11c90 <__assert_fail@plt+0xb64>
   11374:	b	11528 <__assert_fail@plt+0x3fc>
   11378:	cmp	r0, #118	; 0x76
   1137c:	beq	11444 <__assert_fail@plt+0x318>
   11380:	bgt	11404 <__assert_fail@plt+0x2d8>
   11384:	cmp	r0, #111	; 0x6f
   11388:	beq	11550 <__assert_fail@plt+0x424>
   1138c:	cmp	r0, #116	; 0x74
   11390:	beq	11580 <__assert_fail@plt+0x454>
   11394:	cmp	r0, #106	; 0x6a
   11398:	bne	11418 <__assert_fail@plt+0x2ec>
   1139c:	ldr	r0, [r6]
   113a0:	ldrb	r3, [r0]
   113a4:	sub	r2, r3, #49	; 0x31
   113a8:	cmp	r2, #1
   113ac:	bhi	11530 <__assert_fail@plt+0x404>
   113b0:	ldrb	r2, [r0, #1]
   113b4:	cmp	r2, #0
   113b8:	bne	11530 <__assert_fail@plt+0x404>
   113bc:	ldr	r2, [pc, #2244]	; 11c88 <__assert_fail@plt+0xb5c>
   113c0:	ldr	r2, [r2]
   113c4:	sub	r2, r2, #-1073741823	; 0xc0000001
   113c8:	ldr	r2, [r7, r2, lsl #2]
   113cc:	add	r2, r2, #2
   113d0:	cmp	r0, r2
   113d4:	bne	11530 <__assert_fail@plt+0x404>
   113d8:	sub	r3, r3, #50	; 0x32
   113dc:	add	r2, sp, #80	; 0x50
   113e0:	clz	r3, r3
   113e4:	lsr	r3, r3, #5
   113e8:	add	r1, r2, r3, lsl #2
   113ec:	add	r3, r3, #1
   113f0:	ldr	r2, [r1, #-32]	; 0xffffffe0
   113f4:	add	r2, r2, #1
   113f8:	str	r2, [r1, #-32]	; 0xffffffe0
   113fc:	str	r3, [sp, #24]
   11400:	b	114bc <__assert_fail@plt+0x390>
   11404:	cmp	r0, #256	; 0x100
   11408:	beq	11608 <__assert_fail@plt+0x4dc>
   1140c:	bgt	11420 <__assert_fail@plt+0x2f4>
   11410:	cmp	r0, #122	; 0x7a
   11414:	beq	115f0 <__assert_fail@plt+0x4c4>
   11418:	mov	r0, #1
   1141c:	b	1163c <__assert_fail@plt+0x510>
   11420:	movw	r3, #257	; 0x101
   11424:	cmp	r0, r3
   11428:	beq	115fc <__assert_fail@plt+0x4d0>
   1142c:	movw	r3, #258	; 0x102
   11430:	cmp	r0, r3
   11434:	bne	11418 <__assert_fail@plt+0x2ec>
   11438:	mov	r3, #1
   1143c:	strb	r3, [r4, #111]	; 0x6f
   11440:	b	114bc <__assert_fail@plt+0x390>
   11444:	strb	r5, [r4, #108]	; 0x6c
   11448:	ldr	r3, [pc, #2072]	; 11c68 <__assert_fail@plt+0xb3c>
   1144c:	mov	r2, #10
   11450:	mov	r1, #0
   11454:	str	r3, [sp]
   11458:	add	r3, sp, #68	; 0x44
   1145c:	ldr	r0, [r6]
   11460:	bl	15088 <__assert_fail@plt+0x3f5c>
   11464:	cmp	r0, #0
   11468:	bne	1147c <__assert_fail@plt+0x350>
   1146c:	ldr	r3, [sp, #68]	; 0x44
   11470:	sub	r2, r3, #1
   11474:	cmp	r2, #1
   11478:	bls	114ac <__assert_fail@plt+0x380>
   1147c:	ldr	r1, [pc, #2104]	; 11cbc <__assert_fail@plt+0xb90>
   11480:	mov	r2, #5
   11484:	mov	r0, #0
   11488:	bl	10f10 <dcgettext@plt>
   1148c:	mov	r4, r0
   11490:	ldr	r0, [r6]
   11494:	bl	14638 <__assert_fail@plt+0x350c>
   11498:	mov	r3, r0
   1149c:	mov	r2, r4
   114a0:	mov	r1, #0
   114a4:	mov	r0, #1
   114a8:	bl	10f7c <error@plt>
   114ac:	cmp	r3, #1
   114b0:	movne	r3, #1
   114b4:	strbeq	r3, [r4, #109]	; 0x6d
   114b8:	strbne	r3, [r4, #110]	; 0x6e
   114bc:	ldr	r3, [sp, #24]
   114c0:	str	r3, [sp, #28]
   114c4:	b	111dc <__assert_fail@plt+0xb0>
   114c8:	ldr	r0, [r4, #56]	; 0x38
   114cc:	ldr	sl, [r6]
   114d0:	cmp	r0, #0
   114d4:	beq	11504 <__assert_fail@plt+0x3d8>
   114d8:	mov	r1, sl
   114dc:	bl	10e8c <strcmp@plt>
   114e0:	cmp	r0, #0
   114e4:	beq	11504 <__assert_fail@plt+0x3d8>
   114e8:	ldr	r1, [pc, #2000]	; 11cc0 <__assert_fail@plt+0xb94>
   114ec:	mov	r2, #5
   114f0:	mov	r0, #0
   114f4:	bl	10f10 <dcgettext@plt>
   114f8:	mov	r2, r0
   114fc:	mov	r1, #0
   11500:	b	11740 <__assert_fail@plt+0x614>
   11504:	str	sl, [r4, #56]	; 0x38
   11508:	b	114bc <__assert_fail@plt+0x390>
   1150c:	mov	r3, #1
   11510:	strb	r3, [r4]
   11514:	b	114bc <__assert_fail@plt+0x390>
   11518:	ldr	r0, [r6]
   1151c:	bl	123d0 <__assert_fail@plt+0x12a4>
   11520:	mov	r1, r0
   11524:	ldr	r0, [pc, #1888]	; 11c8c <__assert_fail@plt+0xb60>
   11528:	bl	11dd8 <__assert_fail@plt+0xcac>
   1152c:	b	114bc <__assert_fail@plt+0x390>
   11530:	ldr	r5, [pc, #1884]	; 11c94 <__assert_fail@plt+0xb68>
   11534:	bl	123d0 <__assert_fail@plt+0x12a4>
   11538:	mov	r1, r0
   1153c:	add	r0, r5, #8
   11540:	bl	11dd8 <__assert_fail@plt+0xcac>
   11544:	add	r0, r5, #12
   11548:	ldr	r1, [r5, #8]
   1154c:	b	11528 <__assert_fail@plt+0x3fc>
   11550:	ldr	r5, [r6]
   11554:	ldr	r1, [pc, #1896]	; 11cc4 <__assert_fail@plt+0xb98>
   11558:	mov	r0, r5
   1155c:	bl	10e8c <strcmp@plt>
   11560:	cmp	r0, #0
   11564:	moveq	r3, #1
   11568:	strbeq	r3, [r4, #60]	; 0x3c
   1156c:	beq	114bc <__assert_fail@plt+0x390>
   11570:	mov	r0, r5
   11574:	bl	1246c <__assert_fail@plt+0x1340>
   11578:	mov	r3, #3
   1157c:	b	113fc <__assert_fail@plt+0x2d0>
   11580:	ldr	r0, [r6]
   11584:	ldrb	r3, [r0]
   11588:	cmp	r3, #0
   1158c:	beq	115b8 <__assert_fail@plt+0x48c>
   11590:	ldrb	r2, [r0, #1]
   11594:	cmp	r2, #0
   11598:	beq	115bc <__assert_fail@plt+0x490>
   1159c:	ldr	r1, [pc, #1828]	; 11cc8 <__assert_fail@plt+0xb9c>
   115a0:	bl	10e8c <strcmp@plt>
   115a4:	cmp	r0, #0
   115a8:	beq	115e0 <__assert_fail@plt+0x4b4>
   115ac:	mov	r2, #5
   115b0:	ldr	r1, [pc, #1812]	; 11ccc <__assert_fail@plt+0xba0>
   115b4:	b	11484 <__assert_fail@plt+0x358>
   115b8:	mov	r3, #10
   115bc:	ldr	r2, [pc, #1744]	; 11c94 <__assert_fail@plt+0xb68>
   115c0:	ldr	r1, [r2, #4]
   115c4:	cmp	r1, #0
   115c8:	blt	115e8 <__assert_fail@plt+0x4bc>
   115cc:	cmp	r1, r3
   115d0:	beq	115e8 <__assert_fail@plt+0x4bc>
   115d4:	mov	r2, #5
   115d8:	ldr	r1, [pc, #1776]	; 11cd0 <__assert_fail@plt+0xba4>
   115dc:	b	114f0 <__assert_fail@plt+0x3c4>
   115e0:	mov	r3, #0
   115e4:	b	115bc <__assert_fail@plt+0x490>
   115e8:	str	r3, [r2, #4]
   115ec:	b	114bc <__assert_fail@plt+0x390>
   115f0:	ldr	r3, [pc, #1692]	; 11c94 <__assert_fail@plt+0xb68>
   115f4:	strb	r5, [r3]
   115f8:	b	114bc <__assert_fail@plt+0x390>
   115fc:	mov	r3, #2
   11600:	str	r3, [r4, #40]	; 0x28
   11604:	b	114bc <__assert_fail@plt+0x390>
   11608:	mov	r3, #1
   1160c:	b	11600 <__assert_fail@plt+0x4d4>
   11610:	add	r3, sp, #24
   11614:	add	r2, sp, #48	; 0x30
   11618:	add	r1, sp, #40	; 0x28
   1161c:	str	r3, [sp, #4]
   11620:	add	r3, sp, #28
   11624:	str	r3, [sp]
   11628:	add	r3, sp, #32
   1162c:	ldr	r0, [r6]
   11630:	bl	129e0 <__assert_fail@plt+0x18b4>
   11634:	b	114bc <__assert_fail@plt+0x390>
   11638:	mov	r0, r5
   1163c:	bl	12718 <__assert_fail@plt+0x15ec>
   11640:	add	r3, r0, #1
   11644:	add	r2, sp, #48	; 0x30
   11648:	add	r1, sp, #40	; 0x28
   1164c:	str	r3, [r5]
   11650:	add	r3, sp, #24
   11654:	str	r3, [sp, #4]
   11658:	add	r3, sp, #28
   1165c:	str	r3, [sp]
   11660:	add	r3, sp, #32
   11664:	ldr	r0, [r7, r0, lsl #2]
   11668:	bl	129e0 <__assert_fail@plt+0x18b4>
   1166c:	b	11208 <__assert_fail@plt+0xdc>
   11670:	cmp	r5, #0
   11674:	mov	r2, #5
   11678:	bne	1169c <__assert_fail@plt+0x570>
   1167c:	ldr	r1, [pc, #1616]	; 11cd4 <__assert_fail@plt+0xba8>
   11680:	mov	r0, r5
   11684:	bl	10f10 <dcgettext@plt>
   11688:	mov	r2, r0
   1168c:	mov	r1, r5
   11690:	mov	r0, r5
   11694:	bl	10f7c <error@plt>
   11698:	b	11418 <__assert_fail@plt+0x2ec>
   1169c:	ldr	r1, [pc, #1588]	; 11cd8 <__assert_fail@plt+0xbac>
   116a0:	mov	r0, #0
   116a4:	sub	r8, r8, #-1073741823	; 0xc0000001
   116a8:	bl	10f10 <dcgettext@plt>
   116ac:	mov	r4, r0
   116b0:	ldr	r0, [r7, r8, lsl #2]
   116b4:	bl	14638 <__assert_fail@plt+0x350c>
   116b8:	mov	r1, #0
   116bc:	mov	r3, r0
   116c0:	mov	r2, r4
   116c4:	mov	r0, r1
   116c8:	bl	10f7c <error@plt>
   116cc:	b	11418 <__assert_fail@plt+0x2ec>
   116d0:	ldr	r6, [r4, #52]	; 0x34
   116d4:	ldr	r1, [pc, #1468]	; 11c98 <__assert_fail@plt+0xb6c>
   116d8:	mov	r0, r6
   116dc:	bl	10e8c <strcmp@plt>
   116e0:	cmp	r0, #0
   116e4:	ldreq	r3, [pc, #1456]	; 11c9c <__assert_fail@plt+0xb70>
   116e8:	ldreq	r6, [r3]
   116ec:	beq	11700 <__assert_fail@plt+0x5d4>
   116f0:	mov	r0, r6
   116f4:	ldr	r1, [pc, #1444]	; 11ca0 <__assert_fail@plt+0xb74>
   116f8:	bl	12d28 <__assert_fail@plt+0x1bfc>
   116fc:	mov	r6, r0
   11700:	cmp	r6, #0
   11704:	bne	11718 <__assert_fail@plt+0x5ec>
   11708:	bl	11018 <__errno_location@plt>
   1170c:	ldr	r5, [r0]
   11710:	ldr	r2, [r4, #52]	; 0x34
   11714:	b	112d0 <__assert_fail@plt+0x1a4>
   11718:	cmp	r7, r6
   1171c:	bne	11748 <__assert_fail@plt+0x61c>
   11720:	bl	11018 <__errno_location@plt>
   11724:	ldr	r4, [r0]
   11728:	mov	r2, #5
   1172c:	mov	r0, #0
   11730:	ldr	r1, [pc, #1444]	; 11cdc <__assert_fail@plt+0xbb0>
   11734:	bl	10f10 <dcgettext@plt>
   11738:	mov	r2, r0
   1173c:	mov	r1, r4
   11740:	mov	r0, #1
   11744:	bl	10f7c <error@plt>
   11748:	mov	r1, #2
   1174c:	mov	r0, r7
   11750:	mov	r8, #0
   11754:	bl	12c00 <__assert_fail@plt+0x1ad4>
   11758:	mov	r1, #2
   1175c:	mov	r0, r6
   11760:	bl	12c00 <__assert_fail@plt+0x1ad4>
   11764:	mov	r2, #1
   11768:	add	r1, sp, #56	; 0x38
   1176c:	str	r8, [sp, #56]	; 0x38
   11770:	mov	r0, r7
   11774:	str	r8, [sp, #60]	; 0x3c
   11778:	str	r8, [sp, #64]	; 0x40
   1177c:	bl	12350 <__assert_fail@plt+0x1224>
   11780:	mov	r2, #2
   11784:	add	r1, sp, #68	; 0x44
   11788:	str	r8, [sp, #68]	; 0x44
   1178c:	mov	r0, r6
   11790:	str	r8, [sp, #72]	; 0x48
   11794:	str	r8, [sp, #76]	; 0x4c
   11798:	bl	12350 <__assert_fail@plt+0x1224>
   1179c:	ldrb	r3, [r4, #60]	; 0x3c
   117a0:	cmp	r3, r8
   117a4:	ldr	r3, [sp, #56]	; 0x38
   117a8:	beq	117dc <__assert_fail@plt+0x6b0>
   117ac:	cmp	r3, r8
   117b0:	mov	r2, r3
   117b4:	ldrne	r2, [sp, #64]	; 0x40
   117b8:	ldrne	r2, [r2]
   117bc:	ldrne	r2, [r2, #12]
   117c0:	str	r2, [r4, #100]	; 0x64
   117c4:	ldr	r2, [sp, #68]	; 0x44
   117c8:	cmp	r2, #0
   117cc:	ldrne	r2, [sp, #76]	; 0x4c
   117d0:	ldrne	r2, [r2]
   117d4:	ldrne	r2, [r2, #12]
   117d8:	str	r2, [r4, #104]	; 0x68
   117dc:	ldrb	r2, [r4, #111]	; 0x6f
   117e0:	cmp	r2, #0
   117e4:	beq	117fc <__assert_fail@plt+0x6d0>
   117e8:	cmp	r3, #0
   117ec:	ldr	r2, [sp, #68]	; 0x44
   117f0:	bne	118d0 <__assert_fail@plt+0x7a4>
   117f4:	cmp	r2, #0
   117f8:	bne	11944 <__assert_fail@plt+0x818>
   117fc:	ldr	sl, [pc, #1244]	; 11ce0 <__assert_fail@plt+0xbb4>
   11800:	mov	r8, #1
   11804:	ldr	r1, [sp, #56]	; 0x38
   11808:	cmp	r1, #0
   1180c:	beq	1181c <__assert_fail@plt+0x6f0>
   11810:	ldr	r3, [sp, #68]	; 0x44
   11814:	cmp	r3, #0
   11818:	bne	1194c <__assert_fail@plt+0x820>
   1181c:	ldr	r3, [r4, #40]	; 0x28
   11820:	mov	r5, #0
   11824:	str	r5, [sp, #36]	; 0x24
   11828:	cmp	r3, #2
   1182c:	beq	11844 <__assert_fail@plt+0x718>
   11830:	ldrb	r3, [r4, #45]	; 0x2d
   11834:	cmp	r3, r5
   11838:	ldrbne	r5, [r4, #46]	; 0x2e
   1183c:	moveq	r5, #1
   11840:	eorne	r5, r5, #1
   11844:	ldrb	r2, [r4, #109]	; 0x6d
   11848:	orr	r3, r2, r5
   1184c:	cmp	r1, #0
   11850:	moveq	r3, #0
   11854:	andne	r3, r3, #1
   11858:	cmp	r3, #0
   1185c:	bne	11b60 <__assert_fail@plt+0xa34>
   11860:	ldrb	r3, [r4, #110]	; 0x6e
   11864:	orrs	r2, r5, r3
   11868:	bne	11bd8 <__assert_fail@plt+0xaac>
   1186c:	ldr	r0, [sp, #36]	; 0x24
   11870:	bl	11f94 <__assert_fail@plt+0xe68>
   11874:	ldr	r0, [sp, #36]	; 0x24
   11878:	bl	12dbc <__assert_fail@plt+0x1c90>
   1187c:	add	r0, sp, #56	; 0x38
   11880:	bl	12000 <__assert_fail@plt+0xed4>
   11884:	add	r0, sp, #68	; 0x44
   11888:	bl	12000 <__assert_fail@plt+0xed4>
   1188c:	mov	r0, r7
   11890:	bl	12c30 <__assert_fail@plt+0x1b04>
   11894:	subs	r7, r0, #0
   11898:	bne	112c4 <__assert_fail@plt+0x198>
   1189c:	mov	r0, r6
   118a0:	bl	12c30 <__assert_fail@plt+0x1b04>
   118a4:	cmp	r0, #0
   118a8:	bne	11708 <__assert_fail@plt+0x5dc>
   118ac:	ldrb	r3, [r4, #45]	; 0x2d
   118b0:	cmp	r3, #0
   118b4:	bne	118c4 <__assert_fail@plt+0x798>
   118b8:	ldrb	r3, [r4, #46]	; 0x2e
   118bc:	cmp	r3, #0
   118c0:	beq	11c5c <__assert_fail@plt+0xb30>
   118c4:	mov	r2, #5
   118c8:	ldr	r1, [pc, #1044]	; 11ce4 <__assert_fail@plt+0xbb8>
   118cc:	b	114f0 <__assert_fail@plt+0x3c4>
   118d0:	ldr	r3, [sp, #64]	; 0x40
   118d4:	cmp	r2, #0
   118d8:	ldreq	r1, [pc, #1024]	; 11ce0 <__assert_fail@plt+0xbb4>
   118dc:	ldr	r0, [r3]
   118e0:	beq	118ec <__assert_fail@plt+0x7c0>
   118e4:	ldr	r3, [sp, #76]	; 0x4c
   118e8:	ldr	r1, [r3]
   118ec:	bl	1264c <__assert_fail@plt+0x1520>
   118f0:	ldr	r2, [sp, #56]	; 0x38
   118f4:	mov	r3, #0
   118f8:	str	r3, [r4, #12]
   118fc:	str	r3, [r4, #16]
   11900:	cmp	r2, r3
   11904:	beq	1191c <__assert_fail@plt+0x7f0>
   11908:	mov	r2, #1
   1190c:	add	r1, sp, #56	; 0x38
   11910:	str	r3, [sp, #56]	; 0x38
   11914:	mov	r0, r7
   11918:	bl	12350 <__assert_fail@plt+0x1224>
   1191c:	ldr	r3, [sp, #68]	; 0x44
   11920:	cmp	r3, #0
   11924:	beq	117fc <__assert_fail@plt+0x6d0>
   11928:	mov	r3, #0
   1192c:	mov	r2, #2
   11930:	add	r1, sp, #68	; 0x44
   11934:	mov	r0, r6
   11938:	str	r3, [sp, #68]	; 0x44
   1193c:	bl	12350 <__assert_fail@plt+0x1224>
   11940:	b	117fc <__assert_fail@plt+0x6d0>
   11944:	ldr	r0, [pc, #916]	; 11ce0 <__assert_fail@plt+0xbb4>
   11948:	b	118e4 <__assert_fail@plt+0x7b8>
   1194c:	ldr	r0, [sp, #64]	; 0x40
   11950:	ldr	r1, [sp, #76]	; 0x4c
   11954:	ldrd	r2, [r5, #8]
   11958:	ldr	r0, [r0]
   1195c:	ldr	r1, [r1]
   11960:	bl	11e7c <__assert_fail@plt+0xd50>
   11964:	cmp	r0, #0
   11968:	bge	119a8 <__assert_fail@plt+0x87c>
   1196c:	ldrb	r3, [r4, #109]	; 0x6d
   11970:	cmp	r3, #0
   11974:	beq	11988 <__assert_fail@plt+0x85c>
   11978:	ldr	r3, [sp, #64]	; 0x40
   1197c:	mov	r1, sl
   11980:	ldr	r0, [r3]
   11984:	bl	1264c <__assert_fail@plt+0x1520>
   11988:	mov	r3, #0
   1198c:	mov	r2, #1
   11990:	add	r1, sp, #56	; 0x38
   11994:	mov	r0, r7
   11998:	str	r3, [sp, #56]	; 0x38
   1199c:	bl	12350 <__assert_fail@plt+0x1224>
   119a0:	strb	r8, [r4, #44]	; 0x2c
   119a4:	b	11804 <__assert_fail@plt+0x6d8>
   119a8:	beq	119e0 <__assert_fail@plt+0x8b4>
   119ac:	ldrb	r3, [r4, #110]	; 0x6e
   119b0:	cmp	r3, #0
   119b4:	beq	119c8 <__assert_fail@plt+0x89c>
   119b8:	ldr	r3, [sp, #76]	; 0x4c
   119bc:	mov	r0, sl
   119c0:	ldr	r1, [r3]
   119c4:	bl	1264c <__assert_fail@plt+0x1520>
   119c8:	mov	r3, #0
   119cc:	mov	r2, #2
   119d0:	add	r1, sp, #68	; 0x44
   119d4:	mov	r0, r6
   119d8:	str	r3, [sp, #68]	; 0x44
   119dc:	b	1199c <__assert_fail@plt+0x870>
   119e0:	mov	r2, #1
   119e4:	add	r1, sp, #56	; 0x38
   119e8:	mov	r0, r7
   119ec:	bl	12350 <__assert_fail@plt+0x1224>
   119f0:	cmp	r0, #0
   119f4:	ldr	r3, [sp, #56]	; 0x38
   119f8:	bne	11a44 <__assert_fail@plt+0x918>
   119fc:	add	r3, r3, #1
   11a00:	mov	fp, #1
   11a04:	str	r3, [sp, #56]	; 0x38
   11a08:	mov	r2, #2
   11a0c:	add	r1, sp, #68	; 0x44
   11a10:	mov	r0, r6
   11a14:	bl	12350 <__assert_fail@plt+0x1224>
   11a18:	cmp	r0, #0
   11a1c:	ldr	r3, [sp, #68]	; 0x44
   11a20:	bne	11a70 <__assert_fail@plt+0x944>
   11a24:	add	r3, r3, #1
   11a28:	mov	r2, #1
   11a2c:	str	r3, [sp, #68]	; 0x44
   11a30:	ldrb	r3, [r4, #108]	; 0x6c
   11a34:	cmp	r3, #0
   11a38:	beq	11afc <__assert_fail@plt+0x9d0>
   11a3c:	mov	r3, #0
   11a40:	b	11adc <__assert_fail@plt+0x9b0>
   11a44:	ldr	ip, [sp, #64]	; 0x40
   11a48:	sub	r0, r3, #-1073741823	; 0xc0000001
   11a4c:	ldr	r1, [sp, #76]	; 0x4c
   11a50:	ldrd	r2, [r5, #8]
   11a54:	ldr	r0, [ip, r0, lsl #2]
   11a58:	ldr	r1, [r1]
   11a5c:	bl	11e7c <__assert_fail@plt+0xd50>
   11a60:	cmp	r0, #0
   11a64:	beq	119e0 <__assert_fail@plt+0x8b4>
   11a68:	mov	fp, #0
   11a6c:	b	11a08 <__assert_fail@plt+0x8dc>
   11a70:	ldr	r0, [sp, #76]	; 0x4c
   11a74:	sub	r1, r3, #-1073741823	; 0xc0000001
   11a78:	ldrd	r2, [r5, #8]
   11a7c:	ldr	r1, [r0, r1, lsl #2]
   11a80:	ldr	r0, [sp, #64]	; 0x40
   11a84:	ldr	r0, [r0]
   11a88:	bl	11e7c <__assert_fail@plt+0xd50>
   11a8c:	cmp	r0, #0
   11a90:	beq	11a08 <__assert_fail@plt+0x8dc>
   11a94:	mov	r2, #0
   11a98:	b	11a30 <__assert_fail@plt+0x904>
   11a9c:	str	r3, [sp, #16]
   11aa0:	ldr	r3, [sp, #12]
   11aa4:	str	r2, [sp, #20]
   11aa8:	ldr	r0, [sp, #64]	; 0x40
   11aac:	ldr	r1, [sp, #76]	; 0x4c
   11ab0:	ldr	r0, [r0, r3]
   11ab4:	ldr	r1, [r1, r9, lsl #2]
   11ab8:	add	r9, r9, #1
   11abc:	bl	1264c <__assert_fail@plt+0x1520>
   11ac0:	ldr	r3, [sp, #16]
   11ac4:	ldr	r2, [sp, #20]
   11ac8:	ldr	r1, [sp, #68]	; 0x44
   11acc:	sub	r1, r1, #1
   11ad0:	cmp	r9, r1
   11ad4:	bcc	11a9c <__assert_fail@plt+0x970>
   11ad8:	add	r3, r3, #1
   11adc:	ldr	r1, [sp, #56]	; 0x38
   11ae0:	sub	r1, r1, #1
   11ae4:	cmp	r3, r1
   11ae8:	bcs	11afc <__assert_fail@plt+0x9d0>
   11aec:	lsl	r1, r3, #2
   11af0:	mov	r9, #0
   11af4:	str	r1, [sp, #12]
   11af8:	b	11ac8 <__assert_fail@plt+0x99c>
   11afc:	cmp	fp, #0
   11b00:	movne	r3, #0
   11b04:	strne	r3, [sp, #56]	; 0x38
   11b08:	bne	11b2c <__assert_fail@plt+0xa00>
   11b0c:	ldr	r1, [sp, #56]	; 0x38
   11b10:	ldr	r3, [sp, #64]	; 0x40
   11b14:	sub	r1, r1, #-1073741823	; 0xc0000001
   11b18:	ldr	r0, [r3]
   11b1c:	ldr	ip, [r3, r1, lsl #2]
   11b20:	str	ip, [r3]
   11b24:	str	r0, [r3, r1, lsl #2]
   11b28:	str	r8, [sp, #56]	; 0x38
   11b2c:	cmp	r2, #0
   11b30:	movne	r3, #0
   11b34:	strne	r3, [sp, #68]	; 0x44
   11b38:	bne	11804 <__assert_fail@plt+0x6d8>
   11b3c:	ldr	r2, [sp, #68]	; 0x44
   11b40:	ldr	r3, [sp, #76]	; 0x4c
   11b44:	sub	r2, r2, #-1073741823	; 0xc0000001
   11b48:	ldr	r1, [r3]
   11b4c:	ldr	r0, [r3, r2, lsl #2]
   11b50:	str	r0, [r3]
   11b54:	str	r1, [r3, r2, lsl #2]
   11b58:	str	r8, [sp, #68]	; 0x44
   11b5c:	b	11804 <__assert_fail@plt+0x6d8>
   11b60:	cmp	r2, #0
   11b64:	beq	11b78 <__assert_fail@plt+0xa4c>
   11b68:	ldr	r3, [sp, #64]	; 0x40
   11b6c:	ldr	r1, [pc, #364]	; 11ce0 <__assert_fail@plt+0xbb4>
   11b70:	ldr	r0, [r3]
   11b74:	bl	1264c <__assert_fail@plt+0x1520>
   11b78:	ldr	r3, [sp, #68]	; 0x44
   11b7c:	ldr	r8, [pc, #348]	; 11ce0 <__assert_fail@plt+0xbb4>
   11b80:	cmp	r3, #0
   11b84:	movne	r3, #1
   11b88:	strbne	r3, [r4, #44]	; 0x2c
   11b8c:	mov	r2, #1
   11b90:	add	r1, sp, #36	; 0x24
   11b94:	mov	r0, r7
   11b98:	bl	12040 <__assert_fail@plt+0xf14>
   11b9c:	cmp	r0, #0
   11ba0:	beq	11860 <__assert_fail@plt+0x734>
   11ba4:	ldrb	r3, [r4, #109]	; 0x6d
   11ba8:	cmp	r3, #0
   11bac:	beq	11bbc <__assert_fail@plt+0xa90>
   11bb0:	mov	r1, r8
   11bb4:	ldr	r0, [sp, #36]	; 0x24
   11bb8:	bl	1264c <__assert_fail@plt+0x1520>
   11bbc:	ldrb	r3, [r4, #45]	; 0x2d
   11bc0:	cmp	r3, #0
   11bc4:	beq	11b8c <__assert_fail@plt+0xa60>
   11bc8:	ldrb	r3, [r4, #109]	; 0x6d
   11bcc:	cmp	r3, #0
   11bd0:	bne	11b8c <__assert_fail@plt+0xa60>
   11bd4:	b	11860 <__assert_fail@plt+0x734>
   11bd8:	ldr	r2, [sp, #68]	; 0x44
   11bdc:	cmp	r2, #0
   11be0:	beq	1186c <__assert_fail@plt+0x740>
   11be4:	cmp	r3, #0
   11be8:	beq	11bfc <__assert_fail@plt+0xad0>
   11bec:	ldr	r3, [sp, #76]	; 0x4c
   11bf0:	ldr	r0, [pc, #232]	; 11ce0 <__assert_fail@plt+0xbb4>
   11bf4:	ldr	r1, [r3]
   11bf8:	bl	1264c <__assert_fail@plt+0x1520>
   11bfc:	ldr	r3, [sp, #56]	; 0x38
   11c00:	ldr	r5, [pc, #216]	; 11ce0 <__assert_fail@plt+0xbb4>
   11c04:	cmp	r3, #0
   11c08:	movne	r3, #1
   11c0c:	strbne	r3, [r4, #44]	; 0x2c
   11c10:	mov	r2, #2
   11c14:	add	r1, sp, #36	; 0x24
   11c18:	mov	r0, r6
   11c1c:	bl	12040 <__assert_fail@plt+0xf14>
   11c20:	cmp	r0, #0
   11c24:	beq	1186c <__assert_fail@plt+0x740>
   11c28:	ldrb	r3, [r4, #110]	; 0x6e
   11c2c:	cmp	r3, #0
   11c30:	beq	11c40 <__assert_fail@plt+0xb14>
   11c34:	mov	r0, r5
   11c38:	ldr	r1, [sp, #36]	; 0x24
   11c3c:	bl	1264c <__assert_fail@plt+0x1520>
   11c40:	ldrb	r3, [r4, #46]	; 0x2e
   11c44:	cmp	r3, #0
   11c48:	beq	11c10 <__assert_fail@plt+0xae4>
   11c4c:	ldrb	r3, [r4, #110]	; 0x6e
   11c50:	cmp	r3, #0
   11c54:	bne	11c10 <__assert_fail@plt+0xae4>
   11c58:	b	1186c <__assert_fail@plt+0x740>
   11c5c:	add	sp, sp, #84	; 0x54
   11c60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c64:	muleq	r2, r0, r1
   11c68:	andeq	r5, r1, sl, asr #29
   11c6c:	strdeq	r6, [r1], -r9
   11c70:	andeq	r6, r1, r5, asr #16
   11c74:	andeq	r5, r1, r4, ror #27
   11c78:	andeq	r8, r2, r8, lsl #3
   11c7c:	andeq	r2, r1, r8, lsr #22
   11c80:	andeq	r1, r1, r0, asr #31
   11c84:	andeq	r6, r1, fp, ror r9
   11c88:	andeq	r8, r2, r0, ror r1
   11c8c:	andeq	r8, r2, r0, lsl r1
   11c90:	andeq	r8, r2, r4, lsl r1
   11c94:	andeq	r8, r2, r8, lsl #2
   11c98:	andeq	r6, r1, r2, lsl #22
   11c9c:	andeq	r8, r2, r0, lsl #3
   11ca0:	andeq	r6, r1, r7, lsl #21
   11ca4:	andeq	r5, r1, sl, lsl #30
   11ca8:	andeq	r6, r1, lr, ror #18
   11cac:	andeq	r8, r2, r4, lsl #3
   11cb0:	andeq	r6, r1, r1, asr #16
   11cb4:	andeq	r8, r2, ip, lsl r1
   11cb8:	andeq	r5, r1, sp, lsl #30
   11cbc:	andeq	r5, r1, lr, lsr #29
   11cc0:	andeq	r6, r1, r1, lsl r9
   11cc4:	andeq	r6, r1, sp, lsr r9
   11cc8:	andeq	r6, r1, r2, asr #18
   11ccc:	andeq	r6, r1, r5, asr #18
   11cd0:	andeq	r6, r1, ip, asr r9
   11cd4:	andeq	r6, r1, pc, lsl #19
   11cd8:	muleq	r1, pc, r9	; <UNPREDICTABLE>
   11cdc:			; <UNDEFINED> instruction: 0x000169b8
   11ce0:	ldrdeq	r8, [r2], -ip
   11ce4:	ldrdeq	r6, [r1], -ip
   11ce8:	mov	fp, #0
   11cec:	mov	lr, #0
   11cf0:	pop	{r1}		; (ldr r1, [sp], #4)
   11cf4:	mov	r2, sp
   11cf8:	push	{r2}		; (str r2, [sp, #-4]!)
   11cfc:	push	{r0}		; (str r0, [sp, #-4]!)
   11d00:	ldr	ip, [pc, #16]	; 11d18 <__assert_fail@plt+0xbec>
   11d04:	push	{ip}		; (str ip, [sp, #-4]!)
   11d08:	ldr	r0, [pc, #12]	; 11d1c <__assert_fail@plt+0xbf0>
   11d0c:	ldr	r3, [pc, #12]	; 11d20 <__assert_fail@plt+0xbf4>
   11d10:	bl	10fa0 <__libc_start_main@plt>
   11d14:	bl	110fc <abort@plt>
   11d18:	andeq	r5, r1, r4, lsl #27
   11d1c:	andeq	r1, r1, r0, asr r1
   11d20:	andeq	r5, r1, r4, lsr #26
   11d24:	ldr	r3, [pc, #20]	; 11d40 <__assert_fail@plt+0xc14>
   11d28:	ldr	r2, [pc, #20]	; 11d44 <__assert_fail@plt+0xc18>
   11d2c:	add	r3, pc, r3
   11d30:	ldr	r2, [r3, r2]
   11d34:	cmp	r2, #0
   11d38:	bxeq	lr
   11d3c:	b	10fc4 <__gmon_start__@plt>
   11d40:	andeq	r6, r1, ip, asr #5
   11d44:	strdeq	r0, [r0], -ip
   11d48:	ldr	r0, [pc, #24]	; 11d68 <__assert_fail@plt+0xc3c>
   11d4c:	ldr	r3, [pc, #24]	; 11d6c <__assert_fail@plt+0xc40>
   11d50:	cmp	r3, r0
   11d54:	bxeq	lr
   11d58:	ldr	r3, [pc, #16]	; 11d70 <__assert_fail@plt+0xc44>
   11d5c:	cmp	r3, #0
   11d60:	bxeq	lr
   11d64:	bx	r3
   11d68:	andeq	r8, r2, r4, ror #2
   11d6c:	andeq	r8, r2, r4, ror #2
   11d70:	andeq	r0, r0, r0
   11d74:	ldr	r0, [pc, #36]	; 11da0 <__assert_fail@plt+0xc74>
   11d78:	ldr	r1, [pc, #36]	; 11da4 <__assert_fail@plt+0xc78>
   11d7c:	sub	r1, r1, r0
   11d80:	asr	r1, r1, #2
   11d84:	add	r1, r1, r1, lsr #31
   11d88:	asrs	r1, r1, #1
   11d8c:	bxeq	lr
   11d90:	ldr	r3, [pc, #16]	; 11da8 <__assert_fail@plt+0xc7c>
   11d94:	cmp	r3, #0
   11d98:	bxeq	lr
   11d9c:	bx	r3
   11da0:	andeq	r8, r2, r4, ror #2
   11da4:	andeq	r8, r2, r4, ror #2
   11da8:	andeq	r0, r0, r0
   11dac:	push	{r4, lr}
   11db0:	ldr	r4, [pc, #24]	; 11dd0 <__assert_fail@plt+0xca4>
   11db4:	ldrb	r3, [r4]
   11db8:	cmp	r3, #0
   11dbc:	popne	{r4, pc}
   11dc0:	bl	11d48 <__assert_fail@plt+0xc1c>
   11dc4:	mov	r3, #1
   11dc8:	strb	r3, [r4]
   11dcc:	pop	{r4, pc}
   11dd0:	andeq	r8, r2, ip, lsl #3
   11dd4:	b	11d74 <__assert_fail@plt+0xc48>
   11dd8:	push	{r0, r1, r2, r4, r5, lr}
   11ddc:	ldr	r5, [r0]
   11de0:	cmp	r5, r1
   11de4:	cmnne	r5, #1
   11de8:	beq	11e1c <__assert_fail@plt+0xcf0>
   11dec:	mov	r4, r1
   11df0:	mov	r2, #5
   11df4:	ldr	r1, [pc, #44]	; 11e28 <__assert_fail@plt+0xcfc>
   11df8:	mov	r0, #0
   11dfc:	bl	10f10 <dcgettext@plt>
   11e00:	add	r1, r4, #1
   11e04:	mov	r2, r0
   11e08:	add	r3, r5, #1
   11e0c:	mov	r0, #1
   11e10:	str	r1, [sp]
   11e14:	mov	r1, #0
   11e18:	bl	10f7c <error@plt>
   11e1c:	str	r1, [r0]
   11e20:	add	sp, sp, #12
   11e24:	pop	{r4, r5, pc}
   11e28:	andeq	r5, r1, r4, ror #28
   11e2c:	push	{r4, r5, r6, lr}
   11e30:	mov	r5, r2
   11e34:	mov	r4, r0
   11e38:	mov	r6, r1
   11e3c:	ldrd	r2, [r0, #12]
   11e40:	cmp	r2, r3
   11e44:	bcc	11e5c <__assert_fail@plt+0xd30>
   11e48:	add	r1, r0, #16
   11e4c:	mov	r2, #8
   11e50:	ldr	r0, [r0, #20]
   11e54:	bl	14cbc <__assert_fail@plt+0x3b90>
   11e58:	str	r0, [r4, #20]
   11e5c:	ldr	r3, [r4, #12]
   11e60:	ldr	r2, [r4, #20]
   11e64:	add	r1, r2, r3, lsl #3
   11e68:	str	r6, [r2, r3, lsl #3]
   11e6c:	add	r3, r3, #1
   11e70:	str	r5, [r1, #4]
   11e74:	str	r3, [r4, #12]
   11e78:	pop	{r4, r5, r6, pc}
   11e7c:	ldr	ip, [r0, #12]
   11e80:	push	{r4, r5, r6, lr}
   11e84:	cmp	ip, r2
   11e88:	ldrhi	r0, [r0, #20]
   11e8c:	movls	r4, #0
   11e90:	movls	r0, r4
   11e94:	addhi	ip, r0, r2, lsl #3
   11e98:	ldrhi	r0, [r0, r2, lsl #3]
   11e9c:	ldr	r2, [r1, #12]
   11ea0:	ldrhi	r4, [ip, #4]
   11ea4:	cmp	r2, r3
   11ea8:	bls	11f5c <__assert_fail@plt+0xe30>
   11eac:	ldr	r2, [r1, #20]
   11eb0:	cmp	r4, #0
   11eb4:	add	ip, r2, r3, lsl #3
   11eb8:	ldr	r1, [r2, r3, lsl #3]
   11ebc:	ldr	r5, [ip, #4]
   11ec0:	bne	11ed4 <__assert_fail@plt+0xda8>
   11ec4:	adds	r5, r5, #0
   11ec8:	movne	r5, #1
   11ecc:	rsb	r0, r5, #0
   11ed0:	pop	{r4, r5, r6, pc}
   11ed4:	cmp	r5, #0
   11ed8:	beq	11f4c <__assert_fail@plt+0xe20>
   11edc:	ldr	r3, [pc, #132]	; 11f68 <__assert_fail@plt+0xe3c>
   11ee0:	ldrb	r2, [r3]
   11ee4:	cmp	r2, #0
   11ee8:	beq	11f18 <__assert_fail@plt+0xdec>
   11eec:	cmp	r4, r5
   11ef0:	movcc	r2, r4
   11ef4:	movcs	r2, r5
   11ef8:	bl	12ff4 <__assert_fail@plt+0x1ec8>
   11efc:	cmp	r0, #0
   11f00:	popne	{r4, r5, r6, pc}
   11f04:	cmp	r4, r5
   11f08:	bcc	11f54 <__assert_fail@plt+0xe28>
   11f0c:	movne	r0, #1
   11f10:	moveq	r0, #0
   11f14:	pop	{r4, r5, r6, pc}
   11f18:	ldrb	r3, [r3, #1]
   11f1c:	cmp	r3, #0
   11f20:	beq	11f38 <__assert_fail@plt+0xe0c>
   11f24:	mov	r3, r5
   11f28:	mov	r2, r1
   11f2c:	mov	r1, r4
   11f30:	pop	{r4, r5, r6, lr}
   11f34:	b	14fa0 <__assert_fail@plt+0x3e74>
   11f38:	cmp	r4, r5
   11f3c:	movcc	r2, r4
   11f40:	movcs	r2, r5
   11f44:	bl	10eec <memcmp@plt>
   11f48:	b	11efc <__assert_fail@plt+0xdd0>
   11f4c:	mov	r0, #1
   11f50:	pop	{r4, r5, r6, pc}
   11f54:	mvn	r0, #0
   11f58:	pop	{r4, r5, r6, pc}
   11f5c:	adds	r0, r4, #0
   11f60:	movne	r0, #1
   11f64:	pop	{r4, r5, r6, pc}
   11f68:	muleq	r2, r0, r1
   11f6c:	push	{r4, lr}
   11f70:	mov	r4, r0
   11f74:	bl	10fdc <__ctype_b_loc@plt>
   11f78:	ldr	r2, [r0]
   11f7c:	lsl	r3, r4, #1
   11f80:	ldrh	r0, [r2, r3]
   11f84:	and	r0, r0, #1
   11f88:	cmp	r4, #10
   11f8c:	orreq	r0, r0, #1
   11f90:	pop	{r4, pc}
   11f94:	push	{r4, r5, r6, lr}
   11f98:	subs	r4, r0, #0
   11f9c:	popeq	{r4, r5, r6, pc}
   11fa0:	mov	r5, #0
   11fa4:	ldr	r0, [r4, #20]
   11fa8:	bl	12dbc <__assert_fail@plt+0x1c90>
   11fac:	str	r5, [r4, #20]
   11fb0:	ldr	r0, [r4, #8]
   11fb4:	bl	12dbc <__assert_fail@plt+0x1c90>
   11fb8:	str	r5, [r4, #8]
   11fbc:	pop	{r4, r5, r6, pc}
   11fc0:	push	{r4, lr}
   11fc4:	ldr	r4, [pc, #48]	; 11ffc <__assert_fail@plt+0xed0>
   11fc8:	ldr	r0, [r4, #4]
   11fcc:	cmp	r0, #0
   11fd0:	beq	11fe0 <__assert_fail@plt+0xeb4>
   11fd4:	bl	11f94 <__assert_fail@plt+0xe68>
   11fd8:	ldr	r0, [r4, #4]
   11fdc:	bl	12dbc <__assert_fail@plt+0x1c90>
   11fe0:	ldr	r0, [r4, #8]
   11fe4:	cmp	r0, #0
   11fe8:	popeq	{r4, pc}
   11fec:	bl	11f94 <__assert_fail@plt+0xe68>
   11ff0:	ldr	r0, [r4, #8]
   11ff4:	pop	{r4, lr}
   11ff8:	b	12dbc <__assert_fail@plt+0x1c90>
   11ffc:	muleq	r2, r0, r1
   12000:	push	{r4, r5, r6, lr}
   12004:	mov	r5, r0
   12008:	mov	r4, #0
   1200c:	ldr	r3, [r5, #4]
   12010:	ldr	r0, [r5, #8]
   12014:	cmp	r3, r4
   12018:	bhi	12024 <__assert_fail@plt+0xef8>
   1201c:	pop	{r4, r5, r6, lr}
   12020:	b	12dbc <__assert_fail@plt+0x1c90>
   12024:	ldr	r0, [r0, r4, lsl #2]
   12028:	bl	11f94 <__assert_fail@plt+0xe68>
   1202c:	ldr	r3, [r5, #8]
   12030:	ldr	r0, [r3, r4, lsl #2]
   12034:	add	r4, r4, #1
   12038:	bl	12dbc <__assert_fail@plt+0x1c90>
   1203c:	b	1200c <__assert_fail@plt+0xee0>
   12040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12044:	sub	r9, r2, #1
   12048:	sub	sp, sp, #36	; 0x24
   1204c:	lsl	sl, r9, #2
   12050:	mov	r5, r0
   12054:	mov	r7, r1
   12058:	ldr	r6, [pc, #736]	; 12340 <__assert_fail@plt+0x1214>
   1205c:	str	r2, [sp, #20]
   12060:	ldr	r4, [r1]
   12064:	add	r3, r6, sl
   12068:	ldr	r2, [r3, #12]
   1206c:	cmp	r2, r4
   12070:	ldreq	r2, [r3, #4]
   12074:	streq	r4, [r3, #4]
   12078:	moveq	r4, r2
   1207c:	streq	r2, [r1]
   12080:	cmp	r4, #0
   12084:	movne	r3, #0
   12088:	strne	r3, [r4, #12]
   1208c:	bne	120a4 <__assert_fail@plt+0xf78>
   12090:	mov	r1, #24
   12094:	mov	r0, #1
   12098:	bl	14dcc <__assert_fail@plt+0x3ca0>
   1209c:	mov	r4, r0
   120a0:	str	r0, [r7]
   120a4:	ldr	r8, [pc, #664]	; 12344 <__assert_fail@plt+0x1218>
   120a8:	mov	r1, r5
   120ac:	mov	r0, r4
   120b0:	ldrb	r2, [r8]
   120b4:	bl	12f14 <__assert_fail@plt+0x1de8>
   120b8:	subs	r7, r0, #0
   120bc:	bne	1210c <__assert_fail@plt+0xfe0>
   120c0:	mov	r0, r5
   120c4:	bl	10f64 <ferror_unlocked@plt>
   120c8:	subs	r5, r0, #0
   120cc:	beq	120f8 <__assert_fail@plt+0xfcc>
   120d0:	bl	11018 <__errno_location@plt>
   120d4:	ldr	r4, [r0]
   120d8:	mov	r2, #5
   120dc:	mov	r0, r7
   120e0:	ldr	r1, [pc, #608]	; 12348 <__assert_fail@plt+0x121c>
   120e4:	bl	10f10 <dcgettext@plt>
   120e8:	mov	r2, r0
   120ec:	mov	r0, #1
   120f0:	mov	r1, r4
   120f4:	bl	10f7c <error@plt>
   120f8:	mov	r0, r4
   120fc:	bl	11f94 <__assert_fail@plt+0xe68>
   12100:	mov	r0, r5
   12104:	add	sp, sp, #36	; 0x24
   12108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1210c:	lsl	r3, r9, #3
   12110:	ldr	r7, [r4, #4]
   12114:	add	r2, r6, r3
   12118:	ldr	r5, [r4, #8]
   1211c:	str	r3, [sp, #24]
   12120:	ldr	r3, [r2, #24]
   12124:	sub	r7, r7, #1
   12128:	ldr	r1, [r2, #28]
   1212c:	add	r7, r5, r7
   12130:	adds	r3, r3, #1
   12134:	adc	r1, r1, #0
   12138:	cmp	r5, r7
   1213c:	str	r3, [r2, #24]
   12140:	str	r1, [r2, #28]
   12144:	beq	12240 <__assert_fail@plt+0x1114>
   12148:	ldr	r3, [r8, #4]
   1214c:	mvn	r2, r3
   12150:	cmp	r3, #10
   12154:	lsr	r2, r2, #31
   12158:	moveq	r2, #0
   1215c:	cmp	r2, #0
   12160:	bne	12208 <__assert_fail@plt+0x10dc>
   12164:	cmp	r3, #0
   12168:	bge	12220 <__assert_fail@plt+0x10f4>
   1216c:	mov	fp, r5
   12170:	ldrb	r0, [fp], #1
   12174:	bl	11f6c <__assert_fail@plt+0xe40>
   12178:	cmp	r0, #0
   1217c:	bne	12234 <__assert_fail@plt+0x1108>
   12180:	add	r2, r5, #1
   12184:	cmp	r7, r2
   12188:	mov	fp, r2
   1218c:	beq	121ac <__assert_fail@plt+0x1080>
   12190:	add	r2, r2, #1
   12194:	ldrb	r0, [fp]
   12198:	str	r2, [sp, #28]
   1219c:	bl	11f6c <__assert_fail@plt+0xe40>
   121a0:	cmp	r0, #0
   121a4:	ldr	r2, [sp, #28]
   121a8:	beq	12184 <__assert_fail@plt+0x1058>
   121ac:	sub	r2, fp, r5
   121b0:	mov	r1, r5
   121b4:	mov	r0, r4
   121b8:	bl	11e2c <__assert_fail@plt+0xd00>
   121bc:	cmp	r7, fp
   121c0:	beq	12240 <__assert_fail@plt+0x1114>
   121c4:	add	r5, fp, #1
   121c8:	cmp	r7, r5
   121cc:	beq	12220 <__assert_fail@plt+0x10f4>
   121d0:	mov	r3, r5
   121d4:	ldrb	r0, [r3], #1
   121d8:	str	r3, [sp, #28]
   121dc:	bl	11f6c <__assert_fail@plt+0xe40>
   121e0:	cmp	r0, #0
   121e4:	ldr	r3, [sp, #28]
   121e8:	beq	12180 <__assert_fail@plt+0x1054>
   121ec:	mov	r5, r3
   121f0:	b	121c8 <__assert_fail@plt+0x109c>
   121f4:	sub	r2, fp, r5
   121f8:	mov	r1, r5
   121fc:	mov	r0, r4
   12200:	add	r5, fp, #1
   12204:	bl	11e2c <__assert_fail@plt+0xd00>
   12208:	sub	r2, r7, r5
   1220c:	mov	r0, r5
   12210:	ldr	r1, [r8, #4]
   12214:	bl	1106c <memchr@plt>
   12218:	subs	fp, r0, #0
   1221c:	bne	121f4 <__assert_fail@plt+0x10c8>
   12220:	sub	r2, r7, r5
   12224:	mov	r1, r5
   12228:	mov	r0, r4
   1222c:	bl	11e2c <__assert_fail@plt+0xd00>
   12230:	b	12240 <__assert_fail@plt+0x1114>
   12234:	cmp	r7, fp
   12238:	mov	r5, fp
   1223c:	bne	1216c <__assert_fail@plt+0x1040>
   12240:	add	r3, r6, sl
   12244:	ldr	r0, [r3, #12]
   12248:	cmp	r0, #0
   1224c:	beq	12330 <__assert_fail@plt+0x1204>
   12250:	ldr	r3, [r6, #40]	; 0x28
   12254:	cmp	r3, #2
   12258:	beq	12330 <__assert_fail@plt+0x1204>
   1225c:	cmp	r3, #1
   12260:	beq	12270 <__assert_fail@plt+0x1144>
   12264:	ldrb	r3, [r6, #44]	; 0x2c
   12268:	cmp	r3, #0
   1226c:	beq	12330 <__assert_fail@plt+0x1204>
   12270:	add	r3, r6, r9
   12274:	ldrb	r3, [r3, #45]	; 0x2d
   12278:	cmp	r3, #0
   1227c:	bne	12330 <__assert_fail@plt+0x1204>
   12280:	ldr	r3, [sp, #20]
   12284:	mov	r1, r4
   12288:	cmp	r3, #1
   1228c:	ldreq	r3, [r8, #8]
   12290:	ldrne	r3, [r8, #12]
   12294:	mov	r2, r3
   12298:	bl	11e7c <__assert_fail@plt+0xd50>
   1229c:	cmp	r0, #0
   122a0:	ble	12330 <__assert_fail@plt+0x1204>
   122a4:	ldr	r5, [r4, #4]
   122a8:	cmp	r5, #0
   122ac:	beq	122cc <__assert_fail@plt+0x11a0>
   122b0:	ldr	r2, [r4, #8]
   122b4:	sub	r3, r5, #1
   122b8:	ldrb	r2, [r2, r3]
   122bc:	cmp	r2, #10
   122c0:	moveq	r5, r3
   122c4:	cmp	r5, #0
   122c8:	mvnlt	r5, #-2147483648	; 0x80000000
   122cc:	mov	r2, #5
   122d0:	ldr	r1, [pc, #116]	; 1234c <__assert_fail@plt+0x1220>
   122d4:	mov	r0, #0
   122d8:	add	r9, r6, r9
   122dc:	ldr	r7, [r6, #40]	; 0x28
   122e0:	bl	10f10 <dcgettext@plt>
   122e4:	ldr	r3, [r4, #8]
   122e8:	add	r1, r6, sl
   122ec:	str	r5, [sp, #8]
   122f0:	sub	r7, r7, #1
   122f4:	clz	r7, r7
   122f8:	str	r3, [sp, #12]
   122fc:	lsr	r7, r7, #5
   12300:	ldr	r3, [sp, #24]
   12304:	add	r3, r6, r3
   12308:	ldrd	r2, [r3, #24]
   1230c:	strd	r2, [sp]
   12310:	mov	r3, r1
   12314:	mov	r2, r0
   12318:	mov	r1, #0
   1231c:	mov	r0, r7
   12320:	ldr	r3, [r3, #48]	; 0x30
   12324:	bl	10f7c <error@plt>
   12328:	mov	r3, #1
   1232c:	strb	r3, [r9, #45]	; 0x2d
   12330:	add	r6, r6, sl
   12334:	mov	r0, #1
   12338:	str	r4, [r6, #12]
   1233c:	b	12104 <__assert_fail@plt+0xfd8>
   12340:	muleq	r2, r0, r1
   12344:	andeq	r8, r2, r8, lsl #2
   12348:	andeq	r5, r1, r6, lsl #29
   1234c:	muleq	r1, r1, lr
   12350:	push	{r4, r5, r6, lr}
   12354:	mov	r6, r2
   12358:	mov	r5, r0
   1235c:	mov	r4, r1
   12360:	ldrd	r2, [r1]
   12364:	cmp	r2, r3
   12368:	beq	1239c <__assert_fail@plt+0x1270>
   1236c:	ldr	r1, [r4]
   12370:	mov	r2, r6
   12374:	mov	r0, r5
   12378:	ldr	r3, [r4, #8]
   1237c:	add	r1, r3, r1, lsl #2
   12380:	bl	12040 <__assert_fail@plt+0xf14>
   12384:	cmp	r0, #0
   12388:	popeq	{r4, r5, r6, pc}
   1238c:	ldr	r3, [r4]
   12390:	add	r3, r3, #1
   12394:	str	r3, [r4]
   12398:	pop	{r4, r5, r6, pc}
   1239c:	mov	r2, #4
   123a0:	ldr	r0, [r4, #8]
   123a4:	add	r1, r1, r2
   123a8:	bl	14cbc <__assert_fail@plt+0x3b90>
   123ac:	ldr	r3, [r4]
   123b0:	mov	r1, #0
   123b4:	str	r0, [r4, #8]
   123b8:	ldr	r2, [r4, #4]
   123bc:	cmp	r2, r3
   123c0:	bls	1236c <__assert_fail@plt+0x1240>
   123c4:	str	r1, [r0, r3, lsl #2]
   123c8:	add	r3, r3, #1
   123cc:	b	123bc <__assert_fail@plt+0x1290>
   123d0:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   123d4:	mov	r2, #10
   123d8:	mov	r1, #0
   123dc:	mov	r6, r0
   123e0:	mvn	r4, #0
   123e4:	mov	r5, #0
   123e8:	ldr	r3, [pc, #116]	; 12464 <__assert_fail@plt+0x1338>
   123ec:	str	r3, [sp]
   123f0:	add	r3, sp, #8
   123f4:	bl	15480 <__assert_fail@plt+0x4354>
   123f8:	cmp	r0, #1
   123fc:	beq	12418 <__assert_fail@plt+0x12ec>
   12400:	cmp	r0, #0
   12404:	bne	12434 <__assert_fail@plt+0x1308>
   12408:	ldrd	r2, [sp, #8]
   1240c:	cmp	r3, r5
   12410:	cmpeq	r2, r4
   12414:	bls	1242c <__assert_fail@plt+0x1300>
   12418:	strd	r4, [sp, #8]
   1241c:	ldr	r0, [sp, #8]
   12420:	sub	r0, r0, #1
   12424:	add	sp, sp, #16
   12428:	pop	{r4, r5, r6, pc}
   1242c:	orrs	r3, r2, r3
   12430:	bne	1241c <__assert_fail@plt+0x12f0>
   12434:	mov	r2, #5
   12438:	ldr	r1, [pc, #40]	; 12468 <__assert_fail@plt+0x133c>
   1243c:	mov	r0, #0
   12440:	bl	10f10 <dcgettext@plt>
   12444:	mov	r4, r0
   12448:	mov	r0, r6
   1244c:	bl	14638 <__assert_fail@plt+0x350c>
   12450:	mov	r3, r0
   12454:	mov	r2, r4
   12458:	mov	r1, #0
   1245c:	mov	r0, #1
   12460:	bl	10f7c <error@plt>
   12464:	andeq	r5, r1, sl, asr #29
   12468:	andeq	r5, r1, lr, lsr #29
   1246c:	push	{r4, r5, r6, r7, r8, lr}
   12470:	mov	r4, r0
   12474:	mov	r7, #0
   12478:	ldr	r8, [pc, #200]	; 12548 <__assert_fail@plt+0x141c>
   1247c:	mov	r1, r8
   12480:	mov	r0, r4
   12484:	bl	110cc <strpbrk@plt>
   12488:	subs	r5, r0, #0
   1248c:	strbne	r7, [r5], #1
   12490:	ldrb	r3, [r4]
   12494:	cmp	r3, #48	; 0x30
   12498:	beq	124b4 <__assert_fail@plt+0x1388>
   1249c:	bcc	124a8 <__assert_fail@plt+0x137c>
   124a0:	cmp	r3, #50	; 0x32
   124a4:	bls	124f0 <__assert_fail@plt+0x13c4>
   124a8:	mov	r2, #5
   124ac:	ldr	r1, [pc, #152]	; 1254c <__assert_fail@plt+0x1420>
   124b0:	b	124c8 <__assert_fail@plt+0x139c>
   124b4:	ldrb	r3, [r4, #1]
   124b8:	cmp	r3, #0
   124bc:	beq	1253c <__assert_fail@plt+0x1410>
   124c0:	ldr	r1, [pc, #136]	; 12550 <__assert_fail@plt+0x1424>
   124c4:	mov	r2, #5
   124c8:	mov	r0, #0
   124cc:	bl	10f10 <dcgettext@plt>
   124d0:	mov	r5, r0
   124d4:	mov	r0, r4
   124d8:	bl	14638 <__assert_fail@plt+0x350c>
   124dc:	mov	r3, r0
   124e0:	mov	r2, r5
   124e4:	mov	r1, #0
   124e8:	mov	r0, #1
   124ec:	bl	10f7c <error@plt>
   124f0:	ldrb	r2, [r4, #1]
   124f4:	cmp	r2, #46	; 0x2e
   124f8:	bne	124c0 <__assert_fail@plt+0x1394>
   124fc:	add	r0, r4, #2
   12500:	sub	r6, r3, #48	; 0x30
   12504:	bl	123d0 <__assert_fail@plt+0x12a4>
   12508:	mov	r4, r0
   1250c:	mov	r0, #12
   12510:	bl	14bdc <__assert_fail@plt+0x3ab0>
   12514:	ldr	r3, [pc, #56]	; 12554 <__assert_fail@plt+0x1428>
   12518:	cmp	r5, #0
   1251c:	str	r6, [r0]
   12520:	stmib	r0, {r4, r7}
   12524:	ldr	r2, [r3, #16]
   12528:	str	r0, [r3, #16]
   1252c:	str	r0, [r2, #8]
   12530:	popeq	{r4, r5, r6, r7, r8, pc}
   12534:	mov	r4, r5
   12538:	b	1247c <__assert_fail@plt+0x1350>
   1253c:	mov	r4, r3
   12540:	mov	r6, r3
   12544:	b	1250c <__assert_fail@plt+0x13e0>
   12548:	andeq	r5, r1, r7, asr #29
   1254c:	andeq	r5, r1, r7, ror #29
   12550:	andeq	r5, r1, fp, asr #29
   12554:	andeq	r8, r2, r8, lsl #2
   12558:	ldr	r3, [r1, #12]
   1255c:	cmp	r3, r0
   12560:	bls	1258c <__assert_fail@plt+0x1460>
   12564:	ldr	ip, [r1, #20]
   12568:	add	r3, ip, r0, lsl #3
   1256c:	ldr	r2, [r3, #4]
   12570:	cmp	r2, #0
   12574:	beq	1258c <__assert_fail@plt+0x1460>
   12578:	ldr	r3, [pc, #40]	; 125a8 <__assert_fail@plt+0x147c>
   1257c:	mov	r1, #1
   12580:	ldr	r0, [ip, r0, lsl #3]
   12584:	ldr	r3, [r3]
   12588:	b	10ee0 <fwrite_unlocked@plt>
   1258c:	ldr	r3, [pc, #24]	; 125ac <__assert_fail@plt+0x1480>
   12590:	ldr	r0, [r3, #56]	; 0x38
   12594:	cmp	r0, #0
   12598:	bxeq	lr
   1259c:	ldr	r3, [pc, #4]	; 125a8 <__assert_fail@plt+0x147c>
   125a0:	ldr	r1, [r3]
   125a4:	b	10e80 <fputs_unlocked@plt>
   125a8:	andeq	r8, r2, r4, lsl #3
   125ac:	muleq	r2, r0, r1
   125b0:	ldr	r3, [pc, #140]	; 12644 <__assert_fail@plt+0x1518>
   125b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   125b8:	mov	r8, r0
   125bc:	mov	r4, r1
   125c0:	mov	r7, #0
   125c4:	ldrb	r3, [r3, #60]	; 0x3c
   125c8:	cmp	r3, #0
   125cc:	ldr	r3, [pc, #116]	; 12648 <__assert_fail@plt+0x151c>
   125d0:	movne	r6, r2
   125d4:	ldreq	r6, [r0, #12]
   125d8:	ldr	r5, [r3, #4]
   125dc:	cmp	r5, #0
   125e0:	movlt	r5, #32
   125e4:	cmp	r6, r1
   125e8:	movcc	r9, r6
   125ec:	movcs	r9, r1
   125f0:	uxtb	sl, r5
   125f4:	cmp	r7, r9
   125f8:	bcc	12628 <__assert_fail@plt+0x14fc>
   125fc:	add	r4, r4, #1
   12600:	uxtb	r5, r5
   12604:	cmp	r4, r6
   12608:	popcs	{r4, r5, r6, r7, r8, r9, sl, pc}
   1260c:	mov	r0, r5
   12610:	bl	11120 <putchar_unlocked@plt>
   12614:	mov	r0, r4
   12618:	mov	r1, r8
   1261c:	bl	12558 <__assert_fail@plt+0x142c>
   12620:	add	r4, r4, #1
   12624:	b	12604 <__assert_fail@plt+0x14d8>
   12628:	mov	r0, sl
   1262c:	bl	11120 <putchar_unlocked@plt>
   12630:	mov	r0, r7
   12634:	mov	r1, r8
   12638:	bl	12558 <__assert_fail@plt+0x142c>
   1263c:	add	r7, r7, #1
   12640:	b	125f4 <__assert_fail@plt+0x14c8>
   12644:	muleq	r2, r0, r1
   12648:	andeq	r8, r2, r8, lsl #2
   1264c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12650:	mov	r5, r0
   12654:	mov	r8, r1
   12658:	ldr	r4, [pc, #176]	; 12710 <__assert_fail@plt+0x15e4>
   1265c:	ldr	r7, [pc, #176]	; 12714 <__assert_fail@plt+0x15e8>
   12660:	ldr	r9, [r4, #4]
   12664:	ldr	r6, [r7, #72]	; 0x48
   12668:	cmp	r9, #0
   1266c:	movlt	r9, #32
   12670:	cmp	r6, #0
   12674:	beq	126cc <__assert_fail@plt+0x15a0>
   12678:	add	r7, r7, #76	; 0x4c
   1267c:	ldr	r1, [r6]
   12680:	cmp	r1, #0
   12684:	bne	126b8 <__assert_fail@plt+0x158c>
   12688:	cmp	r5, r7
   1268c:	ldreq	r0, [r4, #12]
   12690:	moveq	r1, r8
   12694:	movne	r1, r5
   12698:	ldrne	r0, [r4, #8]
   1269c:	bl	12558 <__assert_fail@plt+0x142c>
   126a0:	ldr	r6, [r6, #8]
   126a4:	cmp	r6, #0
   126a8:	beq	12704 <__assert_fail@plt+0x15d8>
   126ac:	uxtb	r0, r9
   126b0:	bl	11120 <putchar_unlocked@plt>
   126b4:	b	1267c <__assert_fail@plt+0x1550>
   126b8:	cmp	r1, #1
   126bc:	ldr	r0, [r6, #4]
   126c0:	moveq	r1, r5
   126c4:	movne	r1, r8
   126c8:	b	1269c <__assert_fail@plt+0x1570>
   126cc:	add	r3, r7, #76	; 0x4c
   126d0:	cmp	r0, r3
   126d4:	ldreq	r0, [r4, #12]
   126d8:	movne	r1, r5
   126dc:	ldrne	r0, [r4, #8]
   126e0:	bl	12558 <__assert_fail@plt+0x142c>
   126e4:	mov	r0, r5
   126e8:	ldr	r1, [r4, #8]
   126ec:	ldr	r2, [r7, #100]	; 0x64
   126f0:	bl	125b0 <__assert_fail@plt+0x1484>
   126f4:	mov	r0, r8
   126f8:	ldr	r1, [r4, #12]
   126fc:	ldr	r2, [r7, #104]	; 0x68
   12700:	bl	125b0 <__assert_fail@plt+0x1484>
   12704:	ldrb	r0, [r4]
   12708:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1270c:	b	11120 <putchar_unlocked@plt>
   12710:	andeq	r8, r2, r8, lsl #2
   12714:	muleq	r2, r0, r1
   12718:	subs	r5, r0, #0
   1271c:	push	{r7, lr}
   12720:	sub	sp, sp, #56	; 0x38
   12724:	ldr	r4, [pc, #592]	; 1297c <__assert_fail@plt+0x1850>
   12728:	beq	12760 <__assert_fail@plt+0x1634>
   1272c:	mov	r2, #5
   12730:	mov	r0, #0
   12734:	ldr	r3, [pc, #580]	; 12980 <__assert_fail@plt+0x1854>
   12738:	ldr	r1, [pc, #580]	; 12984 <__assert_fail@plt+0x1858>
   1273c:	ldr	r6, [r3]
   12740:	bl	10f10 <dcgettext@plt>
   12744:	mov	r2, r0
   12748:	mov	r1, #1
   1274c:	ldr	r3, [r4]
   12750:	mov	r0, r6
   12754:	bl	11060 <__fprintf_chk@plt>
   12758:	mov	r0, r5
   1275c:	bl	10fe8 <exit@plt>
   12760:	mov	r2, #5
   12764:	ldr	r1, [pc, #540]	; 12988 <__assert_fail@plt+0x185c>
   12768:	mov	r6, sp
   1276c:	bl	10f10 <dcgettext@plt>
   12770:	ldr	r2, [r4]
   12774:	mov	r1, r0
   12778:	mov	r0, #1
   1277c:	bl	1103c <__printf_chk@plt>
   12780:	ldr	r4, [pc, #516]	; 1298c <__assert_fail@plt+0x1860>
   12784:	mov	r2, #5
   12788:	mov	r0, r5
   1278c:	ldr	r1, [pc, #508]	; 12990 <__assert_fail@plt+0x1864>
   12790:	bl	10f10 <dcgettext@plt>
   12794:	ldr	r7, [pc, #504]	; 12994 <__assert_fail@plt+0x1868>
   12798:	ldr	r1, [r4]
   1279c:	bl	10e80 <fputs_unlocked@plt>
   127a0:	mov	r2, #5
   127a4:	ldr	r1, [pc, #492]	; 12998 <__assert_fail@plt+0x186c>
   127a8:	mov	r0, r5
   127ac:	bl	10f10 <dcgettext@plt>
   127b0:	ldr	r1, [r4]
   127b4:	bl	10e80 <fputs_unlocked@plt>
   127b8:	mov	r2, #5
   127bc:	ldr	r1, [pc, #472]	; 1299c <__assert_fail@plt+0x1870>
   127c0:	mov	r0, r5
   127c4:	bl	10f10 <dcgettext@plt>
   127c8:	ldr	r1, [r4]
   127cc:	bl	10e80 <fputs_unlocked@plt>
   127d0:	mov	r2, #5
   127d4:	ldr	r1, [pc, #452]	; 129a0 <__assert_fail@plt+0x1874>
   127d8:	mov	r0, r5
   127dc:	bl	10f10 <dcgettext@plt>
   127e0:	ldr	r1, [r4]
   127e4:	bl	10e80 <fputs_unlocked@plt>
   127e8:	mov	r2, #5
   127ec:	ldr	r1, [pc, #432]	; 129a4 <__assert_fail@plt+0x1878>
   127f0:	mov	r0, r5
   127f4:	bl	10f10 <dcgettext@plt>
   127f8:	ldr	r1, [r4]
   127fc:	bl	10e80 <fputs_unlocked@plt>
   12800:	mov	r2, #5
   12804:	ldr	r1, [pc, #412]	; 129a8 <__assert_fail@plt+0x187c>
   12808:	mov	r0, r5
   1280c:	bl	10f10 <dcgettext@plt>
   12810:	ldr	r1, [r4]
   12814:	bl	10e80 <fputs_unlocked@plt>
   12818:	mov	r2, #5
   1281c:	ldr	r1, [pc, #392]	; 129ac <__assert_fail@plt+0x1880>
   12820:	mov	r0, r5
   12824:	bl	10f10 <dcgettext@plt>
   12828:	ldr	r1, [r4]
   1282c:	bl	10e80 <fputs_unlocked@plt>
   12830:	mov	r2, #5
   12834:	ldr	r1, [pc, #372]	; 129b0 <__assert_fail@plt+0x1884>
   12838:	mov	r0, r5
   1283c:	bl	10f10 <dcgettext@plt>
   12840:	ldr	r1, [r4]
   12844:	bl	10e80 <fputs_unlocked@plt>
   12848:	mov	r2, #5
   1284c:	ldr	r1, [pc, #352]	; 129b4 <__assert_fail@plt+0x1888>
   12850:	mov	r0, r5
   12854:	bl	10f10 <dcgettext@plt>
   12858:	ldr	r1, [r4]
   1285c:	bl	10e80 <fputs_unlocked@plt>
   12860:	ldr	lr, [pc, #336]	; 129b8 <__assert_fail@plt+0x188c>
   12864:	mov	ip, sp
   12868:	ldm	lr!, {r0, r1, r2, r3}
   1286c:	stmia	ip!, {r0, r1, r2, r3}
   12870:	ldm	lr!, {r0, r1, r2, r3}
   12874:	stmia	ip!, {r0, r1, r2, r3}
   12878:	ldm	lr!, {r0, r1, r2, r3}
   1287c:	stmia	ip!, {r0, r1, r2, r3}
   12880:	ldm	lr, {r0, r1}
   12884:	stm	ip, {r0, r1}
   12888:	ldr	r1, [r6]
   1288c:	cmp	r1, #0
   12890:	bne	12934 <__assert_fail@plt+0x1808>
   12894:	ldr	r6, [r6, #4]
   12898:	mov	r2, #5
   1289c:	mov	r0, #0
   128a0:	ldr	r7, [pc, #236]	; 12994 <__assert_fail@plt+0x1868>
   128a4:	ldr	r1, [pc, #272]	; 129bc <__assert_fail@plt+0x1890>
   128a8:	cmp	r6, #0
   128ac:	moveq	r6, r7
   128b0:	bl	10f10 <dcgettext@plt>
   128b4:	mov	r1, r0
   128b8:	ldr	r3, [pc, #256]	; 129c0 <__assert_fail@plt+0x1894>
   128bc:	mov	r0, #1
   128c0:	ldr	r2, [pc, #252]	; 129c4 <__assert_fail@plt+0x1898>
   128c4:	bl	1103c <__printf_chk@plt>
   128c8:	mov	r1, #0
   128cc:	mov	r0, #5
   128d0:	bl	1109c <setlocale@plt>
   128d4:	cmp	r0, #0
   128d8:	bne	1294c <__assert_fail@plt+0x1820>
   128dc:	mov	r2, #5
   128e0:	ldr	r1, [pc, #224]	; 129c8 <__assert_fail@plt+0x189c>
   128e4:	mov	r0, #0
   128e8:	bl	10f10 <dcgettext@plt>
   128ec:	mov	r1, r0
   128f0:	ldr	r3, [pc, #156]	; 12994 <__assert_fail@plt+0x1868>
   128f4:	mov	r0, #1
   128f8:	ldr	r2, [pc, #192]	; 129c0 <__assert_fail@plt+0x1894>
   128fc:	bl	1103c <__printf_chk@plt>
   12900:	mov	r2, #5
   12904:	ldr	r1, [pc, #192]	; 129cc <__assert_fail@plt+0x18a0>
   12908:	mov	r0, #0
   1290c:	bl	10f10 <dcgettext@plt>
   12910:	ldr	r2, [pc, #184]	; 129d0 <__assert_fail@plt+0x18a4>
   12914:	cmp	r6, r7
   12918:	mov	r1, r0
   1291c:	mov	r0, #1
   12920:	ldr	r3, [pc, #172]	; 129d4 <__assert_fail@plt+0x18a8>
   12924:	moveq	r3, r2
   12928:	mov	r2, r6
   1292c:	bl	1103c <__printf_chk@plt>
   12930:	b	12758 <__assert_fail@plt+0x162c>
   12934:	mov	r0, r7
   12938:	bl	10e8c <strcmp@plt>
   1293c:	cmp	r0, #0
   12940:	beq	12894 <__assert_fail@plt+0x1768>
   12944:	add	r6, r6, #8
   12948:	b	12888 <__assert_fail@plt+0x175c>
   1294c:	mov	r2, #3
   12950:	ldr	r1, [pc, #128]	; 129d8 <__assert_fail@plt+0x18ac>
   12954:	bl	110f0 <strncmp@plt>
   12958:	cmp	r0, #0
   1295c:	beq	128dc <__assert_fail@plt+0x17b0>
   12960:	mov	r2, #5
   12964:	ldr	r1, [pc, #112]	; 129dc <__assert_fail@plt+0x18b0>
   12968:	mov	r0, #0
   1296c:	bl	10f10 <dcgettext@plt>
   12970:	ldr	r1, [r4]
   12974:	bl	10e80 <fputs_unlocked@plt>
   12978:	b	128dc <__assert_fail@plt+0x17b0>
   1297c:	andeq	r8, r2, r8, lsl #4
   12980:	andeq	r8, r2, r8, ror r1
   12984:	andeq	r5, r1, r2, lsl pc
   12988:	andeq	r5, r1, r9, lsr pc
   1298c:	andeq	r8, r2, r4, lsl #3
   12990:	andeq	r5, r1, ip, asr pc
   12994:	andeq	r5, r1, sp, lsl #30
   12998:	strdeq	r5, [r1], -r2
   1299c:	andeq	r6, r1, lr, lsr #32
   129a0:	andeq	r6, r1, sp, lsl #2
   129a4:	andeq	r6, r1, sp, lsl r2
   129a8:	andeq	r6, r1, r0, lsr r4
   129ac:	andeq	r6, r1, sp, ror #8
   129b0:	muleq	r1, sl, r4
   129b4:	ldrdeq	r6, [r1], -r0
   129b8:	andeq	r5, r1, ip, lsr #27
   129bc:	andeq	r6, r1, r2, lsl #16
   129c0:	andeq	r6, r1, r9, lsl r8
   129c4:	andeq	r6, r1, r1, asr #16
   129c8:	muleq	r1, sl, r8
   129cc:			; <UNDEFINED> instruction: 0x000168b5
   129d0:	andeq	r6, r1, r5, lsl sl
   129d4:	andeq	r5, r1, sl, asr #29
   129d8:	andeq	r6, r1, pc, asr #16
   129dc:	andeq	r6, r1, r3, asr r8
   129e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   129e4:	mov	r7, r3
   129e8:	mov	r8, r0
   129ec:	mov	r5, r1
   129f0:	ldr	r3, [r3]
   129f4:	ldr	r4, [pc, #252]	; 12af8 <__assert_fail@plt+0x19cc>
   129f8:	ldr	r6, [sp, #32]
   129fc:	cmp	r3, #2
   12a00:	bne	12aa8 <__assert_fail@plt+0x197c>
   12a04:	ldr	r9, [r1]
   12a08:	clz	r3, r9
   12a0c:	lsr	r3, r3, #5
   12a10:	add	r1, r4, r3, lsl #2
   12a14:	ldr	r3, [r5, r3, lsl #2]
   12a18:	ldr	r0, [r1, #48]	; 0x30
   12a1c:	cmp	r3, #3
   12a20:	ldrls	pc, [pc, r3, lsl #2]
   12a24:	b	12a90 <__assert_fail@plt+0x1964>
   12a28:	andeq	r2, r1, r8, lsr sl
   12a2c:	andeq	r2, r1, r4, ror sl
   12a30:	ldrdeq	r2, [r1], -r4
   12a34:	strdeq	r2, [r1], -r0
   12a38:	mov	r2, #5
   12a3c:	ldr	r1, [pc, #184]	; 12afc <__assert_fail@plt+0x19d0>
   12a40:	mov	r0, #0
   12a44:	bl	10f10 <dcgettext@plt>
   12a48:	mov	r4, r0
   12a4c:	mov	r1, r8
   12a50:	mov	r0, #4
   12a54:	bl	14454 <__assert_fail@plt+0x3328>
   12a58:	mov	r1, #0
   12a5c:	mov	r3, r0
   12a60:	mov	r2, r4
   12a64:	mov	r0, r1
   12a68:	bl	10f7c <error@plt>
   12a6c:	mov	r0, #1
   12a70:	bl	12718 <__assert_fail@plt+0x15ec>
   12a74:	ldr	r3, [r2]
   12a78:	sub	r3, r3, #1
   12a7c:	str	r3, [r2]
   12a80:	bl	123d0 <__assert_fail@plt+0x12a4>
   12a84:	mov	r1, r0
   12a88:	ldr	r0, [pc, #112]	; 12b00 <__assert_fail@plt+0x19d4>
   12a8c:	bl	11dd8 <__assert_fail@plt+0xcac>
   12a90:	cmp	r9, #0
   12a94:	ldrne	r3, [r5, #4]
   12a98:	strne	r3, [r5]
   12a9c:	ldrne	r3, [r4, #52]	; 0x34
   12aa0:	strne	r3, [r4, #48]	; 0x30
   12aa4:	mov	r3, #1
   12aa8:	ldr	r2, [r6]
   12aac:	add	r4, r4, r3, lsl #2
   12ab0:	str	r2, [r5, r3, lsl #2]
   12ab4:	add	r3, r3, #1
   12ab8:	str	r8, [r4, #48]	; 0x30
   12abc:	str	r3, [r7]
   12ac0:	ldr	r3, [r6]
   12ac4:	cmp	r3, #3
   12ac8:	ldreq	r2, [sp, #36]	; 0x24
   12acc:	streq	r3, [r2]
   12ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12ad4:	ldr	r3, [r2, #4]
   12ad8:	sub	r3, r3, #1
   12adc:	str	r3, [r2, #4]
   12ae0:	bl	123d0 <__assert_fail@plt+0x12a4>
   12ae4:	mov	r1, r0
   12ae8:	ldr	r0, [pc, #20]	; 12b04 <__assert_fail@plt+0x19d8>
   12aec:	b	12a8c <__assert_fail@plt+0x1960>
   12af0:	bl	1246c <__assert_fail@plt+0x1340>
   12af4:	b	12a90 <__assert_fail@plt+0x1964>
   12af8:	muleq	r2, r0, r1
   12afc:	andeq	r6, r1, r8, ror #17
   12b00:	andeq	r8, r2, r0, lsl r1
   12b04:	andeq	r8, r2, r4, lsl r1
   12b08:	ldr	r3, [pc, #4]	; 12b14 <__assert_fail@plt+0x19e8>
   12b0c:	str	r0, [r3]
   12b10:	bx	lr
   12b14:	andeq	r8, r2, r0, lsl #4
   12b18:	ldr	r3, [pc, #4]	; 12b24 <__assert_fail@plt+0x19f8>
   12b1c:	strb	r0, [r3, #4]
   12b20:	bx	lr
   12b24:	andeq	r8, r2, r0, lsl #4
   12b28:	ldr	r3, [pc, #176]	; 12be0 <__assert_fail@plt+0x1ab4>
   12b2c:	push	{r0, r1, r4, r5, r6, lr}
   12b30:	ldr	r0, [r3]
   12b34:	bl	158d8 <__assert_fail@plt+0x47ac>
   12b38:	cmp	r0, #0
   12b3c:	beq	12bc4 <__assert_fail@plt+0x1a98>
   12b40:	ldr	r4, [pc, #156]	; 12be4 <__assert_fail@plt+0x1ab8>
   12b44:	bl	11018 <__errno_location@plt>
   12b48:	mov	r5, r0
   12b4c:	ldrb	r6, [r4, #4]
   12b50:	cmp	r6, #0
   12b54:	beq	12b64 <__assert_fail@plt+0x1a38>
   12b58:	ldr	r3, [r0]
   12b5c:	cmp	r3, #32
   12b60:	beq	12bc4 <__assert_fail@plt+0x1a98>
   12b64:	mov	r2, #5
   12b68:	ldr	r1, [pc, #120]	; 12be8 <__assert_fail@plt+0x1abc>
   12b6c:	mov	r0, #0
   12b70:	bl	10f10 <dcgettext@plt>
   12b74:	mov	r6, r0
   12b78:	ldr	r0, [r4]
   12b7c:	cmp	r0, #0
   12b80:	beq	12bb0 <__assert_fail@plt+0x1a84>
   12b84:	ldr	r4, [r5]
   12b88:	bl	144e8 <__assert_fail@plt+0x33bc>
   12b8c:	mov	r3, r0
   12b90:	ldr	r2, [pc, #84]	; 12bec <__assert_fail@plt+0x1ac0>
   12b94:	mov	r0, #0
   12b98:	str	r6, [sp]
   12b9c:	mov	r1, r4
   12ba0:	bl	10f7c <error@plt>
   12ba4:	ldr	r3, [pc, #68]	; 12bf0 <__assert_fail@plt+0x1ac4>
   12ba8:	ldr	r0, [r3]
   12bac:	bl	10ebc <_exit@plt>
   12bb0:	mov	r3, r6
   12bb4:	ldr	r2, [pc, #56]	; 12bf4 <__assert_fail@plt+0x1ac8>
   12bb8:	ldr	r1, [r5]
   12bbc:	bl	10f7c <error@plt>
   12bc0:	b	12ba4 <__assert_fail@plt+0x1a78>
   12bc4:	ldr	r3, [pc, #44]	; 12bf8 <__assert_fail@plt+0x1acc>
   12bc8:	ldr	r0, [r3]
   12bcc:	bl	158d8 <__assert_fail@plt+0x47ac>
   12bd0:	cmp	r0, #0
   12bd4:	bne	12ba4 <__assert_fail@plt+0x1a78>
   12bd8:	add	sp, sp, #8
   12bdc:	pop	{r4, r5, r6, pc}
   12be0:	andeq	r8, r2, r4, lsl #3
   12be4:	andeq	r8, r2, r0, lsl #4
   12be8:	andeq	r6, r1, r5, lsr #21
   12bec:			; <UNDEFINED> instruction: 0x00016ab1
   12bf0:	andeq	r8, r2, r0, lsr #2
   12bf4:	andeq	r5, r1, sl, lsl #30
   12bf8:	andeq	r8, r2, r8, ror r1
   12bfc:	b	10e98 <posix_fadvise64@plt>
   12c00:	cmp	r0, #0
   12c04:	bxeq	lr
   12c08:	push	{r0, r1, r2, r3, r4, lr}
   12c0c:	mov	r4, r1
   12c10:	bl	11048 <fileno@plt>
   12c14:	mov	r2, #0
   12c18:	mov	r3, #0
   12c1c:	strd	r2, [sp]
   12c20:	str	r4, [sp, #8]
   12c24:	bl	10e98 <posix_fadvise64@plt>
   12c28:	add	sp, sp, #16
   12c2c:	pop	{r4, pc}
   12c30:	push	{r0, r1, r2, r4, r5, lr}
   12c34:	mov	r4, r0
   12c38:	bl	11048 <fileno@plt>
   12c3c:	cmp	r0, #0
   12c40:	mov	r0, r4
   12c44:	bge	12c54 <__assert_fail@plt+0x1b28>
   12c48:	add	sp, sp, #12
   12c4c:	pop	{r4, r5, lr}
   12c50:	b	11078 <fclose@plt>
   12c54:	bl	10fac <__freading@plt>
   12c58:	cmp	r0, #0
   12c5c:	bne	12c98 <__assert_fail@plt+0x1b6c>
   12c60:	mov	r0, r4
   12c64:	bl	12cd8 <__assert_fail@plt+0x1bac>
   12c68:	cmp	r0, #0
   12c6c:	bne	12ccc <__assert_fail@plt+0x1ba0>
   12c70:	mov	r5, #0
   12c74:	mov	r0, r4
   12c78:	bl	11078 <fclose@plt>
   12c7c:	cmp	r5, #0
   12c80:	beq	12c90 <__assert_fail@plt+0x1b64>
   12c84:	bl	11018 <__errno_location@plt>
   12c88:	str	r5, [r0]
   12c8c:	mvn	r0, #0
   12c90:	add	sp, sp, #12
   12c94:	pop	{r4, r5, pc}
   12c98:	mov	r0, r4
   12c9c:	bl	11048 <fileno@plt>
   12ca0:	mov	r3, #1
   12ca4:	mov	r2, #0
   12ca8:	str	r3, [sp]
   12cac:	mov	r3, #0
   12cb0:	bl	10f40 <lseek64@plt>
   12cb4:	mvn	r3, #0
   12cb8:	mvn	r2, #0
   12cbc:	cmp	r1, r3
   12cc0:	cmpeq	r0, r2
   12cc4:	bne	12c60 <__assert_fail@plt+0x1b34>
   12cc8:	b	12c70 <__assert_fail@plt+0x1b44>
   12ccc:	bl	11018 <__errno_location@plt>
   12cd0:	ldr	r5, [r0]
   12cd4:	b	12c74 <__assert_fail@plt+0x1b48>
   12cd8:	push	{r0, r1, r4, lr}
   12cdc:	subs	r4, r0, #0
   12ce0:	bne	12cf4 <__assert_fail@plt+0x1bc8>
   12ce4:	mov	r0, r4
   12ce8:	add	sp, sp, #8
   12cec:	pop	{r4, lr}
   12cf0:	b	10ea4 <fflush@plt>
   12cf4:	bl	10fac <__freading@plt>
   12cf8:	cmp	r0, #0
   12cfc:	beq	12ce4 <__assert_fail@plt+0x1bb8>
   12d00:	ldr	r3, [r4]
   12d04:	tst	r3, #256	; 0x100
   12d08:	beq	12ce4 <__assert_fail@plt+0x1bb8>
   12d0c:	mov	r3, #1
   12d10:	mov	r2, #0
   12d14:	mov	r0, r4
   12d18:	str	r3, [sp]
   12d1c:	mov	r3, #0
   12d20:	bl	12e0c <__assert_fail@plt+0x1ce0>
   12d24:	b	12ce4 <__assert_fail@plt+0x1bb8>
   12d28:	push	{r4, r5, r6, lr}
   12d2c:	mov	r6, r1
   12d30:	bl	110c0 <fopen64@plt>
   12d34:	subs	r4, r0, #0
   12d38:	beq	12d70 <__assert_fail@plt+0x1c44>
   12d3c:	bl	11048 <fileno@plt>
   12d40:	cmp	r0, #2
   12d44:	bhi	12d70 <__assert_fail@plt+0x1c44>
   12d48:	bl	146c8 <__assert_fail@plt+0x359c>
   12d4c:	subs	r5, r0, #0
   12d50:	bge	12d78 <__assert_fail@plt+0x1c4c>
   12d54:	bl	11018 <__errno_location@plt>
   12d58:	mov	r5, r0
   12d5c:	mov	r0, r4
   12d60:	ldr	r6, [r5]
   12d64:	bl	12c30 <__assert_fail@plt+0x1b04>
   12d68:	str	r6, [r5]
   12d6c:	mov	r4, #0
   12d70:	mov	r0, r4
   12d74:	pop	{r4, r5, r6, pc}
   12d78:	mov	r0, r4
   12d7c:	bl	12c30 <__assert_fail@plt+0x1b04>
   12d80:	cmp	r0, #0
   12d84:	beq	12da4 <__assert_fail@plt+0x1c78>
   12d88:	bl	11018 <__errno_location@plt>
   12d8c:	mov	r4, r0
   12d90:	mov	r0, r5
   12d94:	ldr	r6, [r4]
   12d98:	bl	11114 <close@plt>
   12d9c:	str	r6, [r4]
   12da0:	b	12d6c <__assert_fail@plt+0x1c40>
   12da4:	mov	r1, r6
   12da8:	mov	r0, r5
   12dac:	bl	10e68 <fdopen@plt>
   12db0:	subs	r4, r0, #0
   12db4:	bne	12d70 <__assert_fail@plt+0x1c44>
   12db8:	b	12d88 <__assert_fail@plt+0x1c5c>
   12dbc:	push	{r0, r1, r2, r4, r5, lr}
   12dc0:	mov	r5, r0
   12dc4:	bl	11018 <__errno_location@plt>
   12dc8:	mov	r4, r0
   12dcc:	mov	r0, r5
   12dd0:	ldr	r3, [r4]
   12dd4:	str	r3, [sp]
   12dd8:	str	r3, [sp, #4]
   12ddc:	mov	r3, #0
   12de0:	str	r3, [r4]
   12de4:	bl	10eb0 <free@plt>
   12de8:	ldr	r3, [r4]
   12dec:	add	r2, sp, #8
   12df0:	clz	r3, r3
   12df4:	lsr	r3, r3, #5
   12df8:	add	r3, r2, r3, lsl #2
   12dfc:	ldr	r3, [r3, #-8]
   12e00:	str	r3, [r4]
   12e04:	add	sp, sp, #12
   12e08:	pop	{r4, r5, pc}
   12e0c:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   12e10:	mov	r4, r0
   12e14:	ldmib	r0, {ip, lr}
   12e18:	ldr	r8, [sp, #32]
   12e1c:	cmp	lr, ip
   12e20:	bne	12e90 <__assert_fail@plt+0x1d64>
   12e24:	ldr	ip, [r0, #16]
   12e28:	ldr	lr, [r0, #20]
   12e2c:	cmp	lr, ip
   12e30:	bne	12e90 <__assert_fail@plt+0x1d64>
   12e34:	ldr	r5, [r0, #36]	; 0x24
   12e38:	cmp	r5, #0
   12e3c:	bne	12e90 <__assert_fail@plt+0x1d64>
   12e40:	mov	r6, r2
   12e44:	mov	r7, r3
   12e48:	bl	11048 <fileno@plt>
   12e4c:	mov	r2, r6
   12e50:	mov	r3, r7
   12e54:	str	r8, [sp]
   12e58:	bl	10f40 <lseek64@plt>
   12e5c:	mvn	r3, #0
   12e60:	mvn	r2, #0
   12e64:	cmp	r1, r3
   12e68:	cmpeq	r0, r2
   12e6c:	mvneq	r0, #0
   12e70:	beq	12e88 <__assert_fail@plt+0x1d5c>
   12e74:	ldr	r3, [r4]
   12e78:	strd	r0, [r4, #80]	; 0x50
   12e7c:	mov	r0, r5
   12e80:	bic	r3, r3, #16
   12e84:	str	r3, [r4]
   12e88:	add	sp, sp, #8
   12e8c:	pop	{r4, r5, r6, r7, r8, pc}
   12e90:	mov	r0, r4
   12e94:	str	r8, [sp, #32]
   12e98:	add	sp, sp, #8
   12e9c:	pop	{r4, r5, r6, r7, r8, lr}
   12ea0:	b	11084 <fseeko64@plt>
   12ea4:	push	{lr}		; (str lr, [sp, #-4]!)
   12ea8:	sub	sp, sp, #268	; 0x10c
   12eac:	movw	r2, #257	; 0x101
   12eb0:	add	r1, sp, #4
   12eb4:	bl	14644 <__assert_fail@plt+0x3518>
   12eb8:	cmp	r0, #0
   12ebc:	movne	r0, #0
   12ec0:	bne	12ef0 <__assert_fail@plt+0x1dc4>
   12ec4:	ldr	r1, [pc, #44]	; 12ef8 <__assert_fail@plt+0x1dcc>
   12ec8:	add	r0, sp, #4
   12ecc:	bl	10e8c <strcmp@plt>
   12ed0:	cmp	r0, #0
   12ed4:	beq	12eec <__assert_fail@plt+0x1dc0>
   12ed8:	ldr	r1, [pc, #28]	; 12efc <__assert_fail@plt+0x1dd0>
   12edc:	add	r0, sp, #4
   12ee0:	bl	10e8c <strcmp@plt>
   12ee4:	adds	r0, r0, #0
   12ee8:	movne	r0, #1
   12eec:	and	r0, r0, #1
   12ef0:	add	sp, sp, #268	; 0x10c
   12ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   12ef8:			; <UNDEFINED> instruction: 0x00016ab8
   12efc:			; <UNDEFINED> instruction: 0x00016aba
   12f00:	mov	r3, #0
   12f04:	str	r3, [r0]
   12f08:	str	r3, [r0, #4]
   12f0c:	str	r3, [r0, #8]
   12f10:	bx	lr
   12f14:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f18:	mov	r5, r0
   12f1c:	mov	sl, r1
   12f20:	mov	r9, r2
   12f24:	ldr	r7, [r0]
   12f28:	ldr	r6, [r0, #8]
   12f2c:	mov	r0, r1
   12f30:	bl	11108 <feof_unlocked@plt>
   12f34:	cmp	r0, #0
   12f38:	moveq	fp, #1
   12f3c:	add	r7, r6, r7
   12f40:	moveq	r4, r6
   12f44:	beq	12f58 <__assert_fail@plt+0x1e2c>
   12f48:	mov	r5, #0
   12f4c:	mov	r0, r5
   12f50:	add	sp, sp, #12
   12f54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f58:	mov	r0, sl
   12f5c:	bl	10f04 <getc_unlocked@plt>
   12f60:	cmn	r0, #1
   12f64:	mov	r8, r0
   12f68:	bne	12f94 <__assert_fail@plt+0x1e68>
   12f6c:	cmp	r6, r4
   12f70:	beq	12f48 <__assert_fail@plt+0x1e1c>
   12f74:	mov	r0, sl
   12f78:	bl	10f64 <ferror_unlocked@plt>
   12f7c:	cmp	r0, #0
   12f80:	bne	12f48 <__assert_fail@plt+0x1e1c>
   12f84:	ldrb	r3, [r4, #-1]
   12f88:	cmp	r3, r9
   12f8c:	beq	12fd8 <__assert_fail@plt+0x1eac>
   12f90:	mov	r8, r9
   12f94:	cmp	r4, r7
   12f98:	bne	12fcc <__assert_fail@plt+0x1ea0>
   12f9c:	mov	r0, r6
   12fa0:	mvn	r3, #0
   12fa4:	ldr	r4, [r5]
   12fa8:	mov	r2, #1
   12fac:	mov	r1, r5
   12fb0:	str	fp, [sp]
   12fb4:	bl	14d14 <__assert_fail@plt+0x3be8>
   12fb8:	ldr	r7, [r5]
   12fbc:	mov	r6, r0
   12fc0:	str	r0, [r5, #8]
   12fc4:	add	r4, r0, r4
   12fc8:	add	r7, r0, r7
   12fcc:	cmp	r9, r8
   12fd0:	strb	r8, [r4], #1
   12fd4:	bne	12f58 <__assert_fail@plt+0x1e2c>
   12fd8:	sub	r4, r4, r6
   12fdc:	str	r4, [r5, #4]
   12fe0:	b	12f4c <__assert_fail@plt+0x1e20>
   12fe4:	mov	r2, #10
   12fe8:	b	12f14 <__assert_fail@plt+0x1de8>
   12fec:	ldr	r0, [r0, #8]
   12ff0:	b	12dbc <__assert_fail@plt+0x1c90>
   12ff4:	push	{r4, r5, r6, r7, r8, lr}
   12ff8:	mov	r4, r0
   12ffc:	sub	r5, r1, #1
   13000:	add	r6, r0, r2
   13004:	cmp	r4, r6
   13008:	bne	13014 <__assert_fail@plt+0x1ee8>
   1300c:	mov	r0, #0
   13010:	pop	{r4, r5, r6, r7, r8, pc}
   13014:	bl	10fb8 <__ctype_toupper_loc@plt>
   13018:	ldrb	r7, [r4], #1
   1301c:	ldrb	r2, [r5, #1]!
   13020:	ldr	r3, [r0]
   13024:	ldr	r0, [r3, r7, lsl #2]
   13028:	ldr	r3, [r3, r2, lsl #2]
   1302c:	subs	r0, r0, r3
   13030:	beq	13004 <__assert_fail@plt+0x1ed8>
   13034:	pop	{r4, r5, r6, r7, r8, pc}
   13038:	push	{r4, r5, r6, lr}
   1303c:	subs	r4, r0, #0
   13040:	bne	13058 <__assert_fail@plt+0x1f2c>
   13044:	ldr	r3, [pc, #124]	; 130c8 <__assert_fail@plt+0x1f9c>
   13048:	ldr	r0, [pc, #124]	; 130cc <__assert_fail@plt+0x1fa0>
   1304c:	ldr	r1, [r3]
   13050:	bl	110e4 <fputs@plt>
   13054:	bl	110fc <abort@plt>
   13058:	mov	r1, #47	; 0x2f
   1305c:	bl	110a8 <strrchr@plt>
   13060:	subs	r6, r0, #0
   13064:	beq	130b4 <__assert_fail@plt+0x1f88>
   13068:	add	r5, r6, #1
   1306c:	sub	r3, r5, r4
   13070:	cmp	r3, #6
   13074:	ble	130b4 <__assert_fail@plt+0x1f88>
   13078:	mov	r2, #7
   1307c:	ldr	r1, [pc, #76]	; 130d0 <__assert_fail@plt+0x1fa4>
   13080:	sub	r0, r6, #6
   13084:	bl	110f0 <strncmp@plt>
   13088:	cmp	r0, #0
   1308c:	bne	130b4 <__assert_fail@plt+0x1f88>
   13090:	mov	r2, #3
   13094:	ldr	r1, [pc, #56]	; 130d4 <__assert_fail@plt+0x1fa8>
   13098:	mov	r0, r5
   1309c:	bl	110f0 <strncmp@plt>
   130a0:	cmp	r0, #0
   130a4:	ldreq	r3, [pc, #44]	; 130d8 <__assert_fail@plt+0x1fac>
   130a8:	addeq	r4, r6, #4
   130ac:	movne	r4, r5
   130b0:	streq	r4, [r3]
   130b4:	ldr	r3, [pc, #32]	; 130dc <__assert_fail@plt+0x1fb0>
   130b8:	str	r4, [r3]
   130bc:	ldr	r3, [pc, #28]	; 130e0 <__assert_fail@plt+0x1fb4>
   130c0:	str	r4, [r3]
   130c4:	pop	{r4, r5, r6, pc}
   130c8:	andeq	r8, r2, r8, ror r1
   130cc:	andeq	r6, r1, r0, asr #21
   130d0:	strdeq	r6, [r1], -r8
   130d4:	andeq	r6, r1, r0, lsl #22
   130d8:	andeq	r8, r2, r8, ror #2
   130dc:	andeq	r8, r2, r8, lsl #4
   130e0:	andeq	r8, r2, ip, ror #2
   130e4:	push	{r4, lr}
   130e8:	mov	r2, #48	; 0x30
   130ec:	mov	r4, r1
   130f0:	mov	r1, #0
   130f4:	bl	11030 <memset@plt>
   130f8:	cmp	r4, #10
   130fc:	bne	13104 <__assert_fail@plt+0x1fd8>
   13100:	bl	110fc <abort@plt>
   13104:	str	r4, [r0]
   13108:	pop	{r4, pc}
   1310c:	push	{r4, r5, r6, lr}
   13110:	mov	r2, #5
   13114:	mov	r6, r0
   13118:	mov	r5, r1
   1311c:	mov	r1, r0
   13120:	mov	r0, #0
   13124:	bl	10f10 <dcgettext@plt>
   13128:	cmp	r6, r0
   1312c:	mov	r4, r0
   13130:	bne	131a0 <__assert_fail@plt+0x2074>
   13134:	bl	15b20 <__assert_fail@plt+0x49f4>
   13138:	ldrb	r3, [r0]
   1313c:	bic	r3, r3, #32
   13140:	cmp	r3, #85	; 0x55
   13144:	bne	131a8 <__assert_fail@plt+0x207c>
   13148:	ldrb	r3, [r0, #1]
   1314c:	bic	r3, r3, #32
   13150:	cmp	r3, #84	; 0x54
   13154:	bne	13218 <__assert_fail@plt+0x20ec>
   13158:	ldrb	r3, [r0, #2]
   1315c:	bic	r3, r3, #32
   13160:	cmp	r3, #70	; 0x46
   13164:	bne	13218 <__assert_fail@plt+0x20ec>
   13168:	ldrb	r3, [r0, #3]
   1316c:	cmp	r3, #45	; 0x2d
   13170:	bne	13218 <__assert_fail@plt+0x20ec>
   13174:	ldrb	r3, [r0, #4]
   13178:	cmp	r3, #56	; 0x38
   1317c:	bne	13218 <__assert_fail@plt+0x20ec>
   13180:	ldrb	r3, [r0, #5]
   13184:	cmp	r3, #0
   13188:	bne	13218 <__assert_fail@plt+0x20ec>
   1318c:	ldrb	r2, [r4]
   13190:	ldr	r3, [pc, #144]	; 13228 <__assert_fail@plt+0x20fc>
   13194:	ldr	r4, [pc, #144]	; 1322c <__assert_fail@plt+0x2100>
   13198:	cmp	r2, #96	; 0x60
   1319c:	movne	r4, r3
   131a0:	mov	r0, r4
   131a4:	pop	{r4, r5, r6, pc}
   131a8:	cmp	r3, #71	; 0x47
   131ac:	bne	13218 <__assert_fail@plt+0x20ec>
   131b0:	ldrb	r3, [r0, #1]
   131b4:	bic	r3, r3, #32
   131b8:	cmp	r3, #66	; 0x42
   131bc:	bne	13218 <__assert_fail@plt+0x20ec>
   131c0:	ldrb	r3, [r0, #2]
   131c4:	cmp	r3, #49	; 0x31
   131c8:	bne	13218 <__assert_fail@plt+0x20ec>
   131cc:	ldrb	r3, [r0, #3]
   131d0:	cmp	r3, #56	; 0x38
   131d4:	bne	13218 <__assert_fail@plt+0x20ec>
   131d8:	ldrb	r3, [r0, #4]
   131dc:	cmp	r3, #48	; 0x30
   131e0:	bne	13218 <__assert_fail@plt+0x20ec>
   131e4:	ldrb	r3, [r0, #5]
   131e8:	cmp	r3, #51	; 0x33
   131ec:	bne	13218 <__assert_fail@plt+0x20ec>
   131f0:	ldrb	r3, [r0, #6]
   131f4:	cmp	r3, #48	; 0x30
   131f8:	bne	13218 <__assert_fail@plt+0x20ec>
   131fc:	ldrb	r3, [r0, #7]
   13200:	cmp	r3, #0
   13204:	bne	13218 <__assert_fail@plt+0x20ec>
   13208:	ldrb	r2, [r4]
   1320c:	ldr	r3, [pc, #28]	; 13230 <__assert_fail@plt+0x2104>
   13210:	ldr	r4, [pc, #28]	; 13234 <__assert_fail@plt+0x2108>
   13214:	b	13198 <__assert_fail@plt+0x206c>
   13218:	ldr	r4, [pc, #24]	; 13238 <__assert_fail@plt+0x210c>
   1321c:	cmp	r5, #9
   13220:	ldr	r3, [pc, #20]	; 1323c <__assert_fail@plt+0x2110>
   13224:	b	1319c <__assert_fail@plt+0x2070>
   13228:	andeq	r6, r1, sl, asr fp
   1322c:	andeq	r6, r1, r5, ror #22
   13230:	andeq	r6, r1, lr, asr fp
   13234:	andeq	r6, r1, r1, ror #22
   13238:	andeq	r6, r1, r8, asr fp
   1323c:	andeq	r6, r1, r9, ror #22
   13240:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13244:	sub	sp, sp, #108	; 0x6c
   13248:	mov	r8, r0
   1324c:	mov	r5, r1
   13250:	mov	r6, #0
   13254:	str	r3, [sp, #40]	; 0x28
   13258:	str	r2, [sp, #48]	; 0x30
   1325c:	ldr	sl, [sp, #144]	; 0x90
   13260:	bl	10f4c <__ctype_get_mb_cur_max@plt>
   13264:	ldr	r3, [sp, #148]	; 0x94
   13268:	str	r6, [sp, #24]
   1326c:	str	r6, [sp, #32]
   13270:	str	r6, [sp, #44]	; 0x2c
   13274:	str	r6, [sp, #52]	; 0x34
   13278:	ubfx	r7, r3, #1, #1
   1327c:	mov	r3, #1
   13280:	str	r6, [sp, #60]	; 0x3c
   13284:	str	r3, [sp, #72]	; 0x48
   13288:	str	r0, [sp, #76]	; 0x4c
   1328c:	cmp	sl, #10
   13290:	ldrls	pc, [pc, sl, lsl #2]
   13294:	b	134d8 <__assert_fail@plt+0x23ac>
   13298:	andeq	r3, r1, r4, asr #5
   1329c:	strdeq	r3, [r1], -r0
   132a0:	andeq	r3, r1, r4, ror r4
   132a4:	andeq	r3, r1, ip, lsl #9
   132a8:	andeq	r3, r1, ip, asr r4
   132ac:			; <UNDEFINED> instruction: 0x000133b4
   132b0:	muleq	r1, r4, r3
   132b4:	ldrdeq	r3, [r1], -ip
   132b8:	andeq	r3, r1, r4, ror #7
   132bc:	andeq	r3, r1, r4, ror #7
   132c0:	andeq	r3, r1, r4, ror #7
   132c4:	mov	r4, sl
   132c8:	mov	r7, #0
   132cc:	mov	r9, r5
   132d0:	mov	r3, #0
   132d4:	str	r6, [sp, #68]	; 0x44
   132d8:	str	r3, [sp, #28]
   132dc:	ldr	r3, [sp, #40]	; 0x28
   132e0:	cmn	r3, #1
   132e4:	bne	13e84 <__assert_fail@plt+0x2d58>
   132e8:	ldr	r2, [sp, #28]
   132ec:	ldr	r3, [sp, #48]	; 0x30
   132f0:	ldrb	r3, [r3, r2]
   132f4:	adds	r3, r3, #0
   132f8:	movne	r3, #1
   132fc:	str	r3, [sp, #36]	; 0x24
   13300:	ldr	r3, [sp, #36]	; 0x24
   13304:	cmp	r3, #0
   13308:	bne	13514 <__assert_fail@plt+0x23e8>
   1330c:	sub	r3, sl, #2
   13310:	cmp	r4, #0
   13314:	clz	r3, r3
   13318:	movne	r2, #0
   1331c:	lsr	r3, r3, #5
   13320:	andeq	r2, r3, r7
   13324:	cmp	r2, #0
   13328:	bne	136d8 <__assert_fail@plt+0x25ac>
   1332c:	eor	r7, r7, #1
   13330:	ands	r3, r3, r7
   13334:	beq	13efc <__assert_fail@plt+0x2dd0>
   13338:	ldr	r2, [sp, #68]	; 0x44
   1333c:	cmp	r2, #0
   13340:	beq	13ec4 <__assert_fail@plt+0x2d98>
   13344:	ldr	r3, [sp, #72]	; 0x48
   13348:	cmp	r3, #0
   1334c:	beq	13e98 <__assert_fail@plt+0x2d6c>
   13350:	ldr	r2, [sp, #48]	; 0x30
   13354:	ldr	r3, [sp, #160]	; 0xa0
   13358:	ldr	r1, [sp, #60]	; 0x3c
   1335c:	str	r3, [sp, #16]
   13360:	ldr	r3, [sp, #156]	; 0x9c
   13364:	str	r3, [sp, #12]
   13368:	ldr	r3, [sp, #152]	; 0x98
   1336c:	str	r3, [sp, #8]
   13370:	ldr	r3, [sp, #148]	; 0x94
   13374:	str	r3, [sp, #4]
   13378:	mov	r3, #5
   1337c:	str	r3, [sp]
   13380:	ldr	r3, [sp, #40]	; 0x28
   13384:	mov	r0, r8
   13388:	bl	13240 <__assert_fail@plt+0x2114>
   1338c:	mov	r4, r0
   13390:	b	13ef0 <__assert_fail@plt+0x2dc4>
   13394:	ldr	r3, [pc, #2948]	; 13f20 <__assert_fail@plt+0x2df4>
   13398:	mov	r7, #1
   1339c:	mov	r4, #0
   133a0:	mov	sl, #5
   133a4:	str	r7, [sp, #24]
   133a8:	str	r7, [sp, #32]
   133ac:	str	r3, [sp, #44]	; 0x2c
   133b0:	b	132cc <__assert_fail@plt+0x21a0>
   133b4:	cmp	r7, #0
   133b8:	bne	134fc <__assert_fail@plt+0x23d0>
   133bc:	cmp	r5, #0
   133c0:	mov	r4, #1
   133c4:	movne	r3, #34	; 0x22
   133c8:	strbne	r3, [r8]
   133cc:	mov	r3, #1
   133d0:	str	r3, [sp, #24]
   133d4:	str	r3, [sp, #32]
   133d8:	ldr	r3, [pc, #2880]	; 13f20 <__assert_fail@plt+0x2df4>
   133dc:	str	r3, [sp, #44]	; 0x2c
   133e0:	b	132cc <__assert_fail@plt+0x21a0>
   133e4:	cmp	sl, #10
   133e8:	beq	1340c <__assert_fail@plt+0x22e0>
   133ec:	mov	r1, sl
   133f0:	ldr	r0, [pc, #2860]	; 13f24 <__assert_fail@plt+0x2df8>
   133f4:	bl	1310c <__assert_fail@plt+0x1fe0>
   133f8:	mov	r1, sl
   133fc:	str	r0, [sp, #156]	; 0x9c
   13400:	ldr	r0, [pc, #2848]	; 13f28 <__assert_fail@plt+0x2dfc>
   13404:	bl	1310c <__assert_fail@plt+0x1fe0>
   13408:	str	r0, [sp, #160]	; 0xa0
   1340c:	cmp	r7, #0
   13410:	moveq	r4, r7
   13414:	beq	1342c <__assert_fail@plt+0x2300>
   13418:	mov	r4, #0
   1341c:	b	1343c <__assert_fail@plt+0x2310>
   13420:	cmp	r5, r4
   13424:	strbhi	r3, [r8, r4]
   13428:	add	r4, r4, #1
   1342c:	ldr	r3, [sp, #156]	; 0x9c
   13430:	ldrb	r3, [r3, r4]
   13434:	cmp	r3, #0
   13438:	bne	13420 <__assert_fail@plt+0x22f4>
   1343c:	ldr	r0, [sp, #160]	; 0xa0
   13440:	bl	11000 <strlen@plt>
   13444:	ldr	r3, [sp, #160]	; 0xa0
   13448:	str	r0, [sp, #32]
   1344c:	str	r3, [sp, #44]	; 0x2c
   13450:	mov	r3, #1
   13454:	str	r3, [sp, #24]
   13458:	b	132cc <__assert_fail@plt+0x21a0>
   1345c:	mov	r3, #1
   13460:	cmp	r7, #0
   13464:	streq	r3, [sp, #24]
   13468:	beq	134ac <__assert_fail@plt+0x2380>
   1346c:	str	r3, [sp, #32]
   13470:	b	13498 <__assert_fail@plt+0x236c>
   13474:	cmp	r7, #0
   13478:	beq	134ac <__assert_fail@plt+0x2380>
   1347c:	mov	r3, #1
   13480:	str	r3, [sp, #32]
   13484:	ldr	r3, [pc, #2716]	; 13f28 <__assert_fail@plt+0x2dfc>
   13488:	b	1350c <__assert_fail@plt+0x23e0>
   1348c:	mov	r7, #1
   13490:	str	r7, [sp, #24]
   13494:	str	r7, [sp, #32]
   13498:	ldr	r3, [pc, #2696]	; 13f28 <__assert_fail@plt+0x2dfc>
   1349c:	mov	r4, #0
   134a0:	str	r3, [sp, #44]	; 0x2c
   134a4:	mov	sl, #2
   134a8:	b	132cc <__assert_fail@plt+0x21a0>
   134ac:	cmp	r5, #0
   134b0:	movne	r3, #39	; 0x27
   134b4:	movne	r7, #0
   134b8:	strbne	r3, [r8]
   134bc:	moveq	r7, r5
   134c0:	mov	r3, #1
   134c4:	mov	r4, #1
   134c8:	str	r3, [sp, #32]
   134cc:	ldr	r3, [pc, #2644]	; 13f28 <__assert_fail@plt+0x2dfc>
   134d0:	str	r3, [sp, #44]	; 0x2c
   134d4:	b	134a4 <__assert_fail@plt+0x2378>
   134d8:	bl	110fc <abort@plt>
   134dc:	mov	r3, #1
   134e0:	mov	r7, #0
   134e4:	str	r3, [sp, #24]
   134e8:	mov	r4, #0
   134ec:	b	132cc <__assert_fail@plt+0x21a0>
   134f0:	mov	r7, #1
   134f4:	str	sl, [sp, #32]
   134f8:	b	13498 <__assert_fail@plt+0x236c>
   134fc:	mov	r3, #1
   13500:	str	r7, [sp, #24]
   13504:	str	r3, [sp, #32]
   13508:	ldr	r3, [pc, #2576]	; 13f20 <__assert_fail@plt+0x2df4>
   1350c:	str	r3, [sp, #44]	; 0x2c
   13510:	b	134e8 <__assert_fail@plt+0x23bc>
   13514:	ldr	fp, [sp, #24]
   13518:	ldr	r3, [sp, #32]
   1351c:	cmp	sl, #2
   13520:	moveq	fp, #0
   13524:	andne	fp, fp, #1
   13528:	adds	r5, r3, #0
   1352c:	movne	r5, #1
   13530:	ands	r3, fp, r5
   13534:	str	r3, [sp, #64]	; 0x40
   13538:	beq	13608 <__assert_fail@plt+0x24dc>
   1353c:	ldr	r3, [sp, #28]
   13540:	ldr	r2, [sp, #32]
   13544:	cmp	r2, #1
   13548:	add	r6, r3, r2
   1354c:	mov	r3, r2
   13550:	ldr	r2, [sp, #40]	; 0x28
   13554:	movls	r3, #0
   13558:	movhi	r3, #1
   1355c:	cmn	r2, #1
   13560:	movne	r3, #0
   13564:	cmp	r3, #0
   13568:	beq	13578 <__assert_fail@plt+0x244c>
   1356c:	ldr	r0, [sp, #48]	; 0x30
   13570:	bl	11000 <strlen@plt>
   13574:	str	r0, [sp, #40]	; 0x28
   13578:	ldr	r3, [sp, #40]	; 0x28
   1357c:	cmp	r6, r3
   13580:	bhi	13600 <__assert_fail@plt+0x24d4>
   13584:	ldr	r0, [sp, #28]
   13588:	ldr	r2, [sp, #32]
   1358c:	ldr	r3, [sp, #48]	; 0x30
   13590:	ldr	r1, [sp, #44]	; 0x2c
   13594:	add	r0, r3, r0
   13598:	bl	10eec <memcmp@plt>
   1359c:	cmp	r0, #0
   135a0:	bne	13600 <__assert_fail@plt+0x24d4>
   135a4:	cmp	r7, #0
   135a8:	beq	13608 <__assert_fail@plt+0x24dc>
   135ac:	str	r7, [sp, #24]
   135b0:	ldr	r3, [sp, #24]
   135b4:	mov	r1, r9
   135b8:	ldr	r2, [sp, #48]	; 0x30
   135bc:	cmp	sl, #2
   135c0:	movne	r3, #0
   135c4:	andeq	r3, r3, #1
   135c8:	cmp	r3, #0
   135cc:	ldr	r3, [sp, #160]	; 0xa0
   135d0:	movne	sl, #4
   135d4:	str	sl, [sp]
   135d8:	str	r3, [sp, #16]
   135dc:	ldr	r3, [sp, #156]	; 0x9c
   135e0:	str	r3, [sp, #12]
   135e4:	mov	r3, #0
   135e8:	str	r3, [sp, #8]
   135ec:	ldr	r3, [sp, #148]	; 0x94
   135f0:	bic	r3, r3, #2
   135f4:	str	r3, [sp, #4]
   135f8:	ldr	r3, [sp, #40]	; 0x28
   135fc:	b	13384 <__assert_fail@plt+0x2258>
   13600:	mov	r3, #0
   13604:	str	r3, [sp, #64]	; 0x40
   13608:	ldr	r2, [sp, #28]
   1360c:	ldr	r3, [sp, #48]	; 0x30
   13610:	add	r3, r3, r2
   13614:	str	r3, [sp, #80]	; 0x50
   13618:	ldr	r3, [sp, #48]	; 0x30
   1361c:	ldrb	r6, [r3, r2]
   13620:	cmp	r6, #58	; 0x3a
   13624:	bhi	13788 <__assert_fail@plt+0x265c>
   13628:	cmp	r6, #43	; 0x2b
   1362c:	bcs	13948 <__assert_fail@plt+0x281c>
   13630:	cmp	r6, #32
   13634:	beq	1399c <__assert_fail@plt+0x2870>
   13638:	bhi	136e0 <__assert_fail@plt+0x25b4>
   1363c:	cmp	r6, #9
   13640:	beq	13b44 <__assert_fail@plt+0x2a18>
   13644:	bhi	136a4 <__assert_fail@plt+0x2578>
   13648:	cmp	r6, #7
   1364c:	beq	13b54 <__assert_fail@plt+0x2a28>
   13650:	bhi	13b70 <__assert_fail@plt+0x2a44>
   13654:	cmp	r6, #0
   13658:	beq	139b8 <__assert_fail@plt+0x288c>
   1365c:	ldr	r3, [sp, #76]	; 0x4c
   13660:	cmp	r3, #1
   13664:	bne	13bbc <__assert_fail@plt+0x2a90>
   13668:	bl	10fdc <__ctype_b_loc@plt>
   1366c:	ldr	r2, [r0]
   13670:	sxth	r3, r6
   13674:	lsl	r3, r3, #1
   13678:	ldrh	r5, [r2, r3]
   1367c:	ldr	r3, [sp, #76]	; 0x4c
   13680:	ubfx	r5, r5, #14, #1
   13684:	str	r3, [sp, #56]	; 0x38
   13688:	ldr	r3, [sp, #24]
   1368c:	eor	fp, r5, #1
   13690:	and	fp, fp, r3
   13694:	ands	fp, fp, #255	; 0xff
   13698:	beq	13878 <__assert_fail@plt+0x274c>
   1369c:	mov	r5, #0
   136a0:	b	13c68 <__assert_fail@plt+0x2b3c>
   136a4:	cmp	r6, #11
   136a8:	beq	13b78 <__assert_fail@plt+0x2a4c>
   136ac:	bcc	13b4c <__assert_fail@plt+0x2a20>
   136b0:	cmp	r6, #12
   136b4:	beq	13b80 <__assert_fail@plt+0x2a54>
   136b8:	cmp	r6, #13
   136bc:	moveq	r3, #114	; 0x72
   136c0:	bne	1365c <__assert_fail@plt+0x2530>
   136c4:	cmp	sl, #2
   136c8:	movne	r2, #0
   136cc:	andeq	r2, r7, #1
   136d0:	cmp	r2, #0
   136d4:	beq	13b58 <__assert_fail@plt+0x2a2c>
   136d8:	mov	sl, #2
   136dc:	b	135b0 <__assert_fail@plt+0x2484>
   136e0:	cmp	r6, #37	; 0x25
   136e4:	beq	13948 <__assert_fail@plt+0x281c>
   136e8:	bhi	136fc <__assert_fail@plt+0x25d0>
   136ec:	cmp	r6, #35	; 0x23
   136f0:	beq	13990 <__assert_fail@plt+0x2864>
   136f4:	mov	r5, #0
   136f8:	b	139a0 <__assert_fail@plt+0x2874>
   136fc:	cmp	r6, #39	; 0x27
   13700:	bne	136f4 <__assert_fail@plt+0x25c8>
   13704:	cmp	sl, #2
   13708:	ldrne	r5, [sp, #36]	; 0x24
   1370c:	movne	r3, r5
   13710:	strne	r3, [sp, #68]	; 0x44
   13714:	bne	13a94 <__assert_fail@plt+0x2968>
   13718:	cmp	r7, #0
   1371c:	bne	135b0 <__assert_fail@plt+0x2484>
   13720:	ldr	r3, [sp, #60]	; 0x3c
   13724:	cmp	r9, #0
   13728:	clz	r3, r3
   1372c:	lsr	r3, r3, #5
   13730:	moveq	r3, #0
   13734:	cmp	r3, #0
   13738:	strne	r9, [sp, #60]	; 0x3c
   1373c:	movne	r9, #0
   13740:	bne	13750 <__assert_fail@plt+0x2624>
   13744:	cmp	r9, r4
   13748:	movhi	r3, #39	; 0x27
   1374c:	strbhi	r3, [r8, r4]
   13750:	add	r3, r4, #1
   13754:	ldr	r5, [sp, #36]	; 0x24
   13758:	mov	fp, #0
   1375c:	cmp	r3, r9
   13760:	movcc	r2, #92	; 0x5c
   13764:	str	fp, [sp, #52]	; 0x34
   13768:	strbcc	r2, [r8, r3]
   1376c:	add	r3, r4, #2
   13770:	add	r4, r4, #3
   13774:	cmp	r3, r9
   13778:	str	r5, [sp, #68]	; 0x44
   1377c:	movcc	r2, #39	; 0x27
   13780:	strbcc	r2, [r8, r3]
   13784:	b	13878 <__assert_fail@plt+0x274c>
   13788:	cmp	r6, #94	; 0x5e
   1378c:	beq	136f4 <__assert_fail@plt+0x25c8>
   13790:	bhi	13950 <__assert_fail@plt+0x2824>
   13794:	cmp	r6, #90	; 0x5a
   13798:	bhi	1393c <__assert_fail@plt+0x2810>
   1379c:	cmp	r6, #65	; 0x41
   137a0:	bcs	13948 <__assert_fail@plt+0x281c>
   137a4:	cmp	r6, #62	; 0x3e
   137a8:	bls	136f4 <__assert_fail@plt+0x25c8>
   137ac:	cmp	r6, #63	; 0x3f
   137b0:	bne	1365c <__assert_fail@plt+0x2530>
   137b4:	cmp	sl, #2
   137b8:	beq	13a9c <__assert_fail@plt+0x2970>
   137bc:	cmp	sl, #5
   137c0:	movne	fp, #0
   137c4:	bne	13e6c <__assert_fail@plt+0x2d40>
   137c8:	ldr	r3, [sp, #148]	; 0x94
   137cc:	tst	r3, #4
   137d0:	beq	13aa4 <__assert_fail@plt+0x2978>
   137d4:	ldr	r3, [sp, #28]
   137d8:	add	r2, r3, #2
   137dc:	ldr	r3, [sp, #40]	; 0x28
   137e0:	cmp	r2, r3
   137e4:	bcs	13aa4 <__assert_fail@plt+0x2978>
   137e8:	ldr	r1, [sp, #28]
   137ec:	ldr	r3, [sp, #48]	; 0x30
   137f0:	add	r3, r3, r1
   137f4:	ldrb	r1, [r3, #1]
   137f8:	cmp	r1, #63	; 0x3f
   137fc:	bne	13aa4 <__assert_fail@plt+0x2978>
   13800:	ldr	r3, [sp, #48]	; 0x30
   13804:	ldrb	r6, [r3, r2]
   13808:	sub	r3, r6, #33	; 0x21
   1380c:	uxtb	r3, r3
   13810:	cmp	r3, #29
   13814:	bhi	13e74 <__assert_fail@plt+0x2d48>
   13818:	ldr	r0, [pc, #1804]	; 13f2c <__assert_fail@plt+0x2e00>
   1381c:	mov	r5, #1
   13820:	ands	r5, r0, r5, lsl r3
   13824:	beq	13e7c <__assert_fail@plt+0x2d50>
   13828:	cmp	r7, #0
   1382c:	bne	135b0 <__assert_fail@plt+0x2484>
   13830:	cmp	r9, r4
   13834:	add	r3, r4, #1
   13838:	str	r2, [sp, #28]
   1383c:	mov	r5, #0
   13840:	strbhi	r1, [r8, r4]
   13844:	cmp	r9, r3
   13848:	mov	fp, r5
   1384c:	movhi	r1, #34	; 0x22
   13850:	strbhi	r1, [r8, r3]
   13854:	add	r3, r4, #2
   13858:	cmp	r9, r3
   1385c:	movhi	r1, #34	; 0x22
   13860:	strbhi	r1, [r8, r3]
   13864:	add	r3, r4, #3
   13868:	add	r4, r4, #4
   1386c:	cmp	r9, r3
   13870:	movhi	r1, #63	; 0x3f
   13874:	strbhi	r1, [r8, r3]
   13878:	ldr	r3, [sp, #24]
   1387c:	eor	r3, r3, #1
   13880:	cmp	sl, #2
   13884:	orreq	r3, r3, #1
   13888:	eor	r3, r3, #1
   1388c:	orr	r3, r7, r3
   13890:	tst	r3, #255	; 0xff
   13894:	beq	138c0 <__assert_fail@plt+0x2794>
   13898:	ldr	r3, [sp, #152]	; 0x98
   1389c:	cmp	r3, #0
   138a0:	beq	138c0 <__assert_fail@plt+0x2794>
   138a4:	ldr	r1, [sp, #152]	; 0x98
   138a8:	ubfx	r2, r6, #5, #8
   138ac:	and	r3, r6, #31
   138b0:	ldr	r2, [r1, r2, lsl #2]
   138b4:	lsr	r3, r2, r3
   138b8:	tst	r3, #1
   138bc:	bne	138cc <__assert_fail@plt+0x27a0>
   138c0:	ldr	r3, [sp, #64]	; 0x40
   138c4:	cmp	r3, #0
   138c8:	beq	13ac4 <__assert_fail@plt+0x2998>
   138cc:	sub	r3, sl, #2
   138d0:	cmp	r7, #0
   138d4:	clz	r3, r3
   138d8:	lsr	r3, r3, #5
   138dc:	bne	135b0 <__assert_fail@plt+0x2484>
   138e0:	ldr	r2, [sp, #52]	; 0x34
   138e4:	eor	r2, r2, #1
   138e8:	ands	r3, r3, r2
   138ec:	beq	13924 <__assert_fail@plt+0x27f8>
   138f0:	cmp	r9, r4
   138f4:	str	r3, [sp, #52]	; 0x34
   138f8:	movhi	r2, #39	; 0x27
   138fc:	strbhi	r2, [r8, r4]
   13900:	add	r2, r4, #1
   13904:	cmp	r9, r2
   13908:	movhi	r1, #36	; 0x24
   1390c:	strbhi	r1, [r8, r2]
   13910:	add	r2, r4, #2
   13914:	add	r4, r4, #3
   13918:	cmp	r9, r2
   1391c:	movhi	r1, #39	; 0x27
   13920:	strbhi	r1, [r8, r2]
   13924:	cmp	r9, r4
   13928:	ldr	fp, [sp, #36]	; 0x24
   1392c:	movhi	r3, #92	; 0x5c
   13930:	strbhi	r3, [r8, r4]
   13934:	add	r4, r4, #1
   13938:	b	13ac4 <__assert_fail@plt+0x2998>
   1393c:	cmp	r6, #92	; 0x5c
   13940:	beq	13aac <__assert_fail@plt+0x2980>
   13944:	bls	136f4 <__assert_fail@plt+0x25c8>
   13948:	ldr	r5, [sp, #36]	; 0x24
   1394c:	b	13a94 <__assert_fail@plt+0x2968>
   13950:	cmp	r6, #122	; 0x7a
   13954:	bhi	13974 <__assert_fail@plt+0x2848>
   13958:	cmp	r6, #97	; 0x61
   1395c:	bcs	13948 <__assert_fail@plt+0x281c>
   13960:	cmp	r6, #95	; 0x5f
   13964:	beq	13948 <__assert_fail@plt+0x281c>
   13968:	cmp	r6, #96	; 0x60
   1396c:	bne	1365c <__assert_fail@plt+0x2530>
   13970:	b	136f4 <__assert_fail@plt+0x25c8>
   13974:	cmp	r6, #124	; 0x7c
   13978:	beq	136f4 <__assert_fail@plt+0x25c8>
   1397c:	bcc	13b88 <__assert_fail@plt+0x2a5c>
   13980:	cmp	r6, #125	; 0x7d
   13984:	beq	13b88 <__assert_fail@plt+0x2a5c>
   13988:	cmp	r6, #126	; 0x7e
   1398c:	bne	1365c <__assert_fail@plt+0x2530>
   13990:	ldr	r3, [sp, #28]
   13994:	cmp	r3, #0
   13998:	bne	13aa4 <__assert_fail@plt+0x2978>
   1399c:	ldr	r5, [sp, #36]	; 0x24
   139a0:	cmp	sl, #2
   139a4:	movne	fp, #0
   139a8:	andeq	fp, r7, #1
   139ac:	cmp	fp, #0
   139b0:	beq	13878 <__assert_fail@plt+0x274c>
   139b4:	b	136d8 <__assert_fail@plt+0x25ac>
   139b8:	ldr	r3, [sp, #24]
   139bc:	cmp	r3, #0
   139c0:	beq	13a88 <__assert_fail@plt+0x295c>
   139c4:	sub	r2, sl, #2
   139c8:	cmp	r7, #0
   139cc:	clz	r2, r2
   139d0:	lsr	r2, r2, #5
   139d4:	bne	135ac <__assert_fail@plt+0x2480>
   139d8:	ldr	r3, [sp, #52]	; 0x34
   139dc:	eor	r3, r3, #1
   139e0:	ands	r2, r2, r3
   139e4:	moveq	r3, r4
   139e8:	beq	13a20 <__assert_fail@plt+0x28f4>
   139ec:	cmp	r9, r4
   139f0:	str	r2, [sp, #52]	; 0x34
   139f4:	movhi	r3, #39	; 0x27
   139f8:	strbhi	r3, [r8, r4]
   139fc:	add	r3, r4, #1
   13a00:	cmp	r9, r3
   13a04:	movhi	r1, #36	; 0x24
   13a08:	strbhi	r1, [r8, r3]
   13a0c:	add	r3, r4, #2
   13a10:	cmp	r9, r3
   13a14:	movhi	r1, #39	; 0x27
   13a18:	strbhi	r1, [r8, r3]
   13a1c:	add	r3, r4, #3
   13a20:	cmp	r9, r3
   13a24:	add	r4, r3, #1
   13a28:	movhi	r2, #92	; 0x5c
   13a2c:	strbhi	r2, [r8, r3]
   13a30:	cmp	fp, #0
   13a34:	beq	13e5c <__assert_fail@plt+0x2d30>
   13a38:	ldr	r2, [sp, #28]
   13a3c:	ldr	r1, [sp, #40]	; 0x28
   13a40:	add	r2, r2, #1
   13a44:	cmp	r2, r1
   13a48:	bcs	13a80 <__assert_fail@plt+0x2954>
   13a4c:	ldr	r1, [sp, #48]	; 0x30
   13a50:	mov	r6, #48	; 0x30
   13a54:	ldrb	r2, [r1, r2]
   13a58:	sub	r2, r2, #48	; 0x30
   13a5c:	cmp	r2, #9
   13a60:	bhi	13e6c <__assert_fail@plt+0x2d40>
   13a64:	cmp	r9, r4
   13a68:	add	r2, r3, #2
   13a6c:	strbhi	r6, [r8, r4]
   13a70:	cmp	r9, r2
   13a74:	add	r4, r3, #3
   13a78:	movhi	r1, #48	; 0x30
   13a7c:	strbhi	r1, [r8, r2]
   13a80:	mov	r5, #0
   13a84:	b	13e64 <__assert_fail@plt+0x2d38>
   13a88:	ldr	r3, [sp, #148]	; 0x94
   13a8c:	ands	r5, r3, #1
   13a90:	bne	13b18 <__assert_fail@plt+0x29ec>
   13a94:	mov	fp, #0
   13a98:	b	13878 <__assert_fail@plt+0x274c>
   13a9c:	cmp	r7, #0
   13aa0:	bne	135b0 <__assert_fail@plt+0x2484>
   13aa4:	mov	r5, #0
   13aa8:	b	13a94 <__assert_fail@plt+0x2968>
   13aac:	cmp	sl, #2
   13ab0:	bne	13b24 <__assert_fail@plt+0x29f8>
   13ab4:	cmp	r7, #0
   13ab8:	bne	135b0 <__assert_fail@plt+0x2484>
   13abc:	mov	r5, r7
   13ac0:	mov	fp, r7
   13ac4:	ldr	r3, [sp, #52]	; 0x34
   13ac8:	eor	fp, fp, #1
   13acc:	tst	r3, fp
   13ad0:	beq	13afc <__assert_fail@plt+0x29d0>
   13ad4:	cmp	r9, r4
   13ad8:	movhi	r3, #39	; 0x27
   13adc:	strbhi	r3, [r8, r4]
   13ae0:	add	r3, r4, #1
   13ae4:	add	r4, r4, #2
   13ae8:	cmp	r9, r3
   13aec:	movhi	r2, #39	; 0x27
   13af0:	strbhi	r2, [r8, r3]
   13af4:	mov	r3, #0
   13af8:	str	r3, [sp, #52]	; 0x34
   13afc:	cmp	r9, r4
   13b00:	ldr	r3, [sp, #72]	; 0x48
   13b04:	strbhi	r6, [r8, r4]
   13b08:	cmp	r5, #0
   13b0c:	add	r4, r4, #1
   13b10:	moveq	r3, #0
   13b14:	str	r3, [sp, #72]	; 0x48
   13b18:	ldr	r3, [sp, #28]
   13b1c:	add	r3, r3, #1
   13b20:	b	132d8 <__assert_fail@plt+0x21ac>
   13b24:	ldr	r3, [sp, #24]
   13b28:	and	r3, r3, r7
   13b2c:	tst	r5, r3
   13b30:	moveq	r3, r6
   13b34:	beq	136c4 <__assert_fail@plt+0x2598>
   13b38:	mov	fp, #0
   13b3c:	mov	r5, fp
   13b40:	b	13ac4 <__assert_fail@plt+0x2998>
   13b44:	mov	r3, #116	; 0x74
   13b48:	b	136c4 <__assert_fail@plt+0x2598>
   13b4c:	mov	r3, #110	; 0x6e
   13b50:	b	136c4 <__assert_fail@plt+0x2598>
   13b54:	mov	r3, #97	; 0x61
   13b58:	ldr	r2, [sp, #24]
   13b5c:	cmp	r2, #0
   13b60:	beq	13aa4 <__assert_fail@plt+0x2978>
   13b64:	mov	r6, r3
   13b68:	mov	r5, #0
   13b6c:	b	138cc <__assert_fail@plt+0x27a0>
   13b70:	mov	r3, #98	; 0x62
   13b74:	b	13b58 <__assert_fail@plt+0x2a2c>
   13b78:	mov	r3, #118	; 0x76
   13b7c:	b	13b58 <__assert_fail@plt+0x2a2c>
   13b80:	mov	r3, #102	; 0x66
   13b84:	b	13b58 <__assert_fail@plt+0x2a2c>
   13b88:	ldr	r3, [sp, #40]	; 0x28
   13b8c:	cmn	r3, #1
   13b90:	bne	13bb0 <__assert_fail@plt+0x2a84>
   13b94:	ldr	r3, [sp, #48]	; 0x30
   13b98:	ldrb	r3, [r3, #1]
   13b9c:	adds	r3, r3, #0
   13ba0:	movne	r3, #1
   13ba4:	cmp	r3, #0
   13ba8:	bne	13aa4 <__assert_fail@plt+0x2978>
   13bac:	b	13990 <__assert_fail@plt+0x2864>
   13bb0:	ldr	r3, [sp, #40]	; 0x28
   13bb4:	subs	r3, r3, #1
   13bb8:	b	13ba0 <__assert_fail@plt+0x2a74>
   13bbc:	mov	r3, #0
   13bc0:	mov	r2, #0
   13bc4:	strd	r2, [sp, #96]	; 0x60
   13bc8:	ldr	r3, [sp, #40]	; 0x28
   13bcc:	cmn	r3, #1
   13bd0:	bne	13be0 <__assert_fail@plt+0x2ab4>
   13bd4:	ldr	r0, [sp, #48]	; 0x30
   13bd8:	bl	11000 <strlen@plt>
   13bdc:	str	r0, [sp, #40]	; 0x28
   13be0:	ldr	r5, [sp, #36]	; 0x24
   13be4:	mov	r3, #0
   13be8:	str	r3, [sp, #56]	; 0x38
   13bec:	ldr	r3, [sp, #28]
   13bf0:	add	r0, sp, #92	; 0x5c
   13bf4:	ldr	r1, [sp, #40]	; 0x28
   13bf8:	ldr	r2, [sp, #56]	; 0x38
   13bfc:	add	r2, r3, r2
   13c00:	ldr	r3, [sp, #48]	; 0x30
   13c04:	add	fp, r3, r2
   13c08:	sub	r2, r1, r2
   13c0c:	add	r3, sp, #96	; 0x60
   13c10:	mov	r1, fp
   13c14:	bl	15b54 <__assert_fail@plt+0x4a28>
   13c18:	subs	r2, r0, #0
   13c1c:	beq	13c5c <__assert_fail@plt+0x2b30>
   13c20:	cmn	r2, #1
   13c24:	beq	13e30 <__assert_fail@plt+0x2d04>
   13c28:	cmn	r2, #2
   13c2c:	bne	13da0 <__assert_fail@plt+0x2c74>
   13c30:	ldr	r3, [sp, #28]
   13c34:	ldr	r2, [sp, #56]	; 0x38
   13c38:	add	r3, r3, r2
   13c3c:	ldr	r2, [sp, #40]	; 0x28
   13c40:	cmp	r2, r3
   13c44:	bls	13e30 <__assert_fail@plt+0x2d04>
   13c48:	ldr	r2, [sp, #56]	; 0x38
   13c4c:	ldr	r3, [sp, #80]	; 0x50
   13c50:	ldrb	r5, [r3, r2]
   13c54:	cmp	r5, #0
   13c58:	bne	13d90 <__assert_fail@plt+0x2c64>
   13c5c:	ldr	r3, [sp, #56]	; 0x38
   13c60:	cmp	r3, #1
   13c64:	bls	13688 <__assert_fail@plt+0x255c>
   13c68:	ldr	r3, [sp, #28]
   13c6c:	mov	fp, #0
   13c70:	mov	ip, #92	; 0x5c
   13c74:	ldr	r2, [sp, #56]	; 0x38
   13c78:	add	r3, r3, r2
   13c7c:	ldr	r2, [sp, #24]
   13c80:	str	r3, [sp, #36]	; 0x24
   13c84:	eor	r3, r5, #1
   13c88:	and	r3, r3, r2
   13c8c:	mov	r2, #39	; 0x27
   13c90:	uxtb	r3, r3
   13c94:	cmp	r3, #0
   13c98:	beq	13e38 <__assert_fail@plt+0x2d0c>
   13c9c:	sub	r0, sl, #2
   13ca0:	cmp	r7, #0
   13ca4:	clz	r0, r0
   13ca8:	lsr	r0, r0, #5
   13cac:	bne	135ac <__assert_fail@plt+0x2480>
   13cb0:	ldr	r1, [sp, #52]	; 0x34
   13cb4:	eor	r1, r1, #1
   13cb8:	ands	r1, r0, r1
   13cbc:	beq	13cec <__assert_fail@plt+0x2bc0>
   13cc0:	cmp	r9, r4
   13cc4:	add	r0, r4, #1
   13cc8:	str	r1, [sp, #52]	; 0x34
   13ccc:	strbhi	r2, [r8, r4]
   13cd0:	cmp	r9, r0
   13cd4:	movhi	lr, #36	; 0x24
   13cd8:	strbhi	lr, [r8, r0]
   13cdc:	add	r0, r4, #2
   13ce0:	add	r4, r4, #3
   13ce4:	cmp	r9, r0
   13ce8:	strbhi	r2, [r8, r0]
   13cec:	cmp	r9, r4
   13cf0:	add	r0, r4, #1
   13cf4:	mov	fp, r3
   13cf8:	strbhi	ip, [r8, r4]
   13cfc:	cmp	r9, r0
   13d00:	lsrhi	r1, r6, #6
   13d04:	addhi	r1, r1, #48	; 0x30
   13d08:	strbhi	r1, [r8, r0]
   13d0c:	add	r0, r4, #2
   13d10:	add	r4, r4, #3
   13d14:	cmp	r9, r0
   13d18:	ubfxhi	r1, r6, #3, #3
   13d1c:	and	r6, r6, #7
   13d20:	add	r6, r6, #48	; 0x30
   13d24:	addhi	r1, r1, #48	; 0x30
   13d28:	strbhi	r1, [r8, r0]
   13d2c:	eor	r0, fp, #1
   13d30:	ldr	r1, [sp, #28]
   13d34:	ldr	lr, [sp, #52]	; 0x34
   13d38:	add	r1, r1, #1
   13d3c:	and	r0, r0, lr
   13d40:	ldr	lr, [sp, #36]	; 0x24
   13d44:	cmp	r1, lr
   13d48:	bcs	13ac4 <__assert_fail@plt+0x2998>
   13d4c:	cmp	r0, #0
   13d50:	beq	13d74 <__assert_fail@plt+0x2c48>
   13d54:	cmp	r9, r4
   13d58:	add	r0, r4, #1
   13d5c:	strbhi	r2, [r8, r4]
   13d60:	cmp	r9, r0
   13d64:	add	r4, r4, #2
   13d68:	strbhi	r2, [r8, r0]
   13d6c:	mov	r0, #0
   13d70:	str	r0, [sp, #52]	; 0x34
   13d74:	ldr	r0, [sp, #48]	; 0x30
   13d78:	cmp	r9, r4
   13d7c:	str	r1, [sp, #28]
   13d80:	strbhi	r6, [r8, r4]
   13d84:	add	r4, r4, #1
   13d88:	ldrb	r6, [r0, r1]
   13d8c:	b	13c94 <__assert_fail@plt+0x2b68>
   13d90:	ldr	r3, [sp, #56]	; 0x38
   13d94:	add	r3, r3, #1
   13d98:	str	r3, [sp, #56]	; 0x38
   13d9c:	b	13c30 <__assert_fail@plt+0x2b04>
   13da0:	cmp	sl, #2
   13da4:	movne	r3, #0
   13da8:	andeq	r3, r7, #1
   13dac:	cmp	r3, #0
   13db0:	movne	r1, #1
   13db4:	bne	13e10 <__assert_fail@plt+0x2ce4>
   13db8:	ldr	r0, [sp, #92]	; 0x5c
   13dbc:	str	r2, [sp, #84]	; 0x54
   13dc0:	bl	10f34 <iswprint@plt>
   13dc4:	ldr	r3, [sp, #56]	; 0x38
   13dc8:	cmp	r0, #0
   13dcc:	add	r0, sp, #96	; 0x60
   13dd0:	moveq	r5, #0
   13dd4:	ldr	r2, [sp, #84]	; 0x54
   13dd8:	add	r3, r3, r2
   13ddc:	str	r3, [sp, #56]	; 0x38
   13de0:	bl	10ed4 <mbsinit@plt>
   13de4:	cmp	r0, #0
   13de8:	beq	13bec <__assert_fail@plt+0x2ac0>
   13dec:	b	13c5c <__assert_fail@plt+0x2b30>
   13df0:	ldrb	r3, [fp, #1]!
   13df4:	cmp	r3, #94	; 0x5e
   13df8:	beq	136d8 <__assert_fail@plt+0x25ac>
   13dfc:	bhi	13e1c <__assert_fail@plt+0x2cf0>
   13e00:	sub	r3, r3, #91	; 0x5b
   13e04:	cmp	r3, #1
   13e08:	bls	136d8 <__assert_fail@plt+0x25ac>
   13e0c:	add	r1, r1, #1
   13e10:	cmp	r1, r2
   13e14:	bne	13df0 <__assert_fail@plt+0x2cc4>
   13e18:	b	13db8 <__assert_fail@plt+0x2c8c>
   13e1c:	cmp	r3, #96	; 0x60
   13e20:	beq	136d8 <__assert_fail@plt+0x25ac>
   13e24:	cmp	r3, #124	; 0x7c
   13e28:	bne	13e0c <__assert_fail@plt+0x2ce0>
   13e2c:	b	136d8 <__assert_fail@plt+0x25ac>
   13e30:	mov	r5, #0
   13e34:	b	13c5c <__assert_fail@plt+0x2b30>
   13e38:	ldr	r1, [sp, #64]	; 0x40
   13e3c:	cmp	r1, #0
   13e40:	beq	13d2c <__assert_fail@plt+0x2c00>
   13e44:	cmp	r9, r4
   13e48:	mov	r1, #0
   13e4c:	strbhi	ip, [r8, r4]
   13e50:	add	r4, r4, #1
   13e54:	str	r1, [sp, #64]	; 0x40
   13e58:	b	13d2c <__assert_fail@plt+0x2c00>
   13e5c:	mov	r5, fp
   13e60:	ldr	fp, [sp, #24]
   13e64:	mov	r6, #48	; 0x30
   13e68:	b	13878 <__assert_fail@plt+0x274c>
   13e6c:	mov	r5, #0
   13e70:	b	13878 <__assert_fail@plt+0x274c>
   13e74:	mov	r6, r1
   13e78:	b	13aa4 <__assert_fail@plt+0x2978>
   13e7c:	mov	r6, r1
   13e80:	b	13a94 <__assert_fail@plt+0x2968>
   13e84:	ldr	r2, [sp, #28]
   13e88:	ldr	r3, [sp, #40]	; 0x28
   13e8c:	subs	r3, r3, r2
   13e90:	movne	r3, #1
   13e94:	b	132fc <__assert_fail@plt+0x21d0>
   13e98:	ldr	r3, [sp, #60]	; 0x3c
   13e9c:	mov	sl, #2
   13ea0:	ldr	r7, [sp, #72]	; 0x48
   13ea4:	adds	r6, r3, #0
   13ea8:	mov	r5, r3
   13eac:	movne	r6, #1
   13eb0:	cmp	r9, #0
   13eb4:	movne	r6, #0
   13eb8:	cmp	r6, #0
   13ebc:	bne	1328c <__assert_fail@plt+0x2160>
   13ec0:	ldr	r3, [sp, #68]	; 0x44
   13ec4:	ldr	r2, [sp, #44]	; 0x2c
   13ec8:	cmp	r2, #0
   13ecc:	moveq	r3, #0
   13ed0:	andne	r3, r3, #1
   13ed4:	cmp	r3, #0
   13ed8:	movne	r3, r2
   13edc:	subne	r3, r3, #1
   13ee0:	bne	13f10 <__assert_fail@plt+0x2de4>
   13ee4:	cmp	r9, r4
   13ee8:	movhi	r3, #0
   13eec:	strbhi	r3, [r8, r4]
   13ef0:	mov	r0, r4
   13ef4:	add	sp, sp, #108	; 0x6c
   13ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13efc:	mov	r3, r7
   13f00:	b	13ec4 <__assert_fail@plt+0x2d98>
   13f04:	cmp	r9, r4
   13f08:	strbhi	r2, [r8, r4]
   13f0c:	add	r4, r4, #1
   13f10:	ldrb	r2, [r3, #1]!
   13f14:	cmp	r2, #0
   13f18:	bne	13f04 <__assert_fail@plt+0x2dd8>
   13f1c:	b	13ee4 <__assert_fail@plt+0x2db8>
   13f20:	andeq	r6, r1, r8, asr fp
   13f24:	andeq	r6, r1, fp, ror #22
   13f28:	andeq	r6, r1, r9, ror #22
   13f2c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13f30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f34:	sub	sp, sp, #52	; 0x34
   13f38:	mov	r6, r0
   13f3c:	mov	r5, r3
   13f40:	mov	r8, r1
   13f44:	mov	r9, r2
   13f48:	bl	11018 <__errno_location@plt>
   13f4c:	ldr	r3, [r0]
   13f50:	cmn	r6, #-2147483647	; 0x80000001
   13f54:	str	r0, [sp, #24]
   13f58:	ldr	r7, [pc, #368]	; 140d0 <__assert_fail@plt+0x2fa4>
   13f5c:	str	r3, [sp, #32]
   13f60:	movne	r3, #0
   13f64:	moveq	r3, #1
   13f68:	orrs	r3, r3, r6, lsr #31
   13f6c:	ldr	r4, [r7]
   13f70:	beq	13f78 <__assert_fail@plt+0x2e4c>
   13f74:	bl	110fc <abort@plt>
   13f78:	ldr	r2, [r7, #4]
   13f7c:	cmp	r2, r6
   13f80:	bgt	13ff0 <__assert_fail@plt+0x2ec4>
   13f84:	add	sl, r7, #8
   13f88:	mov	r3, #8
   13f8c:	cmp	r4, sl
   13f90:	add	r1, sp, #44	; 0x2c
   13f94:	str	r2, [sp, #44]	; 0x2c
   13f98:	sub	r2, r6, r2
   13f9c:	movne	r0, r4
   13fa0:	moveq	r0, #0
   13fa4:	add	r2, r2, #1
   13fa8:	str	r3, [sp]
   13fac:	mvn	r3, #-2147483648	; 0x80000000
   13fb0:	bl	14d14 <__assert_fail@plt+0x3be8>
   13fb4:	cmp	r4, sl
   13fb8:	mov	fp, r0
   13fbc:	str	r0, [r7]
   13fc0:	ldmeq	r4, {r0, r1}
   13fc4:	mov	r4, fp
   13fc8:	ldr	r2, [sp, #44]	; 0x2c
   13fcc:	stmeq	fp, {r0, r1}
   13fd0:	mov	r1, #0
   13fd4:	ldr	r0, [r7, #4]
   13fd8:	sub	r2, r2, r0
   13fdc:	add	r0, fp, r0, lsl #3
   13fe0:	lsl	r2, r2, #3
   13fe4:	bl	11030 <memset@plt>
   13fe8:	ldr	r3, [sp, #44]	; 0x2c
   13fec:	str	r3, [r7, #4]
   13ff0:	ldr	r3, [r5, #4]
   13ff4:	add	sl, r4, r6, lsl #3
   13ff8:	mov	r2, r8
   13ffc:	ldr	fp, [r4, r6, lsl #3]
   14000:	ldr	r7, [sl, #4]
   14004:	orr	r3, r3, #1
   14008:	str	r3, [sp, #28]
   1400c:	add	r3, r5, #8
   14010:	mov	r1, fp
   14014:	str	r3, [sp, #36]	; 0x24
   14018:	mov	r0, r7
   1401c:	ldr	r3, [r5, #44]	; 0x2c
   14020:	str	r3, [sp, #16]
   14024:	ldr	r3, [r5, #40]	; 0x28
   14028:	str	r3, [sp, #12]
   1402c:	add	r3, r5, #8
   14030:	str	r3, [sp, #8]
   14034:	ldr	r3, [sp, #28]
   14038:	str	r3, [sp, #4]
   1403c:	ldr	r3, [r5]
   14040:	str	r3, [sp]
   14044:	mov	r3, r9
   14048:	bl	13240 <__assert_fail@plt+0x2114>
   1404c:	cmp	fp, r0
   14050:	bhi	140b8 <__assert_fail@plt+0x2f8c>
   14054:	ldr	r3, [pc, #120]	; 140d4 <__assert_fail@plt+0x2fa8>
   14058:	add	fp, r0, #1
   1405c:	str	fp, [r4, r6, lsl #3]
   14060:	cmp	r7, r3
   14064:	beq	14070 <__assert_fail@plt+0x2f44>
   14068:	mov	r0, r7
   1406c:	bl	12dbc <__assert_fail@plt+0x1c90>
   14070:	mov	r0, fp
   14074:	bl	14c04 <__assert_fail@plt+0x3ad8>
   14078:	ldr	r3, [r5, #44]	; 0x2c
   1407c:	mov	r2, r8
   14080:	mov	r1, fp
   14084:	str	r0, [sl, #4]
   14088:	mov	r7, r0
   1408c:	str	r3, [sp, #16]
   14090:	ldr	r3, [r5, #40]	; 0x28
   14094:	str	r3, [sp, #12]
   14098:	add	r3, r5, #8
   1409c:	str	r3, [sp, #8]
   140a0:	ldr	r3, [sp, #28]
   140a4:	str	r3, [sp, #4]
   140a8:	ldr	r3, [r5]
   140ac:	str	r3, [sp]
   140b0:	mov	r3, r9
   140b4:	bl	13240 <__assert_fail@plt+0x2114>
   140b8:	ldr	r3, [sp, #24]
   140bc:	mov	r0, r7
   140c0:	ldr	r2, [sp, #32]
   140c4:	str	r2, [r3]
   140c8:	add	sp, sp, #52	; 0x34
   140cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140d0:	andeq	r8, r2, r4, lsr #2
   140d4:	andeq	r8, r2, ip, lsl #4
   140d8:	push	{r4, r5, r6, lr}
   140dc:	mov	r5, r0
   140e0:	bl	11018 <__errno_location@plt>
   140e4:	mov	r4, r0
   140e8:	cmp	r5, #0
   140ec:	ldr	r0, [pc, #20]	; 14108 <__assert_fail@plt+0x2fdc>
   140f0:	mov	r1, #48	; 0x30
   140f4:	movne	r0, r5
   140f8:	ldr	r6, [r4]
   140fc:	bl	14e04 <__assert_fail@plt+0x3cd8>
   14100:	str	r6, [r4]
   14104:	pop	{r4, r5, r6, pc}
   14108:	andeq	r8, r2, ip, lsl #6
   1410c:	ldr	r3, [pc, #12]	; 14120 <__assert_fail@plt+0x2ff4>
   14110:	cmp	r0, #0
   14114:	moveq	r0, r3
   14118:	ldr	r0, [r0]
   1411c:	bx	lr
   14120:	andeq	r8, r2, ip, lsl #6
   14124:	ldr	r3, [pc, #12]	; 14138 <__assert_fail@plt+0x300c>
   14128:	cmp	r0, #0
   1412c:	moveq	r0, r3
   14130:	str	r1, [r0]
   14134:	bx	lr
   14138:	andeq	r8, r2, ip, lsl #6
   1413c:	ldr	r3, [pc, #52]	; 14178 <__assert_fail@plt+0x304c>
   14140:	cmp	r0, #0
   14144:	push	{lr}		; (str lr, [sp, #-4]!)
   14148:	lsr	lr, r1, #5
   1414c:	and	r1, r1, #31
   14150:	moveq	r0, r3
   14154:	add	r3, r0, #8
   14158:	ldr	ip, [r3, lr, lsl #2]
   1415c:	lsr	r0, ip, r1
   14160:	eor	r2, r2, r0
   14164:	and	r0, r0, #1
   14168:	and	r2, r2, #1
   1416c:	eor	r1, ip, r2, lsl r1
   14170:	str	r1, [r3, lr, lsl #2]
   14174:	pop	{pc}		; (ldr pc, [sp], #4)
   14178:	andeq	r8, r2, ip, lsl #6
   1417c:	ldr	r3, [pc, #16]	; 14194 <__assert_fail@plt+0x3068>
   14180:	cmp	r0, #0
   14184:	movne	r3, r0
   14188:	ldr	r0, [r3, #4]
   1418c:	str	r1, [r3, #4]
   14190:	bx	lr
   14194:	andeq	r8, r2, ip, lsl #6
   14198:	ldr	r3, [pc, #44]	; 141cc <__assert_fail@plt+0x30a0>
   1419c:	cmp	r0, #0
   141a0:	moveq	r0, r3
   141a4:	mov	r3, #10
   141a8:	cmp	r2, #0
   141ac:	cmpne	r1, #0
   141b0:	str	r3, [r0]
   141b4:	bne	141c0 <__assert_fail@plt+0x3094>
   141b8:	push	{r4, lr}
   141bc:	bl	110fc <abort@plt>
   141c0:	str	r1, [r0, #40]	; 0x28
   141c4:	str	r2, [r0, #44]	; 0x2c
   141c8:	bx	lr
   141cc:	andeq	r8, r2, ip, lsl #6
   141d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   141d4:	sub	sp, sp, #24
   141d8:	mov	sl, r3
   141dc:	mov	r7, r0
   141e0:	mov	r8, r1
   141e4:	mov	r9, r2
   141e8:	ldr	r4, [sp, #56]	; 0x38
   141ec:	ldr	r3, [pc, #88]	; 1424c <__assert_fail@plt+0x3120>
   141f0:	cmp	r4, #0
   141f4:	moveq	r4, r3
   141f8:	bl	11018 <__errno_location@plt>
   141fc:	ldr	r3, [r4, #44]	; 0x2c
   14200:	mov	r5, r0
   14204:	mov	r2, r9
   14208:	mov	r1, r8
   1420c:	mov	r0, r7
   14210:	ldr	r6, [r5]
   14214:	str	r3, [sp, #16]
   14218:	ldr	r3, [r4, #40]	; 0x28
   1421c:	str	r3, [sp, #12]
   14220:	add	r3, r4, #8
   14224:	str	r3, [sp, #8]
   14228:	ldr	r3, [r4, #4]
   1422c:	str	r3, [sp, #4]
   14230:	ldr	r3, [r4]
   14234:	str	r3, [sp]
   14238:	mov	r3, sl
   1423c:	bl	13240 <__assert_fail@plt+0x2114>
   14240:	str	r6, [r5]
   14244:	add	sp, sp, #24
   14248:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1424c:	andeq	r8, r2, ip, lsl #6
   14250:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14254:	cmp	r3, #0
   14258:	sub	sp, sp, #44	; 0x2c
   1425c:	mov	r6, r2
   14260:	mov	sl, r1
   14264:	mov	r9, r0
   14268:	ldr	r4, [pc, #176]	; 14320 <__assert_fail@plt+0x31f4>
   1426c:	movne	r4, r3
   14270:	bl	11018 <__errno_location@plt>
   14274:	ldr	r3, [r0]
   14278:	mov	r1, #0
   1427c:	mov	r2, r9
   14280:	mov	r8, r0
   14284:	mov	r0, r1
   14288:	ldr	r5, [r4, #4]
   1428c:	add	fp, r4, #8
   14290:	str	r3, [sp, #28]
   14294:	ldr	r3, [r4, #44]	; 0x2c
   14298:	cmp	r6, #0
   1429c:	orreq	r5, r5, #1
   142a0:	str	r3, [sp, #16]
   142a4:	ldr	r3, [r4, #40]	; 0x28
   142a8:	stmib	sp, {r5, fp}
   142ac:	str	r3, [sp, #12]
   142b0:	ldr	r3, [r4]
   142b4:	str	r3, [sp]
   142b8:	mov	r3, sl
   142bc:	bl	13240 <__assert_fail@plt+0x2114>
   142c0:	add	r1, r0, #1
   142c4:	mov	r7, r0
   142c8:	mov	r0, r1
   142cc:	str	r1, [sp, #36]	; 0x24
   142d0:	bl	14c04 <__assert_fail@plt+0x3ad8>
   142d4:	ldr	r3, [r4, #44]	; 0x2c
   142d8:	mov	r2, r9
   142dc:	ldr	r1, [sp, #36]	; 0x24
   142e0:	str	r3, [sp, #16]
   142e4:	ldr	r3, [r4, #40]	; 0x28
   142e8:	stmib	sp, {r5, fp}
   142ec:	str	r0, [sp, #32]
   142f0:	str	r3, [sp, #12]
   142f4:	ldr	r3, [r4]
   142f8:	str	r3, [sp]
   142fc:	mov	r3, sl
   14300:	bl	13240 <__assert_fail@plt+0x2114>
   14304:	ldr	r3, [sp, #28]
   14308:	cmp	r6, #0
   1430c:	ldr	r0, [sp, #32]
   14310:	str	r3, [r8]
   14314:	strne	r7, [r6]
   14318:	add	sp, sp, #44	; 0x2c
   1431c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14320:	andeq	r8, r2, ip, lsl #6
   14324:	mov	r3, r2
   14328:	mov	r2, #0
   1432c:	b	14250 <__assert_fail@plt+0x3124>
   14330:	push	{r4, r5, r6, r7, r8, lr}
   14334:	mov	r6, #1
   14338:	ldr	r4, [pc, #100]	; 143a4 <__assert_fail@plt+0x3278>
   1433c:	ldr	r5, [r4]
   14340:	add	r7, r5, #4
   14344:	ldr	r3, [r4, #4]
   14348:	cmp	r3, r6
   1434c:	bgt	14394 <__assert_fail@plt+0x3268>
   14350:	ldr	r6, [pc, #80]	; 143a8 <__assert_fail@plt+0x327c>
   14354:	ldr	r0, [r5, #4]
   14358:	cmp	r0, r6
   1435c:	beq	14370 <__assert_fail@plt+0x3244>
   14360:	bl	12dbc <__assert_fail@plt+0x1c90>
   14364:	mov	r3, #256	; 0x100
   14368:	str	r3, [r4, #8]
   1436c:	str	r6, [r4, #12]
   14370:	ldr	r6, [pc, #52]	; 143ac <__assert_fail@plt+0x3280>
   14374:	cmp	r5, r6
   14378:	beq	14388 <__assert_fail@plt+0x325c>
   1437c:	mov	r0, r5
   14380:	bl	12dbc <__assert_fail@plt+0x1c90>
   14384:	str	r6, [r4]
   14388:	mov	r3, #1
   1438c:	str	r3, [r4, #4]
   14390:	pop	{r4, r5, r6, r7, r8, pc}
   14394:	ldr	r0, [r7, r6, lsl #3]
   14398:	add	r6, r6, #1
   1439c:	bl	12dbc <__assert_fail@plt+0x1c90>
   143a0:	b	14344 <__assert_fail@plt+0x3218>
   143a4:	andeq	r8, r2, r4, lsr #2
   143a8:	andeq	r8, r2, ip, lsl #4
   143ac:	andeq	r8, r2, ip, lsr #2
   143b0:	ldr	r3, [pc, #4]	; 143bc <__assert_fail@plt+0x3290>
   143b4:	mvn	r2, #0
   143b8:	b	13f30 <__assert_fail@plt+0x2e04>
   143bc:	andeq	r8, r2, ip, lsl #6
   143c0:	ldr	r3, [pc]	; 143c8 <__assert_fail@plt+0x329c>
   143c4:	b	13f30 <__assert_fail@plt+0x2e04>
   143c8:	andeq	r8, r2, ip, lsl #6
   143cc:	mov	r1, r0
   143d0:	mov	r0, #0
   143d4:	b	143b0 <__assert_fail@plt+0x3284>
   143d8:	mov	r2, r1
   143dc:	mov	r1, r0
   143e0:	mov	r0, #0
   143e4:	b	143c0 <__assert_fail@plt+0x3294>
   143e8:	push	{r4, r5, lr}
   143ec:	sub	sp, sp, #52	; 0x34
   143f0:	mov	r5, r2
   143f4:	mov	r4, r0
   143f8:	mov	r0, sp
   143fc:	bl	130e4 <__assert_fail@plt+0x1fb8>
   14400:	mov	r3, sp
   14404:	mvn	r2, #0
   14408:	mov	r1, r5
   1440c:	mov	r0, r4
   14410:	bl	13f30 <__assert_fail@plt+0x2e04>
   14414:	add	sp, sp, #52	; 0x34
   14418:	pop	{r4, r5, pc}
   1441c:	push	{r4, r5, r6, lr}
   14420:	sub	sp, sp, #48	; 0x30
   14424:	mov	r5, r2
   14428:	mov	r6, r3
   1442c:	mov	r4, r0
   14430:	mov	r0, sp
   14434:	bl	130e4 <__assert_fail@plt+0x1fb8>
   14438:	mov	r3, sp
   1443c:	mov	r2, r6
   14440:	mov	r1, r5
   14444:	mov	r0, r4
   14448:	bl	13f30 <__assert_fail@plt+0x2e04>
   1444c:	add	sp, sp, #48	; 0x30
   14450:	pop	{r4, r5, r6, pc}
   14454:	mov	r2, r1
   14458:	mov	r1, r0
   1445c:	mov	r0, #0
   14460:	b	143e8 <__assert_fail@plt+0x32bc>
   14464:	mov	r3, r2
   14468:	mov	r2, r1
   1446c:	mov	r1, r0
   14470:	mov	r0, #0
   14474:	b	1441c <__assert_fail@plt+0x32f0>
   14478:	push	{r4, r5, r6, lr}
   1447c:	mov	r4, r0
   14480:	mov	r5, r1
   14484:	mov	r6, r2
   14488:	sub	sp, sp, #48	; 0x30
   1448c:	mov	ip, sp
   14490:	ldr	lr, [pc, #64]	; 144d8 <__assert_fail@plt+0x33ac>
   14494:	ldm	lr!, {r0, r1, r2, r3}
   14498:	stmia	ip!, {r0, r1, r2, r3}
   1449c:	ldm	lr!, {r0, r1, r2, r3}
   144a0:	stmia	ip!, {r0, r1, r2, r3}
   144a4:	ldm	lr, {r0, r1, r2, r3}
   144a8:	stm	ip, {r0, r1, r2, r3}
   144ac:	mov	r1, r6
   144b0:	mov	r2, #1
   144b4:	mov	r0, sp
   144b8:	bl	1413c <__assert_fail@plt+0x3010>
   144bc:	mov	r3, sp
   144c0:	mov	r2, r5
   144c4:	mov	r1, r4
   144c8:	mov	r0, #0
   144cc:	bl	13f30 <__assert_fail@plt+0x2e04>
   144d0:	add	sp, sp, #48	; 0x30
   144d4:	pop	{r4, r5, r6, pc}
   144d8:	andeq	r8, r2, ip, lsl #6
   144dc:	mov	r2, r1
   144e0:	mvn	r1, #0
   144e4:	b	14478 <__assert_fail@plt+0x334c>
   144e8:	mov	r1, #58	; 0x3a
   144ec:	b	144dc <__assert_fail@plt+0x33b0>
   144f0:	mov	r2, #58	; 0x3a
   144f4:	b	14478 <__assert_fail@plt+0x334c>
   144f8:	push	{r4, r5, lr}
   144fc:	sub	sp, sp, #100	; 0x64
   14500:	mov	r4, r0
   14504:	mov	r0, sp
   14508:	mov	r5, r2
   1450c:	bl	130e4 <__assert_fail@plt+0x1fb8>
   14510:	mov	ip, sp
   14514:	add	lr, sp, #48	; 0x30
   14518:	ldm	ip!, {r0, r1, r2, r3}
   1451c:	stmia	lr!, {r0, r1, r2, r3}
   14520:	ldm	ip!, {r0, r1, r2, r3}
   14524:	stmia	lr!, {r0, r1, r2, r3}
   14528:	ldm	ip, {r0, r1, r2, r3}
   1452c:	stm	lr, {r0, r1, r2, r3}
   14530:	mov	r2, #1
   14534:	mov	r1, #58	; 0x3a
   14538:	add	r0, sp, #48	; 0x30
   1453c:	bl	1413c <__assert_fail@plt+0x3010>
   14540:	add	r3, sp, #48	; 0x30
   14544:	mvn	r2, #0
   14548:	mov	r1, r5
   1454c:	mov	r0, r4
   14550:	bl	13f30 <__assert_fail@plt+0x2e04>
   14554:	add	sp, sp, #100	; 0x64
   14558:	pop	{r4, r5, pc}
   1455c:	push	{r4, r5, r6, r7, lr}
   14560:	mov	r4, r0
   14564:	mov	r6, r1
   14568:	mov	r7, r2
   1456c:	mov	r5, r3
   14570:	sub	sp, sp, #52	; 0x34
   14574:	ldr	lr, [pc, #68]	; 145c0 <__assert_fail@plt+0x3494>
   14578:	mov	ip, sp
   1457c:	ldm	lr!, {r0, r1, r2, r3}
   14580:	stmia	ip!, {r0, r1, r2, r3}
   14584:	ldm	lr!, {r0, r1, r2, r3}
   14588:	stmia	ip!, {r0, r1, r2, r3}
   1458c:	ldm	lr, {r0, r1, r2, r3}
   14590:	stm	ip, {r0, r1, r2, r3}
   14594:	mov	r2, r7
   14598:	mov	r1, r6
   1459c:	mov	r0, sp
   145a0:	bl	14198 <__assert_fail@plt+0x306c>
   145a4:	ldr	r2, [sp, #72]	; 0x48
   145a8:	mov	r3, sp
   145ac:	mov	r1, r5
   145b0:	mov	r0, r4
   145b4:	bl	13f30 <__assert_fail@plt+0x2e04>
   145b8:	add	sp, sp, #52	; 0x34
   145bc:	pop	{r4, r5, r6, r7, pc}
   145c0:	andeq	r8, r2, ip, lsl #6
   145c4:	mvn	ip, #0
   145c8:	push	{r0, r1, r2, lr}
   145cc:	str	ip, [sp]
   145d0:	bl	1455c <__assert_fail@plt+0x3430>
   145d4:	add	sp, sp, #12
   145d8:	pop	{pc}		; (ldr pc, [sp], #4)
   145dc:	mov	r3, r2
   145e0:	mov	r2, r1
   145e4:	mov	r1, r0
   145e8:	mov	r0, #0
   145ec:	b	145c4 <__assert_fail@plt+0x3498>
   145f0:	push	{r0, r1, r2, lr}
   145f4:	str	r3, [sp]
   145f8:	mov	r3, r2
   145fc:	mov	r2, r1
   14600:	mov	r1, r0
   14604:	mov	r0, #0
   14608:	bl	1455c <__assert_fail@plt+0x3430>
   1460c:	add	sp, sp, #12
   14610:	pop	{pc}		; (ldr pc, [sp], #4)
   14614:	ldr	r3, [pc]	; 1461c <__assert_fail@plt+0x34f0>
   14618:	b	13f30 <__assert_fail@plt+0x2e04>
   1461c:	andeq	r8, r2, r4, lsr r1
   14620:	mov	r2, r1
   14624:	mov	r1, r0
   14628:	mov	r0, #0
   1462c:	b	14614 <__assert_fail@plt+0x34e8>
   14630:	mvn	r2, #0
   14634:	b	14614 <__assert_fail@plt+0x34e8>
   14638:	mov	r1, r0
   1463c:	mov	r0, #0
   14640:	b	14630 <__assert_fail@plt+0x3504>
   14644:	push	{r4, r5, r6, lr}
   14648:	mov	r5, r1
   1464c:	mov	r1, #0
   14650:	mov	r4, r2
   14654:	bl	1109c <setlocale@plt>
   14658:	subs	r6, r0, #0
   1465c:	bne	14670 <__assert_fail@plt+0x3544>
   14660:	cmp	r4, #0
   14664:	mov	r0, #22
   14668:	strbne	r6, [r5]
   1466c:	pop	{r4, r5, r6, pc}
   14670:	bl	11000 <strlen@plt>
   14674:	cmp	r4, r0
   14678:	bls	14694 <__assert_fail@plt+0x3568>
   1467c:	add	r2, r0, #1
   14680:	mov	r1, r6
   14684:	mov	r0, r5
   14688:	bl	10ec8 <memcpy@plt>
   1468c:	mov	r0, #0
   14690:	pop	{r4, r5, r6, pc}
   14694:	cmp	r4, #0
   14698:	beq	146b8 <__assert_fail@plt+0x358c>
   1469c:	sub	r4, r4, #1
   146a0:	mov	r1, r6
   146a4:	mov	r2, r4
   146a8:	mov	r0, r5
   146ac:	bl	10ec8 <memcpy@plt>
   146b0:	mov	r3, #0
   146b4:	strb	r3, [r5, r4]
   146b8:	mov	r0, #34	; 0x22
   146bc:	pop	{r4, r5, r6, pc}
   146c0:	mov	r1, #0
   146c4:	b	1109c <setlocale@plt>
   146c8:	mov	r2, #3
   146cc:	mov	r1, #0
   146d0:	b	15948 <__assert_fail@plt+0x481c>
   146d4:	push	{r4, r5, r6, lr}
   146d8:	cmp	r1, #0
   146dc:	sub	sp, sp, #32
   146e0:	mov	r5, r0
   146e4:	ldr	r4, [sp, #48]	; 0x30
   146e8:	ldr	r6, [sp, #52]	; 0x34
   146ec:	beq	147a0 <__assert_fail@plt+0x3674>
   146f0:	strd	r2, [sp]
   146f4:	mov	r3, r1
   146f8:	mov	r1, #1
   146fc:	ldr	r2, [pc, #856]	; 14a5c <__assert_fail@plt+0x3930>
   14700:	bl	11060 <__fprintf_chk@plt>
   14704:	mov	r2, #5
   14708:	ldr	r1, [pc, #848]	; 14a60 <__assert_fail@plt+0x3934>
   1470c:	mov	r0, #0
   14710:	bl	10f10 <dcgettext@plt>
   14714:	movw	r3, #2022	; 0x7e6
   14718:	ldr	r2, [pc, #836]	; 14a64 <__assert_fail@plt+0x3938>
   1471c:	mov	r1, #1
   14720:	str	r3, [sp]
   14724:	mov	r3, r0
   14728:	mov	r0, r5
   1472c:	bl	11060 <__fprintf_chk@plt>
   14730:	mov	r1, r5
   14734:	mov	r0, #10
   14738:	bl	10ef8 <fputc_unlocked@plt>
   1473c:	mov	r2, #5
   14740:	ldr	r1, [pc, #800]	; 14a68 <__assert_fail@plt+0x393c>
   14744:	mov	r0, #0
   14748:	bl	10f10 <dcgettext@plt>
   1474c:	mov	r2, r0
   14750:	mov	r1, #1
   14754:	ldr	r3, [pc, #784]	; 14a6c <__assert_fail@plt+0x3940>
   14758:	mov	r0, r5
   1475c:	bl	11060 <__fprintf_chk@plt>
   14760:	mov	r1, r5
   14764:	mov	r0, #10
   14768:	bl	10ef8 <fputc_unlocked@plt>
   1476c:	cmp	r6, #9
   14770:	ldrls	pc, [pc, r6, lsl #2]
   14774:	b	14a50 <__assert_fail@plt+0x3924>
   14778:	muleq	r1, r0, r8
   1477c:			; <UNDEFINED> instruction: 0x000147b8
   14780:	andeq	r4, r1, r4, ror #15
   14784:	andeq	r4, r1, r8, lsl r8
   14788:	andeq	r4, r1, r4, asr r8
   1478c:	muleq	r1, r8, r8
   14790:	andeq	r4, r1, r0, ror #17
   14794:	andeq	r4, r1, r0, lsr r9
   14798:	andeq	r4, r1, r8, lsl #19
   1479c:	andeq	r4, r1, r8, ror #19
   147a0:	mov	r1, #1
   147a4:	str	r3, [sp]
   147a8:	mov	r3, r2
   147ac:	ldr	r2, [pc, #700]	; 14a70 <__assert_fail@plt+0x3944>
   147b0:	bl	11060 <__fprintf_chk@plt>
   147b4:	b	14704 <__assert_fail@plt+0x35d8>
   147b8:	mov	r2, #5
   147bc:	ldr	r1, [pc, #688]	; 14a74 <__assert_fail@plt+0x3948>
   147c0:	mov	r0, #0
   147c4:	bl	10f10 <dcgettext@plt>
   147c8:	ldr	r3, [r4]
   147cc:	mov	r2, r0
   147d0:	mov	r1, #1
   147d4:	mov	r0, r5
   147d8:	add	sp, sp, #32
   147dc:	pop	{r4, r5, r6, lr}
   147e0:	b	11060 <__fprintf_chk@plt>
   147e4:	mov	r2, #5
   147e8:	ldr	r1, [pc, #648]	; 14a78 <__assert_fail@plt+0x394c>
   147ec:	mov	r0, #0
   147f0:	bl	10f10 <dcgettext@plt>
   147f4:	ldr	r3, [r4, #4]
   147f8:	mov	r2, r0
   147fc:	mov	r1, #1
   14800:	mov	r0, r5
   14804:	str	r3, [sp, #48]	; 0x30
   14808:	ldr	r3, [r4]
   1480c:	add	sp, sp, #32
   14810:	pop	{r4, r5, r6, lr}
   14814:	b	11060 <__fprintf_chk@plt>
   14818:	mov	r2, #5
   1481c:	ldr	r1, [pc, #600]	; 14a7c <__assert_fail@plt+0x3950>
   14820:	mov	r0, #0
   14824:	bl	10f10 <dcgettext@plt>
   14828:	ldr	r3, [r4, #8]
   1482c:	mov	r2, r0
   14830:	mov	r1, #1
   14834:	mov	r0, r5
   14838:	str	r3, [sp, #52]	; 0x34
   1483c:	ldr	r3, [r4, #4]
   14840:	str	r3, [sp, #48]	; 0x30
   14844:	ldr	r3, [r4]
   14848:	add	sp, sp, #32
   1484c:	pop	{r4, r5, r6, lr}
   14850:	b	11060 <__fprintf_chk@plt>
   14854:	mov	r2, #5
   14858:	ldr	r1, [pc, #544]	; 14a80 <__assert_fail@plt+0x3954>
   1485c:	mov	r0, #0
   14860:	bl	10f10 <dcgettext@plt>
   14864:	ldr	r3, [r4, #12]
   14868:	mov	r2, r0
   1486c:	mov	r1, #1
   14870:	mov	r0, r5
   14874:	str	r3, [sp, #8]
   14878:	ldr	r3, [r4, #8]
   1487c:	str	r3, [sp, #4]
   14880:	ldr	r3, [r4, #4]
   14884:	str	r3, [sp]
   14888:	ldr	r3, [r4]
   1488c:	bl	11060 <__fprintf_chk@plt>
   14890:	add	sp, sp, #32
   14894:	pop	{r4, r5, r6, pc}
   14898:	mov	r2, #5
   1489c:	ldr	r1, [pc, #480]	; 14a84 <__assert_fail@plt+0x3958>
   148a0:	mov	r0, #0
   148a4:	bl	10f10 <dcgettext@plt>
   148a8:	ldr	r3, [r4, #16]
   148ac:	mov	r2, r0
   148b0:	mov	r1, #1
   148b4:	mov	r0, r5
   148b8:	str	r3, [sp, #12]
   148bc:	ldr	r3, [r4, #12]
   148c0:	str	r3, [sp, #8]
   148c4:	ldr	r3, [r4, #8]
   148c8:	str	r3, [sp, #4]
   148cc:	ldr	r3, [r4, #4]
   148d0:	str	r3, [sp]
   148d4:	ldr	r3, [r4]
   148d8:	bl	11060 <__fprintf_chk@plt>
   148dc:	b	14890 <__assert_fail@plt+0x3764>
   148e0:	mov	r2, #5
   148e4:	ldr	r1, [pc, #412]	; 14a88 <__assert_fail@plt+0x395c>
   148e8:	mov	r0, #0
   148ec:	bl	10f10 <dcgettext@plt>
   148f0:	ldr	r3, [r4, #20]
   148f4:	mov	r2, r0
   148f8:	mov	r1, #1
   148fc:	mov	r0, r5
   14900:	str	r3, [sp, #16]
   14904:	ldr	r3, [r4, #16]
   14908:	str	r3, [sp, #12]
   1490c:	ldr	r3, [r4, #12]
   14910:	str	r3, [sp, #8]
   14914:	ldr	r3, [r4, #8]
   14918:	str	r3, [sp, #4]
   1491c:	ldr	r3, [r4, #4]
   14920:	str	r3, [sp]
   14924:	ldr	r3, [r4]
   14928:	bl	11060 <__fprintf_chk@plt>
   1492c:	b	14890 <__assert_fail@plt+0x3764>
   14930:	mov	r2, #5
   14934:	ldr	r1, [pc, #336]	; 14a8c <__assert_fail@plt+0x3960>
   14938:	mov	r0, #0
   1493c:	bl	10f10 <dcgettext@plt>
   14940:	ldr	r3, [r4, #24]
   14944:	mov	r2, r0
   14948:	mov	r1, #1
   1494c:	mov	r0, r5
   14950:	str	r3, [sp, #20]
   14954:	ldr	r3, [r4, #20]
   14958:	str	r3, [sp, #16]
   1495c:	ldr	r3, [r4, #16]
   14960:	str	r3, [sp, #12]
   14964:	ldr	r3, [r4, #12]
   14968:	str	r3, [sp, #8]
   1496c:	ldr	r3, [r4, #8]
   14970:	str	r3, [sp, #4]
   14974:	ldr	r3, [r4, #4]
   14978:	str	r3, [sp]
   1497c:	ldr	r3, [r4]
   14980:	bl	11060 <__fprintf_chk@plt>
   14984:	b	14890 <__assert_fail@plt+0x3764>
   14988:	mov	r2, #5
   1498c:	ldr	r1, [pc, #252]	; 14a90 <__assert_fail@plt+0x3964>
   14990:	mov	r0, #0
   14994:	bl	10f10 <dcgettext@plt>
   14998:	ldr	r3, [r4, #28]
   1499c:	mov	r2, r0
   149a0:	mov	r1, #1
   149a4:	mov	r0, r5
   149a8:	str	r3, [sp, #24]
   149ac:	ldr	r3, [r4, #24]
   149b0:	str	r3, [sp, #20]
   149b4:	ldr	r3, [r4, #20]
   149b8:	str	r3, [sp, #16]
   149bc:	ldr	r3, [r4, #16]
   149c0:	str	r3, [sp, #12]
   149c4:	ldr	r3, [r4, #12]
   149c8:	str	r3, [sp, #8]
   149cc:	ldr	r3, [r4, #8]
   149d0:	str	r3, [sp, #4]
   149d4:	ldr	r3, [r4, #4]
   149d8:	str	r3, [sp]
   149dc:	ldr	r3, [r4]
   149e0:	bl	11060 <__fprintf_chk@plt>
   149e4:	b	14890 <__assert_fail@plt+0x3764>
   149e8:	ldr	r1, [pc, #164]	; 14a94 <__assert_fail@plt+0x3968>
   149ec:	mov	r2, #5
   149f0:	mov	r0, #0
   149f4:	bl	10f10 <dcgettext@plt>
   149f8:	ldr	r3, [r4, #32]
   149fc:	mov	r2, r0
   14a00:	mov	r1, #1
   14a04:	mov	r0, r5
   14a08:	str	r3, [sp, #28]
   14a0c:	ldr	r3, [r4, #28]
   14a10:	str	r3, [sp, #24]
   14a14:	ldr	r3, [r4, #24]
   14a18:	str	r3, [sp, #20]
   14a1c:	ldr	r3, [r4, #20]
   14a20:	str	r3, [sp, #16]
   14a24:	ldr	r3, [r4, #16]
   14a28:	str	r3, [sp, #12]
   14a2c:	ldr	r3, [r4, #12]
   14a30:	str	r3, [sp, #8]
   14a34:	ldr	r3, [r4, #8]
   14a38:	str	r3, [sp, #4]
   14a3c:	ldr	r3, [r4, #4]
   14a40:	str	r3, [sp]
   14a44:	ldr	r3, [r4]
   14a48:	bl	11060 <__fprintf_chk@plt>
   14a4c:	b	14890 <__assert_fail@plt+0x3764>
   14a50:	mov	r2, #5
   14a54:	ldr	r1, [pc, #60]	; 14a98 <__assert_fail@plt+0x396c>
   14a58:	b	149f0 <__assert_fail@plt+0x38c4>
   14a5c:			; <UNDEFINED> instruction: 0x00016bb9
   14a60:	andeq	r6, r1, ip, asr #23
   14a64:	muleq	r1, sl, lr
   14a68:	ldrdeq	r6, [r1], -r0
   14a6c:	andeq	r6, r1, fp, ror ip
   14a70:	andeq	r6, r1, r5, asr #23
   14a74:	muleq	r1, sp, ip
   14a78:	andeq	r6, r1, sp, lsr #25
   14a7c:	andeq	r6, r1, r4, asr #25
   14a80:	andeq	r6, r1, r0, ror #25
   14a84:	andeq	r6, r1, r0, lsl #26
   14a88:	andeq	r6, r1, r4, lsr #26
   14a8c:	andeq	r6, r1, ip, asr #26
   14a90:	andeq	r6, r1, r8, ror sp
   14a94:	andeq	r6, r1, r8, lsr #27
   14a98:	ldrdeq	r6, [r1], -ip
   14a9c:	push	{r0, r1, r4, lr}
   14aa0:	mov	ip, #0
   14aa4:	ldr	lr, [sp, #16]
   14aa8:	ldr	r4, [lr, ip, lsl #2]
   14aac:	cmp	r4, #0
   14ab0:	bne	14ac8 <__assert_fail@plt+0x399c>
   14ab4:	str	lr, [sp]
   14ab8:	str	ip, [sp, #4]
   14abc:	bl	146d4 <__assert_fail@plt+0x35a8>
   14ac0:	add	sp, sp, #8
   14ac4:	pop	{r4, pc}
   14ac8:	add	ip, ip, #1
   14acc:	b	14aa8 <__assert_fail@plt+0x397c>
   14ad0:	push	{r4, r5, r6, lr}
   14ad4:	sub	sp, sp, #48	; 0x30
   14ad8:	mov	ip, #0
   14adc:	add	lr, sp, #8
   14ae0:	mov	r5, lr
   14ae4:	ldr	r6, [sp, #64]	; 0x40
   14ae8:	ldr	r4, [r6, ip, lsl #2]
   14aec:	cmp	r4, #0
   14af0:	str	r4, [lr], #4
   14af4:	beq	14b04 <__assert_fail@plt+0x39d8>
   14af8:	add	ip, ip, #1
   14afc:	cmp	ip, #10
   14b00:	bne	14ae8 <__assert_fail@plt+0x39bc>
   14b04:	stm	sp, {r5, ip}
   14b08:	bl	146d4 <__assert_fail@plt+0x35a8>
   14b0c:	add	sp, sp, #48	; 0x30
   14b10:	pop	{r4, r5, r6, pc}
   14b14:	push	{r3}		; (str r3, [sp, #-4]!)
   14b18:	push	{r0, r1, r2, r3, lr}
   14b1c:	add	r3, sp, #24
   14b20:	str	r3, [sp]
   14b24:	str	r3, [sp, #12]
   14b28:	ldr	r3, [sp, #20]
   14b2c:	bl	14ad0 <__assert_fail@plt+0x39a4>
   14b30:	add	sp, sp, #16
   14b34:	pop	{lr}		; (ldr lr, [sp], #4)
   14b38:	add	sp, sp, #4
   14b3c:	bx	lr
   14b40:	ldr	r3, [pc, #116]	; 14bbc <__assert_fail@plt+0x3a90>
   14b44:	mov	r0, #10
   14b48:	push	{r4, lr}
   14b4c:	ldr	r1, [r3]
   14b50:	bl	10ef8 <fputc_unlocked@plt>
   14b54:	mov	r2, #5
   14b58:	ldr	r1, [pc, #96]	; 14bc0 <__assert_fail@plt+0x3a94>
   14b5c:	mov	r0, #0
   14b60:	bl	10f10 <dcgettext@plt>
   14b64:	mov	r1, r0
   14b68:	ldr	r2, [pc, #84]	; 14bc4 <__assert_fail@plt+0x3a98>
   14b6c:	mov	r0, #1
   14b70:	bl	1103c <__printf_chk@plt>
   14b74:	mov	r2, #5
   14b78:	ldr	r1, [pc, #72]	; 14bc8 <__assert_fail@plt+0x3a9c>
   14b7c:	mov	r0, #0
   14b80:	bl	10f10 <dcgettext@plt>
   14b84:	mov	r1, r0
   14b88:	ldr	r3, [pc, #60]	; 14bcc <__assert_fail@plt+0x3aa0>
   14b8c:	mov	r0, #1
   14b90:	ldr	r2, [pc, #56]	; 14bd0 <__assert_fail@plt+0x3aa4>
   14b94:	bl	1103c <__printf_chk@plt>
   14b98:	mov	r2, #5
   14b9c:	ldr	r1, [pc, #48]	; 14bd4 <__assert_fail@plt+0x3aa8>
   14ba0:	mov	r0, #0
   14ba4:	bl	10f10 <dcgettext@plt>
   14ba8:	mov	r1, r0
   14bac:	ldr	r2, [pc, #36]	; 14bd8 <__assert_fail@plt+0x3aac>
   14bb0:	mov	r0, #1
   14bb4:	pop	{r4, lr}
   14bb8:	b	1103c <__printf_chk@plt>
   14bbc:	andeq	r8, r2, r4, lsl #3
   14bc0:	andeq	r6, r1, r8, lsl lr
   14bc4:	andeq	r6, r1, ip, lsr #28
   14bc8:	andeq	r6, r1, r2, asr #28
   14bcc:	andeq	r6, r1, r9, lsl r8
   14bd0:	andeq	r6, r1, r1, asr #16
   14bd4:	andeq	r6, r1, r6, asr lr
   14bd8:	andeq	r6, r1, sp, ror lr
   14bdc:	push	{r4, lr}
   14be0:	bl	15868 <__assert_fail@plt+0x473c>
   14be4:	cmp	r0, #0
   14be8:	popne	{r4, pc}
   14bec:	bl	14e94 <__assert_fail@plt+0x3d68>
   14bf0:	push	{r4, lr}
   14bf4:	bl	15868 <__assert_fail@plt+0x473c>
   14bf8:	cmp	r0, #0
   14bfc:	popne	{r4, pc}
   14c00:	bl	14e94 <__assert_fail@plt+0x3d68>
   14c04:	b	14bdc <__assert_fail@plt+0x3ab0>
   14c08:	push	{r4, r5, r6, lr}
   14c0c:	mov	r5, r0
   14c10:	mov	r4, r1
   14c14:	bl	15894 <__assert_fail@plt+0x4768>
   14c18:	cmp	r0, #0
   14c1c:	popne	{r4, r5, r6, pc}
   14c20:	adds	r4, r4, #0
   14c24:	movne	r4, #1
   14c28:	cmp	r5, #0
   14c2c:	moveq	r4, #1
   14c30:	cmp	r4, #0
   14c34:	popeq	{r4, r5, r6, pc}
   14c38:	bl	14e94 <__assert_fail@plt+0x3d68>
   14c3c:	push	{r4, lr}
   14c40:	bl	15afc <__assert_fail@plt+0x49d0>
   14c44:	cmp	r0, #0
   14c48:	popne	{r4, pc}
   14c4c:	bl	14e94 <__assert_fail@plt+0x3d68>
   14c50:	push	{r4, r5, r6, lr}
   14c54:	mov	r6, r0
   14c58:	mov	r5, r1
   14c5c:	mov	r4, r2
   14c60:	bl	15cf8 <__assert_fail@plt+0x4bcc>
   14c64:	cmp	r0, #0
   14c68:	popne	{r4, r5, r6, pc}
   14c6c:	cmp	r6, #0
   14c70:	beq	14c80 <__assert_fail@plt+0x3b54>
   14c74:	cmp	r5, #0
   14c78:	cmpne	r4, #0
   14c7c:	popeq	{r4, r5, r6, pc}
   14c80:	bl	14e94 <__assert_fail@plt+0x3d68>
   14c84:	b	14c50 <__assert_fail@plt+0x3b24>
   14c88:	push	{r4, lr}
   14c8c:	bl	15b0c <__assert_fail@plt+0x49e0>
   14c90:	cmp	r0, #0
   14c94:	popne	{r4, pc}
   14c98:	bl	14e94 <__assert_fail@plt+0x3d68>
   14c9c:	mov	r2, r1
   14ca0:	mov	r1, r0
   14ca4:	mov	r0, #0
   14ca8:	b	14c50 <__assert_fail@plt+0x3b24>
   14cac:	mov	r2, r1
   14cb0:	mov	r1, r0
   14cb4:	mov	r0, #0
   14cb8:	b	14c88 <__assert_fail@plt+0x3b5c>
   14cbc:	cmp	r0, #0
   14cc0:	push	{r4, r5, r6, lr}
   14cc4:	mov	r5, r1
   14cc8:	ldr	r4, [r1]
   14ccc:	bne	14cf8 <__assert_fail@plt+0x3bcc>
   14cd0:	cmp	r4, #0
   14cd4:	bne	14ce8 <__assert_fail@plt+0x3bbc>
   14cd8:	mov	r4, #64	; 0x40
   14cdc:	udiv	r4, r4, r2
   14ce0:	cmp	r2, #64	; 0x40
   14ce4:	addhi	r4, r4, #1
   14ce8:	mov	r1, r4
   14cec:	bl	14c50 <__assert_fail@plt+0x3b24>
   14cf0:	str	r4, [r5]
   14cf4:	pop	{r4, r5, r6, pc}
   14cf8:	lsr	r3, r4, #1
   14cfc:	add	r3, r3, #1
   14d00:	adds	r4, r4, r3
   14d04:	bcc	14ce8 <__assert_fail@plt+0x3bbc>
   14d08:	bl	14e94 <__assert_fail@plt+0x3d68>
   14d0c:	mov	r2, #1
   14d10:	b	14cbc <__assert_fail@plt+0x3b90>
   14d14:	ldr	ip, [r1]
   14d18:	push	{r4, r5, r6, r7, r8, lr}
   14d1c:	mov	r5, r1
   14d20:	mvn	r8, r3
   14d24:	lsr	r8, r8, #31
   14d28:	ldr	lr, [sp, #24]
   14d2c:	asr	r1, ip, #1
   14d30:	adds	r4, ip, r1
   14d34:	mvnvs	r4, #-2147483648	; 0x80000000
   14d38:	cmp	r3, r4
   14d3c:	movge	r1, #0
   14d40:	andlt	r1, r8, #1
   14d44:	cmp	r1, #0
   14d48:	movne	r4, r3
   14d4c:	smull	r6, r7, r4, lr
   14d50:	cmp	r7, r6, asr #31
   14d54:	bne	14d6c <__assert_fail@plt+0x3c40>
   14d58:	cmp	r6, #63	; 0x3f
   14d5c:	mov	r1, r6
   14d60:	bgt	14d7c <__assert_fail@plt+0x3c50>
   14d64:	mov	r1, #64	; 0x40
   14d68:	b	14d70 <__assert_fail@plt+0x3c44>
   14d6c:	mvn	r1, #-2147483648	; 0x80000000
   14d70:	sdiv	r4, r1, lr
   14d74:	mls	r6, lr, r4, r1
   14d78:	sub	r1, r1, r6
   14d7c:	cmp	r0, #0
   14d80:	sub	r6, r4, ip
   14d84:	streq	r0, [r5]
   14d88:	cmp	r6, r2
   14d8c:	bge	14dc0 <__assert_fail@plt+0x3c94>
   14d90:	adds	r4, ip, r2
   14d94:	bvs	14dbc <__assert_fail@plt+0x3c90>
   14d98:	cmp	r4, r3
   14d9c:	movle	r3, #0
   14da0:	andgt	r3, r8, #1
   14da4:	cmp	r3, #0
   14da8:	bne	14dbc <__assert_fail@plt+0x3c90>
   14dac:	smull	r2, r3, r4, lr
   14db0:	cmp	r3, r2, asr #31
   14db4:	mov	r1, r2
   14db8:	beq	14dc0 <__assert_fail@plt+0x3c94>
   14dbc:	bl	14e94 <__assert_fail@plt+0x3d68>
   14dc0:	bl	14c08 <__assert_fail@plt+0x3adc>
   14dc4:	str	r4, [r5]
   14dc8:	pop	{r4, r5, r6, r7, r8, pc}
   14dcc:	push	{r4, lr}
   14dd0:	bl	15814 <__assert_fail@plt+0x46e8>
   14dd4:	cmp	r0, #0
   14dd8:	popne	{r4, pc}
   14ddc:	bl	14e94 <__assert_fail@plt+0x3d68>
   14de0:	mov	r1, #1
   14de4:	b	14dcc <__assert_fail@plt+0x3ca0>
   14de8:	push	{r4, lr}
   14dec:	bl	15814 <__assert_fail@plt+0x46e8>
   14df0:	cmp	r0, #0
   14df4:	popne	{r4, pc}
   14df8:	bl	14e94 <__assert_fail@plt+0x3d68>
   14dfc:	mov	r1, #1
   14e00:	b	14de8 <__assert_fail@plt+0x3cbc>
   14e04:	push	{r4, r5, r6, lr}
   14e08:	mov	r4, r1
   14e0c:	mov	r5, r0
   14e10:	mov	r0, r1
   14e14:	bl	14bdc <__assert_fail@plt+0x3ab0>
   14e18:	mov	r2, r4
   14e1c:	mov	r1, r5
   14e20:	pop	{r4, r5, r6, lr}
   14e24:	b	10ec8 <memcpy@plt>
   14e28:	push	{r4, r5, r6, lr}
   14e2c:	mov	r4, r1
   14e30:	mov	r5, r0
   14e34:	mov	r0, r1
   14e38:	bl	14bf0 <__assert_fail@plt+0x3ac4>
   14e3c:	mov	r2, r4
   14e40:	mov	r1, r5
   14e44:	pop	{r4, r5, r6, lr}
   14e48:	b	10ec8 <memcpy@plt>
   14e4c:	push	{r4, r5, r6, lr}
   14e50:	mov	r5, r0
   14e54:	add	r0, r1, #1
   14e58:	mov	r4, r1
   14e5c:	bl	14bf0 <__assert_fail@plt+0x3ac4>
   14e60:	mov	r2, #0
   14e64:	mov	r1, r5
   14e68:	strb	r2, [r0, r4]
   14e6c:	mov	r2, r4
   14e70:	pop	{r4, r5, r6, lr}
   14e74:	b	10ec8 <memcpy@plt>
   14e78:	push	{r4, lr}
   14e7c:	mov	r4, r0
   14e80:	bl	11000 <strlen@plt>
   14e84:	add	r1, r0, #1
   14e88:	mov	r0, r4
   14e8c:	pop	{r4, lr}
   14e90:	b	14e04 <__assert_fail@plt+0x3cd8>
   14e94:	ldr	r3, [pc, #44]	; 14ec8 <__assert_fail@plt+0x3d9c>
   14e98:	mov	r2, #5
   14e9c:	mov	r0, #0
   14ea0:	push	{r4, lr}
   14ea4:	ldr	r1, [pc, #32]	; 14ecc <__assert_fail@plt+0x3da0>
   14ea8:	ldr	r4, [r3]
   14eac:	bl	10f10 <dcgettext@plt>
   14eb0:	mov	r3, r0
   14eb4:	ldr	r2, [pc, #20]	; 14ed0 <__assert_fail@plt+0x3da4>
   14eb8:	mov	r1, #0
   14ebc:	mov	r0, r4
   14ec0:	bl	10f7c <error@plt>
   14ec4:	bl	110fc <abort@plt>
   14ec8:	andeq	r8, r2, r0, lsr #2
   14ecc:	andeq	r6, r1, r9, asr #29
   14ed0:	andeq	r5, r1, sl, lsl #30
   14ed4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14ed8:	mov	r4, r0
   14edc:	mov	r6, r1
   14ee0:	mov	r9, r2
   14ee4:	mov	r0, #0
   14ee8:	mov	r2, #5
   14eec:	mov	r7, r3
   14ef0:	ldr	r1, [pc, #152]	; 14f90 <__assert_fail@plt+0x3e64>
   14ef4:	ldr	r8, [sp, #32]
   14ef8:	bl	10f10 <dcgettext@plt>
   14efc:	mov	r2, r0
   14f00:	mov	r1, r4
   14f04:	mov	r0, #0
   14f08:	bl	10f7c <error@plt>
   14f0c:	mov	r2, #5
   14f10:	ldr	r1, [pc, #124]	; 14f94 <__assert_fail@plt+0x3e68>
   14f14:	mov	r0, #0
   14f18:	bl	10f10 <dcgettext@plt>
   14f1c:	mov	r1, #0
   14f20:	mov	r2, r0
   14f24:	mov	r0, r1
   14f28:	bl	10f7c <error@plt>
   14f2c:	ldr	r3, [pc, #100]	; 14f98 <__assert_fail@plt+0x3e6c>
   14f30:	mov	r2, #5
   14f34:	mov	r0, #0
   14f38:	ldr	r1, [pc, #92]	; 14f9c <__assert_fail@plt+0x3e70>
   14f3c:	ldr	r4, [r3]
   14f40:	bl	10f10 <dcgettext@plt>
   14f44:	mov	r5, r0
   14f48:	mov	r3, r9
   14f4c:	mov	r2, r6
   14f50:	mov	r1, #8
   14f54:	mov	r0, #0
   14f58:	bl	1441c <__assert_fail@plt+0x32f0>
   14f5c:	mov	r6, r0
   14f60:	mov	r3, r8
   14f64:	mov	r2, r7
   14f68:	mov	r1, #8
   14f6c:	mov	r0, #1
   14f70:	bl	1441c <__assert_fail@plt+0x32f0>
   14f74:	mov	r3, r6
   14f78:	mov	r2, r5
   14f7c:	str	r0, [sp, #32]
   14f80:	mov	r1, #0
   14f84:	mov	r0, r4
   14f88:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   14f8c:	b	10f7c <error@plt>
   14f90:	ldrdeq	r6, [r1], -sl
   14f94:	strdeq	r6, [r1], -r3
   14f98:	andeq	r8, r2, r0, lsr #2
   14f9c:	andeq	r6, r1, lr, lsl pc
   14fa0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14fa4:	mov	r6, r1
   14fa8:	mov	r7, r2
   14fac:	mov	r8, r3
   14fb0:	mov	r5, r0
   14fb4:	bl	15c28 <__assert_fail@plt+0x4afc>
   14fb8:	mov	r4, r0
   14fbc:	bl	11018 <__errno_location@plt>
   14fc0:	ldr	r0, [r0]
   14fc4:	cmp	r0, #0
   14fc8:	beq	14fe0 <__assert_fail@plt+0x3eb4>
   14fcc:	mov	r3, r7
   14fd0:	mov	r2, r6
   14fd4:	str	r8, [sp]
   14fd8:	mov	r1, r5
   14fdc:	bl	14ed4 <__assert_fail@plt+0x3da8>
   14fe0:	mov	r0, r4
   14fe4:	add	sp, sp, #8
   14fe8:	pop	{r4, r5, r6, r7, r8, pc}
   14fec:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14ff0:	mov	r7, r1
   14ff4:	mov	r8, r2
   14ff8:	mov	r4, r3
   14ffc:	mov	r6, r0
   15000:	bl	15ca0 <__assert_fail@plt+0x4b74>
   15004:	mov	r5, r0
   15008:	bl	11018 <__errno_location@plt>
   1500c:	ldr	r0, [r0]
   15010:	cmp	r0, #0
   15014:	beq	15030 <__assert_fail@plt+0x3f04>
   15018:	sub	r4, r4, #1
   1501c:	mov	r3, r8
   15020:	sub	r2, r7, #1
   15024:	mov	r1, r6
   15028:	str	r4, [sp]
   1502c:	bl	14ed4 <__assert_fail@plt+0x3da8>
   15030:	mov	r0, r5
   15034:	add	sp, sp, #8
   15038:	pop	{r4, r5, r6, r7, r8, pc}
   1503c:	subs	r2, r2, #1
   15040:	mov	r3, #0
   15044:	bcs	15050 <__assert_fail@plt+0x3f24>
   15048:	mov	r0, r3
   1504c:	bx	lr
   15050:	push	{r4, r5, lr}
   15054:	sub	r2, r2, #1
   15058:	ldr	r4, [r0]
   1505c:	umull	r4, r5, r1, r4
   15060:	adds	ip, r5, #0
   15064:	movne	ip, #1
   15068:	cmp	ip, #0
   1506c:	orr	r3, r3, ip
   15070:	mvnne	r4, #0
   15074:	cmn	r2, #1
   15078:	str	r4, [r0]
   1507c:	bne	15054 <__assert_fail@plt+0x3f28>
   15080:	mov	r0, r3
   15084:	pop	{r4, r5, pc}
   15088:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1508c:	cmp	r2, #36	; 0x24
   15090:	ldr	r6, [sp, #48]	; 0x30
   15094:	bls	150ac <__assert_fail@plt+0x3f80>
   15098:	ldr	r3, [pc, #832]	; 153e0 <__assert_fail@plt+0x42b4>
   1509c:	mov	r2, #85	; 0x55
   150a0:	ldr	r1, [pc, #828]	; 153e4 <__assert_fail@plt+0x42b8>
   150a4:	ldr	r0, [pc, #828]	; 153e8 <__assert_fail@plt+0x42bc>
   150a8:	bl	1112c <__assert_fail@plt>
   150ac:	cmp	r1, #0
   150b0:	mov	r7, r1
   150b4:	mov	r4, r0
   150b8:	mov	fp, r2
   150bc:	mov	r8, r3
   150c0:	moveq	r7, sp
   150c4:	bl	11018 <__errno_location@plt>
   150c8:	mov	r3, #0
   150cc:	mov	sl, r0
   150d0:	str	r3, [r0]
   150d4:	bl	10fdc <__ctype_b_loc@plt>
   150d8:	ldrb	r9, [r4]
   150dc:	mov	r3, r4
   150e0:	ldr	r1, [r0]
   150e4:	lsl	r2, r9, #1
   150e8:	ldrh	r5, [r1, r2]
   150ec:	ands	r5, r5, #8192	; 0x2000
   150f0:	bne	1510c <__assert_fail@plt+0x3fe0>
   150f4:	cmp	r9, #45	; 0x2d
   150f8:	bne	15114 <__assert_fail@plt+0x3fe8>
   150fc:	mov	r5, #4
   15100:	mov	r0, r5
   15104:	add	sp, sp, #12
   15108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1510c:	ldrb	r9, [r3, #1]!
   15110:	b	150e4 <__assert_fail@plt+0x3fb8>
   15114:	mov	r2, fp
   15118:	mov	r1, r7
   1511c:	mov	r0, r4
   15120:	bl	10ff4 <strtoul@plt>
   15124:	ldr	r9, [r7]
   15128:	str	r0, [sp, #4]
   1512c:	cmp	r9, r4
   15130:	bne	15190 <__assert_fail@plt+0x4064>
   15134:	cmp	r6, #0
   15138:	beq	150fc <__assert_fail@plt+0x3fd0>
   1513c:	ldrb	r1, [r4]
   15140:	cmp	r1, #0
   15144:	beq	150fc <__assert_fail@plt+0x3fd0>
   15148:	mov	r0, r6
   1514c:	bl	1100c <strchr@plt>
   15150:	cmp	r0, #0
   15154:	movne	r3, #1
   15158:	strne	r3, [sp, #4]
   1515c:	beq	150fc <__assert_fail@plt+0x3fd0>
   15160:	ldrb	r4, [r9]
   15164:	cmp	r4, #0
   15168:	beq	15398 <__assert_fail@plt+0x426c>
   1516c:	mov	r1, r4
   15170:	mov	r0, r6
   15174:	bl	1100c <strchr@plt>
   15178:	cmp	r0, #0
   1517c:	bne	151b8 <__assert_fail@plt+0x408c>
   15180:	ldr	r3, [sp, #4]
   15184:	orr	r5, r5, #2
   15188:	str	r3, [r8]
   1518c:	b	15100 <__assert_fail@plt+0x3fd4>
   15190:	ldr	r5, [sl]
   15194:	cmp	r5, #0
   15198:	beq	151a8 <__assert_fail@plt+0x407c>
   1519c:	cmp	r5, #34	; 0x22
   151a0:	bne	150fc <__assert_fail@plt+0x3fd0>
   151a4:	mov	r5, #1
   151a8:	cmp	r6, #0
   151ac:	streq	r0, [r8]
   151b0:	bne	15160 <__assert_fail@plt+0x4034>
   151b4:	b	15100 <__assert_fail@plt+0x3fd4>
   151b8:	cmp	r4, #84	; 0x54
   151bc:	beq	15210 <__assert_fail@plt+0x40e4>
   151c0:	bhi	151f8 <__assert_fail@plt+0x40cc>
   151c4:	cmp	r4, #75	; 0x4b
   151c8:	beq	15210 <__assert_fail@plt+0x40e4>
   151cc:	bhi	151e8 <__assert_fail@plt+0x40bc>
   151d0:	cmp	r4, #69	; 0x45
   151d4:	beq	15210 <__assert_fail@plt+0x40e4>
   151d8:	cmp	r4, #71	; 0x47
   151dc:	beq	15210 <__assert_fail@plt+0x40e4>
   151e0:	mov	r6, #1
   151e4:	b	152bc <__assert_fail@plt+0x4190>
   151e8:	cmp	r4, #77	; 0x4d
   151ec:	beq	15210 <__assert_fail@plt+0x40e4>
   151f0:	cmp	r4, #80	; 0x50
   151f4:	b	151dc <__assert_fail@plt+0x40b0>
   151f8:	cmp	r4, #103	; 0x67
   151fc:	beq	15210 <__assert_fail@plt+0x40e4>
   15200:	bhi	15294 <__assert_fail@plt+0x4168>
   15204:	sub	r3, r4, #89	; 0x59
   15208:	cmp	r3, #1
   1520c:	bhi	151e0 <__assert_fail@plt+0x40b4>
   15210:	mov	r1, #48	; 0x30
   15214:	mov	r0, r6
   15218:	bl	1100c <strchr@plt>
   1521c:	cmp	r0, #0
   15220:	beq	151e0 <__assert_fail@plt+0x40b4>
   15224:	ldrb	r3, [r9, #1]
   15228:	cmp	r3, #68	; 0x44
   1522c:	moveq	r6, #2
   15230:	moveq	r1, #1000	; 0x3e8
   15234:	beq	15254 <__assert_fail@plt+0x4128>
   15238:	cmp	r3, #105	; 0x69
   1523c:	beq	152ac <__assert_fail@plt+0x4180>
   15240:	cmp	r3, #66	; 0x42
   15244:	moveq	r6, #2
   15248:	movne	r6, #1
   1524c:	moveq	r1, #1000	; 0x3e8
   15250:	movne	r1, #1024	; 0x400
   15254:	cmp	r4, #89	; 0x59
   15258:	beq	153d0 <__assert_fail@plt+0x42a4>
   1525c:	bhi	152e4 <__assert_fail@plt+0x41b8>
   15260:	cmp	r4, #75	; 0x4b
   15264:	beq	15324 <__assert_fail@plt+0x41f8>
   15268:	bhi	152c4 <__assert_fail@plt+0x4198>
   1526c:	cmp	r4, #69	; 0x45
   15270:	beq	153a4 <__assert_fail@plt+0x4278>
   15274:	cmp	r4, #71	; 0x47
   15278:	beq	153b0 <__assert_fail@plt+0x4284>
   1527c:	cmp	r4, #66	; 0x42
   15280:	bne	15180 <__assert_fail@plt+0x4054>
   15284:	ldr	r3, [sp, #4]
   15288:	lsl	r2, r3, #10
   1528c:	lsrs	r3, r3, #22
   15290:	b	15360 <__assert_fail@plt+0x4234>
   15294:	cmp	r4, #109	; 0x6d
   15298:	beq	15210 <__assert_fail@plt+0x40e4>
   1529c:	cmp	r4, #116	; 0x74
   152a0:	beq	15210 <__assert_fail@plt+0x40e4>
   152a4:	cmp	r4, #107	; 0x6b
   152a8:	b	151dc <__assert_fail@plt+0x40b0>
   152ac:	ldrb	r3, [r9, #2]
   152b0:	cmp	r3, #66	; 0x42
   152b4:	movne	r6, #1
   152b8:	moveq	r6, #3
   152bc:	mov	r1, #1024	; 0x400
   152c0:	b	15254 <__assert_fail@plt+0x4128>
   152c4:	cmp	r4, #80	; 0x50
   152c8:	beq	153b8 <__assert_fail@plt+0x428c>
   152cc:	cmp	r4, #84	; 0x54
   152d0:	beq	153c0 <__assert_fail@plt+0x4294>
   152d4:	cmp	r4, #77	; 0x4d
   152d8:	bne	15180 <__assert_fail@plt+0x4054>
   152dc:	mov	r2, #2
   152e0:	b	153a8 <__assert_fail@plt+0x427c>
   152e4:	cmp	r4, #103	; 0x67
   152e8:	beq	153b0 <__assert_fail@plt+0x4284>
   152ec:	bhi	15310 <__assert_fail@plt+0x41e4>
   152f0:	cmp	r4, #98	; 0x62
   152f4:	beq	15354 <__assert_fail@plt+0x4228>
   152f8:	cmp	r4, #99	; 0x63
   152fc:	beq	153d8 <__assert_fail@plt+0x42ac>
   15300:	cmp	r4, #90	; 0x5a
   15304:	bne	15180 <__assert_fail@plt+0x4054>
   15308:	mov	r2, #7
   1530c:	b	153a8 <__assert_fail@plt+0x427c>
   15310:	cmp	r4, #109	; 0x6d
   15314:	beq	152dc <__assert_fail@plt+0x41b0>
   15318:	bhi	1532c <__assert_fail@plt+0x4200>
   1531c:	cmp	r4, #107	; 0x6b
   15320:	bne	15180 <__assert_fail@plt+0x4054>
   15324:	mov	r2, #1
   15328:	b	153a8 <__assert_fail@plt+0x427c>
   1532c:	cmp	r4, #116	; 0x74
   15330:	beq	153c0 <__assert_fail@plt+0x4294>
   15334:	cmp	r4, #119	; 0x77
   15338:	bne	15180 <__assert_fail@plt+0x4054>
   1533c:	ldr	r0, [sp, #4]
   15340:	lsl	r3, r0, #1
   15344:	lsrs	r0, r0, #31
   15348:	streq	r3, [sp, #4]
   1534c:	beq	1537c <__assert_fail@plt+0x4250>
   15350:	b	15370 <__assert_fail@plt+0x4244>
   15354:	ldr	r3, [sp, #4]
   15358:	lsl	r2, r3, #9
   1535c:	lsrs	r3, r3, #23
   15360:	movne	r0, #1
   15364:	moveq	r0, #0
   15368:	streq	r2, [sp, #4]
   1536c:	beq	1537c <__assert_fail@plt+0x4250>
   15370:	mvn	r3, #0
   15374:	mov	r0, #1
   15378:	str	r3, [sp, #4]
   1537c:	ldr	r3, [r7]
   15380:	orr	r5, r5, r0
   15384:	add	r2, r3, r6
   15388:	str	r2, [r7]
   1538c:	ldrb	r3, [r3, r6]
   15390:	cmp	r3, #0
   15394:	orrne	r5, r5, #2
   15398:	ldr	r3, [sp, #4]
   1539c:	str	r3, [r8]
   153a0:	b	15100 <__assert_fail@plt+0x3fd4>
   153a4:	mov	r2, #6
   153a8:	add	r0, sp, #4
   153ac:	b	153c8 <__assert_fail@plt+0x429c>
   153b0:	mov	r2, #3
   153b4:	b	153a8 <__assert_fail@plt+0x427c>
   153b8:	mov	r2, #5
   153bc:	b	153a8 <__assert_fail@plt+0x427c>
   153c0:	mov	r2, #4
   153c4:	add	r0, sp, r2
   153c8:	bl	1503c <__assert_fail@plt+0x3f10>
   153cc:	b	1537c <__assert_fail@plt+0x4250>
   153d0:	mov	r2, #8
   153d4:	b	153a8 <__assert_fail@plt+0x427c>
   153d8:	mov	r0, #0
   153dc:	b	1537c <__assert_fail@plt+0x4250>
   153e0:	andeq	r6, r1, r3, asr #30
   153e4:	andeq	r6, r1, ip, asr #30
   153e8:	andeq	r6, r1, sl, asr pc
   153ec:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153f0:	mov	ip, r0
   153f4:	asr	fp, r1, #31
   153f8:	mov	r0, #0
   153fc:	mov	lr, r0
   15400:	subs	r2, r2, #1
   15404:	bcs	15410 <__assert_fail@plt+0x42e4>
   15408:	add	sp, sp, #12
   1540c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15410:	ldrd	r8, [ip]
   15414:	mov	r3, #0
   15418:	cmp	r9, r3
   1541c:	umulleq	r8, r9, r8, r1
   15420:	moveq	r6, r8
   15424:	moveq	r4, r9
   15428:	beq	15460 <__assert_fail@plt+0x4334>
   1542c:	umull	r4, r5, r8, r1
   15430:	strd	r4, [sp]
   15434:	mov	r5, lr
   15438:	ldr	r4, [sp, #4]
   1543c:	umlal	r4, r5, r9, r1
   15440:	cmp	r5, #0
   15444:	ldrne	r3, [sp, #4]
   15448:	mulne	r4, r1, r9
   1544c:	ldreq	r6, [sp]
   15450:	mlane	r4, r8, fp, r4
   15454:	ldrne	r6, [sp]
   15458:	addne	r4, r4, r3
   1545c:	movne	r3, #1
   15460:	cmp	r3, #0
   15464:	mvnne	r6, #0
   15468:	movne	r3, #1
   1546c:	movne	r4, r6
   15470:	orr	r0, r0, r3
   15474:	str	r6, [ip]
   15478:	str	r4, [ip, #4]
   1547c:	b	15400 <__assert_fail@plt+0x42d4>
   15480:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15484:	cmp	r2, #36	; 0x24
   15488:	sub	sp, sp, #20
   1548c:	ldr	r5, [sp, #56]	; 0x38
   15490:	bls	154a8 <__assert_fail@plt+0x437c>
   15494:	ldr	r3, [pc, #876]	; 15808 <__assert_fail@plt+0x46dc>
   15498:	mov	r2, #85	; 0x55
   1549c:	ldr	r1, [pc, #872]	; 1580c <__assert_fail@plt+0x46e0>
   154a0:	ldr	r0, [pc, #872]	; 15810 <__assert_fail@plt+0x46e4>
   154a4:	bl	1112c <__assert_fail@plt>
   154a8:	cmp	r1, #0
   154ac:	mov	r6, r1
   154b0:	mov	r8, r0
   154b4:	mov	fp, r2
   154b8:	mov	r7, r3
   154bc:	addeq	r6, sp, #4
   154c0:	bl	11018 <__errno_location@plt>
   154c4:	mov	r3, #0
   154c8:	mov	sl, r0
   154cc:	str	r3, [r0]
   154d0:	bl	10fdc <__ctype_b_loc@plt>
   154d4:	ldrb	r9, [r8]
   154d8:	mov	r3, r8
   154dc:	ldr	r1, [r0]
   154e0:	lsl	r2, r9, #1
   154e4:	ldrh	r4, [r1, r2]
   154e8:	ands	r4, r4, #8192	; 0x2000
   154ec:	bne	15508 <__assert_fail@plt+0x43dc>
   154f0:	cmp	r9, #45	; 0x2d
   154f4:	bne	15510 <__assert_fail@plt+0x43e4>
   154f8:	mov	r4, #4
   154fc:	mov	r0, r4
   15500:	add	sp, sp, #20
   15504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15508:	ldrb	r9, [r3, #1]!
   1550c:	b	154e0 <__assert_fail@plt+0x43b4>
   15510:	mov	r2, fp
   15514:	mov	r1, r6
   15518:	mov	r0, r8
   1551c:	bl	11054 <strtoumax@plt>
   15520:	ldr	r9, [r6]
   15524:	strd	r0, [sp, #8]
   15528:	cmp	r9, r8
   1552c:	bne	15590 <__assert_fail@plt+0x4464>
   15530:	cmp	r5, #0
   15534:	beq	154f8 <__assert_fail@plt+0x43cc>
   15538:	ldrb	r1, [r8]
   1553c:	cmp	r1, #0
   15540:	beq	154f8 <__assert_fail@plt+0x43cc>
   15544:	mov	r0, r5
   15548:	bl	1100c <strchr@plt>
   1554c:	cmp	r0, #0
   15550:	movne	r2, #1
   15554:	movne	r3, #0
   15558:	strdne	r2, [sp, #8]
   1555c:	beq	154f8 <__assert_fail@plt+0x43cc>
   15560:	ldrb	r8, [r9]
   15564:	cmp	r8, #0
   15568:	beq	157c0 <__assert_fail@plt+0x4694>
   1556c:	mov	r1, r8
   15570:	mov	r0, r5
   15574:	bl	1100c <strchr@plt>
   15578:	cmp	r0, #0
   1557c:	bne	155b8 <__assert_fail@plt+0x448c>
   15580:	ldrd	r2, [sp, #8]
   15584:	orr	r4, r4, #2
   15588:	strd	r2, [r7]
   1558c:	b	154fc <__assert_fail@plt+0x43d0>
   15590:	ldr	r4, [sl]
   15594:	cmp	r4, #0
   15598:	beq	155a8 <__assert_fail@plt+0x447c>
   1559c:	cmp	r4, #34	; 0x22
   155a0:	bne	154f8 <__assert_fail@plt+0x43cc>
   155a4:	mov	r4, #1
   155a8:	cmp	r5, #0
   155ac:	strdeq	r0, [r7]
   155b0:	bne	15560 <__assert_fail@plt+0x4434>
   155b4:	b	154fc <__assert_fail@plt+0x43d0>
   155b8:	cmp	r8, #84	; 0x54
   155bc:	beq	15610 <__assert_fail@plt+0x44e4>
   155c0:	bhi	155f8 <__assert_fail@plt+0x44cc>
   155c4:	cmp	r8, #75	; 0x4b
   155c8:	beq	15610 <__assert_fail@plt+0x44e4>
   155cc:	bhi	155e8 <__assert_fail@plt+0x44bc>
   155d0:	cmp	r8, #69	; 0x45
   155d4:	beq	15610 <__assert_fail@plt+0x44e4>
   155d8:	cmp	r8, #71	; 0x47
   155dc:	beq	15610 <__assert_fail@plt+0x44e4>
   155e0:	mov	r5, #1
   155e4:	b	156c8 <__assert_fail@plt+0x459c>
   155e8:	cmp	r8, #77	; 0x4d
   155ec:	beq	15610 <__assert_fail@plt+0x44e4>
   155f0:	cmp	r8, #80	; 0x50
   155f4:	b	155dc <__assert_fail@plt+0x44b0>
   155f8:	cmp	r8, #103	; 0x67
   155fc:	beq	15610 <__assert_fail@plt+0x44e4>
   15600:	bhi	156a0 <__assert_fail@plt+0x4574>
   15604:	sub	r3, r8, #89	; 0x59
   15608:	cmp	r3, #1
   1560c:	bhi	155e0 <__assert_fail@plt+0x44b4>
   15610:	mov	r1, #48	; 0x30
   15614:	mov	r0, r5
   15618:	bl	1100c <strchr@plt>
   1561c:	cmp	r0, #0
   15620:	beq	155e0 <__assert_fail@plt+0x44b4>
   15624:	ldrb	r3, [r9, #1]
   15628:	cmp	r3, #68	; 0x44
   1562c:	moveq	r5, #2
   15630:	moveq	r1, #1000	; 0x3e8
   15634:	beq	15654 <__assert_fail@plt+0x4528>
   15638:	cmp	r3, #105	; 0x69
   1563c:	beq	156b8 <__assert_fail@plt+0x458c>
   15640:	cmp	r3, #66	; 0x42
   15644:	moveq	r5, #2
   15648:	movne	r5, #1
   1564c:	moveq	r1, #1000	; 0x3e8
   15650:	movne	r1, #1024	; 0x400
   15654:	cmp	r8, #89	; 0x59
   15658:	beq	157f0 <__assert_fail@plt+0x46c4>
   1565c:	bhi	156f0 <__assert_fail@plt+0x45c4>
   15660:	cmp	r8, #75	; 0x4b
   15664:	beq	15730 <__assert_fail@plt+0x4604>
   15668:	bhi	156d0 <__assert_fail@plt+0x45a4>
   1566c:	cmp	r8, #69	; 0x45
   15670:	beq	157cc <__assert_fail@plt+0x46a0>
   15674:	cmp	r8, #71	; 0x47
   15678:	beq	157d8 <__assert_fail@plt+0x46ac>
   1567c:	cmp	r8, #66	; 0x42
   15680:	bne	15580 <__assert_fail@plt+0x4454>
   15684:	ldr	r3, [sp, #8]
   15688:	ldr	r1, [sp, #12]
   1568c:	lsl	r2, r1, #10
   15690:	lsr	r0, r1, #22
   15694:	orr	r2, r2, r3, lsr #22
   15698:	lsl	r3, r3, #10
   1569c:	b	1577c <__assert_fail@plt+0x4650>
   156a0:	cmp	r8, #109	; 0x6d
   156a4:	beq	15610 <__assert_fail@plt+0x44e4>
   156a8:	cmp	r8, #116	; 0x74
   156ac:	beq	15610 <__assert_fail@plt+0x44e4>
   156b0:	cmp	r8, #107	; 0x6b
   156b4:	b	155dc <__assert_fail@plt+0x44b0>
   156b8:	ldrb	r3, [r9, #2]
   156bc:	cmp	r3, #66	; 0x42
   156c0:	movne	r5, #1
   156c4:	moveq	r5, #3
   156c8:	mov	r1, #1024	; 0x400
   156cc:	b	15654 <__assert_fail@plt+0x4528>
   156d0:	cmp	r8, #80	; 0x50
   156d4:	beq	157e0 <__assert_fail@plt+0x46b4>
   156d8:	cmp	r8, #84	; 0x54
   156dc:	beq	157e8 <__assert_fail@plt+0x46bc>
   156e0:	cmp	r8, #77	; 0x4d
   156e4:	bne	15580 <__assert_fail@plt+0x4454>
   156e8:	mov	r2, #2
   156ec:	b	157d0 <__assert_fail@plt+0x46a4>
   156f0:	cmp	r8, #103	; 0x67
   156f4:	beq	157d8 <__assert_fail@plt+0x46ac>
   156f8:	bhi	1571c <__assert_fail@plt+0x45f0>
   156fc:	cmp	r8, #98	; 0x62
   15700:	beq	15764 <__assert_fail@plt+0x4638>
   15704:	cmp	r8, #99	; 0x63
   15708:	beq	15800 <__assert_fail@plt+0x46d4>
   1570c:	cmp	r8, #90	; 0x5a
   15710:	bne	15580 <__assert_fail@plt+0x4454>
   15714:	mov	r2, #7
   15718:	b	157d0 <__assert_fail@plt+0x46a4>
   1571c:	cmp	r8, #109	; 0x6d
   15720:	beq	156e8 <__assert_fail@plt+0x45bc>
   15724:	bhi	15738 <__assert_fail@plt+0x460c>
   15728:	cmp	r8, #107	; 0x6b
   1572c:	bne	15580 <__assert_fail@plt+0x4454>
   15730:	mov	r2, #1
   15734:	b	157d0 <__assert_fail@plt+0x46a4>
   15738:	cmp	r8, #116	; 0x74
   1573c:	beq	157e8 <__assert_fail@plt+0x46bc>
   15740:	cmp	r8, #119	; 0x77
   15744:	bne	15580 <__assert_fail@plt+0x4454>
   15748:	ldr	r3, [sp, #8]
   1574c:	ldr	r2, [sp, #12]
   15750:	ldr	r0, [sp, #12]
   15754:	adds	r3, r3, r3
   15758:	adc	r2, r2, r2
   1575c:	lsr	r0, r0, #31
   15760:	b	1577c <__assert_fail@plt+0x4650>
   15764:	ldr	r3, [sp, #8]
   15768:	ldr	r1, [sp, #12]
   1576c:	lsl	r2, r1, #9
   15770:	lsr	r0, r1, #23
   15774:	orr	r2, r2, r3, lsr #23
   15778:	lsl	r3, r3, #9
   1577c:	adds	r0, r0, #0
   15780:	movne	r0, #1
   15784:	cmp	r0, #0
   15788:	streq	r3, [sp, #8]
   1578c:	streq	r2, [sp, #12]
   15790:	beq	157a4 <__assert_fail@plt+0x4678>
   15794:	mvn	r2, #0
   15798:	mvn	r3, #0
   1579c:	mov	r0, #1
   157a0:	strd	r2, [sp, #8]
   157a4:	ldr	r3, [r6]
   157a8:	orr	r4, r4, r0
   157ac:	add	r2, r3, r5
   157b0:	str	r2, [r6]
   157b4:	ldrb	r3, [r3, r5]
   157b8:	cmp	r3, #0
   157bc:	orrne	r4, r4, #2
   157c0:	ldrd	r2, [sp, #8]
   157c4:	strd	r2, [r7]
   157c8:	b	154fc <__assert_fail@plt+0x43d0>
   157cc:	mov	r2, #6
   157d0:	add	r0, sp, #8
   157d4:	b	157f8 <__assert_fail@plt+0x46cc>
   157d8:	mov	r2, #3
   157dc:	b	157d0 <__assert_fail@plt+0x46a4>
   157e0:	mov	r2, #5
   157e4:	b	157d0 <__assert_fail@plt+0x46a4>
   157e8:	mov	r2, #4
   157ec:	b	157d0 <__assert_fail@plt+0x46a4>
   157f0:	mov	r2, #8
   157f4:	add	r0, sp, r2
   157f8:	bl	153ec <__assert_fail@plt+0x42c0>
   157fc:	b	157a4 <__assert_fail@plt+0x4678>
   15800:	mov	r0, #0
   15804:	b	157a4 <__assert_fail@plt+0x4678>
   15808:	andeq	r6, r1, r0, lsl #31
   1580c:	andeq	r6, r1, ip, asr #30
   15810:	andeq	r6, r1, sl, asr pc
   15814:	cmp	r1, #0
   15818:	cmpne	r0, #0
   1581c:	beq	15854 <__assert_fail@plt+0x4728>
   15820:	push	{r4, r5, r6, lr}
   15824:	umull	r4, r5, r0, r1
   15828:	adds	r3, r5, #0
   1582c:	movne	r3, #1
   15830:	cmp	r4, #0
   15834:	blt	15840 <__assert_fail@plt+0x4714>
   15838:	cmp	r3, #0
   1583c:	beq	15860 <__assert_fail@plt+0x4734>
   15840:	bl	11018 <__errno_location@plt>
   15844:	mov	r3, #12
   15848:	str	r3, [r0]
   1584c:	mov	r0, #0
   15850:	pop	{r4, r5, r6, pc}
   15854:	mov	r1, #1
   15858:	mov	r0, r1
   1585c:	b	10e74 <calloc@plt>
   15860:	pop	{r4, r5, r6, lr}
   15864:	b	1585c <__assert_fail@plt+0x4730>
   15868:	cmp	r0, #0
   1586c:	beq	1588c <__assert_fail@plt+0x4760>
   15870:	bge	15890 <__assert_fail@plt+0x4764>
   15874:	push	{r4, lr}
   15878:	bl	11018 <__errno_location@plt>
   1587c:	mov	r3, #12
   15880:	str	r3, [r0]
   15884:	mov	r0, #0
   15888:	pop	{r4, pc}
   1588c:	mov	r0, #1
   15890:	b	10f94 <malloc@plt>
   15894:	cmp	r0, #0
   15898:	bne	158a4 <__assert_fail@plt+0x4778>
   1589c:	mov	r0, r1
   158a0:	b	15868 <__assert_fail@plt+0x473c>
   158a4:	cmp	r1, #0
   158a8:	push	{r4, lr}
   158ac:	bne	158bc <__assert_fail@plt+0x4790>
   158b0:	bl	12dbc <__assert_fail@plt+0x1c90>
   158b4:	mov	r0, #0
   158b8:	pop	{r4, pc}
   158bc:	blt	158c8 <__assert_fail@plt+0x479c>
   158c0:	pop	{r4, lr}
   158c4:	b	10f1c <realloc@plt>
   158c8:	bl	11018 <__errno_location@plt>
   158cc:	mov	r3, #12
   158d0:	str	r3, [r0]
   158d4:	b	158b4 <__assert_fail@plt+0x4788>
   158d8:	push	{r4, r5, r6, lr}
   158dc:	mov	r4, r0
   158e0:	bl	10f58 <__fpending@plt>
   158e4:	mov	r5, r0
   158e8:	mov	r0, r4
   158ec:	bl	10f64 <ferror_unlocked@plt>
   158f0:	mov	r6, r0
   158f4:	mov	r0, r4
   158f8:	bl	12c30 <__assert_fail@plt+0x1b04>
   158fc:	cmp	r6, #0
   15900:	mov	r4, r0
   15904:	bne	15930 <__assert_fail@plt+0x4804>
   15908:	cmp	r0, #0
   1590c:	beq	15928 <__assert_fail@plt+0x47fc>
   15910:	cmp	r5, #0
   15914:	bne	15940 <__assert_fail@plt+0x4814>
   15918:	bl	11018 <__errno_location@plt>
   1591c:	ldr	r4, [r0]
   15920:	subs	r4, r4, #9
   15924:	mvnne	r4, #0
   15928:	mov	r0, r4
   1592c:	pop	{r4, r5, r6, pc}
   15930:	cmp	r0, #0
   15934:	bne	15940 <__assert_fail@plt+0x4814>
   15938:	bl	11018 <__errno_location@plt>
   1593c:	str	r4, [r0]
   15940:	mvn	r4, #0
   15944:	b	15928 <__assert_fail@plt+0x47fc>
   15948:	push	{r1, r2, r3}
   1594c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, lr}
   15950:	add	r2, sp, #40	; 0x28
   15954:	ldr	r1, [sp, #36]	; 0x24
   15958:	str	r2, [sp, #4]
   1595c:	cmp	r1, #0
   15960:	beq	159b0 <__assert_fail@plt+0x4884>
   15964:	movw	r3, #1030	; 0x406
   15968:	mov	r5, r0
   1596c:	cmp	r1, r3
   15970:	beq	159bc <__assert_fail@plt+0x4890>
   15974:	cmp	r1, #11
   15978:	beq	159a0 <__assert_fail@plt+0x4874>
   1597c:	bgt	15ab0 <__assert_fail@plt+0x4984>
   15980:	cmp	r1, #4
   15984:	beq	15ac8 <__assert_fail@plt+0x499c>
   15988:	bgt	15aa8 <__assert_fail@plt+0x497c>
   1598c:	cmp	r1, #2
   15990:	beq	15ac8 <__assert_fail@plt+0x499c>
   15994:	bgt	159a0 <__assert_fail@plt+0x4874>
   15998:	cmp	r1, #1
   1599c:	bne	15ac8 <__assert_fail@plt+0x499c>
   159a0:	mov	r0, r5
   159a4:	bl	11090 <fcntl64@plt>
   159a8:	mov	r4, r0
   159ac:	b	15a04 <__assert_fail@plt+0x48d8>
   159b0:	ldr	r2, [sp, #40]	; 0x28
   159b4:	bl	11090 <fcntl64@plt>
   159b8:	b	159a8 <__assert_fail@plt+0x487c>
   159bc:	ldr	r6, [pc, #304]	; 15af4 <__assert_fail@plt+0x49c8>
   159c0:	add	r3, sp, #44	; 0x2c
   159c4:	str	r3, [sp, #4]
   159c8:	ldr	r7, [r2]
   159cc:	ldr	r3, [r6]
   159d0:	mov	r8, r6
   159d4:	mov	r2, r7
   159d8:	cmp	r3, #0
   159dc:	blt	15a6c <__assert_fail@plt+0x4940>
   159e0:	bl	11090 <fcntl64@plt>
   159e4:	subs	r4, r0, #0
   159e8:	bge	159fc <__assert_fail@plt+0x48d0>
   159ec:	bl	11018 <__errno_location@plt>
   159f0:	ldr	r3, [r0]
   159f4:	cmp	r3, #22
   159f8:	beq	15a18 <__assert_fail@plt+0x48ec>
   159fc:	mov	r3, #1
   15a00:	str	r3, [r8]
   15a04:	mov	r0, r4
   15a08:	add	sp, sp, #12
   15a0c:	pop	{r4, r5, r6, r7, r8, lr}
   15a10:	add	sp, sp, #12
   15a14:	bx	lr
   15a18:	mov	r2, r7
   15a1c:	mov	r1, #0
   15a20:	mov	r0, r5
   15a24:	bl	11090 <fcntl64@plt>
   15a28:	subs	r4, r0, #0
   15a2c:	mvnge	r3, #0
   15a30:	strge	r3, [r6]
   15a34:	blt	15a04 <__assert_fail@plt+0x48d8>
   15a38:	mov	r1, #1
   15a3c:	mov	r0, r4
   15a40:	bl	11090 <fcntl64@plt>
   15a44:	subs	r2, r0, #0
   15a48:	bge	15a8c <__assert_fail@plt+0x4960>
   15a4c:	bl	11018 <__errno_location@plt>
   15a50:	mov	r5, r0
   15a54:	mov	r0, r4
   15a58:	ldr	r6, [r5]
   15a5c:	mvn	r4, #0
   15a60:	bl	11114 <close@plt>
   15a64:	str	r6, [r5]
   15a68:	b	15a04 <__assert_fail@plt+0x48d8>
   15a6c:	mov	r1, #0
   15a70:	bl	11090 <fcntl64@plt>
   15a74:	subs	r4, r0, #0
   15a78:	blt	15a04 <__assert_fail@plt+0x48d8>
   15a7c:	ldr	r3, [r6]
   15a80:	cmn	r3, #1
   15a84:	bne	15a04 <__assert_fail@plt+0x48d8>
   15a88:	b	15a38 <__assert_fail@plt+0x490c>
   15a8c:	orr	r2, r2, #1
   15a90:	mov	r1, #2
   15a94:	mov	r0, r4
   15a98:	bl	11090 <fcntl64@plt>
   15a9c:	cmn	r0, #1
   15aa0:	bne	15a04 <__assert_fail@plt+0x48d8>
   15aa4:	b	15a4c <__assert_fail@plt+0x4920>
   15aa8:	cmp	r1, #9
   15aac:	b	1599c <__assert_fail@plt+0x4870>
   15ab0:	movw	r2, #1031	; 0x407
   15ab4:	cmp	r1, r2
   15ab8:	bgt	15ad8 <__assert_fail@plt+0x49ac>
   15abc:	cmp	r1, r3
   15ac0:	movwlt	r3, #1025	; 0x401
   15ac4:	blt	15aec <__assert_fail@plt+0x49c0>
   15ac8:	ldr	r3, [sp, #4]
   15acc:	mov	r0, r5
   15ad0:	ldr	r2, [r3]
   15ad4:	b	159b4 <__assert_fail@plt+0x4888>
   15ad8:	movw	r3, #1033	; 0x409
   15adc:	cmp	r1, r3
   15ae0:	beq	15ac8 <__assert_fail@plt+0x499c>
   15ae4:	blt	159a0 <__assert_fail@plt+0x4874>
   15ae8:	movw	r3, #1034	; 0x40a
   15aec:	cmp	r1, r3
   15af0:	b	1599c <__assert_fail@plt+0x4870>
   15af4:	andeq	r8, r2, ip, lsr r3
   15af8:	b	15868 <__assert_fail@plt+0x473c>
   15afc:	cmp	r1, #0
   15b00:	orreq	r1, r1, #1
   15b04:	b	15894 <__assert_fail@plt+0x4768>
   15b08:	b	15814 <__assert_fail@plt+0x46e8>
   15b0c:	cmp	r2, #0
   15b10:	cmpne	r1, #0
   15b14:	moveq	r2, #1
   15b18:	moveq	r1, r2
   15b1c:	b	15cf8 <__assert_fail@plt+0x4bcc>
   15b20:	push	{r4, lr}
   15b24:	mov	r0, #14
   15b28:	bl	110b4 <nl_langinfo@plt>
   15b2c:	cmp	r0, #0
   15b30:	beq	15b48 <__assert_fail@plt+0x4a1c>
   15b34:	ldrb	r2, [r0]
   15b38:	ldr	r3, [pc, #16]	; 15b50 <__assert_fail@plt+0x4a24>
   15b3c:	cmp	r2, #0
   15b40:	moveq	r0, r3
   15b44:	pop	{r4, pc}
   15b48:	ldr	r0, [pc]	; 15b50 <__assert_fail@plt+0x4a24>
   15b4c:	pop	{r4, pc}
   15b50:	andeq	r6, r1, fp, lsl #31
   15b54:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15b58:	subs	r5, r0, #0
   15b5c:	mov	r7, r2
   15b60:	addeq	r5, sp, #4
   15b64:	mov	r6, r1
   15b68:	mov	r0, r5
   15b6c:	bl	10f70 <mbrtowc@plt>
   15b70:	cmp	r7, #0
   15b74:	cmnne	r0, #3
   15b78:	mov	r4, r0
   15b7c:	bls	15b98 <__assert_fail@plt+0x4a6c>
   15b80:	mov	r0, #0
   15b84:	bl	12ea4 <__assert_fail@plt+0x1d78>
   15b88:	cmp	r0, #0
   15b8c:	ldrbeq	r3, [r6]
   15b90:	moveq	r4, #1
   15b94:	streq	r3, [r5]
   15b98:	mov	r0, r4
   15b9c:	add	sp, sp, #12
   15ba0:	pop	{r4, r5, r6, r7, pc}
   15ba4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15ba8:	mov	r6, r0
   15bac:	mov	r8, r1
   15bb0:	mov	r5, r2
   15bb4:	mov	r4, r3
   15bb8:	mov	sl, #0
   15bbc:	bl	11018 <__errno_location@plt>
   15bc0:	mov	r9, r0
   15bc4:	mov	r1, r5
   15bc8:	mov	r0, r6
   15bcc:	str	sl, [r9]
   15bd0:	bl	10f88 <strcoll@plt>
   15bd4:	cmp	r0, #0
   15bd8:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   15bdc:	mov	r0, r6
   15be0:	bl	11000 <strlen@plt>
   15be4:	add	r7, r0, #1
   15be8:	mov	r0, r5
   15bec:	bl	11000 <strlen@plt>
   15bf0:	add	r0, r0, #1
   15bf4:	subs	r8, r8, r7
   15bf8:	add	r6, r6, r7
   15bfc:	add	r5, r5, r0
   15c00:	sub	r4, r4, r0
   15c04:	bne	15c18 <__assert_fail@plt+0x4aec>
   15c08:	adds	r0, r4, #0
   15c0c:	movne	r0, #1
   15c10:	rsb	r0, r0, #0
   15c14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15c18:	cmp	r4, #0
   15c1c:	bne	15bc4 <__assert_fail@plt+0x4a98>
   15c20:	mov	r0, #1
   15c24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15c28:	cmp	r1, r3
   15c2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15c30:	mov	r7, r0
   15c34:	mov	r4, r1
   15c38:	mov	r6, r2
   15c3c:	mov	r5, r3
   15c40:	bne	15c68 <__assert_fail@plt+0x4b3c>
   15c44:	mov	r2, r1
   15c48:	mov	r1, r6
   15c4c:	bl	10eec <memcmp@plt>
   15c50:	subs	r8, r0, #0
   15c54:	bne	15c68 <__assert_fail@plt+0x4b3c>
   15c58:	bl	11018 <__errno_location@plt>
   15c5c:	str	r8, [r0]
   15c60:	mov	r0, r8
   15c64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15c68:	ldrb	sl, [r7, r4]
   15c6c:	mov	r3, #0
   15c70:	mov	r2, r6
   15c74:	add	r1, r4, #1
   15c78:	mov	r0, r7
   15c7c:	ldrb	r9, [r6, r5]
   15c80:	strb	r3, [r7, r4]
   15c84:	strb	r3, [r6, r5]
   15c88:	add	r3, r5, #1
   15c8c:	bl	15ba4 <__assert_fail@plt+0x4a78>
   15c90:	mov	r8, r0
   15c94:	strb	sl, [r7, r4]
   15c98:	strb	r9, [r6, r5]
   15c9c:	b	15c60 <__assert_fail@plt+0x4b34>
   15ca0:	cmp	r1, r3
   15ca4:	push	{r4, r5, r6, r7, r8, lr}
   15ca8:	mov	r8, r0
   15cac:	mov	r4, r1
   15cb0:	mov	r6, r2
   15cb4:	mov	r7, r3
   15cb8:	bne	15cd0 <__assert_fail@plt+0x4ba4>
   15cbc:	mov	r2, r1
   15cc0:	mov	r1, r6
   15cc4:	bl	10eec <memcmp@plt>
   15cc8:	subs	r5, r0, #0
   15ccc:	beq	15ce8 <__assert_fail@plt+0x4bbc>
   15cd0:	mov	r3, r7
   15cd4:	mov	r2, r6
   15cd8:	mov	r1, r4
   15cdc:	mov	r0, r8
   15ce0:	pop	{r4, r5, r6, r7, r8, lr}
   15ce4:	b	15ba4 <__assert_fail@plt+0x4a78>
   15ce8:	bl	11018 <__errno_location@plt>
   15cec:	str	r5, [r0]
   15cf0:	mov	r0, r5
   15cf4:	pop	{r4, r5, r6, r7, r8, pc}
   15cf8:	umull	r2, r3, r1, r2
   15cfc:	cmp	r3, #0
   15d00:	bne	15d0c <__assert_fail@plt+0x4be0>
   15d04:	mov	r1, r2
   15d08:	b	15894 <__assert_fail@plt+0x4768>
   15d0c:	push	{r4, lr}
   15d10:	bl	11018 <__errno_location@plt>
   15d14:	mov	r3, #12
   15d18:	str	r3, [r0]
   15d1c:	mov	r0, #0
   15d20:	pop	{r4, pc}
   15d24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15d28:	mov	r7, r0
   15d2c:	ldr	r6, [pc, #72]	; 15d7c <__assert_fail@plt+0x4c50>
   15d30:	ldr	r5, [pc, #72]	; 15d80 <__assert_fail@plt+0x4c54>
   15d34:	add	r6, pc, r6
   15d38:	add	r5, pc, r5
   15d3c:	sub	r6, r6, r5
   15d40:	mov	r8, r1
   15d44:	mov	r9, r2
   15d48:	bl	10e48 <fdopen@plt-0x20>
   15d4c:	asrs	r6, r6, #2
   15d50:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15d54:	mov	r4, #0
   15d58:	add	r4, r4, #1
   15d5c:	ldr	r3, [r5], #4
   15d60:	mov	r2, r9
   15d64:	mov	r1, r8
   15d68:	mov	r0, r7
   15d6c:	blx	r3
   15d70:	cmp	r6, r4
   15d74:	bne	15d58 <__assert_fail@plt+0x4c2c>
   15d78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15d7c:	ldrdeq	r2, [r1], -r8
   15d80:	ldrdeq	r2, [r1], -r0
   15d84:	bx	lr
   15d88:	ldr	r3, [pc, #12]	; 15d9c <__assert_fail@plt+0x4c70>
   15d8c:	mov	r1, #0
   15d90:	add	r3, pc, r3
   15d94:	ldr	r2, [r3]
   15d98:	b	11024 <__cxa_atexit@plt>
   15d9c:	andeq	r2, r1, ip, ror #6

Disassembly of section .fini:

00015da0 <.fini>:
   15da0:	push	{r3, lr}
   15da4:	pop	{r3, pc}
