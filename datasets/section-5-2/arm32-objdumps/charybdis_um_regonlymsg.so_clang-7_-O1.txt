
../repos/charybdis/modules/.libs/um_regonlymsg.so:     file format elf32-littlearm


Disassembly of section .init:

000004d0 <_init>:
 4d0:	push	{r3, lr}
 4d4:	bl	550 <call_weak_fn>
 4d8:	pop	{r3, pc}

Disassembly of section .plt:

000004dc <.plt>:
 4dc:	push	{lr}		; (str lr, [sp, #-4]!)
 4e0:	ldr	lr, [pc, #4]	; 4ec <.plt+0x10>
 4e4:	add	lr, pc, lr
 4e8:	ldr	pc, [lr, #8]!
 4ec:	.word	0x00010b14

000004f0 <__cxa_finalize@plt>:
 4f0:	add	ip, pc, #0, 12
 4f4:	add	ip, ip, #16, 20	; 0x10000
 4f8:	ldr	pc, [ip, #2836]!	; 0xb14

000004fc <ierror@plt>:
 4fc:	add	ip, pc, #0, 12
 500:	add	ip, ip, #16, 20	; 0x10000
 504:	ldr	pc, [ip, #2828]!	; 0xb0c

00000508 <find_umode_slot@plt>:
 508:	add	ip, pc, #0, 12
 50c:	add	ip, ip, #16, 20	; 0x10000
 510:	ldr	pc, [ip, #2820]!	; 0xb04

00000514 <__gmon_start__@plt>:
 514:	add	ip, pc, #0, 12
 518:	add	ip, ip, #16, 20	; 0x10000
 51c:	ldr	pc, [ip, #2812]!	; 0xafc

00000520 <sendto_one_numeric@plt>:
 520:	add	ip, pc, #0, 12
 524:	add	ip, ip, #16, 20	; 0x10000
 528:	ldr	pc, [ip, #2804]!	; 0xaf4

0000052c <snprintf@plt>:
 52c:	add	ip, pc, #0, 12
 530:	add	ip, ip, #16, 20	; 0x10000
 534:	ldr	pc, [ip, #2796]!	; 0xaec

00000538 <__assert_fail@plt>:
 538:	add	ip, pc, #0, 12
 53c:	add	ip, ip, #16, 20	; 0x10000
 540:	ldr	pc, [ip, #2788]!	; 0xae4

00000544 <construct_umodebuf@plt>:
 544:	add	ip, pc, #0, 12
 548:	add	ip, ip, #16, 20	; 0x10000
 54c:	ldr	pc, [ip, #2780]!	; 0xadc

Disassembly of section .text:

00000550 <call_weak_fn>:
 550:	ldr	r3, [pc, #20]	; 56c <call_weak_fn+0x1c>
 554:	ldr	r2, [pc, #20]	; 570 <call_weak_fn+0x20>
 558:	add	r3, pc, r3
 55c:	ldr	r2, [r3, r2]
 560:	cmp	r2, #0
 564:	bxeq	lr
 568:	b	514 <__gmon_start__@plt>
 56c:	.word	0x00010aa0
 570:	.word	0x00000038

00000574 <deregister_tm_clones>:
 574:	ldr	r0, [pc, #44]	; 5a8 <deregister_tm_clones+0x34>
 578:	ldr	r3, [pc, #44]	; 5ac <deregister_tm_clones+0x38>
 57c:	add	r0, pc, r0
 580:	add	r3, pc, r3
 584:	cmp	r3, r0
 588:	ldr	r3, [pc, #32]	; 5b0 <deregister_tm_clones+0x3c>
 58c:	add	r3, pc, r3
 590:	bxeq	lr
 594:	ldr	r2, [pc, #24]	; 5b4 <deregister_tm_clones+0x40>
 598:	ldr	r3, [r3, r2]
 59c:	cmp	r3, #0
 5a0:	bxeq	lr
 5a4:	bx	r3
 5a8:	.word	0x00010b0c
 5ac:	.word	0x00010b08
 5b0:	.word	0x00010a6c
 5b4:	.word	0x00000030

000005b8 <register_tm_clones>:
 5b8:	ldr	r0, [pc, #56]	; 5f8 <register_tm_clones+0x40>
 5bc:	ldr	r3, [pc, #56]	; 5fc <register_tm_clones+0x44>
 5c0:	add	r0, pc, r0
 5c4:	add	r3, pc, r3
 5c8:	sub	r1, r3, r0
 5cc:	ldr	r3, [pc, #44]	; 600 <register_tm_clones+0x48>
 5d0:	asr	r1, r1, #2
 5d4:	add	r3, pc, r3
 5d8:	add	r1, r1, r1, lsr #31
 5dc:	asrs	r1, r1, #1
 5e0:	bxeq	lr
 5e4:	ldr	r2, [pc, #24]	; 604 <register_tm_clones+0x4c>
 5e8:	ldr	r3, [r3, r2]
 5ec:	cmp	r3, #0
 5f0:	bxeq	lr
 5f4:	bx	r3
 5f8:	.word	0x00010ac8
 5fc:	.word	0x00010ac4
 600:	.word	0x00010a24
 604:	.word	0x0000003c

00000608 <__do_global_dtors_aux>:
 608:	ldr	r3, [pc, #76]	; 65c <__do_global_dtors_aux+0x54>
 60c:	ldr	r2, [pc, #76]	; 660 <__do_global_dtors_aux+0x58>
 610:	add	r3, pc, r3
 614:	add	r2, pc, r2
 618:	ldrb	r3, [r3]
 61c:	cmp	r3, #0
 620:	bxne	lr
 624:	ldr	r3, [pc, #56]	; 664 <__do_global_dtors_aux+0x5c>
 628:	push	{r4, lr}
 62c:	ldr	r3, [r2, r3]
 630:	cmp	r3, #0
 634:	beq	644 <__do_global_dtors_aux+0x3c>
 638:	ldr	r3, [pc, #40]	; 668 <__do_global_dtors_aux+0x60>
 63c:	ldr	r0, [pc, r3]
 640:	bl	4f0 <__cxa_finalize@plt>
 644:	bl	574 <deregister_tm_clones>
 648:	ldr	r3, [pc, #28]	; 66c <__do_global_dtors_aux+0x64>
 64c:	mov	r2, #1
 650:	add	r3, pc, r3
 654:	strb	r2, [r3]
 658:	pop	{r4, pc}
 65c:	.word	0x00010a78
 660:	.word	0x000109e4
 664:	.word	0x0000002c
 668:	.word	0x000109fc
 66c:	.word	0x00010a38

00000670 <frame_dummy>:
 670:	b	5b8 <register_tm_clones>

00000674 <um_regonlymsg_modinit>:
 674:	push	{r4, sl, fp, lr}
 678:	add	fp, sp, #8
 67c:	bl	508 <find_umode_slot@plt>
 680:	ldr	r4, [pc, #44]	; 6b4 <um_regonlymsg_modinit+0x40>
 684:	ldr	r4, [pc, r4]
 688:	str	r0, [r4, #328]	; 0x148
 68c:	bl	544 <construct_umodebuf@plt>
 690:	ldr	r1, [r4, #328]	; 0x148
 694:	mov	r0, #0
 698:	cmp	r1, #0
 69c:	popne	{r4, sl, fp, pc}
 6a0:	ldr	r0, [pc, #16]	; 6b8 <um_regonlymsg_modinit+0x44>
 6a4:	add	r0, pc, r0
 6a8:	bl	4fc <ierror@plt>
 6ac:	mvn	r0, #0
 6b0:	pop	{r4, sl, fp, pc}
 6b4:	.word	0x000109a8
 6b8:	.word	0x0000028f

000006bc <um_regonlymsg_moddeinit>:
 6bc:	ldr	r0, [pc, #12]	; 6d0 <um_regonlymsg_moddeinit+0x14>
 6c0:	ldr	r0, [pc, r0]
 6c4:	mov	r1, #0
 6c8:	str	r1, [r0, #328]	; 0x148
 6cc:	b	544 <construct_umodebuf@plt>
 6d0:	.word	0x0001096c

000006d4 <h_hdl_invite>:
 6d4:	push	{r4, r5, fp, lr}
 6d8:	add	fp, sp, #8
 6dc:	mov	r4, r0
 6e0:	ldr	r0, [r0, #16]
 6e4:	cmp	r0, #0
 6e8:	beq	6f0 <h_hdl_invite+0x1c>
 6ec:	pop	{r4, r5, fp, pc}
 6f0:	ldr	r5, [r4, #12]
 6f4:	ldr	r0, [r4]
 6f8:	mov	r1, r5
 6fc:	bl	7a4 <allow_message>
 700:	cmp	r0, #0
 704:	popne	{r4, r5, fp, pc}
 708:	add	r3, r5, #88	; 0x58
 70c:	ldr	r5, [pc, #36]	; 738 <h_hdl_invite+0x64>
 710:	add	r5, pc, r5
 714:	ldr	r2, [pc, #32]	; 73c <h_hdl_invite+0x68>
 718:	add	r2, pc, r2
 71c:	mov	r0, r5
 720:	mov	r1, #512	; 0x200
 724:	bl	52c <snprintf@plt>
 728:	movw	r0, #486	; 0x1e6
 72c:	str	r0, [r4, #16]
 730:	str	r5, [r4, #28]
 734:	pop	{r4, r5, fp, pc}
 738:	.word	0x00010979
 73c:	.word	0x00000278

00000740 <h_hdl_privmsg_user>:
 740:	push	{r4, r5, r6, sl, fp, lr}
 744:	add	fp, sp, #16
 748:	mov	r4, r0
 74c:	ldr	r0, [r0, #16]
 750:	cmp	r0, #0
 754:	bne	79c <h_hdl_privmsg_user+0x5c>
 758:	ldmib	r4, {r5, r6}
 75c:	mov	r0, r5
 760:	mov	r1, r6
 764:	bl	7a4 <allow_message>
 768:	cmp	r0, #0
 76c:	bne	79c <h_hdl_privmsg_user+0x5c>
 770:	ldr	r0, [r4]
 774:	cmp	r0, #0
 778:	popeq	{r4, r5, r6, sl, fp, pc}
 77c:	add	r3, r6, #88	; 0x58
 780:	movw	r6, #486	; 0x1e6
 784:	ldr	r2, [pc, #20]	; 7a0 <h_hdl_privmsg_user+0x60>
 788:	add	r2, pc, r2
 78c:	mov	r0, r5
 790:	movw	r1, #486	; 0x1e6
 794:	bl	520 <sendto_one_numeric@plt>
 798:	str	r6, [r4, #16]
 79c:	pop	{r4, r5, r6, sl, fp, pc}
 7a0:	.word	0x00000208

000007a4 <allow_message>:
 7a4:	push	{r4, r5, fp, lr}
 7a8:	add	fp, sp, #8
 7ac:	mov	r5, r0
 7b0:	ldrb	r0, [r1, #65]	; 0x41
 7b4:	mov	r4, #1
 7b8:	tst	r0, #32
 7bc:	beq	7f8 <allow_message+0x54>
 7c0:	ldrh	r0, [r1, #80]	; 0x50
 7c4:	cmp	r0, #64	; 0x40
 7c8:	bne	7f8 <allow_message+0x54>
 7cc:	ldr	r0, [r1, #56]	; 0x38
 7d0:	ldr	r2, [pc, #100]	; 83c <allow_message+0x98>
 7d4:	ldr	r2, [pc, r2]
 7d8:	ldr	r2, [r2, #328]	; 0x148
 7dc:	and	r0, r2, r0
 7e0:	cmp	r0, r2
 7e4:	bne	7f8 <allow_message+0x54>
 7e8:	ldrh	r0, [r5, #80]	; 0x50
 7ec:	cmp	r0, #32
 7f0:	cmpne	r5, r1
 7f4:	bne	800 <allow_message+0x5c>
 7f8:	mov	r0, r4
 7fc:	pop	{r4, r5, fp, pc}
 800:	ldr	r0, [r5, #56]	; 0x38
 804:	ands	r0, r0, #4096	; 0x1000
 808:	bne	7f8 <allow_message+0x54>
 80c:	ldr	r0, [r1, #432]	; 0x1b0
 810:	add	r1, r0, #316	; 0x13c
 814:	mov	r0, r5
 818:	bl	840 <rb_dlinkFind>
 81c:	cmp	r0, #0
 820:	bne	7f8 <allow_message+0x54>
 824:	ldr	r0, [r5, #24]
 828:	ldrb	r4, [r0, #40]	; 0x28
 82c:	cmp	r4, #0
 830:	movwne	r4, #1
 834:	mov	r0, r4
 838:	pop	{r4, r5, fp, pc}
 83c:	.word	0x00010858

00000840 <rb_dlinkFind>:
 840:	push	{fp, lr}
 844:	mov	fp, sp
 848:	cmp	r1, #0
 84c:	beq	894 <rb_dlinkFind+0x54>
 850:	cmp	r0, #0
 854:	beq	8b4 <rb_dlinkFind+0x74>
 858:	ldr	r2, [r1]
 85c:	mov	r1, #0
 860:	cmp	r2, #0
 864:	bne	87c <rb_dlinkFind+0x3c>
 868:	mov	r0, r1
 86c:	pop	{fp, pc}
 870:	ldr	r2, [r2, #8]
 874:	cmp	r2, #0
 878:	beq	868 <rb_dlinkFind+0x28>
 87c:	ldr	r3, [r2]
 880:	cmp	r3, r0
 884:	bne	870 <rb_dlinkFind+0x30>
 888:	mov	r1, r2
 88c:	mov	r0, r1
 890:	pop	{fp, pc}
 894:	ldr	r0, [pc, #56]	; 8d4 <rb_dlinkFind+0x94>
 898:	add	r0, pc, r0
 89c:	ldr	r1, [pc, #52]	; 8d8 <rb_dlinkFind+0x98>
 8a0:	add	r1, pc, r1
 8a4:	ldr	r3, [pc, #48]	; 8dc <rb_dlinkFind+0x9c>
 8a8:	add	r3, pc, r3
 8ac:	movw	r2, #310	; 0x136
 8b0:	bl	538 <__assert_fail@plt>
 8b4:	ldr	r0, [pc, #36]	; 8e0 <rb_dlinkFind+0xa0>
 8b8:	add	r0, pc, r0
 8bc:	ldr	r1, [pc, #32]	; 8e4 <rb_dlinkFind+0xa4>
 8c0:	add	r1, pc, r1
 8c4:	ldr	r3, [pc, #28]	; 8e8 <rb_dlinkFind+0xa8>
 8c8:	add	r3, pc, r3
 8cc:	movw	r2, #311	; 0x137
 8d0:	bl	538 <__assert_fail@plt>
 8d4:	.word	0x0000012f
 8d8:	.word	0x00000134
 8dc:	.word	0x00000148
 8e0:	.word	0x0000016d
 8e4:	.word	0x00000114
 8e8:	.word	0x00000128

Disassembly of section .fini:

000008ec <_fini>:
 8ec:	push	{r3, lr}
 8f0:	pop	{r3, pc}
