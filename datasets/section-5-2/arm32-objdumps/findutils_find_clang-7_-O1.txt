
../repos/findutils/find/find:     file format elf32-littlearm


Disassembly of section .init:

00012410 <.init>:
   12410:	push	{r3, lr}
   12414:	bl	12c04 <__assert_fail@plt+0x48>
   12418:	pop	{r3, pc}

Disassembly of section .plt:

0001241c <pthread_mutex_unlock@plt-0x14>:
   1241c:	push	{lr}		; (str lr, [sp, #-4]!)
   12420:	ldr	lr, [pc, #4]	; 1242c <pthread_mutex_unlock@plt-0x4>
   12424:	add	lr, pc, lr
   12428:	ldr	pc, [lr, #8]!
   1242c:	ldrdeq	r2, [r4], -r4

00012430 <pthread_mutex_unlock@plt>:
   12430:	add	ip, pc, #0, 12
   12434:	add	ip, ip, #270336	; 0x42000
   12438:	ldr	pc, [ip, #3028]!	; 0xbd4

0001243c <fdopen@plt>:
   1243c:	add	ip, pc, #0, 12
   12440:	add	ip, ip, #270336	; 0x42000
   12444:	ldr	pc, [ip, #3020]!	; 0xbcc

00012448 <fstatfs64@plt>:
   12448:	add	ip, pc, #0, 12
   1244c:	add	ip, ip, #270336	; 0x42000
   12450:	ldr	pc, [ip, #3012]!	; 0xbc4

00012454 <calloc@plt>:
   12454:	add	ip, pc, #0, 12
   12458:	add	ip, ip, #270336	; 0x42000
   1245c:	ldr	pc, [ip, #3004]!	; 0xbbc

00012460 <endgrent@plt>:
   12460:	add	ip, pc, #0, 12
   12464:	add	ip, ip, #270336	; 0x42000
   12468:	ldr	pc, [ip, #2996]!	; 0xbb4

0001246c <wctype@plt>:
   1246c:	add	ip, pc, #0, 12
   12470:	add	ip, ip, #270336	; 0x42000
   12474:	ldr	pc, [ip, #2988]!	; 0xbac

00012478 <gnu_dev_major@plt>:
   12478:	add	ip, pc, #0, 12
   1247c:	add	ip, ip, #270336	; 0x42000
   12480:	ldr	pc, [ip, #2980]!	; 0xba4

00012484 <raise@plt>:
   12484:	add	ip, pc, #0, 12
   12488:	add	ip, ip, #270336	; 0x42000
   1248c:	ldr	pc, [ip, #2972]!	; 0xb9c

00012490 <wcrtomb@plt>:
   12490:	add	ip, pc, #0, 12
   12494:	add	ip, ip, #270336	; 0x42000
   12498:	ldr	pc, [ip, #2964]!	; 0xb94

0001249c <gmtime_r@plt>:
   1249c:	add	ip, pc, #0, 12
   124a0:	add	ip, ip, #270336	; 0x42000
   124a4:	ldr	pc, [ip, #2956]!	; 0xb8c

000124a8 <getpwnam@plt>:
   124a8:	add	ip, pc, #0, 12
   124ac:	add	ip, ip, #270336	; 0x42000
   124b0:	ldr	pc, [ip, #2948]!	; 0xb84

000124b4 <is_selinux_enabled@plt>:
   124b4:	add	ip, pc, #0, 12
   124b8:	add	ip, ip, #270336	; 0x42000
   124bc:	ldr	pc, [ip, #2940]!	; 0xb7c

000124c0 <iswctype@plt>:
   124c0:	add	ip, pc, #0, 12
   124c4:	add	ip, ip, #270336	; 0x42000
   124c8:	ldr	pc, [ip, #2932]!	; 0xb74

000124cc <strcmp@plt>:
   124cc:	add	ip, pc, #0, 12
   124d0:	add	ip, ip, #270336	; 0x42000
   124d4:	ldr	pc, [ip, #2924]!	; 0xb6c

000124d8 <strtol@plt>:
   124d8:	add	ip, pc, #0, 12
   124dc:	add	ip, ip, #270336	; 0x42000
   124e0:	ldr	pc, [ip, #2916]!	; 0xb64

000124e4 <getpwuid@plt>:
   124e4:	add	ip, pc, #0, 12
   124e8:	add	ip, ip, #270336	; 0x42000
   124ec:	ldr	pc, [ip, #2908]!	; 0xb5c

000124f0 <gnu_dev_makedev@plt>:
   124f0:	add	ip, pc, #0, 12
   124f4:	add	ip, ip, #270336	; 0x42000
   124f8:	ldr	pc, [ip, #2900]!	; 0xb54

000124fc <printf@plt>:
   124fc:	add	ip, pc, #0, 12
   12500:	add	ip, ip, #270336	; 0x42000
   12504:	ldr	pc, [ip, #2892]!	; 0xb4c

00012508 <gnu_dev_minor@plt>:
   12508:	add	ip, pc, #0, 12
   1250c:	add	ip, ip, #270336	; 0x42000
   12510:	ldr	pc, [ip, #2884]!	; 0xb44

00012514 <pthread_mutex_destroy@plt>:
   12514:	add	ip, pc, #0, 12
   12518:	add	ip, ip, #270336	; 0x42000
   1251c:	ldr	pc, [ip, #2876]!	; 0xb3c

00012520 <mktime@plt>:
   12520:	add	ip, pc, #0, 12
   12524:	add	ip, ip, #270336	; 0x42000
   12528:	ldr	pc, [ip, #2868]!	; 0xb34

0001252c <fflush@plt>:
   1252c:	add	ip, pc, #0, 12
   12530:	add	ip, ip, #270336	; 0x42000
   12534:	ldr	pc, [ip, #2860]!	; 0xb2c

00012538 <unlinkat@plt>:
   12538:	add	ip, pc, #0, 12
   1253c:	add	ip, ip, #270336	; 0x42000
   12540:	ldr	pc, [ip, #2852]!	; 0xb24

00012544 <wcwidth@plt>:
   12544:	add	ip, pc, #0, 12
   12548:	add	ip, ip, #270336	; 0x42000
   1254c:	ldr	pc, [ip, #2844]!	; 0xb1c

00012550 <lsetfilecon@plt>:
   12550:	add	ip, pc, #0, 12
   12554:	add	ip, ip, #270336	; 0x42000
   12558:	ldr	pc, [ip, #2836]!	; 0xb14

0001255c <memmove@plt>:
   1255c:	add	ip, pc, #0, 12
   12560:	add	ip, ip, #270336	; 0x42000
   12564:	ldr	pc, [ip, #2828]!	; 0xb0c

00012568 <free@plt>:
   12568:	add	ip, pc, #0, 12
   1256c:	add	ip, ip, #270336	; 0x42000
   12570:	ldr	pc, [ip, #2820]!	; 0xb04

00012574 <pthread_mutex_lock@plt>:
   12574:	add	ip, pc, #0, 12
   12578:	add	ip, ip, #270336	; 0x42000
   1257c:	ldr	pc, [ip, #2812]!	; 0xafc

00012580 <faccessat@plt>:
   12580:	add	ip, pc, #0, 12
   12584:	add	ip, ip, #270336	; 0x42000
   12588:	ldr	pc, [ip, #2804]!	; 0xaf4

0001258c <ferror@plt>:
   1258c:	add	ip, pc, #0, 12
   12590:	add	ip, ip, #270336	; 0x42000
   12594:	ldr	pc, [ip, #2796]!	; 0xaec

00012598 <thrd_exit@plt>:
   12598:	add	ip, pc, #0, 12
   1259c:	add	ip, ip, #270336	; 0x42000
   125a0:	ldr	pc, [ip, #2788]!	; 0xae4

000125a4 <strndup@plt>:
   125a4:	add	ip, pc, #0, 12
   125a8:	add	ip, ip, #270336	; 0x42000
   125ac:	ldr	pc, [ip, #2780]!	; 0xadc

000125b0 <clock_gettime@plt>:
   125b0:	add	ip, pc, #0, 12
   125b4:	add	ip, ip, #270336	; 0x42000
   125b8:	ldr	pc, [ip, #2772]!	; 0xad4

000125bc <_exit@plt>:
   125bc:	add	ip, pc, #0, 12
   125c0:	add	ip, ip, #270336	; 0x42000
   125c4:	ldr	pc, [ip, #2764]!	; 0xacc

000125c8 <memcpy@plt>:
   125c8:	add	ip, pc, #0, 12
   125cc:	add	ip, ip, #270336	; 0x42000
   125d0:	ldr	pc, [ip, #2756]!	; 0xac4

000125d4 <execvp@plt>:
   125d4:	add	ip, pc, #0, 12
   125d8:	add	ip, ip, #270336	; 0x42000
   125dc:	ldr	pc, [ip, #2748]!	; 0xabc

000125e0 <tolower@plt>:
   125e0:	add	ip, pc, #0, 12
   125e4:	add	ip, ip, #270336	; 0x42000
   125e8:	ldr	pc, [ip, #2740]!	; 0xab4

000125ec <pthread_mutex_init@plt>:
   125ec:	add	ip, pc, #0, 12
   125f0:	add	ip, ip, #270336	; 0x42000
   125f4:	ldr	pc, [ip, #2732]!	; 0xaac

000125f8 <towlower@plt>:
   125f8:	add	ip, pc, #0, 12
   125fc:	add	ip, ip, #270336	; 0x42000
   12600:	ldr	pc, [ip, #2724]!	; 0xaa4

00012604 <mbsinit@plt>:
   12604:	add	ip, pc, #0, 12
   12608:	add	ip, ip, #270336	; 0x42000
   1260c:	ldr	pc, [ip, #2716]!	; 0xa9c

00012610 <signal@plt>:
   12610:	add	ip, pc, #0, 12
   12614:	add	ip, ip, #270336	; 0x42000
   12618:	ldr	pc, [ip, #2708]!	; 0xa94

0001261c <time@plt>:
   1261c:	add	ip, pc, #0, 12
   12620:	add	ip, ip, #270336	; 0x42000
   12624:	ldr	pc, [ip, #2700]!	; 0xa8c

00012628 <memcmp@plt>:
   12628:	add	ip, pc, #0, 12
   1262c:	add	ip, ip, #270336	; 0x42000
   12630:	ldr	pc, [ip, #2692]!	; 0xa84

00012634 <uname@plt>:
   12634:	add	ip, pc, #0, 12
   12638:	add	ip, ip, #270336	; 0x42000
   1263c:	ldr	pc, [ip, #2684]!	; 0xa7c

00012640 <ctime@plt>:
   12640:	add	ip, pc, #0, 12
   12644:	add	ip, ip, #270336	; 0x42000
   12648:	ldr	pc, [ip, #2676]!	; 0xa74

0001264c <dcgettext@plt>:
   1264c:	add	ip, pc, #0, 12
   12650:	add	ip, ip, #270336	; 0x42000
   12654:	ldr	pc, [ip, #2668]!	; 0xa6c

00012658 <strdup@plt>:
   12658:	add	ip, pc, #0, 12
   1265c:	add	ip, ip, #270336	; 0x42000
   12660:	ldr	pc, [ip, #2660]!	; 0xa64

00012664 <sysconf@plt>:
   12664:	add	ip, pc, #0, 12
   12668:	add	ip, ip, #270336	; 0x42000
   1266c:	ldr	pc, [ip, #2652]!	; 0xa5c

00012670 <getrlimit64@plt>:
   12670:	add	ip, pc, #0, 12
   12674:	add	ip, ip, #270336	; 0x42000
   12678:	ldr	pc, [ip, #2644]!	; 0xa54

0001267c <realloc@plt>:
   1267c:	add	ip, pc, #0, 12
   12680:	add	ip, ip, #270336	; 0x42000
   12684:	ldr	pc, [ip, #2636]!	; 0xa4c

00012688 <fgetfilecon@plt>:
   12688:	add	ip, pc, #0, 12
   1268c:	add	ip, ip, #270336	; 0x42000
   12690:	ldr	pc, [ip, #2628]!	; 0xa44

00012694 <localtime_r@plt>:
   12694:	add	ip, pc, #0, 12
   12698:	add	ip, ip, #270336	; 0x42000
   1269c:	ldr	pc, [ip, #2620]!	; 0xa3c

000126a0 <textdomain@plt>:
   126a0:	add	ip, pc, #0, 12
   126a4:	add	ip, ip, #270336	; 0x42000
   126a8:	ldr	pc, [ip, #2612]!	; 0xa34

000126ac <iswcntrl@plt>:
   126ac:	add	ip, pc, #0, 12
   126b0:	add	ip, ip, #270336	; 0x42000
   126b4:	ldr	pc, [ip, #2604]!	; 0xa2c

000126b8 <chdir@plt>:
   126b8:	add	ip, pc, #0, 12
   126bc:	add	ip, ip, #270336	; 0x42000
   126c0:	ldr	pc, [ip, #2596]!	; 0xa24

000126c4 <__fxstatat64@plt>:
   126c4:	add	ip, pc, #0, 12
   126c8:	add	ip, ip, #270336	; 0x42000
   126cc:	ldr	pc, [ip, #2588]!	; 0xa1c

000126d0 <iswprint@plt>:
   126d0:	add	ip, pc, #0, 12
   126d4:	add	ip, ip, #270336	; 0x42000
   126d8:	ldr	pc, [ip, #2580]!	; 0xa14

000126dc <tzset@plt>:
   126dc:	add	ip, pc, #0, 12
   126e0:	add	ip, ip, #270336	; 0x42000
   126e4:	ldr	pc, [ip, #2572]!	; 0xa0c

000126e8 <poll@plt>:
   126e8:	add	ip, pc, #0, 12
   126ec:	add	ip, ip, #270336	; 0x42000
   126f0:	ldr	pc, [ip, #2564]!	; 0xa04

000126f4 <__fxstat64@plt>:
   126f4:	add	ip, pc, #0, 12
   126f8:	add	ip, ip, #270336	; 0x42000
   126fc:	ldr	pc, [ip, #2556]!	; 0x9fc

00012700 <fwrite@plt>:
   12700:	add	ip, pc, #0, 12
   12704:	add	ip, ip, #270336	; 0x42000
   12708:	ldr	pc, [ip, #2548]!	; 0x9f4

0001270c <strcat@plt>:
   1270c:	add	ip, pc, #0, 12
   12710:	add	ip, ip, #270336	; 0x42000
   12714:	ldr	pc, [ip, #2540]!	; 0x9ec

00012718 <lseek64@plt>:
   12718:	add	ip, pc, #0, 12
   1271c:	add	ip, ip, #270336	; 0x42000
   12720:	ldr	pc, [ip, #2532]!	; 0x9e4

00012724 <waitpid@plt>:
   12724:	add	ip, pc, #0, 12
   12728:	add	ip, ip, #270336	; 0x42000
   1272c:	ldr	pc, [ip, #2524]!	; 0x9dc

00012730 <__ctype_get_mb_cur_max@plt>:
   12730:	add	ip, pc, #0, 12
   12734:	add	ip, ip, #270336	; 0x42000
   12738:	ldr	pc, [ip, #2516]!	; 0x9d4

0001273c <hasmntopt@plt>:
   1273c:	add	ip, pc, #0, 12
   12740:	add	ip, ip, #270336	; 0x42000
   12744:	ldr	pc, [ip, #2508]!	; 0x9cc

00012748 <strcpy@plt>:
   12748:	add	ip, pc, #0, 12
   1274c:	add	ip, ip, #270336	; 0x42000
   12750:	ldr	pc, [ip, #2500]!	; 0x9c4

00012754 <gettimeofday@plt>:
   12754:	add	ip, pc, #0, 12
   12758:	add	ip, ip, #270336	; 0x42000
   1275c:	ldr	pc, [ip, #2492]!	; 0x9bc

00012760 <__fpending@plt>:
   12760:	add	ip, pc, #0, 12
   12764:	add	ip, ip, #270336	; 0x42000
   12768:	ldr	pc, [ip, #2484]!	; 0x9b4

0001276c <ferror_unlocked@plt>:
   1276c:	add	ip, pc, #0, 12
   12770:	add	ip, ip, #270336	; 0x42000
   12774:	ldr	pc, [ip, #2476]!	; 0x9ac

00012778 <mbrtowc@plt>:
   12778:	add	ip, pc, #0, 12
   1277c:	add	ip, ip, #270336	; 0x42000
   12780:	ldr	pc, [ip, #2468]!	; 0x9a4

00012784 <strtok_r@plt>:
   12784:	add	ip, pc, #0, 12
   12788:	add	ip, ip, #270336	; 0x42000
   1278c:	ldr	pc, [ip, #2460]!	; 0x99c

00012790 <error@plt>:
   12790:	add	ip, pc, #0, 12
   12794:	add	ip, ip, #270336	; 0x42000
   12798:	ldr	pc, [ip, #2452]!	; 0x994

0001279c <getmntent@plt>:
   1279c:	add	ip, pc, #0, 12
   127a0:	add	ip, ip, #270336	; 0x42000
   127a4:	ldr	pc, [ip, #2444]!	; 0x98c

000127a8 <opendir@plt>:
   127a8:	add	ip, pc, #0, 12
   127ac:	add	ip, ip, #270336	; 0x42000
   127b0:	ldr	pc, [ip, #2436]!	; 0x984

000127b4 <fnmatch@plt>:
   127b4:	add	ip, pc, #0, 12
   127b8:	add	ip, ip, #270336	; 0x42000
   127bc:	ldr	pc, [ip, #2428]!	; 0x97c

000127c0 <open64@plt>:
   127c0:	add	ip, pc, #0, 12
   127c4:	add	ip, ip, #270336	; 0x42000
   127c8:	ldr	pc, [ip, #2420]!	; 0x974

000127cc <getenv@plt>:
   127cc:	add	ip, pc, #0, 12
   127d0:	add	ip, ip, #270336	; 0x42000
   127d4:	ldr	pc, [ip, #2412]!	; 0x96c

000127d8 <lgetfilecon@plt>:
   127d8:	add	ip, pc, #0, 12
   127dc:	add	ip, ip, #270336	; 0x42000
   127e0:	ldr	pc, [ip, #2404]!	; 0x964

000127e4 <malloc@plt>:
   127e4:	add	ip, pc, #0, 12
   127e8:	add	ip, ip, #270336	; 0x42000
   127ec:	ldr	pc, [ip, #2396]!	; 0x95c

000127f0 <__libc_start_main@plt>:
   127f0:	add	ip, pc, #0, 12
   127f4:	add	ip, ip, #270336	; 0x42000
   127f8:	ldr	pc, [ip, #2388]!	; 0x954

000127fc <readlinkat@plt>:
   127fc:	add	ip, pc, #0, 12
   12800:	add	ip, ip, #270336	; 0x42000
   12804:	ldr	pc, [ip, #2380]!	; 0x94c

00012808 <strftime@plt>:
   12808:	add	ip, pc, #0, 12
   1280c:	add	ip, ip, #270336	; 0x42000
   12810:	ldr	pc, [ip, #2372]!	; 0x944

00012814 <__freading@plt>:
   12814:	add	ip, pc, #0, 12
   12818:	add	ip, ip, #270336	; 0x42000
   1281c:	ldr	pc, [ip, #2364]!	; 0x93c

00012820 <localtime@plt>:
   12820:	add	ip, pc, #0, 12
   12824:	add	ip, ip, #270336	; 0x42000
   12828:	ldr	pc, [ip, #2356]!	; 0x934

0001282c <modf@plt>:
   1282c:	add	ip, pc, #0, 12
   12830:	add	ip, ip, #270336	; 0x42000
   12834:	ldr	pc, [ip, #2348]!	; 0x92c

00012838 <__gmon_start__@plt>:
   12838:	add	ip, pc, #0, 12
   1283c:	add	ip, ip, #270336	; 0x42000
   12840:	ldr	pc, [ip, #2340]!	; 0x924

00012844 <__ctype_b_loc@plt>:
   12844:	add	ip, pc, #0, 12
   12848:	add	ip, ip, #270336	; 0x42000
   1284c:	ldr	pc, [ip, #2332]!	; 0x91c

00012850 <getcwd@plt>:
   12850:	add	ip, pc, #0, 12
   12854:	add	ip, ip, #270336	; 0x42000
   12858:	ldr	pc, [ip, #2324]!	; 0x914

0001285c <exit@plt>:
   1285c:	add	ip, pc, #0, 12
   12860:	add	ip, ip, #270336	; 0x42000
   12864:	ldr	pc, [ip, #2316]!	; 0x90c

00012868 <feof@plt>:
   12868:	add	ip, pc, #0, 12
   1286c:	add	ip, ip, #270336	; 0x42000
   12870:	ldr	pc, [ip, #2308]!	; 0x904

00012874 <getfilecon@plt>:
   12874:	add	ip, pc, #0, 12
   12878:	add	ip, ip, #270336	; 0x42000
   1287c:	ldr	pc, [ip, #2300]!	; 0x8fc

00012880 <strtoul@plt>:
   12880:	add	ip, pc, #0, 12
   12884:	add	ip, ip, #270336	; 0x42000
   12888:	ldr	pc, [ip, #2292]!	; 0x8f4

0001288c <strlen@plt>:
   1288c:	add	ip, pc, #0, 12
   12890:	add	ip, ip, #270336	; 0x42000
   12894:	ldr	pc, [ip, #2284]!	; 0x8ec

00012898 <strchr@plt>:
   12898:	add	ip, pc, #0, 12
   1289c:	add	ip, ip, #270336	; 0x42000
   128a0:	ldr	pc, [ip, #2276]!	; 0x8e4

000128a4 <setenv@plt>:
   128a4:	add	ip, pc, #0, 12
   128a8:	add	ip, ip, #270336	; 0x42000
   128ac:	ldr	pc, [ip, #2268]!	; 0x8dc

000128b0 <openat64@plt>:
   128b0:	add	ip, pc, #0, 12
   128b4:	add	ip, ip, #270336	; 0x42000
   128b8:	ldr	pc, [ip, #2260]!	; 0x8d4

000128bc <memrchr@plt>:
   128bc:	add	ip, pc, #0, 12
   128c0:	add	ip, ip, #270336	; 0x42000
   128c4:	ldr	pc, [ip, #2252]!	; 0x8cc

000128c8 <fprintf@plt>:
   128c8:	add	ip, pc, #0, 12
   128cc:	add	ip, ip, #270336	; 0x42000
   128d0:	ldr	pc, [ip, #2244]!	; 0x8c4

000128d4 <__errno_location@plt>:
   128d4:	add	ip, pc, #0, 12
   128d8:	add	ip, ip, #270336	; 0x42000
   128dc:	ldr	pc, [ip, #2236]!	; 0x8bc

000128e0 <iswalnum@plt>:
   128e0:	add	ip, pc, #0, 12
   128e4:	add	ip, ip, #270336	; 0x42000
   128e8:	ldr	pc, [ip, #2228]!	; 0x8b4

000128ec <snprintf@plt>:
   128ec:	add	ip, pc, #0, 12
   128f0:	add	ip, ip, #270336	; 0x42000
   128f4:	ldr	pc, [ip, #2220]!	; 0x8ac

000128f8 <__cxa_atexit@plt>:
   128f8:	add	ip, pc, #0, 12
   128fc:	add	ip, ip, #270336	; 0x42000
   12900:	ldr	pc, [ip, #2212]!	; 0x8a4

00012904 <memset@plt>:
   12904:	add	ip, pc, #0, 12
   12908:	add	ip, ip, #270336	; 0x42000
   1290c:	ldr	pc, [ip, #2204]!	; 0x89c

00012910 <bsearch@plt>:
   12910:	add	ip, pc, #0, 12
   12914:	add	ip, ip, #270336	; 0x42000
   12918:	ldr	pc, [ip, #2196]!	; 0x894

0001291c <putchar@plt>:
   1291c:	add	ip, pc, #0, 12
   12920:	add	ip, ip, #270336	; 0x42000
   12924:	ldr	pc, [ip, #2188]!	; 0x88c

00012928 <strncpy@plt>:
   12928:	add	ip, pc, #0, 12
   1292c:	add	ip, ip, #270336	; 0x42000
   12930:	ldr	pc, [ip, #2180]!	; 0x884

00012934 <pthread_mutexattr_gettype@plt>:
   12934:	add	ip, pc, #0, 12
   12938:	add	ip, ip, #270336	; 0x42000
   1293c:	ldr	pc, [ip, #2172]!	; 0x87c

00012940 <btowc@plt>:
   12940:	add	ip, pc, #0, 12
   12944:	add	ip, ip, #270336	; 0x42000
   12948:	ldr	pc, [ip, #2164]!	; 0x874

0001294c <strtod@plt>:
   1294c:	add	ip, pc, #0, 12
   12950:	add	ip, ip, #270336	; 0x42000
   12954:	ldr	pc, [ip, #2156]!	; 0x86c

00012958 <fileno@plt>:
   12958:	add	ip, pc, #0, 12
   1295c:	add	ip, ip, #270336	; 0x42000
   12960:	ldr	pc, [ip, #2148]!	; 0x864

00012964 <difftime@plt>:
   12964:	add	ip, pc, #0, 12
   12968:	add	ip, ip, #270336	; 0x42000
   1296c:	ldr	pc, [ip, #2140]!	; 0x85c

00012970 <strtoumax@plt>:
   12970:	add	ip, pc, #0, 12
   12974:	add	ip, ip, #270336	; 0x42000
   12978:	ldr	pc, [ip, #2132]!	; 0x854

0001297c <memchr@plt>:
   1297c:	add	ip, pc, #0, 12
   12980:	add	ip, ip, #270336	; 0x42000
   12984:	ldr	pc, [ip, #2124]!	; 0x84c

00012988 <setfilecon@plt>:
   12988:	add	ip, pc, #0, 12
   1298c:	add	ip, ip, #270336	; 0x42000
   12990:	ldr	pc, [ip, #2116]!	; 0x844

00012994 <access@plt>:
   12994:	add	ip, pc, #0, 12
   12998:	add	ip, ip, #270336	; 0x42000
   1299c:	ldr	pc, [ip, #2108]!	; 0x83c

000129a0 <fclose@plt>:
   129a0:	add	ip, pc, #0, 12
   129a4:	add	ip, ip, #270336	; 0x42000
   129a8:	ldr	pc, [ip, #2100]!	; 0x834

000129ac <strnlen@plt>:
   129ac:	add	ip, pc, #0, 12
   129b0:	add	ip, ip, #270336	; 0x42000
   129b4:	ldr	pc, [ip, #2092]!	; 0x82c

000129b8 <fseeko64@plt>:
   129b8:	add	ip, pc, #0, 12
   129bc:	add	ip, ip, #270336	; 0x42000
   129c0:	ldr	pc, [ip, #2084]!	; 0x824

000129c4 <endmntent@plt>:
   129c4:	add	ip, pc, #0, 12
   129c8:	add	ip, ip, #270336	; 0x42000
   129cc:	ldr	pc, [ip, #2076]!	; 0x81c

000129d0 <fcntl64@plt>:
   129d0:	add	ip, pc, #0, 12
   129d4:	add	ip, ip, #270336	; 0x42000
   129d8:	ldr	pc, [ip, #2068]!	; 0x814

000129dc <rpmatch@plt>:
   129dc:	add	ip, pc, #0, 12
   129e0:	add	ip, ip, #270336	; 0x42000
   129e4:	ldr	pc, [ip, #2060]!	; 0x80c

000129e8 <setlocale@plt>:
   129e8:	add	ip, pc, #0, 12
   129ec:	add	ip, ip, #270336	; 0x42000
   129f0:	ldr	pc, [ip, #2052]!	; 0x804

000129f4 <fork@plt>:
   129f4:	add	ip, pc, #0, 12
   129f8:	add	ip, ip, #270336	; 0x42000
   129fc:	ldr	pc, [ip, #2044]!	; 0x7fc

00012a00 <endpwent@plt>:
   12a00:	add	ip, pc, #0, 12
   12a04:	add	ip, ip, #270336	; 0x42000
   12a08:	ldr	pc, [ip, #2036]!	; 0x7f4

00012a0c <toupper@plt>:
   12a0c:	add	ip, pc, #0, 12
   12a10:	add	ip, ip, #270336	; 0x42000
   12a14:	ldr	pc, [ip, #2028]!	; 0x7ec

00012a18 <strrchr@plt>:
   12a18:	add	ip, pc, #0, 12
   12a1c:	add	ip, ip, #270336	; 0x42000
   12a20:	ldr	pc, [ip, #2020]!	; 0x7e4

00012a24 <vfprintf@plt>:
   12a24:	add	ip, pc, #0, 12
   12a28:	add	ip, ip, #270336	; 0x42000
   12a2c:	ldr	pc, [ip, #2012]!	; 0x7dc

00012a30 <nl_langinfo@plt>:
   12a30:	add	ip, pc, #0, 12
   12a34:	add	ip, ip, #270336	; 0x42000
   12a38:	ldr	pc, [ip, #2004]!	; 0x7d4

00012a3c <fputc@plt>:
   12a3c:	add	ip, pc, #0, 12
   12a40:	add	ip, ip, #270336	; 0x42000
   12a44:	ldr	pc, [ip, #1996]!	; 0x7cc

00012a48 <sscanf@plt>:
   12a48:	add	ip, pc, #0, 12
   12a4c:	add	ip, ip, #270336	; 0x42000
   12a50:	ldr	pc, [ip, #1988]!	; 0x7c4

00012a54 <localeconv@plt>:
   12a54:	add	ip, pc, #0, 12
   12a58:	add	ip, ip, #270336	; 0x42000
   12a5c:	ldr	pc, [ip, #1980]!	; 0x7bc

00012a60 <sprintf@plt>:
   12a60:	add	ip, pc, #0, 12
   12a64:	add	ip, ip, #270336	; 0x42000
   12a68:	ldr	pc, [ip, #1972]!	; 0x7b4

00012a6c <readdir64@plt>:
   12a6c:	add	ip, pc, #0, 12
   12a70:	add	ip, ip, #270336	; 0x42000
   12a74:	ldr	pc, [ip, #1964]!	; 0x7ac

00012a78 <fdopendir@plt>:
   12a78:	add	ip, pc, #0, 12
   12a7c:	add	ip, ip, #270336	; 0x42000
   12a80:	ldr	pc, [ip, #1956]!	; 0x7a4

00012a84 <timegm@plt>:
   12a84:	add	ip, pc, #0, 12
   12a88:	add	ip, ip, #270336	; 0x42000
   12a8c:	ldr	pc, [ip, #1948]!	; 0x79c

00012a90 <putc@plt>:
   12a90:	add	ip, pc, #0, 12
   12a94:	add	ip, ip, #270336	; 0x42000
   12a98:	ldr	pc, [ip, #1940]!	; 0x794

00012a9c <dirfd@plt>:
   12a9c:	add	ip, pc, #0, 12
   12aa0:	add	ip, ip, #270336	; 0x42000
   12aa4:	ldr	pc, [ip, #1932]!	; 0x78c

00012aa8 <fchdir@plt>:
   12aa8:	add	ip, pc, #0, 12
   12aac:	add	ip, ip, #270336	; 0x42000
   12ab0:	ldr	pc, [ip, #1924]!	; 0x784

00012ab4 <fopen64@plt>:
   12ab4:	add	ip, pc, #0, 12
   12ab8:	add	ip, ip, #270336	; 0x42000
   12abc:	ldr	pc, [ip, #1916]!	; 0x77c

00012ac0 <qsort@plt>:
   12ac0:	add	ip, pc, #0, 12
   12ac4:	add	ip, ip, #270336	; 0x42000
   12ac8:	ldr	pc, [ip, #1908]!	; 0x774

00012acc <freecon@plt>:
   12acc:	add	ip, pc, #0, 12
   12ad0:	add	ip, ip, #270336	; 0x42000
   12ad4:	ldr	pc, [ip, #1900]!	; 0x76c

00012ad8 <strpbrk@plt>:
   12ad8:	add	ip, pc, #0, 12
   12adc:	add	ip, ip, #270336	; 0x42000
   12ae0:	ldr	pc, [ip, #1892]!	; 0x764

00012ae4 <setmntent@plt>:
   12ae4:	add	ip, pc, #0, 12
   12ae8:	add	ip, ip, #270336	; 0x42000
   12aec:	ldr	pc, [ip, #1884]!	; 0x75c

00012af0 <bindtextdomain@plt>:
   12af0:	add	ip, pc, #0, 12
   12af4:	add	ip, ip, #270336	; 0x42000
   12af8:	ldr	pc, [ip, #1876]!	; 0x754

00012afc <atof@plt>:
   12afc:	add	ip, pc, #0, 12
   12b00:	add	ip, ip, #270336	; 0x42000
   12b04:	ldr	pc, [ip, #1868]!	; 0x74c

00012b08 <getline@plt>:
   12b08:	add	ip, pc, #0, 12
   12b0c:	add	ip, ip, #270336	; 0x42000
   12b10:	ldr	pc, [ip, #1860]!	; 0x744

00012b14 <getdelim@plt>:
   12b14:	add	ip, pc, #0, 12
   12b18:	add	ip, ip, #270336	; 0x42000
   12b1c:	ldr	pc, [ip, #1852]!	; 0x73c

00012b20 <__xstat64@plt>:
   12b20:	add	ip, pc, #0, 12
   12b24:	add	ip, ip, #270336	; 0x42000
   12b28:	ldr	pc, [ip, #1844]!	; 0x734

00012b2c <isatty@plt>:
   12b2c:	add	ip, pc, #0, 12
   12b30:	add	ip, ip, #270336	; 0x42000
   12b34:	ldr	pc, [ip, #1836]!	; 0x72c

00012b38 <unsetenv@plt>:
   12b38:	add	ip, pc, #0, 12
   12b3c:	add	ip, ip, #270336	; 0x42000
   12b40:	ldr	pc, [ip, #1828]!	; 0x724

00012b44 <towupper@plt>:
   12b44:	add	ip, pc, #0, 12
   12b48:	add	ip, ip, #270336	; 0x42000
   12b4c:	ldr	pc, [ip, #1820]!	; 0x71c

00012b50 <fputs@plt>:
   12b50:	add	ip, pc, #0, 12
   12b54:	add	ip, ip, #270336	; 0x42000
   12b58:	ldr	pc, [ip, #1812]!	; 0x714

00012b5c <strncmp@plt>:
   12b5c:	add	ip, pc, #0, 12
   12b60:	add	ip, ip, #270336	; 0x42000
   12b64:	ldr	pc, [ip, #1804]!	; 0x70c

00012b68 <abort@plt>:
   12b68:	add	ip, pc, #0, 12
   12b6c:	add	ip, ip, #270336	; 0x42000
   12b70:	ldr	pc, [ip, #1796]!	; 0x704

00012b74 <close@plt>:
   12b74:	add	ip, pc, #0, 12
   12b78:	add	ip, ip, #270336	; 0x42000
   12b7c:	ldr	pc, [ip, #1788]!	; 0x6fc

00012b80 <__lxstat64@plt>:
   12b80:	add	ip, pc, #0, 12
   12b84:	add	ip, ip, #270336	; 0x42000
   12b88:	ldr	pc, [ip, #1780]!	; 0x6f4

00012b8c <closedir@plt>:
   12b8c:	add	ip, pc, #0, 12
   12b90:	add	ip, ip, #270336	; 0x42000
   12b94:	ldr	pc, [ip, #1772]!	; 0x6ec

00012b98 <getgrgid@plt>:
   12b98:	add	ip, pc, #0, 12
   12b9c:	add	ip, ip, #270336	; 0x42000
   12ba0:	ldr	pc, [ip, #1764]!	; 0x6e4

00012ba4 <getgrnam@plt>:
   12ba4:	add	ip, pc, #0, 12
   12ba8:	add	ip, ip, #270336	; 0x42000
   12bac:	ldr	pc, [ip, #1756]!	; 0x6dc

00012bb0 <strspn@plt>:
   12bb0:	add	ip, pc, #0, 12
   12bb4:	add	ip, ip, #270336	; 0x42000
   12bb8:	ldr	pc, [ip, #1748]!	; 0x6d4

00012bbc <__assert_fail@plt>:
   12bbc:	add	ip, pc, #0, 12
   12bc0:	add	ip, ip, #270336	; 0x42000
   12bc4:	ldr	pc, [ip, #1740]!	; 0x6cc

Disassembly of section .text:

00012bc8 <.text>:
   12bc8:	mov	fp, #0
   12bcc:	mov	lr, #0
   12bd0:	pop	{r1}		; (ldr r1, [sp], #4)
   12bd4:	mov	r2, sp
   12bd8:	push	{r2}		; (str r2, [sp, #-4]!)
   12bdc:	push	{r0}		; (str r0, [sp, #-4]!)
   12be0:	ldr	ip, [pc, #16]	; 12bf8 <__assert_fail@plt+0x3c>
   12be4:	push	{ip}		; (str ip, [sp, #-4]!)
   12be8:	ldr	r0, [pc, #12]	; 12bfc <__assert_fail@plt+0x40>
   12bec:	ldr	r3, [pc, #12]	; 12c00 <__assert_fail@plt+0x44>
   12bf0:	bl	127f0 <__libc_start_main@plt>
   12bf4:	bl	12b68 <abort@plt>
   12bf8:	andeq	lr, r3, r8, asr #17
   12bfc:			; <UNDEFINED> instruction: 0x00012cb8
   12c00:	andeq	lr, r3, r8, ror #16
   12c04:	ldr	r3, [pc, #20]	; 12c20 <__assert_fail@plt+0x64>
   12c08:	ldr	r2, [pc, #20]	; 12c24 <__assert_fail@plt+0x68>
   12c0c:	add	r3, pc, r3
   12c10:	ldr	r2, [r3, r2]
   12c14:	cmp	r2, #0
   12c18:	bxeq	lr
   12c1c:	b	12838 <__gmon_start__@plt>
   12c20:	andeq	r2, r4, ip, ror #7
   12c24:	muleq	r0, r4, r2
   12c28:	ldr	r0, [pc, #24]	; 12c48 <__assert_fail@plt+0x8c>
   12c2c:	ldr	r3, [pc, #24]	; 12c4c <__assert_fail@plt+0x90>
   12c30:	cmp	r3, r0
   12c34:	bxeq	lr
   12c38:	ldr	r3, [pc, #16]	; 12c50 <__assert_fail@plt+0x94>
   12c3c:	cmp	r3, #0
   12c40:	bxeq	lr
   12c44:	bx	r3
   12c48:	andeq	r5, r5, ip, asr #10
   12c4c:	andeq	r5, r5, ip, asr #10
   12c50:	andeq	r0, r0, r0
   12c54:	ldr	r0, [pc, #36]	; 12c80 <__assert_fail@plt+0xc4>
   12c58:	ldr	r1, [pc, #36]	; 12c84 <__assert_fail@plt+0xc8>
   12c5c:	sub	r1, r1, r0
   12c60:	asr	r1, r1, #2
   12c64:	add	r1, r1, r1, lsr #31
   12c68:	asrs	r1, r1, #1
   12c6c:	bxeq	lr
   12c70:	ldr	r3, [pc, #16]	; 12c88 <__assert_fail@plt+0xcc>
   12c74:	cmp	r3, #0
   12c78:	bxeq	lr
   12c7c:	bx	r3
   12c80:	andeq	r5, r5, ip, asr #10
   12c84:	andeq	r5, r5, ip, asr #10
   12c88:	andeq	r0, r0, r0
   12c8c:	push	{r4, lr}
   12c90:	ldr	r4, [pc, #24]	; 12cb0 <__assert_fail@plt+0xf4>
   12c94:	ldrb	r3, [r4]
   12c98:	cmp	r3, #0
   12c9c:	popne	{r4, pc}
   12ca0:	bl	12c28 <__assert_fail@plt+0x6c>
   12ca4:	mov	r3, #1
   12ca8:	strb	r3, [r4]
   12cac:	pop	{r4, pc}
   12cb0:	andeq	r5, r5, r0, ror r5
   12cb4:	b	12c54 <__assert_fail@plt+0x98>
   12cb8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12cbc:	add	fp, sp, #24
   12cc0:	mov	r4, r1
   12cc4:	mov	r5, r0
   12cc8:	ldr	r0, [r1]
   12ccc:	cmp	r0, #0
   12cd0:	movweq	r0, #59732	; 0xe954
   12cd4:	movteq	r0, #3
   12cd8:	bl	28a90 <__assert_fail@plt+0x15ed4>
   12cdc:	bl	184f4 <__assert_fail@plt+0x5938>
   12ce0:	movw	r9, #24152	; 0x5e58
   12ce4:	movt	r9, #5
   12ce8:	mov	r0, #0
   12cec:	str	r0, [r9, #28]
   12cf0:	strb	r0, [r9, #40]	; 0x28
   12cf4:	strb	r0, [r9, #32]
   12cf8:	mvn	r0, #99	; 0x63
   12cfc:	str	r0, [r9, #16]
   12d00:	bl	203e0 <__assert_fail@plt+0xd824>
   12d04:	cmp	r0, #0
   12d08:	beq	12d10 <__assert_fail@plt+0x154>
   12d0c:	bl	200a0 <__assert_fail@plt+0xd4e4>
   12d10:	movw	r0, #6466	; 0x1942
   12d14:	movt	r0, #4
   12d18:	bl	19450 <__assert_fail@plt+0x6894>
   12d1c:	str	r0, [r9, #36]	; 0x24
   12d20:	cmp	r0, #0
   12d24:	beq	12e10 <__assert_fail@plt+0x254>
   12d28:	movw	r6, #24196	; 0x5e84
   12d2c:	movt	r6, #5
   12d30:	mov	r0, r6
   12d34:	bl	1900c <__assert_fail@plt+0x6450>
   12d38:	movw	r1, #2143	; 0x85f
   12d3c:	movt	r1, #4
   12d40:	mov	r0, #6
   12d44:	bl	129e8 <setlocale@plt>
   12d48:	movw	r7, #12465	; 0x30b1
   12d4c:	movt	r7, #4
   12d50:	movw	r1, #59781	; 0xe985
   12d54:	movt	r1, #3
   12d58:	mov	r0, r7
   12d5c:	bl	12af0 <bindtextdomain@plt>
   12d60:	mov	r0, r7
   12d64:	bl	126a0 <textdomain@plt>
   12d68:	movw	r0, #7456	; 0x1d20
   12d6c:	movt	r0, #2
   12d70:	bl	3e8cc <__assert_fail@plt+0x2bd10>
   12d74:	cmp	r0, #0
   12d78:	bne	12e24 <__assert_fail@plt+0x268>
   12d7c:	mov	r0, r5
   12d80:	mov	r1, r4
   12d84:	bl	18c28 <__assert_fail@plt+0x606c>
   12d88:	mov	r7, r0
   12d8c:	ldr	r0, [r6, #44]	; 0x2c
   12d90:	tst	r0, #2
   12d94:	movwne	r1, #35192	; 0x8978
   12d98:	movtne	r1, #1
   12d9c:	strne	r1, [r6, #52]	; 0x34
   12da0:	tst	r0, #128	; 0x80
   12da4:	bne	12de4 <__assert_fail@plt+0x228>
   12da8:	mov	r0, r5
   12dac:	mov	r1, r4
   12db0:	mov	r2, r7
   12db4:	bl	162c4 <__assert_fail@plt+0x3708>
   12db8:	mov	r6, r0
   12dbc:	sub	r0, r5, r7
   12dc0:	add	r1, r4, r7, lsl #2
   12dc4:	bl	12e50 <__assert_fail@plt+0x294>
   12dc8:	cmp	r0, #0
   12dcc:	beq	12ddc <__assert_fail@plt+0x220>
   12dd0:	mov	r0, r6
   12dd4:	bl	154c4 <__assert_fail@plt+0x2908>
   12dd8:	bl	18594 <__assert_fail@plt+0x59d8>
   12ddc:	ldr	r0, [r9, #28]
   12de0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12de4:	movw	r0, #21856	; 0x5560
   12de8:	movt	r0, #5
   12dec:	ldr	r8, [r0]
   12df0:	add	r0, r6, #28
   12df4:	bl	12640 <ctime@plt>
   12df8:	mov	r2, r0
   12dfc:	movw	r1, #59840	; 0xe9c0
   12e00:	movt	r1, #3
   12e04:	mov	r0, r8
   12e08:	bl	128c8 <fprintf@plt>
   12e0c:	b	12da8 <__assert_fail@plt+0x1ec>
   12e10:	bl	128d4 <__errno_location@plt>
   12e14:	ldr	r4, [r0]
   12e18:	movw	r1, #59737	; 0xe959
   12e1c:	movt	r1, #3
   12e20:	b	12e34 <__assert_fail@plt+0x278>
   12e24:	bl	128d4 <__errno_location@plt>
   12e28:	ldr	r4, [r0]
   12e2c:	movw	r1, #59805	; 0xe99d
   12e30:	movt	r1, #3
   12e34:	mov	r0, #0
   12e38:	mov	r2, #5
   12e3c:	bl	1264c <dcgettext@plt>
   12e40:	mov	r2, r0
   12e44:	mov	r0, #1
   12e48:	mov	r1, r4
   12e4c:	bl	12790 <error@plt>
   12e50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e54:	add	fp, sp, #28
   12e58:	sub	sp, sp, #228	; 0xe4
   12e5c:	mov	r4, r1
   12e60:	cmp	r0, #1
   12e64:	blt	12e7c <__assert_fail@plt+0x2c0>
   12e68:	ldr	r0, [r4]
   12e6c:	mov	r1, #1
   12e70:	bl	18b9c <__assert_fail@plt+0x5fe0>
   12e74:	eor	r0, r0, #1
   12e78:	b	12e80 <__assert_fail@plt+0x2c4>
   12e7c:	mov	r0, #0
   12e80:	movw	sl, #24196	; 0x5e84
   12e84:	movt	sl, #5
   12e88:	ldr	r5, [sl, #76]	; 0x4c
   12e8c:	cmp	r5, #0
   12e90:	beq	12f74 <__assert_fail@plt+0x3b8>
   12e94:	cmp	r0, #0
   12e98:	bne	131ec <__assert_fail@plt+0x630>
   12e9c:	movw	r1, #2506	; 0x9ca
   12ea0:	movt	r1, #4
   12ea4:	mov	r0, r5
   12ea8:	bl	124cc <strcmp@plt>
   12eac:	cmp	r0, #0
   12eb0:	beq	12fa0 <__assert_fail@plt+0x3e4>
   12eb4:	mov	r0, #0
   12eb8:	mov	r1, r5
   12ebc:	bl	19314 <__assert_fail@plt+0x6758>
   12ec0:	str	r0, [sp, #12]
   12ec4:	ldr	r0, [sl, #76]	; 0x4c
   12ec8:	movw	r1, #12632	; 0x3158
   12ecc:	movt	r1, #4
   12ed0:	bl	12ab4 <fopen64@plt>
   12ed4:	cmp	r0, #0
   12ed8:	beq	13268 <__assert_fail@plt+0x6ac>
   12edc:	mov	r5, r0
   12ee0:	bl	12958 <fileno@plt>
   12ee4:	cmn	r0, #1
   12ee8:	ble	13298 <__assert_fail@plt+0x6dc>
   12eec:	mov	r4, r0
   12ef0:	ldrb	r0, [sl, #80]	; 0x50
   12ef4:	cmp	r0, #0
   12ef8:	beq	12f64 <__assert_fail@plt+0x3a8>
   12efc:	add	r1, sp, #120	; 0x78
   12f00:	mov	r0, r4
   12f04:	bl	3e8f4 <__assert_fail@plt+0x2bd38>
   12f08:	cmp	r0, #0
   12f0c:	bne	12f64 <__assert_fail@plt+0x3a8>
   12f10:	add	r1, sp, #16
   12f14:	mov	r0, #0
   12f18:	bl	3e8f4 <__assert_fail@plt+0x2bd38>
   12f1c:	cmp	r0, #0
   12f20:	bne	12f64 <__assert_fail@plt+0x3a8>
   12f24:	ldr	r0, [sp, #112]	; 0x70
   12f28:	ldr	r1, [sp, #116]	; 0x74
   12f2c:	ldr	r2, [sp, #216]	; 0xd8
   12f30:	ldr	r3, [sp, #220]	; 0xdc
   12f34:	eor	r1, r3, r1
   12f38:	eor	r0, r2, r0
   12f3c:	orrs	r0, r0, r1
   12f40:	bne	12f64 <__assert_fail@plt+0x3a8>
   12f44:	ldr	r0, [sp, #16]
   12f48:	ldr	r1, [sp, #20]
   12f4c:	ldr	r2, [sp, #120]	; 0x78
   12f50:	ldr	r3, [sp, #124]	; 0x7c
   12f54:	eor	r1, r3, r1
   12f58:	eor	r0, r2, r0
   12f5c:	orrs	r0, r0, r1
   12f60:	beq	132e4 <__assert_fail@plt+0x728>
   12f64:	mov	r0, r4
   12f68:	mov	r1, #1
   12f6c:	bl	21c94 <__assert_fail@plt+0xf0d8>
   12f70:	b	12fdc <__assert_fail@plt+0x420>
   12f74:	cmp	r0, #0
   12f78:	beq	131c0 <__assert_fail@plt+0x604>
   12f7c:	mov	r0, r4
   12f80:	bl	21948 <__assert_fail@plt+0xed8c>
   12f84:	mov	r6, r0
   12f88:	mov	r0, #0
   12f8c:	str	r0, [sp, #12]
   12f90:	mov	r5, #0
   12f94:	cmp	r6, #0
   12f98:	bne	12ff0 <__assert_fail@plt+0x434>
   12f9c:	b	131e8 <__assert_fail@plt+0x62c>
   12fa0:	ldrb	r0, [sl, #80]	; 0x50
   12fa4:	cmp	r0, #0
   12fa8:	bne	132b8 <__assert_fail@plt+0x6fc>
   12fac:	movw	r1, #60011	; 0xea6b
   12fb0:	movt	r1, #3
   12fb4:	mov	r0, #0
   12fb8:	mov	r2, #5
   12fbc:	bl	1264c <dcgettext@plt>
   12fc0:	mov	r1, r0
   12fc4:	mov	r0, #0
   12fc8:	bl	19314 <__assert_fail@plt+0x6758>
   12fcc:	str	r0, [sp, #12]
   12fd0:	movw	r0, #21864	; 0x5568
   12fd4:	movt	r0, #5
   12fd8:	ldr	r5, [r0]
   12fdc:	mov	r0, r5
   12fe0:	bl	2197c <__assert_fail@plt+0xedc0>
   12fe4:	mov	r6, r0
   12fe8:	cmp	r6, #0
   12fec:	beq	131e8 <__assert_fail@plt+0x62c>
   12ff0:	str	r5, [sp, #8]
   12ff4:	add	r1, sp, #120	; 0x78
   12ff8:	mov	r0, r6
   12ffc:	bl	219b0 <__assert_fail@plt+0xedf4>
   13000:	cmp	r0, #0
   13004:	beq	13100 <__assert_fail@plt+0x544>
   13008:	mov	r9, r0
   1300c:	mov	r4, #1
   13010:	movw	r5, #24152	; 0x5e58
   13014:	movt	r5, #5
   13018:	add	r8, sp, #120	; 0x78
   1301c:	mov	r7, #1
   13020:	ldr	r0, [sl, #76]	; 0x4c
   13024:	ldrb	r1, [r9]
   13028:	cmp	r1, #0
   1302c:	beq	13070 <__assert_fail@plt+0x4b4>
   13030:	cmp	r0, #0
   13034:	bne	1304c <__assert_fail@plt+0x490>
   13038:	mov	r0, r9
   1303c:	mov	r1, #1
   13040:	bl	18b9c <__assert_fail@plt+0x5fe0>
   13044:	cmp	r0, #0
   13048:	bne	1315c <__assert_fail@plt+0x5a0>
   1304c:	mov	r0, r9
   13050:	bl	1288c <strlen@plt>
   13054:	str	r0, [r5, #20]
   13058:	mov	r0, r9
   1305c:	bl	13328 <__assert_fail@plt+0x76c>
   13060:	and	r7, r7, r0
   13064:	cmp	r0, #0
   13068:	bne	130e4 <__assert_fail@plt+0x528>
   1306c:	b	1315c <__assert_fail@plt+0x5a0>
   13070:	cmp	r0, #0
   13074:	beq	130b8 <__assert_fail@plt+0x4fc>
   13078:	mov	r0, r6
   1307c:	bl	21a68 <__assert_fail@plt+0xeeac>
   13080:	mov	r7, r0
   13084:	mov	r0, #0
   13088:	movw	r1, #60282	; 0xeb7a
   1308c:	movt	r1, #3
   13090:	mov	r2, #5
   13094:	bl	1264c <dcgettext@plt>
   13098:	str	r7, [sp]
   1309c:	str	r0, [sp, #4]
   130a0:	mov	r0, #0
   130a4:	mov	r1, #0
   130a8:	movw	r2, #60271	; 0xeb6f
   130ac:	movt	r2, #3
   130b0:	ldr	r3, [sp, #12]
   130b4:	b	130d8 <__assert_fail@plt+0x51c>
   130b8:	mov	r0, #0
   130bc:	mov	r1, r9
   130c0:	bl	19314 <__assert_fail@plt+0x6758>
   130c4:	mov	r3, r0
   130c8:	mov	r0, #0
   130cc:	mov	r1, #2
   130d0:	movw	r2, #19439	; 0x4bef
   130d4:	movt	r2, #4
   130d8:	bl	12790 <error@plt>
   130dc:	str	r4, [r5, #28]
   130e0:	mov	r7, #0
   130e4:	mov	r0, r6
   130e8:	mov	r1, r8
   130ec:	bl	219b0 <__assert_fail@plt+0xedf4>
   130f0:	mov	r9, r0
   130f4:	cmp	r0, #0
   130f8:	bne	13020 <__assert_fail@plt+0x464>
   130fc:	b	13104 <__assert_fail@plt+0x548>
   13100:	mov	r7, #1
   13104:	ldr	r0, [sp, #120]	; 0x78
   13108:	cmp	r0, #2
   1310c:	beq	1315c <__assert_fail@plt+0x5a0>
   13110:	cmp	r0, #4
   13114:	bne	131e0 <__assert_fail@plt+0x624>
   13118:	bl	128d4 <__errno_location@plt>
   1311c:	ldr	r4, [r0]
   13120:	mov	r7, #0
   13124:	movw	r1, #60216	; 0xeb38
   13128:	movt	r1, #3
   1312c:	mov	r0, #0
   13130:	mov	r2, #5
   13134:	bl	1264c <dcgettext@plt>
   13138:	mov	r2, r0
   1313c:	mov	r0, #0
   13140:	mov	r1, r4
   13144:	ldr	r3, [sp, #12]
   13148:	bl	12790 <error@plt>
   1314c:	movw	r0, #24152	; 0x5e58
   13150:	movt	r0, #5
   13154:	mov	r1, #1
   13158:	str	r1, [r0, #28]
   1315c:	mov	r0, r6
   13160:	bl	21a8c <__assert_fail@plt+0xeed0>
   13164:	tst	r7, #1
   13168:	ldrne	r0, [sl, #76]	; 0x4c
   1316c:	cmpne	r0, #0
   13170:	beq	131d4 <__assert_fail@plt+0x618>
   13174:	ldr	r4, [sp, #8]
   13178:	mov	r0, r4
   1317c:	bl	1258c <ferror@plt>
   13180:	cmp	r0, #0
   13184:	bne	13198 <__assert_fail@plt+0x5dc>
   13188:	mov	r0, r4
   1318c:	bl	129a0 <fclose@plt>
   13190:	cmp	r0, #0
   13194:	beq	131d4 <__assert_fail@plt+0x618>
   13198:	movw	r1, #60312	; 0xeb98
   1319c:	movt	r1, #3
   131a0:	mov	r0, #0
   131a4:	mov	r2, #5
   131a8:	bl	1264c <dcgettext@plt>
   131ac:	mov	r2, r0
   131b0:	mov	r0, #1
   131b4:	mov	r1, #0
   131b8:	ldr	r3, [sp, #12]
   131bc:	bl	12790 <error@plt>
   131c0:	mov	r0, #46	; 0x2e
   131c4:	strh	r0, [sp, #120]	; 0x78
   131c8:	add	r0, sp, #120	; 0x78
   131cc:	bl	13328 <__assert_fail@plt+0x76c>
   131d0:	mov	r7, r0
   131d4:	and	r0, r7, #1
   131d8:	sub	sp, fp, #28
   131dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131e0:	cmp	r0, #3
   131e4:	bne	13248 <__assert_fail@plt+0x68c>
   131e8:	bl	2b97c <__assert_fail@plt+0x18dc0>
   131ec:	movw	r1, #59859	; 0xe9d3
   131f0:	movt	r1, #3
   131f4:	mov	r0, #0
   131f8:	mov	r2, #5
   131fc:	bl	1264c <dcgettext@plt>
   13200:	mov	r5, r0
   13204:	ldr	r1, [r4]
   13208:	mov	r0, #0
   1320c:	bl	19314 <__assert_fail@plt+0x6758>
   13210:	mov	r3, r0
   13214:	mov	r0, #0
   13218:	mov	r1, #0
   1321c:	mov	r2, r5
   13220:	bl	12790 <error@plt>
   13224:	movw	r1, #59876	; 0xe9e4
   13228:	movt	r1, #3
   1322c:	mov	r0, #0
   13230:	mov	r2, #5
   13234:	bl	1264c <dcgettext@plt>
   13238:	mov	r3, r0
   1323c:	movw	r2, #19439	; 0x4bef
   13240:	movt	r2, #4
   13244:	b	132d8 <__assert_fail@plt+0x71c>
   13248:	movw	r0, #60231	; 0xeb47
   1324c:	movt	r0, #3
   13250:	movw	r1, #60055	; 0xea97
   13254:	movt	r1, #3
   13258:	movw	r3, #60065	; 0xeaa1
   1325c:	movt	r3, #3
   13260:	movw	r2, #675	; 0x2a3
   13264:	bl	12bbc <__assert_fail@plt>
   13268:	bl	128d4 <__errno_location@plt>
   1326c:	ldr	r4, [r0]
   13270:	movw	r1, #60028	; 0xea7c
   13274:	movt	r1, #3
   13278:	mov	r0, #0
   1327c:	mov	r2, #5
   13280:	bl	1264c <dcgettext@plt>
   13284:	mov	r2, r0
   13288:	mov	r0, #1
   1328c:	mov	r1, r4
   13290:	ldr	r3, [sp, #12]
   13294:	bl	12790 <error@plt>
   13298:	movw	r0, #60534	; 0xec76
   1329c:	movt	r0, #3
   132a0:	movw	r1, #60055	; 0xea97
   132a4:	movt	r1, #3
   132a8:	movw	r3, #60065	; 0xeaa1
   132ac:	movt	r3, #3
   132b0:	movw	r2, #610	; 0x262
   132b4:	bl	12bbc <__assert_fail@plt>
   132b8:	movw	r1, #59927	; 0xea17
   132bc:	movt	r1, #3
   132c0:	mov	r0, #0
   132c4:	mov	r2, #5
   132c8:	bl	1264c <dcgettext@plt>
   132cc:	mov	r3, r0
   132d0:	movw	r2, #17340	; 0x43bc
   132d4:	movt	r2, #4
   132d8:	mov	r0, #1
   132dc:	mov	r1, #0
   132e0:	bl	12790 <error@plt>
   132e4:	movw	r1, #60117	; 0xead5
   132e8:	movt	r1, #3
   132ec:	mov	r0, #0
   132f0:	mov	r2, #5
   132f4:	bl	1264c <dcgettext@plt>
   132f8:	mov	r3, r0
   132fc:	ldr	r0, [sp, #12]
   13300:	str	r0, [sp]
   13304:	movw	r2, #60109	; 0xeacd
   13308:	movt	r2, #3
   1330c:	b	132d8 <__assert_fail@plt+0x71c>
   13310:	movw	r1, #21152	; 0x52a0
   13314:	movt	r1, #5
   13318:	ldr	r1, [r1]
   1331c:	str	r1, [r0]
   13320:	mov	r0, #1
   13324:	bx	lr
   13328:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1332c:	add	fp, sp, #28
   13330:	sub	sp, sp, #12
   13334:	mov	r8, r0
   13338:	bl	1288c <strlen@plt>
   1333c:	movw	sl, #24152	; 0x5e58
   13340:	movt	sl, #5
   13344:	str	r0, [sl, #20]
   13348:	mvn	r0, #99	; 0x63
   1334c:	bl	13534 <__assert_fail@plt+0x978>
   13350:	mov	r0, #0
   13354:	str	r0, [sp, #8]
   13358:	str	r8, [sp, #4]
   1335c:	movw	r0, #24196	; 0x5e84
   13360:	movt	r0, #5
   13364:	ldr	r1, [r0, #48]	; 0x30
   13368:	cmp	r1, #2
   1336c:	bhi	13390 <__assert_fail@plt+0x7d4>
   13370:	movw	r2, #61200	; 0xef10
   13374:	movt	r2, #3
   13378:	ldr	r1, [r2, r1, lsl #2]
   1337c:	movw	r2, #21152	; 0x52a0
   13380:	movt	r2, #5
   13384:	ldr	r3, [r2]
   13388:	orr	r1, r3, r1
   1338c:	str	r1, [r2]
   13390:	ldrb	r0, [r0, #13]
   13394:	cmp	r0, #0
   13398:	movwne	r0, #21152	; 0x52a0
   1339c:	movtne	r0, #5
   133a0:	ldrne	r1, [r0]
   133a4:	orrne	r1, r1, #64	; 0x40
   133a8:	strne	r1, [r0]
   133ac:	movw	r0, #21152	; 0x52a0
   133b0:	movt	r0, #5
   133b4:	ldr	r1, [r0]
   133b8:	add	r0, sp, #4
   133bc:	mov	r4, #0
   133c0:	mov	r2, #0
   133c4:	bl	2cb44 <__assert_fail@plt+0x19f88>
   133c8:	mov	r6, r0
   133cc:	bl	128d4 <__errno_location@plt>
   133d0:	mov	r9, r0
   133d4:	cmp	r6, #0
   133d8:	beq	13494 <__assert_fail@plt+0x8d8>
   133dc:	str	r4, [r9]
   133e0:	mov	r0, r6
   133e4:	bl	2d47c <__assert_fail@plt+0x1a8c0>
   133e8:	cmp	r0, #0
   133ec:	beq	13460 <__assert_fail@plt+0x8a4>
   133f0:	mov	r7, r0
   133f4:	mov	r4, #-2147483648	; 0x80000000
   133f8:	mov	r5, #0
   133fc:	b	13408 <__assert_fail@plt+0x84c>
   13400:	bl	183c8 <__assert_fail@plt+0x580c>
   13404:	b	1341c <__assert_fail@plt+0x860>
   13408:	ldrb	r0, [sl, #32]
   1340c:	cmp	r0, #0
   13410:	ldrne	r0, [r7, #48]	; 0x30
   13414:	cmpne	r0, r4
   13418:	bne	13400 <__assert_fail@plt+0x844>
   1341c:	ldr	r4, [r7, #48]	; 0x30
   13420:	strb	r5, [sl, #4]
   13424:	strb	r5, [sl, #40]	; 0x28
   13428:	ldr	r0, [r7, #80]	; 0x50
   1342c:	str	r0, [sl, #8]
   13430:	cmp	r0, #0
   13434:	movwne	r0, #1
   13438:	strb	r0, [sl, #5]
   1343c:	mov	r0, r6
   13440:	mov	r1, r7
   13444:	bl	135e4 <__assert_fail@plt+0xa28>
   13448:	str	r5, [r9]
   1344c:	mov	r0, r6
   13450:	bl	2d47c <__assert_fail@plt+0x1a8c0>
   13454:	mov	r7, r0
   13458:	cmp	r0, #0
   1345c:	bne	13408 <__assert_fail@plt+0x84c>
   13460:	ldr	r7, [r9]
   13464:	cmp	r7, #0
   13468:	beq	134d8 <__assert_fail@plt+0x91c>
   1346c:	mov	r5, #0
   13470:	mov	r0, #0
   13474:	mov	r1, r8
   13478:	bl	19314 <__assert_fail@plt+0x6758>
   1347c:	mov	r3, r0
   13480:	movw	r2, #60346	; 0xebba
   13484:	movt	r2, #3
   13488:	mov	r0, #0
   1348c:	mov	r1, r7
   13490:	b	13514 <__assert_fail@plt+0x958>
   13494:	ldr	r5, [r9]
   13498:	movw	r1, #60329	; 0xeba9
   1349c:	movt	r1, #3
   134a0:	mov	r0, #0
   134a4:	mov	r2, #5
   134a8:	bl	1264c <dcgettext@plt>
   134ac:	mov	r6, r0
   134b0:	mov	r0, #0
   134b4:	mov	r1, r8
   134b8:	bl	19314 <__assert_fail@plt+0x6758>
   134bc:	mov	r3, r0
   134c0:	mov	r0, #0
   134c4:	mov	r1, r5
   134c8:	mov	r2, r6
   134cc:	bl	12790 <error@plt>
   134d0:	mov	r5, #1
   134d4:	b	13518 <__assert_fail@plt+0x95c>
   134d8:	mov	r0, r6
   134dc:	bl	2d2f0 <__assert_fail@plt+0x1a734>
   134e0:	cmp	r0, #0
   134e4:	beq	1352c <__assert_fail@plt+0x970>
   134e8:	ldr	r6, [r9]
   134ec:	mov	r5, #0
   134f0:	movw	r1, #60404	; 0xebf4
   134f4:	movt	r1, #3
   134f8:	mov	r0, #0
   134fc:	mov	r2, #5
   13500:	bl	1264c <dcgettext@plt>
   13504:	mov	r2, r0
   13508:	mov	r0, #0
   1350c:	mov	r1, r6
   13510:	mov	r3, r8
   13514:	bl	12790 <error@plt>
   13518:	mov	r0, #1
   1351c:	str	r0, [sl, #28]
   13520:	mov	r0, r5
   13524:	sub	sp, fp, #28
   13528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1352c:	mov	r5, #1
   13530:	b	13520 <__assert_fail@plt+0x964>
   13534:	push	{r4, sl, fp, lr}
   13538:	add	fp, sp, #8
   1353c:	movw	r1, #21152	; 0x52a0
   13540:	movt	r1, #5
   13544:	ldrb	r1, [r1, #1]
   13548:	tst	r1, #2
   1354c:	beq	135a0 <__assert_fail@plt+0x9e4>
   13550:	cmn	r0, #100	; 0x64
   13554:	beq	13560 <__assert_fail@plt+0x9a4>
   13558:	cmn	r0, #1
   1355c:	ble	135a4 <__assert_fail@plt+0x9e8>
   13560:	movw	r1, #24152	; 0x5e58
   13564:	movt	r1, #5
   13568:	str	r0, [r1, #16]
   1356c:	movw	r4, #21156	; 0x52a4
   13570:	movt	r4, #5
   13574:	ldr	r1, [r4]
   13578:	cmn	r1, #1
   1357c:	popgt	{r4, sl, fp, pc}
   13580:	cmn	r0, #100	; 0x64
   13584:	bne	13590 <__assert_fail@plt+0x9d4>
   13588:	mvn	r0, #99	; 0x63
   1358c:	b	1359c <__assert_fail@plt+0x9e0>
   13590:	cmp	r0, #0
   13594:	blt	135c4 <__assert_fail@plt+0xa08>
   13598:	bl	21cf4 <__assert_fail@plt+0xf138>
   1359c:	str	r0, [r4]
   135a0:	pop	{r4, sl, fp, pc}
   135a4:	movw	r0, #60459	; 0xec2b
   135a8:	movt	r0, #3
   135ac:	movw	r1, #60055	; 0xea97
   135b0:	movt	r1, #3
   135b4:	movw	r3, #60493	; 0xec4d
   135b8:	movt	r3, #3
   135bc:	mov	r2, #107	; 0x6b
   135c0:	bl	12bbc <__assert_fail@plt>
   135c4:	movw	r0, #60514	; 0xec62
   135c8:	movt	r0, #3
   135cc:	movw	r1, #60055	; 0xea97
   135d0:	movt	r1, #3
   135d4:	movw	r3, #60493	; 0xec4d
   135d8:	movt	r3, #3
   135dc:	mov	r2, #125	; 0x7d
   135e0:	bl	12bbc <__assert_fail@plt>
   135e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135e8:	add	fp, sp, #28
   135ec:	sub	sp, sp, #140	; 0x8c
   135f0:	mov	r4, r1
   135f4:	mov	r5, r0
   135f8:	movw	r7, #24196	; 0x5e84
   135fc:	movt	r7, #5
   13600:	ldrb	r0, [r7, #44]	; 0x2c
   13604:	tst	r0, #4
   13608:	bne	13944 <__assert_fail@plt+0xd88>
   1360c:	ldrh	r0, [r4, #56]	; 0x38
   13610:	cmp	r0, #6
   13614:	ldrne	r0, [r4, #48]	; 0x30
   13618:	cmpne	r0, #0
   1361c:	bne	13628 <__assert_fail@plt+0xa6c>
   13620:	bl	13aec <__assert_fail@plt+0xf30>
   13624:	b	1363c <__assert_fail@plt+0xa80>
   13628:	movw	r1, #21160	; 0x52a8
   1362c:	movt	r1, #5
   13630:	ldr	r1, [r1]
   13634:	cmp	r0, r1
   13638:	blgt	13aec <__assert_fail@plt+0xf30>
   1363c:	ldr	r0, [r5, #32]
   13640:	bl	13534 <__assert_fail@plt+0x978>
   13644:	ldr	r0, [r4, #48]	; 0x30
   13648:	movw	r1, #21160	; 0x52a8
   1364c:	movt	r1, #5
   13650:	str	r0, [r1]
   13654:	ldrd	r2, [r4, #160]	; 0xa0
   13658:	str	r3, [sp, #132]	; 0x84
   1365c:	str	r2, [sp, #128]	; 0x80
   13660:	ldrh	r1, [r4, #56]	; 0x38
   13664:	sub	r1, r1, #2
   13668:	cmp	r1, #11
   1366c:	bhi	1373c <__assert_fail@plt+0xb80>
   13670:	add	r2, pc, #0
   13674:	ldr	pc, [r2, r1, lsl #2]
   13678:	andeq	r3, r1, r8, lsr #13
   1367c:	andeq	r3, r1, ip, lsr r7
   13680:	andeq	r3, r1, r8, asr #13
   13684:	andeq	r3, r1, ip, lsr r7
   13688:	andeq	r3, r1, ip, lsr r7
   1368c:	andeq	r3, r1, ip, lsl #14
   13690:	andeq	r3, r1, ip, lsr r7
   13694:	andeq	r3, r1, ip, lsr r7
   13698:	andeq	r3, r1, r4, ror #13
   1369c:	andeq	r3, r1, ip, lsr r7
   136a0:	andeq	r3, r1, ip, lsr r7
   136a4:	andeq	r3, r1, r8, lsl r7
   136a8:	mov	r0, r4
   136ac:	bl	13b2c <__assert_fail@plt+0xf70>
   136b0:	movw	r0, #24152	; 0x5e58
   136b4:	movt	r0, #5
   136b8:	mov	r1, #1
   136bc:	str	r1, [r0, #28]
   136c0:	sub	sp, fp, #28
   136c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136c8:	ldr	r1, [r4, #28]
   136cc:	ldr	r0, [r4, #32]
   136d0:	bl	18304 <__assert_fail@plt+0x5748>
   136d4:	ldrb	r0, [r7]
   136d8:	cmp	r0, #0
   136dc:	bne	1393c <__assert_fail@plt+0xd80>
   136e0:	b	1373c <__assert_fail@plt+0xb80>
   136e4:	cmp	r0, #0
   136e8:	beq	1370c <__assert_fail@plt+0xb50>
   136ec:	ldr	r0, [r4, #24]
   136f0:	bl	13bf0 <__assert_fail@plt+0x1034>
   136f4:	cmp	r0, #0
   136f8:	bne	13728 <__assert_fail@plt+0xb6c>
   136fc:	ldr	r1, [r4, #28]
   13700:	ldr	r0, [r4, #32]
   13704:	bl	18304 <__assert_fail@plt+0x5748>
   13708:	b	1373c <__assert_fail@plt+0xb80>
   1370c:	ldr	r1, [r4, #28]
   13710:	ldr	r0, [r4, #32]
   13714:	b	13730 <__assert_fail@plt+0xb74>
   13718:	ldr	r0, [r4, #24]
   1371c:	bl	13bf0 <__assert_fail@plt+0x1034>
   13720:	cmp	r0, #0
   13724:	beq	1373c <__assert_fail@plt+0xb80>
   13728:	ldr	r1, [r4, #28]
   1372c:	mov	r0, #40	; 0x28
   13730:	bl	18304 <__assert_fail@plt+0x5748>
   13734:	sub	sp, fp, #28
   13738:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1373c:	ldrh	r1, [r4, #56]	; 0x38
   13740:	movw	r0, #65534	; 0xfffe
   13744:	and	r0, r1, r0
   13748:	cmp	r0, #10
   1374c:	bne	1377c <__assert_fail@plt+0xbc0>
   13750:	movw	r0, #24152	; 0x5e58
   13754:	movt	r0, #5
   13758:	ldrb	r2, [r0, #4]
   1375c:	cmp	r2, #0
   13760:	bne	13a68 <__assert_fail@plt+0xeac>
   13764:	ldr	r0, [r0, #8]
   13768:	cmp	r1, #11
   1376c:	cmpne	r0, #0
   13770:	bne	13a88 <__assert_fail@plt+0xecc>
   13774:	str	r0, [sp, #28]
   13778:	b	137fc <__assert_fail@plt+0xc40>
   1377c:	add	r1, r4, #64	; 0x40
   13780:	movw	r6, #24152	; 0x5e58
   13784:	movt	r6, #5
   13788:	movw	r0, #257	; 0x101
   1378c:	strh	r0, [r6, #4]
   13790:	add	r0, sp, #32
   13794:	mov	r2, #104	; 0x68
   13798:	bl	125c8 <memcpy@plt>
   1379c:	ldr	r0, [sp, #48]	; 0x30
   137a0:	str	r0, [r6, #8]
   137a4:	str	r0, [sp, #28]
   137a8:	cmp	r0, #0
   137ac:	beq	137bc <__assert_fail@plt+0xc00>
   137b0:	ldr	r0, [r4, #48]	; 0x30
   137b4:	str	r0, [r6]
   137b8:	b	13814 <__assert_fail@plt+0xc58>
   137bc:	movw	r1, #60748	; 0xed4c
   137c0:	movt	r1, #3
   137c4:	mov	r0, #0
   137c8:	mov	r2, #5
   137cc:	bl	1264c <dcgettext@plt>
   137d0:	mov	r6, r0
   137d4:	ldr	r1, [r7, #72]	; 0x48
   137d8:	ldr	r2, [r4, #28]
   137dc:	mov	r0, #0
   137e0:	bl	2a024 <__assert_fail@plt+0x17468>
   137e4:	mov	r3, r0
   137e8:	mov	r0, #0
   137ec:	mov	r1, #0
   137f0:	mov	r2, r6
   137f4:	bl	12790 <error@plt>
   137f8:	ldr	r0, [sp, #28]
   137fc:	ldr	r1, [r4, #48]	; 0x30
   13800:	movw	r2, #24152	; 0x5e58
   13804:	movt	r2, #5
   13808:	str	r1, [r2]
   1380c:	cmp	r0, #0
   13810:	beq	13838 <__assert_fail@plt+0xc7c>
   13814:	ldr	r1, [r4, #28]
   13818:	mov	r0, #0
   1381c:	str	r0, [sp]
   13820:	add	r2, r4, #168	; 0xa8
   13824:	add	r0, sp, #28
   13828:	add	r3, sp, #32
   1382c:	bl	18a6c <__assert_fail@plt+0x5eb0>
   13830:	cmp	r0, #0
   13834:	beq	1393c <__assert_fail@plt+0xd80>
   13838:	ldrh	r0, [r4, #56]	; 0x38
   1383c:	ldr	r1, [sp, #28]
   13840:	and	r1, r1, #61440	; 0xf000
   13844:	cmp	r1, #16384	; 0x4000
   13848:	bne	1386c <__assert_fail@plt+0xcb0>
   1384c:	mov	r9, #1
   13850:	cmp	r0, #11
   13854:	bne	1388c <__assert_fail@plt+0xcd0>
   13858:	mov	r0, r5
   1385c:	mov	r1, r4
   13860:	mov	r2, #1
   13864:	bl	2e754 <__assert_fail@plt+0x1bb98>
   13868:	b	1393c <__assert_fail@plt+0xd80>
   1386c:	sub	r0, r0, #1
   13870:	uxth	r1, r0
   13874:	mov	r9, #0
   13878:	cmp	r1, #6
   1387c:	sxthcc	r0, r0
   13880:	movwcc	r1, #61216	; 0xef20
   13884:	movtcc	r1, #3
   13888:	ldrcc	r9, [r1, r0, lsl #2]
   1388c:	ldr	r1, [r7, #4]
   13890:	mov	r0, #0
   13894:	cmp	r1, #0
   13898:	ldrge	r2, [r4, #48]	; 0x30
   1389c:	cmpge	r2, r1
   138a0:	bge	139d4 <__assert_fail@plt+0xe18>
   138a4:	ldrh	r1, [r4, #56]	; 0x38
   138a8:	subs	r2, r1, #6
   138ac:	movwne	r2, #1
   138b0:	ldrb	r3, [r7]
   138b4:	clz	r3, r3
   138b8:	lsr	r3, r3, #5
   138bc:	orr	r2, r2, r3
   138c0:	sub	r1, r1, #1
   138c4:	clz	r1, r1
   138c8:	lsr	r1, r1, #5
   138cc:	and	r1, r1, r3
   138d0:	eor	r1, r1, r2
   138d4:	mov	r6, #1
   138d8:	cmp	r1, #1
   138dc:	bne	138f4 <__assert_fail@plt+0xd38>
   138e0:	ldr	r1, [r7, #8]
   138e4:	ldr	r2, [r4, #48]	; 0x30
   138e8:	cmp	r2, r1
   138ec:	movwlt	r0, #1
   138f0:	mov	r6, r0
   138f4:	ldrb	r0, [r7, #44]	; 0x2c
   138f8:	tst	r0, #4
   138fc:	bne	139fc <__assert_fail@plt+0xe40>
   13900:	cmp	r6, #0
   13904:	bne	13918 <__assert_fail@plt+0xd5c>
   13908:	add	r2, sp, #32
   1390c:	mov	r0, r5
   13910:	mov	r1, r4
   13914:	bl	13c3c <__assert_fail@plt+0x1080>
   13918:	ldrh	r0, [r4, #56]	; 0x38
   1391c:	cmp	r0, #6
   13920:	bne	1393c <__assert_fail@plt+0xd80>
   13924:	movw	r0, #24152	; 0x5e58
   13928:	movt	r0, #5
   1392c:	mov	r1, #0
   13930:	strb	r1, [r0, #24]
   13934:	sub	sp, fp, #28
   13938:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1393c:	sub	sp, fp, #28
   13940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13944:	movw	r0, #21856	; 0x5560
   13948:	movt	r0, #5
   1394c:	ldr	r0, [r0]
   13950:	str	r0, [sp, #24]
   13954:	ldr	r2, [r4, #28]
   13958:	ldr	r1, [r7, #72]	; 0x48
   1395c:	mov	r0, #0
   13960:	bl	2a024 <__assert_fail@plt+0x17468>
   13964:	str	r0, [sp, #20]
   13968:	ldrh	r0, [r4, #56]	; 0x38
   1396c:	bl	13aa8 <__assert_fail@plt+0xeec>
   13970:	mov	sl, r0
   13974:	movw	r0, #21160	; 0x52a8
   13978:	movt	r0, #5
   1397c:	ldr	r8, [r0]
   13980:	ldr	r1, [r7, #72]	; 0x48
   13984:	ldr	r2, [r4, #28]
   13988:	ldr	r9, [r4, #48]	; 0x30
   1398c:	mov	r0, #1
   13990:	bl	2a024 <__assert_fail@plt+0x17468>
   13994:	mov	r6, r0
   13998:	ldr	r1, [r7, #72]	; 0x48
   1399c:	ldr	r2, [r4, #24]
   139a0:	mov	r0, #2
   139a4:	bl	2a024 <__assert_fail@plt+0x17468>
   139a8:	str	r9, [sp]
   139ac:	str	r8, [sp, #4]
   139b0:	str	r6, [sp, #8]
   139b4:	str	r0, [sp, #12]
   139b8:	movw	r1, #60542	; 0xec7e
   139bc:	movt	r1, #3
   139c0:	ldr	r0, [sp, #24]
   139c4:	ldr	r2, [sp, #20]
   139c8:	mov	r3, sl
   139cc:	bl	128c8 <fprintf@plt>
   139d0:	b	1360c <__assert_fail@plt+0xa50>
   139d4:	mov	r0, r5
   139d8:	mov	r1, r4
   139dc:	mov	r2, #4
   139e0:	bl	2e754 <__assert_fail@plt+0x1bb98>
   139e4:	ldr	r1, [r7, #4]
   139e8:	ldr	r2, [r4, #48]	; 0x30
   139ec:	mov	r0, #0
   139f0:	cmp	r2, r1
   139f4:	movwgt	r0, #1
   139f8:	b	138a4 <__assert_fail@plt+0xce8>
   139fc:	movw	r0, #21856	; 0x5560
   13a00:	movt	r0, #5
   13a04:	ldr	r8, [r0]
   13a08:	ldr	r2, [r4, #28]
   13a0c:	ldr	r1, [r7, #72]	; 0x48
   13a10:	mov	r0, #0
   13a14:	bl	2a024 <__assert_fail@plt+0x17468>
   13a18:	mov	r7, r0
   13a1c:	ldrh	r0, [r4, #56]	; 0x38
   13a20:	bl	13aa8 <__assert_fail@plt+0xeec>
   13a24:	mov	r3, r0
   13a28:	movw	r0, #24152	; 0x5e58
   13a2c:	movt	r0, #5
   13a30:	ldrb	r1, [r0, #4]
   13a34:	ldrb	r0, [r0, #5]
   13a38:	str	r9, [sp]
   13a3c:	str	r6, [sp, #4]
   13a40:	str	r1, [sp, #8]
   13a44:	str	r0, [sp, #12]
   13a48:	movw	r1, #60791	; 0xed77
   13a4c:	movt	r1, #3
   13a50:	mov	r0, r8
   13a54:	mov	r2, r7
   13a58:	bl	128c8 <fprintf@plt>
   13a5c:	cmp	r6, #0
   13a60:	bne	13918 <__assert_fail@plt+0xd5c>
   13a64:	b	13908 <__assert_fail@plt+0xd4c>
   13a68:	movw	r0, #60646	; 0xece6
   13a6c:	movt	r0, #3
   13a70:	movw	r1, #60055	; 0xea97
   13a74:	movt	r1, #3
   13a78:	movw	r3, #60663	; 0xecf7
   13a7c:	movt	r3, #3
   13a80:	mov	r2, #380	; 0x17c
   13a84:	bl	12bbc <__assert_fail@plt>
   13a88:	movw	r0, #60703	; 0xed1f
   13a8c:	movt	r0, #3
   13a90:	movw	r1, #60055	; 0xea97
   13a94:	movt	r1, #3
   13a98:	movw	r3, #60663	; 0xecf7
   13a9c:	movt	r3, #3
   13aa0:	movw	r2, #381	; 0x17d
   13aa4:	bl	12bbc <__assert_fail@plt>
   13aa8:	mov	r2, r0
   13aac:	sub	r0, r0, #1
   13ab0:	cmp	r0, #14
   13ab4:	movwcc	r1, #61248	; 0xef40
   13ab8:	movtcc	r1, #3
   13abc:	ldrcc	r0, [r1, r0, lsl #2]
   13ac0:	bxcc	lr
   13ac4:	push	{r4, sl, fp, lr}
   13ac8:	add	fp, sp, #8
   13acc:	movw	r4, #21873	; 0x5571
   13ad0:	movt	r4, #5
   13ad4:	movw	r1, #60994	; 0xee42
   13ad8:	movt	r1, #3
   13adc:	mov	r0, r4
   13ae0:	bl	12a60 <sprintf@plt>
   13ae4:	mov	r0, r4
   13ae8:	pop	{r4, sl, fp, pc}
   13aec:	push	{r4, sl, fp, lr}
   13af0:	add	fp, sp, #8
   13af4:	movw	r0, #21152	; 0x52a0
   13af8:	movt	r0, #5
   13afc:	ldr	r0, [r0]
   13b00:	tst	r0, #512	; 0x200
   13b04:	beq	13b28 <__assert_fail@plt+0xf6c>
   13b08:	movw	r4, #21156	; 0x52a4
   13b0c:	movt	r4, #5
   13b10:	ldr	r0, [r4]
   13b14:	cmp	r0, #0
   13b18:	poplt	{r4, sl, fp, pc}
   13b1c:	bl	12b74 <close@plt>
   13b20:	mvn	r0, #0
   13b24:	str	r0, [r4]
   13b28:	pop	{r4, sl, fp, pc}
   13b2c:	push	{r4, r5, r6, sl, fp, lr}
   13b30:	add	fp, sp, #16
   13b34:	sub	sp, sp, #8
   13b38:	mov	r4, r0
   13b3c:	ldr	r0, [r0, #80]	; 0x50
   13b40:	and	r0, r0, #61440	; 0xf000
   13b44:	cmp	r0, #40960	; 0xa000
   13b48:	bne	13b8c <__assert_fail@plt+0xfd0>
   13b4c:	movw	r1, #60999	; 0xee47
   13b50:	movt	r1, #3
   13b54:	mov	r0, #0
   13b58:	mov	r2, #5
   13b5c:	bl	1264c <dcgettext@plt>
   13b60:	mov	r5, r0
   13b64:	ldr	r1, [r4, #28]
   13b68:	mov	r0, #0
   13b6c:	bl	19314 <__assert_fail@plt+0x6758>
   13b70:	mov	r3, r0
   13b74:	mov	r0, #0
   13b78:	mov	r1, #0
   13b7c:	mov	r2, r5
   13b80:	sub	sp, fp, #16
   13b84:	pop	{r4, r5, r6, sl, fp, lr}
   13b88:	b	12790 <error@plt>
   13b8c:	movw	r1, #61120	; 0xeec0
   13b90:	movt	r1, #3
   13b94:	mov	r0, #0
   13b98:	mov	r2, #5
   13b9c:	bl	1264c <dcgettext@plt>
   13ba0:	mov	r5, r0
   13ba4:	ldr	r1, [r4, #28]
   13ba8:	mov	r0, #0
   13bac:	bl	19314 <__assert_fail@plt+0x6758>
   13bb0:	mov	r6, r0
   13bb4:	movw	r0, #24196	; 0x5e84
   13bb8:	movt	r0, #5
   13bbc:	ldr	r2, [r0, #72]	; 0x48
   13bc0:	ldr	r1, [r4]
   13bc4:	ldr	r0, [r1, #28]
   13bc8:	ldr	r1, [r1, #40]	; 0x28
   13bcc:	bl	13cb0 <__assert_fail@plt+0x10f4>
   13bd0:	str	r0, [sp]
   13bd4:	mov	r0, #0
   13bd8:	mov	r1, #0
   13bdc:	mov	r2, r5
   13be0:	mov	r3, r6
   13be4:	bl	12790 <error@plt>
   13be8:	sub	sp, fp, #16
   13bec:	pop	{r4, r5, r6, sl, fp, pc}
   13bf0:	push	{fp, lr}
   13bf4:	mov	fp, sp
   13bf8:	sub	sp, sp, #104	; 0x68
   13bfc:	movw	r1, #24196	; 0x5e84
   13c00:	movt	r1, #5
   13c04:	ldr	r2, [r1, #52]	; 0x34
   13c08:	mov	r1, sp
   13c0c:	blx	r2
   13c10:	cmp	r0, #0
   13c14:	moveq	r0, #0
   13c18:	moveq	sp, fp
   13c1c:	popeq	{fp, pc}
   13c20:	bl	128d4 <__errno_location@plt>
   13c24:	ldr	r0, [r0]
   13c28:	sub	r0, r0, #40	; 0x28
   13c2c:	clz	r0, r0
   13c30:	lsr	r0, r0, #5
   13c34:	mov	sp, fp
   13c38:	pop	{fp, pc}
   13c3c:	push	{r4, r5, r6, r7, fp, lr}
   13c40:	add	fp, sp, #16
   13c44:	mov	r6, r2
   13c48:	mov	r4, r1
   13c4c:	mov	r5, r0
   13c50:	ldrh	r0, [r1, #56]	; 0x38
   13c54:	orr	r0, r0, #1
   13c58:	subs	r0, r0, #11
   13c5c:	movwne	r0, #1
   13c60:	movw	r7, #24152	; 0x5e58
   13c64:	movt	r7, #5
   13c68:	strb	r0, [r7, #4]
   13c6c:	ldr	r0, [r1, #24]
   13c70:	ldr	r1, [r5, #32]
   13c74:	str	r0, [r7, #12]
   13c78:	str	r1, [r7, #16]
   13c7c:	bl	15fd8 <__assert_fail@plt+0x341c>
   13c80:	mov	r2, r0
   13c84:	ldr	r0, [r4, #28]
   13c88:	mov	r1, r6
   13c8c:	bl	191b0 <__assert_fail@plt+0x65f4>
   13c90:	ldrb	r0, [r7, #24]
   13c94:	cmp	r0, #0
   13c98:	popeq	{r4, r5, r6, r7, fp, pc}
   13c9c:	mov	r0, r5
   13ca0:	mov	r1, r4
   13ca4:	mov	r2, #4
   13ca8:	pop	{r4, r5, r6, r7, fp, lr}
   13cac:	b	2e754 <__assert_fail@plt+0x1bb98>
   13cb0:	mov	r3, r2
   13cb4:	cmp	r1, #0
   13cb8:	beq	13cf0 <__assert_fail@plt+0x1134>
   13cbc:	push	{r4, r5, r6, sl, fp, lr}
   13cc0:	add	fp, sp, #16
   13cc4:	mov	r4, r1
   13cc8:	mov	r5, r0
   13ccc:	ldrb	r6, [r0, r1]
   13cd0:	mov	r0, #0
   13cd4:	strb	r0, [r5, r1]
   13cd8:	mov	r0, #1
   13cdc:	mov	r1, r3
   13ce0:	mov	r2, r5
   13ce4:	bl	2a024 <__assert_fail@plt+0x17468>
   13ce8:	strb	r6, [r5, r4]
   13cec:	pop	{r4, r5, r6, sl, fp, pc}
   13cf0:	movw	r2, #2143	; 0x85f
   13cf4:	movt	r2, #4
   13cf8:	mov	r0, #1
   13cfc:	mov	r1, r3
   13d00:	b	2a024 <__assert_fail@plt+0x17468>
   13d04:	andeq	r0, r0, r0
   13d08:	push	{r4, sl, fp, lr}
   13d0c:	add	fp, sp, #8
   13d10:	sub	sp, sp, #8
   13d14:	mov	r4, r2
   13d18:	mov	r0, sp
   13d1c:	bl	2b07c <__assert_fail@plt+0x184c0>
   13d20:	ldm	sp, {r0, r1}
   13d24:	mov	r2, r4
   13d28:	mov	r3, #60	; 0x3c
   13d2c:	bl	13d38 <__assert_fail@plt+0x117c>
   13d30:	sub	sp, fp, #8
   13d34:	pop	{r4, sl, fp, pc}
   13d38:	push	{r4, sl, fp, lr}
   13d3c:	add	fp, sp, #8
   13d40:	mov	r4, r3
   13d44:	ldr	r3, [r2, #44]	; 0x2c
   13d48:	cmp	r3, #2
   13d4c:	beq	13d8c <__assert_fail@plt+0x11d0>
   13d50:	cmp	r3, #1
   13d54:	beq	13d7c <__assert_fail@plt+0x11c0>
   13d58:	cmp	r3, #0
   13d5c:	bne	13dc4 <__assert_fail@plt+0x1208>
   13d60:	ldrd	r2, [r2, #48]	; 0x30
   13d64:	bl	13e98 <__assert_fail@plt+0x12dc>
   13d68:	mov	r1, r0
   13d6c:	mov	r0, #0
   13d70:	cmp	r1, #0
   13d74:	movwgt	r0, #1
   13d78:	pop	{r4, sl, fp, pc}
   13d7c:	ldrd	r2, [r2, #48]	; 0x30
   13d80:	bl	13e98 <__assert_fail@plt+0x12dc>
   13d84:	lsr	r0, r0, #31
   13d88:	pop	{r4, sl, fp, pc}
   13d8c:	ldrd	r2, [r2, #48]	; 0x30
   13d90:	bl	15708 <__assert_fail@plt+0x2b4c>
   13d94:	mov	r0, #0
   13d98:	vmov	s2, r4
   13d9c:	vcvt.f64.s32	d16, s2
   13da0:	vcmpe.f64	d0, d16
   13da4:	vmrs	APSR_nzcv, fpscr
   13da8:	mov	r1, #0
   13dac:	movwls	r1, #1
   13db0:	vcmpe.f64	d0, #0.0
   13db4:	vmrs	APSR_nzcv, fpscr
   13db8:	movwgt	r0, #1
   13dbc:	and	r0, r0, r1
   13dc0:	pop	{r4, sl, fp, pc}
   13dc4:	movw	r0, #64905	; 0xfd89
   13dc8:	movt	r0, #3
   13dcc:	movw	r1, #61343	; 0xef9f
   13dd0:	movt	r1, #3
   13dd4:	movw	r3, #62322	; 0xf372
   13dd8:	movt	r3, #3
   13ddc:	mov	r2, #138	; 0x8a
   13de0:	bl	12bbc <__assert_fail@plt>
   13de4:	push	{r4, r5, r6, sl, fp, lr}
   13de8:	add	fp, sp, #16
   13dec:	mov	r5, r2
   13df0:	mov	r4, r1
   13df4:	mov	r6, r0
   13df8:	ldr	r2, [r2, #156]	; 0x9c
   13dfc:	cmp	r2, #0
   13e00:	beq	13e1c <__assert_fail@plt+0x1260>
   13e04:	mov	r0, r6
   13e08:	mov	r1, r4
   13e0c:	bl	191b0 <__assert_fail@plt+0x65f4>
   13e10:	cmp	r0, #0
   13e14:	moveq	r0, #0
   13e18:	popeq	{r4, r5, r6, sl, fp, pc}
   13e1c:	ldr	r2, [r5, #160]	; 0xa0
   13e20:	mov	r0, r6
   13e24:	mov	r1, r4
   13e28:	pop	{r4, r5, r6, sl, fp, lr}
   13e2c:	b	191b0 <__assert_fail@plt+0x65f4>
   13e30:	push	{r4, sl, fp, lr}
   13e34:	add	fp, sp, #8
   13e38:	sub	sp, sp, #8
   13e3c:	ldr	r0, [r2, #44]	; 0x2c
   13e40:	cmp	r0, #0
   13e44:	bne	13e78 <__assert_fail@plt+0x12bc>
   13e48:	mov	r4, r2
   13e4c:	mov	r0, sp
   13e50:	bl	2b07c <__assert_fail@plt+0x184c0>
   13e54:	ldrd	r2, [r4, #48]	; 0x30
   13e58:	ldm	sp, {r0, r1}
   13e5c:	bl	13e98 <__assert_fail@plt+0x12dc>
   13e60:	mov	r1, #0
   13e64:	cmp	r0, #0
   13e68:	movwgt	r1, #1
   13e6c:	mov	r0, r1
   13e70:	sub	sp, fp, #8
   13e74:	pop	{r4, sl, fp, pc}
   13e78:	movw	r0, #61304	; 0xef78
   13e7c:	movt	r0, #3
   13e80:	movw	r1, #61343	; 0xef9f
   13e84:	movt	r1, #3
   13e88:	movw	r3, #61350	; 0xefa6
   13e8c:	movt	r3, #3
   13e90:	mov	r2, #166	; 0xa6
   13e94:	bl	12bbc <__assert_fail@plt>
   13e98:	cmp	r0, r2
   13e9c:	moveq	ip, #0
   13ea0:	cmpeq	r1, r3
   13ea4:	beq	13ec8 <__assert_fail@plt+0x130c>
   13ea8:	push	{fp, lr}
   13eac:	mov	fp, sp
   13eb0:	bl	15708 <__assert_fail@plt+0x2b4c>
   13eb4:	mov	ip, #1
   13eb8:	vcmpe.f64	d0, #0.0
   13ebc:	vmrs	APSR_nzcv, fpscr
   13ec0:	mvnmi	ip, #0
   13ec4:	pop	{fp, lr}
   13ec8:	mov	r0, ip
   13ecc:	bx	lr
   13ed0:	push	{r4, sl, fp, lr}
   13ed4:	add	fp, sp, #8
   13ed8:	sub	sp, sp, #8
   13edc:	mov	r4, r2
   13ee0:	mov	r0, sp
   13ee4:	bl	2b07c <__assert_fail@plt+0x184c0>
   13ee8:	ldm	sp, {r0, r1}
   13eec:	movw	r3, #20864	; 0x5180
   13ef0:	movt	r3, #1
   13ef4:	mov	r2, r4
   13ef8:	bl	13d38 <__assert_fail@plt+0x117c>
   13efc:	sub	sp, fp, #8
   13f00:	pop	{r4, sl, fp, pc}
   13f04:	mov	r0, #1
   13f08:	bx	lr
   13f0c:	push	{r4, sl, fp, lr}
   13f10:	add	fp, sp, #8
   13f14:	sub	sp, sp, #8
   13f18:	mov	r4, r2
   13f1c:	mov	r0, sp
   13f20:	bl	2b088 <__assert_fail@plt+0x184cc>
   13f24:	ldm	sp, {r0, r1}
   13f28:	mov	r2, r4
   13f2c:	mov	r3, #60	; 0x3c
   13f30:	bl	13d38 <__assert_fail@plt+0x117c>
   13f34:	sub	sp, fp, #8
   13f38:	pop	{r4, sl, fp, pc}
   13f3c:	push	{r4, sl, fp, lr}
   13f40:	add	fp, sp, #8
   13f44:	sub	sp, sp, #8
   13f48:	ldr	r0, [r2, #44]	; 0x2c
   13f4c:	cmp	r0, #0
   13f50:	bne	13f84 <__assert_fail@plt+0x13c8>
   13f54:	mov	r4, r2
   13f58:	mov	r0, sp
   13f5c:	bl	2b088 <__assert_fail@plt+0x184cc>
   13f60:	ldrd	r2, [r4, #48]	; 0x30
   13f64:	ldm	sp, {r0, r1}
   13f68:	bl	13e98 <__assert_fail@plt+0x12dc>
   13f6c:	mov	r1, #0
   13f70:	cmp	r0, #0
   13f74:	movwgt	r1, #1
   13f78:	mov	r0, r1
   13f7c:	sub	sp, fp, #8
   13f80:	pop	{r4, sl, fp, pc}
   13f84:	movw	r0, #61304	; 0xef78
   13f88:	movt	r0, #3
   13f8c:	movw	r1, #61343	; 0xef9f
   13f90:	movt	r1, #3
   13f94:	movw	r3, #61417	; 0xefe9
   13f98:	movt	r3, #3
   13f9c:	mov	r2, #199	; 0xc7
   13fa0:	bl	12bbc <__assert_fail@plt>
   13fa4:	push	{r4, r5, r6, sl, fp, lr}
   13fa8:	add	fp, sp, #16
   13fac:	mov	r5, r2
   13fb0:	mov	r4, r1
   13fb4:	mov	r6, r0
   13fb8:	ldr	r2, [r2, #156]	; 0x9c
   13fbc:	cmp	r2, #0
   13fc0:	beq	13fd0 <__assert_fail@plt+0x1414>
   13fc4:	mov	r0, r6
   13fc8:	mov	r1, r4
   13fcc:	bl	191b0 <__assert_fail@plt+0x65f4>
   13fd0:	ldr	r2, [r5, #160]	; 0xa0
   13fd4:	mov	r0, r6
   13fd8:	mov	r1, r4
   13fdc:	pop	{r4, r5, r6, sl, fp, lr}
   13fe0:	b	191b0 <__assert_fail@plt+0x65f4>
   13fe4:	push	{r4, sl, fp, lr}
   13fe8:	add	fp, sp, #8
   13fec:	sub	sp, sp, #8
   13ff0:	mov	r4, r2
   13ff4:	mov	r0, sp
   13ff8:	bl	2b088 <__assert_fail@plt+0x184cc>
   13ffc:	ldm	sp, {r0, r1}
   14000:	movw	r3, #20864	; 0x5180
   14004:	movt	r3, #1
   14008:	mov	r2, r4
   1400c:	bl	13d38 <__assert_fail@plt+0x117c>
   14010:	sub	sp, fp, #8
   14014:	pop	{r4, sl, fp, pc}
   14018:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1401c:	add	fp, sp, #24
   14020:	mov	r6, r1
   14024:	mov	r8, r0
   14028:	movw	r5, #24152	; 0x5e58
   1402c:	movt	r5, #5
   14030:	ldr	r0, [r5, #12]
   14034:	movw	r1, #64308	; 0xfb34
   14038:	movt	r1, #3
   1403c:	bl	124cc <strcmp@plt>
   14040:	mov	r4, #1
   14044:	cmp	r0, #0
   14048:	beq	14128 <__assert_fail@plt+0x156c>
   1404c:	ldrb	r0, [r5, #4]
   14050:	cmp	r0, #0
   14054:	beq	14074 <__assert_fail@plt+0x14b8>
   14058:	ldr	r0, [r6, #16]
   1405c:	and	r0, r0, #61440	; 0xf000
   14060:	sub	r0, r0, #16384	; 0x4000
   14064:	clz	r0, r0
   14068:	lsr	r0, r0, #5
   1406c:	lsl	r7, r0, #9
   14070:	b	14078 <__assert_fail@plt+0x14bc>
   14074:	mov	r7, #0
   14078:	mov	r0, r7
   1407c:	bl	14130 <__assert_fail@plt+0x1574>
   14080:	cmp	r0, #0
   14084:	bne	14128 <__assert_fail@plt+0x156c>
   14088:	bl	128d4 <__errno_location@plt>
   1408c:	mov	r6, r0
   14090:	ldr	r0, [r0]
   14094:	cmp	r0, #2
   14098:	bne	140bc <__assert_fail@plt+0x1500>
   1409c:	movw	r1, #24196	; 0x5e84
   140a0:	movt	r1, #5
   140a4:	ldrb	r1, [r1, #14]
   140a8:	cmp	r1, #0
   140ac:	movne	r0, #0
   140b0:	strne	r0, [r6]
   140b4:	movne	r0, r4
   140b8:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   140bc:	cmp	r7, #0
   140c0:	cmpeq	r0, #21
   140c4:	beq	14118 <__assert_fail@plt+0x155c>
   140c8:	ldr	r6, [r6]
   140cc:	mov	r4, #0
   140d0:	movw	r1, #61484	; 0xf02c
   140d4:	movt	r1, #3
   140d8:	mov	r0, #0
   140dc:	mov	r2, #5
   140e0:	bl	1264c <dcgettext@plt>
   140e4:	mov	r7, r0
   140e8:	mov	r0, #0
   140ec:	mov	r1, r8
   140f0:	bl	19314 <__assert_fail@plt+0x6758>
   140f4:	mov	r3, r0
   140f8:	mov	r0, #0
   140fc:	mov	r1, r6
   14100:	mov	r2, r7
   14104:	bl	12790 <error@plt>
   14108:	mov	r0, #1
   1410c:	str	r0, [r5, #28]
   14110:	mov	r0, r4
   14114:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14118:	mov	r0, #512	; 0x200
   1411c:	bl	14130 <__assert_fail@plt+0x1574>
   14120:	cmp	r0, #0
   14124:	beq	140c8 <__assert_fail@plt+0x150c>
   14128:	mov	r0, r4
   1412c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14130:	push	{fp, lr}
   14134:	mov	fp, sp
   14138:	mov	r2, r0
   1413c:	movw	r0, #24152	; 0x5e58
   14140:	movt	r0, #5
   14144:	ldr	r1, [r0, #12]
   14148:	ldr	r0, [r0, #16]
   1414c:	bl	12538 <unlinkat@plt>
   14150:	clz	r0, r0
   14154:	lsr	r0, r0, #5
   14158:	pop	{fp, pc}
   1415c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14160:	add	fp, sp, #24
   14164:	mov	r8, r0
   14168:	ldr	r0, [r1, #16]
   1416c:	and	r0, r0, #61440	; 0xf000
   14170:	cmp	r0, #32768	; 0x8000
   14174:	beq	14270 <__assert_fail@plt+0x16b4>
   14178:	mov	r4, #0
   1417c:	cmp	r0, #16384	; 0x4000
   14180:	bne	14280 <__assert_fail@plt+0x16c4>
   14184:	bl	128d4 <__errno_location@plt>
   14188:	mov	r6, r0
   1418c:	mov	r4, #0
   14190:	str	r4, [r0]
   14194:	movw	r9, #24152	; 0x5e58
   14198:	movt	r9, #5
   1419c:	ldr	r1, [r9, #12]
   141a0:	ldr	r0, [r9, #16]
   141a4:	movw	r2, #18688	; 0x4900
   141a8:	movt	r2, #10
   141ac:	bl	25568 <__assert_fail@plt+0x129ac>
   141b0:	cmn	r0, #1
   141b4:	ble	14288 <__assert_fail@plt+0x16cc>
   141b8:	mov	r5, r0
   141bc:	bl	12a78 <fdopendir@plt>
   141c0:	cmp	r0, #0
   141c4:	beq	14290 <__assert_fail@plt+0x16d4>
   141c8:	mov	r7, r0
   141cc:	mov	r0, #0
   141d0:	str	r0, [r6]
   141d4:	mov	r0, r7
   141d8:	bl	12a6c <readdir64@plt>
   141dc:	cmp	r0, #0
   141e0:	beq	14220 <__assert_fail@plt+0x1664>
   141e4:	mov	r4, #0
   141e8:	ldrb	r1, [r0, #19]
   141ec:	cmp	r1, #46	; 0x2e
   141f0:	bne	14224 <__assert_fail@plt+0x1668>
   141f4:	ldrb	r1, [r0, #20]
   141f8:	cmp	r1, #0
   141fc:	beq	14210 <__assert_fail@plt+0x1654>
   14200:	cmp	r1, #46	; 0x2e
   14204:	ldrbeq	r0, [r0, #21]
   14208:	cmpeq	r0, #0
   1420c:	bne	14224 <__assert_fail@plt+0x1668>
   14210:	mov	r0, r7
   14214:	bl	12a6c <readdir64@plt>
   14218:	cmp	r0, #0
   1421c:	bne	141e8 <__assert_fail@plt+0x162c>
   14220:	mov	r4, #1
   14224:	ldr	r5, [r6]
   14228:	cmp	r5, #0
   1422c:	beq	142d4 <__assert_fail@plt+0x1718>
   14230:	mov	r4, #0
   14234:	mov	r0, #0
   14238:	mov	r1, r8
   1423c:	bl	19314 <__assert_fail@plt+0x6758>
   14240:	mov	r3, r0
   14244:	movw	r2, #19439	; 0x4bef
   14248:	movt	r2, #4
   1424c:	mov	r0, #0
   14250:	mov	r1, r5
   14254:	bl	12790 <error@plt>
   14258:	mov	r0, #1
   1425c:	str	r0, [r9, #28]
   14260:	mov	r0, r7
   14264:	bl	12b8c <closedir@plt>
   14268:	mov	r0, r4
   1426c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14270:	ldrd	r0, [r1, #48]	; 0x30
   14274:	orr	r0, r0, r1
   14278:	clz	r0, r0
   1427c:	lsr	r4, r0, #5
   14280:	mov	r0, r4
   14284:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14288:	ldr	r5, [r6]
   1428c:	b	142ec <__assert_fail@plt+0x1730>
   14290:	ldr	r6, [r6]
   14294:	mov	r4, #0
   14298:	mov	r0, #0
   1429c:	mov	r1, r8
   142a0:	bl	19314 <__assert_fail@plt+0x6758>
   142a4:	mov	r3, r0
   142a8:	movw	r2, #19439	; 0x4bef
   142ac:	movt	r2, #4
   142b0:	mov	r0, #0
   142b4:	mov	r1, r6
   142b8:	bl	12790 <error@plt>
   142bc:	mov	r0, #1
   142c0:	str	r0, [r9, #28]
   142c4:	mov	r0, r5
   142c8:	bl	12b74 <close@plt>
   142cc:	mov	r0, r4
   142d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   142d4:	mov	r0, r7
   142d8:	bl	12b8c <closedir@plt>
   142dc:	cmp	r0, #0
   142e0:	beq	14280 <__assert_fail@plt+0x16c4>
   142e4:	ldr	r5, [r6]
   142e8:	mov	r4, #0
   142ec:	mov	r0, #0
   142f0:	mov	r1, r8
   142f4:	bl	19314 <__assert_fail@plt+0x6758>
   142f8:	mov	r3, r0
   142fc:	movw	r2, #19439	; 0x4bef
   14300:	movt	r2, #4
   14304:	mov	r0, #0
   14308:	mov	r1, r5
   1430c:	bl	12790 <error@plt>
   14310:	mov	r0, #1
   14314:	str	r0, [r9, #28]
   14318:	mov	r0, r4
   1431c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14320:	b	15740 <__assert_fail@plt+0x2b84>
   14324:	movw	r0, #24152	; 0x5e58
   14328:	movt	r0, #5
   1432c:	ldr	r0, [r0, #12]
   14330:	b	15740 <__assert_fail@plt+0x2b84>
   14334:	mov	r0, #0
   14338:	bx	lr
   1433c:	push	{r4, r5, fp, lr}
   14340:	add	fp, sp, #8
   14344:	sub	sp, sp, #16
   14348:	mov	ip, r1
   1434c:	movw	r1, #24152	; 0x5e58
   14350:	movt	r1, #5
   14354:	ldr	lr, [r1, #12]
   14358:	ldr	r1, [r1, #16]
   1435c:	movw	r3, #24196	; 0x5e84
   14360:	movt	r3, #5
   14364:	ldr	r4, [r3, #20]
   14368:	ldr	r3, [r3, #40]	; 0x28
   1436c:	ldrb	r5, [r2, #32]
   14370:	ldr	r2, [r2, #44]	; 0x2c
   14374:	str	r4, [sp]
   14378:	stmib	sp, {r3, r5}
   1437c:	str	r2, [sp, #12]
   14380:	mov	r2, lr
   14384:	mov	r3, ip
   14388:	bl	20714 <__assert_fail@plt+0xdb58>
   1438c:	mov	r0, #1
   14390:	sub	sp, fp, #8
   14394:	pop	{r4, r5, fp, pc}
   14398:	push	{fp, lr}
   1439c:	mov	fp, sp
   143a0:	sub	sp, sp, #8
   143a4:	ldrb	ip, [r2, #52]	; 0x34
   143a8:	ldr	r1, [r2, #56]	; 0x38
   143ac:	ldr	r2, [r2, #44]	; 0x2c
   143b0:	str	r0, [sp]
   143b4:	movw	r3, #17340	; 0x43bc
   143b8:	movt	r3, #4
   143bc:	mov	r0, r2
   143c0:	mov	r2, ip
   143c4:	bl	21128 <__assert_fail@plt+0xe56c>
   143c8:	mov	r0, #1
   143cc:	mov	sp, fp
   143d0:	pop	{fp, pc}
   143d4:	push	{r4, sl, fp, lr}
   143d8:	add	fp, sp, #8
   143dc:	ldr	r4, [r2, #44]	; 0x2c
   143e0:	mov	r1, r4
   143e4:	bl	12b50 <fputs@plt>
   143e8:	mov	r0, #0
   143ec:	mov	r1, r4
   143f0:	bl	12a90 <putc@plt>
   143f4:	mov	r0, #1
   143f8:	pop	{r4, sl, fp, pc}
   143fc:	push	{r4, sl, fp, lr}
   14400:	add	fp, sp, #8
   14404:	mov	r4, r2
   14408:	mov	r2, r0
   1440c:	mov	r0, r1
   14410:	mov	r1, r2
   14414:	bl	1b330 <__assert_fail@plt+0x8774>
   14418:	ldr	r1, [r4, #40]	; 0x28
   1441c:	bl	124cc <strcmp@plt>
   14420:	clz	r0, r0
   14424:	lsr	r0, r0, #5
   14428:	pop	{r4, sl, fp, pc}
   1442c:	ldr	r0, [r2, #40]	; 0x28
   14430:	cmp	r0, #2
   14434:	beq	14464 <__assert_fail@plt+0x18a8>
   14438:	cmp	r0, #1
   1443c:	beq	14484 <__assert_fail@plt+0x18c8>
   14440:	cmp	r0, #0
   14444:	bne	1447c <__assert_fail@plt+0x18c0>
   14448:	ldr	r1, [r1, #28]
   1444c:	ldrd	r2, [r2, #48]	; 0x30
   14450:	mov	r0, #1
   14454:	subs	r1, r2, r1
   14458:	sbcs	r1, r3, #0
   1445c:	bcs	1447c <__assert_fail@plt+0x18c0>
   14460:	bx	lr
   14464:	ldr	r0, [r1, #28]
   14468:	ldrd	r2, [r2, #48]	; 0x30
   1446c:	eor	r0, r2, r0
   14470:	orrs	r0, r0, r3
   14474:	mov	r0, #1
   14478:	bxeq	lr
   1447c:	mov	r0, #0
   14480:	bx	lr
   14484:	ldrd	r2, [r2, #48]	; 0x30
   14488:	ldr	r1, [r1, #28]
   1448c:	mov	r0, #1
   14490:	subs	r1, r1, r2
   14494:	rscs	r1, r3, #0
   14498:	movcs	r0, #0
   1449c:	bx	lr
   144a0:	ldr	r0, [r1, #28]
   144a4:	ldr	r1, [r2, #40]	; 0x28
   144a8:	sub	r0, r1, r0
   144ac:	clz	r0, r0
   144b0:	lsr	r0, r0, #5
   144b4:	bx	lr
   144b8:	mov	r3, #1
   144bc:	b	144c0 <__assert_fail@plt+0x1904>
   144c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   144c4:	add	fp, sp, #24
   144c8:	mov	r8, r0
   144cc:	ldr	r0, [r1, #16]
   144d0:	and	r0, r0, #61440	; 0xf000
   144d4:	mov	r6, #0
   144d8:	cmp	r0, #40960	; 0xa000
   144dc:	bne	14550 <__assert_fail@plt+0x1994>
   144e0:	mov	r5, r3
   144e4:	mov	r7, r2
   144e8:	movw	r6, #24152	; 0x5e58
   144ec:	movt	r6, #5
   144f0:	ldr	r1, [r6, #12]
   144f4:	ldr	r0, [r6, #16]
   144f8:	bl	21914 <__assert_fail@plt+0xed58>
   144fc:	mov	r4, r0
   14500:	cmp	r0, #0
   14504:	beq	1452c <__assert_fail@plt+0x1970>
   14508:	ldr	r0, [r7, #40]	; 0x28
   1450c:	cmp	r5, #0
   14510:	movwne	r5, #16
   14514:	mov	r1, r4
   14518:	mov	r2, r5
   1451c:	bl	127b4 <fnmatch@plt>
   14520:	clz	r0, r0
   14524:	lsr	r6, r0, #5
   14528:	b	14548 <__assert_fail@plt+0x198c>
   1452c:	bl	128d4 <__errno_location@plt>
   14530:	ldr	r0, [r0]
   14534:	mov	r1, r8
   14538:	bl	18304 <__assert_fail@plt+0x5748>
   1453c:	mov	r0, #1
   14540:	str	r0, [r6, #28]
   14544:	mov	r6, #0
   14548:	mov	r0, r4
   1454c:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   14550:	mov	r0, r6
   14554:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14558:	ldr	r1, [r2, #40]	; 0x28
   1455c:	mov	r2, #16
   14560:	b	14564 <__assert_fail@plt+0x19a8>
   14564:	push	{r4, r5, r6, sl, fp, lr}
   14568:	add	fp, sp, #16
   1456c:	mov	r4, r2
   14570:	mov	r5, r1
   14574:	bl	21e98 <__assert_fail@plt+0xf2dc>
   14578:	mov	r6, r0
   1457c:	bl	21fb4 <__assert_fail@plt+0xf3f8>
   14580:	mov	r0, r5
   14584:	mov	r1, r6
   14588:	mov	r2, r4
   1458c:	bl	127b4 <fnmatch@plt>
   14590:	mov	r4, r0
   14594:	mov	r0, r6
   14598:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   1459c:	clz	r0, r4
   145a0:	lsr	r0, r0, #5
   145a4:	pop	{r4, r5, r6, sl, fp, pc}
   145a8:	push	{r4, r5, fp, lr}
   145ac:	add	fp, sp, #8
   145b0:	ldr	r0, [r2, #40]	; 0x28
   145b4:	cmp	r0, #2
   145b8:	beq	145e8 <__assert_fail@plt+0x1a2c>
   145bc:	cmp	r0, #1
   145c0:	beq	14614 <__assert_fail@plt+0x1a58>
   145c4:	cmp	r0, #0
   145c8:	bne	1460c <__assert_fail@plt+0x1a50>
   145cc:	ldrd	r4, [r1, #96]	; 0x60
   145d0:	ldrd	r2, [r2, #48]	; 0x30
   145d4:	mov	r0, #1
   145d8:	subs	r1, r2, r4
   145dc:	sbcs	r1, r3, r5
   145e0:	bcs	1460c <__assert_fail@plt+0x1a50>
   145e4:	pop	{r4, r5, fp, pc}
   145e8:	ldr	r0, [r2, #48]	; 0x30
   145ec:	ldr	r3, [r2, #52]	; 0x34
   145f0:	ldr	r2, [r1, #96]	; 0x60
   145f4:	ldr	r1, [r1, #100]	; 0x64
   145f8:	eor	r1, r1, r3
   145fc:	eor	r0, r2, r0
   14600:	orrs	r0, r0, r1
   14604:	mov	r0, #1
   14608:	popeq	{r4, r5, fp, pc}
   1460c:	mov	r0, #0
   14610:	pop	{r4, r5, fp, pc}
   14614:	ldrd	r2, [r2, #48]	; 0x30
   14618:	ldrd	r4, [r1, #96]	; 0x60
   1461c:	mov	r0, #1
   14620:	subs	r1, r4, r2
   14624:	sbcs	r1, r5, r3
   14628:	movcs	r0, #0
   1462c:	pop	{r4, r5, fp, pc}
   14630:	push	{fp, lr}
   14634:	mov	fp, sp
   14638:	mov	r1, r0
   1463c:	ldr	r0, [r2, #40]	; 0x28
   14640:	mov	r2, #16
   14644:	bl	127b4 <fnmatch@plt>
   14648:	clz	r0, r0
   1464c:	lsr	r0, r0, #5
   14650:	pop	{fp, pc}
   14654:	ldr	r0, [r2, #40]	; 0x28
   14658:	cmp	r0, #2
   1465c:	beq	1468c <__assert_fail@plt+0x1ad0>
   14660:	cmp	r0, #1
   14664:	beq	146ac <__assert_fail@plt+0x1af0>
   14668:	cmp	r0, #0
   1466c:	bne	146a4 <__assert_fail@plt+0x1ae8>
   14670:	ldr	r1, [r1, #20]
   14674:	ldrd	r2, [r2, #48]	; 0x30
   14678:	mov	r0, #1
   1467c:	subs	r1, r2, r1
   14680:	sbcs	r1, r3, #0
   14684:	bcs	146a4 <__assert_fail@plt+0x1ae8>
   14688:	bx	lr
   1468c:	ldr	r0, [r1, #20]
   14690:	ldrd	r2, [r2, #48]	; 0x30
   14694:	eor	r0, r2, r0
   14698:	orrs	r0, r0, r3
   1469c:	mov	r0, #1
   146a0:	bxeq	lr
   146a4:	mov	r0, #0
   146a8:	bx	lr
   146ac:	ldrd	r2, [r2, #48]	; 0x30
   146b0:	ldr	r1, [r1, #20]
   146b4:	mov	r0, #1
   146b8:	subs	r1, r1, r2
   146bc:	rscs	r1, r3, #0
   146c0:	movcs	r0, #0
   146c4:	bx	lr
   146c8:	mov	r3, #0
   146cc:	b	144c0 <__assert_fail@plt+0x1904>
   146d0:	push	{fp, lr}
   146d4:	mov	fp, sp
   146d8:	bl	1433c <__assert_fail@plt+0x1780>
   146dc:	mov	r0, #1
   146e0:	pop	{fp, pc}
   146e4:	push	{r4, sl, fp, lr}
   146e8:	add	fp, sp, #8
   146ec:	sub	sp, sp, #8
   146f0:	mov	r4, r2
   146f4:	mov	r0, sp
   146f8:	bl	2b094 <__assert_fail@plt+0x184d8>
   146fc:	ldm	sp, {r0, r1}
   14700:	mov	r2, r4
   14704:	mov	r3, #60	; 0x3c
   14708:	bl	13d38 <__assert_fail@plt+0x117c>
   1470c:	sub	sp, fp, #8
   14710:	pop	{r4, sl, fp, pc}
   14714:	push	{r4, sl, fp, lr}
   14718:	add	fp, sp, #8
   1471c:	sub	sp, sp, #8
   14720:	mov	r4, r2
   14724:	mov	r0, sp
   14728:	bl	2b094 <__assert_fail@plt+0x184d8>
   1472c:	ldm	sp, {r0, r1}
   14730:	movw	r3, #20864	; 0x5180
   14734:	movt	r3, #1
   14738:	mov	r2, r4
   1473c:	bl	13d38 <__assert_fail@plt+0x117c>
   14740:	sub	sp, fp, #8
   14744:	pop	{r4, sl, fp, pc}
   14748:	ldr	r1, [r2, #40]	; 0x28
   1474c:	mov	r2, #0
   14750:	b	14564 <__assert_fail@plt+0x19a8>
   14754:	push	{fp, lr}
   14758:	mov	fp, sp
   1475c:	ldr	r2, [r2, #160]	; 0xa0
   14760:	bl	191b0 <__assert_fail@plt+0x65f4>
   14764:	eor	r0, r0, #1
   14768:	pop	{fp, pc}
   1476c:	push	{r4, sl, fp, lr}
   14770:	add	fp, sp, #8
   14774:	sub	sp, sp, #8
   14778:	ldr	r0, [r2, #44]	; 0x2c
   1477c:	cmp	r0, #0
   14780:	bne	147b4 <__assert_fail@plt+0x1bf8>
   14784:	mov	r4, r2
   14788:	mov	r0, sp
   1478c:	bl	2b094 <__assert_fail@plt+0x184d8>
   14790:	ldrd	r2, [r4, #48]	; 0x30
   14794:	ldm	sp, {r0, r1}
   14798:	bl	13e98 <__assert_fail@plt+0x12dc>
   1479c:	mov	r1, #0
   147a0:	cmp	r0, #0
   147a4:	movwgt	r1, #1
   147a8:	mov	r0, r1
   147ac:	sub	sp, fp, #8
   147b0:	pop	{r4, sl, fp, pc}
   147b4:	movw	r0, #61304	; 0xef78
   147b8:	movt	r0, #3
   147bc:	movw	r1, #61343	; 0xef9f
   147c0:	movt	r1, #3
   147c4:	movw	r3, #61501	; 0xf03d
   147c8:	movt	r3, #3
   147cc:	movw	r2, #621	; 0x26d
   147d0:	bl	12bbc <__assert_fail@plt>
   147d4:	push	{r4, r5, r6, sl, fp, lr}
   147d8:	add	fp, sp, #16
   147dc:	sub	sp, sp, #8
   147e0:	mov	r5, r0
   147e4:	ldr	r0, [r2, #44]	; 0x2c
   147e8:	cmp	r0, #0
   147ec:	bne	148c0 <__assert_fail@plt+0x1d04>
   147f0:	mov	r4, r2
   147f4:	ldr	r0, [r2, #40]	; 0x28
   147f8:	cmp	r0, #4
   147fc:	bhi	148e0 <__assert_fail@plt+0x1d24>
   14800:	add	r2, pc, #0
   14804:	ldr	pc, [r2, r0, lsl #2]
   14808:	andeq	r4, r1, ip, lsl r8
   1480c:	andeq	r4, r1, r4, ror #16
   14810:	andeq	r4, r1, r8, lsr #16
   14814:	andeq	r4, r1, r4, lsr r8
   14818:	andeq	r4, r1, r0, lsl #18
   1481c:	mov	r0, sp
   14820:	bl	2b07c <__assert_fail@plt+0x184c0>
   14824:	b	1483c <__assert_fail@plt+0x1c80>
   14828:	mov	r0, sp
   1482c:	bl	2b088 <__assert_fail@plt+0x184cc>
   14830:	b	1483c <__assert_fail@plt+0x1c80>
   14834:	mov	r0, sp
   14838:	bl	2b094 <__assert_fail@plt+0x184d8>
   1483c:	ldr	r0, [sp]
   14840:	ldr	r1, [sp, #4]
   14844:	ldrd	r2, [r4, #48]	; 0x30
   14848:	bl	13e98 <__assert_fail@plt+0x12dc>
   1484c:	mov	r4, #0
   14850:	cmp	r0, #0
   14854:	movwgt	r4, #1
   14858:	mov	r0, r4
   1485c:	sub	sp, fp, #16
   14860:	pop	{r4, r5, r6, sl, fp, pc}
   14864:	mov	r0, sp
   14868:	bl	2b0a0 <__assert_fail@plt+0x184e4>
   1486c:	ldr	r1, [sp, #4]
   14870:	cmn	r1, #1
   14874:	ble	14880 <__assert_fail@plt+0x1cc4>
   14878:	ldr	r0, [sp]
   1487c:	b	14844 <__assert_fail@plt+0x1c88>
   14880:	mov	r4, #0
   14884:	movw	r1, #61676	; 0xf0ec
   14888:	movt	r1, #3
   1488c:	mov	r0, #0
   14890:	mov	r2, #5
   14894:	bl	1264c <dcgettext@plt>
   14898:	mov	r6, r0
   1489c:	mov	r0, #0
   148a0:	mov	r1, r5
   148a4:	bl	19314 <__assert_fail@plt+0x6758>
   148a8:	mov	r3, r0
   148ac:	mov	r0, #0
   148b0:	mov	r1, #0
   148b4:	mov	r2, r6
   148b8:	bl	12790 <error@plt>
   148bc:	b	14858 <__assert_fail@plt+0x1c9c>
   148c0:	movw	r0, #61304	; 0xef78
   148c4:	movt	r0, #3
   148c8:	movw	r1, #61343	; 0xef9f
   148cc:	movt	r1, #3
   148d0:	movw	r3, #61567	; 0xf07f
   148d4:	movt	r3, #3
   148d8:	movw	r2, #631	; 0x277
   148dc:	bl	12bbc <__assert_fail@plt>
   148e0:	movw	r0, #61724	; 0xf11c
   148e4:	movt	r0, #3
   148e8:	movw	r1, #61343	; 0xef9f
   148ec:	movt	r1, #3
   148f0:	movw	r3, #61567	; 0xf07f
   148f4:	movt	r3, #3
   148f8:	movw	r2, #667	; 0x29b
   148fc:	bl	12bbc <__assert_fail@plt>
   14900:	movw	r0, #61635	; 0xf0c3
   14904:	movt	r0, #3
   14908:	movw	r1, #61343	; 0xef9f
   1490c:	movt	r1, #3
   14910:	movw	r3, #61567	; 0xf07f
   14914:	movt	r3, #3
   14918:	mov	r2, #636	; 0x27c
   1491c:	bl	12bbc <__assert_fail@plt>
   14920:	push	{fp, lr}
   14924:	mov	fp, sp
   14928:	ldr	r0, [r1, #28]
   1492c:	bl	12b98 <getgrgid@plt>
   14930:	clz	r0, r0
   14934:	lsr	r0, r0, #5
   14938:	pop	{fp, pc}
   1493c:	push	{fp, lr}
   14940:	mov	fp, sp
   14944:	ldr	r0, [r1, #24]
   14948:	bl	124e4 <getpwuid@plt>
   1494c:	clz	r0, r0
   14950:	lsr	r0, r0, #5
   14954:	pop	{fp, pc}
   14958:	push	{r4, r5, r6, sl, fp, lr}
   1495c:	add	fp, sp, #16
   14960:	mov	r4, r2
   14964:	mov	r5, r1
   14968:	mov	r6, r0
   1496c:	ldr	r0, [r2, #132]	; 0x84
   14970:	ldr	r0, [r0]
   14974:	mov	r1, r6
   14978:	bl	1499c <__assert_fail@plt+0x1de0>
   1497c:	cmp	r0, #0
   14980:	moveq	r0, #0
   14984:	popeq	{r4, r5, r6, sl, fp, pc}
   14988:	mov	r0, r6
   1498c:	mov	r1, r5
   14990:	mov	r2, r4
   14994:	pop	{r4, r5, r6, sl, fp, lr}
   14998:	b	15740 <__assert_fail@plt+0x2b84>
   1499c:	push	{r4, r5, r6, r7, fp, lr}
   149a0:	add	fp, sp, #16
   149a4:	mov	r4, r1
   149a8:	mov	r5, r0
   149ac:	movw	r0, #21868	; 0x556c
   149b0:	movt	r0, #5
   149b4:	ldr	r0, [r0]
   149b8:	bl	2ca10 <__assert_fail@plt+0x19e54>
   149bc:	movw	r7, #21856	; 0x5560
   149c0:	movt	r7, #5
   149c4:	ldr	r6, [r7]
   149c8:	movw	r1, #62392	; 0xf3b8
   149cc:	movt	r1, #3
   149d0:	mov	r0, #0
   149d4:	mov	r2, #5
   149d8:	bl	1264c <dcgettext@plt>
   149dc:	mov	r1, r0
   149e0:	mov	r0, r6
   149e4:	mov	r2, r5
   149e8:	mov	r3, r4
   149ec:	bl	128c8 <fprintf@plt>
   149f0:	cmn	r0, #1
   149f4:	ble	14a08 <__assert_fail@plt+0x1e4c>
   149f8:	ldr	r0, [r7]
   149fc:	bl	2ca10 <__assert_fail@plt+0x19e54>
   14a00:	pop	{r4, r5, r6, r7, fp, lr}
   14a04:	b	2c424 <__assert_fail@plt+0x19868>
   14a08:	bl	128d4 <__errno_location@plt>
   14a0c:	ldr	r4, [r0]
   14a10:	movw	r1, #62409	; 0xf3c9
   14a14:	movt	r1, #3
   14a18:	mov	r0, #0
   14a1c:	mov	r2, #5
   14a20:	bl	1264c <dcgettext@plt>
   14a24:	mov	r2, r0
   14a28:	mov	r0, #1
   14a2c:	mov	r1, r4
   14a30:	bl	12790 <error@plt>
   14a34:	push	{r4, r5, fp, lr}
   14a38:	add	fp, sp, #8
   14a3c:	mov	r4, r2
   14a40:	mov	r5, r1
   14a44:	mov	r1, r0
   14a48:	ldr	r0, [r2, #132]	; 0x84
   14a4c:	ldr	r0, [r0]
   14a50:	bl	1499c <__assert_fail@plt+0x1de0>
   14a54:	cmp	r0, #0
   14a58:	moveq	r0, #0
   14a5c:	popeq	{r4, r5, fp, pc}
   14a60:	movw	r0, #24152	; 0x5e58
   14a64:	movt	r0, #5
   14a68:	ldr	r0, [r0, #12]
   14a6c:	mov	r1, r5
   14a70:	mov	r2, r4
   14a74:	pop	{r4, r5, fp, lr}
   14a78:	b	15740 <__assert_fail@plt+0x2b84>
   14a7c:	mov	r0, #1
   14a80:	bx	lr
   14a84:	push	{r4, r5, r6, sl, fp, lr}
   14a88:	add	fp, sp, #16
   14a8c:	mov	r5, r2
   14a90:	mov	r4, r1
   14a94:	mov	r6, r0
   14a98:	ldr	r2, [r2, #156]	; 0x9c
   14a9c:	cmp	r2, #0
   14aa0:	beq	14abc <__assert_fail@plt+0x1f00>
   14aa4:	mov	r0, r6
   14aa8:	mov	r1, r4
   14aac:	bl	191b0 <__assert_fail@plt+0x65f4>
   14ab0:	cmp	r0, #0
   14ab4:	movne	r0, #1
   14ab8:	popne	{r4, r5, r6, sl, fp, pc}
   14abc:	ldr	r2, [r5, #160]	; 0xa0
   14ac0:	mov	r0, r6
   14ac4:	mov	r1, r4
   14ac8:	pop	{r4, r5, r6, sl, fp, lr}
   14acc:	b	191b0 <__assert_fail@plt+0x65f4>
   14ad0:	push	{fp, lr}
   14ad4:	mov	fp, sp
   14ad8:	mov	r1, r0
   14adc:	ldr	r0, [r2, #40]	; 0x28
   14ae0:	mov	r2, #0
   14ae4:	bl	127b4 <fnmatch@plt>
   14ae8:	clz	r0, r0
   14aec:	lsr	r0, r0, #5
   14af0:	pop	{fp, pc}
   14af4:	ldr	r3, [r2, #40]!	; 0x28
   14af8:	ldr	r0, [r1, #16]
   14afc:	and	r1, r0, #61440	; 0xf000
   14b00:	sub	r1, r1, #16384	; 0x4000
   14b04:	clz	r1, r1
   14b08:	lsr	r1, r1, #5
   14b0c:	add	r1, r2, r1, lsl #2
   14b10:	ldr	r1, [r1, #4]
   14b14:	cmp	r3, #2
   14b18:	beq	14b4c <__assert_fail@plt+0x1f90>
   14b1c:	cmp	r3, #1
   14b20:	beq	14b34 <__assert_fail@plt+0x1f78>
   14b24:	cmp	r3, #0
   14b28:	bne	14b60 <__assert_fail@plt+0x1fa4>
   14b2c:	and	r0, r1, r0
   14b30:	b	14b50 <__assert_fail@plt+0x1f94>
   14b34:	cmp	r1, #0
   14b38:	moveq	r0, #1
   14b3c:	bxeq	lr
   14b40:	ands	r0, r1, r0
   14b44:	movwne	r0, #1
   14b48:	bx	lr
   14b4c:	bfc	r0, #12, #20
   14b50:	sub	r0, r0, r1
   14b54:	clz	r0, r0
   14b58:	lsr	r0, r0, #5
   14b5c:	bx	lr
   14b60:	push	{fp, lr}
   14b64:	mov	fp, sp
   14b68:	bl	12b68 <abort@plt>
   14b6c:	push	{fp, lr}
   14b70:	mov	fp, sp
   14b74:	movw	r0, #24152	; 0x5e58
   14b78:	movt	r0, #5
   14b7c:	ldr	r1, [r0, #12]
   14b80:	ldr	r0, [r0, #16]
   14b84:	mov	r2, #1
   14b88:	mov	r3, #0
   14b8c:	bl	12580 <faccessat@plt>
   14b90:	clz	r0, r0
   14b94:	lsr	r0, r0, #5
   14b98:	pop	{fp, pc}
   14b9c:	push	{fp, lr}
   14ba0:	mov	fp, sp
   14ba4:	movw	r0, #24152	; 0x5e58
   14ba8:	movt	r0, #5
   14bac:	ldr	r1, [r0, #12]
   14bb0:	ldr	r0, [r0, #16]
   14bb4:	mov	r2, #4
   14bb8:	mov	r3, #0
   14bbc:	bl	12580 <faccessat@plt>
   14bc0:	clz	r0, r0
   14bc4:	lsr	r0, r0, #5
   14bc8:	pop	{fp, pc}
   14bcc:	push	{fp, lr}
   14bd0:	mov	fp, sp
   14bd4:	movw	r0, #24152	; 0x5e58
   14bd8:	movt	r0, #5
   14bdc:	ldr	r1, [r0, #12]
   14be0:	ldr	r0, [r0, #16]
   14be4:	mov	r2, #2
   14be8:	mov	r3, #0
   14bec:	bl	12580 <faccessat@plt>
   14bf0:	clz	r0, r0
   14bf4:	lsr	r0, r0, #5
   14bf8:	pop	{fp, pc}
   14bfc:	push	{fp, lr}
   14c00:	mov	fp, sp
   14c04:	sub	sp, sp, #8
   14c08:	ldrb	ip, [r2, #52]	; 0x34
   14c0c:	ldr	r1, [r2, #56]	; 0x38
   14c10:	ldr	r2, [r2, #44]	; 0x2c
   14c14:	str	r0, [sp]
   14c18:	movw	r3, #17340	; 0x43bc
   14c1c:	movt	r3, #4
   14c20:	mov	r0, r2
   14c24:	mov	r2, ip
   14c28:	bl	21128 <__assert_fail@plt+0xe56c>
   14c2c:	mov	r0, #1
   14c30:	mov	sp, fp
   14c34:	pop	{fp, pc}
   14c38:	push	{fp, lr}
   14c3c:	mov	fp, sp
   14c40:	bl	143d4 <__assert_fail@plt+0x1818>
   14c44:	mov	r0, #1
   14c48:	pop	{fp, pc}
   14c4c:	movw	r0, #24196	; 0x5e84
   14c50:	movt	r0, #5
   14c54:	ldrb	r0, [r0]
   14c58:	cmp	r0, #0
   14c5c:	beq	14c90 <__assert_fail@plt+0x20d4>
   14c60:	movw	r0, #24152	; 0x5e58
   14c64:	movt	r0, #5
   14c68:	ldrb	r2, [r0, #4]
   14c6c:	cmp	r2, #0
   14c70:	beq	14c98 <__assert_fail@plt+0x20dc>
   14c74:	cmp	r1, #0
   14c78:	beq	14c90 <__assert_fail@plt+0x20d4>
   14c7c:	ldr	r1, [r1, #16]
   14c80:	and	r1, r1, #61440	; 0xf000
   14c84:	cmp	r1, #16384	; 0x4000
   14c88:	moveq	r1, #1
   14c8c:	strbeq	r1, [r0, #24]
   14c90:	mov	r0, #1
   14c94:	bx	lr
   14c98:	push	{fp, lr}
   14c9c:	mov	fp, sp
   14ca0:	movw	r0, #60647	; 0xece7
   14ca4:	movt	r0, #3
   14ca8:	movw	r1, #61343	; 0xef9f
   14cac:	movt	r1, #3
   14cb0:	movw	r3, #61734	; 0xf126
   14cb4:	movt	r3, #3
   14cb8:	movw	r2, #853	; 0x355
   14cbc:	bl	12bbc <__assert_fail@plt>
   14cc0:	push	{fp, lr}
   14cc4:	mov	fp, sp
   14cc8:	bl	18594 <__assert_fail@plt+0x59d8>
   14ccc:	movw	r0, #24152	; 0x5e58
   14cd0:	movt	r0, #5
   14cd4:	ldr	r0, [r0, #28]
   14cd8:	bl	1285c <exit@plt>
   14cdc:	push	{r4, r5, r6, sl, fp, lr}
   14ce0:	add	fp, sp, #16
   14ce4:	sub	sp, sp, #8
   14ce8:	mov	r4, r2
   14cec:	mov	r5, r0
   14cf0:	bl	1288c <strlen@plt>
   14cf4:	mov	r6, r0
   14cf8:	ldr	r0, [r4, #40]	; 0x28
   14cfc:	mov	r1, #0
   14d00:	str	r1, [sp]
   14d04:	mov	r1, r5
   14d08:	mov	r2, r6
   14d0c:	mov	r3, #0
   14d10:	bl	30b54 <__assert_fail@plt+0x1df98>
   14d14:	sub	r0, r0, r6
   14d18:	clz	r0, r0
   14d1c:	lsr	r0, r0, #5
   14d20:	sub	sp, fp, #16
   14d24:	pop	{r4, r5, r6, sl, fp, pc}
   14d28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d2c:	add	fp, sp, #28
   14d30:	sub	sp, sp, #4
   14d34:	mov	sl, r2
   14d38:	ldrd	r8, [r1, #48]	; 0x30
   14d3c:	ldrd	r6, [r2, #40]	; 0x28
   14d40:	asr	r5, r7, #31
   14d44:	mov	r0, r8
   14d48:	mov	r1, r9
   14d4c:	mov	r2, r7
   14d50:	mov	r3, r5
   14d54:	bl	3e5dc <__assert_fail@plt+0x2ba20>
   14d58:	umull	r4, r2, r0, r7
   14d5c:	mla	r2, r0, r5, r2
   14d60:	mla	r7, r1, r7, r2
   14d64:	adds	r2, r0, #1
   14d68:	adc	r3, r1, #0
   14d6c:	subs	r5, r8, r4
   14d70:	sbc	r7, r9, r7
   14d74:	orrs	r7, r5, r7
   14d78:	moveq	r3, r1
   14d7c:	moveq	r2, r0
   14d80:	cmp	r6, #2
   14d84:	beq	14db4 <__assert_fail@plt+0x21f8>
   14d88:	cmp	r6, #1
   14d8c:	beq	14dd8 <__assert_fail@plt+0x221c>
   14d90:	cmp	r6, #0
   14d94:	bne	14dcc <__assert_fail@plt+0x2210>
   14d98:	ldrd	r4, [sl, #48]	; 0x30
   14d9c:	mov	r0, #1
   14da0:	subs	r1, r4, r2
   14da4:	sbcs	r1, r5, r3
   14da8:	bcs	14dcc <__assert_fail@plt+0x2210>
   14dac:	sub	sp, fp, #28
   14db0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14db4:	ldrd	r0, [sl, #48]	; 0x30
   14db8:	eor	r1, r3, r1
   14dbc:	eor	r0, r2, r0
   14dc0:	orrs	r0, r0, r1
   14dc4:	mov	r0, #1
   14dc8:	beq	14dac <__assert_fail@plt+0x21f0>
   14dcc:	mov	r0, #0
   14dd0:	sub	sp, fp, #28
   14dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14dd8:	ldrd	r4, [sl, #48]	; 0x30
   14ddc:	mov	r0, #1
   14de0:	subs	r1, r2, r4
   14de4:	sbcs	r1, r3, r5
   14de8:	movcs	r0, #0
   14dec:	sub	sp, fp, #28
   14df0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14df4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14df8:	add	fp, sp, #24
   14dfc:	mov	r5, r2
   14e00:	mov	r4, r1
   14e04:	mov	r2, r0
   14e08:	mov	r6, r1
   14e0c:	ldr	r0, [r6, #96]!	; 0x60
   14e10:	ldr	r1, [r6, #4]
   14e14:	orrs	r3, r0, r1
   14e18:	beq	14e34 <__assert_fail@plt+0x2278>
   14e1c:	ldrd	r8, [r5, #40]	; 0x28
   14e20:	eor	r1, r1, r9
   14e24:	eor	r0, r0, r8
   14e28:	orrs	r0, r0, r1
   14e2c:	mov	r0, #0
   14e30:	bne	14e5c <__assert_fail@plt+0x22a0>
   14e34:	movw	r0, #24152	; 0x5e58
   14e38:	movt	r0, #5
   14e3c:	ldr	r1, [r0, #12]
   14e40:	mov	r0, r2
   14e44:	mov	r2, r4
   14e48:	bl	18218 <__assert_fail@plt+0x565c>
   14e4c:	mov	r1, r0
   14e50:	mov	r0, #0
   14e54:	cmp	r1, #0
   14e58:	beq	14e60 <__assert_fail@plt+0x22a4>
   14e5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14e60:	ldrd	r2, [r5, #40]	; 0x28
   14e64:	ldrd	r6, [r6]
   14e68:	eor	r1, r7, r3
   14e6c:	eor	r2, r6, r2
   14e70:	orrs	r1, r2, r1
   14e74:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   14e78:	ldrd	r0, [r5, #48]	; 0x30
   14e7c:	ldrd	r2, [r4]
   14e80:	eor	r1, r3, r1
   14e84:	eor	r0, r2, r0
   14e88:	orr	r0, r0, r1
   14e8c:	clz	r0, r0
   14e90:	lsr	r0, r0, #5
   14e94:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14e98:	mov	r0, #1
   14e9c:	bx	lr
   14ea0:	movw	ip, #24152	; 0x5e58
   14ea4:	movt	ip, #5
   14ea8:	ldrb	r0, [ip, #5]
   14eac:	cmp	r0, #0
   14eb0:	beq	14f20 <__assert_fail@plt+0x2364>
   14eb4:	ldr	r3, [ip, #8]
   14eb8:	mov	r0, #0
   14ebc:	cmp	r3, #0
   14ec0:	bxeq	lr
   14ec4:	ldrb	r0, [ip, #4]
   14ec8:	cmp	r0, #0
   14ecc:	ldrne	r3, [r1, #16]
   14ed0:	and	r0, r3, #61440	; 0xf000
   14ed4:	sub	r1, r0, #4096	; 0x1000
   14ed8:	lsr	r0, r1, #12
   14edc:	cmp	r0, #11
   14ee0:	bhi	14ef8 <__assert_fail@plt+0x233c>
   14ee4:	uxth	r3, r0
   14ee8:	movw	ip, #2731	; 0xaab
   14eec:	mov	r0, #1
   14ef0:	tst	r0, ip, lsr r3
   14ef4:	bne	14f00 <__assert_fail@plt+0x2344>
   14ef8:	mov	r0, #0
   14efc:	bx	lr
   14f00:	movw	r3, #62448	; 0xf3f0
   14f04:	movt	r3, #3
   14f08:	ldr	r1, [r3, r1, asr #10]
   14f0c:	add	r1, r2, r1
   14f10:	ldrb	r1, [r1, #40]	; 0x28
   14f14:	cmp	r1, #0
   14f18:	moveq	r0, #0
   14f1c:	bx	lr
   14f20:	push	{fp, lr}
   14f24:	mov	fp, sp
   14f28:	movw	r0, #61800	; 0xf168
   14f2c:	movt	r0, #3
   14f30:	movw	r1, #61343	; 0xef9f
   14f34:	movt	r1, #3
   14f38:	movw	r3, #61816	; 0xf178
   14f3c:	movt	r3, #3
   14f40:	movw	r2, #977	; 0x3d1
   14f44:	bl	12bbc <__assert_fail@plt>
   14f48:	ldr	r0, [r2, #40]	; 0x28
   14f4c:	cmp	r0, #2
   14f50:	beq	14f80 <__assert_fail@plt+0x23c4>
   14f54:	cmp	r0, #1
   14f58:	beq	14fa0 <__assert_fail@plt+0x23e4>
   14f5c:	cmp	r0, #0
   14f60:	bne	14f98 <__assert_fail@plt+0x23dc>
   14f64:	ldr	r1, [r1, #24]
   14f68:	ldrd	r2, [r2, #48]	; 0x30
   14f6c:	mov	r0, #1
   14f70:	subs	r1, r2, r1
   14f74:	sbcs	r1, r3, #0
   14f78:	bcs	14f98 <__assert_fail@plt+0x23dc>
   14f7c:	bx	lr
   14f80:	ldr	r0, [r1, #24]
   14f84:	ldrd	r2, [r2, #48]	; 0x30
   14f88:	eor	r0, r2, r0
   14f8c:	orrs	r0, r0, r3
   14f90:	mov	r0, #1
   14f94:	bxeq	lr
   14f98:	mov	r0, #0
   14f9c:	bx	lr
   14fa0:	ldrd	r2, [r2, #48]	; 0x30
   14fa4:	ldr	r1, [r1, #24]
   14fa8:	mov	r0, #1
   14fac:	subs	r1, r1, r2
   14fb0:	rscs	r1, r3, #0
   14fb4:	movcs	r0, #0
   14fb8:	bx	lr
   14fbc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14fc0:	add	fp, sp, #24
   14fc4:	sub	sp, sp, #8
   14fc8:	mov	r8, r2
   14fcc:	mov	r4, r1
   14fd0:	mov	r0, sp
   14fd4:	bl	2b07c <__assert_fail@plt+0x184c0>
   14fd8:	ldm	sp, {r5, r6}
   14fdc:	mov	r0, sp
   14fe0:	mov	r1, r4
   14fe4:	bl	2b088 <__assert_fail@plt+0x184cc>
   14fe8:	ldr	r7, [sp]
   14fec:	ldr	r4, [sp, #4]
   14ff0:	mov	r0, r5
   14ff4:	mov	r1, r6
   14ff8:	mov	r2, r7
   14ffc:	mov	r3, r4
   15000:	bl	13e98 <__assert_fail@plt+0x12dc>
   15004:	cmp	r0, #0
   15008:	movlt	r0, #0
   1500c:	sublt	sp, fp, #24
   15010:	poplt	{r4, r5, r6, r7, r8, sl, fp, pc}
   15014:	sub	r1, r4, r6
   15018:	sub	r0, r7, r5
   1501c:	add	r0, r0, r1, asr #31
   15020:	movw	r2, #51712	; 0xca00
   15024:	movt	r2, #15258	; 0x3b9a
   15028:	cmp	r1, #0
   1502c:	addlt	r1, r1, r2
   15030:	movw	r3, #20864	; 0x5180
   15034:	movt	r3, #1
   15038:	mov	r2, r8
   1503c:	bl	13d38 <__assert_fail@plt+0x117c>
   15040:	sub	sp, fp, #24
   15044:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15048:	ldr	r0, [r1, #24]
   1504c:	ldr	r1, [r2, #40]	; 0x28
   15050:	sub	r0, r1, r0
   15054:	clz	r0, r0
   15058:	lsr	r0, r0, #5
   1505c:	bx	lr
   15060:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15064:	add	fp, sp, #24
   15068:	sub	sp, sp, #104	; 0x68
   1506c:	mov	r4, r2
   15070:	mov	r8, r1
   15074:	mov	r5, r0
   15078:	bl	18a30 <__assert_fail@plt+0x5e74>
   1507c:	mov	r7, r0
   15080:	mov	r6, sp
   15084:	mov	r0, r6
   15088:	bl	18214 <__assert_fail@plt+0x5658>
   1508c:	movw	r0, #35108	; 0x8924
   15090:	movt	r0, #1
   15094:	movw	r2, #34984	; 0x88a8
   15098:	movt	r2, #1
   1509c:	cmp	r7, #0
   150a0:	movne	r2, r0
   150a4:	movw	r7, #24152	; 0x5e58
   150a8:	movt	r7, #5
   150ac:	ldr	r0, [r7, #12]
   150b0:	mov	r1, r6
   150b4:	blx	r2
   150b8:	cmp	r0, #0
   150bc:	beq	15120 <__assert_fail@plt+0x2564>
   150c0:	bl	18a30 <__assert_fail@plt+0x5e74>
   150c4:	cmp	r0, #0
   150c8:	beq	150e4 <__assert_fail@plt+0x2528>
   150cc:	bl	128d4 <__errno_location@plt>
   150d0:	ldr	r0, [r0]
   150d4:	cmp	r0, #2
   150d8:	bne	150e4 <__assert_fail@plt+0x2528>
   150dc:	mov	r1, r8
   150e0:	b	15124 <__assert_fail@plt+0x2568>
   150e4:	bl	128d4 <__errno_location@plt>
   150e8:	ldr	r6, [r0]
   150ec:	mov	r4, #0
   150f0:	mov	r0, #0
   150f4:	mov	r1, r5
   150f8:	bl	19314 <__assert_fail@plt+0x6758>
   150fc:	mov	r3, r0
   15100:	movw	r2, #19439	; 0x4bef
   15104:	movt	r2, #4
   15108:	mov	r0, #0
   1510c:	mov	r1, r6
   15110:	bl	12790 <error@plt>
   15114:	mov	r0, #1
   15118:	str	r0, [r7, #28]
   1511c:	b	15130 <__assert_fail@plt+0x2574>
   15120:	mov	r1, sp
   15124:	mov	r2, r4
   15128:	bl	14ea0 <__assert_fail@plt+0x22e4>
   1512c:	mov	r4, r0
   15130:	mov	r0, r4
   15134:	sub	sp, fp, #24
   15138:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1513c:	push	{r4, r5, r6, r7, fp, lr}
   15140:	add	fp, sp, #16
   15144:	sub	sp, sp, #8
   15148:	mov	r5, r2
   1514c:	mov	r4, r0
   15150:	movw	r0, #24152	; 0x5e58
   15154:	movt	r0, #5
   15158:	ldr	r1, [r0, #12]
   1515c:	ldr	r0, [r0, #16]
   15160:	movw	r2, #24196	; 0x5e84
   15164:	movt	r2, #5
   15168:	ldr	r3, [r2, #64]	; 0x40
   1516c:	add	r2, sp, #4
   15170:	blx	r3
   15174:	cmn	r0, #1
   15178:	ble	151a4 <__assert_fail@plt+0x25e8>
   1517c:	ldr	r0, [r5, #40]	; 0x28
   15180:	ldr	r1, [sp, #4]
   15184:	mov	r2, #0
   15188:	bl	127b4 <fnmatch@plt>
   1518c:	mov	r4, r0
   15190:	ldr	r0, [sp, #4]
   15194:	bl	12acc <freecon@plt>
   15198:	clz	r0, r4
   1519c:	lsr	r5, r0, #5
   151a0:	b	151e8 <__assert_fail@plt+0x262c>
   151a4:	bl	128d4 <__errno_location@plt>
   151a8:	ldr	r6, [r0]
   151ac:	mov	r5, #0
   151b0:	movw	r1, #61881	; 0xf1b9
   151b4:	movt	r1, #3
   151b8:	mov	r0, #0
   151bc:	mov	r2, #5
   151c0:	bl	1264c <dcgettext@plt>
   151c4:	mov	r7, r0
   151c8:	mov	r0, #0
   151cc:	mov	r1, r4
   151d0:	bl	19314 <__assert_fail@plt+0x6758>
   151d4:	mov	r3, r0
   151d8:	mov	r0, #0
   151dc:	mov	r1, r6
   151e0:	mov	r2, r7
   151e4:	bl	12790 <error@plt>
   151e8:	mov	r0, r5
   151ec:	sub	sp, fp, #16
   151f0:	pop	{r4, r5, r6, r7, fp, pc}
   151f4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   151f8:	add	fp, sp, #24
   151fc:	sub	sp, sp, #256	; 0x100
   15200:	mov	r4, r0
   15204:	cmp	r1, #0
   15208:	beq	15244 <__assert_fail@plt+0x2688>
   1520c:	mov	r5, r1
   15210:	mov	r6, sp
   15214:	movw	r7, #61903	; 0xf1cf
   15218:	movt	r7, #3
   1521c:	ldr	r0, [r5, #4]
   15220:	mov	r1, r6
   15224:	bl	15258 <__assert_fail@plt+0x269c>
   15228:	mov	r2, r0
   1522c:	mov	r0, r4
   15230:	mov	r1, r7
   15234:	bl	128c8 <fprintf@plt>
   15238:	ldr	r5, [r5, #152]	; 0x98
   1523c:	cmp	r5, #0
   15240:	bne	1521c <__assert_fail@plt+0x2660>
   15244:	mov	r0, #10
   15248:	mov	r1, r4
   1524c:	bl	12a3c <fputc@plt>
   15250:	sub	sp, fp, #24
   15254:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15258:	push	{r4, sl, fp, lr}
   1525c:	add	fp, sp, #8
   15260:	cmp	r0, #0
   15264:	moveq	r4, #0
   15268:	moveq	r0, r4
   1526c:	popeq	{r4, sl, fp, pc}
   15270:	mov	r4, r1
   15274:	mov	r1, r0
   15278:	mov	r0, r4
   1527c:	bl	12748 <strcpy@plt>
   15280:	mov	r0, r4
   15284:	bl	1288c <strlen@plt>
   15288:	sub	r1, r0, #1
   1528c:	cmp	r1, #0
   15290:	blt	152c0 <__assert_fail@plt+0x2704>
   15294:	sub	r1, r4, #1
   15298:	ldrb	r2, [r1, r0]
   1529c:	cmp	r2, #32
   152a0:	cmpne	r2, #9
   152a4:	bne	152c0 <__assert_fail@plt+0x2704>
   152a8:	sub	r2, r0, #1
   152ac:	sub	r0, r0, #2
   152b0:	cmn	r0, #1
   152b4:	mov	r0, r2
   152b8:	bgt	15298 <__assert_fail@plt+0x26dc>
   152bc:	b	152c4 <__assert_fail@plt+0x2708>
   152c0:	mov	r2, r0
   152c4:	mov	r0, #0
   152c8:	strb	r0, [r4, r2]
   152cc:	mov	r0, r4
   152d0:	pop	{r4, sl, fp, pc}
   152d4:	cmp	r1, #0
   152d8:	bxeq	lr
   152dc:	push	{r4, r5, fp, lr}
   152e0:	add	fp, sp, #8
   152e4:	sub	sp, sp, #8
   152e8:	mov	r5, r1
   152ec:	mov	r4, r0
   152f0:	ldr	r1, [r1, #156]	; 0x9c
   152f4:	bl	15408 <__assert_fail@plt+0x284c>
   152f8:	ldrb	r0, [r5, #18]
   152fc:	ldrb	r1, [r5, #19]
   15300:	ldrb	r2, [r5, #20]
   15304:	movw	ip, #2143	; 0x85f
   15308:	movt	ip, #4
   1530c:	movw	r3, #61942	; 0xf1f6
   15310:	movt	r3, #3
   15314:	cmp	r2, #0
   15318:	moveq	r3, ip
   1531c:	str	r3, [sp]
   15320:	movw	r2, #61916	; 0xf1dc
   15324:	movt	r2, #3
   15328:	cmp	r0, #0
   1532c:	moveq	r2, ip
   15330:	movw	r3, #61929	; 0xf1e9
   15334:	movt	r3, #3
   15338:	cmp	r1, #0
   1533c:	moveq	r3, ip
   15340:	movw	r1, #61909	; 0xf1d5
   15344:	movt	r1, #3
   15348:	mov	r0, r4
   1534c:	bl	128c8 <fprintf@plt>
   15350:	mov	r0, r4
   15354:	mov	r1, r5
   15358:	bl	15fa8 <__assert_fail@plt+0x33ec>
   1535c:	vldr	s0, [r5, #28]
   15360:	vcvt.f64.f32	d16, s0
   15364:	vmov	r2, r3, d16
   15368:	movw	r1, #61955	; 0xf203
   1536c:	movt	r1, #3
   15370:	mov	r0, r4
   15374:	bl	128c8 <fprintf@plt>
   15378:	movw	r0, #24196	; 0x5e84
   1537c:	movt	r0, #5
   15380:	ldrb	r0, [r0, #44]	; 0x2c
   15384:	tst	r0, #64	; 0x40
   15388:	beq	153f4 <__assert_fail@plt+0x2838>
   1538c:	ldr	r3, [r5, #164]	; 0xa4
   15390:	ldr	r2, [r5, #168]	; 0xa8
   15394:	movw	r1, #61981	; 0xf21d
   15398:	movt	r1, #3
   1539c:	mov	r0, r4
   153a0:	bl	128c8 <fprintf@plt>
   153a4:	ldr	r0, [r5, #164]	; 0xa4
   153a8:	cmp	r0, #0
   153ac:	beq	153dc <__assert_fail@plt+0x2820>
   153b0:	vldr	s0, [r5, #168]	; 0xa8
   153b4:	vmov	s2, r0
   153b8:	vcvt.f64.u32	d16, s2
   153bc:	vcvt.f64.u32	d17, s0
   153c0:	vdiv.f64	d16, d17, d16
   153c4:	vmov	r2, r3, d16
   153c8:	movw	r1, #62008	; 0xf238
   153cc:	movt	r1, #3
   153d0:	mov	r0, r4
   153d4:	bl	128c8 <fprintf@plt>
   153d8:	b	153f4 <__assert_fail@plt+0x2838>
   153dc:	movw	r0, #62016	; 0xf240
   153e0:	movt	r0, #3
   153e4:	mov	r1, #4
   153e8:	mov	r2, #1
   153ec:	mov	r3, r4
   153f0:	bl	12700 <fwrite@plt>
   153f4:	ldr	r1, [r5, #160]	; 0xa0
   153f8:	mov	r0, r4
   153fc:	sub	sp, fp, #8
   15400:	pop	{r4, r5, fp, lr}
   15404:	b	15408 <__assert_fail@plt+0x284c>
   15408:	push	{r4, r5, fp, lr}
   1540c:	add	fp, sp, #8
   15410:	cmp	r1, #0
   15414:	popeq	{r4, r5, fp, pc}
   15418:	mov	r5, r1
   1541c:	mov	r4, r0
   15420:	movw	r0, #19076	; 0x4a84
   15424:	movt	r0, #1
   15428:	movw	r1, #15844	; 0x3de4
   1542c:	movt	r1, #1
   15430:	ldr	r2, [r5]
   15434:	cmp	r2, r0
   15438:	cmpne	r2, r1
   1543c:	bne	1545c <__assert_fail@plt+0x28a0>
   15440:	ldr	r2, [r5, #156]	; 0x9c
   15444:	cmp	r2, #0
   15448:	bne	1545c <__assert_fail@plt+0x28a0>
   1544c:	ldr	r5, [r5, #160]	; 0xa0
   15450:	cmp	r5, #0
   15454:	bne	15430 <__assert_fail@plt+0x2874>
   15458:	pop	{r4, r5, fp, pc}
   1545c:	ldr	r0, [r5, #156]	; 0x9c
   15460:	cmp	r0, #0
   15464:	bne	15474 <__assert_fail@plt+0x28b8>
   15468:	ldr	r0, [r5, #160]	; 0xa0
   1546c:	cmp	r0, #0
   15470:	beq	154b4 <__assert_fail@plt+0x28f8>
   15474:	movw	r0, #62440	; 0xf3e8
   15478:	movt	r0, #3
   1547c:	mov	r1, #3
   15480:	mov	r2, #1
   15484:	mov	r3, r4
   15488:	bl	12700 <fwrite@plt>
   1548c:	mov	r0, r4
   15490:	mov	r1, r5
   15494:	bl	152d4 <__assert_fail@plt+0x2718>
   15498:	movw	r0, #62444	; 0xf3ec
   1549c:	movt	r0, #3
   154a0:	mov	r1, #3
   154a4:	mov	r2, #1
   154a8:	mov	r3, r4
   154ac:	pop	{r4, r5, fp, lr}
   154b0:	b	12700 <fwrite@plt>
   154b4:	mov	r0, r4
   154b8:	mov	r1, r5
   154bc:	pop	{r4, r5, fp, lr}
   154c0:	b	152d4 <__assert_fail@plt+0x2718>
   154c4:	push	{r4, r5, fp, lr}
   154c8:	add	fp, sp, #8
   154cc:	mov	r4, r0
   154d0:	movw	r0, #24196	; 0x5e84
   154d4:	movt	r0, #5
   154d8:	ldrb	r0, [r0, #44]	; 0x2c
   154dc:	tst	r0, #64	; 0x40
   154e0:	popeq	{r4, r5, fp, pc}
   154e4:	movw	r5, #21856	; 0x5560
   154e8:	movt	r5, #5
   154ec:	ldr	r3, [r5]
   154f0:	movw	r0, #62021	; 0xf245
   154f4:	movt	r0, #3
   154f8:	mov	r1, #42	; 0x2a
   154fc:	mov	r2, #1
   15500:	bl	12700 <fwrite@plt>
   15504:	ldr	r0, [r5]
   15508:	mov	r1, r4
   1550c:	bl	152d4 <__assert_fail@plt+0x2718>
   15510:	ldr	r1, [r5]
   15514:	mov	r0, #10
   15518:	pop	{r4, r5, fp, lr}
   1551c:	b	12a3c <fputc@plt>
   15520:	push	{fp, lr}
   15524:	mov	fp, sp
   15528:	cmp	r0, #0
   1552c:	popeq	{fp, pc}
   15530:	movw	lr, #19532	; 0x4c4c
   15534:	movt	lr, #1
   15538:	movw	ip, #19648	; 0x4cc0
   1553c:	movt	ip, #1
   15540:	ldr	r3, [r0]
   15544:	cmp	r3, #0
   15548:	beq	15628 <__assert_fail@plt+0x2a6c>
   1554c:	ldr	r2, [r0, #172]	; 0xac
   15550:	cmp	r2, #0
   15554:	beq	15648 <__assert_fail@plt+0x2a8c>
   15558:	ldr	r1, [r2, #12]
   1555c:	cmp	r1, #0
   15560:	cmpne	r1, r3
   15564:	bne	15608 <__assert_fail@plt+0x2a4c>
   15568:	ldr	r1, [r2]
   1556c:	cmp	r1, #6
   15570:	bhi	155b0 <__assert_fail@plt+0x29f4>
   15574:	add	r2, pc, #0
   15578:	ldr	pc, [r2, r1, lsl #2]
   1557c:	andeq	r5, r1, r8, ror #12
   15580:	muleq	r1, r8, r5
   15584:	andeq	r5, r1, r8, lsl #13
   15588:	muleq	r1, r8, r5
   1558c:	muleq	r1, r8, r5
   15590:	muleq	r1, r8, r5
   15594:	andeq	r5, r1, r0, asr #11
   15598:	ldrb	r1, [r0, #17]
   1559c:	cmp	r1, #0
   155a0:	bne	156a8 <__assert_fail@plt+0x2aec>
   155a4:	ldrb	r1, [r0, #16]
   155a8:	cmp	r1, #0
   155ac:	bne	156c8 <__assert_fail@plt+0x2b0c>
   155b0:	ldr	r0, [r0, #152]	; 0x98
   155b4:	cmp	r0, #0
   155b8:	bne	15540 <__assert_fail@plt+0x2984>
   155bc:	b	15604 <__assert_fail@plt+0x2a48>
   155c0:	ldrb	r1, [r0, #16]
   155c4:	cmp	r1, #0
   155c8:	beq	156e8 <__assert_fail@plt+0x2b2c>
   155cc:	cmp	r3, lr
   155d0:	cmpne	r3, ip
   155d4:	beq	155b0 <__assert_fail@plt+0x29f4>
   155d8:	ldrb	r1, [r0, #17]
   155dc:	cmp	r1, #0
   155e0:	bne	155b0 <__assert_fail@plt+0x29f4>
   155e4:	movw	r0, #62285	; 0xf34d
   155e8:	movt	r0, #3
   155ec:	movw	r1, #61343	; 0xef9f
   155f0:	movt	r1, #3
   155f4:	movw	r3, #62085	; 0xf285
   155f8:	movt	r3, #3
   155fc:	movw	r2, #1349	; 0x545
   15600:	bl	12bbc <__assert_fail@plt>
   15604:	pop	{fp, pc}
   15608:	movw	r0, #62158	; 0xf2ce
   1560c:	movt	r0, #3
   15610:	movw	r1, #61343	; 0xef9f
   15614:	movt	r1, #3
   15618:	movw	r3, #62085	; 0xf285
   1561c:	movt	r3, #3
   15620:	movw	r2, #1322	; 0x52a
   15624:	bl	12bbc <__assert_fail@plt>
   15628:	movw	r0, #62064	; 0xf270
   1562c:	movt	r0, #3
   15630:	movw	r1, #61343	; 0xef9f
   15634:	movt	r1, #3
   15638:	movw	r3, #62085	; 0xf285
   1563c:	movt	r3, #3
   15640:	movw	r2, #1310	; 0x51e
   15644:	bl	12bbc <__assert_fail@plt>
   15648:	movw	r0, #62134	; 0xf2b6
   1564c:	movt	r0, #3
   15650:	movw	r1, #61343	; 0xef9f
   15654:	movt	r1, #3
   15658:	movw	r3, #62085	; 0xf285
   1565c:	movt	r3, #3
   15660:	movw	r2, #1313	; 0x521
   15664:	bl	12bbc <__assert_fail@plt>
   15668:	movw	r0, #62201	; 0xf2f9
   1566c:	movt	r0, #3
   15670:	movw	r1, #61343	; 0xef9f
   15674:	movt	r1, #3
   15678:	movw	r3, #62085	; 0xf285
   1567c:	movt	r3, #3
   15680:	movw	r2, #1338	; 0x53a
   15684:	bl	12bbc <__assert_fail@plt>
   15688:	movw	r0, #62237	; 0xf31d
   1568c:	movt	r0, #3
   15690:	movw	r1, #61343	; 0xef9f
   15694:	movt	r1, #3
   15698:	movw	r3, #62085	; 0xf285
   1569c:	movt	r3, #3
   156a0:	movw	r2, #1339	; 0x53b
   156a4:	bl	12bbc <__assert_fail@plt>
   156a8:	movw	r0, #62284	; 0xf34c
   156ac:	movt	r0, #3
   156b0:	movw	r1, #61343	; 0xef9f
   156b4:	movt	r1, #3
   156b8:	movw	r3, #62085	; 0xf285
   156bc:	movt	r3, #3
   156c0:	movw	r2, #1363	; 0x553
   156c4:	bl	12bbc <__assert_fail@plt>
   156c8:	movw	r0, #62305	; 0xf361
   156cc:	movt	r0, #3
   156d0:	movw	r1, #61343	; 0xef9f
   156d4:	movt	r1, #3
   156d8:	movw	r3, #62085	; 0xf285
   156dc:	movt	r3, #3
   156e0:	movw	r2, #1364	; 0x554
   156e4:	bl	12bbc <__assert_fail@plt>
   156e8:	movw	r0, #62306	; 0xf362
   156ec:	movt	r0, #3
   156f0:	movw	r1, #61343	; 0xef9f
   156f4:	movt	r1, #3
   156f8:	movw	r3, #62085	; 0xf285
   156fc:	movt	r3, #3
   15700:	movw	r2, #1343	; 0x53f
   15704:	bl	12bbc <__assert_fail@plt>
   15708:	push	{r4, r5, fp, lr}
   1570c:	add	fp, sp, #8
   15710:	mov	r4, r3
   15714:	mov	r5, r1
   15718:	mov	r1, r2
   1571c:	bl	12964 <difftime@plt>
   15720:	vldr	d16, [pc, #16]	; 15738 <__assert_fail@plt+0x2b7c>
   15724:	sub	r0, r5, r4
   15728:	vmov	s2, r0
   1572c:	vcvt.f64.s32	d17, s2
   15730:	vmla.f64	d0, d17, d16
   15734:	pop	{r4, r5, fp, pc}
   15738:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   1573c:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   15740:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15744:	add	fp, sp, #28
   15748:	sub	sp, sp, #36	; 0x24
   1574c:	mov	r5, r2
   15750:	mov	r9, r0
   15754:	mov	r4, r2
   15758:	ldr	r0, [r4], #40	; 0x28
   1575c:	bl	192e4 <__assert_fail@plt+0x6728>
   15760:	mov	r8, r0
   15764:	cmp	r0, #0
   15768:	beq	157b0 <__assert_fail@plt+0x2bf4>
   1576c:	mov	r0, r4
   15770:	bl	159a4 <__assert_fail@plt+0x2de8>
   15774:	cmp	r0, #0
   15778:	beq	15944 <__assert_fail@plt+0x2d88>
   1577c:	movw	r0, #24152	; 0x5e58
   15780:	movt	r0, #5
   15784:	ldr	r0, [r0, #12]
   15788:	bl	21e98 <__assert_fail@plt+0xf2dc>
   1578c:	mov	r9, r0
   15790:	ldrb	r0, [r0]
   15794:	subs	sl, r0, #47	; 0x2f
   15798:	movw	r6, #62561	; 0xf461
   1579c:	movt	r6, #3
   157a0:	moveq	r6, sl
   157a4:	movwne	sl, #2
   157a8:	mov	r7, r9
   157ac:	b	157d4 <__assert_fail@plt+0x2c18>
   157b0:	movw	r0, #21888	; 0x5580
   157b4:	movt	r0, #5
   157b8:	ldr	r0, [r0]
   157bc:	ldr	r1, [r5, #144]	; 0x90
   157c0:	mov	r7, #0
   157c4:	cmp	r1, r0
   157c8:	mov	r6, #0
   157cc:	mov	sl, #0
   157d0:	bne	15984 <__assert_fail@plt+0x2dc8>
   157d4:	ldrb	r0, [r4]
   157d8:	cmp	r0, #0
   157dc:	beq	15834 <__assert_fail@plt+0x2c78>
   157e0:	mov	r0, r9
   157e4:	bl	1288c <strlen@plt>
   157e8:	mov	r1, #0
   157ec:	stm	sp, {r6, sl}
   157f0:	str	r1, [sp, #8]
   157f4:	add	r2, r4, #4
   157f8:	add	r1, r5, #88	; 0x58
   157fc:	add	r3, r0, #1
   15800:	mov	r0, r2
   15804:	mov	r2, r9
   15808:	bl	1f574 <__assert_fail@plt+0xc9b8>
   1580c:	ldr	r0, [r5, #116]	; 0x74
   15810:	cmp	r0, #0
   15814:	beq	15914 <__assert_fail@plt+0x2d58>
   15818:	movw	r0, #24152	; 0x5e58
   1581c:	movt	r0, #5
   15820:	mov	r5, #1
   15824:	strb	r5, [r0, #32]
   15828:	cmp	r7, #0
   1582c:	bne	158f8 <__assert_fail@plt+0x2d3c>
   15830:	b	15908 <__assert_fail@plt+0x2d4c>
   15834:	str	r7, [sp, #20]
   15838:	str	r8, [sp, #24]
   1583c:	add	r0, r5, #88	; 0x58
   15840:	str	r0, [sp, #32]
   15844:	add	r0, r4, #4
   15848:	str	r0, [sp, #28]
   1584c:	ldr	r0, [r5, #136]	; 0x88
   15850:	cmp	r0, #1
   15854:	mov	r4, r5
   15858:	blt	158b8 <__assert_fail@plt+0x2cfc>
   1585c:	mov	r5, r9
   15860:	mov	r9, #0
   15864:	ldr	r0, [r4, #132]	; 0x84
   15868:	ldr	r7, [r0, r9, lsl #2]
   1586c:	mov	r0, r7
   15870:	bl	1288c <strlen@plt>
   15874:	mov	r8, r0
   15878:	mov	r0, r5
   1587c:	bl	1288c <strlen@plt>
   15880:	stm	sp, {r6, sl}
   15884:	str	r5, [sp, #8]
   15888:	str	r0, [sp, #12]
   1588c:	mov	r0, #0
   15890:	str	r0, [sp, #16]
   15894:	ldr	r0, [sp, #28]
   15898:	ldr	r1, [sp, #32]
   1589c:	mov	r2, r7
   158a0:	mov	r3, r8
   158a4:	bl	1f3d4 <__assert_fail@plt+0xc818>
   158a8:	add	r9, r9, #1
   158ac:	ldr	r0, [r4, #136]	; 0x88
   158b0:	cmp	r9, r0
   158b4:	blt	15864 <__assert_fail@plt+0x2ca8>
   158b8:	ldr	r0, [sp, #28]
   158bc:	ldr	r1, [sp, #32]
   158c0:	bl	1f79c <__assert_fail@plt+0xcbe0>
   158c4:	ldrh	r0, [r4, #148]	; 0x94
   158c8:	movw	r1, #65407	; 0xff7f
   158cc:	and	r0, r0, r1
   158d0:	clz	r0, r0
   158d4:	lsr	r5, r0, #5
   158d8:	ldr	r8, [sp, #24]
   158dc:	cmp	r8, #0
   158e0:	beq	158ec <__assert_fail@plt+0x2d30>
   158e4:	ldr	r0, [r4, #144]	; 0x90
   158e8:	bl	2a754 <__assert_fail@plt+0x17b98>
   158ec:	ldr	r7, [sp, #20]
   158f0:	cmp	r7, #0
   158f4:	beq	15908 <__assert_fail@plt+0x2d4c>
   158f8:	cmp	r8, #0
   158fc:	beq	15924 <__assert_fail@plt+0x2d68>
   15900:	mov	r0, r7
   15904:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   15908:	mov	r0, r5
   1590c:	sub	sp, fp, #28
   15910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15914:	mov	r5, #1
   15918:	cmp	r7, #0
   1591c:	bne	158f8 <__assert_fail@plt+0x2d3c>
   15920:	b	15908 <__assert_fail@plt+0x2d4c>
   15924:	movw	r0, #62674	; 0xf4d2
   15928:	movt	r0, #3
   1592c:	movw	r1, #62597	; 0xf485
   15930:	movt	r1, #3
   15934:	movw	r3, #62604	; 0xf48c
   15938:	movt	r3, #3
   1593c:	mov	r2, #208	; 0xd0
   15940:	bl	12bbc <__assert_fail@plt>
   15944:	bl	128d4 <__errno_location@plt>
   15948:	ldr	r4, [r0]
   1594c:	movw	r1, #62496	; 0xf420
   15950:	movt	r1, #3
   15954:	mov	r0, #0
   15958:	mov	r2, #5
   1595c:	bl	1264c <dcgettext@plt>
   15960:	mov	r5, r0
   15964:	mov	r0, #0
   15968:	mov	r1, r9
   1596c:	bl	19314 <__assert_fail@plt+0x6758>
   15970:	mov	r3, r0
   15974:	mov	r0, #1
   15978:	mov	r1, r4
   1597c:	mov	r2, r5
   15980:	bl	12790 <error@plt>
   15984:	movw	r0, #62564	; 0xf464
   15988:	movt	r0, #3
   1598c:	movw	r1, #62597	; 0xf485
   15990:	movt	r1, #3
   15994:	movw	r3, #62604	; 0xf48c
   15998:	movt	r3, #3
   1599c:	mov	r2, #148	; 0x94
   159a0:	bl	12bbc <__assert_fail@plt>
   159a4:	push	{r4, r5, r6, sl, fp, lr}
   159a8:	add	fp, sp, #16
   159ac:	mov	r4, r0
   159b0:	ldr	r0, [r0, #76]	; 0x4c
   159b4:	cmp	r0, #0
   159b8:	movne	r0, #1
   159bc:	popne	{r4, r5, r6, sl, fp, pc}
   159c0:	movw	r6, #24152	; 0x5e58
   159c4:	movt	r6, #5
   159c8:	ldr	r5, [r6, #12]
   159cc:	mov	r0, r5
   159d0:	mov	r1, #47	; 0x2f
   159d4:	bl	12898 <strchr@plt>
   159d8:	cmp	r0, #0
   159dc:	beq	15a10 <__assert_fail@plt+0x2e54>
   159e0:	mov	r0, r5
   159e4:	bl	21f54 <__assert_fail@plt+0xf398>
   159e8:	mov	r5, r0
   159ec:	ldr	r1, [r6, #16]
   159f0:	mov	r0, r4
   159f4:	mov	r2, r5
   159f8:	bl	15eac <__assert_fail@plt+0x32f0>
   159fc:	mov	r4, r0
   15a00:	mov	r0, r5
   15a04:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   15a08:	mov	r0, r4
   15a0c:	pop	{r4, r5, r6, sl, fp, pc}
   15a10:	ldr	r1, [r6, #16]
   15a14:	movw	r2, #64308	; 0xfb34
   15a18:	movt	r2, #3
   15a1c:	mov	r0, r4
   15a20:	pop	{r4, r5, r6, sl, fp, lr}
   15a24:	b	15eac <__assert_fail@plt+0x32f0>
   15a28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a2c:	add	fp, sp, #28
   15a30:	sub	sp, sp, #4
   15a34:	mov	r8, r3
   15a38:	mov	r5, r1
   15a3c:	movw	r9, #24196	; 0x5e84
   15a40:	movt	r9, #5
   15a44:	ldrb	r0, [r9, #44]	; 0x2c
   15a48:	tst	r0, #32
   15a4c:	bne	15be0 <__assert_fail@plt+0x3024>
   15a50:	movw	r0, #21868	; 0x556c
   15a54:	movt	r0, #5
   15a58:	ldr	r0, [r0]
   15a5c:	bl	2ca10 <__assert_fail@plt+0x19e54>
   15a60:	movw	sl, #21856	; 0x5560
   15a64:	movt	sl, #5
   15a68:	ldr	r0, [sl]
   15a6c:	bl	2ca10 <__assert_fail@plt+0x19e54>
   15a70:	movw	r0, #21892	; 0x5584
   15a74:	movt	r0, #5
   15a78:	ldrb	r1, [r0]
   15a7c:	cmp	r1, #0
   15a80:	bne	15a98 <__assert_fail@plt+0x2edc>
   15a84:	mov	r1, #1
   15a88:	strb	r1, [r0]
   15a8c:	mov	r0, #17
   15a90:	mov	r1, #0
   15a94:	bl	12610 <signal@plt>
   15a98:	bl	129f4 <fork@plt>
   15a9c:	cmn	r0, #1
   15aa0:	beq	15c84 <__assert_fail@plt+0x30c8>
   15aa4:	mov	r6, r0
   15aa8:	cmp	r0, #0
   15aac:	beq	15cb0 <__assert_fail@plt+0x30f4>
   15ab0:	add	r7, r5, #108	; 0x6c
   15ab4:	mov	r0, r6
   15ab8:	mov	r1, r7
   15abc:	mov	r2, #0
   15ac0:	bl	12724 <waitpid@plt>
   15ac4:	cmn	r0, #1
   15ac8:	bne	15b2c <__assert_fail@plt+0x2f70>
   15acc:	bl	128d4 <__errno_location@plt>
   15ad0:	ldr	r4, [r0]
   15ad4:	cmp	r4, #4
   15ad8:	beq	15ab4 <__assert_fail@plt+0x2ef8>
   15adc:	mov	r6, #0
   15ae0:	movw	r1, #62821	; 0xf565
   15ae4:	movt	r1, #3
   15ae8:	mov	r0, #0
   15aec:	mov	r2, #5
   15af0:	bl	1264c <dcgettext@plt>
   15af4:	mov	r5, r0
   15af8:	ldr	r1, [r8]
   15afc:	mov	r0, #0
   15b00:	bl	19314 <__assert_fail@plt+0x6758>
   15b04:	mov	r3, r0
   15b08:	mov	r0, #0
   15b0c:	mov	r1, r4
   15b10:	mov	r2, r5
   15b14:	bl	12790 <error@plt>
   15b18:	movw	r0, #24152	; 0x5e58
   15b1c:	movt	r0, #5
   15b20:	mov	r1, #1
   15b24:	str	r1, [r0, #28]
   15b28:	b	15bd4 <__assert_fail@plt+0x3018>
   15b2c:	ldr	r0, [r7]
   15b30:	mov	r1, #2130706432	; 0x7f000000
   15b34:	and	r1, r1, r0, lsl #24
   15b38:	add	r1, r1, #16777216	; 0x1000000
   15b3c:	cmp	r1, #33554432	; 0x2000000
   15b40:	blt	15ba0 <__assert_fail@plt+0x2fe4>
   15b44:	movw	r1, #62842	; 0xf57a
   15b48:	movt	r1, #3
   15b4c:	mov	r0, #0
   15b50:	mov	r2, #5
   15b54:	bl	1264c <dcgettext@plt>
   15b58:	mov	r4, r0
   15b5c:	ldr	r1, [r9, #72]	; 0x48
   15b60:	ldr	r2, [r8]
   15b64:	mov	r0, #0
   15b68:	bl	2a024 <__assert_fail@plt+0x17468>
   15b6c:	mov	r3, r0
   15b70:	ldr	r0, [r5, #108]	; 0x6c
   15b74:	and	r0, r0, #127	; 0x7f
   15b78:	str	r0, [sp]
   15b7c:	mov	r0, #0
   15b80:	mov	r1, #0
   15b84:	mov	r2, r4
   15b88:	bl	12790 <error@plt>
   15b8c:	ldrb	r0, [r5]
   15b90:	cmp	r0, #0
   15b94:	bne	15bc4 <__assert_fail@plt+0x3008>
   15b98:	mov	r6, #1
   15b9c:	b	15bd4 <__assert_fail@plt+0x3018>
   15ba0:	ldrb	r1, [r9, #44]	; 0x2c
   15ba4:	ubfx	r4, r0, #8, #8
   15ba8:	tst	r1, #32
   15bac:	bne	15c68 <__assert_fail@plt+0x30ac>
   15bb0:	mov	r6, #1
   15bb4:	cmp	r4, #0
   15bb8:	ldrbne	r0, [r5]
   15bbc:	cmpne	r0, #0
   15bc0:	beq	15bd4 <__assert_fail@plt+0x3018>
   15bc4:	movw	r0, #24152	; 0x5e58
   15bc8:	movt	r0, #5
   15bcc:	mov	r6, #1
   15bd0:	str	r6, [r0, #28]
   15bd4:	mov	r0, r6
   15bd8:	sub	sp, fp, #28
   15bdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15be0:	ldr	r0, [r5, #48]	; 0x30
   15be4:	mov	r4, #0
   15be8:	subs	r2, r0, #1
   15bec:	sbc	r3, r4, #0
   15bf0:	movw	r7, #21856	; 0x5560
   15bf4:	movt	r7, #5
   15bf8:	ldr	r0, [r7]
   15bfc:	movw	r1, #62680	; 0xf4d8
   15c00:	movt	r1, #3
   15c04:	bl	128c8 <fprintf@plt>
   15c08:	ldr	r6, [r7]
   15c0c:	ldr	r0, [r5, #48]	; 0x30
   15c10:	cmp	r0, #1
   15c14:	beq	15c58 <__assert_fail@plt+0x309c>
   15c18:	movw	sl, #19438	; 0x4bee
   15c1c:	movt	sl, #4
   15c20:	ldr	r0, [r5, #52]	; 0x34
   15c24:	ldr	r1, [r0, r4, lsl #2]
   15c28:	mov	r0, #0
   15c2c:	bl	19314 <__assert_fail@plt+0x6758>
   15c30:	mov	r2, r0
   15c34:	mov	r0, r6
   15c38:	mov	r1, sl
   15c3c:	bl	128c8 <fprintf@plt>
   15c40:	add	r4, r4, #1
   15c44:	ldr	r6, [r7]
   15c48:	ldr	r0, [r5, #48]	; 0x30
   15c4c:	sub	r0, r0, #1
   15c50:	cmp	r4, r0
   15c54:	bcc	15c20 <__assert_fail@plt+0x3064>
   15c58:	mov	r0, #10
   15c5c:	mov	r1, r6
   15c60:	bl	12a3c <fputc@plt>
   15c64:	b	15a50 <__assert_fail@plt+0x2e94>
   15c68:	ldr	r0, [sl]
   15c6c:	movw	r1, #62869	; 0xf595
   15c70:	movt	r1, #3
   15c74:	mov	r2, r6
   15c78:	mov	r3, r4
   15c7c:	bl	128c8 <fprintf@plt>
   15c80:	b	15bb0 <__assert_fail@plt+0x2ff4>
   15c84:	bl	128d4 <__errno_location@plt>
   15c88:	ldr	r4, [r0]
   15c8c:	movw	r1, #62722	; 0xf502
   15c90:	movt	r1, #3
   15c94:	mov	r0, #0
   15c98:	mov	r2, #5
   15c9c:	bl	1264c <dcgettext@plt>
   15ca0:	mov	r2, r0
   15ca4:	mov	r0, #1
   15ca8:	mov	r1, r4
   15cac:	bl	12790 <error@plt>
   15cb0:	ldr	r1, [r5, #104]	; 0x68
   15cb4:	cmp	r1, #0
   15cb8:	bne	15cdc <__assert_fail@plt+0x3120>
   15cbc:	movw	r0, #62734	; 0xf50e
   15cc0:	movt	r0, #3
   15cc4:	movw	r1, #62597	; 0xf485
   15cc8:	movt	r1, #3
   15ccc:	movw	r3, #62761	; 0xf529
   15cd0:	movt	r3, #3
   15cd4:	movw	r2, #321	; 0x141
   15cd8:	bl	12bbc <__assert_fail@plt>
   15cdc:	ldrb	r0, [r5, #100]	; 0x64
   15ce0:	bl	15d64 <__assert_fail@plt+0x31a8>
   15ce4:	cmp	r0, #0
   15ce8:	beq	15d1c <__assert_fail@plt+0x3160>
   15cec:	bl	203e0 <__assert_fail@plt+0xd824>
   15cf0:	cmp	r0, #0
   15cf4:	beq	15cfc <__assert_fail@plt+0x3140>
   15cf8:	bl	20400 <__assert_fail@plt+0xd844>
   15cfc:	mov	r0, r8
   15d00:	bl	1fce0 <__assert_fail@plt+0xd124>
   15d04:	cmp	r0, #0
   15d08:	beq	15d24 <__assert_fail@plt+0x3168>
   15d0c:	bl	128d4 <__errno_location@plt>
   15d10:	mov	r1, #7
   15d14:	str	r1, [r0]
   15d18:	b	15d30 <__assert_fail@plt+0x3174>
   15d1c:	mov	r0, #1
   15d20:	bl	125bc <_exit@plt>
   15d24:	ldr	r0, [r8]
   15d28:	mov	r1, r8
   15d2c:	bl	125d4 <execvp@plt>
   15d30:	bl	128d4 <__errno_location@plt>
   15d34:	ldr	r4, [r0]
   15d38:	ldr	r1, [r8]
   15d3c:	mov	r0, #0
   15d40:	bl	19314 <__assert_fail@plt+0x6758>
   15d44:	mov	r3, r0
   15d48:	movw	r2, #19439	; 0x4bef
   15d4c:	movt	r2, #4
   15d50:	mov	r0, #0
   15d54:	mov	r1, r4
   15d58:	bl	12790 <error@plt>
   15d5c:	mov	r0, #1
   15d60:	bl	125bc <_exit@plt>
   15d64:	push	{r4, r5, r6, sl, fp, lr}
   15d68:	add	fp, sp, #16
   15d6c:	sub	sp, sp, #24
   15d70:	mov	r5, r1
   15d74:	mov	r4, #1
   15d78:	cmp	r0, #0
   15d7c:	beq	15e20 <__assert_fail@plt+0x3264>
   15d80:	movw	r0, #62992	; 0xf610
   15d84:	movt	r0, #3
   15d88:	vldr	d16, [r0]
   15d8c:	mov	r0, #108	; 0x6c
   15d90:	strh	r0, [sp, #16]
   15d94:	vstr	d16, [sp, #8]
   15d98:	mov	r4, #0
   15d9c:	mov	r0, #0
   15da0:	bl	12b74 <close@plt>
   15da4:	cmn	r0, #1
   15da8:	ble	15df4 <__assert_fail@plt+0x3238>
   15dac:	add	r0, sp, #8
   15db0:	mov	r1, #131072	; 0x20000
   15db4:	bl	21ff8 <__assert_fail@plt+0xf43c>
   15db8:	mov	r4, #1
   15dbc:	cmn	r0, #1
   15dc0:	bgt	15e20 <__assert_fail@plt+0x3264>
   15dc4:	bl	128d4 <__errno_location@plt>
   15dc8:	ldr	r6, [r0]
   15dcc:	add	r1, sp, #8
   15dd0:	mov	r0, #0
   15dd4:	bl	19314 <__assert_fail@plt+0x6758>
   15dd8:	mov	r3, r0
   15ddc:	movw	r2, #19439	; 0x4bef
   15de0:	movt	r2, #4
   15de4:	mov	r0, #0
   15de8:	mov	r1, r6
   15dec:	bl	12790 <error@plt>
   15df0:	b	15e20 <__assert_fail@plt+0x3264>
   15df4:	bl	128d4 <__errno_location@plt>
   15df8:	ldr	r6, [r0]
   15dfc:	movw	r1, #62931	; 0xf5d3
   15e00:	movt	r1, #3
   15e04:	mov	r0, #0
   15e08:	mov	r2, #5
   15e0c:	bl	1264c <dcgettext@plt>
   15e10:	mov	r2, r0
   15e14:	mov	r0, #0
   15e18:	mov	r1, r6
   15e1c:	bl	12790 <error@plt>
   15e20:	mov	r0, r5
   15e24:	bl	2a738 <__assert_fail@plt+0x17b7c>
   15e28:	cmp	r0, #0
   15e2c:	beq	15ea0 <__assert_fail@plt+0x32e4>
   15e30:	bl	128d4 <__errno_location@plt>
   15e34:	ldr	r6, [r0]
   15e38:	mov	r4, #0
   15e3c:	movw	r1, #62959	; 0xf5ef
   15e40:	movt	r1, #3
   15e44:	mov	r0, #0
   15e48:	mov	r2, #5
   15e4c:	bl	1264c <dcgettext@plt>
   15e50:	mov	r2, r0
   15e54:	ldr	r0, [r5]
   15e58:	cmn	r0, #1
   15e5c:	ble	15e70 <__assert_fail@plt+0x32b4>
   15e60:	movw	r3, #2143	; 0x85f
   15e64:	movt	r3, #4
   15e68:	mov	r0, r3
   15e6c:	b	15e90 <__assert_fail@plt+0x32d4>
   15e70:	ldr	r0, [r5, #4]
   15e74:	movw	r1, #2143	; 0x85f
   15e78:	movt	r1, #4
   15e7c:	movw	r3, #9692	; 0x25dc
   15e80:	movt	r3, #4
   15e84:	cmp	r0, #0
   15e88:	moveq	r3, r1
   15e8c:	moveq	r0, r1
   15e90:	str	r0, [sp]
   15e94:	mov	r0, #0
   15e98:	mov	r1, r6
   15e9c:	bl	12790 <error@plt>
   15ea0:	mov	r0, r4
   15ea4:	sub	sp, fp, #16
   15ea8:	pop	{r4, r5, r6, sl, fp, pc}
   15eac:	push	{r4, r5, r6, r7, fp, lr}
   15eb0:	add	fp, sp, #16
   15eb4:	mov	r5, r2
   15eb8:	mov	r6, r1
   15ebc:	mov	r7, r0
   15ec0:	mov	r0, #8
   15ec4:	bl	2b5cc <__assert_fail@plt+0x18a10>
   15ec8:	str	r0, [r7, #104]	; 0x68
   15ecc:	mov	r4, #0
   15ed0:	str	r4, [r0, #4]
   15ed4:	mov	r0, r6
   15ed8:	mov	r1, r5
   15edc:	mov	r2, #0
   15ee0:	bl	25568 <__assert_fail@plt+0x129ac>
   15ee4:	ldr	r1, [r7, #104]	; 0x68
   15ee8:	str	r0, [r1]
   15eec:	cmp	r0, #0
   15ef0:	blt	15f00 <__assert_fail@plt+0x3344>
   15ef4:	mov	r4, #1
   15ef8:	mov	r1, #1
   15efc:	bl	21c94 <__assert_fail@plt+0xf0d8>
   15f00:	mov	r0, r4
   15f04:	pop	{r4, r5, r6, r7, fp, pc}
   15f08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15f0c:	add	fp, sp, #24
   15f10:	mov	r4, r1
   15f14:	mov	r5, r0
   15f18:	movw	r8, #21896	; 0x5588
   15f1c:	movt	r8, #5
   15f20:	ldr	r0, [r8]
   15f24:	cmp	r1, #0
   15f28:	movwne	r4, #16
   15f2c:	cmp	r0, #0
   15f30:	beq	15f88 <__assert_fail@plt+0x33cc>
   15f34:	ldr	r0, [r8]
   15f38:	cmp	r0, #0
   15f3c:	moveq	r0, #0
   15f40:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   15f44:	mov	r7, #0
   15f48:	movw	r6, #21900	; 0x558c
   15f4c:	movt	r6, #5
   15f50:	ldr	r0, [r6]
   15f54:	ldr	r1, [r0, r7, lsl #2]
   15f58:	mov	r0, r5
   15f5c:	mov	r2, r4
   15f60:	bl	127b4 <fnmatch@plt>
   15f64:	cmp	r0, #0
   15f68:	moveq	r0, #1
   15f6c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   15f70:	add	r7, r7, #1
   15f74:	ldr	r0, [r8]
   15f78:	cmp	r7, r0
   15f7c:	movcs	r0, #0
   15f80:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   15f84:	b	15f50 <__assert_fail@plt+0x3394>
   15f88:	movw	r1, #64308	; 0xfb34
   15f8c:	movt	r1, #3
   15f90:	mov	r0, r5
   15f94:	mov	r2, r4
   15f98:	bl	127b4 <fnmatch@plt>
   15f9c:	clz	r0, r0
   15fa0:	lsr	r0, r0, #5
   15fa4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15fa8:	mov	ip, r0
   15fac:	ldr	r2, [r1, #4]
   15fb0:	ldr	r3, [r1, #36]	; 0x24
   15fb4:	cmp	r3, #0
   15fb8:	beq	15fcc <__assert_fail@plt+0x3410>
   15fbc:	movw	r1, #63002	; 0xf61a
   15fc0:	movt	r1, #3
   15fc4:	mov	r0, ip
   15fc8:	b	128c8 <fprintf@plt>
   15fcc:	mov	r0, r2
   15fd0:	mov	r1, ip
   15fd4:	b	12b50 <fputs@plt>
   15fd8:	movw	r0, #21904	; 0x5590
   15fdc:	movt	r0, #5
   15fe0:	ldr	r0, [r0]
   15fe4:	bx	lr
   15fe8:	push	{r4, sl, fp, lr}
   15fec:	add	fp, sp, #8
   15ff0:	vpush	{d8}
   15ff4:	cmp	r0, #0
   15ff8:	beq	16154 <__assert_fail@plt+0x3598>
   15ffc:	mov	r4, r0
   16000:	ldr	r0, [r0, #160]	; 0xa0
   16004:	cmp	r0, #0
   16008:	blne	15fe8 <__assert_fail@plt+0x342c>
   1600c:	ldr	r0, [r4, #156]	; 0x9c
   16010:	cmp	r0, #0
   16014:	blne	15fe8 <__assert_fail@plt+0x342c>
   16018:	ldr	r0, [r4, #8]
   1601c:	cmp	r0, #5
   16020:	bhi	16174 <__assert_fail@plt+0x35b8>
   16024:	add	r1, pc, #0
   16028:	ldr	pc, [r1, r0, lsl #2]
   1602c:	andeq	r6, r1, r4, asr #32
   16030:	andeq	r6, r1, r0, lsl #2
   16034:	andeq	r6, r1, ip, ror r0
   16038:	strheq	r6, [r1], -r0
   1603c:	muleq	r1, r4, r1
   16040:			; <UNDEFINED> instruction: 0x000161b4
   16044:	ldr	r0, [r4, #160]	; 0xa0
   16048:	cmp	r0, #0
   1604c:	bne	161d4 <__assert_fail@plt+0x3618>
   16050:	ldr	r0, [r4, #156]	; 0x9c
   16054:	cmp	r0, #0
   16058:	beq	16118 <__assert_fail@plt+0x355c>
   1605c:	movw	r0, #63146	; 0xf6aa
   16060:	movt	r0, #3
   16064:	movw	r1, #63018	; 0xf62a
   16068:	movt	r1, #3
   1606c:	movw	r3, #63025	; 0xf631
   16070:	movt	r3, #3
   16074:	movw	r2, #1170	; 0x492
   16078:	bl	12bbc <__assert_fail@plt>
   1607c:	ldr	r0, [r4]
   16080:	movw	r1, #18260	; 0x4754
   16084:	movt	r1, #1
   16088:	cmp	r0, r1
   1608c:	bne	161f4 <__assert_fail@plt+0x3638>
   16090:	ldr	r0, [r4, #156]	; 0x9c
   16094:	cmp	r0, #0
   16098:	bne	16214 <__assert_fail@plt+0x3658>
   1609c:	ldr	r0, [r4, #160]	; 0xa0
   160a0:	vldr	s0, [r0, #28]
   160a4:	vmov.f32	s2, #112	; 0x3f800000  1.0
   160a8:	vsub.f32	s0, s2, s0
   160ac:	b	16148 <__assert_fail@plt+0x358c>
   160b0:	ldr	r0, [r4]
   160b4:	movw	r1, #15844	; 0x3de4
   160b8:	movt	r1, #1
   160bc:	cmp	r0, r1
   160c0:	beq	16124 <__assert_fail@plt+0x3568>
   160c4:	movw	r1, #16292	; 0x3fa4
   160c8:	movt	r1, #1
   160cc:	cmp	r0, r1
   160d0:	beq	16140 <__assert_fail@plt+0x3584>
   160d4:	movw	r1, #19076	; 0x4a84
   160d8:	movt	r1, #1
   160dc:	cmp	r0, r1
   160e0:	bne	16274 <__assert_fail@plt+0x36b8>
   160e4:	ldr	r0, [r4, #160]	; 0xa0
   160e8:	bl	16294 <__assert_fail@plt+0x36d8>
   160ec:	vmov.f32	s16, s0
   160f0:	ldr	r0, [r4, #156]	; 0x9c
   160f4:	bl	16294 <__assert_fail@plt+0x36d8>
   160f8:	vadd.f32	s0, s16, s0
   160fc:	b	16144 <__assert_fail@plt+0x3588>
   16100:	ldr	r0, [r4, #160]	; 0xa0
   16104:	cmp	r0, #0
   16108:	bne	16234 <__assert_fail@plt+0x3678>
   1610c:	ldr	r0, [r4, #156]	; 0x9c
   16110:	cmp	r0, #0
   16114:	bne	16254 <__assert_fail@plt+0x3698>
   16118:	vldr	s0, [r4, #28]
   1611c:	vpop	{d8}
   16120:	pop	{r4, sl, fp, pc}
   16124:	ldr	r0, [r4, #160]	; 0xa0
   16128:	bl	16294 <__assert_fail@plt+0x36d8>
   1612c:	vmov.f32	s16, s0
   16130:	ldr	r0, [r4, #156]	; 0x9c
   16134:	bl	16294 <__assert_fail@plt+0x36d8>
   16138:	vmul.f32	s0, s16, s0
   1613c:	b	16144 <__assert_fail@plt+0x3588>
   16140:	vmov.f32	s0, #112	; 0x3f800000  1.0
   16144:	bl	162a4 <__assert_fail@plt+0x36e8>
   16148:	vstr	s0, [r4, #28]
   1614c:	vpop	{d8}
   16150:	pop	{r4, sl, fp, pc}
   16154:	movw	r0, #63008	; 0xf620
   16158:	movt	r0, #3
   1615c:	movw	r1, #63018	; 0xf62a
   16160:	movt	r1, #3
   16164:	movw	r3, #63025	; 0xf631
   16168:	movt	r3, #3
   1616c:	movw	r2, #1156	; 0x484
   16170:	bl	12bbc <__assert_fail@plt>
   16174:	movw	r0, #64905	; 0xfd89
   16178:	movt	r0, #3
   1617c:	movw	r1, #63018	; 0xf62a
   16180:	movt	r1, #3
   16184:	movw	r3, #63025	; 0xf631
   16188:	movt	r3, #3
   1618c:	mov	r2, #1216	; 0x4c0
   16190:	bl	12bbc <__assert_fail@plt>
   16194:	movw	r0, #63100	; 0xf67c
   16198:	movt	r0, #3
   1619c:	movw	r1, #63018	; 0xf62a
   161a0:	movt	r1, #3
   161a4:	movw	r3, #63025	; 0xf631
   161a8:	movt	r3, #3
   161ac:	movw	r2, #1164	; 0x48c
   161b0:	bl	12bbc <__assert_fail@plt>
   161b4:	movw	r0, #63075	; 0xf663
   161b8:	movt	r0, #3
   161bc:	movw	r1, #63018	; 0xf62a
   161c0:	movt	r1, #3
   161c4:	movw	r3, #63025	; 0xf631
   161c8:	movt	r3, #3
   161cc:	movw	r2, #1163	; 0x48b
   161d0:	bl	12bbc <__assert_fail@plt>
   161d4:	movw	r0, #63124	; 0xf694
   161d8:	movt	r0, #3
   161dc:	movw	r1, #63018	; 0xf62a
   161e0:	movt	r1, #3
   161e4:	movw	r3, #63025	; 0xf631
   161e8:	movt	r3, #3
   161ec:	movw	r2, #1169	; 0x491
   161f0:	bl	12bbc <__assert_fail@plt>
   161f4:	movw	r0, #63167	; 0xf6bf
   161f8:	movt	r0, #3
   161fc:	movw	r1, #63018	; 0xf62a
   16200:	movt	r1, #3
   16204:	movw	r3, #63025	; 0xf631
   16208:	movt	r3, #3
   1620c:	movw	r2, #1180	; 0x49c
   16210:	bl	12bbc <__assert_fail@plt>
   16214:	movw	r0, #63146	; 0xf6aa
   16218:	movt	r0, #3
   1621c:	movw	r1, #63018	; 0xf62a
   16220:	movt	r1, #3
   16224:	movw	r3, #63025	; 0xf631
   16228:	movt	r3, #3
   1622c:	movw	r2, #1181	; 0x49d
   16230:	bl	12bbc <__assert_fail@plt>
   16234:	movw	r0, #63124	; 0xf694
   16238:	movt	r0, #3
   1623c:	movw	r1, #63018	; 0xf62a
   16240:	movt	r1, #3
   16244:	movw	r3, #63025	; 0xf631
   16248:	movt	r3, #3
   1624c:	movw	r2, #1174	; 0x496
   16250:	bl	12bbc <__assert_fail@plt>
   16254:	movw	r0, #63146	; 0xf6aa
   16258:	movt	r0, #3
   1625c:	movw	r1, #63018	; 0xf62a
   16260:	movt	r1, #3
   16264:	movw	r3, #63025	; 0xf631
   16268:	movt	r3, #3
   1626c:	movw	r2, #1175	; 0x497
   16270:	bl	12bbc <__assert_fail@plt>
   16274:	movw	r0, #64905	; 0xfd89
   16278:	movt	r0, #3
   1627c:	movw	r1, #63018	; 0xf62a
   16280:	movt	r1, #3
   16284:	movw	r3, #63025	; 0xf631
   16288:	movt	r3, #3
   1628c:	movw	r2, #1204	; 0x4b4
   16290:	bl	12bbc <__assert_fail@plt>
   16294:	cmp	r0, #0
   16298:	vldrne	s0, [r0, #28]
   1629c:	vmoveq.f32	s0, #112	; 0x3f800000  1.0
   162a0:	bx	lr
   162a4:	vldr	s2, [pc, #20]	; 162c0 <__assert_fail@plt+0x3704>
   162a8:	vmax.f32	d1, d0, d1
   162ac:	vmov.f32	s4, #112	; 0x3f800000  1.0
   162b0:	vcmpe.f32	s0, s4
   162b4:	vmrs	APSR_nzcv, fpscr
   162b8:	vselgt.f32	s0, s4, s2
   162bc:	bx	lr
   162c0:	andeq	r0, r0, r0
   162c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162c8:	add	fp, sp, #28
   162cc:	sub	sp, sp, #28
   162d0:	mov	r4, r1
   162d4:	str	r0, [sp, #24]
   162d8:	add	r0, r1, r2, lsl #2
   162dc:	movw	r1, #21900	; 0x558c
   162e0:	movt	r1, #5
   162e4:	str	r0, [r1]
   162e8:	movw	r7, #21908	; 0x5594
   162ec:	movt	r7, #5
   162f0:	mov	r0, #0
   162f4:	str	r0, [r7]
   162f8:	str	r2, [sp, #16]
   162fc:	ldr	r0, [sp, #24]
   16300:	cmp	r0, r2
   16304:	ble	16348 <__assert_fail@plt+0x378c>
   16308:	ldr	r5, [sp, #24]
   1630c:	movw	r6, #21896	; 0x5588
   16310:	movt	r6, #5
   16314:	ldr	r0, [r4, r2, lsl #2]
   16318:	mov	r1, #1
   1631c:	bl	18b9c <__assert_fail@plt+0x5fe0>
   16320:	cmp	r0, #0
   16324:	bne	16348 <__assert_fail@plt+0x378c>
   16328:	ldr	r0, [r6]
   1632c:	add	r0, r0, #1
   16330:	str	r0, [r6]
   16334:	ldr	r0, [sp, #16]
   16338:	add	r2, r0, #1
   1633c:	str	r2, [sp, #16]
   16340:	cmp	r2, r5
   16344:	blt	16314 <__assert_fail@plt+0x3758>
   16348:	movw	r8, #9767	; 0x2627
   1634c:	movt	r8, #4
   16350:	mov	r0, r8
   16354:	bl	1b8f4 <__assert_fail@plt+0x8d38>
   16358:	mov	r5, r0
   1635c:	movw	r0, #64985	; 0xfdd9
   16360:	movt	r0, #3
   16364:	bl	1b8f4 <__assert_fail@plt+0x8d38>
   16368:	mov	r6, r0
   1636c:	movw	r0, #63496	; 0xf808
   16370:	movt	r0, #3
   16374:	bl	1b8f4 <__assert_fail@plt+0x8d38>
   16378:	cmp	r5, #0
   1637c:	beq	167ec <__assert_fail@plt+0x3c30>
   16380:	cmp	r6, #0
   16384:	beq	1680c <__assert_fail@plt+0x3c50>
   16388:	str	r6, [sp, #8]
   1638c:	str	r0, [sp, #12]
   16390:	cmp	r0, #0
   16394:	beq	1682c <__assert_fail@plt+0x3c70>
   16398:	add	r2, sp, #24
   1639c:	mov	r0, r5
   163a0:	mov	r1, r4
   163a4:	bl	1ba80 <__assert_fail@plt+0x8ec4>
   163a8:	movw	sl, #21912	; 0x5598
   163ac:	movt	sl, #5
   163b0:	ldr	r2, [sl]
   163b4:	str	r8, [r2, #4]
   163b8:	ldr	r3, [r7]
   163bc:	mov	r0, #1
   163c0:	strb	r0, [r3, #33]	; 0x21
   163c4:	ldr	r1, [sp, #24]
   163c8:	mov	r0, r4
   163cc:	bl	1b8dc <__assert_fail@plt+0x8d20>
   163d0:	ldr	r0, [sl]
   163d4:	bl	15520 <__assert_fail@plt+0x2964>
   163d8:	ldr	r1, [sp, #24]
   163dc:	ldr	r0, [sp, #16]
   163e0:	cmp	r0, r1
   163e4:	bge	16494 <__assert_fail@plt+0x38d8>
   163e8:	mov	r8, #0
   163ec:	movw	r1, #24152	; 0x5e58
   163f0:	movt	r1, #5
   163f4:	strb	r8, [r1, #40]	; 0x28
   163f8:	ldr	r0, [r4, r0, lsl #2]
   163fc:	mov	r1, #0
   16400:	bl	18b9c <__assert_fail@plt+0x5fe0>
   16404:	cmp	r0, #0
   16408:	beq	166e4 <__assert_fail@plt+0x3b28>
   1640c:	ldr	r0, [sp, #16]
   16410:	ldr	r6, [r4, r0, lsl #2]
   16414:	mov	r0, r6
   16418:	bl	1b8f4 <__assert_fail@plt+0x8d38>
   1641c:	cmp	r0, #0
   16420:	beq	16778 <__assert_fail@plt+0x3bbc>
   16424:	mov	r5, r0
   16428:	ldr	r0, [r0]
   1642c:	cmp	r0, #4
   16430:	ldrne	r0, [sp, #16]
   16434:	addne	r0, r0, #1
   16438:	strne	r0, [sp, #16]
   1643c:	ldr	r3, [r5, #8]
   16440:	ldr	r9, [sp, #16]
   16444:	mov	r0, r5
   16448:	mov	r1, r4
   1644c:	add	r2, sp, #16
   16450:	blx	r3
   16454:	cmp	r0, #0
   16458:	beq	1675c <__assert_fail@plt+0x3ba0>
   1645c:	ldr	r0, [sl]
   16460:	str	r6, [r0, #4]
   16464:	ldr	r1, [sp, #16]
   16468:	cmp	r1, r9
   1646c:	streq	r8, [r0, #36]	; 0x24
   16470:	ldrne	r1, [r4, r9, lsl #2]
   16474:	strne	r1, [r0, #36]	; 0x24
   16478:	bl	15520 <__assert_fail@plt+0x2964>
   1647c:	ldr	r0, [r7]
   16480:	bl	15520 <__assert_fail@plt+0x2964>
   16484:	ldr	r1, [sp, #24]
   16488:	ldr	r0, [sp, #16]
   1648c:	cmp	r0, r1
   16490:	blt	163ec <__assert_fail@plt+0x3830>
   16494:	ldr	r3, [r7]
   16498:	ldr	r2, [sl]
   1649c:	mov	r0, r4
   164a0:	bl	1b8f0 <__assert_fail@plt+0x8d34>
   164a4:	ldr	r0, [r7]
   164a8:	ldr	r1, [r0, #152]	; 0x98
   164ac:	cmp	r1, #0
   164b0:	beq	16510 <__assert_fail@plt+0x3954>
   164b4:	mov	r0, r1
   164b8:	bl	18b70 <__assert_fail@plt+0x5fb4>
   164bc:	cmp	r0, #0
   164c0:	beq	16554 <__assert_fail@plt+0x3998>
   164c4:	add	r8, sp, #24
   164c8:	ldr	r0, [sp, #8]
   164cc:	mov	r1, r4
   164d0:	mov	r2, r8
   164d4:	bl	1ba50 <__assert_fail@plt+0x8e94>
   164d8:	ldr	r0, [sl]
   164dc:	mov	r6, #1
   164e0:	strb	r6, [r0, #33]	; 0x21
   164e4:	movw	r1, #64985	; 0xfdd9
   164e8:	movt	r1, #3
   164ec:	str	r1, [r0, #4]
   164f0:	bl	15520 <__assert_fail@plt+0x2964>
   164f4:	ldr	r0, [sp, #12]
   164f8:	mov	r1, r4
   164fc:	mov	r2, r8
   16500:	bl	1bab4 <__assert_fail@plt+0x8ef8>
   16504:	ldr	r0, [sl]
   16508:	strb	r6, [r0, #33]	; 0x21
   1650c:	b	16538 <__assert_fail@plt+0x397c>
   16510:	str	r0, [sp, #20]
   16514:	ldr	r1, [r0, #152]	; 0x98
   16518:	str	r1, [r7]
   1651c:	str	r1, [sl]
   16520:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   16524:	add	r2, sp, #24
   16528:	ldr	r0, [sp, #12]
   1652c:	mov	r1, r4
   16530:	bl	1bab4 <__assert_fail@plt+0x8ef8>
   16534:	ldr	r0, [sl]
   16538:	movw	r1, #63495	; 0xf807
   1653c:	movt	r1, #3
   16540:	str	r1, [r0, #4]
   16544:	bl	15520 <__assert_fail@plt+0x2964>
   16548:	ldr	r0, [r7]
   1654c:	bl	15520 <__assert_fail@plt+0x2964>
   16550:	b	16570 <__assert_fail@plt+0x39b4>
   16554:	ldr	r0, [r7]
   16558:	str	r0, [sp, #20]
   1655c:	ldr	r0, [r0, #152]	; 0x98
   16560:	str	r0, [r7]
   16564:	bl	15520 <__assert_fail@plt+0x2964>
   16568:	ldr	r0, [sp, #20]
   1656c:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   16570:	movw	r5, #24196	; 0x5e84
   16574:	movt	r5, #5
   16578:	ldrb	r0, [r5, #44]	; 0x2c
   1657c:	tst	r0, #9
   16580:	bne	1661c <__assert_fail@plt+0x3a60>
   16584:	ldr	r0, [r7]
   16588:	bl	1b6f0 <__assert_fail@plt+0x8b34>
   1658c:	ldr	r0, [r7]
   16590:	bl	15520 <__assert_fail@plt+0x2964>
   16594:	ldr	r0, [r7]
   16598:	str	r0, [sp, #20]
   1659c:	add	r0, sp, #20
   165a0:	mov	r1, #0
   165a4:	mov	r2, #0
   165a8:	bl	168bc <__assert_fail@plt+0x3d00>
   165ac:	movw	r4, #21904	; 0x5590
   165b0:	movt	r4, #5
   165b4:	str	r0, [r4]
   165b8:	bl	15fe8 <__assert_fail@plt+0x342c>
   165bc:	ldr	r6, [sp, #20]
   165c0:	cmp	r6, #0
   165c4:	bne	1684c <__assert_fail@plt+0x3c90>
   165c8:	ldrb	r0, [r5, #44]	; 0x2c
   165cc:	tst	r0, #9
   165d0:	bne	1664c <__assert_fail@plt+0x3a90>
   165d4:	ldr	r0, [r4]
   165d8:	bl	16dd8 <__assert_fail@plt+0x421c>
   165dc:	mov	r0, r4
   165e0:	bl	16e0c <__assert_fail@plt+0x4250>
   165e4:	ldr	r0, [r4]
   165e8:	mov	r1, #1
   165ec:	bl	171d4 <__assert_fail@plt+0x4618>
   165f0:	ldr	r0, [r4]
   165f4:	bl	17268 <__assert_fail@plt+0x46ac>
   165f8:	ldr	r0, [r4]
   165fc:	mov	r1, #1
   16600:	bl	171d4 <__assert_fail@plt+0x4618>
   16604:	ldrb	r0, [r5, #44]	; 0x2c
   16608:	tst	r0, #9
   1660c:	bne	16680 <__assert_fail@plt+0x3ac4>
   16610:	ldr	r0, [r4]
   16614:	sub	sp, fp, #28
   16618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1661c:	movw	r4, #21856	; 0x5560
   16620:	movt	r4, #5
   16624:	ldr	r3, [r4]
   16628:	movw	r0, #63502	; 0xf80e
   1662c:	movt	r0, #3
   16630:	mov	r1, #16
   16634:	mov	r2, #1
   16638:	bl	12700 <fwrite@plt>
   1663c:	ldr	r0, [r4]
   16640:	ldr	r1, [r7]
   16644:	bl	151f4 <__assert_fail@plt+0x2638>
   16648:	b	16584 <__assert_fail@plt+0x39c8>
   1664c:	movw	r6, #21856	; 0x5560
   16650:	movt	r6, #5
   16654:	ldr	r3, [r6]
   16658:	movw	r0, #64998	; 0xfde6
   1665c:	movt	r0, #3
   16660:	mov	r1, #11
   16664:	mov	r2, #1
   16668:	bl	12700 <fwrite@plt>
   1666c:	ldr	r0, [r6]
   16670:	ldr	r1, [r4]
   16674:	mov	r2, #0
   16678:	bl	16aec <__assert_fail@plt+0x3f30>
   1667c:	b	165d4 <__assert_fail@plt+0x3a18>
   16680:	movw	r5, #21856	; 0x5560
   16684:	movt	r5, #5
   16688:	ldr	r3, [r5]
   1668c:	movw	r0, #63578	; 0xf85a
   16690:	movt	r0, #3
   16694:	mov	r1, #21
   16698:	mov	r2, #1
   1669c:	bl	12700 <fwrite@plt>
   166a0:	ldr	r0, [r5]
   166a4:	ldr	r1, [r4]
   166a8:	mov	r2, #0
   166ac:	bl	16aec <__assert_fail@plt+0x3f30>
   166b0:	ldr	r3, [r5]
   166b4:	movw	r0, #63600	; 0xf870
   166b8:	movt	r0, #3
   166bc:	mov	r1, #24
   166c0:	mov	r2, #1
   166c4:	bl	12700 <fwrite@plt>
   166c8:	ldr	r0, [r5]
   166cc:	ldr	r1, [r4]
   166d0:	bl	152d4 <__assert_fail@plt+0x2718>
   166d4:	ldr	r1, [r5]
   166d8:	mov	r0, #10
   166dc:	bl	12a3c <fputc@plt>
   166e0:	b	16610 <__assert_fail@plt+0x3a54>
   166e4:	movw	r1, #63310	; 0xf74e
   166e8:	movt	r1, #3
   166ec:	mov	r0, #0
   166f0:	mov	r2, #5
   166f4:	bl	1264c <dcgettext@plt>
   166f8:	mov	r2, r0
   166fc:	ldr	r0, [sp, #16]
   16700:	ldr	r3, [r4, r0, lsl #2]
   16704:	mov	r0, #0
   16708:	mov	r1, #0
   1670c:	bl	12790 <error@plt>
   16710:	ldr	r0, [sp, #16]
   16714:	ldr	r0, [r4, r0, lsl #2]
   16718:	mov	r1, #0
   1671c:	bl	12994 <access@plt>
   16720:	cmp	r0, #0
   16724:	bne	16754 <__assert_fail@plt+0x3b98>
   16728:	movw	r1, #63346	; 0xf772
   1672c:	movt	r1, #3
   16730:	mov	r0, #0
   16734:	mov	r2, #5
   16738:	bl	1264c <dcgettext@plt>
   1673c:	mov	r2, r0
   16740:	ldr	r0, [sl]
   16744:	ldr	r3, [r0, #4]
   16748:	mov	r0, #0
   1674c:	mov	r1, #0
   16750:	bl	12790 <error@plt>
   16754:	mov	r0, #1
   16758:	bl	1285c <exit@plt>
   1675c:	ldr	r0, [sp, #16]
   16760:	ldr	r1, [r4, r0, lsl #2]
   16764:	cmp	r1, #0
   16768:	bne	167a0 <__assert_fail@plt+0x3be4>
   1676c:	movw	r1, #63470	; 0xf7ee
   16770:	movt	r1, #3
   16774:	b	16780 <__assert_fail@plt+0x3bc4>
   16778:	movw	r1, #63394	; 0xf7a2
   1677c:	movt	r1, #3
   16780:	mov	r0, #0
   16784:	mov	r2, #5
   16788:	bl	1264c <dcgettext@plt>
   1678c:	mov	r2, r0
   16790:	mov	r0, #1
   16794:	mov	r1, #0
   16798:	mov	r3, r6
   1679c:	bl	12790 <error@plt>
   167a0:	cmp	r0, r9
   167a4:	ldreq	r0, [r5]
   167a8:	cmpeq	r0, #4
   167ac:	beq	167e0 <__assert_fail@plt+0x3c24>
   167b0:	movw	r1, #63440	; 0xf7d0
   167b4:	movt	r1, #3
   167b8:	mov	r0, #0
   167bc:	mov	r2, #5
   167c0:	bl	1264c <dcgettext@plt>
   167c4:	mov	r2, r0
   167c8:	ldr	r0, [sp, #16]
   167cc:	ldr	r3, [r4, r0, lsl #2]
   167d0:	str	r6, [sp]
   167d4:	mov	r0, #1
   167d8:	mov	r1, #0
   167dc:	bl	12790 <error@plt>
   167e0:	movw	r1, #63417	; 0xf7b9
   167e4:	movt	r1, #3
   167e8:	b	16780 <__assert_fail@plt+0x3bc4>
   167ec:	movw	r0, #63192	; 0xf6d8
   167f0:	movt	r0, #3
   167f4:	movw	r1, #63018	; 0xf62a
   167f8:	movt	r1, #3
   167fc:	movw	r3, #63211	; 0xf6eb
   16800:	movt	r3, #3
   16804:	movw	r2, #1270	; 0x4f6
   16808:	bl	12bbc <__assert_fail@plt>
   1680c:	movw	r0, #63270	; 0xf726
   16810:	movt	r0, #3
   16814:	movw	r1, #63018	; 0xf62a
   16818:	movt	r1, #3
   1681c:	movw	r3, #63211	; 0xf6eb
   16820:	movt	r3, #3
   16824:	movw	r2, #1271	; 0x4f7
   16828:	bl	12bbc <__assert_fail@plt>
   1682c:	movw	r0, #63290	; 0xf73a
   16830:	movt	r0, #3
   16834:	movw	r1, #63018	; 0xf62a
   16838:	movt	r1, #3
   1683c:	movw	r3, #63211	; 0xf6eb
   16840:	movt	r3, #3
   16844:	movw	r2, #1272	; 0x4f8
   16848:	bl	12bbc <__assert_fail@plt>
   1684c:	ldr	r0, [r6]
   16850:	movw	r1, #16132	; 0x3f04
   16854:	movt	r1, #1
   16858:	cmp	r0, r1
   1685c:	bne	1686c <__assert_fail@plt+0x3cb0>
   16860:	movw	r1, #64408	; 0xfb98
   16864:	movt	r1, #3
   16868:	b	16880 <__assert_fail@plt+0x3cc4>
   1686c:	ldr	r0, [r6, #4]
   16870:	cmp	r0, #0
   16874:	bne	1689c <__assert_fail@plt+0x3ce0>
   16878:	movw	r1, #63551	; 0xf83f
   1687c:	movt	r1, #3
   16880:	mov	r0, #0
   16884:	mov	r2, #5
   16888:	bl	1264c <dcgettext@plt>
   1688c:	mov	r2, r0
   16890:	mov	r0, #1
   16894:	mov	r1, #0
   16898:	bl	12790 <error@plt>
   1689c:	movw	r1, #63519	; 0xf81f
   168a0:	movt	r1, #3
   168a4:	mov	r0, #0
   168a8:	mov	r2, #5
   168ac:	bl	1264c <dcgettext@plt>
   168b0:	mov	r2, r0
   168b4:	ldr	r3, [r6, #4]
   168b8:	b	167d4 <__assert_fail@plt+0x3c18>
   168bc:	push	{r4, r5, r6, r7, fp, lr}
   168c0:	add	fp, sp, #16
   168c4:	ldr	r4, [r0]
   168c8:	cmp	r4, #0
   168cc:	beq	169cc <__assert_fail@plt+0x3e10>
   168d0:	mov	r5, r0
   168d4:	ldr	r0, [r4, #8]
   168d8:	cmp	r0, #5
   168dc:	bhi	169d8 <__assert_fail@plt+0x3e1c>
   168e0:	mov	r6, r1
   168e4:	add	r1, pc, #0
   168e8:	ldr	pc, [r1, r0, lsl #2]
   168ec:	andeq	r6, r1, ip, asr #19
   168f0:	andeq	r6, r1, r4, lsl #18
   168f4:	andeq	r6, r1, ip, lsl #18
   168f8:	strdeq	r6, [r1], -ip
   168fc:	andeq	r6, r1, r8, lsr r9
   16900:	andeq	r6, r1, r4, ror #19
   16904:	ldr	r0, [r4, #152]	; 0x98
   16908:	b	16990 <__assert_fail@plt+0x3dd4>
   1690c:	ldr	r0, [r4, #152]	; 0x98
   16910:	str	r0, [r5]
   16914:	mov	r0, r5
   16918:	mov	r1, #4
   1691c:	mov	r2, r4
   16920:	bl	168bc <__assert_fail@plt+0x3d00>
   16924:	str	r0, [r4, #160]	; 0xa0
   16928:	ldr	r0, [r5]
   1692c:	cmp	r0, #0
   16930:	bne	1699c <__assert_fail@plt+0x3de0>
   16934:	b	169c4 <__assert_fail@plt+0x3e08>
   16938:	ldr	r0, [r4, #152]	; 0x98
   1693c:	cmp	r0, #0
   16940:	beq	16a08 <__assert_fail@plt+0x3e4c>
   16944:	ldrb	r1, [r0, #33]	; 0x21
   16948:	cmp	r1, #0
   1694c:	bne	16a08 <__assert_fail@plt+0x3e4c>
   16950:	str	r0, [r5]
   16954:	ldr	r0, [r0, #8]
   16958:	cmp	r0, #5
   1695c:	beq	16a6c <__assert_fail@plt+0x3eb0>
   16960:	mov	r0, r5
   16964:	mov	r1, #0
   16968:	mov	r2, r4
   1696c:	bl	168bc <__assert_fail@plt+0x3d00>
   16970:	mov	r4, r0
   16974:	ldr	r0, [r5]
   16978:	cmp	r0, #0
   1697c:	beq	16a30 <__assert_fail@plt+0x3e74>
   16980:	ldr	r1, [r0, #8]
   16984:	cmp	r1, #5
   16988:	bne	16a30 <__assert_fail@plt+0x3e74>
   1698c:	ldr	r0, [r0, #152]	; 0x98
   16990:	str	r0, [r5]
   16994:	cmp	r0, #0
   16998:	beq	169c4 <__assert_fail@plt+0x3e08>
   1699c:	ldr	r0, [r0, #12]
   169a0:	cmp	r0, r6
   169a4:	ble	169c4 <__assert_fail@plt+0x3e08>
   169a8:	mov	r0, r5
   169ac:	mov	r1, r4
   169b0:	mov	r2, r6
   169b4:	bl	17588 <__assert_fail@plt+0x49cc>
   169b8:	mov	r4, r0
   169bc:	cmp	r0, #0
   169c0:	beq	169cc <__assert_fail@plt+0x3e10>
   169c4:	mov	r0, r4
   169c8:	pop	{r4, r5, r6, r7, fp, pc}
   169cc:	movw	r1, #64137	; 0xfa89
   169d0:	movt	r1, #3
   169d4:	b	16a80 <__assert_fail@plt+0x3ec4>
   169d8:	movw	r1, #64676	; 0xfca4
   169dc:	movt	r1, #3
   169e0:	b	16a80 <__assert_fail@plt+0x3ec4>
   169e4:	mov	r7, r2
   169e8:	cmp	r2, #0
   169ec:	bne	16a3c <__assert_fail@plt+0x3e80>
   169f0:	movw	r1, #64237	; 0xfaed
   169f4:	movt	r1, #3
   169f8:	b	16a10 <__assert_fail@plt+0x3e54>
   169fc:	movw	r1, #64156	; 0xfa9c
   16a00:	movt	r1, #3
   16a04:	b	16a10 <__assert_fail@plt+0x3e54>
   16a08:	movw	r1, #64430	; 0xfbae
   16a0c:	movt	r1, #3
   16a10:	mov	r0, #0
   16a14:	mov	r2, #5
   16a18:	bl	1264c <dcgettext@plt>
   16a1c:	mov	r2, r0
   16a20:	ldr	r3, [r4, #4]
   16a24:	mov	r0, #1
   16a28:	mov	r1, #0
   16a2c:	bl	12790 <error@plt>
   16a30:	movw	r1, #64595	; 0xfc53
   16a34:	movt	r1, #3
   16a38:	b	16a80 <__assert_fail@plt+0x3ec4>
   16a3c:	ldr	r0, [r7, #8]
   16a40:	bic	r0, r0, #1
   16a44:	cmp	r0, #2
   16a48:	ldrbeq	r0, [r4, #33]	; 0x21
   16a4c:	cmpeq	r0, #0
   16a50:	beq	16acc <__assert_fail@plt+0x3f10>
   16a54:	ldrb	r0, [r4, #33]	; 0x21
   16a58:	cmp	r0, #0
   16a5c:	bne	16a9c <__assert_fail@plt+0x3ee0>
   16a60:	movw	r1, #64388	; 0xfb84
   16a64:	movt	r1, #3
   16a68:	b	16a80 <__assert_fail@plt+0x3ec4>
   16a6c:	ldrb	r0, [r4, #33]	; 0x21
   16a70:	cmp	r0, #0
   16a74:	bne	16aa8 <__assert_fail@plt+0x3eec>
   16a78:	movw	r1, #64540	; 0xfc1c
   16a7c:	movt	r1, #3
   16a80:	mov	r0, #0
   16a84:	mov	r2, #5
   16a88:	bl	1264c <dcgettext@plt>
   16a8c:	mov	r2, r0
   16a90:	mov	r0, #1
   16a94:	mov	r1, #0
   16a98:	bl	12790 <error@plt>
   16a9c:	movw	r1, #64354	; 0xfb62
   16aa0:	movt	r1, #3
   16aa4:	b	16ad4 <__assert_fail@plt+0x3f18>
   16aa8:	movw	r1, #64237	; 0xfaed
   16aac:	movt	r1, #3
   16ab0:	mov	r0, #0
   16ab4:	mov	r2, #5
   16ab8:	bl	1264c <dcgettext@plt>
   16abc:	mov	r2, r0
   16ac0:	ldr	r0, [r5]
   16ac4:	ldr	r3, [r0, #4]
   16ac8:	b	16a24 <__assert_fail@plt+0x3e68>
   16acc:	movw	r1, #64310	; 0xfb36
   16ad0:	movt	r1, #3
   16ad4:	mov	r0, #0
   16ad8:	mov	r2, #5
   16adc:	bl	1264c <dcgettext@plt>
   16ae0:	mov	r2, r0
   16ae4:	ldr	r3, [r7, #4]
   16ae8:	b	16a24 <__assert_fail@plt+0x3e68>
   16aec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16af0:	add	fp, sp, #28
   16af4:	sub	sp, sp, #12
   16af8:	cmp	r1, #0
   16afc:	beq	16da0 <__assert_fail@plt+0x41e4>
   16b00:	mov	r5, r2
   16b04:	mov	sl, r1
   16b08:	mov	r4, r0
   16b0c:	movw	r7, #63981	; 0xf9ed
   16b10:	movt	r7, #3
   16b14:	movw	r9, #2143	; 0x85f
   16b18:	movt	r9, #4
   16b1c:	cmp	r5, #1
   16b20:	blt	16b48 <__assert_fail@plt+0x3f8c>
   16b24:	mov	r6, #0
   16b28:	mov	r0, r7
   16b2c:	mov	r1, #4
   16b30:	mov	r2, #1
   16b34:	mov	r3, r4
   16b38:	bl	12700 <fwrite@plt>
   16b3c:	add	r6, r6, #1
   16b40:	cmp	r5, r6
   16b44:	bne	16b28 <__assert_fail@plt+0x3f6c>
   16b48:	movw	r0, #63986	; 0xf9f2
   16b4c:	movt	r0, #3
   16b50:	mov	r1, #6
   16b54:	mov	r2, #1
   16b58:	mov	r3, r4
   16b5c:	bl	12700 <fwrite@plt>
   16b60:	mov	r0, r4
   16b64:	mov	r1, sl
   16b68:	bl	15fa8 <__assert_fail@plt+0x33ec>
   16b6c:	ldrsh	r0, [sl, #8]
   16b70:	bl	174c0 <__assert_fail@plt+0x4904>
   16b74:	mov	r8, r0
   16b78:	ldrsh	r0, [sl, #12]
   16b7c:	bl	17504 <__assert_fail@plt+0x4948>
   16b80:	mov	r3, r0
   16b84:	mov	r0, r4
   16b88:	movw	r1, #63993	; 0xf9f9
   16b8c:	movt	r1, #3
   16b90:	mov	r2, r8
   16b94:	bl	128c8 <fprintf@plt>
   16b98:	ldr	r0, [sl, #24]
   16b9c:	bl	17548 <__assert_fail@plt+0x498c>
   16ba0:	mov	r2, r0
   16ba4:	ldrb	r0, [sl, #16]
   16ba8:	vldr	s0, [sl, #28]
   16bac:	cmp	r0, #0
   16bb0:	mov	r0, r9
   16bb4:	movw	r1, #64059	; 0xfa3b
   16bb8:	movt	r1, #3
   16bbc:	moveq	r0, r1
   16bc0:	vcvt.f64.f32	d16, s0
   16bc4:	str	r0, [sp, #8]
   16bc8:	vstr	d16, [sp]
   16bcc:	mov	r0, r4
   16bd0:	movw	r1, #64011	; 0xfa0b
   16bd4:	movt	r1, #3
   16bd8:	bl	128c8 <fprintf@plt>
   16bdc:	ldrb	r0, [sl, #18]
   16be0:	cmp	r0, #0
   16be4:	bne	16c00 <__assert_fail@plt+0x4044>
   16be8:	ldrb	r0, [sl, #19]
   16bec:	cmp	r0, #0
   16bf0:	bne	16c00 <__assert_fail@plt+0x4044>
   16bf4:	ldrb	r0, [sl, #20]
   16bf8:	cmp	r0, #0
   16bfc:	beq	16ca4 <__assert_fail@plt+0x40e8>
   16c00:	movw	r0, #64063	; 0xfa3f
   16c04:	movt	r0, #3
   16c08:	mov	r1, #6
   16c0c:	mov	r2, #1
   16c10:	mov	r3, r4
   16c14:	bl	12700 <fwrite@plt>
   16c18:	ldrb	r0, [sl, #18]
   16c1c:	cmp	r0, #0
   16c20:	beq	16c44 <__assert_fail@plt+0x4088>
   16c24:	mov	r8, #1
   16c28:	movw	r0, #6312	; 0x18a8
   16c2c:	movt	r0, #4
   16c30:	mov	r1, #4
   16c34:	mov	r2, #1
   16c38:	mov	r3, r4
   16c3c:	bl	12700 <fwrite@plt>
   16c40:	b	16c48 <__assert_fail@plt+0x408c>
   16c44:	mov	r8, #0
   16c48:	ldrb	r0, [sl, #20]
   16c4c:	cmp	r0, #0
   16c50:	beq	16c78 <__assert_fail@plt+0x40bc>
   16c54:	cmp	r8, #0
   16c58:	movw	r2, #64078	; 0xfa4e
   16c5c:	movt	r2, #3
   16c60:	moveq	r2, r9
   16c64:	mov	r0, r4
   16c68:	movw	r1, #64070	; 0xfa46
   16c6c:	movt	r1, #3
   16c70:	bl	128c8 <fprintf@plt>
   16c74:	mov	r8, #1
   16c78:	ldrb	r0, [sl, #19]
   16c7c:	cmp	r0, #0
   16c80:	beq	16ca4 <__assert_fail@plt+0x40e8>
   16c84:	cmp	r8, #0
   16c88:	movw	r2, #64078	; 0xfa4e
   16c8c:	movt	r2, #3
   16c90:	moveq	r2, r9
   16c94:	mov	r0, r4
   16c98:	movw	r1, #64080	; 0xfa50
   16c9c:	movt	r1, #3
   16ca0:	bl	128c8 <fprintf@plt>
   16ca4:	mov	r0, #10
   16ca8:	mov	r1, r4
   16cac:	bl	12a3c <fputc@plt>
   16cb0:	cmp	r5, #1
   16cb4:	blt	16cdc <__assert_fail@plt+0x4120>
   16cb8:	mov	r6, #0
   16cbc:	mov	r0, r7
   16cc0:	mov	r1, #4
   16cc4:	mov	r2, #1
   16cc8:	mov	r3, r4
   16ccc:	bl	12700 <fwrite@plt>
   16cd0:	add	r6, r6, #1
   16cd4:	cmp	r5, r6
   16cd8:	bne	16cbc <__assert_fail@plt+0x4100>
   16cdc:	ldr	r0, [sl, #156]	; 0x9c
   16ce0:	cmp	r0, #0
   16ce4:	beq	16d1c <__assert_fail@plt+0x4160>
   16ce8:	movw	r0, #64101	; 0xfa65
   16cec:	movt	r0, #3
   16cf0:	mov	r1, #6
   16cf4:	mov	r2, #1
   16cf8:	mov	r3, r4
   16cfc:	bl	12700 <fwrite@plt>
   16d00:	ldr	r1, [sl, #156]	; 0x9c
   16d04:	add	r2, r5, #1
   16d08:	mov	r0, r4
   16d0c:	bl	16aec <__assert_fail@plt+0x3f30>
   16d10:	cmp	r5, #1
   16d14:	bge	16d48 <__assert_fail@plt+0x418c>
   16d18:	b	16d6c <__assert_fail@plt+0x41b0>
   16d1c:	ldr	r0, [sl, #160]	; 0xa0
   16d20:	cmp	r0, #0
   16d24:	beq	16db8 <__assert_fail@plt+0x41fc>
   16d28:	movw	r0, #64108	; 0xfa6c
   16d2c:	movt	r0, #3
   16d30:	mov	r1, #9
   16d34:	mov	r2, #1
   16d38:	mov	r3, r4
   16d3c:	bl	12700 <fwrite@plt>
   16d40:	cmp	r5, #1
   16d44:	blt	16d6c <__assert_fail@plt+0x41b0>
   16d48:	mov	r6, #0
   16d4c:	mov	r0, r7
   16d50:	mov	r1, #4
   16d54:	mov	r2, #1
   16d58:	mov	r3, r4
   16d5c:	bl	12700 <fwrite@plt>
   16d60:	add	r6, r6, #1
   16d64:	cmp	r5, r6
   16d68:	bne	16d4c <__assert_fail@plt+0x4190>
   16d6c:	ldr	r0, [sl, #160]	; 0xa0
   16d70:	cmp	r0, #0
   16d74:	beq	16da8 <__assert_fail@plt+0x41ec>
   16d78:	movw	r0, #64118	; 0xfa76
   16d7c:	movt	r0, #3
   16d80:	mov	r1, #7
   16d84:	mov	r2, #1
   16d88:	mov	r3, r4
   16d8c:	bl	12700 <fwrite@plt>
   16d90:	add	r5, r5, #1
   16d94:	ldr	sl, [sl, #160]	; 0xa0
   16d98:	cmp	sl, #0
   16d9c:	bne	16b1c <__assert_fail@plt+0x3f60>
   16da0:	sub	sp, fp, #28
   16da4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16da8:	movw	r0, #64126	; 0xfa7e
   16dac:	movt	r0, #3
   16db0:	mov	r1, #10
   16db4:	b	16dc4 <__assert_fail@plt+0x4208>
   16db8:	movw	r0, #64087	; 0xfa57
   16dbc:	movt	r0, #3
   16dc0:	mov	r1, #13
   16dc4:	mov	r2, #1
   16dc8:	mov	r3, r4
   16dcc:	sub	sp, fp, #28
   16dd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dd4:	b	12700 <fwrite@plt>
   16dd8:	cmp	r0, #0
   16ddc:	bxeq	lr
   16de0:	push	{r4, sl, fp, lr}
   16de4:	add	fp, sp, #8
   16de8:	mov	r4, r0
   16dec:	ldr	r0, [r0, #160]	; 0xa0
   16df0:	bl	16dd8 <__assert_fail@plt+0x421c>
   16df4:	ldr	r0, [r4, #156]	; 0x9c
   16df8:	bl	16dd8 <__assert_fail@plt+0x421c>
   16dfc:	mov	r0, r4
   16e00:	bl	17680 <__assert_fail@plt+0x4ac4>
   16e04:	str	r0, [r4, #24]
   16e08:	pop	{r4, sl, fp, pc}
   16e0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e10:	add	fp, sp, #28
   16e14:	sub	sp, sp, #116	; 0x74
   16e18:	mov	r1, #0
   16e1c:	str	r1, [fp, #-36]	; 0xffffffdc
   16e20:	str	r1, [fp, #-40]	; 0xffffffd8
   16e24:	str	r1, [fp, #-44]	; 0xffffffd4
   16e28:	str	r1, [fp, #-48]	; 0xffffffd0
   16e2c:	cmp	r0, #0
   16e30:	beq	17170 <__assert_fail@plt+0x45b4>
   16e34:	mov	r8, r0
   16e38:	ldr	r0, [r0]
   16e3c:	cmp	r0, #0
   16e40:	beq	17170 <__assert_fail@plt+0x45b4>
   16e44:	mov	r4, #0
   16e48:	add	r5, sp, #8
   16e4c:	add	r0, r5, r4
   16e50:	bl	1788c <__assert_fail@plt+0x4cd0>
   16e54:	add	r4, r4, #8
   16e58:	cmp	r4, #88	; 0x58
   16e5c:	bne	16e4c <__assert_fail@plt+0x4290>
   16e60:	ldr	r0, [r8]
   16e64:	mov	r1, r0
   16e68:	ldr	r3, [r1, #156]!	; 0x9c
   16e6c:	cmp	r3, #0
   16e70:	beq	16e98 <__assert_fail@plt+0x42dc>
   16e74:	mov	r7, r0
   16e78:	mov	r2, r1
   16e7c:	mov	r0, r3
   16e80:	mov	r1, r3
   16e84:	ldr	r3, [r1, #156]!	; 0x9c
   16e88:	cmp	r3, #0
   16e8c:	bne	16e74 <__assert_fail@plt+0x42b8>
   16e90:	ldr	r1, [r7, #12]
   16e94:	b	16ea0 <__assert_fail@plt+0x42e4>
   16e98:	mov	r1, #3
   16e9c:	mov	r2, r8
   16ea0:	ldr	r3, [r0, #8]
   16ea4:	cmp	r3, #3
   16ea8:	blne	1789c <__assert_fail@plt+0x4ce0>
   16eac:	movw	r0, #24196	; 0x5e84
   16eb0:	movt	r0, #5
   16eb4:	ldrb	r0, [r0, #44]	; 0x2c
   16eb8:	tst	r0, #9
   16ebc:	bne	1717c <__assert_fail@plt+0x45c0>
   16ec0:	ldr	r0, [r8]
   16ec4:	cmp	r0, #0
   16ec8:	beq	17148 <__assert_fail@plt+0x458c>
   16ecc:	ldr	r1, [r0, #8]
   16ed0:	cmp	r1, #3
   16ed4:	mov	r6, #0
   16ed8:	ldreq	r6, [r0, #12]
   16edc:	ldr	r0, [r8]
   16ee0:	cmp	r0, #0
   16ee4:	beq	17148 <__assert_fail@plt+0x458c>
   16ee8:	mov	r1, #0
   16eec:	str	r1, [sp, #4]
   16ef0:	mov	r9, r8
   16ef4:	mov	r8, r0
   16ef8:	ldr	r0, [r8, #8]
   16efc:	cmp	r0, #3
   16f00:	bne	16f24 <__assert_fail@plt+0x4368>
   16f04:	ldr	r0, [r8, #12]
   16f08:	cmp	r0, r6
   16f0c:	beq	16f24 <__assert_fail@plt+0x4368>
   16f10:	mov	r0, r8
   16f14:	mov	r1, r6
   16f18:	mov	r2, r9
   16f1c:	bl	1789c <__assert_fail@plt+0x4ce0>
   16f20:	mov	r8, r0
   16f24:	mov	r4, r8
   16f28:	ldr	sl, [r4, #160]!	; 0xa0
   16f2c:	ldr	r0, [sl, #8]
   16f30:	cmp	r0, #2
   16f34:	bcs	170e8 <__assert_fail@plt+0x452c>
   16f38:	cmp	r6, #1
   16f3c:	beq	1710c <__assert_fail@plt+0x4550>
   16f40:	ldrb	r0, [sl, #16]
   16f44:	cmp	r0, #0
   16f48:	bne	1710c <__assert_fail@plt+0x4550>
   16f4c:	mov	r7, r6
   16f50:	mov	r6, r5
   16f54:	ldr	r5, [sl]
   16f58:	mov	r0, sl
   16f5c:	bl	17948 <__assert_fail@plt+0x4d8c>
   16f60:	cmp	r0, #0
   16f64:	beq	16f94 <__assert_fail@plt+0x43d8>
   16f68:	movw	r0, #24196	; 0x5e84
   16f6c:	movt	r0, #5
   16f70:	ldrb	r0, [r0, #44]	; 0x2c
   16f74:	tst	r0, #8
   16f78:	mov	r5, r6
   16f7c:	bne	17048 <__assert_fail@plt+0x448c>
   16f80:	sub	r0, fp, #48	; 0x30
   16f84:	mov	r1, r8
   16f88:	mov	r2, r9
   16f8c:	bl	179f0 <__assert_fail@plt+0x4e34>
   16f90:	b	16ffc <__assert_fail@plt+0x4440>
   16f94:	movw	r0, #19676	; 0x4cdc
   16f98:	movt	r0, #1
   16f9c:	cmp	r5, r0
   16fa0:	beq	16fe8 <__assert_fail@plt+0x442c>
   16fa4:	movw	r0, #24196	; 0x5e84
   16fa8:	movt	r0, #5
   16fac:	ldrh	r2, [r0, #68]	; 0x44
   16fb0:	cmp	r2, #2
   16fb4:	mov	r5, r6
   16fb8:	mov	r6, r7
   16fbc:	bcc	1710c <__assert_fail@plt+0x4550>
   16fc0:	ldr	r0, [sl, #24]
   16fc4:	sub	r0, r0, #1
   16fc8:	cmp	r0, #1
   16fcc:	bhi	17004 <__assert_fail@plt+0x4448>
   16fd0:	cmp	r2, #2
   16fd4:	bhi	1700c <__assert_fail@plt+0x4450>
   16fd8:	ldrb	r0, [sl, #18]
   16fdc:	cmp	r0, #0
   16fe0:	beq	1700c <__assert_fail@plt+0x4450>
   16fe4:	b	1710c <__assert_fail@plt+0x4550>
   16fe8:	sub	r0, fp, #40	; 0x28
   16fec:	mov	r1, r8
   16ff0:	mov	r2, r9
   16ff4:	bl	179f0 <__assert_fail@plt+0x4e34>
   16ff8:	mov	r5, r6
   16ffc:	mov	r6, r7
   17000:	b	17038 <__assert_fail@plt+0x447c>
   17004:	cmp	r2, #3
   17008:	bcc	1710c <__assert_fail@plt+0x4550>
   1700c:	movw	r0, #24196	; 0x5e84
   17010:	movt	r0, #5
   17014:	ldrb	r0, [r0, #44]	; 0x2c
   17018:	tst	r0, #8
   1701c:	bne	17098 <__assert_fail@plt+0x44dc>
   17020:	ldr	r0, [r8, #160]	; 0xa0
   17024:	ldr	r0, [r0, #24]
   17028:	add	r0, r5, r0, lsl #3
   1702c:	mov	r1, r8
   17030:	mov	r2, r9
   17034:	bl	179f0 <__assert_fail@plt+0x4e34>
   17038:	ldr	r8, [r9]
   1703c:	cmp	r8, #0
   17040:	bne	16ef8 <__assert_fail@plt+0x433c>
   17044:	b	17154 <__assert_fail@plt+0x4598>
   17048:	movw	r0, #24196	; 0x5e84
   1704c:	movt	r0, #5
   17050:	ldrh	r2, [r0, #68]	; 0x44
   17054:	movw	r0, #21856	; 0x5560
   17058:	movt	r0, #5
   1705c:	mov	r6, r0
   17060:	ldr	r0, [r0]
   17064:	movw	r1, #65010	; 0xfdf2
   17068:	movt	r1, #3
   1706c:	bl	128c8 <fprintf@plt>
   17070:	ldr	r0, [r6]
   17074:	ldr	r1, [r4]
   17078:	bl	15fa8 <__assert_fail@plt+0x33ec>
   1707c:	ldr	r3, [r6]
   17080:	movw	r0, #65043	; 0xfe13
   17084:	movt	r0, #3
   17088:	mov	r1, #16
   1708c:	mov	r2, #1
   17090:	bl	12700 <fwrite@plt>
   17094:	b	16f80 <__assert_fail@plt+0x43c4>
   17098:	movw	r0, #21856	; 0x5560
   1709c:	movt	r0, #5
   170a0:	mov	r7, r0
   170a4:	ldr	r0, [r0]
   170a8:	movw	r1, #65060	; 0xfe24
   170ac:	movt	r1, #3
   170b0:	bl	128c8 <fprintf@plt>
   170b4:	ldr	r0, [r7]
   170b8:	ldr	r1, [r4]
   170bc:	bl	15fa8 <__assert_fail@plt+0x33ec>
   170c0:	ldr	sl, [r7]
   170c4:	ldr	r0, [r4]
   170c8:	ldr	r0, [r0, #24]
   170cc:	bl	17548 <__assert_fail@plt+0x498c>
   170d0:	mov	r2, r0
   170d4:	mov	r0, sl
   170d8:	movw	r1, #65090	; 0xfe42
   170dc:	movt	r1, #3
   170e0:	bl	128c8 <fprintf@plt>
   170e4:	b	17020 <__assert_fail@plt+0x4464>
   170e8:	beq	170fc <__assert_fail@plt+0x4540>
   170ec:	cmp	r0, #3
   170f0:	bne	171b0 <__assert_fail@plt+0x45f4>
   170f4:	mov	r0, r4
   170f8:	b	17100 <__assert_fail@plt+0x4544>
   170fc:	add	r0, sl, #160	; 0xa0
   17100:	bl	16e0c <__assert_fail@plt+0x4250>
   17104:	ldr	r1, [r4]
   17108:	strb	r0, [r1, #16]
   1710c:	ldr	r0, [r4]
   17110:	ldrb	r0, [r0, #16]
   17114:	cmp	r0, #0
   17118:	beq	17138 <__assert_fail@plt+0x457c>
   1711c:	mov	r0, r5
   17120:	sub	r1, fp, #48	; 0x30
   17124:	sub	r2, fp, #40	; 0x28
   17128:	mov	r3, r9
   1712c:	bl	17a14 <__assert_fail@plt+0x4e58>
   17130:	mov	r0, #1
   17134:	str	r0, [sp, #4]
   17138:	ldr	r0, [r8, #156]!	; 0x9c
   1713c:	cmp	r0, #0
   17140:	bne	16ef0 <__assert_fail@plt+0x4334>
   17144:	b	17158 <__assert_fail@plt+0x459c>
   17148:	mov	r0, #0
   1714c:	str	r0, [sp, #4]
   17150:	b	17158 <__assert_fail@plt+0x459c>
   17154:	mov	r8, r9
   17158:	add	r0, sp, #8
   1715c:	sub	r1, fp, #48	; 0x30
   17160:	sub	r2, fp, #40	; 0x28
   17164:	mov	r3, r8
   17168:	bl	17a14 <__assert_fail@plt+0x4e58>
   1716c:	ldr	r1, [sp, #4]
   17170:	and	r0, r1, #1
   17174:	sub	sp, fp, #28
   17178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1717c:	movw	r4, #21856	; 0x5560
   17180:	movt	r4, #5
   17184:	ldr	r3, [r4]
   17188:	movw	r0, #64987	; 0xfddb
   1718c:	movt	r0, #3
   17190:	mov	r1, #22
   17194:	mov	r2, #1
   17198:	bl	12700 <fwrite@plt>
   1719c:	ldr	r0, [r4]
   171a0:	ldr	r1, [r8]
   171a4:	mov	r2, #0
   171a8:	bl	16aec <__assert_fail@plt+0x3f30>
   171ac:	b	16ec0 <__assert_fail@plt+0x4304>
   171b0:	movw	r1, #64676	; 0xfca4
   171b4:	movt	r1, #3
   171b8:	mov	r0, #0
   171bc:	mov	r2, #5
   171c0:	bl	1264c <dcgettext@plt>
   171c4:	mov	r2, r0
   171c8:	mov	r0, #1
   171cc:	mov	r1, #0
   171d0:	bl	12790 <error@plt>
   171d4:	push	{r4, sl, fp, lr}
   171d8:	add	fp, sp, #8
   171dc:	mov	r4, r0
   171e0:	b	171f4 <__assert_fail@plt+0x4638>
   171e4:	ldr	r4, [r4, #160]	; 0xa0
   171e8:	mov	r1, #0
   171ec:	cmp	r4, #0
   171f0:	popeq	{r4, sl, fp, pc}
   171f4:	tst	r1, #1
   171f8:	ldrne	r0, [r4, #8]
   171fc:	cmpne	r0, #3
   17200:	bne	17228 <__assert_fail@plt+0x466c>
   17204:	ldr	r0, [r4, #156]	; 0x9c
   17208:	cmp	r0, #0
   1720c:	beq	171e4 <__assert_fail@plt+0x4628>
   17210:	ldr	r1, [r0, #8]
   17214:	cmp	r1, #3
   17218:	bne	17248 <__assert_fail@plt+0x468c>
   1721c:	mov	r1, #0
   17220:	bl	171d4 <__assert_fail@plt+0x4618>
   17224:	b	171e4 <__assert_fail@plt+0x4628>
   17228:	movw	r0, #65166	; 0xfe8e
   1722c:	movt	r0, #3
   17230:	movw	r1, #63018	; 0xf62a
   17234:	movt	r1, #3
   17238:	movw	r3, #65185	; 0xfea1
   1723c:	movt	r3, #3
   17240:	movw	r2, #1230	; 0x4ce
   17244:	bl	12bbc <__assert_fail@plt>
   17248:	movw	r0, #65237	; 0xfed5
   1724c:	movt	r0, #3
   17250:	movw	r1, #63018	; 0xf62a
   17254:	movt	r1, #3
   17258:	movw	r3, #65185	; 0xfea1
   1725c:	movt	r3, #3
   17260:	movw	r2, #1235	; 0x4d3
   17264:	bl	12bbc <__assert_fail@plt>
   17268:	push	{r4, sl, fp, lr}
   1726c:	add	fp, sp, #8
   17270:	cmp	r0, #0
   17274:	popeq	{r4, sl, fp, pc}
   17278:	mov	r4, r0
   1727c:	mov	r0, r4
   17280:	bl	17c44 <__assert_fail@plt+0x5088>
   17284:	cmp	r0, #0
   17288:	bne	1727c <__assert_fail@plt+0x46c0>
   1728c:	ldr	r0, [r4, #156]	; 0x9c
   17290:	bl	17268 <__assert_fail@plt+0x46ac>
   17294:	ldr	r4, [r4, #160]	; 0xa0
   17298:	cmp	r4, #0
   1729c:	bne	1727c <__assert_fail@plt+0x46c0>
   172a0:	pop	{r4, sl, fp, pc}
   172a4:	push	{fp, lr}
   172a8:	mov	fp, sp
   172ac:	bl	172c0 <__assert_fail@plt+0x4704>
   172b0:	cmp	r0, #0
   172b4:	movne	r1, #0
   172b8:	strne	r1, [r0, #36]	; 0x24
   172bc:	pop	{fp, pc}
   172c0:	push	{r4, sl, fp, lr}
   172c4:	add	fp, sp, #8
   172c8:	mov	r4, r0
   172cc:	ldr	r0, [r0]
   172d0:	cmp	r0, #2
   172d4:	beq	17378 <__assert_fail@plt+0x47bc>
   172d8:	cmp	r0, #0
   172dc:	beq	17398 <__assert_fail@plt+0x47dc>
   172e0:	mov	r0, #176	; 0xb0
   172e4:	bl	2b888 <__assert_fail@plt+0x18ccc>
   172e8:	movw	r1, #21908	; 0x5594
   172ec:	movt	r1, #5
   172f0:	ldr	r2, [r1]
   172f4:	cmp	r2, #0
   172f8:	beq	17310 <__assert_fail@plt+0x4754>
   172fc:	movw	r1, #21912	; 0x5598
   17300:	movt	r1, #5
   17304:	ldr	r1, [r1]
   17308:	str	r0, [r1, #152]	; 0x98
   1730c:	b	17314 <__assert_fail@plt+0x4758>
   17310:	str	r0, [r1]
   17314:	movw	r1, #21912	; 0x5598
   17318:	movt	r1, #5
   1731c:	str	r0, [r1]
   17320:	mov	r2, #0
   17324:	str	r4, [r0, #172]	; 0xac
   17328:	str	r2, [r0, #8]
   1732c:	str	r2, [r0, #12]
   17330:	ldr	r4, [r1]
   17334:	mov	r0, #10
   17338:	movw	r1, #257	; 0x101
   1733c:	strh	r1, [r4, #18]
   17340:	movw	r1, #63685	; 0xf8c5
   17344:	movt	r1, #3
   17348:	str	r1, [r4, #36]	; 0x24
   1734c:	movw	r1, #24196	; 0x5e84
   17350:	movt	r1, #5
   17354:	ldrb	r1, [r1, #15]
   17358:	mov	r3, #1065353216	; 0x3f800000
   1735c:	str	r0, [r4, #24]
   17360:	str	r3, [r4, #28]
   17364:	strb	r1, [r4, #32]
   17368:	mov	r0, r4
   1736c:	bl	173b8 <__assert_fail@plt+0x47fc>
   17370:	mov	r0, r4
   17374:	pop	{r4, sl, fp, pc}
   17378:	movw	r0, #62247	; 0xf327
   1737c:	movt	r0, #3
   17380:	movw	r1, #63018	; 0xf62a
   17384:	movt	r1, #3
   17388:	movw	r3, #63625	; 0xf889
   1738c:	movt	r3, #3
   17390:	movw	r2, #1486	; 0x5ce
   17394:	bl	12bbc <__assert_fail@plt>
   17398:	movw	r0, #62211	; 0xf303
   1739c:	movt	r0, #3
   173a0:	movw	r1, #63018	; 0xf62a
   173a4:	movt	r1, #3
   173a8:	movw	r3, #63625	; 0xf889
   173ac:	movt	r3, #3
   173b0:	movw	r2, #1485	; 0x5cd
   173b4:	bl	12bbc <__assert_fail@plt>
   173b8:	mov	r1, #0
   173bc:	str	r1, [r0, #164]	; 0xa4
   173c0:	str	r1, [r0, #168]	; 0xa8
   173c4:	bx	lr
   173c8:	push	{r4, r5, r6, sl, fp, lr}
   173cc:	add	fp, sp, #16
   173d0:	mov	r5, r1
   173d4:	mov	r4, r0
   173d8:	movw	r6, #21916	; 0x559c
   173dc:	movt	r6, #5
   173e0:	ldr	r0, [r6]
   173e4:	cmp	r0, #0
   173e8:	bne	17404 <__assert_fail@plt+0x4848>
   173ec:	movw	r0, #63716	; 0xf8e4
   173f0:	movt	r0, #3
   173f4:	bl	1b8f4 <__assert_fail@plt+0x8d38>
   173f8:	str	r0, [r6]
   173fc:	cmp	r0, #0
   17400:	beq	174a0 <__assert_fail@plt+0x48e4>
   17404:	movw	r1, #21912	; 0x5598
   17408:	movt	r1, #5
   1740c:	ldr	r1, [r1]
   17410:	cmp	r1, #0
   17414:	beq	17468 <__assert_fail@plt+0x48ac>
   17418:	ldr	r1, [r1, #8]
   1741c:	cmp	r1, #1
   17420:	cmpne	r1, #5
   17424:	bne	17460 <__assert_fail@plt+0x48a4>
   17428:	bl	172a4 <__assert_fail@plt+0x46e8>
   1742c:	movw	r1, #15844	; 0x3de4
   17430:	movt	r1, #1
   17434:	movw	r2, #63861	; 0xf975
   17438:	movt	r2, #3
   1743c:	mov	r3, #3
   17440:	mov	r6, #0
   17444:	str	r6, [r0, #36]	; 0x24
   17448:	str	r6, [r0, #40]	; 0x28
   1744c:	strb	r6, [r0, #20]
   17450:	stm	r0, {r1, r2, r3}
   17454:	str	r3, [r0, #12]
   17458:	str	r6, [r0, #16]
   1745c:	b	17468 <__assert_fail@plt+0x48ac>
   17460:	cmp	r1, #0
   17464:	beq	1747c <__assert_fail@plt+0x48c0>
   17468:	mov	r0, r4
   1746c:	bl	172c0 <__assert_fail@plt+0x4704>
   17470:	str	r5, [r0, #36]	; 0x24
   17474:	str	r4, [r0, #172]	; 0xac
   17478:	pop	{r4, r5, r6, sl, fp, pc}
   1747c:	movw	r1, #63819	; 0xf94b
   17480:	movt	r1, #3
   17484:	mov	r0, #0
   17488:	mov	r2, #5
   1748c:	bl	1264c <dcgettext@plt>
   17490:	mov	r2, r0
   17494:	mov	r0, #1
   17498:	mov	r1, #0
   1749c:	bl	12790 <error@plt>
   174a0:	movw	r0, #63720	; 0xf8e8
   174a4:	movt	r0, #3
   174a8:	movw	r1, #63018	; 0xf62a
   174ac:	movt	r1, #3
   174b0:	movw	r3, #63738	; 0xf8fa
   174b4:	movt	r3, #3
   174b8:	movw	r2, #1528	; 0x5f8
   174bc:	bl	12bbc <__assert_fail@plt>
   174c0:	mov	r1, #0
   174c4:	movw	r2, #160	; 0xa0
   174c8:	movt	r2, #4
   174cc:	uxth	r0, r0
   174d0:	ldrh	r3, [r2]
   174d4:	cmp	r3, r0
   174d8:	beq	174f0 <__assert_fail@plt+0x4934>
   174dc:	add	r2, r2, #8
   174e0:	add	r1, r1, #1
   174e4:	cmp	r1, #6
   174e8:	bne	174d0 <__assert_fail@plt+0x4914>
   174ec:	mov	r1, #6
   174f0:	movw	r0, #160	; 0xa0
   174f4:	movt	r0, #4
   174f8:	add	r0, r0, r1, lsl #3
   174fc:	ldr	r0, [r0, #4]
   17500:	bx	lr
   17504:	mov	r1, #0
   17508:	movw	r2, #216	; 0xd8
   1750c:	movt	r2, #4
   17510:	uxth	r0, r0
   17514:	ldrh	r3, [r2]
   17518:	cmp	r3, r0
   1751c:	beq	17534 <__assert_fail@plt+0x4978>
   17520:	add	r2, r2, #8
   17524:	add	r1, r1, #1
   17528:	cmp	r1, #6
   1752c:	bne	17514 <__assert_fail@plt+0x4958>
   17530:	mov	r1, #6
   17534:	movw	r0, #216	; 0xd8
   17538:	movt	r0, #4
   1753c:	add	r0, r0, r1, lsl #3
   17540:	ldr	r0, [r0, #4]
   17544:	bx	lr
   17548:	mov	r1, r0
   1754c:	mov	r2, #0
   17550:	movw	ip, #21164	; 0x52ac
   17554:	movt	ip, #5
   17558:	movw	r0, #124	; 0x7c
   1755c:	movt	r0, #4
   17560:	b	17570 <__assert_fail@plt+0x49b4>
   17564:	add	r2, r2, #1
   17568:	cmp	r2, #11
   1756c:	bxcs	lr
   17570:	ldr	r3, [ip, r2, lsl #3]
   17574:	cmp	r3, r1
   17578:	bne	17564 <__assert_fail@plt+0x49a8>
   1757c:	add	r0, ip, r2, lsl #3
   17580:	ldr	r0, [r0, #4]
   17584:	bx	lr
   17588:	push	{r4, r5, r6, sl, fp, lr}
   1758c:	add	fp, sp, #16
   17590:	mov	r4, r0
   17594:	ldr	r0, [r0]
   17598:	mov	r6, #0
   1759c:	cmp	r0, #0
   175a0:	ldrne	r0, [r0, #8]
   175a4:	cmpne	r0, #5
   175a8:	bne	175b4 <__assert_fail@plt+0x49f8>
   175ac:	mov	r0, r6
   175b0:	pop	{r4, r5, r6, sl, fp, pc}
   175b4:	mov	r5, r2
   175b8:	ldr	r2, [r4]
   175bc:	mov	r6, r1
   175c0:	cmp	r2, #0
   175c4:	bne	175f8 <__assert_fail@plt+0x4a3c>
   175c8:	b	175ac <__assert_fail@plt+0x49f0>
   175cc:	str	r6, [r2, #156]	; 0x9c
   175d0:	ldr	r6, [r4]
   175d4:	ldr	r0, [r6, #152]	; 0x98
   175d8:	str	r0, [r4]
   175dc:	ldrsh	r1, [r6, #12]
   175e0:	mov	r0, r4
   175e4:	bl	168bc <__assert_fail@plt+0x3d00>
   175e8:	str	r0, [r6, #160]	; 0xa0
   175ec:	ldr	r2, [r4]
   175f0:	cmp	r2, #0
   175f4:	beq	175ac <__assert_fail@plt+0x49f0>
   175f8:	ldr	r0, [r2, #12]
   175fc:	cmp	r0, r5
   17600:	ble	175ac <__assert_fail@plt+0x49f0>
   17604:	ldr	r0, [r2, #8]
   17608:	cmp	r0, #5
   1760c:	bhi	17654 <__assert_fail@plt+0x4a98>
   17610:	add	r1, pc, #0
   17614:	ldr	pc, [r1, r0, lsl #2]
   17618:	andeq	r7, r1, r0, lsr r6
   1761c:	andeq	r7, r1, r0, lsr r6
   17620:	andeq	r7, r1, r0, lsr r6
   17624:	andeq	r7, r1, ip, asr #11
   17628:	andeq	r7, r1, r0, lsr r6
   1762c:	andeq	r7, r1, ip, lsr #11
   17630:	movw	r1, #64137	; 0xfa89
   17634:	movt	r1, #3
   17638:	mov	r0, #0
   1763c:	mov	r2, #5
   17640:	bl	1264c <dcgettext@plt>
   17644:	mov	r2, r0
   17648:	mov	r0, #1
   1764c:	mov	r1, #0
   17650:	bl	12790 <error@plt>
   17654:	movw	r1, #64709	; 0xfcc5
   17658:	movt	r1, #3
   1765c:	mov	r0, #0
   17660:	mov	r2, #5
   17664:	bl	1264c <dcgettext@plt>
   17668:	mov	r2, r0
   1766c:	ldr	r0, [r4]
   17670:	ldr	r3, [r0, #8]
   17674:	mov	r0, #1
   17678:	mov	r1, #0
   1767c:	bl	12790 <error@plt>
   17680:	push	{r4, r5, r6, sl, fp, lr}
   17684:	add	fp, sp, #16
   17688:	sub	sp, sp, #16
   1768c:	mov	r5, r0
   17690:	ldrb	r0, [r0, #18]
   17694:	mov	r4, #3
   17698:	cmp	r0, #0
   1769c:	bne	176bc <__assert_fail@plt+0x4b00>
   176a0:	ldrb	r0, [r5, #20]
   176a4:	mov	r4, #1
   176a8:	cmp	r0, #0
   176ac:	bne	176bc <__assert_fail@plt+0x4b00>
   176b0:	ldrb	r4, [r5, #19]
   176b4:	cmp	r4, #0
   176b8:	movwne	r4, #2
   176bc:	ldr	r0, [r5]
   176c0:	movw	r1, #17184	; 0x4320
   176c4:	movt	r1, #1
   176c8:	cmp	r0, r1
   176cc:	movwne	r1, #17188	; 0x4324
   176d0:	movtne	r1, #1
   176d4:	cmpne	r0, r1
   176d8:	bne	176f0 <__assert_fail@plt+0x4b34>
   176dc:	ldrb	r1, [r5, #40]	; 0x28
   176e0:	mov	r0, #7
   176e4:	cmp	r1, #0
   176e8:	movweq	r0, #8
   176ec:	b	177b4 <__assert_fail@plt+0x4bf8>
   176f0:	movw	r1, #40516	; 0x9e44
   176f4:	movt	r1, #1
   176f8:	cmp	r0, r1
   176fc:	beq	17780 <__assert_fail@plt+0x4bc4>
   17700:	movw	r6, #21920	; 0x55a0
   17704:	movt	r6, #5
   17708:	ldrb	r0, [r6]
   1770c:	cmp	r0, #0
   17710:	bne	17744 <__assert_fail@plt+0x4b88>
   17714:	movw	r0, #21252	; 0x5304
   17718:	movt	r0, #5
   1771c:	movw	r3, #30684	; 0x77dc
   17720:	movt	r3, #1
   17724:	mov	r1, #59	; 0x3b
   17728:	mov	r2, #8
   1772c:	bl	12ac0 <qsort@plt>
   17730:	bl	17810 <__assert_fail@plt+0x4c54>
   17734:	cmp	r0, #0
   17738:	beq	177c8 <__assert_fail@plt+0x4c0c>
   1773c:	mov	r0, #1
   17740:	strb	r0, [r6]
   17744:	ldr	r0, [r5]
   17748:	str	r0, [sp, #8]
   1774c:	movw	r0, #30684	; 0x77dc
   17750:	movt	r0, #1
   17754:	str	r0, [sp]
   17758:	add	r0, sp, #8
   1775c:	movw	r1, #21252	; 0x5304
   17760:	movt	r1, #5
   17764:	mov	r2, #59	; 0x3b
   17768:	mov	r3, #8
   1776c:	bl	12910 <bsearch@plt>
   17770:	cmp	r0, #0
   17774:	beq	17788 <__assert_fail@plt+0x4bcc>
   17778:	ldr	r0, [r0, #4]
   1777c:	b	177b4 <__assert_fail@plt+0x4bf8>
   17780:	ldr	r0, [r5, #24]
   17784:	b	177b4 <__assert_fail@plt+0x4bf8>
   17788:	movw	r1, #64783	; 0xfd0f
   1778c:	movt	r1, #3
   17790:	mov	r0, #0
   17794:	mov	r2, #5
   17798:	bl	1264c <dcgettext@plt>
   1779c:	mov	r2, r0
   177a0:	ldr	r3, [r5, #4]
   177a4:	mov	r0, #0
   177a8:	mov	r1, #0
   177ac:	bl	12790 <error@plt>
   177b0:	mov	r0, #10
   177b4:	cmp	r0, r4
   177b8:	movhi	r4, r0
   177bc:	mov	r0, r4
   177c0:	sub	sp, fp, #16
   177c4:	pop	{r4, r5, r6, sl, fp, pc}
   177c8:	movw	r2, #64747	; 0xfceb
   177cc:	movt	r2, #3
   177d0:	mov	r0, #1
   177d4:	mov	r1, #0
   177d8:	bl	12790 <error@plt>
   177dc:	push	{fp, lr}
   177e0:	mov	fp, sp
   177e4:	sub	sp, sp, #8
   177e8:	ldr	r0, [r0]
   177ec:	str	r0, [sp, #4]
   177f0:	ldr	r0, [r1]
   177f4:	str	r0, [sp]
   177f8:	add	r0, sp, #4
   177fc:	mov	r1, sp
   17800:	mov	r2, #4
   17804:	bl	12628 <memcmp@plt>
   17808:	mov	sp, fp
   1780c:	pop	{fp, pc}
   17810:	push	{r4, r5, r6, sl, fp, lr}
   17814:	add	fp, sp, #16
   17818:	mov	r6, #1
   1781c:	movw	r5, #21252	; 0x5304
   17820:	movt	r5, #5
   17824:	b	1783c <__assert_fail@plt+0x4c80>
   17828:	add	r6, r6, #1
   1782c:	cmp	r6, #58	; 0x3a
   17830:	mov	r5, r4
   17834:	movhi	r0, #1
   17838:	pophi	{r4, r5, r6, sl, fp, pc}
   1783c:	add	r4, r5, #8
   17840:	mov	r0, r4
   17844:	mov	r1, r5
   17848:	bl	177dc <__assert_fail@plt+0x4c20>
   1784c:	cmp	r0, #0
   17850:	movlt	r0, #0
   17854:	poplt	{r4, r5, r6, sl, fp, pc}
   17858:	mov	r0, r5
   1785c:	mov	r1, r4
   17860:	bl	177dc <__assert_fail@plt+0x4c20>
   17864:	cmp	r0, #1
   17868:	blt	17828 <__assert_fail@plt+0x4c6c>
   1786c:	movw	r0, #64895	; 0xfd7f
   17870:	movt	r0, #3
   17874:	movw	r1, #63018	; 0xf62a
   17878:	movt	r1, #3
   1787c:	movw	r3, #64907	; 0xfd8b
   17880:	movt	r3, #3
   17884:	movw	r2, #1013	; 0x3f5
   17888:	bl	12bbc <__assert_fail@plt>
   1788c:	mov	r1, #0
   17890:	str	r1, [r0]
   17894:	str	r1, [r0, #4]
   17898:	bx	lr
   1789c:	push	{r4, r5, r6, r7, fp, lr}
   178a0:	add	fp, sp, #16
   178a4:	mov	r4, r2
   178a8:	mov	r7, r1
   178ac:	mov	r5, r0
   178b0:	mov	r0, #176	; 0xb0
   178b4:	bl	2b888 <__assert_fail@plt+0x18ccc>
   178b8:	mov	r6, r0
   178bc:	mov	r0, #3
   178c0:	str	r0, [r6, #8]
   178c4:	str	r7, [r6, #12]
   178c8:	mov	r0, #0
   178cc:	str	r0, [r6, #24]
   178d0:	cmp	r7, #3
   178d4:	beq	17904 <__assert_fail@plt+0x4d48>
   178d8:	cmp	r7, #2
   178dc:	beq	17918 <__assert_fail@plt+0x4d5c>
   178e0:	cmp	r7, #1
   178e4:	bne	17938 <__assert_fail@plt+0x4d7c>
   178e8:	movw	r1, #64078	; 0xfa4e
   178ec:	movt	r1, #3
   178f0:	vmov.f32	s0, #112	; 0x3f800000  1.0
   178f4:	movw	r0, #16292	; 0x3fa4
   178f8:	movt	r0, #1
   178fc:	strd	r0, [r6]
   17900:	b	17934 <__assert_fail@plt+0x4d78>
   17904:	movw	r1, #63861	; 0xf975
   17908:	movt	r1, #3
   1790c:	movw	r0, #15844	; 0x3de4
   17910:	movt	r0, #1
   17914:	b	17928 <__assert_fail@plt+0x4d6c>
   17918:	movw	r1, #65105	; 0xfe51
   1791c:	movt	r1, #3
   17920:	movw	r0, #19076	; 0x4a84
   17924:	movt	r0, #1
   17928:	strd	r0, [r6]
   1792c:	vldr	s0, [r5, #28]
   17930:	bl	162a4 <__assert_fail@plt+0x36e8>
   17934:	vstr	s0, [r6, #28]
   17938:	str	r5, [r6, #160]	; 0xa0
   1793c:	str	r6, [r4]
   17940:	mov	r0, r6
   17944:	pop	{r4, r5, r6, r7, fp, pc}
   17948:	mov	r1, r0
   1794c:	ldr	r2, [r0]
   17950:	mov	r0, #1
   17954:	movw	r3, #17968	; 0x4630
   17958:	movt	r3, #1
   1795c:	cmp	r2, r3
   17960:	beq	179d0 <__assert_fail@plt+0x4e14>
   17964:	movw	r3, #17752	; 0x4558
   17968:	movt	r3, #1
   1796c:	cmp	r2, r3
   17970:	movwne	r3, #18248	; 0x4748
   17974:	movtne	r3, #1
   17978:	cmpne	r2, r3
   1797c:	beq	179d0 <__assert_fail@plt+0x4e14>
   17980:	movw	r3, #19152	; 0x4ad0
   17984:	movt	r3, #1
   17988:	cmp	r2, r3
   1798c:	movwne	r0, #24196	; 0x5e84
   17990:	movtne	r0, #5
   17994:	ldrhne	r3, [r0, #68]	; 0x44
   17998:	movne	r0, #0
   1799c:	cmpne	r3, #0
   179a0:	beq	179d0 <__assert_fail@plt+0x4e14>
   179a4:	movw	r3, #19076	; 0x4a84
   179a8:	movt	r3, #1
   179ac:	cmp	r2, r3
   179b0:	bxeq	lr
   179b4:	movw	r3, #16292	; 0x3fa4
   179b8:	movt	r3, #1
   179bc:	cmp	r2, r3
   179c0:	movwne	r3, #15844	; 0x3de4
   179c4:	movtne	r3, #1
   179c8:	cmpne	r2, r3
   179cc:	bne	179d4 <__assert_fail@plt+0x4e18>
   179d0:	bx	lr
   179d4:	movw	r3, #18260	; 0x4754
   179d8:	movt	r3, #1
   179dc:	cmp	r2, r3
   179e0:	ldrne	r0, [r1, #24]
   179e4:	clzne	r0, r0
   179e8:	lsrne	r0, r0, #5
   179ec:	bx	lr
   179f0:	ldr	r3, [r1, #156]	; 0x9c
   179f4:	str	r3, [r2]
   179f8:	ldr	r2, [r0]
   179fc:	str	r2, [r1, #156]	; 0x9c
   17a00:	str	r1, [r0]
   17a04:	ldr	r2, [r0, #4]
   17a08:	cmp	r2, #0
   17a0c:	streq	r1, [r0, #4]
   17a10:	bx	lr
   17a14:	push	{r4, r5, r6, sl, fp, lr}
   17a18:	add	fp, sp, #16
   17a1c:	mov	r4, r3
   17a20:	mov	r6, r2
   17a24:	mov	r5, r0
   17a28:	mov	r0, r1
   17a2c:	mov	r1, r3
   17a30:	bl	17a60 <__assert_fail@plt+0x4ea4>
   17a34:	mov	r0, r6
   17a38:	mov	r1, r4
   17a3c:	bl	17a60 <__assert_fail@plt+0x4ea4>
   17a40:	mov	r6, #0
   17a44:	add	r0, r5, r6
   17a48:	mov	r1, r4
   17a4c:	bl	17a60 <__assert_fail@plt+0x4ea4>
   17a50:	add	r6, r6, #8
   17a54:	cmp	r6, #88	; 0x58
   17a58:	bne	17a44 <__assert_fail@plt+0x4e88>
   17a5c:	pop	{r4, r5, r6, sl, fp, pc}
   17a60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a64:	add	fp, sp, #28
   17a68:	sub	sp, sp, #12
   17a6c:	mov	r4, r0
   17a70:	ldr	r0, [r0]
   17a74:	cmp	r0, #0
   17a78:	beq	17b5c <__assert_fail@plt+0x4fa0>
   17a7c:	mov	r9, r1
   17a80:	movw	r8, #24196	; 0x5e84
   17a84:	movt	r8, #5
   17a88:	ldrb	r0, [r8, #44]	; 0x2c
   17a8c:	tst	r0, #8
   17a90:	bne	17b64 <__assert_fail@plt+0x4fa8>
   17a94:	ldr	r0, [r4]
   17a98:	bl	15fe8 <__assert_fail@plt+0x342c>
   17a9c:	add	r0, sp, #4
   17aa0:	bl	1788c <__assert_fail@plt+0x4cd0>
   17aa4:	ldr	r5, [r4]
   17aa8:	cmp	r5, #0
   17aac:	beq	17b2c <__assert_fail@plt+0x4f70>
   17ab0:	ldr	r7, [sp, #8]
   17ab4:	mov	sl, #0
   17ab8:	ldr	r0, [r5, #156]	; 0x9c
   17abc:	str	r0, [r4]
   17ac0:	str	sl, [r5, #156]	; 0x9c
   17ac4:	ldr	r1, [sp, #4]
   17ac8:	cmp	r1, #0
   17acc:	beq	17b08 <__assert_fail@plt+0x4f4c>
   17ad0:	mov	r6, r1
   17ad4:	ldr	r1, [r1, #12]
   17ad8:	ldr	r0, [r6, #160]	; 0xa0
   17adc:	subs	r2, r1, #2
   17ae0:	movwne	r2, #1
   17ae4:	ldr	r1, [r5, #160]	; 0xa0
   17ae8:	bl	17bcc <__assert_fail@plt+0x5010>
   17aec:	ldr	r1, [r6, #156]	; 0x9c
   17af0:	cmp	r0, #0
   17af4:	blt	17ac8 <__assert_fail@plt+0x4f0c>
   17af8:	str	r1, [r5, #156]	; 0x9c
   17afc:	str	r5, [r6, #156]	; 0x9c
   17b00:	cmp	r1, #0
   17b04:	b	17b18 <__assert_fail@plt+0x4f5c>
   17b08:	ldr	r0, [sp, #4]
   17b0c:	str	r0, [r5, #156]	; 0x9c
   17b10:	str	r5, [sp, #4]
   17b14:	cmp	r7, #0
   17b18:	moveq	r7, r5
   17b1c:	ldr	r5, [r4]
   17b20:	cmp	r5, #0
   17b24:	bne	17ab8 <__assert_fail@plt+0x4efc>
   17b28:	str	r7, [sp, #8]
   17b2c:	ldrb	r0, [r8, #44]	; 0x2c
   17b30:	tst	r0, #8
   17b34:	bne	17b98 <__assert_fail@plt+0x4fdc>
   17b38:	ldr	r6, [sp, #4]
   17b3c:	mov	r0, r6
   17b40:	bl	15fe8 <__assert_fail@plt+0x342c>
   17b44:	ldr	r1, [sp, #8]
   17b48:	mov	r0, r6
   17b4c:	mov	r2, r9
   17b50:	bl	17c34 <__assert_fail@plt+0x5078>
   17b54:	mov	r0, r4
   17b58:	bl	1788c <__assert_fail@plt+0x4cd0>
   17b5c:	sub	sp, fp, #28
   17b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b64:	movw	r5, #21856	; 0x5560
   17b68:	movt	r5, #5
   17b6c:	ldr	r0, [r5]
   17b70:	movw	r1, #65108	; 0xfe54
   17b74:	movt	r1, #3
   17b78:	movw	r2, #65113	; 0xfe59
   17b7c:	movt	r2, #3
   17b80:	bl	128c8 <fprintf@plt>
   17b84:	ldr	r0, [r5]
   17b88:	ldr	r1, [r4]
   17b8c:	mov	r2, #2
   17b90:	bl	16aec <__assert_fail@plt+0x3f30>
   17b94:	b	17a94 <__assert_fail@plt+0x4ed8>
   17b98:	movw	r5, #21856	; 0x5560
   17b9c:	movt	r5, #5
   17ba0:	ldr	r0, [r5]
   17ba4:	movw	r1, #65108	; 0xfe54
   17ba8:	movt	r1, #3
   17bac:	movw	r2, #65140	; 0xfe74
   17bb0:	movt	r2, #3
   17bb4:	bl	128c8 <fprintf@plt>
   17bb8:	ldr	r0, [r5]
   17bbc:	ldr	r1, [sp, #4]
   17bc0:	mov	r2, #2
   17bc4:	bl	16aec <__assert_fail@plt+0x3f30>
   17bc8:	b	17b38 <__assert_fail@plt+0x4f7c>
   17bcc:	mov	r3, r0
   17bd0:	ldr	ip, [r1, #24]
   17bd4:	ldr	r0, [r0, #24]
   17bd8:	cmp	r0, ip
   17bdc:	bne	17c14 <__assert_fail@plt+0x5058>
   17be0:	mov	r0, #0
   17be4:	vldr	s0, [r1, #28]
   17be8:	vldr	s2, [r3, #28]
   17bec:	vcmp.f32	s2, s0
   17bf0:	vmrs	APSR_nzcv, fpscr
   17bf4:	bxeq	lr
   17bf8:	cmp	r2, #0
   17bfc:	beq	17c20 <__assert_fail@plt+0x5064>
   17c00:	mov	r0, #1
   17c04:	vcmpe.f32	s2, s0
   17c08:	vmrs	APSR_nzcv, fpscr
   17c0c:	mvnmi	r0, #0
   17c10:	bx	lr
   17c14:	mov	r0, #1
   17c18:	mvncc	r0, #0
   17c1c:	bx	lr
   17c20:	mvn	r0, #0
   17c24:	vcmpe.f32	s2, s0
   17c28:	vmrs	APSR_nzcv, fpscr
   17c2c:	movwmi	r0, #1
   17c30:	bx	lr
   17c34:	ldr	r3, [r2]
   17c38:	str	r3, [r1, #156]	; 0x9c
   17c3c:	str	r0, [r2]
   17c40:	bx	lr
   17c44:	push	{r4, r5, r6, sl, fp, lr}
   17c48:	add	fp, sp, #16
   17c4c:	vpush	{d8-d9}
   17c50:	sub	sp, sp, #8
   17c54:	mov	r4, r0
   17c58:	ldr	r0, [r0, #8]
   17c5c:	cmp	r0, #3
   17c60:	bne	17cb0 <__assert_fail@plt+0x50f4>
   17c64:	ldr	r0, [r4, #156]	; 0x9c
   17c68:	movw	r2, #65290	; 0xff0a
   17c6c:	movt	r2, #3
   17c70:	cmp	r0, #0
   17c74:	ldrne	r0, [r4, #160]	; 0xa0
   17c78:	cmpne	r0, #0
   17c7c:	beq	17cb8 <__assert_fail@plt+0x50fc>
   17c80:	ldr	r0, [r4, #156]	; 0x9c
   17c84:	ldr	r0, [r0, #160]	; 0xa0
   17c88:	cmp	r0, #0
   17c8c:	beq	17d10 <__assert_fail@plt+0x5154>
   17c90:	ldr	r6, [r4, #156]	; 0x9c
   17c94:	ldr	r0, [r6, #160]	; 0xa0
   17c98:	bl	17e6c <__assert_fail@plt+0x52b0>
   17c9c:	cmp	r0, #0
   17ca0:	beq	17d1c <__assert_fail@plt+0x5160>
   17ca4:	movw	r2, #65341	; 0xff3d
   17ca8:	movt	r2, #3
   17cac:	b	17cb8 <__assert_fail@plt+0x50fc>
   17cb0:	movw	r2, #65267	; 0xfef3
   17cb4:	movt	r2, #3
   17cb8:	movw	r0, #24196	; 0x5e84
   17cbc:	movt	r0, #5
   17cc0:	ldrb	r0, [r0, #44]	; 0x2c
   17cc4:	mov	r5, #0
   17cc8:	tst	r0, #8
   17ccc:	bne	17ce0 <__assert_fail@plt+0x5124>
   17cd0:	mov	r0, r5
   17cd4:	sub	sp, fp, #32
   17cd8:	vpop	{d8-d9}
   17cdc:	pop	{r4, r5, r6, sl, fp, pc}
   17ce0:	movw	r5, #21856	; 0x5560
   17ce4:	movt	r5, #5
   17ce8:	ldr	r0, [r5]
   17cec:	movw	r1, #41	; 0x29
   17cf0:	movt	r1, #4
   17cf4:	bl	128c8 <fprintf@plt>
   17cf8:	ldr	r0, [r5]
   17cfc:	mov	r5, #0
   17d00:	mov	r1, r4
   17d04:	mov	r2, #0
   17d08:	bl	16aec <__assert_fail@plt+0x3f30>
   17d0c:	b	17cd0 <__assert_fail@plt+0x5114>
   17d10:	movw	r2, #65312	; 0xff20
   17d14:	movt	r2, #3
   17d18:	b	17cb8 <__assert_fail@plt+0x50fc>
   17d1c:	ldr	r0, [r4, #160]	; 0xa0
   17d20:	bl	17e6c <__assert_fail@plt+0x52b0>
   17d24:	cmp	r0, #0
   17d28:	beq	17d38 <__assert_fail@plt+0x517c>
   17d2c:	movw	r2, #65371	; 0xff5b
   17d30:	movt	r2, #3
   17d34:	b	17cb8 <__assert_fail@plt+0x50fc>
   17d38:	ldr	r0, [r6, #160]	; 0xa0
   17d3c:	bl	17eb8 <__assert_fail@plt+0x52fc>
   17d40:	mov	r5, r0
   17d44:	ldr	r0, [r4, #160]	; 0xa0
   17d48:	bl	17eb8 <__assert_fail@plt+0x52fc>
   17d4c:	cmp	r5, r0
   17d50:	bge	17d60 <__assert_fail@plt+0x51a4>
   17d54:	movw	r2, #65402	; 0xff7a
   17d58:	movt	r2, #3
   17d5c:	b	17cb8 <__assert_fail@plt+0x50fc>
   17d60:	bne	17ddc <__assert_fail@plt+0x5220>
   17d64:	ldr	r0, [r6, #160]	; 0xa0
   17d68:	ldr	r1, [r4, #160]	; 0xa0
   17d6c:	movw	r2, #24196	; 0x5e84
   17d70:	movt	r2, #5
   17d74:	vldr	s16, [r1, #28]
   17d78:	vldr	s18, [r0, #28]
   17d7c:	ldrb	r0, [r2, #44]	; 0x2c
   17d80:	tst	r0, #8
   17d84:	bne	17e40 <__assert_fail@plt+0x5284>
   17d88:	ldr	r0, [r4]
   17d8c:	movw	r1, #19076	; 0x4a84
   17d90:	movt	r1, #1
   17d94:	cmp	r0, r1
   17d98:	beq	17db8 <__assert_fail@plt+0x51fc>
   17d9c:	movw	r1, #15844	; 0x3de4
   17da0:	movt	r1, #1
   17da4:	cmp	r0, r1
   17da8:	beq	17dd0 <__assert_fail@plt+0x5214>
   17dac:	movw	r2, #65534	; 0xfffe
   17db0:	movt	r2, #3
   17db4:	b	17cb8 <__assert_fail@plt+0x50fc>
   17db8:	vcmpe.f32	s16, s18
   17dbc:	vmrs	APSR_nzcv, fpscr
   17dc0:	bmi	17ddc <__assert_fail@plt+0x5220>
   17dc4:	movw	r2, #65445	; 0xffa5
   17dc8:	movt	r2, #3
   17dcc:	b	17cb8 <__assert_fail@plt+0x50fc>
   17dd0:	vcmpe.f32	s16, s18
   17dd4:	vmrs	APSR_nzcv, fpscr
   17dd8:	ble	17e00 <__assert_fail@plt+0x5244>
   17ddc:	movw	r0, #24196	; 0x5e84
   17de0:	movt	r0, #5
   17de4:	ldrb	r0, [r0, #44]	; 0x2c
   17de8:	tst	r0, #8
   17dec:	bne	17e0c <__assert_fail@plt+0x5250>
   17df0:	mov	r0, r4
   17df4:	bl	17efc <__assert_fail@plt+0x5340>
   17df8:	mov	r5, #1
   17dfc:	b	17cd0 <__assert_fail@plt+0x5114>
   17e00:	movw	r2, #65489	; 0xffd1
   17e04:	movt	r2, #3
   17e08:	b	17cb8 <__assert_fail@plt+0x50fc>
   17e0c:	movw	r5, #21856	; 0x5560
   17e10:	movt	r5, #5
   17e14:	ldr	r3, [r5]
   17e18:	movw	r0, #16
   17e1c:	movt	r0, #4
   17e20:	mov	r1, #24
   17e24:	mov	r2, #1
   17e28:	bl	12700 <fwrite@plt>
   17e2c:	ldr	r0, [r5]
   17e30:	mov	r1, r4
   17e34:	mov	r2, #0
   17e38:	bl	16aec <__assert_fail@plt+0x3f30>
   17e3c:	b	17df0 <__assert_fail@plt+0x5234>
   17e40:	movw	r0, #21856	; 0x5560
   17e44:	movt	r0, #5
   17e48:	ldr	r0, [r0]
   17e4c:	vcvt.f64.f32	d16, s16
   17e50:	vcvt.f64.f32	d17, s18
   17e54:	vstr	d16, [sp]
   17e58:	vmov	r2, r3, d17
   17e5c:	movw	r1, #65418	; 0xff8a
   17e60:	movt	r1, #3
   17e64:	bl	128c8 <fprintf@plt>
   17e68:	b	17d88 <__assert_fail@plt+0x51cc>
   17e6c:	push	{r4, r5, fp, lr}
   17e70:	add	fp, sp, #8
   17e74:	cmp	r0, #0
   17e78:	beq	17eac <__assert_fail@plt+0x52f0>
   17e7c:	mov	r4, r0
   17e80:	mov	r5, #1
   17e84:	ldrb	r0, [r4, #16]
   17e88:	cmp	r0, #0
   17e8c:	bne	17eb0 <__assert_fail@plt+0x52f4>
   17e90:	ldr	r0, [r4, #156]	; 0x9c
   17e94:	bl	17e6c <__assert_fail@plt+0x52b0>
   17e98:	cmp	r0, #0
   17e9c:	bne	17eb0 <__assert_fail@plt+0x52f4>
   17ea0:	ldr	r4, [r4, #160]	; 0xa0
   17ea4:	cmp	r4, #0
   17ea8:	bne	17e84 <__assert_fail@plt+0x52c8>
   17eac:	mov	r5, #0
   17eb0:	mov	r0, r5
   17eb4:	pop	{r4, r5, fp, pc}
   17eb8:	cmp	r0, #0
   17ebc:	moveq	r0, #0
   17ec0:	bxeq	lr
   17ec4:	push	{r4, r5, fp, lr}
   17ec8:	add	fp, sp, #8
   17ecc:	mov	r4, r0
   17ed0:	ldr	r0, [r0, #156]	; 0x9c
   17ed4:	bl	17eb8 <__assert_fail@plt+0x52fc>
   17ed8:	mov	r5, r0
   17edc:	ldr	r0, [r4, #160]	; 0xa0
   17ee0:	bl	17eb8 <__assert_fail@plt+0x52fc>
   17ee4:	cmp	r5, r0
   17ee8:	movhi	r0, r5
   17eec:	ldr	r1, [r4, #24]
   17ef0:	cmp	r0, r1
   17ef4:	movcc	r0, r1
   17ef8:	pop	{r4, r5, fp, pc}
   17efc:	ldr	r1, [r0, #156]	; 0x9c
   17f00:	ldr	r2, [r0, #160]	; 0xa0
   17f04:	ldr	r3, [r1, #160]	; 0xa0
   17f08:	str	r2, [r1, #160]	; 0xa0
   17f0c:	str	r3, [r0, #160]	; 0xa0
   17f10:	bx	lr
   17f14:	push	{r4, r5, fp, lr}
   17f18:	add	fp, sp, #8
   17f1c:	mov	r4, r1
   17f20:	mov	r5, r0
   17f24:	mov	r1, r2
   17f28:	bl	173c8 <__assert_fail@plt+0x480c>
   17f2c:	str	r4, [r0]
   17f30:	ldr	r1, [r5, #4]
   17f34:	mov	r2, #0
   17f38:	str	r2, [r0, #40]	; 0x28
   17f3c:	mov	r3, #1
   17f40:	str	r2, [r0, #12]
   17f44:	stmib	r0, {r1, r3}
   17f48:	pop	{r4, r5, fp, pc}
   17f4c:	mov	r2, r1
   17f50:	ldr	r1, [r0, #12]
   17f54:	cmp	r1, #0
   17f58:	beq	17f60 <__assert_fail@plt+0x53a4>
   17f5c:	b	17f14 <__assert_fail@plt+0x5358>
   17f60:	push	{fp, lr}
   17f64:	mov	fp, sp
   17f68:	movw	r0, #272	; 0x110
   17f6c:	movt	r0, #4
   17f70:	movw	r1, #297	; 0x129
   17f74:	movt	r1, #4
   17f78:	movw	r3, #304	; 0x130
   17f7c:	movt	r3, #4
   17f80:	mov	r2, #123	; 0x7b
   17f84:	bl	12bbc <__assert_fail@plt>
   17f88:	mov	r1, #0
   17f8c:	b	17f4c <__assert_fail@plt+0x5390>
   17f90:	push	{fp, lr}
   17f94:	mov	fp, sp
   17f98:	mov	r4, r0
   17f9c:	cmp	r0, #0
   17fa0:	bne	18110 <__assert_fail@plt+0x5554>
   17fa4:	movw	r6, #21868	; 0x556c
   17fa8:	movt	r6, #5
   17fac:	ldr	r5, [r6]
   17fb0:	movw	r1, #419	; 0x1a3
   17fb4:	movt	r1, #4
   17fb8:	mov	r0, #0
   17fbc:	mov	r2, #5
   17fc0:	bl	1264c <dcgettext@plt>
   17fc4:	mov	r1, r0
   17fc8:	movw	r7, #23836	; 0x5d1c
   17fcc:	movt	r7, #5
   17fd0:	ldr	r2, [r7]
   17fd4:	mov	r0, r5
   17fd8:	bl	128c8 <fprintf@plt>
   17fdc:	movw	r1, #493	; 0x1ed
   17fe0:	movt	r1, #4
   17fe4:	mov	r0, #0
   17fe8:	mov	r2, #5
   17fec:	bl	1264c <dcgettext@plt>
   17ff0:	ldr	r1, [r6]
   17ff4:	bl	12b50 <fputs@plt>
   17ff8:	movw	r1, #631	; 0x277
   17ffc:	movt	r1, #4
   18000:	mov	r0, #0
   18004:	mov	r2, #5
   18008:	bl	1264c <dcgettext@plt>
   1800c:	ldr	r1, [r6]
   18010:	bl	12b50 <fputs@plt>
   18014:	movw	r1, #839	; 0x347
   18018:	movt	r1, #4
   1801c:	mov	r0, #0
   18020:	mov	r2, #5
   18024:	bl	1264c <dcgettext@plt>
   18028:	ldr	r1, [r6]
   1802c:	bl	12b50 <fputs@plt>
   18030:	movw	r1, #924	; 0x39c
   18034:	movt	r1, #4
   18038:	mov	r0, #0
   1803c:	mov	r2, #5
   18040:	bl	1264c <dcgettext@plt>
   18044:	ldr	r1, [r6]
   18048:	bl	12b50 <fputs@plt>
   1804c:	movw	r1, #1129	; 0x469
   18050:	movt	r1, #4
   18054:	mov	r0, #0
   18058:	mov	r2, #5
   1805c:	bl	1264c <dcgettext@plt>
   18060:	ldr	r1, [r6]
   18064:	bl	12b50 <fputs@plt>
   18068:	movw	r1, #1670	; 0x686
   1806c:	movt	r1, #4
   18070:	mov	r0, #0
   18074:	mov	r2, #5
   18078:	bl	1264c <dcgettext@plt>
   1807c:	ldr	r1, [r6]
   18080:	bl	12b50 <fputs@plt>
   18084:	movw	r1, #1926	; 0x786
   18088:	movt	r1, #4
   1808c:	mov	r0, #0
   18090:	mov	r2, #5
   18094:	bl	1264c <dcgettext@plt>
   18098:	ldr	r1, [r6]
   1809c:	bl	12b50 <fputs@plt>
   180a0:	movw	r1, #1950	; 0x79e
   180a4:	movt	r1, #4
   180a8:	mov	r0, #0
   180ac:	mov	r2, #5
   180b0:	bl	1264c <dcgettext@plt>
   180b4:	ldr	r1, [r6]
   180b8:	bl	12b50 <fputs@plt>
   180bc:	movw	r1, #2009	; 0x7d9
   180c0:	movt	r1, #4
   180c4:	mov	r0, #0
   180c8:	mov	r2, #5
   180cc:	bl	1264c <dcgettext@plt>
   180d0:	ldr	r1, [r6]
   180d4:	bl	12b50 <fputs@plt>
   180d8:	mov	r0, #0
   180dc:	bl	18150 <__assert_fail@plt+0x5594>
   180e0:	movw	r1, #2078	; 0x81e
   180e4:	movt	r1, #4
   180e8:	mov	r0, #0
   180ec:	mov	r2, #5
   180f0:	bl	1264c <dcgettext@plt>
   180f4:	ldr	r1, [r6]
   180f8:	bl	12b50 <fputs@plt>
   180fc:	ldr	r0, [r6]
   18100:	ldr	r1, [r7]
   18104:	bl	218a8 <__assert_fail@plt+0xecec>
   18108:	mov	r0, r4
   1810c:	bl	1285c <exit@plt>
   18110:	movw	r0, #21856	; 0x5560
   18114:	movt	r0, #5
   18118:	ldr	r5, [r0]
   1811c:	movw	r1, #380	; 0x17c
   18120:	movt	r1, #4
   18124:	mov	r0, #0
   18128:	mov	r2, #5
   1812c:	bl	1264c <dcgettext@plt>
   18130:	mov	r1, r0
   18134:	movw	r0, #23836	; 0x5d1c
   18138:	movt	r0, #5
   1813c:	ldr	r2, [r0]
   18140:	mov	r0, r5
   18144:	bl	128c8 <fprintf@plt>
   18148:	mov	r0, r4
   1814c:	bl	1285c <exit@plt>
   18150:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18154:	add	fp, sp, #24
   18158:	mov	r4, r0
   1815c:	mov	r6, #0
   18160:	movw	r1, #2727	; 0xaa7
   18164:	movt	r1, #4
   18168:	mov	r0, #0
   1816c:	mov	r2, #5
   18170:	bl	1264c <dcgettext@plt>
   18174:	movw	r5, #21868	; 0x556c
   18178:	movt	r5, #5
   1817c:	ldr	r1, [r5]
   18180:	bl	12b50 <fputs@plt>
   18184:	cmp	r4, #0
   18188:	beq	181c4 <__assert_fail@plt+0x5608>
   1818c:	movw	r7, #3752	; 0xea8
   18190:	movt	r7, #4
   18194:	movw	r4, #2752	; 0xac0
   18198:	movt	r4, #4
   1819c:	mov	r0, r7
   181a0:	ldr	r2, [r0, r6]!
   181a4:	ldr	r3, [r0, #8]
   181a8:	ldr	r0, [r5]
   181ac:	mov	r1, r4
   181b0:	bl	128c8 <fprintf@plt>
   181b4:	add	r6, r6, #12
   181b8:	cmp	r6, #108	; 0x6c
   181bc:	bne	1819c <__assert_fail@plt+0x55e0>
   181c0:	b	18210 <__assert_fail@plt+0x5654>
   181c4:	mov	r6, #0
   181c8:	movw	r8, #2143	; 0x85f
   181cc:	movt	r8, #4
   181d0:	movw	r9, #2762	; 0xaca
   181d4:	movt	r9, #4
   181d8:	movw	r7, #3752	; 0xea8
   181dc:	movt	r7, #4
   181e0:	movw	r4, #61911	; 0xf1d7
   181e4:	movt	r4, #3
   181e8:	cmp	r6, #0
   181ec:	mov	r2, r9
   181f0:	moveq	r2, r8
   181f4:	ldr	r3, [r7, -r6]
   181f8:	ldr	r0, [r5]
   181fc:	mov	r1, r4
   18200:	bl	128c8 <fprintf@plt>
   18204:	sub	r6, r6, #12
   18208:	cmn	r6, #108	; 0x6c
   1820c:	bne	181e8 <__assert_fail@plt+0x562c>
   18210:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18214:	bx	lr
   18218:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1821c:	add	fp, sp, #24
   18220:	mov	r4, r2
   18224:	mov	r5, r0
   18228:	movw	r7, #24152	; 0x5e58
   1822c:	movt	r7, #5
   18230:	ldrb	r0, [r7, #4]
   18234:	cmp	r0, #0
   18238:	beq	18254 <__assert_fail@plt+0x5698>
   1823c:	movw	r0, #257	; 0x101
   18240:	strh	r0, [r7, #4]
   18244:	ldr	r0, [r4, #16]
   18248:	str	r0, [r7, #8]
   1824c:	mov	r0, #0
   18250:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18254:	mov	r6, r1
   18258:	movw	r8, #24196	; 0x5e84
   1825c:	movt	r8, #5
   18260:	ldr	r2, [r8, #52]	; 0x34
   18264:	mov	r0, r1
   18268:	mov	r1, r4
   1826c:	blx	r2
   18270:	cmp	r0, #0
   18274:	beq	182b0 <__assert_fail@plt+0x56f4>
   18278:	ldrb	r0, [r8, #14]
   1827c:	cmp	r0, #0
   18280:	beq	18298 <__assert_fail@plt+0x56dc>
   18284:	bl	128d4 <__errno_location@plt>
   18288:	ldr	r1, [r0]
   1828c:	mvn	r0, #0
   18290:	cmp	r1, #2
   18294:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   18298:	bl	128d4 <__errno_location@plt>
   1829c:	ldr	r0, [r0]
   182a0:	mov	r1, r5
   182a4:	bl	18304 <__assert_fail@plt+0x5748>
   182a8:	mvn	r0, #0
   182ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   182b0:	ldr	r0, [r4, #16]
   182b4:	cmp	r0, #0
   182b8:	bne	1823c <__assert_fail@plt+0x5680>
   182bc:	movw	r1, #60748	; 0xed4c
   182c0:	movt	r1, #3
   182c4:	mov	r0, #0
   182c8:	mov	r2, #5
   182cc:	bl	1264c <dcgettext@plt>
   182d0:	mov	r5, r0
   182d4:	ldr	r1, [r8, #72]	; 0x48
   182d8:	mov	r0, #0
   182dc:	mov	r2, r6
   182e0:	bl	2a024 <__assert_fail@plt+0x17468>
   182e4:	mov	r3, r0
   182e8:	mov	r0, #0
   182ec:	mov	r1, #0
   182f0:	mov	r2, r5
   182f4:	bl	12790 <error@plt>
   182f8:	mov	r0, #1
   182fc:	str	r0, [r7, #28]
   18300:	b	1823c <__assert_fail@plt+0x5680>
   18304:	mov	r3, r1
   18308:	mov	r1, r0
   1830c:	mov	r0, #0
   18310:	mov	r2, #1
   18314:	b	19328 <__assert_fail@plt+0x676c>
   18318:	push	{r4, sl, fp, lr}
   1831c:	add	fp, sp, #8
   18320:	vpush	{d8}
   18324:	sub	sp, sp, #392	; 0x188
   18328:	mov	r4, sp
   1832c:	mov	r0, r4
   18330:	bl	12634 <uname@plt>
   18334:	cmp	r0, #0
   18338:	beq	18344 <__assert_fail@plt+0x5788>
   1833c:	mov	r4, #1
   18340:	b	183b0 <__assert_fail@plt+0x57f4>
   18344:	add	r0, r4, #130	; 0x82
   18348:	bl	12afc <atof@plt>
   1834c:	vmov.f64	d8, d0
   18350:	movw	r0, #2144	; 0x860
   18354:	movt	r0, #4
   18358:	mov	r1, r4
   1835c:	bl	124cc <strcmp@plt>
   18360:	vcvt.f32.f64	s0, d8
   18364:	cmp	r0, #0
   18368:	beq	1839c <__assert_fail@plt+0x57e0>
   1836c:	vldr	s2, [pc, #76]	; 183c0 <__assert_fail@plt+0x5804>
   18370:	mov	r4, #0
   18374:	vcmpe.f32	s0, s2
   18378:	vmrs	APSR_nzcv, fpscr
   1837c:	movwge	r4, #1
   18380:	movw	r0, #2150	; 0x866
   18384:	movt	r0, #4
   18388:	mov	r1, sp
   1838c:	bl	124cc <strcmp@plt>
   18390:	cmp	r0, #0
   18394:	movne	r4, #1
   18398:	b	183b0 <__assert_fail@plt+0x57f4>
   1839c:	vldr	s2, [pc, #32]	; 183c4 <__assert_fail@plt+0x5808>
   183a0:	mov	r4, #0
   183a4:	vcmpe.f32	s0, s2
   183a8:	vmrs	APSR_nzcv, fpscr
   183ac:	movwge	r4, #1
   183b0:	mov	r0, r4
   183b4:	sub	sp, fp, #16
   183b8:	vpop	{d8}
   183bc:	pop	{r4, sl, fp, pc}
   183c0:	submi	r6, r6, r6, ror #12
   183c4:	andmi	ip, ip, sp, asr #25
   183c8:	push	{r4, sl, fp, lr}
   183cc:	add	fp, sp, #8
   183d0:	movw	r4, #24152	; 0x5e58
   183d4:	movt	r4, #5
   183d8:	ldrb	r0, [r4, #32]
   183dc:	cmp	r0, #0
   183e0:	popeq	{r4, sl, fp, pc}
   183e4:	bl	15fd8 <__assert_fail@plt+0x341c>
   183e8:	bl	183f8 <__assert_fail@plt+0x583c>
   183ec:	mov	r0, #0
   183f0:	strb	r0, [r4, #32]
   183f4:	pop	{r4, sl, fp, pc}
   183f8:	push	{r4, r5, r6, r7, fp, lr}
   183fc:	add	fp, sp, #16
   18400:	cmp	r0, #0
   18404:	popeq	{r4, r5, r6, r7, fp, pc}
   18408:	mov	r4, r0
   1840c:	movw	r5, #24152	; 0x5e58
   18410:	movt	r5, #5
   18414:	movw	r6, #17188	; 0x4324
   18418:	movt	r6, #1
   1841c:	movw	r7, #18996	; 0x4a34
   18420:	movt	r7, #1
   18424:	ldrb	r0, [r5, #32]
   18428:	cmp	r0, #0
   1842c:	beq	18470 <__assert_fail@plt+0x58b4>
   18430:	ldr	r0, [r4, #156]	; 0x9c
   18434:	bl	183f8 <__assert_fail@plt+0x583c>
   18438:	ldr	r0, [r4]
   1843c:	cmp	r0, r6
   18440:	cmpne	r0, r7
   18444:	bne	18460 <__assert_fail@plt+0x58a4>
   18448:	mov	r0, r4
   1844c:	ldrb	r1, [r0, #40]!	; 0x28
   18450:	cmp	r1, #0
   18454:	ldrne	r1, [r4, #116]	; 0x74
   18458:	cmpne	r1, #0
   1845c:	blne	193e0 <__assert_fail@plt+0x6824>
   18460:	ldr	r4, [r4, #160]	; 0xa0
   18464:	cmp	r4, #0
   18468:	bne	18424 <__assert_fail@plt+0x5868>
   1846c:	pop	{r4, r5, r6, r7, fp, pc}
   18470:	movw	r0, #3200	; 0xc80
   18474:	movt	r0, #4
   18478:	movw	r1, #297	; 0x129
   1847c:	movt	r1, #4
   18480:	movw	r3, #3227	; 0xc9b
   18484:	movt	r3, #4
   18488:	mov	r2, #396	; 0x18c
   1848c:	bl	12bbc <__assert_fail@plt>
   18490:	push	{r4, r5, fp, lr}
   18494:	add	fp, sp, #8
   18498:	cmp	r0, #0
   1849c:	popeq	{r4, r5, fp, pc}
   184a0:	mov	r4, r0
   184a4:	movw	r5, #17184	; 0x4320
   184a8:	movt	r5, #1
   184ac:	ldr	r0, [r4, #156]	; 0x9c
   184b0:	bl	18490 <__assert_fail@plt+0x58d4>
   184b4:	ldr	r0, [r4]
   184b8:	cmp	r0, r5
   184bc:	bne	184e4 <__assert_fail@plt+0x5928>
   184c0:	mov	r0, r4
   184c4:	ldrb	r1, [r0, #40]!	; 0x28
   184c8:	cmp	r1, #0
   184cc:	ldrne	r1, [r4, #116]	; 0x74
   184d0:	cmpne	r1, #0
   184d4:	beq	184e4 <__assert_fail@plt+0x5928>
   184d8:	add	r0, r0, #4
   184dc:	add	r1, r4, #88	; 0x58
   184e0:	bl	1f79c <__assert_fail@plt+0xcbe0>
   184e4:	ldr	r4, [r4, #160]	; 0xa0
   184e8:	cmp	r4, #0
   184ec:	bne	184ac <__assert_fail@plt+0x58f0>
   184f0:	pop	{r4, r5, fp, pc}
   184f4:	push	{r4, r5, fp, lr}
   184f8:	add	fp, sp, #8
   184fc:	sub	sp, sp, #8
   18500:	mov	r0, #8
   18504:	bl	2b5cc <__assert_fail@plt+0x18a10>
   18508:	movw	r5, #21888	; 0x5580
   1850c:	movt	r5, #5
   18510:	str	r0, [r5]
   18514:	bl	2a6dc <__assert_fail@plt+0x17b20>
   18518:	cmp	r0, #0
   1851c:	subeq	sp, fp, #8
   18520:	popeq	{r4, r5, fp, pc}
   18524:	bl	128d4 <__errno_location@plt>
   18528:	ldr	r4, [r0]
   1852c:	movw	r1, #2158	; 0x86e
   18530:	movt	r1, #4
   18534:	mov	r0, #0
   18538:	mov	r2, #5
   1853c:	bl	1264c <dcgettext@plt>
   18540:	mov	r2, r0
   18544:	ldr	r0, [r5]
   18548:	ldr	r1, [r0]
   1854c:	cmn	r1, #1
   18550:	bgt	18578 <__assert_fail@plt+0x59bc>
   18554:	ldr	r0, [r0, #4]
   18558:	movw	r1, #2143	; 0x85f
   1855c:	movt	r1, #4
   18560:	movw	r3, #9692	; 0x25dc
   18564:	movt	r3, #4
   18568:	cmp	r0, #0
   1856c:	moveq	r3, r1
   18570:	moveq	r0, r1
   18574:	b	18584 <__assert_fail@plt+0x59c8>
   18578:	movw	r3, #2143	; 0x85f
   1857c:	movt	r3, #4
   18580:	mov	r0, r3
   18584:	str	r0, [sp]
   18588:	mov	r0, #1
   1858c:	mov	r1, r4
   18590:	bl	12790 <error@plt>
   18594:	push	{r4, sl, fp, lr}
   18598:	add	fp, sp, #8
   1859c:	bl	15fd8 <__assert_fail@plt+0x341c>
   185a0:	cmp	r0, #0
   185a4:	beq	185e0 <__assert_fail@plt+0x5a24>
   185a8:	mov	r4, r0
   185ac:	movw	r1, #33936	; 0x8490
   185b0:	movt	r1, #1
   185b4:	bl	18638 <__assert_fail@plt+0x5a7c>
   185b8:	bl	183c8 <__assert_fail@plt+0x580c>
   185bc:	movw	r0, #24152	; 0x5e58
   185c0:	movt	r0, #5
   185c4:	ldr	r0, [r0, #36]	; 0x24
   185c8:	bl	195b0 <__assert_fail@plt+0x69f4>
   185cc:	movw	r1, #34416	; 0x8670
   185d0:	movt	r1, #1
   185d4:	mov	r0, r4
   185d8:	bl	18638 <__assert_fail@plt+0x5a7c>
   185dc:	b	185f0 <__assert_fail@plt+0x5a34>
   185e0:	movw	r0, #24152	; 0x5e58
   185e4:	movt	r0, #5
   185e8:	ldr	r0, [r0, #36]	; 0x24
   185ec:	bl	195b0 <__assert_fail@plt+0x69f4>
   185f0:	bl	186bc <__assert_fail@plt+0x5b00>
   185f4:	bl	203e0 <__assert_fail@plt+0xd824>
   185f8:	cmp	r0, #0
   185fc:	beq	18608 <__assert_fail@plt+0x5a4c>
   18600:	bl	20400 <__assert_fail@plt+0xd844>
   18604:	bl	203b0 <__assert_fail@plt+0xd7f4>
   18608:	movw	r0, #21868	; 0x556c
   1860c:	movt	r0, #5
   18610:	ldr	r0, [r0]
   18614:	bl	2ca10 <__assert_fail@plt+0x19e54>
   18618:	cmn	r0, #1
   1861c:	popne	{r4, sl, fp, pc}
   18620:	bl	128d4 <__errno_location@plt>
   18624:	ldr	r0, [r0]
   18628:	movw	r1, #2203	; 0x89b
   1862c:	movt	r1, #4
   18630:	pop	{r4, sl, fp, lr}
   18634:	b	18778 <__assert_fail@plt+0x5bbc>
   18638:	push	{r4, r5, fp, lr}
   1863c:	add	fp, sp, #8
   18640:	mov	r4, r1
   18644:	mov	r5, r0
   18648:	ldr	r0, [r5, #156]	; 0x9c
   1864c:	cmp	r0, #0
   18650:	movne	r1, r4
   18654:	blne	18638 <__assert_fail@plt+0x5a7c>
   18658:	mov	r0, r5
   1865c:	blx	r4
   18660:	ldr	r5, [r5, #160]	; 0xa0
   18664:	cmp	r5, #0
   18668:	popeq	{r4, r5, fp, pc}
   1866c:	b	18648 <__assert_fail@plt+0x5a8c>
   18670:	ldr	r1, [r0]
   18674:	movw	r2, #17364	; 0x43d4
   18678:	movt	r2, #1
   1867c:	cmp	r1, r2
   18680:	beq	186b0 <__assert_fail@plt+0x5af4>
   18684:	movw	r2, #17212	; 0x433c
   18688:	movt	r2, #1
   1868c:	cmp	r1, r2
   18690:	movwne	r2, #17304	; 0x4398
   18694:	movtne	r2, #1
   18698:	cmpne	r1, r2
   1869c:	beq	186b0 <__assert_fail@plt+0x5af4>
   186a0:	movw	r2, #40516	; 0x9e44
   186a4:	movt	r2, #1
   186a8:	cmp	r1, r2
   186ac:	bxne	lr
   186b0:	mov	r1, #0
   186b4:	str	r1, [r0, #44]	; 0x2c
   186b8:	bx	lr
   186bc:	push	{r4, r5, fp, lr}
   186c0:	add	fp, sp, #8
   186c4:	sub	sp, sp, #8
   186c8:	movw	r5, #21888	; 0x5580
   186cc:	movt	r5, #5
   186d0:	ldr	r0, [r5]
   186d4:	bl	2a738 <__assert_fail@plt+0x17b7c>
   186d8:	cmp	r0, #0
   186dc:	bne	18700 <__assert_fail@plt+0x5b44>
   186e0:	ldr	r0, [r5]
   186e4:	bl	2a754 <__assert_fail@plt+0x17b98>
   186e8:	ldr	r0, [r5]
   186ec:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   186f0:	mov	r0, #0
   186f4:	str	r0, [r5]
   186f8:	sub	sp, fp, #8
   186fc:	pop	{r4, r5, fp, pc}
   18700:	bl	128d4 <__errno_location@plt>
   18704:	ldr	r4, [r0]
   18708:	movw	r1, #3281	; 0xcd1
   1870c:	movt	r1, #4
   18710:	mov	r0, #0
   18714:	mov	r2, #5
   18718:	bl	1264c <dcgettext@plt>
   1871c:	mov	r2, r0
   18720:	ldr	r0, [r5]
   18724:	ldr	r1, [r0]
   18728:	cmn	r1, #1
   1872c:	bgt	18754 <__assert_fail@plt+0x5b98>
   18730:	ldr	r0, [r0, #4]
   18734:	movw	r1, #2143	; 0x85f
   18738:	movt	r1, #4
   1873c:	movw	r3, #9692	; 0x25dc
   18740:	movt	r3, #4
   18744:	cmp	r0, #0
   18748:	moveq	r3, r1
   1874c:	moveq	r0, r1
   18750:	b	18760 <__assert_fail@plt+0x5ba4>
   18754:	movw	r3, #2143	; 0x85f
   18758:	movt	r3, #4
   1875c:	mov	r0, r3
   18760:	str	r0, [sp]
   18764:	mov	r0, #0
   18768:	mov	r1, r4
   1876c:	bl	12790 <error@plt>
   18770:	mov	r0, #1
   18774:	bl	125bc <_exit@plt>
   18778:	mov	r3, r1
   1877c:	mov	r1, r0
   18780:	mov	r0, #0
   18784:	mov	r2, #0
   18788:	b	19328 <__assert_fail@plt+0x676c>
   1878c:	push	{r4, r5, fp, lr}
   18790:	add	fp, sp, #8
   18794:	mov	r4, r1
   18798:	mov	r5, r0
   1879c:	movw	r1, #24152	; 0x5e58
   187a0:	movt	r1, #5
   187a4:	ldr	r0, [r1, #16]
   187a8:	cmn	r0, #100	; 0x64
   187ac:	beq	187b8 <__assert_fail@plt+0x5bfc>
   187b0:	cmn	r0, #1
   187b4:	ble	18808 <__assert_fail@plt+0x5c4c>
   187b8:	ldr	r1, [r1]
   187bc:	cmp	r1, #0
   187c0:	beq	187d8 <__assert_fail@plt+0x5c1c>
   187c4:	mov	r1, r5
   187c8:	mov	r2, r4
   187cc:	mov	r3, #256	; 0x100
   187d0:	pop	{r4, r5, fp, lr}
   187d4:	b	3e914 <__assert_fail@plt+0x2bd58>
   187d8:	mov	r1, r5
   187dc:	mov	r2, r4
   187e0:	mov	r3, #0
   187e4:	bl	3e914 <__assert_fail@plt+0x2bd58>
   187e8:	cmp	r0, #0
   187ec:	moveq	r0, #0
   187f0:	popeq	{r4, r5, fp, pc}
   187f4:	mov	r2, r0
   187f8:	mov	r0, r5
   187fc:	mov	r1, r4
   18800:	pop	{r4, r5, fp, lr}
   18804:	b	18828 <__assert_fail@plt+0x5c6c>
   18808:	movw	r0, #2219	; 0x8ab
   1880c:	movt	r0, #4
   18810:	movw	r1, #297	; 0x129
   18814:	movt	r1, #4
   18818:	movw	r3, #2241	; 0x8c1
   1881c:	movt	r3, #4
   18820:	movw	r2, #605	; 0x25d
   18824:	bl	12bbc <__assert_fail@plt>
   18828:	push	{r4, r5, r6, sl, fp, lr}
   1882c:	add	fp, sp, #16
   18830:	mov	r6, r2
   18834:	mov	r4, r1
   18838:	mov	r5, r0
   1883c:	bl	128d4 <__errno_location@plt>
   18840:	ldr	r0, [r0]
   18844:	cmp	r0, #20
   18848:	cmpne	r0, #2
   1884c:	movne	r0, r6
   18850:	popne	{r4, r5, r6, sl, fp, pc}
   18854:	movw	r0, #24196	; 0x5e84
   18858:	movt	r0, #5
   1885c:	ldrb	r0, [r0, #44]	; 0x2c
   18860:	tst	r0, #2
   18864:	bne	18888 <__assert_fail@plt+0x5ccc>
   18868:	movw	r0, #24152	; 0x5e58
   1886c:	movt	r0, #5
   18870:	ldr	r0, [r0, #16]
   18874:	mov	r1, r5
   18878:	mov	r2, r4
   1887c:	mov	r3, #256	; 0x100
   18880:	pop	{r4, r5, r6, sl, fp, lr}
   18884:	b	3e914 <__assert_fail@plt+0x2bd58>
   18888:	movw	r0, #21856	; 0x5560
   1888c:	movt	r0, #5
   18890:	ldr	r0, [r0]
   18894:	movw	r1, #3329	; 0xd01
   18898:	movt	r1, #4
   1889c:	mov	r2, r5
   188a0:	bl	128c8 <fprintf@plt>
   188a4:	b	18868 <__assert_fail@plt+0x5cac>
   188a8:	push	{r4, r5, fp, lr}
   188ac:	add	fp, sp, #8
   188b0:	mov	r4, r1
   188b4:	mov	r5, r0
   188b8:	movw	r0, #24152	; 0x5e58
   188bc:	movt	r0, #5
   188c0:	ldr	r0, [r0, #16]
   188c4:	cmn	r0, #100	; 0x64
   188c8:	beq	188d4 <__assert_fail@plt+0x5d18>
   188cc:	cmn	r0, #1
   188d0:	ble	18904 <__assert_fail@plt+0x5d48>
   188d4:	mov	r1, r5
   188d8:	mov	r2, r4
   188dc:	mov	r3, #0
   188e0:	bl	3e914 <__assert_fail@plt+0x2bd58>
   188e4:	cmp	r0, #0
   188e8:	moveq	r0, #0
   188ec:	popeq	{r4, r5, fp, pc}
   188f0:	mov	r2, r0
   188f4:	mov	r0, r5
   188f8:	mov	r1, r4
   188fc:	pop	{r4, r5, fp, lr}
   18900:	b	18828 <__assert_fail@plt+0x5c6c>
   18904:	movw	r0, #2219	; 0x8ab
   18908:	movt	r0, #4
   1890c:	movw	r1, #297	; 0x129
   18910:	movt	r1, #4
   18914:	movw	r3, #2287	; 0x8ef
   18918:	movt	r3, #4
   1891c:	mov	r2, #636	; 0x27c
   18920:	bl	12bbc <__assert_fail@plt>
   18924:	mov	r2, r1
   18928:	mov	r1, r0
   1892c:	movw	r0, #24152	; 0x5e58
   18930:	movt	r0, #5
   18934:	ldr	r0, [r0, #16]
   18938:	cmn	r0, #1
   1893c:	bgt	18948 <__assert_fail@plt+0x5d8c>
   18940:	cmn	r0, #100	; 0x64
   18944:	bne	18950 <__assert_fail@plt+0x5d94>
   18948:	mov	r3, #256	; 0x100
   1894c:	b	3e914 <__assert_fail@plt+0x2bd58>
   18950:	push	{fp, lr}
   18954:	mov	fp, sp
   18958:	movw	r0, #2333	; 0x91d
   1895c:	movt	r0, #4
   18960:	movw	r1, #297	; 0x129
   18964:	movt	r1, #4
   18968:	movw	r3, #2389	; 0x955
   1896c:	movt	r3, #4
   18970:	movw	r2, #653	; 0x28d
   18974:	bl	12bbc <__assert_fail@plt>
   18978:	push	{r4, r5, fp, lr}
   1897c:	add	fp, sp, #8
   18980:	mov	r4, r1
   18984:	mov	r5, r0
   18988:	movw	r0, #21928	; 0x55a8
   1898c:	movt	r0, #5
   18990:	ldrd	r2, [r0]
   18994:	adds	r2, r2, #1
   18998:	adc	r3, r3, #0
   1899c:	strd	r2, [r0]
   189a0:	movw	r0, #21856	; 0x5560
   189a4:	movt	r0, #5
   189a8:	ldr	r0, [r0]
   189ac:	movw	r1, #2435	; 0x983
   189b0:	movt	r1, #4
   189b4:	mov	r2, r5
   189b8:	bl	128c8 <fprintf@plt>
   189bc:	movw	r0, #24196	; 0x5e84
   189c0:	movt	r0, #5
   189c4:	ldr	r0, [r0, #48]	; 0x30
   189c8:	cmp	r0, #0
   189cc:	beq	18a00 <__assert_fail@plt+0x5e44>
   189d0:	cmp	r0, #2
   189d4:	beq	189f0 <__assert_fail@plt+0x5e34>
   189d8:	cmp	r0, #1
   189dc:	bne	18a10 <__assert_fail@plt+0x5e54>
   189e0:	mov	r0, r5
   189e4:	mov	r1, r4
   189e8:	pop	{r4, r5, fp, lr}
   189ec:	b	188a8 <__assert_fail@plt+0x5cec>
   189f0:	mov	r0, r5
   189f4:	mov	r1, r4
   189f8:	pop	{r4, r5, fp, lr}
   189fc:	b	1878c <__assert_fail@plt+0x5bd0>
   18a00:	mov	r0, r5
   18a04:	mov	r1, r4
   18a08:	pop	{r4, r5, fp, lr}
   18a0c:	b	18924 <__assert_fail@plt+0x5d68>
   18a10:	movw	r0, #64905	; 0xfd89
   18a14:	movt	r0, #3
   18a18:	movw	r1, #297	; 0x129
   18a1c:	movt	r1, #4
   18a20:	movw	r3, #2452	; 0x994
   18a24:	movt	r3, #4
   18a28:	movw	r2, #677	; 0x2a5
   18a2c:	bl	12bbc <__assert_fail@plt>
   18a30:	movw	r0, #24196	; 0x5e84
   18a34:	movt	r0, #5
   18a38:	ldr	r0, [r0, #48]	; 0x30
   18a3c:	cmp	r0, #1
   18a40:	moveq	r0, #1
   18a44:	bxeq	lr
   18a48:	cmp	r0, #2
   18a4c:	movne	r0, #0
   18a50:	bxne	lr
   18a54:	movw	r0, #24152	; 0x5e58
   18a58:	movt	r0, #5
   18a5c:	ldr	r0, [r0]
   18a60:	clz	r0, r0
   18a64:	lsr	r0, r0, #5
   18a68:	bx	lr
   18a6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18a70:	add	fp, sp, #24
   18a74:	mov	r8, r3
   18a78:	mov	r6, r2
   18a7c:	mov	r7, r1
   18a80:	mov	r5, r0
   18a84:	ldr	r4, [r0]
   18a88:	cmp	r4, #0
   18a8c:	beq	18ae8 <__assert_fail@plt+0x5f2c>
   18a90:	and	r0, r4, #61440	; 0xf000
   18a94:	cmp	r0, #40960	; 0xa000
   18a98:	bne	18acc <__assert_fail@plt+0x5f10>
   18a9c:	bl	18a30 <__assert_fail@plt+0x5e74>
   18aa0:	cmp	r0, #0
   18aa4:	beq	18acc <__assert_fail@plt+0x5f10>
   18aa8:	mov	r0, r7
   18aac:	mov	r1, r6
   18ab0:	mov	r2, r8
   18ab4:	bl	18218 <__assert_fail@plt+0x565c>
   18ab8:	mov	r1, r0
   18abc:	mov	r0, #0
   18ac0:	cmp	r1, #0
   18ac4:	beq	18b50 <__assert_fail@plt+0x5f94>
   18ac8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18acc:	movw	r1, #24152	; 0x5e58
   18ad0:	movt	r1, #5
   18ad4:	str	r4, [r1, #8]
   18ad8:	mov	r0, #1
   18adc:	strb	r0, [r1, #5]
   18ae0:	str	r4, [r8, #16]
   18ae4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18ae8:	ldr	r0, [fp, #8]
   18aec:	cmp	r0, #0
   18af0:	beq	18b10 <__assert_fail@plt+0x5f54>
   18af4:	movw	r0, #24152	; 0x5e58
   18af8:	movt	r0, #5
   18afc:	mov	r1, #0
   18b00:	str	r1, [r0, #8]
   18b04:	strh	r1, [r0, #4]
   18b08:	mov	r0, #1
   18b0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18b10:	mov	r0, r7
   18b14:	mov	r1, r6
   18b18:	mov	r2, r8
   18b1c:	bl	18218 <__assert_fail@plt+0x565c>
   18b20:	mov	r1, r0
   18b24:	mov	r0, #0
   18b28:	cmp	r1, #0
   18b2c:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   18b30:	ldr	r1, [r8, #16]
   18b34:	str	r1, [r5]
   18b38:	movw	r2, #24152	; 0x5e58
   18b3c:	movt	r2, #5
   18b40:	mov	r0, #1
   18b44:	strb	r0, [r2, #5]
   18b48:	str	r1, [r2, #8]
   18b4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18b50:	ldr	r0, [r8, #16]
   18b54:	movw	r1, #24152	; 0x5e58
   18b58:	movt	r1, #5
   18b5c:	str	r0, [r1, #8]
   18b60:	str	r0, [r5]
   18b64:	mov	r0, #1
   18b68:	strb	r0, [r1, #5]
   18b6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18b70:	mov	r1, r0
   18b74:	mov	r0, #1
   18b78:	b	18b80 <__assert_fail@plt+0x5fc4>
   18b7c:	ldr	r1, [r1, #152]	; 0x98
   18b80:	cmp	r1, #0
   18b84:	bxeq	lr
   18b88:	ldrb	r2, [r1, #17]
   18b8c:	cmp	r2, #0
   18b90:	beq	18b7c <__assert_fail@plt+0x5fc0>
   18b94:	mov	r0, #0
   18b98:	bx	lr
   18b9c:	mov	ip, r0
   18ba0:	ldrb	r0, [r0]
   18ba4:	sub	r3, r0, #33	; 0x21
   18ba8:	mov	r0, #0
   18bac:	cmp	r3, #12
   18bb0:	bxhi	lr
   18bb4:	add	r2, pc, #0
   18bb8:	ldr	pc, [r2, r3, lsl #2]
   18bbc:	strdeq	r8, [r1], -r0
   18bc0:	strdeq	r8, [r1], -ip
   18bc4:	strdeq	r8, [r1], -ip
   18bc8:	strdeq	r8, [r1], -ip
   18bcc:	strdeq	r8, [r1], -ip
   18bd0:	strdeq	r8, [r1], -ip
   18bd4:	strdeq	r8, [r1], -ip
   18bd8:	strdeq	r8, [r1], -r0
   18bdc:	andeq	r8, r1, r0, lsl #24
   18be0:	strdeq	r8, [r1], -ip
   18be4:	strdeq	r8, [r1], -ip
   18be8:	andeq	r8, r1, r0, lsl #24
   18bec:	andeq	r8, r1, r8, lsl ip
   18bf0:	ldrb	r0, [ip, #1]
   18bf4:	clz	r0, r0
   18bf8:	lsr	r0, r0, #5
   18bfc:	bx	lr
   18c00:	eor	r0, r1, #1
   18c04:	ldrb	r1, [ip, #1]
   18c08:	clz	r1, r1
   18c0c:	lsr	r1, r1, #5
   18c10:	and	r0, r1, r0
   18c14:	bx	lr
   18c18:	ldrb	r0, [ip, #1]
   18c1c:	cmp	r0, #0
   18c20:	movwne	r0, #1
   18c24:	bx	lr
   18c28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c2c:	add	fp, sp, #28
   18c30:	sub	sp, sp, #4
   18c34:	mov	r4, #1
   18c38:	cmp	r0, #2
   18c3c:	blt	18d40 <__assert_fail@plt+0x6184>
   18c40:	mov	r5, r1
   18c44:	mov	r6, r0
   18c48:	mov	r4, #1
   18c4c:	movw	r7, #2496	; 0x9c0
   18c50:	movt	r7, #4
   18c54:	movw	r8, #2499	; 0x9c3
   18c58:	movt	r8, #4
   18c5c:	movw	r9, #2502	; 0x9c6
   18c60:	movt	r9, #4
   18c64:	ldr	sl, [r5, r4, lsl #2]
   18c68:	mov	r0, r7
   18c6c:	mov	r1, sl
   18c70:	bl	124cc <strcmp@plt>
   18c74:	cmp	r0, #0
   18c78:	beq	18cfc <__assert_fail@plt+0x6140>
   18c7c:	mov	r0, r8
   18c80:	mov	r1, sl
   18c84:	bl	124cc <strcmp@plt>
   18c88:	cmp	r0, #0
   18c8c:	beq	18d08 <__assert_fail@plt+0x614c>
   18c90:	mov	r0, r9
   18c94:	mov	r1, sl
   18c98:	bl	124cc <strcmp@plt>
   18c9c:	cmp	r0, #0
   18ca0:	beq	18d14 <__assert_fail@plt+0x6158>
   18ca4:	movw	r0, #2505	; 0x9c9
   18ca8:	movt	r0, #4
   18cac:	mov	r1, sl
   18cb0:	bl	124cc <strcmp@plt>
   18cb4:	cmp	r0, #0
   18cb8:	beq	18d4c <__assert_fail@plt+0x6190>
   18cbc:	movw	r0, #2508	; 0x9cc
   18cc0:	movt	r0, #4
   18cc4:	mov	r1, sl
   18cc8:	bl	124cc <strcmp@plt>
   18ccc:	cmp	r0, #0
   18cd0:	beq	18d20 <__assert_fail@plt+0x6164>
   18cd4:	movw	r0, #3571	; 0xdf3
   18cd8:	movt	r0, #4
   18cdc:	mov	r1, sl
   18ce0:	mov	r2, #2
   18ce4:	bl	12b5c <strncmp@plt>
   18ce8:	cmp	r0, #0
   18cec:	bne	18d40 <__assert_fail@plt+0x6184>
   18cf0:	add	r0, sl, #2
   18cf4:	bl	18eb8 <__assert_fail@plt+0x62fc>
   18cf8:	b	18d34 <__assert_fail@plt+0x6178>
   18cfc:	mov	r0, #2
   18d00:	bl	1b784 <__assert_fail@plt+0x8bc8>
   18d04:	b	18d34 <__assert_fail@plt+0x6178>
   18d08:	mov	r0, #1
   18d0c:	bl	1b784 <__assert_fail@plt+0x8bc8>
   18d10:	b	18d34 <__assert_fail@plt+0x6178>
   18d14:	mov	r0, #0
   18d18:	bl	1b784 <__assert_fail@plt+0x8bc8>
   18d1c:	b	18d34 <__assert_fail@plt+0x6178>
   18d20:	add	r4, r4, #1
   18d24:	cmp	r4, r6
   18d28:	bge	18d54 <__assert_fail@plt+0x6198>
   18d2c:	ldr	r0, [r5, r4, lsl #2]
   18d30:	bl	18d80 <__assert_fail@plt+0x61c4>
   18d34:	add	r4, r4, #1
   18d38:	cmp	r4, r6
   18d3c:	blt	18c64 <__assert_fail@plt+0x60a8>
   18d40:	mov	r0, r4
   18d44:	sub	sp, fp, #28
   18d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d4c:	add	r4, r4, #1
   18d50:	b	18d40 <__assert_fail@plt+0x6184>
   18d54:	movw	r1, #2511	; 0x9cf
   18d58:	movt	r1, #4
   18d5c:	mov	r0, #0
   18d60:	mov	r2, #5
   18d64:	bl	1264c <dcgettext@plt>
   18d68:	mov	r2, r0
   18d6c:	mov	r0, #0
   18d70:	mov	r1, #0
   18d74:	bl	12790 <error@plt>
   18d78:	mov	r0, #1
   18d7c:	bl	17f90 <__assert_fail@plt+0x53d4>
   18d80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d84:	add	fp, sp, #28
   18d88:	sub	sp, sp, #12
   18d8c:	mov	r1, #0
   18d90:	str	r1, [sp, #8]
   18d94:	mov	r1, #44	; 0x2c
   18d98:	strh	r1, [sp, #6]
   18d9c:	add	r1, sp, #6
   18da0:	add	r2, sp, #8
   18da4:	str	r0, [sp]
   18da8:	bl	12784 <strtok_r@plt>
   18dac:	cmp	r0, #0
   18db0:	beq	18e8c <__assert_fail@plt+0x62d0>
   18db4:	mov	r7, r0
   18db8:	movw	r0, #3752	; 0xea8
   18dbc:	movt	r0, #4
   18dc0:	add	r8, r0, #4
   18dc4:	movw	r4, #24196	; 0x5e84
   18dc8:	movt	r4, #5
   18dcc:	add	sl, sp, #6
   18dd0:	add	r6, sp, #8
   18dd4:	mov	r5, r8
   18dd8:	mov	r9, #0
   18ddc:	ldr	r0, [r5, #-4]
   18de0:	mov	r1, r7
   18de4:	bl	124cc <strcmp@plt>
   18de8:	cmp	r0, #0
   18dec:	beq	18e40 <__assert_fail@plt+0x6284>
   18df0:	add	r5, r5, #12
   18df4:	add	r9, r9, #1
   18df8:	cmp	r9, #9
   18dfc:	bcc	18ddc <__assert_fail@plt+0x6220>
   18e00:	mov	r0, #0
   18e04:	movw	r1, #3388	; 0xd3c
   18e08:	movt	r1, #4
   18e0c:	mov	r2, #5
   18e10:	bl	1264c <dcgettext@plt>
   18e14:	mov	r7, r0
   18e18:	ldr	r1, [r4, #72]	; 0x48
   18e1c:	mov	r0, #0
   18e20:	ldr	r2, [sp]
   18e24:	bl	2a024 <__assert_fail@plt+0x17468>
   18e28:	mov	r3, r0
   18e2c:	mov	r0, #0
   18e30:	mov	r1, #0
   18e34:	mov	r2, r7
   18e38:	bl	12790 <error@plt>
   18e3c:	b	18e50 <__assert_fail@plt+0x6294>
   18e40:	ldr	r0, [r5]
   18e44:	ldr	r1, [r4, #44]	; 0x2c
   18e48:	orr	r0, r1, r0
   18e4c:	str	r0, [r4, #44]	; 0x2c
   18e50:	mov	r0, #0
   18e54:	mov	r1, sl
   18e58:	mov	r2, r6
   18e5c:	bl	12784 <strtok_r@plt>
   18e60:	mov	r7, r0
   18e64:	cmp	r0, #0
   18e68:	bne	18dd4 <__assert_fail@plt+0x6218>
   18e6c:	ldrb	r0, [r4, #44]	; 0x2c
   18e70:	tst	r0, #16
   18e74:	subeq	sp, fp, #28
   18e78:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e7c:	mov	r0, #1
   18e80:	bl	18150 <__assert_fail@plt+0x5594>
   18e84:	mov	r0, #0
   18e88:	bl	1285c <exit@plt>
   18e8c:	movw	r1, #3424	; 0xd60
   18e90:	movt	r1, #4
   18e94:	mov	r0, #0
   18e98:	mov	r2, #5
   18e9c:	bl	1264c <dcgettext@plt>
   18ea0:	mov	r2, r0
   18ea4:	mov	r0, #0
   18ea8:	mov	r1, #0
   18eac:	bl	12790 <error@plt>
   18eb0:	mov	r0, #1
   18eb4:	bl	17f90 <__assert_fail@plt+0x53d4>
   18eb8:	push	{r4, r5, r6, r7, fp, lr}
   18ebc:	add	fp, sp, #16
   18ec0:	sub	sp, sp, #8
   18ec4:	ldrb	r5, [r0]
   18ec8:	cmp	r5, #0
   18ecc:	beq	18f64 <__assert_fail@plt+0x63a8>
   18ed0:	mov	r4, r0
   18ed4:	bl	12844 <__ctype_b_loc@plt>
   18ed8:	ldr	r0, [r0]
   18edc:	add	r0, r0, r5, lsl #1
   18ee0:	ldrb	r0, [r0, #1]
   18ee4:	tst	r0, #8
   18ee8:	beq	18f58 <__assert_fail@plt+0x639c>
   18eec:	bl	128d4 <__errno_location@plt>
   18ef0:	mov	r6, r0
   18ef4:	ldr	r7, [r0]
   18ef8:	mov	r0, #0
   18efc:	str	r0, [r6]
   18f00:	add	r1, sp, #4
   18f04:	mov	r0, r4
   18f08:	mov	r2, #10
   18f0c:	bl	12880 <strtoul@plt>
   18f10:	mov	r5, r0
   18f14:	ldr	r0, [sp, #4]
   18f18:	cmp	r5, #0
   18f1c:	cmpeq	r0, r4
   18f20:	beq	18f58 <__assert_fail@plt+0x639c>
   18f24:	ldrb	r0, [r0]
   18f28:	cmp	r0, #0
   18f2c:	bne	18f88 <__assert_fail@plt+0x63cc>
   18f30:	cmn	r5, #1
   18f34:	beq	18fb0 <__assert_fail@plt+0x63f4>
   18f38:	cmp	r5, #65536	; 0x10000
   18f3c:	movwcc	r0, #24196	; 0x5e84
   18f40:	movtcc	r0, #5
   18f44:	strhcc	r5, [r0, #68]	; 0x44
   18f48:	strcc	r7, [r6]
   18f4c:	subcc	sp, fp, #16
   18f50:	popcc	{r4, r5, r6, r7, fp, pc}
   18f54:	b	18fbc <__assert_fail@plt+0x6400>
   18f58:	movw	r1, #3521	; 0xdc1
   18f5c:	movt	r1, #4
   18f60:	b	18f6c <__assert_fail@plt+0x63b0>
   18f64:	movw	r1, #3457	; 0xd81
   18f68:	movt	r1, #4
   18f6c:	mov	r0, #0
   18f70:	mov	r2, #5
   18f74:	bl	1264c <dcgettext@plt>
   18f78:	mov	r2, r0
   18f7c:	mov	r0, #1
   18f80:	mov	r1, #0
   18f84:	bl	12790 <error@plt>
   18f88:	movw	r1, #3574	; 0xdf6
   18f8c:	movt	r1, #4
   18f90:	mov	r0, #0
   18f94:	mov	r2, #5
   18f98:	bl	1264c <dcgettext@plt>
   18f9c:	mov	r2, r0
   18fa0:	mov	r0, #1
   18fa4:	mov	r1, #0
   18fa8:	mov	r3, r4
   18fac:	bl	12790 <error@plt>
   18fb0:	ldr	r6, [r6]
   18fb4:	cmp	r6, #0
   18fb8:	bne	18fe4 <__assert_fail@plt+0x6428>
   18fbc:	movw	r1, #3604	; 0xe14
   18fc0:	movt	r1, #4
   18fc4:	mov	r0, #0
   18fc8:	mov	r2, #5
   18fcc:	bl	1264c <dcgettext@plt>
   18fd0:	mov	r2, r0
   18fd4:	mov	r0, #1
   18fd8:	mov	r1, #0
   18fdc:	mov	r3, r5
   18fe0:	bl	12790 <error@plt>
   18fe4:	movw	r1, #3574	; 0xdf6
   18fe8:	movt	r1, #4
   18fec:	mov	r0, #0
   18ff0:	mov	r2, #5
   18ff4:	bl	1264c <dcgettext@plt>
   18ff8:	mov	r2, r0
   18ffc:	mov	r0, #1
   19000:	mov	r1, r6
   19004:	mov	r3, r4
   19008:	bl	12790 <error@plt>
   1900c:	push	{r4, r5, fp, lr}
   19010:	add	fp, sp, #8
   19014:	sub	sp, sp, #8
   19018:	mov	r4, r0
   1901c:	movw	r0, #2549	; 0x9f5
   19020:	movt	r0, #4
   19024:	bl	127cc <getenv@plt>
   19028:	cmp	r0, #0
   1902c:	movwne	r0, #1
   19030:	strb	r0, [r4, #17]
   19034:	bl	18318 <__assert_fail@plt+0x575c>
   19038:	strb	r0, [r4, #56]	; 0x38
   1903c:	mov	r5, #0
   19040:	str	r5, [r4, #60]	; 0x3c
   19044:	mov	r0, #0
   19048:	bl	12b2c <isatty@plt>
   1904c:	strb	r5, [r4, #15]
   19050:	cmp	r0, #0
   19054:	movwne	r0, #1
   19058:	strb	r0, [r4, #16]
   1905c:	ldrb	r0, [r4, #17]
   19060:	cmp	r0, #0
   19064:	strbne	r5, [r4, #16]
   19068:	mvn	r0, #0
   1906c:	mov	r1, #1
   19070:	strh	r1, [r4]
   19074:	str	r0, [r4, #4]
   19078:	str	r0, [r4, #8]
   1907c:	mov	r0, sp
   19080:	bl	19130 <__assert_fail@plt+0x6574>
   19084:	ldm	sp, {r0, r1}
   19088:	str	r1, [r4, #24]
   1908c:	str	r0, [r4, #20]
   19090:	strb	r5, [r4, #36]	; 0x24
   19094:	strh	r5, [r4, #13]
   19098:	str	r5, [r4, #44]	; 0x2c
   1909c:	mov	r0, #2
   190a0:	strh	r0, [r4, #68]	; 0x44
   190a4:	ldr	r0, [r4, #20]
   190a8:	ldr	r1, [r4, #24]
   190ac:	str	r1, [r4, #32]
   190b0:	sub	r0, r0, #4480	; 0x1180
   190b4:	sub	r0, r0, #81920	; 0x14000
   190b8:	str	r0, [r4, #28]
   190bc:	ldrb	r0, [r4, #17]
   190c0:	mov	r1, #512	; 0x200
   190c4:	cmp	r0, #0
   190c8:	movweq	r1, #1024	; 0x400
   190cc:	str	r1, [r4, #40]	; 0x28
   190d0:	movw	r0, #2565	; 0xa05
   190d4:	movt	r0, #4
   190d8:	bl	127cc <getenv@plt>
   190dc:	cmp	r0, #0
   190e0:	bne	1910c <__assert_fail@plt+0x6550>
   190e4:	mov	r5, #0
   190e8:	strb	r5, [r4, #12]
   190ec:	mov	r0, #0
   190f0:	bl	1b784 <__assert_fail@plt+0x8bc8>
   190f4:	mov	r0, #8
   190f8:	str	r0, [r4, #72]	; 0x48
   190fc:	str	r5, [r4, #76]	; 0x4c
   19100:	strb	r5, [r4, #80]	; 0x50
   19104:	sub	sp, fp, #8
   19108:	pop	{r4, r5, fp, pc}
   1910c:	movw	r1, #2581	; 0xa15
   19110:	movt	r1, #4
   19114:	mov	r0, #0
   19118:	mov	r2, #5
   1911c:	bl	1264c <dcgettext@plt>
   19120:	mov	r2, r0
   19124:	mov	r0, #1
   19128:	mov	r1, #0
   1912c:	bl	12790 <error@plt>
   19130:	push	{r4, r5, fp, lr}
   19134:	add	fp, sp, #8
   19138:	sub	sp, sp, #8
   1913c:	mov	r4, r0
   19140:	mov	r0, sp
   19144:	mov	r1, #0
   19148:	bl	12754 <gettimeofday@plt>
   1914c:	cmp	r0, #0
   19150:	beq	19170 <__assert_fail@plt+0x65b4>
   19154:	mov	r5, #0
   19158:	mov	r0, #0
   1915c:	bl	1261c <time@plt>
   19160:	cmn	r0, #1
   19164:	beq	19190 <__assert_fail@plt+0x65d4>
   19168:	str	r0, [r4]
   1916c:	b	19184 <__assert_fail@plt+0x65c8>
   19170:	ldr	r0, [sp]
   19174:	str	r0, [r4]
   19178:	ldr	r0, [sp, #4]
   1917c:	mov	r1, #1000	; 0x3e8
   19180:	mul	r5, r0, r1
   19184:	str	r5, [r4, #4]
   19188:	sub	sp, fp, #8
   1918c:	pop	{r4, r5, fp, pc}
   19190:	movw	r0, #3708	; 0xe7c
   19194:	movt	r0, #4
   19198:	movw	r1, #297	; 0x129
   1919c:	movt	r1, #4
   191a0:	movw	r3, #3724	; 0xe8c
   191a4:	movt	r3, #4
   191a8:	movw	r2, #978	; 0x3d2
   191ac:	bl	12bbc <__assert_fail@plt>
   191b0:	push	{r4, r5, r6, sl, fp, lr}
   191b4:	add	fp, sp, #16
   191b8:	mov	r4, r2
   191bc:	mov	r5, r1
   191c0:	mov	r6, r0
   191c4:	ldr	r0, [r2, #164]	; 0xa4
   191c8:	add	r0, r0, #1
   191cc:	str	r0, [r2, #164]	; 0xa4
   191d0:	ldrb	r0, [r2, #18]
   191d4:	cmp	r0, #0
   191d8:	bne	191f4 <__assert_fail@plt+0x6638>
   191dc:	ldrb	r0, [r4, #19]
   191e0:	cmp	r0, #0
   191e4:	bne	191f4 <__assert_fail@plt+0x6638>
   191e8:	ldrb	r0, [r4, #20]
   191ec:	cmp	r0, #0
   191f0:	beq	19214 <__assert_fail@plt+0x6658>
   191f4:	mov	r0, r6
   191f8:	mov	r1, r5
   191fc:	mov	r2, r4
   19200:	bl	19248 <__assert_fail@plt+0x668c>
   19204:	mov	r1, r0
   19208:	mov	r0, #0
   1920c:	cmp	r1, #0
   19210:	popne	{r4, r5, r6, sl, fp, pc}
   19214:	ldr	r3, [r4]
   19218:	mov	r0, r6
   1921c:	mov	r1, r5
   19220:	mov	r2, r4
   19224:	blx	r3
   19228:	mov	r1, r0
   1922c:	mov	r0, #0
   19230:	cmp	r1, #0
   19234:	ldrne	r0, [r4, #168]	; 0xa8
   19238:	addne	r0, r0, #1
   1923c:	strne	r0, [r4, #168]	; 0xa8
   19240:	movne	r0, #1
   19244:	pop	{r4, r5, r6, sl, fp, pc}
   19248:	push	{fp, lr}
   1924c:	mov	fp, sp
   19250:	mov	r3, r1
   19254:	movw	ip, #24152	; 0x5e58
   19258:	movt	ip, #5
   1925c:	ldrb	r1, [r2, #18]
   19260:	cmp	r1, #0
   19264:	beq	19274 <__assert_fail@plt+0x66b8>
   19268:	ldrb	r1, [ip, #4]
   1926c:	cmp	r1, #0
   19270:	beq	192ac <__assert_fail@plt+0x66f0>
   19274:	ldrb	lr, [ip, #5]
   19278:	ldrb	r1, [r2, #19]
   1927c:	cmp	r1, #0
   19280:	beq	1928c <__assert_fail@plt+0x66d0>
   19284:	cmp	lr, #0
   19288:	beq	192ac <__assert_fail@plt+0x66f0>
   1928c:	ldrb	r1, [r2, #20]
   19290:	cmp	r1, #0
   19294:	beq	192dc <__assert_fail@plt+0x6720>
   19298:	cmp	lr, #0
   1929c:	ldrne	r2, [r3, #96]	; 0x60
   192a0:	ldrne	r1, [r3, #100]	; 0x64
   192a4:	orrsne	r1, r2, r1
   192a8:	bne	192cc <__assert_fail@plt+0x6710>
   192ac:	ldr	r1, [ip, #12]
   192b0:	mov	r2, r3
   192b4:	bl	18218 <__assert_fail@plt+0x565c>
   192b8:	mov	r1, r0
   192bc:	mvn	r0, #0
   192c0:	cmp	r1, #0
   192c4:	moveq	r0, #0
   192c8:	pop	{fp, pc}
   192cc:	ldr	r1, [r3, #16]
   192d0:	and	r1, r1, #61440	; 0xf000
   192d4:	cmp	r1, #16384	; 0x4000
   192d8:	beq	192ac <__assert_fail@plt+0x66f0>
   192dc:	mov	r0, #0
   192e0:	pop	{fp, pc}
   192e4:	movw	r1, #18996	; 0x4a34
   192e8:	movt	r1, #1
   192ec:	sub	r1, r0, r1
   192f0:	clz	r1, r1
   192f4:	lsr	r1, r1, #5
   192f8:	movw	r2, #17188	; 0x4324
   192fc:	movt	r2, #1
   19300:	sub	r0, r0, r2
   19304:	clz	r0, r0
   19308:	lsr	r0, r0, #5
   1930c:	orr	r0, r0, r1
   19310:	bx	lr
   19314:	mov	r2, r1
   19318:	movw	r1, #24196	; 0x5e84
   1931c:	movt	r1, #5
   19320:	ldr	r1, [r1, #72]	; 0x48
   19324:	b	2a024 <__assert_fail@plt+0x17468>
   19328:	push	{r4, r5, r6, r7, fp, lr}
   1932c:	add	fp, sp, #16
   19330:	mov	r4, r2
   19334:	mov	r5, r1
   19338:	mov	r6, r0
   1933c:	movw	r7, #24152	; 0x5e58
   19340:	movt	r7, #5
   19344:	ldrb	r0, [r7, #40]	; 0x28
   19348:	cmp	r0, #0
   1934c:	cmpne	r4, #0
   19350:	bne	19380 <__assert_fail@plt+0x67c4>
   19354:	mov	r0, #0
   19358:	mov	r1, r3
   1935c:	bl	19314 <__assert_fail@plt+0x6758>
   19360:	mov	r3, r0
   19364:	movw	r2, #19439	; 0x4bef
   19368:	movt	r2, #4
   1936c:	mov	r0, r6
   19370:	mov	r1, r5
   19374:	bl	12790 <error@plt>
   19378:	mov	r0, #1
   1937c:	str	r0, [r7, #28]
   19380:	cmp	r4, #0
   19384:	movne	r0, #1
   19388:	strbne	r0, [r7, #40]	; 0x28
   1938c:	pop	{r4, r5, r6, r7, fp, pc}
   19390:	push	{fp, lr}
   19394:	mov	fp, sp
   19398:	mov	r3, r1
   1939c:	mov	r1, r0
   193a0:	mov	r0, #1
   193a4:	mov	r2, #1
   193a8:	bl	19328 <__assert_fail@plt+0x676c>
   193ac:	bl	12b68 <abort@plt>
   193b0:	push	{fp, lr}
   193b4:	mov	fp, sp
   193b8:	mov	r3, r1
   193bc:	mov	r1, r0
   193c0:	movw	r0, #24152	; 0x5e58
   193c4:	movt	r0, #5
   193c8:	mov	r2, #0
   193cc:	strb	r2, [r0, #40]	; 0x28
   193d0:	mov	r0, #1
   193d4:	mov	r2, #0
   193d8:	bl	19328 <__assert_fail@plt+0x676c>
   193dc:	bl	12b68 <abort@plt>
   193e0:	push	{r4, sl, fp, lr}
   193e4:	add	fp, sp, #8
   193e8:	mov	r4, r0
   193ec:	ldr	r0, [r0, #104]	; 0x68
   193f0:	movw	r1, #37936	; 0x9430
   193f4:	movt	r1, #1
   193f8:	mov	r2, r4
   193fc:	bl	1fdf8 <__assert_fail@plt+0xd23c>
   19400:	ldr	r0, [r4, #104]	; 0x68
   19404:	movw	r1, #21888	; 0x5580
   19408:	movt	r1, #5
   1940c:	ldr	r1, [r1]
   19410:	cmp	r0, r1
   19414:	popeq	{r4, sl, fp, pc}
   19418:	bl	2a754 <__assert_fail@plt+0x17b98>
   1941c:	ldr	r0, [r4, #104]	; 0x68
   19420:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   19424:	mov	r0, #0
   19428:	str	r0, [r4, #104]	; 0x68
   1942c:	pop	{r4, sl, fp, pc}
   19430:	push	{fp, lr}
   19434:	mov	fp, sp
   19438:	add	r2, r0, #4
   1943c:	add	r1, r0, #48	; 0x30
   19440:	mov	r0, r2
   19444:	bl	1f79c <__assert_fail@plt+0xcbe0>
   19448:	mov	r0, #0
   1944c:	pop	{fp, pc}
   19450:	push	{r4, r5, r6, sl, fp, lr}
   19454:	add	fp, sp, #16
   19458:	sub	sp, sp, #8
   1945c:	mov	r6, r0
   19460:	mov	r0, #8
   19464:	bl	2ed04 <__assert_fail@plt+0x1c148>
   19468:	mov	r4, #0
   1946c:	cmp	r0, #0
   19470:	beq	194dc <__assert_fail@plt+0x6920>
   19474:	mov	r5, r0
   19478:	mov	r0, r6
   1947c:	bl	12658 <strdup@plt>
   19480:	str	r0, [r5]
   19484:	cmp	r0, #0
   19488:	beq	194d4 <__assert_fail@plt+0x6918>
   1948c:	movw	r0, #38248	; 0x9568
   19490:	movt	r0, #1
   19494:	str	r0, [sp]
   19498:	mov	r4, #0
   1949c:	movw	r2, #38120	; 0x94e8
   194a0:	movt	r2, #1
   194a4:	movw	r3, #38176	; 0x9520
   194a8:	movt	r3, #1
   194ac:	mov	r0, #11
   194b0:	mov	r1, #0
   194b4:	bl	226a8 <__assert_fail@plt+0xfaec>
   194b8:	str	r0, [r5, #4]
   194bc:	cmp	r0, #0
   194c0:	beq	194cc <__assert_fail@plt+0x6910>
   194c4:	mov	r4, r5
   194c8:	b	194dc <__assert_fail@plt+0x6920>
   194cc:	ldr	r0, [r5]
   194d0:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   194d4:	mov	r0, r5
   194d8:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   194dc:	mov	r0, r4
   194e0:	sub	sp, fp, #16
   194e4:	pop	{r4, r5, r6, sl, fp, pc}
   194e8:	push	{fp, lr}
   194ec:	mov	fp, sp
   194f0:	mov	ip, r1
   194f4:	ldr	lr, [r0]
   194f8:	ldr	r3, [r0, #4]
   194fc:	ldr	r2, [r0, #8]
   19500:	ldr	r1, [r0, #12]
   19504:	eor	r0, r2, lr
   19508:	eor	r1, r1, r3
   1950c:	mov	r2, ip
   19510:	mov	r3, #0
   19514:	bl	3e6b0 <__assert_fail@plt+0x2baf4>
   19518:	mov	r0, r2
   1951c:	pop	{fp, pc}
   19520:	push	{r4, r5, fp, lr}
   19524:	add	fp, sp, #8
   19528:	ldrd	r2, [r1, #8]
   1952c:	ldrd	r4, [r0, #8]
   19530:	eor	r3, r5, r3
   19534:	eor	r2, r4, r2
   19538:	orrs	r2, r2, r3
   1953c:	mov	r2, #0
   19540:	bne	19560 <__assert_fail@plt+0x69a4>
   19544:	ldrd	r2, [r1]
   19548:	ldrd	r0, [r0]
   1954c:	eor	r1, r1, r3
   19550:	eor	r0, r0, r2
   19554:	orr	r0, r0, r1
   19558:	clz	r0, r0
   1955c:	lsr	r2, r0, #5
   19560:	mov	r0, r2
   19564:	pop	{r4, r5, fp, pc}
   19568:	push	{r4, sl, fp, lr}
   1956c:	add	fp, sp, #8
   19570:	mov	r4, r0
   19574:	ldr	r0, [r0, #20]
   19578:	cmp	r0, #0
   1957c:	beq	1958c <__assert_fail@plt+0x69d0>
   19580:	bl	129a0 <fclose@plt>
   19584:	cmp	r0, #0
   19588:	bne	195a0 <__assert_fail@plt+0x69e4>
   1958c:	ldr	r0, [r4, #16]
   19590:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   19594:	mov	r0, r4
   19598:	pop	{r4, sl, fp, lr}
   1959c:	b	2ca78 <__assert_fail@plt+0x19ebc>
   195a0:	bl	128d4 <__errno_location@plt>
   195a4:	ldr	r0, [r0]
   195a8:	ldr	r1, [r4, #16]
   195ac:	bl	193b0 <__assert_fail@plt+0x67f4>
   195b0:	push	{r4, sl, fp, lr}
   195b4:	add	fp, sp, #8
   195b8:	mov	r4, r0
   195bc:	ldr	r0, [r0]
   195c0:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   195c4:	ldr	r0, [r4, #4]
   195c8:	pop	{r4, sl, fp, lr}
   195cc:	b	2297c <__assert_fail@plt+0xfdc0>
   195d0:	push	{r4, r5, r6, r7, fp, lr}
   195d4:	add	fp, sp, #16
   195d8:	sub	sp, sp, #104	; 0x68
   195dc:	mov	r7, r1
   195e0:	mov	r5, r0
   195e4:	mov	r0, #24
   195e8:	bl	2ed04 <__assert_fail@plt+0x1c148>
   195ec:	mov	r6, #0
   195f0:	cmp	r0, #0
   195f4:	beq	196cc <__assert_fail@plt+0x6b10>
   195f8:	mov	r4, r0
   195fc:	mov	r0, r7
   19600:	bl	12658 <strdup@plt>
   19604:	str	r0, [r4, #16]
   19608:	cmp	r0, #0
   1960c:	beq	1968c <__assert_fail@plt+0x6ad0>
   19610:	ldr	r1, [r5]
   19614:	mov	r0, r7
   19618:	bl	221b4 <__assert_fail@plt+0xf5f8>
   1961c:	str	r0, [r4, #20]
   19620:	cmp	r0, #0
   19624:	beq	19698 <__assert_fail@plt+0x6adc>
   19628:	bl	12958 <fileno@plt>
   1962c:	cmn	r0, #1
   19630:	ble	196f4 <__assert_fail@plt+0x6b38>
   19634:	mov	r6, r0
   19638:	mov	r1, #1
   1963c:	bl	21c94 <__assert_fail@plt+0xf0d8>
   19640:	mov	r1, sp
   19644:	mov	r0, r6
   19648:	bl	3e8f4 <__assert_fail@plt+0x2bd38>
   1964c:	cmn	r0, #1
   19650:	ble	196a4 <__assert_fail@plt+0x6ae8>
   19654:	ldm	sp, {r0, r1}
   19658:	ldr	r2, [sp, #96]	; 0x60
   1965c:	ldr	r3, [sp, #100]	; 0x64
   19660:	stm	r4, {r0, r1, r2, r3}
   19664:	ldr	r0, [r5, #4]
   19668:	mov	r1, r4
   1966c:	bl	22420 <__assert_fail@plt+0xf864>
   19670:	cmp	r0, #0
   19674:	beq	196b4 <__assert_fail@plt+0x6af8>
   19678:	mov	r6, r0
   1967c:	mov	r0, r4
   19680:	bl	19568 <__assert_fail@plt+0x69ac>
   19684:	ldr	r6, [r6, #20]
   19688:	b	196cc <__assert_fail@plt+0x6b10>
   1968c:	mov	r0, r4
   19690:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   19694:	b	196cc <__assert_fail@plt+0x6b10>
   19698:	mov	r0, r4
   1969c:	bl	19568 <__assert_fail@plt+0x69ac>
   196a0:	b	196cc <__assert_fail@plt+0x6b10>
   196a4:	mov	r0, r4
   196a8:	bl	19568 <__assert_fail@plt+0x69ac>
   196ac:	mov	r6, #0
   196b0:	b	196cc <__assert_fail@plt+0x6b10>
   196b4:	ldr	r0, [r5, #4]
   196b8:	mov	r1, r4
   196bc:	bl	22f38 <__assert_fail@plt+0x1037c>
   196c0:	cmp	r0, #0
   196c4:	beq	196d8 <__assert_fail@plt+0x6b1c>
   196c8:	ldr	r6, [r4, #20]
   196cc:	mov	r0, r6
   196d0:	sub	sp, fp, #16
   196d4:	pop	{r4, r5, r6, r7, fp, pc}
   196d8:	bl	128d4 <__errno_location@plt>
   196dc:	mov	r5, r0
   196e0:	ldr	r6, [r0]
   196e4:	mov	r0, r4
   196e8:	bl	19568 <__assert_fail@plt+0x69ac>
   196ec:	str	r6, [r5]
   196f0:	b	196ac <__assert_fail@plt+0x6af0>
   196f4:	movw	r0, #60534	; 0xec76
   196f8:	movt	r0, #3
   196fc:	movw	r1, #3860	; 0xf14
   19700:	movt	r1, #4
   19704:	movw	r3, #3872	; 0xf20
   19708:	movt	r3, #4
   1970c:	mov	r2, #166	; 0xa6
   19710:	bl	12bbc <__assert_fail@plt>
   19714:	andeq	r0, r0, r0
   19718:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1971c:	add	fp, sp, #28
   19720:	sub	sp, sp, #4
   19724:	ldr	r7, [fp, #8]
   19728:	cmp	r7, #40	; 0x28
   1972c:	beq	19a08 <__assert_fail@plt+0x6e4c>
   19730:	cmp	r7, #91	; 0x5b
   19734:	beq	19a28 <__assert_fail@plt+0x6e6c>
   19738:	cmp	r7, #123	; 0x7b
   1973c:	beq	19a48 <__assert_fail@plt+0x6e8c>
   19740:	mov	r5, r3
   19744:	mov	r6, r2
   19748:	mov	r9, r1
   1974c:	mov	r8, r0
   19750:	ldr	sl, [fp, #12]
   19754:	mov	r0, #20
   19758:	bl	2b5cc <__assert_fail@plt+0x18a10>
   1975c:	str	r0, [r8]
   19760:	str	r5, [r0]
   19764:	strb	r7, [r0, #4]
   19768:	strb	sl, [r0, #5]
   1976c:	ldr	r0, [r8]
   19770:	mov	r1, #0
   19774:	str	r1, [r0, #16]
   19778:	ldr	r0, [r8]
   1977c:	str	r6, [r0, #12]
   19780:	add	r0, r6, #2
   19784:	bl	2b5cc <__assert_fail@plt+0x18a10>
   19788:	mov	r4, r0
   1978c:	ldr	r0, [r8]
   19790:	str	r4, [r0, #8]
   19794:	mov	r0, r4
   19798:	mov	r1, r9
   1979c:	mov	r2, r6
   197a0:	bl	12928 <strncpy@plt>
   197a4:	add	r0, r4, r6
   197a8:	cmp	r5, #1
   197ac:	bhi	197cc <__assert_fail@plt+0x6c10>
   197b0:	cmp	r7, #0
   197b4:	bne	19a68 <__assert_fail@plt+0x6eac>
   197b8:	cmp	sl, #0
   197bc:	bne	19a88 <__assert_fail@plt+0x6ecc>
   197c0:	mov	r1, #0
   197c4:	strb	r1, [r0]
   197c8:	b	19968 <__assert_fail@plt+0x6dac>
   197cc:	cmp	r5, #2
   197d0:	bne	19aa8 <__assert_fail@plt+0x6eec>
   197d4:	sub	r2, r7, #37	; 0x25
   197d8:	cmp	r2, #84	; 0x54
   197dc:	bhi	197c0 <__assert_fail@plt+0x6c04>
   197e0:	ldr	r1, [fp, #16]
   197e4:	add	r3, pc, #0
   197e8:	ldr	pc, [r3, r2, lsl #2]
   197ec:	andeq	r9, r1, ip, ror r9
   197f0:	andeq	r9, r1, r0, asr #15
   197f4:	andeq	r9, r1, r0, asr #15
   197f8:	andeq	r9, r1, r0, asr #15
   197fc:	andeq	r9, r1, r0, asr #15
   19800:	andeq	r9, r1, r0, asr #15
   19804:	andeq	r9, r1, r0, asr #15
   19808:	andeq	r9, r1, r0, asr #15
   1980c:	andeq	r9, r1, r0, asr #15
   19810:	andeq	r9, r1, r0, asr #15
   19814:	andeq	r9, r1, r0, asr #15
   19818:	andeq	r9, r1, r0, asr #15
   1981c:	andeq	r9, r1, r0, asr #15
   19820:	andeq	r9, r1, r0, asr #15
   19824:	andeq	r9, r1, r0, asr #15
   19828:	andeq	r9, r1, r0, asr #15
   1982c:	andeq	r9, r1, r0, asr #15
   19830:	andeq	r9, r1, r0, asr #15
   19834:	andeq	r9, r1, r0, asr #15
   19838:	andeq	r9, r1, r0, asr #15
   1983c:	andeq	r9, r1, r0, asr #15
   19840:	andeq	r9, r1, r0, asr #15
   19844:	andeq	r9, r1, r0, asr #15
   19848:	andeq	r9, r1, r0, asr #15
   1984c:	andeq	r9, r1, r0, asr #15
   19850:	andeq	r9, r1, r0, asr #15
   19854:	andeq	r9, r1, r0, asr #15
   19858:	andeq	r9, r1, r0, asr #15
   1985c:	andeq	r9, r1, r0, asr #18
   19860:	andeq	r9, r1, r0, asr #18
   19864:	andeq	r9, r1, r0, asr #18
   19868:	andeq	r9, r1, r0, asr #18
   1986c:	andeq	r9, r1, r0, asr #15
   19870:	andeq	r9, r1, r0, asr #18
   19874:	andeq	r9, r1, r0, asr #18
   19878:	andeq	r9, r1, r8, ror r9
   1987c:	andeq	r9, r1, r0, asr #15
   19880:	andeq	r9, r1, r0, asr #15
   19884:	andeq	r9, r1, r0, asr #15
   19888:	andeq	r9, r1, r0, asr #15
   1988c:	andeq	r9, r1, r0, asr #18
   19890:	andeq	r9, r1, r0, asr #15
   19894:	andeq	r9, r1, r0, asr #15
   19898:	andeq	r9, r1, r8, ror r9
   1989c:	andeq	r9, r1, r0, asr #15
   198a0:	andeq	r9, r1, r0, asr #15
   198a4:	muleq	r1, r0, r9
   198a8:	andeq	r9, r1, r0, asr #18
   198ac:	andeq	r9, r1, r0, asr #18
   198b0:	andeq	r9, r1, r0, asr #15
   198b4:	andeq	r9, r1, r0, asr #15
   198b8:	andeq	r9, r1, r0, asr #15
   198bc:	andeq	r9, r1, r4, lsl #19
   198c0:	strdeq	r9, [r1], -r8
   198c4:	andeq	r9, r1, r0, asr #15
   198c8:	andeq	r9, r1, r0, asr #15
   198cc:	andeq	r9, r1, r0, asr #15
   198d0:	andeq	r9, r1, r0, asr #15
   198d4:	andeq	r9, r1, r0, asr #15
   198d8:	andeq	r9, r1, r0, asr #15
   198dc:	andeq	r9, r1, r0, asr #18
   198e0:	andeq	r9, r1, r0, asr #18
   198e4:	andeq	r9, r1, r0, asr #18
   198e8:	andeq	r9, r1, ip, ror r9
   198ec:	andeq	r9, r1, r0, asr #15
   198f0:	andeq	r9, r1, r8, ror r9
   198f4:	andeq	r9, r1, r0, asr #18
   198f8:	andeq	r9, r1, r8, ror r9
   198fc:	andeq	r9, r1, r0, lsr #19
   19900:	andeq	r9, r1, r0, asr #15
   19904:	andeq	r9, r1, r0, asr #18
   19908:			; <UNDEFINED> instruction: 0x000199b4
   1990c:	andeq	r9, r1, r4, ror #19
   19910:	andeq	r9, r1, r0, asr #18
   19914:	andeq	r9, r1, r0, asr #15
   19918:	andeq	r9, r1, r8, ror r9
   1991c:	andeq	r9, r1, r0, asr #15
   19920:	andeq	r9, r1, r0, asr #15
   19924:	andeq	r9, r1, r0, asr #18
   19928:	andeq	r9, r1, r0, asr #18
   1992c:	andeq	r9, r1, r0, asr #18
   19930:	andeq	r9, r1, r0, asr #15
   19934:	andeq	r9, r1, r0, asr #15
   19938:	andeq	r9, r1, r0, asr #15
   1993c:	andeq	r9, r1, ip, asr #19
   19940:	mov	r2, #1
   19944:	strb	r2, [r1, #18]
   19948:	mov	r2, #115	; 0x73
   1994c:	strb	r2, [r0]
   19950:	mov	r2, #3
   19954:	mov	r3, #0
   19958:	strb	r3, [r0, #1]
   1995c:	ldr	r0, [r1, #24]
   19960:	cmp	r2, r0
   19964:	strhi	r2, [r1, #24]
   19968:	ldr	r0, [r8]
   1996c:	add	r0, r0, #16
   19970:	sub	sp, fp, #28
   19974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19978:	mov	r7, #115	; 0x73
   1997c:	strb	r7, [r0], #1
   19980:	b	197c0 <__assert_fail@plt+0x6c04>
   19984:	mov	r2, #1
   19988:	strb	r2, [r1, #18]
   1998c:	b	199d4 <__assert_fail@plt+0x6e18>
   19990:	mov	r2, #1
   19994:	strb	r2, [r1, #18]
   19998:	mov	r2, #103	; 0x67
   1999c:	b	1994c <__assert_fail@plt+0x6d90>
   199a0:	mov	r2, #1
   199a4:	strb	r2, [r1, #20]
   199a8:	mov	r3, #115	; 0x73
   199ac:	strb	r3, [r0]
   199b0:	b	19954 <__assert_fail@plt+0x6d98>
   199b4:	mov	r2, #1
   199b8:	strb	r2, [r1, #18]
   199bc:	mov	r2, #115	; 0x73
   199c0:	strb	r2, [r0]
   199c4:	mov	r2, #4
   199c8:	b	19954 <__assert_fail@plt+0x6d98>
   199cc:	mov	r2, #1
   199d0:	strb	r2, [r1, #19]
   199d4:	mov	r2, #115	; 0x73
   199d8:	strb	r2, [r0]
   199dc:	mov	r2, #2
   199e0:	b	19954 <__assert_fail@plt+0x6d98>
   199e4:	mov	r2, #111	; 0x6f
   199e8:	strb	r2, [r0]
   199ec:	mov	r2, #1
   199f0:	strb	r2, [r1, #18]
   199f4:	b	19950 <__assert_fail@plt+0x6d94>
   199f8:	mov	r2, #115	; 0x73
   199fc:	strb	r2, [r0]
   19a00:	mov	r2, #5
   19a04:	b	19954 <__assert_fail@plt+0x6d98>
   19a08:	movw	r0, #4071	; 0xfe7
   19a0c:	movt	r0, #4
   19a10:	movw	r1, #3945	; 0xf69
   19a14:	movt	r1, #4
   19a18:	movw	r3, #3953	; 0xf71
   19a1c:	movt	r3, #4
   19a20:	mov	r2, #80	; 0x50
   19a24:	bl	12bbc <__assert_fail@plt>
   19a28:	movw	r0, #4052	; 0xfd4
   19a2c:	movt	r0, #4
   19a30:	movw	r1, #3945	; 0xf69
   19a34:	movt	r1, #4
   19a38:	movw	r3, #3953	; 0xf71
   19a3c:	movt	r3, #4
   19a40:	mov	r2, #79	; 0x4f
   19a44:	bl	12bbc <__assert_fail@plt>
   19a48:	movw	r0, #3926	; 0xf56
   19a4c:	movt	r0, #4
   19a50:	movw	r1, #3945	; 0xf69
   19a54:	movt	r1, #4
   19a58:	movw	r3, #3953	; 0xf71
   19a5c:	movt	r3, #4
   19a60:	mov	r2, #78	; 0x4e
   19a64:	bl	12bbc <__assert_fail@plt>
   19a68:	movw	r0, #4090	; 0xffa
   19a6c:	movt	r0, #4
   19a70:	movw	r1, #3945	; 0xf69
   19a74:	movt	r1, #4
   19a78:	movw	r3, #3953	; 0xf71
   19a7c:	movt	r3, #4
   19a80:	mov	r2, #97	; 0x61
   19a84:	bl	12bbc <__assert_fail@plt>
   19a88:	movw	r0, #4107	; 0x100b
   19a8c:	movt	r0, #4
   19a90:	movw	r1, #3945	; 0xf69
   19a94:	movt	r1, #4
   19a98:	movw	r3, #3953	; 0xf71
   19a9c:	movt	r3, #4
   19aa0:	mov	r2, #98	; 0x62
   19aa4:	bl	12bbc <__assert_fail@plt>
   19aa8:	movw	r0, #4128	; 0x1020
   19aac:	movt	r0, #4
   19ab0:	movw	r1, #3945	; 0xf69
   19ab4:	movt	r1, #4
   19ab8:	movw	r3, #3953	; 0xf71
   19abc:	movt	r3, #4
   19ac0:	mov	r2, #105	; 0x69
   19ac4:	bl	12bbc <__assert_fail@plt>
   19ac8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19acc:	add	fp, sp, #28
   19ad0:	sub	sp, sp, #20
   19ad4:	mov	r8, r2
   19ad8:	mov	r2, r1
   19adc:	mov	r5, r0
   19ae0:	movw	r1, #40516	; 0x9e44
   19ae4:	movt	r1, #1
   19ae8:	mov	r0, r2
   19aec:	mov	r2, r8
   19af0:	bl	17f14 <__assert_fail@plt+0x5358>
   19af4:	mov	r7, r0
   19af8:	movw	r0, #257	; 0x101
   19afc:	strh	r0, [r7, #16]
   19b00:	vld1.32	{d16-d17}, [r5]!
   19b04:	add	r6, r7, #40	; 0x28
   19b08:	vst1.32	{d16-d17}, [r6]
   19b0c:	ldr	r0, [r5]
   19b10:	mov	r9, #0
   19b14:	strh	r9, [r7, #18]
   19b18:	str	r9, [r7, #24]
   19b1c:	str	r9, [r7, #40]	; 0x28
   19b20:	str	r0, [r7, #56]	; 0x38
   19b24:	mov	sl, r8
   19b28:	b	19b34 <__assert_fail@plt+0x6f78>
   19b2c:	add	sl, r5, #1
   19b30:	add	r8, r5, #1
   19b34:	ldrb	r0, [r8]
   19b38:	cmp	r0, #37	; 0x25
   19b3c:	beq	19bac <__assert_fail@plt+0x6ff0>
   19b40:	cmp	r0, #92	; 0x5c
   19b44:	beq	19b5c <__assert_fail@plt+0x6fa0>
   19b48:	cmp	r0, #0
   19b4c:	beq	19d80 <__assert_fail@plt+0x71c4>
   19b50:	mov	r5, r8
   19b54:	add	r8, r8, #1
   19b58:	b	19b34 <__assert_fail@plt+0x6f78>
   19b5c:	ldrb	r0, [r8, #1]
   19b60:	cmp	r0, #99	; 0x63
   19b64:	beq	19dac <__assert_fail@plt+0x71f0>
   19b68:	mov	r4, r7
   19b6c:	mov	r5, r8
   19b70:	ldrb	r7, [r5, #1]!
   19b74:	cmp	r7, #0
   19b78:	beq	19cc4 <__assert_fail@plt+0x7108>
   19b7c:	mov	r0, r7
   19b80:	bl	19fcc <__assert_fail@plt+0x7410>
   19b84:	cmp	r0, #0
   19b88:	beq	19cf0 <__assert_fail@plt+0x7134>
   19b8c:	str	r9, [sp, #16]
   19b90:	mov	r0, r5
   19b94:	add	r1, sp, #16
   19b98:	bl	19fe0 <__assert_fail@plt+0x7424>
   19b9c:	strb	r0, [r8]
   19ba0:	ldr	r0, [sp, #16]
   19ba4:	add	r5, r0, #1
   19ba8:	b	19d08 <__assert_fail@plt+0x714c>
   19bac:	ldrb	r1, [r8, #1]
   19bb0:	mov	r0, #1
   19bb4:	cmp	r1, #37	; 0x25
   19bb8:	beq	19bcc <__assert_fail@plt+0x7010>
   19bbc:	cmp	r1, #0
   19bc0:	beq	19df4 <__assert_fail@plt+0x7238>
   19bc4:	mov	r0, r8
   19bc8:	bl	1a0f4 <__assert_fail@plt+0x7538>
   19bcc:	mov	r4, r6
   19bd0:	mov	r6, r7
   19bd4:	ldrb	r9, [r8, r0]!
   19bd8:	mov	r0, r9
   19bdc:	bl	1a184 <__assert_fail@plt+0x75c8>
   19be0:	mov	r7, r0
   19be4:	cmp	r0, #0
   19be8:	beq	19c38 <__assert_fail@plt+0x707c>
   19bec:	add	r5, r8, r7
   19bf0:	ldrb	r0, [r5, #-1]!
   19bf4:	cmp	r0, #0
   19bf8:	beq	19c38 <__assert_fail@plt+0x707c>
   19bfc:	mov	r0, #0
   19c00:	cmp	r7, #2
   19c04:	ldrbeq	r0, [r8, #1]
   19c08:	str	r9, [sp]
   19c0c:	str	r0, [sp, #4]
   19c10:	mov	r7, r6
   19c14:	str	r6, [sp, #8]
   19c18:	sub	r2, r8, sl
   19c1c:	mov	r0, r4
   19c20:	mov	r1, sl
   19c24:	mov	r3, #2
   19c28:	bl	19718 <__assert_fail@plt+0x6b5c>
   19c2c:	mov	r6, r0
   19c30:	mov	r9, #0
   19c34:	b	19b2c <__assert_fail@plt+0x6f70>
   19c38:	movw	r0, #4264	; 0x10a8
   19c3c:	movt	r0, #4
   19c40:	mov	r1, r9
   19c44:	mov	r2, #4
   19c48:	bl	1297c <memchr@plt>
   19c4c:	cmp	r0, #0
   19c50:	bne	19e1c <__assert_fail@plt+0x7260>
   19c54:	cmp	r7, #2
   19c58:	mov	r9, #0
   19c5c:	mov	r7, r6
   19c60:	ldrbeq	r0, [r8, #1]
   19c64:	cmpeq	r0, #0
   19c68:	beq	19d70 <__assert_fail@plt+0x71b4>
   19c6c:	mov	r0, #0
   19c70:	movw	r1, #4403	; 0x1133
   19c74:	movt	r1, #4
   19c78:	mov	r2, #5
   19c7c:	bl	1264c <dcgettext@plt>
   19c80:	mov	r2, r0
   19c84:	ldrb	r3, [r8]
   19c88:	mov	r0, #0
   19c8c:	mov	r1, #0
   19c90:	bl	12790 <error@plt>
   19c94:	str	r9, [sp]
   19c98:	str	r9, [sp, #4]
   19c9c:	str	r7, [sp, #8]
   19ca0:	add	r0, r8, #1
   19ca4:	sub	r2, r0, sl
   19ca8:	mov	r0, r4
   19cac:	mov	r1, sl
   19cb0:	mov	r3, #0
   19cb4:	bl	19718 <__assert_fail@plt+0x6b5c>
   19cb8:	mov	r6, r0
   19cbc:	mov	r5, r8
   19cc0:	b	19b2c <__assert_fail@plt+0x6f70>
   19cc4:	mov	r5, #0
   19cc8:	mov	r0, #0
   19ccc:	movw	r1, #4148	; 0x1034
   19cd0:	movt	r1, #4
   19cd4:	mov	r2, #5
   19cd8:	bl	1264c <dcgettext@plt>
   19cdc:	mov	r2, r0
   19ce0:	mov	r0, #0
   19ce4:	mov	r1, #0
   19ce8:	bl	12790 <error@plt>
   19cec:	b	19d08 <__assert_fail@plt+0x714c>
   19cf0:	mov	r0, r7
   19cf4:	bl	1a030 <__assert_fail@plt+0x7474>
   19cf8:	tst	r0, #255	; 0xff
   19cfc:	beq	19d3c <__assert_fail@plt+0x7180>
   19d00:	strb	r0, [r8]
   19d04:	mov	r5, #1
   19d08:	mov	r7, r4
   19d0c:	str	r9, [sp]
   19d10:	str	r9, [sp, #4]
   19d14:	str	r4, [sp, #8]
   19d18:	add	r0, r8, #1
   19d1c:	sub	r2, r0, sl
   19d20:	mov	r0, r6
   19d24:	mov	r1, sl
   19d28:	mov	r3, #0
   19d2c:	bl	19718 <__assert_fail@plt+0x6b5c>
   19d30:	mov	r6, r0
   19d34:	add	r5, r8, r5
   19d38:	b	19b2c <__assert_fail@plt+0x6f70>
   19d3c:	mov	r0, #0
   19d40:	movw	r1, #4195	; 0x1063
   19d44:	movt	r1, #4
   19d48:	mov	r2, #5
   19d4c:	bl	1264c <dcgettext@plt>
   19d50:	mov	r2, r0
   19d54:	ldrb	r3, [r5]
   19d58:	mov	r0, #0
   19d5c:	mov	r1, #0
   19d60:	bl	12790 <error@plt>
   19d64:	mov	r7, r4
   19d68:	add	r8, r5, #1
   19d6c:	b	19b34 <__assert_fail@plt+0x6f78>
   19d70:	mov	r0, #0
   19d74:	movw	r1, #4330	; 0x10ea
   19d78:	movt	r1, #4
   19d7c:	b	19c78 <__assert_fail@plt+0x70bc>
   19d80:	cmp	r8, sl
   19d84:	bls	19de8 <__assert_fail@plt+0x722c>
   19d88:	mov	r0, #0
   19d8c:	str	r0, [sp]
   19d90:	stmib	sp, {r0, r7}
   19d94:	sub	r2, r8, sl
   19d98:	mov	r0, r6
   19d9c:	mov	r1, sl
   19da0:	mov	r3, #0
   19da4:	bl	19718 <__assert_fail@plt+0x6b5c>
   19da8:	b	19de8 <__assert_fail@plt+0x722c>
   19dac:	mov	r0, #0
   19db0:	str	r0, [sp]
   19db4:	stmib	sp, {r0, r7}
   19db8:	sub	r2, r8, sl
   19dbc:	mov	r0, r6
   19dc0:	mov	r1, sl
   19dc4:	mov	r3, #1
   19dc8:	bl	19718 <__assert_fail@plt+0x6b5c>
   19dcc:	ldrb	r0, [r7, #18]
   19dd0:	cmp	r0, #0
   19dd4:	beq	19de8 <__assert_fail@plt+0x722c>
   19dd8:	ldr	r0, [r7, #24]
   19ddc:	cmp	r0, #2
   19de0:	movls	r0, #3
   19de4:	strls	r0, [r7, #24]
   19de8:	mov	r0, #1
   19dec:	sub	sp, fp, #28
   19df0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19df4:	movw	r1, #4230	; 0x1086
   19df8:	movt	r1, #4
   19dfc:	mov	r0, #0
   19e00:	mov	r2, #5
   19e04:	bl	1264c <dcgettext@plt>
   19e08:	mov	r2, r0
   19e0c:	mov	r0, #1
   19e10:	mov	r1, #0
   19e14:	mov	r3, r8
   19e18:	bl	12790 <error@plt>
   19e1c:	movw	r1, #4268	; 0x10ac
   19e20:	movt	r1, #4
   19e24:	mov	r0, #0
   19e28:	mov	r2, #5
   19e2c:	bl	1264c <dcgettext@plt>
   19e30:	mov	r2, r0
   19e34:	ldrb	r3, [r8]
   19e38:	mov	r0, #1
   19e3c:	mov	r1, #0
   19e40:	bl	12790 <error@plt>
   19e44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e48:	add	fp, sp, #28
   19e4c:	sub	sp, sp, #12
   19e50:	mov	r4, r2
   19e54:	ldr	r7, [r4, #40]!	; 0x28
   19e58:	cmp	r7, #0
   19e5c:	beq	19fa0 <__assert_fail@plt+0x73e4>
   19e60:	mov	r5, r1
   19e64:	mov	sl, r0
   19e68:	add	r8, sp, #4
   19e6c:	movw	r9, #2143	; 0x85f
   19e70:	movt	r9, #4
   19e74:	ldr	r0, [r7]
   19e78:	cmp	r0, #2
   19e7c:	bne	19f04 <__assert_fail@plt+0x7348>
   19e80:	ldrb	r0, [r7, #5]
   19e84:	cmp	r0, #0
   19e88:	beq	19f04 <__assert_fail@plt+0x7348>
   19e8c:	ldrb	r0, [r7, #4]
   19e90:	sub	r0, r0, #65	; 0x41
   19e94:	cmp	r0, #19
   19e98:	bhi	19fac <__assert_fail@plt+0x73f0>
   19e9c:	add	r1, pc, #0
   19ea0:	ldr	pc, [r1, r0, lsl #2]
   19ea4:	strdeq	r9, [r1], -r4
   19ea8:	andeq	r9, r1, ip, lsr #30
   19eac:	andeq	r9, r1, r4, ror #30
   19eb0:	andeq	r9, r1, ip, lsr #31
   19eb4:	andeq	r9, r1, ip, lsr #31
   19eb8:	andeq	r9, r1, ip, lsr #31
   19ebc:	andeq	r9, r1, ip, lsr #31
   19ec0:	andeq	r9, r1, ip, lsr #31
   19ec4:	andeq	r9, r1, ip, lsr #31
   19ec8:	andeq	r9, r1, ip, lsr #31
   19ecc:	andeq	r9, r1, ip, lsr #31
   19ed0:	andeq	r9, r1, ip, lsr #31
   19ed4:	andeq	r9, r1, ip, lsr #31
   19ed8:	andeq	r9, r1, ip, lsr #31
   19edc:	andeq	r9, r1, ip, lsr #31
   19ee0:	andeq	r9, r1, ip, lsr #31
   19ee4:	andeq	r9, r1, ip, lsr #31
   19ee8:	andeq	r9, r1, ip, lsr #31
   19eec:	andeq	r9, r1, ip, lsr #31
   19ef0:	andeq	r9, r1, ip, lsl pc
   19ef4:	mov	r0, r8
   19ef8:	mov	r1, r5
   19efc:	bl	2b07c <__assert_fail@plt+0x184c0>
   19f00:	b	19f70 <__assert_fail@plt+0x73b4>
   19f04:	mov	r0, r4
   19f08:	mov	r1, r7
   19f0c:	mov	r2, sl
   19f10:	mov	r3, r5
   19f14:	bl	1a4a4 <__assert_fail@plt+0x78e8>
   19f18:	b	19f94 <__assert_fail@plt+0x73d8>
   19f1c:	mov	r0, r8
   19f20:	mov	r1, r5
   19f24:	bl	2b094 <__assert_fail@plt+0x184d8>
   19f28:	b	19f70 <__assert_fail@plt+0x73b4>
   19f2c:	mov	r0, r8
   19f30:	mov	r1, r5
   19f34:	bl	2b0a0 <__assert_fail@plt+0x184e4>
   19f38:	ldmib	sp, {r0, r1}
   19f3c:	ldrb	r2, [r7, #5]
   19f40:	cmp	r2, #64	; 0x40
   19f44:	beq	19f78 <__assert_fail@plt+0x73bc>
   19f48:	ldr	r6, [r7, #8]
   19f4c:	cmp	r1, #0
   19f50:	bge	19f7c <__assert_fail@plt+0x73c0>
   19f54:	mov	r0, r4
   19f58:	mov	r1, r6
   19f5c:	mov	r2, r9
   19f60:	b	19f90 <__assert_fail@plt+0x73d4>
   19f64:	mov	r0, r8
   19f68:	mov	r1, r5
   19f6c:	bl	2b088 <__assert_fail@plt+0x184cc>
   19f70:	ldr	r0, [sp, #4]
   19f74:	ldr	r1, [sp, #8]
   19f78:	ldr	r6, [r7, #8]
   19f7c:	ldrb	r2, [r7, #5]
   19f80:	bl	1a228 <__assert_fail@plt+0x766c>
   19f84:	mov	r2, r0
   19f88:	mov	r0, r4
   19f8c:	mov	r1, r6
   19f90:	bl	1a1d4 <__assert_fail@plt+0x7618>
   19f94:	ldr	r7, [r7, #16]
   19f98:	cmp	r7, #0
   19f9c:	bne	19e74 <__assert_fail@plt+0x72b8>
   19fa0:	mov	r0, #1
   19fa4:	sub	sp, fp, #28
   19fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fac:	movw	r0, #64905	; 0xfd89
   19fb0:	movt	r0, #3
   19fb4:	movw	r1, #3945	; 0xf69
   19fb8:	movt	r1, #4
   19fbc:	movw	r3, #4449	; 0x1161
   19fc0:	movt	r3, #4
   19fc4:	movw	r2, #1304	; 0x518
   19fc8:	bl	12bbc <__assert_fail@plt>
   19fcc:	and	r0, r0, #248	; 0xf8
   19fd0:	sub	r0, r0, #48	; 0x30
   19fd4:	clz	r0, r0
   19fd8:	lsr	r0, r0, #5
   19fdc:	bx	lr
   19fe0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19fe4:	add	fp, sp, #24
   19fe8:	mov	r8, r1
   19fec:	mov	r5, r0
   19ff0:	mov	r7, #0
   19ff4:	mov	r4, #0
   19ff8:	ldrb	r6, [r5, r7]
   19ffc:	mov	r0, r6
   1a000:	bl	19fcc <__assert_fail@plt+0x7410>
   1a004:	cmp	r0, #0
   1a008:	beq	1a020 <__assert_fail@plt+0x7464>
   1a00c:	add	r0, r6, r4, lsl #3
   1a010:	sub	r4, r0, #48	; 0x30
   1a014:	add	r7, r7, #1
   1a018:	cmp	r7, #3
   1a01c:	bcc	19ff8 <__assert_fail@plt+0x743c>
   1a020:	sub	r0, r7, #1
   1a024:	str	r0, [r8]
   1a028:	uxtb	r0, r4
   1a02c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a030:	sub	r1, r0, #92	; 0x5c
   1a034:	mov	r0, #0
   1a038:	cmp	r1, #26
   1a03c:	bxhi	lr
   1a040:	add	r2, pc, #0
   1a044:	ldr	pc, [r2, r1, lsl #2]
   1a048:	strheq	sl, [r1], -r4
   1a04c:	strheq	sl, [r1], -r8
   1a050:	strheq	sl, [r1], -r8
   1a054:	strheq	sl, [r1], -r8
   1a058:	strheq	sl, [r1], -r8
   1a05c:	strheq	sl, [r1], -ip
   1a060:	andeq	sl, r1, r4, asr #1
   1a064:	strheq	sl, [r1], -r8
   1a068:	strheq	sl, [r1], -r8
   1a06c:	strheq	sl, [r1], -r8
   1a070:	andeq	sl, r1, ip, asr #1
   1a074:	strheq	sl, [r1], -r8
   1a078:	strheq	sl, [r1], -r8
   1a07c:	strheq	sl, [r1], -r8
   1a080:	strheq	sl, [r1], -r8
   1a084:	strheq	sl, [r1], -r8
   1a088:	strheq	sl, [r1], -r8
   1a08c:	strheq	sl, [r1], -r8
   1a090:	ldrdeq	sl, [r1], -r4
   1a094:	strheq	sl, [r1], -r8
   1a098:	strheq	sl, [r1], -r8
   1a09c:	strheq	sl, [r1], -r8
   1a0a0:	ldrdeq	sl, [r1], -ip
   1a0a4:	strheq	sl, [r1], -r8
   1a0a8:	andeq	sl, r1, r4, ror #1
   1a0ac:	strheq	sl, [r1], -r8
   1a0b0:	andeq	sl, r1, ip, ror #1
   1a0b4:	mov	r0, #92	; 0x5c
   1a0b8:	bx	lr
   1a0bc:	mov	r0, #7
   1a0c0:	bx	lr
   1a0c4:	mov	r0, #8
   1a0c8:	bx	lr
   1a0cc:	mov	r0, #12
   1a0d0:	bx	lr
   1a0d4:	mov	r0, #10
   1a0d8:	bx	lr
   1a0dc:	mov	r0, #13
   1a0e0:	bx	lr
   1a0e4:	mov	r0, #9
   1a0e8:	bx	lr
   1a0ec:	mov	r0, #11
   1a0f0:	bx	lr
   1a0f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a0f8:	add	fp, sp, #24
   1a0fc:	mov	r5, r0
   1a100:	add	r7, r0, #1
   1a104:	mov	r6, #0
   1a108:	movw	r8, #4517	; 0x11a5
   1a10c:	movt	r8, #4
   1a110:	mov	r4, r6
   1a114:	ldrb	r1, [r7, r6]
   1a118:	cmp	r1, #0
   1a11c:	beq	1a138 <__assert_fail@plt+0x757c>
   1a120:	add	r6, r4, #1
   1a124:	mov	r0, r8
   1a128:	mov	r2, #5
   1a12c:	bl	1297c <memchr@plt>
   1a130:	cmp	r0, #0
   1a134:	bne	1a110 <__assert_fail@plt+0x7554>
   1a138:	bl	12844 <__ctype_b_loc@plt>
   1a13c:	ldr	r0, [r0]
   1a140:	add	r1, r5, r4
   1a144:	ldrb	r1, [r1, #1]
   1a148:	add	r2, r0, r1, lsl #1
   1a14c:	ldrb	r2, [r2, #1]
   1a150:	add	r4, r4, #1
   1a154:	tst	r2, #8
   1a158:	bne	1a140 <__assert_fail@plt+0x7584>
   1a15c:	cmp	r1, #46	; 0x2e
   1a160:	bne	1a17c <__assert_fail@plt+0x75c0>
   1a164:	ldrb	r1, [r7, r4]
   1a168:	add	r1, r0, r1, lsl #1
   1a16c:	ldrb	r1, [r1, #1]
   1a170:	add	r4, r4, #1
   1a174:	tst	r1, #8
   1a178:	bne	1a164 <__assert_fail@plt+0x75a8>
   1a17c:	mov	r0, r4
   1a180:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a184:	push	{r4, sl, fp, lr}
   1a188:	add	fp, sp, #8
   1a18c:	mov	r4, r0
   1a190:	movw	r0, #4522	; 0x11aa
   1a194:	movt	r0, #4
   1a198:	mov	r1, r4
   1a19c:	mov	r2, #29
   1a1a0:	bl	1297c <memchr@plt>
   1a1a4:	mov	r1, r0
   1a1a8:	mov	r0, #1
   1a1ac:	cmp	r1, #0
   1a1b0:	popne	{r4, sl, fp, pc}
   1a1b4:	movw	r0, #4551	; 0x11c7
   1a1b8:	movt	r0, #4
   1a1bc:	mov	r1, r4
   1a1c0:	mov	r2, #5
   1a1c4:	bl	1297c <memchr@plt>
   1a1c8:	cmp	r0, #0
   1a1cc:	movwne	r0, #2
   1a1d0:	pop	{r4, sl, fp, pc}
   1a1d4:	sub	sp, sp, #8
   1a1d8:	push	{r4, sl, fp, lr}
   1a1dc:	add	fp, sp, #8
   1a1e0:	sub	sp, sp, #8
   1a1e4:	mov	r4, r0
   1a1e8:	str	r3, [fp, #12]
   1a1ec:	str	r2, [fp, #8]
   1a1f0:	add	r2, fp, #8
   1a1f4:	str	r2, [sp, #4]
   1a1f8:	ldr	r0, [r0, #4]
   1a1fc:	bl	12a24 <vfprintf@plt>
   1a200:	cmn	r0, #1
   1a204:	bgt	1a218 <__assert_fail@plt+0x765c>
   1a208:	bl	128d4 <__errno_location@plt>
   1a20c:	ldr	r0, [r0]
   1a210:	ldr	r1, [r4, #8]
   1a214:	bl	18778 <__assert_fail@plt+0x5bbc>
   1a218:	sub	sp, fp, #8
   1a21c:	pop	{r4, sl, fp, lr}
   1a220:	add	sp, sp, #8
   1a224:	bx	lr
   1a228:	push	{r4, r5, r6, r7, fp, lr}
   1a22c:	add	fp, sp, #16
   1a230:	sub	sp, sp, #72	; 0x48
   1a234:	mov	r5, r2
   1a238:	mov	r3, r1
   1a23c:	str	r1, [fp, #-20]	; 0xffffffec
   1a240:	str	r0, [fp, #-24]	; 0xffffffe8
   1a244:	cmp	r2, #43	; 0x2b
   1a248:	bne	1a26c <__assert_fail@plt+0x76b0>
   1a24c:	movw	r0, #5200	; 0x1450
   1a250:	movt	r0, #4
   1a254:	vldr	d16, [r0]
   1a258:	movw	r0, #9515	; 0x252b
   1a25c:	movt	r0, #84	; 0x54
   1a260:	str	r0, [sp, #24]
   1a264:	vstr	d16, [sp, #16]
   1a268:	b	1a2a0 <__assert_fail@plt+0x76e4>
   1a26c:	strb	r5, [sp, #17]
   1a270:	mov	r0, #37	; 0x25
   1a274:	strb	r0, [sp, #16]
   1a278:	mov	r6, #0
   1a27c:	strb	r6, [sp, #18]
   1a280:	sub	r0, r5, #64	; 0x40
   1a284:	cmp	r0, #24
   1a288:	bhi	1a300 <__assert_fail@plt+0x7744>
   1a28c:	mov	r1, #1
   1a290:	movw	r2, #1
   1a294:	movt	r2, #280	; 0x118
   1a298:	tst	r2, r1, lsl r0
   1a29c:	beq	1a300 <__assert_fail@plt+0x7744>
   1a2a0:	add	r0, sp, #32
   1a2a4:	movw	r2, #4556	; 0x11cc
   1a2a8:	movt	r2, #4
   1a2ac:	mov	r1, #32
   1a2b0:	bl	128ec <snprintf@plt>
   1a2b4:	cmp	r0, #32
   1a2b8:	bge	1a404 <__assert_fail@plt+0x7848>
   1a2bc:	mov	r4, r0
   1a2c0:	mov	r6, #1
   1a2c4:	cmp	r5, #64	; 0x40
   1a2c8:	beq	1a310 <__assert_fail@plt+0x7754>
   1a2cc:	sub	r0, fp, #24
   1a2d0:	bl	12820 <localtime@plt>
   1a2d4:	cmp	r0, #0
   1a2d8:	beq	1a310 <__assert_fail@plt+0x7754>
   1a2dc:	mov	r1, r0
   1a2e0:	add	r0, sp, #16
   1a2e4:	add	r2, sp, #32
   1a2e8:	mov	r3, r4
   1a2ec:	bl	1ac64 <__assert_fail@plt+0x80a8>
   1a2f0:	mov	r5, r0
   1a2f4:	cmp	r0, #0
   1a2f8:	bne	1a3f8 <__assert_fail@plt+0x783c>
   1a2fc:	b	1a310 <__assert_fail@plt+0x7754>
   1a300:	strb	r6, [sp, #32]
   1a304:	mov	r4, #0
   1a308:	cmp	r5, #64	; 0x40
   1a30c:	bne	1a2cc <__assert_fail@plt+0x7710>
   1a310:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a314:	mov	r1, #0
   1a318:	mov	r2, #1
   1a31c:	str	r2, [sp]
   1a320:	stmib	sp, {r1, r2}
   1a324:	str	r1, [sp, #12]
   1a328:	asr	r1, r0, #31
   1a32c:	adds	r2, r0, r0, asr #31
   1a330:	adc	r1, r1, r0, asr #31
   1a334:	eor	r1, r1, r0, asr #31
   1a338:	eor	r0, r2, r0, asr #31
   1a33c:	movw	r7, #21936	; 0x55b0
   1a340:	movt	r7, #5
   1a344:	add	r2, r7, #1
   1a348:	mov	r3, #0
   1a34c:	bl	23140 <__assert_fail@plt+0x10584>
   1a350:	cmp	r0, r7
   1a354:	bls	1a424 <__assert_fail@plt+0x7868>
   1a358:	mov	r5, r0
   1a35c:	movw	r0, #791	; 0x317
   1a360:	add	r0, r7, r0
   1a364:	cmp	r5, r0
   1a368:	bcs	1a444 <__assert_fail@plt+0x7888>
   1a36c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a370:	cmn	r0, #1
   1a374:	movle	r0, #45	; 0x2d
   1a378:	strble	r0, [r5, #-1]!
   1a37c:	cmp	r6, #0
   1a380:	beq	1a3f8 <__assert_fail@plt+0x783c>
   1a384:	sub	r6, r5, r7
   1a388:	mov	r0, r5
   1a38c:	bl	1288c <strlen@plt>
   1a390:	add	r0, r0, r6
   1a394:	movw	r1, #791	; 0x317
   1a398:	cmp	r0, r1
   1a39c:	bcs	1a464 <__assert_fail@plt+0x78a8>
   1a3a0:	movw	r1, #790	; 0x316
   1a3a4:	sub	r7, r1, r0
   1a3a8:	add	r6, sp, #32
   1a3ac:	mov	r0, r6
   1a3b0:	bl	1288c <strlen@plt>
   1a3b4:	cmp	r0, r7
   1a3b8:	bcc	1a3dc <__assert_fail@plt+0x7820>
   1a3bc:	str	r7, [sp]
   1a3c0:	str	r6, [sp, #4]
   1a3c4:	movw	r2, #4681	; 0x1249
   1a3c8:	movt	r2, #4
   1a3cc:	mov	r0, #0
   1a3d0:	mov	r1, #0
   1a3d4:	mov	r3, r4
   1a3d8:	bl	12790 <error@plt>
   1a3dc:	add	r0, sp, #32
   1a3e0:	bl	1288c <strlen@plt>
   1a3e4:	cmp	r0, r7
   1a3e8:	bcs	1a484 <__assert_fail@plt+0x78c8>
   1a3ec:	add	r1, sp, #32
   1a3f0:	mov	r0, r5
   1a3f4:	bl	1270c <strcat@plt>
   1a3f8:	mov	r0, r5
   1a3fc:	sub	sp, fp, #16
   1a400:	pop	{r4, r5, r6, r7, fp, pc}
   1a404:	movw	r0, #4564	; 0x11d4
   1a408:	movt	r0, #4
   1a40c:	movw	r1, #3945	; 0xf69
   1a410:	movt	r1, #4
   1a414:	movw	r3, #4590	; 0x11ee
   1a418:	movt	r3, #4
   1a41c:	movw	r2, #665	; 0x299
   1a420:	bl	12bbc <__assert_fail@plt>
   1a424:	movw	r0, #4630	; 0x1216
   1a428:	movt	r0, #4
   1a42c:	movw	r1, #3945	; 0xf69
   1a430:	movt	r1, #4
   1a434:	movw	r3, #4590	; 0x11ee
   1a438:	movt	r3, #4
   1a43c:	movw	r2, #697	; 0x2b9
   1a440:	bl	12bbc <__assert_fail@plt>
   1a444:	movw	r0, #4638	; 0x121e
   1a448:	movt	r0, #4
   1a44c:	movw	r1, #3945	; 0xf69
   1a450:	movt	r1, #4
   1a454:	movw	r3, #4590	; 0x11ee
   1a458:	movt	r3, #4
   1a45c:	movw	r2, #698	; 0x2ba
   1a460:	bl	12bbc <__assert_fail@plt>
   1a464:	movw	r0, #4663	; 0x1237
   1a468:	movt	r0, #4
   1a46c:	movw	r1, #3945	; 0xf69
   1a470:	movt	r1, #4
   1a474:	movw	r3, #4590	; 0x11ee
   1a478:	movt	r3, #4
   1a47c:	movw	r2, #711	; 0x2c7
   1a480:	bl	12bbc <__assert_fail@plt>
   1a484:	movw	r0, #4727	; 0x1277
   1a488:	movt	r0, #4
   1a48c:	movw	r1, #3945	; 0xf69
   1a490:	movt	r1, #4
   1a494:	movw	r3, #4590	; 0x11ee
   1a498:	movt	r3, #4
   1a49c:	mov	r2, #720	; 0x2d0
   1a4a0:	bl	12bbc <__assert_fail@plt>
   1a4a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a4a8:	add	fp, sp, #24
   1a4ac:	sub	sp, sp, #696	; 0x2b8
   1a4b0:	mov	r5, r1
   1a4b4:	mov	r4, r0
   1a4b8:	ldr	r0, [r1]
   1a4bc:	cmp	r0, #2
   1a4c0:	beq	1a50c <__assert_fail@plt+0x7950>
   1a4c4:	cmp	r0, #1
   1a4c8:	beq	1a4ec <__assert_fail@plt+0x7930>
   1a4cc:	cmp	r0, #0
   1a4d0:	bne	1a504 <__assert_fail@plt+0x7948>
   1a4d4:	ldr	r0, [r5, #8]
   1a4d8:	ldr	r1, [r5, #12]
   1a4dc:	mov	r2, r4
   1a4e0:	bl	1af9c <__assert_fail@plt+0x83e0>
   1a4e4:	sub	sp, fp, #24
   1a4e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a4ec:	ldr	r0, [r5, #8]
   1a4f0:	ldr	r1, [r5, #12]
   1a4f4:	mov	r2, r4
   1a4f8:	bl	1af9c <__assert_fail@plt+0x83e0>
   1a4fc:	mov	r0, r4
   1a500:	bl	1afd8 <__assert_fail@plt+0x841c>
   1a504:	sub	sp, fp, #24
   1a508:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a50c:	ldrb	r0, [r5, #4]
   1a510:	cmp	r0, #121	; 0x79
   1a514:	bhi	1a504 <__assert_fail@plt+0x7948>
   1a518:	mov	r7, r3
   1a51c:	mov	r6, r2
   1a520:	add	r1, pc, #0
   1a524:	ldr	pc, [r1, r0, lsl #2]
   1a528:	andeq	sl, r1, r8, lsr ip
   1a52c:	andeq	sl, r1, r4, lsl #10
   1a530:	andeq	sl, r1, r4, lsl #10
   1a534:	andeq	sl, r1, r4, lsl #10
   1a538:	andeq	sl, r1, r4, lsl #10
   1a53c:	andeq	sl, r1, r4, lsl #10
   1a540:	andeq	sl, r1, r4, lsl #10
   1a544:	andeq	sl, r1, r4, lsl #10
   1a548:	andeq	sl, r1, r4, lsl #10
   1a54c:	andeq	sl, r1, r4, lsl #10
   1a550:	andeq	sl, r1, r4, lsl #10
   1a554:	andeq	sl, r1, r4, lsl #10
   1a558:	andeq	sl, r1, r4, lsl #10
   1a55c:	andeq	sl, r1, r4, lsl #10
   1a560:	andeq	sl, r1, r4, lsl #10
   1a564:	andeq	sl, r1, r4, lsl #10
   1a568:	andeq	sl, r1, r4, lsl #10
   1a56c:	andeq	sl, r1, r4, lsl #10
   1a570:	andeq	sl, r1, r4, lsl #10
   1a574:	andeq	sl, r1, r4, lsl #10
   1a578:	andeq	sl, r1, r4, lsl #10
   1a57c:	andeq	sl, r1, r4, lsl #10
   1a580:	andeq	sl, r1, r4, lsl #10
   1a584:	andeq	sl, r1, r4, lsl #10
   1a588:	andeq	sl, r1, r4, lsl #10
   1a58c:	andeq	sl, r1, r4, lsl #10
   1a590:	andeq	sl, r1, r4, lsl #10
   1a594:	andeq	sl, r1, r4, lsl #10
   1a598:	andeq	sl, r1, r4, lsl #10
   1a59c:	andeq	sl, r1, r4, lsl #10
   1a5a0:	andeq	sl, r1, r4, lsl #10
   1a5a4:	andeq	sl, r1, r4, lsl #10
   1a5a8:	andeq	sl, r1, r4, lsl #10
   1a5ac:	andeq	sl, r1, r4, lsl #10
   1a5b0:	andeq	sl, r1, r4, lsl #10
   1a5b4:	andeq	sl, r1, r4, lsl #10
   1a5b8:	andeq	sl, r1, r4, lsl #10
   1a5bc:	ldrdeq	sl, [r1], -r4
   1a5c0:	andeq	sl, r1, r4, lsl #10
   1a5c4:	andeq	sl, r1, r4, lsl #10
   1a5c8:	andeq	sl, r1, r4, lsl #10
   1a5cc:	andeq	sl, r1, r4, lsl #10
   1a5d0:	andeq	sl, r1, r4, lsl #10
   1a5d4:	andeq	sl, r1, r4, lsl #10
   1a5d8:	andeq	sl, r1, r4, lsl #10
   1a5dc:	andeq	sl, r1, r4, lsl #10
   1a5e0:	andeq	sl, r1, r4, lsl #10
   1a5e4:	andeq	sl, r1, r4, lsl #10
   1a5e8:	andeq	sl, r1, r4, lsl #10
   1a5ec:	andeq	sl, r1, r4, lsl #10
   1a5f0:	andeq	sl, r1, r4, lsl #10
   1a5f4:	andeq	sl, r1, r4, lsl #10
   1a5f8:	andeq	sl, r1, r4, lsl #10
   1a5fc:	andeq	sl, r1, r4, lsl #10
   1a600:	andeq	sl, r1, r4, lsl #10
   1a604:	andeq	sl, r1, r4, lsl #10
   1a608:	andeq	sl, r1, r4, lsl #10
   1a60c:	andeq	sl, r1, r4, lsl #10
   1a610:	andeq	sl, r1, r4, lsl #10
   1a614:	andeq	sl, r1, r4, lsl #10
   1a618:	andeq	sl, r1, r4, lsl #10
   1a61c:	andeq	sl, r1, r4, lsl #10
   1a620:	andeq	sl, r1, r4, lsl #10
   1a624:	andeq	sl, r1, r4, lsl #10
   1a628:	andeq	sl, r1, r4, lsl #10
   1a62c:	andeq	sl, r1, r4, lsl #10
   1a630:	andeq	sl, r1, r4, lsl #10
   1a634:	andeq	sl, r1, r4, lsl #10
   1a638:	andeq	sl, r1, r0, lsl r7
   1a63c:	andeq	sl, r1, r4, lsl #10
   1a640:	muleq	r1, r8, r8
   1a644:	andeq	sl, r1, r8, ror r9
   1a648:			; <UNDEFINED> instruction: 0x0001a8b8
   1a64c:	andeq	sl, r1, r4, lsl #10
   1a650:	andeq	sl, r1, r4, lsl #10
   1a654:	andeq	sl, r1, r4, lsl #10
   1a658:	andeq	sl, r1, r4, lsl #10
   1a65c:	andeq	sl, r1, r0, lsl #16
   1a660:	andeq	sl, r1, r4, lsl #10
   1a664:	andeq	sl, r1, r4, lsl #10
   1a668:	andeq	sl, r1, r4, lsl #19
   1a66c:	andeq	sl, r1, r4, lsl #10
   1a670:	andeq	sl, r1, r4, lsl #10
   1a674:	andeq	sl, r1, r8, lsr #16
   1a678:	andeq	sl, r1, r4, lsl #10
   1a67c:	muleq	r1, ip, sl
   1a680:	andeq	sl, r1, r4, lsl #10
   1a684:	andeq	sl, r1, r4, lsl #10
   1a688:	andeq	sl, r1, r4, lsl #10
   1a68c:	strdeq	sl, [r1], -ip
   1a690:	andeq	sl, r1, ip, ror r7
   1a694:	andeq	sl, r1, r4, lsl #10
   1a698:	andeq	sl, r1, r4, lsl #10
   1a69c:	andeq	sl, r1, r4, lsl #10
   1a6a0:	andeq	sl, r1, r4, lsl #10
   1a6a4:	andeq	sl, r1, r4, lsl #10
   1a6a8:	andeq	sl, r1, r4, lsl #10
   1a6ac:	andeq	sl, r1, r8, asr #15
   1a6b0:	andeq	sl, r1, ip, lsr #19
   1a6b4:	andeq	sl, r1, ip, asr #16
   1a6b8:	andeq	sl, r1, ip, ror #16
   1a6bc:	andeq	sl, r1, r4, lsl #10
   1a6c0:	andeq	sl, r1, r8, asr r9
   1a6c4:	andeq	sl, r1, r8, ror #18
   1a6c8:	andeq	sl, r1, ip, ror #19
   1a6cc:	andeq	sl, r1, r8, ror r8
   1a6d0:	andeq	sl, r1, r4, lsl #10
   1a6d4:	ldrdeq	sl, [r1], -r0
   1a6d8:	andeq	sl, r1, ip, lsl r7
   1a6dc:	andeq	sl, r1, r4, ror #15
   1a6e0:	strdeq	sl, [r1], -r4
   1a6e4:	andeq	sl, r1, r4, lsl #10
   1a6e8:	andeq	sl, r1, r8, ror #22
   1a6ec:	andeq	sl, r1, r4, lsl #10
   1a6f0:	andeq	sl, r1, r4, lsl #10
   1a6f4:	andeq	sl, r1, r4, lsl #17
   1a6f8:	andeq	sl, r1, r0, ror #14
   1a6fc:	andeq	sl, r1, ip, ror #20
   1a700:	andeq	sl, r1, r4, lsl #10
   1a704:	andeq	sl, r1, r4, lsl #10
   1a708:	andeq	sl, r1, r4, lsl #10
   1a70c:	andeq	sl, r1, r0, ror #21
   1a710:	ldr	r5, [r5, #8]
   1a714:	ldrd	r0, [r7]
   1a718:	b	1a88c <__assert_fail@plt+0x7cd0>
   1a71c:	ldr	r0, [r7, #16]
   1a720:	and	r0, r0, #61440	; 0xf000
   1a724:	cmp	r0, #40960	; 0xa000
   1a728:	bne	1abac <__assert_fail@plt+0x7ff0>
   1a72c:	movw	r8, #24152	; 0x5e58
   1a730:	movt	r8, #5
   1a734:	ldr	r1, [r8, #12]
   1a738:	ldr	r0, [r8, #16]
   1a73c:	bl	21914 <__assert_fail@plt+0xed58>
   1a740:	cmp	r0, #0
   1a744:	beq	1ab94 <__assert_fail@plt+0x7fd8>
   1a748:	mov	r7, r0
   1a74c:	ldr	r1, [r5, #8]
   1a750:	mov	r0, r4
   1a754:	mov	r2, r7
   1a758:	bl	1b22c <__assert_fail@plt+0x8670>
   1a75c:	b	1abc4 <__assert_fail@plt+0x8008>
   1a760:	ldr	r5, [r5, #8]
   1a764:	add	r0, sp, #16
   1a768:	mov	r1, r7
   1a76c:	bl	2b094 <__assert_fail@plt+0x184d8>
   1a770:	ldr	r0, [sp, #16]
   1a774:	ldr	r1, [sp, #20]
   1a778:	b	1a864 <__assert_fail@plt+0x7ca8>
   1a77c:	movw	r7, #24152	; 0x5e58
   1a780:	movt	r7, #5
   1a784:	ldr	r1, [r7, #12]
   1a788:	ldr	r0, [r7, #16]
   1a78c:	movw	r2, #24196	; 0x5e84
   1a790:	movt	r2, #5
   1a794:	ldr	r3, [r2, #64]	; 0x40
   1a798:	add	r2, sp, #40	; 0x28
   1a79c:	blx	r3
   1a7a0:	ldr	r1, [r5, #8]
   1a7a4:	cmn	r0, #1
   1a7a8:	ble	1ab00 <__assert_fail@plt+0x7f44>
   1a7ac:	ldr	r2, [sp, #40]	; 0x28
   1a7b0:	mov	r0, r4
   1a7b4:	bl	1a1d4 <__assert_fail@plt+0x7618>
   1a7b8:	ldr	r0, [sp, #40]	; 0x28
   1a7bc:	bl	12acc <freecon@plt>
   1a7c0:	sub	sp, fp, #24
   1a7c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a7c8:	ldr	r5, [r5, #8]
   1a7cc:	add	r0, sp, #32
   1a7d0:	mov	r1, r7
   1a7d4:	bl	2b07c <__assert_fail@plt+0x184c0>
   1a7d8:	ldr	r0, [sp, #32]
   1a7dc:	ldr	r1, [sp, #36]	; 0x24
   1a7e0:	b	1a864 <__assert_fail@plt+0x7ca8>
   1a7e4:	ldr	r1, [r5, #8]
   1a7e8:	ldr	r2, [r7, #16]
   1a7ec:	bfc	r2, #12, #20
   1a7f0:	b	1aa94 <__assert_fail@plt+0x7ed8>
   1a7f4:	ldr	r5, [r5, #8]
   1a7f8:	ldr	r0, [r7, #20]
   1a7fc:	b	1aaa4 <__assert_fail@plt+0x7ee8>
   1a800:	add	r6, sp, #40	; 0x28
   1a804:	mov	r0, r7
   1a808:	mov	r1, r6
   1a80c:	bl	221ac <__assert_fail@plt+0xf5f0>
   1a810:	mov	r0, #0
   1a814:	strb	r0, [sp, #50]	; 0x32
   1a818:	ldr	r1, [r5, #8]
   1a81c:	mov	r0, r4
   1a820:	mov	r2, r6
   1a824:	b	1aad4 <__assert_fail@plt+0x7f18>
   1a828:	ldr	r5, [r5, #8]
   1a82c:	mov	r0, r7
   1a830:	bl	1b280 <__assert_fail@plt+0x86c4>
   1a834:	vmov	r2, r3, d0
   1a838:	mov	r0, r4
   1a83c:	mov	r1, r5
   1a840:	bl	1a1d4 <__assert_fail@plt+0x7618>
   1a844:	sub	sp, fp, #24
   1a848:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a84c:	ldr	r5, [r5, #8]
   1a850:	add	r0, sp, #24
   1a854:	mov	r1, r7
   1a858:	bl	2b088 <__assert_fail@plt+0x184cc>
   1a85c:	ldr	r0, [sp, #24]
   1a860:	ldr	r1, [sp, #28]
   1a864:	bl	1b008 <__assert_fail@plt+0x844c>
   1a868:	b	1aac8 <__assert_fail@plt+0x7f0c>
   1a86c:	movw	r0, #24152	; 0x5e58
   1a870:	movt	r0, #5
   1a874:	b	1aa8c <__assert_fail@plt+0x7ed0>
   1a878:	ldr	r5, [r5, #8]
   1a87c:	ldrd	r0, [r7, #96]	; 0x60
   1a880:	b	1a88c <__assert_fail@plt+0x7cd0>
   1a884:	ldr	r5, [r5, #8]
   1a888:	ldrd	r0, [r7, #48]	; 0x30
   1a88c:	mov	r2, #0
   1a890:	mov	r3, #1
   1a894:	b	1a9bc <__assert_fail@plt+0x7e00>
   1a898:	ldr	r5, [r5, #8]
   1a89c:	mov	r0, r7
   1a8a0:	mov	r1, r6
   1a8a4:	bl	1b330 <__assert_fail@plt+0x8774>
   1a8a8:	mov	r2, r0
   1a8ac:	mov	r0, r4
   1a8b0:	mov	r1, r5
   1a8b4:	b	1ab74 <__assert_fail@plt+0x7fb8>
   1a8b8:	movw	r8, #24152	; 0x5e58
   1a8bc:	movt	r8, #5
   1a8c0:	ldr	r0, [r8, #20]
   1a8c4:	add	r0, r0, #1
   1a8c8:	bl	2b5cc <__assert_fail@plt+0x18a10>
   1a8cc:	mov	r7, r0
   1a8d0:	ldr	r8, [r8, #20]
   1a8d4:	mov	r1, r6
   1a8d8:	mov	r2, r8
   1a8dc:	bl	125c8 <memcpy@plt>
   1a8e0:	mov	r0, #0
   1a8e4:	strb	r0, [r7, r8]
   1a8e8:	ldr	r1, [r5, #8]
   1a8ec:	mov	r0, r4
   1a8f0:	mov	r2, r7
   1a8f4:	bl	1a1d4 <__assert_fail@plt+0x7618>
   1a8f8:	b	1abc4 <__assert_fail@plt+0x8008>
   1a8fc:	ldr	r0, [r7, #16]
   1a900:	and	r0, r0, #61440	; 0xf000
   1a904:	cmp	r0, #40960	; 0xa000
   1a908:	bne	1aaf4 <__assert_fail@plt+0x7f38>
   1a90c:	movw	r0, #24152	; 0x5e58
   1a910:	movt	r0, #5
   1a914:	ldr	r1, [r0, #12]
   1a918:	ldr	r0, [r0, #16]
   1a91c:	add	r2, sp, #40	; 0x28
   1a920:	mov	r3, #0
   1a924:	bl	3e914 <__assert_fail@plt+0x2bd58>
   1a928:	cmp	r0, #0
   1a92c:	beq	1abd4 <__assert_fail@plt+0x8018>
   1a930:	bl	128d4 <__errno_location@plt>
   1a934:	mov	r7, r0
   1a938:	ldr	r0, [r0]
   1a93c:	cmp	r0, #20
   1a940:	cmpne	r0, #2
   1a944:	bne	1abe0 <__assert_fail@plt+0x8024>
   1a948:	ldr	r1, [r5, #8]
   1a94c:	movw	r2, #5115	; 0x13fb
   1a950:	movt	r2, #4
   1a954:	b	1aa94 <__assert_fail@plt+0x7ed8>
   1a958:	mov	r0, r6
   1a95c:	bl	21e98 <__assert_fail@plt+0xf2dc>
   1a960:	mov	r6, r0
   1a964:	b	1aa54 <__assert_fail@plt+0x7e98>
   1a968:	ldr	r0, [r7, #28]
   1a96c:	bl	12b98 <getgrgid@plt>
   1a970:	cmp	r0, #0
   1a974:	bne	1aa7c <__assert_fail@plt+0x7ec0>
   1a978:	ldr	r5, [r5, #8]
   1a97c:	ldr	r0, [r7, #28]
   1a980:	b	1aaa4 <__assert_fail@plt+0x7ee8>
   1a984:	movw	r0, #24152	; 0x5e58
   1a988:	movt	r0, #5
   1a98c:	ldr	r1, [r0]
   1a990:	cmp	r1, #1
   1a994:	blt	1ab60 <__assert_fail@plt+0x7fa4>
   1a998:	ldr	r0, [r0, #20]
   1a99c:	ldrb	r0, [r6, r0]!
   1a9a0:	cmp	r0, #47	; 0x2f
   1a9a4:	addeq	r6, r6, #1
   1a9a8:	b	1ab68 <__assert_fail@plt+0x7fac>
   1a9ac:	ldr	r5, [r5, #8]
   1a9b0:	ldrd	r0, [r7, #64]	; 0x40
   1a9b4:	mov	r2, #0
   1a9b8:	mov	r3, #512	; 0x200
   1a9bc:	str	r3, [sp]
   1a9c0:	stmib	sp, {r2, r3}
   1a9c4:	str	r2, [sp, #12]
   1a9c8:	add	r2, sp, #40	; 0x28
   1a9cc:	b	1aac0 <__assert_fail@plt+0x7f04>
   1a9d0:	ldr	r5, [r5, #8]
   1a9d4:	ldrd	r0, [r7, #64]	; 0x40
   1a9d8:	mov	r2, #0
   1a9dc:	mov	r3, #1024	; 0x400
   1a9e0:	mov	r7, #512	; 0x200
   1a9e4:	str	r7, [sp]
   1a9e8:	b	1a9c0 <__assert_fail@plt+0x7e04>
   1a9ec:	mov	r0, r6
   1a9f0:	bl	2b95c <__assert_fail@plt+0x18da0>
   1a9f4:	mov	r6, r0
   1a9f8:	bl	1288c <strlen@plt>
   1a9fc:	add	r0, r6, r0
   1aa00:	sub	r1, r0, #1
   1aa04:	mov	r0, r1
   1aa08:	cmp	r6, r1
   1aa0c:	bhi	1aa20 <__assert_fail@plt+0x7e64>
   1aa10:	mov	r1, r0
   1aa14:	ldrb	r2, [r1], #-1
   1aa18:	cmp	r2, #47	; 0x2f
   1aa1c:	beq	1aa04 <__assert_fail@plt+0x7e48>
   1aa20:	cmp	r6, r0
   1aa24:	bcs	1aa38 <__assert_fail@plt+0x7e7c>
   1aa28:	ldrb	r1, [r0, #1]
   1aa2c:	cmp	r1, #47	; 0x2f
   1aa30:	moveq	r1, #0
   1aa34:	strbeq	r1, [r0, #1]
   1aa38:	mov	r0, r6
   1aa3c:	mov	r1, #47	; 0x2f
   1aa40:	bl	12a18 <strrchr@plt>
   1aa44:	cmp	r0, #0
   1aa48:	beq	1ab80 <__assert_fail@plt+0x7fc4>
   1aa4c:	mov	r1, #0
   1aa50:	strb	r1, [r0]
   1aa54:	ldr	r1, [r5, #8]
   1aa58:	mov	r0, r4
   1aa5c:	mov	r2, r6
   1aa60:	bl	1b22c <__assert_fail@plt+0x8670>
   1aa64:	mov	r0, r6
   1aa68:	b	1abc8 <__assert_fail@plt+0x800c>
   1aa6c:	ldr	r0, [r7, #24]
   1aa70:	bl	124e4 <getpwuid@plt>
   1aa74:	cmp	r0, #0
   1aa78:	beq	1aa9c <__assert_fail@plt+0x7ee0>
   1aa7c:	ldr	r1, [r5, #8]
   1aa80:	ldr	r2, [r5, #12]
   1aa84:	mov	r3, #115	; 0x73
   1aa88:	strb	r3, [r1, r2]
   1aa8c:	ldr	r2, [r0]
   1aa90:	ldr	r1, [r5, #8]
   1aa94:	mov	r0, r4
   1aa98:	b	1aad4 <__assert_fail@plt+0x7f18>
   1aa9c:	ldr	r5, [r5, #8]
   1aaa0:	ldr	r0, [r7, #24]
   1aaa4:	mov	r1, #0
   1aaa8:	mov	r2, #1
   1aaac:	str	r2, [sp]
   1aab0:	stmib	sp, {r1, r2}
   1aab4:	str	r1, [sp, #12]
   1aab8:	add	r2, sp, #40	; 0x28
   1aabc:	mov	r1, #0
   1aac0:	mov	r3, #0
   1aac4:	bl	23140 <__assert_fail@plt+0x10584>
   1aac8:	mov	r2, r0
   1aacc:	mov	r0, r4
   1aad0:	mov	r1, r5
   1aad4:	bl	1a1d4 <__assert_fail@plt+0x7618>
   1aad8:	sub	sp, fp, #24
   1aadc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1aae0:	ldr	r5, [r5, #8]
   1aae4:	ldr	r0, [r7, #16]
   1aae8:	and	r0, r0, #61440	; 0xf000
   1aaec:	bl	1b308 <__assert_fail@plt+0x874c>
   1aaf0:	b	1aac8 <__assert_fail@plt+0x7f0c>
   1aaf4:	ldr	r5, [r5, #8]
   1aaf8:	bl	1b308 <__assert_fail@plt+0x874c>
   1aafc:	b	1aac8 <__assert_fail@plt+0x7f0c>
   1ab00:	movw	r2, #2143	; 0x85f
   1ab04:	movt	r2, #4
   1ab08:	mov	r0, r4
   1ab0c:	bl	1a1d4 <__assert_fail@plt+0x7618>
   1ab10:	bl	128d4 <__errno_location@plt>
   1ab14:	ldr	r4, [r0]
   1ab18:	movw	r1, #61881	; 0xf1b9
   1ab1c:	movt	r1, #3
   1ab20:	mov	r0, #0
   1ab24:	mov	r2, #5
   1ab28:	bl	1264c <dcgettext@plt>
   1ab2c:	mov	r5, r0
   1ab30:	mov	r0, #0
   1ab34:	mov	r1, r6
   1ab38:	bl	19314 <__assert_fail@plt+0x6758>
   1ab3c:	mov	r3, r0
   1ab40:	mov	r0, #0
   1ab44:	mov	r1, r4
   1ab48:	mov	r2, r5
   1ab4c:	bl	12790 <error@plt>
   1ab50:	mov	r0, #1
   1ab54:	str	r0, [r7, #28]
   1ab58:	sub	sp, fp, #24
   1ab5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ab60:	movw	r6, #2143	; 0x85f
   1ab64:	movt	r6, #4
   1ab68:	ldr	r1, [r5, #8]
   1ab6c:	mov	r0, r4
   1ab70:	mov	r2, r6
   1ab74:	bl	1b22c <__assert_fail@plt+0x8670>
   1ab78:	sub	sp, fp, #24
   1ab7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ab80:	ldr	r1, [r5, #8]
   1ab84:	movw	r2, #64308	; 0xfb34
   1ab88:	movt	r2, #3
   1ab8c:	mov	r0, r4
   1ab90:	b	1aa60 <__assert_fail@plt+0x7ea4>
   1ab94:	bl	128d4 <__errno_location@plt>
   1ab98:	ldr	r0, [r0]
   1ab9c:	mov	r1, r6
   1aba0:	bl	18304 <__assert_fail@plt+0x5748>
   1aba4:	mov	r0, #1
   1aba8:	str	r0, [r8, #28]
   1abac:	ldr	r1, [r5, #8]
   1abb0:	movw	r2, #2143	; 0x85f
   1abb4:	movt	r2, #4
   1abb8:	mov	r0, r4
   1abbc:	bl	1b22c <__assert_fail@plt+0x8670>
   1abc0:	mov	r7, #0
   1abc4:	mov	r0, r7
   1abc8:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   1abcc:	sub	sp, fp, #24
   1abd0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1abd4:	ldr	r5, [r5, #8]
   1abd8:	ldr	r0, [sp, #56]	; 0x38
   1abdc:	b	1aae8 <__assert_fail@plt+0x7f2c>
   1abe0:	ldr	r1, [r5, #8]
   1abe4:	cmp	r0, #40	; 0x28
   1abe8:	bne	1abf8 <__assert_fail@plt+0x803c>
   1abec:	movw	r2, #2500	; 0x9c4
   1abf0:	movt	r2, #4
   1abf4:	b	1aa94 <__assert_fail@plt+0x7ed8>
   1abf8:	movw	r2, #7022	; 0x1b6e
   1abfc:	movt	r2, #4
   1ac00:	mov	r0, r4
   1ac04:	bl	1a1d4 <__assert_fail@plt+0x7618>
   1ac08:	ldr	r4, [r7]
   1ac0c:	mov	r0, #0
   1ac10:	mov	r1, r6
   1ac14:	bl	19314 <__assert_fail@plt+0x6758>
   1ac18:	mov	r3, r0
   1ac1c:	movw	r2, #19439	; 0x4bef
   1ac20:	movt	r2, #4
   1ac24:	mov	r0, #0
   1ac28:	mov	r1, r4
   1ac2c:	bl	12790 <error@plt>
   1ac30:	sub	sp, fp, #24
   1ac34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ac38:	movw	r1, #4230	; 0x1086
   1ac3c:	movt	r1, #4
   1ac40:	mov	r0, #0
   1ac44:	mov	r2, #5
   1ac48:	bl	1264c <dcgettext@plt>
   1ac4c:	mov	r2, r0
   1ac50:	movw	r3, #4549	; 0x11c5
   1ac54:	movt	r3, #4
   1ac58:	mov	r0, #1
   1ac5c:	mov	r1, #0
   1ac60:	bl	12790 <error@plt>
   1ac64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac68:	add	fp, sp, #28
   1ac6c:	sub	sp, sp, #68	; 0x44
   1ac70:	mov	r9, r3
   1ac74:	str	r2, [sp, #8]
   1ac78:	mov	r7, r1
   1ac7c:	mov	r4, r0
   1ac80:	bl	1288c <strlen@plt>
   1ac84:	add	r0, r0, #2
   1ac88:	bl	2b5cc <__assert_fail@plt+0x18a10>
   1ac8c:	mov	r6, r0
   1ac90:	mov	r0, #95	; 0x5f
   1ac94:	mov	r5, r6
   1ac98:	strb	r0, [r5], #1
   1ac9c:	mov	r0, r4
   1aca0:	bl	1288c <strlen@plt>
   1aca4:	add	r2, r0, #1
   1aca8:	mov	r0, r5
   1acac:	mov	r1, r4
   1acb0:	bl	125c8 <memcpy@plt>
   1acb4:	add	r0, r7, #16
   1acb8:	mov	r1, #28
   1acbc:	mov	r2, r7
   1acc0:	vld1.32	{d16-d17}, [r2], r1
   1acc4:	add	r3, sp, #24
   1acc8:	vld1.32	{d18-d19}, [r0]
   1accc:	add	r0, r3, #16
   1acd0:	vld1.32	{d20-d21}, [r2]
   1acd4:	vst1.64	{d18-d19}, [r0]
   1acd8:	vst1.64	{d16-d17}, [r3], r1
   1acdc:	vst1.32	{d20-d21}, [r3]
   1ace0:	ldr	r0, [sp, #24]
   1ace4:	mov	r1, #11
   1ace8:	cmp	r0, #10
   1acec:	mvngt	r1, #10
   1acf0:	add	r0, r1, r0
   1acf4:	str	r0, [sp, #24]
   1acf8:	movw	r8, #22728	; 0x58c8
   1acfc:	movt	r8, #5
   1ad00:	ldr	r0, [r8]
   1ad04:	cmp	r0, #0
   1ad08:	bne	1ad28 <__assert_fail@plt+0x816c>
   1ad0c:	movw	r0, #22732	; 0x58cc
   1ad10:	movt	r0, #5
   1ad14:	mov	r1, #1
   1ad18:	str	r1, [r0]
   1ad1c:	mov	r0, #1
   1ad20:	bl	2b5cc <__assert_fail@plt+0x18a10>
   1ad24:	str	r0, [r8]
   1ad28:	movw	r4, #22732	; 0x58cc
   1ad2c:	movt	r4, #5
   1ad30:	ldr	r1, [r4]
   1ad34:	ldr	r0, [r8]
   1ad38:	mov	r2, r6
   1ad3c:	mov	r3, r7
   1ad40:	bl	12808 <strftime@plt>
   1ad44:	cmp	r0, #0
   1ad48:	beq	1ad5c <__assert_fail@plt+0x81a0>
   1ad4c:	mov	r5, r0
   1ad50:	ldr	r0, [r4]
   1ad54:	cmp	r5, r0
   1ad58:	bcc	1ad94 <__assert_fail@plt+0x81d8>
   1ad5c:	ldr	r0, [r8]
   1ad60:	mov	r1, r4
   1ad64:	mov	r2, #1
   1ad68:	bl	2b69c <__assert_fail@plt+0x18ae0>
   1ad6c:	str	r0, [r8]
   1ad70:	ldr	r1, [r4]
   1ad74:	mov	r2, r6
   1ad78:	mov	r3, r7
   1ad7c:	bl	12808 <strftime@plt>
   1ad80:	mov	r5, r0
   1ad84:	ldr	r0, [r4]
   1ad88:	cmp	r5, #0
   1ad8c:	bne	1ad54 <__assert_fail@plt+0x8198>
   1ad90:	b	1ad5c <__assert_fail@plt+0x81a0>
   1ad94:	mov	r0, #0
   1ad98:	str	r0, [sp, #20]
   1ad9c:	str	r0, [sp, #16]
   1ada0:	str	r9, [sp, #12]
   1ada4:	add	r0, r9, r5
   1ada8:	add	r7, r0, #1
   1adac:	ldr	r0, [r8]
   1adb0:	mov	r1, r7
   1adb4:	bl	2b60c <__assert_fail@plt+0x18a50>
   1adb8:	str	r0, [r8]
   1adbc:	str	r7, [r4]
   1adc0:	mov	r0, r7
   1adc4:	bl	2b5cc <__assert_fail@plt+0x18a10>
   1adc8:	mov	sl, r0
   1adcc:	ldr	r1, [r4]
   1add0:	add	r3, sp, #24
   1add4:	mov	r2, r6
   1add8:	bl	12808 <strftime@plt>
   1addc:	ldr	r4, [r8]
   1ade0:	add	r2, sp, #20
   1ade4:	add	r3, sp, #16
   1ade8:	mov	r0, r4
   1adec:	mov	r1, sl
   1adf0:	bl	1aeb4 <__assert_fail@plt+0x82f8>
   1adf4:	cmp	r0, #0
   1adf8:	beq	1ae74 <__assert_fail@plt+0x82b8>
   1adfc:	ldr	r9, [sp, #16]
   1ae00:	cmp	r9, #2
   1ae04:	bne	1ae74 <__assert_fail@plt+0x82b8>
   1ae08:	bl	12844 <__ctype_b_loc@plt>
   1ae0c:	ldr	ip, [sp, #20]
   1ae10:	add	r2, ip, r9
   1ae14:	mov	r1, r4
   1ae18:	ldrb	r3, [r1, r2]!
   1ae1c:	ldr	r0, [r0]
   1ae20:	add	r0, r0, r3, lsl #1
   1ae24:	ldrb	r0, [r0, #1]
   1ae28:	tst	r0, #8
   1ae2c:	bne	1ae74 <__assert_fail@plt+0x82b8>
   1ae30:	str	ip, [sp, #4]
   1ae34:	ldr	r3, [sp, #12]
   1ae38:	add	r0, r2, r3
   1ae3c:	sub	r2, r5, r2
   1ae40:	add	r2, r2, #1
   1ae44:	add	r0, r0, r2
   1ae48:	cmp	r0, r7
   1ae4c:	bne	1ae94 <__assert_fail@plt+0x82d8>
   1ae50:	add	r0, r1, r3
   1ae54:	mov	r5, r3
   1ae58:	bl	1255c <memmove@plt>
   1ae5c:	ldr	r0, [sp, #4]
   1ae60:	add	r0, r4, r0
   1ae64:	add	r0, r0, r9
   1ae68:	ldr	r1, [sp, #8]
   1ae6c:	mov	r2, r5
   1ae70:	bl	125c8 <memcpy@plt>
   1ae74:	mov	r0, r6
   1ae78:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   1ae7c:	mov	r0, sl
   1ae80:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   1ae84:	ldr	r0, [r8]
   1ae88:	add	r0, r0, #1
   1ae8c:	sub	sp, fp, #28
   1ae90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae94:	movw	r0, #4755	; 0x1293
   1ae98:	movt	r0, #4
   1ae9c:	movw	r1, #3945	; 0xf69
   1aea0:	movt	r1, #4
   1aea4:	movw	r3, #4806	; 0x12c6
   1aea8:	movt	r3, #4
   1aeac:	movw	r2, #549	; 0x225
   1aeb0:	bl	12bbc <__assert_fail@plt>
   1aeb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aeb8:	add	fp, sp, #28
   1aebc:	push	{r2}		; (str r2, [sp, #-4]!)
   1aec0:	mov	r6, r1
   1aec4:	mov	r1, r0
   1aec8:	ldrb	r2, [r0]
   1aecc:	ldrb	r0, [r6]
   1aed0:	clz	r0, r0
   1aed4:	lsr	r0, r0, #5
   1aed8:	cmp	r2, #0
   1aedc:	beq	1af88 <__assert_fail@plt+0x83cc>
   1aee0:	mov	r9, r3
   1aee4:	add	sl, r1, #1
   1aee8:	mov	r5, #0
   1aeec:	mov	r4, #0
   1aef0:	tst	r0, #1
   1aef4:	bne	1af90 <__assert_fail@plt+0x83d4>
   1aef8:	uxtb	r8, r2
   1aefc:	ldrb	r7, [r6, r5]
   1af00:	cmp	r8, r7
   1af04:	beq	1af68 <__assert_fail@plt+0x83ac>
   1af08:	bl	12844 <__ctype_b_loc@plt>
   1af0c:	ldr	r0, [r0]
   1af10:	add	r1, r0, r8, lsl #1
   1af14:	ldrb	r1, [r1, #1]
   1af18:	tst	r1, #8
   1af1c:	addne	r0, r0, r7, lsl #1
   1af20:	ldrbne	r0, [r0, #1]
   1af24:	tstne	r0, #8
   1af28:	beq	1af90 <__assert_fail@plt+0x83d4>
   1af2c:	tst	r4, #1
   1af30:	beq	1af54 <__assert_fail@plt+0x8398>
   1af34:	ldr	r0, [sp]
   1af38:	ldr	r0, [r0]
   1af3c:	sub	r1, r5, r0
   1af40:	ldr	r0, [r9]
   1af44:	cmp	r1, r0
   1af48:	bne	1af90 <__assert_fail@plt+0x83d4>
   1af4c:	add	r0, r0, #1
   1af50:	b	1af60 <__assert_fail@plt+0x83a4>
   1af54:	ldr	r0, [sp]
   1af58:	str	r5, [r0]
   1af5c:	mov	r0, #1
   1af60:	str	r0, [r9]
   1af64:	mov	r4, #1
   1af68:	ldrb	r2, [sl, r5]
   1af6c:	add	r0, r6, r5
   1af70:	ldrb	r0, [r0, #1]
   1af74:	clz	r0, r0
   1af78:	lsr	r0, r0, #5
   1af7c:	add	r5, r5, #1
   1af80:	cmp	r2, #0
   1af84:	bne	1aef0 <__assert_fail@plt+0x8334>
   1af88:	sub	sp, fp, #28
   1af8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af90:	mov	r0, #0
   1af94:	sub	sp, fp, #28
   1af98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af9c:	push	{r4, r5, fp, lr}
   1afa0:	add	fp, sp, #8
   1afa4:	mov	r4, r2
   1afa8:	mov	r5, r1
   1afac:	ldr	r3, [r2, #4]
   1afb0:	mov	r1, #1
   1afb4:	mov	r2, r5
   1afb8:	bl	12700 <fwrite@plt>
   1afbc:	cmp	r0, r5
   1afc0:	popcs	{r4, r5, fp, pc}
   1afc4:	bl	128d4 <__errno_location@plt>
   1afc8:	ldr	r0, [r0]
   1afcc:	ldr	r1, [r4, #8]
   1afd0:	pop	{r4, r5, fp, lr}
   1afd4:	b	18778 <__assert_fail@plt+0x5bbc>
   1afd8:	push	{r4, sl, fp, lr}
   1afdc:	add	fp, sp, #8
   1afe0:	mov	r4, r0
   1afe4:	ldr	r0, [r0, #4]
   1afe8:	bl	2ca10 <__assert_fail@plt+0x19e54>
   1afec:	cmp	r0, #0
   1aff0:	popeq	{r4, sl, fp, pc}
   1aff4:	bl	128d4 <__errno_location@plt>
   1aff8:	ldr	r0, [r0]
   1affc:	ldr	r1, [r4, #8]
   1b000:	pop	{r4, sl, fp, lr}
   1b004:	b	18778 <__assert_fail@plt+0x5bbc>
   1b008:	push	{r4, r5, fp, lr}
   1b00c:	add	fp, sp, #8
   1b010:	sub	sp, sp, #40	; 0x28
   1b014:	str	r1, [fp, #-12]
   1b018:	str	r0, [fp, #-16]
   1b01c:	sub	r0, fp, #16
   1b020:	bl	12820 <localtime@plt>
   1b024:	cmp	r0, #0
   1b028:	beq	1b10c <__assert_fail@plt+0x8550>
   1b02c:	ldr	ip, [r0, #24]
   1b030:	cmn	ip, #1
   1b034:	ble	1b12c <__assert_fail@plt+0x8570>
   1b038:	cmp	ip, #7
   1b03c:	bge	1b14c <__assert_fail@plt+0x8590>
   1b040:	ldr	r2, [r0, #16]
   1b044:	cmn	r2, #1
   1b048:	ble	1b16c <__assert_fail@plt+0x85b0>
   1b04c:	cmp	r2, #12
   1b050:	bge	1b18c <__assert_fail@plt+0x85d0>
   1b054:	ldr	r3, [r0, #8]
   1b058:	cmn	r3, #1
   1b05c:	ble	1b1ac <__assert_fail@plt+0x85f0>
   1b060:	cmp	r3, #24
   1b064:	bge	1b1cc <__assert_fail@plt+0x8610>
   1b068:	ldr	r4, [r0, #4]
   1b06c:	cmp	r4, #60	; 0x3c
   1b070:	bge	1b1ec <__assert_fail@plt+0x8630>
   1b074:	ldr	r1, [r0]
   1b078:	cmp	r1, #62	; 0x3e
   1b07c:	bge	1b20c <__assert_fail@plt+0x8650>
   1b080:	ldr	lr, [r0, #12]
   1b084:	ldr	r0, [r0, #20]
   1b088:	ldr	r5, [fp, #-12]
   1b08c:	str	r5, [sp, #20]
   1b090:	str	r1, [sp, #16]
   1b094:	str	r4, [sp, #12]
   1b098:	str	r3, [sp, #8]
   1b09c:	str	lr, [sp, #4]
   1b0a0:	movw	r1, #5244	; 0x147c
   1b0a4:	movt	r1, #4
   1b0a8:	ldr	r1, [r1, r2, lsl #2]
   1b0ac:	str	r1, [sp]
   1b0b0:	movw	r1, #1900	; 0x76c
   1b0b4:	add	r0, r0, r1
   1b0b8:	str	r0, [sp, #24]
   1b0bc:	movw	r0, #5216	; 0x1460
   1b0c0:	movt	r0, #4
   1b0c4:	ldr	r3, [r0, ip, lsl #2]
   1b0c8:	movw	r4, #22736	; 0x58d0
   1b0cc:	movt	r4, #5
   1b0d0:	movw	r2, #5058	; 0x13c2
   1b0d4:	movt	r2, #4
   1b0d8:	mov	r0, r4
   1b0dc:	mov	r1, #1024	; 0x400
   1b0e0:	bl	128ec <snprintf@plt>
   1b0e4:	cmp	r0, #1024	; 0x400
   1b0e8:	blt	1b120 <__assert_fail@plt+0x8564>
   1b0ec:	movw	r0, #5097	; 0x13e9
   1b0f0:	movt	r0, #4
   1b0f4:	movw	r1, #3945	; 0xf69
   1b0f8:	movt	r1, #4
   1b0fc:	movw	r3, #4900	; 0x1324
   1b100:	movt	r3, #4
   1b104:	movw	r2, #770	; 0x302
   1b108:	bl	12bbc <__assert_fail@plt>
   1b10c:	ldr	r0, [fp, #-16]
   1b110:	ldr	r1, [fp, #-12]
   1b114:	mov	r2, #64	; 0x40
   1b118:	bl	1a228 <__assert_fail@plt+0x766c>
   1b11c:	mov	r4, r0
   1b120:	mov	r0, r4
   1b124:	sub	sp, fp, #8
   1b128:	pop	{r4, r5, fp, pc}
   1b12c:	movw	r0, #4882	; 0x1312
   1b130:	movt	r0, #4
   1b134:	movw	r1, #3945	; 0xf69
   1b138:	movt	r1, #4
   1b13c:	movw	r3, #4900	; 0x1324
   1b140:	movt	r3, #4
   1b144:	movw	r2, #749	; 0x2ed
   1b148:	bl	12bbc <__assert_fail@plt>
   1b14c:	movw	r0, #4936	; 0x1348
   1b150:	movt	r0, #4
   1b154:	movw	r1, #3945	; 0xf69
   1b158:	movt	r1, #4
   1b15c:	movw	r3, #4900	; 0x1324
   1b160:	movt	r3, #4
   1b164:	movw	r2, #750	; 0x2ee
   1b168:	bl	12bbc <__assert_fail@plt>
   1b16c:	movw	r0, #4953	; 0x1359
   1b170:	movt	r0, #4
   1b174:	movw	r1, #3945	; 0xf69
   1b178:	movt	r1, #4
   1b17c:	movw	r3, #4900	; 0x1324
   1b180:	movt	r3, #4
   1b184:	movw	r2, #751	; 0x2ef
   1b188:	bl	12bbc <__assert_fail@plt>
   1b18c:	movw	r0, #4970	; 0x136a
   1b190:	movt	r0, #4
   1b194:	movw	r1, #3945	; 0xf69
   1b198:	movt	r1, #4
   1b19c:	movw	r3, #4900	; 0x1324
   1b1a0:	movt	r3, #4
   1b1a4:	mov	r2, #752	; 0x2f0
   1b1a8:	bl	12bbc <__assert_fail@plt>
   1b1ac:	movw	r0, #4987	; 0x137b
   1b1b0:	movt	r0, #4
   1b1b4:	movw	r1, #3945	; 0xf69
   1b1b8:	movt	r1, #4
   1b1bc:	movw	r3, #4900	; 0x1324
   1b1c0:	movt	r3, #4
   1b1c4:	movw	r2, #753	; 0x2f1
   1b1c8:	bl	12bbc <__assert_fail@plt>
   1b1cc:	movw	r0, #5005	; 0x138d
   1b1d0:	movt	r0, #4
   1b1d4:	movw	r1, #3945	; 0xf69
   1b1d8:	movt	r1, #4
   1b1dc:	movw	r3, #4900	; 0x1324
   1b1e0:	movt	r3, #4
   1b1e4:	movw	r2, #754	; 0x2f2
   1b1e8:	bl	12bbc <__assert_fail@plt>
   1b1ec:	movw	r0, #5023	; 0x139f
   1b1f0:	movt	r0, #4
   1b1f4:	movw	r1, #3945	; 0xf69
   1b1f8:	movt	r1, #4
   1b1fc:	movw	r3, #4900	; 0x1324
   1b200:	movt	r3, #4
   1b204:	movw	r2, #755	; 0x2f3
   1b208:	bl	12bbc <__assert_fail@plt>
   1b20c:	movw	r0, #5040	; 0x13b0
   1b210:	movt	r0, #4
   1b214:	movw	r1, #3945	; 0xf69
   1b218:	movt	r1, #4
   1b21c:	movw	r3, #4900	; 0x1324
   1b220:	movt	r3, #4
   1b224:	mov	r2, #756	; 0x2f4
   1b228:	bl	12bbc <__assert_fail@plt>
   1b22c:	push	{r4, sl, fp, lr}
   1b230:	add	fp, sp, #8
   1b234:	sub	sp, sp, #8
   1b238:	mov	ip, r1
   1b23c:	mov	r4, r0
   1b240:	ldrb	r3, [r0, #12]
   1b244:	ldr	r1, [r0, #16]
   1b248:	ldr	r0, [r0, #4]
   1b24c:	str	r2, [sp]
   1b250:	mov	r2, r3
   1b254:	mov	r3, ip
   1b258:	bl	21128 <__assert_fail@plt+0xe56c>
   1b25c:	cmn	r0, #1
   1b260:	subgt	sp, fp, #8
   1b264:	popgt	{r4, sl, fp, pc}
   1b268:	bl	128d4 <__errno_location@plt>
   1b26c:	ldr	r0, [r0]
   1b270:	ldr	r1, [r4, #8]
   1b274:	sub	sp, fp, #8
   1b278:	pop	{r4, sl, fp, lr}
   1b27c:	b	18778 <__assert_fail@plt+0x5bbc>
   1b280:	push	{r4, r5, fp, lr}
   1b284:	add	fp, sp, #8
   1b288:	vpush	{d8-d9}
   1b28c:	ldrd	r4, [r0, #48]	; 0x30
   1b290:	ldrd	r0, [r0, #64]	; 0x40
   1b294:	orrs	r2, r4, r5
   1b298:	beq	1b2c8 <__assert_fail@plt+0x870c>
   1b29c:	bl	3e57c <__assert_fail@plt+0x2b9c0>
   1b2a0:	vldr	d8, [pc, #72]	; 1b2f0 <__assert_fail@plt+0x8734>
   1b2a4:	vmov	d9, r0, r1
   1b2a8:	mov	r0, r4
   1b2ac:	mov	r1, r5
   1b2b0:	bl	3e57c <__assert_fail@plt+0x2b9c0>
   1b2b4:	vmov	d16, r0, r1
   1b2b8:	vmul.f64	d17, d9, d8
   1b2bc:	vdiv.f64	d0, d17, d16
   1b2c0:	vpop	{d8-d9}
   1b2c4:	pop	{r4, r5, fp, pc}
   1b2c8:	orrs	r0, r0, r1
   1b2cc:	vmoveq.f64	d0, #112	; 0x3f800000  1.0
   1b2d0:	vpopeq	{d8-d9}
   1b2d4:	popeq	{r4, r5, fp, pc}
   1b2d8:	add	r0, pc, #24
   1b2dc:	cmp	r1, #0
   1b2e0:	addlt	r0, r0, #8
   1b2e4:	vldr	d0, [r0]
   1b2e8:	vpop	{d8-d9}
   1b2ec:	pop	{r4, r5, fp, pc}
   1b2f0:	andeq	r0, r0, r0
   1b2f4:	addmi	r0, r0, r0
   1b2f8:	andeq	r0, r0, r0
   1b2fc:	svcvc	0x00f00000	; IMB
   1b300:	andeq	r0, r0, r0
   1b304:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1b308:	sub	r0, r0, #4096	; 0x1000
   1b30c:	ror	r0, r0, #12
   1b310:	cmp	r0, #11
   1b314:	movwhi	r0, #5193	; 0x1449
   1b318:	movthi	r0, #4
   1b31c:	bxhi	lr
   1b320:	movw	r1, #5296	; 0x14b0
   1b324:	movt	r1, #4
   1b328:	ldr	r0, [r1, r0, lsl #2]
   1b32c:	bx	lr
   1b330:	push	{r4, r5, r6, r7, fp, lr}
   1b334:	add	fp, sp, #16
   1b338:	mov	r4, r0
   1b33c:	movw	r5, #23764	; 0x5cd4
   1b340:	movt	r5, #5
   1b344:	ldr	r0, [r5]
   1b348:	cmp	r0, #0
   1b34c:	beq	1b388 <__assert_fail@plt+0x87cc>
   1b350:	movw	r1, #23760	; 0x5cd0
   1b354:	movt	r1, #5
   1b358:	ldrb	r1, [r1]
   1b35c:	cmp	r1, #1
   1b360:	bne	1b384 <__assert_fail@plt+0x87c8>
   1b364:	movw	r1, #23768	; 0x5cd8
   1b368:	movt	r1, #5
   1b36c:	ldrd	r2, [r1]
   1b370:	ldrd	r6, [r4]
   1b374:	eor	r1, r7, r3
   1b378:	eor	r2, r6, r2
   1b37c:	orrs	r1, r2, r1
   1b380:	popeq	{r4, r5, r6, r7, fp, pc}
   1b384:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   1b388:	ldrd	r0, [r4]
   1b38c:	movw	r2, #23768	; 0x5cd8
   1b390:	movt	r2, #5
   1b394:	strd	r0, [r2]
   1b398:	mov	r0, r4
   1b39c:	bl	1b3a8 <__assert_fail@plt+0x87ec>
   1b3a0:	str	r0, [r5]
   1b3a4:	pop	{r4, r5, r6, r7, fp, pc}
   1b3a8:	push	{r4, r5, r6, r7, fp, lr}
   1b3ac:	add	fp, sp, #16
   1b3b0:	mov	r4, r0
   1b3b4:	mov	r0, #1
   1b3b8:	bl	1b4f8 <__assert_fail@plt+0x893c>
   1b3bc:	cmp	r0, #0
   1b3c0:	beq	1b46c <__assert_fail@plt+0x88b0>
   1b3c4:	mov	r5, r0
   1b3c8:	mov	r7, #0
   1b3cc:	movw	r6, #5385	; 0x1509
   1b3d0:	movt	r6, #4
   1b3d4:	ldr	r0, [r5, #12]
   1b3d8:	mov	r1, r6
   1b3dc:	bl	124cc <strcmp@plt>
   1b3e0:	cmp	r0, #0
   1b3e4:	beq	1b410 <__assert_fail@plt+0x8854>
   1b3e8:	mov	r0, r5
   1b3ec:	bl	1b650 <__assert_fail@plt+0x8a94>
   1b3f0:	cmp	r0, #0
   1b3f4:	bne	1b410 <__assert_fail@plt+0x8854>
   1b3f8:	ldrd	r0, [r4]
   1b3fc:	ldrd	r2, [r5, #16]
   1b400:	eor	r1, r3, r1
   1b404:	eor	r0, r2, r0
   1b408:	orrs	r0, r0, r1
   1b40c:	moveq	r7, r5
   1b410:	ldr	r5, [r5, #28]
   1b414:	cmp	r5, #0
   1b418:	bne	1b3d4 <__assert_fail@plt+0x8818>
   1b41c:	cmp	r7, #0
   1b420:	beq	1b440 <__assert_fail@plt+0x8884>
   1b424:	ldr	r0, [r7, #12]
   1b428:	bl	2b95c <__assert_fail@plt+0x18da0>
   1b42c:	movw	r1, #23760	; 0x5cd0
   1b430:	movt	r1, #5
   1b434:	mov	r2, #1
   1b438:	strb	r2, [r1]
   1b43c:	pop	{r4, r5, r6, r7, fp, pc}
   1b440:	movw	r0, #23760	; 0x5cd0
   1b444:	movt	r0, #5
   1b448:	mov	r1, #0
   1b44c:	strb	r1, [r0]
   1b450:	movw	r1, #124	; 0x7c
   1b454:	movt	r1, #4
   1b458:	mov	r0, #0
   1b45c:	mov	r2, #5
   1b460:	bl	1264c <dcgettext@plt>
   1b464:	bl	2b95c <__assert_fail@plt+0x18da0>
   1b468:	pop	{r4, r5, r6, r7, fp, pc}
   1b46c:	movw	r1, #5348	; 0x14e4
   1b470:	movt	r1, #4
   1b474:	mov	r0, #0
   1b478:	mov	r2, #5
   1b47c:	bl	1264c <dcgettext@plt>
   1b480:	mov	r2, r0
   1b484:	mov	r0, #1
   1b488:	mov	r1, #0
   1b48c:	bl	12790 <error@plt>
   1b490:	push	{r4, r5, r6, sl, fp, lr}
   1b494:	add	fp, sp, #16
   1b498:	mov	r5, r0
   1b49c:	movw	r0, #5344	; 0x14e0
   1b4a0:	movt	r0, #4
   1b4a4:	mov	r1, r5
   1b4a8:	bl	124cc <strcmp@plt>
   1b4ac:	mov	r4, #1
   1b4b0:	cmp	r0, #0
   1b4b4:	beq	1b4f0 <__assert_fail@plt+0x8934>
   1b4b8:	mov	r0, #0
   1b4bc:	bl	1b4f8 <__assert_fail@plt+0x893c>
   1b4c0:	cmp	r0, #0
   1b4c4:	beq	1b4f0 <__assert_fail@plt+0x8934>
   1b4c8:	mov	r6, r0
   1b4cc:	ldr	r1, [r6, #12]
   1b4d0:	mov	r0, r5
   1b4d4:	bl	124cc <strcmp@plt>
   1b4d8:	cmp	r0, #0
   1b4dc:	beq	1b4f0 <__assert_fail@plt+0x8934>
   1b4e0:	ldr	r6, [r6, #28]
   1b4e4:	cmp	r6, #0
   1b4e8:	bne	1b4cc <__assert_fail@plt+0x8910>
   1b4ec:	mov	r4, #0
   1b4f0:	mov	r0, r4
   1b4f4:	pop	{r4, r5, r6, sl, fp, pc}
   1b4f8:	push	{r4, r5, r6, sl, fp, lr}
   1b4fc:	add	fp, sp, #16
   1b500:	mov	r4, r0
   1b504:	movw	r6, #23780	; 0x5ce4
   1b508:	movt	r6, #5
   1b50c:	movw	r5, #23776	; 0x5ce0
   1b510:	movt	r5, #5
   1b514:	ldr	r0, [r5]
   1b518:	cmp	r0, #0
   1b51c:	beq	1b544 <__assert_fail@plt+0x8988>
   1b520:	ldrb	r1, [r6]
   1b524:	cmp	r1, #0
   1b528:	bne	1b544 <__assert_fail@plt+0x8988>
   1b52c:	cmp	r4, #0
   1b530:	beq	1b544 <__assert_fail@plt+0x8988>
   1b534:	bl	1b6c8 <__assert_fail@plt+0x8b0c>
   1b538:	mov	r0, #0
   1b53c:	str	r0, [r5]
   1b540:	b	1b558 <__assert_fail@plt+0x899c>
   1b544:	ldr	r0, [r5]
   1b548:	cmp	r0, #0
   1b54c:	beq	1b558 <__assert_fail@plt+0x899c>
   1b550:	ldr	r0, [r5]
   1b554:	pop	{r4, r5, r6, sl, fp, pc}
   1b558:	mov	r0, r4
   1b55c:	bl	2ed94 <__assert_fail@plt+0x1c1d8>
   1b560:	str	r0, [r5]
   1b564:	strb	r4, [r6]
   1b568:	ldr	r0, [r5]
   1b56c:	pop	{r4, r5, r6, sl, fp, pc}
   1b570:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b574:	add	fp, sp, #28
   1b578:	sub	sp, sp, #12
   1b57c:	mov	r4, r0
   1b580:	mov	r8, #0
   1b584:	str	r8, [sp, #8]
   1b588:	mov	r0, #0
   1b58c:	bl	2ed94 <__assert_fail@plt+0x1c1d8>
   1b590:	mov	r9, r0
   1b594:	cmp	r0, #0
   1b598:	beq	1b638 <__assert_fail@plt+0x8a7c>
   1b59c:	str	r4, [sp, #4]
   1b5a0:	add	sl, sp, #8
   1b5a4:	mov	r4, #0
   1b5a8:	mov	r7, r9
   1b5ac:	mov	r5, r4
   1b5b0:	add	r6, r8, #1
   1b5b4:	lsl	r1, r6, #3
   1b5b8:	mov	r0, r4
   1b5bc:	mov	r2, sl
   1b5c0:	bl	1ff78 <__assert_fail@plt+0xd3bc>
   1b5c4:	mov	r4, r0
   1b5c8:	cmp	r0, #0
   1b5cc:	beq	1b5e8 <__assert_fail@plt+0x8a2c>
   1b5d0:	mov	r0, r7
   1b5d4:	bl	1b650 <__assert_fail@plt+0x8a94>
   1b5d8:	cmp	r0, #0
   1b5dc:	beq	1b5f8 <__assert_fail@plt+0x8a3c>
   1b5e0:	mov	r5, r4
   1b5e4:	b	1b610 <__assert_fail@plt+0x8a54>
   1b5e8:	mov	r0, r5
   1b5ec:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   1b5f0:	mov	r5, #0
   1b5f4:	b	1b610 <__assert_fail@plt+0x8a54>
   1b5f8:	ldrd	r0, [r7, #16]
   1b5fc:	mov	r2, r4
   1b600:	str	r0, [r2, r8, lsl #3]!
   1b604:	str	r1, [r2, #4]
   1b608:	mov	r5, r4
   1b60c:	mov	r8, r6
   1b610:	ldr	r7, [r7, #28]
   1b614:	cmp	r7, #0
   1b618:	bne	1b5ac <__assert_fail@plt+0x89f0>
   1b61c:	mov	r0, r9
   1b620:	bl	1b6c8 <__assert_fail@plt+0x8b0c>
   1b624:	cmp	r5, #0
   1b628:	ldrne	r0, [sp, #4]
   1b62c:	strne	r8, [r0]
   1b630:	moveq	r5, #0
   1b634:	b	1b644 <__assert_fail@plt+0x8a88>
   1b638:	mov	r0, r9
   1b63c:	bl	1b6c8 <__assert_fail@plt+0x8b0c>
   1b640:	mov	r5, #0
   1b644:	mov	r0, r5
   1b648:	sub	sp, fp, #28
   1b64c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b650:	push	{r4, r5, r6, sl, fp, lr}
   1b654:	add	fp, sp, #16
   1b658:	sub	sp, sp, #104	; 0x68
   1b65c:	mov	r4, r0
   1b660:	mov	r6, r0
   1b664:	ldr	r0, [r6, #16]!
   1b668:	ldr	r1, [r6, #4]
   1b66c:	and	r1, r0, r1
   1b670:	mov	r0, #0
   1b674:	cmn	r1, #1
   1b678:	beq	1b684 <__assert_fail@plt+0x8ac8>
   1b67c:	sub	sp, fp, #16
   1b680:	pop	{r4, r5, r6, sl, fp, pc}
   1b684:	mov	r5, sp
   1b688:	mov	r0, r5
   1b68c:	bl	18214 <__assert_fail@plt+0x5658>
   1b690:	ldr	r0, [r4, #4]
   1b694:	movw	r1, #24196	; 0x5e84
   1b698:	movt	r1, #5
   1b69c:	ldr	r2, [r1, #52]	; 0x34
   1b6a0:	mov	r1, r5
   1b6a4:	blx	r2
   1b6a8:	mov	r1, r0
   1b6ac:	mvn	r0, #0
   1b6b0:	cmp	r1, #0
   1b6b4:	ldmeq	sp, {r0, r1}
   1b6b8:	strdeq	r0, [r6]
   1b6bc:	moveq	r0, #0
   1b6c0:	sub	sp, fp, #16
   1b6c4:	pop	{r4, r5, r6, sl, fp, pc}
   1b6c8:	push	{r4, sl, fp, lr}
   1b6cc:	add	fp, sp, #8
   1b6d0:	cmp	r0, #0
   1b6d4:	popeq	{r4, sl, fp, pc}
   1b6d8:	ldr	r4, [r0, #28]
   1b6dc:	bl	2f7c0 <__assert_fail@plt+0x1cc04>
   1b6e0:	cmp	r4, #0
   1b6e4:	mov	r0, r4
   1b6e8:	bne	1b6d8 <__assert_fail@plt+0x8b1c>
   1b6ec:	pop	{r4, sl, fp, pc}
   1b6f0:	cmp	r0, #0
   1b6f4:	beq	1b754 <__assert_fail@plt+0x8b98>
   1b6f8:	mov	r1, #0
   1b6fc:	movw	r2, #16408	; 0x4018
   1b700:	movt	r2, #1
   1b704:	movw	ip, #19532	; 0x4c4c
   1b708:	movt	ip, #1
   1b70c:	ldr	r3, [r0]
   1b710:	cmp	r3, r2
   1b714:	beq	1b724 <__assert_fail@plt+0x8b68>
   1b718:	cmp	r3, ip
   1b71c:	orreq	r1, r1, #2
   1b720:	b	1b728 <__assert_fail@plt+0x8b6c>
   1b724:	orr	r1, r1, #1
   1b728:	ldr	r0, [r0, #152]	; 0x98
   1b72c:	cmp	r0, #0
   1b730:	bne	1b70c <__assert_fail@plt+0x8b50>
   1b734:	and	r0, r1, #3
   1b738:	cmp	r0, #3
   1b73c:	bxne	lr
   1b740:	movw	r0, #24196	; 0x5e84
   1b744:	movt	r0, #5
   1b748:	ldrb	r0, [r0, #1]
   1b74c:	cmp	r0, #0
   1b750:	beq	1b758 <__assert_fail@plt+0x8b9c>
   1b754:	bx	lr
   1b758:	push	{fp, lr}
   1b75c:	mov	fp, sp
   1b760:	movw	r1, #5392	; 0x1510
   1b764:	movt	r1, #4
   1b768:	mov	r0, #0
   1b76c:	mov	r2, #5
   1b770:	bl	1264c <dcgettext@plt>
   1b774:	mov	r2, r0
   1b778:	mov	r0, #1
   1b77c:	mov	r1, #0
   1b780:	bl	12790 <error@plt>
   1b784:	cmp	r0, #0
   1b788:	beq	1b7bc <__assert_fail@plt+0x8c00>
   1b78c:	cmp	r0, #2
   1b790:	beq	1b7e0 <__assert_fail@plt+0x8c24>
   1b794:	cmp	r0, #1
   1b798:	bne	1b808 <__assert_fail@plt+0x8c4c>
   1b79c:	movw	r1, #24196	; 0x5e84
   1b7a0:	movt	r1, #5
   1b7a4:	movw	r2, #47148	; 0xb82c
   1b7a8:	movt	r2, #1
   1b7ac:	str	r2, [r1, #64]	; 0x40
   1b7b0:	movw	r2, #34984	; 0x88a8
   1b7b4:	movt	r2, #1
   1b7b8:	b	1b7fc <__assert_fail@plt+0x8c40>
   1b7bc:	movw	r1, #24196	; 0x5e84
   1b7c0:	movt	r1, #5
   1b7c4:	movw	r2, #47208	; 0xb868
   1b7c8:	movt	r2, #1
   1b7cc:	str	r2, [r1, #64]	; 0x40
   1b7d0:	movw	r2, #35108	; 0x8924
   1b7d4:	movt	r2, #1
   1b7d8:	str	r2, [r1, #52]	; 0x34
   1b7dc:	b	1b808 <__assert_fail@plt+0x8c4c>
   1b7e0:	movw	r1, #24196	; 0x5e84
   1b7e4:	movt	r1, #5
   1b7e8:	movw	r2, #47212	; 0xb86c
   1b7ec:	movt	r2, #1
   1b7f0:	str	r2, [r1, #64]	; 0x40
   1b7f4:	movw	r2, #34700	; 0x878c
   1b7f8:	movt	r2, #1
   1b7fc:	str	r2, [r1, #52]	; 0x34
   1b800:	mov	r2, #1
   1b804:	strb	r2, [r1, #12]
   1b808:	movw	r1, #24196	; 0x5e84
   1b80c:	movt	r1, #5
   1b810:	str	r0, [r1, #48]	; 0x30
   1b814:	ldrb	r0, [r1, #44]	; 0x2c
   1b818:	tst	r0, #2
   1b81c:	movwne	r0, #35192	; 0x8978
   1b820:	movtne	r0, #1
   1b824:	strne	r0, [r1, #52]	; 0x34
   1b828:	bx	lr
   1b82c:	push	{r4, r5, r6, sl, fp, lr}
   1b830:	add	fp, sp, #16
   1b834:	mov	r4, r2
   1b838:	mov	r5, r1
   1b83c:	mov	r6, r0
   1b840:	bl	2a77c <__assert_fail@plt+0x17bc0>
   1b844:	cmp	r0, #0
   1b848:	moveq	r0, #0
   1b84c:	popeq	{r4, r5, r6, sl, fp, pc}
   1b850:	mov	r3, r0
   1b854:	mov	r0, r6
   1b858:	mov	r1, r5
   1b85c:	mov	r2, r4
   1b860:	pop	{r4, r5, r6, sl, fp, lr}
   1b864:	b	1bae8 <__assert_fail@plt+0x8f2c>
   1b868:	b	2a9b4 <__assert_fail@plt+0x17df8>
   1b86c:	push	{r4, r5, r6, sl, fp, lr}
   1b870:	add	fp, sp, #16
   1b874:	mov	r4, r2
   1b878:	mov	r5, r1
   1b87c:	mov	r6, r0
   1b880:	movw	r0, #24152	; 0x5e58
   1b884:	movt	r0, #5
   1b888:	ldr	r0, [r0]
   1b88c:	cmp	r0, #0
   1b890:	beq	1b8a8 <__assert_fail@plt+0x8cec>
   1b894:	mov	r0, r6
   1b898:	mov	r1, r5
   1b89c:	mov	r2, r4
   1b8a0:	pop	{r4, r5, r6, sl, fp, lr}
   1b8a4:	b	2a9b4 <__assert_fail@plt+0x17df8>
   1b8a8:	mov	r0, r6
   1b8ac:	mov	r1, r5
   1b8b0:	mov	r2, r4
   1b8b4:	bl	2a77c <__assert_fail@plt+0x17bc0>
   1b8b8:	cmp	r0, #0
   1b8bc:	moveq	r0, #0
   1b8c0:	popeq	{r4, r5, r6, sl, fp, pc}
   1b8c4:	mov	r3, r0
   1b8c8:	mov	r0, r6
   1b8cc:	mov	r1, r5
   1b8d0:	mov	r2, r4
   1b8d4:	pop	{r4, r5, r6, sl, fp, lr}
   1b8d8:	b	1bae8 <__assert_fail@plt+0x8f2c>
   1b8dc:	movw	r0, #23784	; 0x5ce8
   1b8e0:	movt	r0, #5
   1b8e4:	mov	r1, #0
   1b8e8:	str	r1, [r0]
   1b8ec:	bx	lr
   1b8f0:	bx	lr
   1b8f4:	push	{r4, r5, r6, r7, fp, lr}
   1b8f8:	add	fp, sp, #16
   1b8fc:	mov	r4, r0
   1b900:	movw	r0, #5564	; 0x15bc
   1b904:	movt	r0, #4
   1b908:	mov	r1, r4
   1b90c:	mov	r2, #6
   1b910:	bl	12b5c <strncmp@plt>
   1b914:	cmp	r0, #0
   1b918:	bne	1b938 <__assert_fail@plt+0x8d7c>
   1b91c:	mov	r0, r4
   1b920:	bl	1288c <strlen@plt>
   1b924:	cmp	r0, #8
   1b928:	bne	1b938 <__assert_fail@plt+0x8d7c>
   1b92c:	movw	r1, #9796	; 0x2644
   1b930:	movt	r1, #4
   1b934:	b	1b9a4 <__assert_fail@plt+0x8de8>
   1b938:	mov	r5, r4
   1b93c:	ldrb	r0, [r5], #1
   1b940:	cmp	r0, #45	; 0x2d
   1b944:	movne	r5, r4
   1b948:	movw	r0, #64745	; 0xfce9
   1b94c:	movt	r0, #3
   1b950:	mov	r1, r5
   1b954:	bl	124cc <strcmp@plt>
   1b958:	cmp	r0, #0
   1b95c:	beq	1b99c <__assert_fail@plt+0x8de0>
   1b960:	mov	r6, #0
   1b964:	movw	r7, #9812	; 0x2654
   1b968:	movt	r7, #4
   1b96c:	cmn	r6, #1360	; 0x550
   1b970:	moveq	r0, #0
   1b974:	popeq	{r4, r5, r6, r7, fp, pc}
   1b978:	sub	r0, r7, r6
   1b97c:	ldr	r0, [r0, #20]
   1b980:	mov	r1, r5
   1b984:	bl	124cc <strcmp@plt>
   1b988:	sub	r6, r6, #16
   1b98c:	cmp	r0, #0
   1b990:	bne	1b96c <__assert_fail@plt+0x8db0>
   1b994:	sub	r1, r7, r6
   1b998:	b	1b9a4 <__assert_fail@plt+0x8de8>
   1b99c:	movw	r1, #9812	; 0x2654
   1b9a0:	movt	r1, #4
   1b9a4:	mov	r0, r4
   1b9a8:	pop	{r4, r5, r6, r7, fp, lr}
   1b9ac:	b	1b9b0 <__assert_fail@plt+0x8df4>
   1b9b0:	push	{r4, r5, r6, sl, fp, lr}
   1b9b4:	add	fp, sp, #16
   1b9b8:	sub	sp, sp, #8
   1b9bc:	mov	r5, r0
   1b9c0:	ldr	r0, [r1]
   1b9c4:	cmp	r0, #1
   1b9c8:	beq	1b9f8 <__assert_fail@plt+0x8e3c>
   1b9cc:	mov	r4, r1
   1b9d0:	cmp	r0, #2
   1b9d4:	beq	1b9fc <__assert_fail@plt+0x8e40>
   1b9d8:	movw	r6, #23784	; 0x5ce8
   1b9dc:	movt	r6, #5
   1b9e0:	ldr	r1, [r6]
   1b9e4:	cmp	r0, #0
   1b9e8:	beq	1ba08 <__assert_fail@plt+0x8e4c>
   1b9ec:	cmp	r1, #0
   1b9f0:	streq	r5, [r6]
   1b9f4:	b	1b9fc <__assert_fail@plt+0x8e40>
   1b9f8:	mov	r4, #0
   1b9fc:	mov	r0, r4
   1ba00:	sub	sp, fp, #16
   1ba04:	pop	{r4, r5, r6, sl, fp, pc}
   1ba08:	cmp	r1, #0
   1ba0c:	beq	1b9fc <__assert_fail@plt+0x8e40>
   1ba10:	bl	1bb60 <__assert_fail@plt+0x8fa4>
   1ba14:	cmp	r0, #0
   1ba18:	beq	1b9fc <__assert_fail@plt+0x8e40>
   1ba1c:	movw	r1, #5648	; 0x1610
   1ba20:	movt	r1, #4
   1ba24:	mov	r0, #0
   1ba28:	mov	r2, #5
   1ba2c:	bl	1264c <dcgettext@plt>
   1ba30:	mov	r2, r0
   1ba34:	ldr	r0, [r6]
   1ba38:	stm	sp, {r0, r5}
   1ba3c:	mov	r0, #0
   1ba40:	mov	r1, #0
   1ba44:	mov	r3, r5
   1ba48:	bl	12790 <error@plt>
   1ba4c:	b	1b9fc <__assert_fail@plt+0x8e40>
   1ba50:	push	{fp, lr}
   1ba54:	mov	fp, sp
   1ba58:	bl	172a4 <__assert_fail@plt+0x46e8>
   1ba5c:	movw	r1, #16132	; 0x3f04
   1ba60:	movt	r1, #1
   1ba64:	str	r1, [r0]
   1ba68:	mov	r2, #5
   1ba6c:	mov	r3, #0
   1ba70:	strd	r2, [r0, #8]
   1ba74:	strh	r3, [r0, #18]
   1ba78:	mov	r0, #1
   1ba7c:	pop	{fp, pc}
   1ba80:	push	{r4, r5, fp, lr}
   1ba84:	add	fp, sp, #8
   1ba88:	mov	r5, #0
   1ba8c:	mov	r1, #0
   1ba90:	bl	173c8 <__assert_fail@plt+0x480c>
   1ba94:	movw	r1, #19068	; 0x4a7c
   1ba98:	movt	r1, #1
   1ba9c:	str	r1, [r0]
   1baa0:	mov	r4, #4
   1baa4:	strd	r4, [r0, #8]
   1baa8:	strh	r5, [r0, #18]
   1baac:	mov	r0, #1
   1bab0:	pop	{r4, r5, fp, pc}
   1bab4:	push	{fp, lr}
   1bab8:	mov	fp, sp
   1babc:	bl	17f88 <__assert_fail@plt+0x53cc>
   1bac0:	movw	r1, #257	; 0x101
   1bac4:	str	r1, [r0, #16]
   1bac8:	add	r0, r0, #40	; 0x28
   1bacc:	bl	1bad8 <__assert_fail@plt+0x8f1c>
   1bad0:	mov	r0, #1
   1bad4:	pop	{fp, pc}
   1bad8:	mov	r1, r0
   1badc:	movw	r0, #8108	; 0x1fac
   1bae0:	movt	r0, #4
   1bae4:	b	1e8ac <__assert_fail@plt+0xbcf0>
   1bae8:	push	{r4, r5, r6, r7, fp, lr}
   1baec:	add	fp, sp, #16
   1baf0:	mov	r7, r3
   1baf4:	mov	r4, r2
   1baf8:	mov	r5, r1
   1bafc:	mov	r6, r0
   1bb00:	bl	128d4 <__errno_location@plt>
   1bb04:	ldr	r0, [r0]
   1bb08:	cmp	r0, #20
   1bb0c:	cmpne	r0, #2
   1bb10:	movne	r0, r7
   1bb14:	popne	{r4, r5, r6, r7, fp, pc}
   1bb18:	movw	r0, #24196	; 0x5e84
   1bb1c:	movt	r0, #5
   1bb20:	ldrb	r0, [r0, #44]	; 0x2c
   1bb24:	tst	r0, #2
   1bb28:	bne	1bb40 <__assert_fail@plt+0x8f84>
   1bb2c:	mov	r0, r6
   1bb30:	mov	r1, r5
   1bb34:	mov	r2, r4
   1bb38:	pop	{r4, r5, r6, r7, fp, lr}
   1bb3c:	b	2a9b4 <__assert_fail@plt+0x17df8>
   1bb40:	movw	r0, #21856	; 0x5560
   1bb44:	movt	r0, #5
   1bb48:	ldr	r0, [r0]
   1bb4c:	movw	r1, #5571	; 0x15c3
   1bb50:	movt	r1, #4
   1bb54:	mov	r2, r5
   1bb58:	bl	128c8 <fprintf@plt>
   1bb5c:	b	1bb2c <__assert_fail@plt+0x8f70>
   1bb60:	movw	r0, #24196	; 0x5e84
   1bb64:	movt	r0, #5
   1bb68:	ldrb	r1, [r0, #16]
   1bb6c:	ldrb	r0, [r0, #17]
   1bb70:	cmp	r1, #0
   1bb74:	movwne	r1, #1
   1bb78:	clz	r0, r0
   1bb7c:	lsr	r0, r0, #5
   1bb80:	and	r0, r0, r1
   1bb84:	bx	lr
   1bb88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb8c:	add	fp, sp, #28
   1bb90:	sub	sp, sp, #116	; 0x74
   1bb94:	mov	r6, #0
   1bb98:	cmp	r1, #0
   1bb9c:	beq	1bc38 <__assert_fail@plt+0x907c>
   1bba0:	mov	sl, r2
   1bba4:	mov	r5, r1
   1bba8:	ldr	r8, [r2]
   1bbac:	ldr	r4, [r1, r8, lsl #2]
   1bbb0:	cmp	r4, #0
   1bbb4:	beq	1bc38 <__assert_fail@plt+0x907c>
   1bbb8:	mov	r7, r0
   1bbbc:	mov	r0, r4
   1bbc0:	bl	1288c <strlen@plt>
   1bbc4:	cmp	r0, #8
   1bbc8:	bne	1bc38 <__assert_fail@plt+0x907c>
   1bbcc:	mov	r0, #116	; 0x74
   1bbd0:	strh	r0, [fp, #-32]	; 0xffffffe0
   1bbd4:	movw	r0, #16993	; 0x4261
   1bbd8:	movt	r0, #28003	; 0x6d63
   1bbdc:	str	r0, [fp, #-36]	; 0xffffffdc
   1bbe0:	movw	r0, #5564	; 0x15bc
   1bbe4:	movt	r0, #4
   1bbe8:	mov	r1, r4
   1bbec:	mov	r2, #6
   1bbf0:	bl	12b5c <strncmp@plt>
   1bbf4:	cmp	r0, #0
   1bbf8:	bne	1bdd0 <__assert_fail@plt+0x9214>
   1bbfc:	ldrb	r9, [r4, #6]
   1bc00:	cmp	r9, #66	; 0x42
   1bc04:	ldrbne	r4, [r4, #7]
   1bc08:	cmpne	r4, #66	; 0x42
   1bc0c:	bne	1bc44 <__assert_fail@plt+0x9088>
   1bc10:	mov	r6, #0
   1bc14:	movw	r1, #6017	; 0x1781
   1bc18:	movt	r1, #4
   1bc1c:	mov	r0, #0
   1bc20:	mov	r2, #5
   1bc24:	bl	1264c <dcgettext@plt>
   1bc28:	mov	r2, r0
   1bc2c:	mov	r0, #0
   1bc30:	mov	r1, #0
   1bc34:	bl	12790 <error@plt>
   1bc38:	mov	r0, r6
   1bc3c:	sub	sp, fp, #28
   1bc40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc44:	mov	r6, #0
   1bc48:	cmp	r9, #116	; 0x74
   1bc4c:	beq	1bc38 <__assert_fail@plt+0x907c>
   1bc50:	sub	r0, fp, #36	; 0x24
   1bc54:	mov	r1, r9
   1bc58:	bl	12898 <strchr@plt>
   1bc5c:	cmp	r0, #0
   1bc60:	beq	1bc38 <__assert_fail@plt+0x907c>
   1bc64:	sub	r0, fp, #36	; 0x24
   1bc68:	mov	r1, r4
   1bc6c:	bl	12898 <strchr@plt>
   1bc70:	cmp	r0, #0
   1bc74:	beq	1bc38 <__assert_fail@plt+0x907c>
   1bc78:	add	r0, r8, #1
   1bc7c:	ldr	r1, [r5, r0, lsl #2]
   1bc80:	cmp	r1, #0
   1bc84:	beq	1bdf0 <__assert_fail@plt+0x9234>
   1bc88:	str	r0, [sl]
   1bc8c:	mov	r0, r7
   1bc90:	bl	17f4c <__assert_fail@plt+0x5390>
   1bc94:	mov	r6, r0
   1bc98:	cmp	r9, #97	; 0x61
   1bc9c:	beq	1bcc0 <__assert_fail@plt+0x9104>
   1bca0:	cmp	r9, #109	; 0x6d
   1bca4:	beq	1bcb8 <__assert_fail@plt+0x90fc>
   1bca8:	cmp	r9, #99	; 0x63
   1bcac:	bne	1be28 <__assert_fail@plt+0x926c>
   1bcb0:	mov	r0, #2
   1bcb4:	b	1bcc4 <__assert_fail@plt+0x9108>
   1bcb8:	mov	r0, #3
   1bcbc:	b	1bcc4 <__assert_fail@plt+0x9108>
   1bcc0:	mov	r0, #0
   1bcc4:	str	r0, [r6, #40]	; 0x28
   1bcc8:	cmp	r4, #116	; 0x74
   1bccc:	bne	1bd1c <__assert_fail@plt+0x9160>
   1bcd0:	ldr	r0, [sl]
   1bcd4:	ldr	r1, [r5, r0, lsl #2]
   1bcd8:	add	r0, r6, #48	; 0x30
   1bcdc:	movw	r7, #24196	; 0x5e84
   1bce0:	movt	r7, #5
   1bce4:	add	r2, r7, #20
   1bce8:	bl	276b4 <__assert_fail@plt+0x14af8>
   1bcec:	cmp	r0, #0
   1bcf0:	bne	1bd64 <__assert_fail@plt+0x91a8>
   1bcf4:	movw	r1, #6139	; 0x17fb
   1bcf8:	movt	r1, #4
   1bcfc:	mov	r0, #0
   1bd00:	mov	r2, #5
   1bd04:	bl	1264c <dcgettext@plt>
   1bd08:	mov	r4, r0
   1bd0c:	ldr	r0, [sl]
   1bd10:	ldr	r2, [r5, r0, lsl #2]
   1bd14:	ldr	r1, [r7, #72]	; 0x48
   1bd18:	b	1be1c <__assert_fail@plt+0x9260>
   1bd1c:	mov	r7, sp
   1bd20:	mov	r0, r7
   1bd24:	bl	18214 <__assert_fail@plt+0x5658>
   1bd28:	ldr	r0, [sl]
   1bd2c:	ldr	r0, [r5, r0, lsl #2]
   1bd30:	movw	r1, #24196	; 0x5e84
   1bd34:	movt	r1, #5
   1bd38:	ldr	r2, [r1, #52]	; 0x34
   1bd3c:	mov	r1, r7
   1bd40:	blx	r2
   1bd44:	cmp	r0, #0
   1bd48:	bne	1be9c <__assert_fail@plt+0x92e0>
   1bd4c:	add	r2, r6, #48	; 0x30
   1bd50:	mov	r0, sp
   1bd54:	mov	r1, r4
   1bd58:	bl	1bf0c <__assert_fail@plt+0x9350>
   1bd5c:	cmp	r0, #0
   1bd60:	beq	1beb0 <__assert_fail@plt+0x92f4>
   1bd64:	mov	r0, #0
   1bd68:	str	r0, [r6, #44]	; 0x2c
   1bd6c:	ldr	r0, [r6, #48]	; 0x30
   1bd70:	bl	1bfd4 <__assert_fail@plt+0x9418>
   1bd74:	vstr	s0, [r6, #28]
   1bd78:	ldr	r0, [sl]
   1bd7c:	add	r0, r0, #1
   1bd80:	str	r0, [sl]
   1bd84:	ldr	r0, [r6]
   1bd88:	cmp	r0, #0
   1bd8c:	beq	1be5c <__assert_fail@plt+0x92a0>
   1bd90:	movw	r1, #18388	; 0x47d4
   1bd94:	movt	r1, #1
   1bd98:	cmp	r0, r1
   1bd9c:	bne	1be7c <__assert_fail@plt+0x92c0>
   1bda0:	ldrb	r0, [r6, #18]
   1bda4:	mov	r6, #1
   1bda8:	cmp	r0, #0
   1bdac:	bne	1bc38 <__assert_fail@plt+0x907c>
   1bdb0:	movw	r0, #6297	; 0x1899
   1bdb4:	movt	r0, #4
   1bdb8:	movw	r1, #5943	; 0x1737
   1bdbc:	movt	r1, #4
   1bdc0:	movw	r3, #5952	; 0x1740
   1bdc4:	movt	r3, #4
   1bdc8:	movw	r2, #1649	; 0x671
   1bdcc:	bl	12bbc <__assert_fail@plt>
   1bdd0:	movw	r0, #5900	; 0x170c
   1bdd4:	movt	r0, #4
   1bdd8:	movw	r1, #5943	; 0x1737
   1bddc:	movt	r1, #4
   1bde0:	movw	r3, #5952	; 0x1740
   1bde4:	movt	r3, #4
   1bde8:	movw	r2, #1555	; 0x613
   1bdec:	bl	12bbc <__assert_fail@plt>
   1bdf0:	movw	r1, #6086	; 0x17c6
   1bdf4:	movt	r1, #4
   1bdf8:	mov	r0, #0
   1bdfc:	mov	r2, #5
   1be00:	bl	1264c <dcgettext@plt>
   1be04:	mov	r4, r0
   1be08:	ldr	r0, [sl]
   1be0c:	ldr	r2, [r5, r0, lsl #2]
   1be10:	movw	r0, #24196	; 0x5e84
   1be14:	movt	r0, #5
   1be18:	ldr	r1, [r0, #72]	; 0x48
   1be1c:	mov	r0, #0
   1be20:	bl	2a024 <__assert_fail@plt+0x17468>
   1be24:	b	1bed8 <__assert_fail@plt+0x931c>
   1be28:	sub	r0, fp, #36	; 0x24
   1be2c:	mov	r1, r9
   1be30:	bl	12898 <strchr@plt>
   1be34:	cmp	r0, #0
   1be38:	bne	1beec <__assert_fail@plt+0x9330>
   1be3c:	movw	r0, #6116	; 0x17e4
   1be40:	movt	r0, #4
   1be44:	movw	r1, #5943	; 0x1737
   1be48:	movt	r1, #4
   1be4c:	movw	r3, #5952	; 0x1740
   1be50:	movt	r3, #4
   1be54:	movw	r2, #1611	; 0x64b
   1be58:	bl	12bbc <__assert_fail@plt>
   1be5c:	movw	r0, #6233	; 0x1859
   1be60:	movt	r0, #4
   1be64:	movw	r1, #5943	; 0x1737
   1be68:	movt	r1, #4
   1be6c:	movw	r3, #5952	; 0x1740
   1be70:	movt	r3, #4
   1be74:	movw	r2, #1647	; 0x66f
   1be78:	bl	12bbc <__assert_fail@plt>
   1be7c:	movw	r0, #6261	; 0x1875
   1be80:	movt	r0, #4
   1be84:	movw	r1, #5943	; 0x1737
   1be88:	movt	r1, #4
   1be8c:	movw	r3, #5952	; 0x1740
   1be90:	movt	r3, #4
   1be94:	mov	r2, #1648	; 0x670
   1be98:	bl	12bbc <__assert_fail@plt>
   1be9c:	bl	128d4 <__errno_location@plt>
   1bea0:	ldr	r1, [sl]
   1bea4:	ldr	r1, [r5, r1, lsl #2]
   1bea8:	ldr	r0, [r0]
   1beac:	bl	19390 <__assert_fail@plt+0x67d4>
   1beb0:	movw	r1, #6197	; 0x1835
   1beb4:	movt	r1, #4
   1beb8:	mov	r0, #0
   1bebc:	mov	r2, #5
   1bec0:	bl	1264c <dcgettext@plt>
   1bec4:	mov	r4, r0
   1bec8:	ldr	r0, [sl]
   1becc:	ldr	r1, [r5, r0, lsl #2]
   1bed0:	mov	r0, #0
   1bed4:	bl	19314 <__assert_fail@plt+0x6758>
   1bed8:	mov	r3, r0
   1bedc:	mov	r0, #1
   1bee0:	mov	r1, #0
   1bee4:	mov	r2, r4
   1bee8:	bl	12790 <error@plt>
   1beec:	movw	r0, #64905	; 0xfd89
   1bef0:	movt	r0, #3
   1bef4:	movw	r1, #5943	; 0x1737
   1bef8:	movt	r1, #4
   1befc:	movw	r3, #5952	; 0x1740
   1bf00:	movt	r3, #4
   1bf04:	movw	r2, #1612	; 0x64c
   1bf08:	bl	12bbc <__assert_fail@plt>
   1bf0c:	push	{r4, sl, fp, lr}
   1bf10:	add	fp, sp, #8
   1bf14:	sub	sp, sp, #8
   1bf18:	mov	r4, r2
   1bf1c:	mov	r2, r0
   1bf20:	cmp	r1, #98	; 0x62
   1bf24:	bgt	1bf58 <__assert_fail@plt+0x939c>
   1bf28:	cmp	r1, #66	; 0x42
   1bf2c:	bne	1bf70 <__assert_fail@plt+0x93b4>
   1bf30:	mov	r0, sp
   1bf34:	mov	r1, r2
   1bf38:	bl	2b0a0 <__assert_fail@plt+0x184e4>
   1bf3c:	ldm	sp, {r0, r1}
   1bf40:	stm	r4, {r0, r1}
   1bf44:	ldr	r0, [r4, #4]
   1bf48:	mov	r1, #1
   1bf4c:	eor	r0, r1, r0, lsr #31
   1bf50:	sub	sp, fp, #8
   1bf54:	pop	{r4, sl, fp, pc}
   1bf58:	cmp	r1, #99	; 0x63
   1bf5c:	bne	1bf88 <__assert_fail@plt+0x93cc>
   1bf60:	mov	r0, sp
   1bf64:	mov	r1, r2
   1bf68:	bl	2b088 <__assert_fail@plt+0x184cc>
   1bf6c:	b	1bf9c <__assert_fail@plt+0x93e0>
   1bf70:	cmp	r1, #97	; 0x61
   1bf74:	bne	1bfb4 <__assert_fail@plt+0x93f8>
   1bf78:	mov	r0, sp
   1bf7c:	mov	r1, r2
   1bf80:	bl	2b07c <__assert_fail@plt+0x184c0>
   1bf84:	b	1bf9c <__assert_fail@plt+0x93e0>
   1bf88:	cmp	r1, #109	; 0x6d
   1bf8c:	bne	1bfb4 <__assert_fail@plt+0x93f8>
   1bf90:	mov	r0, sp
   1bf94:	mov	r1, r2
   1bf98:	bl	2b094 <__assert_fail@plt+0x184d8>
   1bf9c:	ldm	sp, {r0, r1}
   1bfa0:	str	r0, [r4]
   1bfa4:	str	r1, [r4, #4]
   1bfa8:	mov	r0, #1
   1bfac:	sub	sp, fp, #8
   1bfb0:	pop	{r4, sl, fp, pc}
   1bfb4:	movw	r0, #64905	; 0xfd89
   1bfb8:	movt	r0, #3
   1bfbc:	movw	r1, #5943	; 0x1737
   1bfc0:	movt	r1, #4
   1bfc4:	movw	r3, #6317	; 0x18ad
   1bfc8:	movt	r3, #4
   1bfcc:	movw	r2, #498	; 0x1f2
   1bfd0:	bl	12bbc <__assert_fail@plt>
   1bfd4:	movw	r1, #24196	; 0x5e84
   1bfd8:	movt	r1, #5
   1bfdc:	ldr	r1, [r1, #28]
   1bfe0:	sub	r0, r1, r0
   1bfe4:	movw	r1, #17671	; 0x4507
   1bfe8:	movt	r1, #49710	; 0xc22e
   1bfec:	smmla	r0, r0, r1, r0
   1bff0:	asr	r1, r0, #16
   1bff4:	add	r0, r1, r0, lsr #31
   1bff8:	vmov	s0, r0
   1bffc:	vcvt.f32.s32	s0, s0
   1c000:	b	1c004 <__assert_fail@plt+0x9448>
   1c004:	vldr	s2, [pc, #64]	; 1c04c <__assert_fail@plt+0x9490>
   1c008:	vcmpe.f32	s0, s2
   1c00c:	vmrs	APSR_nzcv, fpscr
   1c010:	vldrmi	s0, [pc, #48]	; 1c048 <__assert_fail@plt+0x948c>
   1c014:	bxmi	lr
   1c018:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1c01c:	vcmpe.f32	s0, s2
   1c020:	vmrs	APSR_nzcv, fpscr
   1c024:	vldrmi	s0, [pc, #36]	; 1c050 <__assert_fail@plt+0x9494>
   1c028:	bxmi	lr
   1c02c:	vldr	s2, [pc, #32]	; 1c054 <__assert_fail@plt+0x9498>
   1c030:	add	r0, pc, #32
   1c034:	vcmpe.f32	s0, s2
   1c038:	vmrs	APSR_nzcv, fpscr
   1c03c:	addgt	r0, r0, #4
   1c040:	vldr	s0, [r0]
   1c044:	bx	lr
   1c048:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1c04c:	stclcc	12, cr12, [ip, #820]	; 0x334
   1c050:			; <UNDEFINED> instruction: 0x3e99999a
   1c054:	sbcmi	r0, r8, #0
   1c058:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1c05c:			; <UNDEFINED> instruction: 0x3e99999a
   1c060:	push	{r4, sl, fp, lr}
   1c064:	add	fp, sp, #8
   1c068:	mov	r4, #0
   1c06c:	mov	r1, #0
   1c070:	bl	173c8 <__assert_fail@plt+0x480c>
   1c074:	movw	r1, #18260	; 0x4754
   1c078:	movt	r1, #1
   1c07c:	str	r1, [r0]
   1c080:	mov	r2, #2
   1c084:	mov	r3, #4
   1c088:	strd	r2, [r0, #8]
   1c08c:	strh	r4, [r0, #18]
   1c090:	mov	r0, #1
   1c094:	pop	{r4, sl, fp, pc}
   1c098:	push	{fp, lr}
   1c09c:	mov	fp, sp
   1c0a0:	bl	172a4 <__assert_fail@plt+0x46e8>
   1c0a4:	movw	r1, #16292	; 0x3fa4
   1c0a8:	movt	r1, #1
   1c0ac:	str	r1, [r0]
   1c0b0:	mov	r2, #3
   1c0b4:	mov	r3, #1
   1c0b8:	strd	r2, [r0, #8]
   1c0bc:	mov	r1, #0
   1c0c0:	strh	r1, [r0, #18]
   1c0c4:	mov	r1, #1065353216	; 0x3f800000
   1c0c8:	str	r1, [r0, #28]
   1c0cc:	mov	r0, #1
   1c0d0:	pop	{fp, pc}
   1c0d4:	push	{fp, lr}
   1c0d8:	mov	fp, sp
   1c0dc:	bl	172a4 <__assert_fail@plt+0x46e8>
   1c0e0:	movw	r1, #15844	; 0x3de4
   1c0e4:	movt	r1, #1
   1c0e8:	str	r1, [r0]
   1c0ec:	mov	r1, #3
   1c0f0:	str	r1, [r0, #8]
   1c0f4:	str	r1, [r0, #12]
   1c0f8:	mov	r1, #0
   1c0fc:	strh	r1, [r0, #18]
   1c100:	mov	r0, #1
   1c104:	pop	{fp, pc}
   1c108:	mov	r3, #0
   1c10c:	b	1de68 <__assert_fail@plt+0xb2ac>
   1c110:	push	{r4, r5, r6, r7, fp, lr}
   1c114:	add	fp, sp, #16
   1c118:	sub	sp, sp, #120	; 0x78
   1c11c:	mov	r5, r2
   1c120:	mov	r6, r1
   1c124:	mov	r4, r0
   1c128:	add	r7, sp, #16
   1c12c:	mov	r0, r7
   1c130:	bl	18214 <__assert_fail@plt+0x5658>
   1c134:	add	r3, sp, #12
   1c138:	mov	r0, r6
   1c13c:	mov	r1, r5
   1c140:	mov	r2, r7
   1c144:	bl	1e14c <__assert_fail@plt+0xb590>
   1c148:	mov	r1, r0
   1c14c:	mov	r0, #0
   1c150:	cmp	r1, #0
   1c154:	beq	1c19c <__assert_fail@plt+0x95e0>
   1c158:	ldr	r1, [sp, #12]
   1c15c:	mov	r0, r4
   1c160:	bl	17f4c <__assert_fail@plt+0x5390>
   1c164:	mov	r4, r0
   1c168:	mov	r5, #0
   1c16c:	str	r5, [r0, #40]	; 0x28
   1c170:	mov	r0, sp
   1c174:	add	r1, sp, #16
   1c178:	bl	2b094 <__assert_fail@plt+0x184d8>
   1c17c:	ldm	sp, {r0, r1}
   1c180:	str	r5, [r4, #44]	; 0x2c
   1c184:	str	r0, [r4, #48]	; 0x30
   1c188:	str	r1, [r4, #52]	; 0x34
   1c18c:	ldr	r0, [sp, #96]	; 0x60
   1c190:	bl	1bfd4 <__assert_fail@plt+0x9418>
   1c194:	vstr	s0, [r4, #28]
   1c198:	mov	r0, #1
   1c19c:	sub	sp, fp, #16
   1c1a0:	pop	{r4, r5, r6, r7, fp, pc}
   1c1a4:	nop	{0}
   1c1a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c1ac:	add	fp, sp, #28
   1c1b0:	sub	sp, sp, #44	; 0x2c
   1c1b4:	mov	r5, r2
   1c1b8:	mov	r7, r1
   1c1bc:	mov	r6, r0
   1c1c0:	mov	r9, #0
   1c1c4:	movw	r1, #6903	; 0x1af7
   1c1c8:	movt	r1, #4
   1c1cc:	mov	r0, #0
   1c1d0:	mov	r2, #5
   1c1d4:	bl	1264c <dcgettext@plt>
   1c1d8:	mov	r4, r0
   1c1dc:	ldr	r8, [r5]
   1c1e0:	add	r2, sp, #16
   1c1e4:	mov	r0, r7
   1c1e8:	mov	r1, r5
   1c1ec:	bl	1df38 <__assert_fail@plt+0xb37c>
   1c1f0:	cmp	r0, #0
   1c1f4:	beq	1c2f4 <__assert_fail@plt+0x9738>
   1c1f8:	str	r6, [sp, #8]
   1c1fc:	movw	r0, #24196	; 0x5e84
   1c200:	movt	r0, #5
   1c204:	ldr	r6, [r0, #28]
   1c208:	ldr	sl, [r0, #32]
   1c20c:	ldr	r7, [sp, #16]
   1c210:	add	r0, sp, #16
   1c214:	add	r1, sp, #20
   1c218:	bl	1e10c <__assert_fail@plt+0xb550>
   1c21c:	str	r7, [sp, #16]
   1c220:	ldr	r0, [sp, #20]
   1c224:	vldr	d0, [pc, #404]	; 1c3c0 <__assert_fail@plt+0x9804>
   1c228:	str	r4, [sp]
   1c22c:	movw	r9, #20863	; 0x517f
   1c230:	movt	r9, #1
   1c234:	cmp	r0, #1
   1c238:	addeq	r6, r6, r9
   1c23c:	add	r4, sp, #24
   1c240:	mov	r0, r7
   1c244:	mov	r1, r4
   1c248:	mov	r2, r6
   1c24c:	mov	r3, sl
   1c250:	bl	1df60 <__assert_fail@plt+0xb3a4>
   1c254:	cmp	r0, #0
   1c258:	beq	1c2ec <__assert_fail@plt+0x9730>
   1c25c:	mov	sl, r9
   1c260:	ldr	r0, [sp, #8]
   1c264:	mov	r1, r7
   1c268:	bl	17f4c <__assert_fail@plt+0x5390>
   1c26c:	mov	r5, r0
   1c270:	mov	r0, #8
   1c274:	vld1.64	{d16-d17}, [r4], r0
   1c278:	add	r0, r5, #40	; 0x28
   1c27c:	vst1.64	{d16-d17}, [r0]
   1c280:	ldr	r0, [r4]
   1c284:	bl	1bfd4 <__assert_fail@plt+0x9418>
   1c288:	vstr	s0, [r5, #28]
   1c28c:	movw	r0, #24196	; 0x5e84
   1c290:	movt	r0, #5
   1c294:	ldrb	r0, [r0, #44]	; 0x2c
   1c298:	mov	r9, #1
   1c29c:	tst	r0, #1
   1c2a0:	beq	1c2f4 <__assert_fail@plt+0x9738>
   1c2a4:	ldr	r2, [r5, #4]
   1c2a8:	movw	r6, #21856	; 0x5560
   1c2ac:	movt	r6, #5
   1c2b0:	ldr	r0, [r6]
   1c2b4:	movw	r1, #6971	; 0x1b3b
   1c2b8:	movt	r1, #4
   1c2bc:	bl	128c8 <fprintf@plt>
   1c2c0:	ldr	r0, [r6]
   1c2c4:	ldr	r8, [sp, #28]
   1c2c8:	cmp	r8, #0
   1c2cc:	beq	1c300 <__assert_fail@plt+0x9744>
   1c2d0:	cmp	r8, #1
   1c2d4:	bne	1c314 <__assert_fail@plt+0x9758>
   1c2d8:	movw	r3, #7015	; 0x1b67
   1c2dc:	movt	r3, #4
   1c2e0:	movw	r2, #12879	; 0x324f
   1c2e4:	movt	r2, #4
   1c2e8:	b	1c340 <__assert_fail@plt+0x9784>
   1c2ec:	str	r8, [r5]
   1c2f0:	mov	r9, #0
   1c2f4:	mov	r0, r9
   1c2f8:	sub	sp, fp, #28
   1c2fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c300:	movw	r3, #7012	; 0x1b64
   1c304:	movt	r3, #4
   1c308:	movw	r2, #7006	; 0x1b5e
   1c30c:	movt	r2, #4
   1c310:	b	1c340 <__assert_fail@plt+0x9784>
   1c314:	movw	r1, #7018	; 0x1b6a
   1c318:	movt	r1, #4
   1c31c:	movw	r3, #7021	; 0x1b6d
   1c320:	movt	r3, #4
   1c324:	cmp	r8, #2
   1c328:	moveq	r3, r1
   1c32c:	movw	r1, #7009	; 0x1b61
   1c330:	movt	r1, #4
   1c334:	movw	r2, #7022	; 0x1b6e
   1c338:	movt	r2, #4
   1c33c:	moveq	r2, r1
   1c340:	movw	r1, #6985	; 0x1b49
   1c344:	movt	r1, #4
   1c348:	bl	128c8 <fprintf@plt>
   1c34c:	ldr	r4, [r5, #48]	; 0x30
   1c350:	str	r4, [sp, #12]
   1c354:	ldr	r7, [r6]
   1c358:	add	r0, sp, #12
   1c35c:	bl	12640 <ctime@plt>
   1c360:	str	r0, [sp]
   1c364:	asr	r3, r4, #31
   1c368:	movw	r1, #7044	; 0x1b84
   1c36c:	movt	r1, #4
   1c370:	mov	r0, r7
   1c374:	mov	r2, r4
   1c378:	bl	128c8 <fprintf@plt>
   1c37c:	cmp	r8, #2
   1c380:	bne	1c2f4 <__assert_fail@plt+0x9738>
   1c384:	ldr	r0, [r5, #48]	; 0x30
   1c388:	add	r0, r0, sl
   1c38c:	add	r4, r0, #1
   1c390:	str	r4, [sp, #12]
   1c394:	ldr	r5, [r6]
   1c398:	add	r0, sp, #12
   1c39c:	bl	12640 <ctime@plt>
   1c3a0:	str	r0, [sp]
   1c3a4:	asr	r3, r4, #31
   1c3a8:	movw	r1, #7024	; 0x1b70
   1c3ac:	movt	r1, #4
   1c3b0:	mov	r0, r5
   1c3b4:	mov	r2, r4
   1c3b8:	bl	128c8 <fprintf@plt>
   1c3bc:	b	1c2f4 <__assert_fail@plt+0x9738>
   1c3c0:	andeq	r0, r0, r0
   1c3c4:	rscsmi	r1, r5, r0, lsl #16
   1c3c8:	mov	r3, #2
   1c3cc:	b	1de68 <__assert_fail@plt+0xb2ac>
   1c3d0:	push	{r4, r5, r6, r7, fp, lr}
   1c3d4:	add	fp, sp, #16
   1c3d8:	sub	sp, sp, #120	; 0x78
   1c3dc:	mov	r5, r2
   1c3e0:	mov	r6, r1
   1c3e4:	mov	r4, r0
   1c3e8:	add	r7, sp, #16
   1c3ec:	mov	r0, r7
   1c3f0:	bl	18214 <__assert_fail@plt+0x5658>
   1c3f4:	add	r3, sp, #12
   1c3f8:	mov	r0, r6
   1c3fc:	mov	r1, r5
   1c400:	mov	r2, r7
   1c404:	bl	1e14c <__assert_fail@plt+0xb590>
   1c408:	mov	r1, r0
   1c40c:	mov	r0, #0
   1c410:	cmp	r1, #0
   1c414:	beq	1c460 <__assert_fail@plt+0x98a4>
   1c418:	ldr	r1, [sp, #12]
   1c41c:	mov	r0, r4
   1c420:	bl	17f4c <__assert_fail@plt+0x5390>
   1c424:	mov	r4, r0
   1c428:	mov	r0, #2
   1c42c:	str	r0, [r4, #40]	; 0x28
   1c430:	mov	r0, sp
   1c434:	add	r1, sp, #16
   1c438:	bl	2b094 <__assert_fail@plt+0x184d8>
   1c43c:	ldm	sp, {r0, r1}
   1c440:	mov	r2, #0
   1c444:	str	r2, [r4, #44]	; 0x2c
   1c448:	str	r0, [r4, #48]	; 0x30
   1c44c:	str	r1, [r4, #52]	; 0x34
   1c450:	ldr	r0, [sp, #96]	; 0x60
   1c454:	bl	1bfd4 <__assert_fail@plt+0x9418>
   1c458:	vstr	s0, [r4, #28]
   1c45c:	mov	r0, #1
   1c460:	sub	sp, fp, #16
   1c464:	pop	{r4, r5, r6, r7, fp, pc}
   1c468:	push	{r4, r5, r6, r7, fp, lr}
   1c46c:	add	fp, sp, #16
   1c470:	mov	r6, r0
   1c474:	mov	r0, #0
   1c478:	cmp	r1, #0
   1c47c:	beq	1c4e0 <__assert_fail@plt+0x9924>
   1c480:	mov	r4, r2
   1c484:	mov	r5, r1
   1c488:	ldr	r1, [r2]
   1c48c:	ldr	r1, [r5, r1, lsl #2]
   1c490:	cmp	r1, #0
   1c494:	popeq	{r4, r5, r6, r7, fp, pc}
   1c498:	bl	124b4 <is_selinux_enabled@plt>
   1c49c:	cmp	r0, #0
   1c4a0:	ble	1c4e4 <__assert_fail@plt+0x9928>
   1c4a4:	mov	r7, #0
   1c4a8:	mov	r0, r6
   1c4ac:	mov	r1, #0
   1c4b0:	bl	17f4c <__assert_fail@plt+0x5390>
   1c4b4:	movw	r1, #55050	; 0xd70a
   1c4b8:	movt	r1, #15395	; 0x3c23
   1c4bc:	str	r1, [r0, #28]
   1c4c0:	strb	r7, [r0, #18]
   1c4c4:	ldr	r1, [r4]
   1c4c8:	ldr	r1, [r5, r1, lsl #2]
   1c4cc:	str	r1, [r0, #40]	; 0x28
   1c4d0:	ldr	r0, [r4]
   1c4d4:	add	r0, r0, #1
   1c4d8:	str	r0, [r4]
   1c4dc:	mov	r0, #1
   1c4e0:	pop	{r4, r5, r6, r7, fp, pc}
   1c4e4:	movw	r1, #7052	; 0x1b8c
   1c4e8:	movt	r1, #4
   1c4ec:	mov	r0, #0
   1c4f0:	mov	r2, #5
   1c4f4:	bl	1264c <dcgettext@plt>
   1c4f8:	mov	r2, r0
   1c4fc:	mov	r0, #1
   1c500:	mov	r1, #0
   1c504:	bl	12790 <error@plt>
   1c508:	push	{r4, sl, fp, lr}
   1c50c:	add	fp, sp, #8
   1c510:	movw	r4, #24196	; 0x5e84
   1c514:	movt	r4, #5
   1c518:	ldrb	r0, [r4, #36]	; 0x24
   1c51c:	cmp	r0, #0
   1c520:	beq	1c52c <__assert_fail@plt+0x9970>
   1c524:	mov	r0, #1
   1c528:	pop	{r4, sl, fp, pc}
   1c52c:	mov	r0, r4
   1c530:	ldr	r1, [r0, #28]!
   1c534:	mov	r2, #0
   1c538:	add	r1, r1, #4480	; 0x1180
   1c53c:	add	r1, r1, #81920	; 0x14000
   1c540:	stm	r0, {r1, r2}
   1c544:	bl	12820 <localtime@plt>
   1c548:	cmp	r0, #0
   1c54c:	beq	1c56c <__assert_fail@plt+0x99b0>
   1c550:	ldm	r0, {r1, r2}
   1c554:	ldr	r0, [r0, #8]
   1c558:	rsb	r2, r2, r2, lsl #4
   1c55c:	add	r1, r1, r2, lsl #2
   1c560:	mov	r2, #3600	; 0xe10
   1c564:	mla	r0, r0, r2, r1
   1c568:	b	1c590 <__assert_fail@plt+0x99d4>
   1c56c:	ldr	r0, [r4, #28]
   1c570:	movw	r1, #17671	; 0x4507
   1c574:	movt	r1, #49710	; 0xc22e
   1c578:	smmla	r1, r0, r1, r0
   1c57c:	asr	r2, r1, #16
   1c580:	add	r1, r2, r1, lsr #31
   1c584:	movw	r2, #675	; 0x2a3
   1c588:	mul	r1, r1, r2
   1c58c:	sub	r0, r0, r1, lsl #7
   1c590:	mov	r1, #1
   1c594:	strb	r1, [r4, #36]	; 0x24
   1c598:	ldr	r1, [r4, #28]
   1c59c:	sub	r0, r1, r0
   1c5a0:	str	r0, [r4, #28]
   1c5a4:	mov	r0, #1
   1c5a8:	pop	{r4, sl, fp, pc}
   1c5ac:	push	{fp, lr}
   1c5b0:	mov	fp, sp
   1c5b4:	bl	17f88 <__assert_fail@plt+0x53cc>
   1c5b8:	movw	r1, #257	; 0x101
   1c5bc:	strh	r1, [r0, #16]
   1c5c0:	movw	r1, #24196	; 0x5e84
   1c5c4:	movt	r1, #5
   1c5c8:	mov	r2, #0
   1c5cc:	strb	r2, [r1]
   1c5d0:	mov	r1, #1065353216	; 0x3f800000
   1c5d4:	str	r1, [r0, #28]
   1c5d8:	strh	r2, [r0, #18]
   1c5dc:	mov	r0, #1
   1c5e0:	pop	{fp, pc}
   1c5e4:	push	{r4, r5, r6, sl, fp, lr}
   1c5e8:	add	fp, sp, #16
   1c5ec:	mov	r4, r2
   1c5f0:	mov	r5, r1
   1c5f4:	mov	r6, r0
   1c5f8:	bl	1bb60 <__assert_fail@plt+0x8fa4>
   1c5fc:	cmp	r0, #0
   1c600:	beq	1c628 <__assert_fail@plt+0x9a6c>
   1c604:	movw	r1, #7104	; 0x1bc0
   1c608:	movt	r1, #4
   1c60c:	mov	r0, #0
   1c610:	mov	r2, #5
   1c614:	bl	1264c <dcgettext@plt>
   1c618:	mov	r2, r0
   1c61c:	mov	r0, #0
   1c620:	mov	r1, #0
   1c624:	bl	12790 <error@plt>
   1c628:	mov	r0, r6
   1c62c:	mov	r1, r5
   1c630:	mov	r2, r4
   1c634:	bl	1c640 <__assert_fail@plt+0x9a84>
   1c638:	mov	r0, #1
   1c63c:	pop	{r4, r5, r6, sl, fp, pc}
   1c640:	push	{fp, lr}
   1c644:	mov	fp, sp
   1c648:	mov	r0, r1
   1c64c:	movw	r1, #24196	; 0x5e84
   1c650:	movt	r1, #5
   1c654:	mov	r3, #256	; 0x100
   1c658:	strh	r3, [r1]
   1c65c:	mov	r1, r2
   1c660:	bl	1e1c4 <__assert_fail@plt+0xb608>
   1c664:	mov	r0, #1
   1c668:	pop	{fp, pc}
   1c66c:	push	{fp, lr}
   1c670:	mov	fp, sp
   1c674:	bl	17f88 <__assert_fail@plt+0x53cc>
   1c678:	movw	r1, #55050	; 0xd70a
   1c67c:	movt	r1, #15395	; 0x3c23
   1c680:	str	r1, [r0, #28]
   1c684:	mov	r0, #1
   1c688:	pop	{fp, pc}
   1c68c:	mov	r3, r2
   1c690:	mov	r2, r1
   1c694:	mov	r1, r0
   1c698:	movw	r0, #7218	; 0x1c32
   1c69c:	movt	r0, #4
   1c6a0:	b	1e228 <__assert_fail@plt+0xb66c>
   1c6a4:	push	{fp, lr}
   1c6a8:	mov	fp, sp
   1c6ac:	bl	17f88 <__assert_fail@plt+0x53cc>
   1c6b0:	ldr	r1, [r0]
   1c6b4:	add	r2, pc, #36	; 0x24
   1c6b8:	movw	r3, #19308	; 0x4b6c
   1c6bc:	movt	r3, #1
   1c6c0:	cmp	r1, r3
   1c6c4:	addeq	r2, r2, #4
   1c6c8:	vldr	s0, [r2]
   1c6cc:	mov	r1, #0
   1c6d0:	str	r1, [r0, #16]
   1c6d4:	vstr	s0, [r0, #28]
   1c6d8:	mov	r0, #1
   1c6dc:	pop	{fp, pc}
   1c6e0:	svccc	0x00666666
   1c6e4:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1c6e8:	mov	r3, r2
   1c6ec:	mov	r2, r1
   1c6f0:	mov	r1, r0
   1c6f4:	movw	r0, #8072	; 0x1f88
   1c6f8:	movt	r0, #4
   1c6fc:	b	1e228 <__assert_fail@plt+0xb66c>
   1c700:	push	{fp, lr}
   1c704:	mov	fp, sp
   1c708:	sub	sp, sp, #8
   1c70c:	mov	r3, r2
   1c710:	mov	r0, r1
   1c714:	add	r2, sp, #4
   1c718:	mov	r1, r3
   1c71c:	bl	1df38 <__assert_fail@plt+0xb37c>
   1c720:	mov	r1, r0
   1c724:	mov	r0, #0
   1c728:	cmp	r1, #0
   1c72c:	beq	1c744 <__assert_fail@plt+0x9b88>
   1c730:	ldr	r0, [sp, #4]
   1c734:	movw	r1, #24196	; 0x5e84
   1c738:	movt	r1, #5
   1c73c:	str	r0, [r1, #76]	; 0x4c
   1c740:	mov	r0, #1
   1c744:	mov	sp, fp
   1c748:	pop	{fp, pc}
   1c74c:	push	{r4, sl, fp, lr}
   1c750:	add	fp, sp, #8
   1c754:	sub	sp, sp, #8
   1c758:	mov	r3, r2
   1c75c:	mov	r4, r0
   1c760:	add	r2, sp, #4
   1c764:	mov	r0, r1
   1c768:	mov	r1, r3
   1c76c:	bl	1df38 <__assert_fail@plt+0xb37c>
   1c770:	mov	r1, r0
   1c774:	mov	r0, #0
   1c778:	cmp	r1, #0
   1c77c:	beq	1c790 <__assert_fail@plt+0x9bd4>
   1c780:	ldr	r1, [sp, #4]
   1c784:	mov	r0, r4
   1c788:	bl	1e864 <__assert_fail@plt+0xbca8>
   1c78c:	mov	r0, #1
   1c790:	sub	sp, fp, #8
   1c794:	pop	{r4, sl, fp, pc}
   1c798:	push	{r4, r5, fp, lr}
   1c79c:	add	fp, sp, #8
   1c7a0:	mov	r4, r2
   1c7a4:	mov	r5, r1
   1c7a8:	mov	r0, #1
   1c7ac:	bl	1b784 <__assert_fail@plt+0x8bc8>
   1c7b0:	mov	r0, r5
   1c7b4:	mov	r1, r4
   1c7b8:	bl	1e1c4 <__assert_fail@plt+0xb608>
   1c7bc:	mov	r0, #1
   1c7c0:	pop	{r4, r5, fp, pc}
   1c7c4:	push	{r4, r5, fp, lr}
   1c7c8:	add	fp, sp, #8
   1c7cc:	sub	sp, sp, #8
   1c7d0:	mov	r3, r2
   1c7d4:	mov	r4, r0
   1c7d8:	add	r2, sp, #4
   1c7dc:	mov	r0, r1
   1c7e0:	mov	r1, r3
   1c7e4:	bl	1df38 <__assert_fail@plt+0xb37c>
   1c7e8:	mov	r1, r0
   1c7ec:	mov	r0, #0
   1c7f0:	cmp	r1, #0
   1c7f4:	beq	1c82c <__assert_fail@plt+0x9c70>
   1c7f8:	ldr	r5, [sp, #4]
   1c7fc:	mov	r0, r4
   1c800:	mov	r1, r5
   1c804:	bl	17f4c <__assert_fail@plt+0x5390>
   1c808:	mov	r4, r0
   1c80c:	add	r1, r0, #40	; 0x28
   1c810:	mov	r0, r5
   1c814:	bl	1e8ac <__assert_fail@plt+0xbcf0>
   1c818:	mov	r0, #1065353216	; 0x3f800000
   1c81c:	str	r0, [r4, #28]
   1c820:	movw	r0, #257	; 0x101
   1c824:	str	r0, [r4, #16]
   1c828:	mov	r0, #1
   1c82c:	sub	sp, fp, #8
   1c830:	pop	{r4, r5, fp, pc}
   1c834:	push	{r4, sl, fp, lr}
   1c838:	add	fp, sp, #8
   1c83c:	sub	sp, sp, #8
   1c840:	mov	r3, r2
   1c844:	mov	r4, r0
   1c848:	add	r2, sp, #4
   1c84c:	mov	r0, r1
   1c850:	mov	r1, r3
   1c854:	bl	1df38 <__assert_fail@plt+0xb37c>
   1c858:	mov	r1, r0
   1c85c:	mov	r0, #0
   1c860:	cmp	r1, #0
   1c864:	beq	1c878 <__assert_fail@plt+0x9cbc>
   1c868:	ldr	r1, [sp, #4]
   1c86c:	mov	r0, r4
   1c870:	bl	1e9a4 <__assert_fail@plt+0xbde8>
   1c874:	mov	r0, #1
   1c878:	sub	sp, fp, #8
   1c87c:	pop	{r4, sl, fp, pc}
   1c880:	push	{r4, r5, r6, r7, fp, lr}
   1c884:	add	fp, sp, #16
   1c888:	sub	sp, sp, #32
   1c88c:	mov	r4, r2
   1c890:	mov	r6, r1
   1c894:	mov	r5, r0
   1c898:	ldr	r7, [r2]
   1c89c:	sub	r2, fp, #20
   1c8a0:	mov	r0, r1
   1c8a4:	mov	r1, r4
   1c8a8:	bl	1df38 <__assert_fail@plt+0xb37c>
   1c8ac:	cmp	r0, #0
   1c8b0:	beq	1c900 <__assert_fail@plt+0x9d44>
   1c8b4:	add	r2, sp, #24
   1c8b8:	mov	r0, r6
   1c8bc:	mov	r1, r4
   1c8c0:	bl	1e0d8 <__assert_fail@plt+0xb51c>
   1c8c4:	cmp	r0, #0
   1c8c8:	beq	1c900 <__assert_fail@plt+0x9d44>
   1c8cc:	ldr	r0, [fp, #-20]	; 0xffffffec
   1c8d0:	add	r6, sp, #4
   1c8d4:	mov	r1, r6
   1c8d8:	bl	1e8ac <__assert_fail@plt+0xbcf0>
   1c8dc:	ldr	r7, [r4]
   1c8e0:	ldr	r2, [sp, #24]
   1c8e4:	mov	r0, r6
   1c8e8:	mov	r1, r5
   1c8ec:	bl	19ac8 <__assert_fail@plt+0x6f0c>
   1c8f0:	mov	r1, r0
   1c8f4:	mov	r0, #1
   1c8f8:	cmp	r1, #0
   1c8fc:	bne	1c908 <__assert_fail@plt+0x9d4c>
   1c900:	str	r7, [r4]
   1c904:	mov	r0, #0
   1c908:	sub	sp, fp, #16
   1c90c:	pop	{r4, r5, r6, r7, fp, pc}
   1c910:	push	{r4, r5, r6, sl, fp, lr}
   1c914:	add	fp, sp, #16
   1c918:	sub	sp, sp, #8
   1c91c:	mov	r3, r2
   1c920:	mov	r4, r0
   1c924:	add	r2, sp, #4
   1c928:	mov	r0, r1
   1c92c:	mov	r1, r3
   1c930:	bl	1df38 <__assert_fail@plt+0xb37c>
   1c934:	mov	r1, r0
   1c938:	mov	r0, #0
   1c93c:	cmp	r1, #0
   1c940:	beq	1c9a8 <__assert_fail@plt+0x9dec>
   1c944:	movw	r6, #24196	; 0x5e84
   1c948:	movt	r6, #5
   1c94c:	ldrh	r0, [r6, #68]	; 0x44
   1c950:	cmp	r0, #2
   1c954:	bcc	1c96c <__assert_fail@plt+0x9db0>
   1c958:	ldr	r5, [sp, #4]
   1c95c:	mov	r0, r5
   1c960:	bl	1b490 <__assert_fail@plt+0x88d4>
   1c964:	cmp	r0, #0
   1c968:	beq	1c994 <__assert_fail@plt+0x9dd8>
   1c96c:	ldr	r5, [sp, #4]
   1c970:	mov	r0, r4
   1c974:	mov	r1, r5
   1c978:	bl	17f4c <__assert_fail@plt+0x5390>
   1c97c:	mov	r4, r0
   1c980:	str	r5, [r0, #40]	; 0x28
   1c984:	mov	r0, r5
   1c988:	bl	1e9ec <__assert_fail@plt+0xbe30>
   1c98c:	vstr	s0, [r4, #28]
   1c990:	b	1c9a4 <__assert_fail@plt+0x9de8>
   1c994:	ldrb	r0, [r6, #44]	; 0x2c
   1c998:	tst	r0, #8
   1c99c:	bne	1c9b0 <__assert_fail@plt+0x9df4>
   1c9a0:	bl	1ea58 <__assert_fail@plt+0xbe9c>
   1c9a4:	mov	r0, #1
   1c9a8:	sub	sp, fp, #16
   1c9ac:	pop	{r4, r5, r6, sl, fp, pc}
   1c9b0:	movw	r0, #21856	; 0x5560
   1c9b4:	movt	r0, #5
   1c9b8:	ldr	r0, [r0]
   1c9bc:	movw	r1, #8120	; 0x1fb8
   1c9c0:	movt	r1, #4
   1c9c4:	mov	r2, r5
   1c9c8:	bl	128c8 <fprintf@plt>
   1c9cc:	b	1c9a0 <__assert_fail@plt+0x9de4>
   1c9d0:	push	{r4, sl, fp, lr}
   1c9d4:	add	fp, sp, #8
   1c9d8:	mov	r4, r2
   1c9dc:	mov	r2, r0
   1c9e0:	mov	r0, r1
   1c9e4:	mov	r1, r4
   1c9e8:	bl	1ea80 <__assert_fail@plt+0xbec4>
   1c9ec:	cmp	r0, #0
   1c9f0:	beq	1ca18 <__assert_fail@plt+0x9e5c>
   1c9f4:	add	r1, pc, #48	; 0x30
   1c9f8:	ldrd	r2, [r0, #48]	; 0x30
   1c9fc:	subs	r2, r2, #100	; 0x64
   1ca00:	sbcs	r2, r3, #0
   1ca04:	addcc	r1, r1, #4
   1ca08:	vldr	s0, [r1]
   1ca0c:	vstr	s0, [r0, #28]
   1ca10:	mov	r0, #1
   1ca14:	pop	{r4, sl, fp, pc}
   1ca18:	ldr	r0, [r4]
   1ca1c:	sub	r0, r0, #1
   1ca20:	str	r0, [r4]
   1ca24:	mov	r0, #0
   1ca28:	pop	{r4, sl, fp, pc}
   1ca2c:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1ca30:	svccc	0x007d70a4
   1ca34:	push	{r4, r5, r6, r7, fp, lr}
   1ca38:	add	fp, sp, #16
   1ca3c:	sub	sp, sp, #8
   1ca40:	mov	r3, r2
   1ca44:	mov	r5, r0
   1ca48:	add	r2, sp, #4
   1ca4c:	mov	r0, r1
   1ca50:	mov	r1, r3
   1ca54:	bl	1df38 <__assert_fail@plt+0xb37c>
   1ca58:	mov	r1, r0
   1ca5c:	mov	r0, #0
   1ca60:	cmp	r1, #0
   1ca64:	beq	1cafc <__assert_fail@plt+0x9f40>
   1ca68:	ldr	r4, [sp, #4]
   1ca6c:	mov	r0, r4
   1ca70:	bl	12ba4 <getgrnam@plt>
   1ca74:	mov	r6, r0
   1ca78:	bl	12460 <endgrent@plt>
   1ca7c:	cmp	r6, #0
   1ca80:	beq	1ca8c <__assert_fail@plt+0x9ed0>
   1ca84:	ldr	r6, [r6, #8]
   1ca88:	b	1cacc <__assert_fail@plt+0x9f10>
   1ca8c:	movw	r1, #8180	; 0x1ff4
   1ca90:	movt	r1, #4
   1ca94:	mov	r0, r4
   1ca98:	bl	12bb0 <strspn@plt>
   1ca9c:	cmp	r0, #0
   1caa0:	beq	1cb04 <__assert_fail@plt+0x9f48>
   1caa4:	mov	r6, r4
   1caa8:	ldrb	r0, [r6, r0]!
   1caac:	cmp	r0, #0
   1cab0:	bne	1cb34 <__assert_fail@plt+0x9f78>
   1cab4:	movw	r0, #24196	; 0x5e84
   1cab8:	movt	r0, #5
   1cabc:	ldr	r1, [r0, #72]	; 0x48
   1cac0:	mov	r0, r4
   1cac4:	bl	21700 <__assert_fail@plt+0xeb44>
   1cac8:	mov	r6, r0
   1cacc:	mov	r0, r5
   1cad0:	mov	r1, r4
   1cad4:	bl	17f4c <__assert_fail@plt+0x5390>
   1cad8:	ldrd	r2, [r0, #48]	; 0x30
   1cadc:	add	r1, pc, #240	; 0xf0
   1cae0:	subs	r2, r2, #100	; 0x64
   1cae4:	sbcs	r2, r3, #0
   1cae8:	addcc	r1, r1, #4
   1caec:	vldr	s0, [r1]
   1caf0:	str	r6, [r0, #40]	; 0x28
   1caf4:	vstr	s0, [r0, #28]
   1caf8:	mov	r0, #1
   1cafc:	sub	sp, fp, #16
   1cb00:	pop	{r4, r5, r6, r7, fp, pc}
   1cb04:	ldrb	r0, [r4]
   1cb08:	cmp	r0, #0
   1cb0c:	bne	1cb90 <__assert_fail@plt+0x9fd4>
   1cb10:	movw	r1, #8356	; 0x20a4
   1cb14:	movt	r1, #4
   1cb18:	mov	r0, #0
   1cb1c:	mov	r2, #5
   1cb20:	bl	1264c <dcgettext@plt>
   1cb24:	mov	r2, r0
   1cb28:	mov	r0, #1
   1cb2c:	mov	r1, #0
   1cb30:	bl	12790 <error@plt>
   1cb34:	movw	r1, #8191	; 0x1fff
   1cb38:	movt	r1, #4
   1cb3c:	mov	r0, #0
   1cb40:	mov	r2, #5
   1cb44:	bl	1264c <dcgettext@plt>
   1cb48:	mov	r5, r0
   1cb4c:	movw	r7, #24196	; 0x5e84
   1cb50:	movt	r7, #5
   1cb54:	ldr	r1, [r7, #72]	; 0x48
   1cb58:	mov	r0, #0
   1cb5c:	mov	r2, r4
   1cb60:	bl	2a024 <__assert_fail@plt+0x17468>
   1cb64:	mov	r4, r0
   1cb68:	ldr	r1, [r7, #72]	; 0x48
   1cb6c:	mov	r0, #1
   1cb70:	mov	r2, r6
   1cb74:	bl	2a024 <__assert_fail@plt+0x17468>
   1cb78:	str	r0, [sp]
   1cb7c:	mov	r0, #1
   1cb80:	mov	r1, #0
   1cb84:	mov	r2, r5
   1cb88:	mov	r3, r4
   1cb8c:	bl	12790 <error@plt>
   1cb90:	movw	r1, #8316	; 0x207c
   1cb94:	movt	r1, #4
   1cb98:	mov	r0, #0
   1cb9c:	mov	r2, #5
   1cba0:	bl	1264c <dcgettext@plt>
   1cba4:	mov	r5, r0
   1cba8:	movw	r0, #24196	; 0x5e84
   1cbac:	movt	r0, #5
   1cbb0:	ldr	r1, [r0, #72]	; 0x48
   1cbb4:	mov	r0, #0
   1cbb8:	mov	r2, r4
   1cbbc:	bl	2a024 <__assert_fail@plt+0x17468>
   1cbc0:	mov	r3, r0
   1cbc4:	mov	r0, #1
   1cbc8:	mov	r1, #0
   1cbcc:	mov	r2, r5
   1cbd0:	bl	12790 <error@plt>
   1cbd4:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1cbd8:	svccc	0x007d70a4
   1cbdc:	push	{fp, lr}
   1cbe0:	mov	fp, sp
   1cbe4:	mov	r0, r1
   1cbe8:	movw	r1, #24196	; 0x5e84
   1cbec:	movt	r1, #5
   1cbf0:	mov	r3, #1
   1cbf4:	strb	r3, [r1, #14]
   1cbf8:	mov	r1, r2
   1cbfc:	bl	1e1c4 <__assert_fail@plt+0xb608>
   1cc00:	mov	r0, #1
   1cc04:	pop	{fp, pc}
   1cc08:	push	{r4, r5, fp, lr}
   1cc0c:	add	fp, sp, #8
   1cc10:	sub	sp, sp, #8
   1cc14:	mov	r3, r2
   1cc18:	mov	r4, r0
   1cc1c:	add	r2, sp, #4
   1cc20:	mov	r0, r1
   1cc24:	mov	r1, r3
   1cc28:	bl	1df38 <__assert_fail@plt+0xb37c>
   1cc2c:	mov	r1, r0
   1cc30:	mov	r0, #0
   1cc34:	cmp	r1, #0
   1cc38:	beq	1cc70 <__assert_fail@plt+0xa0b4>
   1cc3c:	ldr	r5, [sp, #4]
   1cc40:	mov	r0, r4
   1cc44:	mov	r1, r5
   1cc48:	bl	17f4c <__assert_fail@plt+0x5390>
   1cc4c:	mov	r4, r0
   1cc50:	str	r5, [r0, #40]	; 0x28
   1cc54:	mov	r0, r5
   1cc58:	mov	r1, #0
   1cc5c:	bl	1ec1c <__assert_fail@plt+0xc060>
   1cc60:	vldr	s2, [pc, #16]	; 1cc78 <__assert_fail@plt+0xa0bc>
   1cc64:	vmul.f32	s0, s0, s2
   1cc68:	vstr	s0, [r4, #28]
   1cc6c:	mov	r0, #1
   1cc70:	sub	sp, fp, #8
   1cc74:	pop	{r4, r5, fp, pc}
   1cc78:	stclcc	12, cr12, [ip, #820]	; 0x334
   1cc7c:	push	{r4, r5, r6, sl, fp, lr}
   1cc80:	add	fp, sp, #16
   1cc84:	sub	sp, sp, #8
   1cc88:	mov	r5, r2
   1cc8c:	mov	r6, r1
   1cc90:	mov	r4, r0
   1cc94:	bl	1ec80 <__assert_fail@plt+0xc0c4>
   1cc98:	add	r2, sp, #4
   1cc9c:	mov	r0, r6
   1cca0:	mov	r1, r5
   1cca4:	bl	1df38 <__assert_fail@plt+0xb37c>
   1cca8:	mov	r1, r0
   1ccac:	mov	r0, #0
   1ccb0:	cmp	r1, #0
   1ccb4:	beq	1cd04 <__assert_fail@plt+0xa148>
   1ccb8:	ldr	r5, [sp, #4]
   1ccbc:	movw	r0, #8416	; 0x20e0
   1ccc0:	movt	r0, #4
   1ccc4:	movw	r1, #8423	; 0x20e7
   1ccc8:	movt	r1, #4
   1cccc:	mov	r2, r5
   1ccd0:	bl	1ed28 <__assert_fail@plt+0xc16c>
   1ccd4:	mov	r0, r4
   1ccd8:	mov	r1, r5
   1ccdc:	bl	17f4c <__assert_fail@plt+0x5390>
   1cce0:	mov	r4, r0
   1cce4:	mov	r0, #0
   1cce8:	strh	r0, [r4, #18]
   1ccec:	ldr	r0, [sp, #4]
   1ccf0:	str	r0, [r4, #40]	; 0x28
   1ccf4:	mov	r1, #0
   1ccf8:	bl	1ec1c <__assert_fail@plt+0xc060>
   1ccfc:	vstr	s0, [r4, #28]
   1cd00:	mov	r0, #1
   1cd04:	sub	sp, fp, #16
   1cd08:	pop	{r4, r5, r6, sl, fp, pc}
   1cd0c:	push	{r4, sl, fp, lr}
   1cd10:	add	fp, sp, #8
   1cd14:	mov	r4, r2
   1cd18:	mov	r2, r0
   1cd1c:	mov	r0, r1
   1cd20:	mov	r1, r4
   1cd24:	bl	1ea80 <__assert_fail@plt+0xbec4>
   1cd28:	cmp	r0, #0
   1cd2c:	beq	1cd54 <__assert_fail@plt+0xa198>
   1cd30:	mov	r1, r0
   1cd34:	mov	r0, #1
   1cd38:	strb	r0, [r1, #20]
   1cd3c:	movw	r2, #14269	; 0x37bd
   1cd40:	movt	r2, #13702	; 0x3586
   1cd44:	str	r2, [r1, #28]
   1cd48:	mov	r2, #0
   1cd4c:	strh	r2, [r1, #18]
   1cd50:	pop	{r4, sl, fp, pc}
   1cd54:	ldr	r0, [r4]
   1cd58:	sub	r0, r0, #1
   1cd5c:	str	r0, [r4]
   1cd60:	mov	r0, #0
   1cd64:	pop	{r4, sl, fp, pc}
   1cd68:	push	{fp, lr}
   1cd6c:	mov	fp, sp
   1cd70:	sub	sp, sp, #8
   1cd74:	movw	r3, #17968	; 0x4630
   1cd78:	movt	r3, #1
   1cd7c:	str	r3, [sp]
   1cd80:	movw	r3, #6514	; 0x1972
   1cd84:	movt	r3, #4
   1cd88:	bl	1edcc <__assert_fail@plt+0xc210>
   1cd8c:	mov	sp, fp
   1cd90:	pop	{fp, pc}
   1cd94:	mov	ip, r2
   1cd98:	mov	r2, r0
   1cd9c:	movw	r0, #24196	; 0x5e84
   1cda0:	movt	r0, #5
   1cda4:	ldr	r0, [r0, #60]	; 0x3c
   1cda8:	orr	r3, r0, #4194304	; 0x400000
   1cdac:	mov	r0, r1
   1cdb0:	mov	r1, ip
   1cdb4:	b	1ef04 <__assert_fail@plt+0xc348>
   1cdb8:	push	{fp, lr}
   1cdbc:	mov	fp, sp
   1cdc0:	sub	sp, sp, #8
   1cdc4:	movw	r3, #17968	; 0x4630
   1cdc8:	movt	r3, #1
   1cdcc:	str	r3, [sp]
   1cdd0:	movw	r3, #8424	; 0x20e8
   1cdd4:	movt	r3, #4
   1cdd8:	bl	1edcc <__assert_fail@plt+0xc210>
   1cddc:	mov	sp, fp
   1cde0:	pop	{fp, pc}
   1cde4:	push	{r4, sl, fp, lr}
   1cde8:	add	fp, sp, #8
   1cdec:	mov	r4, r2
   1cdf0:	mov	r2, r0
   1cdf4:	mov	r0, r1
   1cdf8:	mov	r1, r4
   1cdfc:	bl	1ea80 <__assert_fail@plt+0xbec4>
   1ce00:	cmp	r0, #0
   1ce04:	beq	1ce28 <__assert_fail@plt+0xa26c>
   1ce08:	ldr	r2, [r0, #48]	; 0x30
   1ce0c:	ldr	r1, [r0, #52]	; 0x34
   1ce10:	eor	r3, r2, #1
   1ce14:	orrs	r3, r3, r1
   1ce18:	bne	1ce3c <__assert_fail@plt+0xa280>
   1ce1c:	movw	r1, #28836	; 0x70a4
   1ce20:	movt	r1, #16253	; 0x3f7d
   1ce24:	b	1ce5c <__assert_fail@plt+0xa2a0>
   1ce28:	ldr	r0, [r4]
   1ce2c:	sub	r0, r0, #1
   1ce30:	str	r0, [r4]
   1ce34:	mov	r0, #0
   1ce38:	pop	{r4, sl, fp, pc}
   1ce3c:	eor	r2, r2, #2
   1ce40:	orrs	r1, r2, r1
   1ce44:	bne	1ce54 <__assert_fail@plt+0xa298>
   1ce48:	movw	r1, #55050	; 0xd70a
   1ce4c:	movt	r1, #15395	; 0x3c23
   1ce50:	b	1ce5c <__assert_fail@plt+0xa2a0>
   1ce54:	movw	r1, #4719	; 0x126f
   1ce58:	movt	r1, #14979	; 0x3a83
   1ce5c:	str	r1, [r0, #28]
   1ce60:	mov	r0, #1
   1ce64:	pop	{r4, sl, fp, pc}
   1ce68:	push	{r4, r5, r6, sl, fp, lr}
   1ce6c:	add	fp, sp, #16
   1ce70:	sub	sp, sp, #8
   1ce74:	mov	r5, r2
   1ce78:	mov	r6, r1
   1ce7c:	mov	r4, r0
   1ce80:	bl	1ec80 <__assert_fail@plt+0xc0c4>
   1ce84:	add	r2, sp, #4
   1ce88:	mov	r0, r6
   1ce8c:	mov	r1, r5
   1ce90:	bl	1df38 <__assert_fail@plt+0xb37c>
   1ce94:	mov	r1, r0
   1ce98:	mov	r0, #0
   1ce9c:	cmp	r1, #0
   1cea0:	beq	1ced8 <__assert_fail@plt+0xa31c>
   1cea4:	ldr	r5, [sp, #4]
   1cea8:	mov	r0, r4
   1ceac:	mov	r1, r5
   1ceb0:	bl	17f4c <__assert_fail@plt+0x5390>
   1ceb4:	mov	r4, r0
   1ceb8:	str	r5, [r0, #40]	; 0x28
   1cebc:	mov	r0, r5
   1cec0:	mov	r1, #0
   1cec4:	bl	1ec1c <__assert_fail@plt+0xc060>
   1cec8:	vldr	s2, [pc, #16]	; 1cee0 <__assert_fail@plt+0xa324>
   1cecc:	vmul.f32	s0, s0, s2
   1ced0:	vstr	s0, [r4, #28]
   1ced4:	mov	r0, #1
   1ced8:	sub	sp, fp, #16
   1cedc:	pop	{r4, r5, r6, sl, fp, pc}
   1cee0:	stclcc	12, cr12, [ip, #820]	; 0x334
   1cee4:	push	{fp, lr}
   1cee8:	mov	fp, sp
   1ceec:	mov	r1, #0
   1cef0:	bl	1e864 <__assert_fail@plt+0xbca8>
   1cef4:	mov	r0, #1
   1cef8:	pop	{fp, pc}
   1cefc:	mov	r3, r2
   1cf00:	mov	r0, r1
   1cf04:	movw	r1, #24196	; 0x5e84
   1cf08:	movt	r1, #5
   1cf0c:	add	r2, r1, #4
   1cf10:	mov	r1, r3
   1cf14:	b	1eff8 <__assert_fail@plt+0xc43c>
   1cf18:	mov	r3, r2
   1cf1c:	mov	r0, r1
   1cf20:	movw	r1, #24196	; 0x5e84
   1cf24:	movt	r1, #5
   1cf28:	add	r2, r1, #8
   1cf2c:	mov	r1, r3
   1cf30:	b	1eff8 <__assert_fail@plt+0xc43c>
   1cf34:	mov	r3, #3
   1cf38:	b	1de68 <__assert_fail@plt+0xb2ac>
   1cf3c:	push	{fp, lr}
   1cf40:	mov	fp, sp
   1cf44:	mov	r0, r1
   1cf48:	movw	r1, #24196	; 0x5e84
   1cf4c:	movt	r1, #5
   1cf50:	mov	r3, #1
   1cf54:	strb	r3, [r1, #13]
   1cf58:	mov	r1, r2
   1cf5c:	bl	1e1c4 <__assert_fail@plt+0xb608>
   1cf60:	mov	r0, #1
   1cf64:	pop	{fp, pc}
   1cf68:	push	{r4, r5, fp, lr}
   1cf6c:	add	fp, sp, #8
   1cf70:	sub	sp, sp, #8
   1cf74:	mov	r3, r2
   1cf78:	mov	r4, r0
   1cf7c:	add	r2, sp, #4
   1cf80:	mov	r0, r1
   1cf84:	mov	r1, r3
   1cf88:	bl	1df38 <__assert_fail@plt+0xb37c>
   1cf8c:	mov	r1, r0
   1cf90:	mov	r0, #0
   1cf94:	cmp	r1, #0
   1cf98:	beq	1cfec <__assert_fail@plt+0xa430>
   1cf9c:	bl	1ec80 <__assert_fail@plt+0xc0c4>
   1cfa0:	ldr	r5, [sp, #4]
   1cfa4:	movw	r0, #8849	; 0x2291
   1cfa8:	movt	r0, #4
   1cfac:	movw	r1, #8855	; 0x2297
   1cfb0:	movt	r1, #4
   1cfb4:	mov	r2, r5
   1cfb8:	bl	1ed28 <__assert_fail@plt+0xc16c>
   1cfbc:	mov	r0, r4
   1cfc0:	mov	r1, r5
   1cfc4:	bl	17f4c <__assert_fail@plt+0x5390>
   1cfc8:	mov	r4, r0
   1cfcc:	mov	r0, #0
   1cfd0:	strh	r0, [r4, #18]
   1cfd4:	ldr	r0, [sp, #4]
   1cfd8:	str	r0, [r4, #40]	; 0x28
   1cfdc:	mov	r1, #0
   1cfe0:	bl	1ec1c <__assert_fail@plt+0xc060>
   1cfe4:	vstr	s0, [r4, #28]
   1cfe8:	mov	r0, #1
   1cfec:	sub	sp, fp, #8
   1cff0:	pop	{r4, r5, fp, pc}
   1cff4:	push	{r4, r5, r6, r7, fp, lr}
   1cff8:	add	fp, sp, #16
   1cffc:	sub	sp, sp, #120	; 0x78
   1d000:	mov	r5, r2
   1d004:	mov	r6, r1
   1d008:	mov	r4, r0
   1d00c:	add	r7, sp, #16
   1d010:	mov	r0, r7
   1d014:	bl	18214 <__assert_fail@plt+0x5658>
   1d018:	add	r3, sp, #12
   1d01c:	mov	r0, r6
   1d020:	mov	r1, r5
   1d024:	mov	r2, r7
   1d028:	bl	1e14c <__assert_fail@plt+0xb590>
   1d02c:	mov	r1, r0
   1d030:	mov	r0, #0
   1d034:	cmp	r1, #0
   1d038:	beq	1d084 <__assert_fail@plt+0xa4c8>
   1d03c:	ldr	r1, [sp, #12]
   1d040:	mov	r0, r4
   1d044:	bl	17f4c <__assert_fail@plt+0x5390>
   1d048:	mov	r4, r0
   1d04c:	mov	r0, sp
   1d050:	add	r1, sp, #16
   1d054:	bl	2b094 <__assert_fail@plt+0x184d8>
   1d058:	ldm	sp, {r0, r1}
   1d05c:	mov	r2, #0
   1d060:	mov	r3, #3
   1d064:	str	r3, [r4, #40]	; 0x28
   1d068:	str	r2, [r4, #44]	; 0x2c
   1d06c:	str	r0, [r4, #48]	; 0x30
   1d070:	str	r1, [r4, #52]	; 0x34
   1d074:	ldr	r0, [sp, #96]	; 0x60
   1d078:	bl	1bfd4 <__assert_fail@plt+0x9418>
   1d07c:	vstr	s0, [r4, #28]
   1d080:	mov	r0, #1
   1d084:	sub	sp, fp, #16
   1d088:	pop	{r4, r5, r6, r7, fp, pc}
   1d08c:	push	{fp, lr}
   1d090:	mov	fp, sp
   1d094:	mov	r0, r1
   1d098:	movw	r1, #24196	; 0x5e84
   1d09c:	movt	r1, #5
   1d0a0:	mov	r3, #1
   1d0a4:	strb	r3, [r1, #12]
   1d0a8:	mov	r1, r2
   1d0ac:	bl	1e1c4 <__assert_fail@plt+0xb608>
   1d0b0:	mov	r0, #1
   1d0b4:	pop	{fp, pc}
   1d0b8:	push	{fp, lr}
   1d0bc:	mov	fp, sp
   1d0c0:	mov	r1, #0
   1d0c4:	bl	17f4c <__assert_fail@plt+0x5390>
   1d0c8:	movw	r1, #46871	; 0xb717
   1d0cc:	movt	r1, #14545	; 0x38d1
   1d0d0:	str	r1, [r0, #28]
   1d0d4:	mov	r0, #1
   1d0d8:	pop	{fp, pc}
   1d0dc:	push	{fp, lr}
   1d0e0:	mov	fp, sp
   1d0e4:	bl	17f88 <__assert_fail@plt+0x53cc>
   1d0e8:	movw	r1, #4719	; 0x126f
   1d0ec:	movt	r1, #14979	; 0x3a83
   1d0f0:	str	r1, [r0, #28]
   1d0f4:	mov	r0, #1
   1d0f8:	pop	{fp, pc}
   1d0fc:	push	{fp, lr}
   1d100:	mov	fp, sp
   1d104:	mov	r0, r1
   1d108:	movw	r1, #24196	; 0x5e84
   1d10c:	movt	r1, #5
   1d110:	mov	r3, #0
   1d114:	strb	r3, [r1, #14]
   1d118:	mov	r1, r2
   1d11c:	bl	1e1c4 <__assert_fail@plt+0xb608>
   1d120:	mov	r0, #1
   1d124:	pop	{fp, pc}
   1d128:	push	{fp, lr}
   1d12c:	mov	fp, sp
   1d130:	mov	r0, r1
   1d134:	movw	r1, #24196	; 0x5e84
   1d138:	movt	r1, #5
   1d13c:	mov	r3, #0
   1d140:	strb	r3, [r1, #16]
   1d144:	mov	r1, r2
   1d148:	bl	1e1c4 <__assert_fail@plt+0xb608>
   1d14c:	mov	r0, #1
   1d150:	pop	{fp, pc}
   1d154:	push	{fp, lr}
   1d158:	mov	fp, sp
   1d15c:	mov	r0, r1
   1d160:	movw	r1, #24196	; 0x5e84
   1d164:	movt	r1, #5
   1d168:	mov	r3, #1
   1d16c:	strb	r3, [r1, #16]
   1d170:	mov	r1, r2
   1d174:	bl	1e1c4 <__assert_fail@plt+0xb608>
   1d178:	mov	r0, #1
   1d17c:	pop	{fp, pc}
   1d180:	push	{fp, lr}
   1d184:	mov	fp, sp
   1d188:	bl	172a4 <__assert_fail@plt+0x46e8>
   1d18c:	movw	r1, #19076	; 0x4a84
   1d190:	movt	r1, #1
   1d194:	str	r1, [r0]
   1d198:	mov	r2, #3
   1d19c:	mov	r3, #2
   1d1a0:	strd	r2, [r0, #8]
   1d1a4:	mov	r1, #0
   1d1a8:	strh	r1, [r0, #18]
   1d1ac:	mov	r0, #1
   1d1b0:	pop	{fp, pc}
   1d1b4:	mov	r3, r2
   1d1b8:	mov	r2, r1
   1d1bc:	mov	r1, r0
   1d1c0:	movw	r0, #62436	; 0xf3e4
   1d1c4:	movt	r0, #3
   1d1c8:	b	1e228 <__assert_fail@plt+0xb66c>
   1d1cc:	mov	r3, r2
   1d1d0:	mov	r2, r1
   1d1d4:	mov	r1, r0
   1d1d8:	movw	r0, #60004	; 0xea64
   1d1dc:	movt	r0, #3
   1d1e0:	b	1e228 <__assert_fail@plt+0xb66c>
   1d1e4:	push	{fp, lr}
   1d1e8:	mov	fp, sp
   1d1ec:	sub	sp, sp, #8
   1d1f0:	movw	r3, #19152	; 0x4ad0
   1d1f4:	movt	r3, #1
   1d1f8:	str	r3, [sp]
   1d1fc:	movw	r3, #6515	; 0x1973
   1d200:	movt	r3, #4
   1d204:	bl	1edcc <__assert_fail@plt+0xc210>
   1d208:	mov	sp, fp
   1d20c:	pop	{fp, pc}
   1d210:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d214:	add	fp, sp, #28
   1d218:	sub	sp, sp, #4
   1d21c:	vpush	{d8}
   1d220:	sub	sp, sp, #8
   1d224:	mov	r3, r2
   1d228:	mov	r8, r0
   1d22c:	add	r2, sp, #4
   1d230:	mov	r0, r1
   1d234:	mov	r1, r3
   1d238:	bl	1df38 <__assert_fail@plt+0xb37c>
   1d23c:	mov	r6, #0
   1d240:	cmp	r0, #0
   1d244:	beq	1d360 <__assert_fail@plt+0xa7a4>
   1d248:	ldr	r4, [sp, #4]
   1d24c:	ldrb	r0, [r4]
   1d250:	cmp	r0, #45	; 0x2d
   1d254:	beq	1d270 <__assert_fail@plt+0xa6b4>
   1d258:	cmp	r0, #47	; 0x2f
   1d25c:	bne	1d280 <__assert_fail@plt+0xa6c4>
   1d260:	mov	r0, #1
   1d264:	vldr	s16, [pc, #336]	; 1d3bc <__assert_fail@plt+0xa800>
   1d268:	mov	sl, #1
   1d26c:	b	1d28c <__assert_fail@plt+0xa6d0>
   1d270:	vldr	s16, [pc, #320]	; 1d3b8 <__assert_fail@plt+0xa7fc>
   1d274:	mov	sl, #0
   1d278:	mov	r0, #1
   1d27c:	b	1d28c <__assert_fail@plt+0xa6d0>
   1d280:	mov	sl, #2
   1d284:	vldr	s16, [pc, #308]	; 1d3c0 <__assert_fail@plt+0xa804>
   1d288:	mov	r0, #0
   1d28c:	add	r0, r4, r0
   1d290:	bl	24f24 <__assert_fail@plt+0x12368>
   1d294:	cmp	r0, #0
   1d298:	beq	1d374 <__assert_fail@plt+0xa7b8>
   1d29c:	mov	r7, r0
   1d2a0:	ldrb	r0, [r4]
   1d2a4:	cmp	r0, #43	; 0x2b
   1d2a8:	bne	1d2bc <__assert_fail@plt+0xa700>
   1d2ac:	ldrb	r0, [r4, #1]
   1d2b0:	and	r0, r0, #248	; 0xf8
   1d2b4:	cmp	r0, #48	; 0x30
   1d2b8:	beq	1d374 <__assert_fail@plt+0xa7b8>
   1d2bc:	mov	r5, #0
   1d2c0:	str	r5, [sp]
   1d2c4:	mov	r0, #0
   1d2c8:	mov	r1, #0
   1d2cc:	mov	r2, #0
   1d2d0:	mov	r3, r7
   1d2d4:	bl	253e0 <__assert_fail@plt+0x12824>
   1d2d8:	mov	r9, r0
   1d2dc:	str	r5, [sp]
   1d2e0:	mov	r6, #1
   1d2e4:	mov	r0, #0
   1d2e8:	mov	r1, #1
   1d2ec:	mov	r2, #0
   1d2f0:	mov	r3, r7
   1d2f4:	bl	253e0 <__assert_fail@plt+0x12824>
   1d2f8:	mov	r5, r0
   1d2fc:	mov	r0, r7
   1d300:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   1d304:	orrs	r0, r5, r9
   1d308:	ldrbeq	r0, [r4]
   1d30c:	cmpeq	r0, #47	; 0x2f
   1d310:	bne	1d344 <__assert_fail@plt+0xa788>
   1d314:	mov	sl, #0
   1d318:	movw	r1, #8882	; 0x22b2
   1d31c:	movt	r1, #4
   1d320:	mov	r0, #0
   1d324:	mov	r2, #5
   1d328:	bl	1264c <dcgettext@plt>
   1d32c:	mov	r2, r0
   1d330:	mov	r0, #0
   1d334:	mov	r1, #0
   1d338:	mov	r3, r4
   1d33c:	bl	12790 <error@plt>
   1d340:	vldr	s16, [pc, #124]	; 1d3c4 <__assert_fail@plt+0xa808>
   1d344:	mov	r0, r8
   1d348:	mov	r1, r4
   1d34c:	bl	17f4c <__assert_fail@plt+0x5390>
   1d350:	vstr	s16, [r0, #28]
   1d354:	str	sl, [r0, #40]	; 0x28
   1d358:	str	r9, [r0, #44]	; 0x2c
   1d35c:	str	r5, [r0, #48]	; 0x30
   1d360:	mov	r0, r6
   1d364:	sub	sp, fp, #40	; 0x28
   1d368:	vpop	{d8}
   1d36c:	add	sp, sp, #4
   1d370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d374:	movw	r1, #8866	; 0x22a2
   1d378:	movt	r1, #4
   1d37c:	mov	r0, #0
   1d380:	mov	r2, #5
   1d384:	bl	1264c <dcgettext@plt>
   1d388:	mov	r5, r0
   1d38c:	movw	r0, #24196	; 0x5e84
   1d390:	movt	r0, #5
   1d394:	ldr	r1, [r0, #72]	; 0x48
   1d398:	mov	r0, #0
   1d39c:	mov	r2, r4
   1d3a0:	bl	2a024 <__assert_fail@plt+0x17468>
   1d3a4:	mov	r3, r0
   1d3a8:	mov	r0, #1
   1d3ac:	mov	r1, #0
   1d3b0:	mov	r2, r5
   1d3b4:	bl	12790 <error@plt>
   1d3b8:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1d3bc:			; <UNDEFINED> instruction: 0x3e99999a
   1d3c0:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1d3c4:	svccc	0x007fa440
   1d3c8:	push	{fp, lr}
   1d3cc:	mov	fp, sp
   1d3d0:	mov	r1, #0
   1d3d4:	bl	1e9a4 <__assert_fail@plt+0xbde8>
   1d3d8:	mov	r0, #1
   1d3dc:	pop	{fp, pc}
   1d3e0:	push	{r4, r5, r6, r7, fp, lr}
   1d3e4:	add	fp, sp, #16
   1d3e8:	sub	sp, sp, #24
   1d3ec:	mov	r4, r2
   1d3f0:	mov	r5, r0
   1d3f4:	ldr	r7, [r2]
   1d3f8:	add	r2, sp, #20
   1d3fc:	mov	r0, r1
   1d400:	mov	r1, r4
   1d404:	bl	1e0d8 <__assert_fail@plt+0xb51c>
   1d408:	mov	r1, r0
   1d40c:	mov	r0, #0
   1d410:	cmp	r1, #0
   1d414:	beq	1d448 <__assert_fail@plt+0xa88c>
   1d418:	mov	r6, sp
   1d41c:	mov	r0, r6
   1d420:	bl	1bad8 <__assert_fail@plt+0x8f1c>
   1d424:	ldr	r2, [sp, #20]
   1d428:	mov	r0, r6
   1d42c:	mov	r1, r5
   1d430:	bl	19ac8 <__assert_fail@plt+0x6f0c>
   1d434:	mov	r1, r0
   1d438:	mov	r0, #1
   1d43c:	cmp	r1, #0
   1d440:	streq	r7, [r4]
   1d444:	moveq	r0, #0
   1d448:	sub	sp, fp, #16
   1d44c:	pop	{r4, r5, r6, r7, fp, pc}
   1d450:	push	{fp, lr}
   1d454:	mov	fp, sp
   1d458:	bl	17f88 <__assert_fail@plt+0x53cc>
   1d45c:	movw	r1, #24196	; 0x5e84
   1d460:	movt	r1, #5
   1d464:	ldrb	r1, [r1]
   1d468:	cmp	r1, #0
   1d46c:	moveq	r1, #0
   1d470:	strheq	r1, [r0, #18]
   1d474:	mov	r1, #1
   1d478:	strh	r1, [r0, #16]
   1d47c:	mov	r0, #1
   1d480:	pop	{fp, pc}
   1d484:	push	{fp, lr}
   1d488:	mov	fp, sp
   1d48c:	bl	17f88 <__assert_fail@plt+0x53cc>
   1d490:	mov	r1, #1
   1d494:	str	r1, [r0, #16]
   1d498:	mov	r1, #1065353216	; 0x3f800000
   1d49c:	str	r1, [r0, #28]
   1d4a0:	mov	r0, #1
   1d4a4:	pop	{fp, pc}
   1d4a8:	mov	ip, r2
   1d4ac:	mov	r2, r0
   1d4b0:	movw	r0, #24196	; 0x5e84
   1d4b4:	movt	r0, #5
   1d4b8:	ldr	r3, [r0, #60]	; 0x3c
   1d4bc:	mov	r0, r1
   1d4c0:	mov	r1, ip
   1d4c4:	b	1ef04 <__assert_fail@plt+0xc348>
   1d4c8:	push	{r4, r5, fp, lr}
   1d4cc:	add	fp, sp, #8
   1d4d0:	sub	sp, sp, #8
   1d4d4:	mov	r4, r2
   1d4d8:	mov	r5, r1
   1d4dc:	add	r2, sp, #4
   1d4e0:	mov	r0, r1
   1d4e4:	mov	r1, r4
   1d4e8:	bl	1df38 <__assert_fail@plt+0xb37c>
   1d4ec:	mov	r1, r0
   1d4f0:	mov	r0, #0
   1d4f4:	cmp	r1, #0
   1d4f8:	beq	1d520 <__assert_fail@plt+0xa964>
   1d4fc:	ldr	r0, [sp, #4]
   1d500:	bl	2151c <__assert_fail@plt+0xe960>
   1d504:	movw	r1, #24196	; 0x5e84
   1d508:	movt	r1, #5
   1d50c:	str	r0, [r1, #60]	; 0x3c
   1d510:	mov	r0, r5
   1d514:	mov	r1, r4
   1d518:	bl	1e1c4 <__assert_fail@plt+0xb608>
   1d51c:	mov	r0, #1
   1d520:	sub	sp, fp, #8
   1d524:	pop	{r4, r5, fp, pc}
   1d528:	push	{r4, r5, r6, r7, fp, lr}
   1d52c:	add	fp, sp, #16
   1d530:	sub	sp, sp, #216	; 0xd8
   1d534:	mov	r5, r2
   1d538:	mov	r6, r1
   1d53c:	mov	r4, r0
   1d540:	add	r7, sp, #112	; 0x70
   1d544:	mov	r0, r7
   1d548:	bl	18214 <__assert_fail@plt+0x5658>
   1d54c:	add	r3, sp, #4
   1d550:	mov	r0, r6
   1d554:	mov	r1, r5
   1d558:	mov	r2, r7
   1d55c:	bl	1e14c <__assert_fail@plt+0xb590>
   1d560:	mov	r1, r0
   1d564:	mov	r0, #0
   1d568:	cmp	r1, #0
   1d56c:	beq	1d6c4 <__assert_fail@plt+0xab08>
   1d570:	add	r0, sp, #8
   1d574:	bl	18214 <__assert_fail@plt+0x5658>
   1d578:	movw	r7, #24196	; 0x5e84
   1d57c:	movt	r7, #5
   1d580:	ldr	r0, [r7, #48]	; 0x30
   1d584:	mov	r1, #0
   1d588:	cmp	r0, #0
   1d58c:	bne	1d5b8 <__assert_fail@plt+0xa9fc>
   1d590:	ldrb	r0, [r7, #56]	; 0x38
   1d594:	mov	r1, #32768	; 0x8000
   1d598:	cmp	r0, #0
   1d59c:	bne	1d5b8 <__assert_fail@plt+0xa9fc>
   1d5a0:	ldr	r0, [sp, #128]	; 0x80
   1d5a4:	and	r0, r0, #61440	; 0xf000
   1d5a8:	mvn	r5, #1
   1d5ac:	cmp	r0, #40960	; 0xa000
   1d5b0:	mov	r1, #0
   1d5b4:	beq	1d680 <__assert_fail@plt+0xaac4>
   1d5b8:	ldr	r6, [sp, #4]
   1d5bc:	mov	r0, r6
   1d5c0:	bl	202b0 <__assert_fail@plt+0xd6f4>
   1d5c4:	mov	r5, r0
   1d5c8:	cmp	r0, #0
   1d5cc:	blt	1d680 <__assert_fail@plt+0xaac4>
   1d5d0:	add	r1, sp, #8
   1d5d4:	mov	r0, r5
   1d5d8:	bl	3e8f4 <__assert_fail@plt+0x2bd38>
   1d5dc:	cmp	r0, #0
   1d5e0:	bne	1d6cc <__assert_fail@plt+0xab10>
   1d5e4:	ldr	r2, [r7, #52]	; 0x34
   1d5e8:	add	r1, sp, #112	; 0x70
   1d5ec:	mov	r0, r6
   1d5f0:	blx	r2
   1d5f4:	cmp	r0, #0
   1d5f8:	bne	1d6cc <__assert_fail@plt+0xab10>
   1d5fc:	ldr	r0, [r7, #48]	; 0x30
   1d600:	cmp	r0, #0
   1d604:	ldrbeq	r0, [r7, #56]	; 0x38
   1d608:	cmpeq	r0, #0
   1d60c:	beq	1d624 <__assert_fail@plt+0xaa68>
   1d610:	add	r0, sp, #112	; 0x70
   1d614:	add	r1, sp, #8
   1d618:	mov	r2, #104	; 0x68
   1d61c:	bl	125c8 <memcpy@plt>
   1d620:	b	1d680 <__assert_fail@plt+0xaac4>
   1d624:	ldr	r0, [sp, #128]	; 0x80
   1d628:	and	r0, r0, #61440	; 0xf000
   1d62c:	cmp	r0, #40960	; 0xa000
   1d630:	beq	1d674 <__assert_fail@plt+0xaab8>
   1d634:	ldr	r0, [sp, #8]
   1d638:	ldr	r1, [sp, #12]
   1d63c:	ldr	r2, [sp, #112]	; 0x70
   1d640:	ldr	r3, [sp, #116]	; 0x74
   1d644:	eor	r1, r3, r1
   1d648:	eor	r0, r2, r0
   1d64c:	orrs	r0, r0, r1
   1d650:	bne	1d674 <__assert_fail@plt+0xaab8>
   1d654:	ldr	r0, [sp, #104]	; 0x68
   1d658:	ldr	r1, [sp, #108]	; 0x6c
   1d65c:	ldr	r2, [sp, #208]	; 0xd0
   1d660:	ldr	r3, [sp, #212]	; 0xd4
   1d664:	eor	r1, r3, r1
   1d668:	eor	r0, r2, r0
   1d66c:	orrs	r0, r0, r1
   1d670:	beq	1d680 <__assert_fail@plt+0xaac4>
   1d674:	mov	r0, r5
   1d678:	bl	12b74 <close@plt>
   1d67c:	mvn	r5, #0
   1d680:	ldr	r1, [sp, #4]
   1d684:	mov	r0, r4
   1d688:	bl	17f4c <__assert_fail@plt+0x5390>
   1d68c:	mov	r1, r0
   1d690:	ldr	r2, [sp, #208]	; 0xd0
   1d694:	ldr	r3, [sp, #212]	; 0xd4
   1d698:	ldr	r7, [sp, #112]	; 0x70
   1d69c:	ldr	r6, [sp, #116]	; 0x74
   1d6a0:	mov	r0, #1
   1d6a4:	strh	r0, [r1, #18]
   1d6a8:	movw	r4, #55050	; 0xd70a
   1d6ac:	movt	r4, #15395	; 0x3c23
   1d6b0:	str	r4, [r1, #28]
   1d6b4:	add	ip, r1, #40	; 0x28
   1d6b8:	stm	ip, {r2, r3, r7}
   1d6bc:	str	r6, [r1, #52]	; 0x34
   1d6c0:	str	r5, [r1, #56]	; 0x38
   1d6c4:	sub	sp, fp, #16
   1d6c8:	pop	{r4, r5, r6, r7, fp, pc}
   1d6cc:	bl	128d4 <__errno_location@plt>
   1d6d0:	ldr	r0, [r0]
   1d6d4:	mov	r1, r6
   1d6d8:	bl	19390 <__assert_fail@plt+0x67d4>
   1d6dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d6e0:	add	fp, sp, #28
   1d6e4:	sub	sp, sp, #28
   1d6e8:	mov	r8, r0
   1d6ec:	mov	r0, #0
   1d6f0:	cmp	r1, #0
   1d6f4:	beq	1d904 <__assert_fail@plt+0xad48>
   1d6f8:	mov	sl, r2
   1d6fc:	mov	r7, r1
   1d700:	ldr	r1, [r2]
   1d704:	ldr	r5, [r7, r1, lsl #2]
   1d708:	cmp	r5, #0
   1d70c:	beq	1d904 <__assert_fail@plt+0xad48>
   1d710:	mov	r0, r5
   1d714:	bl	1288c <strlen@plt>
   1d718:	cmp	r0, #0
   1d71c:	beq	1d9b0 <__assert_fail@plt+0xadf4>
   1d720:	sub	r4, r0, #1
   1d724:	ldrb	r0, [r5, r4]
   1d728:	sub	r0, r0, #48	; 0x30
   1d72c:	cmp	r0, #71	; 0x47
   1d730:	bhi	1d980 <__assert_fail@plt+0xadc4>
   1d734:	mov	r6, #512	; 0x200
   1d738:	mov	r9, #0
   1d73c:	add	r1, pc, #0
   1d740:	ldr	pc, [r1, r0, lsl #2]
   1d744:	andeq	sp, r1, r4, ror #16
   1d748:	andeq	sp, r1, r4, ror #16
   1d74c:	andeq	sp, r1, r4, ror #16
   1d750:	andeq	sp, r1, r4, ror #16
   1d754:	andeq	sp, r1, r4, ror #16
   1d758:	andeq	sp, r1, r4, ror #16
   1d75c:	andeq	sp, r1, r4, ror #16
   1d760:	andeq	sp, r1, r4, ror #16
   1d764:	andeq	sp, r1, r4, ror #16
   1d768:	andeq	sp, r1, r4, ror #16
   1d76c:	andeq	sp, r1, r0, lsl #19
   1d770:	andeq	sp, r1, r0, lsl #19
   1d774:	andeq	sp, r1, r0, lsl #19
   1d778:	andeq	sp, r1, r0, lsl #19
   1d77c:	andeq	sp, r1, r0, lsl #19
   1d780:	andeq	sp, r1, r0, lsl #19
   1d784:	andeq	sp, r1, r0, lsl #19
   1d788:	andeq	sp, r1, r0, lsl #19
   1d78c:	andeq	sp, r1, r0, lsl #19
   1d790:	andeq	sp, r1, r0, lsl #19
   1d794:	andeq	sp, r1, r0, lsl #19
   1d798:	andeq	sp, r1, r0, lsl #19
   1d79c:	andeq	sp, r1, r0, lsl #19
   1d7a0:	andeq	sp, r1, r4, asr #18
   1d7a4:	andeq	sp, r1, r0, lsl #19
   1d7a8:	andeq	sp, r1, r0, lsl #19
   1d7ac:	andeq	sp, r1, r0, lsl #19
   1d7b0:	andeq	sp, r1, r0, lsl #19
   1d7b4:	andeq	sp, r1, r0, lsl #19
   1d7b8:	andeq	sp, r1, ip, lsl #18
   1d7bc:	andeq	sp, r1, r0, lsl #19
   1d7c0:	andeq	sp, r1, r0, lsl #19
   1d7c4:	andeq	sp, r1, r0, lsl #19
   1d7c8:	andeq	sp, r1, r0, lsl #19
   1d7cc:	andeq	sp, r1, r0, lsl #19
   1d7d0:	andeq	sp, r1, r0, lsl #19
   1d7d4:	andeq	sp, r1, r0, lsl #19
   1d7d8:	andeq	sp, r1, r0, lsl #19
   1d7dc:	andeq	sp, r1, r0, lsl #19
   1d7e0:	andeq	sp, r1, r0, lsl #19
   1d7e4:	andeq	sp, r1, r0, lsl #19
   1d7e8:	andeq	sp, r1, r0, lsl #19
   1d7ec:	andeq	sp, r1, r0, lsl #19
   1d7f0:	andeq	sp, r1, r0, lsl #19
   1d7f4:	andeq	sp, r1, r0, lsl #19
   1d7f8:	andeq	sp, r1, r0, lsl #19
   1d7fc:	andeq	sp, r1, r0, lsl #19
   1d800:	andeq	sp, r1, r0, lsl #19
   1d804:	andeq	sp, r1, r0, lsl #19
   1d808:	andeq	sp, r1, r0, lsl #19
   1d80c:	andeq	sp, r1, r0, lsr #18
   1d810:	andeq	sp, r1, r8, asr r9
   1d814:	andeq	sp, r1, r0, lsl #19
   1d818:	andeq	sp, r1, r0, lsl #19
   1d81c:	andeq	sp, r1, r0, lsl #19
   1d820:	andeq	sp, r1, r0, lsl #19
   1d824:	andeq	sp, r1, r0, lsl #19
   1d828:	andeq	sp, r1, r0, lsl #19
   1d82c:	andeq	sp, r1, r0, lsl #19
   1d830:	andeq	sp, r1, ip, ror #18
   1d834:	andeq	sp, r1, r0, lsl #19
   1d838:	andeq	sp, r1, r0, lsl #19
   1d83c:	andeq	sp, r1, r0, lsl #19
   1d840:	andeq	sp, r1, r0, lsl #19
   1d844:	andeq	sp, r1, r0, lsl #19
   1d848:	andeq	sp, r1, r0, lsl #19
   1d84c:	andeq	sp, r1, r0, lsl #19
   1d850:	andeq	sp, r1, r0, lsl #19
   1d854:	andeq	sp, r1, r0, lsl #19
   1d858:	andeq	sp, r1, r0, lsl #19
   1d85c:	andeq	sp, r1, r0, lsl #19
   1d860:	andeq	sp, r1, r0, lsr r9
   1d864:	add	r1, sp, #16
   1d868:	add	r2, sp, #12
   1d86c:	mov	r0, r5
   1d870:	bl	1ebb4 <__assert_fail@plt+0xbff8>
   1d874:	cmp	r0, #0
   1d878:	beq	1d9d4 <__assert_fail@plt+0xae18>
   1d87c:	mov	r0, r8
   1d880:	mov	r1, r5
   1d884:	bl	17f4c <__assert_fail@plt+0x5390>
   1d888:	ldr	r3, [sp, #12]
   1d88c:	ldr	r2, [sp, #16]
   1d890:	ldr	r1, [sp, #20]
   1d894:	mov	r7, #1
   1d898:	strh	r7, [r0, #18]
   1d89c:	str	r3, [r0, #40]	; 0x28
   1d8a0:	str	r6, [r0, #44]	; 0x2c
   1d8a4:	str	r2, [r0, #48]	; 0x30
   1d8a8:	str	r1, [r0, #52]	; 0x34
   1d8ac:	cmp	r3, #1
   1d8b0:	beq	1d8cc <__assert_fail@plt+0xad10>
   1d8b4:	cmp	r3, #0
   1d8b8:	bne	1d8ec <__assert_fail@plt+0xad30>
   1d8bc:	umull	r2, r3, r2, r6
   1d8c0:	mla	r1, r1, r6, r3
   1d8c4:	add	r3, pc, #336	; 0x150
   1d8c8:	b	1d8d8 <__assert_fail@plt+0xad1c>
   1d8cc:	umull	r2, r3, r2, r6
   1d8d0:	mla	r1, r1, r6, r3
   1d8d4:	add	r3, pc, #312	; 0x138
   1d8d8:	rsbs	r2, r2, #20480	; 0x5000
   1d8dc:	rscs	r1, r1, #0
   1d8e0:	addcc	r3, r3, #4
   1d8e4:	vldr	s0, [r3]
   1d8e8:	b	1d8f0 <__assert_fail@plt+0xad34>
   1d8ec:	vldr	s0, [pc, #284]	; 1da10 <__assert_fail@plt+0xae54>
   1d8f0:	vstr	s0, [r0, #28]
   1d8f4:	ldr	r0, [sl]
   1d8f8:	add	r0, r0, #1
   1d8fc:	str	r0, [sl]
   1d900:	mov	r0, #1
   1d904:	sub	sp, fp, #28
   1d908:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d90c:	mov	r0, #0
   1d910:	strb	r0, [r5, r4]
   1d914:	mov	r6, #1048576	; 0x100000
   1d918:	mov	r9, #77	; 0x4d
   1d91c:	b	1d864 <__assert_fail@plt+0xaca8>
   1d920:	mov	r0, #0
   1d924:	strb	r0, [r5, r4]
   1d928:	mov	r9, #98	; 0x62
   1d92c:	b	1d864 <__assert_fail@plt+0xaca8>
   1d930:	mov	r0, #0
   1d934:	strb	r0, [r5, r4]
   1d938:	mov	r6, #2
   1d93c:	mov	r9, #119	; 0x77
   1d940:	b	1d864 <__assert_fail@plt+0xaca8>
   1d944:	mov	r0, #0
   1d948:	strb	r0, [r5, r4]
   1d94c:	mov	r6, #1073741824	; 0x40000000
   1d950:	mov	r9, #71	; 0x47
   1d954:	b	1d864 <__assert_fail@plt+0xaca8>
   1d958:	mov	r0, #0
   1d95c:	strb	r0, [r5, r4]
   1d960:	mov	r6, #1
   1d964:	mov	r9, #99	; 0x63
   1d968:	b	1d864 <__assert_fail@plt+0xaca8>
   1d96c:	mov	r0, #0
   1d970:	strb	r0, [r5, r4]
   1d974:	mov	r6, #1024	; 0x400
   1d978:	mov	r9, #107	; 0x6b
   1d97c:	b	1d864 <__assert_fail@plt+0xaca8>
   1d980:	movw	r1, #9139	; 0x23b3
   1d984:	movt	r1, #4
   1d988:	mov	r0, #0
   1d98c:	mov	r2, #5
   1d990:	bl	1264c <dcgettext@plt>
   1d994:	mov	r2, r0
   1d998:	ldr	r0, [sl]
   1d99c:	ldr	r0, [r7, r0, lsl #2]
   1d9a0:	ldrb	r3, [r0, r4]
   1d9a4:	mov	r0, #1
   1d9a8:	mov	r1, #0
   1d9ac:	bl	12790 <error@plt>
   1d9b0:	movw	r1, #9108	; 0x2394
   1d9b4:	movt	r1, #4
   1d9b8:	mov	r0, #0
   1d9bc:	mov	r2, #5
   1d9c0:	bl	1264c <dcgettext@plt>
   1d9c4:	mov	r2, r0
   1d9c8:	mov	r0, #1
   1d9cc:	mov	r1, #0
   1d9d0:	bl	12790 <error@plt>
   1d9d4:	mov	r0, #0
   1d9d8:	strb	r0, [sp, #11]
   1d9dc:	strb	r9, [sp, #10]
   1d9e0:	movw	r1, #9163	; 0x23cb
   1d9e4:	movt	r1, #4
   1d9e8:	mov	r0, #0
   1d9ec:	mov	r2, #5
   1d9f0:	bl	1264c <dcgettext@plt>
   1d9f4:	mov	r2, r0
   1d9f8:	add	r0, sp, #10
   1d9fc:	str	r0, [sp]
   1da00:	mov	r0, #1
   1da04:	mov	r1, #0
   1da08:	mov	r3, r5
   1da0c:	bl	12790 <error@plt>
   1da10:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1da14:	stclcc	12, cr12, [ip, #820]	; 0x334
   1da18:	svccc	0x00666666
   1da1c:	svccc	0x00666666
   1da20:	stclcc	12, cr12, [ip, #820]	; 0x334
   1da24:	mov	ip, r2
   1da28:	mov	r2, r0
   1da2c:	movw	r3, #20128	; 0x4ea0
   1da30:	movt	r3, #1
   1da34:	mov	r0, r1
   1da38:	mov	r1, ip
   1da3c:	b	1f0e0 <__assert_fail@plt+0xc524>
   1da40:	push	{r4, sl, fp, lr}
   1da44:	add	fp, sp, #8
   1da48:	mov	r4, r2
   1da4c:	mov	r2, r0
   1da50:	mov	r0, r1
   1da54:	mov	r1, r4
   1da58:	bl	1ea80 <__assert_fail@plt+0xbec4>
   1da5c:	cmp	r0, #0
   1da60:	beq	1da88 <__assert_fail@plt+0xaecc>
   1da64:	add	r1, pc, #48	; 0x30
   1da68:	ldrd	r2, [r0, #48]	; 0x30
   1da6c:	subs	r2, r2, #100	; 0x64
   1da70:	sbcs	r2, r3, #0
   1da74:	addcc	r1, r1, #4
   1da78:	vldr	s0, [r1]
   1da7c:	vstr	s0, [r0, #28]
   1da80:	mov	r0, #1
   1da84:	pop	{r4, sl, fp, pc}
   1da88:	ldr	r0, [r4]
   1da8c:	sub	r0, r0, #1
   1da90:	str	r0, [r4]
   1da94:	mov	r0, #0
   1da98:	pop	{r4, sl, fp, pc}
   1da9c:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1daa0:	svccc	0x007d70a4
   1daa4:	nop	{0}
   1daa8:	push	{r4, r5, r6, sl, fp, lr}
   1daac:	add	fp, sp, #16
   1dab0:	sub	sp, sp, #24
   1dab4:	mov	r3, r2
   1dab8:	mov	r5, r0
   1dabc:	add	r2, sp, #4
   1dac0:	mov	r0, r1
   1dac4:	mov	r1, r3
   1dac8:	bl	1df38 <__assert_fail@plt+0xb37c>
   1dacc:	mov	r1, r0
   1dad0:	mov	r0, #0
   1dad4:	cmp	r1, #0
   1dad8:	beq	1db5c <__assert_fail@plt+0xafa0>
   1dadc:	ldr	r4, [sp, #4]
   1dae0:	movw	r0, #6903	; 0x1af7
   1dae4:	movt	r0, #4
   1dae8:	vldr	d0, [pc, #160]	; 1db90 <__assert_fail@plt+0xafd4>
   1daec:	str	r0, [sp]
   1daf0:	add	r6, sp, #8
   1daf4:	mov	r0, r4
   1daf8:	mov	r1, r6
   1dafc:	mov	r2, #0
   1db00:	mov	r3, #0
   1db04:	bl	1df60 <__assert_fail@plt+0xb3a4>
   1db08:	cmp	r0, #0
   1db0c:	beq	1db64 <__assert_fail@plt+0xafa8>
   1db10:	mov	r0, r5
   1db14:	mov	r1, r4
   1db18:	bl	17f4c <__assert_fail@plt+0x5390>
   1db1c:	mov	r4, r0
   1db20:	mov	r0, #8
   1db24:	vld1.64	{d16-d17}, [r6], r0
   1db28:	add	r0, r4, #40	; 0x28
   1db2c:	vst1.64	{d16-d17}, [r0]
   1db30:	ldr	r0, [r6]
   1db34:	movw	r1, #17671	; 0x4507
   1db38:	movt	r1, #49710	; 0xc22e
   1db3c:	smmla	r0, r0, r1, r0
   1db40:	asr	r1, r0, #16
   1db44:	add	r0, r1, r0, lsr #31
   1db48:	vmov	s0, r0
   1db4c:	vcvt.f32.s32	s0, s0
   1db50:	bl	1c004 <__assert_fail@plt+0x9448>
   1db54:	vstr	s0, [r4, #28]
   1db58:	mov	r0, #1
   1db5c:	sub	sp, fp, #16
   1db60:	pop	{r4, r5, r6, sl, fp, pc}
   1db64:	movw	r1, #9570	; 0x2562
   1db68:	movt	r1, #4
   1db6c:	mov	r0, #0
   1db70:	mov	r2, #5
   1db74:	bl	1264c <dcgettext@plt>
   1db78:	mov	r2, r0
   1db7c:	mov	r0, #1
   1db80:	mov	r1, #0
   1db84:	mov	r3, r4
   1db88:	bl	12790 <error@plt>
   1db8c:	nop	{0}
   1db90:	andeq	r0, r0, r0
   1db94:	rscsmi	r1, r5, r0, lsl #16
   1db98:	push	{r4, r5, r6, sl, fp, lr}
   1db9c:	add	fp, sp, #16
   1dba0:	vpush	{d8}
   1dba4:	sub	sp, sp, #8
   1dba8:	mov	r3, r2
   1dbac:	mov	r5, r0
   1dbb0:	add	r2, sp, #4
   1dbb4:	mov	r0, r1
   1dbb8:	mov	r1, r3
   1dbbc:	bl	1df38 <__assert_fail@plt+0xb37c>
   1dbc0:	mov	r1, r0
   1dbc4:	mov	r0, #0
   1dbc8:	cmp	r1, #0
   1dbcc:	beq	1dc58 <__assert_fail@plt+0xb09c>
   1dbd0:	ldr	r4, [sp, #4]
   1dbd4:	mov	r0, r4
   1dbd8:	bl	124a8 <getpwnam@plt>
   1dbdc:	mov	r6, r0
   1dbe0:	bl	12a00 <endpwent@plt>
   1dbe4:	cmp	r6, #0
   1dbe8:	beq	1dbf4 <__assert_fail@plt+0xb038>
   1dbec:	ldr	r6, [r6, #8]
   1dbf0:	b	1dc30 <__assert_fail@plt+0xb074>
   1dbf4:	movw	r1, #8180	; 0x1ff4
   1dbf8:	movt	r1, #4
   1dbfc:	mov	r0, r4
   1dc00:	bl	12bb0 <strspn@plt>
   1dc04:	cmp	r0, #0
   1dc08:	beq	1dc64 <__assert_fail@plt+0xb0a8>
   1dc0c:	ldrb	r0, [r4, r0]
   1dc10:	cmp	r0, #0
   1dc14:	bne	1dc64 <__assert_fail@plt+0xb0a8>
   1dc18:	movw	r0, #24196	; 0x5e84
   1dc1c:	movt	r0, #5
   1dc20:	ldr	r1, [r0, #72]	; 0x48
   1dc24:	mov	r0, r4
   1dc28:	bl	21700 <__assert_fail@plt+0xeb44>
   1dc2c:	mov	r6, r0
   1dc30:	add	r0, pc, #160	; 0xa0
   1dc34:	cmp	r6, #100	; 0x64
   1dc38:	addcc	r0, r0, #4
   1dc3c:	vldr	s16, [r0]
   1dc40:	mov	r0, r5
   1dc44:	mov	r1, r4
   1dc48:	bl	17f4c <__assert_fail@plt+0x5390>
   1dc4c:	str	r6, [r0, #40]	; 0x28
   1dc50:	vstr	s16, [r0, #28]
   1dc54:	mov	r0, #1
   1dc58:	sub	sp, fp, #24
   1dc5c:	vpop	{d8}
   1dc60:	pop	{r4, r5, r6, sl, fp, pc}
   1dc64:	ldrb	r0, [r4]
   1dc68:	cmp	r0, #0
   1dc6c:	bne	1dc94 <__assert_fail@plt+0xb0d8>
   1dc70:	movw	r1, #9634	; 0x25a2
   1dc74:	movt	r1, #4
   1dc78:	mov	r0, #0
   1dc7c:	mov	r2, #5
   1dc80:	bl	1264c <dcgettext@plt>
   1dc84:	mov	r2, r0
   1dc88:	mov	r0, #1
   1dc8c:	mov	r1, #0
   1dc90:	bl	12790 <error@plt>
   1dc94:	movw	r1, #9599	; 0x257f
   1dc98:	movt	r1, #4
   1dc9c:	mov	r0, #0
   1dca0:	mov	r2, #5
   1dca4:	bl	1264c <dcgettext@plt>
   1dca8:	mov	r5, r0
   1dcac:	movw	r0, #24196	; 0x5e84
   1dcb0:	movt	r0, #5
   1dcb4:	ldr	r1, [r0, #72]	; 0x48
   1dcb8:	mov	r0, #0
   1dcbc:	mov	r2, r4
   1dcc0:	bl	2a024 <__assert_fail@plt+0x17468>
   1dcc4:	mov	r3, r0
   1dcc8:	mov	r0, #1
   1dccc:	mov	r1, #0
   1dcd0:	mov	r2, r5
   1dcd4:	bl	12790 <error@plt>
   1dcd8:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1dcdc:	svccc	0x007d70a4
   1dce0:	push	{fp, lr}
   1dce4:	mov	fp, sp
   1dce8:	sub	sp, sp, #8
   1dcec:	movw	r3, #19152	; 0x4ad0
   1dcf0:	movt	r3, #1
   1dcf4:	str	r3, [sp]
   1dcf8:	movw	r3, #8856	; 0x2298
   1dcfc:	movt	r3, #4
   1dd00:	bl	1edcc <__assert_fail@plt+0xc210>
   1dd04:	mov	sp, fp
   1dd08:	pop	{fp, pc}
   1dd0c:	mov	ip, r2
   1dd10:	mov	r2, r0
   1dd14:	movw	r3, #20576	; 0x5060
   1dd18:	movt	r3, #1
   1dd1c:	mov	r0, r1
   1dd20:	mov	r1, ip
   1dd24:	b	1f0e0 <__assert_fail@plt+0xc524>
   1dd28:	push	{fp, lr}
   1dd2c:	mov	fp, sp
   1dd30:	bl	1ea58 <__assert_fail@plt+0xbe9c>
   1dd34:	mov	r0, #1
   1dd38:	pop	{fp, pc}
   1dd3c:	push	{fp, lr}
   1dd40:	mov	fp, sp
   1dd44:	bl	17f88 <__assert_fail@plt+0x53cc>
   1dd48:	mov	r1, #0
   1dd4c:	strh	r1, [r0, #18]
   1dd50:	mov	r1, #1065353216	; 0x3f800000
   1dd54:	str	r1, [r0, #28]
   1dd58:	mov	r0, #1
   1dd5c:	pop	{fp, pc}
   1dd60:	push	{fp, lr}
   1dd64:	mov	fp, sp
   1dd68:	mov	r0, #0
   1dd6c:	bl	17f90 <__assert_fail@plt+0x53d4>
   1dd70:	push	{fp, lr}
   1dd74:	mov	fp, sp
   1dd78:	sub	sp, sp, #8
   1dd7c:	movw	r0, #59732	; 0xe954
   1dd80:	movt	r0, #3
   1dd84:	bl	20664 <__assert_fail@plt+0xdaa8>
   1dd88:	mov	r5, #0
   1dd8c:	movw	r1, #9676	; 0x25cc
   1dd90:	movt	r1, #4
   1dd94:	mov	r0, #0
   1dd98:	mov	r2, #5
   1dd9c:	bl	1264c <dcgettext@plt>
   1dda0:	bl	124fc <printf@plt>
   1dda4:	movw	r0, #9695	; 0x25df
   1dda8:	movt	r0, #4
   1ddac:	bl	124fc <printf@plt>
   1ddb0:	movw	r4, #24196	; 0x5e84
   1ddb4:	movt	r4, #5
   1ddb8:	ldrb	r0, [r4, #56]	; 0x38
   1ddbc:	movw	r2, #9727	; 0x25ff
   1ddc0:	movt	r2, #4
   1ddc4:	movw	r1, #9719	; 0x25f7
   1ddc8:	movt	r1, #4
   1ddcc:	cmp	r0, #0
   1ddd0:	moveq	r1, r2
   1ddd4:	movw	r0, #9703	; 0x25e7
   1ddd8:	movt	r0, #4
   1dddc:	bl	124fc <printf@plt>
   1dde0:	movw	r0, #9736	; 0x2608
   1dde4:	movt	r0, #4
   1dde8:	bl	124fc <printf@plt>
   1ddec:	bl	124b4 <is_selinux_enabled@plt>
   1ddf0:	cmp	r0, #1
   1ddf4:	blt	1de04 <__assert_fail@plt+0xb248>
   1ddf8:	movw	r0, #9755	; 0x261b
   1ddfc:	movt	r0, #4
   1de00:	bl	124fc <printf@plt>
   1de04:	str	r5, [sp, #4]
   1de08:	add	r0, sp, #4
   1de0c:	bl	13310 <__assert_fail@plt+0x754>
   1de10:	cmp	r0, #0
   1de14:	beq	1de48 <__assert_fail@plt+0xb28c>
   1de18:	movw	r0, #9764	; 0x2624
   1de1c:	movt	r0, #4
   1de20:	bl	124fc <printf@plt>
   1de24:	ldrb	r0, [sp, #5]
   1de28:	tst	r0, #2
   1de2c:	beq	1de3c <__assert_fail@plt+0xb280>
   1de30:	movw	r0, #9769	; 0x2629
   1de34:	movt	r0, #4
   1de38:	bl	124fc <printf@plt>
   1de3c:	movw	r0, #62445	; 0xf3ed
   1de40:	movt	r0, #3
   1de44:	bl	124fc <printf@plt>
   1de48:	ldrh	r1, [r4, #68]	; 0x44
   1de4c:	movw	r0, #9779	; 0x2633
   1de50:	movt	r0, #4
   1de54:	bl	124fc <printf@plt>
   1de58:	mov	r0, #10
   1de5c:	bl	1291c <putchar@plt>
   1de60:	mov	r0, #0
   1de64:	bl	1285c <exit@plt>
   1de68:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1de6c:	add	fp, sp, #24
   1de70:	sub	sp, sp, #32
   1de74:	mov	r5, r3
   1de78:	mov	r4, r2
   1de7c:	mov	r8, r0
   1de80:	ldr	r9, [r2]
   1de84:	add	r2, sp, #28
   1de88:	mov	r0, r1
   1de8c:	mov	r1, r4
   1de90:	bl	1df38 <__assert_fail@plt+0xb37c>
   1de94:	mov	r6, #0
   1de98:	cmp	r0, #0
   1de9c:	beq	1df20 <__assert_fail@plt+0xb364>
   1dea0:	str	r5, [sp, #8]
   1dea4:	movw	r0, #24196	; 0x5e84
   1dea8:	movt	r0, #5
   1deac:	ldr	r1, [r0, #28]
   1deb0:	ldr	r3, [r0, #32]
   1deb4:	ldr	r5, [sp, #28]
   1deb8:	movw	r0, #6705	; 0x1a31
   1debc:	movt	r0, #4
   1dec0:	vldr	d0, [pc, #104]	; 1df30 <__assert_fail@plt+0xb374>
   1dec4:	str	r0, [sp]
   1dec8:	add	r0, r1, #4480	; 0x1180
   1decc:	add	r2, r0, #81920	; 0x14000
   1ded0:	add	r7, sp, #8
   1ded4:	mov	r0, r5
   1ded8:	mov	r1, r7
   1dedc:	bl	1df60 <__assert_fail@plt+0xb3a4>
   1dee0:	cmp	r0, #0
   1dee4:	beq	1df1c <__assert_fail@plt+0xb360>
   1dee8:	mov	r0, r8
   1deec:	mov	r1, r5
   1def0:	bl	17f4c <__assert_fail@plt+0x5390>
   1def4:	mov	r4, r0
   1def8:	mov	r0, #8
   1defc:	vld1.64	{d16-d17}, [r7], r0
   1df00:	add	r0, r4, #40	; 0x28
   1df04:	vst1.64	{d16-d17}, [r0]
   1df08:	ldr	r0, [r7]
   1df0c:	bl	1bfd4 <__assert_fail@plt+0x9418>
   1df10:	vstr	s0, [r4, #28]
   1df14:	mov	r6, #1
   1df18:	b	1df20 <__assert_fail@plt+0xb364>
   1df1c:	str	r9, [r4]
   1df20:	mov	r0, r6
   1df24:	sub	sp, fp, #24
   1df28:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1df2c:	nop	{0}
   1df30:	andeq	r0, r0, r0
   1df34:	submi	r0, lr, r0
   1df38:	push	{r4, sl, fp, lr}
   1df3c:	add	fp, sp, #8
   1df40:	sub	sp, sp, #8
   1df44:	mov	r4, r2
   1df48:	add	r2, sp, #4
   1df4c:	bl	1e0d8 <__assert_fail@plt+0xb51c>
   1df50:	ldr	r1, [sp, #4]
   1df54:	str	r1, [r4]
   1df58:	sub	sp, fp, #8
   1df5c:	pop	{r4, sl, fp, pc}
   1df60:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1df64:	add	fp, sp, #24
   1df68:	vpush	{d8}
   1df6c:	sub	sp, sp, #24
   1df70:	vmov.f64	d8, d0
   1df74:	mov	r8, r3
   1df78:	mov	r6, r2
   1df7c:	mov	r4, r1
   1df80:	str	r0, [sp, #20]
   1df84:	add	r5, r1, #4
   1df88:	add	r0, sp, #20
   1df8c:	mov	r1, r5
   1df90:	bl	1e10c <__assert_fail@plt+0xb550>
   1df94:	ldr	r0, [r4, #4]
   1df98:	cmp	r0, #1
   1df9c:	beq	1dfb0 <__assert_fail@plt+0xb3f4>
   1dfa0:	cmp	r0, #0
   1dfa4:	bne	1dfb8 <__assert_fail@plt+0xb3fc>
   1dfa8:	mov	r0, #1
   1dfac:	b	1dfb4 <__assert_fail@plt+0xb3f8>
   1dfb0:	mov	r0, #0
   1dfb4:	str	r0, [r5]
   1dfb8:	ldr	r7, [sp, #20]
   1dfbc:	mov	r5, #0
   1dfc0:	add	r2, sp, #8
   1dfc4:	movw	r3, #10572	; 0x294c
   1dfc8:	movt	r3, #1
   1dfcc:	mov	r0, r7
   1dfd0:	mov	r1, #0
   1dfd4:	bl	2b9c0 <__assert_fail@plt+0x18e04>
   1dfd8:	cmp	r0, #0
   1dfdc:	beq	1e08c <__assert_fail@plt+0xb4d0>
   1dfe0:	vldr	d16, [sp, #8]
   1dfe4:	mov	r0, sp
   1dfe8:	vmul.f64	d0, d16, d8
   1dfec:	bl	1282c <modf@plt>
   1dff0:	vldr	d17, [pc, #216]	; 1e0d0 <__assert_fail@plt+0xb514>
   1dff4:	vmul.f64	d16, d0, d17
   1dff8:	vcmpe.f64	d16, d17
   1dffc:	vmrs	APSR_nzcv, fpscr
   1e000:	bpl	1e09c <__assert_fail@plt+0xb4e0>
   1e004:	vldr	d17, [sp]
   1e008:	vmov	s0, r6
   1e00c:	vcvt.f64.s32	d18, s0
   1e010:	vsub.f64	d18, d18, d17
   1e014:	vcvt.s32.f64	s0, d18
   1e018:	vcvt.s32.f64	s2, d18
   1e01c:	vstr	s0, [r4, #8]
   1e020:	vmov	r0, s2
   1e024:	mov	r1, #0
   1e028:	cmp	r6, r0
   1e02c:	mov	r2, #0
   1e030:	movwlt	r2, #1
   1e034:	vcmpe.f64	d17, #0.0
   1e038:	vmrs	APSR_nzcv, fpscr
   1e03c:	movwmi	r1, #1
   1e040:	cmp	r1, r2
   1e044:	bne	1e0bc <__assert_fail@plt+0xb500>
   1e048:	vmov	s0, r8
   1e04c:	vcvt.f64.s32	d17, s0
   1e050:	vsub.f64	d18, d17, d16
   1e054:	vcvt.s32.f64	s2, d18
   1e058:	vcvt.s32.f64	s0, d18
   1e05c:	vstr	s2, [r4, #12]
   1e060:	mov	r5, #1
   1e064:	vcmpe.f64	d16, d17
   1e068:	vmrs	APSR_nzcv, fpscr
   1e06c:	ble	1e08c <__assert_fail@plt+0xb4d0>
   1e070:	vmov	r1, s0
   1e074:	sub	r0, r0, #1
   1e078:	movw	r2, #51712	; 0xca00
   1e07c:	movt	r2, #15258	; 0x3b9a
   1e080:	add	r1, r1, r2
   1e084:	str	r0, [r4, #8]
   1e088:	str	r1, [r4, #12]
   1e08c:	mov	r0, r5
   1e090:	sub	sp, fp, #32
   1e094:	vpop	{d8}
   1e098:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e09c:	movw	r0, #6776	; 0x1a78
   1e0a0:	movt	r0, #4
   1e0a4:	movw	r1, #5943	; 0x1737
   1e0a8:	movt	r1, #4
   1e0ac:	movw	r3, #6802	; 0x1a92
   1e0b0:	movt	r3, #4
   1e0b4:	movw	r2, #3149	; 0xc4d
   1e0b8:	bl	12bbc <__assert_fail@plt>
   1e0bc:	ldr	r2, [fp, #8]
   1e0c0:	mov	r0, #1
   1e0c4:	mov	r1, #0
   1e0c8:	mov	r3, r7
   1e0cc:	bl	12790 <error@plt>
   1e0d0:	andeq	r0, r0, r0
   1e0d4:	bicmi	ip, sp, r5, ror #26
   1e0d8:	cmp	r0, #0
   1e0dc:	beq	1e100 <__assert_fail@plt+0xb544>
   1e0e0:	ldr	r3, [r1]
   1e0e4:	ldr	r0, [r0, r3, lsl #2]
   1e0e8:	cmp	r0, #0
   1e0ec:	strne	r0, [r2]
   1e0f0:	addne	r0, r3, #1
   1e0f4:	strne	r0, [r1]
   1e0f8:	movne	r0, #1
   1e0fc:	bxne	lr
   1e100:	mov	r0, #0
   1e104:	str	r0, [r2]
   1e108:	bx	lr
   1e10c:	ldr	r2, [r0]
   1e110:	ldrb	r2, [r2]
   1e114:	cmp	r2, #45	; 0x2d
   1e118:	beq	1e134 <__assert_fail@plt+0xb578>
   1e11c:	cmp	r2, #43	; 0x2b
   1e120:	movne	r0, #2
   1e124:	strne	r0, [r1]
   1e128:	bxne	lr
   1e12c:	mov	r2, #0
   1e130:	b	1e138 <__assert_fail@plt+0xb57c>
   1e134:	mov	r2, #1
   1e138:	str	r2, [r1]
   1e13c:	ldr	r1, [r0]
   1e140:	add	r1, r1, #1
   1e144:	str	r1, [r0]
   1e148:	bx	lr
   1e14c:	push	{r4, r5, fp, lr}
   1e150:	add	fp, sp, #8
   1e154:	sub	sp, sp, #8
   1e158:	mov	r5, r3
   1e15c:	mov	r4, r2
   1e160:	add	r2, sp, #4
   1e164:	bl	1df38 <__assert_fail@plt+0xb37c>
   1e168:	cmp	r0, #0
   1e16c:	beq	1e1a4 <__assert_fail@plt+0xb5e8>
   1e170:	ldr	r0, [sp, #4]
   1e174:	str	r0, [r5]
   1e178:	movw	r1, #24196	; 0x5e84
   1e17c:	movt	r1, #5
   1e180:	ldr	r2, [r1, #52]	; 0x34
   1e184:	mov	r1, r4
   1e188:	blx	r2
   1e18c:	mov	r1, r0
   1e190:	mov	r0, #1
   1e194:	cmp	r1, #0
   1e198:	bne	1e1b4 <__assert_fail@plt+0xb5f8>
   1e19c:	sub	sp, fp, #8
   1e1a0:	pop	{r4, r5, fp, pc}
   1e1a4:	mov	r0, #0
   1e1a8:	str	r0, [r5]
   1e1ac:	sub	sp, fp, #8
   1e1b0:	pop	{r4, r5, fp, pc}
   1e1b4:	bl	128d4 <__errno_location@plt>
   1e1b8:	ldr	r0, [r0]
   1e1bc:	ldr	r1, [sp, #4]
   1e1c0:	bl	19390 <__assert_fail@plt+0x67d4>
   1e1c4:	push	{r4, r5, fp, lr}
   1e1c8:	add	fp, sp, #8
   1e1cc:	mov	r4, r1
   1e1d0:	mov	r5, r0
   1e1d4:	bl	1e1e8 <__assert_fail@plt+0xb62c>
   1e1d8:	mov	r1, r5
   1e1dc:	mov	r2, r4
   1e1e0:	pop	{r4, r5, fp, lr}
   1e1e4:	b	1dd3c <__assert_fail@plt+0xb180>
   1e1e8:	movw	r0, #23788	; 0x5cec
   1e1ec:	movt	r0, #5
   1e1f0:	ldr	r1, [r0]
   1e1f4:	cmp	r1, #0
   1e1f8:	beq	1e204 <__assert_fail@plt+0xb648>
   1e1fc:	ldr	r0, [r0]
   1e200:	bx	lr
   1e204:	mov	r1, #81	; 0x51
   1e208:	subs	r1, r1, #1
   1e20c:	bne	1e208 <__assert_fail@plt+0xb64c>
   1e210:	movw	r1, #9812	; 0x2654
   1e214:	movt	r1, #4
   1e218:	add	r1, r1, #1296	; 0x510
   1e21c:	str	r1, [r0]
   1e220:	ldr	r0, [r0]
   1e224:	bx	lr
   1e228:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e22c:	add	fp, sp, #28
   1e230:	sub	sp, sp, #60	; 0x3c
   1e234:	mov	sl, r0
   1e238:	mov	r0, #0
   1e23c:	cmp	r2, #0
   1e240:	beq	1e604 <__assert_fail@plt+0xba48>
   1e244:	mov	r7, r3
   1e248:	mov	r5, r2
   1e24c:	ldr	r2, [r3]
   1e250:	ldr	r2, [r5, r2, lsl #2]
   1e254:	cmp	r2, #0
   1e258:	beq	1e604 <__assert_fail@plt+0xba48>
   1e25c:	ldr	r4, [r1, #12]
   1e260:	movw	r2, #7224	; 0x1c38
   1e264:	movt	r2, #4
   1e268:	mov	r0, r1
   1e26c:	mov	r1, r4
   1e270:	bl	17f14 <__assert_fail@plt+0x5358>
   1e274:	mov	r6, r0
   1e278:	movw	r0, #257	; 0x101
   1e27c:	str	r0, [r6, #16]
   1e280:	mov	r1, #0
   1e284:	str	r1, [r6, #144]	; 0x90
   1e288:	movw	r0, #18996	; 0x4a34
   1e28c:	movt	r0, #1
   1e290:	cmp	r4, r0
   1e294:	movne	r8, #1
   1e298:	movwne	r2, #18776	; 0x4958
   1e29c:	movtne	r2, #1
   1e2a0:	cmpne	r4, r2
   1e2a4:	bne	1e2bc <__assert_fail@plt+0xb700>
   1e2a8:	movw	r2, #24196	; 0x5e84
   1e2ac:	movt	r2, #5
   1e2b0:	mov	r1, #1
   1e2b4:	strb	r1, [r2, #80]	; 0x50
   1e2b8:	mov	r8, #0
   1e2bc:	strb	r1, [r6, #140]	; 0x8c
   1e2c0:	sub	r0, r4, r0
   1e2c4:	clz	r0, r0
   1e2c8:	lsr	r0, r0, #5
   1e2cc:	movw	r1, #17188	; 0x4324
   1e2d0:	movt	r1, #1
   1e2d4:	sub	r1, r4, r1
   1e2d8:	clz	r1, r1
   1e2dc:	lsr	r1, r1, #5
   1e2e0:	orr	r9, r1, r0
   1e2e4:	cmp	r9, #1
   1e2e8:	str	r4, [sp, #20]
   1e2ec:	bne	1e310 <__assert_fail@plt+0xb754>
   1e2f0:	mov	r0, #0
   1e2f4:	str	r0, [r6, #144]	; 0x90
   1e2f8:	movw	r1, #24196	; 0x5e84
   1e2fc:	movt	r1, #5
   1e300:	strb	r0, [r1, #14]
   1e304:	mov	r0, sl
   1e308:	bl	1e73c <__assert_fail@plt+0xbb80>
   1e30c:	b	1e328 <__assert_fail@plt+0xb76c>
   1e310:	movw	r0, #21888	; 0x5580
   1e314:	movt	r0, #5
   1e318:	ldr	r0, [r0]
   1e31c:	cmp	r0, #0
   1e320:	beq	1e630 <__assert_fail@plt+0xba74>
   1e324:	str	r0, [r6, #144]	; 0x90
   1e328:	add	r1, r6, #40	; 0x28
   1e32c:	mov	r0, #0
   1e330:	str	r1, [sp, #36]	; 0x24
   1e334:	strb	r0, [r1]
   1e338:	ldr	r1, [r7]
   1e33c:	mov	sl, r5
   1e340:	ldr	r4, [sl, r1, lsl #2]!
   1e344:	cmp	r4, #0
   1e348:	beq	1e404 <__assert_fail@plt+0xb848>
   1e34c:	str	r6, [sp, #28]
   1e350:	str	r5, [sp, #16]
   1e354:	str	r7, [sp, #32]
   1e358:	eor	r6, r9, #1
   1e35c:	eor	r5, r8, #1
   1e360:	str	r1, [sp, #24]
   1e364:	mov	r9, r1
   1e368:	mov	r8, #0
   1e36c:	mov	r7, #0
   1e370:	ldrb	r1, [r4]
   1e374:	cmp	r1, #59	; 0x3b
   1e378:	bne	1e38c <__assert_fail@plt+0xb7d0>
   1e37c:	ldrb	r0, [r4, #1]
   1e380:	cmp	r0, #0
   1e384:	bne	1e3b0 <__assert_fail@plt+0xb7f4>
   1e388:	b	1e418 <__assert_fail@plt+0xb85c>
   1e38c:	subs	r1, r1, #43	; 0x2b
   1e390:	movwne	r1, #1
   1e394:	orrs	r1, r5, r1
   1e398:	bne	1e3b0 <__assert_fail@plt+0xb7f4>
   1e39c:	cmp	r0, #0
   1e3a0:	beq	1e3b0 <__assert_fail@plt+0xb7f4>
   1e3a4:	ldrb	r0, [r4, #1]
   1e3a8:	cmp	r0, #0
   1e3ac:	beq	1e40c <__assert_fail@plt+0xb850>
   1e3b0:	mov	r0, r4
   1e3b4:	movw	r1, #7347	; 0x1cb3
   1e3b8:	movt	r1, #4
   1e3bc:	bl	23f7c <__assert_fail@plt+0x113c0>
   1e3c0:	cmp	r0, #0
   1e3c4:	beq	1e3ec <__assert_fail@plt+0xb830>
   1e3c8:	cmp	r9, #0
   1e3cc:	mov	r0, r9
   1e3d0:	movwne	r0, #1
   1e3d4:	orrs	r0, r0, r6
   1e3d8:	beq	1e60c <__assert_fail@plt+0xba50>
   1e3dc:	add	r7, r7, #1
   1e3e0:	mov	r0, #1
   1e3e4:	mov	r8, r4
   1e3e8:	b	1e3f0 <__assert_fail@plt+0xb834>
   1e3ec:	mov	r0, #0
   1e3f0:	add	r9, r9, #1
   1e3f4:	ldr	r4, [sl, #4]!
   1e3f8:	cmp	r4, #0
   1e3fc:	bne	1e370 <__assert_fail@plt+0xb7b4>
   1e400:	b	1e418 <__assert_fail@plt+0xb85c>
   1e404:	mov	r9, r1
   1e408:	b	1e434 <__assert_fail@plt+0xb878>
   1e40c:	mov	r0, #1
   1e410:	ldr	r1, [sp, #36]	; 0x24
   1e414:	strb	r0, [r1]
   1e418:	ldr	r5, [sp, #24]
   1e41c:	cmp	r9, r5
   1e420:	ldrne	r0, [sl]
   1e424:	cmpne	r0, #0
   1e428:	bne	1e44c <__assert_fail@plt+0xb890>
   1e42c:	ldr	r7, [sp, #32]
   1e430:	ldr	r6, [sp, #28]
   1e434:	str	r9, [r7]
   1e438:	mov	r0, r6
   1e43c:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   1e440:	mov	r0, #0
   1e444:	sub	sp, fp, #28
   1e448:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e44c:	ldr	r0, [sp, #36]	; 0x24
   1e450:	ldrb	r0, [r0]
   1e454:	cmp	r0, #0
   1e458:	beq	1e498 <__assert_fail@plt+0xb8dc>
   1e45c:	movw	r0, #8077	; 0x1f8d
   1e460:	movt	r0, #4
   1e464:	movw	r4, #2143	; 0x85f
   1e468:	movt	r4, #4
   1e46c:	ldr	r1, [sp, #20]
   1e470:	movw	r2, #17188	; 0x4324
   1e474:	movt	r2, #1
   1e478:	cmp	r1, r2
   1e47c:	moveq	r4, r0
   1e480:	cmp	r7, #2
   1e484:	bge	1e65c <__assert_fail@plt+0xbaa0>
   1e488:	mov	r0, r8
   1e48c:	bl	1288c <strlen@plt>
   1e490:	cmp	r0, #2
   1e494:	bne	1e684 <__assert_fail@plt+0xbac8>
   1e498:	ldr	r0, [sp, #36]	; 0x24
   1e49c:	add	r6, r0, #4
   1e4a0:	mov	r0, r6
   1e4a4:	mov	r1, #2048	; 0x800
   1e4a8:	bl	1fb74 <__assert_fail@plt+0xcfb8>
   1e4ac:	sub	r0, r0, #1
   1e4b0:	cmp	r0, #1
   1e4b4:	bls	1e650 <__assert_fail@plt+0xba94>
   1e4b8:	mov	r0, r6
   1e4bc:	bl	1fc34 <__assert_fail@plt+0xd078>
   1e4c0:	movw	r0, #23080	; 0x5a28
   1e4c4:	movt	r0, #1
   1e4c8:	ldr	r4, [sp, #28]
   1e4cc:	str	r0, [r4, #76]	; 0x4c
   1e4d0:	ldrb	r0, [r4, #40]	; 0x28
   1e4d4:	cmp	r0, #0
   1e4d8:	beq	1e574 <__assert_fail@plt+0xb9b8>
   1e4dc:	mov	r1, #0
   1e4e0:	str	r1, [r4, #132]	; 0x84
   1e4e4:	str	r1, [r4, #80]	; 0x50
   1e4e8:	str	r1, [r4, #84]	; 0x54
   1e4ec:	mvn	r0, r5
   1e4f0:	add	r0, r9, r0
   1e4f4:	str	r1, [r4, #64]	; 0x40
   1e4f8:	str	r1, [r4, #68]	; 0x44
   1e4fc:	str	r0, [r4, #72]	; 0x48
   1e500:	mov	r8, r5
   1e504:	add	r5, r4, #88	; 0x58
   1e508:	mov	r0, r6
   1e50c:	mov	r1, r5
   1e510:	ldr	r2, [sp, #36]	; 0x24
   1e514:	bl	1fc58 <__assert_fail@plt+0xd09c>
   1e518:	sub	r0, r9, #1
   1e51c:	cmp	r8, r0
   1e520:	bge	1e5ec <__assert_fail@plt+0xba30>
   1e524:	mov	r7, r6
   1e528:	ldr	r1, [sp, #16]
   1e52c:	add	r4, r1, r8, lsl #2
   1e530:	sub	r8, r0, r8
   1e534:	ldr	r6, [r4], #4
   1e538:	mov	r0, r6
   1e53c:	bl	1288c <strlen@plt>
   1e540:	mov	r1, #0
   1e544:	str	r1, [sp]
   1e548:	str	r1, [sp, #4]
   1e54c:	mov	r1, #1
   1e550:	str	r1, [sp, #8]
   1e554:	add	r3, r0, #1
   1e558:	mov	r0, r7
   1e55c:	mov	r1, r5
   1e560:	mov	r2, r6
   1e564:	bl	1f574 <__assert_fail@plt+0xc9b8>
   1e568:	subs	r8, r8, #1
   1e56c:	bne	1e534 <__assert_fail@plt+0xb978>
   1e570:	b	1e5ec <__assert_fail@plt+0xba30>
   1e574:	mov	r0, #2
   1e578:	str	r0, [r4, #64]	; 0x40
   1e57c:	movw	r0, #7347	; 0x1cb3
   1e580:	movt	r0, #4
   1e584:	str	r0, [r4, #68]	; 0x44
   1e588:	mov	r7, r5
   1e58c:	mov	r5, #0
   1e590:	str	r5, [r4, #80]	; 0x50
   1e594:	str	r5, [r4, #84]	; 0x54
   1e598:	sub	r0, r9, r7
   1e59c:	str	r0, [r4, #136]	; 0x88
   1e5a0:	lsl	r0, r0, #2
   1e5a4:	bl	2b5cc <__assert_fail@plt+0x18a10>
   1e5a8:	str	r0, [r4, #132]	; 0x84
   1e5ac:	add	r1, r4, #88	; 0x58
   1e5b0:	mov	r0, r6
   1e5b4:	ldr	r2, [sp, #36]	; 0x24
   1e5b8:	bl	1fc58 <__assert_fail@plt+0xd09c>
   1e5bc:	ldr	r0, [r4, #136]	; 0x88
   1e5c0:	cmp	r0, #1
   1e5c4:	blt	1e5ec <__assert_fail@plt+0xba30>
   1e5c8:	ldr	r0, [sp, #16]
   1e5cc:	add	r0, r0, r7, lsl #2
   1e5d0:	ldr	r1, [r4, #136]	; 0x88
   1e5d4:	ldr	r2, [r0, r5, lsl #2]
   1e5d8:	ldr	r3, [r4, #132]	; 0x84
   1e5dc:	str	r2, [r3, r5, lsl #2]
   1e5e0:	add	r5, r5, #1
   1e5e4:	cmp	r5, r1
   1e5e8:	blt	1e5d4 <__assert_fail@plt+0xba18>
   1e5ec:	ldr	r0, [sl]
   1e5f0:	cmp	r0, #0
   1e5f4:	addne	r9, r9, #1
   1e5f8:	ldr	r0, [sp, #32]
   1e5fc:	str	r9, [r0]
   1e600:	mov	r0, #1
   1e604:	sub	sp, fp, #28
   1e608:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e60c:	movw	r1, #7350	; 0x1cb6
   1e610:	movt	r1, #4
   1e614:	mov	r0, #0
   1e618:	mov	r2, #5
   1e61c:	bl	1264c <dcgettext@plt>
   1e620:	mov	r2, r0
   1e624:	mov	r0, #1
   1e628:	mov	r1, #0
   1e62c:	bl	12790 <error@plt>
   1e630:	movw	r0, #7248	; 0x1c50
   1e634:	movt	r0, #4
   1e638:	movw	r1, #5943	; 0x1737
   1e63c:	movt	r1, #4
   1e640:	movw	r3, #7267	; 0x1c63
   1e644:	movt	r3, #4
   1e648:	movw	r2, #2937	; 0xb79
   1e64c:	bl	12bbc <__assert_fail@plt>
   1e650:	movw	r1, #7615	; 0x1dbf
   1e654:	movt	r1, #4
   1e658:	b	1e614 <__assert_fail@plt+0xba58>
   1e65c:	movw	r1, #7464	; 0x1d28
   1e660:	movt	r1, #4
   1e664:	mov	r0, #0
   1e668:	mov	r2, #5
   1e66c:	bl	1264c <dcgettext@plt>
   1e670:	mov	r2, r0
   1e674:	mov	r0, #1
   1e678:	mov	r1, #0
   1e67c:	mov	r3, r4
   1e680:	bl	12790 <error@plt>
   1e684:	add	r0, sp, #41	; 0x29
   1e688:	movw	r2, #7520	; 0x1d60
   1e68c:	movt	r2, #4
   1e690:	mov	r1, #19
   1e694:	mov	r3, r4
   1e698:	bl	128ec <snprintf@plt>
   1e69c:	cmp	r0, #20
   1e6a0:	bcs	1e71c <__assert_fail@plt+0xbb60>
   1e6a4:	movw	r1, #7558	; 0x1d86
   1e6a8:	movt	r1, #4
   1e6ac:	mov	r0, #0
   1e6b0:	mov	r2, #5
   1e6b4:	bl	1264c <dcgettext@plt>
   1e6b8:	mov	r4, r0
   1e6bc:	movw	r7, #24196	; 0x5e84
   1e6c0:	movt	r7, #5
   1e6c4:	ldr	r1, [r7, #72]	; 0x48
   1e6c8:	add	r2, sp, #41	; 0x29
   1e6cc:	mov	r0, #0
   1e6d0:	bl	2a024 <__assert_fail@plt+0x17468>
   1e6d4:	mov	r5, r0
   1e6d8:	ldr	r1, [r7, #72]	; 0x48
   1e6dc:	movw	r2, #7347	; 0x1cb3
   1e6e0:	movt	r2, #4
   1e6e4:	mov	r0, #1
   1e6e8:	bl	2a024 <__assert_fail@plt+0x17468>
   1e6ec:	mov	r6, r0
   1e6f0:	ldr	r1, [r7, #72]	; 0x48
   1e6f4:	mov	r0, #2
   1e6f8:	mov	r2, r8
   1e6fc:	bl	2a024 <__assert_fail@plt+0x17468>
   1e700:	str	r6, [sp]
   1e704:	str	r0, [sp, #4]
   1e708:	mov	r0, #1
   1e70c:	mov	r1, #0
   1e710:	mov	r2, r4
   1e714:	mov	r3, r5
   1e718:	bl	12790 <error@plt>
   1e71c:	movw	r0, #7537	; 0x1d71
   1e720:	movt	r0, #4
   1e724:	movw	r1, #5943	; 0x1737
   1e728:	movt	r1, #4
   1e72c:	movw	r3, #7267	; 0x1c63
   1e730:	movt	r3, #4
   1e734:	movw	r2, #3014	; 0xbc6
   1e738:	bl	12bbc <__assert_fail@plt>
   1e73c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e740:	add	fp, sp, #24
   1e744:	sub	sp, sp, #16
   1e748:	mov	r8, r0
   1e74c:	movw	r0, #8067	; 0x1f83
   1e750:	movt	r0, #4
   1e754:	bl	127cc <getenv@plt>
   1e758:	cmp	r0, #0
   1e75c:	beq	1e7e0 <__assert_fail@plt+0xbc24>
   1e760:	mov	r5, r0
   1e764:	add	r4, sp, #8
   1e768:	str	r4, [sp]
   1e76c:	movw	r6, #62720	; 0xf500
   1e770:	movt	r6, #3
   1e774:	add	r7, sp, #12
   1e778:	mov	r1, r6
   1e77c:	mov	r2, #1
   1e780:	mov	r3, r7
   1e784:	bl	2180c <__assert_fail@plt+0xec50>
   1e788:	ldr	r1, [sp, #8]
   1e78c:	cmp	r1, #1
   1e790:	beq	1e7a0 <__assert_fail@plt+0xbbe4>
   1e794:	cmp	r1, #0
   1e798:	bne	1e7b0 <__assert_fail@plt+0xbbf4>
   1e79c:	b	1e7e8 <__assert_fail@plt+0xbc2c>
   1e7a0:	ldr	r0, [sp, #12]
   1e7a4:	ldrb	r0, [r5, r0]
   1e7a8:	cmp	r0, #46	; 0x2e
   1e7ac:	beq	1e7e8 <__assert_fail@plt+0xbc2c>
   1e7b0:	ldr	r0, [sp, #12]
   1e7b4:	ldrb	r2, [r5, r0]
   1e7b8:	cmp	r2, #47	; 0x2f
   1e7bc:	bne	1e810 <__assert_fail@plt+0xbc54>
   1e7c0:	str	r4, [sp]
   1e7c4:	mov	r0, r5
   1e7c8:	mov	r1, r6
   1e7cc:	mov	r2, #0
   1e7d0:	mov	r3, r7
   1e7d4:	bl	2180c <__assert_fail@plt+0xec50>
   1e7d8:	cmp	r0, #0
   1e7dc:	bne	1e788 <__assert_fail@plt+0xbbcc>
   1e7e0:	sub	sp, fp, #24
   1e7e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e7e8:	movw	r1, #7656	; 0x1de8
   1e7ec:	movt	r1, #4
   1e7f0:	mov	r0, #0
   1e7f4:	mov	r2, #5
   1e7f8:	bl	1264c <dcgettext@plt>
   1e7fc:	mov	r2, r0
   1e800:	mov	r0, #1
   1e804:	mov	r1, #0
   1e808:	mov	r3, r8
   1e80c:	bl	12790 <error@plt>
   1e810:	add	r0, r5, r0
   1e814:	bl	125a4 <strndup@plt>
   1e818:	mov	r6, r0
   1e81c:	movw	r1, #7907	; 0x1ee3
   1e820:	movt	r1, #4
   1e824:	mov	r0, #0
   1e828:	mov	r2, #5
   1e82c:	bl	1264c <dcgettext@plt>
   1e830:	mov	r7, r0
   1e834:	ldr	r0, [sp, #12]
   1e838:	cmp	r6, #0
   1e83c:	addeq	r6, r5, r0
   1e840:	mov	r0, #0
   1e844:	mov	r1, r6
   1e848:	bl	19314 <__assert_fail@plt+0x6758>
   1e84c:	mov	r3, r0
   1e850:	str	r8, [sp]
   1e854:	mov	r0, #1
   1e858:	mov	r1, #0
   1e85c:	mov	r2, r7
   1e860:	bl	12790 <error@plt>
   1e864:	push	{r4, r5, fp, lr}
   1e868:	add	fp, sp, #8
   1e86c:	mov	r5, r1
   1e870:	bl	17f88 <__assert_fail@plt+0x53cc>
   1e874:	mov	r4, r0
   1e878:	add	r1, r0, #40	; 0x28
   1e87c:	cmp	r5, #0
   1e880:	beq	1e890 <__assert_fail@plt+0xbcd4>
   1e884:	mov	r0, r5
   1e888:	bl	1e8ac <__assert_fail@plt+0xbcf0>
   1e88c:	b	1e898 <__assert_fail@plt+0xbcdc>
   1e890:	mov	r0, r1
   1e894:	bl	1bad8 <__assert_fail@plt+0x8f1c>
   1e898:	mov	r0, #1065353216	; 0x3f800000
   1e89c:	str	r0, [r4, #28]
   1e8a0:	movw	r0, #257	; 0x101
   1e8a4:	strh	r0, [r4, #16]
   1e8a8:	pop	{r4, r5, fp, pc}
   1e8ac:	push	{r4, r5, fp, lr}
   1e8b0:	add	fp, sp, #8
   1e8b4:	mov	r4, r1
   1e8b8:	mov	r5, r0
   1e8bc:	mov	r0, #0
   1e8c0:	str	r0, [r1]
   1e8c4:	mov	r0, #0
   1e8c8:	bl	28b54 <__assert_fail@plt+0x15f98>
   1e8cc:	str	r0, [r4, #16]
   1e8d0:	movw	r1, #8081	; 0x1f91
   1e8d4:	movt	r1, #4
   1e8d8:	mov	r0, r5
   1e8dc:	bl	124cc <strcmp@plt>
   1e8e0:	cmp	r0, #0
   1e8e4:	beq	1e930 <__assert_fail@plt+0xbd74>
   1e8e8:	movw	r1, #8108	; 0x1fac
   1e8ec:	movt	r1, #4
   1e8f0:	mov	r0, r5
   1e8f4:	bl	124cc <strcmp@plt>
   1e8f8:	cmp	r0, #0
   1e8fc:	beq	1e944 <__assert_fail@plt+0xbd88>
   1e900:	movw	r0, #24152	; 0x5e58
   1e904:	movt	r0, #5
   1e908:	ldr	r0, [r0, #36]	; 0x24
   1e90c:	mov	r1, r5
   1e910:	bl	195d0 <__assert_fail@plt+0x6a14>
   1e914:	stmib	r4, {r0, r5}
   1e918:	cmp	r0, #0
   1e91c:	bne	1e96c <__assert_fail@plt+0xbdb0>
   1e920:	bl	128d4 <__errno_location@plt>
   1e924:	ldr	r0, [r0]
   1e928:	mov	r1, r5
   1e92c:	bl	193b0 <__assert_fail@plt+0x67f4>
   1e930:	movw	r1, #8093	; 0x1f9d
   1e934:	movt	r1, #4
   1e938:	movw	r0, #21856	; 0x5560
   1e93c:	movt	r0, #5
   1e940:	b	1e954 <__assert_fail@plt+0xbd98>
   1e944:	movw	r1, #2203	; 0x89b
   1e948:	movt	r1, #4
   1e94c:	movw	r0, #21868	; 0x556c
   1e950:	movt	r0, #5
   1e954:	ldr	r0, [r0]
   1e958:	str	r0, [r4, #4]
   1e95c:	mov	r0, #0
   1e960:	mov	r2, #5
   1e964:	bl	1264c <dcgettext@plt>
   1e968:	str	r0, [r4, #8]
   1e96c:	ldr	r0, [r4, #4]
   1e970:	bl	1e97c <__assert_fail@plt+0xbdc0>
   1e974:	strb	r0, [r4, #12]
   1e978:	pop	{r4, r5, fp, pc}
   1e97c:	push	{fp, lr}
   1e980:	mov	fp, sp
   1e984:	bl	12958 <fileno@plt>
   1e988:	cmn	r0, #1
   1e98c:	moveq	r0, #0
   1e990:	popeq	{fp, pc}
   1e994:	bl	12b2c <isatty@plt>
   1e998:	cmp	r0, #0
   1e99c:	movwne	r0, #1
   1e9a0:	pop	{fp, pc}
   1e9a4:	push	{r4, r5, fp, lr}
   1e9a8:	add	fp, sp, #8
   1e9ac:	mov	r5, r1
   1e9b0:	bl	17f4c <__assert_fail@plt+0x5390>
   1e9b4:	mov	r4, r0
   1e9b8:	add	r1, r0, #40	; 0x28
   1e9bc:	cmp	r5, #0
   1e9c0:	beq	1e9d0 <__assert_fail@plt+0xbe14>
   1e9c4:	mov	r0, r5
   1e9c8:	bl	1e8ac <__assert_fail@plt+0xbcf0>
   1e9cc:	b	1e9d8 <__assert_fail@plt+0xbe1c>
   1e9d0:	mov	r0, r1
   1e9d4:	bl	1bad8 <__assert_fail@plt+0x8f1c>
   1e9d8:	mov	r0, #1065353216	; 0x3f800000
   1e9dc:	str	r0, [r4, #28]
   1e9e0:	movw	r0, #257	; 0x101
   1e9e4:	str	r0, [r4, #16]
   1e9e8:	pop	{r4, r5, fp, pc}
   1e9ec:	push	{r4, sl, fp, lr}
   1e9f0:	add	fp, sp, #8
   1e9f4:	sub	sp, sp, #104	; 0x68
   1e9f8:	mov	r4, r0
   1e9fc:	movw	r0, #62562	; 0xf462
   1ea00:	movt	r0, #3
   1ea04:	mov	r1, sp
   1ea08:	bl	3e8e4 <__assert_fail@plt+0x2bd28>
   1ea0c:	cmp	r0, #0
   1ea10:	vmovne.f32	s0, #112	; 0x3f800000  1.0
   1ea14:	subne	sp, fp, #8
   1ea18:	popne	{r4, sl, fp, pc}
   1ea1c:	mov	r0, sp
   1ea20:	movw	r1, #62562	; 0xf462
   1ea24:	movt	r1, #3
   1ea28:	bl	1b330 <__assert_fail@plt+0x8774>
   1ea2c:	mov	r1, r0
   1ea30:	mov	r0, r4
   1ea34:	bl	124cc <strcmp@plt>
   1ea38:	add	r1, pc, #16
   1ea3c:	cmp	r0, #0
   1ea40:	addeq	r1, r1, #4
   1ea44:	vldr	s0, [r1]
   1ea48:	sub	sp, fp, #8
   1ea4c:	pop	{r4, sl, fp, pc}
   1ea50:			; <UNDEFINED> instruction: 0x3e99999a
   1ea54:	svccc	0x00333333
   1ea58:	push	{fp, lr}
   1ea5c:	mov	fp, sp
   1ea60:	movw	r0, #6672	; 0x1a10
   1ea64:	movt	r0, #4
   1ea68:	bl	1b8f4 <__assert_fail@plt+0x8d38>
   1ea6c:	bl	17f88 <__assert_fail@plt+0x53cc>
   1ea70:	mov	r1, #0
   1ea74:	str	r1, [r0, #28]
   1ea78:	str	r1, [r0, #16]
   1ea7c:	pop	{fp, pc}
   1ea80:	push	{r4, r5, r6, sl, fp, lr}
   1ea84:	add	fp, sp, #16
   1ea88:	sub	sp, sp, #24
   1ea8c:	mov	r5, r2
   1ea90:	add	r2, sp, #20
   1ea94:	bl	1df38 <__assert_fail@plt+0xb37c>
   1ea98:	mov	r4, #0
   1ea9c:	cmp	r0, #0
   1eaa0:	beq	1eaf8 <__assert_fail@plt+0xbf3c>
   1eaa4:	ldr	r6, [sp, #20]
   1eaa8:	add	r1, sp, #8
   1eaac:	add	r2, sp, #4
   1eab0:	mov	r0, r6
   1eab4:	bl	1ebb4 <__assert_fail@plt+0xbff8>
   1eab8:	cmp	r0, #0
   1eabc:	beq	1eaf8 <__assert_fail@plt+0xbf3c>
   1eac0:	mov	r0, r5
   1eac4:	mov	r1, r6
   1eac8:	bl	17f4c <__assert_fail@plt+0x5390>
   1eacc:	mov	r4, r0
   1ead0:	ldr	r0, [sp, #4]
   1ead4:	str	r0, [r4, #40]	; 0x28
   1ead8:	ldr	r0, [sp, #8]
   1eadc:	ldr	r1, [sp, #12]
   1eae0:	strd	r0, [r4, #48]	; 0x30
   1eae4:	movw	r0, #24196	; 0x5e84
   1eae8:	movt	r0, #5
   1eaec:	ldrb	r0, [r0, #44]	; 0x2c
   1eaf0:	tst	r0, #1
   1eaf4:	bne	1eb04 <__assert_fail@plt+0xbf48>
   1eaf8:	mov	r0, r4
   1eafc:	sub	sp, fp, #16
   1eb00:	pop	{r4, r5, r6, sl, fp, pc}
   1eb04:	add	r5, r4, #48	; 0x30
   1eb08:	ldr	r2, [r4, #4]
   1eb0c:	movw	r6, #21856	; 0x5560
   1eb10:	movt	r6, #5
   1eb14:	ldr	r0, [r6]
   1eb18:	movw	r1, #6971	; 0x1b3b
   1eb1c:	movt	r1, #4
   1eb20:	bl	128c8 <fprintf@plt>
   1eb24:	ldr	r0, [r6]
   1eb28:	ldr	r1, [sp, #4]
   1eb2c:	cmp	r1, #0
   1eb30:	beq	1eb50 <__assert_fail@plt+0xbf94>
   1eb34:	cmp	r1, #1
   1eb38:	bne	1eb64 <__assert_fail@plt+0xbfa8>
   1eb3c:	movw	r3, #7015	; 0x1b67
   1eb40:	movt	r3, #4
   1eb44:	movw	r2, #12879	; 0x324f
   1eb48:	movt	r2, #4
   1eb4c:	b	1eb90 <__assert_fail@plt+0xbfd4>
   1eb50:	movw	r3, #7012	; 0x1b64
   1eb54:	movt	r3, #4
   1eb58:	movw	r2, #7006	; 0x1b5e
   1eb5c:	movt	r2, #4
   1eb60:	b	1eb90 <__assert_fail@plt+0xbfd4>
   1eb64:	movw	r2, #8171	; 0x1feb
   1eb68:	movt	r2, #4
   1eb6c:	movw	r3, #7021	; 0x1b6d
   1eb70:	movt	r3, #4
   1eb74:	cmp	r1, #2
   1eb78:	moveq	r3, r2
   1eb7c:	movw	r1, #7009	; 0x1b61
   1eb80:	movt	r1, #4
   1eb84:	movw	r2, #7022	; 0x1b6e
   1eb88:	movt	r2, #4
   1eb8c:	moveq	r2, r1
   1eb90:	movw	r1, #6985	; 0x1b49
   1eb94:	movt	r1, #4
   1eb98:	bl	128c8 <fprintf@plt>
   1eb9c:	ldrd	r2, [r5]
   1eba0:	ldr	r0, [r6]
   1eba4:	movw	r1, #8174	; 0x1fee
   1eba8:	movt	r1, #4
   1ebac:	bl	128c8 <fprintf@plt>
   1ebb0:	b	1eaf8 <__assert_fail@plt+0xbf3c>
   1ebb4:	push	{r4, sl, fp, lr}
   1ebb8:	add	fp, sp, #8
   1ebbc:	sub	sp, sp, #16
   1ebc0:	str	r0, [sp, #12]
   1ebc4:	cmp	r0, #0
   1ebc8:	moveq	r0, #0
   1ebcc:	subeq	sp, fp, #8
   1ebd0:	popeq	{r4, sl, fp, pc}
   1ebd4:	mov	r4, r1
   1ebd8:	cmp	r2, #0
   1ebdc:	beq	1ebec <__assert_fail@plt+0xc030>
   1ebe0:	add	r0, sp, #12
   1ebe4:	mov	r1, r2
   1ebe8:	bl	1e10c <__assert_fail@plt+0xb550>
   1ebec:	ldr	r0, [sp, #12]
   1ebf0:	movw	r1, #2143	; 0x85f
   1ebf4:	movt	r1, #4
   1ebf8:	str	r1, [sp]
   1ebfc:	add	r1, sp, #8
   1ec00:	mov	r2, #10
   1ec04:	mov	r3, r4
   1ec08:	bl	2bf1c <__assert_fail@plt+0x19360>
   1ec0c:	clz	r0, r0
   1ec10:	lsr	r0, r0, #5
   1ec14:	sub	sp, fp, #8
   1ec18:	pop	{r4, sl, fp, pc}
   1ec1c:	push	{r4, r5, fp, lr}
   1ec20:	add	fp, sp, #8
   1ec24:	vpush	{d8}
   1ec28:	mov	r5, r1
   1ec2c:	mov	r4, r0
   1ec30:	movw	r1, #8412	; 0x20dc
   1ec34:	movt	r1, #4
   1ec38:	bl	12ad8 <strpbrk@plt>
   1ec3c:	vldr	s16, [pc, #52]	; 1ec78 <__assert_fail@plt+0xc0bc>
   1ec40:	cmp	r0, #0
   1ec44:	bne	1ec6c <__assert_fail@plt+0xc0b0>
   1ec48:	cmp	r5, #0
   1ec4c:	beq	1ec68 <__assert_fail@plt+0xc0ac>
   1ec50:	mov	r0, r4
   1ec54:	mov	r1, #46	; 0x2e
   1ec58:	bl	12898 <strchr@plt>
   1ec5c:	cmp	r0, #0
   1ec60:	vldreq	s16, [pc, #20]	; 1ec7c <__assert_fail@plt+0xc0c0>
   1ec64:	b	1ec6c <__assert_fail@plt+0xc0b0>
   1ec68:	vldr	s16, [pc, #12]	; 1ec7c <__assert_fail@plt+0xc0c0>
   1ec6c:	vmov.f32	s0, s16
   1ec70:	vpop	{d8}
   1ec74:	pop	{r4, r5, fp, pc}
   1ec78:	svccc	0x004ccccd
   1ec7c:	stclcc	12, cr12, [ip, #820]	; 0x334
   1ec80:	push	{r4, sl, fp, lr}
   1ec84:	add	fp, sp, #8
   1ec88:	movw	r4, #23792	; 0x5cf0
   1ec8c:	movt	r4, #5
   1ec90:	ldrb	r0, [r4]
   1ec94:	cmp	r0, #0
   1ec98:	popne	{r4, sl, fp, pc}
   1ec9c:	movw	r0, #8435	; 0x20f3
   1eca0:	movt	r0, #4
   1eca4:	mov	r1, r0
   1eca8:	mov	r2, #0
   1ecac:	bl	127b4 <fnmatch@plt>
   1ecb0:	cmp	r0, #0
   1ecb4:	bne	1ed04 <__assert_fail@plt+0xc148>
   1ecb8:	movw	r0, #8439	; 0x20f7
   1ecbc:	movt	r0, #4
   1ecc0:	movw	r1, #8435	; 0x20f3
   1ecc4:	movt	r1, #4
   1ecc8:	mov	r2, #0
   1eccc:	bl	127b4 <fnmatch@plt>
   1ecd0:	cmp	r0, #0
   1ecd4:	beq	1ed04 <__assert_fail@plt+0xc148>
   1ecd8:	movw	r0, #8439	; 0x20f7
   1ecdc:	movt	r0, #4
   1ece0:	movw	r1, #8435	; 0x20f3
   1ece4:	movt	r1, #4
   1ece8:	mov	r2, #16
   1ecec:	bl	127b4 <fnmatch@plt>
   1ecf0:	cmp	r0, #0
   1ecf4:	bne	1ed04 <__assert_fail@plt+0xc148>
   1ecf8:	mov	r0, #1
   1ecfc:	strb	r0, [r4]
   1ed00:	pop	{r4, sl, fp, pc}
   1ed04:	movw	r1, #8443	; 0x20fb
   1ed08:	movt	r1, #4
   1ed0c:	mov	r0, #0
   1ed10:	mov	r2, #5
   1ed14:	bl	1264c <dcgettext@plt>
   1ed18:	mov	r2, r0
   1ed1c:	mov	r0, #1
   1ed20:	mov	r1, #0
   1ed24:	bl	12790 <error@plt>
   1ed28:	push	{r4, r5, r6, r7, fp, lr}
   1ed2c:	add	fp, sp, #16
   1ed30:	sub	sp, sp, #8
   1ed34:	mov	r6, r2
   1ed38:	mov	r4, r1
   1ed3c:	mov	r5, r0
   1ed40:	bl	1bb60 <__assert_fail@plt+0x8fa4>
   1ed44:	cmp	r0, #0
   1ed48:	beq	1edc4 <__assert_fail@plt+0xc208>
   1ed4c:	mov	r0, r6
   1ed50:	mov	r1, #47	; 0x2f
   1ed54:	bl	12898 <strchr@plt>
   1ed58:	cmp	r0, #0
   1ed5c:	beq	1edc4 <__assert_fail@plt+0xc208>
   1ed60:	movw	r1, #8498	; 0x2132
   1ed64:	movt	r1, #4
   1ed68:	mov	r0, #0
   1ed6c:	mov	r2, #5
   1ed70:	bl	1264c <dcgettext@plt>
   1ed74:	mov	r6, r0
   1ed78:	mov	r0, #0
   1ed7c:	mov	r1, r5
   1ed80:	bl	19314 <__assert_fail@plt+0x6758>
   1ed84:	mov	r5, r0
   1ed88:	movw	r1, #62562	; 0xf462
   1ed8c:	movt	r1, #3
   1ed90:	mov	r0, #1
   1ed94:	bl	19314 <__assert_fail@plt+0x6758>
   1ed98:	mov	r7, r0
   1ed9c:	mov	r0, #2
   1eda0:	mov	r1, r4
   1eda4:	bl	19314 <__assert_fail@plt+0x6758>
   1eda8:	str	r7, [sp]
   1edac:	str	r0, [sp, #4]
   1edb0:	mov	r0, #0
   1edb4:	mov	r1, #0
   1edb8:	mov	r2, r6
   1edbc:	mov	r3, r5
   1edc0:	bl	12790 <error@plt>
   1edc4:	sub	sp, fp, #16
   1edc8:	pop	{r4, r5, r6, r7, fp, pc}
   1edcc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1edd0:	add	fp, sp, #24
   1edd4:	sub	sp, sp, #8
   1edd8:	mov	r8, r3
   1eddc:	mov	r4, r2
   1ede0:	mov	r5, r1
   1ede4:	mov	r6, r0
   1ede8:	bl	1ec80 <__assert_fail@plt+0xc0c4>
   1edec:	add	r2, sp, #4
   1edf0:	mov	r0, r5
   1edf4:	mov	r1, r4
   1edf8:	bl	1df38 <__assert_fail@plt+0xb37c>
   1edfc:	mov	r5, #0
   1ee00:	cmp	r0, #0
   1ee04:	beq	1eeb4 <__assert_fail@plt+0xc2f8>
   1ee08:	ldr	r4, [fp, #8]
   1ee0c:	ldr	r7, [sp, #4]
   1ee10:	mov	r0, r6
   1ee14:	mov	r1, r4
   1ee18:	mov	r2, r7
   1ee1c:	bl	17f14 <__assert_fail@plt+0x5358>
   1ee20:	mov	r6, r0
   1ee24:	mov	r0, #0
   1ee28:	strh	r0, [r6, #18]
   1ee2c:	ldr	r0, [sp, #4]
   1ee30:	str	r0, [r6, #40]	; 0x28
   1ee34:	mov	r1, #0
   1ee38:	bl	1ec1c <__assert_fail@plt+0xc060>
   1ee3c:	vstr	s0, [r6, #28]
   1ee40:	movw	r0, #24196	; 0x5e84
   1ee44:	movt	r0, #5
   1ee48:	ldrb	r0, [r0, #17]
   1ee4c:	mov	r5, #1
   1ee50:	cmp	r0, #0
   1ee54:	bne	1eeb4 <__assert_fail@plt+0xc2f8>
   1ee58:	movw	r0, #17968	; 0x4630
   1ee5c:	movt	r0, #1
   1ee60:	sub	r0, r4, r0
   1ee64:	clz	r0, r0
   1ee68:	lsr	r1, r0, #5
   1ee6c:	mov	r0, r7
   1ee70:	bl	1eec0 <__assert_fail@plt+0xc304>
   1ee74:	cmp	r0, #0
   1ee78:	bne	1eeb4 <__assert_fail@plt+0xc2f8>
   1ee7c:	movw	r1, #8676	; 0x21e4
   1ee80:	movt	r1, #4
   1ee84:	mov	r0, #0
   1ee88:	mov	r2, #5
   1ee8c:	bl	1264c <dcgettext@plt>
   1ee90:	mov	r2, r0
   1ee94:	str	r7, [sp]
   1ee98:	mov	r0, #0
   1ee9c:	mov	r1, #0
   1eea0:	mov	r3, r8
   1eea4:	bl	12790 <error@plt>
   1eea8:	movw	r0, #52343	; 0xcc77
   1eeac:	movt	r0, #12843	; 0x322b
   1eeb0:	str	r0, [r6, #28]
   1eeb4:	mov	r0, r5
   1eeb8:	sub	sp, fp, #24
   1eebc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1eec0:	push	{r4, r5, fp, lr}
   1eec4:	add	fp, sp, #8
   1eec8:	mov	r4, r1
   1eecc:	mov	r5, r0
   1eed0:	mov	r1, #47	; 0x2f
   1eed4:	bl	12a18 <strrchr@plt>
   1eed8:	cmp	r0, #0
   1eedc:	beq	1eeec <__assert_fail@plt+0xc330>
   1eee0:	ldrb	r0, [r0, #1]
   1eee4:	cmp	r0, #0
   1eee8:	beq	1eef4 <__assert_fail@plt+0xc338>
   1eeec:	mov	r0, #1
   1eef0:	pop	{r4, r5, fp, pc}
   1eef4:	mov	r0, r5
   1eef8:	mov	r1, r4
   1eefc:	pop	{r4, r5, fp, lr}
   1ef00:	b	15f08 <__assert_fail@plt+0x334c>
   1ef04:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ef08:	add	fp, sp, #24
   1ef0c:	sub	sp, sp, #8
   1ef10:	mov	r5, r3
   1ef14:	mov	r6, r2
   1ef18:	add	r2, sp, #4
   1ef1c:	bl	1df38 <__assert_fail@plt+0xb37c>
   1ef20:	mov	r7, #0
   1ef24:	cmp	r0, #0
   1ef28:	beq	1efbc <__assert_fail@plt+0xc400>
   1ef2c:	ldr	r4, [sp, #4]
   1ef30:	movw	r1, #19676	; 0x4cdc
   1ef34:	movt	r1, #1
   1ef38:	mov	r0, r6
   1ef3c:	mov	r2, r4
   1ef40:	bl	17f14 <__assert_fail@plt+0x5358>
   1ef44:	mov	r6, r0
   1ef48:	mov	r8, #0
   1ef4c:	strh	r8, [r0, #18]
   1ef50:	mov	r0, #32
   1ef54:	bl	2b5cc <__assert_fail@plt+0x18a10>
   1ef58:	mov	r7, r0
   1ef5c:	str	r0, [r6, #40]	; 0x28
   1ef60:	mov	r0, #100	; 0x64
   1ef64:	str	r0, [r7, #4]
   1ef68:	mov	r0, #100	; 0x64
   1ef6c:	bl	2b5cc <__assert_fail@plt+0x18a10>
   1ef70:	str	r0, [r7]
   1ef74:	str	r8, [r7, #16]
   1ef78:	mov	r0, r5
   1ef7c:	bl	2faf8 <__assert_fail@plt+0x1cf3c>
   1ef80:	str	r5, [r7, #12]
   1ef84:	str	r8, [r7, #20]
   1ef88:	mov	r0, r4
   1ef8c:	bl	1288c <strlen@plt>
   1ef90:	mov	r1, r0
   1ef94:	mov	r0, r4
   1ef98:	mov	r2, r7
   1ef9c:	bl	2f894 <__assert_fail@plt+0x1ccd8>
   1efa0:	cmp	r0, #0
   1efa4:	bne	1efc8 <__assert_fail@plt+0xc40c>
   1efa8:	mov	r7, #1
   1efac:	mov	r0, r4
   1efb0:	mov	r1, #1
   1efb4:	bl	1ec1c <__assert_fail@plt+0xc060>
   1efb8:	vstr	s0, [r6, #28]
   1efbc:	mov	r0, r7
   1efc0:	sub	sp, fp, #24
   1efc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1efc8:	mov	r5, r0
   1efcc:	movw	r1, #8740	; 0x2224
   1efd0:	movt	r1, #4
   1efd4:	mov	r0, #0
   1efd8:	mov	r2, #5
   1efdc:	bl	1264c <dcgettext@plt>
   1efe0:	mov	r2, r0
   1efe4:	str	r5, [sp]
   1efe8:	mov	r0, #1
   1efec:	mov	r1, #0
   1eff0:	mov	r3, r4
   1eff4:	bl	12790 <error@plt>
   1eff8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1effc:	add	fp, sp, #24
   1f000:	sub	sp, sp, #8
   1f004:	mov	r4, r2
   1f008:	mov	r5, r1
   1f00c:	mov	r6, r0
   1f010:	ldr	r0, [r1]
   1f014:	add	r0, r6, r0, lsl #2
   1f018:	ldr	r8, [r0, #-4]
   1f01c:	add	r2, sp, #4
   1f020:	mov	r0, r6
   1f024:	bl	1df38 <__assert_fail@plt+0xb37c>
   1f028:	mov	r1, r0
   1f02c:	mov	r0, #0
   1f030:	cmp	r1, #0
   1f034:	beq	1f090 <__assert_fail@plt+0xc4d4>
   1f038:	ldr	r7, [sp, #4]
   1f03c:	movw	r1, #8180	; 0x1ff4
   1f040:	movt	r1, #4
   1f044:	mov	r0, r7
   1f048:	bl	12bb0 <strspn@plt>
   1f04c:	cmp	r0, #1
   1f050:	blt	1f098 <__assert_fail@plt+0xc4dc>
   1f054:	ldrb	r0, [r7, r0]
   1f058:	cmp	r0, #0
   1f05c:	bne	1f098 <__assert_fail@plt+0xc4dc>
   1f060:	movw	r0, #24196	; 0x5e84
   1f064:	movt	r0, #5
   1f068:	ldr	r1, [r0, #72]	; 0x48
   1f06c:	mov	r0, r7
   1f070:	bl	21700 <__assert_fail@plt+0xeb44>
   1f074:	str	r0, [r4]
   1f078:	cmp	r0, #0
   1f07c:	blt	1f098 <__assert_fail@plt+0xc4dc>
   1f080:	mov	r0, r6
   1f084:	mov	r1, r5
   1f088:	bl	1e1c4 <__assert_fail@plt+0xb608>
   1f08c:	mov	r0, #1
   1f090:	sub	sp, fp, #24
   1f094:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f098:	movw	r1, #8786	; 0x2252
   1f09c:	movt	r1, #4
   1f0a0:	mov	r0, #0
   1f0a4:	mov	r2, #5
   1f0a8:	bl	1264c <dcgettext@plt>
   1f0ac:	mov	r4, r0
   1f0b0:	movw	r0, #24196	; 0x5e84
   1f0b4:	movt	r0, #5
   1f0b8:	ldr	r1, [r0, #72]	; 0x48
   1f0bc:	mov	r0, #0
   1f0c0:	mov	r2, r7
   1f0c4:	bl	2a024 <__assert_fail@plt+0x17468>
   1f0c8:	str	r0, [sp]
   1f0cc:	mov	r0, #1
   1f0d0:	mov	r1, #0
   1f0d4:	mov	r2, r4
   1f0d8:	mov	r3, r8
   1f0dc:	bl	12790 <error@plt>
   1f0e0:	push	{r4, r5, r6, r7, fp, lr}
   1f0e4:	add	fp, sp, #16
   1f0e8:	sub	sp, sp, #8
   1f0ec:	mov	r5, r3
   1f0f0:	mov	r6, r2
   1f0f4:	movw	r7, #20576	; 0x5060
   1f0f8:	movt	r7, #1
   1f0fc:	movw	r2, #9196	; 0x23ec
   1f100:	movt	r2, #4
   1f104:	movw	r4, #9203	; 0x23f3
   1f108:	movt	r4, #4
   1f10c:	cmp	r3, r7
   1f110:	moveq	r4, r2
   1f114:	add	r2, sp, #4
   1f118:	bl	1df38 <__assert_fail@plt+0xb37c>
   1f11c:	mov	r1, r0
   1f120:	mov	r0, #0
   1f124:	cmp	r1, #0
   1f128:	beq	1f318 <__assert_fail@plt+0xc75c>
   1f12c:	ldr	r2, [sp, #4]
   1f130:	ldrb	r0, [r2]
   1f134:	cmp	r0, #0
   1f138:	beq	1f3b0 <__assert_fail@plt+0xc7f4>
   1f13c:	mov	r0, r6
   1f140:	mov	r1, r5
   1f144:	bl	17f14 <__assert_fail@plt+0x5358>
   1f148:	mov	r1, #0
   1f14c:	str	r1, [r0, #28]
   1f150:	subs	r1, r5, r7
   1f154:	clz	r2, r1
   1f158:	movwne	r1, #1
   1f15c:	strb	r1, [r0, #19]
   1f160:	lsr	r1, r2, #5
   1f164:	strb	r1, [r0, #18]
   1f168:	add	r1, r0, #40	; 0x28
   1f16c:	ldr	r3, [sp, #4]
   1f170:	vldr	s0, [pc, #580]	; 1f3bc <__assert_fail@plt+0xc800>
   1f174:	mov	r2, #1
   1f178:	vldr	s2, [pc, #592]	; 1f3d0 <__assert_fail@plt+0xc814>
   1f17c:	vldr	s4, [pc, #584]	; 1f3cc <__assert_fail@plt+0xc810>
   1f180:	vmov.f32	s6, #108	; 0x3f600000  0.875
   1f184:	vldr	s8, [pc, #572]	; 1f3c8 <__assert_fail@plt+0xc80c>
   1f188:	vldr	s10, [pc, #564]	; 1f3c4 <__assert_fail@plt+0xc808>
   1f18c:	vldr	s12, [pc, #556]	; 1f3c0 <__assert_fail@plt+0xc804>
   1f190:	mov	r5, r3
   1f194:	ldrb	r3, [r3]
   1f198:	sub	r7, r3, #68	; 0x44
   1f19c:	cmp	r7, #47	; 0x2f
   1f1a0:	bhi	1f308 <__assert_fail@plt+0xc74c>
   1f1a4:	add	r6, pc, #8
   1f1a8:	mov	r3, #0
   1f1ac:	vmov.f32	s14, s0
   1f1b0:	ldr	pc, [r6, r7, lsl #2]
   1f1b4:	andeq	pc, r1, r0, lsr r3	; <UNPREDICTABLE>
   1f1b8:	andeq	pc, r1, r0, lsr #6
   1f1bc:	andeq	pc, r1, r0, lsr #6
   1f1c0:	andeq	pc, r1, r0, lsr #6
   1f1c4:	andeq	pc, r1, r0, lsr #6
   1f1c8:	andeq	pc, r1, r0, lsr #6
   1f1cc:	andeq	pc, r1, r0, lsr #6
   1f1d0:	andeq	pc, r1, r0, lsr #6
   1f1d4:	andeq	pc, r1, r0, lsr #6
   1f1d8:	andeq	pc, r1, r0, lsr #6
   1f1dc:	andeq	pc, r1, r0, lsr #6
   1f1e0:	andeq	pc, r1, r0, lsr #6
   1f1e4:	andeq	pc, r1, r0, lsr #6
   1f1e8:	andeq	pc, r1, r0, lsr #6
   1f1ec:	andeq	pc, r1, r0, lsr #6
   1f1f0:	andeq	pc, r1, r0, lsr #6
   1f1f4:	andeq	pc, r1, r0, lsr #6
   1f1f8:	andeq	pc, r1, r0, lsr #6
   1f1fc:	andeq	pc, r1, r0, lsr #6
   1f200:	andeq	pc, r1, r0, lsr #6
   1f204:	andeq	pc, r1, r0, lsr #6
   1f208:	andeq	pc, r1, r0, lsr #6
   1f20c:	andeq	pc, r1, r0, lsr #6
   1f210:	andeq	pc, r1, r0, lsr #6
   1f214:	andeq	pc, r1, r0, lsr #6
   1f218:	andeq	pc, r1, r0, lsr #6
   1f21c:	andeq	pc, r1, r0, lsr #6
   1f220:	andeq	pc, r1, r0, lsr #6
   1f224:	andeq	pc, r1, r0, lsr #6
   1f228:	andeq	pc, r1, r0, lsr #6
   1f22c:			; <UNDEFINED> instruction: 0x0001f2b8
   1f230:	andeq	pc, r1, r4, ror r2	; <UNPREDICTABLE>
   1f234:	muleq	r1, r8, r2
   1f238:	andeq	pc, r1, r0, lsr #6
   1f23c:			; <UNDEFINED> instruction: 0x0001f2b0
   1f240:	andeq	pc, r1, r0, lsr #6
   1f244:	andeq	pc, r1, r0, lsr #6
   1f248:	andeq	pc, r1, r0, lsr #6
   1f24c:	andeq	pc, r1, r0, lsr #6
   1f250:	andeq	pc, r1, r0, lsr #6
   1f254:	andeq	pc, r1, r4, lsr #5
   1f258:	andeq	pc, r1, r0, lsr #6
   1f25c:	andeq	pc, r1, r0, lsr #6
   1f260:	andeq	pc, r1, r0, lsr #6
   1f264:	andeq	pc, r1, r0, lsl #5
   1f268:	andeq	pc, r1, r0, lsr #6
   1f26c:	andeq	pc, r1, r0, lsr #6
   1f270:	andeq	pc, r1, ip, lsl #5
   1f274:	mov	r3, #1
   1f278:	vmov.f32	s14, s2
   1f27c:	b	1f2b8 <__assert_fail@plt+0xc6fc>
   1f280:	mov	r3, #5
   1f284:	vmov.f32	s14, s10
   1f288:	b	1f2b8 <__assert_fail@plt+0xc6fc>
   1f28c:	mov	r3, #6
   1f290:	vmov.f32	s14, s12
   1f294:	b	1f2b8 <__assert_fail@plt+0xc6fc>
   1f298:	mov	r3, #2
   1f29c:	vmov.f32	s14, s4
   1f2a0:	b	1f2b8 <__assert_fail@plt+0xc6fc>
   1f2a4:	mov	r3, #4
   1f2a8:	vmov.f32	s14, s8
   1f2ac:	b	1f2b8 <__assert_fail@plt+0xc6fc>
   1f2b0:	mov	r3, #3
   1f2b4:	vmov.f32	s14, s6
   1f2b8:	ldrb	r7, [r1, r3]
   1f2bc:	cmp	r7, #0
   1f2c0:	bne	1f358 <__assert_fail@plt+0xc79c>
   1f2c4:	vldr	s1, [r0, #28]
   1f2c8:	vadd.f32	s14, s14, s1
   1f2cc:	vstr	s14, [r0, #28]
   1f2d0:	strb	r2, [r1, r3]
   1f2d4:	mov	r3, r5
   1f2d8:	ldrb	r7, [r3, #1]!
   1f2dc:	cmp	r7, #0
   1f2e0:	beq	1f190 <__assert_fail@plt+0xc5d4>
   1f2e4:	cmp	r7, #44	; 0x2c
   1f2e8:	bne	1f388 <__assert_fail@plt+0xc7cc>
   1f2ec:	ldrb	r3, [r5, #2]!
   1f2f0:	cmp	r3, #0
   1f2f4:	mov	r3, r5
   1f2f8:	bne	1f190 <__assert_fail@plt+0xc5d4>
   1f2fc:	movw	r1, #9491	; 0x2513
   1f300:	movt	r1, #4
   1f304:	b	1f390 <__assert_fail@plt+0xc7d4>
   1f308:	cmp	r3, #0
   1f30c:	bne	1f320 <__assert_fail@plt+0xc764>
   1f310:	str	r5, [sp, #4]
   1f314:	mov	r0, #1
   1f318:	sub	sp, fp, #16
   1f31c:	pop	{r4, r5, r6, r7, fp, pc}
   1f320:	str	r5, [sp, #4]
   1f324:	movw	r1, #9361	; 0x2491
   1f328:	movt	r1, #4
   1f32c:	b	1f33c <__assert_fail@plt+0xc780>
   1f330:	str	r5, [sp, #4]
   1f334:	movw	r1, #9260	; 0x242c
   1f338:	movt	r1, #4
   1f33c:	mov	r0, #0
   1f340:	mov	r2, #5
   1f344:	bl	1264c <dcgettext@plt>
   1f348:	mov	r2, r0
   1f34c:	ldrb	r0, [r5]
   1f350:	str	r0, [sp]
   1f354:	b	1f3a0 <__assert_fail@plt+0xc7e4>
   1f358:	str	r5, [sp, #4]
   1f35c:	movw	r1, #9388	; 0x24ac
   1f360:	movt	r1, #4
   1f364:	mov	r0, #0
   1f368:	mov	r2, #5
   1f36c:	bl	1264c <dcgettext@plt>
   1f370:	mov	r2, r0
   1f374:	ldrb	r3, [r5]
   1f378:	str	r4, [sp]
   1f37c:	mov	r0, #1
   1f380:	mov	r1, #0
   1f384:	bl	12790 <error@plt>
   1f388:	movw	r1, #9441	; 0x24e1
   1f38c:	movt	r1, #4
   1f390:	mov	r0, #0
   1f394:	mov	r2, #5
   1f398:	bl	1264c <dcgettext@plt>
   1f39c:	mov	r2, r0
   1f3a0:	mov	r0, #1
   1f3a4:	mov	r1, #0
   1f3a8:	mov	r3, r4
   1f3ac:	bl	12790 <error@plt>
   1f3b0:	movw	r1, #9209	; 0x23f9
   1f3b4:	movt	r1, #4
   1f3b8:	b	1f390 <__assert_fail@plt+0xc7d4>
   1f3bc:	bcc	1a51674 <stdout@@GLIBC_2.4+0x19fc108>
   1f3c0:			; <UNDEFINED> instruction: 0x378560fd
   1f3c4:	usatcc	r7, #29, lr, asr #16
   1f3c8:	cfldr64cc	mvdx12, [lr], #436	; 0x1b4
   1f3cc:	ldccc	3, cr13, [ip, #364]!	; 0x16c
   1f3d0:	stmibcc	r8!, {r2, r4, r5, r6, r9, lr}^
   1f3d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3d8:	add	fp, sp, #28
   1f3dc:	sub	sp, sp, #28
   1f3e0:	str	r3, [sp, #24]
   1f3e4:	mov	r6, r2
   1f3e8:	str	r1, [sp, #12]
   1f3ec:	movw	r7, #23796	; 0x5cf4
   1f3f0:	movt	r7, #5
   1f3f4:	ldr	r1, [r7]
   1f3f8:	str	r0, [sp, #20]
   1f3fc:	ldr	r5, [r0, #12]
   1f400:	ldr	r4, [fp, #20]
   1f404:	ldr	r0, [fp, #12]
   1f408:	cmp	r1, #0
   1f40c:	bne	1f424 <__assert_fail@plt+0xc868>
   1f410:	mov	r8, r0
   1f414:	add	r0, r5, #1
   1f418:	bl	2b5cc <__assert_fail@plt+0x18a10>
   1f41c:	str	r0, [r7]
   1f420:	mov	r0, r8
   1f424:	sub	sl, r5, #1
   1f428:	ldr	r9, [fp, #8]
   1f42c:	add	r0, r4, r0
   1f430:	str	r0, [sp, #16]
   1f434:	ldr	r7, [r7]
   1f438:	mov	r5, r4
   1f43c:	ldr	r0, [sp, #20]
   1f440:	ldr	r1, [r0, #24]
   1f444:	mov	r0, r6
   1f448:	bl	23f7c <__assert_fail@plt+0x113c0>
   1f44c:	cmp	r0, #0
   1f450:	ldr	r4, [sp, #24]
   1f454:	subne	r4, r0, r6
   1f458:	cmp	sl, r4
   1f45c:	bls	1f508 <__assert_fail@plt+0xc94c>
   1f460:	mov	r8, r0
   1f464:	mov	r0, r7
   1f468:	mov	r1, r6
   1f46c:	mov	r2, r4
   1f470:	bl	12928 <strncpy@plt>
   1f474:	ldr	r0, [sp, #24]
   1f478:	sub	r0, r0, r4
   1f47c:	add	r6, r6, r4
   1f480:	add	r7, r7, r4
   1f484:	sub	sl, sl, r4
   1f488:	cmp	r8, #0
   1f48c:	str	r0, [sp, #24]
   1f490:	beq	1f4f4 <__assert_fail@plt+0xc938>
   1f494:	ldr	r1, [sp, #16]
   1f498:	cmp	sl, r1
   1f49c:	bls	1f508 <__assert_fail@plt+0xc94c>
   1f4a0:	mov	r4, r5
   1f4a4:	cmp	r9, #0
   1f4a8:	beq	1f4c0 <__assert_fail@plt+0xc904>
   1f4ac:	mov	r0, r7
   1f4b0:	mov	r1, r9
   1f4b4:	bl	12748 <strcpy@plt>
   1f4b8:	ldr	r0, [fp, #12]
   1f4bc:	add	r7, r7, r0
   1f4c0:	ldr	r0, [sp, #16]
   1f4c4:	sub	sl, sl, r0
   1f4c8:	mov	r0, r7
   1f4cc:	ldr	r1, [fp, #16]
   1f4d0:	bl	12748 <strcpy@plt>
   1f4d4:	add	r7, r7, r4
   1f4d8:	ldr	r0, [sp, #20]
   1f4dc:	ldr	r0, [r0, #20]
   1f4e0:	ldr	r1, [sp, #24]
   1f4e4:	sub	r1, r1, r0
   1f4e8:	str	r1, [sp, #24]
   1f4ec:	add	r6, r6, r0
   1f4f0:	b	1f4f8 <__assert_fail@plt+0xc93c>
   1f4f4:	mov	r4, r5
   1f4f8:	ldrb	r0, [r6]
   1f4fc:	cmp	r0, #0
   1f500:	bne	1f438 <__assert_fail@plt+0xc87c>
   1f504:	b	1f514 <__assert_fail@plt+0xc958>
   1f508:	ldrb	r0, [r6]
   1f50c:	cmp	r0, #0
   1f510:	bne	1f550 <__assert_fail@plt+0xc994>
   1f514:	mov	r0, #0
   1f518:	strb	r0, [r7], #1
   1f51c:	movw	r1, #23796	; 0x5cf4
   1f520:	movt	r1, #5
   1f524:	ldr	r2, [r1]
   1f528:	str	r0, [sp]
   1f52c:	str	r0, [sp, #4]
   1f530:	ldr	r0, [fp, #24]
   1f534:	str	r0, [sp, #8]
   1f538:	sub	r3, r7, r2
   1f53c:	ldr	r0, [sp, #20]
   1f540:	ldr	r1, [sp, #12]
   1f544:	bl	1f574 <__assert_fail@plt+0xc9b8>
   1f548:	sub	sp, fp, #28
   1f54c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f550:	movw	r1, #11204	; 0x2bc4
   1f554:	movt	r1, #4
   1f558:	mov	r0, #0
   1f55c:	mov	r2, #5
   1f560:	bl	1264c <dcgettext@plt>
   1f564:	mov	r2, r0
   1f568:	mov	r0, #1
   1f56c:	mov	r1, #0
   1f570:	bl	12790 <error@plt>
   1f574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f578:	add	fp, sp, #28
   1f57c:	sub	sp, sp, #4
   1f580:	cmp	r2, #0
   1f584:	beq	1f74c <__assert_fail@plt+0xcb90>
   1f588:	mov	r9, r3
   1f58c:	mov	sl, r2
   1f590:	mov	r4, r1
   1f594:	mov	r6, r0
   1f598:	ldr	r8, [fp, #16]
   1f59c:	ldr	r0, [fp, #12]
   1f5a0:	movw	r5, #12043	; 0x2f0b
   1f5a4:	movt	r5, #4
   1f5a8:	cmp	r2, r5
   1f5ac:	beq	1f63c <__assert_fail@plt+0xca80>
   1f5b0:	add	r0, r0, r9
   1f5b4:	ldr	r1, [r4, #16]
   1f5b8:	add	r0, r0, r1
   1f5bc:	ldr	r1, [r6, #12]
   1f5c0:	cmp	r0, r1
   1f5c4:	bls	1f618 <__assert_fail@plt+0xca5c>
   1f5c8:	cmp	r8, #0
   1f5cc:	bne	1f76c <__assert_fail@plt+0xcbb0>
   1f5d0:	ldr	r0, [r6, #28]
   1f5d4:	ldr	r1, [r4]
   1f5d8:	cmp	r1, r0
   1f5dc:	beq	1f76c <__assert_fail@plt+0xcbb0>
   1f5e0:	ldr	r0, [r6, #24]
   1f5e4:	cmp	r0, #0
   1f5e8:	bne	1f778 <__assert_fail@plt+0xcbbc>
   1f5ec:	ldr	r0, [r6]
   1f5f0:	cmp	r0, #0
   1f5f4:	beq	1f60c <__assert_fail@plt+0xca50>
   1f5f8:	ldr	r0, [r6, #36]	; 0x24
   1f5fc:	cmp	r0, #0
   1f600:	ldreq	r0, [r6, #40]	; 0x28
   1f604:	cmpeq	r0, #0
   1f608:	bne	1f778 <__assert_fail@plt+0xcbbc>
   1f60c:	mov	r0, r6
   1f610:	mov	r1, r4
   1f614:	bl	1f79c <__assert_fail@plt+0xcbe0>
   1f618:	mov	r0, r8
   1f61c:	mov	r1, r6
   1f620:	mov	r2, r4
   1f624:	bl	1fac4 <__assert_fail@plt+0xcf08>
   1f628:	cmp	r0, #0
   1f62c:	beq	1f63c <__assert_fail@plt+0xca80>
   1f630:	mov	r0, r6
   1f634:	mov	r1, r4
   1f638:	bl	1f79c <__assert_fail@plt+0xcbe0>
   1f63c:	cmp	r8, #0
   1f640:	moveq	r0, #1
   1f644:	streq	r0, [r4, #28]
   1f648:	ldr	r0, [r4]
   1f64c:	ldr	r1, [r4, #8]
   1f650:	cmp	r0, r1
   1f654:	bcc	1f690 <__assert_fail@plt+0xcad4>
   1f658:	ldr	r0, [r4, #4]
   1f65c:	cmp	r0, #0
   1f660:	beq	1f67c <__assert_fail@plt+0xcac0>
   1f664:	lsl	r0, r1, #1
   1f668:	str	r0, [r4, #8]
   1f66c:	ldr	r0, [r4, #4]
   1f670:	lsl	r1, r1, #3
   1f674:	bl	2b60c <__assert_fail@plt+0x18a50>
   1f678:	b	1f68c <__assert_fail@plt+0xcad0>
   1f67c:	mov	r0, #64	; 0x40
   1f680:	str	r0, [r4, #8]
   1f684:	mov	r0, #256	; 0x100
   1f688:	bl	2b5cc <__assert_fail@plt+0x18a10>
   1f68c:	str	r0, [r4, #4]
   1f690:	cmp	sl, r5
   1f694:	beq	1f724 <__assert_fail@plt+0xcb68>
   1f698:	ldr	r1, [fp, #8]
   1f69c:	ldm	r4, {r2, r3}
   1f6a0:	ldr	r7, [r4, #12]
   1f6a4:	ldr	r0, [r4, #16]
   1f6a8:	add	r5, r2, #1
   1f6ac:	str	r5, [r4]
   1f6b0:	add	r7, r7, r0
   1f6b4:	str	r7, [r3, r2, lsl #2]
   1f6b8:	cmp	r1, #0
   1f6bc:	beq	1f6dc <__assert_fail@plt+0xcb20>
   1f6c0:	ldr	r2, [r4, #12]
   1f6c4:	add	r0, r2, r0
   1f6c8:	bl	12748 <strcpy@plt>
   1f6cc:	ldr	r0, [r4, #16]
   1f6d0:	ldr	r1, [fp, #12]
   1f6d4:	add	r0, r0, r1
   1f6d8:	str	r0, [r4, #16]
   1f6dc:	ldr	r0, [r4, #12]
   1f6e0:	ldr	r1, [r4, #16]
   1f6e4:	add	r0, r0, r1
   1f6e8:	mov	r1, sl
   1f6ec:	bl	12748 <strcpy@plt>
   1f6f0:	ldr	r0, [r4, #16]
   1f6f4:	add	r0, r0, r9
   1f6f8:	str	r0, [r4, #16]
   1f6fc:	mov	r0, r8
   1f700:	mov	r1, r6
   1f704:	mov	r2, r4
   1f708:	bl	1fac4 <__assert_fail@plt+0xcf08>
   1f70c:	cmp	r0, #0
   1f710:	beq	1f738 <__assert_fail@plt+0xcb7c>
   1f714:	mov	r0, r6
   1f718:	mov	r1, r4
   1f71c:	bl	1f79c <__assert_fail@plt+0xcbe0>
   1f720:	b	1f738 <__assert_fail@plt+0xcb7c>
   1f724:	ldm	r4, {r0, r1}
   1f728:	add	r2, r0, #1
   1f72c:	str	r2, [r4]
   1f730:	mov	r2, #0
   1f734:	str	r2, [r1, r0, lsl #2]
   1f738:	cmp	r8, #0
   1f73c:	ldrne	r0, [r4, #16]
   1f740:	strne	r0, [r4, #20]
   1f744:	sub	sp, fp, #28
   1f748:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f74c:	movw	r0, #11415	; 0x2c97
   1f750:	movt	r0, #4
   1f754:	movw	r1, #11241	; 0x2be9
   1f758:	movt	r1, #4
   1f75c:	movw	r3, #11427	; 0x2ca3
   1f760:	movt	r3, #4
   1f764:	movw	r2, #341	; 0x155
   1f768:	bl	12bbc <__assert_fail@plt>
   1f76c:	movw	r1, #11545	; 0x2d19
   1f770:	movt	r1, #4
   1f774:	b	1f780 <__assert_fail@plt+0xcbc4>
   1f778:	movw	r1, #11604	; 0x2d54
   1f77c:	movt	r1, #4
   1f780:	mov	r0, #0
   1f784:	mov	r2, #5
   1f788:	bl	1264c <dcgettext@plt>
   1f78c:	mov	r2, r0
   1f790:	mov	r0, #1
   1f794:	mov	r1, #0
   1f798:	bl	12790 <error@plt>
   1f79c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f7a0:	add	fp, sp, #28
   1f7a4:	sub	sp, sp, #4
   1f7a8:	mov	r9, r1
   1f7ac:	mov	r5, r0
   1f7b0:	bl	1f910 <__assert_fail@plt+0xcd54>
   1f7b4:	ldr	r0, [r9]
   1f7b8:	cmp	r0, #0
   1f7bc:	beq	1f8d0 <__assert_fail@plt+0xcd14>
   1f7c0:	ldr	r1, [r9, #4]
   1f7c4:	add	r1, r1, r0, lsl #2
   1f7c8:	ldr	r1, [r1, #-4]
   1f7cc:	cmp	r1, #0
   1f7d0:	bne	1f8f0 <__assert_fail@plt+0xcd34>
   1f7d4:	mov	r1, #4
   1f7d8:	add	r0, r1, r0, lsl #2
   1f7dc:	bl	2b5cc <__assert_fail@plt+0x18a10>
   1f7e0:	mov	r8, r0
   1f7e4:	ldr	r7, [r9]
   1f7e8:	mov	sl, #0
   1f7ec:	str	sl, [sp]
   1f7f0:	mov	r0, r5
   1f7f4:	mov	r1, r9
   1f7f8:	mov	r2, r8
   1f7fc:	mov	r3, r7
   1f800:	bl	1f944 <__assert_fail@plt+0xcd88>
   1f804:	mov	r6, r0
   1f808:	ldr	r4, [r5, #32]
   1f80c:	ldr	r1, [r9, #24]
   1f810:	mov	r0, r5
   1f814:	mov	r2, r6
   1f818:	mov	r3, r8
   1f81c:	blx	r4
   1f820:	cmp	r0, #0
   1f824:	beq	1f850 <__assert_fail@plt+0xcc94>
   1f828:	mov	r0, r5
   1f82c:	mov	r1, r9
   1f830:	mov	r2, #1
   1f834:	mov	r3, r7
   1f838:	bl	1f9f0 <__assert_fail@plt+0xce34>
   1f83c:	mov	r7, r0
   1f840:	add	r0, r6, sl
   1f844:	ldr	r1, [r5, #28]
   1f848:	sub	sl, r0, r1
   1f84c:	b	1f878 <__assert_fail@plt+0xccbc>
   1f850:	ldr	r0, [r5, #28]
   1f854:	add	r0, r0, #1
   1f858:	cmp	r7, r0
   1f85c:	bls	1f8ac <__assert_fail@plt+0xccf0>
   1f860:	mov	r0, r5
   1f864:	mov	r1, r9
   1f868:	mov	r2, #0
   1f86c:	mov	r3, r7
   1f870:	bl	1f9f0 <__assert_fail@plt+0xce34>
   1f874:	mov	r7, r0
   1f878:	ldr	r0, [r5, #28]
   1f87c:	ldr	r1, [r9]
   1f880:	sub	r0, r1, r0
   1f884:	add	r1, sl, #1
   1f888:	cmp	r1, r0
   1f88c:	bcc	1f7ec <__assert_fail@plt+0xcc30>
   1f890:	mov	r0, r8
   1f894:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   1f898:	mov	r0, r5
   1f89c:	mov	r1, r9
   1f8a0:	sub	sp, fp, #28
   1f8a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f8a8:	b	1faa0 <__assert_fail@plt+0xcee4>
   1f8ac:	movw	r1, #11363	; 0x2c63
   1f8b0:	movt	r1, #4
   1f8b4:	mov	r0, #0
   1f8b8:	mov	r2, #5
   1f8bc:	bl	1264c <dcgettext@plt>
   1f8c0:	mov	r2, r0
   1f8c4:	mov	r0, #1
   1f8c8:	mov	r1, #0
   1f8cc:	bl	12790 <error@plt>
   1f8d0:	movw	r0, #11221	; 0x2bd5
   1f8d4:	movt	r0, #4
   1f8d8:	movw	r1, #11241	; 0x2be9
   1f8dc:	movt	r1, #4
   1f8e0:	movw	r3, #11252	; 0x2bf4
   1f8e4:	movt	r3, #4
   1f8e8:	movw	r2, #261	; 0x105
   1f8ec:	bl	12bbc <__assert_fail@plt>
   1f8f0:	movw	r0, #11320	; 0x2c38
   1f8f4:	movt	r0, #4
   1f8f8:	movw	r1, #11241	; 0x2be9
   1f8fc:	movt	r1, #4
   1f900:	movw	r3, #11252	; 0x2bf4
   1f904:	movt	r3, #4
   1f908:	movw	r2, #262	; 0x106
   1f90c:	bl	12bbc <__assert_fail@plt>
   1f910:	push	{fp, lr}
   1f914:	mov	fp, sp
   1f918:	sub	sp, sp, #16
   1f91c:	mov	r2, #0
   1f920:	str	r2, [sp]
   1f924:	str	r2, [sp, #4]
   1f928:	str	r2, [sp, #8]
   1f92c:	movw	r2, #12043	; 0x2f0b
   1f930:	movt	r2, #4
   1f934:	mov	r3, #0
   1f938:	bl	1f574 <__assert_fail@plt+0xc9b8>
   1f93c:	mov	sp, fp
   1f940:	pop	{fp, pc}
   1f944:	push	{r4, r5, fp, lr}
   1f948:	add	fp, sp, #8
   1f94c:	ldr	r4, [r0, #28]
   1f950:	cmp	r4, #0
   1f954:	beq	1f97c <__assert_fail@plt+0xcdc0>
   1f958:	ldr	ip, [r0, #28]
   1f95c:	mov	r0, #0
   1f960:	ldr	r4, [r1, #4]
   1f964:	ldr	r4, [r4, r0, lsl #2]
   1f968:	str	r4, [r2, r0, lsl #2]
   1f96c:	add	r0, r0, #1
   1f970:	cmp	r0, ip
   1f974:	bcc	1f960 <__assert_fail@plt+0xcda4>
   1f978:	b	1f984 <__assert_fail@plt+0xcdc8>
   1f97c:	mov	r0, #0
   1f980:	mov	ip, #0
   1f984:	cmp	r0, r3
   1f988:	ldrcc	r4, [fp, #8]
   1f98c:	addcc	lr, r0, r4
   1f990:	ldrcc	r4, [r1]
   1f994:	cmpcc	lr, r4
   1f998:	bcs	1f9c0 <__assert_fail@plt+0xce04>
   1f99c:	ldr	r4, [r1]
   1f9a0:	ldr	r5, [r1, #4]
   1f9a4:	ldr	r5, [r5, lr, lsl #2]
   1f9a8:	str	r5, [r2, r0, lsl #2]
   1f9ac:	add	r0, r0, #1
   1f9b0:	cmp	r0, r3
   1f9b4:	addcc	lr, lr, #1
   1f9b8:	cmpcc	lr, r4
   1f9bc:	bcc	1f9a0 <__assert_fail@plt+0xcde4>
   1f9c0:	cmp	r0, ip
   1f9c4:	movcs	r1, #0
   1f9c8:	strcs	r1, [r2, r0, lsl #2]
   1f9cc:	popcs	{r4, r5, fp, pc}
   1f9d0:	movw	r0, #11920	; 0x2e90
   1f9d4:	movt	r0, #4
   1f9d8:	movw	r1, #11241	; 0x2be9
   1f9dc:	movt	r1, #4
   1f9e0:	movw	r3, #11949	; 0x2ead
   1f9e4:	movt	r3, #4
   1f9e8:	mov	r2, #242	; 0xf2
   1f9ec:	bl	12bbc <__assert_fail@plt>
   1f9f0:	cmp	r2, #0
   1f9f4:	beq	1fa08 <__assert_fail@plt+0xce4c>
   1f9f8:	ldr	ip, [r1, #36]	; 0x24
   1f9fc:	cmp	ip, r3
   1fa00:	strcc	r3, [r1, #36]	; 0x24
   1fa04:	b	1fa18 <__assert_fail@plt+0xce5c>
   1fa08:	ldr	ip, [r1, #40]	; 0x28
   1fa0c:	sub	ip, ip, #1
   1fa10:	cmp	ip, r3
   1fa14:	strcs	r3, [r1, #40]	; 0x28
   1fa18:	ldr	ip, [r1, #36]	; 0x24
   1fa1c:	cmp	ip, #0
   1fa20:	ldrne	r1, [r1, #40]	; 0x28
   1fa24:	cmpne	r1, ip
   1fa28:	bhi	1fa48 <__assert_fail@plt+0xce8c>
   1fa2c:	cmp	r2, #0
   1fa30:	beq	1fa40 <__assert_fail@plt+0xce84>
   1fa34:	cmn	r3, #1
   1fa38:	addne	r3, r3, #1
   1fa3c:	b	1fa74 <__assert_fail@plt+0xceb8>
   1fa40:	lsr	r3, r3, #1
   1fa44:	b	1fa74 <__assert_fail@plt+0xceb8>
   1fa48:	sub	r1, r1, ip
   1fa4c:	lsr	r1, r1, #1
   1fa50:	cmp	r2, #0
   1fa54:	beq	1fa68 <__assert_fail@plt+0xceac>
   1fa58:	cmp	r1, #0
   1fa5c:	addeq	r3, r3, #1
   1fa60:	addne	r3, r1, r3
   1fa64:	b	1fa74 <__assert_fail@plt+0xceb8>
   1fa68:	cmp	r1, #0
   1fa6c:	subeq	r3, r3, #1
   1fa70:	subne	r3, r3, r1
   1fa74:	ldr	r0, [r0, #28]
   1fa78:	cmp	r0, #0
   1fa7c:	beq	1fa90 <__assert_fail@plt+0xced4>
   1fa80:	add	r0, r0, #1
   1fa84:	cmp	r3, r0
   1fa88:	movhi	r0, r3
   1fa8c:	b	1fa94 <__assert_fail@plt+0xced8>
   1fa90:	mov	r0, r3
   1fa94:	cmp	r0, #0
   1fa98:	movweq	r0, #1
   1fa9c:	bx	lr
   1faa0:	ldr	r0, [r0, #28]
   1faa4:	mov	r2, #0
   1faa8:	mvn	r3, #0
   1faac:	str	r2, [r1, #28]
   1fab0:	str	r3, [r1, #32]
   1fab4:	str	r0, [r1]
   1fab8:	ldr	r0, [r1, #20]
   1fabc:	str	r0, [r1, #16]
   1fac0:	bx	lr
   1fac4:	cmp	r0, #0
   1fac8:	bne	1faf0 <__assert_fail@plt+0xcf34>
   1facc:	ldr	r3, [r1, #40]	; 0x28
   1fad0:	cmp	r3, #0
   1fad4:	beq	1faf0 <__assert_fail@plt+0xcf34>
   1fad8:	ldr	ip, [r1, #28]
   1fadc:	ldr	r0, [r2]
   1fae0:	sub	ip, r0, ip
   1fae4:	mov	r0, #1
   1fae8:	cmp	ip, r3
   1faec:	bxeq	lr
   1faf0:	ldr	r0, [r1, #16]
   1faf4:	ldr	r1, [r2]
   1faf8:	sub	r0, r1, r0
   1fafc:	clz	r0, r0
   1fb00:	lsr	r0, r0, #5
   1fb04:	bx	lr
   1fb08:	push	{fp, lr}
   1fb0c:	mov	fp, sp
   1fb10:	mov	r0, #0
   1fb14:	bl	12664 <sysconf@plt>
   1fb18:	cmp	r0, #0
   1fb1c:	mvnle	r0, #-2147483648	; 0x80000000
   1fb20:	pop	{fp, pc}
   1fb24:	push	{r4, r5, fp, lr}
   1fb28:	add	fp, sp, #8
   1fb2c:	movw	r0, #21844	; 0x5554
   1fb30:	movt	r0, #5
   1fb34:	ldr	r1, [r0]
   1fb38:	ldr	r0, [r1]
   1fb3c:	cmp	r0, #0
   1fb40:	moveq	r4, #0
   1fb44:	moveq	r0, r4
   1fb48:	popeq	{r4, r5, fp, pc}
   1fb4c:	add	r5, r1, #4
   1fb50:	mov	r4, #0
   1fb54:	bl	1288c <strlen@plt>
   1fb58:	add	r0, r4, r0
   1fb5c:	add	r4, r0, #1
   1fb60:	ldr	r0, [r5], #4
   1fb64:	cmp	r0, #0
   1fb68:	bne	1fb54 <__assert_fail@plt+0xcf98>
   1fb6c:	mov	r0, r4
   1fb70:	pop	{r4, r5, fp, pc}
   1fb74:	push	{r4, r5, r6, sl, fp, lr}
   1fb78:	add	fp, sp, #16
   1fb7c:	mov	r5, r1
   1fb80:	mov	r4, r0
   1fb84:	bl	1fb24 <__assert_fail@plt+0xcf68>
   1fb88:	mov	r6, r0
   1fb8c:	mov	r0, #4096	; 0x1000
   1fb90:	str	r0, [r4, #8]
   1fb94:	bl	1fb08 <__assert_fail@plt+0xcf4c>
   1fb98:	mov	r1, r0
   1fb9c:	mov	r0, #0
   1fba0:	stm	r4, {r0, r1}
   1fba4:	mov	r0, #1
   1fba8:	cmp	r1, r6
   1fbac:	bcc	1fc08 <__assert_fail@plt+0xd04c>
   1fbb0:	add	r2, r6, r5
   1fbb4:	mov	r0, #2
   1fbb8:	cmp	r2, r1
   1fbbc:	popcs	{r4, r5, r6, sl, fp, pc}
   1fbc0:	sub	r0, r1, r6
   1fbc4:	sub	r1, r0, r5
   1fbc8:	str	r1, [r4, #4]
   1fbcc:	mvn	r0, #1
   1fbd0:	add	r0, r0, r1, lsr #2
   1fbd4:	str	r0, [r4, #16]
   1fbd8:	cmp	r0, #0
   1fbdc:	beq	1fc0c <__assert_fail@plt+0xd050>
   1fbe0:	mov	r0, #0
   1fbe4:	movw	r2, #64556	; 0xfc2c
   1fbe8:	movt	r2, #1
   1fbec:	str	r0, [r4, #20]
   1fbf0:	str	r0, [r4, #24]
   1fbf4:	str	r0, [r4, #28]
   1fbf8:	str	r2, [r4, #32]
   1fbfc:	str	r0, [r4, #36]	; 0x24
   1fc00:	str	r0, [r4, #40]	; 0x28
   1fc04:	str	r1, [r4, #12]
   1fc08:	pop	{r4, r5, r6, sl, fp, pc}
   1fc0c:	movw	r0, #11627	; 0x2d6b
   1fc10:	movt	r0, #4
   1fc14:	movw	r1, #11241	; 0x2be9
   1fc18:	movt	r1, #4
   1fc1c:	movw	r3, #11650	; 0x2d82
   1fc20:	movt	r3, #4
   1fc24:	movw	r2, #518	; 0x206
   1fc28:	bl	12bbc <__assert_fail@plt>
   1fc2c:	mov	r0, #0
   1fc30:	bx	lr
   1fc34:	ldr	r1, [r0, #4]
   1fc38:	mov	r2, #0
   1fc3c:	cmp	r2, r1, lsr #17
   1fc40:	beq	1fc50 <__assert_fail@plt+0xd094>
   1fc44:	ldr	r1, [r0, #8]
   1fc48:	cmp	r1, #131072	; 0x20000
   1fc4c:	movls	r1, #131072	; 0x20000
   1fc50:	str	r1, [r0, #12]
   1fc54:	bx	lr
   1fc58:	push	{r4, r5, r6, sl, fp, lr}
   1fc5c:	add	fp, sp, #16
   1fc60:	mov	r4, r1
   1fc64:	mov	r6, #0
   1fc68:	str	r6, [r1, #16]
   1fc6c:	str	r6, [r1]
   1fc70:	str	r6, [r1, #4]
   1fc74:	str	r6, [r1, #8]
   1fc78:	str	r6, [r1, #36]	; 0x24
   1fc7c:	str	r6, [r1, #40]	; 0x28
   1fc80:	ldr	r0, [r0, #12]
   1fc84:	movw	r1, #63488	; 0xf800
   1fc88:	movt	r1, #32767	; 0x7fff
   1fc8c:	cmp	r0, r1
   1fc90:	bcs	1fcc0 <__assert_fail@plt+0xd104>
   1fc94:	mov	r5, r2
   1fc98:	add	r0, r0, #1
   1fc9c:	bl	2b5cc <__assert_fail@plt+0x18a10>
   1fca0:	mvn	r1, #0
   1fca4:	str	r0, [r4, #12]
   1fca8:	str	r6, [r4, #16]
   1fcac:	str	r6, [r4, #20]
   1fcb0:	str	r5, [r4, #24]
   1fcb4:	str	r6, [r4, #28]
   1fcb8:	str	r1, [r4, #32]
   1fcbc:	pop	{r4, r5, r6, sl, fp, pc}
   1fcc0:	movw	r0, #11725	; 0x2dcd
   1fcc4:	movt	r0, #4
   1fcc8:	movw	r1, #11241	; 0x2be9
   1fccc:	movt	r1, #4
   1fcd0:	movw	r3, #11760	; 0x2df0
   1fcd4:	movt	r3, #4
   1fcd8:	mov	r2, #572	; 0x23c
   1fcdc:	bl	12bbc <__assert_fail@plt>
   1fce0:	push	{r4, r5, r6, sl, fp, lr}
   1fce4:	add	fp, sp, #16
   1fce8:	mov	r1, r0
   1fcec:	ldr	r0, [r0]
   1fcf0:	cmp	r0, #0
   1fcf4:	beq	1fd20 <__assert_fail@plt+0xd164>
   1fcf8:	add	r6, r1, #4
   1fcfc:	mov	r5, #0
   1fd00:	mov	r4, #0
   1fd04:	bl	1288c <strlen@plt>
   1fd08:	add	r4, r0, r4
   1fd0c:	ldr	r0, [r6, r5, lsl #2]
   1fd10:	add	r5, r5, #1
   1fd14:	cmp	r0, #0
   1fd18:	bne	1fd04 <__assert_fail@plt+0xd148>
   1fd1c:	b	1fd28 <__assert_fail@plt+0xd16c>
   1fd20:	mov	r4, #0
   1fd24:	mov	r5, #0
   1fd28:	movw	r0, #11845	; 0x2e45
   1fd2c:	movt	r0, #4
   1fd30:	mov	r1, r5
   1fd34:	bl	1fd64 <__assert_fail@plt+0xd1a8>
   1fd38:	mov	r1, r0
   1fd3c:	mov	r0, #1
   1fd40:	cmp	r1, #0
   1fd44:	popne	{r4, r5, r6, sl, fp, pc}
   1fd48:	movw	r0, #11882	; 0x2e6a
   1fd4c:	movt	r0, #4
   1fd50:	mov	r1, r4
   1fd54:	bl	1fd64 <__assert_fail@plt+0xd1a8>
   1fd58:	cmp	r0, #0
   1fd5c:	movwne	r0, #1
   1fd60:	pop	{r4, r5, r6, sl, fp, pc}
   1fd64:	push	{r4, r5, fp, lr}
   1fd68:	add	fp, sp, #8
   1fd6c:	sub	sp, sp, #16
   1fd70:	mov	r5, r1
   1fd74:	mov	r4, r0
   1fd78:	bl	127cc <getenv@plt>
   1fd7c:	cmp	r0, #0
   1fd80:	beq	1fdbc <__assert_fail@plt+0xd200>
   1fd84:	mov	r1, #0
   1fd88:	str	r1, [sp]
   1fd8c:	add	r1, sp, #12
   1fd90:	add	r3, sp, #8
   1fd94:	mov	r2, #10
   1fd98:	bl	2ba5c <__assert_fail@plt+0x18ea0>
   1fd9c:	cmp	r0, #0
   1fda0:	bne	1fdc8 <__assert_fail@plt+0xd20c>
   1fda4:	ldr	r1, [sp, #8]
   1fda8:	mov	r0, #1
   1fdac:	cmp	r1, r5
   1fdb0:	movcs	r0, #0
   1fdb4:	sub	sp, fp, #8
   1fdb8:	pop	{r4, r5, fp, pc}
   1fdbc:	mov	r0, #0
   1fdc0:	sub	sp, fp, #8
   1fdc4:	pop	{r4, r5, fp, pc}
   1fdc8:	bl	128d4 <__errno_location@plt>
   1fdcc:	ldr	r5, [r0]
   1fdd0:	movw	r1, #12055	; 0x2f17
   1fdd4:	movt	r1, #4
   1fdd8:	mov	r0, #0
   1fddc:	mov	r2, #5
   1fde0:	bl	1264c <dcgettext@plt>
   1fde4:	mov	r2, r0
   1fde8:	mov	r0, #1
   1fdec:	mov	r1, r5
   1fdf0:	mov	r3, r4
   1fdf4:	bl	12790 <error@plt>
   1fdf8:	push	{r4, r5, r6, sl, fp, lr}
   1fdfc:	add	fp, sp, #16
   1fe00:	sub	sp, sp, #8
   1fe04:	mov	r5, r2
   1fe08:	mov	r4, r1
   1fe0c:	mov	r6, r0
   1fe10:	mov	r0, sp
   1fe14:	bl	2a6dc <__assert_fail@plt+0x17b20>
   1fe18:	cmp	r0, #0
   1fe1c:	bne	1fe90 <__assert_fail@plt+0xd2d4>
   1fe20:	mov	r0, r6
   1fe24:	bl	2a738 <__assert_fail@plt+0x17b7c>
   1fe28:	cmp	r0, #0
   1fe2c:	bne	1fe84 <__assert_fail@plt+0xd2c8>
   1fe30:	mov	r0, r5
   1fe34:	blx	r4
   1fe38:	mov	r4, r0
   1fe3c:	mov	r5, #0
   1fe40:	cmn	r0, #1
   1fe44:	bgt	1fe50 <__assert_fail@plt+0xd294>
   1fe48:	bl	128d4 <__errno_location@plt>
   1fe4c:	ldr	r5, [r0]
   1fe50:	mov	r0, sp
   1fe54:	bl	2a738 <__assert_fail@plt+0x17b7c>
   1fe58:	cmp	r0, #0
   1fe5c:	bne	1fe84 <__assert_fail@plt+0xd2c8>
   1fe60:	mov	r0, sp
   1fe64:	bl	2a754 <__assert_fail@plt+0x17b98>
   1fe68:	cmp	r5, #0
   1fe6c:	beq	1fe78 <__assert_fail@plt+0xd2bc>
   1fe70:	bl	128d4 <__errno_location@plt>
   1fe74:	str	r5, [r0]
   1fe78:	mov	r0, r4
   1fe7c:	sub	sp, fp, #16
   1fe80:	pop	{r4, r5, r6, sl, fp, pc}
   1fe84:	bl	128d4 <__errno_location@plt>
   1fe88:	ldr	r0, [r0]
   1fe8c:	bl	25528 <__assert_fail@plt+0x1296c>
   1fe90:	bl	128d4 <__errno_location@plt>
   1fe94:	ldr	r0, [r0]
   1fe98:	bl	254e8 <__assert_fail@plt+0x1292c>
   1fe9c:	push	{r4, r5, r6, sl, fp, lr}
   1fea0:	add	fp, sp, #16
   1fea4:	sub	sp, sp, #8
   1fea8:	mov	r4, r2
   1feac:	cmn	r0, #100	; 0x64
   1feb0:	bne	1fec4 <__assert_fail@plt+0xd308>
   1feb4:	mov	r0, r4
   1feb8:	sub	sp, fp, #16
   1febc:	pop	{r4, r5, r6, sl, fp, lr}
   1fec0:	bx	r1
   1fec4:	mov	r5, r0
   1fec8:	mov	r6, r1
   1fecc:	mov	r0, sp
   1fed0:	bl	2a6dc <__assert_fail@plt+0x17b20>
   1fed4:	cmp	r0, #0
   1fed8:	bne	1ff60 <__assert_fail@plt+0xd3a4>
   1fedc:	mov	r0, r5
   1fee0:	bl	12aa8 <fchdir@plt>
   1fee4:	cmp	r0, #0
   1fee8:	beq	1ff0c <__assert_fail@plt+0xd350>
   1feec:	bl	128d4 <__errno_location@plt>
   1fef0:	mov	r4, r0
   1fef4:	ldr	r5, [r0]
   1fef8:	mov	r0, sp
   1fefc:	bl	2a754 <__assert_fail@plt+0x17b98>
   1ff00:	str	r5, [r4]
   1ff04:	mvn	r4, #0
   1ff08:	b	1ff54 <__assert_fail@plt+0xd398>
   1ff0c:	mov	r0, r4
   1ff10:	blx	r6
   1ff14:	mov	r4, r0
   1ff18:	mov	r5, #0
   1ff1c:	cmn	r0, #1
   1ff20:	bgt	1ff2c <__assert_fail@plt+0xd370>
   1ff24:	bl	128d4 <__errno_location@plt>
   1ff28:	ldr	r5, [r0]
   1ff2c:	mov	r0, sp
   1ff30:	bl	2a738 <__assert_fail@plt+0x17b7c>
   1ff34:	cmp	r0, #0
   1ff38:	bne	1ff6c <__assert_fail@plt+0xd3b0>
   1ff3c:	mov	r0, sp
   1ff40:	bl	2a754 <__assert_fail@plt+0x17b98>
   1ff44:	cmp	r5, #0
   1ff48:	beq	1ff54 <__assert_fail@plt+0xd398>
   1ff4c:	bl	128d4 <__errno_location@plt>
   1ff50:	str	r5, [r0]
   1ff54:	mov	r0, r4
   1ff58:	sub	sp, fp, #16
   1ff5c:	pop	{r4, r5, r6, sl, fp, pc}
   1ff60:	bl	128d4 <__errno_location@plt>
   1ff64:	ldr	r0, [r0]
   1ff68:	bl	254e8 <__assert_fail@plt+0x1292c>
   1ff6c:	bl	128d4 <__errno_location@plt>
   1ff70:	ldr	r0, [r0]
   1ff74:	bl	25528 <__assert_fail@plt+0x1296c>
   1ff78:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ff7c:	add	fp, sp, #24
   1ff80:	mov	r6, r2
   1ff84:	mov	r7, r1
   1ff88:	mov	r4, r0
   1ff8c:	bl	128d4 <__errno_location@plt>
   1ff90:	cmp	r7, #0
   1ff94:	beq	20014 <__assert_fail@plt+0xd458>
   1ff98:	mov	r8, r0
   1ff9c:	ldr	r9, [r0]
   1ffa0:	ldr	r5, [r6]
   1ffa4:	mov	r0, r5
   1ffa8:	mov	r1, r7
   1ffac:	bl	20054 <__assert_fail@plt+0xd498>
   1ffb0:	mov	r1, r0
   1ffb4:	cmp	r5, #0
   1ffb8:	beq	1ffe8 <__assert_fail@plt+0xd42c>
   1ffbc:	cmp	r1, r5
   1ffc0:	beq	20000 <__assert_fail@plt+0xd444>
   1ffc4:	str	r1, [r6]
   1ffc8:	mov	r0, r4
   1ffcc:	bl	2f804 <__assert_fail@plt+0x1cc48>
   1ffd0:	mov	r4, r0
   1ffd4:	cmp	r0, #0
   1ffd8:	bne	20008 <__assert_fail@plt+0xd44c>
   1ffdc:	mov	r4, #0
   1ffe0:	mov	r0, r4
   1ffe4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ffe8:	cmp	r4, #0
   1ffec:	bne	20034 <__assert_fail@plt+0xd478>
   1fff0:	str	r1, [r6]
   1fff4:	mov	r0, r1
   1fff8:	bl	2ed04 <__assert_fail@plt+0x1c148>
   1fffc:	mov	r4, r0
   20000:	cmp	r4, #0
   20004:	beq	1ffdc <__assert_fail@plt+0xd420>
   20008:	str	r9, [r8]
   2000c:	mov	r0, r4
   20010:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20014:	movw	r0, #12116	; 0x2f54
   20018:	movt	r0, #4
   2001c:	movw	r1, #12128	; 0x2f60
   20020:	movt	r1, #4
   20024:	movw	r3, #12140	; 0x2f6c
   20028:	movt	r3, #4
   2002c:	mov	r2, #71	; 0x47
   20030:	bl	12bbc <__assert_fail@plt>
   20034:	movw	r0, #12182	; 0x2f96
   20038:	movt	r0, #4
   2003c:	movw	r1, #12128	; 0x2f60
   20040:	movt	r1, #4
   20044:	movw	r3, #12140	; 0x2f6c
   20048:	movt	r3, #4
   2004c:	mov	r2, #79	; 0x4f
   20050:	bl	12bbc <__assert_fail@plt>
   20054:	cmp	r0, #0
   20058:	movweq	r0, #16
   2005c:	cmp	r0, r1
   20060:	bxcs	lr
   20064:	lsl	r2, r0, #1
   20068:	cmp	r0, r0, lsl #1
   2006c:	mov	r0, r2
   20070:	bls	2005c <__assert_fail@plt+0xd4a0>
   20074:	mov	r0, r1
   20078:	bx	lr
   2007c:	push	{r4, sl, fp, lr}
   20080:	add	fp, sp, #8
   20084:	mov	r4, r0
   20088:	bl	1ff78 <__assert_fail@plt+0xd3bc>
   2008c:	cmp	r0, #0
   20090:	popne	{r4, sl, fp, pc}
   20094:	mov	r0, r4
   20098:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2009c:	bl	2b97c <__assert_fail@plt+0x18dc0>
   200a0:	push	{fp, lr}
   200a4:	mov	fp, sp
   200a8:	sub	sp, sp, #16
   200ac:	bl	200fc <__assert_fail@plt+0xd540>
   200b0:	mov	r1, #0
   200b4:	str	r1, [sp, #12]
   200b8:	str	r1, [sp, #4]
   200bc:	str	r1, [sp, #8]
   200c0:	cmn	r0, #-2147483647	; 0x80000001
   200c4:	addne	r0, r0, #1
   200c8:	movw	r1, #580	; 0x244
   200cc:	movt	r1, #2
   200d0:	add	r2, sp, #4
   200d4:	bl	2015c <__assert_fail@plt+0xd5a0>
   200d8:	ldmib	sp, {r0, r1}
   200dc:	movw	r2, #23800	; 0x5cf8
   200e0:	movt	r2, #5
   200e4:	str	r0, [r2]
   200e8:	movw	r0, #23804	; 0x5cfc
   200ec:	movt	r0, #5
   200f0:	str	r1, [r0]
   200f4:	mov	sp, fp
   200f8:	pop	{fp, pc}
   200fc:	push	{r4, sl, fp, lr}
   20100:	add	fp, sp, #8
   20104:	sub	sp, sp, #16
   20108:	bl	204cc <__assert_fail@plt+0xd910>
   2010c:	mov	r4, r0
   20110:	cmn	r0, #1
   20114:	bgt	20150 <__assert_fail@plt+0xd594>
   20118:	mov	r0, #4
   2011c:	bl	12664 <sysconf@plt>
   20120:	mov	r4, r0
   20124:	mov	r1, sp
   20128:	mov	r0, #7
   2012c:	bl	12670 <getrlimit64@plt>
   20130:	cmn	r4, #1
   20134:	movweq	r4, #20
   20138:	cmp	r0, #0
   2013c:	bne	20150 <__assert_fail@plt+0xd594>
   20140:	ldm	sp, {r0, r1}
   20144:	and	r1, r0, r1
   20148:	cmn	r1, #1
   2014c:	movne	r4, r0
   20150:	mov	r0, r4
   20154:	sub	sp, fp, #8
   20158:	pop	{r4, sl, fp, pc}
   2015c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20160:	add	fp, sp, #28
   20164:	sub	sp, sp, #532	; 0x214
   20168:	str	r2, [sp, #12]
   2016c:	str	r0, [sp, #8]
   20170:	cmp	r0, #1
   20174:	blt	2023c <__assert_fail@plt+0xd680>
   20178:	mov	r5, r1
   2017c:	add	r0, sp, #16
   20180:	add	r1, r0, #6
   20184:	str	r1, [sp]
   20188:	add	r0, r0, #4
   2018c:	str	r0, [sp, #4]
   20190:	mov	r9, #0
   20194:	mov	r8, #5
   20198:	ldr	r0, [sp, #8]
   2019c:	sub	sl, r0, r9
   201a0:	cmp	sl, #64	; 0x40
   201a4:	mov	r7, sl
   201a8:	movge	r7, #64	; 0x40
   201ac:	cmp	sl, #1
   201b0:	blt	201d4 <__assert_fail@plt+0xd618>
   201b4:	mov	r0, #0
   201b8:	ldr	r1, [sp, #4]
   201bc:	add	r2, r9, r0
   201c0:	stmda	r1, {r2, r8}
   201c4:	add	r1, r1, #8
   201c8:	add	r0, r0, #1
   201cc:	cmp	r0, r7
   201d0:	blt	201bc <__assert_fail@plt+0xd600>
   201d4:	add	r0, sp, #16
   201d8:	mov	r1, r7
   201dc:	mov	r2, #0
   201e0:	bl	126e8 <poll@plt>
   201e4:	cmn	r0, #1
   201e8:	beq	2023c <__assert_fail@plt+0xd680>
   201ec:	cmp	sl, #1
   201f0:	blt	2022c <__assert_fail@plt+0xd670>
   201f4:	mov	r6, #0
   201f8:	ldr	r4, [sp]
   201fc:	ldrh	r0, [r4]
   20200:	cmp	r0, #32
   20204:	beq	2021c <__assert_fail@plt+0xd660>
   20208:	ldr	r0, [r4, #-6]
   2020c:	ldr	r1, [sp, #12]
   20210:	blx	r5
   20214:	cmp	r0, #0
   20218:	bne	2023c <__assert_fail@plt+0xd680>
   2021c:	add	r4, r4, #8
   20220:	add	r6, r6, #1
   20224:	cmp	r6, r7
   20228:	blt	201fc <__assert_fail@plt+0xd640>
   2022c:	add	r9, r7, r9
   20230:	ldr	r0, [sp, #8]
   20234:	cmp	r9, r0
   20238:	blt	20198 <__assert_fail@plt+0xd5dc>
   2023c:	sub	sp, fp, #28
   20240:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20244:	push	{r4, r5, r6, sl, fp, lr}
   20248:	add	fp, sp, #16
   2024c:	mov	r5, r1
   20250:	mov	r6, r0
   20254:	bl	205dc <__assert_fail@plt+0xda20>
   20258:	mov	r4, #0
   2025c:	cmp	r0, #0
   20260:	beq	2026c <__assert_fail@plt+0xd6b0>
   20264:	mov	r0, r4
   20268:	pop	{r4, r5, r6, sl, fp, pc}
   2026c:	ldm	r5, {r0, r1}
   20270:	mov	r2, #4
   20274:	add	r1, r2, r1, lsl #2
   20278:	add	r2, r5, #8
   2027c:	bl	1ff78 <__assert_fail@plt+0xd3bc>
   20280:	cmp	r0, #0
   20284:	mvneq	r4, #0
   20288:	moveq	r0, r4
   2028c:	popeq	{r4, r5, r6, sl, fp, pc}
   20290:	str	r0, [r5]
   20294:	ldr	r1, [r5, #4]
   20298:	str	r6, [r0, r1, lsl #2]
   2029c:	ldr	r0, [r5, #4]
   202a0:	add	r0, r0, #1
   202a4:	str	r0, [r5, #4]
   202a8:	mov	r0, r4
   202ac:	pop	{r4, r5, r6, sl, fp, pc}
   202b0:	sub	sp, sp, #8
   202b4:	push	{r4, r5, r6, r7, fp, lr}
   202b8:	add	fp, sp, #16
   202bc:	sub	sp, sp, #8
   202c0:	mov	r5, r1
   202c4:	mov	r4, r0
   202c8:	str	r3, [fp, #12]
   202cc:	str	r2, [fp, #8]
   202d0:	mov	r6, #0
   202d4:	tst	r1, #64	; 0x40
   202d8:	addne	r0, fp, #8
   202dc:	orrne	r0, r0, #4
   202e0:	strne	r0, [sp, #4]
   202e4:	ldrne	r6, [fp, #8]
   202e8:	movw	r7, #23809	; 0x5d01
   202ec:	movt	r7, #5
   202f0:	ldrb	r0, [r7]
   202f4:	cmp	r0, #0
   202f8:	bne	20314 <__assert_fail@plt+0xd758>
   202fc:	bl	20364 <__assert_fail@plt+0xd7a8>
   20300:	movw	r1, #23808	; 0x5d00
   20304:	movt	r1, #5
   20308:	strb	r0, [r1]
   2030c:	mov	r0, #1
   20310:	strb	r0, [r7]
   20314:	orr	r1, r5, #524288	; 0x80000
   20318:	mov	r0, r4
   2031c:	mov	r2, r6
   20320:	bl	21ff8 <__assert_fail@plt+0xf43c>
   20324:	mov	r4, r0
   20328:	cmp	r0, #0
   2032c:	blt	20350 <__assert_fail@plt+0xd794>
   20330:	movw	r0, #23808	; 0x5d00
   20334:	movt	r0, #5
   20338:	ldrb	r0, [r0]
   2033c:	cmp	r0, #0
   20340:	bne	20350 <__assert_fail@plt+0xd794>
   20344:	mov	r0, r4
   20348:	mov	r1, #1
   2034c:	bl	21c94 <__assert_fail@plt+0xf0d8>
   20350:	mov	r0, r4
   20354:	sub	sp, fp, #16
   20358:	pop	{r4, r5, r6, r7, fp, lr}
   2035c:	add	sp, sp, #8
   20360:	bx	lr
   20364:	push	{r4, r5, fp, lr}
   20368:	add	fp, sp, #8
   2036c:	movw	r0, #62562	; 0xf462
   20370:	movt	r0, #3
   20374:	mov	r1, #524288	; 0x80000
   20378:	bl	21ff8 <__assert_fail@plt+0xf43c>
   2037c:	cmp	r0, #0
   20380:	movlt	r4, #0
   20384:	movlt	r0, r4
   20388:	poplt	{r4, r5, fp, pc}
   2038c:	mov	r5, r0
   20390:	bl	205dc <__assert_fail@plt+0xda20>
   20394:	mov	r4, r0
   20398:	mov	r0, r5
   2039c:	bl	12b74 <close@plt>
   203a0:	cmp	r4, #0
   203a4:	movwne	r4, #1
   203a8:	mov	r0, r4
   203ac:	pop	{r4, r5, fp, pc}
   203b0:	push	{r4, sl, fp, lr}
   203b4:	add	fp, sp, #8
   203b8:	movw	r4, #23800	; 0x5cf8
   203bc:	movt	r4, #5
   203c0:	ldr	r0, [r4]
   203c4:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   203c8:	movw	r0, #23804	; 0x5cfc
   203cc:	movt	r0, #5
   203d0:	mov	r1, #0
   203d4:	str	r1, [r0]
   203d8:	str	r1, [r4]
   203dc:	pop	{r4, sl, fp, pc}
   203e0:	push	{fp, lr}
   203e4:	mov	fp, sp
   203e8:	movw	r0, #12199	; 0x2fa7
   203ec:	movt	r0, #4
   203f0:	bl	127cc <getenv@plt>
   203f4:	cmp	r0, #0
   203f8:	movwne	r0, #1
   203fc:	pop	{fp, pc}
   20400:	push	{r4, sl, fp, lr}
   20404:	add	fp, sp, #8
   20408:	movw	r0, #23804	; 0x5cfc
   2040c:	movt	r0, #5
   20410:	ldr	r1, [r0]
   20414:	movw	r0, #23800	; 0x5cf8
   20418:	movt	r0, #5
   2041c:	ldr	r0, [r0]
   20420:	bl	20478 <__assert_fail@plt+0xd8bc>
   20424:	cmp	r0, #0
   20428:	poplt	{r4, sl, fp, pc}
   2042c:	mov	r4, r0
   20430:	movw	r1, #12227	; 0x2fc3
   20434:	movt	r1, #4
   20438:	mov	r0, #0
   2043c:	mov	r2, #5
   20440:	bl	1264c <dcgettext@plt>
   20444:	mov	r2, r0
   20448:	mov	r0, #0
   2044c:	mov	r1, #0
   20450:	mov	r3, r4
   20454:	bl	12790 <error@plt>
   20458:	movw	r0, #12379	; 0x305b
   2045c:	movt	r0, #4
   20460:	movw	r1, #12388	; 0x3064
   20464:	movt	r1, #4
   20468:	movw	r3, #12397	; 0x306d
   2046c:	movt	r3, #4
   20470:	mov	r2, #396	; 0x18c
   20474:	bl	12bbc <__assert_fail@plt>
   20478:	push	{r4, r5, fp, lr}
   2047c:	add	fp, sp, #8
   20480:	sub	sp, sp, #16
   20484:	mov	r4, r1
   20488:	mov	r5, r0
   2048c:	bl	200fc <__assert_fail@plt+0xd540>
   20490:	str	r5, [sp]
   20494:	str	r4, [sp, #4]
   20498:	mov	r1, #0
   2049c:	str	r1, [sp, #8]
   204a0:	mvn	r1, #0
   204a4:	str	r1, [sp, #12]
   204a8:	cmn	r0, #-2147483647	; 0x80000001
   204ac:	addne	r0, r0, #1
   204b0:	movw	r1, #1524	; 0x5f4
   204b4:	movt	r1, #2
   204b8:	mov	r2, sp
   204bc:	bl	2015c <__assert_fail@plt+0xd5a0>
   204c0:	ldr	r0, [sp, #12]
   204c4:	sub	sp, fp, #8
   204c8:	pop	{r4, r5, fp, pc}
   204cc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   204d0:	add	fp, sp, #24
   204d4:	movw	r0, #12433	; 0x3091
   204d8:	movt	r0, #4
   204dc:	bl	21e08 <__assert_fail@plt+0xf24c>
   204e0:	cmp	r0, #0
   204e4:	beq	205b8 <__assert_fail@plt+0xd9fc>
   204e8:	mov	r4, r0
   204ec:	bl	128d4 <__errno_location@plt>
   204f0:	mov	r6, r0
   204f4:	mov	r7, #0
   204f8:	str	r7, [r0]
   204fc:	mov	r0, r4
   20500:	bl	12a6c <readdir64@plt>
   20504:	cmp	r0, #0
   20508:	beq	20574 <__assert_fail@plt+0xd9b8>
   2050c:	mov	r8, #0
   20510:	mvn	r5, #0
   20514:	mov	r7, #0
   20518:	mov	r1, r0
   2051c:	ldrb	r2, [r1, #19]!
   20520:	cmp	r2, #46	; 0x2e
   20524:	bne	20544 <__assert_fail@plt+0xd988>
   20528:	ldrb	r2, [r0, #20]
   2052c:	cmp	r2, #0
   20530:	beq	2055c <__assert_fail@plt+0xd9a0>
   20534:	cmp	r2, #46	; 0x2e
   20538:	ldrbeq	r0, [r0, #21]
   2053c:	cmpeq	r0, #0
   20540:	beq	2055c <__assert_fail@plt+0xd9a0>
   20544:	mov	r0, r1
   20548:	mov	r1, #0
   2054c:	bl	21700 <__assert_fail@plt+0xeb44>
   20550:	cmp	r0, r5
   20554:	movgt	r5, r0
   20558:	mov	r7, #1
   2055c:	str	r8, [r6]
   20560:	mov	r0, r4
   20564:	bl	12a6c <readdir64@plt>
   20568:	cmp	r0, #0
   2056c:	bne	20518 <__assert_fail@plt+0xd95c>
   20570:	b	20578 <__assert_fail@plt+0xd9bc>
   20574:	mvn	r5, #0
   20578:	ldr	r6, [r6]
   2057c:	cmp	r6, #0
   20580:	beq	205c4 <__assert_fail@plt+0xda08>
   20584:	movw	r2, #12433	; 0x3091
   20588:	movt	r2, #4
   2058c:	mov	r0, #0
   20590:	mov	r1, #8
   20594:	bl	2a024 <__assert_fail@plt+0x17468>
   20598:	mov	r3, r0
   2059c:	movw	r2, #19439	; 0x4bef
   205a0:	movt	r2, #4
   205a4:	mov	r0, #0
   205a8:	mov	r1, r6
   205ac:	bl	12790 <error@plt>
   205b0:	mov	r0, r4
   205b4:	bl	12b8c <closedir@plt>
   205b8:	mvn	r5, #0
   205bc:	mov	r0, r5
   205c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   205c4:	mov	r0, r4
   205c8:	bl	12b8c <closedir@plt>
   205cc:	cmp	r7, #0
   205d0:	mvneq	r5, #0
   205d4:	mov	r0, r5
   205d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   205dc:	push	{fp, lr}
   205e0:	mov	fp, sp
   205e4:	mov	r1, #1
   205e8:	bl	2c82c <__assert_fail@plt+0x19c70>
   205ec:	and	r0, r0, #1
   205f0:	pop	{fp, pc}
   205f4:	push	{r4, r5, fp, lr}
   205f8:	add	fp, sp, #8
   205fc:	mov	r4, r1
   20600:	mov	r5, r0
   20604:	bl	205dc <__assert_fail@plt+0xda20>
   20608:	mov	r1, r0
   2060c:	mov	r0, #0
   20610:	cmp	r1, #0
   20614:	beq	2061c <__assert_fail@plt+0xda60>
   20618:	pop	{r4, r5, fp, pc}
   2061c:	ldr	r2, [r4, #4]
   20620:	ldr	r1, [r4, #8]
   20624:	cmp	r1, r2
   20628:	bcs	20658 <__assert_fail@plt+0xda9c>
   2062c:	ldr	r2, [r4]
   20630:	ldr	r3, [r2, r1, lsl #2]
   20634:	cmp	r3, r5
   20638:	bge	20654 <__assert_fail@plt+0xda98>
   2063c:	add	r1, r1, #1
   20640:	str	r1, [r4, #8]
   20644:	ldr	r3, [r4, #4]
   20648:	cmp	r1, r3
   2064c:	bcc	20630 <__assert_fail@plt+0xda74>
   20650:	b	20658 <__assert_fail@plt+0xda9c>
   20654:	popeq	{r4, r5, fp, pc}
   20658:	str	r5, [r4, #12]
   2065c:	mvn	r0, #0
   20660:	pop	{r4, r5, fp, pc}
   20664:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20668:	add	fp, sp, #24
   2066c:	sub	sp, sp, #16
   20670:	mov	r8, r0
   20674:	movw	r0, #21856	; 0x5560
   20678:	movt	r0, #5
   2067c:	ldr	r0, [r0]
   20680:	bl	2ca10 <__assert_fail@plt+0x19e54>
   20684:	movw	r0, #21868	; 0x556c
   20688:	movt	r0, #5
   2068c:	ldr	r6, [r0]
   20690:	movw	r0, #21724	; 0x54dc
   20694:	movt	r0, #5
   20698:	ldr	r5, [r0]
   2069c:	mov	r9, #0
   206a0:	movw	r1, #12475	; 0x30bb
   206a4:	movt	r1, #4
   206a8:	mov	r0, #0
   206ac:	mov	r2, #5
   206b0:	bl	1264c <dcgettext@plt>
   206b4:	mov	r7, r0
   206b8:	movw	r1, #12490	; 0x30ca
   206bc:	movt	r1, #4
   206c0:	mov	r0, #0
   206c4:	mov	r2, #5
   206c8:	bl	1264c <dcgettext@plt>
   206cc:	mov	r4, r0
   206d0:	movw	r1, #12505	; 0x30d9
   206d4:	movt	r1, #4
   206d8:	mov	r0, #0
   206dc:	mov	r2, #5
   206e0:	bl	1264c <dcgettext@plt>
   206e4:	str	r7, [sp]
   206e8:	str	r4, [sp, #4]
   206ec:	str	r0, [sp, #8]
   206f0:	str	r9, [sp, #12]
   206f4:	movw	r2, #12461	; 0x30ad
   206f8:	movt	r2, #4
   206fc:	mov	r0, r6
   20700:	mov	r1, r8
   20704:	mov	r3, r5
   20708:	bl	2b4e0 <__assert_fail@plt+0x18924>
   2070c:	sub	sp, fp, #24
   20710:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20714:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20718:	add	fp, sp, #28
   2071c:	sub	sp, sp, #940	; 0x3ac
   20720:	mov	r5, r3
   20724:	mov	r6, r2
   20728:	mov	r7, r1
   2072c:	str	r0, [fp, #-960]	; 0xfffffc40
   20730:	ldr	r0, [r3, #16]
   20734:	sub	r1, fp, #44	; 0x2c
   20738:	bl	22040 <__assert_fail@plt+0xf484>
   2073c:	movw	sl, #21728	; 0x54e0
   20740:	movt	sl, #5
   20744:	ldr	r4, [sl]
   20748:	str	r5, [fp, #-956]	; 0xfffffc44
   2074c:	ldrd	r0, [r5, #96]	; 0x60
   20750:	sub	sp, sp, #16
   20754:	mov	r2, #0
   20758:	mov	r3, #1
   2075c:	str	r3, [sp]
   20760:	stmib	sp, {r2, r3}
   20764:	str	r2, [sp, #12]
   20768:	sub	r2, fp, #696	; 0x2b8
   2076c:	mov	r3, #0
   20770:	bl	23140 <__assert_fail@plt+0x10584>
   20774:	add	sp, sp, #16
   20778:	mov	r3, r0
   2077c:	ldr	r9, [fp, #20]
   20780:	movw	r1, #12518	; 0x30e6
   20784:	movt	r1, #4
   20788:	mov	r0, r9
   2078c:	mov	r2, r4
   20790:	bl	128c8 <fprintf@plt>
   20794:	cmp	r0, #0
   20798:	blt	20e38 <__assert_fail@plt+0xe27c>
   2079c:	str	r7, [fp, #-968]	; 0xfffffc38
   207a0:	str	r6, [fp, #-964]	; 0xfffffc3c
   207a4:	ldr	r8, [fp, #12]
   207a8:	ldr	r1, [sl]
   207ac:	cmp	r0, r1
   207b0:	strgt	r0, [sl]
   207b4:	mov	r0, #32
   207b8:	mov	r1, r9
   207bc:	bl	12a90 <putc@plt>
   207c0:	mov	r5, r0
   207c4:	movw	r7, #21732	; 0x54e4
   207c8:	movt	r7, #5
   207cc:	ldr	r4, [r7]
   207d0:	ldr	r6, [fp, #-956]	; 0xfffffc44
   207d4:	ldrd	r0, [r6, #64]	; 0x40
   207d8:	sub	sp, sp, #16
   207dc:	asr	r2, r8, #31
   207e0:	mov	sl, #0
   207e4:	mov	r3, #512	; 0x200
   207e8:	stm	sp, {r3, sl}
   207ec:	str	r8, [sp, #8]
   207f0:	str	r2, [sp, #12]
   207f4:	sub	r2, fp, #696	; 0x2b8
   207f8:	mov	r3, #0
   207fc:	bl	23140 <__assert_fail@plt+0x10584>
   20800:	add	sp, sp, #16
   20804:	mov	r3, r0
   20808:	movw	r1, #12518	; 0x30e6
   2080c:	movt	r1, #4
   20810:	mov	r0, r9
   20814:	mov	r2, r4
   20818:	bl	128c8 <fprintf@plt>
   2081c:	cmn	r5, #1
   20820:	movweq	sl, #150	; 0x96
   20824:	cmp	r0, #0
   20828:	blt	20e40 <__assert_fail@plt+0xe284>
   2082c:	ldr	r1, [r7]
   20830:	cmp	r0, r1
   20834:	ble	2084c <__assert_fail@plt+0xdc90>
   20838:	str	r0, [r7]
   2083c:	cmn	r5, #1
   20840:	bne	20854 <__assert_fail@plt+0xdc98>
   20844:	mov	r7, #150	; 0x96
   20848:	b	20d74 <__assert_fail@plt+0xe1b8>
   2084c:	cmn	r5, #1
   20850:	beq	20844 <__assert_fail@plt+0xdc88>
   20854:	mov	r0, #32
   20858:	mov	r1, r9
   2085c:	bl	12a90 <putc@plt>
   20860:	cmn	r0, #1
   20864:	beq	20e48 <__assert_fail@plt+0xe28c>
   20868:	mov	r4, r0
   2086c:	sub	r0, fp, #44	; 0x2c
   20870:	mov	r1, r9
   20874:	bl	12b50 <fputs@plt>
   20878:	cmp	r0, #0
   2087c:	movwlt	sl, #275	; 0x113
   20880:	cmn	r4, #1
   20884:	beq	20e30 <__assert_fail@plt+0xe274>
   20888:	cmp	r0, #0
   2088c:	blt	20e30 <__assert_fail@plt+0xe274>
   20890:	ldr	r3, [r6, #20]
   20894:	movw	r4, #21736	; 0x54e8
   20898:	movt	r4, #5
   2089c:	ldr	r2, [r4]
   208a0:	movw	r1, #12522	; 0x30ea
   208a4:	movt	r1, #4
   208a8:	mov	r0, r9
   208ac:	bl	128c8 <fprintf@plt>
   208b0:	cmp	r0, #0
   208b4:	blt	20e50 <__assert_fail@plt+0xe294>
   208b8:	ldr	r1, [r4]
   208bc:	cmp	r0, r1
   208c0:	strgt	r0, [r4]
   208c4:	mov	r0, #32
   208c8:	mov	r1, r9
   208cc:	bl	12a90 <putc@plt>
   208d0:	cmn	r0, #1
   208d4:	movweq	sl, #250	; 0xfa
   208d8:	ldr	r0, [r6, #24]
   208dc:	bl	23c34 <__assert_fail@plt+0x11078>
   208e0:	cmp	r0, #0
   208e4:	beq	20930 <__assert_fail@plt+0xdd74>
   208e8:	mov	r4, r0
   208ec:	mov	r1, #0
   208f0:	bl	24988 <__assert_fail@plt+0x11dcc>
   208f4:	movw	r1, #21740	; 0x54ec
   208f8:	movt	r1, #5
   208fc:	ldr	r2, [r1]
   20900:	cmp	r0, r2
   20904:	strgt	r0, [r1]
   20908:	ldr	r2, [r1]
   2090c:	movw	r1, #12527	; 0x30ef
   20910:	movt	r1, #4
   20914:	mov	r0, r9
   20918:	mov	r3, r4
   2091c:	bl	128c8 <fprintf@plt>
   20920:	cmn	r0, #1
   20924:	bgt	20960 <__assert_fail@plt+0xdda4>
   20928:	mov	r7, #400	; 0x190
   2092c:	b	20d74 <__assert_fail@plt+0xe1b8>
   20930:	ldr	r2, [r6, #24]
   20934:	movw	r1, #12533	; 0x30f5
   20938:	movt	r1, #4
   2093c:	mov	r0, r9
   20940:	bl	128c8 <fprintf@plt>
   20944:	movw	r1, #21740	; 0x54ec
   20948:	movt	r1, #5
   2094c:	ldr	r2, [r1]
   20950:	cmp	r0, r2
   20954:	strgt	r0, [r1]
   20958:	cmp	r0, #1
   2095c:	blt	20e70 <__assert_fail@plt+0xe2b4>
   20960:	ldr	r0, [r6, #28]
   20964:	bl	23dd8 <__assert_fail@plt+0x1121c>
   20968:	cmp	r0, #0
   2096c:	beq	209b8 <__assert_fail@plt+0xddfc>
   20970:	mov	r4, r0
   20974:	mov	r1, #0
   20978:	bl	24988 <__assert_fail@plt+0x11dcc>
   2097c:	movw	r1, #21744	; 0x54f0
   20980:	movt	r1, #5
   20984:	ldr	r2, [r1]
   20988:	cmp	r0, r2
   2098c:	strgt	r0, [r1]
   20990:	ldr	r2, [r1]
   20994:	movw	r1, #12527	; 0x30ef
   20998:	movt	r1, #4
   2099c:	mov	r0, r9
   209a0:	mov	r3, r4
   209a4:	bl	128c8 <fprintf@plt>
   209a8:	cmn	r0, #1
   209ac:	bgt	20a00 <__assert_fail@plt+0xde44>
   209b0:	mov	r7, #500	; 0x1f4
   209b4:	b	20d74 <__assert_fail@plt+0xe1b8>
   209b8:	ldr	r3, [r6, #28]
   209bc:	movw	r4, #21744	; 0x54f0
   209c0:	movt	r4, #5
   209c4:	ldr	r2, [r4]
   209c8:	movw	r1, #12540	; 0x30fc
   209cc:	movt	r1, #4
   209d0:	mov	r0, r9
   209d4:	bl	128c8 <fprintf@plt>
   209d8:	ldr	r1, [r4]
   209dc:	cmp	r0, r1
   209e0:	strgt	r0, [r4]
   209e4:	cmp	r0, #0
   209e8:	blt	20e78 <__assert_fail@plt+0xe2bc>
   209ec:	mov	r0, #32
   209f0:	mov	r1, r9
   209f4:	bl	12a90 <putc@plt>
   209f8:	cmn	r0, #1
   209fc:	beq	20e80 <__assert_fail@plt+0xe2c4>
   20a00:	ldr	r0, [r6, #16]
   20a04:	and	r0, r0, #45056	; 0xb000
   20a08:	orr	r0, r0, #16384	; 0x4000
   20a0c:	cmp	r0, #24576	; 0x6000
   20a10:	bne	20a94 <__assert_fail@plt+0xded8>
   20a14:	mov	r5, r6
   20a18:	ldr	r0, [r5, #32]!
   20a1c:	ldr	r1, [r5, #4]
   20a20:	bl	12478 <gnu_dev_major@plt>
   20a24:	mov	r1, r0
   20a28:	movw	r2, #21748	; 0x54f4
   20a2c:	movt	r2, #5
   20a30:	mov	r0, r9
   20a34:	bl	20ea8 <__assert_fail@plt+0xe2ec>
   20a38:	cmp	r0, #0
   20a3c:	beq	20e60 <__assert_fail@plt+0xe2a4>
   20a40:	movw	r1, #2762	; 0xaca
   20a44:	movt	r1, #4
   20a48:	mov	r0, r9
   20a4c:	bl	128c8 <fprintf@plt>
   20a50:	cmp	r0, #0
   20a54:	blt	20e68 <__assert_fail@plt+0xe2ac>
   20a58:	mov	r4, r0
   20a5c:	ldrd	r0, [r5]
   20a60:	bl	12508 <gnu_dev_minor@plt>
   20a64:	mov	r1, r0
   20a68:	movw	r2, #21752	; 0x54f8
   20a6c:	movt	r2, #5
   20a70:	mov	r0, r9
   20a74:	bl	20ea8 <__assert_fail@plt+0xe2ec>
   20a78:	cmp	r0, #0
   20a7c:	movweq	sl, #650	; 0x28a
   20a80:	beq	20e30 <__assert_fail@plt+0xe274>
   20a84:	cmp	r4, #0
   20a88:	mov	r7, sl
   20a8c:	bge	20b0c <__assert_fail@plt+0xdf50>
   20a90:	b	20d74 <__assert_fail@plt+0xe1b8>
   20a94:	mov	r0, #1
   20a98:	cmp	r8, #0
   20a9c:	movge	r8, r0
   20aa0:	asr	r1, r8, #31
   20aa4:	movw	r5, #21756	; 0x54fc
   20aa8:	movt	r5, #5
   20aac:	ldr	r4, [r5]
   20ab0:	ldrd	r6, [r6, #48]	; 0x30
   20ab4:	sub	sp, sp, #16
   20ab8:	mov	r2, #0
   20abc:	stm	sp, {r0, r2, r8}
   20ac0:	str	r1, [sp, #12]
   20ac4:	sub	r2, fp, #696	; 0x2b8
   20ac8:	mov	r0, r6
   20acc:	mov	r1, r7
   20ad0:	mov	r3, #0
   20ad4:	bl	23140 <__assert_fail@plt+0x10584>
   20ad8:	add	sp, sp, #16
   20adc:	mov	r3, r0
   20ae0:	movw	r1, #12518	; 0x30e6
   20ae4:	movt	r1, #4
   20ae8:	mov	r0, r9
   20aec:	mov	r2, r4
   20af0:	bl	128c8 <fprintf@plt>
   20af4:	cmp	r0, #0
   20af8:	blt	20e88 <__assert_fail@plt+0xe2cc>
   20afc:	ldr	r1, [r5]
   20b00:	cmp	r0, r1
   20b04:	strgt	r0, [r5]
   20b08:	ldr	r6, [fp, #-956]	; 0xfffffc44
   20b0c:	mov	r0, #32
   20b10:	mov	r1, r9
   20b14:	bl	12a90 <putc@plt>
   20b18:	add	r9, r0, #1
   20b1c:	cmn	r0, #1
   20b20:	movwne	r9, #1
   20b24:	movweq	sl, #850	; 0x352
   20b28:	beq	20e58 <__assert_fail@plt+0xe29c>
   20b2c:	add	r4, r6, #80	; 0x50
   20b30:	mov	r0, r4
   20b34:	bl	12820 <localtime@plt>
   20b38:	cmp	r0, #0
   20b3c:	beq	20b68 <__assert_fail@plt+0xdfac>
   20b40:	mov	r7, r0
   20b44:	ldr	r0, [fp, #8]
   20b48:	sub	r1, r0, #19968	; 0x4e00
   20b4c:	sub	r2, r1, #15532032	; 0xed0000
   20b50:	ldr	r1, [r4]
   20b54:	cmp	r2, r1
   20b58:	ble	20be0 <__assert_fail@plt+0xe024>
   20b5c:	movw	r5, #12558	; 0x310e
   20b60:	movt	r5, #4
   20b64:	b	20bfc <__assert_fail@plt+0xe040>
   20b68:	ldr	r0, [r4]
   20b6c:	sub	sp, sp, #16
   20b70:	cmn	r0, #1
   20b74:	ble	20da4 <__assert_fail@plt+0xe1e8>
   20b78:	mov	r4, #0
   20b7c:	mov	r1, #1
   20b80:	stm	sp, {r1, r4}
   20b84:	str	r1, [sp, #8]
   20b88:	str	r4, [sp, #12]
   20b8c:	asr	r1, r0, #31
   20b90:	sub	r2, fp, #696	; 0x2b8
   20b94:	mov	r3, #0
   20b98:	bl	23140 <__assert_fail@plt+0x10584>
   20b9c:	add	sp, sp, #16
   20ba0:	mov	r3, r0
   20ba4:	movw	r1, #12575	; 0x311f
   20ba8:	movt	r1, #4
   20bac:	ldr	r5, [fp, #20]
   20bb0:	mov	r0, r5
   20bb4:	mov	r2, #12
   20bb8:	bl	128c8 <fprintf@plt>
   20bbc:	cmp	r0, #0
   20bc0:	movwlt	sl, #1100	; 0x44c
   20bc4:	cmn	r0, #1
   20bc8:	movwgt	r4, #1
   20bcc:	and	r0, r9, r4
   20bd0:	cmp	r0, #1
   20bd4:	mov	r7, sl
   20bd8:	beq	20c90 <__assert_fail@plt+0xe0d4>
   20bdc:	b	20d74 <__assert_fail@plt+0xe1b8>
   20be0:	add	r0, r0, #3600	; 0xe10
   20be4:	movw	r2, #12558	; 0x310e
   20be8:	movt	r2, #4
   20bec:	movw	r5, #12546	; 0x3102
   20bf0:	movt	r5, #4
   20bf4:	cmp	r1, r0
   20bf8:	movgt	r5, r2
   20bfc:	sub	r4, fp, #952	; 0x3b8
   20c00:	mov	r8, #256	; 0x100
   20c04:	mov	r0, r4
   20c08:	mov	r1, #256	; 0x100
   20c0c:	mov	r2, r5
   20c10:	mov	r3, r7
   20c14:	bl	12808 <strftime@plt>
   20c18:	cmp	r0, #0
   20c1c:	bne	20c54 <__assert_fail@plt+0xe098>
   20c20:	mov	r6, #7
   20c24:	add	r0, r6, r8, lsl #1
   20c28:	bic	r0, r0, #7
   20c2c:	sub	r4, sp, r0
   20c30:	mov	sp, r4
   20c34:	lsl	r8, r8, #1
   20c38:	mov	r0, r4
   20c3c:	mov	r1, r8
   20c40:	mov	r2, r5
   20c44:	mov	r3, r7
   20c48:	bl	12808 <strftime@plt>
   20c4c:	cmp	r0, #0
   20c50:	beq	20c24 <__assert_fail@plt+0xe068>
   20c54:	movw	r1, #12571	; 0x311b
   20c58:	movt	r1, #4
   20c5c:	ldr	r5, [fp, #20]
   20c60:	mov	r0, r5
   20c64:	mov	r2, r4
   20c68:	bl	128c8 <fprintf@plt>
   20c6c:	cmp	r0, #0
   20c70:	movwlt	sl, #900	; 0x384
   20c74:	mov	r1, #0
   20c78:	cmn	r0, #1
   20c7c:	movwgt	r1, #1
   20c80:	tst	r9, r1
   20c84:	mov	r7, sl
   20c88:	ldr	r6, [fp, #-956]	; 0xfffffc44
   20c8c:	beq	20d74 <__assert_fail@plt+0xe1b8>
   20c90:	ldr	r8, [fp, #16]
   20c94:	ldr	r0, [fp, #-960]	; 0xfffffc40
   20c98:	mov	r1, r5
   20c9c:	mov	r2, r8
   20ca0:	bl	20eec <__assert_fail@plt+0xe330>
   20ca4:	mov	r7, #1200	; 0x4b0
   20ca8:	cmp	r0, #0
   20cac:	moveq	sl, r7
   20cb0:	beq	20d74 <__assert_fail@plt+0xe1b8>
   20cb4:	mov	r4, r0
   20cb8:	ldr	r0, [r6, #16]
   20cbc:	and	r0, r0, #61440	; 0xf000
   20cc0:	cmp	r0, #40960	; 0xa000
   20cc4:	bne	20d58 <__assert_fail@plt+0xe19c>
   20cc8:	ldr	r0, [fp, #-968]	; 0xfffffc38
   20ccc:	ldr	r1, [fp, #-964]	; 0xfffffc3c
   20cd0:	bl	21914 <__assert_fail@plt+0xed58>
   20cd4:	mov	r6, r0
   20cd8:	cmp	r0, #0
   20cdc:	beq	20d34 <__assert_fail@plt+0xe178>
   20ce0:	movw	r0, #12580	; 0x3124
   20ce4:	movt	r0, #4
   20ce8:	mov	r1, r5
   20cec:	bl	12b50 <fputs@plt>
   20cf0:	mov	r7, r0
   20cf4:	mov	r0, #0
   20cf8:	cmn	r7, #1
   20cfc:	movwgt	r0, #1
   20d00:	tst	r4, r0
   20d04:	beq	20e90 <__assert_fail@plt+0xe2d4>
   20d08:	mov	r0, r6
   20d0c:	mov	r1, r5
   20d10:	mov	r2, r8
   20d14:	bl	20eec <__assert_fail@plt+0xe330>
   20d18:	mov	r4, r0
   20d1c:	mov	r0, r6
   20d20:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   20d24:	cmp	r4, #0
   20d28:	bne	20d58 <__assert_fail@plt+0xe19c>
   20d2c:	movw	r7, #1350	; 0x546
   20d30:	b	20d74 <__assert_fail@plt+0xe1b8>
   20d34:	bl	128d4 <__errno_location@plt>
   20d38:	ldr	r1, [r0]
   20d3c:	movw	r2, #19439	; 0x4bef
   20d40:	movt	r2, #4
   20d44:	mov	r0, #0
   20d48:	ldr	r3, [fp, #-960]	; 0xfffffc40
   20d4c:	bl	12790 <error@plt>
   20d50:	mov	r0, r6
   20d54:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   20d58:	mov	r0, #10
   20d5c:	mov	r1, r5
   20d60:	bl	12a90 <putc@plt>
   20d64:	cmn	r0, #1
   20d68:	subne	sp, fp, #28
   20d6c:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20d70:	movw	r7, #1400	; 0x578
   20d74:	bl	128d4 <__errno_location@plt>
   20d78:	ldr	r4, [r0]
   20d7c:	movw	r1, #12585	; 0x3129
   20d80:	movt	r1, #4
   20d84:	mov	r0, #0
   20d88:	mov	r2, #5
   20d8c:	bl	1264c <dcgettext@plt>
   20d90:	mov	r2, r0
   20d94:	mov	r0, #1
   20d98:	mov	r1, r4
   20d9c:	mov	r3, r7
   20da0:	bl	12790 <error@plt>
   20da4:	mov	r5, #0
   20da8:	mov	r1, #1
   20dac:	stm	sp, {r1, r5}
   20db0:	str	r1, [sp, #8]
   20db4:	str	r5, [sp, #12]
   20db8:	rsbs	r3, r0, #0
   20dbc:	sbc	r1, r5, r0, asr #31
   20dc0:	sub	r2, fp, #696	; 0x2b8
   20dc4:	mov	r0, r3
   20dc8:	mov	r3, #0
   20dcc:	bl	23140 <__assert_fail@plt+0x10584>
   20dd0:	add	sp, sp, #16
   20dd4:	mov	r4, r0
   20dd8:	bl	1288c <strlen@plt>
   20ddc:	sub	sp, sp, #8
   20de0:	str	r4, [sp]
   20de4:	rsb	r0, r0, #12
   20de8:	bic	r2, r0, r0, asr #31
   20dec:	movw	r1, #12568	; 0x3118
   20df0:	movt	r1, #4
   20df4:	movw	r3, #2506	; 0x9ca
   20df8:	movt	r3, #4
   20dfc:	ldr	r4, [fp, #20]
   20e00:	mov	r0, r4
   20e04:	bl	128c8 <fprintf@plt>
   20e08:	add	sp, sp, #8
   20e0c:	cmp	r0, #0
   20e10:	movwlt	sl, #1000	; 0x3e8
   20e14:	cmn	r0, #1
   20e18:	movwgt	r5, #1
   20e1c:	tst	r9, r5
   20e20:	mov	r5, r4
   20e24:	mov	r7, sl
   20e28:	bne	20c90 <__assert_fail@plt+0xe0d4>
   20e2c:	b	20d74 <__assert_fail@plt+0xe1b8>
   20e30:	mov	r7, sl
   20e34:	b	20d74 <__assert_fail@plt+0xe1b8>
   20e38:	mov	r7, #100	; 0x64
   20e3c:	b	20d74 <__assert_fail@plt+0xe1b8>
   20e40:	mov	r7, #200	; 0xc8
   20e44:	b	20d74 <__assert_fail@plt+0xe1b8>
   20e48:	mov	r7, #250	; 0xfa
   20e4c:	b	20d74 <__assert_fail@plt+0xe1b8>
   20e50:	mov	r7, #300	; 0x12c
   20e54:	b	20d74 <__assert_fail@plt+0xe1b8>
   20e58:	movw	r7, #850	; 0x352
   20e5c:	b	20d74 <__assert_fail@plt+0xe1b8>
   20e60:	mov	r7, #600	; 0x258
   20e64:	b	20d74 <__assert_fail@plt+0xe1b8>
   20e68:	movw	r7, #625	; 0x271
   20e6c:	b	20d74 <__assert_fail@plt+0xe1b8>
   20e70:	movw	r7, #450	; 0x1c2
   20e74:	b	20d74 <__assert_fail@plt+0xe1b8>
   20e78:	movw	r7, #550	; 0x226
   20e7c:	b	20d74 <__assert_fail@plt+0xe1b8>
   20e80:	movw	r7, #525	; 0x20d
   20e84:	b	20d74 <__assert_fail@plt+0xe1b8>
   20e88:	mov	r7, #800	; 0x320
   20e8c:	b	20d74 <__assert_fail@plt+0xe1b8>
   20e90:	mov	r0, r6
   20e94:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   20e98:	cmp	r7, #0
   20e9c:	movwlt	sl, #1300	; 0x514
   20ea0:	mov	r7, sl
   20ea4:	b	20d74 <__assert_fail@plt+0xe1b8>
   20ea8:	push	{r4, sl, fp, lr}
   20eac:	add	fp, sp, #8
   20eb0:	mov	r4, r2
   20eb4:	mov	r3, r1
   20eb8:	ldr	r2, [r2]
   20ebc:	movw	r1, #12522	; 0x30ea
   20ec0:	movt	r1, #4
   20ec4:	bl	128c8 <fprintf@plt>
   20ec8:	cmp	r0, #0
   20ecc:	movlt	r0, #0
   20ed0:	poplt	{r4, sl, fp, pc}
   20ed4:	mov	r1, r0
   20ed8:	ldr	r2, [r4]
   20edc:	mov	r0, #1
   20ee0:	cmp	r2, r1
   20ee4:	strlt	r1, [r4]
   20ee8:	pop	{r4, sl, fp, pc}
   20eec:	cmp	r2, #0
   20ef0:	beq	20ef8 <__assert_fail@plt+0xe33c>
   20ef4:	b	20efc <__assert_fail@plt+0xe340>
   20ef8:	b	20f28 <__assert_fail@plt+0xe36c>
   20efc:	push	{fp, lr}
   20f00:	mov	fp, sp
   20f04:	mov	r3, r1
   20f08:	mov	r2, r0
   20f0c:	movw	r1, #19439	; 0x4bef
   20f10:	movt	r1, #4
   20f14:	mov	r0, r3
   20f18:	bl	128c8 <fprintf@plt>
   20f1c:	mvn	r0, r0
   20f20:	lsr	r0, r0, #31
   20f24:	pop	{fp, pc}
   20f28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f2c:	add	fp, sp, #28
   20f30:	sub	sp, sp, #4
   20f34:	mov	r4, r1
   20f38:	mov	r5, r0
   20f3c:	movw	r7, #12625	; 0x3151
   20f40:	movt	r7, #4
   20f44:	movw	r8, #12637	; 0x315d
   20f48:	movt	r8, #4
   20f4c:	movw	r9, #12631	; 0x3157
   20f50:	movt	r9, #4
   20f54:	movw	sl, #12640	; 0x3160
   20f58:	movt	sl, #4
   20f5c:	movw	r6, #12643	; 0x3163
   20f60:	movt	r6, #4
   20f64:	ldrb	r2, [r5], #1
   20f68:	cmp	r2, #34	; 0x22
   20f6c:	bhi	21024 <__assert_fail@plt+0xe468>
   20f70:	mov	r0, #1
   20f74:	add	r1, pc, #0
   20f78:	ldr	pc, [r1, r2, lsl #2]
   20f7c:	andeq	r1, r2, r0, lsr #2
   20f80:	andeq	r1, r2, r8, asr #32
   20f84:	andeq	r1, r2, r8, asr #32
   20f88:	andeq	r1, r2, r8, asr #32
   20f8c:	andeq	r1, r2, r8, asr #32
   20f90:	andeq	r1, r2, r8, asr #32
   20f94:	andeq	r1, r2, r8, asr #32
   20f98:	andeq	r1, r2, r8, asr #32
   20f9c:	andeq	r1, r2, r8
   20fa0:	andeq	r1, r2, r0, ror r0
   20fa4:	andeq	r1, r2, ip, lsl #1
   20fa8:	andeq	r1, r2, r8, asr #32
   20fac:	andeq	r1, r2, r4, lsr #1
   20fb0:	strheq	r1, [r2], -ip
   20fb4:	andeq	r1, r2, r8, asr #32
   20fb8:	andeq	r1, r2, r8, asr #32
   20fbc:	andeq	r1, r2, r8, asr #32
   20fc0:	andeq	r1, r2, r8, asr #32
   20fc4:	andeq	r1, r2, r8, asr #32
   20fc8:	andeq	r1, r2, r8, asr #32
   20fcc:	andeq	r1, r2, r8, asr #32
   20fd0:	andeq	r1, r2, r8, asr #32
   20fd4:	andeq	r1, r2, r8, asr #32
   20fd8:	andeq	r1, r2, r8, asr #32
   20fdc:	andeq	r1, r2, r8, asr #32
   20fe0:	andeq	r1, r2, r8, asr #32
   20fe4:	andeq	r1, r2, r8, asr #32
   20fe8:	andeq	r1, r2, r8, asr #32
   20fec:	andeq	r1, r2, r8, asr #32
   20ff0:	andeq	r1, r2, r8, asr #32
   20ff4:	andeq	r1, r2, r8, asr #32
   20ff8:	andeq	r1, r2, r8, asr #32
   20ffc:	ldrdeq	r1, [r2], -r4
   21000:	andeq	r1, r2, r8, asr #32
   21004:	andeq	r1, r2, ip, ror #1
   21008:	mov	r0, r4
   2100c:	movw	r1, #12628	; 0x3154
   21010:	movt	r1, #4
   21014:	bl	128c8 <fprintf@plt>
   21018:	cmn	r0, #1
   2101c:	bgt	20f64 <__assert_fail@plt+0xe3a8>
   21020:	b	2111c <__assert_fail@plt+0xe560>
   21024:	cmp	r2, #92	; 0x5c
   21028:	bne	21048 <__assert_fail@plt+0xe48c>
   2102c:	mov	r0, r4
   21030:	movw	r1, #12622	; 0x314e
   21034:	movt	r1, #4
   21038:	bl	128c8 <fprintf@plt>
   2103c:	cmn	r0, #1
   21040:	bgt	20f64 <__assert_fail@plt+0xe3a8>
   21044:	b	2111c <__assert_fail@plt+0xe560>
   21048:	sub	r0, r2, #33	; 0x21
   2104c:	uxtb	r0, r0
   21050:	cmp	r0, #93	; 0x5d
   21054:	bhi	21104 <__assert_fail@plt+0xe548>
   21058:	mov	r0, r2
   2105c:	mov	r1, r4
   21060:	bl	12a90 <putc@plt>
   21064:	cmn	r0, #1
   21068:	bne	20f64 <__assert_fail@plt+0xe3a8>
   2106c:	b	2111c <__assert_fail@plt+0xe560>
   21070:	mov	r0, r4
   21074:	movw	r1, #12634	; 0x315a
   21078:	movt	r1, #4
   2107c:	bl	128c8 <fprintf@plt>
   21080:	cmn	r0, #1
   21084:	bgt	20f64 <__assert_fail@plt+0xe3a8>
   21088:	b	2111c <__assert_fail@plt+0xe560>
   2108c:	mov	r0, r4
   21090:	mov	r1, r7
   21094:	bl	128c8 <fprintf@plt>
   21098:	cmn	r0, #1
   2109c:	bgt	20f64 <__assert_fail@plt+0xe3a8>
   210a0:	b	2111c <__assert_fail@plt+0xe560>
   210a4:	mov	r0, r4
   210a8:	mov	r1, r8
   210ac:	bl	128c8 <fprintf@plt>
   210b0:	cmn	r0, #1
   210b4:	bgt	20f64 <__assert_fail@plt+0xe3a8>
   210b8:	b	2111c <__assert_fail@plt+0xe560>
   210bc:	mov	r0, r4
   210c0:	mov	r1, r9
   210c4:	bl	128c8 <fprintf@plt>
   210c8:	cmn	r0, #1
   210cc:	bgt	20f64 <__assert_fail@plt+0xe3a8>
   210d0:	b	2111c <__assert_fail@plt+0xe560>
   210d4:	mov	r0, r4
   210d8:	mov	r1, sl
   210dc:	bl	128c8 <fprintf@plt>
   210e0:	cmn	r0, #1
   210e4:	bgt	20f64 <__assert_fail@plt+0xe3a8>
   210e8:	b	2111c <__assert_fail@plt+0xe560>
   210ec:	mov	r0, r4
   210f0:	mov	r1, r6
   210f4:	bl	128c8 <fprintf@plt>
   210f8:	cmn	r0, #1
   210fc:	bgt	20f64 <__assert_fail@plt+0xe3a8>
   21100:	b	2111c <__assert_fail@plt+0xe560>
   21104:	mov	r0, r4
   21108:	movw	r1, #12646	; 0x3166
   2110c:	movt	r1, #4
   21110:	bl	128c8 <fprintf@plt>
   21114:	cmn	r0, #1
   21118:	bgt	20f64 <__assert_fail@plt+0xe3a8>
   2111c:	mov	r0, #0
   21120:	sub	sp, fp, #28
   21124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21128:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2112c:	add	fp, sp, #28
   21130:	sub	sp, sp, #12
   21134:	sub	sp, sp, #8192	; 0x2000
   21138:	mov	r9, r3
   2113c:	mov	sl, r0
   21140:	ldr	r7, [fp, #8]
   21144:	cmp	r2, #0
   21148:	beq	211e8 <__assert_fail@plt+0xe62c>
   2114c:	mov	r8, r1
   21150:	str	r1, [sp]
   21154:	add	r4, sp, #8
   21158:	mov	r0, r4
   2115c:	mov	r1, #8192	; 0x2000
   21160:	mov	r2, r7
   21164:	mvn	r3, #0
   21168:	bl	28c54 <__assert_fail@plt+0x16098>
   2116c:	mov	r5, r0
   21170:	cmp	r0, #8192	; 0x2000
   21174:	mov	r6, r4
   21178:	bcc	211a4 <__assert_fail@plt+0xe5e8>
   2117c:	add	r4, r5, #1
   21180:	mov	r0, r4
   21184:	bl	2b5cc <__assert_fail@plt+0x18a10>
   21188:	mov	r6, r0
   2118c:	str	r8, [sp]
   21190:	mov	r1, r4
   21194:	add	r4, sp, #8
   21198:	mov	r2, r7
   2119c:	mvn	r3, #0
   211a0:	bl	28c54 <__assert_fail@plt+0x16098>
   211a4:	mov	r0, r6
   211a8:	mov	r1, r5
   211ac:	bl	21200 <__assert_fail@plt+0xe644>
   211b0:	mov	r1, #0
   211b4:	strb	r1, [r6, r0]
   211b8:	mov	r0, sl
   211bc:	mov	r1, r9
   211c0:	mov	r2, r6
   211c4:	bl	128c8 <fprintf@plt>
   211c8:	mov	r5, r0
   211cc:	cmp	r6, r4
   211d0:	beq	211dc <__assert_fail@plt+0xe620>
   211d4:	mov	r0, r6
   211d8:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   211dc:	mov	r0, r5
   211e0:	sub	sp, fp, #28
   211e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   211e8:	mov	r0, sl
   211ec:	mov	r1, r9
   211f0:	mov	r2, r7
   211f4:	sub	sp, fp, #28
   211f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   211fc:	b	128c8 <fprintf@plt>
   21200:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21204:	add	fp, sp, #28
   21208:	sub	sp, sp, #20
   2120c:	mov	r5, r1
   21210:	mov	sl, r0
   21214:	bl	12730 <__ctype_get_mb_cur_max@plt>
   21218:	cmp	r0, #1
   2121c:	bhi	21234 <__assert_fail@plt+0xe678>
   21220:	mov	r0, sl
   21224:	mov	r1, r5
   21228:	sub	sp, fp, #28
   2122c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21230:	b	214c0 <__assert_fail@plt+0xe904>
   21234:	cmp	r5, #1
   21238:	mov	r4, sl
   2123c:	blt	214b4 <__assert_fail@plt+0xe8f8>
   21240:	add	r6, sl, r5
   21244:	mov	r3, #0
   21248:	add	r8, sp, #4
   2124c:	add	r9, sp, #8
   21250:	mov	r4, sl
   21254:	mov	r7, sl
   21258:	ldrb	r0, [r7]
   2125c:	sub	r1, r0, #32
   21260:	cmp	r1, #94	; 0x5e
   21264:	bhi	21400 <__assert_fail@plt+0xe844>
   21268:	add	r2, pc, #0
   2126c:	ldr	pc, [r2, r1, lsl #2]
   21270:	andeq	r1, r2, ip, ror #7
   21274:	andeq	r1, r2, ip, ror #7
   21278:	andeq	r1, r2, ip, ror #7
   2127c:	andeq	r1, r2, ip, ror #7
   21280:	andeq	r1, r2, r0, lsl #8
   21284:	andeq	r1, r2, ip, ror #7
   21288:	andeq	r1, r2, ip, ror #7
   2128c:	andeq	r1, r2, ip, ror #7
   21290:	andeq	r1, r2, ip, ror #7
   21294:	andeq	r1, r2, ip, ror #7
   21298:	andeq	r1, r2, ip, ror #7
   2129c:	andeq	r1, r2, ip, ror #7
   212a0:	andeq	r1, r2, ip, ror #7
   212a4:	andeq	r1, r2, ip, ror #7
   212a8:	andeq	r1, r2, ip, ror #7
   212ac:	andeq	r1, r2, ip, ror #7
   212b0:	andeq	r1, r2, ip, ror #7
   212b4:	andeq	r1, r2, ip, ror #7
   212b8:	andeq	r1, r2, ip, ror #7
   212bc:	andeq	r1, r2, ip, ror #7
   212c0:	andeq	r1, r2, ip, ror #7
   212c4:	andeq	r1, r2, ip, ror #7
   212c8:	andeq	r1, r2, ip, ror #7
   212cc:	andeq	r1, r2, ip, ror #7
   212d0:	andeq	r1, r2, ip, ror #7
   212d4:	andeq	r1, r2, ip, ror #7
   212d8:	andeq	r1, r2, ip, ror #7
   212dc:	andeq	r1, r2, ip, ror #7
   212e0:	andeq	r1, r2, ip, ror #7
   212e4:	andeq	r1, r2, ip, ror #7
   212e8:	andeq	r1, r2, ip, ror #7
   212ec:	andeq	r1, r2, ip, ror #7
   212f0:	andeq	r1, r2, r0, lsl #8
   212f4:	andeq	r1, r2, ip, ror #7
   212f8:	andeq	r1, r2, ip, ror #7
   212fc:	andeq	r1, r2, ip, ror #7
   21300:	andeq	r1, r2, ip, ror #7
   21304:	andeq	r1, r2, ip, ror #7
   21308:	andeq	r1, r2, ip, ror #7
   2130c:	andeq	r1, r2, ip, ror #7
   21310:	andeq	r1, r2, ip, ror #7
   21314:	andeq	r1, r2, ip, ror #7
   21318:	andeq	r1, r2, ip, ror #7
   2131c:	andeq	r1, r2, ip, ror #7
   21320:	andeq	r1, r2, ip, ror #7
   21324:	andeq	r1, r2, ip, ror #7
   21328:	andeq	r1, r2, ip, ror #7
   2132c:	andeq	r1, r2, ip, ror #7
   21330:	andeq	r1, r2, ip, ror #7
   21334:	andeq	r1, r2, ip, ror #7
   21338:	andeq	r1, r2, ip, ror #7
   2133c:	andeq	r1, r2, ip, ror #7
   21340:	andeq	r1, r2, ip, ror #7
   21344:	andeq	r1, r2, ip, ror #7
   21348:	andeq	r1, r2, ip, ror #7
   2134c:	andeq	r1, r2, ip, ror #7
   21350:	andeq	r1, r2, ip, ror #7
   21354:	andeq	r1, r2, ip, ror #7
   21358:	andeq	r1, r2, ip, ror #7
   2135c:	andeq	r1, r2, ip, ror #7
   21360:	andeq	r1, r2, ip, ror #7
   21364:	andeq	r1, r2, ip, ror #7
   21368:	andeq	r1, r2, ip, ror #7
   2136c:	andeq	r1, r2, ip, ror #7
   21370:	andeq	r1, r2, r0, lsl #8
   21374:	andeq	r1, r2, ip, ror #7
   21378:	andeq	r1, r2, ip, ror #7
   2137c:	andeq	r1, r2, ip, ror #7
   21380:	andeq	r1, r2, ip, ror #7
   21384:	andeq	r1, r2, ip, ror #7
   21388:	andeq	r1, r2, ip, ror #7
   2138c:	andeq	r1, r2, ip, ror #7
   21390:	andeq	r1, r2, ip, ror #7
   21394:	andeq	r1, r2, ip, ror #7
   21398:	andeq	r1, r2, ip, ror #7
   2139c:	andeq	r1, r2, ip, ror #7
   213a0:	andeq	r1, r2, ip, ror #7
   213a4:	andeq	r1, r2, ip, ror #7
   213a8:	andeq	r1, r2, ip, ror #7
   213ac:	andeq	r1, r2, ip, ror #7
   213b0:	andeq	r1, r2, ip, ror #7
   213b4:	andeq	r1, r2, ip, ror #7
   213b8:	andeq	r1, r2, ip, ror #7
   213bc:	andeq	r1, r2, ip, ror #7
   213c0:	andeq	r1, r2, ip, ror #7
   213c4:	andeq	r1, r2, ip, ror #7
   213c8:	andeq	r1, r2, ip, ror #7
   213cc:	andeq	r1, r2, ip, ror #7
   213d0:	andeq	r1, r2, ip, ror #7
   213d4:	andeq	r1, r2, ip, ror #7
   213d8:	andeq	r1, r2, ip, ror #7
   213dc:	andeq	r1, r2, ip, ror #7
   213e0:	andeq	r1, r2, ip, ror #7
   213e4:	andeq	r1, r2, ip, ror #7
   213e8:	andeq	r1, r2, ip, ror #7
   213ec:	strb	r0, [r4], #1
   213f0:	add	r7, r7, #1
   213f4:	cmp	r7, r6
   213f8:	bcc	21258 <__assert_fail@plt+0xe69c>
   213fc:	b	214b4 <__assert_fail@plt+0xe8f8>
   21400:	str	r3, [sp, #12]
   21404:	str	r3, [sp, #8]
   21408:	sub	r2, r6, r7
   2140c:	mov	r0, r8
   21410:	mov	r1, r7
   21414:	mov	r3, r9
   21418:	bl	2ed34 <__assert_fail@plt+0x1c178>
   2141c:	cmp	r0, #0
   21420:	beq	2143c <__assert_fail@plt+0xe880>
   21424:	mov	r5, r0
   21428:	cmn	r0, #2
   2142c:	beq	21494 <__assert_fail@plt+0xe8d8>
   21430:	cmn	r5, #1
   21434:	bne	21440 <__assert_fail@plt+0xe884>
   21438:	b	2149c <__assert_fail@plt+0xe8e0>
   2143c:	mov	r5, #1
   21440:	ldr	r0, [sp, #4]
   21444:	bl	12544 <wcwidth@plt>
   21448:	cmp	r0, #0
   2144c:	blt	21474 <__assert_fail@plt+0xe8b8>
   21450:	mov	r0, r5
   21454:	mov	r1, r4
   21458:	mov	r2, r7
   2145c:	ldrb	r3, [r2], #1
   21460:	strb	r3, [r1], #1
   21464:	subs	r0, r0, #1
   21468:	bne	2145c <__assert_fail@plt+0xe8a0>
   2146c:	add	r4, r4, r5
   21470:	b	2147c <__assert_fail@plt+0xe8c0>
   21474:	mov	r0, #63	; 0x3f
   21478:	strb	r0, [r4], #1
   2147c:	add	r7, r7, r5
   21480:	mov	r0, r9
   21484:	bl	12604 <mbsinit@plt>
   21488:	cmp	r0, #0
   2148c:	beq	21408 <__assert_fail@plt+0xe84c>
   21490:	b	214a8 <__assert_fail@plt+0xe8ec>
   21494:	mov	r7, r6
   21498:	b	214a0 <__assert_fail@plt+0xe8e4>
   2149c:	add	r7, r7, #1
   214a0:	mov	r0, #63	; 0x3f
   214a4:	strb	r0, [r4], #1
   214a8:	mov	r3, #0
   214ac:	cmp	r7, r6
   214b0:	bcc	21258 <__assert_fail@plt+0xe69c>
   214b4:	sub	r0, r4, sl
   214b8:	sub	sp, fp, #28
   214bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   214c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   214c4:	add	fp, sp, #24
   214c8:	mov	r8, r1
   214cc:	cmp	r1, #1
   214d0:	blt	21510 <__assert_fail@plt+0xe954>
   214d4:	mov	r5, r0
   214d8:	add	r7, r0, r8
   214dc:	bl	12844 <__ctype_b_loc@plt>
   214e0:	mov	r6, r0
   214e4:	mov	r9, #63	; 0x3f
   214e8:	ldr	r4, [r6]
   214ec:	ldrb	r0, [r5]
   214f0:	bl	21518 <__assert_fail@plt+0xe95c>
   214f4:	add	r0, r4, r0, lsl #1
   214f8:	ldrb	r0, [r0, #1]
   214fc:	tst	r0, #64	; 0x40
   21500:	strbeq	r9, [r5]
   21504:	add	r5, r5, #1
   21508:	cmp	r5, r7
   2150c:	bcc	214e8 <__assert_fail@plt+0xe92c>
   21510:	mov	r0, r8
   21514:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21518:	bx	lr
   2151c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21520:	add	fp, sp, #28
   21524:	sub	sp, sp, #12
   21528:	mov	r8, r0
   2152c:	movw	sl, #12652	; 0x316c
   21530:	movt	sl, #4
   21534:	add	r4, sl, #8
   21538:	mov	r6, #0
   2153c:	mov	r7, #0
   21540:	ldr	r5, [r4, #-8]
   21544:	mov	r0, r5
   21548:	mov	r1, r8
   2154c:	bl	124cc <strcmp@plt>
   21550:	cmp	r0, #0
   21554:	beq	21618 <__assert_fail@plt+0xea5c>
   21558:	mov	r0, r5
   2155c:	bl	2a2c8 <__assert_fail@plt+0x1770c>
   21560:	bl	1288c <strlen@plt>
   21564:	add	r0, r7, r0
   21568:	add	r7, r0, #2
   2156c:	add	r4, r4, #12
   21570:	add	r6, r6, #1
   21574:	cmp	r6, #13
   21578:	bcc	21540 <__assert_fail@plt+0xe984>
   2157c:	str	r8, [sp, #8]
   21580:	add	r0, r7, #1
   21584:	bl	2b5cc <__assert_fail@plt+0x18a10>
   21588:	mov	r6, r0
   2158c:	mov	r4, #0
   21590:	movw	r8, #8236	; 0x202c
   21594:	mov	r9, #0
   21598:	str	r0, [sp, #4]
   2159c:	cmp	r9, #0
   215a0:	strhne	r8, [r6]
   215a4:	strbne	r4, [r6, #2]!
   215a8:	ldr	r0, [sl, -r9]
   215ac:	bl	2a2c8 <__assert_fail@plt+0x1770c>
   215b0:	mov	r7, r0
   215b4:	bl	1288c <strlen@plt>
   215b8:	mov	r5, r0
   215bc:	add	r2, r0, #1
   215c0:	mov	r0, r6
   215c4:	mov	r1, r7
   215c8:	bl	125c8 <memcpy@plt>
   215cc:	add	r6, r6, r5
   215d0:	sub	r9, r9, #12
   215d4:	cmn	r9, #156	; 0x9c
   215d8:	bne	2159c <__assert_fail@plt+0xe9e0>
   215dc:	movw	r1, #12808	; 0x3208
   215e0:	movt	r1, #4
   215e4:	mov	r0, #0
   215e8:	mov	r2, #5
   215ec:	bl	1264c <dcgettext@plt>
   215f0:	mov	r5, r0
   215f4:	ldr	r0, [sp, #8]
   215f8:	bl	2a2c8 <__assert_fail@plt+0x1770c>
   215fc:	mov	r3, r0
   21600:	ldr	r0, [sp, #4]
   21604:	str	r0, [sp]
   21608:	mov	r0, #1
   2160c:	mov	r1, #0
   21610:	mov	r2, r5
   21614:	bl	12790 <error@plt>
   21618:	ldr	r0, [r4]
   2161c:	sub	sp, fp, #28
   21620:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21624:	mov	r1, r0
   21628:	mov	r0, #0
   2162c:	cmp	r1, #12
   21630:	addls	r0, r1, r1, lsl #1
   21634:	movwls	r1, #12652	; 0x316c
   21638:	movtls	r1, #4
   2163c:	ldrls	r0, [r1, r0, lsl #2]
   21640:	bx	lr
   21644:	mov	r1, r0
   21648:	mvn	r0, #0
   2164c:	cmp	r1, #12
   21650:	bxhi	lr
   21654:	add	r0, r1, r1, lsl #1
   21658:	movw	r1, #12652	; 0x316c
   2165c:	movt	r1, #4
   21660:	add	r0, r1, r0, lsl #2
   21664:	ldr	r0, [r0, #8]
   21668:	bx	lr
   2166c:	mov	r1, r0
   21670:	mov	r0, #0
   21674:	cmp	r1, #12
   21678:	bxhi	lr
   2167c:	add	r0, r1, r1, lsl #1
   21680:	movw	r1, #12652	; 0x316c
   21684:	movt	r1, #4
   21688:	add	r0, r1, r0, lsl #2
   2168c:	ldr	r0, [r0, #4]
   21690:	bx	lr
   21694:	push	{r4, sl, fp, lr}
   21698:	add	fp, sp, #8
   2169c:	mov	lr, r0
   216a0:	mvn	r0, #0
   216a4:	cmp	lr, #12
   216a8:	bhi	216fc <__assert_fail@plt+0xeb40>
   216ac:	cmp	lr, #0
   216b0:	popeq	{r4, sl, fp, pc}
   216b4:	add	r2, lr, lr, lsl #1
   216b8:	movw	r3, #12652	; 0x316c
   216bc:	movt	r3, #4
   216c0:	add	r2, r3, r2, lsl #2
   216c4:	ldr	ip, [r2, #8]
   216c8:	add	r2, r3, #4
   216cc:	mov	r3, #0
   216d0:	ldr	r4, [r2]
   216d4:	tst	r4, r1
   216d8:	beq	216ec <__assert_fail@plt+0xeb30>
   216dc:	ldr	r4, [r2, #4]
   216e0:	cmp	ip, r4
   216e4:	moveq	r0, r3
   216e8:	popeq	{r4, sl, fp, pc}
   216ec:	add	r2, r2, #12
   216f0:	add	r3, r3, #1
   216f4:	cmp	r3, lr
   216f8:	bcc	216d0 <__assert_fail@plt+0xeb14>
   216fc:	pop	{r4, sl, fp, pc}
   21700:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21704:	add	fp, sp, #24
   21708:	sub	sp, sp, #8
   2170c:	mov	r5, r1
   21710:	mov	r4, r0
   21714:	bl	128d4 <__errno_location@plt>
   21718:	mov	r6, r0
   2171c:	mov	r0, #0
   21720:	str	r0, [r6]
   21724:	add	r1, sp, #4
   21728:	mov	r0, r4
   2172c:	mov	r2, #10
   21730:	bl	124d8 <strtol@plt>
   21734:	add	r1, r0, #-2147483647	; 0x80000001
   21738:	cmp	r1, #1
   2173c:	bls	2179c <__assert_fail@plt+0xebe0>
   21740:	ldr	r7, [sp, #4]
   21744:	ldrb	r1, [r7]
   21748:	cmp	r1, #0
   2174c:	bne	217b4 <__assert_fail@plt+0xebf8>
   21750:	cmp	r7, r4
   21754:	subne	sp, fp, #24
   21758:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   2175c:	ldr	r6, [r6]
   21760:	movw	r1, #12992	; 0x32c0
   21764:	movt	r1, #4
   21768:	mov	r0, #0
   2176c:	mov	r2, #5
   21770:	bl	1264c <dcgettext@plt>
   21774:	mov	r7, r0
   21778:	mov	r0, #0
   2177c:	mov	r1, r5
   21780:	mov	r2, r4
   21784:	bl	2a024 <__assert_fail@plt+0x17468>
   21788:	mov	r3, r0
   2178c:	mov	r0, #1
   21790:	mov	r1, r6
   21794:	mov	r2, r7
   21798:	bl	12790 <error@plt>
   2179c:	ldr	r1, [r6]
   217a0:	movw	r2, #19439	; 0x4bef
   217a4:	movt	r2, #4
   217a8:	mov	r0, #1
   217ac:	mov	r3, r4
   217b0:	bl	12790 <error@plt>
   217b4:	ldr	r8, [r6]
   217b8:	movw	r1, #12965	; 0x32a5
   217bc:	movt	r1, #4
   217c0:	mov	r0, #0
   217c4:	mov	r2, #5
   217c8:	bl	1264c <dcgettext@plt>
   217cc:	mov	r6, r0
   217d0:	mov	r0, #0
   217d4:	mov	r1, r5
   217d8:	mov	r2, r7
   217dc:	bl	2a024 <__assert_fail@plt+0x17468>
   217e0:	mov	r7, r0
   217e4:	mov	r0, #1
   217e8:	mov	r1, r5
   217ec:	mov	r2, r4
   217f0:	bl	2a024 <__assert_fail@plt+0x17468>
   217f4:	str	r0, [sp]
   217f8:	mov	r0, #1
   217fc:	mov	r1, r8
   21800:	mov	r2, r6
   21804:	mov	r3, r7
   21808:	bl	12790 <error@plt>
   2180c:	push	{r4, r5, fp, lr}
   21810:	add	fp, sp, #8
   21814:	ldr	r5, [fp, #8]
   21818:	cmp	r2, #0
   2181c:	beq	21830 <__assert_fail@plt+0xec74>
   21820:	mov	r2, #0
   21824:	str	r2, [r3]
   21828:	str	r2, [r5]
   2182c:	b	21858 <__assert_fail@plt+0xec9c>
   21830:	ldr	r2, [r5]
   21834:	ldr	r4, [r3]
   21838:	add	r2, r4, r2
   2183c:	str	r2, [r3]
   21840:	ldrb	r4, [r0, r2]
   21844:	cmp	r4, #0
   21848:	moveq	r0, #0
   2184c:	popeq	{r4, r5, fp, pc}
   21850:	add	r2, r2, #1
   21854:	str	r2, [r3]
   21858:	ldr	r2, [r3]
   2185c:	add	r0, r0, r2
   21860:	bl	21870 <__assert_fail@plt+0xecb4>
   21864:	str	r0, [r5]
   21868:	mov	r0, #1
   2186c:	pop	{r4, r5, fp, pc}
   21870:	push	{r4, sl, fp, lr}
   21874:	add	fp, sp, #8
   21878:	mov	r4, r0
   2187c:	ldrb	r0, [r1]
   21880:	cmp	r0, #0
   21884:	beq	2189c <__assert_fail@plt+0xece0>
   21888:	mov	r0, r4
   2188c:	bl	12ad8 <strpbrk@plt>
   21890:	cmp	r0, #0
   21894:	subne	r0, r0, r4
   21898:	popne	{r4, sl, fp, pc}
   2189c:	mov	r0, r4
   218a0:	pop	{r4, sl, fp, lr}
   218a4:	b	1288c <strlen@plt>
   218a8:	push	{r4, r5, fp, lr}
   218ac:	add	fp, sp, #8
   218b0:	sub	sp, sp, #16
   218b4:	mov	r4, r1
   218b8:	mov	r5, r0
   218bc:	movw	r1, #13016	; 0x32d8
   218c0:	movt	r1, #4
   218c4:	mov	r0, #0
   218c8:	mov	r2, #5
   218cc:	bl	1264c <dcgettext@plt>
   218d0:	mov	r1, r0
   218d4:	movw	r0, #13308	; 0x33fc
   218d8:	movt	r0, #4
   218dc:	movw	r2, #13261	; 0x33cd
   218e0:	movt	r2, #4
   218e4:	movw	r3, #12461	; 0x30ad
   218e8:	movt	r3, #4
   218ec:	str	r3, [sp]
   218f0:	str	r2, [sp, #4]
   218f4:	str	r0, [sp, #8]
   218f8:	movw	r2, #13222	; 0x33a6
   218fc:	movt	r2, #4
   21900:	mov	r0, r5
   21904:	mov	r3, r4
   21908:	bl	128c8 <fprintf@plt>
   2190c:	sub	sp, fp, #8
   21910:	pop	{r4, r5, fp, pc}
   21914:	push	{fp, lr}
   21918:	mov	fp, sp
   2191c:	sub	sp, sp, #8
   21920:	movw	r2, #10236	; 0x27fc
   21924:	movt	r2, #1
   21928:	mov	r3, #0
   2192c:	str	r3, [sp]
   21930:	str	r2, [sp, #4]
   21934:	mov	r2, #0
   21938:	mov	r3, #0
   2193c:	bl	21ab8 <__assert_fail@plt+0xeefc>
   21940:	mov	sp, fp
   21944:	pop	{fp, pc}
   21948:	push	{r4, sl, fp, lr}
   2194c:	add	fp, sp, #8
   21950:	mov	r4, r0
   21954:	mov	r0, #24
   21958:	bl	2ed04 <__assert_fail@plt+0x1c148>
   2195c:	cmp	r0, #0
   21960:	movne	r1, #0
   21964:	strne	r1, [r0]
   21968:	strne	r4, [r0, #16]
   2196c:	strne	r4, [r0, #20]
   21970:	popne	{r4, sl, fp, pc}
   21974:	mov	r0, #0
   21978:	pop	{r4, sl, fp, pc}
   2197c:	push	{r4, sl, fp, lr}
   21980:	add	fp, sp, #8
   21984:	mov	r4, r0
   21988:	mov	r0, #24
   2198c:	bl	2ed04 <__assert_fail@plt+0x1c148>
   21990:	cmp	r0, #0
   21994:	moveq	r0, #0
   21998:	popeq	{r4, sl, fp, pc}
   2199c:	vmov.i32	q8, #0	; 0x00000000
   219a0:	mov	r1, r0
   219a4:	str	r4, [r1], #4
   219a8:	vst1.32	{d16-d17}, [r1]
   219ac:	pop	{r4, sl, fp, pc}
   219b0:	push	{r4, r5, r6, sl, fp, lr}
   219b4:	add	fp, sp, #16
   219b8:	mov	r4, r1
   219bc:	mov	r5, r0
   219c0:	ldr	r3, [r0]
   219c4:	cmp	r3, #0
   219c8:	beq	21a04 <__assert_fail@plt+0xee48>
   219cc:	add	r0, r5, #8
   219d0:	add	r1, r5, #12
   219d4:	mov	r6, #0
   219d8:	mov	r2, #0
   219dc:	bl	12b14 <getdelim@plt>
   219e0:	cmn	r0, #1
   219e4:	ble	21a34 <__assert_fail@plt+0xee78>
   219e8:	mov	r0, #1
   219ec:	str	r0, [r4]
   219f0:	ldmib	r5, {r0, r6}
   219f4:	add	r0, r0, #1
   219f8:	str	r0, [r5, #4]
   219fc:	mov	r0, r6
   21a00:	pop	{r4, r5, r6, sl, fp, pc}
   21a04:	ldr	r0, [r5, #20]
   21a08:	ldr	r0, [r0]
   21a0c:	cmp	r0, #0
   21a10:	beq	21a54 <__assert_fail@plt+0xee98>
   21a14:	mov	r0, #1
   21a18:	str	r0, [r4]
   21a1c:	ldr	r0, [r5, #20]
   21a20:	add	r1, r0, #4
   21a24:	str	r1, [r5, #20]
   21a28:	ldr	r6, [r0]
   21a2c:	mov	r0, r6
   21a30:	pop	{r4, r5, r6, sl, fp, pc}
   21a34:	ldr	r0, [r5]
   21a38:	bl	12868 <feof@plt>
   21a3c:	mov	r1, #2
   21a40:	cmp	r0, #0
   21a44:	movweq	r1, #4
   21a48:	str	r1, [r4]
   21a4c:	mov	r0, r6
   21a50:	pop	{r4, r5, r6, sl, fp, pc}
   21a54:	mov	r0, #2
   21a58:	str	r0, [r4]
   21a5c:	mov	r6, #0
   21a60:	mov	r0, r6
   21a64:	pop	{r4, r5, r6, sl, fp, pc}
   21a68:	ldr	r1, [r0]
   21a6c:	cmp	r1, #0
   21a70:	ldrne	r0, [r0, #4]
   21a74:	bxne	lr
   21a78:	ldr	r1, [r0, #16]
   21a7c:	ldr	r0, [r0, #20]
   21a80:	sub	r0, r0, r1
   21a84:	asr	r0, r0, #2
   21a88:	bx	lr
   21a8c:	push	{r4, sl, fp, lr}
   21a90:	add	fp, sp, #8
   21a94:	mov	r4, r0
   21a98:	ldr	r0, [r0]
   21a9c:	cmp	r0, #0
   21aa0:	beq	21aac <__assert_fail@plt+0xeef0>
   21aa4:	ldr	r0, [r4, #8]
   21aa8:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   21aac:	mov	r0, r4
   21ab0:	pop	{r4, sl, fp, lr}
   21ab4:	b	2ca78 <__assert_fail@plt+0x19ebc>
   21ab8:	push	{r4, r5, fp, lr}
   21abc:	add	fp, sp, #8
   21ac0:	sub	sp, sp, #1040	; 0x410
   21ac4:	add	ip, sp, #16
   21ac8:	str	ip, [sp, #8]
   21acc:	ldr	ip, [fp, #12]
   21ad0:	str	ip, [sp, #4]
   21ad4:	ldr	ip, [fp, #8]
   21ad8:	str	ip, [sp]
   21adc:	bl	21ae8 <__assert_fail@plt+0xef2c>
   21ae0:	sub	sp, fp, #8
   21ae4:	pop	{r4, r5, fp, pc}
   21ae8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21aec:	add	fp, sp, #28
   21af0:	sub	sp, sp, #4
   21af4:	mov	r4, r3
   21af8:	mov	r6, r2
   21afc:	mov	r9, r0
   21b00:	cmp	r2, #0
   21b04:	movweq	r4, #1024	; 0x400
   21b08:	cmn	r4, #-2147483647	; 0x80000001
   21b0c:	mvncs	r4, #-2147483648	; 0x80000000
   21b10:	ldr	r0, [fp, #16]
   21b14:	cmp	r2, #0
   21b18:	moveq	r6, r0
   21b1c:	ldr	r0, [fp, #8]
   21b20:	movw	r7, #19336	; 0x4b88
   21b24:	movt	r7, #4
   21b28:	cmp	r0, #0
   21b2c:	movne	r7, r0
   21b30:	cmp	r6, #0
   21b34:	beq	21ba4 <__assert_fail@plt+0xefe8>
   21b38:	mov	r8, r1
   21b3c:	ldr	sl, [fp, #12]
   21b40:	mov	r5, r6
   21b44:	mov	r0, r9
   21b48:	mov	r1, r8
   21b4c:	mov	r2, r5
   21b50:	mov	r3, r4
   21b54:	blx	sl
   21b58:	cmn	r0, #1
   21b5c:	ble	21bc4 <__assert_fail@plt+0xf008>
   21b60:	cmp	r0, r4
   21b64:	blt	21bf0 <__assert_fail@plt+0xf034>
   21b68:	cmp	r5, r6
   21b6c:	beq	21b7c <__assert_fail@plt+0xefc0>
   21b70:	ldr	r1, [r7, #8]
   21b74:	mov	r0, r5
   21b78:	blx	r1
   21b7c:	cmn	r4, #-1073741823	; 0xc0000001
   21b80:	bge	21c40 <__assert_fail@plt+0xf084>
   21b84:	mov	r0, #1
   21b88:	orr	r4, r0, r4, lsl #1
   21b8c:	ldr	r1, [r7]
   21b90:	mov	r0, r4
   21b94:	blx	r1
   21b98:	mov	r5, r0
   21b9c:	cmp	r0, #0
   21ba0:	bne	21b44 <__assert_fail@plt+0xef88>
   21ba4:	ldr	r1, [r7, #12]
   21ba8:	cmp	r1, #0
   21bac:	beq	21bb8 <__assert_fail@plt+0xeffc>
   21bb0:	mov	r0, r4
   21bb4:	blx	r1
   21bb8:	bl	128d4 <__errno_location@plt>
   21bbc:	mov	r1, #12
   21bc0:	b	21c48 <__assert_fail@plt+0xf08c>
   21bc4:	mov	r4, #0
   21bc8:	cmp	r5, r6
   21bcc:	beq	21c50 <__assert_fail@plt+0xf094>
   21bd0:	bl	128d4 <__errno_location@plt>
   21bd4:	mov	r6, r0
   21bd8:	ldr	r8, [r0]
   21bdc:	ldr	r1, [r7, #8]
   21be0:	mov	r0, r5
   21be4:	blx	r1
   21be8:	str	r8, [r6]
   21bec:	b	21c50 <__assert_fail@plt+0xf094>
   21bf0:	mov	r1, #0
   21bf4:	strb	r1, [r5, r0]
   21bf8:	add	r8, r0, #1
   21bfc:	ldr	r0, [fp, #16]
   21c00:	cmp	r5, r0
   21c04:	beq	21c64 <__assert_fail@plt+0xf0a8>
   21c08:	cmp	r5, r6
   21c0c:	beq	21c5c <__assert_fail@plt+0xf0a0>
   21c10:	cmp	r8, r4
   21c14:	bge	21c5c <__assert_fail@plt+0xf0a0>
   21c18:	ldr	r2, [r7, #4]
   21c1c:	cmp	r2, #0
   21c20:	beq	21c5c <__assert_fail@plt+0xf0a0>
   21c24:	mov	r0, r5
   21c28:	mov	r1, r8
   21c2c:	blx	r2
   21c30:	cmp	r0, #0
   21c34:	moveq	r0, r5
   21c38:	sub	sp, fp, #28
   21c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c40:	bl	128d4 <__errno_location@plt>
   21c44:	mov	r1, #36	; 0x24
   21c48:	str	r1, [r0]
   21c4c:	mov	r4, #0
   21c50:	mov	r0, r4
   21c54:	sub	sp, fp, #28
   21c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c5c:	mov	r4, r5
   21c60:	b	21c50 <__assert_fail@plt+0xf094>
   21c64:	ldr	r1, [r7]
   21c68:	mov	r0, r8
   21c6c:	blx	r1
   21c70:	cmp	r0, #0
   21c74:	beq	21c8c <__assert_fail@plt+0xf0d0>
   21c78:	mov	r4, r0
   21c7c:	mov	r1, r5
   21c80:	mov	r2, r8
   21c84:	bl	125c8 <memcpy@plt>
   21c88:	b	21c50 <__assert_fail@plt+0xf094>
   21c8c:	mov	r4, r8
   21c90:	b	21ba4 <__assert_fail@plt+0xefe8>
   21c94:	push	{r4, r5, r6, sl, fp, lr}
   21c98:	add	fp, sp, #16
   21c9c:	mov	r6, r1
   21ca0:	mov	r4, r0
   21ca4:	mov	r5, #0
   21ca8:	mov	r1, #1
   21cac:	mov	r2, #0
   21cb0:	bl	2c82c <__assert_fail@plt+0x19c70>
   21cb4:	cmp	r0, #0
   21cb8:	blt	21ce8 <__assert_fail@plt+0xf12c>
   21cbc:	bic	r2, r0, #1
   21cc0:	cmp	r6, #0
   21cc4:	orrne	r2, r0, #1
   21cc8:	cmp	r0, r2
   21ccc:	beq	21cec <__assert_fail@plt+0xf130>
   21cd0:	mov	r0, r4
   21cd4:	mov	r1, #2
   21cd8:	bl	2c82c <__assert_fail@plt+0x19c70>
   21cdc:	cmn	r0, #1
   21ce0:	movwne	r0, #0
   21ce4:	pop	{r4, r5, r6, sl, fp, pc}
   21ce8:	mvn	r5, #0
   21cec:	mov	r0, r5
   21cf0:	pop	{r4, r5, r6, sl, fp, pc}
   21cf4:	movw	r1, #1030	; 0x406
   21cf8:	mov	r2, #0
   21cfc:	b	2c82c <__assert_fail@plt+0x19c70>
   21d00:	movw	r1, #23812	; 0x5d04
   21d04:	movt	r1, #5
   21d08:	str	r0, [r1]
   21d0c:	bx	lr
   21d10:	movw	r1, #23816	; 0x5d08
   21d14:	movt	r1, #5
   21d18:	strb	r0, [r1]
   21d1c:	bx	lr
   21d20:	push	{r4, r5, r6, sl, fp, lr}
   21d24:	add	fp, sp, #16
   21d28:	sub	sp, sp, #8
   21d2c:	movw	r0, #21868	; 0x556c
   21d30:	movt	r0, #5
   21d34:	ldr	r0, [r0]
   21d38:	bl	3daf0 <__assert_fail@plt+0x2af34>
   21d3c:	cmp	r0, #0
   21d40:	beq	21d68 <__assert_fail@plt+0xf1ac>
   21d44:	movw	r0, #23816	; 0x5d08
   21d48:	movt	r0, #5
   21d4c:	ldrb	r0, [r0]
   21d50:	cmp	r0, #0
   21d54:	beq	21d88 <__assert_fail@plt+0xf1cc>
   21d58:	bl	128d4 <__errno_location@plt>
   21d5c:	ldr	r0, [r0]
   21d60:	cmp	r0, #32
   21d64:	bne	21d88 <__assert_fail@plt+0xf1cc>
   21d68:	movw	r0, #21856	; 0x5560
   21d6c:	movt	r0, #5
   21d70:	ldr	r0, [r0]
   21d74:	bl	3daf0 <__assert_fail@plt+0x2af34>
   21d78:	cmp	r0, #0
   21d7c:	subeq	sp, fp, #16
   21d80:	popeq	{r4, r5, r6, sl, fp, pc}
   21d84:	b	21df8 <__assert_fail@plt+0xf23c>
   21d88:	movw	r1, #13330	; 0x3412
   21d8c:	movt	r1, #4
   21d90:	mov	r0, #0
   21d94:	mov	r2, #5
   21d98:	bl	1264c <dcgettext@plt>
   21d9c:	mov	r4, r0
   21da0:	movw	r0, #23812	; 0x5d04
   21da4:	movt	r0, #5
   21da8:	ldr	r6, [r0]
   21dac:	bl	128d4 <__errno_location@plt>
   21db0:	ldr	r5, [r0]
   21db4:	cmp	r6, #0
   21db8:	bne	21dd4 <__assert_fail@plt+0xf218>
   21dbc:	movw	r2, #19439	; 0x4bef
   21dc0:	movt	r2, #4
   21dc4:	mov	r0, #0
   21dc8:	mov	r1, r5
   21dcc:	mov	r3, r4
   21dd0:	b	21df4 <__assert_fail@plt+0xf238>
   21dd4:	mov	r0, r6
   21dd8:	bl	2a178 <__assert_fail@plt+0x175bc>
   21ddc:	mov	r3, r0
   21de0:	str	r4, [sp]
   21de4:	movw	r2, #13342	; 0x341e
   21de8:	movt	r2, #4
   21dec:	mov	r0, #0
   21df0:	mov	r1, r5
   21df4:	bl	12790 <error@plt>
   21df8:	movw	r0, #21760	; 0x5500
   21dfc:	movt	r0, #5
   21e00:	ldr	r0, [r0]
   21e04:	bl	125bc <_exit@plt>
   21e08:	push	{r4, r5, r6, r7, fp, lr}
   21e0c:	add	fp, sp, #16
   21e10:	bl	127a8 <opendir@plt>
   21e14:	cmp	r0, #0
   21e18:	moveq	r5, #0
   21e1c:	moveq	r0, r5
   21e20:	popeq	{r4, r5, r6, r7, fp, pc}
   21e24:	mov	r4, r0
   21e28:	bl	12a9c <dirfd@plt>
   21e2c:	cmp	r0, #2
   21e30:	movhi	r0, r4
   21e34:	pophi	{r4, r5, r6, r7, fp, pc}
   21e38:	movw	r1, #1030	; 0x406
   21e3c:	mov	r2, #3
   21e40:	bl	2c82c <__assert_fail@plt+0x19c70>
   21e44:	cmn	r0, #1
   21e48:	ble	21e74 <__assert_fail@plt+0xf2b8>
   21e4c:	mov	r6, r0
   21e50:	bl	12a78 <fdopendir@plt>
   21e54:	mov	r5, r0
   21e58:	bl	128d4 <__errno_location@plt>
   21e5c:	ldr	r7, [r0]
   21e60:	cmp	r5, #0
   21e64:	bne	21e80 <__assert_fail@plt+0xf2c4>
   21e68:	mov	r0, r6
   21e6c:	bl	12b74 <close@plt>
   21e70:	b	21e7c <__assert_fail@plt+0xf2c0>
   21e74:	bl	128d4 <__errno_location@plt>
   21e78:	ldr	r7, [r0]
   21e7c:	mov	r5, #0
   21e80:	mov	r0, r4
   21e84:	bl	12b8c <closedir@plt>
   21e88:	bl	128d4 <__errno_location@plt>
   21e8c:	str	r7, [r0]
   21e90:	mov	r0, r5
   21e94:	pop	{r4, r5, r6, r7, fp, pc}
   21e98:	push	{r4, r5, r6, sl, fp, lr}
   21e9c:	add	fp, sp, #16
   21ea0:	mov	r6, r0
   21ea4:	bl	3d5f4 <__assert_fail@plt+0x2aa38>
   21ea8:	mov	r4, r0
   21eac:	ldrb	r0, [r0]
   21eb0:	cmp	r0, #0
   21eb4:	beq	21ed4 <__assert_fail@plt+0xf318>
   21eb8:	mov	r0, r4
   21ebc:	bl	3d640 <__assert_fail@plt+0x2aa84>
   21ec0:	mov	r5, r0
   21ec4:	ldrb	r0, [r4, r0]
   21ec8:	cmp	r0, #47	; 0x2f
   21ecc:	addeq	r5, r5, #1
   21ed0:	b	21ee4 <__assert_fail@plt+0xf328>
   21ed4:	mov	r0, r6
   21ed8:	bl	3d640 <__assert_fail@plt+0x2aa84>
   21edc:	mov	r5, r0
   21ee0:	mov	r4, r6
   21ee4:	add	r0, r5, #1
   21ee8:	bl	2b5f4 <__assert_fail@plt+0x18a38>
   21eec:	mov	r6, r0
   21ef0:	mov	r1, r4
   21ef4:	mov	r2, r5
   21ef8:	bl	125c8 <memcpy@plt>
   21efc:	mov	r0, #0
   21f00:	strb	r0, [r6, r5]
   21f04:	mov	r0, r6
   21f08:	pop	{r4, r5, r6, sl, fp, pc}
   21f0c:	push	{r4, r5, r6, sl, fp, lr}
   21f10:	add	fp, sp, #16
   21f14:	mov	r4, r0
   21f18:	mov	r5, r0
   21f1c:	ldrb	r6, [r5], #-1
   21f20:	bl	3d5f4 <__assert_fail@plt+0x2aa38>
   21f24:	sub	r2, r0, r4
   21f28:	sub	r0, r6, #47	; 0x2f
   21f2c:	clz	r0, r0
   21f30:	lsr	r1, r0, #5
   21f34:	mov	r0, r2
   21f38:	cmp	r2, r1
   21f3c:	popls	{r4, r5, r6, sl, fp, pc}
   21f40:	ldrb	r3, [r5, r0]
   21f44:	sub	r2, r0, #1
   21f48:	cmp	r3, #47	; 0x2f
   21f4c:	beq	21f34 <__assert_fail@plt+0xf378>
   21f50:	pop	{r4, r5, r6, sl, fp, pc}
   21f54:	push	{r4, r5, r6, sl, fp, lr}
   21f58:	add	fp, sp, #16
   21f5c:	mov	r6, r0
   21f60:	bl	21f0c <__assert_fail@plt+0xf350>
   21f64:	mov	r4, r0
   21f68:	cmp	r0, #0
   21f6c:	addeq	r0, r0, #1
   21f70:	add	r0, r0, #1
   21f74:	bl	2ed04 <__assert_fail@plt+0x1c148>
   21f78:	mov	r5, r0
   21f7c:	cmp	r0, #0
   21f80:	beq	21fac <__assert_fail@plt+0xf3f0>
   21f84:	mov	r0, r5
   21f88:	mov	r1, r6
   21f8c:	mov	r2, r4
   21f90:	bl	125c8 <memcpy@plt>
   21f94:	cmp	r4, #0
   21f98:	moveq	r0, #46	; 0x2e
   21f9c:	strbeq	r0, [r5, r4]
   21fa0:	moveq	r4, #1
   21fa4:	mov	r0, #0
   21fa8:	strb	r0, [r5, r4]
   21fac:	mov	r0, r5
   21fb0:	pop	{r4, r5, r6, sl, fp, pc}
   21fb4:	push	{r4, r5, fp, lr}
   21fb8:	add	fp, sp, #8
   21fbc:	mov	r4, r0
   21fc0:	bl	3d5f4 <__assert_fail@plt+0x2aa38>
   21fc4:	mov	r5, r0
   21fc8:	ldrb	r0, [r0]
   21fcc:	cmp	r0, #0
   21fd0:	moveq	r5, r4
   21fd4:	mov	r0, r5
   21fd8:	bl	3d640 <__assert_fail@plt+0x2aa84>
   21fdc:	ldrb	r1, [r5, r0]
   21fe0:	mov	r2, #0
   21fe4:	strb	r2, [r5, r0]
   21fe8:	cmp	r1, #0
   21fec:	movwne	r1, #1
   21ff0:	mov	r0, r1
   21ff4:	pop	{r4, r5, fp, pc}
   21ff8:	sub	sp, sp, #8
   21ffc:	push	{fp, lr}
   22000:	mov	fp, sp
   22004:	sub	sp, sp, #8
   22008:	str	r3, [fp, #12]
   2200c:	str	r2, [fp, #8]
   22010:	mov	r2, #0
   22014:	tst	r1, #64	; 0x40
   22018:	addne	r2, fp, #8
   2201c:	orrne	r2, r2, #4
   22020:	strne	r2, [sp, #4]
   22024:	ldrne	r2, [fp, #8]
   22028:	bl	127c0 <open64@plt>
   2202c:	bl	2b0f0 <__assert_fail@plt+0x18534>
   22030:	mov	sp, fp
   22034:	pop	{fp, lr}
   22038:	add	sp, sp, #8
   2203c:	bx	lr
   22040:	push	{r4, r5, fp, lr}
   22044:	add	fp, sp, #8
   22048:	mov	r4, r1
   2204c:	mov	r5, r0
   22050:	bl	22124 <__assert_fail@plt+0xf568>
   22054:	strb	r0, [r4]
   22058:	mov	r0, #114	; 0x72
   2205c:	tst	r5, #256	; 0x100
   22060:	mov	r1, #114	; 0x72
   22064:	movweq	r1, #45	; 0x2d
   22068:	strb	r1, [r4, #1]
   2206c:	mov	r1, #119	; 0x77
   22070:	tst	r5, #128	; 0x80
   22074:	mov	r2, #119	; 0x77
   22078:	movweq	r2, #45	; 0x2d
   2207c:	strb	r2, [r4, #2]
   22080:	tst	r5, #32
   22084:	mov	r2, #114	; 0x72
   22088:	movweq	r2, #45	; 0x2d
   2208c:	strb	r2, [r4, #4]
   22090:	tst	r5, #16
   22094:	mov	r2, #119	; 0x77
   22098:	movweq	r2, #45	; 0x2d
   2209c:	strb	r2, [r4, #5]
   220a0:	tst	r5, #4
   220a4:	movweq	r0, #45	; 0x2d
   220a8:	strb	r0, [r4, #7]
   220ac:	tst	r5, #2
   220b0:	movweq	r1, #45	; 0x2d
   220b4:	strb	r1, [r4, #8]
   220b8:	mov	r0, #32
   220bc:	strh	r0, [r4, #10]
   220c0:	ands	r0, r5, #64	; 0x40
   220c4:	mov	r0, #45	; 0x2d
   220c8:	mov	r1, #45	; 0x2d
   220cc:	movwne	r1, #120	; 0x78
   220d0:	mov	r2, #83	; 0x53
   220d4:	mov	r3, #83	; 0x53
   220d8:	movwne	r3, #115	; 0x73
   220dc:	tst	r5, #2048	; 0x800
   220e0:	moveq	r3, r1
   220e4:	strb	r3, [r4, #3]
   220e8:	ands	r1, r5, #8
   220ec:	mov	r1, #45	; 0x2d
   220f0:	movwne	r1, #120	; 0x78
   220f4:	movwne	r2, #115	; 0x73
   220f8:	tst	r5, #1024	; 0x400
   220fc:	moveq	r2, r1
   22100:	strb	r2, [r4, #6]
   22104:	ands	r1, r5, #1
   22108:	movwne	r0, #120	; 0x78
   2210c:	mov	r1, #84	; 0x54
   22110:	movwne	r1, #116	; 0x74
   22114:	tst	r5, #512	; 0x200
   22118:	moveq	r1, r0
   2211c:	strb	r1, [r4, #9]
   22120:	pop	{r4, r5, fp, pc}
   22124:	and	r0, r0, #61440	; 0xf000
   22128:	sub	r0, r0, #4096	; 0x1000
   2212c:	lsr	r1, r0, #12
   22130:	cmp	r1, #11
   22134:	bhi	22184 <__assert_fail@plt+0xf5c8>
   22138:	mov	r0, #45	; 0x2d
   2213c:	add	r2, pc, #0
   22140:	ldr	pc, [r2, r1, lsl #2]
   22144:	andeq	r2, r2, r4, ror r1
   22148:	andeq	r2, r2, ip, ror r1
   2214c:	andeq	r2, r2, r4, lsl #3
   22150:	andeq	r2, r2, ip, lsl #3
   22154:	andeq	r2, r2, r4, lsl #3
   22158:	andeq	r2, r2, r4, lsr #3
   2215c:	andeq	r2, r2, r4, lsl #3
   22160:	andeq	r2, r2, r8, lsl #3
   22164:	andeq	r2, r2, r4, lsl #3
   22168:	muleq	r2, r4, r1
   2216c:	andeq	r2, r2, r4, lsl #3
   22170:	muleq	r2, ip, r1
   22174:	mov	r0, #112	; 0x70
   22178:	bx	lr
   2217c:	mov	r0, #99	; 0x63
   22180:	bx	lr
   22184:	mov	r0, #63	; 0x3f
   22188:	bx	lr
   2218c:	mov	r0, #100	; 0x64
   22190:	bx	lr
   22194:	mov	r0, #108	; 0x6c
   22198:	bx	lr
   2219c:	mov	r0, #115	; 0x73
   221a0:	bx	lr
   221a4:	mov	r0, #98	; 0x62
   221a8:	bx	lr
   221ac:	ldr	r0, [r0, #16]
   221b0:	b	22040 <__assert_fail@plt+0xf484>
   221b4:	push	{r4, r5, r6, r7, fp, lr}
   221b8:	add	fp, sp, #16
   221bc:	mov	r5, r1
   221c0:	bl	12ab4 <fopen64@plt>
   221c4:	mov	r4, #0
   221c8:	cmp	r0, #0
   221cc:	beq	2221c <__assert_fail@plt+0xf660>
   221d0:	mov	r6, r0
   221d4:	bl	12958 <fileno@plt>
   221d8:	cmp	r0, #2
   221dc:	movhi	r0, r6
   221e0:	pophi	{r4, r5, r6, r7, fp, pc}
   221e4:	bl	2b0e4 <__assert_fail@plt+0x18528>
   221e8:	cmn	r0, #1
   221ec:	ble	22248 <__assert_fail@plt+0xf68c>
   221f0:	mov	r7, r0
   221f4:	mov	r0, r6
   221f8:	bl	129a0 <fclose@plt>
   221fc:	cmp	r0, #0
   22200:	bne	22224 <__assert_fail@plt+0xf668>
   22204:	mov	r0, r7
   22208:	mov	r1, r5
   2220c:	bl	1243c <fdopen@plt>
   22210:	mov	r4, r0
   22214:	cmp	r0, #0
   22218:	beq	22224 <__assert_fail@plt+0xf668>
   2221c:	mov	r0, r4
   22220:	pop	{r4, r5, r6, r7, fp, pc}
   22224:	bl	128d4 <__errno_location@plt>
   22228:	mov	r4, r0
   2222c:	ldr	r5, [r0]
   22230:	mov	r0, r7
   22234:	bl	12b74 <close@plt>
   22238:	str	r5, [r4]
   2223c:	mov	r4, #0
   22240:	mov	r0, r4
   22244:	pop	{r4, r5, r6, r7, fp, pc}
   22248:	bl	128d4 <__errno_location@plt>
   2224c:	mov	r5, r0
   22250:	ldr	r7, [r0]
   22254:	mov	r0, r6
   22258:	bl	129a0 <fclose@plt>
   2225c:	str	r7, [r5]
   22260:	mov	r0, r4
   22264:	pop	{r4, r5, r6, r7, fp, pc}
   22268:	ldr	r0, [r0, #8]
   2226c:	bx	lr
   22270:	ldr	r0, [r0, #12]
   22274:	bx	lr
   22278:	ldr	r0, [r0, #16]
   2227c:	bx	lr
   22280:	mov	r2, r0
   22284:	ldm	r0, {r1, r3}
   22288:	mov	r0, #0
   2228c:	cmp	r1, r3
   22290:	bxcs	lr
   22294:	ldr	ip, [r2, #4]
   22298:	mov	r0, #0
   2229c:	ldr	r2, [r1]
   222a0:	cmp	r2, #0
   222a4:	beq	222c8 <__assert_fail@plt+0xf70c>
   222a8:	mov	r3, #0
   222ac:	mov	r2, r1
   222b0:	add	r3, r3, #1
   222b4:	ldr	r2, [r2, #4]
   222b8:	cmp	r2, #0
   222bc:	bne	222b0 <__assert_fail@plt+0xf6f4>
   222c0:	cmp	r3, r0
   222c4:	movhi	r0, r3
   222c8:	add	r1, r1, #8
   222cc:	cmp	r1, ip
   222d0:	bcc	2229c <__assert_fail@plt+0xf6e0>
   222d4:	bx	lr
   222d8:	push	{fp, lr}
   222dc:	mov	fp, sp
   222e0:	ldr	r3, [r0]
   222e4:	ldr	r1, [r0, #4]
   222e8:	mov	lr, #0
   222ec:	cmp	r3, r1
   222f0:	mov	r1, #0
   222f4:	bcs	22334 <__assert_fail@plt+0xf778>
   222f8:	ldr	ip, [r0, #4]
   222fc:	mov	r1, #0
   22300:	mov	lr, #0
   22304:	ldr	r2, [r3]
   22308:	cmp	r2, #0
   2230c:	beq	22328 <__assert_fail@plt+0xf76c>
   22310:	mov	r2, r3
   22314:	add	r1, r1, #1
   22318:	ldr	r2, [r2, #4]
   2231c:	cmp	r2, #0
   22320:	bne	22314 <__assert_fail@plt+0xf758>
   22324:	add	lr, lr, #1
   22328:	add	r3, r3, #8
   2232c:	cmp	r3, ip
   22330:	bcc	22304 <__assert_fail@plt+0xf748>
   22334:	ldr	r2, [r0, #12]
   22338:	cmp	lr, r2
   2233c:	bne	22354 <__assert_fail@plt+0xf798>
   22340:	ldr	r2, [r0, #16]
   22344:	mov	r0, #1
   22348:	cmp	r1, r2
   2234c:	movne	r0, #0
   22350:	pop	{fp, pc}
   22354:	mov	r0, #0
   22358:	pop	{fp, pc}
   2235c:	nop	{0}
   22360:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22364:	add	fp, sp, #24
   22368:	sub	sp, sp, #8
   2236c:	mov	r4, r1
   22370:	mov	r5, r0
   22374:	bl	22278 <__assert_fail@plt+0xf6bc>
   22378:	mov	r8, r0
   2237c:	mov	r0, r5
   22380:	bl	22268 <__assert_fail@plt+0xf6ac>
   22384:	mov	r7, r0
   22388:	mov	r0, r5
   2238c:	bl	22270 <__assert_fail@plt+0xf6b4>
   22390:	mov	r6, r0
   22394:	mov	r0, r5
   22398:	bl	22280 <__assert_fail@plt+0xf6c4>
   2239c:	mov	r5, r0
   223a0:	movw	r1, #13349	; 0x3425
   223a4:	movt	r1, #4
   223a8:	mov	r0, r4
   223ac:	mov	r2, r8
   223b0:	bl	128c8 <fprintf@plt>
   223b4:	movw	r1, #13373	; 0x343d
   223b8:	movt	r1, #4
   223bc:	mov	r0, r4
   223c0:	mov	r2, r7
   223c4:	bl	128c8 <fprintf@plt>
   223c8:	vldr	d16, [pc, #72]	; 22418 <__assert_fail@plt+0xf85c>
   223cc:	vmov	s0, r6
   223d0:	vmov	s2, r7
   223d4:	vcvt.f64.u32	d17, s0
   223d8:	vcvt.f64.u32	d18, s2
   223dc:	vmul.f64	d16, d17, d16
   223e0:	vdiv.f64	d16, d16, d18
   223e4:	vstr	d16, [sp]
   223e8:	movw	r1, #13397	; 0x3455
   223ec:	movt	r1, #4
   223f0:	mov	r0, r4
   223f4:	mov	r2, r6
   223f8:	bl	128c8 <fprintf@plt>
   223fc:	movw	r1, #13430	; 0x3476
   22400:	movt	r1, #4
   22404:	mov	r0, r4
   22408:	mov	r2, r5
   2240c:	sub	sp, fp, #24
   22410:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   22414:	b	128c8 <fprintf@plt>
   22418:	andeq	r0, r0, r0
   2241c:	subsmi	r0, r9, r0
   22420:	push	{r4, r5, r6, r7, fp, lr}
   22424:	add	fp, sp, #16
   22428:	mov	r5, r1
   2242c:	mov	r6, r0
   22430:	bl	22484 <__assert_fail@plt+0xf8c8>
   22434:	mov	r7, r0
   22438:	ldr	r0, [r0]
   2243c:	mov	r4, #0
   22440:	cmp	r0, #0
   22444:	bne	22450 <__assert_fail@plt+0xf894>
   22448:	b	2247c <__assert_fail@plt+0xf8c0>
   2244c:	ldr	r7, [r7, #4]
   22450:	cmp	r7, #0
   22454:	beq	2247c <__assert_fail@plt+0xf8c0>
   22458:	ldr	r1, [r7]
   2245c:	cmp	r1, r5
   22460:	beq	22478 <__assert_fail@plt+0xf8bc>
   22464:	ldr	r2, [r6, #28]
   22468:	mov	r0, r5
   2246c:	blx	r2
   22470:	cmp	r0, #0
   22474:	beq	2244c <__assert_fail@plt+0xf890>
   22478:	ldr	r4, [r7]
   2247c:	mov	r0, r4
   22480:	pop	{r4, r5, r6, r7, fp, pc}
   22484:	push	{r4, sl, fp, lr}
   22488:	add	fp, sp, #8
   2248c:	mov	r2, r1
   22490:	mov	r4, r0
   22494:	ldr	r1, [r0, #8]
   22498:	ldr	r3, [r0, #24]
   2249c:	mov	r0, r2
   224a0:	blx	r3
   224a4:	ldr	r1, [r4, #8]
   224a8:	cmp	r0, r1
   224ac:	ldrcc	r1, [r4]
   224b0:	addcc	r0, r1, r0, lsl #3
   224b4:	popcc	{r4, sl, fp, pc}
   224b8:	bl	12b68 <abort@plt>
   224bc:	ldr	r1, [r0, #16]
   224c0:	cmp	r1, #0
   224c4:	moveq	r1, #0
   224c8:	moveq	r0, r1
   224cc:	bxeq	lr
   224d0:	ldr	r2, [r0]
   224d4:	b	224e8 <__assert_fail@plt+0xf92c>
   224d8:	ldr	r1, [r2], #8
   224dc:	cmp	r1, #0
   224e0:	movne	r0, r1
   224e4:	bxne	lr
   224e8:	ldr	r1, [r0, #4]
   224ec:	cmp	r2, r1
   224f0:	bcc	224d8 <__assert_fail@plt+0xf91c>
   224f4:	push	{fp, lr}
   224f8:	mov	fp, sp
   224fc:	bl	12b68 <abort@plt>
   22500:	push	{r4, r5, fp, lr}
   22504:	add	fp, sp, #8
   22508:	mov	r5, r1
   2250c:	mov	r4, r0
   22510:	bl	22484 <__assert_fail@plt+0xf8c8>
   22514:	mov	r1, r0
   22518:	ldr	r2, [r1]
   2251c:	cmp	r2, r5
   22520:	bne	22534 <__assert_fail@plt+0xf978>
   22524:	ldr	r2, [r1, #4]
   22528:	cmp	r2, #0
   2252c:	ldrne	r0, [r2]
   22530:	popne	{r4, r5, fp, pc}
   22534:	ldr	r1, [r1, #4]
   22538:	cmp	r1, #0
   2253c:	bne	22518 <__assert_fail@plt+0xf95c>
   22540:	add	r1, r0, #8
   22544:	ldr	r2, [r4, #4]
   22548:	cmp	r1, r2
   2254c:	movcs	r0, #0
   22550:	popcs	{r4, r5, fp, pc}
   22554:	ldr	r0, [r1], #8
   22558:	cmp	r0, #0
   2255c:	popne	{r4, r5, fp, pc}
   22560:	b	22548 <__assert_fail@plt+0xf98c>
   22564:	push	{r4, sl, fp, lr}
   22568:	add	fp, sp, #8
   2256c:	mov	ip, r0
   22570:	ldr	lr, [r0]
   22574:	ldr	r3, [r0, #4]
   22578:	mov	r0, #0
   2257c:	cmp	lr, r3
   22580:	bcs	225cc <__assert_fail@plt+0xfa10>
   22584:	mov	r0, #0
   22588:	ldr	r3, [lr]
   2258c:	cmp	r3, #0
   22590:	cmpne	lr, #0
   22594:	beq	225bc <__assert_fail@plt+0xfa00>
   22598:	mov	r3, lr
   2259c:	cmp	r0, r2
   225a0:	popcs	{r4, sl, fp, pc}
   225a4:	ldr	r4, [r3]
   225a8:	str	r4, [r1, r0, lsl #2]
   225ac:	add	r0, r0, #1
   225b0:	ldr	r3, [r3, #4]
   225b4:	cmp	r3, #0
   225b8:	bne	2259c <__assert_fail@plt+0xf9e0>
   225bc:	ldr	r3, [ip, #4]
   225c0:	add	lr, lr, #8
   225c4:	cmp	lr, r3
   225c8:	bcc	22588 <__assert_fail@plt+0xf9cc>
   225cc:	pop	{r4, sl, fp, pc}
   225d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   225d4:	add	fp, sp, #24
   225d8:	mov	r8, r0
   225dc:	ldr	r9, [r0]
   225e0:	ldr	r0, [r0, #4]
   225e4:	mov	r6, #0
   225e8:	cmp	r9, r0
   225ec:	bcs	2264c <__assert_fail@plt+0xfa90>
   225f0:	mov	r4, r2
   225f4:	mov	r5, r1
   225f8:	mov	r6, #0
   225fc:	b	2262c <__assert_fail@plt+0xfa70>
   22600:	mov	r7, r9
   22604:	ldr	r0, [r7]
   22608:	mov	r1, r4
   2260c:	blx	r5
   22610:	cmp	r0, #0
   22614:	beq	2264c <__assert_fail@plt+0xfa90>
   22618:	add	r6, r6, #1
   2261c:	ldr	r7, [r7, #4]
   22620:	cmp	r7, #0
   22624:	bne	22604 <__assert_fail@plt+0xfa48>
   22628:	b	2263c <__assert_fail@plt+0xfa80>
   2262c:	ldr	r0, [r9]
   22630:	cmp	r0, #0
   22634:	cmpne	r9, #0
   22638:	bne	22600 <__assert_fail@plt+0xfa44>
   2263c:	ldr	r0, [r8, #4]
   22640:	add	r9, r9, #8
   22644:	cmp	r9, r0
   22648:	bcc	2262c <__assert_fail@plt+0xfa70>
   2264c:	mov	r0, r6
   22650:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22654:	ldrb	r2, [r0]
   22658:	cmp	r2, #0
   2265c:	moveq	r0, #0
   22660:	bxeq	lr
   22664:	add	r3, r0, #1
   22668:	mov	r0, #0
   2266c:	rsb	r0, r0, r0, lsl #5
   22670:	uxtab	r0, r0, r2
   22674:	udiv	r2, r0, r1
   22678:	mls	r0, r2, r1, r0
   2267c:	ldrb	r2, [r3], #1
   22680:	cmp	r2, #0
   22684:	bne	2266c <__assert_fail@plt+0xfab0>
   22688:	bx	lr
   2268c:	movw	r1, #13456	; 0x3490
   22690:	movt	r1, #4
   22694:	vld1.32	{d16-d17}, [r1]!
   22698:	vst1.32	{d16-d17}, [r0]!
   2269c:	ldr	r1, [r1]
   226a0:	str	r1, [r0]
   226a4:	bx	lr
   226a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   226ac:	add	fp, sp, #28
   226b0:	sub	sp, sp, #4
   226b4:	mov	r7, r1
   226b8:	mov	r8, r0
   226bc:	movw	sl, #10152	; 0x27a8
   226c0:	movt	sl, #2
   226c4:	cmp	r3, #0
   226c8:	movne	sl, r3
   226cc:	movw	r5, #10120	; 0x2788
   226d0:	movt	r5, #2
   226d4:	cmp	r2, #0
   226d8:	movne	r5, r2
   226dc:	mov	r0, #40	; 0x28
   226e0:	bl	2ed04 <__assert_fail@plt+0x1c148>
   226e4:	mov	r9, #0
   226e8:	cmp	r0, #0
   226ec:	beq	2277c <__assert_fail@plt+0xfbc0>
   226f0:	mov	r4, r0
   226f4:	movw	r6, #13456	; 0x3490
   226f8:	movt	r6, #4
   226fc:	cmp	r7, #0
   22700:	movne	r6, r7
   22704:	str	r6, [r0, #20]
   22708:	bl	227b8 <__assert_fail@plt+0xfbfc>
   2270c:	cmp	r0, #0
   22710:	beq	22774 <__assert_fail@plt+0xfbb8>
   22714:	mov	r0, r8
   22718:	mov	r1, r6
   2271c:	bl	22864 <__assert_fail@plt+0xfca8>
   22720:	str	r0, [r4, #8]
   22724:	cmp	r0, #0
   22728:	beq	22774 <__assert_fail@plt+0xfbb8>
   2272c:	mov	r1, #8
   22730:	bl	2c49c <__assert_fail@plt+0x198e0>
   22734:	str	r0, [r4]
   22738:	cmp	r0, #0
   2273c:	beq	22774 <__assert_fail@plt+0xfbb8>
   22740:	ldr	r1, [fp, #8]
   22744:	mov	r2, #0
   22748:	str	r2, [r4, #12]
   2274c:	str	r2, [r4, #16]
   22750:	str	r5, [r4, #24]
   22754:	str	sl, [r4, #28]
   22758:	str	r1, [r4, #32]
   2275c:	str	r2, [r4, #36]	; 0x24
   22760:	ldr	r1, [r4, #8]
   22764:	add	r0, r0, r1, lsl #3
   22768:	str	r0, [r4, #4]
   2276c:	mov	r9, r4
   22770:	b	2277c <__assert_fail@plt+0xfbc0>
   22774:	mov	r0, r4
   22778:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2277c:	mov	r0, r9
   22780:	sub	sp, fp, #28
   22784:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22788:	push	{r4, sl, fp, lr}
   2278c:	add	fp, sp, #8
   22790:	mov	r4, r1
   22794:	mov	r1, #3
   22798:	bl	3d754 <__assert_fail@plt+0x2ab98>
   2279c:	udiv	r1, r0, r4
   227a0:	mls	r0, r1, r4, r0
   227a4:	pop	{r4, sl, fp, pc}
   227a8:	sub	r0, r0, r1
   227ac:	clz	r0, r0
   227b0:	lsr	r0, r0, #5
   227b4:	bx	lr
   227b8:	mov	r1, r0
   227bc:	ldr	r3, [r0, #20]
   227c0:	mov	r0, #1
   227c4:	movw	r2, #13456	; 0x3490
   227c8:	movt	r2, #4
   227cc:	cmp	r3, r2
   227d0:	beq	22854 <__assert_fail@plt+0xfc98>
   227d4:	vldr	s2, [pc, #124]	; 22858 <__assert_fail@plt+0xfc9c>
   227d8:	vldr	s0, [r3, #8]
   227dc:	vcmpe.f32	s0, s2
   227e0:	vmrs	APSR_nzcv, fpscr
   227e4:	ble	2284c <__assert_fail@plt+0xfc90>
   227e8:	vldr	s4, [pc, #108]	; 2285c <__assert_fail@plt+0xfca0>
   227ec:	vcmpe.f32	s0, s4
   227f0:	vmrs	APSR_nzcv, fpscr
   227f4:	bpl	2284c <__assert_fail@plt+0xfc90>
   227f8:	vldr	s4, [pc, #96]	; 22860 <__assert_fail@plt+0xfca4>
   227fc:	vldr	s6, [r3, #12]
   22800:	vcmpe.f32	s6, s4
   22804:	vmrs	APSR_nzcv, fpscr
   22808:	ble	2284c <__assert_fail@plt+0xfc90>
   2280c:	vldr	s4, [r3]
   22810:	vcmpe.f32	s4, #0.0
   22814:	vmrs	APSR_nzcv, fpscr
   22818:	blt	2284c <__assert_fail@plt+0xfc90>
   2281c:	vadd.f32	s2, s4, s2
   22820:	vcmpe.f32	s2, s0
   22824:	vmrs	APSR_nzcv, fpscr
   22828:	bpl	2284c <__assert_fail@plt+0xfc90>
   2282c:	vldr	s0, [r3, #4]
   22830:	vmov.f32	s4, #112	; 0x3f800000  1.0
   22834:	vcmpe.f32	s0, s4
   22838:	vmrs	APSR_nzcv, fpscr
   2283c:	bhi	2284c <__assert_fail@plt+0xfc90>
   22840:	vcmpe.f32	s2, s0
   22844:	vmrs	APSR_nzcv, fpscr
   22848:	bxmi	lr
   2284c:	str	r2, [r1, #20]
   22850:	mov	r0, #0
   22854:	bx	lr
   22858:	stclcc	12, cr12, [ip, #820]	; 0x334
   2285c:	svccc	0x00666666
   22860:	svccc	0x008ccccd
   22864:	ldrb	r2, [r1, #16]
   22868:	cmp	r2, #0
   2286c:	bne	2289c <__assert_fail@plt+0xfce0>
   22870:	vldr	s0, [r1, #8]
   22874:	vmov	s2, r0
   22878:	vcvt.f32.u32	s2, s2
   2287c:	vdiv.f32	s2, s2, s0
   22880:	vcvt.u32.f32	s0, s2
   22884:	vldr	s4, [pc, #44]	; 228b8 <__assert_fail@plt+0xfcfc>
   22888:	mov	r0, #0
   2288c:	vcmpe.f32	s2, s4
   22890:	vmrs	APSR_nzcv, fpscr
   22894:	bxge	lr
   22898:	vmov	r0, s0
   2289c:	push	{fp, lr}
   228a0:	mov	fp, sp
   228a4:	bl	23088 <__assert_fail@plt+0x104cc>
   228a8:	cmn	r0, #-536870911	; 0xe0000001
   228ac:	movwhi	r0, #0
   228b0:	pop	{fp, lr}
   228b4:	bx	lr
   228b8:	svcmi	0x00800000
   228bc:	push	{r4, r5, r6, r7, fp, lr}
   228c0:	add	fp, sp, #16
   228c4:	mov	r4, r0
   228c8:	ldr	r5, [r0]
   228cc:	ldr	r0, [r0, #4]
   228d0:	cmp	r5, r0
   228d4:	bcs	2296c <__assert_fail@plt+0xfdb0>
   228d8:	mov	r6, #0
   228dc:	ldr	r0, [r5]
   228e0:	cmp	r0, #0
   228e4:	beq	2295c <__assert_fail@plt+0xfda0>
   228e8:	ldr	r7, [r5, #4]
   228ec:	ldr	r1, [r4, #32]
   228f0:	cmp	r1, #0
   228f4:	mov	r0, r1
   228f8:	movwne	r0, #1
   228fc:	cmp	r7, #0
   22900:	beq	22944 <__assert_fail@plt+0xfd88>
   22904:	tst	r0, #1
   22908:	beq	22914 <__assert_fail@plt+0xfd58>
   2290c:	ldr	r0, [r7]
   22910:	blx	r1
   22914:	str	r6, [r7]
   22918:	ldr	r2, [r7, #4]
   2291c:	ldr	r0, [r4, #36]	; 0x24
   22920:	str	r0, [r7, #4]
   22924:	str	r7, [r4, #36]	; 0x24
   22928:	ldr	r1, [r4, #32]
   2292c:	cmp	r1, #0
   22930:	mov	r0, r1
   22934:	movwne	r0, #1
   22938:	cmp	r2, #0
   2293c:	mov	r7, r2
   22940:	bne	22904 <__assert_fail@plt+0xfd48>
   22944:	cmp	r0, #0
   22948:	beq	22954 <__assert_fail@plt+0xfd98>
   2294c:	ldr	r0, [r5]
   22950:	blx	r1
   22954:	str	r6, [r5]
   22958:	str	r6, [r5, #4]
   2295c:	ldr	r0, [r4, #4]
   22960:	add	r5, r5, #8
   22964:	cmp	r5, r0
   22968:	bcc	228dc <__assert_fail@plt+0xfd20>
   2296c:	mov	r0, #0
   22970:	str	r0, [r4, #12]
   22974:	str	r0, [r4, #16]
   22978:	pop	{r4, r5, r6, r7, fp, pc}
   2297c:	push	{r4, r5, r6, sl, fp, lr}
   22980:	add	fp, sp, #16
   22984:	mov	r4, r0
   22988:	ldr	r0, [r0, #32]
   2298c:	cmp	r0, #0
   22990:	ldrne	r0, [r4, #16]
   22994:	cmpne	r0, #0
   22998:	beq	229f0 <__assert_fail@plt+0xfe34>
   2299c:	ldr	r5, [r4]
   229a0:	ldr	r0, [r4, #4]
   229a4:	cmp	r5, r0
   229a8:	bcc	229c0 <__assert_fail@plt+0xfe04>
   229ac:	b	229f0 <__assert_fail@plt+0xfe34>
   229b0:	ldr	r0, [r4, #4]
   229b4:	add	r5, r5, #8
   229b8:	cmp	r5, r0
   229bc:	bcs	229f0 <__assert_fail@plt+0xfe34>
   229c0:	ldr	r0, [r5]
   229c4:	cmp	r0, #0
   229c8:	cmpne	r5, #0
   229cc:	beq	229b0 <__assert_fail@plt+0xfdf4>
   229d0:	mov	r6, r5
   229d4:	ldr	r0, [r6]
   229d8:	ldr	r1, [r4, #32]
   229dc:	blx	r1
   229e0:	ldr	r6, [r6, #4]
   229e4:	cmp	r6, #0
   229e8:	bne	229d4 <__assert_fail@plt+0xfe18>
   229ec:	b	229b0 <__assert_fail@plt+0xfdf4>
   229f0:	ldr	r5, [r4]
   229f4:	ldr	r0, [r4, #4]
   229f8:	cmp	r5, r0
   229fc:	bcc	22a14 <__assert_fail@plt+0xfe58>
   22a00:	b	22a38 <__assert_fail@plt+0xfe7c>
   22a04:	ldr	r0, [r4, #4]
   22a08:	add	r5, r5, #8
   22a0c:	cmp	r5, r0
   22a10:	bcs	22a38 <__assert_fail@plt+0xfe7c>
   22a14:	ldr	r0, [r5, #4]
   22a18:	cmp	r0, #0
   22a1c:	beq	22a04 <__assert_fail@plt+0xfe48>
   22a20:	ldr	r6, [r0, #4]
   22a24:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   22a28:	cmp	r6, #0
   22a2c:	mov	r0, r6
   22a30:	bne	22a20 <__assert_fail@plt+0xfe64>
   22a34:	b	22a04 <__assert_fail@plt+0xfe48>
   22a38:	ldr	r0, [r4, #36]	; 0x24
   22a3c:	cmp	r0, #0
   22a40:	beq	22a58 <__assert_fail@plt+0xfe9c>
   22a44:	ldr	r5, [r0, #4]
   22a48:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   22a4c:	cmp	r5, #0
   22a50:	mov	r0, r5
   22a54:	bne	22a44 <__assert_fail@plt+0xfe88>
   22a58:	ldr	r0, [r4]
   22a5c:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   22a60:	mov	r0, r4
   22a64:	pop	{r4, r5, r6, sl, fp, lr}
   22a68:	b	2ca78 <__assert_fail@plt+0x19ebc>
   22a6c:	push	{r4, r5, r6, sl, fp, lr}
   22a70:	add	fp, sp, #16
   22a74:	sub	sp, sp, #40	; 0x28
   22a78:	mov	r2, r1
   22a7c:	mov	r4, r0
   22a80:	ldr	r1, [r0, #20]
   22a84:	mov	r0, r2
   22a88:	bl	22864 <__assert_fail@plt+0xfca8>
   22a8c:	mov	r5, #0
   22a90:	cmp	r0, #0
   22a94:	beq	22b70 <__assert_fail@plt+0xffb4>
   22a98:	mov	r6, r0
   22a9c:	ldr	r0, [r4, #8]
   22aa0:	cmp	r6, r0
   22aa4:	bne	22ab0 <__assert_fail@plt+0xfef4>
   22aa8:	mov	r5, #1
   22aac:	b	22b70 <__assert_fail@plt+0xffb4>
   22ab0:	mov	r0, r6
   22ab4:	mov	r1, #8
   22ab8:	bl	2c49c <__assert_fail@plt+0x198e0>
   22abc:	str	r0, [sp]
   22ac0:	cmp	r0, #0
   22ac4:	beq	22b70 <__assert_fail@plt+0xffb4>
   22ac8:	str	r6, [sp, #8]
   22acc:	mov	r0, #0
   22ad0:	str	r0, [sp, #12]
   22ad4:	str	r0, [sp, #16]
   22ad8:	ldr	r0, [sp]
   22adc:	add	r0, r0, r6, lsl #3
   22ae0:	str	r0, [sp, #4]
   22ae4:	add	r6, r4, #20
   22ae8:	ldm	r6, {r0, r1, r2, r3, r6}
   22aec:	add	ip, sp, #20
   22af0:	stm	ip, {r0, r1, r2, r3, r6}
   22af4:	mov	r0, sp
   22af8:	mov	r1, r4
   22afc:	mov	r2, #0
   22b00:	bl	22b80 <__assert_fail@plt+0xffc4>
   22b04:	cmp	r0, #0
   22b08:	beq	22b2c <__assert_fail@plt+0xff70>
   22b0c:	ldr	r0, [r4]
   22b10:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   22b14:	ldm	sp, {r0, r1, r2, r3}
   22b18:	stm	r4, {r0, r1, r2, r3}
   22b1c:	ldr	r0, [sp, #36]	; 0x24
   22b20:	str	r0, [r4, #36]	; 0x24
   22b24:	mov	r5, #1
   22b28:	b	22b70 <__assert_fail@plt+0xffb4>
   22b2c:	ldr	r0, [sp, #36]	; 0x24
   22b30:	str	r0, [r4, #36]	; 0x24
   22b34:	mov	r1, sp
   22b38:	mov	r0, r4
   22b3c:	mov	r2, #1
   22b40:	bl	22b80 <__assert_fail@plt+0xffc4>
   22b44:	cmp	r0, #0
   22b48:	beq	22b7c <__assert_fail@plt+0xffc0>
   22b4c:	mov	r1, sp
   22b50:	mov	r5, #0
   22b54:	mov	r0, r4
   22b58:	mov	r2, #0
   22b5c:	bl	22b80 <__assert_fail@plt+0xffc4>
   22b60:	cmp	r0, #0
   22b64:	beq	22b7c <__assert_fail@plt+0xffc0>
   22b68:	ldr	r0, [sp]
   22b6c:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   22b70:	mov	r0, r5
   22b74:	sub	sp, fp, #16
   22b78:	pop	{r4, r5, r6, sl, fp, pc}
   22b7c:	bl	12b68 <abort@plt>
   22b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22b84:	add	fp, sp, #28
   22b88:	sub	sp, sp, #4
   22b8c:	mov	r7, r0
   22b90:	ldr	r6, [r1]
   22b94:	ldr	r0, [r1, #4]
   22b98:	cmp	r6, r0
   22b9c:	bcs	22ca0 <__assert_fail@plt+0x100e4>
   22ba0:	mov	r9, r2
   22ba4:	mov	sl, r1
   22ba8:	ldr	r0, [r6]
   22bac:	cmp	r0, #0
   22bb0:	beq	22c90 <__assert_fail@plt+0x100d4>
   22bb4:	ldr	r4, [r6, #4]
   22bb8:	cmp	r4, #0
   22bbc:	beq	22c18 <__assert_fail@plt+0x1005c>
   22bc0:	ldr	r5, [r4]
   22bc4:	mov	r0, r7
   22bc8:	mov	r1, r5
   22bcc:	bl	22484 <__assert_fail@plt+0xf8c8>
   22bd0:	ldr	r1, [r0]
   22bd4:	ldr	r8, [r4, #4]
   22bd8:	cmp	r1, #0
   22bdc:	beq	22bf0 <__assert_fail@plt+0x10034>
   22be0:	ldr	r1, [r0, #4]
   22be4:	str	r1, [r4, #4]
   22be8:	str	r4, [r0, #4]
   22bec:	b	22c0c <__assert_fail@plt+0x10050>
   22bf0:	str	r5, [r0]
   22bf4:	ldr	r0, [r7, #12]
   22bf8:	add	r0, r0, #1
   22bfc:	str	r0, [r7, #12]
   22c00:	mov	r0, r7
   22c04:	mov	r1, r4
   22c08:	bl	23128 <__assert_fail@plt+0x1056c>
   22c0c:	cmp	r8, #0
   22c10:	mov	r4, r8
   22c14:	bne	22bc0 <__assert_fail@plt+0x10004>
   22c18:	mov	r0, #0
   22c1c:	str	r0, [r6, #4]
   22c20:	cmp	r9, #0
   22c24:	bne	22c90 <__assert_fail@plt+0x100d4>
   22c28:	ldr	r4, [r6]
   22c2c:	mov	r0, r7
   22c30:	mov	r1, r4
   22c34:	bl	22484 <__assert_fail@plt+0xf8c8>
   22c38:	mov	r5, r0
   22c3c:	ldr	r0, [r0]
   22c40:	cmp	r0, #0
   22c44:	beq	22c6c <__assert_fail@plt+0x100b0>
   22c48:	mov	r0, r7
   22c4c:	bl	22f0c <__assert_fail@plt+0x10350>
   22c50:	cmp	r0, #0
   22c54:	beq	22cac <__assert_fail@plt+0x100f0>
   22c58:	str	r4, [r0]
   22c5c:	ldr	r1, [r5, #4]
   22c60:	str	r1, [r0, #4]
   22c64:	str	r0, [r5, #4]
   22c68:	b	22c7c <__assert_fail@plt+0x100c0>
   22c6c:	str	r4, [r5]
   22c70:	ldr	r0, [r7, #12]
   22c74:	add	r0, r0, #1
   22c78:	str	r0, [r7, #12]
   22c7c:	mov	r0, #0
   22c80:	str	r0, [r6]
   22c84:	ldr	r0, [sl, #12]
   22c88:	sub	r0, r0, #1
   22c8c:	str	r0, [sl, #12]
   22c90:	add	r6, r6, #8
   22c94:	ldr	r0, [sl, #4]
   22c98:	cmp	r6, r0
   22c9c:	bcc	22ba8 <__assert_fail@plt+0xffec>
   22ca0:	mov	r0, #1
   22ca4:	sub	sp, fp, #28
   22ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22cac:	mov	r0, #0
   22cb0:	sub	sp, fp, #28
   22cb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22cb8:	push	{r4, r5, r6, r7, fp, lr}
   22cbc:	add	fp, sp, #16
   22cc0:	sub	sp, sp, #8
   22cc4:	cmp	r1, #0
   22cc8:	beq	22e28 <__assert_fail@plt+0x1026c>
   22ccc:	mov	r7, r2
   22cd0:	mov	r5, r1
   22cd4:	mov	r4, r0
   22cd8:	add	r2, sp, #4
   22cdc:	mov	r6, #0
   22ce0:	mov	r3, #0
   22ce4:	bl	22e30 <__assert_fail@plt+0x10274>
   22ce8:	cmp	r0, #0
   22cec:	beq	22cfc <__assert_fail@plt+0x10140>
   22cf0:	cmp	r7, #0
   22cf4:	strne	r0, [r7]
   22cf8:	b	22e1c <__assert_fail@plt+0x10260>
   22cfc:	vldr	s0, [r4, #8]
   22d00:	vldr	s2, [r4, #12]
   22d04:	ldr	r0, [r4, #20]
   22d08:	vldr	s4, [r0, #8]
   22d0c:	vcvt.f32.u32	s0, s0
   22d10:	vcvt.f32.u32	s2, s2
   22d14:	vmul.f32	s0, s4, s0
   22d18:	vcmpe.f32	s0, s2
   22d1c:	vmrs	APSR_nzcv, fpscr
   22d20:	bpl	22db4 <__assert_fail@plt+0x101f8>
   22d24:	mov	r0, r4
   22d28:	bl	227b8 <__assert_fail@plt+0xfbfc>
   22d2c:	vldr	s0, [r4, #8]
   22d30:	vldr	s4, [r4, #12]
   22d34:	ldr	r0, [r4, #20]
   22d38:	vcvt.f32.u32	s2, s0
   22d3c:	vldr	s0, [r0, #8]
   22d40:	vcvt.f32.u32	s4, s4
   22d44:	vmul.f32	s6, s0, s2
   22d48:	vcmpe.f32	s6, s4
   22d4c:	vmrs	APSR_nzcv, fpscr
   22d50:	bpl	22db4 <__assert_fail@plt+0x101f8>
   22d54:	vldr	s4, [r0, #12]
   22d58:	vmul.f32	s2, s4, s2
   22d5c:	ldrb	r0, [r0, #16]
   22d60:	vmul.f32	s0, s0, s2
   22d64:	mvn	r6, #0
   22d68:	vldr	s4, [pc, #188]	; 22e2c <__assert_fail@plt+0x10270>
   22d6c:	cmp	r0, #0
   22d70:	vseleq.f32	s0, s0, s2
   22d74:	vcmpe.f32	s0, s4
   22d78:	vmrs	APSR_nzcv, fpscr
   22d7c:	bge	22e1c <__assert_fail@plt+0x10260>
   22d80:	vcvt.u32.f32	s0, s0
   22d84:	vmov	r1, s0
   22d88:	mov	r0, r4
   22d8c:	bl	22a6c <__assert_fail@plt+0xfeb0>
   22d90:	cmp	r0, #0
   22d94:	beq	22e1c <__assert_fail@plt+0x10260>
   22d98:	add	r2, sp, #4
   22d9c:	mov	r0, r4
   22da0:	mov	r1, r5
   22da4:	mov	r3, #0
   22da8:	bl	22e30 <__assert_fail@plt+0x10274>
   22dac:	cmp	r0, #0
   22db0:	bne	22e28 <__assert_fail@plt+0x1026c>
   22db4:	ldr	r6, [sp, #4]
   22db8:	ldr	r0, [r6]
   22dbc:	cmp	r0, #0
   22dc0:	beq	22df4 <__assert_fail@plt+0x10238>
   22dc4:	mov	r0, r4
   22dc8:	bl	22f0c <__assert_fail@plt+0x10350>
   22dcc:	cmp	r0, #0
   22dd0:	beq	22e18 <__assert_fail@plt+0x1025c>
   22dd4:	str	r5, [r0]
   22dd8:	ldr	r1, [r6, #4]
   22ddc:	str	r1, [r0, #4]
   22de0:	str	r0, [r6, #4]
   22de4:	ldr	r0, [r4, #16]
   22de8:	add	r0, r0, #1
   22dec:	str	r0, [r4, #16]
   22df0:	b	22e10 <__assert_fail@plt+0x10254>
   22df4:	str	r5, [r6]
   22df8:	ldr	r0, [r4, #12]
   22dfc:	ldr	r1, [r4, #16]
   22e00:	add	r1, r1, #1
   22e04:	add	r0, r0, #1
   22e08:	str	r0, [r4, #12]
   22e0c:	str	r1, [r4, #16]
   22e10:	mov	r6, #1
   22e14:	b	22e1c <__assert_fail@plt+0x10260>
   22e18:	mvn	r6, #0
   22e1c:	mov	r0, r6
   22e20:	sub	sp, fp, #16
   22e24:	pop	{r4, r5, r6, r7, fp, pc}
   22e28:	bl	12b68 <abort@plt>
   22e2c:	svcmi	0x00800000
   22e30:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22e34:	add	fp, sp, #24
   22e38:	mov	r8, r3
   22e3c:	mov	r4, r2
   22e40:	mov	r7, r1
   22e44:	mov	r5, r0
   22e48:	bl	22484 <__assert_fail@plt+0xf8c8>
   22e4c:	str	r0, [r4]
   22e50:	ldr	r1, [r0]
   22e54:	mov	r4, #0
   22e58:	cmp	r1, #0
   22e5c:	beq	22f04 <__assert_fail@plt+0x10348>
   22e60:	mov	r6, r0
   22e64:	cmp	r1, r7
   22e68:	beq	22e80 <__assert_fail@plt+0x102c4>
   22e6c:	ldr	r2, [r5, #28]
   22e70:	mov	r0, r7
   22e74:	blx	r2
   22e78:	cmp	r0, #0
   22e7c:	beq	22ea8 <__assert_fail@plt+0x102ec>
   22e80:	ldr	r4, [r6]
   22e84:	cmp	r8, #0
   22e88:	beq	22f04 <__assert_fail@plt+0x10348>
   22e8c:	ldr	r1, [r6, #4]
   22e90:	cmp	r1, #0
   22e94:	beq	22efc <__assert_fail@plt+0x10340>
   22e98:	ldm	r1, {r0, r2}
   22e9c:	stm	r6, {r0, r2}
   22ea0:	b	22eec <__assert_fail@plt+0x10330>
   22ea4:	ldr	r6, [r6]
   22ea8:	ldr	r0, [r6, #4]!
   22eac:	cmp	r0, #0
   22eb0:	beq	22f04 <__assert_fail@plt+0x10348>
   22eb4:	ldr	r1, [r0]
   22eb8:	cmp	r1, r7
   22ebc:	beq	22ed4 <__assert_fail@plt+0x10318>
   22ec0:	ldr	r2, [r5, #28]
   22ec4:	mov	r0, r7
   22ec8:	blx	r2
   22ecc:	cmp	r0, #0
   22ed0:	beq	22ea4 <__assert_fail@plt+0x102e8>
   22ed4:	ldr	r1, [r6]
   22ed8:	ldr	r4, [r1]
   22edc:	cmp	r8, #0
   22ee0:	beq	22f04 <__assert_fail@plt+0x10348>
   22ee4:	ldr	r0, [r1, #4]
   22ee8:	str	r0, [r6]
   22eec:	mov	r0, r5
   22ef0:	bl	23128 <__assert_fail@plt+0x1056c>
   22ef4:	mov	r0, r4
   22ef8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22efc:	mov	r0, #0
   22f00:	str	r0, [r6]
   22f04:	mov	r0, r4
   22f08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22f0c:	mov	r1, r0
   22f10:	ldr	r0, [r0, #36]	; 0x24
   22f14:	cmp	r0, #0
   22f18:	ldrne	r2, [r0, #4]
   22f1c:	strne	r2, [r1, #36]	; 0x24
   22f20:	bxne	lr
   22f24:	push	{fp, lr}
   22f28:	mov	fp, sp
   22f2c:	mov	r0, #8
   22f30:	bl	2ed04 <__assert_fail@plt+0x1c148>
   22f34:	pop	{fp, pc}
   22f38:	push	{r4, sl, fp, lr}
   22f3c:	add	fp, sp, #8
   22f40:	sub	sp, sp, #8
   22f44:	mov	r4, r1
   22f48:	add	r2, sp, #4
   22f4c:	bl	22cb8 <__assert_fail@plt+0x100fc>
   22f50:	cmn	r0, #1
   22f54:	beq	22f68 <__assert_fail@plt+0x103ac>
   22f58:	ldr	r1, [sp, #4]
   22f5c:	cmp	r0, #0
   22f60:	moveq	r4, r1
   22f64:	b	22f6c <__assert_fail@plt+0x103b0>
   22f68:	mov	r4, #0
   22f6c:	mov	r0, r4
   22f70:	sub	sp, fp, #8
   22f74:	pop	{r4, sl, fp, pc}
   22f78:	push	{r4, r5, r6, sl, fp, lr}
   22f7c:	add	fp, sp, #16
   22f80:	sub	sp, sp, #8
   22f84:	mov	r4, r0
   22f88:	add	r2, sp, #4
   22f8c:	mov	r3, #1
   22f90:	bl	22e30 <__assert_fail@plt+0x10274>
   22f94:	mov	r5, r0
   22f98:	cmp	r0, #0
   22f9c:	beq	23078 <__assert_fail@plt+0x104bc>
   22fa0:	ldr	r0, [r4, #16]
   22fa4:	sub	r0, r0, #1
   22fa8:	str	r0, [r4, #16]
   22fac:	ldr	r0, [sp, #4]
   22fb0:	ldr	r0, [r0]
   22fb4:	cmp	r0, #0
   22fb8:	bne	23078 <__assert_fail@plt+0x104bc>
   22fbc:	ldr	r0, [r4, #12]
   22fc0:	sub	r0, r0, #1
   22fc4:	vldr	s0, [r4, #8]
   22fc8:	str	r0, [r4, #12]
   22fcc:	ldr	r1, [r4, #20]
   22fd0:	vldr	s2, [r1]
   22fd4:	vcvt.f32.u32	s0, s0
   22fd8:	vmov	s4, r0
   22fdc:	vcvt.f32.u32	s4, s4
   22fe0:	vmul.f32	s0, s2, s0
   22fe4:	vcmpe.f32	s0, s4
   22fe8:	vmrs	APSR_nzcv, fpscr
   22fec:	ble	23078 <__assert_fail@plt+0x104bc>
   22ff0:	mov	r0, r4
   22ff4:	bl	227b8 <__assert_fail@plt+0xfbfc>
   22ff8:	vldr	s0, [r4, #8]
   22ffc:	vldr	s2, [r4, #12]
   23000:	ldr	r0, [r4, #20]
   23004:	vcvt.f32.u32	s0, s0
   23008:	vldr	s4, [r0]
   2300c:	vcvt.f32.u32	s2, s2
   23010:	vmul.f32	s4, s4, s0
   23014:	vcmpe.f32	s4, s2
   23018:	vmrs	APSR_nzcv, fpscr
   2301c:	ble	23078 <__assert_fail@plt+0x104bc>
   23020:	vldr	s2, [r0, #4]
   23024:	ldrb	r1, [r0, #16]
   23028:	vmul.f32	s0, s2, s0
   2302c:	cmp	r1, #0
   23030:	vldreq	s2, [r0, #8]
   23034:	vmuleq.f32	s0, s0, s2
   23038:	vcvt.u32.f32	s0, s0
   2303c:	vmov	r1, s0
   23040:	mov	r0, r4
   23044:	bl	22a6c <__assert_fail@plt+0xfeb0>
   23048:	cmp	r0, #0
   2304c:	bne	23078 <__assert_fail@plt+0x104bc>
   23050:	ldr	r0, [r4, #36]	; 0x24
   23054:	cmp	r0, #0
   23058:	beq	23070 <__assert_fail@plt+0x104b4>
   2305c:	ldr	r6, [r0, #4]
   23060:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   23064:	cmp	r6, #0
   23068:	mov	r0, r6
   2306c:	bne	2305c <__assert_fail@plt+0x104a0>
   23070:	mov	r0, #0
   23074:	str	r0, [r4, #36]	; 0x24
   23078:	mov	r0, r5
   2307c:	sub	sp, fp, #16
   23080:	pop	{r4, r5, r6, sl, fp, pc}
   23084:	b	22f78 <__assert_fail@plt+0x103bc>
   23088:	push	{r4, r5, fp, lr}
   2308c:	add	fp, sp, #8
   23090:	cmp	r0, #10
   23094:	movls	r0, #10
   23098:	orr	r5, r0, #1
   2309c:	mvn	r4, #0
   230a0:	cmn	r5, #1
   230a4:	bne	230bc <__assert_fail@plt+0x10500>
   230a8:	mov	r0, r4
   230ac:	pop	{r4, r5, fp, pc}
   230b0:	add	r5, r5, #2
   230b4:	cmn	r5, #1
   230b8:	beq	230a8 <__assert_fail@plt+0x104ec>
   230bc:	mov	r0, r5
   230c0:	bl	230d8 <__assert_fail@plt+0x1051c>
   230c4:	cmp	r0, #0
   230c8:	beq	230b0 <__assert_fail@plt+0x104f4>
   230cc:	mov	r4, r5
   230d0:	mov	r0, r4
   230d4:	pop	{r4, r5, fp, pc}
   230d8:	mov	ip, #3
   230dc:	cmp	r0, #10
   230e0:	bcc	23114 <__assert_fail@plt+0x10558>
   230e4:	mov	ip, #3
   230e8:	mov	r2, #9
   230ec:	mov	r3, #16
   230f0:	udiv	r1, r0, ip
   230f4:	mls	r1, r1, ip, r0
   230f8:	cmp	r1, #0
   230fc:	beq	23114 <__assert_fail@plt+0x10558>
   23100:	add	r2, r3, r2
   23104:	add	r3, r3, #8
   23108:	add	ip, ip, #2
   2310c:	cmp	r2, r0
   23110:	bcc	230f0 <__assert_fail@plt+0x10534>
   23114:	udiv	r1, r0, ip
   23118:	mls	r0, r1, ip, r0
   2311c:	cmp	r0, #0
   23120:	movwne	r0, #1
   23124:	bx	lr
   23128:	mov	r2, #0
   2312c:	str	r2, [r1]
   23130:	ldr	r2, [r0, #36]	; 0x24
   23134:	str	r2, [r1, #4]
   23138:	str	r1, [r0, #36]	; 0x24
   2313c:	bx	lr
   23140:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23144:	add	fp, sp, #28
   23148:	sub	sp, sp, #4
   2314c:	vpush	{d8-d9}
   23150:	sub	sp, sp, #48	; 0x30
   23154:	mov	r5, r3
   23158:	mov	r7, r2
   2315c:	str	r1, [sp, #44]	; 0x2c
   23160:	str	r0, [sp, #40]	; 0x28
   23164:	bl	12a54 <localeconv@plt>
   23168:	mov	r4, r0
   2316c:	ldr	r6, [r0]
   23170:	mov	r0, r6
   23174:	bl	1288c <strlen@plt>
   23178:	sub	r1, r0, #1
   2317c:	movw	r2, #64308	; 0xfb34
   23180:	movt	r2, #3
   23184:	cmp	r1, #16
   23188:	movcc	r2, r6
   2318c:	str	r2, [sp, #4]
   23190:	movcs	r0, #1
   23194:	str	r0, [sp, #8]
   23198:	ldr	r6, [r4, #4]
   2319c:	ldr	r4, [r4, #8]
   231a0:	mov	r0, r6
   231a4:	bl	1288c <strlen@plt>
   231a8:	movw	r1, #2143	; 0x85f
   231ac:	movt	r1, #4
   231b0:	cmp	r0, #17
   231b4:	movcc	r1, r6
   231b8:	movw	r0, #647	; 0x287
   231bc:	str	r7, [sp, #28]
   231c0:	add	r0, r7, r0
   231c4:	str	r0, [sp, #32]
   231c8:	ands	r0, r5, #32
   231cc:	str	r0, [sp, #20]
   231d0:	mov	r6, #1000	; 0x3e8
   231d4:	movwne	r6, #1024	; 0x400
   231d8:	and	r7, r5, #3
   231dc:	ldr	r3, [fp, #20]
   231e0:	ldr	r2, [fp, #16]
   231e4:	ldr	r8, [fp, #12]
   231e8:	ldr	sl, [fp, #8]
   231ec:	subs	r0, sl, r2
   231f0:	sbcs	r0, r8, r3
   231f4:	str	r5, [sp, #36]	; 0x24
   231f8:	str	r4, [sp, #16]
   231fc:	str	r1, [sp, #12]
   23200:	str	r7, [sp, #24]
   23204:	bcs	23300 <__assert_fail@plt+0x10744>
   23208:	orrs	r0, sl, r8
   2320c:	beq	233f4 <__assert_fail@plt+0x10838>
   23210:	mov	r0, r2
   23214:	mov	r1, r3
   23218:	mov	r2, sl
   2321c:	mov	r3, r8
   23220:	bl	3e6b0 <__assert_fail@plt+0x2baf4>
   23224:	ldr	r2, [fp, #16]
   23228:	ldr	r3, [fp, #20]
   2322c:	mov	r5, r0
   23230:	mov	r7, r1
   23234:	umull	r0, r1, r0, sl
   23238:	mla	r1, r5, r8, r1
   2323c:	mla	r1, r7, sl, r1
   23240:	subs	r0, r2, r0
   23244:	sbc	r1, r3, r1
   23248:	orrs	r0, r0, r1
   2324c:	bne	233f4 <__assert_fail@plt+0x10838>
   23250:	ldr	sl, [sp, #40]	; 0x28
   23254:	mov	r0, sl
   23258:	ldr	r4, [sp, #44]	; 0x2c
   2325c:	mov	r1, r4
   23260:	mov	r2, r5
   23264:	mov	r3, r7
   23268:	mov	r8, r7
   2326c:	bl	3e6b0 <__assert_fail@plt+0x2baf4>
   23270:	mov	r9, r0
   23274:	mov	r7, r1
   23278:	umull	r0, r1, r0, r5
   2327c:	mla	r1, r9, r8, r1
   23280:	mla	r1, r7, r5, r1
   23284:	subs	r0, sl, r0
   23288:	sbc	r1, r4, r1
   2328c:	add	r1, r1, r1, lsl #2
   23290:	mov	r2, #10
   23294:	umull	r0, r2, r0, r2
   23298:	str	r0, [sp, #44]	; 0x2c
   2329c:	add	sl, r2, r1, lsl #1
   232a0:	mov	r1, sl
   232a4:	mov	r2, r5
   232a8:	mov	r3, r8
   232ac:	bl	3e6b0 <__assert_fail@plt+0x2baf4>
   232b0:	mov	r4, r0
   232b4:	umull	r0, r2, r0, r5
   232b8:	mla	r2, r4, r8, r2
   232bc:	mla	r1, r1, r5, r2
   232c0:	ldr	r2, [sp, #44]	; 0x2c
   232c4:	subs	r0, r2, r0
   232c8:	sbc	r1, sl, r1
   232cc:	lsl	r1, r1, #1
   232d0:	orr	r1, r1, r0, lsr #31
   232d4:	mov	r2, #2
   232d8:	subs	r3, r5, r0, lsl #1
   232dc:	sbcs	r3, r8, r1
   232e0:	movwcc	r2, #3
   232e4:	orr	sl, r1, r0, lsl #1
   232e8:	cmp	sl, #0
   232ec:	movwne	sl, #1
   232f0:	rsbs	r0, r5, r0, lsl #1
   232f4:	sbcs	r0, r1, r8
   232f8:	movcs	sl, r2
   232fc:	b	23388 <__assert_fail@plt+0x107cc>
   23300:	mov	r0, sl
   23304:	mov	r1, r8
   23308:	bl	3e6b0 <__assert_fail@plt+0x2baf4>
   2330c:	ldr	r2, [fp, #16]
   23310:	ldr	r3, [fp, #20]
   23314:	mov	r4, r0
   23318:	mov	r5, r1
   2331c:	umull	r0, r1, r0, r2
   23320:	mla	r1, r4, r3, r1
   23324:	mla	r1, r5, r2, r1
   23328:	subs	r0, sl, r0
   2332c:	sbc	r1, r8, r1
   23330:	orrs	r0, r0, r1
   23334:	bne	233f4 <__assert_fail@plt+0x10838>
   23338:	ldr	r1, [sp, #40]	; 0x28
   2333c:	umull	r9, r0, r4, r1
   23340:	ldr	r2, [sp, #44]	; 0x2c
   23344:	mla	r0, r4, r2, r0
   23348:	mla	r7, r5, r1, r0
   2334c:	mov	r0, r9
   23350:	mov	r1, r7
   23354:	mov	r2, r4
   23358:	mov	r3, r5
   2335c:	bl	3e6b0 <__assert_fail@plt+0x2baf4>
   23360:	ldr	r2, [fp, #16]
   23364:	ldr	r3, [fp, #20]
   23368:	ldr	r5, [sp, #44]	; 0x2c
   2336c:	eor	r1, r1, r5
   23370:	ldr	r5, [sp, #40]	; 0x28
   23374:	eor	r0, r0, r5
   23378:	orrs	r0, r0, r1
   2337c:	bne	233f4 <__assert_fail@plt+0x10838>
   23380:	mov	sl, #0
   23384:	mov	r4, #0
   23388:	ldr	r0, [sp, #36]	; 0x24
   2338c:	ands	ip, r0, #16
   23390:	mvn	r5, #0
   23394:	beq	233a8 <__assert_fail@plt+0x107ec>
   23398:	mov	r5, #0
   2339c:	subs	r0, r9, r6
   233a0:	sbcs	r0, r7, #0
   233a4:	bcs	235f4 <__assert_fail@plt+0x10a38>
   233a8:	ldr	r3, [sp, #32]
   233ac:	mov	r8, r9
   233b0:	ldr	r9, [sp, #24]
   233b4:	cmp	r9, #0
   233b8:	beq	23748 <__assert_fail@plt+0x10b8c>
   233bc:	cmp	r9, #1
   233c0:	bne	235e8 <__assert_fail@plt+0x10a2c>
   233c4:	mov	r0, #0
   233c8:	rsbs	r1, sl, #0
   233cc:	sbc	r0, r0, #0
   233d0:	and	r2, r8, #1
   233d4:	eor	r1, r2, r1
   233d8:	orrs	r0, r1, r0
   233dc:	addne	r4, r4, #1
   233e0:	cmp	r4, #5
   233e4:	ldr	r9, [sp, #32]
   233e8:	ldr	sl, [sp, #28]
   233ec:	bgt	2375c <__assert_fail@plt+0x10ba0>
   233f0:	b	237b8 <__assert_fail@plt+0x10bfc>
   233f4:	mov	r0, r2
   233f8:	mov	r1, r3
   233fc:	bl	3e568 <__assert_fail@plt+0x2b9ac>
   23400:	vmov	d8, r0, r1
   23404:	ldr	r0, [sp, #40]	; 0x28
   23408:	ldr	r1, [sp, #44]	; 0x2c
   2340c:	bl	3e568 <__assert_fail@plt+0x2b9ac>
   23410:	mov	r5, r0
   23414:	mov	r7, r1
   23418:	mov	r0, sl
   2341c:	mov	r1, r8
   23420:	bl	3e568 <__assert_fail@plt+0x2b9ac>
   23424:	vmov	d16, r0, r1
   23428:	vmov	d17, r5, r7
   2342c:	vdiv.f64	d16, d16, d8
   23430:	vmul.f64	d0, d16, d17
   23434:	ldr	r8, [sp, #36]	; 0x24
   23438:	tst	r8, #16
   2343c:	bne	2347c <__assert_fail@plt+0x108c0>
   23440:	ldr	r0, [sp, #24]
   23444:	bl	238c8 <__assert_fail@plt+0x10d0c>
   23448:	vmov	r2, r3, d0
   2344c:	movw	r1, #13476	; 0x34a4
   23450:	movt	r1, #4
   23454:	ldr	sl, [sp, #28]
   23458:	mov	r0, sl
   2345c:	bl	12a60 <sprintf@plt>
   23460:	mov	r0, sl
   23464:	bl	1288c <strlen@plt>
   23468:	mov	r2, r0
   2346c:	mov	r7, #0
   23470:	mvn	r5, #0
   23474:	ldr	r9, [sp, #32]
   23478:	b	2355c <__assert_fail@plt+0x109a0>
   2347c:	vmov.f64	d16, #112	; 0x3f800000  1.0
   23480:	vmov	s2, r6
   23484:	vcvt.f64.u32	d17, s2
   23488:	mov	r5, #0
   2348c:	vmul.f64	d16, d16, d17
   23490:	add	r5, r5, #1
   23494:	cmp	r5, #7
   23498:	vmulls.f64	d18, d16, d17
   2349c:	vcmpels.f64	d18, d0
   234a0:	vmrsls	APSR_nzcv, fpscr
   234a4:	bls	2348c <__assert_fail@plt+0x108d0>
   234a8:	vdiv.f64	d8, d0, d16
   234ac:	ldr	r9, [sp, #24]
   234b0:	mov	r0, r9
   234b4:	vmov.f64	d0, d8
   234b8:	bl	238c8 <__assert_fail@plt+0x10d0c>
   234bc:	vmov	r2, r3, d0
   234c0:	movw	r1, #13482	; 0x34aa
   234c4:	movt	r1, #4
   234c8:	ldr	sl, [sp, #28]
   234cc:	mov	r0, sl
   234d0:	bl	12a60 <sprintf@plt>
   234d4:	mov	r0, #3
   234d8:	ldr	r1, [sp, #20]
   234dc:	cmp	r1, #0
   234e0:	movwne	r0, #2
   234e4:	ldr	r7, [sp, #8]
   234e8:	add	r4, r0, r7
   234ec:	mov	r0, sl
   234f0:	bl	1288c <strlen@plt>
   234f4:	cmp	r4, r0
   234f8:	ldr	r4, [sp, #32]
   234fc:	bcc	23520 <__assert_fail@plt+0x10964>
   23500:	mov	r2, r0
   23504:	add	r7, r7, #1
   23508:	tst	r8, #8
   2350c:	beq	23558 <__assert_fail@plt+0x1099c>
   23510:	add	r0, sl, r2
   23514:	ldrb	r0, [r0, #-1]
   23518:	cmp	r0, #48	; 0x30
   2351c:	bne	23558 <__assert_fail@plt+0x1099c>
   23520:	vmov.f64	d9, #36	; 0x41200000  10.0
   23524:	vmul.f64	d0, d8, d9
   23528:	mov	r0, r9
   2352c:	bl	238c8 <__assert_fail@plt+0x10d0c>
   23530:	vdiv.f64	d16, d0, d9
   23534:	vmov	r2, r3, d16
   23538:	movw	r1, #13476	; 0x34a4
   2353c:	movt	r1, #4
   23540:	mov	r0, sl
   23544:	bl	12a60 <sprintf@plt>
   23548:	mov	r0, sl
   2354c:	bl	1288c <strlen@plt>
   23550:	mov	r2, r0
   23554:	mov	r7, #0
   23558:	mov	r9, r4
   2355c:	sub	r4, r9, r2
   23560:	mov	r0, r4
   23564:	mov	r1, sl
   23568:	bl	1255c <memmove@plt>
   2356c:	sub	r0, r9, r7
   23570:	tst	r8, #4
   23574:	beq	23590 <__assert_fail@plt+0x109d4>
   23578:	sub	r1, r0, r4
   2357c:	mov	r0, r4
   23580:	ldr	r2, [sp, #16]
   23584:	ldr	r3, [sp, #12]
   23588:	bl	23950 <__assert_fail@plt+0x10d94>
   2358c:	mov	r4, r0
   23590:	ldr	r3, [fp, #20]
   23594:	ldr	r7, [fp, #16]
   23598:	tst	r8, #128	; 0x80
   2359c:	beq	23718 <__assert_fail@plt+0x10b5c>
   235a0:	cmn	r5, #1
   235a4:	bgt	236b0 <__assert_fail@plt+0x10af4>
   235a8:	mov	r5, #0
   235ac:	subs	r0, r7, #2
   235b0:	sbcs	r0, r3, #0
   235b4:	bcc	236b0 <__assert_fail@plt+0x10af4>
   235b8:	mov	r0, #0
   235bc:	mov	r1, #1
   235c0:	mov	r5, #0
   235c4:	cmp	r5, #7
   235c8:	beq	236ac <__assert_fail@plt+0x10af0>
   235cc:	add	r5, r5, #1
   235d0:	umull	r1, r2, r1, r6
   235d4:	mla	r0, r0, r6, r2
   235d8:	subs	r2, r1, r7
   235dc:	sbcs	r2, r0, r3
   235e0:	bcc	235c4 <__assert_fail@plt+0x10a08>
   235e4:	b	236b0 <__assert_fail@plt+0x10af4>
   235e8:	ldr	r9, [sp, #32]
   235ec:	ldr	sl, [sp, #28]
   235f0:	b	237b8 <__assert_fail@plt+0x10bfc>
   235f4:	str	ip, [sp, #44]	; 0x2c
   235f8:	mov	r5, #0
   235fc:	mov	r0, r9
   23600:	mov	r1, r7
   23604:	mov	r2, r6
   23608:	mov	r3, #0
   2360c:	bl	3e6b0 <__assert_fail@plt+0x2baf4>
   23610:	mov	r8, r0
   23614:	mov	r7, r1
   23618:	mls	r0, r0, r6, r9
   2361c:	add	r0, r0, r0, lsl #2
   23620:	add	r0, r4, r0, lsl #1
   23624:	udiv	r4, r0, r6
   23628:	mls	r0, r4, r6, r0
   2362c:	lsl	r0, r0, #1
   23630:	add	r0, r0, sl, lsr #1
   23634:	cmp	r0, r6
   23638:	bcs	23650 <__assert_fail@plt+0x10a94>
   2363c:	add	r1, r0, sl
   23640:	cmn	r0, sl
   23644:	movwne	r1, #1
   23648:	mov	sl, r1
   2364c:	b	23660 <__assert_fail@plt+0x10aa4>
   23650:	add	r0, r0, sl
   23654:	cmp	r6, r0
   23658:	mov	sl, #2
   2365c:	movwcc	sl, #3
   23660:	add	r5, r5, #1
   23664:	cmp	r5, #7
   23668:	bhi	2367c <__assert_fail@plt+0x10ac0>
   2366c:	subs	r0, r8, r6
   23670:	sbcs	r0, r7, #0
   23674:	mov	r9, r8
   23678:	bcs	235fc <__assert_fail@plt+0x10a40>
   2367c:	rsbs	r0, r8, #9
   23680:	rscs	r0, r7, #0
   23684:	bcc	23734 <__assert_fail@plt+0x10b78>
   23688:	ldr	r9, [sp, #24]
   2368c:	cmp	r9, #1
   23690:	ldr	ip, [sp, #44]	; 0x2c
   23694:	bne	2380c <__assert_fail@plt+0x10c50>
   23698:	and	r0, r4, #1
   2369c:	add	r0, sl, r0
   236a0:	cmp	r0, #2
   236a4:	bhi	2381c <__assert_fail@plt+0x10c60>
   236a8:	b	23850 <__assert_fail@plt+0x10c94>
   236ac:	mov	r5, #8
   236b0:	and	r0, r8, #256	; 0x100
   236b4:	tst	r8, #64	; 0x40
   236b8:	orrsne	r1, r5, r0
   236bc:	movne	r1, #32
   236c0:	strbne	r1, [sl, #647]	; 0x287
   236c4:	addne	r9, sl, #648	; 0x288
   236c8:	cmp	r5, #0
   236cc:	beq	236f4 <__assert_fail@plt+0x10b38>
   236d0:	ldr	r1, [sp, #20]
   236d4:	cmp	r1, #0
   236d8:	moveq	r1, #107	; 0x6b
   236dc:	cmpeq	r5, #1
   236e0:	beq	236f0 <__assert_fail@plt+0x10b34>
   236e4:	movw	r1, #13536	; 0x34e0
   236e8:	movt	r1, #4
   236ec:	ldrb	r1, [r1, r5]
   236f0:	strb	r1, [r9], #1
   236f4:	cmp	r0, #0
   236f8:	beq	23718 <__assert_fail@plt+0x10b5c>
   236fc:	ldr	r0, [sp, #20]
   23700:	cmp	r0, #0
   23704:	cmpne	r5, #0
   23708:	movne	r0, #105	; 0x69
   2370c:	strbne	r0, [r9], #1
   23710:	mov	r0, #66	; 0x42
   23714:	strb	r0, [r9], #1
   23718:	mov	r0, #0
   2371c:	strb	r0, [r9]
   23720:	mov	r0, r4
   23724:	sub	sp, fp, #48	; 0x30
   23728:	vpop	{d8-d9}
   2372c:	add	sp, sp, #4
   23730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23734:	ldr	r3, [sp, #32]
   23738:	ldr	r9, [sp, #24]
   2373c:	ldr	ip, [sp, #44]	; 0x2c
   23740:	cmp	r9, #0
   23744:	bne	233bc <__assert_fail@plt+0x10800>
   23748:	add	r0, r4, sl
   2374c:	cmp	r0, #1
   23750:	ldr	r9, [sp, #32]
   23754:	ldr	sl, [sp, #28]
   23758:	blt	237b8 <__assert_fail@plt+0x10bfc>
   2375c:	adds	r8, r8, #1
   23760:	adc	r7, r7, #0
   23764:	cmp	r5, #7
   23768:	bgt	237b8 <__assert_fail@plt+0x10bfc>
   2376c:	cmp	ip, #0
   23770:	beq	237b8 <__assert_fail@plt+0x10bfc>
   23774:	eor	r0, r8, r6
   23778:	orrs	r0, r0, r7
   2377c:	addeq	r5, r5, #1
   23780:	moveq	r7, #0
   23784:	moveq	r8, #1
   23788:	ldreq	r0, [sp, #36]	; 0x24
   2378c:	tsteq	r0, #8
   23790:	bne	237b8 <__assert_fail@plt+0x10bfc>
   23794:	mov	r0, #48	; 0x30
   23798:	strb	r0, [r3, #-1]!
   2379c:	ldr	r2, [sp, #8]
   237a0:	sub	r3, r3, r2
   237a4:	mov	r0, r3
   237a8:	ldr	r1, [sp, #4]
   237ac:	mov	r4, r3
   237b0:	bl	125c8 <memcpy@plt>
   237b4:	mov	r3, r4
   237b8:	str	r3, [sp, #44]	; 0x2c
   237bc:	mov	r4, r3
   237c0:	mov	r0, r8
   237c4:	mov	r1, r7
   237c8:	mov	r2, #10
   237cc:	mov	r3, #0
   237d0:	bl	3e6b0 <__assert_fail@plt+0x2baf4>
   237d4:	add	r2, r0, r0, lsl #2
   237d8:	sub	r2, r8, r2, lsl #1
   237dc:	orr	r2, r2, #48	; 0x30
   237e0:	strb	r2, [r4, #-1]!
   237e4:	rsbs	r2, r8, #9
   237e8:	rscs	r2, r7, #0
   237ec:	mov	r8, r0
   237f0:	mov	r7, r1
   237f4:	bcc	237c0 <__assert_fail@plt+0x10c04>
   237f8:	ldr	r8, [sp, #36]	; 0x24
   237fc:	ldr	r0, [sp, #44]	; 0x2c
   23800:	tst	r8, #4
   23804:	bne	23578 <__assert_fail@plt+0x109bc>
   23808:	b	23590 <__assert_fail@plt+0x109d4>
   2380c:	cmp	r9, #0
   23810:	bne	23850 <__assert_fail@plt+0x10c94>
   23814:	cmp	sl, #0
   23818:	beq	23850 <__assert_fail@plt+0x10c94>
   2381c:	adds	r0, r8, #1
   23820:	adc	r1, r7, #0
   23824:	add	r4, r4, #1
   23828:	mov	sl, #0
   2382c:	cmp	r4, #10
   23830:	bne	23850 <__assert_fail@plt+0x10c94>
   23834:	mov	r4, #0
   23838:	rsbs	r2, r0, #9
   2383c:	rscs	r2, r1, #0
   23840:	mov	r8, r0
   23844:	mov	r7, r1
   23848:	mov	sl, #0
   2384c:	bcc	238a8 <__assert_fail@plt+0x10cec>
   23850:	ldr	r0, [sp, #36]	; 0x24
   23854:	tst	r0, #8
   23858:	beq	2386c <__assert_fail@plt+0x10cb0>
   2385c:	cmp	r4, #0
   23860:	bne	2386c <__assert_fail@plt+0x10cb0>
   23864:	ldr	r3, [sp, #32]
   23868:	b	23898 <__assert_fail@plt+0x10cdc>
   2386c:	add	r0, r4, #48	; 0x30
   23870:	ldr	r1, [sp, #28]
   23874:	strb	r0, [r1, #646]!	; 0x286
   23878:	ldr	r2, [sp, #8]
   2387c:	sub	r4, r1, r2
   23880:	mov	r0, r4
   23884:	ldr	r1, [sp, #4]
   23888:	bl	125c8 <memcpy@plt>
   2388c:	mov	r3, r4
   23890:	ldr	ip, [sp, #44]	; 0x2c
   23894:	mov	sl, #0
   23898:	mov	r4, #0
   2389c:	cmp	r9, #0
   238a0:	bne	233bc <__assert_fail@plt+0x10800>
   238a4:	b	23748 <__assert_fail@plt+0x10b8c>
   238a8:	mov	sl, #0
   238ac:	ldr	r3, [sp, #32]
   238b0:	mov	r8, #10
   238b4:	mov	r7, #0
   238b8:	cmp	r9, #0
   238bc:	bne	233bc <__assert_fail@plt+0x10800>
   238c0:	b	23748 <__assert_fail@plt+0x10b8c>
   238c4:	nop	{0}
   238c8:	push	{r4, r5, r6, sl, fp, lr}
   238cc:	add	fp, sp, #16
   238d0:	vpush	{d8}
   238d4:	vmov.f64	d8, d0
   238d8:	cmp	r0, #1
   238dc:	beq	23938 <__assert_fail@plt+0x10d7c>
   238e0:	vldr	d16, [pc, #96]	; 23948 <__assert_fail@plt+0x10d8c>
   238e4:	vcmpe.f64	d8, d16
   238e8:	vmrs	APSR_nzcv, fpscr
   238ec:	bpl	23938 <__assert_fail@plt+0x10d7c>
   238f0:	mov	r4, r0
   238f4:	vmov	r0, r1, d8
   238f8:	bl	3e700 <__assert_fail@plt+0x2bb44>
   238fc:	mov	r5, r0
   23900:	mov	r6, r1
   23904:	bl	3e568 <__assert_fail@plt+0x2b9ac>
   23908:	mov	r2, #0
   2390c:	vmov	d16, r0, r1
   23910:	vcmp.f64	d16, d8
   23914:	vmrs	APSR_nzcv, fpscr
   23918:	movwne	r2, #1
   2391c:	clz	r0, r4
   23920:	lsr	r0, r0, #5
   23924:	and	r0, r0, r2
   23928:	adds	r0, r0, r5
   2392c:	adc	r1, r6, #0
   23930:	bl	3e568 <__assert_fail@plt+0x2b9ac>
   23934:	vmov	d8, r0, r1
   23938:	vorr	d0, d8, d8
   2393c:	vpop	{d8}
   23940:	pop	{r4, r5, r6, sl, fp, pc}
   23944:	nop	{0}
   23948:	andeq	r0, r0, r0
   2394c:	mvnsmi	r0, #0
   23950:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23954:	add	fp, sp, #28
   23958:	sub	sp, sp, #52	; 0x34
   2395c:	mov	r5, r3
   23960:	mov	r9, r2
   23964:	mov	r6, r1
   23968:	mov	r4, r0
   2396c:	mov	r0, r3
   23970:	bl	1288c <strlen@plt>
   23974:	str	r0, [sp, #4]
   23978:	add	sl, sp, #8
   2397c:	mov	r0, sl
   23980:	mov	r1, r4
   23984:	mov	r2, r6
   23988:	bl	125c8 <memcpy@plt>
   2398c:	add	r0, r4, r6
   23990:	ldrb	r7, [r9]
   23994:	cmp	r7, #255	; 0xff
   23998:	mov	r8, r7
   2399c:	moveq	r8, r6
   239a0:	cmp	r7, #0
   239a4:	mvneq	r8, #0
   239a8:	cmp	r8, r6
   239ac:	movhi	r8, r6
   239b0:	sub	r4, r0, r8
   239b4:	sub	r6, r6, r8
   239b8:	add	r1, sl, r6
   239bc:	mov	r0, r4
   239c0:	mov	r2, r8
   239c4:	bl	125c8 <memcpy@plt>
   239c8:	cmp	r6, #0
   239cc:	beq	23a5c <__assert_fail@plt+0x10ea0>
   239d0:	clz	r0, r7
   239d4:	lsr	sl, r0, #5
   239d8:	ldr	r0, [sp, #4]
   239dc:	rsb	r0, r0, #0
   239e0:	str	r0, [sp]
   239e4:	ldr	r0, [sp]
   239e8:	add	r4, r4, r0
   239ec:	mov	r0, r4
   239f0:	mov	r1, r5
   239f4:	ldr	r2, [sp, #4]
   239f8:	bl	125c8 <memcpy@plt>
   239fc:	tst	sl, #1
   23a00:	addeq	r9, r9, #1
   23a04:	mov	sl, r5
   23a08:	ldrb	r5, [r9]
   23a0c:	cmp	r5, #255	; 0xff
   23a10:	mov	r7, r5
   23a14:	moveq	r7, r6
   23a18:	cmp	r5, #0
   23a1c:	moveq	r7, r8
   23a20:	cmp	r6, r7
   23a24:	movcc	r7, r6
   23a28:	sub	r4, r4, r7
   23a2c:	sub	r6, r6, r7
   23a30:	add	r0, sp, #8
   23a34:	add	r1, r0, r6
   23a38:	mov	r0, r4
   23a3c:	mov	r2, r7
   23a40:	bl	125c8 <memcpy@plt>
   23a44:	clz	r0, r5
   23a48:	mov	r5, sl
   23a4c:	lsr	sl, r0, #5
   23a50:	cmp	r6, #0
   23a54:	mov	r8, r7
   23a58:	bne	239e4 <__assert_fail@plt+0x10e28>
   23a5c:	mov	r0, r4
   23a60:	sub	sp, fp, #28
   23a64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23a68:	push	{r4, sl, fp, lr}
   23a6c:	add	fp, sp, #8
   23a70:	mov	r4, r2
   23a74:	mov	r2, r1
   23a78:	mov	r1, r4
   23a7c:	bl	23a9c <__assert_fail@plt+0x10ee0>
   23a80:	ldrd	r2, [r4]
   23a84:	orrs	r1, r2, r3
   23a88:	popne	{r4, sl, fp, pc}
   23a8c:	bl	23c08 <__assert_fail@plt+0x1104c>
   23a90:	strd	r0, [r4]
   23a94:	mov	r0, #4
   23a98:	pop	{r4, sl, fp, pc}
   23a9c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23aa0:	add	fp, sp, #24
   23aa4:	sub	sp, sp, #8
   23aa8:	mov	r8, r2
   23aac:	mov	r5, r1
   23ab0:	cmp	r0, #0
   23ab4:	bne	23ae0 <__assert_fail@plt+0x10f24>
   23ab8:	movw	r0, #2570	; 0xa0a
   23abc:	movt	r0, #4
   23ac0:	bl	127cc <getenv@plt>
   23ac4:	cmp	r0, #0
   23ac8:	bne	23ae0 <__assert_fail@plt+0x10f24>
   23acc:	movw	r0, #13488	; 0x34b0
   23ad0:	movt	r0, #4
   23ad4:	bl	127cc <getenv@plt>
   23ad8:	cmp	r0, #0
   23adc:	beq	23bf0 <__assert_fail@plt+0x11034>
   23ae0:	mov	r6, r0
   23ae4:	ldrb	r4, [r6], #1
   23ae8:	cmp	r4, #39	; 0x27
   23aec:	movne	r6, r0
   23af0:	movw	r1, #13548	; 0x34ec
   23af4:	movt	r1, #4
   23af8:	movw	r7, #13560	; 0x34f8
   23afc:	movt	r7, #4
   23b00:	mov	r0, r6
   23b04:	mov	r2, r7
   23b08:	mov	r3, #4
   23b0c:	bl	3d18c <__assert_fail@plt+0x2a5d0>
   23b10:	sub	r1, r4, #39	; 0x27
   23b14:	clz	r1, r1
   23b18:	lsr	r1, r1, #5
   23b1c:	lsl	r4, r1, #2
   23b20:	cmp	r0, #0
   23b24:	blt	23b44 <__assert_fail@plt+0x10f88>
   23b28:	mov	r1, #0
   23b2c:	mov	r2, #1
   23b30:	str	r2, [r5]
   23b34:	str	r1, [r5, #4]
   23b38:	ldr	r0, [r7, r0, lsl #2]
   23b3c:	orr	r0, r0, r4
   23b40:	b	23bb8 <__assert_fail@plt+0x10ffc>
   23b44:	movw	r0, #13498	; 0x34ba
   23b48:	movt	r0, #4
   23b4c:	str	r0, [sp]
   23b50:	add	r1, sp, #4
   23b54:	mov	r7, #0
   23b58:	mov	r0, r6
   23b5c:	mov	r2, #0
   23b60:	mov	r3, r5
   23b64:	bl	2bf1c <__assert_fail@plt+0x19360>
   23b68:	cmp	r0, #0
   23b6c:	strne	r7, [r8]
   23b70:	subne	sp, fp, #24
   23b74:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   23b78:	ldrb	r0, [r6]
   23b7c:	sub	r0, r0, #48	; 0x30
   23b80:	uxtb	r0, r0
   23b84:	cmp	r0, #10
   23b88:	bcc	23bb4 <__assert_fail@plt+0x10ff8>
   23b8c:	ldr	r1, [sp, #4]
   23b90:	cmp	r1, r6
   23b94:	beq	23bc8 <__assert_fail@plt+0x1100c>
   23b98:	add	r0, r6, #1
   23b9c:	ldrb	r2, [r6, #1]
   23ba0:	sub	r2, r2, #48	; 0x30
   23ba4:	uxtb	r2, r2
   23ba8:	cmp	r2, #10
   23bac:	mov	r6, r0
   23bb0:	bcs	23b90 <__assert_fail@plt+0x10fd4>
   23bb4:	mov	r0, r4
   23bb8:	str	r0, [r8]
   23bbc:	mov	r0, #0
   23bc0:	sub	sp, fp, #24
   23bc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23bc8:	ldrb	r2, [r1, #-1]
   23bcc:	orr	r0, r4, #384	; 0x180
   23bd0:	cmp	r2, #66	; 0x42
   23bd4:	mov	r2, r0
   23bd8:	orrne	r2, r4, #128	; 0x80
   23bdc:	bne	23c00 <__assert_fail@plt+0x11044>
   23be0:	ldrb	r1, [r1, #-2]
   23be4:	cmp	r1, #105	; 0x69
   23be8:	orreq	r0, r2, #32
   23bec:	b	23bb8 <__assert_fail@plt+0x10ffc>
   23bf0:	bl	23c08 <__assert_fail@plt+0x1104c>
   23bf4:	strd	r0, [r5]
   23bf8:	mov	r0, #0
   23bfc:	b	23bb8 <__assert_fail@plt+0x10ffc>
   23c00:	orr	r0, r2, #32
   23c04:	b	23bb8 <__assert_fail@plt+0x10ffc>
   23c08:	push	{fp, lr}
   23c0c:	mov	fp, sp
   23c10:	movw	r0, #2549	; 0x9f5
   23c14:	movt	r0, #4
   23c18:	bl	127cc <getenv@plt>
   23c1c:	mov	r1, #512	; 0x200
   23c20:	cmp	r0, #0
   23c24:	movweq	r1, #1024	; 0x400
   23c28:	mov	r0, r1
   23c2c:	mov	r1, #0
   23c30:	pop	{fp, pc}
   23c34:	push	{r4, r5, r6, r7, fp, lr}
   23c38:	add	fp, sp, #16
   23c3c:	mov	r4, r0
   23c40:	movw	r7, #23820	; 0x5d0c
   23c44:	movt	r7, #5
   23c48:	ldr	r5, [r7]
   23c4c:	cmp	r5, #0
   23c50:	bne	23c64 <__assert_fail@plt+0x110a8>
   23c54:	b	23c74 <__assert_fail@plt+0x110b8>
   23c58:	ldr	r5, [r5, #4]
   23c5c:	cmp	r5, #0
   23c60:	beq	23c74 <__assert_fail@plt+0x110b8>
   23c64:	ldr	r0, [r5]
   23c68:	cmp	r0, r4
   23c6c:	bne	23c58 <__assert_fail@plt+0x1109c>
   23c70:	b	23cc8 <__assert_fail@plt+0x1110c>
   23c74:	mov	r0, r4
   23c78:	bl	124e4 <getpwuid@plt>
   23c7c:	cmp	r0, #0
   23c80:	beq	23c8c <__assert_fail@plt+0x110d0>
   23c84:	ldr	r6, [r0]
   23c88:	b	23c94 <__assert_fail@plt+0x110d8>
   23c8c:	movw	r6, #2143	; 0x85f
   23c90:	movt	r6, #4
   23c94:	mov	r0, r6
   23c98:	bl	1288c <strlen@plt>
   23c9c:	add	r0, r0, #12
   23ca0:	bic	r0, r0, #3
   23ca4:	bl	2b5cc <__assert_fail@plt+0x18a10>
   23ca8:	mov	r5, r0
   23cac:	str	r4, [r0]
   23cb0:	add	r0, r0, #8
   23cb4:	mov	r1, r6
   23cb8:	bl	12748 <strcpy@plt>
   23cbc:	ldr	r0, [r7]
   23cc0:	str	r0, [r5, #4]
   23cc4:	str	r5, [r7]
   23cc8:	ldrb	r0, [r5, #8]!
   23ccc:	cmp	r0, #0
   23cd0:	moveq	r5, r0
   23cd4:	mov	r0, r5
   23cd8:	pop	{r4, r5, r6, r7, fp, pc}
   23cdc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23ce0:	add	fp, sp, #24
   23ce4:	mov	r4, r0
   23ce8:	movw	r8, #23820	; 0x5d0c
   23cec:	movt	r8, #5
   23cf0:	ldr	r5, [r8]
   23cf4:	cmp	r5, #0
   23cf8:	beq	23d2c <__assert_fail@plt+0x11170>
   23cfc:	ldrb	r6, [r4]
   23d00:	mov	r0, r5
   23d04:	ldrb	r1, [r0, #8]!
   23d08:	cmp	r1, r6
   23d0c:	bne	23d20 <__assert_fail@plt+0x11164>
   23d10:	mov	r1, r4
   23d14:	bl	124cc <strcmp@plt>
   23d18:	cmp	r0, #0
   23d1c:	beq	23dd0 <__assert_fail@plt+0x11214>
   23d20:	ldr	r5, [r5, #4]
   23d24:	cmp	r5, #0
   23d28:	bne	23d00 <__assert_fail@plt+0x11144>
   23d2c:	movw	r7, #23824	; 0x5d10
   23d30:	movt	r7, #5
   23d34:	ldr	r5, [r7]
   23d38:	cmp	r5, #0
   23d3c:	beq	23d70 <__assert_fail@plt+0x111b4>
   23d40:	ldrb	r6, [r4]
   23d44:	mov	r0, r5
   23d48:	ldrb	r1, [r0, #8]!
   23d4c:	cmp	r1, r6
   23d50:	bne	23d64 <__assert_fail@plt+0x111a8>
   23d54:	mov	r1, r4
   23d58:	bl	124cc <strcmp@plt>
   23d5c:	cmp	r0, #0
   23d60:	beq	23dcc <__assert_fail@plt+0x11210>
   23d64:	ldr	r5, [r5, #4]
   23d68:	cmp	r5, #0
   23d6c:	bne	23d44 <__assert_fail@plt+0x11188>
   23d70:	mov	r0, r4
   23d74:	bl	124a8 <getpwnam@plt>
   23d78:	mov	r6, r0
   23d7c:	mov	r0, r4
   23d80:	bl	1288c <strlen@plt>
   23d84:	add	r0, r0, #12
   23d88:	bic	r0, r0, #3
   23d8c:	bl	2b5cc <__assert_fail@plt+0x18a10>
   23d90:	mov	r5, r0
   23d94:	add	r0, r0, #8
   23d98:	mov	r1, r4
   23d9c:	bl	12748 <strcpy@plt>
   23da0:	cmp	r6, #0
   23da4:	beq	23dc0 <__assert_fail@plt+0x11204>
   23da8:	ldr	r0, [r6, #8]
   23dac:	ldr	r1, [r8]
   23db0:	stm	r5, {r0, r1}
   23db4:	str	r5, [r8]
   23db8:	mov	r0, r5
   23dbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23dc0:	ldr	r0, [r7]
   23dc4:	str	r0, [r5, #4]
   23dc8:	str	r5, [r7]
   23dcc:	mov	r5, #0
   23dd0:	mov	r0, r5
   23dd4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23dd8:	push	{r4, r5, r6, r7, fp, lr}
   23ddc:	add	fp, sp, #16
   23de0:	mov	r4, r0
   23de4:	movw	r7, #23828	; 0x5d14
   23de8:	movt	r7, #5
   23dec:	ldr	r5, [r7]
   23df0:	cmp	r5, #0
   23df4:	bne	23e08 <__assert_fail@plt+0x1124c>
   23df8:	b	23e18 <__assert_fail@plt+0x1125c>
   23dfc:	ldr	r5, [r5, #4]
   23e00:	cmp	r5, #0
   23e04:	beq	23e18 <__assert_fail@plt+0x1125c>
   23e08:	ldr	r0, [r5]
   23e0c:	cmp	r0, r4
   23e10:	bne	23dfc <__assert_fail@plt+0x11240>
   23e14:	b	23e6c <__assert_fail@plt+0x112b0>
   23e18:	mov	r0, r4
   23e1c:	bl	12b98 <getgrgid@plt>
   23e20:	cmp	r0, #0
   23e24:	beq	23e30 <__assert_fail@plt+0x11274>
   23e28:	ldr	r6, [r0]
   23e2c:	b	23e38 <__assert_fail@plt+0x1127c>
   23e30:	movw	r6, #2143	; 0x85f
   23e34:	movt	r6, #4
   23e38:	mov	r0, r6
   23e3c:	bl	1288c <strlen@plt>
   23e40:	add	r0, r0, #12
   23e44:	bic	r0, r0, #3
   23e48:	bl	2b5cc <__assert_fail@plt+0x18a10>
   23e4c:	mov	r5, r0
   23e50:	str	r4, [r0]
   23e54:	add	r0, r0, #8
   23e58:	mov	r1, r6
   23e5c:	bl	12748 <strcpy@plt>
   23e60:	ldr	r0, [r7]
   23e64:	str	r0, [r5, #4]
   23e68:	str	r5, [r7]
   23e6c:	ldrb	r0, [r5, #8]!
   23e70:	cmp	r0, #0
   23e74:	moveq	r5, r0
   23e78:	mov	r0, r5
   23e7c:	pop	{r4, r5, r6, r7, fp, pc}
   23e80:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23e84:	add	fp, sp, #24
   23e88:	mov	r4, r0
   23e8c:	movw	r8, #23828	; 0x5d14
   23e90:	movt	r8, #5
   23e94:	ldr	r5, [r8]
   23e98:	cmp	r5, #0
   23e9c:	beq	23ed0 <__assert_fail@plt+0x11314>
   23ea0:	ldrb	r6, [r4]
   23ea4:	mov	r0, r5
   23ea8:	ldrb	r1, [r0, #8]!
   23eac:	cmp	r1, r6
   23eb0:	bne	23ec4 <__assert_fail@plt+0x11308>
   23eb4:	mov	r1, r4
   23eb8:	bl	124cc <strcmp@plt>
   23ebc:	cmp	r0, #0
   23ec0:	beq	23f74 <__assert_fail@plt+0x113b8>
   23ec4:	ldr	r5, [r5, #4]
   23ec8:	cmp	r5, #0
   23ecc:	bne	23ea4 <__assert_fail@plt+0x112e8>
   23ed0:	movw	r7, #23832	; 0x5d18
   23ed4:	movt	r7, #5
   23ed8:	ldr	r5, [r7]
   23edc:	cmp	r5, #0
   23ee0:	beq	23f14 <__assert_fail@plt+0x11358>
   23ee4:	ldrb	r6, [r4]
   23ee8:	mov	r0, r5
   23eec:	ldrb	r1, [r0, #8]!
   23ef0:	cmp	r1, r6
   23ef4:	bne	23f08 <__assert_fail@plt+0x1134c>
   23ef8:	mov	r1, r4
   23efc:	bl	124cc <strcmp@plt>
   23f00:	cmp	r0, #0
   23f04:	beq	23f70 <__assert_fail@plt+0x113b4>
   23f08:	ldr	r5, [r5, #4]
   23f0c:	cmp	r5, #0
   23f10:	bne	23ee8 <__assert_fail@plt+0x1132c>
   23f14:	mov	r0, r4
   23f18:	bl	12ba4 <getgrnam@plt>
   23f1c:	mov	r6, r0
   23f20:	mov	r0, r4
   23f24:	bl	1288c <strlen@plt>
   23f28:	add	r0, r0, #12
   23f2c:	bic	r0, r0, #3
   23f30:	bl	2b5cc <__assert_fail@plt+0x18a10>
   23f34:	mov	r5, r0
   23f38:	add	r0, r0, #8
   23f3c:	mov	r1, r4
   23f40:	bl	12748 <strcpy@plt>
   23f44:	cmp	r6, #0
   23f48:	beq	23f64 <__assert_fail@plt+0x113a8>
   23f4c:	ldr	r0, [r6, #8]
   23f50:	ldr	r1, [r8]
   23f54:	stm	r5, {r0, r1}
   23f58:	str	r5, [r8]
   23f5c:	mov	r0, r5
   23f60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23f64:	ldr	r0, [r7]
   23f68:	str	r0, [r5, #4]
   23f6c:	str	r5, [r7]
   23f70:	mov	r5, #0
   23f74:	mov	r0, r5
   23f78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23f7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f80:	add	fp, sp, #28
   23f84:	sub	sp, sp, #300	; 0x12c
   23f88:	mov	r5, r1
   23f8c:	mov	r6, r0
   23f90:	bl	12730 <__ctype_get_mb_cur_max@plt>
   23f94:	cmp	r0, #2
   23f98:	bcc	24328 <__assert_fail@plt+0x1176c>
   23f9c:	mov	r4, #0
   23fa0:	str	r4, [fp, #-80]	; 0xffffffb0
   23fa4:	str	r4, [fp, #-84]	; 0xffffffac
   23fa8:	strb	r4, [fp, #-88]	; 0xffffffa8
   23fac:	str	r5, [fp, #-72]	; 0xffffffb8
   23fb0:	strb	r4, [fp, #-76]	; 0xffffffb4
   23fb4:	sub	r0, fp, #88	; 0x58
   23fb8:	bl	24d44 <__assert_fail@plt+0x12188>
   23fbc:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   23fc0:	cmp	r0, #0
   23fc4:	beq	23fd4 <__assert_fail@plt+0x11418>
   23fc8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   23fcc:	cmp	r0, #0
   23fd0:	beq	24428 <__assert_fail@plt+0x1186c>
   23fd4:	str	r4, [fp, #-136]	; 0xffffff78
   23fd8:	str	r4, [fp, #-140]	; 0xffffff74
   23fdc:	str	r4, [sp, #136]	; 0x88
   23fe0:	str	r4, [sp, #132]	; 0x84
   23fe4:	strb	r4, [fp, #-144]	; 0xffffff70
   23fe8:	str	r5, [fp, #-128]	; 0xffffff80
   23fec:	strb	r4, [fp, #-132]	; 0xffffff7c
   23ff0:	str	r6, [sp, #144]	; 0x90
   23ff4:	strb	r4, [sp, #128]	; 0x80
   23ff8:	strb	r4, [sp, #140]	; 0x8c
   23ffc:	add	r7, sp, #128	; 0x80
   24000:	mov	r0, r7
   24004:	bl	24d44 <__assert_fail@plt+0x12188>
   24008:	ldrb	r0, [sp, #152]	; 0x98
   2400c:	cmp	r0, #0
   24010:	beq	24020 <__assert_fail@plt+0x11464>
   24014:	ldr	r0, [sp, #156]	; 0x9c
   24018:	cmp	r0, #0
   2401c:	beq	24434 <__assert_fail@plt+0x11878>
   24020:	add	r0, sp, #16
   24024:	add	r0, r0, #4
   24028:	str	r0, [sp, #4]
   2402c:	mov	r0, #1
   24030:	str	r0, [sp, #8]
   24034:	mov	r8, #0
   24038:	add	r0, r7, #16
   2403c:	str	r0, [sp]
   24040:	mov	r0, #0
   24044:	str	r0, [sp, #12]
   24048:	mov	sl, #0
   2404c:	mov	r9, #0
   24050:	mov	r4, sl
   24054:	add	r0, r9, r9, lsl #2
   24058:	cmp	sl, r0
   2405c:	bcc	2411c <__assert_fail@plt+0x11560>
   24060:	ldr	r0, [sp, #8]
   24064:	tst	r0, #1
   24068:	beq	2411c <__assert_fail@plt+0x11560>
   2406c:	cmp	r9, #10
   24070:	bcc	2411c <__assert_fail@plt+0x11560>
   24074:	mov	sl, r7
   24078:	ldr	r1, [sp, #12]
   2407c:	subs	r0, r4, r1
   24080:	beq	240c4 <__assert_fail@plt+0x11508>
   24084:	sub	r7, r1, r4
   24088:	sub	r0, fp, #144	; 0x90
   2408c:	bl	24d44 <__assert_fail@plt+0x12188>
   24090:	ldrb	r0, [fp, #-120]	; 0xffffff88
   24094:	cmp	r0, #0
   24098:	beq	240a8 <__assert_fail@plt+0x114ec>
   2409c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   240a0:	cmp	r0, #0
   240a4:	beq	240c4 <__assert_fail@plt+0x11508>
   240a8:	strb	r8, [fp, #-132]	; 0xffffff7c
   240ac:	ldr	r0, [fp, #-128]	; 0xffffff80
   240b0:	ldr	r1, [fp, #-124]	; 0xffffff84
   240b4:	add	r0, r0, r1
   240b8:	str	r0, [fp, #-128]	; 0xffffff80
   240bc:	adds	r7, r7, #1
   240c0:	bne	24088 <__assert_fail@plt+0x114cc>
   240c4:	sub	r0, fp, #144	; 0x90
   240c8:	bl	24d44 <__assert_fail@plt+0x12188>
   240cc:	ldrb	r0, [fp, #-120]	; 0xffffff88
   240d0:	cmp	r0, #0
   240d4:	beq	24114 <__assert_fail@plt+0x11558>
   240d8:	ldr	r0, [fp, #-116]	; 0xffffff8c
   240dc:	cmp	r0, #0
   240e0:	str	r4, [sp, #12]
   240e4:	mov	r7, sl
   240e8:	bne	2411c <__assert_fail@plt+0x11560>
   240ec:	mov	r0, r6
   240f0:	mov	r1, r5
   240f4:	add	r2, sp, #72	; 0x48
   240f8:	bl	2445c <__assert_fail@plt+0x118a0>
   240fc:	mov	r1, #0
   24100:	str	r1, [sp, #8]
   24104:	cmp	r0, #0
   24108:	str	r4, [sp, #12]
   2410c:	beq	2411c <__assert_fail@plt+0x11560>
   24110:	b	24450 <__assert_fail@plt+0x11894>
   24114:	str	r4, [sp, #12]
   24118:	mov	r7, sl
   2411c:	add	sl, r4, #1
   24120:	ldrb	r0, [sp, #152]	; 0x98
   24124:	cmp	r0, #0
   24128:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   2412c:	cmpne	r0, #0
   24130:	bne	2415c <__assert_fail@plt+0x115a0>
   24134:	ldr	r2, [sp, #148]	; 0x94
   24138:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2413c:	cmp	r2, r0
   24140:	bne	242e8 <__assert_fail@plt+0x1172c>
   24144:	ldr	r1, [fp, #-72]	; 0xffffffb8
   24148:	ldr	r0, [sp, #144]	; 0x90
   2414c:	bl	12628 <memcmp@plt>
   24150:	cmp	r0, #0
   24154:	bne	242e8 <__assert_fail@plt+0x1172c>
   24158:	b	2416c <__assert_fail@plt+0x115b0>
   2415c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   24160:	ldr	r1, [sp, #156]	; 0x9c
   24164:	cmp	r1, r0
   24168:	bne	242e8 <__assert_fail@plt+0x1172c>
   2416c:	mov	r0, r7
   24170:	mov	r1, #48	; 0x30
   24174:	vld1.64	{d16-d17}, [r0], r1
   24178:	ldr	r1, [sp]
   2417c:	vld1.64	{d18-d19}, [r1]
   24180:	add	r3, sp, #72	; 0x48
   24184:	add	r1, r3, #16
   24188:	add	r2, r7, #32
   2418c:	vld1.64	{d20-d21}, [r2]
   24190:	vldr	d22, [r0]
   24194:	vst1.64	{d18-d19}, [r1]
   24198:	add	r0, r3, #32
   2419c:	vst1.64	{d20-d21}, [r0]
   241a0:	mov	r0, r3
   241a4:	mov	r1, #12
   241a8:	vst1.64	{d16-d17}, [r0], r1
   241ac:	strb	r8, [r0]
   241b0:	str	r5, [sp, #32]
   241b4:	strb	r8, [sp, #16]
   241b8:	vstr	d22, [sp, #120]	; 0x78
   241bc:	ldr	r0, [sp, #88]	; 0x58
   241c0:	ldr	r1, [sp, #92]	; 0x5c
   241c4:	add	r0, r0, r1
   241c8:	str	r0, [sp, #88]	; 0x58
   241cc:	ldr	r0, [sp, #4]
   241d0:	str	r8, [r0]
   241d4:	str	r8, [r0, #4]
   241d8:	strb	r8, [sp, #28]
   241dc:	add	r0, sp, #16
   241e0:	bl	24d44 <__assert_fail@plt+0x12188>
   241e4:	ldrb	r0, [sp, #40]	; 0x28
   241e8:	cmp	r0, #0
   241ec:	beq	241fc <__assert_fail@plt+0x11640>
   241f0:	ldr	r0, [sp, #44]	; 0x2c
   241f4:	cmp	r0, #0
   241f8:	beq	24458 <__assert_fail@plt+0x1189c>
   241fc:	strb	r8, [sp, #28]
   24200:	ldr	r0, [sp, #32]
   24204:	ldr	r1, [sp, #36]	; 0x24
   24208:	add	r0, r0, r1
   2420c:	str	r0, [sp, #32]
   24210:	add	r0, sp, #16
   24214:	bl	24d44 <__assert_fail@plt+0x12188>
   24218:	ldrb	r0, [sp, #40]	; 0x28
   2421c:	cmp	r0, #0
   24220:	beq	24230 <__assert_fail@plt+0x11674>
   24224:	ldr	r0, [sp, #44]	; 0x2c
   24228:	cmp	r0, #0
   2422c:	beq	24440 <__assert_fail@plt+0x11884>
   24230:	add	sl, r4, #2
   24234:	add	r0, sp, #72	; 0x48
   24238:	bl	24d44 <__assert_fail@plt+0x12188>
   2423c:	ldr	r0, [sp, #100]	; 0x64
   24240:	ldrb	r1, [sp, #96]	; 0x60
   24244:	cmp	r0, #0
   24248:	bne	24254 <__assert_fail@plt+0x11698>
   2424c:	cmp	r1, #0
   24250:	bne	24430 <__assert_fail@plt+0x11874>
   24254:	cmp	r1, #0
   24258:	ldrbne	r1, [sp, #40]	; 0x28
   2425c:	cmpne	r1, #0
   24260:	bne	2428c <__assert_fail@plt+0x116d0>
   24264:	ldr	r2, [sp, #92]	; 0x5c
   24268:	ldr	r0, [sp, #36]	; 0x24
   2426c:	cmp	r2, r0
   24270:	bne	242e8 <__assert_fail@plt+0x1172c>
   24274:	ldr	r1, [sp, #32]
   24278:	ldr	r0, [sp, #88]	; 0x58
   2427c:	bl	12628 <memcmp@plt>
   24280:	cmp	r0, #0
   24284:	beq	24298 <__assert_fail@plt+0x116dc>
   24288:	b	242e8 <__assert_fail@plt+0x1172c>
   2428c:	ldr	r1, [sp, #44]	; 0x2c
   24290:	cmp	r0, r1
   24294:	bne	242e8 <__assert_fail@plt+0x1172c>
   24298:	strb	r8, [sp, #84]	; 0x54
   2429c:	strb	r8, [sp, #28]
   242a0:	ldr	r0, [sp, #88]	; 0x58
   242a4:	ldr	r1, [sp, #92]	; 0x5c
   242a8:	add	r0, r0, r1
   242ac:	str	r0, [sp, #88]	; 0x58
   242b0:	ldr	r0, [sp, #32]
   242b4:	ldr	r1, [sp, #36]	; 0x24
   242b8:	add	r0, r0, r1
   242bc:	str	r0, [sp, #32]
   242c0:	add	r0, sp, #16
   242c4:	bl	24d44 <__assert_fail@plt+0x12188>
   242c8:	add	sl, sl, #1
   242cc:	ldrb	r0, [sp, #40]	; 0x28
   242d0:	cmp	r0, #0
   242d4:	beq	24234 <__assert_fail@plt+0x11678>
   242d8:	ldr	r0, [sp, #44]	; 0x2c
   242dc:	cmp	r0, #0
   242e0:	bne	24234 <__assert_fail@plt+0x11678>
   242e4:	b	24440 <__assert_fail@plt+0x11884>
   242e8:	add	r9, r9, #1
   242ec:	mov	r4, #0
   242f0:	strb	r4, [sp, #140]	; 0x8c
   242f4:	ldr	r0, [sp, #144]	; 0x90
   242f8:	ldr	r1, [sp, #148]	; 0x94
   242fc:	add	r0, r0, r1
   24300:	str	r0, [sp, #144]	; 0x90
   24304:	mov	r0, r7
   24308:	bl	24d44 <__assert_fail@plt+0x12188>
   2430c:	ldrb	r0, [sp, #152]	; 0x98
   24310:	cmp	r0, #0
   24314:	beq	24050 <__assert_fail@plt+0x11494>
   24318:	ldr	r0, [sp, #156]	; 0x9c
   2431c:	cmp	r0, #0
   24320:	bne	24050 <__assert_fail@plt+0x11494>
   24324:	b	24434 <__assert_fail@plt+0x11878>
   24328:	ldrb	r9, [r5]
   2432c:	cmp	r9, #0
   24330:	beq	24428 <__assert_fail@plt+0x1186c>
   24334:	ldrb	r0, [r6]
   24338:	cmp	r0, #0
   2433c:	beq	24430 <__assert_fail@plt+0x11874>
   24340:	mov	r3, #1
   24344:	mov	ip, #0
   24348:	mov	sl, r5
   2434c:	mov	r7, #0
   24350:	mov	r8, #0
   24354:	add	r0, r8, r8, lsl #2
   24358:	cmp	r7, r0
   2435c:	bcc	243d0 <__assert_fail@plt+0x11814>
   24360:	tst	r3, #1
   24364:	beq	243d0 <__assert_fail@plt+0x11814>
   24368:	cmp	r8, #10
   2436c:	bcc	243d0 <__assert_fail@plt+0x11814>
   24370:	cmp	sl, #0
   24374:	beq	2439c <__assert_fail@plt+0x117e0>
   24378:	sub	r1, r7, ip
   2437c:	mov	r0, sl
   24380:	mov	r4, r3
   24384:	bl	129ac <strnlen@plt>
   24388:	mov	r3, r4
   2438c:	ldrb	r0, [sl, r0]!
   24390:	cmp	r0, #0
   24394:	mov	ip, r7
   24398:	bne	243d0 <__assert_fail@plt+0x11814>
   2439c:	mov	r0, r5
   243a0:	mov	r4, ip
   243a4:	bl	1288c <strlen@plt>
   243a8:	mov	r2, r0
   243ac:	mov	r0, r6
   243b0:	mov	r1, r5
   243b4:	sub	r3, fp, #88	; 0x58
   243b8:	bl	24830 <__assert_fail@plt+0x11c74>
   243bc:	mov	ip, r4
   243c0:	mov	r3, #0
   243c4:	cmp	r0, #0
   243c8:	mov	sl, #0
   243cc:	bne	24448 <__assert_fail@plt+0x1188c>
   243d0:	ldrb	r0, [r6]
   243d4:	cmp	r0, r9
   243d8:	bne	2440c <__assert_fail@plt+0x11850>
   243dc:	mov	r0, #1
   243e0:	ldrb	r1, [r5, r0]
   243e4:	cmp	r1, #0
   243e8:	beq	24428 <__assert_fail@plt+0x1186c>
   243ec:	ldrb	r2, [r6, r0]
   243f0:	cmp	r2, #0
   243f4:	beq	24430 <__assert_fail@plt+0x11874>
   243f8:	add	r0, r0, #1
   243fc:	cmp	r2, r1
   24400:	beq	243e0 <__assert_fail@plt+0x11824>
   24404:	add	r7, r7, r0
   24408:	b	24410 <__assert_fail@plt+0x11854>
   2440c:	add	r7, r7, #1
   24410:	add	r8, r8, #1
   24414:	ldrb	r0, [r6, #1]!
   24418:	mov	r4, #0
   2441c:	cmp	r0, #0
   24420:	bne	24354 <__assert_fail@plt+0x11798>
   24424:	b	24434 <__assert_fail@plt+0x11878>
   24428:	mov	r4, r6
   2442c:	b	24434 <__assert_fail@plt+0x11878>
   24430:	mov	r4, #0
   24434:	mov	r0, r4
   24438:	sub	sp, fp, #28
   2443c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24440:	ldr	r4, [sp, #144]	; 0x90
   24444:	b	24434 <__assert_fail@plt+0x11878>
   24448:	ldr	r4, [fp, #-88]	; 0xffffffa8
   2444c:	b	24434 <__assert_fail@plt+0x11878>
   24450:	ldr	r4, [sp, #72]	; 0x48
   24454:	b	24434 <__assert_fail@plt+0x11878>
   24458:	bl	12b68 <abort@plt>
   2445c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24460:	add	fp, sp, #28
   24464:	sub	sp, sp, #132	; 0x84
   24468:	mov	r5, r2
   2446c:	mov	r4, r1
   24470:	mov	r8, r0
   24474:	mov	r0, r1
   24478:	bl	3e064 <__assert_fail@plt+0x2b4a8>
   2447c:	mov	r6, r0
   24480:	mov	r7, #0
   24484:	movw	r0, #47662	; 0xba2e
   24488:	movt	r0, #744	; 0x2e8
   2448c:	cmp	r6, r0
   24490:	bhi	24820 <__assert_fail@plt+0x11c64>
   24494:	mov	r0, #44	; 0x2c
   24498:	mul	r0, r6, r0
   2449c:	cmp	r0, #4016	; 0xfb0
   244a0:	bhi	244c8 <__assert_fail@plt+0x1190c>
   244a4:	add	r0, r0, #22
   244a8:	bic	r0, r0, #7
   244ac:	sub	r0, sp, r0
   244b0:	add	r1, r0, #15
   244b4:	bic	sl, r1, #15
   244b8:	mov	sp, r0
   244bc:	cmp	sl, #0
   244c0:	bne	244d8 <__assert_fail@plt+0x1191c>
   244c4:	b	24820 <__assert_fail@plt+0x11c64>
   244c8:	bl	3df28 <__assert_fail@plt+0x2b36c>
   244cc:	mov	sl, r0
   244d0:	cmp	sl, #0
   244d4:	beq	24820 <__assert_fail@plt+0x11c64>
   244d8:	str	r5, [fp, #-156]	; 0xffffff64
   244dc:	mov	r9, #0
   244e0:	str	r9, [fp, #-80]	; 0xffffffb0
   244e4:	str	r9, [fp, #-84]	; 0xffffffac
   244e8:	strb	r9, [fp, #-88]	; 0xffffffa8
   244ec:	str	r4, [fp, #-72]	; 0xffffffb8
   244f0:	strb	r9, [fp, #-76]	; 0xffffffb4
   244f4:	sub	r4, fp, #88	; 0x58
   244f8:	mov	r0, r4
   244fc:	bl	24d44 <__assert_fail@plt+0x12188>
   24500:	add	r0, r6, r6, lsl #2
   24504:	add	r0, sl, r0, lsl #3
   24508:	str	r0, [fp, #-148]	; 0xffffff6c
   2450c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   24510:	cmp	r0, #0
   24514:	beq	24524 <__assert_fail@plt+0x11968>
   24518:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2451c:	cmp	r0, #0
   24520:	beq	24574 <__assert_fail@plt+0x119b8>
   24524:	add	r4, r4, #16
   24528:	sub	r7, fp, #88	; 0x58
   2452c:	mov	r5, sl
   24530:	mov	r0, r5
   24534:	mov	r1, r4
   24538:	bl	3dfec <__assert_fail@plt+0x2b430>
   2453c:	strb	r9, [fp, #-76]	; 0xffffffb4
   24540:	ldr	r0, [fp, #-72]	; 0xffffffb8
   24544:	ldr	r1, [fp, #-68]	; 0xffffffbc
   24548:	add	r0, r0, r1
   2454c:	str	r0, [fp, #-72]	; 0xffffffb8
   24550:	mov	r0, r7
   24554:	bl	24d44 <__assert_fail@plt+0x12188>
   24558:	add	r5, r5, #40	; 0x28
   2455c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   24560:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   24564:	cmp	r1, #0
   24568:	beq	24530 <__assert_fail@plt+0x11974>
   2456c:	cmp	r0, #0
   24570:	bne	24530 <__assert_fail@plt+0x11974>
   24574:	str	r8, [fp, #-160]	; 0xffffff60
   24578:	mov	r0, #1
   2457c:	ldr	r3, [fp, #-148]	; 0xffffff6c
   24580:	str	r0, [r3, #4]
   24584:	str	r6, [fp, #-152]	; 0xffffff68
   24588:	cmp	r6, #3
   2458c:	bcc	24654 <__assert_fail@plt+0x11a98>
   24590:	mov	r4, #2
   24594:	mov	r5, #0
   24598:	add	r0, r4, r4, lsl #2
   2459c:	add	r0, sl, r0, lsl #3
   245a0:	sub	r7, r0, #28
   245a4:	sub	r9, r0, #40	; 0x28
   245a8:	sub	r6, r0, #36	; 0x24
   245ac:	ldrb	r8, [r0, #-32]	; 0xffffffe0
   245b0:	cmp	r8, #0
   245b4:	bne	245cc <__assert_fail@plt+0x11a10>
   245b8:	b	245f4 <__assert_fail@plt+0x11a38>
   245bc:	ldr	r0, [r3, r5, lsl #2]
   245c0:	sub	r5, r5, r0
   245c4:	cmp	r8, #0
   245c8:	beq	245f4 <__assert_fail@plt+0x11a38>
   245cc:	add	r0, r5, r5, lsl #2
   245d0:	add	r0, sl, r0, lsl #3
   245d4:	ldrb	r1, [r0, #8]
   245d8:	cmp	r1, #0
   245dc:	beq	245f4 <__assert_fail@plt+0x11a38>
   245e0:	ldr	r0, [r0, #12]
   245e4:	ldr	r1, [r7]
   245e8:	cmp	r1, r0
   245ec:	bne	24624 <__assert_fail@plt+0x11a68>
   245f0:	b	24638 <__assert_fail@plt+0x11a7c>
   245f4:	add	r0, r5, r5, lsl #2
   245f8:	add	r1, sl, r0, lsl #3
   245fc:	ldr	r1, [r1, #4]
   24600:	ldr	r2, [r6]
   24604:	cmp	r2, r1
   24608:	bne	24624 <__assert_fail@plt+0x11a68>
   2460c:	ldr	r1, [sl, r0, lsl #3]
   24610:	ldr	r0, [r9]
   24614:	bl	12628 <memcmp@plt>
   24618:	ldr	r3, [fp, #-148]	; 0xffffff6c
   2461c:	cmp	r0, #0
   24620:	beq	24638 <__assert_fail@plt+0x11a7c>
   24624:	cmp	r5, #0
   24628:	bne	245bc <__assert_fail@plt+0x11a00>
   2462c:	mov	r5, #0
   24630:	mov	r0, r4
   24634:	b	24640 <__assert_fail@plt+0x11a84>
   24638:	add	r5, r5, #1
   2463c:	sub	r0, r4, r5
   24640:	str	r0, [r3, r4, lsl #2]
   24644:	add	r4, r4, #1
   24648:	ldr	r0, [fp, #-152]	; 0xffffff68
   2464c:	cmp	r4, r0
   24650:	bne	24598 <__assert_fail@plt+0x119dc>
   24654:	mov	r5, #0
   24658:	ldr	r8, [fp, #-156]	; 0xffffff64
   2465c:	str	r5, [r8]
   24660:	str	r5, [fp, #-80]	; 0xffffffb0
   24664:	str	r5, [fp, #-84]	; 0xffffffac
   24668:	str	r5, [fp, #-136]	; 0xffffff78
   2466c:	str	r5, [fp, #-140]	; 0xffffff74
   24670:	strb	r5, [fp, #-88]	; 0xffffffa8
   24674:	ldr	r0, [fp, #-160]	; 0xffffff60
   24678:	str	r0, [fp, #-72]	; 0xffffffb8
   2467c:	strb	r5, [fp, #-76]	; 0xffffffb4
   24680:	str	r0, [fp, #-128]	; 0xffffff80
   24684:	strb	r5, [fp, #-144]	; 0xffffff70
   24688:	strb	r5, [fp, #-132]	; 0xffffff7c
   2468c:	sub	r0, fp, #144	; 0x90
   24690:	bl	24d44 <__assert_fail@plt+0x12188>
   24694:	ldrb	r1, [fp, #-120]	; 0xffffff88
   24698:	ldr	r0, [fp, #-116]	; 0xffffff8c
   2469c:	cmp	r0, #0
   246a0:	bne	246ac <__assert_fail@plt+0x11af0>
   246a4:	cmp	r1, #0
   246a8:	bne	24814 <__assert_fail@plt+0x11c58>
   246ac:	clz	r1, r1
   246b0:	lsr	r1, r1, #5
   246b4:	sub	r9, fp, #144	; 0x90
   246b8:	sub	r4, fp, #88	; 0x58
   246bc:	mov	r7, #0
   246c0:	add	r3, r7, r7, lsl #2
   246c4:	add	r2, sl, r3, lsl #3
   246c8:	tst	r1, #1
   246cc:	bne	246ec <__assert_fail@plt+0x11b30>
   246d0:	ldrb	r1, [r2, #8]
   246d4:	cmp	r1, #0
   246d8:	beq	246ec <__assert_fail@plt+0x11b30>
   246dc:	ldr	r1, [r2, #12]
   246e0:	cmp	r1, r0
   246e4:	bne	24710 <__assert_fail@plt+0x11b54>
   246e8:	b	2476c <__assert_fail@plt+0x11bb0>
   246ec:	ldr	r2, [r2, #4]
   246f0:	ldr	r0, [fp, #-124]	; 0xffffff84
   246f4:	cmp	r2, r0
   246f8:	bne	24710 <__assert_fail@plt+0x11b54>
   246fc:	ldr	r0, [sl, r3, lsl #3]
   24700:	ldr	r1, [fp, #-128]	; 0xffffff80
   24704:	bl	12628 <memcmp@plt>
   24708:	cmp	r0, #0
   2470c:	beq	2476c <__assert_fail@plt+0x11bb0>
   24710:	cmp	r7, #0
   24714:	beq	24794 <__assert_fail@plt+0x11bd8>
   24718:	ldr	r0, [fp, #-148]	; 0xffffff6c
   2471c:	ldr	r6, [r0, r7, lsl #2]
   24720:	sub	r7, r7, r6
   24724:	cmp	r6, #0
   24728:	beq	247e0 <__assert_fail@plt+0x11c24>
   2472c:	mov	r0, r4
   24730:	bl	24d44 <__assert_fail@plt+0x12188>
   24734:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   24738:	cmp	r0, #0
   2473c:	beq	2474c <__assert_fail@plt+0x11b90>
   24740:	ldr	r0, [fp, #-60]	; 0xffffffc4
   24744:	cmp	r0, #0
   24748:	beq	2482c <__assert_fail@plt+0x11c70>
   2474c:	strb	r5, [fp, #-76]	; 0xffffffb4
   24750:	ldr	r0, [fp, #-72]	; 0xffffffb8
   24754:	ldr	r1, [fp, #-68]	; 0xffffffbc
   24758:	add	r0, r0, r1
   2475c:	str	r0, [fp, #-72]	; 0xffffffb8
   24760:	subs	r6, r6, #1
   24764:	bne	2472c <__assert_fail@plt+0x11b70>
   24768:	b	247e0 <__assert_fail@plt+0x11c24>
   2476c:	strb	r5, [fp, #-132]	; 0xffffff7c
   24770:	ldr	r0, [fp, #-128]	; 0xffffff80
   24774:	ldr	r1, [fp, #-124]	; 0xffffff84
   24778:	add	r0, r0, r1
   2477c:	str	r0, [fp, #-128]	; 0xffffff80
   24780:	add	r7, r7, #1
   24784:	ldr	r0, [fp, #-152]	; 0xffffff68
   24788:	cmp	r7, r0
   2478c:	bne	247e0 <__assert_fail@plt+0x11c24>
   24790:	b	2480c <__assert_fail@plt+0x11c50>
   24794:	mov	r0, r4
   24798:	bl	24d44 <__assert_fail@plt+0x12188>
   2479c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   247a0:	cmp	r0, #0
   247a4:	beq	247b4 <__assert_fail@plt+0x11bf8>
   247a8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   247ac:	cmp	r0, #0
   247b0:	beq	2482c <__assert_fail@plt+0x11c70>
   247b4:	mov	r7, #0
   247b8:	strb	r7, [fp, #-76]	; 0xffffffb4
   247bc:	strb	r7, [fp, #-132]	; 0xffffff7c
   247c0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   247c4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   247c8:	add	r0, r0, r1
   247cc:	str	r0, [fp, #-72]	; 0xffffffb8
   247d0:	ldr	r0, [fp, #-128]	; 0xffffff80
   247d4:	ldr	r1, [fp, #-124]	; 0xffffff84
   247d8:	add	r0, r0, r1
   247dc:	str	r0, [fp, #-128]	; 0xffffff80
   247e0:	mov	r0, r9
   247e4:	bl	24d44 <__assert_fail@plt+0x12188>
   247e8:	ldrb	r2, [fp, #-120]	; 0xffffff88
   247ec:	clz	r0, r2
   247f0:	lsr	r1, r0, #5
   247f4:	ldr	r0, [fp, #-116]	; 0xffffff8c
   247f8:	cmp	r0, #0
   247fc:	bne	246c0 <__assert_fail@plt+0x11b04>
   24800:	cmp	r2, #0
   24804:	beq	246c0 <__assert_fail@plt+0x11b04>
   24808:	b	24814 <__assert_fail@plt+0x11c58>
   2480c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   24810:	str	r0, [r8]
   24814:	mov	r0, sl
   24818:	bl	3df98 <__assert_fail@plt+0x2b3dc>
   2481c:	mov	r7, #1
   24820:	mov	r0, r7
   24824:	sub	sp, fp, #28
   24828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2482c:	bl	12b68 <abort@plt>
   24830:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24834:	add	fp, sp, #24
   24838:	mov	r4, #0
   2483c:	cmn	r2, #-536870911	; 0xe0000001
   24840:	bhi	2497c <__assert_fail@plt+0x11dc0>
   24844:	mov	r8, r3
   24848:	mov	r5, r2
   2484c:	mov	r6, r1
   24850:	mov	r7, r0
   24854:	lsl	r0, r2, #2
   24858:	cmp	r0, #4016	; 0xfb0
   2485c:	bhi	24884 <__assert_fail@plt+0x11cc8>
   24860:	add	r0, r0, #22
   24864:	bic	r0, r0, #7
   24868:	sub	r1, sp, r0
   2486c:	add	r0, r1, #15
   24870:	bic	r0, r0, #15
   24874:	mov	sp, r1
   24878:	cmp	r0, #0
   2487c:	bne	24890 <__assert_fail@plt+0x11cd4>
   24880:	b	2497c <__assert_fail@plt+0x11dc0>
   24884:	bl	3df28 <__assert_fail@plt+0x2b36c>
   24888:	cmp	r0, #0
   2488c:	beq	2497c <__assert_fail@plt+0x11dc0>
   24890:	mov	r1, #1
   24894:	str	r1, [r0, #4]
   24898:	cmp	r5, #3
   2489c:	bcc	24900 <__assert_fail@plt+0x11d44>
   248a0:	mov	r1, #2
   248a4:	mov	r2, #0
   248a8:	ldrb	r4, [r6, r2]
   248ac:	add	r3, r6, r1
   248b0:	ldrb	r3, [r3, #-1]
   248b4:	cmp	r3, r4
   248b8:	bne	248d4 <__assert_fail@plt+0x11d18>
   248bc:	b	248e8 <__assert_fail@plt+0x11d2c>
   248c0:	ldr	r4, [r0, r2, lsl #2]
   248c4:	sub	r2, r2, r4
   248c8:	ldrb	r4, [r6, r2]
   248cc:	cmp	r3, r4
   248d0:	beq	248e8 <__assert_fail@plt+0x11d2c>
   248d4:	cmp	r2, #0
   248d8:	bne	248c0 <__assert_fail@plt+0x11d04>
   248dc:	mov	r2, #0
   248e0:	mov	r3, r1
   248e4:	b	248f0 <__assert_fail@plt+0x11d34>
   248e8:	add	r2, r2, #1
   248ec:	sub	r3, r1, r2
   248f0:	str	r3, [r0, r1, lsl #2]
   248f4:	add	r1, r1, #1
   248f8:	cmp	r1, r5
   248fc:	bne	248a8 <__assert_fail@plt+0x11cec>
   24900:	mov	r1, #0
   24904:	str	r1, [r8]
   24908:	ldrb	r3, [r7]
   2490c:	cmp	r3, #0
   24910:	beq	24974 <__assert_fail@plt+0x11db8>
   24914:	mov	r2, r7
   24918:	ldrb	r4, [r6, r1]
   2491c:	uxtb	r3, r3
   24920:	cmp	r4, r3
   24924:	bne	2493c <__assert_fail@plt+0x11d80>
   24928:	add	r1, r1, #1
   2492c:	cmp	r1, r5
   24930:	beq	24970 <__assert_fail@plt+0x11db4>
   24934:	add	r7, r7, #1
   24938:	b	24960 <__assert_fail@plt+0x11da4>
   2493c:	cmp	r1, #0
   24940:	beq	24954 <__assert_fail@plt+0x11d98>
   24944:	ldr	r3, [r0, r1, lsl #2]
   24948:	sub	r1, r1, r3
   2494c:	add	r2, r2, r3
   24950:	b	24960 <__assert_fail@plt+0x11da4>
   24954:	add	r7, r7, #1
   24958:	add	r2, r2, #1
   2495c:	mov	r1, #0
   24960:	ldrb	r3, [r7]
   24964:	cmp	r3, #0
   24968:	bne	24918 <__assert_fail@plt+0x11d5c>
   2496c:	b	24974 <__assert_fail@plt+0x11db8>
   24970:	str	r2, [r8]
   24974:	bl	3df98 <__assert_fail@plt+0x2b3dc>
   24978:	mov	r4, #1
   2497c:	mov	r0, r4
   24980:	sub	sp, fp, #24
   24984:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24988:	push	{r4, r5, fp, lr}
   2498c:	add	fp, sp, #8
   24990:	mov	r4, r1
   24994:	mov	r5, r0
   24998:	bl	1288c <strlen@plt>
   2499c:	mov	r1, r0
   249a0:	mov	r0, r5
   249a4:	mov	r2, r4
   249a8:	pop	{r4, r5, fp, lr}
   249ac:	b	249b0 <__assert_fail@plt+0x11df4>
   249b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   249b4:	add	fp, sp, #28
   249b8:	sub	sp, sp, #28
   249bc:	mov	r4, r2
   249c0:	mov	r5, r1
   249c4:	mov	r7, r0
   249c8:	add	r6, r0, r1
   249cc:	bl	12730 <__ctype_get_mb_cur_max@plt>
   249d0:	cmp	r0, #1
   249d4:	bls	24cc4 <__assert_fail@plt+0x12108>
   249d8:	cmp	r5, #1
   249dc:	blt	24d2c <__assert_fail@plt+0x12170>
   249e0:	and	sl, r4, #2
   249e4:	and	r2, r4, #1
   249e8:	eor	r3, r2, #1
   249ec:	mov	r5, #0
   249f0:	add	r8, sp, #12
   249f4:	add	r9, sp, #16
   249f8:	mov	r4, #0
   249fc:	ldrb	r0, [r7]
   24a00:	sub	r0, r0, #32
   24a04:	cmp	r0, #94	; 0x5e
   24a08:	bhi	24ba4 <__assert_fail@plt+0x11fe8>
   24a0c:	add	r1, pc, #0
   24a10:	ldr	pc, [r1, r0, lsl #2]
   24a14:	muleq	r2, r0, fp
   24a18:	muleq	r2, r0, fp
   24a1c:	muleq	r2, r0, fp
   24a20:	muleq	r2, r0, fp
   24a24:	andeq	r4, r2, r4, lsr #23
   24a28:	muleq	r2, r0, fp
   24a2c:	muleq	r2, r0, fp
   24a30:	muleq	r2, r0, fp
   24a34:	muleq	r2, r0, fp
   24a38:	muleq	r2, r0, fp
   24a3c:	muleq	r2, r0, fp
   24a40:	muleq	r2, r0, fp
   24a44:	muleq	r2, r0, fp
   24a48:	muleq	r2, r0, fp
   24a4c:	muleq	r2, r0, fp
   24a50:	muleq	r2, r0, fp
   24a54:	muleq	r2, r0, fp
   24a58:	muleq	r2, r0, fp
   24a5c:	muleq	r2, r0, fp
   24a60:	muleq	r2, r0, fp
   24a64:	muleq	r2, r0, fp
   24a68:	muleq	r2, r0, fp
   24a6c:	muleq	r2, r0, fp
   24a70:	muleq	r2, r0, fp
   24a74:	muleq	r2, r0, fp
   24a78:	muleq	r2, r0, fp
   24a7c:	muleq	r2, r0, fp
   24a80:	muleq	r2, r0, fp
   24a84:	muleq	r2, r0, fp
   24a88:	muleq	r2, r0, fp
   24a8c:	muleq	r2, r0, fp
   24a90:	muleq	r2, r0, fp
   24a94:	andeq	r4, r2, r4, lsr #23
   24a98:	muleq	r2, r0, fp
   24a9c:	muleq	r2, r0, fp
   24aa0:	muleq	r2, r0, fp
   24aa4:	muleq	r2, r0, fp
   24aa8:	muleq	r2, r0, fp
   24aac:	muleq	r2, r0, fp
   24ab0:	muleq	r2, r0, fp
   24ab4:	muleq	r2, r0, fp
   24ab8:	muleq	r2, r0, fp
   24abc:	muleq	r2, r0, fp
   24ac0:	muleq	r2, r0, fp
   24ac4:	muleq	r2, r0, fp
   24ac8:	muleq	r2, r0, fp
   24acc:	muleq	r2, r0, fp
   24ad0:	muleq	r2, r0, fp
   24ad4:	muleq	r2, r0, fp
   24ad8:	muleq	r2, r0, fp
   24adc:	muleq	r2, r0, fp
   24ae0:	muleq	r2, r0, fp
   24ae4:	muleq	r2, r0, fp
   24ae8:	muleq	r2, r0, fp
   24aec:	muleq	r2, r0, fp
   24af0:	muleq	r2, r0, fp
   24af4:	muleq	r2, r0, fp
   24af8:	muleq	r2, r0, fp
   24afc:	muleq	r2, r0, fp
   24b00:	muleq	r2, r0, fp
   24b04:	muleq	r2, r0, fp
   24b08:	muleq	r2, r0, fp
   24b0c:	muleq	r2, r0, fp
   24b10:	muleq	r2, r0, fp
   24b14:	andeq	r4, r2, r4, lsr #23
   24b18:	muleq	r2, r0, fp
   24b1c:	muleq	r2, r0, fp
   24b20:	muleq	r2, r0, fp
   24b24:	muleq	r2, r0, fp
   24b28:	muleq	r2, r0, fp
   24b2c:	muleq	r2, r0, fp
   24b30:	muleq	r2, r0, fp
   24b34:	muleq	r2, r0, fp
   24b38:	muleq	r2, r0, fp
   24b3c:	muleq	r2, r0, fp
   24b40:	muleq	r2, r0, fp
   24b44:	muleq	r2, r0, fp
   24b48:	muleq	r2, r0, fp
   24b4c:	muleq	r2, r0, fp
   24b50:	muleq	r2, r0, fp
   24b54:	muleq	r2, r0, fp
   24b58:	muleq	r2, r0, fp
   24b5c:	muleq	r2, r0, fp
   24b60:	muleq	r2, r0, fp
   24b64:	muleq	r2, r0, fp
   24b68:	muleq	r2, r0, fp
   24b6c:	muleq	r2, r0, fp
   24b70:	muleq	r2, r0, fp
   24b74:	muleq	r2, r0, fp
   24b78:	muleq	r2, r0, fp
   24b7c:	muleq	r2, r0, fp
   24b80:	muleq	r2, r0, fp
   24b84:	muleq	r2, r0, fp
   24b88:	muleq	r2, r0, fp
   24b8c:	muleq	r2, r0, fp
   24b90:	add	r4, r4, #1
   24b94:	add	r7, r7, #1
   24b98:	cmp	r7, r6
   24b9c:	bcc	249fc <__assert_fail@plt+0x11e40>
   24ba0:	b	24d38 <__assert_fail@plt+0x1217c>
   24ba4:	str	r3, [sp, #4]
   24ba8:	str	r2, [sp, #8]
   24bac:	str	r5, [sp, #20]
   24bb0:	str	r5, [sp, #16]
   24bb4:	mov	r5, r7
   24bb8:	sub	r2, r6, r7
   24bbc:	mov	r0, r8
   24bc0:	mov	r1, r7
   24bc4:	mov	r3, r9
   24bc8:	bl	2ed34 <__assert_fail@plt+0x1c178>
   24bcc:	cmp	r0, #0
   24bd0:	beq	24bec <__assert_fail@plt+0x12030>
   24bd4:	mov	r7, r0
   24bd8:	cmn	r0, #2
   24bdc:	beq	24c5c <__assert_fail@plt+0x120a0>
   24be0:	cmn	r7, #1
   24be4:	bne	24bf0 <__assert_fail@plt+0x12034>
   24be8:	b	24c7c <__assert_fail@plt+0x120c0>
   24bec:	mov	r7, #1
   24bf0:	ldr	r0, [sp, #12]
   24bf4:	bl	12544 <wcwidth@plt>
   24bf8:	cmp	r0, #0
   24bfc:	blt	24c18 <__assert_fail@plt+0x1205c>
   24c00:	mvn	r1, #-2147483648	; 0x80000000
   24c04:	sub	r1, r1, r4
   24c08:	cmp	r0, r1
   24c0c:	bgt	24c54 <__assert_fail@plt+0x12098>
   24c10:	add	r4, r0, r4
   24c14:	b	24c3c <__assert_fail@plt+0x12080>
   24c18:	cmp	sl, #0
   24c1c:	bne	24ca4 <__assert_fail@plt+0x120e8>
   24c20:	ldr	r0, [sp, #12]
   24c24:	bl	126ac <iswcntrl@plt>
   24c28:	cmp	r0, #0
   24c2c:	bne	24c3c <__assert_fail@plt+0x12080>
   24c30:	cmn	r4, #-2147483647	; 0x80000001
   24c34:	beq	24c54 <__assert_fail@plt+0x12098>
   24c38:	add	r4, r4, #1
   24c3c:	add	r7, r5, r7
   24c40:	mov	r0, r9
   24c44:	bl	12604 <mbsinit@plt>
   24c48:	cmp	r0, #0
   24c4c:	beq	24bb4 <__assert_fail@plt+0x11ff8>
   24c50:	b	24c94 <__assert_fail@plt+0x120d8>
   24c54:	mov	r0, #7
   24c58:	b	24ca8 <__assert_fail@plt+0x120ec>
   24c5c:	ldr	r0, [sp, #4]
   24c60:	add	r4, r4, r0
   24c64:	mov	r0, #1
   24c68:	ldr	r1, [sp, #8]
   24c6c:	cmp	r1, #0
   24c70:	mov	r7, r6
   24c74:	beq	24c94 <__assert_fail@plt+0x120d8>
   24c78:	b	24ca8 <__assert_fail@plt+0x120ec>
   24c7c:	mov	r0, #1
   24c80:	ldr	r1, [sp, #8]
   24c84:	cmp	r1, #0
   24c88:	bne	24ca8 <__assert_fail@plt+0x120ec>
   24c8c:	add	r4, r4, #1
   24c90:	add	r7, r5, #1
   24c94:	ldr	r2, [sp, #8]
   24c98:	ldr	r3, [sp, #4]
   24c9c:	mov	r5, #0
   24ca0:	b	24b98 <__assert_fail@plt+0x11fdc>
   24ca4:	mov	r0, #1
   24ca8:	cmp	r0, #0
   24cac:	mov	r7, r5
   24cb0:	ldr	r2, [sp, #8]
   24cb4:	ldr	r3, [sp, #4]
   24cb8:	mov	r5, #0
   24cbc:	beq	24b98 <__assert_fail@plt+0x11fdc>
   24cc0:	b	24d1c <__assert_fail@plt+0x12160>
   24cc4:	and	r8, r4, #2
   24cc8:	mov	r4, #0
   24ccc:	cmp	r7, r6
   24cd0:	bcs	24d38 <__assert_fail@plt+0x1217c>
   24cd4:	ldrb	r5, [r7], #1
   24cd8:	bl	12844 <__ctype_b_loc@plt>
   24cdc:	ldr	r0, [r0]
   24ce0:	add	r0, r0, r5, lsl #1
   24ce4:	ldrh	r1, [r0]
   24ce8:	tst	r1, #16384	; 0x4000
   24cec:	bne	24d04 <__assert_fail@plt+0x12148>
   24cf0:	cmp	r8, #0
   24cf4:	bne	24d34 <__assert_fail@plt+0x12178>
   24cf8:	mov	r0, #0
   24cfc:	tst	r1, #2
   24d00:	bne	24d14 <__assert_fail@plt+0x12158>
   24d04:	cmn	r4, #-2147483647	; 0x80000001
   24d08:	mov	r0, #0
   24d0c:	mvneq	r0, #0
   24d10:	addne	r4, r4, #1
   24d14:	ands	r0, r0, #7
   24d18:	beq	24ccc <__assert_fail@plt+0x12110>
   24d1c:	mvn	r4, #0
   24d20:	cmp	r0, #7
   24d24:	mvneq	r4, #-2147483648	; 0x80000000
   24d28:	b	24d38 <__assert_fail@plt+0x1217c>
   24d2c:	mov	r4, #0
   24d30:	b	24d38 <__assert_fail@plt+0x1217c>
   24d34:	mvn	r4, #0
   24d38:	mov	r0, r4
   24d3c:	sub	sp, fp, #28
   24d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24d44:	push	{r4, r5, r6, r7, fp, lr}
   24d48:	add	fp, sp, #16
   24d4c:	mov	r4, r0
   24d50:	ldrb	r0, [r0, #12]
   24d54:	cmp	r0, #0
   24d58:	popne	{r4, r5, r6, r7, fp, pc}
   24d5c:	ldrb	r0, [r4]
   24d60:	cmp	r0, #0
   24d64:	bne	24db0 <__assert_fail@plt+0x121f4>
   24d68:	ldr	r0, [r4, #16]
   24d6c:	ldrb	r0, [r0]
   24d70:	bl	3e03c <__assert_fail@plt+0x2b480>
   24d74:	cmp	r0, #0
   24d78:	beq	24d98 <__assert_fail@plt+0x121dc>
   24d7c:	mov	r0, #1
   24d80:	str	r0, [r4, #20]
   24d84:	ldr	r1, [r4, #16]
   24d88:	ldrb	r1, [r1]
   24d8c:	strb	r0, [r4, #24]
   24d90:	str	r1, [r4, #28]
   24d94:	b	24e68 <__assert_fail@plt+0x122ac>
   24d98:	add	r0, r4, #4
   24d9c:	bl	12604 <mbsinit@plt>
   24da0:	cmp	r0, #0
   24da4:	beq	24e74 <__assert_fail@plt+0x122b8>
   24da8:	mov	r0, #1
   24dac:	strb	r0, [r4]
   24db0:	ldr	r7, [r4, #16]
   24db4:	bl	12730 <__ctype_get_mb_cur_max@plt>
   24db8:	mov	r1, r0
   24dbc:	mov	r0, r7
   24dc0:	bl	2b0b4 <__assert_fail@plt+0x184f8>
   24dc4:	mov	r2, r0
   24dc8:	add	r6, r4, #28
   24dcc:	add	r5, r4, #4
   24dd0:	mov	r0, r6
   24dd4:	mov	r1, r7
   24dd8:	mov	r3, r5
   24ddc:	bl	2ed34 <__assert_fail@plt+0x1c178>
   24de0:	str	r0, [r4, #20]
   24de4:	cmn	r0, #2
   24de8:	beq	24e54 <__assert_fail@plt+0x12298>
   24dec:	cmp	r0, #0
   24df0:	beq	24e10 <__assert_fail@plt+0x12254>
   24df4:	cmn	r0, #1
   24df8:	bne	24e34 <__assert_fail@plt+0x12278>
   24dfc:	mov	r0, #0
   24e00:	strb	r0, [r4, #24]
   24e04:	mov	r0, #1
   24e08:	str	r0, [r4, #20]
   24e0c:	b	24e68 <__assert_fail@plt+0x122ac>
   24e10:	mov	r0, #1
   24e14:	str	r0, [r4, #20]
   24e18:	ldr	r0, [r4, #16]
   24e1c:	ldrb	r0, [r0]
   24e20:	cmp	r0, #0
   24e24:	bne	24e94 <__assert_fail@plt+0x122d8>
   24e28:	ldr	r0, [r6]
   24e2c:	cmp	r0, #0
   24e30:	bne	24eb4 <__assert_fail@plt+0x122f8>
   24e34:	mov	r0, #1
   24e38:	strb	r0, [r4, #24]
   24e3c:	mov	r0, r5
   24e40:	bl	12604 <mbsinit@plt>
   24e44:	cmp	r0, #0
   24e48:	movne	r0, #0
   24e4c:	strbne	r0, [r4]
   24e50:	b	24e68 <__assert_fail@plt+0x122ac>
   24e54:	ldr	r0, [r4, #16]
   24e58:	bl	1288c <strlen@plt>
   24e5c:	str	r0, [r4, #20]
   24e60:	mov	r0, #0
   24e64:	strb	r0, [r4, #24]
   24e68:	mov	r0, #1
   24e6c:	strb	r0, [r4, #12]
   24e70:	pop	{r4, r5, r6, r7, fp, pc}
   24e74:	movw	r0, #13568	; 0x3500
   24e78:	movt	r0, #4
   24e7c:	movw	r1, #13591	; 0x3517
   24e80:	movt	r1, #4
   24e84:	movw	r3, #13603	; 0x3523
   24e88:	movt	r3, #4
   24e8c:	mov	r2, #143	; 0x8f
   24e90:	bl	12bbc <__assert_fail@plt>
   24e94:	movw	r0, #13651	; 0x3553
   24e98:	movt	r0, #4
   24e9c:	movw	r1, #13591	; 0x3517
   24ea0:	movt	r1, #4
   24ea4:	movw	r3, #13603	; 0x3523
   24ea8:	movt	r3, #4
   24eac:	mov	r2, #171	; 0xab
   24eb0:	bl	12bbc <__assert_fail@plt>
   24eb4:	movw	r0, #13674	; 0x356a
   24eb8:	movt	r0, #4
   24ebc:	movw	r1, #13591	; 0x3517
   24ec0:	movt	r1, #4
   24ec4:	movw	r3, #13603	; 0x3523
   24ec8:	movt	r3, #4
   24ecc:	mov	r2, #172	; 0xac
   24ed0:	bl	12bbc <__assert_fail@plt>
   24ed4:	ldr	r2, [r0, #16]
   24ed8:	add	r1, r2, r1
   24edc:	str	r1, [r0, #16]
   24ee0:	bx	lr
   24ee4:	ldrb	r3, [r1]
   24ee8:	mov	r2, r0
   24eec:	strb	r3, [r2], #4
   24ef0:	cmp	r3, #0
   24ef4:	beq	24f04 <__assert_fail@plt+0x12348>
   24ef8:	ldmib	r1, {r3, ip}
   24efc:	stm	r2, {r3, ip}
   24f00:	b	24f10 <__assert_fail@plt+0x12354>
   24f04:	mov	r3, #0
   24f08:	str	r3, [r2]
   24f0c:	str	r3, [r2, #4]
   24f10:	ldrb	r2, [r1, #12]
   24f14:	strb	r2, [r0, #12]
   24f18:	add	r0, r0, #16
   24f1c:	add	r1, r1, #16
   24f20:	b	3dfec <__assert_fail@plt+0x2b430>
   24f24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24f28:	add	fp, sp, #28
   24f2c:	sub	sp, sp, #4
   24f30:	mov	r5, r0
   24f34:	ldrb	r7, [r0]
   24f38:	and	r0, r7, #248	; 0xf8
   24f3c:	cmp	r0, #48	; 0x30
   24f40:	bne	24fac <__assert_fail@plt+0x123f0>
   24f44:	mov	r4, #0
   24f48:	mov	r0, #0
   24f4c:	mov	r1, r5
   24f50:	mov	r6, r5
   24f54:	ldrb	r2, [r6], #1
   24f58:	add	r0, r2, r0, lsl #3
   24f5c:	sub	r0, r0, #48	; 0x30
   24f60:	cmp	r4, r0, lsr #12
   24f64:	bne	25348 <__assert_fail@plt+0x1278c>
   24f68:	ldrb	r2, [r1, #1]
   24f6c:	and	r1, r2, #248	; 0xf8
   24f70:	cmp	r1, #48	; 0x30
   24f74:	mov	r1, r6
   24f78:	beq	24f54 <__assert_fail@plt+0x12398>
   24f7c:	cmp	r2, #0
   24f80:	bne	25348 <__assert_fail@plt+0x1278c>
   24f84:	bl	25364 <__assert_fail@plt+0x127a8>
   24f88:	sub	r2, r6, r5
   24f8c:	and	r3, r0, #3072	; 0xc00
   24f90:	movw	r7, #1023	; 0x3ff
   24f94:	movw	r1, #4095	; 0xfff
   24f98:	cmp	r2, #5
   24f9c:	orrlt	r1, r3, r7
   24fa0:	sub	sp, fp, #28
   24fa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24fa8:	b	25368 <__assert_fail@plt+0x127ac>
   24fac:	mov	r1, #1
   24fb0:	mvn	r2, #42	; 0x2a
   24fb4:	movw	r8, #5
   24fb8:	movt	r8, #4
   24fbc:	mov	r3, #1
   24fc0:	mov	r0, #1
   24fc4:	b	24fd4 <__assert_fail@plt+0x12418>
   24fc8:	add	r0, r6, r0
   24fcc:	ldrb	r7, [r5, r3]
   24fd0:	add	r3, r3, #1
   24fd4:	uxtab	r6, r2, r7
   24fd8:	uxtb	r7, r7
   24fdc:	cmp	r6, #18
   24fe0:	bhi	24ff0 <__assert_fail@plt+0x12434>
   24fe4:	tst	r8, r1, lsl r6
   24fe8:	mov	r6, #1
   24fec:	bne	24fc8 <__assert_fail@plt+0x1240c>
   24ff0:	cmp	r7, #0
   24ff4:	beq	25000 <__assert_fail@plt+0x12444>
   24ff8:	mov	r6, #0
   24ffc:	b	24fc8 <__assert_fail@plt+0x1240c>
   25000:	mov	r1, #16
   25004:	bl	2b668 <__assert_fail@plt+0x18aac>
   25008:	mov	r4, r0
   2500c:	mov	r9, #0
   25010:	mov	ip, #1
   25014:	mvn	lr, #87	; 0x57
   25018:	mov	sl, #0
   2501c:	b	25028 <__assert_fail@plt+0x1246c>
   25020:	add	r5, r5, #1
   25024:	mov	sl, r0
   25028:	mov	r1, #0
   2502c:	b	25038 <__assert_fail@plt+0x1247c>
   25030:	orr	r1, r1, r0
   25034:	add	r5, r5, #1
   25038:	ldrb	r0, [r5]
   2503c:	sub	r2, r0, #97	; 0x61
   25040:	cmp	r2, #20
   25044:	bhi	250c0 <__assert_fail@plt+0x12504>
   25048:	mov	r0, #2496	; 0x9c0
   2504c:	add	r3, pc, #0
   25050:	ldr	pc, [r3, r2, lsl #2]
   25054:	andeq	r5, r2, r8, lsr #1
   25058:	andeq	r5, r2, ip, lsr r3
   2505c:	andeq	r5, r2, ip, lsr r3
   25060:	andeq	r5, r2, ip, lsr r3
   25064:	andeq	r5, r2, ip, lsr r3
   25068:	andeq	r5, r2, ip, lsr r3
   2506c:	strheq	r5, [r2], -r0
   25070:	andeq	r5, r2, ip, lsr r3
   25074:	andeq	r5, r2, ip, lsr r3
   25078:	andeq	r5, r2, ip, lsr r3
   2507c:	andeq	r5, r2, ip, lsr r3
   25080:	andeq	r5, r2, ip, lsr r3
   25084:	andeq	r5, r2, ip, lsr r3
   25088:	andeq	r5, r2, ip, lsr r3
   2508c:	strheq	r5, [r2], -r8
   25090:	andeq	r5, r2, ip, lsr r3
   25094:	andeq	r5, r2, ip, lsr r3
   25098:	andeq	r5, r2, ip, lsr r3
   2509c:	andeq	r5, r2, ip, lsr r3
   250a0:	andeq	r5, r2, ip, lsr r3
   250a4:	andeq	r5, r2, r0, lsr r0
   250a8:	movw	r0, #4095	; 0xfff
   250ac:	b	25030 <__assert_fail@plt+0x12474>
   250b0:	movw	r0, #1080	; 0x438
   250b4:	b	25030 <__assert_fail@plt+0x12474>
   250b8:	movw	r0, #519	; 0x207
   250bc:	b	25030 <__assert_fail@plt+0x12474>
   250c0:	sub	r0, r0, #43	; 0x2b
   250c4:	cmp	r0, #18
   250c8:	bhi	2533c <__assert_fail@plt+0x12780>
   250cc:	tst	r8, ip, lsl r0
   250d0:	beq	2533c <__assert_fail@plt+0x12780>
   250d4:	ldrb	r6, [r5]
   250d8:	mov	r2, r5
   250dc:	ldrb	r7, [r2, #1]!
   250e0:	sub	r0, r7, #48	; 0x30
   250e4:	cmp	r0, #8
   250e8:	bcs	25150 <__assert_fail@plt+0x12594>
   250ec:	mov	r0, #0
   250f0:	mov	r5, r2
   250f4:	ldrb	r3, [r5], #1
   250f8:	add	r0, r3, r0, lsl #3
   250fc:	sub	r0, r0, #48	; 0x30
   25100:	cmp	r9, r0, lsr #12
   25104:	bne	2533c <__assert_fail@plt+0x12780>
   25108:	ldrb	r3, [r2, #1]
   2510c:	and	r2, r3, #248	; 0xf8
   25110:	cmp	r2, #48	; 0x30
   25114:	mov	r2, r5
   25118:	beq	250f4 <__assert_fail@plt+0x12538>
   2511c:	cmp	r1, #0
   25120:	bne	2533c <__assert_fail@plt+0x12780>
   25124:	cmp	r3, #44	; 0x2c
   25128:	cmpne	r3, #0
   2512c:	bne	2533c <__assert_fail@plt+0x12780>
   25130:	str	r6, [sp]
   25134:	bl	25364 <__assert_fail@plt+0x127a8>
   25138:	mvn	lr, #87	; 0x57
   2513c:	mov	ip, #1
   25140:	mov	r6, #1
   25144:	movw	r1, #4095	; 0xfff
   25148:	movw	r3, #4095	; 0xfff
   2514c:	b	25290 <__assert_fail@plt+0x126d4>
   25150:	cmp	r7, #103	; 0x67
   25154:	str	r6, [sp]
   25158:	beq	25180 <__assert_fail@plt+0x125c4>
   2515c:	cmp	r7, #111	; 0x6f
   25160:	beq	25194 <__assert_fail@plt+0x125d8>
   25164:	cmp	r7, #117	; 0x75
   25168:	bne	251a8 <__assert_fail@plt+0x125ec>
   2516c:	add	r5, r5, #2
   25170:	mov	r6, #3
   25174:	mov	r3, #0
   25178:	mov	r0, #448	; 0x1c0
   2517c:	b	25290 <__assert_fail@plt+0x126d4>
   25180:	add	r5, r5, #2
   25184:	mov	r6, #3
   25188:	mov	r3, #0
   2518c:	mov	r0, #56	; 0x38
   25190:	b	25290 <__assert_fail@plt+0x126d4>
   25194:	add	r5, r5, #2
   25198:	mov	r6, #3
   2519c:	mov	r3, #0
   251a0:	mov	r0, #7
   251a4:	b	25290 <__assert_fail@plt+0x126d4>
   251a8:	add	r3, r5, #2
   251ac:	mov	r2, #1
   251b0:	mov	r0, #0
   251b4:	b	251bc <__assert_fail@plt+0x12600>
   251b8:	ldrb	r7, [r3], #1
   251bc:	mov	r6, r2
   251c0:	uxtab	r7, lr, r7
   251c4:	cmp	r7, #32
   251c8:	bhi	25288 <__assert_fail@plt+0x126cc>
   251cc:	mov	r2, #2
   251d0:	add	r5, pc, #0
   251d4:	ldr	pc, [r5, r7, lsl #2]
   251d8:			; <UNDEFINED> instruction: 0x000251b8
   251dc:	andeq	r5, r2, r8, lsl #5
   251e0:	andeq	r5, r2, r8, lsl #5
   251e4:	andeq	r5, r2, r8, lsl #5
   251e8:	andeq	r5, r2, r8, lsl #5
   251ec:	andeq	r5, r2, r8, lsl #5
   251f0:	andeq	r5, r2, r8, lsl #5
   251f4:	andeq	r5, r2, r8, lsl #5
   251f8:	andeq	r5, r2, r8, lsl #5
   251fc:	andeq	r5, r2, r8, lsl #5
   25200:	andeq	r5, r2, r8, lsl #5
   25204:	andeq	r5, r2, r8, lsl #5
   25208:	andeq	r5, r2, r8, lsl #5
   2520c:	andeq	r5, r2, r8, lsl #5
   25210:	andeq	r5, r2, r8, lsl #5
   25214:	andeq	r5, r2, r8, lsl #5
   25218:	andeq	r5, r2, r8, lsl #5
   2521c:	andeq	r5, r2, r8, lsl #5
   25220:	andeq	r5, r2, r8, lsl #5
   25224:	andeq	r5, r2, r8, lsl #5
   25228:	andeq	r5, r2, r8, lsl #5
   2522c:	andeq	r5, r2, r8, lsl #5
   25230:	andeq	r5, r2, r8, lsl #5
   25234:	andeq	r5, r2, r8, lsl #5
   25238:	andeq	r5, r2, r8, lsl #5
   2523c:	andeq	r5, r2, r8, lsl #5
   25240:	andeq	r5, r2, ip, asr r2
   25244:	andeq	r5, r2, r4, ror #4
   25248:	andeq	r5, r2, ip, ror #4
   2524c:	andeq	r5, r2, r8, lsl #5
   25250:	andeq	r5, r2, r8, lsl #5
   25254:	andeq	r5, r2, r4, ror r2
   25258:	andeq	r5, r2, ip, ror r2
   2525c:	orr	r0, r0, #292	; 0x124
   25260:	b	25280 <__assert_fail@plt+0x126c4>
   25264:	orr	r0, r0, #3072	; 0xc00
   25268:	b	25280 <__assert_fail@plt+0x126c4>
   2526c:	orr	r0, r0, #512	; 0x200
   25270:	b	25280 <__assert_fail@plt+0x126c4>
   25274:	orr	r0, r0, #146	; 0x92
   25278:	b	25280 <__assert_fail@plt+0x126c4>
   2527c:	orr	r0, r0, #73	; 0x49
   25280:	mov	r2, r6
   25284:	b	251b8 <__assert_fail@plt+0x125fc>
   25288:	sub	r5, r3, #1
   2528c:	mov	r3, #0
   25290:	mov	r2, r4
   25294:	ldr	r7, [sp]
   25298:	strb	r7, [r2, sl, lsl #4]!
   2529c:	strb	r6, [r2, #1]
   252a0:	str	r1, [r2, #4]
   252a4:	str	r0, [r2, #8]
   252a8:	cmp	r3, #0
   252ac:	bne	252bc <__assert_fail@plt+0x12700>
   252b0:	cmp	r1, #0
   252b4:	andne	r0, r0, r1
   252b8:	mov	r3, r0
   252bc:	add	r0, sl, #1
   252c0:	add	r2, r4, sl, lsl #4
   252c4:	str	r3, [r2, #12]
   252c8:	ldrb	r2, [r5]
   252cc:	sub	r2, r2, #43	; 0x2b
   252d0:	cmp	r2, #18
   252d4:	bhi	25330 <__assert_fail@plt+0x12774>
   252d8:	add	r3, pc, #4
   252dc:	mov	sl, r0
   252e0:	ldr	pc, [r3, r2, lsl #2]
   252e4:	ldrdeq	r5, [r2], -r4
   252e8:	andeq	r5, r2, r0, lsr #32
   252ec:	ldrdeq	r5, [r2], -r4
   252f0:	andeq	r5, r2, r0, lsr r3
   252f4:	andeq	r5, r2, r0, lsr r3
   252f8:	andeq	r5, r2, r0, lsr r3
   252fc:	andeq	r5, r2, r0, lsr r3
   25300:	andeq	r5, r2, r0, lsr r3
   25304:	andeq	r5, r2, r0, lsr r3
   25308:	andeq	r5, r2, r0, lsr r3
   2530c:	andeq	r5, r2, r0, lsr r3
   25310:	andeq	r5, r2, r0, lsr r3
   25314:	andeq	r5, r2, r0, lsr r3
   25318:	andeq	r5, r2, r0, lsr r3
   2531c:	andeq	r5, r2, r0, lsr r3
   25320:	andeq	r5, r2, r0, lsr r3
   25324:	andeq	r5, r2, r0, lsr r3
   25328:	andeq	r5, r2, r0, lsr r3
   2532c:	ldrdeq	r5, [r2], -r4
   25330:	ldrb	r1, [r5]
   25334:	cmp	r1, #0
   25338:	beq	25354 <__assert_fail@plt+0x12798>
   2533c:	mov	r0, r4
   25340:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   25344:	mov	r4, #0
   25348:	mov	r0, r4
   2534c:	sub	sp, fp, #28
   25350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25354:	add	r0, r4, r0, lsl #4
   25358:	mov	r1, #0
   2535c:	strb	r1, [r0, #1]
   25360:	b	25348 <__assert_fail@plt+0x1278c>
   25364:	bx	lr
   25368:	push	{r4, r5, fp, lr}
   2536c:	add	fp, sp, #8
   25370:	mov	r4, r1
   25374:	mov	r5, r0
   25378:	mov	r0, #32
   2537c:	bl	2b5cc <__assert_fail@plt+0x18a10>
   25380:	movw	r1, #317	; 0x13d
   25384:	strh	r1, [r0]
   25388:	movw	r1, #4095	; 0xfff
   2538c:	stmib	r0, {r1, r5}
   25390:	str	r4, [r0, #12]
   25394:	mov	r1, #0
   25398:	strb	r1, [r0, #17]
   2539c:	pop	{r4, r5, fp, pc}
   253a0:	push	{fp, lr}
   253a4:	mov	fp, sp
   253a8:	sub	sp, sp, #104	; 0x68
   253ac:	mov	r1, sp
   253b0:	bl	3e8e4 <__assert_fail@plt+0x2bd28>
   253b4:	mov	r1, r0
   253b8:	mov	r0, #0
   253bc:	cmp	r1, #0
   253c0:	beq	253cc <__assert_fail@plt+0x12810>
   253c4:	mov	sp, fp
   253c8:	pop	{fp, pc}
   253cc:	ldr	r0, [sp, #16]
   253d0:	movw	r1, #4095	; 0xfff
   253d4:	bl	25368 <__assert_fail@plt+0x127ac>
   253d8:	mov	sp, fp
   253dc:	pop	{fp, pc}
   253e0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   253e4:	add	fp, sp, #24
   253e8:	bfc	r0, #12, #20
   253ec:	ldrb	r4, [r3, #1]
   253f0:	ldr	ip, [fp, #8]
   253f4:	cmp	r4, #0
   253f8:	beq	254d8 <__assert_fail@plt+0x1291c>
   253fc:	add	r3, r3, #8
   25400:	cmp	r1, #0
   25404:	mov	lr, r1
   25408:	movwne	lr, #3072	; 0xc00
   2540c:	mov	r9, #0
   25410:	movw	r8, #4095	; 0xfff
   25414:	mov	r5, r3
   25418:	ldr	r7, [r3, #-4]
   2541c:	ldr	r3, [r3]
   25420:	ldr	r6, [r5, #4]
   25424:	bic	r6, lr, r6
   25428:	uxtb	r4, r4
   2542c:	cmp	r4, #2
   25430:	beq	2545c <__assert_fail@plt+0x128a0>
   25434:	cmp	r4, #3
   25438:	bne	25468 <__assert_fail@plt+0x128ac>
   2543c:	and	r4, r3, r0
   25440:	tst	r4, #146	; 0x92
   25444:	mov	r3, r4
   25448:	orrne	r3, r3, #146	; 0x92
   2544c:	tst	r4, #292	; 0x124
   25450:	orrne	r3, r3, #292	; 0x124
   25454:	tst	r4, #73	; 0x49
   25458:	b	25464 <__assert_fail@plt+0x128a8>
   2545c:	and	r4, r0, #73	; 0x49
   25460:	orrs	r4, r4, r1
   25464:	orrne	r3, r3, #73	; 0x49
   25468:	cmp	r7, #0
   2546c:	mov	r4, r7
   25470:	mvneq	r4, r2
   25474:	bic	r4, r4, r6
   25478:	and	r3, r4, r3
   2547c:	ldrb	r4, [r5, #-8]
   25480:	cmp	r4, #43	; 0x2b
   25484:	beq	254b4 <__assert_fail@plt+0x128f8>
   25488:	cmp	r4, #45	; 0x2d
   2548c:	beq	254bc <__assert_fail@plt+0x12900>
   25490:	cmp	r4, #61	; 0x3d
   25494:	bne	254c4 <__assert_fail@plt+0x12908>
   25498:	mvn	r4, r7
   2549c:	cmp	r7, #0
   254a0:	orrne	r6, r6, r4
   254a4:	and	r0, r6, r0
   254a8:	orr	r0, r3, r0
   254ac:	bic	r3, r8, r6
   254b0:	b	254c0 <__assert_fail@plt+0x12904>
   254b4:	orr	r0, r3, r0
   254b8:	b	254c0 <__assert_fail@plt+0x12904>
   254bc:	bic	r0, r0, r3
   254c0:	orr	r9, r3, r9
   254c4:	add	r3, r5, #16
   254c8:	ldrb	r4, [r5, #9]
   254cc:	cmp	r4, #0
   254d0:	bne	25414 <__assert_fail@plt+0x12858>
   254d4:	b	254dc <__assert_fail@plt+0x12920>
   254d8:	mov	r9, #0
   254dc:	cmp	ip, #0
   254e0:	strne	r9, [ip]
   254e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   254e8:	push	{fp, lr}
   254ec:	mov	fp, sp
   254f0:	mov	r4, r0
   254f4:	movw	r0, #21760	; 0x5500
   254f8:	movt	r0, #5
   254fc:	ldr	r5, [r0]
   25500:	movw	r1, #13692	; 0x357c
   25504:	movt	r1, #4
   25508:	mov	r0, #0
   2550c:	mov	r2, #5
   25510:	bl	1264c <dcgettext@plt>
   25514:	mov	r2, r0
   25518:	mov	r0, r5
   2551c:	mov	r1, r4
   25520:	bl	12790 <error@plt>
   25524:	bl	12b68 <abort@plt>
   25528:	push	{fp, lr}
   2552c:	mov	fp, sp
   25530:	mov	r4, r0
   25534:	movw	r0, #21760	; 0x5500
   25538:	movt	r0, #5
   2553c:	ldr	r5, [r0]
   25540:	movw	r1, #13735	; 0x35a7
   25544:	movt	r1, #4
   25548:	mov	r0, #0
   2554c:	mov	r2, #5
   25550:	bl	1264c <dcgettext@plt>
   25554:	mov	r2, r0
   25558:	mov	r0, r5
   2555c:	mov	r1, r4
   25560:	bl	12790 <error@plt>
   25564:	bl	12b68 <abort@plt>
   25568:	sub	sp, sp, #4
   2556c:	push	{fp, lr}
   25570:	mov	fp, sp
   25574:	sub	sp, sp, #4
   25578:	str	r3, [fp, #8]
   2557c:	mov	r3, #0
   25580:	tst	r2, #64	; 0x40
   25584:	addne	r3, fp, #8
   25588:	addne	r3, r3, #4
   2558c:	strne	r3, [sp]
   25590:	ldrne	r3, [fp, #8]
   25594:	bl	128b0 <openat64@plt>
   25598:	bl	2b0f0 <__assert_fail@plt+0x18534>
   2559c:	mov	sp, fp
   255a0:	pop	{fp, lr}
   255a4:	add	sp, sp, #4
   255a8:	bx	lr
   255ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   255b0:	add	fp, sp, #28
   255b4:	sub	sp, sp, #372	; 0x174
   255b8:	sub	sp, sp, #1024	; 0x400
   255bc:	mov	lr, r0
   255c0:	vmov.i32	q8, #0	; 0x00000000
   255c4:	mov	r0, #52	; 0x34
   255c8:	sub	r2, fp, #88	; 0x58
   255cc:	mov	r1, r2
   255d0:	vst1.64	{d16-d17}, [r1], r0
   255d4:	mov	r4, #0
   255d8:	str	r4, [r1]
   255dc:	add	r0, r2, #32
   255e0:	str	r0, [sp, #104]	; 0x68
   255e4:	vst1.64	{d16-d17}, [r0]
   255e8:	add	r0, r2, #16
   255ec:	str	r0, [sp, #100]	; 0x64
   255f0:	vst1.64	{d16-d17}, [r0]
   255f4:	str	r4, [fp, #-40]	; 0xffffffd8
   255f8:	strh	r4, [fp, #-128]	; 0xffffff80
   255fc:	add	r0, lr, #64	; 0x40
   25600:	str	r0, [sp, #108]	; 0x6c
   25604:	add	r0, lr, #40	; 0x28
   25608:	str	r0, [sp, #88]	; 0x58
   2560c:	add	r0, lr, #32
   25610:	str	r0, [sp, #92]	; 0x5c
   25614:	add	r0, lr, #56	; 0x38
   25618:	str	r0, [sp, #112]	; 0x70
   2561c:	add	r0, lr, #8
   25620:	str	r0, [sp, #96]	; 0x60
   25624:	add	r0, lr, #88	; 0x58
   25628:	str	r0, [sp, #84]	; 0x54
   2562c:	mvn	r3, #1
   25630:	add	sl, sp, #176	; 0xb0
   25634:	sub	ip, fp, #128	; 0x80
   25638:	mov	r5, #0
   2563c:	str	lr, [sp, #128]	; 0x80
   25640:	cmp	r4, #12
   25644:	beq	26a08 <__assert_fail@plt+0x13e4c>
   25648:	movw	r0, #13784	; 0x35d8
   2564c:	movt	r0, #4
   25650:	add	r0, r0, r4
   25654:	ldrsb	r6, [r0]
   25658:	cmn	r6, #93	; 0x5d
   2565c:	beq	256f0 <__assert_fail@plt+0x12b34>
   25660:	cmn	r3, #2
   25664:	bne	25680 <__assert_fail@plt+0x12ac4>
   25668:	sub	r0, fp, #88	; 0x58
   2566c:	mov	r1, lr
   25670:	bl	26a28 <__assert_fail@plt+0x13e6c>
   25674:	sub	ip, fp, #128	; 0x80
   25678:	ldr	lr, [sp, #128]	; 0x80
   2567c:	mov	r3, r0
   25680:	cmp	r3, #1
   25684:	blt	256a4 <__assert_fail@plt+0x12ae8>
   25688:	lsr	r1, r3, #1
   2568c:	mov	r0, #2
   25690:	cmp	r1, #138	; 0x8a
   25694:	movwls	r0, #13898	; 0x364a
   25698:	movtls	r0, #4
   2569c:	ldrbls	r0, [r0, r3]
   256a0:	b	256ac <__assert_fail@plt+0x12af0>
   256a4:	mov	r0, #0
   256a8:	mov	r3, #0
   256ac:	add	r1, r0, r6
   256b0:	cmp	r1, #112	; 0x70
   256b4:	bhi	256f0 <__assert_fail@plt+0x12b34>
   256b8:	movw	r2, #14176	; 0x3760
   256bc:	movt	r2, #4
   256c0:	add	r2, r2, r1
   256c4:	ldrsb	r2, [r2]
   256c8:	cmp	r0, r2
   256cc:	bne	256f0 <__assert_fail@plt+0x12b34>
   256d0:	movw	r0, #14289	; 0x37d1
   256d4:	movt	r0, #4
   256d8:	ldrb	r4, [r0, r1]
   256dc:	orr	r0, r1, #4
   256e0:	cmp	r0, #111	; 0x6f
   256e4:	bne	25954 <__assert_fail@plt+0x12d98>
   256e8:	rsb	r8, r4, #0
   256ec:	b	25704 <__assert_fail@plt+0x12b48>
   256f0:	movw	r0, #14402	; 0x3842
   256f4:	movt	r0, #4
   256f8:	ldrb	r8, [r0, r4]
   256fc:	cmp	r8, #0
   25700:	beq	26a18 <__assert_fail@plt+0x13e5c>
   25704:	str	r3, [sp, #132]	; 0x84
   25708:	movw	r0, #14516	; 0x38b4
   2570c:	movt	r0, #4
   25710:	ldrb	r9, [r0, r8]
   25714:	rsb	r0, r9, #1
   25718:	rsb	r0, r0, r0, lsl #3
   2571c:	mov	r1, sl
   25720:	ldr	r0, [r1, r0, lsl #3]!
   25724:	str	r0, [sp, #172]	; 0xac
   25728:	ldr	r0, [r1, #44]	; 0x2c
   2572c:	str	r0, [sp, #140]	; 0x8c
   25730:	ldr	r0, [r1, #40]	; 0x28
   25734:	str	r0, [sp, #148]	; 0x94
   25738:	ldr	r0, [r1, #36]	; 0x24
   2573c:	str	r0, [sp, #144]	; 0x90
   25740:	ldr	r6, [r1, #4]
   25744:	ldr	r3, [r1, #8]
   25748:	ldr	r0, [r1, #12]
   2574c:	str	r0, [sp, #168]	; 0xa8
   25750:	ldr	r2, [r1, #16]
   25754:	ldr	r0, [r1, #20]
   25758:	str	r0, [sp, #164]	; 0xa4
   2575c:	ldr	r0, [r1, #24]
   25760:	str	r0, [sp, #160]	; 0xa0
   25764:	ldr	r0, [r1, #28]
   25768:	str	r0, [sp, #156]	; 0x9c
   2576c:	ldr	r0, [r1, #32]
   25770:	str	r0, [sp, #152]	; 0x98
   25774:	sub	r0, r8, #4
   25778:	ldr	r4, [r1, #52]	; 0x34
   2577c:	ldr	r1, [r1, #48]	; 0x30
   25780:	str	r1, [sp, #136]	; 0x88
   25784:	cmp	r0, #87	; 0x57
   25788:	bhi	26480 <__assert_fail@plt+0x138c4>
   2578c:	add	r1, pc, #0
   25790:	ldr	pc, [r1, r0, lsl #2]
   25794:	andeq	r5, r2, r0, lsl #21
   25798:	andeq	r6, r2, r0, lsl #9
   2579c:	andeq	r6, r2, r0, lsl #9
   257a0:	andeq	r5, r2, r8, lsr #21
   257a4:	andeq	r5, r2, ip, asr #21
   257a8:	andeq	r5, r2, r4, ror #21
   257ac:	strdeq	r5, [r2], -ip
   257b0:	andeq	r5, r2, r4, lsl fp
   257b4:	andeq	r5, r2, ip, lsr #22
   257b8:	andeq	r5, r2, r4, asr #22
   257bc:	andeq	r5, r2, r0, asr fp
   257c0:	andeq	r5, r2, ip, asr fp
   257c4:	andeq	r6, r2, r0, lsl #9
   257c8:	andeq	r6, r2, r0, lsl #9
   257cc:	muleq	r2, r4, fp
   257d0:			; <UNDEFINED> instruction: 0x00025bbc
   257d4:	andeq	r5, r2, ip, ror #23
   257d8:	andeq	r6, r2, r0, lsl #9
   257dc:	andeq	r5, r2, r8, lsr ip
   257e0:	andeq	r5, r2, r0, ror #24
   257e4:	muleq	r2, r0, ip
   257e8:	andeq	r6, r2, r0, lsl #9
   257ec:	andeq	r6, r2, r0, lsl #9
   257f0:	ldrdeq	r5, [r2], -ip
   257f4:	andeq	r5, r2, r4, lsr sp
   257f8:	andeq	r5, r2, r0, asr #26
   257fc:	andeq	r5, r2, r8, asr sp
   25800:	andeq	r5, r2, r4, ror #26
   25804:	andeq	r5, r2, r4, ror sp
   25808:	andeq	r5, r2, ip, ror sp
   2580c:	andeq	r5, r2, r8, ror #28
   25810:	andeq	r5, r2, ip, lsr pc
   25814:	andeq	r5, r2, r4, asr #30
   25818:	andeq	r5, r2, r4, asr pc
   2581c:	andeq	r5, r2, r0, ror pc
   25820:	andeq	r5, r2, ip, lsl #31
   25824:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   25828:			; <UNDEFINED> instruction: 0x00025fbc
   2582c:	andeq	r5, r2, r4, asr #31
   25830:	strdeq	r5, [r2], -r4
   25834:	andeq	r6, r2, r0, asr #32
   25838:	strheq	r6, [r2], -r4
   2583c:	ldrdeq	r6, [r2], -r0
   25840:	andeq	r6, r2, ip, ror #1
   25844:	andeq	r6, r2, r0, lsl r1
   25848:	andeq	r6, r2, r0, lsl #9
   2584c:	andeq	r6, r2, ip, asr #2
   25850:			; <UNDEFINED> instruction: 0x000261bc
   25854:	strdeq	r5, [r2], -r4
   25858:	strdeq	r5, [r2], -r4
   2585c:	muleq	r2, r0, r2
   25860:	andeq	r5, r2, r0, lsr #19
   25864:	strdeq	r6, [r2], -r0
   25868:	andeq	r6, r2, ip, asr #6
   2586c:	andeq	r5, r2, ip, lsr #19
   25870:	andeq	r6, r2, ip, asr r3
   25874:	andeq	r6, r2, r8, lsl #7
   25878:			; <UNDEFINED> instruction: 0x000259b8
   2587c:	strdeq	r5, [r2], -ip
   25880:	andeq	r6, r2, ip, asr #7
   25884:	andeq	r5, r2, r8, lsl sl
   25888:	andeq	r6, r2, r4, lsl #8
   2588c:	andeq	r6, r2, r8, lsr #8
   25890:	andeq	r5, r2, r0, lsr #20
   25894:	andeq	r6, r2, r4, ror r5
   25898:	andeq	r6, r2, r8, lsr #11
   2589c:	andeq	r5, r2, r8, lsr #20
   258a0:	andeq	r5, r2, r0, lsr sl
   258a4:	andeq	r5, r2, r0, lsr sl
   258a8:	strdeq	r6, [r2], -r0
   258ac:	andeq	r6, r2, r0, lsl #9
   258b0:	andeq	r5, r2, r0, lsr #19
   258b4:	andeq	r5, r2, ip, lsr #19
   258b8:			; <UNDEFINED> instruction: 0x000259b8
   258bc:	andeq	r5, r2, r8, lsl sl
   258c0:	andeq	r5, r2, r0, lsr #20
   258c4:	andeq	r5, r2, r8, lsr #20
   258c8:	strdeq	r5, [r2], -ip
   258cc:	andeq	r6, r2, r0, lsl #9
   258d0:	andeq	r6, r2, r0, lsl #9
   258d4:	andeq	r6, r2, r0, lsl #9
   258d8:	andeq	r6, r2, r4, lsr r6
   258dc:	andeq	r6, r2, r0, lsl #9
   258e0:	andeq	r6, r2, r0, ror r6
   258e4:	andeq	r6, r2, ip, lsr #13
   258e8:	andeq	r6, r2, r4, ror #13
   258ec:	ldrdeq	r6, [r2], -r0
   258f0:	andeq	r6, r2, r0, ror #15
   258f4:	ldr	r0, [sl]
   258f8:	str	r0, [sp, #120]	; 0x78
   258fc:	ldr	r0, [sl, #4]
   25900:	str	r0, [sp, #80]	; 0x50
   25904:	ldr	r0, [sl, #8]
   25908:	str	r0, [sp, #76]	; 0x4c
   2590c:	ldr	r0, [sl, #12]
   25910:	str	r0, [sp, #72]	; 0x48
   25914:	ldr	ip, [sl, #16]
   25918:	ldr	lr, [sl, #20]
   2591c:	ldr	r0, [sl, #24]
   25920:	str	r0, [sp, #68]	; 0x44
   25924:	ldr	r0, [sl, #28]
   25928:	str	r0, [sp, #64]	; 0x40
   2592c:	ldr	r0, [sl, #32]
   25930:	str	r0, [sp, #60]	; 0x3c
   25934:	ldr	r0, [sl, #36]	; 0x24
   25938:	str	r0, [sp, #56]	; 0x38
   2593c:	ldr	r0, [sl, #40]	; 0x28
   25940:	ldr	r1, [sl, #44]	; 0x2c
   25944:	str	r2, [sp, #124]	; 0x7c
   25948:	ldr	r2, [sl, #48]	; 0x30
   2594c:	str	r3, [sp, #116]	; 0x74
   25950:	b	26758 <__assert_fail@plt+0x13b9c>
   25954:	sub	r0, fp, #88	; 0x58
   25958:	mov	r1, #48	; 0x30
   2595c:	vld1.64	{d16-d17}, [r0], r1
   25960:	add	r1, sl, #56	; 0x38
   25964:	ldr	r2, [sp, #104]	; 0x68
   25968:	vld1.64	{d18-d19}, [r2]
   2596c:	ldr	r2, [sp, #100]	; 0x64
   25970:	vld1.64	{d20-d21}, [r2]
   25974:	vldr	d22, [r0]
   25978:	vst1.64	{d16-d17}, [r1]
   2597c:	add	r0, sl, #88	; 0x58
   25980:	vst1.64	{d18-d19}, [r0]
   25984:	add	r0, sl, #72	; 0x48
   25988:	vst1.64	{d20-d21}, [r0]
   2598c:	vstr	d22, [sl, #104]	; 0x68
   25990:	mvn	r3, #1
   25994:	mov	sl, r1
   25998:	mov	r0, r5
   2599c:	b	2655c <__assert_fail@plt+0x139a0>
   259a0:	ldr	r0, [sl, #-48]	; 0xffffffd0
   259a4:	ldr	r6, [sl, #-44]	; 0xffffffd4
   259a8:	b	26298 <__assert_fail@plt+0x136dc>
   259ac:	ldr	r3, [sl, #-48]	; 0xffffffd0
   259b0:	ldr	r0, [sl, #-44]	; 0xffffffd4
   259b4:	b	26354 <__assert_fail@plt+0x13798>
   259b8:	str	r4, [sp, #120]	; 0x78
   259bc:	ldm	sl, {r4, r7}
   259c0:	cmn	r7, #1
   259c4:	ble	267f0 <__assert_fail@plt+0x13c34>
   259c8:	orrs	r0, r4, r7
   259cc:	beq	2692c <__assert_fail@plt+0x13d70>
   259d0:	ldr	r2, [sl, #-48]	; 0xffffffd0
   259d4:	ldr	r6, [sl, #-44]	; 0xffffffd4
   259d8:	cmn	r6, #1
   259dc:	ble	268c8 <__assert_fail@plt+0x13d0c>
   259e0:	mvn	r0, #0
   259e4:	mvn	r1, #-2147483648	; 0x80000000
   259e8:	str	r2, [sp, #172]	; 0xac
   259ec:	mov	r2, r4
   259f0:	mov	r3, r7
   259f4:	bl	3e6b0 <__assert_fail@plt+0x2baf4>
   259f8:	b	26824 <__assert_fail@plt+0x13c68>
   259fc:	ldr	r2, [sl]
   25a00:	ldr	r0, [sl, #4]
   25a04:	str	r0, [sp, #164]	; 0xa4
   25a08:	mov	r3, #0
   25a0c:	mov	r0, #0
   25a10:	str	r0, [sp, #168]	; 0xa8
   25a14:	b	26374 <__assert_fail@plt+0x137b8>
   25a18:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   25a1c:	b	263d0 <__assert_fail@plt+0x13814>
   25a20:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   25a24:	b	2642c <__assert_fail@plt+0x13870>
   25a28:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   25a2c:	b	265ac <__assert_fail@plt+0x139f0>
   25a30:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   25a34:	str	r1, [sp, #136]	; 0x88
   25a38:	str	r0, [sp, #148]	; 0x94
   25a3c:	asr	r0, r0, #31
   25a40:	str	r0, [sp, #140]	; 0x8c
   25a44:	mov	r3, #0
   25a48:	mov	r0, #0
   25a4c:	str	r0, [sp, #168]	; 0xa8
   25a50:	mov	r2, #0
   25a54:	mov	r0, #0
   25a58:	str	r0, [sp, #164]	; 0xa4
   25a5c:	mov	r0, #0
   25a60:	str	r0, [sp, #160]	; 0xa0
   25a64:	mov	r0, #0
   25a68:	str	r0, [sp, #156]	; 0x9c
   25a6c:	mov	r0, #0
   25a70:	str	r0, [sp, #152]	; 0x98
   25a74:	mov	r0, #0
   25a78:	str	r0, [sp, #144]	; 0x90
   25a7c:	b	26474 <__assert_fail@plt+0x138b8>
   25a80:	ldrd	r0, [sl]
   25a84:	str	r2, [sp, #124]	; 0x7c
   25a88:	ldr	r2, [sp, #84]	; 0x54
   25a8c:	strd	r0, [r2]
   25a90:	mov	r0, #1
   25a94:	strb	r0, [lr, #152]	; 0x98
   25a98:	movw	r1, #6758	; 0x1a66
   25a9c:	movt	r1, #4
   25aa0:	mov	r0, #0
   25aa4:	b	25b6c <__assert_fail@plt+0x12fb0>
   25aa8:	ldr	r0, [lr, #156]	; 0x9c
   25aac:	ldr	r1, [lr, #172]	; 0xac
   25ab0:	add	r1, r1, #1
   25ab4:	str	r1, [lr, #172]	; 0xac
   25ab8:	add	r0, r0, #1
   25abc:	str	r0, [lr, #156]	; 0x9c
   25ac0:	movw	r1, #16444	; 0x403c
   25ac4:	movt	r1, #4
   25ac8:	b	25b64 <__assert_fail@plt+0x12fa8>
   25acc:	ldr	r0, [lr, #172]	; 0xac
   25ad0:	add	r0, r0, #1
   25ad4:	str	r0, [lr, #172]	; 0xac
   25ad8:	movw	r1, #6192	; 0x1830
   25adc:	movt	r1, #4
   25ae0:	b	25b64 <__assert_fail@plt+0x12fa8>
   25ae4:	ldr	r0, [lr, #164]	; 0xa4
   25ae8:	add	r0, r0, #1
   25aec:	str	r0, [lr, #164]	; 0xa4
   25af0:	movw	r1, #16453	; 0x4045
   25af4:	movt	r1, #4
   25af8:	b	25b64 <__assert_fail@plt+0x12fa8>
   25afc:	ldr	r0, [lr, #176]	; 0xb0
   25b00:	add	r0, r0, #1
   25b04:	str	r0, [lr, #176]	; 0xb0
   25b08:	movw	r1, #16459	; 0x404b
   25b0c:	movt	r1, #4
   25b10:	b	25b64 <__assert_fail@plt+0x12fa8>
   25b14:	ldr	r0, [lr, #156]	; 0x9c
   25b18:	add	r0, r0, #1
   25b1c:	str	r0, [lr, #156]	; 0x9c
   25b20:	movw	r1, #16464	; 0x4050
   25b24:	movt	r1, #4
   25b28:	b	25b64 <__assert_fail@plt+0x12fa8>
   25b2c:	ldr	r0, [lr, #160]	; 0xa0
   25b30:	add	r0, r0, #1
   25b34:	str	r0, [lr, #160]	; 0xa0
   25b38:	movw	r1, #16469	; 0x4055
   25b3c:	movt	r1, #4
   25b40:	b	25b64 <__assert_fail@plt+0x12fa8>
   25b44:	movw	r1, #16473	; 0x4059
   25b48:	movt	r1, #4
   25b4c:	b	25b64 <__assert_fail@plt+0x12fa8>
   25b50:	movw	r1, #12109	; 0x2f4d
   25b54:	movt	r1, #4
   25b58:	b	25b64 <__assert_fail@plt+0x12fa8>
   25b5c:	movw	r1, #16482	; 0x4062
   25b60:	movt	r1, #4
   25b64:	mov	r0, #0
   25b68:	str	r2, [sp, #124]	; 0x7c
   25b6c:	mov	r2, #5
   25b70:	mov	r7, r4
   25b74:	mov	r4, r3
   25b78:	bl	1264c <dcgettext@plt>
   25b7c:	ldr	r2, [sp, #124]	; 0x7c
   25b80:	mov	r3, r4
   25b84:	mov	r4, r7
   25b88:	sub	ip, fp, #128	; 0x80
   25b8c:	ldr	lr, [sp, #128]	; 0x80
   25b90:	b	26480 <__assert_fail@plt+0x138c4>
   25b94:	str	r4, [sp, #120]	; 0x78
   25b98:	mov	r4, r3
   25b9c:	mov	r7, r2
   25ba0:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   25ba4:	mov	r0, #0
   25ba8:	str	r0, [sp]
   25bac:	str	r0, [sp, #4]
   25bb0:	str	r0, [sp, #8]
   25bb4:	str	r0, [sp, #12]
   25bb8:	b	25bdc <__assert_fail@plt+0x13020>
   25bbc:	str	r4, [sp, #120]	; 0x78
   25bc0:	mov	r4, r3
   25bc4:	mov	r7, r2
   25bc8:	ldrd	r2, [sl, #-160]	; 0xffffff60
   25bcc:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   25bd0:	mov	ip, #0
   25bd4:	stm	sp, {r0, r1, ip}
   25bd8:	str	ip, [sp, #12]
   25bdc:	mov	r0, lr
   25be0:	bl	26d90 <__assert_fail@plt+0x141d4>
   25be4:	mov	r2, r7
   25be8:	b	25c1c <__assert_fail@plt+0x13060>
   25bec:	str	r2, [sp, #124]	; 0x7c
   25bf0:	ldr	r2, [sl, #-272]	; 0xfffffef0
   25bf4:	str	r4, [sp, #120]	; 0x78
   25bf8:	mov	r4, r3
   25bfc:	ldr	r3, [sl, #-268]	; 0xfffffef4
   25c00:	ldrd	r0, [sl, #-160]	; 0xffffff60
   25c04:	ldr	r7, [sl, #-56]	; 0xffffffc8
   25c08:	ldr	ip, [sl, #-52]	; 0xffffffcc
   25c0c:	stm	sp, {r0, r1, r7, ip}
   25c10:	mov	r0, lr
   25c14:	bl	26d90 <__assert_fail@plt+0x141d4>
   25c18:	ldr	r2, [sp, #124]	; 0x7c
   25c1c:	mov	r3, r4
   25c20:	ldr	r4, [sp, #120]	; 0x78
   25c24:	sub	ip, fp, #128	; 0x80
   25c28:	ldr	lr, [sp, #128]	; 0x80
   25c2c:	ldr	r0, [sl]
   25c30:	str	r0, [lr, #28]
   25c34:	b	26480 <__assert_fail@plt+0x138c4>
   25c38:	str	r4, [sp, #120]	; 0x78
   25c3c:	mov	r4, r3
   25c40:	mov	r7, r2
   25c44:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   25c48:	mov	r0, #0
   25c4c:	str	r0, [sp]
   25c50:	str	r0, [sp, #4]
   25c54:	str	r0, [sp, #8]
   25c58:	str	r0, [sp, #12]
   25c5c:	b	25c80 <__assert_fail@plt+0x130c4>
   25c60:	str	r4, [sp, #120]	; 0x78
   25c64:	mov	r4, r3
   25c68:	mov	r7, r2
   25c6c:	ldrd	r2, [sl, #-160]	; 0xffffff60
   25c70:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   25c74:	mov	ip, #0
   25c78:	stm	sp, {r0, r1, ip}
   25c7c:	str	ip, [sp, #12]
   25c80:	mov	r0, lr
   25c84:	bl	26d90 <__assert_fail@plt+0x141d4>
   25c88:	mov	r2, r7
   25c8c:	b	25cc0 <__assert_fail@plt+0x13104>
   25c90:	str	r2, [sp, #124]	; 0x7c
   25c94:	ldr	r2, [sl, #-272]	; 0xfffffef0
   25c98:	str	r4, [sp, #120]	; 0x78
   25c9c:	mov	r4, r3
   25ca0:	ldr	r3, [sl, #-268]	; 0xfffffef4
   25ca4:	ldrd	r0, [sl, #-160]	; 0xffffff60
   25ca8:	ldr	r7, [sl, #-56]	; 0xffffffc8
   25cac:	ldr	ip, [sl, #-52]	; 0xffffffcc
   25cb0:	stm	sp, {r0, r1, r7, ip}
   25cb4:	mov	r0, lr
   25cb8:	bl	26d90 <__assert_fail@plt+0x141d4>
   25cbc:	ldr	r2, [sp, #124]	; 0x7c
   25cc0:	mov	r3, r4
   25cc4:	ldr	r4, [sp, #120]	; 0x78
   25cc8:	sub	ip, fp, #128	; 0x80
   25ccc:	ldr	lr, [sp, #128]	; 0x80
   25cd0:	mov	r0, #2
   25cd4:	str	r0, [lr, #28]
   25cd8:	b	26480 <__assert_fail@plt+0x138c4>
   25cdc:	ldr	r0, [lr, #176]	; 0xb0
   25ce0:	add	r0, r0, #1
   25ce4:	str	r0, [lr, #176]	; 0xb0
   25ce8:	str	r2, [sp, #124]	; 0x7c
   25cec:	ldr	r2, [sl, #-56]	; 0xffffffc8
   25cf0:	ldr	r0, [sl, #-52]	; 0xffffffcc
   25cf4:	str	r0, [sp, #116]	; 0x74
   25cf8:	sub	ip, sl, #48	; 0x30
   25cfc:	ldm	ip, {r0, r1, r7, ip}
   25d00:	str	r4, [sp, #120]	; 0x78
   25d04:	mov	r4, r3
   25d08:	ldr	lr, [sl]
   25d0c:	ldr	r3, [sl, #4]
   25d10:	stm	sp, {r0, r1, r7, ip, lr}
   25d14:	str	r3, [sp, #20]
   25d18:	ldr	r0, [sp, #128]	; 0x80
   25d1c:	ldr	r3, [sp, #116]	; 0x74
   25d20:	bl	26dbc <__assert_fail@plt+0x14200>
   25d24:	ldr	r2, [sp, #124]	; 0x7c
   25d28:	mov	r3, r4
   25d2c:	ldr	r4, [sp, #120]	; 0x78
   25d30:	b	2627c <__assert_fail@plt+0x136c0>
   25d34:	ldr	r0, [sl]
   25d38:	str	r0, [lr, #20]
   25d3c:	b	26480 <__assert_fail@plt+0x138c4>
   25d40:	mov	r0, #1
   25d44:	str	r0, [lr, #20]
   25d48:	ldr	r0, [lr, #168]	; 0xa8
   25d4c:	add	r0, r0, #1
   25d50:	str	r0, [lr, #168]	; 0xa8
   25d54:	b	26480 <__assert_fail@plt+0x138c4>
   25d58:	ldr	r0, [sl]
   25d5c:	str	r0, [lr, #24]
   25d60:	b	26480 <__assert_fail@plt+0x138c4>
   25d64:	movw	r0, #40336	; 0x9d90
   25d68:	movt	r0, #65535	; 0xffff
   25d6c:	str	r0, [lr, #24]
   25d70:	b	26480 <__assert_fail@plt+0x138c4>
   25d74:	ldr	r0, [sl, #-56]	; 0xffffffc8
   25d78:	b	25d84 <__assert_fail@plt+0x131c8>
   25d7c:	movw	r0, #40336	; 0x9d90
   25d80:	movt	r0, #65535	; 0xffff
   25d84:	str	r0, [lr, #24]
   25d88:	ldr	r0, [sl]
   25d8c:	str	r0, [sp, #120]	; 0x78
   25d90:	ldr	r0, [sl, #4]
   25d94:	str	r0, [sp, #80]	; 0x50
   25d98:	ldr	r0, [sl, #8]
   25d9c:	str	r0, [sp, #76]	; 0x4c
   25da0:	ldr	r0, [sl, #12]
   25da4:	str	r0, [sp, #72]	; 0x48
   25da8:	ldr	ip, [sl, #16]
   25dac:	ldr	lr, [sl, #20]
   25db0:	ldr	r0, [sl, #24]
   25db4:	str	r0, [sp, #68]	; 0x44
   25db8:	ldr	r0, [sl, #28]
   25dbc:	str	r0, [sp, #64]	; 0x40
   25dc0:	ldr	r0, [sl, #32]
   25dc4:	str	r0, [sp, #60]	; 0x3c
   25dc8:	ldr	r0, [sl, #36]	; 0x24
   25dcc:	str	r0, [sp, #56]	; 0x38
   25dd0:	ldr	r0, [sl, #40]	; 0x28
   25dd4:	ldr	r1, [sl, #44]	; 0x2c
   25dd8:	str	r2, [sp, #124]	; 0x7c
   25ddc:	ldr	r2, [sl, #48]	; 0x30
   25de0:	str	r3, [sp, #116]	; 0x74
   25de4:	ldr	r3, [sl, #52]	; 0x34
   25de8:	mov	r7, #1
   25dec:	str	r0, [sp, #32]
   25df0:	str	r1, [sp, #36]	; 0x24
   25df4:	str	r2, [sp, #40]	; 0x28
   25df8:	str	r3, [sp, #44]	; 0x2c
   25dfc:	str	r7, [sp, #48]	; 0x30
   25e00:	ldr	r0, [sp, #76]	; 0x4c
   25e04:	str	r0, [sp]
   25e08:	ldr	r0, [sp, #72]	; 0x48
   25e0c:	stmib	sp, {r0, ip, lr}
   25e10:	ldr	r0, [sp, #68]	; 0x44
   25e14:	str	r0, [sp, #16]
   25e18:	ldr	r0, [sp, #64]	; 0x40
   25e1c:	str	r0, [sp, #20]
   25e20:	ldr	r0, [sp, #60]	; 0x3c
   25e24:	str	r0, [sp, #24]
   25e28:	ldr	r0, [sp, #56]	; 0x38
   25e2c:	str	r0, [sp, #28]
   25e30:	ldr	r0, [sp, #128]	; 0x80
   25e34:	ldr	r2, [sp, #120]	; 0x78
   25e38:	ldr	r3, [sp, #80]	; 0x50
   25e3c:	bl	26f98 <__assert_fail@plt+0x143dc>
   25e40:	cmp	r0, #0
   25e44:	beq	26a1c <__assert_fail@plt+0x13e60>
   25e48:	movw	r1, #16473	; 0x4059
   25e4c:	movt	r1, #4
   25e50:	mov	r0, #0
   25e54:	mov	r2, #5
   25e58:	bl	1264c <dcgettext@plt>
   25e5c:	ldr	r2, [sp, #124]	; 0x7c
   25e60:	ldr	r3, [sp, #116]	; 0x74
   25e64:	b	25b88 <__assert_fail@plt+0x12fcc>
   25e68:	str	r2, [sp, #124]	; 0x7c
   25e6c:	str	r3, [sp, #116]	; 0x74
   25e70:	str	r4, [sp, #120]	; 0x78
   25e74:	ldr	r2, [sl, #-56]	; 0xffffffc8
   25e78:	ldr	r0, [sl, #-52]	; 0xffffffcc
   25e7c:	str	r0, [sp, #80]	; 0x50
   25e80:	sub	ip, sl, #48	; 0x30
   25e84:	ldm	ip, {r0, r1, r7, ip}
   25e88:	mov	r4, lr
   25e8c:	ldr	lr, [sl]
   25e90:	ldr	r3, [sl, #4]
   25e94:	stm	sp, {r0, r1, r7, ip, lr}
   25e98:	str	r3, [sp, #20]
   25e9c:	mov	r0, r4
   25ea0:	ldr	r3, [sp, #80]	; 0x50
   25ea4:	bl	26dbc <__assert_fail@plt+0x14200>
   25ea8:	mov	r7, #1
   25eac:	cmp	r0, #0
   25eb0:	beq	26a1c <__assert_fail@plt+0x13e60>
   25eb4:	ldr	r1, [r4, #24]
   25eb8:	asr	r2, r1, #31
   25ebc:	mov	ip, #0
   25ec0:	cmn	r2, #1
   25ec4:	mov	r3, #0
   25ec8:	movwgt	r3, #1
   25ecc:	ldr	r0, [sl, #-112]	; 0xffffff90
   25ed0:	ldr	lr, [sl, #-108]	; 0xffffff94
   25ed4:	adds	r0, r1, r0
   25ed8:	str	r0, [r4, #24]
   25edc:	adc	r1, r2, lr
   25ee0:	cmn	r1, #1
   25ee4:	mov	r2, #0
   25ee8:	movwgt	r2, #1
   25eec:	subs	r2, r3, r2
   25ef0:	movwne	r2, #1
   25ef4:	cmn	lr, #1
   25ef8:	movwgt	ip, #1
   25efc:	sub	r3, r3, ip
   25f00:	clz	r3, r3
   25f04:	lsr	r3, r3, #5
   25f08:	tst	r3, r2
   25f0c:	bne	26a1c <__assert_fail@plt+0x13e60>
   25f10:	asr	r2, r0, #31
   25f14:	eor	r0, r0, r0
   25f18:	eor	r1, r1, r2
   25f1c:	orrs	r0, r0, r1
   25f20:	ldr	lr, [sp, #128]	; 0x80
   25f24:	sub	ip, fp, #128	; 0x80
   25f28:	ldr	r4, [sp, #120]	; 0x78
   25f2c:	ldr	r3, [sp, #116]	; 0x74
   25f30:	ldr	r2, [sp, #124]	; 0x7c
   25f34:	beq	26480 <__assert_fail@plt+0x138c4>
   25f38:	b	26a1c <__assert_fail@plt+0x13e60>
   25f3c:	ldr	r0, [sl]
   25f40:	b	25f48 <__assert_fail@plt+0x1338c>
   25f44:	ldr	r0, [sl, #-56]	; 0xffffffc8
   25f48:	add	r0, r0, #3600	; 0xe10
   25f4c:	str	r0, [lr, #24]
   25f50:	b	26480 <__assert_fail@plt+0x138c4>
   25f54:	mov	r0, #0
   25f58:	ldr	r1, [sp, #96]	; 0x60
   25f5c:	str	r0, [r1]
   25f60:	str	r0, [r1, #4]
   25f64:	ldr	r0, [sl]
   25f68:	str	r0, [lr, #16]
   25f6c:	b	26480 <__assert_fail@plt+0x138c4>
   25f70:	mov	r0, #0
   25f74:	ldr	r1, [sp, #96]	; 0x60
   25f78:	str	r0, [r1]
   25f7c:	str	r0, [r1, #4]
   25f80:	ldr	r0, [sl, #-56]	; 0xffffffc8
   25f84:	str	r0, [lr, #16]
   25f88:	b	26480 <__assert_fail@plt+0x138c4>
   25f8c:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   25f90:	b	25f98 <__assert_fail@plt+0x133dc>
   25f94:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   25f98:	mov	r7, r2
   25f9c:	ldr	r2, [sp, #96]	; 0x60
   25fa0:	strd	r0, [r2]
   25fa4:	mov	r2, r7
   25fa8:	ldr	r0, [sl]
   25fac:	mov	r1, #1
   25fb0:	strb	r1, [lr, #187]	; 0xbb
   25fb4:	str	r0, [lr, #16]
   25fb8:	b	26480 <__assert_fail@plt+0x138c4>
   25fbc:	ldrd	r0, [sl, #-104]	; 0xffffff98
   25fc0:	b	260b8 <__assert_fail@plt+0x134fc>
   25fc4:	mov	r7, r2
   25fc8:	ldr	r0, [sl, #-208]	; 0xffffff30
   25fcc:	cmp	r0, #4
   25fd0:	blt	26840 <__assert_fail@plt+0x13c84>
   25fd4:	sub	r0, sl, #224	; 0xe0
   25fd8:	vld1.64	{d16-d17}, [r0]
   25fdc:	vldr	d18, [sl, #-208]	; 0xffffff30
   25fe0:	ldr	r0, [sp, #92]	; 0x5c
   25fe4:	vst1.64	{d16-d17}, [r0]!
   25fe8:	vstr	d18, [r0]
   25fec:	ldrd	r0, [sl, #-104]	; 0xffffff98
   25ff0:	b	260bc <__assert_fail@plt+0x13500>
   25ff4:	str	r2, [sp, #124]	; 0x7c
   25ff8:	mov	r7, r3
   25ffc:	ldrd	r0, [sl, #-104]	; 0xffffff98
   26000:	ldr	r2, [sp, #108]	; 0x6c
   26004:	strd	r0, [r2]
   26008:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   2600c:	ldr	r2, [sp, #112]	; 0x70
   26010:	strd	r0, [r2]
   26014:	ldrd	r0, [sl, #8]
   26018:	rsbs	r0, r0, #0
   2601c:	rsc	r3, r1, #0
   26020:	ldr	r2, [sp, #88]	; 0x58
   26024:	stm	r2, {r0, r3}
   26028:	and	r0, r1, r3
   2602c:	cmp	r0, #0
   26030:	blt	26a18 <__assert_fail@plt+0x13e5c>
   26034:	ldr	r0, [sl, #16]
   26038:	str	r0, [lr, #48]	; 0x30
   2603c:	b	26664 <__assert_fail@plt+0x13aa8>
   26040:	str	r2, [sp, #124]	; 0x7c
   26044:	str	r4, [sp, #120]	; 0x78
   26048:	mov	r4, r3
   2604c:	ldrd	r0, [sl, #-112]	; 0xffffff90
   26050:	ldr	r2, [sp, #112]	; 0x70
   26054:	strd	r0, [r2]
   26058:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   2605c:	rsbs	r0, r0, #0
   26060:	rsc	r3, r1, #0
   26064:	ldr	r2, [sp, #108]	; 0x6c
   26068:	stm	r2, {r0, r3}
   2606c:	and	r0, r1, r3
   26070:	mov	r7, #1
   26074:	cmp	r0, #0
   26078:	blt	26a1c <__assert_fail@plt+0x13e60>
   2607c:	ldrd	r0, [sl, #8]
   26080:	rsbs	r0, r0, #0
   26084:	rsc	r3, r1, #0
   26088:	ldr	r2, [sp, #88]	; 0x58
   2608c:	stm	r2, {r0, r3}
   26090:	and	r0, r1, r3
   26094:	cmp	r0, #0
   26098:	mov	r3, r4
   2609c:	ldr	r4, [sp, #120]	; 0x78
   260a0:	ldr	r2, [sp, #124]	; 0x7c
   260a4:	blt	26a1c <__assert_fail@plt+0x13e60>
   260a8:	ldr	r0, [sl, #16]
   260ac:	str	r0, [lr, #48]	; 0x30
   260b0:	b	26480 <__assert_fail@plt+0x138c4>
   260b4:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   260b8:	mov	r7, r2
   260bc:	ldr	r2, [sp, #112]	; 0x70
   260c0:	strd	r0, [r2]
   260c4:	ldrd	r0, [sl, #8]
   260c8:	ldr	r2, [sp, #108]	; 0x6c
   260cc:	b	26104 <__assert_fail@plt+0x13548>
   260d0:	ldrd	r0, [sl, #-168]	; 0xffffff58
   260d4:	mov	r7, r2
   260d8:	ldr	r2, [sp, #112]	; 0x70
   260dc:	strd	r0, [r2]
   260e0:	ldrd	r0, [sl, #-104]	; 0xffffff98
   260e4:	ldr	r2, [sp, #108]	; 0x6c
   260e8:	b	26128 <__assert_fail@plt+0x1356c>
   260ec:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   260f0:	mov	r7, r2
   260f4:	ldr	r2, [sp, #108]	; 0x6c
   260f8:	strd	r0, [r2]
   260fc:	ldrd	r0, [sl]
   26100:	ldr	r2, [sp, #112]	; 0x70
   26104:	strd	r0, [r2]
   26108:	mov	r2, r7
   2610c:	b	26480 <__assert_fail@plt+0x138c4>
   26110:	ldrd	r0, [sl, #-104]	; 0xffffff98
   26114:	mov	r7, r2
   26118:	ldr	r2, [sp, #108]	; 0x6c
   2611c:	strd	r0, [r2]
   26120:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   26124:	ldr	r2, [sp, #112]	; 0x70
   26128:	strd	r0, [r2]
   2612c:	mov	r2, r7
   26130:	mov	r0, sl
   26134:	vld1.64	{d16-d17}, [r0]!
   26138:	vldr	d18, [r0]
   2613c:	ldr	r0, [sp, #92]	; 0x5c
   26140:	vst1.64	{d16-d17}, [r0]!
   26144:	vstr	d18, [r0]
   26148:	b	26480 <__assert_fail@plt+0x138c4>
   2614c:	str	r2, [sp, #124]	; 0x7c
   26150:	str	r3, [sp, #116]	; 0x74
   26154:	sub	r0, sl, #112	; 0x70
   26158:	vld1.64	{d16-d17}, [r0]
   2615c:	vldr	d18, [sl, #-96]	; 0xffffffa0
   26160:	ldr	r0, [sp, #92]	; 0x5c
   26164:	vst1.64	{d16-d17}, [r0]!
   26168:	vstr	d18, [r0]
   2616c:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   26170:	rsbs	r0, r0, #0
   26174:	rsc	r3, r1, #0
   26178:	ldr	r2, [sp, #112]	; 0x70
   2617c:	stm	r2, {r0, r3}
   26180:	and	r0, r1, r3
   26184:	mov	r7, #1
   26188:	cmp	r0, #0
   2618c:	blt	26a1c <__assert_fail@plt+0x13e60>
   26190:	ldrd	r0, [sl, #8]
   26194:	rsbs	r0, r0, #0
   26198:	rsc	r3, r1, #0
   2619c:	ldr	r2, [sp, #108]	; 0x6c
   261a0:	stm	r2, {r0, r3}
   261a4:	and	r0, r1, r3
   261a8:	cmp	r0, #0
   261ac:	ldr	r3, [sp, #116]	; 0x74
   261b0:	ldr	r2, [sp, #124]	; 0x7c
   261b4:	bge	26480 <__assert_fail@plt+0x138c4>
   261b8:	b	26a1c <__assert_fail@plt+0x13e60>
   261bc:	ldr	r0, [sl, #-56]	; 0xffffffc8
   261c0:	str	r0, [sp, #120]	; 0x78
   261c4:	ldr	r0, [sl, #-52]	; 0xffffffcc
   261c8:	str	r0, [sp, #80]	; 0x50
   261cc:	ldr	r0, [sl, #-48]	; 0xffffffd0
   261d0:	str	r0, [sp, #76]	; 0x4c
   261d4:	ldr	r0, [sl, #-44]	; 0xffffffd4
   261d8:	str	r0, [sp, #72]	; 0x48
   261dc:	ldr	r7, [sl, #-40]	; 0xffffffd8
   261e0:	ldr	r0, [sl, #-36]	; 0xffffffdc
   261e4:	str	r0, [sp, #68]	; 0x44
   261e8:	ldr	lr, [sl, #-32]	; 0xffffffe0
   261ec:	ldr	r0, [sl, #-28]	; 0xffffffe4
   261f0:	str	r0, [sp, #64]	; 0x40
   261f4:	ldr	r0, [sl, #-24]	; 0xffffffe8
   261f8:	str	r0, [sp, #60]	; 0x3c
   261fc:	ldr	r0, [sl, #-20]	; 0xffffffec
   26200:	str	r0, [sp, #56]	; 0x38
   26204:	ldr	r0, [sl, #-16]
   26208:	ldr	r1, [sl, #-12]
   2620c:	str	r2, [sp, #124]	; 0x7c
   26210:	ldr	r2, [sl, #-8]
   26214:	str	r3, [sp, #116]	; 0x74
   26218:	ldmda	sl, {r3, ip}
   2621c:	str	r0, [sp, #32]
   26220:	str	r1, [sp, #36]	; 0x24
   26224:	str	r2, [sp, #40]	; 0x28
   26228:	str	r3, [sp, #44]	; 0x2c
   2622c:	str	ip, [sp, #48]	; 0x30
   26230:	ldr	r0, [sp, #76]	; 0x4c
   26234:	str	r0, [sp]
   26238:	ldr	r0, [sp, #72]	; 0x48
   2623c:	stmib	sp, {r0, r7}
   26240:	ldr	r0, [sp, #68]	; 0x44
   26244:	str	r0, [sp, #12]
   26248:	str	lr, [sp, #16]
   2624c:	ldr	r0, [sp, #64]	; 0x40
   26250:	str	r0, [sp, #20]
   26254:	ldr	r0, [sp, #60]	; 0x3c
   26258:	str	r0, [sp, #24]
   2625c:	ldr	r0, [sp, #56]	; 0x38
   26260:	str	r0, [sp, #28]
   26264:	ldr	r0, [sp, #128]	; 0x80
   26268:	ldr	r2, [sp, #120]	; 0x78
   2626c:	ldr	r3, [sp, #80]	; 0x50
   26270:	bl	26f98 <__assert_fail@plt+0x143dc>
   26274:	ldr	r2, [sp, #124]	; 0x7c
   26278:	ldr	r3, [sp, #116]	; 0x74
   2627c:	sub	ip, fp, #128	; 0x80
   26280:	ldr	lr, [sp, #128]	; 0x80
   26284:	cmp	r0, #0
   26288:	bne	26480 <__assert_fail@plt+0x138c4>
   2628c:	b	26a18 <__assert_fail@plt+0x13e5c>
   26290:	ldr	r0, [sl, #-56]	; 0xffffffc8
   26294:	ldr	r6, [sl, #-52]	; 0xffffffcc
   26298:	str	r0, [sp, #172]	; 0xac
   2629c:	mov	r3, #0
   262a0:	mov	r0, #0
   262a4:	str	r0, [sp, #168]	; 0xa8
   262a8:	mov	r2, #0
   262ac:	mov	r0, #0
   262b0:	str	r0, [sp, #164]	; 0xa4
   262b4:	mov	r0, #0
   262b8:	str	r0, [sp, #160]	; 0xa0
   262bc:	mov	r0, #0
   262c0:	str	r0, [sp, #156]	; 0x9c
   262c4:	mov	r0, #0
   262c8:	str	r0, [sp, #152]	; 0x98
   262cc:	mov	r0, #0
   262d0:	str	r0, [sp, #144]	; 0x90
   262d4:	mov	r0, #0
   262d8:	str	r0, [sp, #148]	; 0x94
   262dc:	mov	r0, #0
   262e0:	str	r0, [sp, #140]	; 0x8c
   262e4:	mov	r0, #0
   262e8:	str	r0, [sp, #136]	; 0x88
   262ec:	b	26480 <__assert_fail@plt+0x138c4>
   262f0:	mov	r3, #0
   262f4:	mov	r0, #1
   262f8:	str	r0, [sp, #172]	; 0xac
   262fc:	mov	r0, #0
   26300:	str	r0, [sp, #168]	; 0xa8
   26304:	mov	r2, #0
   26308:	mov	r0, #0
   2630c:	str	r0, [sp, #164]	; 0xa4
   26310:	mov	r0, #0
   26314:	str	r0, [sp, #160]	; 0xa0
   26318:	mov	r0, #0
   2631c:	str	r0, [sp, #156]	; 0x9c
   26320:	mov	r0, #0
   26324:	str	r0, [sp, #152]	; 0x98
   26328:	mov	r0, #0
   2632c:	str	r0, [sp, #144]	; 0x90
   26330:	mov	r0, #0
   26334:	str	r0, [sp, #148]	; 0x94
   26338:	mov	r0, #0
   2633c:	str	r0, [sp, #140]	; 0x8c
   26340:	mov	r0, #0
   26344:	str	r0, [sp, #136]	; 0x88
   26348:	b	2647c <__assert_fail@plt+0x138c0>
   2634c:	ldr	r3, [sl, #-56]	; 0xffffffc8
   26350:	ldr	r0, [sl, #-52]	; 0xffffffcc
   26354:	str	r0, [sp, #168]	; 0xa8
   26358:	b	26368 <__assert_fail@plt+0x137ac>
   2635c:	mov	r0, #0
   26360:	str	r0, [sp, #168]	; 0xa8
   26364:	mov	r3, #1
   26368:	mov	r2, #0
   2636c:	mov	r0, #0
   26370:	str	r0, [sp, #164]	; 0xa4
   26374:	mov	r0, #0
   26378:	str	r0, [sp, #160]	; 0xa0
   2637c:	mov	r0, #0
   26380:	str	r0, [sp, #156]	; 0x9c
   26384:	b	263f0 <__assert_fail@plt+0x13834>
   26388:	str	r4, [sp, #120]	; 0x78
   2638c:	ldm	sl, {r4, r7}
   26390:	cmn	r7, #1
   26394:	ble	26878 <__assert_fail@plt+0x13cbc>
   26398:	orrs	r0, r4, r7
   2639c:	beq	26998 <__assert_fail@plt+0x13ddc>
   263a0:	ldr	r2, [sl, #-56]	; 0xffffffc8
   263a4:	ldr	r6, [sl, #-52]	; 0xffffffcc
   263a8:	cmn	r6, #1
   263ac:	ble	26934 <__assert_fail@plt+0x13d78>
   263b0:	mvn	r0, #0
   263b4:	mvn	r1, #-2147483648	; 0x80000000
   263b8:	str	r2, [sp, #172]	; 0xac
   263bc:	mov	r2, r4
   263c0:	mov	r3, r7
   263c4:	bl	3e6b0 <__assert_fail@plt+0x2baf4>
   263c8:	b	268ac <__assert_fail@plt+0x13cf0>
   263cc:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   263d0:	str	r1, [sp, #156]	; 0x9c
   263d4:	str	r0, [sp, #160]	; 0xa0
   263d8:	mov	r3, #0
   263dc:	mov	r0, #0
   263e0:	str	r0, [sp, #168]	; 0xa8
   263e4:	mov	r2, #0
   263e8:	mov	r0, #0
   263ec:	str	r0, [sp, #164]	; 0xa4
   263f0:	mov	r0, #0
   263f4:	str	r0, [sp, #152]	; 0x98
   263f8:	mov	r0, #0
   263fc:	str	r0, [sp, #144]	; 0x90
   26400:	b	2645c <__assert_fail@plt+0x138a0>
   26404:	mov	r3, #0
   26408:	mov	r0, #1
   2640c:	str	r0, [sp, #160]	; 0xa0
   26410:	mov	r0, #0
   26414:	str	r0, [sp, #168]	; 0xa8
   26418:	mov	r2, #0
   2641c:	mov	r0, #0
   26420:	str	r0, [sp, #164]	; 0xa4
   26424:	b	2637c <__assert_fail@plt+0x137c0>
   26428:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   2642c:	str	r1, [sp, #144]	; 0x90
   26430:	str	r0, [sp, #152]	; 0x98
   26434:	mov	r3, #0
   26438:	mov	r0, #0
   2643c:	str	r0, [sp, #168]	; 0xa8
   26440:	mov	r2, #0
   26444:	mov	r0, #0
   26448:	str	r0, [sp, #164]	; 0xa4
   2644c:	mov	r0, #0
   26450:	str	r0, [sp, #160]	; 0xa0
   26454:	mov	r0, #0
   26458:	str	r0, [sp, #156]	; 0x9c
   2645c:	mov	r0, #0
   26460:	str	r0, [sp, #148]	; 0x94
   26464:	mov	r0, #0
   26468:	str	r0, [sp, #140]	; 0x8c
   2646c:	mov	r0, #0
   26470:	str	r0, [sp, #136]	; 0x88
   26474:	mov	r0, #0
   26478:	str	r0, [sp, #172]	; 0xac
   2647c:	mov	r6, #0
   26480:	sub	r0, r9, r9, lsl #3
   26484:	add	sl, sl, r0, lsl #3
   26488:	ldr	r0, [sp, #172]	; 0xac
   2648c:	str	r0, [sl, #56]!	; 0x38
   26490:	str	r6, [sl, #4]
   26494:	str	r3, [sl, #8]
   26498:	ldr	r0, [sp, #168]	; 0xa8
   2649c:	str	r0, [sl, #12]
   264a0:	str	r2, [sl, #16]
   264a4:	ldr	r0, [sp, #164]	; 0xa4
   264a8:	str	r0, [sl, #20]
   264ac:	ldr	r0, [sp, #160]	; 0xa0
   264b0:	str	r0, [sl, #24]
   264b4:	ldr	r0, [sp, #156]	; 0x9c
   264b8:	str	r0, [sl, #28]
   264bc:	ldr	r0, [sp, #152]	; 0x98
   264c0:	str	r0, [sl, #32]
   264c4:	ldr	r0, [sp, #144]	; 0x90
   264c8:	str	r0, [sl, #36]	; 0x24
   264cc:	ldr	r0, [sp, #148]	; 0x94
   264d0:	str	r0, [sl, #40]	; 0x28
   264d4:	ldr	r0, [sp, #140]	; 0x8c
   264d8:	str	r0, [sl, #44]	; 0x2c
   264dc:	ldr	r0, [sp, #136]	; 0x88
   264e0:	str	r0, [sl, #48]	; 0x30
   264e4:	str	r4, [sl, #52]	; 0x34
   264e8:	sub	r0, r5, r9
   264ec:	add	r1, ip, r0, lsl #1
   264f0:	ldrsh	r2, [r1]
   264f4:	movw	r1, #14608	; 0x3910
   264f8:	movt	r1, #4
   264fc:	ldrb	r1, [r1, r8]
   26500:	sub	r1, r1, #28
   26504:	movw	r3, #14700	; 0x396c
   26508:	movt	r3, #4
   2650c:	add	r3, r3, r1
   26510:	ldrsb	r3, [r3]
   26514:	add	r3, r2, r3
   26518:	cmp	r3, #112	; 0x70
   2651c:	bhi	26548 <__assert_fail@plt+0x1398c>
   26520:	movw	r4, #14176	; 0x3760
   26524:	movt	r4, #4
   26528:	add	r7, r4, r3
   2652c:	ldrsb	r7, [r7]
   26530:	cmp	r7, r2
   26534:	bne	26548 <__assert_fail@plt+0x1398c>
   26538:	movw	r1, #14289	; 0x37d1
   2653c:	movt	r1, #4
   26540:	ldrb	r4, [r1, r3]
   26544:	b	26558 <__assert_fail@plt+0x1399c>
   26548:	movw	r2, #14726	; 0x3986
   2654c:	movt	r2, #4
   26550:	add	r1, r2, r1
   26554:	ldrsb	r4, [r1]
   26558:	ldr	r3, [sp, #132]	; 0x84
   2655c:	add	r5, r0, #1
   26560:	add	r1, ip, r5, lsl #1
   26564:	strh	r4, [r1]
   26568:	cmp	r0, #17
   2656c:	ble	25640 <__assert_fail@plt+0x12a84>
   26570:	b	26a10 <__assert_fail@plt+0x13e54>
   26574:	mov	r3, #0
   26578:	mov	r0, #1
   2657c:	str	r0, [sp, #152]	; 0x98
   26580:	mov	r0, #0
   26584:	str	r0, [sp, #168]	; 0xa8
   26588:	mov	r2, #0
   2658c:	mov	r0, #0
   26590:	str	r0, [sp, #164]	; 0xa4
   26594:	mov	r0, #0
   26598:	str	r0, [sp, #160]	; 0xa0
   2659c:	mov	r0, #0
   265a0:	str	r0, [sp, #156]	; 0x9c
   265a4:	b	263f8 <__assert_fail@plt+0x1383c>
   265a8:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   265ac:	str	r1, [sp, #140]	; 0x8c
   265b0:	str	r0, [sp, #148]	; 0x94
   265b4:	mov	r3, #0
   265b8:	mov	r0, #0
   265bc:	str	r0, [sp, #168]	; 0xa8
   265c0:	mov	r2, #0
   265c4:	mov	r0, #0
   265c8:	str	r0, [sp, #164]	; 0xa4
   265cc:	mov	r0, #0
   265d0:	str	r0, [sp, #160]	; 0xa0
   265d4:	mov	r0, #0
   265d8:	str	r0, [sp, #156]	; 0x9c
   265dc:	mov	r0, #0
   265e0:	str	r0, [sp, #152]	; 0x98
   265e4:	mov	r0, #0
   265e8:	str	r0, [sp, #144]	; 0x90
   265ec:	b	2646c <__assert_fail@plt+0x138b0>
   265f0:	mov	r3, #0
   265f4:	mov	r0, #1
   265f8:	str	r0, [sp, #148]	; 0x94
   265fc:	mov	r0, #0
   26600:	str	r0, [sp, #168]	; 0xa8
   26604:	mov	r2, #0
   26608:	mov	r0, #0
   2660c:	str	r0, [sp, #164]	; 0xa4
   26610:	mov	r0, #0
   26614:	str	r0, [sp, #160]	; 0xa0
   26618:	mov	r0, #0
   2661c:	str	r0, [sp, #156]	; 0x9c
   26620:	mov	r0, #0
   26624:	str	r0, [sp, #152]	; 0x98
   26628:	mov	r0, #0
   2662c:	str	r0, [sp, #144]	; 0x90
   26630:	b	26464 <__assert_fail@plt+0x138a8>
   26634:	str	r2, [sp, #124]	; 0x7c
   26638:	mov	r7, r3
   2663c:	ldr	r6, [sl, #8]
   26640:	ldr	r1, [sl, #12]
   26644:	mov	r0, r6
   26648:	bl	27538 <__assert_fail@plt+0x1497c>
   2664c:	cmp	r0, #0
   26650:	bne	26a18 <__assert_fail@plt+0x13e5c>
   26654:	str	r6, [sp, #172]	; 0xac
   26658:	mov	r6, #0
   2665c:	ldr	lr, [sp, #128]	; 0x80
   26660:	sub	ip, fp, #128	; 0x80
   26664:	mov	r3, r7
   26668:	ldr	r2, [sp, #124]	; 0x7c
   2666c:	b	26480 <__assert_fail@plt+0x138c4>
   26670:	mov	r7, r2
   26674:	str	r3, [sp, #116]	; 0x74
   26678:	ldr	r6, [sl, #8]
   2667c:	ldr	r1, [sl, #12]
   26680:	mov	r0, r6
   26684:	bl	27538 <__assert_fail@plt+0x1497c>
   26688:	cmp	r0, #0
   2668c:	bne	26a18 <__assert_fail@plt+0x13e5c>
   26690:	str	r6, [sp, #172]	; 0xac
   26694:	mov	r6, #0
   26698:	ldr	lr, [sp, #128]	; 0x80
   2669c:	sub	ip, fp, #128	; 0x80
   266a0:	ldr	r3, [sp, #116]	; 0x74
   266a4:	mov	r2, r7
   266a8:	b	26480 <__assert_fail@plt+0x138c4>
   266ac:	str	r2, [sp, #124]	; 0x7c
   266b0:	ldr	r2, [sl]
   266b4:	str	r4, [sp, #120]	; 0x78
   266b8:	mov	r4, r3
   266bc:	ldr	r3, [sl, #4]
   266c0:	add	ip, sl, #8
   266c4:	ldm	ip, {r0, r1, r7, ip}
   266c8:	stm	sp, {r0, r1, r7, ip}
   266cc:	mov	r0, lr
   266d0:	bl	27548 <__assert_fail@plt+0x1498c>
   266d4:	ldr	r2, [sp, #124]	; 0x7c
   266d8:	mov	r3, r4
   266dc:	ldr	r4, [sp, #120]	; 0x78
   266e0:	b	25b88 <__assert_fail@plt+0x12fcc>
   266e4:	str	r2, [sp, #124]	; 0x7c
   266e8:	ldr	r2, [sl, #-56]	; 0xffffffc8
   266ec:	str	r3, [sp, #116]	; 0x74
   266f0:	ldr	r3, [sl, #-52]	; 0xffffffcc
   266f4:	sub	ip, sl, #48	; 0x30
   266f8:	ldm	ip, {r0, r1, r7, ip}
   266fc:	stm	sp, {r0, r1, r7, ip}
   26700:	mov	r0, lr
   26704:	bl	27548 <__assert_fail@plt+0x1498c>
   26708:	ldr	r0, [sl]
   2670c:	str	r0, [sp, #120]	; 0x78
   26710:	ldr	r0, [sl, #4]
   26714:	str	r0, [sp, #80]	; 0x50
   26718:	ldr	r0, [sl, #8]
   2671c:	str	r0, [sp, #76]	; 0x4c
   26720:	ldr	r0, [sl, #12]
   26724:	str	r0, [sp, #72]	; 0x48
   26728:	ldr	ip, [sl, #16]
   2672c:	ldr	lr, [sl, #20]
   26730:	ldr	r0, [sl, #24]
   26734:	str	r0, [sp, #68]	; 0x44
   26738:	ldr	r0, [sl, #28]
   2673c:	str	r0, [sp, #64]	; 0x40
   26740:	ldr	r0, [sl, #32]
   26744:	str	r0, [sp, #60]	; 0x3c
   26748:	ldr	r0, [sl, #36]	; 0x24
   2674c:	str	r0, [sp, #56]	; 0x38
   26750:	add	r2, sl, #40	; 0x28
   26754:	ldm	r2, {r0, r1, r2}
   26758:	ldr	r3, [sl, #52]	; 0x34
   2675c:	mov	r7, #1
   26760:	str	r0, [sp, #32]
   26764:	str	r1, [sp, #36]	; 0x24
   26768:	str	r2, [sp, #40]	; 0x28
   2676c:	str	r3, [sp, #44]	; 0x2c
   26770:	str	r7, [sp, #48]	; 0x30
   26774:	ldr	r0, [sp, #76]	; 0x4c
   26778:	str	r0, [sp]
   2677c:	ldr	r0, [sp, #72]	; 0x48
   26780:	stmib	sp, {r0, ip, lr}
   26784:	ldr	r0, [sp, #68]	; 0x44
   26788:	str	r0, [sp, #16]
   2678c:	ldr	r0, [sp, #64]	; 0x40
   26790:	str	r0, [sp, #20]
   26794:	ldr	r0, [sp, #60]	; 0x3c
   26798:	str	r0, [sp, #24]
   2679c:	ldr	r0, [sp, #56]	; 0x38
   267a0:	str	r0, [sp, #28]
   267a4:	ldr	r0, [sp, #128]	; 0x80
   267a8:	ldr	r2, [sp, #120]	; 0x78
   267ac:	ldr	r3, [sp, #80]	; 0x50
   267b0:	bl	26f98 <__assert_fail@plt+0x143dc>
   267b4:	ldr	r2, [sp, #124]	; 0x7c
   267b8:	ldr	r3, [sp, #116]	; 0x74
   267bc:	sub	ip, fp, #128	; 0x80
   267c0:	ldr	lr, [sp, #128]	; 0x80
   267c4:	cmp	r0, #0
   267c8:	bne	26480 <__assert_fail@plt+0x138c4>
   267cc:	b	26a1c <__assert_fail@plt+0x13e60>
   267d0:	mvn	r0, #0
   267d4:	str	r0, [sp, #172]	; 0xac
   267d8:	mvn	r6, #0
   267dc:	b	26480 <__assert_fail@plt+0x138c4>
   267e0:	ldr	r0, [sl, #8]
   267e4:	ldr	r6, [sl, #12]
   267e8:	str	r0, [sp, #172]	; 0xac
   267ec:	b	26480 <__assert_fail@plt+0x138c4>
   267f0:	ldr	r2, [sl, #-48]	; 0xffffffd0
   267f4:	ldr	r6, [sl, #-44]	; 0xffffffd4
   267f8:	cmn	r6, #1
   267fc:	ble	268fc <__assert_fail@plt+0x13d40>
   26800:	and	r0, r4, r7
   26804:	cmn	r0, #1
   26808:	beq	2692c <__assert_fail@plt+0x13d70>
   2680c:	mov	r0, #0
   26810:	mov	r1, #-2147483648	; 0x80000000
   26814:	str	r2, [sp, #172]	; 0xac
   26818:	mov	r2, r4
   2681c:	mov	r3, r7
   26820:	bl	3e5dc <__assert_fail@plt+0x2ba20>
   26824:	sub	ip, fp, #128	; 0x80
   26828:	ldr	lr, [sp, #128]	; 0x80
   2682c:	ldr	r2, [sp, #172]	; 0xac
   26830:	subs	r0, r0, r2
   26834:	sbcs	r0, r1, r6
   26838:	bge	2692c <__assert_fail@plt+0x13d70>
   2683c:	b	26a18 <__assert_fail@plt+0x13e5c>
   26840:	ldrd	r0, [sl, #-216]	; 0xffffff28
   26844:	ldr	r2, [sp, #112]	; 0x70
   26848:	strd	r0, [r2]
   2684c:	ldrd	r0, [sl, #-104]	; 0xffffff98
   26850:	ldr	r2, [sp, #108]	; 0x6c
   26854:	strd	r0, [r2]
   26858:	mov	r0, sl
   2685c:	vld1.64	{d16-d17}, [r0]!
   26860:	vldr	d18, [r0]
   26864:	ldr	r0, [sp, #92]	; 0x5c
   26868:	vst1.64	{d16-d17}, [r0]!
   2686c:	vstr	d18, [r0]
   26870:	mov	r2, r7
   26874:	b	26480 <__assert_fail@plt+0x138c4>
   26878:	ldr	r2, [sl, #-56]	; 0xffffffc8
   2687c:	ldr	r6, [sl, #-52]	; 0xffffffcc
   26880:	cmn	r6, #1
   26884:	ble	26968 <__assert_fail@plt+0x13dac>
   26888:	and	r0, r4, r7
   2688c:	cmn	r0, #1
   26890:	beq	26998 <__assert_fail@plt+0x13ddc>
   26894:	mov	r0, #0
   26898:	mov	r1, #-2147483648	; 0x80000000
   2689c:	str	r2, [sp, #172]	; 0xac
   268a0:	mov	r2, r4
   268a4:	mov	r3, r7
   268a8:	bl	3e5dc <__assert_fail@plt+0x2ba20>
   268ac:	sub	ip, fp, #128	; 0x80
   268b0:	ldr	lr, [sp, #128]	; 0x80
   268b4:	ldr	r2, [sp, #172]	; 0xac
   268b8:	subs	r0, r0, r2
   268bc:	sbcs	r0, r1, r6
   268c0:	bge	26998 <__assert_fail@plt+0x13ddc>
   268c4:	b	26a18 <__assert_fail@plt+0x13e5c>
   268c8:	and	r0, r2, r6
   268cc:	cmn	r0, #1
   268d0:	beq	2692c <__assert_fail@plt+0x13d70>
   268d4:	mov	r0, #0
   268d8:	mov	r1, #-2147483648	; 0x80000000
   268dc:	mov	r3, r6
   268e0:	bl	3e5dc <__assert_fail@plt+0x2ba20>
   268e4:	sub	ip, fp, #128	; 0x80
   268e8:	ldr	lr, [sp, #128]	; 0x80
   268ec:	subs	r0, r0, r4
   268f0:	sbcs	r0, r1, r7
   268f4:	bge	2692c <__assert_fail@plt+0x13d70>
   268f8:	b	26a18 <__assert_fail@plt+0x13e5c>
   268fc:	mvn	r0, #0
   26900:	mvn	r1, #-2147483648	; 0x80000000
   26904:	str	r2, [sp, #172]	; 0xac
   26908:	mov	r2, r4
   2690c:	mov	r3, r7
   26910:	bl	3e5dc <__assert_fail@plt+0x2ba20>
   26914:	sub	ip, fp, #128	; 0x80
   26918:	ldr	lr, [sp, #128]	; 0x80
   2691c:	ldr	r2, [sp, #172]	; 0xac
   26920:	subs	r0, r2, r0
   26924:	sbcs	r0, r6, r1
   26928:	blt	26a18 <__assert_fail@plt+0x13e5c>
   2692c:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   26930:	b	2699c <__assert_fail@plt+0x13de0>
   26934:	and	r0, r2, r6
   26938:	cmn	r0, #1
   2693c:	beq	26998 <__assert_fail@plt+0x13ddc>
   26940:	mov	r0, #0
   26944:	mov	r1, #-2147483648	; 0x80000000
   26948:	mov	r3, r6
   2694c:	bl	3e5dc <__assert_fail@plt+0x2ba20>
   26950:	sub	ip, fp, #128	; 0x80
   26954:	ldr	lr, [sp, #128]	; 0x80
   26958:	subs	r0, r0, r4
   2695c:	sbcs	r0, r1, r7
   26960:	bge	26998 <__assert_fail@plt+0x13ddc>
   26964:	b	26a18 <__assert_fail@plt+0x13e5c>
   26968:	mvn	r0, #0
   2696c:	mvn	r1, #-2147483648	; 0x80000000
   26970:	str	r2, [sp, #172]	; 0xac
   26974:	mov	r2, r4
   26978:	mov	r3, r7
   2697c:	bl	3e5dc <__assert_fail@plt+0x2ba20>
   26980:	sub	ip, fp, #128	; 0x80
   26984:	ldr	lr, [sp, #128]	; 0x80
   26988:	ldr	r2, [sp, #172]	; 0xac
   2698c:	subs	r0, r2, r0
   26990:	sbcs	r0, r6, r1
   26994:	blt	26a18 <__assert_fail@plt+0x13e5c>
   26998:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   2699c:	umull	r3, r2, r0, r4
   269a0:	mla	r0, r0, r7, r2
   269a4:	mov	r2, r3
   269a8:	mla	r0, r1, r4, r0
   269ac:	str	r0, [sp, #164]	; 0xa4
   269b0:	mov	r3, #0
   269b4:	mov	r0, #0
   269b8:	str	r0, [sp, #168]	; 0xa8
   269bc:	mov	r0, #0
   269c0:	str	r0, [sp, #160]	; 0xa0
   269c4:	mov	r0, #0
   269c8:	str	r0, [sp, #156]	; 0x9c
   269cc:	mov	r0, #0
   269d0:	str	r0, [sp, #152]	; 0x98
   269d4:	mov	r0, #0
   269d8:	str	r0, [sp, #144]	; 0x90
   269dc:	mov	r0, #0
   269e0:	str	r0, [sp, #148]	; 0x94
   269e4:	mov	r0, #0
   269e8:	str	r0, [sp, #140]	; 0x8c
   269ec:	mov	r0, #0
   269f0:	str	r0, [sp, #136]	; 0x88
   269f4:	mov	r0, #0
   269f8:	str	r0, [sp, #172]	; 0xac
   269fc:	mov	r6, #0
   26a00:	ldr	r4, [sp, #120]	; 0x78
   26a04:	b	26480 <__assert_fail@plt+0x138c4>
   26a08:	mov	r7, #0
   26a0c:	b	26a1c <__assert_fail@plt+0x13e60>
   26a10:	mov	r7, #2
   26a14:	b	26a1c <__assert_fail@plt+0x13e60>
   26a18:	mov	r7, #1
   26a1c:	mov	r0, r7
   26a20:	sub	sp, fp, #28
   26a24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26a28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26a2c:	add	fp, sp, #28
   26a30:	sub	sp, sp, #28
   26a34:	mov	r5, r1
   26a38:	mov	r8, r0
   26a3c:	b	26adc <__assert_fail@plt+0x13f20>
   26a40:	add	r4, r4, #1
   26a44:	str	r4, [r5]
   26a48:	ldrb	r7, [r4], #1
   26a4c:	mov	r0, r7
   26a50:	bl	3da58 <__assert_fail@plt+0x2ae9c>
   26a54:	cmp	r0, #0
   26a58:	bne	26a44 <__assert_fail@plt+0x13e88>
   26a5c:	mov	r0, r7
   26a60:	bl	3d86c <__assert_fail@plt+0x2acb0>
   26a64:	cmp	r0, #0
   26a68:	beq	26adc <__assert_fail@plt+0x13f20>
   26a6c:	b	26b58 <__assert_fail@plt+0x13f9c>
   26a70:	mov	r0, r6
   26a74:	bl	3d7fc <__assert_fail@plt+0x2ac40>
   26a78:	cmp	r0, #0
   26a7c:	bne	26d04 <__assert_fail@plt+0x14148>
   26a80:	cmp	r6, #40	; 0x28
   26a84:	bne	26d74 <__assert_fail@plt+0x141b8>
   26a88:	mov	r0, #0
   26a8c:	ldr	r1, [r5]
   26a90:	add	r2, r1, #1
   26a94:	str	r2, [r5]
   26a98:	ldrb	r1, [r1]
   26a9c:	cmp	r1, #40	; 0x28
   26aa0:	beq	26ac0 <__assert_fail@plt+0x13f04>
   26aa4:	cmp	r1, #41	; 0x29
   26aa8:	beq	26ad0 <__assert_fail@plt+0x13f14>
   26aac:	cmp	r1, #0
   26ab0:	beq	26b48 <__assert_fail@plt+0x13f8c>
   26ab4:	cmp	r0, #0
   26ab8:	bne	26a8c <__assert_fail@plt+0x13ed0>
   26abc:	b	26adc <__assert_fail@plt+0x13f20>
   26ac0:	add	r0, r0, #1
   26ac4:	cmp	r0, #0
   26ac8:	bne	26a8c <__assert_fail@plt+0x13ed0>
   26acc:	b	26adc <__assert_fail@plt+0x13f20>
   26ad0:	sub	r0, r0, #1
   26ad4:	cmp	r0, #0
   26ad8:	bne	26a8c <__assert_fail@plt+0x13ed0>
   26adc:	ldr	r0, [r5]
   26ae0:	ldrb	r6, [r0]
   26ae4:	b	26af8 <__assert_fail@plt+0x13f3c>
   26ae8:	ldr	r0, [r5]
   26aec:	add	r1, r0, #1
   26af0:	str	r1, [r5]
   26af4:	ldrb	r6, [r0, #1]
   26af8:	mov	r0, r6
   26afc:	bl	3da58 <__assert_fail@plt+0x2ae9c>
   26b00:	cmp	r0, #0
   26b04:	bne	26ae8 <__assert_fail@plt+0x13f2c>
   26b08:	mov	r0, r6
   26b0c:	bl	3d86c <__assert_fail@plt+0x2acb0>
   26b10:	cmp	r0, #0
   26b14:	bne	26b24 <__assert_fail@plt+0x13f68>
   26b18:	cmp	r6, #45	; 0x2d
   26b1c:	cmpne	r6, #43	; 0x2b
   26b20:	bne	26a70 <__assert_fail@plt+0x13eb4>
   26b24:	ldr	r4, [r5]
   26b28:	cmp	r6, #45	; 0x2d
   26b2c:	cmpne	r6, #43	; 0x2b
   26b30:	beq	26a40 <__assert_fail@plt+0x13e84>
   26b34:	str	r8, [sp]
   26b38:	mov	r0, #0
   26b3c:	str	r0, [sp, #4]
   26b40:	mov	r7, r6
   26b44:	b	26b70 <__assert_fail@plt+0x13fb4>
   26b48:	mov	sl, #0
   26b4c:	mov	r0, sl
   26b50:	sub	sp, fp, #28
   26b54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26b58:	str	r8, [sp]
   26b5c:	mov	r0, #1
   26b60:	cmp	r6, #45	; 0x2d
   26b64:	mvneq	r0, #0
   26b68:	str	r0, [sp, #4]
   26b6c:	sub	r4, r4, #1
   26b70:	mov	r6, #0
   26b74:	mvn	r8, #47	; 0x2f
   26b78:	movw	r9, #52428	; 0xcccc
   26b7c:	movt	r9, #3276	; 0xccc
   26b80:	mov	sl, #63	; 0x3f
   26b84:	cmn	r6, #1
   26b88:	ble	26b98 <__assert_fail@plt+0x13fdc>
   26b8c:	cmp	r6, r9
   26b90:	ble	26bac <__assert_fail@plt+0x13ff0>
   26b94:	b	26d6c <__assert_fail@plt+0x141b0>
   26b98:	beq	26bac <__assert_fail@plt+0x13ff0>
   26b9c:	mov	r0, #-2147483648	; 0x80000000
   26ba0:	sdiv	r0, r0, r6
   26ba4:	cmp	r0, #10
   26ba8:	blt	26d6c <__assert_fail@plt+0x141b0>
   26bac:	uxtab	r0, r8, r7
   26bb0:	uxtb	r1, r7
   26bb4:	ldr	r2, [sp, #4]
   26bb8:	cmp	r2, #0
   26bbc:	rsblt	r0, r1, #48	; 0x30
   26bc0:	add	r1, r6, r6, lsl #2
   26bc4:	add	r6, r0, r1, lsl #1
   26bc8:	cmp	r6, r1, lsl #1
   26bcc:	bvs	26b4c <__assert_fail@plt+0x13f90>
   26bd0:	ldrb	r7, [r4, #1]!
   26bd4:	mov	r0, r7
   26bd8:	bl	3d86c <__assert_fail@plt+0x2acb0>
   26bdc:	cmp	r0, #0
   26be0:	bne	26b84 <__assert_fail@plt+0x13fc8>
   26be4:	orr	r0, r7, #2
   26be8:	cmp	r0, #46	; 0x2e
   26bec:	bne	26cc8 <__assert_fail@plt+0x1410c>
   26bf0:	ldrb	r0, [r4, #1]
   26bf4:	bl	3d86c <__assert_fail@plt+0x2acb0>
   26bf8:	cmp	r0, #0
   26bfc:	beq	26cc8 <__assert_fail@plt+0x1410c>
   26c00:	add	r8, r4, #2
   26c04:	ldrb	r0, [r4, #1]
   26c08:	sub	r7, r0, #48	; 0x30
   26c0c:	mov	r4, #8
   26c10:	ldrb	r0, [r8]
   26c14:	add	r1, r7, r7, lsl #2
   26c18:	lsl	r7, r1, #1
   26c1c:	bl	3d86c <__assert_fail@plt+0x2acb0>
   26c20:	cmp	r0, #0
   26c24:	ldrbne	r0, [r8], #1
   26c28:	addne	r0, r7, r0
   26c2c:	subne	r7, r0, #48	; 0x30
   26c30:	subs	r4, r4, #1
   26c34:	bne	26c10 <__assert_fail@plt+0x14054>
   26c38:	ldr	r0, [sp, #4]
   26c3c:	cmn	r0, #1
   26c40:	bgt	26c6c <__assert_fail@plt+0x140b0>
   26c44:	ldrb	r0, [r8]
   26c48:	b	26c50 <__assert_fail@plt+0x14094>
   26c4c:	ldrb	r0, [r8, #1]!
   26c50:	bl	3d86c <__assert_fail@plt+0x2acb0>
   26c54:	cmp	r0, #0
   26c58:	beq	26c6c <__assert_fail@plt+0x140b0>
   26c5c:	ldrb	r0, [r8]
   26c60:	cmp	r0, #48	; 0x30
   26c64:	beq	26c4c <__assert_fail@plt+0x14090>
   26c68:	add	r7, r7, #1
   26c6c:	sub	r4, r8, #1
   26c70:	ldrb	r0, [r4, #1]!
   26c74:	bl	3d86c <__assert_fail@plt+0x2acb0>
   26c78:	cmp	r0, #0
   26c7c:	bne	26c70 <__assert_fail@plt+0x140b4>
   26c80:	ldr	r0, [sp, #4]
   26c84:	cmn	r0, #1
   26c88:	bgt	26ca8 <__assert_fail@plt+0x140ec>
   26c8c:	cmp	r7, #0
   26c90:	beq	26ca8 <__assert_fail@plt+0x140ec>
   26c94:	subs	r6, r6, #1
   26c98:	bvs	26b4c <__assert_fail@plt+0x13f90>
   26c9c:	movw	r0, #51712	; 0xca00
   26ca0:	movt	r0, #15258	; 0x3b9a
   26ca4:	sub	r7, r0, r7
   26ca8:	ldr	r0, [sp]
   26cac:	strd	r6, [r0]
   26cb0:	str	r4, [r5]
   26cb4:	mov	sl, #276	; 0x114
   26cb8:	ldr	r0, [sp, #4]
   26cbc:	cmp	r0, #0
   26cc0:	movweq	sl, #277	; 0x115
   26cc4:	b	26b4c <__assert_fail@plt+0x13f90>
   26cc8:	ldr	r1, [sp]
   26ccc:	str	r6, [r1, #8]
   26cd0:	asr	r0, r6, #31
   26cd4:	str	r0, [r1, #12]
   26cd8:	ldr	r2, [sp, #4]
   26cdc:	lsr	r0, r2, #31
   26ce0:	strb	r0, [r1]
   26ce4:	ldr	r0, [r5]
   26ce8:	sub	r0, r4, r0
   26cec:	str	r0, [r1, #16]
   26cf0:	str	r4, [r5]
   26cf4:	movw	sl, #274	; 0x112
   26cf8:	cmp	r2, #0
   26cfc:	movweq	sl, #275	; 0x113
   26d00:	b	26b4c <__assert_fail@plt+0x13f90>
   26d04:	add	r4, sp, #8
   26d08:	add	r7, r4, #19
   26d0c:	cmp	r4, r7
   26d10:	strbcc	r6, [r4], #1
   26d14:	ldr	r0, [r5]
   26d18:	add	r1, r0, #1
   26d1c:	str	r1, [r5]
   26d20:	ldrb	r6, [r0, #1]
   26d24:	mov	r0, r6
   26d28:	bl	3d7fc <__assert_fail@plt+0x2ac40>
   26d2c:	cmp	r0, #0
   26d30:	bne	26d0c <__assert_fail@plt+0x14150>
   26d34:	cmp	r6, #46	; 0x2e
   26d38:	beq	26d0c <__assert_fail@plt+0x14150>
   26d3c:	mov	r0, #0
   26d40:	strb	r0, [r4]
   26d44:	add	r1, sp, #8
   26d48:	mov	r0, r5
   26d4c:	bl	28600 <__assert_fail@plt+0x15a44>
   26d50:	cmp	r0, #0
   26d54:	beq	26d6c <__assert_fail@plt+0x141b0>
   26d58:	ldr	r2, [r0, #8]
   26d5c:	asr	r3, r2, #31
   26d60:	strd	r2, [r8]
   26d64:	ldr	sl, [r0, #4]
   26d68:	b	26b4c <__assert_fail@plt+0x13f90>
   26d6c:	mov	sl, #63	; 0x3f
   26d70:	b	26b4c <__assert_fail@plt+0x13f90>
   26d74:	ldr	r0, [r5]
   26d78:	add	r1, r0, #1
   26d7c:	str	r1, [r5]
   26d80:	ldrb	sl, [r0]
   26d84:	mov	r0, sl
   26d88:	bl	28888 <__assert_fail@plt+0x15ccc>
   26d8c:	b	26b4c <__assert_fail@plt+0x13f90>
   26d90:	str	r3, [r0, #76]	; 0x4c
   26d94:	str	r2, [r0, #72]	; 0x48
   26d98:	ldr	r1, [sp, #4]
   26d9c:	str	r1, [r0, #84]	; 0x54
   26da0:	ldr	r1, [sp]
   26da4:	str	r1, [r0, #80]	; 0x50
   26da8:	ldr	r1, [sp, #8]
   26dac:	str	r1, [r0, #88]	; 0x58
   26db0:	ldr	r1, [sp, #12]
   26db4:	str	r1, [r0, #92]	; 0x5c
   26db8:	bx	lr
   26dbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26dc0:	add	fp, sp, #28
   26dc4:	sub	sp, sp, #12
   26dc8:	mov	r4, r0
   26dcc:	ldr	r0, [fp, #16]
   26dd0:	mov	r1, #0
   26dd4:	cmp	r0, #3
   26dd8:	mov	r0, #0
   26ddc:	movwlt	r0, #1
   26de0:	ldr	sl, [fp, #28]
   26de4:	cmp	sl, #0
   26de8:	movwlt	r1, #1
   26dec:	ands	r0, r1, r0
   26df0:	ldr	r0, [fp, #8]
   26df4:	mov	r5, #100	; 0x64
   26df8:	umull	r7, r1, r0, r5
   26dfc:	ldr	r6, [fp, #12]
   26e00:	mlane	r6, r6, r5, r1
   26e04:	moveq	r7, r0
   26e08:	cmn	sl, #1
   26e0c:	ble	26e44 <__assert_fail@plt+0x14288>
   26e10:	ldr	r5, [fp, #24]
   26e14:	cmn	r6, #1
   26e18:	stmib	sp, {r2, r4}
   26e1c:	ble	26e88 <__assert_fail@plt+0x142cc>
   26e20:	mov	lr, #1
   26e24:	movw	r0, #8738	; 0x2222
   26e28:	movt	r0, #546	; 0x222
   26e2c:	movw	r1, #8738	; 0x2222
   26e30:	movt	r1, #8738	; 0x2222
   26e34:	subs	r1, r1, r7
   26e38:	sbcs	r0, r0, r6
   26e3c:	bge	26ebc <__assert_fail@plt+0x14300>
   26e40:	b	26ec0 <__assert_fail@plt+0x14304>
   26e44:	mov	r0, r7
   26e48:	mov	r1, r6
   26e4c:	mov	r2, #100	; 0x64
   26e50:	mov	r3, #0
   26e54:	bl	3e5dc <__assert_fail@plt+0x2ba20>
   26e58:	umull	r2, r3, r0, r5
   26e5c:	mla	r3, r1, r5, r3
   26e60:	subs	r2, r7, r2
   26e64:	sbc	r3, r6, r3
   26e68:	mov	r7, #60	; 0x3c
   26e6c:	umull	r0, r7, r0, r7
   26e70:	rsb	r1, r1, r1, lsl #4
   26e74:	add	r7, r7, r1, lsl #2
   26e78:	adds	r1, r0, r2
   26e7c:	adc	r7, r7, r3
   26e80:	mov	r2, #1
   26e84:	b	26f64 <__assert_fail@plt+0x143a8>
   26e88:	and	r0, r7, r6
   26e8c:	cmn	r0, #1
   26e90:	beq	26ebc <__assert_fail@plt+0x14300>
   26e94:	mov	r0, #0
   26e98:	mov	r1, #-2147483648	; 0x80000000
   26e9c:	mov	r2, r7
   26ea0:	mov	r3, r6
   26ea4:	bl	3e5dc <__assert_fail@plt+0x2ba20>
   26ea8:	mov	lr, #1
   26eac:	subs	r0, r0, #60	; 0x3c
   26eb0:	sbcs	r0, r1, #0
   26eb4:	movge	lr, #0
   26eb8:	b	26ec0 <__assert_fail@plt+0x14304>
   26ebc:	mov	lr, #0
   26ec0:	mov	r0, #60	; 0x3c
   26ec4:	umull	r1, r0, r7, r0
   26ec8:	rsb	r3, r6, r6, lsl #4
   26ecc:	add	r7, r0, r3, lsl #2
   26ed0:	adds	r0, r1, r5
   26ed4:	str	r0, [sp]
   26ed8:	adc	ip, r7, sl
   26edc:	mov	r6, #0
   26ee0:	cmn	ip, #1
   26ee4:	mov	r5, #0
   26ee8:	movwgt	r5, #1
   26eec:	cmn	r7, #1
   26ef0:	mov	r2, #0
   26ef4:	movwgt	r2, #1
   26ef8:	subs	r5, r2, r5
   26efc:	movwne	r5, #1
   26f00:	cmn	sl, #1
   26f04:	mov	r0, #0
   26f08:	movwgt	r0, #1
   26f0c:	sub	r8, r2, r0
   26f10:	clz	r9, r8
   26f14:	lsr	r4, r9, #5
   26f18:	ldr	r3, [fp, #24]
   26f1c:	subs	r1, r1, r3
   26f20:	sbc	r7, r7, sl
   26f24:	cmn	r7, #1
   26f28:	movwgt	r6, #1
   26f2c:	subs	r6, r2, r6
   26f30:	movwne	r6, #1
   26f34:	cmp	r2, r0
   26f38:	movwne	r8, #1
   26f3c:	and	r0, r8, r6
   26f40:	ldr	r2, [sp, #4]
   26f44:	ands	r2, r2, #1
   26f48:	andeq	r0, r4, r5
   26f4c:	orr	r0, lr, r0
   26f50:	eor	r2, r0, #1
   26f54:	moveq	r7, ip
   26f58:	ldr	r0, [sp]
   26f5c:	moveq	r1, r0
   26f60:	ldr	r4, [sp, #8]
   26f64:	adds	r3, r1, #1440	; 0x5a0
   26f68:	adc	r7, r7, #0
   26f6c:	mov	r0, #0
   26f70:	cmp	r2, #0
   26f74:	beq	26f90 <__assert_fail@plt+0x143d4>
   26f78:	rsbs	r2, r3, #2880	; 0xb40
   26f7c:	rscs	r2, r7, #0
   26f80:	rsbcs	r0, r1, r1, lsl #4
   26f84:	lslcs	r0, r0, #2
   26f88:	strcs	r0, [r4, #24]
   26f8c:	movcs	r0, #1
   26f90:	sub	sp, fp, #28
   26f94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26f98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26f9c:	add	fp, sp, #28
   26fa0:	sub	sp, sp, #64	; 0x40
   26fa4:	add	sl, r0, #96	; 0x60
   26fa8:	ldr	r8, [r0, #144]	; 0x90
   26fac:	ldr	ip, [fp, #24]
   26fb0:	add	r9, fp, #8
   26fb4:	ldm	r9, {r4, r5, r9}
   26fb8:	ldr	r6, [fp, #48]	; 0x30
   26fbc:	ldr	r1, [fp, #56]	; 0x38
   26fc0:	cmn	r1, #1
   26fc4:	str	r8, [fp, #-32]	; 0xffffffe0
   26fc8:	ble	2729c <__assert_fail@plt+0x146e0>
   26fcc:	ldr	r6, [r0, #104]	; 0x68
   26fd0:	str	r3, [sp, #32]
   26fd4:	mov	r1, r5
   26fd8:	ldr	lr, [r0, #108]	; 0x6c
   26fdc:	ldr	r7, [r0, #112]	; 0x70
   26fe0:	mov	r5, ip
   26fe4:	ldr	ip, [r0, #116]	; 0x74
   26fe8:	adds	r3, r6, r4
   26fec:	adc	r4, lr, r1
   26ff0:	adds	r6, r7, r9
   26ff4:	str	r6, [r0, #112]	; 0x70
   26ff8:	str	r3, [r0, #104]	; 0x68
   26ffc:	ldr	r1, [fp, #20]
   27000:	adc	r6, ip, r1
   27004:	ldr	r3, [r0, #120]	; 0x78
   27008:	adds	r3, r3, r5
   2700c:	str	r3, [r0, #120]	; 0x78
   27010:	ldr	r7, [r0, #124]	; 0x7c
   27014:	ldr	r3, [fp, #28]
   27018:	adc	r9, r7, r3
   2701c:	ldr	r3, [r0, #128]	; 0x80
   27020:	ldr	r1, [fp, #32]
   27024:	adds	r3, r3, r1
   27028:	str	r3, [r0, #128]	; 0x80
   2702c:	ldr	r1, [r0, #132]	; 0x84
   27030:	str	r1, [sp, #36]	; 0x24
   27034:	ldr	r3, [fp, #36]	; 0x24
   27038:	adc	r5, r1, r3
   2703c:	ldr	r3, [r0, #136]	; 0x88
   27040:	ldr	r1, [fp, #40]	; 0x28
   27044:	adds	r3, r3, r1
   27048:	str	r3, [r0, #136]	; 0x88
   2704c:	ldr	r3, [r0, #140]	; 0x8c
   27050:	str	r3, [sp, #40]	; 0x28
   27054:	ldr	r1, [fp, #44]	; 0x2c
   27058:	adc	r1, r3, r1
   2705c:	str	r1, [sp, #44]	; 0x2c
   27060:	ldr	r3, [fp, #48]	; 0x30
   27064:	add	r3, r8, r3
   27068:	str	r3, [fp, #-36]	; 0xffffffdc
   2706c:	str	r3, [r0, #144]	; 0x90
   27070:	str	r1, [r0, #140]	; 0x8c
   27074:	str	r5, [r0, #132]	; 0x84
   27078:	str	r9, [r0, #124]	; 0x7c
   2707c:	str	r6, [r0, #116]	; 0x74
   27080:	str	r4, [r0, #108]	; 0x6c
   27084:	ldr	r8, [sl]
   27088:	ldr	r1, [sl, #4]
   2708c:	str	r1, [fp, #-44]	; 0xffffffd4
   27090:	adds	r2, r8, r2
   27094:	ldr	r8, [sp, #32]
   27098:	adc	r3, r1, r8
   2709c:	str	r3, [fp, #-40]	; 0xffffffd8
   270a0:	strd	r2, [sl]
   270a4:	cmn	lr, #1
   270a8:	mov	r3, #0
   270ac:	movwgt	r3, #1
   270b0:	cmn	r4, #1
   270b4:	mov	r2, #0
   270b8:	movwgt	r2, #1
   270bc:	str	r3, [sp, #8]
   270c0:	subs	r2, r3, r2
   270c4:	movwne	r2, #1
   270c8:	str	r2, [sp, #4]
   270cc:	ldr	r1, [fp, #12]
   270d0:	cmn	r1, #1
   270d4:	mov	r3, #0
   270d8:	movwgt	r3, #1
   270dc:	str	r3, [sp]
   270e0:	cmn	ip, #1
   270e4:	mov	r2, #0
   270e8:	movwgt	r2, #1
   270ec:	cmn	r6, #1
   270f0:	mov	r1, #0
   270f4:	movwgt	r1, #1
   270f8:	str	r2, [sp, #20]
   270fc:	subs	r1, r2, r1
   27100:	movwne	r1, #1
   27104:	str	r1, [sp, #16]
   27108:	ldr	r1, [fp, #20]
   2710c:	cmn	r1, #1
   27110:	mov	r1, #0
   27114:	movwgt	r1, #1
   27118:	str	r1, [sp, #12]
   2711c:	cmn	r7, #1
   27120:	mov	sl, #0
   27124:	movwgt	sl, #1
   27128:	cmn	r9, #1
   2712c:	mov	r1, #0
   27130:	movwgt	r1, #1
   27134:	subs	r1, sl, r1
   27138:	movwne	r1, #1
   2713c:	str	r1, [sp, #28]
   27140:	ldr	r1, [fp, #28]
   27144:	cmn	r1, #1
   27148:	mov	r1, #0
   2714c:	movwgt	r1, #1
   27150:	str	r1, [sp, #24]
   27154:	ldr	r1, [sp, #36]	; 0x24
   27158:	cmn	r1, #1
   2715c:	mov	r3, #0
   27160:	movwgt	r3, #1
   27164:	cmn	r5, #1
   27168:	mov	r1, #0
   2716c:	movwgt	r1, #1
   27170:	subs	r1, r3, r1
   27174:	movwne	r1, #1
   27178:	ldr	r2, [fp, #36]	; 0x24
   2717c:	cmn	r2, #1
   27180:	mov	r6, #0
   27184:	movwgt	r6, #1
   27188:	ldr	r2, [sp, #40]	; 0x28
   2718c:	cmn	r2, #1
   27190:	mov	r9, #0
   27194:	movwgt	r9, #1
   27198:	ldr	r2, [sp, #44]	; 0x2c
   2719c:	cmn	r2, #1
   271a0:	mov	r5, #0
   271a4:	movwgt	r5, #1
   271a8:	subs	ip, r9, r5
   271ac:	movwne	ip, #1
   271b0:	ldr	r2, [fp, #44]	; 0x2c
   271b4:	cmn	r2, #1
   271b8:	mov	lr, #0
   271bc:	movwgt	lr, #1
   271c0:	ldr	r2, [fp, #-44]	; 0xffffffd4
   271c4:	cmn	r2, #1
   271c8:	mov	r5, #0
   271cc:	movwgt	r5, #1
   271d0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   271d4:	cmn	r2, #1
   271d8:	mov	r4, #0
   271dc:	movwgt	r4, #1
   271e0:	subs	r4, r5, r4
   271e4:	movwne	r4, #1
   271e8:	cmn	r8, #1
   271ec:	mov	r8, #0
   271f0:	movwgt	r8, #1
   271f4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   271f8:	ldr	r7, [fp, #-32]	; 0xffffffe0
   271fc:	cmp	r2, r7
   27200:	bvs	27528 <__assert_fail@plt+0x1496c>
   27204:	sub	r2, r9, lr
   27208:	clz	r2, r2
   2720c:	lsr	r2, r2, #5
   27210:	ands	r2, r2, ip
   27214:	bne	27528 <__assert_fail@plt+0x1496c>
   27218:	sub	r2, r3, r6
   2721c:	clz	r2, r2
   27220:	lsr	r2, r2, #5
   27224:	ands	r1, r2, r1
   27228:	bne	27528 <__assert_fail@plt+0x1496c>
   2722c:	ldr	r1, [sp, #24]
   27230:	sub	r1, sl, r1
   27234:	clz	r1, r1
   27238:	lsr	r1, r1, #5
   2723c:	ldr	r2, [sp, #28]
   27240:	ands	r1, r1, r2
   27244:	bne	27528 <__assert_fail@plt+0x1496c>
   27248:	ldr	r1, [sp, #20]
   2724c:	ldr	r2, [sp, #12]
   27250:	sub	r1, r1, r2
   27254:	clz	r1, r1
   27258:	lsr	r1, r1, #5
   2725c:	ldr	r2, [sp, #16]
   27260:	ands	r1, r1, r2
   27264:	bne	27528 <__assert_fail@plt+0x1496c>
   27268:	ldr	r1, [sp, #8]
   2726c:	ldr	r2, [sp]
   27270:	sub	r1, r1, r2
   27274:	clz	r1, r1
   27278:	lsr	r1, r1, #5
   2727c:	ldr	r2, [sp, #4]
   27280:	ands	r1, r1, r2
   27284:	bne	27528 <__assert_fail@plt+0x1496c>
   27288:	sub	r1, r5, r8
   2728c:	clz	r1, r1
   27290:	lsr	r1, r1, #5
   27294:	ands	r1, r1, r4
   27298:	b	27518 <__assert_fail@plt+0x1495c>
   2729c:	sub	r1, r8, r6
   272a0:	str	r1, [r0, #144]	; 0x90
   272a4:	ldr	r7, [r0, #104]	; 0x68
   272a8:	ldr	r8, [r0, #108]	; 0x6c
   272ac:	ldr	r6, [r0, #112]	; 0x70
   272b0:	ldr	r1, [r0, #116]	; 0x74
   272b4:	subs	r4, r7, r4
   272b8:	str	r4, [r0, #104]	; 0x68
   272bc:	sbc	r4, r8, r5
   272c0:	str	r4, [sp, #36]	; 0x24
   272c4:	subs	r7, r6, r9
   272c8:	str	r7, [r0, #112]	; 0x70
   272cc:	ldr	r7, [fp, #20]
   272d0:	sbc	r6, r1, r7
   272d4:	mov	r9, r1
   272d8:	ldr	r7, [r0, #120]	; 0x78
   272dc:	subs	r7, r7, ip
   272e0:	str	r7, [r0, #120]	; 0x78
   272e4:	ldr	r5, [r0, #124]	; 0x7c
   272e8:	ldr	ip, [fp, #28]
   272ec:	sbc	ip, r5, ip
   272f0:	ldr	r4, [r0, #128]	; 0x80
   272f4:	ldr	r1, [fp, #32]
   272f8:	subs	r4, r4, r1
   272fc:	str	r4, [r0, #128]	; 0x80
   27300:	ldr	lr, [r0, #132]	; 0x84
   27304:	ldr	r4, [fp, #36]	; 0x24
   27308:	sbc	r7, lr, r4
   2730c:	str	r7, [sp, #40]	; 0x28
   27310:	ldr	r4, [r0, #136]	; 0x88
   27314:	ldr	r1, [fp, #40]	; 0x28
   27318:	subs	r4, r4, r1
   2731c:	str	r4, [r0, #136]	; 0x88
   27320:	ldr	r1, [r0, #140]	; 0x8c
   27324:	str	r1, [sp, #44]	; 0x2c
   27328:	ldr	r4, [fp, #44]	; 0x2c
   2732c:	sbc	r1, r1, r4
   27330:	str	r1, [fp, #-44]	; 0xffffffd4
   27334:	str	r1, [r0, #140]	; 0x8c
   27338:	str	r7, [r0, #132]	; 0x84
   2733c:	str	ip, [r0, #124]	; 0x7c
   27340:	str	r6, [r0, #116]	; 0x74
   27344:	ldr	r7, [sp, #36]	; 0x24
   27348:	str	r7, [r0, #108]	; 0x6c
   2734c:	ldr	r4, [sl]
   27350:	ldr	r1, [sl, #4]
   27354:	str	r1, [fp, #-40]	; 0xffffffd8
   27358:	subs	r2, r4, r2
   2735c:	sbc	r4, r1, r3
   27360:	str	r4, [fp, #-36]	; 0xffffffdc
   27364:	stm	sl, {r2, r4}
   27368:	ldr	r1, [fp, #12]
   2736c:	cmn	r1, #1
   27370:	mov	r2, #0
   27374:	movwgt	r2, #1
   27378:	cmn	r8, #1
   2737c:	mov	r4, #0
   27380:	movwgt	r4, #1
   27384:	subs	r2, r4, r2
   27388:	movwne	r2, #1
   2738c:	str	r2, [sp, #32]
   27390:	cmn	r7, #1
   27394:	mov	r2, #0
   27398:	movwgt	r2, #1
   2739c:	mov	r7, r3
   273a0:	subs	r2, r4, r2
   273a4:	movwne	r2, #1
   273a8:	str	r2, [sp, #36]	; 0x24
   273ac:	ldr	r1, [fp, #20]
   273b0:	cmn	r1, #1
   273b4:	mov	r2, #0
   273b8:	movwgt	r2, #1
   273bc:	cmn	r9, #1
   273c0:	mov	r1, #0
   273c4:	movwgt	r1, #1
   273c8:	subs	r9, r1, r2
   273cc:	movwne	r9, #1
   273d0:	cmn	r6, #1
   273d4:	mov	r2, #0
   273d8:	movwgt	r2, #1
   273dc:	subs	sl, r1, r2
   273e0:	movwne	sl, #1
   273e4:	ldr	r1, [fp, #28]
   273e8:	cmn	r1, #1
   273ec:	mov	r1, #0
   273f0:	movwgt	r1, #1
   273f4:	cmn	r5, #1
   273f8:	mov	r2, #0
   273fc:	movwgt	r2, #1
   27400:	subs	r8, r2, r1
   27404:	movwne	r8, #1
   27408:	cmn	ip, #1
   2740c:	mov	r1, #0
   27410:	movwgt	r1, #1
   27414:	subs	ip, r2, r1
   27418:	movwne	ip, #1
   2741c:	ldr	r1, [fp, #36]	; 0x24
   27420:	cmn	r1, #1
   27424:	mov	r1, #0
   27428:	movwgt	r1, #1
   2742c:	cmn	lr, #1
   27430:	mov	r2, #0
   27434:	movwgt	r2, #1
   27438:	subs	lr, r2, r1
   2743c:	movwne	lr, #1
   27440:	ldr	r1, [sp, #40]	; 0x28
   27444:	cmn	r1, #1
   27448:	mov	r3, #0
   2744c:	movwgt	r3, #1
   27450:	subs	r3, r2, r3
   27454:	movwne	r3, #1
   27458:	ldr	r1, [fp, #44]	; 0x2c
   2745c:	cmn	r1, #1
   27460:	mov	r2, #0
   27464:	movwgt	r2, #1
   27468:	ldr	r1, [sp, #44]	; 0x2c
   2746c:	cmn	r1, #1
   27470:	mov	r6, #0
   27474:	movwgt	r6, #1
   27478:	subs	r4, r6, r2
   2747c:	movwne	r4, #1
   27480:	ldr	r1, [fp, #-44]	; 0xffffffd4
   27484:	cmn	r1, #1
   27488:	mov	r2, #0
   2748c:	movwgt	r2, #1
   27490:	subs	r2, r6, r2
   27494:	movwne	r2, #1
   27498:	cmn	r7, #1
   2749c:	mov	r6, #0
   274a0:	movwgt	r6, #1
   274a4:	ldr	r1, [fp, #-40]	; 0xffffffd8
   274a8:	cmn	r1, #1
   274ac:	mov	r7, #0
   274b0:	movwgt	r7, #1
   274b4:	subs	r5, r7, r6
   274b8:	movwne	r5, #1
   274bc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   274c0:	cmn	r1, #1
   274c4:	mov	r6, #0
   274c8:	movwgt	r6, #1
   274cc:	subs	r6, r7, r6
   274d0:	movwne	r6, #1
   274d4:	ldr	r7, [fp, #-32]	; 0xffffffe0
   274d8:	ldr	r1, [fp, #48]	; 0x30
   274dc:	cmp	r7, r1
   274e0:	bvs	27528 <__assert_fail@plt+0x1496c>
   274e4:	ands	r2, r4, r2
   274e8:	bne	27528 <__assert_fail@plt+0x1496c>
   274ec:	ands	r1, lr, r3
   274f0:	bne	27528 <__assert_fail@plt+0x1496c>
   274f4:	ands	r1, r8, ip
   274f8:	bne	27528 <__assert_fail@plt+0x1496c>
   274fc:	ands	r1, r9, sl
   27500:	bne	27528 <__assert_fail@plt+0x1496c>
   27504:	ldr	r1, [sp, #32]
   27508:	ldr	r2, [sp, #36]	; 0x24
   2750c:	ands	r1, r1, r2
   27510:	bne	27528 <__assert_fail@plt+0x1496c>
   27514:	ands	r1, r5, r6
   27518:	mov	r1, #0
   2751c:	moveq	r1, #1
   27520:	strbeq	r1, [r0, #153]	; 0x99
   27524:	b	2752c <__assert_fail@plt+0x14970>
   27528:	mov	r1, #0
   2752c:	mov	r0, r1
   27530:	sub	sp, fp, #28
   27534:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27538:	adds	r0, r0, #-2147483648	; 0x80000000
   2753c:	adcs	r0, r1, #0
   27540:	movwne	r0, #1
   27544:	bx	lr
   27548:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2754c:	add	fp, sp, #24
   27550:	mov	r1, r3
   27554:	mov	r4, r0
   27558:	ldr	r3, [r0, #156]	; 0x9c
   2755c:	ldr	r0, [fp, #16]
   27560:	ldr	r7, [fp, #12]
   27564:	ldr	r8, [fp, #8]
   27568:	cmp	r3, #0
   2756c:	beq	275a0 <__assert_fail@plt+0x149e4>
   27570:	mov	r6, r4
   27574:	ldr	r5, [r6, #48]!	; 0x30
   27578:	cmp	r5, #0
   2757c:	bne	275a0 <__assert_fail@plt+0x149e4>
   27580:	ldrb	r5, [r4, #153]	; 0x99
   27584:	cmp	r5, #0
   27588:	bne	275a0 <__assert_fail@plt+0x149e4>
   2758c:	cmp	r0, #2
   27590:	bgt	2768c <__assert_fail@plt+0x14ad0>
   27594:	ldr	r5, [r4, #172]	; 0xac
   27598:	cmp	r5, #0
   2759c:	bne	2768c <__assert_fail@plt+0x14ad0>
   275a0:	cmp	r0, #5
   275a4:	blt	2761c <__assert_fail@plt+0x14a60>
   275a8:	add	r1, r3, #1
   275ac:	str	r1, [r4, #156]	; 0x9c
   275b0:	sub	r0, r0, #4
   275b4:	str	r0, [r4, #48]	; 0x30
   275b8:	mov	r0, r8
   275bc:	mov	r1, r7
   275c0:	mov	r2, #100	; 0x64
   275c4:	mov	r3, #0
   275c8:	bl	3e5dc <__assert_fail@plt+0x2ba20>
   275cc:	mov	r5, r0
   275d0:	mov	r6, r1
   275d4:	mov	r0, r2
   275d8:	mov	r1, r3
   275dc:	strd	r0, [r4, #64]	; 0x40
   275e0:	mov	r0, r8
   275e4:	mov	r1, r7
   275e8:	movw	r2, #10000	; 0x2710
   275ec:	mov	r3, #0
   275f0:	bl	3e5dc <__assert_fail@plt+0x2ba20>
   275f4:	strd	r0, [r4, #40]	; 0x28
   275f8:	mov	r0, r5
   275fc:	mov	r1, r6
   27600:	mov	r2, #100	; 0x64
   27604:	mov	r3, #0
   27608:	bl	3e5dc <__assert_fail@plt+0x2ba20>
   2760c:	mov	r0, r2
   27610:	mov	r1, r3
   27614:	strd	r0, [r4, #56]	; 0x38
   27618:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2761c:	ldr	r1, [r4, #172]	; 0xac
   27620:	add	r1, r1, #1
   27624:	str	r1, [r4, #172]	; 0xac
   27628:	cmp	r0, #2
   2762c:	bgt	27644 <__assert_fail@plt+0x14a88>
   27630:	str	r8, [r4, #72]	; 0x48
   27634:	str	r7, [r4, #76]	; 0x4c
   27638:	mov	r0, #0
   2763c:	mov	r1, #0
   27640:	b	27670 <__assert_fail@plt+0x14ab4>
   27644:	mov	r5, #100	; 0x64
   27648:	mov	r0, r8
   2764c:	mov	r1, r7
   27650:	mov	r2, #100	; 0x64
   27654:	mov	r3, #0
   27658:	bl	3e5dc <__assert_fail@plt+0x2ba20>
   2765c:	strd	r0, [r4, #72]	; 0x48
   27660:	umull	r0, r2, r0, r5
   27664:	mla	r1, r1, r5, r2
   27668:	subs	r0, r8, r0
   2766c:	sbc	r1, r7, r1
   27670:	mov	r2, #0
   27674:	mov	r3, #2
   27678:	str	r3, [r4, #28]
   2767c:	add	r3, r4, #80	; 0x50
   27680:	stm	r3, {r0, r1, r2}
   27684:	str	r2, [r4, #92]	; 0x5c
   27688:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2768c:	ldr	r9, [fp, #20]
   27690:	sub	r5, r6, #16
   27694:	mov	r3, #1
   27698:	strb	r3, [r4, #180]	; 0xb4
   2769c:	str	r2, [r5]
   276a0:	str	r1, [r5, #4]
   276a4:	str	r8, [r4, #40]	; 0x28
   276a8:	str	r7, [r4, #44]	; 0x2c
   276ac:	stm	r6, {r0, r9}
   276b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   276b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   276b8:	add	fp, sp, #24
   276bc:	sub	sp, sp, #8
   276c0:	mov	r8, r2
   276c4:	mov	r5, r1
   276c8:	mov	r6, r0
   276cc:	movw	r0, #16489	; 0x4069
   276d0:	movt	r0, #4
   276d4:	bl	127cc <getenv@plt>
   276d8:	mov	r4, r0
   276dc:	bl	3cce4 <__assert_fail@plt+0x2a128>
   276e0:	cmp	r0, #0
   276e4:	moveq	r0, #0
   276e8:	subeq	sp, fp, #24
   276ec:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   276f0:	mov	r7, r0
   276f4:	str	r4, [sp]
   276f8:	mov	r0, r6
   276fc:	mov	r1, r5
   27700:	mov	r2, r8
   27704:	mov	r3, r7
   27708:	bl	27724 <__assert_fail@plt+0x14b68>
   2770c:	mov	r4, r0
   27710:	mov	r0, r7
   27714:	bl	3cd88 <__assert_fail@plt+0x2a1cc>
   27718:	mov	r0, r4
   2771c:	sub	sp, fp, #24
   27720:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   27724:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27728:	add	fp, sp, #28
   2772c:	sub	sp, sp, #628	; 0x274
   27730:	mov	r5, r3
   27734:	mov	r6, r2
   27738:	mov	r4, r1
   2773c:	str	r0, [sp, #36]	; 0x24
   27740:	cmp	r2, #0
   27744:	bne	27754 <__assert_fail@plt+0x14b98>
   27748:	sub	r6, fp, #228	; 0xe4
   2774c:	mov	r0, r6
   27750:	bl	3dd54 <__assert_fail@plt+0x2b198>
   27754:	add	r4, r4, #3
   27758:	ldr	r9, [r6]
   2775c:	ldr	r0, [r6, #4]
   27760:	str	r0, [sp, #44]	; 0x2c
   27764:	ldrb	r0, [r4, #-3]
   27768:	bl	3da58 <__assert_fail@plt+0x2ae9c>
   2776c:	add	r4, r4, #1
   27770:	cmp	r0, #0
   27774:	bne	27764 <__assert_fail@plt+0x14ba8>
   27778:	vmov.i32	q8, #0	; 0x00000000
   2777c:	mov	r0, #52	; 0x34
   27780:	sub	sl, fp, #288	; 0x120
   27784:	mov	r1, sl
   27788:	vst1.64	{d16-d17}, [r1], r0
   2778c:	mov	r2, #0
   27790:	str	r2, [r1]
   27794:	add	r0, sl, #32
   27798:	str	r0, [sp, #40]	; 0x28
   2779c:	vst1.64	{d16-d17}, [r0]
   277a0:	add	r8, sl, #16
   277a4:	vst1.64	{d16-d17}, [r8]
   277a8:	mov	r0, #0
   277ac:	str	r0, [sp, #56]	; 0x38
   277b0:	str	r2, [fp, #-240]	; 0xffffff10
   277b4:	sub	r7, r4, #4
   277b8:	movw	r1, #17079	; 0x42b7
   277bc:	movt	r1, #4
   277c0:	mov	r0, r7
   277c4:	mov	r2, #4
   277c8:	bl	12b5c <strncmp@plt>
   277cc:	cmp	r0, #0
   277d0:	str	r5, [sp, #52]	; 0x34
   277d4:	beq	279a4 <__assert_fail@plt+0x14de8>
   277d8:	mov	r0, #0
   277dc:	str	r0, [sp, #48]	; 0x30
   277e0:	add	r2, sp, #324	; 0x144
   277e4:	str	r5, [sp, #60]	; 0x3c
   277e8:	mov	r0, r5
   277ec:	mov	r1, r6
   277f0:	bl	3cdb0 <__assert_fail@plt+0x2a1f4>
   277f4:	cmp	r0, #0
   277f8:	beq	27a74 <__assert_fail@plt+0x14eb8>
   277fc:	ldrb	r1, [r7]
   27800:	add	r6, sp, #324	; 0x144
   27804:	ldm	r6, {r0, r2, r3, r6}
   27808:	str	r6, [sp, #160]	; 0xa0
   2780c:	str	r3, [sp, #168]	; 0xa8
   27810:	str	r2, [sp, #176]	; 0xb0
   27814:	str	r0, [sp, #184]	; 0xb8
   27818:	asr	r0, r6, #31
   2781c:	str	r0, [sp, #164]	; 0xa4
   27820:	asr	r3, r3, #31
   27824:	ldr	r0, [sp, #340]	; 0x154
   27828:	add	r6, r0, #1
   2782c:	ldr	r4, [sp, #344]	; 0x158
   27830:	movw	r0, #1900	; 0x76c
   27834:	adds	r5, r4, r0
   27838:	mov	r0, #0
   2783c:	str	r0, [sp, #144]	; 0x90
   27840:	str	r5, [sp, #136]	; 0x88
   27844:	str	r6, [sp, #152]	; 0x98
   27848:	str	r3, [sp, #172]	; 0xac
   2784c:	asr	r2, r2, #31
   27850:	str	r2, [sp, #180]	; 0xb4
   27854:	asr	r2, r4, #31
   27858:	adc	r2, r2, #0
   2785c:	str	r2, [sp, #140]	; 0x8c
   27860:	asr	r2, r6, #31
   27864:	str	r2, [sp, #156]	; 0x9c
   27868:	movw	r2, #64905	; 0xfd89
   2786c:	movt	r2, #3
   27870:	cmp	r1, #0
   27874:	movne	r2, r7
   27878:	str	r2, [sp, #96]	; 0x60
   2787c:	ldr	r1, [sp, #44]	; 0x2c
   27880:	str	r1, [sp, #188]	; 0xbc
   27884:	mov	r1, #2
   27888:	str	r1, [sp, #124]	; 0x7c
   2788c:	ldr	r1, [sp, #356]	; 0x164
   27890:	str	r1, [fp, #-44]	; 0xffffffd4
   27894:	add	r2, sp, #96	; 0x60
   27898:	add	r7, r2, #96	; 0x60
   2789c:	mov	r3, #48	; 0x30
   278a0:	vld1.64	{d16-d17}, [sl], r3
   278a4:	vld1.64	{d18-d19}, [r8]
   278a8:	ldr	r3, [sp, #40]	; 0x28
   278ac:	vld1.64	{d20-d21}, [r3]
   278b0:	vldr	d22, [sl]
   278b4:	vmov.i32	q12, #0	; 0x00000000
   278b8:	str	r7, [sp, #12]
   278bc:	vst1.64	{d16-d17}, [r7]
   278c0:	add	r3, r2, #112	; 0x70
   278c4:	vst1.64	{d18-d19}, [r3]
   278c8:	add	r3, r2, #128	; 0x80
   278cc:	vst1.64	{d20-d21}, [r3]
   278d0:	add	r3, r2, #172	; 0xac
   278d4:	vst1.32	{d24-d25}, [r3]
   278d8:	add	r3, r2, #156	; 0x9c
   278dc:	vst1.32	{d24-d25}, [r3]
   278e0:	strh	r0, [sp, #248]	; 0xf8
   278e4:	ldr	r3, [sp, #364]	; 0x16c
   278e8:	str	r3, [sp, #284]	; 0x11c
   278ec:	movw	r3, #269	; 0x10d
   278f0:	str	r3, [sp, #288]	; 0x120
   278f4:	str	r1, [sp, #292]	; 0x124
   278f8:	str	r0, [sp, #296]	; 0x128
   278fc:	add	r5, r2, #88	; 0x58
   27900:	add	r0, r2, #80	; 0x50
   27904:	str	r0, [sp, #16]
   27908:	add	r0, r2, #72	; 0x48
   2790c:	str	r0, [sp, #20]
   27910:	add	r0, r2, #64	; 0x40
   27914:	str	r0, [sp, #24]
   27918:	add	r0, r2, #56	; 0x38
   2791c:	str	r0, [sp, #28]
   27920:	add	r0, r2, #48	; 0x30
   27924:	str	r0, [sp, #44]	; 0x2c
   27928:	add	r0, r2, #40	; 0x28
   2792c:	str	r0, [sp, #32]
   27930:	add	r0, r2, #32
   27934:	str	r0, [sp, #40]	; 0x28
   27938:	mov	r8, #1
   2793c:	movw	sl, #42752	; 0xa700
   27940:	movt	sl, #118	; 0x76
   27944:	vstr	d22, [sp, #240]	; 0xf0
   27948:	add	r6, sp, #64	; 0x40
   2794c:	sub	r4, fp, #120	; 0x78
   27950:	mov	r7, sl
   27954:	adds	r0, r9, r7
   27958:	str	r0, [sp, #64]	; 0x40
   2795c:	bvs	27a28 <__assert_fail@plt+0x14e6c>
   27960:	ldr	r0, [sp, #60]	; 0x3c
   27964:	mov	r1, r6
   27968:	mov	r2, r4
   2796c:	bl	3cdb0 <__assert_fail@plt+0x2a1f4>
   27970:	cmp	r0, #0
   27974:	ldrne	r0, [fp, #-80]	; 0xffffffb0
   27978:	cmpne	r0, #0
   2797c:	beq	27990 <__assert_fail@plt+0x14dd4>
   27980:	ldr	r1, [fp, #-88]	; 0xffffffa8
   27984:	ldr	r2, [sp, #292]	; 0x124
   27988:	cmp	r1, r2
   2798c:	bne	27a10 <__assert_fail@plt+0x14e54>
   27990:	add	r7, r7, sl
   27994:	add	r8, r8, #1
   27998:	cmp	r8, #4
   2799c:	bcc	27954 <__assert_fail@plt+0x14d98>
   279a0:	b	27a28 <__assert_fail@plt+0x14e6c>
   279a4:	mov	r0, #1
   279a8:	mov	r1, r4
   279ac:	b	279b8 <__assert_fail@plt+0x14dfc>
   279b0:	add	r0, r0, #1
   279b4:	add	r1, r1, #1
   279b8:	ldrb	r2, [r1]
   279bc:	cmp	r2, #92	; 0x5c
   279c0:	beq	279d8 <__assert_fail@plt+0x14e1c>
   279c4:	cmp	r2, #0
   279c8:	beq	277d8 <__assert_fail@plt+0x14c1c>
   279cc:	cmp	r2, #34	; 0x22
   279d0:	bne	279b0 <__assert_fail@plt+0x14df4>
   279d4:	b	279ec <__assert_fail@plt+0x14e30>
   279d8:	ldrb	r2, [r1, #1]!
   279dc:	cmp	r2, #34	; 0x22
   279e0:	cmpne	r2, #92	; 0x5c
   279e4:	beq	279b0 <__assert_fail@plt+0x14df4>
   279e8:	b	277d8 <__assert_fail@plt+0x14c1c>
   279ec:	cmp	r0, #101	; 0x65
   279f0:	bcc	27bf8 <__assert_fail@plt+0x1503c>
   279f4:	bl	2ed04 <__assert_fail@plt+0x1c148>
   279f8:	cmp	r0, #0
   279fc:	mov	r7, r0
   27a00:	bne	27c00 <__assert_fail@plt+0x15044>
   27a04:	mov	r4, #0
   27a08:	mov	r7, #0
   27a0c:	b	27a94 <__assert_fail@plt+0x14ed8>
   27a10:	movw	r2, #269	; 0x10d
   27a14:	str	r2, [sp, #300]	; 0x12c
   27a18:	str	r0, [sp, #296]	; 0x128
   27a1c:	str	r1, [sp, #304]	; 0x130
   27a20:	mov	r0, #0
   27a24:	str	r0, [sp, #308]	; 0x134
   27a28:	ldr	r0, [sp, #284]	; 0x11c
   27a2c:	cmp	r0, #0
   27a30:	ldrne	r1, [sp, #296]	; 0x128
   27a34:	cmpne	r1, #0
   27a38:	bne	27aa8 <__assert_fail@plt+0x14eec>
   27a3c:	add	r0, sp, #96	; 0x60
   27a40:	bl	255ac <__assert_fail@plt+0x129f0>
   27a44:	cmp	r0, #0
   27a48:	beq	27a54 <__assert_fail@plt+0x14e98>
   27a4c:	mov	r0, #0
   27a50:	b	27a70 <__assert_fail@plt+0x14eb4>
   27a54:	ldrb	r0, [sp, #248]	; 0xf8
   27a58:	cmp	r0, #0
   27a5c:	beq	27ac8 <__assert_fail@plt+0x14f0c>
   27a60:	ldrd	r0, [r5]
   27a64:	ldr	r2, [sp, #36]	; 0x24
   27a68:	stm	r2, {r0, r1}
   27a6c:	mov	r0, #1
   27a70:	str	r0, [sp, #56]	; 0x38
   27a74:	ldr	r0, [sp, #52]	; 0x34
   27a78:	ldr	r1, [sp, #60]	; 0x3c
   27a7c:	cmp	r1, r0
   27a80:	beq	27a8c <__assert_fail@plt+0x14ed0>
   27a84:	mov	r0, r1
   27a88:	bl	3cd88 <__assert_fail@plt+0x2a1cc>
   27a8c:	ldr	r7, [sp, #48]	; 0x30
   27a90:	ldr	r4, [sp, #56]	; 0x38
   27a94:	mov	r0, r7
   27a98:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   27a9c:	mov	r0, r4
   27aa0:	sub	sp, fp, #28
   27aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27aa8:	bl	124cc <strcmp@plt>
   27aac:	cmp	r0, #0
   27ab0:	bne	27a3c <__assert_fail@plt+0x14e80>
   27ab4:	mov	r0, #0
   27ab8:	str	r0, [sp, #296]	; 0x128
   27abc:	mvn	r0, #0
   27ac0:	str	r0, [sp, #292]	; 0x124
   27ac4:	b	27a3c <__assert_fail@plt+0x14e80>
   27ac8:	mov	r0, #0
   27acc:	str	r0, [sp, #56]	; 0x38
   27ad0:	add	r3, sp, #252	; 0xfc
   27ad4:	ldm	r3, {r0, r1, r2, r3}
   27ad8:	ldr	r7, [sp, #272]	; 0x110
   27adc:	add	r2, r7, r2
   27ae0:	ldr	r7, [sp, #268]	; 0x10c
   27ae4:	orr	r0, r0, r7
   27ae8:	orr	r0, r0, r1
   27aec:	orr	r0, r0, r3
   27af0:	orr	r0, r0, r2
   27af4:	cmp	r0, #1
   27af8:	bgt	27a74 <__assert_fail@plt+0x14eb8>
   27afc:	ldr	r0, [sp, #32]
   27b00:	ldrd	r2, [r0]
   27b04:	ldr	r0, [sp, #40]	; 0x28
   27b08:	ldrd	r0, [r0]
   27b0c:	ldr	r7, [sp, #44]	; 0x2c
   27b10:	ldrd	r4, [r7]
   27b14:	sub	r7, fp, #76	; 0x4c
   27b18:	add	r7, r7, #20
   27b1c:	stm	sp, {r4, r5, r7}
   27b20:	bl	28938 <__assert_fail@plt+0x15d7c>
   27b24:	cmp	r0, #0
   27b28:	beq	27a74 <__assert_fail@plt+0x14eb8>
   27b2c:	ldr	r0, [sp, #28]
   27b30:	ldrd	r0, [r0]
   27b34:	cmn	r1, #1
   27b38:	mov	r2, #0
   27b3c:	movwgt	r2, #1
   27b40:	subs	r4, r0, #1
   27b44:	str	r4, [fp, #-60]	; 0xffffffc4
   27b48:	sbc	r0, r1, #0
   27b4c:	cmn	r0, #1
   27b50:	mov	r3, #0
   27b54:	movwgt	r3, #1
   27b58:	subs	r2, r2, r3
   27b5c:	movwne	r2, #1
   27b60:	cmp	r1, #0
   27b64:	mov	r1, #0
   27b68:	movwlt	r1, #1
   27b6c:	tst	r1, r2
   27b70:	asreq	r1, r4, #31
   27b74:	eoreq	r2, r4, r4
   27b78:	eoreq	r0, r0, r1
   27b7c:	orrseq	r0, r2, r0
   27b80:	bne	27a4c <__assert_fail@plt+0x14e90>
   27b84:	ldr	r0, [sp, #24]
   27b88:	ldr	r7, [r0]
   27b8c:	ldr	r1, [r0, #4]
   27b90:	str	r7, [fp, #-64]	; 0xffffffc0
   27b94:	teq	r1, r7, asr #31
   27b98:	bne	27a4c <__assert_fail@plt+0x14e90>
   27b9c:	ldr	r5, [sp, #268]	; 0x10c
   27ba0:	cmp	r5, #0
   27ba4:	bne	27bc4 <__assert_fail@plt+0x15008>
   27ba8:	ldrb	r0, [sp, #249]	; 0xf9
   27bac:	cmp	r0, #0
   27bb0:	beq	27c70 <__assert_fail@plt+0x150b4>
   27bb4:	ldr	r0, [sp, #252]	; 0xfc
   27bb8:	ldr	r1, [sp, #256]	; 0x100
   27bbc:	orrs	r0, r1, r0
   27bc0:	bne	27c70 <__assert_fail@plt+0x150b4>
   27bc4:	ldr	r0, [sp, #20]
   27bc8:	ldrd	r0, [r0]
   27bcc:	ldr	r2, [sp, #124]	; 0x7c
   27bd0:	bl	289b8 <__assert_fail@plt+0x15dfc>
   27bd4:	str	r0, [fp, #-68]	; 0xffffffbc
   27bd8:	cmp	r0, #0
   27bdc:	blt	27a4c <__assert_fail@plt+0x14e90>
   27be0:	ldr	r0, [sp, #16]
   27be4:	ldr	r0, [r0]
   27be8:	ldr	r1, [sp, #184]	; 0xb8
   27bec:	str	r1, [fp, #-76]	; 0xffffffb4
   27bf0:	str	r0, [fp, #-72]	; 0xffffffb8
   27bf4:	b	27c84 <__assert_fail@plt+0x150c8>
   27bf8:	mov	r7, #0
   27bfc:	sub	r0, fp, #220	; 0xdc
   27c00:	ldrb	r2, [r4]
   27c04:	mov	r1, r0
   27c08:	cmp	r2, #34	; 0x22
   27c0c:	beq	27c30 <__assert_fail@plt+0x15074>
   27c10:	uxtb	r2, r2
   27c14:	cmp	r2, #92	; 0x5c
   27c18:	addeq	r4, r4, #1
   27c1c:	ldrb	r2, [r4]
   27c20:	strb	r2, [r1], #1
   27c24:	ldrb	r2, [r4, #1]!
   27c28:	cmp	r2, #34	; 0x22
   27c2c:	bne	27c10 <__assert_fail@plt+0x15054>
   27c30:	mov	r2, #0
   27c34:	strb	r2, [r1]
   27c38:	bl	3cce4 <__assert_fail@plt+0x2a128>
   27c3c:	cmp	r0, #0
   27c40:	beq	27c68 <__assert_fail@plt+0x150ac>
   27c44:	str	r0, [sp, #60]	; 0x3c
   27c48:	str	r7, [sp, #48]	; 0x30
   27c4c:	ldrb	r0, [r4, #1]!
   27c50:	bl	3da58 <__assert_fail@plt+0x2ae9c>
   27c54:	cmp	r0, #0
   27c58:	bne	27c4c <__assert_fail@plt+0x15090>
   27c5c:	mov	r7, r4
   27c60:	ldr	r5, [sp, #60]	; 0x3c
   27c64:	b	277e0 <__assert_fail@plt+0x14c24>
   27c68:	mov	r4, #0
   27c6c:	b	27a94 <__assert_fail@plt+0x14ed8>
   27c70:	mov	r0, #0
   27c74:	str	r0, [fp, #-72]	; 0xffffffb8
   27c78:	str	r0, [fp, #-76]	; 0xffffffb4
   27c7c:	str	r0, [fp, #-68]	; 0xffffffbc
   27c80:	str	r0, [sp, #188]	; 0xbc
   27c84:	ldr	r0, [sp, #252]	; 0xfc
   27c88:	ldr	r1, [sp, #256]	; 0x100
   27c8c:	orr	r0, r0, r5
   27c90:	orrs	r0, r0, r1
   27c94:	mvnne	r0, #0
   27c98:	strne	r0, [fp, #-44]	; 0xffffffd4
   27c9c:	ldr	r0, [sp, #260]	; 0x104
   27ca0:	cmp	r0, #0
   27ca4:	ldr	r0, [sp, #60]	; 0x3c
   27ca8:	ldrne	r1, [sp, #116]	; 0x74
   27cac:	strne	r1, [fp, #-44]	; 0xffffffd4
   27cb0:	str	r7, [fp, #-108]	; 0xffffff94
   27cb4:	str	r4, [fp, #-104]	; 0xffffff98
   27cb8:	mvn	r1, #0
   27cbc:	str	r1, [fp, #-52]	; 0xffffffcc
   27cc0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   27cc4:	ldr	sl, [fp, #-72]	; 0xffffffb8
   27cc8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   27ccc:	ldr	r8, [fp, #-56]	; 0xffffffc8
   27cd0:	str	r2, [sp, #32]
   27cd4:	str	r2, [fp, #-120]	; 0xffffff88
   27cd8:	str	sl, [fp, #-116]	; 0xffffff8c
   27cdc:	str	r1, [sp, #44]	; 0x2c
   27ce0:	str	r1, [fp, #-112]	; 0xffffff90
   27ce4:	str	r8, [fp, #-100]	; 0xffffff9c
   27ce8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   27cec:	str	r1, [sp, #40]	; 0x28
   27cf0:	str	r1, [fp, #-88]	; 0xffffffa8
   27cf4:	sub	r5, fp, #76	; 0x4c
   27cf8:	mov	r1, r5
   27cfc:	bl	3d030 <__assert_fail@plt+0x2a474>
   27d00:	mov	r9, r0
   27d04:	sub	r0, fp, #120	; 0x78
   27d08:	mov	r1, r5
   27d0c:	bl	28a28 <__assert_fail@plt+0x15e6c>
   27d10:	cmp	r0, #0
   27d14:	beq	27d58 <__assert_fail@plt+0x1519c>
   27d18:	ldr	r0, [sp, #256]	; 0x100
   27d1c:	cmp	r0, #0
   27d20:	beq	28038 <__assert_fail@plt+0x1547c>
   27d24:	ldr	r0, [sp, #252]	; 0xfc
   27d28:	cmp	r0, #0
   27d2c:	bne	28038 <__assert_fail@plt+0x1547c>
   27d30:	ldr	r5, [sp, #104]	; 0x68
   27d34:	ldr	r4, [sp, #108]	; 0x6c
   27d38:	subs	r0, r5, #1
   27d3c:	sbcs	r0, r4, #0
   27d40:	blt	27e04 <__assert_fail@plt+0x15248>
   27d44:	ldr	r0, [sp, #112]	; 0x70
   27d48:	ldr	r1, [fp, #-52]	; 0xffffffcc
   27d4c:	subs	r0, r1, r0
   27d50:	movwne	r0, #1
   27d54:	b	27e08 <__assert_fail@plt+0x1524c>
   27d58:	mov	r0, #0
   27d5c:	str	r0, [sp, #56]	; 0x38
   27d60:	ldr	r0, [sp, #272]	; 0x110
   27d64:	cmp	r0, #0
   27d68:	beq	27a74 <__assert_fail@plt+0x14eb8>
   27d6c:	mov	r0, #88	; 0x58
   27d70:	strb	r0, [sp, #66]	; 0x42
   27d74:	movw	r0, #22616	; 0x5858
   27d78:	strh	r0, [sp, #64]	; 0x40
   27d7c:	ldr	r0, [sp, #120]	; 0x78
   27d80:	add	r1, r6, #3
   27d84:	bl	284f8 <__assert_fail@plt+0x1593c>
   27d88:	mov	r0, r6
   27d8c:	bl	3cce4 <__assert_fail@plt+0x2a128>
   27d90:	cmp	r0, #0
   27d94:	beq	27a74 <__assert_fail@plt+0x14eb8>
   27d98:	mov	r6, r0
   27d9c:	str	sl, [fp, #-72]	; 0xffffffb8
   27da0:	ldr	r0, [sp, #32]
   27da4:	str	r0, [fp, #-76]	; 0xffffffb4
   27da8:	ldr	r0, [sp, #44]	; 0x2c
   27dac:	str	r0, [fp, #-68]	; 0xffffffbc
   27db0:	str	r7, [fp, #-64]	; 0xffffffc0
   27db4:	str	r4, [fp, #-60]	; 0xffffffc4
   27db8:	str	r8, [fp, #-56]	; 0xffffffc8
   27dbc:	ldr	r0, [sp, #40]	; 0x28
   27dc0:	str	r0, [fp, #-44]	; 0xffffffd4
   27dc4:	mvn	r0, #0
   27dc8:	str	r0, [fp, #-52]	; 0xffffffcc
   27dcc:	sub	r4, fp, #76	; 0x4c
   27dd0:	mov	r0, r6
   27dd4:	mov	r1, r4
   27dd8:	bl	3d030 <__assert_fail@plt+0x2a474>
   27ddc:	mov	r9, r0
   27de0:	sub	r0, fp, #120	; 0x78
   27de4:	mov	r1, r4
   27de8:	bl	28a28 <__assert_fail@plt+0x15e6c>
   27dec:	mov	r4, r0
   27df0:	mov	r0, r6
   27df4:	bl	3cd88 <__assert_fail@plt+0x2a1cc>
   27df8:	cmp	r4, #0
   27dfc:	beq	27a74 <__assert_fail@plt+0x14eb8>
   27e00:	b	27d18 <__assert_fail@plt+0x1515c>
   27e04:	mov	r0, #0
   27e08:	subs	r0, r5, r0
   27e0c:	sbcs	r0, r4, #0
   27e10:	bge	27e34 <__assert_fail@plt+0x15278>
   27e14:	subs	r0, r5, #1
   27e18:	sbcs	r0, r4, #0
   27e1c:	blt	27e58 <__assert_fail@plt+0x1529c>
   27e20:	ldr	r0, [sp, #112]	; 0x70
   27e24:	ldr	r1, [fp, #-52]	; 0xffffffcc
   27e28:	subs	r0, r1, r0
   27e2c:	movwne	r0, #1
   27e30:	b	27e5c <__assert_fail@plt+0x152a0>
   27e34:	mov	r2, #0
   27e38:	subs	r0, r5, #1
   27e3c:	sbcs	r0, r4, #0
   27e40:	blt	27e94 <__assert_fail@plt+0x152d8>
   27e44:	ldr	r0, [sp, #112]	; 0x70
   27e48:	ldr	r1, [fp, #-52]	; 0xffffffcc
   27e4c:	subs	r0, r1, r0
   27e50:	movwne	r0, #1
   27e54:	b	27e98 <__assert_fail@plt+0x152dc>
   27e58:	mov	r0, #0
   27e5c:	subs	r0, r5, r0
   27e60:	sbc	r1, r4, #0
   27e64:	and	r0, r0, r1
   27e68:	cmn	r0, #1
   27e6c:	beq	27eec <__assert_fail@plt+0x15330>
   27e70:	mov	r3, #0
   27e74:	subs	r0, r5, #1
   27e78:	sbcs	r0, r4, #0
   27e7c:	blt	27ec4 <__assert_fail@plt+0x15308>
   27e80:	ldr	r0, [sp, #112]	; 0x70
   27e84:	ldr	r1, [fp, #-52]	; 0xffffffcc
   27e88:	subs	r0, r1, r0
   27e8c:	movwne	r0, #1
   27e90:	b	27ec8 <__assert_fail@plt+0x1530c>
   27e94:	mov	r0, #0
   27e98:	subs	r0, r5, r0
   27e9c:	str	r2, [sp, #56]	; 0x38
   27ea0:	sbc	r1, r4, r2
   27ea4:	movw	r2, #9362	; 0x2492
   27ea8:	movt	r2, #4681	; 0x1249
   27eac:	movw	r3, #37449	; 0x9249
   27eb0:	movt	r3, #18724	; 0x4924
   27eb4:	subs	r0, r3, r0
   27eb8:	sbcs	r0, r2, r1
   27ebc:	blt	27a74 <__assert_fail@plt+0x14eb8>
   27ec0:	b	27eec <__assert_fail@plt+0x15330>
   27ec4:	mov	r0, #0
   27ec8:	subs	r2, r5, r0
   27ecc:	str	r3, [sp, #56]	; 0x38
   27ed0:	sbc	r3, r4, r3
   27ed4:	mov	r0, #0
   27ed8:	mov	r1, #-2147483648	; 0x80000000
   27edc:	bl	3e5dc <__assert_fail@plt+0x2ba20>
   27ee0:	subs	r0, r0, #7
   27ee4:	sbcs	r0, r1, #0
   27ee8:	blt	27a74 <__assert_fail@plt+0x14eb8>
   27eec:	mov	r2, #0
   27ef0:	subs	r0, r5, #1
   27ef4:	sbcs	r0, r4, #0
   27ef8:	blt	27f10 <__assert_fail@plt+0x15354>
   27efc:	ldr	r0, [sp, #112]	; 0x70
   27f00:	ldr	r1, [fp, #-52]	; 0xffffffcc
   27f04:	subs	r0, r1, r0
   27f08:	movwne	r0, #1
   27f0c:	b	27f14 <__assert_fail@plt+0x15358>
   27f10:	mov	r0, #0
   27f14:	mov	r1, #7
   27f18:	subs	r0, r5, r0
   27f1c:	umull	r0, r1, r0, r1
   27f20:	str	r2, [sp, #56]	; 0x38
   27f24:	sbc	r2, r4, r2
   27f28:	rsb	r2, r2, r2, lsl #3
   27f2c:	add	r2, r1, r2
   27f30:	ldr	r1, [sp, #112]	; 0x70
   27f34:	add	r1, r1, #7
   27f38:	ldr	r3, [fp, #-52]	; 0xffffffcc
   27f3c:	sub	r1, r1, r3
   27f40:	movw	r3, #9363	; 0x2493
   27f44:	movt	r3, #37449	; 0x9249
   27f48:	smmla	r3, r1, r3, r1
   27f4c:	asr	r7, r3, #2
   27f50:	add	r3, r7, r3, lsr #31
   27f54:	sub	r3, r3, r3, lsl #3
   27f58:	add	r1, r1, r3
   27f5c:	asr	r3, r1, #31
   27f60:	adds	r1, r1, r0
   27f64:	adc	r0, r3, r2
   27f68:	cmn	r0, #1
   27f6c:	mov	r7, #0
   27f70:	movwgt	r7, #1
   27f74:	cmn	r3, #1
   27f78:	mov	r3, #0
   27f7c:	movwgt	r3, #1
   27f80:	subs	r7, r3, r7
   27f84:	movwne	r7, #1
   27f88:	cmn	r2, #1
   27f8c:	mov	r2, #0
   27f90:	movwgt	r2, #1
   27f94:	sub	r2, r3, r2
   27f98:	clz	r2, r2
   27f9c:	lsr	r2, r2, #5
   27fa0:	ands	r2, r2, r7
   27fa4:	bne	27a74 <__assert_fail@plt+0x14eb8>
   27fa8:	cmn	r0, #1
   27fac:	mov	r2, #0
   27fb0:	movwgt	r2, #1
   27fb4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   27fb8:	adds	r1, r1, r3
   27fbc:	str	r1, [fp, #-64]	; 0xffffffc0
   27fc0:	adc	r0, r0, r3, asr #31
   27fc4:	cmn	r0, #1
   27fc8:	mov	r7, #0
   27fcc:	movwgt	r7, #1
   27fd0:	subs	r7, r2, r7
   27fd4:	movwne	r7, #1
   27fd8:	asr	r3, r3, #31
   27fdc:	cmn	r3, #1
   27fe0:	mov	r3, #0
   27fe4:	movwgt	r3, #1
   27fe8:	sub	r2, r2, r3
   27fec:	clz	r2, r2
   27ff0:	lsr	r2, r2, #5
   27ff4:	tst	r2, r7
   27ff8:	bne	27a4c <__assert_fail@plt+0x14e90>
   27ffc:	mov	r2, #0
   28000:	str	r2, [sp, #56]	; 0x38
   28004:	asr	r2, r1, #31
   28008:	eor	r1, r1, r1
   2800c:	eor	r0, r0, r2
   28010:	orrs	r0, r1, r0
   28014:	bne	27a74 <__assert_fail@plt+0x14eb8>
   28018:	mvn	r0, #0
   2801c:	str	r0, [fp, #-44]	; 0xffffffd4
   28020:	sub	r1, fp, #76	; 0x4c
   28024:	ldr	r0, [sp, #60]	; 0x3c
   28028:	bl	3d030 <__assert_fail@plt+0x2a474>
   2802c:	mov	r9, r0
   28030:	cmn	r0, #1
   28034:	beq	27a74 <__assert_fail@plt+0x14eb8>
   28038:	ldr	r0, [sp, #12]
   2803c:	ldrd	r4, [r0]
   28040:	ldr	r7, [sp, #200]	; 0xc8
   28044:	ldr	r3, [sp, #204]	; 0xcc
   28048:	ldr	ip, [sp, #208]	; 0xd0
   2804c:	ldr	r0, [sp, #212]	; 0xd4
   28050:	orr	r1, r3, r5
   28054:	orr	r1, r1, r0
   28058:	orr	r6, r7, r4
   2805c:	orr	r6, r6, ip
   28060:	orrs	r1, r6, r1
   28064:	beq	281e4 <__assert_fail@plt+0x15628>
   28068:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2806c:	asr	r6, r1, #31
   28070:	mov	r2, #0
   28074:	str	r2, [sp, #56]	; 0x38
   28078:	cmn	r6, #1
   2807c:	mov	r2, #0
   28080:	movwgt	r2, #1
   28084:	adds	r1, r1, r4
   28088:	adc	r6, r6, r5
   2808c:	cmn	r6, #1
   28090:	mov	r4, #0
   28094:	movwgt	r4, #1
   28098:	subs	r4, r2, r4
   2809c:	movwne	r4, #1
   280a0:	cmn	r5, #1
   280a4:	mov	r5, #0
   280a8:	movwgt	r5, #1
   280ac:	sub	r2, r2, r5
   280b0:	clz	r2, r2
   280b4:	lsr	r2, r2, #5
   280b8:	tst	r2, r4
   280bc:	asreq	r2, r1, #31
   280c0:	eoreq	r5, r1, r1
   280c4:	eoreq	r2, r6, r2
   280c8:	orrseq	r2, r5, r2
   280cc:	bne	27a74 <__assert_fail@plt+0x14eb8>
   280d0:	ldr	r2, [fp, #-60]	; 0xffffffc4
   280d4:	asr	r6, r2, #31
   280d8:	mov	r5, #0
   280dc:	str	r5, [sp, #56]	; 0x38
   280e0:	cmn	r6, #1
   280e4:	mov	r5, #0
   280e8:	movwgt	r5, #1
   280ec:	adds	r7, r2, r7
   280f0:	adc	r6, r6, r3
   280f4:	cmn	r6, #1
   280f8:	mov	r2, #0
   280fc:	movwgt	r2, #1
   28100:	subs	r2, r5, r2
   28104:	movwne	r2, #1
   28108:	cmn	r3, #1
   2810c:	mov	r3, #0
   28110:	movwgt	r3, #1
   28114:	sub	r3, r5, r3
   28118:	clz	r3, r3
   2811c:	lsr	r3, r3, #5
   28120:	tst	r3, r2
   28124:	asreq	r2, r7, #31
   28128:	eoreq	r3, r7, r7
   2812c:	eoreq	r2, r6, r2
   28130:	orrseq	r2, r3, r2
   28134:	bne	27a74 <__assert_fail@plt+0x14eb8>
   28138:	ldr	r2, [fp, #-64]	; 0xffffffc0
   2813c:	asr	r3, r2, #31
   28140:	cmn	r3, #1
   28144:	mov	r6, #0
   28148:	movwgt	r6, #1
   2814c:	adds	r2, r2, ip
   28150:	adc	r3, r3, r0
   28154:	cmn	r3, #1
   28158:	mov	r5, #0
   2815c:	movwgt	r5, #1
   28160:	subs	r5, r6, r5
   28164:	movwne	r5, #1
   28168:	cmn	r0, #1
   2816c:	mov	r0, #0
   28170:	movwgt	r0, #1
   28174:	sub	r0, r6, r0
   28178:	clz	r0, r0
   2817c:	lsr	r0, r0, #5
   28180:	tst	r0, r5
   28184:	bne	27a4c <__assert_fail@plt+0x14e90>
   28188:	mov	r0, #0
   2818c:	str	r0, [sp, #56]	; 0x38
   28190:	asr	r0, r2, #31
   28194:	eor	r6, r2, r2
   28198:	eor	r0, r3, r0
   2819c:	orrs	r0, r6, r0
   281a0:	bne	27a74 <__assert_fail@plt+0x14eb8>
   281a4:	str	r7, [fp, #-60]	; 0xffffffc4
   281a8:	str	r1, [fp, #-56]	; 0xffffffc8
   281ac:	str	r2, [fp, #-64]	; 0xffffffc0
   281b0:	ldr	r0, [sp, #44]	; 0x2c
   281b4:	str	r0, [fp, #-68]	; 0xffffffbc
   281b8:	str	sl, [fp, #-72]	; 0xffffffb8
   281bc:	ldr	r0, [sp, #32]
   281c0:	str	r0, [fp, #-76]	; 0xffffffb4
   281c4:	ldr	r0, [sp, #40]	; 0x28
   281c8:	str	r0, [fp, #-44]	; 0xffffffd4
   281cc:	sub	r1, fp, #76	; 0x4c
   281d0:	ldr	r0, [sp, #60]	; 0x3c
   281d4:	bl	3d030 <__assert_fail@plt+0x2a474>
   281d8:	mov	r9, r0
   281dc:	cmn	r0, #1
   281e0:	beq	27a74 <__assert_fail@plt+0x14eb8>
   281e4:	ldr	r0, [sp, #272]	; 0x110
   281e8:	cmp	r0, #0
   281ec:	beq	28220 <__assert_fail@plt+0x15664>
   281f0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   281f4:	asr	r1, r0, #31
   281f8:	ldr	r2, [sp, #120]	; 0x78
   281fc:	subs	r0, r0, r2
   28200:	sbc	r1, r1, r2, asr #31
   28204:	adds	r8, r0, r9
   28208:	adc	r0, r1, r9, asr #31
   2820c:	teq	r0, r8, asr #31
   28210:	mov	r0, #0
   28214:	str	r0, [sp, #56]	; 0x38
   28218:	bne	27a74 <__assert_fail@plt+0x14eb8>
   2821c:	b	28224 <__assert_fail@plt+0x15668>
   28220:	mov	r8, r9
   28224:	ldr	r0, [sp, #188]	; 0xbc
   28228:	ldr	sl, [sp, #216]	; 0xd8
   2822c:	ldr	r7, [sp, #220]	; 0xdc
   28230:	ldr	r1, [sp, #240]	; 0xf0
   28234:	asr	r2, r1, #31
   28238:	adds	r4, r1, r0
   2823c:	adc	r6, r2, r0, asr #31
   28240:	movw	r5, #51712	; 0xca00
   28244:	movt	r5, #15258	; 0x3b9a
   28248:	mov	r0, r4
   2824c:	mov	r1, r6
   28250:	mov	r2, r5
   28254:	mov	r3, #0
   28258:	bl	3e5dc <__assert_fail@plt+0x2ba20>
   2825c:	adds	r0, r2, r5
   28260:	adc	r1, r3, #0
   28264:	mov	r2, r5
   28268:	mov	r3, #0
   2826c:	bl	3e5dc <__assert_fail@plt+0x2ba20>
   28270:	subs	r0, r4, r2
   28274:	mov	r4, r7
   28278:	str	r2, [sp, #44]	; 0x2c
   2827c:	sbc	r1, r6, r2, asr #31
   28280:	mov	r2, r5
   28284:	mov	r3, #0
   28288:	bl	3e5dc <__assert_fail@plt+0x2ba20>
   2828c:	mov	ip, r0
   28290:	mov	r9, r1
   28294:	cmn	r7, #1
   28298:	ble	282c4 <__assert_fail@plt+0x15708>
   2829c:	mov	r0, #0
   282a0:	str	r0, [sp, #56]	; 0x38
   282a4:	movw	r0, #6699	; 0x1a2b
   282a8:	movt	r0, #9
   282ac:	movw	r1, #24175	; 0x5e6f
   282b0:	movt	r1, #15437	; 0x3c4d
   282b4:	subs	r1, r1, sl
   282b8:	sbcs	r0, r0, r4
   282bc:	blt	27a74 <__assert_fail@plt+0x14eb8>
   282c0:	b	28300 <__assert_fail@plt+0x15744>
   282c4:	and	r0, sl, r4
   282c8:	cmn	r0, #1
   282cc:	beq	28300 <__assert_fail@plt+0x15744>
   282d0:	mov	r0, #0
   282d4:	str	r0, [sp, #56]	; 0x38
   282d8:	mov	r0, #0
   282dc:	mov	r1, #-2147483648	; 0x80000000
   282e0:	mov	r2, sl
   282e4:	mov	r3, r4
   282e8:	mov	r7, ip
   282ec:	bl	3e5dc <__assert_fail@plt+0x2ba20>
   282f0:	mov	ip, r7
   282f4:	subs	r0, r0, #3600	; 0xe10
   282f8:	sbcs	r0, r1, #0
   282fc:	blt	27a74 <__assert_fail@plt+0x14eb8>
   28300:	mov	r0, #3600	; 0xe10
   28304:	umull	r1, r2, sl, r0
   28308:	mla	r0, r4, r0, r2
   2830c:	asr	r2, r8, #31
   28310:	adds	r7, r8, r1
   28314:	adc	r5, r2, r0
   28318:	mov	r1, #0
   2831c:	str	r1, [sp, #56]	; 0x38
   28320:	cmn	r5, #1
   28324:	mov	r1, #0
   28328:	movwgt	r1, #1
   2832c:	cmn	r2, #1
   28330:	mov	r2, #0
   28334:	movwgt	r2, #1
   28338:	subs	r1, r2, r1
   2833c:	movwne	r1, #1
   28340:	cmn	r0, #1
   28344:	mov	r0, #0
   28348:	movwgt	r0, #1
   2834c:	sub	r0, r2, r0
   28350:	clz	r0, r0
   28354:	lsr	r0, r0, #5
   28358:	tst	r0, r1
   2835c:	bne	27a74 <__assert_fail@plt+0x14eb8>
   28360:	ldr	r4, [sp, #224]	; 0xe0
   28364:	ldr	r6, [sp, #228]	; 0xe4
   28368:	cmn	r6, #1
   2836c:	ble	28390 <__assert_fail@plt+0x157d4>
   28370:	movw	r0, #8738	; 0x2222
   28374:	movt	r0, #546	; 0x222
   28378:	movw	r1, #8738	; 0x2222
   2837c:	movt	r1, #8738	; 0x2222
   28380:	subs	r1, r1, r4
   28384:	sbcs	r0, r0, r6
   28388:	blt	27a74 <__assert_fail@plt+0x14eb8>
   2838c:	b	283cc <__assert_fail@plt+0x15810>
   28390:	and	r0, r4, r6
   28394:	cmn	r0, #1
   28398:	beq	283cc <__assert_fail@plt+0x15810>
   2839c:	mov	r0, #0
   283a0:	str	r0, [sp, #56]	; 0x38
   283a4:	mov	r0, #0
   283a8:	mov	r1, #-2147483648	; 0x80000000
   283ac:	mov	r2, r4
   283b0:	mov	r3, r6
   283b4:	mov	sl, ip
   283b8:	bl	3e5dc <__assert_fail@plt+0x2ba20>
   283bc:	mov	ip, sl
   283c0:	subs	r0, r0, #60	; 0x3c
   283c4:	sbcs	r0, r1, #0
   283c8:	blt	27a74 <__assert_fail@plt+0x14eb8>
   283cc:	mov	r0, #60	; 0x3c
   283d0:	umull	r0, r1, r4, r0
   283d4:	rsb	r2, r6, r6, lsl #4
   283d8:	add	r2, r1, r2, lsl #2
   283dc:	adds	r0, r7, r0
   283e0:	adc	r1, r5, r2
   283e4:	mov	r3, #0
   283e8:	str	r3, [sp, #56]	; 0x38
   283ec:	cmn	r1, #1
   283f0:	mov	r3, #0
   283f4:	movwgt	r3, #1
   283f8:	cmn	r5, #1
   283fc:	mov	r7, #0
   28400:	movwgt	r7, #1
   28404:	subs	r3, r7, r3
   28408:	movwne	r3, #1
   2840c:	cmn	r2, #1
   28410:	mov	r2, #0
   28414:	movwgt	r2, #1
   28418:	sub	r2, r7, r2
   2841c:	clz	r2, r2
   28420:	lsr	r2, r2, #5
   28424:	ands	r2, r2, r3
   28428:	bne	27a74 <__assert_fail@plt+0x14eb8>
   2842c:	mov	r2, #0
   28430:	str	r2, [sp, #56]	; 0x38
   28434:	cmn	r1, #1
   28438:	mov	r2, #0
   2843c:	movwgt	r2, #1
   28440:	ldr	r3, [sp, #232]	; 0xe8
   28444:	ldr	r7, [sp, #236]	; 0xec
   28448:	adds	r0, r0, r3
   2844c:	adc	r1, r1, r7
   28450:	cmn	r1, #1
   28454:	mov	r3, #0
   28458:	movwgt	r3, #1
   2845c:	subs	r3, r2, r3
   28460:	movwne	r3, #1
   28464:	cmn	r7, #1
   28468:	mov	r7, #0
   2846c:	movwgt	r7, #1
   28470:	sub	r2, r2, r7
   28474:	clz	r2, r2
   28478:	lsr	r2, r2, #5
   2847c:	ands	r2, r2, r3
   28480:	bne	27a74 <__assert_fail@plt+0x14eb8>
   28484:	mov	r2, #0
   28488:	str	r2, [sp, #56]	; 0x38
   2848c:	cmn	r1, #1
   28490:	mov	r2, #0
   28494:	movwgt	r2, #1
   28498:	adds	r0, r0, ip
   2849c:	adc	r1, r1, r9
   284a0:	cmn	r1, #1
   284a4:	mov	r3, #0
   284a8:	movwgt	r3, #1
   284ac:	subs	r3, r2, r3
   284b0:	movwne	r3, #1
   284b4:	cmn	r9, #1
   284b8:	mov	r7, #0
   284bc:	movwgt	r7, #1
   284c0:	sub	r2, r2, r7
   284c4:	clz	r2, r2
   284c8:	lsr	r2, r2, #5
   284cc:	tst	r2, r3
   284d0:	asreq	r2, r0, #31
   284d4:	eoreq	r3, r0, r0
   284d8:	eoreq	r1, r1, r2
   284dc:	orrseq	r1, r3, r1
   284e0:	bne	27a74 <__assert_fail@plt+0x14eb8>
   284e4:	ldr	r1, [sp, #36]	; 0x24
   284e8:	str	r0, [r1]
   284ec:	ldr	r0, [sp, #44]	; 0x2c
   284f0:	str	r0, [r1, #4]
   284f4:	b	27a6c <__assert_fail@plt+0x14eb0>
   284f8:	push	{r4, r5, r6, sl, fp, lr}
   284fc:	add	fp, sp, #16
   28500:	mov	r4, r1
   28504:	mov	r5, r0
   28508:	movw	r0, #46021	; 0xb3c5
   2850c:	movt	r0, #37282	; 0x91a2
   28510:	smmla	r0, r5, r0, r5
   28514:	asr	r1, r0, #11
   28518:	add	r6, r1, r0, lsr #31
   2851c:	cmp	r6, #0
   28520:	mov	r3, r6
   28524:	rsbmi	r3, r6, #0
   28528:	mov	r2, #43	; 0x2b
   2852c:	cmp	r5, #0
   28530:	movwlt	r2, #45	; 0x2d
   28534:	movw	r1, #16492	; 0x406c
   28538:	movt	r1, #4
   2853c:	mov	r0, r4
   28540:	bl	12a60 <sprintf@plt>
   28544:	mov	r1, #3600	; 0xe10
   28548:	mls	r2, r6, r1, r5
   2854c:	cmp	r2, #0
   28550:	mov	r1, r2
   28554:	rsbmi	r1, r2, #0
   28558:	cmp	r2, #0
   2855c:	popeq	{r4, r5, r6, sl, fp, pc}
   28560:	add	r5, r4, r0
   28564:	mov	ip, #58	; 0x3a
   28568:	strb	ip, [r5]
   2856c:	movw	r2, #33205	; 0x81b5
   28570:	movt	r2, #6990	; 0x1b4e
   28574:	umull	r2, r3, r1, r2
   28578:	mov	lr, #48	; 0x30
   2857c:	add	r3, lr, r3, lsr #6
   28580:	strb	r3, [r5, #1]
   28584:	movw	r3, #34953	; 0x8889
   28588:	movt	r3, #34952	; 0x8888
   2858c:	umull	r3, r6, r1, r3
   28590:	lsr	r4, r6, #5
   28594:	movw	r3, #52429	; 0xcccd
   28598:	movt	r3, #52428	; 0xcccc
   2859c:	umull	r0, r2, r4, r3
   285a0:	lsr	r0, r2, #3
   285a4:	add	r0, r0, r0, lsl #2
   285a8:	sub	r0, r4, r0, lsl #1
   285ac:	orr	r0, r0, #48	; 0x30
   285b0:	strb	r0, [r5, #2]
   285b4:	lsl	r0, r4, #4
   285b8:	sub	r0, r0, r6, lsr #5
   285bc:	sub	r6, r1, r0, lsl #2
   285c0:	add	r1, r5, #3
   285c4:	cmp	r6, #0
   285c8:	beq	285f4 <__assert_fail@plt+0x15a38>
   285cc:	strb	ip, [r1]
   285d0:	umull	r0, r2, r6, r3
   285d4:	orr	r0, lr, r2, lsr #3
   285d8:	strb	r0, [r1, #1]
   285dc:	lsr	r0, r2, #3
   285e0:	add	r0, r0, r0, lsl #2
   285e4:	sub	r0, r6, r0, lsl #1
   285e8:	orr	r0, r0, #48	; 0x30
   285ec:	strb	r0, [r1, #2]
   285f0:	add	r1, r1, #3
   285f4:	mov	r0, #0
   285f8:	strb	r0, [r1]
   285fc:	pop	{r4, r5, r6, sl, fp, pc}
   28600:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   28604:	add	fp, sp, #24
   28608:	mov	r4, r1
   2860c:	mov	r8, r0
   28610:	ldrb	r0, [r1]
   28614:	cmp	r0, #0
   28618:	beq	2863c <__assert_fail@plt+0x15a80>
   2861c:	add	r5, r4, #1
   28620:	uxtb	r0, r0
   28624:	bl	3dae0 <__assert_fail@plt+0x2af24>
   28628:	strb	r0, [r5, #-1]
   2862c:	ldrb	r0, [r5]
   28630:	add	r5, r5, #1
   28634:	cmp	r0, #0
   28638:	bne	28620 <__assert_fail@plt+0x15a64>
   2863c:	movw	r6, #14752	; 0x39a0
   28640:	movt	r6, #4
   28644:	movw	r1, #16499	; 0x4073
   28648:	movt	r1, #4
   2864c:	mov	r0, r4
   28650:	bl	124cc <strcmp@plt>
   28654:	cmp	r0, #0
   28658:	beq	28704 <__assert_fail@plt+0x15b48>
   2865c:	ldr	r1, [r6, #12]!
   28660:	cmp	r1, #0
   28664:	bne	2864c <__assert_fail@plt+0x15a90>
   28668:	mov	r0, r4
   2866c:	bl	1288c <strlen@plt>
   28670:	mov	r7, r0
   28674:	cmp	r0, #3
   28678:	beq	28698 <__assert_fail@plt+0x15adc>
   2867c:	cmp	r7, #4
   28680:	bne	286a0 <__assert_fail@plt+0x15ae4>
   28684:	ldrb	r0, [r4, #3]
   28688:	sub	r0, r0, #46	; 0x2e
   2868c:	clz	r0, r0
   28690:	lsr	r5, r0, #5
   28694:	b	286a4 <__assert_fail@plt+0x15ae8>
   28698:	mov	r5, #1
   2869c:	b	286a4 <__assert_fail@plt+0x15ae8>
   286a0:	mov	r5, #0
   286a4:	movw	r6, #14812	; 0x39dc
   286a8:	movt	r6, #4
   286ac:	movw	r1, #16515	; 0x4083
   286b0:	movt	r1, #4
   286b4:	mov	r0, r4
   286b8:	cmp	r5, #0
   286bc:	beq	286d4 <__assert_fail@plt+0x15b18>
   286c0:	mov	r2, #3
   286c4:	bl	12b5c <strncmp@plt>
   286c8:	cmp	r0, #0
   286cc:	bne	286e0 <__assert_fail@plt+0x15b24>
   286d0:	b	28704 <__assert_fail@plt+0x15b48>
   286d4:	bl	124cc <strcmp@plt>
   286d8:	cmp	r0, #0
   286dc:	beq	28704 <__assert_fail@plt+0x15b48>
   286e0:	ldr	r1, [r6, #12]!
   286e4:	cmp	r1, #0
   286e8:	bne	286b4 <__assert_fail@plt+0x15af8>
   286ec:	mov	r0, r8
   286f0:	mov	r1, r4
   286f4:	bl	2888c <__assert_fail@plt+0x15cd0>
   286f8:	mov	r6, r0
   286fc:	cmp	r0, #0
   28700:	beq	2870c <__assert_fail@plt+0x15b50>
   28704:	mov	r0, r6
   28708:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2870c:	movw	r1, #16883	; 0x41f3
   28710:	movt	r1, #4
   28714:	mov	r0, r4
   28718:	bl	124cc <strcmp@plt>
   2871c:	cmp	r0, #0
   28720:	beq	2886c <__assert_fail@plt+0x15cb0>
   28724:	movw	r6, #15124	; 0x3b14
   28728:	movt	r6, #4
   2872c:	movw	r1, #16887	; 0x41f7
   28730:	movt	r1, #4
   28734:	mov	r0, r4
   28738:	bl	124cc <strcmp@plt>
   2873c:	cmp	r0, #0
   28740:	beq	28704 <__assert_fail@plt+0x15b48>
   28744:	ldr	r1, [r6, #12]!
   28748:	cmp	r1, #0
   2874c:	bne	28734 <__assert_fail@plt+0x15b78>
   28750:	sub	r5, r7, #1
   28754:	ldrb	r0, [r4, r5]
   28758:	cmp	r0, #83	; 0x53
   2875c:	bne	2879c <__assert_fail@plt+0x15be0>
   28760:	mov	r0, #0
   28764:	strb	r0, [r4, r5]
   28768:	movw	r6, #15124	; 0x3b14
   2876c:	movt	r6, #4
   28770:	movw	r1, #16887	; 0x41f7
   28774:	movt	r1, #4
   28778:	mov	r0, r4
   2877c:	bl	124cc <strcmp@plt>
   28780:	cmp	r0, #0
   28784:	beq	28704 <__assert_fail@plt+0x15b48>
   28788:	ldr	r1, [r6, #12]!
   2878c:	cmp	r1, #0
   28790:	bne	28778 <__assert_fail@plt+0x15bbc>
   28794:	mov	r0, #83	; 0x53
   28798:	strb	r0, [r4, r5]
   2879c:	movw	r6, #15256	; 0x3b98
   287a0:	movt	r6, #4
   287a4:	movw	r1, #16940	; 0x422c
   287a8:	movt	r1, #4
   287ac:	mov	r0, r4
   287b0:	bl	124cc <strcmp@plt>
   287b4:	cmp	r0, #0
   287b8:	beq	28704 <__assert_fail@plt+0x15b48>
   287bc:	ldr	r1, [r6, #12]!
   287c0:	cmp	r1, #0
   287c4:	bne	287ac <__assert_fail@plt+0x15bf0>
   287c8:	cmp	r7, #1
   287cc:	bne	287fc <__assert_fail@plt+0x15c40>
   287d0:	ldrb	r0, [r4]
   287d4:	movw	r6, #15508	; 0x3c94
   287d8:	movt	r6, #4
   287dc:	movw	r1, #17069	; 0x42ad
   287e0:	movt	r1, #4
   287e4:	ldrb	r1, [r1]
   287e8:	cmp	r0, r1
   287ec:	beq	28704 <__assert_fail@plt+0x15b48>
   287f0:	ldr	r1, [r6, #12]!
   287f4:	cmp	r1, #0
   287f8:	bne	287e4 <__assert_fail@plt+0x15c28>
   287fc:	ldrb	r0, [r4]
   28800:	cmp	r0, #0
   28804:	beq	2887c <__assert_fail@plt+0x15cc0>
   28808:	add	r1, r4, #1
   2880c:	mov	r0, #0
   28810:	mov	r2, r4
   28814:	ldrb	r3, [r1, #-1]
   28818:	ldrb	r7, [r1]
   2881c:	cmp	r3, #46	; 0x2e
   28820:	addne	r2, r2, #1
   28824:	strb	r7, [r2]
   28828:	sub	r3, r3, #46	; 0x2e
   2882c:	clz	r3, r3
   28830:	lsr	r3, r3, #5
   28834:	orr	r0, r0, r3
   28838:	add	r1, r1, #1
   2883c:	cmp	r7, #0
   28840:	bne	28814 <__assert_fail@plt+0x15c58>
   28844:	tst	r0, #1
   28848:	beq	2887c <__assert_fail@plt+0x15cc0>
   2884c:	mov	r0, r8
   28850:	mov	r1, r4
   28854:	bl	2888c <__assert_fail@plt+0x15cd0>
   28858:	mov	r6, r0
   2885c:	cmp	r0, #0
   28860:	moveq	r6, #0
   28864:	mov	r0, r6
   28868:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2886c:	movw	r6, #15112	; 0x3b08
   28870:	movt	r6, #4
   28874:	mov	r0, r6
   28878:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2887c:	mov	r6, #0
   28880:	mov	r0, r6
   28884:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28888:	bx	lr
   2888c:	push	{r4, r5, r6, sl, fp, lr}
   28890:	add	fp, sp, #16
   28894:	mov	r4, r1
   28898:	mov	r6, r0
   2889c:	movw	r5, #15820	; 0x3dcc
   288a0:	movt	r5, #4
   288a4:	movw	r1, #16686	; 0x412e
   288a8:	movt	r1, #4
   288ac:	mov	r0, r4
   288b0:	bl	124cc <strcmp@plt>
   288b4:	cmp	r0, #0
   288b8:	beq	28930 <__assert_fail@plt+0x15d74>
   288bc:	ldr	r1, [r5, #12]!
   288c0:	cmp	r1, #0
   288c4:	bne	288ac <__assert_fail@plt+0x15cf0>
   288c8:	ldr	r1, [r6, #188]	; 0xbc
   288cc:	cmp	r1, #0
   288d0:	beq	288f4 <__assert_fail@plt+0x15d38>
   288d4:	add	r5, r6, #200	; 0xc8
   288d8:	mov	r0, r4
   288dc:	bl	124cc <strcmp@plt>
   288e0:	cmp	r0, #0
   288e4:	beq	2892c <__assert_fail@plt+0x15d70>
   288e8:	ldr	r1, [r5], #12
   288ec:	cmp	r1, #0
   288f0:	bne	288d8 <__assert_fail@plt+0x15d1c>
   288f4:	movw	r5, #15868	; 0x3dfc
   288f8:	movt	r5, #4
   288fc:	movw	r1, #16697	; 0x4139
   28900:	movt	r1, #4
   28904:	mov	r0, r4
   28908:	bl	124cc <strcmp@plt>
   2890c:	cmp	r0, #0
   28910:	beq	28930 <__assert_fail@plt+0x15d74>
   28914:	ldr	r1, [r5, #12]!
   28918:	cmp	r1, #0
   2891c:	bne	28904 <__assert_fail@plt+0x15d48>
   28920:	mov	r5, #0
   28924:	mov	r0, r5
   28928:	pop	{r4, r5, r6, sl, fp, pc}
   2892c:	sub	r5, r5, #12
   28930:	mov	r0, r5
   28934:	pop	{r4, r5, r6, sl, fp, pc}
   28938:	ldr	ip, [sp, #8]
   2893c:	cmp	r3, #0
   28940:	blt	28990 <__assert_fail@plt+0x15dd4>
   28944:	ldr	r1, [sp]
   28948:	cmp	r1, #2
   2894c:	bne	2897c <__assert_fail@plt+0x15dc0>
   28950:	mov	r1, #0
   28954:	subs	r0, r2, #69	; 0x45
   28958:	sbcs	r0, r3, #0
   2895c:	movwlt	r1, #1
   28960:	movw	r0, #1900	; 0x76c
   28964:	cmp	r1, #0
   28968:	movwne	r0, #2000	; 0x7d0
   2896c:	adds	r2, r0, r2
   28970:	adc	r3, r3, #0
   28974:	cmn	r3, #1
   28978:	ble	28990 <__assert_fail@plt+0x15dd4>
   2897c:	movw	r0, #1900	; 0x76c
   28980:	subs	r1, r2, r0
   28984:	str	r1, [ip]
   28988:	sbc	r2, r3, #0
   2898c:	b	289a8 <__assert_fail@plt+0x15dec>
   28990:	movw	r0, #63636	; 0xf894
   28994:	movt	r0, #65535	; 0xffff
   28998:	subs	r1, r0, r2
   2899c:	str	r1, [ip]
   289a0:	mvn	r0, #0
   289a4:	sbc	r2, r0, r3
   289a8:	mov	r0, #0
   289ac:	teq	r2, r1, asr #31
   289b0:	moveq	r0, #1
   289b4:	bx	lr
   289b8:	cmp	r2, #0
   289bc:	beq	289f4 <__assert_fail@plt+0x15e38>
   289c0:	cmp	r2, #1
   289c4:	bne	28a18 <__assert_fail@plt+0x15e5c>
   289c8:	eor	r2, r0, #12
   289cc:	orrs	r2, r2, r1
   289d0:	mvn	r2, #0
   289d4:	movweq	r2, #12
   289d8:	subs	r3, r0, #1
   289dc:	sbc	r1, r1, #0
   289e0:	subs	r3, r3, #11
   289e4:	sbcs	r1, r1, #0
   289e8:	addcc	r2, r0, #12
   289ec:	mov	r0, r2
   289f0:	bx	lr
   289f4:	eor	r2, r0, #12
   289f8:	orrs	r2, r2, r1
   289fc:	mvnne	r2, #0
   28a00:	subs	r3, r0, #1
   28a04:	sbc	r1, r1, #0
   28a08:	subs	r3, r3, #11
   28a0c:	sbcs	r1, r1, #0
   28a10:	movcs	r0, r2
   28a14:	bx	lr
   28a18:	subs	r2, r0, #24
   28a1c:	sbcs	r1, r1, #0
   28a20:	mvncs	r0, #0
   28a24:	bx	lr
   28a28:	ldr	r2, [r1, #24]
   28a2c:	cmp	r2, #0
   28a30:	movlt	r0, #0
   28a34:	bxlt	lr
   28a38:	push	{r4, r5, r6, r7, fp, lr}
   28a3c:	add	fp, sp, #16
   28a40:	ldm	r0, {r2, r3, ip, lr}
   28a44:	ldm	r1, {r4, r5, r6, r7}
   28a48:	eor	r2, r4, r2
   28a4c:	eor	r3, r5, r3
   28a50:	orr	r2, r3, r2
   28a54:	eor	r3, r6, ip
   28a58:	orr	r2, r2, r3
   28a5c:	eor	r3, r7, lr
   28a60:	orr	r2, r2, r3
   28a64:	ldr	r3, [r0, #16]
   28a68:	ldr	r7, [r1, #16]
   28a6c:	eor	r3, r7, r3
   28a70:	orr	r2, r2, r3
   28a74:	ldr	r0, [r0, #20]
   28a78:	ldr	r1, [r1, #20]
   28a7c:	eor	r0, r1, r0
   28a80:	orr	r0, r2, r0
   28a84:	clz	r0, r0
   28a88:	lsr	r0, r0, #5
   28a8c:	pop	{r4, r5, r6, r7, fp, pc}
   28a90:	push	{r4, r5, fp, lr}
   28a94:	add	fp, sp, #8
   28a98:	cmp	r0, #0
   28a9c:	beq	28b30 <__assert_fail@plt+0x15f74>
   28aa0:	mov	r4, r0
   28aa4:	mov	r1, #47	; 0x2f
   28aa8:	bl	12a18 <strrchr@plt>
   28aac:	cmp	r0, #0
   28ab0:	mov	r5, r4
   28ab4:	addne	r5, r0, #1
   28ab8:	sub	r0, r5, r4
   28abc:	cmp	r0, #7
   28ac0:	blt	28b14 <__assert_fail@plt+0x15f58>
   28ac4:	sub	r0, r5, #7
   28ac8:	movw	r1, #17140	; 0x42f4
   28acc:	movt	r1, #4
   28ad0:	mov	r2, #7
   28ad4:	bl	12b5c <strncmp@plt>
   28ad8:	cmp	r0, #0
   28adc:	bne	28b14 <__assert_fail@plt+0x15f58>
   28ae0:	movw	r1, #17148	; 0x42fc
   28ae4:	movt	r1, #4
   28ae8:	mov	r0, r5
   28aec:	mov	r2, #3
   28af0:	bl	12b5c <strncmp@plt>
   28af4:	cmp	r0, #0
   28af8:	beq	28b04 <__assert_fail@plt+0x15f48>
   28afc:	mov	r4, r5
   28b00:	b	28b14 <__assert_fail@plt+0x15f58>
   28b04:	add	r4, r5, #3
   28b08:	movw	r0, #21840	; 0x5550
   28b0c:	movt	r0, #5
   28b10:	str	r4, [r0]
   28b14:	movw	r0, #21848	; 0x5558
   28b18:	movt	r0, #5
   28b1c:	str	r4, [r0]
   28b20:	movw	r0, #23836	; 0x5d1c
   28b24:	movt	r0, #5
   28b28:	str	r4, [r0]
   28b2c:	pop	{r4, r5, fp, pc}
   28b30:	movw	r0, #21856	; 0x5560
   28b34:	movt	r0, #5
   28b38:	ldr	r3, [r0]
   28b3c:	movw	r0, #17084	; 0x42bc
   28b40:	movt	r0, #4
   28b44:	mov	r1, #55	; 0x37
   28b48:	mov	r2, #1
   28b4c:	bl	12700 <fwrite@plt>
   28b50:	bl	12b68 <abort@plt>
   28b54:	push	{r4, r5, r6, sl, fp, lr}
   28b58:	add	fp, sp, #16
   28b5c:	mov	r4, r0
   28b60:	movw	r0, #23840	; 0x5d20
   28b64:	movt	r0, #5
   28b68:	cmp	r4, #0
   28b6c:	moveq	r4, r0
   28b70:	bl	128d4 <__errno_location@plt>
   28b74:	mov	r5, r0
   28b78:	ldr	r6, [r0]
   28b7c:	mov	r0, r4
   28b80:	mov	r1, #48	; 0x30
   28b84:	bl	2b8c0 <__assert_fail@plt+0x18d04>
   28b88:	str	r6, [r5]
   28b8c:	pop	{r4, r5, r6, sl, fp, pc}
   28b90:	movw	r1, #23840	; 0x5d20
   28b94:	movt	r1, #5
   28b98:	cmp	r0, #0
   28b9c:	movne	r1, r0
   28ba0:	ldr	r0, [r1]
   28ba4:	bx	lr
   28ba8:	movw	r2, #23840	; 0x5d20
   28bac:	movt	r2, #5
   28bb0:	cmp	r0, #0
   28bb4:	movne	r2, r0
   28bb8:	str	r1, [r2]
   28bbc:	bx	lr
   28bc0:	movw	r3, #23840	; 0x5d20
   28bc4:	movt	r3, #5
   28bc8:	cmp	r0, #0
   28bcc:	movne	r3, r0
   28bd0:	ubfx	r0, r1, #5, #3
   28bd4:	add	r0, r3, r0, lsl #2
   28bd8:	ldr	r3, [r0, #8]
   28bdc:	and	r1, r1, #31
   28be0:	eor	r2, r2, r3, lsr r1
   28be4:	and	r2, r2, #1
   28be8:	eor	r2, r3, r2, lsl r1
   28bec:	str	r2, [r0, #8]
   28bf0:	mov	r0, #1
   28bf4:	and	r0, r0, r3, lsr r1
   28bf8:	bx	lr
   28bfc:	movw	r2, #23840	; 0x5d20
   28c00:	movt	r2, #5
   28c04:	cmp	r0, #0
   28c08:	movne	r2, r0
   28c0c:	ldr	r0, [r2, #4]
   28c10:	str	r1, [r2, #4]
   28c14:	bx	lr
   28c18:	movw	r3, #23840	; 0x5d20
   28c1c:	movt	r3, #5
   28c20:	cmp	r0, #0
   28c24:	movne	r3, r0
   28c28:	mov	r0, #10
   28c2c:	str	r0, [r3]
   28c30:	cmp	r1, #0
   28c34:	cmpne	r2, #0
   28c38:	bne	28c48 <__assert_fail@plt+0x1608c>
   28c3c:	push	{fp, lr}
   28c40:	mov	fp, sp
   28c44:	bl	12b68 <abort@plt>
   28c48:	str	r1, [r3, #40]	; 0x28
   28c4c:	str	r2, [r3, #44]	; 0x2c
   28c50:	bx	lr
   28c54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28c58:	add	fp, sp, #28
   28c5c:	sub	sp, sp, #20
   28c60:	mov	r8, r3
   28c64:	mov	r9, r2
   28c68:	mov	sl, r1
   28c6c:	mov	r7, r0
   28c70:	ldr	r0, [fp, #8]
   28c74:	movw	r5, #23840	; 0x5d20
   28c78:	movt	r5, #5
   28c7c:	cmp	r0, #0
   28c80:	movne	r5, r0
   28c84:	bl	128d4 <__errno_location@plt>
   28c88:	mov	r4, r0
   28c8c:	ldm	r5, {r0, r1}
   28c90:	ldr	r2, [r5, #40]	; 0x28
   28c94:	ldr	r3, [r5, #44]	; 0x2c
   28c98:	ldr	r6, [r4]
   28c9c:	add	r5, r5, #8
   28ca0:	stm	sp, {r0, r1, r5}
   28ca4:	str	r2, [sp, #12]
   28ca8:	str	r3, [sp, #16]
   28cac:	mov	r0, r7
   28cb0:	mov	r1, sl
   28cb4:	mov	r2, r9
   28cb8:	mov	r3, r8
   28cbc:	bl	28ccc <__assert_fail@plt+0x16110>
   28cc0:	str	r6, [r4]
   28cc4:	sub	sp, fp, #28
   28cc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28ccc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28cd0:	add	fp, sp, #28
   28cd4:	sub	sp, sp, #156	; 0x9c
   28cd8:	mov	r9, r3
   28cdc:	str	r2, [fp, #-84]	; 0xffffffac
   28ce0:	mov	r6, r1
   28ce4:	mov	r7, r0
   28ce8:	ldr	r0, [fp, #12]
   28cec:	and	r1, r0, #4
   28cf0:	str	r1, [sp, #32]
   28cf4:	and	r1, r0, #1
   28cf8:	str	r1, [sp, #36]	; 0x24
   28cfc:	ubfx	sl, r0, #1, #1
   28d00:	bl	12730 <__ctype_get_mb_cur_max@plt>
   28d04:	str	r0, [sp, #40]	; 0x28
   28d08:	ldr	r0, [fp, #24]
   28d0c:	str	r0, [sp, #76]	; 0x4c
   28d10:	ldr	r0, [fp, #20]
   28d14:	str	r0, [sp, #68]	; 0x44
   28d18:	ldr	r0, [fp, #8]
   28d1c:	str	r0, [fp, #-60]	; 0xffffffc4
   28d20:	mov	r0, #0
   28d24:	str	r0, [sp, #72]	; 0x48
   28d28:	mov	r0, #0
   28d2c:	str	r0, [sp, #92]	; 0x5c
   28d30:	mov	r0, #0
   28d34:	str	r0, [fp, #-72]	; 0xffffffb8
   28d38:	mov	r0, #0
   28d3c:	mov	r1, #0
   28d40:	str	r1, [fp, #-56]	; 0xffffffc8
   28d44:	mov	r1, #0
   28d48:	str	r1, [sp, #56]	; 0x38
   28d4c:	mov	r5, #1
   28d50:	str	r7, [sp, #80]	; 0x50
   28d54:	mov	r4, r6
   28d58:	ldr	r6, [fp, #-60]	; 0xffffffc4
   28d5c:	cmp	r6, #10
   28d60:	bhi	29cc8 <__assert_fail@plt+0x1710c>
   28d64:	add	r1, pc, #20
   28d68:	mov	r8, #0
   28d6c:	mov	r2, #1
   28d70:	mov	r3, #0
   28d74:	ldr	ip, [fp, #-84]	; 0xffffffac
   28d78:	mov	lr, r9
   28d7c:	ldr	pc, [r1, r6, lsl #2]
   28d80:	andeq	r8, r2, r8, asr lr
   28d84:	andeq	r8, r2, r8, lsl #29
   28d88:	andeq	r8, r2, r8, asr #28
   28d8c:	andeq	r8, r2, r0, asr #28
   28d90:	andeq	r8, r2, ip, ror lr
   28d94:	ldrdeq	r8, [r2], -ip
   28d98:	andeq	r8, r2, r8, ror #28
   28d9c:	andeq	r8, r2, r8, lsr pc
   28da0:	andeq	r8, r2, ip, lsr #27
   28da4:	andeq	r8, r2, ip, lsr #27
   28da8:	ldrdeq	r8, [r2], -r4
   28dac:	movw	r0, #17228	; 0x434c
   28db0:	movt	r0, #4
   28db4:	mov	r1, r6
   28db8:	bl	2a2d4 <__assert_fail@plt+0x17718>
   28dbc:	str	r0, [sp, #68]	; 0x44
   28dc0:	movw	r0, #4088	; 0xff8
   28dc4:	movt	r0, #4
   28dc8:	mov	r1, r6
   28dcc:	bl	2a2d4 <__assert_fail@plt+0x17718>
   28dd0:	str	r0, [sp, #76]	; 0x4c
   28dd4:	mov	r8, #0
   28dd8:	tst	sl, #1
   28ddc:	bne	28e14 <__assert_fail@plt+0x16258>
   28de0:	ldr	r0, [sp, #68]	; 0x44
   28de4:	ldrb	r0, [r0]
   28de8:	cmp	r0, #0
   28dec:	beq	28e14 <__assert_fail@plt+0x16258>
   28df0:	ldr	r1, [sp, #68]	; 0x44
   28df4:	add	r1, r1, #1
   28df8:	mov	r8, #0
   28dfc:	cmp	r8, r4
   28e00:	strbcc	r0, [r7, r8]
   28e04:	ldrb	r0, [r1, r8]
   28e08:	add	r8, r8, #1
   28e0c:	cmp	r0, #0
   28e10:	bne	28dfc <__assert_fail@plt+0x16240>
   28e14:	ldr	r6, [sp, #76]	; 0x4c
   28e18:	mov	r0, r6
   28e1c:	bl	1288c <strlen@plt>
   28e20:	str	r0, [fp, #-72]	; 0xffffffb8
   28e24:	str	r6, [sp, #92]	; 0x5c
   28e28:	mov	r2, #1
   28e2c:	mov	r3, sl
   28e30:	ldr	ip, [fp, #-84]	; 0xffffffac
   28e34:	mov	lr, r9
   28e38:	ldr	r6, [fp, #-60]	; 0xffffffc4
   28e3c:	b	28f38 <__assert_fail@plt+0x1637c>
   28e40:	mov	r0, #1
   28e44:	b	28e88 <__assert_fail@plt+0x162cc>
   28e48:	tst	sl, #1
   28e4c:	bne	28e88 <__assert_fail@plt+0x162cc>
   28e50:	mov	r2, r0
   28e54:	b	28eb0 <__assert_fail@plt+0x162f4>
   28e58:	mov	r6, #0
   28e5c:	mov	r8, #0
   28e60:	mov	r2, r0
   28e64:	b	28f34 <__assert_fail@plt+0x16378>
   28e68:	mov	r0, #1
   28e6c:	str	r0, [fp, #-72]	; 0xffffffb8
   28e70:	mov	r8, #0
   28e74:	mov	r6, #5
   28e78:	b	28ef4 <__assert_fail@plt+0x16338>
   28e7c:	mov	r2, #1
   28e80:	tst	sl, #1
   28e84:	beq	28eb0 <__assert_fail@plt+0x162f4>
   28e88:	mov	r1, #1
   28e8c:	str	r1, [fp, #-72]	; 0xffffffb8
   28e90:	mov	r8, #0
   28e94:	mov	r6, #2
   28e98:	movw	r1, #4088	; 0xff8
   28e9c:	movt	r1, #4
   28ea0:	str	r1, [sp, #92]	; 0x5c
   28ea4:	mov	r2, r0
   28ea8:	mov	r3, #1
   28eac:	b	28f38 <__assert_fail@plt+0x1637c>
   28eb0:	mov	r8, #1
   28eb4:	mov	r6, #2
   28eb8:	cmp	r4, #0
   28ebc:	movne	r0, #39	; 0x27
   28ec0:	strbne	r0, [r7]
   28ec4:	movw	r0, #4088	; 0xff8
   28ec8:	movt	r0, #4
   28ecc:	str	r0, [sp, #92]	; 0x5c
   28ed0:	mov	r0, #1
   28ed4:	str	r0, [fp, #-72]	; 0xffffffb8
   28ed8:	b	28f34 <__assert_fail@plt+0x16378>
   28edc:	mov	r6, #5
   28ee0:	tst	sl, #1
   28ee4:	beq	28f0c <__assert_fail@plt+0x16350>
   28ee8:	mov	r0, #1
   28eec:	str	r0, [fp, #-72]	; 0xffffffb8
   28ef0:	mov	r8, #0
   28ef4:	movw	r0, #17082	; 0x42ba
   28ef8:	movt	r0, #4
   28efc:	str	r0, [sp, #92]	; 0x5c
   28f00:	mov	r2, #1
   28f04:	mov	r3, #1
   28f08:	b	28f38 <__assert_fail@plt+0x1637c>
   28f0c:	cmp	r4, #0
   28f10:	movne	r0, #34	; 0x22
   28f14:	strbne	r0, [r7]
   28f18:	mov	r8, #1
   28f1c:	movw	r0, #17082	; 0x42ba
   28f20:	movt	r0, #4
   28f24:	str	r0, [sp, #92]	; 0x5c
   28f28:	mov	r0, #1
   28f2c:	str	r0, [fp, #-72]	; 0xffffffb8
   28f30:	mov	r2, #1
   28f34:	mov	r3, #0
   28f38:	ldr	r0, [fp, #16]
   28f3c:	cmp	r0, #0
   28f40:	movwne	r0, #1
   28f44:	and	r0, r0, r3
   28f48:	str	r0, [fp, #-88]	; 0xffffffa8
   28f4c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   28f50:	cmp	r0, #0
   28f54:	movwne	r0, #1
   28f58:	and	r1, r0, r3
   28f5c:	and	r1, r2, r1
   28f60:	str	r1, [sp, #48]	; 0x30
   28f64:	str	r6, [fp, #-60]	; 0xffffffc4
   28f68:	subs	r6, r6, #2
   28f6c:	clz	r1, r6
   28f70:	lsr	r1, r1, #5
   28f74:	and	r1, r1, r3
   28f78:	str	r1, [sp, #60]	; 0x3c
   28f7c:	str	r6, [fp, #-80]	; 0xffffffb0
   28f80:	mov	r1, r6
   28f84:	movwne	r1, #1
   28f88:	str	r3, [fp, #-76]	; 0xffffffb4
   28f8c:	eor	r3, r3, #1
   28f90:	str	r3, [sp, #88]	; 0x58
   28f94:	orr	r3, r1, r3
   28f98:	str	r3, [sp, #64]	; 0x40
   28f9c:	and	r1, r1, r2
   28fa0:	str	r1, [fp, #-68]	; 0xffffffbc
   28fa4:	and	r0, r0, r1
   28fa8:	str	r0, [fp, #-64]	; 0xffffffc0
   28fac:	str	r2, [sp, #84]	; 0x54
   28fb0:	eor	r0, r2, #1
   28fb4:	str	r0, [sp, #52]	; 0x34
   28fb8:	mov	r6, #0
   28fbc:	cmn	lr, #1
   28fc0:	beq	28fd0 <__assert_fail@plt+0x16414>
   28fc4:	cmp	r6, lr
   28fc8:	bne	28fdc <__assert_fail@plt+0x16420>
   28fcc:	b	29b48 <__assert_fail@plt+0x16f8c>
   28fd0:	ldrb	r0, [ip, r6]
   28fd4:	cmp	r0, #0
   28fd8:	beq	29b48 <__assert_fail@plt+0x16f8c>
   28fdc:	str	r5, [fp, #-48]	; 0xffffffd0
   28fe0:	mov	sl, #0
   28fe4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   28fe8:	cmp	r0, #0
   28fec:	beq	29020 <__assert_fail@plt+0x16464>
   28ff0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   28ff4:	add	r5, r6, r0
   28ff8:	cmp	r0, #2
   28ffc:	bcc	29018 <__assert_fail@plt+0x1645c>
   29000:	cmn	lr, #1
   29004:	bne	29018 <__assert_fail@plt+0x1645c>
   29008:	mov	r0, ip
   2900c:	bl	1288c <strlen@plt>
   29010:	ldr	ip, [fp, #-84]	; 0xffffffac
   29014:	mov	lr, r0
   29018:	cmp	r5, lr
   2901c:	bls	2902c <__assert_fail@plt+0x16470>
   29020:	mov	r0, #0
   29024:	str	r0, [fp, #-52]	; 0xffffffcc
   29028:	b	29078 <__assert_fail@plt+0x164bc>
   2902c:	mov	r5, r4
   29030:	mov	r4, lr
   29034:	add	r0, ip, r6
   29038:	ldr	r1, [sp, #92]	; 0x5c
   2903c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   29040:	bl	12628 <memcmp@plt>
   29044:	cmp	r0, #0
   29048:	mov	r1, r0
   2904c:	movwne	r1, #1
   29050:	ldr	r2, [sp, #88]	; 0x58
   29054:	orr	r1, r1, r2
   29058:	tst	r1, #1
   2905c:	beq	29c0c <__assert_fail@plt+0x17050>
   29060:	clz	r0, r0
   29064:	lsr	r0, r0, #5
   29068:	str	r0, [fp, #-52]	; 0xffffffcc
   2906c:	ldr	ip, [fp, #-84]	; 0xffffffac
   29070:	mov	lr, r4
   29074:	mov	r4, r5
   29078:	ldrb	r5, [ip, r6]
   2907c:	cmp	r5, #126	; 0x7e
   29080:	bhi	2943c <__assert_fail@plt+0x16880>
   29084:	mov	r9, #1
   29088:	mov	r2, #110	; 0x6e
   2908c:	mov	r0, #97	; 0x61
   29090:	add	r3, pc, #4
   29094:	mov	r1, #0
   29098:	ldr	pc, [r3, r5, lsl #2]
   2909c:	andeq	r9, r2, r4, lsr r3
   290a0:	andeq	r9, r2, ip, lsr r4
   290a4:	andeq	r9, r2, ip, lsr r4
   290a8:	andeq	r9, r2, ip, lsr r4
   290ac:	andeq	r9, r2, ip, lsr r4
   290b0:	andeq	r9, r2, ip, lsr r4
   290b4:	andeq	r9, r2, ip, lsr r4
   290b8:	andeq	r9, r2, r0, lsl #10
   290bc:	andeq	r9, r2, r4, lsl r3
   290c0:	andeq	r9, r2, ip, lsl #6
   290c4:	andeq	r9, r2, r0, lsr #6
   290c8:	andeq	r9, r2, r4, lsr #7
   290cc:	andeq	r9, r2, r4, lsl #6
   290d0:	andeq	r9, r2, ip, lsl r3
   290d4:	andeq	r9, r2, ip, lsr r4
   290d8:	andeq	r9, r2, ip, lsr r4
   290dc:	andeq	r9, r2, ip, lsr r4
   290e0:	andeq	r9, r2, ip, lsr r4
   290e4:	andeq	r9, r2, ip, lsr r4
   290e8:	andeq	r9, r2, ip, lsr r4
   290ec:	andeq	r9, r2, ip, lsr r4
   290f0:	andeq	r9, r2, ip, lsr r4
   290f4:	andeq	r9, r2, ip, lsr r4
   290f8:	andeq	r9, r2, ip, lsr r4
   290fc:	andeq	r9, r2, ip, lsr r4
   29100:	andeq	r9, r2, ip, lsr r4
   29104:	andeq	r9, r2, ip, lsr r4
   29108:	andeq	r9, r2, ip, lsr r4
   2910c:	andeq	r9, r2, ip, lsr r4
   29110:	andeq	r9, r2, ip, lsr r4
   29114:	andeq	r9, r2, ip, lsr r4
   29118:	andeq	r9, r2, ip, lsr r4
   2911c:			; <UNDEFINED> instruction: 0x000294b0
   29120:			; <UNDEFINED> instruction: 0x000294b4
   29124:			; <UNDEFINED> instruction: 0x000294b4
   29128:	andeq	r9, r2, ip, lsr #5
   2912c:			; <UNDEFINED> instruction: 0x000294b4
   29130:	muleq	r2, r8, r2
   29134:			; <UNDEFINED> instruction: 0x000294b4
   29138:	andeq	r9, r2, ip, lsr #7
   2913c:			; <UNDEFINED> instruction: 0x000294b4
   29140:			; <UNDEFINED> instruction: 0x000294b4
   29144:			; <UNDEFINED> instruction: 0x000294b4
   29148:	muleq	r2, r8, r2
   2914c:	muleq	r2, r8, r2
   29150:	muleq	r2, r8, r2
   29154:	muleq	r2, r8, r2
   29158:	muleq	r2, r8, r2
   2915c:	muleq	r2, r8, r2
   29160:	muleq	r2, r8, r2
   29164:	muleq	r2, r8, r2
   29168:	muleq	r2, r8, r2
   2916c:	muleq	r2, r8, r2
   29170:	muleq	r2, r8, r2
   29174:	muleq	r2, r8, r2
   29178:	muleq	r2, r8, r2
   2917c:	muleq	r2, r8, r2
   29180:	muleq	r2, r8, r2
   29184:	muleq	r2, r8, r2
   29188:			; <UNDEFINED> instruction: 0x000294b4
   2918c:			; <UNDEFINED> instruction: 0x000294b4
   29190:			; <UNDEFINED> instruction: 0x000294b4
   29194:			; <UNDEFINED> instruction: 0x000294b4
   29198:	andeq	r9, r2, r4, ror r3
   2919c:	andeq	r9, r2, ip, lsr r4
   291a0:	muleq	r2, r8, r2
   291a4:	muleq	r2, r8, r2
   291a8:	muleq	r2, r8, r2
   291ac:	muleq	r2, r8, r2
   291b0:	muleq	r2, r8, r2
   291b4:	muleq	r2, r8, r2
   291b8:	muleq	r2, r8, r2
   291bc:	muleq	r2, r8, r2
   291c0:	muleq	r2, r8, r2
   291c4:	muleq	r2, r8, r2
   291c8:	muleq	r2, r8, r2
   291cc:	muleq	r2, r8, r2
   291d0:	muleq	r2, r8, r2
   291d4:	muleq	r2, r8, r2
   291d8:	muleq	r2, r8, r2
   291dc:	muleq	r2, r8, r2
   291e0:	muleq	r2, r8, r2
   291e4:	muleq	r2, r8, r2
   291e8:	muleq	r2, r8, r2
   291ec:	muleq	r2, r8, r2
   291f0:	muleq	r2, r8, r2
   291f4:	muleq	r2, r8, r2
   291f8:	muleq	r2, r8, r2
   291fc:	muleq	r2, r8, r2
   29200:	muleq	r2, r8, r2
   29204:	muleq	r2, r8, r2
   29208:			; <UNDEFINED> instruction: 0x000294b4
   2920c:	andeq	r9, r2, r0, ror #5
   29210:	muleq	r2, r8, r2
   29214:			; <UNDEFINED> instruction: 0x000294b4
   29218:	muleq	r2, r8, r2
   2921c:			; <UNDEFINED> instruction: 0x000294b4
   29220:	muleq	r2, r8, r2
   29224:	muleq	r2, r8, r2
   29228:	muleq	r2, r8, r2
   2922c:	muleq	r2, r8, r2
   29230:	muleq	r2, r8, r2
   29234:	muleq	r2, r8, r2
   29238:	muleq	r2, r8, r2
   2923c:	muleq	r2, r8, r2
   29240:	muleq	r2, r8, r2
   29244:	muleq	r2, r8, r2
   29248:	muleq	r2, r8, r2
   2924c:	muleq	r2, r8, r2
   29250:	muleq	r2, r8, r2
   29254:	muleq	r2, r8, r2
   29258:	muleq	r2, r8, r2
   2925c:	muleq	r2, r8, r2
   29260:	muleq	r2, r8, r2
   29264:	muleq	r2, r8, r2
   29268:	muleq	r2, r8, r2
   2926c:	muleq	r2, r8, r2
   29270:	muleq	r2, r8, r2
   29274:	muleq	r2, r8, r2
   29278:	muleq	r2, r8, r2
   2927c:	muleq	r2, r8, r2
   29280:	muleq	r2, r8, r2
   29284:	muleq	r2, r8, r2
   29288:	andeq	r9, r2, r0, asr #5
   2928c:			; <UNDEFINED> instruction: 0x000294b4
   29290:	andeq	r9, r2, r0, asr #5
   29294:	andeq	r9, r2, ip, lsr #5
   29298:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2929c:	cmp	r0, #0
   292a0:	beq	29514 <__assert_fail@plt+0x16958>
   292a4:	ldr	r0, [fp, #16]
   292a8:	b	29518 <__assert_fail@plt+0x1695c>
   292ac:	mov	r9, #0
   292b0:	cmp	r6, #0
   292b4:	beq	294b0 <__assert_fail@plt+0x168f4>
   292b8:	mov	sl, #0
   292bc:	b	29298 <__assert_fail@plt+0x166dc>
   292c0:	mov	r9, #0
   292c4:	cmn	lr, #1
   292c8:	beq	29494 <__assert_fail@plt+0x168d8>
   292cc:	cmp	r6, #0
   292d0:	bne	292b8 <__assert_fail@plt+0x166fc>
   292d4:	cmp	lr, #1
   292d8:	beq	294b0 <__assert_fail@plt+0x168f4>
   292dc:	b	292b8 <__assert_fail@plt+0x166fc>
   292e0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   292e4:	cmp	r0, #2
   292e8:	bne	294dc <__assert_fail@plt+0x16920>
   292ec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   292f0:	tst	r0, #1
   292f4:	bne	29c24 <__assert_fail@plt+0x17068>
   292f8:	mov	sl, #0
   292fc:	mov	r0, #92	; 0x5c
   29300:	b	294f0 <__assert_fail@plt+0x16934>
   29304:	mov	r0, #102	; 0x66
   29308:	b	29500 <__assert_fail@plt+0x16944>
   2930c:	mov	r2, #116	; 0x74
   29310:	b	29320 <__assert_fail@plt+0x16764>
   29314:	mov	r0, #98	; 0x62
   29318:	b	29500 <__assert_fail@plt+0x16944>
   2931c:	mov	r2, #114	; 0x72
   29320:	ldr	r0, [sp, #64]	; 0x40
   29324:	tst	r0, #1
   29328:	mov	r0, r2
   2932c:	bne	29500 <__assert_fail@plt+0x16944>
   29330:	b	29c24 <__assert_fail@plt+0x17068>
   29334:	ldr	r0, [sp, #84]	; 0x54
   29338:	tst	r0, #1
   2933c:	beq	295f0 <__assert_fail@plt+0x16a34>
   29340:	ldr	r0, [fp, #-76]	; 0xffffffb4
   29344:	tst	r0, #1
   29348:	bne	29c24 <__assert_fail@plt+0x17068>
   2934c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   29350:	cmp	r0, #2
   29354:	ldr	r0, [fp, #-80]	; 0xffffffb0
   29358:	movwne	r0, #1
   2935c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   29360:	orr	r0, r0, r2
   29364:	tst	r0, #1
   29368:	beq	299e4 <__assert_fail@plt+0x16e28>
   2936c:	mov	r0, r8
   29370:	b	29a18 <__assert_fail@plt+0x16e5c>
   29374:	mov	sl, #0
   29378:	mov	r5, #63	; 0x3f
   2937c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   29380:	cmp	r0, #5
   29384:	beq	297a4 <__assert_fail@plt+0x16be8>
   29388:	cmp	r0, #2
   2938c:	bne	29844 <__assert_fail@plt+0x16c88>
   29390:	ldr	r0, [fp, #-76]	; 0xffffffb4
   29394:	tst	r0, #1
   29398:	mov	r9, #0
   2939c:	beq	29298 <__assert_fail@plt+0x166dc>
   293a0:	b	29c24 <__assert_fail@plt+0x17068>
   293a4:	mov	r0, #118	; 0x76
   293a8:	b	29500 <__assert_fail@plt+0x16944>
   293ac:	mov	r5, #39	; 0x27
   293b0:	mov	r0, #1
   293b4:	str	r0, [sp, #56]	; 0x38
   293b8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   293bc:	cmp	r0, #2
   293c0:	bne	29610 <__assert_fail@plt+0x16a54>
   293c4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   293c8:	tst	r0, #1
   293cc:	bne	29c24 <__assert_fail@plt+0x17068>
   293d0:	ldr	r2, [sp, #72]	; 0x48
   293d4:	cmp	r2, #0
   293d8:	mov	r0, r2
   293dc:	movwne	r0, #1
   293e0:	clz	r1, r4
   293e4:	lsr	r1, r1, #5
   293e8:	orrs	r0, r0, r1
   293ec:	moveq	r2, r4
   293f0:	str	r2, [sp, #72]	; 0x48
   293f4:	moveq	r4, r0
   293f8:	cmp	r8, r4
   293fc:	movcc	r0, #39	; 0x27
   29400:	strbcc	r0, [r7, r8]
   29404:	add	r0, r8, #1
   29408:	cmp	r0, r4
   2940c:	movcc	r1, #92	; 0x5c
   29410:	strbcc	r1, [r7, r0]
   29414:	add	r0, r8, #2
   29418:	cmp	r0, r4
   2941c:	movcc	r1, #39	; 0x27
   29420:	strbcc	r1, [r7, r0]
   29424:	add	r8, r8, #3
   29428:	mov	r0, #0
   2942c:	str	r0, [fp, #-56]	; 0xffffffc8
   29430:	mov	sl, #0
   29434:	mov	r9, #1
   29438:	b	29298 <__assert_fail@plt+0x166dc>
   2943c:	str	r4, [sp, #24]
   29440:	ldr	r0, [sp, #40]	; 0x28
   29444:	cmp	r0, #1
   29448:	bne	29618 <__assert_fail@plt+0x16a5c>
   2944c:	str	lr, [sp, #28]
   29450:	bl	12844 <__ctype_b_loc@plt>
   29454:	ldr	ip, [fp, #-84]	; 0xffffffac
   29458:	ldr	r0, [r0]
   2945c:	add	r0, r0, r5, lsl #1
   29460:	ldrb	r0, [r0, #1]
   29464:	ubfx	r9, r0, #6, #1
   29468:	mov	r1, #1
   2946c:	ldr	r4, [sp, #24]
   29470:	ldr	r0, [sp, #52]	; 0x34
   29474:	orr	r0, r9, r0
   29478:	mov	r2, r1
   2947c:	cmp	r1, #1
   29480:	bhi	2984c <__assert_fail@plt+0x16c90>
   29484:	tst	r0, #1
   29488:	beq	2984c <__assert_fail@plt+0x16c90>
   2948c:	ldr	lr, [sp, #28]
   29490:	b	29298 <__assert_fail@plt+0x166dc>
   29494:	cmp	r6, #0
   29498:	ldrbeq	r0, [ip, #1]
   2949c:	cmpeq	r0, #0
   294a0:	beq	294b0 <__assert_fail@plt+0x168f4>
   294a4:	mvn	lr, #0
   294a8:	mov	sl, #0
   294ac:	b	29298 <__assert_fail@plt+0x166dc>
   294b0:	mov	r1, #1
   294b4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   294b8:	cmp	r0, #2
   294bc:	bne	294d4 <__assert_fail@plt+0x16918>
   294c0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   294c4:	tst	r0, #1
   294c8:	mov	r9, r1
   294cc:	beq	29298 <__assert_fail@plt+0x166dc>
   294d0:	b	29c24 <__assert_fail@plt+0x17068>
   294d4:	mov	r9, r1
   294d8:	b	29298 <__assert_fail@plt+0x166dc>
   294dc:	mov	sl, #0
   294e0:	mov	r0, #92	; 0x5c
   294e4:	ldr	r1, [sp, #48]	; 0x30
   294e8:	cmp	r1, #0
   294ec:	beq	29500 <__assert_fail@plt+0x16944>
   294f0:	mov	r9, #0
   294f4:	cmp	sl, #0
   294f8:	beq	29ab0 <__assert_fail@plt+0x16ef4>
   294fc:	b	29aec <__assert_fail@plt+0x16f30>
   29500:	mov	r9, #0
   29504:	ldr	r1, [sp, #84]	; 0x54
   29508:	tst	r1, #1
   2950c:	mov	sl, #0
   29510:	bne	29550 <__assert_fail@plt+0x16994>
   29514:	ldr	r0, [fp, #-88]	; 0xffffffa8
   29518:	cmp	r0, #0
   2951c:	mov	r0, r5
   29520:	beq	29544 <__assert_fail@plt+0x16988>
   29524:	ubfx	r0, r5, #5, #3
   29528:	ldr	r1, [fp, #16]
   2952c:	ldr	r0, [r1, r0, lsl #2]
   29530:	and	r1, r5, #31
   29534:	mov	r2, #1
   29538:	tst	r0, r2, lsl r1
   2953c:	mov	r0, r5
   29540:	bne	29550 <__assert_fail@plt+0x16994>
   29544:	ldr	r1, [fp, #-52]	; 0xffffffcc
   29548:	cmp	r1, #0
   2954c:	beq	29aa8 <__assert_fail@plt+0x16eec>
   29550:	ldr	r1, [fp, #-76]	; 0xffffffb4
   29554:	tst	r1, #1
   29558:	bne	29c24 <__assert_fail@plt+0x17068>
   2955c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   29560:	cmp	r1, #2
   29564:	ldr	r1, [fp, #-80]	; 0xffffffb0
   29568:	movwne	r1, #1
   2956c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   29570:	orr	r1, r1, r2
   29574:	tst	r1, #1
   29578:	beq	29584 <__assert_fail@plt+0x169c8>
   2957c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   29580:	b	295c0 <__assert_fail@plt+0x16a04>
   29584:	cmp	r8, r4
   29588:	movcc	r1, #39	; 0x27
   2958c:	strbcc	r1, [r7, r8]
   29590:	add	r1, r8, #1
   29594:	cmp	r1, r4
   29598:	ldr	r5, [fp, #-48]	; 0xffffffd0
   2959c:	movcc	r2, #36	; 0x24
   295a0:	strbcc	r2, [r7, r1]
   295a4:	add	r1, r8, #2
   295a8:	cmp	r1, r4
   295ac:	movcc	r2, #39	; 0x27
   295b0:	strbcc	r2, [r7, r1]
   295b4:	add	r8, r8, #3
   295b8:	mov	r1, #1
   295bc:	str	r1, [fp, #-56]	; 0xffffffc8
   295c0:	cmp	r8, r4
   295c4:	movcc	r1, #92	; 0x5c
   295c8:	strbcc	r1, [r7, r8]
   295cc:	add	r8, r8, #1
   295d0:	cmp	r8, r4
   295d4:	strbcc	r0, [r7, r8]
   295d8:	and	r5, r5, r9
   295dc:	add	r8, r8, #1
   295e0:	add	r6, r6, #1
   295e4:	cmn	lr, #1
   295e8:	bne	28fc4 <__assert_fail@plt+0x16408>
   295ec:	b	28fd0 <__assert_fail@plt+0x16414>
   295f0:	mov	r9, #0
   295f4:	ldr	r0, [sp, #36]	; 0x24
   295f8:	cmp	r0, #0
   295fc:	mov	sl, #0
   29600:	mov	r5, #0
   29604:	beq	29514 <__assert_fail@plt+0x16958>
   29608:	ldr	r5, [fp, #-48]	; 0xffffffd0
   2960c:	b	295e0 <__assert_fail@plt+0x16a24>
   29610:	mov	r9, #1
   29614:	b	29298 <__assert_fail@plt+0x166dc>
   29618:	mov	r0, #0
   2961c:	str	r0, [fp, #-36]	; 0xffffffdc
   29620:	str	r0, [fp, #-40]	; 0xffffffd8
   29624:	cmn	lr, #1
   29628:	bne	2963c <__assert_fail@plt+0x16a80>
   2962c:	mov	r0, ip
   29630:	bl	1288c <strlen@plt>
   29634:	ldr	ip, [fp, #-84]	; 0xffffffac
   29638:	mov	lr, r0
   2963c:	add	r0, ip, r6
   29640:	str	r0, [sp, #20]
   29644:	mov	r9, #1
   29648:	mov	r7, #0
   2964c:	sub	r4, fp, #40	; 0x28
   29650:	str	lr, [sp, #28]
   29654:	str	r7, [sp, #44]	; 0x2c
   29658:	add	r7, r7, r6
   2965c:	add	r1, ip, r7
   29660:	sub	r2, lr, r7
   29664:	sub	r0, fp, #44	; 0x2c
   29668:	mov	r3, r4
   2966c:	bl	2ed34 <__assert_fail@plt+0x1c178>
   29670:	cmp	r0, #0
   29674:	beq	29b34 <__assert_fail@plt+0x16f78>
   29678:	cmn	r0, #1
   2967c:	beq	29af4 <__assert_fail@plt+0x16f38>
   29680:	cmn	r0, #2
   29684:	ldr	lr, [sp, #28]
   29688:	beq	29afc <__assert_fail@plt+0x16f40>
   2968c:	cmp	r0, #2
   29690:	mov	r1, #0
   29694:	movwcc	r1, #1
   29698:	ldr	r2, [sp, #60]	; 0x3c
   2969c:	eor	r2, r2, #1
   296a0:	orrs	r1, r2, r1
   296a4:	ldr	r4, [sp, #24]
   296a8:	bne	29768 <__assert_fail@plt+0x16bac>
   296ac:	ldr	r1, [sp, #44]	; 0x2c
   296b0:	ldr	r2, [sp, #20]
   296b4:	add	r1, r2, r1
   296b8:	mov	r2, #1
   296bc:	ldrb	r3, [r1, r2]
   296c0:	sub	r3, r3, #91	; 0x5b
   296c4:	cmp	r3, #33	; 0x21
   296c8:	bhi	2975c <__assert_fail@plt+0x16ba0>
   296cc:	add	r7, pc, #0
   296d0:	ldr	pc, [r7, r3, lsl #2]
   296d4:	andeq	r9, r2, ip, lsl ip
   296d8:	andeq	r9, r2, ip, lsl ip
   296dc:	andeq	r9, r2, ip, asr r7
   296e0:	andeq	r9, r2, ip, lsl ip
   296e4:	andeq	r9, r2, ip, asr r7
   296e8:	andeq	r9, r2, ip, lsl ip
   296ec:	andeq	r9, r2, ip, asr r7
   296f0:	andeq	r9, r2, ip, asr r7
   296f4:	andeq	r9, r2, ip, asr r7
   296f8:	andeq	r9, r2, ip, asr r7
   296fc:	andeq	r9, r2, ip, asr r7
   29700:	andeq	r9, r2, ip, asr r7
   29704:	andeq	r9, r2, ip, asr r7
   29708:	andeq	r9, r2, ip, asr r7
   2970c:	andeq	r9, r2, ip, asr r7
   29710:	andeq	r9, r2, ip, asr r7
   29714:	andeq	r9, r2, ip, asr r7
   29718:	andeq	r9, r2, ip, asr r7
   2971c:	andeq	r9, r2, ip, asr r7
   29720:	andeq	r9, r2, ip, asr r7
   29724:	andeq	r9, r2, ip, asr r7
   29728:	andeq	r9, r2, ip, asr r7
   2972c:	andeq	r9, r2, ip, asr r7
   29730:	andeq	r9, r2, ip, asr r7
   29734:	andeq	r9, r2, ip, asr r7
   29738:	andeq	r9, r2, ip, asr r7
   2973c:	andeq	r9, r2, ip, asr r7
   29740:	andeq	r9, r2, ip, asr r7
   29744:	andeq	r9, r2, ip, asr r7
   29748:	andeq	r9, r2, ip, asr r7
   2974c:	andeq	r9, r2, ip, asr r7
   29750:	andeq	r9, r2, ip, asr r7
   29754:	andeq	r9, r2, ip, asr r7
   29758:	andeq	r9, r2, ip, lsl ip
   2975c:	add	r2, r2, #1
   29760:	cmp	r2, r0
   29764:	bcc	296bc <__assert_fail@plt+0x16b00>
   29768:	ldr	r7, [sp, #44]	; 0x2c
   2976c:	add	r7, r0, r7
   29770:	ldr	r0, [fp, #-44]	; 0xffffffd4
   29774:	bl	126d0 <iswprint@plt>
   29778:	cmp	r0, #0
   2977c:	movwne	r0, #1
   29780:	and	r9, r9, r0
   29784:	sub	r4, fp, #40	; 0x28
   29788:	mov	r0, r4
   2978c:	bl	12604 <mbsinit@plt>
   29790:	ldr	lr, [sp, #28]
   29794:	cmp	r0, #0
   29798:	ldr	ip, [fp, #-84]	; 0xffffffac
   2979c:	beq	29654 <__assert_fail@plt+0x16a98>
   297a0:	b	29b3c <__assert_fail@plt+0x16f80>
   297a4:	ldr	r0, [sp, #32]
   297a8:	cmp	r0, #0
   297ac:	beq	29844 <__assert_fail@plt+0x16c88>
   297b0:	add	r0, r6, #2
   297b4:	cmp	r0, lr
   297b8:	bcs	29844 <__assert_fail@plt+0x16c88>
   297bc:	add	r1, ip, r6
   297c0:	ldrb	r1, [r1, #1]
   297c4:	cmp	r1, #63	; 0x3f
   297c8:	bne	29844 <__assert_fail@plt+0x16c88>
   297cc:	ldrb	r9, [ip, r0]
   297d0:	sub	r2, r9, #33	; 0x21
   297d4:	cmp	r2, #29
   297d8:	bhi	29844 <__assert_fail@plt+0x16c88>
   297dc:	mov	r3, #1
   297e0:	movw	r1, #20929	; 0x51c1
   297e4:	movt	r1, #14336	; 0x3800
   297e8:	tst	r1, r3, lsl r2
   297ec:	beq	29844 <__assert_fail@plt+0x16c88>
   297f0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   297f4:	tst	r1, #1
   297f8:	bne	29c24 <__assert_fail@plt+0x17068>
   297fc:	cmp	r8, r4
   29800:	movcc	r1, #63	; 0x3f
   29804:	strbcc	r1, [r7, r8]
   29808:	add	r2, r8, #1
   2980c:	cmp	r2, r4
   29810:	movcc	r1, #34	; 0x22
   29814:	strbcc	r1, [r7, r2]
   29818:	add	r2, r8, #2
   2981c:	cmp	r2, r4
   29820:	movcc	r1, #34	; 0x22
   29824:	strbcc	r1, [r7, r2]
   29828:	add	r2, r8, #3
   2982c:	cmp	r2, r4
   29830:	movcc	r1, #63	; 0x3f
   29834:	strbcc	r1, [r7, r2]
   29838:	add	r8, r8, #4
   2983c:	mov	r6, r0
   29840:	mov	r5, r9
   29844:	mov	r9, #0
   29848:	b	29298 <__assert_fail@plt+0x166dc>
   2984c:	add	r1, r2, r6
   29850:	str	r1, [sp, #44]	; 0x2c
   29854:	add	r1, r6, #1
   29858:	mov	r3, #0
   2985c:	ldr	lr, [sp, #28]
   29860:	ldr	r6, [fp, #-60]	; 0xffffffc4
   29864:	tst	r0, #1
   29868:	bne	2995c <__assert_fail@plt+0x16da0>
   2986c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   29870:	tst	r2, #1
   29874:	bne	29c24 <__assert_fail@plt+0x17068>
   29878:	cmp	r6, #2
   2987c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   29880:	movwne	r3, #1
   29884:	ldr	r2, [fp, #-56]	; 0xffffffc8
   29888:	orr	r3, r3, r2
   2988c:	tst	r3, #1
   29890:	bne	298cc <__assert_fail@plt+0x16d10>
   29894:	cmp	r8, r4
   29898:	movcc	r2, #39	; 0x27
   2989c:	strbcc	r2, [r7, r8]
   298a0:	add	r3, r8, #1
   298a4:	cmp	r3, r4
   298a8:	movcc	r2, #36	; 0x24
   298ac:	strbcc	r2, [r7, r3]
   298b0:	add	r3, r8, #2
   298b4:	cmp	r3, r4
   298b8:	movcc	r2, #39	; 0x27
   298bc:	strbcc	r2, [r7, r3]
   298c0:	add	r8, r8, #3
   298c4:	mov	r2, #1
   298c8:	str	r2, [fp, #-56]	; 0xffffffc8
   298cc:	cmp	r8, r4
   298d0:	movcc	r2, #92	; 0x5c
   298d4:	strbcc	r2, [r7, r8]
   298d8:	add	r3, r8, #1
   298dc:	cmp	r3, r4
   298e0:	bcs	29900 <__assert_fail@plt+0x16d44>
   298e4:	and	r7, r5, #192	; 0xc0
   298e8:	mov	r2, #48	; 0x30
   298ec:	orr	r7, r2, r7, lsr #6
   298f0:	ldr	r6, [sp, #80]	; 0x50
   298f4:	strb	r7, [r6, r3]
   298f8:	ldr	r6, [fp, #-60]	; 0xffffffc4
   298fc:	ldr	r7, [sp, #80]	; 0x50
   29900:	add	r3, r8, #2
   29904:	cmp	r3, r4
   29908:	bcs	29928 <__assert_fail@plt+0x16d6c>
   2990c:	lsr	r7, r5, #3
   29910:	mov	r2, #6
   29914:	bfi	r7, r2, #3, #29
   29918:	ldr	r6, [sp, #80]	; 0x50
   2991c:	strb	r7, [r6, r3]
   29920:	ldr	r6, [fp, #-60]	; 0xffffffc4
   29924:	ldr	r7, [sp, #80]	; 0x50
   29928:	mov	r2, #6
   2992c:	bfi	r5, r2, #3, #29
   29930:	add	r8, r8, #3
   29934:	mov	r3, #1
   29938:	b	29980 <__assert_fail@plt+0x16dc4>
   2993c:	ldr	r7, [sp, #80]	; 0x50
   29940:	cmp	r8, r4
   29944:	strbcc	r5, [r7, r8]
   29948:	ldrb	r5, [ip, r1]
   2994c:	add	r1, r1, #1
   29950:	add	r8, r8, #1
   29954:	tst	r0, #1
   29958:	beq	2986c <__assert_fail@plt+0x16cb0>
   2995c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   29960:	tst	r2, #1
   29964:	beq	29978 <__assert_fail@plt+0x16dbc>
   29968:	cmp	r8, r4
   2996c:	movcc	r2, #92	; 0x5c
   29970:	strbcc	r2, [r7, r8]
   29974:	add	r8, r8, #1
   29978:	mov	r2, #0
   2997c:	str	r2, [fp, #-52]	; 0xffffffcc
   29980:	and	sl, r3, #1
   29984:	ldr	r2, [sp, #44]	; 0x2c
   29988:	cmp	r2, r1
   2998c:	bls	29a98 <__assert_fail@plt+0x16edc>
   29990:	cmp	sl, #0
   29994:	movwne	sl, #1
   29998:	ldr	r2, [fp, #-56]	; 0xffffffc8
   2999c:	mvn	r7, r2
   299a0:	orr	r7, r7, sl
   299a4:	tst	r7, #1
   299a8:	bne	2993c <__assert_fail@plt+0x16d80>
   299ac:	cmp	r8, r4
   299b0:	ldrcc	r7, [sp, #80]	; 0x50
   299b4:	movcc	r2, #39	; 0x27
   299b8:	strbcc	r2, [r7, r8]
   299bc:	add	r7, r8, #1
   299c0:	cmp	r7, r4
   299c4:	ldrcc	r6, [sp, #80]	; 0x50
   299c8:	movcc	r2, #39	; 0x27
   299cc:	strbcc	r2, [r6, r7]
   299d0:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   299d4:	add	r8, r8, #2
   299d8:	mov	r2, #0
   299dc:	str	r2, [fp, #-56]	; 0xffffffc8
   299e0:	b	2993c <__assert_fail@plt+0x16d80>
   299e4:	cmp	r8, r4
   299e8:	movcc	r0, #39	; 0x27
   299ec:	strbcc	r0, [r7, r8]
   299f0:	add	r0, r8, #1
   299f4:	cmp	r0, r4
   299f8:	movcc	r1, #36	; 0x24
   299fc:	strbcc	r1, [r7, r0]
   29a00:	add	r0, r8, #2
   29a04:	cmp	r0, r4
   29a08:	movcc	r1, #39	; 0x27
   29a0c:	strbcc	r1, [r7, r0]
   29a10:	add	r0, r8, #3
   29a14:	mov	r2, #1
   29a18:	cmp	r0, r4
   29a1c:	movcc	r1, #92	; 0x5c
   29a20:	strbcc	r1, [r7, r0]
   29a24:	str	r2, [fp, #-56]	; 0xffffffc8
   29a28:	add	r8, r0, #1
   29a2c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   29a30:	cmp	r1, #2
   29a34:	beq	29a88 <__assert_fail@plt+0x16ecc>
   29a38:	add	r1, r6, #1
   29a3c:	mov	r9, #0
   29a40:	mov	sl, #1
   29a44:	mov	r5, #48	; 0x30
   29a48:	cmp	r1, lr
   29a4c:	bcs	29298 <__assert_fail@plt+0x166dc>
   29a50:	ldrb	r1, [ip, r1]
   29a54:	sub	r1, r1, #48	; 0x30
   29a58:	uxtb	r1, r1
   29a5c:	cmp	r1, #9
   29a60:	bhi	29298 <__assert_fail@plt+0x166dc>
   29a64:	cmp	r8, r4
   29a68:	movcc	r1, #48	; 0x30
   29a6c:	strbcc	r1, [r7, r8]
   29a70:	add	r1, r0, #2
   29a74:	cmp	r1, r4
   29a78:	movcc	r2, #48	; 0x30
   29a7c:	strbcc	r2, [r7, r1]
   29a80:	add	r8, r0, #3
   29a84:	b	29298 <__assert_fail@plt+0x166dc>
   29a88:	mov	r0, #48	; 0x30
   29a8c:	mov	sl, #1
   29a90:	mov	r9, #0
   29a94:	b	29544 <__assert_fail@plt+0x16988>
   29a98:	sub	r6, r1, #1
   29a9c:	cmp	sl, #0
   29aa0:	movwne	sl, #1
   29aa4:	mov	r0, r5
   29aa8:	cmp	sl, #0
   29aac:	bne	29aec <__assert_fail@plt+0x16f30>
   29ab0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   29ab4:	tst	r1, #1
   29ab8:	beq	29aec <__assert_fail@plt+0x16f30>
   29abc:	cmp	r8, r4
   29ac0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   29ac4:	movcc	r1, #39	; 0x27
   29ac8:	strbcc	r1, [r7, r8]
   29acc:	add	r1, r8, #1
   29ad0:	cmp	r1, r4
   29ad4:	movcc	r2, #39	; 0x27
   29ad8:	strbcc	r2, [r7, r1]
   29adc:	add	r8, r8, #2
   29ae0:	mov	r1, #0
   29ae4:	str	r1, [fp, #-56]	; 0xffffffc8
   29ae8:	b	295d0 <__assert_fail@plt+0x16a14>
   29aec:	ldr	r5, [fp, #-48]	; 0xffffffd0
   29af0:	b	295d0 <__assert_fail@plt+0x16a14>
   29af4:	mov	r9, #0
   29af8:	b	29b34 <__assert_fail@plt+0x16f78>
   29afc:	mov	r9, #0
   29b00:	cmp	r7, lr
   29b04:	bcs	29b34 <__assert_fail@plt+0x16f78>
   29b08:	ldr	ip, [fp, #-84]	; 0xffffffac
   29b0c:	ldr	r7, [sp, #44]	; 0x2c
   29b10:	ldr	r0, [sp, #20]
   29b14:	ldrb	r0, [r0, r7]
   29b18:	cmp	r0, #0
   29b1c:	beq	29b3c <__assert_fail@plt+0x16f80>
   29b20:	add	r7, r7, #1
   29b24:	add	r0, r6, r7
   29b28:	cmp	r0, lr
   29b2c:	bcc	29b10 <__assert_fail@plt+0x16f54>
   29b30:	b	29b3c <__assert_fail@plt+0x16f80>
   29b34:	ldr	ip, [fp, #-84]	; 0xffffffac
   29b38:	ldr	r7, [sp, #44]	; 0x2c
   29b3c:	mov	r1, r7
   29b40:	ldr	r7, [sp, #80]	; 0x50
   29b44:	b	2946c <__assert_fail@plt+0x168b0>
   29b48:	ldr	r1, [fp, #-60]	; 0xffffffc4
   29b4c:	eor	r0, r1, #2
   29b50:	orr	r0, r0, r8
   29b54:	clz	r0, r0
   29b58:	lsr	r0, r0, #5
   29b5c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   29b60:	tst	r2, r0
   29b64:	bne	29c24 <__assert_fail@plt+0x17068>
   29b68:	cmp	r1, #2
   29b6c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   29b70:	movwne	r0, #1
   29b74:	orr	r0, r2, r0
   29b78:	tst	r0, #1
   29b7c:	ldreq	r0, [sp, #56]	; 0x38
   29b80:	eoreq	r0, r0, #1
   29b84:	tsteq	r0, #1
   29b88:	bne	29bbc <__assert_fail@plt+0x17000>
   29b8c:	mov	r9, lr
   29b90:	tst	r5, #1
   29b94:	bne	29c8c <__assert_fail@plt+0x170d0>
   29b98:	ldr	r0, [sp, #72]	; 0x48
   29b9c:	cmp	r0, #0
   29ba0:	beq	29bbc <__assert_fail@plt+0x17000>
   29ba4:	mov	r5, #0
   29ba8:	cmp	r4, #0
   29bac:	ldr	r0, [sp, #84]	; 0x54
   29bb0:	mov	sl, r2
   29bb4:	ldr	r6, [sp, #72]	; 0x48
   29bb8:	beq	28d54 <__assert_fail@plt+0x16198>
   29bbc:	ldr	r1, [sp, #92]	; 0x5c
   29bc0:	clz	r0, r1
   29bc4:	lsr	r0, r0, #5
   29bc8:	orr	r0, r0, r2
   29bcc:	tst	r0, #1
   29bd0:	bne	29bfc <__assert_fail@plt+0x17040>
   29bd4:	ldrb	r0, [r1]
   29bd8:	cmp	r0, #0
   29bdc:	beq	29bfc <__assert_fail@plt+0x17040>
   29be0:	add	r1, r1, #1
   29be4:	cmp	r8, r4
   29be8:	strbcc	r0, [r7, r8]
   29bec:	add	r8, r8, #1
   29bf0:	ldrb	r0, [r1], #1
   29bf4:	cmp	r0, #0
   29bf8:	bne	29be4 <__assert_fail@plt+0x17028>
   29bfc:	cmp	r8, r4
   29c00:	movcc	r0, #0
   29c04:	strbcc	r0, [r7, r8]
   29c08:	b	29c80 <__assert_fail@plt+0x170c4>
   29c0c:	ldr	ip, [fp, #-84]	; 0xffffffac
   29c10:	mov	lr, r4
   29c14:	mov	r4, r5
   29c18:	b	29c24 <__assert_fail@plt+0x17068>
   29c1c:	ldr	r7, [sp, #80]	; 0x50
   29c20:	ldr	ip, [fp, #-84]	; 0xffffffac
   29c24:	mov	r0, #0
   29c28:	ldr	r1, [fp, #12]
   29c2c:	bic	r1, r1, #2
   29c30:	ldr	r2, [sp, #84]	; 0x54
   29c34:	tst	r2, #1
   29c38:	ldr	r3, [fp, #-60]	; 0xffffffc4
   29c3c:	mov	r2, r3
   29c40:	movwne	r2, #4
   29c44:	cmp	r3, #2
   29c48:	movne	r2, r3
   29c4c:	str	r2, [sp]
   29c50:	str	r1, [sp, #4]
   29c54:	str	r0, [sp, #8]
   29c58:	ldr	r0, [sp, #68]	; 0x44
   29c5c:	str	r0, [sp, #12]
   29c60:	ldr	r0, [sp, #76]	; 0x4c
   29c64:	str	r0, [sp, #16]
   29c68:	mov	r0, r7
   29c6c:	mov	r1, r4
   29c70:	mov	r2, ip
   29c74:	mov	r3, lr
   29c78:	bl	28ccc <__assert_fail@plt+0x16110>
   29c7c:	mov	r8, r0
   29c80:	mov	r0, r8
   29c84:	sub	sp, fp, #28
   29c88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29c8c:	mov	r0, #5
   29c90:	str	r0, [sp]
   29c94:	ldr	r0, [fp, #12]
   29c98:	str	r0, [sp, #4]
   29c9c:	ldr	r0, [fp, #16]
   29ca0:	str	r0, [sp, #8]
   29ca4:	ldr	r0, [sp, #68]	; 0x44
   29ca8:	str	r0, [sp, #12]
   29cac:	ldr	r0, [sp, #76]	; 0x4c
   29cb0:	str	r0, [sp, #16]
   29cb4:	mov	r0, r7
   29cb8:	ldr	r1, [sp, #72]	; 0x48
   29cbc:	ldr	r2, [fp, #-84]	; 0xffffffac
   29cc0:	mov	r3, r9
   29cc4:	b	29c78 <__assert_fail@plt+0x170bc>
   29cc8:	bl	12b68 <abort@plt>
   29ccc:	mov	r3, r2
   29cd0:	mov	r2, #0
   29cd4:	b	29cd8 <__assert_fail@plt+0x1711c>
   29cd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29cdc:	add	fp, sp, #28
   29ce0:	sub	sp, sp, #36	; 0x24
   29ce4:	mov	r4, r2
   29ce8:	str	r2, [sp, #24]
   29cec:	mov	r5, r1
   29cf0:	mov	r6, r0
   29cf4:	str	r0, [sp, #20]
   29cf8:	movw	r8, #23840	; 0x5d20
   29cfc:	movt	r8, #5
   29d00:	cmp	r3, #0
   29d04:	movne	r8, r3
   29d08:	bl	128d4 <__errno_location@plt>
   29d0c:	str	r0, [sp, #28]
   29d10:	ldm	r8, {r3, r9}
   29d14:	ldr	r1, [r8, #40]	; 0x28
   29d18:	ldr	r2, [r8, #44]	; 0x2c
   29d1c:	ldr	r7, [r0]
   29d20:	str	r7, [sp, #32]
   29d24:	add	sl, r8, #8
   29d28:	cmp	r4, #0
   29d2c:	orreq	r9, r9, #1
   29d30:	stm	sp, {r3, r9, sl}
   29d34:	str	r1, [sp, #12]
   29d38:	str	r2, [sp, #16]
   29d3c:	mov	r0, #0
   29d40:	mov	r1, #0
   29d44:	mov	r2, r6
   29d48:	mov	r3, r5
   29d4c:	mov	r7, r5
   29d50:	bl	28ccc <__assert_fail@plt+0x16110>
   29d54:	mov	r5, r0
   29d58:	add	r4, r0, #1
   29d5c:	mov	r0, r4
   29d60:	bl	2b608 <__assert_fail@plt+0x18a4c>
   29d64:	mov	r6, r0
   29d68:	ldr	r0, [r8]
   29d6c:	ldr	r1, [r8, #40]	; 0x28
   29d70:	ldr	r2, [r8, #44]	; 0x2c
   29d74:	stm	sp, {r0, r9, sl}
   29d78:	str	r1, [sp, #12]
   29d7c:	str	r2, [sp, #16]
   29d80:	mov	r0, r6
   29d84:	mov	r1, r4
   29d88:	ldr	r2, [sp, #20]
   29d8c:	mov	r3, r7
   29d90:	bl	28ccc <__assert_fail@plt+0x16110>
   29d94:	ldr	r0, [sp, #24]
   29d98:	ldr	r1, [sp, #32]
   29d9c:	ldr	r2, [sp, #28]
   29da0:	str	r1, [r2]
   29da4:	cmp	r0, #0
   29da8:	strne	r5, [r0]
   29dac:	mov	r0, r6
   29db0:	sub	sp, fp, #28
   29db4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29db8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   29dbc:	add	fp, sp, #24
   29dc0:	movw	r8, #21768	; 0x5508
   29dc4:	movt	r8, #5
   29dc8:	ldr	r4, [r8]
   29dcc:	movw	r5, #21772	; 0x550c
   29dd0:	movt	r5, #5
   29dd4:	ldr	r0, [r5]
   29dd8:	cmp	r0, #2
   29ddc:	blt	29e08 <__assert_fail@plt+0x1724c>
   29de0:	add	r7, r4, #12
   29de4:	mov	r6, #0
   29de8:	ldr	r0, [r7, r6, lsl #3]
   29dec:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   29df0:	add	r0, r6, #1
   29df4:	ldr	r1, [r5]
   29df8:	add	r2, r6, #2
   29dfc:	cmp	r2, r1
   29e00:	mov	r6, r0
   29e04:	blt	29de8 <__assert_fail@plt+0x1722c>
   29e08:	ldr	r0, [r4, #4]
   29e0c:	movw	r7, #23888	; 0x5d50
   29e10:	movt	r7, #5
   29e14:	cmp	r0, r7
   29e18:	beq	29e30 <__assert_fail@plt+0x17274>
   29e1c:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   29e20:	movw	r0, #21776	; 0x5510
   29e24:	movt	r0, #5
   29e28:	mov	r6, #256	; 0x100
   29e2c:	strd	r6, [r0]
   29e30:	movw	r6, #21776	; 0x5510
   29e34:	movt	r6, #5
   29e38:	cmp	r4, r6
   29e3c:	beq	29e4c <__assert_fail@plt+0x17290>
   29e40:	mov	r0, r4
   29e44:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   29e48:	str	r6, [r8]
   29e4c:	mov	r0, #1
   29e50:	str	r0, [r5]
   29e54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   29e58:	movw	r3, #23840	; 0x5d20
   29e5c:	movt	r3, #5
   29e60:	mvn	r2, #0
   29e64:	b	29e68 <__assert_fail@plt+0x172ac>
   29e68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29e6c:	add	fp, sp, #28
   29e70:	sub	sp, sp, #44	; 0x2c
   29e74:	mov	r7, r3
   29e78:	str	r2, [sp, #36]	; 0x24
   29e7c:	str	r1, [sp, #32]
   29e80:	mov	r5, r0
   29e84:	bl	128d4 <__errno_location@plt>
   29e88:	cmp	r5, #0
   29e8c:	blt	29ff8 <__assert_fail@plt+0x1743c>
   29e90:	cmn	r5, #-2147483647	; 0x80000001
   29e94:	beq	29ff8 <__assert_fail@plt+0x1743c>
   29e98:	movw	r4, #21768	; 0x5508
   29e9c:	movt	r4, #5
   29ea0:	ldr	r6, [r4]
   29ea4:	str	r0, [sp, #28]
   29ea8:	ldr	r0, [r0]
   29eac:	str	r0, [sp, #24]
   29eb0:	movw	r8, #21772	; 0x550c
   29eb4:	movt	r8, #5
   29eb8:	ldr	r1, [r8]
   29ebc:	cmp	r1, r5
   29ec0:	ble	29ecc <__assert_fail@plt+0x17310>
   29ec4:	mov	sl, r6
   29ec8:	b	29f34 <__assert_fail@plt+0x17378>
   29ecc:	str	r1, [fp, #-32]	; 0xffffffe0
   29ed0:	mov	r0, #8
   29ed4:	str	r0, [sp]
   29ed8:	movw	r9, #21776	; 0x5510
   29edc:	movt	r9, #5
   29ee0:	subs	r0, r6, r9
   29ee4:	movne	r0, r6
   29ee8:	add	r2, r5, #1
   29eec:	sub	r2, r2, r1
   29ef0:	sub	r1, fp, #32
   29ef4:	mvn	r3, #-2147483648	; 0x80000000
   29ef8:	bl	2b6f0 <__assert_fail@plt+0x18b34>
   29efc:	mov	sl, r0
   29f00:	str	r0, [r4]
   29f04:	cmp	r6, r9
   29f08:	ldrdeq	r0, [r9]
   29f0c:	stmeq	sl, {r0, r1}
   29f10:	ldr	r1, [r8]
   29f14:	add	r0, sl, r1, lsl #3
   29f18:	ldr	r2, [fp, #-32]	; 0xffffffe0
   29f1c:	sub	r1, r2, r1
   29f20:	lsl	r2, r1, #3
   29f24:	mov	r1, #0
   29f28:	bl	12904 <memset@plt>
   29f2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   29f30:	str	r0, [r8]
   29f34:	mov	r9, sl
   29f38:	ldr	r6, [r9, r5, lsl #3]!
   29f3c:	ldr	r4, [r9, #4]!
   29f40:	ldm	r7, {r0, r1}
   29f44:	ldr	r2, [r7, #40]	; 0x28
   29f48:	ldr	r3, [r7, #44]	; 0x2c
   29f4c:	orr	r8, r1, #1
   29f50:	add	r1, r7, #8
   29f54:	stm	sp, {r0, r8}
   29f58:	str	r1, [sp, #20]
   29f5c:	add	r0, sp, #8
   29f60:	stm	r0, {r1, r2, r3}
   29f64:	mov	r0, r4
   29f68:	mov	r1, r6
   29f6c:	ldr	r2, [sp, #32]
   29f70:	ldr	r3, [sp, #36]	; 0x24
   29f74:	bl	28ccc <__assert_fail@plt+0x16110>
   29f78:	cmp	r6, r0
   29f7c:	bhi	29fe0 <__assert_fail@plt+0x17424>
   29f80:	add	r6, r0, #1
   29f84:	str	r6, [sl, r5, lsl #3]
   29f88:	movw	r0, #23888	; 0x5d50
   29f8c:	movt	r0, #5
   29f90:	cmp	r4, r0
   29f94:	beq	29fa0 <__assert_fail@plt+0x173e4>
   29f98:	mov	r0, r4
   29f9c:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   29fa0:	mov	r0, r6
   29fa4:	bl	2b608 <__assert_fail@plt+0x18a4c>
   29fa8:	mov	r4, r0
   29fac:	str	r0, [r9]
   29fb0:	ldr	r0, [r7]
   29fb4:	ldr	r1, [r7, #40]	; 0x28
   29fb8:	ldr	r2, [r7, #44]	; 0x2c
   29fbc:	stm	sp, {r0, r8}
   29fc0:	ldr	r0, [sp, #20]
   29fc4:	add	r3, sp, #8
   29fc8:	stm	r3, {r0, r1, r2}
   29fcc:	mov	r0, r4
   29fd0:	mov	r1, r6
   29fd4:	ldr	r2, [sp, #32]
   29fd8:	ldr	r3, [sp, #36]	; 0x24
   29fdc:	bl	28ccc <__assert_fail@plt+0x16110>
   29fe0:	ldr	r0, [sp, #28]
   29fe4:	ldr	r1, [sp, #24]
   29fe8:	str	r1, [r0]
   29fec:	mov	r0, r4
   29ff0:	sub	sp, fp, #28
   29ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29ff8:	bl	12b68 <abort@plt>
   29ffc:	movw	r3, #23840	; 0x5d20
   2a000:	movt	r3, #5
   2a004:	b	29e68 <__assert_fail@plt+0x172ac>
   2a008:	mov	r1, r0
   2a00c:	mov	r0, #0
   2a010:	b	29e58 <__assert_fail@plt+0x1729c>
   2a014:	mov	r2, r1
   2a018:	mov	r1, r0
   2a01c:	mov	r0, #0
   2a020:	b	29ffc <__assert_fail@plt+0x17440>
   2a024:	push	{r4, r5, r6, sl, fp, lr}
   2a028:	add	fp, sp, #16
   2a02c:	sub	sp, sp, #48	; 0x30
   2a030:	mov	r4, r2
   2a034:	mov	r5, r0
   2a038:	mov	r6, sp
   2a03c:	mov	r0, r6
   2a040:	bl	2a060 <__assert_fail@plt+0x174a4>
   2a044:	mov	r0, r5
   2a048:	mov	r1, r4
   2a04c:	mvn	r2, #0
   2a050:	mov	r3, r6
   2a054:	bl	29e68 <__assert_fail@plt+0x172ac>
   2a058:	sub	sp, fp, #16
   2a05c:	pop	{r4, r5, r6, sl, fp, pc}
   2a060:	vmov.i32	q8, #0	; 0x00000000
   2a064:	mov	r2, #32
   2a068:	mov	r3, r0
   2a06c:	vst1.32	{d16-d17}, [r3], r2
   2a070:	vst1.32	{d16-d17}, [r3]
   2a074:	add	r2, r0, #16
   2a078:	vst1.32	{d16-d17}, [r2]
   2a07c:	cmp	r1, #10
   2a080:	strne	r1, [r0]
   2a084:	bxne	lr
   2a088:	push	{fp, lr}
   2a08c:	mov	fp, sp
   2a090:	bl	12b68 <abort@plt>
   2a094:	push	{r4, r5, r6, r7, fp, lr}
   2a098:	add	fp, sp, #16
   2a09c:	sub	sp, sp, #48	; 0x30
   2a0a0:	mov	r4, r3
   2a0a4:	mov	r5, r2
   2a0a8:	mov	r6, r0
   2a0ac:	mov	r7, sp
   2a0b0:	mov	r0, r7
   2a0b4:	bl	2a060 <__assert_fail@plt+0x174a4>
   2a0b8:	mov	r0, r6
   2a0bc:	mov	r1, r5
   2a0c0:	mov	r2, r4
   2a0c4:	mov	r3, r7
   2a0c8:	bl	29e68 <__assert_fail@plt+0x172ac>
   2a0cc:	sub	sp, fp, #16
   2a0d0:	pop	{r4, r5, r6, r7, fp, pc}
   2a0d4:	mov	r2, r1
   2a0d8:	mov	r1, r0
   2a0dc:	mov	r0, #0
   2a0e0:	b	2a024 <__assert_fail@plt+0x17468>
   2a0e4:	mov	r3, r2
   2a0e8:	mov	r2, r1
   2a0ec:	mov	r1, r0
   2a0f0:	mov	r0, #0
   2a0f4:	b	2a094 <__assert_fail@plt+0x174d8>
   2a0f8:	push	{r4, r5, r6, sl, fp, lr}
   2a0fc:	add	fp, sp, #16
   2a100:	sub	sp, sp, #48	; 0x30
   2a104:	mov	r4, r1
   2a108:	mov	r5, r0
   2a10c:	mov	r0, #32
   2a110:	movw	r1, #23840	; 0x5d20
   2a114:	movt	r1, #5
   2a118:	add	r3, r1, #16
   2a11c:	vld1.64	{d16-d17}, [r1], r0
   2a120:	mov	r6, sp
   2a124:	vld1.64	{d18-d19}, [r3]
   2a128:	add	r3, r6, #16
   2a12c:	vld1.64	{d20-d21}, [r1]
   2a130:	vst1.64	{d18-d19}, [r3]
   2a134:	mov	r1, r6
   2a138:	vst1.64	{d16-d17}, [r1], r0
   2a13c:	vst1.64	{d20-d21}, [r1]
   2a140:	mov	r0, r6
   2a144:	mov	r1, r2
   2a148:	mov	r2, #1
   2a14c:	bl	28bc0 <__assert_fail@plt+0x16004>
   2a150:	mov	r0, #0
   2a154:	mov	r1, r5
   2a158:	mov	r2, r4
   2a15c:	mov	r3, r6
   2a160:	bl	29e68 <__assert_fail@plt+0x172ac>
   2a164:	sub	sp, fp, #16
   2a168:	pop	{r4, r5, r6, sl, fp, pc}
   2a16c:	mov	r2, r1
   2a170:	mvn	r1, #0
   2a174:	b	2a0f8 <__assert_fail@plt+0x1753c>
   2a178:	mov	r1, #58	; 0x3a
   2a17c:	b	2a16c <__assert_fail@plt+0x175b0>
   2a180:	mov	r2, #58	; 0x3a
   2a184:	b	2a0f8 <__assert_fail@plt+0x1753c>
   2a188:	push	{r4, r5, r6, sl, fp, lr}
   2a18c:	add	fp, sp, #16
   2a190:	sub	sp, sp, #48	; 0x30
   2a194:	mov	r4, r2
   2a198:	mov	r5, r0
   2a19c:	mov	r6, sp
   2a1a0:	mov	r0, r6
   2a1a4:	bl	2a060 <__assert_fail@plt+0x174a4>
   2a1a8:	mov	r0, r6
   2a1ac:	mov	r1, #58	; 0x3a
   2a1b0:	mov	r2, #1
   2a1b4:	bl	28bc0 <__assert_fail@plt+0x16004>
   2a1b8:	mov	r0, r5
   2a1bc:	mov	r1, r4
   2a1c0:	mvn	r2, #0
   2a1c4:	mov	r3, r6
   2a1c8:	bl	29e68 <__assert_fail@plt+0x172ac>
   2a1cc:	sub	sp, fp, #16
   2a1d0:	pop	{r4, r5, r6, sl, fp, pc}
   2a1d4:	push	{fp, lr}
   2a1d8:	mov	fp, sp
   2a1dc:	sub	sp, sp, #8
   2a1e0:	mvn	ip, #0
   2a1e4:	str	ip, [sp]
   2a1e8:	bl	2a1f4 <__assert_fail@plt+0x17638>
   2a1ec:	mov	sp, fp
   2a1f0:	pop	{fp, pc}
   2a1f4:	push	{r4, r5, r6, r7, fp, lr}
   2a1f8:	add	fp, sp, #16
   2a1fc:	sub	sp, sp, #48	; 0x30
   2a200:	mov	r7, r3
   2a204:	mov	r5, r0
   2a208:	mov	r0, #32
   2a20c:	movw	r3, #23840	; 0x5d20
   2a210:	movt	r3, #5
   2a214:	add	r4, r3, #16
   2a218:	vld1.64	{d16-d17}, [r3], r0
   2a21c:	mov	r6, sp
   2a220:	vld1.64	{d18-d19}, [r4]
   2a224:	add	r4, r6, #16
   2a228:	vld1.64	{d20-d21}, [r3]
   2a22c:	vst1.64	{d18-d19}, [r4]
   2a230:	mov	r3, r6
   2a234:	vst1.64	{d16-d17}, [r3], r0
   2a238:	vst1.64	{d20-d21}, [r3]
   2a23c:	mov	r0, r6
   2a240:	bl	28c18 <__assert_fail@plt+0x1605c>
   2a244:	ldr	r2, [fp, #8]
   2a248:	mov	r0, r5
   2a24c:	mov	r1, r7
   2a250:	mov	r3, r6
   2a254:	bl	29e68 <__assert_fail@plt+0x172ac>
   2a258:	sub	sp, fp, #16
   2a25c:	pop	{r4, r5, r6, r7, fp, pc}
   2a260:	mov	r3, r2
   2a264:	mov	r2, r1
   2a268:	mov	r1, r0
   2a26c:	mov	r0, #0
   2a270:	b	2a1d4 <__assert_fail@plt+0x17618>
   2a274:	push	{fp, lr}
   2a278:	mov	fp, sp
   2a27c:	sub	sp, sp, #8
   2a280:	mov	ip, r2
   2a284:	mov	r2, r1
   2a288:	mov	r1, r0
   2a28c:	str	r3, [sp]
   2a290:	mov	r0, #0
   2a294:	mov	r3, ip
   2a298:	bl	2a1f4 <__assert_fail@plt+0x17638>
   2a29c:	mov	sp, fp
   2a2a0:	pop	{fp, pc}
   2a2a4:	movw	r3, #21784	; 0x5518
   2a2a8:	movt	r3, #5
   2a2ac:	b	29e68 <__assert_fail@plt+0x172ac>
   2a2b0:	mov	r2, r1
   2a2b4:	mov	r1, r0
   2a2b8:	mov	r0, #0
   2a2bc:	b	2a2a4 <__assert_fail@plt+0x176e8>
   2a2c0:	mvn	r2, #0
   2a2c4:	b	2a2a4 <__assert_fail@plt+0x176e8>
   2a2c8:	mov	r1, r0
   2a2cc:	mov	r0, #0
   2a2d0:	b	2a2c0 <__assert_fail@plt+0x17704>
   2a2d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a2d8:	add	fp, sp, #24
   2a2dc:	sub	sp, sp, #16
   2a2e0:	mov	r4, r1
   2a2e4:	mov	r5, r0
   2a2e8:	mov	r7, #0
   2a2ec:	mov	r0, #0
   2a2f0:	mov	r1, r5
   2a2f4:	mov	r2, #5
   2a2f8:	bl	1264c <dcgettext@plt>
   2a2fc:	cmp	r0, r5
   2a300:	beq	2a30c <__assert_fail@plt+0x17750>
   2a304:	sub	sp, fp, #24
   2a308:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a30c:	bl	3def0 <__assert_fail@plt+0x2b334>
   2a310:	mov	r6, r0
   2a314:	mov	r8, #56	; 0x38
   2a318:	mov	r0, #45	; 0x2d
   2a31c:	stm	sp, {r0, r8}
   2a320:	str	r7, [sp, #8]
   2a324:	str	r7, [sp, #12]
   2a328:	mov	r0, r6
   2a32c:	mov	r1, #85	; 0x55
   2a330:	mov	r2, #84	; 0x54
   2a334:	mov	r3, #70	; 0x46
   2a338:	bl	2a3d0 <__assert_fail@plt+0x17814>
   2a33c:	cmp	r0, #0
   2a340:	beq	2a35c <__assert_fail@plt+0x177a0>
   2a344:	ldrb	r1, [r5]
   2a348:	movw	r2, #17230	; 0x434e
   2a34c:	movt	r2, #4
   2a350:	movw	r0, #17234	; 0x4352
   2a354:	movt	r0, #4
   2a358:	b	2a3a0 <__assert_fail@plt+0x177e4>
   2a35c:	mov	r0, #48	; 0x30
   2a360:	mov	r1, #51	; 0x33
   2a364:	str	r8, [sp]
   2a368:	stmib	sp, {r0, r1}
   2a36c:	str	r0, [sp, #12]
   2a370:	mov	r0, r6
   2a374:	mov	r1, #71	; 0x47
   2a378:	mov	r2, #66	; 0x42
   2a37c:	mov	r3, #49	; 0x31
   2a380:	bl	2a3d0 <__assert_fail@plt+0x17814>
   2a384:	cmp	r0, #0
   2a388:	beq	2a3b0 <__assert_fail@plt+0x177f4>
   2a38c:	ldrb	r1, [r5]
   2a390:	movw	r2, #17238	; 0x4356
   2a394:	movt	r2, #4
   2a398:	movw	r0, #17242	; 0x435a
   2a39c:	movt	r0, #4
   2a3a0:	cmp	r1, #96	; 0x60
   2a3a4:	moveq	r0, r2
   2a3a8:	sub	sp, fp, #24
   2a3ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a3b0:	movw	r1, #17082	; 0x42ba
   2a3b4:	movt	r1, #4
   2a3b8:	movw	r0, #4088	; 0xff8
   2a3bc:	movt	r0, #4
   2a3c0:	cmp	r4, #9
   2a3c4:	moveq	r0, r1
   2a3c8:	sub	sp, fp, #24
   2a3cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a3d0:	push	{r4, r5, r6, r7, fp, lr}
   2a3d4:	add	fp, sp, #16
   2a3d8:	sub	sp, sp, #16
   2a3dc:	mov	r4, r3
   2a3e0:	mov	r5, r2
   2a3e4:	mov	r7, r1
   2a3e8:	mov	r6, r0
   2a3ec:	mov	r0, r1
   2a3f0:	bl	3da80 <__assert_fail@plt+0x2aec4>
   2a3f4:	ldrb	r1, [r6]
   2a3f8:	cmp	r0, #0
   2a3fc:	andne	r1, r1, #223	; 0xdf
   2a400:	mov	r0, #0
   2a404:	cmp	r1, r7
   2a408:	bne	2a448 <__assert_fail@plt+0x1788c>
   2a40c:	cmp	r7, #0
   2a410:	moveq	r0, #1
   2a414:	subeq	sp, fp, #16
   2a418:	popeq	{r4, r5, r6, r7, fp, pc}
   2a41c:	ldr	r0, [fp, #20]
   2a420:	ldr	r1, [fp, #16]
   2a424:	ldr	r2, [fp, #12]
   2a428:	ldr	r3, [fp, #8]
   2a42c:	str	r2, [sp]
   2a430:	str	r1, [sp, #4]
   2a434:	str	r0, [sp, #8]
   2a438:	mov	r0, r6
   2a43c:	mov	r1, r5
   2a440:	mov	r2, r4
   2a444:	bl	2a450 <__assert_fail@plt+0x17894>
   2a448:	sub	sp, fp, #16
   2a44c:	pop	{r4, r5, r6, r7, fp, pc}
   2a450:	push	{r4, r5, r6, r7, fp, lr}
   2a454:	add	fp, sp, #16
   2a458:	sub	sp, sp, #8
   2a45c:	mov	r4, r3
   2a460:	mov	r5, r2
   2a464:	mov	r7, r1
   2a468:	mov	r6, r0
   2a46c:	mov	r0, r1
   2a470:	bl	3da80 <__assert_fail@plt+0x2aec4>
   2a474:	ldrb	r1, [r6, #1]
   2a478:	cmp	r0, #0
   2a47c:	andne	r1, r1, #223	; 0xdf
   2a480:	mov	r0, #0
   2a484:	cmp	r1, r7
   2a488:	bne	2a4c0 <__assert_fail@plt+0x17904>
   2a48c:	cmp	r7, #0
   2a490:	moveq	r0, #1
   2a494:	subeq	sp, fp, #16
   2a498:	popeq	{r4, r5, r6, r7, fp, pc}
   2a49c:	ldr	r0, [fp, #16]
   2a4a0:	ldr	r1, [fp, #12]
   2a4a4:	ldr	r3, [fp, #8]
   2a4a8:	str	r1, [sp]
   2a4ac:	str	r0, [sp, #4]
   2a4b0:	mov	r0, r6
   2a4b4:	mov	r1, r5
   2a4b8:	mov	r2, r4
   2a4bc:	bl	2a4c8 <__assert_fail@plt+0x1790c>
   2a4c0:	sub	sp, fp, #16
   2a4c4:	pop	{r4, r5, r6, r7, fp, pc}
   2a4c8:	push	{r4, r5, r6, r7, fp, lr}
   2a4cc:	add	fp, sp, #16
   2a4d0:	sub	sp, sp, #8
   2a4d4:	mov	r4, r3
   2a4d8:	mov	r5, r2
   2a4dc:	mov	r7, r1
   2a4e0:	mov	r6, r0
   2a4e4:	mov	r0, r1
   2a4e8:	bl	3da80 <__assert_fail@plt+0x2aec4>
   2a4ec:	ldrb	r1, [r6, #2]
   2a4f0:	cmp	r0, #0
   2a4f4:	andne	r1, r1, #223	; 0xdf
   2a4f8:	mov	r0, #0
   2a4fc:	cmp	r1, r7
   2a500:	bne	2a530 <__assert_fail@plt+0x17974>
   2a504:	cmp	r7, #0
   2a508:	moveq	r0, #1
   2a50c:	subeq	sp, fp, #16
   2a510:	popeq	{r4, r5, r6, r7, fp, pc}
   2a514:	ldr	r0, [fp, #12]
   2a518:	ldr	r3, [fp, #8]
   2a51c:	str	r0, [sp]
   2a520:	mov	r0, r6
   2a524:	mov	r1, r5
   2a528:	mov	r2, r4
   2a52c:	bl	2a538 <__assert_fail@plt+0x1797c>
   2a530:	sub	sp, fp, #16
   2a534:	pop	{r4, r5, r6, r7, fp, pc}
   2a538:	push	{r4, r5, r6, r7, fp, lr}
   2a53c:	add	fp, sp, #16
   2a540:	mov	r4, r3
   2a544:	mov	r5, r2
   2a548:	mov	r7, r1
   2a54c:	mov	r6, r0
   2a550:	mov	r0, r1
   2a554:	bl	3da80 <__assert_fail@plt+0x2aec4>
   2a558:	ldrb	r1, [r6, #3]
   2a55c:	ldr	r3, [fp, #8]
   2a560:	cmp	r0, #0
   2a564:	andne	r1, r1, #223	; 0xdf
   2a568:	mov	r0, #0
   2a56c:	cmp	r1, r7
   2a570:	popne	{r4, r5, r6, r7, fp, pc}
   2a574:	cmp	r7, #0
   2a578:	beq	2a590 <__assert_fail@plt+0x179d4>
   2a57c:	mov	r0, r6
   2a580:	mov	r1, r5
   2a584:	mov	r2, r4
   2a588:	pop	{r4, r5, r6, r7, fp, lr}
   2a58c:	b	2a598 <__assert_fail@plt+0x179dc>
   2a590:	mov	r0, #1
   2a594:	pop	{r4, r5, r6, r7, fp, pc}
   2a598:	push	{r4, r5, r6, r7, fp, lr}
   2a59c:	add	fp, sp, #16
   2a5a0:	mov	r4, r3
   2a5a4:	mov	r5, r2
   2a5a8:	mov	r7, r1
   2a5ac:	mov	r6, r0
   2a5b0:	mov	r0, r1
   2a5b4:	bl	3da80 <__assert_fail@plt+0x2aec4>
   2a5b8:	ldrb	r1, [r6, #4]
   2a5bc:	cmp	r0, #0
   2a5c0:	andne	r1, r1, #223	; 0xdf
   2a5c4:	mov	r0, #0
   2a5c8:	cmp	r1, r7
   2a5cc:	popne	{r4, r5, r6, r7, fp, pc}
   2a5d0:	cmp	r7, #0
   2a5d4:	beq	2a5ec <__assert_fail@plt+0x17a30>
   2a5d8:	mov	r0, r6
   2a5dc:	mov	r1, r5
   2a5e0:	mov	r2, r4
   2a5e4:	pop	{r4, r5, r6, r7, fp, lr}
   2a5e8:	b	2a5f4 <__assert_fail@plt+0x17a38>
   2a5ec:	mov	r0, #1
   2a5f0:	pop	{r4, r5, r6, r7, fp, pc}
   2a5f4:	push	{r4, r5, r6, sl, fp, lr}
   2a5f8:	add	fp, sp, #16
   2a5fc:	mov	r4, r2
   2a600:	mov	r6, r1
   2a604:	mov	r5, r0
   2a608:	mov	r0, r1
   2a60c:	bl	3da80 <__assert_fail@plt+0x2aec4>
   2a610:	ldrb	r1, [r5, #5]
   2a614:	cmp	r0, #0
   2a618:	andne	r1, r1, #223	; 0xdf
   2a61c:	mov	r0, #0
   2a620:	cmp	r1, r6
   2a624:	popne	{r4, r5, r6, sl, fp, pc}
   2a628:	cmp	r6, #0
   2a62c:	beq	2a640 <__assert_fail@plt+0x17a84>
   2a630:	mov	r0, r5
   2a634:	mov	r1, r4
   2a638:	pop	{r4, r5, r6, sl, fp, lr}
   2a63c:	b	2a648 <__assert_fail@plt+0x17a8c>
   2a640:	mov	r0, #1
   2a644:	pop	{r4, r5, r6, sl, fp, pc}
   2a648:	push	{r4, r5, fp, lr}
   2a64c:	add	fp, sp, #8
   2a650:	mov	r5, r1
   2a654:	mov	r4, r0
   2a658:	mov	r0, r1
   2a65c:	bl	3da80 <__assert_fail@plt+0x2aec4>
   2a660:	ldrb	r1, [r4, #6]
   2a664:	cmp	r0, #0
   2a668:	andne	r1, r1, #223	; 0xdf
   2a66c:	mov	r0, #0
   2a670:	cmp	r1, r5
   2a674:	popne	{r4, r5, fp, pc}
   2a678:	cmp	r5, #0
   2a67c:	beq	2a68c <__assert_fail@plt+0x17ad0>
   2a680:	mov	r0, r4
   2a684:	pop	{r4, r5, fp, lr}
   2a688:	b	2a694 <__assert_fail@plt+0x17ad8>
   2a68c:	mov	r0, #1
   2a690:	pop	{r4, r5, fp, pc}
   2a694:	push	{r4, sl, fp, lr}
   2a698:	add	fp, sp, #8
   2a69c:	mov	r4, r0
   2a6a0:	mov	r0, #0
   2a6a4:	bl	3da80 <__assert_fail@plt+0x2aec4>
   2a6a8:	ldrb	r1, [r4, #7]
   2a6ac:	cmp	r0, #0
   2a6b0:	beq	2a6c8 <__assert_fail@plt+0x17b0c>
   2a6b4:	tst	r1, #223	; 0xdf
   2a6b8:	moveq	r0, #1
   2a6bc:	popeq	{r4, sl, fp, pc}
   2a6c0:	mov	r0, #0
   2a6c4:	pop	{r4, sl, fp, pc}
   2a6c8:	cmp	r1, #0
   2a6cc:	moveq	r0, #1
   2a6d0:	popeq	{r4, sl, fp, pc}
   2a6d4:	mov	r0, #0
   2a6d8:	pop	{r4, sl, fp, pc}
   2a6dc:	push	{r4, r5, fp, lr}
   2a6e0:	add	fp, sp, #8
   2a6e4:	mov	r5, r0
   2a6e8:	mov	r4, #0
   2a6ec:	str	r4, [r0, #4]
   2a6f0:	movw	r0, #64308	; 0xfb34
   2a6f4:	movt	r0, #3
   2a6f8:	mov	r1, #524288	; 0x80000
   2a6fc:	bl	21ff8 <__assert_fail@plt+0xf43c>
   2a700:	str	r0, [r5]
   2a704:	cmn	r0, #1
   2a708:	ble	2a714 <__assert_fail@plt+0x17b58>
   2a70c:	mov	r0, r4
   2a710:	pop	{r4, r5, fp, pc}
   2a714:	mov	r4, #0
   2a718:	mov	r0, #0
   2a71c:	mov	r1, #0
   2a720:	bl	12850 <getcwd@plt>
   2a724:	str	r0, [r5, #4]
   2a728:	cmp	r0, #0
   2a72c:	mvneq	r4, #0
   2a730:	mov	r0, r4
   2a734:	pop	{r4, r5, fp, pc}
   2a738:	ldr	r1, [r0]
   2a73c:	cmp	r1, #0
   2a740:	blt	2a74c <__assert_fail@plt+0x17b90>
   2a744:	mov	r0, r1
   2a748:	b	12aa8 <fchdir@plt>
   2a74c:	ldr	r0, [r0, #4]
   2a750:	b	2c4f0 <__assert_fail@plt+0x19934>
   2a754:	push	{r4, sl, fp, lr}
   2a758:	add	fp, sp, #8
   2a75c:	mov	r4, r0
   2a760:	ldr	r0, [r0]
   2a764:	cmp	r0, #0
   2a768:	blt	2a770 <__assert_fail@plt+0x17bb4>
   2a76c:	bl	12b74 <close@plt>
   2a770:	ldr	r0, [r4, #4]
   2a774:	pop	{r4, sl, fp, lr}
   2a778:	b	2ca78 <__assert_fail@plt+0x19ebc>
   2a77c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a780:	add	fp, sp, #28
   2a784:	sub	sp, sp, #964	; 0x3c4
   2a788:	sub	sp, sp, #3072	; 0xc00
   2a78c:	mov	r4, r2
   2a790:	mov	r5, r1
   2a794:	cmn	r0, #100	; 0x64
   2a798:	beq	2a7ac <__assert_fail@plt+0x17bf0>
   2a79c:	mov	r7, r0
   2a7a0:	ldrb	r0, [r5]
   2a7a4:	cmp	r0, #47	; 0x2f
   2a7a8:	bne	2a7c0 <__assert_fail@plt+0x17c04>
   2a7ac:	mov	r0, r5
   2a7b0:	mov	r1, r4
   2a7b4:	sub	sp, fp, #28
   2a7b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a7bc:	b	2ec40 <__assert_fail@plt+0x1c084>
   2a7c0:	mov	sl, sp
   2a7c4:	mov	r0, sl
   2a7c8:	mov	r1, r7
   2a7cc:	mov	r2, r5
   2a7d0:	bl	3d4e0 <__assert_fail@plt+0x2a924>
   2a7d4:	cmp	r0, #0
   2a7d8:	beq	2a8c4 <__assert_fail@plt+0x17d08>
   2a7dc:	mov	r6, r0
   2a7e0:	mov	r1, r4
   2a7e4:	bl	2ec40 <__assert_fail@plt+0x1c084>
   2a7e8:	mov	r9, r0
   2a7ec:	bl	128d4 <__errno_location@plt>
   2a7f0:	mov	r8, r0
   2a7f4:	ldr	r2, [r0]
   2a7f8:	cmp	r6, sl
   2a7fc:	beq	2a810 <__assert_fail@plt+0x17c54>
   2a800:	mov	r0, r6
   2a804:	mov	r6, r2
   2a808:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2a80c:	mov	r2, r6
   2a810:	cmn	r9, #1
   2a814:	bne	2a990 <__assert_fail@plt+0x17dd4>
   2a818:	sub	r0, r2, #1
   2a81c:	cmp	r0, #37	; 0x25
   2a820:	bhi	2a984 <__assert_fail@plt+0x17dc8>
   2a824:	add	r1, pc, #0
   2a828:	ldr	pc, [r1, r0, lsl #2]
   2a82c:	andeq	sl, r2, r4, asr #17
   2a830:	andeq	sl, r2, r4, asr #17
   2a834:	andeq	sl, r2, ip, lsl #19
   2a838:	andeq	sl, r2, ip, lsl #19
   2a83c:	andeq	sl, r2, ip, lsl #19
   2a840:	andeq	sl, r2, ip, lsl #19
   2a844:	andeq	sl, r2, ip, lsl #19
   2a848:	andeq	sl, r2, ip, lsl #19
   2a84c:	andeq	sl, r2, ip, lsl #19
   2a850:	andeq	sl, r2, ip, lsl #19
   2a854:	andeq	sl, r2, ip, lsl #19
   2a858:	andeq	sl, r2, ip, lsl #19
   2a85c:	andeq	sl, r2, r4, asr #17
   2a860:	andeq	sl, r2, ip, lsl #19
   2a864:	andeq	sl, r2, ip, lsl #19
   2a868:	andeq	sl, r2, ip, lsl #19
   2a86c:	andeq	sl, r2, ip, lsl #19
   2a870:	andeq	sl, r2, ip, lsl #19
   2a874:	andeq	sl, r2, ip, lsl #19
   2a878:	andeq	sl, r2, r4, asr #17
   2a87c:	andeq	sl, r2, ip, lsl #19
   2a880:	andeq	sl, r2, ip, lsl #19
   2a884:	andeq	sl, r2, ip, lsl #19
   2a888:	andeq	sl, r2, ip, lsl #19
   2a88c:	andeq	sl, r2, ip, lsl #19
   2a890:	andeq	sl, r2, ip, lsl #19
   2a894:	andeq	sl, r2, ip, lsl #19
   2a898:	andeq	sl, r2, ip, lsl #19
   2a89c:	andeq	sl, r2, ip, lsl #19
   2a8a0:	andeq	sl, r2, ip, lsl #19
   2a8a4:	andeq	sl, r2, ip, lsl #19
   2a8a8:	andeq	sl, r2, ip, lsl #19
   2a8ac:	andeq	sl, r2, ip, lsl #19
   2a8b0:	andeq	sl, r2, ip, lsl #19
   2a8b4:	andeq	sl, r2, ip, lsl #19
   2a8b8:	andeq	sl, r2, ip, lsl #19
   2a8bc:	andeq	sl, r2, ip, lsl #19
   2a8c0:	andeq	sl, r2, r4, asr #17
   2a8c4:	mov	r0, sp
   2a8c8:	bl	2a6dc <__assert_fail@plt+0x17b20>
   2a8cc:	cmp	r0, #0
   2a8d0:	bne	2a99c <__assert_fail@plt+0x17de0>
   2a8d4:	cmp	r7, #0
   2a8d8:	blt	2a904 <__assert_fail@plt+0x17d48>
   2a8dc:	ldr	r0, [sp]
   2a8e0:	cmp	r0, r7
   2a8e4:	bne	2a904 <__assert_fail@plt+0x17d48>
   2a8e8:	mov	r0, sp
   2a8ec:	bl	2a754 <__assert_fail@plt+0x17b98>
   2a8f0:	bl	128d4 <__errno_location@plt>
   2a8f4:	mov	r1, #9
   2a8f8:	str	r1, [r0]
   2a8fc:	mvn	r9, #0
   2a900:	b	2a990 <__assert_fail@plt+0x17dd4>
   2a904:	mov	r0, r7
   2a908:	bl	12aa8 <fchdir@plt>
   2a90c:	cmp	r0, #0
   2a910:	beq	2a934 <__assert_fail@plt+0x17d78>
   2a914:	bl	128d4 <__errno_location@plt>
   2a918:	mov	r4, r0
   2a91c:	ldr	r5, [r0]
   2a920:	mov	r0, sp
   2a924:	bl	2a754 <__assert_fail@plt+0x17b98>
   2a928:	str	r5, [r4]
   2a92c:	mvn	r9, #0
   2a930:	b	2a990 <__assert_fail@plt+0x17dd4>
   2a934:	mov	r0, r5
   2a938:	mov	r1, r4
   2a93c:	bl	2ec40 <__assert_fail@plt+0x1c084>
   2a940:	mov	r9, r0
   2a944:	mov	r4, #0
   2a948:	cmn	r0, #1
   2a94c:	bne	2a958 <__assert_fail@plt+0x17d9c>
   2a950:	bl	128d4 <__errno_location@plt>
   2a954:	ldr	r4, [r0]
   2a958:	mov	r0, sp
   2a95c:	bl	2a738 <__assert_fail@plt+0x17b7c>
   2a960:	cmp	r0, #0
   2a964:	bne	2a9a8 <__assert_fail@plt+0x17dec>
   2a968:	mov	r0, sp
   2a96c:	bl	2a754 <__assert_fail@plt+0x17b98>
   2a970:	cmp	r4, #0
   2a974:	beq	2a990 <__assert_fail@plt+0x17dd4>
   2a978:	bl	128d4 <__errno_location@plt>
   2a97c:	str	r4, [r0]
   2a980:	b	2a990 <__assert_fail@plt+0x17dd4>
   2a984:	cmp	r2, #95	; 0x5f
   2a988:	beq	2a8c4 <__assert_fail@plt+0x17d08>
   2a98c:	str	r2, [r8]
   2a990:	mov	r0, r9
   2a994:	sub	sp, fp, #28
   2a998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a99c:	bl	128d4 <__errno_location@plt>
   2a9a0:	ldr	r0, [r0]
   2a9a4:	bl	254e8 <__assert_fail@plt+0x1292c>
   2a9a8:	bl	128d4 <__errno_location@plt>
   2a9ac:	ldr	r0, [r0]
   2a9b0:	bl	25528 <__assert_fail@plt+0x1296c>
   2a9b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a9b8:	add	fp, sp, #28
   2a9bc:	sub	sp, sp, #964	; 0x3c4
   2a9c0:	sub	sp, sp, #3072	; 0xc00
   2a9c4:	mov	r4, r2
   2a9c8:	mov	r5, r1
   2a9cc:	cmn	r0, #100	; 0x64
   2a9d0:	beq	2a9e4 <__assert_fail@plt+0x17e28>
   2a9d4:	mov	r7, r0
   2a9d8:	ldrb	r0, [r5]
   2a9dc:	cmp	r0, #47	; 0x2f
   2a9e0:	bne	2a9f8 <__assert_fail@plt+0x17e3c>
   2a9e4:	mov	r0, r5
   2a9e8:	mov	r1, r4
   2a9ec:	sub	sp, fp, #28
   2a9f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a9f4:	b	2eccc <__assert_fail@plt+0x1c110>
   2a9f8:	mov	sl, sp
   2a9fc:	mov	r0, sl
   2aa00:	mov	r1, r7
   2aa04:	mov	r2, r5
   2aa08:	bl	3d4e0 <__assert_fail@plt+0x2a924>
   2aa0c:	cmp	r0, #0
   2aa10:	beq	2aafc <__assert_fail@plt+0x17f40>
   2aa14:	mov	r6, r0
   2aa18:	mov	r1, r4
   2aa1c:	bl	2eccc <__assert_fail@plt+0x1c110>
   2aa20:	mov	r9, r0
   2aa24:	bl	128d4 <__errno_location@plt>
   2aa28:	mov	r8, r0
   2aa2c:	ldr	r2, [r0]
   2aa30:	cmp	r6, sl
   2aa34:	beq	2aa48 <__assert_fail@plt+0x17e8c>
   2aa38:	mov	r0, r6
   2aa3c:	mov	r6, r2
   2aa40:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2aa44:	mov	r2, r6
   2aa48:	cmn	r9, #1
   2aa4c:	bne	2abc8 <__assert_fail@plt+0x1800c>
   2aa50:	sub	r0, r2, #1
   2aa54:	cmp	r0, #37	; 0x25
   2aa58:	bhi	2abbc <__assert_fail@plt+0x18000>
   2aa5c:	add	r1, pc, #0
   2aa60:	ldr	pc, [r1, r0, lsl #2]
   2aa64:	strdeq	sl, [r2], -ip
   2aa68:	strdeq	sl, [r2], -ip
   2aa6c:	andeq	sl, r2, r4, asr #23
   2aa70:	andeq	sl, r2, r4, asr #23
   2aa74:	andeq	sl, r2, r4, asr #23
   2aa78:	andeq	sl, r2, r4, asr #23
   2aa7c:	andeq	sl, r2, r4, asr #23
   2aa80:	andeq	sl, r2, r4, asr #23
   2aa84:	andeq	sl, r2, r4, asr #23
   2aa88:	andeq	sl, r2, r4, asr #23
   2aa8c:	andeq	sl, r2, r4, asr #23
   2aa90:	andeq	sl, r2, r4, asr #23
   2aa94:	strdeq	sl, [r2], -ip
   2aa98:	andeq	sl, r2, r4, asr #23
   2aa9c:	andeq	sl, r2, r4, asr #23
   2aaa0:	andeq	sl, r2, r4, asr #23
   2aaa4:	andeq	sl, r2, r4, asr #23
   2aaa8:	andeq	sl, r2, r4, asr #23
   2aaac:	andeq	sl, r2, r4, asr #23
   2aab0:	strdeq	sl, [r2], -ip
   2aab4:	andeq	sl, r2, r4, asr #23
   2aab8:	andeq	sl, r2, r4, asr #23
   2aabc:	andeq	sl, r2, r4, asr #23
   2aac0:	andeq	sl, r2, r4, asr #23
   2aac4:	andeq	sl, r2, r4, asr #23
   2aac8:	andeq	sl, r2, r4, asr #23
   2aacc:	andeq	sl, r2, r4, asr #23
   2aad0:	andeq	sl, r2, r4, asr #23
   2aad4:	andeq	sl, r2, r4, asr #23
   2aad8:	andeq	sl, r2, r4, asr #23
   2aadc:	andeq	sl, r2, r4, asr #23
   2aae0:	andeq	sl, r2, r4, asr #23
   2aae4:	andeq	sl, r2, r4, asr #23
   2aae8:	andeq	sl, r2, r4, asr #23
   2aaec:	andeq	sl, r2, r4, asr #23
   2aaf0:	andeq	sl, r2, r4, asr #23
   2aaf4:	andeq	sl, r2, r4, asr #23
   2aaf8:	strdeq	sl, [r2], -ip
   2aafc:	mov	r0, sp
   2ab00:	bl	2a6dc <__assert_fail@plt+0x17b20>
   2ab04:	cmp	r0, #0
   2ab08:	bne	2abd4 <__assert_fail@plt+0x18018>
   2ab0c:	cmp	r7, #0
   2ab10:	blt	2ab3c <__assert_fail@plt+0x17f80>
   2ab14:	ldr	r0, [sp]
   2ab18:	cmp	r0, r7
   2ab1c:	bne	2ab3c <__assert_fail@plt+0x17f80>
   2ab20:	mov	r0, sp
   2ab24:	bl	2a754 <__assert_fail@plt+0x17b98>
   2ab28:	bl	128d4 <__errno_location@plt>
   2ab2c:	mov	r1, #9
   2ab30:	str	r1, [r0]
   2ab34:	mvn	r9, #0
   2ab38:	b	2abc8 <__assert_fail@plt+0x1800c>
   2ab3c:	mov	r0, r7
   2ab40:	bl	12aa8 <fchdir@plt>
   2ab44:	cmp	r0, #0
   2ab48:	beq	2ab6c <__assert_fail@plt+0x17fb0>
   2ab4c:	bl	128d4 <__errno_location@plt>
   2ab50:	mov	r4, r0
   2ab54:	ldr	r5, [r0]
   2ab58:	mov	r0, sp
   2ab5c:	bl	2a754 <__assert_fail@plt+0x17b98>
   2ab60:	str	r5, [r4]
   2ab64:	mvn	r9, #0
   2ab68:	b	2abc8 <__assert_fail@plt+0x1800c>
   2ab6c:	mov	r0, r5
   2ab70:	mov	r1, r4
   2ab74:	bl	2eccc <__assert_fail@plt+0x1c110>
   2ab78:	mov	r9, r0
   2ab7c:	mov	r4, #0
   2ab80:	cmn	r0, #1
   2ab84:	bne	2ab90 <__assert_fail@plt+0x17fd4>
   2ab88:	bl	128d4 <__errno_location@plt>
   2ab8c:	ldr	r4, [r0]
   2ab90:	mov	r0, sp
   2ab94:	bl	2a738 <__assert_fail@plt+0x17b7c>
   2ab98:	cmp	r0, #0
   2ab9c:	bne	2abe0 <__assert_fail@plt+0x18024>
   2aba0:	mov	r0, sp
   2aba4:	bl	2a754 <__assert_fail@plt+0x17b98>
   2aba8:	cmp	r4, #0
   2abac:	beq	2abc8 <__assert_fail@plt+0x1800c>
   2abb0:	bl	128d4 <__errno_location@plt>
   2abb4:	str	r4, [r0]
   2abb8:	b	2abc8 <__assert_fail@plt+0x1800c>
   2abbc:	cmp	r2, #95	; 0x5f
   2abc0:	beq	2aafc <__assert_fail@plt+0x17f40>
   2abc4:	str	r2, [r8]
   2abc8:	mov	r0, r9
   2abcc:	sub	sp, fp, #28
   2abd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2abd4:	bl	128d4 <__errno_location@plt>
   2abd8:	ldr	r0, [r0]
   2abdc:	bl	254e8 <__assert_fail@plt+0x1292c>
   2abe0:	bl	128d4 <__errno_location@plt>
   2abe4:	ldr	r0, [r0]
   2abe8:	bl	25528 <__assert_fail@plt+0x1296c>
   2abec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2abf0:	add	fp, sp, #28
   2abf4:	sub	sp, sp, #964	; 0x3c4
   2abf8:	sub	sp, sp, #3072	; 0xc00
   2abfc:	mov	r4, r2
   2ac00:	mov	r5, r1
   2ac04:	cmn	r0, #100	; 0x64
   2ac08:	beq	2ac1c <__assert_fail@plt+0x18060>
   2ac0c:	mov	r7, r0
   2ac10:	ldrb	r0, [r5]
   2ac14:	cmp	r0, #47	; 0x2f
   2ac18:	bne	2ac30 <__assert_fail@plt+0x18074>
   2ac1c:	mov	r0, r5
   2ac20:	mov	r1, r4
   2ac24:	sub	sp, fp, #28
   2ac28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ac2c:	b	12988 <setfilecon@plt>
   2ac30:	mov	sl, sp
   2ac34:	mov	r0, sl
   2ac38:	mov	r1, r7
   2ac3c:	mov	r2, r5
   2ac40:	bl	3d4e0 <__assert_fail@plt+0x2a924>
   2ac44:	cmp	r0, #0
   2ac48:	beq	2ad34 <__assert_fail@plt+0x18178>
   2ac4c:	mov	r6, r0
   2ac50:	mov	r1, r4
   2ac54:	bl	12988 <setfilecon@plt>
   2ac58:	mov	r9, r0
   2ac5c:	bl	128d4 <__errno_location@plt>
   2ac60:	mov	r8, r0
   2ac64:	ldr	r2, [r0]
   2ac68:	cmp	r6, sl
   2ac6c:	beq	2ac80 <__assert_fail@plt+0x180c4>
   2ac70:	mov	r0, r6
   2ac74:	mov	r6, r2
   2ac78:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2ac7c:	mov	r2, r6
   2ac80:	cmn	r9, #1
   2ac84:	bne	2ae00 <__assert_fail@plt+0x18244>
   2ac88:	sub	r0, r2, #1
   2ac8c:	cmp	r0, #37	; 0x25
   2ac90:	bhi	2adf4 <__assert_fail@plt+0x18238>
   2ac94:	add	r1, pc, #0
   2ac98:	ldr	pc, [r1, r0, lsl #2]
   2ac9c:	andeq	sl, r2, r4, lsr sp
   2aca0:	andeq	sl, r2, r4, lsr sp
   2aca4:	strdeq	sl, [r2], -ip
   2aca8:	strdeq	sl, [r2], -ip
   2acac:	strdeq	sl, [r2], -ip
   2acb0:	strdeq	sl, [r2], -ip
   2acb4:	strdeq	sl, [r2], -ip
   2acb8:	strdeq	sl, [r2], -ip
   2acbc:	strdeq	sl, [r2], -ip
   2acc0:	strdeq	sl, [r2], -ip
   2acc4:	strdeq	sl, [r2], -ip
   2acc8:	strdeq	sl, [r2], -ip
   2accc:	andeq	sl, r2, r4, lsr sp
   2acd0:	strdeq	sl, [r2], -ip
   2acd4:	strdeq	sl, [r2], -ip
   2acd8:	strdeq	sl, [r2], -ip
   2acdc:	strdeq	sl, [r2], -ip
   2ace0:	strdeq	sl, [r2], -ip
   2ace4:	strdeq	sl, [r2], -ip
   2ace8:	andeq	sl, r2, r4, lsr sp
   2acec:	strdeq	sl, [r2], -ip
   2acf0:	strdeq	sl, [r2], -ip
   2acf4:	strdeq	sl, [r2], -ip
   2acf8:	strdeq	sl, [r2], -ip
   2acfc:	strdeq	sl, [r2], -ip
   2ad00:	strdeq	sl, [r2], -ip
   2ad04:	strdeq	sl, [r2], -ip
   2ad08:	strdeq	sl, [r2], -ip
   2ad0c:	strdeq	sl, [r2], -ip
   2ad10:	strdeq	sl, [r2], -ip
   2ad14:	strdeq	sl, [r2], -ip
   2ad18:	strdeq	sl, [r2], -ip
   2ad1c:	strdeq	sl, [r2], -ip
   2ad20:	strdeq	sl, [r2], -ip
   2ad24:	strdeq	sl, [r2], -ip
   2ad28:	strdeq	sl, [r2], -ip
   2ad2c:	strdeq	sl, [r2], -ip
   2ad30:	andeq	sl, r2, r4, lsr sp
   2ad34:	mov	r0, sp
   2ad38:	bl	2a6dc <__assert_fail@plt+0x17b20>
   2ad3c:	cmp	r0, #0
   2ad40:	bne	2ae0c <__assert_fail@plt+0x18250>
   2ad44:	cmp	r7, #0
   2ad48:	blt	2ad74 <__assert_fail@plt+0x181b8>
   2ad4c:	ldr	r0, [sp]
   2ad50:	cmp	r0, r7
   2ad54:	bne	2ad74 <__assert_fail@plt+0x181b8>
   2ad58:	mov	r0, sp
   2ad5c:	bl	2a754 <__assert_fail@plt+0x17b98>
   2ad60:	bl	128d4 <__errno_location@plt>
   2ad64:	mov	r1, #9
   2ad68:	str	r1, [r0]
   2ad6c:	mvn	r9, #0
   2ad70:	b	2ae00 <__assert_fail@plt+0x18244>
   2ad74:	mov	r0, r7
   2ad78:	bl	12aa8 <fchdir@plt>
   2ad7c:	cmp	r0, #0
   2ad80:	beq	2ada4 <__assert_fail@plt+0x181e8>
   2ad84:	bl	128d4 <__errno_location@plt>
   2ad88:	mov	r4, r0
   2ad8c:	ldr	r5, [r0]
   2ad90:	mov	r0, sp
   2ad94:	bl	2a754 <__assert_fail@plt+0x17b98>
   2ad98:	str	r5, [r4]
   2ad9c:	mvn	r9, #0
   2ada0:	b	2ae00 <__assert_fail@plt+0x18244>
   2ada4:	mov	r0, r5
   2ada8:	mov	r1, r4
   2adac:	bl	12988 <setfilecon@plt>
   2adb0:	mov	r9, r0
   2adb4:	mov	r4, #0
   2adb8:	cmn	r0, #1
   2adbc:	bne	2adc8 <__assert_fail@plt+0x1820c>
   2adc0:	bl	128d4 <__errno_location@plt>
   2adc4:	ldr	r4, [r0]
   2adc8:	mov	r0, sp
   2adcc:	bl	2a738 <__assert_fail@plt+0x17b7c>
   2add0:	cmp	r0, #0
   2add4:	bne	2ae18 <__assert_fail@plt+0x1825c>
   2add8:	mov	r0, sp
   2addc:	bl	2a754 <__assert_fail@plt+0x17b98>
   2ade0:	cmp	r4, #0
   2ade4:	beq	2ae00 <__assert_fail@plt+0x18244>
   2ade8:	bl	128d4 <__errno_location@plt>
   2adec:	str	r4, [r0]
   2adf0:	b	2ae00 <__assert_fail@plt+0x18244>
   2adf4:	cmp	r2, #95	; 0x5f
   2adf8:	beq	2ad34 <__assert_fail@plt+0x18178>
   2adfc:	str	r2, [r8]
   2ae00:	mov	r0, r9
   2ae04:	sub	sp, fp, #28
   2ae08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ae0c:	bl	128d4 <__errno_location@plt>
   2ae10:	ldr	r0, [r0]
   2ae14:	bl	254e8 <__assert_fail@plt+0x1292c>
   2ae18:	bl	128d4 <__errno_location@plt>
   2ae1c:	ldr	r0, [r0]
   2ae20:	bl	25528 <__assert_fail@plt+0x1296c>
   2ae24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ae28:	add	fp, sp, #28
   2ae2c:	sub	sp, sp, #964	; 0x3c4
   2ae30:	sub	sp, sp, #3072	; 0xc00
   2ae34:	mov	r4, r2
   2ae38:	mov	r5, r1
   2ae3c:	cmn	r0, #100	; 0x64
   2ae40:	beq	2ae54 <__assert_fail@plt+0x18298>
   2ae44:	mov	r7, r0
   2ae48:	ldrb	r0, [r5]
   2ae4c:	cmp	r0, #47	; 0x2f
   2ae50:	bne	2ae68 <__assert_fail@plt+0x182ac>
   2ae54:	mov	r0, r5
   2ae58:	mov	r1, r4
   2ae5c:	sub	sp, fp, #28
   2ae60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ae64:	b	12550 <lsetfilecon@plt>
   2ae68:	mov	sl, sp
   2ae6c:	mov	r0, sl
   2ae70:	mov	r1, r7
   2ae74:	mov	r2, r5
   2ae78:	bl	3d4e0 <__assert_fail@plt+0x2a924>
   2ae7c:	cmp	r0, #0
   2ae80:	beq	2af6c <__assert_fail@plt+0x183b0>
   2ae84:	mov	r6, r0
   2ae88:	mov	r1, r4
   2ae8c:	bl	12550 <lsetfilecon@plt>
   2ae90:	mov	r9, r0
   2ae94:	bl	128d4 <__errno_location@plt>
   2ae98:	mov	r8, r0
   2ae9c:	ldr	r2, [r0]
   2aea0:	cmp	r6, sl
   2aea4:	beq	2aeb8 <__assert_fail@plt+0x182fc>
   2aea8:	mov	r0, r6
   2aeac:	mov	r6, r2
   2aeb0:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2aeb4:	mov	r2, r6
   2aeb8:	cmn	r9, #1
   2aebc:	bne	2b038 <__assert_fail@plt+0x1847c>
   2aec0:	sub	r0, r2, #1
   2aec4:	cmp	r0, #37	; 0x25
   2aec8:	bhi	2b02c <__assert_fail@plt+0x18470>
   2aecc:	add	r1, pc, #0
   2aed0:	ldr	pc, [r1, r0, lsl #2]
   2aed4:	andeq	sl, r2, ip, ror #30
   2aed8:	andeq	sl, r2, ip, ror #30
   2aedc:	andeq	fp, r2, r4, lsr r0
   2aee0:	andeq	fp, r2, r4, lsr r0
   2aee4:	andeq	fp, r2, r4, lsr r0
   2aee8:	andeq	fp, r2, r4, lsr r0
   2aeec:	andeq	fp, r2, r4, lsr r0
   2aef0:	andeq	fp, r2, r4, lsr r0
   2aef4:	andeq	fp, r2, r4, lsr r0
   2aef8:	andeq	fp, r2, r4, lsr r0
   2aefc:	andeq	fp, r2, r4, lsr r0
   2af00:	andeq	fp, r2, r4, lsr r0
   2af04:	andeq	sl, r2, ip, ror #30
   2af08:	andeq	fp, r2, r4, lsr r0
   2af0c:	andeq	fp, r2, r4, lsr r0
   2af10:	andeq	fp, r2, r4, lsr r0
   2af14:	andeq	fp, r2, r4, lsr r0
   2af18:	andeq	fp, r2, r4, lsr r0
   2af1c:	andeq	fp, r2, r4, lsr r0
   2af20:	andeq	sl, r2, ip, ror #30
   2af24:	andeq	fp, r2, r4, lsr r0
   2af28:	andeq	fp, r2, r4, lsr r0
   2af2c:	andeq	fp, r2, r4, lsr r0
   2af30:	andeq	fp, r2, r4, lsr r0
   2af34:	andeq	fp, r2, r4, lsr r0
   2af38:	andeq	fp, r2, r4, lsr r0
   2af3c:	andeq	fp, r2, r4, lsr r0
   2af40:	andeq	fp, r2, r4, lsr r0
   2af44:	andeq	fp, r2, r4, lsr r0
   2af48:	andeq	fp, r2, r4, lsr r0
   2af4c:	andeq	fp, r2, r4, lsr r0
   2af50:	andeq	fp, r2, r4, lsr r0
   2af54:	andeq	fp, r2, r4, lsr r0
   2af58:	andeq	fp, r2, r4, lsr r0
   2af5c:	andeq	fp, r2, r4, lsr r0
   2af60:	andeq	fp, r2, r4, lsr r0
   2af64:	andeq	fp, r2, r4, lsr r0
   2af68:	andeq	sl, r2, ip, ror #30
   2af6c:	mov	r0, sp
   2af70:	bl	2a6dc <__assert_fail@plt+0x17b20>
   2af74:	cmp	r0, #0
   2af78:	bne	2b044 <__assert_fail@plt+0x18488>
   2af7c:	cmp	r7, #0
   2af80:	blt	2afac <__assert_fail@plt+0x183f0>
   2af84:	ldr	r0, [sp]
   2af88:	cmp	r0, r7
   2af8c:	bne	2afac <__assert_fail@plt+0x183f0>
   2af90:	mov	r0, sp
   2af94:	bl	2a754 <__assert_fail@plt+0x17b98>
   2af98:	bl	128d4 <__errno_location@plt>
   2af9c:	mov	r1, #9
   2afa0:	str	r1, [r0]
   2afa4:	mvn	r9, #0
   2afa8:	b	2b038 <__assert_fail@plt+0x1847c>
   2afac:	mov	r0, r7
   2afb0:	bl	12aa8 <fchdir@plt>
   2afb4:	cmp	r0, #0
   2afb8:	beq	2afdc <__assert_fail@plt+0x18420>
   2afbc:	bl	128d4 <__errno_location@plt>
   2afc0:	mov	r4, r0
   2afc4:	ldr	r5, [r0]
   2afc8:	mov	r0, sp
   2afcc:	bl	2a754 <__assert_fail@plt+0x17b98>
   2afd0:	str	r5, [r4]
   2afd4:	mvn	r9, #0
   2afd8:	b	2b038 <__assert_fail@plt+0x1847c>
   2afdc:	mov	r0, r5
   2afe0:	mov	r1, r4
   2afe4:	bl	12550 <lsetfilecon@plt>
   2afe8:	mov	r9, r0
   2afec:	mov	r4, #0
   2aff0:	cmn	r0, #1
   2aff4:	bne	2b000 <__assert_fail@plt+0x18444>
   2aff8:	bl	128d4 <__errno_location@plt>
   2affc:	ldr	r4, [r0]
   2b000:	mov	r0, sp
   2b004:	bl	2a738 <__assert_fail@plt+0x17b7c>
   2b008:	cmp	r0, #0
   2b00c:	bne	2b050 <__assert_fail@plt+0x18494>
   2b010:	mov	r0, sp
   2b014:	bl	2a754 <__assert_fail@plt+0x17b98>
   2b018:	cmp	r4, #0
   2b01c:	beq	2b038 <__assert_fail@plt+0x1847c>
   2b020:	bl	128d4 <__errno_location@plt>
   2b024:	str	r4, [r0]
   2b028:	b	2b038 <__assert_fail@plt+0x1847c>
   2b02c:	cmp	r2, #95	; 0x5f
   2b030:	beq	2af6c <__assert_fail@plt+0x183b0>
   2b034:	str	r2, [r8]
   2b038:	mov	r0, r9
   2b03c:	sub	sp, fp, #28
   2b040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b044:	bl	128d4 <__errno_location@plt>
   2b048:	ldr	r0, [r0]
   2b04c:	bl	254e8 <__assert_fail@plt+0x1292c>
   2b050:	bl	128d4 <__errno_location@plt>
   2b054:	ldr	r0, [r0]
   2b058:	bl	25528 <__assert_fail@plt+0x1296c>
   2b05c:	ldr	r0, [r0, #76]	; 0x4c
   2b060:	bx	lr
   2b064:	ldr	r0, [r0, #92]	; 0x5c
   2b068:	bx	lr
   2b06c:	ldr	r0, [r0, #84]	; 0x54
   2b070:	bx	lr
   2b074:	mov	r0, #0
   2b078:	bx	lr
   2b07c:	ldrd	r2, [r1, #72]	; 0x48
   2b080:	stm	r0, {r2, r3}
   2b084:	bx	lr
   2b088:	ldrd	r2, [r1, #88]	; 0x58
   2b08c:	stm	r0, {r2, r3}
   2b090:	bx	lr
   2b094:	ldrd	r2, [r1, #80]	; 0x50
   2b098:	stm	r0, {r2, r3}
   2b09c:	bx	lr
   2b0a0:	mvn	r1, #0
   2b0a4:	str	r1, [r0]
   2b0a8:	str	r1, [r0, #4]
   2b0ac:	bx	lr
   2b0b0:	bx	lr
   2b0b4:	push	{r4, r5, fp, lr}
   2b0b8:	add	fp, sp, #8
   2b0bc:	mov	r4, r1
   2b0c0:	mov	r5, r0
   2b0c4:	mov	r1, #0
   2b0c8:	mov	r2, r4
   2b0cc:	bl	1297c <memchr@plt>
   2b0d0:	rsb	r1, r5, #1
   2b0d4:	cmp	r0, #0
   2b0d8:	addne	r4, r1, r0
   2b0dc:	mov	r0, r4
   2b0e0:	pop	{r4, r5, fp, pc}
   2b0e4:	mov	r1, #0
   2b0e8:	mov	r2, #3
   2b0ec:	b	2c82c <__assert_fail@plt+0x19c70>
   2b0f0:	push	{r4, r5, r6, r7, fp, lr}
   2b0f4:	add	fp, sp, #16
   2b0f8:	mov	r4, r0
   2b0fc:	cmp	r0, #2
   2b100:	movhi	r0, r4
   2b104:	pophi	{r4, r5, r6, r7, fp, pc}
   2b108:	mov	r0, r4
   2b10c:	bl	2b0e4 <__assert_fail@plt+0x18528>
   2b110:	mov	r5, r0
   2b114:	bl	128d4 <__errno_location@plt>
   2b118:	mov	r6, r0
   2b11c:	ldr	r7, [r0]
   2b120:	mov	r0, r4
   2b124:	bl	12b74 <close@plt>
   2b128:	str	r7, [r6]
   2b12c:	mov	r0, r5
   2b130:	pop	{r4, r5, r6, r7, fp, pc}
   2b134:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b138:	add	fp, sp, #24
   2b13c:	sub	sp, sp, #32
   2b140:	mov	r4, r2
   2b144:	mov	r5, r0
   2b148:	ldr	r7, [fp, #12]
   2b14c:	ldr	r6, [fp, #8]
   2b150:	cmp	r1, #0
   2b154:	beq	2b174 <__assert_fail@plt+0x185b8>
   2b158:	mov	r2, r1
   2b15c:	str	r3, [sp]
   2b160:	movw	r1, #17332	; 0x43b4
   2b164:	movt	r1, #4
   2b168:	mov	r0, r5
   2b16c:	mov	r3, r4
   2b170:	b	2b184 <__assert_fail@plt+0x185c8>
   2b174:	movw	r1, #17344	; 0x43c0
   2b178:	movt	r1, #4
   2b17c:	mov	r0, r5
   2b180:	mov	r2, r4
   2b184:	bl	128c8 <fprintf@plt>
   2b188:	movw	r1, #17351	; 0x43c7
   2b18c:	movt	r1, #4
   2b190:	mov	r0, #0
   2b194:	mov	r2, #5
   2b198:	bl	1264c <dcgettext@plt>
   2b19c:	mov	r2, r0
   2b1a0:	movw	r1, #18047	; 0x467f
   2b1a4:	movt	r1, #4
   2b1a8:	mov	r0, r5
   2b1ac:	movw	r3, #2022	; 0x7e6
   2b1b0:	bl	128c8 <fprintf@plt>
   2b1b4:	mov	r0, #10
   2b1b8:	mov	r1, r5
   2b1bc:	bl	12a3c <fputc@plt>
   2b1c0:	movw	r1, #17355	; 0x43cb
   2b1c4:	movt	r1, #4
   2b1c8:	mov	r0, #0
   2b1cc:	mov	r2, #5
   2b1d0:	bl	1264c <dcgettext@plt>
   2b1d4:	mov	r1, r0
   2b1d8:	movw	r2, #17526	; 0x4476
   2b1dc:	movt	r2, #4
   2b1e0:	mov	r0, r5
   2b1e4:	bl	128c8 <fprintf@plt>
   2b1e8:	mov	r0, #10
   2b1ec:	mov	r1, r5
   2b1f0:	bl	12a3c <fputc@plt>
   2b1f4:	cmp	r7, #9
   2b1f8:	bhi	2b234 <__assert_fail@plt+0x18678>
   2b1fc:	add	r0, pc, #0
   2b200:	ldr	pc, [r0, r7, lsl #2]
   2b204:	andeq	fp, r2, ip, lsr #4
   2b208:	andeq	fp, r2, r0, asr #4
   2b20c:	andeq	fp, r2, ip, ror #4
   2b210:	muleq	r2, r8, r2
   2b214:	andeq	fp, r2, r0, asr #5
   2b218:	andeq	fp, r2, ip, ror #5
   2b21c:	andeq	fp, r2, r0, lsr #6
   2b220:	andeq	fp, r2, r0, ror #6
   2b224:	strdeq	fp, [r2], -ip
   2b228:	andeq	fp, r2, r4, lsr #7
   2b22c:	sub	sp, fp, #24
   2b230:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b234:	movw	r1, #17879	; 0x45d7
   2b238:	movt	r1, #4
   2b23c:	b	2b3ac <__assert_fail@plt+0x187f0>
   2b240:	movw	r1, #17560	; 0x4498
   2b244:	movt	r1, #4
   2b248:	mov	r0, #0
   2b24c:	mov	r2, #5
   2b250:	bl	1264c <dcgettext@plt>
   2b254:	mov	r1, r0
   2b258:	ldr	r2, [r6]
   2b25c:	mov	r0, r5
   2b260:	sub	sp, fp, #24
   2b264:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b268:	b	128c8 <fprintf@plt>
   2b26c:	movw	r1, #17576	; 0x44a8
   2b270:	movt	r1, #4
   2b274:	mov	r0, #0
   2b278:	mov	r2, #5
   2b27c:	bl	1264c <dcgettext@plt>
   2b280:	mov	r1, r0
   2b284:	ldm	r6, {r2, r3}
   2b288:	mov	r0, r5
   2b28c:	sub	sp, fp, #24
   2b290:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b294:	b	128c8 <fprintf@plt>
   2b298:	movw	r1, #17599	; 0x44bf
   2b29c:	movt	r1, #4
   2b2a0:	mov	r0, #0
   2b2a4:	mov	r2, #5
   2b2a8:	bl	1264c <dcgettext@plt>
   2b2ac:	mov	r1, r0
   2b2b0:	ldm	r6, {r2, r3}
   2b2b4:	ldr	r0, [r6, #8]
   2b2b8:	str	r0, [sp]
   2b2bc:	b	2b358 <__assert_fail@plt+0x1879c>
   2b2c0:	movw	r1, #17627	; 0x44db
   2b2c4:	movt	r1, #4
   2b2c8:	mov	r0, #0
   2b2cc:	mov	r2, #5
   2b2d0:	bl	1264c <dcgettext@plt>
   2b2d4:	mov	r1, r0
   2b2d8:	ldm	r6, {r2, r3}
   2b2dc:	ldr	r0, [r6, #8]
   2b2e0:	ldr	r7, [r6, #12]
   2b2e4:	stm	sp, {r0, r7}
   2b2e8:	b	2b358 <__assert_fail@plt+0x1879c>
   2b2ec:	movw	r1, #17659	; 0x44fb
   2b2f0:	movt	r1, #4
   2b2f4:	mov	r0, #0
   2b2f8:	mov	r2, #5
   2b2fc:	bl	1264c <dcgettext@plt>
   2b300:	mov	r1, r0
   2b304:	ldm	r6, {r2, r3}
   2b308:	ldr	r0, [r6, #8]
   2b30c:	ldr	r7, [r6, #12]
   2b310:	ldr	r6, [r6, #16]
   2b314:	stm	sp, {r0, r7}
   2b318:	str	r6, [sp, #8]
   2b31c:	b	2b358 <__assert_fail@plt+0x1879c>
   2b320:	movw	r1, #17695	; 0x451f
   2b324:	movt	r1, #4
   2b328:	mov	r0, #0
   2b32c:	mov	r2, #5
   2b330:	bl	1264c <dcgettext@plt>
   2b334:	mov	r1, r0
   2b338:	ldm	r6, {r2, r3}
   2b33c:	ldr	r0, [r6, #8]
   2b340:	ldr	r7, [r6, #12]
   2b344:	ldr	r4, [r6, #16]
   2b348:	ldr	r6, [r6, #20]
   2b34c:	stm	sp, {r0, r7}
   2b350:	str	r4, [sp, #8]
   2b354:	str	r6, [sp, #12]
   2b358:	mov	r0, r5
   2b35c:	b	2b44c <__assert_fail@plt+0x18890>
   2b360:	movw	r1, #17735	; 0x4547
   2b364:	movt	r1, #4
   2b368:	mov	r0, #0
   2b36c:	mov	r2, #5
   2b370:	bl	1264c <dcgettext@plt>
   2b374:	mov	ip, r0
   2b378:	ldm	r6, {r2, r3}
   2b37c:	ldr	r0, [r6, #8]
   2b380:	ldr	r7, [r6, #12]
   2b384:	ldr	r4, [r6, #16]
   2b388:	ldr	r1, [r6, #20]
   2b38c:	ldr	r6, [r6, #24]
   2b390:	stm	sp, {r0, r7}
   2b394:	str	r4, [sp, #8]
   2b398:	str	r1, [sp, #12]
   2b39c:	str	r6, [sp, #16]
   2b3a0:	b	2b444 <__assert_fail@plt+0x18888>
   2b3a4:	movw	r1, #17827	; 0x45a3
   2b3a8:	movt	r1, #4
   2b3ac:	mov	r0, #0
   2b3b0:	mov	r2, #5
   2b3b4:	bl	1264c <dcgettext@plt>
   2b3b8:	mov	ip, r0
   2b3bc:	ldr	r2, [r6]
   2b3c0:	ldr	r3, [r6, #4]
   2b3c4:	ldr	r0, [r6, #8]
   2b3c8:	ldr	r7, [r6, #12]
   2b3cc:	ldr	r4, [r6, #16]
   2b3d0:	ldr	r1, [r6, #20]
   2b3d4:	ldr	lr, [r6, #24]
   2b3d8:	ldr	r8, [r6, #28]
   2b3dc:	ldr	r6, [r6, #32]
   2b3e0:	stm	sp, {r0, r7}
   2b3e4:	str	r4, [sp, #8]
   2b3e8:	str	r1, [sp, #12]
   2b3ec:	str	lr, [sp, #16]
   2b3f0:	str	r8, [sp, #20]
   2b3f4:	str	r6, [sp, #24]
   2b3f8:	b	2b444 <__assert_fail@plt+0x18888>
   2b3fc:	movw	r1, #17779	; 0x4573
   2b400:	movt	r1, #4
   2b404:	mov	r0, #0
   2b408:	mov	r2, #5
   2b40c:	bl	1264c <dcgettext@plt>
   2b410:	mov	ip, r0
   2b414:	ldm	r6, {r2, r3}
   2b418:	ldr	r0, [r6, #8]
   2b41c:	ldr	r7, [r6, #12]
   2b420:	ldr	r4, [r6, #16]
   2b424:	ldr	r1, [r6, #20]
   2b428:	ldr	lr, [r6, #24]
   2b42c:	ldr	r6, [r6, #28]
   2b430:	stm	sp, {r0, r7}
   2b434:	str	r4, [sp, #8]
   2b438:	str	r1, [sp, #12]
   2b43c:	str	lr, [sp, #16]
   2b440:	str	r6, [sp, #20]
   2b444:	mov	r0, r5
   2b448:	mov	r1, ip
   2b44c:	bl	128c8 <fprintf@plt>
   2b450:	sub	sp, fp, #24
   2b454:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b458:	push	{r4, sl, fp, lr}
   2b45c:	add	fp, sp, #8
   2b460:	sub	sp, sp, #8
   2b464:	mov	lr, #0
   2b468:	ldr	ip, [fp, #8]
   2b46c:	ldr	r4, [ip, lr, lsl #2]
   2b470:	add	lr, lr, #1
   2b474:	cmp	r4, #0
   2b478:	bne	2b46c <__assert_fail@plt+0x188b0>
   2b47c:	sub	r4, lr, #1
   2b480:	str	ip, [sp]
   2b484:	str	r4, [sp, #4]
   2b488:	bl	2b134 <__assert_fail@plt+0x18578>
   2b48c:	sub	sp, fp, #8
   2b490:	pop	{r4, sl, fp, pc}
   2b494:	push	{r4, r5, fp, lr}
   2b498:	add	fp, sp, #8
   2b49c:	sub	sp, sp, #48	; 0x30
   2b4a0:	mov	ip, #0
   2b4a4:	ldr	r4, [fp, #8]
   2b4a8:	add	lr, sp, #8
   2b4ac:	ldr	r5, [r4]
   2b4b0:	str	r5, [lr, ip, lsl #2]
   2b4b4:	cmp	r5, #0
   2b4b8:	beq	2b4cc <__assert_fail@plt+0x18910>
   2b4bc:	add	ip, ip, #1
   2b4c0:	add	r4, r4, #4
   2b4c4:	cmp	ip, #10
   2b4c8:	bcc	2b4ac <__assert_fail@plt+0x188f0>
   2b4cc:	str	lr, [sp]
   2b4d0:	str	ip, [sp, #4]
   2b4d4:	bl	2b134 <__assert_fail@plt+0x18578>
   2b4d8:	sub	sp, fp, #8
   2b4dc:	pop	{r4, r5, fp, pc}
   2b4e0:	push	{fp, lr}
   2b4e4:	mov	fp, sp
   2b4e8:	sub	sp, sp, #8
   2b4ec:	add	ip, fp, #8
   2b4f0:	str	ip, [sp, #4]
   2b4f4:	str	ip, [sp]
   2b4f8:	bl	2b494 <__assert_fail@plt+0x188d8>
   2b4fc:	mov	sp, fp
   2b500:	pop	{fp, pc}
   2b504:	push	{fp, lr}
   2b508:	mov	fp, sp
   2b50c:	movw	r0, #21868	; 0x556c
   2b510:	movt	r0, #5
   2b514:	ldr	r1, [r0]
   2b518:	mov	r0, #10
   2b51c:	bl	12a3c <fputc@plt>
   2b520:	movw	r1, #17939	; 0x4613
   2b524:	movt	r1, #4
   2b528:	mov	r0, #0
   2b52c:	mov	r2, #5
   2b530:	bl	1264c <dcgettext@plt>
   2b534:	movw	r1, #13308	; 0x33fc
   2b538:	movt	r1, #4
   2b53c:	bl	124fc <printf@plt>
   2b540:	movw	r1, #17959	; 0x4627
   2b544:	movt	r1, #4
   2b548:	mov	r0, #0
   2b54c:	mov	r2, #5
   2b550:	bl	1264c <dcgettext@plt>
   2b554:	movw	r1, #12461	; 0x30ad
   2b558:	movt	r1, #4
   2b55c:	movw	r2, #13222	; 0x33a6
   2b560:	movt	r2, #4
   2b564:	bl	124fc <printf@plt>
   2b568:	movw	r1, #17979	; 0x463b
   2b56c:	movt	r1, #4
   2b570:	mov	r0, #0
   2b574:	mov	r2, #5
   2b578:	bl	1264c <dcgettext@plt>
   2b57c:	movw	r1, #18018	; 0x4662
   2b580:	movt	r1, #4
   2b584:	pop	{fp, lr}
   2b588:	b	124fc <printf@plt>
   2b58c:	b	2b590 <__assert_fail@plt+0x189d4>
   2b590:	push	{r4, r5, r6, sl, fp, lr}
   2b594:	add	fp, sp, #16
   2b598:	mov	r4, r2
   2b59c:	mov	r5, r1
   2b5a0:	mov	r6, r0
   2b5a4:	bl	2f858 <__assert_fail@plt+0x1cc9c>
   2b5a8:	cmp	r0, #0
   2b5ac:	popne	{r4, r5, r6, sl, fp, pc}
   2b5b0:	cmp	r6, #0
   2b5b4:	beq	2b5c8 <__assert_fail@plt+0x18a0c>
   2b5b8:	cmp	r5, #0
   2b5bc:	cmpne	r4, #0
   2b5c0:	bne	2b5c8 <__assert_fail@plt+0x18a0c>
   2b5c4:	pop	{r4, r5, r6, sl, fp, pc}
   2b5c8:	bl	2b97c <__assert_fail@plt+0x18dc0>
   2b5cc:	push	{fp, lr}
   2b5d0:	mov	fp, sp
   2b5d4:	bl	2ed04 <__assert_fail@plt+0x1c148>
   2b5d8:	bl	2b5e0 <__assert_fail@plt+0x18a24>
   2b5dc:	pop	{fp, pc}
   2b5e0:	cmp	r0, #0
   2b5e4:	bxne	lr
   2b5e8:	push	{fp, lr}
   2b5ec:	mov	fp, sp
   2b5f0:	bl	2b97c <__assert_fail@plt+0x18dc0>
   2b5f4:	push	{fp, lr}
   2b5f8:	mov	fp, sp
   2b5fc:	bl	3debc <__assert_fail@plt+0x2b300>
   2b600:	bl	2b5e0 <__assert_fail@plt+0x18a24>
   2b604:	pop	{fp, pc}
   2b608:	b	2b5cc <__assert_fail@plt+0x18a10>
   2b60c:	push	{r4, r5, fp, lr}
   2b610:	add	fp, sp, #8
   2b614:	mov	r4, r1
   2b618:	mov	r5, r0
   2b61c:	bl	2f804 <__assert_fail@plt+0x1cc48>
   2b620:	cmp	r0, #0
   2b624:	popne	{r4, r5, fp, pc}
   2b628:	cmp	r5, #0
   2b62c:	beq	2b63c <__assert_fail@plt+0x18a80>
   2b630:	cmp	r4, #0
   2b634:	bne	2b63c <__assert_fail@plt+0x18a80>
   2b638:	pop	{r4, r5, fp, pc}
   2b63c:	bl	2b97c <__assert_fail@plt+0x18dc0>
   2b640:	push	{fp, lr}
   2b644:	mov	fp, sp
   2b648:	bl	3dec0 <__assert_fail@plt+0x2b304>
   2b64c:	bl	2b5e0 <__assert_fail@plt+0x18a24>
   2b650:	pop	{fp, pc}
   2b654:	push	{fp, lr}
   2b658:	mov	fp, sp
   2b65c:	bl	3ded0 <__assert_fail@plt+0x2b314>
   2b660:	bl	2b5e0 <__assert_fail@plt+0x18a24>
   2b664:	pop	{fp, pc}
   2b668:	push	{fp, lr}
   2b66c:	mov	fp, sp
   2b670:	mov	r2, r1
   2b674:	mov	r1, r0
   2b678:	mov	r0, #0
   2b67c:	bl	2b590 <__assert_fail@plt+0x189d4>
   2b680:	pop	{fp, pc}
   2b684:	mov	r2, r1
   2b688:	mov	r1, r0
   2b68c:	mov	r0, #0
   2b690:	b	2b654 <__assert_fail@plt+0x18a98>
   2b694:	mov	r2, #1
   2b698:	b	2b69c <__assert_fail@plt+0x18ae0>
   2b69c:	push	{r4, r5, fp, lr}
   2b6a0:	add	fp, sp, #8
   2b6a4:	mov	r4, r1
   2b6a8:	ldr	r5, [r1]
   2b6ac:	cmp	r0, #0
   2b6b0:	beq	2b6c8 <__assert_fail@plt+0x18b0c>
   2b6b4:	mov	r1, #1
   2b6b8:	add	r1, r1, r5, lsr #1
   2b6bc:	adds	r5, r5, r1
   2b6c0:	bcc	2b6e0 <__assert_fail@plt+0x18b24>
   2b6c4:	bl	2b97c <__assert_fail@plt+0x18dc0>
   2b6c8:	cmp	r5, #0
   2b6cc:	bne	2b6e0 <__assert_fail@plt+0x18b24>
   2b6d0:	mov	r1, #64	; 0x40
   2b6d4:	udiv	r5, r1, r2
   2b6d8:	cmp	r2, #64	; 0x40
   2b6dc:	addhi	r5, r5, #1
   2b6e0:	mov	r1, r5
   2b6e4:	bl	2b590 <__assert_fail@plt+0x189d4>
   2b6e8:	str	r5, [r4]
   2b6ec:	pop	{r4, r5, fp, pc}
   2b6f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b6f4:	add	fp, sp, #24
   2b6f8:	mov	r8, r1
   2b6fc:	ldr	r6, [r1]
   2b700:	add	r1, r6, r6, asr #1
   2b704:	cmp	r1, r6
   2b708:	mvnvs	r1, #-2147483648	; 0x80000000
   2b70c:	cmp	r1, r3
   2b710:	mov	r5, r1
   2b714:	movgt	r5, r3
   2b718:	cmn	r3, #1
   2b71c:	movle	r5, r1
   2b720:	ldr	r4, [fp, #8]
   2b724:	cmn	r4, #1
   2b728:	ble	2b750 <__assert_fail@plt+0x18b94>
   2b72c:	cmp	r4, #0
   2b730:	beq	2b7a4 <__assert_fail@plt+0x18be8>
   2b734:	cmn	r5, #1
   2b738:	ble	2b778 <__assert_fail@plt+0x18bbc>
   2b73c:	mvn	r7, #-2147483648	; 0x80000000
   2b740:	udiv	r1, r7, r4
   2b744:	cmp	r1, r5
   2b748:	bge	2b7a4 <__assert_fail@plt+0x18be8>
   2b74c:	b	2b7b4 <__assert_fail@plt+0x18bf8>
   2b750:	cmn	r5, #1
   2b754:	ble	2b794 <__assert_fail@plt+0x18bd8>
   2b758:	cmn	r4, #1
   2b75c:	beq	2b7a4 <__assert_fail@plt+0x18be8>
   2b760:	mov	r1, #-2147483648	; 0x80000000
   2b764:	sdiv	r1, r1, r4
   2b768:	mvn	r7, #-2147483648	; 0x80000000
   2b76c:	cmp	r1, r5
   2b770:	bge	2b7a4 <__assert_fail@plt+0x18be8>
   2b774:	b	2b7b4 <__assert_fail@plt+0x18bf8>
   2b778:	beq	2b7a4 <__assert_fail@plt+0x18be8>
   2b77c:	mov	r1, #-2147483648	; 0x80000000
   2b780:	sdiv	r1, r1, r5
   2b784:	mvn	r7, #-2147483648	; 0x80000000
   2b788:	cmp	r1, r4
   2b78c:	bge	2b7a4 <__assert_fail@plt+0x18be8>
   2b790:	b	2b7b4 <__assert_fail@plt+0x18bf8>
   2b794:	mvn	r7, #-2147483648	; 0x80000000
   2b798:	sdiv	r1, r7, r4
   2b79c:	cmp	r5, r1
   2b7a0:	blt	2b7b4 <__assert_fail@plt+0x18bf8>
   2b7a4:	mul	r1, r5, r4
   2b7a8:	mov	r7, #64	; 0x40
   2b7ac:	cmp	r1, #63	; 0x3f
   2b7b0:	bgt	2b7bc <__assert_fail@plt+0x18c00>
   2b7b4:	sdiv	r5, r7, r4
   2b7b8:	mul	r1, r5, r4
   2b7bc:	cmp	r0, #0
   2b7c0:	moveq	r7, #0
   2b7c4:	streq	r7, [r8]
   2b7c8:	sub	r7, r5, r6
   2b7cc:	cmp	r7, r2
   2b7d0:	bge	2b87c <__assert_fail@plt+0x18cc0>
   2b7d4:	add	r5, r6, r2
   2b7d8:	mov	r1, #0
   2b7dc:	cmp	r5, r3
   2b7e0:	mov	r2, #0
   2b7e4:	movwgt	r2, #1
   2b7e8:	cmn	r3, #1
   2b7ec:	movwgt	r1, #1
   2b7f0:	cmp	r5, r6
   2b7f4:	bvs	2b864 <__assert_fail@plt+0x18ca8>
   2b7f8:	ands	r1, r1, r2
   2b7fc:	bne	2b864 <__assert_fail@plt+0x18ca8>
   2b800:	cmn	r4, #1
   2b804:	ble	2b82c <__assert_fail@plt+0x18c70>
   2b808:	cmp	r4, #0
   2b80c:	beq	2b878 <__assert_fail@plt+0x18cbc>
   2b810:	cmn	r5, #1
   2b814:	ble	2b850 <__assert_fail@plt+0x18c94>
   2b818:	mvn	r1, #-2147483648	; 0x80000000
   2b81c:	udiv	r1, r1, r4
   2b820:	cmp	r1, r5
   2b824:	bge	2b878 <__assert_fail@plt+0x18cbc>
   2b828:	b	2b864 <__assert_fail@plt+0x18ca8>
   2b82c:	cmn	r5, #1
   2b830:	ble	2b868 <__assert_fail@plt+0x18cac>
   2b834:	cmn	r4, #1
   2b838:	beq	2b878 <__assert_fail@plt+0x18cbc>
   2b83c:	mov	r1, #-2147483648	; 0x80000000
   2b840:	sdiv	r1, r1, r4
   2b844:	cmp	r1, r5
   2b848:	bge	2b878 <__assert_fail@plt+0x18cbc>
   2b84c:	b	2b864 <__assert_fail@plt+0x18ca8>
   2b850:	beq	2b878 <__assert_fail@plt+0x18cbc>
   2b854:	mov	r1, #-2147483648	; 0x80000000
   2b858:	sdiv	r1, r1, r5
   2b85c:	cmp	r1, r4
   2b860:	bge	2b878 <__assert_fail@plt+0x18cbc>
   2b864:	bl	2b97c <__assert_fail@plt+0x18dc0>
   2b868:	mvn	r1, #-2147483648	; 0x80000000
   2b86c:	sdiv	r1, r1, r4
   2b870:	cmp	r5, r1
   2b874:	blt	2b864 <__assert_fail@plt+0x18ca8>
   2b878:	mul	r1, r5, r4
   2b87c:	bl	2b60c <__assert_fail@plt+0x18a50>
   2b880:	str	r5, [r8]
   2b884:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b888:	mov	r1, #1
   2b88c:	b	2b890 <__assert_fail@plt+0x18cd4>
   2b890:	push	{fp, lr}
   2b894:	mov	fp, sp
   2b898:	bl	2c49c <__assert_fail@plt+0x198e0>
   2b89c:	bl	2b5e0 <__assert_fail@plt+0x18a24>
   2b8a0:	pop	{fp, pc}
   2b8a4:	mov	r1, #1
   2b8a8:	b	2b8ac <__assert_fail@plt+0x18cf0>
   2b8ac:	push	{fp, lr}
   2b8b0:	mov	fp, sp
   2b8b4:	bl	3decc <__assert_fail@plt+0x2b310>
   2b8b8:	bl	2b5e0 <__assert_fail@plt+0x18a24>
   2b8bc:	pop	{fp, pc}
   2b8c0:	push	{r4, r5, r6, sl, fp, lr}
   2b8c4:	add	fp, sp, #16
   2b8c8:	mov	r4, r1
   2b8cc:	mov	r5, r0
   2b8d0:	mov	r0, r1
   2b8d4:	bl	2b5cc <__assert_fail@plt+0x18a10>
   2b8d8:	mov	r6, r0
   2b8dc:	mov	r1, r5
   2b8e0:	mov	r2, r4
   2b8e4:	bl	125c8 <memcpy@plt>
   2b8e8:	mov	r0, r6
   2b8ec:	pop	{r4, r5, r6, sl, fp, pc}
   2b8f0:	push	{r4, r5, r6, sl, fp, lr}
   2b8f4:	add	fp, sp, #16
   2b8f8:	mov	r4, r1
   2b8fc:	mov	r5, r0
   2b900:	mov	r0, r1
   2b904:	bl	2b5f4 <__assert_fail@plt+0x18a38>
   2b908:	mov	r6, r0
   2b90c:	mov	r1, r5
   2b910:	mov	r2, r4
   2b914:	bl	125c8 <memcpy@plt>
   2b918:	mov	r0, r6
   2b91c:	pop	{r4, r5, r6, sl, fp, pc}
   2b920:	push	{r4, r5, r6, sl, fp, lr}
   2b924:	add	fp, sp, #16
   2b928:	mov	r4, r1
   2b92c:	mov	r5, r0
   2b930:	add	r0, r1, #1
   2b934:	bl	2b5f4 <__assert_fail@plt+0x18a38>
   2b938:	mov	r6, r0
   2b93c:	mov	r0, #0
   2b940:	strb	r0, [r6, r4]
   2b944:	mov	r0, r6
   2b948:	mov	r1, r5
   2b94c:	mov	r2, r4
   2b950:	bl	125c8 <memcpy@plt>
   2b954:	mov	r0, r6
   2b958:	pop	{r4, r5, r6, sl, fp, pc}
   2b95c:	push	{r4, sl, fp, lr}
   2b960:	add	fp, sp, #8
   2b964:	mov	r4, r0
   2b968:	bl	1288c <strlen@plt>
   2b96c:	add	r1, r0, #1
   2b970:	mov	r0, r4
   2b974:	pop	{r4, sl, fp, lr}
   2b978:	b	2b8c0 <__assert_fail@plt+0x18d04>
   2b97c:	push	{fp, lr}
   2b980:	mov	fp, sp
   2b984:	movw	r0, #21760	; 0x5500
   2b988:	movt	r0, #5
   2b98c:	ldr	r4, [r0]
   2b990:	movw	r1, #18094	; 0x46ae
   2b994:	movt	r1, #4
   2b998:	mov	r0, #0
   2b99c:	mov	r2, #5
   2b9a0:	bl	1264c <dcgettext@plt>
   2b9a4:	mov	r3, r0
   2b9a8:	movw	r2, #19439	; 0x4bef
   2b9ac:	movt	r2, #4
   2b9b0:	mov	r0, r4
   2b9b4:	mov	r1, #0
   2b9b8:	bl	12790 <error@plt>
   2b9bc:	bl	12b68 <abort@plt>
   2b9c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2b9c4:	add	fp, sp, #24
   2b9c8:	sub	sp, sp, #8
   2b9cc:	mov	r4, r3
   2b9d0:	mov	r8, r2
   2b9d4:	mov	r9, r1
   2b9d8:	mov	r5, r0
   2b9dc:	bl	128d4 <__errno_location@plt>
   2b9e0:	mov	r7, r0
   2b9e4:	mov	r6, #0
   2b9e8:	str	r6, [r0]
   2b9ec:	add	r1, sp, #4
   2b9f0:	mov	r0, r5
   2b9f4:	blx	r4
   2b9f8:	ldr	r0, [sp, #4]
   2b9fc:	cmp	r0, r5
   2ba00:	beq	2ba40 <__assert_fail@plt+0x18e84>
   2ba04:	cmp	r9, #0
   2ba08:	beq	2ba28 <__assert_fail@plt+0x18e6c>
   2ba0c:	vcmp.f64	d0, #0.0
   2ba10:	vmrs	APSR_nzcv, fpscr
   2ba14:	beq	2ba3c <__assert_fail@plt+0x18e80>
   2ba18:	ldr	r0, [r7]
   2ba1c:	subs	r6, r0, #34	; 0x22
   2ba20:	movwne	r6, #1
   2ba24:	b	2ba40 <__assert_fail@plt+0x18e84>
   2ba28:	ldrb	r0, [r0]
   2ba2c:	mov	r6, #0
   2ba30:	cmp	r0, #0
   2ba34:	bne	2ba4c <__assert_fail@plt+0x18e90>
   2ba38:	b	2ba0c <__assert_fail@plt+0x18e50>
   2ba3c:	mov	r6, #1
   2ba40:	cmp	r9, #0
   2ba44:	ldrne	r0, [sp, #4]
   2ba48:	strne	r0, [r9]
   2ba4c:	vstr	d0, [r8]
   2ba50:	mov	r0, r6
   2ba54:	sub	sp, fp, #24
   2ba58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2ba5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ba60:	add	fp, sp, #28
   2ba64:	sub	sp, sp, #12
   2ba68:	cmp	r2, #37	; 0x25
   2ba6c:	bcs	2be8c <__assert_fail@plt+0x192d0>
   2ba70:	mov	r7, r2
   2ba74:	mov	r6, r1
   2ba78:	mov	r4, r0
   2ba7c:	str	r3, [sp]
   2ba80:	ldr	sl, [fp, #8]
   2ba84:	bl	128d4 <__errno_location@plt>
   2ba88:	mov	r5, r0
   2ba8c:	mov	r0, #0
   2ba90:	str	r0, [r5]
   2ba94:	bl	12844 <__ctype_b_loc@plt>
   2ba98:	ldr	r1, [r0]
   2ba9c:	mov	r2, r4
   2baa0:	ldrb	r0, [r2], #1
   2baa4:	add	r3, r1, r0, lsl #1
   2baa8:	ldrb	r3, [r3, #1]
   2baac:	tst	r3, #32
   2bab0:	bne	2baa0 <__assert_fail@plt+0x18ee4>
   2bab4:	add	r9, sp, #8
   2bab8:	cmp	r6, #0
   2babc:	movne	r9, r6
   2bac0:	mov	r8, #4
   2bac4:	cmp	r0, #45	; 0x2d
   2bac8:	beq	2be80 <__assert_fail@plt+0x192c4>
   2bacc:	mov	r0, r4
   2bad0:	mov	r1, r9
   2bad4:	mov	r2, r7
   2bad8:	bl	12880 <strtoul@plt>
   2badc:	str	r0, [sp, #4]
   2bae0:	ldr	r7, [r9]
   2bae4:	cmp	r7, r4
   2bae8:	beq	2bb10 <__assert_fail@plt+0x18f54>
   2baec:	ldr	r0, [r5]
   2baf0:	cmp	r0, #0
   2baf4:	beq	2bb40 <__assert_fail@plt+0x18f84>
   2baf8:	cmp	r0, #34	; 0x22
   2bafc:	bne	2be80 <__assert_fail@plt+0x192c4>
   2bb00:	mov	r8, #1
   2bb04:	cmp	sl, #0
   2bb08:	bne	2bb4c <__assert_fail@plt+0x18f90>
   2bb0c:	b	2be74 <__assert_fail@plt+0x192b8>
   2bb10:	cmp	sl, #0
   2bb14:	ldrbne	r1, [r7]
   2bb18:	cmpne	r1, #0
   2bb1c:	beq	2be80 <__assert_fail@plt+0x192c4>
   2bb20:	mov	r0, sl
   2bb24:	bl	12898 <strchr@plt>
   2bb28:	cmp	r0, #0
   2bb2c:	beq	2be80 <__assert_fail@plt+0x192c4>
   2bb30:	mov	r0, #1
   2bb34:	str	r0, [sp, #4]
   2bb38:	mov	r8, #0
   2bb3c:	b	2bb4c <__assert_fail@plt+0x18f90>
   2bb40:	mov	r8, r0
   2bb44:	cmp	sl, #0
   2bb48:	beq	2be74 <__assert_fail@plt+0x192b8>
   2bb4c:	ldrb	r4, [r7]
   2bb50:	cmp	r4, #0
   2bb54:	beq	2be74 <__assert_fail@plt+0x192b8>
   2bb58:	mov	r0, sl
   2bb5c:	mov	r1, r4
   2bb60:	bl	12898 <strchr@plt>
   2bb64:	cmp	r0, #0
   2bb68:	beq	2bd78 <__assert_fail@plt+0x191bc>
   2bb6c:	sub	r0, r4, #69	; 0x45
   2bb70:	mov	r6, #1
   2bb74:	mov	r5, #1024	; 0x400
   2bb78:	cmp	r0, #47	; 0x2f
   2bb7c:	bhi	2bc74 <__assert_fail@plt+0x190b8>
   2bb80:	add	r1, pc, #0
   2bb84:	ldr	pc, [r1, r0, lsl #2]
   2bb88:	andeq	fp, r2, r8, asr #24
   2bb8c:	andeq	fp, r2, r4, ror ip
   2bb90:	andeq	fp, r2, r8, asr #24
   2bb94:	andeq	fp, r2, r4, ror ip
   2bb98:	andeq	fp, r2, r4, ror ip
   2bb9c:	andeq	fp, r2, r4, ror ip
   2bba0:	andeq	fp, r2, r8, asr #24
   2bba4:	andeq	fp, r2, r4, ror ip
   2bba8:	andeq	fp, r2, r8, asr #24
   2bbac:	andeq	fp, r2, r4, ror ip
   2bbb0:	andeq	fp, r2, r4, ror ip
   2bbb4:	andeq	fp, r2, r8, asr #24
   2bbb8:	andeq	fp, r2, r4, ror ip
   2bbbc:	andeq	fp, r2, r4, ror ip
   2bbc0:	andeq	fp, r2, r4, ror ip
   2bbc4:	andeq	fp, r2, r8, asr #24
   2bbc8:	andeq	fp, r2, r4, ror ip
   2bbcc:	andeq	fp, r2, r4, ror ip
   2bbd0:	andeq	fp, r2, r4, ror ip
   2bbd4:	andeq	fp, r2, r4, ror ip
   2bbd8:	andeq	fp, r2, r8, asr #24
   2bbdc:	andeq	fp, r2, r8, asr #24
   2bbe0:	andeq	fp, r2, r4, ror ip
   2bbe4:	andeq	fp, r2, r4, ror ip
   2bbe8:	andeq	fp, r2, r4, ror ip
   2bbec:	andeq	fp, r2, r4, ror ip
   2bbf0:	andeq	fp, r2, r4, ror ip
   2bbf4:	andeq	fp, r2, r4, ror ip
   2bbf8:	andeq	fp, r2, r4, ror ip
   2bbfc:	andeq	fp, r2, r4, ror ip
   2bc00:	andeq	fp, r2, r4, ror ip
   2bc04:	andeq	fp, r2, r4, ror ip
   2bc08:	andeq	fp, r2, r4, ror ip
   2bc0c:	andeq	fp, r2, r4, ror ip
   2bc10:	andeq	fp, r2, r8, asr #24
   2bc14:	andeq	fp, r2, r4, ror ip
   2bc18:	andeq	fp, r2, r4, ror ip
   2bc1c:	andeq	fp, r2, r4, ror ip
   2bc20:	andeq	fp, r2, r8, asr #24
   2bc24:	andeq	fp, r2, r4, ror ip
   2bc28:	andeq	fp, r2, r8, asr #24
   2bc2c:	andeq	fp, r2, r4, ror ip
   2bc30:	andeq	fp, r2, r4, ror ip
   2bc34:	andeq	fp, r2, r4, ror ip
   2bc38:	andeq	fp, r2, r4, ror ip
   2bc3c:	andeq	fp, r2, r4, ror ip
   2bc40:	andeq	fp, r2, r4, ror ip
   2bc44:	andeq	fp, r2, r8, asr #24
   2bc48:	mov	r0, sl
   2bc4c:	mov	r1, #48	; 0x30
   2bc50:	bl	12898 <strchr@plt>
   2bc54:	cmp	r0, #0
   2bc58:	beq	2bc74 <__assert_fail@plt+0x190b8>
   2bc5c:	ldrb	r0, [r7, #1]
   2bc60:	cmp	r0, #66	; 0x42
   2bc64:	cmpne	r0, #68	; 0x44
   2bc68:	bne	2bd8c <__assert_fail@plt+0x191d0>
   2bc6c:	mov	r6, #2
   2bc70:	mov	r5, #1000	; 0x3e8
   2bc74:	sub	r1, r4, #66	; 0x42
   2bc78:	cmp	r1, #53	; 0x35
   2bc7c:	bhi	2bd78 <__assert_fail@plt+0x191bc>
   2bc80:	mov	r0, #0
   2bc84:	add	r2, pc, #0
   2bc88:	ldr	pc, [r2, r1, lsl #2]
   2bc8c:	strdeq	fp, [r2], -r8
   2bc90:	andeq	fp, r2, r8, ror sp
   2bc94:	andeq	fp, r2, r8, ror sp
   2bc98:	andeq	fp, r2, r4, lsl #28
   2bc9c:	andeq	fp, r2, r8, ror sp
   2bca0:	andeq	fp, r2, r4, ror #26
   2bca4:	andeq	fp, r2, r8, ror sp
   2bca8:	andeq	fp, r2, r8, ror sp
   2bcac:	andeq	fp, r2, r8, ror sp
   2bcb0:	andeq	fp, r2, r8, lsr #27
   2bcb4:	andeq	fp, r2, r8, ror sp
   2bcb8:			; <UNDEFINED> instruction: 0x0002bdbc
   2bcbc:	andeq	fp, r2, r8, ror sp
   2bcc0:	andeq	fp, r2, r8, ror sp
   2bcc4:	andeq	fp, r2, r8, lsl lr
   2bcc8:	andeq	fp, r2, r8, ror sp
   2bccc:	andeq	fp, r2, r8, ror sp
   2bcd0:	andeq	fp, r2, r8, ror sp
   2bcd4:	ldrdeq	fp, [r2], -r0
   2bcd8:	andeq	fp, r2, r8, ror sp
   2bcdc:	andeq	fp, r2, r8, ror sp
   2bce0:	andeq	fp, r2, r8, ror sp
   2bce4:	andeq	fp, r2, r8, ror sp
   2bce8:	andeq	fp, r2, ip, lsr #28
   2bcec:	andeq	fp, r2, r4, ror #27
   2bcf0:	andeq	fp, r2, r8, ror sp
   2bcf4:	andeq	fp, r2, r8, ror sp
   2bcf8:	andeq	fp, r2, r8, ror sp
   2bcfc:	andeq	fp, r2, r8, ror sp
   2bd00:	andeq	fp, r2, r8, ror sp
   2bd04:	andeq	fp, r2, r8, ror sp
   2bd08:	andeq	fp, r2, r8, ror sp
   2bd0c:	andeq	fp, r2, r0, asr #28
   2bd10:	andeq	fp, r2, r8, asr lr
   2bd14:	andeq	fp, r2, r8, ror sp
   2bd18:	andeq	fp, r2, r8, ror sp
   2bd1c:	andeq	fp, r2, r8, ror sp
   2bd20:	andeq	fp, r2, r4, ror #26
   2bd24:	andeq	fp, r2, r8, ror sp
   2bd28:	andeq	fp, r2, r8, ror sp
   2bd2c:	andeq	fp, r2, r8, ror sp
   2bd30:	andeq	fp, r2, r8, lsr #27
   2bd34:	andeq	fp, r2, r8, ror sp
   2bd38:			; <UNDEFINED> instruction: 0x0002bdbc
   2bd3c:	andeq	fp, r2, r8, ror sp
   2bd40:	andeq	fp, r2, r8, ror sp
   2bd44:	andeq	fp, r2, r8, ror sp
   2bd48:	andeq	fp, r2, r8, ror sp
   2bd4c:	andeq	fp, r2, r8, ror sp
   2bd50:	andeq	fp, r2, r8, ror sp
   2bd54:	ldrdeq	fp, [r2], -r0
   2bd58:	andeq	fp, r2, r8, ror sp
   2bd5c:	andeq	fp, r2, r8, ror sp
   2bd60:	andeq	fp, r2, ip, asr #28
   2bd64:	add	r0, sp, #4
   2bd68:	mov	r1, r5
   2bd6c:	mov	r2, #3
   2bd70:	bl	2bed4 <__assert_fail@plt+0x19318>
   2bd74:	b	2be58 <__assert_fail@plt+0x1929c>
   2bd78:	ldr	r0, [sp, #4]
   2bd7c:	ldr	r1, [sp]
   2bd80:	str	r0, [r1]
   2bd84:	orr	r8, r8, #2
   2bd88:	b	2be80 <__assert_fail@plt+0x192c4>
   2bd8c:	cmp	r0, #105	; 0x69
   2bd90:	bne	2bc74 <__assert_fail@plt+0x190b8>
   2bd94:	ldrb	r0, [r7, #2]
   2bd98:	mov	r6, #1
   2bd9c:	cmp	r0, #66	; 0x42
   2bda0:	movweq	r6, #3
   2bda4:	b	2bc74 <__assert_fail@plt+0x190b8>
   2bda8:	add	r0, sp, #4
   2bdac:	mov	r1, r5
   2bdb0:	mov	r2, #1
   2bdb4:	bl	2bed4 <__assert_fail@plt+0x19318>
   2bdb8:	b	2be58 <__assert_fail@plt+0x1929c>
   2bdbc:	add	r0, sp, #4
   2bdc0:	mov	r1, r5
   2bdc4:	mov	r2, #2
   2bdc8:	bl	2bed4 <__assert_fail@plt+0x19318>
   2bdcc:	b	2be58 <__assert_fail@plt+0x1929c>
   2bdd0:	add	r0, sp, #4
   2bdd4:	mov	r1, r5
   2bdd8:	mov	r2, #4
   2bddc:	bl	2bed4 <__assert_fail@plt+0x19318>
   2bde0:	b	2be58 <__assert_fail@plt+0x1929c>
   2bde4:	add	r0, sp, #4
   2bde8:	mov	r1, r5
   2bdec:	mov	r2, #7
   2bdf0:	bl	2bed4 <__assert_fail@plt+0x19318>
   2bdf4:	b	2be58 <__assert_fail@plt+0x1929c>
   2bdf8:	add	r0, sp, #4
   2bdfc:	mov	r1, #1024	; 0x400
   2be00:	b	2be54 <__assert_fail@plt+0x19298>
   2be04:	add	r0, sp, #4
   2be08:	mov	r1, r5
   2be0c:	mov	r2, #6
   2be10:	bl	2bed4 <__assert_fail@plt+0x19318>
   2be14:	b	2be58 <__assert_fail@plt+0x1929c>
   2be18:	add	r0, sp, #4
   2be1c:	mov	r1, r5
   2be20:	mov	r2, #5
   2be24:	bl	2bed4 <__assert_fail@plt+0x19318>
   2be28:	b	2be58 <__assert_fail@plt+0x1929c>
   2be2c:	add	r0, sp, #4
   2be30:	mov	r1, r5
   2be34:	mov	r2, #8
   2be38:	bl	2bed4 <__assert_fail@plt+0x19318>
   2be3c:	b	2be58 <__assert_fail@plt+0x1929c>
   2be40:	add	r0, sp, #4
   2be44:	mov	r1, #512	; 0x200
   2be48:	b	2be54 <__assert_fail@plt+0x19298>
   2be4c:	add	r0, sp, #4
   2be50:	mov	r1, #2
   2be54:	bl	2beac <__assert_fail@plt+0x192f0>
   2be58:	ldr	r1, [r9]
   2be5c:	add	r2, r1, r6
   2be60:	str	r2, [r9]
   2be64:	ldrb	r1, [r1, r6]
   2be68:	orr	r8, r0, r8
   2be6c:	cmp	r1, #0
   2be70:	orrne	r8, r8, #2
   2be74:	ldr	r0, [sp, #4]
   2be78:	ldr	r1, [sp]
   2be7c:	str	r0, [r1]
   2be80:	mov	r0, r8
   2be84:	sub	sp, fp, #28
   2be88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2be8c:	movw	r0, #18111	; 0x46bf
   2be90:	movt	r0, #4
   2be94:	movw	r1, #18149	; 0x46e5
   2be98:	movt	r1, #4
   2be9c:	movw	r3, #18161	; 0x46f1
   2bea0:	movt	r3, #4
   2bea4:	mov	r2, #84	; 0x54
   2bea8:	bl	12bbc <__assert_fail@plt>
   2beac:	mvn	r2, #0
   2beb0:	udiv	r2, r2, r1
   2beb4:	ldr	r3, [r0]
   2beb8:	mul	r1, r3, r1
   2bebc:	cmp	r2, r3
   2bec0:	mvncc	r1, #0
   2bec4:	str	r1, [r0]
   2bec8:	mov	r0, #0
   2becc:	movwcc	r0, #1
   2bed0:	bx	lr
   2bed4:	push	{r4, r5, r6, r7, fp, lr}
   2bed8:	add	fp, sp, #16
   2bedc:	cmp	r2, #0
   2bee0:	moveq	r6, #0
   2bee4:	moveq	r0, r6
   2bee8:	popeq	{r4, r5, r6, r7, fp, pc}
   2beec:	mov	r4, r2
   2bef0:	mov	r5, r1
   2bef4:	mov	r7, r0
   2bef8:	mov	r6, #0
   2befc:	mov	r0, r7
   2bf00:	mov	r1, r5
   2bf04:	bl	2beac <__assert_fail@plt+0x192f0>
   2bf08:	orr	r6, r0, r6
   2bf0c:	subs	r4, r4, #1
   2bf10:	bne	2befc <__assert_fail@plt+0x19340>
   2bf14:	mov	r0, r6
   2bf18:	pop	{r4, r5, r6, r7, fp, pc}
   2bf1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bf20:	add	fp, sp, #28
   2bf24:	sub	sp, sp, #20
   2bf28:	cmp	r2, #37	; 0x25
   2bf2c:	bcs	2c35c <__assert_fail@plt+0x197a0>
   2bf30:	mov	r5, r2
   2bf34:	mov	r6, r1
   2bf38:	mov	r4, r0
   2bf3c:	str	r3, [sp, #4]
   2bf40:	ldr	sl, [fp, #8]
   2bf44:	bl	128d4 <__errno_location@plt>
   2bf48:	mov	r7, r0
   2bf4c:	mov	r0, #0
   2bf50:	str	r0, [r7]
   2bf54:	bl	12844 <__ctype_b_loc@plt>
   2bf58:	ldr	r1, [r0]
   2bf5c:	mov	r2, r4
   2bf60:	ldrb	r0, [r2], #1
   2bf64:	add	r3, r1, r0, lsl #1
   2bf68:	ldrb	r3, [r3, #1]
   2bf6c:	tst	r3, #32
   2bf70:	bne	2bf60 <__assert_fail@plt+0x193a4>
   2bf74:	add	r9, sp, #16
   2bf78:	cmp	r6, #0
   2bf7c:	movne	r9, r6
   2bf80:	mov	r8, #4
   2bf84:	cmp	r0, #45	; 0x2d
   2bf88:	beq	2c350 <__assert_fail@plt+0x19794>
   2bf8c:	mov	r0, r4
   2bf90:	mov	r1, r9
   2bf94:	mov	r2, r5
   2bf98:	bl	12970 <strtoumax@plt>
   2bf9c:	str	r1, [sp, #12]
   2bfa0:	str	r0, [sp, #8]
   2bfa4:	ldr	r6, [r9]
   2bfa8:	cmp	r6, r4
   2bfac:	beq	2bfd4 <__assert_fail@plt+0x19418>
   2bfb0:	ldr	r0, [r7]
   2bfb4:	cmp	r0, #0
   2bfb8:	beq	2c008 <__assert_fail@plt+0x1944c>
   2bfbc:	cmp	r0, #34	; 0x22
   2bfc0:	bne	2c350 <__assert_fail@plt+0x19794>
   2bfc4:	mov	r8, #1
   2bfc8:	cmp	sl, #0
   2bfcc:	bne	2c014 <__assert_fail@plt+0x19458>
   2bfd0:	b	2c340 <__assert_fail@plt+0x19784>
   2bfd4:	cmp	sl, #0
   2bfd8:	ldrbne	r1, [r6]
   2bfdc:	cmpne	r1, #0
   2bfe0:	beq	2c350 <__assert_fail@plt+0x19794>
   2bfe4:	mov	r0, sl
   2bfe8:	bl	12898 <strchr@plt>
   2bfec:	cmp	r0, #0
   2bff0:	beq	2c350 <__assert_fail@plt+0x19794>
   2bff4:	mov	r8, #0
   2bff8:	str	r8, [sp, #12]
   2bffc:	mov	r0, #1
   2c000:	str	r0, [sp, #8]
   2c004:	b	2c014 <__assert_fail@plt+0x19458>
   2c008:	mov	r8, r0
   2c00c:	cmp	sl, #0
   2c010:	beq	2c340 <__assert_fail@plt+0x19784>
   2c014:	ldrb	r4, [r6]
   2c018:	cmp	r4, #0
   2c01c:	beq	2c340 <__assert_fail@plt+0x19784>
   2c020:	mov	r0, sl
   2c024:	mov	r1, r4
   2c028:	bl	12898 <strchr@plt>
   2c02c:	cmp	r0, #0
   2c030:	beq	2c240 <__assert_fail@plt+0x19684>
   2c034:	sub	r0, r4, #69	; 0x45
   2c038:	mov	r7, #1
   2c03c:	mov	r5, #1024	; 0x400
   2c040:	cmp	r0, #47	; 0x2f
   2c044:	bhi	2c13c <__assert_fail@plt+0x19580>
   2c048:	add	r1, pc, #0
   2c04c:	ldr	pc, [r1, r0, lsl #2]
   2c050:	andeq	ip, r2, r0, lsl r1
   2c054:	andeq	ip, r2, ip, lsr r1
   2c058:	andeq	ip, r2, r0, lsl r1
   2c05c:	andeq	ip, r2, ip, lsr r1
   2c060:	andeq	ip, r2, ip, lsr r1
   2c064:	andeq	ip, r2, ip, lsr r1
   2c068:	andeq	ip, r2, r0, lsl r1
   2c06c:	andeq	ip, r2, ip, lsr r1
   2c070:	andeq	ip, r2, r0, lsl r1
   2c074:	andeq	ip, r2, ip, lsr r1
   2c078:	andeq	ip, r2, ip, lsr r1
   2c07c:	andeq	ip, r2, r0, lsl r1
   2c080:	andeq	ip, r2, ip, lsr r1
   2c084:	andeq	ip, r2, ip, lsr r1
   2c088:	andeq	ip, r2, ip, lsr r1
   2c08c:	andeq	ip, r2, r0, lsl r1
   2c090:	andeq	ip, r2, ip, lsr r1
   2c094:	andeq	ip, r2, ip, lsr r1
   2c098:	andeq	ip, r2, ip, lsr r1
   2c09c:	andeq	ip, r2, ip, lsr r1
   2c0a0:	andeq	ip, r2, r0, lsl r1
   2c0a4:	andeq	ip, r2, r0, lsl r1
   2c0a8:	andeq	ip, r2, ip, lsr r1
   2c0ac:	andeq	ip, r2, ip, lsr r1
   2c0b0:	andeq	ip, r2, ip, lsr r1
   2c0b4:	andeq	ip, r2, ip, lsr r1
   2c0b8:	andeq	ip, r2, ip, lsr r1
   2c0bc:	andeq	ip, r2, ip, lsr r1
   2c0c0:	andeq	ip, r2, ip, lsr r1
   2c0c4:	andeq	ip, r2, ip, lsr r1
   2c0c8:	andeq	ip, r2, ip, lsr r1
   2c0cc:	andeq	ip, r2, ip, lsr r1
   2c0d0:	andeq	ip, r2, ip, lsr r1
   2c0d4:	andeq	ip, r2, ip, lsr r1
   2c0d8:	andeq	ip, r2, r0, lsl r1
   2c0dc:	andeq	ip, r2, ip, lsr r1
   2c0e0:	andeq	ip, r2, ip, lsr r1
   2c0e4:	andeq	ip, r2, ip, lsr r1
   2c0e8:	andeq	ip, r2, r0, lsl r1
   2c0ec:	andeq	ip, r2, ip, lsr r1
   2c0f0:	andeq	ip, r2, r0, lsl r1
   2c0f4:	andeq	ip, r2, ip, lsr r1
   2c0f8:	andeq	ip, r2, ip, lsr r1
   2c0fc:	andeq	ip, r2, ip, lsr r1
   2c100:	andeq	ip, r2, ip, lsr r1
   2c104:	andeq	ip, r2, ip, lsr r1
   2c108:	andeq	ip, r2, ip, lsr r1
   2c10c:	andeq	ip, r2, r0, lsl r1
   2c110:	mov	r0, sl
   2c114:	mov	r1, #48	; 0x30
   2c118:	bl	12898 <strchr@plt>
   2c11c:	cmp	r0, #0
   2c120:	beq	2c13c <__assert_fail@plt+0x19580>
   2c124:	ldrb	r0, [r6, #1]
   2c128:	cmp	r0, #66	; 0x42
   2c12c:	cmpne	r0, #68	; 0x44
   2c130:	bne	2c258 <__assert_fail@plt+0x1969c>
   2c134:	mov	r7, #2
   2c138:	mov	r5, #1000	; 0x3e8
   2c13c:	sub	r1, r4, #66	; 0x42
   2c140:	cmp	r1, #53	; 0x35
   2c144:	bhi	2c240 <__assert_fail@plt+0x19684>
   2c148:	mov	r0, #0
   2c14c:	add	r2, pc, #0
   2c150:	ldr	pc, [r2, r1, lsl #2]
   2c154:	andeq	ip, r2, r4, asr #5
   2c158:	andeq	ip, r2, r0, asr #4
   2c15c:	andeq	ip, r2, r0, asr #4
   2c160:	ldrdeq	ip, [r2], -r0
   2c164:	andeq	ip, r2, r0, asr #4
   2c168:	andeq	ip, r2, ip, lsr #4
   2c16c:	andeq	ip, r2, r0, asr #4
   2c170:	andeq	ip, r2, r0, asr #4
   2c174:	andeq	ip, r2, r0, asr #4
   2c178:	andeq	ip, r2, r4, ror r2
   2c17c:	andeq	ip, r2, r0, asr #4
   2c180:	andeq	ip, r2, r8, lsl #5
   2c184:	andeq	ip, r2, r0, asr #4
   2c188:	andeq	ip, r2, r0, asr #4
   2c18c:	andeq	ip, r2, r4, ror #5
   2c190:	andeq	ip, r2, r0, asr #4
   2c194:	andeq	ip, r2, r0, asr #4
   2c198:	andeq	ip, r2, r0, asr #4
   2c19c:	muleq	r2, ip, r2
   2c1a0:	andeq	ip, r2, r0, asr #4
   2c1a4:	andeq	ip, r2, r0, asr #4
   2c1a8:	andeq	ip, r2, r0, asr #4
   2c1ac:	andeq	ip, r2, r0, asr #4
   2c1b0:	strdeq	ip, [r2], -r8
   2c1b4:			; <UNDEFINED> instruction: 0x0002c2b0
   2c1b8:	andeq	ip, r2, r0, asr #4
   2c1bc:	andeq	ip, r2, r0, asr #4
   2c1c0:	andeq	ip, r2, r0, asr #4
   2c1c4:	andeq	ip, r2, r0, asr #4
   2c1c8:	andeq	ip, r2, r0, asr #4
   2c1cc:	andeq	ip, r2, r0, asr #4
   2c1d0:	andeq	ip, r2, r0, asr #4
   2c1d4:	andeq	ip, r2, ip, lsl #6
   2c1d8:	andeq	ip, r2, r4, lsr #6
   2c1dc:	andeq	ip, r2, r0, asr #4
   2c1e0:	andeq	ip, r2, r0, asr #4
   2c1e4:	andeq	ip, r2, r0, asr #4
   2c1e8:	andeq	ip, r2, ip, lsr #4
   2c1ec:	andeq	ip, r2, r0, asr #4
   2c1f0:	andeq	ip, r2, r0, asr #4
   2c1f4:	andeq	ip, r2, r0, asr #4
   2c1f8:	andeq	ip, r2, r4, ror r2
   2c1fc:	andeq	ip, r2, r0, asr #4
   2c200:	andeq	ip, r2, r8, lsl #5
   2c204:	andeq	ip, r2, r0, asr #4
   2c208:	andeq	ip, r2, r0, asr #4
   2c20c:	andeq	ip, r2, r0, asr #4
   2c210:	andeq	ip, r2, r0, asr #4
   2c214:	andeq	ip, r2, r0, asr #4
   2c218:	andeq	ip, r2, r0, asr #4
   2c21c:	muleq	r2, ip, r2
   2c220:	andeq	ip, r2, r0, asr #4
   2c224:	andeq	ip, r2, r0, asr #4
   2c228:	andeq	ip, r2, r8, lsl r3
   2c22c:	add	r0, sp, #8
   2c230:	mov	r1, r5
   2c234:	mov	r2, #3
   2c238:	bl	2c3dc <__assert_fail@plt+0x19820>
   2c23c:	b	2c324 <__assert_fail@plt+0x19768>
   2c240:	ldr	r0, [sp, #8]
   2c244:	ldr	r1, [sp, #12]
   2c248:	ldr	r2, [sp, #4]
   2c24c:	strd	r0, [r2]
   2c250:	orr	r8, r8, #2
   2c254:	b	2c350 <__assert_fail@plt+0x19794>
   2c258:	cmp	r0, #105	; 0x69
   2c25c:	bne	2c13c <__assert_fail@plt+0x19580>
   2c260:	ldrb	r0, [r6, #2]
   2c264:	mov	r7, #1
   2c268:	cmp	r0, #66	; 0x42
   2c26c:	movweq	r7, #3
   2c270:	b	2c13c <__assert_fail@plt+0x19580>
   2c274:	add	r0, sp, #8
   2c278:	mov	r1, r5
   2c27c:	mov	r2, #1
   2c280:	bl	2c3dc <__assert_fail@plt+0x19820>
   2c284:	b	2c324 <__assert_fail@plt+0x19768>
   2c288:	add	r0, sp, #8
   2c28c:	mov	r1, r5
   2c290:	mov	r2, #2
   2c294:	bl	2c3dc <__assert_fail@plt+0x19820>
   2c298:	b	2c324 <__assert_fail@plt+0x19768>
   2c29c:	add	r0, sp, #8
   2c2a0:	mov	r1, r5
   2c2a4:	mov	r2, #4
   2c2a8:	bl	2c3dc <__assert_fail@plt+0x19820>
   2c2ac:	b	2c324 <__assert_fail@plt+0x19768>
   2c2b0:	add	r0, sp, #8
   2c2b4:	mov	r1, r5
   2c2b8:	mov	r2, #7
   2c2bc:	bl	2c3dc <__assert_fail@plt+0x19820>
   2c2c0:	b	2c324 <__assert_fail@plt+0x19768>
   2c2c4:	add	r0, sp, #8
   2c2c8:	mov	r1, #1024	; 0x400
   2c2cc:	b	2c320 <__assert_fail@plt+0x19764>
   2c2d0:	add	r0, sp, #8
   2c2d4:	mov	r1, r5
   2c2d8:	mov	r2, #6
   2c2dc:	bl	2c3dc <__assert_fail@plt+0x19820>
   2c2e0:	b	2c324 <__assert_fail@plt+0x19768>
   2c2e4:	add	r0, sp, #8
   2c2e8:	mov	r1, r5
   2c2ec:	mov	r2, #5
   2c2f0:	bl	2c3dc <__assert_fail@plt+0x19820>
   2c2f4:	b	2c324 <__assert_fail@plt+0x19768>
   2c2f8:	add	r0, sp, #8
   2c2fc:	mov	r1, r5
   2c300:	mov	r2, #8
   2c304:	bl	2c3dc <__assert_fail@plt+0x19820>
   2c308:	b	2c324 <__assert_fail@plt+0x19768>
   2c30c:	add	r0, sp, #8
   2c310:	mov	r1, #512	; 0x200
   2c314:	b	2c320 <__assert_fail@plt+0x19764>
   2c318:	add	r0, sp, #8
   2c31c:	mov	r1, #2
   2c320:	bl	2c37c <__assert_fail@plt+0x197c0>
   2c324:	ldr	r1, [r9]
   2c328:	add	r2, r1, r7
   2c32c:	str	r2, [r9]
   2c330:	ldrb	r1, [r1, r7]
   2c334:	orr	r8, r0, r8
   2c338:	cmp	r1, #0
   2c33c:	orrne	r8, r8, #2
   2c340:	ldr	r0, [sp, #8]
   2c344:	ldr	r1, [sp, #12]
   2c348:	ldr	r2, [sp, #4]
   2c34c:	strd	r0, [r2]
   2c350:	mov	r0, r8
   2c354:	sub	sp, fp, #28
   2c358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c35c:	movw	r0, #18111	; 0x46bf
   2c360:	movt	r0, #4
   2c364:	movw	r1, #18149	; 0x46e5
   2c368:	movt	r1, #4
   2c36c:	movw	r3, #18242	; 0x4742
   2c370:	movt	r3, #4
   2c374:	mov	r2, #84	; 0x54
   2c378:	bl	12bbc <__assert_fail@plt>
   2c37c:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   2c380:	add	fp, sp, #24
   2c384:	mov	r4, r1
   2c388:	mov	r5, r0
   2c38c:	asr	r6, r1, #31
   2c390:	mvn	r0, #0
   2c394:	mvn	r1, #0
   2c398:	mov	r2, r4
   2c39c:	mov	r3, r6
   2c3a0:	bl	3e6b0 <__assert_fail@plt+0x2baf4>
   2c3a4:	ldrd	r8, [r5]
   2c3a8:	mov	r2, #0
   2c3ac:	subs	r0, r0, r8
   2c3b0:	sbcs	r0, r1, r9
   2c3b4:	movwcc	r2, #1
   2c3b8:	umull	r1, r0, r8, r4
   2c3bc:	mla	r0, r8, r6, r0
   2c3c0:	mla	r3, r9, r4, r0
   2c3c4:	cmp	r2, #0
   2c3c8:	mvnne	r3, #0
   2c3cc:	mvnne	r1, #0
   2c3d0:	stm	r5, {r1, r3}
   2c3d4:	mov	r0, r2
   2c3d8:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   2c3dc:	push	{r4, r5, r6, r7, fp, lr}
   2c3e0:	add	fp, sp, #16
   2c3e4:	cmp	r2, #0
   2c3e8:	moveq	r6, #0
   2c3ec:	moveq	r0, r6
   2c3f0:	popeq	{r4, r5, r6, r7, fp, pc}
   2c3f4:	mov	r4, r2
   2c3f8:	mov	r5, r1
   2c3fc:	mov	r7, r0
   2c400:	mov	r6, #0
   2c404:	mov	r0, r7
   2c408:	mov	r1, r5
   2c40c:	bl	2c37c <__assert_fail@plt+0x197c0>
   2c410:	orr	r6, r0, r6
   2c414:	subs	r4, r4, #1
   2c418:	bne	2c404 <__assert_fail@plt+0x19848>
   2c41c:	mov	r0, r6
   2c420:	pop	{r4, r5, r6, r7, fp, pc}
   2c424:	push	{r4, sl, fp, lr}
   2c428:	add	fp, sp, #8
   2c42c:	sub	sp, sp, #8
   2c430:	mov	r4, #0
   2c434:	str	r4, [sp, #4]
   2c438:	str	r4, [sp]
   2c43c:	movw	r0, #21864	; 0x5568
   2c440:	movt	r0, #5
   2c444:	ldr	r2, [r0]
   2c448:	add	r0, sp, #4
   2c44c:	mov	r1, sp
   2c450:	bl	12b08 <getline@plt>
   2c454:	cmp	r0, #1
   2c458:	blt	2c488 <__assert_fail@plt+0x198cc>
   2c45c:	sub	r0, r0, #1
   2c460:	ldr	r1, [sp, #4]
   2c464:	ldrb	r2, [r1, r0]
   2c468:	cmp	r2, #10
   2c46c:	moveq	r2, #0
   2c470:	strbeq	r2, [r1, r0]
   2c474:	ldr	r0, [sp, #4]
   2c478:	bl	129dc <rpmatch@plt>
   2c47c:	mov	r4, #0
   2c480:	cmp	r0, #0
   2c484:	movwgt	r4, #1
   2c488:	ldr	r0, [sp, #4]
   2c48c:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2c490:	mov	r0, r4
   2c494:	sub	sp, fp, #8
   2c498:	pop	{r4, sl, fp, pc}
   2c49c:	clz	r2, r1
   2c4a0:	lsr	r2, r2, #5
   2c4a4:	clz	r3, r0
   2c4a8:	lsr	r3, r3, #5
   2c4ac:	orrs	r2, r3, r2
   2c4b0:	movwne	r1, #1
   2c4b4:	movwne	r0, #1
   2c4b8:	cmp	r1, #0
   2c4bc:	beq	2c4ec <__assert_fail@plt+0x19930>
   2c4c0:	mvn	r2, #-2147483648	; 0x80000000
   2c4c4:	udiv	r2, r2, r1
   2c4c8:	cmp	r2, r0
   2c4cc:	bcs	2c4ec <__assert_fail@plt+0x19930>
   2c4d0:	push	{fp, lr}
   2c4d4:	mov	fp, sp
   2c4d8:	bl	128d4 <__errno_location@plt>
   2c4dc:	mov	r1, #12
   2c4e0:	str	r1, [r0]
   2c4e4:	mov	r0, #0
   2c4e8:	pop	{fp, pc}
   2c4ec:	b	12454 <calloc@plt>
   2c4f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c4f4:	add	fp, sp, #28
   2c4f8:	sub	sp, sp, #4
   2c4fc:	mov	r5, r0
   2c500:	bl	126b8 <chdir@plt>
   2c504:	cmp	r0, #0
   2c508:	beq	2c5c4 <__assert_fail@plt+0x19a08>
   2c50c:	mov	r6, r0
   2c510:	bl	128d4 <__errno_location@plt>
   2c514:	mov	r8, r0
   2c518:	ldr	r0, [r0]
   2c51c:	cmp	r0, #36	; 0x24
   2c520:	bne	2c6bc <__assert_fail@plt+0x19b00>
   2c524:	mov	r0, r5
   2c528:	bl	1288c <strlen@plt>
   2c52c:	mov	r6, r0
   2c530:	mov	r0, sp
   2c534:	bl	2c778 <__assert_fail@plt+0x19bbc>
   2c538:	cmp	r6, #0
   2c53c:	beq	2c6f8 <__assert_fail@plt+0x19b3c>
   2c540:	mov	r0, #0
   2c544:	cmp	r0, r6, lsr #12
   2c548:	beq	2c718 <__assert_fail@plt+0x19b5c>
   2c54c:	movw	r1, #62562	; 0xf462
   2c550:	movt	r1, #3
   2c554:	mov	r0, r5
   2c558:	bl	12bb0 <strspn@plt>
   2c55c:	cmp	r0, #0
   2c560:	mov	r7, r5
   2c564:	beq	2c5e8 <__assert_fail@plt+0x19a2c>
   2c568:	mov	r4, r0
   2c56c:	cmp	r0, #2
   2c570:	bne	2c5cc <__assert_fail@plt+0x19a10>
   2c574:	add	r0, r5, #3
   2c578:	sub	r2, r6, #3
   2c57c:	mov	r7, #47	; 0x2f
   2c580:	mov	r1, #47	; 0x2f
   2c584:	bl	1297c <memchr@plt>
   2c588:	cmp	r0, #0
   2c58c:	beq	2c6b0 <__assert_fail@plt+0x19af4>
   2c590:	mov	r4, r0
   2c594:	mov	r0, #0
   2c598:	strb	r0, [r4]
   2c59c:	mov	r0, sp
   2c5a0:	mov	r1, r5
   2c5a4:	bl	2c784 <__assert_fail@plt+0x19bc8>
   2c5a8:	strb	r7, [r4]
   2c5ac:	cmp	r0, #0
   2c5b0:	bne	2c69c <__assert_fail@plt+0x19ae0>
   2c5b4:	add	r0, r4, #1
   2c5b8:	bl	2c7c0 <__assert_fail@plt+0x19c04>
   2c5bc:	mov	r7, r0
   2c5c0:	b	2c5e8 <__assert_fail@plt+0x19a2c>
   2c5c4:	mov	r6, #0
   2c5c8:	b	2c6bc <__assert_fail@plt+0x19b00>
   2c5cc:	mov	r0, sp
   2c5d0:	movw	r1, #62562	; 0xf462
   2c5d4:	movt	r1, #3
   2c5d8:	bl	2c784 <__assert_fail@plt+0x19bc8>
   2c5dc:	cmp	r0, #0
   2c5e0:	bne	2c69c <__assert_fail@plt+0x19ae0>
   2c5e4:	add	r7, r5, r4
   2c5e8:	ldrb	r0, [r7]
   2c5ec:	cmp	r0, #47	; 0x2f
   2c5f0:	beq	2c738 <__assert_fail@plt+0x19b7c>
   2c5f4:	add	r4, r5, r6
   2c5f8:	cmp	r7, r4
   2c5fc:	bhi	2c758 <__assert_fail@plt+0x19b9c>
   2c600:	sub	r0, r4, r7
   2c604:	cmp	r0, #4096	; 0x1000
   2c608:	blt	2c670 <__assert_fail@plt+0x19ab4>
   2c60c:	mov	r9, #47	; 0x2f
   2c610:	mov	sl, #0
   2c614:	mov	r5, sp
   2c618:	mov	r0, r7
   2c61c:	mov	r1, #47	; 0x2f
   2c620:	mov	r2, #4096	; 0x1000
   2c624:	bl	128bc <memrchr@plt>
   2c628:	cmp	r0, #0
   2c62c:	beq	2c6b0 <__assert_fail@plt+0x19af4>
   2c630:	mov	r6, r0
   2c634:	strb	sl, [r0], -r7
   2c638:	cmp	r0, #4096	; 0x1000
   2c63c:	bge	2c6d8 <__assert_fail@plt+0x19b1c>
   2c640:	mov	r0, r5
   2c644:	mov	r1, r7
   2c648:	bl	2c784 <__assert_fail@plt+0x19bc8>
   2c64c:	strb	r9, [r6]
   2c650:	cmp	r0, #0
   2c654:	bne	2c69c <__assert_fail@plt+0x19ae0>
   2c658:	add	r0, r6, #1
   2c65c:	bl	2c7c0 <__assert_fail@plt+0x19c04>
   2c660:	mov	r7, r0
   2c664:	sub	r0, r4, r0
   2c668:	cmp	r0, #4096	; 0x1000
   2c66c:	bge	2c618 <__assert_fail@plt+0x19a5c>
   2c670:	cmp	r7, r4
   2c674:	bcs	2c68c <__assert_fail@plt+0x19ad0>
   2c678:	mov	r0, sp
   2c67c:	mov	r1, r7
   2c680:	bl	2c784 <__assert_fail@plt+0x19bc8>
   2c684:	cmp	r0, #0
   2c688:	bne	2c69c <__assert_fail@plt+0x19ae0>
   2c68c:	mov	r0, sp
   2c690:	bl	2c7e0 <__assert_fail@plt+0x19c24>
   2c694:	cmp	r0, #0
   2c698:	beq	2c6c8 <__assert_fail@plt+0x19b0c>
   2c69c:	ldr	r4, [r8]
   2c6a0:	mov	r0, sp
   2c6a4:	bl	2c7e8 <__assert_fail@plt+0x19c2c>
   2c6a8:	str	r4, [r8]
   2c6ac:	b	2c6b8 <__assert_fail@plt+0x19afc>
   2c6b0:	mov	r0, #36	; 0x24
   2c6b4:	str	r0, [r8]
   2c6b8:	mvn	r6, #0
   2c6bc:	mov	r0, r6
   2c6c0:	sub	sp, fp, #28
   2c6c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c6c8:	mov	r0, sp
   2c6cc:	bl	2c7e8 <__assert_fail@plt+0x19c2c>
   2c6d0:	mov	r6, #0
   2c6d4:	b	2c6bc <__assert_fail@plt+0x19b00>
   2c6d8:	movw	r0, #18404	; 0x47e4
   2c6dc:	movt	r0, #4
   2c6e0:	movw	r1, #18329	; 0x4799
   2c6e4:	movt	r1, #4
   2c6e8:	movw	r3, #18342	; 0x47a6
   2c6ec:	movt	r3, #4
   2c6f0:	mov	r2, #179	; 0xb3
   2c6f4:	bl	12bbc <__assert_fail@plt>
   2c6f8:	movw	r0, #18321	; 0x4791
   2c6fc:	movt	r0, #4
   2c700:	movw	r1, #18329	; 0x4799
   2c704:	movt	r1, #4
   2c708:	movw	r3, #18342	; 0x47a6
   2c70c:	movt	r3, #4
   2c710:	mov	r2, #126	; 0x7e
   2c714:	bl	12bbc <__assert_fail@plt>
   2c718:	movw	r0, #18365	; 0x47bd
   2c71c:	movt	r0, #4
   2c720:	movw	r1, #18329	; 0x4799
   2c724:	movt	r1, #4
   2c728:	movw	r3, #18342	; 0x47a6
   2c72c:	movt	r3, #4
   2c730:	mov	r2, #127	; 0x7f
   2c734:	bl	12bbc <__assert_fail@plt>
   2c738:	movw	r0, #18377	; 0x47c9
   2c73c:	movt	r0, #4
   2c740:	movw	r1, #18329	; 0x4799
   2c744:	movt	r1, #4
   2c748:	movw	r3, #18342	; 0x47a6
   2c74c:	movt	r3, #4
   2c750:	mov	r2, #162	; 0xa2
   2c754:	bl	12bbc <__assert_fail@plt>
   2c758:	movw	r0, #18389	; 0x47d5
   2c75c:	movt	r0, #4
   2c760:	movw	r1, #18329	; 0x4799
   2c764:	movt	r1, #4
   2c768:	movw	r3, #18342	; 0x47a6
   2c76c:	movt	r3, #4
   2c770:	mov	r2, #163	; 0xa3
   2c774:	bl	12bbc <__assert_fail@plt>
   2c778:	mvn	r1, #99	; 0x63
   2c77c:	str	r1, [r0]
   2c780:	bx	lr
   2c784:	push	{r4, r5, fp, lr}
   2c788:	add	fp, sp, #8
   2c78c:	mov	r4, r0
   2c790:	ldr	r0, [r0]
   2c794:	mov	r2, #18688	; 0x4900
   2c798:	bl	128b0 <openat64@plt>
   2c79c:	cmp	r0, #0
   2c7a0:	mvnlt	r0, #0
   2c7a4:	poplt	{r4, r5, fp, pc}
   2c7a8:	mov	r5, r0
   2c7ac:	mov	r0, r4
   2c7b0:	bl	2c7e8 <__assert_fail@plt+0x19c2c>
   2c7b4:	str	r5, [r4]
   2c7b8:	mov	r0, #0
   2c7bc:	pop	{r4, r5, fp, pc}
   2c7c0:	push	{r4, sl, fp, lr}
   2c7c4:	add	fp, sp, #8
   2c7c8:	mov	r4, r0
   2c7cc:	movw	r1, #62562	; 0xf462
   2c7d0:	movt	r1, #3
   2c7d4:	bl	12bb0 <strspn@plt>
   2c7d8:	add	r0, r4, r0
   2c7dc:	pop	{r4, sl, fp, pc}
   2c7e0:	ldr	r0, [r0]
   2c7e4:	b	12aa8 <fchdir@plt>
   2c7e8:	push	{fp, lr}
   2c7ec:	mov	fp, sp
   2c7f0:	ldr	r0, [r0]
   2c7f4:	cmp	r0, #0
   2c7f8:	poplt	{fp, pc}
   2c7fc:	bl	12b74 <close@plt>
   2c800:	cmp	r0, #0
   2c804:	bne	2c80c <__assert_fail@plt+0x19c50>
   2c808:	pop	{fp, pc}
   2c80c:	movw	r0, #18423	; 0x47f7
   2c810:	movt	r0, #4
   2c814:	movw	r1, #18329	; 0x4799
   2c818:	movt	r1, #4
   2c81c:	movw	r3, #18436	; 0x4804
   2c820:	movt	r3, #4
   2c824:	mov	r2, #64	; 0x40
   2c828:	bl	12bbc <__assert_fail@plt>
   2c82c:	sub	sp, sp, #8
   2c830:	push	{fp, lr}
   2c834:	mov	fp, sp
   2c838:	sub	sp, sp, #8
   2c83c:	str	r3, [fp, #12]
   2c840:	str	r2, [fp, #8]
   2c844:	add	r2, fp, #8
   2c848:	str	r2, [sp, #4]
   2c84c:	cmp	r1, #11
   2c850:	bhi	2c890 <__assert_fail@plt+0x19cd4>
   2c854:	mov	r2, #1
   2c858:	movw	r3, #1300	; 0x514
   2c85c:	tst	r3, r2, lsl r1
   2c860:	bne	2c8e0 <__assert_fail@plt+0x19d24>
   2c864:	movw	r3, #2570	; 0xa0a
   2c868:	tst	r3, r2, lsl r1
   2c86c:	bne	2c8b8 <__assert_fail@plt+0x19cfc>
   2c870:	cmp	r1, #0
   2c874:	bne	2c890 <__assert_fail@plt+0x19cd4>
   2c878:	ldr	r1, [sp, #4]
   2c87c:	add	r2, r1, #4
   2c880:	str	r2, [sp, #4]
   2c884:	ldr	r1, [r1]
   2c888:	bl	2c904 <__assert_fail@plt+0x19d48>
   2c88c:	b	2c8f4 <__assert_fail@plt+0x19d38>
   2c890:	sub	r2, r1, #1024	; 0x400
   2c894:	cmp	r2, #10
   2c898:	bhi	2c8e0 <__assert_fail@plt+0x19d24>
   2c89c:	mov	ip, #1
   2c8a0:	movw	r3, #645	; 0x285
   2c8a4:	tst	r3, ip, lsl r2
   2c8a8:	bne	2c8e0 <__assert_fail@plt+0x19d24>
   2c8ac:	movw	r3, #1282	; 0x502
   2c8b0:	tst	r3, ip, lsl r2
   2c8b4:	beq	2c8c0 <__assert_fail@plt+0x19d04>
   2c8b8:	bl	129d0 <fcntl64@plt>
   2c8bc:	b	2c8f4 <__assert_fail@plt+0x19d38>
   2c8c0:	cmp	r2, #6
   2c8c4:	bne	2c8e0 <__assert_fail@plt+0x19d24>
   2c8c8:	ldr	r1, [sp, #4]
   2c8cc:	add	r2, r1, #4
   2c8d0:	str	r2, [sp, #4]
   2c8d4:	ldr	r1, [r1]
   2c8d8:	bl	2c910 <__assert_fail@plt+0x19d54>
   2c8dc:	b	2c8f4 <__assert_fail@plt+0x19d38>
   2c8e0:	ldr	r2, [sp, #4]
   2c8e4:	add	r3, r2, #4
   2c8e8:	str	r3, [sp, #4]
   2c8ec:	ldr	r2, [r2]
   2c8f0:	bl	129d0 <fcntl64@plt>
   2c8f4:	mov	sp, fp
   2c8f8:	pop	{fp, lr}
   2c8fc:	add	sp, sp, #8
   2c900:	bx	lr
   2c904:	mov	r2, r1
   2c908:	mov	r1, #0
   2c90c:	b	129d0 <fcntl64@plt>
   2c910:	push	{r4, r5, r6, r7, fp, lr}
   2c914:	add	fp, sp, #16
   2c918:	mov	r5, r1
   2c91c:	mov	r6, r0
   2c920:	movw	r7, #24144	; 0x5e50
   2c924:	movt	r7, #5
   2c928:	ldr	r0, [r7]
   2c92c:	cmp	r0, #0
   2c930:	blt	2c994 <__assert_fail@plt+0x19dd8>
   2c934:	mov	r0, r6
   2c938:	movw	r1, #1030	; 0x406
   2c93c:	mov	r2, r5
   2c940:	bl	129d0 <fcntl64@plt>
   2c944:	mov	r4, r0
   2c948:	cmn	r0, #1
   2c94c:	bgt	2c980 <__assert_fail@plt+0x19dc4>
   2c950:	bl	128d4 <__errno_location@plt>
   2c954:	ldr	r0, [r0]
   2c958:	cmp	r0, #22
   2c95c:	bne	2c980 <__assert_fail@plt+0x19dc4>
   2c960:	mov	r0, r6
   2c964:	mov	r1, r5
   2c968:	bl	2c904 <__assert_fail@plt+0x19d48>
   2c96c:	mov	r4, r0
   2c970:	cmp	r0, #0
   2c974:	blt	2c9e4 <__assert_fail@plt+0x19e28>
   2c978:	mvn	r0, #0
   2c97c:	b	2c984 <__assert_fail@plt+0x19dc8>
   2c980:	mov	r0, #1
   2c984:	str	r0, [r7]
   2c988:	cmp	r4, #0
   2c98c:	bge	2c9ac <__assert_fail@plt+0x19df0>
   2c990:	b	2c9e4 <__assert_fail@plt+0x19e28>
   2c994:	mov	r0, r6
   2c998:	mov	r1, r5
   2c99c:	bl	2c904 <__assert_fail@plt+0x19d48>
   2c9a0:	mov	r4, r0
   2c9a4:	cmp	r4, #0
   2c9a8:	blt	2c9e4 <__assert_fail@plt+0x19e28>
   2c9ac:	ldr	r0, [r7]
   2c9b0:	cmn	r0, #1
   2c9b4:	bne	2c9e4 <__assert_fail@plt+0x19e28>
   2c9b8:	mov	r0, r4
   2c9bc:	mov	r1, #1
   2c9c0:	bl	129d0 <fcntl64@plt>
   2c9c4:	cmp	r0, #0
   2c9c8:	blt	2c9ec <__assert_fail@plt+0x19e30>
   2c9cc:	orr	r2, r0, #1
   2c9d0:	mov	r0, r4
   2c9d4:	mov	r1, #2
   2c9d8:	bl	129d0 <fcntl64@plt>
   2c9dc:	cmn	r0, #1
   2c9e0:	beq	2c9ec <__assert_fail@plt+0x19e30>
   2c9e4:	mov	r0, r4
   2c9e8:	pop	{r4, r5, r6, r7, fp, pc}
   2c9ec:	bl	128d4 <__errno_location@plt>
   2c9f0:	mov	r5, r0
   2c9f4:	ldr	r6, [r0]
   2c9f8:	mov	r0, r4
   2c9fc:	bl	12b74 <close@plt>
   2ca00:	str	r6, [r5]
   2ca04:	mvn	r4, #0
   2ca08:	mov	r0, r4
   2ca0c:	pop	{r4, r5, r6, r7, fp, pc}
   2ca10:	push	{r4, sl, fp, lr}
   2ca14:	add	fp, sp, #8
   2ca18:	mov	r4, r0
   2ca1c:	cmp	r0, #0
   2ca20:	beq	2ca38 <__assert_fail@plt+0x19e7c>
   2ca24:	mov	r0, r4
   2ca28:	bl	12814 <__freading@plt>
   2ca2c:	cmp	r0, #0
   2ca30:	movne	r0, r4
   2ca34:	blne	2ca44 <__assert_fail@plt+0x19e88>
   2ca38:	mov	r0, r4
   2ca3c:	pop	{r4, sl, fp, lr}
   2ca40:	b	1252c <fflush@plt>
   2ca44:	ldrb	r1, [r0, #1]
   2ca48:	tst	r1, #1
   2ca4c:	bxeq	lr
   2ca50:	push	{fp, lr}
   2ca54:	mov	fp, sp
   2ca58:	sub	sp, sp, #8
   2ca5c:	mov	r1, #1
   2ca60:	str	r1, [sp]
   2ca64:	mov	r2, #0
   2ca68:	mov	r3, #0
   2ca6c:	bl	2caa0 <__assert_fail@plt+0x19ee4>
   2ca70:	mov	sp, fp
   2ca74:	pop	{fp, pc}
   2ca78:	push	{r4, r5, r6, sl, fp, lr}
   2ca7c:	add	fp, sp, #16
   2ca80:	mov	r4, r0
   2ca84:	bl	128d4 <__errno_location@plt>
   2ca88:	mov	r5, r0
   2ca8c:	ldr	r6, [r0]
   2ca90:	mov	r0, r4
   2ca94:	bl	12568 <free@plt>
   2ca98:	str	r6, [r5]
   2ca9c:	pop	{r4, r5, r6, sl, fp, pc}
   2caa0:	push	{r4, r5, r6, r7, fp, lr}
   2caa4:	add	fp, sp, #16
   2caa8:	sub	sp, sp, #8
   2caac:	mov	r5, r3
   2cab0:	mov	r6, r2
   2cab4:	mov	r4, r0
   2cab8:	ldr	r0, [r0, #4]
   2cabc:	ldr	r1, [r4, #8]
   2cac0:	cmp	r1, r0
   2cac4:	bne	2cae0 <__assert_fail@plt+0x19f24>
   2cac8:	ldrd	r0, [r4, #16]
   2cacc:	cmp	r1, r0
   2cad0:	bne	2cae0 <__assert_fail@plt+0x19f24>
   2cad4:	ldr	r0, [r4, #36]	; 0x24
   2cad8:	cmp	r0, #0
   2cadc:	beq	2caf8 <__assert_fail@plt+0x19f3c>
   2cae0:	mov	r0, r4
   2cae4:	mov	r2, r6
   2cae8:	mov	r3, r5
   2caec:	sub	sp, fp, #16
   2caf0:	pop	{r4, r5, r6, r7, fp, lr}
   2caf4:	b	129b8 <fseeko64@plt>
   2caf8:	ldr	r7, [fp, #8]
   2cafc:	mov	r0, r4
   2cb00:	bl	12958 <fileno@plt>
   2cb04:	str	r7, [sp]
   2cb08:	mov	r2, r6
   2cb0c:	mov	r3, r5
   2cb10:	bl	12718 <lseek64@plt>
   2cb14:	and	r2, r0, r1
   2cb18:	cmn	r2, #1
   2cb1c:	mvneq	r0, #0
   2cb20:	subeq	sp, fp, #16
   2cb24:	popeq	{r4, r5, r6, r7, fp, pc}
   2cb28:	strd	r0, [r4, #80]	; 0x50
   2cb2c:	ldr	r0, [r4]
   2cb30:	bic	r0, r0, #16
   2cb34:	str	r0, [r4]
   2cb38:	mov	r0, #0
   2cb3c:	sub	sp, fp, #16
   2cb40:	pop	{r4, r5, r6, r7, fp, pc}
   2cb44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cb48:	add	fp, sp, #28
   2cb4c:	sub	sp, sp, #12
   2cb50:	cmp	r1, #4096	; 0x1000
   2cb54:	bcs	2cb70 <__assert_fail@plt+0x19fb4>
   2cb58:	mov	r6, r1
   2cb5c:	mov	r7, r0
   2cb60:	and	r0, r1, #516	; 0x204
   2cb64:	cmp	r0, #516	; 0x204
   2cb68:	tstne	r6, #18
   2cb6c:	bne	2cb8c <__assert_fail@plt+0x19fd0>
   2cb70:	bl	128d4 <__errno_location@plt>
   2cb74:	mov	r1, #22
   2cb78:	str	r1, [r0]
   2cb7c:	mov	r4, #0
   2cb80:	mov	r0, r4
   2cb84:	sub	sp, fp, #28
   2cb88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cb8c:	mov	sl, r2
   2cb90:	mov	r0, #1
   2cb94:	mov	r1, #96	; 0x60
   2cb98:	bl	2c49c <__assert_fail@plt+0x198e0>
   2cb9c:	cmp	r0, #0
   2cba0:	beq	2cb7c <__assert_fail@plt+0x19fc0>
   2cba4:	mov	r4, r0
   2cba8:	mvn	r0, #99	; 0x63
   2cbac:	str	r0, [r4, #32]
   2cbb0:	bic	r0, r6, #516	; 0x204
   2cbb4:	tst	r6, #2
   2cbb8:	mov	r1, r6
   2cbbc:	orrne	r1, r0, #4
   2cbc0:	str	sl, [r4, #44]	; 0x2c
   2cbc4:	str	r1, [r4, #48]	; 0x30
   2cbc8:	mov	r0, r7
   2cbcc:	bl	2ce40 <__assert_fail@plt+0x1a284>
   2cbd0:	mov	r1, r0
   2cbd4:	cmp	r0, #4096	; 0x1000
   2cbd8:	movls	r1, #4096	; 0x1000
   2cbdc:	mov	r0, r4
   2cbe0:	bl	2ce84 <__assert_fail@plt+0x1a2c8>
   2cbe4:	cmp	r0, #0
   2cbe8:	beq	2ce34 <__assert_fail@plt+0x1a278>
   2cbec:	ldr	r0, [r7]
   2cbf0:	cmp	r0, #0
   2cbf4:	beq	2cc24 <__assert_fail@plt+0x1a068>
   2cbf8:	movw	r1, #2143	; 0x85f
   2cbfc:	movt	r1, #4
   2cc00:	mov	r0, r4
   2cc04:	mov	r2, #0
   2cc08:	bl	2cefc <__assert_fail@plt+0x1a340>
   2cc0c:	cmp	r0, #0
   2cc10:	beq	2ce2c <__assert_fail@plt+0x1a270>
   2cc14:	mov	r8, r0
   2cc18:	mvn	r0, #0
   2cc1c:	str	r0, [r8, #48]	; 0x30
   2cc20:	b	2cc28 <__assert_fail@plt+0x1a06c>
   2cc24:	mov	r8, #0
   2cc28:	cmp	sl, #0
   2cc2c:	ldrbne	r0, [r4, #49]	; 0x31
   2cc30:	ubfxne	r0, r0, #2, #1
   2cc34:	moveq	r0, #1
   2cc38:	ldr	r5, [r7]
   2cc3c:	cmp	r5, #0
   2cc40:	beq	2cd6c <__assert_fail@plt+0x1a1b0>
   2cc44:	and	r1, r6, #2048	; 0x800
   2cc48:	str	r1, [sp, #8]
   2cc4c:	eor	r0, r0, #1
   2cc50:	str	r0, [sp, #4]
   2cc54:	mov	r9, #0
   2cc58:	mov	r0, #0
   2cc5c:	str	r0, [sp]
   2cc60:	mov	r6, #0
   2cc64:	mov	r0, r5
   2cc68:	bl	1288c <strlen@plt>
   2cc6c:	mov	r2, r0
   2cc70:	ldr	r0, [sp, #8]
   2cc74:	cmp	r0, #0
   2cc78:	bne	2ccb0 <__assert_fail@plt+0x1a0f4>
   2cc7c:	cmp	r2, #3
   2cc80:	bcc	2ccb0 <__assert_fail@plt+0x1a0f4>
   2cc84:	add	r0, r5, r2
   2cc88:	ldrb	r0, [r0, #-1]
   2cc8c:	cmp	r0, #47	; 0x2f
   2cc90:	bne	2ccb0 <__assert_fail@plt+0x1a0f4>
   2cc94:	sub	r0, r5, #2
   2cc98:	ldrb	r1, [r0, r2]
   2cc9c:	cmp	r1, #47	; 0x2f
   2cca0:	bne	2ccb0 <__assert_fail@plt+0x1a0f4>
   2cca4:	sub	r2, r2, #1
   2cca8:	cmp	r2, #1
   2ccac:	bhi	2cc98 <__assert_fail@plt+0x1a0dc>
   2ccb0:	mov	r0, r4
   2ccb4:	mov	r1, r5
   2ccb8:	bl	2cefc <__assert_fail@plt+0x1a340>
   2ccbc:	cmp	r0, #0
   2ccc0:	beq	2ce1c <__assert_fail@plt+0x1a260>
   2ccc4:	mov	r5, r0
   2ccc8:	str	r8, [r0, #4]
   2cccc:	mov	r0, #0
   2ccd0:	str	r0, [r5, #48]	; 0x30
   2ccd4:	add	r0, r5, #168	; 0xa8
   2ccd8:	str	r0, [r5, #24]
   2ccdc:	clz	r0, r9
   2cce0:	lsr	r0, r0, #5
   2cce4:	ldr	r1, [sp, #4]
   2cce8:	orrs	r0, r1, r0
   2ccec:	bne	2cd18 <__assert_fail@plt+0x1a15c>
   2ccf0:	mov	r0, #11
   2ccf4:	strh	r0, [r5, #56]	; 0x38
   2ccf8:	mov	r0, r5
   2ccfc:	mov	r1, #1
   2cd00:	bl	2cf7c <__assert_fail@plt+0x1a3c0>
   2cd04:	cmp	sl, #0
   2cd08:	beq	2cd34 <__assert_fail@plt+0x1a178>
   2cd0c:	str	r9, [r5, #8]
   2cd10:	mov	r9, r5
   2cd14:	b	2cd50 <__assert_fail@plt+0x1a194>
   2cd18:	mov	r0, r4
   2cd1c:	mov	r1, r5
   2cd20:	mov	r2, #0
   2cd24:	bl	2cfac <__assert_fail@plt+0x1a3f0>
   2cd28:	strh	r0, [r5, #56]	; 0x38
   2cd2c:	cmp	sl, #0
   2cd30:	bne	2cd0c <__assert_fail@plt+0x1a150>
   2cd34:	mov	r0, #0
   2cd38:	str	r0, [r5, #8]
   2cd3c:	cmp	r9, #0
   2cd40:	beq	2cd64 <__assert_fail@plt+0x1a1a8>
   2cd44:	ldr	r0, [sp]
   2cd48:	str	r5, [r0, #8]
   2cd4c:	str	r5, [sp]
   2cd50:	add	r6, r6, #1
   2cd54:	ldr	r5, [r7, #4]!
   2cd58:	cmp	r5, #0
   2cd5c:	bne	2cc64 <__assert_fail@plt+0x1a0a8>
   2cd60:	b	2cd74 <__assert_fail@plt+0x1a1b8>
   2cd64:	str	r5, [sp]
   2cd68:	b	2cd10 <__assert_fail@plt+0x1a154>
   2cd6c:	mov	r9, #0
   2cd70:	b	2cd98 <__assert_fail@plt+0x1a1dc>
   2cd74:	cmp	sl, #0
   2cd78:	beq	2cd98 <__assert_fail@plt+0x1a1dc>
   2cd7c:	cmp	r6, #2
   2cd80:	bcc	2cd98 <__assert_fail@plt+0x1a1dc>
   2cd84:	mov	r0, r4
   2cd88:	mov	r1, r9
   2cd8c:	mov	r2, r6
   2cd90:	bl	2d114 <__assert_fail@plt+0x1a558>
   2cd94:	mov	r9, r0
   2cd98:	movw	r1, #2143	; 0x85f
   2cd9c:	movt	r1, #4
   2cda0:	mov	r0, r4
   2cda4:	mov	r2, #0
   2cda8:	bl	2cefc <__assert_fail@plt+0x1a340>
   2cdac:	str	r0, [r4]
   2cdb0:	cmp	r0, #0
   2cdb4:	beq	2ce1c <__assert_fail@plt+0x1a260>
   2cdb8:	mov	r1, #9
   2cdbc:	strh	r1, [r0, #56]	; 0x38
   2cdc0:	str	r9, [r0, #8]
   2cdc4:	mov	r1, #1
   2cdc8:	str	r1, [r0, #48]	; 0x30
   2cdcc:	mov	r0, r4
   2cdd0:	bl	2d1f4 <__assert_fail@plt+0x1a638>
   2cdd4:	cmp	r0, #0
   2cdd8:	beq	2ce1c <__assert_fail@plt+0x1a260>
   2cddc:	ldrh	r0, [r4, #48]	; 0x30
   2cde0:	tst	r0, #516	; 0x204
   2cde4:	bne	2ce0c <__assert_fail@plt+0x1a250>
   2cde8:	movw	r1, #64308	; 0xfb34
   2cdec:	movt	r1, #3
   2cdf0:	mov	r0, r4
   2cdf4:	bl	2d280 <__assert_fail@plt+0x1a6c4>
   2cdf8:	str	r0, [r4, #28]
   2cdfc:	cmn	r0, #1
   2ce00:	ldrle	r0, [r4, #48]	; 0x30
   2ce04:	orrle	r0, r0, #4
   2ce08:	strle	r0, [r4, #48]	; 0x30
   2ce0c:	add	r0, r4, #60	; 0x3c
   2ce10:	mvn	r1, #0
   2ce14:	bl	3ddd4 <__assert_fail@plt+0x2b218>
   2ce18:	b	2cb80 <__assert_fail@plt+0x19fc4>
   2ce1c:	mov	r0, r9
   2ce20:	bl	2d2b0 <__assert_fail@plt+0x1a6f4>
   2ce24:	mov	r0, r8
   2ce28:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2ce2c:	ldr	r0, [r4, #24]
   2ce30:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2ce34:	mov	r0, r4
   2ce38:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2ce3c:	b	2cb7c <__assert_fail@plt+0x19fc0>
   2ce40:	mov	r1, r0
   2ce44:	ldr	r0, [r0]
   2ce48:	cmp	r0, #0
   2ce4c:	moveq	r0, #1
   2ce50:	bxeq	lr
   2ce54:	push	{r4, r5, fp, lr}
   2ce58:	add	fp, sp, #8
   2ce5c:	add	r5, r1, #4
   2ce60:	mov	r4, #0
   2ce64:	bl	1288c <strlen@plt>
   2ce68:	cmp	r0, r4
   2ce6c:	movhi	r4, r0
   2ce70:	ldr	r0, [r5], #4
   2ce74:	cmp	r0, #0
   2ce78:	bne	2ce64 <__assert_fail@plt+0x1a2a8>
   2ce7c:	add	r0, r4, #1
   2ce80:	pop	{r4, r5, fp, pc}
   2ce84:	push	{r4, r5, fp, lr}
   2ce88:	add	fp, sp, #8
   2ce8c:	mov	r4, r0
   2ce90:	ldr	r0, [r0, #36]	; 0x24
   2ce94:	add	r1, r1, #256	; 0x100
   2ce98:	adds	r1, r1, r0
   2ce9c:	bcc	2cec4 <__assert_fail@plt+0x1a308>
   2cea0:	ldr	r0, [r4, #24]
   2cea4:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2cea8:	mov	r5, #0
   2ceac:	str	r5, [r4, #24]
   2ceb0:	bl	128d4 <__errno_location@plt>
   2ceb4:	mov	r1, #36	; 0x24
   2ceb8:	str	r1, [r0]
   2cebc:	mov	r0, r5
   2cec0:	pop	{r4, r5, fp, pc}
   2cec4:	str	r1, [r4, #36]	; 0x24
   2cec8:	ldr	r0, [r4, #24]
   2cecc:	bl	2f804 <__assert_fail@plt+0x1cc48>
   2ced0:	cmp	r0, #0
   2ced4:	strne	r0, [r4, #24]
   2ced8:	movne	r5, #1
   2cedc:	movne	r0, r5
   2cee0:	popne	{r4, r5, fp, pc}
   2cee4:	ldr	r0, [r4, #24]
   2cee8:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2ceec:	mov	r5, #0
   2cef0:	str	r5, [r4, #24]
   2cef4:	mov	r0, r5
   2cef8:	pop	{r4, r5, fp, pc}
   2cefc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2cf00:	add	fp, sp, #24
   2cf04:	mov	r6, r2
   2cf08:	mov	r8, r1
   2cf0c:	mov	r5, r0
   2cf10:	add	r0, r2, #176	; 0xb0
   2cf14:	bic	r0, r0, #7
   2cf18:	bl	2ed04 <__assert_fail@plt+0x1c148>
   2cf1c:	cmp	r0, #0
   2cf20:	moveq	r4, #0
   2cf24:	moveq	r0, r4
   2cf28:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2cf2c:	mov	r4, r0
   2cf30:	add	r7, r0, #168	; 0xa8
   2cf34:	mov	r0, r7
   2cf38:	mov	r1, r8
   2cf3c:	mov	r2, r6
   2cf40:	bl	125c8 <memcpy@plt>
   2cf44:	mov	r0, #0
   2cf48:	strb	r0, [r7, r6]
   2cf4c:	str	r6, [r4, #52]	; 0x34
   2cf50:	str	r5, [r4, #44]	; 0x2c
   2cf54:	ldr	r1, [r5, #24]
   2cf58:	mov	r2, #196608	; 0x30000
   2cf5c:	str	r2, [r4, #58]	; 0x3a
   2cf60:	str	r0, [r4, #12]
   2cf64:	str	r0, [r4, #16]
   2cf68:	str	r0, [r4, #20]
   2cf6c:	str	r1, [r4, #28]
   2cf70:	str	r0, [r4, #32]
   2cf74:	mov	r0, r4
   2cf78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2cf7c:	ldrh	r2, [r0, #56]	; 0x38
   2cf80:	cmp	r2, #11
   2cf84:	bne	2cfa0 <__assert_fail@plt+0x1a3e4>
   2cf88:	mov	r3, #0
   2cf8c:	mov	r2, #1
   2cf90:	cmp	r1, #0
   2cf94:	movwne	r2, #2
   2cf98:	strd	r2, [r0, #112]	; 0x70
   2cf9c:	bx	lr
   2cfa0:	push	{fp, lr}
   2cfa4:	mov	fp, sp
   2cfa8:	bl	12b68 <abort@plt>
   2cfac:	push	{r4, r5, r6, sl, fp, lr}
   2cfb0:	add	fp, sp, #16
   2cfb4:	mov	r4, r1
   2cfb8:	ldr	r1, [r1, #48]	; 0x30
   2cfbc:	cmp	r1, #0
   2cfc0:	ldrbeq	r1, [r0, #48]	; 0x30
   2cfc4:	andeq	r1, r1, #1
   2cfc8:	orreq	r2, r1, r2
   2cfcc:	add	r5, r4, #64	; 0x40
   2cfd0:	cmp	r2, #0
   2cfd4:	ldreq	r1, [r0, #48]	; 0x30
   2cfd8:	andseq	r1, r1, #2
   2cfdc:	beq	2d02c <__assert_fail@plt+0x1a470>
   2cfe0:	ldr	r0, [r4, #24]
   2cfe4:	mov	r1, r5
   2cfe8:	bl	3e8e4 <__assert_fail@plt+0x2bd28>
   2cfec:	cmp	r0, #0
   2cff0:	beq	2d0a0 <__assert_fail@plt+0x1a4e4>
   2cff4:	bl	128d4 <__errno_location@plt>
   2cff8:	mov	r6, r0
   2cffc:	ldr	r0, [r0]
   2d000:	cmp	r0, #2
   2d004:	bne	2d050 <__assert_fail@plt+0x1a494>
   2d008:	ldr	r0, [r4, #24]
   2d00c:	mov	r1, r5
   2d010:	bl	3e904 <__assert_fail@plt+0x2bd48>
   2d014:	cmp	r0, #0
   2d018:	bne	2d050 <__assert_fail@plt+0x1a494>
   2d01c:	mov	r0, #0
   2d020:	str	r0, [r6]
   2d024:	mov	r0, #13
   2d028:	pop	{r4, r5, r6, sl, fp, pc}
   2d02c:	ldr	r1, [r4, #24]
   2d030:	ldr	r0, [r0, #32]
   2d034:	mov	r2, r5
   2d038:	mov	r3, #256	; 0x100
   2d03c:	bl	3e914 <__assert_fail@plt+0x2bd58>
   2d040:	cmp	r0, #0
   2d044:	beq	2d0a0 <__assert_fail@plt+0x1a4e4>
   2d048:	bl	128d4 <__errno_location@plt>
   2d04c:	mov	r6, r0
   2d050:	ldr	r0, [r6]
   2d054:	str	r0, [r4, #32]
   2d058:	mov	r0, #0
   2d05c:	vmov.i32	q8, #0	; 0x00000000
   2d060:	str	r0, [r5, #96]	; 0x60
   2d064:	add	r1, r5, #80	; 0x50
   2d068:	vst1.64	{d16-d17}, [r1]
   2d06c:	add	r1, r5, #64	; 0x40
   2d070:	vst1.64	{d16-d17}, [r1]
   2d074:	add	r1, r5, #48	; 0x30
   2d078:	vst1.64	{d16-d17}, [r1]
   2d07c:	add	r1, r5, #32
   2d080:	vst1.64	{d16-d17}, [r1]
   2d084:	add	r1, r5, #16
   2d088:	vst1.64	{d16-d17}, [r1]
   2d08c:	mov	r1, #100	; 0x64
   2d090:	vst1.64	{d16-d17}, [r5], r1
   2d094:	str	r0, [r5]
   2d098:	mov	r0, #10
   2d09c:	pop	{r4, r5, r6, sl, fp, pc}
   2d0a0:	ldr	r0, [r4, #80]	; 0x50
   2d0a4:	and	r0, r0, #61440	; 0xf000
   2d0a8:	cmp	r0, #40960	; 0xa000
   2d0ac:	moveq	r0, #12
   2d0b0:	popeq	{r4, r5, r6, sl, fp, pc}
   2d0b4:	cmp	r0, #32768	; 0x8000
   2d0b8:	moveq	r0, #8
   2d0bc:	popeq	{r4, r5, r6, sl, fp, pc}
   2d0c0:	cmp	r0, #16384	; 0x4000
   2d0c4:	bne	2d0f8 <__assert_fail@plt+0x1a53c>
   2d0c8:	ldrb	r1, [r4, #168]	; 0xa8
   2d0cc:	mov	r0, #1
   2d0d0:	cmp	r1, #46	; 0x2e
   2d0d4:	popne	{r4, r5, r6, sl, fp, pc}
   2d0d8:	ldrb	r1, [r4, #169]	; 0xa9
   2d0dc:	cmp	r1, #0
   2d0e0:	beq	2d100 <__assert_fail@plt+0x1a544>
   2d0e4:	cmp	r1, #46	; 0x2e
   2d0e8:	ldrbeq	r1, [r4, #170]	; 0xaa
   2d0ec:	cmpeq	r1, #0
   2d0f0:	beq	2d100 <__assert_fail@plt+0x1a544>
   2d0f4:	pop	{r4, r5, r6, sl, fp, pc}
   2d0f8:	mov	r0, #3
   2d0fc:	pop	{r4, r5, r6, sl, fp, pc}
   2d100:	ldr	r1, [r4, #48]	; 0x30
   2d104:	mov	r0, #5
   2d108:	cmp	r1, #0
   2d10c:	movweq	r0, #1
   2d110:	pop	{r4, r5, r6, sl, fp, pc}
   2d114:	push	{r4, r5, r6, r7, fp, lr}
   2d118:	add	fp, sp, #16
   2d11c:	mov	r6, r2
   2d120:	mov	r4, r1
   2d124:	mov	r5, r0
   2d128:	ldr	r7, [r0, #44]	; 0x2c
   2d12c:	ldr	r0, [r0, #40]	; 0x28
   2d130:	cmp	r0, r2
   2d134:	bcs	2d160 <__assert_fail@plt+0x1a5a4>
   2d138:	add	r1, r6, #40	; 0x28
   2d13c:	str	r1, [r5, #40]	; 0x28
   2d140:	cmn	r1, #-1073741823	; 0xc0000001
   2d144:	bhi	2d1d8 <__assert_fail@plt+0x1a61c>
   2d148:	ldr	r0, [r5, #8]
   2d14c:	lsl	r1, r1, #2
   2d150:	bl	2f804 <__assert_fail@plt+0x1cc48>
   2d154:	cmp	r0, #0
   2d158:	beq	2d1d8 <__assert_fail@plt+0x1a61c>
   2d15c:	str	r0, [r5, #8]
   2d160:	cmp	r4, #0
   2d164:	beq	2d17c <__assert_fail@plt+0x1a5c0>
   2d168:	ldr	r0, [r5, #8]
   2d16c:	str	r4, [r0], #4
   2d170:	ldr	r4, [r4, #8]
   2d174:	cmp	r4, #0
   2d178:	bne	2d16c <__assert_fail@plt+0x1a5b0>
   2d17c:	ldr	r0, [r5, #8]
   2d180:	mov	r1, r6
   2d184:	mov	r2, #4
   2d188:	mov	r3, r7
   2d18c:	bl	12ac0 <qsort@plt>
   2d190:	subs	r1, r6, #1
   2d194:	ldr	r0, [r5, #8]
   2d198:	ldr	r4, [r0]
   2d19c:	beq	2d1c4 <__assert_fail@plt+0x1a608>
   2d1a0:	add	r2, r0, #4
   2d1a4:	rsb	r3, r6, #1
   2d1a8:	ldr	r7, [r2, #-4]
   2d1ac:	ldr	r6, [r2]
   2d1b0:	str	r6, [r7, #8]
   2d1b4:	add	r2, r2, #4
   2d1b8:	adds	r3, r3, #1
   2d1bc:	bne	2d1a8 <__assert_fail@plt+0x1a5ec>
   2d1c0:	add	r0, r0, r1, lsl #2
   2d1c4:	ldr	r0, [r0]
   2d1c8:	mov	r1, #0
   2d1cc:	str	r1, [r0, #8]
   2d1d0:	mov	r0, r4
   2d1d4:	pop	{r4, r5, r6, r7, fp, pc}
   2d1d8:	ldr	r0, [r5, #8]
   2d1dc:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2d1e0:	mov	r0, #0
   2d1e4:	str	r0, [r5, #40]	; 0x28
   2d1e8:	str	r0, [r5, #8]
   2d1ec:	mov	r0, r4
   2d1f0:	pop	{r4, r5, r6, r7, fp, pc}
   2d1f4:	push	{r4, r5, fp, lr}
   2d1f8:	add	fp, sp, #8
   2d1fc:	sub	sp, sp, #8
   2d200:	mov	r4, r0
   2d204:	ldrh	r0, [r0, #48]	; 0x30
   2d208:	movw	r1, #258	; 0x102
   2d20c:	tst	r0, r1
   2d210:	beq	2d250 <__assert_fail@plt+0x1a694>
   2d214:	movw	r0, #51832	; 0xca78
   2d218:	movt	r0, #2
   2d21c:	str	r0, [sp]
   2d220:	mov	r5, #0
   2d224:	movw	r2, #59620	; 0xe8e4
   2d228:	movt	r2, #2
   2d22c:	movw	r3, #59652	; 0xe904
   2d230:	movt	r3, #2
   2d234:	mov	r0, #31
   2d238:	mov	r1, #0
   2d23c:	bl	226a8 <__assert_fail@plt+0xfaec>
   2d240:	str	r0, [r4, #56]	; 0x38
   2d244:	cmp	r0, #0
   2d248:	movne	r5, #1
   2d24c:	b	2d274 <__assert_fail@plt+0x1a6b8>
   2d250:	mov	r0, #32
   2d254:	bl	2ed04 <__assert_fail@plt+0x1c148>
   2d258:	str	r0, [r4, #56]	; 0x38
   2d25c:	cmp	r0, #0
   2d260:	beq	2d270 <__assert_fail@plt+0x1a6b4>
   2d264:	bl	3db78 <__assert_fail@plt+0x2afbc>
   2d268:	mov	r5, #1
   2d26c:	b	2d274 <__assert_fail@plt+0x1a6b8>
   2d270:	mov	r5, #0
   2d274:	mov	r0, r5
   2d278:	sub	sp, fp, #8
   2d27c:	pop	{r4, r5, fp, pc}
   2d280:	ldr	r3, [r0, #48]	; 0x30
   2d284:	mov	r2, #32768	; 0x8000
   2d288:	and	r2, r2, r3, lsl #11
   2d28c:	orr	r2, r2, #18688	; 0x4900
   2d290:	orr	r2, r2, #524288	; 0x80000
   2d294:	tst	r3, #512	; 0x200
   2d298:	bne	2d2a8 <__assert_fail@plt+0x1a6ec>
   2d29c:	mov	r0, r1
   2d2a0:	mov	r1, r2
   2d2a4:	b	21ff8 <__assert_fail@plt+0xf43c>
   2d2a8:	ldr	r0, [r0, #32]
   2d2ac:	b	25568 <__assert_fail@plt+0x129ac>
   2d2b0:	push	{r4, r6, r7, sl, fp, lr}
   2d2b4:	add	fp, sp, #16
   2d2b8:	cmp	r0, #0
   2d2bc:	popeq	{r4, r6, r7, sl, fp, pc}
   2d2c0:	mov	r4, r0
   2d2c4:	ldrd	r6, [r4, #8]
   2d2c8:	cmp	r7, #0
   2d2cc:	beq	2d2d8 <__assert_fail@plt+0x1a71c>
   2d2d0:	mov	r0, r7
   2d2d4:	bl	12b8c <closedir@plt>
   2d2d8:	mov	r0, r4
   2d2dc:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2d2e0:	cmp	r6, #0
   2d2e4:	mov	r4, r6
   2d2e8:	bne	2d2c4 <__assert_fail@plt+0x1a708>
   2d2ec:	pop	{r4, r6, r7, sl, fp, pc}
   2d2f0:	push	{r4, r5, fp, lr}
   2d2f4:	add	fp, sp, #8
   2d2f8:	mov	r4, r0
   2d2fc:	ldr	r0, [r0]
   2d300:	cmp	r0, #0
   2d304:	beq	2d344 <__assert_fail@plt+0x1a788>
   2d308:	ldr	r1, [r0, #48]	; 0x30
   2d30c:	cmp	r1, #0
   2d310:	blt	2d338 <__assert_fail@plt+0x1a77c>
   2d314:	ldr	r5, [r0, #8]
   2d318:	cmp	r5, #0
   2d31c:	ldreq	r5, [r0, #4]
   2d320:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2d324:	ldr	r0, [r5, #48]	; 0x30
   2d328:	cmn	r0, #1
   2d32c:	mov	r0, r5
   2d330:	bgt	2d314 <__assert_fail@plt+0x1a758>
   2d334:	b	2d33c <__assert_fail@plt+0x1a780>
   2d338:	mov	r5, r0
   2d33c:	mov	r0, r5
   2d340:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2d344:	ldr	r0, [r4, #4]
   2d348:	cmp	r0, #0
   2d34c:	blne	2d2b0 <__assert_fail@plt+0x1a6f4>
   2d350:	ldr	r0, [r4, #8]
   2d354:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2d358:	ldr	r0, [r4, #24]
   2d35c:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2d360:	ldr	r0, [r4, #48]	; 0x30
   2d364:	tst	r0, #512	; 0x200
   2d368:	bne	2d394 <__assert_fail@plt+0x1a7d8>
   2d36c:	mov	r5, #0
   2d370:	tst	r0, #4
   2d374:	bne	2d3d8 <__assert_fail@plt+0x1a81c>
   2d378:	ldr	r0, [r4, #28]
   2d37c:	bl	12aa8 <fchdir@plt>
   2d380:	cmp	r0, #0
   2d384:	beq	2d3b4 <__assert_fail@plt+0x1a7f8>
   2d388:	bl	128d4 <__errno_location@plt>
   2d38c:	ldr	r5, [r0]
   2d390:	b	2d3b8 <__assert_fail@plt+0x1a7fc>
   2d394:	ldr	r0, [r4, #32]
   2d398:	mov	r5, #0
   2d39c:	cmp	r0, #0
   2d3a0:	blt	2d3d8 <__assert_fail@plt+0x1a81c>
   2d3a4:	bl	12b74 <close@plt>
   2d3a8:	cmp	r0, #0
   2d3ac:	bne	2d3d0 <__assert_fail@plt+0x1a814>
   2d3b0:	b	2d3d8 <__assert_fail@plt+0x1a81c>
   2d3b4:	mov	r5, #0
   2d3b8:	ldr	r0, [r4, #28]
   2d3bc:	bl	12b74 <close@plt>
   2d3c0:	cmp	r5, #0
   2d3c4:	bne	2d3d8 <__assert_fail@plt+0x1a81c>
   2d3c8:	cmp	r0, #0
   2d3cc:	beq	2d3d8 <__assert_fail@plt+0x1a81c>
   2d3d0:	bl	128d4 <__errno_location@plt>
   2d3d4:	ldr	r5, [r0]
   2d3d8:	add	r0, r4, #60	; 0x3c
   2d3dc:	bl	2d41c <__assert_fail@plt+0x1a860>
   2d3e0:	ldr	r0, [r4, #52]	; 0x34
   2d3e4:	cmp	r0, #0
   2d3e8:	beq	2d3f0 <__assert_fail@plt+0x1a834>
   2d3ec:	bl	2297c <__assert_fail@plt+0xfdc0>
   2d3f0:	mov	r0, r4
   2d3f4:	bl	2d454 <__assert_fail@plt+0x1a898>
   2d3f8:	mov	r0, r4
   2d3fc:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2d400:	cmp	r5, #0
   2d404:	moveq	r0, #0
   2d408:	popeq	{r4, r5, fp, pc}
   2d40c:	bl	128d4 <__errno_location@plt>
   2d410:	str	r5, [r0]
   2d414:	mvn	r0, #0
   2d418:	pop	{r4, r5, fp, pc}
   2d41c:	push	{r4, sl, fp, lr}
   2d420:	add	fp, sp, #8
   2d424:	mov	r4, r0
   2d428:	b	2d430 <__assert_fail@plt+0x1a874>
   2d42c:	mov	r0, r4
   2d430:	bl	3de00 <__assert_fail@plt+0x2b244>
   2d434:	cmp	r0, #0
   2d438:	popne	{r4, sl, fp, pc}
   2d43c:	mov	r0, r4
   2d440:	bl	3de4c <__assert_fail@plt+0x2b290>
   2d444:	cmp	r0, #0
   2d448:	blt	2d42c <__assert_fail@plt+0x1a870>
   2d44c:	bl	12b74 <close@plt>
   2d450:	b	2d42c <__assert_fail@plt+0x1a870>
   2d454:	ldrh	r1, [r0, #48]	; 0x30
   2d458:	movw	r2, #258	; 0x102
   2d45c:	tst	r1, r2
   2d460:	beq	2d474 <__assert_fail@plt+0x1a8b8>
   2d464:	ldr	r0, [r0, #56]	; 0x38
   2d468:	cmp	r0, #0
   2d46c:	bxeq	lr
   2d470:	b	2297c <__assert_fail@plt+0xfdc0>
   2d474:	ldr	r0, [r0, #56]	; 0x38
   2d478:	b	2ca78 <__assert_fail@plt+0x19ebc>
   2d47c:	push	{r4, r5, r6, r7, fp, lr}
   2d480:	add	fp, sp, #16
   2d484:	ldr	r6, [r0]
   2d488:	mov	r5, #0
   2d48c:	cmp	r6, #0
   2d490:	beq	2da28 <__assert_fail@plt+0x1ae6c>
   2d494:	mov	r4, r0
   2d498:	ldr	r1, [r0, #48]	; 0x30
   2d49c:	tst	r1, #8192	; 0x2000
   2d4a0:	bne	2da28 <__assert_fail@plt+0x1ae6c>
   2d4a4:	ldrh	r0, [r6, #60]	; 0x3c
   2d4a8:	mov	r2, #3
   2d4ac:	strh	r2, [r6, #60]	; 0x3c
   2d4b0:	cmp	r0, #2
   2d4b4:	beq	2d4dc <__assert_fail@plt+0x1a920>
   2d4b8:	cmp	r0, #1
   2d4bc:	bne	2d548 <__assert_fail@plt+0x1a98c>
   2d4c0:	mov	r0, r4
   2d4c4:	mov	r1, r6
   2d4c8:	mov	r2, #0
   2d4cc:	bl	2cfac <__assert_fail@plt+0x1a3f0>
   2d4d0:	strh	r0, [r6, #56]	; 0x38
   2d4d4:	mov	r0, r6
   2d4d8:	pop	{r4, r5, r6, r7, fp, pc}
   2d4dc:	ldrh	r2, [r6, #56]	; 0x38
   2d4e0:	movw	r3, #65534	; 0xfffe
   2d4e4:	and	r2, r2, r3
   2d4e8:	cmp	r2, #12
   2d4ec:	bne	2d548 <__assert_fail@plt+0x1a98c>
   2d4f0:	mov	r0, r4
   2d4f4:	mov	r1, r6
   2d4f8:	mov	r2, #1
   2d4fc:	bl	2cfac <__assert_fail@plt+0x1a3f0>
   2d500:	strh	r0, [r6, #56]	; 0x38
   2d504:	cmp	r0, #1
   2d508:	bne	2d610 <__assert_fail@plt+0x1aa54>
   2d50c:	ldrb	r0, [r4, #48]	; 0x30
   2d510:	tst	r0, #4
   2d514:	bne	2d610 <__assert_fail@plt+0x1aa54>
   2d518:	movw	r1, #64308	; 0xfb34
   2d51c:	movt	r1, #3
   2d520:	mov	r0, r4
   2d524:	bl	2d280 <__assert_fail@plt+0x1a6c4>
   2d528:	str	r0, [r6, #36]	; 0x24
   2d52c:	cmn	r0, #1
   2d530:	ble	2d908 <__assert_fail@plt+0x1ad4c>
   2d534:	ldrh	r0, [r6, #58]	; 0x3a
   2d538:	orr	r0, r0, #2
   2d53c:	strh	r0, [r6, #58]	; 0x3a
   2d540:	mov	r5, r6
   2d544:	b	2d7b0 <__assert_fail@plt+0x1abf4>
   2d548:	ldrh	r2, [r6, #56]	; 0x38
   2d54c:	cmp	r2, #1
   2d550:	bne	2d5a4 <__assert_fail@plt+0x1a9e8>
   2d554:	cmp	r0, #4
   2d558:	bne	2d618 <__assert_fail@plt+0x1aa5c>
   2d55c:	ldrb	r0, [r6, #58]	; 0x3a
   2d560:	tst	r0, #2
   2d564:	beq	2d570 <__assert_fail@plt+0x1a9b4>
   2d568:	ldr	r0, [r6, #36]	; 0x24
   2d56c:	bl	12b74 <close@plt>
   2d570:	ldr	r0, [r4, #4]
   2d574:	cmp	r0, #0
   2d578:	beq	2d588 <__assert_fail@plt+0x1a9cc>
   2d57c:	bl	2d2b0 <__assert_fail@plt+0x1a6f4>
   2d580:	mov	r0, #0
   2d584:	str	r0, [r4, #4]
   2d588:	mov	r0, #6
   2d58c:	strh	r0, [r6, #56]	; 0x38
   2d590:	mov	r0, r4
   2d594:	mov	r1, r6
   2d598:	bl	2da34 <__assert_fail@plt+0x1ae78>
   2d59c:	mov	r0, r6
   2d5a0:	pop	{r4, r5, r6, r7, fp, pc}
   2d5a4:	ldr	r5, [r6, #8]
   2d5a8:	cmp	r5, #0
   2d5ac:	beq	2d6b0 <__assert_fail@plt+0x1aaf4>
   2d5b0:	str	r5, [r4]
   2d5b4:	mov	r0, r6
   2d5b8:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2d5bc:	ldr	r0, [r5, #48]	; 0x30
   2d5c0:	cmp	r0, #0
   2d5c4:	beq	2d6fc <__assert_fail@plt+0x1ab40>
   2d5c8:	ldrh	r0, [r5, #60]	; 0x3c
   2d5cc:	cmp	r0, #4
   2d5d0:	mov	r6, r5
   2d5d4:	beq	2d5a4 <__assert_fail@plt+0x1a9e8>
   2d5d8:	cmp	r0, #2
   2d5dc:	bne	2d774 <__assert_fail@plt+0x1abb8>
   2d5e0:	mov	r0, r4
   2d5e4:	mov	r1, r5
   2d5e8:	mov	r2, #1
   2d5ec:	bl	2cfac <__assert_fail@plt+0x1a3f0>
   2d5f0:	strh	r0, [r5, #56]	; 0x38
   2d5f4:	cmp	r0, #1
   2d5f8:	ldrbeq	r0, [r4, #48]	; 0x30
   2d5fc:	tsteq	r0, #4
   2d600:	beq	2d994 <__assert_fail@plt+0x1add8>
   2d604:	mov	r0, #3
   2d608:	strh	r0, [r5, #60]	; 0x3c
   2d60c:	b	2d774 <__assert_fail@plt+0x1abb8>
   2d610:	mov	r5, r6
   2d614:	b	2d7b0 <__assert_fail@plt+0x1abf4>
   2d618:	tst	r1, #64	; 0x40
   2d61c:	beq	2d640 <__assert_fail@plt+0x1aa84>
   2d620:	ldr	r0, [r4, #16]
   2d624:	ldr	r3, [r4, #20]
   2d628:	ldr	r2, [r6, #64]	; 0x40
   2d62c:	ldr	r5, [r6, #68]	; 0x44
   2d630:	eor	r3, r5, r3
   2d634:	eor	r0, r2, r0
   2d638:	orrs	r0, r0, r3
   2d63c:	bne	2d55c <__assert_fail@plt+0x1a9a0>
   2d640:	ldr	r0, [r4, #4]
   2d644:	cmp	r0, #0
   2d648:	beq	2d750 <__assert_fail@plt+0x1ab94>
   2d64c:	tst	r1, #4096	; 0x1000
   2d650:	bne	2d73c <__assert_fail@plt+0x1ab80>
   2d654:	ldr	r3, [r6, #24]
   2d658:	mov	r0, r4
   2d65c:	mov	r1, r6
   2d660:	mvn	r2, #0
   2d664:	bl	2db04 <__assert_fail@plt+0x1af48>
   2d668:	cmp	r0, #0
   2d66c:	beq	2d768 <__assert_fail@plt+0x1abac>
   2d670:	bl	128d4 <__errno_location@plt>
   2d674:	ldr	r0, [r0]
   2d678:	str	r0, [r6, #32]
   2d67c:	ldrh	r0, [r6, #58]	; 0x3a
   2d680:	orr	r0, r0, #1
   2d684:	strh	r0, [r6, #58]	; 0x3a
   2d688:	ldr	r0, [r4, #4]
   2d68c:	cmp	r0, #0
   2d690:	beq	2d768 <__assert_fail@plt+0x1abac>
   2d694:	ldmib	r0, {r1, r2}
   2d698:	ldr	r1, [r1, #24]
   2d69c:	str	r1, [r0, #24]
   2d6a0:	cmp	r2, #0
   2d6a4:	mov	r0, r2
   2d6a8:	bne	2d694 <__assert_fail@plt+0x1aad8>
   2d6ac:	b	2d768 <__assert_fail@plt+0x1abac>
   2d6b0:	ldr	r0, [r6, #4]
   2d6b4:	ldr	r1, [r0, #12]
   2d6b8:	cmp	r1, #0
   2d6bc:	beq	2d86c <__assert_fail@plt+0x1acb0>
   2d6c0:	str	r0, [r4]
   2d6c4:	ldr	r1, [r4, #24]
   2d6c8:	ldr	r0, [r0, #40]	; 0x28
   2d6cc:	mov	r5, #0
   2d6d0:	strb	r5, [r1, r0]
   2d6d4:	mov	r0, r4
   2d6d8:	mov	r1, #3
   2d6dc:	bl	2dce4 <__assert_fail@plt+0x1b128>
   2d6e0:	cmp	r0, #0
   2d6e4:	beq	2d860 <__assert_fail@plt+0x1aca4>
   2d6e8:	mov	r7, r0
   2d6ec:	mov	r0, r6
   2d6f0:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2d6f4:	mov	r5, r7
   2d6f8:	b	2d774 <__assert_fail@plt+0x1abb8>
   2d6fc:	mov	r0, r4
   2d700:	bl	2e550 <__assert_fail@plt+0x1b994>
   2d704:	cmp	r0, #0
   2d708:	beq	2d71c <__assert_fail@plt+0x1ab60>
   2d70c:	ldr	r0, [r4, #48]	; 0x30
   2d710:	orr	r0, r0, #8192	; 0x2000
   2d714:	str	r0, [r4, #48]	; 0x30
   2d718:	b	2d828 <__assert_fail@plt+0x1ac6c>
   2d71c:	mov	r0, r4
   2d720:	bl	2d454 <__assert_fail@plt+0x1a898>
   2d724:	mov	r0, r4
   2d728:	mov	r1, r5
   2d72c:	bl	2e5ac <__assert_fail@plt+0x1b9f0>
   2d730:	mov	r0, r4
   2d734:	bl	2d1f4 <__assert_fail@plt+0x1a638>
   2d738:	b	2d7b0 <__assert_fail@plt+0x1abf4>
   2d73c:	bic	r1, r1, #4096	; 0x1000
   2d740:	str	r1, [r4, #48]	; 0x30
   2d744:	bl	2d2b0 <__assert_fail@plt+0x1a6f4>
   2d748:	mov	r0, #0
   2d74c:	str	r0, [r4, #4]
   2d750:	mov	r0, r4
   2d754:	mov	r1, #3
   2d758:	bl	2dce4 <__assert_fail@plt+0x1b128>
   2d75c:	str	r0, [r4, #4]
   2d760:	cmp	r0, #0
   2d764:	beq	2d834 <__assert_fail@plt+0x1ac78>
   2d768:	ldr	r5, [r4, #4]
   2d76c:	mov	r0, #0
   2d770:	str	r0, [r4, #4]
   2d774:	ldr	r0, [r5, #4]
   2d778:	ldr	r1, [r0, #28]
   2d77c:	ldr	r0, [r0, #40]	; 0x28
   2d780:	sub	r2, r0, #1
   2d784:	ldrb	r1, [r1, r2]
   2d788:	cmp	r1, #47	; 0x2f
   2d78c:	moveq	r0, r2
   2d790:	ldr	r1, [r4, #24]
   2d794:	mov	r2, #47	; 0x2f
   2d798:	strb	r2, [r1, r0]!
   2d79c:	add	r0, r1, #1
   2d7a0:	add	r1, r5, #168	; 0xa8
   2d7a4:	ldr	r2, [r5, #52]	; 0x34
   2d7a8:	add	r2, r2, #1
   2d7ac:	bl	1255c <memmove@plt>
   2d7b0:	str	r5, [r4]
   2d7b4:	ldrh	r0, [r5, #56]	; 0x38
   2d7b8:	cmp	r0, #11
   2d7bc:	bne	2d7f0 <__assert_fail@plt+0x1ac34>
   2d7c0:	ldrd	r0, [r5, #112]	; 0x70
   2d7c4:	eor	r2, r0, #1
   2d7c8:	orrs	r2, r2, r1
   2d7cc:	beq	2da28 <__assert_fail@plt+0x1ae6c>
   2d7d0:	eor	r0, r0, #2
   2d7d4:	orrs	r0, r0, r1
   2d7d8:	bne	2da30 <__assert_fail@plt+0x1ae74>
   2d7dc:	mov	r0, r4
   2d7e0:	mov	r1, r5
   2d7e4:	mov	r2, #0
   2d7e8:	bl	2cfac <__assert_fail@plt+0x1a3f0>
   2d7ec:	strh	r0, [r5, #56]	; 0x38
   2d7f0:	cmp	r0, #1
   2d7f4:	bne	2da28 <__assert_fail@plt+0x1ae6c>
   2d7f8:	ldr	r0, [r5, #48]	; 0x30
   2d7fc:	cmp	r0, #0
   2d800:	ldrdeq	r0, [r5, #64]	; 0x40
   2d804:	strdeq	r0, [r4, #16]
   2d808:	mov	r0, r4
   2d80c:	mov	r1, r5
   2d810:	bl	2e634 <__assert_fail@plt+0x1ba78>
   2d814:	cmp	r0, #0
   2d818:	bne	2da28 <__assert_fail@plt+0x1ae6c>
   2d81c:	bl	128d4 <__errno_location@plt>
   2d820:	mov	r1, #12
   2d824:	str	r1, [r0]
   2d828:	mov	r5, #0
   2d82c:	mov	r0, r5
   2d830:	pop	{r4, r5, r6, r7, fp, pc}
   2d834:	ldrb	r0, [r4, #49]	; 0x31
   2d838:	tst	r0, #32
   2d83c:	mov	r5, #0
   2d840:	bne	2da28 <__assert_fail@plt+0x1ae6c>
   2d844:	ldr	r0, [r6, #32]
   2d848:	cmp	r0, #0
   2d84c:	ldrhne	r0, [r6, #56]	; 0x38
   2d850:	cmpne	r0, #4
   2d854:	beq	2d590 <__assert_fail@plt+0x1a9d4>
   2d858:	mov	r0, #7
   2d85c:	b	2d58c <__assert_fail@plt+0x1a9d0>
   2d860:	ldrb	r0, [r4, #49]	; 0x31
   2d864:	tst	r0, #32
   2d868:	bne	2da28 <__assert_fail@plt+0x1ae6c>
   2d86c:	ldr	r5, [r6, #4]
   2d870:	str	r5, [r4]
   2d874:	mov	r0, r6
   2d878:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2d87c:	ldr	r0, [r5, #48]	; 0x30
   2d880:	cmn	r0, #1
   2d884:	beq	2d8e8 <__assert_fail@plt+0x1ad2c>
   2d888:	ldrh	r0, [r5, #56]	; 0x38
   2d88c:	cmp	r0, #11
   2d890:	beq	2da30 <__assert_fail@plt+0x1ae74>
   2d894:	ldr	r0, [r5, #40]	; 0x28
   2d898:	ldr	r1, [r4, #24]
   2d89c:	mov	r2, #0
   2d8a0:	strb	r2, [r1, r0]
   2d8a4:	ldr	r0, [r5, #48]	; 0x30
   2d8a8:	cmp	r0, #0
   2d8ac:	beq	2d924 <__assert_fail@plt+0x1ad68>
   2d8b0:	ldrh	r0, [r5, #58]	; 0x3a
   2d8b4:	tst	r0, #2
   2d8b8:	bne	2d950 <__assert_fail@plt+0x1ad94>
   2d8bc:	tst	r0, #1
   2d8c0:	bne	2d9ec <__assert_fail@plt+0x1ae30>
   2d8c4:	ldr	r1, [r5, #4]
   2d8c8:	movw	r3, #18473	; 0x4829
   2d8cc:	movt	r3, #4
   2d8d0:	mov	r0, r4
   2d8d4:	mvn	r2, #0
   2d8d8:	bl	2db04 <__assert_fail@plt+0x1af48>
   2d8dc:	cmp	r0, #0
   2d8e0:	bne	2d934 <__assert_fail@plt+0x1ad78>
   2d8e4:	b	2d9ec <__assert_fail@plt+0x1ae30>
   2d8e8:	mov	r0, r5
   2d8ec:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2d8f0:	bl	128d4 <__errno_location@plt>
   2d8f4:	mov	r5, #0
   2d8f8:	str	r5, [r0]
   2d8fc:	str	r5, [r4]
   2d900:	mov	r0, r5
   2d904:	pop	{r4, r5, r6, r7, fp, pc}
   2d908:	bl	128d4 <__errno_location@plt>
   2d90c:	ldr	r0, [r0]
   2d910:	mov	r1, #7
   2d914:	strh	r1, [r6, #56]	; 0x38
   2d918:	str	r0, [r6, #32]
   2d91c:	mov	r5, r6
   2d920:	b	2d7b0 <__assert_fail@plt+0x1abf4>
   2d924:	mov	r0, r4
   2d928:	bl	2e550 <__assert_fail@plt+0x1b994>
   2d92c:	cmp	r0, #0
   2d930:	beq	2d9ec <__assert_fail@plt+0x1ae30>
   2d934:	bl	128d4 <__errno_location@plt>
   2d938:	ldr	r0, [r0]
   2d93c:	str	r0, [r5, #32]
   2d940:	ldr	r0, [r4, #48]	; 0x30
   2d944:	orr	r0, r0, #8192	; 0x2000
   2d948:	str	r0, [r4, #48]	; 0x30
   2d94c:	b	2d9ec <__assert_fail@plt+0x1ae30>
   2d950:	ldr	r0, [r4, #48]	; 0x30
   2d954:	tst	r0, #4
   2d958:	bne	2d9e4 <__assert_fail@plt+0x1ae28>
   2d95c:	ldr	r1, [r5, #36]	; 0x24
   2d960:	tst	r0, #512	; 0x200
   2d964:	bne	2d9d8 <__assert_fail@plt+0x1ae1c>
   2d968:	mov	r0, r1
   2d96c:	bl	12aa8 <fchdir@plt>
   2d970:	cmp	r0, #0
   2d974:	beq	2d9e4 <__assert_fail@plt+0x1ae28>
   2d978:	bl	128d4 <__errno_location@plt>
   2d97c:	ldr	r0, [r0]
   2d980:	str	r0, [r5, #32]
   2d984:	ldr	r0, [r4, #48]	; 0x30
   2d988:	orr	r0, r0, #8192	; 0x2000
   2d98c:	str	r0, [r4, #48]	; 0x30
   2d990:	b	2d9e4 <__assert_fail@plt+0x1ae28>
   2d994:	movw	r1, #64308	; 0xfb34
   2d998:	movt	r1, #3
   2d99c:	mov	r0, r4
   2d9a0:	bl	2d280 <__assert_fail@plt+0x1a6c4>
   2d9a4:	str	r0, [r5, #36]	; 0x24
   2d9a8:	cmn	r0, #1
   2d9ac:	ble	2d9c0 <__assert_fail@plt+0x1ae04>
   2d9b0:	ldrh	r0, [r5, #58]	; 0x3a
   2d9b4:	orr	r0, r0, #2
   2d9b8:	strh	r0, [r5, #58]	; 0x3a
   2d9bc:	b	2d604 <__assert_fail@plt+0x1aa48>
   2d9c0:	bl	128d4 <__errno_location@plt>
   2d9c4:	ldr	r0, [r0]
   2d9c8:	mov	r1, #7
   2d9cc:	strh	r1, [r5, #56]	; 0x38
   2d9d0:	str	r0, [r5, #32]
   2d9d4:	b	2d604 <__assert_fail@plt+0x1aa48>
   2d9d8:	mov	r0, r4
   2d9dc:	mov	r2, #1
   2d9e0:	bl	2e6ec <__assert_fail@plt+0x1bb30>
   2d9e4:	ldr	r0, [r5, #36]	; 0x24
   2d9e8:	bl	12b74 <close@plt>
   2d9ec:	ldrh	r0, [r5, #56]	; 0x38
   2d9f0:	cmp	r0, #2
   2d9f4:	beq	2da1c <__assert_fail@plt+0x1ae60>
   2d9f8:	ldr	r0, [r5, #32]
   2d9fc:	mov	r1, #7
   2da00:	cmp	r0, #0
   2da04:	movweq	r1, #6
   2da08:	strh	r1, [r5, #56]	; 0x38
   2da0c:	bne	2da1c <__assert_fail@plt+0x1ae60>
   2da10:	mov	r0, r4
   2da14:	mov	r1, r5
   2da18:	bl	2da34 <__assert_fail@plt+0x1ae78>
   2da1c:	ldrb	r0, [r4, #49]	; 0x31
   2da20:	tst	r0, #32
   2da24:	movne	r5, #0
   2da28:	mov	r0, r5
   2da2c:	pop	{r4, r5, r6, r7, fp, pc}
   2da30:	bl	12b68 <abort@plt>
   2da34:	push	{r4, r5, r6, r7, fp, lr}
   2da38:	add	fp, sp, #16
   2da3c:	sub	sp, sp, #24
   2da40:	add	lr, r1, #64	; 0x40
   2da44:	ldrh	r2, [r0, #48]	; 0x30
   2da48:	movw	r3, #258	; 0x102
   2da4c:	tst	r2, r3
   2da50:	beq	2da88 <__assert_fail@plt+0x1aecc>
   2da54:	ldrd	r2, [lr]
   2da58:	stm	sp, {r2, r3}
   2da5c:	ldrd	r2, [r1, #160]	; 0xa0
   2da60:	str	r3, [sp, #12]
   2da64:	str	r2, [sp, #8]
   2da68:	ldr	r0, [r0, #56]	; 0x38
   2da6c:	mov	r1, sp
   2da70:	bl	22f78 <__assert_fail@plt+0x103bc>
   2da74:	cmp	r0, #0
   2da78:	beq	2db00 <__assert_fail@plt+0x1af44>
   2da7c:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2da80:	sub	sp, fp, #16
   2da84:	pop	{r4, r5, r6, r7, fp, pc}
   2da88:	ldr	r2, [r1, #4]
   2da8c:	cmp	r2, #0
   2da90:	beq	2daf8 <__assert_fail@plt+0x1af3c>
   2da94:	ldr	r3, [r2, #48]	; 0x30
   2da98:	cmp	r3, #0
   2da9c:	blt	2daf8 <__assert_fail@plt+0x1af3c>
   2daa0:	ldr	ip, [r0, #56]	; 0x38
   2daa4:	ldrd	r4, [ip, #16]
   2daa8:	orrs	r3, r4, r5
   2daac:	beq	2db00 <__assert_fail@plt+0x1af44>
   2dab0:	ldrd	r4, [r1, #160]	; 0xa0
   2dab4:	ldrd	r6, [ip]
   2dab8:	eor	r1, r7, r5
   2dabc:	eor	r3, r6, r4
   2dac0:	orrs	r1, r3, r1
   2dac4:	bne	2daf8 <__assert_fail@plt+0x1af3c>
   2dac8:	ldrd	r4, [lr]
   2dacc:	ldr	r1, [ip, #8]!
   2dad0:	eor	r1, r1, r4
   2dad4:	ldr	r3, [ip, #4]
   2dad8:	eor	r3, r3, r5
   2dadc:	orrs	r1, r1, r3
   2dae0:	bne	2daf8 <__assert_fail@plt+0x1af3c>
   2dae4:	ldrd	r4, [r2, #64]	; 0x40
   2dae8:	strd	r4, [ip]
   2daec:	ldr	r0, [r0, #56]	; 0x38
   2daf0:	ldrd	r2, [r2, #160]	; 0xa0
   2daf4:	strd	r2, [r0]
   2daf8:	sub	sp, fp, #16
   2dafc:	pop	{r4, r5, r6, r7, fp, pc}
   2db00:	bl	12b68 <abort@plt>
   2db04:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2db08:	add	fp, sp, #24
   2db0c:	sub	sp, sp, #104	; 0x68
   2db10:	mov	r7, r3
   2db14:	mov	r4, r2
   2db18:	mov	r8, r1
   2db1c:	mov	r5, r0
   2db20:	cmp	r3, #0
   2db24:	beq	2db48 <__assert_fail@plt+0x1af8c>
   2db28:	movw	r1, #18473	; 0x4829
   2db2c:	movt	r1, #4
   2db30:	mov	r0, r7
   2db34:	bl	124cc <strcmp@plt>
   2db38:	mov	r6, r0
   2db3c:	cmp	r0, #0
   2db40:	movwne	r6, #1
   2db44:	b	2db4c <__assert_fail@plt+0x1af90>
   2db48:	mov	r6, #1
   2db4c:	ldr	r0, [r5, #48]	; 0x30
   2db50:	tst	r0, #4
   2db54:	bne	2dbac <__assert_fail@plt+0x1aff0>
   2db58:	mov	r9, #0
   2db5c:	cmn	r4, #1
   2db60:	mov	r1, #0
   2db64:	movwgt	r1, #1
   2db68:	orrs	r1, r1, r6
   2db6c:	bne	2dbcc <__assert_fail@plt+0x1b010>
   2db70:	ands	r0, r0, #512	; 0x200
   2db74:	beq	2dbcc <__assert_fail@plt+0x1b010>
   2db78:	add	r4, r5, #60	; 0x3c
   2db7c:	mov	r0, r4
   2db80:	bl	3de00 <__assert_fail@plt+0x2b244>
   2db84:	cmp	r0, #0
   2db88:	bne	2dbd4 <__assert_fail@plt+0x1b018>
   2db8c:	mov	r0, r4
   2db90:	bl	3de4c <__assert_fail@plt+0x2b290>
   2db94:	cmn	r0, #1
   2db98:	ble	2dbd4 <__assert_fail@plt+0x1b018>
   2db9c:	mov	r4, r0
   2dba0:	mov	r9, #0
   2dba4:	mov	r7, #0
   2dba8:	b	2dbf0 <__assert_fail@plt+0x1b034>
   2dbac:	mov	r5, #0
   2dbb0:	cmp	r4, #0
   2dbb4:	blt	2dcd8 <__assert_fail@plt+0x1b11c>
   2dbb8:	ands	r0, r0, #512	; 0x200
   2dbbc:	beq	2dcd8 <__assert_fail@plt+0x1b11c>
   2dbc0:	mov	r0, r4
   2dbc4:	bl	12b74 <close@plt>
   2dbc8:	b	2dcd8 <__assert_fail@plt+0x1b11c>
   2dbcc:	cmn	r4, #1
   2dbd0:	bgt	2dbf0 <__assert_fail@plt+0x1b034>
   2dbd4:	mov	r0, r5
   2dbd8:	mov	r1, r7
   2dbdc:	bl	2d280 <__assert_fail@plt+0x1a6c4>
   2dbe0:	cmp	r0, #0
   2dbe4:	blt	2dc88 <__assert_fail@plt+0x1b0cc>
   2dbe8:	mov	r4, r0
   2dbec:	mov	r9, #1
   2dbf0:	ldrb	r0, [r5, #48]	; 0x30
   2dbf4:	tst	r0, #2
   2dbf8:	bne	2dc1c <__assert_fail@plt+0x1b060>
   2dbfc:	cmp	r7, #0
   2dc00:	beq	2dc64 <__assert_fail@plt+0x1b0a8>
   2dc04:	movw	r1, #18473	; 0x4829
   2dc08:	movt	r1, #4
   2dc0c:	mov	r0, r7
   2dc10:	bl	124cc <strcmp@plt>
   2dc14:	cmp	r0, #0
   2dc18:	bne	2dc64 <__assert_fail@plt+0x1b0a8>
   2dc1c:	mov	r1, sp
   2dc20:	mov	r0, r4
   2dc24:	bl	3e8f4 <__assert_fail@plt+0x2bd38>
   2dc28:	cmp	r0, #0
   2dc2c:	bne	2dcb4 <__assert_fail@plt+0x1b0f8>
   2dc30:	ldrd	r0, [r8, #64]	; 0x40
   2dc34:	ldm	sp, {r2, r3}
   2dc38:	eor	r1, r1, r3
   2dc3c:	eor	r0, r0, r2
   2dc40:	orrs	r0, r0, r1
   2dc44:	bne	2dca8 <__assert_fail@plt+0x1b0ec>
   2dc48:	ldrd	r0, [r8, #160]	; 0xa0
   2dc4c:	ldr	r2, [sp, #96]	; 0x60
   2dc50:	ldr	r3, [sp, #100]	; 0x64
   2dc54:	eor	r1, r1, r3
   2dc58:	eor	r0, r0, r2
   2dc5c:	orrs	r0, r0, r1
   2dc60:	bne	2dca8 <__assert_fail@plt+0x1b0ec>
   2dc64:	ldrb	r0, [r5, #49]	; 0x31
   2dc68:	tst	r0, #2
   2dc6c:	bne	2dc90 <__assert_fail@plt+0x1b0d4>
   2dc70:	mov	r0, r4
   2dc74:	bl	12aa8 <fchdir@plt>
   2dc78:	mov	r5, r0
   2dc7c:	cmp	r9, #0
   2dc80:	bne	2dcc0 <__assert_fail@plt+0x1b104>
   2dc84:	b	2dcd8 <__assert_fail@plt+0x1b11c>
   2dc88:	mvn	r5, #0
   2dc8c:	b	2dcd8 <__assert_fail@plt+0x1b11c>
   2dc90:	mov	r0, r5
   2dc94:	mov	r1, r4
   2dc98:	mov	r2, r6
   2dc9c:	bl	2e6ec <__assert_fail@plt+0x1bb30>
   2dca0:	mov	r5, #0
   2dca4:	b	2dcd8 <__assert_fail@plt+0x1b11c>
   2dca8:	bl	128d4 <__errno_location@plt>
   2dcac:	mov	r1, #2
   2dcb0:	str	r1, [r0]
   2dcb4:	mvn	r5, #0
   2dcb8:	cmp	r9, #0
   2dcbc:	beq	2dcd8 <__assert_fail@plt+0x1b11c>
   2dcc0:	bl	128d4 <__errno_location@plt>
   2dcc4:	mov	r6, r0
   2dcc8:	ldr	r7, [r0]
   2dccc:	mov	r0, r4
   2dcd0:	bl	12b74 <close@plt>
   2dcd4:	str	r7, [r6]
   2dcd8:	mov	r0, r5
   2dcdc:	sub	sp, fp, #24
   2dce0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2dce4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dce8:	add	fp, sp, #28
   2dcec:	sub	sp, sp, #68	; 0x44
   2dcf0:	mov	r4, r1
   2dcf4:	ldr	sl, [r0]
   2dcf8:	ldr	r7, [sl, #12]
   2dcfc:	cmp	r7, #0
   2dd00:	str	r0, [fp, #-36]	; 0xffffffdc
   2dd04:	beq	2e078 <__assert_fail@plt+0x1b4bc>
   2dd08:	mov	r0, r7
   2dd0c:	bl	12a9c <dirfd@plt>
   2dd10:	str	r0, [fp, #-32]	; 0xffffffe0
   2dd14:	cmn	r0, #1
   2dd18:	ble	2e0b0 <__assert_fail@plt+0x1b4f4>
   2dd1c:	ldr	ip, [fp, #-36]	; 0xffffffdc
   2dd20:	mov	r1, ip
   2dd24:	ldr	r0, [r1, #44]!	; 0x2c
   2dd28:	str	r1, [fp, #-44]	; 0xffffffd4
   2dd2c:	mvn	r1, #0
   2dd30:	cmp	r0, #0
   2dd34:	movweq	r1, #34464	; 0x86a0
   2dd38:	movteq	r1, #1
   2dd3c:	str	r1, [sp, #28]
   2dd40:	mov	r0, #1
   2dd44:	str	r0, [sp, #4]
   2dd48:	str	r4, [sp, #8]
   2dd4c:	ldr	r1, [sl, #28]
   2dd50:	ldr	r0, [sl, #40]	; 0x28
   2dd54:	sub	r2, r0, #1
   2dd58:	ldrb	r1, [r1, r2]
   2dd5c:	cmp	r1, #47	; 0x2f
   2dd60:	moveq	r0, r2
   2dd64:	ldrb	r1, [ip, #48]	; 0x30
   2dd68:	mov	r9, #0
   2dd6c:	tst	r1, #4
   2dd70:	mov	r1, #0
   2dd74:	str	r1, [sp, #40]	; 0x28
   2dd78:	beq	2dd90 <__assert_fail@plt+0x1b1d4>
   2dd7c:	ldr	r1, [ip, #24]
   2dd80:	mov	r2, #47	; 0x2f
   2dd84:	strb	r2, [r1, r0]!
   2dd88:	add	r1, r1, #1
   2dd8c:	str	r1, [sp, #40]	; 0x28
   2dd90:	str	r7, [sp, #12]
   2dd94:	add	r1, r0, #1
   2dd98:	ldr	r4, [sl, #12]
   2dd9c:	cmp	r4, #0
   2dda0:	str	r1, [fp, #-40]	; 0xffffffd8
   2dda4:	beq	2e0cc <__assert_fail@plt+0x1b510>
   2dda8:	ldr	r0, [sl, #48]	; 0x30
   2ddac:	add	r0, r0, #1
   2ddb0:	str	r0, [sp, #24]
   2ddb4:	ldr	r0, [ip, #36]	; 0x24
   2ddb8:	sub	r0, r0, r1
   2ddbc:	str	r0, [sp, #44]	; 0x2c
   2ddc0:	mov	r6, #0
   2ddc4:	bl	128d4 <__errno_location@plt>
   2ddc8:	str	r0, [sp, #36]	; 0x24
   2ddcc:	mov	r9, #0
   2ddd0:	mov	r7, #0
   2ddd4:	mov	r0, #0
   2ddd8:	str	r0, [sp, #48]	; 0x30
   2dddc:	mov	r0, #0
   2dde0:	str	r0, [sp, #20]
   2dde4:	mov	r0, #0
   2dde8:	str	r0, [sp, #16]
   2ddec:	str	sl, [sp, #32]
   2ddf0:	ldr	r0, [sp, #36]	; 0x24
   2ddf4:	str	r6, [r0]
   2ddf8:	mov	r0, r4
   2ddfc:	bl	12a6c <readdir64@plt>
   2de00:	cmp	r0, #0
   2de04:	beq	2e304 <__assert_fail@plt+0x1b748>
   2de08:	mov	r8, r0
   2de0c:	mov	r6, r9
   2de10:	ldr	r5, [fp, #-36]	; 0xffffffdc
   2de14:	ldrb	r0, [r5, #48]	; 0x30
   2de18:	tst	r0, #32
   2de1c:	ldrbeq	r0, [r8, #19]
   2de20:	cmpeq	r0, #46	; 0x2e
   2de24:	beq	2decc <__assert_fail@plt+0x1b310>
   2de28:	add	r4, r8, #19
   2de2c:	mov	r0, r4
   2de30:	bl	1288c <strlen@plt>
   2de34:	mov	sl, r0
   2de38:	mov	r0, r5
   2de3c:	mov	r1, r4
   2de40:	mov	r2, sl
   2de44:	bl	2cefc <__assert_fail@plt+0x1a340>
   2de48:	mov	r9, r0
   2de4c:	cmp	r0, #0
   2de50:	beq	2e0e0 <__assert_fail@plt+0x1b524>
   2de54:	ldr	r0, [sp, #44]	; 0x2c
   2de58:	cmp	sl, r0
   2de5c:	bcs	2de74 <__assert_fail@plt+0x1b2b8>
   2de60:	ldr	r2, [fp, #-36]	; 0xffffffdc
   2de64:	ldr	r3, [fp, #-40]	; 0xffffffd8
   2de68:	adds	r0, sl, r3
   2de6c:	bcc	2df10 <__assert_fail@plt+0x1b354>
   2de70:	b	2e474 <__assert_fail@plt+0x1b8b8>
   2de74:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2de78:	add	r0, sl, r0
   2de7c:	add	r1, r0, #1
   2de80:	ldr	r5, [fp, #-36]	; 0xffffffdc
   2de84:	ldr	r4, [r5, #24]
   2de88:	mov	r0, r5
   2de8c:	bl	2ce84 <__assert_fail@plt+0x1a2c8>
   2de90:	cmp	r0, #0
   2de94:	beq	2e0e0 <__assert_fail@plt+0x1b524>
   2de98:	ldr	r0, [r5, #24]
   2de9c:	cmp	r4, r0
   2dea0:	mov	r2, r5
   2dea4:	beq	2def8 <__assert_fail@plt+0x1b33c>
   2dea8:	ldrb	r1, [r2, #48]	; 0x30
   2deac:	tst	r1, #4
   2deb0:	ldr	r1, [sp, #40]	; 0x28
   2deb4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   2deb8:	addne	r1, r0, r3
   2debc:	str	r1, [sp, #40]	; 0x28
   2dec0:	mov	r0, #1
   2dec4:	str	r0, [sp, #16]
   2dec8:	b	2defc <__assert_fail@plt+0x1b340>
   2decc:	ldrb	r0, [r8, #20]
   2ded0:	cmp	r0, #0
   2ded4:	beq	2dee8 <__assert_fail@plt+0x1b32c>
   2ded8:	cmp	r0, #46	; 0x2e
   2dedc:	ldrbeq	r0, [r8, #21]
   2dee0:	cmpeq	r0, #0
   2dee4:	bne	2de28 <__assert_fail@plt+0x1b26c>
   2dee8:	ldr	sl, [sp, #32]
   2deec:	mov	r9, r6
   2def0:	mov	r6, #0
   2def4:	b	2e05c <__assert_fail@plt+0x1b4a0>
   2def8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   2defc:	ldr	r0, [r2, #36]	; 0x24
   2df00:	sub	r0, r0, r3
   2df04:	str	r0, [sp, #44]	; 0x2c
   2df08:	adds	r0, sl, r3
   2df0c:	bcs	2e474 <__assert_fail@plt+0x1b8b8>
   2df10:	ldr	r1, [sp, #24]
   2df14:	str	r1, [r9, #48]	; 0x30
   2df18:	ldr	r1, [r2]
   2df1c:	str	r0, [r9, #40]	; 0x28
   2df20:	str	r1, [r9, #4]
   2df24:	ldrd	r0, [r8]
   2df28:	strd	r0, [r9, #160]	; 0xa0
   2df2c:	ldrb	r0, [r2, #48]	; 0x30
   2df30:	tst	r0, #4
   2df34:	ldr	sl, [sp, #32]
   2df38:	mov	r5, r6
   2df3c:	bne	2df4c <__assert_fail@plt+0x1b390>
   2df40:	add	r0, r9, #168	; 0xa8
   2df44:	str	r0, [r9, #24]
   2df48:	b	2df6c <__assert_fail@plt+0x1b3b0>
   2df4c:	ldr	r0, [r9, #28]
   2df50:	ldr	r2, [r9, #52]	; 0x34
   2df54:	str	r0, [r9, #24]
   2df58:	add	r1, r9, #168	; 0xa8
   2df5c:	add	r2, r2, #1
   2df60:	ldr	r0, [sp, #40]	; 0x28
   2df64:	bl	1255c <memmove@plt>
   2df68:	ldr	r2, [fp, #-36]	; 0xffffffdc
   2df6c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2df70:	ldr	r0, [r0]
   2df74:	cmp	r0, #0
   2df78:	beq	2dfa0 <__assert_fail@plt+0x1b3e4>
   2df7c:	ldrb	r0, [r2, #49]	; 0x31
   2df80:	tst	r0, #4
   2df84:	bne	2dfa0 <__assert_fail@plt+0x1b3e4>
   2df88:	mov	r0, r2
   2df8c:	mov	r1, r9
   2df90:	mov	r2, #0
   2df94:	bl	2cfac <__assert_fail@plt+0x1a3f0>
   2df98:	strh	r0, [r9, #56]	; 0x38
   2df9c:	b	2dff0 <__assert_fail@plt+0x1b434>
   2dfa0:	add	r0, r9, #64	; 0x40
   2dfa4:	ldr	r1, [r2, #48]	; 0x30
   2dfa8:	mov	r4, #0
   2dfac:	tst	r1, #8
   2dfb0:	beq	2dfd4 <__assert_fail@plt+0x1b418>
   2dfb4:	ldrb	r2, [r8, #18]
   2dfb8:	orr	r3, r2, #4
   2dfbc:	cmp	r3, #4
   2dfc0:	beq	2dfd4 <__assert_fail@plt+0x1b418>
   2dfc4:	eor	r2, r2, #10
   2dfc8:	and	r1, r1, #16
   2dfcc:	orrs	r4, r1, r2
   2dfd0:	movwne	r4, #1
   2dfd4:	mov	r1, #11
   2dfd8:	strh	r1, [r9, #56]	; 0x38
   2dfdc:	ldrb	r1, [r8, #18]
   2dfe0:	bl	2e9b4 <__assert_fail@plt+0x1bdf8>
   2dfe4:	eor	r1, r4, #1
   2dfe8:	mov	r0, r9
   2dfec:	bl	2cf7c <__assert_fail@plt+0x1a3c0>
   2dff0:	mov	r6, #0
   2dff4:	str	r6, [r9, #8]
   2dff8:	cmp	r5, #0
   2dffc:	mov	r4, r9
   2e000:	ldrne	r0, [sp, #48]	; 0x30
   2e004:	strne	r9, [r0, #8]
   2e008:	movne	r4, r5
   2e00c:	movw	r0, #10000	; 0x2710
   2e010:	cmp	r7, r0
   2e014:	bne	2e038 <__assert_fail@plt+0x1b47c>
   2e018:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2e01c:	ldr	r0, [r0]
   2e020:	cmp	r0, #0
   2e024:	bne	2e038 <__assert_fail@plt+0x1b47c>
   2e028:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2e02c:	mov	r0, sl
   2e030:	bl	2e9d4 <__assert_fail@plt+0x1be18>
   2e034:	str	r0, [sp, #20]
   2e038:	add	r7, r7, #1
   2e03c:	ldr	r0, [sp, #28]
   2e040:	cmp	r0, r7
   2e044:	mov	r0, #0
   2e048:	movwls	r0, #15
   2e04c:	cmp	r0, #0
   2e050:	bne	2e4c0 <__assert_fail@plt+0x1b904>
   2e054:	str	r9, [sp, #48]	; 0x30
   2e058:	mov	r9, r4
   2e05c:	ldr	r4, [sl, #12]
   2e060:	cmp	r4, #0
   2e064:	bne	2ddf0 <__assert_fail@plt+0x1b234>
   2e068:	ldr	r0, [sp, #16]
   2e06c:	tst	r0, #1
   2e070:	ldr	r4, [sp, #8]
   2e074:	b	2e350 <__assert_fail@plt+0x1b794>
   2e078:	mov	r2, r0
   2e07c:	ldr	r3, [r0, #48]	; 0x30
   2e080:	and	r1, r3, #516	; 0x204
   2e084:	mvn	r0, #99	; 0x63
   2e088:	cmp	r1, #512	; 0x200
   2e08c:	ldreq	r0, [r2, #32]
   2e090:	ldr	r1, [sl, #24]
   2e094:	mov	r2, #0
   2e098:	tst	r3, #16
   2e09c:	beq	2e134 <__assert_fail@plt+0x1b578>
   2e0a0:	tst	r3, #1
   2e0a4:	bne	2e128 <__assert_fail@plt+0x1b56c>
   2e0a8:	mov	r2, #32768	; 0x8000
   2e0ac:	b	2e134 <__assert_fail@plt+0x1b578>
   2e0b0:	ldr	r0, [sl, #12]
   2e0b4:	bl	12b8c <closedir@plt>
   2e0b8:	mov	r9, #0
   2e0bc:	str	r9, [sl, #12]
   2e0c0:	cmp	r4, #3
   2e0c4:	beq	2e180 <__assert_fail@plt+0x1b5c4>
   2e0c8:	b	2e528 <__assert_fail@plt+0x1b96c>
   2e0cc:	mov	r7, #0
   2e0d0:	mov	r0, #0
   2e0d4:	str	r0, [sp, #20]
   2e0d8:	ldr	r4, [sp, #8]
   2e0dc:	b	2e368 <__assert_fail@plt+0x1b7ac>
   2e0e0:	ldr	r4, [sp, #36]	; 0x24
   2e0e4:	ldr	r8, [r4]
   2e0e8:	mov	r0, r9
   2e0ec:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2e0f0:	mov	r0, r6
   2e0f4:	bl	2d2b0 <__assert_fail@plt+0x1a6f4>
   2e0f8:	ldr	r7, [sp, #32]
   2e0fc:	ldr	r0, [r7, #12]
   2e100:	bl	12b8c <closedir@plt>
   2e104:	mov	r9, #0
   2e108:	str	r9, [r7, #12]
   2e10c:	mov	r0, #7
   2e110:	strh	r0, [r7, #56]	; 0x38
   2e114:	ldr	r0, [r5, #48]	; 0x30
   2e118:	orr	r0, r0, #8192	; 0x2000
   2e11c:	str	r0, [r5, #48]	; 0x30
   2e120:	str	r8, [r4]
   2e124:	b	2e528 <__assert_fail@plt+0x1b96c>
   2e128:	ldr	r3, [sl, #48]	; 0x30
   2e12c:	cmp	r3, #0
   2e130:	movne	r2, #32768	; 0x8000
   2e134:	sub	r3, fp, #32
   2e138:	bl	3e118 <__assert_fail@plt+0x2b55c>
   2e13c:	str	r0, [sl, #12]
   2e140:	cmp	r0, #0
   2e144:	beq	2e174 <__assert_fail@plt+0x1b5b8>
   2e148:	ldrh	r0, [sl, #56]	; 0x38
   2e14c:	cmp	r0, #11
   2e150:	bne	2e198 <__assert_fail@plt+0x1b5dc>
   2e154:	ldr	r6, [fp, #-36]	; 0xffffffdc
   2e158:	mov	r0, r6
   2e15c:	mov	r1, sl
   2e160:	mov	r2, #0
   2e164:	bl	2cfac <__assert_fail@plt+0x1a3f0>
   2e168:	mov	ip, r6
   2e16c:	strh	r0, [sl, #56]	; 0x38
   2e170:	b	2e1e0 <__assert_fail@plt+0x1b624>
   2e174:	mov	r9, #0
   2e178:	cmp	r4, #3
   2e17c:	bne	2e528 <__assert_fail@plt+0x1b96c>
   2e180:	mov	r0, #4
   2e184:	strh	r0, [sl, #56]	; 0x38
   2e188:	bl	128d4 <__errno_location@plt>
   2e18c:	ldr	r0, [r0]
   2e190:	str	r0, [sl, #32]
   2e194:	b	2e528 <__assert_fail@plt+0x1b96c>
   2e198:	ldr	ip, [fp, #-36]	; 0xffffffdc
   2e19c:	ldrb	r0, [ip, #49]	; 0x31
   2e1a0:	tst	r0, #1
   2e1a4:	beq	2e1e0 <__assert_fail@plt+0x1b624>
   2e1a8:	mov	r0, ip
   2e1ac:	mov	r1, sl
   2e1b0:	bl	2da34 <__assert_fail@plt+0x1ae78>
   2e1b4:	mov	r9, #0
   2e1b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2e1bc:	mov	r1, sl
   2e1c0:	mov	r2, #0
   2e1c4:	bl	2cfac <__assert_fail@plt+0x1a3f0>
   2e1c8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2e1cc:	mov	r1, sl
   2e1d0:	bl	2e634 <__assert_fail@plt+0x1ba78>
   2e1d4:	ldr	ip, [fp, #-36]	; 0xffffffdc
   2e1d8:	cmp	r0, #0
   2e1dc:	beq	2e4e4 <__assert_fail@plt+0x1b928>
   2e1e0:	mov	r1, ip
   2e1e4:	ldr	r0, [r1, #44]!	; 0x2c
   2e1e8:	str	r1, [fp, #-44]	; 0xffffffd4
   2e1ec:	mvn	r1, #0
   2e1f0:	cmp	r0, #0
   2e1f4:	movweq	r1, #34464	; 0x86a0
   2e1f8:	movteq	r1, #1
   2e1fc:	str	r1, [sp, #28]
   2e200:	mov	r6, #0
   2e204:	cmp	r4, #2
   2e208:	beq	2e22c <__assert_fail@plt+0x1b670>
   2e20c:	ldr	r0, [ip, #48]	; 0x30
   2e210:	and	r1, r0, #56	; 0x38
   2e214:	mov	r0, #0
   2e218:	cmp	r1, #24
   2e21c:	ldreq	r1, [sl, #84]	; 0x54
   2e220:	cmpeq	r1, #2
   2e224:	beq	2e534 <__assert_fail@plt+0x1b978>
   2e228:	eor	r6, r0, #1
   2e22c:	cmp	r4, #3
   2e230:	beq	2e244 <__assert_fail@plt+0x1b688>
   2e234:	cmp	r6, #0
   2e238:	bne	2e244 <__assert_fail@plt+0x1b688>
   2e23c:	str	r6, [sp, #4]
   2e240:	b	2dd48 <__assert_fail@plt+0x1b18c>
   2e244:	ldrb	r0, [ip, #49]	; 0x31
   2e248:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2e24c:	tst	r0, #2
   2e250:	beq	2e270 <__assert_fail@plt+0x1b6b4>
   2e254:	mov	r0, r2
   2e258:	movw	r1, #1030	; 0x406
   2e25c:	mov	r2, #3
   2e260:	bl	2c82c <__assert_fail@plt+0x19c70>
   2e264:	ldr	ip, [fp, #-36]	; 0xffffffdc
   2e268:	mov	r2, r0
   2e26c:	str	r0, [fp, #-32]	; 0xffffffe0
   2e270:	cmp	r2, #0
   2e274:	blt	2e294 <__assert_fail@plt+0x1b6d8>
   2e278:	mov	r0, ip
   2e27c:	mov	r1, sl
   2e280:	mov	r3, #0
   2e284:	bl	2db04 <__assert_fail@plt+0x1af48>
   2e288:	ldr	ip, [fp, #-36]	; 0xffffffdc
   2e28c:	cmp	r0, #0
   2e290:	beq	2dd40 <__assert_fail@plt+0x1b184>
   2e294:	subs	r0, r4, #3
   2e298:	movwne	r0, #1
   2e29c:	eor	r1, r6, #1
   2e2a0:	orrs	r0, r0, r1
   2e2a4:	bne	2e2b4 <__assert_fail@plt+0x1b6f8>
   2e2a8:	bl	128d4 <__errno_location@plt>
   2e2ac:	ldr	r0, [r0]
   2e2b0:	str	r0, [sl, #32]
   2e2b4:	ldrh	r0, [sl, #58]	; 0x3a
   2e2b8:	orr	r0, r0, #1
   2e2bc:	strh	r0, [sl, #58]	; 0x3a
   2e2c0:	ldr	r0, [sl, #12]
   2e2c4:	bl	12b8c <closedir@plt>
   2e2c8:	mov	r6, #0
   2e2cc:	str	r6, [sl, #12]
   2e2d0:	ldr	ip, [fp, #-36]	; 0xffffffdc
   2e2d4:	ldr	r0, [ip, #48]	; 0x30
   2e2d8:	tst	r0, #512	; 0x200
   2e2dc:	beq	2e2f4 <__assert_fail@plt+0x1b738>
   2e2e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2e2e4:	cmp	r0, #0
   2e2e8:	blt	2e2f4 <__assert_fail@plt+0x1b738>
   2e2ec:	bl	12b74 <close@plt>
   2e2f0:	ldr	ip, [fp, #-36]	; 0xffffffdc
   2e2f4:	mov	r0, #0
   2e2f8:	str	r0, [sp, #4]
   2e2fc:	str	r6, [sl, #12]
   2e300:	b	2dd48 <__assert_fail@plt+0x1b18c>
   2e304:	ldr	r0, [sp, #36]	; 0x24
   2e308:	ldr	r0, [r0]
   2e30c:	cmp	r0, #0
   2e310:	beq	2e32c <__assert_fail@plt+0x1b770>
   2e314:	str	r0, [sl, #32]
   2e318:	ldr	r0, [sp, #12]
   2e31c:	orrs	r0, r0, r7
   2e320:	mov	r0, #4
   2e324:	movwne	r0, #7
   2e328:	strh	r0, [sl, #56]	; 0x38
   2e32c:	ldr	r0, [sl, #12]
   2e330:	cmp	r0, #0
   2e334:	ldr	r4, [sp, #8]
   2e338:	beq	2e4d0 <__assert_fail@plt+0x1b914>
   2e33c:	bl	12b8c <closedir@plt>
   2e340:	mov	r0, #0
   2e344:	str	r0, [sl, #12]
   2e348:	ldr	r0, [sp, #16]
   2e34c:	tst	r0, #1
   2e350:	ldr	ip, [fp, #-36]	; 0xffffffdc
   2e354:	beq	2e368 <__assert_fail@plt+0x1b7ac>
   2e358:	mov	r0, ip
   2e35c:	mov	r1, r9
   2e360:	bl	2ea18 <__assert_fail@plt+0x1be5c>
   2e364:	ldr	ip, [fp, #-36]	; 0xffffffdc
   2e368:	ldrb	r0, [ip, #48]	; 0x30
   2e36c:	tst	r0, #4
   2e370:	beq	2e39c <__assert_fail@plt+0x1b7e0>
   2e374:	ldr	r0, [ip, #36]	; 0x24
   2e378:	ldr	r2, [sp, #40]	; 0x28
   2e37c:	sub	r1, r2, #1
   2e380:	ldr	r3, [fp, #-40]	; 0xffffffd8
   2e384:	cmp	r3, r0
   2e388:	moveq	r2, r1
   2e38c:	cmp	r7, #0
   2e390:	moveq	r2, r1
   2e394:	mov	r0, #0
   2e398:	strb	r0, [r2]
   2e39c:	ldr	r0, [sp, #12]
   2e3a0:	cmp	r0, #0
   2e3a4:	ldreq	r0, [sp, #4]
   2e3a8:	eorseq	r0, r0, #1
   2e3ac:	beq	2e3d8 <__assert_fail@plt+0x1b81c>
   2e3b0:	cmp	r7, #0
   2e3b4:	bne	2e40c <__assert_fail@plt+0x1b850>
   2e3b8:	cmp	r4, #3
   2e3bc:	bne	2e51c <__assert_fail@plt+0x1b960>
   2e3c0:	ldrh	r0, [sl, #56]	; 0x38
   2e3c4:	cmp	r0, #4
   2e3c8:	cmpne	r0, #7
   2e3cc:	movne	r0, #6
   2e3d0:	strhne	r0, [sl, #56]	; 0x38
   2e3d4:	b	2e51c <__assert_fail@plt+0x1b960>
   2e3d8:	cmp	r4, #1
   2e3dc:	cmpne	r7, #0
   2e3e0:	bne	2e40c <__assert_fail@plt+0x1b850>
   2e3e4:	ldr	r0, [sl, #48]	; 0x30
   2e3e8:	cmp	r0, #0
   2e3ec:	beq	2e4f4 <__assert_fail@plt+0x1b938>
   2e3f0:	ldr	r1, [sl, #4]
   2e3f4:	movw	r3, #18473	; 0x4829
   2e3f8:	movt	r3, #4
   2e3fc:	mov	r0, ip
   2e400:	mvn	r2, #0
   2e404:	bl	2db04 <__assert_fail@plt+0x1af48>
   2e408:	b	2e4fc <__assert_fail@plt+0x1b940>
   2e40c:	ldr	r0, [sp, #20]
   2e410:	tst	r0, #1
   2e414:	beq	2e444 <__assert_fail@plt+0x1b888>
   2e418:	movw	r0, #60064	; 0xeaa0
   2e41c:	movt	r0, #2
   2e420:	str	r0, [ip, #44]	; 0x2c
   2e424:	mov	r0, ip
   2e428:	mov	r1, r9
   2e42c:	mov	r2, r7
   2e430:	bl	2d114 <__assert_fail@plt+0x1a558>
   2e434:	ldr	ip, [fp, #-36]	; 0xffffffdc
   2e438:	mov	r9, r0
   2e43c:	mov	r0, #0
   2e440:	str	r0, [ip, #44]	; 0x2c
   2e444:	cmp	r7, #2
   2e448:	bcc	2e528 <__assert_fail@plt+0x1b96c>
   2e44c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2e450:	ldr	r0, [r0]
   2e454:	cmp	r0, #0
   2e458:	beq	2e528 <__assert_fail@plt+0x1b96c>
   2e45c:	mov	r0, ip
   2e460:	mov	r1, r9
   2e464:	mov	r2, r7
   2e468:	bl	2d114 <__assert_fail@plt+0x1a558>
   2e46c:	mov	r9, r0
   2e470:	b	2e528 <__assert_fail@plt+0x1b96c>
   2e474:	mov	r0, r9
   2e478:	mov	r4, r2
   2e47c:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2e480:	mov	r0, r6
   2e484:	bl	2d2b0 <__assert_fail@plt+0x1a6f4>
   2e488:	ldr	r5, [sp, #32]
   2e48c:	ldr	r0, [r5, #12]
   2e490:	bl	12b8c <closedir@plt>
   2e494:	mov	r9, #0
   2e498:	str	r9, [r5, #12]
   2e49c:	mov	r0, #7
   2e4a0:	strh	r0, [r5, #56]	; 0x38
   2e4a4:	ldr	r0, [r4, #48]	; 0x30
   2e4a8:	orr	r0, r0, #8192	; 0x2000
   2e4ac:	str	r0, [r4, #48]	; 0x30
   2e4b0:	mov	r0, #36	; 0x24
   2e4b4:	ldr	r1, [sp, #36]	; 0x24
   2e4b8:	str	r0, [r1]
   2e4bc:	b	2e528 <__assert_fail@plt+0x1b96c>
   2e4c0:	cmp	r0, #15
   2e4c4:	bne	2e524 <__assert_fail@plt+0x1b968>
   2e4c8:	mov	r9, r4
   2e4cc:	ldr	r4, [sp, #8]
   2e4d0:	ldr	ip, [fp, #-36]	; 0xffffffdc
   2e4d4:	ldr	r0, [sp, #16]
   2e4d8:	tst	r0, #1
   2e4dc:	bne	2e358 <__assert_fail@plt+0x1b79c>
   2e4e0:	b	2e368 <__assert_fail@plt+0x1b7ac>
   2e4e4:	bl	128d4 <__errno_location@plt>
   2e4e8:	mov	r1, #12
   2e4ec:	str	r1, [r0]
   2e4f0:	b	2e528 <__assert_fail@plt+0x1b96c>
   2e4f4:	mov	r0, ip
   2e4f8:	bl	2e550 <__assert_fail@plt+0x1b994>
   2e4fc:	ldr	ip, [fp, #-36]	; 0xffffffdc
   2e500:	cmp	r0, #0
   2e504:	beq	2e3b0 <__assert_fail@plt+0x1b7f4>
   2e508:	mov	r0, #7
   2e50c:	strh	r0, [sl, #56]	; 0x38
   2e510:	ldr	r0, [ip, #48]	; 0x30
   2e514:	orr	r0, r0, #8192	; 0x2000
   2e518:	str	r0, [ip, #48]	; 0x30
   2e51c:	mov	r0, r9
   2e520:	bl	2d2b0 <__assert_fail@plt+0x1a6f4>
   2e524:	mov	r9, #0
   2e528:	mov	r0, r9
   2e52c:	sub	sp, fp, #28
   2e530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e534:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2e538:	mov	r0, sl
   2e53c:	bl	2e94c <__assert_fail@plt+0x1bd90>
   2e540:	ldr	ip, [fp, #-36]	; 0xffffffdc
   2e544:	cmp	r0, #0
   2e548:	movwne	r0, #1
   2e54c:	b	2e228 <__assert_fail@plt+0x1b66c>
   2e550:	push	{r4, r5, fp, lr}
   2e554:	add	fp, sp, #8
   2e558:	mov	r4, r0
   2e55c:	ldr	r0, [r0, #48]	; 0x30
   2e560:	mov	r5, #0
   2e564:	tst	r0, #4
   2e568:	bne	2e59c <__assert_fail@plt+0x1b9e0>
   2e56c:	tst	r0, #512	; 0x200
   2e570:	bne	2e58c <__assert_fail@plt+0x1b9d0>
   2e574:	ldr	r0, [r4, #28]
   2e578:	bl	12aa8 <fchdir@plt>
   2e57c:	mov	r5, r0
   2e580:	cmp	r0, #0
   2e584:	movwne	r5, #1
   2e588:	b	2e59c <__assert_fail@plt+0x1b9e0>
   2e58c:	mov	r0, r4
   2e590:	mvn	r1, #99	; 0x63
   2e594:	mov	r2, #1
   2e598:	bl	2e6ec <__assert_fail@plt+0x1bb30>
   2e59c:	add	r0, r4, #60	; 0x3c
   2e5a0:	bl	2d41c <__assert_fail@plt+0x1a860>
   2e5a4:	mov	r0, r5
   2e5a8:	pop	{r4, r5, fp, pc}
   2e5ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2e5b0:	add	fp, sp, #24
   2e5b4:	mov	r4, r1
   2e5b8:	mov	r8, r0
   2e5bc:	ldr	r1, [r1, #52]	; 0x34
   2e5c0:	str	r1, [r4, #40]	; 0x28
   2e5c4:	ldr	r0, [r0, #24]
   2e5c8:	add	r6, r4, #168	; 0xa8
   2e5cc:	add	r2, r1, #1
   2e5d0:	mov	r1, r6
   2e5d4:	bl	1255c <memmove@plt>
   2e5d8:	mov	r0, r6
   2e5dc:	mov	r1, #47	; 0x2f
   2e5e0:	bl	12a18 <strrchr@plt>
   2e5e4:	cmp	r0, #0
   2e5e8:	beq	2e624 <__assert_fail@plt+0x1ba68>
   2e5ec:	cmp	r0, r6
   2e5f0:	bne	2e600 <__assert_fail@plt+0x1ba44>
   2e5f4:	ldrb	r1, [r0, #1]
   2e5f8:	cmp	r1, #0
   2e5fc:	beq	2e624 <__assert_fail@plt+0x1ba68>
   2e600:	add	r7, r0, #1
   2e604:	mov	r0, r7
   2e608:	bl	1288c <strlen@plt>
   2e60c:	mov	r5, r0
   2e610:	add	r2, r0, #1
   2e614:	mov	r0, r6
   2e618:	mov	r1, r7
   2e61c:	bl	1255c <memmove@plt>
   2e620:	str	r5, [r4, #52]	; 0x34
   2e624:	ldr	r0, [r8, #24]
   2e628:	str	r0, [r4, #24]
   2e62c:	str	r0, [r4, #28]
   2e630:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2e634:	push	{r4, r5, r6, r7, fp, lr}
   2e638:	add	fp, sp, #16
   2e63c:	mov	r4, r1
   2e640:	mov	r6, r0
   2e644:	ldrh	r0, [r0, #48]	; 0x30
   2e648:	movw	r1, #258	; 0x102
   2e64c:	tst	r0, r1
   2e650:	beq	2e6c4 <__assert_fail@plt+0x1bb08>
   2e654:	mov	r0, #24
   2e658:	bl	2ed04 <__assert_fail@plt+0x1c148>
   2e65c:	mov	r5, #0
   2e660:	cmp	r0, #0
   2e664:	beq	2e6e4 <__assert_fail@plt+0x1bb28>
   2e668:	mov	r7, r0
   2e66c:	ldrd	r0, [r4, #64]	; 0x40
   2e670:	stm	r7, {r0, r1}
   2e674:	ldrd	r0, [r4, #160]	; 0xa0
   2e678:	add	r2, r7, #8
   2e67c:	stm	r2, {r0, r1, r4}
   2e680:	ldr	r0, [r6, #56]	; 0x38
   2e684:	mov	r1, r7
   2e688:	bl	22f38 <__assert_fail@plt+0x1037c>
   2e68c:	cmp	r0, r7
   2e690:	beq	2e6b8 <__assert_fail@plt+0x1bafc>
   2e694:	mov	r6, r0
   2e698:	mov	r0, r7
   2e69c:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2e6a0:	cmp	r6, #0
   2e6a4:	beq	2e6e4 <__assert_fail@plt+0x1bb28>
   2e6a8:	ldr	r0, [r6, #16]
   2e6ac:	mov	r1, #2
   2e6b0:	strh	r1, [r4, #56]	; 0x38
   2e6b4:	str	r0, [r4]
   2e6b8:	mov	r5, #1
   2e6bc:	mov	r0, r5
   2e6c0:	pop	{r4, r5, r6, r7, fp, pc}
   2e6c4:	ldr	r0, [r6, #56]	; 0x38
   2e6c8:	add	r1, r4, #64	; 0x40
   2e6cc:	bl	3db94 <__assert_fail@plt+0x2afd8>
   2e6d0:	mov	r5, #1
   2e6d4:	cmp	r0, #0
   2e6d8:	movne	r0, #2
   2e6dc:	strhne	r0, [r4, #56]	; 0x38
   2e6e0:	strne	r4, [r4]
   2e6e4:	mov	r0, r5
   2e6e8:	pop	{r4, r5, r6, r7, fp, pc}
   2e6ec:	push	{r4, r5, fp, lr}
   2e6f0:	add	fp, sp, #8
   2e6f4:	mov	r4, r1
   2e6f8:	mov	r5, r0
   2e6fc:	ldr	r1, [r0, #32]
   2e700:	cmp	r1, r4
   2e704:	bne	2e710 <__assert_fail@plt+0x1bb54>
   2e708:	cmn	r1, #100	; 0x64
   2e70c:	bne	2e750 <__assert_fail@plt+0x1bb94>
   2e710:	cmp	r2, #0
   2e714:	beq	2e72c <__assert_fail@plt+0x1bb70>
   2e718:	add	r0, r5, #60	; 0x3c
   2e71c:	bl	3de08 <__assert_fail@plt+0x2b24c>
   2e720:	cmp	r0, #0
   2e724:	bge	2e744 <__assert_fail@plt+0x1bb88>
   2e728:	b	2e748 <__assert_fail@plt+0x1bb8c>
   2e72c:	cmp	r1, #0
   2e730:	blt	2e748 <__assert_fail@plt+0x1bb8c>
   2e734:	ldr	r0, [r5, #48]	; 0x30
   2e738:	ands	r0, r0, #4
   2e73c:	bne	2e748 <__assert_fail@plt+0x1bb8c>
   2e740:	mov	r0, r1
   2e744:	bl	12b74 <close@plt>
   2e748:	str	r4, [r5, #32]
   2e74c:	pop	{r4, r5, fp, pc}
   2e750:	bl	12b68 <abort@plt>
   2e754:	cmp	r2, #5
   2e758:	strhcc	r2, [r1, #60]	; 0x3c
   2e75c:	movcc	r0, #0
   2e760:	bxcc	lr
   2e764:	push	{fp, lr}
   2e768:	mov	fp, sp
   2e76c:	bl	128d4 <__errno_location@plt>
   2e770:	mov	r1, #22
   2e774:	str	r1, [r0]
   2e778:	mov	r0, #1
   2e77c:	pop	{fp, pc}
   2e780:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e784:	add	fp, sp, #28
   2e788:	sub	sp, sp, #4
   2e78c:	mov	r5, r0
   2e790:	orr	r0, r1, #4096	; 0x1000
   2e794:	cmp	r0, #4096	; 0x1000
   2e798:	bne	2e7d8 <__assert_fail@plt+0x1bc1c>
   2e79c:	mov	r7, r1
   2e7a0:	ldr	r6, [r5]
   2e7a4:	bl	128d4 <__errno_location@plt>
   2e7a8:	mov	sl, r0
   2e7ac:	mov	r4, #0
   2e7b0:	str	r4, [r0]
   2e7b4:	ldrb	r0, [r5, #49]	; 0x31
   2e7b8:	tst	r0, #32
   2e7bc:	bne	2e7e8 <__assert_fail@plt+0x1bc2c>
   2e7c0:	ldrh	r0, [r6, #56]	; 0x38
   2e7c4:	cmp	r0, #1
   2e7c8:	beq	2e7f4 <__assert_fail@plt+0x1bc38>
   2e7cc:	cmp	r0, #9
   2e7d0:	ldreq	r4, [r6, #8]
   2e7d4:	b	2e7e8 <__assert_fail@plt+0x1bc2c>
   2e7d8:	bl	128d4 <__errno_location@plt>
   2e7dc:	mov	r1, #22
   2e7e0:	str	r1, [r0]
   2e7e4:	mov	r4, #0
   2e7e8:	mov	r0, r4
   2e7ec:	sub	sp, fp, #28
   2e7f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e7f4:	ldr	r0, [r5, #4]
   2e7f8:	cmp	r0, #0
   2e7fc:	blne	2d2b0 <__assert_fail@plt+0x1a6f4>
   2e800:	mov	r9, #1
   2e804:	cmp	r7, #4096	; 0x1000
   2e808:	ldreq	r0, [r5, #48]	; 0x30
   2e80c:	orreq	r0, r0, #4096	; 0x1000
   2e810:	streq	r0, [r5, #48]	; 0x30
   2e814:	moveq	r9, #2
   2e818:	ldr	r0, [r6, #48]	; 0x30
   2e81c:	cmp	r0, #0
   2e820:	bne	2e89c <__assert_fail@plt+0x1bce0>
   2e824:	ldr	r0, [r6, #24]
   2e828:	ldrb	r0, [r0]
   2e82c:	cmp	r0, #47	; 0x2f
   2e830:	beq	2e89c <__assert_fail@plt+0x1bce0>
   2e834:	ldrb	r0, [r5, #48]	; 0x30
   2e838:	tst	r0, #4
   2e83c:	bne	2e89c <__assert_fail@plt+0x1bce0>
   2e840:	movw	r1, #64308	; 0xfb34
   2e844:	movt	r1, #3
   2e848:	mov	r0, r5
   2e84c:	bl	2d280 <__assert_fail@plt+0x1a6c4>
   2e850:	cmn	r0, #1
   2e854:	ble	2e8b4 <__assert_fail@plt+0x1bcf8>
   2e858:	mov	r8, r0
   2e85c:	mov	r0, r5
   2e860:	mov	r1, r9
   2e864:	bl	2dce4 <__assert_fail@plt+0x1b128>
   2e868:	str	r0, [r5, #4]
   2e86c:	ldrb	r0, [r5, #49]	; 0x31
   2e870:	tst	r0, #2
   2e874:	bne	2e8c0 <__assert_fail@plt+0x1bd04>
   2e878:	mov	r0, r8
   2e87c:	bl	12aa8 <fchdir@plt>
   2e880:	cmp	r0, #0
   2e884:	beq	2e8d4 <__assert_fail@plt+0x1bd18>
   2e888:	ldr	r5, [sl]
   2e88c:	mov	r0, r8
   2e890:	bl	12b74 <close@plt>
   2e894:	str	r5, [sl]
   2e898:	b	2e7e8 <__assert_fail@plt+0x1bc2c>
   2e89c:	mov	r0, r5
   2e8a0:	mov	r1, r9
   2e8a4:	bl	2dce4 <__assert_fail@plt+0x1b128>
   2e8a8:	mov	r4, r0
   2e8ac:	str	r0, [r5, #4]
   2e8b0:	b	2e7e8 <__assert_fail@plt+0x1bc2c>
   2e8b4:	mov	r4, #0
   2e8b8:	str	r4, [r5, #4]
   2e8bc:	b	2e7e8 <__assert_fail@plt+0x1bc2c>
   2e8c0:	mov	r0, r5
   2e8c4:	mov	r1, r8
   2e8c8:	mov	r2, #1
   2e8cc:	bl	2e6ec <__assert_fail@plt+0x1bb30>
   2e8d0:	b	2e8dc <__assert_fail@plt+0x1bd20>
   2e8d4:	mov	r0, r8
   2e8d8:	bl	12b74 <close@plt>
   2e8dc:	ldr	r4, [r5, #4]
   2e8e0:	b	2e7e8 <__assert_fail@plt+0x1bc2c>
   2e8e4:	push	{fp, lr}
   2e8e8:	mov	fp, sp
   2e8ec:	mov	r2, r1
   2e8f0:	ldrd	r0, [r0, #8]
   2e8f4:	mov	r3, #0
   2e8f8:	bl	3e6b0 <__assert_fail@plt+0x2baf4>
   2e8fc:	mov	r0, r2
   2e900:	pop	{fp, pc}
   2e904:	push	{r4, r5, fp, lr}
   2e908:	add	fp, sp, #8
   2e90c:	ldrd	r2, [r1, #8]
   2e910:	ldrd	r4, [r0, #8]
   2e914:	eor	r3, r5, r3
   2e918:	eor	r2, r4, r2
   2e91c:	orrs	r2, r2, r3
   2e920:	mov	r2, #0
   2e924:	bne	2e944 <__assert_fail@plt+0x1bd88>
   2e928:	ldrd	r2, [r1]
   2e92c:	ldrd	r0, [r0]
   2e930:	eor	r1, r1, r3
   2e934:	eor	r0, r0, r2
   2e938:	orr	r0, r0, r1
   2e93c:	clz	r0, r0
   2e940:	lsr	r2, r0, #5
   2e944:	mov	r0, r2
   2e948:	pop	{r4, r5, fp, pc}
   2e94c:	push	{fp, lr}
   2e950:	mov	fp, sp
   2e954:	bl	2ead8 <__assert_fail@plt+0x1bf1c>
   2e958:	mov	r1, r0
   2e95c:	mov	r0, #0
   2e960:	movw	r2, #26984	; 0x6968
   2e964:	cmp	r1, r2
   2e968:	ble	2e998 <__assert_fail@plt+0x1bddc>
   2e96c:	movw	r2, #26985	; 0x6969
   2e970:	cmp	r1, r2
   2e974:	movwne	r2, #40864	; 0x9fa0
   2e978:	cmpne	r1, r2
   2e97c:	beq	2e9b0 <__assert_fail@plt+0x1bdf4>
   2e980:	movw	r2, #16719	; 0x414f
   2e984:	movt	r2, #21318	; 0x5346
   2e988:	cmp	r1, r2
   2e98c:	popeq	{fp, pc}
   2e990:	mov	r0, #1
   2e994:	pop	{fp, pc}
   2e998:	movw	r2, #19778	; 0x4d42
   2e99c:	movt	r2, #65363	; 0xff53
   2e9a0:	cmp	r1, r2
   2e9a4:	beq	2e9b0 <__assert_fail@plt+0x1bdf4>
   2e9a8:	cmp	r1, #0
   2e9ac:	movne	r0, #1
   2e9b0:	pop	{fp, pc}
   2e9b4:	sub	r2, r1, #1
   2e9b8:	mov	r1, #0
   2e9bc:	cmp	r2, #11
   2e9c0:	movwls	r1, #18480	; 0x4830
   2e9c4:	movtls	r1, #4
   2e9c8:	ldrls	r1, [r1, r2, lsl #2]
   2e9cc:	str	r1, [r0, #16]
   2e9d0:	bx	lr
   2e9d4:	push	{fp, lr}
   2e9d8:	mov	fp, sp
   2e9dc:	bl	2ead8 <__assert_fail@plt+0x1bf1c>
   2e9e0:	mov	r1, r0
   2e9e4:	mov	r0, #0
   2e9e8:	movw	r2, #19778	; 0x4d42
   2e9ec:	movt	r2, #65363	; 0xff53
   2e9f0:	cmp	r1, r2
   2e9f4:	movwne	r2, #26985	; 0x6969
   2e9f8:	cmpne	r1, r2
   2e9fc:	bne	2ea04 <__assert_fail@plt+0x1be48>
   2ea00:	pop	{fp, pc}
   2ea04:	movw	r2, #6548	; 0x1994
   2ea08:	movt	r2, #258	; 0x102
   2ea0c:	cmp	r1, r2
   2ea10:	movne	r0, #1
   2ea14:	pop	{fp, pc}
   2ea18:	ldr	r2, [r0, #4]
   2ea1c:	ldr	ip, [r0, #24]
   2ea20:	cmp	r2, #0
   2ea24:	beq	2ea54 <__assert_fail@plt+0x1be98>
   2ea28:	ldr	r3, [r2, #24]
   2ea2c:	add	r0, r2, #168	; 0xa8
   2ea30:	cmp	r3, r0
   2ea34:	ldrne	r0, [r2, #28]
   2ea38:	subne	r0, r3, r0
   2ea3c:	addne	r0, ip, r0
   2ea40:	strne	r0, [r2, #24]
   2ea44:	str	ip, [r2, #28]
   2ea48:	ldr	r2, [r2, #8]
   2ea4c:	cmp	r2, #0
   2ea50:	bne	2ea28 <__assert_fail@plt+0x1be6c>
   2ea54:	ldr	r2, [r1, #48]	; 0x30
   2ea58:	cmp	r2, #0
   2ea5c:	bxlt	lr
   2ea60:	ldr	r2, [r1, #24]
   2ea64:	add	r0, r1, #168	; 0xa8
   2ea68:	cmp	r2, r0
   2ea6c:	ldrne	r0, [r1, #28]
   2ea70:	subne	r0, r2, r0
   2ea74:	addne	r0, ip, r0
   2ea78:	strne	r0, [r1, #24]
   2ea7c:	str	ip, [r1, #28]
   2ea80:	ldr	r2, [r1, #8]
   2ea84:	cmp	r2, #0
   2ea88:	ldreq	r2, [r1, #4]
   2ea8c:	ldr	r0, [r2, #48]	; 0x30
   2ea90:	cmn	r0, #1
   2ea94:	mov	r1, r2
   2ea98:	bgt	2ea60 <__assert_fail@plt+0x1bea4>
   2ea9c:	bx	lr
   2eaa0:	push	{r4, r5, fp, lr}
   2eaa4:	add	fp, sp, #8
   2eaa8:	ldr	r0, [r0]
   2eaac:	ldrd	r2, [r0, #160]	; 0xa0
   2eab0:	ldr	r0, [r1]
   2eab4:	ldrd	r4, [r0, #160]	; 0xa0
   2eab8:	mov	r0, #0
   2eabc:	subs	r1, r4, r2
   2eac0:	sbcs	r1, r5, r3
   2eac4:	movwcc	r0, #1
   2eac8:	subs	r1, r2, r4
   2eacc:	sbcs	r1, r3, r5
   2ead0:	subcc	r0, r0, #1
   2ead4:	pop	{r4, r5, fp, pc}
   2ead8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2eadc:	add	fp, sp, #24
   2eae0:	sub	sp, sp, #96	; 0x60
   2eae4:	mov	r4, r0
   2eae8:	ldr	r7, [r0, #44]	; 0x2c
   2eaec:	ldrb	r0, [r7, #49]	; 0x31
   2eaf0:	mov	r5, #0
   2eaf4:	tst	r0, #2
   2eaf8:	beq	2ebf4 <__assert_fail@plt+0x1c038>
   2eafc:	mov	r9, r1
   2eb00:	ldr	r6, [r7, #52]	; 0x34
   2eb04:	cmp	r6, #0
   2eb08:	bne	2eb48 <__assert_fail@plt+0x1bf8c>
   2eb0c:	movw	r0, #51832	; 0xca78
   2eb10:	movt	r0, #2
   2eb14:	str	r0, [sp]
   2eb18:	mov	r8, #0
   2eb1c:	movw	r2, #60416	; 0xec00
   2eb20:	movt	r2, #2
   2eb24:	movw	r3, #60448	; 0xec20
   2eb28:	movt	r3, #2
   2eb2c:	mov	r0, #13
   2eb30:	mov	r1, #0
   2eb34:	bl	226a8 <__assert_fail@plt+0xfaec>
   2eb38:	mov	r6, r0
   2eb3c:	str	r0, [r7, #52]	; 0x34
   2eb40:	cmp	r0, #0
   2eb44:	beq	2eb80 <__assert_fail@plt+0x1bfc4>
   2eb48:	ldrd	r0, [r4, #64]	; 0x40
   2eb4c:	str	r1, [sp, #12]
   2eb50:	str	r0, [sp, #8]
   2eb54:	add	r1, sp, #8
   2eb58:	mov	r0, r6
   2eb5c:	bl	22420 <__assert_fail@plt+0xf864>
   2eb60:	cmp	r0, #0
   2eb64:	beq	2eb70 <__assert_fail@plt+0x1bfb4>
   2eb68:	ldr	r5, [r0, #8]
   2eb6c:	b	2ebf4 <__assert_fail@plt+0x1c038>
   2eb70:	mov	r8, #1
   2eb74:	cmp	r9, #0
   2eb78:	bge	2eb8c <__assert_fail@plt+0x1bfd0>
   2eb7c:	b	2ebf4 <__assert_fail@plt+0x1c038>
   2eb80:	mov	r6, #0
   2eb84:	cmp	r9, #0
   2eb88:	blt	2ebf4 <__assert_fail@plt+0x1c038>
   2eb8c:	add	r1, sp, #8
   2eb90:	mov	r0, r9
   2eb94:	bl	12448 <fstatfs64@plt>
   2eb98:	cmp	r0, #0
   2eb9c:	bne	2ebf4 <__assert_fail@plt+0x1c038>
   2eba0:	cmp	r8, #0
   2eba4:	beq	2ebf0 <__assert_fail@plt+0x1c034>
   2eba8:	mov	r0, #16
   2ebac:	bl	2ed04 <__assert_fail@plt+0x1c148>
   2ebb0:	cmp	r0, #0
   2ebb4:	beq	2ebf0 <__assert_fail@plt+0x1c034>
   2ebb8:	mov	r5, r0
   2ebbc:	ldrd	r0, [r4, #64]	; 0x40
   2ebc0:	ldr	r2, [sp, #8]
   2ebc4:	stm	r5, {r0, r1, r2}
   2ebc8:	mov	r0, r6
   2ebcc:	mov	r1, r5
   2ebd0:	bl	22f38 <__assert_fail@plt+0x1037c>
   2ebd4:	cmp	r0, #0
   2ebd8:	beq	2ebe8 <__assert_fail@plt+0x1c02c>
   2ebdc:	cmp	r0, r5
   2ebe0:	beq	2ebf0 <__assert_fail@plt+0x1c034>
   2ebe4:	bl	12b68 <abort@plt>
   2ebe8:	mov	r0, r5
   2ebec:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2ebf0:	ldr	r5, [sp, #8]
   2ebf4:	mov	r0, r5
   2ebf8:	sub	sp, fp, #24
   2ebfc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2ec00:	push	{fp, lr}
   2ec04:	mov	fp, sp
   2ec08:	mov	r2, r1
   2ec0c:	ldrd	r0, [r0]
   2ec10:	mov	r3, #0
   2ec14:	bl	3e6b0 <__assert_fail@plt+0x2baf4>
   2ec18:	mov	r0, r2
   2ec1c:	pop	{fp, pc}
   2ec20:	ldrd	r2, [r1]
   2ec24:	ldrd	r0, [r0]
   2ec28:	eor	r1, r1, r3
   2ec2c:	eor	r0, r0, r2
   2ec30:	orr	r0, r0, r1
   2ec34:	clz	r0, r0
   2ec38:	lsr	r0, r0, #5
   2ec3c:	bx	lr
   2ec40:	push	{r4, sl, fp, lr}
   2ec44:	add	fp, sp, #8
   2ec48:	mov	r4, r1
   2ec4c:	bl	12874 <getfilecon@plt>
   2ec50:	mov	r1, r4
   2ec54:	pop	{r4, sl, fp, lr}
   2ec58:	b	2ec5c <__assert_fail@plt+0x1c0a0>
   2ec5c:	push	{r4, r5, fp, lr}
   2ec60:	add	fp, sp, #8
   2ec64:	cmp	r0, #10
   2ec68:	beq	2ec80 <__assert_fail@plt+0x1c0c4>
   2ec6c:	cmp	r0, #0
   2ec70:	bne	2ecc8 <__assert_fail@plt+0x1c10c>
   2ec74:	bl	128d4 <__errno_location@plt>
   2ec78:	mov	r1, #95	; 0x5f
   2ec7c:	b	2ecc0 <__assert_fail@plt+0x1c104>
   2ec80:	mov	r4, r1
   2ec84:	ldr	r5, [r1]
   2ec88:	movw	r1, #18528	; 0x4860
   2ec8c:	movt	r1, #4
   2ec90:	mov	r0, r5
   2ec94:	bl	124cc <strcmp@plt>
   2ec98:	mov	r1, r0
   2ec9c:	mov	r0, #10
   2eca0:	cmp	r1, #0
   2eca4:	popne	{r4, r5, fp, pc}
   2eca8:	mov	r0, r5
   2ecac:	bl	12acc <freecon@plt>
   2ecb0:	mov	r0, #0
   2ecb4:	str	r0, [r4]
   2ecb8:	bl	128d4 <__errno_location@plt>
   2ecbc:	mov	r1, #61	; 0x3d
   2ecc0:	str	r1, [r0]
   2ecc4:	mvn	r0, #0
   2ecc8:	pop	{r4, r5, fp, pc}
   2eccc:	push	{r4, sl, fp, lr}
   2ecd0:	add	fp, sp, #8
   2ecd4:	mov	r4, r1
   2ecd8:	bl	127d8 <lgetfilecon@plt>
   2ecdc:	mov	r1, r4
   2ece0:	pop	{r4, sl, fp, lr}
   2ece4:	b	2ec5c <__assert_fail@plt+0x1c0a0>
   2ece8:	push	{r4, sl, fp, lr}
   2ecec:	add	fp, sp, #8
   2ecf0:	mov	r4, r1
   2ecf4:	bl	12688 <fgetfilecon@plt>
   2ecf8:	mov	r1, r4
   2ecfc:	pop	{r4, sl, fp, lr}
   2ed00:	b	2ec5c <__assert_fail@plt+0x1c0a0>
   2ed04:	cmp	r0, #0
   2ed08:	movweq	r0, #1
   2ed0c:	cmn	r0, #1
   2ed10:	ble	2ed18 <__assert_fail@plt+0x1c15c>
   2ed14:	b	127e4 <malloc@plt>
   2ed18:	push	{fp, lr}
   2ed1c:	mov	fp, sp
   2ed20:	bl	128d4 <__errno_location@plt>
   2ed24:	mov	r1, #12
   2ed28:	str	r1, [r0]
   2ed2c:	mov	r0, #0
   2ed30:	pop	{fp, pc}
   2ed34:	push	{r4, r5, r6, r7, fp, lr}
   2ed38:	add	fp, sp, #16
   2ed3c:	sub	sp, sp, #8
   2ed40:	mov	r7, r2
   2ed44:	mov	r4, r1
   2ed48:	add	r5, sp, #4
   2ed4c:	cmp	r0, #0
   2ed50:	movne	r5, r0
   2ed54:	mov	r0, r5
   2ed58:	bl	12778 <mbrtowc@plt>
   2ed5c:	mov	r6, r0
   2ed60:	cmp	r7, #0
   2ed64:	beq	2ed88 <__assert_fail@plt+0x1c1cc>
   2ed68:	cmn	r6, #2
   2ed6c:	bcc	2ed88 <__assert_fail@plt+0x1c1cc>
   2ed70:	mov	r0, #0
   2ed74:	bl	3dd70 <__assert_fail@plt+0x2b1b4>
   2ed78:	cmp	r0, #0
   2ed7c:	ldrbeq	r0, [r4]
   2ed80:	streq	r0, [r5]
   2ed84:	moveq	r6, #1
   2ed88:	mov	r0, r6
   2ed8c:	sub	sp, fp, #16
   2ed90:	pop	{r4, r5, r6, r7, fp, pc}
   2ed94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ed98:	add	fp, sp, #28
   2ed9c:	sub	sp, sp, #36	; 0x24
   2eda0:	movw	r0, #18538	; 0x486a
   2eda4:	movt	r0, #4
   2eda8:	movw	r1, #12052	; 0x2f14
   2edac:	movt	r1, #4
   2edb0:	bl	12ab4 <fopen64@plt>
   2edb4:	cmp	r0, #0
   2edb8:	beq	2ee04 <__assert_fail@plt+0x1c248>
   2edbc:	mov	r9, r0
   2edc0:	mov	r0, #0
   2edc4:	str	r0, [sp, #28]
   2edc8:	str	r0, [sp, #24]
   2edcc:	add	r0, sp, #28
   2edd0:	add	r1, sp, #24
   2edd4:	mov	r2, r9
   2edd8:	bl	12b08 <getline@plt>
   2eddc:	add	r4, sp, #32
   2ede0:	cmn	r0, #1
   2ede4:	beq	2f650 <__assert_fail@plt+0x1ca94>
   2ede8:	add	r7, sp, #12
   2edec:	movw	sl, #18559	; 0x487f
   2edf0:	movt	sl, #4
   2edf4:	add	r8, sp, #20
   2edf8:	add	r6, sp, #16
   2edfc:	add	r5, sp, #28
   2ee00:	b	2f338 <__assert_fail@plt+0x1c77c>
   2ee04:	movw	r0, #18747	; 0x493b
   2ee08:	movt	r0, #4
   2ee0c:	movw	r1, #12632	; 0x3158
   2ee10:	movt	r1, #4
   2ee14:	bl	12ae4 <setmntent@plt>
   2ee18:	cmp	r0, #0
   2ee1c:	beq	2f6d4 <__assert_fail@plt+0x1cb18>
   2ee20:	mov	r8, r0
   2ee24:	bl	1279c <getmntent@plt>
   2ee28:	cmp	r0, #0
   2ee2c:	beq	2f6dc <__assert_fail@plt+0x1cb20>
   2ee30:	mov	r5, r0
   2ee34:	add	r4, sp, #32
   2ee38:	b	2ef90 <__assert_fail@plt+0x1c3d4>
   2ee3c:	ldrb	r0, [r5]
   2ee40:	cmp	r0, #47	; 0x2f
   2ee44:	ldrbeq	r0, [r5, #1]
   2ee48:	cmpeq	r0, #47	; 0x2f
   2ee4c:	beq	2ef44 <__assert_fail@plt+0x1c388>
   2ee50:	mov	r0, r7
   2ee54:	movw	r1, #18691	; 0x4903
   2ee58:	movt	r1, #4
   2ee5c:	bl	124cc <strcmp@plt>
   2ee60:	cmp	r0, #0
   2ee64:	beq	2f1a4 <__assert_fail@plt+0x1c5e8>
   2ee68:	mov	r0, r7
   2ee6c:	movw	r1, #5344	; 0x14e0
   2ee70:	movt	r1, #4
   2ee74:	bl	124cc <strcmp@plt>
   2ee78:	cmp	r0, #0
   2ee7c:	beq	2f1a4 <__assert_fail@plt+0x1c5e8>
   2ee80:	mov	r0, r7
   2ee84:	movw	r1, #18696	; 0x4908
   2ee88:	movt	r1, #4
   2ee8c:	bl	124cc <strcmp@plt>
   2ee90:	cmp	r0, #0
   2ee94:	beq	2f1a4 <__assert_fail@plt+0x1c5e8>
   2ee98:	mov	r0, r7
   2ee9c:	movw	r1, #18701	; 0x490d
   2eea0:	movt	r1, #4
   2eea4:	bl	124cc <strcmp@plt>
   2eea8:	cmp	r0, #0
   2eeac:	beq	2f1a4 <__assert_fail@plt+0x1c5e8>
   2eeb0:	mov	r0, r7
   2eeb4:	movw	r1, #18712	; 0x4918
   2eeb8:	movt	r1, #4
   2eebc:	bl	124cc <strcmp@plt>
   2eec0:	cmp	r0, #0
   2eec4:	beq	2f1a4 <__assert_fail@plt+0x1c5e8>
   2eec8:	mov	r0, r7
   2eecc:	movw	r1, #18718	; 0x491e
   2eed0:	movt	r1, #4
   2eed4:	bl	124cc <strcmp@plt>
   2eed8:	cmp	r0, #0
   2eedc:	beq	2f1a4 <__assert_fail@plt+0x1c5e8>
   2eee0:	mov	r0, r7
   2eee4:	movw	r1, #18723	; 0x4923
   2eee8:	movt	r1, #4
   2eeec:	bl	124cc <strcmp@plt>
   2eef0:	cmp	r0, #0
   2eef4:	beq	2f1a4 <__assert_fail@plt+0x1c5e8>
   2eef8:	mov	r0, r7
   2eefc:	movw	r1, #18729	; 0x4929
   2ef00:	movt	r1, #4
   2ef04:	bl	124cc <strcmp@plt>
   2ef08:	cmp	r0, #0
   2ef0c:	beq	2f1a4 <__assert_fail@plt+0x1c5e8>
   2ef10:	mov	r0, r7
   2ef14:	movw	r1, #18735	; 0x492f
   2ef18:	movt	r1, #4
   2ef1c:	bl	124cc <strcmp@plt>
   2ef20:	cmp	r0, #0
   2ef24:	beq	2f1a4 <__assert_fail@plt+0x1c5e8>
   2ef28:	movw	r0, #18740	; 0x4934
   2ef2c:	movt	r0, #4
   2ef30:	mov	r1, r5
   2ef34:	bl	124cc <strcmp@plt>
   2ef38:	clz	r0, r0
   2ef3c:	lsr	r6, r0, #5
   2ef40:	b	2f1a4 <__assert_fail@plt+0x1c5e8>
   2ef44:	mov	r0, r7
   2ef48:	movw	r1, #18675	; 0x48f3
   2ef4c:	movt	r1, #4
   2ef50:	bl	124cc <strcmp@plt>
   2ef54:	cmp	r0, #0
   2ef58:	beq	2f1a4 <__assert_fail@plt+0x1c5e8>
   2ef5c:	mov	r0, r7
   2ef60:	movw	r1, #18681	; 0x48f9
   2ef64:	movt	r1, #4
   2ef68:	bl	124cc <strcmp@plt>
   2ef6c:	cmp	r0, #0
   2ef70:	beq	2f1a4 <__assert_fail@plt+0x1c5e8>
   2ef74:	mov	r0, r7
   2ef78:	movw	r1, #18686	; 0x48fe
   2ef7c:	movt	r1, #4
   2ef80:	bl	124cc <strcmp@plt>
   2ef84:	cmp	r0, #0
   2ef88:	bne	2ee50 <__assert_fail@plt+0x1c294>
   2ef8c:	b	2f1a4 <__assert_fail@plt+0x1c5e8>
   2ef90:	mov	sl, r4
   2ef94:	mov	r0, r5
   2ef98:	movw	r1, #18757	; 0x4945
   2ef9c:	movt	r1, #4
   2efa0:	bl	1273c <hasmntopt@plt>
   2efa4:	str	r0, [sp, #8]
   2efa8:	mov	r0, #32
   2efac:	bl	2b5cc <__assert_fail@plt+0x18a10>
   2efb0:	mov	r9, r0
   2efb4:	ldr	r0, [r5]
   2efb8:	bl	2b95c <__assert_fail@plt+0x18da0>
   2efbc:	str	r0, [r9]
   2efc0:	ldr	r0, [r5, #4]
   2efc4:	bl	2b95c <__assert_fail@plt+0x18da0>
   2efc8:	str	r0, [r9, #4]
   2efcc:	mov	r0, #0
   2efd0:	str	r0, [r9, #8]
   2efd4:	ldr	r0, [r5, #8]
   2efd8:	bl	2b95c <__assert_fail@plt+0x18da0>
   2efdc:	mov	r7, r0
   2efe0:	str	r0, [r9, #12]
   2efe4:	ldrb	r0, [r9, #24]
   2efe8:	orr	r4, r0, #4
   2efec:	strb	r4, [r9, #24]
   2eff0:	mov	r0, r7
   2eff4:	movw	r1, #18580	; 0x4894
   2eff8:	movt	r1, #4
   2effc:	bl	124cc <strcmp@plt>
   2f000:	mov	r6, #1
   2f004:	cmp	r0, #0
   2f008:	mov	r0, #1
   2f00c:	beq	2f180 <__assert_fail@plt+0x1c5c4>
   2f010:	mov	r0, r7
   2f014:	movw	r1, #18587	; 0x489b
   2f018:	movt	r1, #4
   2f01c:	bl	124cc <strcmp@plt>
   2f020:	cmp	r0, #0
   2f024:	mov	r0, #1
   2f028:	beq	2f180 <__assert_fail@plt+0x1c5c4>
   2f02c:	mov	r0, r7
   2f030:	movw	r1, #18592	; 0x48a0
   2f034:	movt	r1, #4
   2f038:	bl	124cc <strcmp@plt>
   2f03c:	cmp	r0, #0
   2f040:	mov	r0, #1
   2f044:	beq	2f180 <__assert_fail@plt+0x1c5c4>
   2f048:	mov	r0, r7
   2f04c:	movw	r1, #18598	; 0x48a6
   2f050:	movt	r1, #4
   2f054:	bl	124cc <strcmp@plt>
   2f058:	cmp	r0, #0
   2f05c:	mov	r0, #1
   2f060:	beq	2f180 <__assert_fail@plt+0x1c5c4>
   2f064:	mov	r0, r7
   2f068:	movw	r1, #18606	; 0x48ae
   2f06c:	movt	r1, #4
   2f070:	bl	124cc <strcmp@plt>
   2f074:	cmp	r0, #0
   2f078:	mov	r0, #1
   2f07c:	beq	2f180 <__assert_fail@plt+0x1c5c4>
   2f080:	mov	r0, r7
   2f084:	movw	r1, #18613	; 0x48b5
   2f088:	movt	r1, #4
   2f08c:	bl	124cc <strcmp@plt>
   2f090:	cmp	r0, #0
   2f094:	mov	r0, #1
   2f098:	beq	2f180 <__assert_fail@plt+0x1c5c4>
   2f09c:	mov	r0, r7
   2f0a0:	movw	r1, #18621	; 0x48bd
   2f0a4:	movt	r1, #4
   2f0a8:	bl	124cc <strcmp@plt>
   2f0ac:	cmp	r0, #0
   2f0b0:	mov	r0, #1
   2f0b4:	beq	2f180 <__assert_fail@plt+0x1c5c4>
   2f0b8:	mov	r0, r7
   2f0bc:	movw	r1, #18633	; 0x48c9
   2f0c0:	movt	r1, #4
   2f0c4:	bl	124cc <strcmp@plt>
   2f0c8:	cmp	r0, #0
   2f0cc:	mov	r0, #1
   2f0d0:	beq	2f180 <__assert_fail@plt+0x1c5c4>
   2f0d4:	mov	r0, r7
   2f0d8:	movw	r1, #18640	; 0x48d0
   2f0dc:	movt	r1, #4
   2f0e0:	bl	124cc <strcmp@plt>
   2f0e4:	cmp	r0, #0
   2f0e8:	mov	r0, #1
   2f0ec:	beq	2f180 <__assert_fail@plt+0x1c5c4>
   2f0f0:	mov	r0, r7
   2f0f4:	movw	r1, #18651	; 0x48db
   2f0f8:	movt	r1, #4
   2f0fc:	bl	124cc <strcmp@plt>
   2f100:	cmp	r0, #0
   2f104:	mov	r0, #1
   2f108:	beq	2f180 <__assert_fail@plt+0x1c5c4>
   2f10c:	mov	r0, r7
   2f110:	movw	r1, #18657	; 0x48e1
   2f114:	movt	r1, #4
   2f118:	bl	124cc <strcmp@plt>
   2f11c:	cmp	r0, #0
   2f120:	mov	r0, #1
   2f124:	beq	2f180 <__assert_fail@plt+0x1c5c4>
   2f128:	mov	r0, r7
   2f12c:	movw	r1, #18663	; 0x48e7
   2f130:	movt	r1, #4
   2f134:	bl	124cc <strcmp@plt>
   2f138:	cmp	r0, #0
   2f13c:	mov	r0, #1
   2f140:	beq	2f180 <__assert_fail@plt+0x1c5c4>
   2f144:	mov	r0, r7
   2f148:	movw	r1, #5385	; 0x1509
   2f14c:	movt	r1, #4
   2f150:	bl	124cc <strcmp@plt>
   2f154:	cmp	r0, #0
   2f158:	mov	r0, #1
   2f15c:	beq	2f180 <__assert_fail@plt+0x1c5c4>
   2f160:	mov	r0, r7
   2f164:	movw	r1, #18670	; 0x48ee
   2f168:	movt	r1, #4
   2f16c:	bl	124cc <strcmp@plt>
   2f170:	ldr	r1, [sp, #8]
   2f174:	orr	r0, r1, r0
   2f178:	clz	r0, r0
   2f17c:	lsr	r0, r0, #5
   2f180:	bic	r1, r4, #1
   2f184:	orr	r4, r1, r0
   2f188:	strb	r4, [r9, #24]
   2f18c:	ldr	r5, [r9]
   2f190:	mov	r0, r5
   2f194:	mov	r1, #58	; 0x3a
   2f198:	bl	12898 <strchr@plt>
   2f19c:	cmp	r0, #0
   2f1a0:	beq	2ee3c <__assert_fail@plt+0x1c280>
   2f1a4:	mvn	r0, #0
   2f1a8:	str	r0, [r9, #16]
   2f1ac:	str	r0, [r9, #20]
   2f1b0:	and	r0, r4, #253	; 0xfd
   2f1b4:	orr	r0, r0, r6, lsl #1
   2f1b8:	strb	r0, [r9, #24]
   2f1bc:	str	r9, [sl]
   2f1c0:	add	r4, r9, #28
   2f1c4:	mov	r0, r8
   2f1c8:	bl	1279c <getmntent@plt>
   2f1cc:	mov	r5, r0
   2f1d0:	cmp	r0, #0
   2f1d4:	bne	2ef90 <__assert_fail@plt+0x1c3d4>
   2f1d8:	b	2f6e0 <__assert_fail@plt+0x1cb24>
   2f1dc:	ldrb	r0, [r5]
   2f1e0:	cmp	r0, #47	; 0x2f
   2f1e4:	ldrbeq	r0, [r5, #1]
   2f1e8:	cmpeq	r0, #47	; 0x2f
   2f1ec:	beq	2f2ec <__assert_fail@plt+0x1c730>
   2f1f0:	str	r5, [sp, #4]
   2f1f4:	mov	r0, r7
   2f1f8:	movw	r1, #18691	; 0x4903
   2f1fc:	movt	r1, #4
   2f200:	bl	124cc <strcmp@plt>
   2f204:	cmp	r0, #0
   2f208:	beq	2f600 <__assert_fail@plt+0x1ca44>
   2f20c:	mov	r0, r7
   2f210:	movw	r1, #5344	; 0x14e0
   2f214:	movt	r1, #4
   2f218:	bl	124cc <strcmp@plt>
   2f21c:	cmp	r0, #0
   2f220:	beq	2f600 <__assert_fail@plt+0x1ca44>
   2f224:	mov	r0, r7
   2f228:	movw	r1, #18696	; 0x4908
   2f22c:	movt	r1, #4
   2f230:	bl	124cc <strcmp@plt>
   2f234:	cmp	r0, #0
   2f238:	beq	2f600 <__assert_fail@plt+0x1ca44>
   2f23c:	mov	r0, r7
   2f240:	movw	r1, #18701	; 0x490d
   2f244:	movt	r1, #4
   2f248:	bl	124cc <strcmp@plt>
   2f24c:	cmp	r0, #0
   2f250:	beq	2f600 <__assert_fail@plt+0x1ca44>
   2f254:	mov	r0, r7
   2f258:	movw	r1, #18712	; 0x4918
   2f25c:	movt	r1, #4
   2f260:	bl	124cc <strcmp@plt>
   2f264:	cmp	r0, #0
   2f268:	beq	2f600 <__assert_fail@plt+0x1ca44>
   2f26c:	mov	r0, r7
   2f270:	movw	r1, #18718	; 0x491e
   2f274:	movt	r1, #4
   2f278:	bl	124cc <strcmp@plt>
   2f27c:	cmp	r0, #0
   2f280:	beq	2f600 <__assert_fail@plt+0x1ca44>
   2f284:	mov	r0, r7
   2f288:	movw	r1, #18723	; 0x4923
   2f28c:	movt	r1, #4
   2f290:	bl	124cc <strcmp@plt>
   2f294:	cmp	r0, #0
   2f298:	beq	2f600 <__assert_fail@plt+0x1ca44>
   2f29c:	mov	r0, r7
   2f2a0:	movw	r1, #18729	; 0x4929
   2f2a4:	movt	r1, #4
   2f2a8:	bl	124cc <strcmp@plt>
   2f2ac:	cmp	r0, #0
   2f2b0:	beq	2f600 <__assert_fail@plt+0x1ca44>
   2f2b4:	mov	r0, r7
   2f2b8:	movw	r1, #18735	; 0x492f
   2f2bc:	movt	r1, #4
   2f2c0:	bl	124cc <strcmp@plt>
   2f2c4:	cmp	r0, #0
   2f2c8:	mov	r1, #1
   2f2cc:	beq	2f604 <__assert_fail@plt+0x1ca48>
   2f2d0:	movw	r0, #18740	; 0x4934
   2f2d4:	movt	r0, #4
   2f2d8:	ldr	r1, [sp, #4]
   2f2dc:	bl	124cc <strcmp@plt>
   2f2e0:	clz	r0, r0
   2f2e4:	lsr	r1, r0, #5
   2f2e8:	b	2f604 <__assert_fail@plt+0x1ca48>
   2f2ec:	mov	r0, r7
   2f2f0:	movw	r1, #18675	; 0x48f3
   2f2f4:	movt	r1, #4
   2f2f8:	bl	124cc <strcmp@plt>
   2f2fc:	cmp	r0, #0
   2f300:	beq	2f600 <__assert_fail@plt+0x1ca44>
   2f304:	mov	r0, r7
   2f308:	movw	r1, #18681	; 0x48f9
   2f30c:	movt	r1, #4
   2f310:	bl	124cc <strcmp@plt>
   2f314:	cmp	r0, #0
   2f318:	beq	2f600 <__assert_fail@plt+0x1ca44>
   2f31c:	mov	r0, r7
   2f320:	movw	r1, #18686	; 0x48fe
   2f324:	movt	r1, #4
   2f328:	bl	124cc <strcmp@plt>
   2f32c:	cmp	r0, #0
   2f330:	bne	2f1f0 <__assert_fail@plt+0x1c634>
   2f334:	b	2f600 <__assert_fail@plt+0x1ca44>
   2f338:	ldr	r0, [sp, #28]
   2f33c:	str	r7, [sp]
   2f340:	mov	r1, sl
   2f344:	mov	r2, r8
   2f348:	mov	r3, r6
   2f34c:	bl	12a48 <sscanf@plt>
   2f350:	orr	r0, r0, #1
   2f354:	cmp	r0, #3
   2f358:	bne	2f638 <__assert_fail@plt+0x1ca7c>
   2f35c:	ldr	r0, [sp, #12]
   2f360:	ldr	r1, [sp, #28]
   2f364:	add	r5, r1, r0
   2f368:	mov	r0, r5
   2f36c:	bl	2f708 <__assert_fail@plt+0x1cb4c>
   2f370:	cmp	r0, #0
   2f374:	beq	2f634 <__assert_fail@plt+0x1ca78>
   2f378:	add	r6, r0, #1
   2f37c:	mov	r0, r6
   2f380:	bl	2f708 <__assert_fail@plt+0x1cb4c>
   2f384:	cmp	r0, #0
   2f388:	beq	2f630 <__assert_fail@plt+0x1ca74>
   2f38c:	add	r0, r0, #1
   2f390:	movw	r1, #18576	; 0x4890
   2f394:	movt	r1, #4
   2f398:	bl	3c4e4 <__assert_fail@plt+0x29928>
   2f39c:	cmp	r0, #0
   2f3a0:	beq	2f630 <__assert_fail@plt+0x1ca74>
   2f3a4:	add	r8, r0, #3
   2f3a8:	mov	r0, r8
   2f3ac:	bl	2f708 <__assert_fail@plt+0x1cb4c>
   2f3b0:	cmp	r0, #0
   2f3b4:	beq	2f62c <__assert_fail@plt+0x1ca70>
   2f3b8:	add	sl, r0, #1
   2f3bc:	mov	r0, sl
   2f3c0:	bl	2f708 <__assert_fail@plt+0x1cb4c>
   2f3c4:	cmp	r0, #0
   2f3c8:	beq	2f624 <__assert_fail@plt+0x1ca68>
   2f3cc:	str	r4, [sp, #8]
   2f3d0:	mov	r0, sl
   2f3d4:	bl	2f728 <__assert_fail@plt+0x1cb6c>
   2f3d8:	mov	r0, r6
   2f3dc:	bl	2f728 <__assert_fail@plt+0x1cb6c>
   2f3e0:	mov	r0, r5
   2f3e4:	bl	2f728 <__assert_fail@plt+0x1cb6c>
   2f3e8:	mov	r0, r8
   2f3ec:	bl	2f728 <__assert_fail@plt+0x1cb6c>
   2f3f0:	mov	r0, #32
   2f3f4:	bl	2b5cc <__assert_fail@plt+0x18a10>
   2f3f8:	mov	r4, r0
   2f3fc:	mov	r0, sl
   2f400:	bl	2b95c <__assert_fail@plt+0x18da0>
   2f404:	str	r0, [r4]
   2f408:	mov	r0, r6
   2f40c:	bl	2b95c <__assert_fail@plt+0x18da0>
   2f410:	str	r0, [r4, #4]
   2f414:	mov	r0, r5
   2f418:	bl	2b95c <__assert_fail@plt+0x18da0>
   2f41c:	str	r0, [r4, #8]
   2f420:	mov	r0, r8
   2f424:	bl	2b95c <__assert_fail@plt+0x18da0>
   2f428:	mov	r7, r0
   2f42c:	str	r0, [r4, #12]
   2f430:	ldrb	r0, [r4, #24]
   2f434:	orr	r6, r0, #4
   2f438:	strb	r6, [r4, #24]
   2f43c:	ldr	r1, [sp, #16]
   2f440:	ldr	r0, [sp, #20]
   2f444:	bl	124f0 <gnu_dev_makedev@plt>
   2f448:	strd	r0, [r4, #16]
   2f44c:	mov	r0, r7
   2f450:	movw	r1, #18580	; 0x4894
   2f454:	movt	r1, #4
   2f458:	bl	124cc <strcmp@plt>
   2f45c:	cmp	r0, #0
   2f460:	mov	r0, #1
   2f464:	beq	2f5d0 <__assert_fail@plt+0x1ca14>
   2f468:	mov	r0, r7
   2f46c:	movw	r1, #18587	; 0x489b
   2f470:	movt	r1, #4
   2f474:	bl	124cc <strcmp@plt>
   2f478:	cmp	r0, #0
   2f47c:	mov	r0, #1
   2f480:	beq	2f5d0 <__assert_fail@plt+0x1ca14>
   2f484:	mov	r0, r7
   2f488:	movw	r1, #18592	; 0x48a0
   2f48c:	movt	r1, #4
   2f490:	bl	124cc <strcmp@plt>
   2f494:	cmp	r0, #0
   2f498:	mov	r0, #1
   2f49c:	beq	2f5d0 <__assert_fail@plt+0x1ca14>
   2f4a0:	mov	r0, r7
   2f4a4:	movw	r1, #18598	; 0x48a6
   2f4a8:	movt	r1, #4
   2f4ac:	bl	124cc <strcmp@plt>
   2f4b0:	cmp	r0, #0
   2f4b4:	mov	r0, #1
   2f4b8:	beq	2f5d0 <__assert_fail@plt+0x1ca14>
   2f4bc:	mov	r0, r7
   2f4c0:	movw	r1, #18606	; 0x48ae
   2f4c4:	movt	r1, #4
   2f4c8:	bl	124cc <strcmp@plt>
   2f4cc:	cmp	r0, #0
   2f4d0:	mov	r0, #1
   2f4d4:	beq	2f5d0 <__assert_fail@plt+0x1ca14>
   2f4d8:	mov	r0, r7
   2f4dc:	movw	r1, #18613	; 0x48b5
   2f4e0:	movt	r1, #4
   2f4e4:	bl	124cc <strcmp@plt>
   2f4e8:	cmp	r0, #0
   2f4ec:	mov	r0, #1
   2f4f0:	beq	2f5d0 <__assert_fail@plt+0x1ca14>
   2f4f4:	mov	r0, r7
   2f4f8:	movw	r1, #18621	; 0x48bd
   2f4fc:	movt	r1, #4
   2f500:	bl	124cc <strcmp@plt>
   2f504:	cmp	r0, #0
   2f508:	mov	r0, #1
   2f50c:	beq	2f5d0 <__assert_fail@plt+0x1ca14>
   2f510:	mov	r0, r7
   2f514:	movw	r1, #18633	; 0x48c9
   2f518:	movt	r1, #4
   2f51c:	bl	124cc <strcmp@plt>
   2f520:	cmp	r0, #0
   2f524:	mov	r0, #1
   2f528:	beq	2f5d0 <__assert_fail@plt+0x1ca14>
   2f52c:	mov	r0, r7
   2f530:	movw	r1, #18640	; 0x48d0
   2f534:	movt	r1, #4
   2f538:	bl	124cc <strcmp@plt>
   2f53c:	cmp	r0, #0
   2f540:	mov	r0, #1
   2f544:	beq	2f5d0 <__assert_fail@plt+0x1ca14>
   2f548:	mov	r0, r7
   2f54c:	movw	r1, #18651	; 0x48db
   2f550:	movt	r1, #4
   2f554:	bl	124cc <strcmp@plt>
   2f558:	cmp	r0, #0
   2f55c:	mov	r0, #1
   2f560:	beq	2f5d0 <__assert_fail@plt+0x1ca14>
   2f564:	mov	r0, r7
   2f568:	movw	r1, #18657	; 0x48e1
   2f56c:	movt	r1, #4
   2f570:	bl	124cc <strcmp@plt>
   2f574:	cmp	r0, #0
   2f578:	mov	r0, #1
   2f57c:	beq	2f5d0 <__assert_fail@plt+0x1ca14>
   2f580:	mov	r0, r7
   2f584:	movw	r1, #18663	; 0x48e7
   2f588:	movt	r1, #4
   2f58c:	bl	124cc <strcmp@plt>
   2f590:	cmp	r0, #0
   2f594:	mov	r0, #1
   2f598:	beq	2f5d0 <__assert_fail@plt+0x1ca14>
   2f59c:	mov	r0, r7
   2f5a0:	movw	r1, #5385	; 0x1509
   2f5a4:	movt	r1, #4
   2f5a8:	bl	124cc <strcmp@plt>
   2f5ac:	cmp	r0, #0
   2f5b0:	mov	r0, #1
   2f5b4:	beq	2f5d0 <__assert_fail@plt+0x1ca14>
   2f5b8:	mov	r0, r7
   2f5bc:	movw	r1, #18670	; 0x48ee
   2f5c0:	movt	r1, #4
   2f5c4:	bl	124cc <strcmp@plt>
   2f5c8:	clz	r0, r0
   2f5cc:	lsr	r0, r0, #5
   2f5d0:	bic	r1, r6, #1
   2f5d4:	orr	r6, r1, r0
   2f5d8:	strb	r6, [r4, #24]
   2f5dc:	ldr	r5, [r4]
   2f5e0:	mov	r0, r5
   2f5e4:	mov	r1, #58	; 0x3a
   2f5e8:	bl	12898 <strchr@plt>
   2f5ec:	cmp	r0, #0
   2f5f0:	movw	sl, #18559	; 0x487f
   2f5f4:	movt	sl, #4
   2f5f8:	add	r8, sp, #20
   2f5fc:	beq	2f1dc <__assert_fail@plt+0x1c620>
   2f600:	mov	r1, #1
   2f604:	and	r0, r6, #253	; 0xfd
   2f608:	orr	r0, r0, r1, lsl #1
   2f60c:	strb	r0, [r4, #24]
   2f610:	ldr	r0, [sp, #8]
   2f614:	str	r4, [r0]
   2f618:	add	r4, r4, #28
   2f61c:	add	r7, sp, #12
   2f620:	b	2f630 <__assert_fail@plt+0x1ca74>
   2f624:	movw	sl, #18559	; 0x487f
   2f628:	movt	sl, #4
   2f62c:	add	r8, sp, #20
   2f630:	add	r6, sp, #16
   2f634:	add	r5, sp, #28
   2f638:	mov	r0, r5
   2f63c:	add	r1, sp, #24
   2f640:	mov	r2, r9
   2f644:	bl	12b08 <getline@plt>
   2f648:	cmn	r0, #1
   2f64c:	bne	2f338 <__assert_fail@plt+0x1c77c>
   2f650:	ldr	r0, [sp, #28]
   2f654:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2f658:	mov	r0, r9
   2f65c:	bl	1276c <ferror_unlocked@plt>
   2f660:	cmp	r0, #0
   2f664:	beq	2f6c0 <__assert_fail@plt+0x1cb04>
   2f668:	bl	128d4 <__errno_location@plt>
   2f66c:	mov	r5, r0
   2f670:	ldr	r6, [r0]
   2f674:	mov	r0, r9
   2f678:	bl	129a0 <fclose@plt>
   2f67c:	str	r6, [r5]
   2f680:	bl	128d4 <__errno_location@plt>
   2f684:	mov	r5, r0
   2f688:	ldr	r8, [r0]
   2f68c:	mov	r6, #0
   2f690:	str	r6, [r4]
   2f694:	ldr	r0, [sp, #32]
   2f698:	cmp	r0, #0
   2f69c:	beq	2f6b8 <__assert_fail@plt+0x1cafc>
   2f6a0:	ldr	r7, [r0, #28]
   2f6a4:	bl	2f7c0 <__assert_fail@plt+0x1cc04>
   2f6a8:	cmp	r7, #0
   2f6ac:	mov	r0, r7
   2f6b0:	bne	2f6a0 <__assert_fail@plt+0x1cae4>
   2f6b4:	str	r7, [sp, #32]
   2f6b8:	str	r8, [r5]
   2f6bc:	b	2f6fc <__assert_fail@plt+0x1cb40>
   2f6c0:	mov	r0, r9
   2f6c4:	bl	129a0 <fclose@plt>
   2f6c8:	cmn	r0, #1
   2f6cc:	bne	2f6f0 <__assert_fail@plt+0x1cb34>
   2f6d0:	b	2f680 <__assert_fail@plt+0x1cac4>
   2f6d4:	mov	r6, #0
   2f6d8:	b	2f6fc <__assert_fail@plt+0x1cb40>
   2f6dc:	add	r4, sp, #32
   2f6e0:	mov	r0, r8
   2f6e4:	bl	129c4 <endmntent@plt>
   2f6e8:	cmp	r0, #0
   2f6ec:	beq	2f680 <__assert_fail@plt+0x1cac4>
   2f6f0:	mov	r0, #0
   2f6f4:	str	r0, [r4]
   2f6f8:	ldr	r6, [sp, #32]
   2f6fc:	mov	r0, r6
   2f700:	sub	sp, fp, #28
   2f704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f708:	push	{fp, lr}
   2f70c:	mov	fp, sp
   2f710:	mov	r1, #32
   2f714:	bl	12898 <strchr@plt>
   2f718:	cmp	r0, #0
   2f71c:	movne	r1, #0
   2f720:	strbne	r1, [r0]
   2f724:	pop	{fp, pc}
   2f728:	push	{r4, r5, r6, r7, fp, lr}
   2f72c:	add	fp, sp, #16
   2f730:	mov	r7, r0
   2f734:	bl	1288c <strlen@plt>
   2f738:	adds	r0, r0, #1
   2f73c:	popeq	{r4, r5, r6, r7, fp, pc}
   2f740:	mov	r2, #0
   2f744:	mov	r1, r7
   2f748:	ldrb	r3, [r7, r2]
   2f74c:	add	r6, r2, #4
   2f750:	cmp	r6, r0
   2f754:	bcs	2f7ac <__assert_fail@plt+0x1cbf0>
   2f758:	cmp	r3, #92	; 0x5c
   2f75c:	bne	2f7ac <__assert_fail@plt+0x1cbf0>
   2f760:	add	r6, r7, r2
   2f764:	ldrb	r4, [r6, #1]
   2f768:	and	r5, r4, #252	; 0xfc
   2f76c:	cmp	r5, #48	; 0x30
   2f770:	bne	2f7ac <__assert_fail@plt+0x1cbf0>
   2f774:	ldrb	ip, [r6, #2]
   2f778:	and	r6, ip, #248	; 0xf8
   2f77c:	cmp	r6, #48	; 0x30
   2f780:	bne	2f7ac <__assert_fail@plt+0x1cbf0>
   2f784:	add	lr, r2, #3
   2f788:	ldrb	r6, [r7, lr]
   2f78c:	and	r5, r6, #248	; 0xf8
   2f790:	cmp	r5, #48	; 0x30
   2f794:	bne	2f7ac <__assert_fail@plt+0x1cbf0>
   2f798:	lsl	r2, r4, #6
   2f79c:	add	r2, r2, ip, lsl #3
   2f7a0:	add	r2, r2, r6
   2f7a4:	add	r3, r2, #80	; 0x50
   2f7a8:	mov	r2, lr
   2f7ac:	strb	r3, [r1], #1
   2f7b0:	add	r2, r2, #1
   2f7b4:	cmp	r2, r0
   2f7b8:	bcc	2f748 <__assert_fail@plt+0x1cb8c>
   2f7bc:	pop	{r4, r5, r6, r7, fp, pc}
   2f7c0:	push	{r4, sl, fp, lr}
   2f7c4:	add	fp, sp, #8
   2f7c8:	mov	r4, r0
   2f7cc:	ldr	r0, [r0]
   2f7d0:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2f7d4:	ldr	r0, [r4, #4]
   2f7d8:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2f7dc:	ldr	r0, [r4, #8]
   2f7e0:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2f7e4:	ldrb	r0, [r4, #24]
   2f7e8:	tst	r0, #4
   2f7ec:	beq	2f7f8 <__assert_fail@plt+0x1cc3c>
   2f7f0:	ldr	r0, [r4, #12]
   2f7f4:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2f7f8:	mov	r0, r4
   2f7fc:	pop	{r4, sl, fp, lr}
   2f800:	b	2ca78 <__assert_fail@plt+0x19ebc>
   2f804:	push	{fp, lr}
   2f808:	mov	fp, sp
   2f80c:	cmp	r0, #0
   2f810:	beq	2f82c <__assert_fail@plt+0x1cc70>
   2f814:	cmp	r1, #0
   2f818:	beq	2f838 <__assert_fail@plt+0x1cc7c>
   2f81c:	cmn	r1, #1
   2f820:	ble	2f844 <__assert_fail@plt+0x1cc88>
   2f824:	pop	{fp, lr}
   2f828:	b	1267c <realloc@plt>
   2f82c:	mov	r0, r1
   2f830:	pop	{fp, lr}
   2f834:	b	2ed04 <__assert_fail@plt+0x1c148>
   2f838:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   2f83c:	mov	r0, #0
   2f840:	pop	{fp, pc}
   2f844:	bl	128d4 <__errno_location@plt>
   2f848:	mov	r1, #12
   2f84c:	str	r1, [r0]
   2f850:	mov	r0, #0
   2f854:	pop	{fp, pc}
   2f858:	cmp	r2, #0
   2f85c:	beq	2f88c <__assert_fail@plt+0x1ccd0>
   2f860:	mvn	r3, #0
   2f864:	udiv	r3, r3, r2
   2f868:	cmp	r3, r1
   2f86c:	bcs	2f88c <__assert_fail@plt+0x1ccd0>
   2f870:	push	{fp, lr}
   2f874:	mov	fp, sp
   2f878:	bl	128d4 <__errno_location@plt>
   2f87c:	mov	r1, #12
   2f880:	str	r1, [r0]
   2f884:	mov	r0, #0
   2f888:	pop	{fp, pc}
   2f88c:	mul	r1, r2, r1
   2f890:	b	2f804 <__assert_fail@plt+0x1cc48>
   2f894:	push	{fp, lr}
   2f898:	mov	fp, sp
   2f89c:	mov	ip, r1
   2f8a0:	mov	lr, r0
   2f8a4:	movw	r0, #24280	; 0x5ed8
   2f8a8:	movt	r0, #5
   2f8ac:	ldr	r3, [r0]
   2f8b0:	mov	r0, #16
   2f8b4:	and	r0, r0, r3, lsr #21
   2f8b8:	ldrb	r1, [r2, #28]
   2f8bc:	and	r1, r1, #111	; 0x6f
   2f8c0:	orr	r0, r1, r0
   2f8c4:	orr	r0, r0, #128	; 0x80
   2f8c8:	strb	r0, [r2, #28]
   2f8cc:	mov	r0, r2
   2f8d0:	mov	r1, lr
   2f8d4:	mov	r2, ip
   2f8d8:	bl	2f910 <__assert_fail@plt+0x1cd54>
   2f8dc:	cmp	r0, #0
   2f8e0:	moveq	r0, #0
   2f8e4:	popeq	{fp, pc}
   2f8e8:	movw	r1, #19152	; 0x4ad0
   2f8ec:	movt	r1, #4
   2f8f0:	ldr	r0, [r1, r0, lsl #2]
   2f8f4:	movw	r1, #18768	; 0x4950
   2f8f8:	movt	r1, #4
   2f8fc:	add	r1, r1, r0
   2f900:	mov	r0, #0
   2f904:	mov	r2, #5
   2f908:	pop	{fp, lr}
   2f90c:	b	1264c <dcgettext@plt>
   2f910:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2f914:	add	fp, sp, #24
   2f918:	sub	sp, sp, #96	; 0x60
   2f91c:	mov	r6, r3
   2f920:	mov	r7, r2
   2f924:	mov	r8, r1
   2f928:	mov	r4, r0
   2f92c:	mov	r0, #0
   2f930:	str	r0, [fp, #-28]	; 0xffffffe4
   2f934:	str	r0, [r4, #8]
   2f938:	str	r3, [r4, #12]
   2f93c:	str	r0, [r4, #24]
   2f940:	ldrb	r0, [r4, #28]
   2f944:	and	r0, r0, #144	; 0x90
   2f948:	strb	r0, [r4, #28]
   2f94c:	ldr	r5, [r4]
   2f950:	ldr	r0, [r4, #4]
   2f954:	cmp	r0, #159	; 0x9f
   2f958:	bls	2faac <__assert_fail@plt+0x1cef0>
   2f95c:	mov	r0, #160	; 0xa0
   2f960:	str	r0, [r4, #8]
   2f964:	mov	r0, r5
   2f968:	mov	r1, r7
   2f96c:	bl	31024 <__assert_fail@plt+0x1e468>
   2f970:	str	r0, [fp, #-28]	; 0xffffffe4
   2f974:	cmp	r0, #0
   2f978:	bne	2f9ac <__assert_fail@plt+0x1cdf0>
   2f97c:	movw	r1, #9624	; 0x2598
   2f980:	movt	r1, #1
   2f984:	movw	r2, #10548	; 0x2934
   2f988:	movt	r2, #1
   2f98c:	orrs	r1, r2, r1
   2f990:	beq	2f9ac <__assert_fail@plt+0x1cdf0>
   2f994:	add	r0, r5, #136	; 0x88
   2f998:	mov	r1, #0
   2f99c:	bl	125ec <pthread_mutex_init@plt>
   2f9a0:	cmp	r0, #0
   2f9a4:	bne	2fad8 <__assert_fail@plt+0x1cf1c>
   2f9a8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2f9ac:	cmp	r0, #0
   2f9b0:	bne	2fae0 <__assert_fail@plt+0x1cf24>
   2f9b4:	ldr	r3, [r4, #20]
   2f9b8:	str	r5, [sp, #4]
   2f9bc:	ubfx	r0, r6, #22, #1
   2f9c0:	str	r0, [sp]
   2f9c4:	add	r0, sp, #8
   2f9c8:	mov	r1, r8
   2f9cc:	mov	r2, r7
   2f9d0:	bl	311d0 <__assert_fail@plt+0x1e614>
   2f9d4:	str	r0, [fp, #-28]	; 0xffffffe4
   2f9d8:	cmp	r0, #0
   2f9dc:	bne	2fa78 <__assert_fail@plt+0x1cebc>
   2f9e0:	mov	r0, #0
   2f9e4:	str	r0, [r4, #24]
   2f9e8:	add	r0, sp, #8
   2f9ec:	sub	r3, fp, #28
   2f9f0:	mov	r1, r4
   2f9f4:	mov	r2, r6
   2f9f8:	bl	313a4 <__assert_fail@plt+0x1e7e8>
   2f9fc:	str	r0, [r5, #52]	; 0x34
   2fa00:	cmp	r0, #0
   2fa04:	beq	2fa78 <__assert_fail@plt+0x1cebc>
   2fa08:	mov	r0, r4
   2fa0c:	bl	31478 <__assert_fail@plt+0x1e8bc>
   2fa10:	str	r0, [fp, #-28]	; 0xffffffe4
   2fa14:	cmp	r0, #0
   2fa18:	bne	2fa78 <__assert_fail@plt+0x1cebc>
   2fa1c:	ands	r0, r6, #4194304	; 0x400000
   2fa20:	bne	2fa44 <__assert_fail@plt+0x1ce88>
   2fa24:	ldrb	r0, [r5, #88]	; 0x58
   2fa28:	ands	r0, r0, #4
   2fa2c:	beq	2fa44 <__assert_fail@plt+0x1ce88>
   2fa30:	ldr	r0, [r4, #20]
   2fa34:	cmp	r0, #0
   2fa38:	bne	2fa44 <__assert_fail@plt+0x1ce88>
   2fa3c:	mov	r0, r5
   2fa40:	bl	31694 <__assert_fail@plt+0x1ead8>
   2fa44:	mov	r0, r5
   2fa48:	bl	31830 <__assert_fail@plt+0x1ec74>
   2fa4c:	str	r0, [fp, #-28]	; 0xffffffe4
   2fa50:	mov	r0, r4
   2fa54:	bl	31320 <__assert_fail@plt+0x1e764>
   2fa58:	add	r0, sp, #8
   2fa5c:	bl	31370 <__assert_fail@plt+0x1e7b4>
   2fa60:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2fa64:	cmp	r0, #0
   2fa68:	bne	2fa88 <__assert_fail@plt+0x1cecc>
   2fa6c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2fa70:	sub	sp, fp, #24
   2fa74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2fa78:	mov	r0, r4
   2fa7c:	bl	31320 <__assert_fail@plt+0x1e764>
   2fa80:	add	r0, sp, #8
   2fa84:	bl	31370 <__assert_fail@plt+0x1e7b4>
   2fa88:	movw	r0, #9624	; 0x2598
   2fa8c:	movt	r0, #1
   2fa90:	movw	r1, #10548	; 0x2934
   2fa94:	movt	r1, #1
   2fa98:	orrs	r0, r1, r0
   2fa9c:	beq	2fae0 <__assert_fail@plt+0x1cf24>
   2faa0:	add	r0, r5, #136	; 0x88
   2faa4:	bl	12514 <pthread_mutex_destroy@plt>
   2faa8:	b	2fae0 <__assert_fail@plt+0x1cf24>
   2faac:	mov	r9, #160	; 0xa0
   2fab0:	mov	r0, r5
   2fab4:	mov	r1, #160	; 0xa0
   2fab8:	bl	2f804 <__assert_fail@plt+0x1cc48>
   2fabc:	cmp	r0, #0
   2fac0:	moveq	r0, #12
   2fac4:	subeq	sp, fp, #24
   2fac8:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2facc:	mov	r5, r0
   2fad0:	stm	r4, {r0, r9}
   2fad4:	b	2f95c <__assert_fail@plt+0x1cda0>
   2fad8:	mov	r0, #12
   2fadc:	str	r0, [fp, #-28]	; 0xffffffe4
   2fae0:	mov	r0, r5
   2fae4:	bl	30144 <__assert_fail@plt+0x1d588>
   2fae8:	mov	r0, #0
   2faec:	str	r0, [r4]
   2faf0:	str	r0, [r4, #4]
   2faf4:	b	2fa6c <__assert_fail@plt+0x1ceb0>
   2faf8:	movw	r2, #24280	; 0x5ed8
   2fafc:	movt	r2, #5
   2fb00:	ldr	r1, [r2]
   2fb04:	str	r0, [r2]
   2fb08:	mov	r0, r1
   2fb0c:	bx	lr
   2fb10:	push	{r4, r5, r6, sl, fp, lr}
   2fb14:	add	fp, sp, #16
   2fb18:	mov	r4, r0
   2fb1c:	ldr	r6, [r0]
   2fb20:	ldr	r5, [r0, #16]
   2fb24:	mov	r0, r5
   2fb28:	mov	r1, #0
   2fb2c:	mov	r2, #256	; 0x100
   2fb30:	bl	12904 <memset@plt>
   2fb34:	ldr	r1, [r6, #36]	; 0x24
   2fb38:	mov	r0, r4
   2fb3c:	mov	r2, r5
   2fb40:	bl	2fbac <__assert_fail@plt+0x1cff0>
   2fb44:	ldr	r0, [r6, #36]	; 0x24
   2fb48:	ldr	r1, [r6, #40]	; 0x28
   2fb4c:	cmp	r0, r1
   2fb50:	beq	2fb60 <__assert_fail@plt+0x1cfa4>
   2fb54:	mov	r0, r4
   2fb58:	mov	r2, r5
   2fb5c:	bl	2fbac <__assert_fail@plt+0x1cff0>
   2fb60:	ldr	r0, [r6, #36]	; 0x24
   2fb64:	ldr	r1, [r6, #44]	; 0x2c
   2fb68:	cmp	r0, r1
   2fb6c:	beq	2fb7c <__assert_fail@plt+0x1cfc0>
   2fb70:	mov	r0, r4
   2fb74:	mov	r2, r5
   2fb78:	bl	2fbac <__assert_fail@plt+0x1cff0>
   2fb7c:	ldr	r0, [r6, #36]	; 0x24
   2fb80:	ldr	r1, [r6, #48]	; 0x30
   2fb84:	cmp	r0, r1
   2fb88:	beq	2fb98 <__assert_fail@plt+0x1cfdc>
   2fb8c:	mov	r0, r4
   2fb90:	mov	r2, r5
   2fb94:	bl	2fbac <__assert_fail@plt+0x1cff0>
   2fb98:	ldrb	r0, [r4, #28]
   2fb9c:	orr	r0, r0, #8
   2fba0:	strb	r0, [r4, #28]
   2fba4:	mov	r0, #0
   2fba8:	pop	{r4, r5, r6, sl, fp, pc}
   2fbac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fbb0:	add	fp, sp, #28
   2fbb4:	sub	sp, sp, #308	; 0x134
   2fbb8:	str	r2, [sp, #28]
   2fbbc:	str	r0, [sp, #16]
   2fbc0:	ldr	r8, [r0]
   2fbc4:	ldr	r0, [r8, #92]	; 0x5c
   2fbc8:	mov	sl, #0
   2fbcc:	cmp	r0, #1
   2fbd0:	ldreq	r0, [sp, #16]
   2fbd4:	ldrbeq	r0, [r0, #14]
   2fbd8:	ubfxeq	sl, r0, #6, #1
   2fbdc:	ldr	r0, [r1, #8]
   2fbe0:	cmp	r0, #1
   2fbe4:	blt	2ff20 <__assert_fail@plt+0x1d364>
   2fbe8:	add	r0, sp, #32
   2fbec:	add	r0, r0, #1
   2fbf0:	str	r0, [sp]
   2fbf4:	mov	r4, #1
   2fbf8:	movw	r0, #1
   2fbfc:	movt	r0, #32
   2fc00:	add	r0, r0, #254	; 0xfe
   2fc04:	str	r0, [sp, #4]
   2fc08:	mov	r2, #0
   2fc0c:	str	r1, [sp, #8]
   2fc10:	str	r8, [sp, #20]
   2fc14:	ldr	r0, [r1, #12]
   2fc18:	str	r2, [sp, #12]
   2fc1c:	ldr	r9, [r0, r2, lsl #2]
   2fc20:	ldr	r0, [r8]
   2fc24:	add	r1, r0, r9, lsl #3
   2fc28:	ldrb	r5, [r1, #4]
   2fc2c:	cmp	r5, #1
   2fc30:	beq	2fcb8 <__assert_fail@plt+0x1d0fc>
   2fc34:	cmp	r5, #6
   2fc38:	beq	2fdb8 <__assert_fail@plt+0x1d1fc>
   2fc3c:	cmp	r5, #3
   2fc40:	bne	2fe3c <__assert_fail@plt+0x1d280>
   2fc44:	mov	r7, #0
   2fc48:	ldr	r5, [sp, #28]
   2fc4c:	mov	r6, #0
   2fc50:	str	r9, [sp, #24]
   2fc54:	ldr	r0, [r8]
   2fc58:	ldr	r0, [r0, r9, lsl #3]
   2fc5c:	ldr	r9, [r0, r6, lsl #2]
   2fc60:	mov	r8, #0
   2fc64:	b	2fc7c <__assert_fail@plt+0x1d0c0>
   2fc68:	add	r0, r7, r8
   2fc6c:	bl	125e0 <tolower@plt>
   2fc70:	ldr	r1, [sp, #28]
   2fc74:	strb	r4, [r1, r0]
   2fc78:	b	2fc8c <__assert_fail@plt+0x1d0d0>
   2fc7c:	tst	r9, r4, lsl r8
   2fc80:	strbne	r4, [r5, r8]
   2fc84:	cmpne	sl, #0
   2fc88:	bne	2fc68 <__assert_fail@plt+0x1d0ac>
   2fc8c:	add	r8, r8, #1
   2fc90:	cmp	r8, #32
   2fc94:	bne	2fc7c <__assert_fail@plt+0x1d0c0>
   2fc98:	add	r5, r5, #32
   2fc9c:	add	r6, r6, #1
   2fca0:	add	r7, r7, #32
   2fca4:	cmp	r6, #8
   2fca8:	ldr	r8, [sp, #20]
   2fcac:	ldr	r9, [sp, #24]
   2fcb0:	bne	2fc54 <__assert_fail@plt+0x1d098>
   2fcb4:	b	2ff08 <__assert_fail@plt+0x1d34c>
   2fcb8:	ldrb	r0, [r0, r9, lsl #3]
   2fcbc:	ldr	r1, [sp, #28]
   2fcc0:	strb	r4, [r1, r0]
   2fcc4:	cmp	sl, #0
   2fcc8:	beq	2fcd8 <__assert_fail@plt+0x1d11c>
   2fccc:	bl	125e0 <tolower@plt>
   2fcd0:	ldr	r1, [sp, #28]
   2fcd4:	strb	r4, [r1, r0]
   2fcd8:	ldr	r0, [sp, #16]
   2fcdc:	ldrb	r0, [r0, #14]
   2fce0:	tst	r0, #64	; 0x40
   2fce4:	beq	2ff08 <__assert_fail@plt+0x1d34c>
   2fce8:	ldr	r0, [r8, #92]	; 0x5c
   2fcec:	cmp	r0, #2
   2fcf0:	blt	2ff08 <__assert_fail@plt+0x1d34c>
   2fcf4:	ldr	r0, [r8]
   2fcf8:	ldrb	r0, [r0, r9, lsl #3]
   2fcfc:	strb	r0, [sp, #32]
   2fd00:	ldr	r0, [r8, #8]
   2fd04:	add	r1, r9, #1
   2fd08:	cmp	r1, r0
   2fd0c:	ldr	r0, [sp]
   2fd10:	add	r5, sp, #32
   2fd14:	bcs	2fd60 <__assert_fail@plt+0x1d1a4>
   2fd18:	ldr	r0, [sp]
   2fd1c:	ldr	r1, [r8]
   2fd20:	add	r1, r1, r9, lsl #3
   2fd24:	ldr	r2, [r1, #12]
   2fd28:	ldr	r3, [sp, #4]
   2fd2c:	and	r2, r2, r3
   2fd30:	movw	r3, #1
   2fd34:	movt	r3, #32
   2fd38:	cmp	r2, r3
   2fd3c:	bne	2fd60 <__assert_fail@plt+0x1d1a4>
   2fd40:	ldrb	r1, [r1, #8]
   2fd44:	strb	r1, [r0], #1
   2fd48:	add	r1, r9, #1
   2fd4c:	ldr	r2, [r8, #8]
   2fd50:	add	r3, r9, #2
   2fd54:	cmp	r3, r2
   2fd58:	mov	r9, r1
   2fd5c:	bcc	2fd1c <__assert_fail@plt+0x1d160>
   2fd60:	mov	r1, #0
   2fd64:	str	r1, [fp, #-44]	; 0xffffffd4
   2fd68:	str	r1, [fp, #-48]	; 0xffffffd0
   2fd6c:	sub	r6, r0, r5
   2fd70:	sub	r0, fp, #36	; 0x24
   2fd74:	mov	r1, r5
   2fd78:	mov	r2, r6
   2fd7c:	sub	r3, fp, #48	; 0x30
   2fd80:	bl	2ed34 <__assert_fail@plt+0x1c178>
   2fd84:	cmp	r0, r6
   2fd88:	bne	2ff08 <__assert_fail@plt+0x1d34c>
   2fd8c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2fd90:	bl	125f8 <towlower@plt>
   2fd94:	mov	r1, r0
   2fd98:	mov	r0, r5
   2fd9c:	sub	r2, fp, #48	; 0x30
   2fda0:	bl	12490 <wcrtomb@plt>
   2fda4:	cmn	r0, #1
   2fda8:	ldrbne	r0, [sp, #32]
   2fdac:	ldrne	r1, [sp, #28]
   2fdb0:	strbne	r4, [r1, r0]
   2fdb4:	b	2ff08 <__assert_fail@plt+0x1d34c>
   2fdb8:	ldr	r6, [r0, r9, lsl #3]
   2fdbc:	ldr	r0, [r8, #92]	; 0x5c
   2fdc0:	cmp	r0, #2
   2fdc4:	blt	2fe54 <__assert_fail@plt+0x1d298>
   2fdc8:	ldr	r0, [r6, #36]	; 0x24
   2fdcc:	cmp	r0, #0
   2fdd0:	bne	2fde8 <__assert_fail@plt+0x1d22c>
   2fdd4:	ldrb	r0, [r6, #16]
   2fdd8:	tst	r0, #1
   2fddc:	ldreq	r0, [r6, #32]
   2fde0:	cmpeq	r0, #0
   2fde4:	beq	2fe54 <__assert_fail@plt+0x1d298>
   2fde8:	mov	r0, #0
   2fdec:	strb	r0, [fp, #-48]	; 0xffffffd0
   2fdf0:	add	r5, sp, #32
   2fdf4:	mov	r0, #0
   2fdf8:	str	r0, [sp, #36]	; 0x24
   2fdfc:	str	r0, [sp, #32]
   2fe00:	mov	r0, #0
   2fe04:	sub	r1, fp, #48	; 0x30
   2fe08:	mov	r2, #1
   2fe0c:	mov	r3, r5
   2fe10:	bl	2ed34 <__assert_fail@plt+0x1c178>
   2fe14:	cmn	r0, #2
   2fe18:	ldrbeq	r0, [fp, #-48]	; 0xffffffd0
   2fe1c:	ldreq	r1, [sp, #28]
   2fe20:	strbeq	r4, [r1, r0]
   2fe24:	ldrb	r0, [fp, #-48]	; 0xffffffd0
   2fe28:	add	r0, r0, #1
   2fe2c:	strb	r0, [fp, #-48]	; 0xffffffd0
   2fe30:	tst	r0, #255	; 0xff
   2fe34:	bne	2fdf4 <__assert_fail@plt+0x1d238>
   2fe38:	b	2ff08 <__assert_fail@plt+0x1d34c>
   2fe3c:	cmp	r5, #7
   2fe40:	bhi	2ff08 <__assert_fail@plt+0x1d34c>
   2fe44:	mov	r0, #164	; 0xa4
   2fe48:	tst	r0, r4, lsl r5
   2fe4c:	beq	2ff08 <__assert_fail@plt+0x1d34c>
   2fe50:	b	2ff28 <__assert_fail@plt+0x1d36c>
   2fe54:	ldr	r0, [r6, #20]
   2fe58:	cmp	r0, #1
   2fe5c:	blt	2ff08 <__assert_fail@plt+0x1d34c>
   2fe60:	mov	r9, #0
   2fe64:	mov	r0, #0
   2fe68:	str	r0, [fp, #-44]	; 0xffffffd4
   2fe6c:	str	r0, [fp, #-48]	; 0xffffffd0
   2fe70:	ldr	r0, [r6]
   2fe74:	ldr	r1, [r0, r9, lsl #2]
   2fe78:	add	r5, sp, #32
   2fe7c:	mov	r0, r5
   2fe80:	sub	r2, fp, #48	; 0x30
   2fe84:	bl	12490 <wcrtomb@plt>
   2fe88:	cmn	r0, #1
   2fe8c:	beq	2feb0 <__assert_fail@plt+0x1d2f4>
   2fe90:	ldrb	r0, [sp, #32]
   2fe94:	ldr	r1, [sp, #28]
   2fe98:	strb	r4, [r1, r0]
   2fe9c:	cmp	sl, #0
   2fea0:	beq	2feb0 <__assert_fail@plt+0x1d2f4>
   2fea4:	bl	125e0 <tolower@plt>
   2fea8:	ldr	r1, [sp, #28]
   2feac:	strb	r4, [r1, r0]
   2feb0:	ldr	r0, [sp, #16]
   2feb4:	ldrb	r0, [r0, #14]
   2feb8:	tst	r0, #64	; 0x40
   2febc:	beq	2fef8 <__assert_fail@plt+0x1d33c>
   2fec0:	ldr	r0, [r8, #92]	; 0x5c
   2fec4:	cmp	r0, #2
   2fec8:	blt	2fef8 <__assert_fail@plt+0x1d33c>
   2fecc:	ldr	r0, [r6]
   2fed0:	ldr	r0, [r0, r9, lsl #2]
   2fed4:	bl	125f8 <towlower@plt>
   2fed8:	mov	r1, r0
   2fedc:	mov	r0, r5
   2fee0:	sub	r2, fp, #48	; 0x30
   2fee4:	bl	12490 <wcrtomb@plt>
   2fee8:	cmn	r0, #1
   2feec:	ldrbne	r0, [sp, #32]
   2fef0:	ldrne	r1, [sp, #28]
   2fef4:	strbne	r4, [r1, r0]
   2fef8:	add	r9, r9, #1
   2fefc:	ldr	r0, [r6, #20]
   2ff00:	cmp	r9, r0
   2ff04:	blt	2fe64 <__assert_fail@plt+0x1d2a8>
   2ff08:	ldr	r1, [sp, #8]
   2ff0c:	ldr	r0, [r1, #8]
   2ff10:	ldr	r2, [sp, #12]
   2ff14:	add	r2, r2, #1
   2ff18:	cmp	r2, r0
   2ff1c:	blt	2fc14 <__assert_fail@plt+0x1d058>
   2ff20:	sub	sp, fp, #28
   2ff24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ff28:	ldr	r0, [sp, #28]
   2ff2c:	mov	r1, #1
   2ff30:	mov	r2, #256	; 0x100
   2ff34:	bl	12904 <memset@plt>
   2ff38:	cmp	r5, #2
   2ff3c:	ldreq	r1, [sp, #16]
   2ff40:	ldrbeq	r0, [r1, #28]
   2ff44:	orreq	r0, r0, #1
   2ff48:	strbeq	r0, [r1, #28]
   2ff4c:	sub	sp, fp, #28
   2ff50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ff54:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2ff58:	add	fp, sp, #24
   2ff5c:	mov	r7, r2
   2ff60:	mov	r8, r1
   2ff64:	mov	r4, r0
   2ff68:	mov	r0, #0
   2ff6c:	str	r0, [r4]
   2ff70:	str	r0, [r4, #4]
   2ff74:	str	r0, [r4, #8]
   2ff78:	mov	r0, #256	; 0x100
   2ff7c:	bl	2ed04 <__assert_fail@plt+0x1c148>
   2ff80:	str	r0, [r4, #16]
   2ff84:	cmp	r0, #0
   2ff88:	beq	30038 <__assert_fail@plt+0x1d47c>
   2ff8c:	movw	r0, #45820	; 0xb2fc
   2ff90:	movt	r0, #3
   2ff94:	tst	r7, #1
   2ff98:	movweq	r0, #710	; 0x2c6
   2ff9c:	movteq	r0, #257	; 0x101
   2ffa0:	and	r1, r7, #2
   2ffa4:	orr	r5, r0, r1, lsl #21
   2ffa8:	tst	r7, #4
   2ffac:	bne	2ffc0 <__assert_fail@plt+0x1d404>
   2ffb0:	ldrb	r0, [r4, #28]
   2ffb4:	and	r0, r0, #127	; 0x7f
   2ffb8:	strb	r0, [r4, #28]
   2ffbc:	b	2ffdc <__assert_fail@plt+0x1d420>
   2ffc0:	ldrb	r0, [r4, #28]
   2ffc4:	orr	r0, r0, #128	; 0x80
   2ffc8:	strb	r0, [r4, #28]
   2ffcc:	movw	r0, #45758	; 0xb2be
   2ffd0:	movt	r0, #323	; 0x143
   2ffd4:	and	r0, r5, r0
   2ffd8:	orr	r5, r0, #256	; 0x100
   2ffdc:	mov	r6, #0
   2ffe0:	str	r6, [r4, #20]
   2ffe4:	and	r0, r7, #8
   2ffe8:	ldrb	r1, [r4, #28]
   2ffec:	and	r1, r1, #239	; 0xef
   2fff0:	orr	r0, r1, r0, lsl #1
   2fff4:	strb	r0, [r4, #28]
   2fff8:	mov	r0, r8
   2fffc:	bl	1288c <strlen@plt>
   30000:	mov	r2, r0
   30004:	mov	r0, r4
   30008:	mov	r1, r8
   3000c:	mov	r3, r5
   30010:	bl	2f910 <__assert_fail@plt+0x1cd54>
   30014:	mov	r5, r0
   30018:	cmp	r0, #16
   3001c:	movweq	r5, #8
   30020:	cmp	r5, #0
   30024:	bne	30044 <__assert_fail@plt+0x1d488>
   30028:	mov	r0, r4
   3002c:	bl	2fb10 <__assert_fail@plt+0x1cf54>
   30030:	mov	r0, r6
   30034:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   30038:	mov	r6, #12
   3003c:	mov	r0, r6
   30040:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   30044:	ldr	r0, [r4, #16]
   30048:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3004c:	str	r6, [r4, #16]
   30050:	mov	r0, r5
   30054:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   30058:	push	{r4, r5, r6, r7, fp, lr}
   3005c:	add	fp, sp, #16
   30060:	cmp	r0, #17
   30064:	bcs	300d8 <__assert_fail@plt+0x1d51c>
   30068:	mov	r5, r3
   3006c:	mov	r4, r2
   30070:	movw	r1, #19152	; 0x4ad0
   30074:	movt	r1, #4
   30078:	ldr	r0, [r1, r0, lsl #2]
   3007c:	movw	r1, #18768	; 0x4950
   30080:	movt	r1, #4
   30084:	add	r1, r1, r0
   30088:	mov	r0, #0
   3008c:	mov	r2, #5
   30090:	bl	1264c <dcgettext@plt>
   30094:	mov	r6, r0
   30098:	bl	1288c <strlen@plt>
   3009c:	add	r7, r0, #1
   300a0:	cmp	r5, #0
   300a4:	beq	300c0 <__assert_fail@plt+0x1d504>
   300a8:	cmp	r7, r5
   300ac:	mov	r2, r7
   300b0:	bhi	300c8 <__assert_fail@plt+0x1d50c>
   300b4:	mov	r0, r4
   300b8:	mov	r1, r6
   300bc:	bl	125c8 <memcpy@plt>
   300c0:	mov	r0, r7
   300c4:	pop	{r4, r5, r6, r7, fp, pc}
   300c8:	sub	r2, r5, #1
   300cc:	mov	r0, #0
   300d0:	strb	r0, [r4, r2]
   300d4:	b	300b4 <__assert_fail@plt+0x1d4f8>
   300d8:	bl	12b68 <abort@plt>
   300dc:	push	{r4, r5, fp, lr}
   300e0:	add	fp, sp, #8
   300e4:	mov	r4, r0
   300e8:	ldr	r5, [r0]
   300ec:	cmp	r5, #0
   300f0:	beq	3011c <__assert_fail@plt+0x1d560>
   300f4:	movw	r0, #9624	; 0x2598
   300f8:	movt	r0, #1
   300fc:	movw	r1, #10548	; 0x2934
   30100:	movt	r1, #1
   30104:	orrs	r0, r1, r0
   30108:	beq	30114 <__assert_fail@plt+0x1d558>
   3010c:	add	r0, r5, #136	; 0x88
   30110:	bl	12514 <pthread_mutex_destroy@plt>
   30114:	mov	r0, r5
   30118:	bl	30144 <__assert_fail@plt+0x1d588>
   3011c:	mov	r5, #0
   30120:	str	r5, [r4]
   30124:	str	r5, [r4, #4]
   30128:	ldr	r0, [r4, #16]
   3012c:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   30130:	str	r5, [r4, #16]
   30134:	ldr	r0, [r4, #20]
   30138:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3013c:	str	r5, [r4, #20]
   30140:	pop	{r4, r5, fp, pc}
   30144:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   30148:	add	fp, sp, #24
   3014c:	mov	r8, r0
   30150:	ldr	r0, [r0]
   30154:	cmp	r0, #0
   30158:	ldrne	r0, [r8, #8]
   3015c:	cmpne	r0, #0
   30160:	beq	3018c <__assert_fail@plt+0x1d5d0>
   30164:	mov	r5, #0
   30168:	mov	r6, #0
   3016c:	ldr	r0, [r8]
   30170:	add	r0, r0, r5
   30174:	bl	30f5c <__assert_fail@plt+0x1e3a0>
   30178:	add	r5, r5, #8
   3017c:	add	r6, r6, #1
   30180:	ldr	r0, [r8, #8]
   30184:	cmp	r6, r0
   30188:	bcc	3016c <__assert_fail@plt+0x1d5b0>
   3018c:	ldr	r0, [r8, #12]
   30190:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   30194:	ldr	r0, [r8, #8]
   30198:	cmp	r0, #0
   3019c:	beq	301f8 <__assert_fail@plt+0x1d63c>
   301a0:	mov	r5, #0
   301a4:	mov	r6, #8
   301a8:	ldr	r0, [r8, #24]
   301ac:	cmp	r0, #0
   301b0:	beq	301bc <__assert_fail@plt+0x1d600>
   301b4:	ldr	r0, [r0, r6]
   301b8:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   301bc:	ldr	r0, [r8, #28]
   301c0:	cmp	r0, #0
   301c4:	beq	301d0 <__assert_fail@plt+0x1d614>
   301c8:	ldr	r0, [r0, r6]
   301cc:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   301d0:	ldr	r0, [r8, #20]
   301d4:	cmp	r0, #0
   301d8:	beq	301e4 <__assert_fail@plt+0x1d628>
   301dc:	ldr	r0, [r0, r6]
   301e0:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   301e4:	add	r6, r6, #12
   301e8:	add	r5, r5, #1
   301ec:	ldr	r0, [r8, #8]
   301f0:	cmp	r5, r0
   301f4:	bcc	301a8 <__assert_fail@plt+0x1d5ec>
   301f8:	ldr	r0, [r8, #20]
   301fc:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   30200:	ldr	r0, [r8, #24]
   30204:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   30208:	ldr	r0, [r8, #28]
   3020c:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   30210:	ldr	r0, [r8]
   30214:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   30218:	ldr	r0, [r8, #32]
   3021c:	cmp	r0, #0
   30220:	beq	3027c <__assert_fail@plt+0x1d6c0>
   30224:	mov	r5, #0
   30228:	ldr	r6, [r8, #32]
   3022c:	add	r0, r5, r5, lsl #1
   30230:	ldr	r0, [r6, r0, lsl #2]!
   30234:	add	r7, r6, #8
   30238:	cmp	r0, #1
   3023c:	blt	30260 <__assert_fail@plt+0x1d6a4>
   30240:	mov	r4, #0
   30244:	ldr	r0, [r7]
   30248:	ldr	r0, [r0, r4, lsl #2]
   3024c:	bl	30f8c <__assert_fail@plt+0x1e3d0>
   30250:	add	r4, r4, #1
   30254:	ldr	r0, [r6]
   30258:	cmp	r4, r0
   3025c:	blt	30244 <__assert_fail@plt+0x1d688>
   30260:	ldr	r0, [r7]
   30264:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   30268:	add	r0, r5, #1
   3026c:	ldr	r1, [r8, #68]	; 0x44
   30270:	cmp	r5, r1
   30274:	mov	r5, r0
   30278:	bcc	30228 <__assert_fail@plt+0x1d66c>
   3027c:	ldr	r0, [r8, #32]
   30280:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   30284:	ldr	r0, [r8, #60]	; 0x3c
   30288:	movw	r1, #19220	; 0x4b14
   3028c:	movt	r1, #4
   30290:	cmp	r0, r1
   30294:	beq	3029c <__assert_fail@plt+0x1d6e0>
   30298:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3029c:	ldr	r0, [r8, #132]	; 0x84
   302a0:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   302a4:	mov	r0, r8
   302a8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   302ac:	b	2ca78 <__assert_fail@plt+0x19ebc>
   302b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   302b4:	add	fp, sp, #28
   302b8:	sub	sp, sp, #28
   302bc:	mov	r7, #2
   302c0:	ldr	sl, [fp, #8]
   302c4:	cmp	sl, #7
   302c8:	bhi	3039c <__assert_fail@plt+0x1d7e0>
   302cc:	mov	r6, r3
   302d0:	mov	r9, r2
   302d4:	mov	r4, r1
   302d8:	mov	r5, r0
   302dc:	ldr	r0, [r0]
   302e0:	str	r0, [sp, #24]
   302e4:	tst	sl, #4
   302e8:	bne	30300 <__assert_fail@plt+0x1d744>
   302ec:	mov	r0, r4
   302f0:	bl	1288c <strlen@plt>
   302f4:	mov	r7, r0
   302f8:	mov	r8, #0
   302fc:	b	30308 <__assert_fail@plt+0x1d74c>
   30300:	ldr	r8, [r6]
   30304:	ldr	r7, [r6, #4]
   30308:	movw	r0, #9624	; 0x2598
   3030c:	movt	r0, #1
   30310:	movw	r1, #10548	; 0x2934
   30314:	movt	r1, #1
   30318:	orrs	r0, r1, r0
   3031c:	str	r0, [sp, #20]
   30320:	beq	30330 <__assert_fail@plt+0x1d774>
   30324:	ldr	r0, [sp, #24]
   30328:	add	r0, r0, #136	; 0x88
   3032c:	bl	12574 <pthread_mutex_lock@plt>
   30330:	ldrb	r0, [r5, #28]
   30334:	tst	r0, #16
   30338:	bne	3034c <__assert_fail@plt+0x1d790>
   3033c:	str	r7, [sp]
   30340:	stmib	sp, {r7, r9}
   30344:	str	r6, [sp, #12]
   30348:	b	30360 <__assert_fail@plt+0x1d7a4>
   3034c:	mov	r0, #0
   30350:	str	r7, [sp]
   30354:	str	r7, [sp, #4]
   30358:	str	r0, [sp, #8]
   3035c:	str	r0, [sp, #12]
   30360:	str	sl, [sp, #16]
   30364:	mov	r0, r5
   30368:	mov	r1, r4
   3036c:	mov	r2, r7
   30370:	mov	r3, r8
   30374:	bl	303a8 <__assert_fail@plt+0x1d7ec>
   30378:	mov	r7, r0
   3037c:	ldr	r0, [sp, #20]
   30380:	cmp	r0, #0
   30384:	beq	30394 <__assert_fail@plt+0x1d7d8>
   30388:	ldr	r0, [sp, #24]
   3038c:	add	r0, r0, #136	; 0x88
   30390:	bl	12430 <pthread_mutex_unlock@plt>
   30394:	cmp	r7, #0
   30398:	movwne	r7, #1
   3039c:	mov	r0, r7
   303a0:	sub	sp, fp, #28
   303a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   303a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   303ac:	add	fp, sp, #28
   303b0:	sub	sp, sp, #212	; 0xd4
   303b4:	mov	r6, r3
   303b8:	str	r2, [sp, #60]	; 0x3c
   303bc:	str	r1, [sp, #36]	; 0x24
   303c0:	mov	sl, r0
   303c4:	ldr	r8, [r0]
   303c8:	add	r0, sp, #64	; 0x40
   303cc:	mov	r7, #0
   303d0:	mov	r1, #0
   303d4:	mov	r2, #136	; 0x88
   303d8:	bl	12904 <memset@plt>
   303dc:	str	r8, [sp, #148]	; 0x94
   303e0:	ldr	r1, [sl, #16]
   303e4:	ldr	r0, [fp, #16]
   303e8:	ldr	ip, [fp, #8]
   303ec:	cmp	r1, #0
   303f0:	mov	r5, #0
   303f4:	beq	30410 <__assert_fail@plt+0x1d854>
   303f8:	ldrb	r2, [sl, #28]
   303fc:	and	r2, r2, #9
   30400:	cmp	r2, #8
   30404:	movne	r1, #0
   30408:	subs	r5, r6, ip
   3040c:	movne	r5, r1
   30410:	str	r6, [sp, #44]	; 0x2c
   30414:	ldr	r1, [sl, #8]
   30418:	ldr	r2, [sl, #24]
   3041c:	mvn	r3, r2
   30420:	cmp	r2, r0
   30424:	addcc	r7, r3, r0
   30428:	mov	r9, #1
   3042c:	cmp	r1, #0
   30430:	beq	3092c <__assert_fail@plt+0x1dd70>
   30434:	ldr	r1, [r8, #36]	; 0x24
   30438:	cmp	r1, #0
   3043c:	ldrne	r2, [r8, #40]	; 0x28
   30440:	cmpne	r2, #0
   30444:	beq	3092c <__assert_fail@plt+0x1dd70>
   30448:	ldr	r3, [r8, #44]	; 0x2c
   3044c:	cmp	r3, #0
   30450:	ldrne	r6, [r8, #48]	; 0x30
   30454:	cmpne	r6, #0
   30458:	beq	3092c <__assert_fail@plt+0x1dd70>
   3045c:	ldr	lr, [sl, #20]
   30460:	ldr	r1, [r1, #8]
   30464:	cmp	r1, #0
   30468:	bne	30478 <__assert_fail@plt+0x1d8bc>
   3046c:	ldr	r1, [r2, #8]
   30470:	cmp	r1, #0
   30474:	beq	309f8 <__assert_fail@plt+0x1de3c>
   30478:	mov	r6, ip
   3047c:	ldr	r0, [fp, #16]
   30480:	mov	r4, r7
   30484:	subs	r0, r0, r7
   30488:	str	r0, [sp, #48]	; 0x30
   3048c:	mov	r0, #1
   30490:	str	r0, [sp, #40]	; 0x28
   30494:	bne	304a8 <__assert_fail@plt+0x1d8ec>
   30498:	ldr	r0, [r8, #76]	; 0x4c
   3049c:	cmp	r0, #0
   304a0:	movwne	r0, #1
   304a4:	str	r0, [sp, #40]	; 0x28
   304a8:	ldr	r0, [r8, #8]
   304ac:	ldr	r1, [sl, #12]
   304b0:	str	r8, [sp, #8]
   304b4:	str	lr, [sp, #56]	; 0x38
   304b8:	str	lr, [sp]
   304bc:	ubfx	r1, r1, #22, #1
   304c0:	str	r1, [sp, #4]
   304c4:	add	r3, r0, #1
   304c8:	add	r0, sp, #64	; 0x40
   304cc:	ldr	r7, [sp, #36]	; 0x24
   304d0:	mov	r1, r7
   304d4:	ldr	r2, [sp, #60]	; 0x3c
   304d8:	bl	36c90 <__assert_fail@plt+0x240d4>
   304dc:	cmp	r0, #0
   304e0:	bne	30b3c <__assert_fail@plt+0x1df80>
   304e4:	ldr	r1, [fp, #24]
   304e8:	ldr	r0, [fp, #12]
   304ec:	str	r0, [sp, #116]	; 0x74
   304f0:	str	r0, [sp, #120]	; 0x78
   304f4:	str	sl, [sp, #32]
   304f8:	ldrb	r0, [sl, #28]
   304fc:	lsr	r0, r0, #7
   30500:	strb	r0, [sp, #141]	; 0x8d
   30504:	ldr	r0, [r8, #76]	; 0x4c
   30508:	lsl	r2, r0, #1
   3050c:	add	r0, sp, #64	; 0x40
   30510:	bl	36d40 <__assert_fail@plt+0x24184>
   30514:	cmp	r0, #0
   30518:	bne	30b3c <__assert_fail@plt+0x1df80>
   3051c:	ldr	r0, [sp, #48]	; 0x30
   30520:	cmp	r0, #1
   30524:	bhi	30534 <__assert_fail@plt+0x1d978>
   30528:	ldrb	r0, [r8, #88]	; 0x58
   3052c:	tst	r0, #2
   30530:	beq	3055c <__assert_fail@plt+0x1d9a0>
   30534:	mov	r9, #12
   30538:	ldr	r0, [sp, #100]	; 0x64
   3053c:	cmn	r0, #-1073741822	; 0xc0000002
   30540:	bhi	3090c <__assert_fail@plt+0x1dd50>
   30544:	mov	r1, #4
   30548:	add	r0, r1, r0, lsl #2
   3054c:	bl	2ed04 <__assert_fail@plt+0x1c148>
   30550:	str	r0, [sp, #164]	; 0xa4
   30554:	cmp	r0, #0
   30558:	beq	3090c <__assert_fail@plt+0x1dd50>
   3055c:	str	r4, [sp, #16]
   30560:	ldr	r4, [sp, #44]	; 0x2c
   30564:	str	r4, [fp, #-36]	; 0xffffffdc
   30568:	mov	r0, #4
   3056c:	ldr	r1, [fp, #24]
   30570:	tst	r1, #1
   30574:	mov	r1, #4
   30578:	movweq	r1, #6
   3057c:	str	r1, [sp, #124]	; 0x7c
   30580:	cmp	r6, r4
   30584:	mov	lr, #1
   30588:	mvnlt	lr, #0
   3058c:	mov	r1, r8
   30590:	mov	r8, r6
   30594:	movlt	r8, r4
   30598:	mov	sl, r4
   3059c:	movlt	sl, r6
   305a0:	str	r1, [sp, #52]	; 0x34
   305a4:	ldr	ip, [r1, #92]	; 0x5c
   305a8:	cmp	r5, #0
   305ac:	beq	305f8 <__assert_fail@plt+0x1da3c>
   305b0:	cmp	ip, #1
   305b4:	ldr	r2, [sp, #60]	; 0x3c
   305b8:	ldr	r3, [sp, #56]	; 0x38
   305bc:	beq	305dc <__assert_fail@plt+0x1da20>
   305c0:	ldr	r0, [sp, #32]
   305c4:	ldr	r0, [r0, #12]
   305c8:	and	r0, r0, #4194304	; 0x400000
   305cc:	orr	r0, r3, r0
   305d0:	clz	r0, r0
   305d4:	lsr	r0, r0, #5
   305d8:	lsl	r0, r0, #2
   305dc:	cmp	r3, #0
   305e0:	mov	r1, r3
   305e4:	movwne	r1, #1
   305e8:	cmp	r6, r4
   305ec:	orrge	r1, r1, #2
   305f0:	orr	r0, r1, r0
   305f4:	b	30604 <__assert_fail@plt+0x1da48>
   305f8:	mov	r0, #8
   305fc:	ldr	r2, [sp, #60]	; 0x3c
   30600:	ldr	r3, [sp, #56]	; 0x38
   30604:	ldr	r1, [fp, #-36]	; 0xffffffdc
   30608:	cmp	r1, sl
   3060c:	cmpge	r8, r1
   30610:	blt	30904 <__assert_fail@plt+0x1dd48>
   30614:	sub	r1, fp, #36	; 0x24
   30618:	cmp	r6, r4
   3061c:	movwlt	r1, #0
   30620:	str	r1, [sp, #28]
   30624:	sub	r4, r0, #4
   30628:	add	r9, sp, #64	; 0x40
   3062c:	str	ip, [sp, #44]	; 0x2c
   30630:	str	lr, [sp, #24]
   30634:	str	r4, [sp, #20]
   30638:	cmp	r4, #4
   3063c:	bhi	306a0 <__assert_fail@plt+0x1dae4>
   30640:	add	r0, pc, #0
   30644:	ldr	pc, [r0, r4, lsl #2]
   30648:	andeq	r0, r3, ip, asr r6
   3064c:	andeq	r0, r3, ip, asr r6
   30650:	andeq	r0, r3, r4, lsr #14
   30654:	andeq	r0, r3, r4, asr r7
   30658:	muleq	r3, r0, r7
   3065c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   30660:	cmp	r0, sl
   30664:	blt	30904 <__assert_fail@plt+0x1dd48>
   30668:	mov	r1, #0
   3066c:	cmp	r0, r2
   30670:	ldrblt	r1, [r7, r0]
   30674:	cmp	r3, #0
   30678:	ldrbne	r1, [r3, r1]
   3067c:	ldrb	r1, [r5, r1]
   30680:	cmp	r1, #0
   30684:	bne	30790 <__assert_fail@plt+0x1dbd4>
   30688:	sub	r1, r0, #1
   3068c:	str	r1, [fp, #-36]	; 0xffffffdc
   30690:	cmp	r0, sl
   30694:	mov	r0, r1
   30698:	bgt	30668 <__assert_fail@plt+0x1daac>
   3069c:	b	30904 <__assert_fail@plt+0x1dd48>
   306a0:	ldr	r0, [sp, #88]	; 0x58
   306a4:	ldr	r2, [sp, #96]	; 0x60
   306a8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   306ac:	sub	r0, r1, r0
   306b0:	cmp	r0, r2
   306b4:	bcs	306f8 <__assert_fail@plt+0x1db3c>
   306b8:	mov	r1, #0
   306bc:	ldr	r2, [sp, #92]	; 0x5c
   306c0:	cmp	r0, r2
   306c4:	ldrcc	r1, [sp, #68]	; 0x44
   306c8:	ldrbcc	r1, [r1, r0]
   306cc:	ldrb	r0, [r5, r1]
   306d0:	cmp	r0, #0
   306d4:	bne	30790 <__assert_fail@plt+0x1dbd4>
   306d8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   306dc:	add	r0, r0, lr
   306e0:	str	r0, [fp, #-36]	; 0xffffffdc
   306e4:	cmp	r0, sl
   306e8:	blt	30904 <__assert_fail@plt+0x1dd48>
   306ec:	cmp	r0, r8
   306f0:	ble	306a0 <__assert_fail@plt+0x1dae4>
   306f4:	b	30904 <__assert_fail@plt+0x1dd48>
   306f8:	mov	r0, r9
   306fc:	ldr	r2, [fp, #24]
   30700:	bl	36dc8 <__assert_fail@plt+0x2420c>
   30704:	cmp	r0, #0
   30708:	bne	30b44 <__assert_fail@plt+0x1df88>
   3070c:	ldr	r0, [sp, #88]	; 0x58
   30710:	ldr	r1, [fp, #-36]	; 0xffffffdc
   30714:	sub	r0, r1, r0
   30718:	add	r9, sp, #64	; 0x40
   3071c:	ldr	lr, [sp, #24]
   30720:	b	306b8 <__assert_fail@plt+0x1dafc>
   30724:	ldr	r0, [fp, #-36]	; 0xffffffdc
   30728:	cmp	r0, r8
   3072c:	bge	30784 <__assert_fail@plt+0x1dbc8>
   30730:	ldrb	r1, [r7, r0]
   30734:	ldrb	r1, [r5, r1]
   30738:	cmp	r1, #0
   3073c:	bne	30784 <__assert_fail@plt+0x1dbc8>
   30740:	add	r0, r0, #1
   30744:	str	r0, [fp, #-36]	; 0xffffffdc
   30748:	cmp	r0, r8
   3074c:	blt	30730 <__assert_fail@plt+0x1db74>
   30750:	b	30784 <__assert_fail@plt+0x1dbc8>
   30754:	ldr	r0, [fp, #-36]	; 0xffffffdc
   30758:	cmp	r0, r8
   3075c:	bge	30784 <__assert_fail@plt+0x1dbc8>
   30760:	ldrb	r1, [r7, r0]
   30764:	ldrb	r1, [r3, r1]
   30768:	ldrb	r1, [r5, r1]
   3076c:	cmp	r1, #0
   30770:	bne	30784 <__assert_fail@plt+0x1dbc8>
   30774:	add	r0, r0, #1
   30778:	str	r0, [fp, #-36]	; 0xffffffdc
   3077c:	cmp	r0, r8
   30780:	blt	30760 <__assert_fail@plt+0x1dba4>
   30784:	ldr	r1, [fp, #-36]	; 0xffffffdc
   30788:	cmp	r1, r8
   3078c:	beq	308e4 <__assert_fail@plt+0x1dd28>
   30790:	ldr	r1, [fp, #-36]	; 0xffffffdc
   30794:	mov	r0, r9
   30798:	ldr	r2, [fp, #24]
   3079c:	bl	36dc8 <__assert_fail@plt+0x2420c>
   307a0:	cmp	r0, #0
   307a4:	bne	30b44 <__assert_fail@plt+0x1df88>
   307a8:	ldr	r0, [sp, #44]	; 0x2c
   307ac:	cmp	r0, #1
   307b0:	add	r9, sp, #64	; 0x40
   307b4:	ldrne	r0, [sp, #92]	; 0x5c
   307b8:	cmpne	r0, #0
   307bc:	bne	30840 <__assert_fail@plt+0x1dc84>
   307c0:	mov	r0, #0
   307c4:	str	r0, [sp, #172]	; 0xac
   307c8:	str	r0, [sp, #184]	; 0xb8
   307cc:	str	r0, [sp, #168]	; 0xa8
   307d0:	mov	r0, r9
   307d4:	ldr	r1, [sp, #40]	; 0x28
   307d8:	ldr	r2, [sp, #28]
   307dc:	bl	373f4 <__assert_fail@plt+0x24838>
   307e0:	cmn	r0, #1
   307e4:	mov	r4, r9
   307e8:	beq	308a8 <__assert_fail@plt+0x1dcec>
   307ec:	mov	r2, r0
   307f0:	cmn	r0, #2
   307f4:	beq	30b4c <__assert_fail@plt+0x1df90>
   307f8:	str	r2, [sp, #156]	; 0x9c
   307fc:	ldr	r0, [sp, #48]	; 0x30
   30800:	cmp	r0, #2
   30804:	bcc	30854 <__assert_fail@plt+0x1dc98>
   30808:	ldr	r0, [sp, #32]
   3080c:	ldrb	r0, [r0, #28]
   30810:	ands	r0, r0, #16
   30814:	bne	30854 <__assert_fail@plt+0x1dc98>
   30818:	ldr	r0, [sp, #164]	; 0xa4
   3081c:	ldr	r1, [r0, r2, lsl #2]
   30820:	add	r0, sp, #64	; 0x40
   30824:	bl	37768 <__assert_fail@plt+0x24bac>
   30828:	str	r0, [sp, #160]	; 0xa0
   3082c:	ldr	r0, [sp, #52]	; 0x34
   30830:	ldrb	r0, [r0, #88]	; 0x58
   30834:	tst	r0, #1
   30838:	beq	30878 <__assert_fail@plt+0x1dcbc>
   3083c:	b	30888 <__assert_fail@plt+0x1dccc>
   30840:	ldr	r0, [sp, #72]	; 0x48
   30844:	ldr	r0, [r0]
   30848:	cmn	r0, #1
   3084c:	bne	307c0 <__assert_fail@plt+0x1dc04>
   30850:	b	308b4 <__assert_fail@plt+0x1dcf8>
   30854:	ldr	r0, [sp, #52]	; 0x34
   30858:	ldr	r0, [r0, #76]	; 0x4c
   3085c:	cmp	r0, #0
   30860:	beq	30938 <__assert_fail@plt+0x1dd7c>
   30864:	ldr	r0, [sp, #164]	; 0xa4
   30868:	ldr	r1, [r0, r2, lsl #2]
   3086c:	add	r0, sp, #64	; 0x40
   30870:	bl	37768 <__assert_fail@plt+0x24bac>
   30874:	str	r0, [sp, #160]	; 0xa0
   30878:	ldr	r0, [sp, #52]	; 0x34
   3087c:	ldr	r0, [r0, #76]	; 0x4c
   30880:	cmp	r0, #0
   30884:	beq	30938 <__assert_fail@plt+0x1dd7c>
   30888:	add	r0, sp, #64	; 0x40
   3088c:	bl	377e0 <__assert_fail@plt+0x24c24>
   30890:	cmp	r0, #0
   30894:	beq	30938 <__assert_fail@plt+0x1dd7c>
   30898:	mov	r9, r0
   3089c:	cmp	r0, #1
   308a0:	add	r4, sp, #64	; 0x40
   308a4:	bne	30908 <__assert_fail@plt+0x1dd4c>
   308a8:	mov	r0, r4
   308ac:	bl	37a00 <__assert_fail@plt+0x24e44>
   308b0:	mov	r9, r4
   308b4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   308b8:	ldr	lr, [sp, #24]
   308bc:	add	r0, r0, lr
   308c0:	str	r0, [fp, #-36]	; 0xffffffdc
   308c4:	cmp	r0, sl
   308c8:	blt	30904 <__assert_fail@plt+0x1dd48>
   308cc:	cmp	r8, r0
   308d0:	ldr	r2, [sp, #60]	; 0x3c
   308d4:	ldr	r4, [sp, #20]
   308d8:	ldr	r3, [sp, #56]	; 0x38
   308dc:	bge	30638 <__assert_fail@plt+0x1da7c>
   308e0:	b	30904 <__assert_fail@plt+0x1dd48>
   308e4:	mov	r0, #0
   308e8:	cmp	r1, r2
   308ec:	ldrblt	r0, [r7, r1]
   308f0:	cmp	r3, #0
   308f4:	ldrbne	r0, [r3, r0]
   308f8:	ldrb	r0, [r5, r0]
   308fc:	cmp	r0, #0
   30900:	bne	30790 <__assert_fail@plt+0x1dbd4>
   30904:	mov	r9, #1
   30908:	ldr	r8, [sp, #52]	; 0x34
   3090c:	ldr	r0, [sp, #164]	; 0xa4
   30910:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   30914:	ldr	r0, [r8, #76]	; 0x4c
   30918:	cmp	r0, #0
   3091c:	addne	r0, sp, #64	; 0x40
   30920:	blne	37d28 <__assert_fail@plt+0x2516c>
   30924:	add	r0, sp, #64	; 0x40
   30928:	bl	31370 <__assert_fail@plt+0x1e7b4>
   3092c:	mov	r0, r9
   30930:	sub	sp, fp, #28
   30934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30938:	ldr	sl, [sp, #48]	; 0x30
   3093c:	cmp	sl, #0
   30940:	beq	30a34 <__assert_fail@plt+0x1de78>
   30944:	cmp	sl, #1
   30948:	ldr	r8, [sp, #52]	; 0x34
   3094c:	ldr	r6, [sp, #16]
   30950:	ldr	r4, [fp, #16]
   30954:	beq	30974 <__assert_fail@plt+0x1ddb8>
   30958:	mvn	r0, r6
   3095c:	add	r0, r0, r4
   30960:	lsl	r2, r0, #3
   30964:	ldr	r0, [fp, #20]
   30968:	add	r0, r0, #8
   3096c:	mov	r1, #255	; 0xff
   30970:	bl	12904 <memset@plt>
   30974:	mov	r0, #0
   30978:	ldr	r1, [sp, #156]	; 0x9c
   3097c:	ldr	r2, [fp, #20]
   30980:	stm	r2, {r0, r1}
   30984:	cmp	sl, #2
   30988:	bcc	309dc <__assert_fail@plt+0x1de20>
   3098c:	ldr	r0, [sp, #32]
   30990:	ldrb	r0, [r0, #28]
   30994:	ands	r0, r0, #16
   30998:	bne	309dc <__assert_fail@plt+0x1de20>
   3099c:	ldrb	r1, [r8, #88]	; 0x58
   309a0:	mov	r0, #0
   309a4:	tst	r1, #1
   309a8:	beq	309bc <__assert_fail@plt+0x1de00>
   309ac:	ldr	r1, [r8, #76]	; 0x4c
   309b0:	mov	r0, #0
   309b4:	cmp	r1, #0
   309b8:	movwgt	r0, #1
   309bc:	str	r0, [sp]
   309c0:	add	r1, sp, #64	; 0x40
   309c4:	ldr	r0, [sp, #32]
   309c8:	mov	r2, sl
   309cc:	ldr	r3, [fp, #20]
   309d0:	bl	37aa8 <__assert_fail@plt+0x24eec>
   309d4:	cmp	r0, #0
   309d8:	bne	30b3c <__assert_fail@plt+0x1df80>
   309dc:	ldr	r0, [fp, #20]
   309e0:	add	r0, r0, #4
   309e4:	add	r1, sp, #64	; 0x40
   309e8:	add	lr, r1, #32
   309ec:	ldrb	r2, [sp, #140]	; 0x8c
   309f0:	mov	r3, r4
   309f4:	b	30a80 <__assert_fail@plt+0x1dec4>
   309f8:	ldr	r1, [r3, #8]
   309fc:	cmp	r1, #0
   30a00:	beq	30a10 <__assert_fail@plt+0x1de54>
   30a04:	ldrsb	r1, [sl, #28]
   30a08:	cmp	r1, #0
   30a0c:	blt	30478 <__assert_fail@plt+0x1d8bc>
   30a10:	mov	r6, #0
   30a14:	ldr	r0, [sp, #44]	; 0x2c
   30a18:	cmp	r0, #0
   30a1c:	beq	30a3c <__assert_fail@plt+0x1de80>
   30a20:	cmp	ip, #0
   30a24:	mov	r0, #0
   30a28:	str	r0, [sp, #44]	; 0x2c
   30a2c:	bne	3092c <__assert_fail@plt+0x1dd70>
   30a30:	b	3047c <__assert_fail@plt+0x1d8c0>
   30a34:	mov	r9, #0
   30a38:	b	30908 <__assert_fail@plt+0x1dd4c>
   30a3c:	mov	r0, #0
   30a40:	str	r0, [sp, #44]	; 0x2c
   30a44:	b	3047c <__assert_fail@plt+0x1d8c0>
   30a48:	ldr	ip, [sp, #76]	; 0x4c
   30a4c:	ldr	r5, [sp, #92]	; 0x5c
   30a50:	cmp	r7, r5
   30a54:	mov	r1, lr
   30a58:	addne	r1, ip, r7, lsl #2
   30a5c:	ldr	r1, [r1]
   30a60:	str	r1, [r0, #-4]
   30a64:	ldr	r1, [r0]
   30a68:	cmp	r1, r5
   30a6c:	mov	r4, lr
   30a70:	addne	r4, ip, r1, lsl #2
   30a74:	ldr	r1, [r4]
   30a78:	str	r1, [r0]
   30a7c:	b	30a94 <__assert_fail@plt+0x1ded8>
   30a80:	ldr	r7, [r0, #-4]
   30a84:	cmn	r7, #1
   30a88:	beq	30aa8 <__assert_fail@plt+0x1deec>
   30a8c:	cmp	r2, #0
   30a90:	bne	30a48 <__assert_fail@plt+0x1de8c>
   30a94:	ldmda	r0, {r1, r7}
   30a98:	ldr	r5, [fp, #-36]	; 0xffffffdc
   30a9c:	add	r1, r1, r5
   30aa0:	add	r7, r7, r5
   30aa4:	stmda	r0, {r1, r7}
   30aa8:	add	r0, r0, #8
   30aac:	sub	r3, r3, #1
   30ab0:	cmp	r6, r3
   30ab4:	bne	30a80 <__assert_fail@plt+0x1dec4>
   30ab8:	cmp	r6, #0
   30abc:	ldr	r4, [fp, #20]
   30ac0:	ble	30ad4 <__assert_fail@plt+0x1df18>
   30ac4:	add	r0, r4, sl, lsl #3
   30ac8:	lsl	r2, r6, #3
   30acc:	mov	r1, #255	; 0xff
   30ad0:	bl	12904 <memset@plt>
   30ad4:	ldr	r0, [r8, #132]	; 0x84
   30ad8:	mov	r9, #0
   30adc:	cmp	r0, #0
   30ae0:	beq	3090c <__assert_fail@plt+0x1dd50>
   30ae4:	cmp	sl, #2
   30ae8:	bcc	3090c <__assert_fail@plt+0x1dd50>
   30aec:	ldr	r1, [fp, #16]
   30af0:	sub	r1, r1, #1
   30af4:	sub	r1, r1, r6
   30af8:	mov	r2, #0
   30afc:	ldr	r3, [r0, r2, lsl #2]
   30b00:	cmp	r2, r3
   30b04:	beq	30b28 <__assert_fail@plt+0x1df6c>
   30b08:	add	r7, r4, r2, lsl #3
   30b0c:	add	r3, r4, r3, lsl #3
   30b10:	ldr	r3, [r3, #8]
   30b14:	str	r3, [r7, #8]
   30b18:	ldr	r3, [r0, r2, lsl #2]
   30b1c:	add	r3, r4, r3, lsl #3
   30b20:	ldr	r3, [r3, #12]
   30b24:	str	r3, [r7, #12]
   30b28:	add	r2, r2, #1
   30b2c:	cmp	r1, r2
   30b30:	bne	30afc <__assert_fail@plt+0x1df40>
   30b34:	mov	r9, #0
   30b38:	b	3090c <__assert_fail@plt+0x1dd50>
   30b3c:	mov	r9, r0
   30b40:	b	3090c <__assert_fail@plt+0x1dd50>
   30b44:	mov	r9, r0
   30b48:	b	30908 <__assert_fail@plt+0x1dd4c>
   30b4c:	mov	r9, #12
   30b50:	b	30908 <__assert_fail@plt+0x1dd4c>
   30b54:	push	{fp, lr}
   30b58:	mov	fp, sp
   30b5c:	sub	sp, sp, #16
   30b60:	mov	ip, #1
   30b64:	str	ip, [sp, #12]
   30b68:	str	r2, [sp, #4]
   30b6c:	mov	ip, #0
   30b70:	str	ip, [sp]
   30b74:	ldr	ip, [fp, #8]
   30b78:	str	ip, [sp, #8]
   30b7c:	bl	30b88 <__assert_fail@plt+0x1dfcc>
   30b80:	mov	sp, fp
   30b84:	pop	{fp, pc}
   30b88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30b8c:	add	fp, sp, #28
   30b90:	sub	sp, sp, #36	; 0x24
   30b94:	mvn	r7, #0
   30b98:	cmp	r3, #0
   30b9c:	blt	30d38 <__assert_fail@plt+0x1e17c>
   30ba0:	mov	r9, r3
   30ba4:	mov	r8, r2
   30ba8:	cmp	r3, r2
   30bac:	bgt	30d38 <__assert_fail@plt+0x1e17c>
   30bb0:	mov	r5, r0
   30bb4:	str	r1, [sp, #28]
   30bb8:	ldr	r0, [fp, #8]
   30bbc:	add	r0, r0, r9
   30bc0:	ldr	r4, [r5]
   30bc4:	cmp	r0, r8
   30bc8:	mov	r6, r8
   30bcc:	bicle	r6, r0, r0, asr #31
   30bd0:	movw	r0, #9624	; 0x2598
   30bd4:	movt	r0, #1
   30bd8:	movw	r1, #10548	; 0x2934
   30bdc:	movt	r1, #1
   30be0:	orrs	r0, r1, r0
   30be4:	str	r0, [sp, #32]
   30be8:	beq	30bf4 <__assert_fail@plt+0x1e038>
   30bec:	add	r0, r4, #136	; 0x88
   30bf0:	bl	12574 <pthread_mutex_lock@plt>
   30bf4:	str	r4, [sp, #20]
   30bf8:	ldr	r4, [fp, #16]
   30bfc:	ldrb	r0, [r5, #28]
   30c00:	ubfx	r1, r0, #5, #2
   30c04:	str	r1, [sp, #24]
   30c08:	cmp	r6, r9
   30c0c:	ble	30c28 <__assert_fail@plt+0x1e06c>
   30c10:	tst	r0, #8
   30c14:	bne	30c28 <__assert_fail@plt+0x1e06c>
   30c18:	ldr	r0, [r5, #16]
   30c1c:	cmp	r0, #0
   30c20:	movne	r0, r5
   30c24:	blne	2fb10 <__assert_fail@plt+0x1cf54>
   30c28:	mov	r7, #1
   30c2c:	mov	sl, #0
   30c30:	cmp	r4, #0
   30c34:	beq	30c6c <__assert_fail@plt+0x1e0b0>
   30c38:	ldrb	r0, [r5, #28]
   30c3c:	ands	r1, r0, #16
   30c40:	bne	30c6c <__assert_fail@plt+0x1e0b0>
   30c44:	and	r0, r0, #6
   30c48:	cmp	r0, #4
   30c4c:	bne	30c60 <__assert_fail@plt+0x1e0a4>
   30c50:	ldr	r7, [r4]
   30c54:	ldr	r0, [r5, #24]
   30c58:	cmp	r7, r0
   30c5c:	bls	30d58 <__assert_fail@plt+0x1e19c>
   30c60:	ldr	r0, [r5, #24]
   30c64:	add	r7, r0, #1
   30c68:	mov	sl, r4
   30c6c:	lsl	r0, r7, #3
   30c70:	bl	2ed04 <__assert_fail@plt+0x1c148>
   30c74:	cmp	r0, #0
   30c78:	beq	30d44 <__assert_fail@plt+0x1e188>
   30c7c:	mov	r4, r0
   30c80:	ldr	r0, [fp, #12]
   30c84:	str	r6, [sp]
   30c88:	stmib	sp, {r0, r7}
   30c8c:	str	r4, [sp, #12]
   30c90:	ldr	r0, [sp, #24]
   30c94:	str	r0, [sp, #16]
   30c98:	mov	r0, r5
   30c9c:	ldr	r1, [sp, #28]
   30ca0:	mov	r2, r8
   30ca4:	mov	r3, r9
   30ca8:	bl	303a8 <__assert_fail@plt+0x1d7ec>
   30cac:	cmp	r0, #0
   30cb0:	beq	30cc4 <__assert_fail@plt+0x1e108>
   30cb4:	mvn	r7, #1
   30cb8:	cmp	r0, #1
   30cbc:	mvneq	r7, #0
   30cc0:	b	30d18 <__assert_fail@plt+0x1e15c>
   30cc4:	cmp	sl, #0
   30cc8:	beq	30cfc <__assert_fail@plt+0x1e140>
   30ccc:	ldrb	r0, [r5, #28]
   30cd0:	ubfx	r3, r0, #1, #2
   30cd4:	mov	r0, sl
   30cd8:	mov	r1, r4
   30cdc:	mov	r2, r7
   30ce0:	bl	36b38 <__assert_fail@plt+0x23f7c>
   30ce4:	ldrb	r1, [r5, #28]
   30ce8:	and	r1, r1, #249	; 0xf9
   30cec:	bfi	r1, r0, #1, #2
   30cf0:	strb	r1, [r5, #28]
   30cf4:	tst	r0, #3
   30cf8:	beq	30d14 <__assert_fail@plt+0x1e158>
   30cfc:	ldr	r0, [fp, #20]
   30d00:	cmp	r0, #0
   30d04:	ldreq	r7, [r4]
   30d08:	ldrne	r0, [r4, #4]
   30d0c:	subne	r7, r0, r9
   30d10:	b	30d18 <__assert_fail@plt+0x1e15c>
   30d14:	mvn	r7, #1
   30d18:	ldr	r5, [sp, #32]
   30d1c:	mov	r0, r4
   30d20:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   30d24:	cmp	r5, #0
   30d28:	beq	30d38 <__assert_fail@plt+0x1e17c>
   30d2c:	ldr	r0, [sp, #20]
   30d30:	add	r0, r0, #136	; 0x88
   30d34:	bl	12430 <pthread_mutex_unlock@plt>
   30d38:	mov	r0, r7
   30d3c:	sub	sp, fp, #28
   30d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30d44:	mvn	r7, #1
   30d48:	ldr	r5, [sp, #32]
   30d4c:	cmp	r5, #0
   30d50:	bne	30d2c <__assert_fail@plt+0x1e170>
   30d54:	b	30d38 <__assert_fail@plt+0x1e17c>
   30d58:	cmp	r7, #1
   30d5c:	movwlt	r4, #0
   30d60:	movwlt	r7, #1
   30d64:	b	30c68 <__assert_fail@plt+0x1e0ac>
   30d68:	push	{fp, lr}
   30d6c:	mov	fp, sp
   30d70:	sub	sp, sp, #16
   30d74:	mov	ip, #0
   30d78:	str	ip, [sp, #12]
   30d7c:	str	r2, [sp, #4]
   30d80:	ldr	ip, [fp, #12]
   30d84:	str	ip, [sp, #8]
   30d88:	ldr	ip, [fp, #8]
   30d8c:	str	ip, [sp]
   30d90:	bl	30b88 <__assert_fail@plt+0x1dfcc>
   30d94:	mov	sp, fp
   30d98:	pop	{fp, pc}
   30d9c:	push	{fp, lr}
   30da0:	mov	fp, sp
   30da4:	sub	sp, sp, #24
   30da8:	mov	ip, #1
   30dac:	str	ip, [sp, #20]
   30db0:	mov	ip, #0
   30db4:	str	ip, [sp, #8]
   30db8:	ldr	ip, [fp, #20]
   30dbc:	str	ip, [sp, #16]
   30dc0:	ldr	ip, [fp, #16]
   30dc4:	str	ip, [sp, #12]
   30dc8:	ldr	ip, [fp, #12]
   30dcc:	str	ip, [sp, #4]
   30dd0:	ldr	ip, [fp, #8]
   30dd4:	str	ip, [sp]
   30dd8:	bl	30de4 <__assert_fail@plt+0x1e228>
   30ddc:	mov	sp, fp
   30de0:	pop	{fp, pc}
   30de4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30de8:	add	fp, sp, #28
   30dec:	sub	sp, sp, #20
   30df0:	mov	r6, r2
   30df4:	mov	r8, r1
   30df8:	mov	r1, r0
   30dfc:	ldr	r4, [fp, #8]
   30e00:	orr	r0, r4, r2
   30e04:	ldr	r2, [fp, #24]
   30e08:	orr	r0, r0, r2
   30e0c:	cmp	r0, #0
   30e10:	blt	30ec4 <__assert_fail@plt+0x1e308>
   30e14:	adds	sl, r6, r4
   30e18:	bvs	30ec4 <__assert_fail@plt+0x1e308>
   30e1c:	mov	r5, #0
   30e20:	cmp	r4, #1
   30e24:	blt	30e78 <__assert_fail@plt+0x1e2bc>
   30e28:	mov	r9, r3
   30e2c:	cmp	r6, #1
   30e30:	blt	30e80 <__assert_fail@plt+0x1e2c4>
   30e34:	mov	r0, sl
   30e38:	mov	r5, r1
   30e3c:	bl	2ed04 <__assert_fail@plt+0x1c148>
   30e40:	cmp	r0, #0
   30e44:	beq	30ec4 <__assert_fail@plt+0x1e308>
   30e48:	mov	r7, r0
   30e4c:	mov	r1, r8
   30e50:	mov	r2, r6
   30e54:	bl	125c8 <memcpy@plt>
   30e58:	add	r0, r7, r6
   30e5c:	mov	r1, r9
   30e60:	mov	r2, r4
   30e64:	bl	125c8 <memcpy@plt>
   30e68:	ldr	r2, [fp, #24]
   30e6c:	mov	r1, r5
   30e70:	mov	r5, r7
   30e74:	b	30e84 <__assert_fail@plt+0x1e2c8>
   30e78:	mov	r7, r8
   30e7c:	b	30e84 <__assert_fail@plt+0x1e2c8>
   30e80:	mov	r7, r9
   30e84:	ldr	r0, [fp, #28]
   30e88:	add	r6, fp, #12
   30e8c:	ldm	r6, {r3, r4, r6}
   30e90:	str	r4, [sp]
   30e94:	stmib	sp, {r2, r6}
   30e98:	str	r0, [sp, #12]
   30e9c:	mov	r0, r1
   30ea0:	mov	r1, r7
   30ea4:	mov	r2, sl
   30ea8:	bl	30b88 <__assert_fail@plt+0x1dfcc>
   30eac:	mov	r4, r0
   30eb0:	mov	r0, r5
   30eb4:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   30eb8:	mov	r0, r4
   30ebc:	sub	sp, fp, #28
   30ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30ec4:	mvn	r0, #1
   30ec8:	sub	sp, fp, #28
   30ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30ed0:	push	{fp, lr}
   30ed4:	mov	fp, sp
   30ed8:	sub	sp, sp, #24
   30edc:	mov	ip, #0
   30ee0:	str	ip, [sp, #20]
   30ee4:	ldr	ip, [fp, #24]
   30ee8:	str	ip, [sp, #16]
   30eec:	ldr	ip, [fp, #20]
   30ef0:	str	ip, [sp, #12]
   30ef4:	ldr	ip, [fp, #16]
   30ef8:	str	ip, [sp, #8]
   30efc:	ldr	ip, [fp, #12]
   30f00:	str	ip, [sp, #4]
   30f04:	ldr	ip, [fp, #8]
   30f08:	str	ip, [sp]
   30f0c:	bl	30de4 <__assert_fail@plt+0x1e228>
   30f10:	mov	sp, fp
   30f14:	pop	{fp, pc}
   30f18:	ldrb	ip, [r0, #28]
   30f1c:	bic	ip, ip, #6
   30f20:	cmp	r2, #0
   30f24:	beq	30f44 <__assert_fail@plt+0x1e388>
   30f28:	push	{fp, lr}
   30f2c:	mov	fp, sp
   30f30:	ldr	lr, [fp, #8]
   30f34:	orr	ip, ip, #2
   30f38:	strb	ip, [r0, #28]
   30f3c:	stm	r1, {r2, r3, lr}
   30f40:	pop	{fp, pc}
   30f44:	strb	ip, [r0, #28]
   30f48:	mov	r0, #0
   30f4c:	str	r0, [r1]
   30f50:	str	r0, [r1, #4]
   30f54:	str	r0, [r1, #8]
   30f58:	bx	lr
   30f5c:	ldr	r1, [r0, #4]
   30f60:	movw	r2, #255	; 0xff
   30f64:	movt	r2, #4
   30f68:	and	r1, r1, r2
   30f6c:	cmp	r1, #6
   30f70:	bne	30f7c <__assert_fail@plt+0x1e3c0>
   30f74:	ldr	r0, [r0]
   30f78:	b	30fec <__assert_fail@plt+0x1e430>
   30f7c:	cmp	r1, #3
   30f80:	bxne	lr
   30f84:	ldr	r0, [r0]
   30f88:	b	2ca78 <__assert_fail@plt+0x19ebc>
   30f8c:	push	{r4, sl, fp, lr}
   30f90:	add	fp, sp, #8
   30f94:	mov	r4, r0
   30f98:	ldr	r0, [r0, #24]
   30f9c:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   30fa0:	ldr	r0, [r4, #36]	; 0x24
   30fa4:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   30fa8:	ldr	r0, [r4, #40]	; 0x28
   30fac:	add	r1, r4, #4
   30fb0:	cmp	r0, r1
   30fb4:	beq	30fc8 <__assert_fail@plt+0x1e40c>
   30fb8:	ldr	r0, [r0, #8]
   30fbc:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   30fc0:	ldr	r0, [r4, #40]	; 0x28
   30fc4:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   30fc8:	ldr	r0, [r4, #12]
   30fcc:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   30fd0:	ldr	r0, [r4, #48]	; 0x30
   30fd4:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   30fd8:	ldr	r0, [r4, #44]	; 0x2c
   30fdc:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   30fe0:	mov	r0, r4
   30fe4:	pop	{r4, sl, fp, lr}
   30fe8:	b	2ca78 <__assert_fail@plt+0x19ebc>
   30fec:	push	{r4, sl, fp, lr}
   30ff0:	add	fp, sp, #8
   30ff4:	mov	r4, r0
   30ff8:	ldr	r0, [r0]
   30ffc:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   31000:	ldr	r0, [r4, #4]
   31004:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   31008:	ldr	r0, [r4, #8]
   3100c:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   31010:	ldr	r0, [r4, #12]
   31014:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   31018:	mov	r0, r4
   3101c:	pop	{r4, sl, fp, lr}
   31020:	b	2ca78 <__assert_fail@plt+0x19ebc>
   31024:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   31028:	add	fp, sp, #24
   3102c:	mov	r5, r1
   31030:	mov	r9, r0
   31034:	mov	r1, #0
   31038:	mov	r2, #160	; 0xa0
   3103c:	bl	12904 <memset@plt>
   31040:	mov	r0, #31
   31044:	str	r0, [r9, #64]	; 0x40
   31048:	movw	r0, #43689	; 0xaaa9
   3104c:	movt	r0, #2730	; 0xaaa
   31050:	cmp	r5, r0
   31054:	bhi	311c8 <__assert_fail@plt+0x1e60c>
   31058:	add	r0, r5, #1
   3105c:	str	r0, [r9, #4]
   31060:	lsl	r0, r0, #3
   31064:	bl	2ed04 <__assert_fail@plt+0x1c148>
   31068:	str	r0, [r9]
   3106c:	mov	r0, #1
   31070:	mov	r6, r0
   31074:	lsl	r0, r0, #1
   31078:	cmp	r6, r5
   3107c:	bls	31070 <__assert_fail@plt+0x1e4b4>
   31080:	mov	r0, #12
   31084:	mov	r1, r6
   31088:	bl	2c49c <__assert_fail@plt+0x198e0>
   3108c:	str	r0, [r9, #32]
   31090:	sub	r0, r6, #1
   31094:	str	r0, [r9, #68]	; 0x44
   31098:	bl	12730 <__ctype_get_mb_cur_max@plt>
   3109c:	str	r0, [r9, #92]	; 0x5c
   310a0:	mov	r0, #14
   310a4:	bl	12a30 <nl_langinfo@plt>
   310a8:	ldrb	r1, [r0]
   310ac:	orr	r1, r1, #32
   310b0:	cmp	r1, #117	; 0x75
   310b4:	bne	31100 <__assert_fail@plt+0x1e544>
   310b8:	ldrb	r1, [r0, #1]
   310bc:	orr	r1, r1, #32
   310c0:	cmp	r1, #116	; 0x74
   310c4:	bne	31100 <__assert_fail@plt+0x1e544>
   310c8:	ldrb	r1, [r0, #2]
   310cc:	orr	r1, r1, #32
   310d0:	cmp	r1, #102	; 0x66
   310d4:	bne	31100 <__assert_fail@plt+0x1e544>
   310d8:	ldrb	r1, [r0, #3]!
   310dc:	cmp	r1, #45	; 0x2d
   310e0:	addeq	r0, r0, #1
   310e4:	movw	r1, #19268	; 0x4b44
   310e8:	movt	r1, #4
   310ec:	bl	124cc <strcmp@plt>
   310f0:	cmp	r0, #0
   310f4:	ldrbeq	r0, [r9, #88]	; 0x58
   310f8:	orreq	r0, r0, #4
   310fc:	strbeq	r0, [r9, #88]	; 0x58
   31100:	ldrb	r0, [r9, #88]	; 0x58
   31104:	and	r1, r0, #247	; 0xf7
   31108:	strb	r1, [r9, #88]	; 0x58
   3110c:	ldr	r1, [r9, #92]	; 0x5c
   31110:	cmp	r1, #2
   31114:	blt	311ac <__assert_fail@plt+0x1e5f0>
   31118:	tst	r0, #4
   3111c:	bne	311a0 <__assert_fail@plt+0x1e5e4>
   31120:	mov	r8, #1
   31124:	mov	r0, #32
   31128:	mov	r1, #1
   3112c:	bl	2c49c <__assert_fail@plt+0x198e0>
   31130:	str	r0, [r9, #60]	; 0x3c
   31134:	cmp	r0, #0
   31138:	beq	311c8 <__assert_fail@plt+0x1e60c>
   3113c:	mov	r7, #0
   31140:	mov	r6, #0
   31144:	mov	r4, #0
   31148:	add	r5, r7, r4
   3114c:	mov	r0, r5
   31150:	bl	12940 <btowc@plt>
   31154:	cmn	r0, #1
   31158:	ldrne	r1, [r9, #60]	; 0x3c
   3115c:	ldrne	r2, [r1, r6, lsl #2]
   31160:	orrne	r2, r2, r8, lsl r4
   31164:	strne	r2, [r1, r6, lsl #2]
   31168:	cmp	r5, #127	; 0x7f
   3116c:	bhi	31180 <__assert_fail@plt+0x1e5c4>
   31170:	cmp	r5, r0
   31174:	ldrbne	r0, [r9, #88]	; 0x58
   31178:	orrne	r0, r0, #8
   3117c:	strbne	r0, [r9, #88]	; 0x58
   31180:	add	r4, r4, #1
   31184:	cmp	r4, #32
   31188:	bne	31148 <__assert_fail@plt+0x1e58c>
   3118c:	add	r6, r6, #1
   31190:	add	r7, r7, #32
   31194:	cmp	r6, #8
   31198:	bne	31144 <__assert_fail@plt+0x1e588>
   3119c:	b	311ac <__assert_fail@plt+0x1e5f0>
   311a0:	movw	r0, #19220	; 0x4b14
   311a4:	movt	r0, #4
   311a8:	str	r0, [r9, #60]	; 0x3c
   311ac:	ldr	r0, [r9]
   311b0:	cmp	r0, #0
   311b4:	ldrne	r1, [r9, #32]
   311b8:	movne	r0, #0
   311bc:	cmpne	r1, #0
   311c0:	moveq	r0, #12
   311c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   311c8:	mov	r0, #12
   311cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   311d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   311d4:	add	fp, sp, #24
   311d8:	sub	sp, sp, #8
   311dc:	mov	r8, r3
   311e0:	mov	r5, r2
   311e4:	mov	r7, r1
   311e8:	mov	r4, r0
   311ec:	vmov.i32	q8, #0	; 0x00000000
   311f0:	mov	r0, #80	; 0x50
   311f4:	mov	r1, r4
   311f8:	vst1.32	{d16-d17}, [r1], r0
   311fc:	mov	r0, #0
   31200:	str	r0, [r1]
   31204:	add	r0, r4, #64	; 0x40
   31208:	vst1.32	{d16-d17}, [r0]
   3120c:	add	r0, r4, #48	; 0x30
   31210:	vst1.32	{d16-d17}, [r0]
   31214:	add	r0, r4, #32
   31218:	vst1.32	{d16-d17}, [r0]
   3121c:	add	r0, r4, #16
   31220:	vst1.32	{d16-d17}, [r0]
   31224:	ldr	r6, [fp, #12]
   31228:	str	r6, [sp, #4]
   3122c:	ldr	r9, [fp, #8]
   31230:	str	r9, [sp]
   31234:	mov	r0, r7
   31238:	mov	r1, r2
   3123c:	mov	r2, r4
   31240:	bl	31a14 <__assert_fail@plt+0x1ee58>
   31244:	cmp	r5, #1
   31248:	blt	31260 <__assert_fail@plt+0x1e6a4>
   3124c:	add	r1, r5, #1
   31250:	mov	r0, r4
   31254:	bl	31a6c <__assert_fail@plt+0x1eeb0>
   31258:	cmp	r0, #0
   3125c:	bne	31318 <__assert_fail@plt+0x1e75c>
   31260:	ldrb	r0, [r4, #75]	; 0x4b
   31264:	cmp	r0, #0
   31268:	ldrne	r7, [r4, #4]
   3126c:	str	r7, [r4, #4]
   31270:	ldr	r0, [r6, #92]	; 0x5c
   31274:	cmp	r9, #0
   31278:	beq	312d4 <__assert_fail@plt+0x1e718>
   3127c:	cmp	r0, #2
   31280:	blt	312e8 <__assert_fail@plt+0x1e72c>
   31284:	mov	r0, r4
   31288:	bl	31b10 <__assert_fail@plt+0x1ef54>
   3128c:	cmp	r0, #0
   31290:	bne	31318 <__assert_fail@plt+0x1e75c>
   31294:	ldr	r1, [r4, #32]
   31298:	mov	r0, #0
   3129c:	cmp	r1, r5
   312a0:	bge	31318 <__assert_fail@plt+0x1e75c>
   312a4:	ldr	r2, [r4, #28]
   312a8:	ldr	r1, [r4, #36]	; 0x24
   312ac:	ldr	r3, [r6, #92]	; 0x5c
   312b0:	add	r2, r3, r2
   312b4:	cmp	r1, r2
   312b8:	bgt	31318 <__assert_fail@plt+0x1e75c>
   312bc:	lsl	r1, r1, #1
   312c0:	mov	r0, r4
   312c4:	bl	31a6c <__assert_fail@plt+0x1eeb0>
   312c8:	cmp	r0, #0
   312cc:	beq	31284 <__assert_fail@plt+0x1e6c8>
   312d0:	b	31318 <__assert_fail@plt+0x1e75c>
   312d4:	cmp	r0, #2
   312d8:	blt	312f4 <__assert_fail@plt+0x1e738>
   312dc:	mov	r0, r4
   312e0:	bl	32144 <__assert_fail@plt+0x1f588>
   312e4:	b	31314 <__assert_fail@plt+0x1e758>
   312e8:	mov	r0, r4
   312ec:	bl	320d8 <__assert_fail@plt+0x1f51c>
   312f0:	b	31314 <__assert_fail@plt+0x1e758>
   312f4:	cmp	r8, #0
   312f8:	beq	31308 <__assert_fail@plt+0x1e74c>
   312fc:	mov	r0, r4
   31300:	bl	322d4 <__assert_fail@plt+0x1f718>
   31304:	b	31314 <__assert_fail@plt+0x1e758>
   31308:	ldr	r0, [r4, #36]	; 0x24
   3130c:	str	r0, [r4, #28]
   31310:	str	r0, [r4, #32]
   31314:	mov	r0, #0
   31318:	sub	sp, fp, #24
   3131c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   31320:	push	{r4, r5, fp, lr}
   31324:	add	fp, sp, #8
   31328:	ldr	r4, [r0]
   3132c:	ldr	r0, [r4, #56]	; 0x38
   31330:	cmp	r0, #0
   31334:	beq	3134c <__assert_fail@plt+0x1e790>
   31338:	ldr	r5, [r0]
   3133c:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   31340:	cmp	r5, #0
   31344:	mov	r0, r5
   31348:	bne	31338 <__assert_fail@plt+0x1e77c>
   3134c:	mov	r0, #31
   31350:	str	r0, [r4, #64]	; 0x40
   31354:	mov	r5, #0
   31358:	str	r5, [r4, #52]	; 0x34
   3135c:	str	r5, [r4, #56]	; 0x38
   31360:	ldr	r0, [r4, #16]
   31364:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   31368:	str	r5, [r4, #16]
   3136c:	pop	{r4, r5, fp, pc}
   31370:	push	{r4, sl, fp, lr}
   31374:	add	fp, sp, #8
   31378:	mov	r4, r0
   3137c:	ldr	r0, [r0, #8]
   31380:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   31384:	ldr	r0, [r4, #12]
   31388:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3138c:	ldrb	r0, [r4, #75]	; 0x4b
   31390:	cmp	r0, #0
   31394:	popeq	{r4, sl, fp, pc}
   31398:	ldr	r0, [r4, #4]
   3139c:	pop	{r4, sl, fp, lr}
   313a0:	b	2ca78 <__assert_fail@plt+0x19ebc>
   313a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   313a8:	add	fp, sp, #28
   313ac:	sub	sp, sp, #20
   313b0:	mov	r8, r3
   313b4:	mov	r4, r2
   313b8:	mov	r7, r1
   313bc:	mov	r5, r0
   313c0:	ldr	r9, [r1]
   313c4:	str	r2, [r9, #128]	; 0x80
   313c8:	orr	r2, r2, #8388608	; 0x800000
   313cc:	add	sl, sp, #12
   313d0:	mov	r0, sl
   313d4:	mov	r1, r5
   313d8:	bl	32334 <__assert_fail@plt+0x1f778>
   313dc:	mov	r6, #0
   313e0:	stm	sp, {r6, r8}
   313e4:	mov	r0, r5
   313e8:	mov	r1, r7
   313ec:	mov	r2, sl
   313f0:	mov	r3, r4
   313f4:	bl	32354 <__assert_fail@plt+0x1f798>
   313f8:	mov	r7, r0
   313fc:	cmp	r0, #0
   31400:	bne	31410 <__assert_fail@plt+0x1e854>
   31404:	ldr	r0, [r8]
   31408:	cmp	r0, #0
   3140c:	bne	3145c <__assert_fail@plt+0x1e8a0>
   31410:	mov	r0, r9
   31414:	mov	r1, #0
   31418:	mov	r2, #0
   3141c:	mov	r3, #2
   31420:	bl	324c0 <__assert_fail@plt+0x1f904>
   31424:	mov	r4, r0
   31428:	cmp	r7, #0
   3142c:	beq	3144c <__assert_fail@plt+0x1e890>
   31430:	mov	r0, r9
   31434:	mov	r1, r7
   31438:	mov	r2, r4
   3143c:	mov	r3, #16
   31440:	bl	324c0 <__assert_fail@plt+0x1f904>
   31444:	mov	r6, r0
   31448:	b	31450 <__assert_fail@plt+0x1e894>
   3144c:	mov	r6, r4
   31450:	cmp	r4, #0
   31454:	cmpne	r6, #0
   31458:	beq	31468 <__assert_fail@plt+0x1e8ac>
   3145c:	mov	r0, r6
   31460:	sub	sp, fp, #28
   31464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31468:	mov	r0, #12
   3146c:	str	r0, [r8]
   31470:	mov	r6, #0
   31474:	b	3145c <__assert_fail@plt+0x1e8a0>
   31478:	push	{r4, r5, r6, r7, fp, lr}
   3147c:	add	fp, sp, #16
   31480:	mov	r6, r0
   31484:	ldr	r4, [r0]
   31488:	ldr	r0, [r4, #4]
   3148c:	lsl	r0, r0, #2
   31490:	bl	2ed04 <__assert_fail@plt+0x1c148>
   31494:	str	r0, [r4, #12]
   31498:	ldr	r0, [r4, #4]
   3149c:	lsl	r0, r0, #2
   314a0:	bl	2ed04 <__assert_fail@plt+0x1c148>
   314a4:	str	r0, [r4, #16]
   314a8:	ldr	r0, [r4, #4]
   314ac:	add	r0, r0, r0, lsl #1
   314b0:	lsl	r0, r0, #2
   314b4:	bl	2ed04 <__assert_fail@plt+0x1c148>
   314b8:	str	r0, [r4, #20]
   314bc:	ldr	r0, [r4, #4]
   314c0:	add	r0, r0, r0, lsl #1
   314c4:	lsl	r0, r0, #2
   314c8:	bl	2ed04 <__assert_fail@plt+0x1c148>
   314cc:	str	r0, [r4, #24]
   314d0:	ldr	r1, [r4, #12]
   314d4:	mov	r7, #12
   314d8:	cmp	r1, #0
   314dc:	ldrne	r1, [r4, #16]
   314e0:	cmpne	r1, #0
   314e4:	beq	314f8 <__assert_fail@plt+0x1e93c>
   314e8:	cmp	r0, #0
   314ec:	ldrne	r0, [r4, #20]
   314f0:	cmpne	r0, #0
   314f4:	bne	31500 <__assert_fail@plt+0x1e944>
   314f8:	mov	r0, r7
   314fc:	pop	{r4, r5, r6, r7, fp, pc}
   31500:	ldr	r0, [r6, #24]
   31504:	lsl	r0, r0, #2
   31508:	bl	2ed04 <__assert_fail@plt+0x1c148>
   3150c:	str	r0, [r4, #132]	; 0x84
   31510:	cmp	r0, #0
   31514:	beq	315b8 <__assert_fail@plt+0x1e9fc>
   31518:	ldr	r0, [r6, #24]
   3151c:	cmp	r0, #0
   31520:	beq	31540 <__assert_fail@plt+0x1e984>
   31524:	ldr	r0, [r4, #132]	; 0x84
   31528:	mov	r1, #0
   3152c:	str	r1, [r0, r1, lsl #2]
   31530:	add	r1, r1, #1
   31534:	ldr	r2, [r6, #24]
   31538:	cmp	r1, r2
   3153c:	bcc	3152c <__assert_fail@plt+0x1e970>
   31540:	ldr	r0, [r4, #52]	; 0x34
   31544:	movw	r1, #21584	; 0x5450
   31548:	movt	r1, #3
   3154c:	mov	r2, r4
   31550:	bl	353d0 <__assert_fail@plt+0x22814>
   31554:	ldr	r1, [r6, #24]
   31558:	mov	r0, #0
   3155c:	cmp	r1, #0
   31560:	beq	3159c <__assert_fail@plt+0x1e9e0>
   31564:	ldr	r2, [r4, #132]	; 0x84
   31568:	ldr	r3, [r2]
   3156c:	cmp	r3, #0
   31570:	bne	315a0 <__assert_fail@plt+0x1e9e4>
   31574:	mov	r3, #1
   31578:	mov	r0, r3
   3157c:	ldr	r1, [r6, #24]
   31580:	cmp	r3, r1
   31584:	bcs	315a0 <__assert_fail@plt+0x1e9e4>
   31588:	ldr	r5, [r2, r0, lsl #2]
   3158c:	add	r3, r0, #1
   31590:	cmp	r0, r5
   31594:	beq	31578 <__assert_fail@plt+0x1e9bc>
   31598:	b	315a0 <__assert_fail@plt+0x1e9e4>
   3159c:	mov	r1, #0
   315a0:	cmp	r0, r1
   315a4:	bne	315b8 <__assert_fail@plt+0x1e9fc>
   315a8:	ldr	r0, [r4, #132]	; 0x84
   315ac:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   315b0:	mov	r0, #0
   315b4:	str	r0, [r4, #132]	; 0x84
   315b8:	ldr	r0, [r4, #52]	; 0x34
   315bc:	movw	r1, #21736	; 0x54e8
   315c0:	movt	r1, #3
   315c4:	mov	r2, r6
   315c8:	bl	32ef8 <__assert_fail@plt+0x2033c>
   315cc:	cmp	r0, #0
   315d0:	bne	31690 <__assert_fail@plt+0x1ead4>
   315d4:	ldr	r0, [r4, #52]	; 0x34
   315d8:	movw	r1, #21872	; 0x5570
   315dc:	movt	r1, #3
   315e0:	mov	r2, r4
   315e4:	bl	32ef8 <__assert_fail@plt+0x2033c>
   315e8:	cmp	r0, #0
   315ec:	bne	31690 <__assert_fail@plt+0x1ead4>
   315f0:	ldr	r0, [r4, #52]	; 0x34
   315f4:	movw	r1, #22012	; 0x55fc
   315f8:	movt	r1, #3
   315fc:	mov	r2, r4
   31600:	bl	353d0 <__assert_fail@plt+0x22814>
   31604:	ldr	r0, [r4, #52]	; 0x34
   31608:	movw	r1, #22112	; 0x5660
   3160c:	movt	r1, #3
   31610:	mov	r2, r4
   31614:	bl	353d0 <__assert_fail@plt+0x22814>
   31618:	cmp	r0, #0
   3161c:	bne	31690 <__assert_fail@plt+0x1ead4>
   31620:	mov	r0, r4
   31624:	bl	35774 <__assert_fail@plt+0x22bb8>
   31628:	cmp	r0, #0
   3162c:	popne	{r4, r5, r6, r7, fp, pc}
   31630:	ldrb	r0, [r6, #28]
   31634:	tst	r0, #16
   31638:	bne	31650 <__assert_fail@plt+0x1ea94>
   3163c:	ldr	r0, [r6, #24]
   31640:	cmp	r0, #0
   31644:	ldrbne	r0, [r4, #88]	; 0x58
   31648:	tstne	r0, #1
   3164c:	bne	3165c <__assert_fail@plt+0x1eaa0>
   31650:	ldr	r0, [r4, #76]	; 0x4c
   31654:	cmp	r0, #0
   31658:	beq	31684 <__assert_fail@plt+0x1eac8>
   3165c:	ldr	r0, [r4, #8]
   31660:	add	r0, r0, r0, lsl #1
   31664:	lsl	r0, r0, #2
   31668:	bl	2ed04 <__assert_fail@plt+0x1c148>
   3166c:	str	r0, [r4, #28]
   31670:	cmp	r0, #0
   31674:	beq	314f8 <__assert_fail@plt+0x1e93c>
   31678:	mov	r0, r4
   3167c:	pop	{r4, r5, r6, r7, fp, lr}
   31680:	b	35830 <__assert_fail@plt+0x22c74>
   31684:	mov	r7, #0
   31688:	mov	r0, r7
   3168c:	pop	{r4, r5, r6, r7, fp, pc}
   31690:	pop	{r4, r5, r6, r7, fp, pc}
   31694:	push	{r4, r5, r6, r7, fp, lr}
   31698:	add	fp, sp, #16
   3169c:	ldr	r1, [r0, #8]
   316a0:	cmp	r1, #0
   316a4:	beq	31784 <__assert_fail@plt+0x1ebc8>
   316a8:	ldr	r3, [r0]
   316ac:	mov	r5, #0
   316b0:	mov	ip, #1
   316b4:	mov	lr, #139	; 0x8b
   316b8:	mov	r2, #0
   316bc:	mov	r4, #0
   316c0:	add	r1, r3, r4, lsl #3
   316c4:	ldrb	r6, [r1, #4]
   316c8:	sub	r6, r6, #1
   316cc:	cmp	r6, #11
   316d0:	bhi	3182c <__assert_fail@plt+0x1ec70>
   316d4:	add	r7, pc, #0
   316d8:	ldr	pc, [r7, r6, lsl #2]
   316dc:	andeq	r1, r3, r4, ror #14
   316e0:	andeq	r1, r3, ip, lsl #14
   316e4:	andeq	r1, r3, r0, lsr #14
   316e8:	andeq	r1, r3, ip, lsl #14
   316ec:	andeq	r1, r3, ip, ror r7
   316f0:	andeq	r1, r3, r8, lsr #16
   316f4:	andeq	r1, r3, ip, lsr #16
   316f8:	andeq	r1, r3, ip, lsl #14
   316fc:	andeq	r1, r3, ip, lsl #14
   31700:	andeq	r1, r3, ip, lsl #14
   31704:	andeq	r1, r3, ip, lsl #14
   31708:	andeq	r1, r3, r4, asr #14
   3170c:	ldr	r1, [r0, #8]
   31710:	add	r4, r4, #1
   31714:	cmp	r4, r1
   31718:	bcc	316c0 <__assert_fail@plt+0x1eb04>
   3171c:	b	3178c <__assert_fail@plt+0x1ebd0>
   31720:	ldr	r1, [r3, r4, lsl #3]
   31724:	mov	r6, #4
   31728:	ldr	r7, [r1, r6, lsl #2]
   3172c:	cmp	r7, #0
   31730:	popne	{r4, r5, r6, r7, fp, pc}
   31734:	add	r6, r6, #1
   31738:	cmp	r6, #7
   3173c:	bls	31728 <__assert_fail@plt+0x1eb6c>
   31740:	b	3170c <__assert_fail@plt+0x1eb50>
   31744:	ldr	r1, [r3, r4, lsl #3]
   31748:	sub	r1, r1, #16
   3174c:	ror	r1, r1, #4
   31750:	cmp	r1, #7
   31754:	bhi	31828 <__assert_fail@plt+0x1ec6c>
   31758:	tst	lr, ip, lsl r1
   3175c:	bne	3170c <__assert_fail@plt+0x1eb50>
   31760:	b	31828 <__assert_fail@plt+0x1ec6c>
   31764:	ldrsb	r1, [r1]
   31768:	cmp	r1, #0
   3176c:	mov	r1, #0
   31770:	movwlt	r1, #1
   31774:	orr	r2, r2, r1
   31778:	b	3170c <__assert_fail@plt+0x1eb50>
   3177c:	mov	r5, #1
   31780:	b	3170c <__assert_fail@plt+0x1eb50>
   31784:	mov	r2, #0
   31788:	mov	r5, #0
   3178c:	tst	r2, #1
   31790:	tsteq	r5, #1
   31794:	beq	317f8 <__assert_fail@plt+0x1ec3c>
   31798:	ldr	r1, [r0, #8]
   3179c:	cmp	r1, #0
   317a0:	beq	317f8 <__assert_fail@plt+0x1ec3c>
   317a4:	mov	r2, #0
   317a8:	mov	r3, #7
   317ac:	ldr	r1, [r0]
   317b0:	add	r4, r1, r2, lsl #3
   317b4:	ldr	r1, [r4, #4]
   317b8:	uxtb	r6, r1
   317bc:	cmp	r6, #5
   317c0:	beq	317e0 <__assert_fail@plt+0x1ec24>
   317c4:	cmp	r6, #1
   317c8:	bne	317e8 <__assert_fail@plt+0x1ec2c>
   317cc:	ldrsb	r7, [r4]
   317d0:	cmn	r7, #1
   317d4:	bgt	317e8 <__assert_fail@plt+0x1ec2c>
   317d8:	bic	r1, r1, #2097152	; 0x200000
   317dc:	b	317e4 <__assert_fail@plt+0x1ec28>
   317e0:	bfi	r1, r3, #0, #8
   317e4:	str	r1, [r4, #4]
   317e8:	ldr	r1, [r0, #8]
   317ec:	add	r2, r2, #1
   317f0:	cmp	r2, r1
   317f4:	bcc	317ac <__assert_fail@plt+0x1ebf0>
   317f8:	mov	r1, #1
   317fc:	str	r1, [r0, #92]	; 0x5c
   31800:	ldr	r1, [r0, #76]	; 0x4c
   31804:	mov	r2, #0
   31808:	cmp	r1, #0
   3180c:	movwgt	r2, #1
   31810:	orr	r1, r5, r2
   31814:	and	r1, r1, #1
   31818:	ldrb	r2, [r0, #88]	; 0x58
   3181c:	and	r2, r2, #249	; 0xf9
   31820:	orr	r1, r2, r1, lsl #1
   31824:	strb	r1, [r0, #88]	; 0x58
   31828:	pop	{r4, r5, r6, r7, fp, pc}
   3182c:	bl	12b68 <abort@plt>
   31830:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   31834:	add	fp, sp, #24
   31838:	sub	sp, sp, #16
   3183c:	mov	r9, r0
   31840:	ldr	r0, [r0, #24]
   31844:	ldr	r1, [r9, #52]	; 0x34
   31848:	ldr	r1, [r1, #12]
   3184c:	ldr	r1, [r1, #28]
   31850:	str	r1, [r9, #72]	; 0x48
   31854:	add	r1, r1, r1, lsl #1
   31858:	add	r1, r0, r1, lsl #2
   3185c:	mov	r0, sp
   31860:	bl	36574 <__assert_fail@plt+0x239b8>
   31864:	str	r0, [sp, #12]
   31868:	cmp	r0, #0
   3186c:	bne	31a0c <__assert_fail@plt+0x1ee50>
   31870:	ldr	r0, [r9, #76]	; 0x4c
   31874:	cmp	r0, #1
   31878:	ldrge	r0, [sp, #4]
   3187c:	cmpge	r0, #1
   31880:	blt	3194c <__assert_fail@plt+0x1ed90>
   31884:	mov	r7, #0
   31888:	mov	r8, sp
   3188c:	ldr	r3, [sp, #8]
   31890:	ldr	r1, [r3, r7, lsl #2]
   31894:	ldr	r6, [r9]
   31898:	add	r2, r6, r1, lsl #3
   3189c:	ldrb	ip, [r2, #4]
   318a0:	cmp	ip, #4
   318a4:	bne	3193c <__assert_fail@plt+0x1ed80>
   318a8:	mov	r5, #0
   318ac:	cmp	r0, #1
   318b0:	blt	318e4 <__assert_fail@plt+0x1ed28>
   318b4:	ldr	r4, [r3, r5, lsl #2]
   318b8:	add	r2, r6, r4, lsl #3
   318bc:	ldrb	r2, [r2, #4]
   318c0:	cmp	r2, #9
   318c4:	bne	318d8 <__assert_fail@plt+0x1ed1c>
   318c8:	ldr	r2, [r6, r1, lsl #3]
   318cc:	ldr	r4, [r6, r4, lsl #3]
   318d0:	cmp	r4, r2
   318d4:	beq	318e4 <__assert_fail@plt+0x1ed28>
   318d8:	add	r5, r5, #1
   318dc:	cmp	r5, r0
   318e0:	blt	318b4 <__assert_fail@plt+0x1ecf8>
   318e4:	cmp	r5, r0
   318e8:	beq	3193c <__assert_fail@plt+0x1ed80>
   318ec:	cmp	ip, #4
   318f0:	bne	3193c <__assert_fail@plt+0x1ed80>
   318f4:	ldr	r0, [r9, #20]
   318f8:	add	r1, r1, r1, lsl #1
   318fc:	add	r0, r0, r1, lsl #2
   31900:	ldr	r0, [r0, #8]
   31904:	ldr	r6, [r0]
   31908:	mov	r0, r8
   3190c:	mov	r1, r6
   31910:	bl	365f0 <__assert_fail@plt+0x23a34>
   31914:	cmp	r0, #0
   31918:	bne	3193c <__assert_fail@plt+0x1ed80>
   3191c:	ldr	r0, [r9, #24]
   31920:	add	r1, r6, r6, lsl #1
   31924:	add	r1, r0, r1, lsl #2
   31928:	mov	r0, r8
   3192c:	bl	36170 <__assert_fail@plt+0x235b4>
   31930:	mov	r7, #0
   31934:	cmp	r0, #0
   31938:	bne	31a0c <__assert_fail@plt+0x1ee50>
   3193c:	add	r7, r7, #1
   31940:	ldr	r0, [sp, #4]
   31944:	cmp	r7, r0
   31948:	blt	3188c <__assert_fail@plt+0x1ecd0>
   3194c:	add	r0, sp, #12
   31950:	mov	r2, sp
   31954:	mov	r1, r9
   31958:	mov	r3, #0
   3195c:	bl	3665c <__assert_fail@plt+0x23aa0>
   31960:	str	r0, [r9, #36]	; 0x24
   31964:	cmp	r0, #0
   31968:	beq	319e8 <__assert_fail@plt+0x1ee2c>
   3196c:	ldrsb	r1, [r0, #52]	; 0x34
   31970:	cmn	r1, #1
   31974:	ble	31988 <__assert_fail@plt+0x1edcc>
   31978:	str	r0, [r9, #40]	; 0x28
   3197c:	str	r0, [r9, #44]	; 0x2c
   31980:	str	r0, [r9, #48]	; 0x30
   31984:	b	31a00 <__assert_fail@plt+0x1ee44>
   31988:	add	r5, sp, #12
   3198c:	mov	r6, sp
   31990:	mov	r0, r5
   31994:	mov	r1, r9
   31998:	mov	r2, r6
   3199c:	mov	r3, #1
   319a0:	bl	3665c <__assert_fail@plt+0x23aa0>
   319a4:	str	r0, [r9, #40]	; 0x28
   319a8:	mov	r0, r5
   319ac:	mov	r1, r9
   319b0:	mov	r2, r6
   319b4:	mov	r3, #2
   319b8:	bl	3665c <__assert_fail@plt+0x23aa0>
   319bc:	str	r0, [r9, #44]	; 0x2c
   319c0:	mov	r0, r5
   319c4:	mov	r1, r9
   319c8:	mov	r2, r6
   319cc:	mov	r3, #6
   319d0:	bl	3665c <__assert_fail@plt+0x23aa0>
   319d4:	str	r0, [r9, #48]	; 0x30
   319d8:	ldr	r1, [r9, #40]	; 0x28
   319dc:	cmp	r1, #0
   319e0:	cmpne	r0, #0
   319e4:	bne	319f4 <__assert_fail@plt+0x1ee38>
   319e8:	ldr	r0, [sp, #12]
   319ec:	sub	sp, fp, #24
   319f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   319f4:	ldr	r0, [r9, #44]	; 0x2c
   319f8:	cmp	r0, #0
   319fc:	beq	319e8 <__assert_fail@plt+0x1ee2c>
   31a00:	ldr	r0, [sp, #8]
   31a04:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   31a08:	mov	r0, #0
   31a0c:	sub	sp, fp, #24
   31a10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   31a14:	str	r1, [r2, #48]	; 0x30
   31a18:	str	r0, [r2]
   31a1c:	str	r1, [r2, #44]	; 0x2c
   31a20:	str	r3, [r2, #64]	; 0x40
   31a24:	ldr	r0, [sp]
   31a28:	strb	r0, [r2, #72]	; 0x48
   31a2c:	cmp	r3, #0
   31a30:	movwne	r3, #1
   31a34:	orr	r0, r3, r0
   31a38:	strb	r0, [r2, #75]	; 0x4b
   31a3c:	ldr	r0, [sp, #4]
   31a40:	ldr	r3, [r0, #92]	; 0x5c
   31a44:	str	r3, [r2, #80]	; 0x50
   31a48:	ldrb	r3, [r0, #88]	; 0x58
   31a4c:	ubfx	r3, r3, #2, #1
   31a50:	strb	r3, [r2, #73]	; 0x49
   31a54:	ldrb	r0, [r0, #88]	; 0x58
   31a58:	str	r1, [r2, #56]	; 0x38
   31a5c:	str	r1, [r2, #52]	; 0x34
   31a60:	ubfx	r0, r0, #3, #1
   31a64:	strb	r0, [r2, #74]	; 0x4a
   31a68:	bx	lr
   31a6c:	push	{r4, r5, r6, r7, fp, lr}
   31a70:	add	fp, sp, #16
   31a74:	mov	r4, r1
   31a78:	mov	r5, r0
   31a7c:	ldr	r0, [r0, #80]	; 0x50
   31a80:	cmp	r0, #2
   31a84:	blt	31ad0 <__assert_fail@plt+0x1ef14>
   31a88:	mov	r6, #12
   31a8c:	cmn	r4, #-1073741823	; 0xc0000001
   31a90:	bhi	31afc <__assert_fail@plt+0x1ef40>
   31a94:	ldr	r0, [r5, #8]
   31a98:	lsl	r7, r4, #2
   31a9c:	mov	r1, r7
   31aa0:	bl	2f804 <__assert_fail@plt+0x1cc48>
   31aa4:	cmp	r0, #0
   31aa8:	beq	31afc <__assert_fail@plt+0x1ef40>
   31aac:	str	r0, [r5, #8]
   31ab0:	ldr	r0, [r5, #12]
   31ab4:	cmp	r0, #0
   31ab8:	beq	31ad0 <__assert_fail@plt+0x1ef14>
   31abc:	mov	r1, r7
   31ac0:	bl	2f804 <__assert_fail@plt+0x1cc48>
   31ac4:	cmp	r0, #0
   31ac8:	beq	31afc <__assert_fail@plt+0x1ef40>
   31acc:	str	r0, [r5, #12]
   31ad0:	ldrb	r0, [r5, #75]	; 0x4b
   31ad4:	cmp	r0, #0
   31ad8:	beq	31af4 <__assert_fail@plt+0x1ef38>
   31adc:	ldr	r0, [r5, #4]
   31ae0:	mov	r1, r4
   31ae4:	bl	2f804 <__assert_fail@plt+0x1cc48>
   31ae8:	cmp	r0, #0
   31aec:	beq	31b04 <__assert_fail@plt+0x1ef48>
   31af0:	str	r0, [r5, #4]
   31af4:	str	r4, [r5, #36]	; 0x24
   31af8:	mov	r6, #0
   31afc:	mov	r0, r6
   31b00:	pop	{r4, r5, r6, r7, fp, pc}
   31b04:	mov	r6, #12
   31b08:	mov	r0, r6
   31b0c:	pop	{r4, r5, r6, r7, fp, pc}
   31b10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31b14:	add	fp, sp, #28
   31b18:	sub	sp, sp, #92	; 0x5c
   31b1c:	mov	r6, r0
   31b20:	ldrb	r0, [r0, #74]	; 0x4a
   31b24:	ldr	sl, [r6, #28]
   31b28:	ldr	r5, [r6, #36]	; 0x24
   31b2c:	ldr	r1, [r6, #48]	; 0x30
   31b30:	cmp	r5, r1
   31b34:	movgt	r5, r1
   31b38:	cmp	r0, #0
   31b3c:	str	r6, [sp]
   31b40:	bne	31b5c <__assert_fail@plt+0x1efa0>
   31b44:	ldr	r0, [r6, #64]	; 0x40
   31b48:	cmp	r0, #0
   31b4c:	bne	31b5c <__assert_fail@plt+0x1efa0>
   31b50:	ldrb	r0, [r6, #76]	; 0x4c
   31b54:	cmp	r0, #0
   31b58:	beq	31b64 <__assert_fail@plt+0x1efa8>
   31b5c:	ldr	ip, [r6, #32]
   31b60:	b	31d7c <__assert_fail@plt+0x1f1c0>
   31b64:	cmp	r5, sl
   31b68:	ble	31b78 <__assert_fail@plt+0x1efbc>
   31b6c:	add	r8, r6, #16
   31b70:	mov	r9, r5
   31b74:	b	31bd0 <__assert_fail@plt+0x1f014>
   31b78:	mov	ip, sl
   31b7c:	b	320a4 <__assert_fail@plt+0x1f4e8>
   31b80:	add	r0, r4, #1
   31b84:	cmp	r0, #2
   31b88:	bcc	31ba0 <__assert_fail@plt+0x1efe4>
   31b8c:	ldr	r1, [sp]
   31b90:	ldr	r0, [r1, #36]	; 0x24
   31b94:	ldr	r1, [r1, #48]	; 0x30
   31b98:	cmp	r0, r1
   31b9c:	blt	31d38 <__assert_fail@plt+0x1f17c>
   31ba0:	ldr	r1, [sp]
   31ba4:	ldr	r0, [r1, #4]
   31ba8:	strb	r6, [r0, r7]
   31bac:	ldr	r0, [r1, #8]
   31bb0:	str	r6, [r0, r7, lsl #2]
   31bb4:	add	sl, r7, #1
   31bb8:	cmn	r4, #1
   31bbc:	bne	31d14 <__assert_fail@plt+0x1f158>
   31bc0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   31bc4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   31bc8:	stm	r8, {r0, r1}
   31bcc:	b	31d14 <__assert_fail@plt+0x1f158>
   31bd0:	ldr	r0, [r6]
   31bd4:	ldr	r1, [r6, #24]
   31bd8:	add	r1, r1, sl
   31bdc:	ldrb	r6, [r0, r1]
   31be0:	tst	r6, #128	; 0x80
   31be4:	bne	31c2c <__assert_fail@plt+0x1f070>
   31be8:	mov	r0, r8
   31bec:	mov	r4, sl
   31bf0:	bl	12604 <mbsinit@plt>
   31bf4:	cmp	r0, #0
   31bf8:	beq	31c2c <__assert_fail@plt+0x1f070>
   31bfc:	mov	r0, r6
   31c00:	bl	12b44 <towupper@plt>
   31c04:	mov	sl, r4
   31c08:	cmp	r0, #127	; 0x7f
   31c0c:	bhi	31c2c <__assert_fail@plt+0x1f070>
   31c10:	ldr	r2, [sp]
   31c14:	ldr	r1, [r2, #4]
   31c18:	strb	r0, [r1, sl]
   31c1c:	ldr	r1, [r2, #8]
   31c20:	str	r0, [r1, sl, lsl #2]
   31c24:	add	sl, sl, #1
   31c28:	b	31d14 <__assert_fail@plt+0x1f158>
   31c2c:	ldm	r8, {r0, r1}
   31c30:	str	r1, [fp, #-36]	; 0xffffffdc
   31c34:	str	r0, [fp, #-40]	; 0xffffffd8
   31c38:	sub	r2, r5, sl
   31c3c:	ldr	r1, [sp]
   31c40:	ldr	r0, [r1]
   31c44:	ldr	r1, [r1, #24]
   31c48:	add	r0, r0, r1
   31c4c:	mov	r7, sl
   31c50:	add	r1, r0, sl
   31c54:	add	r0, sp, #12
   31c58:	mov	r3, r8
   31c5c:	bl	2ed34 <__assert_fail@plt+0x1c178>
   31c60:	mov	r4, r0
   31c64:	sub	r0, r0, #1
   31c68:	cmn	r0, #4
   31c6c:	bhi	31b80 <__assert_fail@plt+0x1efc4>
   31c70:	ldr	r0, [sp, #12]
   31c74:	bl	12b44 <towupper@plt>
   31c78:	mov	r6, r0
   31c7c:	ldr	r0, [sp, #12]
   31c80:	cmp	r6, r0
   31c84:	add	sl, sp, #16
   31c88:	bne	31cac <__assert_fail@plt+0x1f0f0>
   31c8c:	ldr	r5, [sp]
   31c90:	ldr	r1, [r5]
   31c94:	ldr	r0, [r5, #4]
   31c98:	ldr	r2, [r5, #24]
   31c9c:	add	r0, r0, r7
   31ca0:	add	r1, r1, r2
   31ca4:	add	r1, r1, r7
   31ca8:	b	31cd4 <__assert_fail@plt+0x1f118>
   31cac:	mov	r0, sl
   31cb0:	mov	r1, r6
   31cb4:	sub	r2, fp, #40	; 0x28
   31cb8:	bl	12490 <wcrtomb@plt>
   31cbc:	cmp	r4, r0
   31cc0:	bne	31d28 <__assert_fail@plt+0x1f16c>
   31cc4:	ldr	r5, [sp]
   31cc8:	ldr	r0, [r5, #4]
   31ccc:	add	r0, r0, r7
   31cd0:	mov	r1, sl
   31cd4:	mov	r2, r4
   31cd8:	bl	125c8 <memcpy@plt>
   31cdc:	ldr	r0, [r5, #8]
   31ce0:	str	r6, [r0, r7, lsl #2]
   31ce4:	add	r6, r4, r7
   31ce8:	add	sl, r7, #1
   31cec:	cmp	sl, r6
   31cf0:	mov	r5, r9
   31cf4:	bge	31d14 <__assert_fail@plt+0x1f158>
   31cf8:	mvn	r1, #3
   31cfc:	add	r2, r1, r4, lsl #2
   31d00:	add	r0, r0, r7, lsl #2
   31d04:	add	r0, r0, #4
   31d08:	mov	r1, #255	; 0xff
   31d0c:	bl	12904 <memset@plt>
   31d10:	mov	sl, r6
   31d14:	cmp	r5, sl
   31d18:	mov	ip, sl
   31d1c:	ldr	r6, [sp]
   31d20:	bgt	31bd0 <__assert_fail@plt+0x1f014>
   31d24:	b	320a4 <__assert_fail@plt+0x1f4e8>
   31d28:	mov	ip, r7
   31d2c:	mov	sl, r7
   31d30:	ldr	r6, [sp]
   31d34:	b	31d84 <__assert_fail@plt+0x1f1c8>
   31d38:	ldr	r0, [fp, #-40]	; 0xffffffd8
   31d3c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   31d40:	stm	r8, {r0, r1}
   31d44:	mov	ip, r7
   31d48:	mov	sl, r7
   31d4c:	ldr	r6, [sp]
   31d50:	b	320a4 <__assert_fail@plt+0x1f4e8>
   31d54:	mvn	r1, #3
   31d58:	add	r2, r1, r5, lsl #2
   31d5c:	add	r0, r0, sl, lsl #2
   31d60:	add	r0, r0, #4
   31d64:	mov	r1, #255	; 0xff
   31d68:	mov	r5, ip
   31d6c:	bl	12904 <memset@plt>
   31d70:	mov	ip, r5
   31d74:	mov	sl, r4
   31d78:	ldr	r5, [sp, #4]
   31d7c:	cmp	sl, r5
   31d80:	bge	320a4 <__assert_fail@plt+0x1f4e8>
   31d84:	mov	r3, r6
   31d88:	ldr	r0, [r6, #16]!
   31d8c:	ldr	r1, [r6, #4]
   31d90:	str	r0, [fp, #-40]	; 0xffffffd8
   31d94:	str	r1, [fp, #-36]	; 0xffffffdc
   31d98:	str	r5, [sp, #4]
   31d9c:	sub	r2, r5, sl
   31da0:	ldr	r0, [r6, #48]	; 0x30
   31da4:	cmp	r0, #0
   31da8:	bne	31e70 <__assert_fail@plt+0x1f2b4>
   31dac:	ldr	r0, [r3]
   31db0:	ldr	r1, [r3, #24]
   31db4:	add	r0, r0, r1
   31db8:	add	r4, r0, ip
   31dbc:	mov	r9, ip
   31dc0:	add	r0, sp, #8
   31dc4:	mov	r1, r4
   31dc8:	mov	r3, r6
   31dcc:	bl	2ed34 <__assert_fail@plt+0x1c178>
   31dd0:	mov	r5, r0
   31dd4:	sub	r8, r0, #1
   31dd8:	cmn	r8, #4
   31ddc:	bhi	31ecc <__assert_fail@plt+0x1f310>
   31de0:	ldr	r0, [sp, #8]
   31de4:	bl	12b44 <towupper@plt>
   31de8:	mov	r7, r0
   31dec:	ldr	r0, [sp, #8]
   31df0:	cmp	r7, r0
   31df4:	bne	31e0c <__assert_fail@plt+0x1f250>
   31df8:	ldr	r6, [sp]
   31dfc:	ldr	r0, [r6, #4]
   31e00:	add	r0, r0, sl
   31e04:	mov	r1, r4
   31e08:	b	31e34 <__assert_fail@plt+0x1f278>
   31e0c:	add	r0, sp, #16
   31e10:	sub	r2, fp, #40	; 0x28
   31e14:	mov	r1, r7
   31e18:	bl	12490 <wcrtomb@plt>
   31e1c:	cmp	r0, r5
   31e20:	bne	31f48 <__assert_fail@plt+0x1f38c>
   31e24:	ldr	r6, [sp]
   31e28:	ldr	r0, [r6, #4]
   31e2c:	add	r0, r0, sl
   31e30:	add	r1, sp, #16
   31e34:	mov	r2, r5
   31e38:	bl	125c8 <memcpy@plt>
   31e3c:	ldrb	r0, [r6, #76]	; 0x4c
   31e40:	cmp	r0, #0
   31e44:	mov	ip, r9
   31e48:	bne	32070 <__assert_fail@plt+0x1f4b4>
   31e4c:	ldr	r0, [r6, #8]
   31e50:	str	r7, [r0, sl, lsl #2]
   31e54:	add	r4, r5, sl
   31e58:	add	ip, r5, ip
   31e5c:	add	r1, sl, #1
   31e60:	cmp	r1, r4
   31e64:	blt	31d54 <__assert_fail@plt+0x1f198>
   31e68:	mov	sl, r1
   31e6c:	b	31d78 <__assert_fail@plt+0x1f1bc>
   31e70:	add	r4, sp, #16
   31e74:	cmp	r2, #1
   31e78:	ldrge	r1, [sp]
   31e7c:	ldrge	r1, [r1, #80]	; 0x50
   31e80:	cmpge	r1, #1
   31e84:	blt	31dbc <__assert_fail@plt+0x1f200>
   31e88:	mov	r1, #0
   31e8c:	add	r4, sp, #16
   31e90:	ldr	r5, [sp]
   31e94:	ldr	r3, [r5]
   31e98:	ldr	r7, [r5, #24]
   31e9c:	add	r3, r3, r7
   31ea0:	add	r3, r3, ip
   31ea4:	ldrb	r3, [r3, r1]
   31ea8:	ldrb	r3, [r0, r3]
   31eac:	strb	r3, [r4, r1]
   31eb0:	add	r1, r1, #1
   31eb4:	cmp	r1, r2
   31eb8:	bge	31dbc <__assert_fail@plt+0x1f200>
   31ebc:	ldr	r3, [r5, #80]	; 0x50
   31ec0:	cmp	r1, r3
   31ec4:	blt	31e94 <__assert_fail@plt+0x1f2d8>
   31ec8:	b	31dbc <__assert_fail@plt+0x1f200>
   31ecc:	add	r0, r5, #1
   31ed0:	cmp	r0, #2
   31ed4:	mov	ip, r9
   31ed8:	ldr	r3, [sp]
   31edc:	bcc	31ef0 <__assert_fail@plt+0x1f334>
   31ee0:	ldr	r0, [r3, #36]	; 0x24
   31ee4:	ldr	r1, [r3, #48]	; 0x30
   31ee8:	cmp	r0, r1
   31eec:	blt	32094 <__assert_fail@plt+0x1f4d8>
   31ef0:	ldr	r0, [r3]
   31ef4:	ldr	r2, [r3, #24]
   31ef8:	ldr	r1, [r3, #64]	; 0x40
   31efc:	add	r2, r2, ip
   31f00:	ldrb	r0, [r0, r2]
   31f04:	cmp	r1, #0
   31f08:	ldrbne	r0, [r1, r0]
   31f0c:	ldr	r2, [sp]
   31f10:	ldr	r1, [r2, #4]
   31f14:	strb	r0, [r1, sl]
   31f18:	ldrb	r1, [r2, #76]	; 0x4c
   31f1c:	cmp	r1, #0
   31f20:	ldrne	r1, [r2, #12]
   31f24:	strne	ip, [r1, sl, lsl #2]
   31f28:	ldr	r1, [r2, #8]
   31f2c:	str	r0, [r1, sl, lsl #2]
   31f30:	add	sl, sl, #1
   31f34:	add	ip, ip, #1
   31f38:	cmn	r5, #1
   31f3c:	beq	320c4 <__assert_fail@plt+0x1f508>
   31f40:	ldr	r6, [sp]
   31f44:	b	31d78 <__assert_fail@plt+0x1f1bc>
   31f48:	mov	r2, r0
   31f4c:	cmn	r0, #1
   31f50:	beq	31df8 <__assert_fail@plt+0x1f23c>
   31f54:	mov	ip, r9
   31f58:	add	r1, r2, sl
   31f5c:	ldr	r3, [sp]
   31f60:	ldr	r0, [r3, #36]	; 0x24
   31f64:	cmp	r1, r0
   31f68:	bhi	32094 <__assert_fail@plt+0x1f4d8>
   31f6c:	str	r1, [sp, #4]
   31f70:	ldr	r1, [r3, #12]
   31f74:	cmp	r1, #0
   31f78:	mov	r6, r3
   31f7c:	bne	31f9c <__assert_fail@plt+0x1f3e0>
   31f80:	lsl	r0, r0, #2
   31f84:	mov	r4, r2
   31f88:	bl	2ed04 <__assert_fail@plt+0x1c148>
   31f8c:	mov	r2, r4
   31f90:	str	r0, [r6, #12]
   31f94:	cmp	r0, #0
   31f98:	beq	320b8 <__assert_fail@plt+0x1f4fc>
   31f9c:	ldrb	r0, [r6, #76]	; 0x4c
   31fa0:	cmp	r0, #0
   31fa4:	bne	31fd0 <__assert_fail@plt+0x1f414>
   31fa8:	cmp	sl, #0
   31fac:	beq	31fc8 <__assert_fail@plt+0x1f40c>
   31fb0:	ldr	r0, [r6, #12]
   31fb4:	mov	r1, #0
   31fb8:	str	r1, [r0, r1, lsl #2]
   31fbc:	add	r1, r1, #1
   31fc0:	cmp	sl, r1
   31fc4:	bne	31fb8 <__assert_fail@plt+0x1f3fc>
   31fc8:	mov	r0, #1
   31fcc:	strb	r0, [r6, #76]	; 0x4c
   31fd0:	ldr	r0, [r6, #4]
   31fd4:	add	r0, r0, sl
   31fd8:	add	r1, sp, #16
   31fdc:	mov	r4, r2
   31fe0:	bl	125c8 <memcpy@plt>
   31fe4:	ldr	r1, [r6, #8]
   31fe8:	str	r7, [r1, sl, lsl #2]
   31fec:	ldr	r0, [r6, #12]
   31ff0:	mov	ip, r9
   31ff4:	str	r9, [r0, sl, lsl #2]
   31ff8:	cmp	r4, #2
   31ffc:	bcc	32034 <__assert_fail@plt+0x1f478>
   32000:	add	r0, r0, sl, lsl #2
   32004:	add	r1, r1, sl, lsl #2
   32008:	mov	r2, #1
   3200c:	mvn	r3, #0
   32010:	cmp	r2, r5
   32014:	mov	r7, r8
   32018:	movcc	r7, r2
   3201c:	add	r7, r7, ip
   32020:	str	r7, [r0, r2, lsl #2]
   32024:	str	r3, [r1, r2, lsl #2]
   32028:	add	r2, r2, #1
   3202c:	cmp	r4, r2
   32030:	bne	32010 <__assert_fail@plt+0x1f454>
   32034:	sub	r1, r4, r5
   32038:	ldr	r0, [r6, #48]	; 0x30
   3203c:	ldr	r2, [r6, #52]	; 0x34
   32040:	add	r0, r0, r1
   32044:	str	r0, [r6, #48]	; 0x30
   32048:	cmp	r2, ip
   3204c:	ldrgt	r2, [r6, #56]	; 0x38
   32050:	addgt	r1, r2, r1
   32054:	strgt	r1, [r6, #56]	; 0x38
   32058:	add	ip, r5, ip
   3205c:	ldr	r5, [r6, #36]	; 0x24
   32060:	cmp	r5, r0
   32064:	movgt	r5, r0
   32068:	ldr	sl, [sp, #4]
   3206c:	b	31d7c <__assert_fail@plt+0x1f1c0>
   32070:	ldr	r0, [r6, #12]
   32074:	add	r0, r0, sl, lsl #2
   32078:	mov	r1, ip
   3207c:	mov	r2, r5
   32080:	str	r1, [r0], #4
   32084:	add	r1, r1, #1
   32088:	subs	r2, r2, #1
   3208c:	bne	32080 <__assert_fail@plt+0x1f4c4>
   32090:	b	31e4c <__assert_fail@plt+0x1f290>
   32094:	ldr	r0, [fp, #-40]	; 0xffffffd8
   32098:	ldr	r1, [fp, #-36]	; 0xffffffdc
   3209c:	stm	r6, {r0, r1}
   320a0:	mov	r6, r3
   320a4:	str	sl, [r6, #28]
   320a8:	str	ip, [r6, #32]
   320ac:	mov	r0, #0
   320b0:	sub	sp, fp, #28
   320b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   320b8:	mov	r0, #12
   320bc:	sub	sp, fp, #28
   320c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   320c4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   320c8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   320cc:	stm	r6, {r0, r1}
   320d0:	ldr	r6, [sp]
   320d4:	b	31d78 <__assert_fail@plt+0x1f1bc>
   320d8:	push	{r4, r5, r6, sl, fp, lr}
   320dc:	add	fp, sp, #16
   320e0:	mov	r4, r0
   320e4:	ldr	r5, [r0, #28]
   320e8:	ldr	r6, [r0, #36]	; 0x24
   320ec:	ldr	r0, [r0, #48]	; 0x30
   320f0:	cmp	r6, r0
   320f4:	movgt	r6, r0
   320f8:	cmp	r5, r6
   320fc:	bge	32138 <__assert_fail@plt+0x1f57c>
   32100:	ldr	r0, [r4]
   32104:	ldr	r2, [r4, #24]
   32108:	ldr	r1, [r4, #64]	; 0x40
   3210c:	add	r0, r0, r2
   32110:	ldrb	r0, [r0, r5]
   32114:	cmp	r1, #0
   32118:	ldrbne	r0, [r1, r0]
   3211c:	bl	12a0c <toupper@plt>
   32120:	ldr	r1, [r4, #4]
   32124:	strb	r0, [r1, r5]
   32128:	add	r5, r5, #1
   3212c:	cmp	r5, r6
   32130:	blt	32100 <__assert_fail@plt+0x1f544>
   32134:	mov	r5, r6
   32138:	str	r5, [r4, #28]
   3213c:	str	r5, [r4, #32]
   32140:	pop	{r4, r5, r6, sl, fp, pc}
   32144:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32148:	add	fp, sp, #28
   3214c:	sub	sp, sp, #68	; 0x44
   32150:	mov	r4, r0
   32154:	ldr	r6, [r0, #28]
   32158:	ldr	r7, [r0, #36]	; 0x24
   3215c:	ldr	r0, [r0, #48]	; 0x30
   32160:	cmp	r7, r0
   32164:	movgt	r7, r0
   32168:	cmp	r7, r6
   3216c:	ble	322c0 <__assert_fail@plt+0x1f704>
   32170:	add	r8, r4, #16
   32174:	mov	r5, sp
   32178:	sub	r2, r7, r6
   3217c:	ldm	r8, {r9, sl}
   32180:	ldr	r0, [r4, #64]	; 0x40
   32184:	cmp	r0, #0
   32188:	bne	32248 <__assert_fail@plt+0x1f68c>
   3218c:	ldr	r0, [r4]
   32190:	ldr	r1, [r4, #24]
   32194:	add	r0, r0, r1
   32198:	add	r1, r0, r6
   3219c:	mov	r0, r5
   321a0:	mov	r3, r8
   321a4:	bl	2ed34 <__assert_fail@plt+0x1c178>
   321a8:	add	r1, r0, #1
   321ac:	cmp	r1, #2
   321b0:	bcc	321cc <__assert_fail@plt+0x1f610>
   321b4:	cmn	r0, #2
   321b8:	bne	321f8 <__assert_fail@plt+0x1f63c>
   321bc:	ldr	r0, [r4, #36]	; 0x24
   321c0:	ldr	r1, [r4, #48]	; 0x30
   321c4:	cmp	r0, r1
   321c8:	blt	322bc <__assert_fail@plt+0x1f700>
   321cc:	ldr	r0, [r4]
   321d0:	ldr	r1, [r4, #24]
   321d4:	add	r1, r1, r6
   321d8:	ldrb	r0, [r0, r1]
   321dc:	str	r0, [sp]
   321e0:	ldr	r1, [r4, #64]	; 0x40
   321e4:	cmp	r1, #0
   321e8:	ldrbne	r0, [r1, r0]
   321ec:	strne	r0, [sp]
   321f0:	stm	r8, {r9, sl}
   321f4:	mov	r0, #1
   321f8:	mov	r9, r5
   321fc:	ldr	r3, [r4, #8]
   32200:	ldr	r1, [sp]
   32204:	str	r1, [r3, r6, lsl #2]
   32208:	add	r5, r0, r6
   3220c:	add	r1, r6, #1
   32210:	cmp	r1, r5
   32214:	bge	32234 <__assert_fail@plt+0x1f678>
   32218:	mvn	r1, #3
   3221c:	add	r2, r1, r0, lsl #2
   32220:	add	r0, r3, r6, lsl #2
   32224:	add	r0, r0, #4
   32228:	mov	r1, #255	; 0xff
   3222c:	bl	12904 <memset@plt>
   32230:	mov	r1, r5
   32234:	cmp	r7, r1
   32238:	mov	r6, r1
   3223c:	mov	r5, r9
   32240:	bgt	32178 <__assert_fail@plt+0x1f5bc>
   32244:	b	322c4 <__assert_fail@plt+0x1f708>
   32248:	cmp	r2, #1
   3224c:	add	r1, sp, #4
   32250:	blt	3219c <__assert_fail@plt+0x1f5e0>
   32254:	ldr	r0, [r4, #80]	; 0x50
   32258:	cmp	r0, #1
   3225c:	add	r1, sp, #4
   32260:	blt	3219c <__assert_fail@plt+0x1f5e0>
   32264:	mov	lr, r5
   32268:	mov	r0, #0
   3226c:	ldm	r4, {r1, ip}
   32270:	ldr	r5, [r4, #24]
   32274:	ldr	r3, [r4, #64]	; 0x40
   32278:	add	r1, r1, r5
   3227c:	add	r1, r1, r6
   32280:	ldrb	r1, [r1, r0]
   32284:	ldrb	r1, [r3, r1]
   32288:	add	r3, ip, r6
   3228c:	strb	r1, [r3, r0]
   32290:	add	r3, sp, #4
   32294:	strb	r1, [r3, r0]
   32298:	add	r0, r0, #1
   3229c:	cmp	r0, r2
   322a0:	bge	322b0 <__assert_fail@plt+0x1f6f4>
   322a4:	ldr	r1, [r4, #80]	; 0x50
   322a8:	cmp	r0, r1
   322ac:	blt	3226c <__assert_fail@plt+0x1f6b0>
   322b0:	add	r1, sp, #4
   322b4:	mov	r5, lr
   322b8:	b	3219c <__assert_fail@plt+0x1f5e0>
   322bc:	stm	r8, {r9, sl}
   322c0:	mov	r1, r6
   322c4:	str	r1, [r4, #28]
   322c8:	str	r1, [r4, #32]
   322cc:	sub	sp, fp, #28
   322d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   322d4:	ldr	r1, [r0, #28]
   322d8:	ldr	ip, [r0, #36]	; 0x24
   322dc:	ldr	r3, [r0, #48]	; 0x30
   322e0:	cmp	ip, r3
   322e4:	movgt	ip, r3
   322e8:	cmp	r1, ip
   322ec:	bge	32328 <__assert_fail@plt+0x1f76c>
   322f0:	push	{r4, sl, fp, lr}
   322f4:	add	fp, sp, #8
   322f8:	ldm	r0, {r3, lr}
   322fc:	ldr	r2, [r0, #24]
   32300:	ldr	r4, [r0, #64]	; 0x40
   32304:	add	r2, r3, r2
   32308:	ldrb	r2, [r2, r1]
   3230c:	ldrb	r2, [r4, r2]
   32310:	strb	r2, [lr, r1]
   32314:	add	r1, r1, #1
   32318:	cmp	r1, ip
   3231c:	blt	322f8 <__assert_fail@plt+0x1f73c>
   32320:	mov	r1, ip
   32324:	pop	{r4, sl, fp, lr}
   32328:	str	r1, [r0, #28]
   3232c:	str	r1, [r0, #32]
   32330:	bx	lr
   32334:	push	{r4, sl, fp, lr}
   32338:	add	fp, sp, #8
   3233c:	mov	r4, r1
   32340:	bl	324f8 <__assert_fail@plt+0x1f93c>
   32344:	ldr	r1, [r4, #40]	; 0x28
   32348:	add	r0, r1, r0
   3234c:	str	r0, [r4, #40]	; 0x28
   32350:	pop	{r4, sl, fp, pc}
   32354:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32358:	add	fp, sp, #28
   3235c:	sub	sp, sp, #28
   32360:	mov	r5, r2
   32364:	mov	sl, r0
   32368:	ldr	r4, [r1]
   3236c:	ldr	r0, [r4, #84]	; 0x54
   32370:	str	r0, [sp, #12]
   32374:	ldr	r7, [fp, #12]
   32378:	str	r7, [sp, #4]
   3237c:	ldr	r8, [fp, #8]
   32380:	str	r8, [sp]
   32384:	mov	r0, sl
   32388:	str	r1, [sp, #16]
   3238c:	str	r3, [sp, #20]
   32390:	bl	32d88 <__assert_fail@plt+0x201cc>
   32394:	mov	r6, r0
   32398:	cmp	r0, #0
   3239c:	bne	323ac <__assert_fail@plt+0x1f7f0>
   323a0:	ldr	r0, [r7]
   323a4:	cmp	r0, #0
   323a8:	bne	32494 <__assert_fail@plt+0x1f8d8>
   323ac:	ldr	r0, [sp, #20]
   323b0:	orr	r7, r0, #8388608	; 0x800000
   323b4:	ldrb	r0, [r5, #4]
   323b8:	cmp	r0, #10
   323bc:	bne	32478 <__assert_fail@plt+0x1f8bc>
   323c0:	mov	r0, r5
   323c4:	mov	r1, sl
   323c8:	mov	r2, r7
   323cc:	bl	32334 <__assert_fail@plt+0x1f778>
   323d0:	ldrb	r0, [r5, #4]
   323d4:	orr	r1, r0, #8
   323d8:	mov	r2, #0
   323dc:	cmp	r1, #10
   323e0:	bne	32404 <__assert_fail@plt+0x1f848>
   323e4:	mov	r0, r4
   323e8:	mov	r1, r6
   323ec:	mov	r3, #10
   323f0:	bl	324c0 <__assert_fail@plt+0x1f904>
   323f4:	mov	r6, r0
   323f8:	cmp	r0, #0
   323fc:	bne	323b4 <__assert_fail@plt+0x1f7f8>
   32400:	b	32488 <__assert_fail@plt+0x1f8cc>
   32404:	cmp	r8, #0
   32408:	beq	32414 <__assert_fail@plt+0x1f858>
   3240c:	cmp	r0, #9
   32410:	beq	323e4 <__assert_fail@plt+0x1f828>
   32414:	ldr	r0, [r4, #84]	; 0x54
   32418:	str	r0, [sp, #24]
   3241c:	ldr	r0, [sp, #12]
   32420:	str	r0, [r4, #84]	; 0x54
   32424:	mov	r9, r8
   32428:	str	r8, [sp]
   3242c:	ldr	r8, [fp, #12]
   32430:	str	r8, [sp, #4]
   32434:	mov	r0, sl
   32438:	ldr	r1, [sp, #16]
   3243c:	mov	r2, r5
   32440:	ldr	r3, [sp, #20]
   32444:	bl	32d88 <__assert_fail@plt+0x201cc>
   32448:	mov	r2, r0
   3244c:	cmp	r0, #0
   32450:	bne	32460 <__assert_fail@plt+0x1f8a4>
   32454:	ldr	r0, [r8]
   32458:	cmp	r0, #0
   3245c:	bne	3249c <__assert_fail@plt+0x1f8e0>
   32460:	ldr	r0, [r4, #84]	; 0x54
   32464:	ldr	r1, [sp, #24]
   32468:	orr	r0, r0, r1
   3246c:	str	r0, [r4, #84]	; 0x54
   32470:	mov	r8, r9
   32474:	b	323e4 <__assert_fail@plt+0x1f828>
   32478:	mov	r4, r6
   3247c:	mov	r0, r4
   32480:	sub	sp, fp, #28
   32484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32488:	mov	r0, #12
   3248c:	ldr	r1, [fp, #12]
   32490:	str	r0, [r1]
   32494:	mov	r4, #0
   32498:	b	3247c <__assert_fail@plt+0x1f8c0>
   3249c:	cmp	r6, #0
   324a0:	beq	32494 <__assert_fail@plt+0x1f8d8>
   324a4:	movw	r1, #12144	; 0x2f70
   324a8:	movt	r1, #3
   324ac:	mov	r4, #0
   324b0:	mov	r0, r6
   324b4:	mov	r2, #0
   324b8:	bl	32ef8 <__assert_fail@plt+0x2033c>
   324bc:	b	3247c <__assert_fail@plt+0x1f8c0>
   324c0:	push	{fp, lr}
   324c4:	mov	fp, sp
   324c8:	sub	sp, sp, #8
   324cc:	mov	ip, #0
   324d0:	str	ip, [sp]
   324d4:	uxtb	ip, r3
   324d8:	ldr	r3, [sp, #4]
   324dc:	bfc	r3, #0, #23
   324e0:	orr	r3, r3, ip
   324e4:	str	r3, [sp, #4]
   324e8:	mov	r3, sp
   324ec:	bl	33538 <__assert_fail@plt+0x2097c>
   324f0:	mov	sp, fp
   324f4:	pop	{fp, pc}
   324f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   324fc:	add	fp, sp, #28
   32500:	sub	sp, sp, #12
   32504:	mov	r7, r1
   32508:	mov	sl, r0
   3250c:	ldr	r0, [r1, #40]	; 0x28
   32510:	ldr	r1, [r1, #56]	; 0x38
   32514:	cmp	r1, r0
   32518:	ble	325f4 <__assert_fail@plt+0x1fa38>
   3251c:	mov	r9, r2
   32520:	ldr	r1, [r7, #4]
   32524:	ldrb	r6, [r1, r0]
   32528:	mov	r5, sl
   3252c:	strb	r6, [r5], #4
   32530:	ldr	r4, [r5]
   32534:	bic	r0, r4, #6291456	; 0x600000
   32538:	str	r0, [r5]
   3253c:	ldr	r0, [r7, #80]	; 0x50
   32540:	movw	r8, #65280	; 0xff00
   32544:	movt	r8, #65439	; 0xff9f
   32548:	cmp	r0, #2
   3254c:	blt	32570 <__assert_fail@plt+0x1f9b4>
   32550:	ldr	r1, [r7, #28]
   32554:	ldr	r0, [r7, #40]	; 0x28
   32558:	cmp	r0, r1
   3255c:	beq	32570 <__assert_fail@plt+0x1f9b4>
   32560:	ldr	r1, [r7, #8]
   32564:	ldr	r0, [r1, r0, lsl #2]
   32568:	cmn	r0, #1
   3256c:	beq	32a28 <__assert_fail@plt+0x1fe6c>
   32570:	cmp	r6, #92	; 0x5c
   32574:	bne	32604 <__assert_fail@plt+0x1fa48>
   32578:	ldr	r0, [r7, #40]	; 0x28
   3257c:	ldr	r1, [r7, #48]	; 0x30
   32580:	add	r0, r0, #1
   32584:	cmp	r0, r1
   32588:	bge	32658 <__assert_fail@plt+0x1fa9c>
   3258c:	mov	r0, r7
   32590:	bl	32cac <__assert_fail@plt+0x200f0>
   32594:	mov	r6, r0
   32598:	strb	r0, [sl]
   3259c:	and	r0, r4, r8
   325a0:	orr	r4, r0, #1
   325a4:	str	r4, [sl, #4]
   325a8:	ldr	r0, [r7, #80]	; 0x50
   325ac:	cmp	r0, #2
   325b0:	blt	3287c <__assert_fail@plt+0x1fcc0>
   325b4:	ldr	r0, [r7, #40]	; 0x28
   325b8:	add	r1, r0, #1
   325bc:	mov	r0, r7
   325c0:	bl	32d6c <__assert_fail@plt+0x201b0>
   325c4:	mov	r7, r0
   325c8:	bl	128e0 <iswalnum@plt>
   325cc:	cmp	r0, #0
   325d0:	movwne	r0, #1
   325d4:	sub	r1, r7, #95	; 0x5f
   325d8:	clz	r1, r1
   325dc:	lsr	r1, r1, #5
   325e0:	orr	r0, r1, r0
   325e4:	ldr	r1, [r5]
   325e8:	bic	r1, r1, #4194304	; 0x400000
   325ec:	orr	r0, r1, r0, lsl #22
   325f0:	b	3289c <__assert_fail@plt+0x1fce0>
   325f4:	mov	r0, #2
   325f8:	strb	r0, [sl, #4]
   325fc:	mov	r8, #0
   32600:	b	32ca0 <__assert_fail@plt+0x200e4>
   32604:	and	r0, r4, r8
   32608:	orr	r4, r0, #1
   3260c:	str	r4, [r5]
   32610:	ldr	r0, [r7, #80]	; 0x50
   32614:	cmp	r0, #2
   32618:	blt	32664 <__assert_fail@plt+0x1faa8>
   3261c:	ldr	r1, [r7, #40]	; 0x28
   32620:	mov	r0, r7
   32624:	bl	32d6c <__assert_fail@plt+0x201b0>
   32628:	mov	r4, r0
   3262c:	bl	128e0 <iswalnum@plt>
   32630:	cmp	r0, #0
   32634:	movwne	r0, #1
   32638:	sub	r1, r4, #95	; 0x5f
   3263c:	clz	r1, r1
   32640:	lsr	r1, r1, #5
   32644:	orr	r0, r1, r0
   32648:	ldr	r1, [r5]
   3264c:	bic	r1, r1, #4194304	; 0x400000
   32650:	orr	r0, r1, r0, lsl #22
   32654:	b	32684 <__assert_fail@plt+0x1fac8>
   32658:	and	r0, r4, r8
   3265c:	orr	r0, r0, #36	; 0x24
   32660:	b	32a34 <__assert_fail@plt+0x1fe78>
   32664:	bl	12844 <__ctype_b_loc@plt>
   32668:	ldr	r0, [r0]
   3266c:	add	r0, r0, r6, lsl #1
   32670:	ldrh	r0, [r0]
   32674:	ubfx	r0, r0, #3, #1
   32678:	cmp	r6, #95	; 0x5f
   3267c:	movweq	r0, #1
   32680:	orr	r0, r4, r0, lsl #22
   32684:	str	r0, [r5]
   32688:	sub	r1, r6, #10
   3268c:	mov	r8, #1
   32690:	cmp	r1, #115	; 0x73
   32694:	bhi	32ca0 <__assert_fail@plt+0x200e4>
   32698:	add	r2, pc, #0
   3269c:	ldr	pc, [r2, r1, lsl #2]
   326a0:	andeq	r2, r3, r0, ror r8
   326a4:	andeq	r2, r3, r0, lsr #25
   326a8:	andeq	r2, r3, r0, lsr #25
   326ac:	andeq	r2, r3, r0, lsr #25
   326b0:	andeq	r2, r3, r0, lsr #25
   326b4:	andeq	r2, r3, r0, lsr #25
   326b8:	andeq	r2, r3, r0, lsr #25
   326bc:	andeq	r2, r3, r0, lsr #25
   326c0:	andeq	r2, r3, r0, lsr #25
   326c4:	andeq	r2, r3, r0, lsr #25
   326c8:	andeq	r2, r3, r0, lsr #25
   326cc:	andeq	r2, r3, r0, lsr #25
   326d0:	andeq	r2, r3, r0, lsr #25
   326d4:	andeq	r2, r3, r0, lsr #25
   326d8:	andeq	r2, r3, r0, lsr #25
   326dc:	andeq	r2, r3, r0, lsr #25
   326e0:	andeq	r2, r3, r0, lsr #25
   326e4:	andeq	r2, r3, r0, lsr #25
   326e8:	andeq	r2, r3, r0, lsr #25
   326ec:	andeq	r2, r3, r0, lsr #25
   326f0:	andeq	r2, r3, r0, lsr #25
   326f4:	andeq	r2, r3, r0, lsr #25
   326f8:	andeq	r2, r3, r0, lsr #25
   326fc:	andeq	r2, r3, r0, lsr #25
   32700:	andeq	r2, r3, r0, lsr #25
   32704:	andeq	r2, r3, r0, lsr #25
   32708:	andeq	r2, r3, r0, asr #20
   3270c:	andeq	r2, r3, r0, lsr #25
   32710:	andeq	r2, r3, r0, lsr #25
   32714:	andeq	r2, r3, r0, lsr #25
   32718:	andeq	r2, r3, r0, lsr #21
   3271c:	andeq	r2, r3, ip, lsr #21
   32720:			; <UNDEFINED> instruction: 0x00032ab8
   32724:	andeq	r2, r3, r0, asr #21
   32728:	andeq	r2, r3, r0, lsr #25
   3272c:	andeq	r2, r3, r0, lsr #25
   32730:	ldrdeq	r2, [r3], -r0
   32734:	andeq	r2, r3, r0, lsr #25
   32738:	andeq	r2, r3, r0, lsr #25
   3273c:	andeq	r2, r3, r0, lsr #25
   32740:	andeq	r2, r3, r0, lsr #25
   32744:	andeq	r2, r3, r0, lsr #25
   32748:	andeq	r2, r3, r0, lsr #25
   3274c:	andeq	r2, r3, r0, lsr #25
   32750:	andeq	r2, r3, r0, lsr #25
   32754:	andeq	r2, r3, r0, lsr #25
   32758:	andeq	r2, r3, r0, lsr #25
   3275c:	andeq	r2, r3, r0, lsr #25
   32760:	andeq	r2, r3, r0, lsr #25
   32764:	andeq	r2, r3, r0, lsr #25
   32768:	andeq	r2, r3, r0, lsr #25
   3276c:	andeq	r2, r3, r0, lsr #25
   32770:	andeq	r2, r3, r0, lsr #25
   32774:	ldrdeq	r2, [r3], -r8
   32778:	andeq	r2, r3, r0, lsr #25
   3277c:	andeq	r2, r3, r0, lsr #25
   32780:	andeq	r2, r3, r0, lsr #25
   32784:	andeq	r2, r3, r0, lsr #25
   32788:	andeq	r2, r3, r0, lsr #25
   3278c:	andeq	r2, r3, r0, lsr #25
   32790:	andeq	r2, r3, r0, lsr #25
   32794:	andeq	r2, r3, r0, lsr #25
   32798:	andeq	r2, r3, r0, lsr #25
   3279c:	andeq	r2, r3, r0, lsr #25
   327a0:	andeq	r2, r3, r0, lsr #25
   327a4:	andeq	r2, r3, r0, lsr #25
   327a8:	andeq	r2, r3, r0, lsr #25
   327ac:	andeq	r2, r3, r0, lsr #25
   327b0:	andeq	r2, r3, r0, lsr #25
   327b4:	andeq	r2, r3, r0, lsr #25
   327b8:	andeq	r2, r3, r0, lsr #25
   327bc:	andeq	r2, r3, r0, lsr #25
   327c0:	andeq	r2, r3, r0, lsr #25
   327c4:	andeq	r2, r3, r0, lsr #25
   327c8:	andeq	r2, r3, r0, lsr #25
   327cc:	andeq	r2, r3, r0, lsr #25
   327d0:	andeq	r2, r3, r0, lsr #25
   327d4:	andeq	r2, r3, r0, lsr #25
   327d8:	andeq	r2, r3, r0, lsr #25
   327dc:	andeq	r2, r3, r0, lsr #25
   327e0:	andeq	r2, r3, r0, lsr #25
   327e4:	andeq	r2, r3, r8, ror #21
   327e8:	andeq	r2, r3, r0, lsr #25
   327ec:	andeq	r2, r3, r0, lsr #25
   327f0:	strdeq	r2, [r3], -r0
   327f4:	andeq	r2, r3, r0, lsr #25
   327f8:	andeq	r2, r3, r0, lsr #25
   327fc:	andeq	r2, r3, r0, lsr #25
   32800:	andeq	r2, r3, r0, lsr #25
   32804:	andeq	r2, r3, r0, lsr #25
   32808:	andeq	r2, r3, r0, lsr #25
   3280c:	andeq	r2, r3, r0, lsr #25
   32810:	andeq	r2, r3, r0, lsr #25
   32814:	andeq	r2, r3, r0, lsr #25
   32818:	andeq	r2, r3, r0, lsr #25
   3281c:	andeq	r2, r3, r0, lsr #25
   32820:	andeq	r2, r3, r0, lsr #25
   32824:	andeq	r2, r3, r0, lsr #25
   32828:	andeq	r2, r3, r0, lsr #25
   3282c:	andeq	r2, r3, r0, lsr #25
   32830:	andeq	r2, r3, r0, lsr #25
   32834:	andeq	r2, r3, r0, lsr #25
   32838:	andeq	r2, r3, r0, lsr #25
   3283c:	andeq	r2, r3, r0, lsr #25
   32840:	andeq	r2, r3, r0, lsr #25
   32844:	andeq	r2, r3, r0, lsr #25
   32848:	andeq	r2, r3, r0, lsr #25
   3284c:	andeq	r2, r3, r0, lsr #25
   32850:	andeq	r2, r3, r0, lsr #25
   32854:	andeq	r2, r3, r0, lsr #25
   32858:	andeq	r2, r3, r0, lsr #25
   3285c:	andeq	r2, r3, r0, lsr #25
   32860:	andeq	r2, r3, r0, lsr #25
   32864:	andeq	r2, r3, r8, lsl fp
   32868:	andeq	r2, r3, r8, lsr #22
   3286c:	andeq	r2, r3, ip, lsr fp
   32870:	tst	r9, #2048	; 0x800
   32874:	bne	32b34 <__assert_fail@plt+0x1ff78>
   32878:	b	32ca0 <__assert_fail@plt+0x200e4>
   3287c:	bl	12844 <__ctype_b_loc@plt>
   32880:	ldr	r0, [r0]
   32884:	add	r0, r0, r6, lsl #1
   32888:	ldrh	r0, [r0]
   3288c:	ubfx	r0, r0, #3, #1
   32890:	cmp	r6, #95	; 0x5f
   32894:	movweq	r0, #1
   32898:	orr	r0, r4, r0, lsl #22
   3289c:	str	r0, [r5]
   328a0:	sub	r1, r6, #39	; 0x27
   328a4:	mov	r8, #2
   328a8:	cmp	r1, #86	; 0x56
   328ac:	bhi	32ca0 <__assert_fail@plt+0x200e4>
   328b0:	add	r2, pc, #0
   328b4:	ldr	pc, [r2, r1, lsl #2]
   328b8:	andeq	r2, r3, r8, ror fp
   328bc:	andeq	r2, r3, r8, lsl #23
   328c0:	muleq	r3, r8, fp
   328c4:	andeq	r2, r3, r0, lsr #25
   328c8:	andeq	r2, r3, r8, lsr #23
   328cc:	andeq	r2, r3, r0, lsr #25
   328d0:	andeq	r2, r3, r0, lsr #25
   328d4:	andeq	r2, r3, r0, lsr #25
   328d8:	andeq	r2, r3, r0, lsr #25
   328dc:	andeq	r2, r3, r0, lsr #25
   328e0:	andeq	r2, r3, r4, lsl sl
   328e4:	andeq	r2, r3, r4, lsl sl
   328e8:	andeq	r2, r3, r4, lsl sl
   328ec:	andeq	r2, r3, r4, lsl sl
   328f0:	andeq	r2, r3, r4, lsl sl
   328f4:	andeq	r2, r3, r4, lsl sl
   328f8:	andeq	r2, r3, r4, lsl sl
   328fc:	andeq	r2, r3, r4, lsl sl
   32900:	andeq	r2, r3, r4, lsl sl
   32904:	andeq	r2, r3, r0, lsr #25
   32908:	andeq	r2, r3, r0, lsr #25
   3290c:	andeq	r2, r3, r0, asr #23
   32910:	andeq	r2, r3, r0, lsr #25
   32914:	ldrdeq	r2, [r3], -r0
   32918:	andeq	r2, r3, r0, ror #23
   3291c:	andeq	r2, r3, r0, lsr #25
   32920:	andeq	r2, r3, r0, lsr #25
   32924:	strdeq	r2, [r3], -r8
   32928:	andeq	r2, r3, r0, lsr #25
   3292c:	andeq	r2, r3, r0, lsr #25
   32930:	andeq	r2, r3, r0, lsr #25
   32934:	andeq	r2, r3, r0, lsr #25
   32938:	andeq	r2, r3, r0, lsr #25
   3293c:	andeq	r2, r3, r0, lsr #25
   32940:	andeq	r2, r3, r0, lsr #25
   32944:	andeq	r2, r3, r0, lsr #25
   32948:	andeq	r2, r3, r0, lsr #25
   3294c:	andeq	r2, r3, r0, lsr #25
   32950:	andeq	r2, r3, r0, lsr #25
   32954:	andeq	r2, r3, r0, lsr #25
   32958:	andeq	r2, r3, r0, lsr #25
   3295c:	andeq	r2, r3, r0, lsr #25
   32960:	andeq	r2, r3, r0, lsr #25
   32964:	andeq	r2, r3, r0, lsr #25
   32968:	andeq	r2, r3, r8, lsl #24
   3296c:	andeq	r2, r3, r0, lsr #25
   32970:	andeq	r2, r3, r0, lsr #25
   32974:	andeq	r2, r3, r0, lsr #25
   32978:	andeq	r2, r3, r8, lsl ip
   3297c:	andeq	r2, r3, r0, lsr #25
   32980:	andeq	r2, r3, r0, lsr #25
   32984:	andeq	r2, r3, r0, lsr #25
   32988:	andeq	r2, r3, r0, lsr #25
   3298c:	andeq	r2, r3, r0, lsr #25
   32990:	andeq	r2, r3, r0, lsr #25
   32994:	andeq	r2, r3, r0, lsr #25
   32998:	andeq	r2, r3, r0, lsr #25
   3299c:	andeq	r2, r3, r8, lsr #24
   329a0:	andeq	r2, r3, r0, lsr #25
   329a4:	andeq	r2, r3, r8, lsr ip
   329a8:	andeq	r2, r3, r0, lsr #25
   329ac:	andeq	r2, r3, r0, lsr #25
   329b0:	andeq	r2, r3, r0, lsr #25
   329b4:	andeq	r2, r3, r0, lsr #25
   329b8:	andeq	r2, r3, r0, lsr #25
   329bc:	andeq	r2, r3, r0, lsr #25
   329c0:	andeq	r2, r3, r0, lsr #25
   329c4:	andeq	r2, r3, r0, lsr #25
   329c8:	andeq	r2, r3, r0, lsr #25
   329cc:	andeq	r2, r3, r0, lsr #25
   329d0:	andeq	r2, r3, r0, lsr #25
   329d4:	andeq	r2, r3, r0, lsr #25
   329d8:	andeq	r2, r3, r0, lsr #25
   329dc:	andeq	r2, r3, r0, lsr #25
   329e0:	andeq	r2, r3, r0, lsr #25
   329e4:	andeq	r2, r3, r0, lsr #25
   329e8:	andeq	r2, r3, r8, asr #24
   329ec:	andeq	r2, r3, r0, lsr #25
   329f0:	andeq	r2, r3, r0, lsr #25
   329f4:	andeq	r2, r3, r0, lsr #25
   329f8:	andeq	r2, r3, r8, asr ip
   329fc:	andeq	r2, r3, r0, lsr #25
   32a00:	andeq	r2, r3, r0, lsr #25
   32a04:	andeq	r2, r3, r0, lsr #25
   32a08:	andeq	r2, r3, r8, ror #24
   32a0c:	andeq	r2, r3, ip, ror ip
   32a10:	andeq	r2, r3, r8, lsl #25
   32a14:	tst	r9, #16384	; 0x4000
   32a18:	bne	32ca0 <__assert_fail@plt+0x200e4>
   32a1c:	sub	r1, r6, #49	; 0x31
   32a20:	mov	r2, #4
   32a24:	b	32b08 <__assert_fail@plt+0x1ff4c>
   32a28:	and	r0, r4, r8
   32a2c:	orr	r0, r0, #1
   32a30:	orr	r0, r0, #2097152	; 0x200000
   32a34:	str	r0, [r5]
   32a38:	mov	r8, #1
   32a3c:	b	32ca0 <__assert_fail@plt+0x200e4>
   32a40:	tst	r9, #8
   32a44:	bne	32a8c <__assert_fail@plt+0x1fed0>
   32a48:	ldr	r0, [r7, #40]	; 0x28
   32a4c:	ldr	r1, [r7, #48]	; 0x30
   32a50:	add	r0, r0, #1
   32a54:	cmp	r0, r1
   32a58:	beq	32a8c <__assert_fail@plt+0x1fed0>
   32a5c:	str	r0, [r7, #40]	; 0x28
   32a60:	add	r0, sp, #4
   32a64:	mov	r1, r7
   32a68:	mov	r2, r9
   32a6c:	bl	324f8 <__assert_fail@plt+0x1f93c>
   32a70:	ldr	r0, [r7, #40]	; 0x28
   32a74:	sub	r0, r0, #1
   32a78:	str	r0, [r7, #40]	; 0x28
   32a7c:	ldrb	r0, [sp, #8]
   32a80:	sub	r0, r0, #9
   32a84:	cmp	r0, #1
   32a88:	bhi	32ca0 <__assert_fail@plt+0x200e4>
   32a8c:	mov	r0, #32
   32a90:	str	r0, [sl]
   32a94:	mov	r0, #12
   32a98:	strb	r0, [sl, #4]
   32a9c:	b	32ca0 <__assert_fail@plt+0x200e4>
   32aa0:	tst	r9, #8192	; 0x2000
   32aa4:	bne	32b90 <__assert_fail@plt+0x1ffd4>
   32aa8:	b	32ca0 <__assert_fail@plt+0x200e4>
   32aac:	tst	r9, #8192	; 0x2000
   32ab0:	bne	32ba0 <__assert_fail@plt+0x1ffe4>
   32ab4:	b	32ca0 <__assert_fail@plt+0x200e4>
   32ab8:	mov	r1, #11
   32abc:	b	32c98 <__assert_fail@plt+0x200dc>
   32ac0:	movw	r1, #1026	; 0x402
   32ac4:	tst	r9, r1
   32ac8:	bne	32ca0 <__assert_fail@plt+0x200e4>
   32acc:	b	32bb8 <__assert_fail@plt+0x1fffc>
   32ad0:	mov	r1, #5
   32ad4:	b	32c98 <__assert_fail@plt+0x200dc>
   32ad8:	movw	r1, #1026	; 0x402
   32adc:	tst	r9, r1
   32ae0:	bne	32ca0 <__assert_fail@plt+0x200e4>
   32ae4:	b	32bf0 <__assert_fail@plt+0x20034>
   32ae8:	mov	r1, #20
   32aec:	b	32c98 <__assert_fail@plt+0x200dc>
   32af0:	movw	r1, #8
   32af4:	movt	r1, #128	; 0x80
   32af8:	tst	r9, r1
   32afc:	beq	32b4c <__assert_fail@plt+0x1ff90>
   32b00:	mov	r1, #16
   32b04:	mov	r2, #12
   32b08:	bfi	r0, r2, #0, #8
   32b0c:	str	r1, [sl]
   32b10:	str	r0, [sl, #4]
   32b14:	b	32ca0 <__assert_fail@plt+0x200e4>
   32b18:	and	r1, r9, #4608	; 0x1200
   32b1c:	cmp	r1, #4608	; 0x1200
   32b20:	beq	32c74 <__assert_fail@plt+0x200b8>
   32b24:	b	32ca0 <__assert_fail@plt+0x200e4>
   32b28:	and	r1, r9, #33792	; 0x8400
   32b2c:	cmp	r1, #32768	; 0x8000
   32b30:	bne	32ca0 <__assert_fail@plt+0x200e4>
   32b34:	mov	r1, #10
   32b38:	b	32c98 <__assert_fail@plt+0x200dc>
   32b3c:	and	r1, r9, #4608	; 0x1200
   32b40:	cmp	r1, #4608	; 0x1200
   32b44:	beq	32c94 <__assert_fail@plt+0x200d8>
   32b48:	b	32ca0 <__assert_fail@plt+0x200e4>
   32b4c:	ldr	r1, [r7, #40]	; 0x28
   32b50:	cmp	r1, #0
   32b54:	beq	32b00 <__assert_fail@plt+0x1ff44>
   32b58:	tst	r9, #2048	; 0x800
   32b5c:	beq	32ca0 <__assert_fail@plt+0x200e4>
   32b60:	ldr	r2, [r7, #4]
   32b64:	add	r1, r2, r1
   32b68:	ldrb	r1, [r1, #-1]
   32b6c:	cmp	r1, #10
   32b70:	beq	32b00 <__assert_fail@plt+0x1ff44>
   32b74:	b	32ca0 <__assert_fail@plt+0x200e4>
   32b78:	tst	r9, #524288	; 0x80000
   32b7c:	bne	32ca0 <__assert_fail@plt+0x200e4>
   32b80:	mov	r1, #128	; 0x80
   32b84:	b	32b04 <__assert_fail@plt+0x1ff48>
   32b88:	tst	r9, #8192	; 0x2000
   32b8c:	bne	32ca0 <__assert_fail@plt+0x200e4>
   32b90:	mov	r1, #8
   32b94:	b	32c98 <__assert_fail@plt+0x200dc>
   32b98:	tst	r9, #8192	; 0x2000
   32b9c:	bne	32ca0 <__assert_fail@plt+0x200e4>
   32ba0:	mov	r1, #9
   32ba4:	b	32c98 <__assert_fail@plt+0x200dc>
   32ba8:	movw	r1, #1026	; 0x402
   32bac:	and	r1, r9, r1
   32bb0:	cmp	r1, #2
   32bb4:	bne	32ca0 <__assert_fail@plt+0x200e4>
   32bb8:	mov	r1, #18
   32bbc:	b	32c98 <__assert_fail@plt+0x200dc>
   32bc0:	tst	r9, #524288	; 0x80000
   32bc4:	bne	32ca0 <__assert_fail@plt+0x200e4>
   32bc8:	mov	r1, #6
   32bcc:	b	32b04 <__assert_fail@plt+0x1ff48>
   32bd0:	tst	r9, #524288	; 0x80000
   32bd4:	bne	32ca0 <__assert_fail@plt+0x200e4>
   32bd8:	mov	r1, #9
   32bdc:	b	32b04 <__assert_fail@plt+0x1ff48>
   32be0:	movw	r1, #1026	; 0x402
   32be4:	and	r1, r9, r1
   32be8:	cmp	r1, #2
   32bec:	bne	32ca0 <__assert_fail@plt+0x200e4>
   32bf0:	mov	r1, #19
   32bf4:	b	32c98 <__assert_fail@plt+0x200dc>
   32bf8:	tst	r9, #524288	; 0x80000
   32bfc:	bne	32ca0 <__assert_fail@plt+0x200e4>
   32c00:	mov	r1, #512	; 0x200
   32c04:	b	32b04 <__assert_fail@plt+0x1ff48>
   32c08:	tst	r9, #524288	; 0x80000
   32c0c:	bne	32ca0 <__assert_fail@plt+0x200e4>
   32c10:	mov	r1, #35	; 0x23
   32c14:	b	32c98 <__assert_fail@plt+0x200dc>
   32c18:	tst	r9, #524288	; 0x80000
   32c1c:	bne	32ca0 <__assert_fail@plt+0x200e4>
   32c20:	mov	r1, #33	; 0x21
   32c24:	b	32c98 <__assert_fail@plt+0x200dc>
   32c28:	tst	r9, #524288	; 0x80000
   32c2c:	bne	32ca0 <__assert_fail@plt+0x200e4>
   32c30:	mov	r1, #64	; 0x40
   32c34:	b	32b04 <__assert_fail@plt+0x1ff48>
   32c38:	tst	r9, #524288	; 0x80000
   32c3c:	bne	32ca0 <__assert_fail@plt+0x200e4>
   32c40:	mov	r1, #256	; 0x100
   32c44:	b	32b04 <__assert_fail@plt+0x1ff48>
   32c48:	tst	r9, #524288	; 0x80000
   32c4c:	bne	32ca0 <__assert_fail@plt+0x200e4>
   32c50:	mov	r1, #34	; 0x22
   32c54:	b	32c98 <__assert_fail@plt+0x200dc>
   32c58:	tst	r9, #524288	; 0x80000
   32c5c:	bne	32ca0 <__assert_fail@plt+0x200e4>
   32c60:	mov	r1, #32
   32c64:	b	32c98 <__assert_fail@plt+0x200dc>
   32c68:	and	r1, r9, #4608	; 0x1200
   32c6c:	cmp	r1, #512	; 0x200
   32c70:	bne	32ca0 <__assert_fail@plt+0x200e4>
   32c74:	mov	r1, #23
   32c78:	b	32c98 <__assert_fail@plt+0x200dc>
   32c7c:	tst	r9, #33792	; 0x8400
   32c80:	bne	32ca0 <__assert_fail@plt+0x200e4>
   32c84:	b	32b34 <__assert_fail@plt+0x1ff78>
   32c88:	and	r1, r9, #4608	; 0x1200
   32c8c:	cmp	r1, #512	; 0x200
   32c90:	bne	32ca0 <__assert_fail@plt+0x200e4>
   32c94:	mov	r1, #24
   32c98:	bfi	r0, r1, #0, #8
   32c9c:	str	r0, [r5]
   32ca0:	mov	r0, r8
   32ca4:	sub	sp, fp, #28
   32ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32cac:	ldrb	r1, [r0, #75]	; 0x4b
   32cb0:	cmp	r1, #0
   32cb4:	bne	32cd4 <__assert_fail@plt+0x20118>
   32cb8:	ldr	r1, [r0, #4]
   32cbc:	ldr	r0, [r0, #40]	; 0x28
   32cc0:	add	r0, r1, r0
   32cc4:	add	r0, r0, #1
   32cc8:	ldrb	r3, [r0]
   32ccc:	uxtb	r0, r3
   32cd0:	bx	lr
   32cd4:	ldr	r1, [r0, #80]	; 0x50
   32cd8:	cmp	r1, #2
   32cdc:	blt	32d14 <__assert_fail@plt+0x20158>
   32ce0:	ldr	r2, [r0, #8]
   32ce4:	ldr	r3, [r0, #40]	; 0x28
   32ce8:	add	ip, r3, #1
   32cec:	ldr	r1, [r2, ip, lsl #2]
   32cf0:	cmn	r1, #1
   32cf4:	beq	32d60 <__assert_fail@plt+0x201a4>
   32cf8:	ldr	r1, [r0, #28]
   32cfc:	add	r3, r3, #2
   32d00:	cmp	r1, r3
   32d04:	beq	32d14 <__assert_fail@plt+0x20158>
   32d08:	ldr	r1, [r2, r3, lsl #2]
   32d0c:	cmn	r1, #1
   32d10:	beq	32d60 <__assert_fail@plt+0x201a4>
   32d14:	push	{fp, lr}
   32d18:	mov	fp, sp
   32d1c:	ldrb	lr, [r0, #76]	; 0x4c
   32d20:	ldr	r1, [r0, #40]	; 0x28
   32d24:	add	ip, r1, #1
   32d28:	cmp	lr, #0
   32d2c:	mov	r3, ip
   32d30:	ldrne	r3, [r0, #12]
   32d34:	ldrne	r3, [r3, ip, lsl #2]
   32d38:	ldr	r1, [r0]
   32d3c:	ldr	r2, [r0, #24]
   32d40:	add	r2, r2, r3
   32d44:	add	r1, r1, r2
   32d48:	ldrsb	r3, [r1]
   32d4c:	cmp	lr, #0
   32d50:	pop	{fp, lr}
   32d54:	beq	32ccc <__assert_fail@plt+0x20110>
   32d58:	cmn	r3, #1
   32d5c:	bgt	32ccc <__assert_fail@plt+0x20110>
   32d60:	ldr	r0, [r0, #4]
   32d64:	add	r0, r0, ip
   32d68:	b	32cc8 <__assert_fail@plt+0x2010c>
   32d6c:	ldr	r2, [r0, #80]	; 0x50
   32d70:	cmp	r2, #1
   32d74:	ldrne	r0, [r0, #8]
   32d78:	ldrne	r0, [r0, r1, lsl #2]
   32d7c:	ldreq	r0, [r0, #4]
   32d80:	ldrbeq	r0, [r0, r1]
   32d84:	bx	lr
   32d88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32d8c:	add	fp, sp, #28
   32d90:	sub	sp, sp, #20
   32d94:	mov	r6, r2
   32d98:	mov	r7, r1
   32d9c:	mov	r1, r0
   32da0:	ldr	r0, [r7]
   32da4:	str	r0, [sp, #8]
   32da8:	ldr	r5, [fp, #12]
   32dac:	str	r5, [sp, #4]
   32db0:	ldr	r4, [fp, #8]
   32db4:	str	r4, [sp]
   32db8:	str	r1, [sp, #12]
   32dbc:	mov	r0, r1
   32dc0:	mov	r1, r7
   32dc4:	str	r3, [sp, #16]
   32dc8:	bl	32f88 <__assert_fail@plt+0x203cc>
   32dcc:	cmp	r0, #0
   32dd0:	bne	32df8 <__assert_fail@plt+0x2023c>
   32dd4:	ldr	r1, [r5]
   32dd8:	cmp	r1, #0
   32ddc:	beq	32df8 <__assert_fail@plt+0x2023c>
   32de0:	mov	r6, #0
   32de4:	b	32ec4 <__assert_fail@plt+0x20308>
   32de8:	cmp	r5, #0
   32dec:	movne	r8, r5
   32df0:	mov	r0, r8
   32df4:	mov	r4, r9
   32df8:	mov	r5, r0
   32dfc:	ldrb	r0, [r6, #4]
   32e00:	orr	r1, r0, #8
   32e04:	cmp	r1, #10
   32e08:	beq	32ec0 <__assert_fail@plt+0x20304>
   32e0c:	cmp	r4, #0
   32e10:	beq	32e1c <__assert_fail@plt+0x20260>
   32e14:	cmp	r0, #9
   32e18:	beq	32ec0 <__assert_fail@plt+0x20304>
   32e1c:	mov	r9, r4
   32e20:	str	r4, [sp]
   32e24:	ldr	sl, [fp, #12]
   32e28:	str	sl, [sp, #4]
   32e2c:	ldr	r0, [sp, #12]
   32e30:	mov	r1, r7
   32e34:	mov	r2, r6
   32e38:	ldr	r3, [sp, #16]
   32e3c:	bl	32f88 <__assert_fail@plt+0x203cc>
   32e40:	mov	r8, r0
   32e44:	cmp	r0, #0
   32e48:	bne	32e58 <__assert_fail@plt+0x2029c>
   32e4c:	ldr	r0, [sl]
   32e50:	cmp	r0, #0
   32e54:	bne	32ed0 <__assert_fail@plt+0x20314>
   32e58:	cmp	r5, #0
   32e5c:	cmpne	r8, #0
   32e60:	beq	32de8 <__assert_fail@plt+0x2022c>
   32e64:	ldr	r0, [sp, #8]
   32e68:	mov	r1, r5
   32e6c:	mov	r2, r8
   32e70:	mov	r3, #16
   32e74:	bl	324c0 <__assert_fail@plt+0x1f904>
   32e78:	cmp	r0, #0
   32e7c:	mov	r4, r9
   32e80:	bne	32df8 <__assert_fail@plt+0x2023c>
   32e84:	movw	r4, #12144	; 0x2f70
   32e88:	movt	r4, #3
   32e8c:	mov	r6, #0
   32e90:	mov	r0, r8
   32e94:	mov	r1, r4
   32e98:	mov	r2, #0
   32e9c:	bl	32ef8 <__assert_fail@plt+0x2033c>
   32ea0:	mov	r0, r5
   32ea4:	mov	r1, r4
   32ea8:	mov	r2, #0
   32eac:	bl	32ef8 <__assert_fail@plt+0x2033c>
   32eb0:	mov	r0, #12
   32eb4:	ldr	r1, [fp, #12]
   32eb8:	str	r0, [r1]
   32ebc:	b	32ec4 <__assert_fail@plt+0x20308>
   32ec0:	mov	r6, r5
   32ec4:	mov	r0, r6
   32ec8:	sub	sp, fp, #28
   32ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32ed0:	cmp	r5, #0
   32ed4:	mov	r6, #0
   32ed8:	beq	32ec4 <__assert_fail@plt+0x20308>
   32edc:	movw	r1, #12144	; 0x2f70
   32ee0:	movt	r1, #3
   32ee4:	mov	r6, #0
   32ee8:	mov	r0, r5
   32eec:	mov	r2, #0
   32ef0:	bl	32ef8 <__assert_fail@plt+0x2033c>
   32ef4:	b	32ec4 <__assert_fail@plt+0x20308>
   32ef8:	push	{r4, r5, r6, sl, fp, lr}
   32efc:	add	fp, sp, #16
   32f00:	mov	r4, r2
   32f04:	mov	r5, r1
   32f08:	b	32f10 <__assert_fail@plt+0x20354>
   32f0c:	ldr	r0, [r6, #8]
   32f10:	mov	r6, r0
   32f14:	ldr	r0, [r0, #4]
   32f18:	cmp	r0, #0
   32f1c:	bne	32f10 <__assert_fail@plt+0x20354>
   32f20:	ldr	r0, [r6, #8]
   32f24:	cmp	r0, #0
   32f28:	bne	32f0c <__assert_fail@plt+0x20350>
   32f2c:	mov	r0, r4
   32f30:	mov	r1, r6
   32f34:	blx	r5
   32f38:	cmp	r0, #0
   32f3c:	bne	32f6c <__assert_fail@plt+0x203b0>
   32f40:	ldr	r1, [r6]
   32f44:	cmp	r1, #0
   32f48:	popeq	{r4, r5, r6, sl, fp, pc}
   32f4c:	ldr	r0, [r1, #8]
   32f50:	cmp	r0, r6
   32f54:	mov	r6, r1
   32f58:	beq	32f2c <__assert_fail@plt+0x20370>
   32f5c:	cmp	r0, #0
   32f60:	mov	r6, r1
   32f64:	beq	32f2c <__assert_fail@plt+0x20370>
   32f68:	b	32f10 <__assert_fail@plt+0x20354>
   32f6c:	pop	{r4, r5, r6, sl, fp, pc}
   32f70:	push	{fp, lr}
   32f74:	mov	fp, sp
   32f78:	add	r0, r1, #20
   32f7c:	bl	30f5c <__assert_fail@plt+0x1e3a0>
   32f80:	mov	r0, #0
   32f84:	pop	{fp, pc}
   32f88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32f8c:	add	fp, sp, #28
   32f90:	sub	sp, sp, #12
   32f94:	mov	r9, r3
   32f98:	mov	r5, r2
   32f9c:	mov	r6, r1
   32fa0:	mov	sl, r0
   32fa4:	and	ip, r3, #16
   32fa8:	and	r8, r3, #32
   32fac:	and	r0, r3, #16777216	; 0x1000000
   32fb0:	str	r0, [sp, #8]
   32fb4:	ldr	r3, [fp, #12]
   32fb8:	ldr	r4, [fp, #8]
   32fbc:	mvn	r1, #0
   32fc0:	b	32fe4 <__assert_fail@plt+0x20428>
   32fc4:	mov	r0, r5
   32fc8:	mov	r1, sl
   32fcc:	mov	r2, r9
   32fd0:	mov	r7, ip
   32fd4:	bl	32334 <__assert_fail@plt+0x1f778>
   32fd8:	mvn	r1, #0
   32fdc:	mov	ip, r7
   32fe0:	ldr	r3, [fp, #12]
   32fe4:	ldr	r0, [r5, #4]
   32fe8:	uxtab	r1, r1, r0
   32fec:	ldr	r7, [r6]
   32ff0:	cmp	r1, #35	; 0x23
   32ff4:	bhi	3309c <__assert_fail@plt+0x204e0>
   32ff8:	add	r2, pc, #0
   32ffc:	ldr	pc, [r2, r1, lsl #2]
   33000:	andeq	r3, r3, r4, ror #2
   33004:	andeq	r3, r3, ip, lsl r5
   33008:	muleq	r3, ip, r0
   3300c:	andeq	r3, r3, r0, lsr #4
   33010:	andeq	r3, r3, ip, ror r2
   33014:	muleq	r3, ip, r0
   33018:	muleq	r3, ip, r0
   3301c:	andeq	r3, r3, r0, asr #5
   33020:	andeq	r3, r3, ip, lsr #1
   33024:	andeq	r3, r3, ip, lsl r5
   33028:	muleq	r3, ip, r0
   3302c:	andeq	r3, r3, r8, ror #5
   33030:	muleq	r3, ip, r0
   33034:	muleq	r3, ip, r0
   33038:	muleq	r3, ip, r0
   3303c:	muleq	r3, ip, r0
   33040:	muleq	r3, ip, r0
   33044:	muleq	r3, ip, r0
   33048:	muleq	r3, ip, r0
   3304c:	andeq	r3, r3, r8, lsr #6
   33050:	muleq	r3, ip, r0
   33054:	muleq	r3, ip, r0
   33058:	muleq	r3, r0, r0
   3305c:	strheq	r3, [r3], -ip
   33060:	muleq	r3, ip, r0
   33064:	muleq	r3, ip, r0
   33068:	muleq	r3, ip, r0
   3306c:	muleq	r3, ip, r0
   33070:	muleq	r3, ip, r0
   33074:	muleq	r3, ip, r0
   33078:	muleq	r3, ip, r0
   3307c:	strdeq	r3, [r3], -r4
   33080:	strdeq	r3, [r3], -r4
   33084:	andeq	r3, r3, r8, lsr #2
   33088:	andeq	r3, r3, r8, lsr #2
   3308c:	andeq	r3, r3, r0, lsr #8
   33090:	ldr	r1, [sp, #8]
   33094:	cmp	r1, #0
   33098:	bne	334ec <__assert_fail@plt+0x20930>
   3309c:	cmp	r8, #0
   330a0:	bne	334ec <__assert_fail@plt+0x20930>
   330a4:	cmp	ip, #0
   330a8:	bne	32fc4 <__assert_fail@plt+0x20408>
   330ac:	tst	r9, #131072	; 0x20000
   330b0:	uxtbeq	r1, r0
   330b4:	cmpeq	r1, #9
   330b8:	beq	3342c <__assert_fail@plt+0x20870>
   330bc:	mov	r1, #1
   330c0:	bfi	r0, r1, #0, #8
   330c4:	str	r0, [r5, #4]
   330c8:	mov	r4, #0
   330cc:	mov	r0, r7
   330d0:	mov	r1, #0
   330d4:	mov	r2, #0
   330d8:	mov	r3, r5
   330dc:	bl	33538 <__assert_fail@plt+0x2097c>
   330e0:	mov	r6, r0
   330e4:	cmp	r0, #0
   330e8:	mov	r8, sl
   330ec:	bne	33360 <__assert_fail@plt+0x207a4>
   330f0:	b	334a0 <__assert_fail@plt+0x208e4>
   330f4:	mov	r8, sl
   330f8:	ldr	r1, [sl, #64]	; 0x40
   330fc:	mvn	r2, #32
   33100:	uxtab	r0, r2, r0
   33104:	clz	r0, r0
   33108:	lsr	r0, r0, #5
   3310c:	stm	sp, {r0, r3}
   33110:	movw	r2, #19270	; 0x4b46
   33114:	movt	r2, #4
   33118:	mov	r4, r3
   3311c:	movw	r3, #19276	; 0x4b4c
   33120:	movt	r3, #4
   33124:	b	33158 <__assert_fail@plt+0x2059c>
   33128:	mov	r8, sl
   3312c:	ldr	r1, [sl, #64]	; 0x40
   33130:	mvn	r2, #34	; 0x22
   33134:	uxtab	r0, r2, r0
   33138:	clz	r0, r0
   3313c:	lsr	r0, r0, #5
   33140:	stm	sp, {r0, r3}
   33144:	movw	r2, #19278	; 0x4b4e
   33148:	movt	r2, #4
   3314c:	mov	r4, r3
   33150:	movw	r3, #2143	; 0x85f
   33154:	movt	r3, #4
   33158:	mov	r0, r7
   3315c:	bl	33cf4 <__assert_fail@plt+0x21138>
   33160:	b	33348 <__assert_fail@plt+0x2078c>
   33164:	mov	r4, #0
   33168:	mov	r0, r7
   3316c:	mov	r1, #0
   33170:	mov	r2, #0
   33174:	mov	r3, r5
   33178:	bl	33538 <__assert_fail@plt+0x2097c>
   3317c:	cmp	r0, #0
   33180:	beq	334a0 <__assert_fail@plt+0x208e4>
   33184:	mov	r6, r0
   33188:	ldr	r0, [r7, #92]	; 0x5c
   3318c:	cmp	r0, #2
   33190:	mov	r8, sl
   33194:	blt	33360 <__assert_fail@plt+0x207a4>
   33198:	ldr	r0, [r8, #40]	; 0x28
   3319c:	ldr	r1, [r8, #56]	; 0x38
   331a0:	cmp	r1, r0
   331a4:	ble	33360 <__assert_fail@plt+0x207a4>
   331a8:	ldr	r1, [r8, #28]
   331ac:	cmp	r0, r1
   331b0:	beq	33360 <__assert_fail@plt+0x207a4>
   331b4:	ldr	r1, [r8, #8]
   331b8:	ldr	r0, [r1, r0, lsl #2]
   331bc:	cmn	r0, #1
   331c0:	bne	33360 <__assert_fail@plt+0x207a4>
   331c4:	mov	r0, r5
   331c8:	mov	r1, r8
   331cc:	mov	r2, r9
   331d0:	bl	32334 <__assert_fail@plt+0x1f778>
   331d4:	mov	r0, r7
   331d8:	mov	r1, #0
   331dc:	mov	r2, #0
   331e0:	mov	r3, r5
   331e4:	bl	33538 <__assert_fail@plt+0x2097c>
   331e8:	mov	r4, r0
   331ec:	mov	r0, r7
   331f0:	mov	r1, r6
   331f4:	mov	r2, r4
   331f8:	mov	r3, #16
   331fc:	bl	324c0 <__assert_fail@plt+0x1f904>
   33200:	cmp	r4, #0
   33204:	ldr	r1, [fp, #12]
   33208:	movne	r6, r0
   3320c:	cmpne	r0, #0
   33210:	bne	33198 <__assert_fail@plt+0x205dc>
   33214:	mov	r0, #12
   33218:	str	r0, [r1]
   3321c:	b	3351c <__assert_fail@plt+0x20960>
   33220:	ldr	r0, [r5]
   33224:	mov	r1, #1
   33228:	ldr	r2, [r7, #84]	; 0x54
   3322c:	tst	r2, r1, lsl r0
   33230:	beq	3352c <__assert_fail@plt+0x20970>
   33234:	lsl	r0, r1, r0
   33238:	ldr	r1, [r7, #80]	; 0x50
   3323c:	orr	r0, r1, r0
   33240:	str	r0, [r7, #80]	; 0x50
   33244:	mov	r4, #0
   33248:	mov	r0, r7
   3324c:	mov	r1, #0
   33250:	mov	r2, #0
   33254:	mov	r3, r5
   33258:	bl	33538 <__assert_fail@plt+0x2097c>
   3325c:	cmp	r0, #0
   33260:	beq	334a0 <__assert_fail@plt+0x208e4>
   33264:	mov	r6, r0
   33268:	mov	r8, sl
   3326c:	ldr	r0, [r7, #76]	; 0x4c
   33270:	add	r0, r0, #1
   33274:	str	r0, [r7, #76]	; 0x4c
   33278:	b	332b0 <__assert_fail@plt+0x206f4>
   3327c:	mov	r4, #0
   33280:	mov	r0, r7
   33284:	mov	r1, #0
   33288:	mov	r2, #0
   3328c:	mov	r3, r5
   33290:	bl	33538 <__assert_fail@plt+0x2097c>
   33294:	cmp	r0, #0
   33298:	beq	334a0 <__assert_fail@plt+0x208e4>
   3329c:	mov	r6, r0
   332a0:	ldr	r0, [r7, #92]	; 0x5c
   332a4:	cmp	r0, #2
   332a8:	mov	r8, sl
   332ac:	blt	33360 <__assert_fail@plt+0x207a4>
   332b0:	ldrb	r0, [r7, #88]	; 0x58
   332b4:	orr	r0, r0, #2
   332b8:	strb	r0, [r7, #88]	; 0x58
   332bc:	b	33360 <__assert_fail@plt+0x207a4>
   332c0:	add	r0, r4, #1
   332c4:	stm	sp, {r0, r3}
   332c8:	mov	r8, sl
   332cc:	mov	r0, sl
   332d0:	mov	r1, r6
   332d4:	mov	r2, r5
   332d8:	mov	r4, r3
   332dc:	mov	r3, r9
   332e0:	bl	335e0 <__assert_fail@plt+0x20a24>
   332e4:	b	33348 <__assert_fail@plt+0x2078c>
   332e8:	ldr	r0, [r5]
   332ec:	movw	r1, #783	; 0x30f
   332f0:	tst	r0, r1
   332f4:	beq	3330c <__assert_fail@plt+0x20750>
   332f8:	ldrb	r0, [r7, #88]	; 0x58
   332fc:	tst	r0, #16
   33300:	moveq	r0, r7
   33304:	bleq	33c18 <__assert_fail@plt+0x2105c>
   33308:	ldr	r0, [r5]
   3330c:	cmp	r0, #256	; 0x100
   33310:	beq	33438 <__assert_fail@plt+0x2087c>
   33314:	cmp	r0, #512	; 0x200
   33318:	bne	334b0 <__assert_fail@plt+0x208f4>
   3331c:	mov	r6, #10
   33320:	mov	r0, #5
   33324:	b	33440 <__assert_fail@plt+0x20884>
   33328:	str	r3, [sp]
   3332c:	mov	r8, sl
   33330:	mov	r0, sl
   33334:	mov	r1, r7
   33338:	mov	r2, r5
   3333c:	mov	r4, r3
   33340:	mov	r3, r9
   33344:	bl	336f4 <__assert_fail@plt+0x20b38>
   33348:	mov	r6, r0
   3334c:	cmp	r0, #0
   33350:	bne	33360 <__assert_fail@plt+0x207a4>
   33354:	ldr	r0, [r4]
   33358:	cmp	r0, #0
   3335c:	bne	3351c <__assert_fail@plt+0x20960>
   33360:	mov	r0, r5
   33364:	mov	r1, r8
   33368:	mov	r2, r9
   3336c:	bl	32334 <__assert_fail@plt+0x1f778>
   33370:	mov	r4, #1
   33374:	movw	r8, #2048	; 0x800
   33378:	movt	r8, #140	; 0x8c
   3337c:	ldr	r2, [fp, #12]
   33380:	ldrb	r0, [r5, #4]
   33384:	cmp	r0, #23
   33388:	bhi	33418 <__assert_fail@plt+0x2085c>
   3338c:	tst	r8, r4, lsl r0
   33390:	beq	33418 <__assert_fail@plt+0x2085c>
   33394:	str	r9, [sp]
   33398:	str	r2, [sp, #4]
   3339c:	mov	r0, r6
   333a0:	mov	r1, sl
   333a4:	mov	r2, r7
   333a8:	mov	r3, r5
   333ac:	bl	33ee4 <__assert_fail@plt+0x21328>
   333b0:	ldr	r2, [fp, #12]
   333b4:	cmp	r0, #0
   333b8:	bne	333c8 <__assert_fail@plt+0x2080c>
   333bc:	ldr	r1, [r2]
   333c0:	cmp	r1, #0
   333c4:	bne	334f8 <__assert_fail@plt+0x2093c>
   333c8:	ldr	r1, [sp, #8]
   333cc:	cmp	r1, #0
   333d0:	mov	r6, r0
   333d4:	beq	33380 <__assert_fail@plt+0x207c4>
   333d8:	ldrb	r1, [r5, #4]
   333dc:	cmp	r1, #23
   333e0:	beq	333f0 <__assert_fail@plt+0x20834>
   333e4:	cmp	r1, #11
   333e8:	mov	r6, r0
   333ec:	bne	33380 <__assert_fail@plt+0x207c4>
   333f0:	cmp	r0, #0
   333f4:	beq	3340c <__assert_fail@plt+0x20850>
   333f8:	movw	r1, #12144	; 0x2f70
   333fc:	movt	r1, #3
   33400:	mov	r2, #0
   33404:	bl	32ef8 <__assert_fail@plt+0x2033c>
   33408:	ldr	r2, [fp, #12]
   3340c:	mov	r0, #13
   33410:	str	r0, [r2]
   33414:	b	3351c <__assert_fail@plt+0x20960>
   33418:	mov	r4, r6
   3341c:	b	33520 <__assert_fail@plt+0x20964>
   33420:	mov	r0, #5
   33424:	str	r0, [r3]
   33428:	b	3351c <__assert_fail@plt+0x20960>
   3342c:	mov	r0, #16
   33430:	str	r0, [r3]
   33434:	b	3351c <__assert_fail@plt+0x20960>
   33438:	mov	r6, #9
   3343c:	mov	r0, #6
   33440:	str	r0, [r5]
   33444:	mov	r4, #0
   33448:	mov	r0, r7
   3344c:	mov	r1, #0
   33450:	mov	r2, #0
   33454:	mov	r3, r5
   33458:	bl	33538 <__assert_fail@plt+0x2097c>
   3345c:	mov	r8, r0
   33460:	str	r6, [r5]
   33464:	mov	r0, r7
   33468:	mov	r1, #0
   3346c:	mov	r2, #0
   33470:	mov	r3, r5
   33474:	bl	33538 <__assert_fail@plt+0x2097c>
   33478:	mov	r1, r0
   3347c:	mov	r0, r7
   33480:	mov	r7, r1
   33484:	mov	r1, r8
   33488:	mov	r2, r7
   3348c:	mov	r3, #10
   33490:	bl	324c0 <__assert_fail@plt+0x1f904>
   33494:	cmp	r8, #0
   33498:	cmpne	r7, #0
   3349c:	bne	334c8 <__assert_fail@plt+0x2090c>
   334a0:	mov	r0, #12
   334a4:	ldr	r1, [fp, #12]
   334a8:	str	r0, [r1]
   334ac:	b	33520 <__assert_fail@plt+0x20964>
   334b0:	mov	r4, #0
   334b4:	mov	r0, r7
   334b8:	mov	r1, #0
   334bc:	mov	r2, #0
   334c0:	mov	r3, r5
   334c4:	bl	33538 <__assert_fail@plt+0x2097c>
   334c8:	mov	r6, r0
   334cc:	cmp	r0, #0
   334d0:	beq	334a0 <__assert_fail@plt+0x208e4>
   334d4:	mov	r0, r5
   334d8:	mov	r1, sl
   334dc:	mov	r2, r9
   334e0:	bl	32334 <__assert_fail@plt+0x1f778>
   334e4:	mov	r4, r6
   334e8:	b	33520 <__assert_fail@plt+0x20964>
   334ec:	mov	r0, #13
   334f0:	str	r0, [r3]
   334f4:	b	3351c <__assert_fail@plt+0x20960>
   334f8:	cmp	r6, #0
   334fc:	beq	3351c <__assert_fail@plt+0x20960>
   33500:	movw	r1, #12144	; 0x2f70
   33504:	movt	r1, #3
   33508:	mov	r4, #0
   3350c:	mov	r0, r6
   33510:	mov	r2, #0
   33514:	bl	32ef8 <__assert_fail@plt+0x2033c>
   33518:	b	33520 <__assert_fail@plt+0x20964>
   3351c:	mov	r4, #0
   33520:	mov	r0, r4
   33524:	sub	sp, fp, #28
   33528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3352c:	mov	r0, #6
   33530:	ldr	r1, [fp, #12]
   33534:	b	33218 <__assert_fail@plt+0x2065c>
   33538:	push	{r4, r5, r6, r7, fp, lr}
   3353c:	add	fp, sp, #16
   33540:	mov	r6, r3
   33544:	mov	r4, r2
   33548:	mov	r5, r1
   3354c:	mov	r7, r0
   33550:	ldr	r0, [r0, #64]	; 0x40
   33554:	cmp	r0, #31
   33558:	beq	335b4 <__assert_fail@plt+0x209f8>
   3355c:	ldr	r0, [r7, #56]	; 0x38
   33560:	ldr	r1, [r7, #64]	; 0x40
   33564:	add	r2, r1, #1
   33568:	str	r2, [r7, #64]	; 0x40
   3356c:	add	r0, r0, r1, lsl #5
   33570:	mov	r1, #0
   33574:	str	r1, [r0, #4]!
   33578:	str	r5, [r0, #4]
   3357c:	str	r4, [r0, #8]
   33580:	ldm	r6, {r2, r3}
   33584:	str	r1, [r0, #12]
   33588:	str	r1, [r0, #16]
   3358c:	mvn	r1, #0
   33590:	str	r1, [r0, #28]
   33594:	str	r2, [r0, #20]
   33598:	bic	r1, r3, #786432	; 0xc0000
   3359c:	str	r1, [r0, #24]
   335a0:	cmp	r5, #0
   335a4:	strne	r0, [r5]
   335a8:	cmp	r4, #0
   335ac:	strne	r0, [r4]
   335b0:	pop	{r4, r5, r6, r7, fp, pc}
   335b4:	mov	r0, #996	; 0x3e4
   335b8:	bl	2ed04 <__assert_fail@plt+0x1c148>
   335bc:	cmp	r0, #0
   335c0:	moveq	r0, #0
   335c4:	popeq	{r4, r5, r6, r7, fp, pc}
   335c8:	ldr	r1, [r7, #56]	; 0x38
   335cc:	str	r1, [r0]
   335d0:	mov	r1, #0
   335d4:	str	r1, [r7, #64]	; 0x40
   335d8:	str	r0, [r7, #56]	; 0x38
   335dc:	b	3355c <__assert_fail@plt+0x209a0>
   335e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   335e4:	add	fp, sp, #28
   335e8:	sub	sp, sp, #12
   335ec:	mov	r5, r3
   335f0:	mov	r6, r2
   335f4:	mov	r7, r1
   335f8:	mov	r4, r0
   335fc:	ldr	r8, [r1]
   33600:	ldr	sl, [r1, #24]
   33604:	add	r0, sl, #1
   33608:	str	r0, [r1, #24]
   3360c:	orr	r2, r3, #8388608	; 0x800000
   33610:	mov	r0, r6
   33614:	mov	r1, r4
   33618:	bl	32334 <__assert_fail@plt+0x1f778>
   3361c:	ldrb	r0, [r6, #4]
   33620:	mov	r1, #0
   33624:	ldr	r9, [fp, #12]
   33628:	cmp	r0, #9
   3362c:	beq	33678 <__assert_fail@plt+0x20abc>
   33630:	ldr	r0, [fp, #8]
   33634:	stm	sp, {r0, r9}
   33638:	mov	r0, r4
   3363c:	mov	r1, r7
   33640:	mov	r2, r6
   33644:	mov	r3, r5
   33648:	bl	32354 <__assert_fail@plt+0x1f798>
   3364c:	mov	r1, r0
   33650:	ldr	r0, [r9]
   33654:	mov	r5, #0
   33658:	cmp	r0, #0
   3365c:	bne	336b0 <__assert_fail@plt+0x20af4>
   33660:	ldrb	r0, [r6, #4]
   33664:	cmp	r0, #9
   33668:	bne	336c8 <__assert_fail@plt+0x20b0c>
   3366c:	ldr	r0, [r9]
   33670:	cmp	r0, #0
   33674:	bne	336b0 <__assert_fail@plt+0x20af4>
   33678:	cmp	sl, #8
   3367c:	ldrls	r0, [r8, #84]	; 0x54
   33680:	movls	r2, #1
   33684:	orrls	r0, r0, r2, lsl sl
   33688:	strls	r0, [r8, #84]	; 0x54
   3368c:	mov	r5, #0
   33690:	mov	r0, r8
   33694:	mov	r2, #0
   33698:	mov	r3, #17
   3369c:	bl	324c0 <__assert_fail@plt+0x1f904>
   336a0:	cmp	r0, #0
   336a4:	beq	336bc <__assert_fail@plt+0x20b00>
   336a8:	str	sl, [r0, #20]
   336ac:	mov	r5, r0
   336b0:	mov	r0, r5
   336b4:	sub	sp, fp, #28
   336b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   336bc:	mov	r0, #12
   336c0:	str	r0, [r9]
   336c4:	b	336b0 <__assert_fail@plt+0x20af4>
   336c8:	cmp	r1, #0
   336cc:	beq	336e8 <__assert_fail@plt+0x20b2c>
   336d0:	movw	r2, #12144	; 0x2f70
   336d4:	movt	r2, #3
   336d8:	mov	r0, r1
   336dc:	mov	r1, r2
   336e0:	mov	r2, #0
   336e4:	bl	32ef8 <__assert_fail@plt+0x2033c>
   336e8:	mov	r0, #8
   336ec:	str	r0, [r9]
   336f0:	b	336b0 <__assert_fail@plt+0x20af4>
   336f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   336f8:	add	fp, sp, #28
   336fc:	sub	sp, sp, #124	; 0x7c
   33700:	mov	r8, r3
   33704:	mov	r6, r2
   33708:	mov	r9, r1
   3370c:	mov	r7, r0
   33710:	mov	r5, #0
   33714:	str	r5, [fp, #-32]	; 0xffffffe0
   33718:	str	r5, [fp, #-36]	; 0xffffffdc
   3371c:	mov	r0, #32
   33720:	mov	r1, #1
   33724:	bl	2c49c <__assert_fail@plt+0x198e0>
   33728:	mov	r4, r0
   3372c:	mov	r0, #40	; 0x28
   33730:	mov	r1, #1
   33734:	bl	2c49c <__assert_fail@plt+0x198e0>
   33738:	mov	sl, r0
   3373c:	cmp	r4, #0
   33740:	cmpne	sl, #0
   33744:	beq	33bd0 <__assert_fail@plt+0x21014>
   33748:	mov	r0, r6
   3374c:	mov	r1, r7
   33750:	mov	r2, r8
   33754:	bl	34218 <__assert_fail@plt+0x2165c>
   33758:	mov	r5, r0
   3375c:	ldrb	r0, [r6, #4]
   33760:	cmp	r0, #25
   33764:	beq	33778 <__assert_fail@plt+0x20bbc>
   33768:	cmp	r0, #2
   3376c:	beq	33bc8 <__assert_fail@plt+0x2100c>
   33770:	mov	r0, #0
   33774:	b	337c8 <__assert_fail@plt+0x20c0c>
   33778:	ldrb	r0, [sl, #16]
   3377c:	orr	r0, r0, #1
   33780:	strb	r0, [sl, #16]
   33784:	tst	r8, #256	; 0x100
   33788:	beq	33798 <__assert_fail@plt+0x20bdc>
   3378c:	mov	r0, r4
   33790:	mov	r1, #10
   33794:	bl	3438c <__assert_fail@plt+0x217d0>
   33798:	ldr	r0, [r7, #40]	; 0x28
   3379c:	add	r0, r0, r5
   337a0:	str	r0, [r7, #40]	; 0x28
   337a4:	mov	r0, r6
   337a8:	mov	r1, r7
   337ac:	mov	r2, r8
   337b0:	bl	34218 <__assert_fail@plt+0x2165c>
   337b4:	mov	r5, r0
   337b8:	ldrb	r0, [r6, #4]
   337bc:	cmp	r0, #2
   337c0:	beq	33bc8 <__assert_fail@plt+0x2100c>
   337c4:	mov	r0, #1
   337c8:	str	r0, [sp, #20]
   337cc:	ldr	r0, [r6, #4]
   337d0:	uxtb	r1, r0
   337d4:	cmp	r1, #21
   337d8:	moveq	r1, #1
   337dc:	bfieq	r0, r1, #0, #8
   337e0:	streq	r0, [r6, #4]
   337e4:	str	sl, [sp, #24]
   337e8:	mov	r0, #3
   337ec:	str	r0, [fp, #-44]	; 0xffffffd4
   337f0:	add	r0, sp, #68	; 0x44
   337f4:	str	r0, [fp, #-40]	; 0xffffffd8
   337f8:	mov	r0, #1
   337fc:	str	r8, [sp]
   33800:	str	r0, [sp, #4]
   33804:	sub	r0, fp, #44	; 0x2c
   33808:	mov	r1, r7
   3380c:	mov	r2, r6
   33810:	mov	r3, r5
   33814:	bl	343b0 <__assert_fail@plt+0x217f4>
   33818:	cmp	r0, #0
   3381c:	bne	33bb8 <__assert_fail@plt+0x20ffc>
   33820:	mov	r0, #0
   33824:	str	r0, [sp, #16]
   33828:	mov	r0, r6
   3382c:	mov	r1, r7
   33830:	mov	r2, r8
   33834:	bl	34218 <__assert_fail@plt+0x2165c>
   33838:	mov	sl, r0
   3383c:	ldr	r5, [fp, #-44]	; 0xffffffd4
   33840:	cmp	r5, #2
   33844:	beq	338ac <__assert_fail@plt+0x20cf0>
   33848:	cmp	r5, #4
   3384c:	bne	33870 <__assert_fail@plt+0x20cb4>
   33850:	ldr	r0, [r7, #64]	; 0x40
   33854:	ldr	r1, [fp, #-40]	; 0xffffffd8
   33858:	stm	sp, {r1, r8}
   3385c:	mov	r1, r4
   33860:	ldr	r2, [sp, #24]
   33864:	sub	r3, fp, #36	; 0x24
   33868:	bl	3474c <__assert_fail@plt+0x21b90>
   3386c:	b	338b8 <__assert_fail@plt+0x20cfc>
   33870:	ldrb	r0, [r6, #4]
   33874:	cmp	r0, #22
   33878:	beq	33918 <__assert_fail@plt+0x20d5c>
   3387c:	cmp	r0, #2
   33880:	beq	33bb4 <__assert_fail@plt+0x20ff8>
   33884:	cmp	r5, #1
   33888:	beq	339d8 <__assert_fail@plt+0x20e1c>
   3388c:	cmp	r5, #2
   33890:	beq	338ac <__assert_fail@plt+0x20cf0>
   33894:	cmp	r5, #3
   33898:	bne	33a08 <__assert_fail@plt+0x20e4c>
   3389c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   338a0:	mov	r0, r4
   338a4:	bl	34714 <__assert_fail@plt+0x21b58>
   338a8:	b	338b8 <__assert_fail@plt+0x20cfc>
   338ac:	ldr	r1, [fp, #-40]	; 0xffffffd8
   338b0:	mov	r0, r4
   338b4:	bl	346dc <__assert_fail@plt+0x21b20>
   338b8:	ldr	r1, [fp, #8]
   338bc:	str	r0, [r1]
   338c0:	cmp	r0, #0
   338c4:	bne	33bc0 <__assert_fail@plt+0x21004>
   338c8:	ldrb	r0, [r6, #4]
   338cc:	cmp	r0, #21
   338d0:	beq	33a40 <__assert_fail@plt+0x20e84>
   338d4:	cmp	r0, #2
   338d8:	beq	33bb4 <__assert_fail@plt+0x20ff8>
   338dc:	mov	r0, #3
   338e0:	str	r0, [fp, #-44]	; 0xffffffd4
   338e4:	add	r0, sp, #68	; 0x44
   338e8:	str	r0, [fp, #-40]	; 0xffffffd8
   338ec:	str	r8, [sp]
   338f0:	mov	r0, #0
   338f4:	str	r0, [sp, #4]
   338f8:	sub	r0, fp, #44	; 0x2c
   338fc:	mov	r1, r7
   33900:	mov	r2, r6
   33904:	mov	r3, sl
   33908:	bl	343b0 <__assert_fail@plt+0x217f4>
   3390c:	cmp	r0, #0
   33910:	beq	33828 <__assert_fail@plt+0x20c6c>
   33914:	b	33bb8 <__assert_fail@plt+0x20ffc>
   33918:	ldr	r0, [r7, #40]	; 0x28
   3391c:	add	r0, r0, sl
   33920:	str	r0, [r7, #40]	; 0x28
   33924:	add	r0, sp, #28
   33928:	mov	r1, r7
   3392c:	mov	r2, r8
   33930:	bl	34218 <__assert_fail@plt+0x2165c>
   33934:	mov	r3, r0
   33938:	ldrb	r0, [sp, #32]
   3393c:	cmp	r0, #21
   33940:	beq	339bc <__assert_fail@plt+0x20e00>
   33944:	cmp	r0, #2
   33948:	sub	r1, fp, #52	; 0x34
   3394c:	beq	33bb4 <__assert_fail@plt+0x20ff8>
   33950:	mov	r0, #3
   33954:	str	r0, [fp, #-52]	; 0xffffffcc
   33958:	add	r0, sp, #36	; 0x24
   3395c:	str	r0, [fp, #-48]	; 0xffffffd0
   33960:	str	r8, [sp]
   33964:	mov	r0, #1
   33968:	str	r0, [sp, #4]
   3396c:	mov	r0, r1
   33970:	mov	r5, r1
   33974:	mov	r1, r7
   33978:	add	r2, sp, #28
   3397c:	bl	343b0 <__assert_fail@plt+0x217f4>
   33980:	cmp	r0, #0
   33984:	bne	33bb8 <__assert_fail@plt+0x20ffc>
   33988:	mov	r0, r6
   3398c:	mov	r1, r7
   33990:	mov	r2, r8
   33994:	bl	34218 <__assert_fail@plt+0x2165c>
   33998:	mov	sl, r0
   3399c:	stm	sp, {r5, r9}
   339a0:	str	r8, [sp, #8]
   339a4:	mov	r0, r4
   339a8:	ldr	r1, [sp, #24]
   339ac:	sub	r2, fp, #32
   339b0:	sub	r3, fp, #44	; 0x2c
   339b4:	bl	344b8 <__assert_fail@plt+0x218fc>
   339b8:	b	338b8 <__assert_fail@plt+0x20cfc>
   339bc:	ldr	r0, [r7, #40]	; 0x28
   339c0:	sub	r0, r0, sl
   339c4:	str	r0, [r7, #40]	; 0x28
   339c8:	mov	r0, #1
   339cc:	strb	r0, [r6, #4]
   339d0:	cmp	r5, #1
   339d4:	bne	3388c <__assert_fail@plt+0x20cd0>
   339d8:	ldr	r5, [sp, #24]
   339dc:	ldr	r0, [r5, #20]
   339e0:	ldr	r1, [sp, #16]
   339e4:	cmp	r1, r0
   339e8:	beq	33a18 <__assert_fail@plt+0x20e5c>
   339ec:	ldr	r0, [r5]
   339f0:	ldr	r1, [r5, #20]
   339f4:	add	r2, r1, #1
   339f8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   339fc:	str	r2, [r5, #20]
   33a00:	str	r3, [r0, r1, lsl #2]
   33a04:	b	338c8 <__assert_fail@plt+0x20d0c>
   33a08:	ldrb	r1, [fp, #-40]	; 0xffffffd8
   33a0c:	mov	r0, r4
   33a10:	bl	3438c <__assert_fail@plt+0x217d0>
   33a14:	b	338c8 <__assert_fail@plt+0x20d0c>
   33a18:	mov	r1, #1
   33a1c:	orr	r0, r1, r0, lsl #1
   33a20:	str	r0, [sp, #16]
   33a24:	lsl	r1, r0, #2
   33a28:	ldr	r0, [r5]
   33a2c:	bl	2f804 <__assert_fail@plt+0x1cc48>
   33a30:	cmp	r0, #0
   33a34:	beq	33bf0 <__assert_fail@plt+0x21034>
   33a38:	str	r0, [r5]
   33a3c:	b	339ec <__assert_fail@plt+0x20e30>
   33a40:	ldr	r0, [r7, #40]	; 0x28
   33a44:	add	r0, r0, sl
   33a48:	str	r0, [r7, #40]	; 0x28
   33a4c:	ldr	r0, [sp, #20]
   33a50:	cmp	r0, #0
   33a54:	movne	r0, r4
   33a58:	blne	34fb4 <__assert_fail@plt+0x223f8>
   33a5c:	ldr	r0, [r9, #92]	; 0x5c
   33a60:	cmp	r0, #2
   33a64:	ldr	sl, [sp, #24]
   33a68:	blt	33a78 <__assert_fail@plt+0x20ebc>
   33a6c:	ldr	r1, [r9, #60]	; 0x3c
   33a70:	mov	r0, r4
   33a74:	bl	34fd4 <__assert_fail@plt+0x22418>
   33a78:	ldr	r0, [sl, #20]
   33a7c:	cmp	r0, #0
   33a80:	bne	33aa8 <__assert_fail@plt+0x20eec>
   33a84:	ldr	r0, [sl, #24]
   33a88:	cmp	r0, #0
   33a8c:	bne	33aa8 <__assert_fail@plt+0x20eec>
   33a90:	ldr	r0, [sl, #28]
   33a94:	cmp	r0, #0
   33a98:	bne	33aa8 <__assert_fail@plt+0x20eec>
   33a9c:	ldr	r0, [sl, #32]
   33aa0:	cmp	r0, #0
   33aa4:	beq	33b64 <__assert_fail@plt+0x20fa8>
   33aa8:	ldrb	r0, [r9, #88]	; 0x58
   33aac:	orr	r0, r0, #2
   33ab0:	strb	r0, [r9, #88]	; 0x58
   33ab4:	str	sl, [sp, #68]	; 0x44
   33ab8:	ldr	r7, [sp, #72]	; 0x48
   33abc:	mov	r0, #6
   33ac0:	strb	r0, [sp, #72]	; 0x48
   33ac4:	mov	r6, #0
   33ac8:	add	r3, sp, #68	; 0x44
   33acc:	mov	r0, r9
   33ad0:	mov	r1, #0
   33ad4:	mov	r2, #0
   33ad8:	bl	33538 <__assert_fail@plt+0x2097c>
   33adc:	cmp	r0, #0
   33ae0:	beq	33bf4 <__assert_fail@plt+0x21038>
   33ae4:	mov	r5, r0
   33ae8:	bic	r0, r7, #255	; 0xff
   33aec:	ldr	r1, [r4, r6, lsl #2]
   33af0:	cmp	r1, #0
   33af4:	bne	33b10 <__assert_fail@plt+0x20f54>
   33af8:	add	r6, r6, #1
   33afc:	cmp	r6, #7
   33b00:	bls	33aec <__assert_fail@plt+0x20f30>
   33b04:	mov	r0, r4
   33b08:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   33b0c:	b	33b58 <__assert_fail@plt+0x20f9c>
   33b10:	str	r4, [sp, #68]	; 0x44
   33b14:	orr	r0, r0, #3
   33b18:	str	r0, [sp, #72]	; 0x48
   33b1c:	add	r3, sp, #68	; 0x44
   33b20:	mov	r0, r9
   33b24:	mov	r1, #0
   33b28:	mov	r2, #0
   33b2c:	bl	33538 <__assert_fail@plt+0x2097c>
   33b30:	cmp	r0, #0
   33b34:	beq	33bf4 <__assert_fail@plt+0x21038>
   33b38:	mov	r1, r0
   33b3c:	mov	r0, r9
   33b40:	mov	r2, r5
   33b44:	mov	r3, #10
   33b48:	bl	324c0 <__assert_fail@plt+0x1f904>
   33b4c:	mov	r5, r0
   33b50:	cmp	r0, #0
   33b54:	beq	33bf4 <__assert_fail@plt+0x21038>
   33b58:	mov	r0, r5
   33b5c:	sub	sp, fp, #28
   33b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33b64:	ldr	r0, [r9, #92]	; 0x5c
   33b68:	cmp	r0, #2
   33b6c:	blt	33b88 <__assert_fail@plt+0x20fcc>
   33b70:	ldr	r0, [sl, #36]	; 0x24
   33b74:	cmp	r0, #0
   33b78:	bne	33aa8 <__assert_fail@plt+0x20eec>
   33b7c:	ldrb	r0, [sl, #16]
   33b80:	tst	r0, #1
   33b84:	bne	33aa8 <__assert_fail@plt+0x20eec>
   33b88:	mov	r0, sl
   33b8c:	bl	30fec <__assert_fail@plt+0x1e430>
   33b90:	str	r4, [sp, #68]	; 0x44
   33b94:	mov	r0, #3
   33b98:	strb	r0, [sp, #72]	; 0x48
   33b9c:	add	r3, sp, #68	; 0x44
   33ba0:	mov	r0, r9
   33ba4:	mov	r1, #0
   33ba8:	mov	r2, #0
   33bac:	bl	33538 <__assert_fail@plt+0x2097c>
   33bb0:	b	33b4c <__assert_fail@plt+0x20f90>
   33bb4:	mov	r0, #7
   33bb8:	ldr	r1, [fp, #8]
   33bbc:	str	r0, [r1]
   33bc0:	ldr	sl, [sp, #24]
   33bc4:	b	33c00 <__assert_fail@plt+0x21044>
   33bc8:	mov	r0, #2
   33bcc:	b	33bf8 <__assert_fail@plt+0x2103c>
   33bd0:	mov	r0, r4
   33bd4:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   33bd8:	mov	r0, sl
   33bdc:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   33be0:	mov	r0, #12
   33be4:	ldr	r1, [fp, #8]
   33be8:	str	r0, [r1]
   33bec:	b	33b58 <__assert_fail@plt+0x20f9c>
   33bf0:	mov	sl, r5
   33bf4:	mov	r0, #12
   33bf8:	ldr	r1, [fp, #8]
   33bfc:	str	r0, [r1]
   33c00:	mov	r0, r4
   33c04:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   33c08:	mov	r0, sl
   33c0c:	bl	30fec <__assert_fail@plt+0x1e430>
   33c10:	mov	r5, #0
   33c14:	b	33b58 <__assert_fail@plt+0x20f9c>
   33c18:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   33c1c:	add	fp, sp, #24
   33c20:	mov	r4, r0
   33c24:	ldrb	r0, [r0, #88]	; 0x58
   33c28:	orr	r1, r0, #16
   33c2c:	strb	r1, [r4, #88]	; 0x58
   33c30:	tst	r0, #8
   33c34:	bne	33c70 <__assert_fail@plt+0x210b4>
   33c38:	movw	r1, #0
   33c3c:	movt	r1, #1023	; 0x3ff
   33c40:	mov	r2, #0
   33c44:	mvn	r3, #2013265921	; 0x78000001
   33c48:	mvn	r7, #-134217727	; 0xf8000001
   33c4c:	str	r2, [r4, #96]	; 0x60
   33c50:	add	r2, r4, #100	; 0x64
   33c54:	stm	r2, {r1, r3, r7}
   33c58:	tst	r0, #4
   33c5c:	beq	33c7c <__assert_fail@plt+0x210c0>
   33c60:	vmov.i32	q8, #0	; 0x00000000
   33c64:	add	r0, r4, #112	; 0x70
   33c68:	vst1.32	{d16-d17}, [r0]
   33c6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   33c70:	mov	r5, #0
   33c74:	mov	r8, #0
   33c78:	b	33c84 <__assert_fail@plt+0x210c8>
   33c7c:	mov	r8, #4
   33c80:	mov	r5, #128	; 0x80
   33c84:	bl	12844 <__ctype_b_loc@plt>
   33c88:	ldr	r0, [r0]
   33c8c:	add	r6, r0, r5, lsl #1
   33c90:	mov	r1, #1
   33c94:	b	33cac <__assert_fail@plt+0x210f0>
   33c98:	add	r6, r6, #64	; 0x40
   33c9c:	add	r8, r8, #1
   33ca0:	add	r5, r5, #32
   33ca4:	cmp	r8, #8
   33ca8:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   33cac:	add	r0, r4, r8, lsl #2
   33cb0:	add	r2, r0, #96	; 0x60
   33cb4:	mov	r3, #0
   33cb8:	mov	r0, r6
   33cbc:	add	r7, r5, r3
   33cc0:	cmp	r7, #95	; 0x5f
   33cc4:	beq	33cd4 <__assert_fail@plt+0x21118>
   33cc8:	ldrh	r7, [r0]
   33ccc:	ands	r7, r7, #8
   33cd0:	beq	33ce0 <__assert_fail@plt+0x21124>
   33cd4:	ldr	r7, [r2]
   33cd8:	orr	r7, r7, r1, lsl r3
   33cdc:	str	r7, [r2]
   33ce0:	add	r0, r0, #2
   33ce4:	add	r3, r3, #1
   33ce8:	cmp	r3, #32
   33cec:	bne	33cbc <__assert_fail@plt+0x21100>
   33cf0:	b	33c98 <__assert_fail@plt+0x210dc>
   33cf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33cf8:	add	fp, sp, #28
   33cfc:	sub	sp, sp, #20
   33d00:	mov	r8, r3
   33d04:	mov	r6, r2
   33d08:	mov	r4, r1
   33d0c:	mov	r9, r0
   33d10:	mov	r7, #0
   33d14:	str	r7, [sp, #16]
   33d18:	mov	r0, #32
   33d1c:	mov	r1, #1
   33d20:	bl	2c49c <__assert_fail@plt+0x198e0>
   33d24:	ldr	r1, [fp, #12]
   33d28:	cmp	r0, #0
   33d2c:	beq	33e9c <__assert_fail@plt+0x212e0>
   33d30:	mov	r5, r0
   33d34:	mov	r0, #40	; 0x28
   33d38:	mov	r1, #1
   33d3c:	bl	2c49c <__assert_fail@plt+0x198e0>
   33d40:	cmp	r0, #0
   33d44:	beq	33ea8 <__assert_fail@plt+0x212ec>
   33d48:	mov	sl, r0
   33d4c:	ldr	r1, [fp, #8]
   33d50:	ldrb	r0, [r0, #16]
   33d54:	and	r0, r0, #254	; 0xfe
   33d58:	orr	r0, r0, r1
   33d5c:	strb	r0, [sl, #16]
   33d60:	mov	r7, #0
   33d64:	stm	sp, {r6, r7}
   33d68:	add	r3, sp, #16
   33d6c:	mov	r0, r4
   33d70:	mov	r1, r5
   33d74:	mov	r2, sl
   33d78:	bl	3474c <__assert_fail@plt+0x21b90>
   33d7c:	cmp	r0, #0
   33d80:	bne	33ec4 <__assert_fail@plt+0x21308>
   33d84:	ldrb	r0, [r8]
   33d88:	cmp	r0, #0
   33d8c:	beq	33dac <__assert_fail@plt+0x211f0>
   33d90:	add	r4, r8, #1
   33d94:	uxtb	r1, r0
   33d98:	mov	r0, r5
   33d9c:	bl	3438c <__assert_fail@plt+0x217d0>
   33da0:	ldrb	r0, [r4], #1
   33da4:	cmp	r0, #0
   33da8:	bne	33d94 <__assert_fail@plt+0x211d8>
   33dac:	ldr	r0, [fp, #8]
   33db0:	cmp	r0, #0
   33db4:	movne	r0, r5
   33db8:	blne	34fb4 <__assert_fail@plt+0x223f8>
   33dbc:	ldr	r0, [r9, #92]	; 0x5c
   33dc0:	cmp	r0, #2
   33dc4:	blt	33dd4 <__assert_fail@plt+0x21218>
   33dc8:	ldr	r1, [r9, #60]	; 0x3c
   33dcc:	mov	r0, r5
   33dd0:	bl	34fd4 <__assert_fail@plt+0x22418>
   33dd4:	str	r5, [sp, #8]
   33dd8:	ldr	r4, [sp, #12]
   33ddc:	bfc	r4, #0, #23
   33de0:	orr	r0, r4, #3
   33de4:	str	r0, [sp, #12]
   33de8:	mov	r7, #0
   33dec:	add	r3, sp, #8
   33df0:	mov	r0, r9
   33df4:	mov	r1, #0
   33df8:	mov	r2, #0
   33dfc:	bl	33538 <__assert_fail@plt+0x2097c>
   33e00:	cmp	r0, #0
   33e04:	beq	33e80 <__assert_fail@plt+0x212c4>
   33e08:	mov	r6, r0
   33e0c:	ldr	r0, [r9, #92]	; 0x5c
   33e10:	cmp	r0, #2
   33e14:	blt	33e68 <__assert_fail@plt+0x212ac>
   33e18:	str	sl, [sp, #8]
   33e1c:	orr	r0, r4, #6
   33e20:	str	r0, [sp, #12]
   33e24:	ldrb	r0, [r9, #88]	; 0x58
   33e28:	orr	r0, r0, #2
   33e2c:	strb	r0, [r9, #88]	; 0x58
   33e30:	add	r3, sp, #8
   33e34:	mov	r0, r9
   33e38:	mov	r1, #0
   33e3c:	mov	r2, #0
   33e40:	bl	33538 <__assert_fail@plt+0x2097c>
   33e44:	cmp	r0, #0
   33e48:	beq	33e80 <__assert_fail@plt+0x212c4>
   33e4c:	mov	r2, r0
   33e50:	mov	r0, r9
   33e54:	mov	r1, r6
   33e58:	mov	r3, #10
   33e5c:	bl	324c0 <__assert_fail@plt+0x1f904>
   33e60:	mov	r7, r0
   33e64:	b	33e74 <__assert_fail@plt+0x212b8>
   33e68:	mov	r0, sl
   33e6c:	bl	30fec <__assert_fail@plt+0x1e430>
   33e70:	mov	r7, r6
   33e74:	mov	r0, r7
   33e78:	sub	sp, fp, #28
   33e7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33e80:	mov	r0, r5
   33e84:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   33e88:	mov	r0, sl
   33e8c:	bl	30fec <__assert_fail@plt+0x1e430>
   33e90:	mov	r0, #12
   33e94:	ldr	r1, [fp, #12]
   33e98:	b	33ea0 <__assert_fail@plt+0x212e4>
   33e9c:	mov	r0, #12
   33ea0:	str	r0, [r1]
   33ea4:	b	33e74 <__assert_fail@plt+0x212b8>
   33ea8:	mov	r0, r5
   33eac:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   33eb0:	mov	r0, #12
   33eb4:	ldr	r1, [fp, #12]
   33eb8:	str	r0, [r1]
   33ebc:	mov	r7, #0
   33ec0:	b	33e74 <__assert_fail@plt+0x212b8>
   33ec4:	mov	r6, r0
   33ec8:	mov	r0, r5
   33ecc:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   33ed0:	mov	r0, sl
   33ed4:	bl	30fec <__assert_fail@plt+0x1e430>
   33ed8:	ldr	r0, [fp, #12]
   33edc:	str	r6, [r0]
   33ee0:	b	33e74 <__assert_fail@plt+0x212b8>
   33ee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33ee8:	add	fp, sp, #28
   33eec:	sub	sp, sp, #20
   33ef0:	mov	r7, r3
   33ef4:	mov	r5, r2
   33ef8:	mov	r8, r1
   33efc:	mov	r4, r0
   33f00:	ldrb	r0, [r3, #4]
   33f04:	ldr	r1, [fp, #12]
   33f08:	str	r1, [sp, #16]
   33f0c:	ldr	sl, [fp, #8]
   33f10:	cmp	r0, #23
   33f14:	bne	33f6c <__assert_fail@plt+0x213b0>
   33f18:	ldr	r0, [r7]
   33f1c:	str	r0, [sp, #12]
   33f20:	ldr	r0, [r7, #4]
   33f24:	str	r0, [sp, #8]
   33f28:	ldr	r0, [r8, #40]	; 0x28
   33f2c:	str	r0, [sp, #4]
   33f30:	mov	r0, r8
   33f34:	mov	r1, r7
   33f38:	mov	r2, sl
   33f3c:	bl	35228 <__assert_fail@plt+0x2266c>
   33f40:	cmn	r0, #1
   33f44:	bne	33f88 <__assert_fail@plt+0x213cc>
   33f48:	ldrb	r0, [r7, #4]
   33f4c:	cmp	r0, #1
   33f50:	bne	33f64 <__assert_fail@plt+0x213a8>
   33f54:	ldrb	r0, [r7]
   33f58:	mov	r6, #0
   33f5c:	cmp	r0, #44	; 0x2c
   33f60:	beq	33f94 <__assert_fail@plt+0x213d8>
   33f64:	mov	r0, #10
   33f68:	b	341dc <__assert_fail@plt+0x21620>
   33f6c:	mvn	r9, #0
   33f70:	cmp	r0, #19
   33f74:	movweq	r9, #1
   33f78:	sub	r0, r0, #18
   33f7c:	clz	r0, r0
   33f80:	lsr	r6, r0, #5
   33f84:	b	3402c <__assert_fail@plt+0x21470>
   33f88:	mov	r6, r0
   33f8c:	cmn	r0, #2
   33f90:	beq	33fb4 <__assert_fail@plt+0x213f8>
   33f94:	ldrb	r0, [r7, #4]
   33f98:	cmp	r0, #24
   33f9c:	mov	r9, r6
   33fa0:	beq	33ffc <__assert_fail@plt+0x21440>
   33fa4:	cmp	r0, #1
   33fa8:	ldrbeq	r0, [r7]
   33fac:	cmpeq	r0, #44	; 0x2c
   33fb0:	beq	33fe0 <__assert_fail@plt+0x21424>
   33fb4:	tst	sl, #2097152	; 0x200000
   33fb8:	beq	341f4 <__assert_fail@plt+0x21638>
   33fbc:	ldr	r0, [sp, #4]
   33fc0:	str	r0, [r8, #40]	; 0x28
   33fc4:	ldr	r0, [sp, #12]
   33fc8:	str	r0, [r7]
   33fcc:	ldr	r0, [sp, #8]
   33fd0:	str	r0, [r7, #4]
   33fd4:	mov	r0, #1
   33fd8:	strb	r0, [r7, #4]
   33fdc:	b	341e8 <__assert_fail@plt+0x2162c>
   33fe0:	mov	r0, r8
   33fe4:	mov	r1, r7
   33fe8:	mov	r2, sl
   33fec:	bl	35228 <__assert_fail@plt+0x2266c>
   33ff0:	mov	r9, r0
   33ff4:	cmn	r0, #2
   33ff8:	beq	33fb4 <__assert_fail@plt+0x213f8>
   33ffc:	cmn	r9, #1
   34000:	beq	3400c <__assert_fail@plt+0x21450>
   34004:	cmp	r6, r9
   34008:	bgt	33f64 <__assert_fail@plt+0x213a8>
   3400c:	ldrb	r0, [r7, #4]
   34010:	cmp	r0, #24
   34014:	bne	33f64 <__assert_fail@plt+0x213a8>
   34018:	cmn	r9, #1
   3401c:	mov	r0, r9
   34020:	moveq	r0, r6
   34024:	cmp	r0, #32768	; 0x8000
   34028:	bge	34210 <__assert_fail@plt+0x21654>
   3402c:	mov	r0, r7
   34030:	mov	r1, r8
   34034:	mov	r2, sl
   34038:	bl	32334 <__assert_fail@plt+0x1f778>
   3403c:	cmp	r4, #0
   34040:	beq	341e4 <__assert_fail@plt+0x21628>
   34044:	orrs	r0, r9, r6
   34048:	beq	3413c <__assert_fail@plt+0x21580>
   3404c:	mov	r8, #0
   34050:	cmp	r6, #1
   34054:	bge	34154 <__assert_fail@plt+0x21598>
   34058:	ldrb	r0, [r4, #24]
   3405c:	cmp	r0, #17
   34060:	bne	34078 <__assert_fail@plt+0x214bc>
   34064:	ldr	r2, [r4, #20]
   34068:	movw	r1, #21420	; 0x53ac
   3406c:	movt	r1, #3
   34070:	mov	r0, r4
   34074:	bl	32ef8 <__assert_fail@plt+0x2033c>
   34078:	mov	r3, #10
   3407c:	cmn	r9, #1
   34080:	movweq	r3, #11
   34084:	mov	r0, r5
   34088:	mov	r1, r4
   3408c:	mov	r2, #0
   34090:	bl	324c0 <__assert_fail@plt+0x1f904>
   34094:	cmp	r0, #0
   34098:	beq	341d8 <__assert_fail@plt+0x2161c>
   3409c:	mov	r7, r0
   340a0:	add	r0, r6, #2
   340a4:	cmp	r0, r9
   340a8:	ble	340d0 <__assert_fail@plt+0x21514>
   340ac:	cmp	r8, #0
   340b0:	beq	34134 <__assert_fail@plt+0x21578>
   340b4:	mov	r0, r5
   340b8:	mov	r1, r8
   340bc:	mov	r2, r7
   340c0:	mov	r3, #16
   340c4:	sub	sp, fp, #28
   340c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   340cc:	b	324c0 <__assert_fail@plt+0x1f904>
   340d0:	add	r6, r6, #1
   340d4:	mov	r0, r4
   340d8:	mov	r1, r5
   340dc:	bl	352d0 <__assert_fail@plt+0x22714>
   340e0:	mov	r4, r0
   340e4:	mov	r0, r5
   340e8:	mov	r1, r7
   340ec:	mov	r2, r4
   340f0:	mov	r3, #16
   340f4:	bl	324c0 <__assert_fail@plt+0x1f904>
   340f8:	cmp	r4, #0
   340fc:	movne	r1, r0
   34100:	cmpne	r0, #0
   34104:	beq	341d8 <__assert_fail@plt+0x2161c>
   34108:	mov	r0, r5
   3410c:	mov	r2, #0
   34110:	mov	r3, #10
   34114:	bl	324c0 <__assert_fail@plt+0x1f904>
   34118:	cmp	r0, #0
   3411c:	beq	341d8 <__assert_fail@plt+0x2161c>
   34120:	mov	r7, r0
   34124:	add	r6, r6, #1
   34128:	cmp	r6, r9
   3412c:	blt	340d4 <__assert_fail@plt+0x21518>
   34130:	b	340ac <__assert_fail@plt+0x214f0>
   34134:	mov	r4, r7
   34138:	b	341e8 <__assert_fail@plt+0x2162c>
   3413c:	movw	r1, #12144	; 0x2f70
   34140:	movt	r1, #3
   34144:	mov	r0, r4
   34148:	mov	r2, #0
   3414c:	bl	32ef8 <__assert_fail@plt+0x2033c>
   34150:	b	341e4 <__assert_fail@plt+0x21628>
   34154:	bne	34180 <__assert_fail@plt+0x215c4>
   34158:	mov	r8, r4
   3415c:	cmp	r6, r9
   34160:	beq	341d0 <__assert_fail@plt+0x21614>
   34164:	mov	r0, r4
   34168:	mov	r1, r5
   3416c:	bl	352d0 <__assert_fail@plt+0x22714>
   34170:	mov	r4, r0
   34174:	cmp	r0, #0
   34178:	bne	34058 <__assert_fail@plt+0x2149c>
   3417c:	b	341d8 <__assert_fail@plt+0x2161c>
   34180:	mov	r7, #1
   34184:	mov	r8, r4
   34188:	mov	r0, r4
   3418c:	mov	r1, r5
   34190:	bl	352d0 <__assert_fail@plt+0x22714>
   34194:	mov	r4, r0
   34198:	mov	r0, r5
   3419c:	mov	r1, r8
   341a0:	mov	r2, r4
   341a4:	mov	r3, #16
   341a8:	bl	324c0 <__assert_fail@plt+0x1f904>
   341ac:	cmp	r4, #0
   341b0:	movne	r8, r0
   341b4:	cmpne	r0, #0
   341b8:	beq	341d8 <__assert_fail@plt+0x2161c>
   341bc:	add	r7, r7, #1
   341c0:	cmp	r7, r6
   341c4:	blt	34188 <__assert_fail@plt+0x215cc>
   341c8:	cmp	r6, r9
   341cc:	bne	34164 <__assert_fail@plt+0x215a8>
   341d0:	mov	r4, r8
   341d4:	b	341e8 <__assert_fail@plt+0x2162c>
   341d8:	mov	r0, #12
   341dc:	ldr	r1, [sp, #16]
   341e0:	str	r0, [r1]
   341e4:	mov	r4, #0
   341e8:	mov	r0, r4
   341ec:	sub	sp, fp, #28
   341f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   341f4:	ldrb	r0, [r7, #4]
   341f8:	mov	r1, #10
   341fc:	cmp	r0, #2
   34200:	movweq	r1, #9
   34204:	ldr	r0, [sp, #16]
   34208:	str	r1, [r0]
   3420c:	b	341e4 <__assert_fail@plt+0x21628>
   34210:	mov	r0, #15
   34214:	b	341dc <__assert_fail@plt+0x21620>
   34218:	push	{r4, sl, fp, lr}
   3421c:	add	fp, sp, #8
   34220:	ldr	ip, [r1, #40]	; 0x28
   34224:	ldr	r3, [r1, #56]	; 0x38
   34228:	cmp	r3, ip
   3422c:	ble	342ac <__assert_fail@plt+0x216f0>
   34230:	ldr	r3, [r1, #4]
   34234:	ldrb	ip, [r3, ip]
   34238:	strb	ip, [r0]
   3423c:	ldr	r3, [r1, #80]	; 0x50
   34240:	cmp	r3, #2
   34244:	blt	34268 <__assert_fail@plt+0x216ac>
   34248:	ldr	lr, [r1, #28]
   3424c:	ldr	r4, [r1, #40]	; 0x28
   34250:	cmp	r4, lr
   34254:	beq	34268 <__assert_fail@plt+0x216ac>
   34258:	ldr	r3, [r1, #8]
   3425c:	ldr	r3, [r3, r4, lsl #2]
   34260:	cmn	r3, #1
   34264:	beq	34358 <__assert_fail@plt+0x2179c>
   34268:	tst	r2, #1
   3426c:	beq	342c0 <__assert_fail@plt+0x21704>
   34270:	cmp	ip, #92	; 0x5c
   34274:	bne	342c0 <__assert_fail@plt+0x21704>
   34278:	ldr	r2, [r1, #40]	; 0x28
   3427c:	ldr	r3, [r1, #48]	; 0x30
   34280:	add	r2, r2, #1
   34284:	cmp	r2, r3
   34288:	bge	34358 <__assert_fail@plt+0x2179c>
   3428c:	str	r2, [r1, #40]	; 0x28
   34290:	ldr	r1, [r1, #4]
   34294:	ldrb	r2, [r1, r2]
   34298:	mov	r1, #1
   3429c:	strb	r1, [r0, #4]
   342a0:	strb	r2, [r0]
   342a4:	mov	r0, r1
   342a8:	pop	{r4, sl, fp, pc}
   342ac:	mov	r1, #2
   342b0:	strb	r1, [r0, #4]
   342b4:	mov	r1, #0
   342b8:	mov	r0, r1
   342bc:	pop	{r4, sl, fp, pc}
   342c0:	cmp	ip, #92	; 0x5c
   342c4:	bgt	34318 <__assert_fail@plt+0x2175c>
   342c8:	cmp	ip, #45	; 0x2d
   342cc:	beq	34330 <__assert_fail@plt+0x21774>
   342d0:	cmp	ip, #91	; 0x5b
   342d4:	bne	34358 <__assert_fail@plt+0x2179c>
   342d8:	ldr	r3, [r1, #40]	; 0x28
   342dc:	ldr	r4, [r1, #48]	; 0x30
   342e0:	add	r3, r3, #1
   342e4:	cmp	r3, r4
   342e8:	bge	3434c <__assert_fail@plt+0x21790>
   342ec:	ldr	r1, [r1, #4]
   342f0:	ldrb	r1, [r1, r3]
   342f4:	strb	r1, [r0]
   342f8:	cmp	r1, #61	; 0x3d
   342fc:	beq	34368 <__assert_fail@plt+0x217ac>
   34300:	cmp	r1, #58	; 0x3a
   34304:	beq	34370 <__assert_fail@plt+0x217b4>
   34308:	cmp	r1, #46	; 0x2e
   3430c:	bne	34354 <__assert_fail@plt+0x21798>
   34310:	mov	r1, #26
   34314:	b	3437c <__assert_fail@plt+0x217c0>
   34318:	cmp	ip, #93	; 0x5d
   3431c:	beq	34338 <__assert_fail@plt+0x2177c>
   34320:	cmp	ip, #94	; 0x5e
   34324:	bne	34358 <__assert_fail@plt+0x2179c>
   34328:	mov	r1, #25
   3432c:	b	3433c <__assert_fail@plt+0x21780>
   34330:	mov	r1, #22
   34334:	b	3433c <__assert_fail@plt+0x21780>
   34338:	mov	r1, #21
   3433c:	strb	r1, [r0, #4]
   34340:	mov	r1, #1
   34344:	mov	r0, r1
   34348:	pop	{r4, sl, fp, pc}
   3434c:	mov	r1, #0
   34350:	strb	r1, [r0]
   34354:	strb	ip, [r0]
   34358:	mov	r1, #1
   3435c:	strb	r1, [r0, #4]
   34360:	mov	r0, r1
   34364:	pop	{r4, sl, fp, pc}
   34368:	mov	r1, #28
   3436c:	b	3437c <__assert_fail@plt+0x217c0>
   34370:	tst	r2, #4
   34374:	beq	34354 <__assert_fail@plt+0x21798>
   34378:	mov	r1, #30
   3437c:	strb	r1, [r0, #4]
   34380:	mov	r1, #2
   34384:	mov	r0, r1
   34388:	pop	{r4, sl, fp, pc}
   3438c:	asr	r2, r1, #31
   34390:	add	r2, r1, r2, lsr #27
   34394:	asr	r2, r2, #5
   34398:	ldr	ip, [r0, r2, lsl #2]
   3439c:	and	r1, r1, #31
   343a0:	mov	r3, #1
   343a4:	orr	r1, ip, r3, lsl r1
   343a8:	str	r1, [r0, r2, lsl #2]
   343ac:	bx	lr
   343b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   343b4:	add	fp, sp, #24
   343b8:	sub	sp, sp, #8
   343bc:	mov	r5, r3
   343c0:	mov	r8, r2
   343c4:	mov	r6, r1
   343c8:	mov	r9, r0
   343cc:	ldr	r7, [r1, #40]	; 0x28
   343d0:	mov	r0, r1
   343d4:	mov	r1, r7
   343d8:	bl	34ff8 <__assert_fail@plt+0x2243c>
   343dc:	cmp	r0, #2
   343e0:	blt	34418 <__assert_fail@plt+0x2185c>
   343e4:	mov	r4, r0
   343e8:	mov	r0, #1
   343ec:	str	r0, [r9]
   343f0:	mov	r0, r6
   343f4:	mov	r1, r7
   343f8:	bl	32d6c <__assert_fail@plt+0x201b0>
   343fc:	str	r0, [r9, #4]
   34400:	ldr	r0, [r6, #40]	; 0x28
   34404:	add	r0, r0, r4
   34408:	str	r0, [r6, #40]	; 0x28
   3440c:	mov	r0, #0
   34410:	sub	sp, fp, #24
   34414:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   34418:	ldr	r0, [fp, #12]
   3441c:	ldr	r2, [fp, #8]
   34420:	add	r1, r7, r5
   34424:	str	r1, [r6, #40]	; 0x28
   34428:	ldrb	r1, [r8, #4]
   3442c:	sub	r1, r1, #22
   34430:	cmp	r1, #8
   34434:	bhi	344a0 <__assert_fail@plt+0x218e4>
   34438:	add	r3, pc, #0
   3443c:	ldr	pc, [r3, r1, lsl #2]
   34440:	andeq	r4, r3, ip, ror r4
   34444:	andeq	r4, r3, r0, lsr #9
   34448:	andeq	r4, r3, r0, lsr #9
   3444c:	andeq	r4, r3, r0, lsr #9
   34450:	andeq	r4, r3, r4, ror #8
   34454:	andeq	r4, r3, r0, lsr #9
   34458:	andeq	r4, r3, r4, ror #8
   3445c:	andeq	r4, r3, r0, lsr #9
   34460:	andeq	r4, r3, r4, ror #8
   34464:	mov	r0, r9
   34468:	mov	r1, r6
   3446c:	mov	r2, r8
   34470:	sub	sp, fp, #24
   34474:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   34478:	b	35054 <__assert_fail@plt+0x22498>
   3447c:	cmp	r0, #0
   34480:	bne	344a0 <__assert_fail@plt+0x218e4>
   34484:	mov	r0, sp
   34488:	mov	r1, r6
   3448c:	bl	34218 <__assert_fail@plt+0x2165c>
   34490:	ldrb	r1, [sp, #4]
   34494:	mov	r0, #11
   34498:	cmp	r1, #21
   3449c:	bne	344b0 <__assert_fail@plt+0x218f4>
   344a0:	mov	r0, #0
   344a4:	str	r0, [r9]
   344a8:	ldrb	r1, [r8]
   344ac:	strb	r1, [r9, #4]
   344b0:	sub	sp, fp, #24
   344b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   344b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   344bc:	add	fp, sp, #28
   344c0:	sub	sp, sp, #12
   344c4:	mov	sl, r0
   344c8:	ldr	r7, [r3]
   344cc:	mov	r0, #11
   344d0:	cmp	r7, #2
   344d4:	cmpne	r7, #4
   344d8:	beq	344f0 <__assert_fail@plt+0x21934>
   344dc:	ldr	r8, [fp, #8]
   344e0:	ldr	r5, [r8]
   344e4:	cmp	r5, #2
   344e8:	cmpne	r5, #4
   344ec:	bne	344f8 <__assert_fail@plt+0x2193c>
   344f0:	sub	sp, fp, #28
   344f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   344f8:	mov	r6, r3
   344fc:	mov	r9, r2
   34500:	mov	r4, r1
   34504:	cmp	r7, #3
   34508:	bne	3451c <__assert_fail@plt+0x21960>
   3450c:	ldr	r0, [r6, #4]
   34510:	bl	1288c <strlen@plt>
   34514:	cmp	r0, #1
   34518:	bhi	34664 <__assert_fail@plt+0x21aa8>
   3451c:	cmp	r5, #3
   34520:	bne	34534 <__assert_fail@plt+0x21978>
   34524:	ldr	r0, [r8, #4]
   34528:	bl	1288c <strlen@plt>
   3452c:	cmp	r0, #1
   34530:	bhi	34664 <__assert_fail@plt+0x21aa8>
   34534:	cmp	r7, #3
   34538:	beq	3454c <__assert_fail@plt+0x21990>
   3453c:	mov	r0, #0
   34540:	cmp	r7, #0
   34544:	ldrbeq	r0, [r6, #4]
   34548:	b	34554 <__assert_fail@plt+0x21998>
   3454c:	ldr	r0, [r6, #4]
   34550:	ldrb	r0, [r0]
   34554:	stmib	sp, {r4, r9}
   34558:	cmp	r5, #3
   3455c:	beq	34570 <__assert_fail@plt+0x219b4>
   34560:	mov	r9, #0
   34564:	cmp	r5, #0
   34568:	ldrbeq	r9, [r8, #4]
   3456c:	b	34578 <__assert_fail@plt+0x219bc>
   34570:	ldr	r1, [r8, #4]
   34574:	ldrb	r9, [r1]
   34578:	ldr	r4, [fp, #12]
   3457c:	cmp	r7, #3
   34580:	cmpne	r7, #0
   34584:	bne	34598 <__assert_fail@plt+0x219dc>
   34588:	mov	r1, r4
   3458c:	bl	35218 <__assert_fail@plt+0x2265c>
   34590:	mov	r7, r0
   34594:	b	3459c <__assert_fail@plt+0x219e0>
   34598:	ldr	r7, [r6, #4]
   3459c:	ldr	r0, [r8]
   345a0:	cmp	r0, #3
   345a4:	cmpne	r0, #0
   345a8:	bne	345c0 <__assert_fail@plt+0x21a04>
   345ac:	mov	r0, r9
   345b0:	mov	r1, r4
   345b4:	bl	35218 <__assert_fail@plt+0x2265c>
   345b8:	mov	r6, r0
   345bc:	b	345c4 <__assert_fail@plt+0x21a08>
   345c0:	ldr	r6, [r8, #4]
   345c4:	ldr	r1, [sp, #8]
   345c8:	ldr	r5, [sp, #4]
   345cc:	mov	r0, #3
   345d0:	cmn	r7, #1
   345d4:	cmnne	r6, #1
   345d8:	beq	344f0 <__assert_fail@plt+0x21934>
   345dc:	ldr	r0, [fp, #16]
   345e0:	tst	r0, #65536	; 0x10000
   345e4:	beq	345f4 <__assert_fail@plt+0x21a38>
   345e8:	cmp	r7, r6
   345ec:	mov	r0, #11
   345f0:	bhi	344f0 <__assert_fail@plt+0x21934>
   345f4:	ldr	r0, [r4, #92]	; 0x5c
   345f8:	cmp	r0, #2
   345fc:	blt	34630 <__assert_fail@plt+0x21a74>
   34600:	ldr	r0, [r5, #32]
   34604:	ldr	r1, [r1]
   34608:	cmp	r1, r0
   3460c:	beq	34670 <__assert_fail@plt+0x21ab4>
   34610:	ldr	r0, [r5, #4]
   34614:	ldr	r1, [r5, #32]
   34618:	str	r7, [r0, r1, lsl #2]
   3461c:	ldr	r0, [r5, #8]
   34620:	ldr	r1, [r5, #32]
   34624:	add	r2, r1, #1
   34628:	str	r2, [r5, #32]
   3462c:	str	r6, [r0, r1, lsl #2]
   34630:	mov	r5, #0
   34634:	cmp	r7, r5
   34638:	cmpls	r5, r6
   3463c:	bhi	3464c <__assert_fail@plt+0x21a90>
   34640:	mov	r0, sl
   34644:	mov	r1, r5
   34648:	bl	3438c <__assert_fail@plt+0x217d0>
   3464c:	add	r5, r5, #1
   34650:	cmp	r5, #256	; 0x100
   34654:	bne	34634 <__assert_fail@plt+0x21a78>
   34658:	mov	r0, #0
   3465c:	sub	sp, fp, #28
   34660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34664:	mov	r0, #3
   34668:	sub	sp, fp, #28
   3466c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34670:	mov	r1, #1
   34674:	orr	r8, r1, r0, lsl #1
   34678:	lsl	r4, r8, #2
   3467c:	ldr	r0, [r5, #4]
   34680:	mov	r1, r4
   34684:	bl	2f804 <__assert_fail@plt+0x1cc48>
   34688:	mov	r9, r0
   3468c:	ldr	r0, [r5, #8]
   34690:	mov	r1, r4
   34694:	bl	2f804 <__assert_fail@plt+0x1cc48>
   34698:	mov	r4, r0
   3469c:	cmp	r9, #0
   346a0:	cmpne	r4, #0
   346a4:	bne	346c4 <__assert_fail@plt+0x21b08>
   346a8:	mov	r0, r9
   346ac:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   346b0:	mov	r0, r4
   346b4:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   346b8:	mov	r0, #12
   346bc:	sub	sp, fp, #28
   346c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   346c4:	ldr	r5, [sp, #4]
   346c8:	str	r9, [r5, #4]
   346cc:	str	r4, [r5, #8]
   346d0:	ldr	r0, [sp, #8]
   346d4:	str	r8, [r0]
   346d8:	b	34610 <__assert_fail@plt+0x21a54>
   346dc:	push	{r4, r5, fp, lr}
   346e0:	add	fp, sp, #8
   346e4:	mov	r5, r1
   346e8:	mov	r4, r0
   346ec:	mov	r0, r1
   346f0:	bl	1288c <strlen@plt>
   346f4:	cmp	r0, #1
   346f8:	movne	r0, #3
   346fc:	popne	{r4, r5, fp, pc}
   34700:	ldrb	r1, [r5]
   34704:	mov	r0, r4
   34708:	bl	3438c <__assert_fail@plt+0x217d0>
   3470c:	mov	r0, #0
   34710:	pop	{r4, r5, fp, pc}
   34714:	push	{r4, r5, fp, lr}
   34718:	add	fp, sp, #8
   3471c:	mov	r5, r1
   34720:	mov	r4, r0
   34724:	mov	r0, r1
   34728:	bl	1288c <strlen@plt>
   3472c:	cmp	r0, #1
   34730:	movne	r0, #3
   34734:	popne	{r4, r5, fp, pc}
   34738:	ldrb	r1, [r5]
   3473c:	mov	r0, r4
   34740:	bl	3438c <__assert_fail@plt+0x217d0>
   34744:	mov	r0, #0
   34748:	pop	{r4, r5, fp, pc}
   3474c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   34750:	add	fp, sp, #24
   34754:	mov	r5, r3
   34758:	mov	r7, r2
   3475c:	mov	r4, r1
   34760:	mov	r8, r0
   34764:	ldr	r6, [fp, #8]
   34768:	ldrb	r0, [fp, #14]
   3476c:	tst	r0, #64	; 0x40
   34770:	beq	347ac <__assert_fail@plt+0x21bf0>
   34774:	movw	r1, #19284	; 0x4b54
   34778:	movt	r1, #4
   3477c:	mov	r0, r6
   34780:	bl	124cc <strcmp@plt>
   34784:	cmp	r0, #0
   34788:	beq	347a4 <__assert_fail@plt+0x21be8>
   3478c:	movw	r1, #19290	; 0x4b5a
   34790:	movt	r1, #4
   34794:	mov	r0, r6
   34798:	bl	124cc <strcmp@plt>
   3479c:	cmp	r0, #0
   347a0:	bne	347ac <__assert_fail@plt+0x21bf0>
   347a4:	movw	r6, #19296	; 0x4b60
   347a8:	movt	r6, #4
   347ac:	ldr	r0, [r7, #36]	; 0x24
   347b0:	ldr	r1, [r5]
   347b4:	cmp	r1, r0
   347b8:	beq	34cc8 <__assert_fail@plt+0x2210c>
   347bc:	mov	r0, r6
   347c0:	bl	1246c <wctype@plt>
   347c4:	ldr	r1, [r7, #12]
   347c8:	ldr	r2, [r7, #36]	; 0x24
   347cc:	add	r3, r2, #1
   347d0:	str	r3, [r7, #36]	; 0x24
   347d4:	str	r0, [r1, r2, lsl #2]
   347d8:	movw	r1, #19270	; 0x4b46
   347dc:	movt	r1, #4
   347e0:	mov	r0, r6
   347e4:	bl	124cc <strcmp@plt>
   347e8:	cmp	r0, #0
   347ec:	beq	34950 <__assert_fail@plt+0x21d94>
   347f0:	movw	r1, #19302	; 0x4b66
   347f4:	movt	r1, #4
   347f8:	mov	r0, r6
   347fc:	bl	124cc <strcmp@plt>
   34800:	cmp	r0, #0
   34804:	beq	349a0 <__assert_fail@plt+0x21de4>
   34808:	movw	r1, #19290	; 0x4b5a
   3480c:	movt	r1, #4
   34810:	mov	r0, r6
   34814:	bl	124cc <strcmp@plt>
   34818:	cmp	r0, #0
   3481c:	beq	349f0 <__assert_fail@plt+0x21e34>
   34820:	movw	r1, #19278	; 0x4b4e
   34824:	movt	r1, #4
   34828:	mov	r0, r6
   3482c:	bl	124cc <strcmp@plt>
   34830:	cmp	r0, #0
   34834:	beq	34a44 <__assert_fail@plt+0x21e88>
   34838:	movw	r1, #19296	; 0x4b60
   3483c:	movt	r1, #4
   34840:	mov	r0, r6
   34844:	bl	124cc <strcmp@plt>
   34848:	cmp	r0, #0
   3484c:	beq	34a98 <__assert_fail@plt+0x21edc>
   34850:	movw	r1, #19327	; 0x4b7f
   34854:	movt	r1, #4
   34858:	mov	r0, r6
   3485c:	bl	124cc <strcmp@plt>
   34860:	cmp	r0, #0
   34864:	beq	34aec <__assert_fail@plt+0x21f30>
   34868:	movw	r1, #63496	; 0xf808
   3486c:	movt	r1, #3
   34870:	mov	r0, r6
   34874:	bl	124cc <strcmp@plt>
   34878:	cmp	r0, #0
   3487c:	beq	34b40 <__assert_fail@plt+0x21f84>
   34880:	movw	r1, #19284	; 0x4b54
   34884:	movt	r1, #4
   34888:	mov	r0, r6
   3488c:	bl	124cc <strcmp@plt>
   34890:	cmp	r0, #0
   34894:	beq	34b90 <__assert_fail@plt+0x21fd4>
   34898:	movw	r1, #19308	; 0x4b6c
   3489c:	movt	r1, #4
   348a0:	mov	r0, r6
   348a4:	bl	124cc <strcmp@plt>
   348a8:	cmp	r0, #0
   348ac:	beq	34be0 <__assert_fail@plt+0x22024>
   348b0:	movw	r1, #19314	; 0x4b72
   348b4:	movt	r1, #4
   348b8:	mov	r0, r6
   348bc:	bl	124cc <strcmp@plt>
   348c0:	cmp	r0, #0
   348c4:	beq	34c2c <__assert_fail@plt+0x22070>
   348c8:	movw	r1, #19320	; 0x4b78
   348cc:	movt	r1, #4
   348d0:	mov	r0, r6
   348d4:	bl	124cc <strcmp@plt>
   348d8:	cmp	r0, #0
   348dc:	beq	34c7c <__assert_fail@plt+0x220c0>
   348e0:	movw	r1, #19326	; 0x4b7e
   348e4:	movt	r1, #4
   348e8:	mov	r0, r6
   348ec:	bl	124cc <strcmp@plt>
   348f0:	mov	r1, r0
   348f4:	mov	r0, #4
   348f8:	cmp	r1, #0
   348fc:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   34900:	bl	12844 <__ctype_b_loc@plt>
   34904:	mov	r6, r0
   34908:	cmp	r8, #0
   3490c:	bne	34f04 <__assert_fail@plt+0x22348>
   34910:	mov	r7, #0
   34914:	mov	r5, #0
   34918:	ldr	r0, [r6]
   3491c:	add	r0, r0, r7
   34920:	ldrb	r0, [r0, #1]
   34924:	tst	r0, #16
   34928:	beq	34938 <__assert_fail@plt+0x21d7c>
   3492c:	mov	r0, r4
   34930:	mov	r1, r5
   34934:	bl	3438c <__assert_fail@plt+0x217d0>
   34938:	add	r7, r7, #2
   3493c:	add	r5, r5, #1
   34940:	mov	r0, #0
   34944:	cmp	r5, #256	; 0x100
   34948:	bne	34918 <__assert_fail@plt+0x21d5c>
   3494c:	b	34cc4 <__assert_fail@plt+0x22108>
   34950:	bl	12844 <__ctype_b_loc@plt>
   34954:	mov	r6, r0
   34958:	cmp	r8, #0
   3495c:	bne	34cf4 <__assert_fail@plt+0x22138>
   34960:	mov	r7, #0
   34964:	mov	r5, #0
   34968:	b	34980 <__assert_fail@plt+0x21dc4>
   3496c:	add	r7, r7, #2
   34970:	add	r5, r5, #1
   34974:	cmp	r5, #256	; 0x100
   34978:	moveq	r0, #0
   3497c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   34980:	ldr	r0, [r6]
   34984:	ldrb	r0, [r0, r7]
   34988:	tst	r0, #8
   3498c:	beq	3496c <__assert_fail@plt+0x21db0>
   34990:	mov	r0, r4
   34994:	mov	r1, r5
   34998:	bl	3438c <__assert_fail@plt+0x217d0>
   3499c:	b	3496c <__assert_fail@plt+0x21db0>
   349a0:	bl	12844 <__ctype_b_loc@plt>
   349a4:	mov	r6, r0
   349a8:	cmp	r8, #0
   349ac:	bne	34d2c <__assert_fail@plt+0x22170>
   349b0:	mov	r7, #0
   349b4:	mov	r5, #0
   349b8:	b	349d0 <__assert_fail@plt+0x21e14>
   349bc:	add	r7, r7, #2
   349c0:	add	r5, r5, #1
   349c4:	cmp	r5, #256	; 0x100
   349c8:	moveq	r0, #0
   349cc:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   349d0:	ldr	r0, [r6]
   349d4:	ldrb	r0, [r0, r7]
   349d8:	tst	r0, #2
   349dc:	beq	349bc <__assert_fail@plt+0x21e00>
   349e0:	mov	r0, r4
   349e4:	mov	r1, r5
   349e8:	bl	3438c <__assert_fail@plt+0x217d0>
   349ec:	b	349bc <__assert_fail@plt+0x21e00>
   349f0:	bl	12844 <__ctype_b_loc@plt>
   349f4:	mov	r6, r0
   349f8:	cmp	r8, #0
   349fc:	bne	34d64 <__assert_fail@plt+0x221a8>
   34a00:	mov	r7, #0
   34a04:	mov	r5, #0
   34a08:	b	34a20 <__assert_fail@plt+0x21e64>
   34a0c:	add	r7, r7, #2
   34a10:	add	r5, r5, #1
   34a14:	cmp	r5, #256	; 0x100
   34a18:	moveq	r0, #0
   34a1c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   34a20:	ldr	r0, [r6]
   34a24:	add	r0, r0, r7
   34a28:	ldrb	r0, [r0, #1]
   34a2c:	tst	r0, #2
   34a30:	beq	34a0c <__assert_fail@plt+0x21e50>
   34a34:	mov	r0, r4
   34a38:	mov	r1, r5
   34a3c:	bl	3438c <__assert_fail@plt+0x217d0>
   34a40:	b	34a0c <__assert_fail@plt+0x21e50>
   34a44:	bl	12844 <__ctype_b_loc@plt>
   34a48:	mov	r6, r0
   34a4c:	cmp	r8, #0
   34a50:	bne	34da0 <__assert_fail@plt+0x221e4>
   34a54:	mov	r7, #0
   34a58:	mov	r5, #0
   34a5c:	b	34a74 <__assert_fail@plt+0x21eb8>
   34a60:	add	r7, r7, #2
   34a64:	add	r5, r5, #1
   34a68:	cmp	r5, #256	; 0x100
   34a6c:	moveq	r0, #0
   34a70:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   34a74:	ldr	r0, [r6]
   34a78:	add	r0, r0, r7
   34a7c:	ldrb	r0, [r0, #1]
   34a80:	tst	r0, #32
   34a84:	beq	34a60 <__assert_fail@plt+0x21ea4>
   34a88:	mov	r0, r4
   34a8c:	mov	r1, r5
   34a90:	bl	3438c <__assert_fail@plt+0x217d0>
   34a94:	b	34a60 <__assert_fail@plt+0x21ea4>
   34a98:	bl	12844 <__ctype_b_loc@plt>
   34a9c:	mov	r6, r0
   34aa0:	cmp	r8, #0
   34aa4:	bne	34ddc <__assert_fail@plt+0x22220>
   34aa8:	mov	r7, #0
   34aac:	mov	r5, #0
   34ab0:	b	34ac8 <__assert_fail@plt+0x21f0c>
   34ab4:	add	r7, r7, #2
   34ab8:	add	r5, r5, #1
   34abc:	cmp	r5, #256	; 0x100
   34ac0:	moveq	r0, #0
   34ac4:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   34ac8:	ldr	r0, [r6]
   34acc:	add	r0, r0, r7
   34ad0:	ldrb	r0, [r0, #1]
   34ad4:	tst	r0, #4
   34ad8:	beq	34ab4 <__assert_fail@plt+0x21ef8>
   34adc:	mov	r0, r4
   34ae0:	mov	r1, r5
   34ae4:	bl	3438c <__assert_fail@plt+0x217d0>
   34ae8:	b	34ab4 <__assert_fail@plt+0x21ef8>
   34aec:	bl	12844 <__ctype_b_loc@plt>
   34af0:	mov	r6, r0
   34af4:	cmp	r8, #0
   34af8:	bne	34e18 <__assert_fail@plt+0x2225c>
   34afc:	mov	r7, #0
   34b00:	mov	r5, #0
   34b04:	b	34b1c <__assert_fail@plt+0x21f60>
   34b08:	add	r7, r7, #2
   34b0c:	add	r5, r5, #1
   34b10:	cmp	r5, #256	; 0x100
   34b14:	moveq	r0, #0
   34b18:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   34b1c:	ldr	r0, [r6]
   34b20:	add	r0, r0, r7
   34b24:	ldrb	r0, [r0, #1]
   34b28:	tst	r0, #8
   34b2c:	beq	34b08 <__assert_fail@plt+0x21f4c>
   34b30:	mov	r0, r4
   34b34:	mov	r1, r5
   34b38:	bl	3438c <__assert_fail@plt+0x217d0>
   34b3c:	b	34b08 <__assert_fail@plt+0x21f4c>
   34b40:	bl	12844 <__ctype_b_loc@plt>
   34b44:	mov	r6, r0
   34b48:	cmp	r8, #0
   34b4c:	bne	34e54 <__assert_fail@plt+0x22298>
   34b50:	mov	r7, #0
   34b54:	mov	r5, #0
   34b58:	ldr	r0, [r6]
   34b5c:	add	r0, r0, r7
   34b60:	ldrb	r0, [r0, #1]
   34b64:	tst	r0, #64	; 0x40
   34b68:	beq	34b78 <__assert_fail@plt+0x21fbc>
   34b6c:	mov	r0, r4
   34b70:	mov	r1, r5
   34b74:	bl	3438c <__assert_fail@plt+0x217d0>
   34b78:	add	r7, r7, #2
   34b7c:	add	r5, r5, #1
   34b80:	mov	r0, #0
   34b84:	cmp	r5, #256	; 0x100
   34b88:	bne	34b58 <__assert_fail@plt+0x21f9c>
   34b8c:	b	34cc4 <__assert_fail@plt+0x22108>
   34b90:	bl	12844 <__ctype_b_loc@plt>
   34b94:	mov	r6, r0
   34b98:	cmp	r8, #0
   34b9c:	bne	34e90 <__assert_fail@plt+0x222d4>
   34ba0:	mov	r7, #0
   34ba4:	mov	r5, #0
   34ba8:	ldr	r0, [r6]
   34bac:	add	r0, r0, r7
   34bb0:	ldrb	r0, [r0, #1]
   34bb4:	tst	r0, #1
   34bb8:	beq	34bc8 <__assert_fail@plt+0x2200c>
   34bbc:	mov	r0, r4
   34bc0:	mov	r1, r5
   34bc4:	bl	3438c <__assert_fail@plt+0x217d0>
   34bc8:	add	r7, r7, #2
   34bcc:	add	r5, r5, #1
   34bd0:	mov	r0, #0
   34bd4:	cmp	r5, #256	; 0x100
   34bd8:	bne	34ba8 <__assert_fail@plt+0x21fec>
   34bdc:	b	34cc4 <__assert_fail@plt+0x22108>
   34be0:	bl	12844 <__ctype_b_loc@plt>
   34be4:	mov	r6, r0
   34be8:	cmp	r8, #0
   34bec:	bne	34ecc <__assert_fail@plt+0x22310>
   34bf0:	mov	r7, #0
   34bf4:	mov	r5, #0
   34bf8:	ldr	r0, [r6]
   34bfc:	ldrb	r0, [r0, r7]
   34c00:	tst	r0, #1
   34c04:	beq	34c14 <__assert_fail@plt+0x22058>
   34c08:	mov	r0, r4
   34c0c:	mov	r1, r5
   34c10:	bl	3438c <__assert_fail@plt+0x217d0>
   34c14:	add	r7, r7, #2
   34c18:	add	r5, r5, #1
   34c1c:	mov	r0, #0
   34c20:	cmp	r5, #256	; 0x100
   34c24:	bne	34bf8 <__assert_fail@plt+0x2203c>
   34c28:	b	34cc4 <__assert_fail@plt+0x22108>
   34c2c:	bl	12844 <__ctype_b_loc@plt>
   34c30:	mov	r6, r0
   34c34:	cmp	r8, #0
   34c38:	bne	34f40 <__assert_fail@plt+0x22384>
   34c3c:	mov	r7, #0
   34c40:	mov	r5, #0
   34c44:	ldr	r0, [r6]
   34c48:	add	r0, r0, r7
   34c4c:	ldrsh	r0, [r0]
   34c50:	cmn	r0, #1
   34c54:	bgt	34c64 <__assert_fail@plt+0x220a8>
   34c58:	mov	r0, r4
   34c5c:	mov	r1, r5
   34c60:	bl	3438c <__assert_fail@plt+0x217d0>
   34c64:	add	r7, r7, #2
   34c68:	add	r5, r5, #1
   34c6c:	mov	r0, #0
   34c70:	cmp	r5, #256	; 0x100
   34c74:	bne	34c44 <__assert_fail@plt+0x22088>
   34c78:	b	34cc4 <__assert_fail@plt+0x22108>
   34c7c:	bl	12844 <__ctype_b_loc@plt>
   34c80:	mov	r6, r0
   34c84:	cmp	r8, #0
   34c88:	bne	34f7c <__assert_fail@plt+0x223c0>
   34c8c:	mov	r7, #0
   34c90:	mov	r5, #0
   34c94:	ldr	r0, [r6]
   34c98:	ldrb	r0, [r0, r7]
   34c9c:	tst	r0, #4
   34ca0:	beq	34cb0 <__assert_fail@plt+0x220f4>
   34ca4:	mov	r0, r4
   34ca8:	mov	r1, r5
   34cac:	bl	3438c <__assert_fail@plt+0x217d0>
   34cb0:	add	r7, r7, #2
   34cb4:	add	r5, r5, #1
   34cb8:	mov	r0, #0
   34cbc:	cmp	r5, #256	; 0x100
   34cc0:	bne	34c94 <__assert_fail@plt+0x220d8>
   34cc4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   34cc8:	mov	r1, #1
   34ccc:	orr	r9, r1, r0, lsl #1
   34cd0:	lsl	r1, r9, #2
   34cd4:	ldr	r0, [r7, #12]
   34cd8:	bl	2f804 <__assert_fail@plt+0x1cc48>
   34cdc:	cmp	r0, #0
   34ce0:	moveq	r0, #12
   34ce4:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   34ce8:	str	r0, [r7, #12]
   34cec:	str	r9, [r5]
   34cf0:	b	347bc <__assert_fail@plt+0x21c00>
   34cf4:	mov	r5, #0
   34cf8:	ldr	r0, [r6]
   34cfc:	ldrb	r0, [r0, r5]
   34d00:	tst	r0, #8
   34d04:	beq	34d14 <__assert_fail@plt+0x22158>
   34d08:	ldrb	r1, [r8]
   34d0c:	mov	r0, r4
   34d10:	bl	3438c <__assert_fail@plt+0x217d0>
   34d14:	add	r8, r8, #1
   34d18:	add	r5, r5, #2
   34d1c:	mov	r0, #0
   34d20:	cmp	r5, #512	; 0x200
   34d24:	bne	34cf8 <__assert_fail@plt+0x2213c>
   34d28:	b	34cc4 <__assert_fail@plt+0x22108>
   34d2c:	mov	r5, #0
   34d30:	ldr	r0, [r6]
   34d34:	ldrb	r0, [r0, r5]
   34d38:	tst	r0, #2
   34d3c:	beq	34d4c <__assert_fail@plt+0x22190>
   34d40:	ldrb	r1, [r8]
   34d44:	mov	r0, r4
   34d48:	bl	3438c <__assert_fail@plt+0x217d0>
   34d4c:	add	r8, r8, #1
   34d50:	add	r5, r5, #2
   34d54:	mov	r0, #0
   34d58:	cmp	r5, #512	; 0x200
   34d5c:	bne	34d30 <__assert_fail@plt+0x22174>
   34d60:	b	34cc4 <__assert_fail@plt+0x22108>
   34d64:	mov	r5, #0
   34d68:	ldr	r0, [r6]
   34d6c:	add	r0, r0, r5
   34d70:	ldrb	r0, [r0, #1]
   34d74:	tst	r0, #2
   34d78:	beq	34d88 <__assert_fail@plt+0x221cc>
   34d7c:	ldrb	r1, [r8]
   34d80:	mov	r0, r4
   34d84:	bl	3438c <__assert_fail@plt+0x217d0>
   34d88:	add	r8, r8, #1
   34d8c:	add	r5, r5, #2
   34d90:	mov	r0, #0
   34d94:	cmp	r5, #512	; 0x200
   34d98:	bne	34d68 <__assert_fail@plt+0x221ac>
   34d9c:	b	34cc4 <__assert_fail@plt+0x22108>
   34da0:	mov	r5, #0
   34da4:	ldr	r0, [r6]
   34da8:	add	r0, r0, r5
   34dac:	ldrb	r0, [r0, #1]
   34db0:	tst	r0, #32
   34db4:	beq	34dc4 <__assert_fail@plt+0x22208>
   34db8:	ldrb	r1, [r8]
   34dbc:	mov	r0, r4
   34dc0:	bl	3438c <__assert_fail@plt+0x217d0>
   34dc4:	add	r8, r8, #1
   34dc8:	add	r5, r5, #2
   34dcc:	mov	r0, #0
   34dd0:	cmp	r5, #512	; 0x200
   34dd4:	bne	34da4 <__assert_fail@plt+0x221e8>
   34dd8:	b	34cc4 <__assert_fail@plt+0x22108>
   34ddc:	mov	r5, #0
   34de0:	ldr	r0, [r6]
   34de4:	add	r0, r0, r5
   34de8:	ldrb	r0, [r0, #1]
   34dec:	tst	r0, #4
   34df0:	beq	34e00 <__assert_fail@plt+0x22244>
   34df4:	ldrb	r1, [r8]
   34df8:	mov	r0, r4
   34dfc:	bl	3438c <__assert_fail@plt+0x217d0>
   34e00:	add	r8, r8, #1
   34e04:	add	r5, r5, #2
   34e08:	mov	r0, #0
   34e0c:	cmp	r5, #512	; 0x200
   34e10:	bne	34de0 <__assert_fail@plt+0x22224>
   34e14:	b	34cc4 <__assert_fail@plt+0x22108>
   34e18:	mov	r5, #0
   34e1c:	ldr	r0, [r6]
   34e20:	add	r0, r0, r5
   34e24:	ldrb	r0, [r0, #1]
   34e28:	tst	r0, #8
   34e2c:	beq	34e3c <__assert_fail@plt+0x22280>
   34e30:	ldrb	r1, [r8]
   34e34:	mov	r0, r4
   34e38:	bl	3438c <__assert_fail@plt+0x217d0>
   34e3c:	add	r8, r8, #1
   34e40:	add	r5, r5, #2
   34e44:	mov	r0, #0
   34e48:	cmp	r5, #512	; 0x200
   34e4c:	bne	34e1c <__assert_fail@plt+0x22260>
   34e50:	b	34cc4 <__assert_fail@plt+0x22108>
   34e54:	mov	r5, #0
   34e58:	ldr	r0, [r6]
   34e5c:	add	r0, r0, r5
   34e60:	ldrb	r0, [r0, #1]
   34e64:	tst	r0, #64	; 0x40
   34e68:	beq	34e78 <__assert_fail@plt+0x222bc>
   34e6c:	ldrb	r1, [r8]
   34e70:	mov	r0, r4
   34e74:	bl	3438c <__assert_fail@plt+0x217d0>
   34e78:	add	r8, r8, #1
   34e7c:	add	r5, r5, #2
   34e80:	mov	r0, #0
   34e84:	cmp	r5, #512	; 0x200
   34e88:	bne	34e58 <__assert_fail@plt+0x2229c>
   34e8c:	b	34cc4 <__assert_fail@plt+0x22108>
   34e90:	mov	r5, #0
   34e94:	ldr	r0, [r6]
   34e98:	add	r0, r0, r5
   34e9c:	ldrb	r0, [r0, #1]
   34ea0:	tst	r0, #1
   34ea4:	beq	34eb4 <__assert_fail@plt+0x222f8>
   34ea8:	ldrb	r1, [r8]
   34eac:	mov	r0, r4
   34eb0:	bl	3438c <__assert_fail@plt+0x217d0>
   34eb4:	add	r8, r8, #1
   34eb8:	add	r5, r5, #2
   34ebc:	mov	r0, #0
   34ec0:	cmp	r5, #512	; 0x200
   34ec4:	bne	34e94 <__assert_fail@plt+0x222d8>
   34ec8:	b	34cc4 <__assert_fail@plt+0x22108>
   34ecc:	mov	r5, #0
   34ed0:	ldr	r0, [r6]
   34ed4:	ldrb	r0, [r0, r5]
   34ed8:	tst	r0, #1
   34edc:	beq	34eec <__assert_fail@plt+0x22330>
   34ee0:	ldrb	r1, [r8]
   34ee4:	mov	r0, r4
   34ee8:	bl	3438c <__assert_fail@plt+0x217d0>
   34eec:	add	r8, r8, #1
   34ef0:	add	r5, r5, #2
   34ef4:	mov	r0, #0
   34ef8:	cmp	r5, #512	; 0x200
   34efc:	bne	34ed0 <__assert_fail@plt+0x22314>
   34f00:	b	34cc4 <__assert_fail@plt+0x22108>
   34f04:	mov	r5, #0
   34f08:	ldr	r0, [r6]
   34f0c:	add	r0, r0, r5
   34f10:	ldrb	r0, [r0, #1]
   34f14:	tst	r0, #16
   34f18:	beq	34f28 <__assert_fail@plt+0x2236c>
   34f1c:	ldrb	r1, [r8]
   34f20:	mov	r0, r4
   34f24:	bl	3438c <__assert_fail@plt+0x217d0>
   34f28:	add	r8, r8, #1
   34f2c:	add	r5, r5, #2
   34f30:	mov	r0, #0
   34f34:	cmp	r5, #512	; 0x200
   34f38:	bne	34f08 <__assert_fail@plt+0x2234c>
   34f3c:	b	34cc4 <__assert_fail@plt+0x22108>
   34f40:	mov	r5, #0
   34f44:	ldr	r0, [r6]
   34f48:	add	r0, r0, r5
   34f4c:	ldrsh	r0, [r0]
   34f50:	cmn	r0, #1
   34f54:	bgt	34f64 <__assert_fail@plt+0x223a8>
   34f58:	ldrb	r1, [r8]
   34f5c:	mov	r0, r4
   34f60:	bl	3438c <__assert_fail@plt+0x217d0>
   34f64:	add	r8, r8, #1
   34f68:	add	r5, r5, #2
   34f6c:	mov	r0, #0
   34f70:	cmp	r5, #512	; 0x200
   34f74:	bne	34f44 <__assert_fail@plt+0x22388>
   34f78:	b	34cc4 <__assert_fail@plt+0x22108>
   34f7c:	mov	r5, #0
   34f80:	ldr	r0, [r6]
   34f84:	ldrb	r0, [r0, r5]
   34f88:	tst	r0, #4
   34f8c:	beq	34f9c <__assert_fail@plt+0x223e0>
   34f90:	ldrb	r1, [r8]
   34f94:	mov	r0, r4
   34f98:	bl	3438c <__assert_fail@plt+0x217d0>
   34f9c:	add	r8, r8, #1
   34fa0:	add	r5, r5, #2
   34fa4:	mov	r0, #0
   34fa8:	cmp	r5, #512	; 0x200
   34fac:	bne	34f80 <__assert_fail@plt+0x223c4>
   34fb0:	b	34cc4 <__assert_fail@plt+0x22108>
   34fb4:	mov	r1, #0
   34fb8:	ldr	r2, [r0, r1, lsl #2]
   34fbc:	mvn	r2, r2
   34fc0:	str	r2, [r0, r1, lsl #2]
   34fc4:	add	r1, r1, #1
   34fc8:	cmp	r1, #8
   34fcc:	bne	34fb8 <__assert_fail@plt+0x223fc>
   34fd0:	bx	lr
   34fd4:	mov	r2, #0
   34fd8:	ldr	ip, [r1, r2, lsl #2]
   34fdc:	ldr	r3, [r0, r2, lsl #2]
   34fe0:	and	r3, r3, ip
   34fe4:	str	r3, [r0, r2, lsl #2]
   34fe8:	add	r2, r2, #1
   34fec:	cmp	r2, #8
   34ff0:	bne	34fd8 <__assert_fail@plt+0x2241c>
   34ff4:	bx	lr
   34ff8:	push	{fp, lr}
   34ffc:	mov	fp, sp
   35000:	mov	lr, r0
   35004:	ldr	r3, [r0, #80]	; 0x50
   35008:	mov	r0, #1
   3500c:	cmp	r3, #1
   35010:	beq	35050 <__assert_fail@plt+0x22494>
   35014:	ldr	ip, [lr, #28]
   35018:	add	r3, r1, #1
   3501c:	cmp	r3, ip
   35020:	bge	35050 <__assert_fail@plt+0x22494>
   35024:	ldr	r0, [lr, #8]
   35028:	add	ip, r0, r1, lsl #2
   3502c:	mov	r0, #1
   35030:	ldr	r3, [ip, r0, lsl #2]
   35034:	cmn	r3, #1
   35038:	popne	{fp, pc}
   3503c:	add	r0, r0, #1
   35040:	add	r3, r1, r0
   35044:	ldr	r2, [lr, #28]
   35048:	cmp	r3, r2
   3504c:	blt	35030 <__assert_fail@plt+0x22474>
   35050:	pop	{fp, pc}
   35054:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   35058:	add	fp, sp, #24
   3505c:	mov	r7, r1
   35060:	mov	r9, r0
   35064:	ldr	r0, [r1, #40]	; 0x28
   35068:	ldr	r1, [r1, #56]	; 0x38
   3506c:	mov	r8, #7
   35070:	cmp	r1, r0
   35074:	ble	3513c <__assert_fail@plt+0x22580>
   35078:	mov	r6, r2
   3507c:	ldrb	r5, [r2]
   35080:	mov	r4, #0
   35084:	ldrb	r0, [r6, #4]
   35088:	cmp	r0, #30
   3508c:	bne	3509c <__assert_fail@plt+0x224e0>
   35090:	mov	r0, r7
   35094:	bl	35144 <__assert_fail@plt+0x22588>
   35098:	b	350b0 <__assert_fail@plt+0x224f4>
   3509c:	ldr	r0, [r7, #4]
   350a0:	ldr	r1, [r7, #40]	; 0x28
   350a4:	add	r2, r1, #1
   350a8:	str	r2, [r7, #40]	; 0x28
   350ac:	ldrb	r0, [r0, r1]
   350b0:	ldr	r1, [r7, #40]	; 0x28
   350b4:	ldr	r2, [r7, #56]	; 0x38
   350b8:	cmp	r2, r1
   350bc:	ble	3513c <__assert_fail@plt+0x22580>
   350c0:	cmp	r0, r5
   350c4:	bne	350d8 <__assert_fail@plt+0x2251c>
   350c8:	ldr	r2, [r7, #4]
   350cc:	ldrb	r2, [r2, r1]
   350d0:	cmp	r2, #93	; 0x5d
   350d4:	beq	350f4 <__assert_fail@plt+0x22538>
   350d8:	ldr	r1, [r9, #4]
   350dc:	strb	r0, [r1, r4]
   350e0:	add	r0, r4, #1
   350e4:	cmp	r4, #30
   350e8:	mov	r4, r0
   350ec:	bls	35084 <__assert_fail@plt+0x224c8>
   350f0:	b	3513c <__assert_fail@plt+0x22580>
   350f4:	add	r0, r1, #1
   350f8:	str	r0, [r7, #40]	; 0x28
   350fc:	ldr	r0, [r9, #4]
   35100:	mov	r8, #0
   35104:	strb	r8, [r0, r4]
   35108:	ldrb	r0, [r6, #4]
   3510c:	cmp	r0, #30
   35110:	beq	3512c <__assert_fail@plt+0x22570>
   35114:	cmp	r0, #28
   35118:	beq	35134 <__assert_fail@plt+0x22578>
   3511c:	cmp	r0, #26
   35120:	bne	3513c <__assert_fail@plt+0x22580>
   35124:	mov	r0, #3
   35128:	b	35138 <__assert_fail@plt+0x2257c>
   3512c:	mov	r0, #4
   35130:	b	35138 <__assert_fail@plt+0x2257c>
   35134:	mov	r0, #2
   35138:	str	r0, [r9]
   3513c:	mov	r0, r8
   35140:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   35144:	push	{r4, r5, r6, sl, fp, lr}
   35148:	add	fp, sp, #16
   3514c:	mov	r4, r0
   35150:	ldrb	r0, [r0, #75]	; 0x4b
   35154:	cmp	r0, #0
   35158:	bne	35178 <__assert_fail@plt+0x225bc>
   3515c:	ldr	r0, [r4, #4]
   35160:	ldr	r1, [r4, #40]	; 0x28
   35164:	add	r2, r1, #1
   35168:	str	r2, [r4, #40]	; 0x28
   3516c:	ldrb	r6, [r0, r1]
   35170:	uxtb	r0, r6
   35174:	pop	{r4, r5, r6, sl, fp, pc}
   35178:	ldrb	r0, [r4, #76]	; 0x4c
   3517c:	cmp	r0, #0
   35180:	beq	351e4 <__assert_fail@plt+0x22628>
   35184:	ldr	r0, [r4, #28]
   35188:	ldr	r5, [r4, #40]	; 0x28
   3518c:	cmp	r5, r0
   35190:	beq	351a4 <__assert_fail@plt+0x225e8>
   35194:	ldr	r0, [r4, #8]
   35198:	ldr	r0, [r0, r5, lsl #2]
   3519c:	cmn	r0, #1
   351a0:	beq	35200 <__assert_fail@plt+0x22644>
   351a4:	ldr	r0, [r4]
   351a8:	ldr	r1, [r4, #12]
   351ac:	ldr	r2, [r4, #24]
   351b0:	ldr	r1, [r1, r5, lsl #2]
   351b4:	add	r1, r2, r1
   351b8:	add	r0, r0, r1
   351bc:	ldrsb	r6, [r0]
   351c0:	cmn	r6, #1
   351c4:	ble	35200 <__assert_fail@plt+0x22644>
   351c8:	mov	r0, r4
   351cc:	mov	r1, r5
   351d0:	bl	34ff8 <__assert_fail@plt+0x2243c>
   351d4:	add	r0, r0, r5
   351d8:	str	r0, [r4, #40]	; 0x28
   351dc:	uxtb	r0, r6
   351e0:	pop	{r4, r5, r6, sl, fp, pc}
   351e4:	ldr	r0, [r4]
   351e8:	ldr	r1, [r4, #24]
   351ec:	ldr	r2, [r4, #40]	; 0x28
   351f0:	add	r3, r2, #1
   351f4:	str	r3, [r4, #40]	; 0x28
   351f8:	add	r1, r2, r1
   351fc:	b	3516c <__assert_fail@plt+0x225b0>
   35200:	add	r0, r5, #1
   35204:	str	r0, [r4, #40]	; 0x28
   35208:	ldr	r0, [r4, #4]
   3520c:	ldrb	r6, [r0, r5]
   35210:	uxtb	r0, r6
   35214:	pop	{r4, r5, r6, sl, fp, pc}
   35218:	ldr	r1, [r1, #92]	; 0x5c
   3521c:	cmp	r1, #2
   35220:	bxlt	lr
   35224:	b	12940 <btowc@plt>
   35228:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3522c:	add	fp, sp, #24
   35230:	mov	r4, r2
   35234:	mov	r5, r1
   35238:	mov	r6, r0
   3523c:	mvn	r0, #0
   35240:	movw	r8, #32816	; 0x8030
   35244:	b	3525c <__assert_fail@plt+0x226a0>
   35248:	add	r0, r7, r7, lsl #2
   3524c:	add	r1, r1, r0, lsl #1
   35250:	sub	r0, r1, #48	; 0x30
   35254:	cmp	r1, r8
   35258:	movwgt	r0, #32768	; 0x8000
   3525c:	mov	r7, r0
   35260:	mov	r0, r5
   35264:	mov	r1, r6
   35268:	mov	r2, r4
   3526c:	bl	32334 <__assert_fail@plt+0x1f778>
   35270:	ldrb	r2, [r5, #4]
   35274:	cmp	r2, #24
   35278:	beq	352c8 <__assert_fail@plt+0x2270c>
   3527c:	cmp	r2, #2
   35280:	beq	352c4 <__assert_fail@plt+0x22708>
   35284:	ldrb	r1, [r5]
   35288:	cmp	r1, #44	; 0x2c
   3528c:	beq	352c8 <__assert_fail@plt+0x2270c>
   35290:	mvn	r0, #1
   35294:	cmp	r1, #48	; 0x30
   35298:	bcc	3525c <__assert_fail@plt+0x226a0>
   3529c:	cmp	r2, #1
   352a0:	bne	3525c <__assert_fail@plt+0x226a0>
   352a4:	cmn	r7, #2
   352a8:	beq	3525c <__assert_fail@plt+0x226a0>
   352ac:	cmp	r1, #57	; 0x39
   352b0:	bhi	3525c <__assert_fail@plt+0x226a0>
   352b4:	cmn	r7, #1
   352b8:	bne	35248 <__assert_fail@plt+0x2268c>
   352bc:	sub	r0, r1, #48	; 0x30
   352c0:	b	3525c <__assert_fail@plt+0x226a0>
   352c4:	mvn	r7, #1
   352c8:	mov	r0, r7
   352cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   352d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   352d4:	add	fp, sp, #24
   352d8:	sub	sp, sp, #8
   352dc:	mov	r8, r1
   352e0:	mov	r5, r0
   352e4:	mov	r3, r0
   352e8:	ldr	r7, [r3], #20
   352ec:	mov	r6, #0
   352f0:	mov	r0, r1
   352f4:	mov	r1, #0
   352f8:	mov	r2, #0
   352fc:	bl	33538 <__assert_fail@plt+0x2097c>
   35300:	str	r0, [sp, #4]
   35304:	cmp	r0, #0
   35308:	beq	353a0 <__assert_fail@plt+0x227e4>
   3530c:	add	r4, sp, #4
   35310:	mov	r6, #0
   35314:	str	r7, [r0]
   35318:	ldr	r0, [r4]
   3531c:	ldr	r1, [r0, #24]
   35320:	orr	r1, r1, #262144	; 0x40000
   35324:	str	r1, [r0, #24]
   35328:	ldr	r0, [r5, #4]
   3532c:	ldr	r7, [r4]
   35330:	cmp	r0, #0
   35334:	beq	35344 <__assert_fail@plt+0x22788>
   35338:	add	r4, r7, #4
   3533c:	mov	r5, r0
   35340:	b	35378 <__assert_fail@plt+0x227bc>
   35344:	mov	r1, #0
   35348:	mov	r0, r5
   3534c:	ldr	r5, [r5, #8]
   35350:	cmp	r5, r1
   35354:	cmpne	r5, #0
   35358:	bne	35374 <__assert_fail@plt+0x227b8>
   3535c:	ldr	r7, [r7]
   35360:	ldr	r5, [r0]
   35364:	cmp	r5, #0
   35368:	mov	r1, r0
   3536c:	bne	35348 <__assert_fail@plt+0x2278c>
   35370:	b	3539c <__assert_fail@plt+0x227e0>
   35374:	add	r4, r7, #8
   35378:	add	r3, r5, #20
   3537c:	mov	r0, r8
   35380:	mov	r1, #0
   35384:	mov	r2, #0
   35388:	bl	33538 <__assert_fail@plt+0x2097c>
   3538c:	str	r0, [r4]
   35390:	cmp	r0, #0
   35394:	bne	35314 <__assert_fail@plt+0x22758>
   35398:	b	353a0 <__assert_fail@plt+0x227e4>
   3539c:	ldr	r6, [sp, #4]
   353a0:	mov	r0, r6
   353a4:	sub	sp, fp, #24
   353a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   353ac:	ldr	r2, [r1, #24]
   353b0:	uxtb	r3, r2
   353b4:	cmp	r3, #17
   353b8:	ldreq	r3, [r1, #20]
   353bc:	cmpeq	r3, r0
   353c0:	orreq	r0, r2, #524288	; 0x80000
   353c4:	streq	r0, [r1, #24]
   353c8:	mov	r0, #0
   353cc:	bx	lr
   353d0:	push	{r4, r5, r6, r7, fp, lr}
   353d4:	add	fp, sp, #16
   353d8:	mov	r4, r2
   353dc:	mov	r5, r1
   353e0:	mov	r6, r0
   353e4:	mov	r0, r2
   353e8:	mov	r1, r6
   353ec:	blx	r5
   353f0:	cmp	r0, #0
   353f4:	popne	{r4, r5, r6, r7, fp, pc}
   353f8:	ldr	r7, [r6, #4]
   353fc:	cmp	r7, #0
   35400:	bne	35434 <__assert_fail@plt+0x22878>
   35404:	mov	r1, #0
   35408:	b	35420 <__assert_fail@plt+0x22864>
   3540c:	ldr	r6, [r0]
   35410:	cmp	r6, #0
   35414:	mov	r1, r0
   35418:	moveq	r0, #0
   3541c:	popeq	{r4, r5, r6, r7, fp, pc}
   35420:	mov	r0, r6
   35424:	ldr	r7, [r6, #8]
   35428:	cmp	r7, r1
   3542c:	cmpne	r7, #0
   35430:	beq	3540c <__assert_fail@plt+0x22850>
   35434:	mov	r0, r4
   35438:	mov	r1, r7
   3543c:	blx	r5
   35440:	cmp	r0, #0
   35444:	mov	r6, r7
   35448:	beq	353f8 <__assert_fail@plt+0x2283c>
   3544c:	pop	{r4, r5, r6, r7, fp, pc}
   35450:	ldrb	r2, [r1, #24]
   35454:	cmp	r2, #17
   35458:	beq	3548c <__assert_fail@plt+0x228d0>
   3545c:	cmp	r2, #4
   35460:	bne	354e0 <__assert_fail@plt+0x22924>
   35464:	ldr	r2, [r0, #132]	; 0x84
   35468:	cmp	r2, #0
   3546c:	beq	354e0 <__assert_fail@plt+0x22924>
   35470:	ldr	r3, [r1, #20]
   35474:	ldr	r2, [r2, r3, lsl #2]
   35478:	str	r2, [r1, #20]
   3547c:	ldr	r1, [r0, #80]	; 0x50
   35480:	mov	r3, #1
   35484:	orr	r1, r1, r3, lsl r2
   35488:	b	354dc <__assert_fail@plt+0x22920>
   3548c:	ldr	r2, [r1, #4]
   35490:	cmp	r2, #0
   35494:	beq	354e0 <__assert_fail@plt+0x22924>
   35498:	ldrb	r3, [r2, #24]
   3549c:	cmp	r3, #17
   354a0:	bne	354e0 <__assert_fail@plt+0x22924>
   354a4:	ldr	r3, [r2, #4]
   354a8:	ldr	r2, [r2, #20]
   354ac:	str	r3, [r1, #4]
   354b0:	cmp	r3, #0
   354b4:	strne	r1, [r3]
   354b8:	ldr	r1, [r1, #20]
   354bc:	ldr	r3, [r0, #132]	; 0x84
   354c0:	ldr	r1, [r3, r1, lsl #2]
   354c4:	str	r1, [r3, r2, lsl #2]
   354c8:	cmp	r2, #31
   354cc:	bgt	354e0 <__assert_fail@plt+0x22924>
   354d0:	ldr	r1, [r0, #80]	; 0x50
   354d4:	mov	r3, #1
   354d8:	bic	r1, r1, r3, lsl r2
   354dc:	str	r1, [r0, #80]	; 0x50
   354e0:	mov	r0, #0
   354e4:	bx	lr
   354e8:	push	{r4, r5, fp, lr}
   354ec:	add	fp, sp, #8
   354f0:	sub	sp, sp, #8
   354f4:	mov	r4, r1
   354f8:	mov	r5, r0
   354fc:	mov	r0, #0
   35500:	str	r0, [sp, #4]
   35504:	ldr	r2, [r1, #4]
   35508:	cmp	r2, #0
   3550c:	beq	35534 <__assert_fail@plt+0x22978>
   35510:	ldrb	r0, [r2, #24]
   35514:	cmp	r0, #17
   35518:	bne	35534 <__assert_fail@plt+0x22978>
   3551c:	add	r0, sp, #4
   35520:	mov	r1, r5
   35524:	bl	358f8 <__assert_fail@plt+0x22d3c>
   35528:	str	r0, [r4, #4]
   3552c:	cmp	r0, #0
   35530:	strne	r4, [r0]
   35534:	ldr	r2, [r4, #8]
   35538:	cmp	r2, #0
   3553c:	beq	35564 <__assert_fail@plt+0x229a8>
   35540:	ldrb	r0, [r2, #24]
   35544:	cmp	r0, #17
   35548:	bne	35564 <__assert_fail@plt+0x229a8>
   3554c:	add	r0, sp, #4
   35550:	mov	r1, r5
   35554:	bl	358f8 <__assert_fail@plt+0x22d3c>
   35558:	str	r0, [r4, #8]
   3555c:	cmp	r0, #0
   35560:	strne	r4, [r0]
   35564:	ldr	r0, [sp, #4]
   35568:	sub	sp, fp, #8
   3556c:	pop	{r4, r5, fp, pc}
   35570:	push	{r4, r5, fp, lr}
   35574:	add	fp, sp, #8
   35578:	mov	r4, r1
   3557c:	mov	r5, r0
   35580:	ldr	r2, [r1, #24]
   35584:	uxtb	r0, r2
   35588:	cmp	r0, #16
   3558c:	bne	355ac <__assert_fail@plt+0x229f0>
   35590:	ldr	r0, [r4, #4]
   35594:	ldr	r1, [r0, #12]
   35598:	str	r1, [r4, #12]
   3559c:	ldr	r0, [r0, #28]
   355a0:	str	r0, [r4, #28]
   355a4:	mov	r0, #0
   355a8:	pop	{r4, r5, fp, pc}
   355ac:	str	r4, [r4, #12]
   355b0:	ldr	r1, [r4, #20]
   355b4:	mov	r0, r5
   355b8:	bl	35a14 <__assert_fail@plt+0x22e58>
   355bc:	str	r0, [r4, #28]
   355c0:	cmn	r0, #1
   355c4:	moveq	r0, #12
   355c8:	popeq	{r4, r5, fp, pc}
   355cc:	mov	r1, r0
   355d0:	ldrb	r2, [r4, #24]
   355d4:	mov	r0, #0
   355d8:	cmp	r2, #12
   355dc:	popne	{r4, r5, fp, pc}
   355e0:	ldr	r2, [r5]
   355e4:	add	r1, r2, r1, lsl #3
   355e8:	ldr	r2, [r1, #4]
   355ec:	ldr	r3, [r4, #20]
   355f0:	bfi	r2, r3, #8, #10
   355f4:	str	r2, [r1, #4]
   355f8:	pop	{r4, r5, fp, pc}
   355fc:	ldrb	r0, [r1, #24]
   35600:	cmp	r0, #16
   35604:	beq	35618 <__assert_fail@plt+0x22a5c>
   35608:	cmp	r0, #11
   3560c:	bne	35634 <__assert_fail@plt+0x22a78>
   35610:	ldr	r0, [r1, #4]
   35614:	b	35654 <__assert_fail@plt+0x22a98>
   35618:	ldmib	r1, {r0, r2}
   3561c:	ldr	r3, [r2, #12]
   35620:	str	r3, [r0, #16]
   35624:	ldr	r0, [r1, #16]
   35628:	str	r0, [r2, #16]
   3562c:	mov	r0, #0
   35630:	bx	lr
   35634:	ldr	r0, [r1, #4]
   35638:	cmp	r0, #0
   3563c:	ldrne	r2, [r1, #16]
   35640:	strne	r2, [r0, #16]
   35644:	ldr	r0, [r1, #8]
   35648:	cmp	r0, #0
   3564c:	beq	35658 <__assert_fail@plt+0x22a9c>
   35650:	ldr	r1, [r1, #16]
   35654:	str	r1, [r0, #16]
   35658:	mov	r0, #0
   3565c:	bx	lr
   35660:	ldr	ip, [r1, #28]
   35664:	ldrb	r2, [r1, #24]
   35668:	sub	r2, r2, #2
   3566c:	cmp	r2, #14
   35670:	bhi	35728 <__assert_fail@plt+0x22b6c>
   35674:	add	r3, pc, #0
   35678:	ldr	pc, [r3, r2, lsl #2]
   3567c:	andeq	r5, r3, ip, ror #14
   35680:	andeq	r5, r3, r8, lsr #14
   35684:	andeq	r5, r3, ip, lsr r7
   35688:	andeq	r5, r3, r8, lsr #14
   3568c:	andeq	r5, r3, r8, lsr #14
   35690:	andeq	r5, r3, r8, lsr #14
   35694:			; <UNDEFINED> instruction: 0x000356b8
   35698:			; <UNDEFINED> instruction: 0x000356b8
   3569c:	ldrdeq	r5, [r3], -r0
   356a0:	ldrdeq	r5, [r3], -r0
   356a4:			; <UNDEFINED> instruction: 0x000356b8
   356a8:	andeq	r5, r3, r8, lsr #14
   356ac:	andeq	r5, r3, r8, lsr #14
   356b0:	andeq	r5, r3, r8, lsr #14
   356b4:	andeq	r5, r3, ip, ror #14
   356b8:	ldr	r0, [r0, #20]
   356bc:	add	r2, ip, ip, lsl #1
   356c0:	add	r0, r0, r2, lsl #2
   356c4:	ldr	r1, [r1, #16]
   356c8:	ldr	r1, [r1, #28]
   356cc:	b	35c5c <__assert_fail@plt+0x230a0>
   356d0:	push	{fp, lr}
   356d4:	mov	fp, sp
   356d8:	ldrb	r2, [r0, #88]	; 0x58
   356dc:	orr	r2, r2, #1
   356e0:	strb	r2, [r0, #88]	; 0x58
   356e4:	add	r3, r1, #16
   356e8:	ldr	lr, [r1, #4]
   356ec:	ldr	r1, [r1, #8]
   356f0:	cmp	r1, #0
   356f4:	mov	r2, r3
   356f8:	addne	r2, r1, #12
   356fc:	ldr	r1, [r2]
   35700:	ldr	r2, [r1, #28]
   35704:	cmp	lr, #0
   35708:	addne	r3, lr, #12
   3570c:	ldr	r1, [r3]
   35710:	ldr	r1, [r1, #28]
   35714:	ldr	r0, [r0, #20]
   35718:	add	r3, ip, ip, lsl #1
   3571c:	add	r0, r0, r3, lsl #2
   35720:	pop	{fp, lr}
   35724:	b	35be4 <__assert_fail@plt+0x23028>
   35728:	ldr	r0, [r0, #12]
   3572c:	ldr	r1, [r1, #16]
   35730:	ldr	r1, [r1, #28]
   35734:	str	r1, [r0, ip, lsl #2]
   35738:	b	3576c <__assert_fail@plt+0x22bb0>
   3573c:	ldr	r3, [r0, #12]
   35740:	ldr	r2, [r1, #16]
   35744:	ldr	r2, [r2, #28]
   35748:	str	r2, [r3, ip, lsl #2]
   3574c:	ldrb	r1, [r1, #24]
   35750:	cmp	r1, #4
   35754:	bne	3576c <__assert_fail@plt+0x22bb0>
   35758:	ldr	r0, [r0, #20]
   3575c:	add	r1, ip, ip, lsl #1
   35760:	add	r0, r0, r1, lsl #2
   35764:	mov	r1, r2
   35768:	b	35c5c <__assert_fail@plt+0x230a0>
   3576c:	mov	r0, #0
   35770:	bx	lr
   35774:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   35778:	add	fp, sp, #24
   3577c:	sub	sp, sp, #16
   35780:	mov	r4, r0
   35784:	ldr	r0, [r0, #8]
   35788:	cmp	r0, #0
   3578c:	beq	35824 <__assert_fail@plt+0x22c68>
   35790:	mov	r7, #0
   35794:	add	r8, sp, #4
   35798:	mov	r6, #0
   3579c:	ldr	r0, [r4, #24]
   357a0:	add	r5, r6, r6, lsl #1
   357a4:	add	r0, r0, r5, lsl #2
   357a8:	ldr	r0, [r0, #4]
   357ac:	cmp	r0, #0
   357b0:	beq	357bc <__assert_fail@plt+0x22c00>
   357b4:	mov	r0, r7
   357b8:	b	357fc <__assert_fail@plt+0x22c40>
   357bc:	mov	r0, r8
   357c0:	mov	r1, r4
   357c4:	mov	r2, r6
   357c8:	mov	r3, #1
   357cc:	bl	35ca8 <__assert_fail@plt+0x230ec>
   357d0:	cmp	r0, #0
   357d4:	bne	35828 <__assert_fail@plt+0x22c6c>
   357d8:	ldr	r0, [r4, #24]
   357dc:	add	r0, r0, r5, lsl #2
   357e0:	ldr	r0, [r0, #4]
   357e4:	cmp	r0, #0
   357e8:	mov	r0, r7
   357ec:	bne	357fc <__assert_fail@plt+0x22c40>
   357f0:	ldr	r0, [sp, #12]
   357f4:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   357f8:	mov	r0, #1
   357fc:	ldr	r1, [r4, #8]
   35800:	add	r2, r6, #1
   35804:	subs	r3, r2, r1
   35808:	mov	r6, r3
   3580c:	movne	r6, r2
   35810:	movwne	r3, #1
   35814:	and	r7, r0, r3
   35818:	tst	r0, #1
   3581c:	cmpeq	r2, r1
   35820:	bne	3579c <__assert_fail@plt+0x22be0>
   35824:	mov	r0, #0
   35828:	sub	sp, fp, #24
   3582c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   35830:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   35834:	add	fp, sp, #24
   35838:	mov	r4, r0
   3583c:	ldr	r0, [r0, #8]
   35840:	cmp	r0, #0
   35844:	beq	358f0 <__assert_fail@plt+0x22d34>
   35848:	mov	r0, #0
   3584c:	mov	r1, #0
   35850:	mov	r2, #0
   35854:	ldr	r3, [r4, #28]
   35858:	str	r0, [r3, r1]!
   3585c:	str	r0, [r3, #4]
   35860:	str	r0, [r3, #8]
   35864:	add	r1, r1, #12
   35868:	add	r2, r2, #1
   3586c:	ldr	r3, [r4, #8]
   35870:	cmp	r2, r3
   35874:	bcc	35854 <__assert_fail@plt+0x22c98>
   35878:	cmp	r3, #0
   3587c:	beq	358f0 <__assert_fail@plt+0x22d34>
   35880:	mov	r5, #0
   35884:	ldr	r0, [r4, #24]
   35888:	add	r8, r5, r5, lsl #1
   3588c:	add	r0, r0, r8, lsl #2
   35890:	ldr	r1, [r0, #4]
   35894:	cmp	r1, #1
   35898:	blt	358e0 <__assert_fail@plt+0x22d24>
   3589c:	ldr	r7, [r0, #8]
   358a0:	mov	r6, #0
   358a4:	ldr	r0, [r7, r6, lsl #2]
   358a8:	add	r0, r0, r0, lsl #1
   358ac:	ldr	r1, [r4, #28]
   358b0:	add	r0, r1, r0, lsl #2
   358b4:	mov	r1, r5
   358b8:	bl	36514 <__assert_fail@plt+0x23958>
   358bc:	cmp	r0, #0
   358c0:	moveq	r0, #12
   358c4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   358c8:	add	r6, r6, #1
   358cc:	ldr	r0, [r4, #24]
   358d0:	add	r0, r0, r8, lsl #2
   358d4:	ldr	r0, [r0, #4]
   358d8:	cmp	r6, r0
   358dc:	blt	358a4 <__assert_fail@plt+0x22ce8>
   358e0:	add	r5, r5, #1
   358e4:	ldr	r0, [r4, #8]
   358e8:	cmp	r5, r0
   358ec:	bcc	35884 <__assert_fail@plt+0x22cc8>
   358f0:	mov	r0, #0
   358f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   358f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   358fc:	add	fp, sp, #28
   35900:	sub	sp, sp, #4
   35904:	mov	r9, r2
   35908:	mov	r8, r0
   3590c:	ldr	r5, [r2, #4]
   35910:	ldr	r6, [r1]
   35914:	cmp	r5, #0
   35918:	ldrbne	r0, [r1, #28]
   3591c:	andsne	r0, r0, #16
   35920:	bne	359ec <__assert_fail@plt+0x22e30>
   35924:	mov	r0, r6
   35928:	mov	r1, #0
   3592c:	mov	r2, #0
   35930:	mov	r3, #8
   35934:	bl	324c0 <__assert_fail@plt+0x1f904>
   35938:	mov	sl, r0
   3593c:	mov	r0, r6
   35940:	mov	r1, #0
   35944:	mov	r2, #0
   35948:	mov	r3, #9
   3594c:	bl	324c0 <__assert_fail@plt+0x1f904>
   35950:	mov	r4, r0
   35954:	cmp	r5, #0
   35958:	mov	r7, r0
   3595c:	beq	35978 <__assert_fail@plt+0x22dbc>
   35960:	mov	r0, r6
   35964:	mov	r1, r5
   35968:	mov	r2, r4
   3596c:	mov	r3, #16
   35970:	bl	324c0 <__assert_fail@plt+0x1f904>
   35974:	mov	r7, r0
   35978:	mov	r0, r6
   3597c:	mov	r1, sl
   35980:	mov	r2, r7
   35984:	mov	r3, #16
   35988:	bl	324c0 <__assert_fail@plt+0x1f904>
   3598c:	cmp	r4, #0
   35990:	beq	359a0 <__assert_fail@plt+0x22de4>
   35994:	cmp	sl, #0
   35998:	cmpne	r7, #0
   3599c:	bne	359b0 <__assert_fail@plt+0x22df4>
   359a0:	mov	r0, #12
   359a4:	str	r0, [r8]
   359a8:	mov	r5, #0
   359ac:	b	35a08 <__assert_fail@plt+0x22e4c>
   359b0:	mov	r5, r0
   359b4:	cmp	r0, #0
   359b8:	beq	359a0 <__assert_fail@plt+0x22de4>
   359bc:	ldr	r0, [r9, #20]
   359c0:	str	r0, [r4, #20]
   359c4:	str	r0, [sl, #20]
   359c8:	ldr	r0, [r4, #24]
   359cc:	ldr	r1, [r9, #24]
   359d0:	lsr	r1, r1, #19
   359d4:	bfi	r0, r1, #19, #1
   359d8:	str	r0, [r4, #24]
   359dc:	ldr	r0, [sl, #24]
   359e0:	bfi	r0, r1, #19, #1
   359e4:	str	r0, [sl, #24]
   359e8:	b	35a08 <__assert_fail@plt+0x22e4c>
   359ec:	ldr	r0, [r9, #20]
   359f0:	cmp	r0, #31
   359f4:	bgt	35a08 <__assert_fail@plt+0x22e4c>
   359f8:	ldr	r1, [r6, #80]	; 0x50
   359fc:	mov	r2, #1
   35a00:	tst	r1, r2, lsl r0
   35a04:	bne	35924 <__assert_fail@plt+0x22d68>
   35a08:	mov	r0, r5
   35a0c:	sub	sp, fp, #28
   35a10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35a14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35a18:	add	fp, sp, #28
   35a1c:	sub	sp, sp, #12
   35a20:	mov	r5, r2
   35a24:	mov	r9, r1
   35a28:	mov	r4, r0
   35a2c:	ldr	r7, [r0, #4]
   35a30:	ldr	r0, [r0, #8]
   35a34:	cmp	r0, r7
   35a38:	bcs	35b08 <__assert_fail@plt+0x22f4c>
   35a3c:	ldr	r0, [r4]
   35a40:	ldr	r1, [r4, #8]
   35a44:	str	r9, [r0, r1, lsl #3]!
   35a48:	str	r5, [r0, #4]
   35a4c:	ldr	r0, [r4]
   35a50:	ldr	r1, [r4, #8]
   35a54:	add	r0, r0, r1, lsl #3
   35a58:	ldr	r1, [r0, #4]
   35a5c:	bfc	r1, #8, #10
   35a60:	str	r1, [r0, #4]
   35a64:	uxtb	r1, r5
   35a68:	cmp	r1, #5
   35a6c:	bne	35a80 <__assert_fail@plt+0x22ec4>
   35a70:	ldr	r2, [r4, #92]	; 0x5c
   35a74:	mov	r0, #1048576	; 0x100000
   35a78:	cmp	r2, #1
   35a7c:	bgt	35a90 <__assert_fail@plt+0x22ed4>
   35a80:	sub	r0, r1, #6
   35a84:	clz	r0, r0
   35a88:	lsr	r0, r0, #5
   35a8c:	lsl	r0, r0, #20
   35a90:	ldr	r1, [r4]
   35a94:	ldr	r2, [r4, #8]
   35a98:	add	r1, r1, r2, lsl #3
   35a9c:	ldr	r2, [r1, #4]
   35aa0:	bic	r2, r2, #1048576	; 0x100000
   35aa4:	orr	r0, r2, r0
   35aa8:	str	r0, [r1, #4]
   35aac:	ldr	r0, [r4, #8]
   35ab0:	ldr	r1, [r4, #12]
   35ab4:	mvn	r2, #0
   35ab8:	str	r2, [r1, r0, lsl #2]
   35abc:	ldr	r0, [r4, #8]
   35ac0:	ldr	r1, [r4, #20]
   35ac4:	add	r0, r0, r0, lsl #1
   35ac8:	mov	r2, #0
   35acc:	str	r2, [r1, r0, lsl #2]!
   35ad0:	str	r2, [r1, #4]
   35ad4:	str	r2, [r1, #8]
   35ad8:	ldr	r0, [r4, #8]
   35adc:	ldr	r1, [r4, #24]
   35ae0:	add	r0, r0, r0, lsl #1
   35ae4:	str	r2, [r1, r0, lsl #2]!
   35ae8:	str	r2, [r1, #4]
   35aec:	str	r2, [r1, #8]
   35af0:	ldr	r6, [r4, #8]
   35af4:	add	r0, r6, #1
   35af8:	str	r0, [r4, #8]
   35afc:	mov	r0, r6
   35b00:	sub	sp, fp, #28
   35b04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35b08:	lsl	r1, r7, #1
   35b0c:	mvn	r6, #0
   35b10:	movw	r0, #21845	; 0x5555
   35b14:	movt	r0, #5461	; 0x1555
   35b18:	cmp	r1, r0
   35b1c:	bhi	35afc <__assert_fail@plt+0x22f40>
   35b20:	str	r1, [sp, #8]
   35b24:	ldr	r0, [r4]
   35b28:	lsl	r1, r7, #4
   35b2c:	bl	2f804 <__assert_fail@plt+0x1cc48>
   35b30:	cmp	r0, #0
   35b34:	beq	35afc <__assert_fail@plt+0x22f40>
   35b38:	str	r0, [r4]
   35b3c:	ldr	r0, [r4, #12]
   35b40:	lsl	r8, r7, #3
   35b44:	mov	r1, r8
   35b48:	bl	2f804 <__assert_fail@plt+0x1cc48>
   35b4c:	str	r0, [sp, #4]
   35b50:	ldr	r0, [r4, #16]
   35b54:	mov	r1, r8
   35b58:	bl	2f804 <__assert_fail@plt+0x1cc48>
   35b5c:	mov	r2, r0
   35b60:	ldr	r0, [r4, #20]
   35b64:	add	r1, r7, r7, lsl #1
   35b68:	mov	r7, r2
   35b6c:	lsl	r8, r1, #3
   35b70:	mov	r1, r8
   35b74:	bl	2f804 <__assert_fail@plt+0x1cc48>
   35b78:	mov	sl, r0
   35b7c:	ldr	r0, [r4, #24]
   35b80:	mov	r1, r8
   35b84:	bl	2f804 <__assert_fail@plt+0x1cc48>
   35b88:	mov	r8, r0
   35b8c:	ldr	r0, [sp, #4]
   35b90:	cmp	r0, #0
   35b94:	beq	35ba4 <__assert_fail@plt+0x22fe8>
   35b98:	cmp	r7, #0
   35b9c:	cmpne	sl, #0
   35ba0:	bne	35bc4 <__assert_fail@plt+0x23008>
   35ba4:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   35ba8:	mov	r0, r7
   35bac:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   35bb0:	mov	r0, sl
   35bb4:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   35bb8:	mov	r0, r8
   35bbc:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   35bc0:	b	35afc <__assert_fail@plt+0x22f40>
   35bc4:	cmp	r8, #0
   35bc8:	beq	35ba4 <__assert_fail@plt+0x22fe8>
   35bcc:	add	r1, r4, #12
   35bd0:	stm	r1, {r0, r7, sl}
   35bd4:	str	r8, [r4, #24]
   35bd8:	ldr	r0, [sp, #8]
   35bdc:	str	r0, [r4, #4]
   35be0:	b	35a3c <__assert_fail@plt+0x22e80>
   35be4:	push	{r4, r5, r6, sl, fp, lr}
   35be8:	add	fp, sp, #16
   35bec:	mov	r5, r2
   35bf0:	mov	r4, r1
   35bf4:	mov	r6, r0
   35bf8:	mov	r0, #2
   35bfc:	str	r0, [r6]
   35c00:	mov	r0, #8
   35c04:	bl	2ed04 <__assert_fail@plt+0x1c148>
   35c08:	str	r0, [r6, #8]
   35c0c:	cmp	r0, #0
   35c10:	moveq	r0, #12
   35c14:	popeq	{r4, r5, r6, sl, fp, pc}
   35c18:	cmp	r4, r5
   35c1c:	bne	35c38 <__assert_fail@plt+0x2307c>
   35c20:	mov	r0, #1
   35c24:	str	r0, [r6, #4]
   35c28:	ldr	r0, [r6, #8]
   35c2c:	str	r4, [r0]
   35c30:	mov	r0, #0
   35c34:	pop	{r4, r5, r6, sl, fp, pc}
   35c38:	mov	r0, #2
   35c3c:	str	r0, [r6, #4]
   35c40:	ldr	r0, [r6, #8]
   35c44:	cmp	r4, r5
   35c48:	stmlt	r0, {r4, r5}
   35c4c:	strge	r5, [r0]
   35c50:	strge	r4, [r0, #4]
   35c54:	mov	r0, #0
   35c58:	pop	{r4, r5, r6, sl, fp, pc}
   35c5c:	push	{r4, r5, fp, lr}
   35c60:	add	fp, sp, #8
   35c64:	mov	r5, r1
   35c68:	mov	r4, r0
   35c6c:	mov	r0, #1
   35c70:	str	r0, [r4]
   35c74:	str	r0, [r4, #4]
   35c78:	mov	r0, #4
   35c7c:	bl	2ed04 <__assert_fail@plt+0x1c148>
   35c80:	str	r0, [r4, #8]
   35c84:	cmp	r0, #0
   35c88:	strne	r5, [r0]
   35c8c:	movne	r0, #0
   35c90:	popne	{r4, r5, fp, pc}
   35c94:	mov	r0, #0
   35c98:	str	r0, [r4]
   35c9c:	str	r0, [r4, #4]
   35ca0:	mov	r0, #12
   35ca4:	pop	{r4, r5, fp, pc}
   35ca8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35cac:	add	fp, sp, #28
   35cb0:	sub	sp, sp, #44	; 0x2c
   35cb4:	mov	r8, r3
   35cb8:	mov	r6, r2
   35cbc:	mov	r5, r1
   35cc0:	mov	r7, r0
   35cc4:	ldr	r0, [r1, #20]
   35cc8:	add	r4, r2, r2, lsl #1
   35ccc:	add	r0, r0, r4, lsl #2
   35cd0:	ldr	r0, [r0, #4]
   35cd4:	add	r1, r0, #1
   35cd8:	add	r0, sp, #32
   35cdc:	bl	35eb4 <__assert_fail@plt+0x232f8>
   35ce0:	cmp	r0, #0
   35ce4:	bne	35eac <__assert_fail@plt+0x232f0>
   35ce8:	ldr	r0, [sp, #36]	; 0x24
   35cec:	ldr	r1, [sp, #40]	; 0x28
   35cf0:	add	r2, r0, #1
   35cf4:	str	r2, [sp, #36]	; 0x24
   35cf8:	str	r6, [r1, r0, lsl #2]
   35cfc:	ldr	r0, [r5, #24]
   35d00:	add	r0, r0, r4, lsl #2
   35d04:	mvn	r1, #0
   35d08:	str	r1, [r0, #4]
   35d0c:	ldr	r1, [r5]
   35d10:	add	r0, r1, r6, lsl #3
   35d14:	ldr	r0, [r0, #4]
   35d18:	ubfx	r0, r0, #8, #10
   35d1c:	cmp	r0, #0
   35d20:	beq	35d70 <__assert_fail@plt+0x231b4>
   35d24:	ldr	r2, [r5, #20]
   35d28:	add	r2, r2, r4, lsl #2
   35d2c:	ldr	r3, [r2, #4]
   35d30:	cmp	r3, #0
   35d34:	beq	35d70 <__assert_fail@plt+0x231b4>
   35d38:	ldr	r2, [r2, #8]
   35d3c:	ldr	r2, [r2]
   35d40:	add	r1, r1, r2, lsl #3
   35d44:	ldrb	r1, [r1, #6]
   35d48:	tst	r1, #4
   35d4c:	bne	35d70 <__assert_fail@plt+0x231b4>
   35d50:	str	r0, [sp]
   35d54:	mov	r0, r5
   35d58:	mov	r1, r6
   35d5c:	mov	r2, r6
   35d60:	mov	r3, r6
   35d64:	bl	35ee4 <__assert_fail@plt+0x23328>
   35d68:	cmp	r0, #0
   35d6c:	bne	35eac <__assert_fail@plt+0x232f0>
   35d70:	ldr	r0, [r5]
   35d74:	add	r0, r0, r6, lsl #3
   35d78:	ldrb	r0, [r0, #4]
   35d7c:	tst	r0, #8
   35d80:	beq	35e80 <__assert_fail@plt+0x232c4>
   35d84:	ldr	r0, [r5, #20]
   35d88:	add	r1, r0, r4, lsl #2
   35d8c:	ldr	r1, [r1, #4]
   35d90:	cmp	r1, #1
   35d94:	blt	35e80 <__assert_fail@plt+0x232c4>
   35d98:	str	r8, [sp, #8]
   35d9c:	str	r7, [sp, #12]
   35da0:	mov	r8, #0
   35da4:	add	r7, sp, #16
   35da8:	add	sl, sp, #32
   35dac:	mov	r6, #0
   35db0:	add	r0, r0, r4, lsl #2
   35db4:	ldr	r0, [r0, #8]
   35db8:	ldr	r2, [r0, r6, lsl #2]
   35dbc:	add	r9, r2, r2, lsl #1
   35dc0:	ldr	r0, [r5, #24]
   35dc4:	add	r0, r0, r9, lsl #2
   35dc8:	ldr	r1, [r0, #4]
   35dcc:	cmn	r1, #1
   35dd0:	beq	35e38 <__assert_fail@plt+0x2327c>
   35dd4:	cmp	r1, #0
   35dd8:	bne	35df8 <__assert_fail@plt+0x2323c>
   35ddc:	mov	r0, r7
   35de0:	mov	r1, r5
   35de4:	mov	r3, #0
   35de8:	bl	35ca8 <__assert_fail@plt+0x230ec>
   35dec:	cmp	r0, #0
   35df0:	beq	35e08 <__assert_fail@plt+0x2324c>
   35df4:	b	35eac <__assert_fail@plt+0x232f0>
   35df8:	vldr	d16, [r0]
   35dfc:	ldr	r0, [r0, #8]
   35e00:	str	r0, [sp, #24]
   35e04:	vstr	d16, [sp, #16]
   35e08:	mov	r0, sl
   35e0c:	mov	r1, r7
   35e10:	bl	36170 <__assert_fail@plt+0x235b4>
   35e14:	cmp	r0, #0
   35e18:	bne	35eac <__assert_fail@plt+0x232f0>
   35e1c:	ldr	r0, [r5, #24]
   35e20:	add	r0, r0, r9, lsl #2
   35e24:	ldr	r0, [r0, #4]
   35e28:	cmp	r0, #0
   35e2c:	bne	35e3c <__assert_fail@plt+0x23280>
   35e30:	ldr	r0, [sp, #24]
   35e34:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   35e38:	mov	r8, #1
   35e3c:	ldr	r0, [r5, #20]
   35e40:	add	r1, r0, r4, lsl #2
   35e44:	ldr	r1, [r1, #4]
   35e48:	add	r6, r6, #1
   35e4c:	cmp	r6, r1
   35e50:	blt	35db0 <__assert_fail@plt+0x231f4>
   35e54:	tst	r8, #1
   35e58:	ldr	r7, [sp, #12]
   35e5c:	ldr	r0, [sp, #8]
   35e60:	beq	35e80 <__assert_fail@plt+0x232c4>
   35e64:	cmp	r0, #0
   35e68:	bne	35e80 <__assert_fail@plt+0x232c4>
   35e6c:	ldr	r0, [r5, #24]
   35e70:	add	r0, r0, r4, lsl #2
   35e74:	mov	r1, #0
   35e78:	str	r1, [r0, #4]
   35e7c:	b	35e98 <__assert_fail@plt+0x232dc>
   35e80:	ldr	r0, [r5, #24]
   35e84:	vldr	d16, [sp, #32]
   35e88:	add	r0, r0, r4, lsl #2
   35e8c:	ldr	r1, [sp, #40]	; 0x28
   35e90:	str	r1, [r0, #8]
   35e94:	vstr	d16, [r0]
   35e98:	ldr	r0, [sp, #40]	; 0x28
   35e9c:	vldr	d16, [sp, #32]
   35ea0:	str	r0, [r7, #8]
   35ea4:	vstr	d16, [r7]
   35ea8:	mov	r0, #0
   35eac:	sub	sp, fp, #28
   35eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35eb4:	push	{r4, r5, fp, lr}
   35eb8:	add	fp, sp, #8
   35ebc:	mov	r4, r0
   35ec0:	mov	r5, #0
   35ec4:	stm	r0, {r1, r5}
   35ec8:	lsl	r0, r1, #2
   35ecc:	bl	2ed04 <__assert_fail@plt+0x1c148>
   35ed0:	str	r0, [r4, #8]
   35ed4:	cmp	r0, #0
   35ed8:	movweq	r5, #12
   35edc:	mov	r0, r5
   35ee0:	pop	{r4, r5, fp, pc}
   35ee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35ee8:	add	fp, sp, #28
   35eec:	sub	sp, sp, #20
   35ef0:	str	r3, [sp, #8]
   35ef4:	mov	r8, r2
   35ef8:	mov	sl, r1
   35efc:	mov	r5, r0
   35f00:	ldr	r0, [fp, #8]
   35f04:	str	r0, [sp, #16]
   35f08:	ldr	r0, [r5]
   35f0c:	add	r0, r0, sl, lsl #3
   35f10:	ldrb	r1, [r0, #4]!
   35f14:	cmp	r1, #4
   35f18:	bne	35f94 <__assert_fail@plt+0x233d8>
   35f1c:	ldr	r0, [r5, #12]
   35f20:	ldr	r1, [r5, #20]
   35f24:	ldr	r4, [r0, sl, lsl #2]
   35f28:	add	r6, r8, r8, lsl #1
   35f2c:	add	r0, r1, r6, lsl #2
   35f30:	mov	r1, #0
   35f34:	str	r1, [r0, #4]
   35f38:	mov	r0, r5
   35f3c:	mov	r1, r4
   35f40:	ldr	r2, [sp, #16]
   35f44:	bl	36304 <__assert_fail@plt+0x23748>
   35f48:	mov	r9, #12
   35f4c:	cmn	r0, #1
   35f50:	beq	36154 <__assert_fail@plt+0x23598>
   35f54:	mov	r7, r0
   35f58:	ldr	r0, [r5, #12]
   35f5c:	ldr	r1, [r0, sl, lsl #2]
   35f60:	str	r1, [r0, r8, lsl #2]
   35f64:	ldr	r0, [r5, #20]
   35f68:	add	r0, r0, r6, lsl #2
   35f6c:	mov	r1, r7
   35f70:	bl	3638c <__assert_fail@plt+0x237d0>
   35f74:	mov	r1, #0
   35f78:	cmp	r0, #0
   35f7c:	mov	sl, r4
   35f80:	mov	r8, r7
   35f84:	beq	36154 <__assert_fail@plt+0x23598>
   35f88:	cmp	r1, #0
   35f8c:	beq	35f08 <__assert_fail@plt+0x2334c>
   35f90:	b	36134 <__assert_fail@plt+0x23578>
   35f94:	ldr	r1, [r5, #20]
   35f98:	add	r7, sl, sl, lsl #1
   35f9c:	add	r3, r1, r7, lsl #2
   35fa0:	ldr	r2, [r3, #4]
   35fa4:	cmp	r2, #0
   35fa8:	beq	36144 <__assert_fail@plt+0x23588>
   35fac:	ldr	r3, [r3, #8]
   35fb0:	ldr	r9, [r3]
   35fb4:	add	r4, r8, r8, lsl #1
   35fb8:	add	r6, r1, r4, lsl #2
   35fbc:	mov	r1, #0
   35fc0:	str	r1, [r6, #4]
   35fc4:	cmp	r2, #1
   35fc8:	bne	36004 <__assert_fail@plt+0x23448>
   35fcc:	ldr	r1, [sp, #8]
   35fd0:	cmp	sl, r1
   35fd4:	bne	3603c <__assert_fail@plt+0x23480>
   35fd8:	cmp	r8, sl
   35fdc:	beq	3603c <__assert_fail@plt+0x23480>
   35fe0:	mov	r0, r6
   35fe4:	mov	r1, r9
   35fe8:	bl	3638c <__assert_fail@plt+0x237d0>
   35fec:	cmp	r0, #0
   35ff0:	mov	r1, #1
   35ff4:	movwne	r1, #2
   35ff8:	cmp	r1, #0
   35ffc:	beq	35f08 <__assert_fail@plt+0x2334c>
   36000:	b	36134 <__assert_fail@plt+0x23578>
   36004:	str	r4, [sp, #12]
   36008:	mov	r0, r5
   3600c:	mov	r1, r9
   36010:	ldr	r4, [sp, #16]
   36014:	mov	r2, r4
   36018:	bl	36494 <__assert_fail@plt+0x238d8>
   3601c:	cmn	r0, #1
   36020:	beq	3607c <__assert_fail@plt+0x234c0>
   36024:	mov	r1, r0
   36028:	mov	r0, r6
   3602c:	bl	3638c <__assert_fail@plt+0x237d0>
   36030:	cmp	r0, #0
   36034:	bne	360e0 <__assert_fail@plt+0x23524>
   36038:	b	36168 <__assert_fail@plt+0x235ac>
   3603c:	ldr	r0, [r0]
   36040:	ubfx	r0, r0, #8, #10
   36044:	ldr	r2, [sp, #16]
   36048:	orr	r2, r0, r2
   3604c:	mov	r0, r5
   36050:	mov	r1, r9
   36054:	str	r2, [sp, #16]
   36058:	bl	36304 <__assert_fail@plt+0x23748>
   3605c:	mov	sl, r9
   36060:	mov	r9, #12
   36064:	cmn	r0, #1
   36068:	beq	36154 <__assert_fail@plt+0x23598>
   3606c:	mov	r8, r0
   36070:	ldr	r0, [r5, #20]
   36074:	add	r0, r0, r4, lsl #2
   36078:	b	3611c <__assert_fail@plt+0x23560>
   3607c:	mov	r0, r5
   36080:	mov	r8, r9
   36084:	mov	r1, r9
   36088:	mov	r2, r4
   3608c:	bl	36304 <__assert_fail@plt+0x23748>
   36090:	mov	r9, #12
   36094:	cmn	r0, #1
   36098:	beq	36154 <__assert_fail@plt+0x23598>
   3609c:	mov	r6, r0
   360a0:	ldr	r0, [r5, #20]
   360a4:	ldr	r1, [sp, #12]
   360a8:	add	r0, r0, r1, lsl #2
   360ac:	mov	r1, r6
   360b0:	bl	3638c <__assert_fail@plt+0x237d0>
   360b4:	cmp	r0, #0
   360b8:	beq	36154 <__assert_fail@plt+0x23598>
   360bc:	ldr	r4, [sp, #16]
   360c0:	str	r4, [sp]
   360c4:	mov	r0, r5
   360c8:	mov	r1, r8
   360cc:	mov	r2, r6
   360d0:	ldr	r3, [sp, #8]
   360d4:	bl	35ee4 <__assert_fail@plt+0x23328>
   360d8:	cmp	r0, #0
   360dc:	bne	36160 <__assert_fail@plt+0x235a4>
   360e0:	ldr	r0, [r5, #20]
   360e4:	add	r0, r0, r7, lsl #2
   360e8:	ldr	r0, [r0, #8]
   360ec:	ldr	sl, [r0, #4]
   360f0:	mov	r0, r5
   360f4:	mov	r1, sl
   360f8:	mov	r2, r4
   360fc:	bl	36304 <__assert_fail@plt+0x23748>
   36100:	mov	r9, #12
   36104:	cmn	r0, #1
   36108:	beq	36154 <__assert_fail@plt+0x23598>
   3610c:	mov	r8, r0
   36110:	ldr	r0, [r5, #20]
   36114:	ldr	r1, [sp, #12]
   36118:	add	r0, r0, r1, lsl #2
   3611c:	mov	r1, r8
   36120:	bl	3638c <__assert_fail@plt+0x237d0>
   36124:	mov	r1, #0
   36128:	cmp	r0, #0
   3612c:	bne	35f88 <__assert_fail@plt+0x233cc>
   36130:	b	36154 <__assert_fail@plt+0x23598>
   36134:	mov	r9, #12
   36138:	cmp	r1, #2
   3613c:	moveq	r9, #0
   36140:	b	36154 <__assert_fail@plt+0x23598>
   36144:	ldr	r0, [r5, #12]
   36148:	ldr	r1, [r0, sl, lsl #2]
   3614c:	str	r1, [r0, r8, lsl #2]
   36150:	mov	r9, #0
   36154:	mov	r0, r9
   36158:	sub	sp, fp, #28
   3615c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36160:	mov	r9, r0
   36164:	b	36154 <__assert_fail@plt+0x23598>
   36168:	mov	r9, #12
   3616c:	b	36154 <__assert_fail@plt+0x23598>
   36170:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   36174:	add	fp, sp, #24
   36178:	mov	r8, #0
   3617c:	cmp	r1, #0
   36180:	beq	362dc <__assert_fail@plt+0x23720>
   36184:	mov	r6, r1
   36188:	ldr	r1, [r1, #4]
   3618c:	cmp	r1, #0
   36190:	beq	362dc <__assert_fail@plt+0x23720>
   36194:	mov	r9, r0
   36198:	ldr	r2, [r0]
   3619c:	ldr	r0, [r0, #4]
   361a0:	add	r3, r0, r1, lsl #1
   361a4:	cmp	r2, r3
   361a8:	bge	361d4 <__assert_fail@plt+0x23618>
   361ac:	add	r7, r2, r1
   361b0:	lsl	r1, r7, #3
   361b4:	ldr	r0, [r9, #8]
   361b8:	bl	2f804 <__assert_fail@plt+0x1cc48>
   361bc:	cmp	r0, #0
   361c0:	beq	362f8 <__assert_fail@plt+0x2373c>
   361c4:	str	r0, [r9, #8]
   361c8:	lsl	r0, r7, #1
   361cc:	str	r0, [r9]
   361d0:	ldr	r0, [r9, #4]
   361d4:	ldr	r2, [r6, #4]
   361d8:	cmp	r0, #0
   361dc:	beq	362e4 <__assert_fail@plt+0x23728>
   361e0:	add	r7, r0, r2, lsl #1
   361e4:	sub	r1, r0, #1
   361e8:	sub	r0, r2, #1
   361ec:	orr	r2, r0, r1
   361f0:	cmp	r2, #0
   361f4:	blt	36240 <__assert_fail@plt+0x23684>
   361f8:	ldr	r2, [r6, #8]
   361fc:	ldr	r3, [r9, #8]
   36200:	ldr	r4, [r2, r0, lsl #2]
   36204:	ldr	r5, [r3, r1, lsl #2]
   36208:	cmp	r5, r4
   3620c:	bne	3621c <__assert_fail@plt+0x23660>
   36210:	sub	r1, r1, #1
   36214:	sub	r0, r0, #1
   36218:	b	36234 <__assert_fail@plt+0x23678>
   3621c:	bge	36230 <__assert_fail@plt+0x23674>
   36220:	sub	r7, r7, #1
   36224:	str	r4, [r3, r7, lsl #2]
   36228:	sub	r0, r0, #1
   3622c:	b	36234 <__assert_fail@plt+0x23678>
   36230:	sub	r1, r1, #1
   36234:	orr	r5, r0, r1
   36238:	cmn	r5, #1
   3623c:	bgt	36200 <__assert_fail@plt+0x23644>
   36240:	cmp	r0, #0
   36244:	blt	36264 <__assert_fail@plt+0x236a8>
   36248:	add	r2, r0, #1
   3624c:	sub	r7, r7, r2
   36250:	ldr	r0, [r9, #8]
   36254:	add	r0, r0, r7, lsl #2
   36258:	ldr	r1, [r6, #8]
   3625c:	lsl	r2, r2, #2
   36260:	bl	125c8 <memcpy@plt>
   36264:	ldr	r1, [r6, #4]
   36268:	ldr	r0, [r9, #4]
   3626c:	add	r1, r0, r1, lsl #1
   36270:	sub	r1, r1, #1
   36274:	sub	r2, r1, r7
   36278:	adds	r2, r2, #1
   3627c:	beq	362dc <__assert_fail@plt+0x23720>
   36280:	add	r3, r2, r0
   36284:	str	r3, [r9, #4]
   36288:	sub	r3, r0, #1
   3628c:	ldr	r0, [r9, #8]
   36290:	ldr	r6, [r0, r3, lsl #2]
   36294:	ldr	r5, [r0, r1, lsl #2]
   36298:	cmp	r5, r6
   3629c:	ble	362b8 <__assert_fail@plt+0x236fc>
   362a0:	add	r6, r2, r3
   362a4:	str	r5, [r0, r6, lsl #2]
   362a8:	subs	r2, r2, #1
   362ac:	sub	r1, r1, #1
   362b0:	bne	36290 <__assert_fail@plt+0x236d4>
   362b4:	b	362dc <__assert_fail@plt+0x23720>
   362b8:	add	r5, r2, r3
   362bc:	str	r6, [r0, r5, lsl #2]
   362c0:	sub	r6, r3, #1
   362c4:	cmp	r3, #0
   362c8:	mov	r3, r6
   362cc:	bgt	36290 <__assert_fail@plt+0x236d4>
   362d0:	add	r1, r0, r7, lsl #2
   362d4:	lsl	r2, r2, #2
   362d8:	bl	125c8 <memcpy@plt>
   362dc:	mov	r0, r8
   362e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   362e4:	str	r2, [r9, #4]
   362e8:	ldr	r0, [r9, #8]
   362ec:	ldr	r2, [r6, #4]
   362f0:	ldr	r1, [r6, #8]
   362f4:	b	362d4 <__assert_fail@plt+0x23718>
   362f8:	mov	r8, #12
   362fc:	mov	r0, r8
   36300:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   36304:	push	{r4, r5, r6, sl, fp, lr}
   36308:	add	fp, sp, #16
   3630c:	mov	r6, r2
   36310:	mov	r4, r1
   36314:	mov	r5, r0
   36318:	ldr	r0, [r0]
   3631c:	ldr	r1, [r0, r1, lsl #3]!
   36320:	ldr	r2, [r0, #4]
   36324:	mov	r0, r5
   36328:	bl	35a14 <__assert_fail@plt+0x22e58>
   3632c:	cmn	r0, #1
   36330:	ldrne	r1, [r5]
   36334:	addne	r1, r1, r0, lsl #3
   36338:	ldrne	r2, [r1, #4]
   3633c:	bfine	r2, r6, #8, #10
   36340:	strne	r2, [r1, #4]
   36344:	ldrne	r1, [r5]
   36348:	addne	r2, r1, r4, lsl #3
   3634c:	ldrne	r2, [r2, #4]
   36350:	movwne	r3, #65280	; 0xff00
   36354:	movtne	r3, #3
   36358:	andne	r2, r2, r3
   3635c:	addne	r1, r1, r0, lsl #3
   36360:	ldrne	r3, [r1, #4]
   36364:	orrne	r2, r2, r3
   36368:	strne	r2, [r1, #4]
   3636c:	ldrne	r1, [r5]
   36370:	addne	r1, r1, r0, lsl #3
   36374:	ldrne	r2, [r1, #4]
   36378:	orrne	r2, r2, #262144	; 0x40000
   3637c:	strne	r2, [r1, #4]
   36380:	ldrne	r1, [r5, #16]
   36384:	strne	r4, [r1, r0, lsl #2]
   36388:	pop	{r4, r5, r6, sl, fp, pc}
   3638c:	push	{r4, r5, fp, lr}
   36390:	add	fp, sp, #8
   36394:	mov	r5, r1
   36398:	mov	r4, r0
   3639c:	ldr	r2, [r0]
   363a0:	cmp	r2, #0
   363a4:	beq	363d0 <__assert_fail@plt+0x23814>
   363a8:	ldr	r1, [r4, #4]
   363ac:	cmp	r1, #0
   363b0:	bne	363e8 <__assert_fail@plt+0x2382c>
   363b4:	ldr	r0, [r4, #8]
   363b8:	str	r5, [r0]
   363bc:	ldr	r0, [r4, #4]
   363c0:	add	r0, r0, #1
   363c4:	str	r0, [r4, #4]
   363c8:	mov	r0, #1
   363cc:	pop	{r4, r5, fp, pc}
   363d0:	mov	r0, r4
   363d4:	mov	r1, r5
   363d8:	bl	35c5c <__assert_fail@plt+0x230a0>
   363dc:	clz	r0, r0
   363e0:	lsr	r0, r0, #5
   363e4:	pop	{r4, r5, fp, pc}
   363e8:	cmp	r2, r1
   363ec:	bne	36418 <__assert_fail@plt+0x2385c>
   363f0:	lsl	r0, r2, #1
   363f4:	str	r0, [r4]
   363f8:	ldr	r0, [r4, #8]
   363fc:	lsl	r1, r2, #3
   36400:	bl	2f804 <__assert_fail@plt+0x1cc48>
   36404:	cmp	r0, #0
   36408:	moveq	r0, #0
   3640c:	popeq	{r4, r5, fp, pc}
   36410:	str	r0, [r4, #8]
   36414:	ldr	r1, [r4, #4]
   36418:	ldr	ip, [r4, #8]
   3641c:	ldr	r2, [ip]
   36420:	cmp	r2, r5
   36424:	ble	3645c <__assert_fail@plt+0x238a0>
   36428:	cmp	r1, #1
   3642c:	blt	3648c <__assert_fail@plt+0x238d0>
   36430:	add	r2, ip, r1, lsl #2
   36434:	add	r1, r1, #1
   36438:	mov	r3, r2
   3643c:	ldr	r0, [r3, #-4]!
   36440:	str	r0, [r2]
   36444:	sub	r1, r1, #1
   36448:	cmp	r1, #1
   3644c:	mov	r2, r3
   36450:	bgt	3643c <__assert_fail@plt+0x23880>
   36454:	sub	r1, r1, #1
   36458:	b	3648c <__assert_fail@plt+0x238d0>
   3645c:	add	r2, ip, r1, lsl #2
   36460:	ldr	r3, [r2, #-4]
   36464:	cmp	r3, r5
   36468:	ble	3648c <__assert_fail@plt+0x238d0>
   3646c:	sub	r1, r1, #2
   36470:	str	r3, [r2]
   36474:	ldr	r3, [r2, #-8]
   36478:	sub	r2, r2, #4
   3647c:	sub	r1, r1, #1
   36480:	cmp	r3, r5
   36484:	bgt	36470 <__assert_fail@plt+0x238b4>
   36488:	add	r1, r1, #2
   3648c:	str	r5, [ip, r1, lsl #2]
   36490:	b	363bc <__assert_fail@plt+0x23800>
   36494:	push	{r4, r5, fp, lr}
   36498:	add	fp, sp, #8
   3649c:	mov	ip, r0
   364a0:	ldr	r3, [r0, #8]
   364a4:	sub	lr, r3, #1
   364a8:	mvn	r0, #0
   364ac:	cmp	lr, #1
   364b0:	blt	36508 <__assert_fail@plt+0x2394c>
   364b4:	ldr	r4, [ip]
   364b8:	add	r4, r4, lr, lsl #3
   364bc:	ldr	r5, [r4, #4]
   364c0:	ands	r4, r5, #262144	; 0x40000
   364c4:	beq	36508 <__assert_fail@plt+0x2394c>
   364c8:	ldr	r4, [ip, #16]
   364cc:	sub	lr, r4, #4
   364d0:	ldr	r4, [lr, r3, lsl #2]
   364d4:	cmp	r4, r1
   364d8:	ubfxeq	r4, r5, #8, #10
   364dc:	cmpeq	r4, r2
   364e0:	beq	3650c <__assert_fail@plt+0x23950>
   364e4:	sub	r4, r3, #2
   364e8:	cmp	r4, #1
   364ec:	poplt	{r4, r5, fp, pc}
   364f0:	ldr	r4, [ip]
   364f4:	add	r4, r4, r3, lsl #3
   364f8:	ldr	r5, [r4, #-12]
   364fc:	ands	r4, r5, #262144	; 0x40000
   36500:	sub	r3, r3, #1
   36504:	bne	364d0 <__assert_fail@plt+0x23914>
   36508:	pop	{r4, r5, fp, pc}
   3650c:	sub	r0, r3, #1
   36510:	pop	{r4, r5, fp, pc}
   36514:	push	{r4, r5, fp, lr}
   36518:	add	fp, sp, #8
   3651c:	mov	r4, r1
   36520:	mov	r5, r0
   36524:	ldr	r0, [r0]
   36528:	ldr	r1, [r5, #4]
   3652c:	cmp	r0, r1
   36530:	bne	3655c <__assert_fail@plt+0x239a0>
   36534:	mov	r1, #2
   36538:	add	r0, r1, r0, lsl #1
   3653c:	str	r0, [r5]
   36540:	lsl	r1, r0, #2
   36544:	ldr	r0, [r5, #8]
   36548:	bl	2f804 <__assert_fail@plt+0x1cc48>
   3654c:	cmp	r0, #0
   36550:	moveq	r0, #0
   36554:	popeq	{r4, r5, fp, pc}
   36558:	str	r0, [r5, #8]
   3655c:	ldmib	r5, {r0, r1}
   36560:	add	r2, r0, #1
   36564:	str	r2, [r5, #4]
   36568:	str	r4, [r1, r0, lsl #2]
   3656c:	mov	r0, #1
   36570:	pop	{r4, r5, fp, pc}
   36574:	push	{r4, r5, fp, lr}
   36578:	add	fp, sp, #8
   3657c:	mov	r5, r1
   36580:	mov	r4, r0
   36584:	ldr	r0, [r1, #4]
   36588:	str	r0, [r4, #4]
   3658c:	ldr	r1, [r1, #4]
   36590:	cmp	r1, #1
   36594:	blt	365c8 <__assert_fail@plt+0x23a0c>
   36598:	str	r0, [r4]
   3659c:	lsl	r0, r0, #2
   365a0:	bl	2ed04 <__assert_fail@plt+0x1c148>
   365a4:	str	r0, [r4, #8]
   365a8:	cmp	r0, #0
   365ac:	beq	365dc <__assert_fail@plt+0x23a20>
   365b0:	ldr	r2, [r5, #4]
   365b4:	ldr	r1, [r5, #8]
   365b8:	lsl	r2, r2, #2
   365bc:	bl	125c8 <memcpy@plt>
   365c0:	mov	r0, #0
   365c4:	pop	{r4, r5, fp, pc}
   365c8:	mov	r0, #0
   365cc:	str	r0, [r4]
   365d0:	str	r0, [r4, #4]
   365d4:	str	r0, [r4, #8]
   365d8:	pop	{r4, r5, fp, pc}
   365dc:	mov	r0, #0
   365e0:	str	r0, [r4]
   365e4:	str	r0, [r4, #4]
   365e8:	mov	r0, #12
   365ec:	pop	{r4, r5, fp, pc}
   365f0:	mov	ip, r0
   365f4:	ldr	r0, [r0, #4]
   365f8:	cmp	r0, #1
   365fc:	movlt	r0, #0
   36600:	bxlt	lr
   36604:	push	{r4, r5, r6, r7, fp, lr}
   36608:	add	fp, sp, #16
   3660c:	subs	r2, r0, #1
   36610:	mov	r0, #0
   36614:	mov	r3, #0
   36618:	beq	36648 <__assert_fail@plt+0x23a8c>
   3661c:	ldr	lr, [ip, #8]
   36620:	mov	r3, #0
   36624:	mov	r4, #1
   36628:	add	r5, r2, r3
   3662c:	lsr	r6, r5, #1
   36630:	ldr	r7, [lr, r6, lsl #2]
   36634:	cmp	r7, r1
   36638:	movge	r2, r6
   3663c:	addlt	r3, r4, r5, lsr #1
   36640:	cmp	r3, r2
   36644:	bcc	36628 <__assert_fail@plt+0x23a6c>
   36648:	ldr	r2, [ip, #8]
   3664c:	ldr	r2, [r2, r3, lsl #2]
   36650:	cmp	r2, r1
   36654:	addeq	r0, r3, #1
   36658:	pop	{r4, r5, r6, r7, fp, pc}
   3665c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36660:	add	fp, sp, #28
   36664:	sub	sp, sp, #12
   36668:	mov	r6, r1
   3666c:	ldr	r1, [r2, #4]
   36670:	cmp	r1, #0
   36674:	beq	3673c <__assert_fail@plt+0x23b80>
   36678:	mov	r5, r3
   3667c:	mov	sl, r2
   36680:	str	r0, [sp, #4]
   36684:	mov	r0, r2
   36688:	mov	r1, r3
   3668c:	bl	36750 <__assert_fail@plt+0x23b94>
   36690:	mov	r4, r0
   36694:	ldr	r0, [r6, #32]
   36698:	str	r6, [sp, #8]
   3669c:	ldr	r1, [r6, #68]	; 0x44
   366a0:	and	r1, r1, r4
   366a4:	add	r1, r1, r1, lsl #1
   366a8:	mov	r6, r0
   366ac:	ldr	r2, [r6, r1, lsl #2]!
   366b0:	cmp	r2, #1
   366b4:	blt	36708 <__assert_fail@plt+0x23b4c>
   366b8:	add	r0, r0, r1, lsl #2
   366bc:	ldr	r8, [r0, #8]
   366c0:	mov	r9, #0
   366c4:	ldr	r7, [r8, r9, lsl #2]
   366c8:	ldr	r0, [r7]
   366cc:	cmp	r0, r4
   366d0:	bne	366f8 <__assert_fail@plt+0x23b3c>
   366d4:	ldrb	r0, [r7, #52]	; 0x34
   366d8:	and	r0, r0, #15
   366dc:	cmp	r0, r5
   366e0:	bne	366f8 <__assert_fail@plt+0x23b3c>
   366e4:	ldr	r0, [r7, #40]	; 0x28
   366e8:	mov	r1, sl
   366ec:	bl	3677c <__assert_fail@plt+0x23bc0>
   366f0:	cmp	r0, #0
   366f4:	bne	36744 <__assert_fail@plt+0x23b88>
   366f8:	ldr	r0, [r6]
   366fc:	add	r9, r9, #1
   36700:	cmp	r9, r0
   36704:	blt	366c4 <__assert_fail@plt+0x23b08>
   36708:	ldr	r0, [sp, #8]
   3670c:	mov	r1, sl
   36710:	mov	r2, r5
   36714:	mov	r3, r4
   36718:	bl	367dc <__assert_fail@plt+0x23c20>
   3671c:	mov	r7, r0
   36720:	cmp	r0, #0
   36724:	bne	36744 <__assert_fail@plt+0x23b88>
   36728:	mov	r0, #12
   3672c:	ldr	r1, [sp, #4]
   36730:	str	r0, [r1]
   36734:	mov	r7, #0
   36738:	b	36744 <__assert_fail@plt+0x23b88>
   3673c:	mov	r7, #0
   36740:	str	r7, [r0]
   36744:	mov	r0, r7
   36748:	sub	sp, fp, #28
   3674c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36750:	mov	r2, r0
   36754:	ldr	r3, [r0, #4]
   36758:	add	r0, r3, r1
   3675c:	cmp	r3, #1
   36760:	bxlt	lr
   36764:	ldr	r1, [r2, #8]
   36768:	ldr	r2, [r1], #4
   3676c:	add	r0, r2, r0
   36770:	subs	r3, r3, #1
   36774:	bne	36768 <__assert_fail@plt+0x23bac>
   36778:	bx	lr
   3677c:	push	{fp, lr}
   36780:	mov	fp, sp
   36784:	mov	lr, r0
   36788:	mov	r0, #0
   3678c:	cmp	lr, #0
   36790:	cmpne	r1, #0
   36794:	beq	367d8 <__assert_fail@plt+0x23c1c>
   36798:	ldr	ip, [lr, #4]
   3679c:	ldr	r3, [r1, #4]
   367a0:	cmp	ip, r3
   367a4:	popne	{fp, pc}
   367a8:	sub	r3, ip, #1
   367ac:	add	r2, r3, #1
   367b0:	cmp	r2, #1
   367b4:	movlt	r0, #1
   367b8:	poplt	{fp, pc}
   367bc:	ldr	r2, [r1, #8]
   367c0:	ldr	ip, [r2, r3, lsl #2]
   367c4:	ldr	r2, [lr, #8]
   367c8:	ldr	r2, [r2, r3, lsl #2]
   367cc:	sub	r3, r3, #1
   367d0:	cmp	r2, ip
   367d4:	beq	367ac <__assert_fail@plt+0x23bf0>
   367d8:	pop	{fp, pc}
   367dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   367e0:	add	fp, sp, #28
   367e4:	sub	sp, sp, #20
   367e8:	mov	r8, r3
   367ec:	mov	r9, r2
   367f0:	mov	r7, r1
   367f4:	mov	r6, r0
   367f8:	mov	r0, #56	; 0x38
   367fc:	mov	r1, #1
   36800:	bl	2c49c <__assert_fail@plt+0x198e0>
   36804:	cmp	r0, #0
   36808:	beq	369d4 <__assert_fail@plt+0x23e18>
   3680c:	mov	r4, r0
   36810:	add	r5, r0, #4
   36814:	mov	r0, r5
   36818:	mov	r1, r7
   3681c:	bl	36574 <__assert_fail@plt+0x239b8>
   36820:	cmp	r0, #0
   36824:	bne	369dc <__assert_fail@plt+0x23e20>
   36828:	str	r8, [sp, #4]
   3682c:	str	r5, [r4, #40]	; 0x28
   36830:	and	r0, r9, #15
   36834:	ldrb	r1, [r4, #52]	; 0x34
   36838:	and	r1, r1, #240	; 0xf0
   3683c:	orr	r0, r1, r0
   36840:	strb	r0, [r4, #52]	; 0x34
   36844:	ldr	r0, [r7, #4]
   36848:	cmp	r0, #1
   3684c:	blt	369a8 <__assert_fail@plt+0x23dec>
   36850:	mov	r3, r5
   36854:	and	r0, r9, #4
   36858:	str	r0, [sp]
   3685c:	and	r0, r9, #2
   36860:	str	r0, [sp, #8]
   36864:	and	r0, r9, #1
   36868:	str	r0, [sp, #16]
   3686c:	mov	r8, #0
   36870:	movw	r0, #65280	; 0xff00
   36874:	movt	r0, #3
   36878:	add	sl, r0, #255	; 0xff
   3687c:	mov	r9, #0
   36880:	str	r5, [sp, #12]
   36884:	ldr	r0, [r7, #8]
   36888:	ldr	r0, [r0, r8, lsl #2]
   3688c:	ldr	r1, [r6]
   36890:	add	r0, r1, r0, lsl #3
   36894:	ldr	r5, [r0, #4]
   36898:	and	r0, r5, sl
   3689c:	cmp	r0, #1
   368a0:	beq	36998 <__assert_fail@plt+0x23ddc>
   368a4:	movw	r0, #65280	; 0xff00
   368a8:	movt	r0, #3
   368ac:	and	r0, r5, r0
   368b0:	mov	r1, #32
   368b4:	and	r1, r1, r5, lsr #15
   368b8:	ldrb	r2, [r4, #52]	; 0x34
   368bc:	orr	r1, r2, r1
   368c0:	strb	r1, [r4, #52]	; 0x34
   368c4:	uxtb	r2, r5
   368c8:	cmp	r2, #2
   368cc:	beq	368e0 <__assert_fail@plt+0x23d24>
   368d0:	cmp	r2, #4
   368d4:	bne	368ec <__assert_fail@plt+0x23d30>
   368d8:	mov	r2, #64	; 0x40
   368dc:	b	368e4 <__assert_fail@plt+0x23d28>
   368e0:	mov	r2, #16
   368e4:	orr	r1, r1, r2
   368e8:	strb	r1, [r4, #52]	; 0x34
   368ec:	cmp	r0, #0
   368f0:	beq	36998 <__assert_fail@plt+0x23ddc>
   368f4:	ldr	r0, [r4, #40]	; 0x28
   368f8:	cmp	r0, r3
   368fc:	bne	36938 <__assert_fail@plt+0x23d7c>
   36900:	mov	r0, #12
   36904:	bl	2ed04 <__assert_fail@plt+0x1c148>
   36908:	cmp	r0, #0
   3690c:	beq	369cc <__assert_fail@plt+0x23e10>
   36910:	str	r0, [r4, #40]	; 0x28
   36914:	mov	r1, r7
   36918:	bl	36574 <__assert_fail@plt+0x239b8>
   3691c:	cmp	r0, #0
   36920:	bne	369cc <__assert_fail@plt+0x23e10>
   36924:	ldrb	r0, [r4, #52]	; 0x34
   36928:	orr	r0, r0, #128	; 0x80
   3692c:	strb	r0, [r4, #52]	; 0x34
   36930:	mov	r9, #0
   36934:	ldr	r3, [sp, #12]
   36938:	ldr	r0, [sp, #16]
   3693c:	cmp	r0, #0
   36940:	bne	3694c <__assert_fail@plt+0x23d90>
   36944:	ands	r0, r5, #256	; 0x100
   36948:	bne	36984 <__assert_fail@plt+0x23dc8>
   3694c:	ldr	r0, [sp, #16]
   36950:	cmp	r0, #0
   36954:	andsne	r0, r5, #512	; 0x200
   36958:	bne	36984 <__assert_fail@plt+0x23dc8>
   3695c:	ldr	r0, [sp, #8]
   36960:	cmp	r0, #0
   36964:	bne	36970 <__assert_fail@plt+0x23db4>
   36968:	ands	r0, r5, #4096	; 0x1000
   3696c:	bne	36984 <__assert_fail@plt+0x23dc8>
   36970:	ldr	r0, [sp]
   36974:	cmp	r0, #0
   36978:	bne	36998 <__assert_fail@plt+0x23ddc>
   3697c:	ands	r0, r5, #16384	; 0x4000
   36980:	beq	36998 <__assert_fail@plt+0x23ddc>
   36984:	sub	r1, r8, r9
   36988:	mov	r0, r3
   3698c:	bl	369e8 <__assert_fail@plt+0x23e2c>
   36990:	ldr	r3, [sp, #12]
   36994:	add	r9, r9, #1
   36998:	ldr	r0, [r7, #4]
   3699c:	add	r8, r8, #1
   369a0:	cmp	r8, r0
   369a4:	blt	36884 <__assert_fail@plt+0x23cc8>
   369a8:	mov	r0, r6
   369ac:	mov	r1, r4
   369b0:	ldr	r2, [sp, #4]
   369b4:	bl	36a30 <__assert_fail@plt+0x23e74>
   369b8:	cmp	r0, #0
   369bc:	bne	369cc <__assert_fail@plt+0x23e10>
   369c0:	mov	r0, r4
   369c4:	sub	sp, fp, #28
   369c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   369cc:	mov	r0, r4
   369d0:	bl	30f8c <__assert_fail@plt+0x1e3d0>
   369d4:	mov	r4, #0
   369d8:	b	369c0 <__assert_fail@plt+0x23e04>
   369dc:	mov	r0, r4
   369e0:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   369e4:	b	369d4 <__assert_fail@plt+0x23e18>
   369e8:	cmp	r1, #0
   369ec:	ldrge	r2, [r0, #4]
   369f0:	cmpge	r2, r1
   369f4:	bgt	369fc <__assert_fail@plt+0x23e40>
   369f8:	bx	lr
   369fc:	sub	r2, r2, #1
   36a00:	str	r2, [r0, #4]
   36a04:	cmp	r2, r1
   36a08:	bxle	lr
   36a0c:	ldr	r2, [r0, #8]
   36a10:	add	r3, r2, r1, lsl #2
   36a14:	ldr	r3, [r3, #4]
   36a18:	str	r3, [r2, r1, lsl #2]
   36a1c:	add	r1, r1, #1
   36a20:	ldr	r3, [r0, #4]
   36a24:	cmp	r1, r3
   36a28:	blt	36a10 <__assert_fail@plt+0x23e54>
   36a2c:	b	369f8 <__assert_fail@plt+0x23e3c>
   36a30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36a34:	add	fp, sp, #28
   36a38:	sub	sp, sp, #4
   36a3c:	mov	r9, r2
   36a40:	mov	r4, r1
   36a44:	mov	r7, r0
   36a48:	str	r2, [r1]
   36a4c:	ldr	r1, [r1, #8]
   36a50:	add	r5, r4, #16
   36a54:	mov	r0, r5
   36a58:	bl	35eb4 <__assert_fail@plt+0x232f8>
   36a5c:	mov	r8, #12
   36a60:	cmp	r0, #0
   36a64:	bne	36af8 <__assert_fail@plt+0x23f3c>
   36a68:	ldr	r0, [r4, #8]
   36a6c:	cmp	r0, #1
   36a70:	blt	36ab4 <__assert_fail@plt+0x23ef8>
   36a74:	mov	r6, #0
   36a78:	ldr	r0, [r4, #12]
   36a7c:	ldr	r1, [r0, r6, lsl #2]
   36a80:	ldr	r0, [r7]
   36a84:	add	r0, r0, r1, lsl #3
   36a88:	ldrb	r0, [r0, #4]
   36a8c:	tst	r0, #8
   36a90:	bne	36aa4 <__assert_fail@plt+0x23ee8>
   36a94:	mov	r0, r5
   36a98:	bl	36514 <__assert_fail@plt+0x23958>
   36a9c:	cmp	r0, #0
   36aa0:	beq	36af8 <__assert_fail@plt+0x23f3c>
   36aa4:	ldr	r0, [r4, #8]
   36aa8:	add	r6, r6, #1
   36aac:	cmp	r6, r0
   36ab0:	blt	36a78 <__assert_fail@plt+0x23ebc>
   36ab4:	ldr	sl, [r7, #32]
   36ab8:	ldr	r0, [r7, #68]	; 0x44
   36abc:	and	r0, r0, r9
   36ac0:	add	r7, r0, r0, lsl #1
   36ac4:	mov	r6, sl
   36ac8:	ldr	r1, [r6, r7, lsl #2]!
   36acc:	mov	r5, r6
   36ad0:	ldr	r0, [r5, #4]!
   36ad4:	cmp	r0, r1
   36ad8:	ble	36b04 <__assert_fail@plt+0x23f48>
   36adc:	add	r0, sl, r7, lsl #2
   36ae0:	ldr	r0, [r0, #8]
   36ae4:	ldr	r1, [r6]
   36ae8:	add	r2, r1, #1
   36aec:	str	r2, [r6]
   36af0:	str	r4, [r0, r1, lsl #2]
   36af4:	mov	r8, #0
   36af8:	mov	r0, r8
   36afc:	sub	sp, fp, #28
   36b00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36b04:	add	r9, sl, r7, lsl #2
   36b08:	ldr	r0, [r9, #8]!
   36b0c:	mov	r2, #2
   36b10:	add	r1, r2, r1, lsl #1
   36b14:	str	r1, [sp]
   36b18:	lsl	r1, r1, #2
   36b1c:	bl	2f804 <__assert_fail@plt+0x1cc48>
   36b20:	cmp	r0, #0
   36b24:	beq	36af8 <__assert_fail@plt+0x23f3c>
   36b28:	str	r0, [r9]
   36b2c:	ldr	r0, [sp]
   36b30:	str	r0, [r5]
   36b34:	b	36adc <__assert_fail@plt+0x23f20>
   36b38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36b3c:	add	fp, sp, #28
   36b40:	sub	sp, sp, #4
   36b44:	mov	r5, r2
   36b48:	mov	sl, r1
   36b4c:	mov	r4, r0
   36b50:	add	r8, r2, #1
   36b54:	cmp	r3, #1
   36b58:	beq	36bac <__assert_fail@plt+0x23ff0>
   36b5c:	mov	r6, #2
   36b60:	cmp	r3, #0
   36b64:	bne	36bbc <__assert_fail@plt+0x24000>
   36b68:	lsl	r6, r8, #2
   36b6c:	mov	r0, r6
   36b70:	bl	2ed04 <__assert_fail@plt+0x1c148>
   36b74:	str	r0, [r4, #4]
   36b78:	mov	r7, #0
   36b7c:	cmp	r0, #0
   36b80:	beq	36c70 <__assert_fail@plt+0x240b4>
   36b84:	mov	r0, r6
   36b88:	bl	2ed04 <__assert_fail@plt+0x1c148>
   36b8c:	str	r0, [r4, #8]
   36b90:	cmp	r0, #0
   36b94:	beq	36c7c <__assert_fail@plt+0x240c0>
   36b98:	str	r8, [r4]
   36b9c:	mov	r6, #1
   36ba0:	cmp	r5, #1
   36ba4:	bge	36bc4 <__assert_fail@plt+0x24008>
   36ba8:	b	36c3c <__assert_fail@plt+0x24080>
   36bac:	ldr	r0, [r4]
   36bb0:	mov	r6, #1
   36bb4:	cmp	r8, r0
   36bb8:	bhi	36bf0 <__assert_fail@plt+0x24034>
   36bbc:	cmp	r5, #1
   36bc0:	blt	36c3c <__assert_fail@plt+0x24080>
   36bc4:	add	r0, sl, #4
   36bc8:	ldmib	r4, {r1, r2}
   36bcc:	mov	r3, r5
   36bd0:	ldr	r7, [r0, #-4]
   36bd4:	str	r7, [r1], #4
   36bd8:	ldr	r7, [r0]
   36bdc:	str	r7, [r2], #4
   36be0:	add	r0, r0, #8
   36be4:	subs	r3, r3, #1
   36be8:	bne	36bd0 <__assert_fail@plt+0x24014>
   36bec:	b	36c40 <__assert_fail@plt+0x24084>
   36bf0:	ldr	r0, [r4, #4]
   36bf4:	lsl	r9, r8, #2
   36bf8:	mov	r1, r9
   36bfc:	bl	2f804 <__assert_fail@plt+0x1cc48>
   36c00:	mov	r7, #0
   36c04:	str	r0, [sp]
   36c08:	cmp	r0, #0
   36c0c:	beq	36c70 <__assert_fail@plt+0x240b4>
   36c10:	ldr	r0, [r4, #8]
   36c14:	mov	r1, r9
   36c18:	bl	2f804 <__assert_fail@plt+0x1cc48>
   36c1c:	cmp	r0, #0
   36c20:	beq	36c88 <__assert_fail@plt+0x240cc>
   36c24:	str	r8, [r4]
   36c28:	ldr	r1, [sp]
   36c2c:	str	r1, [r4, #4]
   36c30:	str	r0, [r4, #8]
   36c34:	cmp	r5, #1
   36c38:	bge	36bc4 <__assert_fail@plt+0x24008>
   36c3c:	mov	r5, #0
   36c40:	ldr	r0, [r4]
   36c44:	cmp	r5, r0
   36c48:	bcs	36c6c <__assert_fail@plt+0x240b0>
   36c4c:	ldmib	r4, {r0, r1}
   36c50:	mvn	r2, #0
   36c54:	str	r2, [r1, r5, lsl #2]
   36c58:	str	r2, [r0, r5, lsl #2]
   36c5c:	add	r5, r5, #1
   36c60:	ldr	r3, [r4]
   36c64:	cmp	r5, r3
   36c68:	bcc	36c54 <__assert_fail@plt+0x24098>
   36c6c:	mov	r7, r6
   36c70:	mov	r0, r7
   36c74:	sub	sp, fp, #28
   36c78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36c7c:	ldr	r0, [r4, #4]
   36c80:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   36c84:	b	36c70 <__assert_fail@plt+0x240b4>
   36c88:	ldr	r0, [sp]
   36c8c:	b	36c80 <__assert_fail@plt+0x240c4>
   36c90:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   36c94:	add	fp, sp, #24
   36c98:	sub	sp, sp, #8
   36c9c:	mov	r7, r3
   36ca0:	mov	r4, r2
   36ca4:	mov	r8, r1
   36ca8:	mov	r5, r0
   36cac:	ldr	r9, [fp, #16]
   36cb0:	ldr	r6, [r9, #92]	; 0x5c
   36cb4:	str	r9, [sp, #4]
   36cb8:	ldr	r0, [fp, #12]
   36cbc:	str	r0, [sp]
   36cc0:	ldr	r3, [fp, #8]
   36cc4:	mov	r0, r1
   36cc8:	mov	r1, r2
   36ccc:	mov	r2, r5
   36cd0:	bl	31a14 <__assert_fail@plt+0x1ee58>
   36cd4:	cmp	r6, r7
   36cd8:	movgt	r7, r6
   36cdc:	add	r1, r4, #1
   36ce0:	cmp	r1, r7
   36ce4:	movge	r1, r7
   36ce8:	mov	r0, r5
   36cec:	bl	31a6c <__assert_fail@plt+0x1eeb0>
   36cf0:	cmp	r0, #0
   36cf4:	bne	36d38 <__assert_fail@plt+0x2417c>
   36cf8:	add	r1, r9, #96	; 0x60
   36cfc:	str	r1, [r5, #68]	; 0x44
   36d00:	ldrb	r1, [r9, #88]	; 0x58
   36d04:	ubfx	r1, r1, #4, #1
   36d08:	strb	r1, [r5, #78]	; 0x4e
   36d0c:	ldrb	r1, [r5, #75]	; 0x4b
   36d10:	cmp	r1, #0
   36d14:	beq	36d20 <__assert_fail@plt+0x24164>
   36d18:	mov	r4, #0
   36d1c:	b	36d30 <__assert_fail@plt+0x24174>
   36d20:	str	r8, [r5, #4]
   36d24:	ldr	r1, [r9, #92]	; 0x5c
   36d28:	cmp	r1, #1
   36d2c:	movwgt	r4, #0
   36d30:	str	r4, [r5, #28]
   36d34:	str	r4, [r5, #32]
   36d38:	sub	sp, fp, #24
   36d3c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   36d40:	push	{r4, r5, r6, sl, fp, lr}
   36d44:	add	fp, sp, #16
   36d48:	mov	r4, r2
   36d4c:	mov	r5, r0
   36d50:	mvn	r0, #0
   36d54:	str	r1, [r5, #88]	; 0x58
   36d58:	str	r0, [r5, #92]	; 0x5c
   36d5c:	cmp	r2, #1
   36d60:	blt	36dac <__assert_fail@plt+0x241f0>
   36d64:	mov	r6, #12
   36d68:	movw	r0, #43690	; 0xaaaa
   36d6c:	movt	r0, #2730	; 0xaaa
   36d70:	cmp	r4, r0
   36d74:	bhi	36da4 <__assert_fail@plt+0x241e8>
   36d78:	add	r0, r4, r4, lsl #1
   36d7c:	lsl	r0, r0, #3
   36d80:	bl	2ed04 <__assert_fail@plt+0x1c148>
   36d84:	str	r0, [r5, #116]	; 0x74
   36d88:	lsl	r0, r4, #2
   36d8c:	bl	2ed04 <__assert_fail@plt+0x1c148>
   36d90:	str	r0, [r5, #132]	; 0x84
   36d94:	cmp	r0, #0
   36d98:	ldrne	r0, [r5, #116]	; 0x74
   36d9c:	cmpne	r0, #0
   36da0:	bne	36dac <__assert_fail@plt+0x241f0>
   36da4:	mov	r0, r6
   36da8:	pop	{r4, r5, r6, sl, fp, pc}
   36dac:	mov	r0, #1
   36db0:	str	r0, [r5, #120]	; 0x78
   36db4:	str	r4, [r5, #112]	; 0x70
   36db8:	str	r4, [r5, #128]	; 0x80
   36dbc:	mov	r6, #0
   36dc0:	mov	r0, r6
   36dc4:	pop	{r4, r5, r6, sl, fp, pc}
   36dc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36dcc:	add	fp, sp, #28
   36dd0:	sub	sp, sp, #28
   36dd4:	mov	r6, r2
   36dd8:	mov	r7, r1
   36ddc:	mov	r4, r0
   36de0:	ldr	r0, [r0, #24]
   36de4:	cmp	r0, r1
   36de8:	ble	36f54 <__assert_fail@plt+0x24398>
   36dec:	ldr	r0, [r4, #80]	; 0x50
   36df0:	cmp	r0, #2
   36df4:	movge	r0, #0
   36df8:	strge	r0, [r4, #16]
   36dfc:	strge	r0, [r4, #20]
   36e00:	mov	r0, #0
   36e04:	str	r0, [r4, #24]
   36e08:	str	r0, [r4, #28]
   36e0c:	str	r0, [r4, #32]
   36e10:	strb	r0, [r4, #76]	; 0x4c
   36e14:	mov	r0, #4
   36e18:	tst	r6, #1
   36e1c:	movweq	r0, #6
   36e20:	ldr	r1, [r4, #44]	; 0x2c
   36e24:	ldr	r2, [r4, #52]	; 0x34
   36e28:	str	r1, [r4, #48]	; 0x30
   36e2c:	str	r2, [r4, #56]	; 0x38
   36e30:	str	r0, [r4, #60]	; 0x3c
   36e34:	ldrb	r0, [r4, #75]	; 0x4b
   36e38:	cmp	r0, #0
   36e3c:	mov	r5, r7
   36e40:	ldreq	r0, [r4]
   36e44:	streq	r0, [r4, #4]
   36e48:	moveq	r5, r7
   36e4c:	cmp	r5, #0
   36e50:	beq	36edc <__assert_fail@plt+0x24320>
   36e54:	ldr	r0, [r4, #32]
   36e58:	cmp	r5, r0
   36e5c:	bge	36f64 <__assert_fail@plt+0x243a8>
   36e60:	ldrb	r0, [r4, #76]	; 0x4c
   36e64:	cmp	r0, #0
   36e68:	bne	37098 <__assert_fail@plt+0x244dc>
   36e6c:	sub	r1, r5, #1
   36e70:	mov	r0, r4
   36e74:	mov	r2, r6
   36e78:	bl	37d4c <__assert_fail@plt+0x25190>
   36e7c:	str	r0, [r4, #60]	; 0x3c
   36e80:	ldr	r0, [r4, #80]	; 0x50
   36e84:	cmp	r0, #2
   36e88:	blt	36ea4 <__assert_fail@plt+0x242e8>
   36e8c:	ldr	r0, [r4, #8]
   36e90:	ldr	r2, [r4, #28]
   36e94:	add	r1, r0, r5, lsl #2
   36e98:	sub	r2, r2, r5
   36e9c:	lsl	r2, r2, #2
   36ea0:	bl	1255c <memmove@plt>
   36ea4:	ldrb	r0, [r4, #75]	; 0x4b
   36ea8:	cmp	r0, #0
   36eac:	bne	3718c <__assert_fail@plt+0x245d0>
   36eb0:	ldr	r0, [r4, #28]
   36eb4:	ldr	r1, [r4, #32]
   36eb8:	sub	r0, r0, r5
   36ebc:	sub	r1, r1, r5
   36ec0:	str	r0, [r4, #28]
   36ec4:	str	r1, [r4, #32]
   36ec8:	ldrb	r0, [r4, #75]	; 0x4b
   36ecc:	cmp	r0, #0
   36ed0:	ldreq	r0, [r4, #4]
   36ed4:	addeq	r0, r0, r5
   36ed8:	streq	r0, [r4, #4]
   36edc:	str	r7, [r4, #24]
   36ee0:	ldr	r0, [r4, #48]	; 0x30
   36ee4:	ldr	r1, [r4, #56]	; 0x38
   36ee8:	ldr	r2, [r4, #80]	; 0x50
   36eec:	sub	r0, r0, r5
   36ef0:	str	r0, [r4, #48]	; 0x30
   36ef4:	sub	r1, r1, r5
   36ef8:	str	r1, [r4, #56]	; 0x38
   36efc:	cmp	r2, #2
   36f00:	blt	36f28 <__assert_fail@plt+0x2436c>
   36f04:	ldrb	r0, [r4, #72]	; 0x48
   36f08:	cmp	r0, #0
   36f0c:	beq	36f3c <__assert_fail@plt+0x24380>
   36f10:	mov	r0, r4
   36f14:	bl	31b10 <__assert_fail@plt+0x1ef54>
   36f18:	cmp	r0, #0
   36f1c:	beq	36f44 <__assert_fail@plt+0x24388>
   36f20:	sub	sp, fp, #28
   36f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36f28:	ldrb	r1, [r4, #75]	; 0x4b
   36f2c:	cmp	r1, #0
   36f30:	bne	371a4 <__assert_fail@plt+0x245e8>
   36f34:	str	r0, [r4, #28]
   36f38:	b	36f44 <__assert_fail@plt+0x24388>
   36f3c:	mov	r0, r4
   36f40:	bl	32144 <__assert_fail@plt+0x1f588>
   36f44:	mov	r0, #0
   36f48:	str	r0, [r4, #40]	; 0x28
   36f4c:	sub	sp, fp, #28
   36f50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36f54:	sub	r5, r7, r0
   36f58:	cmp	r5, #0
   36f5c:	bne	36e54 <__assert_fail@plt+0x24298>
   36f60:	b	36edc <__assert_fail@plt+0x24320>
   36f64:	ldr	r9, [r4, #28]
   36f68:	ldrb	r0, [r4, #76]	; 0x4c
   36f6c:	cmp	r0, #0
   36f70:	bne	3731c <__assert_fail@plt+0x24760>
   36f74:	mov	r0, #0
   36f78:	str	r0, [r4, #28]
   36f7c:	ldr	r1, [r4, #80]	; 0x50
   36f80:	cmp	r1, #2
   36f84:	blt	371bc <__assert_fail@plt+0x24600>
   36f88:	mvn	r0, #0
   36f8c:	str	r0, [sp, #24]
   36f90:	ldrb	r0, [r4, #73]	; 0x49
   36f94:	cmp	r0, #0
   36f98:	beq	3704c <__assert_fail@plt+0x24490>
   36f9c:	ldr	r2, [r4]
   36fa0:	ldr	r0, [r4, #24]
   36fa4:	add	r0, r2, r0
   36fa8:	add	r8, r0, r5
   36fac:	sub	r1, r5, r1
   36fb0:	add	r1, r0, r1
   36fb4:	cmp	r1, r2
   36fb8:	movcc	r1, r2
   36fbc:	mov	sl, r8
   36fc0:	sub	sl, sl, #1
   36fc4:	cmp	sl, r1
   36fc8:	bcc	37040 <__assert_fail@plt+0x24484>
   36fcc:	ldrb	r2, [sl]
   36fd0:	and	r2, r2, #192	; 0xc0
   36fd4:	cmp	r2, #128	; 0x80
   36fd8:	beq	36fc0 <__assert_fail@plt+0x24404>
   36fdc:	ldr	r1, [r4, #48]	; 0x30
   36fe0:	add	r3, r0, r1
   36fe4:	sub	r2, r3, sl
   36fe8:	ldr	r0, [r4, #64]	; 0x40
   36fec:	cmp	r0, #0
   36ff0:	mov	r1, sl
   36ff4:	bne	373a4 <__assert_fail@plt+0x247e8>
   36ff8:	mov	r0, #0
   36ffc:	str	r0, [sp, #20]
   37000:	str	r0, [sp, #16]
   37004:	add	r0, sp, #12
   37008:	add	r3, sp, #16
   3700c:	bl	2ed34 <__assert_fail@plt+0x1c178>
   37010:	sub	r1, r8, sl
   37014:	cmp	r0, r1
   37018:	bcc	37040 <__assert_fail@plt+0x24484>
   3701c:	cmn	r0, #3
   37020:	bhi	37040 <__assert_fail@plt+0x24484>
   37024:	mov	r2, #0
   37028:	str	r2, [r4, #16]
   3702c:	str	r2, [r4, #20]
   37030:	sub	r0, r0, r1
   37034:	str	r0, [r4, #28]
   37038:	ldr	r0, [sp, #12]
   3703c:	str	r0, [sp, #24]
   37040:	ldr	r8, [sp, #24]
   37044:	cmn	r8, #1
   37048:	bne	37070 <__assert_fail@plt+0x244b4>
   3704c:	add	r2, sp, #24
   37050:	mov	r0, r4
   37054:	mov	r1, r7
   37058:	bl	37e18 <__assert_fail@plt+0x2525c>
   3705c:	sub	r0, r0, r7
   37060:	str	r0, [r4, #28]
   37064:	ldr	r8, [sp, #24]
   37068:	cmn	r8, #1
   3706c:	beq	372e0 <__assert_fail@plt+0x24724>
   37070:	ldrb	r0, [r4, #78]	; 0x4e
   37074:	cmp	r0, #0
   37078:	bne	37380 <__assert_fail@plt+0x247c4>
   3707c:	mov	r0, #0
   37080:	cmp	r8, #10
   37084:	bne	372f0 <__assert_fail@plt+0x24734>
   37088:	ldrb	r0, [r4, #77]	; 0x4d
   3708c:	cmp	r0, #0
   37090:	movwne	r0, #2
   37094:	b	372f0 <__assert_fail@plt+0x24734>
   37098:	ldr	r8, [r4, #12]
   3709c:	ldr	r9, [r4, #28]
   370a0:	mov	r0, #0
   370a4:	mov	r1, r9
   370a8:	add	r2, r0, r1
   370ac:	add	r2, r2, r2, lsr #31
   370b0:	asr	sl, r2, #1
   370b4:	ldr	r2, [r8, sl, lsl #2]
   370b8:	cmp	r2, r5
   370bc:	mov	r3, sl
   370c0:	bgt	370d0 <__assert_fail@plt+0x24514>
   370c4:	bge	370dc <__assert_fail@plt+0x24520>
   370c8:	add	r0, sl, #1
   370cc:	mov	r3, r1
   370d0:	cmp	r0, r3
   370d4:	mov	r1, r3
   370d8:	blt	370a8 <__assert_fail@plt+0x244ec>
   370dc:	cmp	r2, r5
   370e0:	addlt	sl, sl, #1
   370e4:	sub	r1, sl, #1
   370e8:	mov	r0, r4
   370ec:	mov	r2, r6
   370f0:	bl	37d4c <__assert_fail@plt+0x25190>
   370f4:	str	r0, [r4, #60]	; 0x3c
   370f8:	cmp	r9, r5
   370fc:	ble	37110 <__assert_fail@plt+0x24554>
   37100:	cmp	sl, r5
   37104:	ldreq	r0, [r8, sl, lsl #2]
   37108:	cmpeq	r0, r5
   3710c:	beq	3726c <__assert_fail@plt+0x246b0>
   37110:	mov	r0, #0
   37114:	strb	r0, [r4, #76]	; 0x4c
   37118:	sub	r0, r5, r7
   3711c:	ldr	r1, [r4, #44]	; 0x2c
   37120:	ldr	r2, [r4, #52]	; 0x34
   37124:	add	r1, r0, r1
   37128:	str	r1, [r4, #48]	; 0x30
   3712c:	add	r0, r0, r2
   37130:	str	r0, [r4, #56]	; 0x38
   37134:	sub	r1, r8, #4
   37138:	mov	r0, sl
   3713c:	cmp	sl, #1
   37140:	blt	37154 <__assert_fail@plt+0x24598>
   37144:	ldr	r2, [r1, r0, lsl #2]
   37148:	sub	sl, r0, #1
   3714c:	cmp	r2, r5
   37150:	beq	37138 <__assert_fail@plt+0x2457c>
   37154:	cmp	r0, r9
   37158:	bge	37178 <__assert_fail@plt+0x245bc>
   3715c:	ldr	r1, [r4, #8]
   37160:	ldr	r2, [r1, r0, lsl #2]
   37164:	cmn	r2, #1
   37168:	bne	37178 <__assert_fail@plt+0x245bc>
   3716c:	add	r0, r0, #1
   37170:	cmp	r0, r9
   37174:	blt	37160 <__assert_fail@plt+0x245a4>
   37178:	cmp	r0, r9
   3717c:	bne	37208 <__assert_fail@plt+0x2464c>
   37180:	mov	r0, #0
   37184:	str	r0, [r4, #28]
   37188:	b	37300 <__assert_fail@plt+0x24744>
   3718c:	ldr	r0, [r4, #4]
   37190:	ldr	r2, [r4, #28]
   37194:	add	r1, r0, r5
   37198:	sub	r2, r2, r5
   3719c:	bl	1255c <memmove@plt>
   371a0:	b	36eb0 <__assert_fail@plt+0x242f4>
   371a4:	ldrb	r0, [r4, #72]	; 0x48
   371a8:	cmp	r0, #0
   371ac:	beq	37254 <__assert_fail@plt+0x24698>
   371b0:	mov	r0, r4
   371b4:	bl	320d8 <__assert_fail@plt+0x1f51c>
   371b8:	b	36f44 <__assert_fail@plt+0x24388>
   371bc:	ldr	r2, [r4]
   371c0:	ldr	r3, [r4, #24]
   371c4:	ldr	r1, [r4, #64]	; 0x40
   371c8:	add	r3, r5, r3
   371cc:	add	r2, r2, r3
   371d0:	ldrb	r6, [r2, #-1]
   371d4:	str	r0, [r4, #32]
   371d8:	cmp	r1, #0
   371dc:	ldrbne	r6, [r1, r6]
   371e0:	ldr	r0, [r4, #68]	; 0x44
   371e4:	mov	r1, r6
   371e8:	bl	37ec4 <__assert_fail@plt+0x25308>
   371ec:	mov	r1, #1
   371f0:	cmp	r0, #0
   371f4:	moveq	r1, #0
   371f8:	cmpeq	r6, #10
   371fc:	beq	3730c <__assert_fail@plt+0x24750>
   37200:	str	r1, [r4, #60]	; 0x3c
   37204:	b	36ec8 <__assert_fail@plt+0x2430c>
   37208:	ldr	r0, [r8, r0, lsl #2]
   3720c:	subs	r0, r0, r5
   37210:	str	r0, [r4, #28]
   37214:	beq	37300 <__assert_fail@plt+0x24744>
   37218:	ldr	r2, [r4, #28]
   3721c:	cmp	r2, #1
   37220:	blt	37244 <__assert_fail@plt+0x24688>
   37224:	ldr	r0, [r4, #8]
   37228:	mov	r1, #0
   3722c:	mvn	r3, #0
   37230:	str	r3, [r0, r1, lsl #2]
   37234:	add	r1, r1, #1
   37238:	ldr	r2, [r4, #28]
   3723c:	cmp	r1, r2
   37240:	blt	37230 <__assert_fail@plt+0x24674>
   37244:	ldr	r0, [r4, #4]
   37248:	mov	r1, #255	; 0xff
   3724c:	bl	12904 <memset@plt>
   37250:	b	37300 <__assert_fail@plt+0x24744>
   37254:	ldr	r0, [r4, #64]	; 0x40
   37258:	cmp	r0, #0
   3725c:	beq	36f44 <__assert_fail@plt+0x24388>
   37260:	mov	r0, r4
   37264:	bl	322d4 <__assert_fail@plt+0x1f718>
   37268:	b	36f44 <__assert_fail@plt+0x24388>
   3726c:	ldr	r0, [r4, #8]
   37270:	add	r1, r0, r5, lsl #2
   37274:	sub	r2, r9, r5
   37278:	lsl	r2, r2, #2
   3727c:	bl	1255c <memmove@plt>
   37280:	ldr	r0, [r4, #4]
   37284:	ldr	r2, [r4, #28]
   37288:	add	r1, r0, r5
   3728c:	sub	r2, r2, r5
   37290:	bl	1255c <memmove@plt>
   37294:	ldr	r0, [r4, #28]
   37298:	ldr	r1, [r4, #32]
   3729c:	sub	r0, r0, r5
   372a0:	sub	r1, r1, r5
   372a4:	str	r0, [r4, #28]
   372a8:	str	r1, [r4, #32]
   372ac:	cmp	r0, #1
   372b0:	blt	36ec8 <__assert_fail@plt+0x2430c>
   372b4:	ldr	r0, [r4, #12]
   372b8:	add	r1, r0, r5, lsl #2
   372bc:	mov	r2, #0
   372c0:	ldr	r3, [r1, r2, lsl #2]
   372c4:	sub	r3, r3, r5
   372c8:	str	r3, [r0, r2, lsl #2]
   372cc:	add	r2, r2, #1
   372d0:	ldr	r3, [r4, #28]
   372d4:	cmp	r2, r3
   372d8:	blt	372c0 <__assert_fail@plt+0x24704>
   372dc:	b	36ec8 <__assert_fail@plt+0x2430c>
   372e0:	sub	r1, r9, #1
   372e4:	mov	r0, r4
   372e8:	mov	r2, r6
   372ec:	bl	37d4c <__assert_fail@plt+0x25190>
   372f0:	str	r0, [r4, #60]	; 0x3c
   372f4:	ldr	r0, [r4, #28]
   372f8:	cmp	r0, #0
   372fc:	bne	37344 <__assert_fail@plt+0x24788>
   37300:	ldr	r0, [r4, #28]
   37304:	str	r0, [r4, #32]
   37308:	b	36ec8 <__assert_fail@plt+0x2430c>
   3730c:	ldrb	r1, [r4, #77]	; 0x4d
   37310:	cmp	r1, #0
   37314:	movwne	r1, #2
   37318:	b	37200 <__assert_fail@plt+0x24644>
   3731c:	mov	r0, #0
   37320:	strb	r0, [r4, #76]	; 0x4c
   37324:	sub	r0, r5, r7
   37328:	ldr	r1, [r4, #44]	; 0x2c
   3732c:	ldr	r2, [r4, #52]	; 0x34
   37330:	add	r1, r0, r1
   37334:	str	r1, [r4, #48]	; 0x30
   37338:	add	r0, r0, r2
   3733c:	str	r0, [r4, #56]	; 0x38
   37340:	b	36f74 <__assert_fail@plt+0x243b8>
   37344:	ldr	r2, [r4, #28]
   37348:	cmp	r2, #1
   3734c:	blt	37370 <__assert_fail@plt+0x247b4>
   37350:	ldr	r0, [r4, #8]
   37354:	mov	r1, #0
   37358:	mvn	r3, #0
   3735c:	str	r3, [r0, r1, lsl #2]
   37360:	add	r1, r1, #1
   37364:	ldr	r2, [r4, #28]
   37368:	cmp	r1, r2
   3736c:	blt	3735c <__assert_fail@plt+0x247a0>
   37370:	ldrb	r0, [r4, #75]	; 0x4b
   37374:	cmp	r0, #0
   37378:	bne	37244 <__assert_fail@plt+0x24688>
   3737c:	b	37300 <__assert_fail@plt+0x24744>
   37380:	mov	r0, r8
   37384:	bl	128e0 <iswalnum@plt>
   37388:	mov	r1, r0
   3738c:	mov	r0, #1
   37390:	cmp	r8, #95	; 0x5f
   37394:	beq	372f0 <__assert_fail@plt+0x24734>
   37398:	cmp	r1, #0
   3739c:	beq	3707c <__assert_fail@plt+0x244c0>
   373a0:	b	372f0 <__assert_fail@plt+0x24734>
   373a4:	cmp	r2, #1
   373a8:	blt	373ec <__assert_fail@plt+0x24830>
   373ac:	sub	r1, sl, #1
   373b0:	sub	r1, r1, r3
   373b4:	cmn	r1, #7
   373b8:	mvnle	r1, #6
   373bc:	mvn	r3, #1
   373c0:	sub	ip, r3, r1
   373c4:	add	r1, sp, #6
   373c8:	ldrb	r3, [sl, ip]
   373cc:	ldrb	r3, [r0, r3]
   373d0:	strb	r3, [r1, ip]
   373d4:	sub	lr, ip, #1
   373d8:	add	r3, ip, #1
   373dc:	cmp	r3, #1
   373e0:	mov	ip, lr
   373e4:	bgt	373c8 <__assert_fail@plt+0x2480c>
   373e8:	b	36ff8 <__assert_fail@plt+0x2443c>
   373ec:	add	r1, sp, #6
   373f0:	b	36ff8 <__assert_fail@plt+0x2443c>
   373f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   373f8:	add	fp, sp, #28
   373fc:	sub	sp, sp, #20
   37400:	mov	sl, r2
   37404:	str	r1, [sp, #12]
   37408:	mov	r7, r0
   3740c:	ldr	r5, [r0, #84]	; 0x54
   37410:	ldr	r8, [r0, #40]	; 0x28
   37414:	mov	r0, #0
   37418:	str	r0, [sp, #16]
   3741c:	cmp	r2, #0
   37420:	str	r2, [sp, #4]
   37424:	movwne	sl, #1
   37428:	ldr	r4, [r5, #36]	; 0x24
   3742c:	ldrsb	r0, [r4, #52]	; 0x34
   37430:	cmn	r0, #1
   37434:	bgt	374a0 <__assert_fail@plt+0x248e4>
   37438:	ldr	r2, [r7, #88]	; 0x58
   3743c:	sub	r1, r8, #1
   37440:	mov	r0, r7
   37444:	bl	37d4c <__assert_fail@plt+0x25190>
   37448:	tst	r0, #1
   3744c:	bne	3749c <__assert_fail@plt+0x248e0>
   37450:	mov	r3, r0
   37454:	cmp	r0, #0
   37458:	beq	374a0 <__assert_fail@plt+0x248e4>
   3745c:	ands	r1, r3, #2
   37460:	and	r0, r3, #4
   37464:	cmpne	r0, #0
   37468:	bne	374f8 <__assert_fail@plt+0x2493c>
   3746c:	cmp	r1, #0
   37470:	bne	37508 <__assert_fail@plt+0x2494c>
   37474:	cmp	r0, #0
   37478:	beq	374a0 <__assert_fail@plt+0x248e4>
   3747c:	ldr	r2, [r4, #40]	; 0x28
   37480:	add	r0, sp, #16
   37484:	mov	r1, r5
   37488:	bl	3665c <__assert_fail@plt+0x23aa0>
   3748c:	mov	r4, r0
   37490:	cmp	r4, #0
   37494:	bne	374a8 <__assert_fail@plt+0x248ec>
   37498:	b	376ac <__assert_fail@plt+0x24af0>
   3749c:	ldr	r4, [r5, #40]	; 0x28
   374a0:	cmp	r4, #0
   374a4:	beq	376ac <__assert_fail@plt+0x24af0>
   374a8:	ldr	r0, [r7, #100]	; 0x64
   374ac:	cmp	r0, #0
   374b0:	beq	374c4 <__assert_fail@plt+0x24908>
   374b4:	str	r4, [r0, r8, lsl #2]
   374b8:	ldr	r0, [r5, #76]	; 0x4c
   374bc:	cmp	r0, #0
   374c0:	bne	376dc <__assert_fail@plt+0x24b20>
   374c4:	ldrb	r0, [r4, #52]	; 0x34
   374c8:	tst	r0, #16
   374cc:	bne	376b4 <__assert_fail@plt+0x24af8>
   374d0:	mov	r0, #0
   374d4:	str	r0, [sp, #8]
   374d8:	mvn	r6, #0
   374dc:	str	r8, [sp]
   374e0:	ldr	r0, [r7, #40]	; 0x28
   374e4:	ldr	r1, [r7, #56]	; 0x38
   374e8:	cmp	r1, r0
   374ec:	ble	37688 <__assert_fail@plt+0x24acc>
   374f0:	add	r8, sp, #16
   374f4:	b	37574 <__assert_fail@plt+0x249b8>
   374f8:	ldr	r4, [r5, #48]	; 0x30
   374fc:	cmp	r4, #0
   37500:	bne	374a8 <__assert_fail@plt+0x248ec>
   37504:	b	376ac <__assert_fail@plt+0x24af0>
   37508:	ldr	r4, [r5, #44]	; 0x2c
   3750c:	cmp	r4, #0
   37510:	bne	374a8 <__assert_fail@plt+0x248ec>
   37514:	b	376ac <__assert_fail@plt+0x24af0>
   37518:	ldr	r2, [r7, #48]	; 0x30
   3751c:	cmp	r1, r2
   37520:	bge	37588 <__assert_fail@plt+0x249cc>
   37524:	b	37534 <__assert_fail@plt+0x24978>
   37528:	ldr	r2, [r7, #48]	; 0x30
   3752c:	cmp	r1, r2
   37530:	bge	37594 <__assert_fail@plt+0x249d8>
   37534:	add	r1, r0, #2
   37538:	mov	r0, r7
   3753c:	bl	38270 <__assert_fail@plt+0x256b4>
   37540:	str	r0, [sp, #16]
   37544:	cmp	r0, #0
   37548:	beq	37594 <__assert_fail@plt+0x249d8>
   3754c:	b	376ac <__assert_fail@plt+0x24af0>
   37550:	cmp	r9, r4
   37554:	ldr	r0, [sp]
   37558:	moveq	r0, r5
   3755c:	str	r0, [sp]
   37560:	sub	r0, r9, r4
   37564:	clz	r0, r0
   37568:	lsr	r0, r0, #5
   3756c:	and	sl, sl, r0
   37570:	b	37628 <__assert_fail@plt+0x24a6c>
   37574:	mov	r9, r4
   37578:	add	r5, r0, #1
   3757c:	ldr	r1, [r7, #36]	; 0x24
   37580:	cmp	r5, r1
   37584:	bge	37518 <__assert_fail@plt+0x2495c>
   37588:	ldr	r1, [r7, #28]
   3758c:	cmp	r5, r1
   37590:	bge	37528 <__assert_fail@plt+0x2496c>
   37594:	mov	r0, r8
   37598:	mov	r1, r7
   3759c:	mov	r2, r9
   375a0:	bl	38344 <__assert_fail@plt+0x25788>
   375a4:	mov	r4, r0
   375a8:	ldr	r0, [r7, #100]	; 0x64
   375ac:	cmp	r0, #0
   375b0:	beq	375c8 <__assert_fail@plt+0x24a0c>
   375b4:	mov	r0, r8
   375b8:	mov	r1, r7
   375bc:	mov	r2, r4
   375c0:	bl	383f4 <__assert_fail@plt+0x25838>
   375c4:	mov	r4, r0
   375c8:	cmp	r4, #0
   375cc:	bne	3761c <__assert_fail@plt+0x24a60>
   375d0:	ldr	r0, [sp, #16]
   375d4:	cmp	r0, #0
   375d8:	bne	376ac <__assert_fail@plt+0x24af0>
   375dc:	ldr	r0, [sp, #8]
   375e0:	clz	r0, r0
   375e4:	lsr	r0, r0, #5
   375e8:	ldr	r1, [sp, #12]
   375ec:	orr	r0, r0, r1
   375f0:	cmp	r0, #1
   375f4:	bne	37688 <__assert_fail@plt+0x24acc>
   375f8:	ldr	r0, [r7, #100]	; 0x64
   375fc:	cmp	r0, #0
   37600:	beq	37688 <__assert_fail@plt+0x24acc>
   37604:	mov	r0, r8
   37608:	mov	r1, r7
   3760c:	bl	38540 <__assert_fail@plt+0x25984>
   37610:	mov	r4, r0
   37614:	cmp	r0, #0
   37618:	beq	37688 <__assert_fail@plt+0x24acc>
   3761c:	tst	sl, #1
   37620:	bne	37550 <__assert_fail@plt+0x24994>
   37624:	mov	sl, #0
   37628:	ldrb	r0, [r4, #52]	; 0x34
   3762c:	tst	r0, #16
   37630:	beq	37678 <__assert_fail@plt+0x24abc>
   37634:	sxtb	r0, r0
   37638:	cmn	r0, #1
   3763c:	bgt	37658 <__assert_fail@plt+0x24a9c>
   37640:	ldr	r2, [r7, #40]	; 0x28
   37644:	mov	r0, r7
   37648:	mov	r1, r4
   3764c:	bl	37768 <__assert_fail@plt+0x24bac>
   37650:	cmp	r0, #0
   37654:	beq	37678 <__assert_fail@plt+0x24abc>
   37658:	ldr	r6, [r7, #40]	; 0x28
   3765c:	ldr	r0, [sp, #12]
   37660:	cmp	r0, #0
   37664:	beq	376a0 <__assert_fail@plt+0x24ae4>
   37668:	mov	r0, #0
   3766c:	str	r0, [sp, #4]
   37670:	mov	r0, #1
   37674:	str	r0, [sp, #8]
   37678:	ldr	r0, [r7, #40]	; 0x28
   3767c:	ldr	r1, [r7, #56]	; 0x38
   37680:	cmp	r1, r0
   37684:	bgt	37574 <__assert_fail@plt+0x249b8>
   37688:	ldr	r2, [sp, #4]
   3768c:	cmp	r2, #0
   37690:	ldrne	r0, [r2]
   37694:	ldrne	r1, [sp]
   37698:	addne	r0, r0, r1
   3769c:	strne	r0, [r2]
   376a0:	mov	r0, r6
   376a4:	sub	sp, fp, #28
   376a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   376ac:	mvn	r6, #1
   376b0:	b	376a0 <__assert_fail@plt+0x24ae4>
   376b4:	sxtb	r0, r0
   376b8:	cmn	r0, #1
   376bc:	ble	3772c <__assert_fail@plt+0x24b70>
   376c0:	mov	r0, #1
   376c4:	str	r0, [sp, #8]
   376c8:	ldr	r0, [sp, #12]
   376cc:	cmp	r0, #0
   376d0:	mov	r6, r8
   376d4:	bne	374dc <__assert_fail@plt+0x24920>
   376d8:	b	37760 <__assert_fail@plt+0x24ba4>
   376dc:	add	r5, r4, #4
   376e0:	mov	sl, #0
   376e4:	mov	r0, r7
   376e8:	mov	r1, r5
   376ec:	mov	r2, #0
   376f0:	bl	37eec <__assert_fail@plt+0x25330>
   376f4:	str	r0, [sp, #16]
   376f8:	cmp	r0, #0
   376fc:	bne	37724 <__assert_fail@plt+0x24b68>
   37700:	ldrb	r0, [r4, #52]	; 0x34
   37704:	tst	r0, #64	; 0x40
   37708:	beq	374c4 <__assert_fail@plt+0x24908>
   3770c:	mov	r0, r7
   37710:	mov	r1, r5
   37714:	bl	37f78 <__assert_fail@plt+0x253bc>
   37718:	str	r0, [sp, #16]
   3771c:	cmp	r0, #0
   37720:	beq	374c4 <__assert_fail@plt+0x24908>
   37724:	mov	r6, r0
   37728:	b	376a0 <__assert_fail@plt+0x24ae4>
   3772c:	mov	r0, r7
   37730:	mov	r1, r4
   37734:	mov	r2, r8
   37738:	bl	37768 <__assert_fail@plt+0x24bac>
   3773c:	cmp	r0, #0
   37740:	mov	r6, r8
   37744:	mvneq	r6, #0
   37748:	movwne	r0, #1
   3774c:	str	r0, [sp, #8]
   37750:	beq	374dc <__assert_fail@plt+0x24920>
   37754:	ldr	r0, [sp, #12]
   37758:	cmp	r0, #0
   3775c:	bne	374dc <__assert_fail@plt+0x24920>
   37760:	mov	r6, r8
   37764:	b	376a0 <__assert_fail@plt+0x24ae4>
   37768:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3776c:	add	fp, sp, #24
   37770:	mov	r3, r2
   37774:	mov	r8, r1
   37778:	mov	r6, r0
   3777c:	ldr	r2, [r0, #88]	; 0x58
   37780:	mov	r1, r3
   37784:	bl	37d4c <__assert_fail@plt+0x25190>
   37788:	mov	r9, r0
   3778c:	ldr	r0, [r8, #8]
   37790:	cmp	r0, #1
   37794:	blt	377d4 <__assert_fail@plt+0x24c18>
   37798:	ldr	r4, [r8, #12]
   3779c:	ldr	r6, [r6, #84]	; 0x54
   377a0:	mov	r5, #0
   377a4:	ldr	r7, [r4, r5, lsl #2]
   377a8:	mov	r0, r6
   377ac:	mov	r1, r7
   377b0:	mov	r2, r9
   377b4:	bl	3ac10 <__assert_fail@plt+0x28054>
   377b8:	cmp	r0, #0
   377bc:	movne	r0, r7
   377c0:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   377c4:	add	r5, r5, #1
   377c8:	ldr	r0, [r8, #8]
   377cc:	cmp	r5, r0
   377d0:	blt	377a4 <__assert_fail@plt+0x24be8>
   377d4:	mov	r7, #0
   377d8:	mov	r0, r7
   377dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   377e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   377e4:	add	fp, sp, #28
   377e8:	sub	sp, sp, #44	; 0x2c
   377ec:	ldr	r7, [r0, #92]	; 0x5c
   377f0:	cmn	r7, #-1073741822	; 0xc0000002
   377f4:	bhi	379f0 <__assert_fail@plt+0x24e34>
   377f8:	ldr	r5, [r0, #84]	; 0x54
   377fc:	str	r0, [sp, #12]
   37800:	ldr	sl, [r0, #96]	; 0x60
   37804:	mov	r0, #4
   37808:	add	r6, r0, r7, lsl #2
   3780c:	mov	r0, r6
   37810:	bl	2ed04 <__assert_fail@plt+0x1c148>
   37814:	mov	r4, #12
   37818:	cmp	r0, #0
   3781c:	beq	379c0 <__assert_fail@plt+0x24e04>
   37820:	mov	r9, r0
   37824:	ldr	r0, [r5, #76]	; 0x4c
   37828:	cmp	r0, #0
   3782c:	beq	37854 <__assert_fail@plt+0x24c98>
   37830:	mov	r0, r6
   37834:	bl	2ed04 <__assert_fail@plt+0x1c148>
   37838:	cmp	r0, #0
   3783c:	beq	379c4 <__assert_fail@plt+0x24e08>
   37840:	mov	r8, r0
   37844:	str	r5, [sp, #8]
   37848:	add	r4, sp, #16
   3784c:	mov	r5, sl
   37850:	b	378bc <__assert_fail@plt+0x24d00>
   37854:	str	r7, [sp]
   37858:	add	r4, sp, #16
   3785c:	mov	r8, #0
   37860:	mov	r0, r4
   37864:	mov	r1, r9
   37868:	mov	r2, #0
   3786c:	mov	r3, sl
   37870:	bl	3ac84 <__assert_fail@plt+0x280c8>
   37874:	ldr	r0, [sp, #12]
   37878:	mov	r1, r4
   3787c:	bl	3aca4 <__assert_fail@plt+0x280e8>
   37880:	mov	r4, r0
   37884:	ldr	r0, [sp, #40]	; 0x28
   37888:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3788c:	cmp	r4, #0
   37890:	bne	379c8 <__assert_fail@plt+0x24e0c>
   37894:	ldr	r0, [r9]
   37898:	cmp	r0, #0
   3789c:	bne	379a4 <__assert_fail@plt+0x24de8>
   378a0:	mov	r4, #1
   378a4:	b	379c8 <__assert_fail@plt+0x24e0c>
   378a8:	mov	r0, sl
   378ac:	mov	r2, r7
   378b0:	bl	37768 <__assert_fail@plt+0x24bac>
   378b4:	mov	r4, r5
   378b8:	mov	r5, r0
   378bc:	add	sl, r7, #1
   378c0:	lsl	r2, sl, #2
   378c4:	mov	r0, r8
   378c8:	mov	r1, #0
   378cc:	bl	12904 <memset@plt>
   378d0:	str	r7, [sp]
   378d4:	mov	r0, r4
   378d8:	mov	r1, r9
   378dc:	mov	r6, r8
   378e0:	mov	r2, r8
   378e4:	mov	r8, r5
   378e8:	mov	r3, r5
   378ec:	bl	3ac84 <__assert_fail@plt+0x280c8>
   378f0:	ldr	r0, [sp, #12]
   378f4:	mov	r5, r4
   378f8:	mov	r1, r4
   378fc:	bl	3aca4 <__assert_fail@plt+0x280e8>
   37900:	mov	r4, r0
   37904:	ldr	r0, [sp, #40]	; 0x28
   37908:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3790c:	cmp	r4, #0
   37910:	bne	379f8 <__assert_fail@plt+0x24e3c>
   37914:	mov	r1, r9
   37918:	ldr	r0, [r9]
   3791c:	cmp	r0, #0
   37920:	ldreq	r0, [r6]
   37924:	cmpeq	r0, #0
   37928:	bne	37978 <__assert_fail@plt+0x24dbc>
   3792c:	mov	r4, #1
   37930:	cmp	r7, #1
   37934:	blt	379e4 <__assert_fail@plt+0x24e28>
   37938:	sub	r7, r7, #1
   3793c:	ldr	sl, [sp, #12]
   37940:	ldr	r0, [sl, #100]	; 0x64
   37944:	mov	r9, r1
   37948:	mov	r8, r6
   3794c:	ldr	r1, [r0, r7, lsl #2]
   37950:	cmp	r1, #0
   37954:	ldrbne	r2, [r1, #52]	; 0x34
   37958:	tstne	r2, #16
   3795c:	bne	378a8 <__assert_fail@plt+0x24cec>
   37960:	sub	r1, r7, #1
   37964:	add	r2, r7, #1
   37968:	cmp	r2, #2
   3796c:	mov	r7, r1
   37970:	bge	3794c <__assert_fail@plt+0x24d90>
   37974:	b	379c8 <__assert_fail@plt+0x24e0c>
   37978:	ldr	r0, [sp, #8]
   3797c:	mov	r9, r1
   37980:	mov	r2, r6
   37984:	mov	r3, sl
   37988:	bl	3adb0 <__assert_fail@plt+0x281f4>
   3798c:	mov	r4, r0
   37990:	mov	r0, r6
   37994:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   37998:	cmp	r4, #0
   3799c:	mov	sl, r8
   379a0:	bne	379c4 <__assert_fail@plt+0x24e08>
   379a4:	ldr	r4, [sp, #12]
   379a8:	ldr	r0, [r4, #100]	; 0x64
   379ac:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   379b0:	str	r7, [r4, #92]	; 0x5c
   379b4:	str	sl, [r4, #96]	; 0x60
   379b8:	str	r9, [r4, #100]	; 0x64
   379bc:	mov	r4, #0
   379c0:	mov	r9, #0
   379c4:	mov	r8, #0
   379c8:	mov	r0, r9
   379cc:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   379d0:	mov	r0, r8
   379d4:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   379d8:	mov	r0, r4
   379dc:	sub	sp, fp, #28
   379e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   379e4:	mov	r9, r1
   379e8:	mov	r8, r6
   379ec:	b	379c8 <__assert_fail@plt+0x24e0c>
   379f0:	mov	r4, #12
   379f4:	b	379d8 <__assert_fail@plt+0x24e1c>
   379f8:	mov	r8, r6
   379fc:	b	379c8 <__assert_fail@plt+0x24e0c>
   37a00:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   37a04:	add	fp, sp, #24
   37a08:	mov	r8, r0
   37a0c:	ldr	r0, [r0, #124]	; 0x7c
   37a10:	cmp	r0, #1
   37a14:	blt	37a98 <__assert_fail@plt+0x24edc>
   37a18:	mov	r7, #0
   37a1c:	ldr	r0, [r8, #132]	; 0x84
   37a20:	ldr	r5, [r0, r7, lsl #2]
   37a24:	ldr	r0, [r5, #16]
   37a28:	cmp	r0, #1
   37a2c:	blt	37a5c <__assert_fail@plt+0x24ea0>
   37a30:	mov	r4, #0
   37a34:	ldr	r0, [r5, #20]
   37a38:	ldr	r6, [r0, r4, lsl #2]
   37a3c:	ldr	r0, [r6, #16]
   37a40:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   37a44:	mov	r0, r6
   37a48:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   37a4c:	add	r4, r4, #1
   37a50:	ldr	r0, [r5, #16]
   37a54:	cmp	r4, r0
   37a58:	blt	37a34 <__assert_fail@plt+0x24e78>
   37a5c:	ldr	r0, [r5, #20]
   37a60:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   37a64:	ldr	r0, [r5, #8]
   37a68:	cmp	r0, #0
   37a6c:	beq	37a80 <__assert_fail@plt+0x24ec4>
   37a70:	ldr	r0, [r0, #8]
   37a74:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   37a78:	ldr	r0, [r5, #8]
   37a7c:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   37a80:	mov	r0, r5
   37a84:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   37a88:	add	r7, r7, #1
   37a8c:	ldr	r0, [r8, #124]	; 0x7c
   37a90:	cmp	r7, r0
   37a94:	blt	37a1c <__assert_fail@plt+0x24e60>
   37a98:	mov	r0, #0
   37a9c:	str	r0, [r8, #108]	; 0x6c
   37aa0:	str	r0, [r8, #124]	; 0x7c
   37aa4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   37aa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37aac:	add	fp, sp, #28
   37ab0:	sub	sp, sp, #204	; 0xcc
   37ab4:	mov	r5, r3
   37ab8:	mov	r6, r2
   37abc:	mov	r8, r1
   37ac0:	ldr	r4, [r0]
   37ac4:	movw	r0, #19256	; 0x4b38
   37ac8:	movt	r0, #4
   37acc:	vldr	d16, [r0]
   37ad0:	ldr	r0, [r0, #8]
   37ad4:	str	r0, [fp, #-56]	; 0xffffffc8
   37ad8:	vstr	d16, [fp, #-64]	; 0xffffffc0
   37adc:	add	r0, sp, #28
   37ae0:	bl	3be4c <__assert_fail@plt+0x29290>
   37ae4:	mov	r7, #0
   37ae8:	ldr	r0, [fp, #8]
   37aec:	cmp	r0, #0
   37af0:	mov	r9, #0
   37af4:	beq	37b18 <__assert_fail@plt+0x24f5c>
   37af8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   37afc:	add	r0, r0, r0, lsl #1
   37b00:	lsl	r0, r0, #3
   37b04:	bl	2ed04 <__assert_fail@plt+0x1c148>
   37b08:	str	r0, [fp, #-56]	; 0xffffffc8
   37b0c:	cmp	r0, #0
   37b10:	beq	37d1c <__assert_fail@plt+0x25160>
   37b14:	sub	r9, fp, #64	; 0x40
   37b18:	ldr	sl, [r4, #72]	; 0x48
   37b1c:	str	r7, [fp, #-44]	; 0xffffffd4
   37b20:	str	r7, [fp, #-48]	; 0xffffffd0
   37b24:	str	r7, [fp, #-40]	; 0xffffffd8
   37b28:	add	r0, sp, #28
   37b2c:	mov	r1, r6
   37b30:	bl	3be64 <__assert_fail@plt+0x292a8>
   37b34:	cmp	r0, #0
   37b38:	beq	37d0c <__assert_fail@plt+0x25150>
   37b3c:	str	r4, [sp, #20]
   37b40:	str	r8, [sp, #24]
   37b44:	add	r0, sp, #28
   37b48:	bl	3bf3c <__assert_fail@plt+0x29380>
   37b4c:	mov	r4, r0
   37b50:	lsl	r2, r6, #3
   37b54:	mov	r1, r5
   37b58:	bl	125c8 <memcpy@plt>
   37b5c:	ldr	r8, [r5]
   37b60:	ldr	r0, [r5, #4]
   37b64:	str	r8, [fp, #-32]	; 0xffffffe0
   37b68:	cmp	r8, r0
   37b6c:	bgt	37ce0 <__assert_fail@plt+0x25124>
   37b70:	clz	r0, r6
   37b74:	lsr	r0, r0, #5
   37b78:	clz	r1, r9
   37b7c:	lsr	r1, r1, #5
   37b80:	orr	r0, r1, r0
   37b84:	str	r0, [sp, #16]
   37b88:	ldr	r7, [sp, #24]
   37b8c:	str	r8, [sp]
   37b90:	str	r6, [sp, #4]
   37b94:	ldr	r0, [sp, #20]
   37b98:	mov	r1, r5
   37b9c:	mov	r2, r4
   37ba0:	mov	r3, sl
   37ba4:	bl	3bf44 <__assert_fail@plt+0x29388>
   37ba8:	ldr	r0, [r5, #4]
   37bac:	cmp	r8, r0
   37bb0:	ldreq	r0, [r7, #96]	; 0x60
   37bb4:	cmpeq	sl, r0
   37bb8:	beq	37bd8 <__assert_fail@plt+0x2501c>
   37bbc:	cmp	r9, #0
   37bc0:	beq	37c40 <__assert_fail@plt+0x25084>
   37bc4:	sub	r0, fp, #48	; 0x30
   37bc8:	mov	r1, sl
   37bcc:	bl	365f0 <__assert_fail@plt+0x23a34>
   37bd0:	cmp	r0, #0
   37bd4:	beq	37c40 <__assert_fail@plt+0x25084>
   37bd8:	ldr	r0, [sp, #16]
   37bdc:	cmp	r0, #0
   37be0:	bne	37ce0 <__assert_fail@plt+0x25124>
   37be4:	mov	r0, #0
   37be8:	ldr	r1, [r5, r0, lsl #3]
   37bec:	cmp	r1, #0
   37bf0:	blt	37c04 <__assert_fail@plt+0x25048>
   37bf4:	add	r1, r5, r0, lsl #3
   37bf8:	ldr	r1, [r1, #4]
   37bfc:	cmn	r1, #1
   37c00:	beq	37c14 <__assert_fail@plt+0x25058>
   37c04:	add	r0, r0, #1
   37c08:	cmp	r0, r6
   37c0c:	bcc	37be8 <__assert_fail@plt+0x2502c>
   37c10:	b	37ce0 <__assert_fail@plt+0x25124>
   37c14:	str	r4, [sp]
   37c18:	sub	r0, fp, #48	; 0x30
   37c1c:	str	r0, [sp, #4]
   37c20:	mov	r0, r9
   37c24:	sub	r1, fp, #32
   37c28:	mov	r2, r6
   37c2c:	mov	r3, r5
   37c30:	bl	3bff8 <__assert_fail@plt+0x2943c>
   37c34:	mov	sl, r0
   37c38:	cmn	r0, #1
   37c3c:	ble	37ce0 <__assert_fail@plt+0x25124>
   37c40:	sub	r0, fp, #32
   37c44:	stm	sp, {r0, sl}
   37c48:	sub	r0, fp, #48	; 0x30
   37c4c:	str	r0, [sp, #8]
   37c50:	str	r9, [sp, #12]
   37c54:	mov	r0, r7
   37c58:	mov	r1, r6
   37c5c:	mov	r2, r5
   37c60:	mov	r3, r4
   37c64:	bl	3c0b0 <__assert_fail@plt+0x294f4>
   37c68:	mov	sl, r0
   37c6c:	cmn	r0, #1
   37c70:	ble	37c88 <__assert_fail@plt+0x250cc>
   37c74:	ldr	r0, [r5, #4]
   37c78:	ldr	r8, [fp, #-32]	; 0xffffffe0
   37c7c:	cmp	r8, r0
   37c80:	ble	37b8c <__assert_fail@plt+0x24fd0>
   37c84:	b	37ce0 <__assert_fail@plt+0x25124>
   37c88:	cmn	sl, #2
   37c8c:	beq	37d04 <__assert_fail@plt+0x25148>
   37c90:	str	r4, [sp]
   37c94:	sub	r0, fp, #48	; 0x30
   37c98:	str	r0, [sp, #4]
   37c9c:	mov	r0, r9
   37ca0:	sub	r1, fp, #32
   37ca4:	mov	r2, r6
   37ca8:	mov	r3, r5
   37cac:	bl	3bff8 <__assert_fail@plt+0x2943c>
   37cb0:	mov	sl, r0
   37cb4:	cmn	r0, #1
   37cb8:	bgt	37c74 <__assert_fail@plt+0x250b8>
   37cbc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   37cc0:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   37cc4:	add	r0, sp, #28
   37cc8:	bl	3beb8 <__assert_fail@plt+0x292fc>
   37ccc:	mov	r0, r9
   37cd0:	bl	3bed4 <__assert_fail@plt+0x29318>
   37cd4:	mov	r0, #1
   37cd8:	sub	sp, fp, #28
   37cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37ce0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   37ce4:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   37ce8:	add	r0, sp, #28
   37cec:	bl	3beb8 <__assert_fail@plt+0x292fc>
   37cf0:	mov	r0, r9
   37cf4:	bl	3bed4 <__assert_fail@plt+0x29318>
   37cf8:	mov	r0, #0
   37cfc:	sub	sp, fp, #28
   37d00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37d04:	ldr	r0, [fp, #-40]	; 0xffffffd8
   37d08:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   37d0c:	add	r0, sp, #28
   37d10:	bl	3beb8 <__assert_fail@plt+0x292fc>
   37d14:	mov	r0, r9
   37d18:	bl	3bed4 <__assert_fail@plt+0x29318>
   37d1c:	mov	r0, #12
   37d20:	sub	sp, fp, #28
   37d24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37d28:	push	{r4, sl, fp, lr}
   37d2c:	add	fp, sp, #8
   37d30:	mov	r4, r0
   37d34:	bl	37a00 <__assert_fail@plt+0x24e44>
   37d38:	ldr	r0, [r4, #132]	; 0x84
   37d3c:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   37d40:	ldr	r0, [r4, #116]	; 0x74
   37d44:	pop	{r4, sl, fp, lr}
   37d48:	b	2ca78 <__assert_fail@plt+0x19ebc>
   37d4c:	push	{r4, r5, fp, lr}
   37d50:	add	fp, sp, #8
   37d54:	mov	r4, r0
   37d58:	cmn	r1, #1
   37d5c:	ldrle	r0, [r4, #60]	; 0x3c
   37d60:	pople	{r4, r5, fp, pc}
   37d64:	ldr	r0, [r4, #48]	; 0x30
   37d68:	cmp	r0, r1
   37d6c:	beq	37e0c <__assert_fail@plt+0x25250>
   37d70:	ldr	r0, [r4, #80]	; 0x50
   37d74:	cmp	r0, #2
   37d78:	blt	37dcc <__assert_fail@plt+0x25210>
   37d7c:	ldr	r0, [r4, #8]
   37d80:	b	37d98 <__assert_fail@plt+0x251dc>
   37d84:	sub	r2, r1, #1
   37d88:	cmp	r1, #0
   37d8c:	mov	r1, r2
   37d90:	ldrle	r0, [r4, #60]	; 0x3c
   37d94:	pople	{r4, r5, fp, pc}
   37d98:	ldr	r5, [r0, r1, lsl #2]
   37d9c:	cmn	r5, #1
   37da0:	beq	37d84 <__assert_fail@plt+0x251c8>
   37da4:	ldrb	r0, [r4, #78]	; 0x4e
   37da8:	cmp	r0, #0
   37dac:	beq	37df0 <__assert_fail@plt+0x25234>
   37db0:	mov	r0, r5
   37db4:	bl	128e0 <iswalnum@plt>
   37db8:	mov	r1, r0
   37dbc:	mov	r0, #1
   37dc0:	cmp	r5, #95	; 0x5f
   37dc4:	bne	37de8 <__assert_fail@plt+0x2522c>
   37dc8:	b	37e08 <__assert_fail@plt+0x2524c>
   37dcc:	ldr	r2, [r4, #4]
   37dd0:	ldr	r0, [r4, #68]	; 0x44
   37dd4:	ldrb	r5, [r2, r1]
   37dd8:	mov	r1, r5
   37ddc:	bl	37ec4 <__assert_fail@plt+0x25308>
   37de0:	mov	r1, r0
   37de4:	mov	r0, #1
   37de8:	cmp	r1, #0
   37dec:	bne	37e08 <__assert_fail@plt+0x2524c>
   37df0:	mov	r0, #0
   37df4:	cmp	r5, #10
   37df8:	popne	{r4, r5, fp, pc}
   37dfc:	ldrb	r0, [r4, #77]	; 0x4d
   37e00:	cmp	r0, #0
   37e04:	movwne	r0, #2
   37e08:	pop	{r4, r5, fp, pc}
   37e0c:	and	r0, r2, #2
   37e10:	eor	r0, r0, #10
   37e14:	pop	{r4, r5, fp, pc}
   37e18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37e1c:	add	fp, sp, #28
   37e20:	sub	sp, sp, #12
   37e24:	str	r2, [sp, #4]
   37e28:	mov	sl, r1
   37e2c:	mov	r7, r0
   37e30:	ldr	r0, [r0, #24]
   37e34:	ldr	r1, [r7, #32]
   37e38:	add	r5, r1, r0
   37e3c:	mvn	r1, #0
   37e40:	cmp	r5, sl
   37e44:	bge	37eb0 <__assert_fail@plt+0x252f4>
   37e48:	add	r4, r7, #16
   37e4c:	b	37e70 <__assert_fail@plt+0x252b4>
   37e50:	mov	r1, #0
   37e54:	cmp	r6, #0
   37e58:	cmpne	r0, #0
   37e5c:	ldrne	r0, [r7]
   37e60:	ldrbne	r1, [r0, r5]
   37e64:	stm	r4, {r8, r9}
   37e68:	mov	r0, #1
   37e6c:	b	37ea4 <__assert_fail@plt+0x252e8>
   37e70:	ldr	r0, [r7]
   37e74:	ldr	r2, [r7, #44]	; 0x2c
   37e78:	add	r1, r0, r5
   37e7c:	sub	r6, r2, r5
   37e80:	ldm	r4, {r8, r9}
   37e84:	add	r0, sp, #8
   37e88:	mov	r2, r6
   37e8c:	mov	r3, r4
   37e90:	bl	2ed34 <__assert_fail@plt+0x1c178>
   37e94:	sub	r1, r0, #1
   37e98:	cmn	r1, #3
   37e9c:	bcs	37e50 <__assert_fail@plt+0x25294>
   37ea0:	ldr	r1, [sp, #8]
   37ea4:	add	r5, r0, r5
   37ea8:	cmp	r5, sl
   37eac:	blt	37e70 <__assert_fail@plt+0x252b4>
   37eb0:	ldr	r0, [sp, #4]
   37eb4:	str	r1, [r0]
   37eb8:	mov	r0, r5
   37ebc:	sub	sp, fp, #28
   37ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37ec4:	asr	r2, r1, #31
   37ec8:	add	r2, r1, r2, lsr #27
   37ecc:	asr	r2, r2, #5
   37ed0:	ldr	r0, [r0, r2, lsl #2]
   37ed4:	and	r1, r1, #31
   37ed8:	mov	r2, #1
   37edc:	and	r0, r0, r2, lsl r1
   37ee0:	cmp	r0, #0
   37ee4:	movwne	r0, #1
   37ee8:	bx	lr
   37eec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   37ef0:	add	fp, sp, #24
   37ef4:	mov	r6, r0
   37ef8:	ldr	r0, [r1, #4]
   37efc:	cmp	r0, #1
   37f00:	blt	37f70 <__assert_fail@plt+0x253b4>
   37f04:	mov	r8, r2
   37f08:	mov	r5, r1
   37f0c:	ldr	r7, [r6, #84]	; 0x54
   37f10:	mov	r4, #0
   37f14:	mov	r9, #1
   37f18:	ldr	r0, [r5, #8]
   37f1c:	ldr	r1, [r0, r4, lsl #2]
   37f20:	ldr	r0, [r7]
   37f24:	add	r2, r0, r1, lsl #3
   37f28:	ldrb	r2, [r2, #4]
   37f2c:	cmp	r2, #8
   37f30:	bne	37f60 <__assert_fail@plt+0x253a4>
   37f34:	ldr	r0, [r0, r1, lsl #3]
   37f38:	cmp	r0, #31
   37f3c:	bgt	37f60 <__assert_fail@plt+0x253a4>
   37f40:	ldr	r2, [r7, #80]	; 0x50
   37f44:	tst	r2, r9, lsl r0
   37f48:	beq	37f60 <__assert_fail@plt+0x253a4>
   37f4c:	mov	r0, r6
   37f50:	mov	r2, r8
   37f54:	bl	385b4 <__assert_fail@plt+0x259f8>
   37f58:	cmp	r0, #0
   37f5c:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   37f60:	add	r4, r4, #1
   37f64:	ldr	r0, [r5, #4]
   37f68:	cmp	r4, r0
   37f6c:	blt	37f18 <__assert_fail@plt+0x2535c>
   37f70:	mov	r0, #0
   37f74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   37f78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37f7c:	add	fp, sp, #28
   37f80:	sub	sp, sp, #52	; 0x34
   37f84:	mov	r5, r0
   37f88:	ldr	r0, [r1, #4]
   37f8c:	cmp	r0, #1
   37f90:	blt	38250 <__assert_fail@plt+0x25694>
   37f94:	mov	r8, r1
   37f98:	ldr	r9, [r5, #84]	; 0x54
   37f9c:	ldr	r0, [r5, #40]	; 0x28
   37fa0:	str	r0, [sp, #32]
   37fa4:	mov	sl, #0
   37fa8:	str	r1, [sp, #4]
   37fac:	str	r9, [sp, #16]
   37fb0:	ldr	r0, [r8, #8]
   37fb4:	ldr	r4, [r0, sl, lsl #2]
   37fb8:	ldr	r0, [r9]
   37fbc:	add	r0, r0, r4, lsl #3
   37fc0:	ldr	r6, [r0, #4]
   37fc4:	uxtb	r0, r6
   37fc8:	cmp	r0, #4
   37fcc:	bne	38240 <__assert_fail@plt+0x25684>
   37fd0:	movw	r0, #65280	; 0xff00
   37fd4:	movt	r0, #3
   37fd8:	tst	r6, r0
   37fdc:	beq	38030 <__assert_fail@plt+0x25474>
   37fe0:	ldr	r2, [r5, #88]	; 0x58
   37fe4:	mov	r0, r5
   37fe8:	ldr	r1, [sp, #32]
   37fec:	bl	37d4c <__assert_fail@plt+0x25190>
   37ff0:	and	r1, r0, #1
   37ff4:	tst	r6, #1024	; 0x400
   37ff8:	beq	38004 <__assert_fail@plt+0x25448>
   37ffc:	cmp	r1, #0
   38000:	beq	38240 <__assert_fail@plt+0x25684>
   38004:	tst	r6, #2048	; 0x800
   38008:	cmpne	r1, #0
   3800c:	bne	38240 <__assert_fail@plt+0x25684>
   38010:	tst	r6, #8192	; 0x2000
   38014:	beq	38020 <__assert_fail@plt+0x25464>
   38018:	ands	r1, r0, #2
   3801c:	beq	38240 <__assert_fail@plt+0x25684>
   38020:	tst	r6, #32768	; 0x8000
   38024:	beq	38030 <__assert_fail@plt+0x25474>
   38028:	ands	r0, r0, #8
   3802c:	beq	38240 <__assert_fail@plt+0x25684>
   38030:	ldr	r6, [r5, #108]	; 0x6c
   38034:	mov	r0, r5
   38038:	mov	r1, r4
   3803c:	ldr	r2, [sp, #32]
   38040:	bl	38640 <__assert_fail@plt+0x25a84>
   38044:	str	r0, [fp, #-32]	; 0xffffffe0
   38048:	cmp	r0, #0
   3804c:	bne	38258 <__assert_fail@plt+0x2569c>
   38050:	ldr	r0, [r5, #108]	; 0x6c
   38054:	cmp	r6, r0
   38058:	bge	38240 <__assert_fail@plt+0x25684>
   3805c:	add	r0, r6, r6, lsl #1
   38060:	lsl	r7, r0, #3
   38064:	str	r4, [sp, #8]
   38068:	ldr	r0, [r5, #116]	; 0x74
   3806c:	ldr	r1, [r0, r7]
   38070:	cmp	r1, r4
   38074:	bne	3822c <__assert_fail@plt+0x25670>
   38078:	add	r0, r0, r7
   3807c:	ldr	r1, [r0, #4]
   38080:	ldr	r2, [sp, #32]
   38084:	cmp	r1, r2
   38088:	bne	3822c <__assert_fail@plt+0x25670>
   3808c:	ldr	r2, [r0, #8]
   38090:	ldr	r3, [r0, #12]
   38094:	ldr	r0, [r9, #24]
   38098:	str	r0, [sp, #28]
   3809c:	cmp	r3, r2
   380a0:	bne	380b8 <__assert_fail@plt+0x254fc>
   380a4:	ldr	r0, [r9, #20]
   380a8:	add	r1, r4, r4, lsl #1
   380ac:	add	r0, r0, r1, lsl #2
   380b0:	ldr	r0, [r0, #8]
   380b4:	b	380c0 <__assert_fail@plt+0x25504>
   380b8:	ldr	r0, [r9, #12]
   380bc:	add	r0, r0, r4, lsl #2
   380c0:	ldr	r0, [r0]
   380c4:	add	r9, r0, r0, lsl #1
   380c8:	ldr	r4, [sp, #32]
   380cc:	str	r3, [sp, #20]
   380d0:	add	r0, r3, r4
   380d4:	str	r2, [sp, #24]
   380d8:	sub	r8, r0, r2
   380dc:	sub	r1, r8, #1
   380e0:	ldr	r2, [r5, #88]	; 0x58
   380e4:	mov	r0, r5
   380e8:	bl	37d4c <__assert_fail@plt+0x25190>
   380ec:	mov	r3, r0
   380f0:	ldr	r0, [r5, #100]	; 0x64
   380f4:	ldr	r1, [r0, r4, lsl #2]
   380f8:	ldr	r0, [r0, r8, lsl #2]
   380fc:	cmp	r1, #0
   38100:	ldrne	r1, [r1, #8]
   38104:	moveq	r1, #0
   38108:	str	r1, [sp, #12]
   3810c:	add	r4, sp, #36	; 0x24
   38110:	ldr	r1, [sp, #28]
   38114:	add	r2, r1, r9, lsl #2
   38118:	cmp	r0, #0
   3811c:	str	r2, [sp, #28]
   38120:	beq	38190 <__assert_fail@plt+0x255d4>
   38124:	mov	r9, r3
   38128:	ldr	r1, [r0, #40]	; 0x28
   3812c:	mov	r0, r4
   38130:	bl	389f0 <__assert_fail@plt+0x25e34>
   38134:	str	r0, [fp, #-32]	; 0xffffffe0
   38138:	cmp	r0, #0
   3813c:	ldr	r1, [sp, #16]
   38140:	bne	38264 <__assert_fail@plt+0x256a8>
   38144:	sub	r0, fp, #32
   38148:	mov	r2, r4
   3814c:	mov	r3, r9
   38150:	bl	3665c <__assert_fail@plt+0x23aa0>
   38154:	ldr	r1, [r5, #100]	; 0x64
   38158:	str	r0, [r1, r8, lsl #2]
   3815c:	ldr	r0, [sp, #44]	; 0x2c
   38160:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   38164:	ldr	r0, [r5, #100]	; 0x64
   38168:	ldr	r0, [r0, r8, lsl #2]
   3816c:	cmp	r0, #0
   38170:	bne	38180 <__assert_fail@plt+0x255c4>
   38174:	ldr	r0, [fp, #-32]	; 0xffffffe0
   38178:	cmp	r0, #0
   3817c:	bne	38258 <__assert_fail@plt+0x2569c>
   38180:	ldr	r8, [sp, #4]
   38184:	ldr	r4, [sp, #8]
   38188:	ldr	r9, [sp, #16]
   3818c:	b	381cc <__assert_fail@plt+0x25610>
   38190:	sub	r0, fp, #32
   38194:	ldr	r9, [sp, #16]
   38198:	mov	r1, r9
   3819c:	bl	3665c <__assert_fail@plt+0x23aa0>
   381a0:	ldr	r1, [r5, #100]	; 0x64
   381a4:	str	r0, [r1, r8, lsl #2]
   381a8:	ldr	r0, [r5, #100]	; 0x64
   381ac:	ldr	r0, [r0, r8, lsl #2]
   381b0:	cmp	r0, #0
   381b4:	ldr	r8, [sp, #4]
   381b8:	ldr	r4, [sp, #8]
   381bc:	bne	381cc <__assert_fail@plt+0x25610>
   381c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   381c4:	cmp	r0, #0
   381c8:	bne	38258 <__assert_fail@plt+0x2569c>
   381cc:	ldr	r0, [sp, #24]
   381d0:	ldr	r1, [sp, #20]
   381d4:	cmp	r1, r0
   381d8:	bne	3822c <__assert_fail@plt+0x25670>
   381dc:	ldr	r0, [r5, #100]	; 0x64
   381e0:	ldr	r1, [sp, #32]
   381e4:	ldr	r0, [r0, r1, lsl #2]
   381e8:	ldr	r0, [r0, #8]
   381ec:	ldr	r1, [sp, #12]
   381f0:	cmp	r0, r1
   381f4:	ble	3822c <__assert_fail@plt+0x25670>
   381f8:	mov	r0, r5
   381fc:	ldr	r1, [sp, #28]
   38200:	ldr	r2, [sp, #32]
   38204:	bl	37eec <__assert_fail@plt+0x25330>
   38208:	str	r0, [fp, #-32]	; 0xffffffe0
   3820c:	cmp	r0, #0
   38210:	bne	38258 <__assert_fail@plt+0x2569c>
   38214:	mov	r0, r5
   38218:	ldr	r1, [sp, #28]
   3821c:	bl	37f78 <__assert_fail@plt+0x253bc>
   38220:	str	r0, [fp, #-32]	; 0xffffffe0
   38224:	cmp	r0, #0
   38228:	bne	38258 <__assert_fail@plt+0x2569c>
   3822c:	add	r7, r7, #24
   38230:	add	r6, r6, #1
   38234:	ldr	r0, [r5, #108]	; 0x6c
   38238:	cmp	r6, r0
   3823c:	blt	38068 <__assert_fail@plt+0x254ac>
   38240:	ldr	r0, [r8, #4]
   38244:	add	sl, sl, #1
   38248:	cmp	sl, r0
   3824c:	blt	37fb0 <__assert_fail@plt+0x253f4>
   38250:	mov	r0, #0
   38254:	str	r0, [fp, #-32]	; 0xffffffe0
   38258:	ldr	r0, [fp, #-32]	; 0xffffffe0
   3825c:	sub	sp, fp, #28
   38260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38264:	ldr	r0, [sp, #44]	; 0x2c
   38268:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3826c:	b	38258 <__assert_fail@plt+0x2569c>
   38270:	push	{r4, r5, fp, lr}
   38274:	add	fp, sp, #8
   38278:	mov	r4, r0
   3827c:	ldr	r0, [r0, #36]	; 0x24
   38280:	mov	r5, #12
   38284:	cmn	r0, #-536870910	; 0xe0000002
   38288:	bhi	3833c <__assert_fail@plt+0x25780>
   3828c:	ldr	r2, [r4, #48]	; 0x30
   38290:	cmp	r2, r0, lsl #1
   38294:	lslge	r2, r0, #1
   38298:	cmp	r2, r1
   3829c:	movle	r2, r1
   382a0:	mov	r0, r4
   382a4:	mov	r1, r2
   382a8:	bl	31a6c <__assert_fail@plt+0x1eeb0>
   382ac:	cmp	r0, #0
   382b0:	popne	{r4, r5, fp, pc}
   382b4:	ldr	r0, [r4, #100]	; 0x64
   382b8:	cmp	r0, #0
   382bc:	beq	382dc <__assert_fail@plt+0x25720>
   382c0:	ldr	r1, [r4, #36]	; 0x24
   382c4:	mov	r2, #4
   382c8:	add	r1, r2, r1, lsl #2
   382cc:	bl	2f804 <__assert_fail@plt+0x1cc48>
   382d0:	cmp	r0, #0
   382d4:	beq	3833c <__assert_fail@plt+0x25780>
   382d8:	str	r0, [r4, #100]	; 0x64
   382dc:	ldr	r0, [r4, #80]	; 0x50
   382e0:	ldrb	r1, [r4, #72]	; 0x48
   382e4:	cmp	r1, #0
   382e8:	beq	38308 <__assert_fail@plt+0x2574c>
   382ec:	cmp	r0, #2
   382f0:	blt	3831c <__assert_fail@plt+0x25760>
   382f4:	mov	r0, r4
   382f8:	bl	31b10 <__assert_fail@plt+0x1ef54>
   382fc:	cmp	r0, #0
   38300:	popne	{r4, r5, fp, pc}
   38304:	b	38338 <__assert_fail@plt+0x2577c>
   38308:	cmp	r0, #2
   3830c:	blt	38328 <__assert_fail@plt+0x2576c>
   38310:	mov	r0, r4
   38314:	bl	32144 <__assert_fail@plt+0x1f588>
   38318:	b	38338 <__assert_fail@plt+0x2577c>
   3831c:	mov	r0, r4
   38320:	bl	320d8 <__assert_fail@plt+0x1f51c>
   38324:	b	38338 <__assert_fail@plt+0x2577c>
   38328:	ldr	r0, [r4, #64]	; 0x40
   3832c:	cmp	r0, #0
   38330:	movne	r0, r4
   38334:	blne	322d4 <__assert_fail@plt+0x1f718>
   38338:	mov	r5, #0
   3833c:	mov	r0, r5
   38340:	pop	{r4, r5, fp, pc}
   38344:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   38348:	add	fp, sp, #24
   3834c:	mov	r6, r2
   38350:	mov	r4, r1
   38354:	mov	r5, r0
   38358:	ldrb	r0, [r2, #52]	; 0x34
   3835c:	tst	r0, #32
   38360:	bne	383d8 <__assert_fail@plt+0x2581c>
   38364:	ldr	r0, [r4, #4]
   38368:	ldr	r1, [r4, #40]	; 0x28
   3836c:	add	r2, r1, #1
   38370:	str	r2, [r4, #40]	; 0x28
   38374:	ldrb	r7, [r0, r1]
   38378:	ldr	r0, [r6, #44]	; 0x2c
   3837c:	cmp	r0, #0
   38380:	ldrne	r0, [r0, r7, lsl #2]
   38384:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   38388:	ldr	r8, [r6, #48]	; 0x30
   3838c:	cmp	r8, #0
   38390:	bne	383b8 <__assert_fail@plt+0x257fc>
   38394:	ldr	r0, [r4, #84]	; 0x54
   38398:	mov	r1, r6
   3839c:	bl	3a19c <__assert_fail@plt+0x275e0>
   383a0:	cmp	r0, #0
   383a4:	bne	38378 <__assert_fail@plt+0x257bc>
   383a8:	mov	r0, #12
   383ac:	str	r0, [r5]
   383b0:	mov	r0, #0
   383b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   383b8:	ldr	r0, [r4, #40]	; 0x28
   383bc:	ldr	r2, [r4, #88]	; 0x58
   383c0:	sub	r1, r0, #1
   383c4:	mov	r0, r4
   383c8:	bl	37d4c <__assert_fail@plt+0x25190>
   383cc:	bfi	r7, r0, #8, #1
   383d0:	ldr	r0, [r8, r7, lsl #2]
   383d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   383d8:	mov	r0, r4
   383dc:	mov	r1, r6
   383e0:	bl	39fd8 <__assert_fail@plt+0x2741c>
   383e4:	str	r0, [r5]
   383e8:	cmp	r0, #0
   383ec:	beq	38364 <__assert_fail@plt+0x257a8>
   383f0:	b	383b0 <__assert_fail@plt+0x257f4>
   383f4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   383f8:	add	fp, sp, #24
   383fc:	sub	sp, sp, #16
   38400:	mov	r7, r2
   38404:	mov	r4, r1
   38408:	mov	r8, r0
   3840c:	ldr	r5, [r1, #40]	; 0x28
   38410:	ldr	r6, [r1, #84]	; 0x54
   38414:	ldr	r0, [r1, #100]	; 0x64
   38418:	ldr	r1, [r1, #104]	; 0x68
   3841c:	cmp	r5, r1
   38420:	ble	38430 <__assert_fail@plt+0x25874>
   38424:	str	r7, [r0, r5, lsl #2]
   38428:	str	r5, [r4, #104]	; 0x68
   3842c:	b	384cc <__assert_fail@plt+0x25910>
   38430:	ldr	r1, [r0, r5, lsl #2]
   38434:	cmp	r1, #0
   38438:	beq	3846c <__assert_fail@plt+0x258b0>
   3843c:	ldr	r0, [r0, r5, lsl #2]
   38440:	ldr	r2, [r0, #40]	; 0x28
   38444:	cmp	r7, #0
   38448:	beq	38474 <__assert_fail@plt+0x258b8>
   3844c:	ldr	r9, [r7, #40]	; 0x28
   38450:	mov	r0, sp
   38454:	mov	r1, r9
   38458:	bl	389f0 <__assert_fail@plt+0x25e34>
   3845c:	str	r0, [r8]
   38460:	cmp	r0, #0
   38464:	beq	38488 <__assert_fail@plt+0x258cc>
   38468:	b	38538 <__assert_fail@plt+0x2597c>
   3846c:	str	r7, [r0, r5, lsl #2]
   38470:	b	384cc <__assert_fail@plt+0x25910>
   38474:	vldr	d16, [r2]
   38478:	ldr	r0, [r2, #8]
   3847c:	str	r0, [sp, #8]
   38480:	vstr	d16, [sp]
   38484:	mov	r9, #0
   38488:	ldr	r0, [r4, #40]	; 0x28
   3848c:	ldr	r2, [r4, #88]	; 0x58
   38490:	sub	r1, r0, #1
   38494:	mov	r0, r4
   38498:	bl	37d4c <__assert_fail@plt+0x25190>
   3849c:	mov	r3, r0
   384a0:	mov	r2, sp
   384a4:	mov	r0, r8
   384a8:	mov	r1, r6
   384ac:	bl	3665c <__assert_fail@plt+0x23aa0>
   384b0:	mov	r7, r0
   384b4:	ldr	r0, [r4, #100]	; 0x64
   384b8:	str	r7, [r0, r5, lsl #2]
   384bc:	cmp	r9, #0
   384c0:	beq	384cc <__assert_fail@plt+0x25910>
   384c4:	ldr	r0, [sp, #8]
   384c8:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   384cc:	cmp	r7, #0
   384d0:	ldrne	r0, [r6, #76]	; 0x4c
   384d4:	cmpne	r0, #0
   384d8:	bne	384e8 <__assert_fail@plt+0x2592c>
   384dc:	mov	r0, r7
   384e0:	sub	sp, fp, #24
   384e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   384e8:	add	r6, r7, #4
   384ec:	mov	r0, r4
   384f0:	mov	r1, r6
   384f4:	mov	r2, r5
   384f8:	bl	37eec <__assert_fail@plt+0x25330>
   384fc:	str	r0, [r8]
   38500:	cmp	r0, #0
   38504:	bne	38538 <__assert_fail@plt+0x2597c>
   38508:	ldrb	r0, [r7, #52]	; 0x34
   3850c:	tst	r0, #64	; 0x40
   38510:	beq	384dc <__assert_fail@plt+0x25920>
   38514:	mov	r0, r4
   38518:	mov	r1, r6
   3851c:	bl	37f78 <__assert_fail@plt+0x253bc>
   38520:	str	r0, [r8]
   38524:	cmp	r0, #0
   38528:	mov	r7, #0
   3852c:	ldreq	r0, [r4, #100]	; 0x64
   38530:	ldreq	r7, [r0, r5, lsl #2]
   38534:	b	384dc <__assert_fail@plt+0x25920>
   38538:	mov	r7, #0
   3853c:	b	384dc <__assert_fail@plt+0x25920>
   38540:	push	{r4, r5, r6, sl, fp, lr}
   38544:	add	fp, sp, #16
   38548:	mov	r4, r1
   3854c:	mov	r6, r0
   38550:	b	38574 <__assert_fail@plt+0x259b8>
   38554:	mov	r0, r6
   38558:	mov	r1, r4
   3855c:	mov	r2, #0
   38560:	bl	383f4 <__assert_fail@plt+0x25838>
   38564:	cmp	r0, #0
   38568:	ldreq	r1, [r6]
   3856c:	cmpeq	r1, #0
   38570:	popne	{r4, r5, r6, sl, fp, pc}
   38574:	ldr	r1, [r4, #40]	; 0x28
   38578:	ldr	r0, [r4, #104]	; 0x68
   3857c:	cmp	r1, r0
   38580:	movge	r0, #0
   38584:	popge	{r4, r5, r6, sl, fp, pc}
   38588:	add	r2, r1, #1
   3858c:	ldr	r3, [r4, #40]	; 0x28
   38590:	ldr	r5, [r4, #100]	; 0x64
   38594:	add	r3, r3, #1
   38598:	str	r3, [r4, #40]	; 0x28
   3859c:	add	r1, r5, r1, lsl #2
   385a0:	ldr	r1, [r1, #4]
   385a4:	cmp	r1, #0
   385a8:	mov	r1, r2
   385ac:	beq	3857c <__assert_fail@plt+0x259c0>
   385b0:	b	38554 <__assert_fail@plt+0x25998>
   385b4:	push	{r4, r5, r6, r7, fp, lr}
   385b8:	add	fp, sp, #16
   385bc:	mov	r4, r2
   385c0:	mov	r6, r1
   385c4:	mov	r5, r0
   385c8:	ldr	r0, [r0, #124]	; 0x7c
   385cc:	ldr	r7, [r5, #128]	; 0x80
   385d0:	cmp	r0, r7
   385d4:	beq	3861c <__assert_fail@plt+0x25a60>
   385d8:	mov	r0, #1
   385dc:	mov	r1, #24
   385e0:	bl	2c49c <__assert_fail@plt+0x198e0>
   385e4:	ldr	r1, [r5, #124]	; 0x7c
   385e8:	ldr	r2, [r5, #132]	; 0x84
   385ec:	str	r0, [r2, r1, lsl #2]
   385f0:	ldr	r0, [r5, #132]	; 0x84
   385f4:	ldr	r0, [r0, r1, lsl #2]
   385f8:	cmp	r0, #0
   385fc:	strne	r6, [r0, #4]
   38600:	addne	r1, r1, #1
   38604:	strne	r1, [r5, #124]	; 0x7c
   38608:	strne	r4, [r0]
   3860c:	movne	r0, #0
   38610:	popne	{r4, r5, r6, r7, fp, pc}
   38614:	mov	r0, #12
   38618:	pop	{r4, r5, r6, r7, fp, pc}
   3861c:	ldr	r0, [r5, #132]	; 0x84
   38620:	lsl	r1, r7, #3
   38624:	bl	2f804 <__assert_fail@plt+0x1cc48>
   38628:	cmp	r0, #0
   3862c:	beq	38614 <__assert_fail@plt+0x25a58>
   38630:	lsl	r1, r7, #1
   38634:	str	r1, [r5, #128]	; 0x80
   38638:	str	r0, [r5, #132]	; 0x84
   3863c:	b	385d8 <__assert_fail@plt+0x25a1c>
   38640:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38644:	add	fp, sp, #28
   38648:	sub	sp, sp, #52	; 0x34
   3864c:	str	r1, [sp, #36]	; 0x24
   38650:	mov	r4, r0
   38654:	ldr	r5, [r0, #4]
   38658:	ldr	r6, [r0, #84]	; 0x54
   3865c:	str	r2, [fp, #-36]	; 0xffffffdc
   38660:	mov	r1, r2
   38664:	bl	38c20 <__assert_fail@plt+0x26064>
   38668:	cmn	r0, #1
   3866c:	beq	3869c <__assert_fail@plt+0x25ae0>
   38670:	ldr	r1, [r4, #116]	; 0x74
   38674:	add	r0, r0, r0, lsl #1
   38678:	add	r0, r1, r0, lsl #3
   3867c:	ldr	r2, [sp, #36]	; 0x24
   38680:	ldr	r1, [r0]
   38684:	cmp	r1, r2
   38688:	beq	389d0 <__assert_fail@plt+0x25e14>
   3868c:	ldrb	r1, [r0, #20]
   38690:	add	r0, r0, #24
   38694:	cmp	r1, #0
   38698:	bne	38680 <__assert_fail@plt+0x25ac4>
   3869c:	ldr	r0, [r4, #124]	; 0x7c
   386a0:	cmp	r0, #1
   386a4:	blt	389d0 <__assert_fail@plt+0x25e14>
   386a8:	mov	ip, r6
   386ac:	ldr	r0, [r6]
   386b0:	ldr	r1, [sp, #36]	; 0x24
   386b4:	ldr	r2, [r0, r1, lsl #3]
   386b8:	mov	r6, #0
   386bc:	str	r4, [sp, #28]
   386c0:	mov	r3, r5
   386c4:	str	ip, [sp, #24]
   386c8:	str	r2, [sp, #20]
   386cc:	b	38878 <__assert_fail@plt+0x25cbc>
   386d0:	ldr	ip, [sp, #24]
   386d4:	ldr	r2, [sp, #20]
   386d8:	b	38718 <__assert_fail@plt+0x25b5c>
   386dc:	ldr	r0, [r4, #48]	; 0x30
   386e0:	cmp	r6, r0
   386e4:	bge	389bc <__assert_fail@plt+0x25e00>
   386e8:	mov	r9, r6
   386ec:	add	r1, r6, #1
   386f0:	mov	r0, r4
   386f4:	bl	38270 <__assert_fail@plt+0x256b4>
   386f8:	cmp	r0, #0
   386fc:	bne	389e0 <__assert_fail@plt+0x25e24>
   38700:	ldr	r3, [r4, #4]
   38704:	ldr	r7, [sp, #32]
   38708:	mov	r6, r9
   3870c:	ldr	ip, [sp, #24]
   38710:	ldr	r2, [sp, #20]
   38714:	b	38730 <__assert_fail@plt+0x25b74>
   38718:	ldr	r0, [r7]
   3871c:	cmp	r5, r0
   38720:	ble	38748 <__assert_fail@plt+0x25b8c>
   38724:	ldr	r0, [r4, #28]
   38728:	cmp	r6, r0
   3872c:	bge	386dc <__assert_fail@plt+0x25b20>
   38730:	ldrb	r0, [r3, r6]
   38734:	add	r1, r3, r5
   38738:	ldrb	r1, [r1, #-1]
   3873c:	cmp	r0, r1
   38740:	bne	389bc <__assert_fail@plt+0x25e00>
   38744:	add	r6, r6, #1
   38748:	ldr	r0, [r4, #100]	; 0x64
   3874c:	ldr	r0, [r0, r5, lsl #2]
   38750:	cmp	r0, #0
   38754:	beq	3885c <__assert_fail@plt+0x25ca0>
   38758:	mov	r9, r6
   3875c:	mov	sl, r3
   38760:	add	r1, r0, #4
   38764:	mov	r0, ip
   38768:	mov	r3, #9
   3876c:	bl	38dd8 <__assert_fail@plt+0x2621c>
   38770:	cmn	r0, #1
   38774:	beq	38848 <__assert_fail@plt+0x25c8c>
   38778:	mov	r4, r0
   3877c:	ldr	r1, [sp, #32]
   38780:	ldr	r0, [r1, #8]
   38784:	cmp	r0, #0
   38788:	bne	387b4 <__assert_fail@plt+0x25bf8>
   3878c:	ldr	r0, [r1]
   38790:	sub	r0, r5, r0
   38794:	add	r1, r0, #1
   38798:	mov	r8, #12
   3879c:	mov	r0, #12
   387a0:	bl	2c49c <__assert_fail@plt+0x198e0>
   387a4:	ldr	r1, [sp, #32]
   387a8:	str	r0, [r1, #8]
   387ac:	cmp	r0, #0
   387b0:	beq	389d4 <__assert_fail@plt+0x25e18>
   387b4:	ldr	r3, [r1]
   387b8:	ldr	r2, [r1, #4]
   387bc:	ldr	r1, [r1, #8]
   387c0:	stm	sp, {r4, r5}
   387c4:	mov	r0, #9
   387c8:	str	r0, [sp, #8]
   387cc:	ldr	r0, [sp, #28]
   387d0:	bl	38e2c <__assert_fail@plt+0x26270>
   387d4:	ldr	r7, [sp, #32]
   387d8:	cmp	r0, #1
   387dc:	mov	r3, sl
   387e0:	mov	r6, r9
   387e4:	ldr	ip, [sp, #24]
   387e8:	ldr	r2, [sp, #20]
   387ec:	beq	3885c <__assert_fail@plt+0x25ca0>
   387f0:	mov	r8, r0
   387f4:	cmp	r0, #0
   387f8:	bne	389d4 <__assert_fail@plt+0x25e18>
   387fc:	mov	r0, r7
   38800:	mov	r1, r4
   38804:	mov	r2, r5
   38808:	bl	39200 <__assert_fail@plt+0x26644>
   3880c:	cmp	r0, #0
   38810:	beq	389e8 <__assert_fail@plt+0x25e2c>
   38814:	mov	r2, r0
   38818:	ldr	r0, [fp, #-36]	; 0xffffffdc
   3881c:	str	r0, [sp]
   38820:	ldr	r4, [sp, #28]
   38824:	mov	r0, r4
   38828:	mov	r1, r7
   3882c:	ldr	r3, [sp, #36]	; 0x24
   38830:	bl	38d40 <__assert_fail@plt+0x26184>
   38834:	cmp	r0, #1
   38838:	bhi	389e0 <__assert_fail@plt+0x25e24>
   3883c:	ldr	r3, [r4, #4]
   38840:	ldr	r7, [sp, #32]
   38844:	b	38850 <__assert_fail@plt+0x25c94>
   38848:	ldr	r7, [sp, #32]
   3884c:	mov	r3, sl
   38850:	mov	r6, r9
   38854:	ldr	ip, [sp, #24]
   38858:	ldr	r2, [sp, #20]
   3885c:	add	r1, r5, #1
   38860:	ldr	r0, [fp, #-36]	; 0xffffffdc
   38864:	cmp	r5, r0
   38868:	mov	r5, r1
   3886c:	ldr	r4, [sp, #28]
   38870:	blt	38718 <__assert_fail@plt+0x25b5c>
   38874:	b	389bc <__assert_fail@plt+0x25e00>
   38878:	ldr	r0, [r4, #132]	; 0x84
   3887c:	ldr	r7, [r0, r6, lsl #2]
   38880:	ldr	r0, [r7, #4]
   38884:	ldr	r1, [ip]
   38888:	ldr	r0, [r1, r0, lsl #3]
   3888c:	cmp	r0, r2
   38890:	str	r6, [sp, #16]
   38894:	bne	389bc <__assert_fail@plt+0x25e00>
   38898:	ldr	r5, [r7]
   3889c:	ldr	r0, [r7, #16]
   388a0:	cmp	r0, #1
   388a4:	str	r7, [sp, #32]
   388a8:	mov	sl, #0
   388ac:	blt	388bc <__assert_fail@plt+0x25d00>
   388b0:	ldr	r6, [fp, #-36]	; 0xffffffdc
   388b4:	mov	r9, r5
   388b8:	b	388f0 <__assert_fail@plt+0x25d34>
   388bc:	ldr	r6, [fp, #-36]	; 0xffffffdc
   388c0:	b	38994 <__assert_fail@plt+0x25dd8>
   388c4:	ldr	r0, [r4, #48]	; 0x30
   388c8:	cmp	r1, r0
   388cc:	bgt	38990 <__assert_fail@plt+0x25dd4>
   388d0:	mov	r7, r6
   388d4:	mov	r0, r4
   388d8:	bl	38cac <__assert_fail@plt+0x260f0>
   388dc:	cmp	r0, #0
   388e0:	bne	389e0 <__assert_fail@plt+0x25e24>
   388e4:	ldr	r3, [r4, #4]
   388e8:	mov	r6, r7
   388ec:	b	38920 <__assert_fail@plt+0x25d64>
   388f0:	ldr	r0, [r7, #20]
   388f4:	ldr	r2, [r0, sl, lsl #2]
   388f8:	ldr	r0, [r2, #4]
   388fc:	str	r0, [fp, #-32]	; 0xffffffe0
   38900:	sub	r5, r0, r9
   38904:	cmp	r5, #1
   38908:	blt	3894c <__assert_fail@plt+0x25d90>
   3890c:	add	r1, r5, r6
   38910:	ldr	r0, [r4, #28]
   38914:	cmp	r1, r0
   38918:	str	r2, [sp, #40]	; 0x28
   3891c:	bgt	388c4 <__assert_fail@plt+0x25d08>
   38920:	add	r0, r3, r6
   38924:	add	r1, r3, r9
   38928:	mov	r8, r6
   3892c:	mov	r2, r5
   38930:	mov	r7, r3
   38934:	bl	12628 <memcmp@plt>
   38938:	mov	r3, r7
   3893c:	cmp	r0, #0
   38940:	ldr	r7, [sp, #32]
   38944:	ldr	r2, [sp, #40]	; 0x28
   38948:	bne	38990 <__assert_fail@plt+0x25dd4>
   3894c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   38950:	str	r0, [sp]
   38954:	mov	r0, r4
   38958:	mov	r1, r7
   3895c:	ldr	r3, [sp, #36]	; 0x24
   38960:	bl	38d40 <__assert_fail@plt+0x26184>
   38964:	cmp	r0, #1
   38968:	bhi	389e0 <__assert_fail@plt+0x25e24>
   3896c:	add	r6, r5, r6
   38970:	add	sl, sl, #1
   38974:	ldr	r3, [r4, #4]
   38978:	ldr	r0, [r7, #16]
   3897c:	cmp	sl, r0
   38980:	ldr	r5, [fp, #-32]	; 0xffffffe0
   38984:	mov	r9, r5
   38988:	blt	388f0 <__assert_fail@plt+0x25d34>
   3898c:	b	38994 <__assert_fail@plt+0x25dd8>
   38990:	mov	r5, r9
   38994:	ldr	r0, [r7, #16]
   38998:	cmp	sl, r0
   3899c:	blt	389b4 <__assert_fail@plt+0x25df8>
   389a0:	cmp	sl, #0
   389a4:	addne	r5, r5, #1
   389a8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   389ac:	cmp	r5, r0
   389b0:	ble	386d0 <__assert_fail@plt+0x25b14>
   389b4:	ldr	ip, [sp, #24]
   389b8:	ldr	r2, [sp, #20]
   389bc:	ldr	r6, [sp, #16]
   389c0:	add	r6, r6, #1
   389c4:	ldr	r0, [r4, #124]	; 0x7c
   389c8:	cmp	r6, r0
   389cc:	blt	38878 <__assert_fail@plt+0x25cbc>
   389d0:	mov	r8, #0
   389d4:	mov	r0, r8
   389d8:	sub	sp, fp, #28
   389dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   389e0:	mov	r8, r0
   389e4:	b	389d4 <__assert_fail@plt+0x25e18>
   389e8:	mov	r8, #12
   389ec:	b	389d4 <__assert_fail@plt+0x25e18>
   389f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   389f4:	add	fp, sp, #28
   389f8:	sub	sp, sp, #4
   389fc:	mov	sl, r2
   38a00:	mov	r8, r0
   38a04:	cmp	r1, #0
   38a08:	beq	38a40 <__assert_fail@plt+0x25e84>
   38a0c:	mov	r6, r1
   38a10:	ldr	r0, [r1, #4]
   38a14:	cmp	sl, #0
   38a18:	beq	38a2c <__assert_fail@plt+0x25e70>
   38a1c:	cmp	r0, #1
   38a20:	ldrge	r1, [sl, #4]
   38a24:	cmpge	r1, #1
   38a28:	bge	38a80 <__assert_fail@plt+0x25ec4>
   38a2c:	cmp	r0, #1
   38a30:	blt	38a40 <__assert_fail@plt+0x25e84>
   38a34:	mov	r0, r8
   38a38:	mov	r1, r6
   38a3c:	b	38a5c <__assert_fail@plt+0x25ea0>
   38a40:	cmp	sl, #0
   38a44:	beq	38a68 <__assert_fail@plt+0x25eac>
   38a48:	ldr	r0, [sl, #4]
   38a4c:	cmp	r0, #1
   38a50:	blt	38a68 <__assert_fail@plt+0x25eac>
   38a54:	mov	r0, r8
   38a58:	mov	r1, sl
   38a5c:	sub	sp, fp, #28
   38a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38a64:	b	36574 <__assert_fail@plt+0x239b8>
   38a68:	mov	r0, #0
   38a6c:	str	r0, [r8]
   38a70:	str	r0, [r8, #4]
   38a74:	str	r0, [r8, #8]
   38a78:	sub	sp, fp, #28
   38a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38a80:	add	r0, r1, r0
   38a84:	str	r0, [r8]
   38a88:	lsl	r0, r0, #2
   38a8c:	bl	2ed04 <__assert_fail@plt+0x1c148>
   38a90:	str	r0, [r8, #8]
   38a94:	cmp	r0, #0
   38a98:	beq	38c14 <__assert_fail@plt+0x26058>
   38a9c:	ldr	r2, [sl, #4]
   38aa0:	mov	r4, #0
   38aa4:	cmp	r2, #0
   38aa8:	mov	r0, #0
   38aac:	movwgt	r0, #1
   38ab0:	ldr	r3, [r6, #4]
   38ab4:	cmp	r3, #1
   38ab8:	blt	38b78 <__assert_fail@plt+0x25fbc>
   38abc:	mov	r9, #0
   38ac0:	cmp	r2, #1
   38ac4:	blt	38b88 <__assert_fail@plt+0x25fcc>
   38ac8:	mov	ip, #0
   38acc:	mov	r0, #0
   38ad0:	mov	r4, ip
   38ad4:	mov	r7, r0
   38ad8:	ldr	r0, [sl, #8]
   38adc:	ldr	r1, [r0, r4, lsl #2]
   38ae0:	ldr	r0, [r6, #8]
   38ae4:	ldr	r5, [r0, r9, lsl #2]
   38ae8:	cmp	r5, r1
   38aec:	ble	38b2c <__assert_fail@plt+0x25f70>
   38af0:	ldr	r0, [r8, #8]
   38af4:	str	r1, [r0, r7, lsl #2]
   38af8:	ldr	r2, [sl, #4]
   38afc:	add	r1, r4, #1
   38b00:	cmp	r2, r1
   38b04:	mov	r0, #0
   38b08:	movwgt	r0, #1
   38b0c:	ldr	r3, [r6, #4]
   38b10:	cmp	r3, r9
   38b14:	ble	38bb4 <__assert_fail@plt+0x25ff8>
   38b18:	add	r7, r7, #1
   38b1c:	cmp	r2, r1
   38b20:	mov	r4, r1
   38b24:	bgt	38ad8 <__assert_fail@plt+0x25f1c>
   38b28:	b	38b8c <__assert_fail@plt+0x25fd0>
   38b2c:	ldr	r0, [r8, #8]
   38b30:	str	r5, [r0, r7, lsl #2]
   38b34:	add	lr, r4, #1
   38b38:	cmp	r5, r1
   38b3c:	mov	ip, r4
   38b40:	moveq	ip, lr
   38b44:	ldr	r2, [sl, #4]
   38b48:	cmp	r2, ip
   38b4c:	mov	r0, #0
   38b50:	movwgt	r0, #1
   38b54:	add	r9, r9, #1
   38b58:	ldr	r3, [r6, #4]
   38b5c:	cmp	r3, r9
   38b60:	ble	38bfc <__assert_fail@plt+0x26040>
   38b64:	add	r0, r7, #1
   38b68:	cmp	r2, ip
   38b6c:	bgt	38ad0 <__assert_fail@plt+0x25f14>
   38b70:	add	r7, r7, #1
   38b74:	b	38b8c <__assert_fail@plt+0x25fd0>
   38b78:	mov	r6, #0
   38b7c:	cmp	r0, #0
   38b80:	bne	38bc4 <__assert_fail@plt+0x26008>
   38b84:	b	38bec <__assert_fail@plt+0x26030>
   38b88:	mov	r7, #0
   38b8c:	ldr	r0, [r8, #8]
   38b90:	add	r0, r0, r7, lsl #2
   38b94:	ldr	r1, [r6, #8]
   38b98:	add	r1, r1, r9, lsl #2
   38b9c:	sub	r2, r3, r9
   38ba0:	lsl	r2, r2, #2
   38ba4:	bl	125c8 <memcpy@plt>
   38ba8:	sub	r0, r7, r9
   38bac:	ldr	r1, [r6, #4]
   38bb0:	b	38be8 <__assert_fail@plt+0x2602c>
   38bb4:	add	r6, r7, #1
   38bb8:	add	r4, r4, #1
   38bbc:	cmp	r0, #0
   38bc0:	beq	38bec <__assert_fail@plt+0x26030>
   38bc4:	ldr	r0, [r8, #8]
   38bc8:	add	r0, r0, r6, lsl #2
   38bcc:	ldr	r1, [sl, #8]
   38bd0:	add	r1, r1, r4, lsl #2
   38bd4:	sub	r2, r2, r4
   38bd8:	lsl	r2, r2, #2
   38bdc:	bl	125c8 <memcpy@plt>
   38be0:	sub	r0, r6, r4
   38be4:	ldr	r1, [sl, #4]
   38be8:	add	r6, r0, r1
   38bec:	str	r6, [r8, #4]
   38bf0:	mov	r0, #0
   38bf4:	sub	sp, fp, #28
   38bf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38bfc:	cmp	r5, r1
   38c00:	moveq	r4, lr
   38c04:	add	r6, r7, #1
   38c08:	cmp	r0, #0
   38c0c:	bne	38bc4 <__assert_fail@plt+0x26008>
   38c10:	b	38bec <__assert_fail@plt+0x26030>
   38c14:	mov	r0, #12
   38c18:	sub	sp, fp, #28
   38c1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38c20:	push	{r4, r5, r6, r7, fp, lr}
   38c24:	add	fp, sp, #16
   38c28:	mov	ip, r0
   38c2c:	ldr	lr, [r0, #108]	; 0x6c
   38c30:	cmp	lr, #1
   38c34:	blt	38c98 <__assert_fail@plt+0x260dc>
   38c38:	ldr	r2, [ip, #116]	; 0x74
   38c3c:	mov	r0, #0
   38c40:	mov	r3, #1
   38c44:	mov	r4, lr
   38c48:	add	r5, r0, r4
   38c4c:	add	r5, r5, r5, lsr #31
   38c50:	asr	r6, r5, #1
   38c54:	add	r7, r6, r6, lsl #1
   38c58:	add	r7, r2, r7, lsl #3
   38c5c:	ldr	r7, [r7, #4]
   38c60:	cmp	r7, r1
   38c64:	addlt	r0, r3, r5, asr #1
   38c68:	movge	r4, r6
   38c6c:	cmp	r0, r4
   38c70:	blt	38c48 <__assert_fail@plt+0x2608c>
   38c74:	cmp	r0, lr
   38c78:	bge	38ca4 <__assert_fail@plt+0x260e8>
   38c7c:	ldr	r2, [ip, #116]	; 0x74
   38c80:	add	r3, r0, r0, lsl #1
   38c84:	add	r2, r2, r3, lsl #3
   38c88:	ldr	r2, [r2, #4]
   38c8c:	cmp	r2, r1
   38c90:	mvnne	r0, #0
   38c94:	pop	{r4, r5, r6, r7, fp, pc}
   38c98:	mov	r0, #0
   38c9c:	cmp	r0, lr
   38ca0:	blt	38c7c <__assert_fail@plt+0x260c0>
   38ca4:	mvn	r0, #0
   38ca8:	pop	{r4, r5, r6, r7, fp, pc}
   38cac:	push	{r4, r5, r6, r7, fp, lr}
   38cb0:	add	fp, sp, #16
   38cb4:	mov	r4, r1
   38cb8:	mov	r5, r0
   38cbc:	ldr	r0, [r0, #36]	; 0x24
   38cc0:	ldr	r7, [r5, #104]	; 0x68
   38cc4:	cmp	r0, r1
   38cc8:	ldrle	r1, [r5, #48]	; 0x30
   38ccc:	cmple	r0, r1
   38cd0:	blt	38d20 <__assert_fail@plt+0x26164>
   38cd4:	ldr	r0, [r5, #28]
   38cd8:	cmp	r0, r4
   38cdc:	ldrle	r1, [r5, #48]	; 0x30
   38ce0:	cmple	r0, r1
   38ce4:	blt	38d20 <__assert_fail@plt+0x26164>
   38ce8:	mov	r6, #0
   38cec:	cmp	r7, r4
   38cf0:	bge	38d38 <__assert_fail@plt+0x2617c>
   38cf4:	sub	r0, r4, r7
   38cf8:	lsl	r2, r0, #2
   38cfc:	ldr	r0, [r5, #100]	; 0x64
   38d00:	add	r0, r0, r7, lsl #2
   38d04:	add	r0, r0, #4
   38d08:	mov	r6, #0
   38d0c:	mov	r1, #0
   38d10:	bl	12904 <memset@plt>
   38d14:	str	r4, [r5, #104]	; 0x68
   38d18:	mov	r0, r6
   38d1c:	pop	{r4, r5, r6, r7, fp, pc}
   38d20:	add	r1, r4, #1
   38d24:	mov	r0, r5
   38d28:	bl	38270 <__assert_fail@plt+0x256b4>
   38d2c:	mov	r6, r0
   38d30:	cmp	r0, #0
   38d34:	beq	38ce8 <__assert_fail@plt+0x2612c>
   38d38:	mov	r0, r6
   38d3c:	pop	{r4, r5, r6, r7, fp, pc}
   38d40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   38d44:	add	fp, sp, #24
   38d48:	sub	sp, sp, #16
   38d4c:	mov	r7, r3
   38d50:	mov	r6, r2
   38d54:	mov	r8, r1
   38d58:	mov	r4, r0
   38d5c:	ldr	r2, [r2]
   38d60:	ldr	r3, [r6, #4]
   38d64:	mov	r0, #8
   38d68:	str	r0, [sp, #8]
   38d6c:	ldr	r5, [fp, #8]
   38d70:	str	r5, [sp, #4]
   38d74:	str	r7, [sp]
   38d78:	add	r1, r6, #8
   38d7c:	mov	r0, r4
   38d80:	bl	38e2c <__assert_fail@plt+0x26270>
   38d84:	cmp	r0, #0
   38d88:	beq	38d94 <__assert_fail@plt+0x261d8>
   38d8c:	sub	sp, fp, #24
   38d90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   38d94:	ldr	r3, [r8]
   38d98:	ldr	r0, [r6, #4]
   38d9c:	str	r0, [sp]
   38da0:	mov	r0, r4
   38da4:	mov	r1, r7
   38da8:	mov	r2, r5
   38dac:	bl	39280 <__assert_fail@plt+0x266c4>
   38db0:	cmp	r0, #0
   38db4:	bne	38d8c <__assert_fail@plt+0x261d0>
   38db8:	ldr	r0, [r6, #4]
   38dbc:	add	r0, r0, r5
   38dc0:	ldr	r1, [r8]
   38dc4:	sub	r1, r0, r1
   38dc8:	mov	r0, r4
   38dcc:	sub	sp, fp, #24
   38dd0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   38dd4:	b	38cac <__assert_fail@plt+0x260f0>
   38dd8:	push	{r4, r5, fp, lr}
   38ddc:	add	fp, sp, #8
   38de0:	ldr	r4, [r1, #4]
   38de4:	cmp	r4, #1
   38de8:	blt	38e24 <__assert_fail@plt+0x26268>
   38dec:	ldr	ip, [r0]
   38df0:	ldr	lr, [r1, #8]
   38df4:	mov	r4, #0
   38df8:	ldr	r0, [lr, r4, lsl #2]
   38dfc:	add	r5, ip, r0, lsl #3
   38e00:	ldrb	r5, [r5, #4]
   38e04:	cmp	r5, r3
   38e08:	ldreq	r5, [ip, r0, lsl #3]
   38e0c:	cmpeq	r5, r2
   38e10:	popeq	{r4, r5, fp, pc}
   38e14:	add	r4, r4, #1
   38e18:	ldr	r0, [r1, #4]
   38e1c:	cmp	r4, r0
   38e20:	blt	38df8 <__assert_fail@plt+0x2623c>
   38e24:	mvn	r0, #0
   38e28:	pop	{r4, r5, fp, pc}
   38e2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38e30:	add	fp, sp, #28
   38e34:	sub	sp, sp, #44	; 0x2c
   38e38:	mov	sl, r3
   38e3c:	mov	r8, r2
   38e40:	mov	r7, r1
   38e44:	mov	r4, r0
   38e48:	ldr	r1, [r0, #84]	; 0x54
   38e4c:	mov	r0, #0
   38e50:	str	r0, [fp, #-32]	; 0xffffffe0
   38e54:	str	r1, [sp, #20]
   38e58:	ldr	r0, [r1]
   38e5c:	ldr	r0, [r0, r2, lsl #3]
   38e60:	str	r0, [sp, #16]
   38e64:	ldr	r0, [r4, #120]	; 0x78
   38e68:	ldr	r1, [fp, #12]
   38e6c:	add	r0, r0, r1
   38e70:	ldr	r5, [r7, #4]
   38e74:	cmp	r5, r0
   38e78:	ble	39198 <__assert_fail@plt+0x265dc>
   38e7c:	ldr	r0, [r4, #40]	; 0x28
   38e80:	str	r0, [sp, #12]
   38e84:	ldr	r2, [r4, #88]	; 0x58
   38e88:	ldr	r0, [r4, #100]	; 0x64
   38e8c:	str	r0, [sp, #8]
   38e90:	ldr	r6, [r7]
   38e94:	ldr	r0, [r7, #8]
   38e98:	str	r0, [r4, #100]	; 0x64
   38e9c:	cmp	r6, #0
   38ea0:	moveq	r6, sl
   38ea4:	str	r6, [r4, #40]	; 0x28
   38ea8:	sub	r1, r6, #1
   38eac:	mov	r0, r4
   38eb0:	bl	37d4c <__assert_fail@plt+0x25190>
   38eb4:	mov	r9, r0
   38eb8:	cmp	r6, sl
   38ebc:	mov	r5, r4
   38ec0:	bne	38f00 <__assert_fail@plt+0x26344>
   38ec4:	add	r0, sp, #24
   38ec8:	mov	r1, r8
   38ecc:	bl	35c5c <__assert_fail@plt+0x230a0>
   38ed0:	str	r0, [fp, #-32]	; 0xffffffe0
   38ed4:	cmp	r0, #0
   38ed8:	bne	391f8 <__assert_fail@plt+0x2663c>
   38edc:	add	r1, sp, #24
   38ee0:	ldr	r0, [sp, #20]
   38ee4:	ldr	r2, [sp, #16]
   38ee8:	ldr	r3, [fp, #16]
   38eec:	bl	3937c <__assert_fail@plt+0x267c0>
   38ef0:	str	r0, [fp, #-32]	; 0xffffffe0
   38ef4:	cmp	r0, #0
   38ef8:	beq	38f68 <__assert_fail@plt+0x263ac>
   38efc:	b	39188 <__assert_fail@plt+0x265cc>
   38f00:	ldr	r0, [r5, #100]	; 0x64
   38f04:	ldr	r8, [r0, r6, lsl #2]
   38f08:	cmp	r8, #0
   38f0c:	beq	38f30 <__assert_fail@plt+0x26374>
   38f10:	ldrb	r0, [r8, #52]	; 0x34
   38f14:	tst	r0, #64	; 0x40
   38f18:	bne	38f44 <__assert_fail@plt+0x26388>
   38f1c:	mov	r0, #0
   38f20:	str	r0, [sp, #28]
   38f24:	str	r0, [sp, #24]
   38f28:	str	r0, [sp, #32]
   38f2c:	b	38f5c <__assert_fail@plt+0x263a0>
   38f30:	mov	r8, #0
   38f34:	str	r8, [sp, #28]
   38f38:	str	r8, [sp, #24]
   38f3c:	str	r8, [sp, #32]
   38f40:	b	38fd0 <__assert_fail@plt+0x26414>
   38f44:	add	r1, r8, #4
   38f48:	add	r0, sp, #24
   38f4c:	bl	36574 <__assert_fail@plt+0x239b8>
   38f50:	str	r0, [fp, #-32]	; 0xffffffe0
   38f54:	cmp	r0, #0
   38f58:	bne	391f8 <__assert_fail@plt+0x2663c>
   38f5c:	ldrb	r0, [r8, #52]	; 0x34
   38f60:	tst	r0, #64	; 0x40
   38f64:	beq	38fd0 <__assert_fail@plt+0x26414>
   38f68:	ldr	r0, [sp, #28]
   38f6c:	cmp	r0, #0
   38f70:	beq	38f9c <__assert_fail@plt+0x263e0>
   38f74:	ldr	r0, [fp, #16]
   38f78:	str	r0, [sp]
   38f7c:	add	r1, sp, #24
   38f80:	mov	r0, r5
   38f84:	mov	r2, r6
   38f88:	ldr	r3, [sp, #16]
   38f8c:	bl	39474 <__assert_fail@plt+0x268b8>
   38f90:	str	r0, [fp, #-32]	; 0xffffffe0
   38f94:	cmp	r0, #0
   38f98:	bne	39188 <__assert_fail@plt+0x265cc>
   38f9c:	sub	r0, fp, #32
   38fa0:	add	r2, sp, #24
   38fa4:	ldr	r1, [sp, #20]
   38fa8:	mov	r3, r9
   38fac:	bl	3665c <__assert_fail@plt+0x23aa0>
   38fb0:	mov	r8, r0
   38fb4:	cmp	r0, #0
   38fb8:	bne	38fc8 <__assert_fail@plt+0x2640c>
   38fbc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   38fc0:	cmp	r0, #0
   38fc4:	bne	39188 <__assert_fail@plt+0x265cc>
   38fc8:	ldr	r0, [r5, #100]	; 0x64
   38fcc:	str	r8, [r0, r6, lsl #2]
   38fd0:	ldr	r0, [fp, #12]
   38fd4:	cmp	r6, r0
   38fd8:	bge	3912c <__assert_fail@plt+0x26570>
   38fdc:	str	r7, [sp, #4]
   38fe0:	add	r7, r6, #1
   38fe4:	add	r4, sp, #24
   38fe8:	mov	sl, #0
   38fec:	sub	r6, r7, #1
   38ff0:	ldr	r0, [r5, #120]	; 0x78
   38ff4:	cmp	sl, r0
   38ff8:	bgt	39128 <__assert_fail@plt+0x2656c>
   38ffc:	mov	r0, #0
   39000:	str	r0, [sp, #28]
   39004:	ldr	r0, [r5, #100]	; 0x64
   39008:	ldr	r0, [r0, r7, lsl #2]
   3900c:	cmp	r0, #0
   39010:	beq	3902c <__assert_fail@plt+0x26470>
   39014:	add	r1, r0, #4
   39018:	mov	r0, r4
   3901c:	bl	36170 <__assert_fail@plt+0x235b4>
   39020:	str	r0, [fp, #-32]	; 0xffffffe0
   39024:	cmp	r0, #0
   39028:	bne	39188 <__assert_fail@plt+0x265cc>
   3902c:	cmp	r8, #0
   39030:	beq	39054 <__assert_fail@plt+0x26498>
   39034:	add	r2, r8, #16
   39038:	mov	r0, r5
   3903c:	mov	r1, r6
   39040:	mov	r3, r4
   39044:	bl	39708 <__assert_fail@plt+0x26b4c>
   39048:	str	r0, [fp, #-32]	; 0xffffffe0
   3904c:	cmp	r0, #0
   39050:	bne	39188 <__assert_fail@plt+0x265cc>
   39054:	ldr	r0, [sp, #28]
   39058:	cmp	r0, #0
   3905c:	beq	390bc <__assert_fail@plt+0x26500>
   39060:	mov	r8, r6
   39064:	mov	r9, r5
   39068:	ldr	r0, [sp, #20]
   3906c:	mov	r1, r4
   39070:	ldr	r6, [sp, #16]
   39074:	mov	r2, r6
   39078:	ldr	r5, [fp, #16]
   3907c:	mov	r3, r5
   39080:	bl	3937c <__assert_fail@plt+0x267c0>
   39084:	str	r0, [fp, #-32]	; 0xffffffe0
   39088:	cmp	r0, #0
   3908c:	bne	39188 <__assert_fail@plt+0x265cc>
   39090:	str	r5, [sp]
   39094:	mov	r5, r9
   39098:	mov	r0, r9
   3909c:	mov	r1, r4
   390a0:	mov	r2, r7
   390a4:	mov	r3, r6
   390a8:	bl	39474 <__assert_fail@plt+0x268b8>
   390ac:	str	r0, [fp, #-32]	; 0xffffffe0
   390b0:	cmp	r0, #0
   390b4:	mov	r6, r8
   390b8:	bne	39188 <__assert_fail@plt+0x265cc>
   390bc:	ldr	r2, [r5, #88]	; 0x58
   390c0:	mov	r0, r5
   390c4:	mov	r1, r6
   390c8:	bl	37d4c <__assert_fail@plt+0x25190>
   390cc:	mov	r3, r0
   390d0:	sub	r0, fp, #32
   390d4:	ldr	r1, [sp, #20]
   390d8:	mov	r2, r4
   390dc:	bl	3665c <__assert_fail@plt+0x23aa0>
   390e0:	mov	r8, r0
   390e4:	cmp	r0, #0
   390e8:	bne	390f8 <__assert_fail@plt+0x2653c>
   390ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   390f0:	cmp	r0, #0
   390f4:	bne	39188 <__assert_fail@plt+0x265cc>
   390f8:	ldr	r0, [r5, #100]	; 0x64
   390fc:	str	r8, [r0, r7, lsl #2]
   39100:	cmp	r8, #0
   39104:	mov	r1, #0
   39108:	addeq	r1, sl, #1
   3910c:	add	r0, r7, #1
   39110:	ldr	r2, [fp, #12]
   39114:	cmp	r7, r2
   39118:	mov	r7, r0
   3911c:	mov	sl, r1
   39120:	blt	38fec <__assert_fail@plt+0x26430>
   39124:	sub	r6, r0, #1
   39128:	ldr	r7, [sp, #4]
   3912c:	ldr	r0, [sp, #32]
   39130:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   39134:	ldr	r0, [r5, #100]	; 0x64
   39138:	ldr	r1, [fp, #12]
   3913c:	ldr	r0, [r0, r1, lsl #2]
   39140:	str	r6, [r7]
   39144:	ldr	r1, [sp, #12]
   39148:	str	r1, [r5, #40]	; 0x28
   3914c:	ldr	r1, [sp, #8]
   39150:	str	r1, [r5, #100]	; 0x64
   39154:	cmp	r0, #0
   39158:	beq	39178 <__assert_fail@plt+0x265bc>
   3915c:	ldr	r1, [fp, #8]
   39160:	add	r0, r0, #4
   39164:	bl	365f0 <__assert_fail@plt+0x23a34>
   39168:	mov	r4, #0
   3916c:	cmp	r0, #0
   39170:	moveq	r4, #1
   39174:	b	3917c <__assert_fail@plt+0x265c0>
   39178:	mov	r4, #1
   3917c:	mov	r0, r4
   39180:	sub	sp, fp, #28
   39184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39188:	ldr	r0, [sp, #32]
   3918c:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   39190:	ldr	r4, [fp, #-32]	; 0xffffffe0
   39194:	b	3917c <__assert_fail@plt+0x265c0>
   39198:	str	r4, [sp, #12]
   3919c:	mvn	r1, #-2147483648	; 0x80000000
   391a0:	sub	r1, r1, r5
   391a4:	mov	r4, #12
   391a8:	cmp	r1, r0
   391ac:	ble	3917c <__assert_fail@plt+0x265c0>
   391b0:	add	r6, r0, #1
   391b4:	add	r1, r6, r5
   391b8:	cmn	r1, #-1073741823	; 0xc0000001
   391bc:	bhi	3917c <__assert_fail@plt+0x265c0>
   391c0:	ldr	r0, [r7, #8]
   391c4:	mov	r9, r1
   391c8:	lsl	r1, r1, #2
   391cc:	bl	2f804 <__assert_fail@plt+0x1cc48>
   391d0:	cmp	r0, #0
   391d4:	beq	3917c <__assert_fail@plt+0x265c0>
   391d8:	str	r9, [r7, #4]
   391dc:	str	r0, [r7, #8]
   391e0:	add	r0, r0, r5, lsl #2
   391e4:	lsl	r2, r6, #2
   391e8:	mov	r1, #0
   391ec:	bl	12904 <memset@plt>
   391f0:	ldr	r4, [sp, #12]
   391f4:	b	38e7c <__assert_fail@plt+0x262c0>
   391f8:	mov	r4, r0
   391fc:	b	3917c <__assert_fail@plt+0x265c0>
   39200:	push	{r4, r5, r6, r7, fp, lr}
   39204:	add	fp, sp, #16
   39208:	mov	r5, r2
   3920c:	mov	r6, r1
   39210:	mov	r4, r0
   39214:	ldr	r0, [r0, #12]
   39218:	ldr	r1, [r4, #16]
   3921c:	cmp	r1, r0
   39220:	beq	39254 <__assert_fail@plt+0x26698>
   39224:	mov	r0, #1
   39228:	mov	r1, #20
   3922c:	bl	2c49c <__assert_fail@plt+0x198e0>
   39230:	cmp	r0, #0
   39234:	ldrne	r1, [r4, #16]
   39238:	ldrne	r2, [r4, #20]
   3923c:	strne	r0, [r2, r1, lsl #2]
   39240:	strne	r6, [r0]
   39244:	strne	r5, [r0, #4]
   39248:	addne	r1, r1, #1
   3924c:	strne	r1, [r4, #16]
   39250:	pop	{r4, r5, r6, r7, fp, pc}
   39254:	mov	r1, #1
   39258:	orr	r7, r1, r0, lsl #1
   3925c:	lsl	r1, r7, #2
   39260:	ldr	r0, [r4, #20]
   39264:	bl	2f804 <__assert_fail@plt+0x1cc48>
   39268:	cmp	r0, #0
   3926c:	moveq	r0, #0
   39270:	popeq	{r4, r5, r6, r7, fp, pc}
   39274:	str	r7, [r4, #12]
   39278:	str	r0, [r4, #20]
   3927c:	b	39224 <__assert_fail@plt+0x26668>
   39280:	push	{r4, r5, r6, r7, fp, lr}
   39284:	add	fp, sp, #16
   39288:	mov	r5, r3
   3928c:	mov	r6, r2
   39290:	mov	r7, r1
   39294:	mov	r4, r0
   39298:	ldr	r1, [r0, #108]	; 0x6c
   3929c:	ldr	r2, [r0, #112]	; 0x70
   392a0:	cmp	r1, r2
   392a4:	blt	392f4 <__assert_fail@plt+0x26738>
   392a8:	ldr	r0, [r4, #116]	; 0x74
   392ac:	add	r1, r2, r2, lsl #1
   392b0:	lsl	r1, r1, #4
   392b4:	bl	2f804 <__assert_fail@plt+0x1cc48>
   392b8:	cmp	r0, #0
   392bc:	beq	3936c <__assert_fail@plt+0x267b0>
   392c0:	str	r0, [r4, #116]	; 0x74
   392c4:	ldr	r1, [r4, #108]	; 0x6c
   392c8:	ldr	r2, [r4, #112]	; 0x70
   392cc:	add	r1, r1, r1, lsl #1
   392d0:	add	r0, r0, r1, lsl #3
   392d4:	add	r1, r2, r2, lsl #1
   392d8:	lsl	r2, r1, #3
   392dc:	mov	r1, #0
   392e0:	bl	12904 <memset@plt>
   392e4:	ldr	r1, [r4, #108]	; 0x6c
   392e8:	ldr	r0, [r4, #112]	; 0x70
   392ec:	lsl	r0, r0, #1
   392f0:	str	r0, [r4, #112]	; 0x70
   392f4:	ldr	r2, [fp, #8]
   392f8:	cmp	r1, #1
   392fc:	blt	39320 <__assert_fail@plt+0x26764>
   39300:	ldr	r0, [r4, #116]	; 0x74
   39304:	sub	r3, r1, #1
   39308:	add	r3, r3, r3, lsl #1
   3930c:	add	r0, r0, r3, lsl #3
   39310:	ldr	r3, [r0, #4]
   39314:	cmp	r3, r6
   39318:	moveq	r3, #1
   3931c:	strbeq	r3, [r0, #20]
   39320:	ldr	r3, [r4, #116]	; 0x74
   39324:	add	r0, r1, r1, lsl #1
   39328:	str	r7, [r3, r0, lsl #3]!
   3932c:	mov	r0, #0
   39330:	cmp	r2, r5
   39334:	mov	r7, #0
   39338:	mvneq	r7, #0
   3933c:	str	r6, [r3, #4]
   39340:	str	r5, [r3, #8]
   39344:	str	r2, [r3, #12]
   39348:	str	r7, [r3, #16]
   3934c:	add	r1, r1, #1
   39350:	str	r1, [r4, #108]	; 0x6c
   39354:	strb	r0, [r3, #20]
   39358:	sub	r1, r2, r5
   3935c:	ldr	r2, [r4, #120]	; 0x78
   39360:	cmp	r2, r1
   39364:	strlt	r1, [r4, #120]	; 0x78
   39368:	pop	{r4, r5, r6, r7, fp, pc}
   3936c:	ldr	r0, [r4, #116]	; 0x74
   39370:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   39374:	mov	r0, #12
   39378:	pop	{r4, r5, r6, r7, fp, pc}
   3937c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39380:	add	fp, sp, #28
   39384:	sub	sp, sp, #20
   39388:	mov	r9, r3
   3938c:	mov	sl, r2
   39390:	mov	r4, r1
   39394:	mov	r7, r0
   39398:	ldr	r1, [r1, #4]
   3939c:	add	r0, sp, #8
   393a0:	bl	35eb4 <__assert_fail@plt+0x232f8>
   393a4:	cmp	r0, #0
   393a8:	bne	3946c <__assert_fail@plt+0x268b0>
   393ac:	ldr	r0, [r4, #4]
   393b0:	cmp	r0, #1
   393b4:	blt	39434 <__assert_fail@plt+0x26878>
   393b8:	mov	r8, #0
   393bc:	ldr	r0, [r4, #8]
   393c0:	ldr	r5, [r0, r8, lsl #2]
   393c4:	add	r0, r5, r5, lsl #1
   393c8:	ldr	r1, [r7, #24]
   393cc:	add	r6, r1, r0, lsl #2
   393d0:	mov	r0, r7
   393d4:	mov	r1, r6
   393d8:	mov	r2, sl
   393dc:	mov	r3, r9
   393e0:	bl	38dd8 <__assert_fail@plt+0x2621c>
   393e4:	cmn	r0, #1
   393e8:	beq	39410 <__assert_fail@plt+0x26854>
   393ec:	str	r9, [sp]
   393f0:	mov	r0, r7
   393f4:	add	r1, sp, #8
   393f8:	mov	r2, r5
   393fc:	mov	r3, sl
   39400:	bl	398c4 <__assert_fail@plt+0x26d08>
   39404:	cmp	r0, #0
   39408:	beq	39424 <__assert_fail@plt+0x26868>
   3940c:	b	3945c <__assert_fail@plt+0x268a0>
   39410:	add	r0, sp, #8
   39414:	mov	r1, r6
   39418:	bl	36170 <__assert_fail@plt+0x235b4>
   3941c:	cmp	r0, #0
   39420:	bne	3945c <__assert_fail@plt+0x268a0>
   39424:	ldr	r0, [r4, #4]
   39428:	add	r8, r8, #1
   3942c:	cmp	r8, r0
   39430:	blt	393bc <__assert_fail@plt+0x26800>
   39434:	ldr	r0, [r4, #8]
   39438:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3943c:	vldr	d16, [sp, #8]
   39440:	ldr	r0, [sp, #16]
   39444:	str	r0, [r4, #8]
   39448:	vstr	d16, [r4]
   3944c:	mov	r5, #0
   39450:	mov	r0, r5
   39454:	sub	sp, fp, #28
   39458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3945c:	mov	r5, r0
   39460:	ldr	r0, [sp, #16]
   39464:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   39468:	b	39450 <__assert_fail@plt+0x26894>
   3946c:	mov	r5, r0
   39470:	b	39450 <__assert_fail@plt+0x26894>
   39474:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39478:	add	fp, sp, #28
   3947c:	sub	sp, sp, #44	; 0x2c
   39480:	str	r3, [sp, #8]
   39484:	mov	r6, r2
   39488:	mov	r7, r1
   3948c:	ldr	r8, [r0, #84]	; 0x54
   39490:	str	r0, [sp, #20]
   39494:	mov	r1, r2
   39498:	bl	38c20 <__assert_fail@plt+0x26064>
   3949c:	mov	r1, #0
   394a0:	cmn	r0, #1
   394a4:	beq	396fc <__assert_fail@plt+0x26b40>
   394a8:	add	r1, r0, r0, lsl #1
   394ac:	add	sl, sp, #28
   394b0:	str	r8, [sp, #12]
   394b4:	str	r7, [sp, #24]
   394b8:	str	r1, [sp, #4]
   394bc:	b	394c4 <__assert_fail@plt+0x26908>
   394c0:	ldr	r1, [sp, #4]
   394c4:	ldr	r0, [sp, #20]
   394c8:	ldr	r0, [r0, #116]	; 0x74
   394cc:	add	r0, r0, r1, lsl #3
   394d0:	add	r0, r0, #12
   394d4:	mov	r9, r0
   394d8:	ldr	r1, [r0, #-12]
   394dc:	mov	r0, r7
   394e0:	bl	365f0 <__assert_fail@plt+0x23a34>
   394e4:	cmp	r0, #0
   394e8:	beq	396ac <__assert_fail@plt+0x26af0>
   394ec:	ldmda	r9, {r0, r1}
   394f0:	add	r1, r1, r6
   394f4:	sub	r5, r1, r0
   394f8:	cmp	r5, r6
   394fc:	bne	3959c <__assert_fail@plt+0x269e0>
   39500:	mov	r5, r6
   39504:	ldr	r0, [r8, #20]
   39508:	ldr	r1, [r9, #-12]
   3950c:	add	r1, r1, r1, lsl #1
   39510:	add	r0, r0, r1, lsl #2
   39514:	ldr	r0, [r0, #8]
   39518:	ldr	r4, [r0]
   3951c:	mov	r0, r7
   39520:	mov	r1, r4
   39524:	bl	365f0 <__assert_fail@plt+0x23a34>
   39528:	mov	r1, #4
   3952c:	cmp	r0, #0
   39530:	bne	3958c <__assert_fail@plt+0x269d0>
   39534:	mov	r6, r8
   39538:	mov	r0, sl
   3953c:	mov	r1, r4
   39540:	bl	35c5c <__assert_fail@plt+0x230a0>
   39544:	mov	r8, r0
   39548:	str	r0, [fp, #-32]	; 0xffffffe0
   3954c:	mov	r0, r6
   39550:	mov	r1, sl
   39554:	ldr	r2, [sp, #8]
   39558:	ldr	r3, [fp, #8]
   3955c:	bl	3937c <__assert_fail@plt+0x267c0>
   39560:	mov	r6, r0
   39564:	mov	r0, r7
   39568:	mov	r1, sl
   3956c:	bl	36170 <__assert_fail@plt+0x235b4>
   39570:	mov	r4, r0
   39574:	ldr	r0, [sp, #36]	; 0x24
   39578:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3957c:	orr	r0, r6, r8
   39580:	orrs	r0, r0, r4
   39584:	mov	r1, #2
   39588:	bne	396c0 <__assert_fail@plt+0x26b04>
   3958c:	ldr	r8, [sp, #12]
   39590:	mov	r6, r5
   39594:	add	sl, sp, #28
   39598:	b	3969c <__assert_fail@plt+0x26ae0>
   3959c:	ldr	r0, [sp, #20]
   395a0:	ldr	r0, [r0, #100]	; 0x64
   395a4:	ldr	r0, [r0, r5, lsl #2]
   395a8:	ldr	r1, [r9, #-12]
   395ac:	ldr	r2, [r8, #12]
   395b0:	ldr	r7, [r2, r1, lsl #2]
   395b4:	cmp	r0, #0
   395b8:	beq	3962c <__assert_fail@plt+0x26a70>
   395bc:	add	r4, r0, #4
   395c0:	mov	r0, r4
   395c4:	mov	r1, r7
   395c8:	bl	365f0 <__assert_fail@plt+0x23a34>
   395cc:	mov	r1, #4
   395d0:	add	sl, sp, #28
   395d4:	cmp	r0, #0
   395d8:	bne	3969c <__assert_fail@plt+0x26ae0>
   395dc:	mov	r0, sl
   395e0:	mov	r1, r4
   395e4:	bl	36574 <__assert_fail@plt+0x239b8>
   395e8:	mov	r4, r0
   395ec:	str	r0, [fp, #-32]	; 0xffffffe0
   395f0:	mov	r0, sl
   395f4:	mov	r1, r7
   395f8:	bl	3638c <__assert_fail@plt+0x237d0>
   395fc:	cmp	r4, #0
   39600:	bne	3960c <__assert_fail@plt+0x26a50>
   39604:	cmp	r0, #0
   39608:	bne	39648 <__assert_fail@plt+0x26a8c>
   3960c:	ldr	r0, [sp, #36]	; 0x24
   39610:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   39614:	cmp	r4, #0
   39618:	movweq	r4, #12
   3961c:	str	r4, [fp, #-32]	; 0xffffffe0
   39620:	mov	r1, #1
   39624:	str	r4, [sp, #16]
   39628:	b	3969c <__assert_fail@plt+0x26ae0>
   3962c:	add	sl, sp, #28
   39630:	mov	r0, sl
   39634:	mov	r1, r7
   39638:	bl	35c5c <__assert_fail@plt+0x230a0>
   3963c:	str	r0, [fp, #-32]	; 0xffffffe0
   39640:	cmp	r0, #0
   39644:	bne	396e0 <__assert_fail@plt+0x26b24>
   39648:	sub	r0, fp, #32
   3964c:	mov	r1, r8
   39650:	mov	r2, sl
   39654:	bl	399cc <__assert_fail@plt+0x26e10>
   39658:	ldr	r4, [sp, #20]
   3965c:	ldr	r1, [r4, #100]	; 0x64
   39660:	str	r0, [r1, r5, lsl #2]
   39664:	ldr	r0, [sp, #36]	; 0x24
   39668:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3966c:	ldr	r0, [r4, #100]	; 0x64
   39670:	ldr	r0, [r0, r5, lsl #2]
   39674:	clz	r0, r0
   39678:	lsr	r0, r0, #5
   3967c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   39680:	cmp	r2, #0
   39684:	mov	r1, r2
   39688:	movwne	r1, #1
   3968c:	ands	r1, r0, r1
   39690:	ldr	r0, [sp, #16]
   39694:	movne	r0, r2
   39698:	str	r0, [sp, #16]
   3969c:	ldr	r7, [sp, #24]
   396a0:	cmp	r1, #0
   396a4:	cmpne	r1, #4
   396a8:	bne	396e8 <__assert_fail@plt+0x26b2c>
   396ac:	add	r0, r9, #24
   396b0:	ldrb	r1, [r9, #8]
   396b4:	cmp	r1, #0
   396b8:	bne	394d4 <__assert_fail@plt+0x26918>
   396bc:	b	396f8 <__assert_fail@plt+0x26b3c>
   396c0:	cmp	r6, #0
   396c4:	movne	r4, r6
   396c8:	cmp	r8, #0
   396cc:	movne	r4, r8
   396d0:	str	r4, [fp, #-32]	; 0xffffffe0
   396d4:	mov	r1, #1
   396d8:	str	r4, [sp, #16]
   396dc:	b	3958c <__assert_fail@plt+0x269d0>
   396e0:	mov	r1, #1
   396e4:	b	39698 <__assert_fail@plt+0x26adc>
   396e8:	cmp	r1, #2
   396ec:	beq	394c0 <__assert_fail@plt+0x26904>
   396f0:	ldr	r1, [sp, #16]
   396f4:	b	396fc <__assert_fail@plt+0x26b40>
   396f8:	mov	r1, #0
   396fc:	mov	r0, r1
   39700:	sub	sp, fp, #28
   39704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39708:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3970c:	add	fp, sp, #28
   39710:	sub	sp, sp, #36	; 0x24
   39714:	str	r0, [sp, #12]
   39718:	ldr	r5, [r0, #84]	; 0x54
   3971c:	mov	r0, #0
   39720:	str	r0, [sp, #32]
   39724:	str	r0, [sp, #20]
   39728:	str	r0, [sp, #16]
   3972c:	str	r0, [sp, #24]
   39730:	ldr	r0, [r2, #4]
   39734:	cmp	r0, #1
   39738:	blt	39884 <__assert_fail@plt+0x26cc8>
   3973c:	mov	sl, r3
   39740:	mov	r4, r2
   39744:	mov	r6, r1
   39748:	mov	r7, #0
   3974c:	str	r1, [sp, #8]
   39750:	str	r2, [sp, #4]
   39754:	str	r3, [sp]
   39758:	ldr	r0, [r4, #8]
   3975c:	ldr	r8, [r0, r7, lsl #2]
   39760:	ldr	r0, [r5]
   39764:	add	r0, r0, r8, lsl #3
   39768:	ldrb	r0, [r0, #6]
   3976c:	tst	r0, #16
   39770:	bne	39794 <__assert_fail@plt+0x26bd8>
   39774:	ldr	r0, [r5]
   39778:	add	r1, r0, r8, lsl #3
   3977c:	ldr	r0, [sp, #12]
   39780:	mov	r2, r6
   39784:	bl	39ea4 <__assert_fail@plt+0x272e8>
   39788:	cmp	r0, #0
   3978c:	bne	3985c <__assert_fail@plt+0x26ca0>
   39790:	b	39874 <__assert_fail@plt+0x26cb8>
   39794:	mov	r0, r5
   39798:	mov	r1, r8
   3979c:	ldr	r9, [sp, #12]
   397a0:	mov	r2, r9
   397a4:	mov	r3, r6
   397a8:	bl	39bd0 <__assert_fail@plt+0x27014>
   397ac:	cmp	r0, #2
   397b0:	blt	39854 <__assert_fail@plt+0x26c98>
   397b4:	add	r4, r0, r6
   397b8:	ldr	r0, [r9, #100]	; 0x64
   397bc:	ldr	r0, [r0, r4, lsl #2]
   397c0:	ldr	r1, [r5, #12]
   397c4:	ldr	r2, [r1, r8, lsl #2]
   397c8:	mov	r1, #0
   397cc:	str	r1, [sp, #20]
   397d0:	cmp	r0, #0
   397d4:	mov	sl, r9
   397d8:	add	r6, sp, #16
   397dc:	beq	39800 <__assert_fail@plt+0x26c44>
   397e0:	add	r1, r0, #4
   397e4:	mov	r0, r6
   397e8:	mov	r9, r2
   397ec:	bl	36170 <__assert_fail@plt+0x235b4>
   397f0:	mov	r2, r9
   397f4:	str	r0, [sp, #32]
   397f8:	cmp	r0, #0
   397fc:	bne	398ac <__assert_fail@plt+0x26cf0>
   39800:	mov	r0, r6
   39804:	mov	r1, r2
   39808:	bl	3638c <__assert_fail@plt+0x237d0>
   3980c:	cmp	r0, #0
   39810:	beq	39898 <__assert_fail@plt+0x26cdc>
   39814:	mov	r2, r6
   39818:	add	r0, sp, #32
   3981c:	mov	r1, r5
   39820:	bl	399cc <__assert_fail@plt+0x26e10>
   39824:	ldr	r1, [sl, #100]	; 0x64
   39828:	str	r0, [r1, r4, lsl #2]
   3982c:	ldr	r0, [sl, #100]	; 0x64
   39830:	ldr	r0, [r0, r4, lsl #2]
   39834:	cmp	r0, #0
   39838:	ldr	sl, [sp]
   3983c:	ldmib	sp, {r4, r6}
   39840:	bne	3985c <__assert_fail@plt+0x26ca0>
   39844:	ldr	r9, [sp, #32]
   39848:	cmp	r9, #0
   3984c:	beq	3985c <__assert_fail@plt+0x26ca0>
   39850:	b	398b0 <__assert_fail@plt+0x26cf4>
   39854:	cmp	r0, #0
   39858:	beq	39774 <__assert_fail@plt+0x26bb8>
   3985c:	ldr	r0, [r5, #12]
   39860:	ldr	r1, [r0, r8, lsl #2]
   39864:	mov	r0, sl
   39868:	bl	3638c <__assert_fail@plt+0x237d0>
   3986c:	cmp	r0, #0
   39870:	beq	39898 <__assert_fail@plt+0x26cdc>
   39874:	ldr	r0, [r4, #4]
   39878:	add	r7, r7, #1
   3987c:	cmp	r7, r0
   39880:	blt	39758 <__assert_fail@plt+0x26b9c>
   39884:	ldr	r0, [sp, #24]
   39888:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3988c:	mov	r0, #0
   39890:	sub	sp, fp, #28
   39894:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39898:	ldr	r0, [sp, #24]
   3989c:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   398a0:	mov	r0, #12
   398a4:	sub	sp, fp, #28
   398a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   398ac:	mov	r9, r0
   398b0:	ldr	r0, [sp, #24]
   398b4:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   398b8:	mov	r0, r9
   398bc:	sub	sp, fp, #28
   398c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   398c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   398c8:	add	fp, sp, #24
   398cc:	sub	sp, sp, #8
   398d0:	mov	r5, r3
   398d4:	mov	r7, r2
   398d8:	mov	r4, r1
   398dc:	mov	r6, r0
   398e0:	mov	r0, r1
   398e4:	mov	r1, r2
   398e8:	bl	365f0 <__assert_fail@plt+0x23a34>
   398ec:	cmp	r0, #0
   398f0:	beq	39900 <__assert_fail@plt+0x26d44>
   398f4:	mov	r0, #0
   398f8:	sub	sp, fp, #24
   398fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   39900:	ldr	r8, [fp, #8]
   39904:	ldr	r0, [r6]
   39908:	add	r1, r0, r7, lsl #3
   3990c:	ldrb	r1, [r1, #4]
   39910:	cmp	r1, r8
   39914:	ldreq	r0, [r0, r7, lsl #3]
   39918:	cmpeq	r0, r5
   3991c:	beq	399a4 <__assert_fail@plt+0x26de8>
   39920:	mov	r0, r4
   39924:	mov	r1, r7
   39928:	bl	3638c <__assert_fail@plt+0x237d0>
   3992c:	cmp	r0, #0
   39930:	beq	399c0 <__assert_fail@plt+0x26e04>
   39934:	ldr	r0, [r6, #20]
   39938:	add	r7, r7, r7, lsl #1
   3993c:	add	r0, r0, r7, lsl #2
   39940:	ldr	r1, [r0, #4]
   39944:	cmp	r1, #2
   39948:	beq	39958 <__assert_fail@plt+0x26d9c>
   3994c:	cmp	r1, #0
   39950:	bne	3997c <__assert_fail@plt+0x26dc0>
   39954:	b	398f4 <__assert_fail@plt+0x26d38>
   39958:	ldr	r0, [r0, #8]
   3995c:	ldr	r2, [r0, #4]
   39960:	str	r8, [sp]
   39964:	mov	r0, r6
   39968:	mov	r1, r4
   3996c:	mov	r3, r5
   39970:	bl	398c4 <__assert_fail@plt+0x26d08>
   39974:	cmp	r0, #0
   39978:	bne	398f8 <__assert_fail@plt+0x26d3c>
   3997c:	ldr	r0, [r6, #20]
   39980:	add	r0, r0, r7, lsl #2
   39984:	ldr	r0, [r0, #8]
   39988:	ldr	r7, [r0]
   3998c:	mov	r0, r4
   39990:	mov	r1, r7
   39994:	bl	365f0 <__assert_fail@plt+0x23a34>
   39998:	cmp	r0, #0
   3999c:	beq	39904 <__assert_fail@plt+0x26d48>
   399a0:	b	398f4 <__assert_fail@plt+0x26d38>
   399a4:	cmp	r8, #9
   399a8:	bne	398f4 <__assert_fail@plt+0x26d38>
   399ac:	mov	r0, r4
   399b0:	mov	r1, r7
   399b4:	bl	3638c <__assert_fail@plt+0x237d0>
   399b8:	cmp	r0, #0
   399bc:	bne	398f4 <__assert_fail@plt+0x26d38>
   399c0:	mov	r0, #12
   399c4:	sub	sp, fp, #24
   399c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   399cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   399d0:	add	fp, sp, #28
   399d4:	sub	sp, sp, #4
   399d8:	mov	r9, r1
   399dc:	ldr	r1, [r2, #4]
   399e0:	cmp	r1, #0
   399e4:	beq	39a88 <__assert_fail@plt+0x26ecc>
   399e8:	mov	sl, r2
   399ec:	str	r0, [sp]
   399f0:	mov	r6, #0
   399f4:	mov	r0, r2
   399f8:	mov	r1, #0
   399fc:	bl	36750 <__assert_fail@plt+0x23b94>
   39a00:	mov	r7, r0
   39a04:	ldr	r0, [r9, #32]
   39a08:	ldr	r1, [r9, #68]	; 0x44
   39a0c:	and	r1, r1, r7
   39a10:	add	r1, r1, r1, lsl #1
   39a14:	mov	r5, r0
   39a18:	ldr	r2, [r5, r1, lsl #2]!
   39a1c:	cmp	r2, #1
   39a20:	blt	39a60 <__assert_fail@plt+0x26ea4>
   39a24:	add	r0, r0, r1, lsl #2
   39a28:	ldr	r8, [r0, #8]
   39a2c:	ldr	r4, [r8, r6, lsl #2]
   39a30:	ldr	r0, [r4]
   39a34:	cmp	r7, r0
   39a38:	bne	39a50 <__assert_fail@plt+0x26e94>
   39a3c:	add	r0, r4, #4
   39a40:	mov	r1, sl
   39a44:	bl	3677c <__assert_fail@plt+0x23bc0>
   39a48:	cmp	r0, #0
   39a4c:	bne	39a7c <__assert_fail@plt+0x26ec0>
   39a50:	ldr	r0, [r5]
   39a54:	add	r6, r6, #1
   39a58:	cmp	r6, r0
   39a5c:	blt	39a2c <__assert_fail@plt+0x26e70>
   39a60:	mov	r0, r9
   39a64:	mov	r1, sl
   39a68:	mov	r2, r7
   39a6c:	bl	39aa8 <__assert_fail@plt+0x26eec>
   39a70:	mov	r4, r0
   39a74:	cmp	r0, #0
   39a78:	beq	39a94 <__assert_fail@plt+0x26ed8>
   39a7c:	mov	r0, r4
   39a80:	sub	sp, fp, #28
   39a84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39a88:	mov	r4, #0
   39a8c:	str	r4, [r0]
   39a90:	b	39a7c <__assert_fail@plt+0x26ec0>
   39a94:	mov	r0, #12
   39a98:	ldr	r1, [sp]
   39a9c:	str	r0, [r1]
   39aa0:	mov	r4, #0
   39aa4:	b	39a7c <__assert_fail@plt+0x26ec0>
   39aa8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   39aac:	add	fp, sp, #24
   39ab0:	mov	r8, r2
   39ab4:	mov	r7, r1
   39ab8:	mov	r9, r0
   39abc:	mov	r0, #56	; 0x38
   39ac0:	mov	r1, #1
   39ac4:	bl	2c49c <__assert_fail@plt+0x198e0>
   39ac8:	cmp	r0, #0
   39acc:	beq	39bc4 <__assert_fail@plt+0x27008>
   39ad0:	mov	r4, r0
   39ad4:	add	r5, r0, #4
   39ad8:	mov	r0, r5
   39adc:	mov	r1, r7
   39ae0:	bl	36574 <__assert_fail@plt+0x239b8>
   39ae4:	cmp	r0, #0
   39ae8:	bne	39bb0 <__assert_fail@plt+0x26ff4>
   39aec:	str	r5, [r4, #40]	; 0x28
   39af0:	ldr	r0, [r7, #4]
   39af4:	cmp	r0, #1
   39af8:	blt	39b90 <__assert_fail@plt+0x26fd4>
   39afc:	mov	r0, #0
   39b00:	movw	ip, #65280	; 0xff00
   39b04:	movt	ip, #3
   39b08:	add	r2, ip, #255	; 0xff
   39b0c:	mov	lr, #32
   39b10:	ldr	r1, [r7, #8]
   39b14:	ldr	r1, [r1, r0, lsl #2]
   39b18:	ldr	r3, [r9]
   39b1c:	add	r5, r3, r1, lsl #3
   39b20:	ldr	r3, [r5, #4]!
   39b24:	and	r1, r3, r2
   39b28:	cmp	r1, #1
   39b2c:	beq	39b80 <__assert_fail@plt+0x26fc4>
   39b30:	and	r1, lr, r3, lsr #15
   39b34:	ldrb	r6, [r4, #52]	; 0x34
   39b38:	orr	r1, r6, r1
   39b3c:	strb	r1, [r4, #52]	; 0x34
   39b40:	uxtb	r3, r3
   39b44:	cmp	r3, #12
   39b48:	beq	39b78 <__assert_fail@plt+0x26fbc>
   39b4c:	cmp	r3, #4
   39b50:	beq	39b64 <__assert_fail@plt+0x26fa8>
   39b54:	cmp	r3, #2
   39b58:	bne	39b6c <__assert_fail@plt+0x26fb0>
   39b5c:	orr	r1, r1, #16
   39b60:	b	39b7c <__assert_fail@plt+0x26fc0>
   39b64:	orr	r1, r1, #64	; 0x40
   39b68:	b	39b7c <__assert_fail@plt+0x26fc0>
   39b6c:	ldr	r3, [r5]
   39b70:	tst	r3, ip
   39b74:	beq	39b80 <__assert_fail@plt+0x26fc4>
   39b78:	orr	r1, r1, #128	; 0x80
   39b7c:	strb	r1, [r4, #52]	; 0x34
   39b80:	ldr	r1, [r7, #4]
   39b84:	add	r0, r0, #1
   39b88:	cmp	r0, r1
   39b8c:	blt	39b10 <__assert_fail@plt+0x26f54>
   39b90:	mov	r0, r9
   39b94:	mov	r1, r4
   39b98:	mov	r2, r8
   39b9c:	bl	36a30 <__assert_fail@plt+0x23e74>
   39ba0:	cmp	r0, #0
   39ba4:	bne	39bbc <__assert_fail@plt+0x27000>
   39ba8:	mov	r0, r4
   39bac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   39bb0:	mov	r0, r4
   39bb4:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   39bb8:	b	39bc4 <__assert_fail@plt+0x27008>
   39bbc:	mov	r0, r4
   39bc0:	bl	30f8c <__assert_fail@plt+0x1e3d0>
   39bc4:	mov	r4, #0
   39bc8:	mov	r0, r4
   39bcc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   39bd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39bd4:	add	fp, sp, #28
   39bd8:	sub	sp, sp, #4
   39bdc:	mov	sl, r3
   39be0:	mov	r7, r2
   39be4:	mov	r5, r0
   39be8:	ldr	r6, [r0]
   39bec:	add	r0, r6, r1, lsl #3
   39bf0:	ldrb	r8, [r0, #4]
   39bf4:	cmp	r8, #7
   39bf8:	beq	39d98 <__assert_fail@plt+0x271dc>
   39bfc:	mov	r4, r1
   39c00:	mov	r0, r7
   39c04:	mov	r1, sl
   39c08:	bl	34ff8 <__assert_fail@plt+0x2243c>
   39c0c:	mov	r9, r0
   39c10:	mov	r2, #0
   39c14:	cmp	r8, #5
   39c18:	bne	39c5c <__assert_fail@plt+0x270a0>
   39c1c:	cmp	r9, #2
   39c20:	blt	39d84 <__assert_fail@plt+0x271c8>
   39c24:	ldr	r0, [r5, #128]	; 0x80
   39c28:	tst	r0, #64	; 0x40
   39c2c:	bne	39c40 <__assert_fail@plt+0x27084>
   39c30:	ldr	r1, [r7, #4]
   39c34:	ldrb	r1, [r1, sl]
   39c38:	cmp	r1, #10
   39c3c:	beq	39d84 <__assert_fail@plt+0x271c8>
   39c40:	tst	r0, #128	; 0x80
   39c44:	beq	39d80 <__assert_fail@plt+0x271c4>
   39c48:	ldr	r0, [r7, #4]
   39c4c:	ldrb	r0, [r0, sl]
   39c50:	cmp	r0, #0
   39c54:	movne	r2, r9
   39c58:	b	39d84 <__assert_fail@plt+0x271c8>
   39c5c:	cmp	r8, #6
   39c60:	bne	39d84 <__assert_fail@plt+0x271c8>
   39c64:	cmp	r9, #2
   39c68:	blt	39d84 <__assert_fail@plt+0x271c8>
   39c6c:	ldr	r4, [r6, r4, lsl #3]
   39c70:	ldr	r0, [r4, #32]
   39c74:	cmp	r0, #0
   39c78:	bne	39c94 <__assert_fail@plt+0x270d8>
   39c7c:	ldr	r0, [r4, #36]	; 0x24
   39c80:	cmp	r0, #0
   39c84:	bne	39c94 <__assert_fail@plt+0x270d8>
   39c88:	ldr	r0, [r4, #20]
   39c8c:	cmp	r0, #0
   39c90:	beq	39d90 <__assert_fail@plt+0x271d4>
   39c94:	mov	r0, r7
   39c98:	mov	r1, sl
   39c9c:	bl	32d6c <__assert_fail@plt+0x201b0>
   39ca0:	mov	r6, r0
   39ca4:	ldr	r0, [r4, #20]
   39ca8:	cmp	r0, #1
   39cac:	blt	39cd4 <__assert_fail@plt+0x27118>
   39cb0:	ldr	r0, [r4]
   39cb4:	mov	r1, #0
   39cb8:	ldr	r2, [r0, r1, lsl #2]
   39cbc:	cmp	r6, r2
   39cc0:	beq	39d54 <__assert_fail@plt+0x27198>
   39cc4:	add	r1, r1, #1
   39cc8:	ldr	r2, [r4, #20]
   39ccc:	cmp	r1, r2
   39cd0:	blt	39cb8 <__assert_fail@plt+0x270fc>
   39cd4:	ldr	r0, [r4, #36]	; 0x24
   39cd8:	cmp	r0, #1
   39cdc:	blt	39d0c <__assert_fail@plt+0x27150>
   39ce0:	mov	r5, #0
   39ce4:	ldr	r0, [r4, #12]
   39ce8:	ldr	r1, [r0, r5, lsl #2]
   39cec:	mov	r0, r6
   39cf0:	bl	124c0 <iswctype@plt>
   39cf4:	cmp	r0, #0
   39cf8:	bne	39d54 <__assert_fail@plt+0x27198>
   39cfc:	add	r5, r5, #1
   39d00:	ldr	r0, [r4, #36]	; 0x24
   39d04:	cmp	r5, r0
   39d08:	blt	39ce4 <__assert_fail@plt+0x27128>
   39d0c:	ldr	r0, [r4, #32]
   39d10:	cmp	r0, #1
   39d14:	blt	39d4c <__assert_fail@plt+0x27190>
   39d18:	ldr	r0, [r4, #4]
   39d1c:	mov	r1, #0
   39d20:	ldr	r2, [r0, r1, lsl #2]
   39d24:	cmp	r2, r6
   39d28:	bhi	39d3c <__assert_fail@plt+0x27180>
   39d2c:	ldr	r2, [r4, #8]
   39d30:	ldr	r2, [r2, r1, lsl #2]
   39d34:	cmp	r6, r2
   39d38:	bls	39d54 <__assert_fail@plt+0x27198>
   39d3c:	add	r1, r1, #1
   39d40:	ldr	r2, [r4, #32]
   39d44:	cmp	r1, r2
   39d48:	blt	39d20 <__assert_fail@plt+0x27164>
   39d4c:	mov	r0, #0
   39d50:	b	39d58 <__assert_fail@plt+0x2719c>
   39d54:	mov	r0, r9
   39d58:	ldrb	r1, [r4, #16]
   39d5c:	tst	r1, #1
   39d60:	mov	r2, #0
   39d64:	bne	39d70 <__assert_fail@plt+0x271b4>
   39d68:	mov	r2, r0
   39d6c:	b	39d84 <__assert_fail@plt+0x271c8>
   39d70:	cmp	r0, #0
   39d74:	bgt	39d84 <__assert_fail@plt+0x271c8>
   39d78:	cmp	r9, #1
   39d7c:	movle	r9, #1
   39d80:	mov	r2, r9
   39d84:	mov	r0, r2
   39d88:	sub	sp, fp, #28
   39d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39d90:	mov	r6, #0
   39d94:	b	39ca4 <__assert_fail@plt+0x270e8>
   39d98:	ldr	r0, [r7, #4]
   39d9c:	ldrb	r5, [r0, sl]
   39da0:	mov	r2, #0
   39da4:	cmp	r5, #194	; 0xc2
   39da8:	bcc	39d84 <__assert_fail@plt+0x271c8>
   39dac:	ldr	r1, [r7, #48]	; 0x30
   39db0:	add	r2, sl, #2
   39db4:	cmp	r2, r1
   39db8:	ble	39dc4 <__assert_fail@plt+0x27208>
   39dbc:	mov	r2, #0
   39dc0:	b	39d84 <__assert_fail@plt+0x271c8>
   39dc4:	add	r0, r0, sl
   39dc8:	ldrb	r3, [r0, #1]
   39dcc:	cmp	r5, #223	; 0xdf
   39dd0:	bhi	39df0 <__assert_fail@plt+0x27234>
   39dd4:	mov	r2, #2
   39dd8:	cmp	r3, #191	; 0xbf
   39ddc:	movwhi	r2, #0
   39de0:	sxtb	r0, r3
   39de4:	cmn	r0, #1
   39de8:	movwgt	r2, #0
   39dec:	b	39d84 <__assert_fail@plt+0x271c8>
   39df0:	cmp	r5, #239	; 0xef
   39df4:	bhi	39e10 <__assert_fail@plt+0x27254>
   39df8:	mov	r2, #3
   39dfc:	cmp	r5, #224	; 0xe0
   39e00:	bne	39e6c <__assert_fail@plt+0x272b0>
   39e04:	cmp	r3, #160	; 0xa0
   39e08:	bcc	39dbc <__assert_fail@plt+0x27200>
   39e0c:	b	39e6c <__assert_fail@plt+0x272b0>
   39e10:	cmp	r5, #247	; 0xf7
   39e14:	bhi	39e30 <__assert_fail@plt+0x27274>
   39e18:	mov	r2, #4
   39e1c:	cmp	r5, #240	; 0xf0
   39e20:	bne	39e6c <__assert_fail@plt+0x272b0>
   39e24:	cmp	r3, #144	; 0x90
   39e28:	bcc	39dbc <__assert_fail@plt+0x27200>
   39e2c:	b	39e6c <__assert_fail@plt+0x272b0>
   39e30:	cmp	r5, #251	; 0xfb
   39e34:	bhi	39e50 <__assert_fail@plt+0x27294>
   39e38:	mov	r2, #5
   39e3c:	cmp	r5, #248	; 0xf8
   39e40:	bne	39e6c <__assert_fail@plt+0x272b0>
   39e44:	cmp	r3, #136	; 0x88
   39e48:	bcc	39dbc <__assert_fail@plt+0x27200>
   39e4c:	b	39e6c <__assert_fail@plt+0x272b0>
   39e50:	cmp	r5, #253	; 0xfd
   39e54:	bhi	39dbc <__assert_fail@plt+0x27200>
   39e58:	mov	r2, #6
   39e5c:	cmp	r5, #252	; 0xfc
   39e60:	bne	39e6c <__assert_fail@plt+0x272b0>
   39e64:	cmp	r3, #132	; 0x84
   39e68:	bcc	39dbc <__assert_fail@plt+0x27200>
   39e6c:	add	r3, r2, sl
   39e70:	cmp	r3, r1
   39e74:	bgt	39dbc <__assert_fail@plt+0x27200>
   39e78:	mov	r1, #1
   39e7c:	ldrb	r3, [r0, r1]
   39e80:	sxtb	r7, r3
   39e84:	cmn	r7, #1
   39e88:	bgt	39dbc <__assert_fail@plt+0x27200>
   39e8c:	cmp	r3, #191	; 0xbf
   39e90:	bhi	39dbc <__assert_fail@plt+0x27200>
   39e94:	add	r1, r1, #1
   39e98:	cmp	r1, r2
   39e9c:	bcc	39e7c <__assert_fail@plt+0x272c0>
   39ea0:	b	39d84 <__assert_fail@plt+0x271c8>
   39ea4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   39ea8:	add	fp, sp, #24
   39eac:	mov	r6, r0
   39eb0:	ldr	r7, [r1, #4]
   39eb4:	mvn	r0, #0
   39eb8:	uxtab	r0, r0, r7
   39ebc:	mov	r8, #0
   39ec0:	cmp	r0, #6
   39ec4:	bhi	39fd0 <__assert_fail@plt+0x27414>
   39ec8:	mov	r5, r2
   39ecc:	ldr	r2, [r6, #4]
   39ed0:	ldrb	r2, [r2, r5]
   39ed4:	sxtb	r3, r2
   39ed8:	add	r4, pc, #0
   39edc:	ldr	pc, [r4, r0, lsl #2]
   39ee0:	strdeq	r9, [r3], -ip
   39ee4:	ldrdeq	r9, [r3], -r0
   39ee8:	andeq	r9, r3, r0, lsl pc
   39eec:	ldrdeq	r9, [r3], -r0
   39ef0:	andeq	r9, r3, r0, lsr pc
   39ef4:	ldrdeq	r9, [r3], -r0
   39ef8:	andeq	r9, r3, r8, lsr #30
   39efc:	ldrb	r0, [r1]
   39f00:	uxtb	r1, r3
   39f04:	cmp	r0, r1
   39f08:	beq	39f64 <__assert_fail@plt+0x273a8>
   39f0c:	b	39fd0 <__assert_fail@plt+0x27414>
   39f10:	ldr	r0, [r1]
   39f14:	mov	r1, r2
   39f18:	bl	37ec4 <__assert_fail@plt+0x25308>
   39f1c:	cmp	r0, #0
   39f20:	bne	39f64 <__assert_fail@plt+0x273a8>
   39f24:	b	39fd0 <__assert_fail@plt+0x27414>
   39f28:	cmp	r3, #0
   39f2c:	blt	39fd0 <__assert_fail@plt+0x27414>
   39f30:	cmp	r2, #0
   39f34:	beq	39f54 <__assert_fail@plt+0x27398>
   39f38:	cmp	r2, #10
   39f3c:	bne	39f64 <__assert_fail@plt+0x273a8>
   39f40:	ldr	r0, [r6, #84]	; 0x54
   39f44:	ldrb	r0, [r0, #128]	; 0x80
   39f48:	tst	r0, #64	; 0x40
   39f4c:	bne	39f64 <__assert_fail@plt+0x273a8>
   39f50:	b	39fd0 <__assert_fail@plt+0x27414>
   39f54:	ldr	r0, [r6, #84]	; 0x54
   39f58:	ldrb	r0, [r0, #128]	; 0x80
   39f5c:	tst	r0, #128	; 0x80
   39f60:	bne	39fd0 <__assert_fail@plt+0x27414>
   39f64:	movw	r0, #65280	; 0xff00
   39f68:	movt	r0, #3
   39f6c:	tst	r7, r0
   39f70:	beq	39fcc <__assert_fail@plt+0x27410>
   39f74:	ldr	r2, [r6, #88]	; 0x58
   39f78:	mov	r0, r6
   39f7c:	mov	r1, r5
   39f80:	bl	37d4c <__assert_fail@plt+0x25190>
   39f84:	and	r1, r0, #1
   39f88:	tst	r7, #1024	; 0x400
   39f8c:	beq	39f98 <__assert_fail@plt+0x273dc>
   39f90:	cmp	r1, #0
   39f94:	beq	39fd0 <__assert_fail@plt+0x27414>
   39f98:	tst	r7, #2048	; 0x800
   39f9c:	cmpne	r1, #0
   39fa0:	bne	39fd0 <__assert_fail@plt+0x27414>
   39fa4:	tst	r7, #8192	; 0x2000
   39fa8:	beq	39fb4 <__assert_fail@plt+0x273f8>
   39fac:	ands	r1, r0, #2
   39fb0:	beq	39fd0 <__assert_fail@plt+0x27414>
   39fb4:	and	r1, r7, #32768	; 0x8000
   39fb8:	mov	r2, #1
   39fbc:	eor	r1, r2, r1, lsr #15
   39fc0:	and	r0, r0, #8
   39fc4:	orr	r0, r1, r0, lsr #3
   39fc8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   39fcc:	mov	r8, #1
   39fd0:	mov	r0, r8
   39fd4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   39fd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39fdc:	add	fp, sp, #28
   39fe0:	sub	sp, sp, #20
   39fe4:	mov	r5, r0
   39fe8:	ldr	r0, [r1, #8]
   39fec:	cmp	r0, #1
   39ff0:	blt	3a190 <__assert_fail@plt+0x275d4>
   39ff4:	mov	r4, r1
   39ff8:	ldr	sl, [r5, #84]	; 0x54
   39ffc:	mov	r8, #0
   3a000:	movw	r9, #65280	; 0xff00
   3a004:	movt	r9, #3
   3a008:	ldr	r0, [r4, #12]
   3a00c:	ldr	r7, [r0, r8, lsl #2]
   3a010:	ldr	r0, [sl]
   3a014:	add	r0, r0, r7, lsl #3
   3a018:	ldr	r6, [r0, #4]
   3a01c:	tst	r6, #1048576	; 0x100000
   3a020:	beq	3a180 <__assert_fail@plt+0x275c4>
   3a024:	tst	r6, r9
   3a028:	beq	3a07c <__assert_fail@plt+0x274c0>
   3a02c:	ldr	r1, [r5, #40]	; 0x28
   3a030:	ldr	r2, [r5, #88]	; 0x58
   3a034:	mov	r0, r5
   3a038:	bl	37d4c <__assert_fail@plt+0x25190>
   3a03c:	and	r1, r0, #1
   3a040:	tst	r6, #1024	; 0x400
   3a044:	beq	3a050 <__assert_fail@plt+0x27494>
   3a048:	cmp	r1, #0
   3a04c:	beq	3a180 <__assert_fail@plt+0x275c4>
   3a050:	tst	r6, #2048	; 0x800
   3a054:	cmpne	r1, #0
   3a058:	bne	3a180 <__assert_fail@plt+0x275c4>
   3a05c:	tst	r6, #8192	; 0x2000
   3a060:	beq	3a06c <__assert_fail@plt+0x274b0>
   3a064:	ands	r1, r0, #2
   3a068:	beq	3a180 <__assert_fail@plt+0x275c4>
   3a06c:	tst	r6, #32768	; 0x8000
   3a070:	beq	3a07c <__assert_fail@plt+0x274c0>
   3a074:	ands	r0, r0, #8
   3a078:	beq	3a180 <__assert_fail@plt+0x275c4>
   3a07c:	ldr	r3, [r5, #40]	; 0x28
   3a080:	mov	r0, sl
   3a084:	mov	r1, r7
   3a088:	mov	r2, r5
   3a08c:	bl	39bd0 <__assert_fail@plt+0x27014>
   3a090:	cmp	r0, #0
   3a094:	beq	3a180 <__assert_fail@plt+0x275c4>
   3a098:	ldr	r1, [r5, #40]	; 0x28
   3a09c:	ldr	r2, [r5, #120]	; 0x78
   3a0a0:	cmp	r2, r0
   3a0a4:	movlt	r2, r0
   3a0a8:	str	r2, [r5, #120]	; 0x78
   3a0ac:	add	r6, r1, r0
   3a0b0:	mov	r0, r5
   3a0b4:	mov	r1, r6
   3a0b8:	bl	38cac <__assert_fail@plt+0x260f0>
   3a0bc:	str	r0, [sp, #16]
   3a0c0:	cmp	r0, #0
   3a0c4:	bne	3a194 <__assert_fail@plt+0x275d8>
   3a0c8:	ldr	r0, [r5, #100]	; 0x64
   3a0cc:	ldr	r9, [r0, r6, lsl #2]
   3a0d0:	ldr	r0, [sl, #12]
   3a0d4:	ldr	r1, [sl, #24]
   3a0d8:	ldr	r0, [r0, r7, lsl #2]
   3a0dc:	add	r0, r0, r0, lsl #1
   3a0e0:	add	r2, r1, r0, lsl #2
   3a0e4:	cmp	r9, #0
   3a0e8:	beq	3a10c <__assert_fail@plt+0x27550>
   3a0ec:	ldr	r1, [r9, #40]	; 0x28
   3a0f0:	mov	r7, sp
   3a0f4:	mov	r0, r7
   3a0f8:	bl	389f0 <__assert_fail@plt+0x25e34>
   3a0fc:	str	r0, [sp, #16]
   3a100:	cmp	r0, #0
   3a104:	beq	3a120 <__assert_fail@plt+0x27564>
   3a108:	b	3a194 <__assert_fail@plt+0x275d8>
   3a10c:	vldr	d16, [r2]
   3a110:	ldr	r0, [r2, #8]
   3a114:	str	r0, [sp, #8]
   3a118:	vstr	d16, [sp]
   3a11c:	mov	r7, sp
   3a120:	ldr	r2, [r5, #88]	; 0x58
   3a124:	sub	r1, r6, #1
   3a128:	mov	r0, r5
   3a12c:	bl	37d4c <__assert_fail@plt+0x25190>
   3a130:	mov	r3, r0
   3a134:	add	r0, sp, #16
   3a138:	mov	r1, sl
   3a13c:	mov	r2, r7
   3a140:	bl	3665c <__assert_fail@plt+0x23aa0>
   3a144:	ldr	r1, [r5, #100]	; 0x64
   3a148:	str	r0, [r1, r6, lsl #2]
   3a14c:	cmp	r9, #0
   3a150:	beq	3a15c <__assert_fail@plt+0x275a0>
   3a154:	ldr	r0, [sp, #8]
   3a158:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3a15c:	ldr	r0, [r5, #100]	; 0x64
   3a160:	ldr	r0, [r0, r6, lsl #2]
   3a164:	cmp	r0, #0
   3a168:	movw	r9, #65280	; 0xff00
   3a16c:	movt	r9, #3
   3a170:	bne	3a180 <__assert_fail@plt+0x275c4>
   3a174:	ldr	r0, [sp, #16]
   3a178:	cmp	r0, #0
   3a17c:	bne	3a194 <__assert_fail@plt+0x275d8>
   3a180:	add	r8, r8, #1
   3a184:	ldr	r0, [r4, #8]
   3a188:	cmp	r8, r0
   3a18c:	blt	3a008 <__assert_fail@plt+0x2744c>
   3a190:	mov	r0, #0
   3a194:	sub	sp, fp, #28
   3a198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a19c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a1a0:	add	fp, sp, #28
   3a1a4:	sub	sp, sp, #68	; 0x44
   3a1a8:	sub	sp, sp, #14336	; 0x3800
   3a1ac:	mov	r4, r1
   3a1b0:	mov	r7, r0
   3a1b4:	mov	r6, #0
   3a1b8:	str	r6, [r1, #44]	; 0x2c
   3a1bc:	str	r6, [r1, #48]	; 0x30
   3a1c0:	sub	lr, fp, #4096	; 0x1000
   3a1c4:	sub	r2, lr, #2128	; 0x850
   3a1c8:	add	r3, sp, #16
   3a1cc:	bl	3a64c <__assert_fail@plt+0x27a90>
   3a1d0:	cmp	r0, #0
   3a1d4:	ble	3a564 <__assert_fail@plt+0x279a8>
   3a1d8:	mov	r5, r0
   3a1dc:	str	r4, [sp, #4]
   3a1e0:	add	r1, r0, #1
   3a1e4:	sub	r0, fp, #3120	; 0xc30
   3a1e8:	bl	35eb4 <__assert_fail@plt+0x232f8>
   3a1ec:	str	r0, [fp, #-36]	; 0xffffffdc
   3a1f0:	cmp	r0, #0
   3a1f4:	bne	3a530 <__assert_fail@plt+0x27974>
   3a1f8:	sub	r0, fp, #3152	; 0xc50
   3a1fc:	bl	3ab7c <__assert_fail@plt+0x27fc0>
   3a200:	sub	r9, fp, #3120	; 0xc30
   3a204:	sub	lr, fp, #1024	; 0x400
   3a208:	sub	r6, lr, #36	; 0x24
   3a20c:	mov	sl, #0
   3a210:	mov	r0, #0
   3a214:	str	r0, [sp, #8]
   3a218:	str	r5, [sp, #12]
   3a21c:	mov	r0, #0
   3a220:	str	r0, [fp, #-3116]	; 0xfffff3d4
   3a224:	add	r0, sl, sl, lsl #1
   3a228:	sub	lr, fp, #4096	; 0x1000
   3a22c:	sub	r1, lr, #2128	; 0x850
   3a230:	add	r0, r1, r0, lsl #2
   3a234:	mov	r4, r0
   3a238:	ldr	r1, [r4, #4]!
   3a23c:	cmp	r1, #1
   3a240:	blt	3a2a4 <__assert_fail@plt+0x276e8>
   3a244:	ldr	r5, [r0, #8]
   3a248:	mov	r6, #0
   3a24c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   3a250:	ldr	r0, [r5, r6, lsl #2]
   3a254:	ldr	r2, [r7, #12]
   3a258:	ldr	r0, [r2, r0, lsl #2]
   3a25c:	cmn	r0, #1
   3a260:	beq	3a284 <__assert_fail@plt+0x276c8>
   3a264:	ldr	r1, [r7, #24]
   3a268:	add	r0, r0, r0, lsl #1
   3a26c:	add	r1, r1, r0, lsl #2
   3a270:	mov	r0, r9
   3a274:	bl	36170 <__assert_fail@plt+0x235b4>
   3a278:	mov	r1, #0
   3a27c:	cmp	r0, #0
   3a280:	bne	3a528 <__assert_fail@plt+0x2796c>
   3a284:	ldr	r0, [r4]
   3a288:	add	r6, r6, #1
   3a28c:	cmp	r6, r0
   3a290:	blt	3a250 <__assert_fail@plt+0x27694>
   3a294:	str	r1, [fp, #-36]	; 0xffffffdc
   3a298:	ldr	r5, [sp, #12]
   3a29c:	sub	lr, fp, #1024	; 0x400
   3a2a0:	sub	r6, lr, #36	; 0x24
   3a2a4:	sub	r0, fp, #36	; 0x24
   3a2a8:	mov	r1, r7
   3a2ac:	mov	r2, r9
   3a2b0:	mov	r3, #0
   3a2b4:	bl	3665c <__assert_fail@plt+0x23aa0>
   3a2b8:	mov	r8, r0
   3a2bc:	str	r0, [r6, sl, lsl #2]
   3a2c0:	cmp	r0, #0
   3a2c4:	bne	3a2d4 <__assert_fail@plt+0x27718>
   3a2c8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   3a2cc:	cmp	r0, #0
   3a2d0:	bne	3a530 <__assert_fail@plt+0x27974>
   3a2d4:	ldrsb	r0, [r8, #52]	; 0x34
   3a2d8:	cmn	r0, #1
   3a2dc:	ble	3a300 <__assert_fail@plt+0x27744>
   3a2e0:	sub	lr, fp, #2048	; 0x800
   3a2e4:	sub	r0, lr, #36	; 0x24
   3a2e8:	str	r8, [r0, sl, lsl #2]
   3a2ec:	ldr	r0, [r6, sl, lsl #2]
   3a2f0:	sub	lr, fp, #3072	; 0xc00
   3a2f4:	sub	r1, lr, #36	; 0x24
   3a2f8:	str	r0, [r1, sl, lsl #2]
   3a2fc:	b	3a38c <__assert_fail@plt+0x277d0>
   3a300:	sub	r0, fp, #36	; 0x24
   3a304:	mov	r1, r7
   3a308:	mov	r2, r9
   3a30c:	mov	r3, #1
   3a310:	bl	3665c <__assert_fail@plt+0x23aa0>
   3a314:	sub	lr, fp, #2048	; 0x800
   3a318:	sub	r1, lr, #36	; 0x24
   3a31c:	str	r0, [r1, sl, lsl #2]
   3a320:	cmp	r0, #0
   3a324:	bne	3a334 <__assert_fail@plt+0x27778>
   3a328:	ldr	r1, [fp, #-36]	; 0xffffffdc
   3a32c:	cmp	r1, #0
   3a330:	bne	3a530 <__assert_fail@plt+0x27974>
   3a334:	cmp	r8, r0
   3a338:	beq	3a358 <__assert_fail@plt+0x2779c>
   3a33c:	ldr	r0, [r7, #92]	; 0x5c
   3a340:	cmp	r0, #1
   3a344:	mov	r0, #0
   3a348:	movwgt	r0, #1
   3a34c:	ldr	r1, [sp, #8]
   3a350:	orr	r1, r1, r0
   3a354:	str	r1, [sp, #8]
   3a358:	sub	r0, fp, #36	; 0x24
   3a35c:	mov	r1, r7
   3a360:	mov	r2, r9
   3a364:	mov	r3, #2
   3a368:	bl	3665c <__assert_fail@plt+0x23aa0>
   3a36c:	sub	lr, fp, #3072	; 0xc00
   3a370:	sub	r1, lr, #36	; 0x24
   3a374:	str	r0, [r1, sl, lsl #2]
   3a378:	cmp	r0, #0
   3a37c:	bne	3a38c <__assert_fail@plt+0x277d0>
   3a380:	ldr	r0, [fp, #-36]	; 0xffffffdc
   3a384:	cmp	r0, #0
   3a388:	bne	3a530 <__assert_fail@plt+0x27974>
   3a38c:	add	r0, sp, #16
   3a390:	add	r1, r0, sl, lsl #5
   3a394:	sub	r0, fp, #3152	; 0xc50
   3a398:	bl	3ab8c <__assert_fail@plt+0x27fd0>
   3a39c:	add	sl, sl, #1
   3a3a0:	cmp	sl, r5
   3a3a4:	blt	3a21c <__assert_fail@plt+0x27660>
   3a3a8:	ldr	r0, [sp, #8]
   3a3ac:	tst	r0, #1
   3a3b0:	bne	3a588 <__assert_fail@plt+0x279cc>
   3a3b4:	mov	r0, #4
   3a3b8:	mov	r1, #256	; 0x100
   3a3bc:	bl	2c49c <__assert_fail@plt+0x198e0>
   3a3c0:	mov	r8, r0
   3a3c4:	ldr	r0, [sp, #4]
   3a3c8:	str	r8, [r0, #44]	; 0x2c
   3a3cc:	cmp	r8, #0
   3a3d0:	beq	3a530 <__assert_fail@plt+0x27974>
   3a3d4:	mov	r0, #0
   3a3d8:	mov	r1, #0
   3a3dc:	add	r5, sp, #16
   3a3e0:	mov	r9, r5
   3a3e4:	sub	r2, fp, #3152	; 0xc50
   3a3e8:	ldr	r2, [r2, r1, lsl #2]
   3a3ec:	cmp	r2, #0
   3a3f0:	beq	3a468 <__assert_fail@plt+0x278ac>
   3a3f4:	add	r3, r7, r1, lsl #2
   3a3f8:	add	ip, r3, #96	; 0x60
   3a3fc:	lsl	r4, r1, #5
   3a400:	mov	r6, #1
   3a404:	b	3a448 <__assert_fail@plt+0x2788c>
   3a408:	mov	lr, #0
   3a40c:	ldr	r3, [r9, lr, lsl #3]
   3a410:	add	lr, lr, #4
   3a414:	tst	r3, r6
   3a418:	beq	3a40c <__assert_fail@plt+0x27850>
   3a41c:	ldr	r3, [ip]
   3a420:	tst	r3, r6
   3a424:	sub	r3, fp, #2048	; 0x800
   3a428:	sub	r3, r3, #36	; 0x24
   3a42c:	sub	r5, fp, #1024	; 0x400
   3a430:	sub	r5, r5, #36	; 0x24
   3a434:	moveq	r3, r5
   3a438:	add	r3, r3, lr
   3a43c:	ldr	r3, [r3, #-4]
   3a440:	str	r3, [r8, r4, lsl #2]
   3a444:	b	3a450 <__assert_fail@plt+0x27894>
   3a448:	tst	r2, #1
   3a44c:	bne	3a408 <__assert_fail@plt+0x2784c>
   3a450:	add	r4, r4, #1
   3a454:	lsr	r3, r2, #1
   3a458:	lsl	r6, r6, #1
   3a45c:	cmp	r0, r2, lsr #1
   3a460:	mov	r2, r3
   3a464:	bne	3a448 <__assert_fail@plt+0x2788c>
   3a468:	add	r9, r9, #4
   3a46c:	add	r1, r1, #1
   3a470:	cmp	r1, #8
   3a474:	bne	3a3e4 <__assert_fail@plt+0x27828>
   3a478:	sub	r0, fp, #3152	; 0xc50
   3a47c:	mov	r1, #10
   3a480:	bl	37ec4 <__assert_fail@plt+0x25308>
   3a484:	cmp	r0, #0
   3a488:	beq	3a4e8 <__assert_fail@plt+0x2792c>
   3a48c:	ldr	r0, [sp, #12]
   3a490:	cmp	r0, #1
   3a494:	blt	3a4e8 <__assert_fail@plt+0x2792c>
   3a498:	mov	r4, #0
   3a49c:	add	r5, sp, #16
   3a4a0:	mov	r0, r5
   3a4a4:	mov	r1, #10
   3a4a8:	bl	37ec4 <__assert_fail@plt+0x25308>
   3a4ac:	cmp	r0, #0
   3a4b0:	bne	3a4cc <__assert_fail@plt+0x27910>
   3a4b4:	add	r5, r5, #32
   3a4b8:	add	r4, r4, #1
   3a4bc:	ldr	r0, [sp, #12]
   3a4c0:	cmp	r4, r0
   3a4c4:	blt	3a4a0 <__assert_fail@plt+0x278e4>
   3a4c8:	b	3a4e8 <__assert_fail@plt+0x2792c>
   3a4cc:	sub	lr, fp, #3072	; 0xc00
   3a4d0:	sub	r0, lr, #36	; 0x24
   3a4d4:	ldr	r0, [r0, r4, lsl #2]
   3a4d8:	str	r0, [r8, #40]	; 0x28
   3a4dc:	ldr	r1, [sp, #8]
   3a4e0:	tst	r1, #1
   3a4e4:	strne	r0, [r8, #1064]	; 0x428
   3a4e8:	ldr	r0, [fp, #-3112]	; 0xfffff3d8
   3a4ec:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3a4f0:	mov	r6, #1
   3a4f4:	ldr	r5, [sp, #12]
   3a4f8:	cmp	r5, #1
   3a4fc:	blt	3a51c <__assert_fail@plt+0x27960>
   3a500:	sub	lr, fp, #4096	; 0x1000
   3a504:	sub	r0, lr, #2128	; 0x850
   3a508:	add	r4, r0, #8
   3a50c:	ldr	r0, [r4], #12
   3a510:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3a514:	subs	r5, r5, #1
   3a518:	bne	3a50c <__assert_fail@plt+0x27950>
   3a51c:	mov	r0, r6
   3a520:	sub	sp, fp, #28
   3a524:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a528:	str	r0, [fp, #-36]	; 0xffffffdc
   3a52c:	ldr	r5, [sp, #12]
   3a530:	ldr	r0, [fp, #-3112]	; 0xfffff3d8
   3a534:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3a538:	mov	r6, #0
   3a53c:	cmp	r5, #1
   3a540:	blt	3a51c <__assert_fail@plt+0x27960>
   3a544:	sub	lr, fp, #4096	; 0x1000
   3a548:	sub	r0, lr, #2128	; 0x850
   3a54c:	add	r4, r0, #8
   3a550:	ldr	r0, [r4], #12
   3a554:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3a558:	subs	r5, r5, #1
   3a55c:	bne	3a550 <__assert_fail@plt+0x27994>
   3a560:	b	3a51c <__assert_fail@plt+0x27960>
   3a564:	bne	3a51c <__assert_fail@plt+0x27960>
   3a568:	mov	r0, #4
   3a56c:	mov	r1, #256	; 0x100
   3a570:	bl	2c49c <__assert_fail@plt+0x198e0>
   3a574:	mov	r6, r0
   3a578:	str	r0, [r4, #44]	; 0x2c
   3a57c:	cmp	r0, #0
   3a580:	movwne	r6, #1
   3a584:	b	3a51c <__assert_fail@plt+0x27960>
   3a588:	mov	r0, #4
   3a58c:	mov	r1, #512	; 0x200
   3a590:	bl	2c49c <__assert_fail@plt+0x198e0>
   3a594:	mov	r8, r0
   3a598:	ldr	r0, [sp, #4]
   3a59c:	str	r8, [r0, #48]	; 0x30
   3a5a0:	cmp	r8, #0
   3a5a4:	beq	3a530 <__assert_fail@plt+0x27974>
   3a5a8:	sub	ip, r6, #4
   3a5ac:	sub	lr, fp, #2048	; 0x800
   3a5b0:	sub	r0, lr, #36	; 0x24
   3a5b4:	sub	lr, r0, #4
   3a5b8:	mov	r2, #0
   3a5bc:	add	r3, sp, #16
   3a5c0:	mov	r7, #0
   3a5c4:	sub	r0, fp, #3152	; 0xc50
   3a5c8:	ldr	r5, [r0, r7, lsl #2]
   3a5cc:	cmp	r5, #0
   3a5d0:	beq	3a638 <__assert_fail@plt+0x27a7c>
   3a5d4:	lsl	r0, r7, #5
   3a5d8:	mov	r1, #1
   3a5dc:	b	3a618 <__assert_fail@plt+0x27a5c>
   3a5e0:	mov	r4, r3
   3a5e4:	mov	sl, ip
   3a5e8:	mov	r9, lr
   3a5ec:	add	sl, sl, #4
   3a5f0:	add	r9, r9, #4
   3a5f4:	ldr	r6, [r4], #32
   3a5f8:	tst	r6, r1
   3a5fc:	beq	3a5ec <__assert_fail@plt+0x27a30>
   3a600:	ldr	r4, [sl]
   3a604:	mov	r6, r8
   3a608:	str	r4, [r6, r0, lsl #2]!
   3a60c:	ldr	r4, [r9]
   3a610:	str	r4, [r6, #1024]	; 0x400
   3a614:	b	3a620 <__assert_fail@plt+0x27a64>
   3a618:	tst	r5, #1
   3a61c:	bne	3a5e0 <__assert_fail@plt+0x27a24>
   3a620:	add	r0, r0, #1
   3a624:	lsr	r4, r5, #1
   3a628:	lsl	r1, r1, #1
   3a62c:	cmp	r2, r5, lsr #1
   3a630:	mov	r5, r4
   3a634:	bne	3a618 <__assert_fail@plt+0x27a5c>
   3a638:	add	r3, r3, #4
   3a63c:	add	r7, r7, #1
   3a640:	cmp	r7, #8
   3a644:	bne	3a5c4 <__assert_fail@plt+0x27a08>
   3a648:	b	3a478 <__assert_fail@plt+0x278bc>
   3a64c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a650:	add	fp, sp, #28
   3a654:	sub	sp, sp, #148	; 0x94
   3a658:	str	r3, [sp, #40]	; 0x28
   3a65c:	str	r2, [sp, #36]	; 0x24
   3a660:	mov	r8, r1
   3a664:	mov	sl, r0
   3a668:	sub	r7, fp, #64	; 0x40
   3a66c:	mov	r0, r7
   3a670:	bl	3ab7c <__assert_fail@plt+0x27fc0>
   3a674:	ldr	r0, [r8, #8]
   3a678:	cmp	r0, #1
   3a67c:	blt	3ab38 <__assert_fail@plt+0x27f7c>
   3a680:	add	r4, sl, #96	; 0x60
   3a684:	mov	r6, #0
   3a688:	add	r5, sp, #80	; 0x50
   3a68c:	mov	r0, #0
   3a690:	str	r0, [sp, #44]	; 0x2c
   3a694:	str	r8, [sp, #16]
   3a698:	stm	sp, {r4, sl}
   3a69c:	ldr	r0, [r8, #12]
   3a6a0:	ldr	r0, [r0, r6, lsl #2]
   3a6a4:	ldr	r1, [sl]
   3a6a8:	add	r3, r1, r0, lsl #3
   3a6ac:	ldr	r9, [r3, #4]!
   3a6b0:	uxtb	r2, r9
   3a6b4:	cmp	r2, #1
   3a6b8:	str	r2, [sp, #32]
   3a6bc:	bne	3a798 <__assert_fail@plt+0x27bdc>
   3a6c0:	str	r3, [sp, #12]
   3a6c4:	str	r0, [sp, #28]
   3a6c8:	str	r1, [sp, #24]
   3a6cc:	ldrb	r1, [r1, r0, lsl #3]
   3a6d0:	mov	r0, r7
   3a6d4:	bl	3438c <__assert_fail@plt+0x217d0>
   3a6d8:	movw	r0, #65280	; 0xff00
   3a6dc:	movt	r0, #3
   3a6e0:	ands	r0, r9, r0
   3a6e4:	beq	3a934 <__assert_fail@plt+0x27d78>
   3a6e8:	tst	r9, #8192	; 0x2000
   3a6ec:	beq	3a720 <__assert_fail@plt+0x27b64>
   3a6f0:	mov	r0, r7
   3a6f4:	mov	r1, #10
   3a6f8:	bl	37ec4 <__assert_fail@plt+0x25308>
   3a6fc:	str	r0, [sp, #8]
   3a700:	mov	r0, r7
   3a704:	bl	3ab7c <__assert_fail@plt+0x27fc0>
   3a708:	ldr	r0, [sp, #8]
   3a70c:	cmp	r0, #0
   3a710:	beq	3ab10 <__assert_fail@plt+0x27f54>
   3a714:	mov	r0, r7
   3a718:	mov	r1, #10
   3a71c:	bl	3438c <__assert_fail@plt+0x217d0>
   3a720:	tst	r9, #32768	; 0x8000
   3a724:	bne	3a8f4 <__assert_fail@plt+0x27d38>
   3a728:	tst	r9, #1024	; 0x400
   3a72c:	beq	3a888 <__assert_fail@plt+0x27ccc>
   3a730:	ldr	r0, [sp, #32]
   3a734:	cmp	r0, #1
   3a738:	bne	3a74c <__assert_fail@plt+0x27b90>
   3a73c:	ldr	r0, [sp, #12]
   3a740:	ldrb	r0, [r0, #2]
   3a744:	tst	r0, #64	; 0x40
   3a748:	beq	3a8f4 <__assert_fail@plt+0x27d38>
   3a74c:	mov	ip, r6
   3a750:	ldr	r0, [sl, #92]	; 0x5c
   3a754:	cmp	r0, #1
   3a758:	ble	3a854 <__assert_fail@plt+0x27c98>
   3a75c:	ldr	r1, [sl, #60]	; 0x3c
   3a760:	mov	r0, #0
   3a764:	mov	r2, #0
   3a768:	ldr	r3, [r4, r2, lsl #2]
   3a76c:	ldr	r6, [r1, r2, lsl #2]
   3a770:	mvn	r6, r6
   3a774:	orr	r3, r3, r6
   3a778:	ldr	r6, [r7, r2, lsl #2]
   3a77c:	and	r3, r6, r3
   3a780:	str	r3, [r7, r2, lsl #2]
   3a784:	orr	r0, r3, r0
   3a788:	add	r2, r2, #1
   3a78c:	cmp	r2, #8
   3a790:	bne	3a768 <__assert_fail@plt+0x27bac>
   3a794:	b	3a87c <__assert_fail@plt+0x27cc0>
   3a798:	cmp	r2, #7
   3a79c:	beq	3a7cc <__assert_fail@plt+0x27c10>
   3a7a0:	cmp	r2, #5
   3a7a4:	beq	3a7f0 <__assert_fail@plt+0x27c34>
   3a7a8:	cmp	r2, #3
   3a7ac:	bne	3ab10 <__assert_fail@plt+0x27f54>
   3a7b0:	str	r3, [sp, #12]
   3a7b4:	str	r0, [sp, #28]
   3a7b8:	str	r1, [sp, #24]
   3a7bc:	ldr	r1, [r1, r0, lsl #3]
   3a7c0:	mov	r0, r7
   3a7c4:	bl	3ab8c <__assert_fail@plt+0x27fd0>
   3a7c8:	b	3a6d8 <__assert_fail@plt+0x27b1c>
   3a7cc:	str	r3, [sp, #12]
   3a7d0:	str	r1, [sp, #24]
   3a7d4:	str	r0, [sp, #28]
   3a7d8:	mvn	r0, #0
   3a7dc:	str	r0, [fp, #-52]	; 0xffffffcc
   3a7e0:	str	r0, [fp, #-56]	; 0xffffffc8
   3a7e4:	str	r0, [fp, #-60]	; 0xffffffc4
   3a7e8:	str	r0, [fp, #-64]	; 0xffffffc0
   3a7ec:	b	3a820 <__assert_fail@plt+0x27c64>
   3a7f0:	str	r3, [sp, #12]
   3a7f4:	str	r1, [sp, #24]
   3a7f8:	str	r0, [sp, #28]
   3a7fc:	ldr	r0, [sl, #92]	; 0x5c
   3a800:	cmp	r0, #2
   3a804:	blt	3a818 <__assert_fail@plt+0x27c5c>
   3a808:	ldr	r1, [sl, #60]	; 0x3c
   3a80c:	mov	r0, r7
   3a810:	bl	3ab8c <__assert_fail@plt+0x27fd0>
   3a814:	b	3a820 <__assert_fail@plt+0x27c64>
   3a818:	mov	r0, r7
   3a81c:	bl	3abb0 <__assert_fail@plt+0x27ff4>
   3a820:	ldrb	r0, [sl, #128]	; 0x80
   3a824:	tst	r0, #64	; 0x40
   3a828:	bne	3a838 <__assert_fail@plt+0x27c7c>
   3a82c:	mov	r0, r7
   3a830:	mov	r1, #10
   3a834:	bl	3abd8 <__assert_fail@plt+0x2801c>
   3a838:	ldrb	r0, [sl, #128]	; 0x80
   3a83c:	tst	r0, #128	; 0x80
   3a840:	beq	3a6d8 <__assert_fail@plt+0x27b1c>
   3a844:	mov	r0, r7
   3a848:	mov	r1, #0
   3a84c:	bl	3abd8 <__assert_fail@plt+0x2801c>
   3a850:	b	3a6d8 <__assert_fail@plt+0x27b1c>
   3a854:	mov	r0, #0
   3a858:	mov	r1, #0
   3a85c:	ldr	r2, [r4, r1, lsl #2]
   3a860:	ldr	r3, [r7, r1, lsl #2]
   3a864:	and	r2, r3, r2
   3a868:	str	r2, [r7, r1, lsl #2]
   3a86c:	orr	r0, r2, r0
   3a870:	add	r1, r1, #1
   3a874:	cmp	r1, #8
   3a878:	bne	3a85c <__assert_fail@plt+0x27ca0>
   3a87c:	cmp	r0, #0
   3a880:	mov	r6, ip
   3a884:	beq	3ab10 <__assert_fail@plt+0x27f54>
   3a888:	tst	r9, #2048	; 0x800
   3a88c:	beq	3a934 <__assert_fail@plt+0x27d78>
   3a890:	ldr	r0, [sp, #32]
   3a894:	cmp	r0, #1
   3a898:	bne	3a8ac <__assert_fail@plt+0x27cf0>
   3a89c:	ldr	r0, [sp, #12]
   3a8a0:	ldrb	r0, [r0, #2]
   3a8a4:	tst	r0, #64	; 0x40
   3a8a8:	bne	3a8f4 <__assert_fail@plt+0x27d38>
   3a8ac:	ldr	r0, [sl, #92]	; 0x5c
   3a8b0:	mov	ip, r6
   3a8b4:	cmp	r0, #1
   3a8b8:	ble	3a900 <__assert_fail@plt+0x27d44>
   3a8bc:	ldr	r1, [sl, #60]	; 0x3c
   3a8c0:	mov	r0, #0
   3a8c4:	mov	r2, #0
   3a8c8:	ldr	r3, [r4, r2, lsl #2]
   3a8cc:	ldr	r6, [r1, r2, lsl #2]
   3a8d0:	and	r3, r6, r3
   3a8d4:	ldr	r6, [r7, r2, lsl #2]
   3a8d8:	bic	r3, r6, r3
   3a8dc:	str	r3, [r7, r2, lsl #2]
   3a8e0:	orr	r0, r3, r0
   3a8e4:	add	r2, r2, #1
   3a8e8:	cmp	r2, #8
   3a8ec:	bne	3a8c8 <__assert_fail@plt+0x27d0c>
   3a8f0:	b	3a928 <__assert_fail@plt+0x27d6c>
   3a8f4:	mov	r0, r7
   3a8f8:	bl	3ab7c <__assert_fail@plt+0x27fc0>
   3a8fc:	b	3ab10 <__assert_fail@plt+0x27f54>
   3a900:	mov	r0, #0
   3a904:	mov	r1, #0
   3a908:	ldr	r2, [r4, r1, lsl #2]
   3a90c:	ldr	r3, [r7, r1, lsl #2]
   3a910:	bic	r2, r3, r2
   3a914:	str	r2, [r7, r1, lsl #2]
   3a918:	orr	r0, r2, r0
   3a91c:	add	r1, r1, #1
   3a920:	cmp	r1, #8
   3a924:	bne	3a908 <__assert_fail@plt+0x27d4c>
   3a928:	cmp	r0, #0
   3a92c:	mov	r6, ip
   3a930:	beq	3ab10 <__assert_fail@plt+0x27f54>
   3a934:	str	r6, [sp, #20]
   3a938:	ldr	r9, [sp, #44]	; 0x2c
   3a93c:	mov	r6, #0
   3a940:	cmp	r9, #1
   3a944:	blt	3aa98 <__assert_fail@plt+0x27edc>
   3a948:	ldr	sl, [sp, #40]	; 0x28
   3a94c:	ldr	r4, [sp, #32]
   3a950:	cmp	r4, #1
   3a954:	bne	3a978 <__assert_fail@plt+0x27dbc>
   3a958:	ldr	r0, [sp, #28]
   3a95c:	ldr	r1, [sp, #24]
   3a960:	ldrb	r1, [r1, r0, lsl #3]
   3a964:	ldr	r0, [sp, #40]	; 0x28
   3a968:	add	r0, r0, r6, lsl #5
   3a96c:	bl	37ec4 <__assert_fail@plt+0x25308>
   3a970:	cmp	r0, #0
   3a974:	beq	3aa88 <__assert_fail@plt+0x27ecc>
   3a978:	mov	r0, #0
   3a97c:	mov	r1, #0
   3a980:	ldr	r2, [r7, r1, lsl #2]
   3a984:	ldr	r3, [sl, r1, lsl #2]
   3a988:	and	r2, r3, r2
   3a98c:	str	r2, [r5, r1, lsl #2]
   3a990:	orr	r0, r2, r0
   3a994:	add	r1, r1, #1
   3a998:	cmp	r1, #8
   3a99c:	bne	3a980 <__assert_fail@plt+0x27dc4>
   3a9a0:	cmp	r0, #0
   3a9a4:	beq	3aa88 <__assert_fail@plt+0x27ecc>
   3a9a8:	mov	r8, r9
   3a9ac:	mov	r9, #0
   3a9b0:	mov	r0, #0
   3a9b4:	mov	r1, #0
   3a9b8:	add	r5, sp, #48	; 0x30
   3a9bc:	ldr	r2, [r7, r1, lsl #2]
   3a9c0:	ldr	r3, [sl, r1, lsl #2]
   3a9c4:	bic	r4, r3, r2
   3a9c8:	str	r4, [r5, r1, lsl #2]
   3a9cc:	bic	r2, r2, r3
   3a9d0:	str	r2, [r7, r1, lsl #2]
   3a9d4:	orr	r9, r2, r9
   3a9d8:	orr	r0, r4, r0
   3a9dc:	add	r1, r1, #1
   3a9e0:	cmp	r1, #8
   3a9e4:	bne	3a9bc <__assert_fail@plt+0x27e00>
   3a9e8:	cmp	r0, #0
   3a9ec:	beq	3aa3c <__assert_fail@plt+0x27e80>
   3a9f0:	ldr	r4, [sp, #40]	; 0x28
   3a9f4:	add	r0, r4, r8, lsl #5
   3a9f8:	add	r1, sp, #48	; 0x30
   3a9fc:	bl	3abfc <__assert_fail@plt+0x28040>
   3aa00:	add	r0, r4, r6, lsl #5
   3aa04:	add	r5, sp, #80	; 0x50
   3aa08:	mov	r1, r5
   3aa0c:	bl	3abfc <__assert_fail@plt+0x28040>
   3aa10:	add	r0, r8, r8, lsl #1
   3aa14:	ldr	r2, [sp, #36]	; 0x24
   3aa18:	add	r0, r2, r0, lsl #2
   3aa1c:	add	r1, r6, r6, lsl #1
   3aa20:	add	r1, r2, r1, lsl #2
   3aa24:	bl	36574 <__assert_fail@plt+0x239b8>
   3aa28:	cmp	r0, #0
   3aa2c:	bne	3ab4c <__assert_fail@plt+0x27f90>
   3aa30:	add	r8, r8, #1
   3aa34:	str	r8, [sp, #44]	; 0x2c
   3aa38:	b	3aa44 <__assert_fail@plt+0x27e88>
   3aa3c:	str	r8, [sp, #44]	; 0x2c
   3aa40:	add	r5, sp, #80	; 0x50
   3aa44:	ldr	r8, [sp, #16]
   3aa48:	ldr	r0, [r8, #12]
   3aa4c:	ldr	r1, [sp, #20]
   3aa50:	ldr	r1, [r0, r1, lsl #2]
   3aa54:	add	r0, r6, r6, lsl #1
   3aa58:	ldr	r2, [sp, #36]	; 0x24
   3aa5c:	add	r0, r2, r0, lsl #2
   3aa60:	bl	3638c <__assert_fail@plt+0x237d0>
   3aa64:	cmp	r0, #0
   3aa68:	beq	3ab50 <__assert_fail@plt+0x27f94>
   3aa6c:	cmp	r9, #0
   3aa70:	mov	r0, #0
   3aa74:	movweq	r0, #17
   3aa78:	cmp	r0, #0
   3aa7c:	bne	3aaf0 <__assert_fail@plt+0x27f34>
   3aa80:	ldr	r9, [sp, #44]	; 0x2c
   3aa84:	ldr	r4, [sp, #32]
   3aa88:	add	sl, sl, #32
   3aa8c:	add	r6, r6, #1
   3aa90:	cmp	r6, r9
   3aa94:	blt	3a950 <__assert_fail@plt+0x27d94>
   3aa98:	cmp	r6, r9
   3aa9c:	bne	3ab04 <__assert_fail@plt+0x27f48>
   3aaa0:	ldr	r0, [sp, #40]	; 0x28
   3aaa4:	add	r0, r0, r9, lsl #5
   3aaa8:	mov	r1, r7
   3aaac:	bl	3abfc <__assert_fail@plt+0x28040>
   3aab0:	ldr	r0, [r8, #12]
   3aab4:	ldr	r6, [sp, #20]
   3aab8:	ldr	r1, [r0, r6, lsl #2]
   3aabc:	add	r0, r9, r9, lsl #1
   3aac0:	ldr	r2, [sp, #36]	; 0x24
   3aac4:	add	r0, r2, r0, lsl #2
   3aac8:	bl	35c5c <__assert_fail@plt+0x230a0>
   3aacc:	cmp	r0, #0
   3aad0:	ldr	sl, [sp, #4]
   3aad4:	bne	3ab54 <__assert_fail@plt+0x27f98>
   3aad8:	mov	r0, r7
   3aadc:	bl	3ab7c <__assert_fail@plt+0x27fc0>
   3aae0:	add	r9, r9, #1
   3aae4:	str	r9, [sp, #44]	; 0x2c
   3aae8:	ldr	r4, [sp]
   3aaec:	b	3ab10 <__assert_fail@plt+0x27f54>
   3aaf0:	cmp	r0, #17
   3aaf4:	bne	3ab24 <__assert_fail@plt+0x27f68>
   3aaf8:	ldr	r9, [sp, #44]	; 0x2c
   3aafc:	cmp	r6, r9
   3ab00:	beq	3aaa0 <__assert_fail@plt+0x27ee4>
   3ab04:	str	r9, [sp, #44]	; 0x2c
   3ab08:	ldm	sp, {r4, sl}
   3ab0c:	ldr	r6, [sp, #20]
   3ab10:	ldr	r0, [r8, #8]
   3ab14:	add	r6, r6, #1
   3ab18:	cmp	r6, r0
   3ab1c:	blt	3a69c <__assert_fail@plt+0x27ae0>
   3ab20:	b	3ab40 <__assert_fail@plt+0x27f84>
   3ab24:	cmp	r9, #0
   3ab28:	ldm	sp, {r4, sl}
   3ab2c:	ldr	r6, [sp, #20]
   3ab30:	bne	3ab10 <__assert_fail@plt+0x27f54>
   3ab34:	b	3ab40 <__assert_fail@plt+0x27f84>
   3ab38:	mov	r0, #0
   3ab3c:	str	r0, [sp, #44]	; 0x2c
   3ab40:	ldr	r0, [sp, #44]	; 0x2c
   3ab44:	sub	sp, fp, #28
   3ab48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ab4c:	str	r8, [sp, #44]	; 0x2c
   3ab50:	ldr	r9, [sp, #44]	; 0x2c
   3ab54:	cmp	r9, #1
   3ab58:	blt	3ab74 <__assert_fail@plt+0x27fb8>
   3ab5c:	ldr	r0, [sp, #36]	; 0x24
   3ab60:	add	r5, r0, #8
   3ab64:	ldr	r0, [r5], #12
   3ab68:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3ab6c:	subs	r9, r9, #1
   3ab70:	bne	3ab64 <__assert_fail@plt+0x27fa8>
   3ab74:	mvn	r0, #0
   3ab78:	b	3ab3c <__assert_fail@plt+0x27f80>
   3ab7c:	vmov.i32	q8, #0	; 0x00000000
   3ab80:	vst1.32	{d16-d17}, [r0]!
   3ab84:	vst1.32	{d16-d17}, [r0]
   3ab88:	bx	lr
   3ab8c:	mov	r2, #0
   3ab90:	ldr	ip, [r1, r2, lsl #2]
   3ab94:	ldr	r3, [r0, r2, lsl #2]
   3ab98:	orr	r3, r3, ip
   3ab9c:	str	r3, [r0, r2, lsl #2]
   3aba0:	add	r2, r2, #1
   3aba4:	cmp	r2, #8
   3aba8:	bne	3ab90 <__assert_fail@plt+0x27fd4>
   3abac:	bx	lr
   3abb0:	mvn	r1, #0
   3abb4:	str	r1, [r0]
   3abb8:	str	r1, [r0, #4]
   3abbc:	str	r1, [r0, #8]
   3abc0:	str	r1, [r0, #12]
   3abc4:	str	r1, [r0, #16]
   3abc8:	str	r1, [r0, #20]
   3abcc:	str	r1, [r0, #24]
   3abd0:	str	r1, [r0, #28]
   3abd4:	bx	lr
   3abd8:	asr	r2, r1, #31
   3abdc:	add	r2, r1, r2, lsr #27
   3abe0:	asr	r2, r2, #5
   3abe4:	ldr	ip, [r0, r2, lsl #2]
   3abe8:	and	r1, r1, #31
   3abec:	mov	r3, #1
   3abf0:	bic	r1, ip, r3, lsl r1
   3abf4:	str	r1, [r0, r2, lsl #2]
   3abf8:	bx	lr
   3abfc:	vld1.32	{d16-d17}, [r1]!
   3ac00:	vld1.32	{d18-d19}, [r1]
   3ac04:	vst1.32	{d16-d17}, [r0]!
   3ac08:	vst1.32	{d18-d19}, [r0]
   3ac0c:	bx	lr
   3ac10:	ldr	r0, [r0]
   3ac14:	add	r0, r0, r1, lsl #3
   3ac18:	ldr	r1, [r0, #4]
   3ac1c:	uxtb	r3, r1
   3ac20:	mov	r0, #0
   3ac24:	cmp	r3, #2
   3ac28:	bne	3ac80 <__assert_fail@plt+0x280c4>
   3ac2c:	movw	r3, #65280	; 0xff00
   3ac30:	movt	r3, #3
   3ac34:	tst	r1, r3
   3ac38:	moveq	r0, #1
   3ac3c:	bxeq	lr
   3ac40:	ands	ip, r2, #1
   3ac44:	bne	3ac50 <__assert_fail@plt+0x28094>
   3ac48:	ands	r3, r1, #1024	; 0x400
   3ac4c:	bne	3ac80 <__assert_fail@plt+0x280c4>
   3ac50:	cmp	ip, #0
   3ac54:	andsne	r3, r1, #2048	; 0x800
   3ac58:	bne	3ac80 <__assert_fail@plt+0x280c4>
   3ac5c:	tst	r2, #2
   3ac60:	bne	3ac6c <__assert_fail@plt+0x280b0>
   3ac64:	ands	r3, r1, #8192	; 0x2000
   3ac68:	bxne	lr
   3ac6c:	and	r0, r1, #32768	; 0x8000
   3ac70:	mov	r1, #1
   3ac74:	eor	r0, r1, r0, lsr #15
   3ac78:	and	r1, r2, #8
   3ac7c:	orr	r0, r0, r1, lsr #3
   3ac80:	bx	lr
   3ac84:	stm	r0, {r1, r2, r3}
   3ac88:	mov	r1, #0
   3ac8c:	str	r1, [r0, #24]
   3ac90:	str	r1, [r0, #20]
   3ac94:	str	r1, [r0, #16]
   3ac98:	ldr	r1, [sp]
   3ac9c:	str	r1, [r0, #12]
   3aca0:	bx	lr
   3aca4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3aca8:	add	fp, sp, #28
   3acac:	sub	sp, sp, #12
   3acb0:	mov	sl, r1
   3acb4:	mov	r6, r0
   3acb8:	ldr	r1, [r1, #8]
   3acbc:	ldr	r5, [sl, #12]
   3acc0:	mov	r0, sp
   3acc4:	bl	35c5c <__assert_fail@plt+0x230a0>
   3acc8:	cmp	r0, #0
   3accc:	bne	3ada8 <__assert_fail@plt+0x281ec>
   3acd0:	mov	r3, sp
   3acd4:	mov	r0, r6
   3acd8:	mov	r1, sl
   3acdc:	mov	r2, r5
   3ace0:	bl	3ae5c <__assert_fail@plt+0x282a0>
   3ace4:	cmp	r0, #0
   3ace8:	bne	3ad74 <__assert_fail@plt+0x281b8>
   3acec:	mov	r9, #0
   3acf0:	mov	r8, sp
   3acf4:	mov	r1, #0
   3acf8:	cmp	r5, #1
   3acfc:	blt	3ad7c <__assert_fail@plt+0x281c0>
   3ad00:	ldr	r0, [sl]
   3ad04:	ldr	r2, [r0, r5, lsl #2]
   3ad08:	cmp	r2, #0
   3ad0c:	mov	r4, #0
   3ad10:	addeq	r4, r1, #1
   3ad14:	ldr	r1, [r6, #120]	; 0x78
   3ad18:	cmp	r4, r1
   3ad1c:	bgt	3ad84 <__assert_fail@plt+0x281c8>
   3ad20:	str	r9, [sp, #4]
   3ad24:	ldr	r0, [r6, #100]	; 0x64
   3ad28:	sub	r5, r5, #1
   3ad2c:	ldr	r0, [r0, r5, lsl #2]
   3ad30:	cmp	r0, #0
   3ad34:	beq	3ad54 <__assert_fail@plt+0x28198>
   3ad38:	mov	r0, r6
   3ad3c:	mov	r1, sl
   3ad40:	mov	r2, r5
   3ad44:	mov	r3, r8
   3ad48:	bl	3af84 <__assert_fail@plt+0x283c8>
   3ad4c:	cmp	r0, #0
   3ad50:	bne	3ad74 <__assert_fail@plt+0x281b8>
   3ad54:	mov	r0, r6
   3ad58:	mov	r1, sl
   3ad5c:	mov	r2, r5
   3ad60:	mov	r3, r8
   3ad64:	bl	3ae5c <__assert_fail@plt+0x282a0>
   3ad68:	cmp	r0, #0
   3ad6c:	mov	r1, r4
   3ad70:	beq	3acf8 <__assert_fail@plt+0x2813c>
   3ad74:	mov	r7, r0
   3ad78:	b	3ad94 <__assert_fail@plt+0x281d8>
   3ad7c:	mov	r7, #0
   3ad80:	b	3ad94 <__assert_fail@plt+0x281d8>
   3ad84:	lsl	r2, r5, #2
   3ad88:	mov	r7, #0
   3ad8c:	mov	r1, #0
   3ad90:	bl	12904 <memset@plt>
   3ad94:	ldr	r0, [sp, #8]
   3ad98:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3ad9c:	mov	r0, r7
   3ada0:	sub	sp, fp, #28
   3ada4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ada8:	mov	r7, r0
   3adac:	b	3ad9c <__assert_fail@plt+0x281e0>
   3adb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3adb4:	add	fp, sp, #28
   3adb8:	sub	sp, sp, #20
   3adbc:	cmp	r3, #1
   3adc0:	blt	3ae50 <__assert_fail@plt+0x28294>
   3adc4:	mov	r4, r3
   3adc8:	mov	r5, r2
   3adcc:	mov	r6, r1
   3add0:	mov	sl, r0
   3add4:	mov	r7, #0
   3add8:	add	r8, sp, #4
   3addc:	add	r9, sp, #16
   3ade0:	ldr	r0, [r5, r7, lsl #2]
   3ade4:	ldr	r1, [r6, r7, lsl #2]
   3ade8:	cmp	r1, #0
   3adec:	beq	3ae40 <__assert_fail@plt+0x28284>
   3adf0:	cmp	r0, #0
   3adf4:	beq	3ae44 <__assert_fail@plt+0x28288>
   3adf8:	add	r1, r1, #4
   3adfc:	add	r2, r0, #4
   3ae00:	mov	r0, r8
   3ae04:	bl	389f0 <__assert_fail@plt+0x25e34>
   3ae08:	str	r0, [sp, #16]
   3ae0c:	cmp	r0, #0
   3ae10:	bne	3ae54 <__assert_fail@plt+0x28298>
   3ae14:	mov	r0, r9
   3ae18:	mov	r1, sl
   3ae1c:	mov	r2, r8
   3ae20:	bl	399cc <__assert_fail@plt+0x26e10>
   3ae24:	str	r0, [r6, r7, lsl #2]
   3ae28:	ldr	r0, [sp, #12]
   3ae2c:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3ae30:	ldr	r0, [sp, #16]
   3ae34:	cmp	r0, #0
   3ae38:	beq	3ae44 <__assert_fail@plt+0x28288>
   3ae3c:	b	3ae54 <__assert_fail@plt+0x28298>
   3ae40:	str	r0, [r6, r7, lsl #2]
   3ae44:	add	r7, r7, #1
   3ae48:	cmp	r7, r4
   3ae4c:	blt	3ade0 <__assert_fail@plt+0x28224>
   3ae50:	mov	r0, #0
   3ae54:	sub	sp, fp, #28
   3ae58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ae5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ae60:	add	fp, sp, #28
   3ae64:	sub	sp, sp, #12
   3ae68:	mov	sl, r2
   3ae6c:	mov	r8, r1
   3ae70:	mov	r6, r0
   3ae74:	ldr	r9, [r0, #84]	; 0x54
   3ae78:	mov	r0, #0
   3ae7c:	str	r0, [sp, #8]
   3ae80:	ldr	r1, [r6, #100]	; 0x64
   3ae84:	ldr	r7, [r1, r2, lsl #2]
   3ae88:	cmp	r7, #0
   3ae8c:	mov	r4, r7
   3ae90:	addne	r4, r4, #4
   3ae94:	ldr	r1, [r3, #4]
   3ae98:	cmp	r1, #0
   3ae9c:	beq	3af2c <__assert_fail@plt+0x28370>
   3aea0:	mov	r5, r3
   3aea4:	cmp	r7, #0
   3aea8:	beq	3aefc <__assert_fail@plt+0x28340>
   3aeac:	mov	r0, r9
   3aeb0:	mov	r1, r5
   3aeb4:	mov	r2, r4
   3aeb8:	bl	3b0c8 <__assert_fail@plt+0x2850c>
   3aebc:	str	r0, [sp, #8]
   3aec0:	cmp	r0, #0
   3aec4:	bne	3af54 <__assert_fail@plt+0x28398>
   3aec8:	ldr	r0, [r8, #20]
   3aecc:	cmp	r0, #0
   3aed0:	beq	3aefc <__assert_fail@plt+0x28340>
   3aed4:	ldr	r0, [r6, #116]	; 0x74
   3aed8:	stm	sp, {r0, sl}
   3aedc:	add	r3, r8, #16
   3aee0:	mov	r0, r9
   3aee4:	mov	r1, r5
   3aee8:	mov	r2, r4
   3aeec:	bl	3b1a0 <__assert_fail@plt+0x285e4>
   3aef0:	str	r0, [sp, #8]
   3aef4:	cmp	r0, #0
   3aef8:	bne	3af54 <__assert_fail@plt+0x28398>
   3aefc:	add	r0, sp, #8
   3af00:	mov	r1, r9
   3af04:	mov	r2, r5
   3af08:	bl	399cc <__assert_fail@plt+0x26e10>
   3af0c:	ldr	r1, [r8]
   3af10:	str	r0, [r1, sl, lsl #2]
   3af14:	ldr	r0, [sp, #8]
   3af18:	cmp	r0, #0
   3af1c:	bne	3af54 <__assert_fail@plt+0x28398>
   3af20:	cmp	r7, #0
   3af24:	bne	3af3c <__assert_fail@plt+0x28380>
   3af28:	b	3af50 <__assert_fail@plt+0x28394>
   3af2c:	ldr	r1, [r8]
   3af30:	str	r0, [r1, sl, lsl #2]
   3af34:	cmp	r7, #0
   3af38:	beq	3af50 <__assert_fail@plt+0x28394>
   3af3c:	ldr	r0, [r6, #100]	; 0x64
   3af40:	ldr	r0, [r0, sl, lsl #2]
   3af44:	ldrb	r0, [r0, #52]	; 0x34
   3af48:	tst	r0, #64	; 0x40
   3af4c:	bne	3af5c <__assert_fail@plt+0x283a0>
   3af50:	mov	r0, #0
   3af54:	sub	sp, fp, #28
   3af58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3af5c:	mov	r0, r6
   3af60:	mov	r1, r8
   3af64:	mov	r2, sl
   3af68:	mov	r3, r4
   3af6c:	bl	3b3e4 <__assert_fail@plt+0x28828>
   3af70:	str	r0, [sp, #8]
   3af74:	cmp	r0, #0
   3af78:	moveq	r0, #0
   3af7c:	sub	sp, fp, #28
   3af80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3af84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3af88:	add	fp, sp, #28
   3af8c:	sub	sp, sp, #20
   3af90:	str	r3, [sp, #12]
   3af94:	mov	sl, r0
   3af98:	ldr	r0, [r0, #100]	; 0x64
   3af9c:	ldr	r7, [r0, r2, lsl #2]
   3afa0:	ldr	r0, [r7, #20]
   3afa4:	cmp	r0, #1
   3afa8:	blt	3b0b0 <__assert_fail@plt+0x284f4>
   3afac:	mov	r5, r2
   3afb0:	mov	r6, r1
   3afb4:	ldr	r8, [sl, #84]	; 0x54
   3afb8:	add	r0, r1, #16
   3afbc:	str	r0, [sp, #8]
   3afc0:	add	r0, r2, #1
   3afc4:	str	r0, [sp, #16]
   3afc8:	mov	r9, #0
   3afcc:	ldr	r0, [r7, #24]
   3afd0:	ldr	r4, [r0, r9, lsl #2]
   3afd4:	ldr	r0, [r8]
   3afd8:	add	r0, r0, r4, lsl #3
   3afdc:	ldrb	r0, [r0, #6]
   3afe0:	tst	r0, #16
   3afe4:	beq	3b00c <__assert_fail@plt+0x28450>
   3afe8:	ldr	r0, [r6, #12]
   3afec:	str	r0, [sp]
   3aff0:	mov	r0, sl
   3aff4:	mov	r1, r6
   3aff8:	mov	r2, r4
   3affc:	mov	r3, r5
   3b000:	bl	3bdcc <__assert_fail@plt+0x29210>
   3b004:	cmp	r0, #0
   3b008:	bne	3b05c <__assert_fail@plt+0x284a0>
   3b00c:	ldr	r0, [r8]
   3b010:	add	r1, r0, r4, lsl #3
   3b014:	mov	r0, sl
   3b018:	mov	r2, r5
   3b01c:	bl	39ea4 <__assert_fail@plt+0x272e8>
   3b020:	cmp	r0, #0
   3b024:	beq	3b0a0 <__assert_fail@plt+0x284e4>
   3b028:	ldr	r0, [r6]
   3b02c:	ldr	r1, [sp, #16]
   3b030:	ldr	r0, [r0, r1, lsl #2]
   3b034:	cmp	r0, #0
   3b038:	beq	3b0a0 <__assert_fail@plt+0x284e4>
   3b03c:	ldr	r1, [r8, #12]
   3b040:	ldr	r1, [r1, r4, lsl #2]
   3b044:	add	r0, r0, #4
   3b048:	bl	365f0 <__assert_fail@plt+0x23a34>
   3b04c:	mov	r1, r0
   3b050:	mov	r0, #1
   3b054:	cmp	r1, #0
   3b058:	beq	3b0a0 <__assert_fail@plt+0x284e4>
   3b05c:	ldr	r1, [r6, #20]
   3b060:	cmp	r1, #0
   3b064:	beq	3b08c <__assert_fail@plt+0x284d0>
   3b068:	ldr	r1, [r8, #12]
   3b06c:	ldr	r2, [r1, r4, lsl #2]
   3b070:	stm	sp, {r4, r5}
   3b074:	add	r3, r0, r5
   3b078:	mov	r0, sl
   3b07c:	ldr	r1, [sp, #8]
   3b080:	bl	3ba64 <__assert_fail@plt+0x28ea8>
   3b084:	cmp	r0, #0
   3b088:	bne	3b0a0 <__assert_fail@plt+0x284e4>
   3b08c:	ldr	r0, [sp, #12]
   3b090:	mov	r1, r4
   3b094:	bl	3638c <__assert_fail@plt+0x237d0>
   3b098:	cmp	r0, #0
   3b09c:	beq	3b0bc <__assert_fail@plt+0x28500>
   3b0a0:	add	r9, r9, #1
   3b0a4:	ldr	r0, [r7, #20]
   3b0a8:	cmp	r9, r0
   3b0ac:	blt	3afcc <__assert_fail@plt+0x28410>
   3b0b0:	mov	r0, #0
   3b0b4:	sub	sp, fp, #28
   3b0b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b0bc:	mov	r0, #12
   3b0c0:	sub	sp, fp, #28
   3b0c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b0c8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3b0cc:	add	fp, sp, #24
   3b0d0:	sub	sp, sp, #8
   3b0d4:	mov	r8, r2
   3b0d8:	mov	r5, r1
   3b0dc:	mov	r6, r0
   3b0e0:	mov	r0, #0
   3b0e4:	str	r0, [sp, #4]
   3b0e8:	add	r0, sp, #4
   3b0ec:	mov	r1, r6
   3b0f0:	mov	r2, r5
   3b0f4:	bl	399cc <__assert_fail@plt+0x26e10>
   3b0f8:	ldr	r9, [sp, #4]
   3b0fc:	cmp	r9, #0
   3b100:	bne	3b18c <__assert_fail@plt+0x285d0>
   3b104:	mov	r7, r0
   3b108:	ldr	r0, [r7, #28]!
   3b10c:	cmp	r0, #0
   3b110:	bne	3b178 <__assert_fail@plt+0x285bc>
   3b114:	ldr	r1, [r5, #4]
   3b118:	mov	r0, r7
   3b11c:	bl	35eb4 <__assert_fail@plt+0x232f8>
   3b120:	str	r0, [sp, #4]
   3b124:	mov	r9, #12
   3b128:	cmp	r0, #0
   3b12c:	bne	3b18c <__assert_fail@plt+0x285d0>
   3b130:	ldr	r0, [r5, #4]
   3b134:	cmp	r0, #1
   3b138:	blt	3b178 <__assert_fail@plt+0x285bc>
   3b13c:	mov	r4, #0
   3b140:	ldr	r0, [r5, #8]
   3b144:	ldr	r0, [r0, r4, lsl #2]
   3b148:	add	r0, r0, r0, lsl #1
   3b14c:	ldr	r1, [r6, #28]
   3b150:	add	r1, r1, r0, lsl #2
   3b154:	mov	r0, r7
   3b158:	bl	36170 <__assert_fail@plt+0x235b4>
   3b15c:	cmp	r0, #0
   3b160:	bne	3b198 <__assert_fail@plt+0x285dc>
   3b164:	add	r4, r4, #1
   3b168:	ldr	r1, [r5, #4]
   3b16c:	cmp	r4, r1
   3b170:	blt	3b140 <__assert_fail@plt+0x28584>
   3b174:	str	r0, [sp, #4]
   3b178:	mov	r0, r5
   3b17c:	mov	r1, r8
   3b180:	mov	r2, r7
   3b184:	bl	3b6d0 <__assert_fail@plt+0x28b14>
   3b188:	mov	r9, r0
   3b18c:	mov	r0, r9
   3b190:	sub	sp, fp, #24
   3b194:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3b198:	str	r0, [sp, #4]
   3b19c:	b	3b18c <__assert_fail@plt+0x285d0>
   3b1a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b1a4:	add	fp, sp, #28
   3b1a8:	sub	sp, sp, #12
   3b1ac:	str	r2, [sp, #4]
   3b1b0:	mov	r6, r0
   3b1b4:	ldr	r0, [r3, #4]
   3b1b8:	cmp	r0, #1
   3b1bc:	blt	3b3d8 <__assert_fail@plt+0x2881c>
   3b1c0:	mov	r4, r3
   3b1c4:	mov	r9, r1
   3b1c8:	mov	r8, #0
   3b1cc:	str	r6, [sp]
   3b1d0:	str	r3, [sp, #8]
   3b1d4:	ldr	r0, [r4, #8]
   3b1d8:	ldr	r0, [r0, r8, lsl #2]
   3b1dc:	add	r0, r0, r0, lsl #1
   3b1e0:	ldr	r1, [fp, #8]
   3b1e4:	add	r1, r1, r0, lsl #3
   3b1e8:	ldr	r2, [r1, #8]
   3b1ec:	ldr	r3, [fp, #12]
   3b1f0:	cmp	r2, r3
   3b1f4:	bge	3b3c8 <__assert_fail@plt+0x2880c>
   3b1f8:	ldr	r1, [r1, #4]
   3b1fc:	ldr	r2, [fp, #12]
   3b200:	cmp	r1, r2
   3b204:	blt	3b3c8 <__assert_fail@plt+0x2880c>
   3b208:	ldr	r1, [fp, #8]
   3b20c:	ldr	r2, [r1, r0, lsl #3]!
   3b210:	ldr	r0, [r6]
   3b214:	ldr	sl, [r0, r2, lsl #3]
   3b218:	ldr	r1, [r1, #12]
   3b21c:	ldr	r2, [fp, #12]
   3b220:	cmp	r1, r2
   3b224:	bne	3b358 <__assert_fail@plt+0x2879c>
   3b228:	ldr	r1, [r9, #4]
   3b22c:	cmp	r1, #1
   3b230:	blt	3b3c8 <__assert_fail@plt+0x2880c>
   3b234:	ldmib	r9, {r2, r3}
   3b238:	mvn	ip, #0
   3b23c:	mov	r7, #0
   3b240:	mvn	r1, #0
   3b244:	ldr	r5, [r3, r7, lsl #2]
   3b248:	add	r4, r0, r5, lsl #3
   3b24c:	ldrb	r4, [r4, #4]
   3b250:	cmp	r4, #9
   3b254:	beq	3b270 <__assert_fail@plt+0x286b4>
   3b258:	cmp	r4, #8
   3b25c:	bne	3b27c <__assert_fail@plt+0x286c0>
   3b260:	ldr	r4, [r0, r5, lsl #3]
   3b264:	cmp	sl, r4
   3b268:	moveq	r1, r5
   3b26c:	b	3b27c <__assert_fail@plt+0x286c0>
   3b270:	ldr	r4, [r0, r5, lsl #3]
   3b274:	cmp	sl, r4
   3b278:	moveq	ip, r5
   3b27c:	add	r7, r7, #1
   3b280:	cmp	r7, r2
   3b284:	blt	3b244 <__assert_fail@plt+0x28688>
   3b288:	cmp	r1, #0
   3b28c:	blt	3b2b4 <__assert_fail@plt+0x286f8>
   3b290:	mov	r0, r6
   3b294:	mov	r2, r9
   3b298:	ldr	r3, [sp, #4]
   3b29c:	mov	r4, ip
   3b2a0:	bl	3b8bc <__assert_fail@plt+0x28d00>
   3b2a4:	mov	ip, r4
   3b2a8:	ldr	r6, [sp]
   3b2ac:	cmp	r0, #0
   3b2b0:	bne	3b3dc <__assert_fail@plt+0x28820>
   3b2b4:	cmp	ip, #0
   3b2b8:	ldr	r4, [sp, #8]
   3b2bc:	ldrge	r0, [r9, #4]
   3b2c0:	cmpge	r0, #1
   3b2c4:	blt	3b3c8 <__assert_fail@plt+0x2880c>
   3b2c8:	mov	sl, #0
   3b2cc:	ldr	r0, [r9, #8]
   3b2d0:	ldr	r4, [r0, sl, lsl #2]
   3b2d4:	add	r5, r4, r4, lsl #1
   3b2d8:	ldr	r0, [r6, #28]
   3b2dc:	add	r0, r0, r5, lsl #2
   3b2e0:	mov	r1, ip
   3b2e4:	mov	r7, ip
   3b2e8:	bl	365f0 <__assert_fail@plt+0x23a34>
   3b2ec:	cmp	r0, #0
   3b2f0:	beq	3b2fc <__assert_fail@plt+0x28740>
   3b2f4:	mov	ip, r7
   3b2f8:	b	3b340 <__assert_fail@plt+0x28784>
   3b2fc:	ldr	r0, [r6, #24]
   3b300:	add	r0, r0, r5, lsl #2
   3b304:	mov	r5, r7
   3b308:	mov	r1, r7
   3b30c:	bl	365f0 <__assert_fail@plt+0x23a34>
   3b310:	cmp	r0, #0
   3b314:	bne	3b33c <__assert_fail@plt+0x28780>
   3b318:	mov	r0, r6
   3b31c:	mov	r1, r4
   3b320:	mov	r2, r9
   3b324:	ldr	r3, [sp, #4]
   3b328:	bl	3b8bc <__assert_fail@plt+0x28d00>
   3b32c:	cmp	r0, #0
   3b330:	bne	3b3dc <__assert_fail@plt+0x28820>
   3b334:	sub	sl, sl, #1
   3b338:	ldr	r6, [sp]
   3b33c:	mov	ip, r5
   3b340:	ldr	r0, [r9, #4]
   3b344:	add	sl, sl, #1
   3b348:	cmp	sl, r0
   3b34c:	ldr	r4, [sp, #8]
   3b350:	blt	3b2cc <__assert_fail@plt+0x28710>
   3b354:	b	3b3c8 <__assert_fail@plt+0x2880c>
   3b358:	ldr	r0, [r9, #4]
   3b35c:	cmp	r0, #1
   3b360:	blt	3b3c8 <__assert_fail@plt+0x2880c>
   3b364:	mov	r5, #0
   3b368:	ldr	r0, [r9, #8]
   3b36c:	ldr	r1, [r0, r5, lsl #2]
   3b370:	ldr	r0, [r6]
   3b374:	add	r2, r0, r1, lsl #3
   3b378:	ldr	r2, [r2, #4]
   3b37c:	and	r2, r2, #254	; 0xfe
   3b380:	orr	r2, r2, #1
   3b384:	cmp	r2, #9
   3b388:	ldreq	r0, [r0, r1, lsl #3]
   3b38c:	cmpeq	sl, r0
   3b390:	beq	3b3a8 <__assert_fail@plt+0x287ec>
   3b394:	ldr	r0, [r9, #4]
   3b398:	add	r5, r5, #1
   3b39c:	cmp	r5, r0
   3b3a0:	blt	3b368 <__assert_fail@plt+0x287ac>
   3b3a4:	b	3b3c8 <__assert_fail@plt+0x2880c>
   3b3a8:	mov	r0, r6
   3b3ac:	mov	r2, r9
   3b3b0:	ldr	r3, [sp, #4]
   3b3b4:	bl	3b8bc <__assert_fail@plt+0x28d00>
   3b3b8:	ldr	r6, [sp]
   3b3bc:	cmp	r0, #0
   3b3c0:	beq	3b394 <__assert_fail@plt+0x287d8>
   3b3c4:	b	3b3dc <__assert_fail@plt+0x28820>
   3b3c8:	add	r8, r8, #1
   3b3cc:	ldr	r0, [r4, #4]
   3b3d0:	cmp	r8, r0
   3b3d4:	blt	3b1d4 <__assert_fail@plt+0x28618>
   3b3d8:	mov	r0, #0
   3b3dc:	sub	sp, fp, #28
   3b3e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b3e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b3e8:	add	fp, sp, #28
   3b3ec:	sub	sp, sp, #84	; 0x54
   3b3f0:	mov	r4, r3
   3b3f4:	mov	r7, r2
   3b3f8:	str	r1, [sp, #52]	; 0x34
   3b3fc:	ldr	r1, [r0, #84]	; 0x54
   3b400:	str	r1, [sp, #48]	; 0x30
   3b404:	str	r0, [sp, #44]	; 0x2c
   3b408:	mov	r1, r2
   3b40c:	bl	38c20 <__assert_fail@plt+0x26064>
   3b410:	str	r0, [sp, #20]
   3b414:	mov	sl, #0
   3b418:	cmn	r0, #1
   3b41c:	beq	3b6b4 <__assert_fail@plt+0x28af8>
   3b420:	str	sl, [sp, #56]	; 0x38
   3b424:	str	r4, [sp, #24]
   3b428:	ldr	r0, [r4, #4]
   3b42c:	cmp	r0, #1
   3b430:	blt	3b6b4 <__assert_fail@plt+0x28af8>
   3b434:	add	r0, r7, #1
   3b438:	str	r0, [sp, #8]
   3b43c:	add	r0, sp, #56	; 0x38
   3b440:	add	r0, r0, #16
   3b444:	str	r0, [sp, #28]
   3b448:	ldr	r2, [sp, #52]	; 0x34
   3b44c:	add	r0, r2, #16
   3b450:	str	r0, [sp, #32]
   3b454:	ldr	r0, [sp, #20]
   3b458:	add	r0, r0, r0, lsl #1
   3b45c:	str	r0, [sp, #16]
   3b460:	lsl	r0, r0, #3
   3b464:	str	r0, [sp, #12]
   3b468:	mov	r1, #0
   3b46c:	ldr	sl, [sp, #24]
   3b470:	ldr	r3, [sp, #48]	; 0x30
   3b474:	str	r7, [sp, #40]	; 0x28
   3b478:	ldr	r0, [sl, #8]
   3b47c:	str	r1, [sp, #36]	; 0x24
   3b480:	ldr	r9, [r0, r1, lsl #2]
   3b484:	ldr	r0, [r3]
   3b488:	add	r0, r0, r9, lsl #3
   3b48c:	ldrb	r0, [r0, #4]
   3b490:	ldr	r1, [r2, #8]
   3b494:	cmp	r9, r1
   3b498:	bne	3b4b4 <__assert_fail@plt+0x288f8>
   3b49c:	cmp	r0, #4
   3b4a0:	bne	3b688 <__assert_fail@plt+0x28acc>
   3b4a4:	ldr	r0, [r2, #12]
   3b4a8:	cmp	r0, r7
   3b4ac:	bne	3b4bc <__assert_fail@plt+0x28900>
   3b4b0:	b	3b688 <__assert_fail@plt+0x28acc>
   3b4b4:	cmp	r0, #4
   3b4b8:	bne	3b688 <__assert_fail@plt+0x28acc>
   3b4bc:	ldr	r0, [sp, #44]	; 0x2c
   3b4c0:	ldr	r0, [r0, #116]	; 0x74
   3b4c4:	ldr	r1, [sp, #16]
   3b4c8:	add	r5, r0, r1, lsl #3
   3b4cc:	ldr	r4, [sp, #12]
   3b4d0:	ldr	r8, [sp, #20]
   3b4d4:	b	3b4ec <__assert_fail@plt+0x28930>
   3b4d8:	mov	r0, r5
   3b4dc:	ldr	r7, [sp, #40]	; 0x28
   3b4e0:	ldr	r2, [sp, #52]	; 0x34
   3b4e4:	ldr	r3, [sp, #48]	; 0x30
   3b4e8:	b	3b670 <__assert_fail@plt+0x28ab4>
   3b4ec:	ldr	r0, [r5]
   3b4f0:	cmp	r0, r9
   3b4f4:	bne	3b66c <__assert_fail@plt+0x28ab0>
   3b4f8:	ldr	r0, [r5, #8]
   3b4fc:	ldr	r1, [r5, #12]
   3b500:	subs	r0, r1, r0
   3b504:	add	r6, r0, r7
   3b508:	beq	3b518 <__assert_fail@plt+0x2895c>
   3b50c:	ldr	r0, [r3, #12]
   3b510:	add	r0, r0, r9, lsl #2
   3b514:	b	3b528 <__assert_fail@plt+0x2896c>
   3b518:	ldr	r0, [r3, #20]
   3b51c:	add	r1, r9, r9, lsl #1
   3b520:	add	r0, r0, r1, lsl #2
   3b524:	ldr	r0, [r0, #8]
   3b528:	ldr	r1, [r2, #12]
   3b52c:	cmp	r6, r1
   3b530:	bgt	3b66c <__assert_fail@plt+0x28ab0>
   3b534:	ldr	r1, [r2]
   3b538:	ldr	r1, [r1, r6, lsl #2]
   3b53c:	cmp	r1, #0
   3b540:	beq	3b66c <__assert_fail@plt+0x28ab0>
   3b544:	ldr	r7, [r0]
   3b548:	add	r0, r1, #4
   3b54c:	mov	r1, r7
   3b550:	bl	365f0 <__assert_fail@plt+0x23a34>
   3b554:	cmp	r0, #0
   3b558:	beq	3b4d8 <__assert_fail@plt+0x2891c>
   3b55c:	str	r7, [sp]
   3b560:	str	r6, [sp, #4]
   3b564:	ldr	r0, [sp, #44]	; 0x2c
   3b568:	ldr	r1, [sp, #32]
   3b56c:	mov	r2, r9
   3b570:	ldr	r7, [sp, #40]	; 0x28
   3b574:	mov	r3, r7
   3b578:	bl	3ba64 <__assert_fail@plt+0x28ea8>
   3b57c:	cmp	r0, #0
   3b580:	mov	r0, r5
   3b584:	ldr	r2, [sp, #52]	; 0x34
   3b588:	ldr	r3, [sp, #48]	; 0x30
   3b58c:	bne	3b670 <__assert_fail@plt+0x28ab4>
   3b590:	ldr	r0, [sp, #56]	; 0x38
   3b594:	cmp	r0, #0
   3b598:	bne	3b5cc <__assert_fail@plt+0x28a10>
   3b59c:	mov	r0, r2
   3b5a0:	mov	r1, #12
   3b5a4:	vld1.32	{d16-d17}, [r0], r1
   3b5a8:	vld1.32	{d18-d19}, [r0]
   3b5ac:	add	r0, sp, #56	; 0x38
   3b5b0:	vst1.64	{d16-d17}, [r0], r1
   3b5b4:	vst1.32	{d18-d19}, [r0]
   3b5b8:	ldr	r0, [sp, #28]
   3b5bc:	ldr	r1, [sp, #32]
   3b5c0:	bl	36574 <__assert_fail@plt+0x239b8>
   3b5c4:	cmp	r0, #0
   3b5c8:	bne	3b6c0 <__assert_fail@plt+0x28b04>
   3b5cc:	str	r7, [sp, #68]	; 0x44
   3b5d0:	str	r9, [sp, #64]	; 0x40
   3b5d4:	ldr	r0, [sp, #28]
   3b5d8:	mov	r1, r8
   3b5dc:	bl	3638c <__assert_fail@plt+0x237d0>
   3b5e0:	cmp	r0, #0
   3b5e4:	beq	3b6c8 <__assert_fail@plt+0x28b0c>
   3b5e8:	mov	r0, r7
   3b5ec:	ldr	r7, [sp, #56]	; 0x38
   3b5f0:	ldr	r5, [r7, r0, lsl #2]
   3b5f4:	ldr	r0, [sp, #44]	; 0x2c
   3b5f8:	add	r1, sp, #56	; 0x38
   3b5fc:	bl	3aca4 <__assert_fail@plt+0x280e8>
   3b600:	cmp	r0, #0
   3b604:	bne	3b6c0 <__assert_fail@plt+0x28b04>
   3b608:	ldr	r0, [sp, #52]	; 0x34
   3b60c:	ldr	r1, [r0, #4]
   3b610:	cmp	r1, #0
   3b614:	beq	3b630 <__assert_fail@plt+0x28a74>
   3b618:	ldr	r0, [sp, #48]	; 0x30
   3b61c:	mov	r2, r7
   3b620:	ldr	r3, [sp, #8]
   3b624:	bl	3adb0 <__assert_fail@plt+0x281f4>
   3b628:	cmp	r0, #0
   3b62c:	bne	3b6c0 <__assert_fail@plt+0x28b04>
   3b630:	ldr	r0, [sp, #40]	; 0x28
   3b634:	str	r5, [r7, r0, lsl #2]
   3b638:	mov	r7, r0
   3b63c:	ldr	r5, [sp, #28]
   3b640:	mov	r0, r5
   3b644:	mov	r1, r8
   3b648:	bl	365f0 <__assert_fail@plt+0x23a34>
   3b64c:	sub	r1, r0, #1
   3b650:	mov	r0, r5
   3b654:	bl	369e8 <__assert_fail@plt+0x23e2c>
   3b658:	ldr	r0, [sp, #44]	; 0x2c
   3b65c:	ldr	r0, [r0, #116]	; 0x74
   3b660:	add	r0, r0, r4
   3b664:	ldr	sl, [sp, #24]
   3b668:	b	3b4e0 <__assert_fail@plt+0x28924>
   3b66c:	mov	r0, r5
   3b670:	add	r4, r4, #24
   3b674:	add	r5, r0, #24
   3b678:	add	r8, r8, #1
   3b67c:	ldrb	r0, [r0, #20]
   3b680:	cmp	r0, #0
   3b684:	bne	3b4ec <__assert_fail@plt+0x28930>
   3b688:	ldr	r1, [sp, #36]	; 0x24
   3b68c:	add	r1, r1, #1
   3b690:	ldr	r0, [sl, #4]
   3b694:	cmp	r1, r0
   3b698:	blt	3b478 <__assert_fail@plt+0x288bc>
   3b69c:	mov	sl, #0
   3b6a0:	ldr	r0, [sp, #56]	; 0x38
   3b6a4:	cmp	r0, #0
   3b6a8:	beq	3b6b4 <__assert_fail@plt+0x28af8>
   3b6ac:	ldr	r0, [sp, #80]	; 0x50
   3b6b0:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3b6b4:	mov	r0, sl
   3b6b8:	sub	sp, fp, #28
   3b6bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b6c0:	mov	sl, r0
   3b6c4:	b	3b6a0 <__assert_fail@plt+0x28ae4>
   3b6c8:	mov	sl, #12
   3b6cc:	b	3b6a0 <__assert_fail@plt+0x28ae4>
   3b6d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b6d4:	add	fp, sp, #28
   3b6d8:	sub	sp, sp, #4
   3b6dc:	mov	r9, r2
   3b6e0:	mov	r8, r0
   3b6e4:	ldr	r2, [r1, #4]
   3b6e8:	mov	r0, #0
   3b6ec:	cmp	r2, #0
   3b6f0:	beq	3b8a8 <__assert_fail@plt+0x28cec>
   3b6f4:	mov	sl, r1
   3b6f8:	ldr	r1, [r9, #4]
   3b6fc:	cmp	r1, #0
   3b700:	beq	3b8a8 <__assert_fail@plt+0x28cec>
   3b704:	add	r0, r1, r2
   3b708:	ldm	r8, {r1, r2}
   3b70c:	add	r2, r2, r0
   3b710:	cmp	r2, r1
   3b714:	ble	3b738 <__assert_fail@plt+0x28b7c>
   3b718:	add	r4, r1, r0
   3b71c:	lsl	r1, r4, #2
   3b720:	ldr	r0, [r8, #8]
   3b724:	bl	2f804 <__assert_fail@plt+0x1cc48>
   3b728:	cmp	r0, #0
   3b72c:	beq	3b8b0 <__assert_fail@plt+0x28cf4>
   3b730:	str	r4, [r8]
   3b734:	str	r0, [r8, #8]
   3b738:	ldr	r1, [r8, #4]
   3b73c:	ldr	r6, [sl, #4]
   3b740:	ldr	r0, [sl, #8]
   3b744:	add	r3, r6, r1
   3b748:	ldr	r5, [r9, #4]
   3b74c:	ldr	r2, [r9, #8]
   3b750:	add	ip, r3, r5
   3b754:	sub	r7, r1, #1
   3b758:	sub	r3, r5, #1
   3b75c:	sub	r4, r6, #1
   3b760:	ldr	r1, [r2, r3, lsl #2]
   3b764:	ldr	r6, [r0, r4, lsl #2]
   3b768:	cmp	r6, r1
   3b76c:	beq	3b788 <__assert_fail@plt+0x28bcc>
   3b770:	blt	3b7b8 <__assert_fail@plt+0x28bfc>
   3b774:	sub	r1, r4, #1
   3b778:	cmp	r4, #0
   3b77c:	mov	r4, r1
   3b780:	bgt	3b760 <__assert_fail@plt+0x28ba4>
   3b784:	b	3b808 <__assert_fail@plt+0x28c4c>
   3b788:	cmp	r7, #0
   3b78c:	blt	3b7e8 <__assert_fail@plt+0x28c2c>
   3b790:	ldr	r5, [r8, #8]
   3b794:	mov	r1, r7
   3b798:	ldr	r7, [r5, r1, lsl #2]
   3b79c:	cmp	r7, r6
   3b7a0:	ble	3b7c4 <__assert_fail@plt+0x28c08>
   3b7a4:	sub	r7, r1, #1
   3b7a8:	cmp	r1, #0
   3b7ac:	mov	r1, r7
   3b7b0:	bgt	3b798 <__assert_fail@plt+0x28bdc>
   3b7b4:	b	3b7e8 <__assert_fail@plt+0x28c2c>
   3b7b8:	subs	r3, r3, #1
   3b7bc:	bge	3b760 <__assert_fail@plt+0x28ba4>
   3b7c0:	b	3b808 <__assert_fail@plt+0x28c4c>
   3b7c4:	ldr	r7, [r8, #8]
   3b7c8:	ldr	r7, [r7, r1, lsl #2]
   3b7cc:	cmp	r7, r6
   3b7d0:	mov	r7, r1
   3b7d4:	bne	3b7e8 <__assert_fail@plt+0x28c2c>
   3b7d8:	mov	r7, r1
   3b7dc:	cmp	r4, #1
   3b7e0:	bge	3b7fc <__assert_fail@plt+0x28c40>
   3b7e4:	b	3b808 <__assert_fail@plt+0x28c4c>
   3b7e8:	ldr	r1, [r8, #8]
   3b7ec:	sub	ip, ip, #1
   3b7f0:	str	r6, [r1, ip, lsl #2]
   3b7f4:	cmp	r4, #1
   3b7f8:	blt	3b808 <__assert_fail@plt+0x28c4c>
   3b7fc:	subs	r3, r3, #1
   3b800:	sub	r4, r4, #1
   3b804:	bge	3b760 <__assert_fail@plt+0x28ba4>
   3b808:	ldr	r1, [sl, #4]
   3b80c:	ldr	r7, [r8, #4]
   3b810:	add	r0, r7, r1
   3b814:	ldr	r3, [r9, #4]
   3b818:	add	r0, r0, r3
   3b81c:	sub	r0, r0, #1
   3b820:	sub	r6, r0, ip
   3b824:	add	r2, r6, #1
   3b828:	add	r5, r2, r7
   3b82c:	str	r5, [r8, #4]
   3b830:	cmp	r7, #1
   3b834:	cmpge	r6, #0
   3b838:	blt	3b894 <__assert_fail@plt+0x28cd8>
   3b83c:	add	r3, r7, r3
   3b840:	add	r1, r3, r1
   3b844:	sub	r3, r1, ip
   3b848:	ldr	r1, [r8, #8]
   3b84c:	add	r3, r1, r3, lsl #2
   3b850:	sub	r7, r7, #1
   3b854:	ldr	r6, [r1, r7, lsl #2]
   3b858:	ldr	r5, [r1, r0, lsl #2]
   3b85c:	cmp	r5, r6
   3b860:	bgt	3b87c <__assert_fail@plt+0x28cc0>
   3b864:	str	r6, [r3, r7, lsl #2]
   3b868:	sub	r6, r7, #1
   3b86c:	cmp	r7, #0
   3b870:	mov	r7, r6
   3b874:	bgt	3b854 <__assert_fail@plt+0x28c98>
   3b878:	b	3b894 <__assert_fail@plt+0x28cd8>
   3b87c:	str	r5, [r3, r7, lsl #2]
   3b880:	sub	r3, r3, #4
   3b884:	subs	r2, r2, #1
   3b888:	sub	r0, r0, #1
   3b88c:	bne	3b854 <__assert_fail@plt+0x28c98>
   3b890:	mov	r2, #0
   3b894:	ldr	r0, [r8, #8]
   3b898:	add	r1, r0, ip, lsl #2
   3b89c:	lsl	r2, r2, #2
   3b8a0:	bl	125c8 <memcpy@plt>
   3b8a4:	mov	r0, #0
   3b8a8:	sub	sp, fp, #28
   3b8ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b8b0:	mov	r0, #12
   3b8b4:	sub	sp, fp, #28
   3b8b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b8bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b8c0:	add	fp, sp, #28
   3b8c4:	sub	sp, sp, #28
   3b8c8:	str	r3, [sp]
   3b8cc:	mov	r7, r1
   3b8d0:	str	r0, [sp, #12]
   3b8d4:	ldr	r0, [r0, #28]
   3b8d8:	mov	r8, #0
   3b8dc:	str	r8, [sp, #20]
   3b8e0:	str	r8, [sp, #16]
   3b8e4:	str	r8, [sp, #24]
   3b8e8:	add	r1, r1, r1, lsl #1
   3b8ec:	add	r1, r0, r1, lsl #2
   3b8f0:	mov	r4, r1
   3b8f4:	ldr	r0, [r4, #4]!
   3b8f8:	cmp	r0, #1
   3b8fc:	blt	3ba48 <__assert_fail@plt+0x28e8c>
   3b900:	str	r2, [sp, #4]
   3b904:	str	r1, [sp, #8]
   3b908:	add	r9, r1, #8
   3b90c:	mov	r6, #0
   3b910:	ldr	r0, [r9]
   3b914:	ldr	r0, [r0, r6, lsl #2]
   3b918:	cmp	r0, r7
   3b91c:	beq	3b9dc <__assert_fail@plt+0x28e20>
   3b920:	ldr	r1, [sp, #12]
   3b924:	ldr	r1, [r1]
   3b928:	add	r1, r1, r0, lsl #3
   3b92c:	ldrb	r1, [r1, #4]
   3b930:	tst	r1, #8
   3b934:	beq	3b9dc <__assert_fail@plt+0x28e20>
   3b938:	ldr	r1, [sp, #12]
   3b93c:	ldr	r1, [r1, #20]
   3b940:	add	r5, r0, r0, lsl #1
   3b944:	add	r0, r1, r5, lsl #2
   3b948:	ldr	r1, [r0, #4]
   3b94c:	ldr	r0, [r0, #8]
   3b950:	ldr	r8, [r0]
   3b954:	mvn	sl, #0
   3b958:	cmp	r1, #2
   3b95c:	ldrge	sl, [r0, #4]
   3b960:	ldr	r0, [sp, #8]
   3b964:	mov	r1, r8
   3b968:	bl	365f0 <__assert_fail@plt+0x23a34>
   3b96c:	cmp	r0, #0
   3b970:	beq	3b9a8 <__assert_fail@plt+0x28dec>
   3b974:	cmp	sl, #1
   3b978:	blt	3b9dc <__assert_fail@plt+0x28e20>
   3b97c:	ldr	r0, [sp, #8]
   3b980:	mov	r1, sl
   3b984:	bl	365f0 <__assert_fail@plt+0x23a34>
   3b988:	cmp	r0, #0
   3b98c:	bne	3b9dc <__assert_fail@plt+0x28e20>
   3b990:	ldr	r0, [sp, #4]
   3b994:	mov	r1, sl
   3b998:	bl	365f0 <__assert_fail@plt+0x23a34>
   3b99c:	cmp	r0, #0
   3b9a0:	bne	3b9bc <__assert_fail@plt+0x28e00>
   3b9a4:	b	3b9dc <__assert_fail@plt+0x28e20>
   3b9a8:	ldr	r0, [sp, #4]
   3b9ac:	mov	r1, r8
   3b9b0:	bl	365f0 <__assert_fail@plt+0x23a34>
   3b9b4:	cmp	r0, #0
   3b9b8:	beq	3b974 <__assert_fail@plt+0x28db8>
   3b9bc:	ldr	r0, [sp, #12]
   3b9c0:	ldr	r0, [r0, #28]
   3b9c4:	add	r2, r0, r5, lsl #2
   3b9c8:	add	r0, sp, #16
   3b9cc:	ldr	r1, [sp]
   3b9d0:	bl	3b6d0 <__assert_fail@plt+0x28b14>
   3b9d4:	cmp	r0, #0
   3b9d8:	bne	3ba5c <__assert_fail@plt+0x28ea0>
   3b9dc:	add	r6, r6, #1
   3b9e0:	ldr	r0, [r4]
   3b9e4:	cmp	r6, r0
   3b9e8:	blt	3b910 <__assert_fail@plt+0x28d54>
   3b9ec:	cmp	r0, #1
   3b9f0:	mov	r8, #0
   3b9f4:	ldr	r5, [sp, #4]
   3b9f8:	blt	3ba48 <__assert_fail@plt+0x28e8c>
   3b9fc:	mov	r7, #0
   3ba00:	add	sl, sp, #16
   3ba04:	ldr	r0, [r9]
   3ba08:	ldr	r6, [r0, r7, lsl #2]
   3ba0c:	mov	r0, sl
   3ba10:	mov	r1, r6
   3ba14:	bl	365f0 <__assert_fail@plt+0x23a34>
   3ba18:	cmp	r0, #0
   3ba1c:	bne	3ba38 <__assert_fail@plt+0x28e7c>
   3ba20:	mov	r0, r5
   3ba24:	mov	r1, r6
   3ba28:	bl	365f0 <__assert_fail@plt+0x23a34>
   3ba2c:	sub	r1, r0, #1
   3ba30:	mov	r0, r5
   3ba34:	bl	369e8 <__assert_fail@plt+0x23e2c>
   3ba38:	ldr	r0, [r4]
   3ba3c:	add	r7, r7, #1
   3ba40:	cmp	r7, r0
   3ba44:	blt	3ba04 <__assert_fail@plt+0x28e48>
   3ba48:	ldr	r0, [sp, #24]
   3ba4c:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3ba50:	mov	r0, r8
   3ba54:	sub	sp, fp, #28
   3ba58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ba5c:	mov	r8, r0
   3ba60:	b	3ba48 <__assert_fail@plt+0x28e8c>
   3ba64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ba68:	add	fp, sp, #28
   3ba6c:	sub	sp, sp, #20
   3ba70:	str	r2, [sp, #12]
   3ba74:	mov	r6, r1
   3ba78:	mov	r7, r0
   3ba7c:	str	r3, [sp, #16]
   3ba80:	mov	r1, r3
   3ba84:	bl	38c20 <__assert_fail@plt+0x26064>
   3ba88:	str	r0, [sp, #8]
   3ba8c:	ldr	r1, [fp, #12]
   3ba90:	mov	r0, r7
   3ba94:	bl	38c20 <__assert_fail@plt+0x26064>
   3ba98:	mov	r4, r0
   3ba9c:	ldr	r0, [r6, #4]
   3baa0:	cmp	r0, #1
   3baa4:	blt	3bb28 <__assert_fail@plt+0x28f6c>
   3baa8:	ldr	sl, [r7, #84]	; 0x54
   3baac:	mov	r5, #0
   3bab0:	ldr	r0, [r6, #8]
   3bab4:	ldr	r1, [r0, r5, lsl #2]
   3bab8:	add	r0, r1, r1, lsl #1
   3babc:	ldr	r2, [r7, #116]	; 0x74
   3bac0:	ldr	r0, [r2, r0, lsl #3]
   3bac4:	ldr	r2, [sl]
   3bac8:	ldr	r9, [r2, r0, lsl #3]
   3bacc:	ldr	r0, [sp, #16]
   3bad0:	str	r0, [sp]
   3bad4:	ldr	r0, [sp, #8]
   3bad8:	str	r0, [sp, #4]
   3badc:	mov	r0, r7
   3bae0:	mov	r2, r9
   3bae4:	ldr	r3, [sp, #12]
   3bae8:	bl	3bb40 <__assert_fail@plt+0x28f84>
   3baec:	mov	r8, r0
   3baf0:	ldr	r0, [r6, #8]
   3baf4:	ldr	r1, [r0, r5, lsl #2]
   3baf8:	ldr	r0, [fp, #12]
   3bafc:	stm	sp, {r0, r4}
   3bb00:	mov	r0, r7
   3bb04:	mov	r2, r9
   3bb08:	ldr	r3, [fp, #8]
   3bb0c:	bl	3bb40 <__assert_fail@plt+0x28f84>
   3bb10:	cmp	r0, r8
   3bb14:	bne	3bb34 <__assert_fail@plt+0x28f78>
   3bb18:	add	r5, r5, #1
   3bb1c:	ldr	r0, [r6, #4]
   3bb20:	cmp	r5, r0
   3bb24:	blt	3bab0 <__assert_fail@plt+0x28ef4>
   3bb28:	mov	r0, #0
   3bb2c:	sub	sp, fp, #28
   3bb30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bb34:	mov	r0, #1
   3bb38:	sub	sp, fp, #28
   3bb3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bb40:	push	{r4, r5, fp, lr}
   3bb44:	add	fp, sp, #8
   3bb48:	sub	sp, sp, #8
   3bb4c:	ldr	r4, [r0, #116]	; 0x74
   3bb50:	add	r1, r1, r1, lsl #1
   3bb54:	add	r4, r4, r1, lsl #3
   3bb58:	ldr	ip, [r4, #8]
   3bb5c:	mvn	r1, #0
   3bb60:	ldr	lr, [fp, #8]
   3bb64:	cmp	ip, lr
   3bb68:	bgt	3bbb8 <__assert_fail@plt+0x28ffc>
   3bb6c:	ldr	r4, [r4, #12]
   3bb70:	mov	r1, #1
   3bb74:	cmp	r4, lr
   3bb78:	blt	3bbb8 <__assert_fail@plt+0x28ffc>
   3bb7c:	sub	r1, r4, lr
   3bb80:	clz	r1, r1
   3bb84:	lsr	r4, r1, #5
   3bb88:	mov	r5, #1
   3bb8c:	lsl	r1, r4, #1
   3bb90:	cmp	ip, lr
   3bb94:	orreq	r1, r5, r4, lsl #1
   3bb98:	cmp	r1, #0
   3bb9c:	beq	3bbb4 <__assert_fail@plt+0x28ff8>
   3bba0:	ldr	r5, [fp, #12]
   3bba4:	str	r5, [sp]
   3bba8:	bl	3bbc4 <__assert_fail@plt+0x29008>
   3bbac:	sub	sp, fp, #8
   3bbb0:	pop	{r4, r5, fp, pc}
   3bbb4:	mov	r1, #0
   3bbb8:	mov	r0, r1
   3bbbc:	sub	sp, fp, #8
   3bbc0:	pop	{r4, r5, fp, pc}
   3bbc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bbc8:	add	fp, sp, #28
   3bbcc:	sub	sp, sp, #36	; 0x24
   3bbd0:	mov	r6, r2
   3bbd4:	mov	r5, r1
   3bbd8:	mov	r7, r0
   3bbdc:	ldr	r4, [r0, #84]	; 0x54
   3bbe0:	ldr	r0, [r4, #24]
   3bbe4:	str	r3, [sp, #32]
   3bbe8:	add	r1, r3, r3, lsl #1
   3bbec:	add	r0, r0, r1, lsl #2
   3bbf0:	mov	r2, r0
   3bbf4:	ldr	r1, [r2, #4]!
   3bbf8:	str	r2, [sp, #24]
   3bbfc:	cmp	r1, #1
   3bc00:	blt	3bd98 <__assert_fail@plt+0x291dc>
   3bc04:	mov	r1, #1
   3bc08:	mvn	r2, r1, lsl r6
   3bc0c:	str	r2, [sp, #16]
   3bc10:	lsl	r1, r1, r6
   3bc14:	str	r1, [sp, #20]
   3bc18:	mov	sl, #0
   3bc1c:	cmp	r6, #31
   3bc20:	mov	r1, #0
   3bc24:	movwgt	r1, #1
   3bc28:	and	r2, r5, #2
   3bc2c:	str	r2, [sp, #8]
   3bc30:	orr	r1, r1, r2, lsr #1
   3bc34:	str	r1, [sp, #12]
   3bc38:	add	r0, r0, #8
   3bc3c:	str	r0, [sp, #28]
   3bc40:	and	r0, r5, #1
   3bc44:	str	r0, [sp, #4]
   3bc48:	ldr	r0, [sp, #28]
   3bc4c:	ldr	r0, [r0]
   3bc50:	ldr	r8, [r0, sl, lsl #2]
   3bc54:	ldr	r0, [r4]
   3bc58:	add	r1, r0, r8, lsl #3
   3bc5c:	ldrb	r1, [r1, #4]
   3bc60:	cmp	r1, #9
   3bc64:	beq	3bd50 <__assert_fail@plt+0x29194>
   3bc68:	cmp	r1, #8
   3bc6c:	beq	3bd6c <__assert_fail@plt+0x291b0>
   3bc70:	cmp	r1, #4
   3bc74:	bne	3bd84 <__assert_fail@plt+0x291c8>
   3bc78:	ldr	r0, [fp, #8]
   3bc7c:	cmn	r0, #1
   3bc80:	beq	3bd84 <__assert_fail@plt+0x291c8>
   3bc84:	ldr	r0, [r7, #116]	; 0x74
   3bc88:	ldr	r1, [fp, #8]
   3bc8c:	add	r1, r1, r1, lsl #1
   3bc90:	add	r0, r0, r1, lsl #3
   3bc94:	add	r9, r0, #16
   3bc98:	ldr	r0, [r9, #-16]
   3bc9c:	cmp	r0, r8
   3bca0:	bne	3bd3c <__assert_fail@plt+0x29180>
   3bca4:	cmp	r6, #31
   3bca8:	bgt	3bcbc <__assert_fail@plt+0x29100>
   3bcac:	ldr	r0, [r9]
   3bcb0:	ldr	r1, [sp, #20]
   3bcb4:	tst	r0, r1
   3bcb8:	beq	3bd3c <__assert_fail@plt+0x29180>
   3bcbc:	ldr	r0, [r4, #20]
   3bcc0:	add	r1, r8, r8, lsl #1
   3bcc4:	add	r0, r0, r1, lsl #2
   3bcc8:	ldr	r0, [r0, #8]
   3bccc:	ldr	r3, [r0]
   3bcd0:	ldr	r0, [sp, #32]
   3bcd4:	cmp	r3, r0
   3bcd8:	beq	3bda4 <__assert_fail@plt+0x291e8>
   3bcdc:	ldr	r0, [fp, #8]
   3bce0:	str	r0, [sp]
   3bce4:	mov	r0, r7
   3bce8:	mov	r1, r5
   3bcec:	mov	r2, r6
   3bcf0:	bl	3bbc4 <__assert_fail@plt+0x29008>
   3bcf4:	cmp	r0, #0
   3bcf8:	beq	3bd10 <__assert_fail@plt+0x29154>
   3bcfc:	cmn	r0, #1
   3bd00:	beq	3bdb8 <__assert_fail@plt+0x291fc>
   3bd04:	cmp	r6, #31
   3bd08:	ble	3bd2c <__assert_fail@plt+0x29170>
   3bd0c:	b	3bd3c <__assert_fail@plt+0x29180>
   3bd10:	ldr	r0, [sp, #12]
   3bd14:	cmp	r0, #0
   3bd18:	beq	3bd2c <__assert_fail@plt+0x29170>
   3bd1c:	ldr	r0, [sp, #8]
   3bd20:	cmp	r0, #0
   3bd24:	beq	3bd3c <__assert_fail@plt+0x29180>
   3bd28:	b	3bdb4 <__assert_fail@plt+0x291f8>
   3bd2c:	ldr	r0, [r9]
   3bd30:	ldr	r1, [sp, #16]
   3bd34:	and	r0, r0, r1
   3bd38:	str	r0, [r9]
   3bd3c:	ldrb	r0, [r9, #4]
   3bd40:	add	r9, r9, #24
   3bd44:	cmp	r0, #0
   3bd48:	bne	3bc98 <__assert_fail@plt+0x290dc>
   3bd4c:	b	3bd84 <__assert_fail@plt+0x291c8>
   3bd50:	ldr	r1, [sp, #8]
   3bd54:	cmp	r1, #0
   3bd58:	beq	3bd84 <__assert_fail@plt+0x291c8>
   3bd5c:	ldr	r0, [r0, r8, lsl #3]
   3bd60:	cmp	r0, r6
   3bd64:	bne	3bd84 <__assert_fail@plt+0x291c8>
   3bd68:	b	3bdb4 <__assert_fail@plt+0x291f8>
   3bd6c:	ldr	r1, [sp, #4]
   3bd70:	cmp	r1, #0
   3bd74:	beq	3bd84 <__assert_fail@plt+0x291c8>
   3bd78:	ldr	r0, [r0, r8, lsl #3]
   3bd7c:	cmp	r0, r6
   3bd80:	beq	3bdc0 <__assert_fail@plt+0x29204>
   3bd84:	ldr	r0, [sp, #24]
   3bd88:	ldr	r0, [r0]
   3bd8c:	add	sl, sl, #1
   3bd90:	cmp	sl, r0
   3bd94:	blt	3bc48 <__assert_fail@plt+0x2908c>
   3bd98:	ubfx	r0, r5, #1, #1
   3bd9c:	sub	sp, fp, #28
   3bda0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bda4:	ldr	r0, [sp, #4]
   3bda8:	rsb	r0, r0, #0
   3bdac:	sub	sp, fp, #28
   3bdb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bdb4:	mov	r0, #0
   3bdb8:	sub	sp, fp, #28
   3bdbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bdc0:	mvn	r0, #0
   3bdc4:	sub	sp, fp, #28
   3bdc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bdcc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3bdd0:	add	fp, sp, #24
   3bdd4:	mov	r7, r3
   3bdd8:	mov	r5, r2
   3bddc:	mov	r8, r1
   3bde0:	mov	r2, r0
   3bde4:	ldr	r6, [r0, #84]	; 0x54
   3bde8:	mov	r0, r6
   3bdec:	mov	r1, r5
   3bdf0:	bl	39bd0 <__assert_fail@plt+0x27014>
   3bdf4:	mov	r4, r0
   3bdf8:	cmp	r0, #1
   3bdfc:	blt	3be38 <__assert_fail@plt+0x2927c>
   3be00:	ldr	r1, [fp, #8]
   3be04:	add	r0, r4, r7
   3be08:	cmp	r0, r1
   3be0c:	bgt	3be38 <__assert_fail@plt+0x2927c>
   3be10:	ldr	r1, [r8]
   3be14:	ldr	r0, [r1, r0, lsl #2]
   3be18:	cmp	r0, #0
   3be1c:	beq	3be40 <__assert_fail@plt+0x29284>
   3be20:	ldr	r1, [r6, #12]
   3be24:	ldr	r1, [r1, r5, lsl #2]
   3be28:	add	r0, r0, #4
   3be2c:	bl	365f0 <__assert_fail@plt+0x23a34>
   3be30:	cmp	r0, #0
   3be34:	moveq	r4, #0
   3be38:	mov	r0, r4
   3be3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3be40:	mov	r4, #0
   3be44:	mov	r0, r4
   3be48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3be4c:	mov	r1, #16
   3be50:	mov	r2, #0
   3be54:	add	r3, r0, #12
   3be58:	str	r2, [r0]
   3be5c:	stmib	r0, {r1, r3}
   3be60:	bx	lr
   3be64:	push	{r4, sl, fp, lr}
   3be68:	add	fp, sp, #8
   3be6c:	mov	r4, r0
   3be70:	ldr	r0, [r0]
   3be74:	cmp	r0, r1
   3be78:	bcs	3beac <__assert_fail@plt+0x292f0>
   3be7c:	add	r2, r4, #12
   3be80:	mov	r0, r4
   3be84:	mov	r3, #8
   3be88:	bl	3dc94 <__assert_fail@plt+0x2b0d8>
   3be8c:	mov	r1, r0
   3be90:	mov	r0, #1
   3be94:	cmp	r1, #0
   3be98:	popne	{r4, sl, fp, pc}
   3be9c:	mov	r0, r4
   3bea0:	bl	3c3b4 <__assert_fail@plt+0x297f8>
   3bea4:	mov	r0, #0
   3bea8:	pop	{r4, sl, fp, pc}
   3beac:	str	r1, [r4]
   3beb0:	mov	r0, #1
   3beb4:	pop	{r4, sl, fp, pc}
   3beb8:	push	{r4, sl, fp, lr}
   3bebc:	add	fp, sp, #8
   3bec0:	mov	r4, r0
   3bec4:	bl	3c3dc <__assert_fail@plt+0x29820>
   3bec8:	mov	r0, r4
   3becc:	pop	{r4, sl, fp, lr}
   3bed0:	b	3be4c <__assert_fail@plt+0x29290>
   3bed4:	cmp	r0, #0
   3bed8:	bxeq	lr
   3bedc:	push	{r4, r5, r6, sl, fp, lr}
   3bee0:	add	fp, sp, #16
   3bee4:	mov	r4, r0
   3bee8:	ldr	r1, [r0]
   3beec:	ldr	r0, [r0, #8]
   3bef0:	cmp	r1, #1
   3bef4:	blt	3bf34 <__assert_fail@plt+0x29378>
   3bef8:	mov	r5, #0
   3befc:	mov	r6, #0
   3bf00:	add	r0, r0, r5
   3bf04:	ldr	r0, [r0, #20]
   3bf08:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3bf0c:	ldr	r0, [r4, #8]
   3bf10:	add	r0, r0, r5
   3bf14:	ldr	r0, [r0, #8]
   3bf18:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3bf1c:	add	r5, r5, #24
   3bf20:	add	r6, r6, #1
   3bf24:	ldr	r1, [r4]
   3bf28:	ldr	r0, [r4, #8]
   3bf2c:	cmp	r6, r1
   3bf30:	blt	3bf00 <__assert_fail@plt+0x29344>
   3bf34:	pop	{r4, r5, r6, sl, fp, lr}
   3bf38:	b	2ca78 <__assert_fail@plt+0x19ebc>
   3bf3c:	ldr	r0, [r0, #8]
   3bf40:	bx	lr
   3bf44:	push	{r4, r5, fp, lr}
   3bf48:	add	fp, sp, #8
   3bf4c:	ldr	r4, [r0]
   3bf50:	add	r0, r4, r3, lsl #3
   3bf54:	ldr	r0, [r0, #4]
   3bf58:	uxtb	r5, r0
   3bf5c:	ldr	lr, [fp, #12]
   3bf60:	ldr	ip, [fp, #8]
   3bf64:	cmp	r5, #9
   3bf68:	beq	3bf94 <__assert_fail@plt+0x293d8>
   3bf6c:	cmp	r5, #8
   3bf70:	bne	3bf90 <__assert_fail@plt+0x293d4>
   3bf74:	ldr	r0, [r4, r3, lsl #3]
   3bf78:	add	r0, r0, #1
   3bf7c:	cmp	r0, lr
   3bf80:	strlt	ip, [r1, r0, lsl #3]!
   3bf84:	mvnlt	r0, #0
   3bf88:	strlt	r0, [r1, #4]
   3bf8c:	poplt	{r4, r5, fp, pc}
   3bf90:	pop	{r4, r5, fp, pc}
   3bf94:	ldr	r3, [r4, r3, lsl #3]
   3bf98:	add	r3, r3, #1
   3bf9c:	cmp	r3, lr
   3bfa0:	popge	{r4, r5, fp, pc}
   3bfa4:	ldr	r4, [r1, r3, lsl #3]
   3bfa8:	cmp	r4, ip
   3bfac:	bge	3bfcc <__assert_fail@plt+0x29410>
   3bfb0:	add	r0, r1, r3, lsl #3
   3bfb4:	str	ip, [r0, #4]
   3bfb8:	lsl	r3, lr, #3
   3bfbc:	mov	r0, r2
   3bfc0:	mov	r2, r3
   3bfc4:	pop	{r4, r5, fp, lr}
   3bfc8:	b	125c8 <memcpy@plt>
   3bfcc:	tst	r0, #524288	; 0x80000
   3bfd0:	ldrne	r0, [r2, r3, lsl #3]
   3bfd4:	cmnne	r0, #1
   3bfd8:	bne	3bfe8 <__assert_fail@plt+0x2942c>
   3bfdc:	add	r0, r1, r3, lsl #3
   3bfe0:	str	ip, [r0, #4]
   3bfe4:	pop	{r4, r5, fp, pc}
   3bfe8:	lsl	r3, lr, #3
   3bfec:	mov	r0, r1
   3bff0:	mov	r1, r2
   3bff4:	b	3bfc0 <__assert_fail@plt+0x29404>
   3bff8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3bffc:	add	fp, sp, #24
   3c000:	mov	r4, r0
   3c004:	mvn	r0, #0
   3c008:	cmp	r4, #0
   3c00c:	beq	3c0ac <__assert_fail@plt+0x294f0>
   3c010:	mov	r5, r2
   3c014:	ldr	r2, [r4]
   3c018:	cmp	r2, #0
   3c01c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   3c020:	ldr	r9, [fp, #12]
   3c024:	ldr	r8, [fp, #8]
   3c028:	sub	r0, r2, #1
   3c02c:	str	r0, [r4]
   3c030:	ldr	r2, [r4, #8]
   3c034:	add	r6, r0, r0, lsl #1
   3c038:	ldr	r0, [r2, r6, lsl #3]!
   3c03c:	str	r0, [r1]
   3c040:	ldr	r1, [r2, #8]
   3c044:	lsl	r7, r5, #3
   3c048:	mov	r0, r3
   3c04c:	mov	r2, r7
   3c050:	bl	125c8 <memcpy@plt>
   3c054:	ldr	r0, [r4, #8]
   3c058:	add	r0, r0, r6, lsl #3
   3c05c:	ldr	r0, [r0, #8]
   3c060:	add	r1, r0, r5, lsl #3
   3c064:	mov	r0, r8
   3c068:	mov	r2, r7
   3c06c:	bl	125c8 <memcpy@plt>
   3c070:	ldr	r0, [r9, #8]
   3c074:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3c078:	ldr	r0, [r4, #8]
   3c07c:	add	r0, r0, r6, lsl #3
   3c080:	ldr	r0, [r0, #8]
   3c084:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3c088:	ldr	r0, [r4, #8]
   3c08c:	add	r0, r0, r6, lsl #3
   3c090:	vldr	d16, [r0, #12]
   3c094:	ldr	r0, [r0, #20]
   3c098:	str	r0, [r9, #8]
   3c09c:	vstr	d16, [r9]
   3c0a0:	ldr	r0, [r4, #8]
   3c0a4:	add	r0, r0, r6, lsl #3
   3c0a8:	ldr	r0, [r0, #4]
   3c0ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3c0b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c0b4:	add	fp, sp, #28
   3c0b8:	sub	sp, sp, #20
   3c0bc:	mov	r9, r3
   3c0c0:	mov	r5, r0
   3c0c4:	ldr	r4, [r0, #84]	; 0x54
   3c0c8:	ldr	r3, [r4]
   3c0cc:	ldr	sl, [fp, #12]
   3c0d0:	add	r0, r3, sl, lsl #3
   3c0d4:	ldr	r7, [r0, #4]
   3c0d8:	ldr	r0, [fp, #16]
   3c0dc:	ldr	r6, [fp, #8]
   3c0e0:	tst	r7, #8
   3c0e4:	bne	3c1a0 <__assert_fail@plt+0x295e4>
   3c0e8:	tst	r7, #1048576	; 0x100000
   3c0ec:	bne	3c240 <__assert_fail@plt+0x29684>
   3c0f0:	mov	ip, r1
   3c0f4:	mov	r9, r6
   3c0f8:	uxtb	r1, r7
   3c0fc:	cmp	r1, #4
   3c100:	bne	3c264 <__assert_fail@plt+0x296a8>
   3c104:	ldr	r0, [r3, sl, lsl #3]
   3c108:	add	r0, r0, #1
   3c10c:	mov	r7, #0
   3c110:	mov	r6, ip
   3c114:	cmp	r0, ip
   3c118:	mov	r3, r2
   3c11c:	movlt	r1, r3
   3c120:	ldrlt	r2, [r1, r0, lsl #3]!
   3c124:	ldrlt	r1, [r1, #4]
   3c128:	sublt	r7, r1, r2
   3c12c:	ldr	r1, [fp, #20]
   3c130:	cmp	r1, #0
   3c134:	beq	3c2e8 <__assert_fail@plt+0x2972c>
   3c138:	mvn	r8, #0
   3c13c:	cmp	r0, r6
   3c140:	bge	3c354 <__assert_fail@plt+0x29798>
   3c144:	ldr	r1, [r3, r0, lsl #3]
   3c148:	cmn	r1, #1
   3c14c:	beq	3c354 <__assert_fail@plt+0x29798>
   3c150:	add	r0, r3, r0, lsl #3
   3c154:	ldr	r0, [r0, #4]
   3c158:	cmn	r0, #1
   3c15c:	beq	3c354 <__assert_fail@plt+0x29798>
   3c160:	cmp	r7, #0
   3c164:	beq	3c360 <__assert_fail@plt+0x297a4>
   3c168:	mov	r0, r9
   3c16c:	ldr	r2, [r9]
   3c170:	ldr	r0, [r5, #28]
   3c174:	sub	r0, r0, r2
   3c178:	cmp	r0, r7
   3c17c:	blt	3c354 <__assert_fail@plt+0x29798>
   3c180:	ldr	r3, [r5, #4]
   3c184:	add	r0, r3, r1
   3c188:	add	r1, r3, r2
   3c18c:	mov	r2, r7
   3c190:	bl	12628 <memcmp@plt>
   3c194:	cmp	r0, #0
   3c198:	bne	3c354 <__assert_fail@plt+0x29798>
   3c19c:	b	3c2f0 <__assert_fail@plt+0x29734>
   3c1a0:	str	r1, [sp, #12]
   3c1a4:	str	r2, [sp, #16]
   3c1a8:	ldr	r2, [r6]
   3c1ac:	ldr	r1, [r5, #100]	; 0x64
   3c1b0:	ldr	r5, [r1, r2, lsl #2]
   3c1b4:	ldr	r4, [r4, #20]
   3c1b8:	mov	r1, sl
   3c1bc:	bl	365f0 <__assert_fail@plt+0x23a34>
   3c1c0:	cmp	r0, #0
   3c1c4:	bne	3c1e0 <__assert_fail@plt+0x29624>
   3c1c8:	ldr	r0, [fp, #16]
   3c1cc:	mov	r1, sl
   3c1d0:	bl	3638c <__assert_fail@plt+0x237d0>
   3c1d4:	mvn	r8, #1
   3c1d8:	cmp	r0, #0
   3c1dc:	beq	3c354 <__assert_fail@plt+0x29798>
   3c1e0:	add	r0, sl, sl, lsl #1
   3c1e4:	add	r1, r4, r0, lsl #2
   3c1e8:	mov	r0, r1
   3c1ec:	ldr	r2, [r0, #4]!
   3c1f0:	cmp	r2, #1
   3c1f4:	blt	3c28c <__assert_fail@plt+0x296d0>
   3c1f8:	add	sl, r5, #4
   3c1fc:	ldr	r7, [r1, #8]
   3c200:	ldr	r6, [r0]
   3c204:	mov	r5, #0
   3c208:	mvn	r8, #0
   3c20c:	ldr	r4, [r7, r5, lsl #2]
   3c210:	mov	r0, sl
   3c214:	mov	r1, r4
   3c218:	bl	365f0 <__assert_fail@plt+0x23a34>
   3c21c:	cmp	r0, #0
   3c220:	beq	3c230 <__assert_fail@plt+0x29674>
   3c224:	cmn	r8, #1
   3c228:	bne	3c294 <__assert_fail@plt+0x296d8>
   3c22c:	mov	r8, r4
   3c230:	add	r5, r5, #1
   3c234:	cmp	r5, r6
   3c238:	blt	3c20c <__assert_fail@plt+0x29650>
   3c23c:	b	3c354 <__assert_fail@plt+0x29798>
   3c240:	mov	r9, r6
   3c244:	ldr	r3, [r6]
   3c248:	mov	r0, r4
   3c24c:	mov	r1, sl
   3c250:	mov	r2, r5
   3c254:	bl	39bd0 <__assert_fail@plt+0x27014>
   3c258:	mov	r7, r0
   3c25c:	cmp	r0, #0
   3c260:	bne	3c2f0 <__assert_fail@plt+0x29734>
   3c264:	ldr	r0, [r4]
   3c268:	add	r1, r0, sl, lsl #3
   3c26c:	ldr	r2, [r9]
   3c270:	mov	r0, r5
   3c274:	bl	39ea4 <__assert_fail@plt+0x272e8>
   3c278:	mvn	r8, #0
   3c27c:	mov	r7, #1
   3c280:	cmp	r0, #0
   3c284:	bne	3c2f0 <__assert_fail@plt+0x29734>
   3c288:	b	3c354 <__assert_fail@plt+0x29798>
   3c28c:	mvn	r8, #0
   3c290:	b	3c354 <__assert_fail@plt+0x29798>
   3c294:	ldr	r5, [fp, #16]
   3c298:	mov	r0, r5
   3c29c:	mov	r1, r8
   3c2a0:	bl	365f0 <__assert_fail@plt+0x23a34>
   3c2a4:	cmp	r0, #0
   3c2a8:	bne	3c350 <__assert_fail@plt+0x29794>
   3c2ac:	ldr	r0, [fp, #20]
   3c2b0:	cmp	r0, #0
   3c2b4:	beq	3c354 <__assert_fail@plt+0x29798>
   3c2b8:	ldr	r1, [fp, #8]
   3c2bc:	ldr	r1, [r1]
   3c2c0:	ldr	r2, [sp, #16]
   3c2c4:	stm	sp, {r2, r9}
   3c2c8:	str	r5, [sp, #8]
   3c2cc:	mov	r2, r4
   3c2d0:	ldr	r3, [sp, #12]
   3c2d4:	bl	3c3f4 <__assert_fail@plt+0x29838>
   3c2d8:	mvn	r4, #1
   3c2dc:	cmp	r0, #0
   3c2e0:	movne	r8, r4
   3c2e4:	b	3c354 <__assert_fail@plt+0x29798>
   3c2e8:	cmp	r7, #0
   3c2ec:	beq	3c360 <__assert_fail@plt+0x297a4>
   3c2f0:	ldr	r0, [r4, #12]
   3c2f4:	ldr	r4, [r0, sl, lsl #2]
   3c2f8:	ldr	r0, [r9]
   3c2fc:	add	r0, r0, r7
   3c300:	str	r0, [r9]
   3c304:	ldr	r1, [fp, #20]
   3c308:	cmp	r1, #0
   3c30c:	beq	3c344 <__assert_fail@plt+0x29788>
   3c310:	ldr	r1, [r5, #92]	; 0x5c
   3c314:	mvn	r8, #0
   3c318:	cmp	r0, r1
   3c31c:	bgt	3c354 <__assert_fail@plt+0x29798>
   3c320:	ldr	r1, [r5, #100]	; 0x64
   3c324:	ldr	r0, [r1, r0, lsl #2]
   3c328:	cmp	r0, #0
   3c32c:	beq	3c354 <__assert_fail@plt+0x29798>
   3c330:	add	r0, r0, #4
   3c334:	mov	r1, r4
   3c338:	bl	365f0 <__assert_fail@plt+0x23a34>
   3c33c:	cmp	r0, #0
   3c340:	beq	3c354 <__assert_fail@plt+0x29798>
   3c344:	mov	r0, #0
   3c348:	ldr	r1, [fp, #16]
   3c34c:	str	r0, [r1, #4]
   3c350:	mov	r8, r4
   3c354:	mov	r0, r8
   3c358:	sub	sp, fp, #28
   3c35c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c360:	ldr	r0, [fp, #16]
   3c364:	mov	r1, sl
   3c368:	bl	3638c <__assert_fail@plt+0x237d0>
   3c36c:	cmp	r0, #0
   3c370:	beq	3c3ac <__assert_fail@plt+0x297f0>
   3c374:	ldr	r0, [r4, #20]
   3c378:	add	r1, sl, sl, lsl #1
   3c37c:	add	r0, r0, r1, lsl #2
   3c380:	ldr	r0, [r0, #8]
   3c384:	ldr	r8, [r0]
   3c388:	ldr	r0, [r9]
   3c38c:	ldr	r1, [r5, #100]	; 0x64
   3c390:	ldr	r0, [r1, r0, lsl #2]
   3c394:	add	r0, r0, #4
   3c398:	mov	r1, r8
   3c39c:	bl	365f0 <__assert_fail@plt+0x23a34>
   3c3a0:	cmp	r0, #0
   3c3a4:	bne	3c354 <__assert_fail@plt+0x29798>
   3c3a8:	b	3c264 <__assert_fail@plt+0x296a8>
   3c3ac:	mvn	r8, #1
   3c3b0:	b	3c354 <__assert_fail@plt+0x29798>
   3c3b4:	push	{r4, sl, fp, lr}
   3c3b8:	add	fp, sp, #8
   3c3bc:	mov	r4, r0
   3c3c0:	bl	3c3dc <__assert_fail@plt+0x29820>
   3c3c4:	mov	r0, #0
   3c3c8:	add	r1, r4, #12
   3c3cc:	mvn	r2, #0
   3c3d0:	stm	r4, {r0, r2}
   3c3d4:	str	r1, [r4, #8]
   3c3d8:	pop	{r4, sl, fp, pc}
   3c3dc:	mov	r1, r0
   3c3e0:	ldr	r0, [r0, #8]
   3c3e4:	add	r1, r1, #12
   3c3e8:	cmp	r0, r1
   3c3ec:	bxeq	lr
   3c3f0:	b	2ca78 <__assert_fail@plt+0x19ebc>
   3c3f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c3f8:	add	fp, sp, #28
   3c3fc:	sub	sp, sp, #12
   3c400:	mov	r6, r3
   3c404:	mov	r9, r2
   3c408:	mov	r5, r1
   3c40c:	mov	r4, r0
   3c410:	ldr	r7, [r0]
   3c414:	ldr	r1, [r0, #4]
   3c418:	add	r0, r7, #1
   3c41c:	str	r0, [r4]
   3c420:	ldr	r2, [fp, #16]
   3c424:	str	r2, [sp, #8]
   3c428:	ldr	r2, [fp, #12]
   3c42c:	str	r2, [sp, #4]
   3c430:	ldr	sl, [fp, #8]
   3c434:	cmp	r0, r1
   3c438:	bne	3c464 <__assert_fail@plt+0x298a8>
   3c43c:	ldr	r0, [r4, #8]
   3c440:	add	r1, r1, r1, lsl #1
   3c444:	lsl	r1, r1, #4
   3c448:	bl	2f804 <__assert_fail@plt+0x1cc48>
   3c44c:	cmp	r0, #0
   3c450:	beq	3c4d8 <__assert_fail@plt+0x2991c>
   3c454:	str	r0, [r4, #8]
   3c458:	ldr	r0, [r4, #4]
   3c45c:	lsl	r0, r0, #1
   3c460:	str	r0, [r4, #4]
   3c464:	ldr	r0, [r4, #8]
   3c468:	add	r8, r7, r7, lsl #1
   3c46c:	str	r5, [r0, r8, lsl #3]!
   3c470:	str	r9, [r0, #4]
   3c474:	lsl	r0, r6, #4
   3c478:	bl	2ed04 <__assert_fail@plt+0x1c148>
   3c47c:	ldr	r1, [r4, #8]
   3c480:	add	r1, r1, r8, lsl #3
   3c484:	str	r0, [r1, #8]
   3c488:	cmp	r0, #0
   3c48c:	beq	3c4d8 <__assert_fail@plt+0x2991c>
   3c490:	lsl	r5, r6, #3
   3c494:	mov	r1, sl
   3c498:	mov	r2, r5
   3c49c:	bl	125c8 <memcpy@plt>
   3c4a0:	ldr	r0, [r4, #8]
   3c4a4:	add	r0, r0, r8, lsl #3
   3c4a8:	ldr	r0, [r0, #8]
   3c4ac:	add	r0, r0, r6, lsl #3
   3c4b0:	ldr	r1, [sp, #4]
   3c4b4:	mov	r2, r5
   3c4b8:	bl	125c8 <memcpy@plt>
   3c4bc:	ldr	r0, [r4, #8]
   3c4c0:	add	r0, r0, r8, lsl #3
   3c4c4:	add	r0, r0, #12
   3c4c8:	ldr	r1, [sp, #8]
   3c4cc:	sub	sp, fp, #28
   3c4d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c4d4:	b	36574 <__assert_fail@plt+0x239b8>
   3c4d8:	mov	r0, #12
   3c4dc:	sub	sp, fp, #28
   3c4e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c4e4:	push	{r4, r5, r6, sl, fp, lr}
   3c4e8:	add	fp, sp, #16
   3c4ec:	mov	r4, r0
   3c4f0:	ldrb	r3, [r0]
   3c4f4:	cmp	r3, #0
   3c4f8:	beq	3c574 <__assert_fail@plt+0x299b8>
   3c4fc:	mov	r2, #1
   3c500:	mov	r0, #0
   3c504:	ldrb	r6, [r1, r0]
   3c508:	cmp	r6, #0
   3c50c:	uxtbne	r3, r3
   3c510:	subne	r3, r3, r6
   3c514:	clzne	r3, r3
   3c518:	lsrne	r3, r3, #5
   3c51c:	andne	r2, r2, r3
   3c520:	addne	r3, r4, r0
   3c524:	ldrbne	r3, [r3, #1]
   3c528:	addne	r0, r0, #1
   3c52c:	cmpne	r3, #0
   3c530:	bne	3c504 <__assert_fail@plt+0x29948>
   3c534:	add	r6, r1, r0
   3c538:	ldrb	r3, [r6]
   3c53c:	cmp	r3, #0
   3c540:	mov	r0, r4
   3c544:	movwne	r0, #0
   3c548:	tst	r2, #1
   3c54c:	cmpeq	r3, #0
   3c550:	bne	3c570 <__assert_fail@plt+0x299b4>
   3c554:	sub	r5, r6, r1
   3c558:	ldrb	r1, [r1]
   3c55c:	add	r0, r4, #1
   3c560:	bl	12898 <strchr@plt>
   3c564:	cmp	r5, #1
   3c568:	cmpne	r0, #0
   3c56c:	bne	3c588 <__assert_fail@plt+0x299cc>
   3c570:	pop	{r4, r5, r6, sl, fp, pc}
   3c574:	ldrb	r0, [r1]
   3c578:	cmp	r0, #0
   3c57c:	movne	r4, #0
   3c580:	mov	r0, r4
   3c584:	pop	{r4, r5, r6, sl, fp, pc}
   3c588:	add	r1, r4, r5
   3c58c:	subs	r1, r1, r0
   3c590:	movwcc	r1, #1
   3c594:	sub	r2, r6, r5
   3c598:	mov	r3, r5
   3c59c:	cmp	r5, #31
   3c5a0:	bhi	3c5ac <__assert_fail@plt+0x299f0>
   3c5a4:	pop	{r4, r5, r6, sl, fp, lr}
   3c5a8:	b	3c5b4 <__assert_fail@plt+0x299f8>
   3c5ac:	pop	{r4, r5, r6, sl, fp, lr}
   3c5b0:	b	3c858 <__assert_fail@plt+0x29c9c>
   3c5b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c5b8:	add	fp, sp, #28
   3c5bc:	sub	sp, sp, #36	; 0x24
   3c5c0:	mov	r4, r3
   3c5c4:	mov	r7, r2
   3c5c8:	mov	r8, r1
   3c5cc:	mov	r6, r0
   3c5d0:	add	r2, sp, #32
   3c5d4:	mov	r0, r7
   3c5d8:	mov	r1, r3
   3c5dc:	bl	3cba4 <__assert_fail@plt+0x29fe8>
   3c5e0:	mov	r5, r0
   3c5e4:	ldr	r9, [sp, #32]
   3c5e8:	add	r1, r7, r9
   3c5ec:	mov	r0, r7
   3c5f0:	mov	r2, r5
   3c5f4:	bl	12628 <memcmp@plt>
   3c5f8:	cmp	r0, #0
   3c5fc:	str	r6, [sp, #24]
   3c600:	str	r5, [sp, #20]
   3c604:	beq	3c70c <__assert_fail@plt+0x29b50>
   3c608:	sub	r0, r4, r5
   3c60c:	cmp	r5, r0
   3c610:	movcs	r0, r5
   3c614:	add	r9, r0, #1
   3c618:	str	r9, [sp, #32]
   3c61c:	add	r0, r6, r8
   3c620:	sub	r2, r4, r8
   3c624:	mov	r1, #0
   3c628:	str	r1, [sp, #28]
   3c62c:	mov	r1, #0
   3c630:	bl	1297c <memchr@plt>
   3c634:	cmp	r0, #0
   3c638:	bne	3c84c <__assert_fail@plt+0x29c90>
   3c63c:	cmp	r4, #0
   3c640:	ldr	r1, [sp, #24]
   3c644:	ldr	r2, [sp, #20]
   3c648:	beq	3c84c <__assert_fail@plt+0x29c90>
   3c64c:	add	r8, r7, r2
   3c650:	sub	r7, r7, #1
   3c654:	sub	r0, r1, #1
   3c658:	str	r0, [sp, #16]
   3c65c:	mov	sl, #0
   3c660:	mov	ip, r4
   3c664:	cmp	r2, r4
   3c668:	bcs	3c698 <__assert_fail@plt+0x29adc>
   3c66c:	add	r0, r1, sl
   3c670:	add	r5, r0, r2
   3c674:	mov	r0, #0
   3c678:	ldrb	r3, [r5, r0]
   3c67c:	ldrb	r6, [r8, r0]
   3c680:	cmp	r6, r3
   3c684:	bne	3c6c8 <__assert_fail@plt+0x29b0c>
   3c688:	add	r0, r0, #1
   3c68c:	add	r3, r2, r0
   3c690:	cmp	r3, r4
   3c694:	bcc	3c678 <__assert_fail@plt+0x29abc>
   3c698:	ldr	r0, [sp, #16]
   3c69c:	add	r0, r0, sl
   3c6a0:	cmp	r2, #0
   3c6a4:	beq	3c834 <__assert_fail@plt+0x29c78>
   3c6a8:	sub	r3, r2, #1
   3c6ac:	ldrb	r6, [r0, r2]
   3c6b0:	ldrb	r2, [r7, r2]
   3c6b4:	cmp	r2, r6
   3c6b8:	mov	r2, r3
   3c6bc:	beq	3c6a0 <__assert_fail@plt+0x29ae4>
   3c6c0:	mov	r2, r9
   3c6c4:	b	3c6cc <__assert_fail@plt+0x29b10>
   3c6c8:	add	r2, r0, #1
   3c6cc:	add	r0, r1, ip
   3c6d0:	add	sl, r2, sl
   3c6d4:	add	r6, sl, r4
   3c6d8:	sub	r2, r6, ip
   3c6dc:	mov	r1, #0
   3c6e0:	str	r1, [sp, #28]
   3c6e4:	mov	r1, #0
   3c6e8:	bl	1297c <memchr@plt>
   3c6ec:	cmp	r0, #0
   3c6f0:	bne	3c84c <__assert_fail@plt+0x29c90>
   3c6f4:	cmp	r6, #0
   3c6f8:	mov	ip, r6
   3c6fc:	ldr	r1, [sp, #24]
   3c700:	ldr	r2, [sp, #20]
   3c704:	bne	3c664 <__assert_fail@plt+0x29aa8>
   3c708:	b	3c84c <__assert_fail@plt+0x29c90>
   3c70c:	add	r0, r6, r8
   3c710:	sub	r2, r4, r8
   3c714:	mov	r1, #0
   3c718:	bl	1297c <memchr@plt>
   3c71c:	cmp	r4, #0
   3c720:	beq	3c83c <__assert_fail@plt+0x29c80>
   3c724:	mov	r1, #0
   3c728:	str	r1, [sp, #28]
   3c72c:	str	r9, [sp, #16]
   3c730:	cmp	r0, #0
   3c734:	ldr	ip, [sp, #24]
   3c738:	ldr	r5, [sp, #20]
   3c73c:	bne	3c84c <__assert_fail@plt+0x29c90>
   3c740:	ldr	r0, [sp, #16]
   3c744:	sub	r0, r4, r0
   3c748:	str	r0, [sp, #12]
   3c74c:	sub	sl, r7, #1
   3c750:	sub	r0, ip, #1
   3c754:	str	r0, [sp, #8]
   3c758:	rsb	r0, r5, #0
   3c75c:	str	r0, [sp, #4]
   3c760:	mov	r8, #0
   3c764:	mov	r1, r4
   3c768:	mov	r9, #0
   3c76c:	cmp	r5, r8
   3c770:	mov	r0, r5
   3c774:	movcc	r0, r8
   3c778:	cmp	r0, r4
   3c77c:	bcs	3c7a0 <__assert_fail@plt+0x29be4>
   3c780:	add	r2, ip, r9
   3c784:	ldrb	r3, [r2, r0]
   3c788:	ldrb	r6, [r7, r0]
   3c78c:	cmp	r6, r3
   3c790:	bne	3c7e4 <__assert_fail@plt+0x29c28>
   3c794:	add	r0, r0, #1
   3c798:	cmp	r0, r4
   3c79c:	bcc	3c784 <__assert_fail@plt+0x29bc8>
   3c7a0:	ldr	r0, [sp, #8]
   3c7a4:	add	r0, r0, r9
   3c7a8:	mov	r3, r5
   3c7ac:	mov	r2, r3
   3c7b0:	cmp	r8, r3
   3c7b4:	bcs	3c7cc <__assert_fail@plt+0x29c10>
   3c7b8:	sub	r3, r2, #1
   3c7bc:	ldrb	r6, [r0, r2]
   3c7c0:	ldrb	r5, [sl, r2]
   3c7c4:	cmp	r5, r6
   3c7c8:	beq	3c7ac <__assert_fail@plt+0x29bf0>
   3c7cc:	add	r0, r8, #1
   3c7d0:	cmp	r2, r0
   3c7d4:	ldr	r2, [sp, #16]
   3c7d8:	ldr	r8, [sp, #12]
   3c7dc:	bcs	3c7f4 <__assert_fail@plt+0x29c38>
   3c7e0:	b	3c844 <__assert_fail@plt+0x29c88>
   3c7e4:	ldr	r2, [sp, #4]
   3c7e8:	add	r0, r2, r0
   3c7ec:	add	r2, r0, #1
   3c7f0:	mov	r8, #0
   3c7f4:	add	r0, ip, r1
   3c7f8:	add	r9, r2, r9
   3c7fc:	add	r6, r9, r4
   3c800:	sub	r2, r6, r1
   3c804:	mov	r1, #0
   3c808:	bl	1297c <memchr@plt>
   3c80c:	cmp	r6, #0
   3c810:	beq	3c83c <__assert_fail@plt+0x29c80>
   3c814:	mov	r1, #0
   3c818:	str	r1, [sp, #28]
   3c81c:	cmp	r0, #0
   3c820:	mov	r1, r6
   3c824:	ldr	ip, [sp, #24]
   3c828:	ldr	r5, [sp, #20]
   3c82c:	beq	3c76c <__assert_fail@plt+0x29bb0>
   3c830:	b	3c84c <__assert_fail@plt+0x29c90>
   3c834:	add	r0, r1, sl
   3c838:	b	3c848 <__assert_fail@plt+0x29c8c>
   3c83c:	mov	r0, #0
   3c840:	b	3c848 <__assert_fail@plt+0x29c8c>
   3c844:	add	r0, ip, r9
   3c848:	str	r0, [sp, #28]
   3c84c:	ldr	r0, [sp, #28]
   3c850:	sub	sp, fp, #28
   3c854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c858:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c85c:	add	fp, sp, #28
   3c860:	sub	sp, sp, #44	; 0x2c
   3c864:	sub	sp, sp, #1024	; 0x400
   3c868:	mov	r4, r3
   3c86c:	mov	r3, r2
   3c870:	mov	r8, r1
   3c874:	str	r0, [sp, #32]
   3c878:	sub	r2, fp, #36	; 0x24
   3c87c:	str	r3, [sp, #20]
   3c880:	mov	r0, r3
   3c884:	mov	r1, r4
   3c888:	bl	3cba4 <__assert_fail@plt+0x29fe8>
   3c88c:	mov	r3, r0
   3c890:	mov	r0, #0
   3c894:	add	r6, sp, #36	; 0x24
   3c898:	str	r4, [r6, r0, lsl #2]
   3c89c:	add	r0, r0, #1
   3c8a0:	cmp	r0, #256	; 0x100
   3c8a4:	bne	3c898 <__assert_fail@plt+0x29cdc>
   3c8a8:	cmp	r4, #0
   3c8ac:	ldr	r0, [sp, #20]
   3c8b0:	beq	3c8d0 <__assert_fail@plt+0x29d14>
   3c8b4:	sub	r7, r4, #1
   3c8b8:	mov	r1, r0
   3c8bc:	ldrb	r2, [r1], #1
   3c8c0:	str	r7, [r6, r2, lsl #2]
   3c8c4:	sub	r7, r7, #1
   3c8c8:	cmn	r7, #1
   3c8cc:	bne	3c8bc <__assert_fail@plt+0x29d00>
   3c8d0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   3c8d4:	add	r1, r0, r7
   3c8d8:	mov	r2, r3
   3c8dc:	mov	r5, r3
   3c8e0:	bl	12628 <memcmp@plt>
   3c8e4:	cmp	r0, #0
   3c8e8:	str	r5, [sp, #28]
   3c8ec:	str	r4, [sp, #24]
   3c8f0:	beq	3ca18 <__assert_fail@plt+0x29e5c>
   3c8f4:	sub	r0, r4, r5
   3c8f8:	cmp	r5, r0
   3c8fc:	movcs	r0, r5
   3c900:	add	r0, r0, #1
   3c904:	str	r0, [sp, #16]
   3c908:	str	r0, [fp, #-36]	; 0xffffffdc
   3c90c:	ldr	r0, [sp, #32]
   3c910:	add	r0, r0, r8
   3c914:	sub	r2, r4, r8
   3c918:	mov	r5, #0
   3c91c:	mov	r1, #0
   3c920:	bl	1297c <memchr@plt>
   3c924:	cmp	r4, #0
   3c928:	beq	3cb8c <__assert_fail@plt+0x29fd0>
   3c92c:	cmp	r0, #0
   3c930:	ldr	r3, [sp, #28]
   3c934:	ldr	r0, [sp, #20]
   3c938:	bne	3cb8c <__assert_fail@plt+0x29fd0>
   3c93c:	add	sl, r0, r3
   3c940:	sub	r9, r0, #1
   3c944:	ldr	r0, [sp, #32]
   3c948:	sub	r0, r0, #1
   3c94c:	str	r0, [sp, #20]
   3c950:	ldr	r1, [sp, #24]
   3c954:	sub	r8, r1, #1
   3c958:	mov	r4, #0
   3c95c:	ldr	r0, [sp, #32]
   3c960:	add	r0, r0, r1
   3c964:	ldrb	r2, [r0, #-1]
   3c968:	ldr	r2, [r6, r2, lsl #2]
   3c96c:	cmp	r2, #0
   3c970:	beq	3c9b0 <__assert_fail@plt+0x29df4>
   3c974:	add	r4, r2, r4
   3c978:	ldr	r2, [sp, #24]
   3c97c:	add	r6, r4, r2
   3c980:	sub	r2, r6, r1
   3c984:	mov	r5, #0
   3c988:	mov	r1, #0
   3c98c:	bl	1297c <memchr@plt>
   3c990:	cmp	r6, #0
   3c994:	beq	3cb8c <__assert_fail@plt+0x29fd0>
   3c998:	cmp	r0, #0
   3c99c:	mov	r1, r6
   3c9a0:	ldr	r3, [sp, #28]
   3c9a4:	add	r6, sp, #36	; 0x24
   3c9a8:	beq	3c95c <__assert_fail@plt+0x29da0>
   3c9ac:	b	3cb8c <__assert_fail@plt+0x29fd0>
   3c9b0:	cmp	r3, r8
   3c9b4:	bcs	3c9e8 <__assert_fail@plt+0x29e2c>
   3c9b8:	ldr	r2, [sp, #32]
   3c9bc:	add	r2, r2, r4
   3c9c0:	add	r7, r2, r3
   3c9c4:	mov	r2, #0
   3c9c8:	ldrb	r6, [r7, r2]
   3c9cc:	ldrb	r5, [sl, r2]
   3c9d0:	add	r2, r2, #1
   3c9d4:	cmp	r5, r6
   3c9d8:	bne	3c974 <__assert_fail@plt+0x29db8>
   3c9dc:	add	r6, r3, r2
   3c9e0:	cmp	r6, r8
   3c9e4:	bcc	3c9c8 <__assert_fail@plt+0x29e0c>
   3c9e8:	ldr	r2, [sp, #20]
   3c9ec:	add	r2, r2, r4
   3c9f0:	cmp	r3, #0
   3c9f4:	beq	3cb84 <__assert_fail@plt+0x29fc8>
   3c9f8:	sub	r6, r3, #1
   3c9fc:	ldrb	r5, [r2, r3]
   3ca00:	ldrb	r3, [r9, r3]
   3ca04:	cmp	r3, r5
   3ca08:	mov	r3, r6
   3ca0c:	beq	3c9f0 <__assert_fail@plt+0x29e34>
   3ca10:	ldr	r2, [sp, #16]
   3ca14:	b	3c974 <__assert_fail@plt+0x29db8>
   3ca18:	ldr	r0, [sp, #32]
   3ca1c:	add	r0, r0, r8
   3ca20:	sub	r2, r4, r8
   3ca24:	mov	r5, #0
   3ca28:	mov	r1, #0
   3ca2c:	bl	1297c <memchr@plt>
   3ca30:	cmp	r4, #0
   3ca34:	beq	3cb8c <__assert_fail@plt+0x29fd0>
   3ca38:	str	r7, [sp, #16]
   3ca3c:	cmp	r0, #0
   3ca40:	ldr	r4, [sp, #28]
   3ca44:	ldr	r1, [sp, #20]
   3ca48:	bne	3cb8c <__assert_fail@plt+0x29fd0>
   3ca4c:	ldr	r0, [sp, #16]
   3ca50:	ldr	ip, [sp, #24]
   3ca54:	sub	r0, ip, r0
   3ca58:	str	r0, [sp, #12]
   3ca5c:	sub	r8, r1, #1
   3ca60:	ldr	r0, [sp, #32]
   3ca64:	sub	r0, r0, #1
   3ca68:	str	r0, [sp, #8]
   3ca6c:	rsb	r0, r4, #0
   3ca70:	str	r0, [sp, #4]
   3ca74:	sub	r7, ip, #1
   3ca78:	mov	sl, #0
   3ca7c:	mov	r9, #0
   3ca80:	ldr	r0, [sp, #32]
   3ca84:	add	r0, r0, ip
   3ca88:	ldrb	r2, [r0, #-1]
   3ca8c:	ldr	r3, [r6, r2, lsl #2]
   3ca90:	cmp	r3, #0
   3ca94:	beq	3cabc <__assert_fail@plt+0x29f00>
   3ca98:	ldr	r1, [sp, #16]
   3ca9c:	cmp	r3, r1
   3caa0:	mov	r2, r3
   3caa4:	ldr	r1, [sp, #12]
   3caa8:	movcc	r2, r1
   3caac:	cmp	sl, #0
   3cab0:	moveq	r2, r3
   3cab4:	mov	sl, #0
   3cab8:	b	3cb34 <__assert_fail@plt+0x29f78>
   3cabc:	cmp	r4, sl
   3cac0:	mov	r2, r4
   3cac4:	movcc	r2, sl
   3cac8:	cmp	r2, r7
   3cacc:	bcs	3caf4 <__assert_fail@plt+0x29f38>
   3cad0:	ldr	r3, [sp, #32]
   3cad4:	add	r3, r3, r9
   3cad8:	ldrb	r6, [r3, r2]
   3cadc:	ldrb	r5, [r1, r2]
   3cae0:	cmp	r5, r6
   3cae4:	bne	3cb74 <__assert_fail@plt+0x29fb8>
   3cae8:	add	r2, r2, #1
   3caec:	cmp	r2, r7
   3caf0:	bcc	3cad8 <__assert_fail@plt+0x29f1c>
   3caf4:	ldr	r1, [sp, #8]
   3caf8:	add	r2, r1, r9
   3cafc:	mov	r6, r4
   3cb00:	mov	r3, r6
   3cb04:	cmp	sl, r6
   3cb08:	bcs	3cb20 <__assert_fail@plt+0x29f64>
   3cb0c:	sub	r6, r3, #1
   3cb10:	ldrb	r5, [r2, r3]
   3cb14:	ldrb	r4, [r8, r3]
   3cb18:	cmp	r4, r5
   3cb1c:	beq	3cb00 <__assert_fail@plt+0x29f44>
   3cb20:	add	r2, sl, #1
   3cb24:	cmp	r3, r2
   3cb28:	ldr	r2, [sp, #16]
   3cb2c:	ldr	sl, [sp, #12]
   3cb30:	bcc	3cb98 <__assert_fail@plt+0x29fdc>
   3cb34:	add	r9, r2, r9
   3cb38:	ldr	r1, [sp, #24]
   3cb3c:	add	r6, r9, r1
   3cb40:	sub	r2, r6, ip
   3cb44:	mov	r5, #0
   3cb48:	mov	r1, #0
   3cb4c:	bl	1297c <memchr@plt>
   3cb50:	cmp	r6, #0
   3cb54:	beq	3cb8c <__assert_fail@plt+0x29fd0>
   3cb58:	cmp	r0, #0
   3cb5c:	mov	ip, r6
   3cb60:	ldr	r4, [sp, #28]
   3cb64:	add	r6, sp, #36	; 0x24
   3cb68:	ldr	r1, [sp, #20]
   3cb6c:	beq	3ca80 <__assert_fail@plt+0x29ec4>
   3cb70:	b	3cb8c <__assert_fail@plt+0x29fd0>
   3cb74:	ldr	r1, [sp, #4]
   3cb78:	add	r2, r1, r2
   3cb7c:	add	r2, r2, #1
   3cb80:	b	3cab4 <__assert_fail@plt+0x29ef8>
   3cb84:	ldr	r0, [sp, #32]
   3cb88:	add	r5, r0, r4
   3cb8c:	mov	r0, r5
   3cb90:	sub	sp, fp, #28
   3cb94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cb98:	ldr	r0, [sp, #32]
   3cb9c:	add	r5, r0, r9
   3cba0:	b	3cb8c <__assert_fail@plt+0x29fd0>
   3cba4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3cba8:	add	fp, sp, #24
   3cbac:	cmp	r1, #3
   3cbb0:	movcc	r0, #1
   3cbb4:	strcc	r0, [r2]
   3cbb8:	subcc	r0, r1, #1
   3cbbc:	popcc	{r4, r5, r6, r7, r8, sl, fp, pc}
   3cbc0:	mvn	r8, #0
   3cbc4:	mov	r6, #0
   3cbc8:	mov	r3, #1
   3cbcc:	mov	ip, #1
   3cbd0:	mov	r5, #1
   3cbd4:	ldrb	r7, [r0, r3]
   3cbd8:	add	r4, r5, r8
   3cbdc:	ldrb	r4, [r0, r4]
   3cbe0:	cmp	r7, r4
   3cbe4:	bcs	3cbf8 <__assert_fail@plt+0x2a03c>
   3cbe8:	sub	ip, r3, r8
   3cbec:	mov	r5, #1
   3cbf0:	mov	r6, r3
   3cbf4:	b	3cc2c <__assert_fail@plt+0x2a070>
   3cbf8:	bne	3cc10 <__assert_fail@plt+0x2a054>
   3cbfc:	cmp	r5, ip
   3cc00:	bne	3cc28 <__assert_fail@plt+0x2a06c>
   3cc04:	add	r6, ip, r6
   3cc08:	mov	r5, #1
   3cc0c:	b	3cc2c <__assert_fail@plt+0x2a070>
   3cc10:	add	r3, r6, #1
   3cc14:	mov	r5, #1
   3cc18:	mov	r8, r6
   3cc1c:	mov	r6, r3
   3cc20:	mov	ip, #1
   3cc24:	b	3cc2c <__assert_fail@plt+0x2a070>
   3cc28:	add	r5, r5, #1
   3cc2c:	add	r3, r5, r6
   3cc30:	cmp	r3, r1
   3cc34:	bcc	3cbd4 <__assert_fail@plt+0x2a018>
   3cc38:	str	ip, [r2]
   3cc3c:	cmp	r1, #2
   3cc40:	bcc	3ccc4 <__assert_fail@plt+0x2a108>
   3cc44:	mvn	ip, #0
   3cc48:	mov	r4, #0
   3cc4c:	mov	r5, #1
   3cc50:	mov	lr, #1
   3cc54:	mov	r3, #1
   3cc58:	ldrb	r6, [r0, r5]
   3cc5c:	add	r7, r3, ip
   3cc60:	ldrb	r7, [r0, r7]
   3cc64:	cmp	r7, r6
   3cc68:	bcs	3cc7c <__assert_fail@plt+0x2a0c0>
   3cc6c:	sub	lr, r5, ip
   3cc70:	mov	r3, #1
   3cc74:	mov	r4, r5
   3cc78:	b	3ccb4 <__assert_fail@plt+0x2a0f8>
   3cc7c:	cmp	r6, r7
   3cc80:	bne	3cc98 <__assert_fail@plt+0x2a0dc>
   3cc84:	cmp	r3, lr
   3cc88:	bne	3ccb0 <__assert_fail@plt+0x2a0f4>
   3cc8c:	add	r4, lr, r4
   3cc90:	mov	r3, #1
   3cc94:	b	3ccb4 <__assert_fail@plt+0x2a0f8>
   3cc98:	add	r7, r4, #1
   3cc9c:	mov	r3, #1
   3cca0:	mov	ip, r4
   3cca4:	mov	r4, r7
   3cca8:	mov	lr, #1
   3ccac:	b	3ccb4 <__assert_fail@plt+0x2a0f8>
   3ccb0:	add	r3, r3, #1
   3ccb4:	add	r5, r3, r4
   3ccb8:	cmp	r5, r1
   3ccbc:	bcc	3cc58 <__assert_fail@plt+0x2a09c>
   3ccc0:	b	3cccc <__assert_fail@plt+0x2a110>
   3ccc4:	mov	lr, #1
   3ccc8:	mvn	ip, #0
   3cccc:	add	r0, r8, #1
   3ccd0:	add	r1, ip, #1
   3ccd4:	cmp	r1, r0
   3ccd8:	strcs	lr, [r2]
   3ccdc:	movcs	r0, r1
   3cce0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3cce4:	push	{r4, r5, r6, sl, fp, lr}
   3cce8:	add	fp, sp, #16
   3ccec:	mov	r4, r0
   3ccf0:	cmp	r0, #0
   3ccf4:	beq	3cd18 <__assert_fail@plt+0x2a15c>
   3ccf8:	mov	r0, r4
   3ccfc:	bl	1288c <strlen@plt>
   3cd00:	add	r5, r0, #1
   3cd04:	cmp	r5, #58	; 0x3a
   3cd08:	bls	3cd1c <__assert_fail@plt+0x2a160>
   3cd0c:	add	r0, r0, #10
   3cd10:	bic	r0, r0, #3
   3cd14:	b	3cd20 <__assert_fail@plt+0x2a164>
   3cd18:	mov	r5, #0
   3cd1c:	mov	r0, #64	; 0x40
   3cd20:	bl	2ed04 <__assert_fail@plt+0x1c148>
   3cd24:	mov	r6, r0
   3cd28:	cmp	r0, #0
   3cd2c:	beq	3cd60 <__assert_fail@plt+0x2a1a4>
   3cd30:	mov	r1, #0
   3cd34:	str	r1, [r6]
   3cd38:	cmp	r4, #0
   3cd3c:	mov	r0, r4
   3cd40:	movwne	r0, #1
   3cd44:	strb	r0, [r6, #4]
   3cd48:	mov	r0, r6
   3cd4c:	strb	r1, [r0, #5]!
   3cd50:	beq	3cd60 <__assert_fail@plt+0x2a1a4>
   3cd54:	mov	r1, r4
   3cd58:	mov	r2, r5
   3cd5c:	bl	3cd68 <__assert_fail@plt+0x2a1ac>
   3cd60:	mov	r0, r6
   3cd64:	pop	{r4, r5, r6, sl, fp, pc}
   3cd68:	push	{r4, r5, fp, lr}
   3cd6c:	add	fp, sp, #8
   3cd70:	mov	r4, r2
   3cd74:	mov	r5, r0
   3cd78:	bl	125c8 <memcpy@plt>
   3cd7c:	mov	r0, #0
   3cd80:	strb	r0, [r5, r4]
   3cd84:	pop	{r4, r5, fp, pc}
   3cd88:	push	{r4, sl, fp, lr}
   3cd8c:	add	fp, sp, #8
   3cd90:	cmp	r0, #2
   3cd94:	popcc	{r4, sl, fp, pc}
   3cd98:	ldr	r4, [r0]
   3cd9c:	bl	2ca78 <__assert_fail@plt+0x19ebc>
   3cda0:	cmp	r4, #0
   3cda4:	mov	r0, r4
   3cda8:	bne	3cd98 <__assert_fail@plt+0x2a1dc>
   3cdac:	pop	{r4, sl, fp, pc}
   3cdb0:	push	{r4, r5, r6, r7, fp, lr}
   3cdb4:	add	fp, sp, #16
   3cdb8:	mov	r4, r2
   3cdbc:	mov	r7, r1
   3cdc0:	cmp	r0, #0
   3cdc4:	beq	3ce08 <__assert_fail@plt+0x2a24c>
   3cdc8:	mov	r6, r0
   3cdcc:	bl	3ce38 <__assert_fail@plt+0x2a27c>
   3cdd0:	cmp	r0, #0
   3cdd4:	moveq	r0, #0
   3cdd8:	popeq	{r4, r5, r6, r7, fp, pc}
   3cddc:	mov	r5, r0
   3cde0:	mov	r0, r7
   3cde4:	mov	r1, r4
   3cde8:	bl	12694 <localtime_r@plt>
   3cdec:	cmp	r0, #0
   3cdf0:	beq	3ce18 <__assert_fail@plt+0x2a25c>
   3cdf4:	mov	r0, r6
   3cdf8:	mov	r1, r4
   3cdfc:	bl	3cec8 <__assert_fail@plt+0x2a30c>
   3ce00:	eor	r6, r0, #1
   3ce04:	b	3ce1c <__assert_fail@plt+0x2a260>
   3ce08:	mov	r0, r7
   3ce0c:	mov	r1, r4
   3ce10:	pop	{r4, r5, r6, r7, fp, lr}
   3ce14:	b	1249c <gmtime_r@plt>
   3ce18:	mov	r6, #1
   3ce1c:	mov	r0, r5
   3ce20:	bl	3cfe0 <__assert_fail@plt+0x2a424>
   3ce24:	cmp	r0, #0
   3ce28:	movne	r0, r4
   3ce2c:	cmp	r6, #0
   3ce30:	movwne	r0, #0
   3ce34:	pop	{r4, r5, r6, r7, fp, pc}
   3ce38:	push	{r4, r5, r6, r7, fp, lr}
   3ce3c:	add	fp, sp, #16
   3ce40:	mov	r4, r0
   3ce44:	bl	3d108 <__assert_fail@plt+0x2a54c>
   3ce48:	mov	r5, r0
   3ce4c:	ldrb	r0, [r4, #4]
   3ce50:	cmp	r5, #0
   3ce54:	beq	3ce6c <__assert_fail@plt+0x2a2b0>
   3ce58:	cmp	r0, #0
   3ce5c:	beq	3ce7c <__assert_fail@plt+0x2a2c0>
   3ce60:	add	r0, r4, #5
   3ce64:	mov	r1, r5
   3ce68:	bl	124cc <strcmp@plt>
   3ce6c:	cmp	r0, #0
   3ce70:	moveq	r5, #1
   3ce74:	moveq	r0, r5
   3ce78:	popeq	{r4, r5, r6, r7, fp, pc}
   3ce7c:	mov	r0, r5
   3ce80:	bl	3cce4 <__assert_fail@plt+0x2a128>
   3ce84:	mov	r5, #0
   3ce88:	cmp	r0, #0
   3ce8c:	beq	3cec0 <__assert_fail@plt+0x2a304>
   3ce90:	mov	r6, r0
   3ce94:	mov	r0, r4
   3ce98:	bl	3d114 <__assert_fail@plt+0x2a558>
   3ce9c:	cmp	r0, #0
   3cea0:	movne	r0, r6
   3cea4:	popne	{r4, r5, r6, r7, fp, pc}
   3cea8:	bl	128d4 <__errno_location@plt>
   3ceac:	mov	r4, r0
   3ceb0:	ldr	r7, [r0]
   3ceb4:	mov	r0, r6
   3ceb8:	bl	3cd88 <__assert_fail@plt+0x2a1cc>
   3cebc:	str	r7, [r4]
   3cec0:	mov	r0, r5
   3cec4:	pop	{r4, r5, r6, r7, fp, pc}
   3cec8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3cecc:	add	fp, sp, #24
   3ced0:	ldr	r7, [r1, #40]	; 0x28
   3ced4:	mov	r8, #1
   3ced8:	cmp	r7, #0
   3cedc:	beq	3cf80 <__assert_fail@plt+0x2a3c4>
   3cee0:	mov	r5, r1
   3cee4:	mov	r6, r0
   3cee8:	cmp	r7, r1
   3ceec:	bcc	3cefc <__assert_fail@plt+0x2a340>
   3cef0:	add	r0, r5, #44	; 0x2c
   3cef4:	cmp	r7, r0
   3cef8:	bcc	3cf80 <__assert_fail@plt+0x2a3c4>
   3cefc:	ldrb	r0, [r7]
   3cf00:	cmp	r0, #0
   3cf04:	beq	3cf74 <__assert_fail@plt+0x2a3b8>
   3cf08:	add	r4, r6, #5
   3cf0c:	b	3cf20 <__assert_fail@plt+0x2a364>
   3cf10:	ldr	r0, [r6]
   3cf14:	cmp	r0, #0
   3cf18:	addne	r4, r0, #5
   3cf1c:	movne	r6, r0
   3cf20:	mov	r0, r4
   3cf24:	mov	r1, r7
   3cf28:	bl	124cc <strcmp@plt>
   3cf2c:	cmp	r0, #0
   3cf30:	beq	3cf7c <__assert_fail@plt+0x2a3c0>
   3cf34:	ldrb	r0, [r4]
   3cf38:	cmp	r0, #0
   3cf3c:	bne	3cf58 <__assert_fail@plt+0x2a39c>
   3cf40:	add	r0, r6, #5
   3cf44:	cmp	r4, r0
   3cf48:	bne	3cf88 <__assert_fail@plt+0x2a3cc>
   3cf4c:	ldrb	r0, [r6, #4]
   3cf50:	cmp	r0, #0
   3cf54:	beq	3cf88 <__assert_fail@plt+0x2a3cc>
   3cf58:	mov	r0, r4
   3cf5c:	bl	1288c <strlen@plt>
   3cf60:	add	r4, r4, r0
   3cf64:	ldrb	r0, [r4, #1]!
   3cf68:	cmp	r0, #0
   3cf6c:	bne	3cf20 <__assert_fail@plt+0x2a364>
   3cf70:	b	3cf10 <__assert_fail@plt+0x2a354>
   3cf74:	movw	r4, #2143	; 0x85f
   3cf78:	movt	r4, #4
   3cf7c:	str	r4, [r5, #40]	; 0x28
   3cf80:	mov	r0, r8
   3cf84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3cf88:	add	r0, r6, #64	; 0x40
   3cf8c:	sub	r9, r0, r4
   3cf90:	mov	r0, r7
   3cf94:	bl	1288c <strlen@plt>
   3cf98:	add	r2, r0, #1
   3cf9c:	cmp	r2, r9
   3cfa0:	bge	3cfb4 <__assert_fail@plt+0x2a3f8>
   3cfa4:	mov	r0, r4
   3cfa8:	mov	r1, r7
   3cfac:	bl	3cd68 <__assert_fail@plt+0x2a1ac>
   3cfb0:	b	3cf7c <__assert_fail@plt+0x2a3c0>
   3cfb4:	mov	r0, r7
   3cfb8:	bl	3cce4 <__assert_fail@plt+0x2a128>
   3cfbc:	str	r0, [r6]
   3cfc0:	cmp	r0, #0
   3cfc4:	moveq	r8, #0
   3cfc8:	moveq	r0, r8
   3cfcc:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   3cfd0:	mov	r1, #0
   3cfd4:	strb	r1, [r0, #4]
   3cfd8:	add	r4, r0, #5
   3cfdc:	b	3cf7c <__assert_fail@plt+0x2a3c0>
   3cfe0:	push	{r4, r5, r6, r7, fp, lr}
   3cfe4:	add	fp, sp, #16
   3cfe8:	cmp	r0, #1
   3cfec:	moveq	r5, #1
   3cff0:	moveq	r0, r5
   3cff4:	popeq	{r4, r5, r6, r7, fp, pc}
   3cff8:	mov	r4, r0
   3cffc:	bl	128d4 <__errno_location@plt>
   3d000:	mov	r6, r0
   3d004:	ldr	r7, [r0]
   3d008:	mov	r0, r4
   3d00c:	bl	3d114 <__assert_fail@plt+0x2a558>
   3d010:	mov	r5, r0
   3d014:	cmp	r0, #0
   3d018:	ldreq	r7, [r6]
   3d01c:	mov	r0, r4
   3d020:	bl	3cd88 <__assert_fail@plt+0x2a1cc>
   3d024:	str	r7, [r6]
   3d028:	mov	r0, r5
   3d02c:	pop	{r4, r5, r6, r7, fp, pc}
   3d030:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3d034:	add	fp, sp, #24
   3d038:	sub	sp, sp, #48	; 0x30
   3d03c:	mov	r4, r1
   3d040:	cmp	r0, #0
   3d044:	beq	3d0e0 <__assert_fail@plt+0x2a524>
   3d048:	mov	r6, r0
   3d04c:	bl	3ce38 <__assert_fail@plt+0x2a27c>
   3d050:	cmp	r0, #0
   3d054:	beq	3d0f8 <__assert_fail@plt+0x2a53c>
   3d058:	mov	r7, r0
   3d05c:	ldm	r4, {r0, r1, r2, r3, r5, ip}
   3d060:	stm	sp, {r0, r1, r2, r3, r5}
   3d064:	mvn	r0, #0
   3d068:	str	r0, [sp, #28]
   3d06c:	str	ip, [sp, #20]
   3d070:	ldr	r0, [r4, #32]
   3d074:	str	r0, [sp, #32]
   3d078:	mov	r0, sp
   3d07c:	bl	12520 <mktime@plt>
   3d080:	mov	r5, r0
   3d084:	ldr	r0, [sp, #28]
   3d088:	cmn	r0, #1
   3d08c:	ble	3d0f0 <__assert_fail@plt+0x2a534>
   3d090:	mov	r8, sp
   3d094:	mov	r0, r6
   3d098:	mov	r1, r8
   3d09c:	bl	3cec8 <__assert_fail@plt+0x2a30c>
   3d0a0:	mov	r6, r0
   3d0a4:	mov	r0, r7
   3d0a8:	bl	3cfe0 <__assert_fail@plt+0x2a424>
   3d0ac:	cmp	r6, #0
   3d0b0:	cmpne	r0, #0
   3d0b4:	beq	3d0f8 <__assert_fail@plt+0x2a53c>
   3d0b8:	mov	r0, #28
   3d0bc:	add	r1, r8, #16
   3d0c0:	vld1.32	{d16-d17}, [r8], r0
   3d0c4:	vld1.64	{d18-d19}, [r1]
   3d0c8:	add	r1, r4, #16
   3d0cc:	vld1.32	{d20-d21}, [r8]
   3d0d0:	vst1.32	{d18-d19}, [r1]
   3d0d4:	vst1.32	{d16-d17}, [r4], r0
   3d0d8:	vst1.32	{d20-d21}, [r4]
   3d0dc:	b	3d0fc <__assert_fail@plt+0x2a540>
   3d0e0:	mov	r0, r4
   3d0e4:	sub	sp, fp, #24
   3d0e8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   3d0ec:	b	12a84 <timegm@plt>
   3d0f0:	mov	r0, r7
   3d0f4:	bl	3cfe0 <__assert_fail@plt+0x2a424>
   3d0f8:	mvn	r5, #0
   3d0fc:	mov	r0, r5
   3d100:	sub	sp, fp, #24
   3d104:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3d108:	movw	r0, #16489	; 0x4069
   3d10c:	movt	r0, #4
   3d110:	b	127cc <getenv@plt>
   3d114:	push	{fp, lr}
   3d118:	mov	fp, sp
   3d11c:	ldrb	r1, [r0, #4]
   3d120:	cmp	r1, #0
   3d124:	addne	r1, r0, #5
   3d128:	mov	r0, r1
   3d12c:	bl	3d14c <__assert_fail@plt+0x2a590>
   3d130:	mov	r1, r0
   3d134:	mov	r0, #0
   3d138:	cmp	r1, #0
   3d13c:	popne	{fp, pc}
   3d140:	bl	126dc <tzset@plt>
   3d144:	mov	r0, #1
   3d148:	pop	{fp, pc}
   3d14c:	cmp	r0, #0
   3d150:	beq	3d168 <__assert_fail@plt+0x2a5ac>
   3d154:	mov	r1, r0
   3d158:	movw	r0, #16489	; 0x4069
   3d15c:	movt	r0, #4
   3d160:	mov	r2, #1
   3d164:	b	128a4 <setenv@plt>
   3d168:	movw	r0, #16489	; 0x4069
   3d16c:	movt	r0, #4
   3d170:	b	12b38 <unsetenv@plt>
   3d174:	push	{fp, lr}
   3d178:	mov	fp, sp
   3d17c:	movw	r0, #21760	; 0x5500
   3d180:	movt	r0, #5
   3d184:	ldr	r0, [r0]
   3d188:	bl	1285c <exit@plt>
   3d18c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d190:	add	fp, sp, #28
   3d194:	sub	sp, sp, #12
   3d198:	mov	r4, r3
   3d19c:	mov	r6, r2
   3d1a0:	mov	r5, r1
   3d1a4:	mov	sl, r0
   3d1a8:	bl	1288c <strlen@plt>
   3d1ac:	ldr	r8, [r5]
   3d1b0:	cmp	r8, #0
   3d1b4:	beq	3d270 <__assert_fail@plt+0x2a6b4>
   3d1b8:	mov	r7, r0
   3d1bc:	add	r9, r5, #4
   3d1c0:	mov	r0, #0
   3d1c4:	str	r0, [sp]
   3d1c8:	mvn	r0, #0
   3d1cc:	str	r0, [sp, #8]
   3d1d0:	str	r6, [sp, #4]
   3d1d4:	mov	r5, #0
   3d1d8:	mov	r0, r8
   3d1dc:	mov	r1, sl
   3d1e0:	mov	r2, r7
   3d1e4:	bl	12b5c <strncmp@plt>
   3d1e8:	cmp	r0, #0
   3d1ec:	bne	3d244 <__assert_fail@plt+0x2a688>
   3d1f0:	mov	r0, r8
   3d1f4:	bl	1288c <strlen@plt>
   3d1f8:	cmp	r0, r7
   3d1fc:	beq	3d274 <__assert_fail@plt+0x2a6b8>
   3d200:	ldr	r0, [sp, #8]
   3d204:	cmn	r0, #1
   3d208:	beq	3d240 <__assert_fail@plt+0x2a684>
   3d20c:	ldr	r0, [sp, #4]
   3d210:	cmp	r0, #0
   3d214:	beq	3d234 <__assert_fail@plt+0x2a678>
   3d218:	ldr	r1, [sp, #8]
   3d21c:	mla	r0, r1, r4, r0
   3d220:	mov	r1, r6
   3d224:	mov	r2, r4
   3d228:	bl	12628 <memcmp@plt>
   3d22c:	cmp	r0, #0
   3d230:	beq	3d244 <__assert_fail@plt+0x2a688>
   3d234:	mov	r0, #1
   3d238:	str	r0, [sp]
   3d23c:	b	3d244 <__assert_fail@plt+0x2a688>
   3d240:	str	r5, [sp, #8]
   3d244:	add	r6, r6, r4
   3d248:	ldr	r8, [r9, r5, lsl #2]
   3d24c:	add	r5, r5, #1
   3d250:	cmp	r8, #0
   3d254:	bne	3d1d8 <__assert_fail@plt+0x2a61c>
   3d258:	ldr	r0, [sp]
   3d25c:	tst	r0, #1
   3d260:	ldr	r0, [sp, #8]
   3d264:	mvnne	r0, #1
   3d268:	sub	sp, fp, #28
   3d26c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d270:	mvn	r5, #0
   3d274:	mov	r0, r5
   3d278:	sub	sp, fp, #28
   3d27c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d280:	push	{r4, r5, r6, sl, fp, lr}
   3d284:	add	fp, sp, #16
   3d288:	sub	sp, sp, #8
   3d28c:	mov	r4, r1
   3d290:	mov	r5, r0
   3d294:	movw	r0, #19352	; 0x4b98
   3d298:	movt	r0, #4
   3d29c:	movw	r1, #19379	; 0x4bb3
   3d2a0:	movt	r1, #4
   3d2a4:	cmn	r2, #1
   3d2a8:	moveq	r1, r0
   3d2ac:	mov	r0, #0
   3d2b0:	mov	r2, #5
   3d2b4:	bl	1264c <dcgettext@plt>
   3d2b8:	mov	r6, r0
   3d2bc:	mov	r0, #0
   3d2c0:	mov	r1, #8
   3d2c4:	mov	r2, r4
   3d2c8:	bl	2a024 <__assert_fail@plt+0x17468>
   3d2cc:	mov	r4, r0
   3d2d0:	mov	r0, #1
   3d2d4:	mov	r1, r5
   3d2d8:	bl	2a2c0 <__assert_fail@plt+0x17704>
   3d2dc:	str	r0, [sp]
   3d2e0:	mov	r0, #0
   3d2e4:	mov	r1, #0
   3d2e8:	mov	r2, r6
   3d2ec:	mov	r3, r4
   3d2f0:	bl	12790 <error@plt>
   3d2f4:	sub	sp, fp, #16
   3d2f8:	pop	{r4, r5, r6, sl, fp, pc}
   3d2fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d300:	add	fp, sp, #28
   3d304:	sub	sp, sp, #4
   3d308:	mov	r9, r2
   3d30c:	mov	r5, r1
   3d310:	mov	r7, r0
   3d314:	mov	r8, #0
   3d318:	movw	r1, #19408	; 0x4bd0
   3d31c:	movt	r1, #4
   3d320:	mov	r0, #0
   3d324:	mov	r2, #5
   3d328:	bl	1264c <dcgettext@plt>
   3d32c:	movw	sl, #21856	; 0x5560
   3d330:	movt	sl, #5
   3d334:	ldr	r1, [sl]
   3d338:	bl	12b50 <fputs@plt>
   3d33c:	ldr	r6, [r7]
   3d340:	cmp	r6, #0
   3d344:	bne	3d35c <__assert_fail@plt+0x2a7a0>
   3d348:	ldr	r1, [sl]
   3d34c:	mov	r0, #10
   3d350:	sub	sp, fp, #28
   3d354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d358:	b	12a90 <putc@plt>
   3d35c:	add	r4, r7, #4
   3d360:	mov	r7, #0
   3d364:	str	r4, [sp]
   3d368:	cmp	r8, #0
   3d36c:	beq	3d3b0 <__assert_fail@plt+0x2a7f4>
   3d370:	mov	r0, r7
   3d374:	mov	r1, r5
   3d378:	mov	r2, r9
   3d37c:	bl	12628 <memcmp@plt>
   3d380:	cmp	r0, #0
   3d384:	bne	3d3b0 <__assert_fail@plt+0x2a7f4>
   3d388:	ldr	r4, [sl]
   3d38c:	mov	r0, r6
   3d390:	bl	2a2c8 <__assert_fail@plt+0x1770c>
   3d394:	mov	r2, r0
   3d398:	mov	r0, r4
   3d39c:	ldr	r4, [sp]
   3d3a0:	movw	r1, #19437	; 0x4bed
   3d3a4:	movt	r1, #4
   3d3a8:	bl	128c8 <fprintf@plt>
   3d3ac:	b	3d3d4 <__assert_fail@plt+0x2a818>
   3d3b0:	ldr	r7, [sl]
   3d3b4:	mov	r0, r6
   3d3b8:	bl	2a2c8 <__assert_fail@plt+0x1770c>
   3d3bc:	mov	r2, r0
   3d3c0:	mov	r0, r7
   3d3c4:	movw	r1, #19429	; 0x4be5
   3d3c8:	movt	r1, #4
   3d3cc:	bl	128c8 <fprintf@plt>
   3d3d0:	mov	r7, r5
   3d3d4:	add	r5, r5, r9
   3d3d8:	ldr	r6, [r4, -r8, lsl #2]
   3d3dc:	sub	r8, r8, #1
   3d3e0:	cmp	r6, #0
   3d3e4:	bne	3d368 <__assert_fail@plt+0x2a7ac>
   3d3e8:	b	3d348 <__assert_fail@plt+0x2a78c>
   3d3ec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3d3f0:	add	fp, sp, #24
   3d3f4:	mov	r4, r3
   3d3f8:	mov	r5, r2
   3d3fc:	mov	r7, r1
   3d400:	mov	r6, r0
   3d404:	ldr	r8, [fp, #8]
   3d408:	mov	r0, r1
   3d40c:	mov	r1, r2
   3d410:	mov	r2, r3
   3d414:	mov	r3, r8
   3d418:	bl	3d18c <__assert_fail@plt+0x2a5d0>
   3d41c:	mov	r2, r0
   3d420:	cmn	r0, #1
   3d424:	ble	3d430 <__assert_fail@plt+0x2a874>
   3d428:	mov	r0, r2
   3d42c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3d430:	ldr	r9, [fp, #12]
   3d434:	mov	r0, r6
   3d438:	mov	r1, r7
   3d43c:	bl	3d280 <__assert_fail@plt+0x2a6c4>
   3d440:	mov	r0, r5
   3d444:	mov	r1, r4
   3d448:	mov	r2, r8
   3d44c:	bl	3d2fc <__assert_fail@plt+0x2a740>
   3d450:	blx	r9
   3d454:	mvn	r2, #0
   3d458:	mov	r0, r2
   3d45c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3d460:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3d464:	add	fp, sp, #24
   3d468:	ldr	r6, [r1]
   3d46c:	cmp	r6, #0
   3d470:	beq	3d4d4 <__assert_fail@plt+0x2a918>
   3d474:	mov	r4, r3
   3d478:	mov	r7, r2
   3d47c:	mov	r8, r1
   3d480:	mov	r9, r0
   3d484:	mov	r1, r2
   3d488:	mov	r2, r3
   3d48c:	bl	12628 <memcmp@plt>
   3d490:	cmp	r0, #0
   3d494:	beq	3d4cc <__assert_fail@plt+0x2a910>
   3d498:	add	r7, r7, r4
   3d49c:	add	r5, r8, #4
   3d4a0:	ldr	r6, [r5]
   3d4a4:	cmp	r6, #0
   3d4a8:	beq	3d4d4 <__assert_fail@plt+0x2a918>
   3d4ac:	mov	r0, r9
   3d4b0:	mov	r1, r7
   3d4b4:	mov	r2, r4
   3d4b8:	bl	12628 <memcmp@plt>
   3d4bc:	add	r7, r7, r4
   3d4c0:	add	r5, r5, #4
   3d4c4:	cmp	r0, #0
   3d4c8:	bne	3d4a0 <__assert_fail@plt+0x2a8e4>
   3d4cc:	mov	r0, r6
   3d4d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3d4d4:	mov	r6, #0
   3d4d8:	mov	r0, r6
   3d4dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3d4e0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3d4e4:	add	fp, sp, #24
   3d4e8:	sub	sp, sp, #32
   3d4ec:	mov	r5, r0
   3d4f0:	ldrb	r0, [r2]
   3d4f4:	cmp	r0, #0
   3d4f8:	beq	3d5cc <__assert_fail@plt+0x2aa10>
   3d4fc:	mov	r4, r2
   3d500:	mov	r6, r1
   3d504:	movw	r9, #24148	; 0x5e54
   3d508:	movt	r9, #5
   3d50c:	ldr	r0, [r9]
   3d510:	cmp	r0, #0
   3d514:	bne	3d578 <__assert_fail@plt+0x2a9bc>
   3d518:	movw	r0, #12433	; 0x3091
   3d51c:	movt	r0, #4
   3d520:	movw	r1, #18688	; 0x4900
   3d524:	movt	r1, #8
   3d528:	bl	127c0 <open64@plt>
   3d52c:	cmn	r0, #1
   3d530:	ble	3d5e4 <__assert_fail@plt+0x2aa28>
   3d534:	mov	r7, r0
   3d538:	mov	r8, sp
   3d53c:	movw	r1, #19442	; 0x4bf2
   3d540:	movt	r1, #4
   3d544:	mov	r0, r8
   3d548:	mov	r2, r7
   3d54c:	bl	12a60 <sprintf@plt>
   3d550:	mov	r0, r8
   3d554:	mov	r1, #0
   3d558:	bl	12994 <access@plt>
   3d55c:	mvn	r1, #0
   3d560:	cmp	r0, #0
   3d564:	movweq	r1, #1
   3d568:	str	r1, [r9]
   3d56c:	mov	r0, r7
   3d570:	bl	12b74 <close@plt>
   3d574:	ldr	r0, [r9]
   3d578:	mov	r7, #0
   3d57c:	cmp	r0, #0
   3d580:	blt	3d5d8 <__assert_fail@plt+0x2aa1c>
   3d584:	mov	r0, r4
   3d588:	bl	1288c <strlen@plt>
   3d58c:	add	r0, r0, #27
   3d590:	cmp	r0, #4032	; 0xfc0
   3d594:	bls	3d5a8 <__assert_fail@plt+0x2a9ec>
   3d598:	bl	2ed04 <__assert_fail@plt+0x1c148>
   3d59c:	mov	r5, r0
   3d5a0:	cmp	r0, #0
   3d5a4:	beq	3d5d8 <__assert_fail@plt+0x2aa1c>
   3d5a8:	movw	r1, #19465	; 0x4c09
   3d5ac:	movt	r1, #4
   3d5b0:	mov	r0, r5
   3d5b4:	mov	r2, r6
   3d5b8:	bl	12a60 <sprintf@plt>
   3d5bc:	add	r0, r5, r0
   3d5c0:	mov	r1, r4
   3d5c4:	bl	12748 <strcpy@plt>
   3d5c8:	b	3d5d4 <__assert_fail@plt+0x2aa18>
   3d5cc:	mov	r0, #0
   3d5d0:	strb	r0, [r5]
   3d5d4:	mov	r7, r5
   3d5d8:	mov	r0, r7
   3d5dc:	sub	sp, fp, #24
   3d5e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3d5e4:	mvn	r0, #0
   3d5e8:	str	r0, [r9]
   3d5ec:	mov	r7, #0
   3d5f0:	b	3d5d8 <__assert_fail@plt+0x2aa1c>
   3d5f4:	sub	r0, r0, #1
   3d5f8:	ldrb	r3, [r0, #1]!
   3d5fc:	cmp	r3, #47	; 0x2f
   3d600:	beq	3d5f8 <__assert_fail@plt+0x2aa3c>
   3d604:	mov	r2, #0
   3d608:	mov	r1, r0
   3d60c:	b	3d628 <__assert_fail@plt+0x2aa6c>
   3d610:	cmp	r3, #0
   3d614:	bxeq	lr
   3d618:	tst	r2, #1
   3d61c:	movne	r0, r1
   3d620:	mov	r2, #0
   3d624:	ldrb	r3, [r1, #1]!
   3d628:	uxtb	r3, r3
   3d62c:	cmp	r3, #47	; 0x2f
   3d630:	bne	3d610 <__assert_fail@plt+0x2aa54>
   3d634:	mov	r2, #1
   3d638:	ldrb	r3, [r1, #1]!
   3d63c:	b	3d628 <__assert_fail@plt+0x2aa6c>
   3d640:	push	{r4, sl, fp, lr}
   3d644:	add	fp, sp, #8
   3d648:	mov	r4, r0
   3d64c:	bl	1288c <strlen@plt>
   3d650:	mov	r1, r0
   3d654:	sub	r2, r4, #1
   3d658:	mov	r0, r1
   3d65c:	cmp	r1, #2
   3d660:	popcc	{r4, sl, fp, pc}
   3d664:	ldrb	r3, [r2, r0]
   3d668:	sub	r1, r0, #1
   3d66c:	cmp	r3, #47	; 0x2f
   3d670:	beq	3d658 <__assert_fail@plt+0x2aa9c>
   3d674:	pop	{r4, sl, fp, pc}
   3d678:	push	{r4, r5, fp, lr}
   3d67c:	add	fp, sp, #8
   3d680:	rsb	lr, r2, #64	; 0x40
   3d684:	lsr	ip, r0, lr
   3d688:	rsb	r3, lr, #32
   3d68c:	orr	ip, ip, r1, lsl r3
   3d690:	rsb	r4, r2, #32
   3d694:	cmp	r4, #0
   3d698:	lsrge	ip, r1, r4
   3d69c:	lsl	r3, r0, r2
   3d6a0:	sub	r5, r2, #32
   3d6a4:	cmp	r5, #0
   3d6a8:	movwge	r3, #0
   3d6ac:	orr	ip, ip, r3
   3d6b0:	lsr	r3, r0, r4
   3d6b4:	orr	r2, r3, r1, lsl r2
   3d6b8:	lslge	r2, r0, r5
   3d6bc:	lsr	r0, r1, lr
   3d6c0:	cmp	r4, #0
   3d6c4:	movwge	r0, #0
   3d6c8:	orr	r1, r0, r2
   3d6cc:	mov	r0, ip
   3d6d0:	pop	{r4, r5, fp, pc}
   3d6d4:	push	{r4, r5, fp, lr}
   3d6d8:	add	fp, sp, #8
   3d6dc:	lsr	ip, r0, r2
   3d6e0:	rsb	r3, r2, #32
   3d6e4:	orr	ip, ip, r1, lsl r3
   3d6e8:	sub	lr, r2, #32
   3d6ec:	cmp	lr, #0
   3d6f0:	lsrge	ip, r1, lr
   3d6f4:	rsb	r4, r2, #64	; 0x40
   3d6f8:	lsl	r5, r0, r4
   3d6fc:	cmp	r3, #0
   3d700:	movwge	r5, #0
   3d704:	orr	ip, r5, ip
   3d708:	rsb	r5, r4, #32
   3d70c:	lsr	r5, r0, r5
   3d710:	orr	r4, r5, r1, lsl r4
   3d714:	cmp	r3, #0
   3d718:	lslge	r4, r0, r3
   3d71c:	lsr	r0, r1, r2
   3d720:	cmp	lr, #0
   3d724:	movwge	r0, #0
   3d728:	orr	r1, r4, r0
   3d72c:	mov	r0, ip
   3d730:	pop	{r4, r5, fp, pc}
   3d734:	rsb	r1, r1, #32
   3d738:	ror	r0, r0, r1
   3d73c:	bx	lr
   3d740:	ror	r0, r0, r1
   3d744:	bx	lr
   3d748:	rsb	r1, r1, #32
   3d74c:	ror	r0, r0, r1
   3d750:	bx	lr
   3d754:	ror	r0, r0, r1
   3d758:	bx	lr
   3d75c:	and	r2, r1, #15
   3d760:	lsl	r2, r0, r2
   3d764:	rsb	r1, r1, #0
   3d768:	and	r1, r1, #15
   3d76c:	orr	r0, r2, r0, lsr r1
   3d770:	uxth	r0, r0
   3d774:	bx	lr
   3d778:	and	r2, r1, #15
   3d77c:	lsr	r2, r0, r2
   3d780:	rsb	r1, r1, #0
   3d784:	and	r1, r1, #15
   3d788:	orr	r0, r2, r0, lsl r1
   3d78c:	uxth	r0, r0
   3d790:	bx	lr
   3d794:	and	r2, r1, #7
   3d798:	lsl	r2, r0, r2
   3d79c:	rsb	r1, r1, #0
   3d7a0:	and	r1, r1, #7
   3d7a4:	orr	r0, r2, r0, lsr r1
   3d7a8:	uxtb	r0, r0
   3d7ac:	bx	lr
   3d7b0:	and	r2, r1, #7
   3d7b4:	lsr	r2, r0, r2
   3d7b8:	rsb	r1, r1, #0
   3d7bc:	and	r1, r1, #7
   3d7c0:	orr	r0, r2, r0, lsl r1
   3d7c4:	uxtb	r0, r0
   3d7c8:	bx	lr
   3d7cc:	mov	r1, r0
   3d7d0:	sub	r2, r0, #65	; 0x41
   3d7d4:	mov	r0, #1
   3d7d8:	cmp	r2, #26
   3d7dc:	subcs	r2, r1, #97	; 0x61
   3d7e0:	cmpcs	r2, #26
   3d7e4:	bcs	3d7ec <__assert_fail@plt+0x2ac30>
   3d7e8:	bx	lr
   3d7ec:	sub	r1, r1, #48	; 0x30
   3d7f0:	cmp	r1, #10
   3d7f4:	movcs	r0, #0
   3d7f8:	bx	lr
   3d7fc:	mov	r1, r0
   3d800:	sub	r2, r0, #65	; 0x41
   3d804:	mov	r0, #1
   3d808:	cmp	r2, #26
   3d80c:	subcs	r1, r1, #97	; 0x61
   3d810:	cmpcs	r1, #26
   3d814:	movcs	r0, #0
   3d818:	bx	lr
   3d81c:	mov	r1, #0
   3d820:	cmp	r0, #128	; 0x80
   3d824:	movwcc	r1, #1
   3d828:	mov	r0, r1
   3d82c:	bx	lr
   3d830:	sub	r1, r0, #9
   3d834:	clz	r1, r1
   3d838:	lsr	r1, r1, #5
   3d83c:	sub	r0, r0, #32
   3d840:	clz	r0, r0
   3d844:	lsr	r0, r0, #5
   3d848:	orr	r0, r0, r1
   3d84c:	bx	lr
   3d850:	mov	r1, r0
   3d854:	mov	r0, #1
   3d858:	cmp	r1, #32
   3d85c:	bxcc	lr
   3d860:	cmp	r1, #127	; 0x7f
   3d864:	movne	r0, #0
   3d868:	bx	lr
   3d86c:	sub	r1, r0, #48	; 0x30
   3d870:	mov	r0, #0
   3d874:	cmp	r1, #10
   3d878:	movwcc	r0, #1
   3d87c:	bx	lr
   3d880:	sub	r1, r0, #33	; 0x21
   3d884:	mov	r0, #0
   3d888:	cmp	r1, #94	; 0x5e
   3d88c:	movwcc	r0, #1
   3d890:	bx	lr
   3d894:	sub	r1, r0, #97	; 0x61
   3d898:	mov	r0, #0
   3d89c:	cmp	r1, #26
   3d8a0:	movwcc	r0, #1
   3d8a4:	bx	lr
   3d8a8:	sub	r1, r0, #32
   3d8ac:	mov	r0, #0
   3d8b0:	cmp	r1, #95	; 0x5f
   3d8b4:	movwcc	r0, #1
   3d8b8:	bx	lr
   3d8bc:	sub	r1, r0, #33	; 0x21
   3d8c0:	cmp	r1, #93	; 0x5d
   3d8c4:	bhi	3da50 <__assert_fail@plt+0x2ae94>
   3d8c8:	mov	r0, #1
   3d8cc:	add	r2, pc, #0
   3d8d0:	ldr	pc, [r2, r1, lsl #2]
   3d8d4:	andeq	sp, r3, ip, asr #20
   3d8d8:	andeq	sp, r3, ip, asr #20
   3d8dc:	andeq	sp, r3, ip, asr #20
   3d8e0:	andeq	sp, r3, ip, asr #20
   3d8e4:	andeq	sp, r3, ip, asr #20
   3d8e8:	andeq	sp, r3, ip, asr #20
   3d8ec:	andeq	sp, r3, ip, asr #20
   3d8f0:	andeq	sp, r3, ip, asr #20
   3d8f4:	andeq	sp, r3, ip, asr #20
   3d8f8:	andeq	sp, r3, ip, asr #20
   3d8fc:	andeq	sp, r3, ip, asr #20
   3d900:	andeq	sp, r3, ip, asr #20
   3d904:	andeq	sp, r3, ip, asr #20
   3d908:	andeq	sp, r3, ip, asr #20
   3d90c:	andeq	sp, r3, ip, asr #20
   3d910:	andeq	sp, r3, r0, asr sl
   3d914:	andeq	sp, r3, r0, asr sl
   3d918:	andeq	sp, r3, r0, asr sl
   3d91c:	andeq	sp, r3, r0, asr sl
   3d920:	andeq	sp, r3, r0, asr sl
   3d924:	andeq	sp, r3, r0, asr sl
   3d928:	andeq	sp, r3, r0, asr sl
   3d92c:	andeq	sp, r3, r0, asr sl
   3d930:	andeq	sp, r3, r0, asr sl
   3d934:	andeq	sp, r3, r0, asr sl
   3d938:	andeq	sp, r3, ip, asr #20
   3d93c:	andeq	sp, r3, ip, asr #20
   3d940:	andeq	sp, r3, ip, asr #20
   3d944:	andeq	sp, r3, ip, asr #20
   3d948:	andeq	sp, r3, ip, asr #20
   3d94c:	andeq	sp, r3, ip, asr #20
   3d950:	andeq	sp, r3, ip, asr #20
   3d954:	andeq	sp, r3, r0, asr sl
   3d958:	andeq	sp, r3, r0, asr sl
   3d95c:	andeq	sp, r3, r0, asr sl
   3d960:	andeq	sp, r3, r0, asr sl
   3d964:	andeq	sp, r3, r0, asr sl
   3d968:	andeq	sp, r3, r0, asr sl
   3d96c:	andeq	sp, r3, r0, asr sl
   3d970:	andeq	sp, r3, r0, asr sl
   3d974:	andeq	sp, r3, r0, asr sl
   3d978:	andeq	sp, r3, r0, asr sl
   3d97c:	andeq	sp, r3, r0, asr sl
   3d980:	andeq	sp, r3, r0, asr sl
   3d984:	andeq	sp, r3, r0, asr sl
   3d988:	andeq	sp, r3, r0, asr sl
   3d98c:	andeq	sp, r3, r0, asr sl
   3d990:	andeq	sp, r3, r0, asr sl
   3d994:	andeq	sp, r3, r0, asr sl
   3d998:	andeq	sp, r3, r0, asr sl
   3d99c:	andeq	sp, r3, r0, asr sl
   3d9a0:	andeq	sp, r3, r0, asr sl
   3d9a4:	andeq	sp, r3, r0, asr sl
   3d9a8:	andeq	sp, r3, r0, asr sl
   3d9ac:	andeq	sp, r3, r0, asr sl
   3d9b0:	andeq	sp, r3, r0, asr sl
   3d9b4:	andeq	sp, r3, r0, asr sl
   3d9b8:	andeq	sp, r3, r0, asr sl
   3d9bc:	andeq	sp, r3, ip, asr #20
   3d9c0:	andeq	sp, r3, ip, asr #20
   3d9c4:	andeq	sp, r3, ip, asr #20
   3d9c8:	andeq	sp, r3, ip, asr #20
   3d9cc:	andeq	sp, r3, ip, asr #20
   3d9d0:	andeq	sp, r3, ip, asr #20
   3d9d4:	andeq	sp, r3, r0, asr sl
   3d9d8:	andeq	sp, r3, r0, asr sl
   3d9dc:	andeq	sp, r3, r0, asr sl
   3d9e0:	andeq	sp, r3, r0, asr sl
   3d9e4:	andeq	sp, r3, r0, asr sl
   3d9e8:	andeq	sp, r3, r0, asr sl
   3d9ec:	andeq	sp, r3, r0, asr sl
   3d9f0:	andeq	sp, r3, r0, asr sl
   3d9f4:	andeq	sp, r3, r0, asr sl
   3d9f8:	andeq	sp, r3, r0, asr sl
   3d9fc:	andeq	sp, r3, r0, asr sl
   3da00:	andeq	sp, r3, r0, asr sl
   3da04:	andeq	sp, r3, r0, asr sl
   3da08:	andeq	sp, r3, r0, asr sl
   3da0c:	andeq	sp, r3, r0, asr sl
   3da10:	andeq	sp, r3, r0, asr sl
   3da14:	andeq	sp, r3, r0, asr sl
   3da18:	andeq	sp, r3, r0, asr sl
   3da1c:	andeq	sp, r3, r0, asr sl
   3da20:	andeq	sp, r3, r0, asr sl
   3da24:	andeq	sp, r3, r0, asr sl
   3da28:	andeq	sp, r3, r0, asr sl
   3da2c:	andeq	sp, r3, r0, asr sl
   3da30:	andeq	sp, r3, r0, asr sl
   3da34:	andeq	sp, r3, r0, asr sl
   3da38:	andeq	sp, r3, r0, asr sl
   3da3c:	andeq	sp, r3, ip, asr #20
   3da40:	andeq	sp, r3, ip, asr #20
   3da44:	andeq	sp, r3, ip, asr #20
   3da48:	andeq	sp, r3, ip, asr #20
   3da4c:	bx	lr
   3da50:	mov	r0, #0
   3da54:	bx	lr
   3da58:	sub	r0, r0, #9
   3da5c:	cmp	r0, #23
   3da60:	movhi	r0, #0
   3da64:	bxhi	lr
   3da68:	bic	r0, r0, #-16777216	; 0xff000000
   3da6c:	movw	r1, #31
   3da70:	movt	r1, #128	; 0x80
   3da74:	mov	r2, #1
   3da78:	and	r0, r2, r1, lsr r0
   3da7c:	bx	lr
   3da80:	sub	r1, r0, #65	; 0x41
   3da84:	mov	r0, #0
   3da88:	cmp	r1, #26
   3da8c:	movwcc	r0, #1
   3da90:	bx	lr
   3da94:	mov	r1, r0
   3da98:	sub	r2, r0, #48	; 0x30
   3da9c:	mov	r0, #1
   3daa0:	cmp	r2, #22
   3daa4:	bhi	3dabc <__assert_fail@plt+0x2af00>
   3daa8:	mov	ip, #1
   3daac:	movw	r3, #1023	; 0x3ff
   3dab0:	movt	r3, #126	; 0x7e
   3dab4:	tst	r3, ip, lsl r2
   3dab8:	bxne	lr
   3dabc:	sub	r1, r1, #97	; 0x61
   3dac0:	cmp	r1, #6
   3dac4:	movcs	r0, #0
   3dac8:	bxcs	lr
   3dacc:	bx	lr
   3dad0:	sub	r1, r0, #65	; 0x41
   3dad4:	cmp	r1, #26
   3dad8:	addcc	r0, r0, #32
   3dadc:	bx	lr
   3dae0:	sub	r1, r0, #97	; 0x61
   3dae4:	cmp	r1, #26
   3dae8:	subcc	r0, r0, #32
   3daec:	bx	lr
   3daf0:	push	{r4, r5, r6, sl, fp, lr}
   3daf4:	add	fp, sp, #16
   3daf8:	mov	r4, r0
   3dafc:	bl	12760 <__fpending@plt>
   3db00:	mov	r5, r0
   3db04:	mov	r0, r4
   3db08:	bl	1258c <ferror@plt>
   3db0c:	mov	r6, r0
   3db10:	mov	r0, r4
   3db14:	bl	129a0 <fclose@plt>
   3db18:	cmp	r6, #0
   3db1c:	beq	3db3c <__assert_fail@plt+0x2af80>
   3db20:	mvn	r4, #0
   3db24:	cmp	r0, #0
   3db28:	bne	3db70 <__assert_fail@plt+0x2afb4>
   3db2c:	bl	128d4 <__errno_location@plt>
   3db30:	mov	r1, #0
   3db34:	str	r1, [r0]
   3db38:	b	3db70 <__assert_fail@plt+0x2afb4>
   3db3c:	cmp	r0, #0
   3db40:	mov	r4, r0
   3db44:	mvnne	r4, #0
   3db48:	cmp	r5, #0
   3db4c:	bne	3db70 <__assert_fail@plt+0x2afb4>
   3db50:	cmp	r0, #0
   3db54:	beq	3db70 <__assert_fail@plt+0x2afb4>
   3db58:	bl	128d4 <__errno_location@plt>
   3db5c:	ldr	r0, [r0]
   3db60:	subs	r4, r0, #9
   3db64:	mvnne	r4, #0
   3db68:	mov	r0, r4
   3db6c:	pop	{r4, r5, r6, sl, fp, pc}
   3db70:	mov	r0, r4
   3db74:	pop	{r4, r5, r6, sl, fp, pc}
   3db78:	mov	r1, #0
   3db7c:	movw	r2, #62998	; 0xf616
   3db80:	movt	r2, #149	; 0x95
   3db84:	str	r1, [r0, #16]
   3db88:	str	r1, [r0, #20]
   3db8c:	str	r2, [r0, #24]
   3db90:	bx	lr
   3db94:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   3db98:	add	fp, sp, #24
   3db9c:	mov	r5, r1
   3dba0:	mov	r4, r0
   3dba4:	ldr	r0, [r0, #24]
   3dba8:	movw	r1, #62998	; 0xf616
   3dbac:	movt	r1, #149	; 0x95
   3dbb0:	cmp	r0, r1
   3dbb4:	bne	3dc54 <__assert_fail@plt+0x2b098>
   3dbb8:	mov	r1, r4
   3dbbc:	ldr	r2, [r1, #16]!
   3dbc0:	ldr	r3, [r1, #4]
   3dbc4:	orrs	r0, r2, r3
   3dbc8:	beq	3dc08 <__assert_fail@plt+0x2b04c>
   3dbcc:	ldm	r4, {r0, r7}
   3dbd0:	ldr	r6, [r5, #96]	; 0x60
   3dbd4:	ldr	r9, [r5, #100]	; 0x64
   3dbd8:	eor	r7, r9, r7
   3dbdc:	eor	r0, r6, r0
   3dbe0:	orrs	r0, r0, r7
   3dbe4:	bne	3dc08 <__assert_fail@plt+0x2b04c>
   3dbe8:	ldr	r0, [r4, #8]
   3dbec:	ldr	r7, [r4, #12]
   3dbf0:	ldm	r5, {r6, r9}
   3dbf4:	eor	r7, r9, r7
   3dbf8:	eor	r0, r6, r0
   3dbfc:	orrs	r0, r0, r7
   3dc00:	mov	r0, #1
   3dc04:	popeq	{r4, r5, r6, r7, r9, sl, fp, pc}
   3dc08:	adds	r6, r2, #1
   3dc0c:	adc	r7, r3, #0
   3dc10:	strd	r6, [r1]
   3dc14:	mov	r0, r6
   3dc18:	mov	r1, r7
   3dc1c:	bl	3dc74 <__assert_fail@plt+0x2b0b8>
   3dc20:	mov	r1, r0
   3dc24:	mov	r0, #0
   3dc28:	cmp	r1, #0
   3dc2c:	beq	3dc50 <__assert_fail@plt+0x2b094>
   3dc30:	orrs	r1, r6, r7
   3dc34:	moveq	r0, #1
   3dc38:	popeq	{r4, r5, r6, r7, r9, sl, fp, pc}
   3dc3c:	ldrd	r2, [r5]
   3dc40:	str	r3, [r4, #12]
   3dc44:	str	r2, [r4, #8]
   3dc48:	ldrd	r2, [r5, #96]	; 0x60
   3dc4c:	stm	r4, {r2, r3}
   3dc50:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   3dc54:	movw	r0, #19483	; 0x4c1b
   3dc58:	movt	r0, #4
   3dc5c:	movw	r1, #19507	; 0x4c33
   3dc60:	movt	r1, #4
   3dc64:	movw	r3, #19521	; 0x4c41
   3dc68:	movt	r3, #4
   3dc6c:	mov	r2, #60	; 0x3c
   3dc70:	bl	12bbc <__assert_fail@plt>
   3dc74:	subs	r2, r0, #1
   3dc78:	and	r0, r2, r0
   3dc7c:	sbc	r2, r1, #0
   3dc80:	and	r1, r2, r1
   3dc84:	orr	r0, r0, r1
   3dc88:	clz	r0, r0
   3dc8c:	lsr	r0, r0, #5
   3dc90:	bx	lr
   3dc94:	push	{r4, r5, r6, r7, fp, lr}
   3dc98:	add	fp, sp, #16
   3dc9c:	mov	r5, r1
   3dca0:	mov	r4, r0
   3dca4:	ldr	r0, [r0, #4]
   3dca8:	cmp	r0, r1
   3dcac:	strcs	r5, [r4]
   3dcb0:	movcs	r0, #1
   3dcb4:	popcs	{r4, r5, r6, r7, fp, pc}
   3dcb8:	mov	r6, r3
   3dcbc:	cmp	r3, #0
   3dcc0:	beq	3dce8 <__assert_fail@plt+0x2b12c>
   3dcc4:	mvn	r0, #0
   3dcc8:	udiv	r0, r0, r6
   3dccc:	cmp	r0, r5
   3dcd0:	bcs	3dce8 <__assert_fail@plt+0x2b12c>
   3dcd4:	bl	128d4 <__errno_location@plt>
   3dcd8:	mov	r1, #12
   3dcdc:	str	r1, [r0]
   3dce0:	mov	r0, #0
   3dce4:	pop	{r4, r5, r6, r7, fp, pc}
   3dce8:	mul	r1, r6, r5
   3dcec:	ldr	r0, [r4, #8]
   3dcf0:	cmp	r0, r2
   3dcf4:	beq	3dd0c <__assert_fail@plt+0x2b150>
   3dcf8:	bl	2f804 <__assert_fail@plt+0x1cc48>
   3dcfc:	mov	r7, r0
   3dd00:	cmp	r0, #0
   3dd04:	bne	3dd3c <__assert_fail@plt+0x2b180>
   3dd08:	b	3dd4c <__assert_fail@plt+0x2b190>
   3dd0c:	mov	r0, r1
   3dd10:	bl	2ed04 <__assert_fail@plt+0x1c148>
   3dd14:	cmp	r0, #0
   3dd18:	beq	3dd4c <__assert_fail@plt+0x2b190>
   3dd1c:	mov	r7, r0
   3dd20:	ldr	r1, [r4, #8]
   3dd24:	cmp	r1, #0
   3dd28:	beq	3dd3c <__assert_fail@plt+0x2b180>
   3dd2c:	ldr	r0, [r4]
   3dd30:	mul	r2, r0, r6
   3dd34:	mov	r0, r7
   3dd38:	bl	125c8 <memcpy@plt>
   3dd3c:	str	r5, [r4]
   3dd40:	stmib	r4, {r5, r7}
   3dd44:	mov	r0, #1
   3dd48:	pop	{r4, r5, r6, r7, fp, pc}
   3dd4c:	mov	r0, #0
   3dd50:	pop	{r4, r5, r6, r7, fp, pc}
   3dd54:	mov	r1, r0
   3dd58:	mov	r0, #0
   3dd5c:	b	125b0 <clock_gettime@plt>
   3dd60:	push	{fp, lr}
   3dd64:	mov	fp, sp
   3dd68:	bl	3dd54 <__assert_fail@plt+0x2b198>
   3dd6c:	pop	{fp, pc}
   3dd70:	push	{r4, sl, fp, lr}
   3dd74:	add	fp, sp, #8
   3dd78:	sub	sp, sp, #264	; 0x108
   3dd7c:	add	r1, sp, #7
   3dd80:	movw	r2, #257	; 0x101
   3dd84:	bl	3e174 <__assert_fail@plt+0x2b5b8>
   3dd88:	mov	r4, #0
   3dd8c:	cmp	r0, #0
   3dd90:	bne	3ddc8 <__assert_fail@plt+0x2b20c>
   3dd94:	add	r0, sp, #7
   3dd98:	movw	r1, #60894	; 0xedde
   3dd9c:	movt	r1, #3
   3dda0:	bl	124cc <strcmp@plt>
   3dda4:	cmp	r0, #0
   3dda8:	beq	3ddc8 <__assert_fail@plt+0x2b20c>
   3ddac:	add	r0, sp, #7
   3ddb0:	movw	r1, #19588	; 0x4c84
   3ddb4:	movt	r1, #4
   3ddb8:	bl	124cc <strcmp@plt>
   3ddbc:	mov	r4, r0
   3ddc0:	cmp	r0, #0
   3ddc4:	movwne	r4, #1
   3ddc8:	mov	r0, r4
   3ddcc:	sub	sp, fp, #8
   3ddd0:	pop	{r4, sl, fp, pc}
   3ddd4:	mov	r2, #0
   3ddd8:	mov	r3, #1
   3dddc:	strb	r3, [r0, #28]
   3dde0:	str	r2, [r0, #20]
   3dde4:	str	r2, [r0, #24]
   3dde8:	str	r1, [r0, r2, lsl #2]
   3ddec:	add	r2, r2, #1
   3ddf0:	cmp	r2, #4
   3ddf4:	bne	3dde8 <__assert_fail@plt+0x2b22c>
   3ddf8:	str	r1, [r0, #16]
   3ddfc:	bx	lr
   3de00:	ldrb	r0, [r0, #28]
   3de04:	bx	lr
   3de08:	ldr	r2, [r0, #20]
   3de0c:	ldrb	r3, [r0, #28]
   3de10:	eor	r3, r3, #1
   3de14:	add	r2, r2, r3
   3de18:	and	r2, r2, #3
   3de1c:	ldr	ip, [r0, r2, lsl #2]
   3de20:	str	r1, [r0, r2, lsl #2]
   3de24:	str	r2, [r0, #20]
   3de28:	ldr	r1, [r0, #24]
   3de2c:	cmp	r2, r1
   3de30:	addeq	r1, r1, r3
   3de34:	andeq	r1, r1, #3
   3de38:	streq	r1, [r0, #24]
   3de3c:	mov	r1, #0
   3de40:	strb	r1, [r0, #28]
   3de44:	mov	r0, ip
   3de48:	bx	lr
   3de4c:	push	{r4, sl, fp, lr}
   3de50:	add	fp, sp, #8
   3de54:	mov	r4, r0
   3de58:	bl	3de00 <__assert_fail@plt+0x2b244>
   3de5c:	cmp	r0, #0
   3de60:	bne	3de9c <__assert_fail@plt+0x2b2e0>
   3de64:	ldr	r1, [r4, #16]
   3de68:	ldr	r2, [r4, #20]
   3de6c:	ldr	r0, [r4, r2, lsl #2]
   3de70:	str	r1, [r4, r2, lsl #2]
   3de74:	ldr	r1, [r4, #20]
   3de78:	ldr	r2, [r4, #24]
   3de7c:	cmp	r1, r2
   3de80:	moveq	r1, #1
   3de84:	strbeq	r1, [r4, #28]
   3de88:	popeq	{r4, sl, fp, pc}
   3de8c:	sub	r1, r1, #1
   3de90:	and	r1, r1, #3
   3de94:	str	r1, [r4, #20]
   3de98:	pop	{r4, sl, fp, pc}
   3de9c:	bl	12b68 <abort@plt>
   3dea0:	push	{fp, lr}
   3dea4:	mov	fp, sp
   3dea8:	bl	128d4 <__errno_location@plt>
   3deac:	mov	r1, #12
   3deb0:	str	r1, [r0]
   3deb4:	mov	r0, #0
   3deb8:	pop	{fp, pc}
   3debc:	b	2ed04 <__assert_fail@plt+0x1c148>
   3dec0:	cmp	r1, #0
   3dec4:	orreq	r1, r1, #1
   3dec8:	b	2f804 <__assert_fail@plt+0x1cc48>
   3decc:	b	2c49c <__assert_fail@plt+0x198e0>
   3ded0:	clz	r3, r2
   3ded4:	lsr	ip, r3, #5
   3ded8:	clz	r3, r1
   3dedc:	lsr	r3, r3, #5
   3dee0:	orrs	r3, r3, ip
   3dee4:	movwne	r1, #1
   3dee8:	movwne	r2, #1
   3deec:	b	2f858 <__assert_fail@plt+0x1cc9c>
   3def0:	push	{fp, lr}
   3def4:	mov	fp, sp
   3def8:	mov	r0, #14
   3defc:	bl	12a30 <nl_langinfo@plt>
   3df00:	movw	r1, #2143	; 0x85f
   3df04:	movt	r1, #4
   3df08:	cmp	r0, #0
   3df0c:	movne	r1, r0
   3df10:	ldrb	r2, [r1]
   3df14:	movw	r0, #19594	; 0x4c8a
   3df18:	movt	r0, #4
   3df1c:	cmp	r2, #0
   3df20:	movne	r0, r1
   3df24:	pop	{fp, pc}
   3df28:	push	{r4, sl, fp, lr}
   3df2c:	add	fp, sp, #8
   3df30:	mov	r4, #0
   3df34:	adds	r0, r0, #16
   3df38:	adc	r1, r4, #0
   3df3c:	rsb	r2, r1, #0
   3df40:	eors	r2, r2, r1
   3df44:	movwne	r2, #1
   3df48:	cmp	r0, #0
   3df4c:	blt	3df6c <__assert_fail@plt+0x2b3b0>
   3df50:	cmp	r2, #0
   3df54:	asreq	r2, r0, #31
   3df58:	eoreq	r3, r0, r0
   3df5c:	andeq	r2, r2, #1
   3df60:	eoreq	r1, r1, r2
   3df64:	orrseq	r1, r3, r1
   3df68:	beq	3df74 <__assert_fail@plt+0x2b3b8>
   3df6c:	mov	r0, r4
   3df70:	pop	{r4, sl, fp, pc}
   3df74:	bl	127e4 <malloc@plt>
   3df78:	cmp	r0, #0
   3df7c:	addne	r4, r0, #8
   3df80:	movne	r1, #8
   3df84:	bfine	r4, r1, #0, #4
   3df88:	subne	r0, r4, r0
   3df8c:	strbne	r0, [r4, #-1]
   3df90:	mov	r0, r4
   3df94:	pop	{r4, sl, fp, pc}
   3df98:	tst	r0, #7
   3df9c:	bne	3dfb4 <__assert_fail@plt+0x2b3f8>
   3dfa0:	tst	r0, #8
   3dfa4:	bxeq	lr
   3dfa8:	ldrb	r1, [r0, #-1]
   3dfac:	sub	r0, r0, r1
   3dfb0:	b	2ca78 <__assert_fail@plt+0x19ebc>
   3dfb4:	push	{fp, lr}
   3dfb8:	mov	fp, sp
   3dfbc:	bl	12b68 <abort@plt>
   3dfc0:	push	{r4, sl, fp, lr}
   3dfc4:	add	fp, sp, #8
   3dfc8:	mov	r4, r0
   3dfcc:	bl	12544 <wcwidth@plt>
   3dfd0:	cmn	r0, #1
   3dfd4:	popgt	{r4, sl, fp, pc}
   3dfd8:	mov	r0, r4
   3dfdc:	bl	126ac <iswcntrl@plt>
   3dfe0:	clz	r0, r0
   3dfe4:	lsr	r0, r0, #5
   3dfe8:	pop	{r4, sl, fp, pc}
   3dfec:	push	{r4, r5, r6, sl, fp, lr}
   3dff0:	add	fp, sp, #16
   3dff4:	mov	r5, r1
   3dff8:	mov	r4, r0
   3dffc:	ldr	r6, [r1], #16
   3e000:	cmp	r6, r1
   3e004:	bne	3e018 <__assert_fail@plt+0x2b45c>
   3e008:	ldr	r2, [r5, #4]
   3e00c:	add	r6, r4, #16
   3e010:	mov	r0, r6
   3e014:	bl	125c8 <memcpy@plt>
   3e018:	str	r6, [r4]
   3e01c:	ldr	r0, [r5, #4]
   3e020:	str	r0, [r4, #4]
   3e024:	ldrb	r0, [r5, #8]
   3e028:	strb	r0, [r4, #8]
   3e02c:	cmp	r0, #0
   3e030:	ldrne	r0, [r5, #12]
   3e034:	strne	r0, [r4, #12]
   3e038:	pop	{r4, r5, r6, sl, fp, pc}
   3e03c:	ubfx	r1, r0, #5, #3
   3e040:	movw	r2, #19600	; 0x4c90
   3e044:	movt	r2, #4
   3e048:	ldr	r1, [r2, r1, lsl #2]
   3e04c:	and	r0, r0, #31
   3e050:	mov	r2, #1
   3e054:	and	r0, r1, r2, lsl r0
   3e058:	cmp	r0, #0
   3e05c:	movwne	r0, #1
   3e060:	bx	lr
   3e064:	push	{r4, r5, r6, sl, fp, lr}
   3e068:	add	fp, sp, #16
   3e06c:	sub	sp, sp, #56	; 0x38
   3e070:	mov	r5, r0
   3e074:	bl	12730 <__ctype_get_mb_cur_max@plt>
   3e078:	cmp	r0, #2
   3e07c:	bcc	3e108 <__assert_fail@plt+0x2b54c>
   3e080:	mov	r4, #0
   3e084:	str	r4, [sp, #8]
   3e088:	str	r4, [sp, #4]
   3e08c:	strb	r4, [sp]
   3e090:	str	r5, [sp, #16]
   3e094:	strb	r4, [sp, #12]
   3e098:	mov	r0, sp
   3e09c:	bl	24d44 <__assert_fail@plt+0x12188>
   3e0a0:	ldrb	r0, [sp, #24]
   3e0a4:	cmp	r0, #0
   3e0a8:	beq	3e0b8 <__assert_fail@plt+0x2b4fc>
   3e0ac:	ldr	r0, [sp, #28]
   3e0b0:	cmp	r0, #0
   3e0b4:	beq	3e0fc <__assert_fail@plt+0x2b540>
   3e0b8:	mov	r6, #0
   3e0bc:	mov	r5, sp
   3e0c0:	mov	r4, #0
   3e0c4:	strb	r6, [sp, #12]
   3e0c8:	ldr	r0, [sp, #16]
   3e0cc:	ldr	r1, [sp, #20]
   3e0d0:	add	r0, r0, r1
   3e0d4:	str	r0, [sp, #16]
   3e0d8:	mov	r0, r5
   3e0dc:	bl	24d44 <__assert_fail@plt+0x12188>
   3e0e0:	add	r4, r4, #1
   3e0e4:	ldr	r0, [sp, #28]
   3e0e8:	ldrb	r1, [sp, #24]
   3e0ec:	cmp	r1, #0
   3e0f0:	beq	3e0c4 <__assert_fail@plt+0x2b508>
   3e0f4:	cmp	r0, #0
   3e0f8:	bne	3e0c4 <__assert_fail@plt+0x2b508>
   3e0fc:	mov	r0, r4
   3e100:	sub	sp, fp, #16
   3e104:	pop	{r4, r5, r6, sl, fp, pc}
   3e108:	mov	r0, r5
   3e10c:	sub	sp, fp, #16
   3e110:	pop	{r4, r5, r6, sl, fp, lr}
   3e114:	b	1288c <strlen@plt>
   3e118:	push	{r4, r5, r6, sl, fp, lr}
   3e11c:	add	fp, sp, #16
   3e120:	mov	r4, r3
   3e124:	orr	r2, r2, #18688	; 0x4900
   3e128:	orr	r2, r2, #524288	; 0x80000
   3e12c:	bl	25568 <__assert_fail@plt+0x129ac>
   3e130:	mov	r5, r0
   3e134:	mov	r0, #0
   3e138:	cmp	r5, #0
   3e13c:	poplt	{r4, r5, r6, sl, fp, pc}
   3e140:	mov	r0, r5
   3e144:	bl	12a78 <fdopendir@plt>
   3e148:	cmp	r0, #0
   3e14c:	strne	r5, [r4]
   3e150:	popne	{r4, r5, r6, sl, fp, pc}
   3e154:	bl	128d4 <__errno_location@plt>
   3e158:	mov	r4, r0
   3e15c:	ldr	r6, [r0]
   3e160:	mov	r0, r5
   3e164:	bl	12b74 <close@plt>
   3e168:	str	r6, [r4]
   3e16c:	mov	r0, #0
   3e170:	pop	{r4, r5, r6, sl, fp, pc}
   3e174:	b	3e178 <__assert_fail@plt+0x2b5bc>
   3e178:	push	{r4, r5, r6, r7, fp, lr}
   3e17c:	add	fp, sp, #16
   3e180:	mov	r6, r2
   3e184:	mov	r4, r1
   3e188:	bl	3e214 <__assert_fail@plt+0x2b658>
   3e18c:	cmp	r0, #0
   3e190:	beq	3e1c0 <__assert_fail@plt+0x2b604>
   3e194:	mov	r7, r0
   3e198:	bl	1288c <strlen@plt>
   3e19c:	cmp	r0, r6
   3e1a0:	bcs	3e1e0 <__assert_fail@plt+0x2b624>
   3e1a4:	add	r2, r0, #1
   3e1a8:	mov	r0, r4
   3e1ac:	mov	r1, r7
   3e1b0:	bl	125c8 <memcpy@plt>
   3e1b4:	mov	r5, #0
   3e1b8:	mov	r0, r5
   3e1bc:	pop	{r4, r5, r6, r7, fp, pc}
   3e1c0:	mov	r5, #22
   3e1c4:	cmp	r6, #0
   3e1c8:	movne	r0, #0
   3e1cc:	strbne	r0, [r4]
   3e1d0:	movne	r0, r5
   3e1d4:	popne	{r4, r5, r6, r7, fp, pc}
   3e1d8:	mov	r0, r5
   3e1dc:	pop	{r4, r5, r6, r7, fp, pc}
   3e1e0:	mov	r5, #34	; 0x22
   3e1e4:	cmp	r6, #0
   3e1e8:	beq	3e208 <__assert_fail@plt+0x2b64c>
   3e1ec:	sub	r6, r6, #1
   3e1f0:	mov	r0, r4
   3e1f4:	mov	r1, r7
   3e1f8:	mov	r2, r6
   3e1fc:	bl	125c8 <memcpy@plt>
   3e200:	mov	r0, #0
   3e204:	strb	r0, [r4, r6]
   3e208:	mov	r0, r5
   3e20c:	pop	{r4, r5, r6, r7, fp, pc}
   3e210:	b	3e214 <__assert_fail@plt+0x2b658>
   3e214:	mov	r1, #0
   3e218:	b	129e8 <setlocale@plt>
   3e21c:	eor	r1, r1, #-2147483648	; 0x80000000
   3e220:	b	3e228 <__assert_fail@plt+0x2b66c>
   3e224:	eor	r3, r3, #-2147483648	; 0x80000000
   3e228:	push	{r4, r5, lr}
   3e22c:	lsl	r4, r1, #1
   3e230:	lsl	r5, r3, #1
   3e234:	teq	r4, r5
   3e238:	teqeq	r0, r2
   3e23c:	orrsne	ip, r4, r0
   3e240:	orrsne	ip, r5, r2
   3e244:	mvnsne	ip, r4, asr #21
   3e248:	mvnsne	ip, r5, asr #21
   3e24c:	beq	3e438 <__assert_fail@plt+0x2b87c>
   3e250:	lsr	r4, r4, #21
   3e254:	rsbs	r5, r4, r5, lsr #21
   3e258:	rsblt	r5, r5, #0
   3e25c:	ble	3e27c <__assert_fail@plt+0x2b6c0>
   3e260:	add	r4, r4, r5
   3e264:	eor	r2, r0, r2
   3e268:	eor	r3, r1, r3
   3e26c:	eor	r0, r2, r0
   3e270:	eor	r1, r3, r1
   3e274:	eor	r2, r0, r2
   3e278:	eor	r3, r1, r3
   3e27c:	cmp	r5, #54	; 0x36
   3e280:	pophi	{r4, r5, pc}
   3e284:	tst	r1, #-2147483648	; 0x80000000
   3e288:	lsl	r1, r1, #12
   3e28c:	mov	ip, #1048576	; 0x100000
   3e290:	orr	r1, ip, r1, lsr #12
   3e294:	beq	3e2a0 <__assert_fail@plt+0x2b6e4>
   3e298:	rsbs	r0, r0, #0
   3e29c:	rsc	r1, r1, #0
   3e2a0:	tst	r3, #-2147483648	; 0x80000000
   3e2a4:	lsl	r3, r3, #12
   3e2a8:	orr	r3, ip, r3, lsr #12
   3e2ac:	beq	3e2b8 <__assert_fail@plt+0x2b6fc>
   3e2b0:	rsbs	r2, r2, #0
   3e2b4:	rsc	r3, r3, #0
   3e2b8:	teq	r4, r5
   3e2bc:	beq	3e420 <__assert_fail@plt+0x2b864>
   3e2c0:	sub	r4, r4, #1
   3e2c4:	rsbs	lr, r5, #32
   3e2c8:	blt	3e2e4 <__assert_fail@plt+0x2b728>
   3e2cc:	lsl	ip, r2, lr
   3e2d0:	adds	r0, r0, r2, lsr r5
   3e2d4:	adc	r1, r1, #0
   3e2d8:	adds	r0, r0, r3, lsl lr
   3e2dc:	adcs	r1, r1, r3, asr r5
   3e2e0:	b	3e300 <__assert_fail@plt+0x2b744>
   3e2e4:	sub	r5, r5, #32
   3e2e8:	add	lr, lr, #32
   3e2ec:	cmp	r2, #1
   3e2f0:	lsl	ip, r3, lr
   3e2f4:	orrcs	ip, ip, #2
   3e2f8:	adds	r0, r0, r3, asr r5
   3e2fc:	adcs	r1, r1, r3, asr #31
   3e300:	and	r5, r1, #-2147483648	; 0x80000000
   3e304:	bpl	3e314 <__assert_fail@plt+0x2b758>
   3e308:	rsbs	ip, ip, #0
   3e30c:	rscs	r0, r0, #0
   3e310:	rsc	r1, r1, #0
   3e314:	cmp	r1, #1048576	; 0x100000
   3e318:	bcc	3e358 <__assert_fail@plt+0x2b79c>
   3e31c:	cmp	r1, #2097152	; 0x200000
   3e320:	bcc	3e340 <__assert_fail@plt+0x2b784>
   3e324:	lsrs	r1, r1, #1
   3e328:	rrxs	r0, r0
   3e32c:	rrx	ip, ip
   3e330:	add	r4, r4, #1
   3e334:	lsl	r2, r4, #21
   3e338:	cmn	r2, #4194304	; 0x400000
   3e33c:	bcs	3e498 <__assert_fail@plt+0x2b8dc>
   3e340:	cmp	ip, #-2147483648	; 0x80000000
   3e344:	lsrseq	ip, r0, #1
   3e348:	adcs	r0, r0, #0
   3e34c:	adc	r1, r1, r4, lsl #20
   3e350:	orr	r1, r1, r5
   3e354:	pop	{r4, r5, pc}
   3e358:	lsls	ip, ip, #1
   3e35c:	adcs	r0, r0, r0
   3e360:	adc	r1, r1, r1
   3e364:	tst	r1, #1048576	; 0x100000
   3e368:	sub	r4, r4, #1
   3e36c:	bne	3e340 <__assert_fail@plt+0x2b784>
   3e370:	teq	r1, #0
   3e374:	moveq	r1, r0
   3e378:	moveq	r0, #0
   3e37c:	clz	r3, r1
   3e380:	addeq	r3, r3, #32
   3e384:	sub	r3, r3, #11
   3e388:	subs	r2, r3, #32
   3e38c:	bge	3e3b0 <__assert_fail@plt+0x2b7f4>
   3e390:	adds	r2, r2, #12
   3e394:	ble	3e3ac <__assert_fail@plt+0x2b7f0>
   3e398:	add	ip, r2, #20
   3e39c:	rsb	r2, r2, #12
   3e3a0:	lsl	r0, r1, ip
   3e3a4:	lsr	r1, r1, r2
   3e3a8:	b	3e3c0 <__assert_fail@plt+0x2b804>
   3e3ac:	add	r2, r2, #20
   3e3b0:	rsble	ip, r2, #32
   3e3b4:	lsl	r1, r1, r2
   3e3b8:	orrle	r1, r1, r0, lsr ip
   3e3bc:	lslle	r0, r0, r2
   3e3c0:	subs	r4, r4, r3
   3e3c4:	addge	r1, r1, r4, lsl #20
   3e3c8:	orrge	r1, r1, r5
   3e3cc:	popge	{r4, r5, pc}
   3e3d0:	mvn	r4, r4
   3e3d4:	subs	r4, r4, #31
   3e3d8:	bge	3e414 <__assert_fail@plt+0x2b858>
   3e3dc:	adds	r4, r4, #12
   3e3e0:	bgt	3e3fc <__assert_fail@plt+0x2b840>
   3e3e4:	add	r4, r4, #20
   3e3e8:	rsb	r2, r4, #32
   3e3ec:	lsr	r0, r0, r4
   3e3f0:	orr	r0, r0, r1, lsl r2
   3e3f4:	orr	r1, r5, r1, lsr r4
   3e3f8:	pop	{r4, r5, pc}
   3e3fc:	rsb	r4, r4, #12
   3e400:	rsb	r2, r4, #32
   3e404:	lsr	r0, r0, r2
   3e408:	orr	r0, r0, r1, lsl r4
   3e40c:	mov	r1, r5
   3e410:	pop	{r4, r5, pc}
   3e414:	lsr	r0, r1, r4
   3e418:	mov	r1, r5
   3e41c:	pop	{r4, r5, pc}
   3e420:	teq	r4, #0
   3e424:	eor	r3, r3, #1048576	; 0x100000
   3e428:	eoreq	r1, r1, #1048576	; 0x100000
   3e42c:	addeq	r4, r4, #1
   3e430:	subne	r5, r5, #1
   3e434:	b	3e2c0 <__assert_fail@plt+0x2b704>
   3e438:	mvns	ip, r4, asr #21
   3e43c:	mvnsne	ip, r5, asr #21
   3e440:	beq	3e4a8 <__assert_fail@plt+0x2b8ec>
   3e444:	teq	r4, r5
   3e448:	teqeq	r0, r2
   3e44c:	beq	3e460 <__assert_fail@plt+0x2b8a4>
   3e450:	orrs	ip, r4, r0
   3e454:	moveq	r1, r3
   3e458:	moveq	r0, r2
   3e45c:	pop	{r4, r5, pc}
   3e460:	teq	r1, r3
   3e464:	movne	r1, #0
   3e468:	movne	r0, #0
   3e46c:	popne	{r4, r5, pc}
   3e470:	lsrs	ip, r4, #21
   3e474:	bne	3e488 <__assert_fail@plt+0x2b8cc>
   3e478:	lsls	r0, r0, #1
   3e47c:	adcs	r1, r1, r1
   3e480:	orrcs	r1, r1, #-2147483648	; 0x80000000
   3e484:	pop	{r4, r5, pc}
   3e488:	adds	r4, r4, #4194304	; 0x400000
   3e48c:	addcc	r1, r1, #1048576	; 0x100000
   3e490:	popcc	{r4, r5, pc}
   3e494:	and	r5, r1, #-2147483648	; 0x80000000
   3e498:	orr	r1, r5, #2130706432	; 0x7f000000
   3e49c:	orr	r1, r1, #15728640	; 0xf00000
   3e4a0:	mov	r0, #0
   3e4a4:	pop	{r4, r5, pc}
   3e4a8:	mvns	ip, r4, asr #21
   3e4ac:	movne	r1, r3
   3e4b0:	movne	r0, r2
   3e4b4:	mvnseq	ip, r5, asr #21
   3e4b8:	movne	r3, r1
   3e4bc:	movne	r2, r0
   3e4c0:	orrs	r4, r0, r1, lsl #12
   3e4c4:	orrseq	r5, r2, r3, lsl #12
   3e4c8:	teqeq	r1, r3
   3e4cc:	orrne	r1, r1, #524288	; 0x80000
   3e4d0:	pop	{r4, r5, pc}
   3e4d4:	teq	r0, #0
   3e4d8:	moveq	r1, #0
   3e4dc:	bxeq	lr
   3e4e0:	push	{r4, r5, lr}
   3e4e4:	mov	r4, #1024	; 0x400
   3e4e8:	add	r4, r4, #50	; 0x32
   3e4ec:	mov	r5, #0
   3e4f0:	mov	r1, #0
   3e4f4:	b	3e370 <__assert_fail@plt+0x2b7b4>
   3e4f8:	teq	r0, #0
   3e4fc:	moveq	r1, #0
   3e500:	bxeq	lr
   3e504:	push	{r4, r5, lr}
   3e508:	mov	r4, #1024	; 0x400
   3e50c:	add	r4, r4, #50	; 0x32
   3e510:	ands	r5, r0, #-2147483648	; 0x80000000
   3e514:	rsbmi	r0, r0, #0
   3e518:	mov	r1, #0
   3e51c:	b	3e370 <__assert_fail@plt+0x2b7b4>
   3e520:	lsls	r2, r0, #1
   3e524:	asr	r1, r2, #3
   3e528:	rrx	r1, r1
   3e52c:	lsl	r0, r2, #28
   3e530:	andsne	r3, r2, #-16777216	; 0xff000000
   3e534:	teqne	r3, #-16777216	; 0xff000000
   3e538:	eorne	r1, r1, #939524096	; 0x38000000
   3e53c:	bxne	lr
   3e540:	bics	r2, r2, #-16777216	; 0xff000000
   3e544:	bxeq	lr
   3e548:	teq	r3, #-16777216	; 0xff000000
   3e54c:	orreq	r1, r1, #524288	; 0x80000
   3e550:	bxeq	lr
   3e554:	push	{r4, r5, lr}
   3e558:	mov	r4, #896	; 0x380
   3e55c:	and	r5, r1, #-2147483648	; 0x80000000
   3e560:	bic	r1, r1, #-2147483648	; 0x80000000
   3e564:	b	3e370 <__assert_fail@plt+0x2b7b4>
   3e568:	orrs	r2, r0, r1
   3e56c:	bxeq	lr
   3e570:	push	{r4, r5, lr}
   3e574:	mov	r5, #0
   3e578:	b	3e598 <__assert_fail@plt+0x2b9dc>
   3e57c:	orrs	r2, r0, r1
   3e580:	bxeq	lr
   3e584:	push	{r4, r5, lr}
   3e588:	ands	r5, r1, #-2147483648	; 0x80000000
   3e58c:	bpl	3e598 <__assert_fail@plt+0x2b9dc>
   3e590:	rsbs	r0, r0, #0
   3e594:	rsc	r1, r1, #0
   3e598:	mov	r4, #1024	; 0x400
   3e59c:	add	r4, r4, #50	; 0x32
   3e5a0:	lsrs	ip, r1, #22
   3e5a4:	beq	3e314 <__assert_fail@plt+0x2b758>
   3e5a8:	mov	r2, #3
   3e5ac:	lsrs	ip, ip, #3
   3e5b0:	addne	r2, r2, #3
   3e5b4:	lsrs	ip, ip, #3
   3e5b8:	addne	r2, r2, #3
   3e5bc:	add	r2, r2, ip, lsr #3
   3e5c0:	rsb	r3, r2, #32
   3e5c4:	lsl	ip, r0, r3
   3e5c8:	lsr	r0, r0, r2
   3e5cc:	orr	r0, r0, r1, lsl r3
   3e5d0:	lsr	r1, r1, r2
   3e5d4:	add	r4, r4, r2
   3e5d8:	b	3e314 <__assert_fail@plt+0x2b758>
   3e5dc:	cmp	r3, #0
   3e5e0:	cmpeq	r2, #0
   3e5e4:	bne	3e608 <__assert_fail@plt+0x2ba4c>
   3e5e8:	cmp	r1, #0
   3e5ec:	movlt	r1, #-2147483648	; 0x80000000
   3e5f0:	movlt	r0, #0
   3e5f4:	blt	3e604 <__assert_fail@plt+0x2ba48>
   3e5f8:	cmpeq	r0, #0
   3e5fc:	mvnne	r1, #-2147483648	; 0x80000000
   3e600:	mvnne	r0, #0
   3e604:	b	3e6ec <__assert_fail@plt+0x2bb30>
   3e608:	sub	sp, sp, #8
   3e60c:	push	{sp, lr}
   3e610:	cmp	r1, #0
   3e614:	blt	3e634 <__assert_fail@plt+0x2ba78>
   3e618:	cmp	r3, #0
   3e61c:	blt	3e668 <__assert_fail@plt+0x2baac>
   3e620:	bl	3e740 <__assert_fail@plt+0x2bb84>
   3e624:	ldr	lr, [sp, #4]
   3e628:	add	sp, sp, #8
   3e62c:	pop	{r2, r3}
   3e630:	bx	lr
   3e634:	rsbs	r0, r0, #0
   3e638:	sbc	r1, r1, r1, lsl #1
   3e63c:	cmp	r3, #0
   3e640:	blt	3e68c <__assert_fail@plt+0x2bad0>
   3e644:	bl	3e740 <__assert_fail@plt+0x2bb84>
   3e648:	ldr	lr, [sp, #4]
   3e64c:	add	sp, sp, #8
   3e650:	pop	{r2, r3}
   3e654:	rsbs	r0, r0, #0
   3e658:	sbc	r1, r1, r1, lsl #1
   3e65c:	rsbs	r2, r2, #0
   3e660:	sbc	r3, r3, r3, lsl #1
   3e664:	bx	lr
   3e668:	rsbs	r2, r2, #0
   3e66c:	sbc	r3, r3, r3, lsl #1
   3e670:	bl	3e740 <__assert_fail@plt+0x2bb84>
   3e674:	ldr	lr, [sp, #4]
   3e678:	add	sp, sp, #8
   3e67c:	pop	{r2, r3}
   3e680:	rsbs	r0, r0, #0
   3e684:	sbc	r1, r1, r1, lsl #1
   3e688:	bx	lr
   3e68c:	rsbs	r2, r2, #0
   3e690:	sbc	r3, r3, r3, lsl #1
   3e694:	bl	3e740 <__assert_fail@plt+0x2bb84>
   3e698:	ldr	lr, [sp, #4]
   3e69c:	add	sp, sp, #8
   3e6a0:	pop	{r2, r3}
   3e6a4:	rsbs	r2, r2, #0
   3e6a8:	sbc	r3, r3, r3, lsl #1
   3e6ac:	bx	lr
   3e6b0:	cmp	r3, #0
   3e6b4:	cmpeq	r2, #0
   3e6b8:	bne	3e6d0 <__assert_fail@plt+0x2bb14>
   3e6bc:	cmp	r1, #0
   3e6c0:	cmpeq	r0, #0
   3e6c4:	mvnne	r1, #0
   3e6c8:	mvnne	r0, #0
   3e6cc:	b	3e6ec <__assert_fail@plt+0x2bb30>
   3e6d0:	sub	sp, sp, #8
   3e6d4:	push	{sp, lr}
   3e6d8:	bl	3e740 <__assert_fail@plt+0x2bb84>
   3e6dc:	ldr	lr, [sp, #4]
   3e6e0:	add	sp, sp, #8
   3e6e4:	pop	{r2, r3}
   3e6e8:	bx	lr
   3e6ec:	push	{r1, lr}
   3e6f0:	mov	r0, #8
   3e6f4:	bl	12484 <raise@plt>
   3e6f8:	pop	{r1, pc}
   3e6fc:	andeq	r0, r0, r0
   3e700:	vmov	d6, r0, r1
   3e704:	vldr	d7, [pc, #36]	; 3e730 <__assert_fail@plt+0x2bb74>
   3e708:	vldr	d5, [pc, #40]	; 3e738 <__assert_fail@plt+0x2bb7c>
   3e70c:	vmul.f64	d7, d6, d7
   3e710:	vcvt.u32.f64	s14, d7
   3e714:	vcvt.f64.u32	d4, s14
   3e718:	vmov	r1, s14
   3e71c:	vmls.f64	d6, d4, d5
   3e720:	vcvt.u32.f64	s15, d6
   3e724:	vmov	r0, s15
   3e728:	bx	lr
   3e72c:	nop			; (mov r0, r0)
   3e730:	andeq	r0, r0, r0
   3e734:	ldclcc	0, cr0, [r0]
   3e738:	andeq	r0, r0, r0
   3e73c:	mvnsmi	r0, r0
   3e740:	cmp	r1, r3
   3e744:	cmpeq	r0, r2
   3e748:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e74c:	mov	r4, r0
   3e750:	movcc	r0, #0
   3e754:	mov	r5, r1
   3e758:	ldr	lr, [sp, #36]	; 0x24
   3e75c:	movcc	r1, r0
   3e760:	bcc	3e85c <__assert_fail@plt+0x2bca0>
   3e764:	cmp	r3, #0
   3e768:	clzeq	ip, r2
   3e76c:	clzne	ip, r3
   3e770:	addeq	ip, ip, #32
   3e774:	cmp	r5, #0
   3e778:	clzeq	r1, r4
   3e77c:	addeq	r1, r1, #32
   3e780:	clzne	r1, r5
   3e784:	sub	ip, ip, r1
   3e788:	sub	sl, ip, #32
   3e78c:	lsl	r9, r3, ip
   3e790:	rsb	fp, ip, #32
   3e794:	orr	r9, r9, r2, lsl sl
   3e798:	orr	r9, r9, r2, lsr fp
   3e79c:	lsl	r8, r2, ip
   3e7a0:	cmp	r5, r9
   3e7a4:	cmpeq	r4, r8
   3e7a8:	movcc	r0, #0
   3e7ac:	movcc	r1, r0
   3e7b0:	bcc	3e7cc <__assert_fail@plt+0x2bc10>
   3e7b4:	mov	r0, #1
   3e7b8:	subs	r4, r4, r8
   3e7bc:	lsl	r1, r0, sl
   3e7c0:	orr	r1, r1, r0, lsr fp
   3e7c4:	lsl	r0, r0, ip
   3e7c8:	sbc	r5, r5, r9
   3e7cc:	cmp	ip, #0
   3e7d0:	beq	3e85c <__assert_fail@plt+0x2bca0>
   3e7d4:	lsr	r6, r8, #1
   3e7d8:	orr	r6, r6, r9, lsl #31
   3e7dc:	lsr	r7, r9, #1
   3e7e0:	mov	r2, ip
   3e7e4:	b	3e808 <__assert_fail@plt+0x2bc4c>
   3e7e8:	subs	r3, r4, r6
   3e7ec:	sbc	r8, r5, r7
   3e7f0:	adds	r3, r3, r3
   3e7f4:	adc	r8, r8, r8
   3e7f8:	adds	r4, r3, #1
   3e7fc:	adc	r5, r8, #0
   3e800:	subs	r2, r2, #1
   3e804:	beq	3e824 <__assert_fail@plt+0x2bc68>
   3e808:	cmp	r5, r7
   3e80c:	cmpeq	r4, r6
   3e810:	bcs	3e7e8 <__assert_fail@plt+0x2bc2c>
   3e814:	adds	r4, r4, r4
   3e818:	adc	r5, r5, r5
   3e81c:	subs	r2, r2, #1
   3e820:	bne	3e808 <__assert_fail@plt+0x2bc4c>
   3e824:	lsr	r3, r4, ip
   3e828:	orr	r3, r3, r5, lsl fp
   3e82c:	lsr	r2, r5, ip
   3e830:	orr	r3, r3, r5, lsr sl
   3e834:	adds	r0, r0, r4
   3e838:	mov	r4, r3
   3e83c:	lsl	r3, r2, ip
   3e840:	orr	r3, r3, r4, lsl sl
   3e844:	lsl	ip, r4, ip
   3e848:	orr	r3, r3, r4, lsr fp
   3e84c:	adc	r1, r1, r5
   3e850:	subs	r0, r0, ip
   3e854:	mov	r5, r2
   3e858:	sbc	r1, r1, r3
   3e85c:	cmp	lr, #0
   3e860:	strdne	r4, [lr]
   3e864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e868:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3e86c:	mov	r7, r0
   3e870:	ldr	r6, [pc, #72]	; 3e8c0 <__assert_fail@plt+0x2bd04>
   3e874:	ldr	r5, [pc, #72]	; 3e8c4 <__assert_fail@plt+0x2bd08>
   3e878:	add	r6, pc, r6
   3e87c:	add	r5, pc, r5
   3e880:	sub	r6, r6, r5
   3e884:	mov	r8, r1
   3e888:	mov	r9, r2
   3e88c:	bl	12410 <pthread_mutex_unlock@plt-0x20>
   3e890:	asrs	r6, r6, #2
   3e894:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3e898:	mov	r4, #0
   3e89c:	add	r4, r4, #1
   3e8a0:	ldr	r3, [r5], #4
   3e8a4:	mov	r2, r9
   3e8a8:	mov	r1, r8
   3e8ac:	mov	r0, r7
   3e8b0:	blx	r3
   3e8b4:	cmp	r6, r4
   3e8b8:	bne	3e89c <__assert_fail@plt+0x2bce0>
   3e8bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3e8c0:	andeq	r6, r1, ip, ror r6
   3e8c4:	andeq	r6, r1, r4, ror r6
   3e8c8:	bx	lr
   3e8cc:	ldr	r3, [pc, #12]	; 3e8e0 <__assert_fail@plt+0x2bd24>
   3e8d0:	mov	r1, #0
   3e8d4:	add	r3, pc, r3
   3e8d8:	ldr	r2, [r3]
   3e8dc:	b	128f8 <__cxa_atexit@plt>
   3e8e0:	andeq	r6, r1, r0, asr #19
   3e8e4:	mov	r2, r1
   3e8e8:	mov	r1, r0
   3e8ec:	mov	r0, #3
   3e8f0:	b	12b20 <__xstat64@plt>
   3e8f4:	mov	r2, r1
   3e8f8:	mov	r1, r0
   3e8fc:	mov	r0, #3
   3e900:	b	126f4 <__fxstat64@plt>
   3e904:	mov	r2, r1
   3e908:	mov	r1, r0
   3e90c:	mov	r0, #3
   3e910:	b	12b80 <__lxstat64@plt>
   3e914:	push	{lr}		; (str lr, [sp, #-4]!)
   3e918:	sub	sp, sp, #12
   3e91c:	str	r3, [sp]
   3e920:	mov	r3, r2
   3e924:	mov	r2, r1
   3e928:	mov	r1, r0
   3e92c:	mov	r0, #3
   3e930:	bl	126c4 <__fxstatat64@plt>
   3e934:	add	sp, sp, #12
   3e938:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

0003e93c <.fini>:
   3e93c:	push	{r3, lr}
   3e940:	pop	{r3, pc}
