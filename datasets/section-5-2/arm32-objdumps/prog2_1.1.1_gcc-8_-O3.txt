
../repos/prog2/1.1.1:     file format elf32-littlearm


Disassembly of section .init:

00010624 <.init>:
   10624:	push	{r3, lr}
   10628:	bl	108ec <_start@@Base+0x3c>
   1062c:	pop	{r3, pc}

Disassembly of section .plt:

00010630 <printf@plt-0x14>:
   10630:	push	{lr}		; (str lr, [sp, #-4]!)
   10634:	ldr	lr, [pc, #4]	; 10640 <printf@plt-0x4>
   10638:	add	lr, pc, lr
   1063c:	ldr	pc, [lr, #8]!
   10640:	andeq	r0, r1, r0, asr #19

00010644 <printf@plt>:
   10644:	add	ip, pc, #0, 12
   10648:	add	ip, ip, #16, 20	; 0x10000
   1064c:	ldr	pc, [ip, #2496]!	; 0x9c0

00010650 <fopen@plt>:
   10650:	add	ip, pc, #0, 12
   10654:	add	ip, ip, #16, 20	; 0x10000
   10658:	ldr	pc, [ip, #2488]!	; 0x9b8

0001065c <puts@plt>:
   1065c:	add	ip, pc, #0, 12
   10660:	add	ip, ip, #16, 20	; 0x10000
   10664:	ldr	pc, [ip, #2480]!	; 0x9b0

00010668 <__libc_start_main@plt>:
   10668:	add	ip, pc, #0, 12
   1066c:	add	ip, ip, #16, 20	; 0x10000
   10670:	ldr	pc, [ip, #2472]!	; 0x9a8

00010674 <__ctype_tolower_loc@plt>:
   10674:	add	ip, pc, #0, 12
   10678:	add	ip, ip, #16, 20	; 0x10000
   1067c:	ldr	pc, [ip, #2464]!	; 0x9a0

00010680 <__gmon_start__@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2456]!	; 0x998

0001068c <memset@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2448]!	; 0x990

00010698 <fclose@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2440]!	; 0x988

000106a4 <abort@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2432]!	; 0x980

000106b0 <getc@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2424]!	; 0x978

Disassembly of section .text:

000106bc <main@@Base>:
   106bc:	movw	r1, #2644	; 0xa54
   106c0:	movt	r1, #1
   106c4:	strd	r4, [sp, #-20]!	; 0xffffffec
   106c8:	movw	r0, #2648	; 0xa58
   106cc:	movt	r0, #1
   106d0:	strd	r6, [sp, #8]
   106d4:	str	lr, [sp, #16]
   106d8:	vpush	{d8}
   106dc:	sub	sp, sp, #180	; 0xb4
   106e0:	bl	10650 <fopen@plt>
   106e4:	mov	r5, r0
   106e8:	mov	r1, #0
   106ec:	mov	r2, #104	; 0x68
   106f0:	add	r0, sp, #72	; 0x48
   106f4:	mov	r4, r1
   106f8:	bl	1068c <memset@plt>
   106fc:	mov	r0, r5
   10700:	bl	106b0 <getc@plt>
   10704:	cmn	r0, #1
   10708:	beq	107cc <main@@Base+0x110>
   1070c:	bic	r3, r0, #35	; 0x23
   10710:	cmp	r3, #192	; 0xc0
   10714:	beq	10860 <main@@Base+0x1a4>
   10718:	ldr	r3, [sp, #72]	; 0x48
   1071c:	cmp	r0, r3
   10720:	beq	10860 <main@@Base+0x1a4>
   10724:	bic	r3, r0, #32
   10728:	sub	r2, r3, #201	; 0xc9
   1072c:	cmp	r2, #1
   10730:	bls	10880 <main@@Base+0x1c4>
   10734:	ldr	r2, [sp, #16]
   10738:	cmp	r0, r2
   1073c:	beq	10880 <main@@Base+0x1c4>
   10740:	cmp	r3, #205	; 0xcd
   10744:	beq	10894 <main@@Base+0x1d8>
   10748:	cmp	r0, #0
   1074c:	beq	10894 <main@@Base+0x1d8>
   10750:	sub	r2, r3, #211	; 0xd3
   10754:	cmp	r2, #2
   10758:	bls	10888 <main@@Base+0x1cc>
   1075c:	ldr	r2, [sp, #40]	; 0x28
   10760:	cmp	r0, r2
   10764:	beq	10888 <main@@Base+0x1cc>
   10768:	cmp	r3, #218	; 0xda
   1076c:	beq	1089c <main@@Base+0x1e0>
   10770:	cmp	r0, #0
   10774:	beq	1089c <main@@Base+0x1e0>
   10778:	cmp	r3, #199	; 0xc7
   1077c:	beq	108a4 <main@@Base+0x1e8>
   10780:	cmp	r0, #0
   10784:	beq	108a4 <main@@Base+0x1e8>
   10788:	add	r3, r0, #128	; 0x80
   1078c:	mov	r6, r0
   10790:	cmp	r3, #384	; 0x180
   10794:	bcc	1088c <main@@Base+0x1d0>
   10798:	sub	r0, r0, #97	; 0x61
   1079c:	cmp	r0, #25
   107a0:	bhi	106fc <main@@Base+0x40>
   107a4:	add	r3, sp, #176	; 0xb0
   107a8:	add	r4, r4, #1
   107ac:	add	r0, r3, r0, lsl #2
   107b0:	ldr	r3, [r0, #-104]	; 0xffffff98
   107b4:	add	r3, r3, #1
   107b8:	str	r3, [r0, #-104]	; 0xffffff98
   107bc:	mov	r0, r5
   107c0:	bl	106b0 <getc@plt>
   107c4:	cmn	r0, #1
   107c8:	bne	1070c <main@@Base+0x50>
   107cc:	mov	r0, r5
   107d0:	vldr	s17, [pc, #212]	; 108ac <main@@Base+0x1f0>
   107d4:	movw	r6, #2704	; 0xa90
   107d8:	movt	r6, #1
   107dc:	add	r5, sp, #68	; 0x44
   107e0:	bl	10698 <fclose@plt>
   107e4:	movw	r0, #2724	; 0xaa4
   107e8:	movt	r0, #1
   107ec:	bl	1065c <puts@plt>
   107f0:	mov	r1, r4
   107f4:	movw	r0, #2672	; 0xa70
   107f8:	movt	r0, #1
   107fc:	add	r7, sp, #172	; 0xac
   10800:	bl	10644 <printf@plt>
   10804:	vmov	s15, r4
   10808:	mov	r4, #97	; 0x61
   1080c:	vcvt.f32.s32	s16, s15
   10810:	ldr	r3, [r5, #4]!
   10814:	mov	r1, r4
   10818:	mov	r0, r6
   1081c:	add	r4, r4, #1
   10820:	vmov	s14, r3
   10824:	vcvt.f32.s32	s14, s14
   10828:	vdiv.f32	s15, s14, s16
   1082c:	vmul.f32	s15, s15, s17
   10830:	vcvt.f64.f32	d7, s15
   10834:	vmov	r2, r3, d7
   10838:	bl	10644 <printf@plt>
   1083c:	cmp	r5, r7
   10840:	bne	10810 <main@@Base+0x154>
   10844:	mov	r0, #0
   10848:	add	sp, sp, #180	; 0xb4
   1084c:	vpop	{d8}
   10850:	ldrd	r4, [sp]
   10854:	ldrd	r6, [sp, #8]
   10858:	add	sp, sp, #16
   1085c:	pop	{pc}		; (ldr pc, [sp], #4)
   10860:	mov	r6, #388	; 0x184
   10864:	bl	10674 <__ctype_tolower_loc@plt>
   10868:	ldr	r3, [r0]
   1086c:	ldr	r0, [r3, r6]
   10870:	sub	r0, r0, #97	; 0x61
   10874:	cmp	r0, #25
   10878:	bhi	106fc <main@@Base+0x40>
   1087c:	b	107a4 <main@@Base+0xe8>
   10880:	mov	r6, #404	; 0x194
   10884:	b	10864 <main@@Base+0x1a8>
   10888:	mov	r6, #111	; 0x6f
   1088c:	lsl	r6, r6, #2
   10890:	b	10864 <main@@Base+0x1a8>
   10894:	mov	r6, #105	; 0x69
   10898:	b	1088c <main@@Base+0x1d0>
   1089c:	mov	r6, #117	; 0x75
   108a0:	b	1088c <main@@Base+0x1d0>
   108a4:	mov	r6, #99	; 0x63
   108a8:	b	1088c <main@@Base+0x1d0>
   108ac:	sbcmi	r0, r8, #0

000108b0 <_start@@Base>:
   108b0:	mov	fp, #0
   108b4:	mov	lr, #0
   108b8:	pop	{r1}		; (ldr r1, [sp], #4)
   108bc:	mov	r2, sp
   108c0:	push	{r2}		; (str r2, [sp, #-4]!)
   108c4:	push	{r0}		; (str r0, [sp, #-4]!)
   108c8:	ldr	ip, [pc, #16]	; 108e0 <_start@@Base+0x30>
   108cc:	push	{ip}		; (str ip, [sp, #-4]!)
   108d0:	ldr	r0, [pc, #12]	; 108e4 <_start@@Base+0x34>
   108d4:	ldr	r3, [pc, #12]	; 108e8 <_start@@Base+0x38>
   108d8:	bl	10668 <__libc_start_main@plt>
   108dc:	bl	106a4 <abort@plt>
   108e0:	andeq	r0, r1, r4, asr #20
   108e4:			; <UNDEFINED> instruction: 0x000106bc
   108e8:	andeq	r0, r1, r4, ror #19
   108ec:	ldr	r3, [pc, #20]	; 10908 <_start@@Base+0x58>
   108f0:	ldr	r2, [pc, #20]	; 1090c <_start@@Base+0x5c>
   108f4:	add	r3, pc, r3
   108f8:	ldr	r2, [r3, r2]
   108fc:	cmp	r2, #0
   10900:	bxeq	lr
   10904:	b	10680 <__gmon_start__@plt>
   10908:	andeq	r0, r1, r4, lsl #14
   1090c:	andeq	r0, r0, r4, lsr r0
   10910:	ldr	r0, [pc, #24]	; 10930 <_start@@Base+0x80>
   10914:	ldr	r3, [pc, #24]	; 10934 <_start@@Base+0x84>
   10918:	cmp	r3, r0
   1091c:	bxeq	lr
   10920:	ldr	r3, [pc, #16]	; 10938 <_start@@Base+0x88>
   10924:	cmp	r3, #0
   10928:	bxeq	lr
   1092c:	bx	r3
   10930:	andeq	r1, r2, r0, asr #32
   10934:	andeq	r1, r2, r0, asr #32
   10938:	andeq	r0, r0, r0
   1093c:	ldr	r0, [pc, #36]	; 10968 <_start@@Base+0xb8>
   10940:	ldr	r1, [pc, #36]	; 1096c <_start@@Base+0xbc>
   10944:	sub	r1, r1, r0
   10948:	asr	r1, r1, #2
   1094c:	add	r1, r1, r1, lsr #31
   10950:	asrs	r1, r1, #1
   10954:	bxeq	lr
   10958:	ldr	r3, [pc, #16]	; 10970 <_start@@Base+0xc0>
   1095c:	cmp	r3, #0
   10960:	bxeq	lr
   10964:	bx	r3
   10968:	andeq	r1, r2, r0, asr #32
   1096c:	andeq	r1, r2, r0, asr #32
   10970:	andeq	r0, r0, r0
   10974:	push	{r4, lr}
   10978:	ldr	r4, [pc, #24]	; 10998 <_start@@Base+0xe8>
   1097c:	ldrb	r3, [r4]
   10980:	cmp	r3, #0
   10984:	popne	{r4, pc}
   10988:	bl	10910 <_start@@Base+0x60>
   1098c:	mov	r3, #1
   10990:	strb	r3, [r4]
   10994:	pop	{r4, pc}
   10998:	andeq	r1, r2, r0, asr #32
   1099c:	b	1093c <_start@@Base+0x8c>

000109a0 <in_array@@Base>:
   109a0:	cmp	r2, #0
   109a4:	blt	109d4 <in_array@@Base+0x34>
   109a8:	ldr	r3, [r1]
   109ac:	cmp	r0, r3
   109b0:	beq	109dc <in_array@@Base+0x3c>
   109b4:	mov	r3, #0
   109b8:	b	109c8 <in_array@@Base+0x28>
   109bc:	ldr	ip, [r1, #4]!
   109c0:	cmp	ip, r0
   109c4:	beq	109dc <in_array@@Base+0x3c>
   109c8:	add	r3, r3, #1
   109cc:	cmp	r2, r3
   109d0:	bge	109bc <in_array@@Base+0x1c>
   109d4:	mov	r0, #0
   109d8:	bx	lr
   109dc:	mov	r0, #1
   109e0:	bx	lr

000109e4 <__libc_csu_init@@Base>:
   109e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   109e8:	mov	r7, r0
   109ec:	ldr	r6, [pc, #72]	; 10a3c <__libc_csu_init@@Base+0x58>
   109f0:	ldr	r5, [pc, #72]	; 10a40 <__libc_csu_init@@Base+0x5c>
   109f4:	add	r6, pc, r6
   109f8:	add	r5, pc, r5
   109fc:	sub	r6, r6, r5
   10a00:	mov	r8, r1
   10a04:	mov	r9, r2
   10a08:	bl	10624 <printf@plt-0x20>
   10a0c:	asrs	r6, r6, #2
   10a10:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a14:	mov	r4, #0
   10a18:	add	r4, r4, #1
   10a1c:	ldr	r3, [r5], #4
   10a20:	mov	r2, r9
   10a24:	mov	r1, r8
   10a28:	mov	r0, r7
   10a2c:	blx	r3
   10a30:	cmp	r6, r4
   10a34:	bne	10a18 <__libc_csu_init@@Base+0x34>
   10a38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a3c:	andeq	r0, r1, r8, lsl r5
   10a40:	andeq	r0, r1, r0, lsl r5

00010a44 <__libc_csu_fini@@Base>:
   10a44:	bx	lr

Disassembly of section .fini:

00010a48 <.fini>:
   10a48:	push	{r3, lr}
   10a4c:	pop	{r3, pc}
